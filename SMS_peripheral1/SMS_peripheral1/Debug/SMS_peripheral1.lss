
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f38c  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  1001738c  1001738c  0001738c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f18  100173fc  100173fc  000173fc  2**2
                  ALLOC
  3 .stack        00000804  1001a314  1001a314  000173fc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000173fc  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017424  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004c040  00000000  00000000  000174d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000529b  00000000  00000000  00063518  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a569  00000000  00000000  000687b3  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  00072d1c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  0007385c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c388  00000000  00000000  0007435c  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016040  00000000  00000000  000806e4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00141812  00000000  00000000  00096724  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ad8  00000000  00000000  001d7f38  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001738c 	.word	0x1001738c
10008068:	1001738c 	.word	0x1001738c
1000806c:	100173fc 	.word	0x100173fc
10008070:	1001a314 	.word	0x1001a314
10008074:	100173fc 	.word	0x100173fc
10008078:	10017390 	.word	0x10017390
1000807c:	10017400 	.word	0x10017400
10008080:	10014745 	.word	0x10014745
10008084:	1000d965 	.word	0x1000d965

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100173fc 	.word	0x100173fc
100080a8:	00000000 	.word	0x00000000
100080ac:	1001738c 	.word	0x1001738c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017400 	.word	0x10017400
100080dc:	1001738c 	.word	0x1001738c
100080e0:	1001738c 	.word	0x1001738c
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10017418 	.word	0x10017418

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10017418 	.word	0x10017418

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10017418 	.word	0x10017418

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000b551 	.word	0x1000b551

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b0e9 	.word	0x1000b0e9
10008388:	40003400 	.word	0x40003400
1000838c:	1000a671 	.word	0x1000a671

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	1001741c 	.word	0x1001741c
1000841c:	1001ab18 	.word	0x1001ab18

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
1000843c:	b510      	push	{r4, lr}
1000843e:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008440:	4809      	ldr	r0, [pc, #36]	; (10008468 <sms_ble_pair_request_fn+0x2c>)
10008442:	4b0a      	ldr	r3, [pc, #40]	; (1000846c <sms_ble_pair_request_fn+0x30>)
10008444:	4798      	blx	r3
10008446:	4b0a      	ldr	r3, [pc, #40]	; (10008470 <sms_ble_pair_request_fn+0x34>)
10008448:	781a      	ldrb	r2, [r3, #0]
1000844a:	b2d2      	uxtb	r2, r2
1000844c:	4b09      	ldr	r3, [pc, #36]	; (10008474 <sms_ble_pair_request_fn+0x38>)
1000844e:	781b      	ldrb	r3, [r3, #0]
10008450:	b2db      	uxtb	r3, r3
10008452:	4909      	ldr	r1, [pc, #36]	; (10008478 <sms_ble_pair_request_fn+0x3c>)
10008454:	7808      	ldrb	r0, [r1, #0]
10008456:	4909      	ldr	r1, [pc, #36]	; (1000847c <sms_ble_pair_request_fn+0x40>)
10008458:	7b49      	ldrb	r1, [r1, #13]
1000845a:	9000      	str	r0, [sp, #0]
1000845c:	4808      	ldr	r0, [pc, #32]	; (10008480 <sms_ble_pair_request_fn+0x44>)
1000845e:	4c09      	ldr	r4, [pc, #36]	; (10008484 <sms_ble_pair_request_fn+0x48>)
10008460:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008462:	2000      	movs	r0, #0
10008464:	b002      	add	sp, #8
10008466:	bd10      	pop	{r4, pc}
10008468:	1001597c 	.word	0x1001597c
1000846c:	10014a3d 	.word	0x10014a3d
10008470:	10018f90 	.word	0x10018f90
10008474:	10018ec0 	.word	0x10018ec0
10008478:	100190cf 	.word	0x100190cf
1000847c:	10018fac 	.word	0x10018fac
10008480:	10015980 	.word	0x10015980
10008484:	1001491d 	.word	0x1001491d

10008488 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008488:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000848a:	4811      	ldr	r0, [pc, #68]	; (100084d0 <sms_ble_notification_confirmed_fn+0x48>)
1000848c:	4d11      	ldr	r5, [pc, #68]	; (100084d4 <sms_ble_notification_confirmed_fn+0x4c>)
1000848e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008490:	4c11      	ldr	r4, [pc, #68]	; (100084d8 <sms_ble_notification_confirmed_fn+0x50>)
10008492:	7863      	ldrb	r3, [r4, #1]
10008494:	3b01      	subs	r3, #1
10008496:	b2db      	uxtb	r3, r3
10008498:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000849a:	4810      	ldr	r0, [pc, #64]	; (100084dc <sms_ble_notification_confirmed_fn+0x54>)
1000849c:	4b10      	ldr	r3, [pc, #64]	; (100084e0 <sms_ble_notification_confirmed_fn+0x58>)
1000849e:	4798      	blx	r3
100084a0:	4810      	ldr	r0, [pc, #64]	; (100084e4 <sms_ble_notification_confirmed_fn+0x5c>)
100084a2:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
100084a4:	2201      	movs	r2, #1
100084a6:	4252      	negs	r2, r2
100084a8:	4b0f      	ldr	r3, [pc, #60]	; (100084e8 <sms_ble_notification_confirmed_fn+0x60>)
100084aa:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084ac:	2001      	movs	r0, #1
100084ae:	4b0f      	ldr	r3, [pc, #60]	; (100084ec <sms_ble_notification_confirmed_fn+0x64>)
100084b0:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100084b2:	2200      	movs	r2, #0
100084b4:	4b0e      	ldr	r3, [pc, #56]	; (100084f0 <sms_ble_notification_confirmed_fn+0x68>)
100084b6:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100084b8:	2322      	movs	r3, #34	; 0x22
100084ba:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100084bc:	4b0d      	ldr	r3, [pc, #52]	; (100084f4 <sms_ble_notification_confirmed_fn+0x6c>)
100084be:	781b      	ldrb	r3, [r3, #0]
100084c0:	2b00      	cmp	r3, #0
100084c2:	d102      	bne.n	100084ca <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
100084c4:	3201      	adds	r2, #1
100084c6:	4b0c      	ldr	r3, [pc, #48]	; (100084f8 <sms_ble_notification_confirmed_fn+0x70>)
100084c8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
100084ca:	2000      	movs	r0, #0
100084cc:	bd70      	pop	{r4, r5, r6, pc}
100084ce:	46c0      	nop			; (mov r8, r8)
100084d0:	100159d0 	.word	0x100159d0
100084d4:	1001491d 	.word	0x1001491d
100084d8:	10018f90 	.word	0x10018f90
100084dc:	1001597c 	.word	0x1001597c
100084e0:	10014a3d 	.word	0x10014a3d
100084e4:	100159d8 	.word	0x100159d8
100084e8:	10018f88 	.word	0x10018f88
100084ec:	10009d5d 	.word	0x10009d5d
100084f0:	100190cf 	.word	0x100190cf
100084f4:	10018ec0 	.word	0x10018ec0
100084f8:	10018f8d 	.word	0x10018f8d

100084fc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084fc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084fe:	2001      	movs	r0, #1
10008500:	4b08      	ldr	r3, [pc, #32]	; (10008524 <sms_ble_indication_confirmed_fn+0x28>)
10008502:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008504:	2200      	movs	r2, #0
10008506:	4b08      	ldr	r3, [pc, #32]	; (10008528 <sms_ble_indication_confirmed_fn+0x2c>)
10008508:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
1000850a:	3222      	adds	r2, #34	; 0x22
1000850c:	4b07      	ldr	r3, [pc, #28]	; (1000852c <sms_ble_indication_confirmed_fn+0x30>)
1000850e:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008510:	4b07      	ldr	r3, [pc, #28]	; (10008530 <sms_ble_indication_confirmed_fn+0x34>)
10008512:	781b      	ldrb	r3, [r3, #0]
10008514:	2b00      	cmp	r3, #0
10008516:	d102      	bne.n	1000851e <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10008518:	3a21      	subs	r2, #33	; 0x21
1000851a:	4b06      	ldr	r3, [pc, #24]	; (10008534 <sms_ble_indication_confirmed_fn+0x38>)
1000851c:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
1000851e:	2000      	movs	r0, #0
10008520:	bd10      	pop	{r4, pc}
10008522:	46c0      	nop			; (mov r8, r8)
10008524:	10009d5d 	.word	0x10009d5d
10008528:	100190cf 	.word	0x100190cf
1000852c:	10018f90 	.word	0x10018f90
10008530:	10018ec0 	.word	0x10018ec0
10008534:	10018f8d 	.word	0x10018f8d

10008538 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008538:	2300      	movs	r3, #0
1000853a:	4a02      	ldr	r2, [pc, #8]	; (10008544 <sms_ble_init_variables+0xc>)
1000853c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000853e:	4a02      	ldr	r2, [pc, #8]	; (10008548 <sms_ble_init_variables+0x10>)
10008540:	8013      	strh	r3, [r2, #0]
}
10008542:	4770      	bx	lr
10008544:	10018f90 	.word	0x10018f90
10008548:	10019114 	.word	0x10019114

1000854c <sms_ble_power_down>:
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
	sms_led_blink_start(SMS_LED_0_PIN);
}

void sms_ble_power_down(void)
{
1000854c:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
1000854e:	482c      	ldr	r0, [pc, #176]	; (10008600 <sms_ble_power_down+0xb4>)
10008550:	4b2c      	ldr	r3, [pc, #176]	; (10008604 <sms_ble_power_down+0xb8>)
10008552:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008554:	4b2c      	ldr	r3, [pc, #176]	; (10008608 <sms_ble_power_down+0xbc>)
10008556:	781b      	ldrb	r3, [r3, #0]
10008558:	2b00      	cmp	r3, #0
1000855a:	d105      	bne.n	10008568 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
1000855c:	2201      	movs	r2, #1
1000855e:	4b2b      	ldr	r3, [pc, #172]	; (1000860c <sms_ble_power_down+0xc0>)
10008560:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
10008562:	4b2b      	ldr	r3, [pc, #172]	; (10008610 <sms_ble_power_down+0xc4>)
10008564:	4798      	blx	r3
10008566:	e049      	b.n	100085fc <sms_ble_power_down+0xb0>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008568:	4b27      	ldr	r3, [pc, #156]	; (10008608 <sms_ble_power_down+0xbc>)
1000856a:	781b      	ldrb	r3, [r3, #0]
1000856c:	b2db      	uxtb	r3, r3
1000856e:	2b21      	cmp	r3, #33	; 0x21
10008570:	d030      	beq.n	100085d4 <sms_ble_power_down+0x88>
10008572:	d802      	bhi.n	1000857a <sms_ble_power_down+0x2e>
10008574:	2b20      	cmp	r3, #32
10008576:	d005      	beq.n	10008584 <sms_ble_power_down+0x38>
10008578:	e037      	b.n	100085ea <sms_ble_power_down+0x9e>
1000857a:	2b22      	cmp	r3, #34	; 0x22
1000857c:	d017      	beq.n	100085ae <sms_ble_power_down+0x62>
1000857e:	2b23      	cmp	r3, #35	; 0x23
10008580:	d01b      	beq.n	100085ba <sms_ble_power_down+0x6e>
10008582:	e032      	b.n	100085ea <sms_ble_power_down+0x9e>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10008584:	4823      	ldr	r0, [pc, #140]	; (10008614 <sms_ble_power_down+0xc8>)
10008586:	4b24      	ldr	r3, [pc, #144]	; (10008618 <sms_ble_power_down+0xcc>)
10008588:	4798      	blx	r3
1000858a:	4824      	ldr	r0, [pc, #144]	; (1000861c <sms_ble_power_down+0xd0>)
1000858c:	4b24      	ldr	r3, [pc, #144]	; (10008620 <sms_ble_power_down+0xd4>)
1000858e:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008590:	4b24      	ldr	r3, [pc, #144]	; (10008624 <sms_ble_power_down+0xd8>)
10008592:	4798      	blx	r3
10008594:	2800      	cmp	r0, #0
10008596:	d003      	beq.n	100085a0 <sms_ble_power_down+0x54>
				DBG_LOG_CONT_DEV("failed!!!");
10008598:	4823      	ldr	r0, [pc, #140]	; (10008628 <sms_ble_power_down+0xdc>)
1000859a:	4b21      	ldr	r3, [pc, #132]	; (10008620 <sms_ble_power_down+0xd4>)
1000859c:	4798      	blx	r3
1000859e:	e024      	b.n	100085ea <sms_ble_power_down+0x9e>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
100085a0:	4822      	ldr	r0, [pc, #136]	; (1000862c <sms_ble_power_down+0xe0>)
100085a2:	4b1f      	ldr	r3, [pc, #124]	; (10008620 <sms_ble_power_down+0xd4>)
100085a4:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085a6:	2211      	movs	r2, #17
100085a8:	4b17      	ldr	r3, [pc, #92]	; (10008608 <sms_ble_power_down+0xbc>)
100085aa:	701a      	strb	r2, [r3, #0]
100085ac:	e01d      	b.n	100085ea <sms_ble_power_down+0x9e>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
100085ae:	4819      	ldr	r0, [pc, #100]	; (10008614 <sms_ble_power_down+0xc8>)
100085b0:	4b19      	ldr	r3, [pc, #100]	; (10008618 <sms_ble_power_down+0xcc>)
100085b2:	4798      	blx	r3
100085b4:	481e      	ldr	r0, [pc, #120]	; (10008630 <sms_ble_power_down+0xe4>)
100085b6:	4b1a      	ldr	r3, [pc, #104]	; (10008620 <sms_ble_power_down+0xd4>)
100085b8:	4798      	blx	r3
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
100085ba:	4816      	ldr	r0, [pc, #88]	; (10008614 <sms_ble_power_down+0xc8>)
100085bc:	4b16      	ldr	r3, [pc, #88]	; (10008618 <sms_ble_power_down+0xcc>)
100085be:	4798      	blx	r3
100085c0:	481c      	ldr	r0, [pc, #112]	; (10008634 <sms_ble_power_down+0xe8>)
100085c2:	4b17      	ldr	r3, [pc, #92]	; (10008620 <sms_ble_power_down+0xd4>)
100085c4:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
100085c6:	2100      	movs	r1, #0
100085c8:	232b      	movs	r3, #43	; 0x2b
100085ca:	4a1b      	ldr	r2, [pc, #108]	; (10008638 <sms_ble_power_down+0xec>)
100085cc:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
100085ce:	2000      	movs	r0, #0
100085d0:	4b1a      	ldr	r3, [pc, #104]	; (1000863c <sms_ble_power_down+0xf0>)
100085d2:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
100085d4:	480f      	ldr	r0, [pc, #60]	; (10008614 <sms_ble_power_down+0xc8>)
100085d6:	4b10      	ldr	r3, [pc, #64]	; (10008618 <sms_ble_power_down+0xcc>)
100085d8:	4798      	blx	r3
100085da:	4819      	ldr	r0, [pc, #100]	; (10008640 <sms_ble_power_down+0xf4>)
100085dc:	4b10      	ldr	r3, [pc, #64]	; (10008620 <sms_ble_power_down+0xd4>)
100085de:	4798      	blx	r3
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
100085e0:	4b18      	ldr	r3, [pc, #96]	; (10008644 <sms_ble_power_down+0xf8>)
100085e2:	8818      	ldrh	r0, [r3, #0]
100085e4:	2113      	movs	r1, #19
100085e6:	4b18      	ldr	r3, [pc, #96]	; (10008648 <sms_ble_power_down+0xfc>)
100085e8:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085ea:	2211      	movs	r2, #17
100085ec:	4b06      	ldr	r3, [pc, #24]	; (10008608 <sms_ble_power_down+0xbc>)
100085ee:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100085f0:	3a0e      	subs	r2, #14
100085f2:	4b16      	ldr	r3, [pc, #88]	; (1000864c <sms_ble_power_down+0x100>)
100085f4:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
100085f6:	2016      	movs	r0, #22
100085f8:	4b15      	ldr	r3, [pc, #84]	; (10008650 <sms_ble_power_down+0x104>)
100085fa:	4798      	blx	r3
	}
}
100085fc:	bd10      	pop	{r4, pc}
100085fe:	46c0      	nop			; (mov r8, r8)
10008600:	100159e4 	.word	0x100159e4
10008604:	10008c01 	.word	0x10008c01
10008608:	10018f90 	.word	0x10018f90
1000860c:	10018f8d 	.word	0x10018f8d
10008610:	1000d711 	.word	0x1000d711
10008614:	1001597c 	.word	0x1001597c
10008618:	10014a3d 	.word	0x10014a3d
1000861c:	100159fc 	.word	0x100159fc
10008620:	1001491d 	.word	0x1001491d
10008624:	1000e7d1 	.word	0x1000e7d1
10008628:	10015a50 	.word	0x10015a50
1000862c:	10015a5c 	.word	0x10015a5c
10008630:	10015a64 	.word	0x10015a64
10008634:	10015abc 	.word	0x10015abc
10008638:	10019034 	.word	0x10019034
1000863c:	10009a91 	.word	0x10009a91
10008640:	10015ae8 	.word	0x10015ae8
10008644:	10018f92 	.word	0x10018f92
10008648:	1000e7fd 	.word	0x1000e7fd
1000864c:	100190cf 	.word	0x100190cf
10008650:	100097cd 	.word	0x100097cd

10008654 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008654:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008656:	2211      	movs	r2, #17
10008658:	4b05      	ldr	r3, [pc, #20]	; (10008670 <sms_ble_adv_report_fn+0x1c>)
1000865a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
1000865c:	4805      	ldr	r0, [pc, #20]	; (10008674 <sms_ble_adv_report_fn+0x20>)
1000865e:	4b06      	ldr	r3, [pc, #24]	; (10008678 <sms_ble_adv_report_fn+0x24>)
10008660:	4798      	blx	r3
10008662:	4806      	ldr	r0, [pc, #24]	; (1000867c <sms_ble_adv_report_fn+0x28>)
10008664:	4b06      	ldr	r3, [pc, #24]	; (10008680 <sms_ble_adv_report_fn+0x2c>)
10008666:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
10008668:	4b06      	ldr	r3, [pc, #24]	; (10008684 <sms_ble_adv_report_fn+0x30>)
1000866a:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
1000866c:	2000      	movs	r0, #0
1000866e:	bd10      	pop	{r4, pc}
10008670:	10018f90 	.word	0x10018f90
10008674:	1001597c 	.word	0x1001597c
10008678:	10014a3d 	.word	0x10014a3d
1000867c:	10015b20 	.word	0x10015b20
10008680:	1001491d 	.word	0x1001491d
10008684:	1000854d 	.word	0x1000854d

10008688 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008688:	b570      	push	{r4, r5, r6, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
1000868a:	4b0f      	ldr	r3, [pc, #60]	; (100086c8 <sms_ble_connected_fn+0x40>)
1000868c:	781b      	ldrb	r3, [r3, #0]
1000868e:	2b20      	cmp	r3, #32
10008690:	d115      	bne.n	100086be <sms_ble_connected_fn+0x36>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008692:	8902      	ldrh	r2, [r0, #8]
10008694:	4b0d      	ldr	r3, [pc, #52]	; (100086cc <sms_ble_connected_fn+0x44>)
10008696:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
10008698:	2221      	movs	r2, #33	; 0x21
1000869a:	4b0b      	ldr	r3, [pc, #44]	; (100086c8 <sms_ble_connected_fn+0x40>)
1000869c:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
1000869e:	4e0c      	ldr	r6, [pc, #48]	; (100086d0 <sms_ble_connected_fn+0x48>)
100086a0:	0030      	movs	r0, r6
100086a2:	4d0c      	ldr	r5, [pc, #48]	; (100086d4 <sms_ble_connected_fn+0x4c>)
100086a4:	47a8      	blx	r5
100086a6:	480c      	ldr	r0, [pc, #48]	; (100086d8 <sms_ble_connected_fn+0x50>)
100086a8:	4c0c      	ldr	r4, [pc, #48]	; (100086dc <sms_ble_connected_fn+0x54>)
100086aa:	47a0      	blx	r4
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
100086ac:	0030      	movs	r0, r6
100086ae:	47a8      	blx	r5
100086b0:	480b      	ldr	r0, [pc, #44]	; (100086e0 <sms_ble_connected_fn+0x58>)
100086b2:	47a0      	blx	r4
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
100086b4:	22fa      	movs	r2, #250	; 0xfa
100086b6:	0052      	lsls	r2, r2, #1
100086b8:	4b0a      	ldr	r3, [pc, #40]	; (100086e4 <sms_ble_connected_fn+0x5c>)
100086ba:	601a      	str	r2, [r3, #0]
100086bc:	e001      	b.n	100086c2 <sms_ble_connected_fn+0x3a>
    }
    else {
        sms_ble_power_down();
100086be:	4b0a      	ldr	r3, [pc, #40]	; (100086e8 <sms_ble_connected_fn+0x60>)
100086c0:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
100086c2:	2000      	movs	r0, #0
100086c4:	bd70      	pop	{r4, r5, r6, pc}
100086c6:	46c0      	nop			; (mov r8, r8)
100086c8:	10018f90 	.word	0x10018f90
100086cc:	100190c2 	.word	0x100190c2
100086d0:	1001597c 	.word	0x1001597c
100086d4:	10014a3d 	.word	0x10014a3d
100086d8:	10015b54 	.word	0x10015b54
100086dc:	1001491d 	.word	0x1001491d
100086e0:	10015b84 	.word	0x10015b84
100086e4:	10018f88 	.word	0x10018f88
100086e8:	1000854d 	.word	0x1000854d

100086ec <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
100086ec:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
100086ee:	4b0e      	ldr	r3, [pc, #56]	; (10008728 <sms_ble_paired_fn+0x3c>)
100086f0:	781b      	ldrb	r3, [r3, #0]
100086f2:	2b21      	cmp	r3, #33	; 0x21
100086f4:	d114      	bne.n	10008720 <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
100086f6:	2222      	movs	r2, #34	; 0x22
100086f8:	4b0b      	ldr	r3, [pc, #44]	; (10008728 <sms_ble_paired_fn+0x3c>)
100086fa:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
100086fc:	480b      	ldr	r0, [pc, #44]	; (1000872c <sms_ble_paired_fn+0x40>)
100086fe:	4b0c      	ldr	r3, [pc, #48]	; (10008730 <sms_ble_paired_fn+0x44>)
10008700:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008702:	2101      	movs	r1, #1
10008704:	2001      	movs	r0, #1
10008706:	4b0b      	ldr	r3, [pc, #44]	; (10008734 <sms_ble_paired_fn+0x48>)
10008708:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
1000870a:	480b      	ldr	r0, [pc, #44]	; (10008738 <sms_ble_paired_fn+0x4c>)
1000870c:	4b0b      	ldr	r3, [pc, #44]	; (1000873c <sms_ble_paired_fn+0x50>)
1000870e:	4798      	blx	r3
10008710:	480b      	ldr	r0, [pc, #44]	; (10008740 <sms_ble_paired_fn+0x54>)
10008712:	4b0c      	ldr	r3, [pc, #48]	; (10008744 <sms_ble_paired_fn+0x58>)
10008714:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
10008716:	2201      	movs	r2, #1
10008718:	4252      	negs	r2, r2
1000871a:	4b0b      	ldr	r3, [pc, #44]	; (10008748 <sms_ble_paired_fn+0x5c>)
1000871c:	601a      	str	r2, [r3, #0]
1000871e:	e001      	b.n	10008724 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
10008720:	4b0a      	ldr	r3, [pc, #40]	; (1000874c <sms_ble_paired_fn+0x60>)
10008722:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008724:	2000      	movs	r0, #0
10008726:	bd10      	pop	{r4, pc}
10008728:	10018f90 	.word	0x10018f90
1000872c:	10015b94 	.word	0x10015b94
10008730:	10008c01 	.word	0x10008c01
10008734:	10009b1d 	.word	0x10009b1d
10008738:	1001597c 	.word	0x1001597c
1000873c:	10014a3d 	.word	0x10014a3d
10008740:	100159d8 	.word	0x100159d8
10008744:	1001491d 	.word	0x1001491d
10008748:	10018f88 	.word	0x10018f88
1000874c:	1000854d 	.word	0x1000854d

10008750 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
10008750:	b510      	push	{r4, lr}
10008752:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008754:	2220      	movs	r2, #32
10008756:	4b17      	ldr	r3, [pc, #92]	; (100087b4 <sms_ble_advertise+0x64>)
10008758:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
1000875a:	4b17      	ldr	r3, [pc, #92]	; (100087b8 <sms_ble_advertise+0x68>)
1000875c:	4798      	blx	r3
1000875e:	1e04      	subs	r4, r0, #0
10008760:	d007      	beq.n	10008772 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
10008762:	4816      	ldr	r0, [pc, #88]	; (100087bc <sms_ble_advertise+0x6c>)
10008764:	4b16      	ldr	r3, [pc, #88]	; (100087c0 <sms_ble_advertise+0x70>)
10008766:	4798      	blx	r3
10008768:	4816      	ldr	r0, [pc, #88]	; (100087c4 <sms_ble_advertise+0x74>)
1000876a:	4b17      	ldr	r3, [pc, #92]	; (100087c8 <sms_ble_advertise+0x78>)
1000876c:	4798      	blx	r3
		return status;
1000876e:	0020      	movs	r0, r4
10008770:	e01e      	b.n	100087b0 <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008772:	2300      	movs	r3, #0
10008774:	9302      	str	r3, [sp, #8]
10008776:	4b15      	ldr	r3, [pc, #84]	; (100087cc <sms_ble_advertise+0x7c>)
10008778:	9301      	str	r3, [sp, #4]
1000877a:	23c8      	movs	r3, #200	; 0xc8
1000877c:	00db      	lsls	r3, r3, #3
1000877e:	9300      	str	r3, [sp, #0]
10008780:	2300      	movs	r3, #0
10008782:	2200      	movs	r2, #0
10008784:	2101      	movs	r1, #1
10008786:	2000      	movs	r0, #0
10008788:	4c11      	ldr	r4, [pc, #68]	; (100087d0 <sms_ble_advertise+0x80>)
1000878a:	47a0      	blx	r4
1000878c:	1e04      	subs	r4, r0, #0
1000878e:	d107      	bne.n	100087a0 <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
10008790:	480a      	ldr	r0, [pc, #40]	; (100087bc <sms_ble_advertise+0x6c>)
10008792:	4b0b      	ldr	r3, [pc, #44]	; (100087c0 <sms_ble_advertise+0x70>)
10008794:	4798      	blx	r3
10008796:	480f      	ldr	r0, [pc, #60]	; (100087d4 <sms_ble_advertise+0x84>)
10008798:	4b0b      	ldr	r3, [pc, #44]	; (100087c8 <sms_ble_advertise+0x78>)
1000879a:	4798      	blx	r3
		return AT_BLE_SUCCESS;
1000879c:	2000      	movs	r0, #0
1000879e:	e007      	b.n	100087b0 <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100087a0:	4806      	ldr	r0, [pc, #24]	; (100087bc <sms_ble_advertise+0x6c>)
100087a2:	4b07      	ldr	r3, [pc, #28]	; (100087c0 <sms_ble_advertise+0x70>)
100087a4:	4798      	blx	r3
100087a6:	0021      	movs	r1, r4
100087a8:	480b      	ldr	r0, [pc, #44]	; (100087d8 <sms_ble_advertise+0x88>)
100087aa:	4b07      	ldr	r3, [pc, #28]	; (100087c8 <sms_ble_advertise+0x78>)
100087ac:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100087ae:	20e2      	movs	r0, #226	; 0xe2
}
100087b0:	b004      	add	sp, #16
100087b2:	bd10      	pop	{r4, pc}
100087b4:	10018f90 	.word	0x10018f90
100087b8:	1000cd59 	.word	0x1000cd59
100087bc:	1001597c 	.word	0x1001597c
100087c0:	10014a3d 	.word	0x10014a3d
100087c4:	10015ba8 	.word	0x10015ba8
100087c8:	1001491d 	.word	0x1001491d
100087cc:	0000028f 	.word	0x0000028f
100087d0:	1000e695 	.word	0x1000e695
100087d4:	10015bdc 	.word	0x10015bdc
100087d8:	10015c0c 	.word	0x10015c0c

100087dc <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
100087dc:	b530      	push	{r4, r5, lr}
100087de:	b083      	sub	sp, #12
100087e0:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
100087e2:	4b1c      	ldr	r3, [pc, #112]	; (10008854 <sms_ble_disconnected_fn+0x78>)
100087e4:	781b      	ldrb	r3, [r3, #0]
100087e6:	2b22      	cmp	r3, #34	; 0x22
100087e8:	d10a      	bne.n	10008800 <sms_ble_disconnected_fn+0x24>
        pressure_device.state = PRESSURE_STATE_OFF;
100087ea:	2100      	movs	r1, #0
100087ec:	3309      	adds	r3, #9
100087ee:	4a1a      	ldr	r2, [pc, #104]	; (10008858 <sms_ble_disconnected_fn+0x7c>)
100087f0:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
100087f2:	2000      	movs	r0, #0
100087f4:	4b19      	ldr	r3, [pc, #100]	; (1000885c <sms_ble_disconnected_fn+0x80>)
100087f6:	4798      	blx	r3
        sms_sensors_switch(false, false);
100087f8:	2100      	movs	r1, #0
100087fa:	2000      	movs	r0, #0
100087fc:	4b18      	ldr	r3, [pc, #96]	; (10008860 <sms_ble_disconnected_fn+0x84>)
100087fe:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008800:	4c14      	ldr	r4, [pc, #80]	; (10008854 <sms_ble_disconnected_fn+0x78>)
10008802:	2311      	movs	r3, #17
10008804:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008806:	4817      	ldr	r0, [pc, #92]	; (10008864 <sms_ble_disconnected_fn+0x88>)
10008808:	4b17      	ldr	r3, [pc, #92]	; (10008868 <sms_ble_disconnected_fn+0x8c>)
1000880a:	4798      	blx	r3
1000880c:	7822      	ldrb	r2, [r4, #0]
1000880e:	b2d2      	uxtb	r2, r2
10008810:	4b16      	ldr	r3, [pc, #88]	; (1000886c <sms_ble_disconnected_fn+0x90>)
10008812:	781b      	ldrb	r3, [r3, #0]
10008814:	b2db      	uxtb	r3, r3
10008816:	4916      	ldr	r1, [pc, #88]	; (10008870 <sms_ble_disconnected_fn+0x94>)
10008818:	7808      	ldrb	r0, [r1, #0]
1000881a:	4916      	ldr	r1, [pc, #88]	; (10008874 <sms_ble_disconnected_fn+0x98>)
1000881c:	7b49      	ldrb	r1, [r1, #13]
1000881e:	9000      	str	r0, [sp, #0]
10008820:	4815      	ldr	r0, [pc, #84]	; (10008878 <sms_ble_disconnected_fn+0x9c>)
10008822:	4c16      	ldr	r4, [pc, #88]	; (1000887c <sms_ble_disconnected_fn+0xa0>)
10008824:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008826:	78ab      	ldrb	r3, [r5, #2]
10008828:	2b1a      	cmp	r3, #26
1000882a:	d00b      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
1000882c:	b2da      	uxtb	r2, r3
1000882e:	2a1a      	cmp	r2, #26
10008830:	d804      	bhi.n	1000883c <sms_ble_disconnected_fn+0x60>
10008832:	2b05      	cmp	r3, #5
10008834:	d006      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
10008836:	2b08      	cmp	r3, #8
10008838:	d107      	bne.n	1000884a <sms_ble_disconnected_fn+0x6e>
1000883a:	e003      	b.n	10008844 <sms_ble_disconnected_fn+0x68>
1000883c:	2b29      	cmp	r3, #41	; 0x29
1000883e:	d001      	beq.n	10008844 <sms_ble_disconnected_fn+0x68>
10008840:	2b3b      	cmp	r3, #59	; 0x3b
10008842:	d102      	bne.n	1000884a <sms_ble_disconnected_fn+0x6e>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008844:	4b0e      	ldr	r3, [pc, #56]	; (10008880 <sms_ble_disconnected_fn+0xa4>)
10008846:	4798      	blx	r3
        break;
10008848:	e001      	b.n	1000884e <sms_ble_disconnected_fn+0x72>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
1000884a:	4b0e      	ldr	r3, [pc, #56]	; (10008884 <sms_ble_disconnected_fn+0xa8>)
1000884c:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000884e:	2000      	movs	r0, #0
10008850:	b003      	add	sp, #12
10008852:	bd30      	pop	{r4, r5, pc}
10008854:	10018f90 	.word	0x10018f90
10008858:	10019034 	.word	0x10019034
1000885c:	10009a91 	.word	0x10009a91
10008860:	10009b1d 	.word	0x10009b1d
10008864:	1001597c 	.word	0x1001597c
10008868:	10014a3d 	.word	0x10014a3d
1000886c:	10018ec0 	.word	0x10018ec0
10008870:	100190cf 	.word	0x100190cf
10008874:	10018fac 	.word	0x10018fac
10008878:	10015c50 	.word	0x10015c50
1000887c:	1001491d 	.word	0x1001491d
10008880:	10008751 	.word	0x10008751
10008884:	1000854d 	.word	0x1000854d

10008888 <sms_ble_primary_service_define>:
	}
    return status;
}

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008888:	b510      	push	{r4, lr}
1000888a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000888c:	0001      	movs	r1, r0
1000888e:	3112      	adds	r1, #18
10008890:	2301      	movs	r3, #1
10008892:	9301      	str	r3, [sp, #4]
10008894:	0003      	movs	r3, r0
10008896:	3314      	adds	r3, #20
10008898:	9300      	str	r3, [sp, #0]
1000889a:	2300      	movs	r3, #0
1000889c:	2200      	movs	r2, #0
1000889e:	4c02      	ldr	r4, [pc, #8]	; (100088a8 <sms_ble_primary_service_define+0x20>)
100088a0:	47a0      	blx	r4
}
100088a2:	b002      	add	sp, #8
100088a4:	bd10      	pop	{r4, pc}
100088a6:	46c0      	nop			; (mov r8, r8)
100088a8:	1000ef59 	.word	0x1000ef59

100088ac <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100088ac:	b5f0      	push	{r4, r5, r6, r7, lr}
100088ae:	464f      	mov	r7, r9
100088b0:	4646      	mov	r6, r8
100088b2:	b4c0      	push	{r6, r7}
100088b4:	b083      	sub	sp, #12
100088b6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100088b8:	2801      	cmp	r0, #1
100088ba:	d010      	beq.n	100088de <sms_ble_service_init+0x32>
100088bc:	2800      	cmp	r0, #0
100088be:	d002      	beq.n	100088c6 <sms_ble_service_init+0x1a>
100088c0:	2802      	cmp	r0, #2
100088c2:	d019      	beq.n	100088f8 <sms_ble_service_init+0x4c>
100088c4:	e025      	b.n	10008912 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100088c6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100088c8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100088ca:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100088cc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100088ce:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100088d0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100088d2:	221c      	movs	r2, #28
100088d4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100088d6:	3a1b      	subs	r2, #27
100088d8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100088da:	4691      	mov	r9, r2
100088dc:	e023      	b.n	10008926 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100088de:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
100088e0:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
100088e2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
100088e4:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
100088e6:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
100088e8:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
100088ea:	221c      	movs	r2, #28
100088ec:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
100088ee:	3a14      	subs	r2, #20
100088f0:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
100088f2:	3a06      	subs	r2, #6
100088f4:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
100088f6:	e016      	b.n	10008926 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
100088f8:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
100088fa:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
100088fc:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
100088fe:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008900:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008902:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008904:	221c      	movs	r2, #28
10008906:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008908:	3a08      	subs	r2, #8
1000890a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000890c:	3a11      	subs	r2, #17
1000890e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008910:	e009      	b.n	10008926 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008912:	2300      	movs	r3, #0
10008914:	2400      	movs	r4, #0
10008916:	2500      	movs	r5, #0
10008918:	2600      	movs	r6, #0
1000891a:	2700      	movs	r7, #0
1000891c:	2000      	movs	r0, #0
1000891e:	2200      	movs	r2, #0
10008920:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008922:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008924:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008926:	464a      	mov	r2, r9
10008928:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000892a:	2202      	movs	r2, #2
1000892c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000892e:	4642      	mov	r2, r8
10008930:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008932:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008934:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008936:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008938:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000893a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000893c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000893e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008940:	2300      	movs	r3, #0
10008942:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008944:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008946:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008948:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000894a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000894c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000894e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008950:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008952:	2412      	movs	r4, #18
10008954:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008956:	4662      	mov	r2, ip
10008958:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000895a:	466a      	mov	r2, sp
1000895c:	8892      	ldrh	r2, [r2, #4]
1000895e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008960:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008962:	2011      	movs	r0, #17
10008964:	2234      	movs	r2, #52	; 0x34
10008966:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008968:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000896a:	2200      	movs	r2, #0
1000896c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000896e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008970:	3033      	adds	r0, #51	; 0x33
10008972:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008974:	3001      	adds	r0, #1
10008976:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008978:	3001      	adds	r0, #1
1000897a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000897c:	2248      	movs	r2, #72	; 0x48
1000897e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008980:	3202      	adds	r2, #2
10008982:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008984:	3202      	adds	r2, #2
10008986:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008988:	640b      	str	r3, [r1, #64]	; 0x40
1000898a:	b003      	add	sp, #12
1000898c:	bc0c      	pop	{r2, r3}
1000898e:	4690      	mov	r8, r2
10008990:	4699      	mov	r9, r3
10008992:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008994 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008994:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008996:	4b05      	ldr	r3, [pc, #20]	; (100089ac <sms_button_bt0_callback+0x18>)
10008998:	2201      	movs	r2, #1
1000899a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
1000899c:	7858      	ldrb	r0, [r3, #1]
1000899e:	2300      	movs	r3, #0
100089a0:	2200      	movs	r2, #0
100089a2:	2102      	movs	r1, #2
100089a4:	4c02      	ldr	r4, [pc, #8]	; (100089b0 <sms_button_bt0_callback+0x1c>)
100089a6:	47a0      	blx	r4
}
100089a8:	bd10      	pop	{r4, pc}
100089aa:	46c0      	nop			; (mov r8, r8)
100089ac:	10018fac 	.word	0x10018fac
100089b0:	1000d445 	.word	0x1000d445

100089b4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100089b4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100089b6:	4b05      	ldr	r3, [pc, #20]	; (100089cc <sms_button_bt1_callback+0x18>)
100089b8:	2201      	movs	r2, #1
100089ba:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100089bc:	79d8      	ldrb	r0, [r3, #7]
100089be:	2300      	movs	r3, #0
100089c0:	2200      	movs	r2, #0
100089c2:	2102      	movs	r1, #2
100089c4:	4c02      	ldr	r4, [pc, #8]	; (100089d0 <sms_button_bt1_callback+0x1c>)
100089c6:	47a0      	blx	r4
}
100089c8:	bd10      	pop	{r4, pc}
100089ca:	46c0      	nop			; (mov r8, r8)
100089cc:	10018fac 	.word	0x10018fac
100089d0:	1000d445 	.word	0x1000d445

100089d4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100089d4:	4b08      	ldr	r3, [pc, #32]	; (100089f8 <sms_button_init_variables+0x24>)
100089d6:	2200      	movs	r2, #0
100089d8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
100089da:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
100089dc:	211f      	movs	r1, #31
100089de:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
100089e0:	391e      	subs	r1, #30
100089e2:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
100089e4:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
100089e6:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
100089e8:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
100089ea:	201d      	movs	r0, #29
100089ec:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
100089ee:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
100089f0:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
100089f2:	72da      	strb	r2, [r3, #11]
}
100089f4:	4770      	bx	lr
100089f6:	46c0      	nop			; (mov r8, r8)
100089f8:	10018fac 	.word	0x10018fac

100089fc <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
100089fc:	b510      	push	{r4, lr}
100089fe:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a00:	ac01      	add	r4, sp, #4
10008a02:	0020      	movs	r0, r4
10008a04:	4b20      	ldr	r3, [pc, #128]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a06:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a08:	2300      	movs	r3, #0
10008a0a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a0c:	3302      	adds	r3, #2
10008a0e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a10:	3b01      	subs	r3, #1
10008a12:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a14:	4b1d      	ldr	r3, [pc, #116]	; (10008a8c <sms_button_gpio_init+0x90>)
10008a16:	7858      	ldrb	r0, [r3, #1]
10008a18:	0021      	movs	r1, r4
10008a1a:	4b1d      	ldr	r3, [pc, #116]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a1c:	4798      	blx	r3
10008a1e:	2800      	cmp	r0, #0
10008a20:	d005      	beq.n	10008a2e <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008a22:	481c      	ldr	r0, [pc, #112]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a24:	4b1c      	ldr	r3, [pc, #112]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a26:	4798      	blx	r3
10008a28:	481c      	ldr	r0, [pc, #112]	; (10008a9c <sms_button_gpio_init+0xa0>)
10008a2a:	4b1d      	ldr	r3, [pc, #116]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a2c:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a2e:	ac01      	add	r4, sp, #4
10008a30:	0020      	movs	r0, r4
10008a32:	4b15      	ldr	r3, [pc, #84]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a34:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a36:	2300      	movs	r3, #0
10008a38:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a3a:	3302      	adds	r3, #2
10008a3c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a3e:	3b01      	subs	r3, #1
10008a40:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a42:	4b12      	ldr	r3, [pc, #72]	; (10008a8c <sms_button_gpio_init+0x90>)
10008a44:	79d8      	ldrb	r0, [r3, #7]
10008a46:	0021      	movs	r1, r4
10008a48:	4b11      	ldr	r3, [pc, #68]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a4a:	4798      	blx	r3
10008a4c:	2800      	cmp	r0, #0
10008a4e:	d005      	beq.n	10008a5c <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008a50:	4810      	ldr	r0, [pc, #64]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a52:	4b11      	ldr	r3, [pc, #68]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a54:	4798      	blx	r3
10008a56:	4813      	ldr	r0, [pc, #76]	; (10008aa4 <sms_button_gpio_init+0xa8>)
10008a58:	4b11      	ldr	r3, [pc, #68]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a5a:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008a5c:	ac01      	add	r4, sp, #4
10008a5e:	0020      	movs	r0, r4
10008a60:	4b09      	ldr	r3, [pc, #36]	; (10008a88 <sms_button_gpio_init+0x8c>)
10008a62:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a64:	2300      	movs	r3, #0
10008a66:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008a68:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008a6a:	0021      	movs	r1, r4
10008a6c:	2017      	movs	r0, #23
10008a6e:	4b08      	ldr	r3, [pc, #32]	; (10008a90 <sms_button_gpio_init+0x94>)
10008a70:	4798      	blx	r3
10008a72:	2800      	cmp	r0, #0
10008a74:	d005      	beq.n	10008a82 <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008a76:	4807      	ldr	r0, [pc, #28]	; (10008a94 <sms_button_gpio_init+0x98>)
10008a78:	4b07      	ldr	r3, [pc, #28]	; (10008a98 <sms_button_gpio_init+0x9c>)
10008a7a:	4798      	blx	r3
10008a7c:	480a      	ldr	r0, [pc, #40]	; (10008aa8 <sms_button_gpio_init+0xac>)
10008a7e:	4b08      	ldr	r3, [pc, #32]	; (10008aa0 <sms_button_gpio_init+0xa4>)
10008a80:	4798      	blx	r3
    }
}
10008a82:	b002      	add	sp, #8
10008a84:	bd10      	pop	{r4, pc}
10008a86:	46c0      	nop			; (mov r8, r8)
10008a88:	1000a41d 	.word	0x1000a41d
10008a8c:	10018fac 	.word	0x10018fac
10008a90:	1000a42d 	.word	0x1000a42d
10008a94:	1001597c 	.word	0x1001597c
10008a98:	10014a3d 	.word	0x10014a3d
10008a9c:	10015d5c 	.word	0x10015d5c
10008aa0:	1001491d 	.word	0x1001491d
10008aa4:	10015d94 	.word	0x10015d94
10008aa8:	10015dcc 	.word	0x10015dcc

10008aac <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008aac:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008aae:	4d05      	ldr	r5, [pc, #20]	; (10008ac4 <sms_button_register_callbacks+0x18>)
10008ab0:	7868      	ldrb	r0, [r5, #1]
10008ab2:	2202      	movs	r2, #2
10008ab4:	4904      	ldr	r1, [pc, #16]	; (10008ac8 <sms_button_register_callbacks+0x1c>)
10008ab6:	4c05      	ldr	r4, [pc, #20]	; (10008acc <sms_button_register_callbacks+0x20>)
10008ab8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008aba:	79e8      	ldrb	r0, [r5, #7]
10008abc:	2202      	movs	r2, #2
10008abe:	4904      	ldr	r1, [pc, #16]	; (10008ad0 <sms_button_register_callbacks+0x24>)
10008ac0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008ac2:	bd70      	pop	{r4, r5, r6, pc}
10008ac4:	10018fac 	.word	0x10018fac
10008ac8:	10008995 	.word	0x10008995
10008acc:	1000a7bd 	.word	0x1000a7bd
10008ad0:	100089b5 	.word	0x100089b5

10008ad4 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008ad4:	b510      	push	{r4, lr}
10008ad6:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008ad8:	2800      	cmp	r0, #0
10008ada:	d104      	bne.n	10008ae6 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008adc:	4b0c      	ldr	r3, [pc, #48]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008ade:	7858      	ldrb	r0, [r3, #1]
10008ae0:	4b0c      	ldr	r3, [pc, #48]	; (10008b14 <sms_button_toggle_callback+0x40>)
10008ae2:	4798      	blx	r3
10008ae4:	e005      	b.n	10008af2 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008ae6:	2801      	cmp	r0, #1
10008ae8:	d103      	bne.n	10008af2 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008aea:	4b09      	ldr	r3, [pc, #36]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008aec:	7858      	ldrb	r0, [r3, #1]
10008aee:	4b0a      	ldr	r3, [pc, #40]	; (10008b18 <sms_button_toggle_callback+0x44>)
10008af0:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008af2:	2c00      	cmp	r4, #0
10008af4:	d104      	bne.n	10008b00 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008af6:	4b06      	ldr	r3, [pc, #24]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008af8:	79d8      	ldrb	r0, [r3, #7]
10008afa:	4b06      	ldr	r3, [pc, #24]	; (10008b14 <sms_button_toggle_callback+0x40>)
10008afc:	4798      	blx	r3
10008afe:	e005      	b.n	10008b0c <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008b00:	2c01      	cmp	r4, #1
10008b02:	d103      	bne.n	10008b0c <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008b04:	4b02      	ldr	r3, [pc, #8]	; (10008b10 <sms_button_toggle_callback+0x3c>)
10008b06:	79d8      	ldrb	r0, [r3, #7]
10008b08:	4b03      	ldr	r3, [pc, #12]	; (10008b18 <sms_button_toggle_callback+0x44>)
10008b0a:	4798      	blx	r3
    }
}
10008b0c:	bd10      	pop	{r4, pc}
10008b0e:	46c0      	nop			; (mov r8, r8)
10008b10:	10018fac 	.word	0x10018fac
10008b14:	1000a88d 	.word	0x1000a88d
10008b18:	1000a8e9 	.word	0x1000a8e9

10008b1c <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008b1c:	b510      	push	{r4, lr}
10008b1e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008b20:	466b      	mov	r3, sp
10008b22:	1dda      	adds	r2, r3, #7
10008b24:	2300      	movs	r3, #0
10008b26:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008b28:	4c0d      	ldr	r4, [pc, #52]	; (10008b60 <sms_button_define_services+0x44>)
10008b2a:	0021      	movs	r1, r4
10008b2c:	2000      	movs	r0, #0
10008b2e:	4b0d      	ldr	r3, [pc, #52]	; (10008b64 <sms_button_define_services+0x48>)
10008b30:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008b32:	0020      	movs	r0, r4
10008b34:	4b0c      	ldr	r3, [pc, #48]	; (10008b68 <sms_button_define_services+0x4c>)
10008b36:	4798      	blx	r3
10008b38:	1e04      	subs	r4, r0, #0
10008b3a:	d007      	beq.n	10008b4c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008b3c:	480b      	ldr	r0, [pc, #44]	; (10008b6c <sms_button_define_services+0x50>)
10008b3e:	4b0c      	ldr	r3, [pc, #48]	; (10008b70 <sms_button_define_services+0x54>)
10008b40:	4798      	blx	r3
10008b42:	0021      	movs	r1, r4
10008b44:	480b      	ldr	r0, [pc, #44]	; (10008b74 <sms_button_define_services+0x58>)
10008b46:	4b0c      	ldr	r3, [pc, #48]	; (10008b78 <sms_button_define_services+0x5c>)
10008b48:	4798      	blx	r3
10008b4a:	e007      	b.n	10008b5c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008b4c:	4807      	ldr	r0, [pc, #28]	; (10008b6c <sms_button_define_services+0x50>)
10008b4e:	4b08      	ldr	r3, [pc, #32]	; (10008b70 <sms_button_define_services+0x54>)
10008b50:	4798      	blx	r3
10008b52:	4b0a      	ldr	r3, [pc, #40]	; (10008b7c <sms_button_define_services+0x60>)
10008b54:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008b56:	480a      	ldr	r0, [pc, #40]	; (10008b80 <sms_button_define_services+0x64>)
10008b58:	4b07      	ldr	r3, [pc, #28]	; (10008b78 <sms_button_define_services+0x5c>)
10008b5a:	4798      	blx	r3
    }
10008b5c:	b002      	add	sp, #8
10008b5e:	bd10      	pop	{r4, pc}
10008b60:	10018fbc 	.word	0x10018fbc
10008b64:	100088ad 	.word	0x100088ad
10008b68:	10008889 	.word	0x10008889
10008b6c:	1001597c 	.word	0x1001597c
10008b70:	10014a3d 	.word	0x10014a3d
10008b74:	10015eb4 	.word	0x10015eb4
10008b78:	1001491d 	.word	0x1001491d
10008b7c:	10018fac 	.word	0x10018fac
10008b80:	10015ef8 	.word	0x10015ef8

10008b84 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008b84:	b510      	push	{r4, lr}
10008b86:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008b88:	ac01      	add	r4, sp, #4
10008b8a:	0020      	movs	r0, r4
10008b8c:	4b15      	ldr	r3, [pc, #84]	; (10008be4 <sms_monitor_configure_gpio+0x60>)
10008b8e:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008b90:	2301      	movs	r3, #1
10008b92:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008b94:	0021      	movs	r1, r4
10008b96:	200e      	movs	r0, #14
10008b98:	4b13      	ldr	r3, [pc, #76]	; (10008be8 <sms_monitor_configure_gpio+0x64>)
10008b9a:	4798      	blx	r3
10008b9c:	2800      	cmp	r0, #0
10008b9e:	d005      	beq.n	10008bac <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008ba0:	4812      	ldr	r0, [pc, #72]	; (10008bec <sms_monitor_configure_gpio+0x68>)
10008ba2:	4b13      	ldr	r3, [pc, #76]	; (10008bf0 <sms_monitor_configure_gpio+0x6c>)
10008ba4:	4798      	blx	r3
10008ba6:	4813      	ldr	r0, [pc, #76]	; (10008bf4 <sms_monitor_configure_gpio+0x70>)
10008ba8:	4b13      	ldr	r3, [pc, #76]	; (10008bf8 <sms_monitor_configure_gpio+0x74>)
10008baa:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008bac:	2100      	movs	r1, #0
10008bae:	200e      	movs	r0, #14
10008bb0:	4b12      	ldr	r3, [pc, #72]	; (10008bfc <sms_monitor_configure_gpio+0x78>)
10008bb2:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008bb4:	ac01      	add	r4, sp, #4
10008bb6:	0020      	movs	r0, r4
10008bb8:	4b0a      	ldr	r3, [pc, #40]	; (10008be4 <sms_monitor_configure_gpio+0x60>)
10008bba:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008bbc:	2301      	movs	r3, #1
10008bbe:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008bc0:	0021      	movs	r1, r4
10008bc2:	200f      	movs	r0, #15
10008bc4:	4b08      	ldr	r3, [pc, #32]	; (10008be8 <sms_monitor_configure_gpio+0x64>)
10008bc6:	4798      	blx	r3
10008bc8:	2800      	cmp	r0, #0
10008bca:	d005      	beq.n	10008bd8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008bcc:	4807      	ldr	r0, [pc, #28]	; (10008bec <sms_monitor_configure_gpio+0x68>)
10008bce:	4b08      	ldr	r3, [pc, #32]	; (10008bf0 <sms_monitor_configure_gpio+0x6c>)
10008bd0:	4798      	blx	r3
10008bd2:	4808      	ldr	r0, [pc, #32]	; (10008bf4 <sms_monitor_configure_gpio+0x70>)
10008bd4:	4b08      	ldr	r3, [pc, #32]	; (10008bf8 <sms_monitor_configure_gpio+0x74>)
10008bd6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008bd8:	2100      	movs	r1, #0
10008bda:	200f      	movs	r0, #15
10008bdc:	4b07      	ldr	r3, [pc, #28]	; (10008bfc <sms_monitor_configure_gpio+0x78>)
10008bde:	4798      	blx	r3
}
10008be0:	b002      	add	sp, #8
10008be2:	bd10      	pop	{r4, pc}
10008be4:	1000a41d 	.word	0x1000a41d
10008be8:	1000a42d 	.word	0x1000a42d
10008bec:	1001597c 	.word	0x1001597c
10008bf0:	10014a3d 	.word	0x10014a3d
10008bf4:	10015f40 	.word	0x10015f40
10008bf8:	1001491d 	.word	0x1001491d
10008bfc:	1000a5e5 	.word	0x1000a5e5

10008c00 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008c00:	b570      	push	{r4, r5, r6, lr}
10008c02:	b084      	sub	sp, #16
10008c04:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008c06:	480c      	ldr	r0, [pc, #48]	; (10008c38 <sms_monitor_get_states+0x38>)
10008c08:	4b0c      	ldr	r3, [pc, #48]	; (10008c3c <sms_monitor_get_states+0x3c>)
10008c0a:	4798      	blx	r3
10008c0c:	4b0c      	ldr	r3, [pc, #48]	; (10008c40 <sms_monitor_get_states+0x40>)
10008c0e:	7819      	ldrb	r1, [r3, #0]
10008c10:	4b0c      	ldr	r3, [pc, #48]	; (10008c44 <sms_monitor_get_states+0x44>)
10008c12:	7818      	ldrb	r0, [r3, #0]
10008c14:	4b0c      	ldr	r3, [pc, #48]	; (10008c48 <sms_monitor_get_states+0x48>)
10008c16:	781d      	ldrb	r5, [r3, #0]
10008c18:	4b0c      	ldr	r3, [pc, #48]	; (10008c4c <sms_monitor_get_states+0x4c>)
10008c1a:	781e      	ldrb	r6, [r3, #0]
10008c1c:	4a0c      	ldr	r2, [pc, #48]	; (10008c50 <sms_monitor_get_states+0x50>)
10008c1e:	7b53      	ldrb	r3, [r2, #13]
10008c20:	7b12      	ldrb	r2, [r2, #12]
10008c22:	9603      	str	r6, [sp, #12]
10008c24:	9502      	str	r5, [sp, #8]
10008c26:	9001      	str	r0, [sp, #4]
10008c28:	9100      	str	r1, [sp, #0]
10008c2a:	0021      	movs	r1, r4
10008c2c:	4809      	ldr	r0, [pc, #36]	; (10008c54 <sms_monitor_get_states+0x54>)
10008c2e:	4c0a      	ldr	r4, [pc, #40]	; (10008c58 <sms_monitor_get_states+0x58>)
10008c30:	47a0      	blx	r4
}
10008c32:	b004      	add	sp, #16
10008c34:	bd70      	pop	{r4, r5, r6, pc}
10008c36:	46c0      	nop			; (mov r8, r8)
10008c38:	1001597c 	.word	0x1001597c
10008c3c:	10014a3d 	.word	0x10014a3d
10008c40:	10018f90 	.word	0x10018f90
10008c44:	10018ec0 	.word	0x10018ec0
10008c48:	100190cf 	.word	0x100190cf
10008c4c:	10018f8c 	.word	0x10018f8c
10008c50:	10018fac 	.word	0x10018fac
10008c54:	10015f60 	.word	0x10015f60
10008c58:	1001491d 	.word	0x1001491d

10008c5c <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008c5c:	b530      	push	{r4, r5, lr}
10008c5e:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008c60:	2010      	movs	r0, #16
10008c62:	4c14      	ldr	r4, [pc, #80]	; (10008cb4 <sms_i2c_master_configure+0x58>)
10008c64:	47a0      	blx	r4
10008c66:	4b14      	ldr	r3, [pc, #80]	; (10008cb8 <sms_i2c_master_configure+0x5c>)
10008c68:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008c6a:	2010      	movs	r0, #16
10008c6c:	47a0      	blx	r4
10008c6e:	4b13      	ldr	r3, [pc, #76]	; (10008cbc <sms_i2c_master_configure+0x60>)
10008c70:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008c72:	ac01      	add	r4, sp, #4
10008c74:	0020      	movs	r0, r4
10008c76:	4b12      	ldr	r3, [pc, #72]	; (10008cc0 <sms_i2c_master_configure+0x64>)
10008c78:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008c7a:	2303      	movs	r3, #3
10008c7c:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008c7e:	331b      	adds	r3, #27
10008c80:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008c82:	3b16      	subs	r3, #22
10008c84:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008c86:	3301      	adds	r3, #1
10008c88:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008c8a:	3b07      	subs	r3, #7
10008c8c:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008c8e:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008c90:	4d0c      	ldr	r5, [pc, #48]	; (10008cc4 <sms_i2c_master_configure+0x68>)
10008c92:	4c0d      	ldr	r4, [pc, #52]	; (10008cc8 <sms_i2c_master_configure+0x6c>)
10008c94:	aa01      	add	r2, sp, #4
10008c96:	490d      	ldr	r1, [pc, #52]	; (10008ccc <sms_i2c_master_configure+0x70>)
10008c98:	0028      	movs	r0, r5
10008c9a:	47a0      	blx	r4
10008c9c:	2800      	cmp	r0, #0
10008c9e:	d1f9      	bne.n	10008c94 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008ca0:	4b08      	ldr	r3, [pc, #32]	; (10008cc4 <sms_i2c_master_configure+0x68>)
10008ca2:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008ca4:	2128      	movs	r1, #40	; 0x28
10008ca6:	5c53      	ldrb	r3, [r2, r1]
10008ca8:	07db      	lsls	r3, r3, #31
10008caa:	d4fc      	bmi.n	10008ca6 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008cac:	2301      	movs	r3, #1
10008cae:	7513      	strb	r3, [r2, #20]
}
10008cb0:	b007      	add	sp, #28
10008cb2:	bd30      	pop	{r4, r5, pc}
10008cb4:	10014791 	.word	0x10014791
10008cb8:	100190d8 	.word	0x100190d8
10008cbc:	100190b8 	.word	0x100190b8
10008cc0:	10008305 	.word	0x10008305
10008cc4:	100190c4 	.word	0x100190c4
10008cc8:	1000831d 	.word	0x1000831d
10008ccc:	40003000 	.word	0x40003000

10008cd0 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008cd2:	0006      	movs	r6, r0
10008cd4:	000c      	movs	r4, r1
10008cd6:	0017      	movs	r7, r2
10008cd8:	001d      	movs	r5, r3
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
10008cda:	481c      	ldr	r0, [pc, #112]	; (10008d4c <sms_i2c_master_write+0x7c>)
10008cdc:	4b1c      	ldr	r3, [pc, #112]	; (10008d50 <sms_i2c_master_write+0x80>)
10008cde:	4798      	blx	r3
10008ce0:	0022      	movs	r2, r4
10008ce2:	0031      	movs	r1, r6
10008ce4:	481b      	ldr	r0, [pc, #108]	; (10008d54 <sms_i2c_master_write+0x84>)
10008ce6:	4b1c      	ldr	r3, [pc, #112]	; (10008d58 <sms_i2c_master_write+0x88>)
10008ce8:	4798      	blx	r3
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008cea:	4b1c      	ldr	r3, [pc, #112]	; (10008d5c <sms_i2c_master_write+0x8c>)
10008cec:	801e      	strh	r6, [r3, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008cee:	1c7a      	adds	r2, r7, #1
10008cf0:	b2d2      	uxtb	r2, r2
10008cf2:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008cf4:	685b      	ldr	r3, [r3, #4]
10008cf6:	701c      	strb	r4, [r3, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008cf8:	2f00      	cmp	r7, #0
10008cfa:	d019      	beq.n	10008d30 <sms_i2c_master_write+0x60>
10008cfc:	3f01      	subs	r7, #1
10008cfe:	b2ff      	uxtb	r7, r7
10008d00:	3701      	adds	r7, #1
10008d02:	19ef      	adds	r7, r5, r7
10008d04:	002c      	movs	r4, r5
10008d06:	2301      	movs	r3, #1
10008d08:	1b5e      	subs	r6, r3, r5
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008d0a:	4d14      	ldr	r5, [pc, #80]	; (10008d5c <sms_i2c_master_write+0x8c>)
10008d0c:	1932      	adds	r2, r6, r4
10008d0e:	7823      	ldrb	r3, [r4, #0]
10008d10:	6869      	ldr	r1, [r5, #4]
10008d12:	548b      	strb	r3, [r1, r2]
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
10008d14:	686b      	ldr	r3, [r5, #4]
10008d16:	5c99      	ldrb	r1, [r3, r2]
10008d18:	4811      	ldr	r0, [pc, #68]	; (10008d60 <sms_i2c_master_write+0x90>)
10008d1a:	4a0f      	ldr	r2, [pc, #60]	; (10008d58 <sms_i2c_master_write+0x88>)
10008d1c:	4790      	blx	r2
10008d1e:	3401      	adds	r4, #1
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008d20:	42bc      	cmp	r4, r7
10008d22:	d1f3      	bne.n	10008d0c <sms_i2c_master_write+0x3c>
10008d24:	e004      	b.n	10008d30 <sms_i2c_master_write+0x60>
10008d26:	3c01      	subs	r4, #1
10008d28:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008d2a:	2c00      	cmp	r4, #0
10008d2c:	d104      	bne.n	10008d38 <sms_i2c_master_write+0x68>
10008d2e:	e009      	b.n	10008d44 <sms_i2c_master_write+0x74>
    DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008d30:	4c0c      	ldr	r4, [pc, #48]	; (10008d64 <sms_i2c_master_write+0x94>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d32:	4e0a      	ldr	r6, [pc, #40]	; (10008d5c <sms_i2c_master_write+0x8c>)
10008d34:	4d0c      	ldr	r5, [pc, #48]	; (10008d68 <sms_i2c_master_write+0x98>)
10008d36:	4f0d      	ldr	r7, [pc, #52]	; (10008d6c <sms_i2c_master_write+0x9c>)
10008d38:	0031      	movs	r1, r6
10008d3a:	0028      	movs	r0, r5
10008d3c:	47b8      	blx	r7
10008d3e:	2800      	cmp	r0, #0
10008d40:	d1f1      	bne.n	10008d26 <sms_i2c_master_write+0x56>
10008d42:	e001      	b.n	10008d48 <sms_i2c_master_write+0x78>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008d44:	2001      	movs	r0, #1
10008d46:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008d48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008d4a:	46c0      	nop			; (mov r8, r8)
10008d4c:	1001597c 	.word	0x1001597c
10008d50:	10014a3d 	.word	0x10014a3d
10008d54:	10015fa0 	.word	0x10015fa0
10008d58:	1001491d 	.word	0x1001491d
10008d5c:	100190d8 	.word	0x100190d8
10008d60:	10015fcc 	.word	0x10015fcc
10008d64:	000003e9 	.word	0x000003e9
10008d68:	100190c4 	.word	0x100190c4
10008d6c:	100083b5 	.word	0x100083b5

10008d70 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008d70:	b5f0      	push	{r4, r5, r6, r7, lr}
10008d72:	4647      	mov	r7, r8
10008d74:	b480      	push	{r7}
10008d76:	0017      	movs	r7, r2
10008d78:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008d7a:	b280      	uxth	r0, r0
10008d7c:	4b1d      	ldr	r3, [pc, #116]	; (10008df4 <sms_i2c_master_read+0x84>)
10008d7e:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008d80:	2201      	movs	r2, #1
10008d82:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008d84:	685b      	ldr	r3, [r3, #4]
10008d86:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008d88:	4b1b      	ldr	r3, [pc, #108]	; (10008df8 <sms_i2c_master_read+0x88>)
10008d8a:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008d8c:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d8e:	4c1b      	ldr	r4, [pc, #108]	; (10008dfc <sms_i2c_master_read+0x8c>)
10008d90:	4e18      	ldr	r6, [pc, #96]	; (10008df4 <sms_i2c_master_read+0x84>)
10008d92:	4d1b      	ldr	r5, [pc, #108]	; (10008e00 <sms_i2c_master_read+0x90>)
10008d94:	e003      	b.n	10008d9e <sms_i2c_master_read+0x2e>
10008d96:	3c01      	subs	r4, #1
10008d98:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008d9a:	2c00      	cmp	r4, #0
10008d9c:	d01f      	beq.n	10008dde <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008d9e:	0031      	movs	r1, r6
10008da0:	4818      	ldr	r0, [pc, #96]	; (10008e04 <sms_i2c_master_read+0x94>)
10008da2:	47a8      	blx	r5
10008da4:	2800      	cmp	r0, #0
10008da6:	d1f6      	bne.n	10008d96 <sms_i2c_master_read+0x26>
10008da8:	4e14      	ldr	r6, [pc, #80]	; (10008dfc <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008daa:	4d13      	ldr	r5, [pc, #76]	; (10008df8 <sms_i2c_master_read+0x88>)
10008dac:	4c16      	ldr	r4, [pc, #88]	; (10008e08 <sms_i2c_master_read+0x98>)
10008dae:	e003      	b.n	10008db8 <sms_i2c_master_read+0x48>
10008db0:	3e01      	subs	r6, #1
10008db2:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008db4:	2e00      	cmp	r6, #0
10008db6:	d015      	beq.n	10008de4 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008db8:	0029      	movs	r1, r5
10008dba:	4812      	ldr	r0, [pc, #72]	; (10008e04 <sms_i2c_master_read+0x94>)
10008dbc:	47a0      	blx	r4
10008dbe:	2800      	cmp	r0, #0
10008dc0:	d1f6      	bne.n	10008db0 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008dc2:	2f00      	cmp	r7, #0
10008dc4:	d011      	beq.n	10008dea <sms_i2c_master_read+0x7a>
10008dc6:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008dc8:	490b      	ldr	r1, [pc, #44]	; (10008df8 <sms_i2c_master_read+0x88>)
10008dca:	684a      	ldr	r2, [r1, #4]
10008dcc:	5cd2      	ldrb	r2, [r2, r3]
10008dce:	4640      	mov	r0, r8
10008dd0:	54c2      	strb	r2, [r0, r3]
10008dd2:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008dd4:	b2da      	uxtb	r2, r3
10008dd6:	4297      	cmp	r7, r2
10008dd8:	d8f7      	bhi.n	10008dca <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008dda:	2000      	movs	r0, #0
10008ddc:	e006      	b.n	10008dec <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008dde:	2001      	movs	r0, #1
10008de0:	4240      	negs	r0, r0
10008de2:	e003      	b.n	10008dec <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008de4:	2001      	movs	r0, #1
10008de6:	4240      	negs	r0, r0
10008de8:	e000      	b.n	10008dec <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008dea:	2000      	movs	r0, #0
10008dec:	bc04      	pop	{r2}
10008dee:	4690      	mov	r8, r2
10008df0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008df2:	46c0      	nop			; (mov r8, r8)
10008df4:	100190d8 	.word	0x100190d8
10008df8:	100190b8 	.word	0x100190b8
10008dfc:	000003e9 	.word	0x000003e9
10008e00:	100083d9 	.word	0x100083d9
10008e04:	100190c4 	.word	0x100190c4
10008e08:	10008391 	.word	0x10008391

10008e0c <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008e0c:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
10008e0e:	2344      	movs	r3, #68	; 0x44
10008e10:	4a06      	ldr	r2, [pc, #24]	; (10008e2c <sms_mpu_interrupt_callback+0x20>)
10008e12:	5cd3      	ldrb	r3, [r2, r3]
10008e14:	2b00      	cmp	r3, #0
10008e16:	d008      	beq.n	10008e2a <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
10008e18:	2101      	movs	r1, #1
10008e1a:	2345      	movs	r3, #69	; 0x45
10008e1c:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008e1e:	2300      	movs	r3, #0
10008e20:	2200      	movs	r2, #0
10008e22:	3101      	adds	r1, #1
10008e24:	201e      	movs	r0, #30
10008e26:	4c02      	ldr	r4, [pc, #8]	; (10008e30 <sms_mpu_interrupt_callback+0x24>)
10008e28:	47a0      	blx	r4
	}
}
10008e2a:	bd10      	pop	{r4, pc}
10008e2c:	10018ec4 	.word	0x10018ec4
10008e30:	1000d445 	.word	0x1000d445

10008e34 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
10008e34:	b510      	push	{r4, lr}
10008e36:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008e38:	ac01      	add	r4, sp, #4
10008e3a:	0020      	movs	r0, r4
10008e3c:	4b0a      	ldr	r3, [pc, #40]	; (10008e68 <sms_mpu_configure_gpio+0x34>)
10008e3e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008e40:	2300      	movs	r3, #0
10008e42:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008e44:	3302      	adds	r3, #2
10008e46:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008e48:	3b01      	subs	r3, #1
10008e4a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008e4c:	0021      	movs	r1, r4
10008e4e:	201e      	movs	r0, #30
10008e50:	4b06      	ldr	r3, [pc, #24]	; (10008e6c <sms_mpu_configure_gpio+0x38>)
10008e52:	4798      	blx	r3
10008e54:	2800      	cmp	r0, #0
10008e56:	d005      	beq.n	10008e64 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008e58:	4805      	ldr	r0, [pc, #20]	; (10008e70 <sms_mpu_configure_gpio+0x3c>)
10008e5a:	4b06      	ldr	r3, [pc, #24]	; (10008e74 <sms_mpu_configure_gpio+0x40>)
10008e5c:	4798      	blx	r3
10008e5e:	4806      	ldr	r0, [pc, #24]	; (10008e78 <sms_mpu_configure_gpio+0x44>)
10008e60:	4b06      	ldr	r3, [pc, #24]	; (10008e7c <sms_mpu_configure_gpio+0x48>)
10008e62:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10008e64:	b002      	add	sp, #8
10008e66:	bd10      	pop	{r4, pc}
10008e68:	1000a41d 	.word	0x1000a41d
10008e6c:	1000a42d 	.word	0x1000a42d
10008e70:	1001597c 	.word	0x1001597c
10008e74:	10014a3d 	.word	0x10014a3d
10008e78:	10015fd4 	.word	0x10015fd4
10008e7c:	1001491d 	.word	0x1001491d

10008e80 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10008e80:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10008e82:	2202      	movs	r2, #2
10008e84:	4902      	ldr	r1, [pc, #8]	; (10008e90 <sms_mpu_register_callbacks+0x10>)
10008e86:	201e      	movs	r0, #30
10008e88:	4b02      	ldr	r3, [pc, #8]	; (10008e94 <sms_mpu_register_callbacks+0x14>)
10008e8a:	4798      	blx	r3
}
10008e8c:	bd10      	pop	{r4, pc}
10008e8e:	46c0      	nop			; (mov r8, r8)
10008e90:	10008e0d 	.word	0x10008e0d
10008e94:	1000a7bd 	.word	0x1000a7bd

10008e98 <sms_mpu_define_services>:
	
    return 0;
}

void sms_mpu_define_services(void)
{
10008e98:	b510      	push	{r4, lr}
10008e9a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e9c:	466b      	mov	r3, sp
10008e9e:	1dda      	adds	r2, r3, #7
10008ea0:	2300      	movs	r3, #0
10008ea2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
10008ea4:	4c0e      	ldr	r4, [pc, #56]	; (10008ee0 <sms_mpu_define_services+0x48>)
10008ea6:	0021      	movs	r1, r4
10008ea8:	2002      	movs	r0, #2
10008eaa:	4b0e      	ldr	r3, [pc, #56]	; (10008ee4 <sms_mpu_define_services+0x4c>)
10008eac:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
10008eae:	0020      	movs	r0, r4
10008eb0:	4b0d      	ldr	r3, [pc, #52]	; (10008ee8 <sms_mpu_define_services+0x50>)
10008eb2:	4798      	blx	r3
10008eb4:	1e04      	subs	r4, r0, #0
10008eb6:	d007      	beq.n	10008ec8 <sms_mpu_define_services+0x30>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10008eb8:	480c      	ldr	r0, [pc, #48]	; (10008eec <sms_mpu_define_services+0x54>)
10008eba:	4b0d      	ldr	r3, [pc, #52]	; (10008ef0 <sms_mpu_define_services+0x58>)
10008ebc:	4798      	blx	r3
10008ebe:	0021      	movs	r1, r4
10008ec0:	480c      	ldr	r0, [pc, #48]	; (10008ef4 <sms_mpu_define_services+0x5c>)
10008ec2:	4b0d      	ldr	r3, [pc, #52]	; (10008ef8 <sms_mpu_define_services+0x60>)
10008ec4:	4798      	blx	r3
10008ec6:	e008      	b.n	10008eda <sms_mpu_define_services+0x42>
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
10008ec8:	4808      	ldr	r0, [pc, #32]	; (10008eec <sms_mpu_define_services+0x54>)
10008eca:	4b09      	ldr	r3, [pc, #36]	; (10008ef0 <sms_mpu_define_services+0x58>)
10008ecc:	4798      	blx	r3
10008ece:	237a      	movs	r3, #122	; 0x7a
10008ed0:	4a0a      	ldr	r2, [pc, #40]	; (10008efc <sms_mpu_define_services+0x64>)
10008ed2:	5ad1      	ldrh	r1, [r2, r3]
10008ed4:	480a      	ldr	r0, [pc, #40]	; (10008f00 <sms_mpu_define_services+0x68>)
10008ed6:	4b08      	ldr	r3, [pc, #32]	; (10008ef8 <sms_mpu_define_services+0x60>)
10008ed8:	4798      	blx	r3
    }
}
10008eda:	b002      	add	sp, #8
10008edc:	bd10      	pop	{r4, pc}
10008ede:	46c0      	nop			; (mov r8, r8)
10008ee0:	10018f2c 	.word	0x10018f2c
10008ee4:	100088ad 	.word	0x100088ad
10008ee8:	10008889 	.word	0x10008889
10008eec:	1001597c 	.word	0x1001597c
10008ef0:	10014a3d 	.word	0x10014a3d
10008ef4:	10016014 	.word	0x10016014
10008ef8:	1001491d 	.word	0x1001491d
10008efc:	10018ec4 	.word	0x10018ec4
10008f00:	10016054 	.word	0x10016054

10008f04 <writeByte>:
	}

}

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
10008f04:	b510      	push	{r4, lr}
10008f06:	b082      	sub	sp, #8
10008f08:	466b      	mov	r3, sp
10008f0a:	3307      	adds	r3, #7
10008f0c:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10008f0e:	2201      	movs	r2, #1
10008f10:	4c01      	ldr	r4, [pc, #4]	; (10008f18 <writeByte+0x14>)
10008f12:	47a0      	blx	r4
}
10008f14:	b002      	add	sp, #8
10008f16:	bd10      	pop	{r4, pc}
10008f18:	10008cd1 	.word	0x10008cd1

10008f1c <sms_mpu_calibrate>:
		retVal = 0;
	}
}

void sms_mpu_calibrate(float *dest1, float *dest2)
{
10008f1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008f1e:	465f      	mov	r7, fp
10008f20:	4656      	mov	r6, sl
10008f22:	464d      	mov	r5, r9
10008f24:	4644      	mov	r4, r8
10008f26:	b4f0      	push	{r4, r5, r6, r7}
10008f28:	b08f      	sub	sp, #60	; 0x3c
10008f2a:	9003      	str	r0, [sp, #12]
10008f2c:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	DBG_LOG("Reset...");
10008f2e:	48e3      	ldr	r0, [pc, #908]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008f30:	4de3      	ldr	r5, [pc, #908]	; (100092c0 <sms_mpu_calibrate+0x3a4>)
10008f32:	47a8      	blx	r5
10008f34:	48e3      	ldr	r0, [pc, #908]	; (100092c4 <sms_mpu_calibrate+0x3a8>)
10008f36:	4fe4      	ldr	r7, [pc, #912]	; (100092c8 <sms_mpu_calibrate+0x3ac>)
10008f38:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10008f3a:	2280      	movs	r2, #128	; 0x80
10008f3c:	216b      	movs	r1, #107	; 0x6b
10008f3e:	2069      	movs	r0, #105	; 0x69
10008f40:	4ee2      	ldr	r6, [pc, #904]	; (100092cc <sms_mpu_calibrate+0x3b0>)
10008f42:	47b0      	blx	r6
	delay_ms(100);
10008f44:	2064      	movs	r0, #100	; 0x64
10008f46:	4ce2      	ldr	r4, [pc, #904]	; (100092d0 <sms_mpu_calibrate+0x3b4>)
10008f48:	47a0      	blx	r4
	DBG_LOG_CONT(" done!");
10008f4a:	48e2      	ldr	r0, [pc, #904]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
10008f4c:	47b8      	blx	r7
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	DBG_LOG("Get time source...");
10008f4e:	48db      	ldr	r0, [pc, #876]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008f50:	47a8      	blx	r5
10008f52:	48e1      	ldr	r0, [pc, #900]	; (100092d8 <sms_mpu_calibrate+0x3bc>)
10008f54:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10008f56:	2201      	movs	r2, #1
10008f58:	216b      	movs	r1, #107	; 0x6b
10008f5a:	2069      	movs	r0, #105	; 0x69
10008f5c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
10008f5e:	2200      	movs	r2, #0
10008f60:	216c      	movs	r1, #108	; 0x6c
10008f62:	2069      	movs	r0, #105	; 0x69
10008f64:	47b0      	blx	r6
	delay_ms(200);
10008f66:	20c8      	movs	r0, #200	; 0xc8
10008f68:	47a0      	blx	r4
	DBG_LOG_CONT(" done!");
10008f6a:	48da      	ldr	r0, [pc, #872]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
10008f6c:	47b8      	blx	r7

	// Configure device for bias calculation
	DBG_LOG("Configure device...");
10008f6e:	48d3      	ldr	r0, [pc, #844]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008f70:	47a8      	blx	r5
10008f72:	48da      	ldr	r0, [pc, #872]	; (100092dc <sms_mpu_calibrate+0x3c0>)
10008f74:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10008f76:	2200      	movs	r2, #0
10008f78:	2138      	movs	r1, #56	; 0x38
10008f7a:	2069      	movs	r0, #105	; 0x69
10008f7c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10008f7e:	2200      	movs	r2, #0
10008f80:	2123      	movs	r1, #35	; 0x23
10008f82:	2069      	movs	r0, #105	; 0x69
10008f84:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10008f86:	2200      	movs	r2, #0
10008f88:	216b      	movs	r1, #107	; 0x6b
10008f8a:	2069      	movs	r0, #105	; 0x69
10008f8c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10008f8e:	2200      	movs	r2, #0
10008f90:	2124      	movs	r1, #36	; 0x24
10008f92:	2069      	movs	r0, #105	; 0x69
10008f94:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10008f96:	2200      	movs	r2, #0
10008f98:	216a      	movs	r1, #106	; 0x6a
10008f9a:	2069      	movs	r0, #105	; 0x69
10008f9c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10008f9e:	220c      	movs	r2, #12
10008fa0:	216a      	movs	r1, #106	; 0x6a
10008fa2:	2069      	movs	r0, #105	; 0x69
10008fa4:	47b0      	blx	r6
	delay_ms(15);
10008fa6:	200f      	movs	r0, #15
10008fa8:	47a0      	blx	r4
	DBG_LOG_CONT(" done!");
10008faa:	48ca      	ldr	r0, [pc, #808]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
10008fac:	47b8      	blx	r7
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	DBG_LOG("Configure gyro & accel...");
10008fae:	48c3      	ldr	r0, [pc, #780]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008fb0:	47a8      	blx	r5
10008fb2:	48cb      	ldr	r0, [pc, #812]	; (100092e0 <sms_mpu_calibrate+0x3c4>)
10008fb4:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
10008fb6:	2201      	movs	r2, #1
10008fb8:	211a      	movs	r1, #26
10008fba:	2069      	movs	r0, #105	; 0x69
10008fbc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10008fbe:	2200      	movs	r2, #0
10008fc0:	2119      	movs	r1, #25
10008fc2:	2069      	movs	r0, #105	; 0x69
10008fc4:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
10008fc6:	2200      	movs	r2, #0
10008fc8:	211b      	movs	r1, #27
10008fca:	2069      	movs	r0, #105	; 0x69
10008fcc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10008fce:	2200      	movs	r2, #0
10008fd0:	211c      	movs	r1, #28
10008fd2:	2069      	movs	r0, #105	; 0x69
10008fd4:	47b0      	blx	r6
	DBG_LOG_CONT(" done!");
10008fd6:	48bf      	ldr	r0, [pc, #764]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
10008fd8:	47b8      	blx	r7
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	DBG_LOG("Configure FIFO...");
10008fda:	48b8      	ldr	r0, [pc, #736]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008fdc:	47a8      	blx	r5
10008fde:	48c1      	ldr	r0, [pc, #772]	; (100092e4 <sms_mpu_calibrate+0x3c8>)
10008fe0:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
10008fe2:	2240      	movs	r2, #64	; 0x40
10008fe4:	216a      	movs	r1, #106	; 0x6a
10008fe6:	2069      	movs	r0, #105	; 0x69
10008fe8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10008fea:	2278      	movs	r2, #120	; 0x78
10008fec:	2123      	movs	r1, #35	; 0x23
10008fee:	2069      	movs	r0, #105	; 0x69
10008ff0:	47b0      	blx	r6
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
10008ff2:	2028      	movs	r0, #40	; 0x28
10008ff4:	47a0      	blx	r4
	DBG_LOG_CONT(" done!");
10008ff6:	48b7      	ldr	r0, [pc, #732]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
10008ff8:	47b8      	blx	r7

	// At end of sample accumulation, turn off FIFO sensor read
	DBG_LOG("Turn-off FIFO & read samples...");
10008ffa:	48b0      	ldr	r0, [pc, #704]	; (100092bc <sms_mpu_calibrate+0x3a0>)
10008ffc:	47a8      	blx	r5
10008ffe:	48ba      	ldr	r0, [pc, #744]	; (100092e8 <sms_mpu_calibrate+0x3cc>)
10009000:	47b8      	blx	r7
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009002:	2200      	movs	r2, #0
10009004:	2123      	movs	r1, #35	; 0x23
10009006:	2069      	movs	r0, #105	; 0x69
10009008:	47b0      	blx	r6
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000900a:	ac0b      	add	r4, sp, #44	; 0x2c
1000900c:	0023      	movs	r3, r4
1000900e:	2202      	movs	r2, #2
10009010:	2172      	movs	r1, #114	; 0x72
10009012:	2069      	movs	r0, #105	; 0x69
10009014:	4db5      	ldr	r5, [pc, #724]	; (100092ec <sms_mpu_calibrate+0x3d0>)
10009016:	47a8      	blx	r5
	// At end of sample accumulation, turn off FIFO sensor read
	DBG_LOG("Turn-off FIFO & read samples...");
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009018:	7820      	ldrb	r0, [r4, #0]
1000901a:	0200      	lsls	r0, r0, #8
1000901c:	7863      	ldrb	r3, [r4, #1]
1000901e:	4318      	orrs	r0, r3
10009020:	210c      	movs	r1, #12
10009022:	4bb3      	ldr	r3, [pc, #716]	; (100092f0 <sms_mpu_calibrate+0x3d4>)
10009024:	4798      	blx	r3
10009026:	b283      	uxth	r3, r0
10009028:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
1000902a:	2b00      	cmp	r3, #0
1000902c:	d042      	beq.n	100090b4 <sms_mpu_calibrate+0x198>
1000902e:	2300      	movs	r3, #0
10009030:	4698      	mov	r8, r3
10009032:	2700      	movs	r7, #0
10009034:	469b      	mov	fp, r3
10009036:	469a      	mov	sl, r3
10009038:	4699      	mov	r9, r3
1000903a:	2500      	movs	r5, #0
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000903c:	ac0b      	add	r4, sp, #44	; 0x2c
1000903e:	9301      	str	r3, [sp, #4]
10009040:	0023      	movs	r3, r4
10009042:	220c      	movs	r2, #12
10009044:	2174      	movs	r1, #116	; 0x74
10009046:	2069      	movs	r0, #105	; 0x69
10009048:	4ea8      	ldr	r6, [pc, #672]	; (100092ec <sms_mpu_calibrate+0x3d0>)
1000904a:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
1000904c:	7823      	ldrb	r3, [r4, #0]
1000904e:	021b      	lsls	r3, r3, #8
10009050:	7862      	ldrb	r2, [r4, #1]
10009052:	4313      	orrs	r3, r2
10009054:	b21b      	sxth	r3, r3
10009056:	9a01      	ldr	r2, [sp, #4]
10009058:	4694      	mov	ip, r2
1000905a:	449c      	add	ip, r3
1000905c:	4663      	mov	r3, ip
1000905e:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009060:	78a3      	ldrb	r3, [r4, #2]
10009062:	021b      	lsls	r3, r3, #8
10009064:	78e2      	ldrb	r2, [r4, #3]
10009066:	4313      	orrs	r3, r2
10009068:	b21b      	sxth	r3, r3
1000906a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
1000906c:	7923      	ldrb	r3, [r4, #4]
1000906e:	021b      	lsls	r3, r3, #8
10009070:	7962      	ldrb	r2, [r4, #5]
10009072:	4313      	orrs	r3, r2
10009074:	b21b      	sxth	r3, r3
10009076:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009078:	79a3      	ldrb	r3, [r4, #6]
1000907a:	021b      	lsls	r3, r3, #8
1000907c:	79e2      	ldrb	r2, [r4, #7]
1000907e:	4313      	orrs	r3, r2
10009080:	b21b      	sxth	r3, r3
10009082:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009084:	7a23      	ldrb	r3, [r4, #8]
10009086:	021b      	lsls	r3, r3, #8
10009088:	7a62      	ldrb	r2, [r4, #9]
1000908a:	4313      	orrs	r3, r2
1000908c:	b21b      	sxth	r3, r3
1000908e:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009090:	7aa3      	ldrb	r3, [r4, #10]
10009092:	021b      	lsls	r3, r3, #8
10009094:	7ae2      	ldrb	r2, [r4, #11]
10009096:	4313      	orrs	r3, r2
10009098:	b21b      	sxth	r3, r3
1000909a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
1000909c:	3501      	adds	r5, #1
1000909e:	b2ad      	uxth	r5, r5
100090a0:	9b02      	ldr	r3, [sp, #8]
100090a2:	42ab      	cmp	r3, r5
100090a4:	d1cc      	bne.n	10009040 <sms_mpu_calibrate+0x124>
100090a6:	4653      	mov	r3, sl
100090a8:	46ba      	mov	sl, r7
100090aa:	465a      	mov	r2, fp
100090ac:	46e3      	mov	fp, ip
100090ae:	0016      	movs	r6, r2
100090b0:	001f      	movs	r7, r3
100090b2:	e006      	b.n	100090c2 <sms_mpu_calibrate+0x1a6>

void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
100090b4:	2300      	movs	r3, #0
100090b6:	4698      	mov	r8, r3
100090b8:	2700      	movs	r7, #0
100090ba:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
100090bc:	469b      	mov	fp, r3
100090be:	469a      	mov	sl, r3
100090c0:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	DBG_LOG_CONT(" done!");
100090c2:	4884      	ldr	r0, [pc, #528]	; (100092d4 <sms_mpu_calibrate+0x3b8>)
100090c4:	4b80      	ldr	r3, [pc, #512]	; (100092c8 <sms_mpu_calibrate+0x3ac>)
100090c6:	4798      	blx	r3
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
100090c8:	4c8a      	ldr	r4, [pc, #552]	; (100092f4 <sms_mpu_calibrate+0x3d8>)
100090ca:	9902      	ldr	r1, [sp, #8]
100090cc:	4658      	mov	r0, fp
100090ce:	47a0      	blx	r4
100090d0:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
100090d2:	9b02      	ldr	r3, [sp, #8]
100090d4:	469b      	mov	fp, r3
100090d6:	0019      	movs	r1, r3
100090d8:	4650      	mov	r0, sl
100090da:	47a0      	blx	r4
100090dc:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
100090de:	4659      	mov	r1, fp
100090e0:	4648      	mov	r0, r9
100090e2:	47a0      	blx	r4
100090e4:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
100090e6:	4659      	mov	r1, fp
100090e8:	4640      	mov	r0, r8
100090ea:	47a0      	blx	r4
100090ec:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
100090ee:	4659      	mov	r1, fp
100090f0:	0038      	movs	r0, r7
100090f2:	47a0      	blx	r4
100090f4:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
100090f6:	4659      	mov	r1, fp
100090f8:	0030      	movs	r0, r6
100090fa:	47a0      	blx	r4
100090fc:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
100090fe:	464b      	mov	r3, r9
10009100:	2b00      	cmp	r3, #0
10009102:	dd03      	ble.n	1000910c <sms_mpu_calibrate+0x1f0>
		accel_bias[2] -= (int32_t) accelsensitivity;
10009104:	4b7c      	ldr	r3, [pc, #496]	; (100092f8 <sms_mpu_calibrate+0x3dc>)
10009106:	469c      	mov	ip, r3
10009108:	44e1      	add	r9, ip
1000910a:	e003      	b.n	10009114 <sms_mpu_calibrate+0x1f8>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
1000910c:	2380      	movs	r3, #128	; 0x80
1000910e:	01db      	lsls	r3, r3, #7
10009110:	469c      	mov	ip, r3
10009112:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
10009114:	9b01      	ldr	r3, [sp, #4]
10009116:	4259      	negs	r1, r3
10009118:	17ca      	asrs	r2, r1, #31
1000911a:	2303      	movs	r3, #3
1000911c:	401a      	ands	r2, r3
1000911e:	1852      	adds	r2, r2, r1
10009120:	1091      	asrs	r1, r2, #2
10009122:	1292      	asrs	r2, r2, #10
10009124:	b2d2      	uxtb	r2, r2
10009126:	ac0b      	add	r4, sp, #44	; 0x2c
10009128:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
1000912a:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
1000912c:	9902      	ldr	r1, [sp, #8]
1000912e:	4248      	negs	r0, r1
10009130:	17c1      	asrs	r1, r0, #31
10009132:	4019      	ands	r1, r3
10009134:	1809      	adds	r1, r1, r0
10009136:	1088      	asrs	r0, r1, #2
10009138:	1289      	asrs	r1, r1, #10
1000913a:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
1000913c:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
1000913e:	9e04      	ldr	r6, [sp, #16]
10009140:	4271      	negs	r1, r6
10009142:	17c8      	asrs	r0, r1, #31
10009144:	4003      	ands	r3, r0
10009146:	185b      	adds	r3, r3, r1
10009148:	1099      	asrs	r1, r3, #2
1000914a:	129b      	asrs	r3, r3, #10
1000914c:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
1000914e:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
10009150:	2113      	movs	r1, #19
10009152:	2069      	movs	r0, #105	; 0x69
10009154:	4e5d      	ldr	r6, [pc, #372]	; (100092cc <sms_mpu_calibrate+0x3b0>)
10009156:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009158:	7862      	ldrb	r2, [r4, #1]
1000915a:	2114      	movs	r1, #20
1000915c:	2069      	movs	r0, #105	; 0x69
1000915e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009160:	78a2      	ldrb	r2, [r4, #2]
10009162:	2115      	movs	r1, #21
10009164:	2069      	movs	r0, #105	; 0x69
10009166:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009168:	78e2      	ldrb	r2, [r4, #3]
1000916a:	2116      	movs	r1, #22
1000916c:	2069      	movs	r0, #105	; 0x69
1000916e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009170:	7922      	ldrb	r2, [r4, #4]
10009172:	2117      	movs	r1, #23
10009174:	2069      	movs	r0, #105	; 0x69
10009176:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009178:	7962      	ldrb	r2, [r4, #5]
1000917a:	2118      	movs	r1, #24
1000917c:	2069      	movs	r0, #105	; 0x69
1000917e:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float) gyro_bias[0]/(float) gyrosensitivity;
10009180:	4f5e      	ldr	r7, [pc, #376]	; (100092fc <sms_mpu_calibrate+0x3e0>)
10009182:	9801      	ldr	r0, [sp, #4]
10009184:	47b8      	blx	r7
10009186:	4e5e      	ldr	r6, [pc, #376]	; (10009300 <sms_mpu_calibrate+0x3e4>)
10009188:	495e      	ldr	r1, [pc, #376]	; (10009304 <sms_mpu_calibrate+0x3e8>)
1000918a:	47b0      	blx	r6
1000918c:	9b03      	ldr	r3, [sp, #12]
1000918e:	6018      	str	r0, [r3, #0]
	dest1[1] = (float) gyro_bias[1]/(float) gyrosensitivity;
10009190:	9802      	ldr	r0, [sp, #8]
10009192:	47b8      	blx	r7
10009194:	495b      	ldr	r1, [pc, #364]	; (10009304 <sms_mpu_calibrate+0x3e8>)
10009196:	47b0      	blx	r6
10009198:	9b03      	ldr	r3, [sp, #12]
1000919a:	6058      	str	r0, [r3, #4]
	dest1[2] = (float) gyro_bias[2]/(float) gyrosensitivity;
1000919c:	9804      	ldr	r0, [sp, #16]
1000919e:	47b8      	blx	r7
100091a0:	4958      	ldr	r1, [pc, #352]	; (10009304 <sms_mpu_calibrate+0x3e8>)
100091a2:	47b0      	blx	r6
100091a4:	9b03      	ldr	r3, [sp, #12]
100091a6:	6098      	str	r0, [r3, #8]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100091a8:	0023      	movs	r3, r4
100091aa:	2202      	movs	r2, #2
100091ac:	2177      	movs	r1, #119	; 0x77
100091ae:	2069      	movs	r0, #105	; 0x69
100091b0:	4e4e      	ldr	r6, [pc, #312]	; (100092ec <sms_mpu_calibrate+0x3d0>)
100091b2:	46b0      	mov	r8, r6
100091b4:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100091b6:	7827      	ldrb	r7, [r4, #0]
100091b8:	023f      	lsls	r7, r7, #8
100091ba:	7863      	ldrb	r3, [r4, #1]
100091bc:	431f      	orrs	r7, r3
100091be:	9708      	str	r7, [sp, #32]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100091c0:	0023      	movs	r3, r4
100091c2:	2202      	movs	r2, #2
100091c4:	217a      	movs	r1, #122	; 0x7a
100091c6:	2069      	movs	r0, #105	; 0x69
100091c8:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100091ca:	7826      	ldrb	r6, [r4, #0]
100091cc:	0236      	lsls	r6, r6, #8
100091ce:	7863      	ldrb	r3, [r4, #1]
100091d0:	431e      	orrs	r6, r3
100091d2:	9609      	str	r6, [sp, #36]	; 0x24
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100091d4:	0023      	movs	r3, r4
100091d6:	2202      	movs	r2, #2
100091d8:	217d      	movs	r1, #125	; 0x7d
100091da:	2069      	movs	r0, #105	; 0x69
100091dc:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100091de:	7823      	ldrb	r3, [r4, #0]
100091e0:	021b      	lsls	r3, r3, #8
100091e2:	7861      	ldrb	r1, [r4, #1]
100091e4:	4319      	orrs	r1, r3
100091e6:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
100091e8:	ab07      	add	r3, sp, #28
100091ea:	2200      	movs	r2, #0
100091ec:	701a      	strb	r2, [r3, #0]
100091ee:	705a      	strb	r2, [r3, #1]
100091f0:	709a      	strb	r2, [r3, #2]
100091f2:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
100091f4:	2401      	movs	r4, #1
100091f6:	009a      	lsls	r2, r3, #2
100091f8:	a808      	add	r0, sp, #32
100091fa:	5812      	ldr	r2, [r2, r0]
100091fc:	4222      	tst	r2, r4
100091fe:	d001      	beq.n	10009204 <sms_mpu_calibrate+0x2e8>
10009200:	aa07      	add	r2, sp, #28
10009202:	549c      	strb	r4, [r3, r2]
10009204:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009206:	2b03      	cmp	r3, #3
10009208:	d1f5      	bne.n	100091f6 <sms_mpu_calibrate+0x2da>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
1000920a:	17ea      	asrs	r2, r5, #31
1000920c:	3304      	adds	r3, #4
1000920e:	401a      	ands	r2, r3
10009210:	1952      	adds	r2, r2, r5
10009212:	10d2      	asrs	r2, r2, #3
10009214:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009216:	4652      	mov	r2, sl
10009218:	17d0      	asrs	r0, r2, #31
1000921a:	4018      	ands	r0, r3
1000921c:	4450      	add	r0, sl
1000921e:	10c0      	asrs	r0, r0, #3
10009220:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
10009222:	464a      	mov	r2, r9
10009224:	17d2      	asrs	r2, r2, #31
10009226:	4013      	ands	r3, r2
10009228:	444b      	add	r3, r9
1000922a:	10da      	asrs	r2, r3, #3
1000922c:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
1000922e:	123a      	asrs	r2, r7, #8
10009230:	b2d2      	uxtb	r2, r2
10009232:	ac0b      	add	r4, sp, #44	; 0x2c
10009234:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009236:	a907      	add	r1, sp, #28
10009238:	7808      	ldrb	r0, [r1, #0]
1000923a:	4307      	orrs	r7, r0
1000923c:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
1000923e:	1230      	asrs	r0, r6, #8
10009240:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009242:	7848      	ldrb	r0, [r1, #1]
10009244:	4306      	orrs	r6, r0
10009246:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009248:	1218      	asrs	r0, r3, #8
1000924a:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000924c:	7889      	ldrb	r1, [r1, #2]
1000924e:	430b      	orrs	r3, r1
10009250:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
10009252:	2177      	movs	r1, #119	; 0x77
10009254:	2069      	movs	r0, #105	; 0x69
10009256:	4e1d      	ldr	r6, [pc, #116]	; (100092cc <sms_mpu_calibrate+0x3b0>)
10009258:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
1000925a:	7862      	ldrb	r2, [r4, #1]
1000925c:	2178      	movs	r1, #120	; 0x78
1000925e:	2069      	movs	r0, #105	; 0x69
10009260:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009262:	78a2      	ldrb	r2, [r4, #2]
10009264:	217a      	movs	r1, #122	; 0x7a
10009266:	2069      	movs	r0, #105	; 0x69
10009268:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
1000926a:	78e2      	ldrb	r2, [r4, #3]
1000926c:	217b      	movs	r1, #123	; 0x7b
1000926e:	2069      	movs	r0, #105	; 0x69
10009270:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009272:	7922      	ldrb	r2, [r4, #4]
10009274:	217d      	movs	r1, #125	; 0x7d
10009276:	2069      	movs	r0, #105	; 0x69
10009278:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
1000927a:	7962      	ldrb	r2, [r4, #5]
1000927c:	217e      	movs	r1, #126	; 0x7e
1000927e:	2069      	movs	r0, #105	; 0x69
10009280:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009282:	4e1e      	ldr	r6, [pc, #120]	; (100092fc <sms_mpu_calibrate+0x3e0>)
10009284:	0028      	movs	r0, r5
10009286:	47b0      	blx	r6
10009288:	4c1f      	ldr	r4, [pc, #124]	; (10009308 <sms_mpu_calibrate+0x3ec>)
1000928a:	21e2      	movs	r1, #226	; 0xe2
1000928c:	0589      	lsls	r1, r1, #22
1000928e:	47a0      	blx	r4
10009290:	9d05      	ldr	r5, [sp, #20]
10009292:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
10009294:	4650      	mov	r0, sl
10009296:	47b0      	blx	r6
10009298:	21e2      	movs	r1, #226	; 0xe2
1000929a:	0589      	lsls	r1, r1, #22
1000929c:	47a0      	blx	r4
1000929e:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
100092a0:	4648      	mov	r0, r9
100092a2:	47b0      	blx	r6
100092a4:	21e2      	movs	r1, #226	; 0xe2
100092a6:	0589      	lsls	r1, r1, #22
100092a8:	47a0      	blx	r4
100092aa:	60a8      	str	r0, [r5, #8]
}
100092ac:	b00f      	add	sp, #60	; 0x3c
100092ae:	bc3c      	pop	{r2, r3, r4, r5}
100092b0:	4690      	mov	r8, r2
100092b2:	4699      	mov	r9, r3
100092b4:	46a2      	mov	sl, r4
100092b6:	46ab      	mov	fp, r5
100092b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092ba:	46c0      	nop			; (mov r8, r8)
100092bc:	1001597c 	.word	0x1001597c
100092c0:	10014a3d 	.word	0x10014a3d
100092c4:	10016094 	.word	0x10016094
100092c8:	1001491d 	.word	0x1001491d
100092cc:	10008f05 	.word	0x10008f05
100092d0:	10009d89 	.word	0x10009d89
100092d4:	100159d0 	.word	0x100159d0
100092d8:	100160a0 	.word	0x100160a0
100092dc:	100160b4 	.word	0x100160b4
100092e0:	100160c8 	.word	0x100160c8
100092e4:	100160e4 	.word	0x100160e4
100092e8:	100160f8 	.word	0x100160f8
100092ec:	10008d71 	.word	0x10008d71
100092f0:	10011ffd 	.word	0x10011ffd
100092f4:	10012111 	.word	0x10012111
100092f8:	ffffc000 	.word	0xffffc000
100092fc:	10012855 	.word	0x10012855
10009300:	100123f9 	.word	0x100123f9
10009304:	43030000 	.word	0x43030000
10009308:	1001262d 	.word	0x1001262d

1000930c <readByte>:
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
1000930c:	b530      	push	{r4, r5, lr}
1000930e:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009310:	ac01      	add	r4, sp, #4
10009312:	0023      	movs	r3, r4
10009314:	2201      	movs	r2, #1
10009316:	4d02      	ldr	r5, [pc, #8]	; (10009320 <readByte+0x14>)
10009318:	47a8      	blx	r5
	return data[0];
1000931a:	7820      	ldrb	r0, [r4, #0]
}
1000931c:	b003      	add	sp, #12
1000931e:	bd30      	pop	{r4, r5, pc}
10009320:	10008d71 	.word	0x10008d71

10009324 <sms_mpu_selftest>:
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}

void sms_mpu_selftest(float *destination)
{
10009324:	b5f0      	push	{r4, r5, r6, r7, lr}
10009326:	465f      	mov	r7, fp
10009328:	4656      	mov	r6, sl
1000932a:	464d      	mov	r5, r9
1000932c:	4644      	mov	r4, r8
1000932e:	b4f0      	push	{r4, r5, r6, r7}
10009330:	b09d      	sub	sp, #116	; 0x74
10009332:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009334:	2206      	movs	r2, #6
10009336:	2100      	movs	r1, #0
10009338:	a81a      	add	r0, sp, #104	; 0x68
1000933a:	4ce0      	ldr	r4, [pc, #896]	; (100096bc <sms_mpu_selftest+0x398>)
1000933c:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000933e:	220c      	movs	r2, #12
10009340:	2100      	movs	r1, #0
10009342:	a817      	add	r0, sp, #92	; 0x5c
10009344:	47a0      	blx	r4
10009346:	220c      	movs	r2, #12
10009348:	2100      	movs	r1, #0
1000934a:	a814      	add	r0, sp, #80	; 0x50
1000934c:	47a0      	blx	r4
1000934e:	220c      	movs	r2, #12
10009350:	2100      	movs	r1, #0
10009352:	a811      	add	r0, sp, #68	; 0x44
10009354:	47a0      	blx	r4
10009356:	220c      	movs	r2, #12
10009358:	2100      	movs	r1, #0
1000935a:	a80e      	add	r0, sp, #56	; 0x38
1000935c:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000935e:	2200      	movs	r2, #0
10009360:	2119      	movs	r1, #25
10009362:	2069      	movs	r0, #105	; 0x69
10009364:	4cd6      	ldr	r4, [pc, #856]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009366:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009368:	2202      	movs	r2, #2
1000936a:	211a      	movs	r1, #26
1000936c:	2069      	movs	r0, #105	; 0x69
1000936e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009370:	2200      	movs	r2, #0
10009372:	211b      	movs	r1, #27
10009374:	2069      	movs	r0, #105	; 0x69
10009376:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009378:	2202      	movs	r2, #2
1000937a:	211d      	movs	r1, #29
1000937c:	2069      	movs	r0, #105	; 0x69
1000937e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009380:	2200      	movs	r2, #0
10009382:	211c      	movs	r1, #28
10009384:	2069      	movs	r0, #105	; 0x69
10009386:	47a0      	blx	r4
10009388:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000938a:	ac1a      	add	r4, sp, #104	; 0x68
1000938c:	4ecd      	ldr	r6, [pc, #820]	; (100096c4 <sms_mpu_selftest+0x3a0>)
1000938e:	0023      	movs	r3, r4
10009390:	2206      	movs	r2, #6
10009392:	213b      	movs	r1, #59	; 0x3b
10009394:	2069      	movs	r0, #105	; 0x69
10009396:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009398:	7823      	ldrb	r3, [r4, #0]
1000939a:	021b      	lsls	r3, r3, #8
1000939c:	7862      	ldrb	r2, [r4, #1]
1000939e:	4313      	orrs	r3, r2
100093a0:	b21b      	sxth	r3, r3
100093a2:	9a14      	ldr	r2, [sp, #80]	; 0x50
100093a4:	4694      	mov	ip, r2
100093a6:	4463      	add	r3, ip
100093a8:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100093aa:	78a3      	ldrb	r3, [r4, #2]
100093ac:	021b      	lsls	r3, r3, #8
100093ae:	78e2      	ldrb	r2, [r4, #3]
100093b0:	4313      	orrs	r3, r2
100093b2:	b21b      	sxth	r3, r3
100093b4:	9a15      	ldr	r2, [sp, #84]	; 0x54
100093b6:	9200      	str	r2, [sp, #0]
100093b8:	4694      	mov	ip, r2
100093ba:	4463      	add	r3, ip
100093bc:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
100093be:	7923      	ldrb	r3, [r4, #4]
100093c0:	021b      	lsls	r3, r3, #8
100093c2:	7962      	ldrb	r2, [r4, #5]
100093c4:	4313      	orrs	r3, r2
100093c6:	b21b      	sxth	r3, r3
100093c8:	9a16      	ldr	r2, [sp, #88]	; 0x58
100093ca:	9200      	str	r2, [sp, #0]
100093cc:	4694      	mov	ip, r2
100093ce:	4463      	add	r3, ip
100093d0:	9316      	str	r3, [sp, #88]	; 0x58
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100093d2:	0023      	movs	r3, r4
100093d4:	2206      	movs	r2, #6
100093d6:	2143      	movs	r1, #67	; 0x43
100093d8:	2069      	movs	r0, #105	; 0x69
100093da:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100093dc:	7823      	ldrb	r3, [r4, #0]
100093de:	021b      	lsls	r3, r3, #8
100093e0:	7862      	ldrb	r2, [r4, #1]
100093e2:	4313      	orrs	r3, r2
100093e4:	b21b      	sxth	r3, r3
100093e6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
100093e8:	4694      	mov	ip, r2
100093ea:	4463      	add	r3, ip
100093ec:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100093ee:	78a3      	ldrb	r3, [r4, #2]
100093f0:	021b      	lsls	r3, r3, #8
100093f2:	78e2      	ldrb	r2, [r4, #3]
100093f4:	4313      	orrs	r3, r2
100093f6:	b21b      	sxth	r3, r3
100093f8:	9a18      	ldr	r2, [sp, #96]	; 0x60
100093fa:	9200      	str	r2, [sp, #0]
100093fc:	4694      	mov	ip, r2
100093fe:	4463      	add	r3, ip
10009400:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009402:	7923      	ldrb	r3, [r4, #4]
10009404:	021b      	lsls	r3, r3, #8
10009406:	7962      	ldrb	r2, [r4, #5]
10009408:	4313      	orrs	r3, r2
1000940a:	b21b      	sxth	r3, r3
1000940c:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000940e:	9200      	str	r2, [sp, #0]
10009410:	4694      	mov	ip, r2
10009412:	4463      	add	r3, ip
10009414:	9319      	str	r3, [sp, #100]	; 0x64
10009416:	3d01      	subs	r5, #1
10009418:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
1000941a:	2d00      	cmp	r5, #0
1000941c:	d1b7      	bne.n	1000938e <sms_mpu_selftest+0x6a>
1000941e:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009420:	4ea9      	ldr	r6, [pc, #676]	; (100096c8 <sms_mpu_selftest+0x3a4>)
10009422:	ad14      	add	r5, sp, #80	; 0x50
10009424:	21c8      	movs	r1, #200	; 0xc8
10009426:	5960      	ldr	r0, [r4, r5]
10009428:	47b0      	blx	r6
1000942a:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
1000942c:	ad17      	add	r5, sp, #92	; 0x5c
1000942e:	21c8      	movs	r1, #200	; 0xc8
10009430:	5960      	ldr	r0, [r4, r5]
10009432:	47b0      	blx	r6
10009434:	5160      	str	r0, [r4, r5]
10009436:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009438:	2c0c      	cmp	r4, #12
1000943a:	d1f2      	bne.n	10009422 <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
1000943c:	22e0      	movs	r2, #224	; 0xe0
1000943e:	211c      	movs	r1, #28
10009440:	2069      	movs	r0, #105	; 0x69
10009442:	4c9f      	ldr	r4, [pc, #636]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009444:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009446:	22e0      	movs	r2, #224	; 0xe0
10009448:	211c      	movs	r1, #28
1000944a:	2069      	movs	r0, #105	; 0x69
1000944c:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000944e:	2019      	movs	r0, #25
10009450:	4b9e      	ldr	r3, [pc, #632]	; (100096cc <sms_mpu_selftest+0x3a8>)
10009452:	4798      	blx	r3
10009454:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009456:	ac1a      	add	r4, sp, #104	; 0x68
10009458:	4e9a      	ldr	r6, [pc, #616]	; (100096c4 <sms_mpu_selftest+0x3a0>)
1000945a:	0023      	movs	r3, r4
1000945c:	2206      	movs	r2, #6
1000945e:	213b      	movs	r1, #59	; 0x3b
10009460:	2069      	movs	r0, #105	; 0x69
10009462:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009464:	7823      	ldrb	r3, [r4, #0]
10009466:	021b      	lsls	r3, r3, #8
10009468:	7862      	ldrb	r2, [r4, #1]
1000946a:	4313      	orrs	r3, r2
1000946c:	b21b      	sxth	r3, r3
1000946e:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009470:	4694      	mov	ip, r2
10009472:	4463      	add	r3, ip
10009474:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009476:	78a3      	ldrb	r3, [r4, #2]
10009478:	021b      	lsls	r3, r3, #8
1000947a:	78e2      	ldrb	r2, [r4, #3]
1000947c:	4313      	orrs	r3, r2
1000947e:	b21b      	sxth	r3, r3
10009480:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009482:	9200      	str	r2, [sp, #0]
10009484:	4694      	mov	ip, r2
10009486:	4463      	add	r3, ip
10009488:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000948a:	7923      	ldrb	r3, [r4, #4]
1000948c:	021b      	lsls	r3, r3, #8
1000948e:	7962      	ldrb	r2, [r4, #5]
10009490:	4313      	orrs	r3, r2
10009492:	b21b      	sxth	r3, r3
10009494:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009496:	9200      	str	r2, [sp, #0]
10009498:	4694      	mov	ip, r2
1000949a:	4463      	add	r3, ip
1000949c:	9313      	str	r3, [sp, #76]	; 0x4c
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000949e:	0023      	movs	r3, r4
100094a0:	2206      	movs	r2, #6
100094a2:	2143      	movs	r1, #67	; 0x43
100094a4:	2069      	movs	r0, #105	; 0x69
100094a6:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100094a8:	7823      	ldrb	r3, [r4, #0]
100094aa:	021b      	lsls	r3, r3, #8
100094ac:	7862      	ldrb	r2, [r4, #1]
100094ae:	4313      	orrs	r3, r2
100094b0:	b21b      	sxth	r3, r3
100094b2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100094b4:	4694      	mov	ip, r2
100094b6:	4463      	add	r3, ip
100094b8:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100094ba:	78a3      	ldrb	r3, [r4, #2]
100094bc:	021b      	lsls	r3, r3, #8
100094be:	78e2      	ldrb	r2, [r4, #3]
100094c0:	4313      	orrs	r3, r2
100094c2:	b21b      	sxth	r3, r3
100094c4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100094c6:	9200      	str	r2, [sp, #0]
100094c8:	4694      	mov	ip, r2
100094ca:	4463      	add	r3, ip
100094cc:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100094ce:	7923      	ldrb	r3, [r4, #4]
100094d0:	021b      	lsls	r3, r3, #8
100094d2:	7962      	ldrb	r2, [r4, #5]
100094d4:	4313      	orrs	r3, r2
100094d6:	b21b      	sxth	r3, r3
100094d8:	9a10      	ldr	r2, [sp, #64]	; 0x40
100094da:	9200      	str	r2, [sp, #0]
100094dc:	4694      	mov	ip, r2
100094de:	4463      	add	r3, ip
100094e0:	9310      	str	r3, [sp, #64]	; 0x40
100094e2:	3d01      	subs	r5, #1
100094e4:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
100094e6:	2d00      	cmp	r5, #0
100094e8:	d1b7      	bne.n	1000945a <sms_mpu_selftest+0x136>
100094ea:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
100094ec:	4e76      	ldr	r6, [pc, #472]	; (100096c8 <sms_mpu_selftest+0x3a4>)
100094ee:	ad11      	add	r5, sp, #68	; 0x44
100094f0:	21c8      	movs	r1, #200	; 0xc8
100094f2:	5960      	ldr	r0, [r4, r5]
100094f4:	47b0      	blx	r6
100094f6:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
100094f8:	ad0e      	add	r5, sp, #56	; 0x38
100094fa:	21c8      	movs	r1, #200	; 0xc8
100094fc:	5960      	ldr	r0, [r4, r5]
100094fe:	47b0      	blx	r6
10009500:	5160      	str	r0, [r4, r5]
10009502:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009504:	2c0c      	cmp	r4, #12
10009506:	d1f2      	bne.n	100094ee <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009508:	2200      	movs	r2, #0
1000950a:	211c      	movs	r1, #28
1000950c:	2069      	movs	r0, #105	; 0x69
1000950e:	4c6c      	ldr	r4, [pc, #432]	; (100096c0 <sms_mpu_selftest+0x39c>)
10009510:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009512:	2200      	movs	r2, #0
10009514:	211b      	movs	r1, #27
10009516:	2069      	movs	r0, #105	; 0x69
10009518:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000951a:	2019      	movs	r0, #25
1000951c:	4b6b      	ldr	r3, [pc, #428]	; (100096cc <sms_mpu_selftest+0x3a8>)
1000951e:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009520:	210d      	movs	r1, #13
10009522:	2069      	movs	r0, #105	; 0x69
10009524:	4d6a      	ldr	r5, [pc, #424]	; (100096d0 <sms_mpu_selftest+0x3ac>)
10009526:	47a8      	blx	r5
10009528:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
1000952a:	210e      	movs	r1, #14
1000952c:	2069      	movs	r0, #105	; 0x69
1000952e:	47a8      	blx	r5
10009530:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009532:	210f      	movs	r1, #15
10009534:	2069      	movs	r0, #105	; 0x69
10009536:	47a8      	blx	r5
10009538:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
1000953a:	2100      	movs	r1, #0
1000953c:	2069      	movs	r0, #105	; 0x69
1000953e:	47a8      	blx	r5
10009540:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009542:	2101      	movs	r1, #1
10009544:	2069      	movs	r0, #105	; 0x69
10009546:	47a8      	blx	r5
10009548:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
1000954a:	2102      	movs	r1, #2
1000954c:	2069      	movs	r0, #105	; 0x69
1000954e:	47a8      	blx	r5
10009550:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009552:	4b60      	ldr	r3, [pc, #384]	; (100096d4 <sms_mpu_selftest+0x3b0>)
10009554:	469a      	mov	sl, r3
10009556:	0020      	movs	r0, r4
10009558:	4798      	blx	r3
1000955a:	4b5f      	ldr	r3, [pc, #380]	; (100096d8 <sms_mpu_selftest+0x3b4>)
1000955c:	4699      	mov	r9, r3
1000955e:	4798      	blx	r3
10009560:	4e5e      	ldr	r6, [pc, #376]	; (100096dc <sms_mpu_selftest+0x3b8>)
10009562:	2200      	movs	r2, #0
10009564:	4b5e      	ldr	r3, [pc, #376]	; (100096e0 <sms_mpu_selftest+0x3bc>)
10009566:	47b0      	blx	r6
10009568:	0002      	movs	r2, r0
1000956a:	000b      	movs	r3, r1
1000956c:	485d      	ldr	r0, [pc, #372]	; (100096e4 <sms_mpu_selftest+0x3c0>)
1000956e:	495e      	ldr	r1, [pc, #376]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009570:	4f5e      	ldr	r7, [pc, #376]	; (100096ec <sms_mpu_selftest+0x3c8>)
10009572:	47b8      	blx	r7
10009574:	4d5e      	ldr	r5, [pc, #376]	; (100096f0 <sms_mpu_selftest+0x3cc>)
10009576:	2200      	movs	r2, #0
10009578:	4b5e      	ldr	r3, [pc, #376]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000957a:	47a8      	blx	r5
1000957c:	4c5e      	ldr	r4, [pc, #376]	; (100096f8 <sms_mpu_selftest+0x3d4>)
1000957e:	47a0      	blx	r4
10009580:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009582:	9800      	ldr	r0, [sp, #0]
10009584:	47d0      	blx	sl
10009586:	47c8      	blx	r9
10009588:	2200      	movs	r2, #0
1000958a:	4b55      	ldr	r3, [pc, #340]	; (100096e0 <sms_mpu_selftest+0x3bc>)
1000958c:	47b0      	blx	r6
1000958e:	0002      	movs	r2, r0
10009590:	000b      	movs	r3, r1
10009592:	4854      	ldr	r0, [pc, #336]	; (100096e4 <sms_mpu_selftest+0x3c0>)
10009594:	4954      	ldr	r1, [pc, #336]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009596:	47b8      	blx	r7
10009598:	2200      	movs	r2, #0
1000959a:	4b56      	ldr	r3, [pc, #344]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000959c:	47a8      	blx	r5
1000959e:	47a0      	blx	r4
100095a0:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
100095a2:	9804      	ldr	r0, [sp, #16]
100095a4:	47d0      	blx	sl
100095a6:	47c8      	blx	r9
100095a8:	2200      	movs	r2, #0
100095aa:	4b4d      	ldr	r3, [pc, #308]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095ac:	47b0      	blx	r6
100095ae:	0002      	movs	r2, r0
100095b0:	000b      	movs	r3, r1
100095b2:	484c      	ldr	r0, [pc, #304]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095b4:	494c      	ldr	r1, [pc, #304]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095b6:	47b8      	blx	r7
100095b8:	2200      	movs	r2, #0
100095ba:	4b4e      	ldr	r3, [pc, #312]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095bc:	47a8      	blx	r5
100095be:	47a0      	blx	r4
100095c0:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
100095c2:	9805      	ldr	r0, [sp, #20]
100095c4:	47d0      	blx	sl
100095c6:	47c8      	blx	r9
100095c8:	2200      	movs	r2, #0
100095ca:	4b45      	ldr	r3, [pc, #276]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095cc:	47b0      	blx	r6
100095ce:	0002      	movs	r2, r0
100095d0:	000b      	movs	r3, r1
100095d2:	4844      	ldr	r0, [pc, #272]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095d4:	4944      	ldr	r1, [pc, #272]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095d6:	47b8      	blx	r7
100095d8:	2200      	movs	r2, #0
100095da:	4b46      	ldr	r3, [pc, #280]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095dc:	47a8      	blx	r5
100095de:	47a0      	blx	r4
100095e0:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
100095e2:	9806      	ldr	r0, [sp, #24]
100095e4:	47d0      	blx	sl
100095e6:	47c8      	blx	r9
100095e8:	2200      	movs	r2, #0
100095ea:	4b3d      	ldr	r3, [pc, #244]	; (100096e0 <sms_mpu_selftest+0x3bc>)
100095ec:	47b0      	blx	r6
100095ee:	0002      	movs	r2, r0
100095f0:	000b      	movs	r3, r1
100095f2:	483c      	ldr	r0, [pc, #240]	; (100096e4 <sms_mpu_selftest+0x3c0>)
100095f4:	493c      	ldr	r1, [pc, #240]	; (100096e8 <sms_mpu_selftest+0x3c4>)
100095f6:	47b8      	blx	r7
100095f8:	2200      	movs	r2, #0
100095fa:	4b3e      	ldr	r3, [pc, #248]	; (100096f4 <sms_mpu_selftest+0x3d0>)
100095fc:	47a8      	blx	r5
100095fe:	47a0      	blx	r4
10009600:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009602:	9807      	ldr	r0, [sp, #28]
10009604:	47d0      	blx	sl
10009606:	47c8      	blx	r9
10009608:	2200      	movs	r2, #0
1000960a:	4b35      	ldr	r3, [pc, #212]	; (100096e0 <sms_mpu_selftest+0x3bc>)
1000960c:	47b0      	blx	r6
1000960e:	0002      	movs	r2, r0
10009610:	000b      	movs	r3, r1
10009612:	4834      	ldr	r0, [pc, #208]	; (100096e4 <sms_mpu_selftest+0x3c0>)
10009614:	4934      	ldr	r1, [pc, #208]	; (100096e8 <sms_mpu_selftest+0x3c4>)
10009616:	47b8      	blx	r7
10009618:	2200      	movs	r2, #0
1000961a:	4b36      	ldr	r3, [pc, #216]	; (100096f4 <sms_mpu_selftest+0x3d0>)
1000961c:	47a8      	blx	r5
1000961e:	47a0      	blx	r4
10009620:	900d      	str	r0, [sp, #52]	; 0x34
10009622:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009624:	4b35      	ldr	r3, [pc, #212]	; (100096fc <sms_mpu_selftest+0x3d8>)
10009626:	4699      	mov	r9, r3
10009628:	4d2b      	ldr	r5, [pc, #172]	; (100096d8 <sms_mpu_selftest+0x3b4>)
1000962a:	4b31      	ldr	r3, [pc, #196]	; (100096f0 <sms_mpu_selftest+0x3cc>)
1000962c:	4698      	mov	r8, r3
1000962e:	4b34      	ldr	r3, [pc, #208]	; (10009700 <sms_mpu_selftest+0x3dc>)
10009630:	469a      	mov	sl, r3
10009632:	4f2a      	ldr	r7, [pc, #168]	; (100096dc <sms_mpu_selftest+0x3b8>)
10009634:	4e30      	ldr	r6, [pc, #192]	; (100096f8 <sms_mpu_selftest+0x3d4>)
10009636:	ab11      	add	r3, sp, #68	; 0x44
10009638:	58e3      	ldr	r3, [r4, r3]
1000963a:	aa14      	add	r2, sp, #80	; 0x50
1000963c:	58a0      	ldr	r0, [r4, r2]
1000963e:	1a18      	subs	r0, r3, r0
10009640:	47c8      	blx	r9
10009642:	47a8      	blx	r5
10009644:	2200      	movs	r2, #0
10009646:	4b2f      	ldr	r3, [pc, #188]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009648:	47c0      	blx	r8
1000964a:	9000      	str	r0, [sp, #0]
1000964c:	9101      	str	r1, [sp, #4]
1000964e:	ab08      	add	r3, sp, #32
10009650:	58e0      	ldr	r0, [r4, r3]
10009652:	47a8      	blx	r5
10009654:	0002      	movs	r2, r0
10009656:	000b      	movs	r3, r1
10009658:	9800      	ldr	r0, [sp, #0]
1000965a:	9901      	ldr	r1, [sp, #4]
1000965c:	47d0      	blx	sl
1000965e:	2200      	movs	r2, #0
10009660:	4b28      	ldr	r3, [pc, #160]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009662:	47b8      	blx	r7
10009664:	47b0      	blx	r6
10009666:	9b03      	ldr	r3, [sp, #12]
10009668:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
1000966a:	469b      	mov	fp, r3
1000966c:	44a3      	add	fp, r4
1000966e:	ab0e      	add	r3, sp, #56	; 0x38
10009670:	58e3      	ldr	r3, [r4, r3]
10009672:	aa17      	add	r2, sp, #92	; 0x5c
10009674:	58a0      	ldr	r0, [r4, r2]
10009676:	1a18      	subs	r0, r3, r0
10009678:	47c8      	blx	r9
1000967a:	47a8      	blx	r5
1000967c:	2200      	movs	r2, #0
1000967e:	4b21      	ldr	r3, [pc, #132]	; (10009704 <sms_mpu_selftest+0x3e0>)
10009680:	47c0      	blx	r8
10009682:	9000      	str	r0, [sp, #0]
10009684:	9101      	str	r1, [sp, #4]
10009686:	0023      	movs	r3, r4
10009688:	aa08      	add	r2, sp, #32
1000968a:	4694      	mov	ip, r2
1000968c:	4463      	add	r3, ip
1000968e:	68d8      	ldr	r0, [r3, #12]
10009690:	47a8      	blx	r5
10009692:	0002      	movs	r2, r0
10009694:	000b      	movs	r3, r1
10009696:	9800      	ldr	r0, [sp, #0]
10009698:	9901      	ldr	r1, [sp, #4]
1000969a:	47d0      	blx	sl
1000969c:	2200      	movs	r2, #0
1000969e:	4b19      	ldr	r3, [pc, #100]	; (10009704 <sms_mpu_selftest+0x3e0>)
100096a0:	47b8      	blx	r7
100096a2:	47b0      	blx	r6
100096a4:	465b      	mov	r3, fp
100096a6:	60d8      	str	r0, [r3, #12]
100096a8:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
100096aa:	2c0c      	cmp	r4, #12
100096ac:	d1c3      	bne.n	10009636 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
100096ae:	b01d      	add	sp, #116	; 0x74
100096b0:	bc3c      	pop	{r2, r3, r4, r5}
100096b2:	4690      	mov	r8, r2
100096b4:	4699      	mov	r9, r3
100096b6:	46a2      	mov	sl, r4
100096b8:	46ab      	mov	fp, r5
100096ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096bc:	100147d5 	.word	0x100147d5
100096c0:	10008f05 	.word	0x10008f05
100096c4:	10008d71 	.word	0x10008d71
100096c8:	10012111 	.word	0x10012111
100096cc:	10009d89 	.word	0x10009d89
100096d0:	1000930d 	.word	0x1000930d
100096d4:	100128e5 	.word	0x100128e5
100096d8:	1001453d 	.word	0x1001453d
100096dc:	10013cf5 	.word	0x10013cf5
100096e0:	3ff00000 	.word	0x3ff00000
100096e4:	c28f5c29 	.word	0xc28f5c29
100096e8:	3ff028f5 	.word	0x3ff028f5
100096ec:	10010db5 	.word	0x10010db5
100096f0:	10013801 	.word	0x10013801
100096f4:	40a47800 	.word	0x40a47800
100096f8:	100145e5 	.word	0x100145e5
100096fc:	10012855 	.word	0x10012855
10009700:	10012fb9 	.word	0x10012fb9
10009704:	40590000 	.word	0x40590000

10009708 <sms_mpu_check>:
		mpu_device.new_int = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
10009708:	b570      	push	{r4, r5, r6, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000970a:	2175      	movs	r1, #117	; 0x75
1000970c:	2069      	movs	r0, #105	; 0x69
1000970e:	4b0b      	ldr	r3, [pc, #44]	; (1000973c <sms_mpu_check+0x34>)
10009710:	4798      	blx	r3
	if(c == 0x71) {
10009712:	2871      	cmp	r0, #113	; 0x71
10009714:	d10f      	bne.n	10009736 <sms_mpu_check+0x2e>
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
10009716:	4e0a      	ldr	r6, [pc, #40]	; (10009740 <sms_mpu_check+0x38>)
10009718:	0030      	movs	r0, r6
1000971a:	4d0a      	ldr	r5, [pc, #40]	; (10009744 <sms_mpu_check+0x3c>)
1000971c:	47a8      	blx	r5
1000971e:	480a      	ldr	r0, [pc, #40]	; (10009748 <sms_mpu_check+0x40>)
10009720:	4c0a      	ldr	r4, [pc, #40]	; (1000974c <sms_mpu_check+0x44>)
10009722:	47a0      	blx	r4
		sms_mpu_selftest(mpu_device.hal.self_test);
10009724:	480a      	ldr	r0, [pc, #40]	; (10009750 <sms_mpu_check+0x48>)
10009726:	4b0b      	ldr	r3, [pc, #44]	; (10009754 <sms_mpu_check+0x4c>)
10009728:	4798      	blx	r3
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
1000972a:	0030      	movs	r0, r6
1000972c:	47a8      	blx	r5
1000972e:	480a      	ldr	r0, [pc, #40]	; (10009758 <sms_mpu_check+0x50>)
10009730:	47a0      	blx	r4
		retVal = 0;
10009732:	2000      	movs	r0, #0
10009734:	e001      	b.n	1000973a <sms_mpu_check+0x32>
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
	int retVal = -1;
10009736:	2001      	movs	r0, #1
10009738:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.hal.self_test);
		DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000973a:	bd70      	pop	{r4, r5, r6, pc}
1000973c:	1000930d 	.word	0x1000930d
10009740:	1001597c 	.word	0x1001597c
10009744:	10014a3d 	.word	0x10014a3d
10009748:	10016144 	.word	0x10016144
1000974c:	1001491d 	.word	0x1001491d
10009750:	10018ec8 	.word	0x10018ec8
10009754:	10009325 	.word	0x10009325
10009758:	1001616c 	.word	0x1001616c

1000975c <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
1000975c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
1000975e:	2100      	movs	r1, #0
10009760:	4b01      	ldr	r3, [pc, #4]	; (10009768 <sms_led_switch_on+0xc>)
10009762:	4798      	blx	r3
}
10009764:	bd10      	pop	{r4, pc}
10009766:	46c0      	nop			; (mov r8, r8)
10009768:	1000a5e5 	.word	0x1000a5e5

1000976c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
1000976c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
1000976e:	2101      	movs	r1, #1
10009770:	4b01      	ldr	r3, [pc, #4]	; (10009778 <sms_led_switch_off+0xc>)
10009772:	4798      	blx	r3
}
10009774:	bd10      	pop	{r4, pc}
10009776:	46c0      	nop			; (mov r8, r8)
10009778:	1000a5e5 	.word	0x1000a5e5

1000977c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
1000977c:	b510      	push	{r4, lr}
1000977e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009780:	ac01      	add	r4, sp, #4
10009782:	0020      	movs	r0, r4
10009784:	4b0a      	ldr	r3, [pc, #40]	; (100097b0 <sms_led_gpio_init+0x34>)
10009786:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009788:	2301      	movs	r3, #1
1000978a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
1000978c:	0021      	movs	r1, r4
1000978e:	2016      	movs	r0, #22
10009790:	4b08      	ldr	r3, [pc, #32]	; (100097b4 <sms_led_gpio_init+0x38>)
10009792:	4798      	blx	r3
10009794:	2800      	cmp	r0, #0
10009796:	d005      	beq.n	100097a4 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009798:	4807      	ldr	r0, [pc, #28]	; (100097b8 <sms_led_gpio_init+0x3c>)
1000979a:	4b08      	ldr	r3, [pc, #32]	; (100097bc <sms_led_gpio_init+0x40>)
1000979c:	4798      	blx	r3
1000979e:	4808      	ldr	r0, [pc, #32]	; (100097c0 <sms_led_gpio_init+0x44>)
100097a0:	4b08      	ldr	r3, [pc, #32]	; (100097c4 <sms_led_gpio_init+0x48>)
100097a2:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
100097a4:	2016      	movs	r0, #22
100097a6:	4b08      	ldr	r3, [pc, #32]	; (100097c8 <sms_led_gpio_init+0x4c>)
100097a8:	4798      	blx	r3
}
100097aa:	b002      	add	sp, #8
100097ac:	bd10      	pop	{r4, pc}
100097ae:	46c0      	nop			; (mov r8, r8)
100097b0:	1000a41d 	.word	0x1000a41d
100097b4:	1000a42d 	.word	0x1000a42d
100097b8:	1001597c 	.word	0x1001597c
100097bc:	10014a3d 	.word	0x10014a3d
100097c0:	10016198 	.word	0x10016198
100097c4:	1001491d 	.word	0x1001491d
100097c8:	1000976d 	.word	0x1000976d

100097cc <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
100097cc:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
100097ce:	4b0c      	ldr	r3, [pc, #48]	; (10009800 <sms_led_blink_start+0x34>)
100097d0:	4798      	blx	r3
    sms_led_blink_cnt = 0;
100097d2:	2200      	movs	r2, #0
100097d4:	4b0b      	ldr	r3, [pc, #44]	; (10009804 <sms_led_blink_start+0x38>)
100097d6:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
100097d8:	4b0b      	ldr	r3, [pc, #44]	; (10009808 <sms_led_blink_start+0x3c>)
100097da:	781b      	ldrb	r3, [r3, #0]
100097dc:	b2db      	uxtb	r3, r3
100097de:	2b02      	cmp	r3, #2
100097e0:	d002      	beq.n	100097e8 <sms_led_blink_start+0x1c>
100097e2:	2b03      	cmp	r3, #3
100097e4:	d002      	beq.n	100097ec <sms_led_blink_start+0x20>
100097e6:	e004      	b.n	100097f2 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
100097e8:	2164      	movs	r1, #100	; 0x64
100097ea:	e003      	b.n	100097f4 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
100097ec:	21c8      	movs	r1, #200	; 0xc8
100097ee:	0049      	lsls	r1, r1, #1
        break;
100097f0:	e000      	b.n	100097f4 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
100097f2:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
100097f4:	2201      	movs	r2, #1
100097f6:	2001      	movs	r0, #1
100097f8:	4b04      	ldr	r3, [pc, #16]	; (1000980c <sms_led_blink_start+0x40>)
100097fa:	4798      	blx	r3
}
100097fc:	bd10      	pop	{r4, pc}
100097fe:	46c0      	nop			; (mov r8, r8)
10009800:	1000975d 	.word	0x1000975d
10009804:	1001911c 	.word	0x1001911c
10009808:	100190cf 	.word	0x100190cf
1000980c:	10009cfd 	.word	0x10009cfd

10009810 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
10009810:	4b06      	ldr	r3, [pc, #24]	; (1000982c <sms_pressure_init_variables+0x1c>)
10009812:	2200      	movs	r2, #0
10009814:	2125      	movs	r1, #37	; 0x25
10009816:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
10009818:	3106      	adds	r1, #6
1000981a:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
1000981c:	3901      	subs	r1, #1
1000981e:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
10009820:	3902      	subs	r1, #2
10009822:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
10009824:	3101      	adds	r1, #1
10009826:	545a      	strb	r2, [r3, r1]
}
10009828:	4770      	bx	lr
1000982a:	46c0      	nop			; (mov r8, r8)
1000982c:	10019034 	.word	0x10019034

10009830 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10009830:	b510      	push	{r4, lr}
10009832:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10009834:	4a05      	ldr	r2, [pc, #20]	; (1000984c <sms_pressure_ms58_reset+0x1c>)
10009836:	231e      	movs	r3, #30
10009838:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000983a:	3b1d      	subs	r3, #29
1000983c:	9300      	str	r3, [sp, #0]
1000983e:	4b04      	ldr	r3, [pc, #16]	; (10009850 <sms_pressure_ms58_reset+0x20>)
10009840:	4904      	ldr	r1, [pc, #16]	; (10009854 <sms_pressure_ms58_reset+0x24>)
10009842:	4805      	ldr	r0, [pc, #20]	; (10009858 <sms_pressure_ms58_reset+0x28>)
10009844:	4c05      	ldr	r4, [pc, #20]	; (1000985c <sms_pressure_ms58_reset+0x2c>)
10009846:	47a0      	blx	r4
}
10009848:	b002      	add	sp, #8
1000984a:	bd10      	pop	{r4, pc}
1000984c:	10019024 	.word	0x10019024
10009850:	10019010 	.word	0x10019010
10009854:	100190d4 	.word	0x100190d4
10009858:	100190e0 	.word	0x100190e0
1000985c:	10009bcd 	.word	0x10009bcd

10009860 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009860:	b5f0      	push	{r4, r5, r6, r7, lr}
10009862:	4657      	mov	r7, sl
10009864:	b480      	push	{r7}
10009866:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009868:	4d37      	ldr	r5, [pc, #220]	; (10009948 <sms_pressure_ms58_read_prom+0xe8>)
1000986a:	23a2      	movs	r3, #162	; 0xa2
1000986c:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
1000986e:	2300      	movs	r3, #0
10009870:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
10009872:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009874:	4c35      	ldr	r4, [pc, #212]	; (1000994c <sms_pressure_ms58_read_prom+0xec>)
10009876:	3303      	adds	r3, #3
10009878:	469a      	mov	sl, r3
1000987a:	9300      	str	r3, [sp, #0]
1000987c:	0023      	movs	r3, r4
1000987e:	002a      	movs	r2, r5
10009880:	4933      	ldr	r1, [pc, #204]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
10009882:	4834      	ldr	r0, [pc, #208]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
10009884:	4f34      	ldr	r7, [pc, #208]	; (10009958 <sms_pressure_ms58_read_prom+0xf8>)
10009886:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009888:	4e34      	ldr	r6, [pc, #208]	; (1000995c <sms_pressure_ms58_read_prom+0xfc>)
1000988a:	7863      	ldrb	r3, [r4, #1]
1000988c:	021b      	lsls	r3, r3, #8
1000988e:	78a2      	ldrb	r2, [r4, #2]
10009890:	4313      	orrs	r3, r2
10009892:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009894:	23a4      	movs	r3, #164	; 0xa4
10009896:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009898:	4653      	mov	r3, sl
1000989a:	9300      	str	r3, [sp, #0]
1000989c:	0023      	movs	r3, r4
1000989e:	002a      	movs	r2, r5
100098a0:	492b      	ldr	r1, [pc, #172]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
100098a2:	482c      	ldr	r0, [pc, #176]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
100098a4:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098a6:	7863      	ldrb	r3, [r4, #1]
100098a8:	021b      	lsls	r3, r3, #8
100098aa:	78a2      	ldrb	r2, [r4, #2]
100098ac:	4313      	orrs	r3, r2
100098ae:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
100098b0:	23a6      	movs	r3, #166	; 0xa6
100098b2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098b4:	4653      	mov	r3, sl
100098b6:	9300      	str	r3, [sp, #0]
100098b8:	0023      	movs	r3, r4
100098ba:	002a      	movs	r2, r5
100098bc:	4924      	ldr	r1, [pc, #144]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
100098be:	4825      	ldr	r0, [pc, #148]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
100098c0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098c2:	7863      	ldrb	r3, [r4, #1]
100098c4:	021b      	lsls	r3, r3, #8
100098c6:	78a2      	ldrb	r2, [r4, #2]
100098c8:	4313      	orrs	r3, r2
100098ca:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
100098cc:	23a8      	movs	r3, #168	; 0xa8
100098ce:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098d0:	4653      	mov	r3, sl
100098d2:	9300      	str	r3, [sp, #0]
100098d4:	0023      	movs	r3, r4
100098d6:	002a      	movs	r2, r5
100098d8:	491d      	ldr	r1, [pc, #116]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
100098da:	481e      	ldr	r0, [pc, #120]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
100098dc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098de:	7863      	ldrb	r3, [r4, #1]
100098e0:	021b      	lsls	r3, r3, #8
100098e2:	78a2      	ldrb	r2, [r4, #2]
100098e4:	4313      	orrs	r3, r2
100098e6:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
100098e8:	23aa      	movs	r3, #170	; 0xaa
100098ea:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100098ec:	4653      	mov	r3, sl
100098ee:	9300      	str	r3, [sp, #0]
100098f0:	0023      	movs	r3, r4
100098f2:	002a      	movs	r2, r5
100098f4:	4916      	ldr	r1, [pc, #88]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
100098f6:	4817      	ldr	r0, [pc, #92]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
100098f8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100098fa:	7863      	ldrb	r3, [r4, #1]
100098fc:	021b      	lsls	r3, r3, #8
100098fe:	78a2      	ldrb	r2, [r4, #2]
10009900:	4313      	orrs	r3, r2
10009902:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009904:	23ac      	movs	r3, #172	; 0xac
10009906:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009908:	4653      	mov	r3, sl
1000990a:	9300      	str	r3, [sp, #0]
1000990c:	0023      	movs	r3, r4
1000990e:	002a      	movs	r2, r5
10009910:	490f      	ldr	r1, [pc, #60]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
10009912:	4810      	ldr	r0, [pc, #64]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
10009914:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009916:	7863      	ldrb	r3, [r4, #1]
10009918:	021b      	lsls	r3, r3, #8
1000991a:	78a2      	ldrb	r2, [r4, #2]
1000991c:	4313      	orrs	r3, r2
1000991e:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009920:	23ae      	movs	r3, #174	; 0xae
10009922:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009924:	4653      	mov	r3, sl
10009926:	9300      	str	r3, [sp, #0]
10009928:	0023      	movs	r3, r4
1000992a:	002a      	movs	r2, r5
1000992c:	4908      	ldr	r1, [pc, #32]	; (10009950 <sms_pressure_ms58_read_prom+0xf0>)
1000992e:	4809      	ldr	r0, [pc, #36]	; (10009954 <sms_pressure_ms58_read_prom+0xf4>)
10009930:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009932:	7863      	ldrb	r3, [r4, #1]
10009934:	021b      	lsls	r3, r3, #8
10009936:	78a2      	ldrb	r2, [r4, #2]
10009938:	4313      	orrs	r3, r2
1000993a:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
1000993c:	2000      	movs	r0, #0
1000993e:	b002      	add	sp, #8
10009940:	bc04      	pop	{r2}
10009942:	4692      	mov	sl, r2
10009944:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009946:	46c0      	nop			; (mov r8, r8)
10009948:	10019024 	.word	0x10019024
1000994c:	10019010 	.word	0x10019010
10009950:	100190d4 	.word	0x100190d4
10009954:	100190e0 	.word	0x100190e0
10009958:	10009bcd 	.word	0x10009bcd
1000995c:	10019034 	.word	0x10019034

10009960 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009960:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
10009962:	4b0a      	ldr	r3, [pc, #40]	; (1000998c <sms_pressure_init+0x2c>)
10009964:	4798      	blx	r3
10009966:	2800      	cmp	r0, #0
10009968:	d10d      	bne.n	10009986 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
1000996a:	4b09      	ldr	r3, [pc, #36]	; (10009990 <sms_pressure_init+0x30>)
1000996c:	2201      	movs	r2, #1
1000996e:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009970:	2402      	movs	r4, #2
10009972:	2125      	movs	r1, #37	; 0x25
10009974:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
10009976:	3103      	adds	r1, #3
10009978:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
1000997a:	2200      	movs	r2, #0
1000997c:	3101      	adds	r1, #1
1000997e:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009980:	3101      	adds	r1, #1
10009982:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
10009984:	e000      	b.n	10009988 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
10009986:	2010      	movs	r0, #16
}
10009988:	bd10      	pop	{r4, pc}
1000998a:	46c0      	nop			; (mov r8, r8)
1000998c:	10009861 	.word	0x10009861
10009990:	10019034 	.word	0x10019034

10009994 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
10009994:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009996:	4817      	ldr	r0, [pc, #92]	; (100099f4 <sms_pressure_startup+0x60>)
10009998:	4b17      	ldr	r3, [pc, #92]	; (100099f8 <sms_pressure_startup+0x64>)
1000999a:	4798      	blx	r3
1000999c:	4817      	ldr	r0, [pc, #92]	; (100099fc <sms_pressure_startup+0x68>)
1000999e:	4b18      	ldr	r3, [pc, #96]	; (10009a00 <sms_pressure_startup+0x6c>)
100099a0:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
100099a2:	2101      	movs	r1, #1
100099a4:	2001      	movs	r0, #1
100099a6:	4b17      	ldr	r3, [pc, #92]	; (10009a04 <sms_pressure_startup+0x70>)
100099a8:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
100099aa:	2101      	movs	r1, #1
100099ac:	2325      	movs	r3, #37	; 0x25
100099ae:	4a16      	ldr	r2, [pc, #88]	; (10009a08 <sms_pressure_startup+0x74>)
100099b0:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
100099b2:	4b16      	ldr	r3, [pc, #88]	; (10009a0c <sms_pressure_startup+0x78>)
100099b4:	4798      	blx	r3
    delay_ms(3);
100099b6:	2003      	movs	r0, #3
100099b8:	4b15      	ldr	r3, [pc, #84]	; (10009a10 <sms_pressure_startup+0x7c>)
100099ba:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
100099bc:	4b15      	ldr	r3, [pc, #84]	; (10009a14 <sms_pressure_startup+0x80>)
100099be:	4798      	blx	r3
100099c0:	2800      	cmp	r0, #0
100099c2:	d006      	beq.n	100099d2 <sms_pressure_startup+0x3e>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
100099c4:	480b      	ldr	r0, [pc, #44]	; (100099f4 <sms_pressure_startup+0x60>)
100099c6:	4b0c      	ldr	r3, [pc, #48]	; (100099f8 <sms_pressure_startup+0x64>)
100099c8:	4798      	blx	r3
100099ca:	4813      	ldr	r0, [pc, #76]	; (10009a18 <sms_pressure_startup+0x84>)
100099cc:	4b0c      	ldr	r3, [pc, #48]	; (10009a00 <sms_pressure_startup+0x6c>)
100099ce:	4798      	blx	r3
100099d0:	e7fe      	b.n	100099d0 <sms_pressure_startup+0x3c>
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
100099d2:	4b0d      	ldr	r3, [pc, #52]	; (10009a08 <sms_pressure_startup+0x74>)
100099d4:	2102      	movs	r1, #2
100099d6:	2225      	movs	r2, #37	; 0x25
100099d8:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
100099da:	2401      	movs	r4, #1
100099dc:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
100099de:	3a1e      	subs	r2, #30
100099e0:	4b0e      	ldr	r3, [pc, #56]	; (10009a1c <sms_pressure_startup+0x88>)
100099e2:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
100099e4:	3901      	subs	r1, #1
100099e6:	2001      	movs	r0, #1
100099e8:	4b0d      	ldr	r3, [pc, #52]	; (10009a20 <sms_pressure_startup+0x8c>)
100099ea:	4798      	blx	r3
    
    ulp_ready = true;
100099ec:	4b0d      	ldr	r3, [pc, #52]	; (10009a24 <sms_pressure_startup+0x90>)
100099ee:	701c      	strb	r4, [r3, #0]
}
100099f0:	bd10      	pop	{r4, pc}
100099f2:	46c0      	nop			; (mov r8, r8)
100099f4:	1001597c 	.word	0x1001597c
100099f8:	10014a3d 	.word	0x10014a3d
100099fc:	1001620c 	.word	0x1001620c
10009a00:	1001491d 	.word	0x1001491d
10009a04:	10008ad5 	.word	0x10008ad5
10009a08:	10019034 	.word	0x10019034
10009a0c:	10009831 	.word	0x10009831
10009a10:	10009d89 	.word	0x10009d89
10009a14:	10009961 	.word	0x10009961
10009a18:	10016240 	.word	0x10016240
10009a1c:	10018f8c 	.word	0x10018f8c
10009a20:	10009a91 	.word	0x10009a91
10009a24:	10018f8d 	.word	0x10018f8d

10009a28 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
10009a28:	b510      	push	{r4, lr}
10009a2a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009a2c:	466b      	mov	r3, sp
10009a2e:	1dda      	adds	r2, r3, #7
10009a30:	2300      	movs	r3, #0
10009a32:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009a34:	4c0d      	ldr	r4, [pc, #52]	; (10009a6c <sms_pressure_define_services+0x44>)
10009a36:	0021      	movs	r1, r4
10009a38:	2001      	movs	r0, #1
10009a3a:	4b0d      	ldr	r3, [pc, #52]	; (10009a70 <sms_pressure_define_services+0x48>)
10009a3c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009a3e:	0020      	movs	r0, r4
10009a40:	4b0c      	ldr	r3, [pc, #48]	; (10009a74 <sms_pressure_define_services+0x4c>)
10009a42:	4798      	blx	r3
10009a44:	1e04      	subs	r4, r0, #0
10009a46:	d007      	beq.n	10009a58 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009a48:	480b      	ldr	r0, [pc, #44]	; (10009a78 <sms_pressure_define_services+0x50>)
10009a4a:	4b0c      	ldr	r3, [pc, #48]	; (10009a7c <sms_pressure_define_services+0x54>)
10009a4c:	4798      	blx	r3
10009a4e:	0021      	movs	r1, r4
10009a50:	480b      	ldr	r0, [pc, #44]	; (10009a80 <sms_pressure_define_services+0x58>)
10009a52:	4b0c      	ldr	r3, [pc, #48]	; (10009a84 <sms_pressure_define_services+0x5c>)
10009a54:	4798      	blx	r3
10009a56:	e007      	b.n	10009a68 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009a58:	4807      	ldr	r0, [pc, #28]	; (10009a78 <sms_pressure_define_services+0x50>)
10009a5a:	4b08      	ldr	r3, [pc, #32]	; (10009a7c <sms_pressure_define_services+0x54>)
10009a5c:	4798      	blx	r3
10009a5e:	4b0a      	ldr	r3, [pc, #40]	; (10009a88 <sms_pressure_define_services+0x60>)
10009a60:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009a62:	480a      	ldr	r0, [pc, #40]	; (10009a8c <sms_pressure_define_services+0x64>)
10009a64:	4b07      	ldr	r3, [pc, #28]	; (10009a84 <sms_pressure_define_services+0x5c>)
10009a66:	4798      	blx	r3
    }
10009a68:	b002      	add	sp, #8
10009a6a:	bd10      	pop	{r4, pc}
10009a6c:	10019060 	.word	0x10019060
10009a70:	100088ad 	.word	0x100088ad
10009a74:	10008889 	.word	0x10008889
10009a78:	1001597c 	.word	0x1001597c
10009a7c:	10014a3d 	.word	0x10014a3d
10009a80:	100162f8 	.word	0x100162f8
10009a84:	1001491d 	.word	0x1001491d
10009a88:	10019034 	.word	0x10019034
10009a8c:	10016340 	.word	0x10016340

10009a90 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009a90:	b510      	push	{r4, lr}
10009a92:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009a94:	2800      	cmp	r0, #0
10009a96:	d007      	beq.n	10009aa8 <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
10009a98:	2102      	movs	r1, #2
10009a9a:	2365      	movs	r3, #101	; 0x65
10009a9c:	4a15      	ldr	r2, [pc, #84]	; (10009af4 <sms_sensors_interrupt_toggle+0x64>)
10009a9e:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009aa0:	201e      	movs	r0, #30
10009aa2:	4b15      	ldr	r3, [pc, #84]	; (10009af8 <sms_sensors_interrupt_toggle+0x68>)
10009aa4:	4798      	blx	r3
10009aa6:	e006      	b.n	10009ab6 <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
10009aa8:	2100      	movs	r1, #0
10009aaa:	2365      	movs	r3, #101	; 0x65
10009aac:	4a11      	ldr	r2, [pc, #68]	; (10009af4 <sms_sensors_interrupt_toggle+0x64>)
10009aae:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009ab0:	201e      	movs	r0, #30
10009ab2:	4b12      	ldr	r3, [pc, #72]	; (10009afc <sms_sensors_interrupt_toggle+0x6c>)
10009ab4:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009ab6:	2c00      	cmp	r4, #0
10009ab8:	d010      	beq.n	10009adc <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
10009aba:	4b11      	ldr	r3, [pc, #68]	; (10009b00 <sms_sensors_interrupt_toggle+0x70>)
10009abc:	2103      	movs	r1, #3
10009abe:	2225      	movs	r2, #37	; 0x25
10009ac0:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009ac2:	3901      	subs	r1, #1
10009ac4:	3206      	adds	r2, #6
10009ac6:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
10009ac8:	2100      	movs	r1, #0
10009aca:	480e      	ldr	r0, [pc, #56]	; (10009b04 <sms_sensors_interrupt_toggle+0x74>)
10009acc:	4b0e      	ldr	r3, [pc, #56]	; (10009b08 <sms_sensors_interrupt_toggle+0x78>)
10009ace:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009ad0:	4b0e      	ldr	r3, [pc, #56]	; (10009b0c <sms_sensors_interrupt_toggle+0x7c>)
10009ad2:	4798      	blx	r3
        sensors_active = true;
10009ad4:	2201      	movs	r2, #1
10009ad6:	4b0e      	ldr	r3, [pc, #56]	; (10009b10 <sms_sensors_interrupt_toggle+0x80>)
10009ad8:	701a      	strb	r2, [r3, #0]
10009ada:	e00a      	b.n	10009af2 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
10009adc:	2102      	movs	r1, #2
10009ade:	2325      	movs	r3, #37	; 0x25
10009ae0:	4a07      	ldr	r2, [pc, #28]	; (10009b00 <sms_sensors_interrupt_toggle+0x70>)
10009ae2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009ae4:	4b0b      	ldr	r3, [pc, #44]	; (10009b14 <sms_sensors_interrupt_toggle+0x84>)
10009ae6:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
10009ae8:	4b0b      	ldr	r3, [pc, #44]	; (10009b18 <sms_sensors_interrupt_toggle+0x88>)
10009aea:	4798      	blx	r3
        sensors_active = false;
10009aec:	2200      	movs	r2, #0
10009aee:	4b08      	ldr	r3, [pc, #32]	; (10009b10 <sms_sensors_interrupt_toggle+0x80>)
10009af0:	701a      	strb	r2, [r3, #0]
    }
}
10009af2:	bd10      	pop	{r4, pc}
10009af4:	10018ec4 	.word	0x10018ec4
10009af8:	1000a88d 	.word	0x1000a88d
10009afc:	1000a8e9 	.word	0x1000a8e9
10009b00:	10019034 	.word	0x10019034
10009b04:	000003d5 	.word	0x000003d5
10009b08:	10009c31 	.word	0x10009c31
10009b0c:	10009c65 	.word	0x10009c65
10009b10:	100190c0 	.word	0x100190c0
10009b14:	10009c59 	.word	0x10009c59
10009b18:	10009c85 	.word	0x10009c85

10009b1c <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009b1c:	b510      	push	{r4, lr}
10009b1e:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009b20:	2800      	cmp	r0, #0
10009b22:	d103      	bne.n	10009b2c <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009b24:	2100      	movs	r1, #0
10009b26:	3006      	adds	r0, #6
10009b28:	4b07      	ldr	r3, [pc, #28]	; (10009b48 <sms_sensors_switch+0x2c>)
10009b2a:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009b2c:	2c00      	cmp	r4, #0
10009b2e:	d006      	beq.n	10009b3e <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009b30:	2101      	movs	r1, #1
10009b32:	2325      	movs	r3, #37	; 0x25
10009b34:	4a05      	ldr	r2, [pc, #20]	; (10009b4c <sms_sensors_switch+0x30>)
10009b36:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
10009b38:	4b05      	ldr	r3, [pc, #20]	; (10009b50 <sms_sensors_switch+0x34>)
10009b3a:	4798      	blx	r3
10009b3c:	e003      	b.n	10009b46 <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009b3e:	2100      	movs	r1, #0
10009b40:	2007      	movs	r0, #7
10009b42:	4b01      	ldr	r3, [pc, #4]	; (10009b48 <sms_sensors_switch+0x2c>)
10009b44:	4798      	blx	r3
    }
}
10009b46:	bd10      	pop	{r4, pc}
10009b48:	1000a5e5 	.word	0x1000a5e5
10009b4c:	10019034 	.word	0x10019034
10009b50:	10009995 	.word	0x10009995

10009b54 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009b54:	b530      	push	{r4, r5, lr}
10009b56:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009b58:	ac01      	add	r4, sp, #4
10009b5a:	0020      	movs	r0, r4
10009b5c:	4b13      	ldr	r3, [pc, #76]	; (10009bac <sms_spi_master_configure+0x58>)
10009b5e:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009b60:	2310      	movs	r3, #16
10009b62:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009b64:	0021      	movs	r1, r4
10009b66:	4812      	ldr	r0, [pc, #72]	; (10009bb0 <sms_spi_master_configure+0x5c>)
10009b68:	4b12      	ldr	r3, [pc, #72]	; (10009bb4 <sms_spi_master_configure+0x60>)
10009b6a:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009b6c:	ac02      	add	r4, sp, #8
10009b6e:	0020      	movs	r0, r4
10009b70:	4b11      	ldr	r3, [pc, #68]	; (10009bb8 <sms_spi_master_configure+0x64>)
10009b72:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009b74:	2368      	movs	r3, #104	; 0x68
10009b76:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009b78:	2300      	movs	r3, #0
10009b7a:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009b7c:	3311      	adds	r3, #17
10009b7e:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009b80:	3b0d      	subs	r3, #13
10009b82:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009b84:	2213      	movs	r2, #19
10009b86:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009b88:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009b8a:	3a14      	subs	r2, #20
10009b8c:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009b8e:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009b90:	3213      	adds	r2, #19
10009b92:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009b94:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009b96:	4d09      	ldr	r5, [pc, #36]	; (10009bbc <sms_spi_master_configure+0x68>)
10009b98:	0022      	movs	r2, r4
10009b9a:	4909      	ldr	r1, [pc, #36]	; (10009bc0 <sms_spi_master_configure+0x6c>)
10009b9c:	0028      	movs	r0, r5
10009b9e:	4b09      	ldr	r3, [pc, #36]	; (10009bc4 <sms_spi_master_configure+0x70>)
10009ba0:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009ba2:	0028      	movs	r0, r5
10009ba4:	4b08      	ldr	r3, [pc, #32]	; (10009bc8 <sms_spi_master_configure+0x74>)
10009ba6:	4798      	blx	r3
}
10009ba8:	b00d      	add	sp, #52	; 0x34
10009baa:	bd30      	pop	{r4, r5, pc}
10009bac:	10009db5 	.word	0x10009db5
10009bb0:	100190d4 	.word	0x100190d4
10009bb4:	10009ded 	.word	0x10009ded
10009bb8:	10009dc1 	.word	0x10009dc1
10009bbc:	100190e0 	.word	0x100190e0
10009bc0:	40007000 	.word	0x40007000
10009bc4:	10009ebd 	.word	0x10009ebd
10009bc8:	10009e2d 	.word	0x10009e2d

10009bcc <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009bce:	b083      	sub	sp, #12
10009bd0:	0004      	movs	r4, r0
10009bd2:	000d      	movs	r5, r1
10009bd4:	9200      	str	r2, [sp, #0]
10009bd6:	9301      	str	r3, [sp, #4]
10009bd8:	ab08      	add	r3, sp, #32
10009bda:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009bdc:	2201      	movs	r2, #1
10009bde:	4f08      	ldr	r7, [pc, #32]	; (10009c00 <sms_spi_master_transceive+0x34>)
10009be0:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009be2:	0033      	movs	r3, r6
10009be4:	9a01      	ldr	r2, [sp, #4]
10009be6:	9900      	ldr	r1, [sp, #0]
10009be8:	0020      	movs	r0, r4
10009bea:	4e06      	ldr	r6, [pc, #24]	; (10009c04 <sms_spi_master_transceive+0x38>)
10009bec:	47b0      	blx	r6
10009bee:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009bf0:	2200      	movs	r2, #0
10009bf2:	0029      	movs	r1, r5
10009bf4:	0020      	movs	r0, r4
10009bf6:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009bf8:	0030      	movs	r0, r6
10009bfa:	b003      	add	sp, #12
10009bfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009bfe:	46c0      	nop			; (mov r8, r8)
10009c00:	1000a0a5 	.word	0x1000a0a5
10009c04:	1000a021 	.word	0x1000a021

10009c08 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
10009c08:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
10009c0a:	2328      	movs	r3, #40	; 0x28
10009c0c:	4a06      	ldr	r2, [pc, #24]	; (10009c28 <sms_timer_aon_callback+0x20>)
10009c0e:	5cd3      	ldrb	r3, [r2, r3]
10009c10:	2b00      	cmp	r3, #0
10009c12:	d008      	beq.n	10009c26 <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009c14:	2101      	movs	r1, #1
10009c16:	2329      	movs	r3, #41	; 0x29
10009c18:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
10009c1a:	2300      	movs	r3, #0
10009c1c:	2200      	movs	r2, #0
10009c1e:	3102      	adds	r1, #2
10009c20:	2042      	movs	r0, #66	; 0x42
10009c22:	4c02      	ldr	r4, [pc, #8]	; (10009c2c <sms_timer_aon_callback+0x24>)
10009c24:	47a0      	blx	r4
	}
}
10009c26:	bd10      	pop	{r4, pc}
10009c28:	10019034 	.word	0x10019034
10009c2c:	1000d445 	.word	0x1000d445

10009c30 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009c30:	b530      	push	{r4, r5, lr}
10009c32:	b083      	sub	sp, #12
10009c34:	0004      	movs	r4, r0
10009c36:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009c38:	4668      	mov	r0, sp
10009c3a:	4b05      	ldr	r3, [pc, #20]	; (10009c50 <sms_timer_aon_init+0x20>)
10009c3c:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009c3e:	466b      	mov	r3, sp
10009c40:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
10009c42:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
10009c44:	4668      	mov	r0, sp
10009c46:	4b03      	ldr	r3, [pc, #12]	; (10009c54 <sms_timer_aon_init+0x24>)
10009c48:	4798      	blx	r3
}
10009c4a:	b003      	add	sp, #12
10009c4c:	bd30      	pop	{r4, r5, pc}
10009c4e:	46c0      	nop			; (mov r8, r8)
10009c50:	100080e9 	.word	0x100080e9
10009c54:	1000815d 	.word	0x1000815d

10009c58 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009c58:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009c5a:	4b01      	ldr	r3, [pc, #4]	; (10009c60 <sms_timer_aon_disable+0x8>)
10009c5c:	4798      	blx	r3
}
10009c5e:	bd10      	pop	{r4, pc}
10009c60:	100080f9 	.word	0x100080f9

10009c64 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
10009c64:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
10009c66:	4804      	ldr	r0, [pc, #16]	; (10009c78 <sms_timer_aon_register_callback+0x14>)
10009c68:	4b04      	ldr	r3, [pc, #16]	; (10009c7c <sms_timer_aon_register_callback+0x18>)
10009c6a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009c6c:	2280      	movs	r2, #128	; 0x80
10009c6e:	0512      	lsls	r2, r2, #20
10009c70:	4b03      	ldr	r3, [pc, #12]	; (10009c80 <sms_timer_aon_register_callback+0x1c>)
10009c72:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009c74:	bd10      	pop	{r4, pc}
10009c76:	46c0      	nop			; (mov r8, r8)
10009c78:	10009c09 	.word	0x10009c09
10009c7c:	10008145 	.word	0x10008145
10009c80:	e000e100 	.word	0xe000e100

10009c84 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
10009c84:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
10009c86:	4b04      	ldr	r3, [pc, #16]	; (10009c98 <sms_timer_aon_unregister_callback+0x14>)
10009c88:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009c8a:	2180      	movs	r1, #128	; 0x80
10009c8c:	0509      	lsls	r1, r1, #20
10009c8e:	2380      	movs	r3, #128	; 0x80
10009c90:	4a02      	ldr	r2, [pc, #8]	; (10009c9c <sms_timer_aon_unregister_callback+0x18>)
10009c92:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009c94:	bd10      	pop	{r4, pc}
10009c96:	46c0      	nop			; (mov r8, r8)
10009c98:	10008151 	.word	0x10008151
10009c9c:	e000e100 	.word	0xe000e100

10009ca0 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009ca0:	b510      	push	{r4, lr}
10009ca2:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009ca4:	ac01      	add	r4, sp, #4
10009ca6:	0020      	movs	r0, r4
10009ca8:	4b09      	ldr	r3, [pc, #36]	; (10009cd0 <sms_dualtimer_init+0x30>)
10009caa:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009cac:	4b09      	ldr	r3, [pc, #36]	; (10009cd4 <sms_dualtimer_init+0x34>)
10009cae:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009cb0:	2300      	movs	r3, #0
10009cb2:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
10009cb4:	4a08      	ldr	r2, [pc, #32]	; (10009cd8 <sms_dualtimer_init+0x38>)
10009cb6:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009cb8:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009cba:	0020      	movs	r0, r4
10009cbc:	4b07      	ldr	r3, [pc, #28]	; (10009cdc <sms_dualtimer_init+0x3c>)
10009cbe:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009cc0:	2000      	movs	r0, #0
10009cc2:	4c07      	ldr	r4, [pc, #28]	; (10009ce0 <sms_dualtimer_init+0x40>)
10009cc4:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009cc6:	2001      	movs	r0, #1
10009cc8:	47a0      	blx	r4
}
10009cca:	b008      	add	sp, #32
10009ccc:	bd10      	pop	{r4, pc}
10009cce:	46c0      	nop			; (mov r8, r8)
10009cd0:	1000a109 	.word	0x1000a109
10009cd4:	018cba80 	.word	0x018cba80
10009cd8:	00006590 	.word	0x00006590
10009cdc:	1000a1b1 	.word	0x1000a1b1
10009ce0:	1000a18d 	.word	0x1000a18d

10009ce4 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009ce4:	b510      	push	{r4, lr}
10009ce6:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009ce8:	4b02      	ldr	r3, [pc, #8]	; (10009cf4 <sms_dualtimer_register_callback+0x10>)
10009cea:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009cec:	0020      	movs	r0, r4
10009cee:	4b02      	ldr	r3, [pc, #8]	; (10009cf8 <sms_dualtimer_register_callback+0x14>)
10009cf0:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
10009cf2:	bd10      	pop	{r4, pc}
10009cf4:	1000a2b5 	.word	0x1000a2b5
10009cf8:	1000a18d 	.word	0x1000a18d

10009cfc <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009cfc:	b510      	push	{r4, lr}
10009cfe:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
10009d00:	2801      	cmp	r0, #1
10009d02:	d006      	beq.n	10009d12 <sms_dualtimer_start+0x16>
10009d04:	2800      	cmp	r0, #0
10009d06:	d002      	beq.n	10009d0e <sms_dualtimer_start+0x12>
10009d08:	2802      	cmp	r0, #2
10009d0a:	d004      	beq.n	10009d16 <sms_dualtimer_start+0x1a>
10009d0c:	e005      	b.n	10009d1a <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
10009d0e:	221a      	movs	r2, #26
10009d10:	e004      	b.n	10009d1c <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
10009d12:	4a0c      	ldr	r2, [pc, #48]	; (10009d44 <sms_dualtimer_start+0x48>)
        break;
10009d14:	e002      	b.n	10009d1c <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009d16:	4a0c      	ldr	r2, [pc, #48]	; (10009d48 <sms_dualtimer_start+0x4c>)
        break;
10009d18:	e000      	b.n	10009d1c <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009d1a:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009d1c:	2900      	cmp	r1, #0
10009d1e:	d101      	bne.n	10009d24 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
10009d20:	21fa      	movs	r1, #250	; 0xfa
10009d22:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009d24:	2000      	movs	r0, #0
10009d26:	4b09      	ldr	r3, [pc, #36]	; (10009d4c <sms_dualtimer_start+0x50>)
10009d28:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009d2a:	434a      	muls	r2, r1
10009d2c:	2100      	movs	r1, #0
10009d2e:	0020      	movs	r0, r4
10009d30:	4b07      	ldr	r3, [pc, #28]	; (10009d50 <sms_dualtimer_start+0x54>)
10009d32:	4798      	blx	r3
    dualtimer_enable(tmr);
10009d34:	0020      	movs	r0, r4
10009d36:	4b07      	ldr	r3, [pc, #28]	; (10009d54 <sms_dualtimer_start+0x58>)
10009d38:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009d3a:	2280      	movs	r2, #128	; 0x80
10009d3c:	01d2      	lsls	r2, r2, #7
10009d3e:	4b06      	ldr	r3, [pc, #24]	; (10009d58 <sms_dualtimer_start+0x5c>)
10009d40:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
10009d42:	bd10      	pop	{r4, pc}
10009d44:	00006590 	.word	0x00006590
10009d48:	018cba80 	.word	0x018cba80
10009d4c:	10018f8d 	.word	0x10018f8d
10009d50:	1000a141 	.word	0x1000a141
10009d54:	1000a169 	.word	0x1000a169
10009d58:	e000e100 	.word	0xe000e100

10009d5c <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
10009d5c:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
10009d5e:	4b01      	ldr	r3, [pc, #4]	; (10009d64 <sms_dualtimer_stop+0x8>)
10009d60:	4798      	blx	r3
}
10009d62:	bd10      	pop	{r4, pc}
10009d64:	1000a18d 	.word	0x1000a18d

10009d68 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
10009d68:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
10009d6a:	2201      	movs	r2, #1
10009d6c:	4b04      	ldr	r3, [pc, #16]	; (10009d80 <sms_dualtimer1_cb+0x18>)
10009d6e:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009d70:	2300      	movs	r3, #0
10009d72:	2200      	movs	r2, #0
10009d74:	2101      	movs	r1, #1
10009d76:	2040      	movs	r0, #64	; 0x40
10009d78:	4c02      	ldr	r4, [pc, #8]	; (10009d84 <sms_dualtimer1_cb+0x1c>)
10009d7a:	47a0      	blx	r4
}
10009d7c:	bd10      	pop	{r4, pc}
10009d7e:	46c0      	nop			; (mov r8, r8)
10009d80:	10019020 	.word	0x10019020
10009d84:	1000d445 	.word	0x1000d445

10009d88 <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
10009d88:	b510      	push	{r4, lr}
10009d8a:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009d8c:	2201      	movs	r2, #1
10009d8e:	2001      	movs	r0, #1
10009d90:	4b05      	ldr	r3, [pc, #20]	; (10009da8 <delay_ms+0x20>)
10009d92:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
10009d94:	4c05      	ldr	r4, [pc, #20]	; (10009dac <delay_ms+0x24>)
10009d96:	2001      	movs	r0, #1
10009d98:	47a0      	blx	r4
10009d9a:	2800      	cmp	r0, #0
10009d9c:	d1fb      	bne.n	10009d96 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009d9e:	3001      	adds	r0, #1
10009da0:	4b03      	ldr	r3, [pc, #12]	; (10009db0 <delay_ms+0x28>)
10009da2:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10009da4:	bd10      	pop	{r4, pc}
10009da6:	46c0      	nop			; (mov r8, r8)
10009da8:	10009cfd 	.word	0x10009cfd
10009dac:	1000a12d 	.word	0x1000a12d
10009db0:	1000a18d 	.word	0x1000a18d

10009db4 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10009db4:	230c      	movs	r3, #12
10009db6:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
10009db8:	2300      	movs	r3, #0
10009dba:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10009dbc:	7083      	strb	r3, [r0, #2]
}
10009dbe:	4770      	bx	lr

10009dc0 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10009dc0:	2301      	movs	r3, #1
10009dc2:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10009dc4:	2300      	movs	r3, #0
10009dc6:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
10009dc8:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
10009dca:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10009dcc:	3381      	adds	r3, #129	; 0x81
10009dce:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10009dd0:	3b77      	subs	r3, #119	; 0x77
10009dd2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10009dd4:	3301      	adds	r3, #1
10009dd6:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
10009dd8:	3301      	adds	r3, #1
10009dda:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10009ddc:	3301      	adds	r3, #1
10009dde:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10009de0:	3b0b      	subs	r3, #11
10009de2:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10009de4:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
10009de6:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
10009de8:	6243      	str	r3, [r0, #36]	; 0x24
};
10009dea:	4770      	bx	lr

10009dec <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10009dec:	b530      	push	{r4, r5, lr}
10009dee:	b083      	sub	sp, #12
10009df0:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10009df2:	780b      	ldrb	r3, [r1, #0]
10009df4:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
10009df6:	784b      	ldrb	r3, [r1, #1]
10009df8:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
10009dfa:	788b      	ldrb	r3, [r1, #2]
10009dfc:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009dfe:	ad01      	add	r5, sp, #4
10009e00:	0028      	movs	r0, r5
10009e02:	4b07      	ldr	r3, [pc, #28]	; (10009e20 <spi_attach_slave+0x34>)
10009e04:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009e06:	2301      	movs	r3, #1
10009e08:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
10009e0a:	7820      	ldrb	r0, [r4, #0]
10009e0c:	0029      	movs	r1, r5
10009e0e:	4b05      	ldr	r3, [pc, #20]	; (10009e24 <spi_attach_slave+0x38>)
10009e10:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
10009e12:	7820      	ldrb	r0, [r4, #0]
10009e14:	2101      	movs	r1, #1
10009e16:	4b04      	ldr	r3, [pc, #16]	; (10009e28 <spi_attach_slave+0x3c>)
10009e18:	4798      	blx	r3
}
10009e1a:	b003      	add	sp, #12
10009e1c:	bd30      	pop	{r4, r5, pc}
10009e1e:	46c0      	nop			; (mov r8, r8)
10009e20:	1000a41d 	.word	0x1000a41d
10009e24:	1000a42d 	.word	0x1000a42d
10009e28:	1000a5e5 	.word	0x1000a5e5

10009e2c <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10009e2c:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10009e2e:	2201      	movs	r2, #1
10009e30:	761a      	strb	r2, [r3, #24]
}
10009e32:	4770      	bx	lr

10009e34 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10009e34:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009e36:	2300      	movs	r3, #0
10009e38:	6802      	ldr	r2, [r0, #0]
10009e3a:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009e3c:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10009e3e:	4a0d      	ldr	r2, [pc, #52]	; (10009e74 <spi_disable+0x40>)
10009e40:	4293      	cmp	r3, r2
10009e42:	d109      	bne.n	10009e58 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10009e44:	2041      	movs	r0, #65	; 0x41
10009e46:	4c0c      	ldr	r4, [pc, #48]	; (10009e78 <spi_disable+0x44>)
10009e48:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10009e4a:	2026      	movs	r0, #38	; 0x26
10009e4c:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10009e4e:	2038      	movs	r0, #56	; 0x38
10009e50:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10009e52:	2001      	movs	r0, #1
10009e54:	47a0      	blx	r4
10009e56:	e00b      	b.n	10009e70 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10009e58:	4a08      	ldr	r2, [pc, #32]	; (10009e7c <spi_disable+0x48>)
10009e5a:	4293      	cmp	r3, r2
10009e5c:	d108      	bne.n	10009e70 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10009e5e:	2042      	movs	r0, #66	; 0x42
10009e60:	4c05      	ldr	r4, [pc, #20]	; (10009e78 <spi_disable+0x44>)
10009e62:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10009e64:	2027      	movs	r0, #39	; 0x27
10009e66:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10009e68:	2039      	movs	r0, #57	; 0x39
10009e6a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009e6c:	2002      	movs	r0, #2
10009e6e:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10009e70:	bd10      	pop	{r4, pc}
10009e72:	46c0      	nop			; (mov r8, r8)
10009e74:	40006000 	.word	0x40006000
10009e78:	1000ad7d 	.word	0x1000ad7d
10009e7c:	40007000 	.word	0x40007000

10009e80 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10009e80:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10009e82:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10009e84:	4b09      	ldr	r3, [pc, #36]	; (10009eac <spi_reset+0x2c>)
10009e86:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10009e88:	4b09      	ldr	r3, [pc, #36]	; (10009eb0 <spi_reset+0x30>)
10009e8a:	429c      	cmp	r4, r3
10009e8c:	d105      	bne.n	10009e9a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10009e8e:	2001      	movs	r0, #1
10009e90:	4c08      	ldr	r4, [pc, #32]	; (10009eb4 <spi_reset+0x34>)
10009e92:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10009e94:	2038      	movs	r0, #56	; 0x38
10009e96:	47a0      	blx	r4
10009e98:	e007      	b.n	10009eaa <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10009e9a:	4b07      	ldr	r3, [pc, #28]	; (10009eb8 <spi_reset+0x38>)
10009e9c:	429c      	cmp	r4, r3
10009e9e:	d104      	bne.n	10009eaa <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10009ea0:	2002      	movs	r0, #2
10009ea2:	4c04      	ldr	r4, [pc, #16]	; (10009eb4 <spi_reset+0x34>)
10009ea4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10009ea6:	2039      	movs	r0, #57	; 0x39
10009ea8:	47a0      	blx	r4
	}
}
10009eaa:	bd10      	pop	{r4, pc}
10009eac:	10009e35 	.word	0x10009e35
10009eb0:	40006000 	.word	0x40006000
10009eb4:	1000b0e9 	.word	0x1000b0e9
10009eb8:	40007000 	.word	0x40007000

10009ebc <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10009ebc:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ebe:	465f      	mov	r7, fp
10009ec0:	4646      	mov	r6, r8
10009ec2:	b4c0      	push	{r6, r7}
10009ec4:	b083      	sub	sp, #12
10009ec6:	0006      	movs	r6, r0
10009ec8:	4688      	mov	r8, r1
10009eca:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10009ecc:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10009ece:	7e0b      	ldrb	r3, [r1, #24]
10009ed0:	07db      	lsls	r3, r3, #31
10009ed2:	d501      	bpl.n	10009ed8 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009ed4:	2300      	movs	r3, #0
10009ed6:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10009ed8:	0030      	movs	r0, r6
10009eda:	4b4a      	ldr	r3, [pc, #296]	; (1000a004 <spi_init+0x148>)
10009edc:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009ede:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10009ee0:	4a49      	ldr	r2, [pc, #292]	; (1000a008 <spi_init+0x14c>)
10009ee2:	4293      	cmp	r3, r2
10009ee4:	d109      	bne.n	10009efa <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10009ee6:	2041      	movs	r0, #65	; 0x41
10009ee8:	4c48      	ldr	r4, [pc, #288]	; (1000a00c <spi_init+0x150>)
10009eea:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10009eec:	2026      	movs	r0, #38	; 0x26
10009eee:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10009ef0:	2038      	movs	r0, #56	; 0x38
10009ef2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10009ef4:	2001      	movs	r0, #1
10009ef6:	47a0      	blx	r4
10009ef8:	e00b      	b.n	10009f12 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10009efa:	4a45      	ldr	r2, [pc, #276]	; (1000a010 <spi_init+0x154>)
10009efc:	4293      	cmp	r3, r2
10009efe:	d108      	bne.n	10009f12 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10009f00:	2042      	movs	r0, #66	; 0x42
10009f02:	4c42      	ldr	r4, [pc, #264]	; (1000a00c <spi_init+0x150>)
10009f04:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10009f06:	2027      	movs	r0, #39	; 0x27
10009f08:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10009f0a:	2039      	movs	r0, #57	; 0x39
10009f0c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10009f0e:	2002      	movs	r0, #2
10009f10:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009f12:	a801      	add	r0, sp, #4
10009f14:	4b3f      	ldr	r3, [pc, #252]	; (1000a014 <spi_init+0x158>)
10009f16:	4798      	blx	r3
10009f18:	002c      	movs	r4, r5
10009f1a:	3408      	adds	r4, #8
10009f1c:	2318      	movs	r3, #24
10009f1e:	469b      	mov	fp, r3
10009f20:	44ab      	add	fp, r5
10009f22:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10009f24:	6820      	ldr	r0, [r4, #0]
10009f26:	1c43      	adds	r3, r0, #1
10009f28:	d011      	beq.n	10009f4e <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
10009f2a:	782b      	ldrb	r3, [r5, #0]
10009f2c:	2b01      	cmp	r3, #1
10009f2e:	d102      	bne.n	10009f36 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009f30:	466a      	mov	r2, sp
10009f32:	7113      	strb	r3, [r2, #4]
10009f34:	e003      	b.n	10009f3e <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
10009f36:	2b00      	cmp	r3, #0
10009f38:	d101      	bne.n	10009f3e <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10009f3a:	466a      	mov	r2, sp
10009f3c:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10009f3e:	b2c0      	uxtb	r0, r0
10009f40:	a901      	add	r1, sp, #4
10009f42:	4b35      	ldr	r3, [pc, #212]	; (1000a018 <spi_init+0x15c>)
10009f44:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10009f46:	8a39      	ldrh	r1, [r7, #16]
10009f48:	7838      	ldrb	r0, [r7, #0]
10009f4a:	4b34      	ldr	r3, [pc, #208]	; (1000a01c <spi_init+0x160>)
10009f4c:	4798      	blx	r3
10009f4e:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10009f50:	455c      	cmp	r4, fp
10009f52:	d1e6      	bne.n	10009f22 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10009f54:	78eb      	ldrb	r3, [r5, #3]
10009f56:	4642      	mov	r2, r8
10009f58:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10009f5a:	782b      	ldrb	r3, [r5, #0]
10009f5c:	2b01      	cmp	r3, #1
10009f5e:	d100      	bne.n	10009f62 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10009f60:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
10009f62:	782b      	ldrb	r3, [r5, #0]
10009f64:	2b00      	cmp	r3, #0
10009f66:	d101      	bne.n	10009f6c <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
10009f68:	4642      	mov	r2, r8
10009f6a:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10009f6c:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10009f6e:	782a      	ldrb	r2, [r5, #0]
10009f70:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10009f72:	782a      	ldrb	r2, [r5, #0]
10009f74:	2a01      	cmp	r2, #1
10009f76:	d101      	bne.n	10009f7c <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10009f78:	792a      	ldrb	r2, [r5, #4]
10009f7a:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10009f7c:	786a      	ldrb	r2, [r5, #1]
10009f7e:	2a04      	cmp	r2, #4
10009f80:	d104      	bne.n	10009f8c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10009f82:	2124      	movs	r1, #36	; 0x24
10009f84:	5c58      	ldrb	r0, [r3, r1]
10009f86:	4302      	orrs	r2, r0
10009f88:	545a      	strb	r2, [r3, r1]
10009f8a:	e004      	b.n	10009f96 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10009f8c:	2124      	movs	r1, #36	; 0x24
10009f8e:	5c5a      	ldrb	r2, [r3, r1]
10009f90:	2004      	movs	r0, #4
10009f92:	4382      	bics	r2, r0
10009f94:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10009f96:	78aa      	ldrb	r2, [r5, #2]
10009f98:	2a01      	cmp	r2, #1
10009f9a:	d01a      	beq.n	10009fd2 <spi_init+0x116>
10009f9c:	2a00      	cmp	r2, #0
10009f9e:	d004      	beq.n	10009faa <spi_init+0xee>
10009fa0:	2a02      	cmp	r2, #2
10009fa2:	d00c      	beq.n	10009fbe <spi_init+0x102>
10009fa4:	2a03      	cmp	r2, #3
10009fa6:	d01e      	beq.n	10009fe6 <spi_init+0x12a>
10009fa8:	e026      	b.n	10009ff8 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009faa:	2224      	movs	r2, #36	; 0x24
10009fac:	5c99      	ldrb	r1, [r3, r2]
10009fae:	2002      	movs	r0, #2
10009fb0:	4381      	bics	r1, r0
10009fb2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009fb4:	5c99      	ldrb	r1, [r3, r2]
10009fb6:	3801      	subs	r0, #1
10009fb8:	4381      	bics	r1, r0
10009fba:	5499      	strb	r1, [r3, r2]
10009fbc:	e01c      	b.n	10009ff8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009fbe:	2224      	movs	r2, #36	; 0x24
10009fc0:	5c98      	ldrb	r0, [r3, r2]
10009fc2:	2102      	movs	r1, #2
10009fc4:	4301      	orrs	r1, r0
10009fc6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009fc8:	5c99      	ldrb	r1, [r3, r2]
10009fca:	2001      	movs	r0, #1
10009fcc:	4381      	bics	r1, r0
10009fce:	5499      	strb	r1, [r3, r2]
10009fd0:	e012      	b.n	10009ff8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009fd2:	2224      	movs	r2, #36	; 0x24
10009fd4:	5c99      	ldrb	r1, [r3, r2]
10009fd6:	2002      	movs	r0, #2
10009fd8:	4381      	bics	r1, r0
10009fda:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009fdc:	5c98      	ldrb	r0, [r3, r2]
10009fde:	2101      	movs	r1, #1
10009fe0:	4301      	orrs	r1, r0
10009fe2:	5499      	strb	r1, [r3, r2]
10009fe4:	e008      	b.n	10009ff8 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009fe6:	2224      	movs	r2, #36	; 0x24
10009fe8:	5c98      	ldrb	r0, [r3, r2]
10009fea:	2102      	movs	r1, #2
10009fec:	4301      	orrs	r1, r0
10009fee:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009ff0:	5c98      	ldrb	r0, [r3, r2]
10009ff2:	2101      	movs	r1, #1
10009ff4:	4301      	orrs	r1, r0
10009ff6:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10009ff8:	2000      	movs	r0, #0
10009ffa:	b003      	add	sp, #12
10009ffc:	bc0c      	pop	{r2, r3}
10009ffe:	4690      	mov	r8, r2
1000a000:	469b      	mov	fp, r3
1000a002:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a004:	10009e81 	.word	0x10009e81
1000a008:	40006000 	.word	0x40006000
1000a00c:	1000aa21 	.word	0x1000aa21
1000a010:	40007000 	.word	0x40007000
1000a014:	1000a41d 	.word	0x1000a41d
1000a018:	1000a42d 	.word	0x1000a42d
1000a01c:	1000a671 	.word	0x1000a671

1000a020 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a020:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a022:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a024:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a026:	2600      	movs	r6, #0
1000a028:	466d      	mov	r5, sp
1000a02a:	71ee      	strb	r6, [r5, #7]
1000a02c:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a02e:	2c00      	cmp	r4, #0
1000a030:	d034      	beq.n	1000a09c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a032:	2900      	cmp	r1, #0
1000a034:	d104      	bne.n	1000a040 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a036:	0029      	movs	r1, r5
1000a038:	7980      	ldrb	r0, [r0, #6]
1000a03a:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a03c:	2701      	movs	r7, #1
1000a03e:	e00b      	b.n	1000a058 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a040:	2a00      	cmp	r2, #0
1000a042:	d005      	beq.n	1000a050 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a044:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a046:	2b00      	cmp	r3, #0
1000a048:	d029      	beq.n	1000a09e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a04a:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a04c:	2700      	movs	r7, #0
1000a04e:	e003      	b.n	1000a058 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a050:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a052:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a054:	466a      	mov	r2, sp
1000a056:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a058:	2528      	movs	r5, #40	; 0x28
1000a05a:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a05c:	07c0      	lsls	r0, r0, #31
1000a05e:	d4fc      	bmi.n	1000a05a <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a060:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a062:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a064:	2b00      	cmp	r3, #0
1000a066:	d014      	beq.n	1000a092 <spi_transceive_buffer_wait+0x72>
1000a068:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a06a:	4278      	negs	r0, r7
1000a06c:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a06e:	4270      	negs	r0, r6
1000a070:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a072:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a074:	07c0      	lsls	r0, r0, #31
1000a076:	d5fc      	bpl.n	1000a072 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a078:	7808      	ldrb	r0, [r1, #0]
1000a07a:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a07c:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a07e:	07c0      	lsls	r0, r0, #31
1000a080:	d5fc      	bpl.n	1000a07c <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a082:	7920      	ldrb	r0, [r4, #4]
1000a084:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a086:	3501      	adds	r5, #1
1000a088:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a08a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a08c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a08e:	42ab      	cmp	r3, r5
1000a090:	d1ef      	bne.n	1000a072 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a092:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a094:	06db      	lsls	r3, r3, #27
1000a096:	d5fc      	bpl.n	1000a092 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a098:	2000      	movs	r0, #0
1000a09a:	e000      	b.n	1000a09e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a09c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a09e:	b003      	add	sp, #12
1000a0a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a0a2:	46c0      	nop			; (mov r8, r8)

1000a0a4 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a0a4:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a0a6:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a0a8:	2a00      	cmp	r2, #0
1000a0aa:	d003      	beq.n	1000a0b4 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a0ac:	2100      	movs	r1, #0
1000a0ae:	4b04      	ldr	r3, [pc, #16]	; (1000a0c0 <spi_select_slave+0x1c>)
1000a0b0:	4798      	blx	r3
1000a0b2:	e002      	b.n	1000a0ba <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a0b4:	2101      	movs	r1, #1
1000a0b6:	4b02      	ldr	r3, [pc, #8]	; (1000a0c0 <spi_select_slave+0x1c>)
1000a0b8:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a0ba:	2000      	movs	r0, #0
1000a0bc:	bd10      	pop	{r4, pc}
1000a0be:	46c0      	nop			; (mov r8, r8)
1000a0c0:	1000a5e5 	.word	0x1000a5e5

1000a0c4 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a0c4:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a0c6:	4b0d      	ldr	r3, [pc, #52]	; (1000a0fc <dualtimer_isr_handler+0x38>)
1000a0c8:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a0ca:	2b00      	cmp	r3, #0
1000a0cc:	d007      	beq.n	1000a0de <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a0ce:	2201      	movs	r2, #1
1000a0d0:	4b0a      	ldr	r3, [pc, #40]	; (1000a0fc <dualtimer_isr_handler+0x38>)
1000a0d2:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a0d4:	4b0a      	ldr	r3, [pc, #40]	; (1000a100 <dualtimer_isr_handler+0x3c>)
1000a0d6:	681b      	ldr	r3, [r3, #0]
1000a0d8:	2b00      	cmp	r3, #0
1000a0da:	d000      	beq.n	1000a0de <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a0dc:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a0de:	2334      	movs	r3, #52	; 0x34
1000a0e0:	4a06      	ldr	r2, [pc, #24]	; (1000a0fc <dualtimer_isr_handler+0x38>)
1000a0e2:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a0e4:	2b00      	cmp	r3, #0
1000a0e6:	d007      	beq.n	1000a0f8 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a0e8:	2101      	movs	r1, #1
1000a0ea:	232c      	movs	r3, #44	; 0x2c
1000a0ec:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a0ee:	4b05      	ldr	r3, [pc, #20]	; (1000a104 <dualtimer_isr_handler+0x40>)
1000a0f0:	681b      	ldr	r3, [r3, #0]
1000a0f2:	2b00      	cmp	r3, #0
1000a0f4:	d000      	beq.n	1000a0f8 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a0f6:	4798      	blx	r3
	}
}
1000a0f8:	bd10      	pop	{r4, pc}
1000a0fa:	46c0      	nop			; (mov r8, r8)
1000a0fc:	40001000 	.word	0x40001000
1000a100:	10017420 	.word	0x10017420
1000a104:	10017424 	.word	0x10017424

1000a108 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a108:	2301      	movs	r3, #1
1000a10a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a10c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a10e:	2202      	movs	r2, #2
1000a110:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a112:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a114:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a116:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a118:	2200      	movs	r2, #0
1000a11a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a11c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a11e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a120:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a122:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a124:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a126:	7602      	strb	r2, [r0, #24]
}
1000a128:	4770      	bx	lr
1000a12a:	46c0      	nop			; (mov r8, r8)

1000a12c <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a12c:	2800      	cmp	r0, #0
1000a12e:	d102      	bne.n	1000a136 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a130:	4b02      	ldr	r3, [pc, #8]	; (1000a13c <dualtimer_get_value+0x10>)
1000a132:	6858      	ldr	r0, [r3, #4]
1000a134:	e001      	b.n	1000a13a <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a136:	4b01      	ldr	r3, [pc, #4]	; (1000a13c <dualtimer_get_value+0x10>)
1000a138:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a13a:	4770      	bx	lr
1000a13c:	40001000 	.word	0x40001000

1000a140 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a140:	2800      	cmp	r0, #0
1000a142:	d107      	bne.n	1000a154 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a144:	2900      	cmp	r1, #0
1000a146:	d102      	bne.n	1000a14e <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a148:	4b06      	ldr	r3, [pc, #24]	; (1000a164 <dualtimer_set_counter+0x24>)
1000a14a:	601a      	str	r2, [r3, #0]
1000a14c:	e009      	b.n	1000a162 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a14e:	4b05      	ldr	r3, [pc, #20]	; (1000a164 <dualtimer_set_counter+0x24>)
1000a150:	619a      	str	r2, [r3, #24]
1000a152:	e006      	b.n	1000a162 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a154:	2900      	cmp	r1, #0
1000a156:	d102      	bne.n	1000a15e <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a158:	4b02      	ldr	r3, [pc, #8]	; (1000a164 <dualtimer_set_counter+0x24>)
1000a15a:	621a      	str	r2, [r3, #32]
1000a15c:	e001      	b.n	1000a162 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a15e:	4b01      	ldr	r3, [pc, #4]	; (1000a164 <dualtimer_set_counter+0x24>)
1000a160:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a162:	4770      	bx	lr
1000a164:	40001000 	.word	0x40001000

1000a168 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a168:	2800      	cmp	r0, #0
1000a16a:	d105      	bne.n	1000a178 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a16c:	4a06      	ldr	r2, [pc, #24]	; (1000a188 <dualtimer_enable+0x20>)
1000a16e:	7a11      	ldrb	r1, [r2, #8]
1000a170:	2380      	movs	r3, #128	; 0x80
1000a172:	430b      	orrs	r3, r1
1000a174:	7213      	strb	r3, [r2, #8]
1000a176:	e005      	b.n	1000a184 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a178:	4903      	ldr	r1, [pc, #12]	; (1000a188 <dualtimer_enable+0x20>)
1000a17a:	2228      	movs	r2, #40	; 0x28
1000a17c:	5c88      	ldrb	r0, [r1, r2]
1000a17e:	2380      	movs	r3, #128	; 0x80
1000a180:	4303      	orrs	r3, r0
1000a182:	548b      	strb	r3, [r1, r2]
	}
}
1000a184:	4770      	bx	lr
1000a186:	46c0      	nop			; (mov r8, r8)
1000a188:	40001000 	.word	0x40001000

1000a18c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a18c:	2800      	cmp	r0, #0
1000a18e:	d105      	bne.n	1000a19c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a190:	4a06      	ldr	r2, [pc, #24]	; (1000a1ac <dualtimer_disable+0x20>)
1000a192:	7a11      	ldrb	r1, [r2, #8]
1000a194:	237f      	movs	r3, #127	; 0x7f
1000a196:	400b      	ands	r3, r1
1000a198:	7213      	strb	r3, [r2, #8]
1000a19a:	e005      	b.n	1000a1a8 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a19c:	4903      	ldr	r1, [pc, #12]	; (1000a1ac <dualtimer_disable+0x20>)
1000a19e:	2228      	movs	r2, #40	; 0x28
1000a1a0:	5c88      	ldrb	r0, [r1, r2]
1000a1a2:	237f      	movs	r3, #127	; 0x7f
1000a1a4:	4003      	ands	r3, r0
1000a1a6:	548b      	strb	r3, [r1, r2]
	}
}
1000a1a8:	4770      	bx	lr
1000a1aa:	46c0      	nop			; (mov r8, r8)
1000a1ac:	40001000 	.word	0x40001000

1000a1b0 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a1b0:	b570      	push	{r4, r5, r6, lr}
1000a1b2:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a1b4:	2004      	movs	r0, #4
1000a1b6:	4b39      	ldr	r3, [pc, #228]	; (1000a29c <dualtimer_init+0xec>)
1000a1b8:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a1ba:	7823      	ldrb	r3, [r4, #0]
1000a1bc:	2b00      	cmp	r3, #0
1000a1be:	d102      	bne.n	1000a1c6 <dualtimer_init+0x16>
1000a1c0:	7b23      	ldrb	r3, [r4, #12]
1000a1c2:	2b00      	cmp	r3, #0
1000a1c4:	d065      	beq.n	1000a292 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a1c6:	4936      	ldr	r1, [pc, #216]	; (1000a2a0 <dualtimer_init+0xf0>)
1000a1c8:	68ca      	ldr	r2, [r1, #12]
1000a1ca:	2320      	movs	r3, #32
1000a1cc:	4313      	orrs	r3, r2
1000a1ce:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a1d0:	7e22      	ldrb	r2, [r4, #24]
1000a1d2:	698b      	ldr	r3, [r1, #24]
1000a1d4:	2003      	movs	r0, #3
1000a1d6:	4002      	ands	r2, r0
1000a1d8:	0112      	lsls	r2, r2, #4
1000a1da:	302d      	adds	r0, #45	; 0x2d
1000a1dc:	4383      	bics	r3, r0
1000a1de:	4313      	orrs	r3, r2
1000a1e0:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a1e2:	7823      	ldrb	r3, [r4, #0]
1000a1e4:	2b00      	cmp	r3, #0
1000a1e6:	d026      	beq.n	1000a236 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a1e8:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a1ea:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a1ec:	2b00      	cmp	r3, #0
1000a1ee:	d003      	beq.n	1000a1f8 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a1f0:	3b02      	subs	r3, #2
1000a1f2:	425d      	negs	r5, r3
1000a1f4:	415d      	adcs	r5, r3
1000a1f6:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a1f8:	78a2      	ldrb	r2, [r4, #2]
1000a1fa:	0052      	lsls	r2, r2, #1
1000a1fc:	2502      	movs	r5, #2
1000a1fe:	402a      	ands	r2, r5
1000a200:	78e3      	ldrb	r3, [r4, #3]
1000a202:	009b      	lsls	r3, r3, #2
1000a204:	350a      	adds	r5, #10
1000a206:	402b      	ands	r3, r5
1000a208:	431a      	orrs	r2, r3
1000a20a:	0015      	movs	r5, r2
1000a20c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a20e:	7923      	ldrb	r3, [r4, #4]
1000a210:	2b00      	cmp	r3, #0
1000a212:	d001      	beq.n	1000a218 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a214:	2320      	movs	r3, #32
1000a216:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a218:	4b22      	ldr	r3, [pc, #136]	; (1000a2a4 <dualtimer_init+0xf4>)
1000a21a:	68a2      	ldr	r2, [r4, #8]
1000a21c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a21e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a220:	491f      	ldr	r1, [pc, #124]	; (1000a2a0 <dualtimer_init+0xf0>)
1000a222:	22c4      	movs	r2, #196	; 0xc4
1000a224:	0052      	lsls	r2, r2, #1
1000a226:	5c88      	ldrb	r0, [r1, r2]
1000a228:	2301      	movs	r3, #1
1000a22a:	4303      	orrs	r3, r0
1000a22c:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a22e:	2000      	movs	r0, #0
1000a230:	4b1d      	ldr	r3, [pc, #116]	; (1000a2a8 <dualtimer_init+0xf8>)
1000a232:	4798      	blx	r3
1000a234:	e000      	b.n	1000a238 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a236:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a238:	7b23      	ldrb	r3, [r4, #12]
1000a23a:	2b00      	cmp	r3, #0
1000a23c:	d029      	beq.n	1000a292 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a23e:	7b63      	ldrb	r3, [r4, #13]
1000a240:	2b00      	cmp	r3, #0
1000a242:	d005      	beq.n	1000a250 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a244:	2b01      	cmp	r3, #1
1000a246:	d005      	beq.n	1000a254 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a248:	2b02      	cmp	r3, #2
1000a24a:	d104      	bne.n	1000a256 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a24c:	2540      	movs	r5, #64	; 0x40
1000a24e:	e002      	b.n	1000a256 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a250:	2501      	movs	r5, #1
1000a252:	e000      	b.n	1000a256 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a254:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a256:	7ba3      	ldrb	r3, [r4, #14]
1000a258:	005b      	lsls	r3, r3, #1
1000a25a:	2102      	movs	r1, #2
1000a25c:	4019      	ands	r1, r3
1000a25e:	7be2      	ldrb	r2, [r4, #15]
1000a260:	0092      	lsls	r2, r2, #2
1000a262:	230c      	movs	r3, #12
1000a264:	4013      	ands	r3, r2
1000a266:	430b      	orrs	r3, r1
1000a268:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a26a:	7c23      	ldrb	r3, [r4, #16]
1000a26c:	2b00      	cmp	r3, #0
1000a26e:	d001      	beq.n	1000a274 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a270:	2320      	movs	r3, #32
1000a272:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a274:	6962      	ldr	r2, [r4, #20]
1000a276:	4b0b      	ldr	r3, [pc, #44]	; (1000a2a4 <dualtimer_init+0xf4>)
1000a278:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a27a:	2228      	movs	r2, #40	; 0x28
1000a27c:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a27e:	4908      	ldr	r1, [pc, #32]	; (1000a2a0 <dualtimer_init+0xf0>)
1000a280:	3261      	adds	r2, #97	; 0x61
1000a282:	32ff      	adds	r2, #255	; 0xff
1000a284:	5c88      	ldrb	r0, [r1, r2]
1000a286:	2302      	movs	r3, #2
1000a288:	4303      	orrs	r3, r0
1000a28a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a28c:	2001      	movs	r0, #1
1000a28e:	4b06      	ldr	r3, [pc, #24]	; (1000a2a8 <dualtimer_init+0xf8>)
1000a290:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a292:	4906      	ldr	r1, [pc, #24]	; (1000a2ac <dualtimer_init+0xfc>)
1000a294:	201e      	movs	r0, #30
1000a296:	4b06      	ldr	r3, [pc, #24]	; (1000a2b0 <dualtimer_init+0x100>)
1000a298:	4798      	blx	r3
}
1000a29a:	bd70      	pop	{r4, r5, r6, pc}
1000a29c:	1000b0e9 	.word	0x1000b0e9
1000a2a0:	4000b000 	.word	0x4000b000
1000a2a4:	40001000 	.word	0x40001000
1000a2a8:	1000a169 	.word	0x1000a169
1000a2ac:	1000a0c5 	.word	0x1000a0c5
1000a2b0:	1000b551 	.word	0x1000b551

1000a2b4 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a2b4:	2800      	cmp	r0, #0
1000a2b6:	d102      	bne.n	1000a2be <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a2b8:	4b02      	ldr	r3, [pc, #8]	; (1000a2c4 <dualtimer_register_callback+0x10>)
1000a2ba:	6019      	str	r1, [r3, #0]
1000a2bc:	e001      	b.n	1000a2c2 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a2be:	4b02      	ldr	r3, [pc, #8]	; (1000a2c8 <dualtimer_register_callback+0x14>)
1000a2c0:	6019      	str	r1, [r3, #0]
	}
}
1000a2c2:	4770      	bx	lr
1000a2c4:	10017420 	.word	0x10017420
1000a2c8:	10017424 	.word	0x10017424

1000a2cc <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a2cc:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a2ce:	4b16      	ldr	r3, [pc, #88]	; (1000a328 <gpio_port0_isr_handler+0x5c>)
1000a2d0:	681d      	ldr	r5, [r3, #0]
1000a2d2:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a2d4:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a2d6:	07cb      	lsls	r3, r1, #31
1000a2d8:	d407      	bmi.n	1000a2ea <gpio_port0_isr_handler+0x1e>
1000a2da:	2301      	movs	r3, #1
1000a2dc:	2401      	movs	r4, #1
1000a2de:	0018      	movs	r0, r3
1000a2e0:	0022      	movs	r2, r4
1000a2e2:	409a      	lsls	r2, r3
1000a2e4:	4211      	tst	r1, r2
1000a2e6:	d014      	beq.n	1000a312 <gpio_port0_isr_handler+0x46>
1000a2e8:	e001      	b.n	1000a2ee <gpio_port0_isr_handler+0x22>
1000a2ea:	2201      	movs	r2, #1
1000a2ec:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a2ee:	b292      	uxth	r2, r2
1000a2f0:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a2f2:	2346      	movs	r3, #70	; 0x46
1000a2f4:	4a0c      	ldr	r2, [pc, #48]	; (1000a328 <gpio_port0_isr_handler+0x5c>)
1000a2f6:	5ad3      	ldrh	r3, [r2, r3]
1000a2f8:	4103      	asrs	r3, r0
1000a2fa:	07db      	lsls	r3, r3, #31
1000a2fc:	d50c      	bpl.n	1000a318 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a2fe:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a300:	5ad3      	ldrh	r3, [r2, r3]
1000a302:	4103      	asrs	r3, r0
1000a304:	07db      	lsls	r3, r3, #31
1000a306:	d507      	bpl.n	1000a318 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a308:	0080      	lsls	r0, r0, #2
1000a30a:	1810      	adds	r0, r2, r0
1000a30c:	6843      	ldr	r3, [r0, #4]
1000a30e:	4798      	blx	r3
1000a310:	e002      	b.n	1000a318 <gpio_port0_isr_handler+0x4c>
1000a312:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a314:	2b10      	cmp	r3, #16
1000a316:	d1e2      	bne.n	1000a2de <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a318:	2180      	movs	r1, #128	; 0x80
1000a31a:	0409      	lsls	r1, r1, #16
1000a31c:	23c0      	movs	r3, #192	; 0xc0
1000a31e:	005b      	lsls	r3, r3, #1
1000a320:	4a02      	ldr	r2, [pc, #8]	; (1000a32c <gpio_port0_isr_handler+0x60>)
1000a322:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a324:	bd70      	pop	{r4, r5, r6, pc}
1000a326:	46c0      	nop			; (mov r8, r8)
1000a328:	10019120 	.word	0x10019120
1000a32c:	e000e100 	.word	0xe000e100

1000a330 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a330:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a332:	4b18      	ldr	r3, [pc, #96]	; (1000a394 <gpio_port1_isr_handler+0x64>)
1000a334:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a336:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a338:	b2b6      	uxth	r6, r6
1000a33a:	0037      	movs	r7, r6
1000a33c:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a33e:	0b76      	lsrs	r6, r6, #13
1000a340:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a342:	4d14      	ldr	r5, [pc, #80]	; (1000a394 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a344:	2e00      	cmp	r6, #0
1000a346:	d001      	beq.n	1000a34c <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a348:	4b13      	ldr	r3, [pc, #76]	; (1000a398 <gpio_port1_isr_handler+0x68>)
1000a34a:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a34c:	0022      	movs	r2, r4
1000a34e:	2301      	movs	r3, #1
1000a350:	40a3      	lsls	r3, r4
1000a352:	421f      	tst	r7, r3
1000a354:	d013      	beq.n	1000a37e <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a356:	b29b      	uxth	r3, r3
1000a358:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a35a:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a35c:	238e      	movs	r3, #142	; 0x8e
1000a35e:	5aeb      	ldrh	r3, [r5, r3]
1000a360:	4123      	asrs	r3, r4
1000a362:	07db      	lsls	r3, r3, #31
1000a364:	d50b      	bpl.n	1000a37e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a366:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a368:	490a      	ldr	r1, [pc, #40]	; (1000a394 <gpio_port1_isr_handler+0x64>)
1000a36a:	5acb      	ldrh	r3, [r1, r3]
1000a36c:	4123      	asrs	r3, r4
1000a36e:	07db      	lsls	r3, r3, #31
1000a370:	d505      	bpl.n	1000a37e <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a372:	3212      	adds	r2, #18
1000a374:	0092      	lsls	r2, r2, #2
1000a376:	188a      	adds	r2, r1, r2
1000a378:	6853      	ldr	r3, [r2, #4]
1000a37a:	4798      	blx	r3
				break;
1000a37c:	e002      	b.n	1000a384 <gpio_port1_isr_handler+0x54>
1000a37e:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a380:	2c10      	cmp	r4, #16
1000a382:	d1df      	bne.n	1000a344 <gpio_port1_isr_handler+0x14>
1000a384:	2180      	movs	r1, #128	; 0x80
1000a386:	0449      	lsls	r1, r1, #17
1000a388:	23c0      	movs	r3, #192	; 0xc0
1000a38a:	005b      	lsls	r3, r3, #1
1000a38c:	4a03      	ldr	r2, [pc, #12]	; (1000a39c <gpio_port1_isr_handler+0x6c>)
1000a38e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a392:	46c0      	nop			; (mov r8, r8)
1000a394:	10019120 	.word	0x10019120
1000a398:	0001bc51 	.word	0x0001bc51
1000a39c:	e000e100 	.word	0xe000e100

1000a3a0 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a3a0:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a3a2:	2390      	movs	r3, #144	; 0x90
1000a3a4:	4a1b      	ldr	r2, [pc, #108]	; (1000a414 <gpio_port2_isr_handler+0x74>)
1000a3a6:	58d2      	ldr	r2, [r2, r3]
1000a3a8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a3aa:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a3ac:	04d9      	lsls	r1, r3, #19
1000a3ae:	d414      	bmi.n	1000a3da <gpio_port2_isr_handler+0x3a>
1000a3b0:	0499      	lsls	r1, r3, #18
1000a3b2:	d40a      	bmi.n	1000a3ca <gpio_port2_isr_handler+0x2a>
1000a3b4:	0459      	lsls	r1, r3, #17
1000a3b6:	d40c      	bmi.n	1000a3d2 <gpio_port2_isr_handler+0x32>
1000a3b8:	0bdb      	lsrs	r3, r3, #15
1000a3ba:	03db      	lsls	r3, r3, #15
1000a3bc:	b29b      	uxth	r3, r3
1000a3be:	2b00      	cmp	r3, #0
1000a3c0:	d020      	beq.n	1000a404 <gpio_port2_isr_handler+0x64>
1000a3c2:	2380      	movs	r3, #128	; 0x80
1000a3c4:	021b      	lsls	r3, r3, #8
1000a3c6:	210f      	movs	r1, #15
1000a3c8:	e00a      	b.n	1000a3e0 <gpio_port2_isr_handler+0x40>
1000a3ca:	2380      	movs	r3, #128	; 0x80
1000a3cc:	019b      	lsls	r3, r3, #6
1000a3ce:	210d      	movs	r1, #13
1000a3d0:	e006      	b.n	1000a3e0 <gpio_port2_isr_handler+0x40>
1000a3d2:	2380      	movs	r3, #128	; 0x80
1000a3d4:	01db      	lsls	r3, r3, #7
1000a3d6:	210e      	movs	r1, #14
1000a3d8:	e002      	b.n	1000a3e0 <gpio_port2_isr_handler+0x40>
1000a3da:	2380      	movs	r3, #128	; 0x80
1000a3dc:	015b      	lsls	r3, r3, #5
1000a3de:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a3e0:	b29b      	uxth	r3, r3
1000a3e2:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a3e4:	23d6      	movs	r3, #214	; 0xd6
1000a3e6:	4a0b      	ldr	r2, [pc, #44]	; (1000a414 <gpio_port2_isr_handler+0x74>)
1000a3e8:	5ad3      	ldrh	r3, [r2, r3]
1000a3ea:	410b      	asrs	r3, r1
1000a3ec:	07db      	lsls	r3, r3, #31
1000a3ee:	d509      	bpl.n	1000a404 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a3f0:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a3f2:	5ad3      	ldrh	r3, [r2, r3]
1000a3f4:	410b      	asrs	r3, r1
1000a3f6:	07db      	lsls	r3, r3, #31
1000a3f8:	d504      	bpl.n	1000a404 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a3fa:	3124      	adds	r1, #36	; 0x24
1000a3fc:	0089      	lsls	r1, r1, #2
1000a3fe:	1851      	adds	r1, r2, r1
1000a400:	684b      	ldr	r3, [r1, #4]
1000a402:	4798      	blx	r3
1000a404:	2180      	movs	r1, #128	; 0x80
1000a406:	0489      	lsls	r1, r1, #18
1000a408:	23c0      	movs	r3, #192	; 0xc0
1000a40a:	005b      	lsls	r3, r3, #1
1000a40c:	4a02      	ldr	r2, [pc, #8]	; (1000a418 <gpio_port2_isr_handler+0x78>)
1000a40e:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a410:	bd10      	pop	{r4, pc}
1000a412:	46c0      	nop			; (mov r8, r8)
1000a414:	10019120 	.word	0x10019120
1000a418:	e000e100 	.word	0xe000e100

1000a41c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a41c:	2300      	movs	r3, #0
1000a41e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a420:	2201      	movs	r2, #1
1000a422:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a424:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a426:	70c3      	strb	r3, [r0, #3]
}
1000a428:	4770      	bx	lr
1000a42a:	46c0      	nop			; (mov r8, r8)

1000a42c <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a42c:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a42e:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a430:	2801      	cmp	r0, #1
1000a432:	d800      	bhi.n	1000a436 <gpio_pin_set_config+0xa>
1000a434:	e0c8      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a436:	2807      	cmp	r0, #7
1000a438:	d809      	bhi.n	1000a44e <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a43a:	4d64      	ldr	r5, [pc, #400]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a43c:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a43e:	3b10      	subs	r3, #16
1000a440:	4003      	ands	r3, r0
1000a442:	009b      	lsls	r3, r3, #2
1000a444:	2407      	movs	r4, #7
1000a446:	409c      	lsls	r4, r3
1000a448:	43a2      	bics	r2, r4
1000a44a:	646a      	str	r2, [r5, #68]	; 0x44
1000a44c:	e029      	b.n	1000a4a2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a44e:	280f      	cmp	r0, #15
1000a450:	d809      	bhi.n	1000a466 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a452:	4d5e      	ldr	r5, [pc, #376]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a454:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a456:	2307      	movs	r3, #7
1000a458:	4003      	ands	r3, r0
1000a45a:	009b      	lsls	r3, r3, #2
1000a45c:	2407      	movs	r4, #7
1000a45e:	409c      	lsls	r4, r3
1000a460:	43a2      	bics	r2, r4
1000a462:	64aa      	str	r2, [r5, #72]	; 0x48
1000a464:	e01d      	b.n	1000a4a2 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a466:	2817      	cmp	r0, #23
1000a468:	d809      	bhi.n	1000a47e <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a46a:	4d58      	ldr	r5, [pc, #352]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a46c:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a46e:	2307      	movs	r3, #7
1000a470:	4003      	ands	r3, r0
1000a472:	009b      	lsls	r3, r3, #2
1000a474:	2407      	movs	r4, #7
1000a476:	409c      	lsls	r4, r3
1000a478:	43a2      	bics	r2, r4
1000a47a:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a47c:	e011      	b.n	1000a4a2 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a47e:	0003      	movs	r3, r0
1000a480:	3b2c      	subs	r3, #44	; 0x2c
1000a482:	2b03      	cmp	r3, #3
1000a484:	d80d      	bhi.n	1000a4a2 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a486:	4d52      	ldr	r5, [pc, #328]	; (1000a5d0 <gpio_pin_set_config+0x1a4>)
1000a488:	2482      	movs	r4, #130	; 0x82
1000a48a:	00e4      	lsls	r4, r4, #3
1000a48c:	5d2a      	ldrb	r2, [r5, r4]
1000a48e:	0712      	lsls	r2, r2, #28
1000a490:	2601      	movs	r6, #1
1000a492:	409e      	lsls	r6, r3
1000a494:	0f12      	lsrs	r2, r2, #28
1000a496:	5d2b      	ldrb	r3, [r5, r4]
1000a498:	43b2      	bics	r2, r6
1000a49a:	260f      	movs	r6, #15
1000a49c:	43b3      	bics	r3, r6
1000a49e:	4313      	orrs	r3, r2
1000a4a0:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a4a2:	0003      	movs	r3, r0
1000a4a4:	3b1d      	subs	r3, #29
1000a4a6:	2b02      	cmp	r3, #2
1000a4a8:	d829      	bhi.n	1000a4fe <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a4aa:	784b      	ldrb	r3, [r1, #1]
1000a4ac:	2b01      	cmp	r3, #1
1000a4ae:	d108      	bne.n	1000a4c2 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a4b0:	4d47      	ldr	r5, [pc, #284]	; (1000a5d0 <gpio_pin_set_config+0x1a4>)
1000a4b2:	7d2b      	ldrb	r3, [r5, #20]
1000a4b4:	241f      	movs	r4, #31
1000a4b6:	1a24      	subs	r4, r4, r0
1000a4b8:	2201      	movs	r2, #1
1000a4ba:	40a2      	lsls	r2, r4
1000a4bc:	4393      	bics	r3, r2
1000a4be:	752b      	strb	r3, [r5, #20]
1000a4c0:	e008      	b.n	1000a4d4 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a4c2:	4c43      	ldr	r4, [pc, #268]	; (1000a5d0 <gpio_pin_set_config+0x1a4>)
1000a4c4:	7d25      	ldrb	r5, [r4, #20]
1000a4c6:	221f      	movs	r2, #31
1000a4c8:	1a12      	subs	r2, r2, r0
1000a4ca:	2301      	movs	r3, #1
1000a4cc:	4093      	lsls	r3, r2
1000a4ce:	432b      	orrs	r3, r5
1000a4d0:	b2db      	uxtb	r3, r3
1000a4d2:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a4d4:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4d6:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a4d8:	2a00      	cmp	r2, #0
1000a4da:	d075      	beq.n	1000a5c8 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a4dc:	493c      	ldr	r1, [pc, #240]	; (1000a5d0 <gpio_pin_set_config+0x1a4>)
1000a4de:	880c      	ldrh	r4, [r1, #0]
1000a4e0:	221f      	movs	r2, #31
1000a4e2:	1a10      	subs	r0, r2, r0
1000a4e4:	0080      	lsls	r0, r0, #2
1000a4e6:	3301      	adds	r3, #1
1000a4e8:	4083      	lsls	r3, r0
1000a4ea:	4323      	orrs	r3, r4
1000a4ec:	b29b      	uxth	r3, r3
1000a4ee:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a4f0:	4a38      	ldr	r2, [pc, #224]	; (1000a5d4 <gpio_pin_set_config+0x1a8>)
1000a4f2:	7811      	ldrb	r1, [r2, #0]
1000a4f4:	2302      	movs	r3, #2
1000a4f6:	430b      	orrs	r3, r1
1000a4f8:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a4fa:	2300      	movs	r3, #0
1000a4fc:	e064      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a4fe:	780a      	ldrb	r2, [r1, #0]
1000a500:	2a00      	cmp	r2, #0
1000a502:	d140      	bne.n	1000a586 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a504:	280f      	cmp	r0, #15
1000a506:	d808      	bhi.n	1000a51a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a508:	2301      	movs	r3, #1
1000a50a:	4083      	lsls	r3, r0
1000a50c:	b29b      	uxth	r3, r3
1000a50e:	4a32      	ldr	r2, [pc, #200]	; (1000a5d8 <gpio_pin_set_config+0x1ac>)
1000a510:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a512:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a514:	281f      	cmp	r0, #31
1000a516:	d857      	bhi.n	1000a5c8 <gpio_pin_set_config+0x19c>
1000a518:	e012      	b.n	1000a540 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a51a:	281f      	cmp	r0, #31
1000a51c:	d807      	bhi.n	1000a52e <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a51e:	220f      	movs	r2, #15
1000a520:	4002      	ands	r2, r0
1000a522:	2301      	movs	r3, #1
1000a524:	4093      	lsls	r3, r2
1000a526:	b29b      	uxth	r3, r3
1000a528:	4a2c      	ldr	r2, [pc, #176]	; (1000a5dc <gpio_pin_set_config+0x1b0>)
1000a52a:	8293      	strh	r3, [r2, #20]
1000a52c:	e008      	b.n	1000a540 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a52e:	230f      	movs	r3, #15
1000a530:	4018      	ands	r0, r3
1000a532:	3b0e      	subs	r3, #14
1000a534:	4083      	lsls	r3, r0
1000a536:	b29b      	uxth	r3, r3
1000a538:	4a29      	ldr	r2, [pc, #164]	; (1000a5e0 <gpio_pin_set_config+0x1b4>)
1000a53a:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a53c:	2300      	movs	r3, #0
1000a53e:	e043      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a540:	784b      	ldrb	r3, [r1, #1]
1000a542:	2b01      	cmp	r3, #1
1000a544:	d00c      	beq.n	1000a560 <gpio_pin_set_config+0x134>
1000a546:	2b00      	cmp	r3, #0
1000a548:	d002      	beq.n	1000a550 <gpio_pin_set_config+0x124>
1000a54a:	2b02      	cmp	r3, #2
1000a54c:	d010      	beq.n	1000a570 <gpio_pin_set_config+0x144>
1000a54e:	e03a      	b.n	1000a5c6 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a550:	491e      	ldr	r1, [pc, #120]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a552:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a554:	2301      	movs	r3, #1
1000a556:	4083      	lsls	r3, r0
1000a558:	4313      	orrs	r3, r2
1000a55a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a55c:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a55e:	e033      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a560:	491a      	ldr	r1, [pc, #104]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a562:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a564:	2201      	movs	r2, #1
1000a566:	4082      	lsls	r2, r0
1000a568:	4393      	bics	r3, r2
1000a56a:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a56c:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a56e:	e02b      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a570:	4b16      	ldr	r3, [pc, #88]	; (1000a5cc <gpio_pin_set_config+0x1a0>)
1000a572:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a574:	2201      	movs	r2, #1
1000a576:	4082      	lsls	r2, r0
1000a578:	4311      	orrs	r1, r2
1000a57a:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a57c:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a57e:	4391      	bics	r1, r2
1000a580:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a582:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a584:	e020      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a586:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a588:	2a01      	cmp	r2, #1
1000a58a:	d11d      	bne.n	1000a5c8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a58c:	280f      	cmp	r0, #15
1000a58e:	d806      	bhi.n	1000a59e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a590:	3301      	adds	r3, #1
1000a592:	4083      	lsls	r3, r0
1000a594:	b29b      	uxth	r3, r3
1000a596:	4a10      	ldr	r2, [pc, #64]	; (1000a5d8 <gpio_pin_set_config+0x1ac>)
1000a598:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a59a:	2300      	movs	r3, #0
1000a59c:	e014      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a59e:	281f      	cmp	r0, #31
1000a5a0:	d808      	bhi.n	1000a5b4 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a5a2:	230f      	movs	r3, #15
1000a5a4:	4018      	ands	r0, r3
1000a5a6:	3b0e      	subs	r3, #14
1000a5a8:	4083      	lsls	r3, r0
1000a5aa:	b29b      	uxth	r3, r3
1000a5ac:	4a0b      	ldr	r2, [pc, #44]	; (1000a5dc <gpio_pin_set_config+0x1b0>)
1000a5ae:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a5b0:	2300      	movs	r3, #0
1000a5b2:	e009      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a5b4:	230f      	movs	r3, #15
1000a5b6:	4018      	ands	r0, r3
1000a5b8:	3b0e      	subs	r3, #14
1000a5ba:	4083      	lsls	r3, r0
1000a5bc:	b29b      	uxth	r3, r3
1000a5be:	4a08      	ldr	r2, [pc, #32]	; (1000a5e0 <gpio_pin_set_config+0x1b4>)
1000a5c0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a5c2:	2300      	movs	r3, #0
1000a5c4:	e000      	b.n	1000a5c8 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a5c6:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a5c8:	0018      	movs	r0, r3
1000a5ca:	bd70      	pop	{r4, r5, r6, pc}
1000a5cc:	4000b000 	.word	0x4000b000
1000a5d0:	4000f000 	.word	0x4000f000
1000a5d4:	4000e000 	.word	0x4000e000
1000a5d8:	40010000 	.word	0x40010000
1000a5dc:	40011000 	.word	0x40011000
1000a5e0:	40013000 	.word	0x40013000

1000a5e4 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a5e4:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a5e6:	280f      	cmp	r0, #15
1000a5e8:	d810      	bhi.n	1000a60c <gpio_pin_set_output_level+0x28>
		if(level) {
1000a5ea:	2900      	cmp	r1, #0
1000a5ec:	d007      	beq.n	1000a5fe <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a5ee:	4a1d      	ldr	r2, [pc, #116]	; (1000a664 <gpio_pin_set_output_level+0x80>)
1000a5f0:	8891      	ldrh	r1, [r2, #4]
1000a5f2:	2301      	movs	r3, #1
1000a5f4:	4083      	lsls	r3, r0
1000a5f6:	430b      	orrs	r3, r1
1000a5f8:	b29b      	uxth	r3, r3
1000a5fa:	8093      	strh	r3, [r2, #4]
1000a5fc:	e031      	b.n	1000a662 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a5fe:	4919      	ldr	r1, [pc, #100]	; (1000a664 <gpio_pin_set_output_level+0x80>)
1000a600:	888b      	ldrh	r3, [r1, #4]
1000a602:	2201      	movs	r2, #1
1000a604:	4082      	lsls	r2, r0
1000a606:	4393      	bics	r3, r2
1000a608:	808b      	strh	r3, [r1, #4]
1000a60a:	e02a      	b.n	1000a662 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a60c:	281f      	cmp	r0, #31
1000a60e:	d814      	bhi.n	1000a63a <gpio_pin_set_output_level+0x56>
		if(level) {
1000a610:	2900      	cmp	r1, #0
1000a612:	d009      	beq.n	1000a628 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a614:	4914      	ldr	r1, [pc, #80]	; (1000a668 <gpio_pin_set_output_level+0x84>)
1000a616:	888c      	ldrh	r4, [r1, #4]
1000a618:	220f      	movs	r2, #15
1000a61a:	4010      	ands	r0, r2
1000a61c:	2301      	movs	r3, #1
1000a61e:	4083      	lsls	r3, r0
1000a620:	4323      	orrs	r3, r4
1000a622:	b29b      	uxth	r3, r3
1000a624:	808b      	strh	r3, [r1, #4]
1000a626:	e01c      	b.n	1000a662 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a628:	490f      	ldr	r1, [pc, #60]	; (1000a668 <gpio_pin_set_output_level+0x84>)
1000a62a:	888b      	ldrh	r3, [r1, #4]
1000a62c:	220f      	movs	r2, #15
1000a62e:	4010      	ands	r0, r2
1000a630:	3a0e      	subs	r2, #14
1000a632:	4082      	lsls	r2, r0
1000a634:	4393      	bics	r3, r2
1000a636:	808b      	strh	r3, [r1, #4]
1000a638:	e013      	b.n	1000a662 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a63a:	2900      	cmp	r1, #0
1000a63c:	d009      	beq.n	1000a652 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a63e:	490b      	ldr	r1, [pc, #44]	; (1000a66c <gpio_pin_set_output_level+0x88>)
1000a640:	888c      	ldrh	r4, [r1, #4]
1000a642:	220f      	movs	r2, #15
1000a644:	4010      	ands	r0, r2
1000a646:	2301      	movs	r3, #1
1000a648:	4083      	lsls	r3, r0
1000a64a:	4323      	orrs	r3, r4
1000a64c:	b29b      	uxth	r3, r3
1000a64e:	808b      	strh	r3, [r1, #4]
1000a650:	e007      	b.n	1000a662 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a652:	4906      	ldr	r1, [pc, #24]	; (1000a66c <gpio_pin_set_output_level+0x88>)
1000a654:	888b      	ldrh	r3, [r1, #4]
1000a656:	220f      	movs	r2, #15
1000a658:	4010      	ands	r0, r2
1000a65a:	3a0e      	subs	r2, #14
1000a65c:	4082      	lsls	r2, r0
1000a65e:	4393      	bics	r3, r2
1000a660:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a662:	bd10      	pop	{r4, pc}
1000a664:	40010000 	.word	0x40010000
1000a668:	40011000 	.word	0x40011000
1000a66c:	40013000 	.word	0x40013000

1000a670 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a670:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a672:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a674:	23ff      	movs	r3, #255	; 0xff
1000a676:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a678:	2807      	cmp	r0, #7
1000a67a:	d833      	bhi.n	1000a6e4 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a67c:	4a4e      	ldr	r2, [pc, #312]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a67e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a680:	3bf8      	subs	r3, #248	; 0xf8
1000a682:	4003      	ands	r3, r0
1000a684:	009b      	lsls	r3, r3, #2
1000a686:	2607      	movs	r6, #7
1000a688:	409e      	lsls	r6, r3
1000a68a:	43b4      	bics	r4, r6
1000a68c:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a68e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a690:	000e      	movs	r6, r1
1000a692:	409e      	lsls	r6, r3
1000a694:	0033      	movs	r3, r6
1000a696:	4323      	orrs	r3, r4
1000a698:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a69a:	2901      	cmp	r1, #1
1000a69c:	d000      	beq.n	1000a6a0 <gpio_pinmux_cofiguration+0x30>
1000a69e:	e08a      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a6a0:	2803      	cmp	r0, #3
1000a6a2:	d80f      	bhi.n	1000a6c4 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a6a4:	0011      	movs	r1, r2
1000a6a6:	22d0      	movs	r2, #208	; 0xd0
1000a6a8:	0052      	lsls	r2, r2, #1
1000a6aa:	588c      	ldr	r4, [r1, r2]
1000a6ac:	2303      	movs	r3, #3
1000a6ae:	4018      	ands	r0, r3
1000a6b0:	00c0      	lsls	r0, r0, #3
1000a6b2:	333c      	adds	r3, #60	; 0x3c
1000a6b4:	4083      	lsls	r3, r0
1000a6b6:	439c      	bics	r4, r3
1000a6b8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a6ba:	588b      	ldr	r3, [r1, r2]
1000a6bc:	4085      	lsls	r5, r0
1000a6be:	431d      	orrs	r5, r3
1000a6c0:	508d      	str	r5, [r1, r2]
1000a6c2:	e078      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a6c4:	493c      	ldr	r1, [pc, #240]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a6c6:	22d2      	movs	r2, #210	; 0xd2
1000a6c8:	0052      	lsls	r2, r2, #1
1000a6ca:	588c      	ldr	r4, [r1, r2]
1000a6cc:	2303      	movs	r3, #3
1000a6ce:	4018      	ands	r0, r3
1000a6d0:	00c0      	lsls	r0, r0, #3
1000a6d2:	333c      	adds	r3, #60	; 0x3c
1000a6d4:	4083      	lsls	r3, r0
1000a6d6:	439c      	bics	r4, r3
1000a6d8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a6da:	588b      	ldr	r3, [r1, r2]
1000a6dc:	4085      	lsls	r5, r0
1000a6de:	431d      	orrs	r5, r3
1000a6e0:	508d      	str	r5, [r1, r2]
1000a6e2:	e068      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a6e4:	280f      	cmp	r0, #15
1000a6e6:	d832      	bhi.n	1000a74e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a6e8:	4a33      	ldr	r2, [pc, #204]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a6ea:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a6ec:	2307      	movs	r3, #7
1000a6ee:	4003      	ands	r3, r0
1000a6f0:	009b      	lsls	r3, r3, #2
1000a6f2:	2607      	movs	r6, #7
1000a6f4:	409e      	lsls	r6, r3
1000a6f6:	43b4      	bics	r4, r6
1000a6f8:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a6fa:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a6fc:	000e      	movs	r6, r1
1000a6fe:	409e      	lsls	r6, r3
1000a700:	0033      	movs	r3, r6
1000a702:	4323      	orrs	r3, r4
1000a704:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a706:	2901      	cmp	r1, #1
1000a708:	d155      	bne.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a70a:	280b      	cmp	r0, #11
1000a70c:	d80f      	bhi.n	1000a72e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a70e:	0011      	movs	r1, r2
1000a710:	22d4      	movs	r2, #212	; 0xd4
1000a712:	0052      	lsls	r2, r2, #1
1000a714:	588c      	ldr	r4, [r1, r2]
1000a716:	2303      	movs	r3, #3
1000a718:	4018      	ands	r0, r3
1000a71a:	00c0      	lsls	r0, r0, #3
1000a71c:	333c      	adds	r3, #60	; 0x3c
1000a71e:	4083      	lsls	r3, r0
1000a720:	439c      	bics	r4, r3
1000a722:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a724:	588b      	ldr	r3, [r1, r2]
1000a726:	4085      	lsls	r5, r0
1000a728:	431d      	orrs	r5, r3
1000a72a:	508d      	str	r5, [r1, r2]
1000a72c:	e043      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a72e:	4922      	ldr	r1, [pc, #136]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a730:	22d6      	movs	r2, #214	; 0xd6
1000a732:	0052      	lsls	r2, r2, #1
1000a734:	588c      	ldr	r4, [r1, r2]
1000a736:	2303      	movs	r3, #3
1000a738:	4018      	ands	r0, r3
1000a73a:	00c0      	lsls	r0, r0, #3
1000a73c:	333c      	adds	r3, #60	; 0x3c
1000a73e:	4083      	lsls	r3, r0
1000a740:	439c      	bics	r4, r3
1000a742:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a744:	588b      	ldr	r3, [r1, r2]
1000a746:	4085      	lsls	r5, r0
1000a748:	431d      	orrs	r5, r3
1000a74a:	508d      	str	r5, [r1, r2]
1000a74c:	e033      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a74e:	2817      	cmp	r0, #23
1000a750:	d831      	bhi.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a752:	4a19      	ldr	r2, [pc, #100]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a754:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a756:	2307      	movs	r3, #7
1000a758:	4003      	ands	r3, r0
1000a75a:	009b      	lsls	r3, r3, #2
1000a75c:	2607      	movs	r6, #7
1000a75e:	409e      	lsls	r6, r3
1000a760:	43b4      	bics	r4, r6
1000a762:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a764:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a766:	000e      	movs	r6, r1
1000a768:	409e      	lsls	r6, r3
1000a76a:	0033      	movs	r3, r6
1000a76c:	4323      	orrs	r3, r4
1000a76e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a770:	2901      	cmp	r1, #1
1000a772:	d120      	bne.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a774:	2813      	cmp	r0, #19
1000a776:	d80f      	bhi.n	1000a798 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a778:	0011      	movs	r1, r2
1000a77a:	22d8      	movs	r2, #216	; 0xd8
1000a77c:	0052      	lsls	r2, r2, #1
1000a77e:	588c      	ldr	r4, [r1, r2]
1000a780:	2303      	movs	r3, #3
1000a782:	4018      	ands	r0, r3
1000a784:	00c0      	lsls	r0, r0, #3
1000a786:	333c      	adds	r3, #60	; 0x3c
1000a788:	4083      	lsls	r3, r0
1000a78a:	439c      	bics	r4, r3
1000a78c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a78e:	588b      	ldr	r3, [r1, r2]
1000a790:	4085      	lsls	r5, r0
1000a792:	431d      	orrs	r5, r3
1000a794:	508d      	str	r5, [r1, r2]
1000a796:	e00e      	b.n	1000a7b6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a798:	4a07      	ldr	r2, [pc, #28]	; (1000a7b8 <gpio_pinmux_cofiguration+0x148>)
1000a79a:	23da      	movs	r3, #218	; 0xda
1000a79c:	005b      	lsls	r3, r3, #1
1000a79e:	58d1      	ldr	r1, [r2, r3]
1000a7a0:	2403      	movs	r4, #3
1000a7a2:	4020      	ands	r0, r4
1000a7a4:	00c0      	lsls	r0, r0, #3
1000a7a6:	343c      	adds	r4, #60	; 0x3c
1000a7a8:	4084      	lsls	r4, r0
1000a7aa:	43a1      	bics	r1, r4
1000a7ac:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a7ae:	58d1      	ldr	r1, [r2, r3]
1000a7b0:	4085      	lsls	r5, r0
1000a7b2:	430d      	orrs	r5, r1
1000a7b4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a7b6:	bd70      	pop	{r4, r5, r6, pc}
1000a7b8:	4000b000 	.word	0x4000b000

1000a7bc <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a7bc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a7be:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a7c0:	280f      	cmp	r0, #15
1000a7c2:	d904      	bls.n	1000a7ce <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a7c4:	241f      	movs	r4, #31
1000a7c6:	4284      	cmp	r4, r0
1000a7c8:	415b      	adcs	r3, r3
1000a7ca:	3c1d      	subs	r4, #29
1000a7cc:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a7ce:	2a01      	cmp	r2, #1
1000a7d0:	d016      	beq.n	1000a800 <gpio_register_callback+0x44>
1000a7d2:	2a00      	cmp	r2, #0
1000a7d4:	d004      	beq.n	1000a7e0 <gpio_register_callback+0x24>
1000a7d6:	2a02      	cmp	r2, #2
1000a7d8:	d022      	beq.n	1000a820 <gpio_register_callback+0x64>
1000a7da:	2a03      	cmp	r2, #3
1000a7dc:	d030      	beq.n	1000a840 <gpio_register_callback+0x84>
1000a7de:	e03e      	b.n	1000a85e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a7e0:	4e29      	ldr	r6, [pc, #164]	; (1000a888 <gpio_register_callback+0xcc>)
1000a7e2:	00dc      	lsls	r4, r3, #3
1000a7e4:	18e2      	adds	r2, r4, r3
1000a7e6:	00d2      	lsls	r2, r2, #3
1000a7e8:	5997      	ldr	r7, [r2, r6]
1000a7ea:	250f      	movs	r5, #15
1000a7ec:	4005      	ands	r5, r0
1000a7ee:	2201      	movs	r2, #1
1000a7f0:	40aa      	lsls	r2, r5
1000a7f2:	b292      	uxth	r2, r2
1000a7f4:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a7f6:	18e4      	adds	r4, r4, r3
1000a7f8:	00e4      	lsls	r4, r4, #3
1000a7fa:	59a4      	ldr	r4, [r4, r6]
1000a7fc:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a7fe:	e02e      	b.n	1000a85e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a800:	4e21      	ldr	r6, [pc, #132]	; (1000a888 <gpio_register_callback+0xcc>)
1000a802:	00dc      	lsls	r4, r3, #3
1000a804:	18e2      	adds	r2, r4, r3
1000a806:	00d2      	lsls	r2, r2, #3
1000a808:	5997      	ldr	r7, [r2, r6]
1000a80a:	250f      	movs	r5, #15
1000a80c:	4005      	ands	r5, r0
1000a80e:	2201      	movs	r2, #1
1000a810:	40aa      	lsls	r2, r5
1000a812:	b292      	uxth	r2, r2
1000a814:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a816:	18e4      	adds	r4, r4, r3
1000a818:	00e4      	lsls	r4, r4, #3
1000a81a:	59a4      	ldr	r4, [r4, r6]
1000a81c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a81e:	e01e      	b.n	1000a85e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a820:	4e19      	ldr	r6, [pc, #100]	; (1000a888 <gpio_register_callback+0xcc>)
1000a822:	00dc      	lsls	r4, r3, #3
1000a824:	18e2      	adds	r2, r4, r3
1000a826:	00d2      	lsls	r2, r2, #3
1000a828:	5997      	ldr	r7, [r2, r6]
1000a82a:	250f      	movs	r5, #15
1000a82c:	4005      	ands	r5, r0
1000a82e:	2201      	movs	r2, #1
1000a830:	40aa      	lsls	r2, r5
1000a832:	b292      	uxth	r2, r2
1000a834:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a836:	18e4      	adds	r4, r4, r3
1000a838:	00e4      	lsls	r4, r4, #3
1000a83a:	59a4      	ldr	r4, [r4, r6]
1000a83c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a83e:	e00e      	b.n	1000a85e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a840:	4e11      	ldr	r6, [pc, #68]	; (1000a888 <gpio_register_callback+0xcc>)
1000a842:	00dc      	lsls	r4, r3, #3
1000a844:	18e2      	adds	r2, r4, r3
1000a846:	00d2      	lsls	r2, r2, #3
1000a848:	5997      	ldr	r7, [r2, r6]
1000a84a:	250f      	movs	r5, #15
1000a84c:	4005      	ands	r5, r0
1000a84e:	2201      	movs	r2, #1
1000a850:	40aa      	lsls	r2, r5
1000a852:	b292      	uxth	r2, r2
1000a854:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a856:	18e4      	adds	r4, r4, r3
1000a858:	00e4      	lsls	r4, r4, #3
1000a85a:	59a4      	ldr	r4, [r4, r6]
1000a85c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a85e:	220f      	movs	r2, #15
1000a860:	4010      	ands	r0, r2
1000a862:	4c09      	ldr	r4, [pc, #36]	; (1000a888 <gpio_register_callback+0xcc>)
1000a864:	00dd      	lsls	r5, r3, #3
1000a866:	18ea      	adds	r2, r5, r3
1000a868:	0052      	lsls	r2, r2, #1
1000a86a:	1812      	adds	r2, r2, r0
1000a86c:	0092      	lsls	r2, r2, #2
1000a86e:	18a2      	adds	r2, r4, r2
1000a870:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000a872:	18ea      	adds	r2, r5, r3
1000a874:	00d2      	lsls	r2, r2, #3
1000a876:	18a2      	adds	r2, r4, r2
1000a878:	3244      	adds	r2, #68	; 0x44
1000a87a:	2101      	movs	r1, #1
1000a87c:	4081      	lsls	r1, r0
1000a87e:	8813      	ldrh	r3, [r2, #0]
1000a880:	430b      	orrs	r3, r1
1000a882:	8013      	strh	r3, [r2, #0]
}
1000a884:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a886:	46c0      	nop			; (mov r8, r8)
1000a888:	10019120 	.word	0x10019120

1000a88c <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000a88c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a88e:	280f      	cmp	r0, #15
1000a890:	d805      	bhi.n	1000a89e <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a892:	2280      	movs	r2, #128	; 0x80
1000a894:	0412      	lsls	r2, r2, #16
1000a896:	4b12      	ldr	r3, [pc, #72]	; (1000a8e0 <gpio_enable_callback+0x54>)
1000a898:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000a89a:	2200      	movs	r2, #0
1000a89c:	e00c      	b.n	1000a8b8 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000a89e:	281f      	cmp	r0, #31
1000a8a0:	d805      	bhi.n	1000a8ae <gpio_enable_callback+0x22>
1000a8a2:	2280      	movs	r2, #128	; 0x80
1000a8a4:	0452      	lsls	r2, r2, #17
1000a8a6:	4b0e      	ldr	r3, [pc, #56]	; (1000a8e0 <gpio_enable_callback+0x54>)
1000a8a8:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000a8aa:	2201      	movs	r2, #1
1000a8ac:	e004      	b.n	1000a8b8 <gpio_enable_callback+0x2c>
1000a8ae:	2280      	movs	r2, #128	; 0x80
1000a8b0:	0492      	lsls	r2, r2, #18
1000a8b2:	4b0b      	ldr	r3, [pc, #44]	; (1000a8e0 <gpio_enable_callback+0x54>)
1000a8b4:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000a8b6:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000a8b8:	230f      	movs	r3, #15
1000a8ba:	4018      	ands	r0, r3
1000a8bc:	2101      	movs	r1, #1
1000a8be:	4081      	lsls	r1, r0
1000a8c0:	4c08      	ldr	r4, [pc, #32]	; (1000a8e4 <gpio_enable_callback+0x58>)
1000a8c2:	00d5      	lsls	r5, r2, #3
1000a8c4:	18ab      	adds	r3, r5, r2
1000a8c6:	00db      	lsls	r3, r3, #3
1000a8c8:	18e3      	adds	r3, r4, r3
1000a8ca:	3346      	adds	r3, #70	; 0x46
1000a8cc:	8818      	ldrh	r0, [r3, #0]
1000a8ce:	4308      	orrs	r0, r1
1000a8d0:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000a8d2:	18aa      	adds	r2, r5, r2
1000a8d4:	00d2      	lsls	r2, r2, #3
1000a8d6:	5913      	ldr	r3, [r2, r4]
1000a8d8:	b289      	uxth	r1, r1
1000a8da:	8419      	strh	r1, [r3, #32]
}
1000a8dc:	bd30      	pop	{r4, r5, pc}
1000a8de:	46c0      	nop			; (mov r8, r8)
1000a8e0:	e000e100 	.word	0xe000e100
1000a8e4:	10019120 	.word	0x10019120

1000a8e8 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000a8e8:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a8ea:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a8ec:	280f      	cmp	r0, #15
1000a8ee:	d904      	bls.n	1000a8fa <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a8f0:	221f      	movs	r2, #31
1000a8f2:	4282      	cmp	r2, r0
1000a8f4:	415b      	adcs	r3, r3
1000a8f6:	3a1d      	subs	r2, #29
1000a8f8:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000a8fa:	220f      	movs	r2, #15
1000a8fc:	4010      	ands	r0, r2
1000a8fe:	2101      	movs	r1, #1
1000a900:	4081      	lsls	r1, r0
1000a902:	4c07      	ldr	r4, [pc, #28]	; (1000a920 <gpio_disable_callback+0x38>)
1000a904:	00dd      	lsls	r5, r3, #3
1000a906:	18ea      	adds	r2, r5, r3
1000a908:	00d2      	lsls	r2, r2, #3
1000a90a:	18a2      	adds	r2, r4, r2
1000a90c:	3246      	adds	r2, #70	; 0x46
1000a90e:	8810      	ldrh	r0, [r2, #0]
1000a910:	4388      	bics	r0, r1
1000a912:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000a914:	18eb      	adds	r3, r5, r3
1000a916:	00db      	lsls	r3, r3, #3
1000a918:	591b      	ldr	r3, [r3, r4]
1000a91a:	b289      	uxth	r1, r1
1000a91c:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000a91e:	bd30      	pop	{r4, r5, pc}
1000a920:	10019120 	.word	0x10019120

1000a924 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000a924:	b510      	push	{r4, lr}
1000a926:	4a11      	ldr	r2, [pc, #68]	; (1000a96c <gpio_init+0x48>)
1000a928:	0010      	movs	r0, r2
1000a92a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000a92c:	2100      	movs	r1, #0
1000a92e:	e007      	b.n	1000a940 <gpio_init+0x1c>
1000a930:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000a932:	4293      	cmp	r3, r2
1000a934:	d1fc      	bne.n	1000a930 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000a936:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000a938:	8011      	strh	r1, [r2, #0]
1000a93a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000a93c:	4282      	cmp	r2, r0
1000a93e:	d002      	beq.n	1000a946 <gpio_init+0x22>
1000a940:	0013      	movs	r3, r2
1000a942:	3b40      	subs	r3, #64	; 0x40
1000a944:	e7f4      	b.n	1000a930 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000a946:	4b0a      	ldr	r3, [pc, #40]	; (1000a970 <gpio_init+0x4c>)
1000a948:	4a0a      	ldr	r2, [pc, #40]	; (1000a974 <gpio_init+0x50>)
1000a94a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000a94c:	4a0a      	ldr	r2, [pc, #40]	; (1000a978 <gpio_init+0x54>)
1000a94e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000a950:	490a      	ldr	r1, [pc, #40]	; (1000a97c <gpio_init+0x58>)
1000a952:	2290      	movs	r2, #144	; 0x90
1000a954:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000a956:	490a      	ldr	r1, [pc, #40]	; (1000a980 <gpio_init+0x5c>)
1000a958:	2027      	movs	r0, #39	; 0x27
1000a95a:	4c0a      	ldr	r4, [pc, #40]	; (1000a984 <gpio_init+0x60>)
1000a95c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000a95e:	490a      	ldr	r1, [pc, #40]	; (1000a988 <gpio_init+0x64>)
1000a960:	2028      	movs	r0, #40	; 0x28
1000a962:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000a964:	4909      	ldr	r1, [pc, #36]	; (1000a98c <gpio_init+0x68>)
1000a966:	2029      	movs	r0, #41	; 0x29
1000a968:	47a0      	blx	r4
}
1000a96a:	bd10      	pop	{r4, pc}
1000a96c:	10019164 	.word	0x10019164
1000a970:	10019120 	.word	0x10019120
1000a974:	40010000 	.word	0x40010000
1000a978:	40011000 	.word	0x40011000
1000a97c:	40013000 	.word	0x40013000
1000a980:	1000a2cd 	.word	0x1000a2cd
1000a984:	1000b551 	.word	0x1000b551
1000a988:	1000a331 	.word	0x1000a331
1000a98c:	1000a3a1 	.word	0x1000a3a1

1000a990 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000a990:	2801      	cmp	r0, #1
1000a992:	d00d      	beq.n	1000a9b0 <system_clock_config+0x20>
1000a994:	2800      	cmp	r0, #0
1000a996:	d002      	beq.n	1000a99e <system_clock_config+0xe>
1000a998:	2802      	cmp	r0, #2
1000a99a:	d01c      	beq.n	1000a9d6 <system_clock_config+0x46>
1000a99c:	e02e      	b.n	1000a9fc <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a99e:	4a18      	ldr	r2, [pc, #96]	; (1000aa00 <system_clock_config+0x70>)
1000a9a0:	6990      	ldr	r0, [r2, #24]
1000a9a2:	230c      	movs	r3, #12
1000a9a4:	4303      	orrs	r3, r0
1000a9a6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000a9a8:	4a16      	ldr	r2, [pc, #88]	; (1000aa04 <system_clock_config+0x74>)
1000a9aa:	4b17      	ldr	r3, [pc, #92]	; (1000aa08 <system_clock_config+0x78>)
1000a9ac:	601a      	str	r2, [r3, #0]
			break;
1000a9ae:	e01a      	b.n	1000a9e6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a9b0:	4b13      	ldr	r3, [pc, #76]	; (1000aa00 <system_clock_config+0x70>)
1000a9b2:	6998      	ldr	r0, [r3, #24]
1000a9b4:	2208      	movs	r2, #8
1000a9b6:	4302      	orrs	r2, r0
1000a9b8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a9ba:	699a      	ldr	r2, [r3, #24]
1000a9bc:	2004      	movs	r0, #4
1000a9be:	4382      	bics	r2, r0
1000a9c0:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000a9c2:	4a12      	ldr	r2, [pc, #72]	; (1000aa0c <system_clock_config+0x7c>)
1000a9c4:	6853      	ldr	r3, [r2, #4]
1000a9c6:	2080      	movs	r0, #128	; 0x80
1000a9c8:	0300      	lsls	r0, r0, #12
1000a9ca:	4303      	orrs	r3, r0
1000a9cc:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000a9ce:	4a10      	ldr	r2, [pc, #64]	; (1000aa10 <system_clock_config+0x80>)
1000a9d0:	4b0d      	ldr	r3, [pc, #52]	; (1000aa08 <system_clock_config+0x78>)
1000a9d2:	601a      	str	r2, [r3, #0]
			break;
1000a9d4:	e007      	b.n	1000a9e6 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a9d6:	4a0a      	ldr	r2, [pc, #40]	; (1000aa00 <system_clock_config+0x70>)
1000a9d8:	6993      	ldr	r3, [r2, #24]
1000a9da:	200c      	movs	r0, #12
1000a9dc:	4383      	bics	r3, r0
1000a9de:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000a9e0:	4a08      	ldr	r2, [pc, #32]	; (1000aa04 <system_clock_config+0x74>)
1000a9e2:	4b09      	ldr	r3, [pc, #36]	; (1000aa08 <system_clock_config+0x78>)
1000a9e4:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a9e6:	4b06      	ldr	r3, [pc, #24]	; (1000aa00 <system_clock_config+0x70>)
1000a9e8:	699a      	ldr	r2, [r3, #24]
1000a9ea:	2003      	movs	r0, #3
1000a9ec:	4382      	bics	r2, r0
1000a9ee:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a9f0:	699a      	ldr	r2, [r3, #24]
1000a9f2:	4001      	ands	r1, r0
1000a9f4:	4311      	orrs	r1, r2
1000a9f6:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000a9f8:	2000      	movs	r0, #0
1000a9fa:	e000      	b.n	1000a9fe <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000a9fc:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000a9fe:	4770      	bx	lr
1000aa00:	4000b000 	.word	0x4000b000
1000aa04:	018cba80 	.word	0x018cba80
1000aa08:	100191f8 	.word	0x100191f8
1000aa0c:	4000f000 	.word	0x4000f000
1000aa10:	001e8480 	.word	0x001e8480

1000aa14 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000aa14:	4b01      	ldr	r3, [pc, #4]	; (1000aa1c <system_clock_get_value+0x8>)
1000aa16:	6818      	ldr	r0, [r3, #0]
}
1000aa18:	4770      	bx	lr
1000aa1a:	46c0      	nop			; (mov r8, r8)
1000aa1c:	100191f8 	.word	0x100191f8

1000aa20 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000aa20:	b500      	push	{lr}
	switch (peripheral) {
1000aa22:	2835      	cmp	r0, #53	; 0x35
1000aa24:	d900      	bls.n	1000aa28 <system_clock_peripheral_enable+0x8>
1000aa26:	e1a2      	b.n	1000ad6e <system_clock_peripheral_enable+0x34e>
1000aa28:	0080      	lsls	r0, r0, #2
1000aa2a:	4bd2      	ldr	r3, [pc, #840]	; (1000ad74 <system_clock_peripheral_enable+0x354>)
1000aa2c:	581b      	ldr	r3, [r3, r0]
1000aa2e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa30:	4ad1      	ldr	r2, [pc, #836]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa32:	68d1      	ldr	r1, [r2, #12]
1000aa34:	2302      	movs	r3, #2
1000aa36:	430b      	orrs	r3, r1
1000aa38:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa3a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000aa3c:	e198      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa3e:	4ace      	ldr	r2, [pc, #824]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa40:	68d1      	ldr	r1, [r2, #12]
1000aa42:	2304      	movs	r3, #4
1000aa44:	430b      	orrs	r3, r1
1000aa46:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000aa4a:	e191      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa4c:	4aca      	ldr	r2, [pc, #808]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa4e:	68d1      	ldr	r1, [r2, #12]
1000aa50:	2308      	movs	r3, #8
1000aa52:	430b      	orrs	r3, r1
1000aa54:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000aa58:	e18a      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa5a:	4ac7      	ldr	r2, [pc, #796]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa5c:	68d1      	ldr	r1, [r2, #12]
1000aa5e:	2310      	movs	r3, #16
1000aa60:	430b      	orrs	r3, r1
1000aa62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000aa66:	e183      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa68:	4ac3      	ldr	r2, [pc, #780]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa6a:	68d1      	ldr	r1, [r2, #12]
1000aa6c:	2320      	movs	r3, #32
1000aa6e:	430b      	orrs	r3, r1
1000aa70:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000aa74:	e17c      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa76:	4ac0      	ldr	r2, [pc, #768]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa78:	68d1      	ldr	r1, [r2, #12]
1000aa7a:	2380      	movs	r3, #128	; 0x80
1000aa7c:	430b      	orrs	r3, r1
1000aa7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000aa82:	e175      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa84:	4abc      	ldr	r2, [pc, #752]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa86:	68d3      	ldr	r3, [r2, #12]
1000aa88:	2180      	movs	r1, #128	; 0x80
1000aa8a:	0049      	lsls	r1, r1, #1
1000aa8c:	430b      	orrs	r3, r1
1000aa8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000aa92:	e16d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aa94:	4ab8      	ldr	r2, [pc, #736]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aa96:	68d3      	ldr	r3, [r2, #12]
1000aa98:	2180      	movs	r1, #128	; 0x80
1000aa9a:	0109      	lsls	r1, r1, #4
1000aa9c:	430b      	orrs	r3, r1
1000aa9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000aaa2:	e165      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aaa4:	4ab4      	ldr	r2, [pc, #720]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aaa6:	68d3      	ldr	r3, [r2, #12]
1000aaa8:	2180      	movs	r1, #128	; 0x80
1000aaaa:	0149      	lsls	r1, r1, #5
1000aaac:	430b      	orrs	r3, r1
1000aaae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aab0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000aab2:	e15d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aab4:	4ab0      	ldr	r2, [pc, #704]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aab6:	68d3      	ldr	r3, [r2, #12]
1000aab8:	2180      	movs	r1, #128	; 0x80
1000aaba:	0189      	lsls	r1, r1, #6
1000aabc:	430b      	orrs	r3, r1
1000aabe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000aac2:	e155      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aac4:	4aac      	ldr	r2, [pc, #688]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aac6:	68d3      	ldr	r3, [r2, #12]
1000aac8:	2180      	movs	r1, #128	; 0x80
1000aaca:	01c9      	lsls	r1, r1, #7
1000aacc:	430b      	orrs	r3, r1
1000aace:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aad0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000aad2:	e14d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aad4:	4aa8      	ldr	r2, [pc, #672]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aad6:	68d3      	ldr	r3, [r2, #12]
1000aad8:	2180      	movs	r1, #128	; 0x80
1000aada:	0209      	lsls	r1, r1, #8
1000aadc:	430b      	orrs	r3, r1
1000aade:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aae0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000aae2:	e145      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aae4:	4aa4      	ldr	r2, [pc, #656]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aae6:	68d3      	ldr	r3, [r2, #12]
1000aae8:	2180      	movs	r1, #128	; 0x80
1000aaea:	0249      	lsls	r1, r1, #9
1000aaec:	430b      	orrs	r3, r1
1000aaee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000aaf2:	e13d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aaf4:	4aa0      	ldr	r2, [pc, #640]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aaf6:	68d3      	ldr	r3, [r2, #12]
1000aaf8:	2180      	movs	r1, #128	; 0x80
1000aafa:	0289      	lsls	r1, r1, #10
1000aafc:	430b      	orrs	r3, r1
1000aafe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000ab02:	e135      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab04:	4a9c      	ldr	r2, [pc, #624]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab06:	68d3      	ldr	r3, [r2, #12]
1000ab08:	2180      	movs	r1, #128	; 0x80
1000ab0a:	02c9      	lsls	r1, r1, #11
1000ab0c:	430b      	orrs	r3, r1
1000ab0e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000ab12:	e12d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab14:	4a98      	ldr	r2, [pc, #608]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab16:	68d3      	ldr	r3, [r2, #12]
1000ab18:	2180      	movs	r1, #128	; 0x80
1000ab1a:	0309      	lsls	r1, r1, #12
1000ab1c:	430b      	orrs	r3, r1
1000ab1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000ab22:	e125      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab24:	4a94      	ldr	r2, [pc, #592]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab26:	68d3      	ldr	r3, [r2, #12]
1000ab28:	2180      	movs	r1, #128	; 0x80
1000ab2a:	0349      	lsls	r1, r1, #13
1000ab2c:	430b      	orrs	r3, r1
1000ab2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000ab32:	e11d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab34:	4a90      	ldr	r2, [pc, #576]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab36:	68d3      	ldr	r3, [r2, #12]
1000ab38:	2180      	movs	r1, #128	; 0x80
1000ab3a:	0389      	lsls	r1, r1, #14
1000ab3c:	430b      	orrs	r3, r1
1000ab3e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000ab42:	e115      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab44:	4a8c      	ldr	r2, [pc, #560]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab46:	68d3      	ldr	r3, [r2, #12]
1000ab48:	2180      	movs	r1, #128	; 0x80
1000ab4a:	03c9      	lsls	r1, r1, #15
1000ab4c:	430b      	orrs	r3, r1
1000ab4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ab52:	e10d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab54:	4a88      	ldr	r2, [pc, #544]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab56:	68d3      	ldr	r3, [r2, #12]
1000ab58:	2180      	movs	r1, #128	; 0x80
1000ab5a:	0409      	lsls	r1, r1, #16
1000ab5c:	430b      	orrs	r3, r1
1000ab5e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000ab62:	e105      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab64:	4a84      	ldr	r2, [pc, #528]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab66:	68d3      	ldr	r3, [r2, #12]
1000ab68:	2180      	movs	r1, #128	; 0x80
1000ab6a:	0449      	lsls	r1, r1, #17
1000ab6c:	430b      	orrs	r3, r1
1000ab6e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ab72:	e0fd      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab74:	4a80      	ldr	r2, [pc, #512]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab76:	68d3      	ldr	r3, [r2, #12]
1000ab78:	2180      	movs	r1, #128	; 0x80
1000ab7a:	0489      	lsls	r1, r1, #18
1000ab7c:	430b      	orrs	r3, r1
1000ab7e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ab82:	e0f5      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab84:	4a7c      	ldr	r2, [pc, #496]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab86:	68d3      	ldr	r3, [r2, #12]
1000ab88:	2180      	movs	r1, #128	; 0x80
1000ab8a:	04c9      	lsls	r1, r1, #19
1000ab8c:	430b      	orrs	r3, r1
1000ab8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ab92:	e0ed      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ab94:	4a78      	ldr	r2, [pc, #480]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ab96:	68d3      	ldr	r3, [r2, #12]
1000ab98:	2180      	movs	r1, #128	; 0x80
1000ab9a:	0509      	lsls	r1, r1, #20
1000ab9c:	430b      	orrs	r3, r1
1000ab9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000aba2:	e0e5      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000aba4:	4a74      	ldr	r2, [pc, #464]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aba6:	68d3      	ldr	r3, [r2, #12]
1000aba8:	2180      	movs	r1, #128	; 0x80
1000abaa:	0549      	lsls	r1, r1, #21
1000abac:	430b      	orrs	r3, r1
1000abae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000abb2:	e0dd      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abb4:	4a70      	ldr	r2, [pc, #448]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000abb6:	68d3      	ldr	r3, [r2, #12]
1000abb8:	2180      	movs	r1, #128	; 0x80
1000abba:	0589      	lsls	r1, r1, #22
1000abbc:	430b      	orrs	r3, r1
1000abbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000abc2:	e0d5      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000abc4:	4a6c      	ldr	r2, [pc, #432]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000abc6:	68d3      	ldr	r3, [r2, #12]
1000abc8:	2180      	movs	r1, #128	; 0x80
1000abca:	05c9      	lsls	r1, r1, #23
1000abcc:	430b      	orrs	r3, r1
1000abce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000abd2:	e0cd      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abd4:	4a68      	ldr	r2, [pc, #416]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000abd6:	6911      	ldr	r1, [r2, #16]
1000abd8:	2301      	movs	r3, #1
1000abda:	430b      	orrs	r3, r1
1000abdc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abde:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000abe0:	e0c6      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abe2:	4a65      	ldr	r2, [pc, #404]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000abe4:	6911      	ldr	r1, [r2, #16]
1000abe6:	2302      	movs	r3, #2
1000abe8:	430b      	orrs	r3, r1
1000abea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000abee:	e0bf      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abf0:	4a61      	ldr	r2, [pc, #388]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000abf2:	6911      	ldr	r1, [r2, #16]
1000abf4:	2304      	movs	r3, #4
1000abf6:	430b      	orrs	r3, r1
1000abf8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abfa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000abfc:	e0b8      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000abfe:	4a5e      	ldr	r2, [pc, #376]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac00:	6911      	ldr	r1, [r2, #16]
1000ac02:	2308      	movs	r3, #8
1000ac04:	430b      	orrs	r3, r1
1000ac06:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac08:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000ac0a:	e0b1      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac0c:	4a5a      	ldr	r2, [pc, #360]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac0e:	6911      	ldr	r1, [r2, #16]
1000ac10:	2310      	movs	r3, #16
1000ac12:	430b      	orrs	r3, r1
1000ac14:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac16:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000ac18:	e0aa      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac1a:	4a57      	ldr	r2, [pc, #348]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac1c:	6911      	ldr	r1, [r2, #16]
1000ac1e:	2320      	movs	r3, #32
1000ac20:	430b      	orrs	r3, r1
1000ac22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000ac26:	e0a3      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac28:	4a53      	ldr	r2, [pc, #332]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac2a:	6911      	ldr	r1, [r2, #16]
1000ac2c:	2340      	movs	r3, #64	; 0x40
1000ac2e:	430b      	orrs	r3, r1
1000ac30:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac32:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000ac34:	e09c      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac36:	4a50      	ldr	r2, [pc, #320]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac38:	6911      	ldr	r1, [r2, #16]
1000ac3a:	2380      	movs	r3, #128	; 0x80
1000ac3c:	430b      	orrs	r3, r1
1000ac3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000ac42:	e095      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac44:	4a4c      	ldr	r2, [pc, #304]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac46:	6913      	ldr	r3, [r2, #16]
1000ac48:	2180      	movs	r1, #128	; 0x80
1000ac4a:	0049      	lsls	r1, r1, #1
1000ac4c:	430b      	orrs	r3, r1
1000ac4e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000ac52:	e08d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac54:	4a48      	ldr	r2, [pc, #288]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac56:	6913      	ldr	r3, [r2, #16]
1000ac58:	2180      	movs	r1, #128	; 0x80
1000ac5a:	0089      	lsls	r1, r1, #2
1000ac5c:	430b      	orrs	r3, r1
1000ac5e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac60:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ac62:	e085      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac64:	4a44      	ldr	r2, [pc, #272]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac66:	6913      	ldr	r3, [r2, #16]
1000ac68:	2180      	movs	r1, #128	; 0x80
1000ac6a:	00c9      	lsls	r1, r1, #3
1000ac6c:	430b      	orrs	r3, r1
1000ac6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ac72:	e07d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac74:	4a40      	ldr	r2, [pc, #256]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac76:	6913      	ldr	r3, [r2, #16]
1000ac78:	2180      	movs	r1, #128	; 0x80
1000ac7a:	0109      	lsls	r1, r1, #4
1000ac7c:	430b      	orrs	r3, r1
1000ac7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ac82:	e075      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac84:	4a3c      	ldr	r2, [pc, #240]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac86:	6913      	ldr	r3, [r2, #16]
1000ac88:	2180      	movs	r1, #128	; 0x80
1000ac8a:	0149      	lsls	r1, r1, #5
1000ac8c:	430b      	orrs	r3, r1
1000ac8e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ac92:	e06d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ac94:	4a38      	ldr	r2, [pc, #224]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ac96:	6913      	ldr	r3, [r2, #16]
1000ac98:	2180      	movs	r1, #128	; 0x80
1000ac9a:	0189      	lsls	r1, r1, #6
1000ac9c:	430b      	orrs	r3, r1
1000ac9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aca0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000aca2:	e065      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000aca4:	4a34      	ldr	r2, [pc, #208]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000aca6:	6913      	ldr	r3, [r2, #16]
1000aca8:	2180      	movs	r1, #128	; 0x80
1000acaa:	01c9      	lsls	r1, r1, #7
1000acac:	430b      	orrs	r3, r1
1000acae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000acb2:	e05d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000acb4:	4a30      	ldr	r2, [pc, #192]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000acb6:	6913      	ldr	r3, [r2, #16]
1000acb8:	2180      	movs	r1, #128	; 0x80
1000acba:	0209      	lsls	r1, r1, #8
1000acbc:	430b      	orrs	r3, r1
1000acbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000acc2:	e055      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000acc4:	4a2c      	ldr	r2, [pc, #176]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000acc6:	6913      	ldr	r3, [r2, #16]
1000acc8:	2180      	movs	r1, #128	; 0x80
1000acca:	0249      	lsls	r1, r1, #9
1000accc:	430b      	orrs	r3, r1
1000acce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000acd2:	e04d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000acd4:	4a28      	ldr	r2, [pc, #160]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000acd6:	6913      	ldr	r3, [r2, #16]
1000acd8:	2180      	movs	r1, #128	; 0x80
1000acda:	0289      	lsls	r1, r1, #10
1000acdc:	430b      	orrs	r3, r1
1000acde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ace0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ace2:	e045      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ace4:	4a24      	ldr	r2, [pc, #144]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ace6:	6913      	ldr	r3, [r2, #16]
1000ace8:	2180      	movs	r1, #128	; 0x80
1000acea:	02c9      	lsls	r1, r1, #11
1000acec:	430b      	orrs	r3, r1
1000acee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000acf2:	e03d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000acf4:	4a20      	ldr	r2, [pc, #128]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000acf6:	6913      	ldr	r3, [r2, #16]
1000acf8:	2180      	movs	r1, #128	; 0x80
1000acfa:	0309      	lsls	r1, r1, #12
1000acfc:	430b      	orrs	r3, r1
1000acfe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ad02:	e035      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad04:	4a1c      	ldr	r2, [pc, #112]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad06:	6913      	ldr	r3, [r2, #16]
1000ad08:	2180      	movs	r1, #128	; 0x80
1000ad0a:	0349      	lsls	r1, r1, #13
1000ad0c:	430b      	orrs	r3, r1
1000ad0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ad12:	e02d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad14:	4a18      	ldr	r2, [pc, #96]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad16:	6913      	ldr	r3, [r2, #16]
1000ad18:	2180      	movs	r1, #128	; 0x80
1000ad1a:	0389      	lsls	r1, r1, #14
1000ad1c:	430b      	orrs	r3, r1
1000ad1e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ad22:	e025      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad24:	4a14      	ldr	r2, [pc, #80]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad26:	6913      	ldr	r3, [r2, #16]
1000ad28:	2180      	movs	r1, #128	; 0x80
1000ad2a:	03c9      	lsls	r1, r1, #15
1000ad2c:	430b      	orrs	r3, r1
1000ad2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ad32:	e01d      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000ad34:	4a10      	ldr	r2, [pc, #64]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad36:	6913      	ldr	r3, [r2, #16]
1000ad38:	2180      	movs	r1, #128	; 0x80
1000ad3a:	0409      	lsls	r1, r1, #16
1000ad3c:	430b      	orrs	r3, r1
1000ad3e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad40:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ad42:	e015      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ad44:	4a0c      	ldr	r2, [pc, #48]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad46:	7d11      	ldrb	r1, [r2, #20]
1000ad48:	2301      	movs	r3, #1
1000ad4a:	430b      	orrs	r3, r1
1000ad4c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad4e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ad50:	e00e      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ad52:	4a09      	ldr	r2, [pc, #36]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad54:	7d11      	ldrb	r1, [r2, #20]
1000ad56:	2302      	movs	r3, #2
1000ad58:	430b      	orrs	r3, r1
1000ad5a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad5c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ad5e:	e007      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000ad60:	4a05      	ldr	r2, [pc, #20]	; (1000ad78 <system_clock_peripheral_enable+0x358>)
1000ad62:	7d11      	ldrb	r1, [r2, #20]
1000ad64:	2304      	movs	r3, #4
1000ad66:	430b      	orrs	r3, r1
1000ad68:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad6a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ad6c:	e000      	b.n	1000ad70 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000ad6e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000ad70:	bd00      	pop	{pc}
1000ad72:	46c0      	nop			; (mov r8, r8)
1000ad74:	1001638c 	.word	0x1001638c
1000ad78:	4000b000 	.word	0x4000b000

1000ad7c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000ad7c:	b500      	push	{lr}
	switch (peripheral) {
1000ad7e:	2835      	cmp	r0, #53	; 0x35
1000ad80:	d900      	bls.n	1000ad84 <system_clock_peripheral_disable+0x8>
1000ad82:	e17d      	b.n	1000b080 <system_clock_peripheral_disable+0x304>
1000ad84:	0080      	lsls	r0, r0, #2
1000ad86:	4bbf      	ldr	r3, [pc, #764]	; (1000b084 <system_clock_peripheral_disable+0x308>)
1000ad88:	581b      	ldr	r3, [r3, r0]
1000ad8a:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad8c:	4abe      	ldr	r2, [pc, #760]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ad8e:	68d3      	ldr	r3, [r2, #12]
1000ad90:	2102      	movs	r1, #2
1000ad92:	438b      	bics	r3, r1
1000ad94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad96:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ad98:	e173      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ad9a:	4abb      	ldr	r2, [pc, #748]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ad9c:	68d3      	ldr	r3, [r2, #12]
1000ad9e:	2104      	movs	r1, #4
1000ada0:	438b      	bics	r3, r1
1000ada2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ada6:	e16c      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ada8:	4ab7      	ldr	r2, [pc, #732]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000adaa:	68d3      	ldr	r3, [r2, #12]
1000adac:	2108      	movs	r1, #8
1000adae:	438b      	bics	r3, r1
1000adb0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000adb4:	e165      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adb6:	4ab4      	ldr	r2, [pc, #720]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000adb8:	68d3      	ldr	r3, [r2, #12]
1000adba:	2110      	movs	r1, #16
1000adbc:	438b      	bics	r3, r1
1000adbe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000adc2:	e15e      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adc4:	4ab0      	ldr	r2, [pc, #704]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000adc6:	68d3      	ldr	r3, [r2, #12]
1000adc8:	2120      	movs	r1, #32
1000adca:	438b      	bics	r3, r1
1000adcc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000add0:	e157      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000add2:	4aad      	ldr	r2, [pc, #692]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000add4:	68d3      	ldr	r3, [r2, #12]
1000add6:	2180      	movs	r1, #128	; 0x80
1000add8:	438b      	bics	r3, r1
1000adda:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000addc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000adde:	e150      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ade0:	4aa9      	ldr	r2, [pc, #676]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ade2:	68d1      	ldr	r1, [r2, #12]
1000ade4:	4ba9      	ldr	r3, [pc, #676]	; (1000b08c <system_clock_peripheral_disable+0x310>)
1000ade6:	400b      	ands	r3, r1
1000ade8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000adec:	e149      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adee:	4aa6      	ldr	r2, [pc, #664]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000adf0:	68d1      	ldr	r1, [r2, #12]
1000adf2:	4ba7      	ldr	r3, [pc, #668]	; (1000b090 <system_clock_peripheral_disable+0x314>)
1000adf4:	400b      	ands	r3, r1
1000adf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000adfa:	e142      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000adfc:	4aa2      	ldr	r2, [pc, #648]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000adfe:	68d1      	ldr	r1, [r2, #12]
1000ae00:	4ba4      	ldr	r3, [pc, #656]	; (1000b094 <system_clock_peripheral_disable+0x318>)
1000ae02:	400b      	ands	r3, r1
1000ae04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ae08:	e13b      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae0a:	4a9f      	ldr	r2, [pc, #636]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae0c:	68d1      	ldr	r1, [r2, #12]
1000ae0e:	4ba2      	ldr	r3, [pc, #648]	; (1000b098 <system_clock_peripheral_disable+0x31c>)
1000ae10:	400b      	ands	r3, r1
1000ae12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ae16:	e134      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae18:	4a9b      	ldr	r2, [pc, #620]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae1a:	68d1      	ldr	r1, [r2, #12]
1000ae1c:	4b9f      	ldr	r3, [pc, #636]	; (1000b09c <system_clock_peripheral_disable+0x320>)
1000ae1e:	400b      	ands	r3, r1
1000ae20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000ae24:	e12d      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae26:	4a98      	ldr	r2, [pc, #608]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae28:	68d1      	ldr	r1, [r2, #12]
1000ae2a:	4b9d      	ldr	r3, [pc, #628]	; (1000b0a0 <system_clock_peripheral_disable+0x324>)
1000ae2c:	400b      	ands	r3, r1
1000ae2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000ae32:	e126      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae34:	4a94      	ldr	r2, [pc, #592]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae36:	68d1      	ldr	r1, [r2, #12]
1000ae38:	4b9a      	ldr	r3, [pc, #616]	; (1000b0a4 <system_clock_peripheral_disable+0x328>)
1000ae3a:	400b      	ands	r3, r1
1000ae3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000ae40:	e11f      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae42:	4a91      	ldr	r2, [pc, #580]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae44:	68d1      	ldr	r1, [r2, #12]
1000ae46:	4b98      	ldr	r3, [pc, #608]	; (1000b0a8 <system_clock_peripheral_disable+0x32c>)
1000ae48:	400b      	ands	r3, r1
1000ae4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000ae4e:	e118      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae50:	4a8d      	ldr	r2, [pc, #564]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae52:	68d1      	ldr	r1, [r2, #12]
1000ae54:	4b95      	ldr	r3, [pc, #596]	; (1000b0ac <system_clock_peripheral_disable+0x330>)
1000ae56:	400b      	ands	r3, r1
1000ae58:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000ae5c:	e111      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae5e:	4a8a      	ldr	r2, [pc, #552]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae60:	68d1      	ldr	r1, [r2, #12]
1000ae62:	4b93      	ldr	r3, [pc, #588]	; (1000b0b0 <system_clock_peripheral_disable+0x334>)
1000ae64:	400b      	ands	r3, r1
1000ae66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000ae6a:	e10a      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae6c:	4a86      	ldr	r2, [pc, #536]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae6e:	68d1      	ldr	r1, [r2, #12]
1000ae70:	4b90      	ldr	r3, [pc, #576]	; (1000b0b4 <system_clock_peripheral_disable+0x338>)
1000ae72:	400b      	ands	r3, r1
1000ae74:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000ae78:	e103      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae7a:	4a83      	ldr	r2, [pc, #524]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae7c:	68d1      	ldr	r1, [r2, #12]
1000ae7e:	4b8e      	ldr	r3, [pc, #568]	; (1000b0b8 <system_clock_peripheral_disable+0x33c>)
1000ae80:	400b      	ands	r3, r1
1000ae82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000ae86:	e0fc      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae88:	4a7f      	ldr	r2, [pc, #508]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae8a:	68d1      	ldr	r1, [r2, #12]
1000ae8c:	4b8b      	ldr	r3, [pc, #556]	; (1000b0bc <system_clock_peripheral_disable+0x340>)
1000ae8e:	400b      	ands	r3, r1
1000ae90:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ae94:	e0f5      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ae96:	4a7c      	ldr	r2, [pc, #496]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000ae98:	68d1      	ldr	r1, [r2, #12]
1000ae9a:	4b89      	ldr	r3, [pc, #548]	; (1000b0c0 <system_clock_peripheral_disable+0x344>)
1000ae9c:	400b      	ands	r3, r1
1000ae9e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aea0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000aea2:	e0ee      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aea4:	4a78      	ldr	r2, [pc, #480]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aea6:	68d1      	ldr	r1, [r2, #12]
1000aea8:	4b86      	ldr	r3, [pc, #536]	; (1000b0c4 <system_clock_peripheral_disable+0x348>)
1000aeaa:	400b      	ands	r3, r1
1000aeac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000aeb0:	e0e7      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aeb2:	4a75      	ldr	r2, [pc, #468]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aeb4:	68d1      	ldr	r1, [r2, #12]
1000aeb6:	4b84      	ldr	r3, [pc, #528]	; (1000b0c8 <system_clock_peripheral_disable+0x34c>)
1000aeb8:	400b      	ands	r3, r1
1000aeba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aebc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000aebe:	e0e0      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aec0:	4a71      	ldr	r2, [pc, #452]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aec2:	68d1      	ldr	r1, [r2, #12]
1000aec4:	4b81      	ldr	r3, [pc, #516]	; (1000b0cc <system_clock_peripheral_disable+0x350>)
1000aec6:	400b      	ands	r3, r1
1000aec8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000aecc:	e0d9      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aece:	4a6e      	ldr	r2, [pc, #440]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aed0:	68d1      	ldr	r1, [r2, #12]
1000aed2:	4b7f      	ldr	r3, [pc, #508]	; (1000b0d0 <system_clock_peripheral_disable+0x354>)
1000aed4:	400b      	ands	r3, r1
1000aed6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aed8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000aeda:	e0d2      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aedc:	4a6a      	ldr	r2, [pc, #424]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aede:	68d1      	ldr	r1, [r2, #12]
1000aee0:	4b7c      	ldr	r3, [pc, #496]	; (1000b0d4 <system_clock_peripheral_disable+0x358>)
1000aee2:	400b      	ands	r3, r1
1000aee4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aee6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000aee8:	e0cb      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aeea:	4a67      	ldr	r2, [pc, #412]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aeec:	68d1      	ldr	r1, [r2, #12]
1000aeee:	4b7a      	ldr	r3, [pc, #488]	; (1000b0d8 <system_clock_peripheral_disable+0x35c>)
1000aef0:	400b      	ands	r3, r1
1000aef2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aef4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000aef6:	e0c4      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aef8:	4a63      	ldr	r2, [pc, #396]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aefa:	68d1      	ldr	r1, [r2, #12]
1000aefc:	4b77      	ldr	r3, [pc, #476]	; (1000b0dc <system_clock_peripheral_disable+0x360>)
1000aefe:	400b      	ands	r3, r1
1000af00:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000af04:	e0bd      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af06:	4a60      	ldr	r2, [pc, #384]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af08:	6913      	ldr	r3, [r2, #16]
1000af0a:	2101      	movs	r1, #1
1000af0c:	438b      	bics	r3, r1
1000af0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000af12:	e0b6      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af14:	4a5c      	ldr	r2, [pc, #368]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af16:	6913      	ldr	r3, [r2, #16]
1000af18:	2102      	movs	r1, #2
1000af1a:	438b      	bics	r3, r1
1000af1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000af20:	e0af      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af22:	4a59      	ldr	r2, [pc, #356]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af24:	6913      	ldr	r3, [r2, #16]
1000af26:	2104      	movs	r1, #4
1000af28:	438b      	bics	r3, r1
1000af2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000af2e:	e0a8      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af30:	4a55      	ldr	r2, [pc, #340]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af32:	6913      	ldr	r3, [r2, #16]
1000af34:	2108      	movs	r1, #8
1000af36:	438b      	bics	r3, r1
1000af38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000af3c:	e0a1      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af3e:	4a52      	ldr	r2, [pc, #328]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af40:	6913      	ldr	r3, [r2, #16]
1000af42:	2110      	movs	r1, #16
1000af44:	438b      	bics	r3, r1
1000af46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000af4a:	e09a      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af4c:	4a4e      	ldr	r2, [pc, #312]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af4e:	6913      	ldr	r3, [r2, #16]
1000af50:	2120      	movs	r1, #32
1000af52:	438b      	bics	r3, r1
1000af54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000af58:	e093      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af5a:	4a4b      	ldr	r2, [pc, #300]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af5c:	6913      	ldr	r3, [r2, #16]
1000af5e:	2140      	movs	r1, #64	; 0x40
1000af60:	438b      	bics	r3, r1
1000af62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000af66:	e08c      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af68:	4a47      	ldr	r2, [pc, #284]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af6a:	6913      	ldr	r3, [r2, #16]
1000af6c:	2180      	movs	r1, #128	; 0x80
1000af6e:	438b      	bics	r3, r1
1000af70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000af74:	e085      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af76:	4a44      	ldr	r2, [pc, #272]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af78:	6911      	ldr	r1, [r2, #16]
1000af7a:	4b44      	ldr	r3, [pc, #272]	; (1000b08c <system_clock_peripheral_disable+0x310>)
1000af7c:	400b      	ands	r3, r1
1000af7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000af82:	e07e      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af84:	4a40      	ldr	r2, [pc, #256]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af86:	6911      	ldr	r1, [r2, #16]
1000af88:	4b55      	ldr	r3, [pc, #340]	; (1000b0e0 <system_clock_peripheral_disable+0x364>)
1000af8a:	400b      	ands	r3, r1
1000af8c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000af90:	e077      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000af92:	4a3d      	ldr	r2, [pc, #244]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000af94:	6911      	ldr	r1, [r2, #16]
1000af96:	4b53      	ldr	r3, [pc, #332]	; (1000b0e4 <system_clock_peripheral_disable+0x368>)
1000af98:	400b      	ands	r3, r1
1000af9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000af9e:	e070      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afa0:	4a39      	ldr	r2, [pc, #228]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afa2:	6911      	ldr	r1, [r2, #16]
1000afa4:	4b3a      	ldr	r3, [pc, #232]	; (1000b090 <system_clock_peripheral_disable+0x314>)
1000afa6:	400b      	ands	r3, r1
1000afa8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000afac:	e069      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afae:	4a36      	ldr	r2, [pc, #216]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afb0:	6911      	ldr	r1, [r2, #16]
1000afb2:	4b38      	ldr	r3, [pc, #224]	; (1000b094 <system_clock_peripheral_disable+0x318>)
1000afb4:	400b      	ands	r3, r1
1000afb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000afba:	e062      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afbc:	4a32      	ldr	r2, [pc, #200]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afbe:	6911      	ldr	r1, [r2, #16]
1000afc0:	4b35      	ldr	r3, [pc, #212]	; (1000b098 <system_clock_peripheral_disable+0x31c>)
1000afc2:	400b      	ands	r3, r1
1000afc4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000afc8:	e05b      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afca:	4a2f      	ldr	r2, [pc, #188]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afcc:	6911      	ldr	r1, [r2, #16]
1000afce:	4b33      	ldr	r3, [pc, #204]	; (1000b09c <system_clock_peripheral_disable+0x320>)
1000afd0:	400b      	ands	r3, r1
1000afd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000afd6:	e054      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afd8:	4a2b      	ldr	r2, [pc, #172]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afda:	6911      	ldr	r1, [r2, #16]
1000afdc:	4b30      	ldr	r3, [pc, #192]	; (1000b0a0 <system_clock_peripheral_disable+0x324>)
1000afde:	400b      	ands	r3, r1
1000afe0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afe2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000afe4:	e04d      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000afe6:	4a28      	ldr	r2, [pc, #160]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000afe8:	6911      	ldr	r1, [r2, #16]
1000afea:	4b2e      	ldr	r3, [pc, #184]	; (1000b0a4 <system_clock_peripheral_disable+0x328>)
1000afec:	400b      	ands	r3, r1
1000afee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aff0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000aff2:	e046      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aff4:	4a24      	ldr	r2, [pc, #144]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000aff6:	6911      	ldr	r1, [r2, #16]
1000aff8:	4b2b      	ldr	r3, [pc, #172]	; (1000b0a8 <system_clock_peripheral_disable+0x32c>)
1000affa:	400b      	ands	r3, r1
1000affc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000affe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b000:	e03f      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b002:	4a21      	ldr	r2, [pc, #132]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b004:	6911      	ldr	r1, [r2, #16]
1000b006:	4b29      	ldr	r3, [pc, #164]	; (1000b0ac <system_clock_peripheral_disable+0x330>)
1000b008:	400b      	ands	r3, r1
1000b00a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b00c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b00e:	e038      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b010:	4a1d      	ldr	r2, [pc, #116]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b012:	6911      	ldr	r1, [r2, #16]
1000b014:	4b26      	ldr	r3, [pc, #152]	; (1000b0b0 <system_clock_peripheral_disable+0x334>)
1000b016:	400b      	ands	r3, r1
1000b018:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b01a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b01c:	e031      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b01e:	4a1a      	ldr	r2, [pc, #104]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b020:	6911      	ldr	r1, [r2, #16]
1000b022:	4b24      	ldr	r3, [pc, #144]	; (1000b0b4 <system_clock_peripheral_disable+0x338>)
1000b024:	400b      	ands	r3, r1
1000b026:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b028:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b02a:	e02a      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b02c:	4a16      	ldr	r2, [pc, #88]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b02e:	6911      	ldr	r1, [r2, #16]
1000b030:	4b21      	ldr	r3, [pc, #132]	; (1000b0b8 <system_clock_peripheral_disable+0x33c>)
1000b032:	400b      	ands	r3, r1
1000b034:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b036:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b038:	e023      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b03a:	4a13      	ldr	r2, [pc, #76]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b03c:	6911      	ldr	r1, [r2, #16]
1000b03e:	4b1f      	ldr	r3, [pc, #124]	; (1000b0bc <system_clock_peripheral_disable+0x340>)
1000b040:	400b      	ands	r3, r1
1000b042:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b044:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b046:	e01c      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b048:	4a0f      	ldr	r2, [pc, #60]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b04a:	6911      	ldr	r1, [r2, #16]
1000b04c:	4b1c      	ldr	r3, [pc, #112]	; (1000b0c0 <system_clock_peripheral_disable+0x344>)
1000b04e:	400b      	ands	r3, r1
1000b050:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b052:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b054:	e015      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b056:	4a0c      	ldr	r2, [pc, #48]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b058:	7d13      	ldrb	r3, [r2, #20]
1000b05a:	2101      	movs	r1, #1
1000b05c:	438b      	bics	r3, r1
1000b05e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b060:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b062:	e00e      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b064:	4a08      	ldr	r2, [pc, #32]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b066:	7d13      	ldrb	r3, [r2, #20]
1000b068:	2102      	movs	r1, #2
1000b06a:	438b      	bics	r3, r1
1000b06c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b06e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b070:	e007      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b072:	4a05      	ldr	r2, [pc, #20]	; (1000b088 <system_clock_peripheral_disable+0x30c>)
1000b074:	7d13      	ldrb	r3, [r2, #20]
1000b076:	2104      	movs	r1, #4
1000b078:	438b      	bics	r3, r1
1000b07a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b07c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b07e:	e000      	b.n	1000b082 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b080:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b082:	bd00      	pop	{pc}
1000b084:	10016464 	.word	0x10016464
1000b088:	4000b000 	.word	0x4000b000
1000b08c:	fffffeff 	.word	0xfffffeff
1000b090:	fffff7ff 	.word	0xfffff7ff
1000b094:	ffffefff 	.word	0xffffefff
1000b098:	ffffdfff 	.word	0xffffdfff
1000b09c:	ffffbfff 	.word	0xffffbfff
1000b0a0:	ffff7fff 	.word	0xffff7fff
1000b0a4:	fffeffff 	.word	0xfffeffff
1000b0a8:	fffdffff 	.word	0xfffdffff
1000b0ac:	fffbffff 	.word	0xfffbffff
1000b0b0:	fff7ffff 	.word	0xfff7ffff
1000b0b4:	ffefffff 	.word	0xffefffff
1000b0b8:	ffdfffff 	.word	0xffdfffff
1000b0bc:	ffbfffff 	.word	0xffbfffff
1000b0c0:	ff7fffff 	.word	0xff7fffff
1000b0c4:	feffffff 	.word	0xfeffffff
1000b0c8:	fdffffff 	.word	0xfdffffff
1000b0cc:	fbffffff 	.word	0xfbffffff
1000b0d0:	f7ffffff 	.word	0xf7ffffff
1000b0d4:	efffffff 	.word	0xefffffff
1000b0d8:	dfffffff 	.word	0xdfffffff
1000b0dc:	bfffffff 	.word	0xbfffffff
1000b0e0:	fffffdff 	.word	0xfffffdff
1000b0e4:	fffffbff 	.word	0xfffffbff

1000b0e8 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b0e8:	b500      	push	{lr}
	switch (peripheral) {
1000b0ea:	2843      	cmp	r0, #67	; 0x43
1000b0ec:	d900      	bls.n	1000b0f0 <system_peripheral_reset+0x8>
1000b0ee:	e223      	b.n	1000b538 <system_peripheral_reset+0x450>
1000b0f0:	0080      	lsls	r0, r0, #2
1000b0f2:	4be0      	ldr	r3, [pc, #896]	; (1000b474 <system_peripheral_reset+0x38c>)
1000b0f4:	581b      	ldr	r3, [r3, r0]
1000b0f6:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b0f8:	4bdf      	ldr	r3, [pc, #892]	; (1000b478 <system_peripheral_reset+0x390>)
1000b0fa:	6859      	ldr	r1, [r3, #4]
1000b0fc:	2202      	movs	r2, #2
1000b0fe:	4391      	bics	r1, r2
1000b100:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b102:	6859      	ldr	r1, [r3, #4]
1000b104:	430a      	orrs	r2, r1
1000b106:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b108:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b10a:	e216      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b10c:	4bda      	ldr	r3, [pc, #872]	; (1000b478 <system_peripheral_reset+0x390>)
1000b10e:	6859      	ldr	r1, [r3, #4]
1000b110:	2204      	movs	r2, #4
1000b112:	4391      	bics	r1, r2
1000b114:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b116:	6859      	ldr	r1, [r3, #4]
1000b118:	430a      	orrs	r2, r1
1000b11a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b11c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b11e:	e20c      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b120:	4bd5      	ldr	r3, [pc, #852]	; (1000b478 <system_peripheral_reset+0x390>)
1000b122:	6859      	ldr	r1, [r3, #4]
1000b124:	2208      	movs	r2, #8
1000b126:	4391      	bics	r1, r2
1000b128:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b12a:	6859      	ldr	r1, [r3, #4]
1000b12c:	430a      	orrs	r2, r1
1000b12e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b130:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b132:	e202      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b134:	4bd0      	ldr	r3, [pc, #832]	; (1000b478 <system_peripheral_reset+0x390>)
1000b136:	6859      	ldr	r1, [r3, #4]
1000b138:	2210      	movs	r2, #16
1000b13a:	4391      	bics	r1, r2
1000b13c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b13e:	6859      	ldr	r1, [r3, #4]
1000b140:	430a      	orrs	r2, r1
1000b142:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b144:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b146:	e1f8      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b148:	4bcb      	ldr	r3, [pc, #812]	; (1000b478 <system_peripheral_reset+0x390>)
1000b14a:	6859      	ldr	r1, [r3, #4]
1000b14c:	2220      	movs	r2, #32
1000b14e:	4391      	bics	r1, r2
1000b150:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b152:	6859      	ldr	r1, [r3, #4]
1000b154:	430a      	orrs	r2, r1
1000b156:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b158:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b15a:	e1ee      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b15c:	4bc6      	ldr	r3, [pc, #792]	; (1000b478 <system_peripheral_reset+0x390>)
1000b15e:	6859      	ldr	r1, [r3, #4]
1000b160:	2240      	movs	r2, #64	; 0x40
1000b162:	4391      	bics	r1, r2
1000b164:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b166:	6859      	ldr	r1, [r3, #4]
1000b168:	430a      	orrs	r2, r1
1000b16a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b16c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b16e:	e1e4      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b170:	4bc1      	ldr	r3, [pc, #772]	; (1000b478 <system_peripheral_reset+0x390>)
1000b172:	6859      	ldr	r1, [r3, #4]
1000b174:	2280      	movs	r2, #128	; 0x80
1000b176:	4391      	bics	r1, r2
1000b178:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b17a:	6859      	ldr	r1, [r3, #4]
1000b17c:	430a      	orrs	r2, r1
1000b17e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b180:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b182:	e1da      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b184:	4bbc      	ldr	r3, [pc, #752]	; (1000b478 <system_peripheral_reset+0x390>)
1000b186:	6859      	ldr	r1, [r3, #4]
1000b188:	4abc      	ldr	r2, [pc, #752]	; (1000b47c <system_peripheral_reset+0x394>)
1000b18a:	400a      	ands	r2, r1
1000b18c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b18e:	685a      	ldr	r2, [r3, #4]
1000b190:	2180      	movs	r1, #128	; 0x80
1000b192:	0049      	lsls	r1, r1, #1
1000b194:	430a      	orrs	r2, r1
1000b196:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b198:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b19a:	e1ce      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b19c:	4bb6      	ldr	r3, [pc, #728]	; (1000b478 <system_peripheral_reset+0x390>)
1000b19e:	6859      	ldr	r1, [r3, #4]
1000b1a0:	4ab7      	ldr	r2, [pc, #732]	; (1000b480 <system_peripheral_reset+0x398>)
1000b1a2:	400a      	ands	r2, r1
1000b1a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1a6:	685a      	ldr	r2, [r3, #4]
1000b1a8:	2180      	movs	r1, #128	; 0x80
1000b1aa:	0089      	lsls	r1, r1, #2
1000b1ac:	430a      	orrs	r2, r1
1000b1ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b1b2:	e1c2      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1b4:	4bb0      	ldr	r3, [pc, #704]	; (1000b478 <system_peripheral_reset+0x390>)
1000b1b6:	6859      	ldr	r1, [r3, #4]
1000b1b8:	4ab2      	ldr	r2, [pc, #712]	; (1000b484 <system_peripheral_reset+0x39c>)
1000b1ba:	400a      	ands	r2, r1
1000b1bc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1be:	685a      	ldr	r2, [r3, #4]
1000b1c0:	2180      	movs	r1, #128	; 0x80
1000b1c2:	00c9      	lsls	r1, r1, #3
1000b1c4:	430a      	orrs	r2, r1
1000b1c6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b1ca:	e1b6      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1cc:	4baa      	ldr	r3, [pc, #680]	; (1000b478 <system_peripheral_reset+0x390>)
1000b1ce:	6859      	ldr	r1, [r3, #4]
1000b1d0:	4aad      	ldr	r2, [pc, #692]	; (1000b488 <system_peripheral_reset+0x3a0>)
1000b1d2:	400a      	ands	r2, r1
1000b1d4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1d6:	685a      	ldr	r2, [r3, #4]
1000b1d8:	2180      	movs	r1, #128	; 0x80
1000b1da:	0109      	lsls	r1, r1, #4
1000b1dc:	430a      	orrs	r2, r1
1000b1de:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e0:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b1e2:	e1aa      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1e4:	4ba4      	ldr	r3, [pc, #656]	; (1000b478 <system_peripheral_reset+0x390>)
1000b1e6:	6859      	ldr	r1, [r3, #4]
1000b1e8:	4aa8      	ldr	r2, [pc, #672]	; (1000b48c <system_peripheral_reset+0x3a4>)
1000b1ea:	400a      	ands	r2, r1
1000b1ec:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b1ee:	685a      	ldr	r2, [r3, #4]
1000b1f0:	2180      	movs	r1, #128	; 0x80
1000b1f2:	0149      	lsls	r1, r1, #5
1000b1f4:	430a      	orrs	r2, r1
1000b1f6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b1fa:	e19e      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b1fc:	4b9e      	ldr	r3, [pc, #632]	; (1000b478 <system_peripheral_reset+0x390>)
1000b1fe:	6859      	ldr	r1, [r3, #4]
1000b200:	4aa3      	ldr	r2, [pc, #652]	; (1000b490 <system_peripheral_reset+0x3a8>)
1000b202:	400a      	ands	r2, r1
1000b204:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b206:	685a      	ldr	r2, [r3, #4]
1000b208:	2180      	movs	r1, #128	; 0x80
1000b20a:	0189      	lsls	r1, r1, #6
1000b20c:	430a      	orrs	r2, r1
1000b20e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b210:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b212:	e192      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b214:	4b98      	ldr	r3, [pc, #608]	; (1000b478 <system_peripheral_reset+0x390>)
1000b216:	6859      	ldr	r1, [r3, #4]
1000b218:	4a9e      	ldr	r2, [pc, #632]	; (1000b494 <system_peripheral_reset+0x3ac>)
1000b21a:	400a      	ands	r2, r1
1000b21c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b21e:	685a      	ldr	r2, [r3, #4]
1000b220:	2180      	movs	r1, #128	; 0x80
1000b222:	01c9      	lsls	r1, r1, #7
1000b224:	430a      	orrs	r2, r1
1000b226:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b228:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b22a:	e186      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b22c:	4b92      	ldr	r3, [pc, #584]	; (1000b478 <system_peripheral_reset+0x390>)
1000b22e:	6859      	ldr	r1, [r3, #4]
1000b230:	4a99      	ldr	r2, [pc, #612]	; (1000b498 <system_peripheral_reset+0x3b0>)
1000b232:	400a      	ands	r2, r1
1000b234:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b236:	685a      	ldr	r2, [r3, #4]
1000b238:	2180      	movs	r1, #128	; 0x80
1000b23a:	0209      	lsls	r1, r1, #8
1000b23c:	430a      	orrs	r2, r1
1000b23e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b240:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b242:	e17a      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b244:	4b8c      	ldr	r3, [pc, #560]	; (1000b478 <system_peripheral_reset+0x390>)
1000b246:	6859      	ldr	r1, [r3, #4]
1000b248:	4a94      	ldr	r2, [pc, #592]	; (1000b49c <system_peripheral_reset+0x3b4>)
1000b24a:	400a      	ands	r2, r1
1000b24c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b24e:	685a      	ldr	r2, [r3, #4]
1000b250:	2180      	movs	r1, #128	; 0x80
1000b252:	0249      	lsls	r1, r1, #9
1000b254:	430a      	orrs	r2, r1
1000b256:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b258:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b25a:	e16e      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b25c:	4b86      	ldr	r3, [pc, #536]	; (1000b478 <system_peripheral_reset+0x390>)
1000b25e:	6859      	ldr	r1, [r3, #4]
1000b260:	4a8f      	ldr	r2, [pc, #572]	; (1000b4a0 <system_peripheral_reset+0x3b8>)
1000b262:	400a      	ands	r2, r1
1000b264:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b266:	685a      	ldr	r2, [r3, #4]
1000b268:	2180      	movs	r1, #128	; 0x80
1000b26a:	0289      	lsls	r1, r1, #10
1000b26c:	430a      	orrs	r2, r1
1000b26e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b270:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b272:	e162      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b274:	4b80      	ldr	r3, [pc, #512]	; (1000b478 <system_peripheral_reset+0x390>)
1000b276:	6859      	ldr	r1, [r3, #4]
1000b278:	4a8a      	ldr	r2, [pc, #552]	; (1000b4a4 <system_peripheral_reset+0x3bc>)
1000b27a:	400a      	ands	r2, r1
1000b27c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b27e:	685a      	ldr	r2, [r3, #4]
1000b280:	2180      	movs	r1, #128	; 0x80
1000b282:	02c9      	lsls	r1, r1, #11
1000b284:	430a      	orrs	r2, r1
1000b286:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b288:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b28a:	e156      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b28c:	4b7a      	ldr	r3, [pc, #488]	; (1000b478 <system_peripheral_reset+0x390>)
1000b28e:	6859      	ldr	r1, [r3, #4]
1000b290:	4a85      	ldr	r2, [pc, #532]	; (1000b4a8 <system_peripheral_reset+0x3c0>)
1000b292:	400a      	ands	r2, r1
1000b294:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b296:	685a      	ldr	r2, [r3, #4]
1000b298:	2180      	movs	r1, #128	; 0x80
1000b29a:	0309      	lsls	r1, r1, #12
1000b29c:	430a      	orrs	r2, r1
1000b29e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b2a2:	e14a      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2a4:	4b74      	ldr	r3, [pc, #464]	; (1000b478 <system_peripheral_reset+0x390>)
1000b2a6:	6859      	ldr	r1, [r3, #4]
1000b2a8:	4a80      	ldr	r2, [pc, #512]	; (1000b4ac <system_peripheral_reset+0x3c4>)
1000b2aa:	400a      	ands	r2, r1
1000b2ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2ae:	685a      	ldr	r2, [r3, #4]
1000b2b0:	2180      	movs	r1, #128	; 0x80
1000b2b2:	0349      	lsls	r1, r1, #13
1000b2b4:	430a      	orrs	r2, r1
1000b2b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b2ba:	e13e      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2bc:	4b6e      	ldr	r3, [pc, #440]	; (1000b478 <system_peripheral_reset+0x390>)
1000b2be:	6859      	ldr	r1, [r3, #4]
1000b2c0:	4a7b      	ldr	r2, [pc, #492]	; (1000b4b0 <system_peripheral_reset+0x3c8>)
1000b2c2:	400a      	ands	r2, r1
1000b2c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2c6:	685a      	ldr	r2, [r3, #4]
1000b2c8:	2180      	movs	r1, #128	; 0x80
1000b2ca:	0389      	lsls	r1, r1, #14
1000b2cc:	430a      	orrs	r2, r1
1000b2ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b2d2:	e132      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2d4:	4b68      	ldr	r3, [pc, #416]	; (1000b478 <system_peripheral_reset+0x390>)
1000b2d6:	6859      	ldr	r1, [r3, #4]
1000b2d8:	4a76      	ldr	r2, [pc, #472]	; (1000b4b4 <system_peripheral_reset+0x3cc>)
1000b2da:	400a      	ands	r2, r1
1000b2dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2de:	685a      	ldr	r2, [r3, #4]
1000b2e0:	2180      	movs	r1, #128	; 0x80
1000b2e2:	03c9      	lsls	r1, r1, #15
1000b2e4:	430a      	orrs	r2, r1
1000b2e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e8:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b2ea:	e126      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b2ec:	4b62      	ldr	r3, [pc, #392]	; (1000b478 <system_peripheral_reset+0x390>)
1000b2ee:	6859      	ldr	r1, [r3, #4]
1000b2f0:	4a71      	ldr	r2, [pc, #452]	; (1000b4b8 <system_peripheral_reset+0x3d0>)
1000b2f2:	400a      	ands	r2, r1
1000b2f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b2f6:	685a      	ldr	r2, [r3, #4]
1000b2f8:	2180      	movs	r1, #128	; 0x80
1000b2fa:	0409      	lsls	r1, r1, #16
1000b2fc:	430a      	orrs	r2, r1
1000b2fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b300:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b302:	e11a      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b304:	4b5c      	ldr	r3, [pc, #368]	; (1000b478 <system_peripheral_reset+0x390>)
1000b306:	6859      	ldr	r1, [r3, #4]
1000b308:	4a6c      	ldr	r2, [pc, #432]	; (1000b4bc <system_peripheral_reset+0x3d4>)
1000b30a:	400a      	ands	r2, r1
1000b30c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b30e:	685a      	ldr	r2, [r3, #4]
1000b310:	2180      	movs	r1, #128	; 0x80
1000b312:	0449      	lsls	r1, r1, #17
1000b314:	430a      	orrs	r2, r1
1000b316:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b318:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b31a:	e10e      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b31c:	4b56      	ldr	r3, [pc, #344]	; (1000b478 <system_peripheral_reset+0x390>)
1000b31e:	6859      	ldr	r1, [r3, #4]
1000b320:	4a67      	ldr	r2, [pc, #412]	; (1000b4c0 <system_peripheral_reset+0x3d8>)
1000b322:	400a      	ands	r2, r1
1000b324:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b326:	685a      	ldr	r2, [r3, #4]
1000b328:	2180      	movs	r1, #128	; 0x80
1000b32a:	0489      	lsls	r1, r1, #18
1000b32c:	430a      	orrs	r2, r1
1000b32e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b330:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b332:	e102      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b334:	4b50      	ldr	r3, [pc, #320]	; (1000b478 <system_peripheral_reset+0x390>)
1000b336:	6859      	ldr	r1, [r3, #4]
1000b338:	4a62      	ldr	r2, [pc, #392]	; (1000b4c4 <system_peripheral_reset+0x3dc>)
1000b33a:	400a      	ands	r2, r1
1000b33c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b33e:	685a      	ldr	r2, [r3, #4]
1000b340:	2180      	movs	r1, #128	; 0x80
1000b342:	04c9      	lsls	r1, r1, #19
1000b344:	430a      	orrs	r2, r1
1000b346:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b348:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b34a:	e0f6      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b34c:	4b4a      	ldr	r3, [pc, #296]	; (1000b478 <system_peripheral_reset+0x390>)
1000b34e:	6859      	ldr	r1, [r3, #4]
1000b350:	4a5d      	ldr	r2, [pc, #372]	; (1000b4c8 <system_peripheral_reset+0x3e0>)
1000b352:	400a      	ands	r2, r1
1000b354:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b356:	685a      	ldr	r2, [r3, #4]
1000b358:	2180      	movs	r1, #128	; 0x80
1000b35a:	0509      	lsls	r1, r1, #20
1000b35c:	430a      	orrs	r2, r1
1000b35e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b360:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b362:	e0ea      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b364:	4b44      	ldr	r3, [pc, #272]	; (1000b478 <system_peripheral_reset+0x390>)
1000b366:	6859      	ldr	r1, [r3, #4]
1000b368:	4a58      	ldr	r2, [pc, #352]	; (1000b4cc <system_peripheral_reset+0x3e4>)
1000b36a:	400a      	ands	r2, r1
1000b36c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b36e:	685a      	ldr	r2, [r3, #4]
1000b370:	2180      	movs	r1, #128	; 0x80
1000b372:	0549      	lsls	r1, r1, #21
1000b374:	430a      	orrs	r2, r1
1000b376:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b378:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b37a:	e0de      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b37c:	4b3e      	ldr	r3, [pc, #248]	; (1000b478 <system_peripheral_reset+0x390>)
1000b37e:	6859      	ldr	r1, [r3, #4]
1000b380:	4a53      	ldr	r2, [pc, #332]	; (1000b4d0 <system_peripheral_reset+0x3e8>)
1000b382:	400a      	ands	r2, r1
1000b384:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b386:	685a      	ldr	r2, [r3, #4]
1000b388:	2180      	movs	r1, #128	; 0x80
1000b38a:	0589      	lsls	r1, r1, #22
1000b38c:	430a      	orrs	r2, r1
1000b38e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b390:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b392:	e0d2      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b394:	4b38      	ldr	r3, [pc, #224]	; (1000b478 <system_peripheral_reset+0x390>)
1000b396:	6859      	ldr	r1, [r3, #4]
1000b398:	4a4e      	ldr	r2, [pc, #312]	; (1000b4d4 <system_peripheral_reset+0x3ec>)
1000b39a:	400a      	ands	r2, r1
1000b39c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b39e:	685a      	ldr	r2, [r3, #4]
1000b3a0:	2180      	movs	r1, #128	; 0x80
1000b3a2:	05c9      	lsls	r1, r1, #23
1000b3a4:	430a      	orrs	r2, r1
1000b3a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b3aa:	e0c6      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b3ac:	4a32      	ldr	r2, [pc, #200]	; (1000b478 <system_peripheral_reset+0x390>)
1000b3ae:	6853      	ldr	r3, [r2, #4]
1000b3b0:	005b      	lsls	r3, r3, #1
1000b3b2:	085b      	lsrs	r3, r3, #1
1000b3b4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b3b6:	6853      	ldr	r3, [r2, #4]
1000b3b8:	2180      	movs	r1, #128	; 0x80
1000b3ba:	0609      	lsls	r1, r1, #24
1000b3bc:	430b      	orrs	r3, r1
1000b3be:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3c0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b3c2:	e0ba      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3c4:	4b2c      	ldr	r3, [pc, #176]	; (1000b478 <system_peripheral_reset+0x390>)
1000b3c6:	891a      	ldrh	r2, [r3, #8]
1000b3c8:	2101      	movs	r1, #1
1000b3ca:	438a      	bics	r2, r1
1000b3cc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3ce:	8919      	ldrh	r1, [r3, #8]
1000b3d0:	2201      	movs	r2, #1
1000b3d2:	430a      	orrs	r2, r1
1000b3d4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b3d8:	e0af      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3da:	4b27      	ldr	r3, [pc, #156]	; (1000b478 <system_peripheral_reset+0x390>)
1000b3dc:	891a      	ldrh	r2, [r3, #8]
1000b3de:	2102      	movs	r1, #2
1000b3e0:	438a      	bics	r2, r1
1000b3e2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3e4:	8919      	ldrh	r1, [r3, #8]
1000b3e6:	2202      	movs	r2, #2
1000b3e8:	430a      	orrs	r2, r1
1000b3ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ec:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b3ee:	e0a4      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b3f0:	4b21      	ldr	r3, [pc, #132]	; (1000b478 <system_peripheral_reset+0x390>)
1000b3f2:	891a      	ldrh	r2, [r3, #8]
1000b3f4:	2104      	movs	r1, #4
1000b3f6:	438a      	bics	r2, r1
1000b3f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b3fa:	8919      	ldrh	r1, [r3, #8]
1000b3fc:	2204      	movs	r2, #4
1000b3fe:	430a      	orrs	r2, r1
1000b400:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b402:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b404:	e099      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b406:	4b1c      	ldr	r3, [pc, #112]	; (1000b478 <system_peripheral_reset+0x390>)
1000b408:	891a      	ldrh	r2, [r3, #8]
1000b40a:	2108      	movs	r1, #8
1000b40c:	438a      	bics	r2, r1
1000b40e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b410:	8919      	ldrh	r1, [r3, #8]
1000b412:	2208      	movs	r2, #8
1000b414:	430a      	orrs	r2, r1
1000b416:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b418:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b41a:	e08e      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b41c:	4b16      	ldr	r3, [pc, #88]	; (1000b478 <system_peripheral_reset+0x390>)
1000b41e:	891a      	ldrh	r2, [r3, #8]
1000b420:	2110      	movs	r1, #16
1000b422:	438a      	bics	r2, r1
1000b424:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b426:	8919      	ldrh	r1, [r3, #8]
1000b428:	2210      	movs	r2, #16
1000b42a:	430a      	orrs	r2, r1
1000b42c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b42e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b430:	e083      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b432:	4b11      	ldr	r3, [pc, #68]	; (1000b478 <system_peripheral_reset+0x390>)
1000b434:	891a      	ldrh	r2, [r3, #8]
1000b436:	2120      	movs	r1, #32
1000b438:	438a      	bics	r2, r1
1000b43a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b43c:	8919      	ldrh	r1, [r3, #8]
1000b43e:	2220      	movs	r2, #32
1000b440:	430a      	orrs	r2, r1
1000b442:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b444:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b446:	e078      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b448:	4b0b      	ldr	r3, [pc, #44]	; (1000b478 <system_peripheral_reset+0x390>)
1000b44a:	891a      	ldrh	r2, [r3, #8]
1000b44c:	2140      	movs	r1, #64	; 0x40
1000b44e:	438a      	bics	r2, r1
1000b450:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b452:	8919      	ldrh	r1, [r3, #8]
1000b454:	2240      	movs	r2, #64	; 0x40
1000b456:	430a      	orrs	r2, r1
1000b458:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b45a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b45c:	e06d      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b45e:	4b06      	ldr	r3, [pc, #24]	; (1000b478 <system_peripheral_reset+0x390>)
1000b460:	891a      	ldrh	r2, [r3, #8]
1000b462:	2180      	movs	r1, #128	; 0x80
1000b464:	438a      	bics	r2, r1
1000b466:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b468:	8919      	ldrh	r1, [r3, #8]
1000b46a:	2280      	movs	r2, #128	; 0x80
1000b46c:	430a      	orrs	r2, r1
1000b46e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b470:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b472:	e062      	b.n	1000b53a <system_peripheral_reset+0x452>
1000b474:	1001653c 	.word	0x1001653c
1000b478:	4000b000 	.word	0x4000b000
1000b47c:	fffffeff 	.word	0xfffffeff
1000b480:	fffffdff 	.word	0xfffffdff
1000b484:	fffffbff 	.word	0xfffffbff
1000b488:	fffff7ff 	.word	0xfffff7ff
1000b48c:	ffffefff 	.word	0xffffefff
1000b490:	ffffdfff 	.word	0xffffdfff
1000b494:	ffffbfff 	.word	0xffffbfff
1000b498:	ffff7fff 	.word	0xffff7fff
1000b49c:	fffeffff 	.word	0xfffeffff
1000b4a0:	fffdffff 	.word	0xfffdffff
1000b4a4:	fffbffff 	.word	0xfffbffff
1000b4a8:	fff7ffff 	.word	0xfff7ffff
1000b4ac:	ffefffff 	.word	0xffefffff
1000b4b0:	ffdfffff 	.word	0xffdfffff
1000b4b4:	ffbfffff 	.word	0xffbfffff
1000b4b8:	ff7fffff 	.word	0xff7fffff
1000b4bc:	feffffff 	.word	0xfeffffff
1000b4c0:	fdffffff 	.word	0xfdffffff
1000b4c4:	fbffffff 	.word	0xfbffffff
1000b4c8:	f7ffffff 	.word	0xf7ffffff
1000b4cc:	efffffff 	.word	0xefffffff
1000b4d0:	dfffffff 	.word	0xdfffffff
1000b4d4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b4d8:	4b18      	ldr	r3, [pc, #96]	; (1000b53c <system_peripheral_reset+0x454>)
1000b4da:	8919      	ldrh	r1, [r3, #8]
1000b4dc:	4a18      	ldr	r2, [pc, #96]	; (1000b540 <system_peripheral_reset+0x458>)
1000b4de:	400a      	ands	r2, r1
1000b4e0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b4e2:	8919      	ldrh	r1, [r3, #8]
1000b4e4:	2280      	movs	r2, #128	; 0x80
1000b4e6:	0052      	lsls	r2, r2, #1
1000b4e8:	430a      	orrs	r2, r1
1000b4ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b4ee:	e024      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b4f0:	4b12      	ldr	r3, [pc, #72]	; (1000b53c <system_peripheral_reset+0x454>)
1000b4f2:	8919      	ldrh	r1, [r3, #8]
1000b4f4:	4a13      	ldr	r2, [pc, #76]	; (1000b544 <system_peripheral_reset+0x45c>)
1000b4f6:	400a      	ands	r2, r1
1000b4f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b4fa:	8919      	ldrh	r1, [r3, #8]
1000b4fc:	2280      	movs	r2, #128	; 0x80
1000b4fe:	0092      	lsls	r2, r2, #2
1000b500:	430a      	orrs	r2, r1
1000b502:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b504:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b506:	e018      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b508:	4b0c      	ldr	r3, [pc, #48]	; (1000b53c <system_peripheral_reset+0x454>)
1000b50a:	8919      	ldrh	r1, [r3, #8]
1000b50c:	4a0e      	ldr	r2, [pc, #56]	; (1000b548 <system_peripheral_reset+0x460>)
1000b50e:	400a      	ands	r2, r1
1000b510:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b512:	8919      	ldrh	r1, [r3, #8]
1000b514:	2280      	movs	r2, #128	; 0x80
1000b516:	00d2      	lsls	r2, r2, #3
1000b518:	430a      	orrs	r2, r1
1000b51a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b51c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b51e:	e00c      	b.n	1000b53a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b520:	4b06      	ldr	r3, [pc, #24]	; (1000b53c <system_peripheral_reset+0x454>)
1000b522:	8919      	ldrh	r1, [r3, #8]
1000b524:	4a09      	ldr	r2, [pc, #36]	; (1000b54c <system_peripheral_reset+0x464>)
1000b526:	400a      	ands	r2, r1
1000b528:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b52a:	8919      	ldrh	r1, [r3, #8]
1000b52c:	2280      	movs	r2, #128	; 0x80
1000b52e:	0112      	lsls	r2, r2, #4
1000b530:	430a      	orrs	r2, r1
1000b532:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b534:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b536:	e000      	b.n	1000b53a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b538:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b53a:	bd00      	pop	{pc}
1000b53c:	4000b000 	.word	0x4000b000
1000b540:	fffffeff 	.word	0xfffffeff
1000b544:	fffffdff 	.word	0xfffffdff
1000b548:	fffffbff 	.word	0xfffffbff
1000b54c:	fffff7ff 	.word	0xfffff7ff

1000b550 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b550:	2380      	movs	r3, #128	; 0x80
1000b552:	04db      	lsls	r3, r3, #19
1000b554:	469c      	mov	ip, r3
1000b556:	4460      	add	r0, ip
1000b558:	0080      	lsls	r0, r0, #2
1000b55a:	6001      	str	r1, [r0, #0]
}
1000b55c:	4770      	bx	lr
1000b55e:	46c0      	nop			; (mov r8, r8)

1000b560 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b560:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b562:	4b20      	ldr	r3, [pc, #128]	; (1000b5e4 <uart_rx0_isr_handler+0x84>)
1000b564:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b566:	6823      	ldr	r3, [r4, #0]
1000b568:	7d1d      	ldrb	r5, [r3, #20]
1000b56a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b56c:	066a      	lsls	r2, r5, #25
1000b56e:	d513      	bpl.n	1000b598 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b570:	211e      	movs	r1, #30
1000b572:	2222      	movs	r2, #34	; 0x22
1000b574:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b576:	7e1a      	ldrb	r2, [r3, #24]
1000b578:	3123      	adds	r1, #35	; 0x23
1000b57a:	438a      	bics	r2, r1
1000b57c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b57e:	2321      	movs	r3, #33	; 0x21
1000b580:	5ce3      	ldrb	r3, [r4, r3]
1000b582:	071b      	lsls	r3, r3, #28
1000b584:	d506      	bpl.n	1000b594 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b586:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b588:	5ce3      	ldrb	r3, [r4, r3]
1000b58a:	071b      	lsls	r3, r3, #28
1000b58c:	d502      	bpl.n	1000b594 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b58e:	0020      	movs	r0, r4
1000b590:	6923      	ldr	r3, [r4, #16]
1000b592:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b594:	6823      	ldr	r3, [r4, #0]
1000b596:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b598:	07eb      	lsls	r3, r5, #31
1000b59a:	d522      	bpl.n	1000b5e2 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b59c:	6823      	ldr	r3, [r4, #0]
1000b59e:	7c1b      	ldrb	r3, [r3, #16]
1000b5a0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b5a2:	6962      	ldr	r2, [r4, #20]
1000b5a4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b5a6:	6963      	ldr	r3, [r4, #20]
1000b5a8:	3301      	adds	r3, #1
1000b5aa:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b5ac:	8ba3      	ldrh	r3, [r4, #28]
1000b5ae:	3b01      	subs	r3, #1
1000b5b0:	b29b      	uxth	r3, r3
1000b5b2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b5b4:	8ba3      	ldrh	r3, [r4, #28]
1000b5b6:	b29b      	uxth	r3, r3
1000b5b8:	2b00      	cmp	r3, #0
1000b5ba:	d112      	bne.n	1000b5e2 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b5bc:	3321      	adds	r3, #33	; 0x21
1000b5be:	5ce3      	ldrb	r3, [r4, r3]
1000b5c0:	075b      	lsls	r3, r3, #29
1000b5c2:	d50e      	bpl.n	1000b5e2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b5c4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b5c6:	5ce3      	ldrb	r3, [r4, r3]
1000b5c8:	075b      	lsls	r3, r3, #29
1000b5ca:	d50a      	bpl.n	1000b5e2 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b5cc:	2200      	movs	r2, #0
1000b5ce:	2322      	movs	r3, #34	; 0x22
1000b5d0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b5d2:	6822      	ldr	r2, [r4, #0]
1000b5d4:	7e13      	ldrb	r3, [r2, #24]
1000b5d6:	2101      	movs	r1, #1
1000b5d8:	438b      	bics	r3, r1
1000b5da:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b5dc:	68e3      	ldr	r3, [r4, #12]
1000b5de:	0020      	movs	r0, r4
1000b5e0:	4798      	blx	r3
			}
		}
	}
}
1000b5e2:	bd70      	pop	{r4, r5, r6, pc}
1000b5e4:	100191fc 	.word	0x100191fc

1000b5e8 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b5e8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b5ea:	4b21      	ldr	r3, [pc, #132]	; (1000b670 <uart_tx0_isr_handler+0x88>)
1000b5ec:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b5ee:	6823      	ldr	r3, [r4, #0]
1000b5f0:	791d      	ldrb	r5, [r3, #4]
1000b5f2:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b5f4:	07ea      	lsls	r2, r5, #31
1000b5f6:	d517      	bpl.n	1000b628 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b5f8:	69a2      	ldr	r2, [r4, #24]
1000b5fa:	7811      	ldrb	r1, [r2, #0]
1000b5fc:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b5fe:	3201      	adds	r2, #1
1000b600:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b602:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b604:	8be3      	ldrh	r3, [r4, #30]
1000b606:	3b01      	subs	r3, #1
1000b608:	b29b      	uxth	r3, r3
1000b60a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b60c:	8be3      	ldrh	r3, [r4, #30]
1000b60e:	b29b      	uxth	r3, r3
1000b610:	2b00      	cmp	r3, #0
1000b612:	d109      	bne.n	1000b628 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b614:	6822      	ldr	r2, [r4, #0]
1000b616:	7a13      	ldrb	r3, [r2, #8]
1000b618:	2101      	movs	r1, #1
1000b61a:	438b      	bics	r3, r1
1000b61c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b61e:	6822      	ldr	r2, [r4, #0]
1000b620:	7a11      	ldrb	r1, [r2, #8]
1000b622:	2310      	movs	r3, #16
1000b624:	430b      	orrs	r3, r1
1000b626:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b628:	06eb      	lsls	r3, r5, #27
1000b62a:	d512      	bpl.n	1000b652 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b62c:	2321      	movs	r3, #33	; 0x21
1000b62e:	5ce3      	ldrb	r3, [r4, r3]
1000b630:	07db      	lsls	r3, r3, #31
1000b632:	d50e      	bpl.n	1000b652 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b634:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b636:	5ce3      	ldrb	r3, [r4, r3]
1000b638:	07db      	lsls	r3, r3, #31
1000b63a:	d50a      	bpl.n	1000b652 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b63c:	2200      	movs	r2, #0
1000b63e:	2322      	movs	r3, #34	; 0x22
1000b640:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b642:	6822      	ldr	r2, [r4, #0]
1000b644:	7a13      	ldrb	r3, [r2, #8]
1000b646:	2110      	movs	r1, #16
1000b648:	438b      	bics	r3, r1
1000b64a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b64c:	0020      	movs	r0, r4
1000b64e:	6863      	ldr	r3, [r4, #4]
1000b650:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b652:	06ab      	lsls	r3, r5, #26
1000b654:	d50a      	bpl.n	1000b66c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b656:	2321      	movs	r3, #33	; 0x21
1000b658:	5ce3      	ldrb	r3, [r4, r3]
1000b65a:	079b      	lsls	r3, r3, #30
1000b65c:	d506      	bpl.n	1000b66c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b65e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b660:	5ce3      	ldrb	r3, [r4, r3]
1000b662:	079b      	lsls	r3, r3, #30
1000b664:	d502      	bpl.n	1000b66c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b666:	68a3      	ldr	r3, [r4, #8]
1000b668:	0020      	movs	r0, r4
1000b66a:	4798      	blx	r3
		}

	}
}
1000b66c:	bd70      	pop	{r4, r5, r6, pc}
1000b66e:	46c0      	nop			; (mov r8, r8)
1000b670:	100191fc 	.word	0x100191fc

1000b674 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b674:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b676:	4b20      	ldr	r3, [pc, #128]	; (1000b6f8 <uart_rx1_isr_handler+0x84>)
1000b678:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b67a:	6823      	ldr	r3, [r4, #0]
1000b67c:	7d1d      	ldrb	r5, [r3, #20]
1000b67e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b680:	066a      	lsls	r2, r5, #25
1000b682:	d513      	bpl.n	1000b6ac <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b684:	211e      	movs	r1, #30
1000b686:	2222      	movs	r2, #34	; 0x22
1000b688:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b68a:	7e1a      	ldrb	r2, [r3, #24]
1000b68c:	3123      	adds	r1, #35	; 0x23
1000b68e:	438a      	bics	r2, r1
1000b690:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b692:	2321      	movs	r3, #33	; 0x21
1000b694:	5ce3      	ldrb	r3, [r4, r3]
1000b696:	071b      	lsls	r3, r3, #28
1000b698:	d506      	bpl.n	1000b6a8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b69a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b69c:	5ce3      	ldrb	r3, [r4, r3]
1000b69e:	071b      	lsls	r3, r3, #28
1000b6a0:	d502      	bpl.n	1000b6a8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b6a2:	0020      	movs	r0, r4
1000b6a4:	6923      	ldr	r3, [r4, #16]
1000b6a6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b6a8:	6823      	ldr	r3, [r4, #0]
1000b6aa:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b6ac:	07eb      	lsls	r3, r5, #31
1000b6ae:	d522      	bpl.n	1000b6f6 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b6b0:	6823      	ldr	r3, [r4, #0]
1000b6b2:	7c1b      	ldrb	r3, [r3, #16]
1000b6b4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b6b6:	6962      	ldr	r2, [r4, #20]
1000b6b8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b6ba:	6963      	ldr	r3, [r4, #20]
1000b6bc:	3301      	adds	r3, #1
1000b6be:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b6c0:	8ba3      	ldrh	r3, [r4, #28]
1000b6c2:	3b01      	subs	r3, #1
1000b6c4:	b29b      	uxth	r3, r3
1000b6c6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b6c8:	8ba3      	ldrh	r3, [r4, #28]
1000b6ca:	b29b      	uxth	r3, r3
1000b6cc:	2b00      	cmp	r3, #0
1000b6ce:	d112      	bne.n	1000b6f6 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b6d0:	3321      	adds	r3, #33	; 0x21
1000b6d2:	5ce3      	ldrb	r3, [r4, r3]
1000b6d4:	075b      	lsls	r3, r3, #29
1000b6d6:	d50e      	bpl.n	1000b6f6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b6d8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b6da:	5ce3      	ldrb	r3, [r4, r3]
1000b6dc:	075b      	lsls	r3, r3, #29
1000b6de:	d50a      	bpl.n	1000b6f6 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b6e0:	2200      	movs	r2, #0
1000b6e2:	2322      	movs	r3, #34	; 0x22
1000b6e4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b6e6:	6822      	ldr	r2, [r4, #0]
1000b6e8:	7e13      	ldrb	r3, [r2, #24]
1000b6ea:	2101      	movs	r1, #1
1000b6ec:	438b      	bics	r3, r1
1000b6ee:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b6f0:	68e3      	ldr	r3, [r4, #12]
1000b6f2:	0020      	movs	r0, r4
1000b6f4:	4798      	blx	r3
			}
		}
	}
}
1000b6f6:	bd70      	pop	{r4, r5, r6, pc}
1000b6f8:	100191fc 	.word	0x100191fc

1000b6fc <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b6fc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b6fe:	4b21      	ldr	r3, [pc, #132]	; (1000b784 <uart_tx1_isr_handler+0x88>)
1000b700:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b702:	6823      	ldr	r3, [r4, #0]
1000b704:	791d      	ldrb	r5, [r3, #4]
1000b706:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b708:	07ea      	lsls	r2, r5, #31
1000b70a:	d517      	bpl.n	1000b73c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b70c:	69a2      	ldr	r2, [r4, #24]
1000b70e:	7811      	ldrb	r1, [r2, #0]
1000b710:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b712:	3201      	adds	r2, #1
1000b714:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b716:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b718:	8be3      	ldrh	r3, [r4, #30]
1000b71a:	3b01      	subs	r3, #1
1000b71c:	b29b      	uxth	r3, r3
1000b71e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b720:	8be3      	ldrh	r3, [r4, #30]
1000b722:	b29b      	uxth	r3, r3
1000b724:	2b00      	cmp	r3, #0
1000b726:	d109      	bne.n	1000b73c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b728:	6822      	ldr	r2, [r4, #0]
1000b72a:	7a13      	ldrb	r3, [r2, #8]
1000b72c:	2101      	movs	r1, #1
1000b72e:	438b      	bics	r3, r1
1000b730:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b732:	6822      	ldr	r2, [r4, #0]
1000b734:	7a11      	ldrb	r1, [r2, #8]
1000b736:	2310      	movs	r3, #16
1000b738:	430b      	orrs	r3, r1
1000b73a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b73c:	06eb      	lsls	r3, r5, #27
1000b73e:	d512      	bpl.n	1000b766 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b740:	2321      	movs	r3, #33	; 0x21
1000b742:	5ce3      	ldrb	r3, [r4, r3]
1000b744:	07db      	lsls	r3, r3, #31
1000b746:	d50e      	bpl.n	1000b766 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b748:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b74a:	5ce3      	ldrb	r3, [r4, r3]
1000b74c:	07db      	lsls	r3, r3, #31
1000b74e:	d50a      	bpl.n	1000b766 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b750:	2200      	movs	r2, #0
1000b752:	2322      	movs	r3, #34	; 0x22
1000b754:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b756:	6822      	ldr	r2, [r4, #0]
1000b758:	7a13      	ldrb	r3, [r2, #8]
1000b75a:	2110      	movs	r1, #16
1000b75c:	438b      	bics	r3, r1
1000b75e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b760:	0020      	movs	r0, r4
1000b762:	6863      	ldr	r3, [r4, #4]
1000b764:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b766:	06ab      	lsls	r3, r5, #26
1000b768:	d50a      	bpl.n	1000b780 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b76a:	2321      	movs	r3, #33	; 0x21
1000b76c:	5ce3      	ldrb	r3, [r4, r3]
1000b76e:	079b      	lsls	r3, r3, #30
1000b770:	d506      	bpl.n	1000b780 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b772:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b774:	5ce3      	ldrb	r3, [r4, r3]
1000b776:	079b      	lsls	r3, r3, #30
1000b778:	d502      	bpl.n	1000b780 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b77a:	68a3      	ldr	r3, [r4, #8]
1000b77c:	0020      	movs	r0, r4
1000b77e:	4798      	blx	r3
		}

	}
}
1000b780:	bd70      	pop	{r4, r5, r6, pc}
1000b782:	46c0      	nop			; (mov r8, r8)
1000b784:	100191fc 	.word	0x100191fc

1000b788 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b788:	23e1      	movs	r3, #225	; 0xe1
1000b78a:	025b      	lsls	r3, r3, #9
1000b78c:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b78e:	2300      	movs	r3, #0
1000b790:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b792:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b794:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b796:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b798:	3302      	adds	r3, #2
1000b79a:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b79c:	2203      	movs	r2, #3
1000b79e:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b7a0:	3201      	adds	r2, #1
1000b7a2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b7a4:	3201      	adds	r2, #1
1000b7a6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b7a8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b7aa:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b7ac:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b7ae:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b7b0:	4770      	bx	lr
1000b7b2:	46c0      	nop			; (mov r8, r8)

1000b7b4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b7b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b7b6:	464f      	mov	r7, r9
1000b7b8:	4646      	mov	r6, r8
1000b7ba:	b4c0      	push	{r6, r7}
1000b7bc:	0005      	movs	r5, r0
1000b7be:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b7c0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b7c2:	2300      	movs	r3, #0
1000b7c4:	6043      	str	r3, [r0, #4]
1000b7c6:	6083      	str	r3, [r0, #8]
1000b7c8:	60c3      	str	r3, [r0, #12]
1000b7ca:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b7cc:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b7ce:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b7d0:	2200      	movs	r2, #0
1000b7d2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b7d4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b7d6:	3320      	adds	r3, #32
1000b7d8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b7da:	3301      	adds	r3, #1
1000b7dc:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b7de:	3301      	adds	r3, #1
1000b7e0:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b7e2:	4b55      	ldr	r3, [pc, #340]	; (1000b938 <uart_init+0x184>)
1000b7e4:	4299      	cmp	r1, r3
1000b7e6:	d118      	bne.n	1000b81a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b7e8:	2009      	movs	r0, #9
1000b7ea:	4c54      	ldr	r4, [pc, #336]	; (1000b93c <uart_init+0x188>)
1000b7ec:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b7ee:	200a      	movs	r0, #10
1000b7f0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b7f2:	2009      	movs	r0, #9
1000b7f4:	4c52      	ldr	r4, [pc, #328]	; (1000b940 <uart_init+0x18c>)
1000b7f6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b7f8:	200a      	movs	r0, #10
1000b7fa:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b7fc:	4b51      	ldr	r3, [pc, #324]	; (1000b944 <uart_init+0x190>)
1000b7fe:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b800:	4951      	ldr	r1, [pc, #324]	; (1000b948 <uart_init+0x194>)
1000b802:	2010      	movs	r0, #16
1000b804:	4c51      	ldr	r4, [pc, #324]	; (1000b94c <uart_init+0x198>)
1000b806:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b808:	4951      	ldr	r1, [pc, #324]	; (1000b950 <uart_init+0x19c>)
1000b80a:	2011      	movs	r0, #17
1000b80c:	47a0      	blx	r4
1000b80e:	4b51      	ldr	r3, [pc, #324]	; (1000b954 <uart_init+0x1a0>)
1000b810:	2201      	movs	r2, #1
1000b812:	601a      	str	r2, [r3, #0]
1000b814:	3201      	adds	r2, #1
1000b816:	601a      	str	r2, [r3, #0]
1000b818:	e01a      	b.n	1000b850 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b81a:	4b4f      	ldr	r3, [pc, #316]	; (1000b958 <uart_init+0x1a4>)
1000b81c:	4299      	cmp	r1, r3
1000b81e:	d117      	bne.n	1000b850 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b820:	200b      	movs	r0, #11
1000b822:	4c46      	ldr	r4, [pc, #280]	; (1000b93c <uart_init+0x188>)
1000b824:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b826:	200c      	movs	r0, #12
1000b828:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b82a:	200b      	movs	r0, #11
1000b82c:	4c44      	ldr	r4, [pc, #272]	; (1000b940 <uart_init+0x18c>)
1000b82e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b830:	200c      	movs	r0, #12
1000b832:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b834:	4b43      	ldr	r3, [pc, #268]	; (1000b944 <uart_init+0x190>)
1000b836:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b838:	4948      	ldr	r1, [pc, #288]	; (1000b95c <uart_init+0x1a8>)
1000b83a:	2012      	movs	r0, #18
1000b83c:	4c43      	ldr	r4, [pc, #268]	; (1000b94c <uart_init+0x198>)
1000b83e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b840:	4947      	ldr	r1, [pc, #284]	; (1000b960 <uart_init+0x1ac>)
1000b842:	2013      	movs	r0, #19
1000b844:	47a0      	blx	r4
1000b846:	4b43      	ldr	r3, [pc, #268]	; (1000b954 <uart_init+0x1a0>)
1000b848:	2204      	movs	r2, #4
1000b84a:	601a      	str	r2, [r3, #0]
1000b84c:	3204      	adds	r2, #4
1000b84e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b850:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b852:	2204      	movs	r2, #4
1000b854:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b856:	2b00      	cmp	r3, #0
1000b858:	d152      	bne.n	1000b900 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b85a:	3302      	adds	r3, #2
1000b85c:	4698      	mov	r8, r3
1000b85e:	e04f      	b.n	1000b900 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b860:	8a31      	ldrh	r1, [r6, #16]
1000b862:	ce01      	ldmia	r6!, {r0}
1000b864:	b2c0      	uxtb	r0, r0
1000b866:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b868:	3401      	adds	r4, #1
1000b86a:	b2e4      	uxtb	r4, r4
1000b86c:	4544      	cmp	r4, r8
1000b86e:	d3f7      	bcc.n	1000b860 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b870:	682b      	ldr	r3, [r5, #0]
1000b872:	7d1a      	ldrb	r2, [r3, #20]
1000b874:	07d2      	lsls	r2, r2, #31
1000b876:	d504      	bpl.n	1000b882 <uart_init+0xce>
1000b878:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b87a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b87c:	7d1a      	ldrb	r2, [r3, #20]
1000b87e:	420a      	tst	r2, r1
1000b880:	d1fb      	bne.n	1000b87a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b882:	2100      	movs	r1, #0
1000b884:	2220      	movs	r2, #32
1000b886:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b888:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b88a:	1e59      	subs	r1, r3, #1
1000b88c:	418b      	sbcs	r3, r1
1000b88e:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b890:	793b      	ldrb	r3, [r7, #4]
1000b892:	797a      	ldrb	r2, [r7, #5]
1000b894:	4313      	orrs	r3, r2
1000b896:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b898:	79ba      	ldrb	r2, [r7, #6]
1000b89a:	2a02      	cmp	r2, #2
1000b89c:	d00d      	beq.n	1000b8ba <uart_init+0x106>
1000b89e:	b2d1      	uxtb	r1, r2
1000b8a0:	2902      	cmp	r1, #2
1000b8a2:	d802      	bhi.n	1000b8aa <uart_init+0xf6>
1000b8a4:	2a01      	cmp	r2, #1
1000b8a6:	d005      	beq.n	1000b8b4 <uart_init+0x100>
1000b8a8:	e00f      	b.n	1000b8ca <uart_init+0x116>
1000b8aa:	2a03      	cmp	r2, #3
1000b8ac:	d008      	beq.n	1000b8c0 <uart_init+0x10c>
1000b8ae:	2a04      	cmp	r2, #4
1000b8b0:	d009      	beq.n	1000b8c6 <uart_init+0x112>
1000b8b2:	e00a      	b.n	1000b8ca <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b8b4:	2202      	movs	r2, #2
1000b8b6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b8b8:	e007      	b.n	1000b8ca <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b8ba:	2206      	movs	r2, #6
1000b8bc:	4313      	orrs	r3, r2
			break;
1000b8be:	e004      	b.n	1000b8ca <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b8c0:	220a      	movs	r2, #10
1000b8c2:	4313      	orrs	r3, r2
			break;
1000b8c4:	e001      	b.n	1000b8ca <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b8c6:	220e      	movs	r2, #14
1000b8c8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b8ca:	2220      	movs	r2, #32
1000b8cc:	6829      	ldr	r1, [r5, #0]
1000b8ce:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b8d0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b8d2:	4b24      	ldr	r3, [pc, #144]	; (1000b964 <uart_init+0x1b0>)
1000b8d4:	4798      	blx	r3
1000b8d6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b8d8:	0031      	movs	r1, r6
1000b8da:	4b23      	ldr	r3, [pc, #140]	; (1000b968 <uart_init+0x1b4>)
1000b8dc:	4798      	blx	r3
1000b8de:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b8e0:	0400      	lsls	r0, r0, #16
1000b8e2:	0c00      	lsrs	r0, r0, #16
1000b8e4:	4370      	muls	r0, r6
1000b8e6:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b8e8:	0931      	lsrs	r1, r6, #4
1000b8ea:	4288      	cmp	r0, r1
1000b8ec:	d906      	bls.n	1000b8fc <uart_init+0x148>
1000b8ee:	2300      	movs	r3, #0
		i++;
1000b8f0:	3301      	adds	r3, #1
1000b8f2:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b8f4:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b8f6:	4288      	cmp	r0, r1
1000b8f8:	d8fa      	bhi.n	1000b8f0 <uart_init+0x13c>
1000b8fa:	e007      	b.n	1000b90c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b8fc:	2300      	movs	r3, #0
1000b8fe:	e005      	b.n	1000b90c <uart_init+0x158>
1000b900:	003e      	movs	r6, r7
1000b902:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b904:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b906:	4b19      	ldr	r3, [pc, #100]	; (1000b96c <uart_init+0x1b8>)
1000b908:	4699      	mov	r9, r3
1000b90a:	e7a9      	b.n	1000b860 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b90c:	2100      	movs	r1, #0
1000b90e:	2028      	movs	r0, #40	; 0x28
1000b910:	682c      	ldr	r4, [r5, #0]
1000b912:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b914:	3301      	adds	r3, #1
1000b916:	071b      	lsls	r3, r3, #28
1000b918:	0f5b      	lsrs	r3, r3, #29
1000b91a:	00d2      	lsls	r2, r2, #3
1000b91c:	4313      	orrs	r3, r2
1000b91e:	b29b      	uxth	r3, r3
1000b920:	682a      	ldr	r2, [r5, #0]
1000b922:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b924:	682b      	ldr	r3, [r5, #0]
1000b926:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b928:	682b      	ldr	r3, [r5, #0]
1000b92a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b92c:	2000      	movs	r0, #0
1000b92e:	bc0c      	pop	{r2, r3}
1000b930:	4690      	mov	r8, r2
1000b932:	4699      	mov	r9, r3
1000b934:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b936:	46c0      	nop			; (mov r8, r8)
1000b938:	40004000 	.word	0x40004000
1000b93c:	1000b0e9 	.word	0x1000b0e9
1000b940:	1000aa21 	.word	0x1000aa21
1000b944:	100191fc 	.word	0x100191fc
1000b948:	1000b561 	.word	0x1000b561
1000b94c:	1000b551 	.word	0x1000b551
1000b950:	1000b5e9 	.word	0x1000b5e9
1000b954:	e000e100 	.word	0xe000e100
1000b958:	40005000 	.word	0x40005000
1000b95c:	1000b675 	.word	0x1000b675
1000b960:	1000b6fd 	.word	0x1000b6fd
1000b964:	1000aa15 	.word	0x1000aa15
1000b968:	10011ffd 	.word	0x10011ffd
1000b96c:	1000a671 	.word	0x1000a671

1000b970 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b970:	6802      	ldr	r2, [r0, #0]
1000b972:	2001      	movs	r0, #1
1000b974:	7913      	ldrb	r3, [r2, #4]
1000b976:	4203      	tst	r3, r0
1000b978:	d0fc      	beq.n	1000b974 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b97a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b97c:	2000      	movs	r0, #0
1000b97e:	4770      	bx	lr

1000b980 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b980:	6802      	ldr	r2, [r0, #0]
1000b982:	2001      	movs	r0, #1
1000b984:	7d13      	ldrb	r3, [r2, #20]
1000b986:	4203      	tst	r3, r0
1000b988:	d0fc      	beq.n	1000b984 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b98a:	7c13      	ldrb	r3, [r2, #16]
1000b98c:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b98e:	2000      	movs	r0, #0
1000b990:	4770      	bx	lr
1000b992:	46c0      	nop			; (mov r8, r8)

1000b994 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b994:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b996:	2a00      	cmp	r2, #0
1000b998:	d00d      	beq.n	1000b9b6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b99a:	330b      	adds	r3, #11
1000b99c:	5cc3      	ldrb	r3, [r0, r3]
1000b99e:	b2db      	uxtb	r3, r3
1000b9a0:	2b05      	cmp	r3, #5
1000b9a2:	d008      	beq.n	1000b9b6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b9a4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b9a6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b9a8:	2205      	movs	r2, #5
1000b9aa:	2322      	movs	r3, #34	; 0x22
1000b9ac:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b9ae:	6803      	ldr	r3, [r0, #0]
1000b9b0:	3a04      	subs	r2, #4
1000b9b2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b9b4:	2300      	movs	r3, #0
}
1000b9b6:	0018      	movs	r0, r3
1000b9b8:	4770      	bx	lr
1000b9ba:	46c0      	nop			; (mov r8, r8)

1000b9bc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b9bc:	0093      	lsls	r3, r2, #2
1000b9be:	18c3      	adds	r3, r0, r3
1000b9c0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b9c2:	2120      	movs	r1, #32
1000b9c4:	2301      	movs	r3, #1
1000b9c6:	4093      	lsls	r3, r2
1000b9c8:	5c42      	ldrb	r2, [r0, r1]
1000b9ca:	4313      	orrs	r3, r2
1000b9cc:	5443      	strb	r3, [r0, r1]
}
1000b9ce:	4770      	bx	lr

1000b9d0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b9d0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b9d2:	2221      	movs	r2, #33	; 0x21
1000b9d4:	2301      	movs	r3, #1
1000b9d6:	408b      	lsls	r3, r1
1000b9d8:	5c84      	ldrb	r4, [r0, r2]
1000b9da:	4323      	orrs	r3, r4
1000b9dc:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b9de:	2901      	cmp	r1, #1
1000b9e0:	d104      	bne.n	1000b9ec <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b9e2:	6802      	ldr	r2, [r0, #0]
1000b9e4:	7a11      	ldrb	r1, [r2, #8]
1000b9e6:	2320      	movs	r3, #32
1000b9e8:	430b      	orrs	r3, r1
1000b9ea:	7213      	strb	r3, [r2, #8]
	}
}
1000b9ec:	bd10      	pop	{r4, pc}
1000b9ee:	46c0      	nop			; (mov r8, r8)

1000b9f0 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b9f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b9f2:	2201      	movs	r2, #1
1000b9f4:	408a      	lsls	r2, r1
1000b9f6:	2421      	movs	r4, #33	; 0x21
1000b9f8:	5d03      	ldrb	r3, [r0, r4]
1000b9fa:	4393      	bics	r3, r2
1000b9fc:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b9fe:	2901      	cmp	r1, #1
1000ba00:	d104      	bne.n	1000ba0c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000ba02:	6802      	ldr	r2, [r0, #0]
1000ba04:	7a13      	ldrb	r3, [r2, #8]
1000ba06:	311f      	adds	r1, #31
1000ba08:	438b      	bics	r3, r1
1000ba0a:	7213      	strb	r3, [r2, #8]
	}

}
1000ba0c:	bd10      	pop	{r4, pc}
1000ba0e:	46c0      	nop			; (mov r8, r8)

1000ba10 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000ba10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba12:	4647      	mov	r7, r8
1000ba14:	b480      	push	{r7}
1000ba16:	000c      	movs	r4, r1
1000ba18:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000ba1a:	2800      	cmp	r0, #0
1000ba1c:	d10d      	bne.n	1000ba3a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000ba1e:	2a00      	cmp	r2, #0
1000ba20:	dd0e      	ble.n	1000ba40 <_read+0x30>
1000ba22:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000ba24:	4e08      	ldr	r6, [pc, #32]	; (1000ba48 <_read+0x38>)
1000ba26:	4d09      	ldr	r5, [pc, #36]	; (1000ba4c <_read+0x3c>)
1000ba28:	6830      	ldr	r0, [r6, #0]
1000ba2a:	0021      	movs	r1, r4
1000ba2c:	682b      	ldr	r3, [r5, #0]
1000ba2e:	4798      	blx	r3
		ptr++;
1000ba30:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000ba32:	42a7      	cmp	r7, r4
1000ba34:	d1f8      	bne.n	1000ba28 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000ba36:	4640      	mov	r0, r8
1000ba38:	e003      	b.n	1000ba42 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000ba3a:	2001      	movs	r0, #1
1000ba3c:	4240      	negs	r0, r0
1000ba3e:	e000      	b.n	1000ba42 <_read+0x32>
	}

	for (; len > 0; --len) {
1000ba40:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000ba42:	bc04      	pop	{r2}
1000ba44:	4690      	mov	r8, r2
1000ba46:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba48:	1001920c 	.word	0x1001920c
1000ba4c:	10019204 	.word	0x10019204

1000ba50 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000ba50:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ba52:	4647      	mov	r7, r8
1000ba54:	b480      	push	{r7}
1000ba56:	000e      	movs	r6, r1
1000ba58:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000ba5a:	3801      	subs	r0, #1
1000ba5c:	2802      	cmp	r0, #2
1000ba5e:	d811      	bhi.n	1000ba84 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000ba60:	2a00      	cmp	r2, #0
1000ba62:	d012      	beq.n	1000ba8a <_write+0x3a>
1000ba64:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000ba66:	4b0c      	ldr	r3, [pc, #48]	; (1000ba98 <_write+0x48>)
1000ba68:	4698      	mov	r8, r3
1000ba6a:	4f0c      	ldr	r7, [pc, #48]	; (1000ba9c <_write+0x4c>)
1000ba6c:	4643      	mov	r3, r8
1000ba6e:	6818      	ldr	r0, [r3, #0]
1000ba70:	5d31      	ldrb	r1, [r6, r4]
1000ba72:	683b      	ldr	r3, [r7, #0]
1000ba74:	4798      	blx	r3
1000ba76:	2800      	cmp	r0, #0
1000ba78:	db09      	blt.n	1000ba8e <_write+0x3e>
			return -1;
		}
		++nChars;
1000ba7a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000ba7c:	42a5      	cmp	r5, r4
1000ba7e:	d1f5      	bne.n	1000ba6c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000ba80:	0020      	movs	r0, r4
1000ba82:	e006      	b.n	1000ba92 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000ba84:	2001      	movs	r0, #1
1000ba86:	4240      	negs	r0, r0
1000ba88:	e003      	b.n	1000ba92 <_write+0x42>
	}

	for (; len != 0; --len) {
1000ba8a:	2000      	movs	r0, #0
1000ba8c:	e001      	b.n	1000ba92 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000ba8e:	2001      	movs	r0, #1
1000ba90:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000ba92:	bc04      	pop	{r2}
1000ba94:	4690      	mov	r8, r2
1000ba96:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ba98:	1001920c 	.word	0x1001920c
1000ba9c:	10019208 	.word	0x10019208

1000baa0 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000baa0:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000baa2:	4804      	ldr	r0, [pc, #16]	; (1000bab4 <ble_undefined_event_handler+0x14>)
1000baa4:	4b04      	ldr	r3, [pc, #16]	; (1000bab8 <ble_undefined_event_handler+0x18>)
1000baa6:	4798      	blx	r3
1000baa8:	4804      	ldr	r0, [pc, #16]	; (1000babc <ble_undefined_event_handler+0x1c>)
1000baaa:	4b05      	ldr	r3, [pc, #20]	; (1000bac0 <ble_undefined_event_handler+0x20>)
1000baac:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000baae:	2000      	movs	r0, #0
1000bab0:	bd10      	pop	{r4, pc}
1000bab2:	46c0      	nop			; (mov r8, r8)
1000bab4:	1001597c 	.word	0x1001597c
1000bab8:	10014a3d 	.word	0x10014a3d
1000babc:	100166c0 	.word	0x100166c0
1000bac0:	1001491d 	.word	0x1001491d

1000bac4 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000bac4:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000bac6:	7800      	ldrb	r0, [r0, #0]
1000bac8:	2800      	cmp	r0, #0
1000baca:	d006      	beq.n	1000bada <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000bacc:	4803      	ldr	r0, [pc, #12]	; (1000badc <ble_scan_report_handler+0x18>)
1000bace:	4b04      	ldr	r3, [pc, #16]	; (1000bae0 <ble_scan_report_handler+0x1c>)
1000bad0:	4798      	blx	r3
1000bad2:	4804      	ldr	r0, [pc, #16]	; (1000bae4 <ble_scan_report_handler+0x20>)
1000bad4:	4b04      	ldr	r3, [pc, #16]	; (1000bae8 <ble_scan_report_handler+0x24>)
1000bad6:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000bad8:	20e2      	movs	r0, #226	; 0xe2
}
1000bada:	bd10      	pop	{r4, pc}
1000badc:	1001597c 	.word	0x1001597c
1000bae0:	10014a3d 	.word	0x10014a3d
1000bae4:	100166dc 	.word	0x100166dc
1000bae8:	1001491d 	.word	0x1001491d

1000baec <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000baec:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000baee:	7800      	ldrb	r0, [r0, #0]
1000baf0:	2800      	cmp	r0, #0
1000baf2:	d006      	beq.n	1000bb02 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000baf4:	4803      	ldr	r0, [pc, #12]	; (1000bb04 <ble_adv_report_handler+0x18>)
1000baf6:	4b04      	ldr	r3, [pc, #16]	; (1000bb08 <ble_adv_report_handler+0x1c>)
1000baf8:	4798      	blx	r3
1000bafa:	4804      	ldr	r0, [pc, #16]	; (1000bb0c <ble_adv_report_handler+0x20>)
1000bafc:	4b04      	ldr	r3, [pc, #16]	; (1000bb10 <ble_adv_report_handler+0x24>)
1000bafe:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000bb00:	20e2      	movs	r0, #226	; 0xe2
}
1000bb02:	bd10      	pop	{r4, pc}
1000bb04:	1001597c 	.word	0x1001597c
1000bb08:	10014a3d 	.word	0x10014a3d
1000bb0c:	100166f0 	.word	0x100166f0
1000bb10:	1001491d 	.word	0x1001491d

1000bb14 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000bb14:	b510      	push	{r4, lr}
1000bb16:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000bb18:	4804      	ldr	r0, [pc, #16]	; (1000bb2c <ble_mtu_changed_indication_handler+0x18>)
1000bb1a:	4b05      	ldr	r3, [pc, #20]	; (1000bb30 <ble_mtu_changed_indication_handler+0x1c>)
1000bb1c:	4798      	blx	r3
1000bb1e:	8862      	ldrh	r2, [r4, #2]
1000bb20:	8821      	ldrh	r1, [r4, #0]
1000bb22:	4804      	ldr	r0, [pc, #16]	; (1000bb34 <ble_mtu_changed_indication_handler+0x20>)
1000bb24:	4b04      	ldr	r3, [pc, #16]	; (1000bb38 <ble_mtu_changed_indication_handler+0x24>)
1000bb26:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000bb28:	2000      	movs	r0, #0
1000bb2a:	bd10      	pop	{r4, pc}
1000bb2c:	1001597c 	.word	0x1001597c
1000bb30:	10014a3d 	.word	0x10014a3d
1000bb34:	10016704 	.word	0x10016704
1000bb38:	1001491d 	.word	0x1001491d

1000bb3c <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000bb3c:	b570      	push	{r4, r5, r6, lr}
1000bb3e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bb40:	78c5      	ldrb	r5, [r0, #3]
1000bb42:	2d00      	cmp	r5, #0
1000bb44:	d108      	bne.n	1000bb58 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000bb46:	480a      	ldr	r0, [pc, #40]	; (1000bb70 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bb48:	4b0a      	ldr	r3, [pc, #40]	; (1000bb74 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bb4a:	4798      	blx	r3
1000bb4c:	78a2      	ldrb	r2, [r4, #2]
1000bb4e:	8821      	ldrh	r1, [r4, #0]
1000bb50:	4809      	ldr	r0, [pc, #36]	; (1000bb78 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000bb52:	4b0a      	ldr	r3, [pc, #40]	; (1000bb7c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bb54:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bb56:	e008      	b.n	1000bb6a <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000bb58:	4805      	ldr	r0, [pc, #20]	; (1000bb70 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000bb5a:	4b06      	ldr	r3, [pc, #24]	; (1000bb74 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000bb5c:	4798      	blx	r3
1000bb5e:	78a2      	ldrb	r2, [r4, #2]
1000bb60:	8821      	ldrh	r1, [r4, #0]
1000bb62:	4807      	ldr	r0, [pc, #28]	; (1000bb80 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000bb64:	4b05      	ldr	r3, [pc, #20]	; (1000bb7c <ble_mtu_changed_cmd_complete_handler+0x40>)
1000bb66:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bb68:	25e2      	movs	r5, #226	; 0xe2
}
1000bb6a:	0028      	movs	r0, r5
1000bb6c:	bd70      	pop	{r4, r5, r6, pc}
1000bb6e:	46c0      	nop			; (mov r8, r8)
1000bb70:	1001597c 	.word	0x1001597c
1000bb74:	10014a3d 	.word	0x10014a3d
1000bb78:	1001673c 	.word	0x1001673c
1000bb7c:	1001491d 	.word	0x1001491d
1000bb80:	1001676c 	.word	0x1001676c

1000bb84 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000bb84:	b570      	push	{r4, r5, r6, lr}
1000bb86:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000bb88:	78c5      	ldrb	r5, [r0, #3]
1000bb8a:	2d00      	cmp	r5, #0
1000bb8c:	d108      	bne.n	1000bba0 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000bb8e:	480a      	ldr	r0, [pc, #40]	; (1000bbb8 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bb90:	4b0a      	ldr	r3, [pc, #40]	; (1000bbbc <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bb92:	4798      	blx	r3
1000bb94:	78a2      	ldrb	r2, [r4, #2]
1000bb96:	8821      	ldrh	r1, [r4, #0]
1000bb98:	4809      	ldr	r0, [pc, #36]	; (1000bbc0 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000bb9a:	4b0a      	ldr	r3, [pc, #40]	; (1000bbc4 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bb9c:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000bb9e:	e008      	b.n	1000bbb2 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000bba0:	4805      	ldr	r0, [pc, #20]	; (1000bbb8 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000bba2:	4b06      	ldr	r3, [pc, #24]	; (1000bbbc <ble_characteristic_write_cmd_complete_handler+0x38>)
1000bba4:	4798      	blx	r3
1000bba6:	78a2      	ldrb	r2, [r4, #2]
1000bba8:	8821      	ldrh	r1, [r4, #0]
1000bbaa:	4807      	ldr	r0, [pc, #28]	; (1000bbc8 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000bbac:	4b05      	ldr	r3, [pc, #20]	; (1000bbc4 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000bbae:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000bbb0:	25e2      	movs	r5, #226	; 0xe2
}
1000bbb2:	0028      	movs	r0, r5
1000bbb4:	bd70      	pop	{r4, r5, r6, pc}
1000bbb6:	46c0      	nop			; (mov r8, r8)
1000bbb8:	1001597c 	.word	0x1001597c
1000bbbc:	10014a3d 	.word	0x10014a3d
1000bbc0:	100167a4 	.word	0x100167a4
1000bbc4:	1001491d 	.word	0x1001491d
1000bbc8:	100167e0 	.word	0x100167e0

1000bbcc <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000bbcc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bbce:	0006      	movs	r6, r0
1000bbd0:	4c1d      	ldr	r4, [pc, #116]	; (1000bc48 <ble_disconnected_state_handler+0x7c>)
1000bbd2:	239b      	movs	r3, #155	; 0x9b
1000bbd4:	009b      	lsls	r3, r3, #2
1000bbd6:	18e7      	adds	r7, r4, r3
1000bbd8:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bbda:	0023      	movs	r3, r4
1000bbdc:	3b56      	subs	r3, #86	; 0x56
1000bbde:	881a      	ldrh	r2, [r3, #0]
1000bbe0:	8833      	ldrh	r3, [r6, #0]
1000bbe2:	429a      	cmp	r2, r3
1000bbe4:	d122      	bne.n	1000bc2c <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bbe6:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000bbe8:	2b05      	cmp	r3, #5
1000bbea:	d001      	beq.n	1000bbf0 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000bbec:	2b08      	cmp	r3, #8
1000bbee:	d102      	bne.n	1000bbf6 <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000bbf0:	2301      	movs	r3, #1
1000bbf2:	702b      	strb	r3, [r5, #0]
1000bbf4:	e01a      	b.n	1000bc2c <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000bbf6:	2b07      	cmp	r3, #7
1000bbf8:	d80f      	bhi.n	1000bc1a <ble_disconnected_state_handler+0x4e>
1000bbfa:	009b      	lsls	r3, r3, #2
1000bbfc:	4a13      	ldr	r2, [pc, #76]	; (1000bc4c <ble_disconnected_state_handler+0x80>)
1000bbfe:	58d3      	ldr	r3, [r2, r3]
1000bc00:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bc02:	2300      	movs	r3, #0
1000bc04:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000bc06:	4b12      	ldr	r3, [pc, #72]	; (1000bc50 <ble_disconnected_state_handler+0x84>)
1000bc08:	781b      	ldrb	r3, [r3, #0]
1000bc0a:	2b00      	cmp	r3, #0
1000bc0c:	d00e      	beq.n	1000bc2c <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000bc0e:	4a10      	ldr	r2, [pc, #64]	; (1000bc50 <ble_disconnected_state_handler+0x84>)
1000bc10:	7813      	ldrb	r3, [r2, #0]
1000bc12:	3b01      	subs	r3, #1
1000bc14:	b2db      	uxtb	r3, r3
1000bc16:	7013      	strb	r3, [r2, #0]
1000bc18:	e008      	b.n	1000bc2c <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000bc1a:	480e      	ldr	r0, [pc, #56]	; (1000bc54 <ble_disconnected_state_handler+0x88>)
1000bc1c:	4b0e      	ldr	r3, [pc, #56]	; (1000bc58 <ble_disconnected_state_handler+0x8c>)
1000bc1e:	4798      	blx	r3
1000bc20:	7829      	ldrb	r1, [r5, #0]
1000bc22:	480e      	ldr	r0, [pc, #56]	; (1000bc5c <ble_disconnected_state_handler+0x90>)
1000bc24:	4b0e      	ldr	r3, [pc, #56]	; (1000bc60 <ble_disconnected_state_handler+0x94>)
1000bc26:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000bc28:	2300      	movs	r3, #0
1000bc2a:	702b      	strb	r3, [r5, #0]
1000bc2c:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc2e:	42bc      	cmp	r4, r7
1000bc30:	d1d2      	bne.n	1000bbd8 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000bc32:	4808      	ldr	r0, [pc, #32]	; (1000bc54 <ble_disconnected_state_handler+0x88>)
1000bc34:	4b08      	ldr	r3, [pc, #32]	; (1000bc58 <ble_disconnected_state_handler+0x8c>)
1000bc36:	4798      	blx	r3
1000bc38:	8832      	ldrh	r2, [r6, #0]
1000bc3a:	78b1      	ldrb	r1, [r6, #2]
1000bc3c:	4809      	ldr	r0, [pc, #36]	; (1000bc64 <ble_disconnected_state_handler+0x98>)
1000bc3e:	4b08      	ldr	r3, [pc, #32]	; (1000bc60 <ble_disconnected_state_handler+0x94>)
1000bc40:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000bc42:	2000      	movs	r0, #0
1000bc44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bc46:	46c0      	nop			; (mov r8, r8)
1000bc48:	10019286 	.word	0x10019286
1000bc4c:	1001664c 	.word	0x1001664c
1000bc50:	10019494 	.word	0x10019494
1000bc54:	1001597c 	.word	0x1001597c
1000bc58:	10014a3d 	.word	0x10014a3d
1000bc5c:	1001681c 	.word	0x1001681c
1000bc60:	1001491d 	.word	0x1001491d
1000bc64:	10016834 	.word	0x10016834

1000bc68 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000bc68:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000bc6a:	4804      	ldr	r0, [pc, #16]	; (1000bc7c <ble_conn_param_update+0x14>)
1000bc6c:	4b04      	ldr	r3, [pc, #16]	; (1000bc80 <ble_conn_param_update+0x18>)
1000bc6e:	4798      	blx	r3
1000bc70:	4804      	ldr	r0, [pc, #16]	; (1000bc84 <ble_conn_param_update+0x1c>)
1000bc72:	4b05      	ldr	r3, [pc, #20]	; (1000bc88 <ble_conn_param_update+0x20>)
1000bc74:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000bc76:	2000      	movs	r0, #0
1000bc78:	bd10      	pop	{r4, pc}
1000bc7a:	46c0      	nop			; (mov r8, r8)
1000bc7c:	1001597c 	.word	0x1001597c
1000bc80:	10014a3d 	.word	0x10014a3d
1000bc84:	10016864 	.word	0x10016864
1000bc88:	1001491d 	.word	0x1001491d

1000bc8c <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000bc8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bc8e:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000bc90:	8801      	ldrh	r1, [r0, #0]
1000bc92:	4b28      	ldr	r3, [pc, #160]	; (1000bd34 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bc94:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000bc96:	891a      	ldrh	r2, [r3, #8]
1000bc98:	428a      	cmp	r2, r1
1000bc9a:	d104      	bne.n	1000bca6 <ble_encryption_status_change_handler+0x1a>
1000bc9c:	001a      	movs	r2, r3
1000bc9e:	325e      	adds	r2, #94	; 0x5e
1000bca0:	7812      	ldrb	r2, [r2, #0]
1000bca2:	2a06      	cmp	r2, #6
1000bca4:	d02e      	beq.n	1000bd04 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bca6:	3401      	adds	r4, #1
1000bca8:	b2e4      	uxtb	r4, r4
1000bcaa:	337c      	adds	r3, #124	; 0x7c
1000bcac:	2c05      	cmp	r4, #5
1000bcae:	d1f2      	bne.n	1000bc96 <ble_encryption_status_change_handler+0xa>
1000bcb0:	e039      	b.n	1000bd26 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000bcb2:	4920      	ldr	r1, [pc, #128]	; (1000bd34 <ble_encryption_status_change_handler+0xa8>)
1000bcb4:	0163      	lsls	r3, r4, #5
1000bcb6:	1b1a      	subs	r2, r3, r4
1000bcb8:	0092      	lsls	r2, r2, #2
1000bcba:	188a      	adds	r2, r1, r2
1000bcbc:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000bcbe:	0014      	movs	r4, r2
1000bcc0:	345e      	adds	r4, #94	; 0x5e
1000bcc2:	2307      	movs	r3, #7
1000bcc4:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000bcc6:	481c      	ldr	r0, [pc, #112]	; (1000bd38 <ble_encryption_status_change_handler+0xac>)
1000bcc8:	4b1c      	ldr	r3, [pc, #112]	; (1000bd3c <ble_encryption_status_change_handler+0xb0>)
1000bcca:	4798      	blx	r3
1000bccc:	481c      	ldr	r0, [pc, #112]	; (1000bd40 <ble_encryption_status_change_handler+0xb4>)
1000bcce:	4b1d      	ldr	r3, [pc, #116]	; (1000bd44 <ble_encryption_status_change_handler+0xb8>)
1000bcd0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bcd2:	25e2      	movs	r5, #226	; 0xe2
1000bcd4:	e02b      	b.n	1000bd2e <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000bcd6:	4818      	ldr	r0, [pc, #96]	; (1000bd38 <ble_encryption_status_change_handler+0xac>)
1000bcd8:	4b18      	ldr	r3, [pc, #96]	; (1000bd3c <ble_encryption_status_change_handler+0xb0>)
1000bcda:	4798      	blx	r3
1000bcdc:	481a      	ldr	r0, [pc, #104]	; (1000bd48 <ble_encryption_status_change_handler+0xbc>)
1000bcde:	4b19      	ldr	r3, [pc, #100]	; (1000bd44 <ble_encryption_status_change_handler+0xb8>)
1000bce0:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000bce2:	4914      	ldr	r1, [pc, #80]	; (1000bd34 <ble_encryption_status_change_handler+0xa8>)
1000bce4:	0163      	lsls	r3, r4, #5
1000bce6:	1b1a      	subs	r2, r3, r4
1000bce8:	0092      	lsls	r2, r2, #2
1000bcea:	188a      	adds	r2, r1, r2
1000bcec:	0010      	movs	r0, r2
1000bcee:	305e      	adds	r0, #94	; 0x5e
1000bcf0:	2708      	movs	r7, #8
1000bcf2:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000bcf4:	78f0      	ldrb	r0, [r6, #3]
1000bcf6:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000bcf8:	78b2      	ldrb	r2, [r6, #2]
1000bcfa:	1b1c      	subs	r4, r3, r4
1000bcfc:	00a4      	lsls	r4, r4, #2
1000bcfe:	190c      	adds	r4, r1, r4
1000bd00:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000bd02:	e014      	b.n	1000bd2e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bd04:	78b5      	ldrb	r5, [r6, #2]
1000bd06:	2d00      	cmp	r5, #0
1000bd08:	d0e5      	beq.n	1000bcd6 <ble_encryption_status_change_handler+0x4a>
1000bd0a:	e7d2      	b.n	1000bcb2 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000bd0c:	4e0a      	ldr	r6, [pc, #40]	; (1000bd38 <ble_encryption_status_change_handler+0xac>)
1000bd0e:	0030      	movs	r0, r6
1000bd10:	4d0a      	ldr	r5, [pc, #40]	; (1000bd3c <ble_encryption_status_change_handler+0xb0>)
1000bd12:	47a8      	blx	r5
1000bd14:	480c      	ldr	r0, [pc, #48]	; (1000bd48 <ble_encryption_status_change_handler+0xbc>)
1000bd16:	4c0b      	ldr	r4, [pc, #44]	; (1000bd44 <ble_encryption_status_change_handler+0xb8>)
1000bd18:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000bd1a:	0030      	movs	r0, r6
1000bd1c:	47a8      	blx	r5
1000bd1e:	480b      	ldr	r0, [pc, #44]	; (1000bd4c <ble_encryption_status_change_handler+0xc0>)
1000bd20:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bd22:	25e2      	movs	r5, #226	; 0xe2
1000bd24:	e003      	b.n	1000bd2e <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000bd26:	78b5      	ldrb	r5, [r6, #2]
1000bd28:	2d00      	cmp	r5, #0
1000bd2a:	d1c2      	bne.n	1000bcb2 <ble_encryption_status_change_handler+0x26>
1000bd2c:	e7ee      	b.n	1000bd0c <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000bd2e:	0028      	movs	r0, r5
1000bd30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bd32:	46c0      	nop			; (mov r8, r8)
1000bd34:	10019228 	.word	0x10019228
1000bd38:	1001597c 	.word	0x1001597c
1000bd3c:	10014a3d 	.word	0x10014a3d
1000bd40:	10016880 	.word	0x10016880
1000bd44:	1001491d 	.word	0x1001491d
1000bd48:	10016894 	.word	0x10016894
1000bd4c:	100168b8 	.word	0x100168b8

1000bd50 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000bd50:	b530      	push	{r4, r5, lr}
1000bd52:	b085      	sub	sp, #20
1000bd54:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000bd56:	4b1f      	ldr	r3, [pc, #124]	; (1000bdd4 <ble_scan_info_handler+0x84>)
1000bd58:	781b      	ldrb	r3, [r3, #0]
1000bd5a:	b2db      	uxtb	r3, r3
1000bd5c:	2b13      	cmp	r3, #19
1000bd5e:	d824      	bhi.n	1000bdaa <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000bd60:	4d1c      	ldr	r5, [pc, #112]	; (1000bdd4 <ble_scan_info_handler+0x84>)
1000bd62:	782b      	ldrb	r3, [r5, #0]
1000bd64:	b2db      	uxtb	r3, r3
1000bd66:	0098      	lsls	r0, r3, #2
1000bd68:	18c0      	adds	r0, r0, r3
1000bd6a:	00c0      	lsls	r0, r0, #3
1000bd6c:	18c3      	adds	r3, r0, r3
1000bd6e:	481a      	ldr	r0, [pc, #104]	; (1000bdd8 <ble_scan_info_handler+0x88>)
1000bd70:	1818      	adds	r0, r3, r0
1000bd72:	2229      	movs	r2, #41	; 0x29
1000bd74:	0021      	movs	r1, r4
1000bd76:	4b19      	ldr	r3, [pc, #100]	; (1000bddc <ble_scan_info_handler+0x8c>)
1000bd78:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000bd7a:	4819      	ldr	r0, [pc, #100]	; (1000bde0 <ble_scan_info_handler+0x90>)
1000bd7c:	4b19      	ldr	r3, [pc, #100]	; (1000bde4 <ble_scan_info_handler+0x94>)
1000bd7e:	4798      	blx	r3
1000bd80:	7829      	ldrb	r1, [r5, #0]
1000bd82:	b2c9      	uxtb	r1, r1
1000bd84:	79a3      	ldrb	r3, [r4, #6]
1000bd86:	79e2      	ldrb	r2, [r4, #7]
1000bd88:	78a0      	ldrb	r0, [r4, #2]
1000bd8a:	9003      	str	r0, [sp, #12]
1000bd8c:	78e0      	ldrb	r0, [r4, #3]
1000bd8e:	9002      	str	r0, [sp, #8]
1000bd90:	7920      	ldrb	r0, [r4, #4]
1000bd92:	9001      	str	r0, [sp, #4]
1000bd94:	7960      	ldrb	r0, [r4, #5]
1000bd96:	9000      	str	r0, [sp, #0]
1000bd98:	4813      	ldr	r0, [pc, #76]	; (1000bde8 <ble_scan_info_handler+0x98>)
1000bd9a:	4c14      	ldr	r4, [pc, #80]	; (1000bdec <ble_scan_info_handler+0x9c>)
1000bd9c:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000bd9e:	782b      	ldrb	r3, [r5, #0]
1000bda0:	3301      	adds	r3, #1
1000bda2:	b2db      	uxtb	r3, r3
1000bda4:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000bda6:	2300      	movs	r3, #0
1000bda8:	e011      	b.n	1000bdce <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000bdaa:	480d      	ldr	r0, [pc, #52]	; (1000bde0 <ble_scan_info_handler+0x90>)
1000bdac:	4b0d      	ldr	r3, [pc, #52]	; (1000bde4 <ble_scan_info_handler+0x94>)
1000bdae:	4798      	blx	r3
1000bdb0:	480f      	ldr	r0, [pc, #60]	; (1000bdf0 <ble_scan_info_handler+0xa0>)
1000bdb2:	4b0e      	ldr	r3, [pc, #56]	; (1000bdec <ble_scan_info_handler+0x9c>)
1000bdb4:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bdb6:	4b0f      	ldr	r3, [pc, #60]	; (1000bdf4 <ble_scan_info_handler+0xa4>)
1000bdb8:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bdba:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000bdbc:	2800      	cmp	r0, #0
1000bdbe:	d006      	beq.n	1000bdce <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000bdc0:	4807      	ldr	r0, [pc, #28]	; (1000bde0 <ble_scan_info_handler+0x90>)
1000bdc2:	4b08      	ldr	r3, [pc, #32]	; (1000bde4 <ble_scan_info_handler+0x94>)
1000bdc4:	4798      	blx	r3
1000bdc6:	480c      	ldr	r0, [pc, #48]	; (1000bdf8 <ble_scan_info_handler+0xa8>)
1000bdc8:	4b08      	ldr	r3, [pc, #32]	; (1000bdec <ble_scan_info_handler+0x9c>)
1000bdca:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000bdcc:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000bdce:	0018      	movs	r0, r3
1000bdd0:	b005      	add	sp, #20
1000bdd2:	bd30      	pop	{r4, r5, pc}
1000bdd4:	10017d0c 	.word	0x10017d0c
1000bdd8:	1001950c 	.word	0x1001950c
1000bddc:	100147c3 	.word	0x100147c3
1000bde0:	1001597c 	.word	0x1001597c
1000bde4:	10014a3d 	.word	0x10014a3d
1000bde8:	100168e0 	.word	0x100168e0
1000bdec:	1001491d 	.word	0x1001491d
1000bdf0:	1001691c 	.word	0x1001691c
1000bdf4:	1000e7dd 	.word	0x1000e7dd
1000bdf8:	10016954 	.word	0x10016954

1000bdfc <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000bdfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bdfe:	465f      	mov	r7, fp
1000be00:	4656      	mov	r6, sl
1000be02:	464d      	mov	r5, r9
1000be04:	4644      	mov	r4, r8
1000be06:	b4f0      	push	{r4, r5, r6, r7}
1000be08:	b083      	sub	sp, #12
1000be0a:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000be0c:	8841      	ldrh	r1, [r0, #2]
1000be0e:	4b59      	ldr	r3, [pc, #356]	; (1000bf74 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be10:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000be12:	891a      	ldrh	r2, [r3, #8]
1000be14:	428a      	cmp	r2, r1
1000be16:	d105      	bne.n	1000be24 <ble_pair_done_handler+0x28>
1000be18:	001a      	movs	r2, r3
1000be1a:	325e      	adds	r2, #94	; 0x5e
1000be1c:	7812      	ldrb	r2, [r2, #0]
1000be1e:	2a03      	cmp	r2, #3
1000be20:	d100      	bne.n	1000be24 <ble_pair_done_handler+0x28>
1000be22:	e09a      	b.n	1000bf5a <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be24:	3401      	adds	r4, #1
1000be26:	b2e4      	uxtb	r4, r4
1000be28:	337c      	adds	r3, #124	; 0x7c
1000be2a:	2c05      	cmp	r4, #5
1000be2c:	d1f1      	bne.n	1000be12 <ble_pair_done_handler+0x16>
1000be2e:	e057      	b.n	1000bee0 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000be30:	7821      	ldrb	r1, [r4, #0]
1000be32:	0030      	movs	r0, r6
1000be34:	47b8      	blx	r7
1000be36:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000be38:	454c      	cmp	r4, r9
1000be3a:	d1f9      	bne.n	1000be30 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000be3c:	484e      	ldr	r0, [pc, #312]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000be3e:	4b4f      	ldr	r3, [pc, #316]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000be40:	4798      	blx	r3
1000be42:	484f      	ldr	r0, [pc, #316]	; (1000bf80 <ble_pair_done_handler+0x184>)
1000be44:	4b4f      	ldr	r3, [pc, #316]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000be46:	4798      	blx	r3
1000be48:	002e      	movs	r6, r5
1000be4a:	3622      	adds	r6, #34	; 0x22
1000be4c:	002c      	movs	r4, r5
1000be4e:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000be50:	4f4c      	ldr	r7, [pc, #304]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000be52:	7831      	ldrb	r1, [r6, #0]
1000be54:	484c      	ldr	r0, [pc, #304]	; (1000bf88 <ble_pair_done_handler+0x18c>)
1000be56:	47b8      	blx	r7
1000be58:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000be5a:	42a6      	cmp	r6, r4
1000be5c:	d1f9      	bne.n	1000be52 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000be5e:	4846      	ldr	r0, [pc, #280]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000be60:	4b46      	ldr	r3, [pc, #280]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000be62:	4798      	blx	r3
1000be64:	4849      	ldr	r0, [pc, #292]	; (1000bf8c <ble_pair_done_handler+0x190>)
1000be66:	4b47      	ldr	r3, [pc, #284]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000be68:	4798      	blx	r3
1000be6a:	3542      	adds	r5, #66	; 0x42
1000be6c:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000be6e:	4e46      	ldr	r6, [pc, #280]	; (1000bf88 <ble_pair_done_handler+0x18c>)
1000be70:	4d44      	ldr	r5, [pc, #272]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000be72:	7821      	ldrb	r1, [r4, #0]
1000be74:	0030      	movs	r0, r6
1000be76:	47a8      	blx	r5
1000be78:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000be7a:	42bc      	cmp	r4, r7
1000be7c:	d1f9      	bne.n	1000be72 <ble_pair_done_handler+0x76>
1000be7e:	e071      	b.n	1000bf64 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000be80:	0163      	lsls	r3, r4, #5
1000be82:	1b1c      	subs	r4, r3, r4
1000be84:	00a4      	lsls	r4, r4, #2
1000be86:	4b3b      	ldr	r3, [pc, #236]	; (1000bf74 <ble_pair_done_handler+0x178>)
1000be88:	191c      	adds	r4, r3, r4
1000be8a:	345e      	adds	r4, #94	; 0x5e
1000be8c:	7823      	ldrb	r3, [r4, #0]
1000be8e:	2b01      	cmp	r3, #1
1000be90:	d915      	bls.n	1000bebe <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000be92:	4839      	ldr	r0, [pc, #228]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000be94:	4b39      	ldr	r3, [pc, #228]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000be96:	4798      	blx	r3
1000be98:	483d      	ldr	r0, [pc, #244]	; (1000bf90 <ble_pair_done_handler+0x194>)
1000be9a:	4b3a      	ldr	r3, [pc, #232]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000be9c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000be9e:	8868      	ldrh	r0, [r5, #2]
1000bea0:	2113      	movs	r1, #19
1000bea2:	4b3c      	ldr	r3, [pc, #240]	; (1000bf94 <ble_pair_done_handler+0x198>)
1000bea4:	4798      	blx	r3
1000bea6:	9001      	str	r0, [sp, #4]
1000bea8:	2800      	cmp	r0, #0
1000beaa:	d05b      	beq.n	1000bf64 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000beac:	4832      	ldr	r0, [pc, #200]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000beae:	4b33      	ldr	r3, [pc, #204]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000beb0:	4798      	blx	r3
1000beb2:	4839      	ldr	r0, [pc, #228]	; (1000bf98 <ble_pair_done_handler+0x19c>)
1000beb4:	4b33      	ldr	r3, [pc, #204]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000beb6:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000beb8:	23e2      	movs	r3, #226	; 0xe2
1000beba:	9301      	str	r3, [sp, #4]
1000bebc:	e052      	b.n	1000bf64 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000bebe:	2300      	movs	r3, #0
1000bec0:	9301      	str	r3, [sp, #4]
1000bec2:	e04f      	b.n	1000bf64 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bec4:	4e2c      	ldr	r6, [pc, #176]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000bec6:	0030      	movs	r0, r6
1000bec8:	4d2c      	ldr	r5, [pc, #176]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000beca:	47a8      	blx	r5
1000becc:	4833      	ldr	r0, [pc, #204]	; (1000bf9c <ble_pair_done_handler+0x1a0>)
1000bece:	4c2d      	ldr	r4, [pc, #180]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000bed0:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000bed2:	0030      	movs	r0, r6
1000bed4:	47a8      	blx	r5
1000bed6:	4832      	ldr	r0, [pc, #200]	; (1000bfa0 <ble_pair_done_handler+0x1a4>)
1000bed8:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000beda:	23e2      	movs	r3, #226	; 0xe2
1000bedc:	9301      	str	r3, [sp, #4]
1000bede:	e041      	b.n	1000bf64 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bee0:	792b      	ldrb	r3, [r5, #4]
1000bee2:	2b00      	cmp	r3, #0
1000bee4:	d1cc      	bne.n	1000be80 <ble_pair_done_handler+0x84>
1000bee6:	e7ed      	b.n	1000bec4 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bee8:	4823      	ldr	r0, [pc, #140]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000beea:	4b24      	ldr	r3, [pc, #144]	; (1000bf7c <ble_pair_done_handler+0x180>)
1000beec:	469b      	mov	fp, r3
1000beee:	4798      	blx	r3
1000bef0:	482a      	ldr	r0, [pc, #168]	; (1000bf9c <ble_pair_done_handler+0x1a0>)
1000bef2:	4b24      	ldr	r3, [pc, #144]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000bef4:	469a      	mov	sl, r3
1000bef6:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000bef8:	782a      	ldrb	r2, [r5, #0]
1000befa:	4b1e      	ldr	r3, [pc, #120]	; (1000bf74 <ble_pair_done_handler+0x178>)
1000befc:	4698      	mov	r8, r3
1000befe:	0167      	lsls	r7, r4, #5
1000bf00:	1b3b      	subs	r3, r7, r4
1000bf02:	009b      	lsls	r3, r3, #2
1000bf04:	4443      	add	r3, r8
1000bf06:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000bf08:	792a      	ldrb	r2, [r5, #4]
1000bf0a:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000bf0c:	335e      	adds	r3, #94	; 0x5e
1000bf0e:	2205      	movs	r2, #5
1000bf10:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000bf12:	1b38      	subs	r0, r7, r4
1000bf14:	0080      	lsls	r0, r0, #2
1000bf16:	4440      	add	r0, r8
1000bf18:	3036      	adds	r0, #54	; 0x36
1000bf1a:	320b      	adds	r2, #11
1000bf1c:	0029      	movs	r1, r5
1000bf1e:	3122      	adds	r1, #34	; 0x22
1000bf20:	4b20      	ldr	r3, [pc, #128]	; (1000bfa4 <ble_pair_done_handler+0x1a8>)
1000bf22:	4699      	mov	r9, r3
1000bf24:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000bf26:	1b38      	subs	r0, r7, r4
1000bf28:	0080      	lsls	r0, r0, #2
1000bf2a:	4440      	add	r0, r8
1000bf2c:	3046      	adds	r0, #70	; 0x46
1000bf2e:	2217      	movs	r2, #23
1000bf30:	0029      	movs	r1, r5
1000bf32:	3132      	adds	r1, #50	; 0x32
1000bf34:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000bf36:	1b38      	subs	r0, r7, r4
1000bf38:	0080      	lsls	r0, r0, #2
1000bf3a:	4440      	add	r0, r8
1000bf3c:	301a      	adds	r0, #26
1000bf3e:	1dac      	adds	r4, r5, #6
1000bf40:	221c      	movs	r2, #28
1000bf42:	0021      	movs	r1, r4
1000bf44:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000bf46:	480c      	ldr	r0, [pc, #48]	; (1000bf78 <ble_pair_done_handler+0x17c>)
1000bf48:	47d8      	blx	fp
1000bf4a:	4817      	ldr	r0, [pc, #92]	; (1000bfa8 <ble_pair_done_handler+0x1ac>)
1000bf4c:	47d0      	blx	sl
1000bf4e:	2316      	movs	r3, #22
1000bf50:	4699      	mov	r9, r3
1000bf52:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000bf54:	4e0c      	ldr	r6, [pc, #48]	; (1000bf88 <ble_pair_done_handler+0x18c>)
1000bf56:	4f0b      	ldr	r7, [pc, #44]	; (1000bf84 <ble_pair_done_handler+0x188>)
1000bf58:	e76a      	b.n	1000be30 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bf5a:	792b      	ldrb	r3, [r5, #4]
1000bf5c:	9301      	str	r3, [sp, #4]
1000bf5e:	2b00      	cmp	r3, #0
1000bf60:	d0c2      	beq.n	1000bee8 <ble_pair_done_handler+0xec>
1000bf62:	e78d      	b.n	1000be80 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000bf64:	9801      	ldr	r0, [sp, #4]
1000bf66:	b003      	add	sp, #12
1000bf68:	bc3c      	pop	{r2, r3, r4, r5}
1000bf6a:	4690      	mov	r8, r2
1000bf6c:	4699      	mov	r9, r3
1000bf6e:	46a2      	mov	sl, r4
1000bf70:	46ab      	mov	fp, r5
1000bf72:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bf74:	10019228 	.word	0x10019228
1000bf78:	1001597c 	.word	0x1001597c
1000bf7c:	10014a3d 	.word	0x10014a3d
1000bf80:	10016978 	.word	0x10016978
1000bf84:	1001491d 	.word	0x1001491d
1000bf88:	1001696c 	.word	0x1001696c
1000bf8c:	10016980 	.word	0x10016980
1000bf90:	10016988 	.word	0x10016988
1000bf94:	1000e7fd 	.word	0x1000e7fd
1000bf98:	100169a8 	.word	0x100169a8
1000bf9c:	100169c4 	.word	0x100169c4
1000bfa0:	100169f0 	.word	0x100169f0
1000bfa4:	100147c3 	.word	0x100147c3
1000bfa8:	10016a20 	.word	0x10016a20

1000bfac <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000bfac:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000bfae:	8800      	ldrh	r0, [r0, #0]
1000bfb0:	2378      	movs	r3, #120	; 0x78
1000bfb2:	2201      	movs	r2, #1
1000bfb4:	2101      	movs	r1, #1
1000bfb6:	4c02      	ldr	r4, [pc, #8]	; (1000bfc0 <ble_conn_param_update_req+0x14>)
1000bfb8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000bfba:	2000      	movs	r0, #0
1000bfbc:	bd10      	pop	{r4, pc}
1000bfbe:	46c0      	nop			; (mov r8, r8)
1000bfc0:	1000e81d 	.word	0x1000e81d

1000bfc4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000bfc4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfc6:	4657      	mov	r7, sl
1000bfc8:	464e      	mov	r6, r9
1000bfca:	4645      	mov	r5, r8
1000bfcc:	b4e0      	push	{r5, r6, r7}
1000bfce:	b084      	sub	sp, #16
1000bfd0:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000bfd2:	2209      	movs	r2, #9
1000bfd4:	2100      	movs	r1, #0
1000bfd6:	a801      	add	r0, sp, #4
1000bfd8:	4b6a      	ldr	r3, [pc, #424]	; (1000c184 <ble_slave_security_request_handler+0x1c0>)
1000bfda:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bfdc:	8825      	ldrh	r5, [r4, #0]
1000bfde:	496a      	ldr	r1, [pc, #424]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000bfe0:	000a      	movs	r2, r1
1000bfe2:	2300      	movs	r3, #0
1000bfe4:	8910      	ldrh	r0, [r2, #8]
1000bfe6:	42a8      	cmp	r0, r5
1000bfe8:	d116      	bne.n	1000c018 <ble_slave_security_request_handler+0x54>
1000bfea:	0010      	movs	r0, r2
1000bfec:	305e      	adds	r0, #94	; 0x5e
1000bfee:	7800      	ldrb	r0, [r0, #0]
1000bff0:	2802      	cmp	r0, #2
1000bff2:	d111      	bne.n	1000c018 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000bff4:	4864      	ldr	r0, [pc, #400]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000bff6:	015a      	lsls	r2, r3, #5
1000bff8:	1ad6      	subs	r6, r2, r3
1000bffa:	00b6      	lsls	r6, r6, #2
1000bffc:	1986      	adds	r6, r0, r6
1000bffe:	365e      	adds	r6, #94	; 0x5e
1000c000:	2206      	movs	r2, #6
1000c002:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c004:	32f9      	adds	r2, #249	; 0xf9
1000c006:	4013      	ands	r3, r2
1000c008:	015a      	lsls	r2, r3, #5
1000c00a:	1ad2      	subs	r2, r2, r3
1000c00c:	0092      	lsls	r2, r2, #2
1000c00e:	1882      	adds	r2, r0, r2
1000c010:	7d12      	ldrb	r2, [r2, #20]
1000c012:	07d0      	lsls	r0, r2, #31
1000c014:	d405      	bmi.n	1000c022 <ble_slave_security_request_handler+0x5e>
1000c016:	e01b      	b.n	1000c050 <ble_slave_security_request_handler+0x8c>
1000c018:	3301      	adds	r3, #1
1000c01a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c01c:	2b05      	cmp	r3, #5
1000c01e:	d1e1      	bne.n	1000bfe4 <ble_slave_security_request_handler+0x20>
1000c020:	e01e      	b.n	1000c060 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c022:	78e0      	ldrb	r0, [r4, #3]
1000c024:	2800      	cmp	r0, #0
1000c026:	d013      	beq.n	1000c050 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c028:	0159      	lsls	r1, r3, #5
1000c02a:	1ac9      	subs	r1, r1, r3
1000c02c:	008b      	lsls	r3, r1, #2
1000c02e:	4956      	ldr	r1, [pc, #344]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c030:	18c9      	adds	r1, r1, r3
1000c032:	311a      	adds	r1, #26
1000c034:	8820      	ldrh	r0, [r4, #0]
1000c036:	4b55      	ldr	r3, [pc, #340]	; (1000c18c <ble_slave_security_request_handler+0x1c8>)
1000c038:	4798      	blx	r3
1000c03a:	2800      	cmp	r0, #0
1000c03c:	d100      	bne.n	1000c040 <ble_slave_security_request_handler+0x7c>
1000c03e:	e09b      	b.n	1000c178 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c040:	4853      	ldr	r0, [pc, #332]	; (1000c190 <ble_slave_security_request_handler+0x1cc>)
1000c042:	4b54      	ldr	r3, [pc, #336]	; (1000c194 <ble_slave_security_request_handler+0x1d0>)
1000c044:	4798      	blx	r3
1000c046:	4854      	ldr	r0, [pc, #336]	; (1000c198 <ble_slave_security_request_handler+0x1d4>)
1000c048:	4b54      	ldr	r3, [pc, #336]	; (1000c19c <ble_slave_security_request_handler+0x1d8>)
1000c04a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c04c:	20e2      	movs	r0, #226	; 0xe2
1000c04e:	e093      	b.n	1000c178 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c050:	015a      	lsls	r2, r3, #5
1000c052:	1ad3      	subs	r3, r2, r3
1000c054:	009b      	lsls	r3, r3, #2
1000c056:	4a4c      	ldr	r2, [pc, #304]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c058:	18d3      	adds	r3, r2, r3
1000c05a:	335e      	adds	r3, #94	; 0x5e
1000c05c:	2202      	movs	r2, #2
1000c05e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c060:	8825      	ldrh	r5, [r4, #0]
1000c062:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c064:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c066:	0016      	movs	r6, r2
1000c068:	8908      	ldrh	r0, [r1, #8]
1000c06a:	42a8      	cmp	r0, r5
1000c06c:	d10d      	bne.n	1000c08a <ble_slave_security_request_handler+0xc6>
1000c06e:	0008      	movs	r0, r1
1000c070:	305e      	adds	r0, #94	; 0x5e
1000c072:	7800      	ldrb	r0, [r0, #0]
1000c074:	2802      	cmp	r0, #2
1000c076:	d108      	bne.n	1000c08a <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c078:	0152      	lsls	r2, r2, #5
1000c07a:	1b92      	subs	r2, r2, r6
1000c07c:	0096      	lsls	r6, r2, #2
1000c07e:	4a42      	ldr	r2, [pc, #264]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c080:	1992      	adds	r2, r2, r6
1000c082:	325e      	adds	r2, #94	; 0x5e
1000c084:	2103      	movs	r1, #3
1000c086:	7011      	strb	r1, [r2, #0]
			break;
1000c088:	e005      	b.n	1000c096 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c08a:	3301      	adds	r3, #1
1000c08c:	b2db      	uxtb	r3, r3
1000c08e:	3201      	adds	r2, #1
1000c090:	317c      	adds	r1, #124	; 0x7c
1000c092:	2b05      	cmp	r3, #5
1000c094:	d1e7      	bne.n	1000c066 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c096:	aa01      	add	r2, sp, #4
1000c098:	78e1      	ldrb	r1, [r4, #3]
1000c09a:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c09c:	2101      	movs	r1, #1
1000c09e:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c0a0:	3103      	adds	r1, #3
1000c0a2:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c0a4:	001f      	movs	r7, r3
1000c0a6:	015a      	lsls	r2, r3, #5
1000c0a8:	1ad2      	subs	r2, r2, r3
1000c0aa:	0092      	lsls	r2, r2, #2
1000c0ac:	4936      	ldr	r1, [pc, #216]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c0ae:	5c52      	ldrb	r2, [r2, r1]
1000c0b0:	2a02      	cmp	r2, #2
1000c0b2:	d104      	bne.n	1000c0be <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c0b4:	aa01      	add	r2, sp, #4
1000c0b6:	2103      	movs	r1, #3
1000c0b8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c0ba:	71d1      	strb	r1, [r2, #7]
1000c0bc:	e003      	b.n	1000c0c6 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c0be:	aa01      	add	r2, sp, #4
1000c0c0:	2101      	movs	r1, #1
1000c0c2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c0c4:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c0c6:	aa01      	add	r2, sp, #4
1000c0c8:	2110      	movs	r1, #16
1000c0ca:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c0cc:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c0ce:	017a      	lsls	r2, r7, #5
1000c0d0:	1bd2      	subs	r2, r2, r7
1000c0d2:	0092      	lsls	r2, r2, #2
1000c0d4:	492c      	ldr	r1, [pc, #176]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c0d6:	188a      	adds	r2, r1, r2
1000c0d8:	7e12      	ldrb	r2, [r2, #24]
1000c0da:	2a40      	cmp	r2, #64	; 0x40
1000c0dc:	d134      	bne.n	1000c148 <ble_slave_security_request_handler+0x184>
1000c0de:	015a      	lsls	r2, r3, #5
1000c0e0:	1ad3      	subs	r3, r2, r3
1000c0e2:	009b      	lsls	r3, r3, #2
1000c0e4:	469a      	mov	sl, r3
1000c0e6:	001e      	movs	r6, r3
1000c0e8:	3660      	adds	r6, #96	; 0x60
1000c0ea:	1876      	adds	r6, r6, r1
1000c0ec:	4655      	mov	r5, sl
1000c0ee:	3568      	adds	r5, #104	; 0x68
1000c0f0:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c0f2:	4b2b      	ldr	r3, [pc, #172]	; (1000c1a0 <ble_slave_security_request_handler+0x1dc>)
1000c0f4:	4699      	mov	r9, r3
1000c0f6:	230f      	movs	r3, #15
1000c0f8:	4698      	mov	r8, r3
1000c0fa:	47c8      	blx	r9
1000c0fc:	4643      	mov	r3, r8
1000c0fe:	4018      	ands	r0, r3
1000c100:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c102:	47c8      	blx	r9
1000c104:	4643      	mov	r3, r8
1000c106:	4018      	ands	r0, r3
1000c108:	74b0      	strb	r0, [r6, #18]
1000c10a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c10c:	42ae      	cmp	r6, r5
1000c10e:	d1f4      	bne.n	1000c0fa <ble_slave_security_request_handler+0x136>
1000c110:	4656      	mov	r6, sl
1000c112:	3670      	adds	r6, #112	; 0x70
1000c114:	4a1c      	ldr	r2, [pc, #112]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c116:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c118:	4b21      	ldr	r3, [pc, #132]	; (1000c1a0 <ble_slave_security_request_handler+0x1dc>)
1000c11a:	4699      	mov	r9, r3
1000c11c:	230f      	movs	r3, #15
1000c11e:	4698      	mov	r8, r3
1000c120:	47c8      	blx	r9
1000c122:	4643      	mov	r3, r8
1000c124:	4018      	ands	r0, r3
1000c126:	7028      	strb	r0, [r5, #0]
1000c128:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c12a:	42b5      	cmp	r5, r6
1000c12c:	d1f8      	bne.n	1000c120 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c12e:	4b1c      	ldr	r3, [pc, #112]	; (1000c1a0 <ble_slave_security_request_handler+0x1dc>)
1000c130:	4798      	blx	r3
1000c132:	017b      	lsls	r3, r7, #5
1000c134:	1bdb      	subs	r3, r3, r7
1000c136:	009b      	lsls	r3, r3, #2
1000c138:	4a13      	ldr	r2, [pc, #76]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c13a:	18d3      	adds	r3, r2, r3
1000c13c:	001a      	movs	r2, r3
1000c13e:	3270      	adds	r2, #112	; 0x70
1000c140:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c142:	337a      	adds	r3, #122	; 0x7a
1000c144:	2210      	movs	r2, #16
1000c146:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c148:	017a      	lsls	r2, r7, #5
1000c14a:	1bd7      	subs	r7, r2, r7
1000c14c:	00bf      	lsls	r7, r7, #2
1000c14e:	3760      	adds	r7, #96	; 0x60
1000c150:	4a0d      	ldr	r2, [pc, #52]	; (1000c188 <ble_slave_security_request_handler+0x1c4>)
1000c152:	18ba      	adds	r2, r7, r2
1000c154:	8820      	ldrh	r0, [r4, #0]
1000c156:	2300      	movs	r3, #0
1000c158:	a901      	add	r1, sp, #4
1000c15a:	4c12      	ldr	r4, [pc, #72]	; (1000c1a4 <ble_slave_security_request_handler+0x1e0>)
1000c15c:	47a0      	blx	r4
1000c15e:	2800      	cmp	r0, #0
1000c160:	d00a      	beq.n	1000c178 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c162:	ab01      	add	r3, sp, #4
1000c164:	2200      	movs	r2, #0
1000c166:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c168:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c16a:	4809      	ldr	r0, [pc, #36]	; (1000c190 <ble_slave_security_request_handler+0x1cc>)
1000c16c:	4b09      	ldr	r3, [pc, #36]	; (1000c194 <ble_slave_security_request_handler+0x1d0>)
1000c16e:	4798      	blx	r3
1000c170:	480d      	ldr	r0, [pc, #52]	; (1000c1a8 <ble_slave_security_request_handler+0x1e4>)
1000c172:	4b0a      	ldr	r3, [pc, #40]	; (1000c19c <ble_slave_security_request_handler+0x1d8>)
1000c174:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c176:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c178:	b004      	add	sp, #16
1000c17a:	bc1c      	pop	{r2, r3, r4}
1000c17c:	4690      	mov	r8, r2
1000c17e:	4699      	mov	r9, r3
1000c180:	46a2      	mov	sl, r4
1000c182:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c184:	100147d5 	.word	0x100147d5
1000c188:	10019228 	.word	0x10019228
1000c18c:	1000f36d 	.word	0x1000f36d
1000c190:	1001597c 	.word	0x1001597c
1000c194:	10014a3d 	.word	0x10014a3d
1000c198:	10016a28 	.word	0x10016a28
1000c19c:	1001491d 	.word	0x1001491d
1000c1a0:	10014a51 	.word	0x10014a51
1000c1a4:	1000f181 	.word	0x1000f181
1000c1a8:	10016a40 	.word	0x10016a40

1000c1ac <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c1ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c1ae:	465f      	mov	r7, fp
1000c1b0:	4656      	mov	r6, sl
1000c1b2:	464d      	mov	r5, r9
1000c1b4:	4644      	mov	r4, r8
1000c1b6:	b4f0      	push	{r4, r5, r6, r7}
1000c1b8:	b085      	sub	sp, #20
1000c1ba:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c1bc:	8804      	ldrh	r4, [r0, #0]
1000c1be:	4a54      	ldr	r2, [pc, #336]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c1c0:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1c2:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c1c4:	8910      	ldrh	r0, [r2, #8]
1000c1c6:	42a0      	cmp	r0, r4
1000c1c8:	d10d      	bne.n	1000c1e6 <ble_pair_request_handler+0x3a>
1000c1ca:	0010      	movs	r0, r2
1000c1cc:	305e      	adds	r0, #94	; 0x5e
1000c1ce:	7800      	ldrb	r0, [r0, #0]
1000c1d0:	2802      	cmp	r0, #2
1000c1d2:	d108      	bne.n	1000c1e6 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c1d4:	014a      	lsls	r2, r1, #5
1000c1d6:	1a52      	subs	r2, r2, r1
1000c1d8:	0095      	lsls	r5, r2, #2
1000c1da:	4a4d      	ldr	r2, [pc, #308]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c1dc:	1952      	adds	r2, r2, r5
1000c1de:	325e      	adds	r2, #94	; 0x5e
1000c1e0:	2103      	movs	r1, #3
1000c1e2:	7011      	strb	r1, [r2, #0]
			break;
1000c1e4:	e005      	b.n	1000c1f2 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1e6:	3301      	adds	r3, #1
1000c1e8:	b2db      	uxtb	r3, r3
1000c1ea:	3101      	adds	r1, #1
1000c1ec:	327c      	adds	r2, #124	; 0x7c
1000c1ee:	2b05      	cmp	r3, #5
1000c1f0:	d1e8      	bne.n	1000c1c4 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c1f2:	aa01      	add	r2, sp, #4
1000c1f4:	2100      	movs	r1, #0
1000c1f6:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c1f8:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c1fa:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c1fc:	2003      	movs	r0, #3
1000c1fe:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c200:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c202:	001e      	movs	r6, r3
1000c204:	015a      	lsls	r2, r3, #5
1000c206:	1ad2      	subs	r2, r2, r3
1000c208:	0092      	lsls	r2, r2, #2
1000c20a:	4941      	ldr	r1, [pc, #260]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c20c:	5c52      	ldrb	r2, [r2, r1]
1000c20e:	2a02      	cmp	r2, #2
1000c210:	d104      	bne.n	1000c21c <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c212:	aa01      	add	r2, sp, #4
1000c214:	2103      	movs	r1, #3
1000c216:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c218:	71d1      	strb	r1, [r2, #7]
1000c21a:	e003      	b.n	1000c224 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c21c:	aa01      	add	r2, sp, #4
1000c21e:	2101      	movs	r1, #1
1000c220:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c222:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c224:	aa01      	add	r2, sp, #4
1000c226:	2110      	movs	r1, #16
1000c228:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c22a:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c22c:	0172      	lsls	r2, r6, #5
1000c22e:	1b92      	subs	r2, r2, r6
1000c230:	0092      	lsls	r2, r2, #2
1000c232:	4937      	ldr	r1, [pc, #220]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c234:	188a      	adds	r2, r1, r2
1000c236:	7e12      	ldrb	r2, [r2, #24]
1000c238:	2a40      	cmp	r2, #64	; 0x40
1000c23a:	d142      	bne.n	1000c2c2 <ble_pair_request_handler+0x116>
1000c23c:	015f      	lsls	r7, r3, #5
1000c23e:	1afb      	subs	r3, r7, r3
1000c240:	009b      	lsls	r3, r3, #2
1000c242:	469b      	mov	fp, r3
1000c244:	001c      	movs	r4, r3
1000c246:	3460      	adds	r4, #96	; 0x60
1000c248:	1864      	adds	r4, r4, r1
1000c24a:	465d      	mov	r5, fp
1000c24c:	3568      	adds	r5, #104	; 0x68
1000c24e:	186d      	adds	r5, r5, r1
1000c250:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c252:	4b30      	ldr	r3, [pc, #192]	; (1000c314 <ble_pair_request_handler+0x168>)
1000c254:	469a      	mov	sl, r3
1000c256:	230f      	movs	r3, #15
1000c258:	4699      	mov	r9, r3
1000c25a:	47d0      	blx	sl
1000c25c:	464b      	mov	r3, r9
1000c25e:	4018      	ands	r0, r3
1000c260:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c262:	47d0      	blx	sl
1000c264:	464b      	mov	r3, r9
1000c266:	4018      	ands	r0, r3
1000c268:	74b8      	strb	r0, [r7, #18]
1000c26a:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c26c:	42af      	cmp	r7, r5
1000c26e:	d1f4      	bne.n	1000c25a <ble_pair_request_handler+0xae>
1000c270:	465b      	mov	r3, fp
1000c272:	3370      	adds	r3, #112	; 0x70
1000c274:	4f26      	ldr	r7, [pc, #152]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c276:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c278:	4b26      	ldr	r3, [pc, #152]	; (1000c314 <ble_pair_request_handler+0x168>)
1000c27a:	469a      	mov	sl, r3
1000c27c:	230f      	movs	r3, #15
1000c27e:	4699      	mov	r9, r3
1000c280:	47d0      	blx	sl
1000c282:	464b      	mov	r3, r9
1000c284:	4018      	ands	r0, r3
1000c286:	7028      	strb	r0, [r5, #0]
1000c288:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c28a:	42bd      	cmp	r5, r7
1000c28c:	d1f8      	bne.n	1000c280 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c28e:	4822      	ldr	r0, [pc, #136]	; (1000c318 <ble_pair_request_handler+0x16c>)
1000c290:	4b22      	ldr	r3, [pc, #136]	; (1000c31c <ble_pair_request_handler+0x170>)
1000c292:	4798      	blx	r3
1000c294:	4822      	ldr	r0, [pc, #136]	; (1000c320 <ble_pair_request_handler+0x174>)
1000c296:	4b23      	ldr	r3, [pc, #140]	; (1000c324 <ble_pair_request_handler+0x178>)
1000c298:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c29a:	4d22      	ldr	r5, [pc, #136]	; (1000c324 <ble_pair_request_handler+0x178>)
1000c29c:	7821      	ldrb	r1, [r4, #0]
1000c29e:	4822      	ldr	r0, [pc, #136]	; (1000c328 <ble_pair_request_handler+0x17c>)
1000c2a0:	47a8      	blx	r5
1000c2a2:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c2a4:	42bc      	cmp	r4, r7
1000c2a6:	d1f9      	bne.n	1000c29c <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c2a8:	4b1a      	ldr	r3, [pc, #104]	; (1000c314 <ble_pair_request_handler+0x168>)
1000c2aa:	4798      	blx	r3
1000c2ac:	0173      	lsls	r3, r6, #5
1000c2ae:	1b9b      	subs	r3, r3, r6
1000c2b0:	009b      	lsls	r3, r3, #2
1000c2b2:	4a17      	ldr	r2, [pc, #92]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c2b4:	18d3      	adds	r3, r2, r3
1000c2b6:	001a      	movs	r2, r3
1000c2b8:	3270      	adds	r2, #112	; 0x70
1000c2ba:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c2bc:	337a      	adds	r3, #122	; 0x7a
1000c2be:	2210      	movs	r2, #16
1000c2c0:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c2c2:	4815      	ldr	r0, [pc, #84]	; (1000c318 <ble_pair_request_handler+0x16c>)
1000c2c4:	4b15      	ldr	r3, [pc, #84]	; (1000c31c <ble_pair_request_handler+0x170>)
1000c2c6:	4798      	blx	r3
1000c2c8:	4818      	ldr	r0, [pc, #96]	; (1000c32c <ble_pair_request_handler+0x180>)
1000c2ca:	4b16      	ldr	r3, [pc, #88]	; (1000c324 <ble_pair_request_handler+0x178>)
1000c2cc:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c2ce:	0173      	lsls	r3, r6, #5
1000c2d0:	1b9b      	subs	r3, r3, r6
1000c2d2:	009b      	lsls	r3, r3, #2
1000c2d4:	3360      	adds	r3, #96	; 0x60
1000c2d6:	4a0e      	ldr	r2, [pc, #56]	; (1000c310 <ble_pair_request_handler+0x164>)
1000c2d8:	189a      	adds	r2, r3, r2
1000c2da:	4643      	mov	r3, r8
1000c2dc:	8818      	ldrh	r0, [r3, #0]
1000c2de:	2300      	movs	r3, #0
1000c2e0:	a901      	add	r1, sp, #4
1000c2e2:	4c13      	ldr	r4, [pc, #76]	; (1000c330 <ble_pair_request_handler+0x184>)
1000c2e4:	47a0      	blx	r4
1000c2e6:	2800      	cmp	r0, #0
1000c2e8:	d00a      	beq.n	1000c300 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c2ea:	ab01      	add	r3, sp, #4
1000c2ec:	2200      	movs	r2, #0
1000c2ee:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c2f0:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c2f2:	4809      	ldr	r0, [pc, #36]	; (1000c318 <ble_pair_request_handler+0x16c>)
1000c2f4:	4b09      	ldr	r3, [pc, #36]	; (1000c31c <ble_pair_request_handler+0x170>)
1000c2f6:	4798      	blx	r3
1000c2f8:	480e      	ldr	r0, [pc, #56]	; (1000c334 <ble_pair_request_handler+0x188>)
1000c2fa:	4b0a      	ldr	r3, [pc, #40]	; (1000c324 <ble_pair_request_handler+0x178>)
1000c2fc:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c2fe:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c300:	b005      	add	sp, #20
1000c302:	bc3c      	pop	{r2, r3, r4, r5}
1000c304:	4690      	mov	r8, r2
1000c306:	4699      	mov	r9, r3
1000c308:	46a2      	mov	sl, r4
1000c30a:	46ab      	mov	fp, r5
1000c30c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c30e:	46c0      	nop			; (mov r8, r8)
1000c310:	10019228 	.word	0x10019228
1000c314:	10014a51 	.word	0x10014a51
1000c318:	1001597c 	.word	0x1001597c
1000c31c:	10014a3d 	.word	0x10014a3d
1000c320:	10016a6c 	.word	0x10016a6c
1000c324:	1001491d 	.word	0x1001491d
1000c328:	10016a7c 	.word	0x10016a7c
1000c32c:	10016a84 	.word	0x10016a84
1000c330:	1000f181 	.word	0x1000f181
1000c334:	10016aa0 	.word	0x10016aa0

1000c338 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c338:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c33a:	b085      	sub	sp, #20
1000c33c:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c33e:	2206      	movs	r2, #6
1000c340:	493d      	ldr	r1, [pc, #244]	; (1000c438 <ble_pair_key_request_handler+0x100>)
1000c342:	a802      	add	r0, sp, #8
1000c344:	4e3d      	ldr	r6, [pc, #244]	; (1000c43c <ble_pair_key_request_handler+0x104>)
1000c346:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c348:	ac01      	add	r4, sp, #4
1000c34a:	2204      	movs	r2, #4
1000c34c:	0029      	movs	r1, r5
1000c34e:	0020      	movs	r0, r4
1000c350:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c352:	78e3      	ldrb	r3, [r4, #3]
1000c354:	2b00      	cmp	r3, #0
1000c356:	d162      	bne.n	1000c41e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c358:	4839      	ldr	r0, [pc, #228]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c35a:	4b3a      	ldr	r3, [pc, #232]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c35c:	4798      	blx	r3
1000c35e:	483a      	ldr	r0, [pc, #232]	; (1000c448 <ble_pair_key_request_handler+0x110>)
1000c360:	4b3a      	ldr	r3, [pc, #232]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c362:	4798      	blx	r3
1000c364:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c366:	4c3a      	ldr	r4, [pc, #232]	; (1000c450 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c368:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c36a:	201e      	movs	r0, #30
1000c36c:	47a0      	blx	r4
1000c36e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c370:	2b00      	cmp	r3, #0
1000c372:	d11a      	bne.n	1000c3aa <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c374:	4f32      	ldr	r7, [pc, #200]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c376:	0038      	movs	r0, r7
1000c378:	4e32      	ldr	r6, [pc, #200]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c37a:	47b0      	blx	r6
1000c37c:	4835      	ldr	r0, [pc, #212]	; (1000c454 <ble_pair_key_request_handler+0x11c>)
1000c37e:	4c33      	ldr	r4, [pc, #204]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c380:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c382:	0038      	movs	r0, r7
1000c384:	47b0      	blx	r6
1000c386:	4834      	ldr	r0, [pc, #208]	; (1000c458 <ble_pair_key_request_handler+0x120>)
1000c388:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c38a:	8828      	ldrh	r0, [r5, #0]
1000c38c:	2113      	movs	r1, #19
1000c38e:	4b33      	ldr	r3, [pc, #204]	; (1000c45c <ble_pair_key_request_handler+0x124>)
1000c390:	4798      	blx	r3
1000c392:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c394:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c396:	2b00      	cmp	r3, #0
1000c398:	d04c      	beq.n	1000c434 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c39a:	4829      	ldr	r0, [pc, #164]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c39c:	4b29      	ldr	r3, [pc, #164]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c39e:	4798      	blx	r3
1000c3a0:	482f      	ldr	r0, [pc, #188]	; (1000c460 <ble_pair_key_request_handler+0x128>)
1000c3a2:	4b2a      	ldr	r3, [pc, #168]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c3a4:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c3a6:	20e2      	movs	r0, #226	; 0xe2
1000c3a8:	e044      	b.n	1000c434 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c3aa:	001a      	movs	r2, r3
1000c3ac:	3a30      	subs	r2, #48	; 0x30
1000c3ae:	2a09      	cmp	r2, #9
1000c3b0:	d8db      	bhi.n	1000c36a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c3b2:	aa02      	add	r2, sp, #8
1000c3b4:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c3b6:	4038      	ands	r0, r7
1000c3b8:	4b2a      	ldr	r3, [pc, #168]	; (1000c464 <ble_pair_key_request_handler+0x12c>)
1000c3ba:	4798      	blx	r3
1000c3bc:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c3be:	2e06      	cmp	r6, #6
1000c3c0:	d026      	beq.n	1000c410 <ble_pair_key_request_handler+0xd8>
1000c3c2:	e7d2      	b.n	1000c36a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c3c4:	481e      	ldr	r0, [pc, #120]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c3c6:	4b1f      	ldr	r3, [pc, #124]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c3c8:	4798      	blx	r3
1000c3ca:	4827      	ldr	r0, [pc, #156]	; (1000c468 <ble_pair_key_request_handler+0x130>)
1000c3cc:	4b1f      	ldr	r3, [pc, #124]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c3ce:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c3d0:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c3d2:	4e24      	ldr	r6, [pc, #144]	; (1000c464 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c3d4:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c3d6:	5ce0      	ldrb	r0, [r4, r3]
1000c3d8:	47b0      	blx	r6
1000c3da:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c3dc:	2c06      	cmp	r4, #6
1000c3de:	d1f9      	bne.n	1000c3d4 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c3e0:	ab01      	add	r3, sp, #4
1000c3e2:	7899      	ldrb	r1, [r3, #2]
1000c3e4:	8828      	ldrh	r0, [r5, #0]
1000c3e6:	aa02      	add	r2, sp, #8
1000c3e8:	4b20      	ldr	r3, [pc, #128]	; (1000c46c <ble_pair_key_request_handler+0x134>)
1000c3ea:	4798      	blx	r3
1000c3ec:	2800      	cmp	r0, #0
1000c3ee:	d021      	beq.n	1000c434 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c3f0:	4813      	ldr	r0, [pc, #76]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c3f2:	4b14      	ldr	r3, [pc, #80]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c3f4:	4798      	blx	r3
1000c3f6:	481e      	ldr	r0, [pc, #120]	; (1000c470 <ble_pair_key_request_handler+0x138>)
1000c3f8:	4b14      	ldr	r3, [pc, #80]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c3fa:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c3fc:	2000      	movs	r0, #0
1000c3fe:	e019      	b.n	1000c434 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c400:	480f      	ldr	r0, [pc, #60]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c402:	4b10      	ldr	r3, [pc, #64]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c404:	4798      	blx	r3
1000c406:	481b      	ldr	r0, [pc, #108]	; (1000c474 <ble_pair_key_request_handler+0x13c>)
1000c408:	4b10      	ldr	r3, [pc, #64]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c40a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c40c:	2000      	movs	r0, #0
1000c40e:	e011      	b.n	1000c434 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c410:	480b      	ldr	r0, [pc, #44]	; (1000c440 <ble_pair_key_request_handler+0x108>)
1000c412:	4b0c      	ldr	r3, [pc, #48]	; (1000c444 <ble_pair_key_request_handler+0x10c>)
1000c414:	4798      	blx	r3
1000c416:	4818      	ldr	r0, [pc, #96]	; (1000c478 <ble_pair_key_request_handler+0x140>)
1000c418:	4b0c      	ldr	r3, [pc, #48]	; (1000c44c <ble_pair_key_request_handler+0x114>)
1000c41a:	4798      	blx	r3
1000c41c:	e7d8      	b.n	1000c3d0 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c41e:	ab01      	add	r3, sp, #4
1000c420:	885a      	ldrh	r2, [r3, #2]
1000c422:	2380      	movs	r3, #128	; 0x80
1000c424:	005b      	lsls	r3, r3, #1
1000c426:	429a      	cmp	r2, r3
1000c428:	d0cc      	beq.n	1000c3c4 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c42a:	ab01      	add	r3, sp, #4
1000c42c:	789b      	ldrb	r3, [r3, #2]
1000c42e:	2b01      	cmp	r3, #1
1000c430:	d0e6      	beq.n	1000c400 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c432:	2000      	movs	r0, #0
}
1000c434:	b005      	add	sp, #20
1000c436:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c438:	10016688 	.word	0x10016688
1000c43c:	100147c3 	.word	0x100147c3
1000c440:	1001597c 	.word	0x1001597c
1000c444:	10014a3d 	.word	0x10014a3d
1000c448:	10016ac8 	.word	0x10016ac8
1000c44c:	1001491d 	.word	0x1001491d
1000c450:	1000cf99 	.word	0x1000cf99
1000c454:	10016af0 	.word	0x10016af0
1000c458:	10016afc 	.word	0x10016afc
1000c45c:	1000e7fd 	.word	0x1000e7fd
1000c460:	100169a8 	.word	0x100169a8
1000c464:	10014951 	.word	0x10014951
1000c468:	10016b10 	.word	0x10016b10
1000c46c:	1000f2b1 	.word	0x1000f2b1
1000c470:	10016b48 	.word	0x10016b48
1000c474:	10016b60 	.word	0x10016b60
1000c478:	10016b7c 	.word	0x10016b7c

1000c47c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c47c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c47e:	465f      	mov	r7, fp
1000c480:	4656      	mov	r6, sl
1000c482:	464d      	mov	r5, r9
1000c484:	b4e0      	push	{r5, r6, r7}
1000c486:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c488:	8800      	ldrh	r0, [r0, #0]
1000c48a:	4b49      	ldr	r3, [pc, #292]	; (1000c5b0 <ble_encryption_request_handler+0x134>)
1000c48c:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c48e:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c490:	8919      	ldrh	r1, [r3, #8]
1000c492:	4281      	cmp	r1, r0
1000c494:	d137      	bne.n	1000c506 <ble_encryption_request_handler+0x8a>
1000c496:	0019      	movs	r1, r3
1000c498:	315e      	adds	r1, #94	; 0x5e
1000c49a:	7809      	ldrb	r1, [r1, #0]
1000c49c:	2901      	cmp	r1, #1
1000c49e:	d932      	bls.n	1000c506 <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c4a0:	4f43      	ldr	r7, [pc, #268]	; (1000c5b0 <ble_encryption_request_handler+0x134>)
1000c4a2:	0153      	lsls	r3, r2, #5
1000c4a4:	1a9d      	subs	r5, r3, r2
1000c4a6:	00ad      	lsls	r5, r5, #2
1000c4a8:	197d      	adds	r5, r7, r5
1000c4aa:	355e      	adds	r5, #94	; 0x5e
1000c4ac:	2306      	movs	r3, #6
1000c4ae:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000c4b0:	4840      	ldr	r0, [pc, #256]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c4b2:	4b41      	ldr	r3, [pc, #260]	; (1000c5b8 <ble_encryption_request_handler+0x13c>)
1000c4b4:	469a      	mov	sl, r3
1000c4b6:	4798      	blx	r3
1000c4b8:	8831      	ldrh	r1, [r6, #0]
1000c4ba:	4840      	ldr	r0, [pc, #256]	; (1000c5bc <ble_encryption_request_handler+0x140>)
1000c4bc:	4b40      	ldr	r3, [pc, #256]	; (1000c5c0 <ble_encryption_request_handler+0x144>)
1000c4be:	4699      	mov	r9, r3
1000c4c0:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000c4c2:	483c      	ldr	r0, [pc, #240]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c4c4:	47d0      	blx	sl
1000c4c6:	0163      	lsls	r3, r4, #5
1000c4c8:	1b1b      	subs	r3, r3, r4
1000c4ca:	009b      	lsls	r3, r3, #2
1000c4cc:	18ff      	adds	r7, r7, r3
1000c4ce:	2370      	movs	r3, #112	; 0x70
1000c4d0:	469b      	mov	fp, r3
1000c4d2:	44bb      	add	fp, r7
1000c4d4:	465b      	mov	r3, fp
1000c4d6:	8819      	ldrh	r1, [r3, #0]
1000c4d8:	483a      	ldr	r0, [pc, #232]	; (1000c5c4 <ble_encryption_request_handler+0x148>)
1000c4da:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000c4dc:	4835      	ldr	r0, [pc, #212]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c4de:	47d0      	blx	sl
1000c4e0:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000c4e2:	4839      	ldr	r0, [pc, #228]	; (1000c5c8 <ble_encryption_request_handler+0x14c>)
1000c4e4:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000c4e6:	4833      	ldr	r0, [pc, #204]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c4e8:	47d0      	blx	sl
1000c4ea:	8871      	ldrh	r1, [r6, #2]
1000c4ec:	4837      	ldr	r0, [pc, #220]	; (1000c5cc <ble_encryption_request_handler+0x150>)
1000c4ee:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000c4f0:	4830      	ldr	r0, [pc, #192]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c4f2:	47d0      	blx	sl
1000c4f4:	0021      	movs	r1, r4
1000c4f6:	4836      	ldr	r0, [pc, #216]	; (1000c5d0 <ble_encryption_request_handler+0x154>)
1000c4f8:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c4fa:	465b      	mov	r3, fp
1000c4fc:	881a      	ldrh	r2, [r3, #0]
1000c4fe:	8873      	ldrh	r3, [r6, #2]
1000c500:	429a      	cmp	r2, r3
1000c502:	d12a      	bne.n	1000c55a <ble_encryption_request_handler+0xde>
1000c504:	e006      	b.n	1000c514 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c506:	3401      	adds	r4, #1
1000c508:	b2e4      	uxtb	r4, r4
1000c50a:	3201      	adds	r2, #1
1000c50c:	337c      	adds	r3, #124	; 0x7c
1000c50e:	2c05      	cmp	r4, #5
1000c510:	d1be      	bne.n	1000c490 <ble_encryption_request_handler+0x14>
1000c512:	e022      	b.n	1000c55a <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c514:	0161      	lsls	r1, r4, #5
1000c516:	1b09      	subs	r1, r1, r4
1000c518:	0089      	lsls	r1, r1, #2
1000c51a:	4b25      	ldr	r3, [pc, #148]	; (1000c5b0 <ble_encryption_request_handler+0x134>)
1000c51c:	1859      	adds	r1, r3, r1
1000c51e:	3172      	adds	r1, #114	; 0x72
1000c520:	1d30      	adds	r0, r6, #4
1000c522:	2208      	movs	r2, #8
1000c524:	4b2b      	ldr	r3, [pc, #172]	; (1000c5d4 <ble_encryption_request_handler+0x158>)
1000c526:	4798      	blx	r3
1000c528:	2800      	cmp	r0, #0
1000c52a:	d116      	bne.n	1000c55a <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000c52c:	4821      	ldr	r0, [pc, #132]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c52e:	4b22      	ldr	r3, [pc, #136]	; (1000c5b8 <ble_encryption_request_handler+0x13c>)
1000c530:	4798      	blx	r3
1000c532:	4829      	ldr	r0, [pc, #164]	; (1000c5d8 <ble_encryption_request_handler+0x15c>)
1000c534:	4b22      	ldr	r3, [pc, #136]	; (1000c5c0 <ble_encryption_request_handler+0x144>)
1000c536:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c538:	0162      	lsls	r2, r4, #5
1000c53a:	1b13      	subs	r3, r2, r4
1000c53c:	009b      	lsls	r3, r3, #2
1000c53e:	3360      	adds	r3, #96	; 0x60
1000c540:	491b      	ldr	r1, [pc, #108]	; (1000c5b0 <ble_encryption_request_handler+0x134>)
1000c542:	185b      	adds	r3, r3, r1
1000c544:	1b12      	subs	r2, r2, r4
1000c546:	0092      	lsls	r2, r2, #2
1000c548:	188a      	adds	r2, r1, r2
1000c54a:	7d11      	ldrb	r1, [r2, #20]
1000c54c:	8830      	ldrh	r0, [r6, #0]
1000c54e:	2201      	movs	r2, #1
1000c550:	4c22      	ldr	r4, [pc, #136]	; (1000c5dc <ble_encryption_request_handler+0x160>)
1000c552:	47a0      	blx	r4
1000c554:	1e04      	subs	r4, r0, #0
1000c556:	d01e      	beq.n	1000c596 <ble_encryption_request_handler+0x11a>
1000c558:	e015      	b.n	1000c586 <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c55a:	4f16      	ldr	r7, [pc, #88]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c55c:	0038      	movs	r0, r7
1000c55e:	4e16      	ldr	r6, [pc, #88]	; (1000c5b8 <ble_encryption_request_handler+0x13c>)
1000c560:	47b0      	blx	r6
1000c562:	481f      	ldr	r0, [pc, #124]	; (1000c5e0 <ble_encryption_request_handler+0x164>)
1000c564:	4d16      	ldr	r5, [pc, #88]	; (1000c5c0 <ble_encryption_request_handler+0x144>)
1000c566:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c568:	0038      	movs	r0, r7
1000c56a:	47b0      	blx	r6
1000c56c:	481d      	ldr	r0, [pc, #116]	; (1000c5e4 <ble_encryption_request_handler+0x168>)
1000c56e:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c570:	0163      	lsls	r3, r4, #5
1000c572:	1b1c      	subs	r4, r3, r4
1000c574:	00a4      	lsls	r4, r4, #2
1000c576:	4b0e      	ldr	r3, [pc, #56]	; (1000c5b0 <ble_encryption_request_handler+0x134>)
1000c578:	191c      	adds	r4, r3, r4
1000c57a:	8920      	ldrh	r0, [r4, #8]
1000c57c:	2105      	movs	r1, #5
1000c57e:	4b1a      	ldr	r3, [pc, #104]	; (1000c5e8 <ble_encryption_request_handler+0x16c>)
1000c580:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c582:	24e2      	movs	r4, #226	; 0xe2
1000c584:	e00d      	b.n	1000c5a2 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c586:	480b      	ldr	r0, [pc, #44]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c588:	4b0b      	ldr	r3, [pc, #44]	; (1000c5b8 <ble_encryption_request_handler+0x13c>)
1000c58a:	4798      	blx	r3
1000c58c:	4817      	ldr	r0, [pc, #92]	; (1000c5ec <ble_encryption_request_handler+0x170>)
1000c58e:	4b0c      	ldr	r3, [pc, #48]	; (1000c5c0 <ble_encryption_request_handler+0x144>)
1000c590:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c592:	2400      	movs	r4, #0
1000c594:	e005      	b.n	1000c5a2 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000c596:	4807      	ldr	r0, [pc, #28]	; (1000c5b4 <ble_encryption_request_handler+0x138>)
1000c598:	4b07      	ldr	r3, [pc, #28]	; (1000c5b8 <ble_encryption_request_handler+0x13c>)
1000c59a:	4798      	blx	r3
1000c59c:	4814      	ldr	r0, [pc, #80]	; (1000c5f0 <ble_encryption_request_handler+0x174>)
1000c59e:	4b08      	ldr	r3, [pc, #32]	; (1000c5c0 <ble_encryption_request_handler+0x144>)
1000c5a0:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000c5a2:	0020      	movs	r0, r4
1000c5a4:	bc1c      	pop	{r2, r3, r4}
1000c5a6:	4691      	mov	r9, r2
1000c5a8:	469a      	mov	sl, r3
1000c5aa:	46a3      	mov	fp, r4
1000c5ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c5ae:	46c0      	nop			; (mov r8, r8)
1000c5b0:	10019228 	.word	0x10019228
1000c5b4:	1001597c 	.word	0x1001597c
1000c5b8:	10014a3d 	.word	0x10014a3d
1000c5bc:	10016b90 	.word	0x10016b90
1000c5c0:	1001491d 	.word	0x1001491d
1000c5c4:	10016bbc 	.word	0x10016bbc
1000c5c8:	10016bd0 	.word	0x10016bd0
1000c5cc:	10016be4 	.word	0x10016be4
1000c5d0:	10016bf4 	.word	0x10016bf4
1000c5d4:	100147a5 	.word	0x100147a5
1000c5d8:	10016c04 	.word	0x10016c04
1000c5dc:	1000f3e5 	.word	0x1000f3e5
1000c5e0:	10016c18 	.word	0x10016c18
1000c5e4:	10016c50 	.word	0x10016c50
1000c5e8:	1000e7fd 	.word	0x1000e7fd
1000c5ec:	10016ca8 	.word	0x10016ca8
1000c5f0:	10016cc8 	.word	0x10016cc8

1000c5f4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000c5f4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000c5f6:	2a00      	cmp	r2, #0
1000c5f8:	d047      	beq.n	1000c68a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000c5fa:	2906      	cmp	r1, #6
1000c5fc:	d847      	bhi.n	1000c68e <ble_mgr_events_callback_handler+0x9a>
1000c5fe:	0089      	lsls	r1, r1, #2
1000c600:	4b28      	ldr	r3, [pc, #160]	; (1000c6a4 <ble_mgr_events_callback_handler+0xb0>)
1000c602:	585b      	ldr	r3, [r3, r1]
1000c604:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000c606:	4b28      	ldr	r3, [pc, #160]	; (1000c6a8 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000c608:	2405      	movs	r4, #5
1000c60a:	e00a      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000c60c:	4b27      	ldr	r3, [pc, #156]	; (1000c6ac <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000c60e:	2401      	movs	r4, #1
			}
			break;
1000c610:	e007      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000c612:	4b27      	ldr	r3, [pc, #156]	; (1000c6b0 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000c614:	2405      	movs	r4, #5
			}
			break;
1000c616:	e004      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000c618:	4b26      	ldr	r3, [pc, #152]	; (1000c6b4 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000c61a:	2401      	movs	r4, #1
			}
			break;
1000c61c:	e001      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000c61e:	4b26      	ldr	r3, [pc, #152]	; (1000c6b8 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000c620:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000c622:	2800      	cmp	r0, #0
1000c624:	d116      	bne.n	1000c654 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c626:	6819      	ldr	r1, [r3, #0]
1000c628:	2900      	cmp	r1, #0
1000c62a:	d10b      	bne.n	1000c644 <ble_mgr_events_callback_handler+0x50>
1000c62c:	e006      	b.n	1000c63c <ble_mgr_events_callback_handler+0x48>
1000c62e:	001d      	movs	r5, r3
1000c630:	3304      	adds	r3, #4
1000c632:	1f18      	subs	r0, r3, #4
1000c634:	6800      	ldr	r0, [r0, #0]
1000c636:	2800      	cmp	r0, #0
1000c638:	d106      	bne.n	1000c648 <ble_mgr_events_callback_handler+0x54>
1000c63a:	e000      	b.n	1000c63e <ble_mgr_events_callback_handler+0x4a>
1000c63c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000c63e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000c640:	2101      	movs	r1, #1
						break;
1000c642:	e02c      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
1000c644:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c646:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c648:	3101      	adds	r1, #1
1000c64a:	b2c9      	uxtb	r1, r1
1000c64c:	42a1      	cmp	r1, r4
1000c64e:	d3ee      	bcc.n	1000c62e <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c650:	2100      	movs	r1, #0
1000c652:	e024      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
1000c654:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000c656:	2801      	cmp	r0, #1
1000c658:	d121      	bne.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c65a:	6819      	ldr	r1, [r3, #0]
1000c65c:	428a      	cmp	r2, r1
1000c65e:	d10c      	bne.n	1000c67a <ble_mgr_events_callback_handler+0x86>
1000c660:	e006      	b.n	1000c670 <ble_mgr_events_callback_handler+0x7c>
1000c662:	001d      	movs	r5, r3
1000c664:	3304      	adds	r3, #4
1000c666:	1f18      	subs	r0, r3, #4
1000c668:	6800      	ldr	r0, [r0, #0]
1000c66a:	4282      	cmp	r2, r0
1000c66c:	d107      	bne.n	1000c67e <ble_mgr_events_callback_handler+0x8a>
1000c66e:	e000      	b.n	1000c672 <ble_mgr_events_callback_handler+0x7e>
1000c670:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000c672:	2300      	movs	r3, #0
1000c674:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000c676:	2101      	movs	r1, #1
						break;
1000c678:	e011      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
1000c67a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c67c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c67e:	3101      	adds	r1, #1
1000c680:	b2c9      	uxtb	r1, r1
1000c682:	42a1      	cmp	r1, r4
1000c684:	d3ed      	bcc.n	1000c662 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c686:	2100      	movs	r1, #0
1000c688:	e009      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000c68a:	2100      	movs	r1, #0
1000c68c:	e007      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000c68e:	2100      	movs	r1, #0
1000c690:	e005      	b.n	1000c69e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000c692:	4b0a      	ldr	r3, [pc, #40]	; (1000c6bc <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000c694:	2405      	movs	r4, #5
1000c696:	e7c4      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000c698:	4b09      	ldr	r3, [pc, #36]	; (1000c6c0 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000c69a:	2401      	movs	r4, #1
1000c69c:	e7c1      	b.n	1000c622 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000c69e:	0008      	movs	r0, r1
1000c6a0:	bd30      	pop	{r4, r5, pc}
1000c6a2:	46c0      	nop			; (mov r8, r8)
1000c6a4:	1001666c 	.word	0x1001666c
1000c6a8:	10019214 	.word	0x10019214
1000c6ac:	10019210 	.word	0x10019210
1000c6b0:	10019498 	.word	0x10019498
1000c6b4:	10019a4c 	.word	0x10019a4c
1000c6b8:	100194ac 	.word	0x100194ac
1000c6bc:	100194c0 	.word	0x100194c0
1000c6c0:	10019508 	.word	0x10019508

1000c6c4 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000c6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6c6:	465f      	mov	r7, fp
1000c6c8:	4656      	mov	r6, sl
1000c6ca:	464d      	mov	r5, r9
1000c6cc:	4644      	mov	r4, r8
1000c6ce:	b4f0      	push	{r4, r5, r6, r7}
1000c6d0:	b091      	sub	sp, #68	; 0x44
1000c6d2:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000c6d4:	2400      	movs	r4, #0
1000c6d6:	4b7e      	ldr	r3, [pc, #504]	; (1000c8d0 <ble_device_init+0x20c>)
1000c6d8:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c6da:	2207      	movs	r2, #7
1000c6dc:	2100      	movs	r1, #0
1000c6de:	487d      	ldr	r0, [pc, #500]	; (1000c8d4 <ble_device_init+0x210>)
1000c6e0:	4e7d      	ldr	r6, [pc, #500]	; (1000c8d8 <ble_device_init+0x214>)
1000c6e2:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000c6e4:	2212      	movs	r2, #18
1000c6e6:	2100      	movs	r1, #0
1000c6e8:	487c      	ldr	r0, [pc, #496]	; (1000c8dc <ble_device_init+0x218>)
1000c6ea:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000c6ec:	4a7c      	ldr	r2, [pc, #496]	; (1000c8e0 <ble_device_init+0x21c>)
1000c6ee:	2100      	movs	r1, #0
1000c6f0:	487c      	ldr	r0, [pc, #496]	; (1000c8e4 <ble_device_init+0x220>)
1000c6f2:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000c6f4:	4b7c      	ldr	r3, [pc, #496]	; (1000c8e8 <ble_device_init+0x224>)
1000c6f6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000c6f8:	22cd      	movs	r2, #205	; 0xcd
1000c6fa:	0092      	lsls	r2, r2, #2
1000c6fc:	2100      	movs	r1, #0
1000c6fe:	487b      	ldr	r0, [pc, #492]	; (1000c8ec <ble_device_init+0x228>)
1000c700:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000c702:	4b7b      	ldr	r3, [pc, #492]	; (1000c8f0 <ble_device_init+0x22c>)
1000c704:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000c706:	2283      	movs	r2, #131	; 0x83
1000c708:	0092      	lsls	r2, r2, #2
1000c70a:	2100      	movs	r1, #0
1000c70c:	4879      	ldr	r0, [pc, #484]	; (1000c8f4 <ble_device_init+0x230>)
1000c70e:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000c710:	4b79      	ldr	r3, [pc, #484]	; (1000c8f8 <ble_device_init+0x234>)
1000c712:	469b      	mov	fp, r3
1000c714:	2380      	movs	r3, #128	; 0x80
1000c716:	00db      	lsls	r3, r3, #3
1000c718:	469a      	mov	sl, r3
1000c71a:	001a      	movs	r2, r3
1000c71c:	2100      	movs	r1, #0
1000c71e:	4658      	mov	r0, fp
1000c720:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000c722:	4b76      	ldr	r3, [pc, #472]	; (1000c8fc <ble_device_init+0x238>)
1000c724:	4699      	mov	r9, r3
1000c726:	2380      	movs	r3, #128	; 0x80
1000c728:	015b      	lsls	r3, r3, #5
1000c72a:	4698      	mov	r8, r3
1000c72c:	001a      	movs	r2, r3
1000c72e:	2100      	movs	r1, #0
1000c730:	4648      	mov	r0, r9
1000c732:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c734:	4f72      	ldr	r7, [pc, #456]	; (1000c900 <ble_device_init+0x23c>)
1000c736:	221c      	movs	r2, #28
1000c738:	2100      	movs	r1, #0
1000c73a:	0038      	movs	r0, r7
1000c73c:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c73e:	465b      	mov	r3, fp
1000c740:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c742:	4653      	mov	r3, sl
1000c744:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c746:	464b      	mov	r3, r9
1000c748:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c74a:	4643      	mov	r3, r8
1000c74c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c74e:	4b6d      	ldr	r3, [pc, #436]	; (1000c904 <ble_device_init+0x240>)
1000c750:	601c      	str	r4, [r3, #0]
1000c752:	605c      	str	r4, [r3, #4]
1000c754:	609c      	str	r4, [r3, #8]
1000c756:	60dc      	str	r4, [r3, #12]
1000c758:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c75a:	4b6b      	ldr	r3, [pc, #428]	; (1000c908 <ble_device_init+0x244>)
1000c75c:	601c      	str	r4, [r3, #0]
1000c75e:	605c      	str	r4, [r3, #4]
1000c760:	609c      	str	r4, [r3, #8]
1000c762:	60dc      	str	r4, [r3, #12]
1000c764:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c766:	4b69      	ldr	r3, [pc, #420]	; (1000c90c <ble_device_init+0x248>)
1000c768:	601c      	str	r4, [r3, #0]
1000c76a:	605c      	str	r4, [r3, #4]
1000c76c:	609c      	str	r4, [r3, #8]
1000c76e:	60dc      	str	r4, [r3, #12]
1000c770:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c772:	4b67      	ldr	r3, [pc, #412]	; (1000c910 <ble_device_init+0x24c>)
1000c774:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c776:	4b67      	ldr	r3, [pc, #412]	; (1000c914 <ble_device_init+0x250>)
1000c778:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c77a:	4b67      	ldr	r3, [pc, #412]	; (1000c918 <ble_device_init+0x254>)
1000c77c:	601c      	str	r4, [r3, #0]
1000c77e:	605c      	str	r4, [r3, #4]
1000c780:	609c      	str	r4, [r3, #8]
1000c782:	60dc      	str	r4, [r3, #12]
1000c784:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c786:	4b65      	ldr	r3, [pc, #404]	; (1000c91c <ble_device_init+0x258>)
1000c788:	601c      	str	r4, [r3, #0]
1000c78a:	4c65      	ldr	r4, [pc, #404]	; (1000c920 <ble_device_init+0x25c>)
1000c78c:	239b      	movs	r3, #155	; 0x9b
1000c78e:	009b      	lsls	r3, r3, #2
1000c790:	4698      	mov	r8, r3
1000c792:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c794:	4f50      	ldr	r7, [pc, #320]	; (1000c8d8 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c796:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c798:	227c      	movs	r2, #124	; 0x7c
1000c79a:	2100      	movs	r1, #0
1000c79c:	0020      	movs	r0, r4
1000c79e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c7a0:	0023      	movs	r3, r4
1000c7a2:	335e      	adds	r3, #94	; 0x5e
1000c7a4:	2200      	movs	r2, #0
1000c7a6:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c7a8:	7626      	strb	r6, [r4, #24]
1000c7aa:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7ac:	45a0      	cmp	r8, r4
1000c7ae:	d1f3      	bne.n	1000c798 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c7b0:	4b5c      	ldr	r3, [pc, #368]	; (1000c924 <ble_device_init+0x260>)
1000c7b2:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c7b4:	4c52      	ldr	r4, [pc, #328]	; (1000c900 <ble_device_init+0x23c>)
1000c7b6:	4b4a      	ldr	r3, [pc, #296]	; (1000c8e0 <ble_device_init+0x21c>)
1000c7b8:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c7ba:	4b4a      	ldr	r3, [pc, #296]	; (1000c8e4 <ble_device_init+0x220>)
1000c7bc:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000c7be:	485a      	ldr	r0, [pc, #360]	; (1000c928 <ble_device_init+0x264>)
1000c7c0:	4b5a      	ldr	r3, [pc, #360]	; (1000c92c <ble_device_init+0x268>)
1000c7c2:	4798      	blx	r3
1000c7c4:	485a      	ldr	r0, [pc, #360]	; (1000c930 <ble_device_init+0x26c>)
1000c7c6:	4b5b      	ldr	r3, [pc, #364]	; (1000c934 <ble_device_init+0x270>)
1000c7c8:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c7ca:	0020      	movs	r0, r4
1000c7cc:	4b5a      	ldr	r3, [pc, #360]	; (1000c938 <ble_device_init+0x274>)
1000c7ce:	4798      	blx	r3
1000c7d0:	2800      	cmp	r0, #0
1000c7d2:	d00b      	beq.n	1000c7ec <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c7d4:	4e54      	ldr	r6, [pc, #336]	; (1000c928 <ble_device_init+0x264>)
1000c7d6:	0030      	movs	r0, r6
1000c7d8:	4d54      	ldr	r5, [pc, #336]	; (1000c92c <ble_device_init+0x268>)
1000c7da:	47a8      	blx	r5
1000c7dc:	4857      	ldr	r0, [pc, #348]	; (1000c93c <ble_device_init+0x278>)
1000c7de:	4c55      	ldr	r4, [pc, #340]	; (1000c934 <ble_device_init+0x270>)
1000c7e0:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c7e2:	0030      	movs	r0, r6
1000c7e4:	47a8      	blx	r5
1000c7e6:	4856      	ldr	r0, [pc, #344]	; (1000c940 <ble_device_init+0x27c>)
1000c7e8:	47a0      	blx	r4
1000c7ea:	e7fe      	b.n	1000c7ea <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c7ec:	4a55      	ldr	r2, [pc, #340]	; (1000c944 <ble_device_init+0x280>)
1000c7ee:	2100      	movs	r1, #0
1000c7f0:	2000      	movs	r0, #0
1000c7f2:	4c55      	ldr	r4, [pc, #340]	; (1000c948 <ble_device_init+0x284>)
1000c7f4:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c7f6:	4a55      	ldr	r2, [pc, #340]	; (1000c94c <ble_device_init+0x288>)
1000c7f8:	2102      	movs	r1, #2
1000c7fa:	2000      	movs	r0, #0
1000c7fc:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c7fe:	2109      	movs	r1, #9
1000c800:	4853      	ldr	r0, [pc, #332]	; (1000c950 <ble_device_init+0x28c>)
1000c802:	4b54      	ldr	r3, [pc, #336]	; (1000c954 <ble_device_init+0x290>)
1000c804:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c806:	2800      	cmp	r0, #0
1000c808:	d005      	beq.n	1000c816 <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000c80a:	4847      	ldr	r0, [pc, #284]	; (1000c928 <ble_device_init+0x264>)
1000c80c:	4b47      	ldr	r3, [pc, #284]	; (1000c92c <ble_device_init+0x268>)
1000c80e:	4798      	blx	r3
1000c810:	4851      	ldr	r0, [pc, #324]	; (1000c958 <ble_device_init+0x294>)
1000c812:	4b48      	ldr	r3, [pc, #288]	; (1000c934 <ble_device_init+0x270>)
1000c814:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c816:	2207      	movs	r2, #7
1000c818:	4950      	ldr	r1, [pc, #320]	; (1000c95c <ble_device_init+0x298>)
1000c81a:	3108      	adds	r1, #8
1000c81c:	a804      	add	r0, sp, #16
1000c81e:	4b50      	ldr	r3, [pc, #320]	; (1000c960 <ble_device_init+0x29c>)
1000c820:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c822:	2226      	movs	r2, #38	; 0x26
1000c824:	2100      	movs	r1, #0
1000c826:	a806      	add	r0, sp, #24
1000c828:	4b2b      	ldr	r3, [pc, #172]	; (1000c8d8 <ble_device_init+0x214>)
1000c82a:	4798      	blx	r3
	
	if (addr == NULL)
1000c82c:	2d00      	cmp	r5, #0
1000c82e:	d10c      	bne.n	1000c84a <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c830:	a804      	add	r0, sp, #16
1000c832:	4b4c      	ldr	r3, [pc, #304]	; (1000c964 <ble_device_init+0x2a0>)
1000c834:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c836:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c838:	2800      	cmp	r0, #0
1000c83a:	d006      	beq.n	1000c84a <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c83c:	483a      	ldr	r0, [pc, #232]	; (1000c928 <ble_device_init+0x264>)
1000c83e:	4b3b      	ldr	r3, [pc, #236]	; (1000c92c <ble_device_init+0x268>)
1000c840:	4798      	blx	r3
1000c842:	4849      	ldr	r0, [pc, #292]	; (1000c968 <ble_device_init+0x2a4>)
1000c844:	4b3b      	ldr	r3, [pc, #236]	; (1000c934 <ble_device_init+0x270>)
1000c846:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c848:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000c84a:	4837      	ldr	r0, [pc, #220]	; (1000c928 <ble_device_init+0x264>)
1000c84c:	4b37      	ldr	r3, [pc, #220]	; (1000c92c <ble_device_init+0x268>)
1000c84e:	4798      	blx	r3
1000c850:	792b      	ldrb	r3, [r5, #4]
1000c852:	796a      	ldrb	r2, [r5, #5]
1000c854:	79a9      	ldrb	r1, [r5, #6]
1000c856:	7828      	ldrb	r0, [r5, #0]
1000c858:	9003      	str	r0, [sp, #12]
1000c85a:	7868      	ldrb	r0, [r5, #1]
1000c85c:	9002      	str	r0, [sp, #8]
1000c85e:	78a8      	ldrb	r0, [r5, #2]
1000c860:	9001      	str	r0, [sp, #4]
1000c862:	78e8      	ldrb	r0, [r5, #3]
1000c864:	9000      	str	r0, [sp, #0]
1000c866:	4841      	ldr	r0, [pc, #260]	; (1000c96c <ble_device_init+0x2a8>)
1000c868:	4c32      	ldr	r4, [pc, #200]	; (1000c934 <ble_device_init+0x270>)
1000c86a:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c86c:	ac06      	add	r4, sp, #24
1000c86e:	230a      	movs	r3, #10
1000c870:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000c872:	4b3f      	ldr	r3, [pc, #252]	; (1000c970 <ble_device_init+0x2ac>)
1000c874:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000c876:	2207      	movs	r2, #7
1000c878:	0029      	movs	r1, r5
1000c87a:	a807      	add	r0, sp, #28
1000c87c:	4b38      	ldr	r3, [pc, #224]	; (1000c960 <ble_device_init+0x29c>)
1000c87e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000c880:	2300      	movs	r3, #0
1000c882:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000c884:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000c886:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000c888:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000c88a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c88c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c88e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000c890:	2380      	movs	r3, #128	; 0x80
1000c892:	009b      	lsls	r3, r3, #2
1000c894:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000c896:	0020      	movs	r0, r4
1000c898:	4b36      	ldr	r3, [pc, #216]	; (1000c974 <ble_device_init+0x2b0>)
1000c89a:	4798      	blx	r3
1000c89c:	2800      	cmp	r0, #0
1000c89e:	d005      	beq.n	1000c8ac <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000c8a0:	4821      	ldr	r0, [pc, #132]	; (1000c928 <ble_device_init+0x264>)
1000c8a2:	4b22      	ldr	r3, [pc, #136]	; (1000c92c <ble_device_init+0x268>)
1000c8a4:	4798      	blx	r3
1000c8a6:	4834      	ldr	r0, [pc, #208]	; (1000c978 <ble_device_init+0x2b4>)
1000c8a8:	4b22      	ldr	r3, [pc, #136]	; (1000c934 <ble_device_init+0x270>)
1000c8aa:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000c8ac:	0028      	movs	r0, r5
1000c8ae:	4b33      	ldr	r3, [pc, #204]	; (1000c97c <ble_device_init+0x2b8>)
1000c8b0:	4798      	blx	r3
1000c8b2:	2800      	cmp	r0, #0
1000c8b4:	d005      	beq.n	1000c8c2 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000c8b6:	481c      	ldr	r0, [pc, #112]	; (1000c928 <ble_device_init+0x264>)
1000c8b8:	4b1c      	ldr	r3, [pc, #112]	; (1000c92c <ble_device_init+0x268>)
1000c8ba:	4798      	blx	r3
1000c8bc:	4830      	ldr	r0, [pc, #192]	; (1000c980 <ble_device_init+0x2bc>)
1000c8be:	4b1d      	ldr	r3, [pc, #116]	; (1000c934 <ble_device_init+0x270>)
1000c8c0:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000c8c2:	b011      	add	sp, #68	; 0x44
1000c8c4:	bc3c      	pop	{r2, r3, r4, r5}
1000c8c6:	4690      	mov	r8, r2
1000c8c8:	4699      	mov	r9, r3
1000c8ca:	46a2      	mov	sl, r4
1000c8cc:	46ab      	mov	fp, r5
1000c8ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c8d0:	10017d08 	.word	0x10017d08
1000c8d4:	10017d10 	.word	0x10017d10
1000c8d8:	100147d5 	.word	0x100147d5
1000c8dc:	100194d4 	.word	0x100194d4
1000c8e0:	000004e2 	.word	0x000004e2
1000c8e4:	10017828 	.word	0x10017828
1000c8e8:	10017d0c 	.word	0x10017d0c
1000c8ec:	1001950c 	.word	0x1001950c
1000c8f0:	10019504 	.word	0x10019504
1000c8f4:	10019840 	.word	0x10019840
1000c8f8:	10017428 	.word	0x10017428
1000c8fc:	10017d18 	.word	0x10017d18
1000c900:	100194e8 	.word	0x100194e8
1000c904:	100194ac 	.word	0x100194ac
1000c908:	100194c0 	.word	0x100194c0
1000c90c:	10019214 	.word	0x10019214
1000c910:	10019508 	.word	0x10019508
1000c914:	10019210 	.word	0x10019210
1000c918:	10019498 	.word	0x10019498
1000c91c:	10019a4c 	.word	0x10019a4c
1000c920:	10019228 	.word	0x10019228
1000c924:	10019494 	.word	0x10019494
1000c928:	1001597c 	.word	0x1001597c
1000c92c:	10014a3d 	.word	0x10014a3d
1000c930:	10016ce4 	.word	0x10016ce4
1000c934:	1001491d 	.word	0x1001491d
1000c938:	1000e409 	.word	0x1000e409
1000c93c:	10016d08 	.word	0x10016d08
1000c940:	10016d34 	.word	0x10016d34
1000c944:	100170e0 	.word	0x100170e0
1000c948:	1000c5f5 	.word	0x1000c5f5
1000c94c:	10016698 	.word	0x10016698
1000c950:	10016d7c 	.word	0x10016d7c
1000c954:	1000e321 	.word	0x1000e321
1000c958:	10016d88 	.word	0x10016d88
1000c95c:	10016688 	.word	0x10016688
1000c960:	100147c3 	.word	0x100147c3
1000c964:	1000e355 	.word	0x1000e355
1000c968:	10016da0 	.word	0x10016da0
1000c96c:	10016dcc 	.word	0x10016dcc
1000c970:	00003a98 	.word	0x00003a98
1000c974:	1000e379 	.word	0x1000e379
1000c978:	10016e1c 	.word	0x10016e1c
1000c97c:	1000e5bd 	.word	0x1000e5bd
1000c980:	10016e58 	.word	0x10016e58

1000c984 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000c984:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000c986:	2200      	movs	r2, #0
1000c988:	2100      	movs	r1, #0
1000c98a:	4b0a      	ldr	r3, [pc, #40]	; (1000c9b4 <ble_send_slave_sec_request+0x30>)
1000c98c:	4798      	blx	r3
1000c98e:	1e04      	subs	r4, r0, #0
1000c990:	d106      	bne.n	1000c9a0 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000c992:	4809      	ldr	r0, [pc, #36]	; (1000c9b8 <ble_send_slave_sec_request+0x34>)
1000c994:	4b09      	ldr	r3, [pc, #36]	; (1000c9bc <ble_send_slave_sec_request+0x38>)
1000c996:	4798      	blx	r3
1000c998:	4809      	ldr	r0, [pc, #36]	; (1000c9c0 <ble_send_slave_sec_request+0x3c>)
1000c99a:	4b0a      	ldr	r3, [pc, #40]	; (1000c9c4 <ble_send_slave_sec_request+0x40>)
1000c99c:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000c99e:	e006      	b.n	1000c9ae <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000c9a0:	4805      	ldr	r0, [pc, #20]	; (1000c9b8 <ble_send_slave_sec_request+0x34>)
1000c9a2:	4b06      	ldr	r3, [pc, #24]	; (1000c9bc <ble_send_slave_sec_request+0x38>)
1000c9a4:	4798      	blx	r3
1000c9a6:	4808      	ldr	r0, [pc, #32]	; (1000c9c8 <ble_send_slave_sec_request+0x44>)
1000c9a8:	4b06      	ldr	r3, [pc, #24]	; (1000c9c4 <ble_send_slave_sec_request+0x40>)
1000c9aa:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000c9ac:	24e2      	movs	r4, #226	; 0xe2
}
1000c9ae:	0020      	movs	r0, r4
1000c9b0:	bd10      	pop	{r4, pc}
1000c9b2:	46c0      	nop			; (mov r8, r8)
1000c9b4:	1000f32d 	.word	0x1000f32d
1000c9b8:	1001597c 	.word	0x1001597c
1000c9bc:	10014a3d 	.word	0x10014a3d
1000c9c0:	10016ea8 	.word	0x10016ea8
1000c9c4:	1001491d 	.word	0x1001491d
1000c9c8:	10016ecc 	.word	0x10016ecc

1000c9cc <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c9cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9ce:	465f      	mov	r7, fp
1000c9d0:	464e      	mov	r6, r9
1000c9d2:	4645      	mov	r5, r8
1000c9d4:	b4e0      	push	{r5, r6, r7}
1000c9d6:	b09a      	sub	sp, #104	; 0x68
1000c9d8:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000c9da:	7a86      	ldrb	r6, [r0, #10]
1000c9dc:	2e00      	cmp	r6, #0
1000c9de:	d000      	beq.n	1000c9e2 <ble_connected_state_handler+0x16>
1000c9e0:	e0cc      	b.n	1000cb7c <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000c9e2:	4878      	ldr	r0, [pc, #480]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000c9e4:	4f78      	ldr	r7, [pc, #480]	; (1000cbc8 <ble_connected_state_handler+0x1fc>)
1000c9e6:	47b8      	blx	r7
1000c9e8:	792b      	ldrb	r3, [r5, #4]
1000c9ea:	796a      	ldrb	r2, [r5, #5]
1000c9ec:	79a9      	ldrb	r1, [r5, #6]
1000c9ee:	7868      	ldrb	r0, [r5, #1]
1000c9f0:	9002      	str	r0, [sp, #8]
1000c9f2:	78a8      	ldrb	r0, [r5, #2]
1000c9f4:	9001      	str	r0, [sp, #4]
1000c9f6:	78e8      	ldrb	r0, [r5, #3]
1000c9f8:	9000      	str	r0, [sp, #0]
1000c9fa:	4874      	ldr	r0, [pc, #464]	; (1000cbcc <ble_connected_state_handler+0x200>)
1000c9fc:	4c74      	ldr	r4, [pc, #464]	; (1000cbd0 <ble_connected_state_handler+0x204>)
1000c9fe:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ca00:	4870      	ldr	r0, [pc, #448]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000ca02:	47b8      	blx	r7
1000ca04:	8929      	ldrh	r1, [r5, #8]
1000ca06:	4873      	ldr	r0, [pc, #460]	; (1000cbd4 <ble_connected_state_handler+0x208>)
1000ca08:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ca0a:	2212      	movs	r2, #18
1000ca0c:	0029      	movs	r1, r5
1000ca0e:	4872      	ldr	r0, [pc, #456]	; (1000cbd8 <ble_connected_state_handler+0x20c>)
1000ca10:	4b72      	ldr	r3, [pc, #456]	; (1000cbdc <ble_connected_state_handler+0x210>)
1000ca12:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ca14:	9504      	str	r5, [sp, #16]
1000ca16:	2207      	movs	r2, #7
1000ca18:	0029      	movs	r1, r5
1000ca1a:	4871      	ldr	r0, [pc, #452]	; (1000cbe0 <ble_connected_state_handler+0x214>)
1000ca1c:	4b71      	ldr	r3, [pc, #452]	; (1000cbe4 <ble_connected_state_handler+0x218>)
1000ca1e:	4798      	blx	r3
1000ca20:	2800      	cmp	r0, #0
1000ca22:	d100      	bne.n	1000ca26 <ble_connected_state_handler+0x5a>
1000ca24:	e0b3      	b.n	1000cb8e <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ca26:	782b      	ldrb	r3, [r5, #0]
1000ca28:	2b02      	cmp	r3, #2
1000ca2a:	d000      	beq.n	1000ca2e <ble_connected_state_handler+0x62>
1000ca2c:	e0af      	b.n	1000cb8e <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ca2e:	2250      	movs	r2, #80	; 0x50
1000ca30:	2100      	movs	r1, #0
1000ca32:	a806      	add	r0, sp, #24
1000ca34:	4b6c      	ldr	r3, [pc, #432]	; (1000cbe8 <ble_connected_state_handler+0x21c>)
1000ca36:	4798      	blx	r3
1000ca38:	4f6c      	ldr	r7, [pc, #432]	; (1000cbec <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ca3a:	2300      	movs	r3, #0
1000ca3c:	e00b      	b.n	1000ca56 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ca3e:	1c59      	adds	r1, r3, #1
1000ca40:	7814      	ldrb	r4, [r2, #0]
1000ca42:	a806      	add	r0, sp, #24
1000ca44:	54c4      	strb	r4, [r0, r3]
1000ca46:	3201      	adds	r2, #1
1000ca48:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ca4a:	42b3      	cmp	r3, r6
1000ca4c:	d1f7      	bne.n	1000ca3e <ble_connected_state_handler+0x72>
1000ca4e:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ca50:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ca52:	2b50      	cmp	r3, #80	; 0x50
1000ca54:	d004      	beq.n	1000ca60 <ble_connected_state_handler+0x94>
1000ca56:	001e      	movs	r6, r3
1000ca58:	3610      	adds	r6, #16
1000ca5a:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ca5c:	003a      	movs	r2, r7
1000ca5e:	e7ee      	b.n	1000ca3e <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ca60:	aa06      	add	r2, sp, #24
1000ca62:	0029      	movs	r1, r5
1000ca64:	2005      	movs	r0, #5
1000ca66:	4b62      	ldr	r3, [pc, #392]	; (1000cbf0 <ble_connected_state_handler+0x224>)
1000ca68:	4798      	blx	r3
1000ca6a:	1e06      	subs	r6, r0, #0
1000ca6c:	d106      	bne.n	1000ca7c <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000ca6e:	4855      	ldr	r0, [pc, #340]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000ca70:	4b55      	ldr	r3, [pc, #340]	; (1000cbc8 <ble_connected_state_handler+0x1fc>)
1000ca72:	4798      	blx	r3
1000ca74:	485f      	ldr	r0, [pc, #380]	; (1000cbf4 <ble_connected_state_handler+0x228>)
1000ca76:	4b56      	ldr	r3, [pc, #344]	; (1000cbd0 <ble_connected_state_handler+0x204>)
1000ca78:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000ca7a:	e09c      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ca7c:	4851      	ldr	r0, [pc, #324]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000ca7e:	4b52      	ldr	r3, [pc, #328]	; (1000cbc8 <ble_connected_state_handler+0x1fc>)
1000ca80:	4798      	blx	r3
1000ca82:	485d      	ldr	r0, [pc, #372]	; (1000cbf8 <ble_connected_state_handler+0x22c>)
1000ca84:	4b52      	ldr	r3, [pc, #328]	; (1000cbd0 <ble_connected_state_handler+0x204>)
1000ca86:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000ca88:	26e2      	movs	r6, #226	; 0xe2
1000ca8a:	e094      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
1000ca8c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ca8e:	9405      	str	r4, [sp, #20]
1000ca90:	2207      	movs	r2, #7
1000ca92:	9904      	ldr	r1, [sp, #16]
1000ca94:	4648      	mov	r0, r9
1000ca96:	47d8      	blx	fp
1000ca98:	2800      	cmp	r0, #0
1000ca9a:	d109      	bne.n	1000cab0 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ca9c:	9a05      	ldr	r2, [sp, #20]
1000ca9e:	0153      	lsls	r3, r2, #5
1000caa0:	1a9b      	subs	r3, r3, r2
1000caa2:	009a      	lsls	r2, r3, #2
1000caa4:	4b55      	ldr	r3, [pc, #340]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000caa6:	189b      	adds	r3, r3, r2
1000caa8:	335e      	adds	r3, #94	; 0x5e
1000caaa:	2202      	movs	r2, #2
1000caac:	701a      	strb	r2, [r3, #0]
1000caae:	e02b      	b.n	1000cb08 <ble_connected_state_handler+0x13c>
1000cab0:	3401      	adds	r4, #1
1000cab2:	237c      	movs	r3, #124	; 0x7c
1000cab4:	469c      	mov	ip, r3
1000cab6:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cab8:	2c05      	cmp	r4, #5
1000caba:	d1e7      	bne.n	1000ca8c <ble_connected_state_handler+0xc0>
1000cabc:	e072      	b.n	1000cba4 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cabe:	001c      	movs	r4, r3
1000cac0:	7811      	ldrb	r1, [r2, #0]
1000cac2:	2900      	cmp	r1, #0
1000cac4:	d11a      	bne.n	1000cafc <ble_connected_state_handler+0x130>
1000cac6:	e001      	b.n	1000cacc <ble_connected_state_handler+0x100>
1000cac8:	2400      	movs	r4, #0
1000caca:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000cacc:	0163      	lsls	r3, r4, #5
1000cace:	4699      	mov	r9, r3
1000cad0:	1b18      	subs	r0, r3, r4
1000cad2:	0080      	lsls	r0, r0, #2
1000cad4:	4b49      	ldr	r3, [pc, #292]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000cad6:	4698      	mov	r8, r3
1000cad8:	4440      	add	r0, r8
1000cada:	2212      	movs	r2, #18
1000cadc:	0029      	movs	r1, r5
1000cade:	4b3f      	ldr	r3, [pc, #252]	; (1000cbdc <ble_connected_state_handler+0x210>)
1000cae0:	4798      	blx	r3
						ble_device_count++;
1000cae2:	4a47      	ldr	r2, [pc, #284]	; (1000cc00 <ble_connected_state_handler+0x234>)
1000cae4:	7813      	ldrb	r3, [r2, #0]
1000cae6:	3301      	adds	r3, #1
1000cae8:	b2db      	uxtb	r3, r3
1000caea:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000caec:	464b      	mov	r3, r9
1000caee:	1b1b      	subs	r3, r3, r4
1000caf0:	009b      	lsls	r3, r3, #2
1000caf2:	4443      	add	r3, r8
1000caf4:	335e      	adds	r3, #94	; 0x5e
1000caf6:	2202      	movs	r2, #2
1000caf8:	701a      	strb	r2, [r3, #0]
						break;
1000cafa:	e005      	b.n	1000cb08 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cafc:	1c79      	adds	r1, r7, #1
1000cafe:	b2cf      	uxtb	r7, r1
1000cb00:	3301      	adds	r3, #1
1000cb02:	327c      	adds	r2, #124	; 0x7c
1000cb04:	2f05      	cmp	r7, #5
1000cb06:	d1da      	bne.n	1000cabe <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cb08:	2207      	movs	r2, #7
1000cb0a:	0029      	movs	r1, r5
1000cb0c:	4834      	ldr	r0, [pc, #208]	; (1000cbe0 <ble_connected_state_handler+0x214>)
1000cb0e:	4b35      	ldr	r3, [pc, #212]	; (1000cbe4 <ble_connected_state_handler+0x218>)
1000cb10:	4798      	blx	r3
1000cb12:	2800      	cmp	r0, #0
1000cb14:	d10c      	bne.n	1000cb30 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000cb16:	017b      	lsls	r3, r7, #5
1000cb18:	1bdb      	subs	r3, r3, r7
1000cb1a:	009b      	lsls	r3, r3, #2
1000cb1c:	4a37      	ldr	r2, [pc, #220]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000cb1e:	18d3      	adds	r3, r2, r3
1000cb20:	2205      	movs	r2, #5
1000cb22:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cb24:	3202      	adds	r2, #2
1000cb26:	2100      	movs	r1, #0
1000cb28:	482d      	ldr	r0, [pc, #180]	; (1000cbe0 <ble_connected_state_handler+0x214>)
1000cb2a:	4b2f      	ldr	r3, [pc, #188]	; (1000cbe8 <ble_connected_state_handler+0x21c>)
1000cb2c:	4798      	blx	r3
1000cb2e:	e042      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000cb30:	4b32      	ldr	r3, [pc, #200]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000cb32:	4698      	mov	r8, r3
1000cb34:	017c      	lsls	r4, r7, #5
1000cb36:	1be3      	subs	r3, r4, r7
1000cb38:	009b      	lsls	r3, r3, #2
1000cb3a:	4443      	add	r3, r8
1000cb3c:	220a      	movs	r2, #10
1000cb3e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cb40:	3a03      	subs	r2, #3
1000cb42:	2100      	movs	r1, #0
1000cb44:	4826      	ldr	r0, [pc, #152]	; (1000cbe0 <ble_connected_state_handler+0x214>)
1000cb46:	4b28      	ldr	r3, [pc, #160]	; (1000cbe8 <ble_connected_state_handler+0x21c>)
1000cb48:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000cb4a:	1be4      	subs	r4, r4, r7
1000cb4c:	00a4      	lsls	r4, r4, #2
1000cb4e:	4444      	add	r4, r8
1000cb50:	7ca3      	ldrb	r3, [r4, #18]
1000cb52:	2b0a      	cmp	r3, #10
1000cb54:	d12f      	bne.n	1000cbb6 <ble_connected_state_handler+0x1ea>
1000cb56:	e00d      	b.n	1000cb74 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000cb58:	481a      	ldr	r0, [pc, #104]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000cb5a:	4b1b      	ldr	r3, [pc, #108]	; (1000cbc8 <ble_connected_state_handler+0x1fc>)
1000cb5c:	4798      	blx	r3
1000cb5e:	4b28      	ldr	r3, [pc, #160]	; (1000cc00 <ble_connected_state_handler+0x234>)
1000cb60:	7819      	ldrb	r1, [r3, #0]
1000cb62:	b2c9      	uxtb	r1, r1
1000cb64:	4827      	ldr	r0, [pc, #156]	; (1000cc04 <ble_connected_state_handler+0x238>)
1000cb66:	4b1a      	ldr	r3, [pc, #104]	; (1000cbd0 <ble_connected_state_handler+0x204>)
1000cb68:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000cb6a:	8928      	ldrh	r0, [r5, #8]
1000cb6c:	2113      	movs	r1, #19
1000cb6e:	4b26      	ldr	r3, [pc, #152]	; (1000cc08 <ble_connected_state_handler+0x23c>)
1000cb70:	4798      	blx	r3
1000cb72:	e020      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000cb74:	8928      	ldrh	r0, [r5, #8]
1000cb76:	4b25      	ldr	r3, [pc, #148]	; (1000cc0c <ble_connected_state_handler+0x240>)
1000cb78:	4798      	blx	r3
1000cb7a:	e01c      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000cb7c:	4811      	ldr	r0, [pc, #68]	; (1000cbc4 <ble_connected_state_handler+0x1f8>)
1000cb7e:	4b12      	ldr	r3, [pc, #72]	; (1000cbc8 <ble_connected_state_handler+0x1fc>)
1000cb80:	4798      	blx	r3
1000cb82:	7aa9      	ldrb	r1, [r5, #10]
1000cb84:	4822      	ldr	r0, [pc, #136]	; (1000cc10 <ble_connected_state_handler+0x244>)
1000cb86:	4b12      	ldr	r3, [pc, #72]	; (1000cbd0 <ble_connected_state_handler+0x204>)
1000cb88:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000cb8a:	2600      	movs	r6, #0
1000cb8c:	e013      	b.n	1000cbb6 <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000cb8e:	4b1c      	ldr	r3, [pc, #112]	; (1000cc00 <ble_connected_state_handler+0x234>)
1000cb90:	781b      	ldrb	r3, [r3, #0]
1000cb92:	b2db      	uxtb	r3, r3
1000cb94:	2b04      	cmp	r3, #4
1000cb96:	d8df      	bhi.n	1000cb58 <ble_connected_state_handler+0x18c>
1000cb98:	4b18      	ldr	r3, [pc, #96]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000cb9a:	4699      	mov	r9, r3
1000cb9c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cb9e:	4b11      	ldr	r3, [pc, #68]	; (1000cbe4 <ble_connected_state_handler+0x218>)
1000cba0:	469b      	mov	fp, r3
1000cba2:	e773      	b.n	1000ca8c <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cba4:	235e      	movs	r3, #94	; 0x5e
1000cba6:	4a15      	ldr	r2, [pc, #84]	; (1000cbfc <ble_connected_state_handler+0x230>)
1000cba8:	5cd3      	ldrb	r3, [r2, r3]
1000cbaa:	2b00      	cmp	r3, #0
1000cbac:	d08c      	beq.n	1000cac8 <ble_connected_state_handler+0xfc>
1000cbae:	4a19      	ldr	r2, [pc, #100]	; (1000cc14 <ble_connected_state_handler+0x248>)
1000cbb0:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cbb2:	2701      	movs	r7, #1
1000cbb4:	e783      	b.n	1000cabe <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000cbb6:	0030      	movs	r0, r6
1000cbb8:	b01a      	add	sp, #104	; 0x68
1000cbba:	bc1c      	pop	{r2, r3, r4}
1000cbbc:	4690      	mov	r8, r2
1000cbbe:	4699      	mov	r9, r3
1000cbc0:	46a3      	mov	fp, r4
1000cbc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbc4:	1001597c 	.word	0x1001597c
1000cbc8:	10014a3d 	.word	0x10014a3d
1000cbcc:	10016eec 	.word	0x10016eec
1000cbd0:	1001491d 	.word	0x1001491d
1000cbd4:	10016f30 	.word	0x10016f30
1000cbd8:	100194d4 	.word	0x100194d4
1000cbdc:	100147c3 	.word	0x100147c3
1000cbe0:	10017d10 	.word	0x10017d10
1000cbe4:	100147a5 	.word	0x100147a5
1000cbe8:	100147d5 	.word	0x100147d5
1000cbec:	1001926e 	.word	0x1001926e
1000cbf0:	1000e829 	.word	0x1000e829
1000cbf4:	10016f48 	.word	0x10016f48
1000cbf8:	10016f6c 	.word	0x10016f6c
1000cbfc:	10019228 	.word	0x10019228
1000cc00:	10019494 	.word	0x10019494
1000cc04:	10016f90 	.word	0x10016f90
1000cc08:	1000e7fd 	.word	0x1000e7fd
1000cc0c:	1000c985 	.word	0x1000c985
1000cc10:	10016fcc 	.word	0x10016fcc
1000cc14:	10019302 	.word	0x10019302

1000cc18 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000cc18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cc1a:	4647      	mov	r7, r8
1000cc1c:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000cc1e:	7803      	ldrb	r3, [r0, #0]
1000cc20:	2b00      	cmp	r3, #0
1000cc22:	d152      	bne.n	1000ccca <ble_resolv_rand_addr_handler+0xb2>
1000cc24:	4d3e      	ldr	r5, [pc, #248]	; (1000cd20 <ble_resolv_rand_addr_handler+0x108>)
1000cc26:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000cc28:	1c46      	adds	r6, r0, #1
1000cc2a:	4f3e      	ldr	r7, [pc, #248]	; (1000cd24 <ble_resolv_rand_addr_handler+0x10c>)
1000cc2c:	2210      	movs	r2, #16
1000cc2e:	0029      	movs	r1, r5
1000cc30:	0030      	movs	r0, r6
1000cc32:	47b8      	blx	r7
1000cc34:	2800      	cmp	r0, #0
1000cc36:	d031      	beq.n	1000cc9c <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc38:	3401      	adds	r4, #1
1000cc3a:	b2e4      	uxtb	r4, r4
1000cc3c:	357c      	adds	r5, #124	; 0x7c
1000cc3e:	2c05      	cmp	r4, #5
1000cc40:	d1f4      	bne.n	1000cc2c <ble_resolv_rand_addr_handler+0x14>
1000cc42:	e042      	b.n	1000ccca <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cc44:	001d      	movs	r5, r3
1000cc46:	7811      	ldrb	r1, [r2, #0]
1000cc48:	2900      	cmp	r1, #0
1000cc4a:	d11b      	bne.n	1000cc84 <ble_resolv_rand_addr_handler+0x6c>
1000cc4c:	e001      	b.n	1000cc52 <ble_resolv_rand_addr_handler+0x3a>
1000cc4e:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc50:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000cc52:	4b35      	ldr	r3, [pc, #212]	; (1000cd28 <ble_resolv_rand_addr_handler+0x110>)
1000cc54:	4698      	mov	r8, r3
1000cc56:	016e      	lsls	r6, r5, #5
1000cc58:	1b77      	subs	r7, r6, r5
1000cc5a:	00bf      	lsls	r7, r7, #2
1000cc5c:	4447      	add	r7, r8
1000cc5e:	2212      	movs	r2, #18
1000cc60:	4932      	ldr	r1, [pc, #200]	; (1000cd2c <ble_resolv_rand_addr_handler+0x114>)
1000cc62:	0038      	movs	r0, r7
1000cc64:	4b32      	ldr	r3, [pc, #200]	; (1000cd30 <ble_resolv_rand_addr_handler+0x118>)
1000cc66:	4798      	blx	r3
				ble_device_count++;
1000cc68:	4a32      	ldr	r2, [pc, #200]	; (1000cd34 <ble_resolv_rand_addr_handler+0x11c>)
1000cc6a:	7813      	ldrb	r3, [r2, #0]
1000cc6c:	3301      	adds	r3, #1
1000cc6e:	b2db      	uxtb	r3, r3
1000cc70:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cc72:	375e      	adds	r7, #94	; 0x5e
1000cc74:	2302      	movs	r3, #2
1000cc76:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000cc78:	1b75      	subs	r5, r6, r5
1000cc7a:	00ad      	lsls	r5, r5, #2
1000cc7c:	4445      	add	r5, r8
1000cc7e:	3308      	adds	r3, #8
1000cc80:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000cc82:	e031      	b.n	1000cce8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc84:	3401      	adds	r4, #1
1000cc86:	b2e4      	uxtb	r4, r4
1000cc88:	3301      	adds	r3, #1
1000cc8a:	327c      	adds	r2, #124	; 0x7c
1000cc8c:	2c05      	cmp	r4, #5
1000cc8e:	d1d9      	bne.n	1000cc44 <ble_resolv_rand_addr_handler+0x2c>
1000cc90:	e03a      	b.n	1000cd08 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000cc92:	4b26      	ldr	r3, [pc, #152]	; (1000cd2c <ble_resolv_rand_addr_handler+0x114>)
1000cc94:	8918      	ldrh	r0, [r3, #8]
1000cc96:	4b28      	ldr	r3, [pc, #160]	; (1000cd38 <ble_resolv_rand_addr_handler+0x120>)
1000cc98:	4798      	blx	r3
1000cc9a:	e03c      	b.n	1000cd16 <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000cc9c:	4827      	ldr	r0, [pc, #156]	; (1000cd3c <ble_resolv_rand_addr_handler+0x124>)
1000cc9e:	4b28      	ldr	r3, [pc, #160]	; (1000cd40 <ble_resolv_rand_addr_handler+0x128>)
1000cca0:	4798      	blx	r3
1000cca2:	4828      	ldr	r0, [pc, #160]	; (1000cd44 <ble_resolv_rand_addr_handler+0x12c>)
1000cca4:	4b28      	ldr	r3, [pc, #160]	; (1000cd48 <ble_resolv_rand_addr_handler+0x130>)
1000cca6:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000cca8:	481f      	ldr	r0, [pc, #124]	; (1000cd28 <ble_resolv_rand_addr_handler+0x110>)
1000ccaa:	0163      	lsls	r3, r4, #5
1000ccac:	1b1a      	subs	r2, r3, r4
1000ccae:	0092      	lsls	r2, r2, #2
1000ccb0:	1882      	adds	r2, r0, r2
1000ccb2:	0011      	movs	r1, r2
1000ccb4:	315e      	adds	r1, #94	; 0x5e
1000ccb6:	2502      	movs	r5, #2
1000ccb8:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000ccba:	210a      	movs	r1, #10
1000ccbc:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000ccbe:	0010      	movs	r0, r2
1000ccc0:	2212      	movs	r2, #18
1000ccc2:	491a      	ldr	r1, [pc, #104]	; (1000cd2c <ble_resolv_rand_addr_handler+0x114>)
1000ccc4:	4b1a      	ldr	r3, [pc, #104]	; (1000cd30 <ble_resolv_rand_addr_handler+0x118>)
1000ccc6:	4798      	blx	r3
1000ccc8:	e00e      	b.n	1000cce8 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000ccca:	481c      	ldr	r0, [pc, #112]	; (1000cd3c <ble_resolv_rand_addr_handler+0x124>)
1000cccc:	4b1c      	ldr	r3, [pc, #112]	; (1000cd40 <ble_resolv_rand_addr_handler+0x128>)
1000ccce:	4798      	blx	r3
1000ccd0:	481e      	ldr	r0, [pc, #120]	; (1000cd4c <ble_resolv_rand_addr_handler+0x134>)
1000ccd2:	4b1d      	ldr	r3, [pc, #116]	; (1000cd48 <ble_resolv_rand_addr_handler+0x130>)
1000ccd4:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000ccd6:	235e      	movs	r3, #94	; 0x5e
1000ccd8:	4a13      	ldr	r2, [pc, #76]	; (1000cd28 <ble_resolv_rand_addr_handler+0x110>)
1000ccda:	5cd3      	ldrb	r3, [r2, r3]
1000ccdc:	2b00      	cmp	r3, #0
1000ccde:	d0b6      	beq.n	1000cc4e <ble_resolv_rand_addr_handler+0x36>
1000cce0:	4a1b      	ldr	r2, [pc, #108]	; (1000cd50 <ble_resolv_rand_addr_handler+0x138>)
1000cce2:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cce4:	2401      	movs	r4, #1
1000cce6:	e7ad      	b.n	1000cc44 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000cce8:	4814      	ldr	r0, [pc, #80]	; (1000cd3c <ble_resolv_rand_addr_handler+0x124>)
1000ccea:	4b15      	ldr	r3, [pc, #84]	; (1000cd40 <ble_resolv_rand_addr_handler+0x128>)
1000ccec:	4798      	blx	r3
1000ccee:	0021      	movs	r1, r4
1000ccf0:	4818      	ldr	r0, [pc, #96]	; (1000cd54 <ble_resolv_rand_addr_handler+0x13c>)
1000ccf2:	4b15      	ldr	r3, [pc, #84]	; (1000cd48 <ble_resolv_rand_addr_handler+0x130>)
1000ccf4:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000ccf6:	0163      	lsls	r3, r4, #5
1000ccf8:	1b1c      	subs	r4, r3, r4
1000ccfa:	00a4      	lsls	r4, r4, #2
1000ccfc:	4b0a      	ldr	r3, [pc, #40]	; (1000cd28 <ble_resolv_rand_addr_handler+0x110>)
1000ccfe:	191c      	adds	r4, r3, r4
1000cd00:	7ca3      	ldrb	r3, [r4, #18]
1000cd02:	2b0a      	cmp	r3, #10
1000cd04:	d107      	bne.n	1000cd16 <ble_resolv_rand_addr_handler+0xfe>
1000cd06:	e7c4      	b.n	1000cc92 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000cd08:	480c      	ldr	r0, [pc, #48]	; (1000cd3c <ble_resolv_rand_addr_handler+0x124>)
1000cd0a:	4b0d      	ldr	r3, [pc, #52]	; (1000cd40 <ble_resolv_rand_addr_handler+0x128>)
1000cd0c:	4798      	blx	r3
1000cd0e:	2105      	movs	r1, #5
1000cd10:	4810      	ldr	r0, [pc, #64]	; (1000cd54 <ble_resolv_rand_addr_handler+0x13c>)
1000cd12:	4b0d      	ldr	r3, [pc, #52]	; (1000cd48 <ble_resolv_rand_addr_handler+0x130>)
1000cd14:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000cd16:	2000      	movs	r0, #0
1000cd18:	bc04      	pop	{r2}
1000cd1a:	4690      	mov	r8, r2
1000cd1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cd1e:	46c0      	nop			; (mov r8, r8)
1000cd20:	1001926e 	.word	0x1001926e
1000cd24:	100147a5 	.word	0x100147a5
1000cd28:	10019228 	.word	0x10019228
1000cd2c:	100194d4 	.word	0x100194d4
1000cd30:	100147c3 	.word	0x100147c3
1000cd34:	10019494 	.word	0x10019494
1000cd38:	1000c985 	.word	0x1000c985
1000cd3c:	1001597c 	.word	0x1001597c
1000cd40:	10014a3d 	.word	0x10014a3d
1000cd44:	10016ff4 	.word	0x10016ff4
1000cd48:	1001491d 	.word	0x1001491d
1000cd4c:	1001700c 	.word	0x1001700c
1000cd50:	10019302 	.word	0x10019302
1000cd54:	10017028 	.word	0x10017028

1000cd58 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000cd58:	b510      	push	{r4, lr}
1000cd5a:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000cd5c:	ac08      	add	r4, sp, #32
1000cd5e:	2203      	movs	r2, #3
1000cd60:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000cd62:	2302      	movs	r3, #2
1000cd64:	70a3      	strb	r3, [r4, #2]
1000cd66:	3316      	adds	r3, #22
1000cd68:	70e3      	strb	r3, [r4, #3]
1000cd6a:	7122      	strb	r2, [r4, #4]
1000cd6c:	7163      	strb	r3, [r4, #5]
1000cd6e:	3201      	adds	r2, #1
1000cd70:	71a2      	strb	r2, [r4, #6]
1000cd72:	71e3      	strb	r3, [r4, #7]
1000cd74:	320b      	adds	r2, #11
1000cd76:	7222      	strb	r2, [r4, #8]
1000cd78:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000cd7a:	3b0f      	subs	r3, #15
1000cd7c:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000cd7e:	3a05      	subs	r2, #5
1000cd80:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000cd82:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000cd84:	aa0b      	add	r2, sp, #44	; 0x2c
1000cd86:	4b16      	ldr	r3, [pc, #88]	; (1000cde0 <ble_advertisement_data_set+0x88>)
1000cd88:	cb03      	ldmia	r3!, {r0, r1}
1000cd8a:	c203      	stmia	r2!, {r0, r1}
1000cd8c:	781b      	ldrb	r3, [r3, #0]
1000cd8e:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000cd90:	2300      	movs	r3, #0
1000cd92:	466a      	mov	r2, sp
1000cd94:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000cd96:	3315      	adds	r3, #21
1000cd98:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000cd9a:	4812      	ldr	r0, [pc, #72]	; (1000cde4 <ble_advertisement_data_set+0x8c>)
1000cd9c:	4b12      	ldr	r3, [pc, #72]	; (1000cde8 <ble_advertisement_data_set+0x90>)
1000cd9e:	4798      	blx	r3
1000cda0:	4812      	ldr	r0, [pc, #72]	; (1000cdec <ble_advertisement_data_set+0x94>)
1000cda2:	4b13      	ldr	r3, [pc, #76]	; (1000cdf0 <ble_advertisement_data_set+0x98>)
1000cda4:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000cda6:	2307      	movs	r3, #7
1000cda8:	466a      	mov	r2, sp
1000cdaa:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000cdac:	33f8      	adds	r3, #248	; 0xf8
1000cdae:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000cdb0:	2206      	movs	r2, #6
1000cdb2:	4910      	ldr	r1, [pc, #64]	; (1000cdf4 <ble_advertisement_data_set+0x9c>)
1000cdb4:	466b      	mov	r3, sp
1000cdb6:	1c98      	adds	r0, r3, #2
1000cdb8:	4b0f      	ldr	r3, [pc, #60]	; (1000cdf8 <ble_advertisement_data_set+0xa0>)
1000cdba:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000cdbc:	2308      	movs	r3, #8
1000cdbe:	466a      	mov	r2, sp
1000cdc0:	2115      	movs	r1, #21
1000cdc2:	0020      	movs	r0, r4
1000cdc4:	4c0d      	ldr	r4, [pc, #52]	; (1000cdfc <ble_advertisement_data_set+0xa4>)
1000cdc6:	47a0      	blx	r4
1000cdc8:	2800      	cmp	r0, #0
1000cdca:	d005      	beq.n	1000cdd8 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000cdcc:	4805      	ldr	r0, [pc, #20]	; (1000cde4 <ble_advertisement_data_set+0x8c>)
1000cdce:	4b06      	ldr	r3, [pc, #24]	; (1000cde8 <ble_advertisement_data_set+0x90>)
1000cdd0:	4798      	blx	r3
1000cdd2:	480b      	ldr	r0, [pc, #44]	; (1000ce00 <ble_advertisement_data_set+0xa8>)
1000cdd4:	4b06      	ldr	r3, [pc, #24]	; (1000cdf0 <ble_advertisement_data_set+0x98>)
1000cdd6:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000cdd8:	2000      	movs	r0, #0
1000cdda:	b010      	add	sp, #64	; 0x40
1000cddc:	bd10      	pop	{r4, pc}
1000cdde:	46c0      	nop			; (mov r8, r8)
1000cde0:	10016d7c 	.word	0x10016d7c
1000cde4:	1001597c 	.word	0x1001597c
1000cde8:	10014a3d 	.word	0x10014a3d
1000cdec:	10017080 	.word	0x10017080
1000cdf0:	1001491d 	.word	0x1001491d
1000cdf4:	100170b4 	.word	0x100170b4
1000cdf8:	100147c3 	.word	0x100147c3
1000cdfc:	1000e611 	.word	0x1000e611
1000ce00:	100170bc 	.word	0x100170bc

1000ce04 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000ce04:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000ce06:	4b0e      	ldr	r3, [pc, #56]	; (1000ce40 <uart_read_complete_callback+0x3c>)
1000ce08:	781b      	ldrb	r3, [r3, #0]
1000ce0a:	2b01      	cmp	r3, #1
1000ce0c:	d10b      	bne.n	1000ce26 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000ce0e:	2202      	movs	r2, #2
1000ce10:	4b0b      	ldr	r3, [pc, #44]	; (1000ce40 <uart_read_complete_callback+0x3c>)
1000ce12:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000ce14:	4b0b      	ldr	r3, [pc, #44]	; (1000ce44 <uart_read_complete_callback+0x40>)
1000ce16:	681b      	ldr	r3, [r3, #0]
1000ce18:	2b00      	cmp	r3, #0
1000ce1a:	d110      	bne.n	1000ce3e <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000ce1c:	2102      	movs	r1, #2
1000ce1e:	480a      	ldr	r0, [pc, #40]	; (1000ce48 <uart_read_complete_callback+0x44>)
1000ce20:	4b0a      	ldr	r3, [pc, #40]	; (1000ce4c <uart_read_complete_callback+0x48>)
1000ce22:	4798      	blx	r3
1000ce24:	e00b      	b.n	1000ce3e <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000ce26:	4b07      	ldr	r3, [pc, #28]	; (1000ce44 <uart_read_complete_callback+0x40>)
1000ce28:	681b      	ldr	r3, [r3, #0]
1000ce2a:	2b00      	cmp	r3, #0
1000ce2c:	d007      	beq.n	1000ce3e <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ce2e:	4c08      	ldr	r4, [pc, #32]	; (1000ce50 <uart_read_complete_callback+0x4c>)
1000ce30:	7820      	ldrb	r0, [r4, #0]
1000ce32:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ce34:	2201      	movs	r2, #1
1000ce36:	0021      	movs	r1, r4
1000ce38:	4803      	ldr	r0, [pc, #12]	; (1000ce48 <uart_read_complete_callback+0x44>)
1000ce3a:	4b06      	ldr	r3, [pc, #24]	; (1000ce54 <uart_read_complete_callback+0x50>)
1000ce3c:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ce3e:	bd10      	pop	{r4, pc}
1000ce40:	10018d1c 	.word	0x10018d1c
1000ce44:	10018d24 	.word	0x10018d24
1000ce48:	10019a50 	.word	0x10019a50
1000ce4c:	1000b9f1 	.word	0x1000b9f1
1000ce50:	10018d20 	.word	0x10018d20
1000ce54:	1000b995 	.word	0x1000b995

1000ce58 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ce58:	b570      	push	{r4, r5, r6, lr}
1000ce5a:	0006      	movs	r6, r0
1000ce5c:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ce5e:	4c03      	ldr	r4, [pc, #12]	; (1000ce6c <usart_serial_getchar+0x14>)
1000ce60:	0029      	movs	r1, r5
1000ce62:	0030      	movs	r0, r6
1000ce64:	47a0      	blx	r4
1000ce66:	2800      	cmp	r0, #0
1000ce68:	d1fa      	bne.n	1000ce60 <usart_serial_getchar+0x8>
}
1000ce6a:	bd70      	pop	{r4, r5, r6, pc}
1000ce6c:	1000b981 	.word	0x1000b981

1000ce70 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ce70:	b570      	push	{r4, r5, r6, lr}
1000ce72:	0006      	movs	r6, r0
1000ce74:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ce76:	4c03      	ldr	r4, [pc, #12]	; (1000ce84 <usart_serial_putchar+0x14>)
1000ce78:	0029      	movs	r1, r5
1000ce7a:	0030      	movs	r0, r6
1000ce7c:	47a0      	blx	r4
1000ce7e:	2800      	cmp	r0, #0
1000ce80:	d1fa      	bne.n	1000ce78 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ce82:	bd70      	pop	{r4, r5, r6, pc}
1000ce84:	1000b971 	.word	0x1000b971

1000ce88 <serial_console_init>:

void serial_console_init(void)
{
1000ce88:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000ce8a:	2100      	movs	r1, #0
1000ce8c:	2000      	movs	r0, #0
1000ce8e:	4b19      	ldr	r3, [pc, #100]	; (1000cef4 <serial_console_init+0x6c>)
1000ce90:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000ce92:	4c19      	ldr	r4, [pc, #100]	; (1000cef8 <serial_console_init+0x70>)
1000ce94:	0020      	movs	r0, r4
1000ce96:	4b19      	ldr	r3, [pc, #100]	; (1000cefc <serial_console_init+0x74>)
1000ce98:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000ce9a:	23e1      	movs	r3, #225	; 0xe1
1000ce9c:	025b      	lsls	r3, r3, #9
1000ce9e:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000cea0:	2302      	movs	r3, #2
1000cea2:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000cea4:	2203      	movs	r2, #3
1000cea6:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000cea8:	3201      	adds	r2, #1
1000ceaa:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000ceac:	3201      	adds	r2, #1
1000ceae:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000ceb0:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000ceb2:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000ceb4:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000ceb6:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000ceb8:	4d11      	ldr	r5, [pc, #68]	; (1000cf00 <serial_console_init+0x78>)
1000ceba:	4b12      	ldr	r3, [pc, #72]	; (1000cf04 <serial_console_init+0x7c>)
1000cebc:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000cebe:	4a12      	ldr	r2, [pc, #72]	; (1000cf08 <serial_console_init+0x80>)
1000cec0:	4b12      	ldr	r3, [pc, #72]	; (1000cf0c <serial_console_init+0x84>)
1000cec2:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000cec4:	4a12      	ldr	r2, [pc, #72]	; (1000cf10 <serial_console_init+0x88>)
1000cec6:	4b13      	ldr	r3, [pc, #76]	; (1000cf14 <serial_console_init+0x8c>)
1000cec8:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000ceca:	0022      	movs	r2, r4
1000cecc:	4912      	ldr	r1, [pc, #72]	; (1000cf18 <serial_console_init+0x90>)
1000cece:	0028      	movs	r0, r5
1000ced0:	4b12      	ldr	r3, [pc, #72]	; (1000cf1c <serial_console_init+0x94>)
1000ced2:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000ced4:	4e12      	ldr	r6, [pc, #72]	; (1000cf20 <serial_console_init+0x98>)
1000ced6:	6833      	ldr	r3, [r6, #0]
1000ced8:	6898      	ldr	r0, [r3, #8]
1000ceda:	2100      	movs	r1, #0
1000cedc:	4c11      	ldr	r4, [pc, #68]	; (1000cf24 <serial_console_init+0x9c>)
1000cede:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000cee0:	6833      	ldr	r3, [r6, #0]
1000cee2:	6858      	ldr	r0, [r3, #4]
1000cee4:	2100      	movs	r1, #0
1000cee6:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000cee8:	2202      	movs	r2, #2
1000ceea:	490f      	ldr	r1, [pc, #60]	; (1000cf28 <serial_console_init+0xa0>)
1000ceec:	0028      	movs	r0, r5
1000ceee:	4b0f      	ldr	r3, [pc, #60]	; (1000cf2c <serial_console_init+0xa4>)
1000cef0:	4798      	blx	r3
}
1000cef2:	bd70      	pop	{r4, r5, r6, pc}
1000cef4:	1000a991 	.word	0x1000a991
1000cef8:	10019a74 	.word	0x10019a74
1000cefc:	1000b789 	.word	0x1000b789
1000cf00:	10019a50 	.word	0x10019a50
1000cf04:	1001920c 	.word	0x1001920c
1000cf08:	1000ce71 	.word	0x1000ce71
1000cf0c:	10019208 	.word	0x10019208
1000cf10:	1000ce59 	.word	0x1000ce59
1000cf14:	10019204 	.word	0x10019204
1000cf18:	40004000 	.word	0x40004000
1000cf1c:	1000b7b5 	.word	0x1000b7b5
1000cf20:	100173f8 	.word	0x100173f8
1000cf24:	10014aed 	.word	0x10014aed
1000cf28:	1000ce05 	.word	0x1000ce05
1000cf2c:	1000b9bd 	.word	0x1000b9bd

1000cf30 <_time_start>:

void _time_start(unsigned int sec)
{
1000cf30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cf32:	b083      	sub	sp, #12
1000cf34:	0005      	movs	r5, r0
	system_clock_get_value();
1000cf36:	4c0d      	ldr	r4, [pc, #52]	; (1000cf6c <_time_start+0x3c>)
1000cf38:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000cf3a:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000cf3c:	4f0c      	ldr	r7, [pc, #48]	; (1000cf70 <_time_start+0x40>)
1000cf3e:	47b8      	blx	r7
1000cf40:	4e0c      	ldr	r6, [pc, #48]	; (1000cf74 <_time_start+0x44>)
1000cf42:	4a0d      	ldr	r2, [pc, #52]	; (1000cf78 <_time_start+0x48>)
1000cf44:	4b0d      	ldr	r3, [pc, #52]	; (1000cf7c <_time_start+0x4c>)
1000cf46:	47b0      	blx	r6
1000cf48:	9000      	str	r0, [sp, #0]
1000cf4a:	9101      	str	r1, [sp, #4]
1000cf4c:	20fa      	movs	r0, #250	; 0xfa
1000cf4e:	0080      	lsls	r0, r0, #2
1000cf50:	4368      	muls	r0, r5
1000cf52:	47b8      	blx	r7
1000cf54:	0002      	movs	r2, r0
1000cf56:	000b      	movs	r3, r1
1000cf58:	9800      	ldr	r0, [sp, #0]
1000cf5a:	9901      	ldr	r1, [sp, #4]
1000cf5c:	47b0      	blx	r6
1000cf5e:	4b08      	ldr	r3, [pc, #32]	; (1000cf80 <_time_start+0x50>)
1000cf60:	4798      	blx	r3
1000cf62:	4b08      	ldr	r3, [pc, #32]	; (1000cf84 <_time_start+0x54>)
1000cf64:	6018      	str	r0, [r3, #0]
}
1000cf66:	b003      	add	sp, #12
1000cf68:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cf6a:	46c0      	nop			; (mov r8, r8)
1000cf6c:	1000aa15 	.word	0x1000aa15
1000cf70:	100144cd 	.word	0x100144cd
1000cf74:	10013801 	.word	0x10013801
1000cf78:	19feaec7 	.word	0x19feaec7
1000cf7c:	3f09d8ef 	.word	0x3f09d8ef
1000cf80:	100123bd 	.word	0x100123bd
1000cf84:	10018d18 	.word	0x10018d18

1000cf88 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000cf88:	4b02      	ldr	r3, [pc, #8]	; (1000cf94 <_time_done+0xc>)
1000cf8a:	681a      	ldr	r2, [r3, #0]
1000cf8c:	1e50      	subs	r0, r2, #1
1000cf8e:	6018      	str	r0, [r3, #0]
}
1000cf90:	4770      	bx	lr
1000cf92:	46c0      	nop			; (mov r8, r8)
1000cf94:	10018d18 	.word	0x10018d18

1000cf98 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000cf98:	b570      	push	{r4, r5, r6, lr}
1000cf9a:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000cf9c:	2201      	movs	r2, #1
1000cf9e:	4b11      	ldr	r3, [pc, #68]	; (1000cfe4 <getchar_b11_timeout+0x4c>)
1000cfa0:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000cfa2:	4b11      	ldr	r3, [pc, #68]	; (1000cfe8 <getchar_b11_timeout+0x50>)
1000cfa4:	681b      	ldr	r3, [r3, #0]
1000cfa6:	2b00      	cmp	r3, #0
1000cfa8:	d103      	bne.n	1000cfb2 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000cfaa:	2102      	movs	r1, #2
1000cfac:	480f      	ldr	r0, [pc, #60]	; (1000cfec <getchar_b11_timeout+0x54>)
1000cfae:	4b10      	ldr	r3, [pc, #64]	; (1000cff0 <getchar_b11_timeout+0x58>)
1000cfb0:	4798      	blx	r3

	_time_start(sec);
1000cfb2:	0020      	movs	r0, r4
1000cfb4:	4b0f      	ldr	r3, [pc, #60]	; (1000cff4 <getchar_b11_timeout+0x5c>)
1000cfb6:	4798      	blx	r3
	
	string_input[0] = 0;
1000cfb8:	490f      	ldr	r1, [pc, #60]	; (1000cff8 <getchar_b11_timeout+0x60>)
1000cfba:	2300      	movs	r3, #0
1000cfbc:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000cfbe:	2201      	movs	r2, #1
1000cfc0:	480a      	ldr	r0, [pc, #40]	; (1000cfec <getchar_b11_timeout+0x54>)
1000cfc2:	4b0e      	ldr	r3, [pc, #56]	; (1000cffc <getchar_b11_timeout+0x64>)
1000cfc4:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000cfc6:	4c07      	ldr	r4, [pc, #28]	; (1000cfe4 <getchar_b11_timeout+0x4c>)
1000cfc8:	4d0d      	ldr	r5, [pc, #52]	; (1000d000 <getchar_b11_timeout+0x68>)
1000cfca:	7823      	ldrb	r3, [r4, #0]
1000cfcc:	2b02      	cmp	r3, #2
1000cfce:	d002      	beq.n	1000cfd6 <getchar_b11_timeout+0x3e>
1000cfd0:	47a8      	blx	r5
1000cfd2:	2800      	cmp	r0, #0
1000cfd4:	d1f9      	bne.n	1000cfca <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000cfd6:	2200      	movs	r2, #0
1000cfd8:	4b02      	ldr	r3, [pc, #8]	; (1000cfe4 <getchar_b11_timeout+0x4c>)
1000cfda:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000cfdc:	4b06      	ldr	r3, [pc, #24]	; (1000cff8 <getchar_b11_timeout+0x60>)
1000cfde:	7818      	ldrb	r0, [r3, #0]
}
1000cfe0:	bd70      	pop	{r4, r5, r6, pc}
1000cfe2:	46c0      	nop			; (mov r8, r8)
1000cfe4:	10018d1c 	.word	0x10018d1c
1000cfe8:	10018d24 	.word	0x10018d24
1000cfec:	10019a50 	.word	0x10019a50
1000cff0:	1000b9d1 	.word	0x1000b9d1
1000cff4:	1000cf31 	.word	0x1000cf31
1000cff8:	10018d20 	.word	0x10018d20
1000cffc:	1000b995 	.word	0x1000b995
1000d000:	1000cf89 	.word	0x1000cf89

1000d004 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d004:	4b02      	ldr	r3, [pc, #8]	; (1000d010 <platform_event_free+0xc>)
1000d006:	681a      	ldr	r2, [r3, #0]
1000d008:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d00a:	6018      	str	r0, [r3, #0]
}
1000d00c:	4770      	bx	lr
1000d00e:	46c0      	nop			; (mov r8, r8)
1000d010:	10018d2c 	.word	0x10018d2c

1000d014 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d014:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d016:	4b0b      	ldr	r3, [pc, #44]	; (1000d044 <platform_event_post+0x30>)
1000d018:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d01a:	2c00      	cmp	r4, #0
1000d01c:	d011      	beq.n	1000d042 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d01e:	6825      	ldr	r5, [r4, #0]
1000d020:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d022:	2300      	movs	r3, #0
1000d024:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d026:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d028:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d02a:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d02c:	4b06      	ldr	r3, [pc, #24]	; (1000d048 <platform_event_post+0x34>)
1000d02e:	681a      	ldr	r2, [r3, #0]
1000d030:	2a00      	cmp	r2, #0
1000d032:	d102      	bne.n	1000d03a <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d034:	601c      	str	r4, [r3, #0]
1000d036:	e004      	b.n	1000d042 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d038:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d03a:	6813      	ldr	r3, [r2, #0]
1000d03c:	2b00      	cmp	r3, #0
1000d03e:	d1fb      	bne.n	1000d038 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d040:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d042:	bd30      	pop	{r4, r5, pc}
1000d044:	10018d2c 	.word	0x10018d2c
1000d048:	10018d28 	.word	0x10018d28

1000d04c <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d04c:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d04e:	2300      	movs	r3, #0
1000d050:	4a06      	ldr	r2, [pc, #24]	; (1000d06c <platform_event_init+0x20>)
1000d052:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d054:	4a06      	ldr	r2, [pc, #24]	; (1000d070 <platform_event_init+0x24>)
1000d056:	6013      	str	r3, [r2, #0]
1000d058:	4c06      	ldr	r4, [pc, #24]	; (1000d074 <platform_event_init+0x28>)
1000d05a:	0026      	movs	r6, r4
1000d05c:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d05e:	4d06      	ldr	r5, [pc, #24]	; (1000d078 <platform_event_init+0x2c>)
1000d060:	0020      	movs	r0, r4
1000d062:	47a8      	blx	r5
1000d064:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d066:	42b4      	cmp	r4, r6
1000d068:	d1fa      	bne.n	1000d060 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d06a:	bd70      	pop	{r4, r5, r6, pc}
1000d06c:	10018d2c 	.word	0x10018d2c
1000d070:	10018d28 	.word	0x10018d28
1000d074:	10018d30 	.word	0x10018d30
1000d078:	1000d005 	.word	0x1000d005

1000d07c <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d07c:	b570      	push	{r4, r5, r6, lr}
1000d07e:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d080:	4b13      	ldr	r3, [pc, #76]	; (1000d0d0 <at_ke_msg_send+0x54>)
1000d082:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d084:	4b13      	ldr	r3, [pc, #76]	; (1000d0d4 <at_ke_msg_send+0x58>)
1000d086:	681b      	ldr	r3, [r3, #0]
1000d088:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d08a:	2c0c      	cmp	r4, #12
1000d08c:	d01f      	beq.n	1000d0ce <at_ke_msg_send+0x52>
1000d08e:	3c0c      	subs	r4, #12
1000d090:	88e3      	ldrh	r3, [r4, #6]
1000d092:	2b05      	cmp	r3, #5
1000d094:	d01b      	beq.n	1000d0ce <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d096:	07eb      	lsls	r3, r5, #31
1000d098:	d414      	bmi.n	1000d0c4 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d09a:	4b0f      	ldr	r3, [pc, #60]	; (1000d0d8 <at_ke_msg_send+0x5c>)
1000d09c:	681b      	ldr	r3, [r3, #0]
1000d09e:	2002      	movs	r0, #2
1000d0a0:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d0a2:	4b0e      	ldr	r3, [pc, #56]	; (1000d0dc <at_ke_msg_send+0x60>)
1000d0a4:	681b      	ldr	r3, [r3, #0]
1000d0a6:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d0a8:	4c0d      	ldr	r4, [pc, #52]	; (1000d0e0 <at_ke_msg_send+0x64>)
1000d0aa:	2003      	movs	r0, #3
1000d0ac:	6823      	ldr	r3, [r4, #0]
1000d0ae:	4798      	blx	r3
1000d0b0:	2800      	cmp	r0, #0
1000d0b2:	d1fa      	bne.n	1000d0aa <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d0b4:	4b0b      	ldr	r3, [pc, #44]	; (1000d0e4 <at_ke_msg_send+0x68>)
1000d0b6:	681b      	ldr	r3, [r3, #0]
1000d0b8:	3002      	adds	r0, #2
1000d0ba:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d0bc:	2201      	movs	r2, #1
1000d0be:	4b0a      	ldr	r3, [pc, #40]	; (1000d0e8 <at_ke_msg_send+0x6c>)
1000d0c0:	601a      	str	r2, [r3, #0]
1000d0c2:	e004      	b.n	1000d0ce <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d0c4:	4b09      	ldr	r3, [pc, #36]	; (1000d0ec <at_ke_msg_send+0x70>)
1000d0c6:	6818      	ldr	r0, [r3, #0]
1000d0c8:	4b09      	ldr	r3, [pc, #36]	; (1000d0f0 <at_ke_msg_send+0x74>)
1000d0ca:	681b      	ldr	r3, [r3, #0]
1000d0cc:	4798      	blx	r3
		}
	}
}
1000d0ce:	bd70      	pop	{r4, r5, r6, pc}
1000d0d0:	4000b1ec 	.word	0x4000b1ec
1000d0d4:	10018dd8 	.word	0x10018dd8
1000d0d8:	10018dd0 	.word	0x10018dd0
1000d0dc:	10018de4 	.word	0x10018de4
1000d0e0:	10018db8 	.word	0x10018db8
1000d0e4:	10018dc0 	.word	0x10018dc0
1000d0e8:	4000b020 	.word	0x4000b020
1000d0ec:	10018dc4 	.word	0x10018dc4
1000d0f0:	10018db4 	.word	0x10018db4

1000d0f4 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d0f4:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d0f6:	4b06      	ldr	r3, [pc, #24]	; (1000d110 <samb11_plf_resume_callback+0x1c>)
1000d0f8:	4a06      	ldr	r2, [pc, #24]	; (1000d114 <samb11_plf_resume_callback+0x20>)
1000d0fa:	6819      	ldr	r1, [r3, #0]
1000d0fc:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d0fe:	685a      	ldr	r2, [r3, #4]
1000d100:	4b05      	ldr	r3, [pc, #20]	; (1000d118 <samb11_plf_resume_callback+0x24>)
1000d102:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d104:	4b05      	ldr	r3, [pc, #20]	; (1000d11c <samb11_plf_resume_callback+0x28>)
1000d106:	681b      	ldr	r3, [r3, #0]
1000d108:	2b00      	cmp	r3, #0
1000d10a:	d000      	beq.n	1000d10e <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d10c:	4798      	blx	r3
	}
}
1000d10e:	bd10      	pop	{r4, pc}
1000d110:	10019a9c 	.word	0x10019a9c
1000d114:	4000b00c 	.word	0x4000b00c
1000d118:	4000b010 	.word	0x4000b010
1000d11c:	10019d78 	.word	0x10019d78

1000d120 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d120:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d122:	2232      	movs	r2, #50	; 0x32
1000d124:	2100      	movs	r1, #0
1000d126:	480d      	ldr	r0, [pc, #52]	; (1000d15c <init_port_list+0x3c>)
1000d128:	4b0d      	ldr	r3, [pc, #52]	; (1000d160 <init_port_list+0x40>)
1000d12a:	4798      	blx	r3
1000d12c:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d12e:	480b      	ldr	r0, [pc, #44]	; (1000d15c <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d130:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d132:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d134:	004a      	lsls	r2, r1, #1
1000d136:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d138:	1882      	adds	r2, r0, r2
1000d13a:	7853      	ldrb	r3, [r2, #1]
1000d13c:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d13e:	b2db      	uxtb	r3, r3
1000d140:	43a3      	bics	r3, r4
1000d142:	7053      	strb	r3, [r2, #1]
1000d144:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d146:	2919      	cmp	r1, #25
1000d148:	d1f4      	bne.n	1000d134 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d14a:	4b04      	ldr	r3, [pc, #16]	; (1000d15c <init_port_list+0x3c>)
1000d14c:	785a      	ldrb	r2, [r3, #1]
1000d14e:	3918      	subs	r1, #24
1000d150:	438a      	bics	r2, r1
1000d152:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d154:	78da      	ldrb	r2, [r3, #3]
1000d156:	438a      	bics	r2, r1
1000d158:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d15a:	bd70      	pop	{r4, r5, r6, pc}
1000d15c:	10019ab8 	.word	0x10019ab8
1000d160:	100147d5 	.word	0x100147d5

1000d164 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d164:	4a06      	ldr	r2, [pc, #24]	; (1000d180 <init_clock+0x1c>)
1000d166:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d168:	4b06      	ldr	r3, [pc, #24]	; (1000d184 <init_clock+0x20>)
1000d16a:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d16c:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d16e:	4a06      	ldr	r2, [pc, #24]	; (1000d188 <init_clock+0x24>)
1000d170:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d172:	4906      	ldr	r1, [pc, #24]	; (1000d18c <init_clock+0x28>)
1000d174:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d176:	4b06      	ldr	r3, [pc, #24]	; (1000d190 <init_clock+0x2c>)
1000d178:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d17a:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d17c:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d17e:	4770      	bx	lr
1000d180:	4000b00c 	.word	0x4000b00c
1000d184:	fffe0fd3 	.word	0xfffe0fd3
1000d188:	10019a9c 	.word	0x10019a9c
1000d18c:	4000b010 	.word	0x4000b010
1000d190:	ffffe7c0 	.word	0xffffe7c0

1000d194 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d194:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d196:	4657      	mov	r7, sl
1000d198:	464e      	mov	r6, r9
1000d19a:	4645      	mov	r5, r8
1000d19c:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d19e:	4b4f      	ldr	r3, [pc, #316]	; (1000d2dc <platform_driver_init+0x148>)
1000d1a0:	781b      	ldrb	r3, [r3, #0]
1000d1a2:	2b00      	cmp	r3, #0
1000d1a4:	d004      	beq.n	1000d1b0 <platform_driver_init+0x1c>
1000d1a6:	4b4d      	ldr	r3, [pc, #308]	; (1000d2dc <platform_driver_init+0x148>)
1000d1a8:	781b      	ldrb	r3, [r3, #0]
1000d1aa:	2b01      	cmp	r3, #1
1000d1ac:	d100      	bne.n	1000d1b0 <platform_driver_init+0x1c>
1000d1ae:	e08c      	b.n	1000d2ca <platform_driver_init+0x136>
		init_port_list();
1000d1b0:	4b4b      	ldr	r3, [pc, #300]	; (1000d2e0 <platform_driver_init+0x14c>)
1000d1b2:	4798      	blx	r3
		init_clock();
1000d1b4:	4b4b      	ldr	r3, [pc, #300]	; (1000d2e4 <platform_driver_init+0x150>)
1000d1b6:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d1b8:	2300      	movs	r3, #0
1000d1ba:	4698      	mov	r8, r3
1000d1bc:	4b4a      	ldr	r3, [pc, #296]	; (1000d2e8 <platform_driver_init+0x154>)
1000d1be:	4642      	mov	r2, r8
1000d1c0:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d1c2:	4c4a      	ldr	r4, [pc, #296]	; (1000d2ec <platform_driver_init+0x158>)
1000d1c4:	2380      	movs	r3, #128	; 0x80
1000d1c6:	2280      	movs	r2, #128	; 0x80
1000d1c8:	0412      	lsls	r2, r2, #16
1000d1ca:	4692      	mov	sl, r2
1000d1cc:	50e2      	str	r2, [r4, r3]
1000d1ce:	2280      	movs	r2, #128	; 0x80
1000d1d0:	0452      	lsls	r2, r2, #17
1000d1d2:	4691      	mov	r9, r2
1000d1d4:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d1d6:	4d46      	ldr	r5, [pc, #280]	; (1000d2f0 <platform_driver_init+0x15c>)
1000d1d8:	4b46      	ldr	r3, [pc, #280]	; (1000d2f4 <platform_driver_init+0x160>)
1000d1da:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d1dc:	4b46      	ldr	r3, [pc, #280]	; (1000d2f8 <platform_driver_init+0x164>)
1000d1de:	4a47      	ldr	r2, [pc, #284]	; (1000d2fc <platform_driver_init+0x168>)
1000d1e0:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d1e2:	4947      	ldr	r1, [pc, #284]	; (1000d300 <platform_driver_init+0x16c>)
1000d1e4:	4a47      	ldr	r2, [pc, #284]	; (1000d304 <platform_driver_init+0x170>)
1000d1e6:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d1e8:	4a47      	ldr	r2, [pc, #284]	; (1000d308 <platform_driver_init+0x174>)
1000d1ea:	6811      	ldr	r1, [r2, #0]
1000d1ec:	4a47      	ldr	r2, [pc, #284]	; (1000d30c <platform_driver_init+0x178>)
1000d1ee:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d1f0:	4a47      	ldr	r2, [pc, #284]	; (1000d310 <platform_driver_init+0x17c>)
1000d1f2:	6811      	ldr	r1, [r2, #0]
1000d1f4:	4a47      	ldr	r2, [pc, #284]	; (1000d314 <platform_driver_init+0x180>)
1000d1f6:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d1f8:	4947      	ldr	r1, [pc, #284]	; (1000d318 <platform_driver_init+0x184>)
1000d1fa:	4a48      	ldr	r2, [pc, #288]	; (1000d31c <platform_driver_init+0x188>)
1000d1fc:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d1fe:	4948      	ldr	r1, [pc, #288]	; (1000d320 <platform_driver_init+0x18c>)
1000d200:	4a48      	ldr	r2, [pc, #288]	; (1000d324 <platform_driver_init+0x190>)
1000d202:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d204:	4f48      	ldr	r7, [pc, #288]	; (1000d328 <platform_driver_init+0x194>)
1000d206:	4a49      	ldr	r2, [pc, #292]	; (1000d32c <platform_driver_init+0x198>)
1000d208:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d20a:	4949      	ldr	r1, [pc, #292]	; (1000d330 <platform_driver_init+0x19c>)
1000d20c:	4a49      	ldr	r2, [pc, #292]	; (1000d334 <platform_driver_init+0x1a0>)
1000d20e:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d210:	4949      	ldr	r1, [pc, #292]	; (1000d338 <platform_driver_init+0x1a4>)
1000d212:	4a4a      	ldr	r2, [pc, #296]	; (1000d33c <platform_driver_init+0x1a8>)
1000d214:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d216:	4e4a      	ldr	r6, [pc, #296]	; (1000d340 <platform_driver_init+0x1ac>)
1000d218:	4a4a      	ldr	r2, [pc, #296]	; (1000d344 <platform_driver_init+0x1b0>)
1000d21a:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d21c:	494a      	ldr	r1, [pc, #296]	; (1000d348 <platform_driver_init+0x1b4>)
1000d21e:	4a4b      	ldr	r2, [pc, #300]	; (1000d34c <platform_driver_init+0x1b8>)
1000d220:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d222:	494b      	ldr	r1, [pc, #300]	; (1000d350 <platform_driver_init+0x1bc>)
1000d224:	4a4b      	ldr	r2, [pc, #300]	; (1000d354 <platform_driver_init+0x1c0>)
1000d226:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d228:	494b      	ldr	r1, [pc, #300]	; (1000d358 <platform_driver_init+0x1c4>)
1000d22a:	4a4c      	ldr	r2, [pc, #304]	; (1000d35c <platform_driver_init+0x1c8>)
1000d22c:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d22e:	494c      	ldr	r1, [pc, #304]	; (1000d360 <platform_driver_init+0x1cc>)
1000d230:	4a4c      	ldr	r2, [pc, #304]	; (1000d364 <platform_driver_init+0x1d0>)
1000d232:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d234:	494c      	ldr	r1, [pc, #304]	; (1000d368 <platform_driver_init+0x1d4>)
1000d236:	4a4d      	ldr	r2, [pc, #308]	; (1000d36c <platform_driver_init+0x1d8>)
1000d238:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d23a:	2028      	movs	r0, #40	; 0x28
1000d23c:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d23e:	494c      	ldr	r1, [pc, #304]	; (1000d370 <platform_driver_init+0x1dc>)
1000d240:	2028      	movs	r0, #40	; 0x28
1000d242:	682b      	ldr	r3, [r5, #0]
1000d244:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d246:	682b      	ldr	r3, [r5, #0]
1000d248:	494a      	ldr	r1, [pc, #296]	; (1000d374 <platform_driver_init+0x1e0>)
1000d24a:	2027      	movs	r0, #39	; 0x27
1000d24c:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d24e:	4b4a      	ldr	r3, [pc, #296]	; (1000d378 <platform_driver_init+0x1e4>)
1000d250:	681a      	ldr	r2, [r3, #0]
1000d252:	4b4a      	ldr	r3, [pc, #296]	; (1000d37c <platform_driver_init+0x1e8>)
1000d254:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d256:	4a4a      	ldr	r2, [pc, #296]	; (1000d380 <platform_driver_init+0x1ec>)
1000d258:	4b4a      	ldr	r3, [pc, #296]	; (1000d384 <platform_driver_init+0x1f0>)
1000d25a:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d25c:	4a4a      	ldr	r2, [pc, #296]	; (1000d388 <platform_driver_init+0x1f4>)
1000d25e:	4b4b      	ldr	r3, [pc, #300]	; (1000d38c <platform_driver_init+0x1f8>)
1000d260:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d262:	4a4b      	ldr	r2, [pc, #300]	; (1000d390 <platform_driver_init+0x1fc>)
1000d264:	4b4b      	ldr	r3, [pc, #300]	; (1000d394 <platform_driver_init+0x200>)
1000d266:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d268:	4a4b      	ldr	r2, [pc, #300]	; (1000d398 <platform_driver_init+0x204>)
1000d26a:	4b4c      	ldr	r3, [pc, #304]	; (1000d39c <platform_driver_init+0x208>)
1000d26c:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d26e:	4a4c      	ldr	r2, [pc, #304]	; (1000d3a0 <platform_driver_init+0x20c>)
1000d270:	4b4c      	ldr	r3, [pc, #304]	; (1000d3a4 <platform_driver_init+0x210>)
1000d272:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d274:	4a4c      	ldr	r2, [pc, #304]	; (1000d3a8 <platform_driver_init+0x214>)
1000d276:	4b4d      	ldr	r3, [pc, #308]	; (1000d3ac <platform_driver_init+0x218>)
1000d278:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d27a:	4a4d      	ldr	r2, [pc, #308]	; (1000d3b0 <platform_driver_init+0x21c>)
1000d27c:	4b4d      	ldr	r3, [pc, #308]	; (1000d3b4 <platform_driver_init+0x220>)
1000d27e:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d280:	22a0      	movs	r2, #160	; 0xa0
1000d282:	0092      	lsls	r2, r2, #2
1000d284:	2100      	movs	r1, #0
1000d286:	484c      	ldr	r0, [pc, #304]	; (1000d3b8 <platform_driver_init+0x224>)
1000d288:	4b4c      	ldr	r3, [pc, #304]	; (1000d3bc <platform_driver_init+0x228>)
1000d28a:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d28c:	2280      	movs	r2, #128	; 0x80
1000d28e:	0092      	lsls	r2, r2, #2
1000d290:	4b4b      	ldr	r3, [pc, #300]	; (1000d3c0 <platform_driver_init+0x22c>)
1000d292:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d294:	4b4b      	ldr	r3, [pc, #300]	; (1000d3c4 <platform_driver_init+0x230>)
1000d296:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d298:	4653      	mov	r3, sl
1000d29a:	6023      	str	r3, [r4, #0]
1000d29c:	464b      	mov	r3, r9
1000d29e:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d2a0:	4b49      	ldr	r3, [pc, #292]	; (1000d3c8 <platform_driver_init+0x234>)
1000d2a2:	4642      	mov	r2, r8
1000d2a4:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d2a6:	683b      	ldr	r3, [r7, #0]
1000d2a8:	4a48      	ldr	r2, [pc, #288]	; (1000d3cc <platform_driver_init+0x238>)
1000d2aa:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d2ac:	6833      	ldr	r3, [r6, #0]
1000d2ae:	4a48      	ldr	r2, [pc, #288]	; (1000d3d0 <platform_driver_init+0x23c>)
1000d2b0:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d2b2:	2000      	movs	r0, #0
1000d2b4:	4c47      	ldr	r4, [pc, #284]	; (1000d3d4 <platform_driver_init+0x240>)
1000d2b6:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d2b8:	2001      	movs	r0, #1
1000d2ba:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d2bc:	2002      	movs	r0, #2
1000d2be:	47a0      	blx	r4
		platform_initialized = 1;
1000d2c0:	2201      	movs	r2, #1
1000d2c2:	4b06      	ldr	r3, [pc, #24]	; (1000d2dc <platform_driver_init+0x148>)
1000d2c4:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d2c6:	2000      	movs	r0, #0
1000d2c8:	e003      	b.n	1000d2d2 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d2ca:	2201      	movs	r2, #1
1000d2cc:	4b03      	ldr	r3, [pc, #12]	; (1000d2dc <platform_driver_init+0x148>)
1000d2ce:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d2d0:	2001      	movs	r0, #1
	}
	return status;
}
1000d2d2:	bc1c      	pop	{r2, r3, r4}
1000d2d4:	4690      	mov	r8, r2
1000d2d6:	4699      	mov	r9, r3
1000d2d8:	46a2      	mov	sl, r4
1000d2da:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d2dc:	10018dbc 	.word	0x10018dbc
1000d2e0:	1000d121 	.word	0x1000d121
1000d2e4:	1000d165 	.word	0x1000d165
1000d2e8:	10018ddc 	.word	0x10018ddc
1000d2ec:	e000e100 	.word	0xe000e100
1000d2f0:	10019d6c 	.word	0x10019d6c
1000d2f4:	000007d7 	.word	0x000007d7
1000d2f8:	000007bd 	.word	0x000007bd
1000d2fc:	10019aa8 	.word	0x10019aa8
1000d300:	0001bc51 	.word	0x0001bc51
1000d304:	10019d70 	.word	0x10019d70
1000d308:	100400bc 	.word	0x100400bc
1000d30c:	10018db0 	.word	0x10018db0
1000d310:	100400b8 	.word	0x100400b8
1000d314:	10018dac 	.word	0x10018dac
1000d318:	0001b99f 	.word	0x0001b99f
1000d31c:	10019aa4 	.word	0x10019aa4
1000d320:	0001b9db 	.word	0x0001b9db
1000d324:	10019ab0 	.word	0x10019ab0
1000d328:	10019d80 	.word	0x10019d80
1000d32c:	1004003c 	.word	0x1004003c
1000d330:	10041fc0 	.word	0x10041fc0
1000d334:	10019ab4 	.word	0x10019ab4
1000d338:	10041fc4 	.word	0x10041fc4
1000d33c:	10019d7c 	.word	0x10019d7c
1000d340:	10019d74 	.word	0x10019d74
1000d344:	10041fd4 	.word	0x10041fd4
1000d348:	10041fd8 	.word	0x10041fd8
1000d34c:	10019aac 	.word	0x10019aac
1000d350:	0001cbe9 	.word	0x0001cbe9
1000d354:	10018dd0 	.word	0x10018dd0
1000d358:	0001cd8f 	.word	0x0001cd8f
1000d35c:	10018dc0 	.word	0x10018dc0
1000d360:	0001cea3 	.word	0x0001cea3
1000d364:	10018de4 	.word	0x10018de4
1000d368:	0001cbcf 	.word	0x0001cbcf
1000d36c:	10018db8 	.word	0x10018db8
1000d370:	1000d81d 	.word	0x1000d81d
1000d374:	1000d7b1 	.word	0x1000d7b1
1000d378:	100400e4 	.word	0x100400e4
1000d37c:	10018dd8 	.word	0x10018dd8
1000d380:	00019fe9 	.word	0x00019fe9
1000d384:	10018de8 	.word	0x10018de8
1000d388:	0001dbdd 	.word	0x0001dbdd
1000d38c:	10018db4 	.word	0x10018db4
1000d390:	0001dc5b 	.word	0x0001dc5b
1000d394:	10018dc8 	.word	0x10018dc8
1000d398:	100405ec 	.word	0x100405ec
1000d39c:	10018dc4 	.word	0x10018dc4
1000d3a0:	0001d5e3 	.word	0x0001d5e3
1000d3a4:	10018dd4 	.word	0x10018dd4
1000d3a8:	10040c20 	.word	0x10040c20
1000d3ac:	10018dec 	.word	0x10018dec
1000d3b0:	00019f09 	.word	0x00019f09
1000d3b4:	10018da8 	.word	0x10018da8
1000d3b8:	10019aec 	.word	0x10019aec
1000d3bc:	100147d5 	.word	0x100147d5
1000d3c0:	10019d84 	.word	0x10019d84
1000d3c4:	1000d04d 	.word	0x1000d04d
1000d3c8:	10019d78 	.word	0x10019d78
1000d3cc:	1000d0f5 	.word	0x1000d0f5
1000d3d0:	1000d879 	.word	0x1000d879
1000d3d4:	1000d861 	.word	0x1000d861

1000d3d8 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d3d8:	4b04      	ldr	r3, [pc, #16]	; (1000d3ec <platform_register_ble_msg_handler+0x14>)
1000d3da:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d3dc:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d3de:	2a01      	cmp	r2, #1
1000d3e0:	d102      	bne.n	1000d3e8 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d3e2:	4b03      	ldr	r3, [pc, #12]	; (1000d3f0 <platform_register_ble_msg_handler+0x18>)
1000d3e4:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d3e6:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d3e8:	0018      	movs	r0, r3
1000d3ea:	4770      	bx	lr
1000d3ec:	10018dbc 	.word	0x10018dbc
1000d3f0:	10018ddc 	.word	0x10018ddc

1000d3f4 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d3f4:	b570      	push	{r4, r5, r6, lr}
1000d3f6:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d3f8:	4b0e      	ldr	r3, [pc, #56]	; (1000d434 <platform_interface_send+0x40>)
1000d3fa:	681b      	ldr	r3, [r3, #0]
1000d3fc:	2b00      	cmp	r3, #0
1000d3fe:	d002      	beq.n	1000d406 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d400:	8840      	ldrh	r0, [r0, #2]
1000d402:	4798      	blx	r3
1000d404:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d406:	88e3      	ldrh	r3, [r4, #6]
1000d408:	88a2      	ldrh	r2, [r4, #4]
1000d40a:	8861      	ldrh	r1, [r4, #2]
1000d40c:	8820      	ldrh	r0, [r4, #0]
1000d40e:	4d0a      	ldr	r5, [pc, #40]	; (1000d438 <platform_interface_send+0x44>)
1000d410:	682d      	ldr	r5, [r5, #0]
1000d412:	47a8      	blx	r5
1000d414:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d416:	88e2      	ldrh	r2, [r4, #6]
1000d418:	2a00      	cmp	r2, #0
1000d41a:	d102      	bne.n	1000d422 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d41c:	4b07      	ldr	r3, [pc, #28]	; (1000d43c <platform_interface_send+0x48>)
1000d41e:	4798      	blx	r3
1000d420:	e006      	b.n	1000d430 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d422:	0021      	movs	r1, r4
1000d424:	3108      	adds	r1, #8
1000d426:	4b06      	ldr	r3, [pc, #24]	; (1000d440 <platform_interface_send+0x4c>)
1000d428:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d42a:	0028      	movs	r0, r5
1000d42c:	4b03      	ldr	r3, [pc, #12]	; (1000d43c <platform_interface_send+0x48>)
1000d42e:	4798      	blx	r3
	}
}
1000d430:	bd70      	pop	{r4, r5, r6, pc}
1000d432:	46c0      	nop			; (mov r8, r8)
1000d434:	10018db0 	.word	0x10018db0
1000d438:	10018de8 	.word	0x10018de8
1000d43c:	1000d07d 	.word	0x1000d07d
1000d440:	100147c3 	.word	0x100147c3

1000d444 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d444:	b570      	push	{r4, r5, r6, lr}
1000d446:	0015      	movs	r5, r2
1000d448:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d44a:	020a      	lsls	r2, r1, #8
1000d44c:	4302      	orrs	r2, r0
1000d44e:	4b0a      	ldr	r3, [pc, #40]	; (1000d478 <send_plf_int_msg_ind+0x34>)
1000d450:	681e      	ldr	r6, [r3, #0]
1000d452:	0023      	movs	r3, r4
1000d454:	2105      	movs	r1, #5
1000d456:	20a0      	movs	r0, #160	; 0xa0
1000d458:	00c0      	lsls	r0, r0, #3
1000d45a:	47b0      	blx	r6
1000d45c:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d45e:	d00a      	beq.n	1000d476 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d460:	2c00      	cmp	r4, #0
1000d462:	d005      	beq.n	1000d470 <send_plf_int_msg_ind+0x2c>
1000d464:	2d00      	cmp	r5, #0
1000d466:	d003      	beq.n	1000d470 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d468:	0022      	movs	r2, r4
1000d46a:	0029      	movs	r1, r5
1000d46c:	4b03      	ldr	r3, [pc, #12]	; (1000d47c <send_plf_int_msg_ind+0x38>)
1000d46e:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d470:	0030      	movs	r0, r6
1000d472:	4b03      	ldr	r3, [pc, #12]	; (1000d480 <send_plf_int_msg_ind+0x3c>)
1000d474:	4798      	blx	r3
	}
}
1000d476:	bd70      	pop	{r4, r5, r6, pc}
1000d478:	10018de8 	.word	0x10018de8
1000d47c:	100147c3 	.word	0x100147c3
1000d480:	1000d07d 	.word	0x1000d07d

1000d484 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d484:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d486:	465f      	mov	r7, fp
1000d488:	4656      	mov	r6, sl
1000d48a:	464d      	mov	r5, r9
1000d48c:	4644      	mov	r4, r8
1000d48e:	b4f0      	push	{r4, r5, r6, r7}
1000d490:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d492:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d494:	2300      	movs	r3, #0
1000d496:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d498:	1ce3      	adds	r3, r4, #3
1000d49a:	d81c      	bhi.n	1000d4d6 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d49c:	220d      	movs	r2, #13
1000d49e:	2100      	movs	r1, #0
1000d4a0:	a802      	add	r0, sp, #8
1000d4a2:	4b82      	ldr	r3, [pc, #520]	; (1000d6ac <platform_event_wait+0x228>)
1000d4a4:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d4a6:	2333      	movs	r3, #51	; 0x33
1000d4a8:	aa02      	add	r2, sp, #8
1000d4aa:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d4ac:	3b30      	subs	r3, #48	; 0x30
1000d4ae:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d4b0:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d4b2:	3302      	adds	r3, #2
1000d4b4:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d4b6:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d4b8:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d4ba:	0a23      	lsrs	r3, r4, #8
1000d4bc:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d4be:	0c23      	lsrs	r3, r4, #16
1000d4c0:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d4c2:	0e24      	lsrs	r4, r4, #24
1000d4c4:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d4c6:	2301      	movs	r3, #1
1000d4c8:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d4ca:	210d      	movs	r1, #13
1000d4cc:	0010      	movs	r0, r2
1000d4ce:	4b78      	ldr	r3, [pc, #480]	; (1000d6b0 <platform_event_wait+0x22c>)
1000d4d0:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d4d2:	2301      	movs	r3, #1
1000d4d4:	4699      	mov	r9, r3
1000d4d6:	2400      	movs	r4, #0
1000d4d8:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d4da:	4f76      	ldr	r7, [pc, #472]	; (1000d6b4 <platform_event_wait+0x230>)
1000d4dc:	4e76      	ldr	r6, [pc, #472]	; (1000d6b8 <platform_event_wait+0x234>)
1000d4de:	4977      	ldr	r1, [pc, #476]	; (1000d6bc <platform_event_wait+0x238>)
1000d4e0:	6838      	ldr	r0, [r7, #0]
1000d4e2:	6833      	ldr	r3, [r6, #0]
1000d4e4:	4798      	blx	r3
1000d4e6:	2800      	cmp	r0, #0
1000d4e8:	d000      	beq.n	1000d4ec <platform_event_wait+0x68>
1000d4ea:	e088      	b.n	1000d5fe <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d4ec:	4b73      	ldr	r3, [pc, #460]	; (1000d6bc <platform_event_wait+0x238>)
1000d4ee:	681c      	ldr	r4, [r3, #0]
1000d4f0:	88a3      	ldrh	r3, [r4, #4]
1000d4f2:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d4f4:	23cd      	movs	r3, #205	; 0xcd
1000d4f6:	009b      	lsls	r3, r3, #2
1000d4f8:	459a      	cmp	sl, r3
1000d4fa:	d100      	bne.n	1000d4fe <platform_event_wait+0x7a>
1000d4fc:	e0c7      	b.n	1000d68e <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d4fe:	8923      	ldrh	r3, [r4, #8]
1000d500:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d502:	8963      	ldrh	r3, [r4, #10]
1000d504:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d506:	464b      	mov	r3, r9
1000d508:	2b00      	cmp	r3, #0
1000d50a:	d011      	beq.n	1000d530 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d50c:	220d      	movs	r2, #13
1000d50e:	2100      	movs	r1, #0
1000d510:	a802      	add	r0, sp, #8
1000d512:	4b66      	ldr	r3, [pc, #408]	; (1000d6ac <platform_event_wait+0x228>)
1000d514:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d516:	2333      	movs	r3, #51	; 0x33
1000d518:	aa02      	add	r2, sp, #8
1000d51a:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d51c:	3b30      	subs	r3, #48	; 0x30
1000d51e:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d520:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d522:	3302      	adds	r3, #2
1000d524:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d526:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d528:	210d      	movs	r1, #13
1000d52a:	0010      	movs	r0, r2
1000d52c:	4b60      	ldr	r3, [pc, #384]	; (1000d6b0 <platform_event_wait+0x22c>)
1000d52e:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d530:	23a0      	movs	r3, #160	; 0xa0
1000d532:	00db      	lsls	r3, r3, #3
1000d534:	459a      	cmp	sl, r3
1000d536:	d121      	bne.n	1000d57c <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d538:	4b61      	ldr	r3, [pc, #388]	; (1000d6c0 <platform_event_wait+0x23c>)
1000d53a:	881b      	ldrh	r3, [r3, #0]
1000d53c:	4443      	add	r3, r8
1000d53e:	22a0      	movs	r2, #160	; 0xa0
1000d540:	0092      	lsls	r2, r2, #2
1000d542:	4293      	cmp	r3, r2
1000d544:	dd02      	ble.n	1000d54c <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d546:	3a80      	subs	r2, #128	; 0x80
1000d548:	4b5d      	ldr	r3, [pc, #372]	; (1000d6c0 <platform_event_wait+0x23c>)
1000d54a:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d54c:	4b5c      	ldr	r3, [pc, #368]	; (1000d6c0 <platform_event_wait+0x23c>)
1000d54e:	469a      	mov	sl, r3
1000d550:	881d      	ldrh	r5, [r3, #0]
1000d552:	4b5c      	ldr	r3, [pc, #368]	; (1000d6c4 <platform_event_wait+0x240>)
1000d554:	18ed      	adds	r5, r5, r3
1000d556:	0021      	movs	r1, r4
1000d558:	310c      	adds	r1, #12
1000d55a:	4642      	mov	r2, r8
1000d55c:	0028      	movs	r0, r5
1000d55e:	4b5a      	ldr	r3, [pc, #360]	; (1000d6c8 <platform_event_wait+0x244>)
1000d560:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d562:	4642      	mov	r2, r8
1000d564:	0029      	movs	r1, r5
1000d566:	4658      	mov	r0, fp
1000d568:	4b58      	ldr	r3, [pc, #352]	; (1000d6cc <platform_event_wait+0x248>)
1000d56a:	4798      	blx	r3
				plf_event_buff_index += len;
1000d56c:	4653      	mov	r3, sl
1000d56e:	881b      	ldrh	r3, [r3, #0]
1000d570:	4443      	add	r3, r8
1000d572:	4652      	mov	r2, sl
1000d574:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d576:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d578:	2502      	movs	r5, #2
1000d57a:	e03a      	b.n	1000d5f2 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d57c:	4b54      	ldr	r3, [pc, #336]	; (1000d6d0 <platform_event_wait+0x24c>)
1000d57e:	681b      	ldr	r3, [r3, #0]
1000d580:	2b00      	cmp	r3, #0
1000d582:	d032      	beq.n	1000d5ea <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d584:	4b4d      	ldr	r3, [pc, #308]	; (1000d6bc <platform_event_wait+0x238>)
1000d586:	681a      	ldr	r2, [r3, #0]
1000d588:	8893      	ldrh	r3, [r2, #4]
1000d58a:	21cd      	movs	r1, #205	; 0xcd
1000d58c:	0089      	lsls	r1, r1, #2
1000d58e:	428b      	cmp	r3, r1
1000d590:	d104      	bne.n	1000d59c <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d592:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d594:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d596:	2b00      	cmp	r3, #0
1000d598:	d02b      	beq.n	1000d5f2 <platform_event_wait+0x16e>
1000d59a:	e028      	b.n	1000d5ee <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d59c:	4c4d      	ldr	r4, [pc, #308]	; (1000d6d4 <platform_event_wait+0x250>)
1000d59e:	4d49      	ldr	r5, [pc, #292]	; (1000d6c4 <platform_event_wait+0x240>)
1000d5a0:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d5a2:	702b      	strb	r3, [r5, #0]
1000d5a4:	0a1b      	lsrs	r3, r3, #8
1000d5a6:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d5a8:	8910      	ldrh	r0, [r2, #8]
1000d5aa:	4b4b      	ldr	r3, [pc, #300]	; (1000d6d8 <platform_event_wait+0x254>)
1000d5ac:	681b      	ldr	r3, [r3, #0]
1000d5ae:	4798      	blx	r3
1000d5b0:	7128      	strb	r0, [r5, #4]
1000d5b2:	0a00      	lsrs	r0, r0, #8
1000d5b4:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d5b6:	6820      	ldr	r0, [r4, #0]
1000d5b8:	4b40      	ldr	r3, [pc, #256]	; (1000d6bc <platform_event_wait+0x238>)
1000d5ba:	681a      	ldr	r2, [r3, #0]
1000d5bc:	88d2      	ldrh	r2, [r2, #6]
1000d5be:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d5c0:	681d      	ldr	r5, [r3, #0]
1000d5c2:	896b      	ldrh	r3, [r5, #10]
1000d5c4:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d5c6:	3008      	adds	r0, #8
1000d5c8:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d5ca:	896a      	ldrh	r2, [r5, #10]
1000d5cc:	2a00      	cmp	r2, #0
1000d5ce:	d003      	beq.n	1000d5d8 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d5d0:	0029      	movs	r1, r5
1000d5d2:	310c      	adds	r1, #12
1000d5d4:	4b3c      	ldr	r3, [pc, #240]	; (1000d6c8 <platform_event_wait+0x244>)
1000d5d6:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d5d8:	8969      	ldrh	r1, [r5, #10]
1000d5da:	3108      	adds	r1, #8
1000d5dc:	4b3c      	ldr	r3, [pc, #240]	; (1000d6d0 <platform_event_wait+0x24c>)
1000d5de:	681b      	ldr	r3, [r3, #0]
1000d5e0:	4838      	ldr	r0, [pc, #224]	; (1000d6c4 <platform_event_wait+0x240>)
1000d5e2:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d5e4:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d5e6:	2503      	movs	r5, #3
1000d5e8:	e003      	b.n	1000d5f2 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d5ea:	2400      	movs	r4, #0
1000d5ec:	e001      	b.n	1000d5f2 <platform_event_wait+0x16e>
1000d5ee:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000d5f0:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000d5f2:	4b32      	ldr	r3, [pc, #200]	; (1000d6bc <platform_event_wait+0x238>)
1000d5f4:	6818      	ldr	r0, [r3, #0]
1000d5f6:	4b39      	ldr	r3, [pc, #228]	; (1000d6dc <platform_event_wait+0x258>)
1000d5f8:	681b      	ldr	r3, [r3, #0]
1000d5fa:	4798      	blx	r3
1000d5fc:	e000      	b.n	1000d600 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000d5fe:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000d600:	2c00      	cmp	r4, #0
1000d602:	d000      	beq.n	1000d606 <platform_event_wait+0x182>
1000d604:	e76b      	b.n	1000d4de <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000d606:	464b      	mov	r3, r9
1000d608:	2b00      	cmp	r3, #0
1000d60a:	d046      	beq.n	1000d69a <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000d60c:	4b29      	ldr	r3, [pc, #164]	; (1000d6b4 <platform_event_wait+0x230>)
1000d60e:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000d610:	2e00      	cmp	r6, #0
1000d612:	d104      	bne.n	1000d61e <platform_event_wait+0x19a>
1000d614:	2300      	movs	r3, #0
1000d616:	6a1c      	ldr	r4, [r3, #32]
1000d618:	2c00      	cmp	r4, #0
1000d61a:	d131      	bne.n	1000d680 <platform_event_wait+0x1fc>
1000d61c:	e03d      	b.n	1000d69a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000d61e:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000d620:	2314      	movs	r3, #20
1000d622:	469c      	mov	ip, r3
1000d624:	44b4      	add	ip, r6
1000d626:	4663      	mov	r3, ip
1000d628:	4660      	mov	r0, ip
1000d62a:	9300      	str	r3, [sp, #0]
1000d62c:	4b2c      	ldr	r3, [pc, #176]	; (1000d6e0 <platform_event_wait+0x25c>)
1000d62e:	681b      	ldr	r3, [r3, #0]
1000d630:	4798      	blx	r3
	while(NULL != current)
1000d632:	2c00      	cmp	r4, #0
1000d634:	d01f      	beq.n	1000d676 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000d636:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d638:	23cd      	movs	r3, #205	; 0xcd
1000d63a:	009b      	lsls	r3, r3, #2
1000d63c:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000d63e:	4b27      	ldr	r3, [pc, #156]	; (1000d6dc <platform_event_wait+0x258>)
1000d640:	469a      	mov	sl, r3
1000d642:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d644:	6803      	ldr	r3, [r0, #0]
1000d646:	889b      	ldrh	r3, [r3, #4]
1000d648:	4543      	cmp	r3, r8
1000d64a:	d110      	bne.n	1000d66e <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000d64c:	2f00      	cmp	r7, #0
1000d64e:	d006      	beq.n	1000d65e <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000d650:	6883      	ldr	r3, [r0, #8]
1000d652:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000d654:	4653      	mov	r3, sl
1000d656:	681b      	ldr	r3, [r3, #0]
1000d658:	4798      	blx	r3
				current = prev->pstrNext;
1000d65a:	68b8      	ldr	r0, [r7, #8]
1000d65c:	e009      	b.n	1000d672 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000d65e:	6883      	ldr	r3, [r0, #8]
1000d660:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000d662:	4b1e      	ldr	r3, [pc, #120]	; (1000d6dc <platform_event_wait+0x258>)
1000d664:	681b      	ldr	r3, [r3, #0]
1000d666:	9301      	str	r3, [sp, #4]
1000d668:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000d66a:	6a30      	ldr	r0, [r6, #32]
1000d66c:	e001      	b.n	1000d672 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000d66e:	0007      	movs	r7, r0
1000d670:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000d672:	2800      	cmp	r0, #0
1000d674:	d1e6      	bne.n	1000d644 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000d676:	4b1b      	ldr	r3, [pc, #108]	; (1000d6e4 <platform_event_wait+0x260>)
1000d678:	681b      	ldr	r3, [r3, #0]
1000d67a:	9800      	ldr	r0, [sp, #0]
1000d67c:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d67e:	e00c      	b.n	1000d69a <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d680:	2314      	movs	r3, #20
1000d682:	9300      	str	r3, [sp, #0]
1000d684:	4b16      	ldr	r3, [pc, #88]	; (1000d6e0 <platform_event_wait+0x25c>)
1000d686:	681b      	ldr	r3, [r3, #0]
1000d688:	2014      	movs	r0, #20
1000d68a:	4798      	blx	r3
1000d68c:	e7d3      	b.n	1000d636 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d68e:	4b10      	ldr	r3, [pc, #64]	; (1000d6d0 <platform_event_wait+0x24c>)
1000d690:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d692:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d694:	2b00      	cmp	r3, #0
1000d696:	d0ac      	beq.n	1000d5f2 <platform_event_wait+0x16e>
1000d698:	e77b      	b.n	1000d592 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d69a:	0028      	movs	r0, r5
1000d69c:	b007      	add	sp, #28
1000d69e:	bc3c      	pop	{r2, r3, r4, r5}
1000d6a0:	4690      	mov	r8, r2
1000d6a2:	4699      	mov	r9, r3
1000d6a4:	46a2      	mov	sl, r4
1000d6a6:	46ab      	mov	fp, r5
1000d6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d6aa:	46c0      	nop			; (mov r8, r8)
1000d6ac:	100147d5 	.word	0x100147d5
1000d6b0:	1000d3f5 	.word	0x1000d3f5
1000d6b4:	10018dec 	.word	0x10018dec
1000d6b8:	10018dd4 	.word	0x10018dd4
1000d6bc:	10018de0 	.word	0x10018de0
1000d6c0:	10019d84 	.word	0x10019d84
1000d6c4:	10019aec 	.word	0x10019aec
1000d6c8:	100147c3 	.word	0x100147c3
1000d6cc:	1000d015 	.word	0x1000d015
1000d6d0:	10018ddc 	.word	0x10018ddc
1000d6d4:	10018dcc 	.word	0x10018dcc
1000d6d8:	10018dac 	.word	0x10018dac
1000d6dc:	10018da8 	.word	0x10018da8
1000d6e0:	10018dc8 	.word	0x10018dc8
1000d6e4:	10018db4 	.word	0x10018db4

1000d6e8 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d6e8:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d6ea:	4b03      	ldr	r3, [pc, #12]	; (1000d6f8 <acquire_sleep_lock+0x10>)
1000d6ec:	681b      	ldr	r3, [r3, #0]
1000d6ee:	2080      	movs	r0, #128	; 0x80
1000d6f0:	0200      	lsls	r0, r0, #8
1000d6f2:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d6f4:	2008      	movs	r0, #8
1000d6f6:	bd10      	pop	{r4, pc}
1000d6f8:	10019aa4 	.word	0x10019aa4

1000d6fc <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d6fc:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d6fe:	4b03      	ldr	r3, [pc, #12]	; (1000d70c <release_message_lock+0x10>)
1000d700:	681b      	ldr	r3, [r3, #0]
1000d702:	2080      	movs	r0, #128	; 0x80
1000d704:	01c0      	lsls	r0, r0, #7
1000d706:	4798      	blx	r3
	return status;
}
1000d708:	2000      	movs	r0, #0
1000d70a:	bd10      	pop	{r4, pc}
1000d70c:	10019ab0 	.word	0x10019ab0

1000d710 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d710:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d712:	4c05      	ldr	r4, [pc, #20]	; (1000d728 <release_sleep_lock+0x18>)
1000d714:	2080      	movs	r0, #128	; 0x80
1000d716:	01c0      	lsls	r0, r0, #7
1000d718:	6823      	ldr	r3, [r4, #0]
1000d71a:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d71c:	6823      	ldr	r3, [r4, #0]
1000d71e:	2080      	movs	r0, #128	; 0x80
1000d720:	0200      	lsls	r0, r0, #8
1000d722:	4798      	blx	r3
	return status;
}
1000d724:	2000      	movs	r0, #0
1000d726:	bd10      	pop	{r4, pc}
1000d728:	10019ab0 	.word	0x10019ab0

1000d72c <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d72c:	2800      	cmp	r0, #0
1000d72e:	d003      	beq.n	1000d738 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d730:	4b02      	ldr	r3, [pc, #8]	; (1000d73c <register_resume_callback+0x10>)
1000d732:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d734:	2000      	movs	r0, #0
1000d736:	e000      	b.n	1000d73a <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d738:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d73a:	4770      	bx	lr
1000d73c:	10019d78 	.word	0x10019d78

1000d740 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d740:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d742:	4a18      	ldr	r2, [pc, #96]	; (1000d7a4 <gpio1_combined_isr_handler+0x64>)
1000d744:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d746:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d748:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d74a:	2180      	movs	r1, #128	; 0x80
1000d74c:	0209      	lsls	r1, r1, #8
1000d74e:	4301      	orrs	r1, r0
1000d750:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d752:	0010      	movs	r0, r2
1000d754:	4d14      	ldr	r5, [pc, #80]	; (1000d7a8 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d756:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d758:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d75a:	05db      	lsls	r3, r3, #23
1000d75c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d75e:	d011      	beq.n	1000d784 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d760:	b2db      	uxtb	r3, r3
1000d762:	4259      	negs	r1, r3
1000d764:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d766:	2b01      	cmp	r3, #1
1000d768:	d006      	beq.n	1000d778 <gpio1_combined_isr_handler+0x38>
1000d76a:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d76c:	085b      	lsrs	r3, r3, #1
				index++;
1000d76e:	3101      	adds	r1, #1
1000d770:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d772:	2b01      	cmp	r3, #1
1000d774:	d1fa      	bne.n	1000d76c <gpio1_combined_isr_handler+0x2c>
1000d776:	e000      	b.n	1000d77a <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d778:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d77a:	0023      	movs	r3, r4
1000d77c:	408b      	lsls	r3, r1
1000d77e:	b29b      	uxth	r3, r3
1000d780:	8703      	strh	r3, [r0, #56]	; 0x38
1000d782:	e003      	b.n	1000d78c <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d784:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d786:	432b      	orrs	r3, r5
1000d788:	b29b      	uxth	r3, r3
1000d78a:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d78c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d78e:	05db      	lsls	r3, r3, #23
1000d790:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d792:	d1e2      	bne.n	1000d75a <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d794:	2180      	movs	r1, #128	; 0x80
1000d796:	0049      	lsls	r1, r1, #1
1000d798:	3381      	adds	r3, #129	; 0x81
1000d79a:	33ff      	adds	r3, #255	; 0xff
1000d79c:	4a03      	ldr	r2, [pc, #12]	; (1000d7ac <gpio1_combined_isr_handler+0x6c>)
1000d79e:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d7a0:	bd30      	pop	{r4, r5, pc}
1000d7a2:	46c0      	nop			; (mov r8, r8)
1000d7a4:	40011000 	.word	0x40011000
1000d7a8:	ffff8000 	.word	0xffff8000
1000d7ac:	e000e100 	.word	0xe000e100

1000d7b0 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d7b0:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d7b2:	4a17      	ldr	r2, [pc, #92]	; (1000d810 <gpio0_combined_isr_handler+0x60>)
1000d7b4:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d7b6:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d7b8:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d7ba:	2180      	movs	r1, #128	; 0x80
1000d7bc:	0209      	lsls	r1, r1, #8
1000d7be:	4301      	orrs	r1, r0
1000d7c0:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d7c2:	0010      	movs	r0, r2
1000d7c4:	4d13      	ldr	r5, [pc, #76]	; (1000d814 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d7c6:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d7c8:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d7ca:	05db      	lsls	r3, r3, #23
1000d7cc:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d7ce:	d011      	beq.n	1000d7f4 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d7d0:	b2db      	uxtb	r3, r3
1000d7d2:	4259      	negs	r1, r3
1000d7d4:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d7d6:	2b01      	cmp	r3, #1
1000d7d8:	d006      	beq.n	1000d7e8 <gpio0_combined_isr_handler+0x38>
1000d7da:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d7dc:	085b      	lsrs	r3, r3, #1
				index++;
1000d7de:	3101      	adds	r1, #1
1000d7e0:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d7e2:	2b01      	cmp	r3, #1
1000d7e4:	d1fa      	bne.n	1000d7dc <gpio0_combined_isr_handler+0x2c>
1000d7e6:	e000      	b.n	1000d7ea <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d7e8:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d7ea:	0023      	movs	r3, r4
1000d7ec:	408b      	lsls	r3, r1
1000d7ee:	b29b      	uxth	r3, r3
1000d7f0:	8703      	strh	r3, [r0, #56]	; 0x38
1000d7f2:	e003      	b.n	1000d7fc <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d7f4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d7f6:	432b      	orrs	r3, r5
1000d7f8:	b29b      	uxth	r3, r3
1000d7fa:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d7fc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d7fe:	05db      	lsls	r3, r3, #23
1000d800:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d802:	d1e2      	bne.n	1000d7ca <gpio0_combined_isr_handler+0x1a>
1000d804:	2180      	movs	r1, #128	; 0x80
1000d806:	3381      	adds	r3, #129	; 0x81
1000d808:	33ff      	adds	r3, #255	; 0xff
1000d80a:	4a03      	ldr	r2, [pc, #12]	; (1000d818 <gpio0_combined_isr_handler+0x68>)
1000d80c:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d80e:	bd30      	pop	{r4, r5, pc}
1000d810:	40010000 	.word	0x40010000
1000d814:	ffff8000 	.word	0xffff8000
1000d818:	e000e100 	.word	0xe000e100

1000d81c <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d81c:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d81e:	4b0c      	ldr	r3, [pc, #48]	; (1000d850 <PORT1_COMB_Handler+0x34>)
1000d820:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d822:	0b5b      	lsrs	r3, r3, #13
1000d824:	d010      	beq.n	1000d848 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d826:	4b0b      	ldr	r3, [pc, #44]	; (1000d854 <PORT1_COMB_Handler+0x38>)
1000d828:	681b      	ldr	r3, [r3, #0]
1000d82a:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d82c:	4a08      	ldr	r2, [pc, #32]	; (1000d850 <PORT1_COMB_Handler+0x34>)
1000d82e:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d830:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d832:	0b5b      	lsrs	r3, r3, #13
1000d834:	035b      	lsls	r3, r3, #13
1000d836:	430b      	orrs	r3, r1
1000d838:	8713      	strh	r3, [r2, #56]	; 0x38
1000d83a:	2180      	movs	r1, #128	; 0x80
1000d83c:	0049      	lsls	r1, r1, #1
1000d83e:	23c0      	movs	r3, #192	; 0xc0
1000d840:	005b      	lsls	r3, r3, #1
1000d842:	4a05      	ldr	r2, [pc, #20]	; (1000d858 <PORT1_COMB_Handler+0x3c>)
1000d844:	50d1      	str	r1, [r2, r3]
1000d846:	e001      	b.n	1000d84c <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d848:	4b04      	ldr	r3, [pc, #16]	; (1000d85c <PORT1_COMB_Handler+0x40>)
1000d84a:	4798      	blx	r3
	}
}
1000d84c:	bd10      	pop	{r4, pc}
1000d84e:	46c0      	nop			; (mov r8, r8)
1000d850:	40011000 	.word	0x40011000
1000d854:	10019d70 	.word	0x10019d70
1000d858:	e000e100 	.word	0xe000e100
1000d85c:	1000d741 	.word	0x1000d741

1000d860 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d860:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d862:	2802      	cmp	r0, #2
1000d864:	d804      	bhi.n	1000d870 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d866:	0080      	lsls	r0, r0, #2
1000d868:	2200      	movs	r2, #0
1000d86a:	4b02      	ldr	r3, [pc, #8]	; (1000d874 <wakeup_int_unregister_callback+0x14>)
1000d86c:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d86e:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000d870:	0018      	movs	r0, r3
1000d872:	4770      	bx	lr
1000d874:	10019d88 	.word	0x10019d88

1000d878 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000d878:	b510      	push	{r4, lr}
1000d87a:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000d87c:	7803      	ldrb	r3, [r0, #0]
1000d87e:	2b01      	cmp	r3, #1
1000d880:	d108      	bne.n	1000d894 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000d882:	4b11      	ldr	r3, [pc, #68]	; (1000d8c8 <wakeup_active_event_callback+0x50>)
1000d884:	681b      	ldr	r3, [r3, #0]
1000d886:	2b00      	cmp	r3, #0
1000d888:	d000      	beq.n	1000d88c <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000d88a:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000d88c:	23ff      	movs	r3, #255	; 0xff
1000d88e:	6822      	ldr	r2, [r4, #0]
1000d890:	439a      	bics	r2, r3
1000d892:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000d894:	7863      	ldrb	r3, [r4, #1]
1000d896:	2b01      	cmp	r3, #1
1000d898:	d108      	bne.n	1000d8ac <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000d89a:	4b0b      	ldr	r3, [pc, #44]	; (1000d8c8 <wakeup_active_event_callback+0x50>)
1000d89c:	685b      	ldr	r3, [r3, #4]
1000d89e:	2b00      	cmp	r3, #0
1000d8a0:	d000      	beq.n	1000d8a4 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000d8a2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000d8a4:	4b09      	ldr	r3, [pc, #36]	; (1000d8cc <wakeup_active_event_callback+0x54>)
1000d8a6:	6822      	ldr	r2, [r4, #0]
1000d8a8:	4013      	ands	r3, r2
1000d8aa:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000d8ac:	78a3      	ldrb	r3, [r4, #2]
1000d8ae:	2b01      	cmp	r3, #1
1000d8b0:	d108      	bne.n	1000d8c4 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000d8b2:	4b05      	ldr	r3, [pc, #20]	; (1000d8c8 <wakeup_active_event_callback+0x50>)
1000d8b4:	689b      	ldr	r3, [r3, #8]
1000d8b6:	2b00      	cmp	r3, #0
1000d8b8:	d000      	beq.n	1000d8bc <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000d8ba:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000d8bc:	4b04      	ldr	r3, [pc, #16]	; (1000d8d0 <wakeup_active_event_callback+0x58>)
1000d8be:	6822      	ldr	r2, [r4, #0]
1000d8c0:	4013      	ands	r3, r2
1000d8c2:	6023      	str	r3, [r4, #0]
	}
}
1000d8c4:	bd10      	pop	{r4, pc}
1000d8c6:	46c0      	nop			; (mov r8, r8)
1000d8c8:	10019d88 	.word	0x10019d88
1000d8cc:	ffff00ff 	.word	0xffff00ff
1000d8d0:	ff00ffff 	.word	0xff00ffff

1000d8d4 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000d8d4:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000d8d6:	4b08      	ldr	r3, [pc, #32]	; (1000d8f8 <resume_cb+0x24>)
1000d8d8:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000d8da:	4b08      	ldr	r3, [pc, #32]	; (1000d8fc <resume_cb+0x28>)
1000d8dc:	4798      	blx	r3
	sms_dualtimer_init();
1000d8de:	4b08      	ldr	r3, [pc, #32]	; (1000d900 <resume_cb+0x2c>)
1000d8e0:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000d8e2:	4b08      	ldr	r3, [pc, #32]	; (1000d904 <resume_cb+0x30>)
1000d8e4:	4798      	blx	r3
	sms_led_gpio_init();
1000d8e6:	4b08      	ldr	r3, [pc, #32]	; (1000d908 <resume_cb+0x34>)
1000d8e8:	4798      	blx	r3
	sms_spi_master_configure();
1000d8ea:	4b08      	ldr	r3, [pc, #32]	; (1000d90c <resume_cb+0x38>)
1000d8ec:	4798      	blx	r3
	sms_i2c_master_configure();
1000d8ee:	4b08      	ldr	r3, [pc, #32]	; (1000d910 <resume_cb+0x3c>)
1000d8f0:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000d8f2:	4b08      	ldr	r3, [pc, #32]	; (1000d914 <resume_cb+0x40>)
1000d8f4:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000d8f6:	bd10      	pop	{r4, pc}
1000d8f8:	1000d121 	.word	0x1000d121
1000d8fc:	1000ce89 	.word	0x1000ce89
1000d900:	10009ca1 	.word	0x10009ca1
1000d904:	100089fd 	.word	0x100089fd
1000d908:	1000977d 	.word	0x1000977d
1000d90c:	10009b55 	.word	0x10009b55
1000d910:	10008c5d 	.word	0x10008c5d
1000d914:	10008b85 	.word	0x10008b85

1000d918 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000d918:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000d91a:	2300      	movs	r3, #0
1000d91c:	4a09      	ldr	r2, [pc, #36]	; (1000d944 <sms_init_variables+0x2c>)
1000d91e:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000d920:	4a09      	ldr	r2, [pc, #36]	; (1000d948 <sms_init_variables+0x30>)
1000d922:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000d924:	2101      	movs	r1, #1
1000d926:	4a09      	ldr	r2, [pc, #36]	; (1000d94c <sms_init_variables+0x34>)
1000d928:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000d92a:	4a09      	ldr	r2, [pc, #36]	; (1000d950 <sms_init_variables+0x38>)
1000d92c:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000d92e:	2201      	movs	r2, #1
1000d930:	4252      	negs	r2, r2
1000d932:	4b08      	ldr	r3, [pc, #32]	; (1000d954 <sms_init_variables+0x3c>)
1000d934:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000d936:	4b08      	ldr	r3, [pc, #32]	; (1000d958 <sms_init_variables+0x40>)
1000d938:	4798      	blx	r3
	sms_button_init_variables();
1000d93a:	4b08      	ldr	r3, [pc, #32]	; (1000d95c <sms_init_variables+0x44>)
1000d93c:	4798      	blx	r3
	sms_pressure_init_variables();
1000d93e:	4b08      	ldr	r3, [pc, #32]	; (1000d960 <sms_init_variables+0x48>)
1000d940:	4798      	blx	r3
}
1000d942:	bd10      	pop	{r4, pc}
1000d944:	10018ec0 	.word	0x10018ec0
1000d948:	100190cf 	.word	0x100190cf
1000d94c:	10018f8c 	.word	0x10018f8c
1000d950:	10018f8d 	.word	0x10018f8d
1000d954:	10018f88 	.word	0x10018f88
1000d958:	10008539 	.word	0x10008539
1000d95c:	100089d5 	.word	0x100089d5
1000d960:	10009811 	.word	0x10009811

1000d964 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000d964:	b510      	push	{r4, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000d966:	2210      	movs	r2, #16
1000d968:	4b28      	ldr	r3, [pc, #160]	; (1000da0c <main+0xa8>)
1000d96a:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000d96c:	4b28      	ldr	r3, [pc, #160]	; (1000da10 <main+0xac>)
1000d96e:	4798      	blx	r3
	gpio_init(); // GPIO
1000d970:	4b28      	ldr	r3, [pc, #160]	; (1000da14 <main+0xb0>)
1000d972:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000d974:	4b28      	ldr	r3, [pc, #160]	; (1000da18 <main+0xb4>)
1000d976:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000d978:	4b28      	ldr	r3, [pc, #160]	; (1000da1c <main+0xb8>)
1000d97a:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000d97c:	4b28      	ldr	r3, [pc, #160]	; (1000da20 <main+0xbc>)
1000d97e:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000d980:	4b28      	ldr	r3, [pc, #160]	; (1000da24 <main+0xc0>)
1000d982:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000d984:	4b28      	ldr	r3, [pc, #160]	; (1000da28 <main+0xc4>)
1000d986:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000d988:	4b28      	ldr	r3, [pc, #160]	; (1000da2c <main+0xc8>)
1000d98a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000d98c:	4b28      	ldr	r3, [pc, #160]	; (1000da30 <main+0xcc>)
1000d98e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000d990:	4b28      	ldr	r3, [pc, #160]	; (1000da34 <main+0xd0>)
1000d992:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000d994:	4b28      	ldr	r3, [pc, #160]	; (1000da38 <main+0xd4>)
1000d996:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000d998:	4b28      	ldr	r3, [pc, #160]	; (1000da3c <main+0xd8>)
1000d99a:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000d99c:	2000      	movs	r0, #0
1000d99e:	4b28      	ldr	r3, [pc, #160]	; (1000da40 <main+0xdc>)
1000d9a0:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000d9a2:	4b28      	ldr	r3, [pc, #160]	; (1000da44 <main+0xe0>)
1000d9a4:	4798      	blx	r3
	sms_pressure_define_services();
1000d9a6:	4b28      	ldr	r3, [pc, #160]	; (1000da48 <main+0xe4>)
1000d9a8:	4798      	blx	r3
	sms_mpu_define_services();
1000d9aa:	4b28      	ldr	r3, [pc, #160]	; (1000da4c <main+0xe8>)
1000d9ac:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000d9ae:	4828      	ldr	r0, [pc, #160]	; (1000da50 <main+0xec>)
1000d9b0:	4b28      	ldr	r3, [pc, #160]	; (1000da54 <main+0xf0>)
1000d9b2:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000d9b4:	4928      	ldr	r1, [pc, #160]	; (1000da58 <main+0xf4>)
1000d9b6:	2000      	movs	r0, #0
1000d9b8:	4b28      	ldr	r3, [pc, #160]	; (1000da5c <main+0xf8>)
1000d9ba:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000d9bc:	4b28      	ldr	r3, [pc, #160]	; (1000da60 <main+0xfc>)
1000d9be:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000d9c0:	4b28      	ldr	r3, [pc, #160]	; (1000da64 <main+0x100>)
1000d9c2:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000d9c4:	4a28      	ldr	r2, [pc, #160]	; (1000da68 <main+0x104>)
1000d9c6:	2100      	movs	r1, #0
1000d9c8:	2000      	movs	r0, #0
1000d9ca:	4c28      	ldr	r4, [pc, #160]	; (1000da6c <main+0x108>)
1000d9cc:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000d9ce:	4a28      	ldr	r2, [pc, #160]	; (1000da70 <main+0x10c>)
1000d9d0:	2102      	movs	r1, #2
1000d9d2:	2000      	movs	r0, #0
1000d9d4:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000d9d6:	2100      	movs	r1, #0
1000d9d8:	2000      	movs	r0, #0
1000d9da:	4b26      	ldr	r3, [pc, #152]	; (1000da74 <main+0x110>)
1000d9dc:	4798      	blx	r3

	if(sms_mpu_check()) {
1000d9de:	4b26      	ldr	r3, [pc, #152]	; (1000da78 <main+0x114>)
1000d9e0:	4798      	blx	r3
1000d9e2:	2800      	cmp	r0, #0
1000d9e4:	d005      	beq.n	1000d9f2 <main+0x8e>
		DBG_LOG("MPU not here...");
1000d9e6:	4825      	ldr	r0, [pc, #148]	; (1000da7c <main+0x118>)
1000d9e8:	4b25      	ldr	r3, [pc, #148]	; (1000da80 <main+0x11c>)
1000d9ea:	4798      	blx	r3
1000d9ec:	4825      	ldr	r0, [pc, #148]	; (1000da84 <main+0x120>)
1000d9ee:	4b26      	ldr	r3, [pc, #152]	; (1000da88 <main+0x124>)
1000d9f0:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.gyro_bias, mpu_device.accel_bias);
1000d9f2:	4926      	ldr	r1, [pc, #152]	; (1000da8c <main+0x128>)
1000d9f4:	0008      	movs	r0, r1
1000d9f6:	380c      	subs	r0, #12
1000d9f8:	4b25      	ldr	r3, [pc, #148]	; (1000da90 <main+0x12c>)
1000d9fa:	4798      	blx	r3
	
	DBG_LOG("Check test passed");
1000d9fc:	481f      	ldr	r0, [pc, #124]	; (1000da7c <main+0x118>)
1000d9fe:	4b20      	ldr	r3, [pc, #128]	; (1000da80 <main+0x11c>)
1000da00:	4798      	blx	r3
1000da02:	4824      	ldr	r0, [pc, #144]	; (1000da94 <main+0x130>)
1000da04:	4b20      	ldr	r3, [pc, #128]	; (1000da88 <main+0x124>)
1000da06:	4798      	blx	r3
1000da08:	e7fe      	b.n	1000da08 <main+0xa4>
1000da0a:	46c0      	nop			; (mov r8, r8)
1000da0c:	10018f90 	.word	0x10018f90
1000da10:	1000d195 	.word	0x1000d195
1000da14:	1000a925 	.word	0x1000a925
1000da18:	1000ce89 	.word	0x1000ce89
1000da1c:	1000d6e9 	.word	0x1000d6e9
1000da20:	1000d919 	.word	0x1000d919
1000da24:	10009ca1 	.word	0x10009ca1
1000da28:	100089fd 	.word	0x100089fd
1000da2c:	1000977d 	.word	0x1000977d
1000da30:	10008c5d 	.word	0x10008c5d
1000da34:	10009b55 	.word	0x10009b55
1000da38:	10008e35 	.word	0x10008e35
1000da3c:	10008b85 	.word	0x10008b85
1000da40:	1000c6c5 	.word	0x1000c6c5
1000da44:	10008b1d 	.word	0x10008b1d
1000da48:	10009a29 	.word	0x10009a29
1000da4c:	10008e99 	.word	0x10008e99
1000da50:	1000d8d5 	.word	0x1000d8d5
1000da54:	1000d72d 	.word	0x1000d72d
1000da58:	10009d69 	.word	0x10009d69
1000da5c:	10009ce5 	.word	0x10009ce5
1000da60:	10008aad 	.word	0x10008aad
1000da64:	10008e81 	.word	0x10008e81
1000da68:	10015ce8 	.word	0x10015ce8
1000da6c:	1000c5f5 	.word	0x1000c5f5
1000da70:	10015d34 	.word	0x10015d34
1000da74:	10008ad5 	.word	0x10008ad5
1000da78:	10009709 	.word	0x10009709
1000da7c:	1001597c 	.word	0x1001597c
1000da80:	10014a3d 	.word	0x10014a3d
1000da84:	1001712c 	.word	0x1001712c
1000da88:	1001491d 	.word	0x1001491d
1000da8c:	10018f18 	.word	0x10018f18
1000da90:	10008f1d 	.word	0x10008f1d
1000da94:	1001713c 	.word	0x1001713c

1000da98 <internal_event_post>:
1000da98:	b570      	push	{r4, r5, r6, lr}
1000da9a:	4d12      	ldr	r5, [pc, #72]	; (1000dae4 <internal_event_post+0x4c>)
1000da9c:	682c      	ldr	r4, [r5, #0]
1000da9e:	2c00      	cmp	r4, #0
1000daa0:	d014      	beq.n	1000dacc <internal_event_post+0x34>
1000daa2:	6826      	ldr	r6, [r4, #0]
1000daa4:	60e2      	str	r2, [r4, #12]
1000daa6:	602e      	str	r6, [r5, #0]
1000daa8:	2500      	movs	r5, #0
1000daaa:	4a0f      	ldr	r2, [pc, #60]	; (1000dae8 <internal_event_post+0x50>)
1000daac:	8123      	strh	r3, [r4, #8]
1000daae:	6813      	ldr	r3, [r2, #0]
1000dab0:	6025      	str	r5, [r4, #0]
1000dab2:	80a0      	strh	r0, [r4, #4]
1000dab4:	80e1      	strh	r1, [r4, #6]
1000dab6:	42ab      	cmp	r3, r5
1000dab8:	d101      	bne.n	1000dabe <internal_event_post+0x26>
1000daba:	6014      	str	r4, [r2, #0]
1000dabc:	e011      	b.n	1000dae2 <internal_event_post+0x4a>
1000dabe:	681a      	ldr	r2, [r3, #0]
1000dac0:	2a00      	cmp	r2, #0
1000dac2:	d001      	beq.n	1000dac8 <internal_event_post+0x30>
1000dac4:	1c13      	adds	r3, r2, #0
1000dac6:	e7fa      	b.n	1000dabe <internal_event_post+0x26>
1000dac8:	601c      	str	r4, [r3, #0]
1000daca:	e00a      	b.n	1000dae2 <internal_event_post+0x4a>
1000dacc:	b2c4      	uxtb	r4, r0
1000dace:	2c00      	cmp	r4, #0
1000dad0:	d107      	bne.n	1000dae2 <internal_event_post+0x4a>
1000dad2:	4c06      	ldr	r4, [pc, #24]	; (1000daec <internal_event_post+0x54>)
1000dad4:	60e2      	str	r2, [r4, #12]
1000dad6:	2201      	movs	r2, #1
1000dad8:	8123      	strh	r3, [r4, #8]
1000dada:	4b05      	ldr	r3, [pc, #20]	; (1000daf0 <internal_event_post+0x58>)
1000dadc:	80a0      	strh	r0, [r4, #4]
1000dade:	80e1      	strh	r1, [r4, #6]
1000dae0:	701a      	strb	r2, [r3, #0]
1000dae2:	bd70      	pop	{r4, r5, r6, pc}
1000dae4:	10018e08 	.word	0x10018e08
1000dae8:	10018e04 	.word	0x10018e04
1000daec:	10018df0 	.word	0x10018df0
1000daf0:	10018e00 	.word	0x10018e00

1000daf4 <internal_event_init>:
1000daf4:	b510      	push	{r4, lr}
1000daf6:	4b08      	ldr	r3, [pc, #32]	; (1000db18 <internal_event_init+0x24>)
1000daf8:	0900      	lsrs	r0, r0, #4
1000dafa:	0100      	lsls	r0, r0, #4
1000dafc:	681a      	ldr	r2, [r3, #0]
1000dafe:	1808      	adds	r0, r1, r0
1000db00:	4281      	cmp	r1, r0
1000db02:	d003      	beq.n	1000db0c <internal_event_init+0x18>
1000db04:	600a      	str	r2, [r1, #0]
1000db06:	1c0a      	adds	r2, r1, #0
1000db08:	3110      	adds	r1, #16
1000db0a:	e7f9      	b.n	1000db00 <internal_event_init+0xc>
1000db0c:	601a      	str	r2, [r3, #0]
1000db0e:	2200      	movs	r2, #0
1000db10:	4b02      	ldr	r3, [pc, #8]	; (1000db1c <internal_event_init+0x28>)
1000db12:	601a      	str	r2, [r3, #0]
1000db14:	bd10      	pop	{r4, pc}
1000db16:	46c0      	nop			; (mov r8, r8)
1000db18:	10018e08 	.word	0x10018e08
1000db1c:	10018e04 	.word	0x10018e04

1000db20 <special_events_handler>:
1000db20:	b538      	push	{r3, r4, r5, lr}
1000db22:	4c1b      	ldr	r4, [pc, #108]	; (1000db90 <special_events_handler+0x70>)
1000db24:	1c03      	adds	r3, r0, #0
1000db26:	8825      	ldrh	r5, [r4, #0]
1000db28:	1c08      	adds	r0, r1, #0
1000db2a:	1c21      	adds	r1, r4, #0
1000db2c:	429d      	cmp	r5, r3
1000db2e:	d107      	bne.n	1000db40 <special_events_handler+0x20>
1000db30:	88a5      	ldrh	r5, [r4, #4]
1000db32:	4285      	cmp	r5, r0
1000db34:	d104      	bne.n	1000db40 <special_events_handler+0x20>
1000db36:	2301      	movs	r3, #1
1000db38:	425b      	negs	r3, r3
1000db3a:	8023      	strh	r3, [r4, #0]
1000db3c:	60a2      	str	r2, [r4, #8]
1000db3e:	e009      	b.n	1000db54 <special_events_handler+0x34>
1000db40:	884c      	ldrh	r4, [r1, #2]
1000db42:	429c      	cmp	r4, r3
1000db44:	d10a      	bne.n	1000db5c <special_events_handler+0x3c>
1000db46:	888c      	ldrh	r4, [r1, #4]
1000db48:	4284      	cmp	r4, r0
1000db4a:	d107      	bne.n	1000db5c <special_events_handler+0x3c>
1000db4c:	2301      	movs	r3, #1
1000db4e:	425b      	negs	r3, r3
1000db50:	804b      	strh	r3, [r1, #2]
1000db52:	608a      	str	r2, [r1, #8]
1000db54:	4b0f      	ldr	r3, [pc, #60]	; (1000db94 <special_events_handler+0x74>)
1000db56:	4798      	blx	r3
1000db58:	2001      	movs	r0, #1
1000db5a:	e017      	b.n	1000db8c <special_events_handler+0x6c>
1000db5c:	490e      	ldr	r1, [pc, #56]	; (1000db98 <special_events_handler+0x78>)
1000db5e:	428b      	cmp	r3, r1
1000db60:	d00e      	beq.n	1000db80 <special_events_handler+0x60>
1000db62:	490e      	ldr	r1, [pc, #56]	; (1000db9c <special_events_handler+0x7c>)
1000db64:	428b      	cmp	r3, r1
1000db66:	d007      	beq.n	1000db78 <special_events_handler+0x58>
1000db68:	490d      	ldr	r1, [pc, #52]	; (1000dba0 <special_events_handler+0x80>)
1000db6a:	2000      	movs	r0, #0
1000db6c:	428b      	cmp	r3, r1
1000db6e:	d10d      	bne.n	1000db8c <special_events_handler+0x6c>
1000db70:	1c10      	adds	r0, r2, #0
1000db72:	4b0c      	ldr	r3, [pc, #48]	; (1000dba4 <special_events_handler+0x84>)
1000db74:	4798      	blx	r3
1000db76:	e7ef      	b.n	1000db58 <special_events_handler+0x38>
1000db78:	1c11      	adds	r1, r2, #0
1000db7a:	4b0b      	ldr	r3, [pc, #44]	; (1000dba8 <special_events_handler+0x88>)
1000db7c:	2200      	movs	r2, #0
1000db7e:	e002      	b.n	1000db86 <special_events_handler+0x66>
1000db80:	1c11      	adds	r1, r2, #0
1000db82:	2200      	movs	r2, #0
1000db84:	4b09      	ldr	r3, [pc, #36]	; (1000dbac <special_events_handler+0x8c>)
1000db86:	4798      	blx	r3
1000db88:	4243      	negs	r3, r0
1000db8a:	4158      	adcs	r0, r3
1000db8c:	bd38      	pop	{r3, r4, r5, pc}
1000db8e:	46c0      	nop			; (mov r8, r8)
1000db90:	10019d94 	.word	0x10019d94
1000db94:	1000f509 	.word	0x1000f509
1000db98:	00000e13 	.word	0x00000e13
1000db9c:	00000e15 	.word	0x00000e15
1000dba0:	00000e01 	.word	0x00000e01
1000dba4:	1000f879 	.word	0x1000f879
1000dba8:	1000fa39 	.word	0x1000fa39
1000dbac:	1000fb11 	.word	0x1000fb11

1000dbb0 <at_ble_event_get>:
1000dbb0:	2300      	movs	r3, #0
1000dbb2:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dbb4:	b087      	sub	sp, #28
1000dbb6:	9204      	str	r2, [sp, #16]
1000dbb8:	7003      	strb	r3, [r0, #0]
1000dbba:	9b04      	ldr	r3, [sp, #16]
1000dbbc:	9003      	str	r0, [sp, #12]
1000dbbe:	3b01      	subs	r3, #1
1000dbc0:	1c0d      	adds	r5, r1, #0
1000dbc2:	9305      	str	r3, [sp, #20]
1000dbc4:	3303      	adds	r3, #3
1000dbc6:	d802      	bhi.n	1000dbce <at_ble_event_get+0x1e>
1000dbc8:	9804      	ldr	r0, [sp, #16]
1000dbca:	4bae      	ldr	r3, [pc, #696]	; (1000de84 <at_ble_event_get+0x2d4>)
1000dbcc:	4798      	blx	r3
1000dbce:	9b05      	ldr	r3, [sp, #20]
1000dbd0:	4cad      	ldr	r4, [pc, #692]	; (1000de88 <at_ble_event_get+0x2d8>)
1000dbd2:	3303      	adds	r3, #3
1000dbd4:	d902      	bls.n	1000dbdc <at_ble_event_get+0x2c>
1000dbd6:	2300      	movs	r3, #0
1000dbd8:	9302      	str	r3, [sp, #8]
1000dbda:	e015      	b.n	1000dc08 <at_ble_event_get+0x58>
1000dbdc:	2300      	movs	r3, #0
1000dbde:	9302      	str	r3, [sp, #8]
1000dbe0:	6823      	ldr	r3, [r4, #0]
1000dbe2:	2b00      	cmp	r3, #0
1000dbe4:	d113      	bne.n	1000dc0e <at_ble_event_get+0x5e>
1000dbe6:	9b02      	ldr	r3, [sp, #8]
1000dbe8:	2bd0      	cmp	r3, #208	; 0xd0
1000dbea:	d100      	bne.n	1000dbee <at_ble_event_get+0x3e>
1000dbec:	e2da      	b.n	1000e1a4 <at_ble_event_get+0x5f4>
1000dbee:	9804      	ldr	r0, [sp, #16]
1000dbf0:	4ba6      	ldr	r3, [pc, #664]	; (1000de8c <at_ble_event_get+0x2dc>)
1000dbf2:	4798      	blx	r3
1000dbf4:	9002      	str	r0, [sp, #8]
1000dbf6:	2802      	cmp	r0, #2
1000dbf8:	d1f2      	bne.n	1000dbe0 <at_ble_event_get+0x30>
1000dbfa:	e03f      	b.n	1000dc7c <at_ble_event_get+0xcc>
1000dbfc:	9804      	ldr	r0, [sp, #16]
1000dbfe:	4ba3      	ldr	r3, [pc, #652]	; (1000de8c <at_ble_event_get+0x2dc>)
1000dc00:	4798      	blx	r3
1000dc02:	9002      	str	r0, [sp, #8]
1000dc04:	2802      	cmp	r0, #2
1000dc06:	d039      	beq.n	1000dc7c <at_ble_event_get+0xcc>
1000dc08:	6823      	ldr	r3, [r4, #0]
1000dc0a:	2b00      	cmp	r3, #0
1000dc0c:	d0f6      	beq.n	1000dbfc <at_ble_event_get+0x4c>
1000dc0e:	9b02      	ldr	r3, [sp, #8]
1000dc10:	2bd0      	cmp	r3, #208	; 0xd0
1000dc12:	d100      	bne.n	1000dc16 <at_ble_event_get+0x66>
1000dc14:	e2c6      	b.n	1000e1a4 <at_ble_event_get+0x5f4>
1000dc16:	9b02      	ldr	r3, [sp, #8]
1000dc18:	3b03      	subs	r3, #3
1000dc1a:	1e5a      	subs	r2, r3, #1
1000dc1c:	4193      	sbcs	r3, r2
1000dc1e:	9a02      	ldr	r2, [sp, #8]
1000dc20:	425b      	negs	r3, r3
1000dc22:	401a      	ands	r2, r3
1000dc24:	6823      	ldr	r3, [r4, #0]
1000dc26:	9202      	str	r2, [sp, #8]
1000dc28:	2b00      	cmp	r3, #0
1000dc2a:	d100      	bne.n	1000dc2e <at_ble_event_get+0x7e>
1000dc2c:	e2c2      	b.n	1000e1b4 <at_ble_event_get+0x604>
1000dc2e:	681a      	ldr	r2, [r3, #0]
1000dc30:	68de      	ldr	r6, [r3, #12]
1000dc32:	6022      	str	r2, [r4, #0]
1000dc34:	88da      	ldrh	r2, [r3, #6]
1000dc36:	9201      	str	r2, [sp, #4]
1000dc38:	4a95      	ldr	r2, [pc, #596]	; (1000de90 <at_ble_event_get+0x2e0>)
1000dc3a:	889c      	ldrh	r4, [r3, #4]
1000dc3c:	6811      	ldr	r1, [r2, #0]
1000dc3e:	6013      	str	r3, [r2, #0]
1000dc40:	6019      	str	r1, [r3, #0]
1000dc42:	4b94      	ldr	r3, [pc, #592]	; (1000de94 <at_ble_event_get+0x2e4>)
1000dc44:	781b      	ldrb	r3, [r3, #0]
1000dc46:	2b01      	cmp	r3, #1
1000dc48:	d10f      	bne.n	1000dc6a <at_ble_event_get+0xba>
1000dc4a:	4b93      	ldr	r3, [pc, #588]	; (1000de98 <at_ble_event_get+0x2e8>)
1000dc4c:	4a92      	ldr	r2, [pc, #584]	; (1000de98 <at_ble_event_get+0x2e8>)
1000dc4e:	8898      	ldrh	r0, [r3, #4]
1000dc50:	88d9      	ldrh	r1, [r3, #6]
1000dc52:	68d2      	ldr	r2, [r2, #12]
1000dc54:	891b      	ldrh	r3, [r3, #8]
1000dc56:	4f91      	ldr	r7, [pc, #580]	; (1000de9c <at_ble_event_get+0x2ec>)
1000dc58:	47b8      	blx	r7
1000dc5a:	2210      	movs	r2, #16
1000dc5c:	4b90      	ldr	r3, [pc, #576]	; (1000dea0 <at_ble_event_get+0x2f0>)
1000dc5e:	488e      	ldr	r0, [pc, #568]	; (1000de98 <at_ble_event_get+0x2e8>)
1000dc60:	2100      	movs	r1, #0
1000dc62:	4798      	blx	r3
1000dc64:	2300      	movs	r3, #0
1000dc66:	4a8b      	ldr	r2, [pc, #556]	; (1000de94 <at_ble_event_get+0x2e4>)
1000dc68:	7013      	strb	r3, [r2, #0]
1000dc6a:	9b02      	ldr	r3, [sp, #8]
1000dc6c:	2b00      	cmp	r3, #0
1000dc6e:	d114      	bne.n	1000dc9a <at_ble_event_get+0xea>
1000dc70:	4b8c      	ldr	r3, [pc, #560]	; (1000dea4 <at_ble_event_get+0x2f4>)
1000dc72:	429c      	cmp	r4, r3
1000dc74:	d009      	beq.n	1000dc8a <at_ble_event_get+0xda>
1000dc76:	4b8c      	ldr	r3, [pc, #560]	; (1000dea8 <at_ble_event_get+0x2f8>)
1000dc78:	429c      	cmp	r4, r3
1000dc7a:	d127      	bne.n	1000dccc <at_ble_event_get+0x11c>
1000dc7c:	233a      	movs	r3, #58	; 0x3a
1000dc7e:	9a03      	ldr	r2, [sp, #12]
1000dc80:	7013      	strb	r3, [r2, #0]
1000dc82:	2300      	movs	r3, #0
1000dc84:	9302      	str	r3, [sp, #8]
1000dc86:	1c1d      	adds	r5, r3, #0
1000dc88:	e007      	b.n	1000dc9a <at_ble_event_get+0xea>
1000dc8a:	9b01      	ldr	r3, [sp, #4]
1000dc8c:	42a3      	cmp	r3, r4
1000dc8e:	d000      	beq.n	1000dc92 <at_ble_event_get+0xe2>
1000dc90:	e28a      	b.n	1000e1a8 <at_ble_event_get+0x5f8>
1000dc92:	2338      	movs	r3, #56	; 0x38
1000dc94:	9a03      	ldr	r2, [sp, #12]
1000dc96:	7013      	strb	r3, [r2, #0]
1000dc98:	602e      	str	r6, [r5, #0]
1000dc9a:	9b03      	ldr	r3, [sp, #12]
1000dc9c:	781b      	ldrb	r3, [r3, #0]
1000dc9e:	2b3b      	cmp	r3, #59	; 0x3b
1000dca0:	d101      	bne.n	1000dca6 <at_ble_event_get+0xf6>
1000dca2:	4b82      	ldr	r3, [pc, #520]	; (1000deac <at_ble_event_get+0x2fc>)
1000dca4:	4798      	blx	r3
1000dca6:	9b03      	ldr	r3, [sp, #12]
1000dca8:	781b      	ldrb	r3, [r3, #0]
1000dcaa:	2b3b      	cmp	r3, #59	; 0x3b
1000dcac:	d003      	beq.n	1000dcb6 <at_ble_event_get+0x106>
1000dcae:	9b05      	ldr	r3, [sp, #20]
1000dcb0:	3303      	adds	r3, #3
1000dcb2:	d904      	bls.n	1000dcbe <at_ble_event_get+0x10e>
1000dcb4:	e283      	b.n	1000e1be <at_ble_event_get+0x60e>
1000dcb6:	9b02      	ldr	r3, [sp, #8]
1000dcb8:	2b00      	cmp	r3, #0
1000dcba:	d088      	beq.n	1000dbce <at_ble_event_get+0x1e>
1000dcbc:	e7f7      	b.n	1000dcae <at_ble_event_get+0xfe>
1000dcbe:	9b02      	ldr	r3, [sp, #8]
1000dcc0:	2bd0      	cmp	r3, #208	; 0xd0
1000dcc2:	d100      	bne.n	1000dcc6 <at_ble_event_get+0x116>
1000dcc4:	e27b      	b.n	1000e1be <at_ble_event_get+0x60e>
1000dcc6:	4b7a      	ldr	r3, [pc, #488]	; (1000deb0 <at_ble_event_get+0x300>)
1000dcc8:	4798      	blx	r3
1000dcca:	e278      	b.n	1000e1be <at_ble_event_get+0x60e>
1000dccc:	9b01      	ldr	r3, [sp, #4]
1000dcce:	2bbb      	cmp	r3, #187	; 0xbb
1000dcd0:	d125      	bne.n	1000dd1e <at_ble_event_get+0x16e>
1000dcd2:	2cbb      	cmp	r4, #187	; 0xbb
1000dcd4:	d123      	bne.n	1000dd1e <at_ble_event_get+0x16e>
1000dcd6:	466b      	mov	r3, sp
1000dcd8:	891b      	ldrh	r3, [r3, #8]
1000dcda:	80ab      	strh	r3, [r5, #4]
1000dcdc:	78b3      	ldrb	r3, [r6, #2]
1000dcde:	7872      	ldrb	r2, [r6, #1]
1000dce0:	78f0      	ldrb	r0, [r6, #3]
1000dce2:	021b      	lsls	r3, r3, #8
1000dce4:	4313      	orrs	r3, r2
1000dce6:	7971      	ldrb	r1, [r6, #5]
1000dce8:	7932      	ldrb	r2, [r6, #4]
1000dcea:	70a8      	strb	r0, [r5, #2]
1000dcec:	4871      	ldr	r0, [pc, #452]	; (1000deb4 <at_ble_event_get+0x304>)
1000dcee:	802b      	strh	r3, [r5, #0]
1000dcf0:	4283      	cmp	r3, r0
1000dcf2:	d806      	bhi.n	1000dd02 <at_ble_event_get+0x152>
1000dcf4:	4a70      	ldr	r2, [pc, #448]	; (1000deb8 <at_ble_event_get+0x308>)
1000dcf6:	4293      	cmp	r3, r2
1000dcf8:	d20b      	bcs.n	1000dd12 <at_ble_event_get+0x162>
1000dcfa:	4a70      	ldr	r2, [pc, #448]	; (1000debc <at_ble_event_get+0x30c>)
1000dcfc:	4293      	cmp	r3, r2
1000dcfe:	d008      	beq.n	1000dd12 <at_ble_event_get+0x162>
1000dd00:	e009      	b.n	1000dd16 <at_ble_event_get+0x166>
1000dd02:	486f      	ldr	r0, [pc, #444]	; (1000dec0 <at_ble_event_get+0x310>)
1000dd04:	4283      	cmp	r3, r0
1000dd06:	d106      	bne.n	1000dd16 <at_ble_event_get+0x166>
1000dd08:	020b      	lsls	r3, r1, #8
1000dd0a:	4313      	orrs	r3, r2
1000dd0c:	80ab      	strh	r3, [r5, #4]
1000dd0e:	2337      	movs	r3, #55	; 0x37
1000dd10:	e002      	b.n	1000dd18 <at_ble_event_get+0x168>
1000dd12:	2336      	movs	r3, #54	; 0x36
1000dd14:	e000      	b.n	1000dd18 <at_ble_event_get+0x168>
1000dd16:	2300      	movs	r3, #0
1000dd18:	9a03      	ldr	r2, [sp, #12]
1000dd1a:	7013      	strb	r3, [r2, #0]
1000dd1c:	e7bd      	b.n	1000dc9a <at_ble_event_get+0xea>
1000dd1e:	4b69      	ldr	r3, [pc, #420]	; (1000dec4 <at_ble_event_get+0x314>)
1000dd20:	429c      	cmp	r4, r3
1000dd22:	d100      	bne.n	1000dd26 <at_ble_event_get+0x176>
1000dd24:	e144      	b.n	1000dfb0 <at_ble_event_get+0x400>
1000dd26:	d865      	bhi.n	1000ddf4 <at_ble_event_get+0x244>
1000dd28:	4b67      	ldr	r3, [pc, #412]	; (1000dec8 <at_ble_event_get+0x318>)
1000dd2a:	429c      	cmp	r4, r3
1000dd2c:	d100      	bne.n	1000dd30 <at_ble_event_get+0x180>
1000dd2e:	e1d5      	b.n	1000e0dc <at_ble_event_get+0x52c>
1000dd30:	d82f      	bhi.n	1000dd92 <at_ble_event_get+0x1e2>
1000dd32:	4b66      	ldr	r3, [pc, #408]	; (1000decc <at_ble_event_get+0x31c>)
1000dd34:	429c      	cmp	r4, r3
1000dd36:	d100      	bne.n	1000dd3a <at_ble_event_get+0x18a>
1000dd38:	e1e0      	b.n	1000e0fc <at_ble_event_get+0x54c>
1000dd3a:	d813      	bhi.n	1000dd64 <at_ble_event_get+0x1b4>
1000dd3c:	4b64      	ldr	r3, [pc, #400]	; (1000ded0 <at_ble_event_get+0x320>)
1000dd3e:	429c      	cmp	r4, r3
1000dd40:	d100      	bne.n	1000dd44 <at_ble_event_get+0x194>
1000dd42:	e1a3      	b.n	1000e08c <at_ble_event_get+0x4dc>
1000dd44:	d804      	bhi.n	1000dd50 <at_ble_event_get+0x1a0>
1000dd46:	2638      	movs	r6, #56	; 0x38
1000dd48:	42b4      	cmp	r4, r6
1000dd4a:	d100      	bne.n	1000dd4e <at_ble_event_get+0x19e>
1000dd4c:	e225      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dd4e:	e117      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000dd50:	4b60      	ldr	r3, [pc, #384]	; (1000ded4 <at_ble_event_get+0x324>)
1000dd52:	429c      	cmp	r4, r3
1000dd54:	d100      	bne.n	1000dd58 <at_ble_event_get+0x1a8>
1000dd56:	e19f      	b.n	1000e098 <at_ble_event_get+0x4e8>
1000dd58:	33fe      	adds	r3, #254	; 0xfe
1000dd5a:	33ff      	adds	r3, #255	; 0xff
1000dd5c:	429c      	cmp	r4, r3
1000dd5e:	d100      	bne.n	1000dd62 <at_ble_event_get+0x1b2>
1000dd60:	e1d3      	b.n	1000e10a <at_ble_event_get+0x55a>
1000dd62:	e10d      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000dd64:	4b5c      	ldr	r3, [pc, #368]	; (1000ded8 <at_ble_event_get+0x328>)
1000dd66:	429c      	cmp	r4, r3
1000dd68:	d100      	bne.n	1000dd6c <at_ble_event_get+0x1bc>
1000dd6a:	e1a9      	b.n	1000e0c0 <at_ble_event_get+0x510>
1000dd6c:	d808      	bhi.n	1000dd80 <at_ble_event_get+0x1d0>
1000dd6e:	4b5b      	ldr	r3, [pc, #364]	; (1000dedc <at_ble_event_get+0x32c>)
1000dd70:	429c      	cmp	r4, r3
1000dd72:	d100      	bne.n	1000dd76 <at_ble_event_get+0x1c6>
1000dd74:	e196      	b.n	1000e0a4 <at_ble_event_get+0x4f4>
1000dd76:	4b5a      	ldr	r3, [pc, #360]	; (1000dee0 <at_ble_event_get+0x330>)
1000dd78:	429c      	cmp	r4, r3
1000dd7a:	d100      	bne.n	1000dd7e <at_ble_event_get+0x1ce>
1000dd7c:	e199      	b.n	1000e0b2 <at_ble_event_get+0x502>
1000dd7e:	e0ff      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000dd80:	4b58      	ldr	r3, [pc, #352]	; (1000dee4 <at_ble_event_get+0x334>)
1000dd82:	429c      	cmp	r4, r3
1000dd84:	d100      	bne.n	1000dd88 <at_ble_event_get+0x1d8>
1000dd86:	e1a2      	b.n	1000e0ce <at_ble_event_get+0x51e>
1000dd88:	4b57      	ldr	r3, [pc, #348]	; (1000dee8 <at_ble_event_get+0x338>)
1000dd8a:	429c      	cmp	r4, r3
1000dd8c:	d100      	bne.n	1000dd90 <at_ble_event_get+0x1e0>
1000dd8e:	e1d4      	b.n	1000e13a <at_ble_event_get+0x58a>
1000dd90:	e0f6      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000dd92:	4b56      	ldr	r3, [pc, #344]	; (1000deec <at_ble_event_get+0x33c>)
1000dd94:	429c      	cmp	r4, r3
1000dd96:	d100      	bne.n	1000dd9a <at_ble_event_get+0x1ea>
1000dd98:	e1c8      	b.n	1000e12c <at_ble_event_get+0x57c>
1000dd9a:	d812      	bhi.n	1000ddc2 <at_ble_event_get+0x212>
1000dd9c:	4b54      	ldr	r3, [pc, #336]	; (1000def0 <at_ble_event_get+0x340>)
1000dd9e:	429c      	cmp	r4, r3
1000dda0:	d100      	bne.n	1000dda4 <at_ble_event_get+0x1f4>
1000dda2:	e1d1      	b.n	1000e148 <at_ble_event_get+0x598>
1000dda4:	d804      	bhi.n	1000ddb0 <at_ble_event_get+0x200>
1000dda6:	4b53      	ldr	r3, [pc, #332]	; (1000def4 <at_ble_event_get+0x344>)
1000dda8:	429c      	cmp	r4, r3
1000ddaa:	d100      	bne.n	1000ddae <at_ble_event_get+0x1fe>
1000ddac:	e19b      	b.n	1000e0e6 <at_ble_event_get+0x536>
1000ddae:	e0e7      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000ddb0:	4b51      	ldr	r3, [pc, #324]	; (1000def8 <at_ble_event_get+0x348>)
1000ddb2:	429c      	cmp	r4, r3
1000ddb4:	d100      	bne.n	1000ddb8 <at_ble_event_get+0x208>
1000ddb6:	e1ad      	b.n	1000e114 <at_ble_event_get+0x564>
1000ddb8:	4b50      	ldr	r3, [pc, #320]	; (1000defc <at_ble_event_get+0x34c>)
1000ddba:	429c      	cmp	r4, r3
1000ddbc:	d100      	bne.n	1000ddc0 <at_ble_event_get+0x210>
1000ddbe:	e1b0      	b.n	1000e122 <at_ble_event_get+0x572>
1000ddc0:	e0de      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000ddc2:	4b4f      	ldr	r3, [pc, #316]	; (1000df00 <at_ble_event_get+0x350>)
1000ddc4:	429c      	cmp	r4, r3
1000ddc6:	d100      	bne.n	1000ddca <at_ble_event_get+0x21a>
1000ddc8:	e0e0      	b.n	1000df8c <at_ble_event_get+0x3dc>
1000ddca:	d809      	bhi.n	1000dde0 <at_ble_event_get+0x230>
1000ddcc:	3b08      	subs	r3, #8
1000ddce:	429c      	cmp	r4, r3
1000ddd0:	d100      	bne.n	1000ddd4 <at_ble_event_get+0x224>
1000ddd2:	e0d7      	b.n	1000df84 <at_ble_event_get+0x3d4>
1000ddd4:	4b4b      	ldr	r3, [pc, #300]	; (1000df04 <at_ble_event_get+0x354>)
1000ddd6:	2639      	movs	r6, #57	; 0x39
1000ddd8:	429c      	cmp	r4, r3
1000ddda:	d100      	bne.n	1000ddde <at_ble_event_get+0x22e>
1000dddc:	e1dd      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000ddde:	e0cf      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000dde0:	23d1      	movs	r3, #209	; 0xd1
1000dde2:	011b      	lsls	r3, r3, #4
1000dde4:	429c      	cmp	r4, r3
1000dde6:	d100      	bne.n	1000ddea <at_ble_event_get+0x23a>
1000dde8:	e0d6      	b.n	1000df98 <at_ble_event_get+0x3e8>
1000ddea:	4b47      	ldr	r3, [pc, #284]	; (1000df08 <at_ble_event_get+0x358>)
1000ddec:	429c      	cmp	r4, r3
1000ddee:	d100      	bne.n	1000ddf2 <at_ble_event_get+0x242>
1000ddf0:	e0d8      	b.n	1000dfa4 <at_ble_event_get+0x3f4>
1000ddf2:	e0c5      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000ddf4:	4b45      	ldr	r3, [pc, #276]	; (1000df0c <at_ble_event_get+0x35c>)
1000ddf6:	429c      	cmp	r4, r3
1000ddf8:	d100      	bne.n	1000ddfc <at_ble_event_get+0x24c>
1000ddfa:	e117      	b.n	1000e02c <at_ble_event_get+0x47c>
1000ddfc:	d82e      	bhi.n	1000de5c <at_ble_event_get+0x2ac>
1000ddfe:	4b44      	ldr	r3, [pc, #272]	; (1000df10 <at_ble_event_get+0x360>)
1000de00:	429c      	cmp	r4, r3
1000de02:	d100      	bne.n	1000de06 <at_ble_event_get+0x256>
1000de04:	e13d      	b.n	1000e082 <at_ble_event_get+0x4d2>
1000de06:	d812      	bhi.n	1000de2e <at_ble_event_get+0x27e>
1000de08:	4b42      	ldr	r3, [pc, #264]	; (1000df14 <at_ble_event_get+0x364>)
1000de0a:	429c      	cmp	r4, r3
1000de0c:	d100      	bne.n	1000de10 <at_ble_event_get+0x260>
1000de0e:	e0e8      	b.n	1000dfe2 <at_ble_event_get+0x432>
1000de10:	d804      	bhi.n	1000de1c <at_ble_event_get+0x26c>
1000de12:	3b03      	subs	r3, #3
1000de14:	429c      	cmp	r4, r3
1000de16:	d100      	bne.n	1000de1a <at_ble_event_get+0x26a>
1000de18:	e0d0      	b.n	1000dfbc <at_ble_event_get+0x40c>
1000de1a:	e0b1      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000de1c:	4b3e      	ldr	r3, [pc, #248]	; (1000df18 <at_ble_event_get+0x368>)
1000de1e:	429c      	cmp	r4, r3
1000de20:	d100      	bne.n	1000de24 <at_ble_event_get+0x274>
1000de22:	e0d0      	b.n	1000dfc6 <at_ble_event_get+0x416>
1000de24:	4b3d      	ldr	r3, [pc, #244]	; (1000df1c <at_ble_event_get+0x36c>)
1000de26:	429c      	cmp	r4, r3
1000de28:	d100      	bne.n	1000de2c <at_ble_event_get+0x27c>
1000de2a:	e0f9      	b.n	1000e020 <at_ble_event_get+0x470>
1000de2c:	e0a8      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000de2e:	4b3c      	ldr	r3, [pc, #240]	; (1000df20 <at_ble_event_get+0x370>)
1000de30:	429c      	cmp	r4, r3
1000de32:	d100      	bne.n	1000de36 <at_ble_event_get+0x286>
1000de34:	e0db      	b.n	1000dfee <at_ble_event_get+0x43e>
1000de36:	d808      	bhi.n	1000de4a <at_ble_event_get+0x29a>
1000de38:	4b3a      	ldr	r3, [pc, #232]	; (1000df24 <at_ble_event_get+0x374>)
1000de3a:	429c      	cmp	r4, r3
1000de3c:	d100      	bne.n	1000de40 <at_ble_event_get+0x290>
1000de3e:	e11b      	b.n	1000e078 <at_ble_event_get+0x4c8>
1000de40:	4b39      	ldr	r3, [pc, #228]	; (1000df28 <at_ble_event_get+0x378>)
1000de42:	429c      	cmp	r4, r3
1000de44:	d100      	bne.n	1000de48 <at_ble_event_get+0x298>
1000de46:	e0d8      	b.n	1000dffa <at_ble_event_get+0x44a>
1000de48:	e09a      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000de4a:	4b38      	ldr	r3, [pc, #224]	; (1000df2c <at_ble_event_get+0x37c>)
1000de4c:	429c      	cmp	r4, r3
1000de4e:	d100      	bne.n	1000de52 <at_ble_event_get+0x2a2>
1000de50:	e0d8      	b.n	1000e004 <at_ble_event_get+0x454>
1000de52:	4b37      	ldr	r3, [pc, #220]	; (1000df30 <at_ble_event_get+0x380>)
1000de54:	429c      	cmp	r4, r3
1000de56:	d100      	bne.n	1000de5a <at_ble_event_get+0x2aa>
1000de58:	e0db      	b.n	1000e012 <at_ble_event_get+0x462>
1000de5a:	e091      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000de5c:	4b35      	ldr	r3, [pc, #212]	; (1000df34 <at_ble_event_get+0x384>)
1000de5e:	429c      	cmp	r4, r3
1000de60:	d100      	bne.n	1000de64 <at_ble_event_get+0x2b4>
1000de62:	e0f7      	b.n	1000e054 <at_ble_event_get+0x4a4>
1000de64:	d876      	bhi.n	1000df54 <at_ble_event_get+0x3a4>
1000de66:	4b34      	ldr	r3, [pc, #208]	; (1000df38 <at_ble_event_get+0x388>)
1000de68:	429c      	cmp	r4, r3
1000de6a:	d100      	bne.n	1000de6e <at_ble_event_get+0x2be>
1000de6c:	e0f8      	b.n	1000e060 <at_ble_event_get+0x4b0>
1000de6e:	d869      	bhi.n	1000df44 <at_ble_event_get+0x394>
1000de70:	4b32      	ldr	r3, [pc, #200]	; (1000df3c <at_ble_event_get+0x38c>)
1000de72:	429c      	cmp	r4, r3
1000de74:	d100      	bne.n	1000de78 <at_ble_event_get+0x2c8>
1000de76:	e0e0      	b.n	1000e03a <at_ble_event_get+0x48a>
1000de78:	4b31      	ldr	r3, [pc, #196]	; (1000df40 <at_ble_event_get+0x390>)
1000de7a:	429c      	cmp	r4, r3
1000de7c:	d100      	bne.n	1000de80 <at_ble_event_get+0x2d0>
1000de7e:	e0a9      	b.n	1000dfd4 <at_ble_event_get+0x424>
1000de80:	e07e      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000de82:	46c0      	nop			; (mov r8, r8)
1000de84:	1000f541 	.word	0x1000f541
1000de88:	10018e04 	.word	0x10018e04
1000de8c:	1000d485 	.word	0x1000d485
1000de90:	10018e08 	.word	0x10018e08
1000de94:	10018e00 	.word	0x10018e00
1000de98:	10018df0 	.word	0x10018df0
1000de9c:	1000da99 	.word	0x1000da99
1000dea0:	100147d5 	.word	0x100147d5
1000dea4:	0000ffff 	.word	0x0000ffff
1000dea8:	0000fffe 	.word	0x0000fffe
1000deac:	1000d6fd 	.word	0x1000d6fd
1000deb0:	1000f543 	.word	0x1000f543
1000deb4:	0000201e 	.word	0x0000201e
1000deb8:	0000201d 	.word	0x0000201d
1000debc:	00000c03 	.word	0x00000c03
1000dec0:	0000201f 	.word	0x0000201f
1000dec4:	00000d1c 	.word	0x00000d1c
1000dec8:	00000c0c 	.word	0x00000c0c
1000decc:	00000c02 	.word	0x00000c02
1000ded0:	00000a02 	.word	0x00000a02
1000ded4:	00000a03 	.word	0x00000a03
1000ded8:	00000c06 	.word	0x00000c06
1000dedc:	00000c04 	.word	0x00000c04
1000dee0:	00000c05 	.word	0x00000c05
1000dee4:	00000c07 	.word	0x00000c07
1000dee8:	00000c09 	.word	0x00000c09
1000deec:	00000c17 	.word	0x00000c17
1000def0:	00000c12 	.word	0x00000c12
1000def4:	00000c0d 	.word	0x00000c0d
1000def8:	00000c13 	.word	0x00000c13
1000defc:	00000c15 	.word	0x00000c15
1000df00:	00000d08 	.word	0x00000d08
1000df04:	00000d01 	.word	0x00000d01
1000df08:	00000d15 	.word	0x00000d15
1000df0c:	00000e1b 	.word	0x00000e1b
1000df10:	00000e0f 	.word	0x00000e0f
1000df14:	00000e03 	.word	0x00000e03
1000df18:	00000e06 	.word	0x00000e06
1000df1c:	00000e0a 	.word	0x00000e0a
1000df20:	00000e15 	.word	0x00000e15
1000df24:	00000e11 	.word	0x00000e11
1000df28:	00000e13 	.word	0x00000e13
1000df2c:	00000e17 	.word	0x00000e17
1000df30:	00000e19 	.word	0x00000e19
1000df34:	00000e27 	.word	0x00000e27
1000df38:	00000e21 	.word	0x00000e21
1000df3c:	00000e1c 	.word	0x00000e1c
1000df40:	00000e1d 	.word	0x00000e1d
1000df44:	4b9f      	ldr	r3, [pc, #636]	; (1000e1c4 <at_ble_event_get+0x614>)
1000df46:	429c      	cmp	r4, r3
1000df48:	d07e      	beq.n	1000e048 <at_ble_event_get+0x498>
1000df4a:	4b9f      	ldr	r3, [pc, #636]	; (1000e1c8 <at_ble_event_get+0x618>)
1000df4c:	429c      	cmp	r4, r3
1000df4e:	d100      	bne.n	1000df52 <at_ble_event_get+0x3a2>
1000df50:	e08c      	b.n	1000e06c <at_ble_event_get+0x4bc>
1000df52:	e015      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000df54:	4b9d      	ldr	r3, [pc, #628]	; (1000e1cc <at_ble_event_get+0x61c>)
1000df56:	429c      	cmp	r4, r3
1000df58:	d100      	bne.n	1000df5c <at_ble_event_get+0x3ac>
1000df5a:	e10a      	b.n	1000e172 <at_ble_event_get+0x5c2>
1000df5c:	d808      	bhi.n	1000df70 <at_ble_event_get+0x3c0>
1000df5e:	4b9c      	ldr	r3, [pc, #624]	; (1000e1d0 <at_ble_event_get+0x620>)
1000df60:	429c      	cmp	r4, r3
1000df62:	d100      	bne.n	1000df66 <at_ble_event_get+0x3b6>
1000df64:	e0f7      	b.n	1000e156 <at_ble_event_get+0x5a6>
1000df66:	4b9b      	ldr	r3, [pc, #620]	; (1000e1d4 <at_ble_event_get+0x624>)
1000df68:	429c      	cmp	r4, r3
1000df6a:	d100      	bne.n	1000df6e <at_ble_event_get+0x3be>
1000df6c:	e0fa      	b.n	1000e164 <at_ble_event_get+0x5b4>
1000df6e:	e007      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000df70:	4b99      	ldr	r3, [pc, #612]	; (1000e1d8 <at_ble_event_get+0x628>)
1000df72:	429c      	cmp	r4, r3
1000df74:	d100      	bne.n	1000df78 <at_ble_event_get+0x3c8>
1000df76:	e103      	b.n	1000e180 <at_ble_event_get+0x5d0>
1000df78:	4b98      	ldr	r3, [pc, #608]	; (1000e1dc <at_ble_event_get+0x62c>)
1000df7a:	429c      	cmp	r4, r3
1000df7c:	d100      	bne.n	1000df80 <at_ble_event_get+0x3d0>
1000df7e:	e106      	b.n	1000e18e <at_ble_event_get+0x5de>
1000df80:	2600      	movs	r6, #0
1000df82:	e10a      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000df84:	1c30      	adds	r0, r6, #0
1000df86:	1c29      	adds	r1, r5, #0
1000df88:	4b95      	ldr	r3, [pc, #596]	; (1000e1e0 <at_ble_event_get+0x630>)
1000df8a:	e014      	b.n	1000dfb6 <at_ble_event_get+0x406>
1000df8c:	1c30      	adds	r0, r6, #0
1000df8e:	1c29      	adds	r1, r5, #0
1000df90:	4b94      	ldr	r3, [pc, #592]	; (1000e1e4 <at_ble_event_get+0x634>)
1000df92:	4798      	blx	r3
1000df94:	2604      	movs	r6, #4
1000df96:	e100      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000df98:	1c30      	adds	r0, r6, #0
1000df9a:	1c29      	adds	r1, r5, #0
1000df9c:	4b92      	ldr	r3, [pc, #584]	; (1000e1e8 <at_ble_event_get+0x638>)
1000df9e:	4798      	blx	r3
1000dfa0:	2601      	movs	r6, #1
1000dfa2:	e0fa      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfa4:	1c30      	adds	r0, r6, #0
1000dfa6:	1c29      	adds	r1, r5, #0
1000dfa8:	4b90      	ldr	r3, [pc, #576]	; (1000e1ec <at_ble_event_get+0x63c>)
1000dfaa:	4798      	blx	r3
1000dfac:	260f      	movs	r6, #15
1000dfae:	e0f4      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfb0:	1c30      	adds	r0, r6, #0
1000dfb2:	1c29      	adds	r1, r5, #0
1000dfb4:	4b8e      	ldr	r3, [pc, #568]	; (1000e1f0 <at_ble_event_get+0x640>)
1000dfb6:	4798      	blx	r3
1000dfb8:	1c06      	adds	r6, r0, #0
1000dfba:	e0ee      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfbc:	9801      	ldr	r0, [sp, #4]
1000dfbe:	1c31      	adds	r1, r6, #0
1000dfc0:	1c2a      	adds	r2, r5, #0
1000dfc2:	4b8c      	ldr	r3, [pc, #560]	; (1000e1f4 <at_ble_event_get+0x644>)
1000dfc4:	e017      	b.n	1000dff6 <at_ble_event_get+0x446>
1000dfc6:	1c31      	adds	r1, r6, #0
1000dfc8:	9801      	ldr	r0, [sp, #4]
1000dfca:	1c2a      	adds	r2, r5, #0
1000dfcc:	4b8a      	ldr	r3, [pc, #552]	; (1000e1f8 <at_ble_event_get+0x648>)
1000dfce:	4798      	blx	r3
1000dfd0:	2611      	movs	r6, #17
1000dfd2:	e0e2      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfd4:	1c31      	adds	r1, r6, #0
1000dfd6:	9801      	ldr	r0, [sp, #4]
1000dfd8:	1c2a      	adds	r2, r5, #0
1000dfda:	4b88      	ldr	r3, [pc, #544]	; (1000e1fc <at_ble_event_get+0x64c>)
1000dfdc:	4798      	blx	r3
1000dfde:	2612      	movs	r6, #18
1000dfe0:	e0db      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfe2:	1c30      	adds	r0, r6, #0
1000dfe4:	1c29      	adds	r1, r5, #0
1000dfe6:	4b86      	ldr	r3, [pc, #536]	; (1000e200 <at_ble_event_get+0x650>)
1000dfe8:	4798      	blx	r3
1000dfea:	2606      	movs	r6, #6
1000dfec:	e0d5      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000dfee:	1c31      	adds	r1, r6, #0
1000dff0:	1c2a      	adds	r2, r5, #0
1000dff2:	9801      	ldr	r0, [sp, #4]
1000dff4:	4b83      	ldr	r3, [pc, #524]	; (1000e204 <at_ble_event_get+0x654>)
1000dff6:	4798      	blx	r3
1000dff8:	e7de      	b.n	1000dfb8 <at_ble_event_get+0x408>
1000dffa:	9801      	ldr	r0, [sp, #4]
1000dffc:	1c31      	adds	r1, r6, #0
1000dffe:	1c2a      	adds	r2, r5, #0
1000e000:	4b81      	ldr	r3, [pc, #516]	; (1000e208 <at_ble_event_get+0x658>)
1000e002:	e7f8      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e004:	1c31      	adds	r1, r6, #0
1000e006:	9801      	ldr	r0, [sp, #4]
1000e008:	1c2a      	adds	r2, r5, #0
1000e00a:	4b80      	ldr	r3, [pc, #512]	; (1000e20c <at_ble_event_get+0x65c>)
1000e00c:	4798      	blx	r3
1000e00e:	260d      	movs	r6, #13
1000e010:	e0c3      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e012:	1c31      	adds	r1, r6, #0
1000e014:	9801      	ldr	r0, [sp, #4]
1000e016:	1c2a      	adds	r2, r5, #0
1000e018:	4b7d      	ldr	r3, [pc, #500]	; (1000e210 <at_ble_event_get+0x660>)
1000e01a:	4798      	blx	r3
1000e01c:	260e      	movs	r6, #14
1000e01e:	e0bc      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e020:	9801      	ldr	r0, [sp, #4]
1000e022:	1c31      	adds	r1, r6, #0
1000e024:	1c2a      	adds	r2, r5, #0
1000e026:	4b7b      	ldr	r3, [pc, #492]	; (1000e214 <at_ble_event_get+0x664>)
1000e028:	4798      	blx	r3
1000e02a:	e084      	b.n	1000e136 <at_ble_event_get+0x586>
1000e02c:	1c31      	adds	r1, r6, #0
1000e02e:	9801      	ldr	r0, [sp, #4]
1000e030:	1c2a      	adds	r2, r5, #0
1000e032:	4b79      	ldr	r3, [pc, #484]	; (1000e218 <at_ble_event_get+0x668>)
1000e034:	4798      	blx	r3
1000e036:	260b      	movs	r6, #11
1000e038:	e0af      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e03a:	1c31      	adds	r1, r6, #0
1000e03c:	9801      	ldr	r0, [sp, #4]
1000e03e:	1c2a      	adds	r2, r5, #0
1000e040:	4b76      	ldr	r3, [pc, #472]	; (1000e21c <at_ble_event_get+0x66c>)
1000e042:	4798      	blx	r3
1000e044:	2610      	movs	r6, #16
1000e046:	e0a8      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e048:	1c30      	adds	r0, r6, #0
1000e04a:	1c29      	adds	r1, r5, #0
1000e04c:	4b74      	ldr	r3, [pc, #464]	; (1000e220 <at_ble_event_get+0x670>)
1000e04e:	4798      	blx	r3
1000e050:	2628      	movs	r6, #40	; 0x28
1000e052:	e0a2      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e054:	1c30      	adds	r0, r6, #0
1000e056:	1c29      	adds	r1, r5, #0
1000e058:	4b72      	ldr	r3, [pc, #456]	; (1000e224 <at_ble_event_get+0x674>)
1000e05a:	4798      	blx	r3
1000e05c:	2629      	movs	r6, #41	; 0x29
1000e05e:	e09c      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e060:	1c30      	adds	r0, r6, #0
1000e062:	1c29      	adds	r1, r5, #0
1000e064:	4b70      	ldr	r3, [pc, #448]	; (1000e228 <at_ble_event_get+0x678>)
1000e066:	4798      	blx	r3
1000e068:	2627      	movs	r6, #39	; 0x27
1000e06a:	e096      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e06c:	1c30      	adds	r0, r6, #0
1000e06e:	1c29      	adds	r1, r5, #0
1000e070:	4b6e      	ldr	r3, [pc, #440]	; (1000e22c <at_ble_event_get+0x67c>)
1000e072:	4798      	blx	r3
1000e074:	262a      	movs	r6, #42	; 0x2a
1000e076:	e090      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e078:	9801      	ldr	r0, [sp, #4]
1000e07a:	1c31      	adds	r1, r6, #0
1000e07c:	1c2a      	adds	r2, r5, #0
1000e07e:	4b6c      	ldr	r3, [pc, #432]	; (1000e230 <at_ble_event_get+0x680>)
1000e080:	e7b9      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e082:	9801      	ldr	r0, [sp, #4]
1000e084:	1c31      	adds	r1, r6, #0
1000e086:	1c2a      	adds	r2, r5, #0
1000e088:	4b6a      	ldr	r3, [pc, #424]	; (1000e234 <at_ble_event_get+0x684>)
1000e08a:	e7b4      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e08c:	1c30      	adds	r0, r6, #0
1000e08e:	1c29      	adds	r1, r5, #0
1000e090:	4b69      	ldr	r3, [pc, #420]	; (1000e238 <at_ble_event_get+0x688>)
1000e092:	4798      	blx	r3
1000e094:	262b      	movs	r6, #43	; 0x2b
1000e096:	e080      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e098:	1c30      	adds	r0, r6, #0
1000e09a:	1c29      	adds	r1, r5, #0
1000e09c:	4b67      	ldr	r3, [pc, #412]	; (1000e23c <at_ble_event_get+0x68c>)
1000e09e:	4798      	blx	r3
1000e0a0:	262c      	movs	r6, #44	; 0x2c
1000e0a2:	e07a      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0a4:	1c31      	adds	r1, r6, #0
1000e0a6:	9801      	ldr	r0, [sp, #4]
1000e0a8:	1c2a      	adds	r2, r5, #0
1000e0aa:	4b65      	ldr	r3, [pc, #404]	; (1000e240 <at_ble_event_get+0x690>)
1000e0ac:	4798      	blx	r3
1000e0ae:	2613      	movs	r6, #19
1000e0b0:	e073      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0b2:	1c31      	adds	r1, r6, #0
1000e0b4:	9801      	ldr	r0, [sp, #4]
1000e0b6:	1c2a      	adds	r2, r5, #0
1000e0b8:	4b62      	ldr	r3, [pc, #392]	; (1000e244 <at_ble_event_get+0x694>)
1000e0ba:	4798      	blx	r3
1000e0bc:	2614      	movs	r6, #20
1000e0be:	e06c      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0c0:	1c31      	adds	r1, r6, #0
1000e0c2:	9801      	ldr	r0, [sp, #4]
1000e0c4:	1c2a      	adds	r2, r5, #0
1000e0c6:	4b60      	ldr	r3, [pc, #384]	; (1000e248 <at_ble_event_get+0x698>)
1000e0c8:	4798      	blx	r3
1000e0ca:	2615      	movs	r6, #21
1000e0cc:	e065      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0ce:	1c31      	adds	r1, r6, #0
1000e0d0:	9801      	ldr	r0, [sp, #4]
1000e0d2:	1c2a      	adds	r2, r5, #0
1000e0d4:	4b5d      	ldr	r3, [pc, #372]	; (1000e24c <at_ble_event_get+0x69c>)
1000e0d6:	4798      	blx	r3
1000e0d8:	2616      	movs	r6, #22
1000e0da:	e05e      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0dc:	9801      	ldr	r0, [sp, #4]
1000e0de:	1c31      	adds	r1, r6, #0
1000e0e0:	1c2a      	adds	r2, r5, #0
1000e0e2:	4b5b      	ldr	r3, [pc, #364]	; (1000e250 <at_ble_event_get+0x6a0>)
1000e0e4:	e787      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e0e6:	1c31      	adds	r1, r6, #0
1000e0e8:	9801      	ldr	r0, [sp, #4]
1000e0ea:	1c2a      	adds	r2, r5, #0
1000e0ec:	4b58      	ldr	r3, [pc, #352]	; (1000e250 <at_ble_event_get+0x6a0>)
1000e0ee:	4798      	blx	r3
1000e0f0:	88a9      	ldrh	r1, [r5, #4]
1000e0f2:	1c06      	adds	r6, r0, #0
1000e0f4:	4b57      	ldr	r3, [pc, #348]	; (1000e254 <at_ble_event_get+0x6a4>)
1000e0f6:	8828      	ldrh	r0, [r5, #0]
1000e0f8:	4798      	blx	r3
1000e0fa:	e04e      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e0fc:	1c31      	adds	r1, r6, #0
1000e0fe:	9801      	ldr	r0, [sp, #4]
1000e100:	1c2a      	adds	r2, r5, #0
1000e102:	4b55      	ldr	r3, [pc, #340]	; (1000e258 <at_ble_event_get+0x6a8>)
1000e104:	4798      	blx	r3
1000e106:	2623      	movs	r6, #35	; 0x23
1000e108:	e047      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e10a:	9801      	ldr	r0, [sp, #4]
1000e10c:	1c31      	adds	r1, r6, #0
1000e10e:	1c2a      	adds	r2, r5, #0
1000e110:	4b52      	ldr	r3, [pc, #328]	; (1000e25c <at_ble_event_get+0x6ac>)
1000e112:	e770      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e114:	9b01      	ldr	r3, [sp, #4]
1000e116:	1c30      	adds	r0, r6, #0
1000e118:	0a1f      	lsrs	r7, r3, #8
1000e11a:	802f      	strh	r7, [r5, #0]
1000e11c:	1c29      	adds	r1, r5, #0
1000e11e:	4b50      	ldr	r3, [pc, #320]	; (1000e260 <at_ble_event_get+0x6b0>)
1000e120:	e749      	b.n	1000dfb6 <at_ble_event_get+0x406>
1000e122:	9801      	ldr	r0, [sp, #4]
1000e124:	1c31      	adds	r1, r6, #0
1000e126:	1c2a      	adds	r2, r5, #0
1000e128:	4b4e      	ldr	r3, [pc, #312]	; (1000e264 <at_ble_event_get+0x6b4>)
1000e12a:	e764      	b.n	1000dff6 <at_ble_event_get+0x446>
1000e12c:	1c30      	adds	r0, r6, #0
1000e12e:	1c29      	adds	r1, r5, #0
1000e130:	9a01      	ldr	r2, [sp, #4]
1000e132:	4b4d      	ldr	r3, [pc, #308]	; (1000e268 <at_ble_event_get+0x6b8>)
1000e134:	4798      	blx	r3
1000e136:	263b      	movs	r6, #59	; 0x3b
1000e138:	e02f      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e13a:	1c31      	adds	r1, r6, #0
1000e13c:	9801      	ldr	r0, [sp, #4]
1000e13e:	1c2a      	adds	r2, r5, #0
1000e140:	4b4a      	ldr	r3, [pc, #296]	; (1000e26c <at_ble_event_get+0x6bc>)
1000e142:	4798      	blx	r3
1000e144:	2618      	movs	r6, #24
1000e146:	e028      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e148:	1c31      	adds	r1, r6, #0
1000e14a:	9801      	ldr	r0, [sp, #4]
1000e14c:	1c2a      	adds	r2, r5, #0
1000e14e:	4b48      	ldr	r3, [pc, #288]	; (1000e270 <at_ble_event_get+0x6c0>)
1000e150:	4798      	blx	r3
1000e152:	2620      	movs	r6, #32
1000e154:	e021      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e156:	1c31      	adds	r1, r6, #0
1000e158:	9801      	ldr	r0, [sp, #4]
1000e15a:	1c2a      	adds	r2, r5, #0
1000e15c:	4b45      	ldr	r3, [pc, #276]	; (1000e274 <at_ble_event_get+0x6c4>)
1000e15e:	4798      	blx	r3
1000e160:	2633      	movs	r6, #51	; 0x33
1000e162:	e01a      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e164:	1c31      	adds	r1, r6, #0
1000e166:	9801      	ldr	r0, [sp, #4]
1000e168:	1c2a      	adds	r2, r5, #0
1000e16a:	4b43      	ldr	r3, [pc, #268]	; (1000e278 <at_ble_event_get+0x6c8>)
1000e16c:	4798      	blx	r3
1000e16e:	2630      	movs	r6, #48	; 0x30
1000e170:	e013      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e172:	1c31      	adds	r1, r6, #0
1000e174:	9801      	ldr	r0, [sp, #4]
1000e176:	1c2a      	adds	r2, r5, #0
1000e178:	4b40      	ldr	r3, [pc, #256]	; (1000e27c <at_ble_event_get+0x6cc>)
1000e17a:	4798      	blx	r3
1000e17c:	2634      	movs	r6, #52	; 0x34
1000e17e:	e00c      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e180:	1c31      	adds	r1, r6, #0
1000e182:	9801      	ldr	r0, [sp, #4]
1000e184:	1c2a      	adds	r2, r5, #0
1000e186:	4b3e      	ldr	r3, [pc, #248]	; (1000e280 <at_ble_event_get+0x6d0>)
1000e188:	4798      	blx	r3
1000e18a:	2635      	movs	r6, #53	; 0x35
1000e18c:	e005      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e18e:	1c31      	adds	r1, r6, #0
1000e190:	9801      	ldr	r0, [sp, #4]
1000e192:	1c2a      	adds	r2, r5, #0
1000e194:	4b3b      	ldr	r3, [pc, #236]	; (1000e284 <at_ble_event_get+0x6d4>)
1000e196:	4798      	blx	r3
1000e198:	2632      	movs	r6, #50	; 0x32
1000e19a:	9b03      	ldr	r3, [sp, #12]
1000e19c:	701e      	strb	r6, [r3, #0]
1000e19e:	2300      	movs	r3, #0
1000e1a0:	9302      	str	r3, [sp, #8]
1000e1a2:	e57a      	b.n	1000dc9a <at_ble_event_get+0xea>
1000e1a4:	23d0      	movs	r3, #208	; 0xd0
1000e1a6:	e7fb      	b.n	1000e1a0 <at_ble_event_get+0x5f0>
1000e1a8:	9b01      	ldr	r3, [sp, #4]
1000e1aa:	9e02      	ldr	r6, [sp, #8]
1000e1ac:	2bbb      	cmp	r3, #187	; 0xbb
1000e1ae:	d000      	beq.n	1000e1b2 <at_ble_event_get+0x602>
1000e1b0:	e6e6      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000e1b2:	e7f2      	b.n	1000e19a <at_ble_event_get+0x5ea>
1000e1b4:	9b02      	ldr	r3, [sp, #8]
1000e1b6:	2b00      	cmp	r3, #0
1000e1b8:	d000      	beq.n	1000e1bc <at_ble_event_get+0x60c>
1000e1ba:	e56e      	b.n	1000dc9a <at_ble_event_get+0xea>
1000e1bc:	e6e0      	b.n	1000df80 <at_ble_event_get+0x3d0>
1000e1be:	9802      	ldr	r0, [sp, #8]
1000e1c0:	b007      	add	sp, #28
1000e1c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e1c4:	00000e22 	.word	0x00000e22
1000e1c8:	00000e25 	.word	0x00000e25
1000e1cc:	00001b05 	.word	0x00001b05
1000e1d0:	00001b01 	.word	0x00001b01
1000e1d4:	00001b03 	.word	0x00001b03
1000e1d8:	00001b06 	.word	0x00001b06
1000e1dc:	00001b08 	.word	0x00001b08
1000e1e0:	1001036d 	.word	0x1001036d
1000e1e4:	10010351 	.word	0x10010351
1000e1e8:	100105ed 	.word	0x100105ed
1000e1ec:	100106dd 	.word	0x100106dd
1000e1f0:	10010701 	.word	0x10010701
1000e1f4:	1000f6e5 	.word	0x1000f6e5
1000e1f8:	1000ff65 	.word	0x1000ff65
1000e1fc:	1000ffe1 	.word	0x1000ffe1
1000e200:	1000f99d 	.word	0x1000f99d
1000e204:	1000fa39 	.word	0x1000fa39
1000e208:	1000fb11 	.word	0x1000fb11
1000e20c:	1000fd99 	.word	0x1000fd99
1000e210:	1000fe39 	.word	0x1000fe39
1000e214:	1000fef1 	.word	0x1000fef1
1000e218:	1000ff19 	.word	0x1000ff19
1000e21c:	1000ff2f 	.word	0x1000ff2f
1000e220:	1000fff9 	.word	0x1000fff9
1000e224:	10010027 	.word	0x10010027
1000e228:	1001003d 	.word	0x1001003d
1000e22c:	10010067 	.word	0x10010067
1000e230:	1000fe95 	.word	0x1000fe95
1000e234:	1000febf 	.word	0x1000febf
1000e238:	1000f125 	.word	0x1000f125
1000e23c:	1000f151 	.word	0x1000f151
1000e240:	100108a9 	.word	0x100108a9
1000e244:	100108e5 	.word	0x100108e5
1000e248:	1001092d 	.word	0x1001092d
1000e24c:	10010971 	.word	0x10010971
1000e250:	100109a5 	.word	0x100109a5
1000e254:	10010869 	.word	0x10010869
1000e258:	10010a71 	.word	0x10010a71
1000e25c:	100109f9 	.word	0x100109f9
1000e260:	1000f07d 	.word	0x1000f07d
1000e264:	1000f0e9 	.word	0x1000f0e9
1000e268:	1000f0ad 	.word	0x1000f0ad
1000e26c:	10010a81 	.word	0x10010a81
1000e270:	10010ac1 	.word	0x10010ac1
1000e274:	10010d89 	.word	0x10010d89
1000e278:	10010d93 	.word	0x10010d93
1000e27c:	10010d99 	.word	0x10010d99
1000e280:	10010d9f 	.word	0x10010d9f
1000e284:	10010dab 	.word	0x10010dab

1000e288 <internal_event_flush>:
1000e288:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e28a:	490e      	ldr	r1, [pc, #56]	; (1000e2c4 <internal_event_flush+0x3c>)
1000e28c:	2400      	movs	r4, #0
1000e28e:	680b      	ldr	r3, [r1, #0]
1000e290:	1c0f      	adds	r7, r1, #0
1000e292:	1c1e      	adds	r6, r3, #0
1000e294:	4a0c      	ldr	r2, [pc, #48]	; (1000e2c8 <internal_event_flush+0x40>)
1000e296:	6815      	ldr	r5, [r2, #0]
1000e298:	9201      	str	r2, [sp, #4]
1000e29a:	2b00      	cmp	r3, #0
1000e29c:	d00e      	beq.n	1000e2bc <internal_event_flush+0x34>
1000e29e:	889a      	ldrh	r2, [r3, #4]
1000e2a0:	6819      	ldr	r1, [r3, #0]
1000e2a2:	4282      	cmp	r2, r0
1000e2a4:	d107      	bne.n	1000e2b6 <internal_event_flush+0x2e>
1000e2a6:	2c00      	cmp	r4, #0
1000e2a8:	d001      	beq.n	1000e2ae <internal_event_flush+0x26>
1000e2aa:	6021      	str	r1, [r4, #0]
1000e2ac:	e000      	b.n	1000e2b0 <internal_event_flush+0x28>
1000e2ae:	1c0e      	adds	r6, r1, #0
1000e2b0:	601d      	str	r5, [r3, #0]
1000e2b2:	1c1d      	adds	r5, r3, #0
1000e2b4:	1c23      	adds	r3, r4, #0
1000e2b6:	1c1c      	adds	r4, r3, #0
1000e2b8:	1c0b      	adds	r3, r1, #0
1000e2ba:	e7ee      	b.n	1000e29a <internal_event_flush+0x12>
1000e2bc:	9b01      	ldr	r3, [sp, #4]
1000e2be:	603e      	str	r6, [r7, #0]
1000e2c0:	601d      	str	r5, [r3, #0]
1000e2c2:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e2c4:	10018e04 	.word	0x10018e04
1000e2c8:	10018e08 	.word	0x10018e08

1000e2cc <internal_conn_flush>:
1000e2cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e2ce:	4a12      	ldr	r2, [pc, #72]	; (1000e318 <internal_conn_flush+0x4c>)
1000e2d0:	9000      	str	r0, [sp, #0]
1000e2d2:	6813      	ldr	r3, [r2, #0]
1000e2d4:	4811      	ldr	r0, [pc, #68]	; (1000e31c <internal_conn_flush+0x50>)
1000e2d6:	1c1f      	adds	r7, r3, #0
1000e2d8:	2100      	movs	r1, #0
1000e2da:	4684      	mov	ip, r0
1000e2dc:	6804      	ldr	r4, [r0, #0]
1000e2de:	9201      	str	r2, [sp, #4]
1000e2e0:	2b00      	cmp	r3, #0
1000e2e2:	d014      	beq.n	1000e30e <internal_conn_flush+0x42>
1000e2e4:	88d8      	ldrh	r0, [r3, #6]
1000e2e6:	9a00      	ldr	r2, [sp, #0]
1000e2e8:	681d      	ldr	r5, [r3, #0]
1000e2ea:	0a06      	lsrs	r6, r0, #8
1000e2ec:	4296      	cmp	r6, r2
1000e2ee:	d10b      	bne.n	1000e308 <internal_conn_flush+0x3c>
1000e2f0:	26fd      	movs	r6, #253	; 0xfd
1000e2f2:	4006      	ands	r6, r0
1000e2f4:	2e0c      	cmp	r6, #12
1000e2f6:	d107      	bne.n	1000e308 <internal_conn_flush+0x3c>
1000e2f8:	2900      	cmp	r1, #0
1000e2fa:	d001      	beq.n	1000e300 <internal_conn_flush+0x34>
1000e2fc:	600d      	str	r5, [r1, #0]
1000e2fe:	e000      	b.n	1000e302 <internal_conn_flush+0x36>
1000e300:	1c2f      	adds	r7, r5, #0
1000e302:	601c      	str	r4, [r3, #0]
1000e304:	1c1c      	adds	r4, r3, #0
1000e306:	1c0b      	adds	r3, r1, #0
1000e308:	1c19      	adds	r1, r3, #0
1000e30a:	1c2b      	adds	r3, r5, #0
1000e30c:	e7e8      	b.n	1000e2e0 <internal_conn_flush+0x14>
1000e30e:	9b01      	ldr	r3, [sp, #4]
1000e310:	601f      	str	r7, [r3, #0]
1000e312:	4663      	mov	r3, ip
1000e314:	601c      	str	r4, [r3, #0]
1000e316:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e318:	10018e04 	.word	0x10018e04
1000e31c:	10018e08 	.word	0x10018e08

1000e320 <at_ble_device_name_set>:
1000e320:	b530      	push	{r4, r5, lr}
1000e322:	23cf      	movs	r3, #207	; 0xcf
1000e324:	2800      	cmp	r0, #0
1000e326:	d010      	beq.n	1000e34a <at_ble_device_name_set+0x2a>
1000e328:	1e4a      	subs	r2, r1, #1
1000e32a:	2a1f      	cmp	r2, #31
1000e32c:	d80d      	bhi.n	1000e34a <at_ble_device_name_set+0x2a>
1000e32e:	4a08      	ldr	r2, [pc, #32]	; (1000e350 <at_ble_device_name_set+0x30>)
1000e330:	1c13      	adds	r3, r2, #0
1000e332:	33aa      	adds	r3, #170	; 0xaa
1000e334:	8019      	strh	r1, [r3, #0]
1000e336:	2300      	movs	r3, #0
1000e338:	1c1c      	adds	r4, r3, #0
1000e33a:	5cc5      	ldrb	r5, [r0, r3]
1000e33c:	34ac      	adds	r4, #172	; 0xac
1000e33e:	3301      	adds	r3, #1
1000e340:	5515      	strb	r5, [r2, r4]
1000e342:	b2dc      	uxtb	r4, r3
1000e344:	428c      	cmp	r4, r1
1000e346:	d3f7      	bcc.n	1000e338 <at_ble_device_name_set+0x18>
1000e348:	2300      	movs	r3, #0
1000e34a:	1c18      	adds	r0, r3, #0
1000e34c:	bd30      	pop	{r4, r5, pc}
1000e34e:	46c0      	nop			; (mov r8, r8)
1000e350:	10019e32 	.word	0x10019e32

1000e354 <at_ble_addr_get>:
1000e354:	b510      	push	{r4, lr}
1000e356:	1c04      	adds	r4, r0, #0
1000e358:	20cf      	movs	r0, #207	; 0xcf
1000e35a:	2c00      	cmp	r4, #0
1000e35c:	d006      	beq.n	1000e36c <at_ble_addr_get+0x18>
1000e35e:	4b04      	ldr	r3, [pc, #16]	; (1000e370 <at_ble_addr_get+0x1c>)
1000e360:	38ce      	subs	r0, #206	; 0xce
1000e362:	1c21      	adds	r1, r4, #0
1000e364:	4798      	blx	r3
1000e366:	4b03      	ldr	r3, [pc, #12]	; (1000e374 <at_ble_addr_get+0x20>)
1000e368:	791b      	ldrb	r3, [r3, #4]
1000e36a:	7023      	strb	r3, [r4, #0]
1000e36c:	bd10      	pop	{r4, pc}
1000e36e:	46c0      	nop			; (mov r8, r8)
1000e370:	10010201 	.word	0x10010201
1000e374:	10019e32 	.word	0x10019e32

1000e378 <at_ble_set_dev_config>:
1000e378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e37a:	7906      	ldrb	r6, [r0, #4]
1000e37c:	b089      	sub	sp, #36	; 0x24
1000e37e:	25cf      	movs	r5, #207	; 0xcf
1000e380:	2e03      	cmp	r6, #3
1000e382:	d838      	bhi.n	1000e3f6 <at_ble_set_dev_config+0x7e>
1000e384:	7803      	ldrb	r3, [r0, #0]
1000e386:	3511      	adds	r5, #17
1000e388:	2b0f      	cmp	r3, #15
1000e38a:	d834      	bhi.n	1000e3f6 <at_ble_set_dev_config+0x7e>
1000e38c:	2380      	movs	r3, #128	; 0x80
1000e38e:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e390:	3d11      	subs	r5, #17
1000e392:	009b      	lsls	r3, r3, #2
1000e394:	429f      	cmp	r7, r3
1000e396:	d82e      	bhi.n	1000e3f6 <at_ble_set_dev_config+0x7e>
1000e398:	7fc5      	ldrb	r5, [r0, #31]
1000e39a:	7f83      	ldrb	r3, [r0, #30]
1000e39c:	01ad      	lsls	r5, r5, #6
1000e39e:	015b      	lsls	r3, r3, #5
1000e3a0:	431d      	orrs	r5, r3
1000e3a2:	7ec3      	ldrb	r3, [r0, #27]
1000e3a4:	431d      	orrs	r5, r3
1000e3a6:	7f43      	ldrb	r3, [r0, #29]
1000e3a8:	011b      	lsls	r3, r3, #4
1000e3aa:	431d      	orrs	r5, r3
1000e3ac:	7f03      	ldrb	r3, [r0, #28]
1000e3ae:	009b      	lsls	r3, r3, #2
1000e3b0:	431d      	orrs	r5, r3
1000e3b2:	4b12      	ldr	r3, [pc, #72]	; (1000e3fc <at_ble_set_dev_config+0x84>)
1000e3b4:	b2ed      	uxtb	r5, r5
1000e3b6:	711e      	strb	r6, [r3, #4]
1000e3b8:	7903      	ldrb	r3, [r0, #4]
1000e3ba:	3b02      	subs	r3, #2
1000e3bc:	2b01      	cmp	r3, #1
1000e3be:	d801      	bhi.n	1000e3c4 <at_ble_set_dev_config+0x4c>
1000e3c0:	2302      	movs	r3, #2
1000e3c2:	7103      	strb	r3, [r0, #4]
1000e3c4:	1c04      	adds	r4, r0, #0
1000e3c6:	1c23      	adds	r3, r4, #0
1000e3c8:	330b      	adds	r3, #11
1000e3ca:	8861      	ldrh	r1, [r4, #2]
1000e3cc:	9307      	str	r3, [sp, #28]
1000e3ce:	7923      	ldrb	r3, [r4, #4]
1000e3d0:	7800      	ldrb	r0, [r0, #0]
1000e3d2:	9300      	str	r3, [sp, #0]
1000e3d4:	9501      	str	r5, [sp, #4]
1000e3d6:	8c25      	ldrh	r5, [r4, #32]
1000e3d8:	1d62      	adds	r2, r4, #5
1000e3da:	9502      	str	r5, [sp, #8]
1000e3dc:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e3de:	9b07      	ldr	r3, [sp, #28]
1000e3e0:	9503      	str	r5, [sp, #12]
1000e3e2:	9704      	str	r7, [sp, #16]
1000e3e4:	4d06      	ldr	r5, [pc, #24]	; (1000e400 <at_ble_set_dev_config+0x88>)
1000e3e6:	47a8      	blx	r5
1000e3e8:	7126      	strb	r6, [r4, #4]
1000e3ea:	1c05      	adds	r5, r0, #0
1000e3ec:	1c21      	adds	r1, r4, #0
1000e3ee:	4803      	ldr	r0, [pc, #12]	; (1000e3fc <at_ble_set_dev_config+0x84>)
1000e3f0:	2226      	movs	r2, #38	; 0x26
1000e3f2:	4b04      	ldr	r3, [pc, #16]	; (1000e404 <at_ble_set_dev_config+0x8c>)
1000e3f4:	4798      	blx	r3
1000e3f6:	1c28      	adds	r0, r5, #0
1000e3f8:	b009      	add	sp, #36	; 0x24
1000e3fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e3fc:	10019e32 	.word	0x10019e32
1000e400:	100100f9 	.word	0x100100f9
1000e404:	100147c3 	.word	0x100147c3

1000e408 <at_ble_init>:
1000e408:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e40a:	b087      	sub	sp, #28
1000e40c:	af03      	add	r7, sp, #12
1000e40e:	4954      	ldr	r1, [pc, #336]	; (1000e560 <at_ble_init+0x158>)
1000e410:	220b      	movs	r2, #11
1000e412:	4b54      	ldr	r3, [pc, #336]	; (1000e564 <at_ble_init+0x15c>)
1000e414:	1c04      	adds	r4, r0, #0
1000e416:	1c38      	adds	r0, r7, #0
1000e418:	4798      	blx	r3
1000e41a:	2205      	movs	r2, #5
1000e41c:	4b52      	ldr	r3, [pc, #328]	; (1000e568 <at_ble_init+0x160>)
1000e41e:	2640      	movs	r6, #64	; 0x40
1000e420:	801a      	strh	r2, [r3, #0]
1000e422:	2300      	movs	r3, #0
1000e424:	4a51      	ldr	r2, [pc, #324]	; (1000e56c <at_ble_init+0x164>)
1000e426:	6013      	str	r3, [r2, #0]
1000e428:	4a51      	ldr	r2, [pc, #324]	; (1000e570 <at_ble_init+0x168>)
1000e42a:	7013      	strb	r3, [r2, #0]
1000e42c:	4a51      	ldr	r2, [pc, #324]	; (1000e574 <at_ble_init+0x16c>)
1000e42e:	7013      	strb	r3, [r2, #0]
1000e430:	4b51      	ldr	r3, [pc, #324]	; (1000e578 <at_ble_init+0x170>)
1000e432:	4798      	blx	r3
1000e434:	4b51      	ldr	r3, [pc, #324]	; (1000e57c <at_ble_init+0x174>)
1000e436:	4798      	blx	r3
1000e438:	4b51      	ldr	r3, [pc, #324]	; (1000e580 <at_ble_init+0x178>)
1000e43a:	4798      	blx	r3
1000e43c:	4b51      	ldr	r3, [pc, #324]	; (1000e584 <at_ble_init+0x17c>)
1000e43e:	4798      	blx	r3
1000e440:	2c00      	cmp	r4, #0
1000e442:	d100      	bne.n	1000e446 <at_ble_init+0x3e>
1000e444:	e089      	b.n	1000e55a <at_ble_init+0x152>
1000e446:	68a3      	ldr	r3, [r4, #8]
1000e448:	2b00      	cmp	r3, #0
1000e44a:	d100      	bne.n	1000e44e <at_ble_init+0x46>
1000e44c:	e085      	b.n	1000e55a <at_ble_init+0x152>
1000e44e:	6923      	ldr	r3, [r4, #16]
1000e450:	2b00      	cmp	r3, #0
1000e452:	d100      	bne.n	1000e456 <at_ble_init+0x4e>
1000e454:	e081      	b.n	1000e55a <at_ble_init+0x152>
1000e456:	6820      	ldr	r0, [r4, #0]
1000e458:	2800      	cmp	r0, #0
1000e45a:	d102      	bne.n	1000e462 <at_ble_init+0x5a>
1000e45c:	6863      	ldr	r3, [r4, #4]
1000e45e:	2b00      	cmp	r3, #0
1000e460:	d17b      	bne.n	1000e55a <at_ble_init+0x152>
1000e462:	4b49      	ldr	r3, [pc, #292]	; (1000e588 <at_ble_init+0x180>)
1000e464:	6861      	ldr	r1, [r4, #4]
1000e466:	4798      	blx	r3
1000e468:	4b48      	ldr	r3, [pc, #288]	; (1000e58c <at_ble_init+0x184>)
1000e46a:	4798      	blx	r3
1000e46c:	2801      	cmp	r0, #1
1000e46e:	d901      	bls.n	1000e474 <at_ble_init+0x6c>
1000e470:	26e2      	movs	r6, #226	; 0xe2
1000e472:	e072      	b.n	1000e55a <at_ble_init+0x152>
1000e474:	4846      	ldr	r0, [pc, #280]	; (1000e590 <at_ble_init+0x188>)
1000e476:	4b47      	ldr	r3, [pc, #284]	; (1000e594 <at_ble_init+0x18c>)
1000e478:	4798      	blx	r3
1000e47a:	2800      	cmp	r0, #0
1000e47c:	d1f8      	bne.n	1000e470 <at_ble_init+0x68>
1000e47e:	1c20      	adds	r0, r4, #0
1000e480:	4b45      	ldr	r3, [pc, #276]	; (1000e598 <at_ble_init+0x190>)
1000e482:	4798      	blx	r3
1000e484:	68e0      	ldr	r0, [r4, #12]
1000e486:	68a1      	ldr	r1, [r4, #8]
1000e488:	4b44      	ldr	r3, [pc, #272]	; (1000e59c <at_ble_init+0x194>)
1000e48a:	4798      	blx	r3
1000e48c:	466b      	mov	r3, sp
1000e48e:	2201      	movs	r2, #1
1000e490:	1cdc      	adds	r4, r3, #3
1000e492:	1c20      	adds	r0, r4, #0
1000e494:	a901      	add	r1, sp, #4
1000e496:	4252      	negs	r2, r2
1000e498:	4b41      	ldr	r3, [pc, #260]	; (1000e5a0 <at_ble_init+0x198>)
1000e49a:	4798      	blx	r3
1000e49c:	2800      	cmp	r0, #0
1000e49e:	d102      	bne.n	1000e4a6 <at_ble_init+0x9e>
1000e4a0:	7823      	ldrb	r3, [r4, #0]
1000e4a2:	2b39      	cmp	r3, #57	; 0x39
1000e4a4:	d1f2      	bne.n	1000e48c <at_ble_init+0x84>
1000e4a6:	4b3f      	ldr	r3, [pc, #252]	; (1000e5a4 <at_ble_init+0x19c>)
1000e4a8:	4798      	blx	r3
1000e4aa:	1e06      	subs	r6, r0, #0
1000e4ac:	d155      	bne.n	1000e55a <at_ble_init+0x152>
1000e4ae:	1c03      	adds	r3, r0, #0
1000e4b0:	2101      	movs	r1, #1
1000e4b2:	4a3d      	ldr	r2, [pc, #244]	; (1000e5a8 <at_ble_init+0x1a0>)
1000e4b4:	4249      	negs	r1, r1
1000e4b6:	189a      	adds	r2, r3, r2
1000e4b8:	3312      	adds	r3, #18
1000e4ba:	8151      	strh	r1, [r2, #10]
1000e4bc:	2b90      	cmp	r3, #144	; 0x90
1000e4be:	d1f7      	bne.n	1000e4b0 <at_ble_init+0xa8>
1000e4c0:	4c3a      	ldr	r4, [pc, #232]	; (1000e5ac <at_ble_init+0x1a4>)
1000e4c2:	3b81      	subs	r3, #129	; 0x81
1000e4c4:	7023      	strb	r3, [r4, #0]
1000e4c6:	4b3a      	ldr	r3, [pc, #232]	; (1000e5b0 <at_ble_init+0x1a8>)
1000e4c8:	4a3a      	ldr	r2, [pc, #232]	; (1000e5b4 <at_ble_init+0x1ac>)
1000e4ca:	8063      	strh	r3, [r4, #2]
1000e4cc:	2300      	movs	r3, #0
1000e4ce:	7123      	strb	r3, [r4, #4]
1000e4d0:	3301      	adds	r3, #1
1000e4d2:	1e58      	subs	r0, r3, #1
1000e4d4:	0119      	lsls	r1, r3, #4
1000e4d6:	4301      	orrs	r1, r0
1000e4d8:	3302      	adds	r3, #2
1000e4da:	7011      	strb	r1, [r2, #0]
1000e4dc:	3201      	adds	r2, #1
1000e4de:	2b21      	cmp	r3, #33	; 0x21
1000e4e0:	d1f7      	bne.n	1000e4d2 <at_ble_init+0xca>
1000e4e2:	33e0      	adds	r3, #224	; 0xe0
1000e4e4:	33ff      	adds	r3, #255	; 0xff
1000e4e6:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e4e8:	1c23      	adds	r3, r4, #0
1000e4ea:	2500      	movs	r5, #0
1000e4ec:	3373      	adds	r3, #115	; 0x73
1000e4ee:	701d      	strb	r5, [r3, #0]
1000e4f0:	1c23      	adds	r3, r4, #0
1000e4f2:	3372      	adds	r3, #114	; 0x72
1000e4f4:	701d      	strb	r5, [r3, #0]
1000e4f6:	1c23      	adds	r3, r4, #0
1000e4f8:	3376      	adds	r3, #118	; 0x76
1000e4fa:	701d      	strb	r5, [r3, #0]
1000e4fc:	1c23      	adds	r3, r4, #0
1000e4fe:	33cc      	adds	r3, #204	; 0xcc
1000e500:	801d      	strh	r5, [r3, #0]
1000e502:	1c22      	adds	r2, r4, #0
1000e504:	23a0      	movs	r3, #160	; 0xa0
1000e506:	32d0      	adds	r2, #208	; 0xd0
1000e508:	005b      	lsls	r3, r3, #1
1000e50a:	8013      	strh	r3, [r2, #0]
1000e50c:	1c22      	adds	r2, r4, #0
1000e50e:	32ce      	adds	r2, #206	; 0xce
1000e510:	8013      	strh	r3, [r2, #0]
1000e512:	1c23      	adds	r3, r4, #0
1000e514:	33d2      	adds	r3, #210	; 0xd2
1000e516:	801d      	strh	r5, [r3, #0]
1000e518:	22fa      	movs	r2, #250	; 0xfa
1000e51a:	1c23      	adds	r3, r4, #0
1000e51c:	0052      	lsls	r2, r2, #1
1000e51e:	33d4      	adds	r3, #212	; 0xd4
1000e520:	801a      	strh	r2, [r3, #0]
1000e522:	1c23      	adds	r3, r4, #0
1000e524:	33d6      	adds	r3, #214	; 0xd6
1000e526:	701d      	strb	r5, [r3, #0]
1000e528:	1c20      	adds	r0, r4, #0
1000e52a:	4b23      	ldr	r3, [pc, #140]	; (1000e5b8 <at_ble_init+0x1b0>)
1000e52c:	76e5      	strb	r5, [r4, #27]
1000e52e:	7725      	strb	r5, [r4, #28]
1000e530:	7765      	strb	r5, [r4, #29]
1000e532:	77a5      	strb	r5, [r4, #30]
1000e534:	77e5      	strb	r5, [r4, #31]
1000e536:	8425      	strh	r5, [r4, #32]
1000e538:	8465      	strh	r5, [r4, #34]	; 0x22
1000e53a:	4798      	blx	r3
1000e53c:	1c23      	adds	r3, r4, #0
1000e53e:	2207      	movs	r2, #7
1000e540:	3374      	adds	r3, #116	; 0x74
1000e542:	701a      	strb	r2, [r3, #0]
1000e544:	1c23      	adds	r3, r4, #0
1000e546:	3204      	adds	r2, #4
1000e548:	33aa      	adds	r3, #170	; 0xaa
1000e54a:	801a      	strh	r2, [r3, #0]
1000e54c:	1c2b      	adds	r3, r5, #0
1000e54e:	5d7a      	ldrb	r2, [r7, r5]
1000e550:	33ac      	adds	r3, #172	; 0xac
1000e552:	3501      	adds	r5, #1
1000e554:	54e2      	strb	r2, [r4, r3]
1000e556:	2d0b      	cmp	r5, #11
1000e558:	d1f8      	bne.n	1000e54c <at_ble_init+0x144>
1000e55a:	1c30      	adds	r0, r6, #0
1000e55c:	b007      	add	sp, #28
1000e55e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e560:	1001714e 	.word	0x1001714e
1000e564:	100147c3 	.word	0x100147c3
1000e568:	10019da0 	.word	0x10019da0
1000e56c:	10018eb4 	.word	0x10018eb4
1000e570:	10018e14 	.word	0x10018e14
1000e574:	1001738c 	.word	0x1001738c
1000e578:	10010ad1 	.word	0x10010ad1
1000e57c:	1000e879 	.word	0x1000e879
1000e580:	1000eed9 	.word	0x1000eed9
1000e584:	1000f119 	.word	0x1000f119
1000e588:	1000ef15 	.word	0x1000ef15
1000e58c:	1000d195 	.word	0x1000d195
1000e590:	1000f419 	.word	0x1000f419
1000e594:	1000d3d9 	.word	0x1000d3d9
1000e598:	1000f4c1 	.word	0x1000f4c1
1000e59c:	1000daf5 	.word	0x1000daf5
1000e5a0:	1000dbb1 	.word	0x1000dbb1
1000e5a4:	10010089 	.word	0x10010089
1000e5a8:	10019da2 	.word	0x10019da2
1000e5ac:	10019e32 	.word	0x10019e32
1000e5b0:	00003a98 	.word	0x00003a98
1000e5b4:	10019e3d 	.word	0x10019e3d
1000e5b8:	1000e379 	.word	0x1000e379

1000e5bc <at_ble_addr_set>:
1000e5bc:	b538      	push	{r3, r4, r5, lr}
1000e5be:	1c45      	adds	r5, r0, #1
1000e5c0:	1c03      	adds	r3, r0, #0
1000e5c2:	20cf      	movs	r0, #207	; 0xcf
1000e5c4:	2d00      	cmp	r5, #0
1000e5c6:	d018      	beq.n	1000e5fa <at_ble_addr_set+0x3e>
1000e5c8:	781a      	ldrb	r2, [r3, #0]
1000e5ca:	2a03      	cmp	r2, #3
1000e5cc:	d815      	bhi.n	1000e5fa <at_ble_addr_set+0x3e>
1000e5ce:	2a01      	cmp	r2, #1
1000e5d0:	d102      	bne.n	1000e5d8 <at_ble_addr_set+0x1c>
1000e5d2:	785a      	ldrb	r2, [r3, #1]
1000e5d4:	2a00      	cmp	r2, #0
1000e5d6:	d010      	beq.n	1000e5fa <at_ble_addr_set+0x3e>
1000e5d8:	1c1c      	adds	r4, r3, #0
1000e5da:	1c29      	adds	r1, r5, #0
1000e5dc:	2206      	movs	r2, #6
1000e5de:	4b07      	ldr	r3, [pc, #28]	; (1000e5fc <at_ble_addr_set+0x40>)
1000e5e0:	4807      	ldr	r0, [pc, #28]	; (1000e600 <at_ble_addr_set+0x44>)
1000e5e2:	4798      	blx	r3
1000e5e4:	7823      	ldrb	r3, [r4, #0]
1000e5e6:	4807      	ldr	r0, [pc, #28]	; (1000e604 <at_ble_addr_set+0x48>)
1000e5e8:	7103      	strb	r3, [r0, #4]
1000e5ea:	4b07      	ldr	r3, [pc, #28]	; (1000e608 <at_ble_addr_set+0x4c>)
1000e5ec:	4798      	blx	r3
1000e5ee:	7823      	ldrb	r3, [r4, #0]
1000e5f0:	2b00      	cmp	r3, #0
1000e5f2:	d102      	bne.n	1000e5fa <at_ble_addr_set+0x3e>
1000e5f4:	1c28      	adds	r0, r5, #0
1000e5f6:	4b05      	ldr	r3, [pc, #20]	; (1000e60c <at_ble_addr_set+0x50>)
1000e5f8:	4798      	blx	r3
1000e5fa:	bd38      	pop	{r3, r4, r5, pc}
1000e5fc:	100147c3 	.word	0x100147c3
1000e600:	10019e37 	.word	0x10019e37
1000e604:	10019e32 	.word	0x10019e32
1000e608:	1000e379 	.word	0x1000e379
1000e60c:	1000f545 	.word	0x1000f545

1000e610 <at_ble_adv_data_set>:
1000e610:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e612:	4684      	mov	ip, r0
1000e614:	1c0f      	adds	r7, r1, #0
1000e616:	1c16      	adds	r6, r2, #0
1000e618:	1c1c      	adds	r4, r3, #0
1000e61a:	2800      	cmp	r0, #0
1000e61c:	d102      	bne.n	1000e624 <at_ble_adv_data_set+0x14>
1000e61e:	20e2      	movs	r0, #226	; 0xe2
1000e620:	2a00      	cmp	r2, #0
1000e622:	d02b      	beq.n	1000e67c <at_ble_adv_data_set+0x6c>
1000e624:	20cf      	movs	r0, #207	; 0xcf
1000e626:	2f1f      	cmp	r7, #31
1000e628:	d828      	bhi.n	1000e67c <at_ble_adv_data_set+0x6c>
1000e62a:	2c1f      	cmp	r4, #31
1000e62c:	d826      	bhi.n	1000e67c <at_ble_adv_data_set+0x6c>
1000e62e:	4663      	mov	r3, ip
1000e630:	2b00      	cmp	r3, #0
1000e632:	d00e      	beq.n	1000e652 <at_ble_adv_data_set+0x42>
1000e634:	4812      	ldr	r0, [pc, #72]	; (1000e680 <at_ble_adv_data_set+0x70>)
1000e636:	4d13      	ldr	r5, [pc, #76]	; (1000e684 <at_ble_adv_data_set+0x74>)
1000e638:	2f00      	cmp	r7, #0
1000e63a:	d104      	bne.n	1000e646 <at_ble_adv_data_set+0x36>
1000e63c:	1c39      	adds	r1, r7, #0
1000e63e:	221f      	movs	r2, #31
1000e640:	4b11      	ldr	r3, [pc, #68]	; (1000e688 <at_ble_adv_data_set+0x78>)
1000e642:	4798      	blx	r3
1000e644:	e003      	b.n	1000e64e <at_ble_adv_data_set+0x3e>
1000e646:	4661      	mov	r1, ip
1000e648:	1c3a      	adds	r2, r7, #0
1000e64a:	4b10      	ldr	r3, [pc, #64]	; (1000e68c <at_ble_adv_data_set+0x7c>)
1000e64c:	4798      	blx	r3
1000e64e:	3572      	adds	r5, #114	; 0x72
1000e650:	702f      	strb	r7, [r5, #0]
1000e652:	1e30      	subs	r0, r6, #0
1000e654:	d012      	beq.n	1000e67c <at_ble_adv_data_set+0x6c>
1000e656:	4d0b      	ldr	r5, [pc, #44]	; (1000e684 <at_ble_adv_data_set+0x74>)
1000e658:	480d      	ldr	r0, [pc, #52]	; (1000e690 <at_ble_adv_data_set+0x80>)
1000e65a:	2c00      	cmp	r4, #0
1000e65c:	d107      	bne.n	1000e66e <at_ble_adv_data_set+0x5e>
1000e65e:	1c21      	adds	r1, r4, #0
1000e660:	221f      	movs	r2, #31
1000e662:	4b09      	ldr	r3, [pc, #36]	; (1000e688 <at_ble_adv_data_set+0x78>)
1000e664:	3573      	adds	r5, #115	; 0x73
1000e666:	4798      	blx	r3
1000e668:	702c      	strb	r4, [r5, #0]
1000e66a:	1c20      	adds	r0, r4, #0
1000e66c:	e006      	b.n	1000e67c <at_ble_adv_data_set+0x6c>
1000e66e:	1c31      	adds	r1, r6, #0
1000e670:	1c22      	adds	r2, r4, #0
1000e672:	4b06      	ldr	r3, [pc, #24]	; (1000e68c <at_ble_adv_data_set+0x7c>)
1000e674:	4798      	blx	r3
1000e676:	2000      	movs	r0, #0
1000e678:	3573      	adds	r5, #115	; 0x73
1000e67a:	702c      	strb	r4, [r5, #0]
1000e67c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e67e:	46c0      	nop			; (mov r8, r8)
1000e680:	10019e66 	.word	0x10019e66
1000e684:	10019e32 	.word	0x10019e32
1000e688:	100147d5 	.word	0x100147d5
1000e68c:	100147c3 	.word	0x100147c3
1000e690:	10019e85 	.word	0x10019e85

1000e694 <at_ble_adv_start>:
1000e694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e696:	b091      	sub	sp, #68	; 0x44
1000e698:	1c1f      	adds	r7, r3, #0
1000e69a:	ab16      	add	r3, sp, #88	; 0x58
1000e69c:	881d      	ldrh	r5, [r3, #0]
1000e69e:	ab17      	add	r3, sp, #92	; 0x5c
1000e6a0:	881b      	ldrh	r3, [r3, #0]
1000e6a2:	910d      	str	r1, [sp, #52]	; 0x34
1000e6a4:	930e      	str	r3, [sp, #56]	; 0x38
1000e6a6:	ab18      	add	r3, sp, #96	; 0x60
1000e6a8:	781b      	ldrb	r3, [r3, #0]
1000e6aa:	1c04      	adds	r4, r0, #0
1000e6ac:	930f      	str	r3, [sp, #60]	; 0x3c
1000e6ae:	4b42      	ldr	r3, [pc, #264]	; (1000e7b8 <at_ble_adv_start+0x124>)
1000e6b0:	1c16      	adds	r6, r2, #0
1000e6b2:	3373      	adds	r3, #115	; 0x73
1000e6b4:	781b      	ldrb	r3, [r3, #0]
1000e6b6:	20cf      	movs	r0, #207	; 0xcf
1000e6b8:	930c      	str	r3, [sp, #48]	; 0x30
1000e6ba:	2c01      	cmp	r4, #1
1000e6bc:	d103      	bne.n	1000e6c6 <at_ble_adv_start+0x32>
1000e6be:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e6c0:	2b00      	cmp	r3, #0
1000e6c2:	d176      	bne.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6c4:	e024      	b.n	1000e710 <at_ble_adv_start+0x7c>
1000e6c6:	2c04      	cmp	r4, #4
1000e6c8:	d873      	bhi.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6ca:	2380      	movs	r3, #128	; 0x80
1000e6cc:	01db      	lsls	r3, r3, #7
1000e6ce:	429d      	cmp	r5, r3
1000e6d0:	d86f      	bhi.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6d2:	2c00      	cmp	r4, #0
1000e6d4:	d102      	bne.n	1000e6dc <at_ble_adv_start+0x48>
1000e6d6:	2d1f      	cmp	r5, #31
1000e6d8:	d96b      	bls.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6da:	e003      	b.n	1000e6e4 <at_ble_adv_start+0x50>
1000e6dc:	2d9f      	cmp	r5, #159	; 0x9f
1000e6de:	d801      	bhi.n	1000e6e4 <at_ble_adv_start+0x50>
1000e6e0:	2c01      	cmp	r4, #1
1000e6e2:	d166      	bne.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6e4:	2f00      	cmp	r7, #0
1000e6e6:	d009      	beq.n	1000e6fc <at_ble_adv_start+0x68>
1000e6e8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e6ea:	20cf      	movs	r0, #207	; 0xcf
1000e6ec:	3b01      	subs	r3, #1
1000e6ee:	2b01      	cmp	r3, #1
1000e6f0:	d95f      	bls.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e6f2:	2c01      	cmp	r4, #1
1000e6f4:	d102      	bne.n	1000e6fc <at_ble_adv_start+0x68>
1000e6f6:	2d00      	cmp	r5, #0
1000e6f8:	d100      	bne.n	1000e6fc <at_ble_adv_start+0x68>
1000e6fa:	3520      	adds	r5, #32
1000e6fc:	4b2f      	ldr	r3, [pc, #188]	; (1000e7bc <at_ble_adv_start+0x128>)
1000e6fe:	4798      	blx	r3
1000e700:	1c01      	adds	r1, r0, #0
1000e702:	2e00      	cmp	r6, #0
1000e704:	d043      	beq.n	1000e78e <at_ble_adv_start+0xfa>
1000e706:	7833      	ldrb	r3, [r6, #0]
1000e708:	1e60      	subs	r0, r4, #1
1000e70a:	2b00      	cmp	r3, #0
1000e70c:	d109      	bne.n	1000e722 <at_ble_adv_start+0x8e>
1000e70e:	e03b      	b.n	1000e788 <at_ble_adv_start+0xf4>
1000e710:	2380      	movs	r3, #128	; 0x80
1000e712:	01db      	lsls	r3, r3, #7
1000e714:	429d      	cmp	r5, r3
1000e716:	d84c      	bhi.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e718:	2e00      	cmp	r6, #0
1000e71a:	d04a      	beq.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e71c:	2f00      	cmp	r7, #0
1000e71e:	d1e3      	bne.n	1000e6e8 <at_ble_adv_start+0x54>
1000e720:	e02b      	b.n	1000e77a <at_ble_adv_start+0xe6>
1000e722:	2301      	movs	r3, #1
1000e724:	2803      	cmp	r0, #3
1000e726:	d93a      	bls.n	1000e79e <at_ble_adv_start+0x10a>
1000e728:	200d      	movs	r0, #13
1000e72a:	1c72      	adds	r2, r6, #1
1000e72c:	e002      	b.n	1000e734 <at_ble_adv_start+0xa0>
1000e72e:	200e      	movs	r0, #14
1000e730:	1e32      	subs	r2, r6, #0
1000e732:	d1fa      	bne.n	1000e72a <at_ble_adv_start+0x96>
1000e734:	4c20      	ldr	r4, [pc, #128]	; (1000e7b8 <at_ble_adv_start+0x124>)
1000e736:	3474      	adds	r4, #116	; 0x74
1000e738:	7826      	ldrb	r6, [r4, #0]
1000e73a:	2407      	movs	r4, #7
1000e73c:	2e00      	cmp	r6, #0
1000e73e:	d000      	beq.n	1000e742 <at_ble_adv_start+0xae>
1000e740:	1c34      	adds	r4, r6, #0
1000e742:	9200      	str	r2, [sp, #0]
1000e744:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e746:	9403      	str	r4, [sp, #12]
1000e748:	9204      	str	r2, [sp, #16]
1000e74a:	4a1b      	ldr	r2, [pc, #108]	; (1000e7b8 <at_ble_adv_start+0x124>)
1000e74c:	9501      	str	r5, [sp, #4]
1000e74e:	9502      	str	r5, [sp, #8]
1000e750:	9705      	str	r7, [sp, #20]
1000e752:	3272      	adds	r2, #114	; 0x72
1000e754:	7812      	ldrb	r2, [r2, #0]
1000e756:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e758:	9206      	str	r2, [sp, #24]
1000e75a:	4a19      	ldr	r2, [pc, #100]	; (1000e7c0 <at_ble_adv_start+0x12c>)
1000e75c:	9207      	str	r2, [sp, #28]
1000e75e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e760:	9208      	str	r2, [sp, #32]
1000e762:	4a18      	ldr	r2, [pc, #96]	; (1000e7c4 <at_ble_adv_start+0x130>)
1000e764:	9209      	str	r2, [sp, #36]	; 0x24
1000e766:	2264      	movs	r2, #100	; 0x64
1000e768:	4362      	muls	r2, r4
1000e76a:	b292      	uxth	r2, r2
1000e76c:	920a      	str	r2, [sp, #40]	; 0x28
1000e76e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e770:	4c15      	ldr	r4, [pc, #84]	; (1000e7c8 <at_ble_adv_start+0x134>)
1000e772:	920b      	str	r2, [sp, #44]	; 0x2c
1000e774:	4a15      	ldr	r2, [pc, #84]	; (1000e7cc <at_ble_adv_start+0x138>)
1000e776:	47a0      	blx	r4
1000e778:	e01b      	b.n	1000e7b2 <at_ble_adv_start+0x11e>
1000e77a:	2d00      	cmp	r5, #0
1000e77c:	d1be      	bne.n	1000e6fc <at_ble_adv_start+0x68>
1000e77e:	4b0f      	ldr	r3, [pc, #60]	; (1000e7bc <at_ble_adv_start+0x128>)
1000e780:	4798      	blx	r3
1000e782:	2520      	movs	r5, #32
1000e784:	1c01      	adds	r1, r0, #0
1000e786:	e7be      	b.n	1000e706 <at_ble_adv_start+0x72>
1000e788:	2803      	cmp	r0, #3
1000e78a:	d8cd      	bhi.n	1000e728 <at_ble_adv_start+0x94>
1000e78c:	e006      	b.n	1000e79c <at_ble_adv_start+0x108>
1000e78e:	1e60      	subs	r0, r4, #1
1000e790:	2803      	cmp	r0, #3
1000e792:	d903      	bls.n	1000e79c <at_ble_adv_start+0x108>
1000e794:	1c33      	adds	r3, r6, #0
1000e796:	200d      	movs	r0, #13
1000e798:	1c32      	adds	r2, r6, #0
1000e79a:	e7cb      	b.n	1000e734 <at_ble_adv_start+0xa0>
1000e79c:	2300      	movs	r3, #0
1000e79e:	f003 fc19 	bl	10011fd4 <__gnu_thumb1_case_sqi>
1000e7a2:	06c6      	.short	0x06c6
1000e7a4:	0204      	.short	0x0204
1000e7a6:	200f      	movs	r0, #15
1000e7a8:	e7c2      	b.n	1000e730 <at_ble_adv_start+0x9c>
1000e7aa:	2200      	movs	r2, #0
1000e7ac:	920c      	str	r2, [sp, #48]	; 0x30
1000e7ae:	200c      	movs	r0, #12
1000e7b0:	e7be      	b.n	1000e730 <at_ble_adv_start+0x9c>
1000e7b2:	b011      	add	sp, #68	; 0x44
1000e7b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7b6:	46c0      	nop			; (mov r8, r8)
1000e7b8:	10019e32 	.word	0x10019e32
1000e7bc:	100105d5 	.word	0x100105d5
1000e7c0:	10019e66 	.word	0x10019e66
1000e7c4:	10019e85 	.word	0x10019e85
1000e7c8:	100104b5 	.word	0x100104b5
1000e7cc:	00003a98 	.word	0x00003a98

1000e7d0 <at_ble_adv_stop>:
1000e7d0:	b508      	push	{r3, lr}
1000e7d2:	4b01      	ldr	r3, [pc, #4]	; (1000e7d8 <at_ble_adv_stop+0x8>)
1000e7d4:	4798      	blx	r3
1000e7d6:	bd08      	pop	{r3, pc}
1000e7d8:	100102e1 	.word	0x100102e1

1000e7dc <at_ble_scan_stop>:
1000e7dc:	b510      	push	{r4, lr}
1000e7de:	4b05      	ldr	r3, [pc, #20]	; (1000e7f4 <at_ble_scan_stop+0x18>)
1000e7e0:	4798      	blx	r3
1000e7e2:	1e04      	subs	r4, r0, #0
1000e7e4:	d103      	bne.n	1000e7ee <at_ble_scan_stop+0x12>
1000e7e6:	20d1      	movs	r0, #209	; 0xd1
1000e7e8:	4b03      	ldr	r3, [pc, #12]	; (1000e7f8 <at_ble_scan_stop+0x1c>)
1000e7ea:	0100      	lsls	r0, r0, #4
1000e7ec:	4798      	blx	r3
1000e7ee:	1c20      	adds	r0, r4, #0
1000e7f0:	bd10      	pop	{r4, pc}
1000e7f2:	46c0      	nop			; (mov r8, r8)
1000e7f4:	100102e1 	.word	0x100102e1
1000e7f8:	1000e289 	.word	0x1000e289

1000e7fc <at_ble_disconnect>:
1000e7fc:	b538      	push	{r3, r4, r5, lr}
1000e7fe:	1c04      	adds	r4, r0, #0
1000e800:	4b04      	ldr	r3, [pc, #16]	; (1000e814 <at_ble_disconnect+0x18>)
1000e802:	1c08      	adds	r0, r1, #0
1000e804:	1c21      	adds	r1, r4, #0
1000e806:	4798      	blx	r3
1000e808:	1c05      	adds	r5, r0, #0
1000e80a:	4b03      	ldr	r3, [pc, #12]	; (1000e818 <at_ble_disconnect+0x1c>)
1000e80c:	1c20      	adds	r0, r4, #0
1000e80e:	4798      	blx	r3
1000e810:	1c28      	adds	r0, r5, #0
1000e812:	bd38      	pop	{r3, r4, r5, pc}
1000e814:	1000f959 	.word	0x1000f959
1000e818:	1000e2cd 	.word	0x1000e2cd

1000e81c <at_ble_conn_update_reply>:
1000e81c:	b510      	push	{r4, lr}
1000e81e:	4c01      	ldr	r4, [pc, #4]	; (1000e824 <at_ble_conn_update_reply+0x8>)
1000e820:	47a0      	blx	r4
1000e822:	bd10      	pop	{r4, pc}
1000e824:	1000fe49 	.word	0x1000fe49

1000e828 <at_ble_random_address_resolve>:
1000e828:	b510      	push	{r4, lr}
1000e82a:	23cf      	movs	r3, #207	; 0xcf
1000e82c:	2800      	cmp	r0, #0
1000e82e:	d00a      	beq.n	1000e846 <at_ble_random_address_resolve+0x1e>
1000e830:	2900      	cmp	r1, #0
1000e832:	d008      	beq.n	1000e846 <at_ble_random_address_resolve+0x1e>
1000e834:	2a00      	cmp	r2, #0
1000e836:	d006      	beq.n	1000e846 <at_ble_random_address_resolve+0x1e>
1000e838:	780c      	ldrb	r4, [r1, #0]
1000e83a:	2c02      	cmp	r4, #2
1000e83c:	d103      	bne.n	1000e846 <at_ble_random_address_resolve+0x1e>
1000e83e:	4b03      	ldr	r3, [pc, #12]	; (1000e84c <at_ble_random_address_resolve+0x24>)
1000e840:	3101      	adds	r1, #1
1000e842:	4798      	blx	r3
1000e844:	2300      	movs	r3, #0
1000e846:	1c18      	adds	r0, r3, #0
1000e848:	bd10      	pop	{r4, pc}
1000e84a:	46c0      	nop			; (mov r8, r8)
1000e84c:	10010675 	.word	0x10010675

1000e850 <at_ble_uuid_type2len>:
1000e850:	23cf      	movs	r3, #207	; 0xcf
1000e852:	2802      	cmp	r0, #2
1000e854:	d801      	bhi.n	1000e85a <at_ble_uuid_type2len+0xa>
1000e856:	4b02      	ldr	r3, [pc, #8]	; (1000e860 <at_ble_uuid_type2len+0x10>)
1000e858:	5c1b      	ldrb	r3, [r3, r0]
1000e85a:	1c18      	adds	r0, r3, #0
1000e85c:	4770      	bx	lr
1000e85e:	46c0      	nop			; (mov r8, r8)
1000e860:	10017159 	.word	0x10017159

1000e864 <at_ble_uuid_len2type>:
1000e864:	1e83      	subs	r3, r0, #2
1000e866:	b2db      	uxtb	r3, r3
1000e868:	2003      	movs	r0, #3
1000e86a:	2b0e      	cmp	r3, #14
1000e86c:	d801      	bhi.n	1000e872 <at_ble_uuid_len2type+0xe>
1000e86e:	4a01      	ldr	r2, [pc, #4]	; (1000e874 <at_ble_uuid_len2type+0x10>)
1000e870:	5cd0      	ldrb	r0, [r2, r3]
1000e872:	4770      	bx	lr
1000e874:	1001715c 	.word	0x1001715c

1000e878 <init_gatt_client_module>:
1000e878:	2200      	movs	r2, #0
1000e87a:	4b01      	ldr	r3, [pc, #4]	; (1000e880 <init_gatt_client_module+0x8>)
1000e87c:	801a      	strh	r2, [r3, #0]
1000e87e:	4770      	bx	lr
1000e880:	10018e0c 	.word	0x10018e0c

1000e884 <db_searchATT>:
1000e884:	b570      	push	{r4, r5, r6, lr}
1000e886:	1c05      	adds	r5, r0, #0
1000e888:	2400      	movs	r4, #0
1000e88a:	4b0c      	ldr	r3, [pc, #48]	; (1000e8bc <db_searchATT+0x38>)
1000e88c:	6819      	ldr	r1, [r3, #0]
1000e88e:	4b0c      	ldr	r3, [pc, #48]	; (1000e8c0 <db_searchATT+0x3c>)
1000e890:	681e      	ldr	r6, [r3, #0]
1000e892:	428c      	cmp	r4, r1
1000e894:	dc10      	bgt.n	1000e8b8 <db_searchATT+0x34>
1000e896:	200c      	movs	r0, #12
1000e898:	1863      	adds	r3, r4, r1
1000e89a:	0fda      	lsrs	r2, r3, #31
1000e89c:	18d3      	adds	r3, r2, r3
1000e89e:	1c02      	adds	r2, r0, #0
1000e8a0:	105b      	asrs	r3, r3, #1
1000e8a2:	435a      	muls	r2, r3
1000e8a4:	18b0      	adds	r0, r6, r2
1000e8a6:	8802      	ldrh	r2, [r0, #0]
1000e8a8:	42aa      	cmp	r2, r5
1000e8aa:	d201      	bcs.n	1000e8b0 <db_searchATT+0x2c>
1000e8ac:	1e59      	subs	r1, r3, #1
1000e8ae:	e7f0      	b.n	1000e892 <db_searchATT+0xe>
1000e8b0:	42aa      	cmp	r2, r5
1000e8b2:	d902      	bls.n	1000e8ba <db_searchATT+0x36>
1000e8b4:	1c5c      	adds	r4, r3, #1
1000e8b6:	e7ec      	b.n	1000e892 <db_searchATT+0xe>
1000e8b8:	2000      	movs	r0, #0
1000e8ba:	bd70      	pop	{r4, r5, r6, pc}
1000e8bc:	10018e20 	.word	0x10018e20
1000e8c0:	10018e18 	.word	0x10018e18

1000e8c4 <att_permissions>:
1000e8c4:	b530      	push	{r4, r5, lr}
1000e8c6:	2403      	movs	r4, #3
1000e8c8:	1c05      	adds	r5, r0, #0
1000e8ca:	2301      	movs	r3, #1
1000e8cc:	4025      	ands	r5, r4
1000e8ce:	42a5      	cmp	r5, r4
1000e8d0:	d009      	beq.n	1000e8e6 <att_permissions+0x22>
1000e8d2:	1c23      	adds	r3, r4, #0
1000e8d4:	1924      	adds	r4, r4, r4
1000e8d6:	4220      	tst	r0, r4
1000e8d8:	d105      	bne.n	1000e8e6 <att_permissions+0x22>
1000e8da:	3b02      	subs	r3, #2
1000e8dc:	4218      	tst	r0, r3
1000e8de:	d102      	bne.n	1000e8e6 <att_permissions+0x22>
1000e8e0:	1e4b      	subs	r3, r1, #1
1000e8e2:	4199      	sbcs	r1, r3
1000e8e4:	b28b      	uxth	r3, r1
1000e8e6:	2130      	movs	r1, #48	; 0x30
1000e8e8:	4001      	ands	r1, r0
1000e8ea:	2930      	cmp	r1, #48	; 0x30
1000e8ec:	d007      	beq.n	1000e8fe <att_permissions+0x3a>
1000e8ee:	0641      	lsls	r1, r0, #25
1000e8f0:	d401      	bmi.n	1000e8f6 <att_permissions+0x32>
1000e8f2:	0681      	lsls	r1, r0, #26
1000e8f4:	d501      	bpl.n	1000e8fa <att_permissions+0x36>
1000e8f6:	4807      	ldr	r0, [pc, #28]	; (1000e914 <att_permissions+0x50>)
1000e8f8:	e009      	b.n	1000e90e <att_permissions+0x4a>
1000e8fa:	06c1      	lsls	r1, r0, #27
1000e8fc:	d501      	bpl.n	1000e902 <att_permissions+0x3e>
1000e8fe:	4806      	ldr	r0, [pc, #24]	; (1000e918 <att_permissions+0x54>)
1000e900:	e005      	b.n	1000e90e <att_permissions+0x4a>
1000e902:	2a00      	cmp	r2, #0
1000e904:	d001      	beq.n	1000e90a <att_permissions+0x46>
1000e906:	2204      	movs	r2, #4
1000e908:	4313      	orrs	r3, r2
1000e90a:	2080      	movs	r0, #128	; 0x80
1000e90c:	0180      	lsls	r0, r0, #6
1000e90e:	4318      	orrs	r0, r3
1000e910:	bd30      	pop	{r4, r5, pc}
1000e912:	46c0      	nop			; (mov r8, r8)
1000e914:	0000200c 	.word	0x0000200c
1000e918:	00002004 	.word	0x00002004

1000e91c <char_permissions>:
1000e91c:	b530      	push	{r4, r5, lr}
1000e91e:	2300      	movs	r3, #0
1000e920:	0784      	lsls	r4, r0, #30
1000e922:	d503      	bpl.n	1000e92c <char_permissions+0x10>
1000e924:	3301      	adds	r3, #1
1000e926:	4219      	tst	r1, r3
1000e928:	d100      	bne.n	1000e92c <char_permissions+0x10>
1000e92a:	3302      	adds	r3, #2
1000e92c:	0704      	lsls	r4, r0, #28
1000e92e:	d508      	bpl.n	1000e942 <char_permissions+0x26>
1000e930:	06cc      	lsls	r4, r1, #27
1000e932:	d501      	bpl.n	1000e938 <char_permissions+0x1c>
1000e934:	2404      	movs	r4, #4
1000e936:	e000      	b.n	1000e93a <char_permissions+0x1e>
1000e938:	240c      	movs	r4, #12
1000e93a:	4323      	orrs	r3, r4
1000e93c:	2480      	movs	r4, #128	; 0x80
1000e93e:	01a4      	lsls	r4, r4, #6
1000e940:	4323      	orrs	r3, r4
1000e942:	0684      	lsls	r4, r0, #26
1000e944:	d506      	bpl.n	1000e954 <char_permissions+0x38>
1000e946:	2406      	movs	r4, #6
1000e948:	4221      	tst	r1, r4
1000e94a:	d101      	bne.n	1000e950 <char_permissions+0x34>
1000e94c:	340a      	adds	r4, #10
1000e94e:	e000      	b.n	1000e952 <char_permissions+0x36>
1000e950:	2430      	movs	r4, #48	; 0x30
1000e952:	4323      	orrs	r3, r4
1000e954:	06c4      	lsls	r4, r0, #27
1000e956:	d506      	bpl.n	1000e966 <char_permissions+0x4a>
1000e958:	2406      	movs	r4, #6
1000e95a:	4221      	tst	r1, r4
1000e95c:	d101      	bne.n	1000e962 <char_permissions+0x46>
1000e95e:	343a      	adds	r4, #58	; 0x3a
1000e960:	e000      	b.n	1000e964 <char_permissions+0x48>
1000e962:	24c0      	movs	r4, #192	; 0xc0
1000e964:	4323      	orrs	r3, r4
1000e966:	2480      	movs	r4, #128	; 0x80
1000e968:	0064      	lsls	r4, r4, #1
1000e96a:	4220      	tst	r0, r4
1000e96c:	d000      	beq.n	1000e970 <char_permissions+0x54>
1000e96e:	4323      	orrs	r3, r4
1000e970:	07c4      	lsls	r4, r0, #31
1000e972:	d502      	bpl.n	1000e97a <char_permissions+0x5e>
1000e974:	2480      	movs	r4, #128	; 0x80
1000e976:	00a4      	lsls	r4, r4, #2
1000e978:	4323      	orrs	r3, r4
1000e97a:	2404      	movs	r4, #4
1000e97c:	4220      	tst	r0, r4
1000e97e:	d006      	beq.n	1000e98e <char_permissions+0x72>
1000e980:	06cd      	lsls	r5, r1, #27
1000e982:	d400      	bmi.n	1000e986 <char_permissions+0x6a>
1000e984:	240c      	movs	r4, #12
1000e986:	4323      	orrs	r3, r4
1000e988:	2480      	movs	r4, #128	; 0x80
1000e98a:	0124      	lsls	r4, r4, #4
1000e98c:	4323      	orrs	r3, r4
1000e98e:	0644      	lsls	r4, r0, #25
1000e990:	d501      	bpl.n	1000e996 <char_permissions+0x7a>
1000e992:	4c08      	ldr	r4, [pc, #32]	; (1000e9b4 <char_permissions+0x98>)
1000e994:	4323      	orrs	r3, r4
1000e996:	0600      	lsls	r0, r0, #24
1000e998:	d507      	bpl.n	1000e9aa <char_permissions+0x8e>
1000e99a:	2004      	movs	r0, #4
1000e99c:	06c9      	lsls	r1, r1, #27
1000e99e:	d400      	bmi.n	1000e9a2 <char_permissions+0x86>
1000e9a0:	200c      	movs	r0, #12
1000e9a2:	4303      	orrs	r3, r0
1000e9a4:	2084      	movs	r0, #132	; 0x84
1000e9a6:	0180      	lsls	r0, r0, #6
1000e9a8:	4303      	orrs	r3, r0
1000e9aa:	0390      	lsls	r0, r2, #14
1000e9ac:	4303      	orrs	r3, r0
1000e9ae:	b298      	uxth	r0, r3
1000e9b0:	bd30      	pop	{r4, r5, pc}
1000e9b2:	46c0      	nop			; (mov r8, r8)
1000e9b4:	00001004 	.word	0x00001004

1000e9b8 <presentation_format_define>:
1000e9b8:	b507      	push	{r0, r1, r2, lr}
1000e9ba:	466a      	mov	r2, sp
1000e9bc:	780b      	ldrb	r3, [r1, #0]
1000e9be:	7013      	strb	r3, [r2, #0]
1000e9c0:	784b      	ldrb	r3, [r1, #1]
1000e9c2:	7053      	strb	r3, [r2, #1]
1000e9c4:	884b      	ldrh	r3, [r1, #2]
1000e9c6:	7093      	strb	r3, [r2, #2]
1000e9c8:	0a1b      	lsrs	r3, r3, #8
1000e9ca:	70d3      	strb	r3, [r2, #3]
1000e9cc:	790b      	ldrb	r3, [r1, #4]
1000e9ce:	7113      	strb	r3, [r2, #4]
1000e9d0:	88cb      	ldrh	r3, [r1, #6]
1000e9d2:	2107      	movs	r1, #7
1000e9d4:	7153      	strb	r3, [r2, #5]
1000e9d6:	0a1b      	lsrs	r3, r3, #8
1000e9d8:	7193      	strb	r3, [r2, #6]
1000e9da:	4b01      	ldr	r3, [pc, #4]	; (1000e9e0 <presentation_format_define+0x28>)
1000e9dc:	4798      	blx	r3
1000e9de:	bd0e      	pop	{r1, r2, r3, pc}
1000e9e0:	10010c61 	.word	0x10010c61

1000e9e4 <db_addATT>:
1000e9e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e9e6:	4c29      	ldr	r4, [pc, #164]	; (1000ea8c <db_addATT+0xa8>)
1000e9e8:	1c1d      	adds	r5, r3, #0
1000e9ea:	6823      	ldr	r3, [r4, #0]
1000e9ec:	9001      	str	r0, [sp, #4]
1000e9ee:	26d3      	movs	r6, #211	; 0xd3
1000e9f0:	2b00      	cmp	r3, #0
1000e9f2:	d048      	beq.n	1000ea86 <db_addATT+0xa2>
1000e9f4:	1c1e      	adds	r6, r3, #0
1000e9f6:	3e0c      	subs	r6, #12
1000e9f8:	6026      	str	r6, [r4, #0]
1000e9fa:	2900      	cmp	r1, #0
1000e9fc:	d005      	beq.n	1000ea0a <db_addATT+0x26>
1000e9fe:	4f24      	ldr	r7, [pc, #144]	; (1000ea90 <db_addATT+0xac>)
1000ea00:	46bc      	mov	ip, r7
1000ea02:	4660      	mov	r0, ip
1000ea04:	683f      	ldr	r7, [r7, #0]
1000ea06:	18bf      	adds	r7, r7, r2
1000ea08:	6007      	str	r7, [r0, #0]
1000ea0a:	4821      	ldr	r0, [pc, #132]	; (1000ea90 <db_addATT+0xac>)
1000ea0c:	6807      	ldr	r7, [r0, #0]
1000ea0e:	4684      	mov	ip, r0
1000ea10:	42be      	cmp	r6, r7
1000ea12:	d932      	bls.n	1000ea7a <db_addATT+0x96>
1000ea14:	4668      	mov	r0, sp
1000ea16:	8880      	ldrh	r0, [r0, #4]
1000ea18:	3b0c      	subs	r3, #12
1000ea1a:	8018      	strh	r0, [r3, #0]
1000ea1c:	6823      	ldr	r3, [r4, #0]
1000ea1e:	2900      	cmp	r1, #0
1000ea20:	d009      	beq.n	1000ea36 <db_addATT+0x52>
1000ea22:	2a00      	cmp	r2, #0
1000ea24:	d007      	beq.n	1000ea36 <db_addATT+0x52>
1000ea26:	4660      	mov	r0, ip
1000ea28:	6800      	ldr	r0, [r0, #0]
1000ea2a:	809a      	strh	r2, [r3, #4]
1000ea2c:	1a80      	subs	r0, r0, r2
1000ea2e:	6098      	str	r0, [r3, #8]
1000ea30:	4b18      	ldr	r3, [pc, #96]	; (1000ea94 <db_addATT+0xb0>)
1000ea32:	4798      	blx	r3
1000ea34:	e002      	b.n	1000ea3c <db_addATT+0x58>
1000ea36:	2100      	movs	r1, #0
1000ea38:	809a      	strh	r2, [r3, #4]
1000ea3a:	6099      	str	r1, [r3, #8]
1000ea3c:	2300      	movs	r3, #0
1000ea3e:	6822      	ldr	r2, [r4, #0]
1000ea40:	7093      	strb	r3, [r2, #2]
1000ea42:	3303      	adds	r3, #3
1000ea44:	402b      	ands	r3, r5
1000ea46:	2b03      	cmp	r3, #3
1000ea48:	d001      	beq.n	1000ea4e <db_addATT+0x6a>
1000ea4a:	076b      	lsls	r3, r5, #29
1000ea4c:	d504      	bpl.n	1000ea58 <db_addATT+0x74>
1000ea4e:	2101      	movs	r1, #1
1000ea50:	6822      	ldr	r2, [r4, #0]
1000ea52:	7893      	ldrb	r3, [r2, #2]
1000ea54:	430b      	orrs	r3, r1
1000ea56:	7093      	strb	r3, [r2, #2]
1000ea58:	2330      	movs	r3, #48	; 0x30
1000ea5a:	402b      	ands	r3, r5
1000ea5c:	2b30      	cmp	r3, #48	; 0x30
1000ea5e:	d001      	beq.n	1000ea64 <db_addATT+0x80>
1000ea60:	066b      	lsls	r3, r5, #25
1000ea62:	d504      	bpl.n	1000ea6e <db_addATT+0x8a>
1000ea64:	2102      	movs	r1, #2
1000ea66:	6822      	ldr	r2, [r4, #0]
1000ea68:	7893      	ldrb	r3, [r2, #2]
1000ea6a:	430b      	orrs	r3, r1
1000ea6c:	7093      	strb	r3, [r2, #2]
1000ea6e:	4a0a      	ldr	r2, [pc, #40]	; (1000ea98 <db_addATT+0xb4>)
1000ea70:	2600      	movs	r6, #0
1000ea72:	6813      	ldr	r3, [r2, #0]
1000ea74:	3301      	adds	r3, #1
1000ea76:	6013      	str	r3, [r2, #0]
1000ea78:	e005      	b.n	1000ea86 <db_addATT+0xa2>
1000ea7a:	6023      	str	r3, [r4, #0]
1000ea7c:	2611      	movs	r6, #17
1000ea7e:	2900      	cmp	r1, #0
1000ea80:	d001      	beq.n	1000ea86 <db_addATT+0xa2>
1000ea82:	1aba      	subs	r2, r7, r2
1000ea84:	6002      	str	r2, [r0, #0]
1000ea86:	1c30      	adds	r0, r6, #0
1000ea88:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ea8a:	46c0      	nop			; (mov r8, r8)
1000ea8c:	10018e18 	.word	0x10018e18
1000ea90:	10018e1c 	.word	0x10018e1c
1000ea94:	100147c3 	.word	0x100147c3
1000ea98:	10018e20 	.word	0x10018e20

1000ea9c <user_description_define>:
1000ea9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ea9e:	1c05      	adds	r5, r0, #0
1000eaa0:	20cf      	movs	r0, #207	; 0xcf
1000eaa2:	2a00      	cmp	r2, #0
1000eaa4:	d01c      	beq.n	1000eae0 <user_description_define+0x44>
1000eaa6:	1c14      	adds	r4, r2, #0
1000eaa8:	2203      	movs	r2, #3
1000eaaa:	1c1e      	adds	r6, r3, #0
1000eaac:	400a      	ands	r2, r1
1000eaae:	1c0b      	adds	r3, r1, #0
1000eab0:	3a03      	subs	r2, #3
1000eab2:	4251      	negs	r1, r2
1000eab4:	4151      	adcs	r1, r2
1000eab6:	075a      	lsls	r2, r3, #29
1000eab8:	0fd2      	lsrs	r2, r2, #31
1000eaba:	430a      	orrs	r2, r1
1000eabc:	03d2      	lsls	r2, r2, #15
1000eabe:	4f09      	ldr	r7, [pc, #36]	; (1000eae4 <user_description_define+0x48>)
1000eac0:	1c28      	adds	r0, r5, #0
1000eac2:	2a00      	cmp	r2, #0
1000eac4:	d003      	beq.n	1000eace <user_description_define+0x32>
1000eac6:	1c21      	adds	r1, r4, #0
1000eac8:	1c32      	adds	r2, r6, #0
1000eaca:	47b8      	blx	r7
1000eacc:	e008      	b.n	1000eae0 <user_description_define+0x44>
1000eace:	1c11      	adds	r1, r2, #0
1000ead0:	47b8      	blx	r7
1000ead2:	2800      	cmp	r0, #0
1000ead4:	d104      	bne.n	1000eae0 <user_description_define+0x44>
1000ead6:	1c28      	adds	r0, r5, #0
1000ead8:	1c31      	adds	r1, r6, #0
1000eada:	1c22      	adds	r2, r4, #0
1000eadc:	4b02      	ldr	r3, [pc, #8]	; (1000eae8 <user_description_define+0x4c>)
1000eade:	4798      	blx	r3
1000eae0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000eae2:	46c0      	nop			; (mov r8, r8)
1000eae4:	1000e9e5 	.word	0x1000e9e5
1000eae8:	10010c61 	.word	0x10010c61

1000eaec <at_ble_read_authorize_reply.part.1>:
1000eaec:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000eaee:	4b09      	ldr	r3, [pc, #36]	; (1000eb14 <at_ble_read_authorize_reply.part.1+0x28>)
1000eaf0:	1c05      	adds	r5, r0, #0
1000eaf2:	1c08      	adds	r0, r1, #0
1000eaf4:	1c0c      	adds	r4, r1, #0
1000eaf6:	4798      	blx	r3
1000eaf8:	2800      	cmp	r0, #0
1000eafa:	d009      	beq.n	1000eb10 <at_ble_read_authorize_reply.part.1+0x24>
1000eafc:	6882      	ldr	r2, [r0, #8]
1000eafe:	2a00      	cmp	r2, #0
1000eb00:	d006      	beq.n	1000eb10 <at_ble_read_authorize_reply.part.1+0x24>
1000eb02:	8883      	ldrh	r3, [r0, #4]
1000eb04:	1c29      	adds	r1, r5, #0
1000eb06:	9200      	str	r2, [sp, #0]
1000eb08:	1c20      	adds	r0, r4, #0
1000eb0a:	2200      	movs	r2, #0
1000eb0c:	4c02      	ldr	r4, [pc, #8]	; (1000eb18 <at_ble_read_authorize_reply.part.1+0x2c>)
1000eb0e:	47a0      	blx	r4
1000eb10:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000eb12:	46c0      	nop			; (mov r8, r8)
1000eb14:	1000e885 	.word	0x1000e885
1000eb18:	10010771 	.word	0x10010771

1000eb1c <internal_at_ble_service_define>:
1000eb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb1e:	b08b      	sub	sp, #44	; 0x2c
1000eb20:	9306      	str	r3, [sp, #24]
1000eb22:	ab10      	add	r3, sp, #64	; 0x40
1000eb24:	9202      	str	r2, [sp, #8]
1000eb26:	cb04      	ldmia	r3!, {r2}
1000eb28:	1c05      	adds	r5, r0, #0
1000eb2a:	881b      	ldrh	r3, [r3, #0]
1000eb2c:	9105      	str	r1, [sp, #20]
1000eb2e:	9303      	str	r3, [sp, #12]
1000eb30:	ab12      	add	r3, sp, #72	; 0x48
1000eb32:	781b      	ldrb	r3, [r3, #0]
1000eb34:	20cf      	movs	r0, #207	; 0xcf
1000eb36:	9304      	str	r3, [sp, #16]
1000eb38:	2d00      	cmp	r5, #0
1000eb3a:	d100      	bne.n	1000eb3e <internal_at_ble_service_define+0x22>
1000eb3c:	e1ca      	b.n	1000eed4 <internal_at_ble_service_define+0x3b8>
1000eb3e:	2900      	cmp	r1, #0
1000eb40:	d100      	bne.n	1000eb44 <internal_at_ble_service_define+0x28>
1000eb42:	e1c7      	b.n	1000eed4 <internal_at_ble_service_define+0x3b8>
1000eb44:	2a00      	cmp	r2, #0
1000eb46:	d100      	bne.n	1000eb4a <internal_at_ble_service_define+0x2e>
1000eb48:	e1c4      	b.n	1000eed4 <internal_at_ble_service_define+0x3b8>
1000eb4a:	9b03      	ldr	r3, [sp, #12]
1000eb4c:	2b00      	cmp	r3, #0
1000eb4e:	d100      	bne.n	1000eb52 <internal_at_ble_service_define+0x36>
1000eb50:	e1c0      	b.n	1000eed4 <internal_at_ble_service_define+0x3b8>
1000eb52:	4bc9      	ldr	r3, [pc, #804]	; (1000ee78 <internal_at_ble_service_define+0x35c>)
1000eb54:	3004      	adds	r0, #4
1000eb56:	681e      	ldr	r6, [r3, #0]
1000eb58:	2e00      	cmp	r6, #0
1000eb5a:	d100      	bne.n	1000eb5e <internal_at_ble_service_define+0x42>
1000eb5c:	e1ba      	b.n	1000eed4 <internal_at_ble_service_define+0x3b8>
1000eb5e:	2400      	movs	r4, #0
1000eb60:	4bc6      	ldr	r3, [pc, #792]	; (1000ee7c <internal_at_ble_service_define+0x360>)
1000eb62:	8034      	strh	r4, [r6, #0]
1000eb64:	881b      	ldrh	r3, [r3, #0]
1000eb66:	1db7      	adds	r7, r6, #6
1000eb68:	1c21      	adds	r1, r4, #0
1000eb6a:	2210      	movs	r2, #16
1000eb6c:	8073      	strh	r3, [r6, #2]
1000eb6e:	1c38      	adds	r0, r7, #0
1000eb70:	4bc3      	ldr	r3, [pc, #780]	; (1000ee80 <internal_at_ble_service_define+0x364>)
1000eb72:	4798      	blx	r3
1000eb74:	7828      	ldrb	r0, [r5, #0]
1000eb76:	4bc3      	ldr	r3, [pc, #780]	; (1000ee84 <internal_at_ble_service_define+0x368>)
1000eb78:	4798      	blx	r3
1000eb7a:	1c69      	adds	r1, r5, #1
1000eb7c:	1c02      	adds	r2, r0, #0
1000eb7e:	4bc2      	ldr	r3, [pc, #776]	; (1000ee88 <internal_at_ble_service_define+0x36c>)
1000eb80:	1c38      	adds	r0, r7, #0
1000eb82:	4798      	blx	r3
1000eb84:	2204      	movs	r2, #4
1000eb86:	782b      	ldrb	r3, [r5, #0]
1000eb88:	9d02      	ldr	r5, [sp, #8]
1000eb8a:	011b      	lsls	r3, r3, #4
1000eb8c:	4313      	orrs	r3, r2
1000eb8e:	9a04      	ldr	r2, [sp, #16]
1000eb90:	7174      	strb	r4, [r6, #5]
1000eb92:	0192      	lsls	r2, r2, #6
1000eb94:	4313      	orrs	r3, r2
1000eb96:	7133      	strb	r3, [r6, #4]
1000eb98:	2316      	movs	r3, #22
1000eb9a:	9a06      	ldr	r2, [sp, #24]
1000eb9c:	3512      	adds	r5, #18
1000eb9e:	4353      	muls	r3, r2
1000eba0:	9a02      	ldr	r2, [sp, #8]
1000eba2:	3312      	adds	r3, #18
1000eba4:	18d7      	adds	r7, r2, r3
1000eba6:	42bd      	cmp	r5, r7
1000eba8:	d00f      	beq.n	1000ebca <internal_at_ble_service_define+0xae>
1000ebaa:	4bb8      	ldr	r3, [pc, #736]	; (1000ee8c <internal_at_ble_service_define+0x370>)
1000ebac:	8829      	ldrh	r1, [r5, #0]
1000ebae:	9300      	str	r3, [sp, #0]
1000ebb0:	230e      	movs	r3, #14
1000ebb2:	aa06      	add	r2, sp, #24
1000ebb4:	189b      	adds	r3, r3, r2
1000ebb6:	9301      	str	r3, [sp, #4]
1000ebb8:	4cb5      	ldr	r4, [pc, #724]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ebba:	1c30      	adds	r0, r6, #0
1000ebbc:	2201      	movs	r2, #1
1000ebbe:	2302      	movs	r3, #2
1000ebc0:	47a0      	blx	r4
1000ebc2:	3516      	adds	r5, #22
1000ebc4:	1e04      	subs	r4, r0, #0
1000ebc6:	d0ee      	beq.n	1000eba6 <internal_at_ble_service_define+0x8a>
1000ebc8:	e183      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ebca:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ebcc:	2300      	movs	r3, #0
1000ebce:	3714      	adds	r7, #20
1000ebd0:	1c3d      	adds	r5, r7, #0
1000ebd2:	9302      	str	r3, [sp, #8]
1000ebd4:	9b02      	ldr	r3, [sp, #8]
1000ebd6:	9a03      	ldr	r2, [sp, #12]
1000ebd8:	4293      	cmp	r3, r2
1000ebda:	db00      	blt.n	1000ebde <internal_at_ble_service_define+0xc2>
1000ebdc:	e0bf      	b.n	1000ed5e <internal_at_ble_service_define+0x242>
1000ebde:	4bad      	ldr	r3, [pc, #692]	; (1000ee94 <internal_at_ble_service_define+0x378>)
1000ebe0:	aa06      	add	r2, sp, #24
1000ebe2:	9300      	str	r3, [sp, #0]
1000ebe4:	230e      	movs	r3, #14
1000ebe6:	189b      	adds	r3, r3, r2
1000ebe8:	9301      	str	r3, [sp, #4]
1000ebea:	4ca9      	ldr	r4, [pc, #676]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ebec:	1c30      	adds	r0, r6, #0
1000ebee:	2104      	movs	r1, #4
1000ebf0:	2201      	movs	r2, #1
1000ebf2:	2302      	movs	r3, #2
1000ebf4:	47a0      	blx	r4
1000ebf6:	1e04      	subs	r4, r0, #0
1000ebf8:	d000      	beq.n	1000ebfc <internal_at_ble_service_define+0xe0>
1000ebfa:	e16a      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ebfc:	1c2b      	adds	r3, r5, #0
1000ebfe:	3b12      	subs	r3, #18
1000ec00:	7b2c      	ldrb	r4, [r5, #12]
1000ec02:	781b      	ldrb	r3, [r3, #0]
1000ec04:	1c21      	adds	r1, r4, #0
1000ec06:	1c1a      	adds	r2, r3, #0
1000ec08:	9304      	str	r3, [sp, #16]
1000ec0a:	8828      	ldrh	r0, [r5, #0]
1000ec0c:	4ba2      	ldr	r3, [pc, #648]	; (1000ee98 <internal_at_ble_service_define+0x37c>)
1000ec0e:	4798      	blx	r3
1000ec10:	2303      	movs	r3, #3
1000ec12:	4023      	ands	r3, r4
1000ec14:	3b03      	subs	r3, #3
1000ec16:	4259      	negs	r1, r3
1000ec18:	4159      	adcs	r1, r3
1000ec1a:	2301      	movs	r3, #1
1000ec1c:	08a4      	lsrs	r4, r4, #2
1000ec1e:	401c      	ands	r4, r3
1000ec20:	430c      	orrs	r4, r1
1000ec22:	896b      	ldrh	r3, [r5, #10]
1000ec24:	03e4      	lsls	r4, r4, #15
1000ec26:	431c      	orrs	r4, r3
1000ec28:	9007      	str	r0, [sp, #28]
1000ec2a:	4b96      	ldr	r3, [pc, #600]	; (1000ee84 <internal_at_ble_service_define+0x368>)
1000ec2c:	9804      	ldr	r0, [sp, #16]
1000ec2e:	4798      	blx	r3
1000ec30:	1c2a      	adds	r2, r5, #0
1000ec32:	3a11      	subs	r2, #17
1000ec34:	9200      	str	r2, [sp, #0]
1000ec36:	3a03      	subs	r2, #3
1000ec38:	1c03      	adds	r3, r0, #0
1000ec3a:	9201      	str	r2, [sp, #4]
1000ec3c:	1c21      	adds	r1, r4, #0
1000ec3e:	1c30      	adds	r0, r6, #0
1000ec40:	4c93      	ldr	r4, [pc, #588]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ec42:	9a07      	ldr	r2, [sp, #28]
1000ec44:	47a0      	blx	r4
1000ec46:	1e04      	subs	r4, r0, #0
1000ec48:	d000      	beq.n	1000ec4c <internal_at_ble_service_define+0x130>
1000ec4a:	e142      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ec4c:	22c0      	movs	r2, #192	; 0xc0
1000ec4e:	882b      	ldrh	r3, [r5, #0]
1000ec50:	0052      	lsls	r2, r2, #1
1000ec52:	4213      	tst	r3, r2
1000ec54:	d104      	bne.n	1000ec60 <internal_at_ble_service_define+0x144>
1000ec56:	8aab      	ldrh	r3, [r5, #20]
1000ec58:	9304      	str	r3, [sp, #16]
1000ec5a:	2b00      	cmp	r3, #0
1000ec5c:	d116      	bne.n	1000ec8c <internal_at_ble_service_define+0x170>
1000ec5e:	e03a      	b.n	1000ecd6 <internal_at_ble_service_define+0x1ba>
1000ec60:	2201      	movs	r2, #1
1000ec62:	09d9      	lsrs	r1, r3, #7
1000ec64:	4011      	ands	r1, r2
1000ec66:	05db      	lsls	r3, r3, #23
1000ec68:	d501      	bpl.n	1000ec6e <internal_at_ble_service_define+0x152>
1000ec6a:	2302      	movs	r3, #2
1000ec6c:	4319      	orrs	r1, r3
1000ec6e:	4b8b      	ldr	r3, [pc, #556]	; (1000ee9c <internal_at_ble_service_define+0x380>)
1000ec70:	aa06      	add	r2, sp, #24
1000ec72:	9300      	str	r3, [sp, #0]
1000ec74:	230e      	movs	r3, #14
1000ec76:	189b      	adds	r3, r3, r2
1000ec78:	9301      	str	r3, [sp, #4]
1000ec7a:	4c85      	ldr	r4, [pc, #532]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ec7c:	0209      	lsls	r1, r1, #8
1000ec7e:	1c30      	adds	r0, r6, #0
1000ec80:	2201      	movs	r2, #1
1000ec82:	2302      	movs	r3, #2
1000ec84:	47a0      	blx	r4
1000ec86:	1e04      	subs	r4, r0, #0
1000ec88:	d0e5      	beq.n	1000ec56 <internal_at_ble_service_define+0x13a>
1000ec8a:	e122      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ec8c:	2380      	movs	r3, #128	; 0x80
1000ec8e:	882a      	ldrh	r2, [r5, #0]
1000ec90:	7f2c      	ldrb	r4, [r5, #28]
1000ec92:	005b      	lsls	r3, r3, #1
1000ec94:	401a      	ands	r2, r3
1000ec96:	1c20      	adds	r0, r4, #0
1000ec98:	2101      	movs	r1, #1
1000ec9a:	2a00      	cmp	r2, #0
1000ec9c:	d000      	beq.n	1000eca0 <internal_at_ble_service_define+0x184>
1000ec9e:	1c0a      	adds	r2, r1, #0
1000eca0:	4b7f      	ldr	r3, [pc, #508]	; (1000eea0 <internal_at_ble_service_define+0x384>)
1000eca2:	4798      	blx	r3
1000eca4:	2203      	movs	r2, #3
1000eca6:	4022      	ands	r2, r4
1000eca8:	3a03      	subs	r2, #3
1000ecaa:	4251      	negs	r1, r2
1000ecac:	4151      	adcs	r1, r2
1000ecae:	4b7d      	ldr	r3, [pc, #500]	; (1000eea4 <internal_at_ble_service_define+0x388>)
1000ecb0:	1c0a      	adds	r2, r1, #0
1000ecb2:	9300      	str	r3, [sp, #0]
1000ecb4:	1c2b      	adds	r3, r5, #0
1000ecb6:	0764      	lsls	r4, r4, #29
1000ecb8:	0fe4      	lsrs	r4, r4, #31
1000ecba:	4322      	orrs	r2, r4
1000ecbc:	03d2      	lsls	r2, r2, #15
1000ecbe:	4310      	orrs	r0, r2
1000ecc0:	3320      	adds	r3, #32
1000ecc2:	b282      	uxth	r2, r0
1000ecc4:	9301      	str	r3, [sp, #4]
1000ecc6:	4c72      	ldr	r4, [pc, #456]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ecc8:	1c30      	adds	r0, r6, #0
1000ecca:	9904      	ldr	r1, [sp, #16]
1000eccc:	2302      	movs	r3, #2
1000ecce:	47a0      	blx	r4
1000ecd0:	1e04      	subs	r4, r0, #0
1000ecd2:	d000      	beq.n	1000ecd6 <internal_at_ble_service_define+0x1ba>
1000ecd4:	e0fd      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ecd6:	2101      	movs	r1, #1
1000ecd8:	882b      	ldrh	r3, [r5, #0]
1000ecda:	420b      	tst	r3, r1
1000ecdc:	d011      	beq.n	1000ed02 <internal_at_ble_service_define+0x1e6>
1000ecde:	7fa8      	ldrb	r0, [r5, #30]
1000ece0:	4b6f      	ldr	r3, [pc, #444]	; (1000eea0 <internal_at_ble_service_define+0x384>)
1000ece2:	2200      	movs	r2, #0
1000ece4:	4798      	blx	r3
1000ece6:	4b70      	ldr	r3, [pc, #448]	; (1000eea8 <internal_at_ble_service_define+0x38c>)
1000ece8:	1c02      	adds	r2, r0, #0
1000ecea:	9300      	str	r3, [sp, #0]
1000ecec:	1c2b      	adds	r3, r5, #0
1000ecee:	3324      	adds	r3, #36	; 0x24
1000ecf0:	9301      	str	r3, [sp, #4]
1000ecf2:	4c67      	ldr	r4, [pc, #412]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ecf4:	1c30      	adds	r0, r6, #0
1000ecf6:	496d      	ldr	r1, [pc, #436]	; (1000eeac <internal_at_ble_service_define+0x390>)
1000ecf8:	2302      	movs	r3, #2
1000ecfa:	47a0      	blx	r4
1000ecfc:	1e04      	subs	r4, r0, #0
1000ecfe:	d000      	beq.n	1000ed02 <internal_at_ble_service_define+0x1e6>
1000ed00:	e0e7      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ed02:	2330      	movs	r3, #48	; 0x30
1000ed04:	882a      	ldrh	r2, [r5, #0]
1000ed06:	421a      	tst	r2, r3
1000ed08:	d012      	beq.n	1000ed30 <internal_at_ble_service_define+0x214>
1000ed0a:	2101      	movs	r1, #1
1000ed0c:	7f68      	ldrb	r0, [r5, #29]
1000ed0e:	1c0a      	adds	r2, r1, #0
1000ed10:	4b63      	ldr	r3, [pc, #396]	; (1000eea0 <internal_at_ble_service_define+0x384>)
1000ed12:	4798      	blx	r3
1000ed14:	4b66      	ldr	r3, [pc, #408]	; (1000eeb0 <internal_at_ble_service_define+0x394>)
1000ed16:	1c02      	adds	r2, r0, #0
1000ed18:	9300      	str	r3, [sp, #0]
1000ed1a:	1c2b      	adds	r3, r5, #0
1000ed1c:	3322      	adds	r3, #34	; 0x22
1000ed1e:	9301      	str	r3, [sp, #4]
1000ed20:	4c5b      	ldr	r4, [pc, #364]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ed22:	1c30      	adds	r0, r6, #0
1000ed24:	4961      	ldr	r1, [pc, #388]	; (1000eeac <internal_at_ble_service_define+0x390>)
1000ed26:	2302      	movs	r3, #2
1000ed28:	47a0      	blx	r4
1000ed2a:	1e04      	subs	r4, r0, #0
1000ed2c:	d000      	beq.n	1000ed30 <internal_at_ble_service_define+0x214>
1000ed2e:	e0d0      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ed30:	69ab      	ldr	r3, [r5, #24]
1000ed32:	2b00      	cmp	r3, #0
1000ed34:	d00e      	beq.n	1000ed54 <internal_at_ble_service_define+0x238>
1000ed36:	4b5f      	ldr	r3, [pc, #380]	; (1000eeb4 <internal_at_ble_service_define+0x398>)
1000ed38:	aa06      	add	r2, sp, #24
1000ed3a:	9300      	str	r3, [sp, #0]
1000ed3c:	230e      	movs	r3, #14
1000ed3e:	189b      	adds	r3, r3, r2
1000ed40:	9301      	str	r3, [sp, #4]
1000ed42:	4c53      	ldr	r4, [pc, #332]	; (1000ee90 <internal_at_ble_service_define+0x374>)
1000ed44:	1c30      	adds	r0, r6, #0
1000ed46:	2107      	movs	r1, #7
1000ed48:	2201      	movs	r2, #1
1000ed4a:	2302      	movs	r3, #2
1000ed4c:	47a0      	blx	r4
1000ed4e:	1e04      	subs	r4, r0, #0
1000ed50:	d000      	beq.n	1000ed54 <internal_at_ble_service_define+0x238>
1000ed52:	e0be      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ed54:	9b02      	ldr	r3, [sp, #8]
1000ed56:	353c      	adds	r5, #60	; 0x3c
1000ed58:	3301      	adds	r3, #1
1000ed5a:	9302      	str	r3, [sp, #8]
1000ed5c:	e73a      	b.n	1000ebd4 <internal_at_ble_service_define+0xb8>
1000ed5e:	1c30      	adds	r0, r6, #0
1000ed60:	4b55      	ldr	r3, [pc, #340]	; (1000eeb8 <internal_at_ble_service_define+0x39c>)
1000ed62:	4798      	blx	r3
1000ed64:	1e04      	subs	r4, r0, #0
1000ed66:	d000      	beq.n	1000ed6a <internal_at_ble_service_define+0x24e>
1000ed68:	e0b3      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ed6a:	8833      	ldrh	r3, [r6, #0]
1000ed6c:	9a05      	ldr	r2, [sp, #20]
1000ed6e:	8013      	strh	r3, [r2, #0]
1000ed70:	8836      	ldrh	r6, [r6, #0]
1000ed72:	9b06      	ldr	r3, [sp, #24]
1000ed74:	9a03      	ldr	r2, [sp, #12]
1000ed76:	18f6      	adds	r6, r6, r3
1000ed78:	b2b3      	uxth	r3, r6
1000ed7a:	9302      	str	r3, [sp, #8]
1000ed7c:	233c      	movs	r3, #60	; 0x3c
1000ed7e:	4353      	muls	r3, r2
1000ed80:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000ed82:	3314      	adds	r3, #20
1000ed84:	18d3      	adds	r3, r2, r3
1000ed86:	9304      	str	r3, [sp, #16]
1000ed88:	9b04      	ldr	r3, [sp, #16]
1000ed8a:	429f      	cmp	r7, r3
1000ed8c:	d100      	bne.n	1000ed90 <internal_at_ble_service_define+0x274>
1000ed8e:	e0a0      	b.n	1000eed2 <internal_at_ble_service_define+0x3b6>
1000ed90:	9b02      	ldr	r3, [sp, #8]
1000ed92:	1c9d      	adds	r5, r3, #2
1000ed94:	1c3b      	adds	r3, r7, #0
1000ed96:	b2ad      	uxth	r5, r5
1000ed98:	3b14      	subs	r3, #20
1000ed9a:	801d      	strh	r5, [r3, #0]
1000ed9c:	9303      	str	r3, [sp, #12]
1000ed9e:	893b      	ldrh	r3, [r7, #8]
1000eda0:	2b00      	cmp	r3, #0
1000eda2:	d108      	bne.n	1000edb6 <internal_at_ble_service_define+0x29a>
1000eda4:	23c0      	movs	r3, #192	; 0xc0
1000eda6:	883a      	ldrh	r2, [r7, #0]
1000eda8:	005b      	lsls	r3, r3, #1
1000edaa:	421a      	tst	r2, r3
1000edac:	d026      	beq.n	1000edfc <internal_at_ble_service_define+0x2e0>
1000edae:	9e02      	ldr	r6, [sp, #8]
1000edb0:	3603      	adds	r6, #3
1000edb2:	b2b5      	uxth	r5, r6
1000edb4:	e022      	b.n	1000edfc <internal_at_ble_service_define+0x2e0>
1000edb6:	2103      	movs	r1, #3
1000edb8:	7b3b      	ldrb	r3, [r7, #12]
1000edba:	4019      	ands	r1, r3
1000edbc:	3903      	subs	r1, #3
1000edbe:	424a      	negs	r2, r1
1000edc0:	414a      	adcs	r2, r1
1000edc2:	0759      	lsls	r1, r3, #29
1000edc4:	0fc9      	lsrs	r1, r1, #31
1000edc6:	4311      	orrs	r1, r2
1000edc8:	03c9      	lsls	r1, r1, #15
1000edca:	897a      	ldrh	r2, [r7, #10]
1000edcc:	2900      	cmp	r1, #0
1000edce:	d007      	beq.n	1000ede0 <internal_at_ble_service_define+0x2c4>
1000edd0:	6879      	ldr	r1, [r7, #4]
1000edd2:	2900      	cmp	r1, #0
1000edd4:	d100      	bne.n	1000edd8 <internal_at_ble_service_define+0x2bc>
1000edd6:	4939      	ldr	r1, [pc, #228]	; (1000eebc <internal_at_ble_service_define+0x3a0>)
1000edd8:	1c28      	adds	r0, r5, #0
1000edda:	4e39      	ldr	r6, [pc, #228]	; (1000eec0 <internal_at_ble_service_define+0x3a4>)
1000eddc:	47b0      	blx	r6
1000edde:	e00a      	b.n	1000edf6 <internal_at_ble_service_define+0x2da>
1000ede0:	1c28      	adds	r0, r5, #0
1000ede2:	4e37      	ldr	r6, [pc, #220]	; (1000eec0 <internal_at_ble_service_define+0x3a4>)
1000ede4:	47b0      	blx	r6
1000ede6:	2800      	cmp	r0, #0
1000ede8:	d172      	bne.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000edea:	9b03      	ldr	r3, [sp, #12]
1000edec:	8939      	ldrh	r1, [r7, #8]
1000edee:	8818      	ldrh	r0, [r3, #0]
1000edf0:	687a      	ldr	r2, [r7, #4]
1000edf2:	4b34      	ldr	r3, [pc, #208]	; (1000eec4 <internal_at_ble_service_define+0x3a8>)
1000edf4:	4798      	blx	r3
1000edf6:	2800      	cmp	r0, #0
1000edf8:	d0d4      	beq.n	1000eda4 <internal_at_ble_service_define+0x288>
1000edfa:	e069      	b.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000edfc:	8abb      	ldrh	r3, [r7, #20]
1000edfe:	2b00      	cmp	r3, #0
1000ee00:	d00a      	beq.n	1000ee18 <internal_at_ble_service_define+0x2fc>
1000ee02:	3501      	adds	r5, #1
1000ee04:	b2ad      	uxth	r5, r5
1000ee06:	843d      	strh	r5, [r7, #32]
1000ee08:	7f39      	ldrb	r1, [r7, #28]
1000ee0a:	8afb      	ldrh	r3, [r7, #22]
1000ee0c:	1c28      	adds	r0, r5, #0
1000ee0e:	693a      	ldr	r2, [r7, #16]
1000ee10:	4e2d      	ldr	r6, [pc, #180]	; (1000eec8 <internal_at_ble_service_define+0x3ac>)
1000ee12:	47b0      	blx	r6
1000ee14:	2800      	cmp	r0, #0
1000ee16:	d15b      	bne.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000ee18:	883b      	ldrh	r3, [r7, #0]
1000ee1a:	07db      	lsls	r3, r3, #31
1000ee1c:	d50d      	bpl.n	1000ee3a <internal_at_ble_service_define+0x31e>
1000ee1e:	2200      	movs	r2, #0
1000ee20:	3501      	adds	r5, #1
1000ee22:	b2ad      	uxth	r5, r5
1000ee24:	a909      	add	r1, sp, #36	; 0x24
1000ee26:	84bd      	strh	r5, [r7, #36]	; 0x24
1000ee28:	7fbb      	ldrb	r3, [r7, #30]
1000ee2a:	1c28      	adds	r0, r5, #0
1000ee2c:	700a      	strb	r2, [r1, #0]
1000ee2e:	704a      	strb	r2, [r1, #1]
1000ee30:	4e23      	ldr	r6, [pc, #140]	; (1000eec0 <internal_at_ble_service_define+0x3a4>)
1000ee32:	3202      	adds	r2, #2
1000ee34:	47b0      	blx	r6
1000ee36:	2800      	cmp	r0, #0
1000ee38:	d14a      	bne.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000ee3a:	2330      	movs	r3, #48	; 0x30
1000ee3c:	883a      	ldrh	r2, [r7, #0]
1000ee3e:	421a      	tst	r2, r3
1000ee40:	d00d      	beq.n	1000ee5e <internal_at_ble_service_define+0x342>
1000ee42:	2200      	movs	r2, #0
1000ee44:	3501      	adds	r5, #1
1000ee46:	b2ad      	uxth	r5, r5
1000ee48:	a909      	add	r1, sp, #36	; 0x24
1000ee4a:	847d      	strh	r5, [r7, #34]	; 0x22
1000ee4c:	7f7b      	ldrb	r3, [r7, #29]
1000ee4e:	1c28      	adds	r0, r5, #0
1000ee50:	700a      	strb	r2, [r1, #0]
1000ee52:	704a      	strb	r2, [r1, #1]
1000ee54:	4e1a      	ldr	r6, [pc, #104]	; (1000eec0 <internal_at_ble_service_define+0x3a4>)
1000ee56:	3202      	adds	r2, #2
1000ee58:	47b0      	blx	r6
1000ee5a:	2800      	cmp	r0, #0
1000ee5c:	d138      	bne.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000ee5e:	69b9      	ldr	r1, [r7, #24]
1000ee60:	2900      	cmp	r1, #0
1000ee62:	d006      	beq.n	1000ee72 <internal_at_ble_service_define+0x356>
1000ee64:	3501      	adds	r5, #1
1000ee66:	b2ad      	uxth	r5, r5
1000ee68:	1c28      	adds	r0, r5, #0
1000ee6a:	4b18      	ldr	r3, [pc, #96]	; (1000eecc <internal_at_ble_service_define+0x3b0>)
1000ee6c:	4798      	blx	r3
1000ee6e:	2800      	cmp	r0, #0
1000ee70:	d12e      	bne.n	1000eed0 <internal_at_ble_service_define+0x3b4>
1000ee72:	373c      	adds	r7, #60	; 0x3c
1000ee74:	9502      	str	r5, [sp, #8]
1000ee76:	e787      	b.n	1000ed88 <internal_at_ble_service_define+0x26c>
1000ee78:	10018e28 	.word	0x10018e28
1000ee7c:	10019da0 	.word	0x10019da0
1000ee80:	100147d5 	.word	0x100147d5
1000ee84:	1000e851 	.word	0x1000e851
1000ee88:	100147c3 	.word	0x100147c3
1000ee8c:	10017175 	.word	0x10017175
1000ee90:	10010bf1 	.word	0x10010bf1
1000ee94:	10017177 	.word	0x10017177
1000ee98:	1000e91d 	.word	0x1000e91d
1000ee9c:	10017173 	.word	0x10017173
1000eea0:	1000e8c5 	.word	0x1000e8c5
1000eea4:	1001716f 	.word	0x1001716f
1000eea8:	10017171 	.word	0x10017171
1000eeac:	00008002 	.word	0x00008002
1000eeb0:	1001716b 	.word	0x1001716b
1000eeb4:	1001716d 	.word	0x1001716d
1000eeb8:	10010ae5 	.word	0x10010ae5
1000eebc:	10018e14 	.word	0x10018e14
1000eec0:	1000e9e5 	.word	0x1000e9e5
1000eec4:	10010c61 	.word	0x10010c61
1000eec8:	1000ea9d 	.word	0x1000ea9d
1000eecc:	1000e9b9 	.word	0x1000e9b9
1000eed0:	1c04      	adds	r4, r0, #0
1000eed2:	1c20      	adds	r0, r4, #0
1000eed4:	b00b      	add	sp, #44	; 0x2c
1000eed6:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000eed8 <initi_gatt_server_module>:
1000eed8:	2300      	movs	r3, #0
1000eeda:	4a07      	ldr	r2, [pc, #28]	; (1000eef8 <initi_gatt_server_module+0x20>)
1000eedc:	7013      	strb	r3, [r2, #0]
1000eede:	4a07      	ldr	r2, [pc, #28]	; (1000eefc <initi_gatt_server_module+0x24>)
1000eee0:	6013      	str	r3, [r2, #0]
1000eee2:	4a07      	ldr	r2, [pc, #28]	; (1000ef00 <initi_gatt_server_module+0x28>)
1000eee4:	6013      	str	r3, [r2, #0]
1000eee6:	4a07      	ldr	r2, [pc, #28]	; (1000ef04 <initi_gatt_server_module+0x2c>)
1000eee8:	6013      	str	r3, [r2, #0]
1000eeea:	4a07      	ldr	r2, [pc, #28]	; (1000ef08 <initi_gatt_server_module+0x30>)
1000eeec:	6013      	str	r3, [r2, #0]
1000eeee:	4a07      	ldr	r2, [pc, #28]	; (1000ef0c <initi_gatt_server_module+0x34>)
1000eef0:	6013      	str	r3, [r2, #0]
1000eef2:	4a07      	ldr	r2, [pc, #28]	; (1000ef10 <initi_gatt_server_module+0x38>)
1000eef4:	6013      	str	r3, [r2, #0]
1000eef6:	4770      	bx	lr
1000eef8:	10018e14 	.word	0x10018e14
1000eefc:	10018e24 	.word	0x10018e24
1000ef00:	10018e20 	.word	0x10018e20
1000ef04:	10018e10 	.word	0x10018e10
1000ef08:	10018e1c 	.word	0x10018e1c
1000ef0c:	10018e18 	.word	0x10018e18
1000ef10:	10018e28 	.word	0x10018e28

1000ef14 <db_init>:
1000ef14:	4b0a      	ldr	r3, [pc, #40]	; (1000ef40 <db_init+0x2c>)
1000ef16:	4a0b      	ldr	r2, [pc, #44]	; (1000ef44 <db_init+0x30>)
1000ef18:	6018      	str	r0, [r3, #0]
1000ef1a:	084b      	lsrs	r3, r1, #1
1000ef1c:	6013      	str	r3, [r2, #0]
1000ef1e:	4a0a      	ldr	r2, [pc, #40]	; (1000ef48 <db_init+0x34>)
1000ef20:	18c3      	adds	r3, r0, r3
1000ef22:	6013      	str	r3, [r2, #0]
1000ef24:	4a09      	ldr	r2, [pc, #36]	; (1000ef4c <db_init+0x38>)
1000ef26:	1841      	adds	r1, r0, r1
1000ef28:	6013      	str	r3, [r2, #0]
1000ef2a:	2303      	movs	r3, #3
1000ef2c:	2200      	movs	r2, #0
1000ef2e:	3103      	adds	r1, #3
1000ef30:	4399      	bics	r1, r3
1000ef32:	4b07      	ldr	r3, [pc, #28]	; (1000ef50 <db_init+0x3c>)
1000ef34:	3904      	subs	r1, #4
1000ef36:	6019      	str	r1, [r3, #0]
1000ef38:	4b06      	ldr	r3, [pc, #24]	; (1000ef54 <db_init+0x40>)
1000ef3a:	601a      	str	r2, [r3, #0]
1000ef3c:	4770      	bx	lr
1000ef3e:	46c0      	nop			; (mov r8, r8)
1000ef40:	10018e28 	.word	0x10018e28
1000ef44:	10018e24 	.word	0x10018e24
1000ef48:	10018e10 	.word	0x10018e10
1000ef4c:	10018e1c 	.word	0x10018e1c
1000ef50:	10018e18 	.word	0x10018e18
1000ef54:	10018e20 	.word	0x10018e20

1000ef58 <at_ble_primary_service_define>:
1000ef58:	b530      	push	{r4, r5, lr}
1000ef5a:	b085      	sub	sp, #20
1000ef5c:	ac08      	add	r4, sp, #32
1000ef5e:	cc20      	ldmia	r4!, {r5}
1000ef60:	8824      	ldrh	r4, [r4, #0]
1000ef62:	9500      	str	r5, [sp, #0]
1000ef64:	9401      	str	r4, [sp, #4]
1000ef66:	2401      	movs	r4, #1
1000ef68:	9402      	str	r4, [sp, #8]
1000ef6a:	4c02      	ldr	r4, [pc, #8]	; (1000ef74 <at_ble_primary_service_define+0x1c>)
1000ef6c:	47a0      	blx	r4
1000ef6e:	b005      	add	sp, #20
1000ef70:	bd30      	pop	{r4, r5, pc}
1000ef72:	46c0      	nop			; (mov r8, r8)
1000ef74:	1000eb1d 	.word	0x1000eb1d

1000ef78 <at_ble_characteristic_value_set>:
1000ef78:	b570      	push	{r4, r5, r6, lr}
1000ef7a:	4b0b      	ldr	r3, [pc, #44]	; (1000efa8 <at_ble_characteristic_value_set+0x30>)
1000ef7c:	1c06      	adds	r6, r0, #0
1000ef7e:	1c0c      	adds	r4, r1, #0
1000ef80:	1c15      	adds	r5, r2, #0
1000ef82:	4798      	blx	r3
1000ef84:	2800      	cmp	r0, #0
1000ef86:	d008      	beq.n	1000ef9a <at_ble_characteristic_value_set+0x22>
1000ef88:	6880      	ldr	r0, [r0, #8]
1000ef8a:	2800      	cmp	r0, #0
1000ef8c:	d005      	beq.n	1000ef9a <at_ble_characteristic_value_set+0x22>
1000ef8e:	1c21      	adds	r1, r4, #0
1000ef90:	1c2a      	adds	r2, r5, #0
1000ef92:	4b06      	ldr	r3, [pc, #24]	; (1000efac <at_ble_characteristic_value_set+0x34>)
1000ef94:	4798      	blx	r3
1000ef96:	2000      	movs	r0, #0
1000ef98:	e004      	b.n	1000efa4 <at_ble_characteristic_value_set+0x2c>
1000ef9a:	1c30      	adds	r0, r6, #0
1000ef9c:	1c29      	adds	r1, r5, #0
1000ef9e:	1c22      	adds	r2, r4, #0
1000efa0:	4b03      	ldr	r3, [pc, #12]	; (1000efb0 <at_ble_characteristic_value_set+0x38>)
1000efa2:	4798      	blx	r3
1000efa4:	bd70      	pop	{r4, r5, r6, pc}
1000efa6:	46c0      	nop			; (mov r8, r8)
1000efa8:	1000e885 	.word	0x1000e885
1000efac:	100147c3 	.word	0x100147c3
1000efb0:	10010c61 	.word	0x10010c61

1000efb4 <at_ble_characteristic_value_get>:
1000efb4:	b570      	push	{r4, r5, r6, lr}
1000efb6:	4b0c      	ldr	r3, [pc, #48]	; (1000efe8 <at_ble_characteristic_value_get+0x34>)
1000efb8:	1c06      	adds	r6, r0, #0
1000efba:	1c0c      	adds	r4, r1, #0
1000efbc:	1c15      	adds	r5, r2, #0
1000efbe:	4798      	blx	r3
1000efc0:	2800      	cmp	r0, #0
1000efc2:	d00b      	beq.n	1000efdc <at_ble_characteristic_value_get+0x28>
1000efc4:	6883      	ldr	r3, [r0, #8]
1000efc6:	2b00      	cmp	r3, #0
1000efc8:	d008      	beq.n	1000efdc <at_ble_characteristic_value_get+0x28>
1000efca:	8883      	ldrh	r3, [r0, #4]
1000efcc:	802b      	strh	r3, [r5, #0]
1000efce:	8882      	ldrh	r2, [r0, #4]
1000efd0:	6881      	ldr	r1, [r0, #8]
1000efd2:	4b06      	ldr	r3, [pc, #24]	; (1000efec <at_ble_characteristic_value_get+0x38>)
1000efd4:	1c20      	adds	r0, r4, #0
1000efd6:	4798      	blx	r3
1000efd8:	2000      	movs	r0, #0
1000efda:	e004      	b.n	1000efe6 <at_ble_characteristic_value_get+0x32>
1000efdc:	1c30      	adds	r0, r6, #0
1000efde:	1c29      	adds	r1, r5, #0
1000efe0:	1c22      	adds	r2, r4, #0
1000efe2:	4b03      	ldr	r3, [pc, #12]	; (1000eff0 <at_ble_characteristic_value_get+0x3c>)
1000efe4:	4798      	blx	r3
1000efe6:	bd70      	pop	{r4, r5, r6, pc}
1000efe8:	1000e885 	.word	0x1000e885
1000efec:	100147c3 	.word	0x100147c3
1000eff0:	10010ced 	.word	0x10010ced

1000eff4 <at_ble_write_authorize_reply>:
1000eff4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eff6:	b085      	sub	sp, #20
1000eff8:	1c04      	adds	r4, r0, #0
1000effa:	9101      	str	r1, [sp, #4]
1000effc:	2900      	cmp	r1, #0
1000effe:	d128      	bne.n	1000f052 <at_ble_write_authorize_reply+0x5e>
1000f000:	8843      	ldrh	r3, [r0, #2]
1000f002:	1c27      	adds	r7, r4, #0
1000f004:	9300      	str	r3, [sp, #0]
1000f006:	1c18      	adds	r0, r3, #0
1000f008:	4b16      	ldr	r3, [pc, #88]	; (1000f064 <at_ble_write_authorize_reply+0x70>)
1000f00a:	4798      	blx	r3
1000f00c:	3708      	adds	r7, #8
1000f00e:	2800      	cmp	r0, #0
1000f010:	d009      	beq.n	1000f026 <at_ble_write_authorize_reply+0x32>
1000f012:	6880      	ldr	r0, [r0, #8]
1000f014:	2800      	cmp	r0, #0
1000f016:	d006      	beq.n	1000f026 <at_ble_write_authorize_reply+0x32>
1000f018:	88a3      	ldrh	r3, [r4, #4]
1000f01a:	88e2      	ldrh	r2, [r4, #6]
1000f01c:	18c0      	adds	r0, r0, r3
1000f01e:	1c39      	adds	r1, r7, #0
1000f020:	4b11      	ldr	r3, [pc, #68]	; (1000f068 <at_ble_write_authorize_reply+0x74>)
1000f022:	4798      	blx	r3
1000f024:	e015      	b.n	1000f052 <at_ble_write_authorize_reply+0x5e>
1000f026:	ab02      	add	r3, sp, #8
1000f028:	1d9e      	adds	r6, r3, #6
1000f02a:	2300      	movs	r3, #0
1000f02c:	4d0f      	ldr	r5, [pc, #60]	; (1000f06c <at_ble_write_authorize_reply+0x78>)
1000f02e:	8033      	strh	r3, [r6, #0]
1000f030:	6829      	ldr	r1, [r5, #0]
1000f032:	1c32      	adds	r2, r6, #0
1000f034:	4b0e      	ldr	r3, [pc, #56]	; (1000f070 <at_ble_write_authorize_reply+0x7c>)
1000f036:	9800      	ldr	r0, [sp, #0]
1000f038:	4798      	blx	r3
1000f03a:	682b      	ldr	r3, [r5, #0]
1000f03c:	88a0      	ldrh	r0, [r4, #4]
1000f03e:	88e2      	ldrh	r2, [r4, #6]
1000f040:	1818      	adds	r0, r3, r0
1000f042:	1c39      	adds	r1, r7, #0
1000f044:	4b08      	ldr	r3, [pc, #32]	; (1000f068 <at_ble_write_authorize_reply+0x74>)
1000f046:	4798      	blx	r3
1000f048:	8860      	ldrh	r0, [r4, #2]
1000f04a:	8832      	ldrh	r2, [r6, #0]
1000f04c:	6829      	ldr	r1, [r5, #0]
1000f04e:	4b09      	ldr	r3, [pc, #36]	; (1000f074 <at_ble_write_authorize_reply+0x80>)
1000f050:	4798      	blx	r3
1000f052:	8860      	ldrh	r0, [r4, #2]
1000f054:	8821      	ldrh	r1, [r4, #0]
1000f056:	9a01      	ldr	r2, [sp, #4]
1000f058:	4b07      	ldr	r3, [pc, #28]	; (1000f078 <at_ble_write_authorize_reply+0x84>)
1000f05a:	4798      	blx	r3
1000f05c:	2000      	movs	r0, #0
1000f05e:	b005      	add	sp, #20
1000f060:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f062:	46c0      	nop			; (mov r8, r8)
1000f064:	1000e885 	.word	0x1000e885
1000f068:	100147c3 	.word	0x100147c3
1000f06c:	10017390 	.word	0x10017390
1000f070:	1000efb5 	.word	0x1000efb5
1000f074:	1000ef79 	.word	0x1000ef79
1000f078:	100107dd 	.word	0x100107dd

1000f07c <gatts_handle_read_req>:
1000f07c:	b538      	push	{r3, r4, r5, lr}
1000f07e:	1c0c      	adds	r4, r1, #0
1000f080:	4b07      	ldr	r3, [pc, #28]	; (1000f0a0 <gatts_handle_read_req+0x24>)
1000f082:	4798      	blx	r3
1000f084:	8865      	ldrh	r5, [r4, #2]
1000f086:	4b07      	ldr	r3, [pc, #28]	; (1000f0a4 <gatts_handle_read_req+0x28>)
1000f088:	1c28      	adds	r0, r5, #0
1000f08a:	4798      	blx	r3
1000f08c:	7883      	ldrb	r3, [r0, #2]
1000f08e:	2026      	movs	r0, #38	; 0x26
1000f090:	07db      	lsls	r3, r3, #31
1000f092:	d404      	bmi.n	1000f09e <gatts_handle_read_req+0x22>
1000f094:	8820      	ldrh	r0, [r4, #0]
1000f096:	1c29      	adds	r1, r5, #0
1000f098:	4b03      	ldr	r3, [pc, #12]	; (1000f0a8 <gatts_handle_read_req+0x2c>)
1000f09a:	4798      	blx	r3
1000f09c:	203b      	movs	r0, #59	; 0x3b
1000f09e:	bd38      	pop	{r3, r4, r5, pc}
1000f0a0:	10010721 	.word	0x10010721
1000f0a4:	1000e885 	.word	0x1000e885
1000f0a8:	1000eaed 	.word	0x1000eaed

1000f0ac <gatts_handle_att_info_req>:
1000f0ac:	b538      	push	{r3, r4, r5, lr}
1000f0ae:	1c0d      	adds	r5, r1, #0
1000f0b0:	4b0a      	ldr	r3, [pc, #40]	; (1000f0dc <gatts_handle_att_info_req+0x30>)
1000f0b2:	1c14      	adds	r4, r2, #0
1000f0b4:	4798      	blx	r3
1000f0b6:	882d      	ldrh	r5, [r5, #0]
1000f0b8:	4b09      	ldr	r3, [pc, #36]	; (1000f0e0 <gatts_handle_att_info_req+0x34>)
1000f0ba:	1c28      	adds	r0, r5, #0
1000f0bc:	4798      	blx	r3
1000f0be:	0a22      	lsrs	r2, r4, #8
1000f0c0:	1c03      	adds	r3, r0, #0
1000f0c2:	4c08      	ldr	r4, [pc, #32]	; (1000f0e4 <gatts_handle_att_info_req+0x38>)
1000f0c4:	b291      	uxth	r1, r2
1000f0c6:	2800      	cmp	r0, #0
1000f0c8:	d003      	beq.n	1000f0d2 <gatts_handle_att_info_req+0x26>
1000f0ca:	8882      	ldrh	r2, [r0, #4]
1000f0cc:	2300      	movs	r3, #0
1000f0ce:	1c28      	adds	r0, r5, #0
1000f0d0:	e001      	b.n	1000f0d6 <gatts_handle_att_info_req+0x2a>
1000f0d2:	1c28      	adds	r0, r5, #0
1000f0d4:	2201      	movs	r2, #1
1000f0d6:	47a0      	blx	r4
1000f0d8:	203b      	movs	r0, #59	; 0x3b
1000f0da:	bd38      	pop	{r3, r4, r5, pc}
1000f0dc:	10010765 	.word	0x10010765
1000f0e0:	1000e885 	.word	0x1000e885
1000f0e4:	10010821 	.word	0x10010821

1000f0e8 <gatts_handle_write_req>:
1000f0e8:	b510      	push	{r4, lr}
1000f0ea:	1c14      	adds	r4, r2, #0
1000f0ec:	4b07      	ldr	r3, [pc, #28]	; (1000f10c <gatts_handle_write_req+0x24>)
1000f0ee:	4798      	blx	r3
1000f0f0:	4b07      	ldr	r3, [pc, #28]	; (1000f110 <gatts_handle_write_req+0x28>)
1000f0f2:	8860      	ldrh	r0, [r4, #2]
1000f0f4:	4798      	blx	r3
1000f0f6:	2302      	movs	r3, #2
1000f0f8:	7881      	ldrb	r1, [r0, #2]
1000f0fa:	2022      	movs	r0, #34	; 0x22
1000f0fc:	4019      	ands	r1, r3
1000f0fe:	d103      	bne.n	1000f108 <gatts_handle_write_req+0x20>
1000f100:	1c20      	adds	r0, r4, #0
1000f102:	4b04      	ldr	r3, [pc, #16]	; (1000f114 <gatts_handle_write_req+0x2c>)
1000f104:	4798      	blx	r3
1000f106:	201f      	movs	r0, #31
1000f108:	bd10      	pop	{r4, pc}
1000f10a:	46c0      	nop			; (mov r8, r8)
1000f10c:	1001072d 	.word	0x1001072d
1000f110:	1000e885 	.word	0x1000e885
1000f114:	1000eff5 	.word	0x1000eff5

1000f118 <init_l2cc_task_module>:
1000f118:	220a      	movs	r2, #10
1000f11a:	4b01      	ldr	r3, [pc, #4]	; (1000f120 <init_l2cc_task_module+0x8>)
1000f11c:	701a      	strb	r2, [r3, #0]
1000f11e:	4770      	bx	lr
1000f120:	1001738c 	.word	0x1001738c

1000f124 <l2cc_data_send_rsp_handler>:
1000f124:	b510      	push	{r4, lr}
1000f126:	7802      	ldrb	r2, [r0, #0]
1000f128:	700a      	strb	r2, [r1, #0]
1000f12a:	7883      	ldrb	r3, [r0, #2]
1000f12c:	7844      	ldrb	r4, [r0, #1]
1000f12e:	021b      	lsls	r3, r3, #8
1000f130:	4323      	orrs	r3, r4
1000f132:	804b      	strh	r3, [r1, #2]
1000f134:	7903      	ldrb	r3, [r0, #4]
1000f136:	78c0      	ldrb	r0, [r0, #3]
1000f138:	021b      	lsls	r3, r3, #8
1000f13a:	4303      	orrs	r3, r0
1000f13c:	808b      	strh	r3, [r1, #4]
1000f13e:	2a00      	cmp	r2, #0
1000f140:	d103      	bne.n	1000f14a <l2cc_data_send_rsp_handler+0x26>
1000f142:	4a02      	ldr	r2, [pc, #8]	; (1000f14c <l2cc_data_send_rsp_handler+0x28>)
1000f144:	7813      	ldrb	r3, [r2, #0]
1000f146:	3301      	adds	r3, #1
1000f148:	7013      	strb	r3, [r2, #0]
1000f14a:	bd10      	pop	{r4, pc}
1000f14c:	1001738c 	.word	0x1001738c

1000f150 <l2cc_data_received_handler>:
1000f150:	b508      	push	{r3, lr}
1000f152:	1c03      	adds	r3, r0, #0
1000f154:	7842      	ldrb	r2, [r0, #1]
1000f156:	7800      	ldrb	r0, [r0, #0]
1000f158:	0212      	lsls	r2, r2, #8
1000f15a:	4302      	orrs	r2, r0
1000f15c:	800a      	strh	r2, [r1, #0]
1000f15e:	78da      	ldrb	r2, [r3, #3]
1000f160:	7898      	ldrb	r0, [r3, #2]
1000f162:	0212      	lsls	r2, r2, #8
1000f164:	4302      	orrs	r2, r0
1000f166:	804a      	strh	r2, [r1, #2]
1000f168:	795a      	ldrb	r2, [r3, #5]
1000f16a:	7918      	ldrb	r0, [r3, #4]
1000f16c:	0212      	lsls	r2, r2, #8
1000f16e:	4302      	orrs	r2, r0
1000f170:	808a      	strh	r2, [r1, #4]
1000f172:	1d88      	adds	r0, r1, #6
1000f174:	1d99      	adds	r1, r3, #6
1000f176:	4b01      	ldr	r3, [pc, #4]	; (1000f17c <l2cc_data_received_handler+0x2c>)
1000f178:	4798      	blx	r3
1000f17a:	bd08      	pop	{r3, pc}
1000f17c:	100147c3 	.word	0x100147c3

1000f180 <at_ble_authenticate>:
1000f180:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f182:	1c0c      	adds	r4, r1, #0
1000f184:	211f      	movs	r1, #31
1000f186:	b08b      	sub	sp, #44	; 0x2c
1000f188:	9307      	str	r3, [sp, #28]
1000f18a:	ab02      	add	r3, sp, #8
1000f18c:	18c9      	adds	r1, r1, r3
1000f18e:	230f      	movs	r3, #15
1000f190:	700b      	strb	r3, [r1, #0]
1000f192:	4b40      	ldr	r3, [pc, #256]	; (1000f294 <at_ble_authenticate+0x114>)
1000f194:	1c05      	adds	r5, r0, #0
1000f196:	1c16      	adds	r6, r2, #0
1000f198:	4798      	blx	r3
1000f19a:	1c07      	adds	r7, r0, #0
1000f19c:	2001      	movs	r0, #1
1000f19e:	2f07      	cmp	r7, #7
1000f1a0:	d875      	bhi.n	1000f28e <at_ble_authenticate+0x10e>
1000f1a2:	2c00      	cmp	r4, #0
1000f1a4:	d113      	bne.n	1000f1ce <at_ble_authenticate+0x4e>
1000f1a6:	2312      	movs	r3, #18
1000f1a8:	435f      	muls	r7, r3
1000f1aa:	4b3b      	ldr	r3, [pc, #236]	; (1000f298 <at_ble_authenticate+0x118>)
1000f1ac:	5cfb      	ldrb	r3, [r7, r3]
1000f1ae:	4283      	cmp	r3, r0
1000f1b0:	d001      	beq.n	1000f1b6 <at_ble_authenticate+0x36>
1000f1b2:	20cf      	movs	r0, #207	; 0xcf
1000f1b4:	e06b      	b.n	1000f28e <at_ble_authenticate+0x10e>
1000f1b6:	9504      	str	r5, [sp, #16]
1000f1b8:	9400      	str	r4, [sp, #0]
1000f1ba:	9401      	str	r4, [sp, #4]
1000f1bc:	9402      	str	r4, [sp, #8]
1000f1be:	9403      	str	r4, [sp, #12]
1000f1c0:	1c20      	adds	r0, r4, #0
1000f1c2:	1c21      	adds	r1, r4, #0
1000f1c4:	1c22      	adds	r2, r4, #0
1000f1c6:	1c23      	adds	r3, r4, #0
1000f1c8:	4d34      	ldr	r5, [pc, #208]	; (1000f29c <at_ble_authenticate+0x11c>)
1000f1ca:	47a8      	blx	r5
1000f1cc:	e05e      	b.n	1000f28c <at_ble_authenticate+0x10c>
1000f1ce:	7922      	ldrb	r2, [r4, #4]
1000f1d0:	2a06      	cmp	r2, #6
1000f1d2:	d9ee      	bls.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1d4:	7963      	ldrb	r3, [r4, #5]
1000f1d6:	2b10      	cmp	r3, #16
1000f1d8:	d8eb      	bhi.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1da:	429a      	cmp	r2, r3
1000f1dc:	d8e9      	bhi.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1de:	7a23      	ldrb	r3, [r4, #8]
1000f1e0:	2b04      	cmp	r3, #4
1000f1e2:	d8e6      	bhi.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1e4:	79a3      	ldrb	r3, [r4, #6]
1000f1e6:	2b07      	cmp	r3, #7
1000f1e8:	d8e3      	bhi.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1ea:	79e3      	ldrb	r3, [r4, #7]
1000f1ec:	2b07      	cmp	r3, #7
1000f1ee:	d8e0      	bhi.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1f0:	78a3      	ldrb	r3, [r4, #2]
1000f1f2:	2b00      	cmp	r3, #0
1000f1f4:	d006      	beq.n	1000f204 <at_ble_authenticate+0x84>
1000f1f6:	2e00      	cmp	r6, #0
1000f1f8:	d0db      	beq.n	1000f1b2 <at_ble_authenticate+0x32>
1000f1fa:	4829      	ldr	r0, [pc, #164]	; (1000f2a0 <at_ble_authenticate+0x120>)
1000f1fc:	1c31      	adds	r1, r6, #0
1000f1fe:	221c      	movs	r2, #28
1000f200:	4b28      	ldr	r3, [pc, #160]	; (1000f2a4 <at_ble_authenticate+0x124>)
1000f202:	4798      	blx	r3
1000f204:	9b07      	ldr	r3, [sp, #28]
1000f206:	2b00      	cmp	r3, #0
1000f208:	d005      	beq.n	1000f216 <at_ble_authenticate+0x96>
1000f20a:	4827      	ldr	r0, [pc, #156]	; (1000f2a8 <at_ble_authenticate+0x128>)
1000f20c:	1c19      	adds	r1, r3, #0
1000f20e:	309a      	adds	r0, #154	; 0x9a
1000f210:	2210      	movs	r2, #16
1000f212:	4b24      	ldr	r3, [pc, #144]	; (1000f2a4 <at_ble_authenticate+0x124>)
1000f214:	4798      	blx	r3
1000f216:	7863      	ldrb	r3, [r4, #1]
1000f218:	78a2      	ldrb	r2, [r4, #2]
1000f21a:	009b      	lsls	r3, r3, #2
1000f21c:	4313      	orrs	r3, r2
1000f21e:	2212      	movs	r2, #18
1000f220:	4357      	muls	r7, r2
1000f222:	4a1d      	ldr	r2, [pc, #116]	; (1000f298 <at_ble_authenticate+0x118>)
1000f224:	b2db      	uxtb	r3, r3
1000f226:	5cba      	ldrb	r2, [r7, r2]
1000f228:	2a00      	cmp	r2, #0
1000f22a:	d116      	bne.n	1000f25a <at_ble_authenticate+0xda>
1000f22c:	79a0      	ldrb	r0, [r4, #6]
1000f22e:	0742      	lsls	r2, r0, #29
1000f230:	d502      	bpl.n	1000f238 <at_ble_authenticate+0xb8>
1000f232:	9a07      	ldr	r2, [sp, #28]
1000f234:	2a00      	cmp	r2, #0
1000f236:	d0bc      	beq.n	1000f1b2 <at_ble_authenticate+0x32>
1000f238:	07c2      	lsls	r2, r0, #31
1000f23a:	d501      	bpl.n	1000f240 <at_ble_authenticate+0xc0>
1000f23c:	2e00      	cmp	r6, #0
1000f23e:	d0b8      	beq.n	1000f1b2 <at_ble_authenticate+0x32>
1000f240:	7966      	ldrb	r6, [r4, #5]
1000f242:	7821      	ldrb	r1, [r4, #0]
1000f244:	78e2      	ldrb	r2, [r4, #3]
1000f246:	9600      	str	r6, [sp, #0]
1000f248:	9001      	str	r0, [sp, #4]
1000f24a:	79e0      	ldrb	r0, [r4, #7]
1000f24c:	9002      	str	r0, [sp, #8]
1000f24e:	7a20      	ldrb	r0, [r4, #8]
1000f250:	4c16      	ldr	r4, [pc, #88]	; (1000f2ac <at_ble_authenticate+0x12c>)
1000f252:	9003      	str	r0, [sp, #12]
1000f254:	1c28      	adds	r0, r5, #0
1000f256:	47a0      	blx	r4
1000f258:	e018      	b.n	1000f28c <at_ble_authenticate+0x10c>
1000f25a:	2a01      	cmp	r2, #1
1000f25c:	d1a9      	bne.n	1000f1b2 <at_ble_authenticate+0x32>
1000f25e:	79e0      	ldrb	r0, [r4, #7]
1000f260:	0742      	lsls	r2, r0, #29
1000f262:	d502      	bpl.n	1000f26a <at_ble_authenticate+0xea>
1000f264:	9a07      	ldr	r2, [sp, #28]
1000f266:	2a00      	cmp	r2, #0
1000f268:	d0a3      	beq.n	1000f1b2 <at_ble_authenticate+0x32>
1000f26a:	07c2      	lsls	r2, r0, #31
1000f26c:	d501      	bpl.n	1000f272 <at_ble_authenticate+0xf2>
1000f26e:	2e00      	cmp	r6, #0
1000f270:	d09f      	beq.n	1000f1b2 <at_ble_authenticate+0x32>
1000f272:	7966      	ldrb	r6, [r4, #5]
1000f274:	7821      	ldrb	r1, [r4, #0]
1000f276:	78e2      	ldrb	r2, [r4, #3]
1000f278:	9600      	str	r6, [sp, #0]
1000f27a:	79a6      	ldrb	r6, [r4, #6]
1000f27c:	9002      	str	r0, [sp, #8]
1000f27e:	9601      	str	r6, [sp, #4]
1000f280:	7a20      	ldrb	r0, [r4, #8]
1000f282:	9504      	str	r5, [sp, #16]
1000f284:	9003      	str	r0, [sp, #12]
1000f286:	4c05      	ldr	r4, [pc, #20]	; (1000f29c <at_ble_authenticate+0x11c>)
1000f288:	2001      	movs	r0, #1
1000f28a:	47a0      	blx	r4
1000f28c:	2000      	movs	r0, #0
1000f28e:	b00b      	add	sp, #44	; 0x2c
1000f290:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f292:	46c0      	nop			; (mov r8, r8)
1000f294:	1000f681 	.word	0x1000f681
1000f298:	10019da2 	.word	0x10019da2
1000f29c:	1000fbf1 	.word	0x1000fbf1
1000f2a0:	10019eb0 	.word	0x10019eb0
1000f2a4:	100147c3 	.word	0x100147c3
1000f2a8:	10019e32 	.word	0x10019e32
1000f2ac:	1000f9d1 	.word	0x1000f9d1

1000f2b0 <at_ble_pair_key_reply>:
1000f2b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2b2:	b085      	sub	sp, #20
1000f2b4:	1c05      	adds	r5, r0, #0
1000f2b6:	1c0c      	adds	r4, r1, #0
1000f2b8:	1c16      	adds	r6, r2, #0
1000f2ba:	2100      	movs	r1, #0
1000f2bc:	4668      	mov	r0, sp
1000f2be:	2210      	movs	r2, #16
1000f2c0:	4b18      	ldr	r3, [pc, #96]	; (1000f324 <at_ble_pair_key_reply+0x74>)
1000f2c2:	4798      	blx	r3
1000f2c4:	2101      	movs	r1, #1
1000f2c6:	2e00      	cmp	r6, #0
1000f2c8:	d101      	bne.n	1000f2ce <at_ble_pair_key_reply+0x1e>
1000f2ca:	1c31      	adds	r1, r6, #0
1000f2cc:	466e      	mov	r6, sp
1000f2ce:	2c00      	cmp	r4, #0
1000f2d0:	d116      	bne.n	1000f300 <at_ble_pair_key_reply+0x50>
1000f2d2:	2701      	movs	r7, #1
1000f2d4:	1c23      	adds	r3, r4, #0
1000f2d6:	1d70      	adds	r0, r6, #5
1000f2d8:	3e01      	subs	r6, #1
1000f2da:	7802      	ldrb	r2, [r0, #0]
1000f2dc:	3801      	subs	r0, #1
1000f2de:	3a30      	subs	r2, #48	; 0x30
1000f2e0:	437a      	muls	r2, r7
1000f2e2:	189b      	adds	r3, r3, r2
1000f2e4:	220a      	movs	r2, #10
1000f2e6:	4357      	muls	r7, r2
1000f2e8:	42b0      	cmp	r0, r6
1000f2ea:	d1f6      	bne.n	1000f2da <at_ble_pair_key_reply+0x2a>
1000f2ec:	466a      	mov	r2, sp
1000f2ee:	4668      	mov	r0, sp
1000f2f0:	7013      	strb	r3, [r2, #0]
1000f2f2:	0a1a      	lsrs	r2, r3, #8
1000f2f4:	7042      	strb	r2, [r0, #1]
1000f2f6:	0c1a      	lsrs	r2, r3, #16
1000f2f8:	0e1b      	lsrs	r3, r3, #24
1000f2fa:	7082      	strb	r2, [r0, #2]
1000f2fc:	70c3      	strb	r3, [r0, #3]
1000f2fe:	e009      	b.n	1000f314 <at_ble_pair_key_reply+0x64>
1000f300:	20cf      	movs	r0, #207	; 0xcf
1000f302:	2c01      	cmp	r4, #1
1000f304:	d10c      	bne.n	1000f320 <at_ble_pair_key_reply+0x70>
1000f306:	2300      	movs	r3, #0
1000f308:	4668      	mov	r0, sp
1000f30a:	5cf2      	ldrb	r2, [r6, r3]
1000f30c:	54c2      	strb	r2, [r0, r3]
1000f30e:	3301      	adds	r3, #1
1000f310:	2b10      	cmp	r3, #16
1000f312:	d1f9      	bne.n	1000f308 <at_ble_pair_key_reply+0x58>
1000f314:	2004      	movs	r0, #4
1000f316:	466a      	mov	r2, sp
1000f318:	1c2b      	adds	r3, r5, #0
1000f31a:	4c03      	ldr	r4, [pc, #12]	; (1000f328 <at_ble_pair_key_reply+0x78>)
1000f31c:	47a0      	blx	r4
1000f31e:	2000      	movs	r0, #0
1000f320:	b005      	add	sp, #20
1000f322:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f324:	100147d5 	.word	0x100147d5
1000f328:	1000fc6d 	.word	0x1000fc6d

1000f32c <at_ble_send_slave_sec_request>:
1000f32c:	b570      	push	{r4, r5, r6, lr}
1000f32e:	4b0c      	ldr	r3, [pc, #48]	; (1000f360 <at_ble_send_slave_sec_request+0x34>)
1000f330:	1c0e      	adds	r6, r1, #0
1000f332:	2100      	movs	r1, #0
1000f334:	1c05      	adds	r5, r0, #0
1000f336:	1c14      	adds	r4, r2, #0
1000f338:	4798      	blx	r3
1000f33a:	2301      	movs	r3, #1
1000f33c:	2807      	cmp	r0, #7
1000f33e:	d80d      	bhi.n	1000f35c <at_ble_send_slave_sec_request+0x30>
1000f340:	3311      	adds	r3, #17
1000f342:	4358      	muls	r0, r3
1000f344:	4b07      	ldr	r3, [pc, #28]	; (1000f364 <at_ble_send_slave_sec_request+0x38>)
1000f346:	5cc2      	ldrb	r2, [r0, r3]
1000f348:	23e0      	movs	r3, #224	; 0xe0
1000f34a:	2a01      	cmp	r2, #1
1000f34c:	d106      	bne.n	1000f35c <at_ble_send_slave_sec_request+0x30>
1000f34e:	00b1      	lsls	r1, r6, #2
1000f350:	430c      	orrs	r4, r1
1000f352:	4b05      	ldr	r3, [pc, #20]	; (1000f368 <at_ble_send_slave_sec_request+0x3c>)
1000f354:	b2e1      	uxtb	r1, r4
1000f356:	1c28      	adds	r0, r5, #0
1000f358:	4798      	blx	r3
1000f35a:	2300      	movs	r3, #0
1000f35c:	1c18      	adds	r0, r3, #0
1000f35e:	bd70      	pop	{r4, r5, r6, pc}
1000f360:	1000f681 	.word	0x1000f681
1000f364:	10019da2 	.word	0x10019da2
1000f368:	1000fcbd 	.word	0x1000fcbd

1000f36c <at_ble_encryption_start>:
1000f36c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f36e:	23cf      	movs	r3, #207	; 0xcf
1000f370:	2900      	cmp	r1, #0
1000f372:	d02b      	beq.n	1000f3cc <at_ble_encryption_start+0x60>
1000f374:	2a05      	cmp	r2, #5
1000f376:	d829      	bhi.n	1000f3cc <at_ble_encryption_start+0x60>
1000f378:	2701      	movs	r7, #1
1000f37a:	1c3d      	adds	r5, r7, #0
1000f37c:	2433      	movs	r4, #51	; 0x33
1000f37e:	4095      	lsls	r5, r2
1000f380:	4225      	tst	r5, r4
1000f382:	d023      	beq.n	1000f3cc <at_ble_encryption_start+0x60>
1000f384:	7e8c      	ldrb	r4, [r1, #26]
1000f386:	3c07      	subs	r4, #7
1000f388:	2c09      	cmp	r4, #9
1000f38a:	d81f      	bhi.n	1000f3cc <at_ble_encryption_start+0x60>
1000f38c:	4b10      	ldr	r3, [pc, #64]	; (1000f3d0 <at_ble_encryption_start+0x64>)
1000f38e:	1c0c      	adds	r4, r1, #0
1000f390:	2100      	movs	r1, #0
1000f392:	1c15      	adds	r5, r2, #0
1000f394:	1c06      	adds	r6, r0, #0
1000f396:	4798      	blx	r3
1000f398:	1c3b      	adds	r3, r7, #0
1000f39a:	2807      	cmp	r0, #7
1000f39c:	d816      	bhi.n	1000f3cc <at_ble_encryption_start+0x60>
1000f39e:	2312      	movs	r3, #18
1000f3a0:	4358      	muls	r0, r3
1000f3a2:	4b0c      	ldr	r3, [pc, #48]	; (1000f3d4 <at_ble_encryption_start+0x68>)
1000f3a4:	5cc7      	ldrb	r7, [r0, r3]
1000f3a6:	23e0      	movs	r3, #224	; 0xe0
1000f3a8:	2f00      	cmp	r7, #0
1000f3aa:	d10f      	bne.n	1000f3cc <at_ble_encryption_start+0x60>
1000f3ac:	1c21      	adds	r1, r4, #0
1000f3ae:	221c      	movs	r2, #28
1000f3b0:	4b09      	ldr	r3, [pc, #36]	; (1000f3d8 <at_ble_encryption_start+0x6c>)
1000f3b2:	480a      	ldr	r0, [pc, #40]	; (1000f3dc <at_ble_encryption_start+0x70>)
1000f3b4:	4798      	blx	r3
1000f3b6:	1c23      	adds	r3, r4, #0
1000f3b8:	7ea1      	ldrb	r1, [r4, #26]
1000f3ba:	8a22      	ldrh	r2, [r4, #16]
1000f3bc:	3312      	adds	r3, #18
1000f3be:	9100      	str	r1, [sp, #0]
1000f3c0:	9501      	str	r5, [sp, #4]
1000f3c2:	1c21      	adds	r1, r4, #0
1000f3c4:	1c30      	adds	r0, r6, #0
1000f3c6:	4c06      	ldr	r4, [pc, #24]	; (1000f3e0 <at_ble_encryption_start+0x74>)
1000f3c8:	47a0      	blx	r4
1000f3ca:	1c3b      	adds	r3, r7, #0
1000f3cc:	1c18      	adds	r0, r3, #0
1000f3ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3d0:	1000f681 	.word	0x1000f681
1000f3d4:	10019da2 	.word	0x10019da2
1000f3d8:	100147c3 	.word	0x100147c3
1000f3dc:	10019eb0 	.word	0x10019eb0
1000f3e0:	1000fcfd 	.word	0x1000fcfd

1000f3e4 <at_ble_encryption_request_reply>:
1000f3e4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f3e6:	24cf      	movs	r4, #207	; 0xcf
1000f3e8:	2b00      	cmp	r3, #0
1000f3ea:	d011      	beq.n	1000f410 <at_ble_encryption_request_reply+0x2c>
1000f3ec:	2a00      	cmp	r2, #0
1000f3ee:	d00a      	beq.n	1000f406 <at_ble_encryption_request_reply+0x22>
1000f3f0:	2905      	cmp	r1, #5
1000f3f2:	d80d      	bhi.n	1000f410 <at_ble_encryption_request_reply+0x2c>
1000f3f4:	2501      	movs	r5, #1
1000f3f6:	2633      	movs	r6, #51	; 0x33
1000f3f8:	408d      	lsls	r5, r1
1000f3fa:	4235      	tst	r5, r6
1000f3fc:	d008      	beq.n	1000f410 <at_ble_encryption_request_reply+0x2c>
1000f3fe:	7e9d      	ldrb	r5, [r3, #26]
1000f400:	3d07      	subs	r5, #7
1000f402:	2d09      	cmp	r5, #9
1000f404:	d804      	bhi.n	1000f410 <at_ble_encryption_request_reply+0x2c>
1000f406:	7e9c      	ldrb	r4, [r3, #26]
1000f408:	9400      	str	r4, [sp, #0]
1000f40a:	4c02      	ldr	r4, [pc, #8]	; (1000f414 <at_ble_encryption_request_reply+0x30>)
1000f40c:	47a0      	blx	r4
1000f40e:	2400      	movs	r4, #0
1000f410:	1c20      	adds	r0, r4, #0
1000f412:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f414:	1000fdb9 	.word	0x1000fdb9

1000f418 <rx_callback>:
1000f418:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f41a:	8883      	ldrh	r3, [r0, #4]
1000f41c:	1c01      	adds	r1, r0, #0
1000f41e:	9301      	str	r3, [sp, #4]
1000f420:	88c5      	ldrh	r5, [r0, #6]
1000f422:	8806      	ldrh	r6, [r0, #0]
1000f424:	2d00      	cmp	r5, #0
1000f426:	d10f      	bne.n	1000f448 <rx_callback+0x30>
1000f428:	1c19      	adds	r1, r3, #0
1000f42a:	1c30      	adds	r0, r6, #0
1000f42c:	4b19      	ldr	r3, [pc, #100]	; (1000f494 <rx_callback+0x7c>)
1000f42e:	1c2a      	adds	r2, r5, #0
1000f430:	4798      	blx	r3
1000f432:	1e03      	subs	r3, r0, #0
1000f434:	d105      	bne.n	1000f442 <rx_callback+0x2a>
1000f436:	1c30      	adds	r0, r6, #0
1000f438:	9901      	ldr	r1, [sp, #4]
1000f43a:	1c1a      	adds	r2, r3, #0
1000f43c:	4c16      	ldr	r4, [pc, #88]	; (1000f498 <rx_callback+0x80>)
1000f43e:	47a0      	blx	r4
1000f440:	e027      	b.n	1000f492 <rx_callback+0x7a>
1000f442:	4b16      	ldr	r3, [pc, #88]	; (1000f49c <rx_callback+0x84>)
1000f444:	4798      	blx	r3
1000f446:	e024      	b.n	1000f492 <rx_callback+0x7a>
1000f448:	4c15      	ldr	r4, [pc, #84]	; (1000f4a0 <rx_callback+0x88>)
1000f44a:	4a16      	ldr	r2, [pc, #88]	; (1000f4a4 <rx_callback+0x8c>)
1000f44c:	6823      	ldr	r3, [r4, #0]
1000f44e:	6812      	ldr	r2, [r2, #0]
1000f450:	18eb      	adds	r3, r5, r3
1000f452:	4293      	cmp	r3, r2
1000f454:	d901      	bls.n	1000f45a <rx_callback+0x42>
1000f456:	2300      	movs	r3, #0
1000f458:	6023      	str	r3, [r4, #0]
1000f45a:	4f13      	ldr	r7, [pc, #76]	; (1000f4a8 <rx_callback+0x90>)
1000f45c:	6822      	ldr	r2, [r4, #0]
1000f45e:	683b      	ldr	r3, [r7, #0]
1000f460:	3108      	adds	r1, #8
1000f462:	1898      	adds	r0, r3, r2
1000f464:	1c2a      	adds	r2, r5, #0
1000f466:	4b11      	ldr	r3, [pc, #68]	; (1000f4ac <rx_callback+0x94>)
1000f468:	4798      	blx	r3
1000f46a:	683b      	ldr	r3, [r7, #0]
1000f46c:	6822      	ldr	r2, [r4, #0]
1000f46e:	1c30      	adds	r0, r6, #0
1000f470:	189a      	adds	r2, r3, r2
1000f472:	9901      	ldr	r1, [sp, #4]
1000f474:	4b07      	ldr	r3, [pc, #28]	; (1000f494 <rx_callback+0x7c>)
1000f476:	4798      	blx	r3
1000f478:	2800      	cmp	r0, #0
1000f47a:	d1e2      	bne.n	1000f442 <rx_callback+0x2a>
1000f47c:	6823      	ldr	r3, [r4, #0]
1000f47e:	683a      	ldr	r2, [r7, #0]
1000f480:	1c30      	adds	r0, r6, #0
1000f482:	18d2      	adds	r2, r2, r3
1000f484:	9901      	ldr	r1, [sp, #4]
1000f486:	1c2b      	adds	r3, r5, #0
1000f488:	4e03      	ldr	r6, [pc, #12]	; (1000f498 <rx_callback+0x80>)
1000f48a:	47b0      	blx	r6
1000f48c:	6823      	ldr	r3, [r4, #0]
1000f48e:	18ed      	adds	r5, r5, r3
1000f490:	6025      	str	r5, [r4, #0]
1000f492:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f494:	1000db21 	.word	0x1000db21
1000f498:	1000da99 	.word	0x1000da99
1000f49c:	1000d6fd 	.word	0x1000d6fd
1000f4a0:	10019f0c 	.word	0x10019f0c
1000f4a4:	10018e30 	.word	0x10018e30
1000f4a8:	10018e2c 	.word	0x10018e2c
1000f4ac:	100147c3 	.word	0x100147c3

1000f4b0 <interface_send>:
1000f4b0:	b508      	push	{r3, lr}
1000f4b2:	4b02      	ldr	r3, [pc, #8]	; (1000f4bc <interface_send+0xc>)
1000f4b4:	4798      	blx	r3
1000f4b6:	2000      	movs	r0, #0
1000f4b8:	bd08      	pop	{r3, pc}
1000f4ba:	46c0      	nop			; (mov r8, r8)
1000f4bc:	1000d3f5 	.word	0x1000d3f5

1000f4c0 <interface_init>:
1000f4c0:	2280      	movs	r2, #128	; 0x80
1000f4c2:	b510      	push	{r4, lr}
1000f4c4:	2100      	movs	r1, #0
1000f4c6:	1c04      	adds	r4, r0, #0
1000f4c8:	0092      	lsls	r2, r2, #2
1000f4ca:	4b08      	ldr	r3, [pc, #32]	; (1000f4ec <interface_init+0x2c>)
1000f4cc:	4808      	ldr	r0, [pc, #32]	; (1000f4f0 <interface_init+0x30>)
1000f4ce:	4798      	blx	r3
1000f4d0:	2200      	movs	r2, #0
1000f4d2:	4b08      	ldr	r3, [pc, #32]	; (1000f4f4 <interface_init+0x34>)
1000f4d4:	601a      	str	r2, [r3, #0]
1000f4d6:	4a08      	ldr	r2, [pc, #32]	; (1000f4f8 <interface_init+0x38>)
1000f4d8:	4b08      	ldr	r3, [pc, #32]	; (1000f4fc <interface_init+0x3c>)
1000f4da:	601a      	str	r2, [r3, #0]
1000f4dc:	4b08      	ldr	r3, [pc, #32]	; (1000f500 <interface_init+0x40>)
1000f4de:	6922      	ldr	r2, [r4, #16]
1000f4e0:	601a      	str	r2, [r3, #0]
1000f4e2:	6962      	ldr	r2, [r4, #20]
1000f4e4:	4b07      	ldr	r3, [pc, #28]	; (1000f504 <interface_init+0x44>)
1000f4e6:	601a      	str	r2, [r3, #0]
1000f4e8:	bd10      	pop	{r4, pc}
1000f4ea:	46c0      	nop			; (mov r8, r8)
1000f4ec:	100147d5 	.word	0x100147d5
1000f4f0:	1001a110 	.word	0x1001a110
1000f4f4:	10019f0c 	.word	0x10019f0c
1000f4f8:	10019f10 	.word	0x10019f10
1000f4fc:	10017390 	.word	0x10017390
1000f500:	10018e2c 	.word	0x10018e2c
1000f504:	10018e30 	.word	0x10018e30

1000f508 <platform_cmd_cmpl_signal>:
1000f508:	2201      	movs	r2, #1
1000f50a:	4b01      	ldr	r3, [pc, #4]	; (1000f510 <platform_cmd_cmpl_signal+0x8>)
1000f50c:	601a      	str	r2, [r3, #0]
1000f50e:	4770      	bx	lr
1000f510:	10018e34 	.word	0x10018e34

1000f514 <platform_cmd_cmpl_wait>:
1000f514:	b510      	push	{r4, lr}
1000f516:	1c04      	adds	r4, r0, #0
1000f518:	4b07      	ldr	r3, [pc, #28]	; (1000f538 <platform_cmd_cmpl_wait+0x24>)
1000f51a:	681a      	ldr	r2, [r3, #0]
1000f51c:	2a01      	cmp	r2, #1
1000f51e:	d003      	beq.n	1000f528 <platform_cmd_cmpl_wait+0x14>
1000f520:	4b06      	ldr	r3, [pc, #24]	; (1000f53c <platform_cmd_cmpl_wait+0x28>)
1000f522:	2000      	movs	r0, #0
1000f524:	4798      	blx	r3
1000f526:	e7f7      	b.n	1000f518 <platform_cmd_cmpl_wait+0x4>
1000f528:	6819      	ldr	r1, [r3, #0]
1000f52a:	2901      	cmp	r1, #1
1000f52c:	d102      	bne.n	1000f534 <platform_cmd_cmpl_wait+0x20>
1000f52e:	2200      	movs	r2, #0
1000f530:	601a      	str	r2, [r3, #0]
1000f532:	e000      	b.n	1000f536 <platform_cmd_cmpl_wait+0x22>
1000f534:	7022      	strb	r2, [r4, #0]
1000f536:	bd10      	pop	{r4, pc}
1000f538:	10018e34 	.word	0x10018e34
1000f53c:	1000d485 	.word	0x1000d485

1000f540 <start_timer>:
1000f540:	4770      	bx	lr

1000f542 <stop_timer>:
1000f542:	4770      	bx	lr

1000f544 <dbg_le_set_bd_addr_req_handler>:
1000f544:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f546:	466b      	mov	r3, sp
1000f548:	1dde      	adds	r6, r3, #7
1000f54a:	2300      	movs	r3, #0
1000f54c:	7033      	strb	r3, [r6, #0]
1000f54e:	230f      	movs	r3, #15
1000f550:	4c13      	ldr	r4, [pc, #76]	; (1000f5a0 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f552:	2703      	movs	r7, #3
1000f554:	7023      	strb	r3, [r4, #0]
1000f556:	2300      	movs	r3, #0
1000f558:	70e3      	strb	r3, [r4, #3]
1000f55a:	4b12      	ldr	r3, [pc, #72]	; (1000f5a4 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f55c:	1c01      	adds	r1, r0, #0
1000f55e:	881a      	ldrh	r2, [r3, #0]
1000f560:	881b      	ldrh	r3, [r3, #0]
1000f562:	7122      	strb	r2, [r4, #4]
1000f564:	0a1b      	lsrs	r3, r3, #8
1000f566:	2206      	movs	r2, #6
1000f568:	7163      	strb	r3, [r4, #5]
1000f56a:	480f      	ldr	r0, [pc, #60]	; (1000f5a8 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f56c:	4b0f      	ldr	r3, [pc, #60]	; (1000f5ac <dbg_le_set_bd_addr_req_handler+0x68>)
1000f56e:	7067      	strb	r7, [r4, #1]
1000f570:	70a7      	strb	r7, [r4, #2]
1000f572:	4798      	blx	r3
1000f574:	4d0e      	ldr	r5, [pc, #56]	; (1000f5b0 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f576:	4b0f      	ldr	r3, [pc, #60]	; (1000f5b4 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f578:	210e      	movs	r1, #14
1000f57a:	802b      	strh	r3, [r5, #0]
1000f57c:	2306      	movs	r3, #6
1000f57e:	71a3      	strb	r3, [r4, #6]
1000f580:	2300      	movs	r3, #0
1000f582:	1c20      	adds	r0, r4, #0
1000f584:	71e3      	strb	r3, [r4, #7]
1000f586:	4b0c      	ldr	r3, [pc, #48]	; (1000f5b8 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f588:	80af      	strh	r7, [r5, #4]
1000f58a:	4798      	blx	r3
1000f58c:	1c30      	adds	r0, r6, #0
1000f58e:	4b0b      	ldr	r3, [pc, #44]	; (1000f5bc <dbg_le_set_bd_addr_req_handler+0x78>)
1000f590:	4798      	blx	r3
1000f592:	7833      	ldrb	r3, [r6, #0]
1000f594:	20e2      	movs	r0, #226	; 0xe2
1000f596:	2b00      	cmp	r3, #0
1000f598:	d101      	bne.n	1000f59e <dbg_le_set_bd_addr_req_handler+0x5a>
1000f59a:	68ab      	ldr	r3, [r5, #8]
1000f59c:	7818      	ldrb	r0, [r3, #0]
1000f59e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f5a0:	1001a110 	.word	0x1001a110
1000f5a4:	10019da0 	.word	0x10019da0
1000f5a8:	1001a118 	.word	0x1001a118
1000f5ac:	100147c3 	.word	0x100147c3
1000f5b0:	10019d94 	.word	0x10019d94
1000f5b4:	00000329 	.word	0x00000329
1000f5b8:	1000f4b1 	.word	0x1000f4b1
1000f5bc:	1000f515 	.word	0x1000f515

1000f5c0 <gapc_get_dev_info_cfm.constprop.1>:
1000f5c0:	b538      	push	{r3, r4, r5, lr}
1000f5c2:	230b      	movs	r3, #11
1000f5c4:	4c27      	ldr	r4, [pc, #156]	; (1000f664 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f5c6:	7023      	strb	r3, [r4, #0]
1000f5c8:	3303      	adds	r3, #3
1000f5ca:	7063      	strb	r3, [r4, #1]
1000f5cc:	3329      	adds	r3, #41	; 0x29
1000f5ce:	70a3      	strb	r3, [r4, #2]
1000f5d0:	4b25      	ldr	r3, [pc, #148]	; (1000f668 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f5d2:	70e1      	strb	r1, [r4, #3]
1000f5d4:	881a      	ldrh	r2, [r3, #0]
1000f5d6:	881b      	ldrh	r3, [r3, #0]
1000f5d8:	7122      	strb	r2, [r4, #4]
1000f5da:	0a1b      	lsrs	r3, r3, #8
1000f5dc:	7163      	strb	r3, [r4, #5]
1000f5de:	2300      	movs	r3, #0
1000f5e0:	7220      	strb	r0, [r4, #8]
1000f5e2:	7263      	strb	r3, [r4, #9]
1000f5e4:	2801      	cmp	r0, #1
1000f5e6:	d02b      	beq.n	1000f640 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f5e8:	4298      	cmp	r0, r3
1000f5ea:	d01b      	beq.n	1000f624 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f5ec:	2802      	cmp	r0, #2
1000f5ee:	d12f      	bne.n	1000f650 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f5f0:	4b1e      	ldr	r3, [pc, #120]	; (1000f66c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f5f2:	2112      	movs	r1, #18
1000f5f4:	1c1a      	adds	r2, r3, #0
1000f5f6:	32ce      	adds	r2, #206	; 0xce
1000f5f8:	8812      	ldrh	r2, [r2, #0]
1000f5fa:	72a2      	strb	r2, [r4, #10]
1000f5fc:	0a12      	lsrs	r2, r2, #8
1000f5fe:	72e2      	strb	r2, [r4, #11]
1000f600:	1c1a      	adds	r2, r3, #0
1000f602:	32d0      	adds	r2, #208	; 0xd0
1000f604:	8812      	ldrh	r2, [r2, #0]
1000f606:	7322      	strb	r2, [r4, #12]
1000f608:	0a12      	lsrs	r2, r2, #8
1000f60a:	7362      	strb	r2, [r4, #13]
1000f60c:	1c1a      	adds	r2, r3, #0
1000f60e:	32d2      	adds	r2, #210	; 0xd2
1000f610:	8812      	ldrh	r2, [r2, #0]
1000f612:	33d4      	adds	r3, #212	; 0xd4
1000f614:	73a2      	strb	r2, [r4, #14]
1000f616:	0a12      	lsrs	r2, r2, #8
1000f618:	73e2      	strb	r2, [r4, #15]
1000f61a:	881b      	ldrh	r3, [r3, #0]
1000f61c:	7423      	strb	r3, [r4, #16]
1000f61e:	0a1b      	lsrs	r3, r3, #8
1000f620:	7463      	strb	r3, [r4, #17]
1000f622:	e016      	b.n	1000f652 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f624:	4b11      	ldr	r3, [pc, #68]	; (1000f66c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f626:	4912      	ldr	r1, [pc, #72]	; (1000f670 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f628:	33aa      	adds	r3, #170	; 0xaa
1000f62a:	881d      	ldrh	r5, [r3, #0]
1000f62c:	4811      	ldr	r0, [pc, #68]	; (1000f674 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f62e:	0a2b      	lsrs	r3, r5, #8
1000f630:	72a5      	strb	r5, [r4, #10]
1000f632:	72e3      	strb	r3, [r4, #11]
1000f634:	1c2a      	adds	r2, r5, #0
1000f636:	4b10      	ldr	r3, [pc, #64]	; (1000f678 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f638:	350c      	adds	r5, #12
1000f63a:	4798      	blx	r3
1000f63c:	b2a9      	uxth	r1, r5
1000f63e:	e008      	b.n	1000f652 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f640:	4b0a      	ldr	r3, [pc, #40]	; (1000f66c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f642:	210c      	movs	r1, #12
1000f644:	33cc      	adds	r3, #204	; 0xcc
1000f646:	881b      	ldrh	r3, [r3, #0]
1000f648:	72a3      	strb	r3, [r4, #10]
1000f64a:	0a1b      	lsrs	r3, r3, #8
1000f64c:	72e3      	strb	r3, [r4, #11]
1000f64e:	e000      	b.n	1000f652 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f650:	210a      	movs	r1, #10
1000f652:	1c0b      	adds	r3, r1, #0
1000f654:	3b08      	subs	r3, #8
1000f656:	71a3      	strb	r3, [r4, #6]
1000f658:	121b      	asrs	r3, r3, #8
1000f65a:	71e3      	strb	r3, [r4, #7]
1000f65c:	1c20      	adds	r0, r4, #0
1000f65e:	4b07      	ldr	r3, [pc, #28]	; (1000f67c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f660:	4798      	blx	r3
1000f662:	bd38      	pop	{r3, r4, r5, pc}
1000f664:	1001a110 	.word	0x1001a110
1000f668:	10019da0 	.word	0x10019da0
1000f66c:	10019e32 	.word	0x10019e32
1000f670:	10019ede 	.word	0x10019ede
1000f674:	1001a11c 	.word	0x1001a11c
1000f678:	100147c3 	.word	0x100147c3
1000f67c:	1000f4b1 	.word	0x1000f4b1

1000f680 <check_ConnData_idx_role>:
1000f680:	4b0c      	ldr	r3, [pc, #48]	; (1000f6b4 <check_ConnData_idx_role+0x34>)
1000f682:	b570      	push	{r4, r5, r6, lr}
1000f684:	1c04      	adds	r4, r0, #0
1000f686:	2008      	movs	r0, #8
1000f688:	429c      	cmp	r4, r3
1000f68a:	d011      	beq.n	1000f6b0 <check_ConnData_idx_role+0x30>
1000f68c:	2300      	movs	r3, #0
1000f68e:	2212      	movs	r2, #18
1000f690:	435a      	muls	r2, r3
1000f692:	4d09      	ldr	r5, [pc, #36]	; (1000f6b8 <check_ConnData_idx_role+0x38>)
1000f694:	b2d8      	uxtb	r0, r3
1000f696:	1956      	adds	r6, r2, r5
1000f698:	8976      	ldrh	r6, [r6, #10]
1000f69a:	42a6      	cmp	r6, r4
1000f69c:	d104      	bne.n	1000f6a8 <check_ConnData_idx_role+0x28>
1000f69e:	2900      	cmp	r1, #0
1000f6a0:	d006      	beq.n	1000f6b0 <check_ConnData_idx_role+0x30>
1000f6a2:	5d53      	ldrb	r3, [r2, r5]
1000f6a4:	700b      	strb	r3, [r1, #0]
1000f6a6:	e003      	b.n	1000f6b0 <check_ConnData_idx_role+0x30>
1000f6a8:	3301      	adds	r3, #1
1000f6aa:	2b08      	cmp	r3, #8
1000f6ac:	d1ef      	bne.n	1000f68e <check_ConnData_idx_role+0xe>
1000f6ae:	1c18      	adds	r0, r3, #0
1000f6b0:	bd70      	pop	{r4, r5, r6, pc}
1000f6b2:	46c0      	nop			; (mov r8, r8)
1000f6b4:	0000ffff 	.word	0x0000ffff
1000f6b8:	10019da2 	.word	0x10019da2

1000f6bc <check_ConnData_emptyEntry>:
1000f6bc:	2300      	movs	r3, #0
1000f6be:	2212      	movs	r2, #18
1000f6c0:	435a      	muls	r2, r3
1000f6c2:	4906      	ldr	r1, [pc, #24]	; (1000f6dc <check_ConnData_emptyEntry+0x20>)
1000f6c4:	b2d8      	uxtb	r0, r3
1000f6c6:	1852      	adds	r2, r2, r1
1000f6c8:	8951      	ldrh	r1, [r2, #10]
1000f6ca:	4a05      	ldr	r2, [pc, #20]	; (1000f6e0 <check_ConnData_emptyEntry+0x24>)
1000f6cc:	4291      	cmp	r1, r2
1000f6ce:	d003      	beq.n	1000f6d8 <check_ConnData_emptyEntry+0x1c>
1000f6d0:	3301      	adds	r3, #1
1000f6d2:	2b08      	cmp	r3, #8
1000f6d4:	d1f3      	bne.n	1000f6be <check_ConnData_emptyEntry+0x2>
1000f6d6:	1c18      	adds	r0, r3, #0
1000f6d8:	4770      	bx	lr
1000f6da:	46c0      	nop			; (mov r8, r8)
1000f6dc:	10019da2 	.word	0x10019da2
1000f6e0:	0000ffff 	.word	0x0000ffff

1000f6e4 <gapc_cmp_evt>:
1000f6e4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6e6:	780b      	ldrb	r3, [r1, #0]
1000f6e8:	1c05      	adds	r5, r0, #0
1000f6ea:	1e58      	subs	r0, r3, #1
1000f6ec:	784e      	ldrb	r6, [r1, #1]
1000f6ee:	280f      	cmp	r0, #15
1000f6f0:	d85a      	bhi.n	1000f7a8 <gapc_cmp_evt+0xc4>
1000f6f2:	1c14      	adds	r4, r2, #0
1000f6f4:	f002 fc78 	bl	10011fe8 <__gnu_thumb1_case_uqi>
1000f6f8:	5858440a 	.word	0x5858440a
1000f6fc:	4b584444 	.word	0x4b584444
1000f700:	0825122d 	.word	0x0825122d
1000f704:	3e395858 	.word	0x3e395858
1000f708:	203b      	movs	r0, #59	; 0x3b
1000f70a:	e04e      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f70c:	203b      	movs	r0, #59	; 0x3b
1000f70e:	2e00      	cmp	r6, #0
1000f710:	d04b      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f712:	0a2d      	lsrs	r5, r5, #8
1000f714:	8015      	strh	r5, [r2, #0]
1000f716:	7096      	strb	r6, [r2, #2]
1000f718:	3835      	subs	r0, #53	; 0x35
1000f71a:	e046      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f71c:	466b      	mov	r3, sp
1000f71e:	1ddf      	adds	r7, r3, #7
1000f720:	2301      	movs	r3, #1
1000f722:	0a2d      	lsrs	r5, r5, #8
1000f724:	703b      	strb	r3, [r7, #0]
1000f726:	1c28      	adds	r0, r5, #0
1000f728:	1c39      	adds	r1, r7, #0
1000f72a:	4b20      	ldr	r3, [pc, #128]	; (1000f7ac <gapc_cmp_evt+0xc8>)
1000f72c:	4798      	blx	r3
1000f72e:	2807      	cmp	r0, #7
1000f730:	d803      	bhi.n	1000f73a <gapc_cmp_evt+0x56>
1000f732:	783b      	ldrb	r3, [r7, #0]
1000f734:	203b      	movs	r0, #59	; 0x3b
1000f736:	2b00      	cmp	r3, #0
1000f738:	d037      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f73a:	8065      	strh	r5, [r4, #2]
1000f73c:	7126      	strb	r6, [r4, #4]
1000f73e:	2009      	movs	r0, #9
1000f740:	e033      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f742:	203b      	movs	r0, #59	; 0x3b
1000f744:	2e00      	cmp	r6, #0
1000f746:	d030      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f748:	0a2d      	lsrs	r5, r5, #8
1000f74a:	8015      	strh	r5, [r2, #0]
1000f74c:	7096      	strb	r6, [r2, #2]
1000f74e:	382d      	subs	r0, #45	; 0x2d
1000f750:	e02b      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f752:	203b      	movs	r0, #59	; 0x3b
1000f754:	2e00      	cmp	r6, #0
1000f756:	d028      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f758:	2300      	movs	r3, #0
1000f75a:	0a2d      	lsrs	r5, r5, #8
1000f75c:	8015      	strh	r5, [r2, #0]
1000f75e:	7096      	strb	r6, [r2, #2]
1000f760:	8093      	strh	r3, [r2, #4]
1000f762:	80d3      	strh	r3, [r2, #6]
1000f764:	8113      	strh	r3, [r2, #8]
1000f766:	3834      	subs	r0, #52	; 0x34
1000f768:	e01f      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f76a:	203b      	movs	r0, #59	; 0x3b
1000f76c:	2e00      	cmp	r6, #0
1000f76e:	d01c      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f770:	7216      	strb	r6, [r2, #8]
1000f772:	e003      	b.n	1000f77c <gapc_cmp_evt+0x98>
1000f774:	203b      	movs	r0, #59	; 0x3b
1000f776:	2e00      	cmp	r6, #0
1000f778:	d017      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f77a:	7116      	strb	r6, [r2, #4]
1000f77c:	3812      	subs	r0, #18
1000f77e:	e014      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f780:	203b      	movs	r0, #59	; 0x3b
1000f782:	2e00      	cmp	r6, #0
1000f784:	d011      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f786:	7093      	strb	r3, [r2, #2]
1000f788:	70d6      	strb	r6, [r2, #3]
1000f78a:	382a      	subs	r0, #42	; 0x2a
1000f78c:	e00d      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f78e:	203b      	movs	r0, #59	; 0x3b
1000f790:	2e00      	cmp	r6, #0
1000f792:	d00a      	beq.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f794:	0a2d      	lsrs	r5, r5, #8
1000f796:	7016      	strb	r6, [r2, #0]
1000f798:	8055      	strh	r5, [r2, #2]
1000f79a:	1d10      	adds	r0, r2, #4
1000f79c:	2100      	movs	r1, #0
1000f79e:	2205      	movs	r2, #5
1000f7a0:	4b03      	ldr	r3, [pc, #12]	; (1000f7b0 <gapc_cmp_evt+0xcc>)
1000f7a2:	4798      	blx	r3
1000f7a4:	2012      	movs	r0, #18
1000f7a6:	e000      	b.n	1000f7aa <gapc_cmp_evt+0xc6>
1000f7a8:	2000      	movs	r0, #0
1000f7aa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f7ac:	1000f681 	.word	0x1000f681
1000f7b0:	100147d5 	.word	0x100147d5

1000f7b4 <gapc_connection_cfm_handler>:
1000f7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7b6:	b085      	sub	sp, #20
1000f7b8:	1c1d      	adds	r5, r3, #0
1000f7ba:	ab0a      	add	r3, sp, #40	; 0x28
1000f7bc:	781b      	ldrb	r3, [r3, #0]
1000f7be:	9201      	str	r2, [sp, #4]
1000f7c0:	9302      	str	r3, [sp, #8]
1000f7c2:	ab0b      	add	r3, sp, #44	; 0x2c
1000f7c4:	781b      	ldrb	r3, [r3, #0]
1000f7c6:	1c07      	adds	r7, r0, #0
1000f7c8:	9303      	str	r3, [sp, #12]
1000f7ca:	ab0c      	add	r3, sp, #48	; 0x30
1000f7cc:	881a      	ldrh	r2, [r3, #0]
1000f7ce:	2302      	movs	r3, #2
1000f7d0:	1c0e      	adds	r6, r1, #0
1000f7d2:	4c23      	ldr	r4, [pc, #140]	; (1000f860 <gapc_connection_cfm_handler+0xac>)
1000f7d4:	1c39      	adds	r1, r7, #0
1000f7d6:	7023      	strb	r3, [r4, #0]
1000f7d8:	330c      	adds	r3, #12
1000f7da:	7063      	strb	r3, [r4, #1]
1000f7dc:	70a3      	strb	r3, [r4, #2]
1000f7de:	4b21      	ldr	r3, [pc, #132]	; (1000f864 <gapc_connection_cfm_handler+0xb0>)
1000f7e0:	70e2      	strb	r2, [r4, #3]
1000f7e2:	881a      	ldrh	r2, [r3, #0]
1000f7e4:	881b      	ldrh	r3, [r3, #0]
1000f7e6:	7122      	strb	r2, [r4, #4]
1000f7e8:	0a1b      	lsrs	r3, r3, #8
1000f7ea:	4f1f      	ldr	r7, [pc, #124]	; (1000f868 <gapc_connection_cfm_handler+0xb4>)
1000f7ec:	2210      	movs	r2, #16
1000f7ee:	481f      	ldr	r0, [pc, #124]	; (1000f86c <gapc_connection_cfm_handler+0xb8>)
1000f7f0:	7163      	strb	r3, [r4, #5]
1000f7f2:	47b8      	blx	r7
1000f7f4:	0a33      	lsrs	r3, r6, #8
1000f7f6:	7626      	strb	r6, [r4, #24]
1000f7f8:	7663      	strb	r3, [r4, #25]
1000f7fa:	9901      	ldr	r1, [sp, #4]
1000f7fc:	0c33      	lsrs	r3, r6, #16
1000f7fe:	2210      	movs	r2, #16
1000f800:	0e36      	lsrs	r6, r6, #24
1000f802:	481b      	ldr	r0, [pc, #108]	; (1000f870 <gapc_connection_cfm_handler+0xbc>)
1000f804:	76a3      	strb	r3, [r4, #26]
1000f806:	76e6      	strb	r6, [r4, #27]
1000f808:	47b8      	blx	r7
1000f80a:	1c23      	adds	r3, r4, #0
1000f80c:	332c      	adds	r3, #44	; 0x2c
1000f80e:	701d      	strb	r5, [r3, #0]
1000f810:	1c23      	adds	r3, r4, #0
1000f812:	0a2a      	lsrs	r2, r5, #8
1000f814:	332d      	adds	r3, #45	; 0x2d
1000f816:	701a      	strb	r2, [r3, #0]
1000f818:	1c23      	adds	r3, r4, #0
1000f81a:	0c2a      	lsrs	r2, r5, #16
1000f81c:	332e      	adds	r3, #46	; 0x2e
1000f81e:	701a      	strb	r2, [r3, #0]
1000f820:	1c23      	adds	r3, r4, #0
1000f822:	0e2d      	lsrs	r5, r5, #24
1000f824:	332f      	adds	r3, #47	; 0x2f
1000f826:	466a      	mov	r2, sp
1000f828:	701d      	strb	r5, [r3, #0]
1000f82a:	1c23      	adds	r3, r4, #0
1000f82c:	7a12      	ldrb	r2, [r2, #8]
1000f82e:	3330      	adds	r3, #48	; 0x30
1000f830:	701a      	strb	r2, [r3, #0]
1000f832:	1c23      	adds	r3, r4, #0
1000f834:	2500      	movs	r5, #0
1000f836:	3331      	adds	r3, #49	; 0x31
1000f838:	466a      	mov	r2, sp
1000f83a:	701d      	strb	r5, [r3, #0]
1000f83c:	1c23      	adds	r3, r4, #0
1000f83e:	7b12      	ldrb	r2, [r2, #12]
1000f840:	3332      	adds	r3, #50	; 0x32
1000f842:	701a      	strb	r2, [r3, #0]
1000f844:	1c23      	adds	r3, r4, #0
1000f846:	3333      	adds	r3, #51	; 0x33
1000f848:	701d      	strb	r5, [r3, #0]
1000f84a:	232c      	movs	r3, #44	; 0x2c
1000f84c:	1c20      	adds	r0, r4, #0
1000f84e:	71a3      	strb	r3, [r4, #6]
1000f850:	2134      	movs	r1, #52	; 0x34
1000f852:	4b08      	ldr	r3, [pc, #32]	; (1000f874 <gapc_connection_cfm_handler+0xc0>)
1000f854:	71e5      	strb	r5, [r4, #7]
1000f856:	4798      	blx	r3
1000f858:	1c28      	adds	r0, r5, #0
1000f85a:	b005      	add	sp, #20
1000f85c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f85e:	46c0      	nop			; (mov r8, r8)
1000f860:	1001a110 	.word	0x1001a110
1000f864:	10019da0 	.word	0x10019da0
1000f868:	100147c3 	.word	0x100147c3
1000f86c:	1001a118 	.word	0x1001a118
1000f870:	1001a12c 	.word	0x1001a12c
1000f874:	1000f4b1 	.word	0x1000f4b1

1000f878 <gapc_con_req_ind>:
1000f878:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f87a:	7845      	ldrb	r5, [r0, #1]
1000f87c:	7803      	ldrb	r3, [r0, #0]
1000f87e:	4c30      	ldr	r4, [pc, #192]	; (1000f940 <gapc_con_req_ind+0xc8>)
1000f880:	022d      	lsls	r5, r5, #8
1000f882:	431d      	orrs	r5, r3
1000f884:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f886:	78c3      	ldrb	r3, [r0, #3]
1000f888:	7882      	ldrb	r2, [r0, #2]
1000f88a:	b08b      	sub	sp, #44	; 0x2c
1000f88c:	021b      	lsls	r3, r3, #8
1000f88e:	431a      	orrs	r2, r3
1000f890:	466b      	mov	r3, sp
1000f892:	9205      	str	r2, [sp, #20]
1000f894:	8a9b      	ldrh	r3, [r3, #20]
1000f896:	2120      	movs	r1, #32
1000f898:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f89a:	7943      	ldrb	r3, [r0, #5]
1000f89c:	7902      	ldrb	r2, [r0, #4]
1000f89e:	021b      	lsls	r3, r3, #8
1000f8a0:	431a      	orrs	r2, r3
1000f8a2:	466b      	mov	r3, sp
1000f8a4:	9206      	str	r2, [sp, #24]
1000f8a6:	8b1b      	ldrh	r3, [r3, #24]
1000f8a8:	1c06      	adds	r6, r0, #0
1000f8aa:	8623      	strh	r3, [r4, #48]	; 0x30
1000f8ac:	79c3      	ldrb	r3, [r0, #7]
1000f8ae:	7982      	ldrb	r2, [r0, #6]
1000f8b0:	021b      	lsls	r3, r3, #8
1000f8b2:	431a      	orrs	r2, r3
1000f8b4:	466b      	mov	r3, sp
1000f8b6:	9207      	str	r2, [sp, #28]
1000f8b8:	466a      	mov	r2, sp
1000f8ba:	8b9b      	ldrh	r3, [r3, #28]
1000f8bc:	1852      	adds	r2, r2, r1
1000f8be:	8663      	strh	r3, [r4, #50]	; 0x32
1000f8c0:	7a43      	ldrb	r3, [r0, #9]
1000f8c2:	1c01      	adds	r1, r0, #0
1000f8c4:	9308      	str	r3, [sp, #32]
1000f8c6:	1c23      	adds	r3, r4, #0
1000f8c8:	7812      	ldrb	r2, [r2, #0]
1000f8ca:	3377      	adds	r3, #119	; 0x77
1000f8cc:	3478      	adds	r4, #120	; 0x78
1000f8ce:	701a      	strb	r2, [r3, #0]
1000f8d0:	310a      	adds	r1, #10
1000f8d2:	2206      	movs	r2, #6
1000f8d4:	4b1b      	ldr	r3, [pc, #108]	; (1000f944 <gapc_con_req_ind+0xcc>)
1000f8d6:	1c20      	adds	r0, r4, #0
1000f8d8:	4798      	blx	r3
1000f8da:	7c33      	ldrb	r3, [r6, #16]
1000f8dc:	9309      	str	r3, [sp, #36]	; 0x24
1000f8de:	4b1a      	ldr	r3, [pc, #104]	; (1000f948 <gapc_con_req_ind+0xd0>)
1000f8e0:	4798      	blx	r3
1000f8e2:	4e1a      	ldr	r6, [pc, #104]	; (1000f94c <gapc_con_req_ind+0xd4>)
1000f8e4:	1e07      	subs	r7, r0, #0
1000f8e6:	2f07      	cmp	r7, #7
1000f8e8:	d81b      	bhi.n	1000f922 <gapc_con_req_ind+0xaa>
1000f8ea:	2312      	movs	r3, #18
1000f8ec:	4343      	muls	r3, r0
1000f8ee:	18f0      	adds	r0, r6, r3
1000f8f0:	8145      	strh	r5, [r0, #10]
1000f8f2:	4669      	mov	r1, sp
1000f8f4:	2524      	movs	r5, #36	; 0x24
1000f8f6:	1949      	adds	r1, r1, r5
1000f8f8:	7809      	ldrb	r1, [r1, #0]
1000f8fa:	2206      	movs	r2, #6
1000f8fc:	54f1      	strb	r1, [r6, r3]
1000f8fe:	2120      	movs	r1, #32
1000f900:	466b      	mov	r3, sp
1000f902:	185b      	adds	r3, r3, r1
1000f904:	781b      	ldrb	r3, [r3, #0]
1000f906:	1c21      	adds	r1, r4, #0
1000f908:	7043      	strb	r3, [r0, #1]
1000f90a:	466b      	mov	r3, sp
1000f90c:	8a9b      	ldrh	r3, [r3, #20]
1000f90e:	3002      	adds	r0, #2
1000f910:	8143      	strh	r3, [r0, #10]
1000f912:	466b      	mov	r3, sp
1000f914:	8b1b      	ldrh	r3, [r3, #24]
1000f916:	8183      	strh	r3, [r0, #12]
1000f918:	466b      	mov	r3, sp
1000f91a:	8b9b      	ldrh	r3, [r3, #28]
1000f91c:	81c3      	strh	r3, [r0, #14]
1000f91e:	4b09      	ldr	r3, [pc, #36]	; (1000f944 <gapc_con_req_ind+0xcc>)
1000f920:	4798      	blx	r3
1000f922:	2112      	movs	r1, #18
1000f924:	2300      	movs	r3, #0
1000f926:	434f      	muls	r7, r1
1000f928:	9300      	str	r3, [sp, #0]
1000f92a:	9301      	str	r3, [sp, #4]
1000f92c:	19f6      	adds	r6, r6, r7
1000f92e:	8971      	ldrh	r1, [r6, #10]
1000f930:	4a07      	ldr	r2, [pc, #28]	; (1000f950 <gapc_con_req_ind+0xd8>)
1000f932:	9102      	str	r1, [sp, #8]
1000f934:	1c10      	adds	r0, r2, #0
1000f936:	1c19      	adds	r1, r3, #0
1000f938:	4c06      	ldr	r4, [pc, #24]	; (1000f954 <gapc_con_req_ind+0xdc>)
1000f93a:	47a0      	blx	r4
1000f93c:	b00b      	add	sp, #44	; 0x2c
1000f93e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f940:	10019e32 	.word	0x10019e32
1000f944:	100147c3 	.word	0x100147c3
1000f948:	1000f6bd 	.word	0x1000f6bd
1000f94c:	10019da2 	.word	0x10019da2
1000f950:	10018e38 	.word	0x10018e38
1000f954:	1000f7b5 	.word	0x1000f7b5

1000f958 <gapc_disconnect_cmd_handler>:
1000f958:	2204      	movs	r2, #4
1000f95a:	b510      	push	{r4, lr}
1000f95c:	4b0c      	ldr	r3, [pc, #48]	; (1000f990 <gapc_disconnect_cmd_handler+0x38>)
1000f95e:	2400      	movs	r4, #0
1000f960:	701a      	strb	r2, [r3, #0]
1000f962:	320a      	adds	r2, #10
1000f964:	705a      	strb	r2, [r3, #1]
1000f966:	709a      	strb	r2, [r3, #2]
1000f968:	4a0a      	ldr	r2, [pc, #40]	; (1000f994 <gapc_disconnect_cmd_handler+0x3c>)
1000f96a:	70d9      	strb	r1, [r3, #3]
1000f96c:	8811      	ldrh	r1, [r2, #0]
1000f96e:	8812      	ldrh	r2, [r2, #0]
1000f970:	7119      	strb	r1, [r3, #4]
1000f972:	0a12      	lsrs	r2, r2, #8
1000f974:	715a      	strb	r2, [r3, #5]
1000f976:	2201      	movs	r2, #1
1000f978:	721a      	strb	r2, [r3, #8]
1000f97a:	1892      	adds	r2, r2, r2
1000f97c:	7258      	strb	r0, [r3, #9]
1000f97e:	719a      	strb	r2, [r3, #6]
1000f980:	71dc      	strb	r4, [r3, #7]
1000f982:	1c18      	adds	r0, r3, #0
1000f984:	210a      	movs	r1, #10
1000f986:	4b04      	ldr	r3, [pc, #16]	; (1000f998 <gapc_disconnect_cmd_handler+0x40>)
1000f988:	4798      	blx	r3
1000f98a:	1c20      	adds	r0, r4, #0
1000f98c:	bd10      	pop	{r4, pc}
1000f98e:	46c0      	nop			; (mov r8, r8)
1000f990:	1001a110 	.word	0x1001a110
1000f994:	10019da0 	.word	0x10019da0
1000f998:	1000f4b1 	.word	0x1000f4b1

1000f99c <gapc_disconnect_ind>:
1000f99c:	1c02      	adds	r2, r0, #0
1000f99e:	b508      	push	{r3, lr}
1000f9a0:	7843      	ldrb	r3, [r0, #1]
1000f9a2:	7800      	ldrb	r0, [r0, #0]
1000f9a4:	021b      	lsls	r3, r3, #8
1000f9a6:	4318      	orrs	r0, r3
1000f9a8:	8008      	strh	r0, [r1, #0]
1000f9aa:	7893      	ldrb	r3, [r2, #2]
1000f9ac:	708b      	strb	r3, [r1, #2]
1000f9ae:	2100      	movs	r1, #0
1000f9b0:	4b05      	ldr	r3, [pc, #20]	; (1000f9c8 <gapc_disconnect_ind+0x2c>)
1000f9b2:	4798      	blx	r3
1000f9b4:	2807      	cmp	r0, #7
1000f9b6:	d806      	bhi.n	1000f9c6 <gapc_disconnect_ind+0x2a>
1000f9b8:	2312      	movs	r3, #18
1000f9ba:	4358      	muls	r0, r3
1000f9bc:	4b03      	ldr	r3, [pc, #12]	; (1000f9cc <gapc_disconnect_ind+0x30>)
1000f9be:	1818      	adds	r0, r3, r0
1000f9c0:	2301      	movs	r3, #1
1000f9c2:	425b      	negs	r3, r3
1000f9c4:	8143      	strh	r3, [r0, #10]
1000f9c6:	bd08      	pop	{r3, pc}
1000f9c8:	1000f681 	.word	0x1000f681
1000f9cc:	10019da2 	.word	0x10019da2

1000f9d0 <gapc_bond_cmd_handler>:
1000f9d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9d2:	9300      	str	r3, [sp, #0]
1000f9d4:	2312      	movs	r3, #18
1000f9d6:	1c04      	adds	r4, r0, #0
1000f9d8:	a808      	add	r0, sp, #32
1000f9da:	7807      	ldrb	r7, [r0, #0]
1000f9dc:	a809      	add	r0, sp, #36	; 0x24
1000f9de:	7806      	ldrb	r6, [r0, #0]
1000f9e0:	a80a      	add	r0, sp, #40	; 0x28
1000f9e2:	7805      	ldrb	r5, [r0, #0]
1000f9e4:	a80b      	add	r0, sp, #44	; 0x2c
1000f9e6:	7800      	ldrb	r0, [r0, #0]
1000f9e8:	9001      	str	r0, [sp, #4]
1000f9ea:	4810      	ldr	r0, [pc, #64]	; (1000fa2c <gapc_bond_cmd_handler+0x5c>)
1000f9ec:	7003      	strb	r3, [r0, #0]
1000f9ee:	230e      	movs	r3, #14
1000f9f0:	70c4      	strb	r4, [r0, #3]
1000f9f2:	4c0f      	ldr	r4, [pc, #60]	; (1000fa30 <gapc_bond_cmd_handler+0x60>)
1000f9f4:	7043      	strb	r3, [r0, #1]
1000f9f6:	7083      	strb	r3, [r0, #2]
1000f9f8:	8823      	ldrh	r3, [r4, #0]
1000f9fa:	8824      	ldrh	r4, [r4, #0]
1000f9fc:	7103      	strb	r3, [r0, #4]
1000f9fe:	466b      	mov	r3, sp
1000fa00:	781b      	ldrb	r3, [r3, #0]
1000fa02:	0a24      	lsrs	r4, r4, #8
1000fa04:	72c3      	strb	r3, [r0, #11]
1000fa06:	466b      	mov	r3, sp
1000fa08:	791b      	ldrb	r3, [r3, #4]
1000fa0a:	7144      	strb	r4, [r0, #5]
1000fa0c:	73c3      	strb	r3, [r0, #15]
1000fa0e:	2308      	movs	r3, #8
1000fa10:	7183      	strb	r3, [r0, #6]
1000fa12:	2300      	movs	r3, #0
1000fa14:	240a      	movs	r4, #10
1000fa16:	7241      	strb	r1, [r0, #9]
1000fa18:	71c3      	strb	r3, [r0, #7]
1000fa1a:	2110      	movs	r1, #16
1000fa1c:	4b05      	ldr	r3, [pc, #20]	; (1000fa34 <gapc_bond_cmd_handler+0x64>)
1000fa1e:	7307      	strb	r7, [r0, #12]
1000fa20:	7346      	strb	r6, [r0, #13]
1000fa22:	7385      	strb	r5, [r0, #14]
1000fa24:	7204      	strb	r4, [r0, #8]
1000fa26:	7282      	strb	r2, [r0, #10]
1000fa28:	4798      	blx	r3
1000fa2a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fa2c:	1001a110 	.word	0x1001a110
1000fa30:	10019da0 	.word	0x10019da0
1000fa34:	1000f4b1 	.word	0x1000f4b1

1000fa38 <gapc_bond_ind>:
1000fa38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa3a:	780e      	ldrb	r6, [r1, #0]
1000fa3c:	1c03      	adds	r3, r0, #0
1000fa3e:	1eb0      	subs	r0, r6, #2
1000fa40:	2805      	cmp	r0, #5
1000fa42:	d85d      	bhi.n	1000fb00 <gapc_bond_ind+0xc8>
1000fa44:	1c15      	adds	r5, r2, #0
1000fa46:	1c0c      	adds	r4, r1, #0
1000fa48:	f002 face 	bl	10011fe8 <__gnu_thumb1_case_uqi>
1000fa4c:	2f5a030d 	.word	0x2f5a030d
1000fa50:	4740      	.short	0x4740
1000fa52:	2009      	movs	r0, #9
1000fa54:	2a00      	cmp	r2, #0
1000fa56:	d054      	beq.n	1000fb02 <gapc_bond_ind+0xca>
1000fa58:	0a1b      	lsrs	r3, r3, #8
1000fa5a:	8053      	strh	r3, [r2, #2]
1000fa5c:	788b      	ldrb	r3, [r1, #2]
1000fa5e:	4829      	ldr	r0, [pc, #164]	; (1000fb04 <gapc_bond_ind+0xcc>)
1000fa60:	7113      	strb	r3, [r2, #4]
1000fa62:	2100      	movs	r1, #0
1000fa64:	e01c      	b.n	1000faa0 <gapc_bond_ind+0x68>
1000fa66:	2009      	movs	r0, #9
1000fa68:	2a00      	cmp	r2, #0
1000fa6a:	d04a      	beq.n	1000fb02 <gapc_bond_ind+0xca>
1000fa6c:	4c25      	ldr	r4, [pc, #148]	; (1000fb04 <gapc_bond_ind+0xcc>)
1000fa6e:	0a1b      	lsrs	r3, r3, #8
1000fa70:	8053      	strh	r3, [r2, #2]
1000fa72:	788b      	ldrb	r3, [r1, #2]
1000fa74:	2700      	movs	r7, #0
1000fa76:	1c10      	adds	r0, r2, #0
1000fa78:	1c21      	adds	r1, r4, #0
1000fa7a:	7013      	strb	r3, [r2, #0]
1000fa7c:	4e22      	ldr	r6, [pc, #136]	; (1000fb08 <gapc_bond_ind+0xd0>)
1000fa7e:	7117      	strb	r7, [r2, #4]
1000fa80:	312e      	adds	r1, #46	; 0x2e
1000fa82:	2217      	movs	r2, #23
1000fa84:	3032      	adds	r0, #50	; 0x32
1000fa86:	47b0      	blx	r6
1000fa88:	1c28      	adds	r0, r5, #0
1000fa8a:	1c21      	adds	r1, r4, #0
1000fa8c:	2210      	movs	r2, #16
1000fa8e:	311e      	adds	r1, #30
1000fa90:	3022      	adds	r0, #34	; 0x22
1000fa92:	47b0      	blx	r6
1000fa94:	1ca1      	adds	r1, r4, #2
1000fa96:	1da8      	adds	r0, r5, #6
1000fa98:	221c      	movs	r2, #28
1000fa9a:	47b0      	blx	r6
1000fa9c:	1c20      	adds	r0, r4, #0
1000fa9e:	1c39      	adds	r1, r7, #0
1000faa0:	2246      	movs	r2, #70	; 0x46
1000faa2:	4b1a      	ldr	r3, [pc, #104]	; (1000fb0c <gapc_bond_ind+0xd4>)
1000faa4:	4798      	blx	r3
1000faa6:	2009      	movs	r0, #9
1000faa8:	e02b      	b.n	1000fb02 <gapc_bond_ind+0xca>
1000faaa:	4d16      	ldr	r5, [pc, #88]	; (1000fb04 <gapc_bond_ind+0xcc>)
1000faac:	3102      	adds	r1, #2
1000faae:	1c28      	adds	r0, r5, #0
1000fab0:	2210      	movs	r2, #16
1000fab2:	4e15      	ldr	r6, [pc, #84]	; (1000fb08 <gapc_bond_ind+0xd0>)
1000fab4:	302e      	adds	r0, #46	; 0x2e
1000fab6:	47b0      	blx	r6
1000fab8:	1c28      	adds	r0, r5, #0
1000faba:	1c21      	adds	r1, r4, #0
1000fabc:	303f      	adds	r0, #63	; 0x3f
1000fabe:	3112      	adds	r1, #18
1000fac0:	2206      	movs	r2, #6
1000fac2:	47b0      	blx	r6
1000fac4:	7e23      	ldrb	r3, [r4, #24]
1000fac6:	353e      	adds	r5, #62	; 0x3e
1000fac8:	702b      	strb	r3, [r5, #0]
1000faca:	e019      	b.n	1000fb00 <gapc_bond_ind+0xc8>
1000facc:	480d      	ldr	r0, [pc, #52]	; (1000fb04 <gapc_bond_ind+0xcc>)
1000face:	3102      	adds	r1, #2
1000fad0:	2210      	movs	r2, #16
1000fad2:	4b0d      	ldr	r3, [pc, #52]	; (1000fb08 <gapc_bond_ind+0xd0>)
1000fad4:	301e      	adds	r0, #30
1000fad6:	4798      	blx	r3
1000fad8:	e012      	b.n	1000fb00 <gapc_bond_ind+0xc8>
1000fada:	4d0a      	ldr	r5, [pc, #40]	; (1000fb04 <gapc_bond_ind+0xcc>)
1000fadc:	3102      	adds	r1, #2
1000fade:	2210      	movs	r2, #16
1000fae0:	4e09      	ldr	r6, [pc, #36]	; (1000fb08 <gapc_bond_ind+0xd0>)
1000fae2:	1ca8      	adds	r0, r5, #2
1000fae4:	47b0      	blx	r6
1000fae6:	1c28      	adds	r0, r5, #0
1000fae8:	1c21      	adds	r1, r4, #0
1000faea:	7ce3      	ldrb	r3, [r4, #19]
1000faec:	7ca2      	ldrb	r2, [r4, #18]
1000faee:	021b      	lsls	r3, r3, #8
1000faf0:	4313      	orrs	r3, r2
1000faf2:	3014      	adds	r0, #20
1000faf4:	3114      	adds	r1, #20
1000faf6:	2208      	movs	r2, #8
1000faf8:	826b      	strh	r3, [r5, #18]
1000fafa:	47b0      	blx	r6
1000fafc:	7f23      	ldrb	r3, [r4, #28]
1000fafe:	772b      	strb	r3, [r5, #28]
1000fb00:	2000      	movs	r0, #0
1000fb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fb04:	10018e68 	.word	0x10018e68
1000fb08:	100147c3 	.word	0x100147c3
1000fb0c:	100147d5 	.word	0x100147d5

1000fb10 <gapc_bond_req_ind>:
1000fb10:	b570      	push	{r4, r5, r6, lr}
1000fb12:	780c      	ldrb	r4, [r1, #0]
1000fb14:	1c03      	adds	r3, r0, #0
1000fb16:	7849      	ldrb	r1, [r1, #1]
1000fb18:	2c07      	cmp	r4, #7
1000fb1a:	d85c      	bhi.n	1000fbd6 <gapc_bond_req_ind+0xc6>
1000fb1c:	1c20      	adds	r0, r4, #0
1000fb1e:	f002 fa63 	bl	10011fe8 <__gnu_thumb1_case_uqi>
1000fb22:	5a04      	.short	0x5a04
1000fb24:	5a0b5a5a 	.word	0x5a0b5a5a
1000fb28:	1f1f      	.short	0x1f1f
1000fb2a:	200a      	movs	r0, #10
1000fb2c:	2a00      	cmp	r2, #0
1000fb2e:	d053      	beq.n	1000fbd8 <gapc_bond_req_ind+0xc8>
1000fb30:	0a1b      	lsrs	r3, r3, #8
1000fb32:	8013      	strh	r3, [r2, #0]
1000fb34:	7091      	strb	r1, [r2, #2]
1000fb36:	e04f      	b.n	1000fbd8 <gapc_bond_req_ind+0xc8>
1000fb38:	2a00      	cmp	r2, #0
1000fb3a:	d00b      	beq.n	1000fb54 <gapc_bond_req_ind+0x44>
1000fb3c:	0a1b      	lsrs	r3, r3, #8
1000fb3e:	8013      	strh	r3, [r2, #0]
1000fb40:	2900      	cmp	r1, #0
1000fb42:	d102      	bne.n	1000fb4a <gapc_bond_req_ind+0x3a>
1000fb44:	2301      	movs	r3, #1
1000fb46:	7093      	strb	r3, [r2, #2]
1000fb48:	e004      	b.n	1000fb54 <gapc_bond_req_ind+0x44>
1000fb4a:	2300      	movs	r3, #0
1000fb4c:	7093      	strb	r3, [r2, #2]
1000fb4e:	2902      	cmp	r1, #2
1000fb50:	d102      	bne.n	1000fb58 <gapc_bond_req_ind+0x48>
1000fb52:	70d3      	strb	r3, [r2, #3]
1000fb54:	200c      	movs	r0, #12
1000fb56:	e03f      	b.n	1000fbd8 <gapc_bond_req_ind+0xc8>
1000fb58:	2901      	cmp	r1, #1
1000fb5a:	d1fb      	bne.n	1000fb54 <gapc_bond_req_ind+0x44>
1000fb5c:	70d1      	strb	r1, [r2, #3]
1000fb5e:	e7f9      	b.n	1000fb54 <gapc_bond_req_ind+0x44>
1000fb60:	2214      	movs	r2, #20
1000fb62:	481e      	ldr	r0, [pc, #120]	; (1000fbdc <gapc_bond_req_ind+0xcc>)
1000fb64:	0a1b      	lsrs	r3, r3, #8
1000fb66:	70c3      	strb	r3, [r0, #3]
1000fb68:	4b1d      	ldr	r3, [pc, #116]	; (1000fbe0 <gapc_bond_req_ind+0xd0>)
1000fb6a:	7002      	strb	r2, [r0, #0]
1000fb6c:	3a06      	subs	r2, #6
1000fb6e:	7042      	strb	r2, [r0, #1]
1000fb70:	7082      	strb	r2, [r0, #2]
1000fb72:	881a      	ldrh	r2, [r3, #0]
1000fb74:	881b      	ldrh	r3, [r3, #0]
1000fb76:	4e1b      	ldr	r6, [pc, #108]	; (1000fbe4 <gapc_bond_req_ind+0xd4>)
1000fb78:	0a1b      	lsrs	r3, r3, #8
1000fb7a:	7143      	strb	r3, [r0, #5]
1000fb7c:	2301      	movs	r3, #1
1000fb7e:	7102      	strb	r2, [r0, #4]
1000fb80:	7204      	strb	r4, [r0, #8]
1000fb82:	7243      	strb	r3, [r0, #9]
1000fb84:	1c05      	adds	r5, r0, #0
1000fb86:	1c31      	adds	r1, r6, #0
1000fb88:	300a      	adds	r0, #10
1000fb8a:	2c07      	cmp	r4, #7
1000fb8c:	d116      	bne.n	1000fbbc <gapc_bond_req_ind+0xac>
1000fb8e:	317e      	adds	r1, #126	; 0x7e
1000fb90:	2210      	movs	r2, #16
1000fb92:	4c15      	ldr	r4, [pc, #84]	; (1000fbe8 <gapc_bond_req_ind+0xd8>)
1000fb94:	47a0      	blx	r4
1000fb96:	1c33      	adds	r3, r6, #0
1000fb98:	1c31      	adds	r1, r6, #0
1000fb9a:	1c28      	adds	r0, r5, #0
1000fb9c:	338e      	adds	r3, #142	; 0x8e
1000fb9e:	881b      	ldrh	r3, [r3, #0]
1000fba0:	3190      	adds	r1, #144	; 0x90
1000fba2:	76ab      	strb	r3, [r5, #26]
1000fba4:	2208      	movs	r2, #8
1000fba6:	0a1b      	lsrs	r3, r3, #8
1000fba8:	301c      	adds	r0, #28
1000fbaa:	76eb      	strb	r3, [r5, #27]
1000fbac:	47a0      	blx	r4
1000fbae:	1c31      	adds	r1, r6, #0
1000fbb0:	3198      	adds	r1, #152	; 0x98
1000fbb2:	780a      	ldrb	r2, [r1, #0]
1000fbb4:	1d6b      	adds	r3, r5, #5
1000fbb6:	77da      	strb	r2, [r3, #31]
1000fbb8:	2125      	movs	r1, #37	; 0x25
1000fbba:	e004      	b.n	1000fbc6 <gapc_bond_req_ind+0xb6>
1000fbbc:	319a      	adds	r1, #154	; 0x9a
1000fbbe:	2210      	movs	r2, #16
1000fbc0:	4b09      	ldr	r3, [pc, #36]	; (1000fbe8 <gapc_bond_req_ind+0xd8>)
1000fbc2:	4798      	blx	r3
1000fbc4:	211a      	movs	r1, #26
1000fbc6:	1c0b      	adds	r3, r1, #0
1000fbc8:	2400      	movs	r4, #0
1000fbca:	3b08      	subs	r3, #8
1000fbcc:	71ab      	strb	r3, [r5, #6]
1000fbce:	1c28      	adds	r0, r5, #0
1000fbd0:	4b06      	ldr	r3, [pc, #24]	; (1000fbec <gapc_bond_req_ind+0xdc>)
1000fbd2:	71ec      	strb	r4, [r5, #7]
1000fbd4:	4798      	blx	r3
1000fbd6:	2000      	movs	r0, #0
1000fbd8:	bd70      	pop	{r4, r5, r6, pc}
1000fbda:	46c0      	nop			; (mov r8, r8)
1000fbdc:	1001a110 	.word	0x1001a110
1000fbe0:	10019da0 	.word	0x10019da0
1000fbe4:	10019e32 	.word	0x10019e32
1000fbe8:	100147c3 	.word	0x100147c3
1000fbec:	1000f4b1 	.word	0x1000f4b1

1000fbf0 <gapc_bond_cfm_handler_pair_resp>:
1000fbf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fbf2:	b085      	sub	sp, #20
1000fbf4:	1c07      	adds	r7, r0, #0
1000fbf6:	a80a      	add	r0, sp, #40	; 0x28
1000fbf8:	7806      	ldrb	r6, [r0, #0]
1000fbfa:	a80b      	add	r0, sp, #44	; 0x2c
1000fbfc:	7805      	ldrb	r5, [r0, #0]
1000fbfe:	a80c      	add	r0, sp, #48	; 0x30
1000fc00:	7800      	ldrb	r0, [r0, #0]
1000fc02:	2414      	movs	r4, #20
1000fc04:	9002      	str	r0, [sp, #8]
1000fc06:	a80d      	add	r0, sp, #52	; 0x34
1000fc08:	7800      	ldrb	r0, [r0, #0]
1000fc0a:	9301      	str	r3, [sp, #4]
1000fc0c:	9003      	str	r0, [sp, #12]
1000fc0e:	a80e      	add	r0, sp, #56	; 0x38
1000fc10:	8800      	ldrh	r0, [r0, #0]
1000fc12:	4684      	mov	ip, r0
1000fc14:	4812      	ldr	r0, [pc, #72]	; (1000fc60 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000fc16:	7004      	strb	r4, [r0, #0]
1000fc18:	3c06      	subs	r4, #6
1000fc1a:	7044      	strb	r4, [r0, #1]
1000fc1c:	7084      	strb	r4, [r0, #2]
1000fc1e:	4664      	mov	r4, ip
1000fc20:	70c4      	strb	r4, [r0, #3]
1000fc22:	4c10      	ldr	r4, [pc, #64]	; (1000fc64 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000fc24:	7247      	strb	r7, [r0, #9]
1000fc26:	8823      	ldrh	r3, [r4, #0]
1000fc28:	8824      	ldrh	r4, [r4, #0]
1000fc2a:	7103      	strb	r3, [r0, #4]
1000fc2c:	466b      	mov	r3, sp
1000fc2e:	791b      	ldrb	r3, [r3, #4]
1000fc30:	0a24      	lsrs	r4, r4, #8
1000fc32:	7303      	strb	r3, [r0, #12]
1000fc34:	466b      	mov	r3, sp
1000fc36:	7a1b      	ldrb	r3, [r3, #8]
1000fc38:	7144      	strb	r4, [r0, #5]
1000fc3a:	73c3      	strb	r3, [r0, #15]
1000fc3c:	466b      	mov	r3, sp
1000fc3e:	7b1b      	ldrb	r3, [r3, #12]
1000fc40:	2401      	movs	r4, #1
1000fc42:	7403      	strb	r3, [r0, #16]
1000fc44:	2309      	movs	r3, #9
1000fc46:	7183      	strb	r3, [r0, #6]
1000fc48:	2300      	movs	r3, #0
1000fc4a:	7204      	strb	r4, [r0, #8]
1000fc4c:	7281      	strb	r1, [r0, #10]
1000fc4e:	72c2      	strb	r2, [r0, #11]
1000fc50:	7346      	strb	r6, [r0, #13]
1000fc52:	7385      	strb	r5, [r0, #14]
1000fc54:	71c3      	strb	r3, [r0, #7]
1000fc56:	2111      	movs	r1, #17
1000fc58:	4b03      	ldr	r3, [pc, #12]	; (1000fc68 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000fc5a:	4798      	blx	r3
1000fc5c:	b005      	add	sp, #20
1000fc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc60:	1001a110 	.word	0x1001a110
1000fc64:	10019da0 	.word	0x10019da0
1000fc68:	1000f4b1 	.word	0x1000f4b1

1000fc6c <gapc_bond_cfm_handler_key_exch>:
1000fc6c:	b538      	push	{r3, r4, r5, lr}
1000fc6e:	2514      	movs	r5, #20
1000fc70:	4c0d      	ldr	r4, [pc, #52]	; (1000fca8 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000fc72:	70e3      	strb	r3, [r4, #3]
1000fc74:	4b0d      	ldr	r3, [pc, #52]	; (1000fcac <gapc_bond_cfm_handler_key_exch+0x40>)
1000fc76:	7025      	strb	r5, [r4, #0]
1000fc78:	3d06      	subs	r5, #6
1000fc7a:	7065      	strb	r5, [r4, #1]
1000fc7c:	70a5      	strb	r5, [r4, #2]
1000fc7e:	881d      	ldrh	r5, [r3, #0]
1000fc80:	881b      	ldrh	r3, [r3, #0]
1000fc82:	7220      	strb	r0, [r4, #8]
1000fc84:	0a1b      	lsrs	r3, r3, #8
1000fc86:	7163      	strb	r3, [r4, #5]
1000fc88:	7261      	strb	r1, [r4, #9]
1000fc8a:	4b09      	ldr	r3, [pc, #36]	; (1000fcb0 <gapc_bond_cfm_handler_key_exch+0x44>)
1000fc8c:	1c11      	adds	r1, r2, #0
1000fc8e:	4809      	ldr	r0, [pc, #36]	; (1000fcb4 <gapc_bond_cfm_handler_key_exch+0x48>)
1000fc90:	2210      	movs	r2, #16
1000fc92:	7125      	strb	r5, [r4, #4]
1000fc94:	4798      	blx	r3
1000fc96:	2312      	movs	r3, #18
1000fc98:	71a3      	strb	r3, [r4, #6]
1000fc9a:	2300      	movs	r3, #0
1000fc9c:	1c20      	adds	r0, r4, #0
1000fc9e:	71e3      	strb	r3, [r4, #7]
1000fca0:	211a      	movs	r1, #26
1000fca2:	4b05      	ldr	r3, [pc, #20]	; (1000fcb8 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000fca4:	4798      	blx	r3
1000fca6:	bd38      	pop	{r3, r4, r5, pc}
1000fca8:	1001a110 	.word	0x1001a110
1000fcac:	10019da0 	.word	0x10019da0
1000fcb0:	100147c3 	.word	0x100147c3
1000fcb4:	1001a11a 	.word	0x1001a11a
1000fcb8:	1000f4b1 	.word	0x1000f4b1

1000fcbc <gapc_security_cmd_handler>:
1000fcbc:	221a      	movs	r2, #26
1000fcbe:	b508      	push	{r3, lr}
1000fcc0:	4b0b      	ldr	r3, [pc, #44]	; (1000fcf0 <gapc_security_cmd_handler+0x34>)
1000fcc2:	701a      	strb	r2, [r3, #0]
1000fcc4:	3a0c      	subs	r2, #12
1000fcc6:	705a      	strb	r2, [r3, #1]
1000fcc8:	709a      	strb	r2, [r3, #2]
1000fcca:	4a0a      	ldr	r2, [pc, #40]	; (1000fcf4 <gapc_security_cmd_handler+0x38>)
1000fccc:	70d8      	strb	r0, [r3, #3]
1000fcce:	8810      	ldrh	r0, [r2, #0]
1000fcd0:	8812      	ldrh	r2, [r2, #0]
1000fcd2:	7118      	strb	r0, [r3, #4]
1000fcd4:	0a12      	lsrs	r2, r2, #8
1000fcd6:	715a      	strb	r2, [r3, #5]
1000fcd8:	220c      	movs	r2, #12
1000fcda:	721a      	strb	r2, [r3, #8]
1000fcdc:	3a0a      	subs	r2, #10
1000fcde:	719a      	strb	r2, [r3, #6]
1000fce0:	2200      	movs	r2, #0
1000fce2:	7259      	strb	r1, [r3, #9]
1000fce4:	71da      	strb	r2, [r3, #7]
1000fce6:	1c18      	adds	r0, r3, #0
1000fce8:	210a      	movs	r1, #10
1000fcea:	4b03      	ldr	r3, [pc, #12]	; (1000fcf8 <gapc_security_cmd_handler+0x3c>)
1000fcec:	4798      	blx	r3
1000fcee:	bd08      	pop	{r3, pc}
1000fcf0:	1001a110 	.word	0x1001a110
1000fcf4:	10019da0 	.word	0x10019da0
1000fcf8:	1000f4b1 	.word	0x1000f4b1

1000fcfc <gapc_encrypt_cmd_handler>:
1000fcfc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fcfe:	2500      	movs	r5, #0
1000fd00:	b089      	sub	sp, #36	; 0x24
1000fd02:	9306      	str	r3, [sp, #24]
1000fd04:	ab0e      	add	r3, sp, #56	; 0x38
1000fd06:	781b      	ldrb	r3, [r3, #0]
1000fd08:	1c17      	adds	r7, r2, #0
1000fd0a:	9307      	str	r3, [sp, #28]
1000fd0c:	ab0f      	add	r3, sp, #60	; 0x3c
1000fd0e:	781b      	ldrb	r3, [r3, #0]
1000fd10:	4a19      	ldr	r2, [pc, #100]	; (1000fd78 <gapc_encrypt_cmd_handler+0x7c>)
1000fd12:	1c06      	adds	r6, r0, #0
1000fd14:	9105      	str	r1, [sp, #20]
1000fd16:	9300      	str	r3, [sp, #0]
1000fd18:	9002      	str	r0, [sp, #8]
1000fd1a:	1c29      	adds	r1, r5, #0
1000fd1c:	1c2b      	adds	r3, r5, #0
1000fd1e:	9501      	str	r5, [sp, #4]
1000fd20:	1c10      	adds	r0, r2, #0
1000fd22:	4c16      	ldr	r4, [pc, #88]	; (1000fd7c <gapc_encrypt_cmd_handler+0x80>)
1000fd24:	47a0      	blx	r4
1000fd26:	2316      	movs	r3, #22
1000fd28:	4c15      	ldr	r4, [pc, #84]	; (1000fd80 <gapc_encrypt_cmd_handler+0x84>)
1000fd2a:	9905      	ldr	r1, [sp, #20]
1000fd2c:	7023      	strb	r3, [r4, #0]
1000fd2e:	3b08      	subs	r3, #8
1000fd30:	7063      	strb	r3, [r4, #1]
1000fd32:	70a3      	strb	r3, [r4, #2]
1000fd34:	4b13      	ldr	r3, [pc, #76]	; (1000fd84 <gapc_encrypt_cmd_handler+0x88>)
1000fd36:	70e6      	strb	r6, [r4, #3]
1000fd38:	881a      	ldrh	r2, [r3, #0]
1000fd3a:	881b      	ldrh	r3, [r3, #0]
1000fd3c:	7122      	strb	r2, [r4, #4]
1000fd3e:	0a1b      	lsrs	r3, r3, #8
1000fd40:	7163      	strb	r3, [r4, #5]
1000fd42:	230b      	movs	r3, #11
1000fd44:	4e10      	ldr	r6, [pc, #64]	; (1000fd88 <gapc_encrypt_cmd_handler+0x8c>)
1000fd46:	2210      	movs	r2, #16
1000fd48:	4810      	ldr	r0, [pc, #64]	; (1000fd8c <gapc_encrypt_cmd_handler+0x90>)
1000fd4a:	7223      	strb	r3, [r4, #8]
1000fd4c:	7265      	strb	r5, [r4, #9]
1000fd4e:	47b0      	blx	r6
1000fd50:	0a3b      	lsrs	r3, r7, #8
1000fd52:	9906      	ldr	r1, [sp, #24]
1000fd54:	2208      	movs	r2, #8
1000fd56:	480e      	ldr	r0, [pc, #56]	; (1000fd90 <gapc_encrypt_cmd_handler+0x94>)
1000fd58:	76e3      	strb	r3, [r4, #27]
1000fd5a:	76a7      	strb	r7, [r4, #26]
1000fd5c:	47b0      	blx	r6
1000fd5e:	466a      	mov	r2, sp
1000fd60:	7f12      	ldrb	r2, [r2, #28]
1000fd62:	1d63      	adds	r3, r4, #5
1000fd64:	77da      	strb	r2, [r3, #31]
1000fd66:	231d      	movs	r3, #29
1000fd68:	1c20      	adds	r0, r4, #0
1000fd6a:	71a3      	strb	r3, [r4, #6]
1000fd6c:	2125      	movs	r1, #37	; 0x25
1000fd6e:	4b09      	ldr	r3, [pc, #36]	; (1000fd94 <gapc_encrypt_cmd_handler+0x98>)
1000fd70:	71e5      	strb	r5, [r4, #7]
1000fd72:	4798      	blx	r3
1000fd74:	b009      	add	sp, #36	; 0x24
1000fd76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fd78:	10018e48 	.word	0x10018e48
1000fd7c:	1000f7b5 	.word	0x1000f7b5
1000fd80:	1001a110 	.word	0x1001a110
1000fd84:	10019da0 	.word	0x10019da0
1000fd88:	100147c3 	.word	0x100147c3
1000fd8c:	1001a11a 	.word	0x1001a11a
1000fd90:	1001a12c 	.word	0x1001a12c
1000fd94:	1000f4b1 	.word	0x1000f4b1

1000fd98 <gapc_encrypt_req_ind>:
1000fd98:	b508      	push	{r3, lr}
1000fd9a:	0a00      	lsrs	r0, r0, #8
1000fd9c:	8010      	strh	r0, [r2, #0]
1000fd9e:	784b      	ldrb	r3, [r1, #1]
1000fda0:	7808      	ldrb	r0, [r1, #0]
1000fda2:	021b      	lsls	r3, r3, #8
1000fda4:	4303      	orrs	r3, r0
1000fda6:	8053      	strh	r3, [r2, #2]
1000fda8:	1d10      	adds	r0, r2, #4
1000fdaa:	3102      	adds	r1, #2
1000fdac:	2208      	movs	r2, #8
1000fdae:	4b01      	ldr	r3, [pc, #4]	; (1000fdb4 <gapc_encrypt_req_ind+0x1c>)
1000fdb0:	4798      	blx	r3
1000fdb2:	bd08      	pop	{r3, pc}
1000fdb4:	100147c3 	.word	0x100147c3

1000fdb8 <gapc_encrypt_cfm_handler>:
1000fdb8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdba:	2500      	movs	r5, #0
1000fdbc:	b087      	sub	sp, #28
1000fdbe:	9304      	str	r3, [sp, #16]
1000fdc0:	ab0c      	add	r3, sp, #48	; 0x30
1000fdc2:	781b      	ldrb	r3, [r3, #0]
1000fdc4:	1c17      	adds	r7, r2, #0
1000fdc6:	4a15      	ldr	r2, [pc, #84]	; (1000fe1c <gapc_encrypt_cfm_handler+0x64>)
1000fdc8:	1c06      	adds	r6, r0, #0
1000fdca:	9305      	str	r3, [sp, #20]
1000fdcc:	9100      	str	r1, [sp, #0]
1000fdce:	9002      	str	r0, [sp, #8]
1000fdd0:	1c29      	adds	r1, r5, #0
1000fdd2:	1c2b      	adds	r3, r5, #0
1000fdd4:	9501      	str	r5, [sp, #4]
1000fdd6:	1c10      	adds	r0, r2, #0
1000fdd8:	4c11      	ldr	r4, [pc, #68]	; (1000fe20 <gapc_encrypt_cfm_handler+0x68>)
1000fdda:	47a0      	blx	r4
1000fddc:	2318      	movs	r3, #24
1000fdde:	4c11      	ldr	r4, [pc, #68]	; (1000fe24 <gapc_encrypt_cfm_handler+0x6c>)
1000fde0:	9904      	ldr	r1, [sp, #16]
1000fde2:	7023      	strb	r3, [r4, #0]
1000fde4:	3b0a      	subs	r3, #10
1000fde6:	7063      	strb	r3, [r4, #1]
1000fde8:	70a3      	strb	r3, [r4, #2]
1000fdea:	4b0f      	ldr	r3, [pc, #60]	; (1000fe28 <gapc_encrypt_cfm_handler+0x70>)
1000fdec:	480f      	ldr	r0, [pc, #60]	; (1000fe2c <gapc_encrypt_cfm_handler+0x74>)
1000fdee:	881a      	ldrh	r2, [r3, #0]
1000fdf0:	881b      	ldrh	r3, [r3, #0]
1000fdf2:	7122      	strb	r2, [r4, #4]
1000fdf4:	0a1b      	lsrs	r3, r3, #8
1000fdf6:	7163      	strb	r3, [r4, #5]
1000fdf8:	2210      	movs	r2, #16
1000fdfa:	4b0d      	ldr	r3, [pc, #52]	; (1000fe30 <gapc_encrypt_cfm_handler+0x78>)
1000fdfc:	70e6      	strb	r6, [r4, #3]
1000fdfe:	7227      	strb	r7, [r4, #8]
1000fe00:	4798      	blx	r3
1000fe02:	466b      	mov	r3, sp
1000fe04:	7d1b      	ldrb	r3, [r3, #20]
1000fe06:	1c20      	adds	r0, r4, #0
1000fe08:	7663      	strb	r3, [r4, #25]
1000fe0a:	2312      	movs	r3, #18
1000fe0c:	211a      	movs	r1, #26
1000fe0e:	71a3      	strb	r3, [r4, #6]
1000fe10:	4b08      	ldr	r3, [pc, #32]	; (1000fe34 <gapc_encrypt_cfm_handler+0x7c>)
1000fe12:	71e5      	strb	r5, [r4, #7]
1000fe14:	4798      	blx	r3
1000fe16:	b007      	add	sp, #28
1000fe18:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fe1a:	46c0      	nop			; (mov r8, r8)
1000fe1c:	10018e58 	.word	0x10018e58
1000fe20:	1000f7b5 	.word	0x1000f7b5
1000fe24:	1001a110 	.word	0x1001a110
1000fe28:	10019da0 	.word	0x10019da0
1000fe2c:	1001a119 	.word	0x1001a119
1000fe30:	100147c3 	.word	0x100147c3
1000fe34:	1000f4b1 	.word	0x1000f4b1

1000fe38 <gapc_encrypt_ind>:
1000fe38:	780b      	ldrb	r3, [r1, #0]
1000fe3a:	0a00      	lsrs	r0, r0, #8
1000fe3c:	70d3      	strb	r3, [r2, #3]
1000fe3e:	2300      	movs	r3, #0
1000fe40:	8010      	strh	r0, [r2, #0]
1000fe42:	7093      	strb	r3, [r2, #2]
1000fe44:	4770      	bx	lr
	...

1000fe48 <gapc_param_update_cfm_handler>:
1000fe48:	b538      	push	{r3, r4, r5, lr}
1000fe4a:	2410      	movs	r4, #16
1000fe4c:	1c05      	adds	r5, r0, #0
1000fe4e:	480e      	ldr	r0, [pc, #56]	; (1000fe88 <gapc_param_update_cfm_handler+0x40>)
1000fe50:	7004      	strb	r4, [r0, #0]
1000fe52:	3c02      	subs	r4, #2
1000fe54:	7044      	strb	r4, [r0, #1]
1000fe56:	7084      	strb	r4, [r0, #2]
1000fe58:	4c0c      	ldr	r4, [pc, #48]	; (1000fe8c <gapc_param_update_cfm_handler+0x44>)
1000fe5a:	70c5      	strb	r5, [r0, #3]
1000fe5c:	8825      	ldrh	r5, [r4, #0]
1000fe5e:	8824      	ldrh	r4, [r4, #0]
1000fe60:	72c3      	strb	r3, [r0, #11]
1000fe62:	0a1b      	lsrs	r3, r3, #8
1000fe64:	0a24      	lsrs	r4, r4, #8
1000fe66:	7303      	strb	r3, [r0, #12]
1000fe68:	2305      	movs	r3, #5
1000fe6a:	7144      	strb	r4, [r0, #5]
1000fe6c:	2400      	movs	r4, #0
1000fe6e:	7201      	strb	r1, [r0, #8]
1000fe70:	7242      	strb	r2, [r0, #9]
1000fe72:	7183      	strb	r3, [r0, #6]
1000fe74:	0a12      	lsrs	r2, r2, #8
1000fe76:	210d      	movs	r1, #13
1000fe78:	4b05      	ldr	r3, [pc, #20]	; (1000fe90 <gapc_param_update_cfm_handler+0x48>)
1000fe7a:	7105      	strb	r5, [r0, #4]
1000fe7c:	7282      	strb	r2, [r0, #10]
1000fe7e:	71c4      	strb	r4, [r0, #7]
1000fe80:	4798      	blx	r3
1000fe82:	1c20      	adds	r0, r4, #0
1000fe84:	bd38      	pop	{r3, r4, r5, pc}
1000fe86:	46c0      	nop			; (mov r8, r8)
1000fe88:	1001a110 	.word	0x1001a110
1000fe8c:	10019da0 	.word	0x10019da0
1000fe90:	1000f4b1 	.word	0x1000f4b1

1000fe94 <gapc_param_updated_ind>:
1000fe94:	2300      	movs	r3, #0
1000fe96:	0a00      	lsrs	r0, r0, #8
1000fe98:	8010      	strh	r0, [r2, #0]
1000fe9a:	7093      	strb	r3, [r2, #2]
1000fe9c:	784b      	ldrb	r3, [r1, #1]
1000fe9e:	7808      	ldrb	r0, [r1, #0]
1000fea0:	021b      	lsls	r3, r3, #8
1000fea2:	4303      	orrs	r3, r0
1000fea4:	8093      	strh	r3, [r2, #4]
1000fea6:	78cb      	ldrb	r3, [r1, #3]
1000fea8:	7888      	ldrb	r0, [r1, #2]
1000feaa:	021b      	lsls	r3, r3, #8
1000feac:	4303      	orrs	r3, r0
1000feae:	80d3      	strh	r3, [r2, #6]
1000feb0:	794b      	ldrb	r3, [r1, #5]
1000feb2:	7909      	ldrb	r1, [r1, #4]
1000feb4:	021b      	lsls	r3, r3, #8
1000feb6:	430b      	orrs	r3, r1
1000feb8:	2007      	movs	r0, #7
1000feba:	8113      	strh	r3, [r2, #8]
1000febc:	4770      	bx	lr

1000febe <gapc_param_updated_req_ind>:
1000febe:	0a00      	lsrs	r0, r0, #8
1000fec0:	8010      	strh	r0, [r2, #0]
1000fec2:	784b      	ldrb	r3, [r1, #1]
1000fec4:	7808      	ldrb	r0, [r1, #0]
1000fec6:	021b      	lsls	r3, r3, #8
1000fec8:	4303      	orrs	r3, r0
1000feca:	8053      	strh	r3, [r2, #2]
1000fecc:	78cb      	ldrb	r3, [r1, #3]
1000fece:	7888      	ldrb	r0, [r1, #2]
1000fed0:	021b      	lsls	r3, r3, #8
1000fed2:	4303      	orrs	r3, r0
1000fed4:	8093      	strh	r3, [r2, #4]
1000fed6:	794b      	ldrb	r3, [r1, #5]
1000fed8:	7908      	ldrb	r0, [r1, #4]
1000feda:	021b      	lsls	r3, r3, #8
1000fedc:	4303      	orrs	r3, r0
1000fede:	80d3      	strh	r3, [r2, #6]
1000fee0:	79cb      	ldrb	r3, [r1, #7]
1000fee2:	7989      	ldrb	r1, [r1, #6]
1000fee4:	021b      	lsls	r3, r3, #8
1000fee6:	430b      	orrs	r3, r1
1000fee8:	2008      	movs	r0, #8
1000feea:	8113      	strh	r3, [r2, #8]
1000feec:	4770      	bx	lr
	...

1000fef0 <gapc_dev_info_req_ind_handler>:
1000fef0:	b508      	push	{r3, lr}
1000fef2:	1c0b      	adds	r3, r1, #0
1000fef4:	0a01      	lsrs	r1, r0, #8
1000fef6:	8011      	strh	r1, [r2, #0]
1000fef8:	7818      	ldrb	r0, [r3, #0]
1000fefa:	7090      	strb	r0, [r2, #2]
1000fefc:	2800      	cmp	r0, #0
1000fefe:	d104      	bne.n	1000ff0a <gapc_dev_info_req_ind_handler+0x1a>
1000ff00:	4b03      	ldr	r3, [pc, #12]	; (1000ff10 <gapc_dev_info_req_ind_handler+0x20>)
1000ff02:	33aa      	adds	r3, #170	; 0xaa
1000ff04:	881b      	ldrh	r3, [r3, #0]
1000ff06:	2b00      	cmp	r3, #0
1000ff08:	d001      	beq.n	1000ff0e <gapc_dev_info_req_ind_handler+0x1e>
1000ff0a:	4b02      	ldr	r3, [pc, #8]	; (1000ff14 <gapc_dev_info_req_ind_handler+0x24>)
1000ff0c:	4798      	blx	r3
1000ff0e:	bd08      	pop	{r3, pc}
1000ff10:	10019e32 	.word	0x10019e32
1000ff14:	1000f5c1 	.word	0x1000f5c1

1000ff18 <gapc_sec_req_ind>:
1000ff18:	0a00      	lsrs	r0, r0, #8
1000ff1a:	8010      	strh	r0, [r2, #0]
1000ff1c:	7809      	ldrb	r1, [r1, #0]
1000ff1e:	2301      	movs	r3, #1
1000ff20:	1c08      	adds	r0, r1, #0
1000ff22:	0889      	lsrs	r1, r1, #2
1000ff24:	4018      	ands	r0, r3
1000ff26:	400b      	ands	r3, r1
1000ff28:	70d0      	strb	r0, [r2, #3]
1000ff2a:	7113      	strb	r3, [r2, #4]
1000ff2c:	4770      	bx	lr

1000ff2e <gapc_sign_counter_ind_handler>:
1000ff2e:	0a00      	lsrs	r0, r0, #8
1000ff30:	8010      	strh	r0, [r2, #0]
1000ff32:	784b      	ldrb	r3, [r1, #1]
1000ff34:	0218      	lsls	r0, r3, #8
1000ff36:	788b      	ldrb	r3, [r1, #2]
1000ff38:	041b      	lsls	r3, r3, #16
1000ff3a:	4303      	orrs	r3, r0
1000ff3c:	7808      	ldrb	r0, [r1, #0]
1000ff3e:	4303      	orrs	r3, r0
1000ff40:	78c8      	ldrb	r0, [r1, #3]
1000ff42:	0600      	lsls	r0, r0, #24
1000ff44:	4303      	orrs	r3, r0
1000ff46:	6053      	str	r3, [r2, #4]
1000ff48:	794b      	ldrb	r3, [r1, #5]
1000ff4a:	0218      	lsls	r0, r3, #8
1000ff4c:	798b      	ldrb	r3, [r1, #6]
1000ff4e:	041b      	lsls	r3, r3, #16
1000ff50:	4303      	orrs	r3, r0
1000ff52:	7908      	ldrb	r0, [r1, #4]
1000ff54:	79c9      	ldrb	r1, [r1, #7]
1000ff56:	4303      	orrs	r3, r0
1000ff58:	0609      	lsls	r1, r1, #24
1000ff5a:	430b      	orrs	r3, r1
1000ff5c:	2000      	movs	r0, #0
1000ff5e:	6093      	str	r3, [r2, #8]
1000ff60:	4770      	bx	lr
	...

1000ff64 <gapc_peer_att_info_ind_handler>:
1000ff64:	b510      	push	{r4, lr}
1000ff66:	0a00      	lsrs	r0, r0, #8
1000ff68:	8010      	strh	r0, [r2, #0]
1000ff6a:	7808      	ldrb	r0, [r1, #0]
1000ff6c:	7090      	strb	r0, [r2, #2]
1000ff6e:	788b      	ldrb	r3, [r1, #2]
1000ff70:	784c      	ldrb	r4, [r1, #1]
1000ff72:	021b      	lsls	r3, r3, #8
1000ff74:	4323      	orrs	r3, r4
1000ff76:	8093      	strh	r3, [r2, #4]
1000ff78:	2801      	cmp	r0, #1
1000ff7a:	d027      	beq.n	1000ffcc <gapc_peer_att_info_ind_handler+0x68>
1000ff7c:	2800      	cmp	r0, #0
1000ff7e:	d017      	beq.n	1000ffb0 <gapc_peer_att_info_ind_handler+0x4c>
1000ff80:	2802      	cmp	r0, #2
1000ff82:	d12a      	bne.n	1000ffda <gapc_peer_att_info_ind_handler+0x76>
1000ff84:	790b      	ldrb	r3, [r1, #4]
1000ff86:	78c8      	ldrb	r0, [r1, #3]
1000ff88:	021b      	lsls	r3, r3, #8
1000ff8a:	4303      	orrs	r3, r0
1000ff8c:	8113      	strh	r3, [r2, #8]
1000ff8e:	798b      	ldrb	r3, [r1, #6]
1000ff90:	7948      	ldrb	r0, [r1, #5]
1000ff92:	021b      	lsls	r3, r3, #8
1000ff94:	4303      	orrs	r3, r0
1000ff96:	80d3      	strh	r3, [r2, #6]
1000ff98:	7a0b      	ldrb	r3, [r1, #8]
1000ff9a:	79c8      	ldrb	r0, [r1, #7]
1000ff9c:	021b      	lsls	r3, r3, #8
1000ff9e:	4303      	orrs	r3, r0
1000ffa0:	8193      	strh	r3, [r2, #12]
1000ffa2:	7a8b      	ldrb	r3, [r1, #10]
1000ffa4:	7a49      	ldrb	r1, [r1, #9]
1000ffa6:	021b      	lsls	r3, r3, #8
1000ffa8:	430b      	orrs	r3, r1
1000ffaa:	8153      	strh	r3, [r2, #10]
1000ffac:	2306      	movs	r3, #6
1000ffae:	e013      	b.n	1000ffd8 <gapc_peer_att_info_ind_handler+0x74>
1000ffb0:	1c14      	adds	r4, r2, #0
1000ffb2:	1c20      	adds	r0, r4, #0
1000ffb4:	790a      	ldrb	r2, [r1, #4]
1000ffb6:	78cb      	ldrb	r3, [r1, #3]
1000ffb8:	0212      	lsls	r2, r2, #8
1000ffba:	431a      	orrs	r2, r3
1000ffbc:	80e2      	strh	r2, [r4, #6]
1000ffbe:	4b07      	ldr	r3, [pc, #28]	; (1000ffdc <gapc_peer_att_info_ind_handler+0x78>)
1000ffc0:	3008      	adds	r0, #8
1000ffc2:	3105      	adds	r1, #5
1000ffc4:	4798      	blx	r3
1000ffc6:	2302      	movs	r3, #2
1000ffc8:	70a3      	strb	r3, [r4, #2]
1000ffca:	e006      	b.n	1000ffda <gapc_peer_att_info_ind_handler+0x76>
1000ffcc:	790b      	ldrb	r3, [r1, #4]
1000ffce:	78c9      	ldrb	r1, [r1, #3]
1000ffd0:	021b      	lsls	r3, r3, #8
1000ffd2:	430b      	orrs	r3, r1
1000ffd4:	80d3      	strh	r3, [r2, #6]
1000ffd6:	2305      	movs	r3, #5
1000ffd8:	7093      	strb	r3, [r2, #2]
1000ffda:	bd10      	pop	{r4, pc}
1000ffdc:	100147c3 	.word	0x100147c3

1000ffe0 <gapc_con_channel_map_ind_handler>:
1000ffe0:	b508      	push	{r3, lr}
1000ffe2:	2300      	movs	r3, #0
1000ffe4:	0a00      	lsrs	r0, r0, #8
1000ffe6:	7013      	strb	r3, [r2, #0]
1000ffe8:	8050      	strh	r0, [r2, #2]
1000ffea:	4b02      	ldr	r3, [pc, #8]	; (1000fff4 <gapc_con_channel_map_ind_handler+0x14>)
1000ffec:	1d10      	adds	r0, r2, #4
1000ffee:	2205      	movs	r2, #5
1000fff0:	4798      	blx	r3
1000fff2:	bd08      	pop	{r3, pc}
1000fff4:	100147c3 	.word	0x100147c3

1000fff8 <gapc_lecb_connected>:
1000fff8:	7843      	ldrb	r3, [r0, #1]
1000fffa:	7802      	ldrb	r2, [r0, #0]
1000fffc:	021b      	lsls	r3, r3, #8
1000fffe:	4313      	orrs	r3, r2
10010000:	800b      	strh	r3, [r1, #0]
10010002:	78c3      	ldrb	r3, [r0, #3]
10010004:	7882      	ldrb	r2, [r0, #2]
10010006:	021b      	lsls	r3, r3, #8
10010008:	4313      	orrs	r3, r2
1001000a:	804b      	strh	r3, [r1, #2]
1001000c:	7943      	ldrb	r3, [r0, #5]
1001000e:	7902      	ldrb	r2, [r0, #4]
10010010:	021b      	lsls	r3, r3, #8
10010012:	4313      	orrs	r3, r2
10010014:	808b      	strh	r3, [r1, #4]
10010016:	79c3      	ldrb	r3, [r0, #7]
10010018:	7982      	ldrb	r2, [r0, #6]
1001001a:	021b      	lsls	r3, r3, #8
1001001c:	4313      	orrs	r3, r2
1001001e:	80cb      	strh	r3, [r1, #6]
10010020:	2300      	movs	r3, #0
10010022:	720b      	strb	r3, [r1, #8]
10010024:	4770      	bx	lr

10010026 <gapc_lecb_disconnected>:
10010026:	7843      	ldrb	r3, [r0, #1]
10010028:	7802      	ldrb	r2, [r0, #0]
1001002a:	021b      	lsls	r3, r3, #8
1001002c:	4313      	orrs	r3, r2
1001002e:	800b      	strh	r3, [r1, #0]
10010030:	78c3      	ldrb	r3, [r0, #3]
10010032:	7882      	ldrb	r2, [r0, #2]
10010034:	021b      	lsls	r3, r3, #8
10010036:	4313      	orrs	r3, r2
10010038:	804b      	strh	r3, [r1, #2]
1001003a:	4770      	bx	lr

1001003c <gapc_lecb_connect_req_ind>:
1001003c:	7843      	ldrb	r3, [r0, #1]
1001003e:	7802      	ldrb	r2, [r0, #0]
10010040:	021b      	lsls	r3, r3, #8
10010042:	4313      	orrs	r3, r2
10010044:	800b      	strh	r3, [r1, #0]
10010046:	78c3      	ldrb	r3, [r0, #3]
10010048:	7882      	ldrb	r2, [r0, #2]
1001004a:	021b      	lsls	r3, r3, #8
1001004c:	4313      	orrs	r3, r2
1001004e:	804b      	strh	r3, [r1, #2]
10010050:	7943      	ldrb	r3, [r0, #5]
10010052:	7902      	ldrb	r2, [r0, #4]
10010054:	021b      	lsls	r3, r3, #8
10010056:	4313      	orrs	r3, r2
10010058:	808b      	strh	r3, [r1, #4]
1001005a:	79c3      	ldrb	r3, [r0, #7]
1001005c:	7982      	ldrb	r2, [r0, #6]
1001005e:	021b      	lsls	r3, r3, #8
10010060:	4313      	orrs	r3, r2
10010062:	80cb      	strh	r3, [r1, #6]
10010064:	4770      	bx	lr

10010066 <gapc_lecb_add_credit_resp_handler>:
10010066:	7843      	ldrb	r3, [r0, #1]
10010068:	7802      	ldrb	r2, [r0, #0]
1001006a:	021b      	lsls	r3, r3, #8
1001006c:	4313      	orrs	r3, r2
1001006e:	800b      	strh	r3, [r1, #0]
10010070:	78c3      	ldrb	r3, [r0, #3]
10010072:	7882      	ldrb	r2, [r0, #2]
10010074:	021b      	lsls	r3, r3, #8
10010076:	4313      	orrs	r3, r2
10010078:	804b      	strh	r3, [r1, #2]
1001007a:	7943      	ldrb	r3, [r0, #5]
1001007c:	7902      	ldrb	r2, [r0, #4]
1001007e:	021b      	lsls	r3, r3, #8
10010080:	4313      	orrs	r3, r2
10010082:	808b      	strh	r3, [r1, #4]
10010084:	4770      	bx	lr
	...

10010088 <gapm_reset_req_handler>:
10010088:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001008a:	466b      	mov	r3, sp
1001008c:	4915      	ldr	r1, [pc, #84]	; (100100e4 <gapm_reset_req_handler+0x5c>)
1001008e:	4816      	ldr	r0, [pc, #88]	; (100100e8 <gapm_reset_req_handler+0x60>)
10010090:	880c      	ldrh	r4, [r1, #0]
10010092:	8809      	ldrh	r1, [r1, #0]
10010094:	1ddd      	adds	r5, r3, #7
10010096:	0a09      	lsrs	r1, r1, #8
10010098:	2300      	movs	r3, #0
1001009a:	2202      	movs	r2, #2
1001009c:	7141      	strb	r1, [r0, #5]
1001009e:	26d0      	movs	r6, #208	; 0xd0
100100a0:	2101      	movs	r1, #1
100100a2:	7104      	strb	r4, [r0, #4]
100100a4:	4c11      	ldr	r4, [pc, #68]	; (100100ec <gapm_reset_req_handler+0x64>)
100100a6:	702b      	strb	r3, [r5, #0]
100100a8:	7002      	strb	r2, [r0, #0]
100100aa:	70c3      	strb	r3, [r0, #3]
100100ac:	320b      	adds	r2, #11
100100ae:	7201      	strb	r1, [r0, #8]
100100b0:	7181      	strb	r1, [r0, #6]
100100b2:	71c3      	strb	r3, [r0, #7]
100100b4:	3108      	adds	r1, #8
100100b6:	4b0e      	ldr	r3, [pc, #56]	; (100100f0 <gapm_reset_req_handler+0x68>)
100100b8:	0136      	lsls	r6, r6, #4
100100ba:	7042      	strb	r2, [r0, #1]
100100bc:	7082      	strb	r2, [r0, #2]
100100be:	80a2      	strh	r2, [r4, #4]
100100c0:	8026      	strh	r6, [r4, #0]
100100c2:	4798      	blx	r3
100100c4:	1c28      	adds	r0, r5, #0
100100c6:	4b0b      	ldr	r3, [pc, #44]	; (100100f4 <gapm_reset_req_handler+0x6c>)
100100c8:	4798      	blx	r3
100100ca:	782b      	ldrb	r3, [r5, #0]
100100cc:	20e2      	movs	r0, #226	; 0xe2
100100ce:	2b00      	cmp	r3, #0
100100d0:	d106      	bne.n	100100e0 <gapm_reset_req_handler+0x58>
100100d2:	68a3      	ldr	r3, [r4, #8]
100100d4:	20e2      	movs	r0, #226	; 0xe2
100100d6:	781a      	ldrb	r2, [r3, #0]
100100d8:	785b      	ldrb	r3, [r3, #1]
100100da:	2a01      	cmp	r2, #1
100100dc:	d100      	bne.n	100100e0 <gapm_reset_req_handler+0x58>
100100de:	1c18      	adds	r0, r3, #0
100100e0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100100e2:	46c0      	nop			; (mov r8, r8)
100100e4:	10019da0 	.word	0x10019da0
100100e8:	1001a110 	.word	0x1001a110
100100ec:	10019d94 	.word	0x10019d94
100100f0:	1000f4b1 	.word	0x1000f4b1
100100f4:	1000f515 	.word	0x1000f515

100100f8 <gapm_set_dev_config_cmd_handler>:
100100f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100100fa:	b089      	sub	sp, #36	; 0x24
100100fc:	9303      	str	r3, [sp, #12]
100100fe:	ab0e      	add	r3, sp, #56	; 0x38
10010100:	781b      	ldrb	r3, [r3, #0]
10010102:	4c37      	ldr	r4, [pc, #220]	; (100101e0 <gapm_set_dev_config_cmd_handler+0xe8>)
10010104:	9304      	str	r3, [sp, #16]
10010106:	ab0f      	add	r3, sp, #60	; 0x3c
10010108:	781b      	ldrb	r3, [r3, #0]
1001010a:	270d      	movs	r7, #13
1001010c:	9305      	str	r3, [sp, #20]
1001010e:	ab10      	add	r3, sp, #64	; 0x40
10010110:	881b      	ldrh	r3, [r3, #0]
10010112:	72a1      	strb	r1, [r4, #10]
10010114:	9300      	str	r3, [sp, #0]
10010116:	ab11      	add	r3, sp, #68	; 0x44
10010118:	881b      	ldrh	r3, [r3, #0]
1001011a:	0a09      	lsrs	r1, r1, #8
1001011c:	9301      	str	r3, [sp, #4]
1001011e:	ab12      	add	r3, sp, #72	; 0x48
10010120:	881b      	ldrh	r3, [r3, #0]
10010122:	7260      	strb	r0, [r4, #9]
10010124:	9302      	str	r3, [sp, #8]
10010126:	ab06      	add	r3, sp, #24
10010128:	1dde      	adds	r6, r3, #7
1001012a:	2300      	movs	r3, #0
1001012c:	7033      	strb	r3, [r6, #0]
1001012e:	2304      	movs	r3, #4
10010130:	7023      	strb	r3, [r4, #0]
10010132:	2300      	movs	r3, #0
10010134:	70e3      	strb	r3, [r4, #3]
10010136:	4b2b      	ldr	r3, [pc, #172]	; (100101e4 <gapm_set_dev_config_cmd_handler+0xec>)
10010138:	72e1      	strb	r1, [r4, #11]
1001013a:	881d      	ldrh	r5, [r3, #0]
1001013c:	881b      	ldrh	r3, [r3, #0]
1001013e:	1c11      	adds	r1, r2, #0
10010140:	0a1b      	lsrs	r3, r3, #8
10010142:	7163      	strb	r3, [r4, #5]
10010144:	2303      	movs	r3, #3
10010146:	7125      	strb	r5, [r4, #4]
10010148:	2206      	movs	r2, #6
1001014a:	4d27      	ldr	r5, [pc, #156]	; (100101e8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001014c:	4827      	ldr	r0, [pc, #156]	; (100101ec <gapm_set_dev_config_cmd_handler+0xf4>)
1001014e:	7223      	strb	r3, [r4, #8]
10010150:	7067      	strb	r7, [r4, #1]
10010152:	70a7      	strb	r7, [r4, #2]
10010154:	47a8      	blx	r5
10010156:	9903      	ldr	r1, [sp, #12]
10010158:	2210      	movs	r2, #16
1001015a:	4825      	ldr	r0, [pc, #148]	; (100101f0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001015c:	47a8      	blx	r5
1001015e:	466a      	mov	r2, sp
10010160:	7c12      	ldrb	r2, [r2, #16]
10010162:	1ce3      	adds	r3, r4, #3
10010164:	77da      	strb	r2, [r3, #31]
10010166:	466a      	mov	r2, sp
10010168:	7d12      	ldrb	r2, [r2, #20]
1001016a:	1d23      	adds	r3, r4, #4
1001016c:	77da      	strb	r2, [r3, #31]
1001016e:	466a      	mov	r2, sp
10010170:	7812      	ldrb	r2, [r2, #0]
10010172:	1d63      	adds	r3, r4, #5
10010174:	77da      	strb	r2, [r3, #31]
10010176:	9b00      	ldr	r3, [sp, #0]
10010178:	1da2      	adds	r2, r4, #6
1001017a:	0a1b      	lsrs	r3, r3, #8
1001017c:	77d3      	strb	r3, [r2, #31]
1001017e:	466a      	mov	r2, sp
10010180:	7912      	ldrb	r2, [r2, #4]
10010182:	1de3      	adds	r3, r4, #7
10010184:	77da      	strb	r2, [r3, #31]
10010186:	1c22      	adds	r2, r4, #0
10010188:	9b01      	ldr	r3, [sp, #4]
1001018a:	3208      	adds	r2, #8
1001018c:	0a1b      	lsrs	r3, r3, #8
1001018e:	77d3      	strb	r3, [r2, #31]
10010190:	466a      	mov	r2, sp
10010192:	1c23      	adds	r3, r4, #0
10010194:	7a12      	ldrb	r2, [r2, #8]
10010196:	3328      	adds	r3, #40	; 0x28
10010198:	701a      	strb	r2, [r3, #0]
1001019a:	1c22      	adds	r2, r4, #0
1001019c:	9b02      	ldr	r3, [sp, #8]
1001019e:	3229      	adds	r2, #41	; 0x29
100101a0:	0a1b      	lsrs	r3, r3, #8
100101a2:	7013      	strb	r3, [r2, #0]
100101a4:	23d0      	movs	r3, #208	; 0xd0
100101a6:	4d13      	ldr	r5, [pc, #76]	; (100101f4 <gapm_set_dev_config_cmd_handler+0xfc>)
100101a8:	011b      	lsls	r3, r3, #4
100101aa:	802b      	strh	r3, [r5, #0]
100101ac:	2322      	movs	r3, #34	; 0x22
100101ae:	71a3      	strb	r3, [r4, #6]
100101b0:	2300      	movs	r3, #0
100101b2:	212a      	movs	r1, #42	; 0x2a
100101b4:	71e3      	strb	r3, [r4, #7]
100101b6:	1c20      	adds	r0, r4, #0
100101b8:	4b0f      	ldr	r3, [pc, #60]	; (100101f8 <gapm_set_dev_config_cmd_handler+0x100>)
100101ba:	80af      	strh	r7, [r5, #4]
100101bc:	4798      	blx	r3
100101be:	1c30      	adds	r0, r6, #0
100101c0:	4b0e      	ldr	r3, [pc, #56]	; (100101fc <gapm_set_dev_config_cmd_handler+0x104>)
100101c2:	4798      	blx	r3
100101c4:	7833      	ldrb	r3, [r6, #0]
100101c6:	20e2      	movs	r0, #226	; 0xe2
100101c8:	2b00      	cmp	r3, #0
100101ca:	d106      	bne.n	100101da <gapm_set_dev_config_cmd_handler+0xe2>
100101cc:	68ab      	ldr	r3, [r5, #8]
100101ce:	20e2      	movs	r0, #226	; 0xe2
100101d0:	781a      	ldrb	r2, [r3, #0]
100101d2:	785b      	ldrb	r3, [r3, #1]
100101d4:	2a03      	cmp	r2, #3
100101d6:	d100      	bne.n	100101da <gapm_set_dev_config_cmd_handler+0xe2>
100101d8:	1c18      	adds	r0, r3, #0
100101da:	b009      	add	sp, #36	; 0x24
100101dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101de:	46c0      	nop			; (mov r8, r8)
100101e0:	1001a110 	.word	0x1001a110
100101e4:	10019da0 	.word	0x10019da0
100101e8:	100147c3 	.word	0x100147c3
100101ec:	1001a11c 	.word	0x1001a11c
100101f0:	1001a122 	.word	0x1001a122
100101f4:	10019d94 	.word	0x10019d94
100101f8:	1000f4b1 	.word	0x1000f4b1
100101fc:	1000f515 	.word	0x1000f515

10010200 <gapm_get_dev_config_cmd_handler>:
10010200:	4684      	mov	ip, r0
10010202:	4663      	mov	r3, ip
10010204:	b5f0      	push	{r4, r5, r6, r7, lr}
10010206:	b085      	sub	sp, #20
10010208:	9100      	str	r1, [sp, #0]
1001020a:	20cf      	movs	r0, #207	; 0xcf
1001020c:	2b01      	cmp	r3, #1
1001020e:	d854      	bhi.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
10010210:	2900      	cmp	r1, #0
10010212:	d052      	beq.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
10010214:	2200      	movs	r2, #0
10010216:	492a      	ldr	r1, [pc, #168]	; (100102c0 <gapm_get_dev_config_cmd_handler+0xc0>)
10010218:	ab02      	add	r3, sp, #8
1001021a:	880c      	ldrh	r4, [r1, #0]
1001021c:	8809      	ldrh	r1, [r1, #0]
1001021e:	1d9f      	adds	r7, r3, #6
10010220:	719a      	strb	r2, [r3, #6]
10010222:	4b28      	ldr	r3, [pc, #160]	; (100102c4 <gapm_get_dev_config_cmd_handler+0xc4>)
10010224:	0a09      	lsrs	r1, r1, #8
10010226:	250d      	movs	r5, #13
10010228:	2606      	movs	r6, #6
1001022a:	7159      	strb	r1, [r3, #5]
1001022c:	4661      	mov	r1, ip
1001022e:	701e      	strb	r6, [r3, #0]
10010230:	705d      	strb	r5, [r3, #1]
10010232:	709d      	strb	r5, [r3, #2]
10010234:	70da      	strb	r2, [r3, #3]
10010236:	711c      	strb	r4, [r3, #4]
10010238:	2901      	cmp	r1, #1
1001023a:	d13e      	bne.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
1001023c:	21d0      	movs	r1, #208	; 0xd0
1001023e:	4c22      	ldr	r4, [pc, #136]	; (100102c8 <gapm_get_dev_config_cmd_handler+0xc8>)
10010240:	0109      	lsls	r1, r1, #4
10010242:	8061      	strh	r1, [r4, #2]
10010244:	4921      	ldr	r1, [pc, #132]	; (100102cc <gapm_get_dev_config_cmd_handler+0xcc>)
10010246:	71da      	strb	r2, [r3, #7]
10010248:	8021      	strh	r1, [r4, #0]
1001024a:	4661      	mov	r1, ip
1001024c:	721e      	strb	r6, [r3, #8]
1001024e:	7199      	strb	r1, [r3, #6]
10010250:	1c18      	adds	r0, r3, #0
10010252:	2109      	movs	r1, #9
10010254:	4b1e      	ldr	r3, [pc, #120]	; (100102d0 <gapm_get_dev_config_cmd_handler+0xd0>)
10010256:	80a5      	strh	r5, [r4, #4]
10010258:	4798      	blx	r3
1001025a:	1c38      	adds	r0, r7, #0
1001025c:	4b1d      	ldr	r3, [pc, #116]	; (100102d4 <gapm_get_dev_config_cmd_handler+0xd4>)
1001025e:	4798      	blx	r3
10010260:	783b      	ldrb	r3, [r7, #0]
10010262:	20e2      	movs	r0, #226	; 0xe2
10010264:	9301      	str	r3, [sp, #4]
10010266:	2b00      	cmp	r3, #0
10010268:	d127      	bne.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
1001026a:	8821      	ldrh	r1, [r4, #0]
1001026c:	4a1a      	ldr	r2, [pc, #104]	; (100102d8 <gapm_get_dev_config_cmd_handler+0xd8>)
1001026e:	68a7      	ldr	r7, [r4, #8]
10010270:	3b01      	subs	r3, #1
10010272:	4291      	cmp	r1, r2
10010274:	d001      	beq.n	1001027a <gapm_get_dev_config_cmd_handler+0x7a>
10010276:	8023      	strh	r3, [r4, #0]
10010278:	e01a      	b.n	100102b0 <gapm_get_dev_config_cmd_handler+0xb0>
1001027a:	8063      	strh	r3, [r4, #2]
1001027c:	9b00      	ldr	r3, [sp, #0]
1001027e:	1c39      	adds	r1, r7, #0
10010280:	1c58      	adds	r0, r3, #1
10010282:	1c32      	adds	r2, r6, #0
10010284:	4b15      	ldr	r3, [pc, #84]	; (100102dc <gapm_get_dev_config_cmd_handler+0xdc>)
10010286:	4798      	blx	r3
10010288:	79bb      	ldrb	r3, [r7, #6]
1001028a:	9a00      	ldr	r2, [sp, #0]
1001028c:	7013      	strb	r3, [r2, #0]
1001028e:	23d0      	movs	r3, #208	; 0xd0
10010290:	011b      	lsls	r3, r3, #4
10010292:	8023      	strh	r3, [r4, #0]
10010294:	ab02      	add	r3, sp, #8
10010296:	80a5      	strh	r5, [r4, #4]
10010298:	1ddd      	adds	r5, r3, #7
1001029a:	466b      	mov	r3, sp
1001029c:	791b      	ldrb	r3, [r3, #4]
1001029e:	1c28      	adds	r0, r5, #0
100102a0:	702b      	strb	r3, [r5, #0]
100102a2:	4b0c      	ldr	r3, [pc, #48]	; (100102d4 <gapm_get_dev_config_cmd_handler+0xd4>)
100102a4:	4798      	blx	r3
100102a6:	782b      	ldrb	r3, [r5, #0]
100102a8:	20d0      	movs	r0, #208	; 0xd0
100102aa:	2b00      	cmp	r3, #0
100102ac:	d105      	bne.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
100102ae:	68a7      	ldr	r7, [r4, #8]
100102b0:	783b      	ldrb	r3, [r7, #0]
100102b2:	7878      	ldrb	r0, [r7, #1]
100102b4:	2b06      	cmp	r3, #6
100102b6:	d000      	beq.n	100102ba <gapm_get_dev_config_cmd_handler+0xba>
100102b8:	20e2      	movs	r0, #226	; 0xe2
100102ba:	b005      	add	sp, #20
100102bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102be:	46c0      	nop			; (mov r8, r8)
100102c0:	10019da0 	.word	0x10019da0
100102c4:	1001a110 	.word	0x1001a110
100102c8:	10019d94 	.word	0x10019d94
100102cc:	00000d08 	.word	0x00000d08
100102d0:	1000f4b1 	.word	0x1000f4b1
100102d4:	1000f515 	.word	0x1000f515
100102d8:	0000ffff 	.word	0x0000ffff
100102dc:	100147c3 	.word	0x100147c3

100102e0 <gapm_cancel_cmd_handler>:
100102e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100102e2:	4916      	ldr	r1, [pc, #88]	; (1001033c <gapm_cancel_cmd_handler+0x5c>)
100102e4:	4816      	ldr	r0, [pc, #88]	; (10010340 <gapm_cancel_cmd_handler+0x60>)
100102e6:	880c      	ldrh	r4, [r1, #0]
100102e8:	8809      	ldrh	r1, [r1, #0]
100102ea:	466b      	mov	r3, sp
100102ec:	0a09      	lsrs	r1, r1, #8
100102ee:	7141      	strb	r1, [r0, #5]
100102f0:	2102      	movs	r1, #2
100102f2:	2203      	movs	r2, #3
100102f4:	7201      	strb	r1, [r0, #8]
100102f6:	21d0      	movs	r1, #208	; 0xd0
100102f8:	1ddd      	adds	r5, r3, #7
100102fa:	2300      	movs	r3, #0
100102fc:	7104      	strb	r4, [r0, #4]
100102fe:	4c11      	ldr	r4, [pc, #68]	; (10010344 <gapm_cancel_cmd_handler+0x64>)
10010300:	7002      	strb	r2, [r0, #0]
10010302:	0109      	lsls	r1, r1, #4
10010304:	320a      	adds	r2, #10
10010306:	702b      	strb	r3, [r5, #0]
10010308:	7042      	strb	r2, [r0, #1]
1001030a:	7082      	strb	r2, [r0, #2]
1001030c:	70c3      	strb	r3, [r0, #3]
1001030e:	8021      	strh	r1, [r4, #0]
10010310:	80a2      	strh	r2, [r4, #4]
10010312:	71c3      	strb	r3, [r0, #7]
10010314:	3a0c      	subs	r2, #12
10010316:	2109      	movs	r1, #9
10010318:	4b0b      	ldr	r3, [pc, #44]	; (10010348 <gapm_cancel_cmd_handler+0x68>)
1001031a:	7182      	strb	r2, [r0, #6]
1001031c:	4798      	blx	r3
1001031e:	1c28      	adds	r0, r5, #0
10010320:	4b0a      	ldr	r3, [pc, #40]	; (1001034c <gapm_cancel_cmd_handler+0x6c>)
10010322:	4798      	blx	r3
10010324:	7828      	ldrb	r0, [r5, #0]
10010326:	2800      	cmp	r0, #0
10010328:	d001      	beq.n	1001032e <gapm_cancel_cmd_handler+0x4e>
1001032a:	20e2      	movs	r0, #226	; 0xe2
1001032c:	e004      	b.n	10010338 <gapm_cancel_cmd_handler+0x58>
1001032e:	68a3      	ldr	r3, [r4, #8]
10010330:	785b      	ldrb	r3, [r3, #1]
10010332:	2b44      	cmp	r3, #68	; 0x44
10010334:	d000      	beq.n	10010338 <gapm_cancel_cmd_handler+0x58>
10010336:	1c18      	adds	r0, r3, #0
10010338:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001033a:	46c0      	nop			; (mov r8, r8)
1001033c:	10019da0 	.word	0x10019da0
10010340:	1001a110 	.word	0x1001a110
10010344:	10019d94 	.word	0x10019d94
10010348:	1000f4b1 	.word	0x1000f4b1
1001034c:	1000f515 	.word	0x1000f515

10010350 <gapm_dev_bdaddr_ind_handler>:
10010350:	b538      	push	{r3, r4, r5, lr}
10010352:	1c05      	adds	r5, r0, #0
10010354:	1c0c      	adds	r4, r1, #0
10010356:	1c48      	adds	r0, r1, #1
10010358:	2206      	movs	r2, #6
1001035a:	1c29      	adds	r1, r5, #0
1001035c:	4b02      	ldr	r3, [pc, #8]	; (10010368 <gapm_dev_bdaddr_ind_handler+0x18>)
1001035e:	4798      	blx	r3
10010360:	79ab      	ldrb	r3, [r5, #6]
10010362:	2000      	movs	r0, #0
10010364:	7023      	strb	r3, [r4, #0]
10010366:	bd38      	pop	{r3, r4, r5, pc}
10010368:	100147c3 	.word	0x100147c3

1001036c <gapm_cmp_evt>:
1001036c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001036e:	7803      	ldrb	r3, [r0, #0]
10010370:	7845      	ldrb	r5, [r0, #1]
10010372:	3b0c      	subs	r3, #12
10010374:	1e18      	subs	r0, r3, #0
10010376:	280b      	cmp	r0, #11
10010378:	d900      	bls.n	1001037c <gapm_cmp_evt+0x10>
1001037a:	e08d      	b.n	10010498 <gapm_cmp_evt+0x12c>
1001037c:	1c0c      	adds	r4, r1, #0
1001037e:	f001 fe33 	bl	10011fe8 <__gnu_thumb1_case_uqi>
10010382:	1952      	.short	0x1952
10010384:	068b1919 	.word	0x068b1919
10010388:	8b595906 	.word	0x8b595906
1001038c:	0d8b      	.short	0x0d8b
1001038e:	2300      	movs	r3, #0
10010390:	2d45      	cmp	r5, #69	; 0x45
10010392:	d000      	beq.n	10010396 <gapm_cmp_evt+0x2a>
10010394:	1c2b      	adds	r3, r5, #0
10010396:	7023      	strb	r3, [r4, #0]
10010398:	2002      	movs	r0, #2
1001039a:	e07e      	b.n	1001049a <gapm_cmp_evt+0x12e>
1001039c:	203b      	movs	r0, #59	; 0x3b
1001039e:	2d00      	cmp	r5, #0
100103a0:	d100      	bne.n	100103a4 <gapm_cmp_evt+0x38>
100103a2:	e07a      	b.n	1001049a <gapm_cmp_evt+0x12e>
100103a4:	700d      	strb	r5, [r1, #0]
100103a6:	1c48      	adds	r0, r1, #1
100103a8:	2210      	movs	r2, #16
100103aa:	2100      	movs	r1, #0
100103ac:	4b3b      	ldr	r3, [pc, #236]	; (1001049c <gapm_cmp_evt+0x130>)
100103ae:	4798      	blx	r3
100103b0:	200f      	movs	r0, #15
100103b2:	e072      	b.n	1001049a <gapm_cmp_evt+0x12e>
100103b4:	2d00      	cmp	r5, #0
100103b6:	d134      	bne.n	10010422 <gapm_cmp_evt+0xb6>
100103b8:	4b39      	ldr	r3, [pc, #228]	; (100104a0 <gapm_cmp_evt+0x134>)
100103ba:	4798      	blx	r3
100103bc:	1e43      	subs	r3, r0, #1
100103be:	b2db      	uxtb	r3, r3
100103c0:	1c28      	adds	r0, r5, #0
100103c2:	2b06      	cmp	r3, #6
100103c4:	d869      	bhi.n	1001049a <gapm_cmp_evt+0x12e>
100103c6:	466b      	mov	r3, sp
100103c8:	4e36      	ldr	r6, [pc, #216]	; (100104a4 <gapm_cmp_evt+0x138>)
100103ca:	1dd9      	adds	r1, r3, #7
100103cc:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100103ce:	4b36      	ldr	r3, [pc, #216]	; (100104a8 <gapm_cmp_evt+0x13c>)
100103d0:	4798      	blx	r3
100103d2:	2312      	movs	r3, #18
100103d4:	4358      	muls	r0, r3
100103d6:	4935      	ldr	r1, [pc, #212]	; (100104ac <gapm_cmp_evt+0x140>)
100103d8:	1809      	adds	r1, r1, r0
100103da:	1c0b      	adds	r3, r1, #0
100103dc:	894a      	ldrh	r2, [r1, #10]
100103de:	3308      	adds	r3, #8
100103e0:	8122      	strh	r2, [r4, #8]
100103e2:	784f      	ldrb	r7, [r1, #1]
100103e4:	72a5      	strb	r5, [r4, #10]
100103e6:	7027      	strb	r7, [r4, #0]
100103e8:	898a      	ldrh	r2, [r1, #12]
100103ea:	1c60      	adds	r0, r4, #1
100103ec:	81a2      	strh	r2, [r4, #12]
100103ee:	88db      	ldrh	r3, [r3, #6]
100103f0:	3102      	adds	r1, #2
100103f2:	81e3      	strh	r3, [r4, #14]
100103f4:	89cb      	ldrh	r3, [r1, #14]
100103f6:	2206      	movs	r2, #6
100103f8:	8223      	strh	r3, [r4, #16]
100103fa:	4b2d      	ldr	r3, [pc, #180]	; (100104b0 <gapm_cmp_evt+0x144>)
100103fc:	4798      	blx	r3
100103fe:	2f00      	cmp	r7, #0
10010400:	d00a      	beq.n	10010418 <gapm_cmp_evt+0xac>
10010402:	79a3      	ldrb	r3, [r4, #6]
10010404:	223f      	movs	r2, #63	; 0x3f
10010406:	1c19      	adds	r1, r3, #0
10010408:	3501      	adds	r5, #1
1001040a:	4391      	bics	r1, r2
1001040c:	29c0      	cmp	r1, #192	; 0xc0
1001040e:	d003      	beq.n	10010418 <gapm_cmp_evt+0xac>
10010410:	065b      	lsls	r3, r3, #25
10010412:	0fdb      	lsrs	r3, r3, #31
10010414:	3502      	adds	r5, #2
10010416:	1aed      	subs	r5, r5, r3
10010418:	2301      	movs	r3, #1
1001041a:	425b      	negs	r3, r3
1001041c:	7025      	strb	r5, [r4, #0]
1001041e:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010420:	e038      	b.n	10010494 <gapm_cmp_evt+0x128>
10010422:	700d      	strb	r5, [r1, #0]
10010424:	e004      	b.n	10010430 <gapm_cmp_evt+0xc4>
10010426:	2300      	movs	r3, #0
10010428:	2d45      	cmp	r5, #69	; 0x45
1001042a:	d000      	beq.n	1001042e <gapm_cmp_evt+0xc2>
1001042c:	1c2b      	adds	r3, r5, #0
1001042e:	7023      	strb	r3, [r4, #0]
10010430:	2003      	movs	r0, #3
10010432:	e032      	b.n	1001049a <gapm_cmp_evt+0x12e>
10010434:	4e1b      	ldr	r6, [pc, #108]	; (100104a4 <gapm_cmp_evt+0x138>)
10010436:	2100      	movs	r1, #0
10010438:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001043a:	4b1b      	ldr	r3, [pc, #108]	; (100104a8 <gapm_cmp_evt+0x13c>)
1001043c:	4798      	blx	r3
1001043e:	2807      	cmp	r0, #7
10010440:	d818      	bhi.n	10010474 <gapm_cmp_evt+0x108>
10010442:	2301      	movs	r3, #1
10010444:	425b      	negs	r3, r3
10010446:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010448:	3313      	adds	r3, #19
1001044a:	4358      	muls	r0, r3
1001044c:	4917      	ldr	r1, [pc, #92]	; (100104ac <gapm_cmp_evt+0x140>)
1001044e:	1809      	adds	r1, r1, r0
10010450:	1c0b      	adds	r3, r1, #0
10010452:	894a      	ldrh	r2, [r1, #10]
10010454:	3308      	adds	r3, #8
10010456:	8122      	strh	r2, [r4, #8]
10010458:	784a      	ldrb	r2, [r1, #1]
1001045a:	72a5      	strb	r5, [r4, #10]
1001045c:	7022      	strb	r2, [r4, #0]
1001045e:	898a      	ldrh	r2, [r1, #12]
10010460:	1c60      	adds	r0, r4, #1
10010462:	81a2      	strh	r2, [r4, #12]
10010464:	88db      	ldrh	r3, [r3, #6]
10010466:	3102      	adds	r1, #2
10010468:	81e3      	strh	r3, [r4, #14]
1001046a:	89cb      	ldrh	r3, [r1, #14]
1001046c:	2206      	movs	r2, #6
1001046e:	8223      	strh	r3, [r4, #16]
10010470:	4b0f      	ldr	r3, [pc, #60]	; (100104b0 <gapm_cmp_evt+0x144>)
10010472:	4798      	blx	r3
10010474:	2200      	movs	r2, #0
10010476:	7823      	ldrb	r3, [r4, #0]
10010478:	4293      	cmp	r3, r2
1001047a:	d00a      	beq.n	10010492 <gapm_cmp_evt+0x126>
1001047c:	79a3      	ldrb	r3, [r4, #6]
1001047e:	323f      	adds	r2, #63	; 0x3f
10010480:	1c19      	adds	r1, r3, #0
10010482:	4391      	bics	r1, r2
10010484:	3a3e      	subs	r2, #62	; 0x3e
10010486:	29c0      	cmp	r1, #192	; 0xc0
10010488:	d003      	beq.n	10010492 <gapm_cmp_evt+0x126>
1001048a:	065b      	lsls	r3, r3, #25
1001048c:	0fdb      	lsrs	r3, r3, #31
1001048e:	3202      	adds	r2, #2
10010490:	1ad2      	subs	r2, r2, r3
10010492:	7022      	strb	r2, [r4, #0]
10010494:	2005      	movs	r0, #5
10010496:	e000      	b.n	1001049a <gapm_cmp_evt+0x12e>
10010498:	2000      	movs	r0, #0
1001049a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001049c:	100147d5 	.word	0x100147d5
100104a0:	1000f6bd 	.word	0x1000f6bd
100104a4:	10019e32 	.word	0x10019e32
100104a8:	1000f681 	.word	0x1000f681
100104ac:	10019da2 	.word	0x10019da2
100104b0:	100147c3 	.word	0x100147c3

100104b4 <gapm_start_adv_cmd_handler>:
100104b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100104b6:	b089      	sub	sp, #36	; 0x24
100104b8:	9303      	str	r3, [sp, #12]
100104ba:	ab0e      	add	r3, sp, #56	; 0x38
100104bc:	9102      	str	r1, [sp, #8]
100104be:	cb02      	ldmia	r3!, {r1}
100104c0:	aa08      	add	r2, sp, #32
100104c2:	881b      	ldrh	r3, [r3, #0]
100104c4:	4e3c      	ldr	r6, [pc, #240]	; (100105b8 <gapm_start_adv_cmd_handler+0x104>)
100104c6:	9300      	str	r3, [sp, #0]
100104c8:	ab10      	add	r3, sp, #64	; 0x40
100104ca:	881b      	ldrh	r3, [r3, #0]
100104cc:	240d      	movs	r4, #13
100104ce:	469c      	mov	ip, r3
100104d0:	ab11      	add	r3, sp, #68	; 0x44
100104d2:	781b      	ldrb	r3, [r3, #0]
100104d4:	9304      	str	r3, [sp, #16]
100104d6:	ab12      	add	r3, sp, #72	; 0x48
100104d8:	781b      	ldrb	r3, [r3, #0]
100104da:	9305      	str	r3, [sp, #20]
100104dc:	ab13      	add	r3, sp, #76	; 0x4c
100104de:	781b      	ldrb	r3, [r3, #0]
100104e0:	9306      	str	r3, [sp, #24]
100104e2:	ab14      	add	r3, sp, #80	; 0x50
100104e4:	781b      	ldrb	r3, [r3, #0]
100104e6:	9301      	str	r3, [sp, #4]
100104e8:	2319      	movs	r3, #25
100104ea:	189b      	adds	r3, r3, r2
100104ec:	7fdd      	ldrb	r5, [r3, #31]
100104ee:	ab18      	add	r3, sp, #96	; 0x60
100104f0:	881f      	ldrh	r7, [r3, #0]
100104f2:	ab19      	add	r3, sp, #100	; 0x64
100104f4:	781b      	ldrb	r3, [r3, #0]
100104f6:	8832      	ldrh	r2, [r6, #0]
100104f8:	9307      	str	r3, [sp, #28]
100104fa:	4b30      	ldr	r3, [pc, #192]	; (100105bc <gapm_start_adv_cmd_handler+0x108>)
100104fc:	8836      	ldrh	r6, [r6, #0]
100104fe:	711a      	strb	r2, [r3, #4]
10010500:	466a      	mov	r2, sp
10010502:	7a12      	ldrb	r2, [r2, #8]
10010504:	701c      	strb	r4, [r3, #0]
10010506:	705c      	strb	r4, [r3, #1]
10010508:	709c      	strb	r4, [r3, #2]
1001050a:	725a      	strb	r2, [r3, #9]
1001050c:	2400      	movs	r4, #0
1001050e:	466a      	mov	r2, sp
10010510:	0a36      	lsrs	r6, r6, #8
10010512:	70dc      	strb	r4, [r3, #3]
10010514:	7218      	strb	r0, [r3, #8]
10010516:	729c      	strb	r4, [r3, #10]
10010518:	715e      	strb	r6, [r3, #5]
1001051a:	72dc      	strb	r4, [r3, #11]
1001051c:	7812      	ldrb	r2, [r2, #0]
1001051e:	380e      	subs	r0, #14
10010520:	731a      	strb	r2, [r3, #12]
10010522:	9a00      	ldr	r2, [sp, #0]
10010524:	0a14      	lsrs	r4, r2, #8
10010526:	4662      	mov	r2, ip
10010528:	739a      	strb	r2, [r3, #14]
1001052a:	4662      	mov	r2, ip
1001052c:	735c      	strb	r4, [r3, #13]
1001052e:	0a14      	lsrs	r4, r2, #8
10010530:	466a      	mov	r2, sp
10010532:	7c12      	ldrb	r2, [r2, #16]
10010534:	73dc      	strb	r4, [r3, #15]
10010536:	741a      	strb	r2, [r3, #16]
10010538:	1c1c      	adds	r4, r3, #0
1001053a:	2801      	cmp	r0, #1
1001053c:	d809      	bhi.n	10010552 <gapm_start_adv_cmd_handler+0x9e>
1001053e:	2900      	cmp	r1, #0
10010540:	d003      	beq.n	1001054a <gapm_start_adv_cmd_handler+0x96>
10010542:	481f      	ldr	r0, [pc, #124]	; (100105c0 <gapm_start_adv_cmd_handler+0x10c>)
10010544:	2206      	movs	r2, #6
10010546:	4b1f      	ldr	r3, [pc, #124]	; (100105c4 <gapm_start_adv_cmd_handler+0x110>)
10010548:	4798      	blx	r3
1001054a:	466b      	mov	r3, sp
1001054c:	7b1b      	ldrb	r3, [r3, #12]
1001054e:	75e3      	strb	r3, [r4, #23]
10010550:	e014      	b.n	1001057c <gapm_start_adv_cmd_handler+0xc8>
10010552:	466b      	mov	r3, sp
10010554:	7d1b      	ldrb	r3, [r3, #20]
10010556:	9915      	ldr	r1, [sp, #84]	; 0x54
10010558:	7463      	strb	r3, [r4, #17]
1001055a:	466b      	mov	r3, sp
1001055c:	7e1b      	ldrb	r3, [r3, #24]
1001055e:	9a01      	ldr	r2, [sp, #4]
10010560:	74a3      	strb	r3, [r4, #18]
10010562:	466b      	mov	r3, sp
10010564:	791b      	ldrb	r3, [r3, #4]
10010566:	4818      	ldr	r0, [pc, #96]	; (100105c8 <gapm_start_adv_cmd_handler+0x114>)
10010568:	4e16      	ldr	r6, [pc, #88]	; (100105c4 <gapm_start_adv_cmd_handler+0x110>)
1001056a:	74e3      	strb	r3, [r4, #19]
1001056c:	47b0      	blx	r6
1001056e:	1c23      	adds	r3, r4, #0
10010570:	4816      	ldr	r0, [pc, #88]	; (100105cc <gapm_start_adv_cmd_handler+0x118>)
10010572:	3330      	adds	r3, #48	; 0x30
10010574:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010576:	1c2a      	adds	r2, r5, #0
10010578:	701d      	strb	r5, [r3, #0]
1001057a:	47b0      	blx	r6
1001057c:	1c22      	adds	r2, r4, #0
1001057e:	23a5      	movs	r3, #165	; 0xa5
10010580:	3250      	adds	r2, #80	; 0x50
10010582:	7013      	strb	r3, [r2, #0]
10010584:	1c22      	adds	r2, r4, #0
10010586:	3251      	adds	r2, #81	; 0x51
10010588:	7013      	strb	r3, [r2, #0]
1001058a:	1c23      	adds	r3, r4, #0
1001058c:	1c22      	adds	r2, r4, #0
1001058e:	3352      	adds	r3, #82	; 0x52
10010590:	701f      	strb	r7, [r3, #0]
10010592:	3253      	adds	r2, #83	; 0x53
10010594:	0a3b      	lsrs	r3, r7, #8
10010596:	7013      	strb	r3, [r2, #0]
10010598:	466a      	mov	r2, sp
1001059a:	1c23      	adds	r3, r4, #0
1001059c:	7f12      	ldrb	r2, [r2, #28]
1001059e:	3354      	adds	r3, #84	; 0x54
100105a0:	701a      	strb	r2, [r3, #0]
100105a2:	234d      	movs	r3, #77	; 0x4d
100105a4:	2500      	movs	r5, #0
100105a6:	71a3      	strb	r3, [r4, #6]
100105a8:	1c20      	adds	r0, r4, #0
100105aa:	2155      	movs	r1, #85	; 0x55
100105ac:	4b08      	ldr	r3, [pc, #32]	; (100105d0 <gapm_start_adv_cmd_handler+0x11c>)
100105ae:	71e5      	strb	r5, [r4, #7]
100105b0:	4798      	blx	r3
100105b2:	1c28      	adds	r0, r5, #0
100105b4:	b009      	add	sp, #36	; 0x24
100105b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105b8:	10019da0 	.word	0x10019da0
100105bc:	1001a110 	.word	0x1001a110
100105c0:	1001a121 	.word	0x1001a121
100105c4:	100147c3 	.word	0x100147c3
100105c8:	1001a124 	.word	0x1001a124
100105cc:	1001a141 	.word	0x1001a141
100105d0:	1000f4b1 	.word	0x1000f4b1

100105d4 <get_gap_local_addr_type>:
100105d4:	4b04      	ldr	r3, [pc, #16]	; (100105e8 <get_gap_local_addr_type+0x14>)
100105d6:	2001      	movs	r0, #1
100105d8:	791b      	ldrb	r3, [r3, #4]
100105da:	2b02      	cmp	r3, #2
100105dc:	d003      	beq.n	100105e6 <get_gap_local_addr_type+0x12>
100105de:	3b03      	subs	r3, #3
100105e0:	4258      	negs	r0, r3
100105e2:	4158      	adcs	r0, r3
100105e4:	0040      	lsls	r0, r0, #1
100105e6:	4770      	bx	lr
100105e8:	10019e32 	.word	0x10019e32

100105ec <gapm_adv_report_evt_handler>:
100105ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100105ee:	7843      	ldrb	r3, [r0, #1]
100105f0:	1c05      	adds	r5, r0, #0
100105f2:	9301      	str	r3, [sp, #4]
100105f4:	466b      	mov	r3, sp
100105f6:	1c0c      	adds	r4, r1, #0
100105f8:	791b      	ldrb	r3, [r3, #4]
100105fa:	7806      	ldrb	r6, [r0, #0]
100105fc:	2206      	movs	r2, #6
100105fe:	704b      	strb	r3, [r1, #1]
10010600:	1c88      	adds	r0, r1, #2
10010602:	4f1b      	ldr	r7, [pc, #108]	; (10010670 <gapm_adv_report_evt_handler+0x84>)
10010604:	1ca9      	adds	r1, r5, #2
10010606:	47b8      	blx	r7
10010608:	1c20      	adds	r0, r4, #0
1001060a:	1c29      	adds	r1, r5, #0
1001060c:	7a2a      	ldrb	r2, [r5, #8]
1001060e:	3008      	adds	r0, #8
10010610:	77c2      	strb	r2, [r0, #31]
10010612:	3109      	adds	r1, #9
10010614:	3528      	adds	r5, #40	; 0x28
10010616:	47b8      	blx	r7
10010618:	782b      	ldrb	r3, [r5, #0]
1001061a:	b25a      	sxtb	r2, r3
1001061c:	2a00      	cmp	r2, #0
1001061e:	da01      	bge.n	10010624 <gapm_adv_report_evt_handler+0x38>
10010620:	3301      	adds	r3, #1
10010622:	b2db      	uxtb	r3, r3
10010624:	1c22      	adds	r2, r4, #0
10010626:	3228      	adds	r2, #40	; 0x28
10010628:	7013      	strb	r3, [r2, #0]
1001062a:	2200      	movs	r2, #0
1001062c:	9b01      	ldr	r3, [sp, #4]
1001062e:	4293      	cmp	r3, r2
10010630:	d00a      	beq.n	10010648 <gapm_adv_report_evt_handler+0x5c>
10010632:	79e3      	ldrb	r3, [r4, #7]
10010634:	323f      	adds	r2, #63	; 0x3f
10010636:	1c19      	adds	r1, r3, #0
10010638:	4391      	bics	r1, r2
1001063a:	3a3e      	subs	r2, #62	; 0x3e
1001063c:	29c0      	cmp	r1, #192	; 0xc0
1001063e:	d003      	beq.n	10010648 <gapm_adv_report_evt_handler+0x5c>
10010640:	065b      	lsls	r3, r3, #25
10010642:	0fdb      	lsrs	r3, r3, #31
10010644:	3202      	adds	r2, #2
10010646:	1ad2      	subs	r2, r2, r3
10010648:	7062      	strb	r2, [r4, #1]
1001064a:	2e04      	cmp	r6, #4
1001064c:	d80f      	bhi.n	1001066e <gapm_adv_report_evt_handler+0x82>
1001064e:	1c30      	adds	r0, r6, #0
10010650:	f001 fcca 	bl	10011fe8 <__gnu_thumb1_case_uqi>
10010654:	09070503 	.word	0x09070503
10010658:	0b          	.byte	0x0b
10010659:	00          	.byte	0x00
1001065a:	2300      	movs	r3, #0
1001065c:	e006      	b.n	1001066c <gapm_adv_report_evt_handler+0x80>
1001065e:	2301      	movs	r3, #1
10010660:	e004      	b.n	1001066c <gapm_adv_report_evt_handler+0x80>
10010662:	2302      	movs	r3, #2
10010664:	e002      	b.n	1001066c <gapm_adv_report_evt_handler+0x80>
10010666:	2303      	movs	r3, #3
10010668:	e000      	b.n	1001066c <gapm_adv_report_evt_handler+0x80>
1001066a:	2305      	movs	r3, #5
1001066c:	7023      	strb	r3, [r4, #0]
1001066e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010670:	100147c3 	.word	0x100147c3

10010674 <gapm_resolv_addr_cmd_handler>:
10010674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010676:	2314      	movs	r3, #20
10010678:	4c12      	ldr	r4, [pc, #72]	; (100106c4 <gapm_resolv_addr_cmd_handler+0x50>)
1001067a:	1c17      	adds	r7, r2, #0
1001067c:	7023      	strb	r3, [r4, #0]
1001067e:	3b07      	subs	r3, #7
10010680:	7063      	strb	r3, [r4, #1]
10010682:	70a3      	strb	r3, [r4, #2]
10010684:	2300      	movs	r3, #0
10010686:	70e3      	strb	r3, [r4, #3]
10010688:	4b0f      	ldr	r3, [pc, #60]	; (100106c8 <gapm_resolv_addr_cmd_handler+0x54>)
1001068a:	1c05      	adds	r5, r0, #0
1001068c:	881a      	ldrh	r2, [r3, #0]
1001068e:	881b      	ldrh	r3, [r3, #0]
10010690:	4e0e      	ldr	r6, [pc, #56]	; (100106cc <gapm_resolv_addr_cmd_handler+0x58>)
10010692:	0a1b      	lsrs	r3, r3, #8
10010694:	7163      	strb	r3, [r4, #5]
10010696:	2317      	movs	r3, #23
10010698:	012d      	lsls	r5, r5, #4
1001069a:	7122      	strb	r2, [r4, #4]
1001069c:	7260      	strb	r0, [r4, #9]
1001069e:	2206      	movs	r2, #6
100106a0:	480b      	ldr	r0, [pc, #44]	; (100106d0 <gapm_resolv_addr_cmd_handler+0x5c>)
100106a2:	7223      	strb	r3, [r4, #8]
100106a4:	47b0      	blx	r6
100106a6:	1c39      	adds	r1, r7, #0
100106a8:	1c2a      	adds	r2, r5, #0
100106aa:	480a      	ldr	r0, [pc, #40]	; (100106d4 <gapm_resolv_addr_cmd_handler+0x60>)
100106ac:	47b0      	blx	r6
100106ae:	1c29      	adds	r1, r5, #0
100106b0:	3110      	adds	r1, #16
100106b2:	1c0b      	adds	r3, r1, #0
100106b4:	3b08      	subs	r3, #8
100106b6:	71a3      	strb	r3, [r4, #6]
100106b8:	121b      	asrs	r3, r3, #8
100106ba:	71e3      	strb	r3, [r4, #7]
100106bc:	1c20      	adds	r0, r4, #0
100106be:	4b06      	ldr	r3, [pc, #24]	; (100106d8 <gapm_resolv_addr_cmd_handler+0x64>)
100106c0:	4798      	blx	r3
100106c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100106c4:	1001a110 	.word	0x1001a110
100106c8:	10019da0 	.word	0x10019da0
100106cc:	100147c3 	.word	0x100147c3
100106d0:	1001a11a 	.word	0x1001a11a
100106d4:	1001a120 	.word	0x1001a120
100106d8:	1000f4b1 	.word	0x1000f4b1

100106dc <gapm_addr_solved_ind_handler>:
100106dc:	b570      	push	{r4, r5, r6, lr}
100106de:	1c04      	adds	r4, r0, #0
100106e0:	1c08      	adds	r0, r1, #0
100106e2:	1c0d      	adds	r5, r1, #0
100106e4:	4e05      	ldr	r6, [pc, #20]	; (100106fc <gapm_addr_solved_ind_handler+0x20>)
100106e6:	1c21      	adds	r1, r4, #0
100106e8:	2206      	movs	r2, #6
100106ea:	3011      	adds	r0, #17
100106ec:	47b0      	blx	r6
100106ee:	1c68      	adds	r0, r5, #1
100106f0:	1da1      	adds	r1, r4, #6
100106f2:	2210      	movs	r2, #16
100106f4:	47b0      	blx	r6
100106f6:	2300      	movs	r3, #0
100106f8:	702b      	strb	r3, [r5, #0]
100106fa:	bd70      	pop	{r4, r5, r6, pc}
100106fc:	100147c3 	.word	0x100147c3

10010700 <gapm_profile_added_ind_handler>:
10010700:	b510      	push	{r4, lr}
10010702:	7843      	ldrb	r3, [r0, #1]
10010704:	7902      	ldrb	r2, [r0, #4]
10010706:	7944      	ldrb	r4, [r0, #5]
10010708:	7800      	ldrb	r0, [r0, #0]
1001070a:	021b      	lsls	r3, r3, #8
1001070c:	4303      	orrs	r3, r0
1001070e:	2b1b      	cmp	r3, #27
10010710:	d104      	bne.n	1001071c <gapm_profile_added_ind_handler+0x1c>
10010712:	2300      	movs	r3, #0
10010714:	700b      	strb	r3, [r1, #0]
10010716:	0223      	lsls	r3, r4, #8
10010718:	4313      	orrs	r3, r2
1001071a:	804b      	strh	r3, [r1, #2]
1001071c:	203b      	movs	r0, #59	; 0x3b
1001071e:	bd10      	pop	{r4, pc}

10010720 <gattc_read_req_ind_parser>:
10010720:	7843      	ldrb	r3, [r0, #1]
10010722:	7802      	ldrb	r2, [r0, #0]
10010724:	021b      	lsls	r3, r3, #8
10010726:	4313      	orrs	r3, r2
10010728:	804b      	strh	r3, [r1, #2]
1001072a:	4770      	bx	lr

1001072c <gattc_write_req_ind_parser>:
1001072c:	b508      	push	{r3, lr}
1001072e:	1c13      	adds	r3, r2, #0
10010730:	0a00      	lsrs	r0, r0, #8
10010732:	8010      	strh	r0, [r2, #0]
10010734:	784a      	ldrb	r2, [r1, #1]
10010736:	7808      	ldrb	r0, [r1, #0]
10010738:	0212      	lsls	r2, r2, #8
1001073a:	4302      	orrs	r2, r0
1001073c:	805a      	strh	r2, [r3, #2]
1001073e:	78ca      	ldrb	r2, [r1, #3]
10010740:	7888      	ldrb	r0, [r1, #2]
10010742:	0212      	lsls	r2, r2, #8
10010744:	4302      	orrs	r2, r0
10010746:	809a      	strh	r2, [r3, #4]
10010748:	794a      	ldrb	r2, [r1, #5]
1001074a:	7908      	ldrb	r0, [r1, #4]
1001074c:	0212      	lsls	r2, r2, #8
1001074e:	4302      	orrs	r2, r0
10010750:	80da      	strh	r2, [r3, #6]
10010752:	3308      	adds	r3, #8
10010754:	1c18      	adds	r0, r3, #0
10010756:	3106      	adds	r1, #6
10010758:	4b01      	ldr	r3, [pc, #4]	; (10010760 <gattc_write_req_ind_parser+0x34>)
1001075a:	4798      	blx	r3
1001075c:	bd08      	pop	{r3, pc}
1001075e:	46c0      	nop			; (mov r8, r8)
10010760:	100147c3 	.word	0x100147c3

10010764 <gattc_att_info_req_parser>:
10010764:	7843      	ldrb	r3, [r0, #1]
10010766:	7802      	ldrb	r2, [r0, #0]
10010768:	021b      	lsls	r3, r3, #8
1001076a:	4313      	orrs	r3, r2
1001076c:	800b      	strh	r3, [r1, #0]
1001076e:	4770      	bx	lr

10010770 <gattc_read_cfm>:
10010770:	b538      	push	{r3, r4, r5, lr}
10010772:	2514      	movs	r5, #20
10010774:	1c1c      	adds	r4, r3, #0
10010776:	4b14      	ldr	r3, [pc, #80]	; (100107c8 <gattc_read_cfm+0x58>)
10010778:	70d9      	strb	r1, [r3, #3]
1001077a:	4914      	ldr	r1, [pc, #80]	; (100107cc <gattc_read_cfm+0x5c>)
1001077c:	701d      	strb	r5, [r3, #0]
1001077e:	3d08      	subs	r5, #8
10010780:	705d      	strb	r5, [r3, #1]
10010782:	709d      	strb	r5, [r3, #2]
10010784:	880d      	ldrh	r5, [r1, #0]
10010786:	8809      	ldrh	r1, [r1, #0]
10010788:	7218      	strb	r0, [r3, #8]
1001078a:	0a09      	lsrs	r1, r1, #8
1001078c:	7159      	strb	r1, [r3, #5]
1001078e:	0a00      	lsrs	r0, r0, #8
10010790:	0a21      	lsrs	r1, r4, #8
10010792:	711d      	strb	r5, [r3, #4]
10010794:	7258      	strb	r0, [r3, #9]
10010796:	729c      	strb	r4, [r3, #10]
10010798:	72d9      	strb	r1, [r3, #11]
1001079a:	731a      	strb	r2, [r3, #12]
1001079c:	1c1d      	adds	r5, r3, #0
1001079e:	2c00      	cmp	r4, #0
100107a0:	d007      	beq.n	100107b2 <gattc_read_cfm+0x42>
100107a2:	9904      	ldr	r1, [sp, #16]
100107a4:	1c22      	adds	r2, r4, #0
100107a6:	480a      	ldr	r0, [pc, #40]	; (100107d0 <gattc_read_cfm+0x60>)
100107a8:	4b0a      	ldr	r3, [pc, #40]	; (100107d4 <gattc_read_cfm+0x64>)
100107aa:	340d      	adds	r4, #13
100107ac:	4798      	blx	r3
100107ae:	b2a1      	uxth	r1, r4
100107b0:	e001      	b.n	100107b6 <gattc_read_cfm+0x46>
100107b2:	210e      	movs	r1, #14
100107b4:	735c      	strb	r4, [r3, #13]
100107b6:	1c0b      	adds	r3, r1, #0
100107b8:	3b08      	subs	r3, #8
100107ba:	71ab      	strb	r3, [r5, #6]
100107bc:	121b      	asrs	r3, r3, #8
100107be:	71eb      	strb	r3, [r5, #7]
100107c0:	1c28      	adds	r0, r5, #0
100107c2:	4b05      	ldr	r3, [pc, #20]	; (100107d8 <gattc_read_cfm+0x68>)
100107c4:	4798      	blx	r3
100107c6:	bd38      	pop	{r3, r4, r5, pc}
100107c8:	1001a110 	.word	0x1001a110
100107cc:	10019da0 	.word	0x10019da0
100107d0:	1001a11d 	.word	0x1001a11d
100107d4:	100147c3 	.word	0x100147c3
100107d8:	1000f4b1 	.word	0x1000f4b1

100107dc <gattc_write_cfm>:
100107dc:	4b0d      	ldr	r3, [pc, #52]	; (10010814 <gattc_write_cfm+0x38>)
100107de:	b510      	push	{r4, lr}
100107e0:	729a      	strb	r2, [r3, #10]
100107e2:	2203      	movs	r2, #3
100107e4:	2416      	movs	r4, #22
100107e6:	719a      	strb	r2, [r3, #6]
100107e8:	2200      	movs	r2, #0
100107ea:	70d9      	strb	r1, [r3, #3]
100107ec:	490a      	ldr	r1, [pc, #40]	; (10010818 <gattc_write_cfm+0x3c>)
100107ee:	701c      	strb	r4, [r3, #0]
100107f0:	3c0a      	subs	r4, #10
100107f2:	705c      	strb	r4, [r3, #1]
100107f4:	709c      	strb	r4, [r3, #2]
100107f6:	880c      	ldrh	r4, [r1, #0]
100107f8:	8809      	ldrh	r1, [r1, #0]
100107fa:	7218      	strb	r0, [r3, #8]
100107fc:	0a09      	lsrs	r1, r1, #8
100107fe:	0a00      	lsrs	r0, r0, #8
10010800:	711c      	strb	r4, [r3, #4]
10010802:	7159      	strb	r1, [r3, #5]
10010804:	7258      	strb	r0, [r3, #9]
10010806:	71da      	strb	r2, [r3, #7]
10010808:	1c18      	adds	r0, r3, #0
1001080a:	210b      	movs	r1, #11
1001080c:	4b03      	ldr	r3, [pc, #12]	; (1001081c <gattc_write_cfm+0x40>)
1001080e:	4798      	blx	r3
10010810:	bd10      	pop	{r4, pc}
10010812:	46c0      	nop			; (mov r8, r8)
10010814:	1001a110 	.word	0x1001a110
10010818:	10019da0 	.word	0x10019da0
1001081c:	1000f4b1 	.word	0x1000f4b1

10010820 <gattc_att_info_cfm>:
10010820:	b538      	push	{r3, r4, r5, lr}
10010822:	4c0e      	ldr	r4, [pc, #56]	; (1001085c <gattc_att_info_cfm+0x3c>)
10010824:	2518      	movs	r5, #24
10010826:	7323      	strb	r3, [r4, #12]
10010828:	2305      	movs	r3, #5
1001082a:	71a3      	strb	r3, [r4, #6]
1001082c:	2300      	movs	r3, #0
1001082e:	70e1      	strb	r1, [r4, #3]
10010830:	490b      	ldr	r1, [pc, #44]	; (10010860 <gattc_att_info_cfm+0x40>)
10010832:	7025      	strb	r5, [r4, #0]
10010834:	3d0c      	subs	r5, #12
10010836:	7065      	strb	r5, [r4, #1]
10010838:	70a5      	strb	r5, [r4, #2]
1001083a:	880d      	ldrh	r5, [r1, #0]
1001083c:	8809      	ldrh	r1, [r1, #0]
1001083e:	7220      	strb	r0, [r4, #8]
10010840:	0a09      	lsrs	r1, r1, #8
10010842:	0a00      	lsrs	r0, r0, #8
10010844:	7161      	strb	r1, [r4, #5]
10010846:	7260      	strb	r0, [r4, #9]
10010848:	72a2      	strb	r2, [r4, #10]
1001084a:	71e3      	strb	r3, [r4, #7]
1001084c:	0a12      	lsrs	r2, r2, #8
1001084e:	1c20      	adds	r0, r4, #0
10010850:	210d      	movs	r1, #13
10010852:	4b04      	ldr	r3, [pc, #16]	; (10010864 <gattc_att_info_cfm+0x44>)
10010854:	7125      	strb	r5, [r4, #4]
10010856:	72e2      	strb	r2, [r4, #11]
10010858:	4798      	blx	r3
1001085a:	bd38      	pop	{r3, r4, r5, pc}
1001085c:	1001a110 	.word	0x1001a110
10010860:	10019da0 	.word	0x10019da0
10010864:	1000f4b1 	.word	0x1000f4b1

10010868 <gattc_event_cfm_handler>:
10010868:	220e      	movs	r2, #14
1001086a:	b508      	push	{r3, lr}
1001086c:	4b0b      	ldr	r3, [pc, #44]	; (1001089c <gattc_event_cfm_handler+0x34>)
1001086e:	701a      	strb	r2, [r3, #0]
10010870:	3a02      	subs	r2, #2
10010872:	705a      	strb	r2, [r3, #1]
10010874:	709a      	strb	r2, [r3, #2]
10010876:	4a0a      	ldr	r2, [pc, #40]	; (100108a0 <gattc_event_cfm_handler+0x38>)
10010878:	70d8      	strb	r0, [r3, #3]
1001087a:	8810      	ldrh	r0, [r2, #0]
1001087c:	8812      	ldrh	r2, [r2, #0]
1001087e:	7219      	strb	r1, [r3, #8]
10010880:	0a12      	lsrs	r2, r2, #8
10010882:	715a      	strb	r2, [r3, #5]
10010884:	2202      	movs	r2, #2
10010886:	719a      	strb	r2, [r3, #6]
10010888:	2200      	movs	r2, #0
1001088a:	0a09      	lsrs	r1, r1, #8
1001088c:	7118      	strb	r0, [r3, #4]
1001088e:	7259      	strb	r1, [r3, #9]
10010890:	71da      	strb	r2, [r3, #7]
10010892:	1c18      	adds	r0, r3, #0
10010894:	210a      	movs	r1, #10
10010896:	4b03      	ldr	r3, [pc, #12]	; (100108a4 <gattc_event_cfm_handler+0x3c>)
10010898:	4798      	blx	r3
1001089a:	bd08      	pop	{r3, pc}
1001089c:	1001a110 	.word	0x1001a110
100108a0:	10019da0 	.word	0x10019da0
100108a4:	1000f4b1 	.word	0x1000f4b1

100108a8 <gattc_disc_svc_ind_parser>:
100108a8:	b570      	push	{r4, r5, r6, lr}
100108aa:	1c15      	adds	r5, r2, #0
100108ac:	0a00      	lsrs	r0, r0, #8
100108ae:	8010      	strh	r0, [r2, #0]
100108b0:	784b      	ldrb	r3, [r1, #1]
100108b2:	780a      	ldrb	r2, [r1, #0]
100108b4:	021b      	lsls	r3, r3, #8
100108b6:	4313      	orrs	r3, r2
100108b8:	806b      	strh	r3, [r5, #2]
100108ba:	78cb      	ldrb	r3, [r1, #3]
100108bc:	788a      	ldrb	r2, [r1, #2]
100108be:	021b      	lsls	r3, r3, #8
100108c0:	4313      	orrs	r3, r2
100108c2:	80ab      	strh	r3, [r5, #4]
100108c4:	790e      	ldrb	r6, [r1, #4]
100108c6:	4b05      	ldr	r3, [pc, #20]	; (100108dc <gattc_disc_svc_ind_parser+0x34>)
100108c8:	1c30      	adds	r0, r6, #0
100108ca:	1c0c      	adds	r4, r1, #0
100108cc:	4798      	blx	r3
100108ce:	1c32      	adds	r2, r6, #0
100108d0:	71a8      	strb	r0, [r5, #6]
100108d2:	1d61      	adds	r1, r4, #5
100108d4:	1de8      	adds	r0, r5, #7
100108d6:	4b02      	ldr	r3, [pc, #8]	; (100108e0 <gattc_disc_svc_ind_parser+0x38>)
100108d8:	4798      	blx	r3
100108da:	bd70      	pop	{r4, r5, r6, pc}
100108dc:	1000e865 	.word	0x1000e865
100108e0:	100147c3 	.word	0x100147c3

100108e4 <gattc_disc_svc_incl_ind_parser>:
100108e4:	b570      	push	{r4, r5, r6, lr}
100108e6:	1c15      	adds	r5, r2, #0
100108e8:	0a00      	lsrs	r0, r0, #8
100108ea:	8010      	strh	r0, [r2, #0]
100108ec:	784b      	ldrb	r3, [r1, #1]
100108ee:	780a      	ldrb	r2, [r1, #0]
100108f0:	021b      	lsls	r3, r3, #8
100108f2:	4313      	orrs	r3, r2
100108f4:	806b      	strh	r3, [r5, #2]
100108f6:	78cb      	ldrb	r3, [r1, #3]
100108f8:	788a      	ldrb	r2, [r1, #2]
100108fa:	021b      	lsls	r3, r3, #8
100108fc:	4313      	orrs	r3, r2
100108fe:	80ab      	strh	r3, [r5, #4]
10010900:	794b      	ldrb	r3, [r1, #5]
10010902:	790a      	ldrb	r2, [r1, #4]
10010904:	021b      	lsls	r3, r3, #8
10010906:	4313      	orrs	r3, r2
10010908:	80eb      	strh	r3, [r5, #6]
1001090a:	798e      	ldrb	r6, [r1, #6]
1001090c:	4b05      	ldr	r3, [pc, #20]	; (10010924 <gattc_disc_svc_incl_ind_parser+0x40>)
1001090e:	1c30      	adds	r0, r6, #0
10010910:	1c0c      	adds	r4, r1, #0
10010912:	4798      	blx	r3
10010914:	7228      	strb	r0, [r5, #8]
10010916:	1c28      	adds	r0, r5, #0
10010918:	1c32      	adds	r2, r6, #0
1001091a:	1de1      	adds	r1, r4, #7
1001091c:	4b02      	ldr	r3, [pc, #8]	; (10010928 <gattc_disc_svc_incl_ind_parser+0x44>)
1001091e:	3009      	adds	r0, #9
10010920:	4798      	blx	r3
10010922:	bd70      	pop	{r4, r5, r6, pc}
10010924:	1000e865 	.word	0x1000e865
10010928:	100147c3 	.word	0x100147c3

1001092c <gattc_disc_char_ind_parser>:
1001092c:	b570      	push	{r4, r5, r6, lr}
1001092e:	1c15      	adds	r5, r2, #0
10010930:	0a00      	lsrs	r0, r0, #8
10010932:	8010      	strh	r0, [r2, #0]
10010934:	784b      	ldrb	r3, [r1, #1]
10010936:	780a      	ldrb	r2, [r1, #0]
10010938:	021b      	lsls	r3, r3, #8
1001093a:	4313      	orrs	r3, r2
1001093c:	806b      	strh	r3, [r5, #2]
1001093e:	78cb      	ldrb	r3, [r1, #3]
10010940:	788a      	ldrb	r2, [r1, #2]
10010942:	021b      	lsls	r3, r3, #8
10010944:	4313      	orrs	r3, r2
10010946:	80ab      	strh	r3, [r5, #4]
10010948:	790b      	ldrb	r3, [r1, #4]
1001094a:	1c0c      	adds	r4, r1, #0
1001094c:	71ab      	strb	r3, [r5, #6]
1001094e:	794e      	ldrb	r6, [r1, #5]
10010950:	4b05      	ldr	r3, [pc, #20]	; (10010968 <gattc_disc_char_ind_parser+0x3c>)
10010952:	1c30      	adds	r0, r6, #0
10010954:	4798      	blx	r3
10010956:	71e8      	strb	r0, [r5, #7]
10010958:	1c28      	adds	r0, r5, #0
1001095a:	1c32      	adds	r2, r6, #0
1001095c:	1da1      	adds	r1, r4, #6
1001095e:	4b03      	ldr	r3, [pc, #12]	; (1001096c <gattc_disc_char_ind_parser+0x40>)
10010960:	3008      	adds	r0, #8
10010962:	4798      	blx	r3
10010964:	bd70      	pop	{r4, r5, r6, pc}
10010966:	46c0      	nop			; (mov r8, r8)
10010968:	1000e865 	.word	0x1000e865
1001096c:	100147c3 	.word	0x100147c3

10010970 <gattc_disc_char_desc_ind_parser>:
10010970:	b570      	push	{r4, r5, r6, lr}
10010972:	1c15      	adds	r5, r2, #0
10010974:	0a00      	lsrs	r0, r0, #8
10010976:	8010      	strh	r0, [r2, #0]
10010978:	784b      	ldrb	r3, [r1, #1]
1001097a:	780a      	ldrb	r2, [r1, #0]
1001097c:	021b      	lsls	r3, r3, #8
1001097e:	4313      	orrs	r3, r2
10010980:	806b      	strh	r3, [r5, #2]
10010982:	788e      	ldrb	r6, [r1, #2]
10010984:	4b05      	ldr	r3, [pc, #20]	; (1001099c <gattc_disc_char_desc_ind_parser+0x2c>)
10010986:	1c30      	adds	r0, r6, #0
10010988:	1c0c      	adds	r4, r1, #0
1001098a:	4798      	blx	r3
1001098c:	1c32      	adds	r2, r6, #0
1001098e:	7128      	strb	r0, [r5, #4]
10010990:	1ce1      	adds	r1, r4, #3
10010992:	1d68      	adds	r0, r5, #5
10010994:	4b02      	ldr	r3, [pc, #8]	; (100109a0 <gattc_disc_char_desc_ind_parser+0x30>)
10010996:	4798      	blx	r3
10010998:	bd70      	pop	{r4, r5, r6, pc}
1001099a:	46c0      	nop			; (mov r8, r8)
1001099c:	1000e865 	.word	0x1000e865
100109a0:	100147c3 	.word	0x100147c3

100109a4 <gattc_event_ind_and_notification_parser>:
100109a4:	b510      	push	{r4, lr}
100109a6:	780c      	ldrb	r4, [r1, #0]
100109a8:	1c13      	adds	r3, r2, #0
100109aa:	2c12      	cmp	r4, #18
100109ac:	d10e      	bne.n	100109cc <gattc_event_ind_and_notification_parser+0x28>
100109ae:	0a00      	lsrs	r0, r0, #8
100109b0:	8010      	strh	r0, [r2, #0]
100109b2:	788a      	ldrb	r2, [r1, #2]
100109b4:	709a      	strb	r2, [r3, #2]
100109b6:	7948      	ldrb	r0, [r1, #5]
100109b8:	790c      	ldrb	r4, [r1, #4]
100109ba:	0200      	lsls	r0, r0, #8
100109bc:	4320      	orrs	r0, r4
100109be:	8098      	strh	r0, [r3, #4]
100109c0:	3106      	adds	r1, #6
100109c2:	1d98      	adds	r0, r3, #6
100109c4:	4b0b      	ldr	r3, [pc, #44]	; (100109f4 <gattc_event_ind_and_notification_parser+0x50>)
100109c6:	4798      	blx	r3
100109c8:	221b      	movs	r2, #27
100109ca:	e010      	b.n	100109ee <gattc_event_ind_and_notification_parser+0x4a>
100109cc:	2200      	movs	r2, #0
100109ce:	2c13      	cmp	r4, #19
100109d0:	d10d      	bne.n	100109ee <gattc_event_ind_and_notification_parser+0x4a>
100109d2:	0a00      	lsrs	r0, r0, #8
100109d4:	8018      	strh	r0, [r3, #0]
100109d6:	788a      	ldrb	r2, [r1, #2]
100109d8:	709a      	strb	r2, [r3, #2]
100109da:	7908      	ldrb	r0, [r1, #4]
100109dc:	78cc      	ldrb	r4, [r1, #3]
100109de:	0200      	lsls	r0, r0, #8
100109e0:	4320      	orrs	r0, r4
100109e2:	8098      	strh	r0, [r3, #4]
100109e4:	3106      	adds	r1, #6
100109e6:	1d98      	adds	r0, r3, #6
100109e8:	4b02      	ldr	r3, [pc, #8]	; (100109f4 <gattc_event_ind_and_notification_parser+0x50>)
100109ea:	4798      	blx	r3
100109ec:	221c      	movs	r2, #28
100109ee:	1c10      	adds	r0, r2, #0
100109f0:	bd10      	pop	{r4, pc}
100109f2:	46c0      	nop			; (mov r8, r8)
100109f4:	100147c3 	.word	0x100147c3

100109f8 <gattc_complete_evt_handler>:
100109f8:	b500      	push	{lr}
100109fa:	0a00      	lsrs	r0, r0, #8
100109fc:	8010      	strh	r0, [r2, #0]
100109fe:	7808      	ldrb	r0, [r1, #0]
10010a00:	7090      	strb	r0, [r2, #2]
10010a02:	784b      	ldrb	r3, [r1, #1]
10010a04:	3801      	subs	r0, #1
10010a06:	70d3      	strb	r3, [r2, #3]
10010a08:	2813      	cmp	r0, #19
10010a0a:	d82c      	bhi.n	10010a66 <gattc_complete_evt_handler+0x6e>
10010a0c:	f001 faec 	bl	10011fe8 <__gnu_thumb1_case_uqi>
10010a10:	0a0a0a0c 	.word	0x0a0a0a0c
10010a14:	210a0a0a 	.word	0x210a0a0a
10010a18:	111f2121 	.word	0x111f2121
10010a1c:	2b111111 	.word	0x2b111111
10010a20:	2919132b 	.word	0x2919132b
10010a24:	2017      	movs	r0, #23
10010a26:	e01f      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a28:	2024      	movs	r0, #36	; 0x24
10010a2a:	2b00      	cmp	r3, #0
10010a2c:	d11c      	bne.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a2e:	3017      	adds	r0, #23
10010a30:	e01a      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a32:	2025      	movs	r0, #37	; 0x25
10010a34:	e018      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a36:	4a0d      	ldr	r2, [pc, #52]	; (10010a6c <gattc_complete_evt_handler+0x74>)
10010a38:	201d      	movs	r0, #29
10010a3a:	6813      	ldr	r3, [r2, #0]
10010a3c:	3b01      	subs	r3, #1
10010a3e:	6013      	str	r3, [r2, #0]
10010a40:	e012      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a42:	4a0a      	ldr	r2, [pc, #40]	; (10010a6c <gattc_complete_evt_handler+0x74>)
10010a44:	201e      	movs	r0, #30
10010a46:	6813      	ldr	r3, [r2, #0]
10010a48:	3b01      	subs	r3, #1
10010a4a:	6013      	str	r3, [r2, #0]
10010a4c:	e00c      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a4e:	2019      	movs	r0, #25
10010a50:	e00a      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a52:	203b      	movs	r0, #59	; 0x3b
10010a54:	2b00      	cmp	r3, #0
10010a56:	d007      	beq.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a58:	2182      	movs	r1, #130	; 0x82
10010a5a:	0089      	lsls	r1, r1, #2
10010a5c:	5453      	strb	r3, [r2, r1]
10010a5e:	3823      	subs	r0, #35	; 0x23
10010a60:	e002      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a62:	2021      	movs	r0, #33	; 0x21
10010a64:	e000      	b.n	10010a68 <gattc_complete_evt_handler+0x70>
10010a66:	2000      	movs	r0, #0
10010a68:	bd00      	pop	{pc}
10010a6a:	46c0      	nop			; (mov r8, r8)
10010a6c:	10018eb4 	.word	0x10018eb4

10010a70 <gattc_event_mtu_changed_ind_parser>:
10010a70:	0a00      	lsrs	r0, r0, #8
10010a72:	8010      	strh	r0, [r2, #0]
10010a74:	784b      	ldrb	r3, [r1, #1]
10010a76:	7809      	ldrb	r1, [r1, #0]
10010a78:	021b      	lsls	r3, r3, #8
10010a7a:	430b      	orrs	r3, r1
10010a7c:	8053      	strh	r3, [r2, #2]
10010a7e:	4770      	bx	lr

10010a80 <gattc_read_ind_parser>:
10010a80:	0a00      	lsrs	r0, r0, #8
10010a82:	b508      	push	{r3, lr}
10010a84:	8010      	strh	r0, [r2, #0]
10010a86:	1c13      	adds	r3, r2, #0
10010a88:	2282      	movs	r2, #130	; 0x82
10010a8a:	2000      	movs	r0, #0
10010a8c:	0092      	lsls	r2, r2, #2
10010a8e:	5498      	strb	r0, [r3, r2]
10010a90:	784a      	ldrb	r2, [r1, #1]
10010a92:	7808      	ldrb	r0, [r1, #0]
10010a94:	0212      	lsls	r2, r2, #8
10010a96:	4302      	orrs	r2, r0
10010a98:	805a      	strh	r2, [r3, #2]
10010a9a:	78ca      	ldrb	r2, [r1, #3]
10010a9c:	7888      	ldrb	r0, [r1, #2]
10010a9e:	0212      	lsls	r2, r2, #8
10010aa0:	4302      	orrs	r2, r0
10010aa2:	80da      	strh	r2, [r3, #6]
10010aa4:	794a      	ldrb	r2, [r1, #5]
10010aa6:	7908      	ldrb	r0, [r1, #4]
10010aa8:	0212      	lsls	r2, r2, #8
10010aaa:	4302      	orrs	r2, r0
10010aac:	809a      	strh	r2, [r3, #4]
10010aae:	3308      	adds	r3, #8
10010ab0:	1c18      	adds	r0, r3, #0
10010ab2:	3106      	adds	r1, #6
10010ab4:	4b01      	ldr	r3, [pc, #4]	; (10010abc <gattc_read_ind_parser+0x3c>)
10010ab6:	4798      	blx	r3
10010ab8:	bd08      	pop	{r3, pc}
10010aba:	46c0      	nop			; (mov r8, r8)
10010abc:	100147c3 	.word	0x100147c3

10010ac0 <gattc_svc_changed_cfg_ind_parser>:
10010ac0:	0a00      	lsrs	r0, r0, #8
10010ac2:	8010      	strh	r0, [r2, #0]
10010ac4:	784b      	ldrb	r3, [r1, #1]
10010ac6:	7809      	ldrb	r1, [r1, #0]
10010ac8:	021b      	lsls	r3, r3, #8
10010aca:	430b      	orrs	r3, r1
10010acc:	8053      	strh	r3, [r2, #2]
10010ace:	4770      	bx	lr

10010ad0 <init_gattc_task_module>:
10010ad0:	2300      	movs	r3, #0
10010ad2:	4a02      	ldr	r2, [pc, #8]	; (10010adc <init_gattc_task_module+0xc>)
10010ad4:	8013      	strh	r3, [r2, #0]
10010ad6:	4a02      	ldr	r2, [pc, #8]	; (10010ae0 <init_gattc_task_module+0x10>)
10010ad8:	8013      	strh	r3, [r2, #0]
10010ada:	4770      	bx	lr
10010adc:	10018eae 	.word	0x10018eae
10010ae0:	10018eb0 	.word	0x10018eb0

10010ae4 <gattm_add_svc_req_handler>:
10010ae4:	2200      	movs	r2, #0
10010ae6:	210b      	movs	r1, #11
10010ae8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010aea:	1c04      	adds	r4, r0, #0
10010aec:	7943      	ldrb	r3, [r0, #5]
10010aee:	b085      	sub	sp, #20
10010af0:	9301      	str	r3, [sp, #4]
10010af2:	ab02      	add	r3, sp, #8
10010af4:	71da      	strb	r2, [r3, #7]
10010af6:	4b37      	ldr	r3, [pc, #220]	; (10010bd4 <gattm_add_svc_req_handler+0xf0>)
10010af8:	7059      	strb	r1, [r3, #1]
10010afa:	7099      	strb	r1, [r3, #2]
10010afc:	4936      	ldr	r1, [pc, #216]	; (10010bd8 <gattm_add_svc_req_handler+0xf4>)
10010afe:	701a      	strb	r2, [r3, #0]
10010b00:	8808      	ldrh	r0, [r1, #0]
10010b02:	8809      	ldrh	r1, [r1, #0]
10010b04:	70da      	strb	r2, [r3, #3]
10010b06:	0a09      	lsrs	r1, r1, #8
10010b08:	7118      	strb	r0, [r3, #4]
10010b0a:	7159      	strb	r1, [r3, #5]
10010b0c:	8821      	ldrh	r1, [r4, #0]
10010b0e:	7219      	strb	r1, [r3, #8]
10010b10:	8821      	ldrh	r1, [r4, #0]
10010b12:	0a09      	lsrs	r1, r1, #8
10010b14:	7259      	strb	r1, [r3, #9]
10010b16:	8861      	ldrh	r1, [r4, #2]
10010b18:	7299      	strb	r1, [r3, #10]
10010b1a:	8861      	ldrh	r1, [r4, #2]
10010b1c:	0a09      	lsrs	r1, r1, #8
10010b1e:	72d9      	strb	r1, [r3, #11]
10010b20:	7921      	ldrb	r1, [r4, #4]
10010b22:	7319      	strb	r1, [r3, #12]
10010b24:	4669      	mov	r1, sp
10010b26:	7909      	ldrb	r1, [r1, #4]
10010b28:	7359      	strb	r1, [r3, #13]
10010b2a:	18a1      	adds	r1, r4, r2
10010b2c:	7988      	ldrb	r0, [r1, #6]
10010b2e:	1899      	adds	r1, r3, r2
10010b30:	3201      	adds	r2, #1
10010b32:	7388      	strb	r0, [r1, #14]
10010b34:	2a10      	cmp	r2, #16
10010b36:	d1f8      	bne.n	10010b2a <gattm_add_svc_req_handler+0x46>
10010b38:	1c27      	adds	r7, r4, #0
10010b3a:	2300      	movs	r3, #0
10010b3c:	251e      	movs	r5, #30
10010b3e:	3716      	adds	r7, #22
10010b40:	9300      	str	r3, [sp, #0]
10010b42:	9b00      	ldr	r3, [sp, #0]
10010b44:	9a01      	ldr	r2, [sp, #4]
10010b46:	4e23      	ldr	r6, [pc, #140]	; (10010bd4 <gattm_add_svc_req_handler+0xf0>)
10010b48:	4293      	cmp	r3, r2
10010b4a:	da21      	bge.n	10010b90 <gattm_add_svc_req_handler+0xac>
10010b4c:	1c39      	adds	r1, r7, #0
10010b4e:	1970      	adds	r0, r6, r5
10010b50:	2210      	movs	r2, #16
10010b52:	4b22      	ldr	r3, [pc, #136]	; (10010bdc <gattm_add_svc_req_handler+0xf8>)
10010b54:	4798      	blx	r3
10010b56:	1c2b      	adds	r3, r5, #0
10010b58:	8a3a      	ldrh	r2, [r7, #16]
10010b5a:	3310      	adds	r3, #16
10010b5c:	b29b      	uxth	r3, r3
10010b5e:	54f2      	strb	r2, [r6, r3]
10010b60:	1c2b      	adds	r3, r5, #0
10010b62:	8a3a      	ldrh	r2, [r7, #16]
10010b64:	3311      	adds	r3, #17
10010b66:	b29b      	uxth	r3, r3
10010b68:	0a12      	lsrs	r2, r2, #8
10010b6a:	54f2      	strb	r2, [r6, r3]
10010b6c:	1c2a      	adds	r2, r5, #0
10010b6e:	1c2b      	adds	r3, r5, #0
10010b70:	8a79      	ldrh	r1, [r7, #18]
10010b72:	3212      	adds	r2, #18
10010b74:	b292      	uxth	r2, r2
10010b76:	54b1      	strb	r1, [r6, r2]
10010b78:	8a7a      	ldrh	r2, [r7, #18]
10010b7a:	3313      	adds	r3, #19
10010b7c:	b29b      	uxth	r3, r3
10010b7e:	0a12      	lsrs	r2, r2, #8
10010b80:	54f2      	strb	r2, [r6, r3]
10010b82:	9b00      	ldr	r3, [sp, #0]
10010b84:	3514      	adds	r5, #20
10010b86:	3301      	adds	r3, #1
10010b88:	b2ad      	uxth	r5, r5
10010b8a:	9300      	str	r3, [sp, #0]
10010b8c:	3714      	adds	r7, #20
10010b8e:	e7d8      	b.n	10010b42 <gattm_add_svc_req_handler+0x5e>
10010b90:	2114      	movs	r1, #20
10010b92:	4d13      	ldr	r5, [pc, #76]	; (10010be0 <gattm_add_svc_req_handler+0xfc>)
10010b94:	4b13      	ldr	r3, [pc, #76]	; (10010be4 <gattm_add_svc_req_handler+0x100>)
10010b96:	4351      	muls	r1, r2
10010b98:	802b      	strh	r3, [r5, #0]
10010b9a:	230b      	movs	r3, #11
10010b9c:	311e      	adds	r1, #30
10010b9e:	80ab      	strh	r3, [r5, #4]
10010ba0:	1c0b      	adds	r3, r1, #0
10010ba2:	3b08      	subs	r3, #8
10010ba4:	71b3      	strb	r3, [r6, #6]
10010ba6:	121b      	asrs	r3, r3, #8
10010ba8:	71f3      	strb	r3, [r6, #7]
10010baa:	1c30      	adds	r0, r6, #0
10010bac:	4b0e      	ldr	r3, [pc, #56]	; (10010be8 <gattm_add_svc_req_handler+0x104>)
10010bae:	4798      	blx	r3
10010bb0:	ab02      	add	r3, sp, #8
10010bb2:	1dde      	adds	r6, r3, #7
10010bb4:	1c30      	adds	r0, r6, #0
10010bb6:	4b0d      	ldr	r3, [pc, #52]	; (10010bec <gattm_add_svc_req_handler+0x108>)
10010bb8:	4798      	blx	r3
10010bba:	7833      	ldrb	r3, [r6, #0]
10010bbc:	20e2      	movs	r0, #226	; 0xe2
10010bbe:	2b00      	cmp	r3, #0
10010bc0:	d106      	bne.n	10010bd0 <gattm_add_svc_req_handler+0xec>
10010bc2:	68aa      	ldr	r2, [r5, #8]
10010bc4:	7853      	ldrb	r3, [r2, #1]
10010bc6:	7811      	ldrb	r1, [r2, #0]
10010bc8:	021b      	lsls	r3, r3, #8
10010bca:	430b      	orrs	r3, r1
10010bcc:	8023      	strh	r3, [r4, #0]
10010bce:	7890      	ldrb	r0, [r2, #2]
10010bd0:	b005      	add	sp, #20
10010bd2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010bd4:	1001a110 	.word	0x1001a110
10010bd8:	10019da0 	.word	0x10019da0
10010bdc:	100147c3 	.word	0x100147c3
10010be0:	10019d94 	.word	0x10019d94
10010be4:	00000b01 	.word	0x00000b01
10010be8:	1000f4b1 	.word	0x1000f4b1
10010bec:	1000f515 	.word	0x1000f515

10010bf0 <gattm_add_attribute_req_handler>:
10010bf0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010bf2:	1c1f      	adds	r7, r3, #0
10010bf4:	4b16      	ldr	r3, [pc, #88]	; (10010c50 <gattm_add_attribute_req_handler+0x60>)
10010bf6:	9100      	str	r1, [sp, #0]
10010bf8:	9201      	str	r2, [sp, #4]
10010bfa:	1c05      	adds	r5, r0, #0
10010bfc:	7946      	ldrb	r6, [r0, #5]
10010bfe:	6818      	ldr	r0, [r3, #0]
10010c00:	2114      	movs	r1, #20
10010c02:	4b14      	ldr	r3, [pc, #80]	; (10010c54 <gattm_add_attribute_req_handler+0x64>)
10010c04:	382a      	subs	r0, #42	; 0x2a
10010c06:	4798      	blx	r3
10010c08:	2311      	movs	r3, #17
10010c0a:	4286      	cmp	r6, r0
10010c0c:	d21e      	bcs.n	10010c4c <gattm_add_attribute_req_handler+0x5c>
10010c0e:	2414      	movs	r4, #20
10010c10:	4366      	muls	r6, r4
10010c12:	19a8      	adds	r0, r5, r6
10010c14:	2100      	movs	r1, #0
10010c16:	2210      	movs	r2, #16
10010c18:	4b0f      	ldr	r3, [pc, #60]	; (10010c58 <gattm_add_attribute_req_handler+0x68>)
10010c1a:	3016      	adds	r0, #22
10010c1c:	4798      	blx	r3
10010c1e:	7968      	ldrb	r0, [r5, #5]
10010c20:	1c3a      	adds	r2, r7, #0
10010c22:	4360      	muls	r0, r4
10010c24:	1828      	adds	r0, r5, r0
10010c26:	4b0d      	ldr	r3, [pc, #52]	; (10010c5c <gattm_add_attribute_req_handler+0x6c>)
10010c28:	3016      	adds	r0, #22
10010c2a:	9908      	ldr	r1, [sp, #32]
10010c2c:	4798      	blx	r3
10010c2e:	466a      	mov	r2, sp
10010c30:	796b      	ldrb	r3, [r5, #5]
10010c32:	8812      	ldrh	r2, [r2, #0]
10010c34:	435c      	muls	r4, r3
10010c36:	192c      	adds	r4, r5, r4
10010c38:	8522      	strh	r2, [r4, #40]	; 0x28
10010c3a:	466a      	mov	r2, sp
10010c3c:	8892      	ldrh	r2, [r2, #4]
10010c3e:	84e2      	strh	r2, [r4, #38]	; 0x26
10010c40:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010c42:	8013      	strh	r3, [r2, #0]
10010c44:	796b      	ldrb	r3, [r5, #5]
10010c46:	3301      	adds	r3, #1
10010c48:	716b      	strb	r3, [r5, #5]
10010c4a:	2300      	movs	r3, #0
10010c4c:	1c18      	adds	r0, r3, #0
10010c4e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010c50:	10018e24 	.word	0x10018e24
10010c54:	10011ffd 	.word	0x10011ffd
10010c58:	100147d5 	.word	0x100147d5
10010c5c:	100147c3 	.word	0x100147c3

10010c60 <gattm_att_set_value_req_handler>:
10010c60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010c62:	466b      	mov	r3, sp
10010c64:	1dde      	adds	r6, r3, #7
10010c66:	2300      	movs	r3, #0
10010c68:	1c0d      	adds	r5, r1, #0
10010c6a:	210c      	movs	r1, #12
10010c6c:	270b      	movs	r7, #11
10010c6e:	4c17      	ldr	r4, [pc, #92]	; (10010ccc <gattm_att_set_value_req_handler+0x6c>)
10010c70:	7033      	strb	r3, [r6, #0]
10010c72:	70e3      	strb	r3, [r4, #3]
10010c74:	4b16      	ldr	r3, [pc, #88]	; (10010cd0 <gattm_att_set_value_req_handler+0x70>)
10010c76:	7021      	strb	r1, [r4, #0]
10010c78:	8819      	ldrh	r1, [r3, #0]
10010c7a:	881b      	ldrh	r3, [r3, #0]
10010c7c:	7220      	strb	r0, [r4, #8]
10010c7e:	0a1b      	lsrs	r3, r3, #8
10010c80:	7163      	strb	r3, [r4, #5]
10010c82:	0a00      	lsrs	r0, r0, #8
10010c84:	0a2b      	lsrs	r3, r5, #8
10010c86:	7121      	strb	r1, [r4, #4]
10010c88:	7260      	strb	r0, [r4, #9]
10010c8a:	1c11      	adds	r1, r2, #0
10010c8c:	72a5      	strb	r5, [r4, #10]
10010c8e:	1c2a      	adds	r2, r5, #0
10010c90:	72e3      	strb	r3, [r4, #11]
10010c92:	350c      	adds	r5, #12
10010c94:	4b0f      	ldr	r3, [pc, #60]	; (10010cd4 <gattm_att_set_value_req_handler+0x74>)
10010c96:	4810      	ldr	r0, [pc, #64]	; (10010cd8 <gattm_att_set_value_req_handler+0x78>)
10010c98:	7067      	strb	r7, [r4, #1]
10010c9a:	70a7      	strb	r7, [r4, #2]
10010c9c:	4798      	blx	r3
10010c9e:	b2a9      	uxth	r1, r5
10010ca0:	4b0e      	ldr	r3, [pc, #56]	; (10010cdc <gattm_att_set_value_req_handler+0x7c>)
10010ca2:	4d0f      	ldr	r5, [pc, #60]	; (10010ce0 <gattm_att_set_value_req_handler+0x80>)
10010ca4:	1c20      	adds	r0, r4, #0
10010ca6:	802b      	strh	r3, [r5, #0]
10010ca8:	1c0b      	adds	r3, r1, #0
10010caa:	3b08      	subs	r3, #8
10010cac:	71a3      	strb	r3, [r4, #6]
10010cae:	121b      	asrs	r3, r3, #8
10010cb0:	71e3      	strb	r3, [r4, #7]
10010cb2:	4b0c      	ldr	r3, [pc, #48]	; (10010ce4 <gattm_att_set_value_req_handler+0x84>)
10010cb4:	80af      	strh	r7, [r5, #4]
10010cb6:	4798      	blx	r3
10010cb8:	1c30      	adds	r0, r6, #0
10010cba:	4b0b      	ldr	r3, [pc, #44]	; (10010ce8 <gattm_att_set_value_req_handler+0x88>)
10010cbc:	4798      	blx	r3
10010cbe:	7833      	ldrb	r3, [r6, #0]
10010cc0:	20e2      	movs	r0, #226	; 0xe2
10010cc2:	2b00      	cmp	r3, #0
10010cc4:	d101      	bne.n	10010cca <gattm_att_set_value_req_handler+0x6a>
10010cc6:	68ab      	ldr	r3, [r5, #8]
10010cc8:	7898      	ldrb	r0, [r3, #2]
10010cca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010ccc:	1001a110 	.word	0x1001a110
10010cd0:	10019da0 	.word	0x10019da0
10010cd4:	100147c3 	.word	0x100147c3
10010cd8:	1001a11c 	.word	0x1001a11c
10010cdc:	00000b0d 	.word	0x00000b0d
10010ce0:	10019d94 	.word	0x10019d94
10010ce4:	1000f4b1 	.word	0x1000f4b1
10010ce8:	1000f515 	.word	0x1000f515

10010cec <gattm_att_get_value_req_handler>:
10010cec:	b5f0      	push	{r4, r5, r6, r7, lr}
10010cee:	b085      	sub	sp, #20
10010cf0:	9201      	str	r2, [sp, #4]
10010cf2:	220a      	movs	r2, #10
10010cf4:	1c04      	adds	r4, r0, #0
10010cf6:	481d      	ldr	r0, [pc, #116]	; (10010d6c <gattm_att_get_value_req_handler+0x80>)
10010cf8:	ab02      	add	r3, sp, #8
10010cfa:	1dde      	adds	r6, r3, #7
10010cfc:	7002      	strb	r2, [r0, #0]
10010cfe:	2300      	movs	r3, #0
10010d00:	220b      	movs	r2, #11
10010d02:	4d1b      	ldr	r5, [pc, #108]	; (10010d70 <gattm_att_get_value_req_handler+0x84>)
10010d04:	1c0f      	adds	r7, r1, #0
10010d06:	8829      	ldrh	r1, [r5, #0]
10010d08:	882d      	ldrh	r5, [r5, #0]
10010d0a:	7101      	strb	r1, [r0, #4]
10010d0c:	0a2d      	lsrs	r5, r5, #8
10010d0e:	7145      	strb	r5, [r0, #5]
10010d10:	0a25      	lsrs	r5, r4, #8
10010d12:	7245      	strb	r5, [r0, #9]
10010d14:	4917      	ldr	r1, [pc, #92]	; (10010d74 <gattm_att_get_value_req_handler+0x88>)
10010d16:	4d18      	ldr	r5, [pc, #96]	; (10010d78 <gattm_att_get_value_req_handler+0x8c>)
10010d18:	7033      	strb	r3, [r6, #0]
10010d1a:	7042      	strb	r2, [r0, #1]
10010d1c:	7082      	strb	r2, [r0, #2]
10010d1e:	70c3      	strb	r3, [r0, #3]
10010d20:	8029      	strh	r1, [r5, #0]
10010d22:	80aa      	strh	r2, [r5, #4]
10010d24:	71c3      	strb	r3, [r0, #7]
10010d26:	3a09      	subs	r2, #9
10010d28:	210a      	movs	r1, #10
10010d2a:	4b14      	ldr	r3, [pc, #80]	; (10010d7c <gattm_att_get_value_req_handler+0x90>)
10010d2c:	7182      	strb	r2, [r0, #6]
10010d2e:	7204      	strb	r4, [r0, #8]
10010d30:	4798      	blx	r3
10010d32:	1c30      	adds	r0, r6, #0
10010d34:	4b12      	ldr	r3, [pc, #72]	; (10010d80 <gattm_att_get_value_req_handler+0x94>)
10010d36:	4798      	blx	r3
10010d38:	7833      	ldrb	r3, [r6, #0]
10010d3a:	20e2      	movs	r0, #226	; 0xe2
10010d3c:	2b00      	cmp	r3, #0
10010d3e:	d112      	bne.n	10010d66 <gattm_att_get_value_req_handler+0x7a>
10010d40:	68a9      	ldr	r1, [r5, #8]
10010d42:	9801      	ldr	r0, [sp, #4]
10010d44:	784d      	ldrb	r5, [r1, #1]
10010d46:	780b      	ldrb	r3, [r1, #0]
10010d48:	78ca      	ldrb	r2, [r1, #3]
10010d4a:	022d      	lsls	r5, r5, #8
10010d4c:	431d      	orrs	r5, r3
10010d4e:	788b      	ldrb	r3, [r1, #2]
10010d50:	0212      	lsls	r2, r2, #8
10010d52:	431a      	orrs	r2, r3
10010d54:	803a      	strh	r2, [r7, #0]
10010d56:	790e      	ldrb	r6, [r1, #4]
10010d58:	4b0a      	ldr	r3, [pc, #40]	; (10010d84 <gattm_att_get_value_req_handler+0x98>)
10010d5a:	3105      	adds	r1, #5
10010d5c:	4798      	blx	r3
10010d5e:	20e2      	movs	r0, #226	; 0xe2
10010d60:	42ac      	cmp	r4, r5
10010d62:	d100      	bne.n	10010d66 <gattm_att_get_value_req_handler+0x7a>
10010d64:	1c30      	adds	r0, r6, #0
10010d66:	b005      	add	sp, #20
10010d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d6a:	46c0      	nop			; (mov r8, r8)
10010d6c:	1001a110 	.word	0x1001a110
10010d70:	10019da0 	.word	0x10019da0
10010d74:	00000b0b 	.word	0x00000b0b
10010d78:	10019d94 	.word	0x10019d94
10010d7c:	1000f4b1 	.word	0x1000f4b1
10010d80:	1000f515 	.word	0x1000f515
10010d84:	100147c3 	.word	0x100147c3

10010d88 <htpt_enable_rsp_handler>:
10010d88:	780b      	ldrb	r3, [r1, #0]
10010d8a:	7013      	strb	r3, [r2, #0]
10010d8c:	784b      	ldrb	r3, [r1, #1]
10010d8e:	7053      	strb	r3, [r2, #1]
10010d90:	4770      	bx	lr

10010d92 <htpt_temp_send_rsp_handler>:
10010d92:	780b      	ldrb	r3, [r1, #0]
10010d94:	7013      	strb	r3, [r2, #0]
10010d96:	4770      	bx	lr

10010d98 <htpt_meas_intv_upd_rsp_handler>:
10010d98:	780b      	ldrb	r3, [r1, #0]
10010d9a:	7013      	strb	r3, [r2, #0]
10010d9c:	4770      	bx	lr

10010d9e <htpt_meas_intv_chg_req_ind_handler>:
10010d9e:	78cb      	ldrb	r3, [r1, #3]
10010da0:	7889      	ldrb	r1, [r1, #2]
10010da2:	021b      	lsls	r3, r3, #8
10010da4:	430b      	orrs	r3, r1
10010da6:	8013      	strh	r3, [r2, #0]
10010da8:	4770      	bx	lr

10010daa <htpt_cfg_indntf_ind_handler>:
10010daa:	780b      	ldrb	r3, [r1, #0]
10010dac:	7013      	strb	r3, [r2, #0]
10010dae:	784b      	ldrb	r3, [r1, #1]
10010db0:	7053      	strb	r3, [r2, #1]
10010db2:	4770      	bx	lr

10010db4 <pow>:
10010db4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010db6:	465f      	mov	r7, fp
10010db8:	464d      	mov	r5, r9
10010dba:	4656      	mov	r6, sl
10010dbc:	4644      	mov	r4, r8
10010dbe:	b4f0      	push	{r4, r5, r6, r7}
10010dc0:	b091      	sub	sp, #68	; 0x44
10010dc2:	001f      	movs	r7, r3
10010dc4:	0004      	movs	r4, r0
10010dc6:	000d      	movs	r5, r1
10010dc8:	0016      	movs	r6, r2
10010dca:	f000 f9af 	bl	1001112c <__ieee754_pow>
10010dce:	4bcf      	ldr	r3, [pc, #828]	; (1001110c <pow+0x358>)
10010dd0:	9002      	str	r0, [sp, #8]
10010dd2:	9103      	str	r1, [sp, #12]
10010dd4:	469b      	mov	fp, r3
10010dd6:	781b      	ldrb	r3, [r3, #0]
10010dd8:	b25b      	sxtb	r3, r3
10010dda:	4699      	mov	r9, r3
10010ddc:	3301      	adds	r3, #1
10010dde:	d04f      	beq.n	10010e80 <pow+0xcc>
10010de0:	0032      	movs	r2, r6
10010de2:	003b      	movs	r3, r7
10010de4:	0030      	movs	r0, r6
10010de6:	0039      	movs	r1, r7
10010de8:	f003 fad8 	bl	1001439c <__aeabi_dcmpun>
10010dec:	9000      	str	r0, [sp, #0]
10010dee:	2800      	cmp	r0, #0
10010df0:	d146      	bne.n	10010e80 <pow+0xcc>
10010df2:	0022      	movs	r2, r4
10010df4:	002b      	movs	r3, r5
10010df6:	0020      	movs	r0, r4
10010df8:	0029      	movs	r1, r5
10010dfa:	f003 facf 	bl	1001439c <__aeabi_dcmpun>
10010dfe:	2200      	movs	r2, #0
10010e00:	4682      	mov	sl, r0
10010e02:	2800      	cmp	r0, #0
10010e04:	d134      	bne.n	10010e70 <pow+0xbc>
10010e06:	2300      	movs	r3, #0
10010e08:	0020      	movs	r0, r4
10010e0a:	0029      	movs	r1, r5
10010e0c:	f001 fa7c 	bl	10012308 <__aeabi_dcmpeq>
10010e10:	2800      	cmp	r0, #0
10010e12:	d03a      	beq.n	10010e8a <pow+0xd6>
10010e14:	2200      	movs	r2, #0
10010e16:	2300      	movs	r3, #0
10010e18:	0030      	movs	r0, r6
10010e1a:	0039      	movs	r1, r7
10010e1c:	f001 fa74 	bl	10012308 <__aeabi_dcmpeq>
10010e20:	9005      	str	r0, [sp, #20]
10010e22:	2800      	cmp	r0, #0
10010e24:	d100      	bne.n	10010e28 <pow+0x74>
10010e26:	e074      	b.n	10010f12 <pow+0x15e>
10010e28:	ab06      	add	r3, sp, #24
10010e2a:	4698      	mov	r8, r3
10010e2c:	2301      	movs	r3, #1
10010e2e:	4642      	mov	r2, r8
10010e30:	9306      	str	r3, [sp, #24]
10010e32:	4bb7      	ldr	r3, [pc, #732]	; (10011110 <pow+0x35c>)
10010e34:	6053      	str	r3, [r2, #4]
10010e36:	4643      	mov	r3, r8
10010e38:	4652      	mov	r2, sl
10010e3a:	609c      	str	r4, [r3, #8]
10010e3c:	60dd      	str	r5, [r3, #12]
10010e3e:	621a      	str	r2, [r3, #32]
10010e40:	611e      	str	r6, [r3, #16]
10010e42:	615f      	str	r7, [r3, #20]
10010e44:	4642      	mov	r2, r8
10010e46:	2300      	movs	r3, #0
10010e48:	2400      	movs	r4, #0
10010e4a:	6193      	str	r3, [r2, #24]
10010e4c:	61d4      	str	r4, [r2, #28]
10010e4e:	464b      	mov	r3, r9
10010e50:	2b00      	cmp	r3, #0
10010e52:	d100      	bne.n	10010e56 <pow+0xa2>
10010e54:	e094      	b.n	10010f80 <pow+0x1cc>
10010e56:	2300      	movs	r3, #0
10010e58:	4cae      	ldr	r4, [pc, #696]	; (10011114 <pow+0x360>)
10010e5a:	9300      	str	r3, [sp, #0]
10010e5c:	9401      	str	r4, [sp, #4]
10010e5e:	9800      	ldr	r0, [sp, #0]
10010e60:	9901      	ldr	r1, [sp, #4]
10010e62:	b011      	add	sp, #68	; 0x44
10010e64:	bc3c      	pop	{r2, r3, r4, r5}
10010e66:	4690      	mov	r8, r2
10010e68:	4699      	mov	r9, r3
10010e6a:	46a2      	mov	sl, r4
10010e6c:	46ab      	mov	fp, r5
10010e6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e70:	2300      	movs	r3, #0
10010e72:	0030      	movs	r0, r6
10010e74:	0039      	movs	r1, r7
10010e76:	f001 fa47 	bl	10012308 <__aeabi_dcmpeq>
10010e7a:	2800      	cmp	r0, #0
10010e7c:	d000      	beq.n	10010e80 <pow+0xcc>
10010e7e:	e0eb      	b.n	10011058 <pow+0x2a4>
10010e80:	9b02      	ldr	r3, [sp, #8]
10010e82:	9c03      	ldr	r4, [sp, #12]
10010e84:	9300      	str	r3, [sp, #0]
10010e86:	9401      	str	r4, [sp, #4]
10010e88:	e7e9      	b.n	10010e5e <pow+0xaa>
10010e8a:	9802      	ldr	r0, [sp, #8]
10010e8c:	9903      	ldr	r1, [sp, #12]
10010e8e:	f000 ff7d 	bl	10011d8c <finite>
10010e92:	4681      	mov	r9, r0
10010e94:	2800      	cmp	r0, #0
10010e96:	d100      	bne.n	10010e9a <pow+0xe6>
10010e98:	e086      	b.n	10010fa8 <pow+0x1f4>
10010e9a:	9802      	ldr	r0, [sp, #8]
10010e9c:	9903      	ldr	r1, [sp, #12]
10010e9e:	2200      	movs	r2, #0
10010ea0:	2300      	movs	r3, #0
10010ea2:	f001 fa31 	bl	10012308 <__aeabi_dcmpeq>
10010ea6:	2800      	cmp	r0, #0
10010ea8:	d0ea      	beq.n	10010e80 <pow+0xcc>
10010eaa:	0020      	movs	r0, r4
10010eac:	0029      	movs	r1, r5
10010eae:	f000 ff6d 	bl	10011d8c <finite>
10010eb2:	9a02      	ldr	r2, [sp, #8]
10010eb4:	9b03      	ldr	r3, [sp, #12]
10010eb6:	9200      	str	r2, [sp, #0]
10010eb8:	9301      	str	r3, [sp, #4]
10010eba:	2800      	cmp	r0, #0
10010ebc:	d0cf      	beq.n	10010e5e <pow+0xaa>
10010ebe:	0030      	movs	r0, r6
10010ec0:	0039      	movs	r1, r7
10010ec2:	f000 ff63 	bl	10011d8c <finite>
10010ec6:	9a02      	ldr	r2, [sp, #8]
10010ec8:	9b03      	ldr	r3, [sp, #12]
10010eca:	9200      	str	r2, [sp, #0]
10010ecc:	9301      	str	r3, [sp, #4]
10010ece:	2800      	cmp	r0, #0
10010ed0:	d0c5      	beq.n	10010e5e <pow+0xaa>
10010ed2:	ab06      	add	r3, sp, #24
10010ed4:	4698      	mov	r8, r3
10010ed6:	2304      	movs	r3, #4
10010ed8:	4642      	mov	r2, r8
10010eda:	9306      	str	r3, [sp, #24]
10010edc:	4b8c      	ldr	r3, [pc, #560]	; (10011110 <pow+0x35c>)
10010ede:	6094      	str	r4, [r2, #8]
10010ee0:	60d5      	str	r5, [r2, #12]
10010ee2:	6053      	str	r3, [r2, #4]
10010ee4:	2300      	movs	r3, #0
10010ee6:	2400      	movs	r4, #0
10010ee8:	6213      	str	r3, [r2, #32]
10010eea:	2300      	movs	r3, #0
10010eec:	6193      	str	r3, [r2, #24]
10010eee:	61d4      	str	r4, [r2, #28]
10010ef0:	465b      	mov	r3, fp
10010ef2:	781b      	ldrb	r3, [r3, #0]
10010ef4:	6116      	str	r6, [r2, #16]
10010ef6:	6157      	str	r7, [r2, #20]
10010ef8:	b25b      	sxtb	r3, r3
10010efa:	2b02      	cmp	r3, #2
10010efc:	d004      	beq.n	10010f08 <pow+0x154>
10010efe:	4640      	mov	r0, r8
10010f00:	f000 ff4e 	bl	10011da0 <matherr>
10010f04:	2800      	cmp	r0, #0
10010f06:	d140      	bne.n	10010f8a <pow+0x1d6>
10010f08:	f003 fc16 	bl	10014738 <__errno>
10010f0c:	2322      	movs	r3, #34	; 0x22
10010f0e:	6003      	str	r3, [r0, #0]
10010f10:	e03b      	b.n	10010f8a <pow+0x1d6>
10010f12:	0030      	movs	r0, r6
10010f14:	0039      	movs	r1, r7
10010f16:	f000 ff39 	bl	10011d8c <finite>
10010f1a:	9a02      	ldr	r2, [sp, #8]
10010f1c:	9b03      	ldr	r3, [sp, #12]
10010f1e:	9200      	str	r2, [sp, #0]
10010f20:	9301      	str	r3, [sp, #4]
10010f22:	2800      	cmp	r0, #0
10010f24:	d09b      	beq.n	10010e5e <pow+0xaa>
10010f26:	2200      	movs	r2, #0
10010f28:	2300      	movs	r3, #0
10010f2a:	0030      	movs	r0, r6
10010f2c:	0039      	movs	r1, r7
10010f2e:	f001 f9f1 	bl	10012314 <__aeabi_dcmplt>
10010f32:	2800      	cmp	r0, #0
10010f34:	d100      	bne.n	10010f38 <pow+0x184>
10010f36:	e792      	b.n	10010e5e <pow+0xaa>
10010f38:	ab06      	add	r3, sp, #24
10010f3a:	4698      	mov	r8, r3
10010f3c:	2301      	movs	r3, #1
10010f3e:	4642      	mov	r2, r8
10010f40:	9306      	str	r3, [sp, #24]
10010f42:	4b73      	ldr	r3, [pc, #460]	; (10011110 <pow+0x35c>)
10010f44:	6053      	str	r3, [r2, #4]
10010f46:	4643      	mov	r3, r8
10010f48:	9a05      	ldr	r2, [sp, #20]
10010f4a:	609c      	str	r4, [r3, #8]
10010f4c:	60dd      	str	r5, [r3, #12]
10010f4e:	621a      	str	r2, [r3, #32]
10010f50:	611e      	str	r6, [r3, #16]
10010f52:	615f      	str	r7, [r3, #20]
10010f54:	465b      	mov	r3, fp
10010f56:	781b      	ldrb	r3, [r3, #0]
10010f58:	b25b      	sxtb	r3, r3
10010f5a:	2b00      	cmp	r3, #0
10010f5c:	d00b      	beq.n	10010f76 <pow+0x1c2>
10010f5e:	2000      	movs	r0, #0
10010f60:	4642      	mov	r2, r8
10010f62:	496d      	ldr	r1, [pc, #436]	; (10011118 <pow+0x364>)
10010f64:	6190      	str	r0, [r2, #24]
10010f66:	61d1      	str	r1, [r2, #28]
10010f68:	2b02      	cmp	r3, #2
10010f6a:	d109      	bne.n	10010f80 <pow+0x1cc>
10010f6c:	f003 fbe4 	bl	10014738 <__errno>
10010f70:	2321      	movs	r3, #33	; 0x21
10010f72:	6003      	str	r3, [r0, #0]
10010f74:	e009      	b.n	10010f8a <pow+0x1d6>
10010f76:	4642      	mov	r2, r8
10010f78:	2300      	movs	r3, #0
10010f7a:	2400      	movs	r4, #0
10010f7c:	6193      	str	r3, [r2, #24]
10010f7e:	61d4      	str	r4, [r2, #28]
10010f80:	4640      	mov	r0, r8
10010f82:	f000 ff0d 	bl	10011da0 <matherr>
10010f86:	2800      	cmp	r0, #0
10010f88:	d0f0      	beq.n	10010f6c <pow+0x1b8>
10010f8a:	4643      	mov	r3, r8
10010f8c:	6a1b      	ldr	r3, [r3, #32]
10010f8e:	2b00      	cmp	r3, #0
10010f90:	d004      	beq.n	10010f9c <pow+0x1e8>
10010f92:	f003 fbd1 	bl	10014738 <__errno>
10010f96:	4643      	mov	r3, r8
10010f98:	6a1b      	ldr	r3, [r3, #32]
10010f9a:	6003      	str	r3, [r0, #0]
10010f9c:	4643      	mov	r3, r8
10010f9e:	69dc      	ldr	r4, [r3, #28]
10010fa0:	699b      	ldr	r3, [r3, #24]
10010fa2:	9300      	str	r3, [sp, #0]
10010fa4:	9401      	str	r4, [sp, #4]
10010fa6:	e75a      	b.n	10010e5e <pow+0xaa>
10010fa8:	0020      	movs	r0, r4
10010faa:	0029      	movs	r1, r5
10010fac:	f000 feee 	bl	10011d8c <finite>
10010fb0:	2800      	cmp	r0, #0
10010fb2:	d100      	bne.n	10010fb6 <pow+0x202>
10010fb4:	e771      	b.n	10010e9a <pow+0xe6>
10010fb6:	0030      	movs	r0, r6
10010fb8:	0039      	movs	r1, r7
10010fba:	f000 fee7 	bl	10011d8c <finite>
10010fbe:	2800      	cmp	r0, #0
10010fc0:	d100      	bne.n	10010fc4 <pow+0x210>
10010fc2:	e76a      	b.n	10010e9a <pow+0xe6>
10010fc4:	9802      	ldr	r0, [sp, #8]
10010fc6:	9903      	ldr	r1, [sp, #12]
10010fc8:	000b      	movs	r3, r1
10010fca:	0002      	movs	r2, r0
10010fcc:	f003 f9e6 	bl	1001439c <__aeabi_dcmpun>
10010fd0:	ab06      	add	r3, sp, #24
10010fd2:	4698      	mov	r8, r3
10010fd4:	2800      	cmp	r0, #0
10010fd6:	d17a      	bne.n	100110ce <pow+0x31a>
10010fd8:	2303      	movs	r3, #3
10010fda:	4642      	mov	r2, r8
10010fdc:	9306      	str	r3, [sp, #24]
10010fde:	4b4c      	ldr	r3, [pc, #304]	; (10011110 <pow+0x35c>)
10010fe0:	6210      	str	r0, [r2, #32]
10010fe2:	6053      	str	r3, [r2, #4]
10010fe4:	465b      	mov	r3, fp
10010fe6:	781b      	ldrb	r3, [r3, #0]
10010fe8:	6094      	str	r4, [r2, #8]
10010fea:	60d5      	str	r5, [r2, #12]
10010fec:	b25b      	sxtb	r3, r3
10010fee:	6116      	str	r6, [r2, #16]
10010ff0:	6157      	str	r7, [r2, #20]
10010ff2:	4699      	mov	r9, r3
10010ff4:	2b00      	cmp	r3, #0
10010ff6:	d148      	bne.n	1001108a <pow+0x2d6>
10010ff8:	22e0      	movs	r2, #224	; 0xe0
10010ffa:	4641      	mov	r1, r8
10010ffc:	4b47      	ldr	r3, [pc, #284]	; (1001111c <pow+0x368>)
10010ffe:	0612      	lsls	r2, r2, #24
10011000:	618a      	str	r2, [r1, #24]
10011002:	61cb      	str	r3, [r1, #28]
10011004:	0020      	movs	r0, r4
10011006:	2200      	movs	r2, #0
10011008:	2300      	movs	r3, #0
1001100a:	0029      	movs	r1, r5
1001100c:	f001 f982 	bl	10012314 <__aeabi_dcmplt>
10011010:	2800      	cmp	r0, #0
10011012:	d100      	bne.n	10011016 <pow+0x262>
10011014:	e773      	b.n	10010efe <pow+0x14a>
10011016:	2200      	movs	r2, #0
10011018:	4b41      	ldr	r3, [pc, #260]	; (10011120 <pow+0x36c>)
1001101a:	0030      	movs	r0, r6
1001101c:	0039      	movs	r1, r7
1001101e:	f002 fbef 	bl	10013800 <__aeabi_dmul>
10011022:	0004      	movs	r4, r0
10011024:	000d      	movs	r5, r1
10011026:	f000 fec3 	bl	10011db0 <rint>
1001102a:	0002      	movs	r2, r0
1001102c:	000b      	movs	r3, r1
1001102e:	0020      	movs	r0, r4
10011030:	0029      	movs	r1, r5
10011032:	f001 f969 	bl	10012308 <__aeabi_dcmpeq>
10011036:	2800      	cmp	r0, #0
10011038:	d105      	bne.n	10011046 <pow+0x292>
1001103a:	22e0      	movs	r2, #224	; 0xe0
1001103c:	4b39      	ldr	r3, [pc, #228]	; (10011124 <pow+0x370>)
1001103e:	0612      	lsls	r2, r2, #24
10011040:	4641      	mov	r1, r8
10011042:	618a      	str	r2, [r1, #24]
10011044:	61cb      	str	r3, [r1, #28]
10011046:	465b      	mov	r3, fp
10011048:	781b      	ldrb	r3, [r3, #0]
1001104a:	b25b      	sxtb	r3, r3
1001104c:	4699      	mov	r9, r3
1001104e:	464b      	mov	r3, r9
10011050:	2b02      	cmp	r3, #2
10011052:	d000      	beq.n	10011056 <pow+0x2a2>
10011054:	e753      	b.n	10010efe <pow+0x14a>
10011056:	e757      	b.n	10010f08 <pow+0x154>
10011058:	ab06      	add	r3, sp, #24
1001105a:	4698      	mov	r8, r3
1001105c:	2301      	movs	r3, #1
1001105e:	4642      	mov	r2, r8
10011060:	9306      	str	r3, [sp, #24]
10011062:	4b2b      	ldr	r3, [pc, #172]	; (10011110 <pow+0x35c>)
10011064:	6053      	str	r3, [r2, #4]
10011066:	4643      	mov	r3, r8
10011068:	609c      	str	r4, [r3, #8]
1001106a:	60dd      	str	r5, [r3, #12]
1001106c:	2400      	movs	r4, #0
1001106e:	9a00      	ldr	r2, [sp, #0]
10011070:	4d28      	ldr	r5, [pc, #160]	; (10011114 <pow+0x360>)
10011072:	621a      	str	r2, [r3, #32]
10011074:	611e      	str	r6, [r3, #16]
10011076:	615f      	str	r7, [r3, #20]
10011078:	619c      	str	r4, [r3, #24]
1001107a:	61dd      	str	r5, [r3, #28]
1001107c:	464b      	mov	r3, r9
1001107e:	9400      	str	r4, [sp, #0]
10011080:	9501      	str	r5, [sp, #4]
10011082:	2b02      	cmp	r3, #2
10011084:	d000      	beq.n	10011088 <pow+0x2d4>
10011086:	e77b      	b.n	10010f80 <pow+0x1cc>
10011088:	e6e9      	b.n	10010e5e <pow+0xaa>
1001108a:	2200      	movs	r2, #0
1001108c:	4641      	mov	r1, r8
1001108e:	4b26      	ldr	r3, [pc, #152]	; (10011128 <pow+0x374>)
10011090:	0020      	movs	r0, r4
10011092:	618a      	str	r2, [r1, #24]
10011094:	61cb      	str	r3, [r1, #28]
10011096:	2200      	movs	r2, #0
10011098:	2300      	movs	r3, #0
1001109a:	0029      	movs	r1, r5
1001109c:	f001 f93a 	bl	10012314 <__aeabi_dcmplt>
100110a0:	2800      	cmp	r0, #0
100110a2:	d0d4      	beq.n	1001104e <pow+0x29a>
100110a4:	2200      	movs	r2, #0
100110a6:	4b1e      	ldr	r3, [pc, #120]	; (10011120 <pow+0x36c>)
100110a8:	0030      	movs	r0, r6
100110aa:	0039      	movs	r1, r7
100110ac:	f002 fba8 	bl	10013800 <__aeabi_dmul>
100110b0:	0004      	movs	r4, r0
100110b2:	000d      	movs	r5, r1
100110b4:	f000 fe7c 	bl	10011db0 <rint>
100110b8:	0002      	movs	r2, r0
100110ba:	000b      	movs	r3, r1
100110bc:	0020      	movs	r0, r4
100110be:	0029      	movs	r1, r5
100110c0:	f001 f922 	bl	10012308 <__aeabi_dcmpeq>
100110c4:	2800      	cmp	r0, #0
100110c6:	d1be      	bne.n	10011046 <pow+0x292>
100110c8:	2200      	movs	r2, #0
100110ca:	4b13      	ldr	r3, [pc, #76]	; (10011118 <pow+0x364>)
100110cc:	e7b8      	b.n	10011040 <pow+0x28c>
100110ce:	2301      	movs	r3, #1
100110d0:	4642      	mov	r2, r8
100110d2:	9306      	str	r3, [sp, #24]
100110d4:	4b0e      	ldr	r3, [pc, #56]	; (10011110 <pow+0x35c>)
100110d6:	6053      	str	r3, [r2, #4]
100110d8:	4643      	mov	r3, r8
100110da:	464a      	mov	r2, r9
100110dc:	609c      	str	r4, [r3, #8]
100110de:	60dd      	str	r5, [r3, #12]
100110e0:	621a      	str	r2, [r3, #32]
100110e2:	611e      	str	r6, [r3, #16]
100110e4:	615f      	str	r7, [r3, #20]
100110e6:	2400      	movs	r4, #0
100110e8:	465b      	mov	r3, fp
100110ea:	571c      	ldrsb	r4, [r3, r4]
100110ec:	2c00      	cmp	r4, #0
100110ee:	d100      	bne.n	100110f2 <pow+0x33e>
100110f0:	e741      	b.n	10010f76 <pow+0x1c2>
100110f2:	2300      	movs	r3, #0
100110f4:	2200      	movs	r2, #0
100110f6:	0019      	movs	r1, r3
100110f8:	0010      	movs	r0, r2
100110fa:	f001 ff5d 	bl	10012fb8 <__aeabi_ddiv>
100110fe:	4643      	mov	r3, r8
10011100:	6198      	str	r0, [r3, #24]
10011102:	61d9      	str	r1, [r3, #28]
10011104:	2c02      	cmp	r4, #2
10011106:	d100      	bne.n	1001110a <pow+0x356>
10011108:	e730      	b.n	10010f6c <pow+0x1b8>
1001110a:	e739      	b.n	10010f80 <pow+0x1cc>
1001110c:	10017394 	.word	0x10017394
10011110:	1001717c 	.word	0x1001717c
10011114:	3ff00000 	.word	0x3ff00000
10011118:	fff00000 	.word	0xfff00000
1001111c:	47efffff 	.word	0x47efffff
10011120:	3fe00000 	.word	0x3fe00000
10011124:	c7efffff 	.word	0xc7efffff
10011128:	7ff00000 	.word	0x7ff00000

1001112c <__ieee754_pow>:
1001112c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001112e:	4656      	mov	r6, sl
10011130:	464d      	mov	r5, r9
10011132:	4644      	mov	r4, r8
10011134:	465f      	mov	r7, fp
10011136:	b4f0      	push	{r4, r5, r6, r7}
10011138:	001c      	movs	r4, r3
1001113a:	0013      	movs	r3, r2
1001113c:	0067      	lsls	r7, r4, #1
1001113e:	b091      	sub	sp, #68	; 0x44
10011140:	087f      	lsrs	r7, r7, #1
10011142:	9300      	str	r3, [sp, #0]
10011144:	9401      	str	r4, [sp, #4]
10011146:	0006      	movs	r6, r0
10011148:	000d      	movs	r5, r1
1001114a:	4680      	mov	r8, r0
1001114c:	4689      	mov	r9, r1
1001114e:	46a2      	mov	sl, r4
10011150:	433b      	orrs	r3, r7
10011152:	d032      	beq.n	100111ba <__ieee754_pow+0x8e>
10011154:	4b6e      	ldr	r3, [pc, #440]	; (10011310 <__ieee754_pow+0x1e4>)
10011156:	006c      	lsls	r4, r5, #1
10011158:	0864      	lsrs	r4, r4, #1
1001115a:	429c      	cmp	r4, r3
1001115c:	dc29      	bgt.n	100111b2 <__ieee754_pow+0x86>
1001115e:	d026      	beq.n	100111ae <__ieee754_pow+0x82>
10011160:	429f      	cmp	r7, r3
10011162:	dc26      	bgt.n	100111b2 <__ieee754_pow+0x86>
10011164:	4b6a      	ldr	r3, [pc, #424]	; (10011310 <__ieee754_pow+0x1e4>)
10011166:	429f      	cmp	r7, r3
10011168:	d100      	bne.n	1001116c <__ieee754_pow+0x40>
1001116a:	e089      	b.n	10011280 <__ieee754_pow+0x154>
1001116c:	2300      	movs	r3, #0
1001116e:	469b      	mov	fp, r3
10011170:	464b      	mov	r3, r9
10011172:	2b00      	cmp	r3, #0
10011174:	da00      	bge.n	10011178 <__ieee754_pow+0x4c>
10011176:	e087      	b.n	10011288 <__ieee754_pow+0x15c>
10011178:	2a00      	cmp	r2, #0
1001117a:	d12f      	bne.n	100111dc <__ieee754_pow+0xb0>
1001117c:	4b64      	ldr	r3, [pc, #400]	; (10011310 <__ieee754_pow+0x1e4>)
1001117e:	429f      	cmp	r7, r3
10011180:	d100      	bne.n	10011184 <__ieee754_pow+0x58>
10011182:	e09f      	b.n	100112c4 <__ieee754_pow+0x198>
10011184:	4b63      	ldr	r3, [pc, #396]	; (10011314 <__ieee754_pow+0x1e8>)
10011186:	429f      	cmp	r7, r3
10011188:	d05d      	beq.n	10011246 <__ieee754_pow+0x11a>
1001118a:	2380      	movs	r3, #128	; 0x80
1001118c:	05db      	lsls	r3, r3, #23
1001118e:	459a      	cmp	sl, r3
10011190:	d101      	bne.n	10011196 <__ieee754_pow+0x6a>
10011192:	f000 fbc1 	bl	10011918 <__ieee754_pow+0x7ec>
10011196:	4b60      	ldr	r3, [pc, #384]	; (10011318 <__ieee754_pow+0x1ec>)
10011198:	459a      	cmp	sl, r3
1001119a:	d11f      	bne.n	100111dc <__ieee754_pow+0xb0>
1001119c:	464b      	mov	r3, r9
1001119e:	2b00      	cmp	r3, #0
100111a0:	db1c      	blt.n	100111dc <__ieee754_pow+0xb0>
100111a2:	0030      	movs	r0, r6
100111a4:	0029      	movs	r1, r5
100111a6:	f000 fcf7 	bl	10011b98 <__ieee754_sqrt>
100111aa:	0006      	movs	r6, r0
100111ac:	e007      	b.n	100111be <__ieee754_pow+0x92>
100111ae:	2800      	cmp	r0, #0
100111b0:	d00d      	beq.n	100111ce <__ieee754_pow+0xa2>
100111b2:	4b5a      	ldr	r3, [pc, #360]	; (1001131c <__ieee754_pow+0x1f0>)
100111b4:	18e0      	adds	r0, r4, r3
100111b6:	4330      	orrs	r0, r6
100111b8:	d10b      	bne.n	100111d2 <__ieee754_pow+0xa6>
100111ba:	2600      	movs	r6, #0
100111bc:	4955      	ldr	r1, [pc, #340]	; (10011314 <__ieee754_pow+0x1e8>)
100111be:	0030      	movs	r0, r6
100111c0:	b011      	add	sp, #68	; 0x44
100111c2:	bc3c      	pop	{r2, r3, r4, r5}
100111c4:	4690      	mov	r8, r2
100111c6:	4699      	mov	r9, r3
100111c8:	46a2      	mov	sl, r4
100111ca:	46ab      	mov	fp, r5
100111cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111ce:	42a7      	cmp	r7, r4
100111d0:	ddc8      	ble.n	10011164 <__ieee754_pow+0x38>
100111d2:	4853      	ldr	r0, [pc, #332]	; (10011320 <__ieee754_pow+0x1f4>)
100111d4:	f000 fde6 	bl	10011da4 <nan>
100111d8:	0006      	movs	r6, r0
100111da:	e7f0      	b.n	100111be <__ieee754_pow+0x92>
100111dc:	0030      	movs	r0, r6
100111de:	0029      	movs	r1, r5
100111e0:	f000 fdd0 	bl	10011d84 <fabs>
100111e4:	4643      	mov	r3, r8
100111e6:	2b00      	cmp	r3, #0
100111e8:	d01d      	beq.n	10011226 <__ieee754_pow+0xfa>
100111ea:	0feb      	lsrs	r3, r5, #31
100111ec:	3b01      	subs	r3, #1
100111ee:	4698      	mov	r8, r3
100111f0:	465b      	mov	r3, fp
100111f2:	4642      	mov	r2, r8
100111f4:	4313      	orrs	r3, r2
100111f6:	d079      	beq.n	100112ec <__ieee754_pow+0x1c0>
100111f8:	4b4a      	ldr	r3, [pc, #296]	; (10011324 <__ieee754_pow+0x1f8>)
100111fa:	429f      	cmp	r7, r3
100111fc:	dc00      	bgt.n	10011200 <__ieee754_pow+0xd4>
100111fe:	e09f      	b.n	10011340 <__ieee754_pow+0x214>
10011200:	4b49      	ldr	r3, [pc, #292]	; (10011328 <__ieee754_pow+0x1fc>)
10011202:	429f      	cmp	r7, r3
10011204:	dc01      	bgt.n	1001120a <__ieee754_pow+0xde>
10011206:	f000 fbce 	bl	100119a6 <__ieee754_pow+0x87a>
1001120a:	4b48      	ldr	r3, [pc, #288]	; (1001132c <__ieee754_pow+0x200>)
1001120c:	429c      	cmp	r4, r3
1001120e:	dd79      	ble.n	10011304 <__ieee754_pow+0x1d8>
10011210:	4653      	mov	r3, sl
10011212:	2b00      	cmp	r3, #0
10011214:	dd79      	ble.n	1001130a <__ieee754_pow+0x1de>
10011216:	4a46      	ldr	r2, [pc, #280]	; (10011330 <__ieee754_pow+0x204>)
10011218:	4b46      	ldr	r3, [pc, #280]	; (10011334 <__ieee754_pow+0x208>)
1001121a:	0010      	movs	r0, r2
1001121c:	0019      	movs	r1, r3
1001121e:	f002 faef 	bl	10013800 <__aeabi_dmul>
10011222:	0006      	movs	r6, r0
10011224:	e7cb      	b.n	100111be <__ieee754_pow+0x92>
10011226:	2c00      	cmp	r4, #0
10011228:	d004      	beq.n	10011234 <__ieee754_pow+0x108>
1001122a:	4a3a      	ldr	r2, [pc, #232]	; (10011314 <__ieee754_pow+0x1e8>)
1001122c:	00ab      	lsls	r3, r5, #2
1001122e:	089b      	lsrs	r3, r3, #2
10011230:	4293      	cmp	r3, r2
10011232:	d1da      	bne.n	100111ea <__ieee754_pow+0xbe>
10011234:	4653      	mov	r3, sl
10011236:	2b00      	cmp	r3, #0
10011238:	da00      	bge.n	1001123c <__ieee754_pow+0x110>
1001123a:	e3ad      	b.n	10011998 <__ieee754_pow+0x86c>
1001123c:	464b      	mov	r3, r9
1001123e:	2b00      	cmp	r3, #0
10011240:	db0d      	blt.n	1001125e <__ieee754_pow+0x132>
10011242:	0006      	movs	r6, r0
10011244:	e7bb      	b.n	100111be <__ieee754_pow+0x92>
10011246:	4653      	mov	r3, sl
10011248:	0029      	movs	r1, r5
1001124a:	2b00      	cmp	r3, #0
1001124c:	dab7      	bge.n	100111be <__ieee754_pow+0x92>
1001124e:	0032      	movs	r2, r6
10011250:	002b      	movs	r3, r5
10011252:	2000      	movs	r0, #0
10011254:	492f      	ldr	r1, [pc, #188]	; (10011314 <__ieee754_pow+0x1e8>)
10011256:	f001 feaf 	bl	10012fb8 <__aeabi_ddiv>
1001125a:	0006      	movs	r6, r0
1001125c:	e7af      	b.n	100111be <__ieee754_pow+0x92>
1001125e:	4b2f      	ldr	r3, [pc, #188]	; (1001131c <__ieee754_pow+0x1f0>)
10011260:	469c      	mov	ip, r3
10011262:	465b      	mov	r3, fp
10011264:	4464      	add	r4, ip
10011266:	431c      	orrs	r4, r3
10011268:	d101      	bne.n	1001126e <__ieee754_pow+0x142>
1001126a:	f000 fc2b 	bl	10011ac4 <__ieee754_pow+0x998>
1001126e:	465b      	mov	r3, fp
10011270:	0006      	movs	r6, r0
10011272:	2b01      	cmp	r3, #1
10011274:	d1a3      	bne.n	100111be <__ieee754_pow+0x92>
10011276:	2380      	movs	r3, #128	; 0x80
10011278:	061b      	lsls	r3, r3, #24
1001127a:	469c      	mov	ip, r3
1001127c:	4461      	add	r1, ip
1001127e:	e79e      	b.n	100111be <__ieee754_pow+0x92>
10011280:	2a00      	cmp	r2, #0
10011282:	d100      	bne.n	10011286 <__ieee754_pow+0x15a>
10011284:	e772      	b.n	1001116c <__ieee754_pow+0x40>
10011286:	e794      	b.n	100111b2 <__ieee754_pow+0x86>
10011288:	4b2b      	ldr	r3, [pc, #172]	; (10011338 <__ieee754_pow+0x20c>)
1001128a:	429f      	cmp	r7, r3
1001128c:	dc2b      	bgt.n	100112e6 <__ieee754_pow+0x1ba>
1001128e:	4b27      	ldr	r3, [pc, #156]	; (1001132c <__ieee754_pow+0x200>)
10011290:	429f      	cmp	r7, r3
10011292:	dc00      	bgt.n	10011296 <__ieee754_pow+0x16a>
10011294:	e770      	b.n	10011178 <__ieee754_pow+0x4c>
10011296:	4929      	ldr	r1, [pc, #164]	; (1001133c <__ieee754_pow+0x210>)
10011298:	153b      	asrs	r3, r7, #20
1001129a:	468c      	mov	ip, r1
1001129c:	4463      	add	r3, ip
1001129e:	2b14      	cmp	r3, #20
100112a0:	dc01      	bgt.n	100112a6 <__ieee754_pow+0x17a>
100112a2:	f000 fbf2 	bl	10011a8a <__ieee754_pow+0x95e>
100112a6:	2134      	movs	r1, #52	; 0x34
100112a8:	1acb      	subs	r3, r1, r3
100112aa:	9900      	ldr	r1, [sp, #0]
100112ac:	40d9      	lsrs	r1, r3
100112ae:	0008      	movs	r0, r1
100112b0:	4098      	lsls	r0, r3
100112b2:	4282      	cmp	r2, r0
100112b4:	d000      	beq.n	100112b8 <__ieee754_pow+0x18c>
100112b6:	e75f      	b.n	10011178 <__ieee754_pow+0x4c>
100112b8:	2301      	movs	r3, #1
100112ba:	4019      	ands	r1, r3
100112bc:	3301      	adds	r3, #1
100112be:	1a5b      	subs	r3, r3, r1
100112c0:	469b      	mov	fp, r3
100112c2:	e759      	b.n	10011178 <__ieee754_pow+0x4c>
100112c4:	4b15      	ldr	r3, [pc, #84]	; (1001131c <__ieee754_pow+0x1f0>)
100112c6:	18e0      	adds	r0, r4, r3
100112c8:	4306      	orrs	r6, r0
100112ca:	d100      	bne.n	100112ce <__ieee754_pow+0x1a2>
100112cc:	e775      	b.n	100111ba <__ieee754_pow+0x8e>
100112ce:	4b17      	ldr	r3, [pc, #92]	; (1001132c <__ieee754_pow+0x200>)
100112d0:	429c      	cmp	r4, r3
100112d2:	dc00      	bgt.n	100112d6 <__ieee754_pow+0x1aa>
100112d4:	e351      	b.n	1001197a <__ieee754_pow+0x84e>
100112d6:	4653      	mov	r3, sl
100112d8:	2b00      	cmp	r3, #0
100112da:	db16      	blt.n	1001130a <__ieee754_pow+0x1de>
100112dc:	9b00      	ldr	r3, [sp, #0]
100112de:	9c01      	ldr	r4, [sp, #4]
100112e0:	001e      	movs	r6, r3
100112e2:	0021      	movs	r1, r4
100112e4:	e76b      	b.n	100111be <__ieee754_pow+0x92>
100112e6:	2302      	movs	r3, #2
100112e8:	469b      	mov	fp, r3
100112ea:	e745      	b.n	10011178 <__ieee754_pow+0x4c>
100112ec:	0032      	movs	r2, r6
100112ee:	002b      	movs	r3, r5
100112f0:	0030      	movs	r0, r6
100112f2:	0029      	movs	r1, r5
100112f4:	f002 fcfe 	bl	10013cf4 <__aeabi_dsub>
100112f8:	0002      	movs	r2, r0
100112fa:	000b      	movs	r3, r1
100112fc:	f001 fe5c 	bl	10012fb8 <__aeabi_ddiv>
10011300:	0006      	movs	r6, r0
10011302:	e75c      	b.n	100111be <__ieee754_pow+0x92>
10011304:	4653      	mov	r3, sl
10011306:	2b00      	cmp	r3, #0
10011308:	db85      	blt.n	10011216 <__ieee754_pow+0xea>
1001130a:	2600      	movs	r6, #0
1001130c:	2100      	movs	r1, #0
1001130e:	e756      	b.n	100111be <__ieee754_pow+0x92>
10011310:	7ff00000 	.word	0x7ff00000
10011314:	3ff00000 	.word	0x3ff00000
10011318:	3fe00000 	.word	0x3fe00000
1001131c:	c0100000 	.word	0xc0100000
10011320:	10016974 	.word	0x10016974
10011324:	41e00000 	.word	0x41e00000
10011328:	43f00000 	.word	0x43f00000
1001132c:	3fefffff 	.word	0x3fefffff
10011330:	8800759c 	.word	0x8800759c
10011334:	7e37e43c 	.word	0x7e37e43c
10011338:	433fffff 	.word	0x433fffff
1001133c:	fffffc01 	.word	0xfffffc01
10011340:	4be8      	ldr	r3, [pc, #928]	; (100116e4 <__ieee754_pow+0x5b8>)
10011342:	2200      	movs	r2, #0
10011344:	429c      	cmp	r4, r3
10011346:	dc06      	bgt.n	10011356 <__ieee754_pow+0x22a>
10011348:	2200      	movs	r2, #0
1001134a:	4be7      	ldr	r3, [pc, #924]	; (100116e8 <__ieee754_pow+0x5bc>)
1001134c:	f002 fa58 	bl	10013800 <__aeabi_dmul>
10011350:	2235      	movs	r2, #53	; 0x35
10011352:	000c      	movs	r4, r1
10011354:	4252      	negs	r2, r2
10011356:	4de5      	ldr	r5, [pc, #916]	; (100116ec <__ieee754_pow+0x5c0>)
10011358:	1523      	asrs	r3, r4, #20
1001135a:	46ac      	mov	ip, r5
1001135c:	4463      	add	r3, ip
1001135e:	4699      	mov	r9, r3
10011360:	0324      	lsls	r4, r4, #12
10011362:	4de3      	ldr	r5, [pc, #908]	; (100116f0 <__ieee754_pow+0x5c4>)
10011364:	4be3      	ldr	r3, [pc, #908]	; (100116f4 <__ieee754_pow+0x5c8>)
10011366:	0b24      	lsrs	r4, r4, #12
10011368:	4491      	add	r9, r2
1001136a:	4325      	orrs	r5, r4
1001136c:	429c      	cmp	r4, r3
1001136e:	dd09      	ble.n	10011384 <__ieee754_pow+0x258>
10011370:	4be1      	ldr	r3, [pc, #900]	; (100116f8 <__ieee754_pow+0x5cc>)
10011372:	429c      	cmp	r4, r3
10011374:	dc00      	bgt.n	10011378 <__ieee754_pow+0x24c>
10011376:	e3a9      	b.n	10011acc <__ieee754_pow+0x9a0>
10011378:	2301      	movs	r3, #1
1001137a:	469c      	mov	ip, r3
1001137c:	4bdf      	ldr	r3, [pc, #892]	; (100116fc <__ieee754_pow+0x5d0>)
1001137e:	44e1      	add	r9, ip
10011380:	469c      	mov	ip, r3
10011382:	4465      	add	r5, ip
10011384:	2300      	movs	r3, #0
10011386:	2400      	movs	r4, #0
10011388:	2200      	movs	r2, #0
1001138a:	9308      	str	r3, [sp, #32]
1001138c:	9409      	str	r4, [sp, #36]	; 0x24
1001138e:	930c      	str	r3, [sp, #48]	; 0x30
10011390:	940d      	str	r4, [sp, #52]	; 0x34
10011392:	2400      	movs	r4, #0
10011394:	4bd6      	ldr	r3, [pc, #856]	; (100116f0 <__ieee754_pow+0x5c4>)
10011396:	9206      	str	r2, [sp, #24]
10011398:	9307      	str	r3, [sp, #28]
1001139a:	9a06      	ldr	r2, [sp, #24]
1001139c:	9b07      	ldr	r3, [sp, #28]
1001139e:	0029      	movs	r1, r5
100113a0:	900a      	str	r0, [sp, #40]	; 0x28
100113a2:	910b      	str	r1, [sp, #44]	; 0x2c
100113a4:	f002 fca6 	bl	10013cf4 <__aeabi_dsub>
100113a8:	9a06      	ldr	r2, [sp, #24]
100113aa:	9b07      	ldr	r3, [sp, #28]
100113ac:	0006      	movs	r6, r0
100113ae:	000f      	movs	r7, r1
100113b0:	980a      	ldr	r0, [sp, #40]	; 0x28
100113b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
100113b4:	f001 fad4 	bl	10012960 <__aeabi_dadd>
100113b8:	0002      	movs	r2, r0
100113ba:	000b      	movs	r3, r1
100113bc:	2000      	movs	r0, #0
100113be:	49cc      	ldr	r1, [pc, #816]	; (100116f0 <__ieee754_pow+0x5c4>)
100113c0:	f001 fdfa 	bl	10012fb8 <__aeabi_ddiv>
100113c4:	000a      	movs	r2, r1
100113c6:	0001      	movs	r1, r0
100113c8:	0013      	movs	r3, r2
100113ca:	910e      	str	r1, [sp, #56]	; 0x38
100113cc:	920f      	str	r2, [sp, #60]	; 0x3c
100113ce:	0002      	movs	r2, r0
100113d0:	0039      	movs	r1, r7
100113d2:	0030      	movs	r0, r6
100113d4:	f002 fa14 	bl	10013800 <__aeabi_dmul>
100113d8:	000a      	movs	r2, r1
100113da:	0001      	movs	r1, r0
100113dc:	2080      	movs	r0, #128	; 0x80
100113de:	9104      	str	r1, [sp, #16]
100113e0:	9205      	str	r2, [sp, #20]
100113e2:	0013      	movs	r3, r2
100113e4:	2200      	movs	r2, #0
100113e6:	2180      	movs	r1, #128	; 0x80
100113e8:	0300      	lsls	r0, r0, #12
100113ea:	4684      	mov	ip, r0
100113ec:	9202      	str	r2, [sp, #8]
100113ee:	9303      	str	r3, [sp, #12]
100113f0:	2200      	movs	r2, #0
100113f2:	0589      	lsls	r1, r1, #22
100113f4:	106d      	asrs	r5, r5, #1
100113f6:	430d      	orrs	r5, r1
100113f8:	4465      	add	r5, ip
100113fa:	192b      	adds	r3, r5, r4
100113fc:	9802      	ldr	r0, [sp, #8]
100113fe:	9903      	ldr	r1, [sp, #12]
10011400:	0014      	movs	r4, r2
10011402:	001d      	movs	r5, r3
10011404:	f002 f9fc 	bl	10013800 <__aeabi_dmul>
10011408:	0002      	movs	r2, r0
1001140a:	000b      	movs	r3, r1
1001140c:	0030      	movs	r0, r6
1001140e:	0039      	movs	r1, r7
10011410:	f002 fc70 	bl	10013cf4 <__aeabi_dsub>
10011414:	9a06      	ldr	r2, [sp, #24]
10011416:	9b07      	ldr	r3, [sp, #28]
10011418:	0006      	movs	r6, r0
1001141a:	000f      	movs	r7, r1
1001141c:	0020      	movs	r0, r4
1001141e:	0029      	movs	r1, r5
10011420:	f002 fc68 	bl	10013cf4 <__aeabi_dsub>
10011424:	0002      	movs	r2, r0
10011426:	000b      	movs	r3, r1
10011428:	980a      	ldr	r0, [sp, #40]	; 0x28
1001142a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1001142c:	f002 fc62 	bl	10013cf4 <__aeabi_dsub>
10011430:	9a02      	ldr	r2, [sp, #8]
10011432:	9b03      	ldr	r3, [sp, #12]
10011434:	f002 f9e4 	bl	10013800 <__aeabi_dmul>
10011438:	0002      	movs	r2, r0
1001143a:	000b      	movs	r3, r1
1001143c:	0030      	movs	r0, r6
1001143e:	0039      	movs	r1, r7
10011440:	f002 fc58 	bl	10013cf4 <__aeabi_dsub>
10011444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011446:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011448:	f002 f9da 	bl	10013800 <__aeabi_dmul>
1001144c:	9d04      	ldr	r5, [sp, #16]
1001144e:	9e05      	ldr	r6, [sp, #20]
10011450:	9006      	str	r0, [sp, #24]
10011452:	9107      	str	r1, [sp, #28]
10011454:	002a      	movs	r2, r5
10011456:	0033      	movs	r3, r6
10011458:	0028      	movs	r0, r5
1001145a:	0031      	movs	r1, r6
1001145c:	f002 f9d0 	bl	10013800 <__aeabi_dmul>
10011460:	0006      	movs	r6, r0
10011462:	000f      	movs	r7, r1
10011464:	4aa6      	ldr	r2, [pc, #664]	; (10011700 <__ieee754_pow+0x5d4>)
10011466:	4ba7      	ldr	r3, [pc, #668]	; (10011704 <__ieee754_pow+0x5d8>)
10011468:	f002 f9ca 	bl	10013800 <__aeabi_dmul>
1001146c:	4aa6      	ldr	r2, [pc, #664]	; (10011708 <__ieee754_pow+0x5dc>)
1001146e:	4ba7      	ldr	r3, [pc, #668]	; (1001170c <__ieee754_pow+0x5e0>)
10011470:	f001 fa76 	bl	10012960 <__aeabi_dadd>
10011474:	0032      	movs	r2, r6
10011476:	003b      	movs	r3, r7
10011478:	f002 f9c2 	bl	10013800 <__aeabi_dmul>
1001147c:	4aa4      	ldr	r2, [pc, #656]	; (10011710 <__ieee754_pow+0x5e4>)
1001147e:	4ba5      	ldr	r3, [pc, #660]	; (10011714 <__ieee754_pow+0x5e8>)
10011480:	f001 fa6e 	bl	10012960 <__aeabi_dadd>
10011484:	0032      	movs	r2, r6
10011486:	003b      	movs	r3, r7
10011488:	f002 f9ba 	bl	10013800 <__aeabi_dmul>
1001148c:	4aa2      	ldr	r2, [pc, #648]	; (10011718 <__ieee754_pow+0x5ec>)
1001148e:	4ba3      	ldr	r3, [pc, #652]	; (1001171c <__ieee754_pow+0x5f0>)
10011490:	f001 fa66 	bl	10012960 <__aeabi_dadd>
10011494:	0032      	movs	r2, r6
10011496:	003b      	movs	r3, r7
10011498:	f002 f9b2 	bl	10013800 <__aeabi_dmul>
1001149c:	4aa0      	ldr	r2, [pc, #640]	; (10011720 <__ieee754_pow+0x5f4>)
1001149e:	4ba1      	ldr	r3, [pc, #644]	; (10011724 <__ieee754_pow+0x5f8>)
100114a0:	f001 fa5e 	bl	10012960 <__aeabi_dadd>
100114a4:	0032      	movs	r2, r6
100114a6:	003b      	movs	r3, r7
100114a8:	f002 f9aa 	bl	10013800 <__aeabi_dmul>
100114ac:	4a9e      	ldr	r2, [pc, #632]	; (10011728 <__ieee754_pow+0x5fc>)
100114ae:	4b9f      	ldr	r3, [pc, #636]	; (1001172c <__ieee754_pow+0x600>)
100114b0:	f001 fa56 	bl	10012960 <__aeabi_dadd>
100114b4:	0032      	movs	r2, r6
100114b6:	0004      	movs	r4, r0
100114b8:	000d      	movs	r5, r1
100114ba:	003b      	movs	r3, r7
100114bc:	0030      	movs	r0, r6
100114be:	0039      	movs	r1, r7
100114c0:	f002 f99e 	bl	10013800 <__aeabi_dmul>
100114c4:	0002      	movs	r2, r0
100114c6:	000b      	movs	r3, r1
100114c8:	0020      	movs	r0, r4
100114ca:	0029      	movs	r1, r5
100114cc:	f002 f998 	bl	10013800 <__aeabi_dmul>
100114d0:	9e02      	ldr	r6, [sp, #8]
100114d2:	9f03      	ldr	r7, [sp, #12]
100114d4:	0004      	movs	r4, r0
100114d6:	000d      	movs	r5, r1
100114d8:	9804      	ldr	r0, [sp, #16]
100114da:	9905      	ldr	r1, [sp, #20]
100114dc:	0032      	movs	r2, r6
100114de:	003b      	movs	r3, r7
100114e0:	f001 fa3e 	bl	10012960 <__aeabi_dadd>
100114e4:	9a06      	ldr	r2, [sp, #24]
100114e6:	9b07      	ldr	r3, [sp, #28]
100114e8:	f002 f98a 	bl	10013800 <__aeabi_dmul>
100114ec:	0022      	movs	r2, r4
100114ee:	002b      	movs	r3, r5
100114f0:	f001 fa36 	bl	10012960 <__aeabi_dadd>
100114f4:	0032      	movs	r2, r6
100114f6:	900a      	str	r0, [sp, #40]	; 0x28
100114f8:	910b      	str	r1, [sp, #44]	; 0x2c
100114fa:	003b      	movs	r3, r7
100114fc:	0030      	movs	r0, r6
100114fe:	0039      	movs	r1, r7
10011500:	9602      	str	r6, [sp, #8]
10011502:	9703      	str	r7, [sp, #12]
10011504:	f002 f97c 	bl	10013800 <__aeabi_dmul>
10011508:	2200      	movs	r2, #0
1001150a:	4b89      	ldr	r3, [pc, #548]	; (10011730 <__ieee754_pow+0x604>)
1001150c:	0004      	movs	r4, r0
1001150e:	000d      	movs	r5, r1
10011510:	f001 fa26 	bl	10012960 <__aeabi_dadd>
10011514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011516:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011518:	f001 fa22 	bl	10012960 <__aeabi_dadd>
1001151c:	2600      	movs	r6, #0
1001151e:	000f      	movs	r7, r1
10011520:	0032      	movs	r2, r6
10011522:	000b      	movs	r3, r1
10011524:	9802      	ldr	r0, [sp, #8]
10011526:	9903      	ldr	r1, [sp, #12]
10011528:	f002 f96a 	bl	10013800 <__aeabi_dmul>
1001152c:	2200      	movs	r2, #0
1001152e:	9002      	str	r0, [sp, #8]
10011530:	9103      	str	r1, [sp, #12]
10011532:	4b7f      	ldr	r3, [pc, #508]	; (10011730 <__ieee754_pow+0x604>)
10011534:	0030      	movs	r0, r6
10011536:	0039      	movs	r1, r7
10011538:	f002 fbdc 	bl	10013cf4 <__aeabi_dsub>
1001153c:	0022      	movs	r2, r4
1001153e:	002b      	movs	r3, r5
10011540:	f002 fbd8 	bl	10013cf4 <__aeabi_dsub>
10011544:	0002      	movs	r2, r0
10011546:	000b      	movs	r3, r1
10011548:	980a      	ldr	r0, [sp, #40]	; 0x28
1001154a:	990b      	ldr	r1, [sp, #44]	; 0x2c
1001154c:	f002 fbd2 	bl	10013cf4 <__aeabi_dsub>
10011550:	9a04      	ldr	r2, [sp, #16]
10011552:	9b05      	ldr	r3, [sp, #20]
10011554:	f002 f954 	bl	10013800 <__aeabi_dmul>
10011558:	0032      	movs	r2, r6
1001155a:	0004      	movs	r4, r0
1001155c:	000d      	movs	r5, r1
1001155e:	9806      	ldr	r0, [sp, #24]
10011560:	9907      	ldr	r1, [sp, #28]
10011562:	003b      	movs	r3, r7
10011564:	f002 f94c 	bl	10013800 <__aeabi_dmul>
10011568:	0002      	movs	r2, r0
1001156a:	000b      	movs	r3, r1
1001156c:	0020      	movs	r0, r4
1001156e:	0029      	movs	r1, r5
10011570:	f001 f9f6 	bl	10012960 <__aeabi_dadd>
10011574:	0004      	movs	r4, r0
10011576:	000d      	movs	r5, r1
10011578:	0002      	movs	r2, r0
1001157a:	000b      	movs	r3, r1
1001157c:	9802      	ldr	r0, [sp, #8]
1001157e:	9903      	ldr	r1, [sp, #12]
10011580:	f001 f9ee 	bl	10012960 <__aeabi_dadd>
10011584:	2600      	movs	r6, #0
10011586:	22e0      	movs	r2, #224	; 0xe0
10011588:	4b6a      	ldr	r3, [pc, #424]	; (10011734 <__ieee754_pow+0x608>)
1001158a:	0612      	lsls	r2, r2, #24
1001158c:	0030      	movs	r0, r6
1001158e:	000f      	movs	r7, r1
10011590:	f002 f936 	bl	10013800 <__aeabi_dmul>
10011594:	9a02      	ldr	r2, [sp, #8]
10011596:	9b03      	ldr	r3, [sp, #12]
10011598:	9004      	str	r0, [sp, #16]
1001159a:	9105      	str	r1, [sp, #20]
1001159c:	0030      	movs	r0, r6
1001159e:	0039      	movs	r1, r7
100115a0:	f002 fba8 	bl	10013cf4 <__aeabi_dsub>
100115a4:	0002      	movs	r2, r0
100115a6:	000b      	movs	r3, r1
100115a8:	0020      	movs	r0, r4
100115aa:	0029      	movs	r1, r5
100115ac:	f002 fba2 	bl	10013cf4 <__aeabi_dsub>
100115b0:	4a61      	ldr	r2, [pc, #388]	; (10011738 <__ieee754_pow+0x60c>)
100115b2:	4b60      	ldr	r3, [pc, #384]	; (10011734 <__ieee754_pow+0x608>)
100115b4:	f002 f924 	bl	10013800 <__aeabi_dmul>
100115b8:	4a60      	ldr	r2, [pc, #384]	; (1001173c <__ieee754_pow+0x610>)
100115ba:	0004      	movs	r4, r0
100115bc:	000d      	movs	r5, r1
100115be:	4b60      	ldr	r3, [pc, #384]	; (10011740 <__ieee754_pow+0x614>)
100115c0:	0030      	movs	r0, r6
100115c2:	0039      	movs	r1, r7
100115c4:	f002 f91c 	bl	10013800 <__aeabi_dmul>
100115c8:	0002      	movs	r2, r0
100115ca:	000b      	movs	r3, r1
100115cc:	0020      	movs	r0, r4
100115ce:	0029      	movs	r1, r5
100115d0:	f001 f9c6 	bl	10012960 <__aeabi_dadd>
100115d4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
100115d6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
100115d8:	f001 f9c2 	bl	10012960 <__aeabi_dadd>
100115dc:	0006      	movs	r6, r0
100115de:	4648      	mov	r0, r9
100115e0:	000f      	movs	r7, r1
100115e2:	f002 ff31 	bl	10014448 <__aeabi_i2d>
100115e6:	0004      	movs	r4, r0
100115e8:	000d      	movs	r5, r1
100115ea:	9804      	ldr	r0, [sp, #16]
100115ec:	9905      	ldr	r1, [sp, #20]
100115ee:	0032      	movs	r2, r6
100115f0:	003b      	movs	r3, r7
100115f2:	f001 f9b5 	bl	10012960 <__aeabi_dadd>
100115f6:	9a08      	ldr	r2, [sp, #32]
100115f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
100115fa:	f001 f9b1 	bl	10012960 <__aeabi_dadd>
100115fe:	0022      	movs	r2, r4
10011600:	002b      	movs	r3, r5
10011602:	f001 f9ad 	bl	10012960 <__aeabi_dadd>
10011606:	2000      	movs	r0, #0
10011608:	0022      	movs	r2, r4
1001160a:	002b      	movs	r3, r5
1001160c:	9002      	str	r0, [sp, #8]
1001160e:	9103      	str	r1, [sp, #12]
10011610:	f002 fb70 	bl	10013cf4 <__aeabi_dsub>
10011614:	9a08      	ldr	r2, [sp, #32]
10011616:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011618:	f002 fb6c 	bl	10013cf4 <__aeabi_dsub>
1001161c:	9a04      	ldr	r2, [sp, #16]
1001161e:	9b05      	ldr	r3, [sp, #20]
10011620:	f002 fb68 	bl	10013cf4 <__aeabi_dsub>
10011624:	0002      	movs	r2, r0
10011626:	000b      	movs	r3, r1
10011628:	0030      	movs	r0, r6
1001162a:	0039      	movs	r1, r7
1001162c:	f002 fb62 	bl	10013cf4 <__aeabi_dsub>
10011630:	9004      	str	r0, [sp, #16]
10011632:	9105      	str	r1, [sp, #20]
10011634:	465b      	mov	r3, fp
10011636:	4642      	mov	r2, r8
10011638:	3b01      	subs	r3, #1
1001163a:	4313      	orrs	r3, r2
1001163c:	d100      	bne.n	10011640 <__ieee754_pow+0x514>
1001163e:	e197      	b.n	10011970 <__ieee754_pow+0x844>
10011640:	2300      	movs	r3, #0
10011642:	4c2b      	ldr	r4, [pc, #172]	; (100116f0 <__ieee754_pow+0x5c4>)
10011644:	9306      	str	r3, [sp, #24]
10011646:	9407      	str	r4, [sp, #28]
10011648:	9800      	ldr	r0, [sp, #0]
1001164a:	9901      	ldr	r1, [sp, #4]
1001164c:	2600      	movs	r6, #0
1001164e:	000b      	movs	r3, r1
10011650:	0032      	movs	r2, r6
10011652:	000f      	movs	r7, r1
10011654:	f002 fb4e 	bl	10013cf4 <__aeabi_dsub>
10011658:	9a02      	ldr	r2, [sp, #8]
1001165a:	9b03      	ldr	r3, [sp, #12]
1001165c:	f002 f8d0 	bl	10013800 <__aeabi_dmul>
10011660:	9a00      	ldr	r2, [sp, #0]
10011662:	9b01      	ldr	r3, [sp, #4]
10011664:	0004      	movs	r4, r0
10011666:	000d      	movs	r5, r1
10011668:	9804      	ldr	r0, [sp, #16]
1001166a:	9905      	ldr	r1, [sp, #20]
1001166c:	f002 f8c8 	bl	10013800 <__aeabi_dmul>
10011670:	0002      	movs	r2, r0
10011672:	000b      	movs	r3, r1
10011674:	0020      	movs	r0, r4
10011676:	0029      	movs	r1, r5
10011678:	f001 f972 	bl	10012960 <__aeabi_dadd>
1001167c:	0004      	movs	r4, r0
1001167e:	000d      	movs	r5, r1
10011680:	9802      	ldr	r0, [sp, #8]
10011682:	9903      	ldr	r1, [sp, #12]
10011684:	003b      	movs	r3, r7
10011686:	0032      	movs	r2, r6
10011688:	9404      	str	r4, [sp, #16]
1001168a:	9505      	str	r5, [sp, #20]
1001168c:	f002 f8b8 	bl	10013800 <__aeabi_dmul>
10011690:	9000      	str	r0, [sp, #0]
10011692:	9101      	str	r1, [sp, #4]
10011694:	000b      	movs	r3, r1
10011696:	0002      	movs	r2, r0
10011698:	0029      	movs	r1, r5
1001169a:	0020      	movs	r0, r4
1001169c:	f001 f960 	bl	10012960 <__aeabi_dadd>
100116a0:	4b28      	ldr	r3, [pc, #160]	; (10011744 <__ieee754_pow+0x618>)
100116a2:	4681      	mov	r9, r0
100116a4:	1e0f      	subs	r7, r1, #0
100116a6:	468a      	mov	sl, r1
100116a8:	429f      	cmp	r7, r3
100116aa:	dc00      	bgt.n	100116ae <__ieee754_pow+0x582>
100116ac:	e13c      	b.n	10011928 <__ieee754_pow+0x7fc>
100116ae:	4b26      	ldr	r3, [pc, #152]	; (10011748 <__ieee754_pow+0x61c>)
100116b0:	18cb      	adds	r3, r1, r3
100116b2:	4303      	orrs	r3, r0
100116b4:	d000      	beq.n	100116b8 <__ieee754_pow+0x58c>
100116b6:	e1db      	b.n	10011a70 <__ieee754_pow+0x944>
100116b8:	9804      	ldr	r0, [sp, #16]
100116ba:	9905      	ldr	r1, [sp, #20]
100116bc:	4a23      	ldr	r2, [pc, #140]	; (1001174c <__ieee754_pow+0x620>)
100116be:	4b24      	ldr	r3, [pc, #144]	; (10011750 <__ieee754_pow+0x624>)
100116c0:	f001 f94e 	bl	10012960 <__aeabi_dadd>
100116c4:	9a00      	ldr	r2, [sp, #0]
100116c6:	9b01      	ldr	r3, [sp, #4]
100116c8:	0004      	movs	r4, r0
100116ca:	000d      	movs	r5, r1
100116cc:	4648      	mov	r0, r9
100116ce:	0039      	movs	r1, r7
100116d0:	f002 fb10 	bl	10013cf4 <__aeabi_dsub>
100116d4:	0002      	movs	r2, r0
100116d6:	000b      	movs	r3, r1
100116d8:	0020      	movs	r0, r4
100116da:	0029      	movs	r1, r5
100116dc:	f000 fe2e 	bl	1001233c <__aeabi_dcmpgt>
100116e0:	003e      	movs	r6, r7
100116e2:	e037      	b.n	10011754 <__ieee754_pow+0x628>
100116e4:	000fffff 	.word	0x000fffff
100116e8:	43400000 	.word	0x43400000
100116ec:	fffffc01 	.word	0xfffffc01
100116f0:	3ff00000 	.word	0x3ff00000
100116f4:	0003988e 	.word	0x0003988e
100116f8:	000bb679 	.word	0x000bb679
100116fc:	fff00000 	.word	0xfff00000
10011700:	4a454eef 	.word	0x4a454eef
10011704:	3fca7e28 	.word	0x3fca7e28
10011708:	93c9db65 	.word	0x93c9db65
1001170c:	3fcd864a 	.word	0x3fcd864a
10011710:	a91d4101 	.word	0xa91d4101
10011714:	3fd17460 	.word	0x3fd17460
10011718:	518f264d 	.word	0x518f264d
1001171c:	3fd55555 	.word	0x3fd55555
10011720:	db6fabff 	.word	0xdb6fabff
10011724:	3fdb6db6 	.word	0x3fdb6db6
10011728:	33333303 	.word	0x33333303
1001172c:	3fe33333 	.word	0x3fe33333
10011730:	40080000 	.word	0x40080000
10011734:	3feec709 	.word	0x3feec709
10011738:	dc3a03fd 	.word	0xdc3a03fd
1001173c:	145b01f5 	.word	0x145b01f5
10011740:	be3e2fe0 	.word	0xbe3e2fe0
10011744:	408fffff 	.word	0x408fffff
10011748:	bf700000 	.word	0xbf700000
1001174c:	652b82fe 	.word	0x652b82fe
10011750:	3c971547 	.word	0x3c971547
10011754:	2800      	cmp	r0, #0
10011756:	d000      	beq.n	1001175a <__ieee754_pow+0x62e>
10011758:	e18a      	b.n	10011a70 <__ieee754_pow+0x944>
1001175a:	2280      	movs	r2, #128	; 0x80
1001175c:	4be7      	ldr	r3, [pc, #924]	; (10011afc <__ieee754_pow+0x9d0>)
1001175e:	0352      	lsls	r2, r2, #13
10011760:	469c      	mov	ip, r3
10011762:	0013      	movs	r3, r2
10011764:	1536      	asrs	r6, r6, #20
10011766:	4466      	add	r6, ip
10011768:	4133      	asrs	r3, r6
1001176a:	49e5      	ldr	r1, [pc, #916]	; (10011b00 <__ieee754_pow+0x9d4>)
1001176c:	19db      	adds	r3, r3, r7
1001176e:	005e      	lsls	r6, r3, #1
10011770:	001c      	movs	r4, r3
10011772:	031b      	lsls	r3, r3, #12
10011774:	468c      	mov	ip, r1
10011776:	0b1b      	lsrs	r3, r3, #12
10011778:	4313      	orrs	r3, r2
1001177a:	2214      	movs	r2, #20
1001177c:	0d76      	lsrs	r6, r6, #21
1001177e:	4fe1      	ldr	r7, [pc, #900]	; (10011b04 <__ieee754_pow+0x9d8>)
10011780:	4466      	add	r6, ip
10011782:	4137      	asrs	r7, r6
10011784:	1b96      	subs	r6, r2, r6
10011786:	4133      	asrs	r3, r6
10011788:	4698      	mov	r8, r3
1001178a:	4653      	mov	r3, sl
1001178c:	43bc      	bics	r4, r7
1001178e:	2000      	movs	r0, #0
10011790:	0021      	movs	r1, r4
10011792:	2b00      	cmp	r3, #0
10011794:	da00      	bge.n	10011798 <__ieee754_pow+0x66c>
10011796:	e1a9      	b.n	10011aec <__ieee754_pow+0x9c0>
10011798:	0002      	movs	r2, r0
1001179a:	000b      	movs	r3, r1
1001179c:	9800      	ldr	r0, [sp, #0]
1001179e:	9901      	ldr	r1, [sp, #4]
100117a0:	f002 faa8 	bl	10013cf4 <__aeabi_dsub>
100117a4:	000b      	movs	r3, r1
100117a6:	9000      	str	r0, [sp, #0]
100117a8:	9101      	str	r1, [sp, #4]
100117aa:	0002      	movs	r2, r0
100117ac:	9804      	ldr	r0, [sp, #16]
100117ae:	9905      	ldr	r1, [sp, #20]
100117b0:	f001 f8d6 	bl	10012960 <__aeabi_dadd>
100117b4:	4643      	mov	r3, r8
100117b6:	051b      	lsls	r3, r3, #20
100117b8:	4699      	mov	r9, r3
100117ba:	2000      	movs	r0, #0
100117bc:	2200      	movs	r2, #0
100117be:	4bd2      	ldr	r3, [pc, #840]	; (10011b08 <__ieee754_pow+0x9dc>)
100117c0:	0006      	movs	r6, r0
100117c2:	000f      	movs	r7, r1
100117c4:	f002 f81c 	bl	10013800 <__aeabi_dmul>
100117c8:	9a00      	ldr	r2, [sp, #0]
100117ca:	9b01      	ldr	r3, [sp, #4]
100117cc:	9002      	str	r0, [sp, #8]
100117ce:	9103      	str	r1, [sp, #12]
100117d0:	0030      	movs	r0, r6
100117d2:	0039      	movs	r1, r7
100117d4:	f002 fa8e 	bl	10013cf4 <__aeabi_dsub>
100117d8:	0002      	movs	r2, r0
100117da:	000b      	movs	r3, r1
100117dc:	9804      	ldr	r0, [sp, #16]
100117de:	9905      	ldr	r1, [sp, #20]
100117e0:	f002 fa88 	bl	10013cf4 <__aeabi_dsub>
100117e4:	4ac9      	ldr	r2, [pc, #804]	; (10011b0c <__ieee754_pow+0x9e0>)
100117e6:	4bca      	ldr	r3, [pc, #808]	; (10011b10 <__ieee754_pow+0x9e4>)
100117e8:	f002 f80a 	bl	10013800 <__aeabi_dmul>
100117ec:	4ac9      	ldr	r2, [pc, #804]	; (10011b14 <__ieee754_pow+0x9e8>)
100117ee:	0004      	movs	r4, r0
100117f0:	000d      	movs	r5, r1
100117f2:	4bc9      	ldr	r3, [pc, #804]	; (10011b18 <__ieee754_pow+0x9ec>)
100117f4:	0030      	movs	r0, r6
100117f6:	0039      	movs	r1, r7
100117f8:	f002 f802 	bl	10013800 <__aeabi_dmul>
100117fc:	0002      	movs	r2, r0
100117fe:	000b      	movs	r3, r1
10011800:	0020      	movs	r0, r4
10011802:	0029      	movs	r1, r5
10011804:	f001 f8ac 	bl	10012960 <__aeabi_dadd>
10011808:	0004      	movs	r4, r0
1001180a:	000d      	movs	r5, r1
1001180c:	0002      	movs	r2, r0
1001180e:	000b      	movs	r3, r1
10011810:	9802      	ldr	r0, [sp, #8]
10011812:	9903      	ldr	r1, [sp, #12]
10011814:	f001 f8a4 	bl	10012960 <__aeabi_dadd>
10011818:	9a02      	ldr	r2, [sp, #8]
1001181a:	9b03      	ldr	r3, [sp, #12]
1001181c:	0006      	movs	r6, r0
1001181e:	000f      	movs	r7, r1
10011820:	f002 fa68 	bl	10013cf4 <__aeabi_dsub>
10011824:	0002      	movs	r2, r0
10011826:	000b      	movs	r3, r1
10011828:	0020      	movs	r0, r4
1001182a:	0029      	movs	r1, r5
1001182c:	f002 fa62 	bl	10013cf4 <__aeabi_dsub>
10011830:	0032      	movs	r2, r6
10011832:	9000      	str	r0, [sp, #0]
10011834:	9101      	str	r1, [sp, #4]
10011836:	003b      	movs	r3, r7
10011838:	0030      	movs	r0, r6
1001183a:	0039      	movs	r1, r7
1001183c:	f001 ffe0 	bl	10013800 <__aeabi_dmul>
10011840:	0004      	movs	r4, r0
10011842:	000d      	movs	r5, r1
10011844:	4ab5      	ldr	r2, [pc, #724]	; (10011b1c <__ieee754_pow+0x9f0>)
10011846:	4bb6      	ldr	r3, [pc, #728]	; (10011b20 <__ieee754_pow+0x9f4>)
10011848:	f001 ffda 	bl	10013800 <__aeabi_dmul>
1001184c:	4ab5      	ldr	r2, [pc, #724]	; (10011b24 <__ieee754_pow+0x9f8>)
1001184e:	4bb6      	ldr	r3, [pc, #728]	; (10011b28 <__ieee754_pow+0x9fc>)
10011850:	f002 fa50 	bl	10013cf4 <__aeabi_dsub>
10011854:	0022      	movs	r2, r4
10011856:	002b      	movs	r3, r5
10011858:	f001 ffd2 	bl	10013800 <__aeabi_dmul>
1001185c:	4ab3      	ldr	r2, [pc, #716]	; (10011b2c <__ieee754_pow+0xa00>)
1001185e:	4bb4      	ldr	r3, [pc, #720]	; (10011b30 <__ieee754_pow+0xa04>)
10011860:	f001 f87e 	bl	10012960 <__aeabi_dadd>
10011864:	0022      	movs	r2, r4
10011866:	002b      	movs	r3, r5
10011868:	f001 ffca 	bl	10013800 <__aeabi_dmul>
1001186c:	4ab1      	ldr	r2, [pc, #708]	; (10011b34 <__ieee754_pow+0xa08>)
1001186e:	4bb2      	ldr	r3, [pc, #712]	; (10011b38 <__ieee754_pow+0xa0c>)
10011870:	f002 fa40 	bl	10013cf4 <__aeabi_dsub>
10011874:	0022      	movs	r2, r4
10011876:	002b      	movs	r3, r5
10011878:	f001 ffc2 	bl	10013800 <__aeabi_dmul>
1001187c:	4aaf      	ldr	r2, [pc, #700]	; (10011b3c <__ieee754_pow+0xa10>)
1001187e:	4bb0      	ldr	r3, [pc, #704]	; (10011b40 <__ieee754_pow+0xa14>)
10011880:	f001 f86e 	bl	10012960 <__aeabi_dadd>
10011884:	0022      	movs	r2, r4
10011886:	002b      	movs	r3, r5
10011888:	f001 ffba 	bl	10013800 <__aeabi_dmul>
1001188c:	0002      	movs	r2, r0
1001188e:	000b      	movs	r3, r1
10011890:	0030      	movs	r0, r6
10011892:	0039      	movs	r1, r7
10011894:	f002 fa2e 	bl	10013cf4 <__aeabi_dsub>
10011898:	0004      	movs	r4, r0
1001189a:	000d      	movs	r5, r1
1001189c:	0002      	movs	r2, r0
1001189e:	000b      	movs	r3, r1
100118a0:	0030      	movs	r0, r6
100118a2:	0039      	movs	r1, r7
100118a4:	f001 ffac 	bl	10013800 <__aeabi_dmul>
100118a8:	2380      	movs	r3, #128	; 0x80
100118aa:	9002      	str	r0, [sp, #8]
100118ac:	9103      	str	r1, [sp, #12]
100118ae:	2200      	movs	r2, #0
100118b0:	05db      	lsls	r3, r3, #23
100118b2:	0020      	movs	r0, r4
100118b4:	0029      	movs	r1, r5
100118b6:	f002 fa1d 	bl	10013cf4 <__aeabi_dsub>
100118ba:	0002      	movs	r2, r0
100118bc:	000b      	movs	r3, r1
100118be:	9802      	ldr	r0, [sp, #8]
100118c0:	9903      	ldr	r1, [sp, #12]
100118c2:	f001 fb79 	bl	10012fb8 <__aeabi_ddiv>
100118c6:	9a00      	ldr	r2, [sp, #0]
100118c8:	9b01      	ldr	r3, [sp, #4]
100118ca:	0004      	movs	r4, r0
100118cc:	000d      	movs	r5, r1
100118ce:	0030      	movs	r0, r6
100118d0:	0039      	movs	r1, r7
100118d2:	f001 ff95 	bl	10013800 <__aeabi_dmul>
100118d6:	9a00      	ldr	r2, [sp, #0]
100118d8:	9b01      	ldr	r3, [sp, #4]
100118da:	f001 f841 	bl	10012960 <__aeabi_dadd>
100118de:	0002      	movs	r2, r0
100118e0:	000b      	movs	r3, r1
100118e2:	0020      	movs	r0, r4
100118e4:	0029      	movs	r1, r5
100118e6:	f002 fa05 	bl	10013cf4 <__aeabi_dsub>
100118ea:	0032      	movs	r2, r6
100118ec:	003b      	movs	r3, r7
100118ee:	f002 fa01 	bl	10013cf4 <__aeabi_dsub>
100118f2:	0002      	movs	r2, r0
100118f4:	000b      	movs	r3, r1
100118f6:	2000      	movs	r0, #0
100118f8:	4992      	ldr	r1, [pc, #584]	; (10011b44 <__ieee754_pow+0xa18>)
100118fa:	f002 f9fb 	bl	10013cf4 <__aeabi_dsub>
100118fe:	464b      	mov	r3, r9
10011900:	185b      	adds	r3, r3, r1
10011902:	151a      	asrs	r2, r3, #20
10011904:	2a00      	cmp	r2, #0
10011906:	dc00      	bgt.n	1001190a <__ieee754_pow+0x7de>
10011908:	e0f4      	b.n	10011af4 <__ieee754_pow+0x9c8>
1001190a:	0019      	movs	r1, r3
1001190c:	9a06      	ldr	r2, [sp, #24]
1001190e:	9b07      	ldr	r3, [sp, #28]
10011910:	f001 ff76 	bl	10013800 <__aeabi_dmul>
10011914:	0006      	movs	r6, r0
10011916:	e452      	b.n	100111be <__ieee754_pow+0x92>
10011918:	0032      	movs	r2, r6
1001191a:	0030      	movs	r0, r6
1001191c:	002b      	movs	r3, r5
1001191e:	0029      	movs	r1, r5
10011920:	f001 ff6e 	bl	10013800 <__aeabi_dmul>
10011924:	0006      	movs	r6, r0
10011926:	e44a      	b.n	100111be <__ieee754_pow+0x92>
10011928:	4b87      	ldr	r3, [pc, #540]	; (10011b48 <__ieee754_pow+0xa1c>)
1001192a:	004e      	lsls	r6, r1, #1
1001192c:	0876      	lsrs	r6, r6, #1
1001192e:	429e      	cmp	r6, r3
10011930:	dc00      	bgt.n	10011934 <__ieee754_pow+0x808>
10011932:	e0bf      	b.n	10011ab4 <__ieee754_pow+0x988>
10011934:	4b85      	ldr	r3, [pc, #532]	; (10011b4c <__ieee754_pow+0xa20>)
10011936:	18cb      	adds	r3, r1, r3
10011938:	4303      	orrs	r3, r0
1001193a:	d10c      	bne.n	10011956 <__ieee754_pow+0x82a>
1001193c:	9a00      	ldr	r2, [sp, #0]
1001193e:	9b01      	ldr	r3, [sp, #4]
10011940:	f002 f9d8 	bl	10013cf4 <__aeabi_dsub>
10011944:	0002      	movs	r2, r0
10011946:	000b      	movs	r3, r1
10011948:	9804      	ldr	r0, [sp, #16]
1001194a:	9905      	ldr	r1, [sp, #20]
1001194c:	f000 fcec 	bl	10012328 <__aeabi_dcmple>
10011950:	2800      	cmp	r0, #0
10011952:	d100      	bne.n	10011956 <__ieee754_pow+0x82a>
10011954:	e701      	b.n	1001175a <__ieee754_pow+0x62e>
10011956:	9806      	ldr	r0, [sp, #24]
10011958:	9907      	ldr	r1, [sp, #28]
1001195a:	4a7d      	ldr	r2, [pc, #500]	; (10011b50 <__ieee754_pow+0xa24>)
1001195c:	4b7d      	ldr	r3, [pc, #500]	; (10011b54 <__ieee754_pow+0xa28>)
1001195e:	f001 ff4f 	bl	10013800 <__aeabi_dmul>
10011962:	4a7b      	ldr	r2, [pc, #492]	; (10011b50 <__ieee754_pow+0xa24>)
10011964:	4b7b      	ldr	r3, [pc, #492]	; (10011b54 <__ieee754_pow+0xa28>)
10011966:	f001 ff4b 	bl	10013800 <__aeabi_dmul>
1001196a:	0006      	movs	r6, r0
1001196c:	f7ff fc27 	bl	100111be <__ieee754_pow+0x92>
10011970:	2300      	movs	r3, #0
10011972:	4c79      	ldr	r4, [pc, #484]	; (10011b58 <__ieee754_pow+0xa2c>)
10011974:	9306      	str	r3, [sp, #24]
10011976:	9407      	str	r4, [sp, #28]
10011978:	e666      	b.n	10011648 <__ieee754_pow+0x51c>
1001197a:	4653      	mov	r3, sl
1001197c:	2b00      	cmp	r3, #0
1001197e:	db00      	blt.n	10011982 <__ieee754_pow+0x856>
10011980:	e4c3      	b.n	1001130a <__ieee754_pow+0x1de>
10011982:	9b00      	ldr	r3, [sp, #0]
10011984:	9c01      	ldr	r4, [sp, #4]
10011986:	2280      	movs	r2, #128	; 0x80
10011988:	0612      	lsls	r2, r2, #24
1001198a:	001e      	movs	r6, r3
1001198c:	4694      	mov	ip, r2
1001198e:	0023      	movs	r3, r4
10011990:	4463      	add	r3, ip
10011992:	0019      	movs	r1, r3
10011994:	f7ff fc13 	bl	100111be <__ieee754_pow+0x92>
10011998:	0002      	movs	r2, r0
1001199a:	000b      	movs	r3, r1
1001199c:	2000      	movs	r0, #0
1001199e:	4969      	ldr	r1, [pc, #420]	; (10011b44 <__ieee754_pow+0xa18>)
100119a0:	f001 fb0a 	bl	10012fb8 <__aeabi_ddiv>
100119a4:	e44a      	b.n	1001123c <__ieee754_pow+0x110>
100119a6:	4b6d      	ldr	r3, [pc, #436]	; (10011b5c <__ieee754_pow+0xa30>)
100119a8:	429c      	cmp	r4, r3
100119aa:	dc00      	bgt.n	100119ae <__ieee754_pow+0x882>
100119ac:	e4aa      	b.n	10011304 <__ieee754_pow+0x1d8>
100119ae:	4b65      	ldr	r3, [pc, #404]	; (10011b44 <__ieee754_pow+0xa18>)
100119b0:	429c      	cmp	r4, r3
100119b2:	dd01      	ble.n	100119b8 <__ieee754_pow+0x88c>
100119b4:	f7ff fc2c 	bl	10011210 <__ieee754_pow+0xe4>
100119b8:	2200      	movs	r2, #0
100119ba:	4b62      	ldr	r3, [pc, #392]	; (10011b44 <__ieee754_pow+0xa18>)
100119bc:	f002 f99a 	bl	10013cf4 <__aeabi_dsub>
100119c0:	22c0      	movs	r2, #192	; 0xc0
100119c2:	4b67      	ldr	r3, [pc, #412]	; (10011b60 <__ieee754_pow+0xa34>)
100119c4:	05d2      	lsls	r2, r2, #23
100119c6:	0004      	movs	r4, r0
100119c8:	000d      	movs	r5, r1
100119ca:	f001 ff19 	bl	10013800 <__aeabi_dmul>
100119ce:	4a65      	ldr	r2, [pc, #404]	; (10011b64 <__ieee754_pow+0xa38>)
100119d0:	0006      	movs	r6, r0
100119d2:	000f      	movs	r7, r1
100119d4:	4b64      	ldr	r3, [pc, #400]	; (10011b68 <__ieee754_pow+0xa3c>)
100119d6:	0020      	movs	r0, r4
100119d8:	0029      	movs	r1, r5
100119da:	f001 ff11 	bl	10013800 <__aeabi_dmul>
100119de:	2200      	movs	r2, #0
100119e0:	9002      	str	r0, [sp, #8]
100119e2:	9103      	str	r1, [sp, #12]
100119e4:	4b61      	ldr	r3, [pc, #388]	; (10011b6c <__ieee754_pow+0xa40>)
100119e6:	0020      	movs	r0, r4
100119e8:	0029      	movs	r1, r5
100119ea:	f001 ff09 	bl	10013800 <__aeabi_dmul>
100119ee:	0002      	movs	r2, r0
100119f0:	000b      	movs	r3, r1
100119f2:	485f      	ldr	r0, [pc, #380]	; (10011b70 <__ieee754_pow+0xa44>)
100119f4:	495f      	ldr	r1, [pc, #380]	; (10011b74 <__ieee754_pow+0xa48>)
100119f6:	f002 f97d 	bl	10013cf4 <__aeabi_dsub>
100119fa:	0022      	movs	r2, r4
100119fc:	002b      	movs	r3, r5
100119fe:	f001 feff 	bl	10013800 <__aeabi_dmul>
10011a02:	0002      	movs	r2, r0
10011a04:	000b      	movs	r3, r1
10011a06:	2000      	movs	r0, #0
10011a08:	495b      	ldr	r1, [pc, #364]	; (10011b78 <__ieee754_pow+0xa4c>)
10011a0a:	f002 f973 	bl	10013cf4 <__aeabi_dsub>
10011a0e:	0022      	movs	r2, r4
10011a10:	9004      	str	r0, [sp, #16]
10011a12:	9105      	str	r1, [sp, #20]
10011a14:	002b      	movs	r3, r5
10011a16:	0020      	movs	r0, r4
10011a18:	0029      	movs	r1, r5
10011a1a:	f001 fef1 	bl	10013800 <__aeabi_dmul>
10011a1e:	0002      	movs	r2, r0
10011a20:	000b      	movs	r3, r1
10011a22:	9804      	ldr	r0, [sp, #16]
10011a24:	9905      	ldr	r1, [sp, #20]
10011a26:	f001 feeb 	bl	10013800 <__aeabi_dmul>
10011a2a:	4a54      	ldr	r2, [pc, #336]	; (10011b7c <__ieee754_pow+0xa50>)
10011a2c:	4b4c      	ldr	r3, [pc, #304]	; (10011b60 <__ieee754_pow+0xa34>)
10011a2e:	f001 fee7 	bl	10013800 <__aeabi_dmul>
10011a32:	0002      	movs	r2, r0
10011a34:	000b      	movs	r3, r1
10011a36:	9802      	ldr	r0, [sp, #8]
10011a38:	9903      	ldr	r1, [sp, #12]
10011a3a:	f002 f95b 	bl	10013cf4 <__aeabi_dsub>
10011a3e:	0002      	movs	r2, r0
10011a40:	000b      	movs	r3, r1
10011a42:	0004      	movs	r4, r0
10011a44:	000d      	movs	r5, r1
10011a46:	0030      	movs	r0, r6
10011a48:	0039      	movs	r1, r7
10011a4a:	f000 ff89 	bl	10012960 <__aeabi_dadd>
10011a4e:	2200      	movs	r2, #0
10011a50:	0010      	movs	r0, r2
10011a52:	003b      	movs	r3, r7
10011a54:	0032      	movs	r2, r6
10011a56:	9002      	str	r0, [sp, #8]
10011a58:	9103      	str	r1, [sp, #12]
10011a5a:	f002 f94b 	bl	10013cf4 <__aeabi_dsub>
10011a5e:	0002      	movs	r2, r0
10011a60:	000b      	movs	r3, r1
10011a62:	0020      	movs	r0, r4
10011a64:	0029      	movs	r1, r5
10011a66:	f002 f945 	bl	10013cf4 <__aeabi_dsub>
10011a6a:	9004      	str	r0, [sp, #16]
10011a6c:	9105      	str	r1, [sp, #20]
10011a6e:	e5e1      	b.n	10011634 <__ieee754_pow+0x508>
10011a70:	4a43      	ldr	r2, [pc, #268]	; (10011b80 <__ieee754_pow+0xa54>)
10011a72:	4b44      	ldr	r3, [pc, #272]	; (10011b84 <__ieee754_pow+0xa58>)
10011a74:	9806      	ldr	r0, [sp, #24]
10011a76:	9907      	ldr	r1, [sp, #28]
10011a78:	f001 fec2 	bl	10013800 <__aeabi_dmul>
10011a7c:	4a40      	ldr	r2, [pc, #256]	; (10011b80 <__ieee754_pow+0xa54>)
10011a7e:	4b41      	ldr	r3, [pc, #260]	; (10011b84 <__ieee754_pow+0xa58>)
10011a80:	f001 febe 	bl	10013800 <__aeabi_dmul>
10011a84:	0006      	movs	r6, r0
10011a86:	f7ff fb9a 	bl	100111be <__ieee754_pow+0x92>
10011a8a:	2a00      	cmp	r2, #0
10011a8c:	d001      	beq.n	10011a92 <__ieee754_pow+0x966>
10011a8e:	f7ff fba5 	bl	100111dc <__ieee754_pow+0xb0>
10011a92:	3214      	adds	r2, #20
10011a94:	1ad3      	subs	r3, r2, r3
10011a96:	003a      	movs	r2, r7
10011a98:	411a      	asrs	r2, r3
10011a9a:	0011      	movs	r1, r2
10011a9c:	4099      	lsls	r1, r3
10011a9e:	428f      	cmp	r7, r1
10011aa0:	d001      	beq.n	10011aa6 <__ieee754_pow+0x97a>
10011aa2:	f7ff fb6f 	bl	10011184 <__ieee754_pow+0x58>
10011aa6:	2301      	movs	r3, #1
10011aa8:	4013      	ands	r3, r2
10011aaa:	2202      	movs	r2, #2
10011aac:	1ad3      	subs	r3, r2, r3
10011aae:	469b      	mov	fp, r3
10011ab0:	f7ff fb68 	bl	10011184 <__ieee754_pow+0x58>
10011ab4:	4b30      	ldr	r3, [pc, #192]	; (10011b78 <__ieee754_pow+0xa4c>)
10011ab6:	429e      	cmp	r6, r3
10011ab8:	dd00      	ble.n	10011abc <__ieee754_pow+0x990>
10011aba:	e64e      	b.n	1001175a <__ieee754_pow+0x62e>
10011abc:	2300      	movs	r3, #0
10011abe:	4699      	mov	r9, r3
10011ac0:	4698      	mov	r8, r3
10011ac2:	e67a      	b.n	100117ba <__ieee754_pow+0x68e>
10011ac4:	0002      	movs	r2, r0
10011ac6:	000b      	movs	r3, r1
10011ac8:	f7ff fc14 	bl	100112f4 <__ieee754_pow+0x1c8>
10011acc:	2380      	movs	r3, #128	; 0x80
10011ace:	4c2e      	ldr	r4, [pc, #184]	; (10011b88 <__ieee754_pow+0xa5c>)
10011ad0:	05db      	lsls	r3, r3, #23
10011ad2:	9308      	str	r3, [sp, #32]
10011ad4:	9409      	str	r4, [sp, #36]	; 0x24
10011ad6:	4b2d      	ldr	r3, [pc, #180]	; (10011b8c <__ieee754_pow+0xa60>)
10011ad8:	4c2d      	ldr	r4, [pc, #180]	; (10011b90 <__ieee754_pow+0xa64>)
10011ada:	2200      	movs	r2, #0
10011adc:	930c      	str	r3, [sp, #48]	; 0x30
10011ade:	940d      	str	r4, [sp, #52]	; 0x34
10011ae0:	2480      	movs	r4, #128	; 0x80
10011ae2:	4b2c      	ldr	r3, [pc, #176]	; (10011b94 <__ieee754_pow+0xa68>)
10011ae4:	02e4      	lsls	r4, r4, #11
10011ae6:	9206      	str	r2, [sp, #24]
10011ae8:	9307      	str	r3, [sp, #28]
10011aea:	e456      	b.n	1001139a <__ieee754_pow+0x26e>
10011aec:	4643      	mov	r3, r8
10011aee:	425b      	negs	r3, r3
10011af0:	4698      	mov	r8, r3
10011af2:	e651      	b.n	10011798 <__ieee754_pow+0x66c>
10011af4:	4642      	mov	r2, r8
10011af6:	f000 f9fd 	bl	10011ef4 <scalbn>
10011afa:	e707      	b.n	1001190c <__ieee754_pow+0x7e0>
10011afc:	fffffc02 	.word	0xfffffc02
10011b00:	fffffc01 	.word	0xfffffc01
10011b04:	000fffff 	.word	0x000fffff
10011b08:	3fe62e43 	.word	0x3fe62e43
10011b0c:	fefa39ef 	.word	0xfefa39ef
10011b10:	3fe62e42 	.word	0x3fe62e42
10011b14:	0ca86c39 	.word	0x0ca86c39
10011b18:	be205c61 	.word	0xbe205c61
10011b1c:	72bea4d0 	.word	0x72bea4d0
10011b20:	3e663769 	.word	0x3e663769
10011b24:	c5d26bf1 	.word	0xc5d26bf1
10011b28:	3ebbbd41 	.word	0x3ebbbd41
10011b2c:	af25de2c 	.word	0xaf25de2c
10011b30:	3f11566a 	.word	0x3f11566a
10011b34:	16bebd93 	.word	0x16bebd93
10011b38:	3f66c16c 	.word	0x3f66c16c
10011b3c:	5555553e 	.word	0x5555553e
10011b40:	3fc55555 	.word	0x3fc55555
10011b44:	3ff00000 	.word	0x3ff00000
10011b48:	4090cbff 	.word	0x4090cbff
10011b4c:	3f6f3400 	.word	0x3f6f3400
10011b50:	c2f8f359 	.word	0xc2f8f359
10011b54:	01a56e1f 	.word	0x01a56e1f
10011b58:	bff00000 	.word	0xbff00000
10011b5c:	3feffffe 	.word	0x3feffffe
10011b60:	3ff71547 	.word	0x3ff71547
10011b64:	f85ddf44 	.word	0xf85ddf44
10011b68:	3e54ae0b 	.word	0x3e54ae0b
10011b6c:	3fd00000 	.word	0x3fd00000
10011b70:	55555555 	.word	0x55555555
10011b74:	3fd55555 	.word	0x3fd55555
10011b78:	3fe00000 	.word	0x3fe00000
10011b7c:	652b82fe 	.word	0x652b82fe
10011b80:	8800759c 	.word	0x8800759c
10011b84:	7e37e43c 	.word	0x7e37e43c
10011b88:	3fe2b803 	.word	0x3fe2b803
10011b8c:	43cfd006 	.word	0x43cfd006
10011b90:	3e4cfdeb 	.word	0x3e4cfdeb
10011b94:	3ff80000 	.word	0x3ff80000

10011b98 <__ieee754_sqrt>:
10011b98:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b9a:	4656      	mov	r6, sl
10011b9c:	464d      	mov	r5, r9
10011b9e:	4644      	mov	r4, r8
10011ba0:	465f      	mov	r7, fp
10011ba2:	4b75      	ldr	r3, [pc, #468]	; (10011d78 <__ieee754_sqrt+0x1e0>)
10011ba4:	b4f0      	push	{r4, r5, r6, r7}
10011ba6:	000a      	movs	r2, r1
10011ba8:	000d      	movs	r5, r1
10011baa:	0019      	movs	r1, r3
10011bac:	b083      	sub	sp, #12
10011bae:	0006      	movs	r6, r0
10011bb0:	0004      	movs	r4, r0
10011bb2:	4029      	ands	r1, r5
10011bb4:	4299      	cmp	r1, r3
10011bb6:	d100      	bne.n	10011bba <__ieee754_sqrt+0x22>
10011bb8:	e0ba      	b.n	10011d30 <__ieee754_sqrt+0x198>
10011bba:	2d00      	cmp	r5, #0
10011bbc:	dc00      	bgt.n	10011bc0 <__ieee754_sqrt+0x28>
10011bbe:	e094      	b.n	10011cea <__ieee754_sqrt+0x152>
10011bc0:	152d      	asrs	r5, r5, #20
10011bc2:	d100      	bne.n	10011bc6 <__ieee754_sqrt+0x2e>
10011bc4:	e0a3      	b.n	10011d0e <__ieee754_sqrt+0x176>
10011bc6:	4b6d      	ldr	r3, [pc, #436]	; (10011d7c <__ieee754_sqrt+0x1e4>)
10011bc8:	0312      	lsls	r2, r2, #12
10011bca:	469c      	mov	ip, r3
10011bcc:	2380      	movs	r3, #128	; 0x80
10011bce:	0b12      	lsrs	r2, r2, #12
10011bd0:	035b      	lsls	r3, r3, #13
10011bd2:	4465      	add	r5, ip
10011bd4:	431a      	orrs	r2, r3
10011bd6:	07eb      	lsls	r3, r5, #31
10011bd8:	d500      	bpl.n	10011bdc <__ieee754_sqrt+0x44>
10011bda:	e081      	b.n	10011ce0 <__ieee754_sqrt+0x148>
10011bdc:	106b      	asrs	r3, r5, #1
10011bde:	4698      	mov	r8, r3
10011be0:	0fe3      	lsrs	r3, r4, #31
10011be2:	189b      	adds	r3, r3, r2
10011be4:	189b      	adds	r3, r3, r2
10011be6:	2280      	movs	r2, #128	; 0x80
10011be8:	2116      	movs	r1, #22
10011bea:	2600      	movs	r6, #0
10011bec:	2700      	movs	r7, #0
10011bee:	0064      	lsls	r4, r4, #1
10011bf0:	0392      	lsls	r2, r2, #14
10011bf2:	18b8      	adds	r0, r7, r2
10011bf4:	4298      	cmp	r0, r3
10011bf6:	dc02      	bgt.n	10011bfe <__ieee754_sqrt+0x66>
10011bf8:	1887      	adds	r7, r0, r2
10011bfa:	1a1b      	subs	r3, r3, r0
10011bfc:	18b6      	adds	r6, r6, r2
10011bfe:	0fe0      	lsrs	r0, r4, #31
10011c00:	005b      	lsls	r3, r3, #1
10011c02:	3901      	subs	r1, #1
10011c04:	181b      	adds	r3, r3, r0
10011c06:	0064      	lsls	r4, r4, #1
10011c08:	0852      	lsrs	r2, r2, #1
10011c0a:	2900      	cmp	r1, #0
10011c0c:	d1f1      	bne.n	10011bf2 <__ieee754_sqrt+0x5a>
10011c0e:	2200      	movs	r2, #0
10011c10:	9201      	str	r2, [sp, #4]
10011c12:	4694      	mov	ip, r2
10011c14:	2280      	movs	r2, #128	; 0x80
10011c16:	0612      	lsls	r2, r2, #24
10011c18:	2020      	movs	r0, #32
10011c1a:	4691      	mov	r9, r2
10011c1c:	e009      	b.n	10011c32 <__ieee754_sqrt+0x9a>
10011c1e:	429f      	cmp	r7, r3
10011c20:	d041      	beq.n	10011ca6 <__ieee754_sqrt+0x10e>
10011c22:	0fe1      	lsrs	r1, r4, #31
10011c24:	18c9      	adds	r1, r1, r3
10011c26:	3801      	subs	r0, #1
10011c28:	18cb      	adds	r3, r1, r3
10011c2a:	0064      	lsls	r4, r4, #1
10011c2c:	0852      	lsrs	r2, r2, #1
10011c2e:	2800      	cmp	r0, #0
10011c30:	d01e      	beq.n	10011c70 <__ieee754_sqrt+0xd8>
10011c32:	4661      	mov	r1, ip
10011c34:	1851      	adds	r1, r2, r1
10011c36:	429f      	cmp	r7, r3
10011c38:	daf1      	bge.n	10011c1e <__ieee754_sqrt+0x86>
10011c3a:	188d      	adds	r5, r1, r2
10011c3c:	46ac      	mov	ip, r5
10011c3e:	0fcd      	lsrs	r5, r1, #31
10011c40:	07ed      	lsls	r5, r5, #31
10011c42:	46ba      	mov	sl, r7
10011c44:	454d      	cmp	r5, r9
10011c46:	d039      	beq.n	10011cbc <__ieee754_sqrt+0x124>
10011c48:	1bdb      	subs	r3, r3, r7
10011c4a:	428c      	cmp	r4, r1
10011c4c:	41bf      	sbcs	r7, r7
10011c4e:	427f      	negs	r7, r7
10011c50:	1bdb      	subs	r3, r3, r7
10011c52:	1a64      	subs	r4, r4, r1
10011c54:	9901      	ldr	r1, [sp, #4]
10011c56:	3801      	subs	r0, #1
10011c58:	468b      	mov	fp, r1
10011c5a:	4493      	add	fp, r2
10011c5c:	4659      	mov	r1, fp
10011c5e:	9101      	str	r1, [sp, #4]
10011c60:	0fe1      	lsrs	r1, r4, #31
10011c62:	18c9      	adds	r1, r1, r3
10011c64:	4657      	mov	r7, sl
10011c66:	18cb      	adds	r3, r1, r3
10011c68:	0064      	lsls	r4, r4, #1
10011c6a:	0852      	lsrs	r2, r2, #1
10011c6c:	2800      	cmp	r0, #0
10011c6e:	d1e0      	bne.n	10011c32 <__ieee754_sqrt+0x9a>
10011c70:	4323      	orrs	r3, r4
10011c72:	d12b      	bne.n	10011ccc <__ieee754_sqrt+0x134>
10011c74:	9b01      	ldr	r3, [sp, #4]
10011c76:	085b      	lsrs	r3, r3, #1
10011c78:	4941      	ldr	r1, [pc, #260]	; (10011d80 <__ieee754_sqrt+0x1e8>)
10011c7a:	1072      	asrs	r2, r6, #1
10011c7c:	468c      	mov	ip, r1
10011c7e:	4462      	add	r2, ip
10011c80:	07f1      	lsls	r1, r6, #31
10011c82:	d502      	bpl.n	10011c8a <__ieee754_sqrt+0xf2>
10011c84:	2180      	movs	r1, #128	; 0x80
10011c86:	0609      	lsls	r1, r1, #24
10011c88:	430b      	orrs	r3, r1
10011c8a:	4641      	mov	r1, r8
10011c8c:	0509      	lsls	r1, r1, #20
10011c8e:	188d      	adds	r5, r1, r2
10011c90:	001e      	movs	r6, r3
10011c92:	002f      	movs	r7, r5
10011c94:	0030      	movs	r0, r6
10011c96:	0039      	movs	r1, r7
10011c98:	b003      	add	sp, #12
10011c9a:	bc3c      	pop	{r2, r3, r4, r5}
10011c9c:	4690      	mov	r8, r2
10011c9e:	4699      	mov	r9, r3
10011ca0:	46a2      	mov	sl, r4
10011ca2:	46ab      	mov	fp, r5
10011ca4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011ca6:	42a1      	cmp	r1, r4
10011ca8:	d80e      	bhi.n	10011cc8 <__ieee754_sqrt+0x130>
10011caa:	188d      	adds	r5, r1, r2
10011cac:	46ac      	mov	ip, r5
10011cae:	0fcd      	lsrs	r5, r1, #31
10011cb0:	07ed      	lsls	r5, r5, #31
10011cb2:	454d      	cmp	r5, r9
10011cb4:	d048      	beq.n	10011d48 <__ieee754_sqrt+0x1b0>
10011cb6:	469a      	mov	sl, r3
10011cb8:	2300      	movs	r3, #0
10011cba:	e7ca      	b.n	10011c52 <__ieee754_sqrt+0xba>
10011cbc:	4665      	mov	r5, ip
10011cbe:	2d00      	cmp	r5, #0
10011cc0:	dbc2      	blt.n	10011c48 <__ieee754_sqrt+0xb0>
10011cc2:	1c7d      	adds	r5, r7, #1
10011cc4:	46aa      	mov	sl, r5
10011cc6:	e7bf      	b.n	10011c48 <__ieee754_sqrt+0xb0>
10011cc8:	003b      	movs	r3, r7
10011cca:	e7aa      	b.n	10011c22 <__ieee754_sqrt+0x8a>
10011ccc:	9b01      	ldr	r3, [sp, #4]
10011cce:	3301      	adds	r3, #1
10011cd0:	d03e      	beq.n	10011d50 <__ieee754_sqrt+0x1b8>
10011cd2:	9a01      	ldr	r2, [sp, #4]
10011cd4:	2301      	movs	r3, #1
10011cd6:	4694      	mov	ip, r2
10011cd8:	4013      	ands	r3, r2
10011cda:	4463      	add	r3, ip
10011cdc:	085b      	lsrs	r3, r3, #1
10011cde:	e7cb      	b.n	10011c78 <__ieee754_sqrt+0xe0>
10011ce0:	0fe3      	lsrs	r3, r4, #31
10011ce2:	0052      	lsls	r2, r2, #1
10011ce4:	189a      	adds	r2, r3, r2
10011ce6:	0064      	lsls	r4, r4, #1
10011ce8:	e778      	b.n	10011bdc <__ieee754_sqrt+0x44>
10011cea:	006b      	lsls	r3, r5, #1
10011cec:	085b      	lsrs	r3, r3, #1
10011cee:	4303      	orrs	r3, r0
10011cf0:	002f      	movs	r7, r5
10011cf2:	2b00      	cmp	r3, #0
10011cf4:	d0ce      	beq.n	10011c94 <__ieee754_sqrt+0xfc>
10011cf6:	2500      	movs	r5, #0
10011cf8:	2a00      	cmp	r2, #0
10011cfa:	d131      	bne.n	10011d60 <__ieee754_sqrt+0x1c8>
10011cfc:	0ae2      	lsrs	r2, r4, #11
10011cfe:	3d15      	subs	r5, #21
10011d00:	0564      	lsls	r4, r4, #21
10011d02:	2a00      	cmp	r2, #0
10011d04:	d0fa      	beq.n	10011cfc <__ieee754_sqrt+0x164>
10011d06:	2380      	movs	r3, #128	; 0x80
10011d08:	035b      	lsls	r3, r3, #13
10011d0a:	421a      	tst	r2, r3
10011d0c:	d123      	bne.n	10011d56 <__ieee754_sqrt+0x1be>
10011d0e:	2080      	movs	r0, #128	; 0x80
10011d10:	2300      	movs	r3, #0
10011d12:	0340      	lsls	r0, r0, #13
10011d14:	e000      	b.n	10011d18 <__ieee754_sqrt+0x180>
10011d16:	000b      	movs	r3, r1
10011d18:	0052      	lsls	r2, r2, #1
10011d1a:	1c59      	adds	r1, r3, #1
10011d1c:	4202      	tst	r2, r0
10011d1e:	d0fa      	beq.n	10011d16 <__ieee754_sqrt+0x17e>
10011d20:	2020      	movs	r0, #32
10011d22:	1a40      	subs	r0, r0, r1
10011d24:	1aed      	subs	r5, r5, r3
10011d26:	0023      	movs	r3, r4
10011d28:	40c3      	lsrs	r3, r0
10011d2a:	408c      	lsls	r4, r1
10011d2c:	431a      	orrs	r2, r3
10011d2e:	e74a      	b.n	10011bc6 <__ieee754_sqrt+0x2e>
10011d30:	0002      	movs	r2, r0
10011d32:	002b      	movs	r3, r5
10011d34:	0029      	movs	r1, r5
10011d36:	f001 fd63 	bl	10013800 <__aeabi_dmul>
10011d3a:	0032      	movs	r2, r6
10011d3c:	002b      	movs	r3, r5
10011d3e:	f000 fe0f 	bl	10012960 <__aeabi_dadd>
10011d42:	0006      	movs	r6, r0
10011d44:	000f      	movs	r7, r1
10011d46:	e7a5      	b.n	10011c94 <__ieee754_sqrt+0xfc>
10011d48:	4665      	mov	r5, ip
10011d4a:	2d00      	cmp	r5, #0
10011d4c:	dab9      	bge.n	10011cc2 <__ieee754_sqrt+0x12a>
10011d4e:	e7b2      	b.n	10011cb6 <__ieee754_sqrt+0x11e>
10011d50:	3601      	adds	r6, #1
10011d52:	2300      	movs	r3, #0
10011d54:	e790      	b.n	10011c78 <__ieee754_sqrt+0xe0>
10011d56:	2301      	movs	r3, #1
10011d58:	2020      	movs	r0, #32
10011d5a:	425b      	negs	r3, r3
10011d5c:	2100      	movs	r1, #0
10011d5e:	e7e1      	b.n	10011d24 <__ieee754_sqrt+0x18c>
10011d60:	003b      	movs	r3, r7
10011d62:	0002      	movs	r2, r0
10011d64:	0039      	movs	r1, r7
10011d66:	f001 ffc5 	bl	10013cf4 <__aeabi_dsub>
10011d6a:	0002      	movs	r2, r0
10011d6c:	000b      	movs	r3, r1
10011d6e:	f001 f923 	bl	10012fb8 <__aeabi_ddiv>
10011d72:	0006      	movs	r6, r0
10011d74:	000f      	movs	r7, r1
10011d76:	e78d      	b.n	10011c94 <__ieee754_sqrt+0xfc>
10011d78:	7ff00000 	.word	0x7ff00000
10011d7c:	fffffc01 	.word	0xfffffc01
10011d80:	3fe00000 	.word	0x3fe00000

10011d84 <fabs>:
10011d84:	0049      	lsls	r1, r1, #1
10011d86:	084b      	lsrs	r3, r1, #1
10011d88:	0019      	movs	r1, r3
10011d8a:	4770      	bx	lr

10011d8c <finite>:
10011d8c:	4b03      	ldr	r3, [pc, #12]	; (10011d9c <finite+0x10>)
10011d8e:	0048      	lsls	r0, r1, #1
10011d90:	469c      	mov	ip, r3
10011d92:	0840      	lsrs	r0, r0, #1
10011d94:	4460      	add	r0, ip
10011d96:	0fc0      	lsrs	r0, r0, #31
10011d98:	4770      	bx	lr
10011d9a:	46c0      	nop			; (mov r8, r8)
10011d9c:	80100000 	.word	0x80100000

10011da0 <matherr>:
10011da0:	2000      	movs	r0, #0
10011da2:	4770      	bx	lr

10011da4 <nan>:
10011da4:	2000      	movs	r0, #0
10011da6:	4901      	ldr	r1, [pc, #4]	; (10011dac <nan+0x8>)
10011da8:	4770      	bx	lr
10011daa:	46c0      	nop			; (mov r8, r8)
10011dac:	7ff80000 	.word	0x7ff80000

10011db0 <rint>:
10011db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10011db2:	4647      	mov	r7, r8
10011db4:	b480      	push	{r7}
10011db6:	0fcb      	lsrs	r3, r1, #31
10011db8:	4698      	mov	r8, r3
10011dba:	4c4a      	ldr	r4, [pc, #296]	; (10011ee4 <rint+0x134>)
10011dbc:	004b      	lsls	r3, r1, #1
10011dbe:	0d5b      	lsrs	r3, r3, #21
10011dc0:	191e      	adds	r6, r3, r4
10011dc2:	b082      	sub	sp, #8
10011dc4:	0007      	movs	r7, r0
10011dc6:	000a      	movs	r2, r1
10011dc8:	2e13      	cmp	r6, #19
10011dca:	dc35      	bgt.n	10011e38 <rint+0x88>
10011dcc:	2e00      	cmp	r6, #0
10011dce:	db57      	blt.n	10011e80 <rint+0xd0>
10011dd0:	4b45      	ldr	r3, [pc, #276]	; (10011ee8 <rint+0x138>)
10011dd2:	0004      	movs	r4, r0
10011dd4:	4133      	asrs	r3, r6
10011dd6:	001f      	movs	r7, r3
10011dd8:	400f      	ands	r7, r1
10011dda:	4307      	orrs	r7, r0
10011ddc:	000d      	movs	r5, r1
10011dde:	2f00      	cmp	r7, #0
10011de0:	d024      	beq.n	10011e2c <rint+0x7c>
10011de2:	085b      	lsrs	r3, r3, #1
10011de4:	001c      	movs	r4, r3
10011de6:	400c      	ands	r4, r1
10011de8:	4320      	orrs	r0, r4
10011dea:	2700      	movs	r7, #0
10011dec:	2800      	cmp	r0, #0
10011dee:	d007      	beq.n	10011e00 <rint+0x50>
10011df0:	2e13      	cmp	r6, #19
10011df2:	d100      	bne.n	10011df6 <rint+0x46>
10011df4:	e072      	b.n	10011edc <rint+0x12c>
10011df6:	2280      	movs	r2, #128	; 0x80
10011df8:	02d2      	lsls	r2, r2, #11
10011dfa:	4132      	asrs	r2, r6
10011dfc:	4399      	bics	r1, r3
10011dfe:	430a      	orrs	r2, r1
10011e00:	4643      	mov	r3, r8
10011e02:	00de      	lsls	r6, r3, #3
10011e04:	4b39      	ldr	r3, [pc, #228]	; (10011eec <rint+0x13c>)
10011e06:	0011      	movs	r1, r2
10011e08:	199e      	adds	r6, r3, r6
10011e0a:	6834      	ldr	r4, [r6, #0]
10011e0c:	6875      	ldr	r5, [r6, #4]
10011e0e:	0038      	movs	r0, r7
10011e10:	0022      	movs	r2, r4
10011e12:	002b      	movs	r3, r5
10011e14:	f000 fda4 	bl	10012960 <__aeabi_dadd>
10011e18:	9000      	str	r0, [sp, #0]
10011e1a:	9101      	str	r1, [sp, #4]
10011e1c:	9800      	ldr	r0, [sp, #0]
10011e1e:	9901      	ldr	r1, [sp, #4]
10011e20:	0022      	movs	r2, r4
10011e22:	002b      	movs	r3, r5
10011e24:	f001 ff66 	bl	10013cf4 <__aeabi_dsub>
10011e28:	0004      	movs	r4, r0
10011e2a:	000d      	movs	r5, r1
10011e2c:	0020      	movs	r0, r4
10011e2e:	0029      	movs	r1, r5
10011e30:	b002      	add	sp, #8
10011e32:	bc04      	pop	{r2}
10011e34:	4690      	mov	r8, r2
10011e36:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011e38:	2e33      	cmp	r6, #51	; 0x33
10011e3a:	dd0c      	ble.n	10011e56 <rint+0xa6>
10011e3c:	2380      	movs	r3, #128	; 0x80
10011e3e:	0004      	movs	r4, r0
10011e40:	000d      	movs	r5, r1
10011e42:	00db      	lsls	r3, r3, #3
10011e44:	429e      	cmp	r6, r3
10011e46:	d1f1      	bne.n	10011e2c <rint+0x7c>
10011e48:	0002      	movs	r2, r0
10011e4a:	000b      	movs	r3, r1
10011e4c:	f000 fd88 	bl	10012960 <__aeabi_dadd>
10011e50:	0004      	movs	r4, r0
10011e52:	000d      	movs	r5, r1
10011e54:	e7ea      	b.n	10011e2c <rint+0x7c>
10011e56:	4c26      	ldr	r4, [pc, #152]	; (10011ef0 <rint+0x140>)
10011e58:	000d      	movs	r5, r1
10011e5a:	46a4      	mov	ip, r4
10011e5c:	2401      	movs	r4, #1
10011e5e:	4463      	add	r3, ip
10011e60:	4264      	negs	r4, r4
10011e62:	40dc      	lsrs	r4, r3
10011e64:	46a4      	mov	ip, r4
10011e66:	4661      	mov	r1, ip
10011e68:	0004      	movs	r4, r0
10011e6a:	4201      	tst	r1, r0
10011e6c:	d0de      	beq.n	10011e2c <rint+0x7c>
10011e6e:	0849      	lsrs	r1, r1, #1
10011e70:	4201      	tst	r1, r0
10011e72:	d0c5      	beq.n	10011e00 <rint+0x50>
10011e74:	2780      	movs	r7, #128	; 0x80
10011e76:	05ff      	lsls	r7, r7, #23
10011e78:	411f      	asrs	r7, r3
10011e7a:	4388      	bics	r0, r1
10011e7c:	4307      	orrs	r7, r0
10011e7e:	e7bf      	b.n	10011e00 <rint+0x50>
10011e80:	004b      	lsls	r3, r1, #1
10011e82:	085b      	lsrs	r3, r3, #1
10011e84:	4303      	orrs	r3, r0
10011e86:	0004      	movs	r4, r0
10011e88:	000d      	movs	r5, r1
10011e8a:	2b00      	cmp	r3, #0
10011e8c:	d0ce      	beq.n	10011e2c <rint+0x7c>
10011e8e:	030b      	lsls	r3, r1, #12
10011e90:	0b1b      	lsrs	r3, r3, #12
10011e92:	4303      	orrs	r3, r0
10011e94:	425a      	negs	r2, r3
10011e96:	4313      	orrs	r3, r2
10011e98:	2280      	movs	r2, #128	; 0x80
10011e9a:	0b1b      	lsrs	r3, r3, #12
10011e9c:	0312      	lsls	r2, r2, #12
10011e9e:	4013      	ands	r3, r2
10011ea0:	0c4a      	lsrs	r2, r1, #17
10011ea2:	0452      	lsls	r2, r2, #17
10011ea4:	4313      	orrs	r3, r2
10011ea6:	0019      	movs	r1, r3
10011ea8:	4643      	mov	r3, r8
10011eaa:	4a10      	ldr	r2, [pc, #64]	; (10011eec <rint+0x13c>)
10011eac:	00db      	lsls	r3, r3, #3
10011eae:	18d3      	adds	r3, r2, r3
10011eb0:	681c      	ldr	r4, [r3, #0]
10011eb2:	685d      	ldr	r5, [r3, #4]
10011eb4:	0022      	movs	r2, r4
10011eb6:	002b      	movs	r3, r5
10011eb8:	f000 fd52 	bl	10012960 <__aeabi_dadd>
10011ebc:	9000      	str	r0, [sp, #0]
10011ebe:	9101      	str	r1, [sp, #4]
10011ec0:	9800      	ldr	r0, [sp, #0]
10011ec2:	9901      	ldr	r1, [sp, #4]
10011ec4:	0022      	movs	r2, r4
10011ec6:	002b      	movs	r3, r5
10011ec8:	f001 ff14 	bl	10013cf4 <__aeabi_dsub>
10011ecc:	4642      	mov	r2, r8
10011ece:	004b      	lsls	r3, r1, #1
10011ed0:	085b      	lsrs	r3, r3, #1
10011ed2:	07d6      	lsls	r6, r2, #31
10011ed4:	4333      	orrs	r3, r6
10011ed6:	0004      	movs	r4, r0
10011ed8:	001d      	movs	r5, r3
10011eda:	e7a7      	b.n	10011e2c <rint+0x7c>
10011edc:	2780      	movs	r7, #128	; 0x80
10011ede:	063f      	lsls	r7, r7, #24
10011ee0:	e789      	b.n	10011df6 <rint+0x46>
10011ee2:	46c0      	nop			; (mov r8, r8)
10011ee4:	fffffc01 	.word	0xfffffc01
10011ee8:	000fffff 	.word	0x000fffff
10011eec:	10017180 	.word	0x10017180
10011ef0:	fffffbed 	.word	0xfffffbed

10011ef4 <scalbn>:
10011ef4:	004b      	lsls	r3, r1, #1
10011ef6:	b570      	push	{r4, r5, r6, lr}
10011ef8:	0d5b      	lsrs	r3, r3, #21
10011efa:	0014      	movs	r4, r2
10011efc:	000a      	movs	r2, r1
10011efe:	2b00      	cmp	r3, #0
10011f00:	d11a      	bne.n	10011f38 <scalbn+0x44>
10011f02:	004b      	lsls	r3, r1, #1
10011f04:	085b      	lsrs	r3, r3, #1
10011f06:	4303      	orrs	r3, r0
10011f08:	d015      	beq.n	10011f36 <scalbn+0x42>
10011f0a:	2200      	movs	r2, #0
10011f0c:	4b22      	ldr	r3, [pc, #136]	; (10011f98 <scalbn+0xa4>)
10011f0e:	f001 fc77 	bl	10013800 <__aeabi_dmul>
10011f12:	4b22      	ldr	r3, [pc, #136]	; (10011f9c <scalbn+0xa8>)
10011f14:	000a      	movs	r2, r1
10011f16:	429c      	cmp	r4, r3
10011f18:	db22      	blt.n	10011f60 <scalbn+0x6c>
10011f1a:	004b      	lsls	r3, r1, #1
10011f1c:	0d5b      	lsrs	r3, r3, #21
10011f1e:	3b36      	subs	r3, #54	; 0x36
10011f20:	4d1f      	ldr	r5, [pc, #124]	; (10011fa0 <scalbn+0xac>)
10011f22:	18e3      	adds	r3, r4, r3
10011f24:	42ab      	cmp	r3, r5
10011f26:	dc20      	bgt.n	10011f6a <scalbn+0x76>
10011f28:	2b00      	cmp	r3, #0
10011f2a:	dd0d      	ble.n	10011f48 <scalbn+0x54>
10011f2c:	4c1d      	ldr	r4, [pc, #116]	; (10011fa4 <scalbn+0xb0>)
10011f2e:	051b      	lsls	r3, r3, #20
10011f30:	4022      	ands	r2, r4
10011f32:	431a      	orrs	r2, r3
10011f34:	0011      	movs	r1, r2
10011f36:	bd70      	pop	{r4, r5, r6, pc}
10011f38:	4d1b      	ldr	r5, [pc, #108]	; (10011fa8 <scalbn+0xb4>)
10011f3a:	42ab      	cmp	r3, r5
10011f3c:	d1f0      	bne.n	10011f20 <scalbn+0x2c>
10011f3e:	0002      	movs	r2, r0
10011f40:	000b      	movs	r3, r1
10011f42:	f000 fd0d 	bl	10012960 <__aeabi_dadd>
10011f46:	e7f6      	b.n	10011f36 <scalbn+0x42>
10011f48:	001d      	movs	r5, r3
10011f4a:	3535      	adds	r5, #53	; 0x35
10011f4c:	da18      	bge.n	10011f80 <scalbn+0x8c>
10011f4e:	4b17      	ldr	r3, [pc, #92]	; (10011fac <scalbn+0xb8>)
10011f50:	0002      	movs	r2, r0
10011f52:	429c      	cmp	r4, r3
10011f54:	dc0a      	bgt.n	10011f6c <scalbn+0x78>
10011f56:	000b      	movs	r3, r1
10011f58:	4815      	ldr	r0, [pc, #84]	; (10011fb0 <scalbn+0xbc>)
10011f5a:	4916      	ldr	r1, [pc, #88]	; (10011fb4 <scalbn+0xc0>)
10011f5c:	f000 f832 	bl	10011fc4 <copysign>
10011f60:	4a13      	ldr	r2, [pc, #76]	; (10011fb0 <scalbn+0xbc>)
10011f62:	4b14      	ldr	r3, [pc, #80]	; (10011fb4 <scalbn+0xc0>)
10011f64:	f001 fc4c 	bl	10013800 <__aeabi_dmul>
10011f68:	e7e5      	b.n	10011f36 <scalbn+0x42>
10011f6a:	0002      	movs	r2, r0
10011f6c:	000b      	movs	r3, r1
10011f6e:	4812      	ldr	r0, [pc, #72]	; (10011fb8 <scalbn+0xc4>)
10011f70:	4912      	ldr	r1, [pc, #72]	; (10011fbc <scalbn+0xc8>)
10011f72:	f000 f827 	bl	10011fc4 <copysign>
10011f76:	4a10      	ldr	r2, [pc, #64]	; (10011fb8 <scalbn+0xc4>)
10011f78:	4b10      	ldr	r3, [pc, #64]	; (10011fbc <scalbn+0xc8>)
10011f7a:	f001 fc41 	bl	10013800 <__aeabi_dmul>
10011f7e:	e7da      	b.n	10011f36 <scalbn+0x42>
10011f80:	4c08      	ldr	r4, [pc, #32]	; (10011fa4 <scalbn+0xb0>)
10011f82:	3336      	adds	r3, #54	; 0x36
10011f84:	4022      	ands	r2, r4
10011f86:	051b      	lsls	r3, r3, #20
10011f88:	4313      	orrs	r3, r2
10011f8a:	0019      	movs	r1, r3
10011f8c:	2200      	movs	r2, #0
10011f8e:	4b0c      	ldr	r3, [pc, #48]	; (10011fc0 <scalbn+0xcc>)
10011f90:	f001 fc36 	bl	10013800 <__aeabi_dmul>
10011f94:	e7cf      	b.n	10011f36 <scalbn+0x42>
10011f96:	46c0      	nop			; (mov r8, r8)
10011f98:	43500000 	.word	0x43500000
10011f9c:	ffff3cb0 	.word	0xffff3cb0
10011fa0:	000007fe 	.word	0x000007fe
10011fa4:	800fffff 	.word	0x800fffff
10011fa8:	000007ff 	.word	0x000007ff
10011fac:	0000c350 	.word	0x0000c350
10011fb0:	c2f8f359 	.word	0xc2f8f359
10011fb4:	01a56e1f 	.word	0x01a56e1f
10011fb8:	8800759c 	.word	0x8800759c
10011fbc:	7e37e43c 	.word	0x7e37e43c
10011fc0:	3c900000 	.word	0x3c900000

10011fc4 <copysign>:
10011fc4:	b530      	push	{r4, r5, lr}
10011fc6:	004a      	lsls	r2, r1, #1
10011fc8:	0fdb      	lsrs	r3, r3, #31
10011fca:	07db      	lsls	r3, r3, #31
10011fcc:	0852      	lsrs	r2, r2, #1
10011fce:	431a      	orrs	r2, r3
10011fd0:	0011      	movs	r1, r2
10011fd2:	bd30      	pop	{r4, r5, pc}

10011fd4 <__gnu_thumb1_case_sqi>:
10011fd4:	b402      	push	{r1}
10011fd6:	4671      	mov	r1, lr
10011fd8:	0849      	lsrs	r1, r1, #1
10011fda:	0049      	lsls	r1, r1, #1
10011fdc:	5609      	ldrsb	r1, [r1, r0]
10011fde:	0049      	lsls	r1, r1, #1
10011fe0:	448e      	add	lr, r1
10011fe2:	bc02      	pop	{r1}
10011fe4:	4770      	bx	lr
10011fe6:	46c0      	nop			; (mov r8, r8)

10011fe8 <__gnu_thumb1_case_uqi>:
10011fe8:	b402      	push	{r1}
10011fea:	4671      	mov	r1, lr
10011fec:	0849      	lsrs	r1, r1, #1
10011fee:	0049      	lsls	r1, r1, #1
10011ff0:	5c09      	ldrb	r1, [r1, r0]
10011ff2:	0049      	lsls	r1, r1, #1
10011ff4:	448e      	add	lr, r1
10011ff6:	bc02      	pop	{r1}
10011ff8:	4770      	bx	lr
10011ffa:	46c0      	nop			; (mov r8, r8)

10011ffc <__aeabi_uidiv>:
10011ffc:	2200      	movs	r2, #0
10011ffe:	0843      	lsrs	r3, r0, #1
10012000:	428b      	cmp	r3, r1
10012002:	d374      	bcc.n	100120ee <__aeabi_uidiv+0xf2>
10012004:	0903      	lsrs	r3, r0, #4
10012006:	428b      	cmp	r3, r1
10012008:	d35f      	bcc.n	100120ca <__aeabi_uidiv+0xce>
1001200a:	0a03      	lsrs	r3, r0, #8
1001200c:	428b      	cmp	r3, r1
1001200e:	d344      	bcc.n	1001209a <__aeabi_uidiv+0x9e>
10012010:	0b03      	lsrs	r3, r0, #12
10012012:	428b      	cmp	r3, r1
10012014:	d328      	bcc.n	10012068 <__aeabi_uidiv+0x6c>
10012016:	0c03      	lsrs	r3, r0, #16
10012018:	428b      	cmp	r3, r1
1001201a:	d30d      	bcc.n	10012038 <__aeabi_uidiv+0x3c>
1001201c:	22ff      	movs	r2, #255	; 0xff
1001201e:	0209      	lsls	r1, r1, #8
10012020:	ba12      	rev	r2, r2
10012022:	0c03      	lsrs	r3, r0, #16
10012024:	428b      	cmp	r3, r1
10012026:	d302      	bcc.n	1001202e <__aeabi_uidiv+0x32>
10012028:	1212      	asrs	r2, r2, #8
1001202a:	0209      	lsls	r1, r1, #8
1001202c:	d065      	beq.n	100120fa <__aeabi_uidiv+0xfe>
1001202e:	0b03      	lsrs	r3, r0, #12
10012030:	428b      	cmp	r3, r1
10012032:	d319      	bcc.n	10012068 <__aeabi_uidiv+0x6c>
10012034:	e000      	b.n	10012038 <__aeabi_uidiv+0x3c>
10012036:	0a09      	lsrs	r1, r1, #8
10012038:	0bc3      	lsrs	r3, r0, #15
1001203a:	428b      	cmp	r3, r1
1001203c:	d301      	bcc.n	10012042 <__aeabi_uidiv+0x46>
1001203e:	03cb      	lsls	r3, r1, #15
10012040:	1ac0      	subs	r0, r0, r3
10012042:	4152      	adcs	r2, r2
10012044:	0b83      	lsrs	r3, r0, #14
10012046:	428b      	cmp	r3, r1
10012048:	d301      	bcc.n	1001204e <__aeabi_uidiv+0x52>
1001204a:	038b      	lsls	r3, r1, #14
1001204c:	1ac0      	subs	r0, r0, r3
1001204e:	4152      	adcs	r2, r2
10012050:	0b43      	lsrs	r3, r0, #13
10012052:	428b      	cmp	r3, r1
10012054:	d301      	bcc.n	1001205a <__aeabi_uidiv+0x5e>
10012056:	034b      	lsls	r3, r1, #13
10012058:	1ac0      	subs	r0, r0, r3
1001205a:	4152      	adcs	r2, r2
1001205c:	0b03      	lsrs	r3, r0, #12
1001205e:	428b      	cmp	r3, r1
10012060:	d301      	bcc.n	10012066 <__aeabi_uidiv+0x6a>
10012062:	030b      	lsls	r3, r1, #12
10012064:	1ac0      	subs	r0, r0, r3
10012066:	4152      	adcs	r2, r2
10012068:	0ac3      	lsrs	r3, r0, #11
1001206a:	428b      	cmp	r3, r1
1001206c:	d301      	bcc.n	10012072 <__aeabi_uidiv+0x76>
1001206e:	02cb      	lsls	r3, r1, #11
10012070:	1ac0      	subs	r0, r0, r3
10012072:	4152      	adcs	r2, r2
10012074:	0a83      	lsrs	r3, r0, #10
10012076:	428b      	cmp	r3, r1
10012078:	d301      	bcc.n	1001207e <__aeabi_uidiv+0x82>
1001207a:	028b      	lsls	r3, r1, #10
1001207c:	1ac0      	subs	r0, r0, r3
1001207e:	4152      	adcs	r2, r2
10012080:	0a43      	lsrs	r3, r0, #9
10012082:	428b      	cmp	r3, r1
10012084:	d301      	bcc.n	1001208a <__aeabi_uidiv+0x8e>
10012086:	024b      	lsls	r3, r1, #9
10012088:	1ac0      	subs	r0, r0, r3
1001208a:	4152      	adcs	r2, r2
1001208c:	0a03      	lsrs	r3, r0, #8
1001208e:	428b      	cmp	r3, r1
10012090:	d301      	bcc.n	10012096 <__aeabi_uidiv+0x9a>
10012092:	020b      	lsls	r3, r1, #8
10012094:	1ac0      	subs	r0, r0, r3
10012096:	4152      	adcs	r2, r2
10012098:	d2cd      	bcs.n	10012036 <__aeabi_uidiv+0x3a>
1001209a:	09c3      	lsrs	r3, r0, #7
1001209c:	428b      	cmp	r3, r1
1001209e:	d301      	bcc.n	100120a4 <__aeabi_uidiv+0xa8>
100120a0:	01cb      	lsls	r3, r1, #7
100120a2:	1ac0      	subs	r0, r0, r3
100120a4:	4152      	adcs	r2, r2
100120a6:	0983      	lsrs	r3, r0, #6
100120a8:	428b      	cmp	r3, r1
100120aa:	d301      	bcc.n	100120b0 <__aeabi_uidiv+0xb4>
100120ac:	018b      	lsls	r3, r1, #6
100120ae:	1ac0      	subs	r0, r0, r3
100120b0:	4152      	adcs	r2, r2
100120b2:	0943      	lsrs	r3, r0, #5
100120b4:	428b      	cmp	r3, r1
100120b6:	d301      	bcc.n	100120bc <__aeabi_uidiv+0xc0>
100120b8:	014b      	lsls	r3, r1, #5
100120ba:	1ac0      	subs	r0, r0, r3
100120bc:	4152      	adcs	r2, r2
100120be:	0903      	lsrs	r3, r0, #4
100120c0:	428b      	cmp	r3, r1
100120c2:	d301      	bcc.n	100120c8 <__aeabi_uidiv+0xcc>
100120c4:	010b      	lsls	r3, r1, #4
100120c6:	1ac0      	subs	r0, r0, r3
100120c8:	4152      	adcs	r2, r2
100120ca:	08c3      	lsrs	r3, r0, #3
100120cc:	428b      	cmp	r3, r1
100120ce:	d301      	bcc.n	100120d4 <__aeabi_uidiv+0xd8>
100120d0:	00cb      	lsls	r3, r1, #3
100120d2:	1ac0      	subs	r0, r0, r3
100120d4:	4152      	adcs	r2, r2
100120d6:	0883      	lsrs	r3, r0, #2
100120d8:	428b      	cmp	r3, r1
100120da:	d301      	bcc.n	100120e0 <__aeabi_uidiv+0xe4>
100120dc:	008b      	lsls	r3, r1, #2
100120de:	1ac0      	subs	r0, r0, r3
100120e0:	4152      	adcs	r2, r2
100120e2:	0843      	lsrs	r3, r0, #1
100120e4:	428b      	cmp	r3, r1
100120e6:	d301      	bcc.n	100120ec <__aeabi_uidiv+0xf0>
100120e8:	004b      	lsls	r3, r1, #1
100120ea:	1ac0      	subs	r0, r0, r3
100120ec:	4152      	adcs	r2, r2
100120ee:	1a41      	subs	r1, r0, r1
100120f0:	d200      	bcs.n	100120f4 <__aeabi_uidiv+0xf8>
100120f2:	4601      	mov	r1, r0
100120f4:	4152      	adcs	r2, r2
100120f6:	4610      	mov	r0, r2
100120f8:	4770      	bx	lr
100120fa:	e7ff      	b.n	100120fc <__aeabi_uidiv+0x100>
100120fc:	b501      	push	{r0, lr}
100120fe:	2000      	movs	r0, #0
10012100:	f000 f8f0 	bl	100122e4 <__aeabi_idiv0>
10012104:	bd02      	pop	{r1, pc}
10012106:	46c0      	nop			; (mov r8, r8)

10012108 <__aeabi_uidivmod>:
10012108:	2900      	cmp	r1, #0
1001210a:	d0f7      	beq.n	100120fc <__aeabi_uidiv+0x100>
1001210c:	e776      	b.n	10011ffc <__aeabi_uidiv>
1001210e:	4770      	bx	lr

10012110 <__aeabi_idiv>:
10012110:	4603      	mov	r3, r0
10012112:	430b      	orrs	r3, r1
10012114:	d47f      	bmi.n	10012216 <__aeabi_idiv+0x106>
10012116:	2200      	movs	r2, #0
10012118:	0843      	lsrs	r3, r0, #1
1001211a:	428b      	cmp	r3, r1
1001211c:	d374      	bcc.n	10012208 <__aeabi_idiv+0xf8>
1001211e:	0903      	lsrs	r3, r0, #4
10012120:	428b      	cmp	r3, r1
10012122:	d35f      	bcc.n	100121e4 <__aeabi_idiv+0xd4>
10012124:	0a03      	lsrs	r3, r0, #8
10012126:	428b      	cmp	r3, r1
10012128:	d344      	bcc.n	100121b4 <__aeabi_idiv+0xa4>
1001212a:	0b03      	lsrs	r3, r0, #12
1001212c:	428b      	cmp	r3, r1
1001212e:	d328      	bcc.n	10012182 <__aeabi_idiv+0x72>
10012130:	0c03      	lsrs	r3, r0, #16
10012132:	428b      	cmp	r3, r1
10012134:	d30d      	bcc.n	10012152 <__aeabi_idiv+0x42>
10012136:	22ff      	movs	r2, #255	; 0xff
10012138:	0209      	lsls	r1, r1, #8
1001213a:	ba12      	rev	r2, r2
1001213c:	0c03      	lsrs	r3, r0, #16
1001213e:	428b      	cmp	r3, r1
10012140:	d302      	bcc.n	10012148 <__aeabi_idiv+0x38>
10012142:	1212      	asrs	r2, r2, #8
10012144:	0209      	lsls	r1, r1, #8
10012146:	d065      	beq.n	10012214 <__aeabi_idiv+0x104>
10012148:	0b03      	lsrs	r3, r0, #12
1001214a:	428b      	cmp	r3, r1
1001214c:	d319      	bcc.n	10012182 <__aeabi_idiv+0x72>
1001214e:	e000      	b.n	10012152 <__aeabi_idiv+0x42>
10012150:	0a09      	lsrs	r1, r1, #8
10012152:	0bc3      	lsrs	r3, r0, #15
10012154:	428b      	cmp	r3, r1
10012156:	d301      	bcc.n	1001215c <__aeabi_idiv+0x4c>
10012158:	03cb      	lsls	r3, r1, #15
1001215a:	1ac0      	subs	r0, r0, r3
1001215c:	4152      	adcs	r2, r2
1001215e:	0b83      	lsrs	r3, r0, #14
10012160:	428b      	cmp	r3, r1
10012162:	d301      	bcc.n	10012168 <__aeabi_idiv+0x58>
10012164:	038b      	lsls	r3, r1, #14
10012166:	1ac0      	subs	r0, r0, r3
10012168:	4152      	adcs	r2, r2
1001216a:	0b43      	lsrs	r3, r0, #13
1001216c:	428b      	cmp	r3, r1
1001216e:	d301      	bcc.n	10012174 <__aeabi_idiv+0x64>
10012170:	034b      	lsls	r3, r1, #13
10012172:	1ac0      	subs	r0, r0, r3
10012174:	4152      	adcs	r2, r2
10012176:	0b03      	lsrs	r3, r0, #12
10012178:	428b      	cmp	r3, r1
1001217a:	d301      	bcc.n	10012180 <__aeabi_idiv+0x70>
1001217c:	030b      	lsls	r3, r1, #12
1001217e:	1ac0      	subs	r0, r0, r3
10012180:	4152      	adcs	r2, r2
10012182:	0ac3      	lsrs	r3, r0, #11
10012184:	428b      	cmp	r3, r1
10012186:	d301      	bcc.n	1001218c <__aeabi_idiv+0x7c>
10012188:	02cb      	lsls	r3, r1, #11
1001218a:	1ac0      	subs	r0, r0, r3
1001218c:	4152      	adcs	r2, r2
1001218e:	0a83      	lsrs	r3, r0, #10
10012190:	428b      	cmp	r3, r1
10012192:	d301      	bcc.n	10012198 <__aeabi_idiv+0x88>
10012194:	028b      	lsls	r3, r1, #10
10012196:	1ac0      	subs	r0, r0, r3
10012198:	4152      	adcs	r2, r2
1001219a:	0a43      	lsrs	r3, r0, #9
1001219c:	428b      	cmp	r3, r1
1001219e:	d301      	bcc.n	100121a4 <__aeabi_idiv+0x94>
100121a0:	024b      	lsls	r3, r1, #9
100121a2:	1ac0      	subs	r0, r0, r3
100121a4:	4152      	adcs	r2, r2
100121a6:	0a03      	lsrs	r3, r0, #8
100121a8:	428b      	cmp	r3, r1
100121aa:	d301      	bcc.n	100121b0 <__aeabi_idiv+0xa0>
100121ac:	020b      	lsls	r3, r1, #8
100121ae:	1ac0      	subs	r0, r0, r3
100121b0:	4152      	adcs	r2, r2
100121b2:	d2cd      	bcs.n	10012150 <__aeabi_idiv+0x40>
100121b4:	09c3      	lsrs	r3, r0, #7
100121b6:	428b      	cmp	r3, r1
100121b8:	d301      	bcc.n	100121be <__aeabi_idiv+0xae>
100121ba:	01cb      	lsls	r3, r1, #7
100121bc:	1ac0      	subs	r0, r0, r3
100121be:	4152      	adcs	r2, r2
100121c0:	0983      	lsrs	r3, r0, #6
100121c2:	428b      	cmp	r3, r1
100121c4:	d301      	bcc.n	100121ca <__aeabi_idiv+0xba>
100121c6:	018b      	lsls	r3, r1, #6
100121c8:	1ac0      	subs	r0, r0, r3
100121ca:	4152      	adcs	r2, r2
100121cc:	0943      	lsrs	r3, r0, #5
100121ce:	428b      	cmp	r3, r1
100121d0:	d301      	bcc.n	100121d6 <__aeabi_idiv+0xc6>
100121d2:	014b      	lsls	r3, r1, #5
100121d4:	1ac0      	subs	r0, r0, r3
100121d6:	4152      	adcs	r2, r2
100121d8:	0903      	lsrs	r3, r0, #4
100121da:	428b      	cmp	r3, r1
100121dc:	d301      	bcc.n	100121e2 <__aeabi_idiv+0xd2>
100121de:	010b      	lsls	r3, r1, #4
100121e0:	1ac0      	subs	r0, r0, r3
100121e2:	4152      	adcs	r2, r2
100121e4:	08c3      	lsrs	r3, r0, #3
100121e6:	428b      	cmp	r3, r1
100121e8:	d301      	bcc.n	100121ee <__aeabi_idiv+0xde>
100121ea:	00cb      	lsls	r3, r1, #3
100121ec:	1ac0      	subs	r0, r0, r3
100121ee:	4152      	adcs	r2, r2
100121f0:	0883      	lsrs	r3, r0, #2
100121f2:	428b      	cmp	r3, r1
100121f4:	d301      	bcc.n	100121fa <__aeabi_idiv+0xea>
100121f6:	008b      	lsls	r3, r1, #2
100121f8:	1ac0      	subs	r0, r0, r3
100121fa:	4152      	adcs	r2, r2
100121fc:	0843      	lsrs	r3, r0, #1
100121fe:	428b      	cmp	r3, r1
10012200:	d301      	bcc.n	10012206 <__aeabi_idiv+0xf6>
10012202:	004b      	lsls	r3, r1, #1
10012204:	1ac0      	subs	r0, r0, r3
10012206:	4152      	adcs	r2, r2
10012208:	1a41      	subs	r1, r0, r1
1001220a:	d200      	bcs.n	1001220e <__aeabi_idiv+0xfe>
1001220c:	4601      	mov	r1, r0
1001220e:	4152      	adcs	r2, r2
10012210:	4610      	mov	r0, r2
10012212:	4770      	bx	lr
10012214:	e05d      	b.n	100122d2 <__aeabi_idiv+0x1c2>
10012216:	0fca      	lsrs	r2, r1, #31
10012218:	d000      	beq.n	1001221c <__aeabi_idiv+0x10c>
1001221a:	4249      	negs	r1, r1
1001221c:	1003      	asrs	r3, r0, #32
1001221e:	d300      	bcc.n	10012222 <__aeabi_idiv+0x112>
10012220:	4240      	negs	r0, r0
10012222:	4053      	eors	r3, r2
10012224:	2200      	movs	r2, #0
10012226:	469c      	mov	ip, r3
10012228:	0903      	lsrs	r3, r0, #4
1001222a:	428b      	cmp	r3, r1
1001222c:	d32d      	bcc.n	1001228a <__aeabi_idiv+0x17a>
1001222e:	0a03      	lsrs	r3, r0, #8
10012230:	428b      	cmp	r3, r1
10012232:	d312      	bcc.n	1001225a <__aeabi_idiv+0x14a>
10012234:	22fc      	movs	r2, #252	; 0xfc
10012236:	0189      	lsls	r1, r1, #6
10012238:	ba12      	rev	r2, r2
1001223a:	0a03      	lsrs	r3, r0, #8
1001223c:	428b      	cmp	r3, r1
1001223e:	d30c      	bcc.n	1001225a <__aeabi_idiv+0x14a>
10012240:	0189      	lsls	r1, r1, #6
10012242:	1192      	asrs	r2, r2, #6
10012244:	428b      	cmp	r3, r1
10012246:	d308      	bcc.n	1001225a <__aeabi_idiv+0x14a>
10012248:	0189      	lsls	r1, r1, #6
1001224a:	1192      	asrs	r2, r2, #6
1001224c:	428b      	cmp	r3, r1
1001224e:	d304      	bcc.n	1001225a <__aeabi_idiv+0x14a>
10012250:	0189      	lsls	r1, r1, #6
10012252:	d03a      	beq.n	100122ca <__aeabi_idiv+0x1ba>
10012254:	1192      	asrs	r2, r2, #6
10012256:	e000      	b.n	1001225a <__aeabi_idiv+0x14a>
10012258:	0989      	lsrs	r1, r1, #6
1001225a:	09c3      	lsrs	r3, r0, #7
1001225c:	428b      	cmp	r3, r1
1001225e:	d301      	bcc.n	10012264 <__aeabi_idiv+0x154>
10012260:	01cb      	lsls	r3, r1, #7
10012262:	1ac0      	subs	r0, r0, r3
10012264:	4152      	adcs	r2, r2
10012266:	0983      	lsrs	r3, r0, #6
10012268:	428b      	cmp	r3, r1
1001226a:	d301      	bcc.n	10012270 <__aeabi_idiv+0x160>
1001226c:	018b      	lsls	r3, r1, #6
1001226e:	1ac0      	subs	r0, r0, r3
10012270:	4152      	adcs	r2, r2
10012272:	0943      	lsrs	r3, r0, #5
10012274:	428b      	cmp	r3, r1
10012276:	d301      	bcc.n	1001227c <__aeabi_idiv+0x16c>
10012278:	014b      	lsls	r3, r1, #5
1001227a:	1ac0      	subs	r0, r0, r3
1001227c:	4152      	adcs	r2, r2
1001227e:	0903      	lsrs	r3, r0, #4
10012280:	428b      	cmp	r3, r1
10012282:	d301      	bcc.n	10012288 <__aeabi_idiv+0x178>
10012284:	010b      	lsls	r3, r1, #4
10012286:	1ac0      	subs	r0, r0, r3
10012288:	4152      	adcs	r2, r2
1001228a:	08c3      	lsrs	r3, r0, #3
1001228c:	428b      	cmp	r3, r1
1001228e:	d301      	bcc.n	10012294 <__aeabi_idiv+0x184>
10012290:	00cb      	lsls	r3, r1, #3
10012292:	1ac0      	subs	r0, r0, r3
10012294:	4152      	adcs	r2, r2
10012296:	0883      	lsrs	r3, r0, #2
10012298:	428b      	cmp	r3, r1
1001229a:	d301      	bcc.n	100122a0 <__aeabi_idiv+0x190>
1001229c:	008b      	lsls	r3, r1, #2
1001229e:	1ac0      	subs	r0, r0, r3
100122a0:	4152      	adcs	r2, r2
100122a2:	d2d9      	bcs.n	10012258 <__aeabi_idiv+0x148>
100122a4:	0843      	lsrs	r3, r0, #1
100122a6:	428b      	cmp	r3, r1
100122a8:	d301      	bcc.n	100122ae <__aeabi_idiv+0x19e>
100122aa:	004b      	lsls	r3, r1, #1
100122ac:	1ac0      	subs	r0, r0, r3
100122ae:	4152      	adcs	r2, r2
100122b0:	1a41      	subs	r1, r0, r1
100122b2:	d200      	bcs.n	100122b6 <__aeabi_idiv+0x1a6>
100122b4:	4601      	mov	r1, r0
100122b6:	4663      	mov	r3, ip
100122b8:	4152      	adcs	r2, r2
100122ba:	105b      	asrs	r3, r3, #1
100122bc:	4610      	mov	r0, r2
100122be:	d301      	bcc.n	100122c4 <__aeabi_idiv+0x1b4>
100122c0:	4240      	negs	r0, r0
100122c2:	2b00      	cmp	r3, #0
100122c4:	d500      	bpl.n	100122c8 <__aeabi_idiv+0x1b8>
100122c6:	4249      	negs	r1, r1
100122c8:	4770      	bx	lr
100122ca:	4663      	mov	r3, ip
100122cc:	105b      	asrs	r3, r3, #1
100122ce:	d300      	bcc.n	100122d2 <__aeabi_idiv+0x1c2>
100122d0:	4240      	negs	r0, r0
100122d2:	b501      	push	{r0, lr}
100122d4:	2000      	movs	r0, #0
100122d6:	f000 f805 	bl	100122e4 <__aeabi_idiv0>
100122da:	bd02      	pop	{r1, pc}

100122dc <__aeabi_idivmod>:
100122dc:	2900      	cmp	r1, #0
100122de:	d0f8      	beq.n	100122d2 <__aeabi_idiv+0x1c2>
100122e0:	e716      	b.n	10012110 <__aeabi_idiv>
100122e2:	4770      	bx	lr

100122e4 <__aeabi_idiv0>:
100122e4:	4770      	bx	lr
100122e6:	46c0      	nop			; (mov r8, r8)

100122e8 <__aeabi_cdrcmple>:
100122e8:	4684      	mov	ip, r0
100122ea:	1c10      	adds	r0, r2, #0
100122ec:	4662      	mov	r2, ip
100122ee:	468c      	mov	ip, r1
100122f0:	1c19      	adds	r1, r3, #0
100122f2:	4663      	mov	r3, ip
100122f4:	e000      	b.n	100122f8 <__aeabi_cdcmpeq>
100122f6:	46c0      	nop			; (mov r8, r8)

100122f8 <__aeabi_cdcmpeq>:
100122f8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100122fa:	f001 fa17 	bl	1001372c <__ledf2>
100122fe:	2800      	cmp	r0, #0
10012300:	d401      	bmi.n	10012306 <__aeabi_cdcmpeq+0xe>
10012302:	2100      	movs	r1, #0
10012304:	42c8      	cmn	r0, r1
10012306:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012308 <__aeabi_dcmpeq>:
10012308:	b510      	push	{r4, lr}
1001230a:	f001 f96b 	bl	100135e4 <__eqdf2>
1001230e:	4240      	negs	r0, r0
10012310:	3001      	adds	r0, #1
10012312:	bd10      	pop	{r4, pc}

10012314 <__aeabi_dcmplt>:
10012314:	b510      	push	{r4, lr}
10012316:	f001 fa09 	bl	1001372c <__ledf2>
1001231a:	2800      	cmp	r0, #0
1001231c:	db01      	blt.n	10012322 <__aeabi_dcmplt+0xe>
1001231e:	2000      	movs	r0, #0
10012320:	bd10      	pop	{r4, pc}
10012322:	2001      	movs	r0, #1
10012324:	bd10      	pop	{r4, pc}
10012326:	46c0      	nop			; (mov r8, r8)

10012328 <__aeabi_dcmple>:
10012328:	b510      	push	{r4, lr}
1001232a:	f001 f9ff 	bl	1001372c <__ledf2>
1001232e:	2800      	cmp	r0, #0
10012330:	dd01      	ble.n	10012336 <__aeabi_dcmple+0xe>
10012332:	2000      	movs	r0, #0
10012334:	bd10      	pop	{r4, pc}
10012336:	2001      	movs	r0, #1
10012338:	bd10      	pop	{r4, pc}
1001233a:	46c0      	nop			; (mov r8, r8)

1001233c <__aeabi_dcmpgt>:
1001233c:	b510      	push	{r4, lr}
1001233e:	f001 f991 	bl	10013664 <__gedf2>
10012342:	2800      	cmp	r0, #0
10012344:	dc01      	bgt.n	1001234a <__aeabi_dcmpgt+0xe>
10012346:	2000      	movs	r0, #0
10012348:	bd10      	pop	{r4, pc}
1001234a:	2001      	movs	r0, #1
1001234c:	bd10      	pop	{r4, pc}
1001234e:	46c0      	nop			; (mov r8, r8)

10012350 <__aeabi_dcmpge>:
10012350:	b510      	push	{r4, lr}
10012352:	f001 f987 	bl	10013664 <__gedf2>
10012356:	2800      	cmp	r0, #0
10012358:	da01      	bge.n	1001235e <__aeabi_dcmpge+0xe>
1001235a:	2000      	movs	r0, #0
1001235c:	bd10      	pop	{r4, pc}
1001235e:	2001      	movs	r0, #1
10012360:	bd10      	pop	{r4, pc}
10012362:	46c0      	nop			; (mov r8, r8)

10012364 <__aeabi_lmul>:
10012364:	b5f0      	push	{r4, r5, r6, r7, lr}
10012366:	464f      	mov	r7, r9
10012368:	4646      	mov	r6, r8
1001236a:	b4c0      	push	{r6, r7}
1001236c:	0416      	lsls	r6, r2, #16
1001236e:	0c36      	lsrs	r6, r6, #16
10012370:	4699      	mov	r9, r3
10012372:	0033      	movs	r3, r6
10012374:	0405      	lsls	r5, r0, #16
10012376:	0c2c      	lsrs	r4, r5, #16
10012378:	0c07      	lsrs	r7, r0, #16
1001237a:	0c15      	lsrs	r5, r2, #16
1001237c:	4363      	muls	r3, r4
1001237e:	437e      	muls	r6, r7
10012380:	436f      	muls	r7, r5
10012382:	4365      	muls	r5, r4
10012384:	0c1c      	lsrs	r4, r3, #16
10012386:	19ad      	adds	r5, r5, r6
10012388:	1964      	adds	r4, r4, r5
1001238a:	469c      	mov	ip, r3
1001238c:	42a6      	cmp	r6, r4
1001238e:	d903      	bls.n	10012398 <__aeabi_lmul+0x34>
10012390:	2380      	movs	r3, #128	; 0x80
10012392:	025b      	lsls	r3, r3, #9
10012394:	4698      	mov	r8, r3
10012396:	4447      	add	r7, r8
10012398:	4663      	mov	r3, ip
1001239a:	0c25      	lsrs	r5, r4, #16
1001239c:	19ef      	adds	r7, r5, r7
1001239e:	041d      	lsls	r5, r3, #16
100123a0:	464b      	mov	r3, r9
100123a2:	434a      	muls	r2, r1
100123a4:	4343      	muls	r3, r0
100123a6:	0c2d      	lsrs	r5, r5, #16
100123a8:	0424      	lsls	r4, r4, #16
100123aa:	1964      	adds	r4, r4, r5
100123ac:	1899      	adds	r1, r3, r2
100123ae:	19c9      	adds	r1, r1, r7
100123b0:	0020      	movs	r0, r4
100123b2:	bc0c      	pop	{r2, r3}
100123b4:	4690      	mov	r8, r2
100123b6:	4699      	mov	r9, r3
100123b8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100123ba:	46c0      	nop			; (mov r8, r8)

100123bc <__aeabi_d2uiz>:
100123bc:	b570      	push	{r4, r5, r6, lr}
100123be:	2200      	movs	r2, #0
100123c0:	4b0c      	ldr	r3, [pc, #48]	; (100123f4 <__aeabi_d2uiz+0x38>)
100123c2:	0004      	movs	r4, r0
100123c4:	000d      	movs	r5, r1
100123c6:	f7ff ffc3 	bl	10012350 <__aeabi_dcmpge>
100123ca:	2800      	cmp	r0, #0
100123cc:	d104      	bne.n	100123d8 <__aeabi_d2uiz+0x1c>
100123ce:	0020      	movs	r0, r4
100123d0:	0029      	movs	r1, r5
100123d2:	f002 f803 	bl	100143dc <__aeabi_d2iz>
100123d6:	bd70      	pop	{r4, r5, r6, pc}
100123d8:	4b06      	ldr	r3, [pc, #24]	; (100123f4 <__aeabi_d2uiz+0x38>)
100123da:	2200      	movs	r2, #0
100123dc:	0020      	movs	r0, r4
100123de:	0029      	movs	r1, r5
100123e0:	f001 fc88 	bl	10013cf4 <__aeabi_dsub>
100123e4:	f001 fffa 	bl	100143dc <__aeabi_d2iz>
100123e8:	2380      	movs	r3, #128	; 0x80
100123ea:	061b      	lsls	r3, r3, #24
100123ec:	469c      	mov	ip, r3
100123ee:	4460      	add	r0, ip
100123f0:	e7f1      	b.n	100123d6 <__aeabi_d2uiz+0x1a>
100123f2:	46c0      	nop			; (mov r8, r8)
100123f4:	41e00000 	.word	0x41e00000

100123f8 <__aeabi_fdiv>:
100123f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100123fa:	4656      	mov	r6, sl
100123fc:	4644      	mov	r4, r8
100123fe:	465f      	mov	r7, fp
10012400:	464d      	mov	r5, r9
10012402:	b4f0      	push	{r4, r5, r6, r7}
10012404:	0244      	lsls	r4, r0, #9
10012406:	0046      	lsls	r6, r0, #1
10012408:	0fc7      	lsrs	r7, r0, #31
1001240a:	b083      	sub	sp, #12
1001240c:	4688      	mov	r8, r1
1001240e:	0a65      	lsrs	r5, r4, #9
10012410:	0e36      	lsrs	r6, r6, #24
10012412:	46ba      	mov	sl, r7
10012414:	d03d      	beq.n	10012492 <__aeabi_fdiv+0x9a>
10012416:	2eff      	cmp	r6, #255	; 0xff
10012418:	d022      	beq.n	10012460 <__aeabi_fdiv+0x68>
1001241a:	2300      	movs	r3, #0
1001241c:	00ec      	lsls	r4, r5, #3
1001241e:	2580      	movs	r5, #128	; 0x80
10012420:	4699      	mov	r9, r3
10012422:	469b      	mov	fp, r3
10012424:	04ed      	lsls	r5, r5, #19
10012426:	4325      	orrs	r5, r4
10012428:	3e7f      	subs	r6, #127	; 0x7f
1001242a:	4643      	mov	r3, r8
1001242c:	025c      	lsls	r4, r3, #9
1001242e:	0058      	lsls	r0, r3, #1
10012430:	0fdb      	lsrs	r3, r3, #31
10012432:	0a64      	lsrs	r4, r4, #9
10012434:	0e00      	lsrs	r0, r0, #24
10012436:	4698      	mov	r8, r3
10012438:	d036      	beq.n	100124a8 <__aeabi_fdiv+0xb0>
1001243a:	28ff      	cmp	r0, #255	; 0xff
1001243c:	d030      	beq.n	100124a0 <__aeabi_fdiv+0xa8>
1001243e:	2380      	movs	r3, #128	; 0x80
10012440:	2100      	movs	r1, #0
10012442:	00e4      	lsls	r4, r4, #3
10012444:	04db      	lsls	r3, r3, #19
10012446:	431c      	orrs	r4, r3
10012448:	387f      	subs	r0, #127	; 0x7f
1001244a:	1a30      	subs	r0, r6, r0
1001244c:	9001      	str	r0, [sp, #4]
1001244e:	4648      	mov	r0, r9
10012450:	4642      	mov	r2, r8
10012452:	4308      	orrs	r0, r1
10012454:	4e72      	ldr	r6, [pc, #456]	; (10012620 <__aeabi_fdiv+0x228>)
10012456:	0080      	lsls	r0, r0, #2
10012458:	5830      	ldr	r0, [r6, r0]
1001245a:	407a      	eors	r2, r7
1001245c:	0013      	movs	r3, r2
1001245e:	4687      	mov	pc, r0
10012460:	2d00      	cmp	r5, #0
10012462:	d144      	bne.n	100124ee <__aeabi_fdiv+0xf6>
10012464:	2308      	movs	r3, #8
10012466:	4699      	mov	r9, r3
10012468:	3b06      	subs	r3, #6
1001246a:	469b      	mov	fp, r3
1001246c:	e7dd      	b.n	1001242a <__aeabi_fdiv+0x32>
1001246e:	2201      	movs	r2, #1
10012470:	20ff      	movs	r0, #255	; 0xff
10012472:	2400      	movs	r4, #0
10012474:	401a      	ands	r2, r3
10012476:	0264      	lsls	r4, r4, #9
10012478:	05c3      	lsls	r3, r0, #23
1001247a:	0a64      	lsrs	r4, r4, #9
1001247c:	07d2      	lsls	r2, r2, #31
1001247e:	431c      	orrs	r4, r3
10012480:	4314      	orrs	r4, r2
10012482:	0020      	movs	r0, r4
10012484:	b003      	add	sp, #12
10012486:	bc3c      	pop	{r2, r3, r4, r5}
10012488:	4690      	mov	r8, r2
1001248a:	4699      	mov	r9, r3
1001248c:	46a2      	mov	sl, r4
1001248e:	46ab      	mov	fp, r5
10012490:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012492:	2d00      	cmp	r5, #0
10012494:	d120      	bne.n	100124d8 <__aeabi_fdiv+0xe0>
10012496:	2304      	movs	r3, #4
10012498:	4699      	mov	r9, r3
1001249a:	3b03      	subs	r3, #3
1001249c:	469b      	mov	fp, r3
1001249e:	e7c4      	b.n	1001242a <__aeabi_fdiv+0x32>
100124a0:	2c00      	cmp	r4, #0
100124a2:	d117      	bne.n	100124d4 <__aeabi_fdiv+0xdc>
100124a4:	2102      	movs	r1, #2
100124a6:	e002      	b.n	100124ae <__aeabi_fdiv+0xb6>
100124a8:	2c00      	cmp	r4, #0
100124aa:	d10a      	bne.n	100124c2 <__aeabi_fdiv+0xca>
100124ac:	2101      	movs	r1, #1
100124ae:	1a32      	subs	r2, r6, r0
100124b0:	9201      	str	r2, [sp, #4]
100124b2:	464a      	mov	r2, r9
100124b4:	4643      	mov	r3, r8
100124b6:	430a      	orrs	r2, r1
100124b8:	485a      	ldr	r0, [pc, #360]	; (10012624 <__aeabi_fdiv+0x22c>)
100124ba:	0092      	lsls	r2, r2, #2
100124bc:	5882      	ldr	r2, [r0, r2]
100124be:	407b      	eors	r3, r7
100124c0:	4697      	mov	pc, r2
100124c2:	0020      	movs	r0, r4
100124c4:	f002 f91a 	bl	100146fc <__clzsi2>
100124c8:	1f43      	subs	r3, r0, #5
100124ca:	3076      	adds	r0, #118	; 0x76
100124cc:	409c      	lsls	r4, r3
100124ce:	4240      	negs	r0, r0
100124d0:	2100      	movs	r1, #0
100124d2:	e7ba      	b.n	1001244a <__aeabi_fdiv+0x52>
100124d4:	2103      	movs	r1, #3
100124d6:	e7b8      	b.n	1001244a <__aeabi_fdiv+0x52>
100124d8:	0028      	movs	r0, r5
100124da:	f002 f90f 	bl	100146fc <__clzsi2>
100124de:	1f43      	subs	r3, r0, #5
100124e0:	409d      	lsls	r5, r3
100124e2:	2300      	movs	r3, #0
100124e4:	3076      	adds	r0, #118	; 0x76
100124e6:	4246      	negs	r6, r0
100124e8:	4699      	mov	r9, r3
100124ea:	469b      	mov	fp, r3
100124ec:	e79d      	b.n	1001242a <__aeabi_fdiv+0x32>
100124ee:	230c      	movs	r3, #12
100124f0:	4699      	mov	r9, r3
100124f2:	3b09      	subs	r3, #9
100124f4:	469b      	mov	fp, r3
100124f6:	e798      	b.n	1001242a <__aeabi_fdiv+0x32>
100124f8:	2480      	movs	r4, #128	; 0x80
100124fa:	2200      	movs	r2, #0
100124fc:	03e4      	lsls	r4, r4, #15
100124fe:	20ff      	movs	r0, #255	; 0xff
10012500:	e7b9      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012502:	2400      	movs	r4, #0
10012504:	46c2      	mov	sl, r8
10012506:	468b      	mov	fp, r1
10012508:	465a      	mov	r2, fp
1001250a:	4653      	mov	r3, sl
1001250c:	2a02      	cmp	r2, #2
1001250e:	d0ae      	beq.n	1001246e <__aeabi_fdiv+0x76>
10012510:	2a03      	cmp	r2, #3
10012512:	d07d      	beq.n	10012610 <__aeabi_fdiv+0x218>
10012514:	2a01      	cmp	r2, #1
10012516:	d131      	bne.n	1001257c <__aeabi_fdiv+0x184>
10012518:	2201      	movs	r2, #1
1001251a:	2000      	movs	r0, #0
1001251c:	401a      	ands	r2, r3
1001251e:	2400      	movs	r4, #0
10012520:	e7a9      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012522:	2201      	movs	r2, #1
10012524:	1a10      	subs	r0, r2, r0
10012526:	281b      	cmp	r0, #27
10012528:	dd56      	ble.n	100125d8 <__aeabi_fdiv+0x1e0>
1001252a:	401a      	ands	r2, r3
1001252c:	2000      	movs	r0, #0
1001252e:	2400      	movs	r4, #0
10012530:	e7a1      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012532:	2380      	movs	r3, #128	; 0x80
10012534:	03db      	lsls	r3, r3, #15
10012536:	421d      	tst	r5, r3
10012538:	d14b      	bne.n	100125d2 <__aeabi_fdiv+0x1da>
1001253a:	2380      	movs	r3, #128	; 0x80
1001253c:	03db      	lsls	r3, r3, #15
1001253e:	432b      	orrs	r3, r5
10012540:	025c      	lsls	r4, r3, #9
10012542:	0a64      	lsrs	r4, r4, #9
10012544:	003a      	movs	r2, r7
10012546:	20ff      	movs	r0, #255	; 0xff
10012548:	e795      	b.n	10012476 <__aeabi_fdiv+0x7e>
1001254a:	016d      	lsls	r5, r5, #5
1001254c:	0160      	lsls	r0, r4, #5
1001254e:	4285      	cmp	r5, r0
10012550:	d230      	bcs.n	100125b4 <__aeabi_fdiv+0x1bc>
10012552:	9a01      	ldr	r2, [sp, #4]
10012554:	2400      	movs	r4, #0
10012556:	3a01      	subs	r2, #1
10012558:	9201      	str	r2, [sp, #4]
1001255a:	221b      	movs	r2, #27
1001255c:	2701      	movs	r7, #1
1001255e:	0029      	movs	r1, r5
10012560:	0064      	lsls	r4, r4, #1
10012562:	006d      	lsls	r5, r5, #1
10012564:	2900      	cmp	r1, #0
10012566:	db01      	blt.n	1001256c <__aeabi_fdiv+0x174>
10012568:	42a8      	cmp	r0, r5
1001256a:	d801      	bhi.n	10012570 <__aeabi_fdiv+0x178>
1001256c:	1a2d      	subs	r5, r5, r0
1001256e:	433c      	orrs	r4, r7
10012570:	3a01      	subs	r2, #1
10012572:	2a00      	cmp	r2, #0
10012574:	d1f3      	bne.n	1001255e <__aeabi_fdiv+0x166>
10012576:	1e6a      	subs	r2, r5, #1
10012578:	4195      	sbcs	r5, r2
1001257a:	432c      	orrs	r4, r5
1001257c:	9801      	ldr	r0, [sp, #4]
1001257e:	307f      	adds	r0, #127	; 0x7f
10012580:	2800      	cmp	r0, #0
10012582:	ddce      	ble.n	10012522 <__aeabi_fdiv+0x12a>
10012584:	0762      	lsls	r2, r4, #29
10012586:	d004      	beq.n	10012592 <__aeabi_fdiv+0x19a>
10012588:	220f      	movs	r2, #15
1001258a:	4022      	ands	r2, r4
1001258c:	2a04      	cmp	r2, #4
1001258e:	d000      	beq.n	10012592 <__aeabi_fdiv+0x19a>
10012590:	3404      	adds	r4, #4
10012592:	0122      	lsls	r2, r4, #4
10012594:	d503      	bpl.n	1001259e <__aeabi_fdiv+0x1a6>
10012596:	4a24      	ldr	r2, [pc, #144]	; (10012628 <__aeabi_fdiv+0x230>)
10012598:	9801      	ldr	r0, [sp, #4]
1001259a:	4014      	ands	r4, r2
1001259c:	3080      	adds	r0, #128	; 0x80
1001259e:	28fe      	cmp	r0, #254	; 0xfe
100125a0:	dd00      	ble.n	100125a4 <__aeabi_fdiv+0x1ac>
100125a2:	e764      	b.n	1001246e <__aeabi_fdiv+0x76>
100125a4:	2201      	movs	r2, #1
100125a6:	01a4      	lsls	r4, r4, #6
100125a8:	0a64      	lsrs	r4, r4, #9
100125aa:	b2c0      	uxtb	r0, r0
100125ac:	401a      	ands	r2, r3
100125ae:	e762      	b.n	10012476 <__aeabi_fdiv+0x7e>
100125b0:	002c      	movs	r4, r5
100125b2:	e7a9      	b.n	10012508 <__aeabi_fdiv+0x110>
100125b4:	1a2d      	subs	r5, r5, r0
100125b6:	221a      	movs	r2, #26
100125b8:	2401      	movs	r4, #1
100125ba:	e7cf      	b.n	1001255c <__aeabi_fdiv+0x164>
100125bc:	026b      	lsls	r3, r5, #9
100125be:	d5bc      	bpl.n	1001253a <__aeabi_fdiv+0x142>
100125c0:	2400      	movs	r4, #0
100125c2:	2380      	movs	r3, #128	; 0x80
100125c4:	03db      	lsls	r3, r3, #15
100125c6:	431c      	orrs	r4, r3
100125c8:	0264      	lsls	r4, r4, #9
100125ca:	0a64      	lsrs	r4, r4, #9
100125cc:	4642      	mov	r2, r8
100125ce:	20ff      	movs	r0, #255	; 0xff
100125d0:	e751      	b.n	10012476 <__aeabi_fdiv+0x7e>
100125d2:	421c      	tst	r4, r3
100125d4:	d1b3      	bne.n	1001253e <__aeabi_fdiv+0x146>
100125d6:	e7f4      	b.n	100125c2 <__aeabi_fdiv+0x1ca>
100125d8:	0021      	movs	r1, r4
100125da:	2220      	movs	r2, #32
100125dc:	40c1      	lsrs	r1, r0
100125de:	1a10      	subs	r0, r2, r0
100125e0:	4084      	lsls	r4, r0
100125e2:	1e62      	subs	r2, r4, #1
100125e4:	4194      	sbcs	r4, r2
100125e6:	430c      	orrs	r4, r1
100125e8:	0762      	lsls	r2, r4, #29
100125ea:	d004      	beq.n	100125f6 <__aeabi_fdiv+0x1fe>
100125ec:	220f      	movs	r2, #15
100125ee:	4022      	ands	r2, r4
100125f0:	2a04      	cmp	r2, #4
100125f2:	d000      	beq.n	100125f6 <__aeabi_fdiv+0x1fe>
100125f4:	3404      	adds	r4, #4
100125f6:	0162      	lsls	r2, r4, #5
100125f8:	d504      	bpl.n	10012604 <__aeabi_fdiv+0x20c>
100125fa:	2201      	movs	r2, #1
100125fc:	2001      	movs	r0, #1
100125fe:	401a      	ands	r2, r3
10012600:	2400      	movs	r4, #0
10012602:	e738      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012604:	2201      	movs	r2, #1
10012606:	01a4      	lsls	r4, r4, #6
10012608:	0a64      	lsrs	r4, r4, #9
1001260a:	401a      	ands	r2, r3
1001260c:	2000      	movs	r0, #0
1001260e:	e732      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012610:	2380      	movs	r3, #128	; 0x80
10012612:	03db      	lsls	r3, r3, #15
10012614:	431c      	orrs	r4, r3
10012616:	0264      	lsls	r4, r4, #9
10012618:	0a64      	lsrs	r4, r4, #9
1001261a:	4652      	mov	r2, sl
1001261c:	20ff      	movs	r0, #255	; 0xff
1001261e:	e72a      	b.n	10012476 <__aeabi_fdiv+0x7e>
10012620:	10017190 	.word	0x10017190
10012624:	100171d0 	.word	0x100171d0
10012628:	f7ffffff 	.word	0xf7ffffff

1001262c <__aeabi_fmul>:
1001262c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001262e:	4657      	mov	r7, sl
10012630:	464e      	mov	r6, r9
10012632:	4645      	mov	r5, r8
10012634:	0043      	lsls	r3, r0, #1
10012636:	b4e0      	push	{r5, r6, r7}
10012638:	0246      	lsls	r6, r0, #9
1001263a:	4688      	mov	r8, r1
1001263c:	0a76      	lsrs	r6, r6, #9
1001263e:	0e1f      	lsrs	r7, r3, #24
10012640:	0fc4      	lsrs	r4, r0, #31
10012642:	2f00      	cmp	r7, #0
10012644:	d047      	beq.n	100126d6 <__aeabi_fmul+0xaa>
10012646:	2fff      	cmp	r7, #255	; 0xff
10012648:	d025      	beq.n	10012696 <__aeabi_fmul+0x6a>
1001264a:	2300      	movs	r3, #0
1001264c:	2580      	movs	r5, #128	; 0x80
1001264e:	469a      	mov	sl, r3
10012650:	4699      	mov	r9, r3
10012652:	00f6      	lsls	r6, r6, #3
10012654:	04ed      	lsls	r5, r5, #19
10012656:	432e      	orrs	r6, r5
10012658:	3f7f      	subs	r7, #127	; 0x7f
1001265a:	4643      	mov	r3, r8
1001265c:	4642      	mov	r2, r8
1001265e:	025d      	lsls	r5, r3, #9
10012660:	0fd2      	lsrs	r2, r2, #31
10012662:	005b      	lsls	r3, r3, #1
10012664:	0a6d      	lsrs	r5, r5, #9
10012666:	0e1b      	lsrs	r3, r3, #24
10012668:	4690      	mov	r8, r2
1001266a:	d040      	beq.n	100126ee <__aeabi_fmul+0xc2>
1001266c:	2bff      	cmp	r3, #255	; 0xff
1001266e:	d039      	beq.n	100126e4 <__aeabi_fmul+0xb8>
10012670:	2280      	movs	r2, #128	; 0x80
10012672:	2000      	movs	r0, #0
10012674:	00ed      	lsls	r5, r5, #3
10012676:	04d2      	lsls	r2, r2, #19
10012678:	4315      	orrs	r5, r2
1001267a:	3b7f      	subs	r3, #127	; 0x7f
1001267c:	18fb      	adds	r3, r7, r3
1001267e:	4642      	mov	r2, r8
10012680:	4657      	mov	r7, sl
10012682:	1c59      	adds	r1, r3, #1
10012684:	4062      	eors	r2, r4
10012686:	468c      	mov	ip, r1
10012688:	4307      	orrs	r7, r0
1001268a:	2f0f      	cmp	r7, #15
1001268c:	d85c      	bhi.n	10012748 <__aeabi_fmul+0x11c>
1001268e:	496f      	ldr	r1, [pc, #444]	; (1001284c <__aeabi_fmul+0x220>)
10012690:	00bf      	lsls	r7, r7, #2
10012692:	59c9      	ldr	r1, [r1, r7]
10012694:	468f      	mov	pc, r1
10012696:	2e00      	cmp	r6, #0
10012698:	d145      	bne.n	10012726 <__aeabi_fmul+0xfa>
1001269a:	2308      	movs	r3, #8
1001269c:	469a      	mov	sl, r3
1001269e:	3b06      	subs	r3, #6
100126a0:	4699      	mov	r9, r3
100126a2:	e7da      	b.n	1001265a <__aeabi_fmul+0x2e>
100126a4:	4642      	mov	r2, r8
100126a6:	2802      	cmp	r0, #2
100126a8:	d02d      	beq.n	10012706 <__aeabi_fmul+0xda>
100126aa:	2803      	cmp	r0, #3
100126ac:	d100      	bne.n	100126b0 <__aeabi_fmul+0x84>
100126ae:	e0c3      	b.n	10012838 <__aeabi_fmul+0x20c>
100126b0:	2801      	cmp	r0, #1
100126b2:	d000      	beq.n	100126b6 <__aeabi_fmul+0x8a>
100126b4:	e0a2      	b.n	100127fc <__aeabi_fmul+0x1d0>
100126b6:	2500      	movs	r5, #0
100126b8:	2600      	movs	r6, #0
100126ba:	4002      	ands	r2, r0
100126bc:	b2d4      	uxtb	r4, r2
100126be:	0276      	lsls	r6, r6, #9
100126c0:	05ed      	lsls	r5, r5, #23
100126c2:	0a76      	lsrs	r6, r6, #9
100126c4:	432e      	orrs	r6, r5
100126c6:	07e4      	lsls	r4, r4, #31
100126c8:	4326      	orrs	r6, r4
100126ca:	0030      	movs	r0, r6
100126cc:	bc1c      	pop	{r2, r3, r4}
100126ce:	4690      	mov	r8, r2
100126d0:	4699      	mov	r9, r3
100126d2:	46a2      	mov	sl, r4
100126d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126d6:	2e00      	cmp	r6, #0
100126d8:	d11a      	bne.n	10012710 <__aeabi_fmul+0xe4>
100126da:	2304      	movs	r3, #4
100126dc:	469a      	mov	sl, r3
100126de:	3b03      	subs	r3, #3
100126e0:	4699      	mov	r9, r3
100126e2:	e7ba      	b.n	1001265a <__aeabi_fmul+0x2e>
100126e4:	002a      	movs	r2, r5
100126e6:	1e51      	subs	r1, r2, #1
100126e8:	418a      	sbcs	r2, r1
100126ea:	1c90      	adds	r0, r2, #2
100126ec:	e7c6      	b.n	1001267c <__aeabi_fmul+0x50>
100126ee:	2001      	movs	r0, #1
100126f0:	2d00      	cmp	r5, #0
100126f2:	d0c3      	beq.n	1001267c <__aeabi_fmul+0x50>
100126f4:	0028      	movs	r0, r5
100126f6:	f002 f801 	bl	100146fc <__clzsi2>
100126fa:	1f43      	subs	r3, r0, #5
100126fc:	3076      	adds	r0, #118	; 0x76
100126fe:	409d      	lsls	r5, r3
10012700:	4243      	negs	r3, r0
10012702:	2000      	movs	r0, #0
10012704:	e7ba      	b.n	1001267c <__aeabi_fmul+0x50>
10012706:	2401      	movs	r4, #1
10012708:	25ff      	movs	r5, #255	; 0xff
1001270a:	4014      	ands	r4, r2
1001270c:	2600      	movs	r6, #0
1001270e:	e7d6      	b.n	100126be <__aeabi_fmul+0x92>
10012710:	0030      	movs	r0, r6
10012712:	f001 fff3 	bl	100146fc <__clzsi2>
10012716:	1f43      	subs	r3, r0, #5
10012718:	409e      	lsls	r6, r3
1001271a:	2300      	movs	r3, #0
1001271c:	3076      	adds	r0, #118	; 0x76
1001271e:	4247      	negs	r7, r0
10012720:	469a      	mov	sl, r3
10012722:	4699      	mov	r9, r3
10012724:	e799      	b.n	1001265a <__aeabi_fmul+0x2e>
10012726:	230c      	movs	r3, #12
10012728:	469a      	mov	sl, r3
1001272a:	3b09      	subs	r3, #9
1001272c:	4699      	mov	r9, r3
1001272e:	e794      	b.n	1001265a <__aeabi_fmul+0x2e>
10012730:	2680      	movs	r6, #128	; 0x80
10012732:	2400      	movs	r4, #0
10012734:	03f6      	lsls	r6, r6, #15
10012736:	25ff      	movs	r5, #255	; 0xff
10012738:	e7c1      	b.n	100126be <__aeabi_fmul+0x92>
1001273a:	0035      	movs	r5, r6
1001273c:	4648      	mov	r0, r9
1001273e:	e7b2      	b.n	100126a6 <__aeabi_fmul+0x7a>
10012740:	0035      	movs	r5, r6
10012742:	0022      	movs	r2, r4
10012744:	4648      	mov	r0, r9
10012746:	e7ae      	b.n	100126a6 <__aeabi_fmul+0x7a>
10012748:	0429      	lsls	r1, r5, #16
1001274a:	0c09      	lsrs	r1, r1, #16
1001274c:	0008      	movs	r0, r1
1001274e:	0c37      	lsrs	r7, r6, #16
10012750:	0436      	lsls	r6, r6, #16
10012752:	0c36      	lsrs	r6, r6, #16
10012754:	0c2c      	lsrs	r4, r5, #16
10012756:	4379      	muls	r1, r7
10012758:	4370      	muls	r0, r6
1001275a:	4367      	muls	r7, r4
1001275c:	4374      	muls	r4, r6
1001275e:	0c06      	lsrs	r6, r0, #16
10012760:	1864      	adds	r4, r4, r1
10012762:	1936      	adds	r6, r6, r4
10012764:	42b1      	cmp	r1, r6
10012766:	d903      	bls.n	10012770 <__aeabi_fmul+0x144>
10012768:	2180      	movs	r1, #128	; 0x80
1001276a:	0249      	lsls	r1, r1, #9
1001276c:	4688      	mov	r8, r1
1001276e:	4447      	add	r7, r8
10012770:	0400      	lsls	r0, r0, #16
10012772:	0c00      	lsrs	r0, r0, #16
10012774:	0431      	lsls	r1, r6, #16
10012776:	1809      	adds	r1, r1, r0
10012778:	018d      	lsls	r5, r1, #6
1001277a:	1e68      	subs	r0, r5, #1
1001277c:	4185      	sbcs	r5, r0
1001277e:	0e89      	lsrs	r1, r1, #26
10012780:	4329      	orrs	r1, r5
10012782:	0c35      	lsrs	r5, r6, #16
10012784:	19ed      	adds	r5, r5, r7
10012786:	01ad      	lsls	r5, r5, #6
10012788:	430d      	orrs	r5, r1
1001278a:	0129      	lsls	r1, r5, #4
1001278c:	d504      	bpl.n	10012798 <__aeabi_fmul+0x16c>
1001278e:	2301      	movs	r3, #1
10012790:	0869      	lsrs	r1, r5, #1
10012792:	401d      	ands	r5, r3
10012794:	4663      	mov	r3, ip
10012796:	430d      	orrs	r5, r1
10012798:	0019      	movs	r1, r3
1001279a:	317f      	adds	r1, #127	; 0x7f
1001279c:	2900      	cmp	r1, #0
1001279e:	dd25      	ble.n	100127ec <__aeabi_fmul+0x1c0>
100127a0:	0768      	lsls	r0, r5, #29
100127a2:	d004      	beq.n	100127ae <__aeabi_fmul+0x182>
100127a4:	200f      	movs	r0, #15
100127a6:	4028      	ands	r0, r5
100127a8:	2804      	cmp	r0, #4
100127aa:	d000      	beq.n	100127ae <__aeabi_fmul+0x182>
100127ac:	3504      	adds	r5, #4
100127ae:	0128      	lsls	r0, r5, #4
100127b0:	d503      	bpl.n	100127ba <__aeabi_fmul+0x18e>
100127b2:	4927      	ldr	r1, [pc, #156]	; (10012850 <__aeabi_fmul+0x224>)
100127b4:	3380      	adds	r3, #128	; 0x80
100127b6:	400d      	ands	r5, r1
100127b8:	0019      	movs	r1, r3
100127ba:	29fe      	cmp	r1, #254	; 0xfe
100127bc:	dca3      	bgt.n	10012706 <__aeabi_fmul+0xda>
100127be:	2401      	movs	r4, #1
100127c0:	01ad      	lsls	r5, r5, #6
100127c2:	0a6e      	lsrs	r6, r5, #9
100127c4:	4014      	ands	r4, r2
100127c6:	b2cd      	uxtb	r5, r1
100127c8:	e779      	b.n	100126be <__aeabi_fmul+0x92>
100127ca:	2080      	movs	r0, #128	; 0x80
100127cc:	03c0      	lsls	r0, r0, #15
100127ce:	4206      	tst	r6, r0
100127d0:	d007      	beq.n	100127e2 <__aeabi_fmul+0x1b6>
100127d2:	4205      	tst	r5, r0
100127d4:	d105      	bne.n	100127e2 <__aeabi_fmul+0x1b6>
100127d6:	4328      	orrs	r0, r5
100127d8:	0246      	lsls	r6, r0, #9
100127da:	0a76      	lsrs	r6, r6, #9
100127dc:	4644      	mov	r4, r8
100127de:	25ff      	movs	r5, #255	; 0xff
100127e0:	e76d      	b.n	100126be <__aeabi_fmul+0x92>
100127e2:	4306      	orrs	r6, r0
100127e4:	0276      	lsls	r6, r6, #9
100127e6:	0a76      	lsrs	r6, r6, #9
100127e8:	25ff      	movs	r5, #255	; 0xff
100127ea:	e768      	b.n	100126be <__aeabi_fmul+0x92>
100127ec:	2401      	movs	r4, #1
100127ee:	1a61      	subs	r1, r4, r1
100127f0:	291b      	cmp	r1, #27
100127f2:	dd05      	ble.n	10012800 <__aeabi_fmul+0x1d4>
100127f4:	4014      	ands	r4, r2
100127f6:	2500      	movs	r5, #0
100127f8:	2600      	movs	r6, #0
100127fa:	e760      	b.n	100126be <__aeabi_fmul+0x92>
100127fc:	4663      	mov	r3, ip
100127fe:	e7cb      	b.n	10012798 <__aeabi_fmul+0x16c>
10012800:	002e      	movs	r6, r5
10012802:	2320      	movs	r3, #32
10012804:	40ce      	lsrs	r6, r1
10012806:	1a59      	subs	r1, r3, r1
10012808:	408d      	lsls	r5, r1
1001280a:	1e6b      	subs	r3, r5, #1
1001280c:	419d      	sbcs	r5, r3
1001280e:	432e      	orrs	r6, r5
10012810:	0773      	lsls	r3, r6, #29
10012812:	d004      	beq.n	1001281e <__aeabi_fmul+0x1f2>
10012814:	230f      	movs	r3, #15
10012816:	4033      	ands	r3, r6
10012818:	2b04      	cmp	r3, #4
1001281a:	d000      	beq.n	1001281e <__aeabi_fmul+0x1f2>
1001281c:	3604      	adds	r6, #4
1001281e:	0173      	lsls	r3, r6, #5
10012820:	d504      	bpl.n	1001282c <__aeabi_fmul+0x200>
10012822:	2401      	movs	r4, #1
10012824:	2501      	movs	r5, #1
10012826:	4014      	ands	r4, r2
10012828:	2600      	movs	r6, #0
1001282a:	e748      	b.n	100126be <__aeabi_fmul+0x92>
1001282c:	2401      	movs	r4, #1
1001282e:	01b6      	lsls	r6, r6, #6
10012830:	0a76      	lsrs	r6, r6, #9
10012832:	4014      	ands	r4, r2
10012834:	2500      	movs	r5, #0
10012836:	e742      	b.n	100126be <__aeabi_fmul+0x92>
10012838:	2680      	movs	r6, #128	; 0x80
1001283a:	2401      	movs	r4, #1
1001283c:	03f6      	lsls	r6, r6, #15
1001283e:	432e      	orrs	r6, r5
10012840:	0276      	lsls	r6, r6, #9
10012842:	0a76      	lsrs	r6, r6, #9
10012844:	4014      	ands	r4, r2
10012846:	25ff      	movs	r5, #255	; 0xff
10012848:	e739      	b.n	100126be <__aeabi_fmul+0x92>
1001284a:	46c0      	nop			; (mov r8, r8)
1001284c:	10017210 	.word	0x10017210
10012850:	f7ffffff 	.word	0xf7ffffff

10012854 <__aeabi_i2f>:
10012854:	b570      	push	{r4, r5, r6, lr}
10012856:	2800      	cmp	r0, #0
10012858:	d030      	beq.n	100128bc <__aeabi_i2f+0x68>
1001285a:	17c3      	asrs	r3, r0, #31
1001285c:	18c5      	adds	r5, r0, r3
1001285e:	405d      	eors	r5, r3
10012860:	0fc4      	lsrs	r4, r0, #31
10012862:	0028      	movs	r0, r5
10012864:	f001 ff4a 	bl	100146fc <__clzsi2>
10012868:	239e      	movs	r3, #158	; 0x9e
1001286a:	1a1b      	subs	r3, r3, r0
1001286c:	2b96      	cmp	r3, #150	; 0x96
1001286e:	dc0d      	bgt.n	1001288c <__aeabi_i2f+0x38>
10012870:	2296      	movs	r2, #150	; 0x96
10012872:	1ad2      	subs	r2, r2, r3
10012874:	4095      	lsls	r5, r2
10012876:	026a      	lsls	r2, r5, #9
10012878:	0a52      	lsrs	r2, r2, #9
1001287a:	b2d8      	uxtb	r0, r3
1001287c:	0252      	lsls	r2, r2, #9
1001287e:	05c0      	lsls	r0, r0, #23
10012880:	0a52      	lsrs	r2, r2, #9
10012882:	07e4      	lsls	r4, r4, #31
10012884:	4302      	orrs	r2, r0
10012886:	4322      	orrs	r2, r4
10012888:	0010      	movs	r0, r2
1001288a:	bd70      	pop	{r4, r5, r6, pc}
1001288c:	2b99      	cmp	r3, #153	; 0x99
1001288e:	dc19      	bgt.n	100128c4 <__aeabi_i2f+0x70>
10012890:	2299      	movs	r2, #153	; 0x99
10012892:	1ad2      	subs	r2, r2, r3
10012894:	4095      	lsls	r5, r2
10012896:	4a12      	ldr	r2, [pc, #72]	; (100128e0 <__aeabi_i2f+0x8c>)
10012898:	402a      	ands	r2, r5
1001289a:	0769      	lsls	r1, r5, #29
1001289c:	d004      	beq.n	100128a8 <__aeabi_i2f+0x54>
1001289e:	210f      	movs	r1, #15
100128a0:	400d      	ands	r5, r1
100128a2:	2d04      	cmp	r5, #4
100128a4:	d000      	beq.n	100128a8 <__aeabi_i2f+0x54>
100128a6:	3204      	adds	r2, #4
100128a8:	0151      	lsls	r1, r2, #5
100128aa:	d503      	bpl.n	100128b4 <__aeabi_i2f+0x60>
100128ac:	4b0c      	ldr	r3, [pc, #48]	; (100128e0 <__aeabi_i2f+0x8c>)
100128ae:	401a      	ands	r2, r3
100128b0:	239f      	movs	r3, #159	; 0x9f
100128b2:	1a1b      	subs	r3, r3, r0
100128b4:	0192      	lsls	r2, r2, #6
100128b6:	0a52      	lsrs	r2, r2, #9
100128b8:	b2d8      	uxtb	r0, r3
100128ba:	e7df      	b.n	1001287c <__aeabi_i2f+0x28>
100128bc:	2400      	movs	r4, #0
100128be:	2000      	movs	r0, #0
100128c0:	2200      	movs	r2, #0
100128c2:	e7db      	b.n	1001287c <__aeabi_i2f+0x28>
100128c4:	2205      	movs	r2, #5
100128c6:	002e      	movs	r6, r5
100128c8:	1a12      	subs	r2, r2, r0
100128ca:	21b9      	movs	r1, #185	; 0xb9
100128cc:	40d6      	lsrs	r6, r2
100128ce:	002a      	movs	r2, r5
100128d0:	1ac9      	subs	r1, r1, r3
100128d2:	408a      	lsls	r2, r1
100128d4:	1e55      	subs	r5, r2, #1
100128d6:	41aa      	sbcs	r2, r5
100128d8:	0035      	movs	r5, r6
100128da:	4315      	orrs	r5, r2
100128dc:	e7db      	b.n	10012896 <__aeabi_i2f+0x42>
100128de:	46c0      	nop			; (mov r8, r8)
100128e0:	fbffffff 	.word	0xfbffffff

100128e4 <__aeabi_ui2f>:
100128e4:	b570      	push	{r4, r5, r6, lr}
100128e6:	1e04      	subs	r4, r0, #0
100128e8:	d028      	beq.n	1001293c <__aeabi_ui2f+0x58>
100128ea:	f001 ff07 	bl	100146fc <__clzsi2>
100128ee:	239e      	movs	r3, #158	; 0x9e
100128f0:	1a1b      	subs	r3, r3, r0
100128f2:	2b96      	cmp	r3, #150	; 0x96
100128f4:	dc0a      	bgt.n	1001290c <__aeabi_ui2f+0x28>
100128f6:	2296      	movs	r2, #150	; 0x96
100128f8:	1ad2      	subs	r2, r2, r3
100128fa:	4094      	lsls	r4, r2
100128fc:	0262      	lsls	r2, r4, #9
100128fe:	0a52      	lsrs	r2, r2, #9
10012900:	b2d8      	uxtb	r0, r3
10012902:	0252      	lsls	r2, r2, #9
10012904:	0a52      	lsrs	r2, r2, #9
10012906:	05c0      	lsls	r0, r0, #23
10012908:	4310      	orrs	r0, r2
1001290a:	bd70      	pop	{r4, r5, r6, pc}
1001290c:	2b99      	cmp	r3, #153	; 0x99
1001290e:	dc18      	bgt.n	10012942 <__aeabi_ui2f+0x5e>
10012910:	2299      	movs	r2, #153	; 0x99
10012912:	1ad2      	subs	r2, r2, r3
10012914:	4094      	lsls	r4, r2
10012916:	4a11      	ldr	r2, [pc, #68]	; (1001295c <__aeabi_ui2f+0x78>)
10012918:	4022      	ands	r2, r4
1001291a:	0761      	lsls	r1, r4, #29
1001291c:	d004      	beq.n	10012928 <__aeabi_ui2f+0x44>
1001291e:	210f      	movs	r1, #15
10012920:	400c      	ands	r4, r1
10012922:	2c04      	cmp	r4, #4
10012924:	d000      	beq.n	10012928 <__aeabi_ui2f+0x44>
10012926:	3204      	adds	r2, #4
10012928:	0151      	lsls	r1, r2, #5
1001292a:	d503      	bpl.n	10012934 <__aeabi_ui2f+0x50>
1001292c:	4b0b      	ldr	r3, [pc, #44]	; (1001295c <__aeabi_ui2f+0x78>)
1001292e:	401a      	ands	r2, r3
10012930:	239f      	movs	r3, #159	; 0x9f
10012932:	1a1b      	subs	r3, r3, r0
10012934:	0192      	lsls	r2, r2, #6
10012936:	0a52      	lsrs	r2, r2, #9
10012938:	b2d8      	uxtb	r0, r3
1001293a:	e7e2      	b.n	10012902 <__aeabi_ui2f+0x1e>
1001293c:	2000      	movs	r0, #0
1001293e:	2200      	movs	r2, #0
10012940:	e7df      	b.n	10012902 <__aeabi_ui2f+0x1e>
10012942:	2205      	movs	r2, #5
10012944:	0025      	movs	r5, r4
10012946:	1a12      	subs	r2, r2, r0
10012948:	21b9      	movs	r1, #185	; 0xb9
1001294a:	40d5      	lsrs	r5, r2
1001294c:	0022      	movs	r2, r4
1001294e:	1ac9      	subs	r1, r1, r3
10012950:	408a      	lsls	r2, r1
10012952:	1e54      	subs	r4, r2, #1
10012954:	41a2      	sbcs	r2, r4
10012956:	002c      	movs	r4, r5
10012958:	4314      	orrs	r4, r2
1001295a:	e7dc      	b.n	10012916 <__aeabi_ui2f+0x32>
1001295c:	fbffffff 	.word	0xfbffffff

10012960 <__aeabi_dadd>:
10012960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012962:	4656      	mov	r6, sl
10012964:	465f      	mov	r7, fp
10012966:	464d      	mov	r5, r9
10012968:	4644      	mov	r4, r8
1001296a:	b4f0      	push	{r4, r5, r6, r7}
1001296c:	000f      	movs	r7, r1
1001296e:	0ffd      	lsrs	r5, r7, #31
10012970:	46aa      	mov	sl, r5
10012972:	0309      	lsls	r1, r1, #12
10012974:	007c      	lsls	r4, r7, #1
10012976:	002e      	movs	r6, r5
10012978:	005f      	lsls	r7, r3, #1
1001297a:	0f45      	lsrs	r5, r0, #29
1001297c:	0a49      	lsrs	r1, r1, #9
1001297e:	0d7f      	lsrs	r7, r7, #21
10012980:	4329      	orrs	r1, r5
10012982:	00c5      	lsls	r5, r0, #3
10012984:	0318      	lsls	r0, r3, #12
10012986:	46bc      	mov	ip, r7
10012988:	0a40      	lsrs	r0, r0, #9
1001298a:	0f57      	lsrs	r7, r2, #29
1001298c:	0d64      	lsrs	r4, r4, #21
1001298e:	0fdb      	lsrs	r3, r3, #31
10012990:	4338      	orrs	r0, r7
10012992:	00d2      	lsls	r2, r2, #3
10012994:	459a      	cmp	sl, r3
10012996:	d100      	bne.n	1001299a <__aeabi_dadd+0x3a>
10012998:	e0aa      	b.n	10012af0 <__aeabi_dadd+0x190>
1001299a:	4666      	mov	r6, ip
1001299c:	1ba6      	subs	r6, r4, r6
1001299e:	2e00      	cmp	r6, #0
100129a0:	dc00      	bgt.n	100129a4 <__aeabi_dadd+0x44>
100129a2:	e0ff      	b.n	10012ba4 <__aeabi_dadd+0x244>
100129a4:	4663      	mov	r3, ip
100129a6:	2b00      	cmp	r3, #0
100129a8:	d139      	bne.n	10012a1e <__aeabi_dadd+0xbe>
100129aa:	0003      	movs	r3, r0
100129ac:	4313      	orrs	r3, r2
100129ae:	d000      	beq.n	100129b2 <__aeabi_dadd+0x52>
100129b0:	e0d9      	b.n	10012b66 <__aeabi_dadd+0x206>
100129b2:	076b      	lsls	r3, r5, #29
100129b4:	d009      	beq.n	100129ca <__aeabi_dadd+0x6a>
100129b6:	230f      	movs	r3, #15
100129b8:	402b      	ands	r3, r5
100129ba:	2b04      	cmp	r3, #4
100129bc:	d005      	beq.n	100129ca <__aeabi_dadd+0x6a>
100129be:	1d2b      	adds	r3, r5, #4
100129c0:	42ab      	cmp	r3, r5
100129c2:	41ad      	sbcs	r5, r5
100129c4:	426d      	negs	r5, r5
100129c6:	1949      	adds	r1, r1, r5
100129c8:	001d      	movs	r5, r3
100129ca:	020b      	lsls	r3, r1, #8
100129cc:	d400      	bmi.n	100129d0 <__aeabi_dadd+0x70>
100129ce:	e082      	b.n	10012ad6 <__aeabi_dadd+0x176>
100129d0:	4bca      	ldr	r3, [pc, #808]	; (10012cfc <__aeabi_dadd+0x39c>)
100129d2:	3401      	adds	r4, #1
100129d4:	429c      	cmp	r4, r3
100129d6:	d100      	bne.n	100129da <__aeabi_dadd+0x7a>
100129d8:	e0fe      	b.n	10012bd8 <__aeabi_dadd+0x278>
100129da:	000a      	movs	r2, r1
100129dc:	4656      	mov	r6, sl
100129de:	4bc8      	ldr	r3, [pc, #800]	; (10012d00 <__aeabi_dadd+0x3a0>)
100129e0:	08ed      	lsrs	r5, r5, #3
100129e2:	401a      	ands	r2, r3
100129e4:	0750      	lsls	r0, r2, #29
100129e6:	0564      	lsls	r4, r4, #21
100129e8:	0252      	lsls	r2, r2, #9
100129ea:	4305      	orrs	r5, r0
100129ec:	0b12      	lsrs	r2, r2, #12
100129ee:	0d64      	lsrs	r4, r4, #21
100129f0:	2100      	movs	r1, #0
100129f2:	0312      	lsls	r2, r2, #12
100129f4:	0d0b      	lsrs	r3, r1, #20
100129f6:	051b      	lsls	r3, r3, #20
100129f8:	0564      	lsls	r4, r4, #21
100129fa:	0b12      	lsrs	r2, r2, #12
100129fc:	431a      	orrs	r2, r3
100129fe:	0863      	lsrs	r3, r4, #1
10012a00:	4cc0      	ldr	r4, [pc, #768]	; (10012d04 <__aeabi_dadd+0x3a4>)
10012a02:	07f6      	lsls	r6, r6, #31
10012a04:	4014      	ands	r4, r2
10012a06:	431c      	orrs	r4, r3
10012a08:	0064      	lsls	r4, r4, #1
10012a0a:	0864      	lsrs	r4, r4, #1
10012a0c:	4334      	orrs	r4, r6
10012a0e:	0028      	movs	r0, r5
10012a10:	0021      	movs	r1, r4
10012a12:	bc3c      	pop	{r2, r3, r4, r5}
10012a14:	4690      	mov	r8, r2
10012a16:	4699      	mov	r9, r3
10012a18:	46a2      	mov	sl, r4
10012a1a:	46ab      	mov	fp, r5
10012a1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012a1e:	4bb7      	ldr	r3, [pc, #732]	; (10012cfc <__aeabi_dadd+0x39c>)
10012a20:	429c      	cmp	r4, r3
10012a22:	d0c6      	beq.n	100129b2 <__aeabi_dadd+0x52>
10012a24:	2380      	movs	r3, #128	; 0x80
10012a26:	041b      	lsls	r3, r3, #16
10012a28:	4318      	orrs	r0, r3
10012a2a:	2e38      	cmp	r6, #56	; 0x38
10012a2c:	dd00      	ble.n	10012a30 <__aeabi_dadd+0xd0>
10012a2e:	e0eb      	b.n	10012c08 <__aeabi_dadd+0x2a8>
10012a30:	2e1f      	cmp	r6, #31
10012a32:	dd00      	ble.n	10012a36 <__aeabi_dadd+0xd6>
10012a34:	e11e      	b.n	10012c74 <__aeabi_dadd+0x314>
10012a36:	2320      	movs	r3, #32
10012a38:	1b9b      	subs	r3, r3, r6
10012a3a:	469c      	mov	ip, r3
10012a3c:	0003      	movs	r3, r0
10012a3e:	4667      	mov	r7, ip
10012a40:	40bb      	lsls	r3, r7
10012a42:	4698      	mov	r8, r3
10012a44:	0013      	movs	r3, r2
10012a46:	4647      	mov	r7, r8
10012a48:	40f3      	lsrs	r3, r6
10012a4a:	433b      	orrs	r3, r7
10012a4c:	4667      	mov	r7, ip
10012a4e:	40ba      	lsls	r2, r7
10012a50:	1e57      	subs	r7, r2, #1
10012a52:	41ba      	sbcs	r2, r7
10012a54:	4313      	orrs	r3, r2
10012a56:	0002      	movs	r2, r0
10012a58:	40f2      	lsrs	r2, r6
10012a5a:	1aeb      	subs	r3, r5, r3
10012a5c:	429d      	cmp	r5, r3
10012a5e:	41b6      	sbcs	r6, r6
10012a60:	001d      	movs	r5, r3
10012a62:	1a8a      	subs	r2, r1, r2
10012a64:	4276      	negs	r6, r6
10012a66:	1b91      	subs	r1, r2, r6
10012a68:	020b      	lsls	r3, r1, #8
10012a6a:	d531      	bpl.n	10012ad0 <__aeabi_dadd+0x170>
10012a6c:	024a      	lsls	r2, r1, #9
10012a6e:	0a56      	lsrs	r6, r2, #9
10012a70:	2e00      	cmp	r6, #0
10012a72:	d100      	bne.n	10012a76 <__aeabi_dadd+0x116>
10012a74:	e0b4      	b.n	10012be0 <__aeabi_dadd+0x280>
10012a76:	0030      	movs	r0, r6
10012a78:	f001 fe40 	bl	100146fc <__clzsi2>
10012a7c:	0003      	movs	r3, r0
10012a7e:	3b08      	subs	r3, #8
10012a80:	2b1f      	cmp	r3, #31
10012a82:	dd00      	ble.n	10012a86 <__aeabi_dadd+0x126>
10012a84:	e0b5      	b.n	10012bf2 <__aeabi_dadd+0x292>
10012a86:	2220      	movs	r2, #32
10012a88:	0029      	movs	r1, r5
10012a8a:	1ad2      	subs	r2, r2, r3
10012a8c:	40d1      	lsrs	r1, r2
10012a8e:	409e      	lsls	r6, r3
10012a90:	000a      	movs	r2, r1
10012a92:	409d      	lsls	r5, r3
10012a94:	4332      	orrs	r2, r6
10012a96:	429c      	cmp	r4, r3
10012a98:	dd00      	ble.n	10012a9c <__aeabi_dadd+0x13c>
10012a9a:	e0b1      	b.n	10012c00 <__aeabi_dadd+0x2a0>
10012a9c:	1b1c      	subs	r4, r3, r4
10012a9e:	1c63      	adds	r3, r4, #1
10012aa0:	2b1f      	cmp	r3, #31
10012aa2:	dd00      	ble.n	10012aa6 <__aeabi_dadd+0x146>
10012aa4:	e0d5      	b.n	10012c52 <__aeabi_dadd+0x2f2>
10012aa6:	2120      	movs	r1, #32
10012aa8:	0014      	movs	r4, r2
10012aaa:	0028      	movs	r0, r5
10012aac:	1ac9      	subs	r1, r1, r3
10012aae:	408c      	lsls	r4, r1
10012ab0:	40d8      	lsrs	r0, r3
10012ab2:	408d      	lsls	r5, r1
10012ab4:	4304      	orrs	r4, r0
10012ab6:	40da      	lsrs	r2, r3
10012ab8:	1e68      	subs	r0, r5, #1
10012aba:	4185      	sbcs	r5, r0
10012abc:	0011      	movs	r1, r2
10012abe:	4325      	orrs	r5, r4
10012ac0:	2400      	movs	r4, #0
10012ac2:	e776      	b.n	100129b2 <__aeabi_dadd+0x52>
10012ac4:	4641      	mov	r1, r8
10012ac6:	4331      	orrs	r1, r6
10012ac8:	d100      	bne.n	10012acc <__aeabi_dadd+0x16c>
10012aca:	e234      	b.n	10012f36 <__aeabi_dadd+0x5d6>
10012acc:	0031      	movs	r1, r6
10012ace:	4645      	mov	r5, r8
10012ad0:	076b      	lsls	r3, r5, #29
10012ad2:	d000      	beq.n	10012ad6 <__aeabi_dadd+0x176>
10012ad4:	e76f      	b.n	100129b6 <__aeabi_dadd+0x56>
10012ad6:	4656      	mov	r6, sl
10012ad8:	0748      	lsls	r0, r1, #29
10012ada:	08ed      	lsrs	r5, r5, #3
10012adc:	08c9      	lsrs	r1, r1, #3
10012ade:	4305      	orrs	r5, r0
10012ae0:	4b86      	ldr	r3, [pc, #536]	; (10012cfc <__aeabi_dadd+0x39c>)
10012ae2:	429c      	cmp	r4, r3
10012ae4:	d035      	beq.n	10012b52 <__aeabi_dadd+0x1f2>
10012ae6:	030a      	lsls	r2, r1, #12
10012ae8:	0564      	lsls	r4, r4, #21
10012aea:	0b12      	lsrs	r2, r2, #12
10012aec:	0d64      	lsrs	r4, r4, #21
10012aee:	e77f      	b.n	100129f0 <__aeabi_dadd+0x90>
10012af0:	4663      	mov	r3, ip
10012af2:	1ae3      	subs	r3, r4, r3
10012af4:	469b      	mov	fp, r3
10012af6:	2b00      	cmp	r3, #0
10012af8:	dc00      	bgt.n	10012afc <__aeabi_dadd+0x19c>
10012afa:	e08b      	b.n	10012c14 <__aeabi_dadd+0x2b4>
10012afc:	4667      	mov	r7, ip
10012afe:	2f00      	cmp	r7, #0
10012b00:	d03c      	beq.n	10012b7c <__aeabi_dadd+0x21c>
10012b02:	4f7e      	ldr	r7, [pc, #504]	; (10012cfc <__aeabi_dadd+0x39c>)
10012b04:	42bc      	cmp	r4, r7
10012b06:	d100      	bne.n	10012b0a <__aeabi_dadd+0x1aa>
10012b08:	e753      	b.n	100129b2 <__aeabi_dadd+0x52>
10012b0a:	2780      	movs	r7, #128	; 0x80
10012b0c:	043f      	lsls	r7, r7, #16
10012b0e:	4338      	orrs	r0, r7
10012b10:	465b      	mov	r3, fp
10012b12:	2b38      	cmp	r3, #56	; 0x38
10012b14:	dc00      	bgt.n	10012b18 <__aeabi_dadd+0x1b8>
10012b16:	e0f7      	b.n	10012d08 <__aeabi_dadd+0x3a8>
10012b18:	4302      	orrs	r2, r0
10012b1a:	1e50      	subs	r0, r2, #1
10012b1c:	4182      	sbcs	r2, r0
10012b1e:	2000      	movs	r0, #0
10012b20:	b2d2      	uxtb	r2, r2
10012b22:	1953      	adds	r3, r2, r5
10012b24:	1842      	adds	r2, r0, r1
10012b26:	42ab      	cmp	r3, r5
10012b28:	4189      	sbcs	r1, r1
10012b2a:	001d      	movs	r5, r3
10012b2c:	4249      	negs	r1, r1
10012b2e:	1889      	adds	r1, r1, r2
10012b30:	020b      	lsls	r3, r1, #8
10012b32:	d5cd      	bpl.n	10012ad0 <__aeabi_dadd+0x170>
10012b34:	4b71      	ldr	r3, [pc, #452]	; (10012cfc <__aeabi_dadd+0x39c>)
10012b36:	3401      	adds	r4, #1
10012b38:	429c      	cmp	r4, r3
10012b3a:	d100      	bne.n	10012b3e <__aeabi_dadd+0x1de>
10012b3c:	e13d      	b.n	10012dba <__aeabi_dadd+0x45a>
10012b3e:	2001      	movs	r0, #1
10012b40:	4a6f      	ldr	r2, [pc, #444]	; (10012d00 <__aeabi_dadd+0x3a0>)
10012b42:	086b      	lsrs	r3, r5, #1
10012b44:	400a      	ands	r2, r1
10012b46:	4028      	ands	r0, r5
10012b48:	4318      	orrs	r0, r3
10012b4a:	07d5      	lsls	r5, r2, #31
10012b4c:	4305      	orrs	r5, r0
10012b4e:	0851      	lsrs	r1, r2, #1
10012b50:	e72f      	b.n	100129b2 <__aeabi_dadd+0x52>
10012b52:	002b      	movs	r3, r5
10012b54:	430b      	orrs	r3, r1
10012b56:	d100      	bne.n	10012b5a <__aeabi_dadd+0x1fa>
10012b58:	e1cb      	b.n	10012ef2 <__aeabi_dadd+0x592>
10012b5a:	2380      	movs	r3, #128	; 0x80
10012b5c:	031b      	lsls	r3, r3, #12
10012b5e:	430b      	orrs	r3, r1
10012b60:	031a      	lsls	r2, r3, #12
10012b62:	0b12      	lsrs	r2, r2, #12
10012b64:	e744      	b.n	100129f0 <__aeabi_dadd+0x90>
10012b66:	3e01      	subs	r6, #1
10012b68:	2e00      	cmp	r6, #0
10012b6a:	d16d      	bne.n	10012c48 <__aeabi_dadd+0x2e8>
10012b6c:	1aae      	subs	r6, r5, r2
10012b6e:	42b5      	cmp	r5, r6
10012b70:	419b      	sbcs	r3, r3
10012b72:	1a09      	subs	r1, r1, r0
10012b74:	425b      	negs	r3, r3
10012b76:	1ac9      	subs	r1, r1, r3
10012b78:	0035      	movs	r5, r6
10012b7a:	e775      	b.n	10012a68 <__aeabi_dadd+0x108>
10012b7c:	0007      	movs	r7, r0
10012b7e:	4317      	orrs	r7, r2
10012b80:	d100      	bne.n	10012b84 <__aeabi_dadd+0x224>
10012b82:	e716      	b.n	100129b2 <__aeabi_dadd+0x52>
10012b84:	2301      	movs	r3, #1
10012b86:	425b      	negs	r3, r3
10012b88:	469c      	mov	ip, r3
10012b8a:	44e3      	add	fp, ip
10012b8c:	465b      	mov	r3, fp
10012b8e:	2b00      	cmp	r3, #0
10012b90:	d000      	beq.n	10012b94 <__aeabi_dadd+0x234>
10012b92:	e0e0      	b.n	10012d56 <__aeabi_dadd+0x3f6>
10012b94:	18aa      	adds	r2, r5, r2
10012b96:	42aa      	cmp	r2, r5
10012b98:	419b      	sbcs	r3, r3
10012b9a:	1809      	adds	r1, r1, r0
10012b9c:	425b      	negs	r3, r3
10012b9e:	1859      	adds	r1, r3, r1
10012ba0:	0015      	movs	r5, r2
10012ba2:	e7c5      	b.n	10012b30 <__aeabi_dadd+0x1d0>
10012ba4:	2e00      	cmp	r6, #0
10012ba6:	d175      	bne.n	10012c94 <__aeabi_dadd+0x334>
10012ba8:	1c66      	adds	r6, r4, #1
10012baa:	0576      	lsls	r6, r6, #21
10012bac:	0d76      	lsrs	r6, r6, #21
10012bae:	2e01      	cmp	r6, #1
10012bb0:	dc00      	bgt.n	10012bb4 <__aeabi_dadd+0x254>
10012bb2:	e0f3      	b.n	10012d9c <__aeabi_dadd+0x43c>
10012bb4:	1aae      	subs	r6, r5, r2
10012bb6:	46b0      	mov	r8, r6
10012bb8:	4545      	cmp	r5, r8
10012bba:	41bf      	sbcs	r7, r7
10012bbc:	1a0e      	subs	r6, r1, r0
10012bbe:	427f      	negs	r7, r7
10012bc0:	1bf6      	subs	r6, r6, r7
10012bc2:	0237      	lsls	r7, r6, #8
10012bc4:	d400      	bmi.n	10012bc8 <__aeabi_dadd+0x268>
10012bc6:	e08f      	b.n	10012ce8 <__aeabi_dadd+0x388>
10012bc8:	1b55      	subs	r5, r2, r5
10012bca:	42aa      	cmp	r2, r5
10012bcc:	41b6      	sbcs	r6, r6
10012bce:	1a41      	subs	r1, r0, r1
10012bd0:	4276      	negs	r6, r6
10012bd2:	1b8e      	subs	r6, r1, r6
10012bd4:	469a      	mov	sl, r3
10012bd6:	e74b      	b.n	10012a70 <__aeabi_dadd+0x110>
10012bd8:	4656      	mov	r6, sl
10012bda:	2200      	movs	r2, #0
10012bdc:	2500      	movs	r5, #0
10012bde:	e707      	b.n	100129f0 <__aeabi_dadd+0x90>
10012be0:	0028      	movs	r0, r5
10012be2:	f001 fd8b 	bl	100146fc <__clzsi2>
10012be6:	3020      	adds	r0, #32
10012be8:	0003      	movs	r3, r0
10012bea:	3b08      	subs	r3, #8
10012bec:	2b1f      	cmp	r3, #31
10012bee:	dc00      	bgt.n	10012bf2 <__aeabi_dadd+0x292>
10012bf0:	e749      	b.n	10012a86 <__aeabi_dadd+0x126>
10012bf2:	002a      	movs	r2, r5
10012bf4:	3828      	subs	r0, #40	; 0x28
10012bf6:	4082      	lsls	r2, r0
10012bf8:	2500      	movs	r5, #0
10012bfa:	429c      	cmp	r4, r3
10012bfc:	dc00      	bgt.n	10012c00 <__aeabi_dadd+0x2a0>
10012bfe:	e74d      	b.n	10012a9c <__aeabi_dadd+0x13c>
10012c00:	493f      	ldr	r1, [pc, #252]	; (10012d00 <__aeabi_dadd+0x3a0>)
10012c02:	1ae4      	subs	r4, r4, r3
10012c04:	4011      	ands	r1, r2
10012c06:	e6d4      	b.n	100129b2 <__aeabi_dadd+0x52>
10012c08:	4302      	orrs	r2, r0
10012c0a:	1e50      	subs	r0, r2, #1
10012c0c:	4182      	sbcs	r2, r0
10012c0e:	b2d3      	uxtb	r3, r2
10012c10:	2200      	movs	r2, #0
10012c12:	e722      	b.n	10012a5a <__aeabi_dadd+0xfa>
10012c14:	2b00      	cmp	r3, #0
10012c16:	d000      	beq.n	10012c1a <__aeabi_dadd+0x2ba>
10012c18:	e0f3      	b.n	10012e02 <__aeabi_dadd+0x4a2>
10012c1a:	1c63      	adds	r3, r4, #1
10012c1c:	469c      	mov	ip, r3
10012c1e:	055b      	lsls	r3, r3, #21
10012c20:	0d5b      	lsrs	r3, r3, #21
10012c22:	2b01      	cmp	r3, #1
10012c24:	dc00      	bgt.n	10012c28 <__aeabi_dadd+0x2c8>
10012c26:	e09f      	b.n	10012d68 <__aeabi_dadd+0x408>
10012c28:	4b34      	ldr	r3, [pc, #208]	; (10012cfc <__aeabi_dadd+0x39c>)
10012c2a:	459c      	cmp	ip, r3
10012c2c:	d100      	bne.n	10012c30 <__aeabi_dadd+0x2d0>
10012c2e:	e0c3      	b.n	10012db8 <__aeabi_dadd+0x458>
10012c30:	18aa      	adds	r2, r5, r2
10012c32:	1809      	adds	r1, r1, r0
10012c34:	42aa      	cmp	r2, r5
10012c36:	4180      	sbcs	r0, r0
10012c38:	4240      	negs	r0, r0
10012c3a:	1841      	adds	r1, r0, r1
10012c3c:	07cd      	lsls	r5, r1, #31
10012c3e:	0852      	lsrs	r2, r2, #1
10012c40:	4315      	orrs	r5, r2
10012c42:	0849      	lsrs	r1, r1, #1
10012c44:	4664      	mov	r4, ip
10012c46:	e6b4      	b.n	100129b2 <__aeabi_dadd+0x52>
10012c48:	4b2c      	ldr	r3, [pc, #176]	; (10012cfc <__aeabi_dadd+0x39c>)
10012c4a:	429c      	cmp	r4, r3
10012c4c:	d000      	beq.n	10012c50 <__aeabi_dadd+0x2f0>
10012c4e:	e6ec      	b.n	10012a2a <__aeabi_dadd+0xca>
10012c50:	e6af      	b.n	100129b2 <__aeabi_dadd+0x52>
10012c52:	0011      	movs	r1, r2
10012c54:	3c1f      	subs	r4, #31
10012c56:	40e1      	lsrs	r1, r4
10012c58:	000c      	movs	r4, r1
10012c5a:	2b20      	cmp	r3, #32
10012c5c:	d100      	bne.n	10012c60 <__aeabi_dadd+0x300>
10012c5e:	e07f      	b.n	10012d60 <__aeabi_dadd+0x400>
10012c60:	2140      	movs	r1, #64	; 0x40
10012c62:	1acb      	subs	r3, r1, r3
10012c64:	409a      	lsls	r2, r3
10012c66:	4315      	orrs	r5, r2
10012c68:	1e6a      	subs	r2, r5, #1
10012c6a:	4195      	sbcs	r5, r2
10012c6c:	2100      	movs	r1, #0
10012c6e:	4325      	orrs	r5, r4
10012c70:	2400      	movs	r4, #0
10012c72:	e72d      	b.n	10012ad0 <__aeabi_dadd+0x170>
10012c74:	0033      	movs	r3, r6
10012c76:	0007      	movs	r7, r0
10012c78:	3b20      	subs	r3, #32
10012c7a:	40df      	lsrs	r7, r3
10012c7c:	003b      	movs	r3, r7
10012c7e:	2e20      	cmp	r6, #32
10012c80:	d070      	beq.n	10012d64 <__aeabi_dadd+0x404>
10012c82:	2740      	movs	r7, #64	; 0x40
10012c84:	1bbe      	subs	r6, r7, r6
10012c86:	40b0      	lsls	r0, r6
10012c88:	4302      	orrs	r2, r0
10012c8a:	1e50      	subs	r0, r2, #1
10012c8c:	4182      	sbcs	r2, r0
10012c8e:	4313      	orrs	r3, r2
10012c90:	2200      	movs	r2, #0
10012c92:	e6e2      	b.n	10012a5a <__aeabi_dadd+0xfa>
10012c94:	2c00      	cmp	r4, #0
10012c96:	d04f      	beq.n	10012d38 <__aeabi_dadd+0x3d8>
10012c98:	4c18      	ldr	r4, [pc, #96]	; (10012cfc <__aeabi_dadd+0x39c>)
10012c9a:	45a4      	cmp	ip, r4
10012c9c:	d100      	bne.n	10012ca0 <__aeabi_dadd+0x340>
10012c9e:	e0ab      	b.n	10012df8 <__aeabi_dadd+0x498>
10012ca0:	2480      	movs	r4, #128	; 0x80
10012ca2:	0424      	lsls	r4, r4, #16
10012ca4:	4276      	negs	r6, r6
10012ca6:	4321      	orrs	r1, r4
10012ca8:	2e38      	cmp	r6, #56	; 0x38
10012caa:	dd00      	ble.n	10012cae <__aeabi_dadd+0x34e>
10012cac:	e0df      	b.n	10012e6e <__aeabi_dadd+0x50e>
10012cae:	2e1f      	cmp	r6, #31
10012cb0:	dd00      	ble.n	10012cb4 <__aeabi_dadd+0x354>
10012cb2:	e143      	b.n	10012f3c <__aeabi_dadd+0x5dc>
10012cb4:	2720      	movs	r7, #32
10012cb6:	1bbc      	subs	r4, r7, r6
10012cb8:	46a1      	mov	r9, r4
10012cba:	000c      	movs	r4, r1
10012cbc:	464f      	mov	r7, r9
10012cbe:	40bc      	lsls	r4, r7
10012cc0:	46a0      	mov	r8, r4
10012cc2:	002c      	movs	r4, r5
10012cc4:	4647      	mov	r7, r8
10012cc6:	40f4      	lsrs	r4, r6
10012cc8:	433c      	orrs	r4, r7
10012cca:	464f      	mov	r7, r9
10012ccc:	40bd      	lsls	r5, r7
10012cce:	1e6f      	subs	r7, r5, #1
10012cd0:	41bd      	sbcs	r5, r7
10012cd2:	40f1      	lsrs	r1, r6
10012cd4:	432c      	orrs	r4, r5
10012cd6:	1b15      	subs	r5, r2, r4
10012cd8:	42aa      	cmp	r2, r5
10012cda:	4192      	sbcs	r2, r2
10012cdc:	1a41      	subs	r1, r0, r1
10012cde:	4252      	negs	r2, r2
10012ce0:	1a89      	subs	r1, r1, r2
10012ce2:	4664      	mov	r4, ip
10012ce4:	469a      	mov	sl, r3
10012ce6:	e6bf      	b.n	10012a68 <__aeabi_dadd+0x108>
10012ce8:	4641      	mov	r1, r8
10012cea:	4645      	mov	r5, r8
10012cec:	4331      	orrs	r1, r6
10012cee:	d000      	beq.n	10012cf2 <__aeabi_dadd+0x392>
10012cf0:	e6be      	b.n	10012a70 <__aeabi_dadd+0x110>
10012cf2:	2600      	movs	r6, #0
10012cf4:	2400      	movs	r4, #0
10012cf6:	2500      	movs	r5, #0
10012cf8:	e6f2      	b.n	10012ae0 <__aeabi_dadd+0x180>
10012cfa:	46c0      	nop			; (mov r8, r8)
10012cfc:	000007ff 	.word	0x000007ff
10012d00:	ff7fffff 	.word	0xff7fffff
10012d04:	800fffff 	.word	0x800fffff
10012d08:	2b1f      	cmp	r3, #31
10012d0a:	dc59      	bgt.n	10012dc0 <__aeabi_dadd+0x460>
10012d0c:	2720      	movs	r7, #32
10012d0e:	1aff      	subs	r7, r7, r3
10012d10:	46bc      	mov	ip, r7
10012d12:	0007      	movs	r7, r0
10012d14:	4663      	mov	r3, ip
10012d16:	409f      	lsls	r7, r3
10012d18:	465b      	mov	r3, fp
10012d1a:	46b9      	mov	r9, r7
10012d1c:	0017      	movs	r7, r2
10012d1e:	40df      	lsrs	r7, r3
10012d20:	46b8      	mov	r8, r7
10012d22:	464f      	mov	r7, r9
10012d24:	4643      	mov	r3, r8
10012d26:	431f      	orrs	r7, r3
10012d28:	4663      	mov	r3, ip
10012d2a:	409a      	lsls	r2, r3
10012d2c:	1e53      	subs	r3, r2, #1
10012d2e:	419a      	sbcs	r2, r3
10012d30:	465b      	mov	r3, fp
10012d32:	433a      	orrs	r2, r7
10012d34:	40d8      	lsrs	r0, r3
10012d36:	e6f4      	b.n	10012b22 <__aeabi_dadd+0x1c2>
10012d38:	000c      	movs	r4, r1
10012d3a:	432c      	orrs	r4, r5
10012d3c:	d05c      	beq.n	10012df8 <__aeabi_dadd+0x498>
10012d3e:	43f6      	mvns	r6, r6
10012d40:	2e00      	cmp	r6, #0
10012d42:	d155      	bne.n	10012df0 <__aeabi_dadd+0x490>
10012d44:	1b55      	subs	r5, r2, r5
10012d46:	42aa      	cmp	r2, r5
10012d48:	41a4      	sbcs	r4, r4
10012d4a:	1a41      	subs	r1, r0, r1
10012d4c:	4264      	negs	r4, r4
10012d4e:	1b09      	subs	r1, r1, r4
10012d50:	469a      	mov	sl, r3
10012d52:	4664      	mov	r4, ip
10012d54:	e688      	b.n	10012a68 <__aeabi_dadd+0x108>
10012d56:	4f96      	ldr	r7, [pc, #600]	; (10012fb0 <__aeabi_dadd+0x650>)
10012d58:	42bc      	cmp	r4, r7
10012d5a:	d000      	beq.n	10012d5e <__aeabi_dadd+0x3fe>
10012d5c:	e6d8      	b.n	10012b10 <__aeabi_dadd+0x1b0>
10012d5e:	e628      	b.n	100129b2 <__aeabi_dadd+0x52>
10012d60:	2200      	movs	r2, #0
10012d62:	e780      	b.n	10012c66 <__aeabi_dadd+0x306>
10012d64:	2000      	movs	r0, #0
10012d66:	e78f      	b.n	10012c88 <__aeabi_dadd+0x328>
10012d68:	000b      	movs	r3, r1
10012d6a:	432b      	orrs	r3, r5
10012d6c:	2c00      	cmp	r4, #0
10012d6e:	d000      	beq.n	10012d72 <__aeabi_dadd+0x412>
10012d70:	e0c2      	b.n	10012ef8 <__aeabi_dadd+0x598>
10012d72:	2b00      	cmp	r3, #0
10012d74:	d100      	bne.n	10012d78 <__aeabi_dadd+0x418>
10012d76:	e101      	b.n	10012f7c <__aeabi_dadd+0x61c>
10012d78:	0003      	movs	r3, r0
10012d7a:	4313      	orrs	r3, r2
10012d7c:	d100      	bne.n	10012d80 <__aeabi_dadd+0x420>
10012d7e:	e618      	b.n	100129b2 <__aeabi_dadd+0x52>
10012d80:	18ab      	adds	r3, r5, r2
10012d82:	42ab      	cmp	r3, r5
10012d84:	41b6      	sbcs	r6, r6
10012d86:	1809      	adds	r1, r1, r0
10012d88:	4276      	negs	r6, r6
10012d8a:	1871      	adds	r1, r6, r1
10012d8c:	020a      	lsls	r2, r1, #8
10012d8e:	d400      	bmi.n	10012d92 <__aeabi_dadd+0x432>
10012d90:	e109      	b.n	10012fa6 <__aeabi_dadd+0x646>
10012d92:	4a88      	ldr	r2, [pc, #544]	; (10012fb4 <__aeabi_dadd+0x654>)
10012d94:	001d      	movs	r5, r3
10012d96:	4011      	ands	r1, r2
10012d98:	4664      	mov	r4, ip
10012d9a:	e60a      	b.n	100129b2 <__aeabi_dadd+0x52>
10012d9c:	2c00      	cmp	r4, #0
10012d9e:	d15b      	bne.n	10012e58 <__aeabi_dadd+0x4f8>
10012da0:	000e      	movs	r6, r1
10012da2:	432e      	orrs	r6, r5
10012da4:	d000      	beq.n	10012da8 <__aeabi_dadd+0x448>
10012da6:	e08a      	b.n	10012ebe <__aeabi_dadd+0x55e>
10012da8:	0001      	movs	r1, r0
10012daa:	4311      	orrs	r1, r2
10012dac:	d100      	bne.n	10012db0 <__aeabi_dadd+0x450>
10012dae:	e0c2      	b.n	10012f36 <__aeabi_dadd+0x5d6>
10012db0:	0001      	movs	r1, r0
10012db2:	0015      	movs	r5, r2
10012db4:	469a      	mov	sl, r3
10012db6:	e5fc      	b.n	100129b2 <__aeabi_dadd+0x52>
10012db8:	4664      	mov	r4, ip
10012dba:	2100      	movs	r1, #0
10012dbc:	2500      	movs	r5, #0
10012dbe:	e68f      	b.n	10012ae0 <__aeabi_dadd+0x180>
10012dc0:	2320      	movs	r3, #32
10012dc2:	425b      	negs	r3, r3
10012dc4:	469c      	mov	ip, r3
10012dc6:	44dc      	add	ip, fp
10012dc8:	4663      	mov	r3, ip
10012dca:	0007      	movs	r7, r0
10012dcc:	40df      	lsrs	r7, r3
10012dce:	465b      	mov	r3, fp
10012dd0:	46bc      	mov	ip, r7
10012dd2:	2b20      	cmp	r3, #32
10012dd4:	d100      	bne.n	10012dd8 <__aeabi_dadd+0x478>
10012dd6:	e0ac      	b.n	10012f32 <__aeabi_dadd+0x5d2>
10012dd8:	2340      	movs	r3, #64	; 0x40
10012dda:	465f      	mov	r7, fp
10012ddc:	1bdb      	subs	r3, r3, r7
10012dde:	4098      	lsls	r0, r3
10012de0:	4302      	orrs	r2, r0
10012de2:	1e50      	subs	r0, r2, #1
10012de4:	4182      	sbcs	r2, r0
10012de6:	4663      	mov	r3, ip
10012de8:	4313      	orrs	r3, r2
10012dea:	001a      	movs	r2, r3
10012dec:	2000      	movs	r0, #0
10012dee:	e698      	b.n	10012b22 <__aeabi_dadd+0x1c2>
10012df0:	4c6f      	ldr	r4, [pc, #444]	; (10012fb0 <__aeabi_dadd+0x650>)
10012df2:	45a4      	cmp	ip, r4
10012df4:	d000      	beq.n	10012df8 <__aeabi_dadd+0x498>
10012df6:	e757      	b.n	10012ca8 <__aeabi_dadd+0x348>
10012df8:	0001      	movs	r1, r0
10012dfa:	0015      	movs	r5, r2
10012dfc:	4664      	mov	r4, ip
10012dfe:	469a      	mov	sl, r3
10012e00:	e5d7      	b.n	100129b2 <__aeabi_dadd+0x52>
10012e02:	2c00      	cmp	r4, #0
10012e04:	d139      	bne.n	10012e7a <__aeabi_dadd+0x51a>
10012e06:	000c      	movs	r4, r1
10012e08:	432c      	orrs	r4, r5
10012e0a:	d06e      	beq.n	10012eea <__aeabi_dadd+0x58a>
10012e0c:	43db      	mvns	r3, r3
10012e0e:	2b00      	cmp	r3, #0
10012e10:	d01a      	beq.n	10012e48 <__aeabi_dadd+0x4e8>
10012e12:	4c67      	ldr	r4, [pc, #412]	; (10012fb0 <__aeabi_dadd+0x650>)
10012e14:	45a4      	cmp	ip, r4
10012e16:	d068      	beq.n	10012eea <__aeabi_dadd+0x58a>
10012e18:	2b38      	cmp	r3, #56	; 0x38
10012e1a:	dd00      	ble.n	10012e1e <__aeabi_dadd+0x4be>
10012e1c:	e0a4      	b.n	10012f68 <__aeabi_dadd+0x608>
10012e1e:	2b1f      	cmp	r3, #31
10012e20:	dd00      	ble.n	10012e24 <__aeabi_dadd+0x4c4>
10012e22:	e0ae      	b.n	10012f82 <__aeabi_dadd+0x622>
10012e24:	2420      	movs	r4, #32
10012e26:	000f      	movs	r7, r1
10012e28:	1ae4      	subs	r4, r4, r3
10012e2a:	40a7      	lsls	r7, r4
10012e2c:	46b9      	mov	r9, r7
10012e2e:	002f      	movs	r7, r5
10012e30:	40df      	lsrs	r7, r3
10012e32:	46b8      	mov	r8, r7
10012e34:	46a3      	mov	fp, r4
10012e36:	464f      	mov	r7, r9
10012e38:	4644      	mov	r4, r8
10012e3a:	4327      	orrs	r7, r4
10012e3c:	465c      	mov	r4, fp
10012e3e:	40a5      	lsls	r5, r4
10012e40:	1e6c      	subs	r4, r5, #1
10012e42:	41a5      	sbcs	r5, r4
10012e44:	40d9      	lsrs	r1, r3
10012e46:	433d      	orrs	r5, r7
10012e48:	18ad      	adds	r5, r5, r2
10012e4a:	4295      	cmp	r5, r2
10012e4c:	419b      	sbcs	r3, r3
10012e4e:	1809      	adds	r1, r1, r0
10012e50:	425b      	negs	r3, r3
10012e52:	1859      	adds	r1, r3, r1
10012e54:	4664      	mov	r4, ip
10012e56:	e66b      	b.n	10012b30 <__aeabi_dadd+0x1d0>
10012e58:	000c      	movs	r4, r1
10012e5a:	432c      	orrs	r4, r5
10012e5c:	d115      	bne.n	10012e8a <__aeabi_dadd+0x52a>
10012e5e:	0001      	movs	r1, r0
10012e60:	4311      	orrs	r1, r2
10012e62:	d07b      	beq.n	10012f5c <__aeabi_dadd+0x5fc>
10012e64:	0001      	movs	r1, r0
10012e66:	0015      	movs	r5, r2
10012e68:	469a      	mov	sl, r3
10012e6a:	4c51      	ldr	r4, [pc, #324]	; (10012fb0 <__aeabi_dadd+0x650>)
10012e6c:	e5a1      	b.n	100129b2 <__aeabi_dadd+0x52>
10012e6e:	430d      	orrs	r5, r1
10012e70:	1e69      	subs	r1, r5, #1
10012e72:	418d      	sbcs	r5, r1
10012e74:	2100      	movs	r1, #0
10012e76:	b2ec      	uxtb	r4, r5
10012e78:	e72d      	b.n	10012cd6 <__aeabi_dadd+0x376>
10012e7a:	4c4d      	ldr	r4, [pc, #308]	; (10012fb0 <__aeabi_dadd+0x650>)
10012e7c:	45a4      	cmp	ip, r4
10012e7e:	d034      	beq.n	10012eea <__aeabi_dadd+0x58a>
10012e80:	2480      	movs	r4, #128	; 0x80
10012e82:	0424      	lsls	r4, r4, #16
10012e84:	425b      	negs	r3, r3
10012e86:	4321      	orrs	r1, r4
10012e88:	e7c6      	b.n	10012e18 <__aeabi_dadd+0x4b8>
10012e8a:	0004      	movs	r4, r0
10012e8c:	4314      	orrs	r4, r2
10012e8e:	d04e      	beq.n	10012f2e <__aeabi_dadd+0x5ce>
10012e90:	08ed      	lsrs	r5, r5, #3
10012e92:	074c      	lsls	r4, r1, #29
10012e94:	432c      	orrs	r4, r5
10012e96:	2580      	movs	r5, #128	; 0x80
10012e98:	08c9      	lsrs	r1, r1, #3
10012e9a:	032d      	lsls	r5, r5, #12
10012e9c:	4229      	tst	r1, r5
10012e9e:	d008      	beq.n	10012eb2 <__aeabi_dadd+0x552>
10012ea0:	08c6      	lsrs	r6, r0, #3
10012ea2:	422e      	tst	r6, r5
10012ea4:	d105      	bne.n	10012eb2 <__aeabi_dadd+0x552>
10012ea6:	08d2      	lsrs	r2, r2, #3
10012ea8:	0741      	lsls	r1, r0, #29
10012eaa:	4311      	orrs	r1, r2
10012eac:	000c      	movs	r4, r1
10012eae:	469a      	mov	sl, r3
10012eb0:	0031      	movs	r1, r6
10012eb2:	0f62      	lsrs	r2, r4, #29
10012eb4:	00c9      	lsls	r1, r1, #3
10012eb6:	00e5      	lsls	r5, r4, #3
10012eb8:	4311      	orrs	r1, r2
10012eba:	4c3d      	ldr	r4, [pc, #244]	; (10012fb0 <__aeabi_dadd+0x650>)
10012ebc:	e579      	b.n	100129b2 <__aeabi_dadd+0x52>
10012ebe:	0006      	movs	r6, r0
10012ec0:	4316      	orrs	r6, r2
10012ec2:	d100      	bne.n	10012ec6 <__aeabi_dadd+0x566>
10012ec4:	e575      	b.n	100129b2 <__aeabi_dadd+0x52>
10012ec6:	1aae      	subs	r6, r5, r2
10012ec8:	46b0      	mov	r8, r6
10012eca:	4545      	cmp	r5, r8
10012ecc:	41bf      	sbcs	r7, r7
10012ece:	1a0e      	subs	r6, r1, r0
10012ed0:	427f      	negs	r7, r7
10012ed2:	1bf6      	subs	r6, r6, r7
10012ed4:	0237      	lsls	r7, r6, #8
10012ed6:	d400      	bmi.n	10012eda <__aeabi_dadd+0x57a>
10012ed8:	e5f4      	b.n	10012ac4 <__aeabi_dadd+0x164>
10012eda:	1b55      	subs	r5, r2, r5
10012edc:	42aa      	cmp	r2, r5
10012ede:	41b6      	sbcs	r6, r6
10012ee0:	1a41      	subs	r1, r0, r1
10012ee2:	4276      	negs	r6, r6
10012ee4:	1b89      	subs	r1, r1, r6
10012ee6:	469a      	mov	sl, r3
10012ee8:	e563      	b.n	100129b2 <__aeabi_dadd+0x52>
10012eea:	0001      	movs	r1, r0
10012eec:	0015      	movs	r5, r2
10012eee:	4664      	mov	r4, ip
10012ef0:	e55f      	b.n	100129b2 <__aeabi_dadd+0x52>
10012ef2:	2200      	movs	r2, #0
10012ef4:	2500      	movs	r5, #0
10012ef6:	e57b      	b.n	100129f0 <__aeabi_dadd+0x90>
10012ef8:	2b00      	cmp	r3, #0
10012efa:	d03b      	beq.n	10012f74 <__aeabi_dadd+0x614>
10012efc:	0003      	movs	r3, r0
10012efe:	4313      	orrs	r3, r2
10012f00:	d015      	beq.n	10012f2e <__aeabi_dadd+0x5ce>
10012f02:	08ed      	lsrs	r5, r5, #3
10012f04:	074b      	lsls	r3, r1, #29
10012f06:	432b      	orrs	r3, r5
10012f08:	2580      	movs	r5, #128	; 0x80
10012f0a:	08c9      	lsrs	r1, r1, #3
10012f0c:	032d      	lsls	r5, r5, #12
10012f0e:	4229      	tst	r1, r5
10012f10:	d007      	beq.n	10012f22 <__aeabi_dadd+0x5c2>
10012f12:	08c4      	lsrs	r4, r0, #3
10012f14:	422c      	tst	r4, r5
10012f16:	d104      	bne.n	10012f22 <__aeabi_dadd+0x5c2>
10012f18:	0741      	lsls	r1, r0, #29
10012f1a:	000b      	movs	r3, r1
10012f1c:	0021      	movs	r1, r4
10012f1e:	08d2      	lsrs	r2, r2, #3
10012f20:	4313      	orrs	r3, r2
10012f22:	00c9      	lsls	r1, r1, #3
10012f24:	0f5a      	lsrs	r2, r3, #29
10012f26:	4311      	orrs	r1, r2
10012f28:	00dd      	lsls	r5, r3, #3
10012f2a:	4c21      	ldr	r4, [pc, #132]	; (10012fb0 <__aeabi_dadd+0x650>)
10012f2c:	e541      	b.n	100129b2 <__aeabi_dadd+0x52>
10012f2e:	4c20      	ldr	r4, [pc, #128]	; (10012fb0 <__aeabi_dadd+0x650>)
10012f30:	e53f      	b.n	100129b2 <__aeabi_dadd+0x52>
10012f32:	2000      	movs	r0, #0
10012f34:	e754      	b.n	10012de0 <__aeabi_dadd+0x480>
10012f36:	2600      	movs	r6, #0
10012f38:	2500      	movs	r5, #0
10012f3a:	e5d1      	b.n	10012ae0 <__aeabi_dadd+0x180>
10012f3c:	0034      	movs	r4, r6
10012f3e:	000f      	movs	r7, r1
10012f40:	3c20      	subs	r4, #32
10012f42:	40e7      	lsrs	r7, r4
10012f44:	003c      	movs	r4, r7
10012f46:	2e20      	cmp	r6, #32
10012f48:	d02b      	beq.n	10012fa2 <__aeabi_dadd+0x642>
10012f4a:	2740      	movs	r7, #64	; 0x40
10012f4c:	1bbe      	subs	r6, r7, r6
10012f4e:	40b1      	lsls	r1, r6
10012f50:	430d      	orrs	r5, r1
10012f52:	1e69      	subs	r1, r5, #1
10012f54:	418d      	sbcs	r5, r1
10012f56:	2100      	movs	r1, #0
10012f58:	432c      	orrs	r4, r5
10012f5a:	e6bc      	b.n	10012cd6 <__aeabi_dadd+0x376>
10012f5c:	2180      	movs	r1, #128	; 0x80
10012f5e:	2600      	movs	r6, #0
10012f60:	0309      	lsls	r1, r1, #12
10012f62:	4c13      	ldr	r4, [pc, #76]	; (10012fb0 <__aeabi_dadd+0x650>)
10012f64:	2500      	movs	r5, #0
10012f66:	e5bb      	b.n	10012ae0 <__aeabi_dadd+0x180>
10012f68:	430d      	orrs	r5, r1
10012f6a:	1e69      	subs	r1, r5, #1
10012f6c:	418d      	sbcs	r5, r1
10012f6e:	2100      	movs	r1, #0
10012f70:	b2ed      	uxtb	r5, r5
10012f72:	e769      	b.n	10012e48 <__aeabi_dadd+0x4e8>
10012f74:	0001      	movs	r1, r0
10012f76:	0015      	movs	r5, r2
10012f78:	4c0d      	ldr	r4, [pc, #52]	; (10012fb0 <__aeabi_dadd+0x650>)
10012f7a:	e51a      	b.n	100129b2 <__aeabi_dadd+0x52>
10012f7c:	0001      	movs	r1, r0
10012f7e:	0015      	movs	r5, r2
10012f80:	e517      	b.n	100129b2 <__aeabi_dadd+0x52>
10012f82:	001c      	movs	r4, r3
10012f84:	000f      	movs	r7, r1
10012f86:	3c20      	subs	r4, #32
10012f88:	40e7      	lsrs	r7, r4
10012f8a:	003c      	movs	r4, r7
10012f8c:	2b20      	cmp	r3, #32
10012f8e:	d00c      	beq.n	10012faa <__aeabi_dadd+0x64a>
10012f90:	2740      	movs	r7, #64	; 0x40
10012f92:	1afb      	subs	r3, r7, r3
10012f94:	4099      	lsls	r1, r3
10012f96:	430d      	orrs	r5, r1
10012f98:	1e69      	subs	r1, r5, #1
10012f9a:	418d      	sbcs	r5, r1
10012f9c:	2100      	movs	r1, #0
10012f9e:	4325      	orrs	r5, r4
10012fa0:	e752      	b.n	10012e48 <__aeabi_dadd+0x4e8>
10012fa2:	2100      	movs	r1, #0
10012fa4:	e7d4      	b.n	10012f50 <__aeabi_dadd+0x5f0>
10012fa6:	001d      	movs	r5, r3
10012fa8:	e592      	b.n	10012ad0 <__aeabi_dadd+0x170>
10012faa:	2100      	movs	r1, #0
10012fac:	e7f3      	b.n	10012f96 <__aeabi_dadd+0x636>
10012fae:	46c0      	nop			; (mov r8, r8)
10012fb0:	000007ff 	.word	0x000007ff
10012fb4:	ff7fffff 	.word	0xff7fffff

10012fb8 <__aeabi_ddiv>:
10012fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fba:	4656      	mov	r6, sl
10012fbc:	464d      	mov	r5, r9
10012fbe:	4644      	mov	r4, r8
10012fc0:	465f      	mov	r7, fp
10012fc2:	b4f0      	push	{r4, r5, r6, r7}
10012fc4:	001d      	movs	r5, r3
10012fc6:	030e      	lsls	r6, r1, #12
10012fc8:	004c      	lsls	r4, r1, #1
10012fca:	0fcb      	lsrs	r3, r1, #31
10012fcc:	b087      	sub	sp, #28
10012fce:	0007      	movs	r7, r0
10012fd0:	4692      	mov	sl, r2
10012fd2:	4681      	mov	r9, r0
10012fd4:	0b36      	lsrs	r6, r6, #12
10012fd6:	0d64      	lsrs	r4, r4, #21
10012fd8:	4698      	mov	r8, r3
10012fda:	d06a      	beq.n	100130b2 <__aeabi_ddiv+0xfa>
10012fdc:	4b6d      	ldr	r3, [pc, #436]	; (10013194 <__aeabi_ddiv+0x1dc>)
10012fde:	429c      	cmp	r4, r3
10012fe0:	d035      	beq.n	1001304e <__aeabi_ddiv+0x96>
10012fe2:	2280      	movs	r2, #128	; 0x80
10012fe4:	0f43      	lsrs	r3, r0, #29
10012fe6:	0412      	lsls	r2, r2, #16
10012fe8:	4313      	orrs	r3, r2
10012fea:	00f6      	lsls	r6, r6, #3
10012fec:	431e      	orrs	r6, r3
10012fee:	00c3      	lsls	r3, r0, #3
10012ff0:	4699      	mov	r9, r3
10012ff2:	4b69      	ldr	r3, [pc, #420]	; (10013198 <__aeabi_ddiv+0x1e0>)
10012ff4:	2700      	movs	r7, #0
10012ff6:	469c      	mov	ip, r3
10012ff8:	2300      	movs	r3, #0
10012ffa:	4464      	add	r4, ip
10012ffc:	9302      	str	r3, [sp, #8]
10012ffe:	032b      	lsls	r3, r5, #12
10013000:	0068      	lsls	r0, r5, #1
10013002:	0b1b      	lsrs	r3, r3, #12
10013004:	0fed      	lsrs	r5, r5, #31
10013006:	4651      	mov	r1, sl
10013008:	469b      	mov	fp, r3
1001300a:	0d40      	lsrs	r0, r0, #21
1001300c:	9500      	str	r5, [sp, #0]
1001300e:	d100      	bne.n	10013012 <__aeabi_ddiv+0x5a>
10013010:	e078      	b.n	10013104 <__aeabi_ddiv+0x14c>
10013012:	4b60      	ldr	r3, [pc, #384]	; (10013194 <__aeabi_ddiv+0x1dc>)
10013014:	4298      	cmp	r0, r3
10013016:	d06c      	beq.n	100130f2 <__aeabi_ddiv+0x13a>
10013018:	465b      	mov	r3, fp
1001301a:	00da      	lsls	r2, r3, #3
1001301c:	0f4b      	lsrs	r3, r1, #29
1001301e:	2180      	movs	r1, #128	; 0x80
10013020:	0409      	lsls	r1, r1, #16
10013022:	430b      	orrs	r3, r1
10013024:	4313      	orrs	r3, r2
10013026:	469b      	mov	fp, r3
10013028:	4653      	mov	r3, sl
1001302a:	00d9      	lsls	r1, r3, #3
1001302c:	4b5a      	ldr	r3, [pc, #360]	; (10013198 <__aeabi_ddiv+0x1e0>)
1001302e:	469c      	mov	ip, r3
10013030:	2300      	movs	r3, #0
10013032:	4460      	add	r0, ip
10013034:	4642      	mov	r2, r8
10013036:	1a20      	subs	r0, r4, r0
10013038:	406a      	eors	r2, r5
1001303a:	4692      	mov	sl, r2
1001303c:	9001      	str	r0, [sp, #4]
1001303e:	431f      	orrs	r7, r3
10013040:	2f0f      	cmp	r7, #15
10013042:	d900      	bls.n	10013046 <__aeabi_ddiv+0x8e>
10013044:	e0b0      	b.n	100131a8 <__aeabi_ddiv+0x1f0>
10013046:	4855      	ldr	r0, [pc, #340]	; (1001319c <__aeabi_ddiv+0x1e4>)
10013048:	00bf      	lsls	r7, r7, #2
1001304a:	59c0      	ldr	r0, [r0, r7]
1001304c:	4687      	mov	pc, r0
1001304e:	4337      	orrs	r7, r6
10013050:	d000      	beq.n	10013054 <__aeabi_ddiv+0x9c>
10013052:	e088      	b.n	10013166 <__aeabi_ddiv+0x1ae>
10013054:	2300      	movs	r3, #0
10013056:	4699      	mov	r9, r3
10013058:	3302      	adds	r3, #2
1001305a:	2708      	movs	r7, #8
1001305c:	2600      	movs	r6, #0
1001305e:	9302      	str	r3, [sp, #8]
10013060:	e7cd      	b.n	10012ffe <__aeabi_ddiv+0x46>
10013062:	4643      	mov	r3, r8
10013064:	46b3      	mov	fp, r6
10013066:	4649      	mov	r1, r9
10013068:	9300      	str	r3, [sp, #0]
1001306a:	9b02      	ldr	r3, [sp, #8]
1001306c:	9a00      	ldr	r2, [sp, #0]
1001306e:	4692      	mov	sl, r2
10013070:	2b02      	cmp	r3, #2
10013072:	d000      	beq.n	10013076 <__aeabi_ddiv+0xbe>
10013074:	e1bf      	b.n	100133f6 <__aeabi_ddiv+0x43e>
10013076:	2100      	movs	r1, #0
10013078:	4653      	mov	r3, sl
1001307a:	2201      	movs	r2, #1
1001307c:	2600      	movs	r6, #0
1001307e:	4689      	mov	r9, r1
10013080:	401a      	ands	r2, r3
10013082:	4b44      	ldr	r3, [pc, #272]	; (10013194 <__aeabi_ddiv+0x1dc>)
10013084:	2100      	movs	r1, #0
10013086:	0336      	lsls	r6, r6, #12
10013088:	0d0c      	lsrs	r4, r1, #20
1001308a:	0524      	lsls	r4, r4, #20
1001308c:	0b36      	lsrs	r6, r6, #12
1001308e:	4326      	orrs	r6, r4
10013090:	4c43      	ldr	r4, [pc, #268]	; (100131a0 <__aeabi_ddiv+0x1e8>)
10013092:	051b      	lsls	r3, r3, #20
10013094:	4026      	ands	r6, r4
10013096:	431e      	orrs	r6, r3
10013098:	0076      	lsls	r6, r6, #1
1001309a:	07d2      	lsls	r2, r2, #31
1001309c:	0876      	lsrs	r6, r6, #1
1001309e:	4316      	orrs	r6, r2
100130a0:	4648      	mov	r0, r9
100130a2:	0031      	movs	r1, r6
100130a4:	b007      	add	sp, #28
100130a6:	bc3c      	pop	{r2, r3, r4, r5}
100130a8:	4690      	mov	r8, r2
100130aa:	4699      	mov	r9, r3
100130ac:	46a2      	mov	sl, r4
100130ae:	46ab      	mov	fp, r5
100130b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100130b2:	0033      	movs	r3, r6
100130b4:	4303      	orrs	r3, r0
100130b6:	d04f      	beq.n	10013158 <__aeabi_ddiv+0x1a0>
100130b8:	2e00      	cmp	r6, #0
100130ba:	d100      	bne.n	100130be <__aeabi_ddiv+0x106>
100130bc:	e1bc      	b.n	10013438 <__aeabi_ddiv+0x480>
100130be:	0030      	movs	r0, r6
100130c0:	f001 fb1c 	bl	100146fc <__clzsi2>
100130c4:	0003      	movs	r3, r0
100130c6:	3b0b      	subs	r3, #11
100130c8:	2b1c      	cmp	r3, #28
100130ca:	dd00      	ble.n	100130ce <__aeabi_ddiv+0x116>
100130cc:	e1ad      	b.n	1001342a <__aeabi_ddiv+0x472>
100130ce:	221d      	movs	r2, #29
100130d0:	0001      	movs	r1, r0
100130d2:	1ad3      	subs	r3, r2, r3
100130d4:	3908      	subs	r1, #8
100130d6:	003a      	movs	r2, r7
100130d8:	408f      	lsls	r7, r1
100130da:	408e      	lsls	r6, r1
100130dc:	40da      	lsrs	r2, r3
100130de:	46b9      	mov	r9, r7
100130e0:	4316      	orrs	r6, r2
100130e2:	4b30      	ldr	r3, [pc, #192]	; (100131a4 <__aeabi_ddiv+0x1ec>)
100130e4:	2700      	movs	r7, #0
100130e6:	469c      	mov	ip, r3
100130e8:	2300      	movs	r3, #0
100130ea:	4460      	add	r0, ip
100130ec:	4244      	negs	r4, r0
100130ee:	9302      	str	r3, [sp, #8]
100130f0:	e785      	b.n	10012ffe <__aeabi_ddiv+0x46>
100130f2:	4653      	mov	r3, sl
100130f4:	465a      	mov	r2, fp
100130f6:	4313      	orrs	r3, r2
100130f8:	d12c      	bne.n	10013154 <__aeabi_ddiv+0x19c>
100130fa:	2300      	movs	r3, #0
100130fc:	2100      	movs	r1, #0
100130fe:	469b      	mov	fp, r3
10013100:	3302      	adds	r3, #2
10013102:	e797      	b.n	10013034 <__aeabi_ddiv+0x7c>
10013104:	430b      	orrs	r3, r1
10013106:	d020      	beq.n	1001314a <__aeabi_ddiv+0x192>
10013108:	465b      	mov	r3, fp
1001310a:	2b00      	cmp	r3, #0
1001310c:	d100      	bne.n	10013110 <__aeabi_ddiv+0x158>
1001310e:	e19e      	b.n	1001344e <__aeabi_ddiv+0x496>
10013110:	4658      	mov	r0, fp
10013112:	f001 faf3 	bl	100146fc <__clzsi2>
10013116:	0003      	movs	r3, r0
10013118:	3b0b      	subs	r3, #11
1001311a:	2b1c      	cmp	r3, #28
1001311c:	dd00      	ble.n	10013120 <__aeabi_ddiv+0x168>
1001311e:	e18f      	b.n	10013440 <__aeabi_ddiv+0x488>
10013120:	0002      	movs	r2, r0
10013122:	4659      	mov	r1, fp
10013124:	3a08      	subs	r2, #8
10013126:	4091      	lsls	r1, r2
10013128:	468b      	mov	fp, r1
1001312a:	211d      	movs	r1, #29
1001312c:	1acb      	subs	r3, r1, r3
1001312e:	4651      	mov	r1, sl
10013130:	40d9      	lsrs	r1, r3
10013132:	000b      	movs	r3, r1
10013134:	4659      	mov	r1, fp
10013136:	430b      	orrs	r3, r1
10013138:	4651      	mov	r1, sl
1001313a:	469b      	mov	fp, r3
1001313c:	4091      	lsls	r1, r2
1001313e:	4b19      	ldr	r3, [pc, #100]	; (100131a4 <__aeabi_ddiv+0x1ec>)
10013140:	469c      	mov	ip, r3
10013142:	4460      	add	r0, ip
10013144:	4240      	negs	r0, r0
10013146:	2300      	movs	r3, #0
10013148:	e774      	b.n	10013034 <__aeabi_ddiv+0x7c>
1001314a:	2300      	movs	r3, #0
1001314c:	2100      	movs	r1, #0
1001314e:	469b      	mov	fp, r3
10013150:	3301      	adds	r3, #1
10013152:	e76f      	b.n	10013034 <__aeabi_ddiv+0x7c>
10013154:	2303      	movs	r3, #3
10013156:	e76d      	b.n	10013034 <__aeabi_ddiv+0x7c>
10013158:	2300      	movs	r3, #0
1001315a:	4699      	mov	r9, r3
1001315c:	3301      	adds	r3, #1
1001315e:	2704      	movs	r7, #4
10013160:	2600      	movs	r6, #0
10013162:	9302      	str	r3, [sp, #8]
10013164:	e74b      	b.n	10012ffe <__aeabi_ddiv+0x46>
10013166:	2303      	movs	r3, #3
10013168:	270c      	movs	r7, #12
1001316a:	9302      	str	r3, [sp, #8]
1001316c:	e747      	b.n	10012ffe <__aeabi_ddiv+0x46>
1001316e:	2201      	movs	r2, #1
10013170:	1ad5      	subs	r5, r2, r3
10013172:	2d38      	cmp	r5, #56	; 0x38
10013174:	dc00      	bgt.n	10013178 <__aeabi_ddiv+0x1c0>
10013176:	e1b0      	b.n	100134da <__aeabi_ddiv+0x522>
10013178:	4653      	mov	r3, sl
1001317a:	401a      	ands	r2, r3
1001317c:	2100      	movs	r1, #0
1001317e:	2300      	movs	r3, #0
10013180:	2600      	movs	r6, #0
10013182:	4689      	mov	r9, r1
10013184:	e77e      	b.n	10013084 <__aeabi_ddiv+0xcc>
10013186:	2300      	movs	r3, #0
10013188:	2680      	movs	r6, #128	; 0x80
1001318a:	4699      	mov	r9, r3
1001318c:	2200      	movs	r2, #0
1001318e:	0336      	lsls	r6, r6, #12
10013190:	4b00      	ldr	r3, [pc, #0]	; (10013194 <__aeabi_ddiv+0x1dc>)
10013192:	e777      	b.n	10013084 <__aeabi_ddiv+0xcc>
10013194:	000007ff 	.word	0x000007ff
10013198:	fffffc01 	.word	0xfffffc01
1001319c:	10017250 	.word	0x10017250
100131a0:	800fffff 	.word	0x800fffff
100131a4:	000003f3 	.word	0x000003f3
100131a8:	455e      	cmp	r6, fp
100131aa:	d900      	bls.n	100131ae <__aeabi_ddiv+0x1f6>
100131ac:	e172      	b.n	10013494 <__aeabi_ddiv+0x4dc>
100131ae:	d100      	bne.n	100131b2 <__aeabi_ddiv+0x1fa>
100131b0:	e16d      	b.n	1001348e <__aeabi_ddiv+0x4d6>
100131b2:	9b01      	ldr	r3, [sp, #4]
100131b4:	464d      	mov	r5, r9
100131b6:	3b01      	subs	r3, #1
100131b8:	9301      	str	r3, [sp, #4]
100131ba:	2300      	movs	r3, #0
100131bc:	0034      	movs	r4, r6
100131be:	9302      	str	r3, [sp, #8]
100131c0:	465b      	mov	r3, fp
100131c2:	021e      	lsls	r6, r3, #8
100131c4:	0e0b      	lsrs	r3, r1, #24
100131c6:	431e      	orrs	r6, r3
100131c8:	020b      	lsls	r3, r1, #8
100131ca:	9303      	str	r3, [sp, #12]
100131cc:	0c33      	lsrs	r3, r6, #16
100131ce:	4699      	mov	r9, r3
100131d0:	0433      	lsls	r3, r6, #16
100131d2:	0c1b      	lsrs	r3, r3, #16
100131d4:	4649      	mov	r1, r9
100131d6:	0020      	movs	r0, r4
100131d8:	9300      	str	r3, [sp, #0]
100131da:	f7fe ff0f 	bl	10011ffc <__aeabi_uidiv>
100131de:	9b00      	ldr	r3, [sp, #0]
100131e0:	0037      	movs	r7, r6
100131e2:	4343      	muls	r3, r0
100131e4:	0006      	movs	r6, r0
100131e6:	4649      	mov	r1, r9
100131e8:	0020      	movs	r0, r4
100131ea:	4698      	mov	r8, r3
100131ec:	f7fe ff8c 	bl	10012108 <__aeabi_uidivmod>
100131f0:	0c2c      	lsrs	r4, r5, #16
100131f2:	0409      	lsls	r1, r1, #16
100131f4:	430c      	orrs	r4, r1
100131f6:	45a0      	cmp	r8, r4
100131f8:	d909      	bls.n	1001320e <__aeabi_ddiv+0x256>
100131fa:	19e4      	adds	r4, r4, r7
100131fc:	1e73      	subs	r3, r6, #1
100131fe:	42a7      	cmp	r7, r4
10013200:	d900      	bls.n	10013204 <__aeabi_ddiv+0x24c>
10013202:	e15c      	b.n	100134be <__aeabi_ddiv+0x506>
10013204:	45a0      	cmp	r8, r4
10013206:	d800      	bhi.n	1001320a <__aeabi_ddiv+0x252>
10013208:	e159      	b.n	100134be <__aeabi_ddiv+0x506>
1001320a:	3e02      	subs	r6, #2
1001320c:	19e4      	adds	r4, r4, r7
1001320e:	4643      	mov	r3, r8
10013210:	1ae4      	subs	r4, r4, r3
10013212:	4649      	mov	r1, r9
10013214:	0020      	movs	r0, r4
10013216:	f7fe fef1 	bl	10011ffc <__aeabi_uidiv>
1001321a:	0003      	movs	r3, r0
1001321c:	9a00      	ldr	r2, [sp, #0]
1001321e:	4680      	mov	r8, r0
10013220:	4353      	muls	r3, r2
10013222:	4649      	mov	r1, r9
10013224:	0020      	movs	r0, r4
10013226:	469b      	mov	fp, r3
10013228:	f7fe ff6e 	bl	10012108 <__aeabi_uidivmod>
1001322c:	042a      	lsls	r2, r5, #16
1001322e:	0409      	lsls	r1, r1, #16
10013230:	0c12      	lsrs	r2, r2, #16
10013232:	430a      	orrs	r2, r1
10013234:	4593      	cmp	fp, r2
10013236:	d90d      	bls.n	10013254 <__aeabi_ddiv+0x29c>
10013238:	4643      	mov	r3, r8
1001323a:	19d2      	adds	r2, r2, r7
1001323c:	3b01      	subs	r3, #1
1001323e:	4297      	cmp	r7, r2
10013240:	d900      	bls.n	10013244 <__aeabi_ddiv+0x28c>
10013242:	e13a      	b.n	100134ba <__aeabi_ddiv+0x502>
10013244:	4593      	cmp	fp, r2
10013246:	d800      	bhi.n	1001324a <__aeabi_ddiv+0x292>
10013248:	e137      	b.n	100134ba <__aeabi_ddiv+0x502>
1001324a:	2302      	movs	r3, #2
1001324c:	425b      	negs	r3, r3
1001324e:	469c      	mov	ip, r3
10013250:	19d2      	adds	r2, r2, r7
10013252:	44e0      	add	r8, ip
10013254:	465b      	mov	r3, fp
10013256:	1ad2      	subs	r2, r2, r3
10013258:	4643      	mov	r3, r8
1001325a:	0436      	lsls	r6, r6, #16
1001325c:	4333      	orrs	r3, r6
1001325e:	469b      	mov	fp, r3
10013260:	9903      	ldr	r1, [sp, #12]
10013262:	0c18      	lsrs	r0, r3, #16
10013264:	0c0b      	lsrs	r3, r1, #16
10013266:	001d      	movs	r5, r3
10013268:	9305      	str	r3, [sp, #20]
1001326a:	0409      	lsls	r1, r1, #16
1001326c:	465b      	mov	r3, fp
1001326e:	0c09      	lsrs	r1, r1, #16
10013270:	000c      	movs	r4, r1
10013272:	041b      	lsls	r3, r3, #16
10013274:	0c1b      	lsrs	r3, r3, #16
10013276:	4344      	muls	r4, r0
10013278:	9104      	str	r1, [sp, #16]
1001327a:	4359      	muls	r1, r3
1001327c:	436b      	muls	r3, r5
1001327e:	4368      	muls	r0, r5
10013280:	191b      	adds	r3, r3, r4
10013282:	0c0d      	lsrs	r5, r1, #16
10013284:	18eb      	adds	r3, r5, r3
10013286:	429c      	cmp	r4, r3
10013288:	d903      	bls.n	10013292 <__aeabi_ddiv+0x2da>
1001328a:	2480      	movs	r4, #128	; 0x80
1001328c:	0264      	lsls	r4, r4, #9
1001328e:	46a4      	mov	ip, r4
10013290:	4460      	add	r0, ip
10013292:	0c1c      	lsrs	r4, r3, #16
10013294:	0409      	lsls	r1, r1, #16
10013296:	041b      	lsls	r3, r3, #16
10013298:	0c09      	lsrs	r1, r1, #16
1001329a:	1820      	adds	r0, r4, r0
1001329c:	185d      	adds	r5, r3, r1
1001329e:	4282      	cmp	r2, r0
100132a0:	d200      	bcs.n	100132a4 <__aeabi_ddiv+0x2ec>
100132a2:	e0de      	b.n	10013462 <__aeabi_ddiv+0x4aa>
100132a4:	d100      	bne.n	100132a8 <__aeabi_ddiv+0x2f0>
100132a6:	e0d7      	b.n	10013458 <__aeabi_ddiv+0x4a0>
100132a8:	1a16      	subs	r6, r2, r0
100132aa:	9b02      	ldr	r3, [sp, #8]
100132ac:	469c      	mov	ip, r3
100132ae:	1b5d      	subs	r5, r3, r5
100132b0:	45ac      	cmp	ip, r5
100132b2:	419b      	sbcs	r3, r3
100132b4:	425b      	negs	r3, r3
100132b6:	1af6      	subs	r6, r6, r3
100132b8:	42b7      	cmp	r7, r6
100132ba:	d100      	bne.n	100132be <__aeabi_ddiv+0x306>
100132bc:	e106      	b.n	100134cc <__aeabi_ddiv+0x514>
100132be:	4649      	mov	r1, r9
100132c0:	0030      	movs	r0, r6
100132c2:	f7fe fe9b 	bl	10011ffc <__aeabi_uidiv>
100132c6:	9b00      	ldr	r3, [sp, #0]
100132c8:	0004      	movs	r4, r0
100132ca:	4343      	muls	r3, r0
100132cc:	4649      	mov	r1, r9
100132ce:	0030      	movs	r0, r6
100132d0:	4698      	mov	r8, r3
100132d2:	f7fe ff19 	bl	10012108 <__aeabi_uidivmod>
100132d6:	0c2e      	lsrs	r6, r5, #16
100132d8:	0409      	lsls	r1, r1, #16
100132da:	430e      	orrs	r6, r1
100132dc:	45b0      	cmp	r8, r6
100132de:	d909      	bls.n	100132f4 <__aeabi_ddiv+0x33c>
100132e0:	19f6      	adds	r6, r6, r7
100132e2:	1e63      	subs	r3, r4, #1
100132e4:	42b7      	cmp	r7, r6
100132e6:	d900      	bls.n	100132ea <__aeabi_ddiv+0x332>
100132e8:	e0f3      	b.n	100134d2 <__aeabi_ddiv+0x51a>
100132ea:	45b0      	cmp	r8, r6
100132ec:	d800      	bhi.n	100132f0 <__aeabi_ddiv+0x338>
100132ee:	e0f0      	b.n	100134d2 <__aeabi_ddiv+0x51a>
100132f0:	3c02      	subs	r4, #2
100132f2:	19f6      	adds	r6, r6, r7
100132f4:	4643      	mov	r3, r8
100132f6:	1af3      	subs	r3, r6, r3
100132f8:	4649      	mov	r1, r9
100132fa:	0018      	movs	r0, r3
100132fc:	9302      	str	r3, [sp, #8]
100132fe:	f7fe fe7d 	bl	10011ffc <__aeabi_uidiv>
10013302:	9b00      	ldr	r3, [sp, #0]
10013304:	0006      	movs	r6, r0
10013306:	4343      	muls	r3, r0
10013308:	4649      	mov	r1, r9
1001330a:	9802      	ldr	r0, [sp, #8]
1001330c:	4698      	mov	r8, r3
1001330e:	f7fe fefb 	bl	10012108 <__aeabi_uidivmod>
10013312:	042d      	lsls	r5, r5, #16
10013314:	0409      	lsls	r1, r1, #16
10013316:	0c2d      	lsrs	r5, r5, #16
10013318:	430d      	orrs	r5, r1
1001331a:	45a8      	cmp	r8, r5
1001331c:	d909      	bls.n	10013332 <__aeabi_ddiv+0x37a>
1001331e:	19ed      	adds	r5, r5, r7
10013320:	1e73      	subs	r3, r6, #1
10013322:	42af      	cmp	r7, r5
10013324:	d900      	bls.n	10013328 <__aeabi_ddiv+0x370>
10013326:	e0d6      	b.n	100134d6 <__aeabi_ddiv+0x51e>
10013328:	45a8      	cmp	r8, r5
1001332a:	d800      	bhi.n	1001332e <__aeabi_ddiv+0x376>
1001332c:	e0d3      	b.n	100134d6 <__aeabi_ddiv+0x51e>
1001332e:	3e02      	subs	r6, #2
10013330:	19ed      	adds	r5, r5, r7
10013332:	0424      	lsls	r4, r4, #16
10013334:	0021      	movs	r1, r4
10013336:	4643      	mov	r3, r8
10013338:	4331      	orrs	r1, r6
1001333a:	9e04      	ldr	r6, [sp, #16]
1001333c:	9a05      	ldr	r2, [sp, #20]
1001333e:	0030      	movs	r0, r6
10013340:	1aed      	subs	r5, r5, r3
10013342:	040b      	lsls	r3, r1, #16
10013344:	0c0c      	lsrs	r4, r1, #16
10013346:	0c1b      	lsrs	r3, r3, #16
10013348:	4358      	muls	r0, r3
1001334a:	4366      	muls	r6, r4
1001334c:	4353      	muls	r3, r2
1001334e:	4354      	muls	r4, r2
10013350:	199a      	adds	r2, r3, r6
10013352:	0c03      	lsrs	r3, r0, #16
10013354:	189b      	adds	r3, r3, r2
10013356:	429e      	cmp	r6, r3
10013358:	d903      	bls.n	10013362 <__aeabi_ddiv+0x3aa>
1001335a:	2280      	movs	r2, #128	; 0x80
1001335c:	0252      	lsls	r2, r2, #9
1001335e:	4694      	mov	ip, r2
10013360:	4464      	add	r4, ip
10013362:	0c1a      	lsrs	r2, r3, #16
10013364:	0400      	lsls	r0, r0, #16
10013366:	041b      	lsls	r3, r3, #16
10013368:	0c00      	lsrs	r0, r0, #16
1001336a:	1914      	adds	r4, r2, r4
1001336c:	181b      	adds	r3, r3, r0
1001336e:	42a5      	cmp	r5, r4
10013370:	d350      	bcc.n	10013414 <__aeabi_ddiv+0x45c>
10013372:	d04d      	beq.n	10013410 <__aeabi_ddiv+0x458>
10013374:	2301      	movs	r3, #1
10013376:	4319      	orrs	r1, r3
10013378:	4a96      	ldr	r2, [pc, #600]	; (100135d4 <__aeabi_ddiv+0x61c>)
1001337a:	9b01      	ldr	r3, [sp, #4]
1001337c:	4694      	mov	ip, r2
1001337e:	4463      	add	r3, ip
10013380:	2b00      	cmp	r3, #0
10013382:	dc00      	bgt.n	10013386 <__aeabi_ddiv+0x3ce>
10013384:	e6f3      	b.n	1001316e <__aeabi_ddiv+0x1b6>
10013386:	074a      	lsls	r2, r1, #29
10013388:	d009      	beq.n	1001339e <__aeabi_ddiv+0x3e6>
1001338a:	220f      	movs	r2, #15
1001338c:	400a      	ands	r2, r1
1001338e:	2a04      	cmp	r2, #4
10013390:	d005      	beq.n	1001339e <__aeabi_ddiv+0x3e6>
10013392:	1d0a      	adds	r2, r1, #4
10013394:	428a      	cmp	r2, r1
10013396:	4189      	sbcs	r1, r1
10013398:	4249      	negs	r1, r1
1001339a:	448b      	add	fp, r1
1001339c:	0011      	movs	r1, r2
1001339e:	465a      	mov	r2, fp
100133a0:	01d2      	lsls	r2, r2, #7
100133a2:	d508      	bpl.n	100133b6 <__aeabi_ddiv+0x3fe>
100133a4:	465a      	mov	r2, fp
100133a6:	4b8c      	ldr	r3, [pc, #560]	; (100135d8 <__aeabi_ddiv+0x620>)
100133a8:	401a      	ands	r2, r3
100133aa:	4693      	mov	fp, r2
100133ac:	2280      	movs	r2, #128	; 0x80
100133ae:	00d2      	lsls	r2, r2, #3
100133b0:	4694      	mov	ip, r2
100133b2:	9b01      	ldr	r3, [sp, #4]
100133b4:	4463      	add	r3, ip
100133b6:	4a89      	ldr	r2, [pc, #548]	; (100135dc <__aeabi_ddiv+0x624>)
100133b8:	4293      	cmp	r3, r2
100133ba:	dd00      	ble.n	100133be <__aeabi_ddiv+0x406>
100133bc:	e65b      	b.n	10013076 <__aeabi_ddiv+0xbe>
100133be:	465a      	mov	r2, fp
100133c0:	08c9      	lsrs	r1, r1, #3
100133c2:	0750      	lsls	r0, r2, #29
100133c4:	4308      	orrs	r0, r1
100133c6:	0256      	lsls	r6, r2, #9
100133c8:	4651      	mov	r1, sl
100133ca:	2201      	movs	r2, #1
100133cc:	055b      	lsls	r3, r3, #21
100133ce:	4681      	mov	r9, r0
100133d0:	0b36      	lsrs	r6, r6, #12
100133d2:	0d5b      	lsrs	r3, r3, #21
100133d4:	400a      	ands	r2, r1
100133d6:	e655      	b.n	10013084 <__aeabi_ddiv+0xcc>
100133d8:	2380      	movs	r3, #128	; 0x80
100133da:	031b      	lsls	r3, r3, #12
100133dc:	421e      	tst	r6, r3
100133de:	d011      	beq.n	10013404 <__aeabi_ddiv+0x44c>
100133e0:	465a      	mov	r2, fp
100133e2:	421a      	tst	r2, r3
100133e4:	d10e      	bne.n	10013404 <__aeabi_ddiv+0x44c>
100133e6:	465e      	mov	r6, fp
100133e8:	431e      	orrs	r6, r3
100133ea:	0336      	lsls	r6, r6, #12
100133ec:	0b36      	lsrs	r6, r6, #12
100133ee:	002a      	movs	r2, r5
100133f0:	4689      	mov	r9, r1
100133f2:	4b7b      	ldr	r3, [pc, #492]	; (100135e0 <__aeabi_ddiv+0x628>)
100133f4:	e646      	b.n	10013084 <__aeabi_ddiv+0xcc>
100133f6:	2b03      	cmp	r3, #3
100133f8:	d100      	bne.n	100133fc <__aeabi_ddiv+0x444>
100133fa:	e0e1      	b.n	100135c0 <__aeabi_ddiv+0x608>
100133fc:	2b01      	cmp	r3, #1
100133fe:	d1bb      	bne.n	10013378 <__aeabi_ddiv+0x3c0>
10013400:	401a      	ands	r2, r3
10013402:	e6bb      	b.n	1001317c <__aeabi_ddiv+0x1c4>
10013404:	431e      	orrs	r6, r3
10013406:	0336      	lsls	r6, r6, #12
10013408:	0b36      	lsrs	r6, r6, #12
1001340a:	4642      	mov	r2, r8
1001340c:	4b74      	ldr	r3, [pc, #464]	; (100135e0 <__aeabi_ddiv+0x628>)
1001340e:	e639      	b.n	10013084 <__aeabi_ddiv+0xcc>
10013410:	2b00      	cmp	r3, #0
10013412:	d0b1      	beq.n	10013378 <__aeabi_ddiv+0x3c0>
10013414:	197d      	adds	r5, r7, r5
10013416:	1e4a      	subs	r2, r1, #1
10013418:	42af      	cmp	r7, r5
1001341a:	d952      	bls.n	100134c2 <__aeabi_ddiv+0x50a>
1001341c:	0011      	movs	r1, r2
1001341e:	42a5      	cmp	r5, r4
10013420:	d1a8      	bne.n	10013374 <__aeabi_ddiv+0x3bc>
10013422:	9a03      	ldr	r2, [sp, #12]
10013424:	429a      	cmp	r2, r3
10013426:	d1a5      	bne.n	10013374 <__aeabi_ddiv+0x3bc>
10013428:	e7a6      	b.n	10013378 <__aeabi_ddiv+0x3c0>
1001342a:	0003      	movs	r3, r0
1001342c:	003e      	movs	r6, r7
1001342e:	3b28      	subs	r3, #40	; 0x28
10013430:	409e      	lsls	r6, r3
10013432:	2300      	movs	r3, #0
10013434:	4699      	mov	r9, r3
10013436:	e654      	b.n	100130e2 <__aeabi_ddiv+0x12a>
10013438:	f001 f960 	bl	100146fc <__clzsi2>
1001343c:	3020      	adds	r0, #32
1001343e:	e641      	b.n	100130c4 <__aeabi_ddiv+0x10c>
10013440:	0003      	movs	r3, r0
10013442:	4652      	mov	r2, sl
10013444:	3b28      	subs	r3, #40	; 0x28
10013446:	409a      	lsls	r2, r3
10013448:	2100      	movs	r1, #0
1001344a:	4693      	mov	fp, r2
1001344c:	e677      	b.n	1001313e <__aeabi_ddiv+0x186>
1001344e:	4650      	mov	r0, sl
10013450:	f001 f954 	bl	100146fc <__clzsi2>
10013454:	3020      	adds	r0, #32
10013456:	e65e      	b.n	10013116 <__aeabi_ddiv+0x15e>
10013458:	9b02      	ldr	r3, [sp, #8]
1001345a:	2600      	movs	r6, #0
1001345c:	42ab      	cmp	r3, r5
1001345e:	d300      	bcc.n	10013462 <__aeabi_ddiv+0x4aa>
10013460:	e723      	b.n	100132aa <__aeabi_ddiv+0x2f2>
10013462:	9e03      	ldr	r6, [sp, #12]
10013464:	9902      	ldr	r1, [sp, #8]
10013466:	46b4      	mov	ip, r6
10013468:	4461      	add	r1, ip
1001346a:	4688      	mov	r8, r1
1001346c:	45b0      	cmp	r8, r6
1001346e:	41b6      	sbcs	r6, r6
10013470:	465b      	mov	r3, fp
10013472:	4276      	negs	r6, r6
10013474:	19f6      	adds	r6, r6, r7
10013476:	18b2      	adds	r2, r6, r2
10013478:	3b01      	subs	r3, #1
1001347a:	9102      	str	r1, [sp, #8]
1001347c:	4297      	cmp	r7, r2
1001347e:	d213      	bcs.n	100134a8 <__aeabi_ddiv+0x4f0>
10013480:	4290      	cmp	r0, r2
10013482:	d84f      	bhi.n	10013524 <__aeabi_ddiv+0x56c>
10013484:	d100      	bne.n	10013488 <__aeabi_ddiv+0x4d0>
10013486:	e08e      	b.n	100135a6 <__aeabi_ddiv+0x5ee>
10013488:	1a16      	subs	r6, r2, r0
1001348a:	469b      	mov	fp, r3
1001348c:	e70d      	b.n	100132aa <__aeabi_ddiv+0x2f2>
1001348e:	4589      	cmp	r9, r1
10013490:	d200      	bcs.n	10013494 <__aeabi_ddiv+0x4dc>
10013492:	e68e      	b.n	100131b2 <__aeabi_ddiv+0x1fa>
10013494:	0874      	lsrs	r4, r6, #1
10013496:	464b      	mov	r3, r9
10013498:	07f6      	lsls	r6, r6, #31
1001349a:	0035      	movs	r5, r6
1001349c:	085b      	lsrs	r3, r3, #1
1001349e:	431d      	orrs	r5, r3
100134a0:	464b      	mov	r3, r9
100134a2:	07db      	lsls	r3, r3, #31
100134a4:	9302      	str	r3, [sp, #8]
100134a6:	e68b      	b.n	100131c0 <__aeabi_ddiv+0x208>
100134a8:	4297      	cmp	r7, r2
100134aa:	d1ed      	bne.n	10013488 <__aeabi_ddiv+0x4d0>
100134ac:	9903      	ldr	r1, [sp, #12]
100134ae:	9c02      	ldr	r4, [sp, #8]
100134b0:	42a1      	cmp	r1, r4
100134b2:	d9e5      	bls.n	10013480 <__aeabi_ddiv+0x4c8>
100134b4:	1a3e      	subs	r6, r7, r0
100134b6:	469b      	mov	fp, r3
100134b8:	e6f7      	b.n	100132aa <__aeabi_ddiv+0x2f2>
100134ba:	4698      	mov	r8, r3
100134bc:	e6ca      	b.n	10013254 <__aeabi_ddiv+0x29c>
100134be:	001e      	movs	r6, r3
100134c0:	e6a5      	b.n	1001320e <__aeabi_ddiv+0x256>
100134c2:	42ac      	cmp	r4, r5
100134c4:	d83e      	bhi.n	10013544 <__aeabi_ddiv+0x58c>
100134c6:	d074      	beq.n	100135b2 <__aeabi_ddiv+0x5fa>
100134c8:	0011      	movs	r1, r2
100134ca:	e753      	b.n	10013374 <__aeabi_ddiv+0x3bc>
100134cc:	2101      	movs	r1, #1
100134ce:	4249      	negs	r1, r1
100134d0:	e752      	b.n	10013378 <__aeabi_ddiv+0x3c0>
100134d2:	001c      	movs	r4, r3
100134d4:	e70e      	b.n	100132f4 <__aeabi_ddiv+0x33c>
100134d6:	001e      	movs	r6, r3
100134d8:	e72b      	b.n	10013332 <__aeabi_ddiv+0x37a>
100134da:	2d1f      	cmp	r5, #31
100134dc:	dc3c      	bgt.n	10013558 <__aeabi_ddiv+0x5a0>
100134de:	2320      	movs	r3, #32
100134e0:	000a      	movs	r2, r1
100134e2:	4658      	mov	r0, fp
100134e4:	1b5b      	subs	r3, r3, r5
100134e6:	4098      	lsls	r0, r3
100134e8:	40ea      	lsrs	r2, r5
100134ea:	4099      	lsls	r1, r3
100134ec:	4302      	orrs	r2, r0
100134ee:	1e48      	subs	r0, r1, #1
100134f0:	4181      	sbcs	r1, r0
100134f2:	465e      	mov	r6, fp
100134f4:	4311      	orrs	r1, r2
100134f6:	40ee      	lsrs	r6, r5
100134f8:	074b      	lsls	r3, r1, #29
100134fa:	d009      	beq.n	10013510 <__aeabi_ddiv+0x558>
100134fc:	230f      	movs	r3, #15
100134fe:	400b      	ands	r3, r1
10013500:	2b04      	cmp	r3, #4
10013502:	d005      	beq.n	10013510 <__aeabi_ddiv+0x558>
10013504:	000b      	movs	r3, r1
10013506:	1d19      	adds	r1, r3, #4
10013508:	4299      	cmp	r1, r3
1001350a:	419b      	sbcs	r3, r3
1001350c:	425b      	negs	r3, r3
1001350e:	18f6      	adds	r6, r6, r3
10013510:	0233      	lsls	r3, r6, #8
10013512:	d53c      	bpl.n	1001358e <__aeabi_ddiv+0x5d6>
10013514:	4653      	mov	r3, sl
10013516:	2201      	movs	r2, #1
10013518:	2100      	movs	r1, #0
1001351a:	401a      	ands	r2, r3
1001351c:	2600      	movs	r6, #0
1001351e:	2301      	movs	r3, #1
10013520:	4689      	mov	r9, r1
10013522:	e5af      	b.n	10013084 <__aeabi_ddiv+0xcc>
10013524:	2302      	movs	r3, #2
10013526:	425b      	negs	r3, r3
10013528:	469c      	mov	ip, r3
1001352a:	9c03      	ldr	r4, [sp, #12]
1001352c:	44e3      	add	fp, ip
1001352e:	46a4      	mov	ip, r4
10013530:	9b02      	ldr	r3, [sp, #8]
10013532:	4463      	add	r3, ip
10013534:	4698      	mov	r8, r3
10013536:	45a0      	cmp	r8, r4
10013538:	41b6      	sbcs	r6, r6
1001353a:	4276      	negs	r6, r6
1001353c:	19f6      	adds	r6, r6, r7
1001353e:	9302      	str	r3, [sp, #8]
10013540:	18b2      	adds	r2, r6, r2
10013542:	e6b1      	b.n	100132a8 <__aeabi_ddiv+0x2f0>
10013544:	9803      	ldr	r0, [sp, #12]
10013546:	1e8a      	subs	r2, r1, #2
10013548:	0041      	lsls	r1, r0, #1
1001354a:	4281      	cmp	r1, r0
1001354c:	41b6      	sbcs	r6, r6
1001354e:	4276      	negs	r6, r6
10013550:	19f6      	adds	r6, r6, r7
10013552:	19ad      	adds	r5, r5, r6
10013554:	9103      	str	r1, [sp, #12]
10013556:	e761      	b.n	1001341c <__aeabi_ddiv+0x464>
10013558:	221f      	movs	r2, #31
1001355a:	4252      	negs	r2, r2
1001355c:	1ad3      	subs	r3, r2, r3
1001355e:	465a      	mov	r2, fp
10013560:	40da      	lsrs	r2, r3
10013562:	0013      	movs	r3, r2
10013564:	2d20      	cmp	r5, #32
10013566:	d029      	beq.n	100135bc <__aeabi_ddiv+0x604>
10013568:	2240      	movs	r2, #64	; 0x40
1001356a:	4658      	mov	r0, fp
1001356c:	1b55      	subs	r5, r2, r5
1001356e:	40a8      	lsls	r0, r5
10013570:	4301      	orrs	r1, r0
10013572:	1e48      	subs	r0, r1, #1
10013574:	4181      	sbcs	r1, r0
10013576:	2007      	movs	r0, #7
10013578:	430b      	orrs	r3, r1
1001357a:	4018      	ands	r0, r3
1001357c:	2600      	movs	r6, #0
1001357e:	2800      	cmp	r0, #0
10013580:	d009      	beq.n	10013596 <__aeabi_ddiv+0x5de>
10013582:	220f      	movs	r2, #15
10013584:	2600      	movs	r6, #0
10013586:	401a      	ands	r2, r3
10013588:	0019      	movs	r1, r3
1001358a:	2a04      	cmp	r2, #4
1001358c:	d1bb      	bne.n	10013506 <__aeabi_ddiv+0x54e>
1001358e:	000b      	movs	r3, r1
10013590:	0770      	lsls	r0, r6, #29
10013592:	0276      	lsls	r6, r6, #9
10013594:	0b36      	lsrs	r6, r6, #12
10013596:	08db      	lsrs	r3, r3, #3
10013598:	4303      	orrs	r3, r0
1001359a:	4699      	mov	r9, r3
1001359c:	2201      	movs	r2, #1
1001359e:	4653      	mov	r3, sl
100135a0:	401a      	ands	r2, r3
100135a2:	2300      	movs	r3, #0
100135a4:	e56e      	b.n	10013084 <__aeabi_ddiv+0xcc>
100135a6:	9902      	ldr	r1, [sp, #8]
100135a8:	428d      	cmp	r5, r1
100135aa:	d8bb      	bhi.n	10013524 <__aeabi_ddiv+0x56c>
100135ac:	469b      	mov	fp, r3
100135ae:	2600      	movs	r6, #0
100135b0:	e67b      	b.n	100132aa <__aeabi_ddiv+0x2f2>
100135b2:	9803      	ldr	r0, [sp, #12]
100135b4:	4298      	cmp	r0, r3
100135b6:	d3c5      	bcc.n	10013544 <__aeabi_ddiv+0x58c>
100135b8:	0011      	movs	r1, r2
100135ba:	e732      	b.n	10013422 <__aeabi_ddiv+0x46a>
100135bc:	2000      	movs	r0, #0
100135be:	e7d7      	b.n	10013570 <__aeabi_ddiv+0x5b8>
100135c0:	2680      	movs	r6, #128	; 0x80
100135c2:	465b      	mov	r3, fp
100135c4:	0336      	lsls	r6, r6, #12
100135c6:	431e      	orrs	r6, r3
100135c8:	0336      	lsls	r6, r6, #12
100135ca:	0b36      	lsrs	r6, r6, #12
100135cc:	9a00      	ldr	r2, [sp, #0]
100135ce:	4689      	mov	r9, r1
100135d0:	4b03      	ldr	r3, [pc, #12]	; (100135e0 <__aeabi_ddiv+0x628>)
100135d2:	e557      	b.n	10013084 <__aeabi_ddiv+0xcc>
100135d4:	000003ff 	.word	0x000003ff
100135d8:	feffffff 	.word	0xfeffffff
100135dc:	000007fe 	.word	0x000007fe
100135e0:	000007ff 	.word	0x000007ff

100135e4 <__eqdf2>:
100135e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100135e6:	465f      	mov	r7, fp
100135e8:	4656      	mov	r6, sl
100135ea:	464d      	mov	r5, r9
100135ec:	4644      	mov	r4, r8
100135ee:	b4f0      	push	{r4, r5, r6, r7}
100135f0:	031f      	lsls	r7, r3, #12
100135f2:	005c      	lsls	r4, r3, #1
100135f4:	0fdb      	lsrs	r3, r3, #31
100135f6:	469a      	mov	sl, r3
100135f8:	4b19      	ldr	r3, [pc, #100]	; (10013660 <__eqdf2+0x7c>)
100135fa:	030e      	lsls	r6, r1, #12
100135fc:	004d      	lsls	r5, r1, #1
100135fe:	0fc9      	lsrs	r1, r1, #31
10013600:	4680      	mov	r8, r0
10013602:	0b36      	lsrs	r6, r6, #12
10013604:	0d6d      	lsrs	r5, r5, #21
10013606:	468b      	mov	fp, r1
10013608:	4691      	mov	r9, r2
1001360a:	0b3f      	lsrs	r7, r7, #12
1001360c:	0d64      	lsrs	r4, r4, #21
1001360e:	429d      	cmp	r5, r3
10013610:	d019      	beq.n	10013646 <__eqdf2+0x62>
10013612:	4b13      	ldr	r3, [pc, #76]	; (10013660 <__eqdf2+0x7c>)
10013614:	429c      	cmp	r4, r3
10013616:	d01b      	beq.n	10013650 <__eqdf2+0x6c>
10013618:	2301      	movs	r3, #1
1001361a:	42a5      	cmp	r5, r4
1001361c:	d006      	beq.n	1001362c <__eqdf2+0x48>
1001361e:	0018      	movs	r0, r3
10013620:	bc3c      	pop	{r2, r3, r4, r5}
10013622:	4690      	mov	r8, r2
10013624:	4699      	mov	r9, r3
10013626:	46a2      	mov	sl, r4
10013628:	46ab      	mov	fp, r5
1001362a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001362c:	42be      	cmp	r6, r7
1001362e:	d1f6      	bne.n	1001361e <__eqdf2+0x3a>
10013630:	45c8      	cmp	r8, r9
10013632:	d1f4      	bne.n	1001361e <__eqdf2+0x3a>
10013634:	45d3      	cmp	fp, sl
10013636:	d010      	beq.n	1001365a <__eqdf2+0x76>
10013638:	2d00      	cmp	r5, #0
1001363a:	d1f0      	bne.n	1001361e <__eqdf2+0x3a>
1001363c:	4330      	orrs	r0, r6
1001363e:	0003      	movs	r3, r0
10013640:	1e5a      	subs	r2, r3, #1
10013642:	4193      	sbcs	r3, r2
10013644:	e7eb      	b.n	1001361e <__eqdf2+0x3a>
10013646:	0031      	movs	r1, r6
10013648:	2301      	movs	r3, #1
1001364a:	4301      	orrs	r1, r0
1001364c:	d1e7      	bne.n	1001361e <__eqdf2+0x3a>
1001364e:	e7e0      	b.n	10013612 <__eqdf2+0x2e>
10013650:	433a      	orrs	r2, r7
10013652:	2301      	movs	r3, #1
10013654:	2a00      	cmp	r2, #0
10013656:	d1e2      	bne.n	1001361e <__eqdf2+0x3a>
10013658:	e7de      	b.n	10013618 <__eqdf2+0x34>
1001365a:	2300      	movs	r3, #0
1001365c:	e7df      	b.n	1001361e <__eqdf2+0x3a>
1001365e:	46c0      	nop			; (mov r8, r8)
10013660:	000007ff 	.word	0x000007ff

10013664 <__gedf2>:
10013664:	b5f0      	push	{r4, r5, r6, r7, lr}
10013666:	465f      	mov	r7, fp
10013668:	4644      	mov	r4, r8
1001366a:	4656      	mov	r6, sl
1001366c:	464d      	mov	r5, r9
1001366e:	b4f0      	push	{r4, r5, r6, r7}
10013670:	031f      	lsls	r7, r3, #12
10013672:	0b3c      	lsrs	r4, r7, #12
10013674:	4f2c      	ldr	r7, [pc, #176]	; (10013728 <__gedf2+0xc4>)
10013676:	030e      	lsls	r6, r1, #12
10013678:	004d      	lsls	r5, r1, #1
1001367a:	46a3      	mov	fp, r4
1001367c:	005c      	lsls	r4, r3, #1
1001367e:	4684      	mov	ip, r0
10013680:	0b36      	lsrs	r6, r6, #12
10013682:	0d6d      	lsrs	r5, r5, #21
10013684:	0fc9      	lsrs	r1, r1, #31
10013686:	4690      	mov	r8, r2
10013688:	0d64      	lsrs	r4, r4, #21
1001368a:	0fdb      	lsrs	r3, r3, #31
1001368c:	42bd      	cmp	r5, r7
1001368e:	d02b      	beq.n	100136e8 <__gedf2+0x84>
10013690:	4f25      	ldr	r7, [pc, #148]	; (10013728 <__gedf2+0xc4>)
10013692:	42bc      	cmp	r4, r7
10013694:	d02e      	beq.n	100136f4 <__gedf2+0x90>
10013696:	2d00      	cmp	r5, #0
10013698:	d10e      	bne.n	100136b8 <__gedf2+0x54>
1001369a:	4330      	orrs	r0, r6
1001369c:	0007      	movs	r7, r0
1001369e:	4681      	mov	r9, r0
100136a0:	4278      	negs	r0, r7
100136a2:	4178      	adcs	r0, r7
100136a4:	2c00      	cmp	r4, #0
100136a6:	d117      	bne.n	100136d8 <__gedf2+0x74>
100136a8:	465f      	mov	r7, fp
100136aa:	433a      	orrs	r2, r7
100136ac:	d114      	bne.n	100136d8 <__gedf2+0x74>
100136ae:	464b      	mov	r3, r9
100136b0:	2000      	movs	r0, #0
100136b2:	2b00      	cmp	r3, #0
100136b4:	d00a      	beq.n	100136cc <__gedf2+0x68>
100136b6:	e006      	b.n	100136c6 <__gedf2+0x62>
100136b8:	2c00      	cmp	r4, #0
100136ba:	d102      	bne.n	100136c2 <__gedf2+0x5e>
100136bc:	4658      	mov	r0, fp
100136be:	4302      	orrs	r2, r0
100136c0:	d001      	beq.n	100136c6 <__gedf2+0x62>
100136c2:	4299      	cmp	r1, r3
100136c4:	d01a      	beq.n	100136fc <__gedf2+0x98>
100136c6:	2301      	movs	r3, #1
100136c8:	4248      	negs	r0, r1
100136ca:	4318      	orrs	r0, r3
100136cc:	bc3c      	pop	{r2, r3, r4, r5}
100136ce:	4690      	mov	r8, r2
100136d0:	4699      	mov	r9, r3
100136d2:	46a2      	mov	sl, r4
100136d4:	46ab      	mov	fp, r5
100136d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100136d8:	2800      	cmp	r0, #0
100136da:	d0f2      	beq.n	100136c2 <__gedf2+0x5e>
100136dc:	4258      	negs	r0, r3
100136de:	4158      	adcs	r0, r3
100136e0:	2201      	movs	r2, #1
100136e2:	4240      	negs	r0, r0
100136e4:	4310      	orrs	r0, r2
100136e6:	e7f1      	b.n	100136cc <__gedf2+0x68>
100136e8:	0037      	movs	r7, r6
100136ea:	4307      	orrs	r7, r0
100136ec:	d0d0      	beq.n	10013690 <__gedf2+0x2c>
100136ee:	2002      	movs	r0, #2
100136f0:	4240      	negs	r0, r0
100136f2:	e7eb      	b.n	100136cc <__gedf2+0x68>
100136f4:	465f      	mov	r7, fp
100136f6:	4317      	orrs	r7, r2
100136f8:	d0cd      	beq.n	10013696 <__gedf2+0x32>
100136fa:	e7f8      	b.n	100136ee <__gedf2+0x8a>
100136fc:	42a5      	cmp	r5, r4
100136fe:	dce2      	bgt.n	100136c6 <__gedf2+0x62>
10013700:	db05      	blt.n	1001370e <__gedf2+0xaa>
10013702:	455e      	cmp	r6, fp
10013704:	d8df      	bhi.n	100136c6 <__gedf2+0x62>
10013706:	d008      	beq.n	1001371a <__gedf2+0xb6>
10013708:	2000      	movs	r0, #0
1001370a:	455e      	cmp	r6, fp
1001370c:	d2de      	bcs.n	100136cc <__gedf2+0x68>
1001370e:	4248      	negs	r0, r1
10013710:	4148      	adcs	r0, r1
10013712:	2301      	movs	r3, #1
10013714:	4240      	negs	r0, r0
10013716:	4318      	orrs	r0, r3
10013718:	e7d8      	b.n	100136cc <__gedf2+0x68>
1001371a:	45c4      	cmp	ip, r8
1001371c:	d8d3      	bhi.n	100136c6 <__gedf2+0x62>
1001371e:	2000      	movs	r0, #0
10013720:	45c4      	cmp	ip, r8
10013722:	d3f4      	bcc.n	1001370e <__gedf2+0xaa>
10013724:	e7d2      	b.n	100136cc <__gedf2+0x68>
10013726:	46c0      	nop			; (mov r8, r8)
10013728:	000007ff 	.word	0x000007ff

1001372c <__ledf2>:
1001372c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001372e:	465f      	mov	r7, fp
10013730:	464d      	mov	r5, r9
10013732:	4644      	mov	r4, r8
10013734:	4656      	mov	r6, sl
10013736:	b4f0      	push	{r4, r5, r6, r7}
10013738:	031c      	lsls	r4, r3, #12
1001373a:	0b24      	lsrs	r4, r4, #12
1001373c:	46a4      	mov	ip, r4
1001373e:	4c2f      	ldr	r4, [pc, #188]	; (100137fc <__ledf2+0xd0>)
10013740:	030f      	lsls	r7, r1, #12
10013742:	004d      	lsls	r5, r1, #1
10013744:	005e      	lsls	r6, r3, #1
10013746:	0fc9      	lsrs	r1, r1, #31
10013748:	4680      	mov	r8, r0
1001374a:	0b3f      	lsrs	r7, r7, #12
1001374c:	0d6d      	lsrs	r5, r5, #21
1001374e:	468b      	mov	fp, r1
10013750:	4691      	mov	r9, r2
10013752:	0d76      	lsrs	r6, r6, #21
10013754:	0fdb      	lsrs	r3, r3, #31
10013756:	42a5      	cmp	r5, r4
10013758:	d020      	beq.n	1001379c <__ledf2+0x70>
1001375a:	4c28      	ldr	r4, [pc, #160]	; (100137fc <__ledf2+0xd0>)
1001375c:	42a6      	cmp	r6, r4
1001375e:	d022      	beq.n	100137a6 <__ledf2+0x7a>
10013760:	2d00      	cmp	r5, #0
10013762:	d112      	bne.n	1001378a <__ledf2+0x5e>
10013764:	4338      	orrs	r0, r7
10013766:	4244      	negs	r4, r0
10013768:	4144      	adcs	r4, r0
1001376a:	2e00      	cmp	r6, #0
1001376c:	d020      	beq.n	100137b0 <__ledf2+0x84>
1001376e:	2c00      	cmp	r4, #0
10013770:	d00d      	beq.n	1001378e <__ledf2+0x62>
10013772:	425c      	negs	r4, r3
10013774:	4163      	adcs	r3, r4
10013776:	2401      	movs	r4, #1
10013778:	425b      	negs	r3, r3
1001377a:	431c      	orrs	r4, r3
1001377c:	0020      	movs	r0, r4
1001377e:	bc3c      	pop	{r2, r3, r4, r5}
10013780:	4690      	mov	r8, r2
10013782:	4699      	mov	r9, r3
10013784:	46a2      	mov	sl, r4
10013786:	46ab      	mov	fp, r5
10013788:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001378a:	2e00      	cmp	r6, #0
1001378c:	d017      	beq.n	100137be <__ledf2+0x92>
1001378e:	455b      	cmp	r3, fp
10013790:	d019      	beq.n	100137c6 <__ledf2+0x9a>
10013792:	465b      	mov	r3, fp
10013794:	425c      	negs	r4, r3
10013796:	2301      	movs	r3, #1
10013798:	431c      	orrs	r4, r3
1001379a:	e7ef      	b.n	1001377c <__ledf2+0x50>
1001379c:	0039      	movs	r1, r7
1001379e:	2402      	movs	r4, #2
100137a0:	4301      	orrs	r1, r0
100137a2:	d1eb      	bne.n	1001377c <__ledf2+0x50>
100137a4:	e7d9      	b.n	1001375a <__ledf2+0x2e>
100137a6:	4661      	mov	r1, ip
100137a8:	2402      	movs	r4, #2
100137aa:	4311      	orrs	r1, r2
100137ac:	d1e6      	bne.n	1001377c <__ledf2+0x50>
100137ae:	e7d7      	b.n	10013760 <__ledf2+0x34>
100137b0:	4661      	mov	r1, ip
100137b2:	430a      	orrs	r2, r1
100137b4:	d1db      	bne.n	1001376e <__ledf2+0x42>
100137b6:	2400      	movs	r4, #0
100137b8:	2800      	cmp	r0, #0
100137ba:	d0df      	beq.n	1001377c <__ledf2+0x50>
100137bc:	e7e9      	b.n	10013792 <__ledf2+0x66>
100137be:	4661      	mov	r1, ip
100137c0:	430a      	orrs	r2, r1
100137c2:	d1e4      	bne.n	1001378e <__ledf2+0x62>
100137c4:	e7e5      	b.n	10013792 <__ledf2+0x66>
100137c6:	42b5      	cmp	r5, r6
100137c8:	dd03      	ble.n	100137d2 <__ledf2+0xa6>
100137ca:	2201      	movs	r2, #1
100137cc:	425c      	negs	r4, r3
100137ce:	4314      	orrs	r4, r2
100137d0:	e7d4      	b.n	1001377c <__ledf2+0x50>
100137d2:	42b5      	cmp	r5, r6
100137d4:	dbcd      	blt.n	10013772 <__ledf2+0x46>
100137d6:	4567      	cmp	r7, ip
100137d8:	d8db      	bhi.n	10013792 <__ledf2+0x66>
100137da:	d009      	beq.n	100137f0 <__ledf2+0xc4>
100137dc:	2400      	movs	r4, #0
100137de:	4567      	cmp	r7, ip
100137e0:	d2cc      	bcs.n	1001377c <__ledf2+0x50>
100137e2:	4659      	mov	r1, fp
100137e4:	424c      	negs	r4, r1
100137e6:	4161      	adcs	r1, r4
100137e8:	2401      	movs	r4, #1
100137ea:	4249      	negs	r1, r1
100137ec:	430c      	orrs	r4, r1
100137ee:	e7c5      	b.n	1001377c <__ledf2+0x50>
100137f0:	45c8      	cmp	r8, r9
100137f2:	d8ce      	bhi.n	10013792 <__ledf2+0x66>
100137f4:	2400      	movs	r4, #0
100137f6:	45c8      	cmp	r8, r9
100137f8:	d3f3      	bcc.n	100137e2 <__ledf2+0xb6>
100137fa:	e7bf      	b.n	1001377c <__ledf2+0x50>
100137fc:	000007ff 	.word	0x000007ff

10013800 <__aeabi_dmul>:
10013800:	b5f0      	push	{r4, r5, r6, r7, lr}
10013802:	465f      	mov	r7, fp
10013804:	4656      	mov	r6, sl
10013806:	464d      	mov	r5, r9
10013808:	4644      	mov	r4, r8
1001380a:	b4f0      	push	{r4, r5, r6, r7}
1001380c:	030d      	lsls	r5, r1, #12
1001380e:	4699      	mov	r9, r3
10013810:	004e      	lsls	r6, r1, #1
10013812:	0b2b      	lsrs	r3, r5, #12
10013814:	b087      	sub	sp, #28
10013816:	0007      	movs	r7, r0
10013818:	4692      	mov	sl, r2
1001381a:	4680      	mov	r8, r0
1001381c:	469b      	mov	fp, r3
1001381e:	0d76      	lsrs	r6, r6, #21
10013820:	0fcc      	lsrs	r4, r1, #31
10013822:	2e00      	cmp	r6, #0
10013824:	d069      	beq.n	100138fa <__aeabi_dmul+0xfa>
10013826:	4b6d      	ldr	r3, [pc, #436]	; (100139dc <__aeabi_dmul+0x1dc>)
10013828:	429e      	cmp	r6, r3
1001382a:	d035      	beq.n	10013898 <__aeabi_dmul+0x98>
1001382c:	465b      	mov	r3, fp
1001382e:	2280      	movs	r2, #128	; 0x80
10013830:	00dd      	lsls	r5, r3, #3
10013832:	0412      	lsls	r2, r2, #16
10013834:	0f43      	lsrs	r3, r0, #29
10013836:	4313      	orrs	r3, r2
10013838:	432b      	orrs	r3, r5
1001383a:	469b      	mov	fp, r3
1001383c:	00c3      	lsls	r3, r0, #3
1001383e:	4698      	mov	r8, r3
10013840:	4b67      	ldr	r3, [pc, #412]	; (100139e0 <__aeabi_dmul+0x1e0>)
10013842:	2700      	movs	r7, #0
10013844:	469c      	mov	ip, r3
10013846:	2300      	movs	r3, #0
10013848:	4466      	add	r6, ip
1001384a:	9301      	str	r3, [sp, #4]
1001384c:	464a      	mov	r2, r9
1001384e:	0315      	lsls	r5, r2, #12
10013850:	0050      	lsls	r0, r2, #1
10013852:	0fd2      	lsrs	r2, r2, #31
10013854:	4653      	mov	r3, sl
10013856:	0b2d      	lsrs	r5, r5, #12
10013858:	0d40      	lsrs	r0, r0, #21
1001385a:	4691      	mov	r9, r2
1001385c:	d100      	bne.n	10013860 <__aeabi_dmul+0x60>
1001385e:	e076      	b.n	1001394e <__aeabi_dmul+0x14e>
10013860:	4a5e      	ldr	r2, [pc, #376]	; (100139dc <__aeabi_dmul+0x1dc>)
10013862:	4290      	cmp	r0, r2
10013864:	d06c      	beq.n	10013940 <__aeabi_dmul+0x140>
10013866:	2280      	movs	r2, #128	; 0x80
10013868:	0f5b      	lsrs	r3, r3, #29
1001386a:	0412      	lsls	r2, r2, #16
1001386c:	4313      	orrs	r3, r2
1001386e:	4a5c      	ldr	r2, [pc, #368]	; (100139e0 <__aeabi_dmul+0x1e0>)
10013870:	00ed      	lsls	r5, r5, #3
10013872:	4694      	mov	ip, r2
10013874:	431d      	orrs	r5, r3
10013876:	4653      	mov	r3, sl
10013878:	2200      	movs	r2, #0
1001387a:	00db      	lsls	r3, r3, #3
1001387c:	4460      	add	r0, ip
1001387e:	4649      	mov	r1, r9
10013880:	1836      	adds	r6, r6, r0
10013882:	1c70      	adds	r0, r6, #1
10013884:	4061      	eors	r1, r4
10013886:	9002      	str	r0, [sp, #8]
10013888:	4317      	orrs	r7, r2
1001388a:	2f0f      	cmp	r7, #15
1001388c:	d900      	bls.n	10013890 <__aeabi_dmul+0x90>
1001388e:	e0af      	b.n	100139f0 <__aeabi_dmul+0x1f0>
10013890:	4854      	ldr	r0, [pc, #336]	; (100139e4 <__aeabi_dmul+0x1e4>)
10013892:	00bf      	lsls	r7, r7, #2
10013894:	59c7      	ldr	r7, [r0, r7]
10013896:	46bf      	mov	pc, r7
10013898:	465b      	mov	r3, fp
1001389a:	431f      	orrs	r7, r3
1001389c:	d000      	beq.n	100138a0 <__aeabi_dmul+0xa0>
1001389e:	e088      	b.n	100139b2 <__aeabi_dmul+0x1b2>
100138a0:	2300      	movs	r3, #0
100138a2:	469b      	mov	fp, r3
100138a4:	4698      	mov	r8, r3
100138a6:	3302      	adds	r3, #2
100138a8:	2708      	movs	r7, #8
100138aa:	9301      	str	r3, [sp, #4]
100138ac:	e7ce      	b.n	1001384c <__aeabi_dmul+0x4c>
100138ae:	4649      	mov	r1, r9
100138b0:	2a02      	cmp	r2, #2
100138b2:	d06a      	beq.n	1001398a <__aeabi_dmul+0x18a>
100138b4:	2a03      	cmp	r2, #3
100138b6:	d100      	bne.n	100138ba <__aeabi_dmul+0xba>
100138b8:	e209      	b.n	10013cce <__aeabi_dmul+0x4ce>
100138ba:	2a01      	cmp	r2, #1
100138bc:	d000      	beq.n	100138c0 <__aeabi_dmul+0xc0>
100138be:	e1bb      	b.n	10013c38 <__aeabi_dmul+0x438>
100138c0:	4011      	ands	r1, r2
100138c2:	2200      	movs	r2, #0
100138c4:	2300      	movs	r3, #0
100138c6:	2500      	movs	r5, #0
100138c8:	4690      	mov	r8, r2
100138ca:	b2cc      	uxtb	r4, r1
100138cc:	2100      	movs	r1, #0
100138ce:	032d      	lsls	r5, r5, #12
100138d0:	0d0a      	lsrs	r2, r1, #20
100138d2:	0512      	lsls	r2, r2, #20
100138d4:	0b2d      	lsrs	r5, r5, #12
100138d6:	4315      	orrs	r5, r2
100138d8:	4a43      	ldr	r2, [pc, #268]	; (100139e8 <__aeabi_dmul+0x1e8>)
100138da:	051b      	lsls	r3, r3, #20
100138dc:	4015      	ands	r5, r2
100138de:	431d      	orrs	r5, r3
100138e0:	006d      	lsls	r5, r5, #1
100138e2:	07e4      	lsls	r4, r4, #31
100138e4:	086d      	lsrs	r5, r5, #1
100138e6:	4325      	orrs	r5, r4
100138e8:	4640      	mov	r0, r8
100138ea:	0029      	movs	r1, r5
100138ec:	b007      	add	sp, #28
100138ee:	bc3c      	pop	{r2, r3, r4, r5}
100138f0:	4690      	mov	r8, r2
100138f2:	4699      	mov	r9, r3
100138f4:	46a2      	mov	sl, r4
100138f6:	46ab      	mov	fp, r5
100138f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100138fa:	4303      	orrs	r3, r0
100138fc:	d052      	beq.n	100139a4 <__aeabi_dmul+0x1a4>
100138fe:	465b      	mov	r3, fp
10013900:	2b00      	cmp	r3, #0
10013902:	d100      	bne.n	10013906 <__aeabi_dmul+0x106>
10013904:	e18a      	b.n	10013c1c <__aeabi_dmul+0x41c>
10013906:	4658      	mov	r0, fp
10013908:	f000 fef8 	bl	100146fc <__clzsi2>
1001390c:	0003      	movs	r3, r0
1001390e:	3b0b      	subs	r3, #11
10013910:	2b1c      	cmp	r3, #28
10013912:	dd00      	ble.n	10013916 <__aeabi_dmul+0x116>
10013914:	e17b      	b.n	10013c0e <__aeabi_dmul+0x40e>
10013916:	221d      	movs	r2, #29
10013918:	1ad3      	subs	r3, r2, r3
1001391a:	003a      	movs	r2, r7
1001391c:	0001      	movs	r1, r0
1001391e:	465d      	mov	r5, fp
10013920:	40da      	lsrs	r2, r3
10013922:	3908      	subs	r1, #8
10013924:	408d      	lsls	r5, r1
10013926:	0013      	movs	r3, r2
10013928:	408f      	lsls	r7, r1
1001392a:	432b      	orrs	r3, r5
1001392c:	469b      	mov	fp, r3
1001392e:	46b8      	mov	r8, r7
10013930:	4b2e      	ldr	r3, [pc, #184]	; (100139ec <__aeabi_dmul+0x1ec>)
10013932:	2700      	movs	r7, #0
10013934:	469c      	mov	ip, r3
10013936:	2300      	movs	r3, #0
10013938:	4460      	add	r0, ip
1001393a:	4246      	negs	r6, r0
1001393c:	9301      	str	r3, [sp, #4]
1001393e:	e785      	b.n	1001384c <__aeabi_dmul+0x4c>
10013940:	4652      	mov	r2, sl
10013942:	432a      	orrs	r2, r5
10013944:	d12c      	bne.n	100139a0 <__aeabi_dmul+0x1a0>
10013946:	2500      	movs	r5, #0
10013948:	2300      	movs	r3, #0
1001394a:	2202      	movs	r2, #2
1001394c:	e797      	b.n	1001387e <__aeabi_dmul+0x7e>
1001394e:	4652      	mov	r2, sl
10013950:	432a      	orrs	r2, r5
10013952:	d021      	beq.n	10013998 <__aeabi_dmul+0x198>
10013954:	2d00      	cmp	r5, #0
10013956:	d100      	bne.n	1001395a <__aeabi_dmul+0x15a>
10013958:	e154      	b.n	10013c04 <__aeabi_dmul+0x404>
1001395a:	0028      	movs	r0, r5
1001395c:	f000 fece 	bl	100146fc <__clzsi2>
10013960:	0003      	movs	r3, r0
10013962:	3b0b      	subs	r3, #11
10013964:	2b1c      	cmp	r3, #28
10013966:	dd00      	ble.n	1001396a <__aeabi_dmul+0x16a>
10013968:	e146      	b.n	10013bf8 <__aeabi_dmul+0x3f8>
1001396a:	211d      	movs	r1, #29
1001396c:	1acb      	subs	r3, r1, r3
1001396e:	4651      	mov	r1, sl
10013970:	0002      	movs	r2, r0
10013972:	40d9      	lsrs	r1, r3
10013974:	4653      	mov	r3, sl
10013976:	3a08      	subs	r2, #8
10013978:	4095      	lsls	r5, r2
1001397a:	4093      	lsls	r3, r2
1001397c:	430d      	orrs	r5, r1
1001397e:	4a1b      	ldr	r2, [pc, #108]	; (100139ec <__aeabi_dmul+0x1ec>)
10013980:	4694      	mov	ip, r2
10013982:	4460      	add	r0, ip
10013984:	4240      	negs	r0, r0
10013986:	2200      	movs	r2, #0
10013988:	e779      	b.n	1001387e <__aeabi_dmul+0x7e>
1001398a:	2401      	movs	r4, #1
1001398c:	2200      	movs	r2, #0
1001398e:	400c      	ands	r4, r1
10013990:	4b12      	ldr	r3, [pc, #72]	; (100139dc <__aeabi_dmul+0x1dc>)
10013992:	2500      	movs	r5, #0
10013994:	4690      	mov	r8, r2
10013996:	e799      	b.n	100138cc <__aeabi_dmul+0xcc>
10013998:	2500      	movs	r5, #0
1001399a:	2300      	movs	r3, #0
1001399c:	2201      	movs	r2, #1
1001399e:	e76e      	b.n	1001387e <__aeabi_dmul+0x7e>
100139a0:	2203      	movs	r2, #3
100139a2:	e76c      	b.n	1001387e <__aeabi_dmul+0x7e>
100139a4:	2300      	movs	r3, #0
100139a6:	469b      	mov	fp, r3
100139a8:	4698      	mov	r8, r3
100139aa:	3301      	adds	r3, #1
100139ac:	2704      	movs	r7, #4
100139ae:	9301      	str	r3, [sp, #4]
100139b0:	e74c      	b.n	1001384c <__aeabi_dmul+0x4c>
100139b2:	2303      	movs	r3, #3
100139b4:	270c      	movs	r7, #12
100139b6:	9301      	str	r3, [sp, #4]
100139b8:	e748      	b.n	1001384c <__aeabi_dmul+0x4c>
100139ba:	2300      	movs	r3, #0
100139bc:	2580      	movs	r5, #128	; 0x80
100139be:	4698      	mov	r8, r3
100139c0:	2400      	movs	r4, #0
100139c2:	032d      	lsls	r5, r5, #12
100139c4:	4b05      	ldr	r3, [pc, #20]	; (100139dc <__aeabi_dmul+0x1dc>)
100139c6:	e781      	b.n	100138cc <__aeabi_dmul+0xcc>
100139c8:	465d      	mov	r5, fp
100139ca:	4643      	mov	r3, r8
100139cc:	9a01      	ldr	r2, [sp, #4]
100139ce:	e76f      	b.n	100138b0 <__aeabi_dmul+0xb0>
100139d0:	465d      	mov	r5, fp
100139d2:	4643      	mov	r3, r8
100139d4:	0021      	movs	r1, r4
100139d6:	9a01      	ldr	r2, [sp, #4]
100139d8:	e76a      	b.n	100138b0 <__aeabi_dmul+0xb0>
100139da:	46c0      	nop			; (mov r8, r8)
100139dc:	000007ff 	.word	0x000007ff
100139e0:	fffffc01 	.word	0xfffffc01
100139e4:	10017290 	.word	0x10017290
100139e8:	800fffff 	.word	0x800fffff
100139ec:	000003f3 	.word	0x000003f3
100139f0:	4642      	mov	r2, r8
100139f2:	0c12      	lsrs	r2, r2, #16
100139f4:	4691      	mov	r9, r2
100139f6:	0c1a      	lsrs	r2, r3, #16
100139f8:	4694      	mov	ip, r2
100139fa:	4642      	mov	r2, r8
100139fc:	0417      	lsls	r7, r2, #16
100139fe:	464a      	mov	r2, r9
10013a00:	041b      	lsls	r3, r3, #16
10013a02:	0c1b      	lsrs	r3, r3, #16
10013a04:	435a      	muls	r2, r3
10013a06:	4660      	mov	r0, ip
10013a08:	4690      	mov	r8, r2
10013a0a:	464a      	mov	r2, r9
10013a0c:	4342      	muls	r2, r0
10013a0e:	0010      	movs	r0, r2
10013a10:	9203      	str	r2, [sp, #12]
10013a12:	4662      	mov	r2, ip
10013a14:	001c      	movs	r4, r3
10013a16:	0c3f      	lsrs	r7, r7, #16
10013a18:	437a      	muls	r2, r7
10013a1a:	437c      	muls	r4, r7
10013a1c:	4442      	add	r2, r8
10013a1e:	9201      	str	r2, [sp, #4]
10013a20:	0c22      	lsrs	r2, r4, #16
10013a22:	4692      	mov	sl, r2
10013a24:	9a01      	ldr	r2, [sp, #4]
10013a26:	4452      	add	r2, sl
10013a28:	4590      	cmp	r8, r2
10013a2a:	d906      	bls.n	10013a3a <__aeabi_dmul+0x23a>
10013a2c:	4682      	mov	sl, r0
10013a2e:	2080      	movs	r0, #128	; 0x80
10013a30:	0240      	lsls	r0, r0, #9
10013a32:	4680      	mov	r8, r0
10013a34:	44c2      	add	sl, r8
10013a36:	4650      	mov	r0, sl
10013a38:	9003      	str	r0, [sp, #12]
10013a3a:	0c10      	lsrs	r0, r2, #16
10013a3c:	9004      	str	r0, [sp, #16]
10013a3e:	4648      	mov	r0, r9
10013a40:	0424      	lsls	r4, r4, #16
10013a42:	0c24      	lsrs	r4, r4, #16
10013a44:	0412      	lsls	r2, r2, #16
10013a46:	1912      	adds	r2, r2, r4
10013a48:	9205      	str	r2, [sp, #20]
10013a4a:	0c2a      	lsrs	r2, r5, #16
10013a4c:	042d      	lsls	r5, r5, #16
10013a4e:	0c2d      	lsrs	r5, r5, #16
10013a50:	4368      	muls	r0, r5
10013a52:	002c      	movs	r4, r5
10013a54:	4682      	mov	sl, r0
10013a56:	4648      	mov	r0, r9
10013a58:	437c      	muls	r4, r7
10013a5a:	4350      	muls	r0, r2
10013a5c:	4681      	mov	r9, r0
10013a5e:	0c20      	lsrs	r0, r4, #16
10013a60:	4680      	mov	r8, r0
10013a62:	4357      	muls	r7, r2
10013a64:	4457      	add	r7, sl
10013a66:	4447      	add	r7, r8
10013a68:	45ba      	cmp	sl, r7
10013a6a:	d903      	bls.n	10013a74 <__aeabi_dmul+0x274>
10013a6c:	2080      	movs	r0, #128	; 0x80
10013a6e:	0240      	lsls	r0, r0, #9
10013a70:	4680      	mov	r8, r0
10013a72:	44c1      	add	r9, r8
10013a74:	0c38      	lsrs	r0, r7, #16
10013a76:	043f      	lsls	r7, r7, #16
10013a78:	46b8      	mov	r8, r7
10013a7a:	4448      	add	r0, r9
10013a7c:	0424      	lsls	r4, r4, #16
10013a7e:	0c24      	lsrs	r4, r4, #16
10013a80:	9001      	str	r0, [sp, #4]
10013a82:	9804      	ldr	r0, [sp, #16]
10013a84:	44a0      	add	r8, r4
10013a86:	4440      	add	r0, r8
10013a88:	9004      	str	r0, [sp, #16]
10013a8a:	4658      	mov	r0, fp
10013a8c:	0c00      	lsrs	r0, r0, #16
10013a8e:	4681      	mov	r9, r0
10013a90:	4658      	mov	r0, fp
10013a92:	0404      	lsls	r4, r0, #16
10013a94:	0c20      	lsrs	r0, r4, #16
10013a96:	4682      	mov	sl, r0
10013a98:	0007      	movs	r7, r0
10013a9a:	4648      	mov	r0, r9
10013a9c:	435f      	muls	r7, r3
10013a9e:	464c      	mov	r4, r9
10013aa0:	4343      	muls	r3, r0
10013aa2:	4660      	mov	r0, ip
10013aa4:	4360      	muls	r0, r4
10013aa6:	4664      	mov	r4, ip
10013aa8:	4683      	mov	fp, r0
10013aaa:	4650      	mov	r0, sl
10013aac:	4344      	muls	r4, r0
10013aae:	0c38      	lsrs	r0, r7, #16
10013ab0:	4684      	mov	ip, r0
10013ab2:	18e4      	adds	r4, r4, r3
10013ab4:	4464      	add	r4, ip
10013ab6:	42a3      	cmp	r3, r4
10013ab8:	d903      	bls.n	10013ac2 <__aeabi_dmul+0x2c2>
10013aba:	2380      	movs	r3, #128	; 0x80
10013abc:	025b      	lsls	r3, r3, #9
10013abe:	469c      	mov	ip, r3
10013ac0:	44e3      	add	fp, ip
10013ac2:	4648      	mov	r0, r9
10013ac4:	043f      	lsls	r7, r7, #16
10013ac6:	0c23      	lsrs	r3, r4, #16
10013ac8:	0c3f      	lsrs	r7, r7, #16
10013aca:	0424      	lsls	r4, r4, #16
10013acc:	19e4      	adds	r4, r4, r7
10013ace:	4657      	mov	r7, sl
10013ad0:	4368      	muls	r0, r5
10013ad2:	436f      	muls	r7, r5
10013ad4:	4684      	mov	ip, r0
10013ad6:	464d      	mov	r5, r9
10013ad8:	4650      	mov	r0, sl
10013ada:	4355      	muls	r5, r2
10013adc:	4342      	muls	r2, r0
10013ade:	0c38      	lsrs	r0, r7, #16
10013ae0:	4681      	mov	r9, r0
10013ae2:	4462      	add	r2, ip
10013ae4:	444a      	add	r2, r9
10013ae6:	445b      	add	r3, fp
10013ae8:	4594      	cmp	ip, r2
10013aea:	d903      	bls.n	10013af4 <__aeabi_dmul+0x2f4>
10013aec:	2080      	movs	r0, #128	; 0x80
10013aee:	0240      	lsls	r0, r0, #9
10013af0:	4684      	mov	ip, r0
10013af2:	4465      	add	r5, ip
10013af4:	9803      	ldr	r0, [sp, #12]
10013af6:	043f      	lsls	r7, r7, #16
10013af8:	4683      	mov	fp, r0
10013afa:	9804      	ldr	r0, [sp, #16]
10013afc:	0c3f      	lsrs	r7, r7, #16
10013afe:	4684      	mov	ip, r0
10013b00:	44e3      	add	fp, ip
10013b02:	45c3      	cmp	fp, r8
10013b04:	4180      	sbcs	r0, r0
10013b06:	4240      	negs	r0, r0
10013b08:	4682      	mov	sl, r0
10013b0a:	0410      	lsls	r0, r2, #16
10013b0c:	4684      	mov	ip, r0
10013b0e:	9801      	ldr	r0, [sp, #4]
10013b10:	4467      	add	r7, ip
10013b12:	4684      	mov	ip, r0
10013b14:	4467      	add	r7, ip
10013b16:	44a3      	add	fp, r4
10013b18:	46bc      	mov	ip, r7
10013b1a:	45a3      	cmp	fp, r4
10013b1c:	41a4      	sbcs	r4, r4
10013b1e:	4699      	mov	r9, r3
10013b20:	44d4      	add	ip, sl
10013b22:	4264      	negs	r4, r4
10013b24:	4287      	cmp	r7, r0
10013b26:	41bf      	sbcs	r7, r7
10013b28:	45d4      	cmp	ip, sl
10013b2a:	4180      	sbcs	r0, r0
10013b2c:	44e1      	add	r9, ip
10013b2e:	46a0      	mov	r8, r4
10013b30:	4599      	cmp	r9, r3
10013b32:	419b      	sbcs	r3, r3
10013b34:	427f      	negs	r7, r7
10013b36:	4240      	negs	r0, r0
10013b38:	44c8      	add	r8, r9
10013b3a:	4307      	orrs	r7, r0
10013b3c:	0c12      	lsrs	r2, r2, #16
10013b3e:	18ba      	adds	r2, r7, r2
10013b40:	45a0      	cmp	r8, r4
10013b42:	41a4      	sbcs	r4, r4
10013b44:	425f      	negs	r7, r3
10013b46:	003b      	movs	r3, r7
10013b48:	4264      	negs	r4, r4
10013b4a:	4323      	orrs	r3, r4
10013b4c:	18d7      	adds	r7, r2, r3
10013b4e:	4643      	mov	r3, r8
10013b50:	197d      	adds	r5, r7, r5
10013b52:	0ddb      	lsrs	r3, r3, #23
10013b54:	026d      	lsls	r5, r5, #9
10013b56:	431d      	orrs	r5, r3
10013b58:	465b      	mov	r3, fp
10013b5a:	025a      	lsls	r2, r3, #9
10013b5c:	9b05      	ldr	r3, [sp, #20]
10013b5e:	431a      	orrs	r2, r3
10013b60:	1e53      	subs	r3, r2, #1
10013b62:	419a      	sbcs	r2, r3
10013b64:	465b      	mov	r3, fp
10013b66:	0ddb      	lsrs	r3, r3, #23
10013b68:	431a      	orrs	r2, r3
10013b6a:	4643      	mov	r3, r8
10013b6c:	025b      	lsls	r3, r3, #9
10013b6e:	4313      	orrs	r3, r2
10013b70:	01ea      	lsls	r2, r5, #7
10013b72:	d507      	bpl.n	10013b84 <__aeabi_dmul+0x384>
10013b74:	2201      	movs	r2, #1
10013b76:	085c      	lsrs	r4, r3, #1
10013b78:	4013      	ands	r3, r2
10013b7a:	4323      	orrs	r3, r4
10013b7c:	07ea      	lsls	r2, r5, #31
10013b7e:	9e02      	ldr	r6, [sp, #8]
10013b80:	4313      	orrs	r3, r2
10013b82:	086d      	lsrs	r5, r5, #1
10013b84:	4a57      	ldr	r2, [pc, #348]	; (10013ce4 <__aeabi_dmul+0x4e4>)
10013b86:	18b2      	adds	r2, r6, r2
10013b88:	2a00      	cmp	r2, #0
10013b8a:	dd4b      	ble.n	10013c24 <__aeabi_dmul+0x424>
10013b8c:	0758      	lsls	r0, r3, #29
10013b8e:	d009      	beq.n	10013ba4 <__aeabi_dmul+0x3a4>
10013b90:	200f      	movs	r0, #15
10013b92:	4018      	ands	r0, r3
10013b94:	2804      	cmp	r0, #4
10013b96:	d005      	beq.n	10013ba4 <__aeabi_dmul+0x3a4>
10013b98:	1d18      	adds	r0, r3, #4
10013b9a:	4298      	cmp	r0, r3
10013b9c:	419b      	sbcs	r3, r3
10013b9e:	425b      	negs	r3, r3
10013ba0:	18ed      	adds	r5, r5, r3
10013ba2:	0003      	movs	r3, r0
10013ba4:	01e8      	lsls	r0, r5, #7
10013ba6:	d504      	bpl.n	10013bb2 <__aeabi_dmul+0x3b2>
10013ba8:	4a4f      	ldr	r2, [pc, #316]	; (10013ce8 <__aeabi_dmul+0x4e8>)
10013baa:	4015      	ands	r5, r2
10013bac:	2280      	movs	r2, #128	; 0x80
10013bae:	00d2      	lsls	r2, r2, #3
10013bb0:	18b2      	adds	r2, r6, r2
10013bb2:	484e      	ldr	r0, [pc, #312]	; (10013cec <__aeabi_dmul+0x4ec>)
10013bb4:	4282      	cmp	r2, r0
10013bb6:	dd00      	ble.n	10013bba <__aeabi_dmul+0x3ba>
10013bb8:	e6e7      	b.n	1001398a <__aeabi_dmul+0x18a>
10013bba:	2401      	movs	r4, #1
10013bbc:	08db      	lsrs	r3, r3, #3
10013bbe:	0768      	lsls	r0, r5, #29
10013bc0:	4318      	orrs	r0, r3
10013bc2:	026d      	lsls	r5, r5, #9
10013bc4:	0553      	lsls	r3, r2, #21
10013bc6:	4680      	mov	r8, r0
10013bc8:	0b2d      	lsrs	r5, r5, #12
10013bca:	0d5b      	lsrs	r3, r3, #21
10013bcc:	400c      	ands	r4, r1
10013bce:	e67d      	b.n	100138cc <__aeabi_dmul+0xcc>
10013bd0:	2280      	movs	r2, #128	; 0x80
10013bd2:	4659      	mov	r1, fp
10013bd4:	0312      	lsls	r2, r2, #12
10013bd6:	4211      	tst	r1, r2
10013bd8:	d008      	beq.n	10013bec <__aeabi_dmul+0x3ec>
10013bda:	4215      	tst	r5, r2
10013bdc:	d106      	bne.n	10013bec <__aeabi_dmul+0x3ec>
10013bde:	4315      	orrs	r5, r2
10013be0:	032d      	lsls	r5, r5, #12
10013be2:	4698      	mov	r8, r3
10013be4:	0b2d      	lsrs	r5, r5, #12
10013be6:	464c      	mov	r4, r9
10013be8:	4b41      	ldr	r3, [pc, #260]	; (10013cf0 <__aeabi_dmul+0x4f0>)
10013bea:	e66f      	b.n	100138cc <__aeabi_dmul+0xcc>
10013bec:	465d      	mov	r5, fp
10013bee:	4315      	orrs	r5, r2
10013bf0:	032d      	lsls	r5, r5, #12
10013bf2:	0b2d      	lsrs	r5, r5, #12
10013bf4:	4b3e      	ldr	r3, [pc, #248]	; (10013cf0 <__aeabi_dmul+0x4f0>)
10013bf6:	e669      	b.n	100138cc <__aeabi_dmul+0xcc>
10013bf8:	0003      	movs	r3, r0
10013bfa:	4655      	mov	r5, sl
10013bfc:	3b28      	subs	r3, #40	; 0x28
10013bfe:	409d      	lsls	r5, r3
10013c00:	2300      	movs	r3, #0
10013c02:	e6bc      	b.n	1001397e <__aeabi_dmul+0x17e>
10013c04:	4650      	mov	r0, sl
10013c06:	f000 fd79 	bl	100146fc <__clzsi2>
10013c0a:	3020      	adds	r0, #32
10013c0c:	e6a8      	b.n	10013960 <__aeabi_dmul+0x160>
10013c0e:	0003      	movs	r3, r0
10013c10:	3b28      	subs	r3, #40	; 0x28
10013c12:	409f      	lsls	r7, r3
10013c14:	2300      	movs	r3, #0
10013c16:	46bb      	mov	fp, r7
10013c18:	4698      	mov	r8, r3
10013c1a:	e689      	b.n	10013930 <__aeabi_dmul+0x130>
10013c1c:	f000 fd6e 	bl	100146fc <__clzsi2>
10013c20:	3020      	adds	r0, #32
10013c22:	e673      	b.n	1001390c <__aeabi_dmul+0x10c>
10013c24:	2401      	movs	r4, #1
10013c26:	1aa6      	subs	r6, r4, r2
10013c28:	2e38      	cmp	r6, #56	; 0x38
10013c2a:	dd07      	ble.n	10013c3c <__aeabi_dmul+0x43c>
10013c2c:	2200      	movs	r2, #0
10013c2e:	400c      	ands	r4, r1
10013c30:	2300      	movs	r3, #0
10013c32:	2500      	movs	r5, #0
10013c34:	4690      	mov	r8, r2
10013c36:	e649      	b.n	100138cc <__aeabi_dmul+0xcc>
10013c38:	9e02      	ldr	r6, [sp, #8]
10013c3a:	e7a3      	b.n	10013b84 <__aeabi_dmul+0x384>
10013c3c:	2e1f      	cmp	r6, #31
10013c3e:	dc20      	bgt.n	10013c82 <__aeabi_dmul+0x482>
10013c40:	2220      	movs	r2, #32
10013c42:	002c      	movs	r4, r5
10013c44:	0018      	movs	r0, r3
10013c46:	1b92      	subs	r2, r2, r6
10013c48:	40f0      	lsrs	r0, r6
10013c4a:	4094      	lsls	r4, r2
10013c4c:	4093      	lsls	r3, r2
10013c4e:	4304      	orrs	r4, r0
10013c50:	1e58      	subs	r0, r3, #1
10013c52:	4183      	sbcs	r3, r0
10013c54:	431c      	orrs	r4, r3
10013c56:	40f5      	lsrs	r5, r6
10013c58:	0763      	lsls	r3, r4, #29
10013c5a:	d009      	beq.n	10013c70 <__aeabi_dmul+0x470>
10013c5c:	230f      	movs	r3, #15
10013c5e:	4023      	ands	r3, r4
10013c60:	2b04      	cmp	r3, #4
10013c62:	d005      	beq.n	10013c70 <__aeabi_dmul+0x470>
10013c64:	0023      	movs	r3, r4
10013c66:	1d1c      	adds	r4, r3, #4
10013c68:	429c      	cmp	r4, r3
10013c6a:	4192      	sbcs	r2, r2
10013c6c:	4252      	negs	r2, r2
10013c6e:	18ad      	adds	r5, r5, r2
10013c70:	022b      	lsls	r3, r5, #8
10013c72:	d51f      	bpl.n	10013cb4 <__aeabi_dmul+0x4b4>
10013c74:	2401      	movs	r4, #1
10013c76:	2200      	movs	r2, #0
10013c78:	400c      	ands	r4, r1
10013c7a:	2301      	movs	r3, #1
10013c7c:	2500      	movs	r5, #0
10013c7e:	4690      	mov	r8, r2
10013c80:	e624      	b.n	100138cc <__aeabi_dmul+0xcc>
10013c82:	201f      	movs	r0, #31
10013c84:	002c      	movs	r4, r5
10013c86:	4240      	negs	r0, r0
10013c88:	1a82      	subs	r2, r0, r2
10013c8a:	40d4      	lsrs	r4, r2
10013c8c:	2e20      	cmp	r6, #32
10013c8e:	d01c      	beq.n	10013cca <__aeabi_dmul+0x4ca>
10013c90:	2240      	movs	r2, #64	; 0x40
10013c92:	1b96      	subs	r6, r2, r6
10013c94:	40b5      	lsls	r5, r6
10013c96:	432b      	orrs	r3, r5
10013c98:	1e58      	subs	r0, r3, #1
10013c9a:	4183      	sbcs	r3, r0
10013c9c:	2007      	movs	r0, #7
10013c9e:	4323      	orrs	r3, r4
10013ca0:	4018      	ands	r0, r3
10013ca2:	2500      	movs	r5, #0
10013ca4:	2800      	cmp	r0, #0
10013ca6:	d009      	beq.n	10013cbc <__aeabi_dmul+0x4bc>
10013ca8:	220f      	movs	r2, #15
10013caa:	2500      	movs	r5, #0
10013cac:	401a      	ands	r2, r3
10013cae:	001c      	movs	r4, r3
10013cb0:	2a04      	cmp	r2, #4
10013cb2:	d1d8      	bne.n	10013c66 <__aeabi_dmul+0x466>
10013cb4:	0023      	movs	r3, r4
10013cb6:	0768      	lsls	r0, r5, #29
10013cb8:	026d      	lsls	r5, r5, #9
10013cba:	0b2d      	lsrs	r5, r5, #12
10013cbc:	2401      	movs	r4, #1
10013cbe:	08db      	lsrs	r3, r3, #3
10013cc0:	4303      	orrs	r3, r0
10013cc2:	4698      	mov	r8, r3
10013cc4:	400c      	ands	r4, r1
10013cc6:	2300      	movs	r3, #0
10013cc8:	e600      	b.n	100138cc <__aeabi_dmul+0xcc>
10013cca:	2500      	movs	r5, #0
10013ccc:	e7e3      	b.n	10013c96 <__aeabi_dmul+0x496>
10013cce:	2280      	movs	r2, #128	; 0x80
10013cd0:	2401      	movs	r4, #1
10013cd2:	0312      	lsls	r2, r2, #12
10013cd4:	4315      	orrs	r5, r2
10013cd6:	032d      	lsls	r5, r5, #12
10013cd8:	4698      	mov	r8, r3
10013cda:	0b2d      	lsrs	r5, r5, #12
10013cdc:	400c      	ands	r4, r1
10013cde:	4b04      	ldr	r3, [pc, #16]	; (10013cf0 <__aeabi_dmul+0x4f0>)
10013ce0:	e5f4      	b.n	100138cc <__aeabi_dmul+0xcc>
10013ce2:	46c0      	nop			; (mov r8, r8)
10013ce4:	000003ff 	.word	0x000003ff
10013ce8:	feffffff 	.word	0xfeffffff
10013cec:	000007fe 	.word	0x000007fe
10013cf0:	000007ff 	.word	0x000007ff

10013cf4 <__aeabi_dsub>:
10013cf4:	b5f0      	push	{r4, r5, r6, r7, lr}
10013cf6:	4657      	mov	r7, sl
10013cf8:	464e      	mov	r6, r9
10013cfa:	4645      	mov	r5, r8
10013cfc:	b4e0      	push	{r5, r6, r7}
10013cfe:	000e      	movs	r6, r1
10013d00:	0011      	movs	r1, r2
10013d02:	0ff2      	lsrs	r2, r6, #31
10013d04:	4692      	mov	sl, r2
10013d06:	00c5      	lsls	r5, r0, #3
10013d08:	0f42      	lsrs	r2, r0, #29
10013d0a:	0318      	lsls	r0, r3, #12
10013d0c:	0337      	lsls	r7, r6, #12
10013d0e:	0074      	lsls	r4, r6, #1
10013d10:	0a40      	lsrs	r0, r0, #9
10013d12:	0f4e      	lsrs	r6, r1, #29
10013d14:	0a7f      	lsrs	r7, r7, #9
10013d16:	4330      	orrs	r0, r6
10013d18:	4ecf      	ldr	r6, [pc, #828]	; (10014058 <__aeabi_dsub+0x364>)
10013d1a:	4317      	orrs	r7, r2
10013d1c:	005a      	lsls	r2, r3, #1
10013d1e:	0d64      	lsrs	r4, r4, #21
10013d20:	0d52      	lsrs	r2, r2, #21
10013d22:	0fdb      	lsrs	r3, r3, #31
10013d24:	00c9      	lsls	r1, r1, #3
10013d26:	42b2      	cmp	r2, r6
10013d28:	d100      	bne.n	10013d2c <__aeabi_dsub+0x38>
10013d2a:	e0e5      	b.n	10013ef8 <__aeabi_dsub+0x204>
10013d2c:	2601      	movs	r6, #1
10013d2e:	4073      	eors	r3, r6
10013d30:	1aa6      	subs	r6, r4, r2
10013d32:	46b4      	mov	ip, r6
10013d34:	4553      	cmp	r3, sl
10013d36:	d100      	bne.n	10013d3a <__aeabi_dsub+0x46>
10013d38:	e0af      	b.n	10013e9a <__aeabi_dsub+0x1a6>
10013d3a:	2e00      	cmp	r6, #0
10013d3c:	dc00      	bgt.n	10013d40 <__aeabi_dsub+0x4c>
10013d3e:	e10d      	b.n	10013f5c <__aeabi_dsub+0x268>
10013d40:	2a00      	cmp	r2, #0
10013d42:	d13a      	bne.n	10013dba <__aeabi_dsub+0xc6>
10013d44:	0003      	movs	r3, r0
10013d46:	430b      	orrs	r3, r1
10013d48:	d000      	beq.n	10013d4c <__aeabi_dsub+0x58>
10013d4a:	e0e4      	b.n	10013f16 <__aeabi_dsub+0x222>
10013d4c:	076b      	lsls	r3, r5, #29
10013d4e:	d009      	beq.n	10013d64 <__aeabi_dsub+0x70>
10013d50:	230f      	movs	r3, #15
10013d52:	402b      	ands	r3, r5
10013d54:	2b04      	cmp	r3, #4
10013d56:	d005      	beq.n	10013d64 <__aeabi_dsub+0x70>
10013d58:	1d2b      	adds	r3, r5, #4
10013d5a:	42ab      	cmp	r3, r5
10013d5c:	41ad      	sbcs	r5, r5
10013d5e:	426d      	negs	r5, r5
10013d60:	197f      	adds	r7, r7, r5
10013d62:	001d      	movs	r5, r3
10013d64:	023b      	lsls	r3, r7, #8
10013d66:	d400      	bmi.n	10013d6a <__aeabi_dsub+0x76>
10013d68:	e088      	b.n	10013e7c <__aeabi_dsub+0x188>
10013d6a:	4bbb      	ldr	r3, [pc, #748]	; (10014058 <__aeabi_dsub+0x364>)
10013d6c:	3401      	adds	r4, #1
10013d6e:	429c      	cmp	r4, r3
10013d70:	d100      	bne.n	10013d74 <__aeabi_dsub+0x80>
10013d72:	e110      	b.n	10013f96 <__aeabi_dsub+0x2a2>
10013d74:	003a      	movs	r2, r7
10013d76:	4bb9      	ldr	r3, [pc, #740]	; (1001405c <__aeabi_dsub+0x368>)
10013d78:	4651      	mov	r1, sl
10013d7a:	401a      	ands	r2, r3
10013d7c:	2301      	movs	r3, #1
10013d7e:	0750      	lsls	r0, r2, #29
10013d80:	08ed      	lsrs	r5, r5, #3
10013d82:	0252      	lsls	r2, r2, #9
10013d84:	0564      	lsls	r4, r4, #21
10013d86:	4305      	orrs	r5, r0
10013d88:	0b12      	lsrs	r2, r2, #12
10013d8a:	0d64      	lsrs	r4, r4, #21
10013d8c:	400b      	ands	r3, r1
10013d8e:	2100      	movs	r1, #0
10013d90:	0028      	movs	r0, r5
10013d92:	0312      	lsls	r2, r2, #12
10013d94:	0d0d      	lsrs	r5, r1, #20
10013d96:	0b12      	lsrs	r2, r2, #12
10013d98:	0564      	lsls	r4, r4, #21
10013d9a:	052d      	lsls	r5, r5, #20
10013d9c:	4315      	orrs	r5, r2
10013d9e:	0862      	lsrs	r2, r4, #1
10013da0:	4caf      	ldr	r4, [pc, #700]	; (10014060 <__aeabi_dsub+0x36c>)
10013da2:	07db      	lsls	r3, r3, #31
10013da4:	402c      	ands	r4, r5
10013da6:	4314      	orrs	r4, r2
10013da8:	0064      	lsls	r4, r4, #1
10013daa:	0864      	lsrs	r4, r4, #1
10013dac:	431c      	orrs	r4, r3
10013dae:	0021      	movs	r1, r4
10013db0:	bc1c      	pop	{r2, r3, r4}
10013db2:	4690      	mov	r8, r2
10013db4:	4699      	mov	r9, r3
10013db6:	46a2      	mov	sl, r4
10013db8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013dba:	4ba7      	ldr	r3, [pc, #668]	; (10014058 <__aeabi_dsub+0x364>)
10013dbc:	429c      	cmp	r4, r3
10013dbe:	d0c5      	beq.n	10013d4c <__aeabi_dsub+0x58>
10013dc0:	2380      	movs	r3, #128	; 0x80
10013dc2:	041b      	lsls	r3, r3, #16
10013dc4:	4318      	orrs	r0, r3
10013dc6:	4663      	mov	r3, ip
10013dc8:	2b38      	cmp	r3, #56	; 0x38
10013dca:	dd00      	ble.n	10013dce <__aeabi_dsub+0xda>
10013dcc:	e0fd      	b.n	10013fca <__aeabi_dsub+0x2d6>
10013dce:	2b1f      	cmp	r3, #31
10013dd0:	dd00      	ble.n	10013dd4 <__aeabi_dsub+0xe0>
10013dd2:	e130      	b.n	10014036 <__aeabi_dsub+0x342>
10013dd4:	4662      	mov	r2, ip
10013dd6:	2320      	movs	r3, #32
10013dd8:	1a9b      	subs	r3, r3, r2
10013dda:	0002      	movs	r2, r0
10013ddc:	409a      	lsls	r2, r3
10013dde:	4666      	mov	r6, ip
10013de0:	4690      	mov	r8, r2
10013de2:	000a      	movs	r2, r1
10013de4:	4099      	lsls	r1, r3
10013de6:	40f2      	lsrs	r2, r6
10013de8:	4646      	mov	r6, r8
10013dea:	1e4b      	subs	r3, r1, #1
10013dec:	4199      	sbcs	r1, r3
10013dee:	4332      	orrs	r2, r6
10013df0:	4311      	orrs	r1, r2
10013df2:	4663      	mov	r3, ip
10013df4:	0002      	movs	r2, r0
10013df6:	40da      	lsrs	r2, r3
10013df8:	1a69      	subs	r1, r5, r1
10013dfa:	428d      	cmp	r5, r1
10013dfc:	419b      	sbcs	r3, r3
10013dfe:	000d      	movs	r5, r1
10013e00:	1aba      	subs	r2, r7, r2
10013e02:	425b      	negs	r3, r3
10013e04:	1ad7      	subs	r7, r2, r3
10013e06:	023b      	lsls	r3, r7, #8
10013e08:	d535      	bpl.n	10013e76 <__aeabi_dsub+0x182>
10013e0a:	027a      	lsls	r2, r7, #9
10013e0c:	0a53      	lsrs	r3, r2, #9
10013e0e:	4698      	mov	r8, r3
10013e10:	4643      	mov	r3, r8
10013e12:	2b00      	cmp	r3, #0
10013e14:	d100      	bne.n	10013e18 <__aeabi_dsub+0x124>
10013e16:	e0c4      	b.n	10013fa2 <__aeabi_dsub+0x2ae>
10013e18:	4640      	mov	r0, r8
10013e1a:	f000 fc6f 	bl	100146fc <__clzsi2>
10013e1e:	0003      	movs	r3, r0
10013e20:	3b08      	subs	r3, #8
10013e22:	2b1f      	cmp	r3, #31
10013e24:	dd00      	ble.n	10013e28 <__aeabi_dsub+0x134>
10013e26:	e0c5      	b.n	10013fb4 <__aeabi_dsub+0x2c0>
10013e28:	2220      	movs	r2, #32
10013e2a:	0029      	movs	r1, r5
10013e2c:	1ad2      	subs	r2, r2, r3
10013e2e:	4647      	mov	r7, r8
10013e30:	40d1      	lsrs	r1, r2
10013e32:	409f      	lsls	r7, r3
10013e34:	000a      	movs	r2, r1
10013e36:	409d      	lsls	r5, r3
10013e38:	433a      	orrs	r2, r7
10013e3a:	429c      	cmp	r4, r3
10013e3c:	dd00      	ble.n	10013e40 <__aeabi_dsub+0x14c>
10013e3e:	e0c0      	b.n	10013fc2 <__aeabi_dsub+0x2ce>
10013e40:	1b1c      	subs	r4, r3, r4
10013e42:	1c63      	adds	r3, r4, #1
10013e44:	2b1f      	cmp	r3, #31
10013e46:	dd00      	ble.n	10013e4a <__aeabi_dsub+0x156>
10013e48:	e0e4      	b.n	10014014 <__aeabi_dsub+0x320>
10013e4a:	2120      	movs	r1, #32
10013e4c:	0014      	movs	r4, r2
10013e4e:	0028      	movs	r0, r5
10013e50:	1ac9      	subs	r1, r1, r3
10013e52:	40d8      	lsrs	r0, r3
10013e54:	408c      	lsls	r4, r1
10013e56:	408d      	lsls	r5, r1
10013e58:	4304      	orrs	r4, r0
10013e5a:	40da      	lsrs	r2, r3
10013e5c:	1e68      	subs	r0, r5, #1
10013e5e:	4185      	sbcs	r5, r0
10013e60:	0017      	movs	r7, r2
10013e62:	4325      	orrs	r5, r4
10013e64:	2400      	movs	r4, #0
10013e66:	e771      	b.n	10013d4c <__aeabi_dsub+0x58>
10013e68:	4642      	mov	r2, r8
10013e6a:	4663      	mov	r3, ip
10013e6c:	431a      	orrs	r2, r3
10013e6e:	d100      	bne.n	10013e72 <__aeabi_dsub+0x17e>
10013e70:	e24c      	b.n	1001430c <__aeabi_dsub+0x618>
10013e72:	4667      	mov	r7, ip
10013e74:	4645      	mov	r5, r8
10013e76:	076b      	lsls	r3, r5, #29
10013e78:	d000      	beq.n	10013e7c <__aeabi_dsub+0x188>
10013e7a:	e769      	b.n	10013d50 <__aeabi_dsub+0x5c>
10013e7c:	2301      	movs	r3, #1
10013e7e:	4651      	mov	r1, sl
10013e80:	0778      	lsls	r0, r7, #29
10013e82:	08ed      	lsrs	r5, r5, #3
10013e84:	08fa      	lsrs	r2, r7, #3
10013e86:	400b      	ands	r3, r1
10013e88:	4305      	orrs	r5, r0
10013e8a:	4973      	ldr	r1, [pc, #460]	; (10014058 <__aeabi_dsub+0x364>)
10013e8c:	428c      	cmp	r4, r1
10013e8e:	d038      	beq.n	10013f02 <__aeabi_dsub+0x20e>
10013e90:	0312      	lsls	r2, r2, #12
10013e92:	0564      	lsls	r4, r4, #21
10013e94:	0b12      	lsrs	r2, r2, #12
10013e96:	0d64      	lsrs	r4, r4, #21
10013e98:	e779      	b.n	10013d8e <__aeabi_dsub+0x9a>
10013e9a:	2e00      	cmp	r6, #0
10013e9c:	dc00      	bgt.n	10013ea0 <__aeabi_dsub+0x1ac>
10013e9e:	e09a      	b.n	10013fd6 <__aeabi_dsub+0x2e2>
10013ea0:	2a00      	cmp	r2, #0
10013ea2:	d047      	beq.n	10013f34 <__aeabi_dsub+0x240>
10013ea4:	4a6c      	ldr	r2, [pc, #432]	; (10014058 <__aeabi_dsub+0x364>)
10013ea6:	4294      	cmp	r4, r2
10013ea8:	d100      	bne.n	10013eac <__aeabi_dsub+0x1b8>
10013eaa:	e74f      	b.n	10013d4c <__aeabi_dsub+0x58>
10013eac:	2280      	movs	r2, #128	; 0x80
10013eae:	0412      	lsls	r2, r2, #16
10013eb0:	4310      	orrs	r0, r2
10013eb2:	4662      	mov	r2, ip
10013eb4:	2a38      	cmp	r2, #56	; 0x38
10013eb6:	dc00      	bgt.n	10013eba <__aeabi_dsub+0x1c6>
10013eb8:	e108      	b.n	100140cc <__aeabi_dsub+0x3d8>
10013eba:	4301      	orrs	r1, r0
10013ebc:	1e48      	subs	r0, r1, #1
10013ebe:	4181      	sbcs	r1, r0
10013ec0:	2200      	movs	r2, #0
10013ec2:	b2c9      	uxtb	r1, r1
10013ec4:	1949      	adds	r1, r1, r5
10013ec6:	19d2      	adds	r2, r2, r7
10013ec8:	42a9      	cmp	r1, r5
10013eca:	41bf      	sbcs	r7, r7
10013ecc:	000d      	movs	r5, r1
10013ece:	427f      	negs	r7, r7
10013ed0:	18bf      	adds	r7, r7, r2
10013ed2:	023a      	lsls	r2, r7, #8
10013ed4:	d400      	bmi.n	10013ed8 <__aeabi_dsub+0x1e4>
10013ed6:	e142      	b.n	1001415e <__aeabi_dsub+0x46a>
10013ed8:	4a5f      	ldr	r2, [pc, #380]	; (10014058 <__aeabi_dsub+0x364>)
10013eda:	3401      	adds	r4, #1
10013edc:	4294      	cmp	r4, r2
10013ede:	d100      	bne.n	10013ee2 <__aeabi_dsub+0x1ee>
10013ee0:	e14e      	b.n	10014180 <__aeabi_dsub+0x48c>
10013ee2:	2001      	movs	r0, #1
10013ee4:	4a5d      	ldr	r2, [pc, #372]	; (1001405c <__aeabi_dsub+0x368>)
10013ee6:	0869      	lsrs	r1, r5, #1
10013ee8:	403a      	ands	r2, r7
10013eea:	4028      	ands	r0, r5
10013eec:	4308      	orrs	r0, r1
10013eee:	07d5      	lsls	r5, r2, #31
10013ef0:	4305      	orrs	r5, r0
10013ef2:	0857      	lsrs	r7, r2, #1
10013ef4:	469a      	mov	sl, r3
10013ef6:	e729      	b.n	10013d4c <__aeabi_dsub+0x58>
10013ef8:	0006      	movs	r6, r0
10013efa:	430e      	orrs	r6, r1
10013efc:	d000      	beq.n	10013f00 <__aeabi_dsub+0x20c>
10013efe:	e717      	b.n	10013d30 <__aeabi_dsub+0x3c>
10013f00:	e714      	b.n	10013d2c <__aeabi_dsub+0x38>
10013f02:	0029      	movs	r1, r5
10013f04:	4311      	orrs	r1, r2
10013f06:	d100      	bne.n	10013f0a <__aeabi_dsub+0x216>
10013f08:	e1f9      	b.n	100142fe <__aeabi_dsub+0x60a>
10013f0a:	2180      	movs	r1, #128	; 0x80
10013f0c:	0309      	lsls	r1, r1, #12
10013f0e:	430a      	orrs	r2, r1
10013f10:	0312      	lsls	r2, r2, #12
10013f12:	0b12      	lsrs	r2, r2, #12
10013f14:	e73b      	b.n	10013d8e <__aeabi_dsub+0x9a>
10013f16:	2301      	movs	r3, #1
10013f18:	425b      	negs	r3, r3
10013f1a:	4698      	mov	r8, r3
10013f1c:	44c4      	add	ip, r8
10013f1e:	4663      	mov	r3, ip
10013f20:	2b00      	cmp	r3, #0
10013f22:	d172      	bne.n	1001400a <__aeabi_dsub+0x316>
10013f24:	1a69      	subs	r1, r5, r1
10013f26:	428d      	cmp	r5, r1
10013f28:	419b      	sbcs	r3, r3
10013f2a:	1a3f      	subs	r7, r7, r0
10013f2c:	425b      	negs	r3, r3
10013f2e:	1aff      	subs	r7, r7, r3
10013f30:	000d      	movs	r5, r1
10013f32:	e768      	b.n	10013e06 <__aeabi_dsub+0x112>
10013f34:	0002      	movs	r2, r0
10013f36:	430a      	orrs	r2, r1
10013f38:	d100      	bne.n	10013f3c <__aeabi_dsub+0x248>
10013f3a:	e707      	b.n	10013d4c <__aeabi_dsub+0x58>
10013f3c:	2201      	movs	r2, #1
10013f3e:	4252      	negs	r2, r2
10013f40:	4690      	mov	r8, r2
10013f42:	44c4      	add	ip, r8
10013f44:	4662      	mov	r2, ip
10013f46:	2a00      	cmp	r2, #0
10013f48:	d000      	beq.n	10013f4c <__aeabi_dsub+0x258>
10013f4a:	e0e6      	b.n	1001411a <__aeabi_dsub+0x426>
10013f4c:	1869      	adds	r1, r5, r1
10013f4e:	42a9      	cmp	r1, r5
10013f50:	41b6      	sbcs	r6, r6
10013f52:	183f      	adds	r7, r7, r0
10013f54:	4276      	negs	r6, r6
10013f56:	19f7      	adds	r7, r6, r7
10013f58:	000d      	movs	r5, r1
10013f5a:	e7ba      	b.n	10013ed2 <__aeabi_dsub+0x1de>
10013f5c:	2e00      	cmp	r6, #0
10013f5e:	d000      	beq.n	10013f62 <__aeabi_dsub+0x26e>
10013f60:	e080      	b.n	10014064 <__aeabi_dsub+0x370>
10013f62:	1c62      	adds	r2, r4, #1
10013f64:	0552      	lsls	r2, r2, #21
10013f66:	0d52      	lsrs	r2, r2, #21
10013f68:	2a01      	cmp	r2, #1
10013f6a:	dc00      	bgt.n	10013f6e <__aeabi_dsub+0x27a>
10013f6c:	e0f9      	b.n	10014162 <__aeabi_dsub+0x46e>
10013f6e:	1a6a      	subs	r2, r5, r1
10013f70:	4691      	mov	r9, r2
10013f72:	454d      	cmp	r5, r9
10013f74:	41b6      	sbcs	r6, r6
10013f76:	1a3a      	subs	r2, r7, r0
10013f78:	4276      	negs	r6, r6
10013f7a:	1b92      	subs	r2, r2, r6
10013f7c:	4690      	mov	r8, r2
10013f7e:	0212      	lsls	r2, r2, #8
10013f80:	d400      	bmi.n	10013f84 <__aeabi_dsub+0x290>
10013f82:	e099      	b.n	100140b8 <__aeabi_dsub+0x3c4>
10013f84:	1b4d      	subs	r5, r1, r5
10013f86:	42a9      	cmp	r1, r5
10013f88:	4189      	sbcs	r1, r1
10013f8a:	1bc7      	subs	r7, r0, r7
10013f8c:	4249      	negs	r1, r1
10013f8e:	1a7a      	subs	r2, r7, r1
10013f90:	4690      	mov	r8, r2
10013f92:	469a      	mov	sl, r3
10013f94:	e73c      	b.n	10013e10 <__aeabi_dsub+0x11c>
10013f96:	4652      	mov	r2, sl
10013f98:	2301      	movs	r3, #1
10013f9a:	2500      	movs	r5, #0
10013f9c:	4013      	ands	r3, r2
10013f9e:	2200      	movs	r2, #0
10013fa0:	e6f5      	b.n	10013d8e <__aeabi_dsub+0x9a>
10013fa2:	0028      	movs	r0, r5
10013fa4:	f000 fbaa 	bl	100146fc <__clzsi2>
10013fa8:	3020      	adds	r0, #32
10013faa:	0003      	movs	r3, r0
10013fac:	3b08      	subs	r3, #8
10013fae:	2b1f      	cmp	r3, #31
10013fb0:	dc00      	bgt.n	10013fb4 <__aeabi_dsub+0x2c0>
10013fb2:	e739      	b.n	10013e28 <__aeabi_dsub+0x134>
10013fb4:	002a      	movs	r2, r5
10013fb6:	3828      	subs	r0, #40	; 0x28
10013fb8:	4082      	lsls	r2, r0
10013fba:	2500      	movs	r5, #0
10013fbc:	429c      	cmp	r4, r3
10013fbe:	dc00      	bgt.n	10013fc2 <__aeabi_dsub+0x2ce>
10013fc0:	e73e      	b.n	10013e40 <__aeabi_dsub+0x14c>
10013fc2:	4f26      	ldr	r7, [pc, #152]	; (1001405c <__aeabi_dsub+0x368>)
10013fc4:	1ae4      	subs	r4, r4, r3
10013fc6:	4017      	ands	r7, r2
10013fc8:	e6c0      	b.n	10013d4c <__aeabi_dsub+0x58>
10013fca:	4301      	orrs	r1, r0
10013fcc:	1e48      	subs	r0, r1, #1
10013fce:	4181      	sbcs	r1, r0
10013fd0:	2200      	movs	r2, #0
10013fd2:	b2c9      	uxtb	r1, r1
10013fd4:	e710      	b.n	10013df8 <__aeabi_dsub+0x104>
10013fd6:	2e00      	cmp	r6, #0
10013fd8:	d000      	beq.n	10013fdc <__aeabi_dsub+0x2e8>
10013fda:	e0f1      	b.n	100141c0 <__aeabi_dsub+0x4cc>
10013fdc:	1c62      	adds	r2, r4, #1
10013fde:	4694      	mov	ip, r2
10013fe0:	0552      	lsls	r2, r2, #21
10013fe2:	0d52      	lsrs	r2, r2, #21
10013fe4:	2a01      	cmp	r2, #1
10013fe6:	dc00      	bgt.n	10013fea <__aeabi_dsub+0x2f6>
10013fe8:	e0a0      	b.n	1001412c <__aeabi_dsub+0x438>
10013fea:	4a1b      	ldr	r2, [pc, #108]	; (10014058 <__aeabi_dsub+0x364>)
10013fec:	4594      	cmp	ip, r2
10013fee:	d100      	bne.n	10013ff2 <__aeabi_dsub+0x2fe>
10013ff0:	e0c5      	b.n	1001417e <__aeabi_dsub+0x48a>
10013ff2:	1869      	adds	r1, r5, r1
10013ff4:	42a9      	cmp	r1, r5
10013ff6:	4192      	sbcs	r2, r2
10013ff8:	183f      	adds	r7, r7, r0
10013ffa:	4252      	negs	r2, r2
10013ffc:	19d2      	adds	r2, r2, r7
10013ffe:	0849      	lsrs	r1, r1, #1
10014000:	07d5      	lsls	r5, r2, #31
10014002:	430d      	orrs	r5, r1
10014004:	0857      	lsrs	r7, r2, #1
10014006:	4664      	mov	r4, ip
10014008:	e6a0      	b.n	10013d4c <__aeabi_dsub+0x58>
1001400a:	4b13      	ldr	r3, [pc, #76]	; (10014058 <__aeabi_dsub+0x364>)
1001400c:	429c      	cmp	r4, r3
1001400e:	d000      	beq.n	10014012 <__aeabi_dsub+0x31e>
10014010:	e6d9      	b.n	10013dc6 <__aeabi_dsub+0xd2>
10014012:	e69b      	b.n	10013d4c <__aeabi_dsub+0x58>
10014014:	0011      	movs	r1, r2
10014016:	3c1f      	subs	r4, #31
10014018:	40e1      	lsrs	r1, r4
1001401a:	000c      	movs	r4, r1
1001401c:	2b20      	cmp	r3, #32
1001401e:	d100      	bne.n	10014022 <__aeabi_dsub+0x32e>
10014020:	e080      	b.n	10014124 <__aeabi_dsub+0x430>
10014022:	2140      	movs	r1, #64	; 0x40
10014024:	1acb      	subs	r3, r1, r3
10014026:	409a      	lsls	r2, r3
10014028:	4315      	orrs	r5, r2
1001402a:	1e6a      	subs	r2, r5, #1
1001402c:	4195      	sbcs	r5, r2
1001402e:	2700      	movs	r7, #0
10014030:	4325      	orrs	r5, r4
10014032:	2400      	movs	r4, #0
10014034:	e71f      	b.n	10013e76 <__aeabi_dsub+0x182>
10014036:	4663      	mov	r3, ip
10014038:	0002      	movs	r2, r0
1001403a:	3b20      	subs	r3, #32
1001403c:	40da      	lsrs	r2, r3
1001403e:	4663      	mov	r3, ip
10014040:	2b20      	cmp	r3, #32
10014042:	d071      	beq.n	10014128 <__aeabi_dsub+0x434>
10014044:	2340      	movs	r3, #64	; 0x40
10014046:	4666      	mov	r6, ip
10014048:	1b9b      	subs	r3, r3, r6
1001404a:	4098      	lsls	r0, r3
1001404c:	4301      	orrs	r1, r0
1001404e:	1e48      	subs	r0, r1, #1
10014050:	4181      	sbcs	r1, r0
10014052:	4311      	orrs	r1, r2
10014054:	2200      	movs	r2, #0
10014056:	e6cf      	b.n	10013df8 <__aeabi_dsub+0x104>
10014058:	000007ff 	.word	0x000007ff
1001405c:	ff7fffff 	.word	0xff7fffff
10014060:	800fffff 	.word	0x800fffff
10014064:	2c00      	cmp	r4, #0
10014066:	d048      	beq.n	100140fa <__aeabi_dsub+0x406>
10014068:	4cca      	ldr	r4, [pc, #808]	; (10014394 <__aeabi_dsub+0x6a0>)
1001406a:	42a2      	cmp	r2, r4
1001406c:	d100      	bne.n	10014070 <__aeabi_dsub+0x37c>
1001406e:	e0a2      	b.n	100141b6 <__aeabi_dsub+0x4c2>
10014070:	4274      	negs	r4, r6
10014072:	46a1      	mov	r9, r4
10014074:	2480      	movs	r4, #128	; 0x80
10014076:	0424      	lsls	r4, r4, #16
10014078:	4327      	orrs	r7, r4
1001407a:	464c      	mov	r4, r9
1001407c:	2c38      	cmp	r4, #56	; 0x38
1001407e:	dd00      	ble.n	10014082 <__aeabi_dsub+0x38e>
10014080:	e0db      	b.n	1001423a <__aeabi_dsub+0x546>
10014082:	2c1f      	cmp	r4, #31
10014084:	dd00      	ble.n	10014088 <__aeabi_dsub+0x394>
10014086:	e144      	b.n	10014312 <__aeabi_dsub+0x61e>
10014088:	464e      	mov	r6, r9
1001408a:	2420      	movs	r4, #32
1001408c:	1ba4      	subs	r4, r4, r6
1001408e:	003e      	movs	r6, r7
10014090:	40a6      	lsls	r6, r4
10014092:	46a2      	mov	sl, r4
10014094:	46b0      	mov	r8, r6
10014096:	464c      	mov	r4, r9
10014098:	002e      	movs	r6, r5
1001409a:	40e6      	lsrs	r6, r4
1001409c:	46b4      	mov	ip, r6
1001409e:	4646      	mov	r6, r8
100140a0:	4664      	mov	r4, ip
100140a2:	4326      	orrs	r6, r4
100140a4:	4654      	mov	r4, sl
100140a6:	40a5      	lsls	r5, r4
100140a8:	1e6c      	subs	r4, r5, #1
100140aa:	41a5      	sbcs	r5, r4
100140ac:	0034      	movs	r4, r6
100140ae:	432c      	orrs	r4, r5
100140b0:	464d      	mov	r5, r9
100140b2:	40ef      	lsrs	r7, r5
100140b4:	1b0d      	subs	r5, r1, r4
100140b6:	e028      	b.n	1001410a <__aeabi_dsub+0x416>
100140b8:	464a      	mov	r2, r9
100140ba:	4643      	mov	r3, r8
100140bc:	464d      	mov	r5, r9
100140be:	431a      	orrs	r2, r3
100140c0:	d000      	beq.n	100140c4 <__aeabi_dsub+0x3d0>
100140c2:	e6a5      	b.n	10013e10 <__aeabi_dsub+0x11c>
100140c4:	2300      	movs	r3, #0
100140c6:	2400      	movs	r4, #0
100140c8:	2500      	movs	r5, #0
100140ca:	e6de      	b.n	10013e8a <__aeabi_dsub+0x196>
100140cc:	2a1f      	cmp	r2, #31
100140ce:	dc5a      	bgt.n	10014186 <__aeabi_dsub+0x492>
100140d0:	4666      	mov	r6, ip
100140d2:	2220      	movs	r2, #32
100140d4:	1b92      	subs	r2, r2, r6
100140d6:	0006      	movs	r6, r0
100140d8:	4096      	lsls	r6, r2
100140da:	4691      	mov	r9, r2
100140dc:	46b0      	mov	r8, r6
100140de:	4662      	mov	r2, ip
100140e0:	000e      	movs	r6, r1
100140e2:	40d6      	lsrs	r6, r2
100140e4:	4642      	mov	r2, r8
100140e6:	4316      	orrs	r6, r2
100140e8:	464a      	mov	r2, r9
100140ea:	4091      	lsls	r1, r2
100140ec:	1e4a      	subs	r2, r1, #1
100140ee:	4191      	sbcs	r1, r2
100140f0:	0002      	movs	r2, r0
100140f2:	4660      	mov	r0, ip
100140f4:	4331      	orrs	r1, r6
100140f6:	40c2      	lsrs	r2, r0
100140f8:	e6e4      	b.n	10013ec4 <__aeabi_dsub+0x1d0>
100140fa:	003c      	movs	r4, r7
100140fc:	432c      	orrs	r4, r5
100140fe:	d05a      	beq.n	100141b6 <__aeabi_dsub+0x4c2>
10014100:	43f4      	mvns	r4, r6
10014102:	46a1      	mov	r9, r4
10014104:	2c00      	cmp	r4, #0
10014106:	d152      	bne.n	100141ae <__aeabi_dsub+0x4ba>
10014108:	1b4d      	subs	r5, r1, r5
1001410a:	42a9      	cmp	r1, r5
1001410c:	4189      	sbcs	r1, r1
1001410e:	1bc7      	subs	r7, r0, r7
10014110:	4249      	negs	r1, r1
10014112:	1a7f      	subs	r7, r7, r1
10014114:	0014      	movs	r4, r2
10014116:	469a      	mov	sl, r3
10014118:	e675      	b.n	10013e06 <__aeabi_dsub+0x112>
1001411a:	4a9e      	ldr	r2, [pc, #632]	; (10014394 <__aeabi_dsub+0x6a0>)
1001411c:	4294      	cmp	r4, r2
1001411e:	d000      	beq.n	10014122 <__aeabi_dsub+0x42e>
10014120:	e6c7      	b.n	10013eb2 <__aeabi_dsub+0x1be>
10014122:	e613      	b.n	10013d4c <__aeabi_dsub+0x58>
10014124:	2200      	movs	r2, #0
10014126:	e77f      	b.n	10014028 <__aeabi_dsub+0x334>
10014128:	2000      	movs	r0, #0
1001412a:	e78f      	b.n	1001404c <__aeabi_dsub+0x358>
1001412c:	2c00      	cmp	r4, #0
1001412e:	d000      	beq.n	10014132 <__aeabi_dsub+0x43e>
10014130:	e0c8      	b.n	100142c4 <__aeabi_dsub+0x5d0>
10014132:	003b      	movs	r3, r7
10014134:	432b      	orrs	r3, r5
10014136:	d100      	bne.n	1001413a <__aeabi_dsub+0x446>
10014138:	e10f      	b.n	1001435a <__aeabi_dsub+0x666>
1001413a:	0003      	movs	r3, r0
1001413c:	430b      	orrs	r3, r1
1001413e:	d100      	bne.n	10014142 <__aeabi_dsub+0x44e>
10014140:	e604      	b.n	10013d4c <__aeabi_dsub+0x58>
10014142:	1869      	adds	r1, r5, r1
10014144:	42a9      	cmp	r1, r5
10014146:	419b      	sbcs	r3, r3
10014148:	183f      	adds	r7, r7, r0
1001414a:	425b      	negs	r3, r3
1001414c:	19df      	adds	r7, r3, r7
1001414e:	023b      	lsls	r3, r7, #8
10014150:	d400      	bmi.n	10014154 <__aeabi_dsub+0x460>
10014152:	e11a      	b.n	1001438a <__aeabi_dsub+0x696>
10014154:	4b90      	ldr	r3, [pc, #576]	; (10014398 <__aeabi_dsub+0x6a4>)
10014156:	000d      	movs	r5, r1
10014158:	401f      	ands	r7, r3
1001415a:	4664      	mov	r4, ip
1001415c:	e5f6      	b.n	10013d4c <__aeabi_dsub+0x58>
1001415e:	469a      	mov	sl, r3
10014160:	e689      	b.n	10013e76 <__aeabi_dsub+0x182>
10014162:	003a      	movs	r2, r7
10014164:	432a      	orrs	r2, r5
10014166:	2c00      	cmp	r4, #0
10014168:	d15c      	bne.n	10014224 <__aeabi_dsub+0x530>
1001416a:	2a00      	cmp	r2, #0
1001416c:	d175      	bne.n	1001425a <__aeabi_dsub+0x566>
1001416e:	0002      	movs	r2, r0
10014170:	430a      	orrs	r2, r1
10014172:	d100      	bne.n	10014176 <__aeabi_dsub+0x482>
10014174:	e0ca      	b.n	1001430c <__aeabi_dsub+0x618>
10014176:	0007      	movs	r7, r0
10014178:	000d      	movs	r5, r1
1001417a:	469a      	mov	sl, r3
1001417c:	e5e6      	b.n	10013d4c <__aeabi_dsub+0x58>
1001417e:	4664      	mov	r4, ip
10014180:	2200      	movs	r2, #0
10014182:	2500      	movs	r5, #0
10014184:	e681      	b.n	10013e8a <__aeabi_dsub+0x196>
10014186:	4662      	mov	r2, ip
10014188:	0006      	movs	r6, r0
1001418a:	3a20      	subs	r2, #32
1001418c:	40d6      	lsrs	r6, r2
1001418e:	4662      	mov	r2, ip
10014190:	46b0      	mov	r8, r6
10014192:	2a20      	cmp	r2, #32
10014194:	d100      	bne.n	10014198 <__aeabi_dsub+0x4a4>
10014196:	e0b7      	b.n	10014308 <__aeabi_dsub+0x614>
10014198:	2240      	movs	r2, #64	; 0x40
1001419a:	4666      	mov	r6, ip
1001419c:	1b92      	subs	r2, r2, r6
1001419e:	4090      	lsls	r0, r2
100141a0:	4301      	orrs	r1, r0
100141a2:	4642      	mov	r2, r8
100141a4:	1e48      	subs	r0, r1, #1
100141a6:	4181      	sbcs	r1, r0
100141a8:	4311      	orrs	r1, r2
100141aa:	2200      	movs	r2, #0
100141ac:	e68a      	b.n	10013ec4 <__aeabi_dsub+0x1d0>
100141ae:	4c79      	ldr	r4, [pc, #484]	; (10014394 <__aeabi_dsub+0x6a0>)
100141b0:	42a2      	cmp	r2, r4
100141b2:	d000      	beq.n	100141b6 <__aeabi_dsub+0x4c2>
100141b4:	e761      	b.n	1001407a <__aeabi_dsub+0x386>
100141b6:	0007      	movs	r7, r0
100141b8:	000d      	movs	r5, r1
100141ba:	0014      	movs	r4, r2
100141bc:	469a      	mov	sl, r3
100141be:	e5c5      	b.n	10013d4c <__aeabi_dsub+0x58>
100141c0:	2c00      	cmp	r4, #0
100141c2:	d141      	bne.n	10014248 <__aeabi_dsub+0x554>
100141c4:	003c      	movs	r4, r7
100141c6:	432c      	orrs	r4, r5
100141c8:	d078      	beq.n	100142bc <__aeabi_dsub+0x5c8>
100141ca:	43f4      	mvns	r4, r6
100141cc:	46a1      	mov	r9, r4
100141ce:	2c00      	cmp	r4, #0
100141d0:	d020      	beq.n	10014214 <__aeabi_dsub+0x520>
100141d2:	4c70      	ldr	r4, [pc, #448]	; (10014394 <__aeabi_dsub+0x6a0>)
100141d4:	42a2      	cmp	r2, r4
100141d6:	d071      	beq.n	100142bc <__aeabi_dsub+0x5c8>
100141d8:	464c      	mov	r4, r9
100141da:	2c38      	cmp	r4, #56	; 0x38
100141dc:	dd00      	ble.n	100141e0 <__aeabi_dsub+0x4ec>
100141de:	e0b2      	b.n	10014346 <__aeabi_dsub+0x652>
100141e0:	2c1f      	cmp	r4, #31
100141e2:	dd00      	ble.n	100141e6 <__aeabi_dsub+0x4f2>
100141e4:	e0bc      	b.n	10014360 <__aeabi_dsub+0x66c>
100141e6:	2620      	movs	r6, #32
100141e8:	1b34      	subs	r4, r6, r4
100141ea:	46a2      	mov	sl, r4
100141ec:	003c      	movs	r4, r7
100141ee:	4656      	mov	r6, sl
100141f0:	40b4      	lsls	r4, r6
100141f2:	464e      	mov	r6, r9
100141f4:	46a0      	mov	r8, r4
100141f6:	002c      	movs	r4, r5
100141f8:	40f4      	lsrs	r4, r6
100141fa:	46a4      	mov	ip, r4
100141fc:	4644      	mov	r4, r8
100141fe:	4666      	mov	r6, ip
10014200:	4334      	orrs	r4, r6
10014202:	46a4      	mov	ip, r4
10014204:	4654      	mov	r4, sl
10014206:	40a5      	lsls	r5, r4
10014208:	4664      	mov	r4, ip
1001420a:	1e6e      	subs	r6, r5, #1
1001420c:	41b5      	sbcs	r5, r6
1001420e:	4325      	orrs	r5, r4
10014210:	464c      	mov	r4, r9
10014212:	40e7      	lsrs	r7, r4
10014214:	186d      	adds	r5, r5, r1
10014216:	428d      	cmp	r5, r1
10014218:	4189      	sbcs	r1, r1
1001421a:	183f      	adds	r7, r7, r0
1001421c:	4249      	negs	r1, r1
1001421e:	19cf      	adds	r7, r1, r7
10014220:	0014      	movs	r4, r2
10014222:	e656      	b.n	10013ed2 <__aeabi_dsub+0x1de>
10014224:	2a00      	cmp	r2, #0
10014226:	d12f      	bne.n	10014288 <__aeabi_dsub+0x594>
10014228:	0002      	movs	r2, r0
1001422a:	430a      	orrs	r2, r1
1001422c:	d100      	bne.n	10014230 <__aeabi_dsub+0x53c>
1001422e:	e084      	b.n	1001433a <__aeabi_dsub+0x646>
10014230:	0007      	movs	r7, r0
10014232:	000d      	movs	r5, r1
10014234:	469a      	mov	sl, r3
10014236:	4c57      	ldr	r4, [pc, #348]	; (10014394 <__aeabi_dsub+0x6a0>)
10014238:	e588      	b.n	10013d4c <__aeabi_dsub+0x58>
1001423a:	433d      	orrs	r5, r7
1001423c:	1e6f      	subs	r7, r5, #1
1001423e:	41bd      	sbcs	r5, r7
10014240:	b2ec      	uxtb	r4, r5
10014242:	2700      	movs	r7, #0
10014244:	1b0d      	subs	r5, r1, r4
10014246:	e760      	b.n	1001410a <__aeabi_dsub+0x416>
10014248:	4c52      	ldr	r4, [pc, #328]	; (10014394 <__aeabi_dsub+0x6a0>)
1001424a:	42a2      	cmp	r2, r4
1001424c:	d036      	beq.n	100142bc <__aeabi_dsub+0x5c8>
1001424e:	4274      	negs	r4, r6
10014250:	2680      	movs	r6, #128	; 0x80
10014252:	0436      	lsls	r6, r6, #16
10014254:	46a1      	mov	r9, r4
10014256:	4337      	orrs	r7, r6
10014258:	e7be      	b.n	100141d8 <__aeabi_dsub+0x4e4>
1001425a:	0002      	movs	r2, r0
1001425c:	430a      	orrs	r2, r1
1001425e:	d100      	bne.n	10014262 <__aeabi_dsub+0x56e>
10014260:	e574      	b.n	10013d4c <__aeabi_dsub+0x58>
10014262:	1a6a      	subs	r2, r5, r1
10014264:	4690      	mov	r8, r2
10014266:	4545      	cmp	r5, r8
10014268:	41b6      	sbcs	r6, r6
1001426a:	1a3a      	subs	r2, r7, r0
1001426c:	4276      	negs	r6, r6
1001426e:	1b92      	subs	r2, r2, r6
10014270:	4694      	mov	ip, r2
10014272:	0212      	lsls	r2, r2, #8
10014274:	d400      	bmi.n	10014278 <__aeabi_dsub+0x584>
10014276:	e5f7      	b.n	10013e68 <__aeabi_dsub+0x174>
10014278:	1b4d      	subs	r5, r1, r5
1001427a:	42a9      	cmp	r1, r5
1001427c:	4189      	sbcs	r1, r1
1001427e:	1bc7      	subs	r7, r0, r7
10014280:	4249      	negs	r1, r1
10014282:	1a7f      	subs	r7, r7, r1
10014284:	469a      	mov	sl, r3
10014286:	e561      	b.n	10013d4c <__aeabi_dsub+0x58>
10014288:	0002      	movs	r2, r0
1001428a:	430a      	orrs	r2, r1
1001428c:	d03a      	beq.n	10014304 <__aeabi_dsub+0x610>
1001428e:	08ed      	lsrs	r5, r5, #3
10014290:	077c      	lsls	r4, r7, #29
10014292:	432c      	orrs	r4, r5
10014294:	2580      	movs	r5, #128	; 0x80
10014296:	08fa      	lsrs	r2, r7, #3
10014298:	032d      	lsls	r5, r5, #12
1001429a:	422a      	tst	r2, r5
1001429c:	d008      	beq.n	100142b0 <__aeabi_dsub+0x5bc>
1001429e:	08c7      	lsrs	r7, r0, #3
100142a0:	422f      	tst	r7, r5
100142a2:	d105      	bne.n	100142b0 <__aeabi_dsub+0x5bc>
100142a4:	0745      	lsls	r5, r0, #29
100142a6:	002c      	movs	r4, r5
100142a8:	003a      	movs	r2, r7
100142aa:	469a      	mov	sl, r3
100142ac:	08c9      	lsrs	r1, r1, #3
100142ae:	430c      	orrs	r4, r1
100142b0:	0f67      	lsrs	r7, r4, #29
100142b2:	00d2      	lsls	r2, r2, #3
100142b4:	00e5      	lsls	r5, r4, #3
100142b6:	4317      	orrs	r7, r2
100142b8:	4c36      	ldr	r4, [pc, #216]	; (10014394 <__aeabi_dsub+0x6a0>)
100142ba:	e547      	b.n	10013d4c <__aeabi_dsub+0x58>
100142bc:	0007      	movs	r7, r0
100142be:	000d      	movs	r5, r1
100142c0:	0014      	movs	r4, r2
100142c2:	e543      	b.n	10013d4c <__aeabi_dsub+0x58>
100142c4:	003a      	movs	r2, r7
100142c6:	432a      	orrs	r2, r5
100142c8:	d043      	beq.n	10014352 <__aeabi_dsub+0x65e>
100142ca:	0002      	movs	r2, r0
100142cc:	430a      	orrs	r2, r1
100142ce:	d019      	beq.n	10014304 <__aeabi_dsub+0x610>
100142d0:	08ed      	lsrs	r5, r5, #3
100142d2:	077c      	lsls	r4, r7, #29
100142d4:	432c      	orrs	r4, r5
100142d6:	2580      	movs	r5, #128	; 0x80
100142d8:	08fa      	lsrs	r2, r7, #3
100142da:	032d      	lsls	r5, r5, #12
100142dc:	422a      	tst	r2, r5
100142de:	d007      	beq.n	100142f0 <__aeabi_dsub+0x5fc>
100142e0:	08c6      	lsrs	r6, r0, #3
100142e2:	422e      	tst	r6, r5
100142e4:	d104      	bne.n	100142f0 <__aeabi_dsub+0x5fc>
100142e6:	0747      	lsls	r7, r0, #29
100142e8:	003c      	movs	r4, r7
100142ea:	0032      	movs	r2, r6
100142ec:	08c9      	lsrs	r1, r1, #3
100142ee:	430c      	orrs	r4, r1
100142f0:	00d7      	lsls	r7, r2, #3
100142f2:	0f62      	lsrs	r2, r4, #29
100142f4:	00e5      	lsls	r5, r4, #3
100142f6:	4317      	orrs	r7, r2
100142f8:	469a      	mov	sl, r3
100142fa:	4c26      	ldr	r4, [pc, #152]	; (10014394 <__aeabi_dsub+0x6a0>)
100142fc:	e526      	b.n	10013d4c <__aeabi_dsub+0x58>
100142fe:	2200      	movs	r2, #0
10014300:	2500      	movs	r5, #0
10014302:	e544      	b.n	10013d8e <__aeabi_dsub+0x9a>
10014304:	4c23      	ldr	r4, [pc, #140]	; (10014394 <__aeabi_dsub+0x6a0>)
10014306:	e521      	b.n	10013d4c <__aeabi_dsub+0x58>
10014308:	2000      	movs	r0, #0
1001430a:	e749      	b.n	100141a0 <__aeabi_dsub+0x4ac>
1001430c:	2300      	movs	r3, #0
1001430e:	2500      	movs	r5, #0
10014310:	e5bb      	b.n	10013e8a <__aeabi_dsub+0x196>
10014312:	464c      	mov	r4, r9
10014314:	003e      	movs	r6, r7
10014316:	3c20      	subs	r4, #32
10014318:	40e6      	lsrs	r6, r4
1001431a:	464c      	mov	r4, r9
1001431c:	46b4      	mov	ip, r6
1001431e:	2c20      	cmp	r4, #32
10014320:	d031      	beq.n	10014386 <__aeabi_dsub+0x692>
10014322:	2440      	movs	r4, #64	; 0x40
10014324:	464e      	mov	r6, r9
10014326:	1ba6      	subs	r6, r4, r6
10014328:	40b7      	lsls	r7, r6
1001432a:	433d      	orrs	r5, r7
1001432c:	1e6c      	subs	r4, r5, #1
1001432e:	41a5      	sbcs	r5, r4
10014330:	4664      	mov	r4, ip
10014332:	432c      	orrs	r4, r5
10014334:	2700      	movs	r7, #0
10014336:	1b0d      	subs	r5, r1, r4
10014338:	e6e7      	b.n	1001410a <__aeabi_dsub+0x416>
1001433a:	2280      	movs	r2, #128	; 0x80
1001433c:	2300      	movs	r3, #0
1001433e:	0312      	lsls	r2, r2, #12
10014340:	4c14      	ldr	r4, [pc, #80]	; (10014394 <__aeabi_dsub+0x6a0>)
10014342:	2500      	movs	r5, #0
10014344:	e5a1      	b.n	10013e8a <__aeabi_dsub+0x196>
10014346:	433d      	orrs	r5, r7
10014348:	1e6f      	subs	r7, r5, #1
1001434a:	41bd      	sbcs	r5, r7
1001434c:	2700      	movs	r7, #0
1001434e:	b2ed      	uxtb	r5, r5
10014350:	e760      	b.n	10014214 <__aeabi_dsub+0x520>
10014352:	0007      	movs	r7, r0
10014354:	000d      	movs	r5, r1
10014356:	4c0f      	ldr	r4, [pc, #60]	; (10014394 <__aeabi_dsub+0x6a0>)
10014358:	e4f8      	b.n	10013d4c <__aeabi_dsub+0x58>
1001435a:	0007      	movs	r7, r0
1001435c:	000d      	movs	r5, r1
1001435e:	e4f5      	b.n	10013d4c <__aeabi_dsub+0x58>
10014360:	464e      	mov	r6, r9
10014362:	003c      	movs	r4, r7
10014364:	3e20      	subs	r6, #32
10014366:	40f4      	lsrs	r4, r6
10014368:	46a0      	mov	r8, r4
1001436a:	464c      	mov	r4, r9
1001436c:	2c20      	cmp	r4, #32
1001436e:	d00e      	beq.n	1001438e <__aeabi_dsub+0x69a>
10014370:	2440      	movs	r4, #64	; 0x40
10014372:	464e      	mov	r6, r9
10014374:	1ba4      	subs	r4, r4, r6
10014376:	40a7      	lsls	r7, r4
10014378:	433d      	orrs	r5, r7
1001437a:	1e6f      	subs	r7, r5, #1
1001437c:	41bd      	sbcs	r5, r7
1001437e:	4644      	mov	r4, r8
10014380:	2700      	movs	r7, #0
10014382:	4325      	orrs	r5, r4
10014384:	e746      	b.n	10014214 <__aeabi_dsub+0x520>
10014386:	2700      	movs	r7, #0
10014388:	e7cf      	b.n	1001432a <__aeabi_dsub+0x636>
1001438a:	000d      	movs	r5, r1
1001438c:	e573      	b.n	10013e76 <__aeabi_dsub+0x182>
1001438e:	2700      	movs	r7, #0
10014390:	e7f2      	b.n	10014378 <__aeabi_dsub+0x684>
10014392:	46c0      	nop			; (mov r8, r8)
10014394:	000007ff 	.word	0x000007ff
10014398:	ff7fffff 	.word	0xff7fffff

1001439c <__aeabi_dcmpun>:
1001439c:	b570      	push	{r4, r5, r6, lr}
1001439e:	4e0e      	ldr	r6, [pc, #56]	; (100143d8 <__aeabi_dcmpun+0x3c>)
100143a0:	030c      	lsls	r4, r1, #12
100143a2:	031d      	lsls	r5, r3, #12
100143a4:	0049      	lsls	r1, r1, #1
100143a6:	005b      	lsls	r3, r3, #1
100143a8:	0b24      	lsrs	r4, r4, #12
100143aa:	0d49      	lsrs	r1, r1, #21
100143ac:	0b2d      	lsrs	r5, r5, #12
100143ae:	0d5b      	lsrs	r3, r3, #21
100143b0:	42b1      	cmp	r1, r6
100143b2:	d004      	beq.n	100143be <__aeabi_dcmpun+0x22>
100143b4:	4908      	ldr	r1, [pc, #32]	; (100143d8 <__aeabi_dcmpun+0x3c>)
100143b6:	2000      	movs	r0, #0
100143b8:	428b      	cmp	r3, r1
100143ba:	d008      	beq.n	100143ce <__aeabi_dcmpun+0x32>
100143bc:	bd70      	pop	{r4, r5, r6, pc}
100143be:	4304      	orrs	r4, r0
100143c0:	2001      	movs	r0, #1
100143c2:	2c00      	cmp	r4, #0
100143c4:	d1fa      	bne.n	100143bc <__aeabi_dcmpun+0x20>
100143c6:	4904      	ldr	r1, [pc, #16]	; (100143d8 <__aeabi_dcmpun+0x3c>)
100143c8:	2000      	movs	r0, #0
100143ca:	428b      	cmp	r3, r1
100143cc:	d1f6      	bne.n	100143bc <__aeabi_dcmpun+0x20>
100143ce:	4315      	orrs	r5, r2
100143d0:	0028      	movs	r0, r5
100143d2:	1e45      	subs	r5, r0, #1
100143d4:	41a8      	sbcs	r0, r5
100143d6:	e7f1      	b.n	100143bc <__aeabi_dcmpun+0x20>
100143d8:	000007ff 	.word	0x000007ff

100143dc <__aeabi_d2iz>:
100143dc:	030b      	lsls	r3, r1, #12
100143de:	b530      	push	{r4, r5, lr}
100143e0:	4d13      	ldr	r5, [pc, #76]	; (10014430 <__aeabi_d2iz+0x54>)
100143e2:	0b1a      	lsrs	r2, r3, #12
100143e4:	004b      	lsls	r3, r1, #1
100143e6:	0d5b      	lsrs	r3, r3, #21
100143e8:	0fc9      	lsrs	r1, r1, #31
100143ea:	2400      	movs	r4, #0
100143ec:	42ab      	cmp	r3, r5
100143ee:	dd11      	ble.n	10014414 <__aeabi_d2iz+0x38>
100143f0:	4c10      	ldr	r4, [pc, #64]	; (10014434 <__aeabi_d2iz+0x58>)
100143f2:	42a3      	cmp	r3, r4
100143f4:	dc10      	bgt.n	10014418 <__aeabi_d2iz+0x3c>
100143f6:	2480      	movs	r4, #128	; 0x80
100143f8:	0364      	lsls	r4, r4, #13
100143fa:	4322      	orrs	r2, r4
100143fc:	4c0e      	ldr	r4, [pc, #56]	; (10014438 <__aeabi_d2iz+0x5c>)
100143fe:	1ae4      	subs	r4, r4, r3
10014400:	2c1f      	cmp	r4, #31
10014402:	dd0c      	ble.n	1001441e <__aeabi_d2iz+0x42>
10014404:	480d      	ldr	r0, [pc, #52]	; (1001443c <__aeabi_d2iz+0x60>)
10014406:	1ac3      	subs	r3, r0, r3
10014408:	40da      	lsrs	r2, r3
1001440a:	0013      	movs	r3, r2
1001440c:	425c      	negs	r4, r3
1001440e:	2900      	cmp	r1, #0
10014410:	d100      	bne.n	10014414 <__aeabi_d2iz+0x38>
10014412:	001c      	movs	r4, r3
10014414:	0020      	movs	r0, r4
10014416:	bd30      	pop	{r4, r5, pc}
10014418:	4b09      	ldr	r3, [pc, #36]	; (10014440 <__aeabi_d2iz+0x64>)
1001441a:	18cc      	adds	r4, r1, r3
1001441c:	e7fa      	b.n	10014414 <__aeabi_d2iz+0x38>
1001441e:	40e0      	lsrs	r0, r4
10014420:	4c08      	ldr	r4, [pc, #32]	; (10014444 <__aeabi_d2iz+0x68>)
10014422:	46a4      	mov	ip, r4
10014424:	4463      	add	r3, ip
10014426:	409a      	lsls	r2, r3
10014428:	0013      	movs	r3, r2
1001442a:	4303      	orrs	r3, r0
1001442c:	e7ee      	b.n	1001440c <__aeabi_d2iz+0x30>
1001442e:	46c0      	nop			; (mov r8, r8)
10014430:	000003fe 	.word	0x000003fe
10014434:	0000041d 	.word	0x0000041d
10014438:	00000433 	.word	0x00000433
1001443c:	00000413 	.word	0x00000413
10014440:	7fffffff 	.word	0x7fffffff
10014444:	fffffbed 	.word	0xfffffbed

10014448 <__aeabi_i2d>:
10014448:	b570      	push	{r4, r5, r6, lr}
1001444a:	2800      	cmp	r0, #0
1001444c:	d030      	beq.n	100144b0 <__aeabi_i2d+0x68>
1001444e:	17c3      	asrs	r3, r0, #31
10014450:	18c4      	adds	r4, r0, r3
10014452:	405c      	eors	r4, r3
10014454:	0fc5      	lsrs	r5, r0, #31
10014456:	0020      	movs	r0, r4
10014458:	f000 f950 	bl	100146fc <__clzsi2>
1001445c:	4b17      	ldr	r3, [pc, #92]	; (100144bc <__aeabi_i2d+0x74>)
1001445e:	4a18      	ldr	r2, [pc, #96]	; (100144c0 <__aeabi_i2d+0x78>)
10014460:	1a1b      	subs	r3, r3, r0
10014462:	1ad2      	subs	r2, r2, r3
10014464:	2a1f      	cmp	r2, #31
10014466:	dd18      	ble.n	1001449a <__aeabi_i2d+0x52>
10014468:	4a16      	ldr	r2, [pc, #88]	; (100144c4 <__aeabi_i2d+0x7c>)
1001446a:	1ad2      	subs	r2, r2, r3
1001446c:	4094      	lsls	r4, r2
1001446e:	2200      	movs	r2, #0
10014470:	0324      	lsls	r4, r4, #12
10014472:	055b      	lsls	r3, r3, #21
10014474:	0b24      	lsrs	r4, r4, #12
10014476:	0d5b      	lsrs	r3, r3, #21
10014478:	2100      	movs	r1, #0
1001447a:	0010      	movs	r0, r2
1001447c:	0324      	lsls	r4, r4, #12
1001447e:	0d0a      	lsrs	r2, r1, #20
10014480:	0512      	lsls	r2, r2, #20
10014482:	0b24      	lsrs	r4, r4, #12
10014484:	4314      	orrs	r4, r2
10014486:	4a10      	ldr	r2, [pc, #64]	; (100144c8 <__aeabi_i2d+0x80>)
10014488:	051b      	lsls	r3, r3, #20
1001448a:	4014      	ands	r4, r2
1001448c:	431c      	orrs	r4, r3
1001448e:	0064      	lsls	r4, r4, #1
10014490:	07ed      	lsls	r5, r5, #31
10014492:	0864      	lsrs	r4, r4, #1
10014494:	432c      	orrs	r4, r5
10014496:	0021      	movs	r1, r4
10014498:	bd70      	pop	{r4, r5, r6, pc}
1001449a:	0021      	movs	r1, r4
1001449c:	4091      	lsls	r1, r2
1001449e:	000a      	movs	r2, r1
100144a0:	210b      	movs	r1, #11
100144a2:	1a08      	subs	r0, r1, r0
100144a4:	40c4      	lsrs	r4, r0
100144a6:	055b      	lsls	r3, r3, #21
100144a8:	0324      	lsls	r4, r4, #12
100144aa:	0b24      	lsrs	r4, r4, #12
100144ac:	0d5b      	lsrs	r3, r3, #21
100144ae:	e7e3      	b.n	10014478 <__aeabi_i2d+0x30>
100144b0:	2500      	movs	r5, #0
100144b2:	2300      	movs	r3, #0
100144b4:	2400      	movs	r4, #0
100144b6:	2200      	movs	r2, #0
100144b8:	e7de      	b.n	10014478 <__aeabi_i2d+0x30>
100144ba:	46c0      	nop			; (mov r8, r8)
100144bc:	0000041e 	.word	0x0000041e
100144c0:	00000433 	.word	0x00000433
100144c4:	00000413 	.word	0x00000413
100144c8:	800fffff 	.word	0x800fffff

100144cc <__aeabi_ui2d>:
100144cc:	b570      	push	{r4, r5, r6, lr}
100144ce:	1e05      	subs	r5, r0, #0
100144d0:	d028      	beq.n	10014524 <__aeabi_ui2d+0x58>
100144d2:	f000 f913 	bl	100146fc <__clzsi2>
100144d6:	4b15      	ldr	r3, [pc, #84]	; (1001452c <__aeabi_ui2d+0x60>)
100144d8:	4a15      	ldr	r2, [pc, #84]	; (10014530 <__aeabi_ui2d+0x64>)
100144da:	1a1b      	subs	r3, r3, r0
100144dc:	1ad2      	subs	r2, r2, r3
100144de:	2a1f      	cmp	r2, #31
100144e0:	dd16      	ble.n	10014510 <__aeabi_ui2d+0x44>
100144e2:	002c      	movs	r4, r5
100144e4:	4a13      	ldr	r2, [pc, #76]	; (10014534 <__aeabi_ui2d+0x68>)
100144e6:	2500      	movs	r5, #0
100144e8:	1ad2      	subs	r2, r2, r3
100144ea:	4094      	lsls	r4, r2
100144ec:	055a      	lsls	r2, r3, #21
100144ee:	0324      	lsls	r4, r4, #12
100144f0:	0b24      	lsrs	r4, r4, #12
100144f2:	0d52      	lsrs	r2, r2, #21
100144f4:	2100      	movs	r1, #0
100144f6:	0324      	lsls	r4, r4, #12
100144f8:	0d0b      	lsrs	r3, r1, #20
100144fa:	0b24      	lsrs	r4, r4, #12
100144fc:	051b      	lsls	r3, r3, #20
100144fe:	4323      	orrs	r3, r4
10014500:	4c0d      	ldr	r4, [pc, #52]	; (10014538 <__aeabi_ui2d+0x6c>)
10014502:	0512      	lsls	r2, r2, #20
10014504:	4023      	ands	r3, r4
10014506:	4313      	orrs	r3, r2
10014508:	005b      	lsls	r3, r3, #1
1001450a:	0028      	movs	r0, r5
1001450c:	0859      	lsrs	r1, r3, #1
1001450e:	bd70      	pop	{r4, r5, r6, pc}
10014510:	210b      	movs	r1, #11
10014512:	002c      	movs	r4, r5
10014514:	1a08      	subs	r0, r1, r0
10014516:	40c4      	lsrs	r4, r0
10014518:	4095      	lsls	r5, r2
1001451a:	0324      	lsls	r4, r4, #12
1001451c:	055a      	lsls	r2, r3, #21
1001451e:	0b24      	lsrs	r4, r4, #12
10014520:	0d52      	lsrs	r2, r2, #21
10014522:	e7e7      	b.n	100144f4 <__aeabi_ui2d+0x28>
10014524:	2200      	movs	r2, #0
10014526:	2400      	movs	r4, #0
10014528:	e7e4      	b.n	100144f4 <__aeabi_ui2d+0x28>
1001452a:	46c0      	nop			; (mov r8, r8)
1001452c:	0000041e 	.word	0x0000041e
10014530:	00000433 	.word	0x00000433
10014534:	00000413 	.word	0x00000413
10014538:	800fffff 	.word	0x800fffff

1001453c <__aeabi_f2d>:
1001453c:	0042      	lsls	r2, r0, #1
1001453e:	0e12      	lsrs	r2, r2, #24
10014540:	1c51      	adds	r1, r2, #1
10014542:	0243      	lsls	r3, r0, #9
10014544:	b2c9      	uxtb	r1, r1
10014546:	b570      	push	{r4, r5, r6, lr}
10014548:	0a5d      	lsrs	r5, r3, #9
1001454a:	0fc4      	lsrs	r4, r0, #31
1001454c:	2901      	cmp	r1, #1
1001454e:	dd15      	ble.n	1001457c <__aeabi_f2d+0x40>
10014550:	21e0      	movs	r1, #224	; 0xe0
10014552:	0089      	lsls	r1, r1, #2
10014554:	468c      	mov	ip, r1
10014556:	076d      	lsls	r5, r5, #29
10014558:	0b1b      	lsrs	r3, r3, #12
1001455a:	4462      	add	r2, ip
1001455c:	2100      	movs	r1, #0
1001455e:	0028      	movs	r0, r5
10014560:	0d0d      	lsrs	r5, r1, #20
10014562:	052d      	lsls	r5, r5, #20
10014564:	432b      	orrs	r3, r5
10014566:	4d1c      	ldr	r5, [pc, #112]	; (100145d8 <__aeabi_f2d+0x9c>)
10014568:	0552      	lsls	r2, r2, #21
1001456a:	402b      	ands	r3, r5
1001456c:	0852      	lsrs	r2, r2, #1
1001456e:	4313      	orrs	r3, r2
10014570:	005b      	lsls	r3, r3, #1
10014572:	07e4      	lsls	r4, r4, #31
10014574:	085b      	lsrs	r3, r3, #1
10014576:	4323      	orrs	r3, r4
10014578:	0019      	movs	r1, r3
1001457a:	bd70      	pop	{r4, r5, r6, pc}
1001457c:	2a00      	cmp	r2, #0
1001457e:	d115      	bne.n	100145ac <__aeabi_f2d+0x70>
10014580:	2d00      	cmp	r5, #0
10014582:	d01f      	beq.n	100145c4 <__aeabi_f2d+0x88>
10014584:	0028      	movs	r0, r5
10014586:	f000 f8b9 	bl	100146fc <__clzsi2>
1001458a:	280a      	cmp	r0, #10
1001458c:	dc1d      	bgt.n	100145ca <__aeabi_f2d+0x8e>
1001458e:	230b      	movs	r3, #11
10014590:	002a      	movs	r2, r5
10014592:	1a1b      	subs	r3, r3, r0
10014594:	40da      	lsrs	r2, r3
10014596:	0013      	movs	r3, r2
10014598:	0002      	movs	r2, r0
1001459a:	3215      	adds	r2, #21
1001459c:	4095      	lsls	r5, r2
1001459e:	4a0f      	ldr	r2, [pc, #60]	; (100145dc <__aeabi_f2d+0xa0>)
100145a0:	031b      	lsls	r3, r3, #12
100145a2:	1a12      	subs	r2, r2, r0
100145a4:	0552      	lsls	r2, r2, #21
100145a6:	0b1b      	lsrs	r3, r3, #12
100145a8:	0d52      	lsrs	r2, r2, #21
100145aa:	e7d7      	b.n	1001455c <__aeabi_f2d+0x20>
100145ac:	2d00      	cmp	r5, #0
100145ae:	d006      	beq.n	100145be <__aeabi_f2d+0x82>
100145b0:	2280      	movs	r2, #128	; 0x80
100145b2:	0b1b      	lsrs	r3, r3, #12
100145b4:	0312      	lsls	r2, r2, #12
100145b6:	4313      	orrs	r3, r2
100145b8:	076d      	lsls	r5, r5, #29
100145ba:	4a09      	ldr	r2, [pc, #36]	; (100145e0 <__aeabi_f2d+0xa4>)
100145bc:	e7ce      	b.n	1001455c <__aeabi_f2d+0x20>
100145be:	4a08      	ldr	r2, [pc, #32]	; (100145e0 <__aeabi_f2d+0xa4>)
100145c0:	2300      	movs	r3, #0
100145c2:	e7cb      	b.n	1001455c <__aeabi_f2d+0x20>
100145c4:	2200      	movs	r2, #0
100145c6:	2300      	movs	r3, #0
100145c8:	e7c8      	b.n	1001455c <__aeabi_f2d+0x20>
100145ca:	0003      	movs	r3, r0
100145cc:	3b0b      	subs	r3, #11
100145ce:	409d      	lsls	r5, r3
100145d0:	002b      	movs	r3, r5
100145d2:	2500      	movs	r5, #0
100145d4:	e7e3      	b.n	1001459e <__aeabi_f2d+0x62>
100145d6:	46c0      	nop			; (mov r8, r8)
100145d8:	800fffff 	.word	0x800fffff
100145dc:	00000389 	.word	0x00000389
100145e0:	000007ff 	.word	0x000007ff

100145e4 <__aeabi_d2f>:
100145e4:	004b      	lsls	r3, r1, #1
100145e6:	b570      	push	{r4, r5, r6, lr}
100145e8:	0d5e      	lsrs	r6, r3, #21
100145ea:	030c      	lsls	r4, r1, #12
100145ec:	1c75      	adds	r5, r6, #1
100145ee:	0a64      	lsrs	r4, r4, #9
100145f0:	0f42      	lsrs	r2, r0, #29
100145f2:	056d      	lsls	r5, r5, #21
100145f4:	4322      	orrs	r2, r4
100145f6:	0fc9      	lsrs	r1, r1, #31
100145f8:	00c4      	lsls	r4, r0, #3
100145fa:	0d6d      	lsrs	r5, r5, #21
100145fc:	2d01      	cmp	r5, #1
100145fe:	dd2a      	ble.n	10014656 <__aeabi_d2f+0x72>
10014600:	4b3b      	ldr	r3, [pc, #236]	; (100146f0 <__aeabi_d2f+0x10c>)
10014602:	18f3      	adds	r3, r6, r3
10014604:	2bfe      	cmp	r3, #254	; 0xfe
10014606:	dc1a      	bgt.n	1001463e <__aeabi_d2f+0x5a>
10014608:	2b00      	cmp	r3, #0
1001460a:	dd42      	ble.n	10014692 <__aeabi_d2f+0xae>
1001460c:	0180      	lsls	r0, r0, #6
1001460e:	1e45      	subs	r5, r0, #1
10014610:	41a8      	sbcs	r0, r5
10014612:	00d2      	lsls	r2, r2, #3
10014614:	4310      	orrs	r0, r2
10014616:	0f62      	lsrs	r2, r4, #29
10014618:	4302      	orrs	r2, r0
1001461a:	0750      	lsls	r0, r2, #29
1001461c:	d004      	beq.n	10014628 <__aeabi_d2f+0x44>
1001461e:	200f      	movs	r0, #15
10014620:	4010      	ands	r0, r2
10014622:	2804      	cmp	r0, #4
10014624:	d000      	beq.n	10014628 <__aeabi_d2f+0x44>
10014626:	3204      	adds	r2, #4
10014628:	2080      	movs	r0, #128	; 0x80
1001462a:	04c0      	lsls	r0, r0, #19
1001462c:	4010      	ands	r0, r2
1001462e:	d021      	beq.n	10014674 <__aeabi_d2f+0x90>
10014630:	3301      	adds	r3, #1
10014632:	2bff      	cmp	r3, #255	; 0xff
10014634:	d003      	beq.n	1001463e <__aeabi_d2f+0x5a>
10014636:	0192      	lsls	r2, r2, #6
10014638:	0a52      	lsrs	r2, r2, #9
1001463a:	b2db      	uxtb	r3, r3
1001463c:	e001      	b.n	10014642 <__aeabi_d2f+0x5e>
1001463e:	23ff      	movs	r3, #255	; 0xff
10014640:	2200      	movs	r2, #0
10014642:	0252      	lsls	r2, r2, #9
10014644:	0a52      	lsrs	r2, r2, #9
10014646:	05db      	lsls	r3, r3, #23
10014648:	4313      	orrs	r3, r2
1001464a:	005b      	lsls	r3, r3, #1
1001464c:	07c9      	lsls	r1, r1, #31
1001464e:	085b      	lsrs	r3, r3, #1
10014650:	430b      	orrs	r3, r1
10014652:	0018      	movs	r0, r3
10014654:	bd70      	pop	{r4, r5, r6, pc}
10014656:	2e00      	cmp	r6, #0
10014658:	d007      	beq.n	1001466a <__aeabi_d2f+0x86>
1001465a:	4314      	orrs	r4, r2
1001465c:	d0ef      	beq.n	1001463e <__aeabi_d2f+0x5a>
1001465e:	2080      	movs	r0, #128	; 0x80
10014660:	00d2      	lsls	r2, r2, #3
10014662:	0480      	lsls	r0, r0, #18
10014664:	4302      	orrs	r2, r0
10014666:	23ff      	movs	r3, #255	; 0xff
10014668:	e7d7      	b.n	1001461a <__aeabi_d2f+0x36>
1001466a:	4322      	orrs	r2, r4
1001466c:	2300      	movs	r3, #0
1001466e:	2a00      	cmp	r2, #0
10014670:	d003      	beq.n	1001467a <__aeabi_d2f+0x96>
10014672:	2205      	movs	r2, #5
10014674:	08d2      	lsrs	r2, r2, #3
10014676:	2bff      	cmp	r3, #255	; 0xff
10014678:	d003      	beq.n	10014682 <__aeabi_d2f+0x9e>
1001467a:	0252      	lsls	r2, r2, #9
1001467c:	0a52      	lsrs	r2, r2, #9
1001467e:	b2db      	uxtb	r3, r3
10014680:	e7df      	b.n	10014642 <__aeabi_d2f+0x5e>
10014682:	2a00      	cmp	r2, #0
10014684:	d032      	beq.n	100146ec <__aeabi_d2f+0x108>
10014686:	2080      	movs	r0, #128	; 0x80
10014688:	03c0      	lsls	r0, r0, #15
1001468a:	4302      	orrs	r2, r0
1001468c:	0252      	lsls	r2, r2, #9
1001468e:	0a52      	lsrs	r2, r2, #9
10014690:	e7d7      	b.n	10014642 <__aeabi_d2f+0x5e>
10014692:	0018      	movs	r0, r3
10014694:	3017      	adds	r0, #23
10014696:	db14      	blt.n	100146c2 <__aeabi_d2f+0xde>
10014698:	2080      	movs	r0, #128	; 0x80
1001469a:	0400      	lsls	r0, r0, #16
1001469c:	4302      	orrs	r2, r0
1001469e:	201e      	movs	r0, #30
100146a0:	1ac0      	subs	r0, r0, r3
100146a2:	281f      	cmp	r0, #31
100146a4:	dc0f      	bgt.n	100146c6 <__aeabi_d2f+0xe2>
100146a6:	0025      	movs	r5, r4
100146a8:	4b12      	ldr	r3, [pc, #72]	; (100146f4 <__aeabi_d2f+0x110>)
100146aa:	18f3      	adds	r3, r6, r3
100146ac:	409d      	lsls	r5, r3
100146ae:	1e6e      	subs	r6, r5, #1
100146b0:	41b5      	sbcs	r5, r6
100146b2:	409a      	lsls	r2, r3
100146b4:	002b      	movs	r3, r5
100146b6:	4313      	orrs	r3, r2
100146b8:	0022      	movs	r2, r4
100146ba:	40c2      	lsrs	r2, r0
100146bc:	431a      	orrs	r2, r3
100146be:	2300      	movs	r3, #0
100146c0:	e7ab      	b.n	1001461a <__aeabi_d2f+0x36>
100146c2:	2300      	movs	r3, #0
100146c4:	e7d5      	b.n	10014672 <__aeabi_d2f+0x8e>
100146c6:	2502      	movs	r5, #2
100146c8:	426d      	negs	r5, r5
100146ca:	1aeb      	subs	r3, r5, r3
100146cc:	0015      	movs	r5, r2
100146ce:	40dd      	lsrs	r5, r3
100146d0:	2820      	cmp	r0, #32
100146d2:	d009      	beq.n	100146e8 <__aeabi_d2f+0x104>
100146d4:	4b08      	ldr	r3, [pc, #32]	; (100146f8 <__aeabi_d2f+0x114>)
100146d6:	18f3      	adds	r3, r6, r3
100146d8:	409a      	lsls	r2, r3
100146da:	4314      	orrs	r4, r2
100146dc:	1e62      	subs	r2, r4, #1
100146de:	4194      	sbcs	r4, r2
100146e0:	0022      	movs	r2, r4
100146e2:	2300      	movs	r3, #0
100146e4:	432a      	orrs	r2, r5
100146e6:	e798      	b.n	1001461a <__aeabi_d2f+0x36>
100146e8:	2200      	movs	r2, #0
100146ea:	e7f6      	b.n	100146da <__aeabi_d2f+0xf6>
100146ec:	2200      	movs	r2, #0
100146ee:	e7a8      	b.n	10014642 <__aeabi_d2f+0x5e>
100146f0:	fffffc80 	.word	0xfffffc80
100146f4:	fffffc82 	.word	0xfffffc82
100146f8:	fffffca2 	.word	0xfffffca2

100146fc <__clzsi2>:
100146fc:	211c      	movs	r1, #28
100146fe:	2301      	movs	r3, #1
10014700:	041b      	lsls	r3, r3, #16
10014702:	4298      	cmp	r0, r3
10014704:	d301      	bcc.n	1001470a <__clzsi2+0xe>
10014706:	0c00      	lsrs	r0, r0, #16
10014708:	3910      	subs	r1, #16
1001470a:	0a1b      	lsrs	r3, r3, #8
1001470c:	4298      	cmp	r0, r3
1001470e:	d301      	bcc.n	10014714 <__clzsi2+0x18>
10014710:	0a00      	lsrs	r0, r0, #8
10014712:	3908      	subs	r1, #8
10014714:	091b      	lsrs	r3, r3, #4
10014716:	4298      	cmp	r0, r3
10014718:	d301      	bcc.n	1001471e <__clzsi2+0x22>
1001471a:	0900      	lsrs	r0, r0, #4
1001471c:	3904      	subs	r1, #4
1001471e:	a202      	add	r2, pc, #8	; (adr r2, 10014728 <__clzsi2+0x2c>)
10014720:	5c10      	ldrb	r0, [r2, r0]
10014722:	1840      	adds	r0, r0, r1
10014724:	4770      	bx	lr
10014726:	46c0      	nop			; (mov r8, r8)
10014728:	02020304 	.word	0x02020304
1001472c:	01010101 	.word	0x01010101
	...

10014738 <__errno>:
10014738:	4b01      	ldr	r3, [pc, #4]	; (10014740 <__errno+0x8>)
1001473a:	6818      	ldr	r0, [r3, #0]
1001473c:	4770      	bx	lr
1001473e:	46c0      	nop			; (mov r8, r8)
10014740:	100173f8 	.word	0x100173f8

10014744 <__libc_init_array>:
10014744:	4b0e      	ldr	r3, [pc, #56]	; (10014780 <__libc_init_array+0x3c>)
10014746:	b570      	push	{r4, r5, r6, lr}
10014748:	2500      	movs	r5, #0
1001474a:	001e      	movs	r6, r3
1001474c:	4c0d      	ldr	r4, [pc, #52]	; (10014784 <__libc_init_array+0x40>)
1001474e:	1ae4      	subs	r4, r4, r3
10014750:	10a4      	asrs	r4, r4, #2
10014752:	42a5      	cmp	r5, r4
10014754:	d004      	beq.n	10014760 <__libc_init_array+0x1c>
10014756:	00ab      	lsls	r3, r5, #2
10014758:	58f3      	ldr	r3, [r6, r3]
1001475a:	4798      	blx	r3
1001475c:	3501      	adds	r5, #1
1001475e:	e7f8      	b.n	10014752 <__libc_init_array+0xe>
10014760:	f002 fe04 	bl	1001736c <_init>
10014764:	4b08      	ldr	r3, [pc, #32]	; (10014788 <__libc_init_array+0x44>)
10014766:	2500      	movs	r5, #0
10014768:	001e      	movs	r6, r3
1001476a:	4c08      	ldr	r4, [pc, #32]	; (1001478c <__libc_init_array+0x48>)
1001476c:	1ae4      	subs	r4, r4, r3
1001476e:	10a4      	asrs	r4, r4, #2
10014770:	42a5      	cmp	r5, r4
10014772:	d004      	beq.n	1001477e <__libc_init_array+0x3a>
10014774:	00ab      	lsls	r3, r5, #2
10014776:	58f3      	ldr	r3, [r6, r3]
10014778:	4798      	blx	r3
1001477a:	3501      	adds	r5, #1
1001477c:	e7f8      	b.n	10014770 <__libc_init_array+0x2c>
1001477e:	bd70      	pop	{r4, r5, r6, pc}
10014780:	10017378 	.word	0x10017378
10014784:	10017378 	.word	0x10017378
10014788:	10017378 	.word	0x10017378
1001478c:	1001737c 	.word	0x1001737c

10014790 <malloc>:
10014790:	b510      	push	{r4, lr}
10014792:	4b03      	ldr	r3, [pc, #12]	; (100147a0 <malloc+0x10>)
10014794:	0001      	movs	r1, r0
10014796:	6818      	ldr	r0, [r3, #0]
10014798:	f000 f86a 	bl	10014870 <_malloc_r>
1001479c:	bd10      	pop	{r4, pc}
1001479e:	46c0      	nop			; (mov r8, r8)
100147a0:	100173f8 	.word	0x100173f8

100147a4 <memcmp>:
100147a4:	b530      	push	{r4, r5, lr}
100147a6:	2400      	movs	r4, #0
100147a8:	42a2      	cmp	r2, r4
100147aa:	d008      	beq.n	100147be <memcmp+0x1a>
100147ac:	5d03      	ldrb	r3, [r0, r4]
100147ae:	1c65      	adds	r5, r4, #1
100147b0:	5d0c      	ldrb	r4, [r1, r4]
100147b2:	42a3      	cmp	r3, r4
100147b4:	d001      	beq.n	100147ba <memcmp+0x16>
100147b6:	1b18      	subs	r0, r3, r4
100147b8:	e002      	b.n	100147c0 <memcmp+0x1c>
100147ba:	002c      	movs	r4, r5
100147bc:	e7f4      	b.n	100147a8 <memcmp+0x4>
100147be:	2000      	movs	r0, #0
100147c0:	bd30      	pop	{r4, r5, pc}

100147c2 <memcpy>:
100147c2:	2300      	movs	r3, #0
100147c4:	b510      	push	{r4, lr}
100147c6:	429a      	cmp	r2, r3
100147c8:	d003      	beq.n	100147d2 <memcpy+0x10>
100147ca:	5ccc      	ldrb	r4, [r1, r3]
100147cc:	54c4      	strb	r4, [r0, r3]
100147ce:	3301      	adds	r3, #1
100147d0:	e7f9      	b.n	100147c6 <memcpy+0x4>
100147d2:	bd10      	pop	{r4, pc}

100147d4 <memset>:
100147d4:	0003      	movs	r3, r0
100147d6:	1882      	adds	r2, r0, r2
100147d8:	4293      	cmp	r3, r2
100147da:	d002      	beq.n	100147e2 <memset+0xe>
100147dc:	7019      	strb	r1, [r3, #0]
100147de:	3301      	adds	r3, #1
100147e0:	e7fa      	b.n	100147d8 <memset+0x4>
100147e2:	4770      	bx	lr

100147e4 <_free_r>:
100147e4:	b530      	push	{r4, r5, lr}
100147e6:	2900      	cmp	r1, #0
100147e8:	d03e      	beq.n	10014868 <_free_r+0x84>
100147ea:	3904      	subs	r1, #4
100147ec:	680b      	ldr	r3, [r1, #0]
100147ee:	2b00      	cmp	r3, #0
100147f0:	da00      	bge.n	100147f4 <_free_r+0x10>
100147f2:	18c9      	adds	r1, r1, r3
100147f4:	4a1d      	ldr	r2, [pc, #116]	; (1001486c <_free_r+0x88>)
100147f6:	6813      	ldr	r3, [r2, #0]
100147f8:	0014      	movs	r4, r2
100147fa:	2b00      	cmp	r3, #0
100147fc:	d102      	bne.n	10014804 <_free_r+0x20>
100147fe:	604b      	str	r3, [r1, #4]
10014800:	6011      	str	r1, [r2, #0]
10014802:	e031      	b.n	10014868 <_free_r+0x84>
10014804:	428b      	cmp	r3, r1
10014806:	d90d      	bls.n	10014824 <_free_r+0x40>
10014808:	680a      	ldr	r2, [r1, #0]
1001480a:	1888      	adds	r0, r1, r2
1001480c:	4283      	cmp	r3, r0
1001480e:	d103      	bne.n	10014818 <_free_r+0x34>
10014810:	6818      	ldr	r0, [r3, #0]
10014812:	685b      	ldr	r3, [r3, #4]
10014814:	1882      	adds	r2, r0, r2
10014816:	600a      	str	r2, [r1, #0]
10014818:	604b      	str	r3, [r1, #4]
1001481a:	6021      	str	r1, [r4, #0]
1001481c:	e024      	b.n	10014868 <_free_r+0x84>
1001481e:	428a      	cmp	r2, r1
10014820:	d803      	bhi.n	1001482a <_free_r+0x46>
10014822:	0013      	movs	r3, r2
10014824:	685a      	ldr	r2, [r3, #4]
10014826:	2a00      	cmp	r2, #0
10014828:	d1f9      	bne.n	1001481e <_free_r+0x3a>
1001482a:	681d      	ldr	r5, [r3, #0]
1001482c:	195c      	adds	r4, r3, r5
1001482e:	428c      	cmp	r4, r1
10014830:	d10b      	bne.n	1001484a <_free_r+0x66>
10014832:	6809      	ldr	r1, [r1, #0]
10014834:	1869      	adds	r1, r5, r1
10014836:	1858      	adds	r0, r3, r1
10014838:	6019      	str	r1, [r3, #0]
1001483a:	4282      	cmp	r2, r0
1001483c:	d114      	bne.n	10014868 <_free_r+0x84>
1001483e:	6810      	ldr	r0, [r2, #0]
10014840:	6852      	ldr	r2, [r2, #4]
10014842:	1841      	adds	r1, r0, r1
10014844:	6019      	str	r1, [r3, #0]
10014846:	605a      	str	r2, [r3, #4]
10014848:	e00e      	b.n	10014868 <_free_r+0x84>
1001484a:	428c      	cmp	r4, r1
1001484c:	d902      	bls.n	10014854 <_free_r+0x70>
1001484e:	230c      	movs	r3, #12
10014850:	6003      	str	r3, [r0, #0]
10014852:	e009      	b.n	10014868 <_free_r+0x84>
10014854:	6808      	ldr	r0, [r1, #0]
10014856:	180c      	adds	r4, r1, r0
10014858:	42a2      	cmp	r2, r4
1001485a:	d103      	bne.n	10014864 <_free_r+0x80>
1001485c:	6814      	ldr	r4, [r2, #0]
1001485e:	6852      	ldr	r2, [r2, #4]
10014860:	1820      	adds	r0, r4, r0
10014862:	6008      	str	r0, [r1, #0]
10014864:	604a      	str	r2, [r1, #4]
10014866:	6059      	str	r1, [r3, #4]
10014868:	bd30      	pop	{r4, r5, pc}
1001486a:	46c0      	nop			; (mov r8, r8)
1001486c:	10018ebc 	.word	0x10018ebc

10014870 <_malloc_r>:
10014870:	2303      	movs	r3, #3
10014872:	b570      	push	{r4, r5, r6, lr}
10014874:	1ccd      	adds	r5, r1, #3
10014876:	439d      	bics	r5, r3
10014878:	3508      	adds	r5, #8
1001487a:	0006      	movs	r6, r0
1001487c:	2d0c      	cmp	r5, #12
1001487e:	d201      	bcs.n	10014884 <_malloc_r+0x14>
10014880:	250c      	movs	r5, #12
10014882:	e005      	b.n	10014890 <_malloc_r+0x20>
10014884:	2d00      	cmp	r5, #0
10014886:	da03      	bge.n	10014890 <_malloc_r+0x20>
10014888:	230c      	movs	r3, #12
1001488a:	2000      	movs	r0, #0
1001488c:	6033      	str	r3, [r6, #0]
1001488e:	e040      	b.n	10014912 <_malloc_r+0xa2>
10014890:	42a9      	cmp	r1, r5
10014892:	d8f9      	bhi.n	10014888 <_malloc_r+0x18>
10014894:	4b1f      	ldr	r3, [pc, #124]	; (10014914 <_malloc_r+0xa4>)
10014896:	681c      	ldr	r4, [r3, #0]
10014898:	001a      	movs	r2, r3
1001489a:	0021      	movs	r1, r4
1001489c:	2900      	cmp	r1, #0
1001489e:	d013      	beq.n	100148c8 <_malloc_r+0x58>
100148a0:	680b      	ldr	r3, [r1, #0]
100148a2:	1b5b      	subs	r3, r3, r5
100148a4:	d40d      	bmi.n	100148c2 <_malloc_r+0x52>
100148a6:	2b0b      	cmp	r3, #11
100148a8:	d902      	bls.n	100148b0 <_malloc_r+0x40>
100148aa:	600b      	str	r3, [r1, #0]
100148ac:	18cc      	adds	r4, r1, r3
100148ae:	e01e      	b.n	100148ee <_malloc_r+0x7e>
100148b0:	428c      	cmp	r4, r1
100148b2:	d102      	bne.n	100148ba <_malloc_r+0x4a>
100148b4:	6863      	ldr	r3, [r4, #4]
100148b6:	6013      	str	r3, [r2, #0]
100148b8:	e01a      	b.n	100148f0 <_malloc_r+0x80>
100148ba:	684b      	ldr	r3, [r1, #4]
100148bc:	6063      	str	r3, [r4, #4]
100148be:	000c      	movs	r4, r1
100148c0:	e016      	b.n	100148f0 <_malloc_r+0x80>
100148c2:	000c      	movs	r4, r1
100148c4:	6849      	ldr	r1, [r1, #4]
100148c6:	e7e9      	b.n	1001489c <_malloc_r+0x2c>
100148c8:	4c13      	ldr	r4, [pc, #76]	; (10014918 <_malloc_r+0xa8>)
100148ca:	6823      	ldr	r3, [r4, #0]
100148cc:	2b00      	cmp	r3, #0
100148ce:	d103      	bne.n	100148d8 <_malloc_r+0x68>
100148d0:	0030      	movs	r0, r6
100148d2:	f000 f8f9 	bl	10014ac8 <_sbrk_r>
100148d6:	6020      	str	r0, [r4, #0]
100148d8:	0029      	movs	r1, r5
100148da:	0030      	movs	r0, r6
100148dc:	f000 f8f4 	bl	10014ac8 <_sbrk_r>
100148e0:	1c43      	adds	r3, r0, #1
100148e2:	d0d1      	beq.n	10014888 <_malloc_r+0x18>
100148e4:	2303      	movs	r3, #3
100148e6:	1cc4      	adds	r4, r0, #3
100148e8:	439c      	bics	r4, r3
100148ea:	42a0      	cmp	r0, r4
100148ec:	d10a      	bne.n	10014904 <_malloc_r+0x94>
100148ee:	6025      	str	r5, [r4, #0]
100148f0:	0020      	movs	r0, r4
100148f2:	2207      	movs	r2, #7
100148f4:	300b      	adds	r0, #11
100148f6:	1d23      	adds	r3, r4, #4
100148f8:	4390      	bics	r0, r2
100148fa:	1ac3      	subs	r3, r0, r3
100148fc:	d009      	beq.n	10014912 <_malloc_r+0xa2>
100148fe:	425a      	negs	r2, r3
10014900:	50e2      	str	r2, [r4, r3]
10014902:	e006      	b.n	10014912 <_malloc_r+0xa2>
10014904:	1a21      	subs	r1, r4, r0
10014906:	0030      	movs	r0, r6
10014908:	f000 f8de 	bl	10014ac8 <_sbrk_r>
1001490c:	1c43      	adds	r3, r0, #1
1001490e:	d1ee      	bne.n	100148ee <_malloc_r+0x7e>
10014910:	e7ba      	b.n	10014888 <_malloc_r+0x18>
10014912:	bd70      	pop	{r4, r5, r6, pc}
10014914:	10018ebc 	.word	0x10018ebc
10014918:	10018eb8 	.word	0x10018eb8

1001491c <iprintf>:
1001491c:	b40f      	push	{r0, r1, r2, r3}
1001491e:	4b0b      	ldr	r3, [pc, #44]	; (1001494c <iprintf+0x30>)
10014920:	b513      	push	{r0, r1, r4, lr}
10014922:	681c      	ldr	r4, [r3, #0]
10014924:	2c00      	cmp	r4, #0
10014926:	d005      	beq.n	10014934 <iprintf+0x18>
10014928:	69a3      	ldr	r3, [r4, #24]
1001492a:	2b00      	cmp	r3, #0
1001492c:	d102      	bne.n	10014934 <iprintf+0x18>
1001492e:	0020      	movs	r0, r4
10014930:	f000 fb58 	bl	10014fe4 <__sinit>
10014934:	ab05      	add	r3, sp, #20
10014936:	9a04      	ldr	r2, [sp, #16]
10014938:	68a1      	ldr	r1, [r4, #8]
1001493a:	0020      	movs	r0, r4
1001493c:	9301      	str	r3, [sp, #4]
1001493e:	f000 fc71 	bl	10015224 <_vfiprintf_r>
10014942:	bc16      	pop	{r1, r2, r4}
10014944:	bc08      	pop	{r3}
10014946:	b004      	add	sp, #16
10014948:	4718      	bx	r3
1001494a:	46c0      	nop			; (mov r8, r8)
1001494c:	100173f8 	.word	0x100173f8

10014950 <putchar>:
10014950:	4b08      	ldr	r3, [pc, #32]	; (10014974 <putchar+0x24>)
10014952:	b570      	push	{r4, r5, r6, lr}
10014954:	681c      	ldr	r4, [r3, #0]
10014956:	0005      	movs	r5, r0
10014958:	2c00      	cmp	r4, #0
1001495a:	d005      	beq.n	10014968 <putchar+0x18>
1001495c:	69a3      	ldr	r3, [r4, #24]
1001495e:	2b00      	cmp	r3, #0
10014960:	d102      	bne.n	10014968 <putchar+0x18>
10014962:	0020      	movs	r0, r4
10014964:	f000 fb3e 	bl	10014fe4 <__sinit>
10014968:	0029      	movs	r1, r5
1001496a:	68a2      	ldr	r2, [r4, #8]
1001496c:	0020      	movs	r0, r4
1001496e:	f000 ff05 	bl	1001577c <_putc_r>
10014972:	bd70      	pop	{r4, r5, r6, pc}
10014974:	100173f8 	.word	0x100173f8

10014978 <_puts_r>:
10014978:	b570      	push	{r4, r5, r6, lr}
1001497a:	0005      	movs	r5, r0
1001497c:	000e      	movs	r6, r1
1001497e:	2800      	cmp	r0, #0
10014980:	d004      	beq.n	1001498c <_puts_r+0x14>
10014982:	6983      	ldr	r3, [r0, #24]
10014984:	2b00      	cmp	r3, #0
10014986:	d101      	bne.n	1001498c <_puts_r+0x14>
10014988:	f000 fb2c 	bl	10014fe4 <__sinit>
1001498c:	69ab      	ldr	r3, [r5, #24]
1001498e:	68ac      	ldr	r4, [r5, #8]
10014990:	2b00      	cmp	r3, #0
10014992:	d102      	bne.n	1001499a <_puts_r+0x22>
10014994:	0028      	movs	r0, r5
10014996:	f000 fb25 	bl	10014fe4 <__sinit>
1001499a:	4b25      	ldr	r3, [pc, #148]	; (10014a30 <_puts_r+0xb8>)
1001499c:	429c      	cmp	r4, r3
1001499e:	d101      	bne.n	100149a4 <_puts_r+0x2c>
100149a0:	686c      	ldr	r4, [r5, #4]
100149a2:	e008      	b.n	100149b6 <_puts_r+0x3e>
100149a4:	4b23      	ldr	r3, [pc, #140]	; (10014a34 <_puts_r+0xbc>)
100149a6:	429c      	cmp	r4, r3
100149a8:	d101      	bne.n	100149ae <_puts_r+0x36>
100149aa:	68ac      	ldr	r4, [r5, #8]
100149ac:	e003      	b.n	100149b6 <_puts_r+0x3e>
100149ae:	4b22      	ldr	r3, [pc, #136]	; (10014a38 <_puts_r+0xc0>)
100149b0:	429c      	cmp	r4, r3
100149b2:	d100      	bne.n	100149b6 <_puts_r+0x3e>
100149b4:	68ec      	ldr	r4, [r5, #12]
100149b6:	89a3      	ldrh	r3, [r4, #12]
100149b8:	071b      	lsls	r3, r3, #28
100149ba:	d502      	bpl.n	100149c2 <_puts_r+0x4a>
100149bc:	6923      	ldr	r3, [r4, #16]
100149be:	2b00      	cmp	r3, #0
100149c0:	d111      	bne.n	100149e6 <_puts_r+0x6e>
100149c2:	0021      	movs	r1, r4
100149c4:	0028      	movs	r0, r5
100149c6:	f000 f9a3 	bl	10014d10 <__swsetup_r>
100149ca:	2800      	cmp	r0, #0
100149cc:	d00b      	beq.n	100149e6 <_puts_r+0x6e>
100149ce:	2001      	movs	r0, #1
100149d0:	4240      	negs	r0, r0
100149d2:	e02b      	b.n	10014a2c <_puts_r+0xb4>
100149d4:	3b01      	subs	r3, #1
100149d6:	3601      	adds	r6, #1
100149d8:	60a3      	str	r3, [r4, #8]
100149da:	2b00      	cmp	r3, #0
100149dc:	db08      	blt.n	100149f0 <_puts_r+0x78>
100149de:	6823      	ldr	r3, [r4, #0]
100149e0:	1c5a      	adds	r2, r3, #1
100149e2:	6022      	str	r2, [r4, #0]
100149e4:	7019      	strb	r1, [r3, #0]
100149e6:	7831      	ldrb	r1, [r6, #0]
100149e8:	68a3      	ldr	r3, [r4, #8]
100149ea:	2900      	cmp	r1, #0
100149ec:	d1f2      	bne.n	100149d4 <_puts_r+0x5c>
100149ee:	e00b      	b.n	10014a08 <_puts_r+0x90>
100149f0:	69a2      	ldr	r2, [r4, #24]
100149f2:	4293      	cmp	r3, r2
100149f4:	db01      	blt.n	100149fa <_puts_r+0x82>
100149f6:	290a      	cmp	r1, #10
100149f8:	d1f1      	bne.n	100149de <_puts_r+0x66>
100149fa:	0022      	movs	r2, r4
100149fc:	0028      	movs	r0, r5
100149fe:	f000 f92f 	bl	10014c60 <__swbuf_r>
10014a02:	1c43      	adds	r3, r0, #1
10014a04:	d1ef      	bne.n	100149e6 <_puts_r+0x6e>
10014a06:	e7e2      	b.n	100149ce <_puts_r+0x56>
10014a08:	3b01      	subs	r3, #1
10014a0a:	60a3      	str	r3, [r4, #8]
10014a0c:	2b00      	cmp	r3, #0
10014a0e:	da08      	bge.n	10014a22 <_puts_r+0xaa>
10014a10:	0022      	movs	r2, r4
10014a12:	310a      	adds	r1, #10
10014a14:	0028      	movs	r0, r5
10014a16:	f000 f923 	bl	10014c60 <__swbuf_r>
10014a1a:	1c43      	adds	r3, r0, #1
10014a1c:	d0d7      	beq.n	100149ce <_puts_r+0x56>
10014a1e:	200a      	movs	r0, #10
10014a20:	e004      	b.n	10014a2c <_puts_r+0xb4>
10014a22:	200a      	movs	r0, #10
10014a24:	6823      	ldr	r3, [r4, #0]
10014a26:	1c5a      	adds	r2, r3, #1
10014a28:	6022      	str	r2, [r4, #0]
10014a2a:	7018      	strb	r0, [r3, #0]
10014a2c:	bd70      	pop	{r4, r5, r6, pc}
10014a2e:	46c0      	nop			; (mov r8, r8)
10014a30:	100172d8 	.word	0x100172d8
10014a34:	100172f8 	.word	0x100172f8
10014a38:	10017318 	.word	0x10017318

10014a3c <puts>:
10014a3c:	b510      	push	{r4, lr}
10014a3e:	4b03      	ldr	r3, [pc, #12]	; (10014a4c <puts+0x10>)
10014a40:	0001      	movs	r1, r0
10014a42:	6818      	ldr	r0, [r3, #0]
10014a44:	f7ff ff98 	bl	10014978 <_puts_r>
10014a48:	bd10      	pop	{r4, pc}
10014a4a:	46c0      	nop			; (mov r8, r8)
10014a4c:	100173f8 	.word	0x100173f8

10014a50 <rand>:
10014a50:	4b15      	ldr	r3, [pc, #84]	; (10014aa8 <rand+0x58>)
10014a52:	b510      	push	{r4, lr}
10014a54:	681c      	ldr	r4, [r3, #0]
10014a56:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10014a58:	2b00      	cmp	r3, #0
10014a5a:	d115      	bne.n	10014a88 <rand+0x38>
10014a5c:	2018      	movs	r0, #24
10014a5e:	f7ff fe97 	bl	10014790 <malloc>
10014a62:	4b12      	ldr	r3, [pc, #72]	; (10014aac <rand+0x5c>)
10014a64:	63a0      	str	r0, [r4, #56]	; 0x38
10014a66:	8003      	strh	r3, [r0, #0]
10014a68:	4b11      	ldr	r3, [pc, #68]	; (10014ab0 <rand+0x60>)
10014a6a:	2201      	movs	r2, #1
10014a6c:	8043      	strh	r3, [r0, #2]
10014a6e:	4b11      	ldr	r3, [pc, #68]	; (10014ab4 <rand+0x64>)
10014a70:	8083      	strh	r3, [r0, #4]
10014a72:	4b11      	ldr	r3, [pc, #68]	; (10014ab8 <rand+0x68>)
10014a74:	80c3      	strh	r3, [r0, #6]
10014a76:	4b11      	ldr	r3, [pc, #68]	; (10014abc <rand+0x6c>)
10014a78:	8103      	strh	r3, [r0, #8]
10014a7a:	2305      	movs	r3, #5
10014a7c:	8143      	strh	r3, [r0, #10]
10014a7e:	3306      	adds	r3, #6
10014a80:	8183      	strh	r3, [r0, #12]
10014a82:	2300      	movs	r3, #0
10014a84:	6102      	str	r2, [r0, #16]
10014a86:	6143      	str	r3, [r0, #20]
10014a88:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10014a8a:	4a0d      	ldr	r2, [pc, #52]	; (10014ac0 <rand+0x70>)
10014a8c:	6920      	ldr	r0, [r4, #16]
10014a8e:	6961      	ldr	r1, [r4, #20]
10014a90:	4b0c      	ldr	r3, [pc, #48]	; (10014ac4 <rand+0x74>)
10014a92:	f7fd fc67 	bl	10012364 <__aeabi_lmul>
10014a96:	2201      	movs	r2, #1
10014a98:	2300      	movs	r3, #0
10014a9a:	1880      	adds	r0, r0, r2
10014a9c:	4159      	adcs	r1, r3
10014a9e:	6120      	str	r0, [r4, #16]
10014aa0:	6161      	str	r1, [r4, #20]
10014aa2:	0048      	lsls	r0, r1, #1
10014aa4:	0840      	lsrs	r0, r0, #1
10014aa6:	bd10      	pop	{r4, pc}
10014aa8:	100173f8 	.word	0x100173f8
10014aac:	0000330e 	.word	0x0000330e
10014ab0:	ffffabcd 	.word	0xffffabcd
10014ab4:	00001234 	.word	0x00001234
10014ab8:	ffffe66d 	.word	0xffffe66d
10014abc:	ffffdeec 	.word	0xffffdeec
10014ac0:	4c957f2d 	.word	0x4c957f2d
10014ac4:	5851f42d 	.word	0x5851f42d

10014ac8 <_sbrk_r>:
10014ac8:	2300      	movs	r3, #0
10014aca:	b570      	push	{r4, r5, r6, lr}
10014acc:	4c06      	ldr	r4, [pc, #24]	; (10014ae8 <_sbrk_r+0x20>)
10014ace:	0005      	movs	r5, r0
10014ad0:	0008      	movs	r0, r1
10014ad2:	6023      	str	r3, [r4, #0]
10014ad4:	f7f3 fc92 	bl	100083fc <_sbrk>
10014ad8:	1c43      	adds	r3, r0, #1
10014ada:	d103      	bne.n	10014ae4 <_sbrk_r+0x1c>
10014adc:	6823      	ldr	r3, [r4, #0]
10014ade:	2b00      	cmp	r3, #0
10014ae0:	d000      	beq.n	10014ae4 <_sbrk_r+0x1c>
10014ae2:	602b      	str	r3, [r5, #0]
10014ae4:	bd70      	pop	{r4, r5, r6, pc}
10014ae6:	46c0      	nop			; (mov r8, r8)
10014ae8:	1001a310 	.word	0x1001a310

10014aec <setbuf>:
10014aec:	424a      	negs	r2, r1
10014aee:	414a      	adcs	r2, r1
10014af0:	2380      	movs	r3, #128	; 0x80
10014af2:	b510      	push	{r4, lr}
10014af4:	0052      	lsls	r2, r2, #1
10014af6:	00db      	lsls	r3, r3, #3
10014af8:	f000 f802 	bl	10014b00 <setvbuf>
10014afc:	bd10      	pop	{r4, pc}
	...

10014b00 <setvbuf>:
10014b00:	b5f0      	push	{r4, r5, r6, r7, lr}
10014b02:	001d      	movs	r5, r3
10014b04:	4b51      	ldr	r3, [pc, #324]	; (10014c4c <setvbuf+0x14c>)
10014b06:	b085      	sub	sp, #20
10014b08:	681e      	ldr	r6, [r3, #0]
10014b0a:	0004      	movs	r4, r0
10014b0c:	000f      	movs	r7, r1
10014b0e:	9200      	str	r2, [sp, #0]
10014b10:	2e00      	cmp	r6, #0
10014b12:	d005      	beq.n	10014b20 <setvbuf+0x20>
10014b14:	69b3      	ldr	r3, [r6, #24]
10014b16:	2b00      	cmp	r3, #0
10014b18:	d102      	bne.n	10014b20 <setvbuf+0x20>
10014b1a:	0030      	movs	r0, r6
10014b1c:	f000 fa62 	bl	10014fe4 <__sinit>
10014b20:	4b4b      	ldr	r3, [pc, #300]	; (10014c50 <setvbuf+0x150>)
10014b22:	429c      	cmp	r4, r3
10014b24:	d101      	bne.n	10014b2a <setvbuf+0x2a>
10014b26:	6874      	ldr	r4, [r6, #4]
10014b28:	e008      	b.n	10014b3c <setvbuf+0x3c>
10014b2a:	4b4a      	ldr	r3, [pc, #296]	; (10014c54 <setvbuf+0x154>)
10014b2c:	429c      	cmp	r4, r3
10014b2e:	d101      	bne.n	10014b34 <setvbuf+0x34>
10014b30:	68b4      	ldr	r4, [r6, #8]
10014b32:	e003      	b.n	10014b3c <setvbuf+0x3c>
10014b34:	4b48      	ldr	r3, [pc, #288]	; (10014c58 <setvbuf+0x158>)
10014b36:	429c      	cmp	r4, r3
10014b38:	d100      	bne.n	10014b3c <setvbuf+0x3c>
10014b3a:	68f4      	ldr	r4, [r6, #12]
10014b3c:	9b00      	ldr	r3, [sp, #0]
10014b3e:	2b02      	cmp	r3, #2
10014b40:	d005      	beq.n	10014b4e <setvbuf+0x4e>
10014b42:	2b01      	cmp	r3, #1
10014b44:	d900      	bls.n	10014b48 <setvbuf+0x48>
10014b46:	e07c      	b.n	10014c42 <setvbuf+0x142>
10014b48:	2d00      	cmp	r5, #0
10014b4a:	da00      	bge.n	10014b4e <setvbuf+0x4e>
10014b4c:	e079      	b.n	10014c42 <setvbuf+0x142>
10014b4e:	0021      	movs	r1, r4
10014b50:	0030      	movs	r0, r6
10014b52:	f000 f9d9 	bl	10014f08 <_fflush_r>
10014b56:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014b58:	2900      	cmp	r1, #0
10014b5a:	d008      	beq.n	10014b6e <setvbuf+0x6e>
10014b5c:	0023      	movs	r3, r4
10014b5e:	3344      	adds	r3, #68	; 0x44
10014b60:	4299      	cmp	r1, r3
10014b62:	d002      	beq.n	10014b6a <setvbuf+0x6a>
10014b64:	0030      	movs	r0, r6
10014b66:	f7ff fe3d 	bl	100147e4 <_free_r>
10014b6a:	2300      	movs	r3, #0
10014b6c:	6363      	str	r3, [r4, #52]	; 0x34
10014b6e:	2300      	movs	r3, #0
10014b70:	61a3      	str	r3, [r4, #24]
10014b72:	6063      	str	r3, [r4, #4]
10014b74:	89a3      	ldrh	r3, [r4, #12]
10014b76:	061b      	lsls	r3, r3, #24
10014b78:	d503      	bpl.n	10014b82 <setvbuf+0x82>
10014b7a:	6921      	ldr	r1, [r4, #16]
10014b7c:	0030      	movs	r0, r6
10014b7e:	f7ff fe31 	bl	100147e4 <_free_r>
10014b82:	89a2      	ldrh	r2, [r4, #12]
10014b84:	4b35      	ldr	r3, [pc, #212]	; (10014c5c <setvbuf+0x15c>)
10014b86:	4013      	ands	r3, r2
10014b88:	81a3      	strh	r3, [r4, #12]
10014b8a:	9b00      	ldr	r3, [sp, #0]
10014b8c:	2b02      	cmp	r3, #2
10014b8e:	d021      	beq.n	10014bd4 <setvbuf+0xd4>
10014b90:	ab03      	add	r3, sp, #12
10014b92:	aa02      	add	r2, sp, #8
10014b94:	0021      	movs	r1, r4
10014b96:	0030      	movs	r0, r6
10014b98:	f000 fab8 	bl	1001510c <__swhatbuf_r>
10014b9c:	89a3      	ldrh	r3, [r4, #12]
10014b9e:	4318      	orrs	r0, r3
10014ba0:	81a0      	strh	r0, [r4, #12]
10014ba2:	2d00      	cmp	r5, #0
10014ba4:	d101      	bne.n	10014baa <setvbuf+0xaa>
10014ba6:	9d02      	ldr	r5, [sp, #8]
10014ba8:	e001      	b.n	10014bae <setvbuf+0xae>
10014baa:	2f00      	cmp	r7, #0
10014bac:	d125      	bne.n	10014bfa <setvbuf+0xfa>
10014bae:	0028      	movs	r0, r5
10014bb0:	f7ff fdee 	bl	10014790 <malloc>
10014bb4:	9501      	str	r5, [sp, #4]
10014bb6:	1e07      	subs	r7, r0, #0
10014bb8:	d11a      	bne.n	10014bf0 <setvbuf+0xf0>
10014bba:	9b02      	ldr	r3, [sp, #8]
10014bbc:	9301      	str	r3, [sp, #4]
10014bbe:	42ab      	cmp	r3, r5
10014bc0:	d102      	bne.n	10014bc8 <setvbuf+0xc8>
10014bc2:	2001      	movs	r0, #1
10014bc4:	4240      	negs	r0, r0
10014bc6:	e006      	b.n	10014bd6 <setvbuf+0xd6>
10014bc8:	9801      	ldr	r0, [sp, #4]
10014bca:	f7ff fde1 	bl	10014790 <malloc>
10014bce:	1e07      	subs	r7, r0, #0
10014bd0:	d10e      	bne.n	10014bf0 <setvbuf+0xf0>
10014bd2:	e7f6      	b.n	10014bc2 <setvbuf+0xc2>
10014bd4:	2000      	movs	r0, #0
10014bd6:	2202      	movs	r2, #2
10014bd8:	89a3      	ldrh	r3, [r4, #12]
10014bda:	4313      	orrs	r3, r2
10014bdc:	81a3      	strh	r3, [r4, #12]
10014bde:	2300      	movs	r3, #0
10014be0:	60a3      	str	r3, [r4, #8]
10014be2:	0023      	movs	r3, r4
10014be4:	3347      	adds	r3, #71	; 0x47
10014be6:	6023      	str	r3, [r4, #0]
10014be8:	6123      	str	r3, [r4, #16]
10014bea:	2301      	movs	r3, #1
10014bec:	6163      	str	r3, [r4, #20]
10014bee:	e02a      	b.n	10014c46 <setvbuf+0x146>
10014bf0:	2280      	movs	r2, #128	; 0x80
10014bf2:	89a3      	ldrh	r3, [r4, #12]
10014bf4:	9d01      	ldr	r5, [sp, #4]
10014bf6:	4313      	orrs	r3, r2
10014bf8:	81a3      	strh	r3, [r4, #12]
10014bfa:	69b3      	ldr	r3, [r6, #24]
10014bfc:	2b00      	cmp	r3, #0
10014bfe:	d102      	bne.n	10014c06 <setvbuf+0x106>
10014c00:	0030      	movs	r0, r6
10014c02:	f000 f9ef 	bl	10014fe4 <__sinit>
10014c06:	9b00      	ldr	r3, [sp, #0]
10014c08:	2b01      	cmp	r3, #1
10014c0a:	d103      	bne.n	10014c14 <setvbuf+0x114>
10014c0c:	89a3      	ldrh	r3, [r4, #12]
10014c0e:	9a00      	ldr	r2, [sp, #0]
10014c10:	431a      	orrs	r2, r3
10014c12:	81a2      	strh	r2, [r4, #12]
10014c14:	2308      	movs	r3, #8
10014c16:	89a2      	ldrh	r2, [r4, #12]
10014c18:	6027      	str	r7, [r4, #0]
10014c1a:	4013      	ands	r3, r2
10014c1c:	6127      	str	r7, [r4, #16]
10014c1e:	6165      	str	r5, [r4, #20]
10014c20:	1e18      	subs	r0, r3, #0
10014c22:	d00c      	beq.n	10014c3e <setvbuf+0x13e>
10014c24:	2301      	movs	r3, #1
10014c26:	401a      	ands	r2, r3
10014c28:	2300      	movs	r3, #0
10014c2a:	1e10      	subs	r0, r2, #0
10014c2c:	4298      	cmp	r0, r3
10014c2e:	d004      	beq.n	10014c3a <setvbuf+0x13a>
10014c30:	426d      	negs	r5, r5
10014c32:	60a3      	str	r3, [r4, #8]
10014c34:	61a5      	str	r5, [r4, #24]
10014c36:	0018      	movs	r0, r3
10014c38:	e005      	b.n	10014c46 <setvbuf+0x146>
10014c3a:	60a5      	str	r5, [r4, #8]
10014c3c:	e003      	b.n	10014c46 <setvbuf+0x146>
10014c3e:	60a3      	str	r3, [r4, #8]
10014c40:	e001      	b.n	10014c46 <setvbuf+0x146>
10014c42:	2001      	movs	r0, #1
10014c44:	4240      	negs	r0, r0
10014c46:	b005      	add	sp, #20
10014c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014c4a:	46c0      	nop			; (mov r8, r8)
10014c4c:	100173f8 	.word	0x100173f8
10014c50:	100172d8 	.word	0x100172d8
10014c54:	100172f8 	.word	0x100172f8
10014c58:	10017318 	.word	0x10017318
10014c5c:	fffff35c 	.word	0xfffff35c

10014c60 <__swbuf_r>:
10014c60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014c62:	0005      	movs	r5, r0
10014c64:	000f      	movs	r7, r1
10014c66:	0014      	movs	r4, r2
10014c68:	2800      	cmp	r0, #0
10014c6a:	d004      	beq.n	10014c76 <__swbuf_r+0x16>
10014c6c:	6983      	ldr	r3, [r0, #24]
10014c6e:	2b00      	cmp	r3, #0
10014c70:	d101      	bne.n	10014c76 <__swbuf_r+0x16>
10014c72:	f000 f9b7 	bl	10014fe4 <__sinit>
10014c76:	4b23      	ldr	r3, [pc, #140]	; (10014d04 <__swbuf_r+0xa4>)
10014c78:	429c      	cmp	r4, r3
10014c7a:	d101      	bne.n	10014c80 <__swbuf_r+0x20>
10014c7c:	686c      	ldr	r4, [r5, #4]
10014c7e:	e008      	b.n	10014c92 <__swbuf_r+0x32>
10014c80:	4b21      	ldr	r3, [pc, #132]	; (10014d08 <__swbuf_r+0xa8>)
10014c82:	429c      	cmp	r4, r3
10014c84:	d101      	bne.n	10014c8a <__swbuf_r+0x2a>
10014c86:	68ac      	ldr	r4, [r5, #8]
10014c88:	e003      	b.n	10014c92 <__swbuf_r+0x32>
10014c8a:	4b20      	ldr	r3, [pc, #128]	; (10014d0c <__swbuf_r+0xac>)
10014c8c:	429c      	cmp	r4, r3
10014c8e:	d100      	bne.n	10014c92 <__swbuf_r+0x32>
10014c90:	68ec      	ldr	r4, [r5, #12]
10014c92:	69a3      	ldr	r3, [r4, #24]
10014c94:	60a3      	str	r3, [r4, #8]
10014c96:	89a3      	ldrh	r3, [r4, #12]
10014c98:	071b      	lsls	r3, r3, #28
10014c9a:	d50a      	bpl.n	10014cb2 <__swbuf_r+0x52>
10014c9c:	6923      	ldr	r3, [r4, #16]
10014c9e:	2b00      	cmp	r3, #0
10014ca0:	d007      	beq.n	10014cb2 <__swbuf_r+0x52>
10014ca2:	6823      	ldr	r3, [r4, #0]
10014ca4:	6922      	ldr	r2, [r4, #16]
10014ca6:	b2fe      	uxtb	r6, r7
10014ca8:	1a98      	subs	r0, r3, r2
10014caa:	6963      	ldr	r3, [r4, #20]
10014cac:	4298      	cmp	r0, r3
10014cae:	db0f      	blt.n	10014cd0 <__swbuf_r+0x70>
10014cb0:	e008      	b.n	10014cc4 <__swbuf_r+0x64>
10014cb2:	0021      	movs	r1, r4
10014cb4:	0028      	movs	r0, r5
10014cb6:	f000 f82b 	bl	10014d10 <__swsetup_r>
10014cba:	2800      	cmp	r0, #0
10014cbc:	d0f1      	beq.n	10014ca2 <__swbuf_r+0x42>
10014cbe:	2001      	movs	r0, #1
10014cc0:	4240      	negs	r0, r0
10014cc2:	e01d      	b.n	10014d00 <__swbuf_r+0xa0>
10014cc4:	0021      	movs	r1, r4
10014cc6:	0028      	movs	r0, r5
10014cc8:	f000 f91e 	bl	10014f08 <_fflush_r>
10014ccc:	2800      	cmp	r0, #0
10014cce:	d1f6      	bne.n	10014cbe <__swbuf_r+0x5e>
10014cd0:	68a3      	ldr	r3, [r4, #8]
10014cd2:	3001      	adds	r0, #1
10014cd4:	3b01      	subs	r3, #1
10014cd6:	60a3      	str	r3, [r4, #8]
10014cd8:	6823      	ldr	r3, [r4, #0]
10014cda:	1c5a      	adds	r2, r3, #1
10014cdc:	6022      	str	r2, [r4, #0]
10014cde:	701f      	strb	r7, [r3, #0]
10014ce0:	6963      	ldr	r3, [r4, #20]
10014ce2:	4298      	cmp	r0, r3
10014ce4:	d005      	beq.n	10014cf2 <__swbuf_r+0x92>
10014ce6:	89a3      	ldrh	r3, [r4, #12]
10014ce8:	0030      	movs	r0, r6
10014cea:	07db      	lsls	r3, r3, #31
10014cec:	d508      	bpl.n	10014d00 <__swbuf_r+0xa0>
10014cee:	2e0a      	cmp	r6, #10
10014cf0:	d106      	bne.n	10014d00 <__swbuf_r+0xa0>
10014cf2:	0021      	movs	r1, r4
10014cf4:	0028      	movs	r0, r5
10014cf6:	f000 f907 	bl	10014f08 <_fflush_r>
10014cfa:	2800      	cmp	r0, #0
10014cfc:	d1df      	bne.n	10014cbe <__swbuf_r+0x5e>
10014cfe:	0030      	movs	r0, r6
10014d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10014d02:	46c0      	nop			; (mov r8, r8)
10014d04:	100172d8 	.word	0x100172d8
10014d08:	100172f8 	.word	0x100172f8
10014d0c:	10017318 	.word	0x10017318

10014d10 <__swsetup_r>:
10014d10:	4b36      	ldr	r3, [pc, #216]	; (10014dec <__swsetup_r+0xdc>)
10014d12:	b570      	push	{r4, r5, r6, lr}
10014d14:	681d      	ldr	r5, [r3, #0]
10014d16:	0006      	movs	r6, r0
10014d18:	000c      	movs	r4, r1
10014d1a:	2d00      	cmp	r5, #0
10014d1c:	d005      	beq.n	10014d2a <__swsetup_r+0x1a>
10014d1e:	69ab      	ldr	r3, [r5, #24]
10014d20:	2b00      	cmp	r3, #0
10014d22:	d102      	bne.n	10014d2a <__swsetup_r+0x1a>
10014d24:	0028      	movs	r0, r5
10014d26:	f000 f95d 	bl	10014fe4 <__sinit>
10014d2a:	4b31      	ldr	r3, [pc, #196]	; (10014df0 <__swsetup_r+0xe0>)
10014d2c:	429c      	cmp	r4, r3
10014d2e:	d101      	bne.n	10014d34 <__swsetup_r+0x24>
10014d30:	686c      	ldr	r4, [r5, #4]
10014d32:	e008      	b.n	10014d46 <__swsetup_r+0x36>
10014d34:	4b2f      	ldr	r3, [pc, #188]	; (10014df4 <__swsetup_r+0xe4>)
10014d36:	429c      	cmp	r4, r3
10014d38:	d101      	bne.n	10014d3e <__swsetup_r+0x2e>
10014d3a:	68ac      	ldr	r4, [r5, #8]
10014d3c:	e003      	b.n	10014d46 <__swsetup_r+0x36>
10014d3e:	4b2e      	ldr	r3, [pc, #184]	; (10014df8 <__swsetup_r+0xe8>)
10014d40:	429c      	cmp	r4, r3
10014d42:	d100      	bne.n	10014d46 <__swsetup_r+0x36>
10014d44:	68ec      	ldr	r4, [r5, #12]
10014d46:	220c      	movs	r2, #12
10014d48:	5ea3      	ldrsh	r3, [r4, r2]
10014d4a:	b29a      	uxth	r2, r3
10014d4c:	0711      	lsls	r1, r2, #28
10014d4e:	d423      	bmi.n	10014d98 <__swsetup_r+0x88>
10014d50:	06d1      	lsls	r1, r2, #27
10014d52:	d407      	bmi.n	10014d64 <__swsetup_r+0x54>
10014d54:	2209      	movs	r2, #9
10014d56:	2001      	movs	r0, #1
10014d58:	6032      	str	r2, [r6, #0]
10014d5a:	3237      	adds	r2, #55	; 0x37
10014d5c:	4313      	orrs	r3, r2
10014d5e:	81a3      	strh	r3, [r4, #12]
10014d60:	4240      	negs	r0, r0
10014d62:	e042      	b.n	10014dea <__swsetup_r+0xda>
10014d64:	0753      	lsls	r3, r2, #29
10014d66:	d513      	bpl.n	10014d90 <__swsetup_r+0x80>
10014d68:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014d6a:	2900      	cmp	r1, #0
10014d6c:	d008      	beq.n	10014d80 <__swsetup_r+0x70>
10014d6e:	0023      	movs	r3, r4
10014d70:	3344      	adds	r3, #68	; 0x44
10014d72:	4299      	cmp	r1, r3
10014d74:	d002      	beq.n	10014d7c <__swsetup_r+0x6c>
10014d76:	0030      	movs	r0, r6
10014d78:	f7ff fd34 	bl	100147e4 <_free_r>
10014d7c:	2300      	movs	r3, #0
10014d7e:	6363      	str	r3, [r4, #52]	; 0x34
10014d80:	2224      	movs	r2, #36	; 0x24
10014d82:	89a3      	ldrh	r3, [r4, #12]
10014d84:	4393      	bics	r3, r2
10014d86:	81a3      	strh	r3, [r4, #12]
10014d88:	2300      	movs	r3, #0
10014d8a:	6063      	str	r3, [r4, #4]
10014d8c:	6923      	ldr	r3, [r4, #16]
10014d8e:	6023      	str	r3, [r4, #0]
10014d90:	2208      	movs	r2, #8
10014d92:	89a3      	ldrh	r3, [r4, #12]
10014d94:	4313      	orrs	r3, r2
10014d96:	81a3      	strh	r3, [r4, #12]
10014d98:	6923      	ldr	r3, [r4, #16]
10014d9a:	2b00      	cmp	r3, #0
10014d9c:	d10b      	bne.n	10014db6 <__swsetup_r+0xa6>
10014d9e:	23a0      	movs	r3, #160	; 0xa0
10014da0:	89a2      	ldrh	r2, [r4, #12]
10014da2:	009b      	lsls	r3, r3, #2
10014da4:	4013      	ands	r3, r2
10014da6:	2280      	movs	r2, #128	; 0x80
10014da8:	0092      	lsls	r2, r2, #2
10014daa:	4293      	cmp	r3, r2
10014dac:	d003      	beq.n	10014db6 <__swsetup_r+0xa6>
10014dae:	0021      	movs	r1, r4
10014db0:	0030      	movs	r0, r6
10014db2:	f000 f9d1 	bl	10015158 <__smakebuf_r>
10014db6:	2301      	movs	r3, #1
10014db8:	89a2      	ldrh	r2, [r4, #12]
10014dba:	4013      	ands	r3, r2
10014dbc:	d005      	beq.n	10014dca <__swsetup_r+0xba>
10014dbe:	2300      	movs	r3, #0
10014dc0:	60a3      	str	r3, [r4, #8]
10014dc2:	6963      	ldr	r3, [r4, #20]
10014dc4:	425b      	negs	r3, r3
10014dc6:	61a3      	str	r3, [r4, #24]
10014dc8:	e003      	b.n	10014dd2 <__swsetup_r+0xc2>
10014dca:	0792      	lsls	r2, r2, #30
10014dcc:	d400      	bmi.n	10014dd0 <__swsetup_r+0xc0>
10014dce:	6963      	ldr	r3, [r4, #20]
10014dd0:	60a3      	str	r3, [r4, #8]
10014dd2:	2000      	movs	r0, #0
10014dd4:	6923      	ldr	r3, [r4, #16]
10014dd6:	4283      	cmp	r3, r0
10014dd8:	d107      	bne.n	10014dea <__swsetup_r+0xda>
10014dda:	220c      	movs	r2, #12
10014ddc:	5ea3      	ldrsh	r3, [r4, r2]
10014dde:	061a      	lsls	r2, r3, #24
10014de0:	d503      	bpl.n	10014dea <__swsetup_r+0xda>
10014de2:	2240      	movs	r2, #64	; 0x40
10014de4:	4313      	orrs	r3, r2
10014de6:	81a3      	strh	r3, [r4, #12]
10014de8:	3801      	subs	r0, #1
10014dea:	bd70      	pop	{r4, r5, r6, pc}
10014dec:	100173f8 	.word	0x100173f8
10014df0:	100172d8 	.word	0x100172d8
10014df4:	100172f8 	.word	0x100172f8
10014df8:	10017318 	.word	0x10017318

10014dfc <__sflush_r>:
10014dfc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10014dfe:	898a      	ldrh	r2, [r1, #12]
10014e00:	0005      	movs	r5, r0
10014e02:	000c      	movs	r4, r1
10014e04:	0713      	lsls	r3, r2, #28
10014e06:	d45a      	bmi.n	10014ebe <__sflush_r+0xc2>
10014e08:	684b      	ldr	r3, [r1, #4]
10014e0a:	2b00      	cmp	r3, #0
10014e0c:	dc02      	bgt.n	10014e14 <__sflush_r+0x18>
10014e0e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10014e10:	2b00      	cmp	r3, #0
10014e12:	dd19      	ble.n	10014e48 <__sflush_r+0x4c>
10014e14:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014e16:	2f00      	cmp	r7, #0
10014e18:	d016      	beq.n	10014e48 <__sflush_r+0x4c>
10014e1a:	2300      	movs	r3, #0
10014e1c:	682e      	ldr	r6, [r5, #0]
10014e1e:	602b      	str	r3, [r5, #0]
10014e20:	2380      	movs	r3, #128	; 0x80
10014e22:	015b      	lsls	r3, r3, #5
10014e24:	401a      	ands	r2, r3
10014e26:	d001      	beq.n	10014e2c <__sflush_r+0x30>
10014e28:	6d60      	ldr	r0, [r4, #84]	; 0x54
10014e2a:	e014      	b.n	10014e56 <__sflush_r+0x5a>
10014e2c:	2301      	movs	r3, #1
10014e2e:	6a21      	ldr	r1, [r4, #32]
10014e30:	0028      	movs	r0, r5
10014e32:	47b8      	blx	r7
10014e34:	1c43      	adds	r3, r0, #1
10014e36:	d10e      	bne.n	10014e56 <__sflush_r+0x5a>
10014e38:	682b      	ldr	r3, [r5, #0]
10014e3a:	2b00      	cmp	r3, #0
10014e3c:	d00b      	beq.n	10014e56 <__sflush_r+0x5a>
10014e3e:	2b1d      	cmp	r3, #29
10014e40:	d001      	beq.n	10014e46 <__sflush_r+0x4a>
10014e42:	2b16      	cmp	r3, #22
10014e44:	d102      	bne.n	10014e4c <__sflush_r+0x50>
10014e46:	602e      	str	r6, [r5, #0]
10014e48:	2000      	movs	r0, #0
10014e4a:	e05a      	b.n	10014f02 <__sflush_r+0x106>
10014e4c:	2240      	movs	r2, #64	; 0x40
10014e4e:	89a3      	ldrh	r3, [r4, #12]
10014e50:	4313      	orrs	r3, r2
10014e52:	81a3      	strh	r3, [r4, #12]
10014e54:	e055      	b.n	10014f02 <__sflush_r+0x106>
10014e56:	89a3      	ldrh	r3, [r4, #12]
10014e58:	075b      	lsls	r3, r3, #29
10014e5a:	d506      	bpl.n	10014e6a <__sflush_r+0x6e>
10014e5c:	6863      	ldr	r3, [r4, #4]
10014e5e:	1ac0      	subs	r0, r0, r3
10014e60:	6b63      	ldr	r3, [r4, #52]	; 0x34
10014e62:	2b00      	cmp	r3, #0
10014e64:	d001      	beq.n	10014e6a <__sflush_r+0x6e>
10014e66:	6c23      	ldr	r3, [r4, #64]	; 0x40
10014e68:	1ac0      	subs	r0, r0, r3
10014e6a:	2300      	movs	r3, #0
10014e6c:	0002      	movs	r2, r0
10014e6e:	6a21      	ldr	r1, [r4, #32]
10014e70:	0028      	movs	r0, r5
10014e72:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10014e74:	47b8      	blx	r7
10014e76:	89a3      	ldrh	r3, [r4, #12]
10014e78:	1c42      	adds	r2, r0, #1
10014e7a:	d106      	bne.n	10014e8a <__sflush_r+0x8e>
10014e7c:	6829      	ldr	r1, [r5, #0]
10014e7e:	291d      	cmp	r1, #29
10014e80:	d83a      	bhi.n	10014ef8 <__sflush_r+0xfc>
10014e82:	4a20      	ldr	r2, [pc, #128]	; (10014f04 <__sflush_r+0x108>)
10014e84:	40ca      	lsrs	r2, r1
10014e86:	07d2      	lsls	r2, r2, #31
10014e88:	d536      	bpl.n	10014ef8 <__sflush_r+0xfc>
10014e8a:	2200      	movs	r2, #0
10014e8c:	6062      	str	r2, [r4, #4]
10014e8e:	6922      	ldr	r2, [r4, #16]
10014e90:	6022      	str	r2, [r4, #0]
10014e92:	04db      	lsls	r3, r3, #19
10014e94:	d505      	bpl.n	10014ea2 <__sflush_r+0xa6>
10014e96:	1c43      	adds	r3, r0, #1
10014e98:	d102      	bne.n	10014ea0 <__sflush_r+0xa4>
10014e9a:	682b      	ldr	r3, [r5, #0]
10014e9c:	2b00      	cmp	r3, #0
10014e9e:	d100      	bne.n	10014ea2 <__sflush_r+0xa6>
10014ea0:	6560      	str	r0, [r4, #84]	; 0x54
10014ea2:	6b61      	ldr	r1, [r4, #52]	; 0x34
10014ea4:	602e      	str	r6, [r5, #0]
10014ea6:	2900      	cmp	r1, #0
10014ea8:	d0ce      	beq.n	10014e48 <__sflush_r+0x4c>
10014eaa:	0023      	movs	r3, r4
10014eac:	3344      	adds	r3, #68	; 0x44
10014eae:	4299      	cmp	r1, r3
10014eb0:	d002      	beq.n	10014eb8 <__sflush_r+0xbc>
10014eb2:	0028      	movs	r0, r5
10014eb4:	f7ff fc96 	bl	100147e4 <_free_r>
10014eb8:	2000      	movs	r0, #0
10014eba:	6360      	str	r0, [r4, #52]	; 0x34
10014ebc:	e021      	b.n	10014f02 <__sflush_r+0x106>
10014ebe:	690f      	ldr	r7, [r1, #16]
10014ec0:	2f00      	cmp	r7, #0
10014ec2:	d0c1      	beq.n	10014e48 <__sflush_r+0x4c>
10014ec4:	680b      	ldr	r3, [r1, #0]
10014ec6:	600f      	str	r7, [r1, #0]
10014ec8:	1bdb      	subs	r3, r3, r7
10014eca:	9301      	str	r3, [sp, #4]
10014ecc:	2300      	movs	r3, #0
10014ece:	0792      	lsls	r2, r2, #30
10014ed0:	d100      	bne.n	10014ed4 <__sflush_r+0xd8>
10014ed2:	694b      	ldr	r3, [r1, #20]
10014ed4:	60a3      	str	r3, [r4, #8]
10014ed6:	e003      	b.n	10014ee0 <__sflush_r+0xe4>
10014ed8:	9b01      	ldr	r3, [sp, #4]
10014eda:	183f      	adds	r7, r7, r0
10014edc:	1a1b      	subs	r3, r3, r0
10014ede:	9301      	str	r3, [sp, #4]
10014ee0:	9b01      	ldr	r3, [sp, #4]
10014ee2:	2b00      	cmp	r3, #0
10014ee4:	ddb0      	ble.n	10014e48 <__sflush_r+0x4c>
10014ee6:	9b01      	ldr	r3, [sp, #4]
10014ee8:	003a      	movs	r2, r7
10014eea:	6a21      	ldr	r1, [r4, #32]
10014eec:	0028      	movs	r0, r5
10014eee:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10014ef0:	47b0      	blx	r6
10014ef2:	2800      	cmp	r0, #0
10014ef4:	dcf0      	bgt.n	10014ed8 <__sflush_r+0xdc>
10014ef6:	89a3      	ldrh	r3, [r4, #12]
10014ef8:	2240      	movs	r2, #64	; 0x40
10014efa:	2001      	movs	r0, #1
10014efc:	4313      	orrs	r3, r2
10014efe:	81a3      	strh	r3, [r4, #12]
10014f00:	4240      	negs	r0, r0
10014f02:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10014f04:	20400001 	.word	0x20400001

10014f08 <_fflush_r>:
10014f08:	690b      	ldr	r3, [r1, #16]
10014f0a:	b570      	push	{r4, r5, r6, lr}
10014f0c:	0005      	movs	r5, r0
10014f0e:	000c      	movs	r4, r1
10014f10:	2b00      	cmp	r3, #0
10014f12:	d101      	bne.n	10014f18 <_fflush_r+0x10>
10014f14:	2000      	movs	r0, #0
10014f16:	e01c      	b.n	10014f52 <_fflush_r+0x4a>
10014f18:	2800      	cmp	r0, #0
10014f1a:	d004      	beq.n	10014f26 <_fflush_r+0x1e>
10014f1c:	6983      	ldr	r3, [r0, #24]
10014f1e:	2b00      	cmp	r3, #0
10014f20:	d101      	bne.n	10014f26 <_fflush_r+0x1e>
10014f22:	f000 f85f 	bl	10014fe4 <__sinit>
10014f26:	4b0b      	ldr	r3, [pc, #44]	; (10014f54 <_fflush_r+0x4c>)
10014f28:	429c      	cmp	r4, r3
10014f2a:	d101      	bne.n	10014f30 <_fflush_r+0x28>
10014f2c:	686c      	ldr	r4, [r5, #4]
10014f2e:	e008      	b.n	10014f42 <_fflush_r+0x3a>
10014f30:	4b09      	ldr	r3, [pc, #36]	; (10014f58 <_fflush_r+0x50>)
10014f32:	429c      	cmp	r4, r3
10014f34:	d101      	bne.n	10014f3a <_fflush_r+0x32>
10014f36:	68ac      	ldr	r4, [r5, #8]
10014f38:	e003      	b.n	10014f42 <_fflush_r+0x3a>
10014f3a:	4b08      	ldr	r3, [pc, #32]	; (10014f5c <_fflush_r+0x54>)
10014f3c:	429c      	cmp	r4, r3
10014f3e:	d100      	bne.n	10014f42 <_fflush_r+0x3a>
10014f40:	68ec      	ldr	r4, [r5, #12]
10014f42:	220c      	movs	r2, #12
10014f44:	5ea3      	ldrsh	r3, [r4, r2]
10014f46:	2b00      	cmp	r3, #0
10014f48:	d0e4      	beq.n	10014f14 <_fflush_r+0xc>
10014f4a:	0021      	movs	r1, r4
10014f4c:	0028      	movs	r0, r5
10014f4e:	f7ff ff55 	bl	10014dfc <__sflush_r>
10014f52:	bd70      	pop	{r4, r5, r6, pc}
10014f54:	100172d8 	.word	0x100172d8
10014f58:	100172f8 	.word	0x100172f8
10014f5c:	10017318 	.word	0x10017318

10014f60 <_cleanup_r>:
10014f60:	b510      	push	{r4, lr}
10014f62:	4902      	ldr	r1, [pc, #8]	; (10014f6c <_cleanup_r+0xc>)
10014f64:	f000 f8b0 	bl	100150c8 <_fwalk_reent>
10014f68:	bd10      	pop	{r4, pc}
10014f6a:	46c0      	nop			; (mov r8, r8)
10014f6c:	10014f09 	.word	0x10014f09

10014f70 <std.isra.0>:
10014f70:	2300      	movs	r3, #0
10014f72:	b510      	push	{r4, lr}
10014f74:	0004      	movs	r4, r0
10014f76:	6003      	str	r3, [r0, #0]
10014f78:	6043      	str	r3, [r0, #4]
10014f7a:	6083      	str	r3, [r0, #8]
10014f7c:	8181      	strh	r1, [r0, #12]
10014f7e:	6643      	str	r3, [r0, #100]	; 0x64
10014f80:	81c2      	strh	r2, [r0, #14]
10014f82:	6103      	str	r3, [r0, #16]
10014f84:	6143      	str	r3, [r0, #20]
10014f86:	6183      	str	r3, [r0, #24]
10014f88:	0019      	movs	r1, r3
10014f8a:	2208      	movs	r2, #8
10014f8c:	305c      	adds	r0, #92	; 0x5c
10014f8e:	f7ff fc21 	bl	100147d4 <memset>
10014f92:	4b05      	ldr	r3, [pc, #20]	; (10014fa8 <std.isra.0+0x38>)
10014f94:	6224      	str	r4, [r4, #32]
10014f96:	6263      	str	r3, [r4, #36]	; 0x24
10014f98:	4b04      	ldr	r3, [pc, #16]	; (10014fac <std.isra.0+0x3c>)
10014f9a:	62a3      	str	r3, [r4, #40]	; 0x28
10014f9c:	4b04      	ldr	r3, [pc, #16]	; (10014fb0 <std.isra.0+0x40>)
10014f9e:	62e3      	str	r3, [r4, #44]	; 0x2c
10014fa0:	4b04      	ldr	r3, [pc, #16]	; (10014fb4 <std.isra.0+0x44>)
10014fa2:	6323      	str	r3, [r4, #48]	; 0x30
10014fa4:	bd10      	pop	{r4, pc}
10014fa6:	46c0      	nop			; (mov r8, r8)
10014fa8:	100157e9 	.word	0x100157e9
10014fac:	10015811 	.word	0x10015811
10014fb0:	10015849 	.word	0x10015849
10014fb4:	10015875 	.word	0x10015875

10014fb8 <__sfmoreglue>:
10014fb8:	b570      	push	{r4, r5, r6, lr}
10014fba:	2568      	movs	r5, #104	; 0x68
10014fbc:	1e4b      	subs	r3, r1, #1
10014fbe:	435d      	muls	r5, r3
10014fc0:	000e      	movs	r6, r1
10014fc2:	0029      	movs	r1, r5
10014fc4:	3174      	adds	r1, #116	; 0x74
10014fc6:	f7ff fc53 	bl	10014870 <_malloc_r>
10014fca:	1e04      	subs	r4, r0, #0
10014fcc:	d008      	beq.n	10014fe0 <__sfmoreglue+0x28>
10014fce:	2100      	movs	r1, #0
10014fd0:	002a      	movs	r2, r5
10014fd2:	6001      	str	r1, [r0, #0]
10014fd4:	6046      	str	r6, [r0, #4]
10014fd6:	300c      	adds	r0, #12
10014fd8:	60a0      	str	r0, [r4, #8]
10014fda:	3268      	adds	r2, #104	; 0x68
10014fdc:	f7ff fbfa 	bl	100147d4 <memset>
10014fe0:	0020      	movs	r0, r4
10014fe2:	bd70      	pop	{r4, r5, r6, pc}

10014fe4 <__sinit>:
10014fe4:	6983      	ldr	r3, [r0, #24]
10014fe6:	b513      	push	{r0, r1, r4, lr}
10014fe8:	0004      	movs	r4, r0
10014fea:	2b00      	cmp	r3, #0
10014fec:	d128      	bne.n	10015040 <__sinit+0x5c>
10014fee:	6483      	str	r3, [r0, #72]	; 0x48
10014ff0:	64c3      	str	r3, [r0, #76]	; 0x4c
10014ff2:	6503      	str	r3, [r0, #80]	; 0x50
10014ff4:	4b13      	ldr	r3, [pc, #76]	; (10015044 <__sinit+0x60>)
10014ff6:	4a14      	ldr	r2, [pc, #80]	; (10015048 <__sinit+0x64>)
10014ff8:	681b      	ldr	r3, [r3, #0]
10014ffa:	6282      	str	r2, [r0, #40]	; 0x28
10014ffc:	9301      	str	r3, [sp, #4]
10014ffe:	4298      	cmp	r0, r3
10015000:	d101      	bne.n	10015006 <__sinit+0x22>
10015002:	2301      	movs	r3, #1
10015004:	6183      	str	r3, [r0, #24]
10015006:	0020      	movs	r0, r4
10015008:	f000 f820 	bl	1001504c <__sfp>
1001500c:	6060      	str	r0, [r4, #4]
1001500e:	0020      	movs	r0, r4
10015010:	f000 f81c 	bl	1001504c <__sfp>
10015014:	60a0      	str	r0, [r4, #8]
10015016:	0020      	movs	r0, r4
10015018:	f000 f818 	bl	1001504c <__sfp>
1001501c:	2200      	movs	r2, #0
1001501e:	60e0      	str	r0, [r4, #12]
10015020:	2104      	movs	r1, #4
10015022:	6860      	ldr	r0, [r4, #4]
10015024:	f7ff ffa4 	bl	10014f70 <std.isra.0>
10015028:	2201      	movs	r2, #1
1001502a:	2109      	movs	r1, #9
1001502c:	68a0      	ldr	r0, [r4, #8]
1001502e:	f7ff ff9f 	bl	10014f70 <std.isra.0>
10015032:	2202      	movs	r2, #2
10015034:	2112      	movs	r1, #18
10015036:	68e0      	ldr	r0, [r4, #12]
10015038:	f7ff ff9a 	bl	10014f70 <std.isra.0>
1001503c:	2301      	movs	r3, #1
1001503e:	61a3      	str	r3, [r4, #24]
10015040:	bd13      	pop	{r0, r1, r4, pc}
10015042:	46c0      	nop			; (mov r8, r8)
10015044:	100172d4 	.word	0x100172d4
10015048:	10014f61 	.word	0x10014f61

1001504c <__sfp>:
1001504c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001504e:	4b1d      	ldr	r3, [pc, #116]	; (100150c4 <__sfp+0x78>)
10015050:	0006      	movs	r6, r0
10015052:	681d      	ldr	r5, [r3, #0]
10015054:	69ab      	ldr	r3, [r5, #24]
10015056:	2b00      	cmp	r3, #0
10015058:	d102      	bne.n	10015060 <__sfp+0x14>
1001505a:	0028      	movs	r0, r5
1001505c:	f7ff ffc2 	bl	10014fe4 <__sinit>
10015060:	3548      	adds	r5, #72	; 0x48
10015062:	68ac      	ldr	r4, [r5, #8]
10015064:	686b      	ldr	r3, [r5, #4]
10015066:	3b01      	subs	r3, #1
10015068:	d405      	bmi.n	10015076 <__sfp+0x2a>
1001506a:	220c      	movs	r2, #12
1001506c:	5ea7      	ldrsh	r7, [r4, r2]
1001506e:	2f00      	cmp	r7, #0
10015070:	d010      	beq.n	10015094 <__sfp+0x48>
10015072:	3468      	adds	r4, #104	; 0x68
10015074:	e7f7      	b.n	10015066 <__sfp+0x1a>
10015076:	682b      	ldr	r3, [r5, #0]
10015078:	2b00      	cmp	r3, #0
1001507a:	d001      	beq.n	10015080 <__sfp+0x34>
1001507c:	682d      	ldr	r5, [r5, #0]
1001507e:	e7f0      	b.n	10015062 <__sfp+0x16>
10015080:	2104      	movs	r1, #4
10015082:	0030      	movs	r0, r6
10015084:	f7ff ff98 	bl	10014fb8 <__sfmoreglue>
10015088:	6028      	str	r0, [r5, #0]
1001508a:	2800      	cmp	r0, #0
1001508c:	d1f6      	bne.n	1001507c <__sfp+0x30>
1001508e:	230c      	movs	r3, #12
10015090:	6033      	str	r3, [r6, #0]
10015092:	e016      	b.n	100150c2 <__sfp+0x76>
10015094:	2301      	movs	r3, #1
10015096:	0020      	movs	r0, r4
10015098:	425b      	negs	r3, r3
1001509a:	81e3      	strh	r3, [r4, #14]
1001509c:	3302      	adds	r3, #2
1001509e:	81a3      	strh	r3, [r4, #12]
100150a0:	6667      	str	r7, [r4, #100]	; 0x64
100150a2:	6027      	str	r7, [r4, #0]
100150a4:	60a7      	str	r7, [r4, #8]
100150a6:	6067      	str	r7, [r4, #4]
100150a8:	6127      	str	r7, [r4, #16]
100150aa:	6167      	str	r7, [r4, #20]
100150ac:	61a7      	str	r7, [r4, #24]
100150ae:	305c      	adds	r0, #92	; 0x5c
100150b0:	2208      	movs	r2, #8
100150b2:	0039      	movs	r1, r7
100150b4:	f7ff fb8e 	bl	100147d4 <memset>
100150b8:	0020      	movs	r0, r4
100150ba:	6367      	str	r7, [r4, #52]	; 0x34
100150bc:	63a7      	str	r7, [r4, #56]	; 0x38
100150be:	64a7      	str	r7, [r4, #72]	; 0x48
100150c0:	64e7      	str	r7, [r4, #76]	; 0x4c
100150c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100150c4:	100172d4 	.word	0x100172d4

100150c8 <_fwalk_reent>:
100150c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100150ca:	0004      	movs	r4, r0
100150cc:	0007      	movs	r7, r0
100150ce:	2600      	movs	r6, #0
100150d0:	9101      	str	r1, [sp, #4]
100150d2:	3448      	adds	r4, #72	; 0x48
100150d4:	2c00      	cmp	r4, #0
100150d6:	d016      	beq.n	10015106 <_fwalk_reent+0x3e>
100150d8:	6863      	ldr	r3, [r4, #4]
100150da:	68a5      	ldr	r5, [r4, #8]
100150dc:	9300      	str	r3, [sp, #0]
100150de:	9b00      	ldr	r3, [sp, #0]
100150e0:	3b01      	subs	r3, #1
100150e2:	9300      	str	r3, [sp, #0]
100150e4:	d40d      	bmi.n	10015102 <_fwalk_reent+0x3a>
100150e6:	89ab      	ldrh	r3, [r5, #12]
100150e8:	2b01      	cmp	r3, #1
100150ea:	d908      	bls.n	100150fe <_fwalk_reent+0x36>
100150ec:	220e      	movs	r2, #14
100150ee:	5eab      	ldrsh	r3, [r5, r2]
100150f0:	3301      	adds	r3, #1
100150f2:	d004      	beq.n	100150fe <_fwalk_reent+0x36>
100150f4:	0029      	movs	r1, r5
100150f6:	0038      	movs	r0, r7
100150f8:	9b01      	ldr	r3, [sp, #4]
100150fa:	4798      	blx	r3
100150fc:	4306      	orrs	r6, r0
100150fe:	3568      	adds	r5, #104	; 0x68
10015100:	e7ed      	b.n	100150de <_fwalk_reent+0x16>
10015102:	6824      	ldr	r4, [r4, #0]
10015104:	e7e6      	b.n	100150d4 <_fwalk_reent+0xc>
10015106:	0030      	movs	r0, r6
10015108:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

1001510c <__swhatbuf_r>:
1001510c:	b570      	push	{r4, r5, r6, lr}
1001510e:	000e      	movs	r6, r1
10015110:	001d      	movs	r5, r3
10015112:	230e      	movs	r3, #14
10015114:	5ec9      	ldrsh	r1, [r1, r3]
10015116:	b090      	sub	sp, #64	; 0x40
10015118:	0014      	movs	r4, r2
1001511a:	2900      	cmp	r1, #0
1001511c:	da06      	bge.n	1001512c <__swhatbuf_r+0x20>
1001511e:	2300      	movs	r3, #0
10015120:	602b      	str	r3, [r5, #0]
10015122:	89b3      	ldrh	r3, [r6, #12]
10015124:	061b      	lsls	r3, r3, #24
10015126:	d50f      	bpl.n	10015148 <__swhatbuf_r+0x3c>
10015128:	2340      	movs	r3, #64	; 0x40
1001512a:	e00f      	b.n	1001514c <__swhatbuf_r+0x40>
1001512c:	aa01      	add	r2, sp, #4
1001512e:	f000 fbcd 	bl	100158cc <_fstat_r>
10015132:	2800      	cmp	r0, #0
10015134:	dbf3      	blt.n	1001511e <__swhatbuf_r+0x12>
10015136:	23f0      	movs	r3, #240	; 0xf0
10015138:	9a02      	ldr	r2, [sp, #8]
1001513a:	021b      	lsls	r3, r3, #8
1001513c:	4013      	ands	r3, r2
1001513e:	4a05      	ldr	r2, [pc, #20]	; (10015154 <__swhatbuf_r+0x48>)
10015140:	189b      	adds	r3, r3, r2
10015142:	425a      	negs	r2, r3
10015144:	4153      	adcs	r3, r2
10015146:	602b      	str	r3, [r5, #0]
10015148:	2380      	movs	r3, #128	; 0x80
1001514a:	00db      	lsls	r3, r3, #3
1001514c:	2000      	movs	r0, #0
1001514e:	6023      	str	r3, [r4, #0]
10015150:	b010      	add	sp, #64	; 0x40
10015152:	bd70      	pop	{r4, r5, r6, pc}
10015154:	ffffe000 	.word	0xffffe000

10015158 <__smakebuf_r>:
10015158:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001515a:	2602      	movs	r6, #2
1001515c:	898b      	ldrh	r3, [r1, #12]
1001515e:	0005      	movs	r5, r0
10015160:	000c      	movs	r4, r1
10015162:	4233      	tst	r3, r6
10015164:	d110      	bne.n	10015188 <__smakebuf_r+0x30>
10015166:	ab01      	add	r3, sp, #4
10015168:	466a      	mov	r2, sp
1001516a:	f7ff ffcf 	bl	1001510c <__swhatbuf_r>
1001516e:	9900      	ldr	r1, [sp, #0]
10015170:	0007      	movs	r7, r0
10015172:	0028      	movs	r0, r5
10015174:	f7ff fb7c 	bl	10014870 <_malloc_r>
10015178:	2800      	cmp	r0, #0
1001517a:	d10c      	bne.n	10015196 <__smakebuf_r+0x3e>
1001517c:	220c      	movs	r2, #12
1001517e:	5ea3      	ldrsh	r3, [r4, r2]
10015180:	059a      	lsls	r2, r3, #22
10015182:	d423      	bmi.n	100151cc <__smakebuf_r+0x74>
10015184:	4333      	orrs	r3, r6
10015186:	81a3      	strh	r3, [r4, #12]
10015188:	0023      	movs	r3, r4
1001518a:	3347      	adds	r3, #71	; 0x47
1001518c:	6023      	str	r3, [r4, #0]
1001518e:	6123      	str	r3, [r4, #16]
10015190:	2301      	movs	r3, #1
10015192:	6163      	str	r3, [r4, #20]
10015194:	e01a      	b.n	100151cc <__smakebuf_r+0x74>
10015196:	2280      	movs	r2, #128	; 0x80
10015198:	4b0d      	ldr	r3, [pc, #52]	; (100151d0 <__smakebuf_r+0x78>)
1001519a:	62ab      	str	r3, [r5, #40]	; 0x28
1001519c:	89a3      	ldrh	r3, [r4, #12]
1001519e:	6020      	str	r0, [r4, #0]
100151a0:	4313      	orrs	r3, r2
100151a2:	81a3      	strh	r3, [r4, #12]
100151a4:	9b00      	ldr	r3, [sp, #0]
100151a6:	6120      	str	r0, [r4, #16]
100151a8:	6163      	str	r3, [r4, #20]
100151aa:	9b01      	ldr	r3, [sp, #4]
100151ac:	2b00      	cmp	r3, #0
100151ae:	d00a      	beq.n	100151c6 <__smakebuf_r+0x6e>
100151b0:	230e      	movs	r3, #14
100151b2:	5ee1      	ldrsh	r1, [r4, r3]
100151b4:	0028      	movs	r0, r5
100151b6:	f000 fb9b 	bl	100158f0 <_isatty_r>
100151ba:	2800      	cmp	r0, #0
100151bc:	d003      	beq.n	100151c6 <__smakebuf_r+0x6e>
100151be:	2201      	movs	r2, #1
100151c0:	89a3      	ldrh	r3, [r4, #12]
100151c2:	4313      	orrs	r3, r2
100151c4:	81a3      	strh	r3, [r4, #12]
100151c6:	89a3      	ldrh	r3, [r4, #12]
100151c8:	431f      	orrs	r7, r3
100151ca:	81a7      	strh	r7, [r4, #12]
100151cc:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100151ce:	46c0      	nop			; (mov r8, r8)
100151d0:	10014f61 	.word	0x10014f61

100151d4 <__sfputc_r>:
100151d4:	6893      	ldr	r3, [r2, #8]
100151d6:	b510      	push	{r4, lr}
100151d8:	3b01      	subs	r3, #1
100151da:	6093      	str	r3, [r2, #8]
100151dc:	2b00      	cmp	r3, #0
100151de:	da05      	bge.n	100151ec <__sfputc_r+0x18>
100151e0:	6994      	ldr	r4, [r2, #24]
100151e2:	42a3      	cmp	r3, r4
100151e4:	db08      	blt.n	100151f8 <__sfputc_r+0x24>
100151e6:	b2cb      	uxtb	r3, r1
100151e8:	2b0a      	cmp	r3, #10
100151ea:	d005      	beq.n	100151f8 <__sfputc_r+0x24>
100151ec:	6813      	ldr	r3, [r2, #0]
100151ee:	1c58      	adds	r0, r3, #1
100151f0:	6010      	str	r0, [r2, #0]
100151f2:	7019      	strb	r1, [r3, #0]
100151f4:	b2c8      	uxtb	r0, r1
100151f6:	e001      	b.n	100151fc <__sfputc_r+0x28>
100151f8:	f7ff fd32 	bl	10014c60 <__swbuf_r>
100151fc:	bd10      	pop	{r4, pc}

100151fe <__sfputs_r>:
100151fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015200:	0006      	movs	r6, r0
10015202:	000f      	movs	r7, r1
10015204:	0014      	movs	r4, r2
10015206:	18d5      	adds	r5, r2, r3
10015208:	42ac      	cmp	r4, r5
1001520a:	d008      	beq.n	1001521e <__sfputs_r+0x20>
1001520c:	7821      	ldrb	r1, [r4, #0]
1001520e:	003a      	movs	r2, r7
10015210:	0030      	movs	r0, r6
10015212:	f7ff ffdf 	bl	100151d4 <__sfputc_r>
10015216:	3401      	adds	r4, #1
10015218:	1c43      	adds	r3, r0, #1
1001521a:	d1f5      	bne.n	10015208 <__sfputs_r+0xa>
1001521c:	e000      	b.n	10015220 <__sfputs_r+0x22>
1001521e:	2000      	movs	r0, #0
10015220:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10015224 <_vfiprintf_r>:
10015224:	b5f0      	push	{r4, r5, r6, r7, lr}
10015226:	b09f      	sub	sp, #124	; 0x7c
10015228:	0006      	movs	r6, r0
1001522a:	000f      	movs	r7, r1
1001522c:	9202      	str	r2, [sp, #8]
1001522e:	9305      	str	r3, [sp, #20]
10015230:	2800      	cmp	r0, #0
10015232:	d004      	beq.n	1001523e <_vfiprintf_r+0x1a>
10015234:	6983      	ldr	r3, [r0, #24]
10015236:	2b00      	cmp	r3, #0
10015238:	d101      	bne.n	1001523e <_vfiprintf_r+0x1a>
1001523a:	f7ff fed3 	bl	10014fe4 <__sinit>
1001523e:	4b7f      	ldr	r3, [pc, #508]	; (1001543c <_vfiprintf_r+0x218>)
10015240:	429f      	cmp	r7, r3
10015242:	d101      	bne.n	10015248 <_vfiprintf_r+0x24>
10015244:	6877      	ldr	r7, [r6, #4]
10015246:	e008      	b.n	1001525a <_vfiprintf_r+0x36>
10015248:	4b7d      	ldr	r3, [pc, #500]	; (10015440 <_vfiprintf_r+0x21c>)
1001524a:	429f      	cmp	r7, r3
1001524c:	d101      	bne.n	10015252 <_vfiprintf_r+0x2e>
1001524e:	68b7      	ldr	r7, [r6, #8]
10015250:	e003      	b.n	1001525a <_vfiprintf_r+0x36>
10015252:	4b7c      	ldr	r3, [pc, #496]	; (10015444 <_vfiprintf_r+0x220>)
10015254:	429f      	cmp	r7, r3
10015256:	d100      	bne.n	1001525a <_vfiprintf_r+0x36>
10015258:	68f7      	ldr	r7, [r6, #12]
1001525a:	89bb      	ldrh	r3, [r7, #12]
1001525c:	071b      	lsls	r3, r3, #28
1001525e:	d50a      	bpl.n	10015276 <_vfiprintf_r+0x52>
10015260:	693b      	ldr	r3, [r7, #16]
10015262:	2b00      	cmp	r3, #0
10015264:	d007      	beq.n	10015276 <_vfiprintf_r+0x52>
10015266:	2300      	movs	r3, #0
10015268:	ad06      	add	r5, sp, #24
1001526a:	616b      	str	r3, [r5, #20]
1001526c:	3320      	adds	r3, #32
1001526e:	766b      	strb	r3, [r5, #25]
10015270:	3310      	adds	r3, #16
10015272:	76ab      	strb	r3, [r5, #26]
10015274:	e03d      	b.n	100152f2 <_vfiprintf_r+0xce>
10015276:	0039      	movs	r1, r7
10015278:	0030      	movs	r0, r6
1001527a:	f7ff fd49 	bl	10014d10 <__swsetup_r>
1001527e:	2800      	cmp	r0, #0
10015280:	d0f1      	beq.n	10015266 <_vfiprintf_r+0x42>
10015282:	2001      	movs	r0, #1
10015284:	4240      	negs	r0, r0
10015286:	e0d6      	b.n	10015436 <_vfiprintf_r+0x212>
10015288:	9a05      	ldr	r2, [sp, #20]
1001528a:	1d11      	adds	r1, r2, #4
1001528c:	6812      	ldr	r2, [r2, #0]
1001528e:	9105      	str	r1, [sp, #20]
10015290:	2a00      	cmp	r2, #0
10015292:	da00      	bge.n	10015296 <_vfiprintf_r+0x72>
10015294:	e07f      	b.n	10015396 <_vfiprintf_r+0x172>
10015296:	9209      	str	r2, [sp, #36]	; 0x24
10015298:	3401      	adds	r4, #1
1001529a:	7823      	ldrb	r3, [r4, #0]
1001529c:	2b2e      	cmp	r3, #46	; 0x2e
1001529e:	d100      	bne.n	100152a2 <_vfiprintf_r+0x7e>
100152a0:	e08d      	b.n	100153be <_vfiprintf_r+0x19a>
100152a2:	7821      	ldrb	r1, [r4, #0]
100152a4:	2203      	movs	r2, #3
100152a6:	4868      	ldr	r0, [pc, #416]	; (10015448 <_vfiprintf_r+0x224>)
100152a8:	f000 fb48 	bl	1001593c <memchr>
100152ac:	2800      	cmp	r0, #0
100152ae:	d007      	beq.n	100152c0 <_vfiprintf_r+0x9c>
100152b0:	4b65      	ldr	r3, [pc, #404]	; (10015448 <_vfiprintf_r+0x224>)
100152b2:	682a      	ldr	r2, [r5, #0]
100152b4:	1ac0      	subs	r0, r0, r3
100152b6:	2340      	movs	r3, #64	; 0x40
100152b8:	4083      	lsls	r3, r0
100152ba:	4313      	orrs	r3, r2
100152bc:	602b      	str	r3, [r5, #0]
100152be:	3401      	adds	r4, #1
100152c0:	7821      	ldrb	r1, [r4, #0]
100152c2:	1c63      	adds	r3, r4, #1
100152c4:	2206      	movs	r2, #6
100152c6:	4861      	ldr	r0, [pc, #388]	; (1001544c <_vfiprintf_r+0x228>)
100152c8:	9302      	str	r3, [sp, #8]
100152ca:	7629      	strb	r1, [r5, #24]
100152cc:	f000 fb36 	bl	1001593c <memchr>
100152d0:	2800      	cmp	r0, #0
100152d2:	d100      	bne.n	100152d6 <_vfiprintf_r+0xb2>
100152d4:	e09d      	b.n	10015412 <_vfiprintf_r+0x1ee>
100152d6:	4b5e      	ldr	r3, [pc, #376]	; (10015450 <_vfiprintf_r+0x22c>)
100152d8:	2b00      	cmp	r3, #0
100152da:	d000      	beq.n	100152de <_vfiprintf_r+0xba>
100152dc:	e090      	b.n	10015400 <_vfiprintf_r+0x1dc>
100152de:	2207      	movs	r2, #7
100152e0:	9b05      	ldr	r3, [sp, #20]
100152e2:	3307      	adds	r3, #7
100152e4:	4393      	bics	r3, r2
100152e6:	3308      	adds	r3, #8
100152e8:	9305      	str	r3, [sp, #20]
100152ea:	696b      	ldr	r3, [r5, #20]
100152ec:	9a03      	ldr	r2, [sp, #12]
100152ee:	189b      	adds	r3, r3, r2
100152f0:	616b      	str	r3, [r5, #20]
100152f2:	9c02      	ldr	r4, [sp, #8]
100152f4:	7823      	ldrb	r3, [r4, #0]
100152f6:	2b00      	cmp	r3, #0
100152f8:	d104      	bne.n	10015304 <_vfiprintf_r+0xe0>
100152fa:	9b02      	ldr	r3, [sp, #8]
100152fc:	1ae3      	subs	r3, r4, r3
100152fe:	9304      	str	r3, [sp, #16]
10015300:	d012      	beq.n	10015328 <_vfiprintf_r+0x104>
10015302:	e003      	b.n	1001530c <_vfiprintf_r+0xe8>
10015304:	2b25      	cmp	r3, #37	; 0x25
10015306:	d0f8      	beq.n	100152fa <_vfiprintf_r+0xd6>
10015308:	3401      	adds	r4, #1
1001530a:	e7f3      	b.n	100152f4 <_vfiprintf_r+0xd0>
1001530c:	9b04      	ldr	r3, [sp, #16]
1001530e:	9a02      	ldr	r2, [sp, #8]
10015310:	0039      	movs	r1, r7
10015312:	0030      	movs	r0, r6
10015314:	f7ff ff73 	bl	100151fe <__sfputs_r>
10015318:	1c43      	adds	r3, r0, #1
1001531a:	d100      	bne.n	1001531e <_vfiprintf_r+0xfa>
1001531c:	e086      	b.n	1001542c <_vfiprintf_r+0x208>
1001531e:	696a      	ldr	r2, [r5, #20]
10015320:	9b04      	ldr	r3, [sp, #16]
10015322:	4694      	mov	ip, r2
10015324:	4463      	add	r3, ip
10015326:	616b      	str	r3, [r5, #20]
10015328:	7823      	ldrb	r3, [r4, #0]
1001532a:	2b00      	cmp	r3, #0
1001532c:	d07e      	beq.n	1001542c <_vfiprintf_r+0x208>
1001532e:	2201      	movs	r2, #1
10015330:	2300      	movs	r3, #0
10015332:	4252      	negs	r2, r2
10015334:	606a      	str	r2, [r5, #4]
10015336:	a902      	add	r1, sp, #8
10015338:	3254      	adds	r2, #84	; 0x54
1001533a:	1852      	adds	r2, r2, r1
1001533c:	3401      	adds	r4, #1
1001533e:	602b      	str	r3, [r5, #0]
10015340:	60eb      	str	r3, [r5, #12]
10015342:	60ab      	str	r3, [r5, #8]
10015344:	7013      	strb	r3, [r2, #0]
10015346:	65ab      	str	r3, [r5, #88]	; 0x58
10015348:	7821      	ldrb	r1, [r4, #0]
1001534a:	2205      	movs	r2, #5
1001534c:	4841      	ldr	r0, [pc, #260]	; (10015454 <_vfiprintf_r+0x230>)
1001534e:	f000 faf5 	bl	1001593c <memchr>
10015352:	2800      	cmp	r0, #0
10015354:	d008      	beq.n	10015368 <_vfiprintf_r+0x144>
10015356:	4b3f      	ldr	r3, [pc, #252]	; (10015454 <_vfiprintf_r+0x230>)
10015358:	682a      	ldr	r2, [r5, #0]
1001535a:	1ac0      	subs	r0, r0, r3
1001535c:	2301      	movs	r3, #1
1001535e:	4083      	lsls	r3, r0
10015360:	4313      	orrs	r3, r2
10015362:	602b      	str	r3, [r5, #0]
10015364:	3401      	adds	r4, #1
10015366:	e7ef      	b.n	10015348 <_vfiprintf_r+0x124>
10015368:	682b      	ldr	r3, [r5, #0]
1001536a:	06da      	lsls	r2, r3, #27
1001536c:	d504      	bpl.n	10015378 <_vfiprintf_r+0x154>
1001536e:	2253      	movs	r2, #83	; 0x53
10015370:	2120      	movs	r1, #32
10015372:	a802      	add	r0, sp, #8
10015374:	1812      	adds	r2, r2, r0
10015376:	7011      	strb	r1, [r2, #0]
10015378:	071a      	lsls	r2, r3, #28
1001537a:	d504      	bpl.n	10015386 <_vfiprintf_r+0x162>
1001537c:	2253      	movs	r2, #83	; 0x53
1001537e:	212b      	movs	r1, #43	; 0x2b
10015380:	a802      	add	r0, sp, #8
10015382:	1812      	adds	r2, r2, r0
10015384:	7011      	strb	r1, [r2, #0]
10015386:	7822      	ldrb	r2, [r4, #0]
10015388:	2a2a      	cmp	r2, #42	; 0x2a
1001538a:	d100      	bne.n	1001538e <_vfiprintf_r+0x16a>
1001538c:	e77c      	b.n	10015288 <_vfiprintf_r+0x64>
1001538e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015390:	2000      	movs	r0, #0
10015392:	210a      	movs	r1, #10
10015394:	e005      	b.n	100153a2 <_vfiprintf_r+0x17e>
10015396:	4252      	negs	r2, r2
10015398:	60ea      	str	r2, [r5, #12]
1001539a:	2202      	movs	r2, #2
1001539c:	4313      	orrs	r3, r2
1001539e:	602b      	str	r3, [r5, #0]
100153a0:	e77a      	b.n	10015298 <_vfiprintf_r+0x74>
100153a2:	7822      	ldrb	r2, [r4, #0]
100153a4:	3a30      	subs	r2, #48	; 0x30
100153a6:	2a09      	cmp	r2, #9
100153a8:	d804      	bhi.n	100153b4 <_vfiprintf_r+0x190>
100153aa:	434b      	muls	r3, r1
100153ac:	3401      	adds	r4, #1
100153ae:	189b      	adds	r3, r3, r2
100153b0:	2001      	movs	r0, #1
100153b2:	e7f6      	b.n	100153a2 <_vfiprintf_r+0x17e>
100153b4:	2800      	cmp	r0, #0
100153b6:	d100      	bne.n	100153ba <_vfiprintf_r+0x196>
100153b8:	e76f      	b.n	1001529a <_vfiprintf_r+0x76>
100153ba:	9309      	str	r3, [sp, #36]	; 0x24
100153bc:	e76d      	b.n	1001529a <_vfiprintf_r+0x76>
100153be:	7863      	ldrb	r3, [r4, #1]
100153c0:	2b2a      	cmp	r3, #42	; 0x2a
100153c2:	d10a      	bne.n	100153da <_vfiprintf_r+0x1b6>
100153c4:	9b05      	ldr	r3, [sp, #20]
100153c6:	3402      	adds	r4, #2
100153c8:	1d1a      	adds	r2, r3, #4
100153ca:	681b      	ldr	r3, [r3, #0]
100153cc:	9205      	str	r2, [sp, #20]
100153ce:	2b00      	cmp	r3, #0
100153d0:	da01      	bge.n	100153d6 <_vfiprintf_r+0x1b2>
100153d2:	2301      	movs	r3, #1
100153d4:	425b      	negs	r3, r3
100153d6:	9307      	str	r3, [sp, #28]
100153d8:	e763      	b.n	100152a2 <_vfiprintf_r+0x7e>
100153da:	2300      	movs	r3, #0
100153dc:	200a      	movs	r0, #10
100153de:	001a      	movs	r2, r3
100153e0:	3401      	adds	r4, #1
100153e2:	606b      	str	r3, [r5, #4]
100153e4:	7821      	ldrb	r1, [r4, #0]
100153e6:	3930      	subs	r1, #48	; 0x30
100153e8:	2909      	cmp	r1, #9
100153ea:	d804      	bhi.n	100153f6 <_vfiprintf_r+0x1d2>
100153ec:	4342      	muls	r2, r0
100153ee:	3401      	adds	r4, #1
100153f0:	1852      	adds	r2, r2, r1
100153f2:	2301      	movs	r3, #1
100153f4:	e7f6      	b.n	100153e4 <_vfiprintf_r+0x1c0>
100153f6:	2b00      	cmp	r3, #0
100153f8:	d100      	bne.n	100153fc <_vfiprintf_r+0x1d8>
100153fa:	e752      	b.n	100152a2 <_vfiprintf_r+0x7e>
100153fc:	9207      	str	r2, [sp, #28]
100153fe:	e750      	b.n	100152a2 <_vfiprintf_r+0x7e>
10015400:	ab05      	add	r3, sp, #20
10015402:	9300      	str	r3, [sp, #0]
10015404:	003a      	movs	r2, r7
10015406:	4b14      	ldr	r3, [pc, #80]	; (10015458 <_vfiprintf_r+0x234>)
10015408:	0029      	movs	r1, r5
1001540a:	0030      	movs	r0, r6
1001540c:	e000      	b.n	10015410 <_vfiprintf_r+0x1ec>
1001540e:	bf00      	nop
10015410:	e007      	b.n	10015422 <_vfiprintf_r+0x1fe>
10015412:	ab05      	add	r3, sp, #20
10015414:	9300      	str	r3, [sp, #0]
10015416:	003a      	movs	r2, r7
10015418:	4b0f      	ldr	r3, [pc, #60]	; (10015458 <_vfiprintf_r+0x234>)
1001541a:	0029      	movs	r1, r5
1001541c:	0030      	movs	r0, r6
1001541e:	f000 f88b 	bl	10015538 <_printf_i>
10015422:	9003      	str	r0, [sp, #12]
10015424:	9b03      	ldr	r3, [sp, #12]
10015426:	3301      	adds	r3, #1
10015428:	d000      	beq.n	1001542c <_vfiprintf_r+0x208>
1001542a:	e75e      	b.n	100152ea <_vfiprintf_r+0xc6>
1001542c:	89bb      	ldrh	r3, [r7, #12]
1001542e:	065b      	lsls	r3, r3, #25
10015430:	d500      	bpl.n	10015434 <_vfiprintf_r+0x210>
10015432:	e726      	b.n	10015282 <_vfiprintf_r+0x5e>
10015434:	980b      	ldr	r0, [sp, #44]	; 0x2c
10015436:	b01f      	add	sp, #124	; 0x7c
10015438:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001543a:	46c0      	nop			; (mov r8, r8)
1001543c:	100172d8 	.word	0x100172d8
10015440:	100172f8 	.word	0x100172f8
10015444:	10017318 	.word	0x10017318
10015448:	1001733e 	.word	0x1001733e
1001544c:	10017342 	.word	0x10017342
10015450:	00000000 	.word	0x00000000
10015454:	10017338 	.word	0x10017338
10015458:	100151ff 	.word	0x100151ff

1001545c <_printf_common>:
1001545c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001545e:	0017      	movs	r7, r2
10015460:	9301      	str	r3, [sp, #4]
10015462:	688a      	ldr	r2, [r1, #8]
10015464:	690b      	ldr	r3, [r1, #16]
10015466:	9000      	str	r0, [sp, #0]
10015468:	000c      	movs	r4, r1
1001546a:	4293      	cmp	r3, r2
1001546c:	da00      	bge.n	10015470 <_printf_common+0x14>
1001546e:	0013      	movs	r3, r2
10015470:	0022      	movs	r2, r4
10015472:	603b      	str	r3, [r7, #0]
10015474:	3243      	adds	r2, #67	; 0x43
10015476:	7812      	ldrb	r2, [r2, #0]
10015478:	2a00      	cmp	r2, #0
1001547a:	d001      	beq.n	10015480 <_printf_common+0x24>
1001547c:	3301      	adds	r3, #1
1001547e:	603b      	str	r3, [r7, #0]
10015480:	6823      	ldr	r3, [r4, #0]
10015482:	069b      	lsls	r3, r3, #26
10015484:	d502      	bpl.n	1001548c <_printf_common+0x30>
10015486:	683b      	ldr	r3, [r7, #0]
10015488:	3302      	adds	r3, #2
1001548a:	603b      	str	r3, [r7, #0]
1001548c:	2506      	movs	r5, #6
1001548e:	6823      	ldr	r3, [r4, #0]
10015490:	401d      	ands	r5, r3
10015492:	d01e      	beq.n	100154d2 <_printf_common+0x76>
10015494:	0023      	movs	r3, r4
10015496:	3343      	adds	r3, #67	; 0x43
10015498:	781b      	ldrb	r3, [r3, #0]
1001549a:	1e5a      	subs	r2, r3, #1
1001549c:	4193      	sbcs	r3, r2
1001549e:	6822      	ldr	r2, [r4, #0]
100154a0:	0692      	lsls	r2, r2, #26
100154a2:	d51c      	bpl.n	100154de <_printf_common+0x82>
100154a4:	2030      	movs	r0, #48	; 0x30
100154a6:	18e1      	adds	r1, r4, r3
100154a8:	3143      	adds	r1, #67	; 0x43
100154aa:	7008      	strb	r0, [r1, #0]
100154ac:	0021      	movs	r1, r4
100154ae:	1c5a      	adds	r2, r3, #1
100154b0:	3145      	adds	r1, #69	; 0x45
100154b2:	7809      	ldrb	r1, [r1, #0]
100154b4:	18a2      	adds	r2, r4, r2
100154b6:	3243      	adds	r2, #67	; 0x43
100154b8:	3302      	adds	r3, #2
100154ba:	7011      	strb	r1, [r2, #0]
100154bc:	e00f      	b.n	100154de <_printf_common+0x82>
100154be:	0022      	movs	r2, r4
100154c0:	2301      	movs	r3, #1
100154c2:	3219      	adds	r2, #25
100154c4:	9901      	ldr	r1, [sp, #4]
100154c6:	9800      	ldr	r0, [sp, #0]
100154c8:	9e08      	ldr	r6, [sp, #32]
100154ca:	47b0      	blx	r6
100154cc:	1c43      	adds	r3, r0, #1
100154ce:	d00e      	beq.n	100154ee <_printf_common+0x92>
100154d0:	3501      	adds	r5, #1
100154d2:	68e3      	ldr	r3, [r4, #12]
100154d4:	683a      	ldr	r2, [r7, #0]
100154d6:	1a9b      	subs	r3, r3, r2
100154d8:	429d      	cmp	r5, r3
100154da:	dbf0      	blt.n	100154be <_printf_common+0x62>
100154dc:	e7da      	b.n	10015494 <_printf_common+0x38>
100154de:	0022      	movs	r2, r4
100154e0:	9901      	ldr	r1, [sp, #4]
100154e2:	3243      	adds	r2, #67	; 0x43
100154e4:	9800      	ldr	r0, [sp, #0]
100154e6:	9d08      	ldr	r5, [sp, #32]
100154e8:	47a8      	blx	r5
100154ea:	1c43      	adds	r3, r0, #1
100154ec:	d102      	bne.n	100154f4 <_printf_common+0x98>
100154ee:	2001      	movs	r0, #1
100154f0:	4240      	negs	r0, r0
100154f2:	e020      	b.n	10015536 <_printf_common+0xda>
100154f4:	2306      	movs	r3, #6
100154f6:	6820      	ldr	r0, [r4, #0]
100154f8:	68e1      	ldr	r1, [r4, #12]
100154fa:	683a      	ldr	r2, [r7, #0]
100154fc:	4003      	ands	r3, r0
100154fe:	2500      	movs	r5, #0
10015500:	2b04      	cmp	r3, #4
10015502:	d103      	bne.n	1001550c <_printf_common+0xb0>
10015504:	1a8d      	subs	r5, r1, r2
10015506:	43eb      	mvns	r3, r5
10015508:	17db      	asrs	r3, r3, #31
1001550a:	401d      	ands	r5, r3
1001550c:	68a3      	ldr	r3, [r4, #8]
1001550e:	6922      	ldr	r2, [r4, #16]
10015510:	4293      	cmp	r3, r2
10015512:	dd01      	ble.n	10015518 <_printf_common+0xbc>
10015514:	1a9b      	subs	r3, r3, r2
10015516:	18ed      	adds	r5, r5, r3
10015518:	2700      	movs	r7, #0
1001551a:	42bd      	cmp	r5, r7
1001551c:	d00a      	beq.n	10015534 <_printf_common+0xd8>
1001551e:	0022      	movs	r2, r4
10015520:	2301      	movs	r3, #1
10015522:	321a      	adds	r2, #26
10015524:	9901      	ldr	r1, [sp, #4]
10015526:	9800      	ldr	r0, [sp, #0]
10015528:	9e08      	ldr	r6, [sp, #32]
1001552a:	47b0      	blx	r6
1001552c:	1c43      	adds	r3, r0, #1
1001552e:	d0de      	beq.n	100154ee <_printf_common+0x92>
10015530:	3701      	adds	r7, #1
10015532:	e7f2      	b.n	1001551a <_printf_common+0xbe>
10015534:	2000      	movs	r0, #0
10015536:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10015538 <_printf_i>:
10015538:	b5f0      	push	{r4, r5, r6, r7, lr}
1001553a:	b08b      	sub	sp, #44	; 0x2c
1001553c:	9206      	str	r2, [sp, #24]
1001553e:	000a      	movs	r2, r1
10015540:	3243      	adds	r2, #67	; 0x43
10015542:	9307      	str	r3, [sp, #28]
10015544:	9005      	str	r0, [sp, #20]
10015546:	9204      	str	r2, [sp, #16]
10015548:	7e0a      	ldrb	r2, [r1, #24]
1001554a:	000c      	movs	r4, r1
1001554c:	9b10      	ldr	r3, [sp, #64]	; 0x40
1001554e:	2a6e      	cmp	r2, #110	; 0x6e
10015550:	d100      	bne.n	10015554 <_printf_i+0x1c>
10015552:	e0ab      	b.n	100156ac <_printf_i+0x174>
10015554:	d811      	bhi.n	1001557a <_printf_i+0x42>
10015556:	2a63      	cmp	r2, #99	; 0x63
10015558:	d022      	beq.n	100155a0 <_printf_i+0x68>
1001555a:	d809      	bhi.n	10015570 <_printf_i+0x38>
1001555c:	2a00      	cmp	r2, #0
1001555e:	d100      	bne.n	10015562 <_printf_i+0x2a>
10015560:	e0b5      	b.n	100156ce <_printf_i+0x196>
10015562:	2a58      	cmp	r2, #88	; 0x58
10015564:	d000      	beq.n	10015568 <_printf_i+0x30>
10015566:	e0c5      	b.n	100156f4 <_printf_i+0x1bc>
10015568:	3145      	adds	r1, #69	; 0x45
1001556a:	700a      	strb	r2, [r1, #0]
1001556c:	4a81      	ldr	r2, [pc, #516]	; (10015774 <_printf_i+0x23c>)
1001556e:	e04f      	b.n	10015610 <_printf_i+0xd8>
10015570:	2a64      	cmp	r2, #100	; 0x64
10015572:	d01d      	beq.n	100155b0 <_printf_i+0x78>
10015574:	2a69      	cmp	r2, #105	; 0x69
10015576:	d01b      	beq.n	100155b0 <_printf_i+0x78>
10015578:	e0bc      	b.n	100156f4 <_printf_i+0x1bc>
1001557a:	2a73      	cmp	r2, #115	; 0x73
1001557c:	d100      	bne.n	10015580 <_printf_i+0x48>
1001557e:	e0aa      	b.n	100156d6 <_printf_i+0x19e>
10015580:	d809      	bhi.n	10015596 <_printf_i+0x5e>
10015582:	2a6f      	cmp	r2, #111	; 0x6f
10015584:	d029      	beq.n	100155da <_printf_i+0xa2>
10015586:	2a70      	cmp	r2, #112	; 0x70
10015588:	d000      	beq.n	1001558c <_printf_i+0x54>
1001558a:	e0b3      	b.n	100156f4 <_printf_i+0x1bc>
1001558c:	2220      	movs	r2, #32
1001558e:	6809      	ldr	r1, [r1, #0]
10015590:	430a      	orrs	r2, r1
10015592:	6022      	str	r2, [r4, #0]
10015594:	e037      	b.n	10015606 <_printf_i+0xce>
10015596:	2a75      	cmp	r2, #117	; 0x75
10015598:	d01f      	beq.n	100155da <_printf_i+0xa2>
1001559a:	2a78      	cmp	r2, #120	; 0x78
1001559c:	d033      	beq.n	10015606 <_printf_i+0xce>
1001559e:	e0a9      	b.n	100156f4 <_printf_i+0x1bc>
100155a0:	000e      	movs	r6, r1
100155a2:	681a      	ldr	r2, [r3, #0]
100155a4:	3642      	adds	r6, #66	; 0x42
100155a6:	1d11      	adds	r1, r2, #4
100155a8:	6019      	str	r1, [r3, #0]
100155aa:	6813      	ldr	r3, [r2, #0]
100155ac:	7033      	strb	r3, [r6, #0]
100155ae:	e0a4      	b.n	100156fa <_printf_i+0x1c2>
100155b0:	6821      	ldr	r1, [r4, #0]
100155b2:	681a      	ldr	r2, [r3, #0]
100155b4:	0608      	lsls	r0, r1, #24
100155b6:	d406      	bmi.n	100155c6 <_printf_i+0x8e>
100155b8:	0649      	lsls	r1, r1, #25
100155ba:	d504      	bpl.n	100155c6 <_printf_i+0x8e>
100155bc:	1d11      	adds	r1, r2, #4
100155be:	6019      	str	r1, [r3, #0]
100155c0:	2300      	movs	r3, #0
100155c2:	5ed5      	ldrsh	r5, [r2, r3]
100155c4:	e002      	b.n	100155cc <_printf_i+0x94>
100155c6:	1d11      	adds	r1, r2, #4
100155c8:	6019      	str	r1, [r3, #0]
100155ca:	6815      	ldr	r5, [r2, #0]
100155cc:	2d00      	cmp	r5, #0
100155ce:	da3b      	bge.n	10015648 <_printf_i+0x110>
100155d0:	232d      	movs	r3, #45	; 0x2d
100155d2:	9a04      	ldr	r2, [sp, #16]
100155d4:	426d      	negs	r5, r5
100155d6:	7013      	strb	r3, [r2, #0]
100155d8:	e036      	b.n	10015648 <_printf_i+0x110>
100155da:	6821      	ldr	r1, [r4, #0]
100155dc:	681a      	ldr	r2, [r3, #0]
100155de:	0608      	lsls	r0, r1, #24
100155e0:	d406      	bmi.n	100155f0 <_printf_i+0xb8>
100155e2:	0649      	lsls	r1, r1, #25
100155e4:	d504      	bpl.n	100155f0 <_printf_i+0xb8>
100155e6:	6815      	ldr	r5, [r2, #0]
100155e8:	1d11      	adds	r1, r2, #4
100155ea:	6019      	str	r1, [r3, #0]
100155ec:	b2ad      	uxth	r5, r5
100155ee:	e002      	b.n	100155f6 <_printf_i+0xbe>
100155f0:	1d11      	adds	r1, r2, #4
100155f2:	6019      	str	r1, [r3, #0]
100155f4:	6815      	ldr	r5, [r2, #0]
100155f6:	4b5f      	ldr	r3, [pc, #380]	; (10015774 <_printf_i+0x23c>)
100155f8:	7e22      	ldrb	r2, [r4, #24]
100155fa:	9303      	str	r3, [sp, #12]
100155fc:	2708      	movs	r7, #8
100155fe:	2a6f      	cmp	r2, #111	; 0x6f
10015600:	d01d      	beq.n	1001563e <_printf_i+0x106>
10015602:	270a      	movs	r7, #10
10015604:	e01b      	b.n	1001563e <_printf_i+0x106>
10015606:	0022      	movs	r2, r4
10015608:	2178      	movs	r1, #120	; 0x78
1001560a:	3245      	adds	r2, #69	; 0x45
1001560c:	7011      	strb	r1, [r2, #0]
1001560e:	4a5a      	ldr	r2, [pc, #360]	; (10015778 <_printf_i+0x240>)
10015610:	6819      	ldr	r1, [r3, #0]
10015612:	9203      	str	r2, [sp, #12]
10015614:	1d08      	adds	r0, r1, #4
10015616:	6822      	ldr	r2, [r4, #0]
10015618:	6018      	str	r0, [r3, #0]
1001561a:	680d      	ldr	r5, [r1, #0]
1001561c:	0610      	lsls	r0, r2, #24
1001561e:	d402      	bmi.n	10015626 <_printf_i+0xee>
10015620:	0650      	lsls	r0, r2, #25
10015622:	d500      	bpl.n	10015626 <_printf_i+0xee>
10015624:	b2ad      	uxth	r5, r5
10015626:	07d3      	lsls	r3, r2, #31
10015628:	d502      	bpl.n	10015630 <_printf_i+0xf8>
1001562a:	2320      	movs	r3, #32
1001562c:	431a      	orrs	r2, r3
1001562e:	6022      	str	r2, [r4, #0]
10015630:	2710      	movs	r7, #16
10015632:	2d00      	cmp	r5, #0
10015634:	d103      	bne.n	1001563e <_printf_i+0x106>
10015636:	2320      	movs	r3, #32
10015638:	6822      	ldr	r2, [r4, #0]
1001563a:	439a      	bics	r2, r3
1001563c:	6022      	str	r2, [r4, #0]
1001563e:	0023      	movs	r3, r4
10015640:	2200      	movs	r2, #0
10015642:	3343      	adds	r3, #67	; 0x43
10015644:	701a      	strb	r2, [r3, #0]
10015646:	e002      	b.n	1001564e <_printf_i+0x116>
10015648:	270a      	movs	r7, #10
1001564a:	4b4a      	ldr	r3, [pc, #296]	; (10015774 <_printf_i+0x23c>)
1001564c:	9303      	str	r3, [sp, #12]
1001564e:	6863      	ldr	r3, [r4, #4]
10015650:	60a3      	str	r3, [r4, #8]
10015652:	2b00      	cmp	r3, #0
10015654:	db09      	blt.n	1001566a <_printf_i+0x132>
10015656:	2204      	movs	r2, #4
10015658:	6821      	ldr	r1, [r4, #0]
1001565a:	4391      	bics	r1, r2
1001565c:	6021      	str	r1, [r4, #0]
1001565e:	2d00      	cmp	r5, #0
10015660:	d105      	bne.n	1001566e <_printf_i+0x136>
10015662:	9e04      	ldr	r6, [sp, #16]
10015664:	2b00      	cmp	r3, #0
10015666:	d011      	beq.n	1001568c <_printf_i+0x154>
10015668:	e07b      	b.n	10015762 <_printf_i+0x22a>
1001566a:	2d00      	cmp	r5, #0
1001566c:	d079      	beq.n	10015762 <_printf_i+0x22a>
1001566e:	9e04      	ldr	r6, [sp, #16]
10015670:	0028      	movs	r0, r5
10015672:	0039      	movs	r1, r7
10015674:	f7fc fd48 	bl	10012108 <__aeabi_uidivmod>
10015678:	9b03      	ldr	r3, [sp, #12]
1001567a:	3e01      	subs	r6, #1
1001567c:	5c5b      	ldrb	r3, [r3, r1]
1001567e:	0028      	movs	r0, r5
10015680:	7033      	strb	r3, [r6, #0]
10015682:	0039      	movs	r1, r7
10015684:	f7fc fcba 	bl	10011ffc <__aeabi_uidiv>
10015688:	1e05      	subs	r5, r0, #0
1001568a:	d1f1      	bne.n	10015670 <_printf_i+0x138>
1001568c:	2f08      	cmp	r7, #8
1001568e:	d109      	bne.n	100156a4 <_printf_i+0x16c>
10015690:	6823      	ldr	r3, [r4, #0]
10015692:	07db      	lsls	r3, r3, #31
10015694:	d506      	bpl.n	100156a4 <_printf_i+0x16c>
10015696:	6863      	ldr	r3, [r4, #4]
10015698:	6922      	ldr	r2, [r4, #16]
1001569a:	4293      	cmp	r3, r2
1001569c:	dc02      	bgt.n	100156a4 <_printf_i+0x16c>
1001569e:	2330      	movs	r3, #48	; 0x30
100156a0:	3e01      	subs	r6, #1
100156a2:	7033      	strb	r3, [r6, #0]
100156a4:	9b04      	ldr	r3, [sp, #16]
100156a6:	1b9b      	subs	r3, r3, r6
100156a8:	6123      	str	r3, [r4, #16]
100156aa:	e02b      	b.n	10015704 <_printf_i+0x1cc>
100156ac:	6809      	ldr	r1, [r1, #0]
100156ae:	681a      	ldr	r2, [r3, #0]
100156b0:	0608      	lsls	r0, r1, #24
100156b2:	d407      	bmi.n	100156c4 <_printf_i+0x18c>
100156b4:	0649      	lsls	r1, r1, #25
100156b6:	d505      	bpl.n	100156c4 <_printf_i+0x18c>
100156b8:	1d11      	adds	r1, r2, #4
100156ba:	6019      	str	r1, [r3, #0]
100156bc:	6813      	ldr	r3, [r2, #0]
100156be:	8aa2      	ldrh	r2, [r4, #20]
100156c0:	801a      	strh	r2, [r3, #0]
100156c2:	e004      	b.n	100156ce <_printf_i+0x196>
100156c4:	1d11      	adds	r1, r2, #4
100156c6:	6019      	str	r1, [r3, #0]
100156c8:	6813      	ldr	r3, [r2, #0]
100156ca:	6962      	ldr	r2, [r4, #20]
100156cc:	601a      	str	r2, [r3, #0]
100156ce:	2300      	movs	r3, #0
100156d0:	9e04      	ldr	r6, [sp, #16]
100156d2:	6123      	str	r3, [r4, #16]
100156d4:	e016      	b.n	10015704 <_printf_i+0x1cc>
100156d6:	681a      	ldr	r2, [r3, #0]
100156d8:	1d11      	adds	r1, r2, #4
100156da:	6019      	str	r1, [r3, #0]
100156dc:	6816      	ldr	r6, [r2, #0]
100156de:	2100      	movs	r1, #0
100156e0:	6862      	ldr	r2, [r4, #4]
100156e2:	0030      	movs	r0, r6
100156e4:	f000 f92a 	bl	1001593c <memchr>
100156e8:	2800      	cmp	r0, #0
100156ea:	d001      	beq.n	100156f0 <_printf_i+0x1b8>
100156ec:	1b80      	subs	r0, r0, r6
100156ee:	6060      	str	r0, [r4, #4]
100156f0:	6863      	ldr	r3, [r4, #4]
100156f2:	e003      	b.n	100156fc <_printf_i+0x1c4>
100156f4:	0026      	movs	r6, r4
100156f6:	3642      	adds	r6, #66	; 0x42
100156f8:	7032      	strb	r2, [r6, #0]
100156fa:	2301      	movs	r3, #1
100156fc:	6123      	str	r3, [r4, #16]
100156fe:	2300      	movs	r3, #0
10015700:	9a04      	ldr	r2, [sp, #16]
10015702:	7013      	strb	r3, [r2, #0]
10015704:	9b07      	ldr	r3, [sp, #28]
10015706:	aa09      	add	r2, sp, #36	; 0x24
10015708:	9300      	str	r3, [sp, #0]
1001570a:	0021      	movs	r1, r4
1001570c:	9b06      	ldr	r3, [sp, #24]
1001570e:	9805      	ldr	r0, [sp, #20]
10015710:	f7ff fea4 	bl	1001545c <_printf_common>
10015714:	1c43      	adds	r3, r0, #1
10015716:	d102      	bne.n	1001571e <_printf_i+0x1e6>
10015718:	2001      	movs	r0, #1
1001571a:	4240      	negs	r0, r0
1001571c:	e027      	b.n	1001576e <_printf_i+0x236>
1001571e:	6923      	ldr	r3, [r4, #16]
10015720:	0032      	movs	r2, r6
10015722:	9906      	ldr	r1, [sp, #24]
10015724:	9805      	ldr	r0, [sp, #20]
10015726:	9d07      	ldr	r5, [sp, #28]
10015728:	47a8      	blx	r5
1001572a:	1c43      	adds	r3, r0, #1
1001572c:	d0f4      	beq.n	10015718 <_printf_i+0x1e0>
1001572e:	6823      	ldr	r3, [r4, #0]
10015730:	2500      	movs	r5, #0
10015732:	079b      	lsls	r3, r3, #30
10015734:	d40f      	bmi.n	10015756 <_printf_i+0x21e>
10015736:	9b09      	ldr	r3, [sp, #36]	; 0x24
10015738:	68e0      	ldr	r0, [r4, #12]
1001573a:	4298      	cmp	r0, r3
1001573c:	da17      	bge.n	1001576e <_printf_i+0x236>
1001573e:	0018      	movs	r0, r3
10015740:	e015      	b.n	1001576e <_printf_i+0x236>
10015742:	0022      	movs	r2, r4
10015744:	2301      	movs	r3, #1
10015746:	3219      	adds	r2, #25
10015748:	9906      	ldr	r1, [sp, #24]
1001574a:	9805      	ldr	r0, [sp, #20]
1001574c:	9e07      	ldr	r6, [sp, #28]
1001574e:	47b0      	blx	r6
10015750:	1c43      	adds	r3, r0, #1
10015752:	d0e1      	beq.n	10015718 <_printf_i+0x1e0>
10015754:	3501      	adds	r5, #1
10015756:	68e3      	ldr	r3, [r4, #12]
10015758:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001575a:	1a9b      	subs	r3, r3, r2
1001575c:	429d      	cmp	r5, r3
1001575e:	dbf0      	blt.n	10015742 <_printf_i+0x20a>
10015760:	e7e9      	b.n	10015736 <_printf_i+0x1fe>
10015762:	0026      	movs	r6, r4
10015764:	9b03      	ldr	r3, [sp, #12]
10015766:	3642      	adds	r6, #66	; 0x42
10015768:	781b      	ldrb	r3, [r3, #0]
1001576a:	7033      	strb	r3, [r6, #0]
1001576c:	e78e      	b.n	1001568c <_printf_i+0x154>
1001576e:	b00b      	add	sp, #44	; 0x2c
10015770:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015772:	46c0      	nop			; (mov r8, r8)
10015774:	10017349 	.word	0x10017349
10015778:	1001735a 	.word	0x1001735a

1001577c <_putc_r>:
1001577c:	b570      	push	{r4, r5, r6, lr}
1001577e:	0006      	movs	r6, r0
10015780:	000d      	movs	r5, r1
10015782:	0014      	movs	r4, r2
10015784:	2800      	cmp	r0, #0
10015786:	d004      	beq.n	10015792 <_putc_r+0x16>
10015788:	6983      	ldr	r3, [r0, #24]
1001578a:	2b00      	cmp	r3, #0
1001578c:	d101      	bne.n	10015792 <_putc_r+0x16>
1001578e:	f7ff fc29 	bl	10014fe4 <__sinit>
10015792:	4b12      	ldr	r3, [pc, #72]	; (100157dc <_putc_r+0x60>)
10015794:	429c      	cmp	r4, r3
10015796:	d101      	bne.n	1001579c <_putc_r+0x20>
10015798:	6874      	ldr	r4, [r6, #4]
1001579a:	e008      	b.n	100157ae <_putc_r+0x32>
1001579c:	4b10      	ldr	r3, [pc, #64]	; (100157e0 <_putc_r+0x64>)
1001579e:	429c      	cmp	r4, r3
100157a0:	d101      	bne.n	100157a6 <_putc_r+0x2a>
100157a2:	68b4      	ldr	r4, [r6, #8]
100157a4:	e003      	b.n	100157ae <_putc_r+0x32>
100157a6:	4b0f      	ldr	r3, [pc, #60]	; (100157e4 <_putc_r+0x68>)
100157a8:	429c      	cmp	r4, r3
100157aa:	d100      	bne.n	100157ae <_putc_r+0x32>
100157ac:	68f4      	ldr	r4, [r6, #12]
100157ae:	68a3      	ldr	r3, [r4, #8]
100157b0:	3b01      	subs	r3, #1
100157b2:	60a3      	str	r3, [r4, #8]
100157b4:	2b00      	cmp	r3, #0
100157b6:	da05      	bge.n	100157c4 <_putc_r+0x48>
100157b8:	69a2      	ldr	r2, [r4, #24]
100157ba:	4293      	cmp	r3, r2
100157bc:	db08      	blt.n	100157d0 <_putc_r+0x54>
100157be:	b2eb      	uxtb	r3, r5
100157c0:	2b0a      	cmp	r3, #10
100157c2:	d005      	beq.n	100157d0 <_putc_r+0x54>
100157c4:	6823      	ldr	r3, [r4, #0]
100157c6:	b2e8      	uxtb	r0, r5
100157c8:	1c5a      	adds	r2, r3, #1
100157ca:	6022      	str	r2, [r4, #0]
100157cc:	701d      	strb	r5, [r3, #0]
100157ce:	e004      	b.n	100157da <_putc_r+0x5e>
100157d0:	0022      	movs	r2, r4
100157d2:	0029      	movs	r1, r5
100157d4:	0030      	movs	r0, r6
100157d6:	f7ff fa43 	bl	10014c60 <__swbuf_r>
100157da:	bd70      	pop	{r4, r5, r6, pc}
100157dc:	100172d8 	.word	0x100172d8
100157e0:	100172f8 	.word	0x100172f8
100157e4:	10017318 	.word	0x10017318

100157e8 <__sread>:
100157e8:	b570      	push	{r4, r5, r6, lr}
100157ea:	000c      	movs	r4, r1
100157ec:	250e      	movs	r5, #14
100157ee:	5f49      	ldrsh	r1, [r1, r5]
100157f0:	f000 f8b0 	bl	10015954 <_read_r>
100157f4:	2800      	cmp	r0, #0
100157f6:	db03      	blt.n	10015800 <__sread+0x18>
100157f8:	6d63      	ldr	r3, [r4, #84]	; 0x54
100157fa:	181b      	adds	r3, r3, r0
100157fc:	6563      	str	r3, [r4, #84]	; 0x54
100157fe:	e003      	b.n	10015808 <__sread+0x20>
10015800:	89a2      	ldrh	r2, [r4, #12]
10015802:	4b02      	ldr	r3, [pc, #8]	; (1001580c <__sread+0x24>)
10015804:	4013      	ands	r3, r2
10015806:	81a3      	strh	r3, [r4, #12]
10015808:	bd70      	pop	{r4, r5, r6, pc}
1001580a:	46c0      	nop			; (mov r8, r8)
1001580c:	ffffefff 	.word	0xffffefff

10015810 <__swrite>:
10015810:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015812:	001f      	movs	r7, r3
10015814:	898b      	ldrh	r3, [r1, #12]
10015816:	0005      	movs	r5, r0
10015818:	000c      	movs	r4, r1
1001581a:	0016      	movs	r6, r2
1001581c:	05db      	lsls	r3, r3, #23
1001581e:	d505      	bpl.n	1001582c <__swrite+0x1c>
10015820:	230e      	movs	r3, #14
10015822:	5ec9      	ldrsh	r1, [r1, r3]
10015824:	2200      	movs	r2, #0
10015826:	2302      	movs	r3, #2
10015828:	f000 f874 	bl	10015914 <_lseek_r>
1001582c:	89a2      	ldrh	r2, [r4, #12]
1001582e:	4b05      	ldr	r3, [pc, #20]	; (10015844 <__swrite+0x34>)
10015830:	0028      	movs	r0, r5
10015832:	4013      	ands	r3, r2
10015834:	81a3      	strh	r3, [r4, #12]
10015836:	0032      	movs	r2, r6
10015838:	230e      	movs	r3, #14
1001583a:	5ee1      	ldrsh	r1, [r4, r3]
1001583c:	003b      	movs	r3, r7
1001583e:	f000 f81f 	bl	10015880 <_write_r>
10015842:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015844:	ffffefff 	.word	0xffffefff

10015848 <__sseek>:
10015848:	b570      	push	{r4, r5, r6, lr}
1001584a:	000c      	movs	r4, r1
1001584c:	250e      	movs	r5, #14
1001584e:	5f49      	ldrsh	r1, [r1, r5]
10015850:	f000 f860 	bl	10015914 <_lseek_r>
10015854:	89a3      	ldrh	r3, [r4, #12]
10015856:	1c42      	adds	r2, r0, #1
10015858:	d103      	bne.n	10015862 <__sseek+0x1a>
1001585a:	4a05      	ldr	r2, [pc, #20]	; (10015870 <__sseek+0x28>)
1001585c:	4013      	ands	r3, r2
1001585e:	81a3      	strh	r3, [r4, #12]
10015860:	e004      	b.n	1001586c <__sseek+0x24>
10015862:	2280      	movs	r2, #128	; 0x80
10015864:	0152      	lsls	r2, r2, #5
10015866:	4313      	orrs	r3, r2
10015868:	81a3      	strh	r3, [r4, #12]
1001586a:	6560      	str	r0, [r4, #84]	; 0x54
1001586c:	bd70      	pop	{r4, r5, r6, pc}
1001586e:	46c0      	nop			; (mov r8, r8)
10015870:	ffffefff 	.word	0xffffefff

10015874 <__sclose>:
10015874:	b510      	push	{r4, lr}
10015876:	230e      	movs	r3, #14
10015878:	5ec9      	ldrsh	r1, [r1, r3]
1001587a:	f000 f815 	bl	100158a8 <_close_r>
1001587e:	bd10      	pop	{r4, pc}

10015880 <_write_r>:
10015880:	b570      	push	{r4, r5, r6, lr}
10015882:	0005      	movs	r5, r0
10015884:	0008      	movs	r0, r1
10015886:	0011      	movs	r1, r2
10015888:	2200      	movs	r2, #0
1001588a:	4c06      	ldr	r4, [pc, #24]	; (100158a4 <_write_r+0x24>)
1001588c:	6022      	str	r2, [r4, #0]
1001588e:	001a      	movs	r2, r3
10015890:	f7f6 f8de 	bl	1000ba50 <_write>
10015894:	1c43      	adds	r3, r0, #1
10015896:	d103      	bne.n	100158a0 <_write_r+0x20>
10015898:	6823      	ldr	r3, [r4, #0]
1001589a:	2b00      	cmp	r3, #0
1001589c:	d000      	beq.n	100158a0 <_write_r+0x20>
1001589e:	602b      	str	r3, [r5, #0]
100158a0:	bd70      	pop	{r4, r5, r6, pc}
100158a2:	46c0      	nop			; (mov r8, r8)
100158a4:	1001a310 	.word	0x1001a310

100158a8 <_close_r>:
100158a8:	2300      	movs	r3, #0
100158aa:	b570      	push	{r4, r5, r6, lr}
100158ac:	4c06      	ldr	r4, [pc, #24]	; (100158c8 <_close_r+0x20>)
100158ae:	0005      	movs	r5, r0
100158b0:	0008      	movs	r0, r1
100158b2:	6023      	str	r3, [r4, #0]
100158b4:	f7f2 fdb4 	bl	10008420 <_close>
100158b8:	1c43      	adds	r3, r0, #1
100158ba:	d103      	bne.n	100158c4 <_close_r+0x1c>
100158bc:	6823      	ldr	r3, [r4, #0]
100158be:	2b00      	cmp	r3, #0
100158c0:	d000      	beq.n	100158c4 <_close_r+0x1c>
100158c2:	602b      	str	r3, [r5, #0]
100158c4:	bd70      	pop	{r4, r5, r6, pc}
100158c6:	46c0      	nop			; (mov r8, r8)
100158c8:	1001a310 	.word	0x1001a310

100158cc <_fstat_r>:
100158cc:	2300      	movs	r3, #0
100158ce:	b570      	push	{r4, r5, r6, lr}
100158d0:	4c06      	ldr	r4, [pc, #24]	; (100158ec <_fstat_r+0x20>)
100158d2:	0005      	movs	r5, r0
100158d4:	0008      	movs	r0, r1
100158d6:	0011      	movs	r1, r2
100158d8:	6023      	str	r3, [r4, #0]
100158da:	f7f2 fda5 	bl	10008428 <_fstat>
100158de:	1c43      	adds	r3, r0, #1
100158e0:	d103      	bne.n	100158ea <_fstat_r+0x1e>
100158e2:	6823      	ldr	r3, [r4, #0]
100158e4:	2b00      	cmp	r3, #0
100158e6:	d000      	beq.n	100158ea <_fstat_r+0x1e>
100158e8:	602b      	str	r3, [r5, #0]
100158ea:	bd70      	pop	{r4, r5, r6, pc}
100158ec:	1001a310 	.word	0x1001a310

100158f0 <_isatty_r>:
100158f0:	2300      	movs	r3, #0
100158f2:	b570      	push	{r4, r5, r6, lr}
100158f4:	4c06      	ldr	r4, [pc, #24]	; (10015910 <_isatty_r+0x20>)
100158f6:	0005      	movs	r5, r0
100158f8:	0008      	movs	r0, r1
100158fa:	6023      	str	r3, [r4, #0]
100158fc:	f7f2 fd9a 	bl	10008434 <_isatty>
10015900:	1c43      	adds	r3, r0, #1
10015902:	d103      	bne.n	1001590c <_isatty_r+0x1c>
10015904:	6823      	ldr	r3, [r4, #0]
10015906:	2b00      	cmp	r3, #0
10015908:	d000      	beq.n	1001590c <_isatty_r+0x1c>
1001590a:	602b      	str	r3, [r5, #0]
1001590c:	bd70      	pop	{r4, r5, r6, pc}
1001590e:	46c0      	nop			; (mov r8, r8)
10015910:	1001a310 	.word	0x1001a310

10015914 <_lseek_r>:
10015914:	b570      	push	{r4, r5, r6, lr}
10015916:	0005      	movs	r5, r0
10015918:	0008      	movs	r0, r1
1001591a:	0011      	movs	r1, r2
1001591c:	2200      	movs	r2, #0
1001591e:	4c06      	ldr	r4, [pc, #24]	; (10015938 <_lseek_r+0x24>)
10015920:	6022      	str	r2, [r4, #0]
10015922:	001a      	movs	r2, r3
10015924:	f7f2 fd88 	bl	10008438 <_lseek>
10015928:	1c43      	adds	r3, r0, #1
1001592a:	d103      	bne.n	10015934 <_lseek_r+0x20>
1001592c:	6823      	ldr	r3, [r4, #0]
1001592e:	2b00      	cmp	r3, #0
10015930:	d000      	beq.n	10015934 <_lseek_r+0x20>
10015932:	602b      	str	r3, [r5, #0]
10015934:	bd70      	pop	{r4, r5, r6, pc}
10015936:	46c0      	nop			; (mov r8, r8)
10015938:	1001a310 	.word	0x1001a310

1001593c <memchr>:
1001593c:	b2c9      	uxtb	r1, r1
1001593e:	1882      	adds	r2, r0, r2
10015940:	4290      	cmp	r0, r2
10015942:	d004      	beq.n	1001594e <memchr+0x12>
10015944:	7803      	ldrb	r3, [r0, #0]
10015946:	428b      	cmp	r3, r1
10015948:	d002      	beq.n	10015950 <memchr+0x14>
1001594a:	3001      	adds	r0, #1
1001594c:	e7f8      	b.n	10015940 <memchr+0x4>
1001594e:	2000      	movs	r0, #0
10015950:	4770      	bx	lr
	...

10015954 <_read_r>:
10015954:	b570      	push	{r4, r5, r6, lr}
10015956:	0005      	movs	r5, r0
10015958:	0008      	movs	r0, r1
1001595a:	0011      	movs	r1, r2
1001595c:	2200      	movs	r2, #0
1001595e:	4c06      	ldr	r4, [pc, #24]	; (10015978 <_read_r+0x24>)
10015960:	6022      	str	r2, [r4, #0]
10015962:	001a      	movs	r2, r3
10015964:	f7f6 f854 	bl	1000ba10 <_read>
10015968:	1c43      	adds	r3, r0, #1
1001596a:	d103      	bne.n	10015974 <_read_r+0x20>
1001596c:	6823      	ldr	r3, [r4, #0]
1001596e:	2b00      	cmp	r3, #0
10015970:	d000      	beq.n	10015974 <_read_r+0x20>
10015972:	602b      	str	r3, [r5, #0]
10015974:	bd70      	pop	{r4, r5, r6, pc}
10015976:	46c0      	nop			; (mov r8, r8)
10015978:	1001a310 	.word	0x1001a310
1001597c:	0000000d 	.word	0x0000000d
10015980:	736d735b 	.word	0x736d735b
10015984:	656c625f 	.word	0x656c625f
10015988:	6961705f 	.word	0x6961705f
1001598c:	65725f72 	.word	0x65725f72
10015990:	73657571 	.word	0x73657571
10015994:	6e665f74 	.word	0x6e665f74
10015998:	6150095d 	.word	0x6150095d
1001599c:	6e697269 	.word	0x6e697269
100159a0:	65722067 	.word	0x65722067
100159a4:	73657571 	.word	0x73657571
100159a8:	2e2e2e74 	.word	0x2e2e2e74
100159ac:	656e4220 	.word	0x656e4220
100159b0:	64252077 	.word	0x64252077
100159b4:	4c42202c 	.word	0x4c42202c
100159b8:	78302045 	.word	0x78302045
100159bc:	78323025 	.word	0x78323025
100159c0:	3154202c 	.word	0x3154202c
100159c4:	2c642520 	.word	0x2c642520
100159c8:	20325420 	.word	0x20325420
100159cc:	00006425 	.word	0x00006425
100159d0:	6e6f6420 	.word	0x6e6f6420
100159d4:	00002165 	.word	0x00002165
100159d8:	3a4f2f54 	.word	0x3a4f2f54
100159dc:	46464f20 	.word	0x46464f20
100159e0:	00000000 	.word	0x00000000
100159e4:	736d735b 	.word	0x736d735b
100159e8:	656c625f 	.word	0x656c625f
100159ec:	776f705f 	.word	0x776f705f
100159f0:	645f7265 	.word	0x645f7265
100159f4:	5d6e776f 	.word	0x5d6e776f
100159f8:	00000000 	.word	0x00000000
100159fc:	736d735b 	.word	0x736d735b
10015a00:	656c625f 	.word	0x656c625f
10015a04:	776f705f 	.word	0x776f705f
10015a08:	645f7265 	.word	0x645f7265
10015a0c:	5d6e776f 	.word	0x5d6e776f
10015a10:	6f745309 	.word	0x6f745309
10015a14:	6e697070 	.word	0x6e697070
10015a18:	6f632067 	.word	0x6f632067
10015a1c:	6e616d6d 	.word	0x6e616d6d
10015a20:	65722064 	.word	0x65722064
10015a24:	76696563 	.word	0x76696563
10015a28:	64206465 	.word	0x64206465
10015a2c:	6e697275 	.word	0x6e697275
10015a30:	64612067 	.word	0x64612067
10015a34:	74726576 	.word	0x74726576
10015a38:	6d657369 	.word	0x6d657369
10015a3c:	2e746e65 	.word	0x2e746e65
10015a40:	6f745320 	.word	0x6f745320
10015a44:	6e697070 	.word	0x6e697070
10015a48:	2e2e2e67 	.word	0x2e2e2e67
10015a4c:	00000020 	.word	0x00000020
10015a50:	6c696166 	.word	0x6c696166
10015a54:	21216465 	.word	0x21216465
10015a58:	00000021 	.word	0x00000021
10015a5c:	656e6f64 	.word	0x656e6f64
10015a60:	00000021 	.word	0x00000021
10015a64:	736d735b 	.word	0x736d735b
10015a68:	656c625f 	.word	0x656c625f
10015a6c:	776f705f 	.word	0x776f705f
10015a70:	645f7265 	.word	0x645f7265
10015a74:	5d6e776f 	.word	0x5d6e776f
10015a78:	65440909 	.word	0x65440909
10015a7c:	65636976 	.word	0x65636976
10015a80:	69617020 	.word	0x69617020
10015a84:	2e646572 	.word	0x2e646572
10015a88:	64202e2e 	.word	0x64202e2e
10015a8c:	62617369 	.word	0x62617369
10015a90:	676e696c 	.word	0x676e696c
10015a94:	746e6920 	.word	0x746e6920
10015a98:	75727265 	.word	0x75727265
10015a9c:	20737470 	.word	0x20737470
10015aa0:	77732026 	.word	0x77732026
10015aa4:	68637469 	.word	0x68637469
10015aa8:	20676e69 	.word	0x20676e69
10015aac:	6e776f64 	.word	0x6e776f64
10015ab0:	6e657320 	.word	0x6e657320
10015ab4:	73726f73 	.word	0x73726f73
10015ab8:	00000000 	.word	0x00000000
10015abc:	736d735b 	.word	0x736d735b
10015ac0:	656c625f 	.word	0x656c625f
10015ac4:	776f705f 	.word	0x776f705f
10015ac8:	645f7265 	.word	0x645f7265
10015acc:	5d6e776f 	.word	0x5d6e776f
10015ad0:	75430909 	.word	0x75430909
10015ad4:	6e657272 	.word	0x6e657272
10015ad8:	20796c74 	.word	0x20796c74
10015adc:	69646e69 	.word	0x69646e69
10015ae0:	69746163 	.word	0x69746163
10015ae4:	0000676e 	.word	0x0000676e
10015ae8:	736d735b 	.word	0x736d735b
10015aec:	656c625f 	.word	0x656c625f
10015af0:	776f705f 	.word	0x776f705f
10015af4:	645f7265 	.word	0x645f7265
10015af8:	5d6e776f 	.word	0x5d6e776f
10015afc:	65440909 	.word	0x65440909
10015b00:	65636976 	.word	0x65636976
10015b04:	6e6f6320 	.word	0x6e6f6320
10015b08:	7463656e 	.word	0x7463656e
10015b0c:	2e2e6465 	.word	0x2e2e6465
10015b10:	6964202e 	.word	0x6964202e
10015b14:	6e6f6373 	.word	0x6e6f6373
10015b18:	7463656e 	.word	0x7463656e
10015b1c:	00676e69 	.word	0x00676e69
10015b20:	736d735b 	.word	0x736d735b
10015b24:	656c625f 	.word	0x656c625f
10015b28:	7664615f 	.word	0x7664615f
10015b2c:	7065725f 	.word	0x7065725f
10015b30:	5f74726f 	.word	0x5f74726f
10015b34:	095d6e66 	.word	0x095d6e66
10015b38:	65766441 	.word	0x65766441
10015b3c:	73697472 	.word	0x73697472
10015b40:	6e656d65 	.word	0x6e656d65
10015b44:	69742074 	.word	0x69742074
10015b48:	756f656d 	.word	0x756f656d
10015b4c:	2e2e2e74 	.word	0x2e2e2e74
10015b50:	00000000 	.word	0x00000000
10015b54:	736d735b 	.word	0x736d735b
10015b58:	656c625f 	.word	0x656c625f
10015b5c:	6e6f635f 	.word	0x6e6f635f
10015b60:	7463656e 	.word	0x7463656e
10015b64:	665f6465 	.word	0x665f6465
10015b68:	09095d6e 	.word	0x09095d6e
10015b6c:	69766544 	.word	0x69766544
10015b70:	20736563 	.word	0x20736563
10015b74:	6e6e6f63 	.word	0x6e6e6f63
10015b78:	65746365 	.word	0x65746365
10015b7c:	2e2e2e64 	.word	0x2e2e2e64
10015b80:	00000000 	.word	0x00000000
10015b84:	3a4f2f54 	.word	0x3a4f2f54
10015b88:	30303520 	.word	0x30303520
10015b8c:	736d2030 	.word	0x736d2030
10015b90:	00000000 	.word	0x00000000
10015b94:	736d735b 	.word	0x736d735b
10015b98:	656c625f 	.word	0x656c625f
10015b9c:	6961705f 	.word	0x6961705f
10015ba0:	5f646572 	.word	0x5f646572
10015ba4:	005d6e66 	.word	0x005d6e66
10015ba8:	736d735b 	.word	0x736d735b
10015bac:	656c625f 	.word	0x656c625f
10015bb0:	7664615f 	.word	0x7664615f
10015bb4:	69747265 	.word	0x69747265
10015bb8:	095d6573 	.word	0x095d6573
10015bbc:	65766441 	.word	0x65766441
10015bc0:	73697472 	.word	0x73697472
10015bc4:	6e656d65 	.word	0x6e656d65
10015bc8:	61642074 	.word	0x61642074
10015bcc:	73206174 	.word	0x73206174
10015bd0:	66207465 	.word	0x66207465
10015bd4:	656c6961 	.word	0x656c6961
10015bd8:	00002164 	.word	0x00002164
10015bdc:	736d735b 	.word	0x736d735b
10015be0:	656c625f 	.word	0x656c625f
10015be4:	7664615f 	.word	0x7664615f
10015be8:	69747265 	.word	0x69747265
10015bec:	095d6573 	.word	0x095d6573
10015bf0:	454c4209 	.word	0x454c4209
10015bf4:	61745320 	.word	0x61745320
10015bf8:	64657472 	.word	0x64657472
10015bfc:	76644120 	.word	0x76644120
10015c00:	69747265 	.word	0x69747265
10015c04:	656d6573 	.word	0x656d6573
10015c08:	0000746e 	.word	0x0000746e
10015c0c:	736d735b 	.word	0x736d735b
10015c10:	7265735f 	.word	0x7265735f
10015c14:	65636976 	.word	0x65636976
10015c18:	7664615f 	.word	0x7664615f
10015c1c:	69747265 	.word	0x69747265
10015c20:	095d6573 	.word	0x095d6573
10015c24:	20454c42 	.word	0x20454c42
10015c28:	65766441 	.word	0x65766441
10015c2c:	73697472 	.word	0x73697472
10015c30:	6e656d65 	.word	0x6e656d65
10015c34:	74732074 	.word	0x74732074
10015c38:	20747261 	.word	0x20747261
10015c3c:	6c696166 	.word	0x6c696166
10015c40:	203a6465 	.word	0x203a6465
10015c44:	73616572 	.word	0x73616572
10015c48:	30206e6f 	.word	0x30206e6f
10015c4c:	00782578 	.word	0x00782578
10015c50:	736d735b 	.word	0x736d735b
10015c54:	656c625f 	.word	0x656c625f
10015c58:	7369645f 	.word	0x7369645f
10015c5c:	6e6e6f63 	.word	0x6e6e6f63
10015c60:	65746365 	.word	0x65746365
10015c64:	6e665f64 	.word	0x6e665f64
10015c68:	6550095d 	.word	0x6550095d
10015c6c:	64207265 	.word	0x64207265
10015c70:	6f637369 	.word	0x6f637369
10015c74:	63656e6e 	.word	0x63656e6e
10015c78:	2e646574 	.word	0x2e646574
10015c7c:	42202e2e 	.word	0x42202e2e
10015c80:	2077656e 	.word	0x2077656e
10015c84:	202c6425 	.word	0x202c6425
10015c88:	20454c42 	.word	0x20454c42
10015c8c:	30257830 	.word	0x30257830
10015c90:	202c7832 	.word	0x202c7832
10015c94:	25203154 	.word	0x25203154
10015c98:	54202c64 	.word	0x54202c64
10015c9c:	64252032 	.word	0x64252032
10015ca0:	00000000 	.word	0x00000000
10015ca4:	54455320 	.word	0x54455320
10015ca8:	00002021 	.word	0x00002021
10015cac:	20642520 	.word	0x20642520
10015cb0:	454e4f47 	.word	0x454e4f47
10015cb4:	0000203f 	.word	0x0000203f
10015cb8:	3a4f2f54 	.word	0x3a4f2f54
10015cbc:	6d303220 	.word	0x6d303220
10015cc0:	00000073 	.word	0x00000073
10015cc4:	49544f4e 	.word	0x49544f4e
10015cc8:	41434946 	.word	0x41434946
10015ccc:	4e4f4954 	.word	0x4e4f4954
10015cd0:	52524520 	.word	0x52524520
10015cd4:	2121524f 	.word	0x2121524f
10015cd8:	00000000 	.word	0x00000000
10015cdc:	544f4e20 	.word	0x544f4e20
10015ce0:	74657320 	.word	0x74657320
10015ce4:	0000203f 	.word	0x0000203f

10015ce8 <sms_ble_gap_cb>:
	...
10015cf4:	10008655 00000000 10008689 100087dd     U...............
	...
10015d0c:	100086ed 1000843d 00000000 00000000     ....=...........
	...

10015d34 <sms_ble_gatt_server_cb>:
10015d34:	10008489 100084fd 00000000 00000000     ................
	...
10015d5c:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015d6c:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10015d7c:	656c6968 74657320 676e6974 20707520     hile setting up 
10015d8c:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10015d9c:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10015dac:	6c626f72 77206d65 656c6968 74657320     roblem while set
10015dbc:	676e6974 20707520 74747562 00316e6f     ting up button1.
10015dcc:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10015ddc:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10015dec:	656c6968 74657320 676e6974 20707520     hile setting up 
10015dfc:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10015e0c:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10015e1c:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
10015e2c:	74747542 73206e6f 65746174 6425203a     Button state: %d
10015e3c:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
10015e4c:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10015e5c:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10015e6c:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10015e7c:	73752074 73206465 65746174 2e2e2e73     t used states...
10015e8c:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10015e9c:	095d6e66 6c697453 6e69206c 61636964     fn].Still indica
10015eac:	676e6974 002e2e2e 736d735b 7475625f     ting....[sms_but
10015ebc:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10015ecc:	5d736563 72655309 65636976 65642073     ces].Services de
10015edc:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10015eec:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
10015efc:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10015f0c:	69767265 5d736563 72655309 65636976     ervices].Service
10015f1c:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
10015f2c:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
10015f3c:	00000000 626f7250 206d656c 6c696877     ....Problem whil
10015f4c:	65732065 6e697474 70672067 70206f69     e setting gpio p
10015f5c:	00006e69 2e2e7325 4209092e 6572702d     in..%s.....B-pre
10015f6c:	64252076 2d42202c 20727563 202c6425     v %d, B-cur %d, 
10015f7c:	20454c42 30257830 202c7832 25203154     BLE 0x%02x, T1 %
10015f8c:	54202c64 64252032 4d53202c 64252053     d, T2 %d, SMS %d
10015f9c:	00000000 20633269 74697277 20676e69     ....i2c writing 
10015fac:	30206f74 32302578 74612078 25783020     to 0x%02x at 0x%
10015fbc:	2e783230 64202e2e 3a617461 00000020     02x... data: ...
10015fcc:	30257830 00207832 736d735b 756d695f     0x%02x .[sms_imu
10015fdc:	6e6f635f 75676966 675f6572 5d6f6970     _configure_gpio]
10015fec:	6f725009 6d656c62 69687720 7320656c     .Problem while s
10015ffc:	69747465 7520676e 4d492070 52442055     etting up IMU DR
1001600c:	70205944 00006e69 736d735b 75706d5f     DY pin..[sms_mpu
1001601c:	6665645f 5f656e69 76726573 73656369     _define_services
1001602c:	6553095d 63697672 64207365 6e696665     ].Services defin
1001603c:	20676e69 6c696166 202c6465 73616572     ing failed, reas
1001604c:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
1001605c:	6665645f 5f656e69 76726573 73656369     _define_services
1001606c:	6553095d 63697672 64207365 6e696665     ].Services defin
1001607c:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
1001608c:	203a656c 00006425 65736552 2e2e2e74     le: %d..Reset...
1001609c:	00000000 20746547 656d6974 756f7320     ....Get time sou
100160ac:	2e656372 00002e2e 666e6f43 72756769     rce.....Configur
100160bc:	65642065 65636976 002e2e2e 666e6f43     e device....Conf
100160cc:	72756769 79672065 26206f72 63636120     igure gyro & acc
100160dc:	2e2e6c65 0000002e 666e6f43 72756769     el......Configur
100160ec:	49462065 2e2e4f46 0000002e 6e727554     e FIFO......Turn
100160fc:	66666f2d 46494620 2026204f 64616572     -off FIFO & read
1001610c:	6d617320 73656c70 002e2e2e 736d735b      samples....[sms
1001611c:	75706d5f 6d6f635f 68635f70 5d6b6365     _mpu_comp_check]
1001612c:	4b410909 33363938 20736920 696c6e6f     ..AK8963 is onli
1001613c:	2e2e656e 0000002e 736d735b 75706d5f     ne......[sms_mpu
1001614c:	6568635f 095d6b63 55504d09 3532392d     _check]..MPU-925
1001615c:	73692030 6c6e6f20 2e656e69 00002e2e     0 is online.....
1001616c:	736d735b 75706d5f 6568635f 095d6b63     [sms_mpu_check].
1001617c:	55504d09 3532392d 65732030 742d666c     .MPU-9250 self-t
1001618c:	20747365 73736170 00006465 736d735b     est passed..[sms
1001619c:	64656c5f 6970675f 6e695f6f 095d7469     _led_gpio_init].
100161ac:	626f7270 206d656c 6c696877 65732065     problem while se
100161bc:	6e697474 70752067 64656c20 00000030     tting up led0...
100161cc:	736d735b 6572705f 72757373 6f635f65     [sms_pressure_co
100161dc:	6769666e 5f657275 6f697067 7270095d     nfigure_gpio].pr
100161ec:	656c626f 6877206d 20656c69 74746573     oblem while sett
100161fc:	20676e69 56207075 70206363 00006e69     ing up Vcc pin..
1001620c:	736d735b 6572705f 72757373 74735f65     [sms_pressure_st
1001621c:	75747261 09095d70 72617453 676e6974     artup]..Starting
1001622c:	65727020 72757373 65732065 726f736e      pressure sensor
1001623c:	00000000 736d735b 6572705f 72757373     ....[sms_pressur
1001624c:	74735f65 75747261 09095d70 69614609     e_startup]...Fai
1001625c:	2064656c 69206f74 6974696e 7a696c61     led to initializ
1001626c:	72702065 75737365 64206572 63697665     e pressure devic
1001627c:	00000065 736d735b 6572705f 72757373     e...[sms_pressur
1001628c:	736d5f65 635f3835 75636c61 6574616c     e_ms58_calculate
1001629c:	6574205d 7265706d 72757461 203d2065     ] temperature = 
100162ac:	20646c25 65727020 72757373 203d2065     %ld  pressure = 
100162bc:	00646c25 736d735b 6572705f 72757373     %ld.[sms_pressur
100162cc:	736d5f65 705f3835 5f6c6c6f 61746164     e_ms58_poll_data
100162dc:	7270205d 656c626f 6572206d 6e696461     ] problem readin
100162ec:	736d2067 64203835 00617461 736d735b     g ms58 data.[sms
100162fc:	6572705f 72757373 65645f65 656e6966     _pressure_define
1001630c:	7265735f 65636976 53095d73 69767265     _services].Servi
1001631c:	20736563 69666564 676e696e 69616620     ces defining fai
1001632c:	2c64656c 61657220 206e6f73 78257830     led, reason 0x%x
1001633c:	00000000 736d735b 6572705f 72757373     ....[sms_pressur
1001634c:	65645f65 656e6966 7265735f 65636976     e_define_service
1001635c:	53095d73 69767265 20736563 69666564     s].Services defi
1001636c:	2c64656e 534d5320 65727020 72757373     ned, SMS pressur
1001637c:	61682065 656c646e 6425203a 00000000     e handle: %d....
1001638c:	1000aa30 1000aa3e 1000aa4c 1000aa5a     0...>...L...Z...
1001639c:	1000aa68 1000aa76 1000aa84 1000aa94     h...v...........
100163ac:	1000aaa4 1000aab4 1000aac4 1000aad4     ................
100163bc:	1000aae4 1000aaf4 1000ab04 1000ab14     ................
100163cc:	1000ab24 1000ab34 1000ab44 1000ab54     $...4...D...T...
100163dc:	1000ab64 1000ab74 1000ab84 1000ab94     d...t...........
100163ec:	1000aba4 1000abb4 1000abc4 1000abd4     ................
100163fc:	1000abe2 1000abf0 1000abfe 1000ac0c     ................
1001640c:	1000ac1a 1000ac28 1000ac36 1000ac44     ....(...6...D...
1001641c:	1000ac54 1000ac64 1000ac74 1000ac84     T...d...t.......
1001642c:	1000ac94 1000aca4 1000acb4 1000acc4     ................
1001643c:	1000acd4 1000ace4 1000acf4 1000ad04     ................
1001644c:	1000ad14 1000ad24 1000ad34 1000ad44     ....$...4...D...
1001645c:	1000ad52 1000ad60 1000ad8c 1000ad9a     R...`...........
1001646c:	1000ada8 1000adb6 1000adc4 1000add2     ................
1001647c:	1000ade0 1000adee 1000adfc 1000ae0a     ................
1001648c:	1000ae18 1000ae26 1000ae34 1000ae42     ....&...4...B...
1001649c:	1000ae50 1000ae5e 1000ae6c 1000ae7a     P...^...l...z...
100164ac:	1000ae88 1000ae96 1000aea4 1000aeb2     ................
100164bc:	1000aec0 1000aece 1000aedc 1000aeea     ................
100164cc:	1000aef8 1000af06 1000af14 1000af22     ............"...
100164dc:	1000af30 1000af3e 1000af4c 1000af5a     0...>...L...Z...
100164ec:	1000af68 1000af76 1000af84 1000af92     h...v...........
100164fc:	1000afa0 1000afae 1000afbc 1000afca     ................
1001650c:	1000afd8 1000afe6 1000aff4 1000b002     ................
1001651c:	1000b010 1000b01e 1000b02c 1000b03a     ........,...:...
1001652c:	1000b048 1000b056 1000b064 1000b072     H...V...d...r...
1001653c:	1000b10c 1000b134 1000b15c 1000b184     ....4...\.......
1001654c:	1000b3c4 1000b1b4 1000b1cc 1000b244     ............D...
1001655c:	1000b25c 1000b1e4 1000b1fc 1000b214     \...............
1001656c:	1000b22c 1000b274 1000b538 1000b538     ,...t...8...8...
1001657c:	1000b538 1000b538 1000b538 1000b538     8...8...8...8...
1001658c:	1000b538 1000b538 1000b31c 1000b334     8...8.......4...
1001659c:	1000b34c 1000b3da 1000b2a4 1000b538     L...........8...
100165ac:	1000b538 1000b538 1000b538 1000b538     8...8...8...8...
100165bc:	1000b538 1000b364 1000b37c 1000b394     8...d...|.......
100165cc:	1000b3ac 1000b538 1000b4f0 1000b508     ....8...........
100165dc:	1000b538 1000b538 1000b406 1000b41c     8...8...........
100165ec:	1000b432 1000b448 1000b538 1000b538     2...H...8...8...
100165fc:	1000b538 1000b538 1000b538 1000b538     8...8...8...8...
1001660c:	1000b538 1000b538 1000b0f8 1000b120     8...8....... ...
1001661c:	1000b148 1000b170 1000b19c 1000b28c     H...p...........
1001662c:	1000b2bc 1000b2d4 1000b2ec 1000b304     ................
1001663c:	1000b3f0 1000b45e 1000b4d8 1000b520     ....^....... ...
1001664c:	1000bc1a 1000bc2c 1000bc02 1000bc02     ....,...........
1001665c:	1000bc02 1000bc1a 1000bc02 1000bc02     ................
1001666c:	1000c61e 1000c692 1000c606 1000c698     ................
1001667c:	1000c60c 1000c612 1000c618 34333231     ............1234
1001668c:	00003635 efcdab00 00efcdab              56..........

10016698 <ble_mgr_gatt_server_handle>:
	...
100166b0:	1000bb15 1000bb3d 1000bb85 00000000     ....=...........
100166c0:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100166d0:	65636552 64657669 00000000 6e616353     Received....Scan
100166e0:	676e696e 61662020 64656c69 00000000     ning  failed....
100166f0:	65766441 73697472 20676e69 6c696166     Advertising fail
10016700:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10016710:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10016720:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10016730:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10016740:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10016750:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10016760:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10016770:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10016780:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10016790:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100167a0:	00000064 72616843 69725720 43206574     d...Char Write C
100167b0:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100167c0:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100167d0:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
100167e0:	72616843 69725720 43206574 4620646d     Char Write Cmd F
100167f0:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10016800:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10016810:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10016820:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10016830:	00000000 69766544 64206563 6f637369     ....Device disco
10016840:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10016850:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10016860:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10016870:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10016880:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10016890:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100168a0:	6c706d6f 64657465 63757320 73736563     ompleted success
100168b0:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100168c0:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100168d0:	74707972 206e6f69 6f666e69 00000000     ryption info....
100168e0:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
100168f0:	64612064 73657264 255b2073 20205d64     d address [%d]  
10016900:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10016910:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10016920:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10016930:	206e6163 69766564 72206563 68636165     can device reach
10016940:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10016950:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10016960:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10016970:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10016980:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10016990:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100169a0:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100169b0:	52207463 65757165 46207473 656c6961     ct Request Faile
100169c0:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100169d0:	72756465 6f632065 656c706d 20646574     edure completed 
100169e0:	63637573 66737365 796c6c75 00000000     successfully....
100169f0:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10016a00:	646e756f 206f7420 726f7473 68742065     ound to store th
10016a10:	61702065 6e697269 6e692067 00006f66     e pairing info..
10016a20:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10016a30:	4e206e6f 7320746f 74726174 00006465     on Not started..
10016a40:	76616c53 65532065 69727563 52207974     Slave Security R
10016a50:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10016a60:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10016a70:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10016a80:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10016a90:	20676e69 70736572 65736e6f 00000000     ing response....
10016aa0:	72696150 71655220 74736575 41202d20     Pair Request - A
10016ab0:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10016ac0:	64656c69 00000000 65746e45 68742072     iled....Enter th
10016ad0:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10016ae0:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10016af0:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10016b00:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10016b10:	61656c50 45206573 7265746e 65687420     Please Enter the
10016b20:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10016b30:	65646f63 206e6f28 6568746f 65442072     code(on other De
10016b40:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10016b50:	70657220 6620796c 656c6961 00000064      reply failed...
10016b60:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10016b70:	70707573 6574726f 00000064 65746e45     supported...Ente
10016b80:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10016b90:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10016ba0:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10016bb0:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10016bc0:	76656420 20656369 76696465 00782520      device ediv %x.
10016bd0:	72656570 76656420 20656369 76696465     peer device ediv
10016be0:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10016bf0:	00782520 20656854 65646e69 73692078      %x.The index is
10016c00:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10016c10:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10016c20:	6f666e69 74616d72 206e6f69 7020666f     information of p
10016c30:	20726565 69766564 69206563 6f6e2073     eer device is no
10016c40:	76612074 616c6961 2e656c62 00000000     t available.....
10016c50:	61656c50 75206573 6961706e 68742072     Please unpair th
10016c60:	65642065 65636976 6f726620 6570206d     e device from pe
10016c70:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10016c80:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10016c90:	20646e61 72617473 61702074 6e697269     and start pairin
10016ca0:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10016cb0:	52206e6f 65757165 52207473 796c7065     on Request Reply
10016cc0:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10016cd0:	52206e6f 65757165 52207473 796c7065     on Request Reply
10016ce0:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10016cf0:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10016d00:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10016d10:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10016d20:	7a696c61 6f697461 6166206e 64656c69     alization failed
10016d30:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10016d40:	61656c50 63206573 6b636568 65687420     Please check the
10016d50:	776f7020 61207265 6320646e 656e6e6f      power and conne
10016d60:	6f697463 202f206e 64726168 65726177     ction / hardware
10016d70:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10016d80:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10016d90:	20656d61 20746573 6c696166 00006465     ame set failed..
10016da0:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10016db0:	5d676966 44420909 64646120 73736572     fig]..BD address
10016dc0:	74656720 69616620 0064656c 656c625b      get failed.[ble
10016dd0:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016de0:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10016df0:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10016e00:	25583230 2c583230 64644120 73736572     02X%02X, Address
10016e10:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10016e20:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10016e30:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10016e40:	666e6f63 72756769 6f697461 6166206e     configuration fa
10016e50:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10016e60:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10016e70:	454c4220 76654420 20656369 72646441      BLE Device Addr
10016e80:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10016e90:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10016ea0:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10016eb0:	69727563 72207974 65757165 73207473     curity request s
10016ec0:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10016ed0:	65732065 69727563 72207974 65757165     e security reque
10016ee0:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10016ef0:	65746365 6f742064 65657020 65642072     ected to peer de
10016f00:	65636976 74697720 64612068 73657264     vice with addres
10016f10:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10016f20:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10016f30:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10016f40:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10016f50:	61522067 6d6f646e 64646120 73736572     g Random address
10016f60:	63757320 73736563 00002a2a 6f736552      success**..Reso
10016f70:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10016f80:	73736572 69616620 2a64656c 0000002a     ress failed**...
10016f90:	2078614d 626d756e 6f207265 6f632066     Max number of co
10016fa0:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10016fb0:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10016fc0:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10016fd0:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10016fe0:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10016ff0:	00000064 23232323 23232323 65442323     d...##########De
10017000:	65636976 756f4620 0000646e 23232323     vice Found..####
10017010:	23232323 65442323 65636976 746f4e20     ######Device Not
10017020:	756f4620 0000646e 69766544 69206563      Found..Device i
10017030:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10017040:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10017050:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10017060:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10017070:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10017080:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10017090:	756e614d 74636166 72657275 65707320     Manufacturer spe
100170a0:	69666963 61642063 65206174 6c62616e     cific data enabl
100170b0:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
100170c0:	65766441 73697472 6e656d65 61642074     Advertisement da
100170d0:	73206174 66207465 656c6961 00000064     ta set failed...

100170e0 <ble_mgr_gap_handle>:
100170e0:	1000baa1 1000bd51 1000bac5 1000baed     ....Q...........
100170f0:	00000000 1000c9cd 1000bbcd 1000bc69     ............i...
10017100:	1000bfad 1000bdfd 1000c1ad 1000bfc5     ................
10017110:	1000c339 1000c47d 1000bc8d 1000cc19     9...}...........
	...
1001712c:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
1001713c:	63656843 6574206b 70207473 65737361     Check test passe
1001714c:	74410064 206c656d 70726f43 1004022e              d.Atmel Corp.

10017159 <CSWTCH.45>:
10017159:	00100402                                         ...

1001715c <CSWTCH.47>:
1001715c:	03010300 03030303 03030303 02020303              ...............

1001716b <client_conf_uuid>:
1001716b:	29042902                                         .)

1001716d <presentation_format_uuid>:
1001716d:	29012904                                         .)

1001716f <user_desc_uuid>:
1001716f:	29032901                                         .)

10017171 <server_conf_uuid>:
10017171:	29002903                                         .)

10017173 <extended_props_uuid>:
10017173:	28022900                                         .)

10017175 <include_uuid>:
10017175:	28032802                                         .(

10017177 <char_uuid>:
10017177:	00002803 776f7000 00000000                       .(...pow.

10017180 <TWO52>:
10017180:	00000000 43300000 00000000 c3300000     ......0C......0.
10017190:	1001254a 1001246e 1001252c 10012504     J%..n$..,%...%..
100171a0:	1001252c 100124f8 1001252c 10012504     ,%...$..,%...%..
100171b0:	1001246e 1001246e 100124f8 10012504     n$..n$...$...%..
100171c0:	100125b0 100125b0 100125b0 10012532     .%...%...%..2%..
100171d0:	1001246e 1001246e 10012518 10012502     n$..n$...%...%..
100171e0:	10012518 100124f8 10012518 10012502     .%...$...%...%..
100171f0:	1001246e 1001246e 100124f8 10012502     n$..n$...$...%..
10017200:	100125b0 100125b0 100125b0 100125bc     .%...%...%...%..
10017210:	10012748 100126a6 100126a6 100126a4     H'...&...&...&..
10017220:	1001273a 1001273a 10012730 100126a4     :'..:'..0'...&..
10017230:	1001273a 10012730 1001273a 100126a4     :'..0'..:'...&..
10017240:	10012740 10012740 10012740 100127ca     @'..@'..@'...'..
10017250:	100131a8 10013076 1001317c 1001306c     .1..v0..|1..l0..
10017260:	1001317c 10013186 1001317c 1001306c     |1...1..|1..l0..
10017270:	10013076 10013076 10013186 1001306c     v0..v0...1..l0..
10017280:	10013062 10013062 10013062 100133d8     b0..b0..b0...3..
10017290:	100139f0 100138b0 100138b0 100138ae     .9...8...8...8..
100172a0:	100139c8 100139c8 100139ba 100138ae     .9...9...9...8..
100172b0:	100139c8 100139ba 100139c8 100138ae     .9...9...9...8..
100172c0:	100139d0 100139d0 100139d0 10013bd0     .9...9...9...;..
100172d0:	00000043                                C...

100172d4 <_global_impure_ptr>:
100172d4:	10017398                                .s..

100172d8 <__sf_fake_stdin>:
	...

100172f8 <__sf_fake_stdout>:
	...

10017318 <__sf_fake_stderr>:
	...
10017338:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10017348:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10017358:	31300046 35343332 39383736 64636261     F.0123456789abcd
10017368:	00006665                                ef..

1001736c <_init>:
1001736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001736e:	46c0      	nop			; (mov r8, r8)
10017370:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017372:	bc08      	pop	{r3}
10017374:	469e      	mov	lr, r3
10017376:	4770      	bx	lr

10017378 <__init_array_start>:
10017378:	100080b1 	.word	0x100080b1

1001737c <_fini>:
1001737c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001737e:	46c0      	nop			; (mov r8, r8)
10017380:	bcf8      	pop	{r3, r4, r5, r6, r7}
10017382:	bc08      	pop	{r3}
10017384:	469e      	mov	lr, r3
10017386:	4770      	bx	lr

10017388 <__fini_array_start>:
10017388:	10008089 	.word	0x10008089
