
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000bdd0  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000074  10013dd0  10013dd0  00013dd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002efc  10013e44  10013e44  00013e44  2**2
                  ALLOC
  3 .stack        00000800  10016d40  10016d40  00013e44  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00013e44  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00013e6c  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004c05b  00000000  00000000  00013f20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005519  00000000  00000000  0005ff7b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a424  00000000  00000000  00065494  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b68  00000000  00000000  0006f8b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b48  00000000  00000000  00070420  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0002721d  00000000  00000000  00070f68  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001719f  00000000  00000000  00098185  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001419f9  00000000  00000000  000af324  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000026e8  00000000  00000000  001f0d20  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10013dd0 	.word	0x10013dd0
10008068:	10013dd0 	.word	0x10013dd0
1000806c:	10013e44 	.word	0x10013e44
10008070:	10016d40 	.word	0x10016d40
10008074:	10013e44 	.word	0x10013e44
10008078:	10013dd4 	.word	0x10013dd4
1000807c:	10013e48 	.word	0x10013e48
10008080:	10011b39 	.word	0x10011b39
10008084:	1000d2f1 	.word	0x1000d2f1

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10013e44 	.word	0x10013e44
100080a8:	00000000 	.word	0x00000000
100080ac:	10013dd0 	.word	0x10013dd0

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10013e48 	.word	0x10013e48
100080dc:	10013dd0 	.word	0x10013dd0
100080e0:	10013dd0 	.word	0x10013dd0
100080e4:	00000000 	.word	0x00000000

100080e8 <delay_init>:
 *
 * This must be called during start up to initialize the delay routine with
 * the current used main clock. It must run any time the main CPU clock is changed.
 */
void delay_init(void)
{
100080e8:	b570      	push	{r4, r5, r6, lr}
	cycles_per_ms = system_clock_get_value();
100080ea:	4b09      	ldr	r3, [pc, #36]	; (10008110 <delay_init+0x28>)
100080ec:	4798      	blx	r3
100080ee:	0005      	movs	r5, r0
	cycles_per_ms /= 1000;
100080f0:	4c08      	ldr	r4, [pc, #32]	; (10008114 <delay_init+0x2c>)
100080f2:	21fa      	movs	r1, #250	; 0xfa
100080f4:	0089      	lsls	r1, r1, #2
100080f6:	47a0      	blx	r4
100080f8:	4b07      	ldr	r3, [pc, #28]	; (10008118 <delay_init+0x30>)
100080fa:	6018      	str	r0, [r3, #0]
	cycles_per_us = cycles_per_ms / 1000;
100080fc:	4907      	ldr	r1, [pc, #28]	; (1000811c <delay_init+0x34>)
100080fe:	0028      	movs	r0, r5
10008100:	47a0      	blx	r4
10008102:	4b07      	ldr	r3, [pc, #28]	; (10008120 <delay_init+0x38>)
10008104:	6018      	str	r0, [r3, #0]

	SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk | SysTick_CTRL_ENABLE_Msk;
10008106:	2205      	movs	r2, #5
10008108:	4b06      	ldr	r3, [pc, #24]	; (10008124 <delay_init+0x3c>)
1000810a:	601a      	str	r2, [r3, #0]
}
1000810c:	bd70      	pop	{r4, r5, r6, pc}
1000810e:	46c0      	nop			; (mov r8, r8)
10008110:	1000a535 	.word	0x1000a535
10008114:	10010a41 	.word	0x10010a41
10008118:	10013dd4 	.word	0x10013dd4
1000811c:	000f4240 	.word	0x000f4240
10008120:	10013dd0 	.word	0x10013dd0
10008124:	e000e010 	.word	0xe000e010

10008128 <delay_cycles_ms>:
 * \brief Delay loop to delay at least n number of milliseconds
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
10008128:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000812a:	0005      	movs	r5, r0
	while (n--) {
		printf(".");
1000812c:	4f0b      	ldr	r7, [pc, #44]	; (1000815c <delay_cycles_ms+0x34>)
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
1000812e:	4e0c      	ldr	r6, [pc, #48]	; (10008160 <delay_cycles_ms+0x38>)
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
        SysTick->LOAD = n;
10008130:	4c0c      	ldr	r4, [pc, #48]	; (10008164 <delay_cycles_ms+0x3c>)
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008132:	e00d      	b.n	10008150 <delay_cycles_ms+0x28>
		printf(".");
10008134:	202e      	movs	r0, #46	; 0x2e
10008136:	47b8      	blx	r7
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
10008138:	6833      	ldr	r3, [r6, #0]
 *
 * \param n Number of cycles
 */
static inline void delay_cycles(const uint32_t n)
{
    if(n > 0) {
1000813a:	2b00      	cmp	r3, #0
1000813c:	d007      	beq.n	1000814e <delay_cycles_ms+0x26>
        SysTick->LOAD = n;
1000813e:	6063      	str	r3, [r4, #4]
        SysTick->VAL = 0;
10008140:	2300      	movs	r3, #0
10008142:	60a3      	str	r3, [r4, #8]
        while(!(SysTick->CTRL & SysTick_CTRL_COUNTFLAG_Msk)) {
10008144:	2280      	movs	r2, #128	; 0x80
10008146:	0252      	lsls	r2, r2, #9
10008148:	6823      	ldr	r3, [r4, #0]
1000814a:	4213      	tst	r3, r2
1000814c:	d0fc      	beq.n	10008148 <delay_cycles_ms+0x20>
1000814e:	3d01      	subs	r5, #1
 *
 * \param n  Number of milliseconds to wait
 */
void delay_cycles_ms(uint32_t n)
{
	while (n--) {
10008150:	2d00      	cmp	r5, #0
10008152:	d1ef      	bne.n	10008134 <delay_cycles_ms+0xc>
		printf(".");
		/* Divide up to blocks of 1ms */
		delay_cycles(cycles_per_ms);
	}
	printf("\n\r");
10008154:	4804      	ldr	r0, [pc, #16]	; (10008168 <delay_cycles_ms+0x40>)
10008156:	4b05      	ldr	r3, [pc, #20]	; (1000816c <delay_cycles_ms+0x44>)
10008158:	4798      	blx	r3
}
1000815a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000815c:	10011d45 	.word	0x10011d45
10008160:	10013dd4 	.word	0x10013dd4
10008164:	e000e010 	.word	0xe000e010
10008168:	10012d70 	.word	0x10012d70
1000816c:	10011d11 	.word	0x10011d11

10008170 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
10008170:	2301      	movs	r3, #1
10008172:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
10008174:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
10008176:	23fa      	movs	r3, #250	; 0xfa
10008178:	01db      	lsls	r3, r3, #7
1000817a:	6043      	str	r3, [r0, #4]
}
1000817c:	4770      	bx	lr
1000817e:	46c0      	nop			; (mov r8, r8)

10008180 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
10008180:	4b06      	ldr	r3, [pc, #24]	; (1000819c <aon_sleep_timer_disable+0x1c>)
10008182:	2200      	movs	r2, #0
10008184:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
10008186:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008188:	2103      	movs	r1, #3
1000818a:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
1000818c:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
1000818e:	0019      	movs	r1, r3
10008190:	2280      	movs	r2, #128	; 0x80
10008192:	01d2      	lsls	r2, r2, #7
10008194:	680b      	ldr	r3, [r1, #0]
10008196:	4213      	tst	r3, r2
10008198:	d1fc      	bne.n	10008194 <aon_sleep_timer_disable+0x14>
	}
}
1000819a:	4770      	bx	lr
1000819c:	4000d000 	.word	0x4000d000

100081a0 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
100081a0:	4a02      	ldr	r2, [pc, #8]	; (100081ac <aon_sleep_timer_clear_interrup+0xc>)
100081a2:	6811      	ldr	r1, [r2, #0]
100081a4:	2310      	movs	r3, #16
100081a6:	430b      	orrs	r3, r1
100081a8:	6013      	str	r3, [r2, #0]
}
100081aa:	4770      	bx	lr
100081ac:	4000d000 	.word	0x4000d000

100081b0 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
100081b0:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
100081b2:	4b04      	ldr	r3, [pc, #16]	; (100081c4 <aon_sleep_timer_isr_handler+0x14>)
100081b4:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
100081b6:	4b04      	ldr	r3, [pc, #16]	; (100081c8 <aon_sleep_timer_isr_handler+0x18>)
100081b8:	681b      	ldr	r3, [r3, #0]
100081ba:	2b00      	cmp	r3, #0
100081bc:	d000      	beq.n	100081c0 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
100081be:	4798      	blx	r3
	}
}
100081c0:	bd10      	pop	{r4, pc}
100081c2:	46c0      	nop			; (mov r8, r8)
100081c4:	100081a1 	.word	0x100081a1
100081c8:	10013e60 	.word	0x10013e60

100081cc <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
100081cc:	4b01      	ldr	r3, [pc, #4]	; (100081d4 <aon_sleep_timer_register_callback+0x8>)
100081ce:	6018      	str	r0, [r3, #0]
}
100081d0:	4770      	bx	lr
100081d2:	46c0      	nop			; (mov r8, r8)
100081d4:	10013e60 	.word	0x10013e60

100081d8 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
100081d8:	2200      	movs	r2, #0
100081da:	4b01      	ldr	r3, [pc, #4]	; (100081e0 <aon_sleep_timer_unregister_callback+0x8>)
100081dc:	601a      	str	r2, [r3, #0]
}
100081de:	4770      	bx	lr
100081e0:	10013e60 	.word	0x10013e60

100081e4 <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
100081e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100081e6:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
100081e8:	2200      	movs	r2, #0
100081ea:	4b29      	ldr	r3, [pc, #164]	; (10008290 <aon_sleep_timer_init+0xac>)
100081ec:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
100081ee:	7803      	ldrb	r3, [r0, #0]
100081f0:	2b02      	cmp	r3, #2
100081f2:	d105      	bne.n	10008200 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
100081f4:	4a26      	ldr	r2, [pc, #152]	; (10008290 <aon_sleep_timer_init+0xac>)
100081f6:	7b11      	ldrb	r1, [r2, #12]
100081f8:	3301      	adds	r3, #1
100081fa:	430b      	orrs	r3, r1
100081fc:	7313      	strb	r3, [r2, #12]
100081fe:	e005      	b.n	1000820c <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008200:	2b01      	cmp	r3, #1
10008202:	d103      	bne.n	1000820c <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
10008204:	4a22      	ldr	r2, [pc, #136]	; (10008290 <aon_sleep_timer_init+0xac>)
10008206:	7b11      	ldrb	r1, [r2, #12]
10008208:	430b      	orrs	r3, r1
1000820a:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000820c:	4b21      	ldr	r3, [pc, #132]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000820e:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008210:	0053      	lsls	r3, r2, #1
10008212:	d01f      	beq.n	10008254 <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008214:	4d1f      	ldr	r5, [pc, #124]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008216:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008218:	262c      	movs	r6, #44	; 0x2c
1000821a:	36ff      	adds	r6, #255	; 0xff
1000821c:	2180      	movs	r1, #128	; 0x80
1000821e:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008220:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
10008222:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
10008224:	9701      	str	r7, [sp, #4]
10008226:	9b01      	ldr	r3, [sp, #4]
10008228:	42b3      	cmp	r3, r6
1000822a:	d806      	bhi.n	1000823a <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
1000822c:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
1000822e:	9b01      	ldr	r3, [sp, #4]
10008230:	3301      	adds	r3, #1
10008232:	9301      	str	r3, [sp, #4]
10008234:	9b01      	ldr	r3, [sp, #4]
10008236:	42b3      	cmp	r3, r6
10008238:	d9f8      	bls.n	1000822c <aon_sleep_timer_init+0x48>
1000823a:	7844      	ldrb	r4, [r0, #1]
1000823c:	000b      	movs	r3, r1
1000823e:	2c00      	cmp	r4, #0
10008240:	d103      	bne.n	1000824a <aon_sleep_timer_init+0x66>
10008242:	2380      	movs	r3, #128	; 0x80
10008244:	009b      	lsls	r3, r3, #2
10008246:	e000      	b.n	1000824a <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008248:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
1000824a:	4213      	tst	r3, r2
1000824c:	d1fc      	bne.n	10008248 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
1000824e:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008250:	0053      	lsls	r3, r2, #1
10008252:	d1e5      	bne.n	10008220 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
10008254:	7843      	ldrb	r3, [r0, #1]
10008256:	2b00      	cmp	r3, #0
10008258:	d105      	bne.n	10008266 <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
1000825a:	4b0e      	ldr	r3, [pc, #56]	; (10008294 <aon_sleep_timer_init+0xb0>)
1000825c:	6842      	ldr	r2, [r0, #4]
1000825e:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
10008260:	2201      	movs	r2, #1
10008262:	601a      	str	r2, [r3, #0]
10008264:	e004      	b.n	10008270 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
10008266:	4b0b      	ldr	r3, [pc, #44]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008268:	6842      	ldr	r2, [r0, #4]
1000826a:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
1000826c:	2202      	movs	r2, #2
1000826e:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
10008270:	7843      	ldrb	r3, [r0, #1]
10008272:	2b01      	cmp	r3, #1
10008274:	d106      	bne.n	10008284 <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
10008276:	4907      	ldr	r1, [pc, #28]	; (10008294 <aon_sleep_timer_init+0xb0>)
10008278:	22e0      	movs	r2, #224	; 0xe0
1000827a:	01d2      	lsls	r2, r2, #7
1000827c:	680b      	ldr	r3, [r1, #0]
1000827e:	4013      	ands	r3, r2
10008280:	4293      	cmp	r3, r2
10008282:	d1fb      	bne.n	1000827c <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008284:	4904      	ldr	r1, [pc, #16]	; (10008298 <aon_sleep_timer_init+0xb4>)
10008286:	202b      	movs	r0, #43	; 0x2b
10008288:	4b04      	ldr	r3, [pc, #16]	; (1000829c <aon_sleep_timer_init+0xb8>)
1000828a:	4798      	blx	r3
}
1000828c:	b003      	add	sp, #12
1000828e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008290:	4000e000 	.word	0x4000e000
10008294:	4000d000 	.word	0x4000d000
10008298:	100081b1 	.word	0x100081b1
1000829c:	1000b071 	.word	0x1000b071

100082a0 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
100082a0:	2303      	movs	r3, #3
100082a2:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
100082a4:	330d      	adds	r3, #13
100082a6:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
100082a8:	3b08      	subs	r3, #8
100082aa:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
100082ac:	3301      	adds	r3, #1
100082ae:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
100082b0:	3b07      	subs	r3, #7
100082b2:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
100082b4:	6103      	str	r3, [r0, #16]
}
100082b6:	4770      	bx	lr

100082b8 <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
100082b8:	b570      	push	{r4, r5, r6, lr}
100082ba:	0004      	movs	r4, r0
100082bc:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
100082be:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
100082c0:	2800      	cmp	r0, #0
100082c2:	d026      	beq.n	10008312 <i2c_master_init+0x5a>
100082c4:	2a00      	cmp	r2, #0
100082c6:	d026      	beq.n	10008316 <i2c_master_init+0x5e>
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
100082c8:	2228      	movs	r2, #40	; 0x28
100082ca:	5c8b      	ldrb	r3, [r1, r2]
100082cc:	07db      	lsls	r3, r3, #31
100082ce:	d4fc      	bmi.n	100082ca <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
100082d0:	2300      	movs	r3, #0
100082d2:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
100082d4:	6823      	ldr	r3, [r4, #0]
100082d6:	4a11      	ldr	r2, [pc, #68]	; (1000831c <i2c_master_init+0x64>)
100082d8:	4293      	cmp	r3, r2
100082da:	d103      	bne.n	100082e4 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
100082dc:	2003      	movs	r0, #3
100082de:	4b10      	ldr	r3, [pc, #64]	; (10008320 <i2c_master_init+0x68>)
100082e0:	4798      	blx	r3
100082e2:	e006      	b.n	100082f2 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
100082e4:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
100082e6:	4a0f      	ldr	r2, [pc, #60]	; (10008324 <i2c_master_init+0x6c>)
100082e8:	4293      	cmp	r3, r2
100082ea:	d115      	bne.n	10008318 <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
100082ec:	3002      	adds	r0, #2
100082ee:	4b0c      	ldr	r3, [pc, #48]	; (10008320 <i2c_master_init+0x68>)
100082f0:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
100082f2:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
100082f4:	8929      	ldrh	r1, [r5, #8]
100082f6:	7928      	ldrb	r0, [r5, #4]
100082f8:	4e0b      	ldr	r6, [pc, #44]	; (10008328 <i2c_master_init+0x70>)
100082fa:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
100082fc:	8a29      	ldrh	r1, [r5, #16]
100082fe:	7b28      	ldrb	r0, [r5, #12]
10008300:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008302:	782b      	ldrb	r3, [r5, #0]
10008304:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
10008306:	886b      	ldrh	r3, [r5, #2]
10008308:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000830a:	2301      	movs	r3, #1
1000830c:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
1000830e:	2000      	movs	r0, #0
10008310:	e002      	b.n	10008318 <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008312:	2017      	movs	r0, #23
10008314:	e000      	b.n	10008318 <i2c_master_init+0x60>
10008316:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
10008318:	bd70      	pop	{r4, r5, r6, pc}
1000831a:	46c0      	nop			; (mov r8, r8)
1000831c:	40003000 	.word	0x40003000
10008320:	1000ac09 	.word	0x1000ac09
10008324:	40003400 	.word	0x40003400
10008328:	1000a191 	.word	0x1000a191

1000832c <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000832c:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000832e:	4a06      	ldr	r2, [pc, #24]	; (10008348 <_sbrk+0x1c>)
10008330:	6812      	ldr	r2, [r2, #0]
10008332:	2a00      	cmp	r2, #0
10008334:	d102      	bne.n	1000833c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008336:	4905      	ldr	r1, [pc, #20]	; (1000834c <_sbrk+0x20>)
10008338:	4a03      	ldr	r2, [pc, #12]	; (10008348 <_sbrk+0x1c>)
1000833a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000833c:	4a02      	ldr	r2, [pc, #8]	; (10008348 <_sbrk+0x1c>)
1000833e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008340:	18c3      	adds	r3, r0, r3
10008342:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008344:	4770      	bx	lr
10008346:	46c0      	nop			; (mov r8, r8)
10008348:	10013e64 	.word	0x10013e64
1000834c:	10017540 	.word	0x10017540

10008350 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008350:	2001      	movs	r0, #1
10008352:	4240      	negs	r0, r0
10008354:	4770      	bx	lr
10008356:	46c0      	nop			; (mov r8, r8)

10008358 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008358:	2380      	movs	r3, #128	; 0x80
1000835a:	019b      	lsls	r3, r3, #6
1000835c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000835e:	2000      	movs	r0, #0
10008360:	4770      	bx	lr
10008362:	46c0      	nop			; (mov r8, r8)

10008364 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008364:	2001      	movs	r0, #1
10008366:	4770      	bx	lr

10008368 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008368:	2000      	movs	r0, #0
1000836a:	4770      	bx	lr

1000836c <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000836c:	4b03      	ldr	r3, [pc, #12]	; (1000837c <sms_ble_pair_request_fn+0x10>)
1000836e:	781b      	ldrb	r3, [r3, #0]
10008370:	4b03      	ldr	r3, [pc, #12]	; (10008380 <sms_ble_pair_request_fn+0x14>)
10008372:	781b      	ldrb	r3, [r3, #0]
10008374:	4b03      	ldr	r3, [pc, #12]	; (10008384 <sms_ble_pair_request_fn+0x18>)
10008376:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008378:	2000      	movs	r0, #0
1000837a:	4770      	bx	lr
1000837c:	100159bc 	.word	0x100159bc
10008380:	10015908 	.word	0x10015908
10008384:	10015afb 	.word	0x10015afb

10008388 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008388:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000838a:	4811      	ldr	r0, [pc, #68]	; (100083d0 <sms_ble_notification_confirmed_fn+0x48>)
1000838c:	4d11      	ldr	r5, [pc, #68]	; (100083d4 <sms_ble_notification_confirmed_fn+0x4c>)
1000838e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008390:	4c11      	ldr	r4, [pc, #68]	; (100083d8 <sms_ble_notification_confirmed_fn+0x50>)
10008392:	7863      	ldrb	r3, [r4, #1]
10008394:	3b01      	subs	r3, #1
10008396:	b2db      	uxtb	r3, r3
10008398:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000839a:	4810      	ldr	r0, [pc, #64]	; (100083dc <sms_ble_notification_confirmed_fn+0x54>)
1000839c:	4b10      	ldr	r3, [pc, #64]	; (100083e0 <sms_ble_notification_confirmed_fn+0x58>)
1000839e:	4798      	blx	r3
100083a0:	4810      	ldr	r0, [pc, #64]	; (100083e4 <sms_ble_notification_confirmed_fn+0x5c>)
100083a2:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
100083a4:	2201      	movs	r2, #1
100083a6:	4252      	negs	r2, r2
100083a8:	4b0f      	ldr	r3, [pc, #60]	; (100083e8 <sms_ble_notification_confirmed_fn+0x60>)
100083aa:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100083ac:	2001      	movs	r0, #1
100083ae:	4b0f      	ldr	r3, [pc, #60]	; (100083ec <sms_ble_notification_confirmed_fn+0x64>)
100083b0:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100083b2:	2200      	movs	r2, #0
100083b4:	4b0e      	ldr	r3, [pc, #56]	; (100083f0 <sms_ble_notification_confirmed_fn+0x68>)
100083b6:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100083b8:	2322      	movs	r3, #34	; 0x22
100083ba:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100083bc:	4b0d      	ldr	r3, [pc, #52]	; (100083f4 <sms_ble_notification_confirmed_fn+0x6c>)
100083be:	781b      	ldrb	r3, [r3, #0]
100083c0:	2b00      	cmp	r3, #0
100083c2:	d102      	bne.n	100083ca <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
100083c4:	3201      	adds	r2, #1
100083c6:	4b0c      	ldr	r3, [pc, #48]	; (100083f8 <sms_ble_notification_confirmed_fn+0x70>)
100083c8:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
100083ca:	2000      	movs	r0, #0
100083cc:	bd70      	pop	{r4, r5, r6, pc}
100083ce:	46c0      	nop			; (mov r8, r8)
100083d0:	10012d74 	.word	0x10012d74
100083d4:	10011d11 	.word	0x10011d11
100083d8:	100159bc 	.word	0x100159bc
100083dc:	10012d7c 	.word	0x10012d7c
100083e0:	10011e31 	.word	0x10011e31
100083e4:	10012d80 	.word	0x10012d80
100083e8:	100159b4 	.word	0x100159b4
100083ec:	100094b9 	.word	0x100094b9
100083f0:	10015afb 	.word	0x10015afb
100083f4:	10015908 	.word	0x10015908
100083f8:	100159b9 	.word	0x100159b9

100083fc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100083fc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100083fe:	2001      	movs	r0, #1
10008400:	4b08      	ldr	r3, [pc, #32]	; (10008424 <sms_ble_indication_confirmed_fn+0x28>)
10008402:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008404:	2200      	movs	r2, #0
10008406:	4b08      	ldr	r3, [pc, #32]	; (10008428 <sms_ble_indication_confirmed_fn+0x2c>)
10008408:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
1000840a:	3222      	adds	r2, #34	; 0x22
1000840c:	4b07      	ldr	r3, [pc, #28]	; (1000842c <sms_ble_indication_confirmed_fn+0x30>)
1000840e:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008410:	4b07      	ldr	r3, [pc, #28]	; (10008430 <sms_ble_indication_confirmed_fn+0x34>)
10008412:	781b      	ldrb	r3, [r3, #0]
10008414:	2b00      	cmp	r3, #0
10008416:	d102      	bne.n	1000841e <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
10008418:	3a21      	subs	r2, #33	; 0x21
1000841a:	4b06      	ldr	r3, [pc, #24]	; (10008434 <sms_ble_indication_confirmed_fn+0x38>)
1000841c:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
1000841e:	2000      	movs	r0, #0
10008420:	bd10      	pop	{r4, pc}
10008422:	46c0      	nop			; (mov r8, r8)
10008424:	100094b9 	.word	0x100094b9
10008428:	10015afb 	.word	0x10015afb
1000842c:	100159bc 	.word	0x100159bc
10008430:	10015908 	.word	0x10015908
10008434:	100159b9 	.word	0x100159b9

10008438 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008438:	2300      	movs	r3, #0
1000843a:	4a02      	ldr	r2, [pc, #8]	; (10008444 <sms_ble_init_variables+0xc>)
1000843c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000843e:	4a02      	ldr	r2, [pc, #8]	; (10008448 <sms_ble_init_variables+0x10>)
10008440:	8013      	strh	r3, [r2, #0]
}
10008442:	4770      	bx	lr
10008444:	100159bc 	.word	0x100159bc
10008448:	10015b40 	.word	0x10015b40

1000844c <sms_ble_startup>:

void sms_ble_startup(void)
{
1000844c:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000844e:	2202      	movs	r2, #2
10008450:	4b02      	ldr	r3, [pc, #8]	; (1000845c <sms_ble_startup+0x10>)
10008452:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10008454:	2016      	movs	r0, #22
10008456:	4b02      	ldr	r3, [pc, #8]	; (10008460 <sms_ble_startup+0x14>)
10008458:	4798      	blx	r3
}
1000845a:	bd10      	pop	{r4, pc}
1000845c:	10015afb 	.word	0x10015afb
10008460:	10008f75 	.word	0x10008f75

10008464 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008464:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008466:	481b      	ldr	r0, [pc, #108]	; (100084d4 <sms_ble_power_down+0x70>)
10008468:	4b1b      	ldr	r3, [pc, #108]	; (100084d8 <sms_ble_power_down+0x74>)
1000846a:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000846c:	4b1b      	ldr	r3, [pc, #108]	; (100084dc <sms_ble_power_down+0x78>)
1000846e:	781b      	ldrb	r3, [r3, #0]
10008470:	2b00      	cmp	r3, #0
10008472:	d105      	bne.n	10008480 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008474:	2201      	movs	r2, #1
10008476:	4b1a      	ldr	r3, [pc, #104]	; (100084e0 <sms_ble_power_down+0x7c>)
10008478:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
1000847a:	4b1a      	ldr	r3, [pc, #104]	; (100084e4 <sms_ble_power_down+0x80>)
1000847c:	4798      	blx	r3
1000847e:	e028      	b.n	100084d2 <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008480:	4b16      	ldr	r3, [pc, #88]	; (100084dc <sms_ble_power_down+0x78>)
10008482:	781b      	ldrb	r3, [r3, #0]
10008484:	b2db      	uxtb	r3, r3
10008486:	2b21      	cmp	r3, #33	; 0x21
10008488:	d015      	beq.n	100084b6 <sms_ble_power_down+0x52>
1000848a:	d802      	bhi.n	10008492 <sms_ble_power_down+0x2e>
1000848c:	2b20      	cmp	r3, #32
1000848e:	d003      	beq.n	10008498 <sms_ble_power_down+0x34>
10008490:	e016      	b.n	100084c0 <sms_ble_power_down+0x5c>
10008492:	2b23      	cmp	r3, #35	; 0x23
10008494:	d908      	bls.n	100084a8 <sms_ble_power_down+0x44>
10008496:	e013      	b.n	100084c0 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008498:	4b13      	ldr	r3, [pc, #76]	; (100084e8 <sms_ble_power_down+0x84>)
1000849a:	4798      	blx	r3
1000849c:	2800      	cmp	r0, #0
1000849e:	d10f      	bne.n	100084c0 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
100084a0:	2211      	movs	r2, #17
100084a2:	4b0e      	ldr	r3, [pc, #56]	; (100084dc <sms_ble_power_down+0x78>)
100084a4:	701a      	strb	r2, [r3, #0]
100084a6:	e00b      	b.n	100084c0 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
100084a8:	2100      	movs	r1, #0
100084aa:	232b      	movs	r3, #43	; 0x2b
100084ac:	4a0f      	ldr	r2, [pc, #60]	; (100084ec <sms_ble_power_down+0x88>)
100084ae:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
100084b0:	2000      	movs	r0, #0
100084b2:	4b0f      	ldr	r3, [pc, #60]	; (100084f0 <sms_ble_power_down+0x8c>)
100084b4:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
100084b6:	4b0f      	ldr	r3, [pc, #60]	; (100084f4 <sms_ble_power_down+0x90>)
100084b8:	8818      	ldrh	r0, [r3, #0]
100084ba:	2113      	movs	r1, #19
100084bc:	4b0e      	ldr	r3, [pc, #56]	; (100084f8 <sms_ble_power_down+0x94>)
100084be:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
100084c0:	2211      	movs	r2, #17
100084c2:	4b06      	ldr	r3, [pc, #24]	; (100084dc <sms_ble_power_down+0x78>)
100084c4:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100084c6:	3a0e      	subs	r2, #14
100084c8:	4b0c      	ldr	r3, [pc, #48]	; (100084fc <sms_ble_power_down+0x98>)
100084ca:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
100084cc:	2016      	movs	r0, #22
100084ce:	4b0c      	ldr	r3, [pc, #48]	; (10008500 <sms_ble_power_down+0x9c>)
100084d0:	4798      	blx	r3
	}
}
100084d2:	bd10      	pop	{r4, pc}
100084d4:	10012d8c 	.word	0x10012d8c
100084d8:	10008d85 	.word	0x10008d85
100084dc:	100159bc 	.word	0x100159bc
100084e0:	100159b9 	.word	0x100159b9
100084e4:	1000d095 	.word	0x1000d095
100084e8:	1000e349 	.word	0x1000e349
100084ec:	10015a60 	.word	0x10015a60
100084f0:	100091f5 	.word	0x100091f5
100084f4:	100159be 	.word	0x100159be
100084f8:	1000e375 	.word	0x1000e375
100084fc:	10015afb 	.word	0x10015afb
10008500:	10008f75 	.word	0x10008f75

10008504 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008504:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008506:	2211      	movs	r2, #17
10008508:	4b02      	ldr	r3, [pc, #8]	; (10008514 <sms_ble_adv_report_fn+0x10>)
1000850a:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000850c:	4b02      	ldr	r3, [pc, #8]	; (10008518 <sms_ble_adv_report_fn+0x14>)
1000850e:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10008510:	2000      	movs	r0, #0
10008512:	bd10      	pop	{r4, pc}
10008514:	100159bc 	.word	0x100159bc
10008518:	10008465 	.word	0x10008465

1000851c <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000851c:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
1000851e:	4b0c      	ldr	r3, [pc, #48]	; (10008550 <sms_ble_connected_fn+0x34>)
10008520:	781b      	ldrb	r3, [r3, #0]
10008522:	2b20      	cmp	r3, #32
10008524:	d110      	bne.n	10008548 <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008526:	8902      	ldrh	r2, [r0, #8]
10008528:	4b0a      	ldr	r3, [pc, #40]	; (10008554 <sms_ble_connected_fn+0x38>)
1000852a:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
1000852c:	2221      	movs	r2, #33	; 0x21
1000852e:	4b08      	ldr	r3, [pc, #32]	; (10008550 <sms_ble_connected_fn+0x34>)
10008530:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
10008532:	4809      	ldr	r0, [pc, #36]	; (10008558 <sms_ble_connected_fn+0x3c>)
10008534:	4b09      	ldr	r3, [pc, #36]	; (1000855c <sms_ble_connected_fn+0x40>)
10008536:	4798      	blx	r3
10008538:	4809      	ldr	r0, [pc, #36]	; (10008560 <sms_ble_connected_fn+0x44>)
1000853a:	4b0a      	ldr	r3, [pc, #40]	; (10008564 <sms_ble_connected_fn+0x48>)
1000853c:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
1000853e:	22fa      	movs	r2, #250	; 0xfa
10008540:	0052      	lsls	r2, r2, #1
10008542:	4b09      	ldr	r3, [pc, #36]	; (10008568 <sms_ble_connected_fn+0x4c>)
10008544:	601a      	str	r2, [r3, #0]
10008546:	e001      	b.n	1000854c <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10008548:	4b08      	ldr	r3, [pc, #32]	; (1000856c <sms_ble_connected_fn+0x50>)
1000854a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000854c:	2000      	movs	r0, #0
1000854e:	bd10      	pop	{r4, pc}
10008550:	100159bc 	.word	0x100159bc
10008554:	10015aee 	.word	0x10015aee
10008558:	10012d7c 	.word	0x10012d7c
1000855c:	10011e31 	.word	0x10011e31
10008560:	10012da4 	.word	0x10012da4
10008564:	10011d11 	.word	0x10011d11
10008568:	100159b4 	.word	0x100159b4
1000856c:	10008465 	.word	0x10008465

10008570 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008570:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008572:	4b0e      	ldr	r3, [pc, #56]	; (100085ac <sms_ble_paired_fn+0x3c>)
10008574:	781b      	ldrb	r3, [r3, #0]
10008576:	2b21      	cmp	r3, #33	; 0x21
10008578:	d114      	bne.n	100085a4 <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
1000857a:	2222      	movs	r2, #34	; 0x22
1000857c:	4b0b      	ldr	r3, [pc, #44]	; (100085ac <sms_ble_paired_fn+0x3c>)
1000857e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008580:	480b      	ldr	r0, [pc, #44]	; (100085b0 <sms_ble_paired_fn+0x40>)
10008582:	4b0c      	ldr	r3, [pc, #48]	; (100085b4 <sms_ble_paired_fn+0x44>)
10008584:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008586:	2101      	movs	r1, #1
10008588:	2001      	movs	r0, #1
1000858a:	4b0b      	ldr	r3, [pc, #44]	; (100085b8 <sms_ble_paired_fn+0x48>)
1000858c:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
1000858e:	480b      	ldr	r0, [pc, #44]	; (100085bc <sms_ble_paired_fn+0x4c>)
10008590:	4b0b      	ldr	r3, [pc, #44]	; (100085c0 <sms_ble_paired_fn+0x50>)
10008592:	4798      	blx	r3
10008594:	480b      	ldr	r0, [pc, #44]	; (100085c4 <sms_ble_paired_fn+0x54>)
10008596:	4b0c      	ldr	r3, [pc, #48]	; (100085c8 <sms_ble_paired_fn+0x58>)
10008598:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
1000859a:	2201      	movs	r2, #1
1000859c:	4252      	negs	r2, r2
1000859e:	4b0b      	ldr	r3, [pc, #44]	; (100085cc <sms_ble_paired_fn+0x5c>)
100085a0:	601a      	str	r2, [r3, #0]
100085a2:	e001      	b.n	100085a8 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
100085a4:	4b0a      	ldr	r3, [pc, #40]	; (100085d0 <sms_ble_paired_fn+0x60>)
100085a6:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
100085a8:	2000      	movs	r0, #0
100085aa:	bd10      	pop	{r4, pc}
100085ac:	100159bc 	.word	0x100159bc
100085b0:	10012db4 	.word	0x10012db4
100085b4:	10008d85 	.word	0x10008d85
100085b8:	10009281 	.word	0x10009281
100085bc:	10012d7c 	.word	0x10012d7c
100085c0:	10011e31 	.word	0x10011e31
100085c4:	10012d80 	.word	0x10012d80
100085c8:	10011d11 	.word	0x10011d11
100085cc:	100159b4 	.word	0x100159b4
100085d0:	10008465 	.word	0x10008465

100085d4 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
100085d4:	b510      	push	{r4, lr}
100085d6:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
100085d8:	2220      	movs	r2, #32
100085da:	4b14      	ldr	r3, [pc, #80]	; (1000862c <sms_ble_advertise+0x58>)
100085dc:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
100085de:	4b14      	ldr	r3, [pc, #80]	; (10008630 <sms_ble_advertise+0x5c>)
100085e0:	4798      	blx	r3
100085e2:	1e04      	subs	r4, r0, #0
100085e4:	d007      	beq.n	100085f6 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
100085e6:	4813      	ldr	r0, [pc, #76]	; (10008634 <sms_ble_advertise+0x60>)
100085e8:	4b13      	ldr	r3, [pc, #76]	; (10008638 <sms_ble_advertise+0x64>)
100085ea:	4798      	blx	r3
100085ec:	4813      	ldr	r0, [pc, #76]	; (1000863c <sms_ble_advertise+0x68>)
100085ee:	4b14      	ldr	r3, [pc, #80]	; (10008640 <sms_ble_advertise+0x6c>)
100085f0:	4798      	blx	r3
		return status;
100085f2:	0020      	movs	r0, r4
100085f4:	e018      	b.n	10008628 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100085f6:	2300      	movs	r3, #0
100085f8:	9302      	str	r3, [sp, #8]
100085fa:	4b12      	ldr	r3, [pc, #72]	; (10008644 <sms_ble_advertise+0x70>)
100085fc:	9301      	str	r3, [sp, #4]
100085fe:	23c8      	movs	r3, #200	; 0xc8
10008600:	00db      	lsls	r3, r3, #3
10008602:	9300      	str	r3, [sp, #0]
10008604:	2300      	movs	r3, #0
10008606:	2200      	movs	r2, #0
10008608:	2101      	movs	r1, #1
1000860a:	2000      	movs	r0, #0
1000860c:	4c0e      	ldr	r4, [pc, #56]	; (10008648 <sms_ble_advertise+0x74>)
1000860e:	47a0      	blx	r4
10008610:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
10008612:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008614:	2c00      	cmp	r4, #0
10008616:	d007      	beq.n	10008628 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
10008618:	4806      	ldr	r0, [pc, #24]	; (10008634 <sms_ble_advertise+0x60>)
1000861a:	4b07      	ldr	r3, [pc, #28]	; (10008638 <sms_ble_advertise+0x64>)
1000861c:	4798      	blx	r3
1000861e:	0021      	movs	r1, r4
10008620:	480a      	ldr	r0, [pc, #40]	; (1000864c <sms_ble_advertise+0x78>)
10008622:	4b07      	ldr	r3, [pc, #28]	; (10008640 <sms_ble_advertise+0x6c>)
10008624:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
10008626:	20e2      	movs	r0, #226	; 0xe2
}
10008628:	b004      	add	sp, #16
1000862a:	bd10      	pop	{r4, pc}
1000862c:	100159bc 	.word	0x100159bc
10008630:	1000c6f9 	.word	0x1000c6f9
10008634:	10012d7c 	.word	0x10012d7c
10008638:	10011e31 	.word	0x10011e31
1000863c:	10012dc8 	.word	0x10012dc8
10008640:	10011d11 	.word	0x10011d11
10008644:	0000028f 	.word	0x0000028f
10008648:	1000e20d 	.word	0x1000e20d
1000864c:	10012dfc 	.word	0x10012dfc

10008650 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008650:	b510      	push	{r4, lr}
10008652:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008654:	4b16      	ldr	r3, [pc, #88]	; (100086b0 <sms_ble_disconnected_fn+0x60>)
10008656:	781b      	ldrb	r3, [r3, #0]
10008658:	2b22      	cmp	r3, #34	; 0x22
1000865a:	d10a      	bne.n	10008672 <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
1000865c:	2100      	movs	r1, #0
1000865e:	3309      	adds	r3, #9
10008660:	4a14      	ldr	r2, [pc, #80]	; (100086b4 <sms_ble_disconnected_fn+0x64>)
10008662:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10008664:	2000      	movs	r0, #0
10008666:	4b14      	ldr	r3, [pc, #80]	; (100086b8 <sms_ble_disconnected_fn+0x68>)
10008668:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000866a:	2100      	movs	r1, #0
1000866c:	2000      	movs	r0, #0
1000866e:	4b13      	ldr	r3, [pc, #76]	; (100086bc <sms_ble_disconnected_fn+0x6c>)
10008670:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008672:	4b0f      	ldr	r3, [pc, #60]	; (100086b0 <sms_ble_disconnected_fn+0x60>)
10008674:	2211      	movs	r2, #17
10008676:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008678:	781b      	ldrb	r3, [r3, #0]
1000867a:	4b11      	ldr	r3, [pc, #68]	; (100086c0 <sms_ble_disconnected_fn+0x70>)
1000867c:	781b      	ldrb	r3, [r3, #0]
1000867e:	4b11      	ldr	r3, [pc, #68]	; (100086c4 <sms_ble_disconnected_fn+0x74>)
10008680:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008682:	78a3      	ldrb	r3, [r4, #2]
10008684:	2b1a      	cmp	r3, #26
10008686:	d00b      	beq.n	100086a0 <sms_ble_disconnected_fn+0x50>
10008688:	b2da      	uxtb	r2, r3
1000868a:	2a1a      	cmp	r2, #26
1000868c:	d804      	bhi.n	10008698 <sms_ble_disconnected_fn+0x48>
1000868e:	2b05      	cmp	r3, #5
10008690:	d006      	beq.n	100086a0 <sms_ble_disconnected_fn+0x50>
10008692:	2b08      	cmp	r3, #8
10008694:	d107      	bne.n	100086a6 <sms_ble_disconnected_fn+0x56>
10008696:	e003      	b.n	100086a0 <sms_ble_disconnected_fn+0x50>
10008698:	2b29      	cmp	r3, #41	; 0x29
1000869a:	d001      	beq.n	100086a0 <sms_ble_disconnected_fn+0x50>
1000869c:	2b3b      	cmp	r3, #59	; 0x3b
1000869e:	d102      	bne.n	100086a6 <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
100086a0:	4b09      	ldr	r3, [pc, #36]	; (100086c8 <sms_ble_disconnected_fn+0x78>)
100086a2:	4798      	blx	r3
        break;
100086a4:	e001      	b.n	100086aa <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
100086a6:	4b09      	ldr	r3, [pc, #36]	; (100086cc <sms_ble_disconnected_fn+0x7c>)
100086a8:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
100086aa:	2000      	movs	r0, #0
100086ac:	bd10      	pop	{r4, pc}
100086ae:	46c0      	nop			; (mov r8, r8)
100086b0:	100159bc 	.word	0x100159bc
100086b4:	10015a60 	.word	0x10015a60
100086b8:	100091f5 	.word	0x100091f5
100086bc:	10009281 	.word	0x10009281
100086c0:	10015908 	.word	0x10015908
100086c4:	10015afb 	.word	0x10015afb
100086c8:	100085d5 	.word	0x100085d5
100086cc:	10008465 	.word	0x10008465

100086d0 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
100086d0:	b530      	push	{r4, r5, lr}
100086d2:	b087      	sub	sp, #28
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
100086d4:	2801      	cmp	r0, #1
100086d6:	d02d      	beq.n	10008734 <sms_ble_send_characteristic+0x64>
100086d8:	2800      	cmp	r0, #0
100086da:	d002      	beq.n	100086e2 <sms_ble_send_characteristic+0x12>
100086dc:	2802      	cmp	r0, #2
100086de:	d03f      	beq.n	10008760 <sms_ble_send_characteristic+0x90>
100086e0:	e097      	b.n	10008812 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
100086e2:	2200      	movs	r2, #0
100086e4:	ab01      	add	r3, sp, #4
100086e6:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
100086e8:	4b60      	ldr	r3, [pc, #384]	; (1000886c <sms_ble_send_characteristic+0x19c>)
100086ea:	791b      	ldrb	r3, [r3, #4]
100086ec:	2b00      	cmp	r3, #0
100086ee:	d00a      	beq.n	10008706 <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
100086f0:	4b5e      	ldr	r3, [pc, #376]	; (1000886c <sms_ble_send_characteristic+0x19c>)
100086f2:	795a      	ldrb	r2, [r3, #5]
100086f4:	2300      	movs	r3, #0
100086f6:	2a7e      	cmp	r2, #126	; 0x7e
100086f8:	d801      	bhi.n	100086fe <sms_ble_send_characteristic+0x2e>
100086fa:	3201      	adds	r2, #1
100086fc:	b2d3      	uxtb	r3, r2
100086fe:	4a5b      	ldr	r2, [pc, #364]	; (1000886c <sms_ble_send_characteristic+0x19c>)
10008700:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10008702:	aa01      	add	r2, sp, #4
10008704:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
10008706:	4b59      	ldr	r3, [pc, #356]	; (1000886c <sms_ble_send_characteristic+0x19c>)
10008708:	7a9b      	ldrb	r3, [r3, #10]
1000870a:	2b00      	cmp	r3, #0
1000870c:	d00e      	beq.n	1000872c <sms_ble_send_characteristic+0x5c>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
1000870e:	4b57      	ldr	r3, [pc, #348]	; (1000886c <sms_ble_send_characteristic+0x19c>)
10008710:	7adb      	ldrb	r3, [r3, #11]
10008712:	2bff      	cmp	r3, #255	; 0xff
10008714:	d002      	beq.n	1000871c <sms_ble_send_characteristic+0x4c>
10008716:	3301      	adds	r3, #1
10008718:	b2db      	uxtb	r3, r3
1000871a:	e000      	b.n	1000871e <sms_ble_send_characteristic+0x4e>
1000871c:	2300      	movs	r3, #0
1000871e:	4a53      	ldr	r2, [pc, #332]	; (1000886c <sms_ble_send_characteristic+0x19c>)
10008720:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10008722:	aa01      	add	r2, sp, #4
10008724:	3b80      	subs	r3, #128	; 0x80
10008726:	7811      	ldrb	r1, [r2, #0]
10008728:	430b      	orrs	r3, r1
1000872a:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
1000872c:	4b4f      	ldr	r3, [pc, #316]	; (1000886c <sms_ble_send_characteristic+0x19c>)
1000872e:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
10008730:	2201      	movs	r2, #1
        break;
10008732:	e070      	b.n	10008816 <sms_ble_send_characteristic+0x146>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
10008734:	494e      	ldr	r1, [pc, #312]	; (10008870 <sms_ble_send_characteristic+0x1a0>)
10008736:	6a0a      	ldr	r2, [r1, #32]
10008738:	ab01      	add	r3, sp, #4
1000873a:	1610      	asrs	r0, r2, #24
1000873c:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000873e:	1410      	asrs	r0, r2, #16
10008740:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10008742:	1210      	asrs	r0, r2, #8
10008744:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10008746:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10008748:	69ca      	ldr	r2, [r1, #28]
1000874a:	1610      	asrs	r0, r2, #24
1000874c:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000874e:	1410      	asrs	r0, r2, #16
10008750:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10008752:	1210      	asrs	r0, r2, #8
10008754:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10008756:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10008758:	2340      	movs	r3, #64	; 0x40
1000875a:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000875c:	2208      	movs	r2, #8
        break;
1000875e:	e05a      	b.n	10008816 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.hal.accel[0] & 0xff);
10008760:	4a44      	ldr	r2, [pc, #272]	; (10008874 <sms_ble_send_characteristic+0x1a4>)
10008762:	232a      	movs	r3, #42	; 0x2a
10008764:	5ed1      	ldrsh	r1, [r2, r3]
10008766:	ab01      	add	r3, sp, #4
10008768:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.hal.accel[0] >> 8) & 0xff);
1000876a:	1209      	asrs	r1, r1, #8
1000876c:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.hal.accel[1] & 0xff);
1000876e:	202c      	movs	r0, #44	; 0x2c
10008770:	5e11      	ldrsh	r1, [r2, r0]
10008772:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.hal.accel[1] >> 8) & 0xff);
10008774:	1209      	asrs	r1, r1, #8
10008776:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.hal.accel[2] & 0xff);
10008778:	202e      	movs	r0, #46	; 0x2e
1000877a:	5e11      	ldrsh	r1, [r2, r0]
1000877c:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.hal.accel[2] >> 8) & 0xff);
1000877e:	1209      	asrs	r1, r1, #8
10008780:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.hal.gyro[0] & 0xff);
10008782:	2024      	movs	r0, #36	; 0x24
10008784:	5e11      	ldrsh	r1, [r2, r0]
10008786:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.hal.gyro[0] >> 8) & 0xff);
10008788:	1209      	asrs	r1, r1, #8
1000878a:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
1000878c:	2026      	movs	r0, #38	; 0x26
1000878e:	5e11      	ldrsh	r1, [r2, r0]
10008790:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
10008792:	1209      	asrs	r1, r1, #8
10008794:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
10008796:	2028      	movs	r0, #40	; 0x28
10008798:	5e11      	ldrsh	r1, [r2, r0]
1000879a:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
1000879c:	1209      	asrs	r1, r1, #8
1000879e:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
100087a0:	2360      	movs	r3, #96	; 0x60
100087a2:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.new_compass) {
100087a4:	3b18      	subs	r3, #24
100087a6:	5cd3      	ldrb	r3, [r2, r3]
100087a8:	2b00      	cmp	r3, #0
100087aa:	d014      	beq.n	100087d6 <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.hal.compass[0] & 0xff);
100087ac:	2330      	movs	r3, #48	; 0x30
100087ae:	5ed1      	ldrsh	r1, [r2, r3]
100087b0:	ab01      	add	r3, sp, #4
100087b2:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
100087b4:	1209      	asrs	r1, r1, #8
100087b6:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
100087b8:	2032      	movs	r0, #50	; 0x32
100087ba:	5e11      	ldrsh	r1, [r2, r0]
100087bc:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
100087be:	1209      	asrs	r1, r1, #8
100087c0:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
100087c2:	2034      	movs	r0, #52	; 0x34
100087c4:	5e11      	ldrsh	r1, [r2, r0]
100087c6:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
100087c8:	1209      	asrs	r1, r1, #8
100087ca:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.new_compass = false;
100087cc:	2100      	movs	r1, #0
100087ce:	2348      	movs	r3, #72	; 0x48
100087d0:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.hal.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.hal.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.hal.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.hal.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.hal.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
100087d2:	2212      	movs	r2, #18
100087d4:	e008      	b.n	100087e8 <sms_ble_send_characteristic+0x118>
            mpu_device.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
100087d6:	ab01      	add	r3, sp, #4
100087d8:	2200      	movs	r2, #0
100087da:	731a      	strb	r2, [r3, #12]
100087dc:	735a      	strb	r2, [r3, #13]
100087de:	739a      	strb	r2, [r3, #14]
100087e0:	73da      	strb	r2, [r3, #15]
100087e2:	741a      	strb	r2, [r3, #16]
100087e4:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.hal.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.hal.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.hal.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.hal.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
100087e6:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.new_temp) {
100087e8:	2349      	movs	r3, #73	; 0x49
100087ea:	4922      	ldr	r1, [pc, #136]	; (10008874 <sms_ble_send_characteristic+0x1a4>)
100087ec:	5ccb      	ldrb	r3, [r1, r3]
100087ee:	2b00      	cmp	r3, #0
100087f0:	d00a      	beq.n	10008808 <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
100087f2:	000a      	movs	r2, r1
100087f4:	6b8b      	ldr	r3, [r1, #56]	; 0x38
100087f6:	a901      	add	r1, sp, #4
100087f8:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
100087fa:	121b      	asrs	r3, r3, #8
100087fc:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.new_temp = false;
100087fe:	2100      	movs	r1, #0
10008800:	2349      	movs	r3, #73	; 0x49
10008802:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.hal.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.hal.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
10008804:	2214      	movs	r2, #20
10008806:	e006      	b.n	10008816 <sms_ble_send_characteristic+0x146>
            mpu_device.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
10008808:	ab01      	add	r3, sp, #4
1000880a:	2100      	movs	r1, #0
1000880c:	7499      	strb	r1, [r3, #18]
1000880e:	74d9      	strb	r1, [r3, #19]
10008810:	e001      	b.n	10008816 <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
10008812:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
10008814:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008816:	b292      	uxth	r2, r2
10008818:	a901      	add	r1, sp, #4
1000881a:	0028      	movs	r0, r5
1000881c:	4b16      	ldr	r3, [pc, #88]	; (10008878 <sms_ble_send_characteristic+0x1a8>)
1000881e:	4798      	blx	r3
10008820:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
10008822:	d11f      	bne.n	10008864 <sms_ble_send_characteristic+0x194>
		DBG_LOG_CONT_DEV(" SET! ");
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
10008824:	4b15      	ldr	r3, [pc, #84]	; (1000887c <sms_ble_send_characteristic+0x1ac>)
10008826:	8818      	ldrh	r0, [r3, #0]
10008828:	0029      	movs	r1, r5
1000882a:	4b15      	ldr	r3, [pc, #84]	; (10008880 <sms_ble_send_characteristic+0x1b0>)
1000882c:	4798      	blx	r3
1000882e:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
10008830:	d115      	bne.n	1000885e <sms_ble_send_characteristic+0x18e>
			ble_instance.sending_queue++;
10008832:	4a14      	ldr	r2, [pc, #80]	; (10008884 <sms_ble_send_characteristic+0x1b4>)
10008834:	7853      	ldrb	r3, [r2, #1]
10008836:	3301      	adds	r3, #1
10008838:	b2db      	uxtb	r3, r3
1000883a:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000883c:	4b12      	ldr	r3, [pc, #72]	; (10008888 <sms_ble_send_characteristic+0x1b8>)
1000883e:	8819      	ldrh	r1, [r3, #0]
10008840:	3101      	adds	r1, #1
10008842:	b289      	uxth	r1, r1
10008844:	8019      	strh	r1, [r3, #0]
			DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
10008846:	4811      	ldr	r0, [pc, #68]	; (1000888c <sms_ble_send_characteristic+0x1bc>)
10008848:	4d11      	ldr	r5, [pc, #68]	; (10008890 <sms_ble_send_characteristic+0x1c0>)
1000884a:	47a8      	blx	r5
			DBG_LOG("T/O: 20ms");
1000884c:	4811      	ldr	r0, [pc, #68]	; (10008894 <sms_ble_send_characteristic+0x1c4>)
1000884e:	4b12      	ldr	r3, [pc, #72]	; (10008898 <sms_ble_send_characteristic+0x1c8>)
10008850:	4798      	blx	r3
10008852:	4812      	ldr	r0, [pc, #72]	; (1000889c <sms_ble_send_characteristic+0x1cc>)
10008854:	47a8      	blx	r5
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
10008856:	2202      	movs	r2, #2
10008858:	4b11      	ldr	r3, [pc, #68]	; (100088a0 <sms_ble_send_characteristic+0x1d0>)
1000885a:	601a      	str	r2, [r3, #0]
1000885c:	e002      	b.n	10008864 <sms_ble_send_characteristic+0x194>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000885e:	4811      	ldr	r0, [pc, #68]	; (100088a4 <sms_ble_send_characteristic+0x1d4>)
10008860:	4b0b      	ldr	r3, [pc, #44]	; (10008890 <sms_ble_send_characteristic+0x1c0>)
10008862:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
10008864:	0020      	movs	r0, r4
10008866:	b007      	add	sp, #28
10008868:	bd30      	pop	{r4, r5, pc}
1000886a:	46c0      	nop			; (mov r8, r8)
1000886c:	100159d8 	.word	0x100159d8
10008870:	10015a60 	.word	0x10015a60
10008874:	1001590c 	.word	0x1001590c
10008878:	1000eaf1 	.word	0x1000eaf1
1000887c:	100159be 	.word	0x100159be
10008880:	1000ec91 	.word	0x1000ec91
10008884:	100159bc 	.word	0x100159bc
10008888:	10015b40 	.word	0x10015b40
1000888c:	10012e40 	.word	0x10012e40
10008890:	10011d11 	.word	0x10011d11
10008894:	10012d7c 	.word	0x10012d7c
10008898:	10011e31 	.word	0x10011e31
1000889c:	10012e4c 	.word	0x10012e4c
100088a0:	100159b4 	.word	0x100159b4
100088a4:	10012e58 	.word	0x10012e58

100088a8 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
100088a8:	b510      	push	{r4, lr}
100088aa:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
100088ac:	0001      	movs	r1, r0
100088ae:	3112      	adds	r1, #18
100088b0:	2301      	movs	r3, #1
100088b2:	9301      	str	r3, [sp, #4]
100088b4:	0003      	movs	r3, r0
100088b6:	3314      	adds	r3, #20
100088b8:	9300      	str	r3, [sp, #0]
100088ba:	2300      	movs	r3, #0
100088bc:	2200      	movs	r2, #0
100088be:	4c02      	ldr	r4, [pc, #8]	; (100088c8 <sms_ble_primary_service_define+0x20>)
100088c0:	47a0      	blx	r4
}
100088c2:	b002      	add	sp, #8
100088c4:	bd10      	pop	{r4, pc}
100088c6:	46c0      	nop			; (mov r8, r8)
100088c8:	1000ead1 	.word	0x1000ead1

100088cc <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
100088cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100088ce:	464f      	mov	r7, r9
100088d0:	4646      	mov	r6, r8
100088d2:	b4c0      	push	{r6, r7}
100088d4:	b083      	sub	sp, #12
100088d6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100088d8:	2801      	cmp	r0, #1
100088da:	d010      	beq.n	100088fe <sms_ble_service_init+0x32>
100088dc:	2800      	cmp	r0, #0
100088de:	d002      	beq.n	100088e6 <sms_ble_service_init+0x1a>
100088e0:	2802      	cmp	r0, #2
100088e2:	d019      	beq.n	10008918 <sms_ble_service_init+0x4c>
100088e4:	e025      	b.n	10008932 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100088e6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100088e8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100088ea:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100088ec:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100088ee:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100088f0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100088f2:	221c      	movs	r2, #28
100088f4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100088f6:	3a1b      	subs	r2, #27
100088f8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100088fa:	4691      	mov	r9, r2
100088fc:	e023      	b.n	10008946 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100088fe:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008900:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008902:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008904:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008906:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008908:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000890a:	221c      	movs	r2, #28
1000890c:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
1000890e:	3a14      	subs	r2, #20
10008910:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
10008912:	3a06      	subs	r2, #6
10008914:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
10008916:	e016      	b.n	10008946 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10008918:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
1000891a:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
1000891c:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
1000891e:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008920:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008922:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008924:	221c      	movs	r2, #28
10008926:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
10008928:	3a08      	subs	r2, #8
1000892a:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
1000892c:	3a11      	subs	r2, #17
1000892e:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008930:	e009      	b.n	10008946 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008932:	2300      	movs	r3, #0
10008934:	2400      	movs	r4, #0
10008936:	2500      	movs	r5, #0
10008938:	2600      	movs	r6, #0
1000893a:	2700      	movs	r7, #0
1000893c:	2000      	movs	r0, #0
1000893e:	2200      	movs	r2, #0
10008940:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008942:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008944:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008946:	464a      	mov	r2, r9
10008948:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
1000894a:	2202      	movs	r2, #2
1000894c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
1000894e:	4642      	mov	r2, r8
10008950:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008952:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008954:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008956:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008958:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
1000895a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
1000895c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
1000895e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008960:	2300      	movs	r3, #0
10008962:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008964:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008966:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008968:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
1000896a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
1000896c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
1000896e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008970:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008972:	2412      	movs	r4, #18
10008974:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008976:	4662      	mov	r2, ip
10008978:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
1000897a:	466a      	mov	r2, sp
1000897c:	8892      	ldrh	r2, [r2, #4]
1000897e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008980:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008982:	2011      	movs	r0, #17
10008984:	2234      	movs	r2, #52	; 0x34
10008986:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008988:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
1000898a:	2200      	movs	r2, #0
1000898c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
1000898e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008990:	3033      	adds	r0, #51	; 0x33
10008992:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008994:	3001      	adds	r0, #1
10008996:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008998:	3001      	adds	r0, #1
1000899a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
1000899c:	2248      	movs	r2, #72	; 0x48
1000899e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
100089a0:	3202      	adds	r2, #2
100089a2:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
100089a4:	3202      	adds	r2, #2
100089a6:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
100089a8:	640b      	str	r3, [r1, #64]	; 0x40
100089aa:	b003      	add	sp, #12
100089ac:	bc0c      	pop	{r2, r3}
100089ae:	4690      	mov	r8, r2
100089b0:	4699      	mov	r9, r3
100089b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

100089b4 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
100089b4:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
100089b6:	4b05      	ldr	r3, [pc, #20]	; (100089cc <sms_button_bt0_callback+0x18>)
100089b8:	2201      	movs	r2, #1
100089ba:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100089bc:	7858      	ldrb	r0, [r3, #1]
100089be:	2300      	movs	r3, #0
100089c0:	2200      	movs	r2, #0
100089c2:	2102      	movs	r1, #2
100089c4:	4c02      	ldr	r4, [pc, #8]	; (100089d0 <sms_button_bt0_callback+0x1c>)
100089c6:	47a0      	blx	r4
}
100089c8:	bd10      	pop	{r4, pc}
100089ca:	46c0      	nop			; (mov r8, r8)
100089cc:	100159d8 	.word	0x100159d8
100089d0:	1000cdc9 	.word	0x1000cdc9

100089d4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100089d4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
100089d6:	4b05      	ldr	r3, [pc, #20]	; (100089ec <sms_button_bt1_callback+0x18>)
100089d8:	2201      	movs	r2, #1
100089da:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100089dc:	79d8      	ldrb	r0, [r3, #7]
100089de:	2300      	movs	r3, #0
100089e0:	2200      	movs	r2, #0
100089e2:	2102      	movs	r1, #2
100089e4:	4c02      	ldr	r4, [pc, #8]	; (100089f0 <sms_button_bt1_callback+0x1c>)
100089e6:	47a0      	blx	r4
}
100089e8:	bd10      	pop	{r4, pc}
100089ea:	46c0      	nop			; (mov r8, r8)
100089ec:	100159d8 	.word	0x100159d8
100089f0:	1000cdc9 	.word	0x1000cdc9

100089f4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
100089f4:	4b08      	ldr	r3, [pc, #32]	; (10008a18 <sms_button_init_variables+0x24>)
100089f6:	2200      	movs	r2, #0
100089f8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
100089fa:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
100089fc:	211f      	movs	r1, #31
100089fe:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008a00:	391e      	subs	r1, #30
10008a02:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008a04:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008a06:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008a08:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008a0a:	201d      	movs	r0, #29
10008a0c:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008a0e:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008a10:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008a12:	72da      	strb	r2, [r3, #11]
}
10008a14:	4770      	bx	lr
10008a16:	46c0      	nop			; (mov r8, r8)
10008a18:	100159d8 	.word	0x100159d8

10008a1c <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008a1c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a1e:	4657      	mov	r7, sl
10008a20:	464e      	mov	r6, r9
10008a22:	4645      	mov	r5, r8
10008a24:	b4e0      	push	{r5, r6, r7}
10008a26:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a28:	ac01      	add	r4, sp, #4
10008a2a:	0020      	movs	r0, r4
10008a2c:	4b1d      	ldr	r3, [pc, #116]	; (10008aa4 <sms_button_gpio_init+0x88>)
10008a2e:	469a      	mov	sl, r3
10008a30:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a32:	2300      	movs	r3, #0
10008a34:	4699      	mov	r9, r3
10008a36:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a38:	2302      	movs	r3, #2
10008a3a:	4698      	mov	r8, r3
10008a3c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a3e:	2701      	movs	r7, #1
10008a40:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a42:	4e19      	ldr	r6, [pc, #100]	; (10008aa8 <sms_button_gpio_init+0x8c>)
10008a44:	7870      	ldrb	r0, [r6, #1]
10008a46:	0021      	movs	r1, r4
10008a48:	4d18      	ldr	r5, [pc, #96]	; (10008aac <sms_button_gpio_init+0x90>)
10008a4a:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008a4c:	0020      	movs	r0, r4
10008a4e:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a50:	464b      	mov	r3, r9
10008a52:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008a54:	4643      	mov	r3, r8
10008a56:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008a58:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008a5a:	79f0      	ldrb	r0, [r6, #7]
10008a5c:	0021      	movs	r1, r4
10008a5e:	47a8      	blx	r5
10008a60:	2800      	cmp	r0, #0
10008a62:	d005      	beq.n	10008a70 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008a64:	4812      	ldr	r0, [pc, #72]	; (10008ab0 <sms_button_gpio_init+0x94>)
10008a66:	4b13      	ldr	r3, [pc, #76]	; (10008ab4 <sms_button_gpio_init+0x98>)
10008a68:	4798      	blx	r3
10008a6a:	4813      	ldr	r0, [pc, #76]	; (10008ab8 <sms_button_gpio_init+0x9c>)
10008a6c:	4b13      	ldr	r3, [pc, #76]	; (10008abc <sms_button_gpio_init+0xa0>)
10008a6e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008a70:	ac01      	add	r4, sp, #4
10008a72:	0020      	movs	r0, r4
10008a74:	4b0b      	ldr	r3, [pc, #44]	; (10008aa4 <sms_button_gpio_init+0x88>)
10008a76:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008a78:	2300      	movs	r3, #0
10008a7a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008a7c:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008a7e:	0021      	movs	r1, r4
10008a80:	2017      	movs	r0, #23
10008a82:	4b0a      	ldr	r3, [pc, #40]	; (10008aac <sms_button_gpio_init+0x90>)
10008a84:	4798      	blx	r3
10008a86:	2800      	cmp	r0, #0
10008a88:	d005      	beq.n	10008a96 <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008a8a:	4809      	ldr	r0, [pc, #36]	; (10008ab0 <sms_button_gpio_init+0x94>)
10008a8c:	4b09      	ldr	r3, [pc, #36]	; (10008ab4 <sms_button_gpio_init+0x98>)
10008a8e:	4798      	blx	r3
10008a90:	480b      	ldr	r0, [pc, #44]	; (10008ac0 <sms_button_gpio_init+0xa4>)
10008a92:	4b0a      	ldr	r3, [pc, #40]	; (10008abc <sms_button_gpio_init+0xa0>)
10008a94:	4798      	blx	r3
    }
}
10008a96:	b002      	add	sp, #8
10008a98:	bc1c      	pop	{r2, r3, r4}
10008a9a:	4690      	mov	r8, r2
10008a9c:	4699      	mov	r9, r3
10008a9e:	46a2      	mov	sl, r4
10008aa0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008aa2:	46c0      	nop			; (mov r8, r8)
10008aa4:	10009e9d 	.word	0x10009e9d
10008aa8:	100159d8 	.word	0x100159d8
10008aac:	10009ead 	.word	0x10009ead
10008ab0:	10012d7c 	.word	0x10012d7c
10008ab4:	10011e31 	.word	0x10011e31
10008ab8:	10012ee4 	.word	0x10012ee4
10008abc:	10011d11 	.word	0x10011d11
10008ac0:	10012f1c 	.word	0x10012f1c

10008ac4 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008ac4:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008ac6:	4d05      	ldr	r5, [pc, #20]	; (10008adc <sms_button_register_callbacks+0x18>)
10008ac8:	7868      	ldrb	r0, [r5, #1]
10008aca:	2202      	movs	r2, #2
10008acc:	4904      	ldr	r1, [pc, #16]	; (10008ae0 <sms_button_register_callbacks+0x1c>)
10008ace:	4c05      	ldr	r4, [pc, #20]	; (10008ae4 <sms_button_register_callbacks+0x20>)
10008ad0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008ad2:	79e8      	ldrb	r0, [r5, #7]
10008ad4:	2202      	movs	r2, #2
10008ad6:	4904      	ldr	r1, [pc, #16]	; (10008ae8 <sms_button_register_callbacks+0x24>)
10008ad8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008ada:	bd70      	pop	{r4, r5, r6, pc}
10008adc:	100159d8 	.word	0x100159d8
10008ae0:	100089b5 	.word	0x100089b5
10008ae4:	1000a2dd 	.word	0x1000a2dd
10008ae8:	100089d5 	.word	0x100089d5

10008aec <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008aec:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008aee:	201f      	movs	r0, #31
10008af0:	4c08      	ldr	r4, [pc, #32]	; (10008b14 <sms_button_get_state+0x28>)
10008af2:	47a0      	blx	r4
10008af4:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008af6:	201d      	movs	r0, #29
10008af8:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008afa:	2d00      	cmp	r5, #0
10008afc:	d004      	beq.n	10008b08 <sms_button_get_state+0x1c>
10008afe:	2303      	movs	r3, #3
10008b00:	2800      	cmp	r0, #0
10008b02:	d104      	bne.n	10008b0e <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008b04:	3b02      	subs	r3, #2
10008b06:	e002      	b.n	10008b0e <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008b08:	1e43      	subs	r3, r0, #1
10008b0a:	4198      	sbcs	r0, r3
10008b0c:	0043      	lsls	r3, r0, #1
}
10008b0e:	0018      	movs	r0, r3
10008b10:	bd70      	pop	{r4, r5, r6, pc}
10008b12:	46c0      	nop			; (mov r8, r8)
10008b14:	1000a065 	.word	0x1000a065

10008b18 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008b18:	b570      	push	{r4, r5, r6, lr}
10008b1a:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
10008b1c:	4c47      	ldr	r4, [pc, #284]	; (10008c3c <sms_button_fn+0x124>)
10008b1e:	7b63      	ldrb	r3, [r4, #13]
10008b20:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008b22:	4b47      	ldr	r3, [pc, #284]	; (10008c40 <sms_button_fn+0x128>)
10008b24:	4798      	blx	r3
10008b26:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008b28:	2d00      	cmp	r5, #0
10008b2a:	d103      	bne.n	10008b34 <sms_button_fn+0x1c>
10008b2c:	4845      	ldr	r0, [pc, #276]	; (10008c44 <sms_button_fn+0x12c>)
10008b2e:	4b46      	ldr	r3, [pc, #280]	; (10008c48 <sms_button_fn+0x130>)
10008b30:	4798      	blx	r3
10008b32:	e004      	b.n	10008b3e <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008b34:	2d01      	cmp	r5, #1
10008b36:	d175      	bne.n	10008c24 <sms_button_fn+0x10c>
10008b38:	4844      	ldr	r0, [pc, #272]	; (10008c4c <sms_button_fn+0x134>)
10008b3a:	4b43      	ldr	r3, [pc, #268]	; (10008c48 <sms_button_fn+0x130>)
10008b3c:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
10008b3e:	4b3f      	ldr	r3, [pc, #252]	; (10008c3c <sms_button_fn+0x124>)
10008b40:	7b5b      	ldrb	r3, [r3, #13]
10008b42:	2b01      	cmp	r3, #1
10008b44:	d006      	beq.n	10008b54 <sms_button_fn+0x3c>
10008b46:	2b00      	cmp	r3, #0
10008b48:	d067      	beq.n	10008c1a <sms_button_fn+0x102>
10008b4a:	2b02      	cmp	r3, #2
10008b4c:	d024      	beq.n	10008b98 <sms_button_fn+0x80>
10008b4e:	2b03      	cmp	r3, #3
10008b50:	d043      	beq.n	10008bda <sms_button_fn+0xc2>
10008b52:	e06a      	b.n	10008c2a <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
10008b54:	4b3e      	ldr	r3, [pc, #248]	; (10008c50 <sms_button_fn+0x138>)
10008b56:	781b      	ldrb	r3, [r3, #0]
10008b58:	b2db      	uxtb	r3, r3
10008b5a:	2b00      	cmp	r3, #0
10008b5c:	d003      	beq.n	10008b66 <sms_button_fn+0x4e>
10008b5e:	3b22      	subs	r3, #34	; 0x22
10008b60:	2b01      	cmp	r3, #1
10008b62:	d864      	bhi.n	10008c2e <sms_button_fn+0x116>
10008b64:	e00e      	b.n	10008b84 <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10008b66:	2201      	movs	r2, #1
10008b68:	4b3a      	ldr	r3, [pc, #232]	; (10008c54 <sms_button_fn+0x13c>)
10008b6a:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008b6c:	2300      	movs	r3, #0
10008b6e:	4a3a      	ldr	r2, [pc, #232]	; (10008c58 <sms_button_fn+0x140>)
10008b70:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008b72:	4a3a      	ldr	r2, [pc, #232]	; (10008c5c <sms_button_fn+0x144>)
10008b74:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10008b76:	2200      	movs	r2, #0
10008b78:	21fa      	movs	r1, #250	; 0xfa
10008b7a:	2001      	movs	r0, #1
10008b7c:	4b38      	ldr	r3, [pc, #224]	; (10008c60 <sms_button_fn+0x148>)
10008b7e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008b80:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
10008b82:	e059      	b.n	10008c38 <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
10008b84:	2300      	movs	r3, #0
10008b86:	4a33      	ldr	r2, [pc, #204]	; (10008c54 <sms_button_fn+0x13c>)
10008b88:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008b8a:	4a33      	ldr	r2, [pc, #204]	; (10008c58 <sms_button_fn+0x140>)
10008b8c:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008b8e:	2000      	movs	r0, #0
10008b90:	4b34      	ldr	r3, [pc, #208]	; (10008c64 <sms_button_fn+0x14c>)
10008b92:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008b94:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008b96:	e04f      	b.n	10008c38 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008b98:	4b2d      	ldr	r3, [pc, #180]	; (10008c50 <sms_button_fn+0x138>)
10008b9a:	781b      	ldrb	r3, [r3, #0]
10008b9c:	b2db      	uxtb	r3, r3
10008b9e:	2b00      	cmp	r3, #0
10008ba0:	d002      	beq.n	10008ba8 <sms_button_fn+0x90>
10008ba2:	2b22      	cmp	r3, #34	; 0x22
10008ba4:	d00f      	beq.n	10008bc6 <sms_button_fn+0xae>
10008ba6:	e045      	b.n	10008c34 <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10008ba8:	2201      	movs	r2, #1
10008baa:	4b2a      	ldr	r3, [pc, #168]	; (10008c54 <sms_button_fn+0x13c>)
10008bac:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008bae:	2300      	movs	r3, #0
10008bb0:	4a29      	ldr	r2, [pc, #164]	; (10008c58 <sms_button_fn+0x140>)
10008bb2:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008bb4:	4a29      	ldr	r2, [pc, #164]	; (10008c5c <sms_button_fn+0x144>)
10008bb6:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10008bb8:	2200      	movs	r2, #0
10008bba:	21fa      	movs	r1, #250	; 0xfa
10008bbc:	2001      	movs	r0, #1
10008bbe:	4b28      	ldr	r3, [pc, #160]	; (10008c60 <sms_button_fn+0x148>)
10008bc0:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008bc2:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
10008bc4:	e038      	b.n	10008c38 <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
10008bc6:	2300      	movs	r3, #0
10008bc8:	4a22      	ldr	r2, [pc, #136]	; (10008c54 <sms_button_fn+0x13c>)
10008bca:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008bcc:	4a22      	ldr	r2, [pc, #136]	; (10008c58 <sms_button_fn+0x140>)
10008bce:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
10008bd0:	2000      	movs	r0, #0
10008bd2:	4b24      	ldr	r3, [pc, #144]	; (10008c64 <sms_button_fn+0x14c>)
10008bd4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008bd6:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008bd8:	e02e      	b.n	10008c38 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008bda:	4b1d      	ldr	r3, [pc, #116]	; (10008c50 <sms_button_fn+0x138>)
10008bdc:	781b      	ldrb	r3, [r3, #0]
10008bde:	2b00      	cmp	r3, #0
10008be0:	d108      	bne.n	10008bf4 <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
10008be2:	4a1c      	ldr	r2, [pc, #112]	; (10008c54 <sms_button_fn+0x13c>)
10008be4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008be6:	4a1c      	ldr	r2, [pc, #112]	; (10008c58 <sms_button_fn+0x140>)
10008be8:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
10008bea:	2201      	movs	r2, #1
10008bec:	4b1e      	ldr	r3, [pc, #120]	; (10008c68 <sms_button_fn+0x150>)
10008bee:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008bf0:	2000      	movs	r0, #0
10008bf2:	e021      	b.n	10008c38 <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
10008bf4:	2100      	movs	r1, #0
10008bf6:	2000      	movs	r0, #0
10008bf8:	4b1c      	ldr	r3, [pc, #112]	; (10008c6c <sms_button_fn+0x154>)
10008bfa:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10008bfc:	2202      	movs	r2, #2
10008bfe:	4b15      	ldr	r3, [pc, #84]	; (10008c54 <sms_button_fn+0x13c>)
10008c00:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008c02:	2300      	movs	r3, #0
10008c04:	4a14      	ldr	r2, [pc, #80]	; (10008c58 <sms_button_fn+0x140>)
10008c06:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008c08:	4a14      	ldr	r2, [pc, #80]	; (10008c5c <sms_button_fn+0x144>)
10008c0a:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10008c0c:	2200      	movs	r2, #0
10008c0e:	21fa      	movs	r1, #250	; 0xfa
10008c10:	2001      	movs	r0, #1
10008c12:	4b13      	ldr	r3, [pc, #76]	; (10008c60 <sms_button_fn+0x148>)
10008c14:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c16:	2000      	movs	r0, #0
10008c18:	e00e      	b.n	10008c38 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
10008c1a:	2201      	movs	r2, #1
10008c1c:	4b12      	ldr	r3, [pc, #72]	; (10008c68 <sms_button_fn+0x150>)
10008c1e:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c20:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008c22:	e009      	b.n	10008c38 <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008c24:	2001      	movs	r0, #1
10008c26:	4240      	negs	r0, r0
10008c28:	e006      	b.n	10008c38 <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c2a:	2000      	movs	r0, #0
10008c2c:	e004      	b.n	10008c38 <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
10008c2e:	2001      	movs	r0, #1
10008c30:	4240      	negs	r0, r0
10008c32:	e001      	b.n	10008c38 <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
10008c34:	2001      	movs	r0, #1
10008c36:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
10008c38:	bd70      	pop	{r4, r5, r6, pc}
10008c3a:	46c0      	nop			; (mov r8, r8)
10008c3c:	100159d8 	.word	0x100159d8
10008c40:	10008aed 	.word	0x10008aed
10008c44:	10012f64 	.word	0x10012f64
10008c48:	10008d85 	.word	0x10008d85
10008c4c:	10012f78 	.word	0x10012f78
10008c50:	100159bc 	.word	0x100159bc
10008c54:	10015908 	.word	0x10015908
10008c58:	10015afb 	.word	0x10015afb
10008c5c:	10015b42 	.word	0x10015b42
10008c60:	10009459 	.word	0x10009459
10008c64:	100086d1 	.word	0x100086d1
10008c68:	100159b9 	.word	0x100159b9
10008c6c:	100091f5 	.word	0x100091f5

10008c70 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008c70:	b510      	push	{r4, lr}
10008c72:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008c74:	2800      	cmp	r0, #0
10008c76:	d104      	bne.n	10008c82 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008c78:	4b0c      	ldr	r3, [pc, #48]	; (10008cac <sms_button_toggle_callback+0x3c>)
10008c7a:	7858      	ldrb	r0, [r3, #1]
10008c7c:	4b0c      	ldr	r3, [pc, #48]	; (10008cb0 <sms_button_toggle_callback+0x40>)
10008c7e:	4798      	blx	r3
10008c80:	e005      	b.n	10008c8e <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008c82:	2801      	cmp	r0, #1
10008c84:	d103      	bne.n	10008c8e <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008c86:	4b09      	ldr	r3, [pc, #36]	; (10008cac <sms_button_toggle_callback+0x3c>)
10008c88:	7858      	ldrb	r0, [r3, #1]
10008c8a:	4b0a      	ldr	r3, [pc, #40]	; (10008cb4 <sms_button_toggle_callback+0x44>)
10008c8c:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008c8e:	2c00      	cmp	r4, #0
10008c90:	d104      	bne.n	10008c9c <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008c92:	4b06      	ldr	r3, [pc, #24]	; (10008cac <sms_button_toggle_callback+0x3c>)
10008c94:	79d8      	ldrb	r0, [r3, #7]
10008c96:	4b06      	ldr	r3, [pc, #24]	; (10008cb0 <sms_button_toggle_callback+0x40>)
10008c98:	4798      	blx	r3
10008c9a:	e005      	b.n	10008ca8 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008c9c:	2c01      	cmp	r4, #1
10008c9e:	d103      	bne.n	10008ca8 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008ca0:	4b02      	ldr	r3, [pc, #8]	; (10008cac <sms_button_toggle_callback+0x3c>)
10008ca2:	79d8      	ldrb	r0, [r3, #7]
10008ca4:	4b03      	ldr	r3, [pc, #12]	; (10008cb4 <sms_button_toggle_callback+0x44>)
10008ca6:	4798      	blx	r3
    }
}
10008ca8:	bd10      	pop	{r4, pc}
10008caa:	46c0      	nop			; (mov r8, r8)
10008cac:	100159d8 	.word	0x100159d8
10008cb0:	1000a3ad 	.word	0x1000a3ad
10008cb4:	1000a409 	.word	0x1000a409

10008cb8 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008cb8:	b510      	push	{r4, lr}
10008cba:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008cbc:	466b      	mov	r3, sp
10008cbe:	1dda      	adds	r2, r3, #7
10008cc0:	2300      	movs	r3, #0
10008cc2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008cc4:	4c09      	ldr	r4, [pc, #36]	; (10008cec <sms_button_define_services+0x34>)
10008cc6:	0021      	movs	r1, r4
10008cc8:	2000      	movs	r0, #0
10008cca:	4b09      	ldr	r3, [pc, #36]	; (10008cf0 <sms_button_define_services+0x38>)
10008ccc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008cce:	0020      	movs	r0, r4
10008cd0:	4b08      	ldr	r3, [pc, #32]	; (10008cf4 <sms_button_define_services+0x3c>)
10008cd2:	4798      	blx	r3
10008cd4:	1e04      	subs	r4, r0, #0
10008cd6:	d006      	beq.n	10008ce6 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008cd8:	4807      	ldr	r0, [pc, #28]	; (10008cf8 <sms_button_define_services+0x40>)
10008cda:	4b08      	ldr	r3, [pc, #32]	; (10008cfc <sms_button_define_services+0x44>)
10008cdc:	4798      	blx	r3
10008cde:	0021      	movs	r1, r4
10008ce0:	4807      	ldr	r0, [pc, #28]	; (10008d00 <sms_button_define_services+0x48>)
10008ce2:	4b08      	ldr	r3, [pc, #32]	; (10008d04 <sms_button_define_services+0x4c>)
10008ce4:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
10008ce6:	b002      	add	sp, #8
10008ce8:	bd10      	pop	{r4, pc}
10008cea:	46c0      	nop			; (mov r8, r8)
10008cec:	100159e8 	.word	0x100159e8
10008cf0:	100088cd 	.word	0x100088cd
10008cf4:	100088a9 	.word	0x100088a9
10008cf8:	10012d7c 	.word	0x10012d7c
10008cfc:	10011e31 	.word	0x10011e31
10008d00:	10012f8c 	.word	0x10012f8c
10008d04:	10011d11 	.word	0x10011d11

10008d08 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008d08:	b510      	push	{r4, lr}
10008d0a:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008d0c:	ac01      	add	r4, sp, #4
10008d0e:	0020      	movs	r0, r4
10008d10:	4b15      	ldr	r3, [pc, #84]	; (10008d68 <sms_monitor_configure_gpio+0x60>)
10008d12:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008d14:	2301      	movs	r3, #1
10008d16:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008d18:	0021      	movs	r1, r4
10008d1a:	200e      	movs	r0, #14
10008d1c:	4b13      	ldr	r3, [pc, #76]	; (10008d6c <sms_monitor_configure_gpio+0x64>)
10008d1e:	4798      	blx	r3
10008d20:	2800      	cmp	r0, #0
10008d22:	d005      	beq.n	10008d30 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008d24:	4812      	ldr	r0, [pc, #72]	; (10008d70 <sms_monitor_configure_gpio+0x68>)
10008d26:	4b13      	ldr	r3, [pc, #76]	; (10008d74 <sms_monitor_configure_gpio+0x6c>)
10008d28:	4798      	blx	r3
10008d2a:	4813      	ldr	r0, [pc, #76]	; (10008d78 <sms_monitor_configure_gpio+0x70>)
10008d2c:	4b13      	ldr	r3, [pc, #76]	; (10008d7c <sms_monitor_configure_gpio+0x74>)
10008d2e:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008d30:	2100      	movs	r1, #0
10008d32:	200e      	movs	r0, #14
10008d34:	4b12      	ldr	r3, [pc, #72]	; (10008d80 <sms_monitor_configure_gpio+0x78>)
10008d36:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008d38:	ac01      	add	r4, sp, #4
10008d3a:	0020      	movs	r0, r4
10008d3c:	4b0a      	ldr	r3, [pc, #40]	; (10008d68 <sms_monitor_configure_gpio+0x60>)
10008d3e:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008d40:	2301      	movs	r3, #1
10008d42:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008d44:	0021      	movs	r1, r4
10008d46:	200f      	movs	r0, #15
10008d48:	4b08      	ldr	r3, [pc, #32]	; (10008d6c <sms_monitor_configure_gpio+0x64>)
10008d4a:	4798      	blx	r3
10008d4c:	2800      	cmp	r0, #0
10008d4e:	d005      	beq.n	10008d5c <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008d50:	4807      	ldr	r0, [pc, #28]	; (10008d70 <sms_monitor_configure_gpio+0x68>)
10008d52:	4b08      	ldr	r3, [pc, #32]	; (10008d74 <sms_monitor_configure_gpio+0x6c>)
10008d54:	4798      	blx	r3
10008d56:	4808      	ldr	r0, [pc, #32]	; (10008d78 <sms_monitor_configure_gpio+0x70>)
10008d58:	4b08      	ldr	r3, [pc, #32]	; (10008d7c <sms_monitor_configure_gpio+0x74>)
10008d5a:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008d5c:	2100      	movs	r1, #0
10008d5e:	200f      	movs	r0, #15
10008d60:	4b07      	ldr	r3, [pc, #28]	; (10008d80 <sms_monitor_configure_gpio+0x78>)
10008d62:	4798      	blx	r3
}
10008d64:	b002      	add	sp, #8
10008d66:	bd10      	pop	{r4, pc}
10008d68:	10009e9d 	.word	0x10009e9d
10008d6c:	10009ead 	.word	0x10009ead
10008d70:	10012d7c 	.word	0x10012d7c
10008d74:	10011e31 	.word	0x10011e31
10008d78:	10012fd0 	.word	0x10012fd0
10008d7c:	10011d11 	.word	0x10011d11
10008d80:	1000a105 	.word	0x1000a105

10008d84 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008d84:	4b04      	ldr	r3, [pc, #16]	; (10008d98 <sms_monitor_get_states+0x14>)
10008d86:	781b      	ldrb	r3, [r3, #0]
10008d88:	4b04      	ldr	r3, [pc, #16]	; (10008d9c <sms_monitor_get_states+0x18>)
10008d8a:	781b      	ldrb	r3, [r3, #0]
10008d8c:	4b04      	ldr	r3, [pc, #16]	; (10008da0 <sms_monitor_get_states+0x1c>)
10008d8e:	781b      	ldrb	r3, [r3, #0]
10008d90:	4b04      	ldr	r3, [pc, #16]	; (10008da4 <sms_monitor_get_states+0x20>)
10008d92:	781b      	ldrb	r3, [r3, #0]
}
10008d94:	4770      	bx	lr
10008d96:	46c0      	nop			; (mov r8, r8)
10008d98:	100159bc 	.word	0x100159bc
10008d9c:	10015908 	.word	0x10015908
10008da0:	10015afb 	.word	0x10015afb
10008da4:	100159b8 	.word	0x100159b8

10008da8 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008da8:	b530      	push	{r4, r5, lr}
10008daa:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008dac:	2010      	movs	r0, #16
10008dae:	4c14      	ldr	r4, [pc, #80]	; (10008e00 <sms_i2c_master_configure+0x58>)
10008db0:	47a0      	blx	r4
10008db2:	4b14      	ldr	r3, [pc, #80]	; (10008e04 <sms_i2c_master_configure+0x5c>)
10008db4:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008db6:	2010      	movs	r0, #16
10008db8:	47a0      	blx	r4
10008dba:	4b13      	ldr	r3, [pc, #76]	; (10008e08 <sms_i2c_master_configure+0x60>)
10008dbc:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008dbe:	ac01      	add	r4, sp, #4
10008dc0:	0020      	movs	r0, r4
10008dc2:	4b12      	ldr	r3, [pc, #72]	; (10008e0c <sms_i2c_master_configure+0x64>)
10008dc4:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008dc6:	2303      	movs	r3, #3
10008dc8:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008dca:	331b      	adds	r3, #27
10008dcc:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008dce:	3b16      	subs	r3, #22
10008dd0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008dd2:	3301      	adds	r3, #1
10008dd4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008dd6:	3b07      	subs	r3, #7
10008dd8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008dda:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008ddc:	4d0c      	ldr	r5, [pc, #48]	; (10008e10 <sms_i2c_master_configure+0x68>)
10008dde:	4c0d      	ldr	r4, [pc, #52]	; (10008e14 <sms_i2c_master_configure+0x6c>)
10008de0:	aa01      	add	r2, sp, #4
10008de2:	490d      	ldr	r1, [pc, #52]	; (10008e18 <sms_i2c_master_configure+0x70>)
10008de4:	0028      	movs	r0, r5
10008de6:	47a0      	blx	r4
10008de8:	2800      	cmp	r0, #0
10008dea:	d1f9      	bne.n	10008de0 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008dec:	4b08      	ldr	r3, [pc, #32]	; (10008e10 <sms_i2c_master_configure+0x68>)
10008dee:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008df0:	2128      	movs	r1, #40	; 0x28
10008df2:	5c53      	ldrb	r3, [r2, r1]
10008df4:	07db      	lsls	r3, r3, #31
10008df6:	d4fc      	bmi.n	10008df2 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008df8:	2301      	movs	r3, #1
10008dfa:	7513      	strb	r3, [r2, #20]
}
10008dfc:	b007      	add	sp, #28
10008dfe:	bd30      	pop	{r4, r5, pc}
10008e00:	10011b85 	.word	0x10011b85
10008e04:	10015b04 	.word	0x10015b04
10008e08:	10015ae4 	.word	0x10015ae4
10008e0c:	100082a1 	.word	0x100082a1
10008e10:	10015af0 	.word	0x10015af0
10008e14:	100082b9 	.word	0x100082b9
10008e18:	40003000 	.word	0x40003000

10008e1c <sms_mpu_interrupt_callback>:
	mpu_device.int_enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008e1c:	b510      	push	{r4, lr}
	if(mpu_device.int_enabled) {
10008e1e:	2344      	movs	r3, #68	; 0x44
10008e20:	4a06      	ldr	r2, [pc, #24]	; (10008e3c <sms_mpu_interrupt_callback+0x20>)
10008e22:	5cd3      	ldrb	r3, [r2, r3]
10008e24:	2b00      	cmp	r3, #0
10008e26:	d008      	beq.n	10008e3a <sms_mpu_interrupt_callback+0x1e>
		mpu_device.new_int = true;
10008e28:	2101      	movs	r1, #1
10008e2a:	2345      	movs	r3, #69	; 0x45
10008e2c:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008e2e:	2300      	movs	r3, #0
10008e30:	2200      	movs	r2, #0
10008e32:	3101      	adds	r1, #1
10008e34:	201e      	movs	r0, #30
10008e36:	4c02      	ldr	r4, [pc, #8]	; (10008e40 <sms_mpu_interrupt_callback+0x24>)
10008e38:	47a0      	blx	r4
	}
}
10008e3a:	bd10      	pop	{r4, pc}
10008e3c:	1001590c 	.word	0x1001590c
10008e40:	1000cdc9 	.word	0x1000cdc9

10008e44 <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
10008e44:	b510      	push	{r4, lr}
10008e46:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008e48:	ac01      	add	r4, sp, #4
10008e4a:	0020      	movs	r0, r4
10008e4c:	4b0a      	ldr	r3, [pc, #40]	; (10008e78 <sms_mpu_configure_gpio+0x34>)
10008e4e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008e50:	2300      	movs	r3, #0
10008e52:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008e54:	3302      	adds	r3, #2
10008e56:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008e58:	3b01      	subs	r3, #1
10008e5a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008e5c:	0021      	movs	r1, r4
10008e5e:	201e      	movs	r0, #30
10008e60:	4b06      	ldr	r3, [pc, #24]	; (10008e7c <sms_mpu_configure_gpio+0x38>)
10008e62:	4798      	blx	r3
10008e64:	2800      	cmp	r0, #0
10008e66:	d005      	beq.n	10008e74 <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008e68:	4805      	ldr	r0, [pc, #20]	; (10008e80 <sms_mpu_configure_gpio+0x3c>)
10008e6a:	4b06      	ldr	r3, [pc, #24]	; (10008e84 <sms_mpu_configure_gpio+0x40>)
10008e6c:	4798      	blx	r3
10008e6e:	4806      	ldr	r0, [pc, #24]	; (10008e88 <sms_mpu_configure_gpio+0x44>)
10008e70:	4b06      	ldr	r3, [pc, #24]	; (10008e8c <sms_mpu_configure_gpio+0x48>)
10008e72:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10008e74:	b002      	add	sp, #8
10008e76:	bd10      	pop	{r4, pc}
10008e78:	10009e9d 	.word	0x10009e9d
10008e7c:	10009ead 	.word	0x10009ead
10008e80:	10012d7c 	.word	0x10012d7c
10008e84:	10011e31 	.word	0x10011e31
10008e88:	10012ff0 	.word	0x10012ff0
10008e8c:	10011d11 	.word	0x10011d11

10008e90 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10008e90:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
10008e92:	2202      	movs	r2, #2
10008e94:	4902      	ldr	r1, [pc, #8]	; (10008ea0 <sms_mpu_register_callbacks+0x10>)
10008e96:	201e      	movs	r0, #30
10008e98:	4b02      	ldr	r3, [pc, #8]	; (10008ea4 <sms_mpu_register_callbacks+0x14>)
10008e9a:	4798      	blx	r3
}
10008e9c:	bd10      	pop	{r4, pc}
10008e9e:	46c0      	nop			; (mov r8, r8)
10008ea0:	10008e1d 	.word	0x10008e1d
10008ea4:	1000a2dd 	.word	0x1000a2dd

10008ea8 <sms_mpu_poll_data>:

/* Extract available IMU data */
int sms_mpu_poll_data(void)
{
    return 0;
}
10008ea8:	2000      	movs	r0, #0
10008eaa:	4770      	bx	lr

10008eac <sms_mpu_define_services>:

void sms_mpu_define_services(void)
{
10008eac:	b510      	push	{r4, lr}
10008eae:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008eb0:	466b      	mov	r3, sp
10008eb2:	1dda      	adds	r2, r3, #7
10008eb4:	2300      	movs	r3, #0
10008eb6:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
10008eb8:	4c09      	ldr	r4, [pc, #36]	; (10008ee0 <sms_mpu_define_services+0x34>)
10008eba:	0021      	movs	r1, r4
10008ebc:	2002      	movs	r0, #2
10008ebe:	4b09      	ldr	r3, [pc, #36]	; (10008ee4 <sms_mpu_define_services+0x38>)
10008ec0:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
10008ec2:	0020      	movs	r0, r4
10008ec4:	4b08      	ldr	r3, [pc, #32]	; (10008ee8 <sms_mpu_define_services+0x3c>)
10008ec6:	4798      	blx	r3
10008ec8:	1e04      	subs	r4, r0, #0
10008eca:	d006      	beq.n	10008eda <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
10008ecc:	4807      	ldr	r0, [pc, #28]	; (10008eec <sms_mpu_define_services+0x40>)
10008ece:	4b08      	ldr	r3, [pc, #32]	; (10008ef0 <sms_mpu_define_services+0x44>)
10008ed0:	4798      	blx	r3
10008ed2:	0021      	movs	r1, r4
10008ed4:	4807      	ldr	r0, [pc, #28]	; (10008ef4 <sms_mpu_define_services+0x48>)
10008ed6:	4b08      	ldr	r3, [pc, #32]	; (10008ef8 <sms_mpu_define_services+0x4c>)
10008ed8:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}
10008eda:	b002      	add	sp, #8
10008edc:	bd10      	pop	{r4, pc}
10008ede:	46c0      	nop			; (mov r8, r8)
10008ee0:	10015958 	.word	0x10015958
10008ee4:	100088cd 	.word	0x100088cd
10008ee8:	100088a9 	.word	0x100088a9
10008eec:	10012d7c 	.word	0x10012d7c
10008ef0:	10011e31 	.word	0x10011e31
10008ef4:	10013030 	.word	0x10013030
10008ef8:	10011d11 	.word	0x10011d11

10008efc <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10008efc:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10008efe:	2100      	movs	r1, #0
10008f00:	4b01      	ldr	r3, [pc, #4]	; (10008f08 <sms_led_switch_on+0xc>)
10008f02:	4798      	blx	r3
}
10008f04:	bd10      	pop	{r4, pc}
10008f06:	46c0      	nop			; (mov r8, r8)
10008f08:	1000a105 	.word	0x1000a105

10008f0c <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10008f0c:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10008f0e:	2101      	movs	r1, #1
10008f10:	4b01      	ldr	r3, [pc, #4]	; (10008f18 <sms_led_switch_off+0xc>)
10008f12:	4798      	blx	r3
}
10008f14:	bd10      	pop	{r4, pc}
10008f16:	46c0      	nop			; (mov r8, r8)
10008f18:	1000a105 	.word	0x1000a105

10008f1c <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10008f1c:	b510      	push	{r4, lr}
10008f1e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10008f20:	ac01      	add	r4, sp, #4
10008f22:	0020      	movs	r0, r4
10008f24:	4b06      	ldr	r3, [pc, #24]	; (10008f40 <sms_led_gpio_init+0x24>)
10008f26:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008f28:	2301      	movs	r3, #1
10008f2a:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008f2c:	0021      	movs	r1, r4
10008f2e:	2016      	movs	r0, #22
10008f30:	4b04      	ldr	r3, [pc, #16]	; (10008f44 <sms_led_gpio_init+0x28>)
10008f32:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10008f34:	2016      	movs	r0, #22
10008f36:	4b04      	ldr	r3, [pc, #16]	; (10008f48 <sms_led_gpio_init+0x2c>)
10008f38:	4798      	blx	r3
}
10008f3a:	b002      	add	sp, #8
10008f3c:	bd10      	pop	{r4, pc}
10008f3e:	46c0      	nop			; (mov r8, r8)
10008f40:	10009e9d 	.word	0x10009e9d
10008f44:	10009ead 	.word	0x10009ead
10008f48:	10008f0d 	.word	0x10008f0d

10008f4c <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
10008f4c:	b510      	push	{r4, lr}
10008f4e:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
10008f50:	4b05      	ldr	r3, [pc, #20]	; (10008f68 <sms_led_toggle+0x1c>)
10008f52:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10008f54:	2800      	cmp	r0, #0
10008f56:	d103      	bne.n	10008f60 <sms_led_toggle+0x14>
10008f58:	0020      	movs	r0, r4
10008f5a:	4b04      	ldr	r3, [pc, #16]	; (10008f6c <sms_led_toggle+0x20>)
10008f5c:	4798      	blx	r3
10008f5e:	e002      	b.n	10008f66 <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
10008f60:	0020      	movs	r0, r4
10008f62:	4b03      	ldr	r3, [pc, #12]	; (10008f70 <sms_led_toggle+0x24>)
10008f64:	4798      	blx	r3
}
10008f66:	bd10      	pop	{r4, pc}
10008f68:	1000a0b5 	.word	0x1000a0b5
10008f6c:	10008f0d 	.word	0x10008f0d
10008f70:	10008efd 	.word	0x10008efd

10008f74 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10008f74:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10008f76:	4b0c      	ldr	r3, [pc, #48]	; (10008fa8 <sms_led_blink_start+0x34>)
10008f78:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10008f7a:	2200      	movs	r2, #0
10008f7c:	4b0b      	ldr	r3, [pc, #44]	; (10008fac <sms_led_blink_start+0x38>)
10008f7e:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10008f80:	4b0b      	ldr	r3, [pc, #44]	; (10008fb0 <sms_led_blink_start+0x3c>)
10008f82:	781b      	ldrb	r3, [r3, #0]
10008f84:	b2db      	uxtb	r3, r3
10008f86:	2b02      	cmp	r3, #2
10008f88:	d002      	beq.n	10008f90 <sms_led_blink_start+0x1c>
10008f8a:	2b03      	cmp	r3, #3
10008f8c:	d002      	beq.n	10008f94 <sms_led_blink_start+0x20>
10008f8e:	e004      	b.n	10008f9a <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10008f90:	2164      	movs	r1, #100	; 0x64
10008f92:	e003      	b.n	10008f9c <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10008f94:	21c8      	movs	r1, #200	; 0xc8
10008f96:	0049      	lsls	r1, r1, #1
        break;
10008f98:	e000      	b.n	10008f9c <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10008f9a:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10008f9c:	2201      	movs	r2, #1
10008f9e:	2001      	movs	r0, #1
10008fa0:	4b04      	ldr	r3, [pc, #16]	; (10008fb4 <sms_led_blink_start+0x40>)
10008fa2:	4798      	blx	r3
}
10008fa4:	bd10      	pop	{r4, pc}
10008fa6:	46c0      	nop			; (mov r8, r8)
10008fa8:	10008efd 	.word	0x10008efd
10008fac:	10015b48 	.word	0x10015b48
10008fb0:	10015afb 	.word	0x10015afb
10008fb4:	10009459 	.word	0x10009459

10008fb8 <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
10008fb8:	4b06      	ldr	r3, [pc, #24]	; (10008fd4 <sms_pressure_init_variables+0x1c>)
10008fba:	2200      	movs	r2, #0
10008fbc:	2125      	movs	r1, #37	; 0x25
10008fbe:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
10008fc0:	3106      	adds	r1, #6
10008fc2:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
10008fc4:	3901      	subs	r1, #1
10008fc6:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
10008fc8:	3902      	subs	r1, #2
10008fca:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
10008fcc:	3101      	adds	r1, #1
10008fce:	545a      	strb	r2, [r3, r1]
}
10008fd0:	4770      	bx	lr
10008fd2:	46c0      	nop			; (mov r8, r8)
10008fd4:	10015a60 	.word	0x10015a60

10008fd8 <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10008fd8:	b510      	push	{r4, lr}
10008fda:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10008fdc:	4a05      	ldr	r2, [pc, #20]	; (10008ff4 <sms_pressure_ms58_reset+0x1c>)
10008fde:	231e      	movs	r3, #30
10008fe0:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10008fe2:	3b1d      	subs	r3, #29
10008fe4:	9300      	str	r3, [sp, #0]
10008fe6:	4b04      	ldr	r3, [pc, #16]	; (10008ff8 <sms_pressure_ms58_reset+0x20>)
10008fe8:	4904      	ldr	r1, [pc, #16]	; (10008ffc <sms_pressure_ms58_reset+0x24>)
10008fea:	4805      	ldr	r0, [pc, #20]	; (10009000 <sms_pressure_ms58_reset+0x28>)
10008fec:	4c05      	ldr	r4, [pc, #20]	; (10009004 <sms_pressure_ms58_reset+0x2c>)
10008fee:	47a0      	blx	r4
}
10008ff0:	b002      	add	sp, #8
10008ff2:	bd10      	pop	{r4, pc}
10008ff4:	10015a50 	.word	0x10015a50
10008ff8:	10015a3c 	.word	0x10015a3c
10008ffc:	10015b00 	.word	0x10015b00
10009000:	10015b0c 	.word	0x10015b0c
10009004:	10009331 	.word	0x10009331

10009008 <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009008:	b5f0      	push	{r4, r5, r6, r7, lr}
1000900a:	4657      	mov	r7, sl
1000900c:	b480      	push	{r7}
1000900e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009010:	4d37      	ldr	r5, [pc, #220]	; (100090f0 <sms_pressure_ms58_read_prom+0xe8>)
10009012:	23a2      	movs	r3, #162	; 0xa2
10009014:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
10009016:	2300      	movs	r3, #0
10009018:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
1000901a:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000901c:	4c35      	ldr	r4, [pc, #212]	; (100090f4 <sms_pressure_ms58_read_prom+0xec>)
1000901e:	3303      	adds	r3, #3
10009020:	469a      	mov	sl, r3
10009022:	9300      	str	r3, [sp, #0]
10009024:	0023      	movs	r3, r4
10009026:	002a      	movs	r2, r5
10009028:	4933      	ldr	r1, [pc, #204]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
1000902a:	4834      	ldr	r0, [pc, #208]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
1000902c:	4f34      	ldr	r7, [pc, #208]	; (10009100 <sms_pressure_ms58_read_prom+0xf8>)
1000902e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009030:	4e34      	ldr	r6, [pc, #208]	; (10009104 <sms_pressure_ms58_read_prom+0xfc>)
10009032:	7863      	ldrb	r3, [r4, #1]
10009034:	021b      	lsls	r3, r3, #8
10009036:	78a2      	ldrb	r2, [r4, #2]
10009038:	4313      	orrs	r3, r2
1000903a:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000903c:	23a4      	movs	r3, #164	; 0xa4
1000903e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009040:	4653      	mov	r3, sl
10009042:	9300      	str	r3, [sp, #0]
10009044:	0023      	movs	r3, r4
10009046:	002a      	movs	r2, r5
10009048:	492b      	ldr	r1, [pc, #172]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
1000904a:	482c      	ldr	r0, [pc, #176]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
1000904c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000904e:	7863      	ldrb	r3, [r4, #1]
10009050:	021b      	lsls	r3, r3, #8
10009052:	78a2      	ldrb	r2, [r4, #2]
10009054:	4313      	orrs	r3, r2
10009056:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009058:	23a6      	movs	r3, #166	; 0xa6
1000905a:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
1000905c:	4653      	mov	r3, sl
1000905e:	9300      	str	r3, [sp, #0]
10009060:	0023      	movs	r3, r4
10009062:	002a      	movs	r2, r5
10009064:	4924      	ldr	r1, [pc, #144]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
10009066:	4825      	ldr	r0, [pc, #148]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
10009068:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000906a:	7863      	ldrb	r3, [r4, #1]
1000906c:	021b      	lsls	r3, r3, #8
1000906e:	78a2      	ldrb	r2, [r4, #2]
10009070:	4313      	orrs	r3, r2
10009072:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009074:	23a8      	movs	r3, #168	; 0xa8
10009076:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009078:	4653      	mov	r3, sl
1000907a:	9300      	str	r3, [sp, #0]
1000907c:	0023      	movs	r3, r4
1000907e:	002a      	movs	r2, r5
10009080:	491d      	ldr	r1, [pc, #116]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
10009082:	481e      	ldr	r0, [pc, #120]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
10009084:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009086:	7863      	ldrb	r3, [r4, #1]
10009088:	021b      	lsls	r3, r3, #8
1000908a:	78a2      	ldrb	r2, [r4, #2]
1000908c:	4313      	orrs	r3, r2
1000908e:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009090:	23aa      	movs	r3, #170	; 0xaa
10009092:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009094:	4653      	mov	r3, sl
10009096:	9300      	str	r3, [sp, #0]
10009098:	0023      	movs	r3, r4
1000909a:	002a      	movs	r2, r5
1000909c:	4916      	ldr	r1, [pc, #88]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
1000909e:	4817      	ldr	r0, [pc, #92]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
100090a0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100090a2:	7863      	ldrb	r3, [r4, #1]
100090a4:	021b      	lsls	r3, r3, #8
100090a6:	78a2      	ldrb	r2, [r4, #2]
100090a8:	4313      	orrs	r3, r2
100090aa:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
100090ac:	23ac      	movs	r3, #172	; 0xac
100090ae:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100090b0:	4653      	mov	r3, sl
100090b2:	9300      	str	r3, [sp, #0]
100090b4:	0023      	movs	r3, r4
100090b6:	002a      	movs	r2, r5
100090b8:	490f      	ldr	r1, [pc, #60]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
100090ba:	4810      	ldr	r0, [pc, #64]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
100090bc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100090be:	7863      	ldrb	r3, [r4, #1]
100090c0:	021b      	lsls	r3, r3, #8
100090c2:	78a2      	ldrb	r2, [r4, #2]
100090c4:	4313      	orrs	r3, r2
100090c6:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
100090c8:	23ae      	movs	r3, #174	; 0xae
100090ca:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
100090cc:	4653      	mov	r3, sl
100090ce:	9300      	str	r3, [sp, #0]
100090d0:	0023      	movs	r3, r4
100090d2:	002a      	movs	r2, r5
100090d4:	4908      	ldr	r1, [pc, #32]	; (100090f8 <sms_pressure_ms58_read_prom+0xf0>)
100090d6:	4809      	ldr	r0, [pc, #36]	; (100090fc <sms_pressure_ms58_read_prom+0xf4>)
100090d8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
100090da:	7863      	ldrb	r3, [r4, #1]
100090dc:	021b      	lsls	r3, r3, #8
100090de:	78a2      	ldrb	r2, [r4, #2]
100090e0:	4313      	orrs	r3, r2
100090e2:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
100090e4:	2000      	movs	r0, #0
100090e6:	b002      	add	sp, #8
100090e8:	bc04      	pop	{r2}
100090ea:	4692      	mov	sl, r2
100090ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090ee:	46c0      	nop			; (mov r8, r8)
100090f0:	10015a50 	.word	0x10015a50
100090f4:	10015a3c 	.word	0x10015a3c
100090f8:	10015b00 	.word	0x10015b00
100090fc:	10015b0c 	.word	0x10015b0c
10009100:	10009331 	.word	0x10009331
10009104:	10015a60 	.word	0x10015a60

10009108 <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009108:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
1000910a:	4b0a      	ldr	r3, [pc, #40]	; (10009134 <sms_pressure_init+0x2c>)
1000910c:	4798      	blx	r3
1000910e:	2800      	cmp	r0, #0
10009110:	d10d      	bne.n	1000912e <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
10009112:	4b09      	ldr	r3, [pc, #36]	; (10009138 <sms_pressure_init+0x30>)
10009114:	2201      	movs	r2, #1
10009116:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009118:	2402      	movs	r4, #2
1000911a:	2125      	movs	r1, #37	; 0x25
1000911c:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
1000911e:	3103      	adds	r1, #3
10009120:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
10009122:	2200      	movs	r2, #0
10009124:	3101      	adds	r1, #1
10009126:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009128:	3101      	adds	r1, #1
1000912a:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
1000912c:	e000      	b.n	10009130 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
1000912e:	2010      	movs	r0, #16
}
10009130:	bd10      	pop	{r4, pc}
10009132:	46c0      	nop			; (mov r8, r8)
10009134:	10009009 	.word	0x10009009
10009138:	10015a60 	.word	0x10015a60

1000913c <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
1000913c:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000913e:	2101      	movs	r1, #1
10009140:	2001      	movs	r0, #1
10009142:	4b10      	ldr	r3, [pc, #64]	; (10009184 <sms_pressure_startup+0x48>)
10009144:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009146:	2101      	movs	r1, #1
10009148:	2325      	movs	r3, #37	; 0x25
1000914a:	4a0f      	ldr	r2, [pc, #60]	; (10009188 <sms_pressure_startup+0x4c>)
1000914c:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
1000914e:	4b0f      	ldr	r3, [pc, #60]	; (1000918c <sms_pressure_startup+0x50>)
10009150:	4798      	blx	r3
    delay_ms(3);
10009152:	2003      	movs	r0, #3
10009154:	4b0e      	ldr	r3, [pc, #56]	; (10009190 <sms_pressure_startup+0x54>)
10009156:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
10009158:	4b0e      	ldr	r3, [pc, #56]	; (10009194 <sms_pressure_startup+0x58>)
1000915a:	4798      	blx	r3
1000915c:	2800      	cmp	r0, #0
1000915e:	d000      	beq.n	10009162 <sms_pressure_startup+0x26>
10009160:	e7fe      	b.n	10009160 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
10009162:	4b09      	ldr	r3, [pc, #36]	; (10009188 <sms_pressure_startup+0x4c>)
10009164:	2102      	movs	r1, #2
10009166:	2225      	movs	r2, #37	; 0x25
10009168:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
1000916a:	2401      	movs	r4, #1
1000916c:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
1000916e:	3a1e      	subs	r2, #30
10009170:	4b09      	ldr	r3, [pc, #36]	; (10009198 <sms_pressure_startup+0x5c>)
10009172:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009174:	3901      	subs	r1, #1
10009176:	2001      	movs	r0, #1
10009178:	4b08      	ldr	r3, [pc, #32]	; (1000919c <sms_pressure_startup+0x60>)
1000917a:	4798      	blx	r3
    
    ulp_ready = true;
1000917c:	4b08      	ldr	r3, [pc, #32]	; (100091a0 <sms_pressure_startup+0x64>)
1000917e:	701c      	strb	r4, [r3, #0]
}
10009180:	bd10      	pop	{r4, pc}
10009182:	46c0      	nop			; (mov r8, r8)
10009184:	10008c71 	.word	0x10008c71
10009188:	10015a60 	.word	0x10015a60
1000918c:	10008fd9 	.word	0x10008fd9
10009190:	10008129 	.word	0x10008129
10009194:	10009109 	.word	0x10009109
10009198:	100159b8 	.word	0x100159b8
1000919c:	100091f5 	.word	0x100091f5
100091a0:	100159b9 	.word	0x100159b9

100091a4 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
100091a4:	b510      	push	{r4, lr}
100091a6:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100091a8:	466b      	mov	r3, sp
100091aa:	1dda      	adds	r2, r3, #7
100091ac:	2300      	movs	r3, #0
100091ae:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
100091b0:	4c09      	ldr	r4, [pc, #36]	; (100091d8 <sms_pressure_define_services+0x34>)
100091b2:	0021      	movs	r1, r4
100091b4:	2001      	movs	r0, #1
100091b6:	4b09      	ldr	r3, [pc, #36]	; (100091dc <sms_pressure_define_services+0x38>)
100091b8:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
100091ba:	0020      	movs	r0, r4
100091bc:	4b08      	ldr	r3, [pc, #32]	; (100091e0 <sms_pressure_define_services+0x3c>)
100091be:	4798      	blx	r3
100091c0:	1e04      	subs	r4, r0, #0
100091c2:	d006      	beq.n	100091d2 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
100091c4:	4807      	ldr	r0, [pc, #28]	; (100091e4 <sms_pressure_define_services+0x40>)
100091c6:	4b08      	ldr	r3, [pc, #32]	; (100091e8 <sms_pressure_define_services+0x44>)
100091c8:	4798      	blx	r3
100091ca:	0021      	movs	r1, r4
100091cc:	4807      	ldr	r0, [pc, #28]	; (100091ec <sms_pressure_define_services+0x48>)
100091ce:	4b08      	ldr	r3, [pc, #32]	; (100091f0 <sms_pressure_define_services+0x4c>)
100091d0:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
100091d2:	b002      	add	sp, #8
100091d4:	bd10      	pop	{r4, pc}
100091d6:	46c0      	nop			; (mov r8, r8)
100091d8:	10015a8c 	.word	0x10015a8c
100091dc:	100088cd 	.word	0x100088cd
100091e0:	100088a9 	.word	0x100088a9
100091e4:	10012d7c 	.word	0x10012d7c
100091e8:	10011e31 	.word	0x10011e31
100091ec:	100130c4 	.word	0x100130c4
100091f0:	10011d11 	.word	0x10011d11

100091f4 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_sensors.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
100091f4:	b510      	push	{r4, lr}
100091f6:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
100091f8:	2800      	cmp	r0, #0
100091fa:	d007      	beq.n	1000920c <sms_sensors_interrupt_toggle+0x18>
        mpu_device.state = MPU_STATE_ON;
100091fc:	2102      	movs	r1, #2
100091fe:	234b      	movs	r3, #75	; 0x4b
10009200:	4a15      	ldr	r2, [pc, #84]	; (10009258 <sms_sensors_interrupt_toggle+0x64>)
10009202:	54d1      	strb	r1, [r2, r3]
        gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009204:	201e      	movs	r0, #30
10009206:	4b15      	ldr	r3, [pc, #84]	; (1000925c <sms_sensors_interrupt_toggle+0x68>)
10009208:	4798      	blx	r3
1000920a:	e006      	b.n	1000921a <sms_sensors_interrupt_toggle+0x26>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
1000920c:	2100      	movs	r1, #0
1000920e:	234b      	movs	r3, #75	; 0x4b
10009210:	4a11      	ldr	r2, [pc, #68]	; (10009258 <sms_sensors_interrupt_toggle+0x64>)
10009212:	54d1      	strb	r1, [r2, r3]
        gpio_disable_callback(SMS_MPU_DRDY_PIN);
10009214:	201e      	movs	r0, #30
10009216:	4b12      	ldr	r3, [pc, #72]	; (10009260 <sms_sensors_interrupt_toggle+0x6c>)
10009218:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
1000921a:	2c00      	cmp	r4, #0
1000921c:	d010      	beq.n	10009240 <sms_sensors_interrupt_toggle+0x4c>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
1000921e:	4b11      	ldr	r3, [pc, #68]	; (10009264 <sms_sensors_interrupt_toggle+0x70>)
10009220:	2103      	movs	r1, #3
10009222:	2225      	movs	r2, #37	; 0x25
10009224:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009226:	3901      	subs	r1, #1
10009228:	3206      	adds	r2, #6
1000922a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000922c:	2100      	movs	r1, #0
1000922e:	480e      	ldr	r0, [pc, #56]	; (10009268 <sms_sensors_interrupt_toggle+0x74>)
10009230:	4b0e      	ldr	r3, [pc, #56]	; (1000926c <sms_sensors_interrupt_toggle+0x78>)
10009232:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009234:	4b0e      	ldr	r3, [pc, #56]	; (10009270 <sms_sensors_interrupt_toggle+0x7c>)
10009236:	4798      	blx	r3
        sensors_active = true;
10009238:	2201      	movs	r2, #1
1000923a:	4b0e      	ldr	r3, [pc, #56]	; (10009274 <sms_sensors_interrupt_toggle+0x80>)
1000923c:	701a      	strb	r2, [r3, #0]
1000923e:	e00a      	b.n	10009256 <sms_sensors_interrupt_toggle+0x62>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
10009240:	2102      	movs	r1, #2
10009242:	2325      	movs	r3, #37	; 0x25
10009244:	4a07      	ldr	r2, [pc, #28]	; (10009264 <sms_sensors_interrupt_toggle+0x70>)
10009246:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009248:	4b0b      	ldr	r3, [pc, #44]	; (10009278 <sms_sensors_interrupt_toggle+0x84>)
1000924a:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000924c:	4b0b      	ldr	r3, [pc, #44]	; (1000927c <sms_sensors_interrupt_toggle+0x88>)
1000924e:	4798      	blx	r3
        sensors_active = false;
10009250:	2200      	movs	r2, #0
10009252:	4b08      	ldr	r3, [pc, #32]	; (10009274 <sms_sensors_interrupt_toggle+0x80>)
10009254:	701a      	strb	r2, [r3, #0]
    }
}
10009256:	bd10      	pop	{r4, pc}
10009258:	1001590c 	.word	0x1001590c
1000925c:	1000a3ad 	.word	0x1000a3ad
10009260:	1000a409 	.word	0x1000a409
10009264:	10015a60 	.word	0x10015a60
10009268:	000003d5 	.word	0x000003d5
1000926c:	10009395 	.word	0x10009395
10009270:	100093c9 	.word	0x100093c9
10009274:	10015aec 	.word	0x10015aec
10009278:	100093bd 	.word	0x100093bd
1000927c:	100093e9 	.word	0x100093e9

10009280 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009280:	b510      	push	{r4, lr}
10009282:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009284:	2800      	cmp	r0, #0
10009286:	d103      	bne.n	10009290 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009288:	2100      	movs	r1, #0
1000928a:	3006      	adds	r0, #6
1000928c:	4b07      	ldr	r3, [pc, #28]	; (100092ac <sms_sensors_switch+0x2c>)
1000928e:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009290:	2c00      	cmp	r4, #0
10009292:	d006      	beq.n	100092a2 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009294:	2101      	movs	r1, #1
10009296:	2325      	movs	r3, #37	; 0x25
10009298:	4a05      	ldr	r2, [pc, #20]	; (100092b0 <sms_sensors_switch+0x30>)
1000929a:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
1000929c:	4b05      	ldr	r3, [pc, #20]	; (100092b4 <sms_sensors_switch+0x34>)
1000929e:	4798      	blx	r3
100092a0:	e003      	b.n	100092aa <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
100092a2:	2100      	movs	r1, #0
100092a4:	2007      	movs	r0, #7
100092a6:	4b01      	ldr	r3, [pc, #4]	; (100092ac <sms_sensors_switch+0x2c>)
100092a8:	4798      	blx	r3
    }
}
100092aa:	bd10      	pop	{r4, pc}
100092ac:	1000a105 	.word	0x1000a105
100092b0:	10015a60 	.word	0x10015a60
100092b4:	1000913d 	.word	0x1000913d

100092b8 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
100092b8:	b530      	push	{r4, r5, lr}
100092ba:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
100092bc:	ac01      	add	r4, sp, #4
100092be:	0020      	movs	r0, r4
100092c0:	4b13      	ldr	r3, [pc, #76]	; (10009310 <sms_spi_master_configure+0x58>)
100092c2:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
100092c4:	2310      	movs	r3, #16
100092c6:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
100092c8:	0021      	movs	r1, r4
100092ca:	4812      	ldr	r0, [pc, #72]	; (10009314 <sms_spi_master_configure+0x5c>)
100092cc:	4b12      	ldr	r3, [pc, #72]	; (10009318 <sms_spi_master_configure+0x60>)
100092ce:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
100092d0:	ac02      	add	r4, sp, #8
100092d2:	0020      	movs	r0, r4
100092d4:	4b11      	ldr	r3, [pc, #68]	; (1000931c <sms_spi_master_configure+0x64>)
100092d6:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
100092d8:	2368      	movs	r3, #104	; 0x68
100092da:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
100092dc:	2300      	movs	r3, #0
100092de:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
100092e0:	3311      	adds	r3, #17
100092e2:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
100092e4:	3b0d      	subs	r3, #13
100092e6:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
100092e8:	2213      	movs	r2, #19
100092ea:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
100092ec:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
100092ee:	3a14      	subs	r2, #20
100092f0:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
100092f2:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
100092f4:	3213      	adds	r2, #19
100092f6:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
100092f8:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
100092fa:	4d09      	ldr	r5, [pc, #36]	; (10009320 <sms_spi_master_configure+0x68>)
100092fc:	0022      	movs	r2, r4
100092fe:	4909      	ldr	r1, [pc, #36]	; (10009324 <sms_spi_master_configure+0x6c>)
10009300:	0028      	movs	r0, r5
10009302:	4b09      	ldr	r3, [pc, #36]	; (10009328 <sms_spi_master_configure+0x70>)
10009304:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009306:	0028      	movs	r0, r5
10009308:	4b08      	ldr	r3, [pc, #32]	; (1000932c <sms_spi_master_configure+0x74>)
1000930a:	4798      	blx	r3
}
1000930c:	b00d      	add	sp, #52	; 0x34
1000930e:	bd30      	pop	{r4, r5, pc}
10009310:	10009849 	.word	0x10009849
10009314:	10015b00 	.word	0x10015b00
10009318:	10009881 	.word	0x10009881
1000931c:	10009855 	.word	0x10009855
10009320:	10015b0c 	.word	0x10015b0c
10009324:	40007000 	.word	0x40007000
10009328:	10009951 	.word	0x10009951
1000932c:	100098c1 	.word	0x100098c1

10009330 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009330:	b5f0      	push	{r4, r5, r6, r7, lr}
10009332:	b083      	sub	sp, #12
10009334:	0004      	movs	r4, r0
10009336:	000d      	movs	r5, r1
10009338:	9200      	str	r2, [sp, #0]
1000933a:	9301      	str	r3, [sp, #4]
1000933c:	ab08      	add	r3, sp, #32
1000933e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009340:	2201      	movs	r2, #1
10009342:	4f08      	ldr	r7, [pc, #32]	; (10009364 <sms_spi_master_transceive+0x34>)
10009344:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009346:	0033      	movs	r3, r6
10009348:	9a01      	ldr	r2, [sp, #4]
1000934a:	9900      	ldr	r1, [sp, #0]
1000934c:	0020      	movs	r0, r4
1000934e:	4e06      	ldr	r6, [pc, #24]	; (10009368 <sms_spi_master_transceive+0x38>)
10009350:	47b0      	blx	r6
10009352:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009354:	2200      	movs	r2, #0
10009356:	0029      	movs	r1, r5
10009358:	0020      	movs	r0, r4
1000935a:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000935c:	0030      	movs	r0, r6
1000935e:	b003      	add	sp, #12
10009360:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009362:	46c0      	nop			; (mov r8, r8)
10009364:	10009b39 	.word	0x10009b39
10009368:	10009ab5 	.word	0x10009ab5

1000936c <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000936c:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
1000936e:	2328      	movs	r3, #40	; 0x28
10009370:	4a06      	ldr	r2, [pc, #24]	; (1000938c <sms_timer_aon_callback+0x20>)
10009372:	5cd3      	ldrb	r3, [r2, r3]
10009374:	2b00      	cmp	r3, #0
10009376:	d008      	beq.n	1000938a <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009378:	2101      	movs	r1, #1
1000937a:	2329      	movs	r3, #41	; 0x29
1000937c:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000937e:	2300      	movs	r3, #0
10009380:	2200      	movs	r2, #0
10009382:	3102      	adds	r1, #2
10009384:	2042      	movs	r0, #66	; 0x42
10009386:	4c02      	ldr	r4, [pc, #8]	; (10009390 <sms_timer_aon_callback+0x24>)
10009388:	47a0      	blx	r4
	}
}
1000938a:	bd10      	pop	{r4, pc}
1000938c:	10015a60 	.word	0x10015a60
10009390:	1000cdc9 	.word	0x1000cdc9

10009394 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009394:	b530      	push	{r4, r5, lr}
10009396:	b083      	sub	sp, #12
10009398:	0004      	movs	r4, r0
1000939a:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000939c:	4668      	mov	r0, sp
1000939e:	4b05      	ldr	r3, [pc, #20]	; (100093b4 <sms_timer_aon_init+0x20>)
100093a0:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
100093a2:	466b      	mov	r3, sp
100093a4:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
100093a6:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
100093a8:	4668      	mov	r0, sp
100093aa:	4b03      	ldr	r3, [pc, #12]	; (100093b8 <sms_timer_aon_init+0x24>)
100093ac:	4798      	blx	r3
}
100093ae:	b003      	add	sp, #12
100093b0:	bd30      	pop	{r4, r5, pc}
100093b2:	46c0      	nop			; (mov r8, r8)
100093b4:	10008171 	.word	0x10008171
100093b8:	100081e5 	.word	0x100081e5

100093bc <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
100093bc:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
100093be:	4b01      	ldr	r3, [pc, #4]	; (100093c4 <sms_timer_aon_disable+0x8>)
100093c0:	4798      	blx	r3
}
100093c2:	bd10      	pop	{r4, pc}
100093c4:	10008181 	.word	0x10008181

100093c8 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
100093c8:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
100093ca:	4804      	ldr	r0, [pc, #16]	; (100093dc <sms_timer_aon_register_callback+0x14>)
100093cc:	4b04      	ldr	r3, [pc, #16]	; (100093e0 <sms_timer_aon_register_callback+0x18>)
100093ce:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100093d0:	2280      	movs	r2, #128	; 0x80
100093d2:	0512      	lsls	r2, r2, #20
100093d4:	4b03      	ldr	r3, [pc, #12]	; (100093e4 <sms_timer_aon_register_callback+0x1c>)
100093d6:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
100093d8:	bd10      	pop	{r4, pc}
100093da:	46c0      	nop			; (mov r8, r8)
100093dc:	1000936d 	.word	0x1000936d
100093e0:	100081cd 	.word	0x100081cd
100093e4:	e000e100 	.word	0xe000e100

100093e8 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
100093e8:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
100093ea:	4b04      	ldr	r3, [pc, #16]	; (100093fc <sms_timer_aon_unregister_callback+0x14>)
100093ec:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100093ee:	2180      	movs	r1, #128	; 0x80
100093f0:	0509      	lsls	r1, r1, #20
100093f2:	2380      	movs	r3, #128	; 0x80
100093f4:	4a02      	ldr	r2, [pc, #8]	; (10009400 <sms_timer_aon_unregister_callback+0x18>)
100093f6:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
100093f8:	bd10      	pop	{r4, pc}
100093fa:	46c0      	nop			; (mov r8, r8)
100093fc:	100081d9 	.word	0x100081d9
10009400:	e000e100 	.word	0xe000e100

10009404 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009404:	b510      	push	{r4, lr}
10009406:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009408:	ac01      	add	r4, sp, #4
1000940a:	0020      	movs	r0, r4
1000940c:	4b08      	ldr	r3, [pc, #32]	; (10009430 <sms_dualtimer_init+0x2c>)
1000940e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009410:	4a08      	ldr	r2, [pc, #32]	; (10009434 <sms_dualtimer_init+0x30>)
10009412:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009414:	2300      	movs	r3, #0
10009416:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
10009418:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000941a:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
1000941c:	0020      	movs	r0, r4
1000941e:	4b06      	ldr	r3, [pc, #24]	; (10009438 <sms_dualtimer_init+0x34>)
10009420:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009422:	2000      	movs	r0, #0
10009424:	4c05      	ldr	r4, [pc, #20]	; (1000943c <sms_dualtimer_init+0x38>)
10009426:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009428:	2001      	movs	r0, #1
1000942a:	47a0      	blx	r4
}
1000942c:	b008      	add	sp, #32
1000942e:	bd10      	pop	{r4, pc}
10009430:	10009b9d 	.word	0x10009b9d
10009434:	018cba80 	.word	0x018cba80
10009438:	10009c31 	.word	0x10009c31
1000943c:	10009c0d 	.word	0x10009c0d

10009440 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009440:	b510      	push	{r4, lr}
10009442:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009444:	4b02      	ldr	r3, [pc, #8]	; (10009450 <sms_dualtimer_register_callback+0x10>)
10009446:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009448:	0020      	movs	r0, r4
1000944a:	4b02      	ldr	r3, [pc, #8]	; (10009454 <sms_dualtimer_register_callback+0x14>)
1000944c:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000944e:	bd10      	pop	{r4, pc}
10009450:	10009d35 	.word	0x10009d35
10009454:	10009c0d 	.word	0x10009c0d

10009458 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009458:	b510      	push	{r4, lr}
1000945a:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000945c:	2801      	cmp	r0, #1
1000945e:	d006      	beq.n	1000946e <sms_dualtimer_start+0x16>
10009460:	2800      	cmp	r0, #0
10009462:	d002      	beq.n	1000946a <sms_dualtimer_start+0x12>
10009464:	2802      	cmp	r0, #2
10009466:	d004      	beq.n	10009472 <sms_dualtimer_start+0x1a>
10009468:	e005      	b.n	10009476 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000946a:	221a      	movs	r2, #26
1000946c:	e004      	b.n	10009478 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000946e:	4a0c      	ldr	r2, [pc, #48]	; (100094a0 <sms_dualtimer_start+0x48>)
        break;
10009470:	e002      	b.n	10009478 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009472:	4a0c      	ldr	r2, [pc, #48]	; (100094a4 <sms_dualtimer_start+0x4c>)
        break;
10009474:	e000      	b.n	10009478 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009476:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009478:	2900      	cmp	r1, #0
1000947a:	d101      	bne.n	10009480 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
1000947c:	21fa      	movs	r1, #250	; 0xfa
1000947e:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009480:	2000      	movs	r0, #0
10009482:	4b09      	ldr	r3, [pc, #36]	; (100094a8 <sms_dualtimer_start+0x50>)
10009484:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009486:	434a      	muls	r2, r1
10009488:	2100      	movs	r1, #0
1000948a:	0020      	movs	r0, r4
1000948c:	4b07      	ldr	r3, [pc, #28]	; (100094ac <sms_dualtimer_start+0x54>)
1000948e:	4798      	blx	r3
    dualtimer_enable(tmr);
10009490:	0020      	movs	r0, r4
10009492:	4b07      	ldr	r3, [pc, #28]	; (100094b0 <sms_dualtimer_start+0x58>)
10009494:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009496:	2280      	movs	r2, #128	; 0x80
10009498:	01d2      	lsls	r2, r2, #7
1000949a:	4b06      	ldr	r3, [pc, #24]	; (100094b4 <sms_dualtimer_start+0x5c>)
1000949c:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000949e:	bd10      	pop	{r4, pc}
100094a0:	00006590 	.word	0x00006590
100094a4:	018cba80 	.word	0x018cba80
100094a8:	100159b9 	.word	0x100159b9
100094ac:	10009bc1 	.word	0x10009bc1
100094b0:	10009be9 	.word	0x10009be9
100094b4:	e000e100 	.word	0xe000e100

100094b8 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
100094b8:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
100094ba:	4b01      	ldr	r3, [pc, #4]	; (100094c0 <sms_dualtimer_stop+0x8>)
100094bc:	4798      	blx	r3
}
100094be:	bd10      	pop	{r4, pc}
100094c0:	10009c0d 	.word	0x10009c0d

100094c4 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
100094c4:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
100094c6:	2201      	movs	r2, #1
100094c8:	4b04      	ldr	r3, [pc, #16]	; (100094dc <sms_dualtimer1_cb+0x18>)
100094ca:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
100094cc:	2300      	movs	r3, #0
100094ce:	2200      	movs	r2, #0
100094d0:	2101      	movs	r1, #1
100094d2:	2040      	movs	r0, #64	; 0x40
100094d4:	4c02      	ldr	r4, [pc, #8]	; (100094e0 <sms_dualtimer1_cb+0x1c>)
100094d6:	47a0      	blx	r4
}
100094d8:	bd10      	pop	{r4, pc}
100094da:	46c0      	nop			; (mov r8, r8)
100094dc:	10015a4c 	.word	0x10015a4c
100094e0:	1000cdc9 	.word	0x1000cdc9

100094e4 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
100094e4:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
100094e6:	2201      	movs	r2, #1
100094e8:	4b04      	ldr	r3, [pc, #16]	; (100094fc <sms_dualtimer2_cb+0x18>)
100094ea:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
100094ec:	2300      	movs	r3, #0
100094ee:	2200      	movs	r2, #0
100094f0:	2101      	movs	r1, #1
100094f2:	2041      	movs	r0, #65	; 0x41
100094f4:	4c02      	ldr	r4, [pc, #8]	; (10009500 <sms_dualtimer2_cb+0x1c>)
100094f6:	47a0      	blx	r4
}
100094f8:	bd10      	pop	{r4, pc}
100094fa:	46c0      	nop			; (mov r8, r8)
100094fc:	10015af8 	.word	0x10015af8
10009500:	1000cdc9 	.word	0x1000cdc9

10009504 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
10009504:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
10009506:	4b79      	ldr	r3, [pc, #484]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
10009508:	781b      	ldrb	r3, [r3, #0]
1000950a:	b2db      	uxtb	r3, r3
1000950c:	2b01      	cmp	r3, #1
1000950e:	d003      	beq.n	10009518 <sms_dualtimer1_fn+0x14>
10009510:	2b02      	cmp	r3, #2
10009512:	d100      	bne.n	10009516 <sms_dualtimer1_fn+0x12>
10009514:	e0ae      	b.n	10009674 <sms_dualtimer1_fn+0x170>
10009516:	e0e1      	b.n	100096dc <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
10009518:	2200      	movs	r2, #0
1000951a:	4b74      	ldr	r3, [pc, #464]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
1000951c:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000951e:	4c74      	ldr	r4, [pc, #464]	; (100096f0 <sms_dualtimer1_fn+0x1ec>)
10009520:	7b63      	ldrb	r3, [r4, #13]
10009522:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
10009524:	4b73      	ldr	r3, [pc, #460]	; (100096f4 <sms_dualtimer1_fn+0x1f0>)
10009526:	4798      	blx	r3
10009528:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000952a:	4873      	ldr	r0, [pc, #460]	; (100096f8 <sms_dualtimer1_fn+0x1f4>)
1000952c:	4b73      	ldr	r3, [pc, #460]	; (100096fc <sms_dualtimer1_fn+0x1f8>)
1000952e:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
10009530:	7b23      	ldrb	r3, [r4, #12]
10009532:	2b01      	cmp	r3, #1
10009534:	d002      	beq.n	1000953c <sms_dualtimer1_fn+0x38>
10009536:	2b02      	cmp	r3, #2
10009538:	d04c      	beq.n	100095d4 <sms_dualtimer1_fn+0xd0>
1000953a:	e093      	b.n	10009664 <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000953c:	4b6c      	ldr	r3, [pc, #432]	; (100096f0 <sms_dualtimer1_fn+0x1ec>)
1000953e:	7b5b      	ldrb	r3, [r3, #13]
10009540:	2b01      	cmp	r3, #1
10009542:	d002      	beq.n	1000954a <sms_dualtimer1_fn+0x46>
10009544:	2b02      	cmp	r3, #2
10009546:	d023      	beq.n	10009590 <sms_dualtimer1_fn+0x8c>
10009548:	e03b      	b.n	100095c2 <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000954a:	4b6d      	ldr	r3, [pc, #436]	; (10009700 <sms_dualtimer1_fn+0x1fc>)
1000954c:	781b      	ldrb	r3, [r3, #0]
1000954e:	2b00      	cmp	r3, #0
10009550:	d115      	bne.n	1000957e <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
10009552:	4a6c      	ldr	r2, [pc, #432]	; (10009704 <sms_dualtimer1_fn+0x200>)
10009554:	7813      	ldrb	r3, [r2, #0]
10009556:	3301      	adds	r3, #1
10009558:	b2db      	uxtb	r3, r3
1000955a:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000955c:	2b0f      	cmp	r3, #15
1000955e:	d905      	bls.n	1000956c <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
10009560:	2200      	movs	r2, #0
10009562:	4b62      	ldr	r3, [pc, #392]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
10009564:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
10009566:	4b68      	ldr	r3, [pc, #416]	; (10009708 <sms_dualtimer1_fn+0x204>)
10009568:	4798      	blx	r3
1000956a:	e0be      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000956c:	2201      	movs	r2, #1
1000956e:	4b5f      	ldr	r3, [pc, #380]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
10009570:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10009572:	2200      	movs	r2, #0
10009574:	21fa      	movs	r1, #250	; 0xfa
10009576:	2001      	movs	r0, #1
10009578:	4b64      	ldr	r3, [pc, #400]	; (1000970c <sms_dualtimer1_fn+0x208>)
1000957a:	4798      	blx	r3
1000957c:	e0b5      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000957e:	4b64      	ldr	r3, [pc, #400]	; (10009710 <sms_dualtimer1_fn+0x20c>)
10009580:	781b      	ldrb	r3, [r3, #0]
10009582:	2b00      	cmp	r3, #0
10009584:	d000      	beq.n	10009588 <sms_dualtimer1_fn+0x84>
10009586:	e0b0      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
10009588:	2201      	movs	r2, #1
1000958a:	4b62      	ldr	r3, [pc, #392]	; (10009714 <sms_dualtimer1_fn+0x210>)
1000958c:	701a      	strb	r2, [r3, #0]
1000958e:	e0ac      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10009590:	4b5b      	ldr	r3, [pc, #364]	; (10009700 <sms_dualtimer1_fn+0x1fc>)
10009592:	781b      	ldrb	r3, [r3, #0]
10009594:	2b00      	cmp	r3, #0
10009596:	d10b      	bne.n	100095b0 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
10009598:	2200      	movs	r2, #0
1000959a:	4b5a      	ldr	r3, [pc, #360]	; (10009704 <sms_dualtimer1_fn+0x200>)
1000959c:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000959e:	3201      	adds	r2, #1
100095a0:	4b52      	ldr	r3, [pc, #328]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
100095a2:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
100095a4:	2200      	movs	r2, #0
100095a6:	2164      	movs	r1, #100	; 0x64
100095a8:	2001      	movs	r0, #1
100095aa:	4b58      	ldr	r3, [pc, #352]	; (1000970c <sms_dualtimer1_fn+0x208>)
100095ac:	4798      	blx	r3
100095ae:	e09c      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
100095b0:	4b57      	ldr	r3, [pc, #348]	; (10009710 <sms_dualtimer1_fn+0x20c>)
100095b2:	781b      	ldrb	r3, [r3, #0]
100095b4:	2b00      	cmp	r3, #0
100095b6:	d000      	beq.n	100095ba <sms_dualtimer1_fn+0xb6>
100095b8:	e097      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
100095ba:	2201      	movs	r2, #1
100095bc:	4b55      	ldr	r3, [pc, #340]	; (10009714 <sms_dualtimer1_fn+0x210>)
100095be:	701a      	strb	r2, [r3, #0]
100095c0:	e093      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
100095c2:	4b53      	ldr	r3, [pc, #332]	; (10009710 <sms_dualtimer1_fn+0x20c>)
100095c4:	781b      	ldrb	r3, [r3, #0]
100095c6:	2b00      	cmp	r3, #0
100095c8:	d000      	beq.n	100095cc <sms_dualtimer1_fn+0xc8>
100095ca:	e08e      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
100095cc:	2201      	movs	r2, #1
100095ce:	4b51      	ldr	r3, [pc, #324]	; (10009714 <sms_dualtimer1_fn+0x210>)
100095d0:	701a      	strb	r2, [r3, #0]
100095d2:	e08a      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
100095d4:	4b46      	ldr	r3, [pc, #280]	; (100096f0 <sms_dualtimer1_fn+0x1ec>)
100095d6:	7b5b      	ldrb	r3, [r3, #13]
100095d8:	2b01      	cmp	r3, #1
100095da:	d023      	beq.n	10009624 <sms_dualtimer1_fn+0x120>
100095dc:	2b02      	cmp	r3, #2
100095de:	d139      	bne.n	10009654 <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
100095e0:	4b47      	ldr	r3, [pc, #284]	; (10009700 <sms_dualtimer1_fn+0x1fc>)
100095e2:	781b      	ldrb	r3, [r3, #0]
100095e4:	2b00      	cmp	r3, #0
100095e6:	d115      	bne.n	10009614 <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
100095e8:	4a46      	ldr	r2, [pc, #280]	; (10009704 <sms_dualtimer1_fn+0x200>)
100095ea:	7813      	ldrb	r3, [r2, #0]
100095ec:	3301      	adds	r3, #1
100095ee:	b2db      	uxtb	r3, r3
100095f0:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
100095f2:	2b0f      	cmp	r3, #15
100095f4:	d905      	bls.n	10009602 <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
100095f6:	2200      	movs	r2, #0
100095f8:	4b3c      	ldr	r3, [pc, #240]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
100095fa:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
100095fc:	4b42      	ldr	r3, [pc, #264]	; (10009708 <sms_dualtimer1_fn+0x204>)
100095fe:	4798      	blx	r3
10009600:	e073      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
10009602:	2201      	movs	r2, #1
10009604:	4b39      	ldr	r3, [pc, #228]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
10009606:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10009608:	2200      	movs	r2, #0
1000960a:	21fa      	movs	r1, #250	; 0xfa
1000960c:	2001      	movs	r0, #1
1000960e:	4b3f      	ldr	r3, [pc, #252]	; (1000970c <sms_dualtimer1_fn+0x208>)
10009610:	4798      	blx	r3
10009612:	e06a      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
10009614:	4b3e      	ldr	r3, [pc, #248]	; (10009710 <sms_dualtimer1_fn+0x20c>)
10009616:	781b      	ldrb	r3, [r3, #0]
10009618:	2b00      	cmp	r3, #0
1000961a:	d166      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000961c:	2201      	movs	r2, #1
1000961e:	4b3d      	ldr	r3, [pc, #244]	; (10009714 <sms_dualtimer1_fn+0x210>)
10009620:	701a      	strb	r2, [r3, #0]
10009622:	e062      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10009624:	4b36      	ldr	r3, [pc, #216]	; (10009700 <sms_dualtimer1_fn+0x1fc>)
10009626:	781b      	ldrb	r3, [r3, #0]
10009628:	2b00      	cmp	r3, #0
1000962a:	d10b      	bne.n	10009644 <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000962c:	2200      	movs	r2, #0
1000962e:	4b35      	ldr	r3, [pc, #212]	; (10009704 <sms_dualtimer1_fn+0x200>)
10009630:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
10009632:	3201      	adds	r2, #1
10009634:	4b2d      	ldr	r3, [pc, #180]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
10009636:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
10009638:	2200      	movs	r2, #0
1000963a:	2164      	movs	r1, #100	; 0x64
1000963c:	2001      	movs	r0, #1
1000963e:	4b33      	ldr	r3, [pc, #204]	; (1000970c <sms_dualtimer1_fn+0x208>)
10009640:	4798      	blx	r3
10009642:	e052      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
10009644:	4b32      	ldr	r3, [pc, #200]	; (10009710 <sms_dualtimer1_fn+0x20c>)
10009646:	781b      	ldrb	r3, [r3, #0]
10009648:	2b00      	cmp	r3, #0
1000964a:	d14e      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000964c:	2201      	movs	r2, #1
1000964e:	4b31      	ldr	r3, [pc, #196]	; (10009714 <sms_dualtimer1_fn+0x210>)
10009650:	701a      	strb	r2, [r3, #0]
10009652:	e04a      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
10009654:	4b2e      	ldr	r3, [pc, #184]	; (10009710 <sms_dualtimer1_fn+0x20c>)
10009656:	781b      	ldrb	r3, [r3, #0]
10009658:	2b00      	cmp	r3, #0
1000965a:	d146      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000965c:	2201      	movs	r2, #1
1000965e:	4b2d      	ldr	r3, [pc, #180]	; (10009714 <sms_dualtimer1_fn+0x210>)
10009660:	701a      	strb	r2, [r3, #0]
10009662:	e042      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
10009664:	4b2a      	ldr	r3, [pc, #168]	; (10009710 <sms_dualtimer1_fn+0x20c>)
10009666:	781b      	ldrb	r3, [r3, #0]
10009668:	2b00      	cmp	r3, #0
1000966a:	d13e      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000966c:	2201      	movs	r2, #1
1000966e:	4b29      	ldr	r3, [pc, #164]	; (10009714 <sms_dualtimer1_fn+0x210>)
10009670:	701a      	strb	r2, [r3, #0]
10009672:	e03a      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
10009674:	4c1e      	ldr	r4, [pc, #120]	; (100096f0 <sms_dualtimer1_fn+0x1ec>)
10009676:	7b63      	ldrb	r3, [r4, #13]
10009678:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000967a:	4b1e      	ldr	r3, [pc, #120]	; (100096f4 <sms_dualtimer1_fn+0x1f0>)
1000967c:	4798      	blx	r3
1000967e:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
10009680:	481d      	ldr	r0, [pc, #116]	; (100096f8 <sms_dualtimer1_fn+0x1f4>)
10009682:	4b1e      	ldr	r3, [pc, #120]	; (100096fc <sms_dualtimer1_fn+0x1f8>)
10009684:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
10009686:	89a2      	ldrh	r2, [r4, #12]
10009688:	4b23      	ldr	r3, [pc, #140]	; (10009718 <sms_dualtimer1_fn+0x214>)
1000968a:	429a      	cmp	r2, r3
1000968c:	d112      	bne.n	100096b4 <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000968e:	4a1d      	ldr	r2, [pc, #116]	; (10009704 <sms_dualtimer1_fn+0x200>)
10009690:	7813      	ldrb	r3, [r2, #0]
10009692:	3301      	adds	r3, #1
10009694:	b2db      	uxtb	r3, r3
10009696:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
10009698:	2b09      	cmp	r3, #9
1000969a:	d902      	bls.n	100096a2 <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000969c:	4b1f      	ldr	r3, [pc, #124]	; (1000971c <sms_dualtimer1_fn+0x218>)
1000969e:	4798      	blx	r3
100096a0:	e023      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
100096a2:	2202      	movs	r2, #2
100096a4:	4b11      	ldr	r3, [pc, #68]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
100096a6:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
100096a8:	2200      	movs	r2, #0
100096aa:	21fa      	movs	r1, #250	; 0xfa
100096ac:	2001      	movs	r0, #1
100096ae:	4b17      	ldr	r3, [pc, #92]	; (1000970c <sms_dualtimer1_fn+0x208>)
100096b0:	4798      	blx	r3
100096b2:	e01a      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
100096b4:	232b      	movs	r3, #43	; 0x2b
100096b6:	4a1a      	ldr	r2, [pc, #104]	; (10009720 <sms_dualtimer1_fn+0x21c>)
100096b8:	5cd3      	ldrb	r3, [r2, r3]
100096ba:	2b01      	cmp	r3, #1
100096bc:	d103      	bne.n	100096c6 <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
100096be:	2101      	movs	r1, #1
100096c0:	2000      	movs	r0, #0
100096c2:	4b18      	ldr	r3, [pc, #96]	; (10009724 <sms_dualtimer1_fn+0x220>)
100096c4:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
100096c6:	2200      	movs	r2, #0
100096c8:	4b08      	ldr	r3, [pc, #32]	; (100096ec <sms_dualtimer1_fn+0x1e8>)
100096ca:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
100096cc:	4b10      	ldr	r3, [pc, #64]	; (10009710 <sms_dualtimer1_fn+0x20c>)
100096ce:	781b      	ldrb	r3, [r3, #0]
100096d0:	2b00      	cmp	r3, #0
100096d2:	d10a      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
100096d4:	3201      	adds	r2, #1
100096d6:	4b0f      	ldr	r3, [pc, #60]	; (10009714 <sms_dualtimer1_fn+0x210>)
100096d8:	701a      	strb	r2, [r3, #0]
100096da:	e006      	b.n	100096ea <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
100096dc:	4b0c      	ldr	r3, [pc, #48]	; (10009710 <sms_dualtimer1_fn+0x20c>)
100096de:	781b      	ldrb	r3, [r3, #0]
100096e0:	2b00      	cmp	r3, #0
100096e2:	d102      	bne.n	100096ea <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
100096e4:	2201      	movs	r2, #1
100096e6:	4b0b      	ldr	r3, [pc, #44]	; (10009714 <sms_dualtimer1_fn+0x210>)
100096e8:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
100096ea:	bd10      	pop	{r4, pc}
100096ec:	10015908 	.word	0x10015908
100096f0:	100159d8 	.word	0x100159d8
100096f4:	10008aed 	.word	0x10008aed
100096f8:	1001310c 	.word	0x1001310c
100096fc:	10008d85 	.word	0x10008d85
10009700:	100159bc 	.word	0x100159bc
10009704:	10015b42 	.word	0x10015b42
10009708:	1000844d 	.word	0x1000844d
1000970c:	10009459 	.word	0x10009459
10009710:	10015afb 	.word	0x10015afb
10009714:	100159b9 	.word	0x100159b9
10009718:	00000303 	.word	0x00000303
1000971c:	10008465 	.word	0x10008465
10009720:	10015a60 	.word	0x10015a60
10009724:	100091f5 	.word	0x100091f5

10009728 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
10009728:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000972a:	483a      	ldr	r0, [pc, #232]	; (10009814 <sms_dualtimer2_fn+0xec>)
1000972c:	4b3a      	ldr	r3, [pc, #232]	; (10009818 <sms_dualtimer2_fn+0xf0>)
1000972e:	4798      	blx	r3
    switch(timer2_current_mode) {
10009730:	4b3a      	ldr	r3, [pc, #232]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009732:	781b      	ldrb	r3, [r3, #0]
10009734:	b2db      	uxtb	r3, r3
10009736:	2b02      	cmp	r3, #2
10009738:	d028      	beq.n	1000978c <sms_dualtimer2_fn+0x64>
1000973a:	2b03      	cmp	r3, #3
1000973c:	d047      	beq.n	100097ce <sms_dualtimer2_fn+0xa6>
1000973e:	2b01      	cmp	r3, #1
10009740:	d166      	bne.n	10009810 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
10009742:	2200      	movs	r2, #0
10009744:	4b35      	ldr	r3, [pc, #212]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009746:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
10009748:	4b35      	ldr	r3, [pc, #212]	; (10009820 <sms_dualtimer2_fn+0xf8>)
1000974a:	781b      	ldrb	r3, [r3, #0]
1000974c:	2b22      	cmp	r3, #34	; 0x22
1000974e:	d107      	bne.n	10009760 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
10009750:	4b34      	ldr	r3, [pc, #208]	; (10009824 <sms_dualtimer2_fn+0xfc>)
10009752:	781b      	ldrb	r3, [r3, #0]
10009754:	2b00      	cmp	r3, #0
10009756:	d15b      	bne.n	10009810 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
10009758:	3201      	adds	r2, #1
1000975a:	4b33      	ldr	r3, [pc, #204]	; (10009828 <sms_dualtimer2_fn+0x100>)
1000975c:	701a      	strb	r2, [r3, #0]
1000975e:	e057      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
10009760:	4a32      	ldr	r2, [pc, #200]	; (1000982c <sms_dualtimer2_fn+0x104>)
10009762:	7813      	ldrb	r3, [r2, #0]
10009764:	3301      	adds	r3, #1
10009766:	b2db      	uxtb	r3, r3
10009768:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000976a:	2b00      	cmp	r3, #0
1000976c:	d006      	beq.n	1000977c <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000976e:	2200      	movs	r2, #0
10009770:	4b2a      	ldr	r3, [pc, #168]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009772:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
10009774:	3222      	adds	r2, #34	; 0x22
10009776:	4b2a      	ldr	r3, [pc, #168]	; (10009820 <sms_dualtimer2_fn+0xf8>)
10009778:	701a      	strb	r2, [r3, #0]
1000977a:	e049      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000977c:	2201      	movs	r2, #1
1000977e:	4b27      	ldr	r3, [pc, #156]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009780:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
10009782:	2164      	movs	r1, #100	; 0x64
10009784:	2001      	movs	r0, #1
10009786:	4b2a      	ldr	r3, [pc, #168]	; (10009830 <sms_dualtimer2_fn+0x108>)
10009788:	4798      	blx	r3
1000978a:	e041      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000978c:	2200      	movs	r2, #0
1000978e:	4b23      	ldr	r3, [pc, #140]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009790:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
10009792:	4a28      	ldr	r2, [pc, #160]	; (10009834 <sms_dualtimer2_fn+0x10c>)
10009794:	7813      	ldrb	r3, [r2, #0]
10009796:	3301      	adds	r3, #1
10009798:	b2db      	uxtb	r3, r3
1000979a:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000979c:	7813      	ldrb	r3, [r2, #0]
1000979e:	b2db      	uxtb	r3, r3
100097a0:	2b07      	cmp	r3, #7
100097a2:	d908      	bls.n	100097b6 <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
100097a4:	2016      	movs	r0, #22
100097a6:	4b24      	ldr	r3, [pc, #144]	; (10009838 <sms_dualtimer2_fn+0x110>)
100097a8:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
100097aa:	4b24      	ldr	r3, [pc, #144]	; (1000983c <sms_dualtimer2_fn+0x114>)
100097ac:	4798      	blx	r3
            ulp_ready = true;
100097ae:	2201      	movs	r2, #1
100097b0:	4b1d      	ldr	r3, [pc, #116]	; (10009828 <sms_dualtimer2_fn+0x100>)
100097b2:	701a      	strb	r2, [r3, #0]
100097b4:	e02c      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
100097b6:	2016      	movs	r0, #22
100097b8:	4b21      	ldr	r3, [pc, #132]	; (10009840 <sms_dualtimer2_fn+0x118>)
100097ba:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
100097bc:	2202      	movs	r2, #2
100097be:	4b17      	ldr	r3, [pc, #92]	; (1000981c <sms_dualtimer2_fn+0xf4>)
100097c0:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
100097c2:	3a01      	subs	r2, #1
100097c4:	2164      	movs	r1, #100	; 0x64
100097c6:	2001      	movs	r0, #1
100097c8:	4b19      	ldr	r3, [pc, #100]	; (10009830 <sms_dualtimer2_fn+0x108>)
100097ca:	4798      	blx	r3
100097cc:	e020      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
100097ce:	2200      	movs	r2, #0
100097d0:	4b12      	ldr	r3, [pc, #72]	; (1000981c <sms_dualtimer2_fn+0xf4>)
100097d2:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
100097d4:	4a17      	ldr	r2, [pc, #92]	; (10009834 <sms_dualtimer2_fn+0x10c>)
100097d6:	7813      	ldrb	r3, [r2, #0]
100097d8:	3301      	adds	r3, #1
100097da:	b2db      	uxtb	r3, r3
100097dc:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
100097de:	7813      	ldrb	r3, [r2, #0]
100097e0:	b2db      	uxtb	r3, r3
100097e2:	2b03      	cmp	r3, #3
100097e4:	d908      	bls.n	100097f8 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
100097e6:	2016      	movs	r0, #22
100097e8:	4b13      	ldr	r3, [pc, #76]	; (10009838 <sms_dualtimer2_fn+0x110>)
100097ea:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
100097ec:	4b15      	ldr	r3, [pc, #84]	; (10009844 <sms_dualtimer2_fn+0x11c>)
100097ee:	4798      	blx	r3
            ulp_ready = true;
100097f0:	2201      	movs	r2, #1
100097f2:	4b0d      	ldr	r3, [pc, #52]	; (10009828 <sms_dualtimer2_fn+0x100>)
100097f4:	701a      	strb	r2, [r3, #0]
100097f6:	e00b      	b.n	10009810 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
100097f8:	2016      	movs	r0, #22
100097fa:	4b11      	ldr	r3, [pc, #68]	; (10009840 <sms_dualtimer2_fn+0x118>)
100097fc:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100097fe:	2203      	movs	r2, #3
10009800:	4b06      	ldr	r3, [pc, #24]	; (1000981c <sms_dualtimer2_fn+0xf4>)
10009802:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
10009804:	3a02      	subs	r2, #2
10009806:	21c8      	movs	r1, #200	; 0xc8
10009808:	0049      	lsls	r1, r1, #1
1000980a:	2001      	movs	r0, #1
1000980c:	4b08      	ldr	r3, [pc, #32]	; (10009830 <sms_dualtimer2_fn+0x108>)
1000980e:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
10009810:	bd10      	pop	{r4, pc}
10009812:	46c0      	nop			; (mov r8, r8)
10009814:	10013120 	.word	0x10013120
10009818:	10008d85 	.word	0x10008d85
1000981c:	10015afb 	.word	0x10015afb
10009820:	100159bc 	.word	0x100159bc
10009824:	10015908 	.word	0x10015908
10009828:	100159b9 	.word	0x100159b9
1000982c:	10015aed 	.word	0x10015aed
10009830:	10009459 	.word	0x10009459
10009834:	10015b48 	.word	0x10015b48
10009838:	10008f0d 	.word	0x10008f0d
1000983c:	100085d5 	.word	0x100085d5
10009840:	10008f4d 	.word	0x10008f4d
10009844:	1000d2a5 	.word	0x1000d2a5

10009848 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
10009848:	230c      	movs	r3, #12
1000984a:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000984c:	2300      	movs	r3, #0
1000984e:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
10009850:	7083      	strb	r3, [r0, #2]
}
10009852:	4770      	bx	lr

10009854 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
10009854:	2301      	movs	r3, #1
10009856:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
10009858:	2300      	movs	r3, #0
1000985a:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000985c:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000985e:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
10009860:	3381      	adds	r3, #129	; 0x81
10009862:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
10009864:	3b77      	subs	r3, #119	; 0x77
10009866:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
10009868:	3301      	adds	r3, #1
1000986a:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000986c:	3301      	adds	r3, #1
1000986e:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
10009870:	3301      	adds	r3, #1
10009872:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
10009874:	3b0b      	subs	r3, #11
10009876:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
10009878:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000987a:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000987c:	6243      	str	r3, [r0, #36]	; 0x24
};
1000987e:	4770      	bx	lr

10009880 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
10009880:	b530      	push	{r4, r5, lr}
10009882:	b083      	sub	sp, #12
10009884:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
10009886:	780b      	ldrb	r3, [r1, #0]
10009888:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000988a:	784b      	ldrb	r3, [r1, #1]
1000988c:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000988e:	788b      	ldrb	r3, [r1, #2]
10009890:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009892:	ad01      	add	r5, sp, #4
10009894:	0028      	movs	r0, r5
10009896:	4b07      	ldr	r3, [pc, #28]	; (100098b4 <spi_attach_slave+0x34>)
10009898:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000989a:	2301      	movs	r3, #1
1000989c:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000989e:	7820      	ldrb	r0, [r4, #0]
100098a0:	0029      	movs	r1, r5
100098a2:	4b05      	ldr	r3, [pc, #20]	; (100098b8 <spi_attach_slave+0x38>)
100098a4:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
100098a6:	7820      	ldrb	r0, [r4, #0]
100098a8:	2101      	movs	r1, #1
100098aa:	4b04      	ldr	r3, [pc, #16]	; (100098bc <spi_attach_slave+0x3c>)
100098ac:	4798      	blx	r3
}
100098ae:	b003      	add	sp, #12
100098b0:	bd30      	pop	{r4, r5, pc}
100098b2:	46c0      	nop			; (mov r8, r8)
100098b4:	10009e9d 	.word	0x10009e9d
100098b8:	10009ead 	.word	0x10009ead
100098bc:	1000a105 	.word	0x1000a105

100098c0 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
100098c0:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
100098c2:	2201      	movs	r2, #1
100098c4:	761a      	strb	r2, [r3, #24]
}
100098c6:	4770      	bx	lr

100098c8 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
100098c8:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
100098ca:	2300      	movs	r3, #0
100098cc:	6802      	ldr	r2, [r0, #0]
100098ce:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
100098d0:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
100098d2:	4a0d      	ldr	r2, [pc, #52]	; (10009908 <spi_disable+0x40>)
100098d4:	4293      	cmp	r3, r2
100098d6:	d109      	bne.n	100098ec <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
100098d8:	2041      	movs	r0, #65	; 0x41
100098da:	4c0c      	ldr	r4, [pc, #48]	; (1000990c <spi_disable+0x44>)
100098dc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
100098de:	2026      	movs	r0, #38	; 0x26
100098e0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
100098e2:	2038      	movs	r0, #56	; 0x38
100098e4:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
100098e6:	2001      	movs	r0, #1
100098e8:	47a0      	blx	r4
100098ea:	e00b      	b.n	10009904 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
100098ec:	4a08      	ldr	r2, [pc, #32]	; (10009910 <spi_disable+0x48>)
100098ee:	4293      	cmp	r3, r2
100098f0:	d108      	bne.n	10009904 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
100098f2:	2042      	movs	r0, #66	; 0x42
100098f4:	4c05      	ldr	r4, [pc, #20]	; (1000990c <spi_disable+0x44>)
100098f6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
100098f8:	2027      	movs	r0, #39	; 0x27
100098fa:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
100098fc:	2039      	movs	r0, #57	; 0x39
100098fe:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009900:	2002      	movs	r0, #2
10009902:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10009904:	bd10      	pop	{r4, pc}
10009906:	46c0      	nop			; (mov r8, r8)
10009908:	40006000 	.word	0x40006000
1000990c:	1000a89d 	.word	0x1000a89d
10009910:	40007000 	.word	0x40007000

10009914 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10009914:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10009916:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10009918:	4b09      	ldr	r3, [pc, #36]	; (10009940 <spi_reset+0x2c>)
1000991a:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000991c:	4b09      	ldr	r3, [pc, #36]	; (10009944 <spi_reset+0x30>)
1000991e:	429c      	cmp	r4, r3
10009920:	d105      	bne.n	1000992e <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10009922:	2001      	movs	r0, #1
10009924:	4c08      	ldr	r4, [pc, #32]	; (10009948 <spi_reset+0x34>)
10009926:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10009928:	2038      	movs	r0, #56	; 0x38
1000992a:	47a0      	blx	r4
1000992c:	e007      	b.n	1000993e <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000992e:	4b07      	ldr	r3, [pc, #28]	; (1000994c <spi_reset+0x38>)
10009930:	429c      	cmp	r4, r3
10009932:	d104      	bne.n	1000993e <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10009934:	2002      	movs	r0, #2
10009936:	4c04      	ldr	r4, [pc, #16]	; (10009948 <spi_reset+0x34>)
10009938:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000993a:	2039      	movs	r0, #57	; 0x39
1000993c:	47a0      	blx	r4
	}
}
1000993e:	bd10      	pop	{r4, pc}
10009940:	100098c9 	.word	0x100098c9
10009944:	40006000 	.word	0x40006000
10009948:	1000ac09 	.word	0x1000ac09
1000994c:	40007000 	.word	0x40007000

10009950 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10009950:	b5f0      	push	{r4, r5, r6, r7, lr}
10009952:	465f      	mov	r7, fp
10009954:	4646      	mov	r6, r8
10009956:	b4c0      	push	{r6, r7}
10009958:	b083      	sub	sp, #12
1000995a:	0006      	movs	r6, r0
1000995c:	4688      	mov	r8, r1
1000995e:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10009960:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10009962:	7e0b      	ldrb	r3, [r1, #24]
10009964:	07db      	lsls	r3, r3, #31
10009966:	d501      	bpl.n	1000996c <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009968:	2300      	movs	r3, #0
1000996a:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000996c:	0030      	movs	r0, r6
1000996e:	4b4a      	ldr	r3, [pc, #296]	; (10009a98 <spi_init+0x148>)
10009970:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009972:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10009974:	4a49      	ldr	r2, [pc, #292]	; (10009a9c <spi_init+0x14c>)
10009976:	4293      	cmp	r3, r2
10009978:	d109      	bne.n	1000998e <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000997a:	2041      	movs	r0, #65	; 0x41
1000997c:	4c48      	ldr	r4, [pc, #288]	; (10009aa0 <spi_init+0x150>)
1000997e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10009980:	2026      	movs	r0, #38	; 0x26
10009982:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10009984:	2038      	movs	r0, #56	; 0x38
10009986:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10009988:	2001      	movs	r0, #1
1000998a:	47a0      	blx	r4
1000998c:	e00b      	b.n	100099a6 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000998e:	4a45      	ldr	r2, [pc, #276]	; (10009aa4 <spi_init+0x154>)
10009990:	4293      	cmp	r3, r2
10009992:	d108      	bne.n	100099a6 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10009994:	2042      	movs	r0, #66	; 0x42
10009996:	4c42      	ldr	r4, [pc, #264]	; (10009aa0 <spi_init+0x150>)
10009998:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000999a:	2027      	movs	r0, #39	; 0x27
1000999c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000999e:	2039      	movs	r0, #57	; 0x39
100099a0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
100099a2:	2002      	movs	r0, #2
100099a4:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100099a6:	a801      	add	r0, sp, #4
100099a8:	4b3f      	ldr	r3, [pc, #252]	; (10009aa8 <spi_init+0x158>)
100099aa:	4798      	blx	r3
100099ac:	002c      	movs	r4, r5
100099ae:	3408      	adds	r4, #8
100099b0:	2318      	movs	r3, #24
100099b2:	469b      	mov	fp, r3
100099b4:	44ab      	add	fp, r5
100099b6:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
100099b8:	6820      	ldr	r0, [r4, #0]
100099ba:	1c43      	adds	r3, r0, #1
100099bc:	d011      	beq.n	100099e2 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
100099be:	782b      	ldrb	r3, [r5, #0]
100099c0:	2b01      	cmp	r3, #1
100099c2:	d102      	bne.n	100099ca <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100099c4:	466a      	mov	r2, sp
100099c6:	7113      	strb	r3, [r2, #4]
100099c8:	e003      	b.n	100099d2 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
100099ca:	2b00      	cmp	r3, #0
100099cc:	d101      	bne.n	100099d2 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
100099ce:	466a      	mov	r2, sp
100099d0:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
100099d2:	b2c0      	uxtb	r0, r0
100099d4:	a901      	add	r1, sp, #4
100099d6:	4b35      	ldr	r3, [pc, #212]	; (10009aac <spi_init+0x15c>)
100099d8:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
100099da:	8a39      	ldrh	r1, [r7, #16]
100099dc:	7838      	ldrb	r0, [r7, #0]
100099de:	4b34      	ldr	r3, [pc, #208]	; (10009ab0 <spi_init+0x160>)
100099e0:	4798      	blx	r3
100099e2:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
100099e4:	455c      	cmp	r4, fp
100099e6:	d1e6      	bne.n	100099b6 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
100099e8:	78eb      	ldrb	r3, [r5, #3]
100099ea:	4642      	mov	r2, r8
100099ec:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
100099ee:	782b      	ldrb	r3, [r5, #0]
100099f0:	2b01      	cmp	r3, #1
100099f2:	d100      	bne.n	100099f6 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
100099f4:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
100099f6:	782b      	ldrb	r3, [r5, #0]
100099f8:	2b00      	cmp	r3, #0
100099fa:	d101      	bne.n	10009a00 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
100099fc:	4642      	mov	r2, r8
100099fe:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10009a00:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10009a02:	782a      	ldrb	r2, [r5, #0]
10009a04:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10009a06:	782a      	ldrb	r2, [r5, #0]
10009a08:	2a01      	cmp	r2, #1
10009a0a:	d101      	bne.n	10009a10 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10009a0c:	792a      	ldrb	r2, [r5, #4]
10009a0e:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10009a10:	786a      	ldrb	r2, [r5, #1]
10009a12:	2a04      	cmp	r2, #4
10009a14:	d104      	bne.n	10009a20 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10009a16:	2124      	movs	r1, #36	; 0x24
10009a18:	5c58      	ldrb	r0, [r3, r1]
10009a1a:	4302      	orrs	r2, r0
10009a1c:	545a      	strb	r2, [r3, r1]
10009a1e:	e004      	b.n	10009a2a <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10009a20:	2124      	movs	r1, #36	; 0x24
10009a22:	5c5a      	ldrb	r2, [r3, r1]
10009a24:	2004      	movs	r0, #4
10009a26:	4382      	bics	r2, r0
10009a28:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10009a2a:	78aa      	ldrb	r2, [r5, #2]
10009a2c:	2a01      	cmp	r2, #1
10009a2e:	d01a      	beq.n	10009a66 <spi_init+0x116>
10009a30:	2a00      	cmp	r2, #0
10009a32:	d004      	beq.n	10009a3e <spi_init+0xee>
10009a34:	2a02      	cmp	r2, #2
10009a36:	d00c      	beq.n	10009a52 <spi_init+0x102>
10009a38:	2a03      	cmp	r2, #3
10009a3a:	d01e      	beq.n	10009a7a <spi_init+0x12a>
10009a3c:	e026      	b.n	10009a8c <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009a3e:	2224      	movs	r2, #36	; 0x24
10009a40:	5c99      	ldrb	r1, [r3, r2]
10009a42:	2002      	movs	r0, #2
10009a44:	4381      	bics	r1, r0
10009a46:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009a48:	5c99      	ldrb	r1, [r3, r2]
10009a4a:	3801      	subs	r0, #1
10009a4c:	4381      	bics	r1, r0
10009a4e:	5499      	strb	r1, [r3, r2]
10009a50:	e01c      	b.n	10009a8c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009a52:	2224      	movs	r2, #36	; 0x24
10009a54:	5c98      	ldrb	r0, [r3, r2]
10009a56:	2102      	movs	r1, #2
10009a58:	4301      	orrs	r1, r0
10009a5a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009a5c:	5c99      	ldrb	r1, [r3, r2]
10009a5e:	2001      	movs	r0, #1
10009a60:	4381      	bics	r1, r0
10009a62:	5499      	strb	r1, [r3, r2]
10009a64:	e012      	b.n	10009a8c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009a66:	2224      	movs	r2, #36	; 0x24
10009a68:	5c99      	ldrb	r1, [r3, r2]
10009a6a:	2002      	movs	r0, #2
10009a6c:	4381      	bics	r1, r0
10009a6e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009a70:	5c98      	ldrb	r0, [r3, r2]
10009a72:	2101      	movs	r1, #1
10009a74:	4301      	orrs	r1, r0
10009a76:	5499      	strb	r1, [r3, r2]
10009a78:	e008      	b.n	10009a8c <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009a7a:	2224      	movs	r2, #36	; 0x24
10009a7c:	5c98      	ldrb	r0, [r3, r2]
10009a7e:	2102      	movs	r1, #2
10009a80:	4301      	orrs	r1, r0
10009a82:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009a84:	5c98      	ldrb	r0, [r3, r2]
10009a86:	2101      	movs	r1, #1
10009a88:	4301      	orrs	r1, r0
10009a8a:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10009a8c:	2000      	movs	r0, #0
10009a8e:	b003      	add	sp, #12
10009a90:	bc0c      	pop	{r2, r3}
10009a92:	4690      	mov	r8, r2
10009a94:	469b      	mov	fp, r3
10009a96:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a98:	10009915 	.word	0x10009915
10009a9c:	40006000 	.word	0x40006000
10009aa0:	1000a541 	.word	0x1000a541
10009aa4:	40007000 	.word	0x40007000
10009aa8:	10009e9d 	.word	0x10009e9d
10009aac:	10009ead 	.word	0x10009ead
10009ab0:	1000a191 	.word	0x1000a191

10009ab4 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10009ab4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009ab6:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10009ab8:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10009aba:	2600      	movs	r6, #0
10009abc:	466d      	mov	r5, sp
10009abe:	71ee      	strb	r6, [r5, #7]
10009ac0:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10009ac2:	2c00      	cmp	r4, #0
10009ac4:	d034      	beq.n	10009b30 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10009ac6:	2900      	cmp	r1, #0
10009ac8:	d104      	bne.n	10009ad4 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10009aca:	0029      	movs	r1, r5
10009acc:	7980      	ldrb	r0, [r0, #6]
10009ace:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10009ad0:	2701      	movs	r7, #1
10009ad2:	e00b      	b.n	10009aec <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10009ad4:	2a00      	cmp	r2, #0
10009ad6:	d005      	beq.n	10009ae4 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009ad8:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10009ada:	2b00      	cmp	r3, #0
10009adc:	d029      	beq.n	10009b32 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10009ade:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009ae0:	2700      	movs	r7, #0
10009ae2:	e003      	b.n	10009aec <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10009ae4:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009ae6:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10009ae8:	466a      	mov	r2, sp
10009aea:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10009aec:	2528      	movs	r5, #40	; 0x28
10009aee:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10009af0:	07c0      	lsls	r0, r0, #31
10009af2:	d4fc      	bmi.n	10009aee <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10009af4:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10009af6:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10009af8:	2b00      	cmp	r3, #0
10009afa:	d014      	beq.n	10009b26 <spi_transceive_buffer_wait+0x72>
10009afc:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10009afe:	4278      	negs	r0, r7
10009b00:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10009b02:	4270      	negs	r0, r6
10009b04:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10009b06:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10009b08:	07c0      	lsls	r0, r0, #31
10009b0a:	d5fc      	bpl.n	10009b06 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10009b0c:	7808      	ldrb	r0, [r1, #0]
10009b0e:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10009b10:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10009b12:	07c0      	lsls	r0, r0, #31
10009b14:	d5fc      	bpl.n	10009b10 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10009b16:	7920      	ldrb	r0, [r4, #4]
10009b18:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10009b1a:	3501      	adds	r5, #1
10009b1c:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10009b1e:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10009b20:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10009b22:	42ab      	cmp	r3, r5
10009b24:	d1ef      	bne.n	10009b06 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10009b26:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10009b28:	06db      	lsls	r3, r3, #27
10009b2a:	d5fc      	bpl.n	10009b26 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10009b2c:	2000      	movs	r0, #0
10009b2e:	e000      	b.n	10009b32 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10009b30:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10009b32:	b003      	add	sp, #12
10009b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b36:	46c0      	nop			; (mov r8, r8)

10009b38 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
10009b38:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
10009b3a:	7808      	ldrb	r0, [r1, #0]
	if(select) {
10009b3c:	2a00      	cmp	r2, #0
10009b3e:	d003      	beq.n	10009b48 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
10009b40:	2100      	movs	r1, #0
10009b42:	4b04      	ldr	r3, [pc, #16]	; (10009b54 <spi_select_slave+0x1c>)
10009b44:	4798      	blx	r3
10009b46:	e002      	b.n	10009b4e <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
10009b48:	2101      	movs	r1, #1
10009b4a:	4b02      	ldr	r3, [pc, #8]	; (10009b54 <spi_select_slave+0x1c>)
10009b4c:	4798      	blx	r3
	}

	return STATUS_OK;
}
10009b4e:	2000      	movs	r0, #0
10009b50:	bd10      	pop	{r4, pc}
10009b52:	46c0      	nop			; (mov r8, r8)
10009b54:	1000a105 	.word	0x1000a105

10009b58 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10009b58:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10009b5a:	4b0d      	ldr	r3, [pc, #52]	; (10009b90 <dualtimer_isr_handler+0x38>)
10009b5c:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10009b5e:	2b00      	cmp	r3, #0
10009b60:	d007      	beq.n	10009b72 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10009b62:	2201      	movs	r2, #1
10009b64:	4b0a      	ldr	r3, [pc, #40]	; (10009b90 <dualtimer_isr_handler+0x38>)
10009b66:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10009b68:	4b0a      	ldr	r3, [pc, #40]	; (10009b94 <dualtimer_isr_handler+0x3c>)
10009b6a:	681b      	ldr	r3, [r3, #0]
10009b6c:	2b00      	cmp	r3, #0
10009b6e:	d000      	beq.n	10009b72 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10009b70:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10009b72:	2334      	movs	r3, #52	; 0x34
10009b74:	4a06      	ldr	r2, [pc, #24]	; (10009b90 <dualtimer_isr_handler+0x38>)
10009b76:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10009b78:	2b00      	cmp	r3, #0
10009b7a:	d007      	beq.n	10009b8c <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10009b7c:	2101      	movs	r1, #1
10009b7e:	232c      	movs	r3, #44	; 0x2c
10009b80:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10009b82:	4b05      	ldr	r3, [pc, #20]	; (10009b98 <dualtimer_isr_handler+0x40>)
10009b84:	681b      	ldr	r3, [r3, #0]
10009b86:	2b00      	cmp	r3, #0
10009b88:	d000      	beq.n	10009b8c <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10009b8a:	4798      	blx	r3
	}
}
10009b8c:	bd10      	pop	{r4, pc}
10009b8e:	46c0      	nop			; (mov r8, r8)
10009b90:	40001000 	.word	0x40001000
10009b94:	10013e68 	.word	0x10013e68
10009b98:	10013e6c 	.word	0x10013e6c

10009b9c <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10009b9c:	2301      	movs	r3, #1
10009b9e:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10009ba0:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10009ba2:	2202      	movs	r2, #2
10009ba4:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10009ba6:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10009ba8:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10009baa:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009bac:	2200      	movs	r2, #0
10009bae:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009bb0:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10009bb2:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10009bb4:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10009bb6:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10009bb8:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10009bba:	7602      	strb	r2, [r0, #24]
}
10009bbc:	4770      	bx	lr
10009bbe:	46c0      	nop			; (mov r8, r8)

10009bc0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10009bc0:	2800      	cmp	r0, #0
10009bc2:	d107      	bne.n	10009bd4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10009bc4:	2900      	cmp	r1, #0
10009bc6:	d102      	bne.n	10009bce <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10009bc8:	4b06      	ldr	r3, [pc, #24]	; (10009be4 <dualtimer_set_counter+0x24>)
10009bca:	601a      	str	r2, [r3, #0]
10009bcc:	e009      	b.n	10009be2 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10009bce:	4b05      	ldr	r3, [pc, #20]	; (10009be4 <dualtimer_set_counter+0x24>)
10009bd0:	619a      	str	r2, [r3, #24]
10009bd2:	e006      	b.n	10009be2 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10009bd4:	2900      	cmp	r1, #0
10009bd6:	d102      	bne.n	10009bde <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10009bd8:	4b02      	ldr	r3, [pc, #8]	; (10009be4 <dualtimer_set_counter+0x24>)
10009bda:	621a      	str	r2, [r3, #32]
10009bdc:	e001      	b.n	10009be2 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10009bde:	4b01      	ldr	r3, [pc, #4]	; (10009be4 <dualtimer_set_counter+0x24>)
10009be0:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10009be2:	4770      	bx	lr
10009be4:	40001000 	.word	0x40001000

10009be8 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10009be8:	2800      	cmp	r0, #0
10009bea:	d105      	bne.n	10009bf8 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10009bec:	4a06      	ldr	r2, [pc, #24]	; (10009c08 <dualtimer_enable+0x20>)
10009bee:	7a11      	ldrb	r1, [r2, #8]
10009bf0:	2380      	movs	r3, #128	; 0x80
10009bf2:	430b      	orrs	r3, r1
10009bf4:	7213      	strb	r3, [r2, #8]
10009bf6:	e005      	b.n	10009c04 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10009bf8:	4903      	ldr	r1, [pc, #12]	; (10009c08 <dualtimer_enable+0x20>)
10009bfa:	2228      	movs	r2, #40	; 0x28
10009bfc:	5c88      	ldrb	r0, [r1, r2]
10009bfe:	2380      	movs	r3, #128	; 0x80
10009c00:	4303      	orrs	r3, r0
10009c02:	548b      	strb	r3, [r1, r2]
	}
}
10009c04:	4770      	bx	lr
10009c06:	46c0      	nop			; (mov r8, r8)
10009c08:	40001000 	.word	0x40001000

10009c0c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10009c0c:	2800      	cmp	r0, #0
10009c0e:	d105      	bne.n	10009c1c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10009c10:	4a06      	ldr	r2, [pc, #24]	; (10009c2c <dualtimer_disable+0x20>)
10009c12:	7a11      	ldrb	r1, [r2, #8]
10009c14:	237f      	movs	r3, #127	; 0x7f
10009c16:	400b      	ands	r3, r1
10009c18:	7213      	strb	r3, [r2, #8]
10009c1a:	e005      	b.n	10009c28 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10009c1c:	4903      	ldr	r1, [pc, #12]	; (10009c2c <dualtimer_disable+0x20>)
10009c1e:	2228      	movs	r2, #40	; 0x28
10009c20:	5c88      	ldrb	r0, [r1, r2]
10009c22:	237f      	movs	r3, #127	; 0x7f
10009c24:	4003      	ands	r3, r0
10009c26:	548b      	strb	r3, [r1, r2]
	}
}
10009c28:	4770      	bx	lr
10009c2a:	46c0      	nop			; (mov r8, r8)
10009c2c:	40001000 	.word	0x40001000

10009c30 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10009c30:	b570      	push	{r4, r5, r6, lr}
10009c32:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10009c34:	2004      	movs	r0, #4
10009c36:	4b39      	ldr	r3, [pc, #228]	; (10009d1c <dualtimer_init+0xec>)
10009c38:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10009c3a:	7823      	ldrb	r3, [r4, #0]
10009c3c:	2b00      	cmp	r3, #0
10009c3e:	d102      	bne.n	10009c46 <dualtimer_init+0x16>
10009c40:	7b23      	ldrb	r3, [r4, #12]
10009c42:	2b00      	cmp	r3, #0
10009c44:	d065      	beq.n	10009d12 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10009c46:	4936      	ldr	r1, [pc, #216]	; (10009d20 <dualtimer_init+0xf0>)
10009c48:	68ca      	ldr	r2, [r1, #12]
10009c4a:	2320      	movs	r3, #32
10009c4c:	4313      	orrs	r3, r2
10009c4e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10009c50:	7e22      	ldrb	r2, [r4, #24]
10009c52:	698b      	ldr	r3, [r1, #24]
10009c54:	2003      	movs	r0, #3
10009c56:	4002      	ands	r2, r0
10009c58:	0112      	lsls	r2, r2, #4
10009c5a:	302d      	adds	r0, #45	; 0x2d
10009c5c:	4383      	bics	r3, r0
10009c5e:	4313      	orrs	r3, r2
10009c60:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10009c62:	7823      	ldrb	r3, [r4, #0]
10009c64:	2b00      	cmp	r3, #0
10009c66:	d026      	beq.n	10009cb6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009c68:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10009c6a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009c6c:	2b00      	cmp	r3, #0
10009c6e:	d003      	beq.n	10009c78 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10009c70:	3b02      	subs	r3, #2
10009c72:	425d      	negs	r5, r3
10009c74:	415d      	adcs	r5, r3
10009c76:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10009c78:	78a2      	ldrb	r2, [r4, #2]
10009c7a:	0052      	lsls	r2, r2, #1
10009c7c:	2502      	movs	r5, #2
10009c7e:	402a      	ands	r2, r5
10009c80:	78e3      	ldrb	r3, [r4, #3]
10009c82:	009b      	lsls	r3, r3, #2
10009c84:	350a      	adds	r5, #10
10009c86:	402b      	ands	r3, r5
10009c88:	431a      	orrs	r2, r3
10009c8a:	0015      	movs	r5, r2
10009c8c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10009c8e:	7923      	ldrb	r3, [r4, #4]
10009c90:	2b00      	cmp	r3, #0
10009c92:	d001      	beq.n	10009c98 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10009c94:	2320      	movs	r3, #32
10009c96:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10009c98:	4b22      	ldr	r3, [pc, #136]	; (10009d24 <dualtimer_init+0xf4>)
10009c9a:	68a2      	ldr	r2, [r4, #8]
10009c9c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10009c9e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10009ca0:	491f      	ldr	r1, [pc, #124]	; (10009d20 <dualtimer_init+0xf0>)
10009ca2:	22c4      	movs	r2, #196	; 0xc4
10009ca4:	0052      	lsls	r2, r2, #1
10009ca6:	5c88      	ldrb	r0, [r1, r2]
10009ca8:	2301      	movs	r3, #1
10009caa:	4303      	orrs	r3, r0
10009cac:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10009cae:	2000      	movs	r0, #0
10009cb0:	4b1d      	ldr	r3, [pc, #116]	; (10009d28 <dualtimer_init+0xf8>)
10009cb2:	4798      	blx	r3
10009cb4:	e000      	b.n	10009cb8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10009cb6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10009cb8:	7b23      	ldrb	r3, [r4, #12]
10009cba:	2b00      	cmp	r3, #0
10009cbc:	d029      	beq.n	10009d12 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009cbe:	7b63      	ldrb	r3, [r4, #13]
10009cc0:	2b00      	cmp	r3, #0
10009cc2:	d005      	beq.n	10009cd0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10009cc4:	2b01      	cmp	r3, #1
10009cc6:	d005      	beq.n	10009cd4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10009cc8:	2b02      	cmp	r3, #2
10009cca:	d104      	bne.n	10009cd6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10009ccc:	2540      	movs	r5, #64	; 0x40
10009cce:	e002      	b.n	10009cd6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10009cd0:	2501      	movs	r5, #1
10009cd2:	e000      	b.n	10009cd6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10009cd4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10009cd6:	7ba3      	ldrb	r3, [r4, #14]
10009cd8:	005b      	lsls	r3, r3, #1
10009cda:	2102      	movs	r1, #2
10009cdc:	4019      	ands	r1, r3
10009cde:	7be2      	ldrb	r2, [r4, #15]
10009ce0:	0092      	lsls	r2, r2, #2
10009ce2:	230c      	movs	r3, #12
10009ce4:	4013      	ands	r3, r2
10009ce6:	430b      	orrs	r3, r1
10009ce8:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10009cea:	7c23      	ldrb	r3, [r4, #16]
10009cec:	2b00      	cmp	r3, #0
10009cee:	d001      	beq.n	10009cf4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10009cf0:	2320      	movs	r3, #32
10009cf2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10009cf4:	6962      	ldr	r2, [r4, #20]
10009cf6:	4b0b      	ldr	r3, [pc, #44]	; (10009d24 <dualtimer_init+0xf4>)
10009cf8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10009cfa:	2228      	movs	r2, #40	; 0x28
10009cfc:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10009cfe:	4908      	ldr	r1, [pc, #32]	; (10009d20 <dualtimer_init+0xf0>)
10009d00:	3261      	adds	r2, #97	; 0x61
10009d02:	32ff      	adds	r2, #255	; 0xff
10009d04:	5c88      	ldrb	r0, [r1, r2]
10009d06:	2302      	movs	r3, #2
10009d08:	4303      	orrs	r3, r0
10009d0a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10009d0c:	2001      	movs	r0, #1
10009d0e:	4b06      	ldr	r3, [pc, #24]	; (10009d28 <dualtimer_init+0xf8>)
10009d10:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10009d12:	4906      	ldr	r1, [pc, #24]	; (10009d2c <dualtimer_init+0xfc>)
10009d14:	201e      	movs	r0, #30
10009d16:	4b06      	ldr	r3, [pc, #24]	; (10009d30 <dualtimer_init+0x100>)
10009d18:	4798      	blx	r3
}
10009d1a:	bd70      	pop	{r4, r5, r6, pc}
10009d1c:	1000ac09 	.word	0x1000ac09
10009d20:	4000b000 	.word	0x4000b000
10009d24:	40001000 	.word	0x40001000
10009d28:	10009be9 	.word	0x10009be9
10009d2c:	10009b59 	.word	0x10009b59
10009d30:	1000b071 	.word	0x1000b071

10009d34 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10009d34:	2800      	cmp	r0, #0
10009d36:	d102      	bne.n	10009d3e <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10009d38:	4b02      	ldr	r3, [pc, #8]	; (10009d44 <dualtimer_register_callback+0x10>)
10009d3a:	6019      	str	r1, [r3, #0]
10009d3c:	e001      	b.n	10009d42 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10009d3e:	4b02      	ldr	r3, [pc, #8]	; (10009d48 <dualtimer_register_callback+0x14>)
10009d40:	6019      	str	r1, [r3, #0]
	}
}
10009d42:	4770      	bx	lr
10009d44:	10013e68 	.word	0x10013e68
10009d48:	10013e6c 	.word	0x10013e6c

10009d4c <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10009d4c:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10009d4e:	4b16      	ldr	r3, [pc, #88]	; (10009da8 <gpio_port0_isr_handler+0x5c>)
10009d50:	681d      	ldr	r5, [r3, #0]
10009d52:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10009d54:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
10009d56:	07cb      	lsls	r3, r1, #31
10009d58:	d407      	bmi.n	10009d6a <gpio_port0_isr_handler+0x1e>
10009d5a:	2301      	movs	r3, #1
10009d5c:	2401      	movs	r4, #1
10009d5e:	0018      	movs	r0, r3
10009d60:	0022      	movs	r2, r4
10009d62:	409a      	lsls	r2, r3
10009d64:	4211      	tst	r1, r2
10009d66:	d014      	beq.n	10009d92 <gpio_port0_isr_handler+0x46>
10009d68:	e001      	b.n	10009d6e <gpio_port0_isr_handler+0x22>
10009d6a:	2201      	movs	r2, #1
10009d6c:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
10009d6e:	b292      	uxth	r2, r2
10009d70:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10009d72:	2346      	movs	r3, #70	; 0x46
10009d74:	4a0c      	ldr	r2, [pc, #48]	; (10009da8 <gpio_port0_isr_handler+0x5c>)
10009d76:	5ad3      	ldrh	r3, [r2, r3]
10009d78:	4103      	asrs	r3, r0
10009d7a:	07db      	lsls	r3, r3, #31
10009d7c:	d50c      	bpl.n	10009d98 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
10009d7e:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10009d80:	5ad3      	ldrh	r3, [r2, r3]
10009d82:	4103      	asrs	r3, r0
10009d84:	07db      	lsls	r3, r3, #31
10009d86:	d507      	bpl.n	10009d98 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10009d88:	0080      	lsls	r0, r0, #2
10009d8a:	1810      	adds	r0, r2, r0
10009d8c:	6843      	ldr	r3, [r0, #4]
10009d8e:	4798      	blx	r3
10009d90:	e002      	b.n	10009d98 <gpio_port0_isr_handler+0x4c>
10009d92:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10009d94:	2b10      	cmp	r3, #16
10009d96:	d1e2      	bne.n	10009d5e <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10009d98:	2180      	movs	r1, #128	; 0x80
10009d9a:	0409      	lsls	r1, r1, #16
10009d9c:	23c0      	movs	r3, #192	; 0xc0
10009d9e:	005b      	lsls	r3, r3, #1
10009da0:	4a02      	ldr	r2, [pc, #8]	; (10009dac <gpio_port0_isr_handler+0x60>)
10009da2:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10009da4:	bd70      	pop	{r4, r5, r6, pc}
10009da6:	46c0      	nop			; (mov r8, r8)
10009da8:	10015b4c 	.word	0x10015b4c
10009dac:	e000e100 	.word	0xe000e100

10009db0 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10009db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
10009db2:	4b18      	ldr	r3, [pc, #96]	; (10009e14 <gpio_port1_isr_handler+0x64>)
10009db4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10009db6:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10009db8:	b2b6      	uxth	r6, r6
10009dba:	0037      	movs	r7, r6
10009dbc:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10009dbe:	0b76      	lsrs	r6, r6, #13
10009dc0:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10009dc2:	4d14      	ldr	r5, [pc, #80]	; (10009e14 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10009dc4:	2e00      	cmp	r6, #0
10009dc6:	d001      	beq.n	10009dcc <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10009dc8:	4b13      	ldr	r3, [pc, #76]	; (10009e18 <gpio_port1_isr_handler+0x68>)
10009dca:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
10009dcc:	0022      	movs	r2, r4
10009dce:	2301      	movs	r3, #1
10009dd0:	40a3      	lsls	r3, r4
10009dd2:	421f      	tst	r7, r3
10009dd4:	d013      	beq.n	10009dfe <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10009dd6:	b29b      	uxth	r3, r3
10009dd8:	6ca9      	ldr	r1, [r5, #72]	; 0x48
10009dda:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10009ddc:	238e      	movs	r3, #142	; 0x8e
10009dde:	5aeb      	ldrh	r3, [r5, r3]
10009de0:	4123      	asrs	r3, r4
10009de2:	07db      	lsls	r3, r3, #31
10009de4:	d50b      	bpl.n	10009dfe <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10009de6:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10009de8:	490a      	ldr	r1, [pc, #40]	; (10009e14 <gpio_port1_isr_handler+0x64>)
10009dea:	5acb      	ldrh	r3, [r1, r3]
10009dec:	4123      	asrs	r3, r4
10009dee:	07db      	lsls	r3, r3, #31
10009df0:	d505      	bpl.n	10009dfe <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
10009df2:	3212      	adds	r2, #18
10009df4:	0092      	lsls	r2, r2, #2
10009df6:	188a      	adds	r2, r1, r2
10009df8:	6853      	ldr	r3, [r2, #4]
10009dfa:	4798      	blx	r3
				break;
10009dfc:	e002      	b.n	10009e04 <gpio_port1_isr_handler+0x54>
10009dfe:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10009e00:	2c10      	cmp	r4, #16
10009e02:	d1df      	bne.n	10009dc4 <gpio_port1_isr_handler+0x14>
10009e04:	2180      	movs	r1, #128	; 0x80
10009e06:	0449      	lsls	r1, r1, #17
10009e08:	23c0      	movs	r3, #192	; 0xc0
10009e0a:	005b      	lsls	r3, r3, #1
10009e0c:	4a03      	ldr	r2, [pc, #12]	; (10009e1c <gpio_port1_isr_handler+0x6c>)
10009e0e:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
10009e10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009e12:	46c0      	nop			; (mov r8, r8)
10009e14:	10015b4c 	.word	0x10015b4c
10009e18:	0001bc51 	.word	0x0001bc51
10009e1c:	e000e100 	.word	0xe000e100

10009e20 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10009e20:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
10009e22:	2390      	movs	r3, #144	; 0x90
10009e24:	4a1b      	ldr	r2, [pc, #108]	; (10009e94 <gpio_port2_isr_handler+0x74>)
10009e26:	58d2      	ldr	r2, [r2, r3]
10009e28:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009e2a:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10009e2c:	04d9      	lsls	r1, r3, #19
10009e2e:	d414      	bmi.n	10009e5a <gpio_port2_isr_handler+0x3a>
10009e30:	0499      	lsls	r1, r3, #18
10009e32:	d40a      	bmi.n	10009e4a <gpio_port2_isr_handler+0x2a>
10009e34:	0459      	lsls	r1, r3, #17
10009e36:	d40c      	bmi.n	10009e52 <gpio_port2_isr_handler+0x32>
10009e38:	0bdb      	lsrs	r3, r3, #15
10009e3a:	03db      	lsls	r3, r3, #15
10009e3c:	b29b      	uxth	r3, r3
10009e3e:	2b00      	cmp	r3, #0
10009e40:	d020      	beq.n	10009e84 <gpio_port2_isr_handler+0x64>
10009e42:	2380      	movs	r3, #128	; 0x80
10009e44:	021b      	lsls	r3, r3, #8
10009e46:	210f      	movs	r1, #15
10009e48:	e00a      	b.n	10009e60 <gpio_port2_isr_handler+0x40>
10009e4a:	2380      	movs	r3, #128	; 0x80
10009e4c:	019b      	lsls	r3, r3, #6
10009e4e:	210d      	movs	r1, #13
10009e50:	e006      	b.n	10009e60 <gpio_port2_isr_handler+0x40>
10009e52:	2380      	movs	r3, #128	; 0x80
10009e54:	01db      	lsls	r3, r3, #7
10009e56:	210e      	movs	r1, #14
10009e58:	e002      	b.n	10009e60 <gpio_port2_isr_handler+0x40>
10009e5a:	2380      	movs	r3, #128	; 0x80
10009e5c:	015b      	lsls	r3, r3, #5
10009e5e:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10009e60:	b29b      	uxth	r3, r3
10009e62:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10009e64:	23d6      	movs	r3, #214	; 0xd6
10009e66:	4a0b      	ldr	r2, [pc, #44]	; (10009e94 <gpio_port2_isr_handler+0x74>)
10009e68:	5ad3      	ldrh	r3, [r2, r3]
10009e6a:	410b      	asrs	r3, r1
10009e6c:	07db      	lsls	r3, r3, #31
10009e6e:	d509      	bpl.n	10009e84 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10009e70:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10009e72:	5ad3      	ldrh	r3, [r2, r3]
10009e74:	410b      	asrs	r3, r1
10009e76:	07db      	lsls	r3, r3, #31
10009e78:	d504      	bpl.n	10009e84 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10009e7a:	3124      	adds	r1, #36	; 0x24
10009e7c:	0089      	lsls	r1, r1, #2
10009e7e:	1851      	adds	r1, r2, r1
10009e80:	684b      	ldr	r3, [r1, #4]
10009e82:	4798      	blx	r3
10009e84:	2180      	movs	r1, #128	; 0x80
10009e86:	0489      	lsls	r1, r1, #18
10009e88:	23c0      	movs	r3, #192	; 0xc0
10009e8a:	005b      	lsls	r3, r3, #1
10009e8c:	4a02      	ldr	r2, [pc, #8]	; (10009e98 <gpio_port2_isr_handler+0x78>)
10009e8e:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10009e90:	bd10      	pop	{r4, pc}
10009e92:	46c0      	nop			; (mov r8, r8)
10009e94:	10015b4c 	.word	0x10015b4c
10009e98:	e000e100 	.word	0xe000e100

10009e9c <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10009e9c:	2300      	movs	r3, #0
10009e9e:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10009ea0:	2201      	movs	r2, #1
10009ea2:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10009ea4:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10009ea6:	70c3      	strb	r3, [r0, #3]
}
10009ea8:	4770      	bx	lr
10009eaa:	46c0      	nop			; (mov r8, r8)

10009eac <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
10009eac:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
10009eae:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
10009eb0:	2801      	cmp	r0, #1
10009eb2:	d800      	bhi.n	10009eb6 <gpio_pin_set_config+0xa>
10009eb4:	e0c8      	b.n	1000a048 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
10009eb6:	2807      	cmp	r0, #7
10009eb8:	d809      	bhi.n	10009ece <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009eba:	4d64      	ldr	r5, [pc, #400]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009ebc:	6c6a      	ldr	r2, [r5, #68]	; 0x44
10009ebe:	3b10      	subs	r3, #16
10009ec0:	4003      	ands	r3, r0
10009ec2:	009b      	lsls	r3, r3, #2
10009ec4:	2407      	movs	r4, #7
10009ec6:	409c      	lsls	r4, r3
10009ec8:	43a2      	bics	r2, r4
10009eca:	646a      	str	r2, [r5, #68]	; 0x44
10009ecc:	e029      	b.n	10009f22 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
10009ece:	280f      	cmp	r0, #15
10009ed0:	d809      	bhi.n	10009ee6 <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009ed2:	4d5e      	ldr	r5, [pc, #376]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009ed4:	6caa      	ldr	r2, [r5, #72]	; 0x48
10009ed6:	2307      	movs	r3, #7
10009ed8:	4003      	ands	r3, r0
10009eda:	009b      	lsls	r3, r3, #2
10009edc:	2407      	movs	r4, #7
10009ede:	409c      	lsls	r4, r3
10009ee0:	43a2      	bics	r2, r4
10009ee2:	64aa      	str	r2, [r5, #72]	; 0x48
10009ee4:	e01d      	b.n	10009f22 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
10009ee6:	2817      	cmp	r0, #23
10009ee8:	d809      	bhi.n	10009efe <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
10009eea:	4d58      	ldr	r5, [pc, #352]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009eec:	6cea      	ldr	r2, [r5, #76]	; 0x4c
10009eee:	2307      	movs	r3, #7
10009ef0:	4003      	ands	r3, r0
10009ef2:	009b      	lsls	r3, r3, #2
10009ef4:	2407      	movs	r4, #7
10009ef6:	409c      	lsls	r4, r3
10009ef8:	43a2      	bics	r2, r4
10009efa:	64ea      	str	r2, [r5, #76]	; 0x4c
10009efc:	e011      	b.n	10009f22 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
10009efe:	0003      	movs	r3, r0
10009f00:	3b2c      	subs	r3, #44	; 0x2c
10009f02:	2b03      	cmp	r3, #3
10009f04:	d80d      	bhi.n	10009f22 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
10009f06:	4d52      	ldr	r5, [pc, #328]	; (1000a050 <gpio_pin_set_config+0x1a4>)
10009f08:	2482      	movs	r4, #130	; 0x82
10009f0a:	00e4      	lsls	r4, r4, #3
10009f0c:	5d2a      	ldrb	r2, [r5, r4]
10009f0e:	0712      	lsls	r2, r2, #28
10009f10:	2601      	movs	r6, #1
10009f12:	409e      	lsls	r6, r3
10009f14:	0f12      	lsrs	r2, r2, #28
10009f16:	5d2b      	ldrb	r3, [r5, r4]
10009f18:	43b2      	bics	r2, r6
10009f1a:	260f      	movs	r6, #15
10009f1c:	43b3      	bics	r3, r6
10009f1e:	4313      	orrs	r3, r2
10009f20:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
10009f22:	0003      	movs	r3, r0
10009f24:	3b1d      	subs	r3, #29
10009f26:	2b02      	cmp	r3, #2
10009f28:	d829      	bhi.n	10009f7e <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
10009f2a:	784b      	ldrb	r3, [r1, #1]
10009f2c:	2b01      	cmp	r3, #1
10009f2e:	d108      	bne.n	10009f42 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
10009f30:	4d47      	ldr	r5, [pc, #284]	; (1000a050 <gpio_pin_set_config+0x1a4>)
10009f32:	7d2b      	ldrb	r3, [r5, #20]
10009f34:	241f      	movs	r4, #31
10009f36:	1a24      	subs	r4, r4, r0
10009f38:	2201      	movs	r2, #1
10009f3a:	40a2      	lsls	r2, r4
10009f3c:	4393      	bics	r3, r2
10009f3e:	752b      	strb	r3, [r5, #20]
10009f40:	e008      	b.n	10009f54 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
10009f42:	4c43      	ldr	r4, [pc, #268]	; (1000a050 <gpio_pin_set_config+0x1a4>)
10009f44:	7d25      	ldrb	r5, [r4, #20]
10009f46:	221f      	movs	r2, #31
10009f48:	1a12      	subs	r2, r2, r0
10009f4a:	2301      	movs	r3, #1
10009f4c:	4093      	lsls	r3, r2
10009f4e:	432b      	orrs	r3, r5
10009f50:	b2db      	uxtb	r3, r3
10009f52:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
10009f54:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009f56:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
10009f58:	2a00      	cmp	r2, #0
10009f5a:	d075      	beq.n	1000a048 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
10009f5c:	493c      	ldr	r1, [pc, #240]	; (1000a050 <gpio_pin_set_config+0x1a4>)
10009f5e:	880c      	ldrh	r4, [r1, #0]
10009f60:	221f      	movs	r2, #31
10009f62:	1a10      	subs	r0, r2, r0
10009f64:	0080      	lsls	r0, r0, #2
10009f66:	3301      	adds	r3, #1
10009f68:	4083      	lsls	r3, r0
10009f6a:	4323      	orrs	r3, r4
10009f6c:	b29b      	uxth	r3, r3
10009f6e:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
10009f70:	4a38      	ldr	r2, [pc, #224]	; (1000a054 <gpio_pin_set_config+0x1a8>)
10009f72:	7811      	ldrb	r1, [r2, #0]
10009f74:	2302      	movs	r3, #2
10009f76:	430b      	orrs	r3, r1
10009f78:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009f7a:	2300      	movs	r3, #0
10009f7c:	e064      	b.n	1000a048 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
10009f7e:	780a      	ldrb	r2, [r1, #0]
10009f80:	2a00      	cmp	r2, #0
10009f82:	d140      	bne.n	1000a006 <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
10009f84:	280f      	cmp	r0, #15
10009f86:	d808      	bhi.n	10009f9a <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
10009f88:	2301      	movs	r3, #1
10009f8a:	4083      	lsls	r3, r0
10009f8c:	b29b      	uxth	r3, r3
10009f8e:	4a32      	ldr	r2, [pc, #200]	; (1000a058 <gpio_pin_set_config+0x1ac>)
10009f90:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009f92:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
10009f94:	281f      	cmp	r0, #31
10009f96:	d857      	bhi.n	1000a048 <gpio_pin_set_config+0x19c>
10009f98:	e012      	b.n	10009fc0 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
10009f9a:	281f      	cmp	r0, #31
10009f9c:	d807      	bhi.n	10009fae <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
10009f9e:	220f      	movs	r2, #15
10009fa0:	4002      	ands	r2, r0
10009fa2:	2301      	movs	r3, #1
10009fa4:	4093      	lsls	r3, r2
10009fa6:	b29b      	uxth	r3, r3
10009fa8:	4a2c      	ldr	r2, [pc, #176]	; (1000a05c <gpio_pin_set_config+0x1b0>)
10009faa:	8293      	strh	r3, [r2, #20]
10009fac:	e008      	b.n	10009fc0 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
10009fae:	230f      	movs	r3, #15
10009fb0:	4018      	ands	r0, r3
10009fb2:	3b0e      	subs	r3, #14
10009fb4:	4083      	lsls	r3, r0
10009fb6:	b29b      	uxth	r3, r3
10009fb8:	4a29      	ldr	r2, [pc, #164]	; (1000a060 <gpio_pin_set_config+0x1b4>)
10009fba:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009fbc:	2300      	movs	r3, #0
10009fbe:	e043      	b.n	1000a048 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
10009fc0:	784b      	ldrb	r3, [r1, #1]
10009fc2:	2b01      	cmp	r3, #1
10009fc4:	d00c      	beq.n	10009fe0 <gpio_pin_set_config+0x134>
10009fc6:	2b00      	cmp	r3, #0
10009fc8:	d002      	beq.n	10009fd0 <gpio_pin_set_config+0x124>
10009fca:	2b02      	cmp	r3, #2
10009fcc:	d010      	beq.n	10009ff0 <gpio_pin_set_config+0x144>
10009fce:	e03a      	b.n	1000a046 <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
10009fd0:	491e      	ldr	r1, [pc, #120]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009fd2:	6d0a      	ldr	r2, [r1, #80]	; 0x50
10009fd4:	2301      	movs	r3, #1
10009fd6:	4083      	lsls	r3, r0
10009fd8:	4313      	orrs	r3, r2
10009fda:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009fdc:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
10009fde:	e033      	b.n	1000a048 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10009fe0:	491a      	ldr	r1, [pc, #104]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009fe2:	6d0b      	ldr	r3, [r1, #80]	; 0x50
10009fe4:	2201      	movs	r2, #1
10009fe6:	4082      	lsls	r2, r0
10009fe8:	4393      	bics	r3, r2
10009fea:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
10009fec:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
10009fee:	e02b      	b.n	1000a048 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
10009ff0:	4b16      	ldr	r3, [pc, #88]	; (1000a04c <gpio_pin_set_config+0x1a0>)
10009ff2:	6d59      	ldr	r1, [r3, #84]	; 0x54
10009ff4:	2201      	movs	r2, #1
10009ff6:	4082      	lsls	r2, r0
10009ff8:	4311      	orrs	r1, r2
10009ffa:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
10009ffc:	6d19      	ldr	r1, [r3, #80]	; 0x50
10009ffe:	4391      	bics	r1, r2
1000a000:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a002:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a004:	e020      	b.n	1000a048 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a006:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a008:	2a01      	cmp	r2, #1
1000a00a:	d11d      	bne.n	1000a048 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a00c:	280f      	cmp	r0, #15
1000a00e:	d806      	bhi.n	1000a01e <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a010:	3301      	adds	r3, #1
1000a012:	4083      	lsls	r3, r0
1000a014:	b29b      	uxth	r3, r3
1000a016:	4a10      	ldr	r2, [pc, #64]	; (1000a058 <gpio_pin_set_config+0x1ac>)
1000a018:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a01a:	2300      	movs	r3, #0
1000a01c:	e014      	b.n	1000a048 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a01e:	281f      	cmp	r0, #31
1000a020:	d808      	bhi.n	1000a034 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a022:	230f      	movs	r3, #15
1000a024:	4018      	ands	r0, r3
1000a026:	3b0e      	subs	r3, #14
1000a028:	4083      	lsls	r3, r0
1000a02a:	b29b      	uxth	r3, r3
1000a02c:	4a0b      	ldr	r2, [pc, #44]	; (1000a05c <gpio_pin_set_config+0x1b0>)
1000a02e:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a030:	2300      	movs	r3, #0
1000a032:	e009      	b.n	1000a048 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a034:	230f      	movs	r3, #15
1000a036:	4018      	ands	r0, r3
1000a038:	3b0e      	subs	r3, #14
1000a03a:	4083      	lsls	r3, r0
1000a03c:	b29b      	uxth	r3, r3
1000a03e:	4a08      	ldr	r2, [pc, #32]	; (1000a060 <gpio_pin_set_config+0x1b4>)
1000a040:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a042:	2300      	movs	r3, #0
1000a044:	e000      	b.n	1000a048 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a046:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a048:	0018      	movs	r0, r3
1000a04a:	bd70      	pop	{r4, r5, r6, pc}
1000a04c:	4000b000 	.word	0x4000b000
1000a050:	4000f000 	.word	0x4000f000
1000a054:	4000e000 	.word	0x4000e000
1000a058:	40010000 	.word	0x40010000
1000a05c:	40011000 	.word	0x40011000
1000a060:	40013000 	.word	0x40013000

1000a064 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000a064:	280f      	cmp	r0, #15
1000a066:	d806      	bhi.n	1000a076 <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000a068:	4b0f      	ldr	r3, [pc, #60]	; (1000a0a8 <gpio_pin_get_input_level+0x44>)
1000a06a:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000a06c:	2301      	movs	r3, #1
1000a06e:	4083      	lsls	r3, r0
1000a070:	0018      	movs	r0, r3
1000a072:	4008      	ands	r0, r1
1000a074:	e014      	b.n	1000a0a0 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000a076:	281f      	cmp	r0, #31
1000a078:	d809      	bhi.n	1000a08e <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000a07a:	4b0c      	ldr	r3, [pc, #48]	; (1000a0ac <gpio_pin_get_input_level+0x48>)
1000a07c:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000a07e:	230f      	movs	r3, #15
1000a080:	4003      	ands	r3, r0
1000a082:	001a      	movs	r2, r3
1000a084:	2301      	movs	r3, #1
1000a086:	4093      	lsls	r3, r2
1000a088:	0018      	movs	r0, r3
1000a08a:	4008      	ands	r0, r1
1000a08c:	e008      	b.n	1000a0a0 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000a08e:	4b08      	ldr	r3, [pc, #32]	; (1000a0b0 <gpio_pin_get_input_level+0x4c>)
1000a090:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000a092:	230f      	movs	r3, #15
1000a094:	4003      	ands	r3, r0
1000a096:	001a      	movs	r2, r3
1000a098:	2301      	movs	r3, #1
1000a09a:	4093      	lsls	r3, r2
1000a09c:	0018      	movs	r0, r3
1000a09e:	4008      	ands	r0, r1
	}

	return regval;
1000a0a0:	1e43      	subs	r3, r0, #1
1000a0a2:	4198      	sbcs	r0, r3
1000a0a4:	b2c0      	uxtb	r0, r0
}
1000a0a6:	4770      	bx	lr
1000a0a8:	40010000 	.word	0x40010000
1000a0ac:	40011000 	.word	0x40011000
1000a0b0:	40013000 	.word	0x40013000

1000a0b4 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000a0b4:	280f      	cmp	r0, #15
1000a0b6:	d806      	bhi.n	1000a0c6 <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000a0b8:	4b0f      	ldr	r3, [pc, #60]	; (1000a0f8 <gpio_pin_get_output_level+0x44>)
1000a0ba:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000a0bc:	2301      	movs	r3, #1
1000a0be:	4083      	lsls	r3, r0
1000a0c0:	0018      	movs	r0, r3
1000a0c2:	4008      	ands	r0, r1
1000a0c4:	e014      	b.n	1000a0f0 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000a0c6:	281f      	cmp	r0, #31
1000a0c8:	d809      	bhi.n	1000a0de <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000a0ca:	4b0c      	ldr	r3, [pc, #48]	; (1000a0fc <gpio_pin_get_output_level+0x48>)
1000a0cc:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000a0ce:	230f      	movs	r3, #15
1000a0d0:	4003      	ands	r3, r0
1000a0d2:	001a      	movs	r2, r3
1000a0d4:	2301      	movs	r3, #1
1000a0d6:	4093      	lsls	r3, r2
1000a0d8:	0018      	movs	r0, r3
1000a0da:	4008      	ands	r0, r1
1000a0dc:	e008      	b.n	1000a0f0 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000a0de:	4b08      	ldr	r3, [pc, #32]	; (1000a100 <gpio_pin_get_output_level+0x4c>)
1000a0e0:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000a0e2:	230f      	movs	r3, #15
1000a0e4:	4003      	ands	r3, r0
1000a0e6:	001a      	movs	r2, r3
1000a0e8:	2301      	movs	r3, #1
1000a0ea:	4093      	lsls	r3, r2
1000a0ec:	0018      	movs	r0, r3
1000a0ee:	4008      	ands	r0, r1
	}

	return regval;
1000a0f0:	1e43      	subs	r3, r0, #1
1000a0f2:	4198      	sbcs	r0, r3
1000a0f4:	b2c0      	uxtb	r0, r0
}
1000a0f6:	4770      	bx	lr
1000a0f8:	40010000 	.word	0x40010000
1000a0fc:	40011000 	.word	0x40011000
1000a100:	40013000 	.word	0x40013000

1000a104 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a104:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a106:	280f      	cmp	r0, #15
1000a108:	d810      	bhi.n	1000a12c <gpio_pin_set_output_level+0x28>
		if(level) {
1000a10a:	2900      	cmp	r1, #0
1000a10c:	d007      	beq.n	1000a11e <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a10e:	4a1d      	ldr	r2, [pc, #116]	; (1000a184 <gpio_pin_set_output_level+0x80>)
1000a110:	8891      	ldrh	r1, [r2, #4]
1000a112:	2301      	movs	r3, #1
1000a114:	4083      	lsls	r3, r0
1000a116:	430b      	orrs	r3, r1
1000a118:	b29b      	uxth	r3, r3
1000a11a:	8093      	strh	r3, [r2, #4]
1000a11c:	e031      	b.n	1000a182 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a11e:	4919      	ldr	r1, [pc, #100]	; (1000a184 <gpio_pin_set_output_level+0x80>)
1000a120:	888b      	ldrh	r3, [r1, #4]
1000a122:	2201      	movs	r2, #1
1000a124:	4082      	lsls	r2, r0
1000a126:	4393      	bics	r3, r2
1000a128:	808b      	strh	r3, [r1, #4]
1000a12a:	e02a      	b.n	1000a182 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a12c:	281f      	cmp	r0, #31
1000a12e:	d814      	bhi.n	1000a15a <gpio_pin_set_output_level+0x56>
		if(level) {
1000a130:	2900      	cmp	r1, #0
1000a132:	d009      	beq.n	1000a148 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a134:	4914      	ldr	r1, [pc, #80]	; (1000a188 <gpio_pin_set_output_level+0x84>)
1000a136:	888c      	ldrh	r4, [r1, #4]
1000a138:	220f      	movs	r2, #15
1000a13a:	4010      	ands	r0, r2
1000a13c:	2301      	movs	r3, #1
1000a13e:	4083      	lsls	r3, r0
1000a140:	4323      	orrs	r3, r4
1000a142:	b29b      	uxth	r3, r3
1000a144:	808b      	strh	r3, [r1, #4]
1000a146:	e01c      	b.n	1000a182 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a148:	490f      	ldr	r1, [pc, #60]	; (1000a188 <gpio_pin_set_output_level+0x84>)
1000a14a:	888b      	ldrh	r3, [r1, #4]
1000a14c:	220f      	movs	r2, #15
1000a14e:	4010      	ands	r0, r2
1000a150:	3a0e      	subs	r2, #14
1000a152:	4082      	lsls	r2, r0
1000a154:	4393      	bics	r3, r2
1000a156:	808b      	strh	r3, [r1, #4]
1000a158:	e013      	b.n	1000a182 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a15a:	2900      	cmp	r1, #0
1000a15c:	d009      	beq.n	1000a172 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a15e:	490b      	ldr	r1, [pc, #44]	; (1000a18c <gpio_pin_set_output_level+0x88>)
1000a160:	888c      	ldrh	r4, [r1, #4]
1000a162:	220f      	movs	r2, #15
1000a164:	4010      	ands	r0, r2
1000a166:	2301      	movs	r3, #1
1000a168:	4083      	lsls	r3, r0
1000a16a:	4323      	orrs	r3, r4
1000a16c:	b29b      	uxth	r3, r3
1000a16e:	808b      	strh	r3, [r1, #4]
1000a170:	e007      	b.n	1000a182 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a172:	4906      	ldr	r1, [pc, #24]	; (1000a18c <gpio_pin_set_output_level+0x88>)
1000a174:	888b      	ldrh	r3, [r1, #4]
1000a176:	220f      	movs	r2, #15
1000a178:	4010      	ands	r0, r2
1000a17a:	3a0e      	subs	r2, #14
1000a17c:	4082      	lsls	r2, r0
1000a17e:	4393      	bics	r3, r2
1000a180:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a182:	bd10      	pop	{r4, pc}
1000a184:	40010000 	.word	0x40010000
1000a188:	40011000 	.word	0x40011000
1000a18c:	40013000 	.word	0x40013000

1000a190 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a190:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a192:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a194:	23ff      	movs	r3, #255	; 0xff
1000a196:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a198:	2807      	cmp	r0, #7
1000a19a:	d833      	bhi.n	1000a204 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a19c:	4a4e      	ldr	r2, [pc, #312]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a19e:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a1a0:	3bf8      	subs	r3, #248	; 0xf8
1000a1a2:	4003      	ands	r3, r0
1000a1a4:	009b      	lsls	r3, r3, #2
1000a1a6:	2607      	movs	r6, #7
1000a1a8:	409e      	lsls	r6, r3
1000a1aa:	43b4      	bics	r4, r6
1000a1ac:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a1ae:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a1b0:	000e      	movs	r6, r1
1000a1b2:	409e      	lsls	r6, r3
1000a1b4:	0033      	movs	r3, r6
1000a1b6:	4323      	orrs	r3, r4
1000a1b8:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a1ba:	2901      	cmp	r1, #1
1000a1bc:	d000      	beq.n	1000a1c0 <gpio_pinmux_cofiguration+0x30>
1000a1be:	e08a      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a1c0:	2803      	cmp	r0, #3
1000a1c2:	d80f      	bhi.n	1000a1e4 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a1c4:	0011      	movs	r1, r2
1000a1c6:	22d0      	movs	r2, #208	; 0xd0
1000a1c8:	0052      	lsls	r2, r2, #1
1000a1ca:	588c      	ldr	r4, [r1, r2]
1000a1cc:	2303      	movs	r3, #3
1000a1ce:	4018      	ands	r0, r3
1000a1d0:	00c0      	lsls	r0, r0, #3
1000a1d2:	333c      	adds	r3, #60	; 0x3c
1000a1d4:	4083      	lsls	r3, r0
1000a1d6:	439c      	bics	r4, r3
1000a1d8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a1da:	588b      	ldr	r3, [r1, r2]
1000a1dc:	4085      	lsls	r5, r0
1000a1de:	431d      	orrs	r5, r3
1000a1e0:	508d      	str	r5, [r1, r2]
1000a1e2:	e078      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a1e4:	493c      	ldr	r1, [pc, #240]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a1e6:	22d2      	movs	r2, #210	; 0xd2
1000a1e8:	0052      	lsls	r2, r2, #1
1000a1ea:	588c      	ldr	r4, [r1, r2]
1000a1ec:	2303      	movs	r3, #3
1000a1ee:	4018      	ands	r0, r3
1000a1f0:	00c0      	lsls	r0, r0, #3
1000a1f2:	333c      	adds	r3, #60	; 0x3c
1000a1f4:	4083      	lsls	r3, r0
1000a1f6:	439c      	bics	r4, r3
1000a1f8:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a1fa:	588b      	ldr	r3, [r1, r2]
1000a1fc:	4085      	lsls	r5, r0
1000a1fe:	431d      	orrs	r5, r3
1000a200:	508d      	str	r5, [r1, r2]
1000a202:	e068      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a204:	280f      	cmp	r0, #15
1000a206:	d832      	bhi.n	1000a26e <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a208:	4a33      	ldr	r2, [pc, #204]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a20a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a20c:	2307      	movs	r3, #7
1000a20e:	4003      	ands	r3, r0
1000a210:	009b      	lsls	r3, r3, #2
1000a212:	2607      	movs	r6, #7
1000a214:	409e      	lsls	r6, r3
1000a216:	43b4      	bics	r4, r6
1000a218:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a21a:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a21c:	000e      	movs	r6, r1
1000a21e:	409e      	lsls	r6, r3
1000a220:	0033      	movs	r3, r6
1000a222:	4323      	orrs	r3, r4
1000a224:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a226:	2901      	cmp	r1, #1
1000a228:	d155      	bne.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a22a:	280b      	cmp	r0, #11
1000a22c:	d80f      	bhi.n	1000a24e <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a22e:	0011      	movs	r1, r2
1000a230:	22d4      	movs	r2, #212	; 0xd4
1000a232:	0052      	lsls	r2, r2, #1
1000a234:	588c      	ldr	r4, [r1, r2]
1000a236:	2303      	movs	r3, #3
1000a238:	4018      	ands	r0, r3
1000a23a:	00c0      	lsls	r0, r0, #3
1000a23c:	333c      	adds	r3, #60	; 0x3c
1000a23e:	4083      	lsls	r3, r0
1000a240:	439c      	bics	r4, r3
1000a242:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a244:	588b      	ldr	r3, [r1, r2]
1000a246:	4085      	lsls	r5, r0
1000a248:	431d      	orrs	r5, r3
1000a24a:	508d      	str	r5, [r1, r2]
1000a24c:	e043      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a24e:	4922      	ldr	r1, [pc, #136]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a250:	22d6      	movs	r2, #214	; 0xd6
1000a252:	0052      	lsls	r2, r2, #1
1000a254:	588c      	ldr	r4, [r1, r2]
1000a256:	2303      	movs	r3, #3
1000a258:	4018      	ands	r0, r3
1000a25a:	00c0      	lsls	r0, r0, #3
1000a25c:	333c      	adds	r3, #60	; 0x3c
1000a25e:	4083      	lsls	r3, r0
1000a260:	439c      	bics	r4, r3
1000a262:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a264:	588b      	ldr	r3, [r1, r2]
1000a266:	4085      	lsls	r5, r0
1000a268:	431d      	orrs	r5, r3
1000a26a:	508d      	str	r5, [r1, r2]
1000a26c:	e033      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a26e:	2817      	cmp	r0, #23
1000a270:	d831      	bhi.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a272:	4a19      	ldr	r2, [pc, #100]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a274:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a276:	2307      	movs	r3, #7
1000a278:	4003      	ands	r3, r0
1000a27a:	009b      	lsls	r3, r3, #2
1000a27c:	2607      	movs	r6, #7
1000a27e:	409e      	lsls	r6, r3
1000a280:	43b4      	bics	r4, r6
1000a282:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a284:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a286:	000e      	movs	r6, r1
1000a288:	409e      	lsls	r6, r3
1000a28a:	0033      	movs	r3, r6
1000a28c:	4323      	orrs	r3, r4
1000a28e:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a290:	2901      	cmp	r1, #1
1000a292:	d120      	bne.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a294:	2813      	cmp	r0, #19
1000a296:	d80f      	bhi.n	1000a2b8 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a298:	0011      	movs	r1, r2
1000a29a:	22d8      	movs	r2, #216	; 0xd8
1000a29c:	0052      	lsls	r2, r2, #1
1000a29e:	588c      	ldr	r4, [r1, r2]
1000a2a0:	2303      	movs	r3, #3
1000a2a2:	4018      	ands	r0, r3
1000a2a4:	00c0      	lsls	r0, r0, #3
1000a2a6:	333c      	adds	r3, #60	; 0x3c
1000a2a8:	4083      	lsls	r3, r0
1000a2aa:	439c      	bics	r4, r3
1000a2ac:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a2ae:	588b      	ldr	r3, [r1, r2]
1000a2b0:	4085      	lsls	r5, r0
1000a2b2:	431d      	orrs	r5, r3
1000a2b4:	508d      	str	r5, [r1, r2]
1000a2b6:	e00e      	b.n	1000a2d6 <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a2b8:	4a07      	ldr	r2, [pc, #28]	; (1000a2d8 <gpio_pinmux_cofiguration+0x148>)
1000a2ba:	23da      	movs	r3, #218	; 0xda
1000a2bc:	005b      	lsls	r3, r3, #1
1000a2be:	58d1      	ldr	r1, [r2, r3]
1000a2c0:	2403      	movs	r4, #3
1000a2c2:	4020      	ands	r0, r4
1000a2c4:	00c0      	lsls	r0, r0, #3
1000a2c6:	343c      	adds	r4, #60	; 0x3c
1000a2c8:	4084      	lsls	r4, r0
1000a2ca:	43a1      	bics	r1, r4
1000a2cc:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a2ce:	58d1      	ldr	r1, [r2, r3]
1000a2d0:	4085      	lsls	r5, r0
1000a2d2:	430d      	orrs	r5, r1
1000a2d4:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a2d6:	bd70      	pop	{r4, r5, r6, pc}
1000a2d8:	4000b000 	.word	0x4000b000

1000a2dc <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a2dc:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a2de:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a2e0:	280f      	cmp	r0, #15
1000a2e2:	d904      	bls.n	1000a2ee <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a2e4:	241f      	movs	r4, #31
1000a2e6:	4284      	cmp	r4, r0
1000a2e8:	415b      	adcs	r3, r3
1000a2ea:	3c1d      	subs	r4, #29
1000a2ec:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a2ee:	2a01      	cmp	r2, #1
1000a2f0:	d016      	beq.n	1000a320 <gpio_register_callback+0x44>
1000a2f2:	2a00      	cmp	r2, #0
1000a2f4:	d004      	beq.n	1000a300 <gpio_register_callback+0x24>
1000a2f6:	2a02      	cmp	r2, #2
1000a2f8:	d022      	beq.n	1000a340 <gpio_register_callback+0x64>
1000a2fa:	2a03      	cmp	r2, #3
1000a2fc:	d030      	beq.n	1000a360 <gpio_register_callback+0x84>
1000a2fe:	e03e      	b.n	1000a37e <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a300:	4e29      	ldr	r6, [pc, #164]	; (1000a3a8 <gpio_register_callback+0xcc>)
1000a302:	00dc      	lsls	r4, r3, #3
1000a304:	18e2      	adds	r2, r4, r3
1000a306:	00d2      	lsls	r2, r2, #3
1000a308:	5997      	ldr	r7, [r2, r6]
1000a30a:	250f      	movs	r5, #15
1000a30c:	4005      	ands	r5, r0
1000a30e:	2201      	movs	r2, #1
1000a310:	40aa      	lsls	r2, r5
1000a312:	b292      	uxth	r2, r2
1000a314:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a316:	18e4      	adds	r4, r4, r3
1000a318:	00e4      	lsls	r4, r4, #3
1000a31a:	59a4      	ldr	r4, [r4, r6]
1000a31c:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a31e:	e02e      	b.n	1000a37e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a320:	4e21      	ldr	r6, [pc, #132]	; (1000a3a8 <gpio_register_callback+0xcc>)
1000a322:	00dc      	lsls	r4, r3, #3
1000a324:	18e2      	adds	r2, r4, r3
1000a326:	00d2      	lsls	r2, r2, #3
1000a328:	5997      	ldr	r7, [r2, r6]
1000a32a:	250f      	movs	r5, #15
1000a32c:	4005      	ands	r5, r0
1000a32e:	2201      	movs	r2, #1
1000a330:	40aa      	lsls	r2, r5
1000a332:	b292      	uxth	r2, r2
1000a334:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a336:	18e4      	adds	r4, r4, r3
1000a338:	00e4      	lsls	r4, r4, #3
1000a33a:	59a4      	ldr	r4, [r4, r6]
1000a33c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a33e:	e01e      	b.n	1000a37e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a340:	4e19      	ldr	r6, [pc, #100]	; (1000a3a8 <gpio_register_callback+0xcc>)
1000a342:	00dc      	lsls	r4, r3, #3
1000a344:	18e2      	adds	r2, r4, r3
1000a346:	00d2      	lsls	r2, r2, #3
1000a348:	5997      	ldr	r7, [r2, r6]
1000a34a:	250f      	movs	r5, #15
1000a34c:	4005      	ands	r5, r0
1000a34e:	2201      	movs	r2, #1
1000a350:	40aa      	lsls	r2, r5
1000a352:	b292      	uxth	r2, r2
1000a354:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a356:	18e4      	adds	r4, r4, r3
1000a358:	00e4      	lsls	r4, r4, #3
1000a35a:	59a4      	ldr	r4, [r4, r6]
1000a35c:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a35e:	e00e      	b.n	1000a37e <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a360:	4e11      	ldr	r6, [pc, #68]	; (1000a3a8 <gpio_register_callback+0xcc>)
1000a362:	00dc      	lsls	r4, r3, #3
1000a364:	18e2      	adds	r2, r4, r3
1000a366:	00d2      	lsls	r2, r2, #3
1000a368:	5997      	ldr	r7, [r2, r6]
1000a36a:	250f      	movs	r5, #15
1000a36c:	4005      	ands	r5, r0
1000a36e:	2201      	movs	r2, #1
1000a370:	40aa      	lsls	r2, r5
1000a372:	b292      	uxth	r2, r2
1000a374:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a376:	18e4      	adds	r4, r4, r3
1000a378:	00e4      	lsls	r4, r4, #3
1000a37a:	59a4      	ldr	r4, [r4, r6]
1000a37c:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a37e:	220f      	movs	r2, #15
1000a380:	4010      	ands	r0, r2
1000a382:	4c09      	ldr	r4, [pc, #36]	; (1000a3a8 <gpio_register_callback+0xcc>)
1000a384:	00dd      	lsls	r5, r3, #3
1000a386:	18ea      	adds	r2, r5, r3
1000a388:	0052      	lsls	r2, r2, #1
1000a38a:	1812      	adds	r2, r2, r0
1000a38c:	0092      	lsls	r2, r2, #2
1000a38e:	18a2      	adds	r2, r4, r2
1000a390:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000a392:	18ea      	adds	r2, r5, r3
1000a394:	00d2      	lsls	r2, r2, #3
1000a396:	18a2      	adds	r2, r4, r2
1000a398:	3244      	adds	r2, #68	; 0x44
1000a39a:	2101      	movs	r1, #1
1000a39c:	4081      	lsls	r1, r0
1000a39e:	8813      	ldrh	r3, [r2, #0]
1000a3a0:	430b      	orrs	r3, r1
1000a3a2:	8013      	strh	r3, [r2, #0]
}
1000a3a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a3a6:	46c0      	nop			; (mov r8, r8)
1000a3a8:	10015b4c 	.word	0x10015b4c

1000a3ac <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000a3ac:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a3ae:	280f      	cmp	r0, #15
1000a3b0:	d805      	bhi.n	1000a3be <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a3b2:	2280      	movs	r2, #128	; 0x80
1000a3b4:	0412      	lsls	r2, r2, #16
1000a3b6:	4b12      	ldr	r3, [pc, #72]	; (1000a400 <gpio_enable_callback+0x54>)
1000a3b8:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000a3ba:	2200      	movs	r2, #0
1000a3bc:	e00c      	b.n	1000a3d8 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000a3be:	281f      	cmp	r0, #31
1000a3c0:	d805      	bhi.n	1000a3ce <gpio_enable_callback+0x22>
1000a3c2:	2280      	movs	r2, #128	; 0x80
1000a3c4:	0452      	lsls	r2, r2, #17
1000a3c6:	4b0e      	ldr	r3, [pc, #56]	; (1000a400 <gpio_enable_callback+0x54>)
1000a3c8:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000a3ca:	2201      	movs	r2, #1
1000a3cc:	e004      	b.n	1000a3d8 <gpio_enable_callback+0x2c>
1000a3ce:	2280      	movs	r2, #128	; 0x80
1000a3d0:	0492      	lsls	r2, r2, #18
1000a3d2:	4b0b      	ldr	r3, [pc, #44]	; (1000a400 <gpio_enable_callback+0x54>)
1000a3d4:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000a3d6:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000a3d8:	230f      	movs	r3, #15
1000a3da:	4018      	ands	r0, r3
1000a3dc:	2101      	movs	r1, #1
1000a3de:	4081      	lsls	r1, r0
1000a3e0:	4c08      	ldr	r4, [pc, #32]	; (1000a404 <gpio_enable_callback+0x58>)
1000a3e2:	00d5      	lsls	r5, r2, #3
1000a3e4:	18ab      	adds	r3, r5, r2
1000a3e6:	00db      	lsls	r3, r3, #3
1000a3e8:	18e3      	adds	r3, r4, r3
1000a3ea:	3346      	adds	r3, #70	; 0x46
1000a3ec:	8818      	ldrh	r0, [r3, #0]
1000a3ee:	4308      	orrs	r0, r1
1000a3f0:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000a3f2:	18aa      	adds	r2, r5, r2
1000a3f4:	00d2      	lsls	r2, r2, #3
1000a3f6:	5913      	ldr	r3, [r2, r4]
1000a3f8:	b289      	uxth	r1, r1
1000a3fa:	8419      	strh	r1, [r3, #32]
}
1000a3fc:	bd30      	pop	{r4, r5, pc}
1000a3fe:	46c0      	nop			; (mov r8, r8)
1000a400:	e000e100 	.word	0xe000e100
1000a404:	10015b4c 	.word	0x10015b4c

1000a408 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000a408:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a40a:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a40c:	280f      	cmp	r0, #15
1000a40e:	d904      	bls.n	1000a41a <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a410:	221f      	movs	r2, #31
1000a412:	4282      	cmp	r2, r0
1000a414:	415b      	adcs	r3, r3
1000a416:	3a1d      	subs	r2, #29
1000a418:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000a41a:	220f      	movs	r2, #15
1000a41c:	4010      	ands	r0, r2
1000a41e:	2101      	movs	r1, #1
1000a420:	4081      	lsls	r1, r0
1000a422:	4c07      	ldr	r4, [pc, #28]	; (1000a440 <gpio_disable_callback+0x38>)
1000a424:	00dd      	lsls	r5, r3, #3
1000a426:	18ea      	adds	r2, r5, r3
1000a428:	00d2      	lsls	r2, r2, #3
1000a42a:	18a2      	adds	r2, r4, r2
1000a42c:	3246      	adds	r2, #70	; 0x46
1000a42e:	8810      	ldrh	r0, [r2, #0]
1000a430:	4388      	bics	r0, r1
1000a432:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000a434:	18eb      	adds	r3, r5, r3
1000a436:	00db      	lsls	r3, r3, #3
1000a438:	591b      	ldr	r3, [r3, r4]
1000a43a:	b289      	uxth	r1, r1
1000a43c:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000a43e:	bd30      	pop	{r4, r5, pc}
1000a440:	10015b4c 	.word	0x10015b4c

1000a444 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000a444:	b510      	push	{r4, lr}
1000a446:	4a11      	ldr	r2, [pc, #68]	; (1000a48c <gpio_init+0x48>)
1000a448:	0010      	movs	r0, r2
1000a44a:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000a44c:	2100      	movs	r1, #0
1000a44e:	e007      	b.n	1000a460 <gpio_init+0x1c>
1000a450:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000a452:	4293      	cmp	r3, r2
1000a454:	d1fc      	bne.n	1000a450 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000a456:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000a458:	8011      	strh	r1, [r2, #0]
1000a45a:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000a45c:	4282      	cmp	r2, r0
1000a45e:	d002      	beq.n	1000a466 <gpio_init+0x22>
1000a460:	0013      	movs	r3, r2
1000a462:	3b40      	subs	r3, #64	; 0x40
1000a464:	e7f4      	b.n	1000a450 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000a466:	4b0a      	ldr	r3, [pc, #40]	; (1000a490 <gpio_init+0x4c>)
1000a468:	4a0a      	ldr	r2, [pc, #40]	; (1000a494 <gpio_init+0x50>)
1000a46a:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000a46c:	4a0a      	ldr	r2, [pc, #40]	; (1000a498 <gpio_init+0x54>)
1000a46e:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000a470:	490a      	ldr	r1, [pc, #40]	; (1000a49c <gpio_init+0x58>)
1000a472:	2290      	movs	r2, #144	; 0x90
1000a474:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000a476:	490a      	ldr	r1, [pc, #40]	; (1000a4a0 <gpio_init+0x5c>)
1000a478:	2027      	movs	r0, #39	; 0x27
1000a47a:	4c0a      	ldr	r4, [pc, #40]	; (1000a4a4 <gpio_init+0x60>)
1000a47c:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000a47e:	490a      	ldr	r1, [pc, #40]	; (1000a4a8 <gpio_init+0x64>)
1000a480:	2028      	movs	r0, #40	; 0x28
1000a482:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000a484:	4909      	ldr	r1, [pc, #36]	; (1000a4ac <gpio_init+0x68>)
1000a486:	2029      	movs	r0, #41	; 0x29
1000a488:	47a0      	blx	r4
}
1000a48a:	bd10      	pop	{r4, pc}
1000a48c:	10015b90 	.word	0x10015b90
1000a490:	10015b4c 	.word	0x10015b4c
1000a494:	40010000 	.word	0x40010000
1000a498:	40011000 	.word	0x40011000
1000a49c:	40013000 	.word	0x40013000
1000a4a0:	10009d4d 	.word	0x10009d4d
1000a4a4:	1000b071 	.word	0x1000b071
1000a4a8:	10009db1 	.word	0x10009db1
1000a4ac:	10009e21 	.word	0x10009e21

1000a4b0 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000a4b0:	2801      	cmp	r0, #1
1000a4b2:	d00d      	beq.n	1000a4d0 <system_clock_config+0x20>
1000a4b4:	2800      	cmp	r0, #0
1000a4b6:	d002      	beq.n	1000a4be <system_clock_config+0xe>
1000a4b8:	2802      	cmp	r0, #2
1000a4ba:	d01c      	beq.n	1000a4f6 <system_clock_config+0x46>
1000a4bc:	e02e      	b.n	1000a51c <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a4be:	4a18      	ldr	r2, [pc, #96]	; (1000a520 <system_clock_config+0x70>)
1000a4c0:	6990      	ldr	r0, [r2, #24]
1000a4c2:	230c      	movs	r3, #12
1000a4c4:	4303      	orrs	r3, r0
1000a4c6:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000a4c8:	4a16      	ldr	r2, [pc, #88]	; (1000a524 <system_clock_config+0x74>)
1000a4ca:	4b17      	ldr	r3, [pc, #92]	; (1000a528 <system_clock_config+0x78>)
1000a4cc:	601a      	str	r2, [r3, #0]
			break;
1000a4ce:	e01a      	b.n	1000a506 <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a4d0:	4b13      	ldr	r3, [pc, #76]	; (1000a520 <system_clock_config+0x70>)
1000a4d2:	6998      	ldr	r0, [r3, #24]
1000a4d4:	2208      	movs	r2, #8
1000a4d6:	4302      	orrs	r2, r0
1000a4d8:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a4da:	699a      	ldr	r2, [r3, #24]
1000a4dc:	2004      	movs	r0, #4
1000a4de:	4382      	bics	r2, r0
1000a4e0:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000a4e2:	4a12      	ldr	r2, [pc, #72]	; (1000a52c <system_clock_config+0x7c>)
1000a4e4:	6853      	ldr	r3, [r2, #4]
1000a4e6:	2080      	movs	r0, #128	; 0x80
1000a4e8:	0300      	lsls	r0, r0, #12
1000a4ea:	4303      	orrs	r3, r0
1000a4ec:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000a4ee:	4a10      	ldr	r2, [pc, #64]	; (1000a530 <system_clock_config+0x80>)
1000a4f0:	4b0d      	ldr	r3, [pc, #52]	; (1000a528 <system_clock_config+0x78>)
1000a4f2:	601a      	str	r2, [r3, #0]
			break;
1000a4f4:	e007      	b.n	1000a506 <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a4f6:	4a0a      	ldr	r2, [pc, #40]	; (1000a520 <system_clock_config+0x70>)
1000a4f8:	6993      	ldr	r3, [r2, #24]
1000a4fa:	200c      	movs	r0, #12
1000a4fc:	4383      	bics	r3, r0
1000a4fe:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000a500:	4a08      	ldr	r2, [pc, #32]	; (1000a524 <system_clock_config+0x74>)
1000a502:	4b09      	ldr	r3, [pc, #36]	; (1000a528 <system_clock_config+0x78>)
1000a504:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a506:	4b06      	ldr	r3, [pc, #24]	; (1000a520 <system_clock_config+0x70>)
1000a508:	699a      	ldr	r2, [r3, #24]
1000a50a:	2003      	movs	r0, #3
1000a50c:	4382      	bics	r2, r0
1000a50e:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a510:	699a      	ldr	r2, [r3, #24]
1000a512:	4001      	ands	r1, r0
1000a514:	4311      	orrs	r1, r2
1000a516:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000a518:	2000      	movs	r0, #0
1000a51a:	e000      	b.n	1000a51e <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000a51c:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000a51e:	4770      	bx	lr
1000a520:	4000b000 	.word	0x4000b000
1000a524:	018cba80 	.word	0x018cba80
1000a528:	10015c24 	.word	0x10015c24
1000a52c:	4000f000 	.word	0x4000f000
1000a530:	001e8480 	.word	0x001e8480

1000a534 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000a534:	4b01      	ldr	r3, [pc, #4]	; (1000a53c <system_clock_get_value+0x8>)
1000a536:	6818      	ldr	r0, [r3, #0]
}
1000a538:	4770      	bx	lr
1000a53a:	46c0      	nop			; (mov r8, r8)
1000a53c:	10015c24 	.word	0x10015c24

1000a540 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000a540:	b500      	push	{lr}
	switch (peripheral) {
1000a542:	2835      	cmp	r0, #53	; 0x35
1000a544:	d900      	bls.n	1000a548 <system_clock_peripheral_enable+0x8>
1000a546:	e1a2      	b.n	1000a88e <system_clock_peripheral_enable+0x34e>
1000a548:	0080      	lsls	r0, r0, #2
1000a54a:	4bd2      	ldr	r3, [pc, #840]	; (1000a894 <system_clock_peripheral_enable+0x354>)
1000a54c:	581b      	ldr	r3, [r3, r0]
1000a54e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a550:	4ad1      	ldr	r2, [pc, #836]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a552:	68d1      	ldr	r1, [r2, #12]
1000a554:	2302      	movs	r3, #2
1000a556:	430b      	orrs	r3, r1
1000a558:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a55a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000a55c:	e198      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a55e:	4ace      	ldr	r2, [pc, #824]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a560:	68d1      	ldr	r1, [r2, #12]
1000a562:	2304      	movs	r3, #4
1000a564:	430b      	orrs	r3, r1
1000a566:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a568:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000a56a:	e191      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a56c:	4aca      	ldr	r2, [pc, #808]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a56e:	68d1      	ldr	r1, [r2, #12]
1000a570:	2308      	movs	r3, #8
1000a572:	430b      	orrs	r3, r1
1000a574:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a576:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000a578:	e18a      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a57a:	4ac7      	ldr	r2, [pc, #796]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a57c:	68d1      	ldr	r1, [r2, #12]
1000a57e:	2310      	movs	r3, #16
1000a580:	430b      	orrs	r3, r1
1000a582:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a584:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000a586:	e183      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a588:	4ac3      	ldr	r2, [pc, #780]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a58a:	68d1      	ldr	r1, [r2, #12]
1000a58c:	2320      	movs	r3, #32
1000a58e:	430b      	orrs	r3, r1
1000a590:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a592:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000a594:	e17c      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a596:	4ac0      	ldr	r2, [pc, #768]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a598:	68d1      	ldr	r1, [r2, #12]
1000a59a:	2380      	movs	r3, #128	; 0x80
1000a59c:	430b      	orrs	r3, r1
1000a59e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000a5a2:	e175      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5a4:	4abc      	ldr	r2, [pc, #752]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5a6:	68d3      	ldr	r3, [r2, #12]
1000a5a8:	2180      	movs	r1, #128	; 0x80
1000a5aa:	0049      	lsls	r1, r1, #1
1000a5ac:	430b      	orrs	r3, r1
1000a5ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000a5b2:	e16d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5b4:	4ab8      	ldr	r2, [pc, #736]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5b6:	68d3      	ldr	r3, [r2, #12]
1000a5b8:	2180      	movs	r1, #128	; 0x80
1000a5ba:	0109      	lsls	r1, r1, #4
1000a5bc:	430b      	orrs	r3, r1
1000a5be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000a5c2:	e165      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5c4:	4ab4      	ldr	r2, [pc, #720]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5c6:	68d3      	ldr	r3, [r2, #12]
1000a5c8:	2180      	movs	r1, #128	; 0x80
1000a5ca:	0149      	lsls	r1, r1, #5
1000a5cc:	430b      	orrs	r3, r1
1000a5ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000a5d2:	e15d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5d4:	4ab0      	ldr	r2, [pc, #704]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5d6:	68d3      	ldr	r3, [r2, #12]
1000a5d8:	2180      	movs	r1, #128	; 0x80
1000a5da:	0189      	lsls	r1, r1, #6
1000a5dc:	430b      	orrs	r3, r1
1000a5de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000a5e2:	e155      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5e4:	4aac      	ldr	r2, [pc, #688]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5e6:	68d3      	ldr	r3, [r2, #12]
1000a5e8:	2180      	movs	r1, #128	; 0x80
1000a5ea:	01c9      	lsls	r1, r1, #7
1000a5ec:	430b      	orrs	r3, r1
1000a5ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a5f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000a5f2:	e14d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a5f4:	4aa8      	ldr	r2, [pc, #672]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a5f6:	68d3      	ldr	r3, [r2, #12]
1000a5f8:	2180      	movs	r1, #128	; 0x80
1000a5fa:	0209      	lsls	r1, r1, #8
1000a5fc:	430b      	orrs	r3, r1
1000a5fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a600:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000a602:	e145      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a604:	4aa4      	ldr	r2, [pc, #656]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a606:	68d3      	ldr	r3, [r2, #12]
1000a608:	2180      	movs	r1, #128	; 0x80
1000a60a:	0249      	lsls	r1, r1, #9
1000a60c:	430b      	orrs	r3, r1
1000a60e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a610:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000a612:	e13d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a614:	4aa0      	ldr	r2, [pc, #640]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a616:	68d3      	ldr	r3, [r2, #12]
1000a618:	2180      	movs	r1, #128	; 0x80
1000a61a:	0289      	lsls	r1, r1, #10
1000a61c:	430b      	orrs	r3, r1
1000a61e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a620:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000a622:	e135      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a624:	4a9c      	ldr	r2, [pc, #624]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a626:	68d3      	ldr	r3, [r2, #12]
1000a628:	2180      	movs	r1, #128	; 0x80
1000a62a:	02c9      	lsls	r1, r1, #11
1000a62c:	430b      	orrs	r3, r1
1000a62e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a630:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000a632:	e12d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a634:	4a98      	ldr	r2, [pc, #608]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a636:	68d3      	ldr	r3, [r2, #12]
1000a638:	2180      	movs	r1, #128	; 0x80
1000a63a:	0309      	lsls	r1, r1, #12
1000a63c:	430b      	orrs	r3, r1
1000a63e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a640:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000a642:	e125      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a644:	4a94      	ldr	r2, [pc, #592]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a646:	68d3      	ldr	r3, [r2, #12]
1000a648:	2180      	movs	r1, #128	; 0x80
1000a64a:	0349      	lsls	r1, r1, #13
1000a64c:	430b      	orrs	r3, r1
1000a64e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a650:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000a652:	e11d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a654:	4a90      	ldr	r2, [pc, #576]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a656:	68d3      	ldr	r3, [r2, #12]
1000a658:	2180      	movs	r1, #128	; 0x80
1000a65a:	0389      	lsls	r1, r1, #14
1000a65c:	430b      	orrs	r3, r1
1000a65e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a660:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000a662:	e115      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a664:	4a8c      	ldr	r2, [pc, #560]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a666:	68d3      	ldr	r3, [r2, #12]
1000a668:	2180      	movs	r1, #128	; 0x80
1000a66a:	03c9      	lsls	r1, r1, #15
1000a66c:	430b      	orrs	r3, r1
1000a66e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a670:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000a672:	e10d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a674:	4a88      	ldr	r2, [pc, #544]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a676:	68d3      	ldr	r3, [r2, #12]
1000a678:	2180      	movs	r1, #128	; 0x80
1000a67a:	0409      	lsls	r1, r1, #16
1000a67c:	430b      	orrs	r3, r1
1000a67e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a680:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000a682:	e105      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a684:	4a84      	ldr	r2, [pc, #528]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a686:	68d3      	ldr	r3, [r2, #12]
1000a688:	2180      	movs	r1, #128	; 0x80
1000a68a:	0449      	lsls	r1, r1, #17
1000a68c:	430b      	orrs	r3, r1
1000a68e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a690:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000a692:	e0fd      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a694:	4a80      	ldr	r2, [pc, #512]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a696:	68d3      	ldr	r3, [r2, #12]
1000a698:	2180      	movs	r1, #128	; 0x80
1000a69a:	0489      	lsls	r1, r1, #18
1000a69c:	430b      	orrs	r3, r1
1000a69e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000a6a2:	e0f5      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6a4:	4a7c      	ldr	r2, [pc, #496]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6a6:	68d3      	ldr	r3, [r2, #12]
1000a6a8:	2180      	movs	r1, #128	; 0x80
1000a6aa:	04c9      	lsls	r1, r1, #19
1000a6ac:	430b      	orrs	r3, r1
1000a6ae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000a6b2:	e0ed      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6b4:	4a78      	ldr	r2, [pc, #480]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6b6:	68d3      	ldr	r3, [r2, #12]
1000a6b8:	2180      	movs	r1, #128	; 0x80
1000a6ba:	0509      	lsls	r1, r1, #20
1000a6bc:	430b      	orrs	r3, r1
1000a6be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000a6c2:	e0e5      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6c4:	4a74      	ldr	r2, [pc, #464]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6c6:	68d3      	ldr	r3, [r2, #12]
1000a6c8:	2180      	movs	r1, #128	; 0x80
1000a6ca:	0549      	lsls	r1, r1, #21
1000a6cc:	430b      	orrs	r3, r1
1000a6ce:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000a6d2:	e0dd      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6d4:	4a70      	ldr	r2, [pc, #448]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6d6:	68d3      	ldr	r3, [r2, #12]
1000a6d8:	2180      	movs	r1, #128	; 0x80
1000a6da:	0589      	lsls	r1, r1, #22
1000a6dc:	430b      	orrs	r3, r1
1000a6de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000a6e2:	e0d5      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6e4:	4a6c      	ldr	r2, [pc, #432]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6e6:	68d3      	ldr	r3, [r2, #12]
1000a6e8:	2180      	movs	r1, #128	; 0x80
1000a6ea:	05c9      	lsls	r1, r1, #23
1000a6ec:	430b      	orrs	r3, r1
1000a6ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000a6f2:	e0cd      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a6f4:	4a68      	ldr	r2, [pc, #416]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a6f6:	6911      	ldr	r1, [r2, #16]
1000a6f8:	2301      	movs	r3, #1
1000a6fa:	430b      	orrs	r3, r1
1000a6fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000a700:	e0c6      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a702:	4a65      	ldr	r2, [pc, #404]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a704:	6911      	ldr	r1, [r2, #16]
1000a706:	2302      	movs	r3, #2
1000a708:	430b      	orrs	r3, r1
1000a70a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a70c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000a70e:	e0bf      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a710:	4a61      	ldr	r2, [pc, #388]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a712:	6911      	ldr	r1, [r2, #16]
1000a714:	2304      	movs	r3, #4
1000a716:	430b      	orrs	r3, r1
1000a718:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a71a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000a71c:	e0b8      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a71e:	4a5e      	ldr	r2, [pc, #376]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a720:	6911      	ldr	r1, [r2, #16]
1000a722:	2308      	movs	r3, #8
1000a724:	430b      	orrs	r3, r1
1000a726:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a728:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000a72a:	e0b1      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a72c:	4a5a      	ldr	r2, [pc, #360]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a72e:	6911      	ldr	r1, [r2, #16]
1000a730:	2310      	movs	r3, #16
1000a732:	430b      	orrs	r3, r1
1000a734:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a736:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000a738:	e0aa      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a73a:	4a57      	ldr	r2, [pc, #348]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a73c:	6911      	ldr	r1, [r2, #16]
1000a73e:	2320      	movs	r3, #32
1000a740:	430b      	orrs	r3, r1
1000a742:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000a746:	e0a3      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a748:	4a53      	ldr	r2, [pc, #332]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a74a:	6911      	ldr	r1, [r2, #16]
1000a74c:	2340      	movs	r3, #64	; 0x40
1000a74e:	430b      	orrs	r3, r1
1000a750:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a752:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000a754:	e09c      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a756:	4a50      	ldr	r2, [pc, #320]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a758:	6911      	ldr	r1, [r2, #16]
1000a75a:	2380      	movs	r3, #128	; 0x80
1000a75c:	430b      	orrs	r3, r1
1000a75e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a760:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000a762:	e095      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a764:	4a4c      	ldr	r2, [pc, #304]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a766:	6913      	ldr	r3, [r2, #16]
1000a768:	2180      	movs	r1, #128	; 0x80
1000a76a:	0049      	lsls	r1, r1, #1
1000a76c:	430b      	orrs	r3, r1
1000a76e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a770:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000a772:	e08d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a774:	4a48      	ldr	r2, [pc, #288]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a776:	6913      	ldr	r3, [r2, #16]
1000a778:	2180      	movs	r1, #128	; 0x80
1000a77a:	0089      	lsls	r1, r1, #2
1000a77c:	430b      	orrs	r3, r1
1000a77e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a780:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000a782:	e085      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a784:	4a44      	ldr	r2, [pc, #272]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a786:	6913      	ldr	r3, [r2, #16]
1000a788:	2180      	movs	r1, #128	; 0x80
1000a78a:	00c9      	lsls	r1, r1, #3
1000a78c:	430b      	orrs	r3, r1
1000a78e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a790:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000a792:	e07d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a794:	4a40      	ldr	r2, [pc, #256]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a796:	6913      	ldr	r3, [r2, #16]
1000a798:	2180      	movs	r1, #128	; 0x80
1000a79a:	0109      	lsls	r1, r1, #4
1000a79c:	430b      	orrs	r3, r1
1000a79e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000a7a2:	e075      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7a4:	4a3c      	ldr	r2, [pc, #240]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7a6:	6913      	ldr	r3, [r2, #16]
1000a7a8:	2180      	movs	r1, #128	; 0x80
1000a7aa:	0149      	lsls	r1, r1, #5
1000a7ac:	430b      	orrs	r3, r1
1000a7ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000a7b2:	e06d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7b4:	4a38      	ldr	r2, [pc, #224]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7b6:	6913      	ldr	r3, [r2, #16]
1000a7b8:	2180      	movs	r1, #128	; 0x80
1000a7ba:	0189      	lsls	r1, r1, #6
1000a7bc:	430b      	orrs	r3, r1
1000a7be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000a7c2:	e065      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7c4:	4a34      	ldr	r2, [pc, #208]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7c6:	6913      	ldr	r3, [r2, #16]
1000a7c8:	2180      	movs	r1, #128	; 0x80
1000a7ca:	01c9      	lsls	r1, r1, #7
1000a7cc:	430b      	orrs	r3, r1
1000a7ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000a7d2:	e05d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7d4:	4a30      	ldr	r2, [pc, #192]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7d6:	6913      	ldr	r3, [r2, #16]
1000a7d8:	2180      	movs	r1, #128	; 0x80
1000a7da:	0209      	lsls	r1, r1, #8
1000a7dc:	430b      	orrs	r3, r1
1000a7de:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000a7e2:	e055      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7e4:	4a2c      	ldr	r2, [pc, #176]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7e6:	6913      	ldr	r3, [r2, #16]
1000a7e8:	2180      	movs	r1, #128	; 0x80
1000a7ea:	0249      	lsls	r1, r1, #9
1000a7ec:	430b      	orrs	r3, r1
1000a7ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000a7f2:	e04d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a7f4:	4a28      	ldr	r2, [pc, #160]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a7f6:	6913      	ldr	r3, [r2, #16]
1000a7f8:	2180      	movs	r1, #128	; 0x80
1000a7fa:	0289      	lsls	r1, r1, #10
1000a7fc:	430b      	orrs	r3, r1
1000a7fe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a800:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000a802:	e045      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a804:	4a24      	ldr	r2, [pc, #144]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a806:	6913      	ldr	r3, [r2, #16]
1000a808:	2180      	movs	r1, #128	; 0x80
1000a80a:	02c9      	lsls	r1, r1, #11
1000a80c:	430b      	orrs	r3, r1
1000a80e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a810:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000a812:	e03d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a814:	4a20      	ldr	r2, [pc, #128]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a816:	6913      	ldr	r3, [r2, #16]
1000a818:	2180      	movs	r1, #128	; 0x80
1000a81a:	0309      	lsls	r1, r1, #12
1000a81c:	430b      	orrs	r3, r1
1000a81e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a820:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000a822:	e035      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a824:	4a1c      	ldr	r2, [pc, #112]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a826:	6913      	ldr	r3, [r2, #16]
1000a828:	2180      	movs	r1, #128	; 0x80
1000a82a:	0349      	lsls	r1, r1, #13
1000a82c:	430b      	orrs	r3, r1
1000a82e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a830:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000a832:	e02d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a834:	4a18      	ldr	r2, [pc, #96]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a836:	6913      	ldr	r3, [r2, #16]
1000a838:	2180      	movs	r1, #128	; 0x80
1000a83a:	0389      	lsls	r1, r1, #14
1000a83c:	430b      	orrs	r3, r1
1000a83e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a840:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000a842:	e025      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a844:	4a14      	ldr	r2, [pc, #80]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a846:	6913      	ldr	r3, [r2, #16]
1000a848:	2180      	movs	r1, #128	; 0x80
1000a84a:	03c9      	lsls	r1, r1, #15
1000a84c:	430b      	orrs	r3, r1
1000a84e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a850:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000a852:	e01d      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a854:	4a10      	ldr	r2, [pc, #64]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a856:	6913      	ldr	r3, [r2, #16]
1000a858:	2180      	movs	r1, #128	; 0x80
1000a85a:	0409      	lsls	r1, r1, #16
1000a85c:	430b      	orrs	r3, r1
1000a85e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a860:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000a862:	e015      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a864:	4a0c      	ldr	r2, [pc, #48]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a866:	7d11      	ldrb	r1, [r2, #20]
1000a868:	2301      	movs	r3, #1
1000a86a:	430b      	orrs	r3, r1
1000a86c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a86e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000a870:	e00e      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a872:	4a09      	ldr	r2, [pc, #36]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a874:	7d11      	ldrb	r1, [r2, #20]
1000a876:	2302      	movs	r3, #2
1000a878:	430b      	orrs	r3, r1
1000a87a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a87c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000a87e:	e007      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a880:	4a05      	ldr	r2, [pc, #20]	; (1000a898 <system_clock_peripheral_enable+0x358>)
1000a882:	7d11      	ldrb	r1, [r2, #20]
1000a884:	2304      	movs	r3, #4
1000a886:	430b      	orrs	r3, r1
1000a888:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a88a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000a88c:	e000      	b.n	1000a890 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000a88e:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000a890:	bd00      	pop	{pc}
1000a892:	46c0      	nop			; (mov r8, r8)
1000a894:	10013134 	.word	0x10013134
1000a898:	4000b000 	.word	0x4000b000

1000a89c <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000a89c:	b500      	push	{lr}
	switch (peripheral) {
1000a89e:	2835      	cmp	r0, #53	; 0x35
1000a8a0:	d900      	bls.n	1000a8a4 <system_clock_peripheral_disable+0x8>
1000a8a2:	e17d      	b.n	1000aba0 <system_clock_peripheral_disable+0x304>
1000a8a4:	0080      	lsls	r0, r0, #2
1000a8a6:	4bbf      	ldr	r3, [pc, #764]	; (1000aba4 <system_clock_peripheral_disable+0x308>)
1000a8a8:	581b      	ldr	r3, [r3, r0]
1000a8aa:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8ac:	4abe      	ldr	r2, [pc, #760]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8ae:	68d3      	ldr	r3, [r2, #12]
1000a8b0:	2102      	movs	r1, #2
1000a8b2:	438b      	bics	r3, r1
1000a8b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8b6:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000a8b8:	e173      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8ba:	4abb      	ldr	r2, [pc, #748]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8bc:	68d3      	ldr	r3, [r2, #12]
1000a8be:	2104      	movs	r1, #4
1000a8c0:	438b      	bics	r3, r1
1000a8c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000a8c6:	e16c      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8c8:	4ab7      	ldr	r2, [pc, #732]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8ca:	68d3      	ldr	r3, [r2, #12]
1000a8cc:	2108      	movs	r1, #8
1000a8ce:	438b      	bics	r3, r1
1000a8d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000a8d4:	e165      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8d6:	4ab4      	ldr	r2, [pc, #720]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8d8:	68d3      	ldr	r3, [r2, #12]
1000a8da:	2110      	movs	r1, #16
1000a8dc:	438b      	bics	r3, r1
1000a8de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000a8e2:	e15e      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8e4:	4ab0      	ldr	r2, [pc, #704]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8e6:	68d3      	ldr	r3, [r2, #12]
1000a8e8:	2120      	movs	r1, #32
1000a8ea:	438b      	bics	r3, r1
1000a8ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000a8f0:	e157      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a8f2:	4aad      	ldr	r2, [pc, #692]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a8f4:	68d3      	ldr	r3, [r2, #12]
1000a8f6:	2180      	movs	r1, #128	; 0x80
1000a8f8:	438b      	bics	r3, r1
1000a8fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000a8fe:	e150      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a900:	4aa9      	ldr	r2, [pc, #676]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a902:	68d1      	ldr	r1, [r2, #12]
1000a904:	4ba9      	ldr	r3, [pc, #676]	; (1000abac <system_clock_peripheral_disable+0x310>)
1000a906:	400b      	ands	r3, r1
1000a908:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a90a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000a90c:	e149      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a90e:	4aa6      	ldr	r2, [pc, #664]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a910:	68d1      	ldr	r1, [r2, #12]
1000a912:	4ba7      	ldr	r3, [pc, #668]	; (1000abb0 <system_clock_peripheral_disable+0x314>)
1000a914:	400b      	ands	r3, r1
1000a916:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a918:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000a91a:	e142      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a91c:	4aa2      	ldr	r2, [pc, #648]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a91e:	68d1      	ldr	r1, [r2, #12]
1000a920:	4ba4      	ldr	r3, [pc, #656]	; (1000abb4 <system_clock_peripheral_disable+0x318>)
1000a922:	400b      	ands	r3, r1
1000a924:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a926:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000a928:	e13b      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a92a:	4a9f      	ldr	r2, [pc, #636]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a92c:	68d1      	ldr	r1, [r2, #12]
1000a92e:	4ba2      	ldr	r3, [pc, #648]	; (1000abb8 <system_clock_peripheral_disable+0x31c>)
1000a930:	400b      	ands	r3, r1
1000a932:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000a936:	e134      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a938:	4a9b      	ldr	r2, [pc, #620]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a93a:	68d1      	ldr	r1, [r2, #12]
1000a93c:	4b9f      	ldr	r3, [pc, #636]	; (1000abbc <system_clock_peripheral_disable+0x320>)
1000a93e:	400b      	ands	r3, r1
1000a940:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a942:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000a944:	e12d      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a946:	4a98      	ldr	r2, [pc, #608]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a948:	68d1      	ldr	r1, [r2, #12]
1000a94a:	4b9d      	ldr	r3, [pc, #628]	; (1000abc0 <system_clock_peripheral_disable+0x324>)
1000a94c:	400b      	ands	r3, r1
1000a94e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a950:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000a952:	e126      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a954:	4a94      	ldr	r2, [pc, #592]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a956:	68d1      	ldr	r1, [r2, #12]
1000a958:	4b9a      	ldr	r3, [pc, #616]	; (1000abc4 <system_clock_peripheral_disable+0x328>)
1000a95a:	400b      	ands	r3, r1
1000a95c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a95e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000a960:	e11f      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a962:	4a91      	ldr	r2, [pc, #580]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a964:	68d1      	ldr	r1, [r2, #12]
1000a966:	4b98      	ldr	r3, [pc, #608]	; (1000abc8 <system_clock_peripheral_disable+0x32c>)
1000a968:	400b      	ands	r3, r1
1000a96a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a96c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000a96e:	e118      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a970:	4a8d      	ldr	r2, [pc, #564]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a972:	68d1      	ldr	r1, [r2, #12]
1000a974:	4b95      	ldr	r3, [pc, #596]	; (1000abcc <system_clock_peripheral_disable+0x330>)
1000a976:	400b      	ands	r3, r1
1000a978:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a97a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000a97c:	e111      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a97e:	4a8a      	ldr	r2, [pc, #552]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a980:	68d1      	ldr	r1, [r2, #12]
1000a982:	4b93      	ldr	r3, [pc, #588]	; (1000abd0 <system_clock_peripheral_disable+0x334>)
1000a984:	400b      	ands	r3, r1
1000a986:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a988:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000a98a:	e10a      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a98c:	4a86      	ldr	r2, [pc, #536]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a98e:	68d1      	ldr	r1, [r2, #12]
1000a990:	4b90      	ldr	r3, [pc, #576]	; (1000abd4 <system_clock_peripheral_disable+0x338>)
1000a992:	400b      	ands	r3, r1
1000a994:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a996:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000a998:	e103      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a99a:	4a83      	ldr	r2, [pc, #524]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a99c:	68d1      	ldr	r1, [r2, #12]
1000a99e:	4b8e      	ldr	r3, [pc, #568]	; (1000abd8 <system_clock_peripheral_disable+0x33c>)
1000a9a0:	400b      	ands	r3, r1
1000a9a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000a9a6:	e0fc      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9a8:	4a7f      	ldr	r2, [pc, #508]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9aa:	68d1      	ldr	r1, [r2, #12]
1000a9ac:	4b8b      	ldr	r3, [pc, #556]	; (1000abdc <system_clock_peripheral_disable+0x340>)
1000a9ae:	400b      	ands	r3, r1
1000a9b0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000a9b4:	e0f5      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9b6:	4a7c      	ldr	r2, [pc, #496]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9b8:	68d1      	ldr	r1, [r2, #12]
1000a9ba:	4b89      	ldr	r3, [pc, #548]	; (1000abe0 <system_clock_peripheral_disable+0x344>)
1000a9bc:	400b      	ands	r3, r1
1000a9be:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000a9c2:	e0ee      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9c4:	4a78      	ldr	r2, [pc, #480]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9c6:	68d1      	ldr	r1, [r2, #12]
1000a9c8:	4b86      	ldr	r3, [pc, #536]	; (1000abe4 <system_clock_peripheral_disable+0x348>)
1000a9ca:	400b      	ands	r3, r1
1000a9cc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000a9d0:	e0e7      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9d2:	4a75      	ldr	r2, [pc, #468]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9d4:	68d1      	ldr	r1, [r2, #12]
1000a9d6:	4b84      	ldr	r3, [pc, #528]	; (1000abe8 <system_clock_peripheral_disable+0x34c>)
1000a9d8:	400b      	ands	r3, r1
1000a9da:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000a9de:	e0e0      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9e0:	4a71      	ldr	r2, [pc, #452]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9e2:	68d1      	ldr	r1, [r2, #12]
1000a9e4:	4b81      	ldr	r3, [pc, #516]	; (1000abec <system_clock_peripheral_disable+0x350>)
1000a9e6:	400b      	ands	r3, r1
1000a9e8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000a9ec:	e0d9      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9ee:	4a6e      	ldr	r2, [pc, #440]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9f0:	68d1      	ldr	r1, [r2, #12]
1000a9f2:	4b7f      	ldr	r3, [pc, #508]	; (1000abf0 <system_clock_peripheral_disable+0x354>)
1000a9f4:	400b      	ands	r3, r1
1000a9f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000a9fa:	e0d2      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000a9fc:	4a6a      	ldr	r2, [pc, #424]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000a9fe:	68d1      	ldr	r1, [r2, #12]
1000aa00:	4b7c      	ldr	r3, [pc, #496]	; (1000abf4 <system_clock_peripheral_disable+0x358>)
1000aa02:	400b      	ands	r3, r1
1000aa04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000aa08:	e0cb      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa0a:	4a67      	ldr	r2, [pc, #412]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa0c:	68d1      	ldr	r1, [r2, #12]
1000aa0e:	4b7a      	ldr	r3, [pc, #488]	; (1000abf8 <system_clock_peripheral_disable+0x35c>)
1000aa10:	400b      	ands	r3, r1
1000aa12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000aa16:	e0c4      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa18:	4a63      	ldr	r2, [pc, #396]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa1a:	68d1      	ldr	r1, [r2, #12]
1000aa1c:	4b77      	ldr	r3, [pc, #476]	; (1000abfc <system_clock_peripheral_disable+0x360>)
1000aa1e:	400b      	ands	r3, r1
1000aa20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000aa24:	e0bd      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa26:	4a60      	ldr	r2, [pc, #384]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa28:	6913      	ldr	r3, [r2, #16]
1000aa2a:	2101      	movs	r1, #1
1000aa2c:	438b      	bics	r3, r1
1000aa2e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000aa32:	e0b6      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa34:	4a5c      	ldr	r2, [pc, #368]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa36:	6913      	ldr	r3, [r2, #16]
1000aa38:	2102      	movs	r1, #2
1000aa3a:	438b      	bics	r3, r1
1000aa3c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000aa40:	e0af      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa42:	4a59      	ldr	r2, [pc, #356]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa44:	6913      	ldr	r3, [r2, #16]
1000aa46:	2104      	movs	r1, #4
1000aa48:	438b      	bics	r3, r1
1000aa4a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000aa4e:	e0a8      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa50:	4a55      	ldr	r2, [pc, #340]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa52:	6913      	ldr	r3, [r2, #16]
1000aa54:	2108      	movs	r1, #8
1000aa56:	438b      	bics	r3, r1
1000aa58:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000aa5c:	e0a1      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa5e:	4a52      	ldr	r2, [pc, #328]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa60:	6913      	ldr	r3, [r2, #16]
1000aa62:	2110      	movs	r1, #16
1000aa64:	438b      	bics	r3, r1
1000aa66:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000aa6a:	e09a      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa6c:	4a4e      	ldr	r2, [pc, #312]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa6e:	6913      	ldr	r3, [r2, #16]
1000aa70:	2120      	movs	r1, #32
1000aa72:	438b      	bics	r3, r1
1000aa74:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000aa78:	e093      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa7a:	4a4b      	ldr	r2, [pc, #300]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa7c:	6913      	ldr	r3, [r2, #16]
1000aa7e:	2140      	movs	r1, #64	; 0x40
1000aa80:	438b      	bics	r3, r1
1000aa82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000aa86:	e08c      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa88:	4a47      	ldr	r2, [pc, #284]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa8a:	6913      	ldr	r3, [r2, #16]
1000aa8c:	2180      	movs	r1, #128	; 0x80
1000aa8e:	438b      	bics	r3, r1
1000aa90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000aa94:	e085      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aa96:	4a44      	ldr	r2, [pc, #272]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aa98:	6911      	ldr	r1, [r2, #16]
1000aa9a:	4b44      	ldr	r3, [pc, #272]	; (1000abac <system_clock_peripheral_disable+0x310>)
1000aa9c:	400b      	ands	r3, r1
1000aa9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaa0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000aaa2:	e07e      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aaa4:	4a40      	ldr	r2, [pc, #256]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aaa6:	6911      	ldr	r1, [r2, #16]
1000aaa8:	4b55      	ldr	r3, [pc, #340]	; (1000ac00 <system_clock_peripheral_disable+0x364>)
1000aaaa:	400b      	ands	r3, r1
1000aaac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000aab0:	e077      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aab2:	4a3d      	ldr	r2, [pc, #244]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aab4:	6911      	ldr	r1, [r2, #16]
1000aab6:	4b53      	ldr	r3, [pc, #332]	; (1000ac04 <system_clock_peripheral_disable+0x368>)
1000aab8:	400b      	ands	r3, r1
1000aaba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aabc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000aabe:	e070      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aac0:	4a39      	ldr	r2, [pc, #228]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aac2:	6911      	ldr	r1, [r2, #16]
1000aac4:	4b3a      	ldr	r3, [pc, #232]	; (1000abb0 <system_clock_peripheral_disable+0x314>)
1000aac6:	400b      	ands	r3, r1
1000aac8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000aacc:	e069      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aace:	4a36      	ldr	r2, [pc, #216]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aad0:	6911      	ldr	r1, [r2, #16]
1000aad2:	4b38      	ldr	r3, [pc, #224]	; (1000abb4 <system_clock_peripheral_disable+0x318>)
1000aad4:	400b      	ands	r3, r1
1000aad6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aad8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000aada:	e062      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aadc:	4a32      	ldr	r2, [pc, #200]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aade:	6911      	ldr	r1, [r2, #16]
1000aae0:	4b35      	ldr	r3, [pc, #212]	; (1000abb8 <system_clock_peripheral_disable+0x31c>)
1000aae2:	400b      	ands	r3, r1
1000aae4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aae6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000aae8:	e05b      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aaea:	4a2f      	ldr	r2, [pc, #188]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aaec:	6911      	ldr	r1, [r2, #16]
1000aaee:	4b33      	ldr	r3, [pc, #204]	; (1000abbc <system_clock_peripheral_disable+0x320>)
1000aaf0:	400b      	ands	r3, r1
1000aaf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000aaf6:	e054      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aaf8:	4a2b      	ldr	r2, [pc, #172]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000aafa:	6911      	ldr	r1, [r2, #16]
1000aafc:	4b30      	ldr	r3, [pc, #192]	; (1000abc0 <system_clock_peripheral_disable+0x324>)
1000aafe:	400b      	ands	r3, r1
1000ab00:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ab04:	e04d      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab06:	4a28      	ldr	r2, [pc, #160]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab08:	6911      	ldr	r1, [r2, #16]
1000ab0a:	4b2e      	ldr	r3, [pc, #184]	; (1000abc4 <system_clock_peripheral_disable+0x328>)
1000ab0c:	400b      	ands	r3, r1
1000ab0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ab12:	e046      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab14:	4a24      	ldr	r2, [pc, #144]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab16:	6911      	ldr	r1, [r2, #16]
1000ab18:	4b2b      	ldr	r3, [pc, #172]	; (1000abc8 <system_clock_peripheral_disable+0x32c>)
1000ab1a:	400b      	ands	r3, r1
1000ab1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ab20:	e03f      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab22:	4a21      	ldr	r2, [pc, #132]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab24:	6911      	ldr	r1, [r2, #16]
1000ab26:	4b29      	ldr	r3, [pc, #164]	; (1000abcc <system_clock_peripheral_disable+0x330>)
1000ab28:	400b      	ands	r3, r1
1000ab2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ab2e:	e038      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab30:	4a1d      	ldr	r2, [pc, #116]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab32:	6911      	ldr	r1, [r2, #16]
1000ab34:	4b26      	ldr	r3, [pc, #152]	; (1000abd0 <system_clock_peripheral_disable+0x334>)
1000ab36:	400b      	ands	r3, r1
1000ab38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ab3c:	e031      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab3e:	4a1a      	ldr	r2, [pc, #104]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab40:	6911      	ldr	r1, [r2, #16]
1000ab42:	4b24      	ldr	r3, [pc, #144]	; (1000abd4 <system_clock_peripheral_disable+0x338>)
1000ab44:	400b      	ands	r3, r1
1000ab46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ab4a:	e02a      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab4c:	4a16      	ldr	r2, [pc, #88]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab4e:	6911      	ldr	r1, [r2, #16]
1000ab50:	4b21      	ldr	r3, [pc, #132]	; (1000abd8 <system_clock_peripheral_disable+0x33c>)
1000ab52:	400b      	ands	r3, r1
1000ab54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000ab58:	e023      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab5a:	4a13      	ldr	r2, [pc, #76]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab5c:	6911      	ldr	r1, [r2, #16]
1000ab5e:	4b1f      	ldr	r3, [pc, #124]	; (1000abdc <system_clock_peripheral_disable+0x340>)
1000ab60:	400b      	ands	r3, r1
1000ab62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000ab66:	e01c      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab68:	4a0f      	ldr	r2, [pc, #60]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab6a:	6911      	ldr	r1, [r2, #16]
1000ab6c:	4b1c      	ldr	r3, [pc, #112]	; (1000abe0 <system_clock_peripheral_disable+0x344>)
1000ab6e:	400b      	ands	r3, r1
1000ab70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000ab74:	e015      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ab76:	4a0c      	ldr	r2, [pc, #48]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab78:	7d13      	ldrb	r3, [r2, #20]
1000ab7a:	2101      	movs	r1, #1
1000ab7c:	438b      	bics	r3, r1
1000ab7e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000ab82:	e00e      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ab84:	4a08      	ldr	r2, [pc, #32]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab86:	7d13      	ldrb	r3, [r2, #20]
1000ab88:	2102      	movs	r1, #2
1000ab8a:	438b      	bics	r3, r1
1000ab8c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ab90:	e007      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ab92:	4a05      	ldr	r2, [pc, #20]	; (1000aba8 <system_clock_peripheral_disable+0x30c>)
1000ab94:	7d13      	ldrb	r3, [r2, #20]
1000ab96:	2104      	movs	r1, #4
1000ab98:	438b      	bics	r3, r1
1000ab9a:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000ab9e:	e000      	b.n	1000aba2 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000aba0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000aba2:	bd00      	pop	{pc}
1000aba4:	1001320c 	.word	0x1001320c
1000aba8:	4000b000 	.word	0x4000b000
1000abac:	fffffeff 	.word	0xfffffeff
1000abb0:	fffff7ff 	.word	0xfffff7ff
1000abb4:	ffffefff 	.word	0xffffefff
1000abb8:	ffffdfff 	.word	0xffffdfff
1000abbc:	ffffbfff 	.word	0xffffbfff
1000abc0:	ffff7fff 	.word	0xffff7fff
1000abc4:	fffeffff 	.word	0xfffeffff
1000abc8:	fffdffff 	.word	0xfffdffff
1000abcc:	fffbffff 	.word	0xfffbffff
1000abd0:	fff7ffff 	.word	0xfff7ffff
1000abd4:	ffefffff 	.word	0xffefffff
1000abd8:	ffdfffff 	.word	0xffdfffff
1000abdc:	ffbfffff 	.word	0xffbfffff
1000abe0:	ff7fffff 	.word	0xff7fffff
1000abe4:	feffffff 	.word	0xfeffffff
1000abe8:	fdffffff 	.word	0xfdffffff
1000abec:	fbffffff 	.word	0xfbffffff
1000abf0:	f7ffffff 	.word	0xf7ffffff
1000abf4:	efffffff 	.word	0xefffffff
1000abf8:	dfffffff 	.word	0xdfffffff
1000abfc:	bfffffff 	.word	0xbfffffff
1000ac00:	fffffdff 	.word	0xfffffdff
1000ac04:	fffffbff 	.word	0xfffffbff

1000ac08 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ac08:	b500      	push	{lr}
	switch (peripheral) {
1000ac0a:	2843      	cmp	r0, #67	; 0x43
1000ac0c:	d900      	bls.n	1000ac10 <system_peripheral_reset+0x8>
1000ac0e:	e223      	b.n	1000b058 <system_peripheral_reset+0x450>
1000ac10:	0080      	lsls	r0, r0, #2
1000ac12:	4be0      	ldr	r3, [pc, #896]	; (1000af94 <system_peripheral_reset+0x38c>)
1000ac14:	581b      	ldr	r3, [r3, r0]
1000ac16:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac18:	4bdf      	ldr	r3, [pc, #892]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac1a:	6859      	ldr	r1, [r3, #4]
1000ac1c:	2202      	movs	r2, #2
1000ac1e:	4391      	bics	r1, r2
1000ac20:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac22:	6859      	ldr	r1, [r3, #4]
1000ac24:	430a      	orrs	r2, r1
1000ac26:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac28:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ac2a:	e216      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac2c:	4bda      	ldr	r3, [pc, #872]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac2e:	6859      	ldr	r1, [r3, #4]
1000ac30:	2204      	movs	r2, #4
1000ac32:	4391      	bics	r1, r2
1000ac34:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac36:	6859      	ldr	r1, [r3, #4]
1000ac38:	430a      	orrs	r2, r1
1000ac3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac3c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ac3e:	e20c      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac40:	4bd5      	ldr	r3, [pc, #852]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac42:	6859      	ldr	r1, [r3, #4]
1000ac44:	2208      	movs	r2, #8
1000ac46:	4391      	bics	r1, r2
1000ac48:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac4a:	6859      	ldr	r1, [r3, #4]
1000ac4c:	430a      	orrs	r2, r1
1000ac4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac50:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ac52:	e202      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac54:	4bd0      	ldr	r3, [pc, #832]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac56:	6859      	ldr	r1, [r3, #4]
1000ac58:	2210      	movs	r2, #16
1000ac5a:	4391      	bics	r1, r2
1000ac5c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac5e:	6859      	ldr	r1, [r3, #4]
1000ac60:	430a      	orrs	r2, r1
1000ac62:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac64:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000ac66:	e1f8      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac68:	4bcb      	ldr	r3, [pc, #812]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac6a:	6859      	ldr	r1, [r3, #4]
1000ac6c:	2220      	movs	r2, #32
1000ac6e:	4391      	bics	r1, r2
1000ac70:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac72:	6859      	ldr	r1, [r3, #4]
1000ac74:	430a      	orrs	r2, r1
1000ac76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac78:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000ac7a:	e1ee      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac7c:	4bc6      	ldr	r3, [pc, #792]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac7e:	6859      	ldr	r1, [r3, #4]
1000ac80:	2240      	movs	r2, #64	; 0x40
1000ac82:	4391      	bics	r1, r2
1000ac84:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac86:	6859      	ldr	r1, [r3, #4]
1000ac88:	430a      	orrs	r2, r1
1000ac8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac8c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ac8e:	e1e4      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ac90:	4bc1      	ldr	r3, [pc, #772]	; (1000af98 <system_peripheral_reset+0x390>)
1000ac92:	6859      	ldr	r1, [r3, #4]
1000ac94:	2280      	movs	r2, #128	; 0x80
1000ac96:	4391      	bics	r1, r2
1000ac98:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ac9a:	6859      	ldr	r1, [r3, #4]
1000ac9c:	430a      	orrs	r2, r1
1000ac9e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aca0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000aca2:	e1da      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aca4:	4bbc      	ldr	r3, [pc, #752]	; (1000af98 <system_peripheral_reset+0x390>)
1000aca6:	6859      	ldr	r1, [r3, #4]
1000aca8:	4abc      	ldr	r2, [pc, #752]	; (1000af9c <system_peripheral_reset+0x394>)
1000acaa:	400a      	ands	r2, r1
1000acac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000acae:	685a      	ldr	r2, [r3, #4]
1000acb0:	2180      	movs	r1, #128	; 0x80
1000acb2:	0049      	lsls	r1, r1, #1
1000acb4:	430a      	orrs	r2, r1
1000acb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000acba:	e1ce      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000acbc:	4bb6      	ldr	r3, [pc, #728]	; (1000af98 <system_peripheral_reset+0x390>)
1000acbe:	6859      	ldr	r1, [r3, #4]
1000acc0:	4ab7      	ldr	r2, [pc, #732]	; (1000afa0 <system_peripheral_reset+0x398>)
1000acc2:	400a      	ands	r2, r1
1000acc4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000acc6:	685a      	ldr	r2, [r3, #4]
1000acc8:	2180      	movs	r1, #128	; 0x80
1000acca:	0089      	lsls	r1, r1, #2
1000accc:	430a      	orrs	r2, r1
1000acce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000acd2:	e1c2      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000acd4:	4bb0      	ldr	r3, [pc, #704]	; (1000af98 <system_peripheral_reset+0x390>)
1000acd6:	6859      	ldr	r1, [r3, #4]
1000acd8:	4ab2      	ldr	r2, [pc, #712]	; (1000afa4 <system_peripheral_reset+0x39c>)
1000acda:	400a      	ands	r2, r1
1000acdc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000acde:	685a      	ldr	r2, [r3, #4]
1000ace0:	2180      	movs	r1, #128	; 0x80
1000ace2:	00c9      	lsls	r1, r1, #3
1000ace4:	430a      	orrs	r2, r1
1000ace6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ace8:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000acea:	e1b6      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000acec:	4baa      	ldr	r3, [pc, #680]	; (1000af98 <system_peripheral_reset+0x390>)
1000acee:	6859      	ldr	r1, [r3, #4]
1000acf0:	4aad      	ldr	r2, [pc, #692]	; (1000afa8 <system_peripheral_reset+0x3a0>)
1000acf2:	400a      	ands	r2, r1
1000acf4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000acf6:	685a      	ldr	r2, [r3, #4]
1000acf8:	2180      	movs	r1, #128	; 0x80
1000acfa:	0109      	lsls	r1, r1, #4
1000acfc:	430a      	orrs	r2, r1
1000acfe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad00:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000ad02:	e1aa      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad04:	4ba4      	ldr	r3, [pc, #656]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad06:	6859      	ldr	r1, [r3, #4]
1000ad08:	4aa8      	ldr	r2, [pc, #672]	; (1000afac <system_peripheral_reset+0x3a4>)
1000ad0a:	400a      	ands	r2, r1
1000ad0c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad0e:	685a      	ldr	r2, [r3, #4]
1000ad10:	2180      	movs	r1, #128	; 0x80
1000ad12:	0149      	lsls	r1, r1, #5
1000ad14:	430a      	orrs	r2, r1
1000ad16:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad18:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000ad1a:	e19e      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad1c:	4b9e      	ldr	r3, [pc, #632]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad1e:	6859      	ldr	r1, [r3, #4]
1000ad20:	4aa3      	ldr	r2, [pc, #652]	; (1000afb0 <system_peripheral_reset+0x3a8>)
1000ad22:	400a      	ands	r2, r1
1000ad24:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad26:	685a      	ldr	r2, [r3, #4]
1000ad28:	2180      	movs	r1, #128	; 0x80
1000ad2a:	0189      	lsls	r1, r1, #6
1000ad2c:	430a      	orrs	r2, r1
1000ad2e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad30:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000ad32:	e192      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad34:	4b98      	ldr	r3, [pc, #608]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad36:	6859      	ldr	r1, [r3, #4]
1000ad38:	4a9e      	ldr	r2, [pc, #632]	; (1000afb4 <system_peripheral_reset+0x3ac>)
1000ad3a:	400a      	ands	r2, r1
1000ad3c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad3e:	685a      	ldr	r2, [r3, #4]
1000ad40:	2180      	movs	r1, #128	; 0x80
1000ad42:	01c9      	lsls	r1, r1, #7
1000ad44:	430a      	orrs	r2, r1
1000ad46:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad48:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000ad4a:	e186      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad4c:	4b92      	ldr	r3, [pc, #584]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad4e:	6859      	ldr	r1, [r3, #4]
1000ad50:	4a99      	ldr	r2, [pc, #612]	; (1000afb8 <system_peripheral_reset+0x3b0>)
1000ad52:	400a      	ands	r2, r1
1000ad54:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad56:	685a      	ldr	r2, [r3, #4]
1000ad58:	2180      	movs	r1, #128	; 0x80
1000ad5a:	0209      	lsls	r1, r1, #8
1000ad5c:	430a      	orrs	r2, r1
1000ad5e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad60:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000ad62:	e17a      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad64:	4b8c      	ldr	r3, [pc, #560]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad66:	6859      	ldr	r1, [r3, #4]
1000ad68:	4a94      	ldr	r2, [pc, #592]	; (1000afbc <system_peripheral_reset+0x3b4>)
1000ad6a:	400a      	ands	r2, r1
1000ad6c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad6e:	685a      	ldr	r2, [r3, #4]
1000ad70:	2180      	movs	r1, #128	; 0x80
1000ad72:	0249      	lsls	r1, r1, #9
1000ad74:	430a      	orrs	r2, r1
1000ad76:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad78:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000ad7a:	e16e      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad7c:	4b86      	ldr	r3, [pc, #536]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad7e:	6859      	ldr	r1, [r3, #4]
1000ad80:	4a8f      	ldr	r2, [pc, #572]	; (1000afc0 <system_peripheral_reset+0x3b8>)
1000ad82:	400a      	ands	r2, r1
1000ad84:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad86:	685a      	ldr	r2, [r3, #4]
1000ad88:	2180      	movs	r1, #128	; 0x80
1000ad8a:	0289      	lsls	r1, r1, #10
1000ad8c:	430a      	orrs	r2, r1
1000ad8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad90:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000ad92:	e162      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad94:	4b80      	ldr	r3, [pc, #512]	; (1000af98 <system_peripheral_reset+0x390>)
1000ad96:	6859      	ldr	r1, [r3, #4]
1000ad98:	4a8a      	ldr	r2, [pc, #552]	; (1000afc4 <system_peripheral_reset+0x3bc>)
1000ad9a:	400a      	ands	r2, r1
1000ad9c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad9e:	685a      	ldr	r2, [r3, #4]
1000ada0:	2180      	movs	r1, #128	; 0x80
1000ada2:	02c9      	lsls	r1, r1, #11
1000ada4:	430a      	orrs	r2, r1
1000ada6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada8:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000adaa:	e156      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000adac:	4b7a      	ldr	r3, [pc, #488]	; (1000af98 <system_peripheral_reset+0x390>)
1000adae:	6859      	ldr	r1, [r3, #4]
1000adb0:	4a85      	ldr	r2, [pc, #532]	; (1000afc8 <system_peripheral_reset+0x3c0>)
1000adb2:	400a      	ands	r2, r1
1000adb4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adb6:	685a      	ldr	r2, [r3, #4]
1000adb8:	2180      	movs	r1, #128	; 0x80
1000adba:	0309      	lsls	r1, r1, #12
1000adbc:	430a      	orrs	r2, r1
1000adbe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adc0:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000adc2:	e14a      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000adc4:	4b74      	ldr	r3, [pc, #464]	; (1000af98 <system_peripheral_reset+0x390>)
1000adc6:	6859      	ldr	r1, [r3, #4]
1000adc8:	4a80      	ldr	r2, [pc, #512]	; (1000afcc <system_peripheral_reset+0x3c4>)
1000adca:	400a      	ands	r2, r1
1000adcc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adce:	685a      	ldr	r2, [r3, #4]
1000add0:	2180      	movs	r1, #128	; 0x80
1000add2:	0349      	lsls	r1, r1, #13
1000add4:	430a      	orrs	r2, r1
1000add6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000add8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000adda:	e13e      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000addc:	4b6e      	ldr	r3, [pc, #440]	; (1000af98 <system_peripheral_reset+0x390>)
1000adde:	6859      	ldr	r1, [r3, #4]
1000ade0:	4a7b      	ldr	r2, [pc, #492]	; (1000afd0 <system_peripheral_reset+0x3c8>)
1000ade2:	400a      	ands	r2, r1
1000ade4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ade6:	685a      	ldr	r2, [r3, #4]
1000ade8:	2180      	movs	r1, #128	; 0x80
1000adea:	0389      	lsls	r1, r1, #14
1000adec:	430a      	orrs	r2, r1
1000adee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000adf2:	e132      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000adf4:	4b68      	ldr	r3, [pc, #416]	; (1000af98 <system_peripheral_reset+0x390>)
1000adf6:	6859      	ldr	r1, [r3, #4]
1000adf8:	4a76      	ldr	r2, [pc, #472]	; (1000afd4 <system_peripheral_reset+0x3cc>)
1000adfa:	400a      	ands	r2, r1
1000adfc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adfe:	685a      	ldr	r2, [r3, #4]
1000ae00:	2180      	movs	r1, #128	; 0x80
1000ae02:	03c9      	lsls	r1, r1, #15
1000ae04:	430a      	orrs	r2, r1
1000ae06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae08:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000ae0a:	e126      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae0c:	4b62      	ldr	r3, [pc, #392]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae0e:	6859      	ldr	r1, [r3, #4]
1000ae10:	4a71      	ldr	r2, [pc, #452]	; (1000afd8 <system_peripheral_reset+0x3d0>)
1000ae12:	400a      	ands	r2, r1
1000ae14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae16:	685a      	ldr	r2, [r3, #4]
1000ae18:	2180      	movs	r1, #128	; 0x80
1000ae1a:	0409      	lsls	r1, r1, #16
1000ae1c:	430a      	orrs	r2, r1
1000ae1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae20:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000ae22:	e11a      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae24:	4b5c      	ldr	r3, [pc, #368]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae26:	6859      	ldr	r1, [r3, #4]
1000ae28:	4a6c      	ldr	r2, [pc, #432]	; (1000afdc <system_peripheral_reset+0x3d4>)
1000ae2a:	400a      	ands	r2, r1
1000ae2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae2e:	685a      	ldr	r2, [r3, #4]
1000ae30:	2180      	movs	r1, #128	; 0x80
1000ae32:	0449      	lsls	r1, r1, #17
1000ae34:	430a      	orrs	r2, r1
1000ae36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae38:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000ae3a:	e10e      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae3c:	4b56      	ldr	r3, [pc, #344]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae3e:	6859      	ldr	r1, [r3, #4]
1000ae40:	4a67      	ldr	r2, [pc, #412]	; (1000afe0 <system_peripheral_reset+0x3d8>)
1000ae42:	400a      	ands	r2, r1
1000ae44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae46:	685a      	ldr	r2, [r3, #4]
1000ae48:	2180      	movs	r1, #128	; 0x80
1000ae4a:	0489      	lsls	r1, r1, #18
1000ae4c:	430a      	orrs	r2, r1
1000ae4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae50:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000ae52:	e102      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae54:	4b50      	ldr	r3, [pc, #320]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae56:	6859      	ldr	r1, [r3, #4]
1000ae58:	4a62      	ldr	r2, [pc, #392]	; (1000afe4 <system_peripheral_reset+0x3dc>)
1000ae5a:	400a      	ands	r2, r1
1000ae5c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae5e:	685a      	ldr	r2, [r3, #4]
1000ae60:	2180      	movs	r1, #128	; 0x80
1000ae62:	04c9      	lsls	r1, r1, #19
1000ae64:	430a      	orrs	r2, r1
1000ae66:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae68:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000ae6a:	e0f6      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae6c:	4b4a      	ldr	r3, [pc, #296]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae6e:	6859      	ldr	r1, [r3, #4]
1000ae70:	4a5d      	ldr	r2, [pc, #372]	; (1000afe8 <system_peripheral_reset+0x3e0>)
1000ae72:	400a      	ands	r2, r1
1000ae74:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae76:	685a      	ldr	r2, [r3, #4]
1000ae78:	2180      	movs	r1, #128	; 0x80
1000ae7a:	0509      	lsls	r1, r1, #20
1000ae7c:	430a      	orrs	r2, r1
1000ae7e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae80:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000ae82:	e0ea      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae84:	4b44      	ldr	r3, [pc, #272]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae86:	6859      	ldr	r1, [r3, #4]
1000ae88:	4a58      	ldr	r2, [pc, #352]	; (1000afec <system_peripheral_reset+0x3e4>)
1000ae8a:	400a      	ands	r2, r1
1000ae8c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae8e:	685a      	ldr	r2, [r3, #4]
1000ae90:	2180      	movs	r1, #128	; 0x80
1000ae92:	0549      	lsls	r1, r1, #21
1000ae94:	430a      	orrs	r2, r1
1000ae96:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae98:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000ae9a:	e0de      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae9c:	4b3e      	ldr	r3, [pc, #248]	; (1000af98 <system_peripheral_reset+0x390>)
1000ae9e:	6859      	ldr	r1, [r3, #4]
1000aea0:	4a53      	ldr	r2, [pc, #332]	; (1000aff0 <system_peripheral_reset+0x3e8>)
1000aea2:	400a      	ands	r2, r1
1000aea4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aea6:	685a      	ldr	r2, [r3, #4]
1000aea8:	2180      	movs	r1, #128	; 0x80
1000aeaa:	0589      	lsls	r1, r1, #22
1000aeac:	430a      	orrs	r2, r1
1000aeae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeb0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000aeb2:	e0d2      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aeb4:	4b38      	ldr	r3, [pc, #224]	; (1000af98 <system_peripheral_reset+0x390>)
1000aeb6:	6859      	ldr	r1, [r3, #4]
1000aeb8:	4a4e      	ldr	r2, [pc, #312]	; (1000aff4 <system_peripheral_reset+0x3ec>)
1000aeba:	400a      	ands	r2, r1
1000aebc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aebe:	685a      	ldr	r2, [r3, #4]
1000aec0:	2180      	movs	r1, #128	; 0x80
1000aec2:	05c9      	lsls	r1, r1, #23
1000aec4:	430a      	orrs	r2, r1
1000aec6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aec8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000aeca:	e0c6      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aecc:	4a32      	ldr	r2, [pc, #200]	; (1000af98 <system_peripheral_reset+0x390>)
1000aece:	6853      	ldr	r3, [r2, #4]
1000aed0:	005b      	lsls	r3, r3, #1
1000aed2:	085b      	lsrs	r3, r3, #1
1000aed4:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aed6:	6853      	ldr	r3, [r2, #4]
1000aed8:	2180      	movs	r1, #128	; 0x80
1000aeda:	0609      	lsls	r1, r1, #24
1000aedc:	430b      	orrs	r3, r1
1000aede:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aee0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000aee2:	e0ba      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000aee4:	4b2c      	ldr	r3, [pc, #176]	; (1000af98 <system_peripheral_reset+0x390>)
1000aee6:	891a      	ldrh	r2, [r3, #8]
1000aee8:	2101      	movs	r1, #1
1000aeea:	438a      	bics	r2, r1
1000aeec:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000aeee:	8919      	ldrh	r1, [r3, #8]
1000aef0:	2201      	movs	r2, #1
1000aef2:	430a      	orrs	r2, r1
1000aef4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aef6:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000aef8:	e0af      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000aefa:	4b27      	ldr	r3, [pc, #156]	; (1000af98 <system_peripheral_reset+0x390>)
1000aefc:	891a      	ldrh	r2, [r3, #8]
1000aefe:	2102      	movs	r1, #2
1000af00:	438a      	bics	r2, r1
1000af02:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af04:	8919      	ldrh	r1, [r3, #8]
1000af06:	2202      	movs	r2, #2
1000af08:	430a      	orrs	r2, r1
1000af0a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af0c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000af0e:	e0a4      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af10:	4b21      	ldr	r3, [pc, #132]	; (1000af98 <system_peripheral_reset+0x390>)
1000af12:	891a      	ldrh	r2, [r3, #8]
1000af14:	2104      	movs	r1, #4
1000af16:	438a      	bics	r2, r1
1000af18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af1a:	8919      	ldrh	r1, [r3, #8]
1000af1c:	2204      	movs	r2, #4
1000af1e:	430a      	orrs	r2, r1
1000af20:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af22:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000af24:	e099      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af26:	4b1c      	ldr	r3, [pc, #112]	; (1000af98 <system_peripheral_reset+0x390>)
1000af28:	891a      	ldrh	r2, [r3, #8]
1000af2a:	2108      	movs	r1, #8
1000af2c:	438a      	bics	r2, r1
1000af2e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af30:	8919      	ldrh	r1, [r3, #8]
1000af32:	2208      	movs	r2, #8
1000af34:	430a      	orrs	r2, r1
1000af36:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af38:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000af3a:	e08e      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af3c:	4b16      	ldr	r3, [pc, #88]	; (1000af98 <system_peripheral_reset+0x390>)
1000af3e:	891a      	ldrh	r2, [r3, #8]
1000af40:	2110      	movs	r1, #16
1000af42:	438a      	bics	r2, r1
1000af44:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af46:	8919      	ldrh	r1, [r3, #8]
1000af48:	2210      	movs	r2, #16
1000af4a:	430a      	orrs	r2, r1
1000af4c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af4e:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000af50:	e083      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af52:	4b11      	ldr	r3, [pc, #68]	; (1000af98 <system_peripheral_reset+0x390>)
1000af54:	891a      	ldrh	r2, [r3, #8]
1000af56:	2120      	movs	r1, #32
1000af58:	438a      	bics	r2, r1
1000af5a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af5c:	8919      	ldrh	r1, [r3, #8]
1000af5e:	2220      	movs	r2, #32
1000af60:	430a      	orrs	r2, r1
1000af62:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af64:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000af66:	e078      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af68:	4b0b      	ldr	r3, [pc, #44]	; (1000af98 <system_peripheral_reset+0x390>)
1000af6a:	891a      	ldrh	r2, [r3, #8]
1000af6c:	2140      	movs	r1, #64	; 0x40
1000af6e:	438a      	bics	r2, r1
1000af70:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af72:	8919      	ldrh	r1, [r3, #8]
1000af74:	2240      	movs	r2, #64	; 0x40
1000af76:	430a      	orrs	r2, r1
1000af78:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af7a:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000af7c:	e06d      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000af7e:	4b06      	ldr	r3, [pc, #24]	; (1000af98 <system_peripheral_reset+0x390>)
1000af80:	891a      	ldrh	r2, [r3, #8]
1000af82:	2180      	movs	r1, #128	; 0x80
1000af84:	438a      	bics	r2, r1
1000af86:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000af88:	8919      	ldrh	r1, [r3, #8]
1000af8a:	2280      	movs	r2, #128	; 0x80
1000af8c:	430a      	orrs	r2, r1
1000af8e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000af92:	e062      	b.n	1000b05a <system_peripheral_reset+0x452>
1000af94:	100132e4 	.word	0x100132e4
1000af98:	4000b000 	.word	0x4000b000
1000af9c:	fffffeff 	.word	0xfffffeff
1000afa0:	fffffdff 	.word	0xfffffdff
1000afa4:	fffffbff 	.word	0xfffffbff
1000afa8:	fffff7ff 	.word	0xfffff7ff
1000afac:	ffffefff 	.word	0xffffefff
1000afb0:	ffffdfff 	.word	0xffffdfff
1000afb4:	ffffbfff 	.word	0xffffbfff
1000afb8:	ffff7fff 	.word	0xffff7fff
1000afbc:	fffeffff 	.word	0xfffeffff
1000afc0:	fffdffff 	.word	0xfffdffff
1000afc4:	fffbffff 	.word	0xfffbffff
1000afc8:	fff7ffff 	.word	0xfff7ffff
1000afcc:	ffefffff 	.word	0xffefffff
1000afd0:	ffdfffff 	.word	0xffdfffff
1000afd4:	ffbfffff 	.word	0xffbfffff
1000afd8:	ff7fffff 	.word	0xff7fffff
1000afdc:	feffffff 	.word	0xfeffffff
1000afe0:	fdffffff 	.word	0xfdffffff
1000afe4:	fbffffff 	.word	0xfbffffff
1000afe8:	f7ffffff 	.word	0xf7ffffff
1000afec:	efffffff 	.word	0xefffffff
1000aff0:	dfffffff 	.word	0xdfffffff
1000aff4:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000aff8:	4b18      	ldr	r3, [pc, #96]	; (1000b05c <system_peripheral_reset+0x454>)
1000affa:	8919      	ldrh	r1, [r3, #8]
1000affc:	4a18      	ldr	r2, [pc, #96]	; (1000b060 <system_peripheral_reset+0x458>)
1000affe:	400a      	ands	r2, r1
1000b000:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b002:	8919      	ldrh	r1, [r3, #8]
1000b004:	2280      	movs	r2, #128	; 0x80
1000b006:	0052      	lsls	r2, r2, #1
1000b008:	430a      	orrs	r2, r1
1000b00a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b00c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b00e:	e024      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b010:	4b12      	ldr	r3, [pc, #72]	; (1000b05c <system_peripheral_reset+0x454>)
1000b012:	8919      	ldrh	r1, [r3, #8]
1000b014:	4a13      	ldr	r2, [pc, #76]	; (1000b064 <system_peripheral_reset+0x45c>)
1000b016:	400a      	ands	r2, r1
1000b018:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b01a:	8919      	ldrh	r1, [r3, #8]
1000b01c:	2280      	movs	r2, #128	; 0x80
1000b01e:	0092      	lsls	r2, r2, #2
1000b020:	430a      	orrs	r2, r1
1000b022:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b024:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b026:	e018      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b028:	4b0c      	ldr	r3, [pc, #48]	; (1000b05c <system_peripheral_reset+0x454>)
1000b02a:	8919      	ldrh	r1, [r3, #8]
1000b02c:	4a0e      	ldr	r2, [pc, #56]	; (1000b068 <system_peripheral_reset+0x460>)
1000b02e:	400a      	ands	r2, r1
1000b030:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b032:	8919      	ldrh	r1, [r3, #8]
1000b034:	2280      	movs	r2, #128	; 0x80
1000b036:	00d2      	lsls	r2, r2, #3
1000b038:	430a      	orrs	r2, r1
1000b03a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b03c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b03e:	e00c      	b.n	1000b05a <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b040:	4b06      	ldr	r3, [pc, #24]	; (1000b05c <system_peripheral_reset+0x454>)
1000b042:	8919      	ldrh	r1, [r3, #8]
1000b044:	4a09      	ldr	r2, [pc, #36]	; (1000b06c <system_peripheral_reset+0x464>)
1000b046:	400a      	ands	r2, r1
1000b048:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b04a:	8919      	ldrh	r1, [r3, #8]
1000b04c:	2280      	movs	r2, #128	; 0x80
1000b04e:	0112      	lsls	r2, r2, #4
1000b050:	430a      	orrs	r2, r1
1000b052:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b054:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b056:	e000      	b.n	1000b05a <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b058:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b05a:	bd00      	pop	{pc}
1000b05c:	4000b000 	.word	0x4000b000
1000b060:	fffffeff 	.word	0xfffffeff
1000b064:	fffffdff 	.word	0xfffffdff
1000b068:	fffffbff 	.word	0xfffffbff
1000b06c:	fffff7ff 	.word	0xfffff7ff

1000b070 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b070:	2380      	movs	r3, #128	; 0x80
1000b072:	04db      	lsls	r3, r3, #19
1000b074:	469c      	mov	ip, r3
1000b076:	4460      	add	r0, ip
1000b078:	0080      	lsls	r0, r0, #2
1000b07a:	6001      	str	r1, [r0, #0]
}
1000b07c:	4770      	bx	lr
1000b07e:	46c0      	nop			; (mov r8, r8)

1000b080 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b080:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b082:	4b20      	ldr	r3, [pc, #128]	; (1000b104 <uart_rx0_isr_handler+0x84>)
1000b084:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b086:	6823      	ldr	r3, [r4, #0]
1000b088:	7d1d      	ldrb	r5, [r3, #20]
1000b08a:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b08c:	066a      	lsls	r2, r5, #25
1000b08e:	d513      	bpl.n	1000b0b8 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b090:	211e      	movs	r1, #30
1000b092:	2222      	movs	r2, #34	; 0x22
1000b094:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b096:	7e1a      	ldrb	r2, [r3, #24]
1000b098:	3123      	adds	r1, #35	; 0x23
1000b09a:	438a      	bics	r2, r1
1000b09c:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b09e:	2321      	movs	r3, #33	; 0x21
1000b0a0:	5ce3      	ldrb	r3, [r4, r3]
1000b0a2:	071b      	lsls	r3, r3, #28
1000b0a4:	d506      	bpl.n	1000b0b4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b0a6:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b0a8:	5ce3      	ldrb	r3, [r4, r3]
1000b0aa:	071b      	lsls	r3, r3, #28
1000b0ac:	d502      	bpl.n	1000b0b4 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b0ae:	0020      	movs	r0, r4
1000b0b0:	6923      	ldr	r3, [r4, #16]
1000b0b2:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b0b4:	6823      	ldr	r3, [r4, #0]
1000b0b6:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b0b8:	07eb      	lsls	r3, r5, #31
1000b0ba:	d522      	bpl.n	1000b102 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b0bc:	6823      	ldr	r3, [r4, #0]
1000b0be:	7c1b      	ldrb	r3, [r3, #16]
1000b0c0:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b0c2:	6962      	ldr	r2, [r4, #20]
1000b0c4:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b0c6:	6963      	ldr	r3, [r4, #20]
1000b0c8:	3301      	adds	r3, #1
1000b0ca:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b0cc:	8ba3      	ldrh	r3, [r4, #28]
1000b0ce:	3b01      	subs	r3, #1
1000b0d0:	b29b      	uxth	r3, r3
1000b0d2:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b0d4:	8ba3      	ldrh	r3, [r4, #28]
1000b0d6:	b29b      	uxth	r3, r3
1000b0d8:	2b00      	cmp	r3, #0
1000b0da:	d112      	bne.n	1000b102 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b0dc:	3321      	adds	r3, #33	; 0x21
1000b0de:	5ce3      	ldrb	r3, [r4, r3]
1000b0e0:	075b      	lsls	r3, r3, #29
1000b0e2:	d50e      	bpl.n	1000b102 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b0e4:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b0e6:	5ce3      	ldrb	r3, [r4, r3]
1000b0e8:	075b      	lsls	r3, r3, #29
1000b0ea:	d50a      	bpl.n	1000b102 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b0ec:	2200      	movs	r2, #0
1000b0ee:	2322      	movs	r3, #34	; 0x22
1000b0f0:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b0f2:	6822      	ldr	r2, [r4, #0]
1000b0f4:	7e13      	ldrb	r3, [r2, #24]
1000b0f6:	2101      	movs	r1, #1
1000b0f8:	438b      	bics	r3, r1
1000b0fa:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b0fc:	68e3      	ldr	r3, [r4, #12]
1000b0fe:	0020      	movs	r0, r4
1000b100:	4798      	blx	r3
			}
		}
	}
}
1000b102:	bd70      	pop	{r4, r5, r6, pc}
1000b104:	10015c28 	.word	0x10015c28

1000b108 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b108:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b10a:	4b21      	ldr	r3, [pc, #132]	; (1000b190 <uart_tx0_isr_handler+0x88>)
1000b10c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b10e:	6823      	ldr	r3, [r4, #0]
1000b110:	791d      	ldrb	r5, [r3, #4]
1000b112:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b114:	07ea      	lsls	r2, r5, #31
1000b116:	d517      	bpl.n	1000b148 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b118:	69a2      	ldr	r2, [r4, #24]
1000b11a:	7811      	ldrb	r1, [r2, #0]
1000b11c:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b11e:	3201      	adds	r2, #1
1000b120:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b122:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b124:	8be3      	ldrh	r3, [r4, #30]
1000b126:	3b01      	subs	r3, #1
1000b128:	b29b      	uxth	r3, r3
1000b12a:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b12c:	8be3      	ldrh	r3, [r4, #30]
1000b12e:	b29b      	uxth	r3, r3
1000b130:	2b00      	cmp	r3, #0
1000b132:	d109      	bne.n	1000b148 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b134:	6822      	ldr	r2, [r4, #0]
1000b136:	7a13      	ldrb	r3, [r2, #8]
1000b138:	2101      	movs	r1, #1
1000b13a:	438b      	bics	r3, r1
1000b13c:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b13e:	6822      	ldr	r2, [r4, #0]
1000b140:	7a11      	ldrb	r1, [r2, #8]
1000b142:	2310      	movs	r3, #16
1000b144:	430b      	orrs	r3, r1
1000b146:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b148:	06eb      	lsls	r3, r5, #27
1000b14a:	d512      	bpl.n	1000b172 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b14c:	2321      	movs	r3, #33	; 0x21
1000b14e:	5ce3      	ldrb	r3, [r4, r3]
1000b150:	07db      	lsls	r3, r3, #31
1000b152:	d50e      	bpl.n	1000b172 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b154:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b156:	5ce3      	ldrb	r3, [r4, r3]
1000b158:	07db      	lsls	r3, r3, #31
1000b15a:	d50a      	bpl.n	1000b172 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b15c:	2200      	movs	r2, #0
1000b15e:	2322      	movs	r3, #34	; 0x22
1000b160:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b162:	6822      	ldr	r2, [r4, #0]
1000b164:	7a13      	ldrb	r3, [r2, #8]
1000b166:	2110      	movs	r1, #16
1000b168:	438b      	bics	r3, r1
1000b16a:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b16c:	0020      	movs	r0, r4
1000b16e:	6863      	ldr	r3, [r4, #4]
1000b170:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b172:	06ab      	lsls	r3, r5, #26
1000b174:	d50a      	bpl.n	1000b18c <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b176:	2321      	movs	r3, #33	; 0x21
1000b178:	5ce3      	ldrb	r3, [r4, r3]
1000b17a:	079b      	lsls	r3, r3, #30
1000b17c:	d506      	bpl.n	1000b18c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b17e:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b180:	5ce3      	ldrb	r3, [r4, r3]
1000b182:	079b      	lsls	r3, r3, #30
1000b184:	d502      	bpl.n	1000b18c <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b186:	68a3      	ldr	r3, [r4, #8]
1000b188:	0020      	movs	r0, r4
1000b18a:	4798      	blx	r3
		}

	}
}
1000b18c:	bd70      	pop	{r4, r5, r6, pc}
1000b18e:	46c0      	nop			; (mov r8, r8)
1000b190:	10015c28 	.word	0x10015c28

1000b194 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b194:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b196:	4b20      	ldr	r3, [pc, #128]	; (1000b218 <uart_rx1_isr_handler+0x84>)
1000b198:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b19a:	6823      	ldr	r3, [r4, #0]
1000b19c:	7d1d      	ldrb	r5, [r3, #20]
1000b19e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b1a0:	066a      	lsls	r2, r5, #25
1000b1a2:	d513      	bpl.n	1000b1cc <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b1a4:	211e      	movs	r1, #30
1000b1a6:	2222      	movs	r2, #34	; 0x22
1000b1a8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b1aa:	7e1a      	ldrb	r2, [r3, #24]
1000b1ac:	3123      	adds	r1, #35	; 0x23
1000b1ae:	438a      	bics	r2, r1
1000b1b0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b1b2:	2321      	movs	r3, #33	; 0x21
1000b1b4:	5ce3      	ldrb	r3, [r4, r3]
1000b1b6:	071b      	lsls	r3, r3, #28
1000b1b8:	d506      	bpl.n	1000b1c8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b1ba:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b1bc:	5ce3      	ldrb	r3, [r4, r3]
1000b1be:	071b      	lsls	r3, r3, #28
1000b1c0:	d502      	bpl.n	1000b1c8 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b1c2:	0020      	movs	r0, r4
1000b1c4:	6923      	ldr	r3, [r4, #16]
1000b1c6:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b1c8:	6823      	ldr	r3, [r4, #0]
1000b1ca:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b1cc:	07eb      	lsls	r3, r5, #31
1000b1ce:	d522      	bpl.n	1000b216 <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b1d0:	6823      	ldr	r3, [r4, #0]
1000b1d2:	7c1b      	ldrb	r3, [r3, #16]
1000b1d4:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b1d6:	6962      	ldr	r2, [r4, #20]
1000b1d8:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b1da:	6963      	ldr	r3, [r4, #20]
1000b1dc:	3301      	adds	r3, #1
1000b1de:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b1e0:	8ba3      	ldrh	r3, [r4, #28]
1000b1e2:	3b01      	subs	r3, #1
1000b1e4:	b29b      	uxth	r3, r3
1000b1e6:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b1e8:	8ba3      	ldrh	r3, [r4, #28]
1000b1ea:	b29b      	uxth	r3, r3
1000b1ec:	2b00      	cmp	r3, #0
1000b1ee:	d112      	bne.n	1000b216 <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b1f0:	3321      	adds	r3, #33	; 0x21
1000b1f2:	5ce3      	ldrb	r3, [r4, r3]
1000b1f4:	075b      	lsls	r3, r3, #29
1000b1f6:	d50e      	bpl.n	1000b216 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b1f8:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b1fa:	5ce3      	ldrb	r3, [r4, r3]
1000b1fc:	075b      	lsls	r3, r3, #29
1000b1fe:	d50a      	bpl.n	1000b216 <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b200:	2200      	movs	r2, #0
1000b202:	2322      	movs	r3, #34	; 0x22
1000b204:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b206:	6822      	ldr	r2, [r4, #0]
1000b208:	7e13      	ldrb	r3, [r2, #24]
1000b20a:	2101      	movs	r1, #1
1000b20c:	438b      	bics	r3, r1
1000b20e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b210:	68e3      	ldr	r3, [r4, #12]
1000b212:	0020      	movs	r0, r4
1000b214:	4798      	blx	r3
			}
		}
	}
}
1000b216:	bd70      	pop	{r4, r5, r6, pc}
1000b218:	10015c28 	.word	0x10015c28

1000b21c <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b21c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b21e:	4b21      	ldr	r3, [pc, #132]	; (1000b2a4 <uart_tx1_isr_handler+0x88>)
1000b220:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b222:	6823      	ldr	r3, [r4, #0]
1000b224:	791d      	ldrb	r5, [r3, #4]
1000b226:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b228:	07ea      	lsls	r2, r5, #31
1000b22a:	d517      	bpl.n	1000b25c <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b22c:	69a2      	ldr	r2, [r4, #24]
1000b22e:	7811      	ldrb	r1, [r2, #0]
1000b230:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b232:	3201      	adds	r2, #1
1000b234:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b236:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b238:	8be3      	ldrh	r3, [r4, #30]
1000b23a:	3b01      	subs	r3, #1
1000b23c:	b29b      	uxth	r3, r3
1000b23e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b240:	8be3      	ldrh	r3, [r4, #30]
1000b242:	b29b      	uxth	r3, r3
1000b244:	2b00      	cmp	r3, #0
1000b246:	d109      	bne.n	1000b25c <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b248:	6822      	ldr	r2, [r4, #0]
1000b24a:	7a13      	ldrb	r3, [r2, #8]
1000b24c:	2101      	movs	r1, #1
1000b24e:	438b      	bics	r3, r1
1000b250:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b252:	6822      	ldr	r2, [r4, #0]
1000b254:	7a11      	ldrb	r1, [r2, #8]
1000b256:	2310      	movs	r3, #16
1000b258:	430b      	orrs	r3, r1
1000b25a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b25c:	06eb      	lsls	r3, r5, #27
1000b25e:	d512      	bpl.n	1000b286 <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b260:	2321      	movs	r3, #33	; 0x21
1000b262:	5ce3      	ldrb	r3, [r4, r3]
1000b264:	07db      	lsls	r3, r3, #31
1000b266:	d50e      	bpl.n	1000b286 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b268:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b26a:	5ce3      	ldrb	r3, [r4, r3]
1000b26c:	07db      	lsls	r3, r3, #31
1000b26e:	d50a      	bpl.n	1000b286 <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b270:	2200      	movs	r2, #0
1000b272:	2322      	movs	r3, #34	; 0x22
1000b274:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b276:	6822      	ldr	r2, [r4, #0]
1000b278:	7a13      	ldrb	r3, [r2, #8]
1000b27a:	2110      	movs	r1, #16
1000b27c:	438b      	bics	r3, r1
1000b27e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b280:	0020      	movs	r0, r4
1000b282:	6863      	ldr	r3, [r4, #4]
1000b284:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b286:	06ab      	lsls	r3, r5, #26
1000b288:	d50a      	bpl.n	1000b2a0 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b28a:	2321      	movs	r3, #33	; 0x21
1000b28c:	5ce3      	ldrb	r3, [r4, r3]
1000b28e:	079b      	lsls	r3, r3, #30
1000b290:	d506      	bpl.n	1000b2a0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b292:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b294:	5ce3      	ldrb	r3, [r4, r3]
1000b296:	079b      	lsls	r3, r3, #30
1000b298:	d502      	bpl.n	1000b2a0 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b29a:	68a3      	ldr	r3, [r4, #8]
1000b29c:	0020      	movs	r0, r4
1000b29e:	4798      	blx	r3
		}

	}
}
1000b2a0:	bd70      	pop	{r4, r5, r6, pc}
1000b2a2:	46c0      	nop			; (mov r8, r8)
1000b2a4:	10015c28 	.word	0x10015c28

1000b2a8 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b2a8:	23e1      	movs	r3, #225	; 0xe1
1000b2aa:	025b      	lsls	r3, r3, #9
1000b2ac:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b2ae:	2300      	movs	r3, #0
1000b2b0:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b2b2:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b2b4:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b2b6:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b2b8:	3302      	adds	r3, #2
1000b2ba:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b2bc:	2203      	movs	r2, #3
1000b2be:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b2c0:	3201      	adds	r2, #1
1000b2c2:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b2c4:	3201      	adds	r2, #1
1000b2c6:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b2c8:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b2ca:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b2cc:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b2ce:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b2d0:	4770      	bx	lr
1000b2d2:	46c0      	nop			; (mov r8, r8)

1000b2d4 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b2d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b2d6:	464f      	mov	r7, r9
1000b2d8:	4646      	mov	r6, r8
1000b2da:	b4c0      	push	{r6, r7}
1000b2dc:	0005      	movs	r5, r0
1000b2de:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b2e0:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b2e2:	2300      	movs	r3, #0
1000b2e4:	6043      	str	r3, [r0, #4]
1000b2e6:	6083      	str	r3, [r0, #8]
1000b2e8:	60c3      	str	r3, [r0, #12]
1000b2ea:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b2ec:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b2ee:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b2f0:	2200      	movs	r2, #0
1000b2f2:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b2f4:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b2f6:	3320      	adds	r3, #32
1000b2f8:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b2fa:	3301      	adds	r3, #1
1000b2fc:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b2fe:	3301      	adds	r3, #1
1000b300:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b302:	4b55      	ldr	r3, [pc, #340]	; (1000b458 <uart_init+0x184>)
1000b304:	4299      	cmp	r1, r3
1000b306:	d118      	bne.n	1000b33a <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b308:	2009      	movs	r0, #9
1000b30a:	4c54      	ldr	r4, [pc, #336]	; (1000b45c <uart_init+0x188>)
1000b30c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b30e:	200a      	movs	r0, #10
1000b310:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b312:	2009      	movs	r0, #9
1000b314:	4c52      	ldr	r4, [pc, #328]	; (1000b460 <uart_init+0x18c>)
1000b316:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b318:	200a      	movs	r0, #10
1000b31a:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b31c:	4b51      	ldr	r3, [pc, #324]	; (1000b464 <uart_init+0x190>)
1000b31e:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b320:	4951      	ldr	r1, [pc, #324]	; (1000b468 <uart_init+0x194>)
1000b322:	2010      	movs	r0, #16
1000b324:	4c51      	ldr	r4, [pc, #324]	; (1000b46c <uart_init+0x198>)
1000b326:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b328:	4951      	ldr	r1, [pc, #324]	; (1000b470 <uart_init+0x19c>)
1000b32a:	2011      	movs	r0, #17
1000b32c:	47a0      	blx	r4
1000b32e:	4b51      	ldr	r3, [pc, #324]	; (1000b474 <uart_init+0x1a0>)
1000b330:	2201      	movs	r2, #1
1000b332:	601a      	str	r2, [r3, #0]
1000b334:	3201      	adds	r2, #1
1000b336:	601a      	str	r2, [r3, #0]
1000b338:	e01a      	b.n	1000b370 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b33a:	4b4f      	ldr	r3, [pc, #316]	; (1000b478 <uart_init+0x1a4>)
1000b33c:	4299      	cmp	r1, r3
1000b33e:	d117      	bne.n	1000b370 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b340:	200b      	movs	r0, #11
1000b342:	4c46      	ldr	r4, [pc, #280]	; (1000b45c <uart_init+0x188>)
1000b344:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b346:	200c      	movs	r0, #12
1000b348:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b34a:	200b      	movs	r0, #11
1000b34c:	4c44      	ldr	r4, [pc, #272]	; (1000b460 <uart_init+0x18c>)
1000b34e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b350:	200c      	movs	r0, #12
1000b352:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b354:	4b43      	ldr	r3, [pc, #268]	; (1000b464 <uart_init+0x190>)
1000b356:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b358:	4948      	ldr	r1, [pc, #288]	; (1000b47c <uart_init+0x1a8>)
1000b35a:	2012      	movs	r0, #18
1000b35c:	4c43      	ldr	r4, [pc, #268]	; (1000b46c <uart_init+0x198>)
1000b35e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b360:	4947      	ldr	r1, [pc, #284]	; (1000b480 <uart_init+0x1ac>)
1000b362:	2013      	movs	r0, #19
1000b364:	47a0      	blx	r4
1000b366:	4b43      	ldr	r3, [pc, #268]	; (1000b474 <uart_init+0x1a0>)
1000b368:	2204      	movs	r2, #4
1000b36a:	601a      	str	r2, [r3, #0]
1000b36c:	3204      	adds	r2, #4
1000b36e:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b370:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b372:	2204      	movs	r2, #4
1000b374:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b376:	2b00      	cmp	r3, #0
1000b378:	d152      	bne.n	1000b420 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b37a:	3302      	adds	r3, #2
1000b37c:	4698      	mov	r8, r3
1000b37e:	e04f      	b.n	1000b420 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b380:	8a31      	ldrh	r1, [r6, #16]
1000b382:	ce01      	ldmia	r6!, {r0}
1000b384:	b2c0      	uxtb	r0, r0
1000b386:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b388:	3401      	adds	r4, #1
1000b38a:	b2e4      	uxtb	r4, r4
1000b38c:	4544      	cmp	r4, r8
1000b38e:	d3f7      	bcc.n	1000b380 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b390:	682b      	ldr	r3, [r5, #0]
1000b392:	7d1a      	ldrb	r2, [r3, #20]
1000b394:	07d2      	lsls	r2, r2, #31
1000b396:	d504      	bpl.n	1000b3a2 <uart_init+0xce>
1000b398:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b39a:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b39c:	7d1a      	ldrb	r2, [r3, #20]
1000b39e:	420a      	tst	r2, r1
1000b3a0:	d1fb      	bne.n	1000b39a <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b3a2:	2100      	movs	r1, #0
1000b3a4:	2220      	movs	r2, #32
1000b3a6:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b3a8:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b3aa:	1e59      	subs	r1, r3, #1
1000b3ac:	418b      	sbcs	r3, r1
1000b3ae:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b3b0:	793b      	ldrb	r3, [r7, #4]
1000b3b2:	797a      	ldrb	r2, [r7, #5]
1000b3b4:	4313      	orrs	r3, r2
1000b3b6:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b3b8:	79ba      	ldrb	r2, [r7, #6]
1000b3ba:	2a02      	cmp	r2, #2
1000b3bc:	d00d      	beq.n	1000b3da <uart_init+0x106>
1000b3be:	b2d1      	uxtb	r1, r2
1000b3c0:	2902      	cmp	r1, #2
1000b3c2:	d802      	bhi.n	1000b3ca <uart_init+0xf6>
1000b3c4:	2a01      	cmp	r2, #1
1000b3c6:	d005      	beq.n	1000b3d4 <uart_init+0x100>
1000b3c8:	e00f      	b.n	1000b3ea <uart_init+0x116>
1000b3ca:	2a03      	cmp	r2, #3
1000b3cc:	d008      	beq.n	1000b3e0 <uart_init+0x10c>
1000b3ce:	2a04      	cmp	r2, #4
1000b3d0:	d009      	beq.n	1000b3e6 <uart_init+0x112>
1000b3d2:	e00a      	b.n	1000b3ea <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b3d4:	2202      	movs	r2, #2
1000b3d6:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b3d8:	e007      	b.n	1000b3ea <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b3da:	2206      	movs	r2, #6
1000b3dc:	4313      	orrs	r3, r2
			break;
1000b3de:	e004      	b.n	1000b3ea <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b3e0:	220a      	movs	r2, #10
1000b3e2:	4313      	orrs	r3, r2
			break;
1000b3e4:	e001      	b.n	1000b3ea <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b3e6:	220e      	movs	r2, #14
1000b3e8:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b3ea:	2220      	movs	r2, #32
1000b3ec:	6829      	ldr	r1, [r5, #0]
1000b3ee:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b3f0:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b3f2:	4b24      	ldr	r3, [pc, #144]	; (1000b484 <uart_init+0x1b0>)
1000b3f4:	4798      	blx	r3
1000b3f6:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b3f8:	0031      	movs	r1, r6
1000b3fa:	4b23      	ldr	r3, [pc, #140]	; (1000b488 <uart_init+0x1b4>)
1000b3fc:	4798      	blx	r3
1000b3fe:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b400:	0400      	lsls	r0, r0, #16
1000b402:	0c00      	lsrs	r0, r0, #16
1000b404:	4370      	muls	r0, r6
1000b406:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b408:	0931      	lsrs	r1, r6, #4
1000b40a:	4288      	cmp	r0, r1
1000b40c:	d906      	bls.n	1000b41c <uart_init+0x148>
1000b40e:	2300      	movs	r3, #0
		i++;
1000b410:	3301      	adds	r3, #1
1000b412:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b414:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b416:	4288      	cmp	r0, r1
1000b418:	d8fa      	bhi.n	1000b410 <uart_init+0x13c>
1000b41a:	e007      	b.n	1000b42c <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b41c:	2300      	movs	r3, #0
1000b41e:	e005      	b.n	1000b42c <uart_init+0x158>
1000b420:	003e      	movs	r6, r7
1000b422:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b424:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b426:	4b19      	ldr	r3, [pc, #100]	; (1000b48c <uart_init+0x1b8>)
1000b428:	4699      	mov	r9, r3
1000b42a:	e7a9      	b.n	1000b380 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b42c:	2100      	movs	r1, #0
1000b42e:	2028      	movs	r0, #40	; 0x28
1000b430:	682c      	ldr	r4, [r5, #0]
1000b432:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b434:	3301      	adds	r3, #1
1000b436:	071b      	lsls	r3, r3, #28
1000b438:	0f5b      	lsrs	r3, r3, #29
1000b43a:	00d2      	lsls	r2, r2, #3
1000b43c:	4313      	orrs	r3, r2
1000b43e:	b29b      	uxth	r3, r3
1000b440:	682a      	ldr	r2, [r5, #0]
1000b442:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b444:	682b      	ldr	r3, [r5, #0]
1000b446:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b448:	682b      	ldr	r3, [r5, #0]
1000b44a:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b44c:	2000      	movs	r0, #0
1000b44e:	bc0c      	pop	{r2, r3}
1000b450:	4690      	mov	r8, r2
1000b452:	4699      	mov	r9, r3
1000b454:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b456:	46c0      	nop			; (mov r8, r8)
1000b458:	40004000 	.word	0x40004000
1000b45c:	1000ac09 	.word	0x1000ac09
1000b460:	1000a541 	.word	0x1000a541
1000b464:	10015c28 	.word	0x10015c28
1000b468:	1000b081 	.word	0x1000b081
1000b46c:	1000b071 	.word	0x1000b071
1000b470:	1000b109 	.word	0x1000b109
1000b474:	e000e100 	.word	0xe000e100
1000b478:	40005000 	.word	0x40005000
1000b47c:	1000b195 	.word	0x1000b195
1000b480:	1000b21d 	.word	0x1000b21d
1000b484:	1000a535 	.word	0x1000a535
1000b488:	10010a41 	.word	0x10010a41
1000b48c:	1000a191 	.word	0x1000a191

1000b490 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b490:	6802      	ldr	r2, [r0, #0]
1000b492:	2001      	movs	r0, #1
1000b494:	7913      	ldrb	r3, [r2, #4]
1000b496:	4203      	tst	r3, r0
1000b498:	d0fc      	beq.n	1000b494 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b49a:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b49c:	2000      	movs	r0, #0
1000b49e:	4770      	bx	lr

1000b4a0 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b4a0:	6802      	ldr	r2, [r0, #0]
1000b4a2:	2001      	movs	r0, #1
1000b4a4:	7d13      	ldrb	r3, [r2, #20]
1000b4a6:	4203      	tst	r3, r0
1000b4a8:	d0fc      	beq.n	1000b4a4 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b4aa:	7c13      	ldrb	r3, [r2, #16]
1000b4ac:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b4ae:	2000      	movs	r0, #0
1000b4b0:	4770      	bx	lr
1000b4b2:	46c0      	nop			; (mov r8, r8)

1000b4b4 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b4b4:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b4b6:	2a00      	cmp	r2, #0
1000b4b8:	d00d      	beq.n	1000b4d6 <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b4ba:	330b      	adds	r3, #11
1000b4bc:	5cc3      	ldrb	r3, [r0, r3]
1000b4be:	b2db      	uxtb	r3, r3
1000b4c0:	2b05      	cmp	r3, #5
1000b4c2:	d008      	beq.n	1000b4d6 <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b4c4:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b4c6:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b4c8:	2205      	movs	r2, #5
1000b4ca:	2322      	movs	r3, #34	; 0x22
1000b4cc:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b4ce:	6803      	ldr	r3, [r0, #0]
1000b4d0:	3a04      	subs	r2, #4
1000b4d2:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b4d4:	2300      	movs	r3, #0
}
1000b4d6:	0018      	movs	r0, r3
1000b4d8:	4770      	bx	lr
1000b4da:	46c0      	nop			; (mov r8, r8)

1000b4dc <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b4dc:	0093      	lsls	r3, r2, #2
1000b4de:	18c3      	adds	r3, r0, r3
1000b4e0:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b4e2:	2120      	movs	r1, #32
1000b4e4:	2301      	movs	r3, #1
1000b4e6:	4093      	lsls	r3, r2
1000b4e8:	5c42      	ldrb	r2, [r0, r1]
1000b4ea:	4313      	orrs	r3, r2
1000b4ec:	5443      	strb	r3, [r0, r1]
}
1000b4ee:	4770      	bx	lr

1000b4f0 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b4f0:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b4f2:	2221      	movs	r2, #33	; 0x21
1000b4f4:	2301      	movs	r3, #1
1000b4f6:	408b      	lsls	r3, r1
1000b4f8:	5c84      	ldrb	r4, [r0, r2]
1000b4fa:	4323      	orrs	r3, r4
1000b4fc:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b4fe:	2901      	cmp	r1, #1
1000b500:	d104      	bne.n	1000b50c <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b502:	6802      	ldr	r2, [r0, #0]
1000b504:	7a11      	ldrb	r1, [r2, #8]
1000b506:	2320      	movs	r3, #32
1000b508:	430b      	orrs	r3, r1
1000b50a:	7213      	strb	r3, [r2, #8]
	}
}
1000b50c:	bd10      	pop	{r4, pc}
1000b50e:	46c0      	nop			; (mov r8, r8)

1000b510 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b510:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b512:	2201      	movs	r2, #1
1000b514:	408a      	lsls	r2, r1
1000b516:	2421      	movs	r4, #33	; 0x21
1000b518:	5d03      	ldrb	r3, [r0, r4]
1000b51a:	4393      	bics	r3, r2
1000b51c:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b51e:	2901      	cmp	r1, #1
1000b520:	d104      	bne.n	1000b52c <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b522:	6802      	ldr	r2, [r0, #0]
1000b524:	7a13      	ldrb	r3, [r2, #8]
1000b526:	311f      	adds	r1, #31
1000b528:	438b      	bics	r3, r1
1000b52a:	7213      	strb	r3, [r2, #8]
	}

}
1000b52c:	bd10      	pop	{r4, pc}
1000b52e:	46c0      	nop			; (mov r8, r8)

1000b530 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b530:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b532:	4647      	mov	r7, r8
1000b534:	b480      	push	{r7}
1000b536:	000c      	movs	r4, r1
1000b538:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b53a:	2800      	cmp	r0, #0
1000b53c:	d10d      	bne.n	1000b55a <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b53e:	2a00      	cmp	r2, #0
1000b540:	dd0e      	ble.n	1000b560 <_read+0x30>
1000b542:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b544:	4e08      	ldr	r6, [pc, #32]	; (1000b568 <_read+0x38>)
1000b546:	4d09      	ldr	r5, [pc, #36]	; (1000b56c <_read+0x3c>)
1000b548:	6830      	ldr	r0, [r6, #0]
1000b54a:	0021      	movs	r1, r4
1000b54c:	682b      	ldr	r3, [r5, #0]
1000b54e:	4798      	blx	r3
		ptr++;
1000b550:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b552:	42a7      	cmp	r7, r4
1000b554:	d1f8      	bne.n	1000b548 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b556:	4640      	mov	r0, r8
1000b558:	e003      	b.n	1000b562 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b55a:	2001      	movs	r0, #1
1000b55c:	4240      	negs	r0, r0
1000b55e:	e000      	b.n	1000b562 <_read+0x32>
	}

	for (; len > 0; --len) {
1000b560:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b562:	bc04      	pop	{r2}
1000b564:	4690      	mov	r8, r2
1000b566:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b568:	10015c38 	.word	0x10015c38
1000b56c:	10015c30 	.word	0x10015c30

1000b570 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b570:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b572:	4647      	mov	r7, r8
1000b574:	b480      	push	{r7}
1000b576:	000e      	movs	r6, r1
1000b578:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b57a:	3801      	subs	r0, #1
1000b57c:	2802      	cmp	r0, #2
1000b57e:	d811      	bhi.n	1000b5a4 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b580:	2a00      	cmp	r2, #0
1000b582:	d012      	beq.n	1000b5aa <_write+0x3a>
1000b584:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b586:	4b0c      	ldr	r3, [pc, #48]	; (1000b5b8 <_write+0x48>)
1000b588:	4698      	mov	r8, r3
1000b58a:	4f0c      	ldr	r7, [pc, #48]	; (1000b5bc <_write+0x4c>)
1000b58c:	4643      	mov	r3, r8
1000b58e:	6818      	ldr	r0, [r3, #0]
1000b590:	5d31      	ldrb	r1, [r6, r4]
1000b592:	683b      	ldr	r3, [r7, #0]
1000b594:	4798      	blx	r3
1000b596:	2800      	cmp	r0, #0
1000b598:	db09      	blt.n	1000b5ae <_write+0x3e>
			return -1;
		}
		++nChars;
1000b59a:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b59c:	42a5      	cmp	r5, r4
1000b59e:	d1f5      	bne.n	1000b58c <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b5a0:	0020      	movs	r0, r4
1000b5a2:	e006      	b.n	1000b5b2 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b5a4:	2001      	movs	r0, #1
1000b5a6:	4240      	negs	r0, r0
1000b5a8:	e003      	b.n	1000b5b2 <_write+0x42>
	}

	for (; len != 0; --len) {
1000b5aa:	2000      	movs	r0, #0
1000b5ac:	e001      	b.n	1000b5b2 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000b5ae:	2001      	movs	r0, #1
1000b5b0:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000b5b2:	bc04      	pop	{r2}
1000b5b4:	4690      	mov	r8, r2
1000b5b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b5b8:	10015c38 	.word	0x10015c38
1000b5bc:	10015c34 	.word	0x10015c34

1000b5c0 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000b5c0:	2000      	movs	r0, #0
1000b5c2:	4770      	bx	lr

1000b5c4 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000b5c4:	2000      	movs	r0, #0
1000b5c6:	4770      	bx	lr

1000b5c8 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b5c8:	78c0      	ldrb	r0, [r0, #3]
1000b5ca:	2800      	cmp	r0, #0
1000b5cc:	d000      	beq.n	1000b5d0 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b5ce:	20e2      	movs	r0, #226	; 0xe2
}
1000b5d0:	4770      	bx	lr
1000b5d2:	46c0      	nop			; (mov r8, r8)

1000b5d4 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000b5d4:	2000      	movs	r0, #0
1000b5d6:	4770      	bx	lr

1000b5d8 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b5d8:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b5da:	7800      	ldrb	r0, [r0, #0]
1000b5dc:	2800      	cmp	r0, #0
1000b5de:	d006      	beq.n	1000b5ee <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b5e0:	4803      	ldr	r0, [pc, #12]	; (1000b5f0 <ble_scan_report_handler+0x18>)
1000b5e2:	4b04      	ldr	r3, [pc, #16]	; (1000b5f4 <ble_scan_report_handler+0x1c>)
1000b5e4:	4798      	blx	r3
1000b5e6:	4804      	ldr	r0, [pc, #16]	; (1000b5f8 <ble_scan_report_handler+0x20>)
1000b5e8:	4b04      	ldr	r3, [pc, #16]	; (1000b5fc <ble_scan_report_handler+0x24>)
1000b5ea:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000b5ec:	20e2      	movs	r0, #226	; 0xe2
}
1000b5ee:	bd10      	pop	{r4, pc}
1000b5f0:	10012d7c 	.word	0x10012d7c
1000b5f4:	10011e31 	.word	0x10011e31
1000b5f8:	10013558 	.word	0x10013558
1000b5fc:	10011d11 	.word	0x10011d11

1000b600 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000b600:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000b602:	7800      	ldrb	r0, [r0, #0]
1000b604:	2800      	cmp	r0, #0
1000b606:	d006      	beq.n	1000b616 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000b608:	4803      	ldr	r0, [pc, #12]	; (1000b618 <ble_adv_report_handler+0x18>)
1000b60a:	4b04      	ldr	r3, [pc, #16]	; (1000b61c <ble_adv_report_handler+0x1c>)
1000b60c:	4798      	blx	r3
1000b60e:	4804      	ldr	r0, [pc, #16]	; (1000b620 <ble_adv_report_handler+0x20>)
1000b610:	4b04      	ldr	r3, [pc, #16]	; (1000b624 <ble_adv_report_handler+0x24>)
1000b612:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000b614:	20e2      	movs	r0, #226	; 0xe2
}
1000b616:	bd10      	pop	{r4, pc}
1000b618:	10012d7c 	.word	0x10012d7c
1000b61c:	10011e31 	.word	0x10011e31
1000b620:	1001356c 	.word	0x1001356c
1000b624:	10011d11 	.word	0x10011d11

1000b628 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b628:	b510      	push	{r4, lr}
1000b62a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b62c:	78c0      	ldrb	r0, [r0, #3]
1000b62e:	2800      	cmp	r0, #0
1000b630:	d008      	beq.n	1000b644 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b632:	4805      	ldr	r0, [pc, #20]	; (1000b648 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000b634:	4b05      	ldr	r3, [pc, #20]	; (1000b64c <ble_mtu_changed_cmd_complete_handler+0x24>)
1000b636:	4798      	blx	r3
1000b638:	78a2      	ldrb	r2, [r4, #2]
1000b63a:	8821      	ldrh	r1, [r4, #0]
1000b63c:	4804      	ldr	r0, [pc, #16]	; (1000b650 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000b63e:	4b05      	ldr	r3, [pc, #20]	; (1000b654 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000b640:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b642:	20e2      	movs	r0, #226	; 0xe2
}
1000b644:	bd10      	pop	{r4, pc}
1000b646:	46c0      	nop			; (mov r8, r8)
1000b648:	10012d7c 	.word	0x10012d7c
1000b64c:	10011e31 	.word	0x10011e31
1000b650:	10013580 	.word	0x10013580
1000b654:	10011d11 	.word	0x10011d11

1000b658 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000b658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b65a:	0004      	movs	r4, r0
1000b65c:	4b19      	ldr	r3, [pc, #100]	; (1000b6c4 <ble_disconnected_state_handler+0x6c>)
1000b65e:	229b      	movs	r2, #155	; 0x9b
1000b660:	0092      	lsls	r2, r2, #2
1000b662:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b664:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b666:	2600      	movs	r6, #0
1000b668:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b66a:	001a      	movs	r2, r3
1000b66c:	3a56      	subs	r2, #86	; 0x56
1000b66e:	8811      	ldrh	r1, [r2, #0]
1000b670:	8822      	ldrh	r2, [r4, #0]
1000b672:	4291      	cmp	r1, r2
1000b674:	d119      	bne.n	1000b6aa <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b676:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b678:	2a05      	cmp	r2, #5
1000b67a:	d001      	beq.n	1000b680 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b67c:	2a08      	cmp	r2, #8
1000b67e:	d101      	bne.n	1000b684 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b680:	7007      	strb	r7, [r0, #0]
1000b682:	e012      	b.n	1000b6aa <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000b684:	2a07      	cmp	r2, #7
1000b686:	d80f      	bhi.n	1000b6a8 <ble_disconnected_state_handler+0x50>
1000b688:	0092      	lsls	r2, r2, #2
1000b68a:	490f      	ldr	r1, [pc, #60]	; (1000b6c8 <ble_disconnected_state_handler+0x70>)
1000b68c:	588a      	ldr	r2, [r1, r2]
1000b68e:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b690:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000b692:	4a0e      	ldr	r2, [pc, #56]	; (1000b6cc <ble_disconnected_state_handler+0x74>)
1000b694:	7812      	ldrb	r2, [r2, #0]
1000b696:	2a00      	cmp	r2, #0
1000b698:	d007      	beq.n	1000b6aa <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000b69a:	4a0c      	ldr	r2, [pc, #48]	; (1000b6cc <ble_disconnected_state_handler+0x74>)
1000b69c:	7812      	ldrb	r2, [r2, #0]
1000b69e:	3a01      	subs	r2, #1
1000b6a0:	b2d2      	uxtb	r2, r2
1000b6a2:	490a      	ldr	r1, [pc, #40]	; (1000b6cc <ble_disconnected_state_handler+0x74>)
1000b6a4:	700a      	strb	r2, [r1, #0]
1000b6a6:	e000      	b.n	1000b6aa <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b6a8:	7006      	strb	r6, [r0, #0]
1000b6aa:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6ac:	42ab      	cmp	r3, r5
1000b6ae:	d1db      	bne.n	1000b668 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000b6b0:	4807      	ldr	r0, [pc, #28]	; (1000b6d0 <ble_disconnected_state_handler+0x78>)
1000b6b2:	4b08      	ldr	r3, [pc, #32]	; (1000b6d4 <ble_disconnected_state_handler+0x7c>)
1000b6b4:	4798      	blx	r3
1000b6b6:	8822      	ldrh	r2, [r4, #0]
1000b6b8:	78a1      	ldrb	r1, [r4, #2]
1000b6ba:	4807      	ldr	r0, [pc, #28]	; (1000b6d8 <ble_disconnected_state_handler+0x80>)
1000b6bc:	4b07      	ldr	r3, [pc, #28]	; (1000b6dc <ble_disconnected_state_handler+0x84>)
1000b6be:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000b6c0:	2000      	movs	r0, #0
1000b6c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b6c4:	10015cb2 	.word	0x10015cb2
1000b6c8:	100133f4 	.word	0x100133f4
1000b6cc:	10015ec0 	.word	0x10015ec0
1000b6d0:	10012d7c 	.word	0x10012d7c
1000b6d4:	10011e31 	.word	0x10011e31
1000b6d8:	100135b8 	.word	0x100135b8
1000b6dc:	10011d11 	.word	0x10011d11

1000b6e0 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b6e2:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b6e4:	8801      	ldrh	r1, [r0, #0]
1000b6e6:	4b28      	ldr	r3, [pc, #160]	; (1000b788 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6e8:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b6ea:	891a      	ldrh	r2, [r3, #8]
1000b6ec:	428a      	cmp	r2, r1
1000b6ee:	d104      	bne.n	1000b6fa <ble_encryption_status_change_handler+0x1a>
1000b6f0:	001a      	movs	r2, r3
1000b6f2:	325e      	adds	r2, #94	; 0x5e
1000b6f4:	7812      	ldrb	r2, [r2, #0]
1000b6f6:	2a06      	cmp	r2, #6
1000b6f8:	d02e      	beq.n	1000b758 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b6fa:	3401      	adds	r4, #1
1000b6fc:	b2e4      	uxtb	r4, r4
1000b6fe:	337c      	adds	r3, #124	; 0x7c
1000b700:	2c05      	cmp	r4, #5
1000b702:	d1f2      	bne.n	1000b6ea <ble_encryption_status_change_handler+0xa>
1000b704:	e039      	b.n	1000b77a <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b706:	4920      	ldr	r1, [pc, #128]	; (1000b788 <ble_encryption_status_change_handler+0xa8>)
1000b708:	0163      	lsls	r3, r4, #5
1000b70a:	1b1a      	subs	r2, r3, r4
1000b70c:	0092      	lsls	r2, r2, #2
1000b70e:	188a      	adds	r2, r1, r2
1000b710:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b712:	0014      	movs	r4, r2
1000b714:	345e      	adds	r4, #94	; 0x5e
1000b716:	2307      	movs	r3, #7
1000b718:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b71a:	481c      	ldr	r0, [pc, #112]	; (1000b78c <ble_encryption_status_change_handler+0xac>)
1000b71c:	4b1c      	ldr	r3, [pc, #112]	; (1000b790 <ble_encryption_status_change_handler+0xb0>)
1000b71e:	4798      	blx	r3
1000b720:	481c      	ldr	r0, [pc, #112]	; (1000b794 <ble_encryption_status_change_handler+0xb4>)
1000b722:	4b1d      	ldr	r3, [pc, #116]	; (1000b798 <ble_encryption_status_change_handler+0xb8>)
1000b724:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b726:	25e2      	movs	r5, #226	; 0xe2
1000b728:	e02b      	b.n	1000b782 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b72a:	4818      	ldr	r0, [pc, #96]	; (1000b78c <ble_encryption_status_change_handler+0xac>)
1000b72c:	4b18      	ldr	r3, [pc, #96]	; (1000b790 <ble_encryption_status_change_handler+0xb0>)
1000b72e:	4798      	blx	r3
1000b730:	481a      	ldr	r0, [pc, #104]	; (1000b79c <ble_encryption_status_change_handler+0xbc>)
1000b732:	4b19      	ldr	r3, [pc, #100]	; (1000b798 <ble_encryption_status_change_handler+0xb8>)
1000b734:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b736:	4914      	ldr	r1, [pc, #80]	; (1000b788 <ble_encryption_status_change_handler+0xa8>)
1000b738:	0163      	lsls	r3, r4, #5
1000b73a:	1b1a      	subs	r2, r3, r4
1000b73c:	0092      	lsls	r2, r2, #2
1000b73e:	188a      	adds	r2, r1, r2
1000b740:	0010      	movs	r0, r2
1000b742:	305e      	adds	r0, #94	; 0x5e
1000b744:	2708      	movs	r7, #8
1000b746:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b748:	78f0      	ldrb	r0, [r6, #3]
1000b74a:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b74c:	78b2      	ldrb	r2, [r6, #2]
1000b74e:	1b1c      	subs	r4, r3, r4
1000b750:	00a4      	lsls	r4, r4, #2
1000b752:	190c      	adds	r4, r1, r4
1000b754:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b756:	e014      	b.n	1000b782 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b758:	78b5      	ldrb	r5, [r6, #2]
1000b75a:	2d00      	cmp	r5, #0
1000b75c:	d0e5      	beq.n	1000b72a <ble_encryption_status_change_handler+0x4a>
1000b75e:	e7d2      	b.n	1000b706 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000b760:	4e0a      	ldr	r6, [pc, #40]	; (1000b78c <ble_encryption_status_change_handler+0xac>)
1000b762:	0030      	movs	r0, r6
1000b764:	4d0a      	ldr	r5, [pc, #40]	; (1000b790 <ble_encryption_status_change_handler+0xb0>)
1000b766:	47a8      	blx	r5
1000b768:	480c      	ldr	r0, [pc, #48]	; (1000b79c <ble_encryption_status_change_handler+0xbc>)
1000b76a:	4c0b      	ldr	r4, [pc, #44]	; (1000b798 <ble_encryption_status_change_handler+0xb8>)
1000b76c:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b76e:	0030      	movs	r0, r6
1000b770:	47a8      	blx	r5
1000b772:	480b      	ldr	r0, [pc, #44]	; (1000b7a0 <ble_encryption_status_change_handler+0xc0>)
1000b774:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b776:	25e2      	movs	r5, #226	; 0xe2
1000b778:	e003      	b.n	1000b782 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b77a:	78b5      	ldrb	r5, [r6, #2]
1000b77c:	2d00      	cmp	r5, #0
1000b77e:	d1c2      	bne.n	1000b706 <ble_encryption_status_change_handler+0x26>
1000b780:	e7ee      	b.n	1000b760 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b782:	0028      	movs	r0, r5
1000b784:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b786:	46c0      	nop			; (mov r8, r8)
1000b788:	10015c54 	.word	0x10015c54
1000b78c:	10012d7c 	.word	0x10012d7c
1000b790:	10011e31 	.word	0x10011e31
1000b794:	100135e8 	.word	0x100135e8
1000b798:	10011d11 	.word	0x10011d11
1000b79c:	100135fc 	.word	0x100135fc
1000b7a0:	10013620 	.word	0x10013620

1000b7a4 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000b7a4:	b510      	push	{r4, lr}
1000b7a6:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000b7a8:	4b15      	ldr	r3, [pc, #84]	; (1000b800 <ble_scan_info_handler+0x5c>)
1000b7aa:	781b      	ldrb	r3, [r3, #0]
1000b7ac:	b2db      	uxtb	r3, r3
1000b7ae:	2b13      	cmp	r3, #19
1000b7b0:	d812      	bhi.n	1000b7d8 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000b7b2:	4c13      	ldr	r4, [pc, #76]	; (1000b800 <ble_scan_info_handler+0x5c>)
1000b7b4:	7823      	ldrb	r3, [r4, #0]
1000b7b6:	b2db      	uxtb	r3, r3
1000b7b8:	0098      	lsls	r0, r3, #2
1000b7ba:	18c0      	adds	r0, r0, r3
1000b7bc:	00c0      	lsls	r0, r0, #3
1000b7be:	18c3      	adds	r3, r0, r3
1000b7c0:	4810      	ldr	r0, [pc, #64]	; (1000b804 <ble_scan_info_handler+0x60>)
1000b7c2:	1818      	adds	r0, r3, r0
1000b7c4:	2229      	movs	r2, #41	; 0x29
1000b7c6:	4b10      	ldr	r3, [pc, #64]	; (1000b808 <ble_scan_info_handler+0x64>)
1000b7c8:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000b7ca:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000b7cc:	7823      	ldrb	r3, [r4, #0]
1000b7ce:	3301      	adds	r3, #1
1000b7d0:	b2db      	uxtb	r3, r3
1000b7d2:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000b7d4:	2300      	movs	r3, #0
1000b7d6:	e011      	b.n	1000b7fc <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000b7d8:	480c      	ldr	r0, [pc, #48]	; (1000b80c <ble_scan_info_handler+0x68>)
1000b7da:	4b0d      	ldr	r3, [pc, #52]	; (1000b810 <ble_scan_info_handler+0x6c>)
1000b7dc:	4798      	blx	r3
1000b7de:	480d      	ldr	r0, [pc, #52]	; (1000b814 <ble_scan_info_handler+0x70>)
1000b7e0:	4b0d      	ldr	r3, [pc, #52]	; (1000b818 <ble_scan_info_handler+0x74>)
1000b7e2:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b7e4:	4b0d      	ldr	r3, [pc, #52]	; (1000b81c <ble_scan_info_handler+0x78>)
1000b7e6:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b7e8:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000b7ea:	2800      	cmp	r0, #0
1000b7ec:	d006      	beq.n	1000b7fc <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000b7ee:	4807      	ldr	r0, [pc, #28]	; (1000b80c <ble_scan_info_handler+0x68>)
1000b7f0:	4b07      	ldr	r3, [pc, #28]	; (1000b810 <ble_scan_info_handler+0x6c>)
1000b7f2:	4798      	blx	r3
1000b7f4:	480a      	ldr	r0, [pc, #40]	; (1000b820 <ble_scan_info_handler+0x7c>)
1000b7f6:	4b08      	ldr	r3, [pc, #32]	; (1000b818 <ble_scan_info_handler+0x74>)
1000b7f8:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000b7fa:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000b7fc:	0018      	movs	r0, r3
1000b7fe:	bd10      	pop	{r4, pc}
1000b800:	10014754 	.word	0x10014754
1000b804:	10015f38 	.word	0x10015f38
1000b808:	10011bb7 	.word	0x10011bb7
1000b80c:	10012d7c 	.word	0x10012d7c
1000b810:	10011e31 	.word	0x10011e31
1000b814:	10013648 	.word	0x10013648
1000b818:	10011d11 	.word	0x10011d11
1000b81c:	1000e355 	.word	0x1000e355
1000b820:	10013680 	.word	0x10013680

1000b824 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000b824:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b826:	464f      	mov	r7, r9
1000b828:	4646      	mov	r6, r8
1000b82a:	b4c0      	push	{r6, r7}
1000b82c:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b82e:	8841      	ldrh	r1, [r0, #2]
1000b830:	4b3a      	ldr	r3, [pc, #232]	; (1000b91c <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b832:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000b834:	891a      	ldrh	r2, [r3, #8]
1000b836:	428a      	cmp	r2, r1
1000b838:	d104      	bne.n	1000b844 <ble_pair_done_handler+0x20>
1000b83a:	001a      	movs	r2, r3
1000b83c:	325e      	adds	r2, #94	; 0x5e
1000b83e:	7812      	ldrb	r2, [r2, #0]
1000b840:	2a03      	cmp	r2, #3
1000b842:	d062      	beq.n	1000b90a <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b844:	3401      	adds	r4, #1
1000b846:	b2e4      	uxtb	r4, r4
1000b848:	337c      	adds	r3, #124	; 0x7c
1000b84a:	2c05      	cmp	r4, #5
1000b84c:	d1f2      	bne.n	1000b834 <ble_pair_done_handler+0x10>
1000b84e:	e02b      	b.n	1000b8a8 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000b850:	0163      	lsls	r3, r4, #5
1000b852:	1b1c      	subs	r4, r3, r4
1000b854:	00a4      	lsls	r4, r4, #2
1000b856:	4b31      	ldr	r3, [pc, #196]	; (1000b91c <ble_pair_done_handler+0xf8>)
1000b858:	191c      	adds	r4, r3, r4
1000b85a:	345e      	adds	r4, #94	; 0x5e
1000b85c:	7823      	ldrb	r3, [r4, #0]
1000b85e:	2b01      	cmp	r3, #1
1000b860:	d913      	bls.n	1000b88a <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000b862:	482f      	ldr	r0, [pc, #188]	; (1000b920 <ble_pair_done_handler+0xfc>)
1000b864:	4b2f      	ldr	r3, [pc, #188]	; (1000b924 <ble_pair_done_handler+0x100>)
1000b866:	4798      	blx	r3
1000b868:	482f      	ldr	r0, [pc, #188]	; (1000b928 <ble_pair_done_handler+0x104>)
1000b86a:	4b30      	ldr	r3, [pc, #192]	; (1000b92c <ble_pair_done_handler+0x108>)
1000b86c:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000b86e:	8868      	ldrh	r0, [r5, #2]
1000b870:	2113      	movs	r1, #19
1000b872:	4b2f      	ldr	r3, [pc, #188]	; (1000b930 <ble_pair_done_handler+0x10c>)
1000b874:	4798      	blx	r3
1000b876:	1e06      	subs	r6, r0, #0
1000b878:	d04b      	beq.n	1000b912 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000b87a:	4829      	ldr	r0, [pc, #164]	; (1000b920 <ble_pair_done_handler+0xfc>)
1000b87c:	4b29      	ldr	r3, [pc, #164]	; (1000b924 <ble_pair_done_handler+0x100>)
1000b87e:	4798      	blx	r3
1000b880:	482c      	ldr	r0, [pc, #176]	; (1000b934 <ble_pair_done_handler+0x110>)
1000b882:	4b2a      	ldr	r3, [pc, #168]	; (1000b92c <ble_pair_done_handler+0x108>)
1000b884:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b886:	26e2      	movs	r6, #226	; 0xe2
1000b888:	e043      	b.n	1000b912 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000b88a:	2600      	movs	r6, #0
1000b88c:	e041      	b.n	1000b912 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b88e:	4e24      	ldr	r6, [pc, #144]	; (1000b920 <ble_pair_done_handler+0xfc>)
1000b890:	0030      	movs	r0, r6
1000b892:	4d24      	ldr	r5, [pc, #144]	; (1000b924 <ble_pair_done_handler+0x100>)
1000b894:	47a8      	blx	r5
1000b896:	4828      	ldr	r0, [pc, #160]	; (1000b938 <ble_pair_done_handler+0x114>)
1000b898:	4c24      	ldr	r4, [pc, #144]	; (1000b92c <ble_pair_done_handler+0x108>)
1000b89a:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000b89c:	0030      	movs	r0, r6
1000b89e:	47a8      	blx	r5
1000b8a0:	4826      	ldr	r0, [pc, #152]	; (1000b93c <ble_pair_done_handler+0x118>)
1000b8a2:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b8a4:	26e2      	movs	r6, #226	; 0xe2
1000b8a6:	e034      	b.n	1000b912 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b8a8:	792b      	ldrb	r3, [r5, #4]
1000b8aa:	2b00      	cmp	r3, #0
1000b8ac:	d1d0      	bne.n	1000b850 <ble_pair_done_handler+0x2c>
1000b8ae:	e7ee      	b.n	1000b88e <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000b8b0:	481b      	ldr	r0, [pc, #108]	; (1000b920 <ble_pair_done_handler+0xfc>)
1000b8b2:	4b1c      	ldr	r3, [pc, #112]	; (1000b924 <ble_pair_done_handler+0x100>)
1000b8b4:	4798      	blx	r3
1000b8b6:	4820      	ldr	r0, [pc, #128]	; (1000b938 <ble_pair_done_handler+0x114>)
1000b8b8:	4b1c      	ldr	r3, [pc, #112]	; (1000b92c <ble_pair_done_handler+0x108>)
1000b8ba:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000b8bc:	782a      	ldrb	r2, [r5, #0]
1000b8be:	4b17      	ldr	r3, [pc, #92]	; (1000b91c <ble_pair_done_handler+0xf8>)
1000b8c0:	4699      	mov	r9, r3
1000b8c2:	0167      	lsls	r7, r4, #5
1000b8c4:	1b3b      	subs	r3, r7, r4
1000b8c6:	009b      	lsls	r3, r3, #2
1000b8c8:	444b      	add	r3, r9
1000b8ca:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000b8cc:	792a      	ldrb	r2, [r5, #4]
1000b8ce:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000b8d0:	335e      	adds	r3, #94	; 0x5e
1000b8d2:	2205      	movs	r2, #5
1000b8d4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000b8d6:	1b38      	subs	r0, r7, r4
1000b8d8:	0080      	lsls	r0, r0, #2
1000b8da:	4448      	add	r0, r9
1000b8dc:	3036      	adds	r0, #54	; 0x36
1000b8de:	0029      	movs	r1, r5
1000b8e0:	3122      	adds	r1, #34	; 0x22
1000b8e2:	320b      	adds	r2, #11
1000b8e4:	4b16      	ldr	r3, [pc, #88]	; (1000b940 <ble_pair_done_handler+0x11c>)
1000b8e6:	4698      	mov	r8, r3
1000b8e8:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000b8ea:	1b38      	subs	r0, r7, r4
1000b8ec:	0080      	lsls	r0, r0, #2
1000b8ee:	4448      	add	r0, r9
1000b8f0:	3046      	adds	r0, #70	; 0x46
1000b8f2:	0029      	movs	r1, r5
1000b8f4:	3132      	adds	r1, #50	; 0x32
1000b8f6:	2217      	movs	r2, #23
1000b8f8:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000b8fa:	1b38      	subs	r0, r7, r4
1000b8fc:	0080      	lsls	r0, r0, #2
1000b8fe:	4448      	add	r0, r9
1000b900:	301a      	adds	r0, #26
1000b902:	1da9      	adds	r1, r5, #6
1000b904:	221c      	movs	r2, #28
1000b906:	47c0      	blx	r8
1000b908:	e003      	b.n	1000b912 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000b90a:	792e      	ldrb	r6, [r5, #4]
1000b90c:	2e00      	cmp	r6, #0
1000b90e:	d0cf      	beq.n	1000b8b0 <ble_pair_done_handler+0x8c>
1000b910:	e79e      	b.n	1000b850 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000b912:	0030      	movs	r0, r6
1000b914:	bc0c      	pop	{r2, r3}
1000b916:	4690      	mov	r8, r2
1000b918:	4699      	mov	r9, r3
1000b91a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b91c:	10015c54 	.word	0x10015c54
1000b920:	10012d7c 	.word	0x10012d7c
1000b924:	10011e31 	.word	0x10011e31
1000b928:	10013698 	.word	0x10013698
1000b92c:	10011d11 	.word	0x10011d11
1000b930:	1000e375 	.word	0x1000e375
1000b934:	100136b8 	.word	0x100136b8
1000b938:	100136d4 	.word	0x100136d4
1000b93c:	10013700 	.word	0x10013700
1000b940:	10011bb7 	.word	0x10011bb7

1000b944 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000b944:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000b946:	8800      	ldrh	r0, [r0, #0]
1000b948:	2378      	movs	r3, #120	; 0x78
1000b94a:	2201      	movs	r2, #1
1000b94c:	2101      	movs	r1, #1
1000b94e:	4c02      	ldr	r4, [pc, #8]	; (1000b958 <ble_conn_param_update_req+0x14>)
1000b950:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000b952:	2000      	movs	r0, #0
1000b954:	bd10      	pop	{r4, pc}
1000b956:	46c0      	nop			; (mov r8, r8)
1000b958:	1000e395 	.word	0x1000e395

1000b95c <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000b95c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b95e:	4657      	mov	r7, sl
1000b960:	464e      	mov	r6, r9
1000b962:	4645      	mov	r5, r8
1000b964:	b4e0      	push	{r5, r6, r7}
1000b966:	b084      	sub	sp, #16
1000b968:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000b96a:	2209      	movs	r2, #9
1000b96c:	2100      	movs	r1, #0
1000b96e:	a801      	add	r0, sp, #4
1000b970:	4b6a      	ldr	r3, [pc, #424]	; (1000bb1c <ble_slave_security_request_handler+0x1c0>)
1000b972:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b974:	8825      	ldrh	r5, [r4, #0]
1000b976:	496a      	ldr	r1, [pc, #424]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000b978:	000a      	movs	r2, r1
1000b97a:	2300      	movs	r3, #0
1000b97c:	8910      	ldrh	r0, [r2, #8]
1000b97e:	42a8      	cmp	r0, r5
1000b980:	d116      	bne.n	1000b9b0 <ble_slave_security_request_handler+0x54>
1000b982:	0010      	movs	r0, r2
1000b984:	305e      	adds	r0, #94	; 0x5e
1000b986:	7800      	ldrb	r0, [r0, #0]
1000b988:	2802      	cmp	r0, #2
1000b98a:	d111      	bne.n	1000b9b0 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000b98c:	4864      	ldr	r0, [pc, #400]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000b98e:	015a      	lsls	r2, r3, #5
1000b990:	1ad6      	subs	r6, r2, r3
1000b992:	00b6      	lsls	r6, r6, #2
1000b994:	1986      	adds	r6, r0, r6
1000b996:	365e      	adds	r6, #94	; 0x5e
1000b998:	2206      	movs	r2, #6
1000b99a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b99c:	32f9      	adds	r2, #249	; 0xf9
1000b99e:	4013      	ands	r3, r2
1000b9a0:	015a      	lsls	r2, r3, #5
1000b9a2:	1ad2      	subs	r2, r2, r3
1000b9a4:	0092      	lsls	r2, r2, #2
1000b9a6:	1882      	adds	r2, r0, r2
1000b9a8:	7d12      	ldrb	r2, [r2, #20]
1000b9aa:	07d0      	lsls	r0, r2, #31
1000b9ac:	d405      	bmi.n	1000b9ba <ble_slave_security_request_handler+0x5e>
1000b9ae:	e01b      	b.n	1000b9e8 <ble_slave_security_request_handler+0x8c>
1000b9b0:	3301      	adds	r3, #1
1000b9b2:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b9b4:	2b05      	cmp	r3, #5
1000b9b6:	d1e1      	bne.n	1000b97c <ble_slave_security_request_handler+0x20>
1000b9b8:	e01e      	b.n	1000b9f8 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000b9ba:	78e0      	ldrb	r0, [r4, #3]
1000b9bc:	2800      	cmp	r0, #0
1000b9be:	d013      	beq.n	1000b9e8 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000b9c0:	0159      	lsls	r1, r3, #5
1000b9c2:	1ac9      	subs	r1, r1, r3
1000b9c4:	008b      	lsls	r3, r1, #2
1000b9c6:	4956      	ldr	r1, [pc, #344]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000b9c8:	18c9      	adds	r1, r1, r3
1000b9ca:	311a      	adds	r1, #26
1000b9cc:	8820      	ldrh	r0, [r4, #0]
1000b9ce:	4b55      	ldr	r3, [pc, #340]	; (1000bb24 <ble_slave_security_request_handler+0x1c8>)
1000b9d0:	4798      	blx	r3
1000b9d2:	2800      	cmp	r0, #0
1000b9d4:	d100      	bne.n	1000b9d8 <ble_slave_security_request_handler+0x7c>
1000b9d6:	e09b      	b.n	1000bb10 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000b9d8:	4853      	ldr	r0, [pc, #332]	; (1000bb28 <ble_slave_security_request_handler+0x1cc>)
1000b9da:	4b54      	ldr	r3, [pc, #336]	; (1000bb2c <ble_slave_security_request_handler+0x1d0>)
1000b9dc:	4798      	blx	r3
1000b9de:	4854      	ldr	r0, [pc, #336]	; (1000bb30 <ble_slave_security_request_handler+0x1d4>)
1000b9e0:	4b54      	ldr	r3, [pc, #336]	; (1000bb34 <ble_slave_security_request_handler+0x1d8>)
1000b9e2:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000b9e4:	20e2      	movs	r0, #226	; 0xe2
1000b9e6:	e093      	b.n	1000bb10 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000b9e8:	015a      	lsls	r2, r3, #5
1000b9ea:	1ad3      	subs	r3, r2, r3
1000b9ec:	009b      	lsls	r3, r3, #2
1000b9ee:	4a4c      	ldr	r2, [pc, #304]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000b9f0:	18d3      	adds	r3, r2, r3
1000b9f2:	335e      	adds	r3, #94	; 0x5e
1000b9f4:	2202      	movs	r2, #2
1000b9f6:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b9f8:	8825      	ldrh	r5, [r4, #0]
1000b9fa:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b9fc:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000b9fe:	0016      	movs	r6, r2
1000ba00:	8908      	ldrh	r0, [r1, #8]
1000ba02:	42a8      	cmp	r0, r5
1000ba04:	d10d      	bne.n	1000ba22 <ble_slave_security_request_handler+0xc6>
1000ba06:	0008      	movs	r0, r1
1000ba08:	305e      	adds	r0, #94	; 0x5e
1000ba0a:	7800      	ldrb	r0, [r0, #0]
1000ba0c:	2802      	cmp	r0, #2
1000ba0e:	d108      	bne.n	1000ba22 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000ba10:	0152      	lsls	r2, r2, #5
1000ba12:	1b92      	subs	r2, r2, r6
1000ba14:	0096      	lsls	r6, r2, #2
1000ba16:	4a42      	ldr	r2, [pc, #264]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000ba18:	1992      	adds	r2, r2, r6
1000ba1a:	325e      	adds	r2, #94	; 0x5e
1000ba1c:	2103      	movs	r1, #3
1000ba1e:	7011      	strb	r1, [r2, #0]
			break;
1000ba20:	e005      	b.n	1000ba2e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ba22:	3301      	adds	r3, #1
1000ba24:	b2db      	uxtb	r3, r3
1000ba26:	3201      	adds	r2, #1
1000ba28:	317c      	adds	r1, #124	; 0x7c
1000ba2a:	2b05      	cmp	r3, #5
1000ba2c:	d1e7      	bne.n	1000b9fe <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000ba2e:	aa01      	add	r2, sp, #4
1000ba30:	78e1      	ldrb	r1, [r4, #3]
1000ba32:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000ba34:	2101      	movs	r1, #1
1000ba36:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000ba38:	3103      	adds	r1, #3
1000ba3a:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000ba3c:	001f      	movs	r7, r3
1000ba3e:	015a      	lsls	r2, r3, #5
1000ba40:	1ad2      	subs	r2, r2, r3
1000ba42:	0092      	lsls	r2, r2, #2
1000ba44:	4936      	ldr	r1, [pc, #216]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000ba46:	5c52      	ldrb	r2, [r2, r1]
1000ba48:	2a02      	cmp	r2, #2
1000ba4a:	d104      	bne.n	1000ba56 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000ba4c:	aa01      	add	r2, sp, #4
1000ba4e:	2103      	movs	r1, #3
1000ba50:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000ba52:	71d1      	strb	r1, [r2, #7]
1000ba54:	e003      	b.n	1000ba5e <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000ba56:	aa01      	add	r2, sp, #4
1000ba58:	2101      	movs	r1, #1
1000ba5a:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000ba5c:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000ba5e:	aa01      	add	r2, sp, #4
1000ba60:	2110      	movs	r1, #16
1000ba62:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000ba64:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000ba66:	017a      	lsls	r2, r7, #5
1000ba68:	1bd2      	subs	r2, r2, r7
1000ba6a:	0092      	lsls	r2, r2, #2
1000ba6c:	492c      	ldr	r1, [pc, #176]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000ba6e:	188a      	adds	r2, r1, r2
1000ba70:	7e12      	ldrb	r2, [r2, #24]
1000ba72:	2a40      	cmp	r2, #64	; 0x40
1000ba74:	d134      	bne.n	1000bae0 <ble_slave_security_request_handler+0x184>
1000ba76:	015a      	lsls	r2, r3, #5
1000ba78:	1ad3      	subs	r3, r2, r3
1000ba7a:	009b      	lsls	r3, r3, #2
1000ba7c:	469a      	mov	sl, r3
1000ba7e:	001e      	movs	r6, r3
1000ba80:	3660      	adds	r6, #96	; 0x60
1000ba82:	1876      	adds	r6, r6, r1
1000ba84:	4655      	mov	r5, sl
1000ba86:	3568      	adds	r5, #104	; 0x68
1000ba88:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000ba8a:	4b2b      	ldr	r3, [pc, #172]	; (1000bb38 <ble_slave_security_request_handler+0x1dc>)
1000ba8c:	4699      	mov	r9, r3
1000ba8e:	230f      	movs	r3, #15
1000ba90:	4698      	mov	r8, r3
1000ba92:	47c8      	blx	r9
1000ba94:	4643      	mov	r3, r8
1000ba96:	4018      	ands	r0, r3
1000ba98:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000ba9a:	47c8      	blx	r9
1000ba9c:	4643      	mov	r3, r8
1000ba9e:	4018      	ands	r0, r3
1000baa0:	74b0      	strb	r0, [r6, #18]
1000baa2:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000baa4:	42ae      	cmp	r6, r5
1000baa6:	d1f4      	bne.n	1000ba92 <ble_slave_security_request_handler+0x136>
1000baa8:	4656      	mov	r6, sl
1000baaa:	3670      	adds	r6, #112	; 0x70
1000baac:	4a1c      	ldr	r2, [pc, #112]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000baae:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bab0:	4b21      	ldr	r3, [pc, #132]	; (1000bb38 <ble_slave_security_request_handler+0x1dc>)
1000bab2:	4699      	mov	r9, r3
1000bab4:	230f      	movs	r3, #15
1000bab6:	4698      	mov	r8, r3
1000bab8:	47c8      	blx	r9
1000baba:	4643      	mov	r3, r8
1000babc:	4018      	ands	r0, r3
1000babe:	7028      	strb	r0, [r5, #0]
1000bac0:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bac2:	42b5      	cmp	r5, r6
1000bac4:	d1f8      	bne.n	1000bab8 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bac6:	4b1c      	ldr	r3, [pc, #112]	; (1000bb38 <ble_slave_security_request_handler+0x1dc>)
1000bac8:	4798      	blx	r3
1000baca:	017b      	lsls	r3, r7, #5
1000bacc:	1bdb      	subs	r3, r3, r7
1000bace:	009b      	lsls	r3, r3, #2
1000bad0:	4a13      	ldr	r2, [pc, #76]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000bad2:	18d3      	adds	r3, r2, r3
1000bad4:	001a      	movs	r2, r3
1000bad6:	3270      	adds	r2, #112	; 0x70
1000bad8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000bada:	337a      	adds	r3, #122	; 0x7a
1000badc:	2210      	movs	r2, #16
1000bade:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000bae0:	017a      	lsls	r2, r7, #5
1000bae2:	1bd7      	subs	r7, r2, r7
1000bae4:	00bf      	lsls	r7, r7, #2
1000bae6:	3760      	adds	r7, #96	; 0x60
1000bae8:	4a0d      	ldr	r2, [pc, #52]	; (1000bb20 <ble_slave_security_request_handler+0x1c4>)
1000baea:	18ba      	adds	r2, r7, r2
1000baec:	8820      	ldrh	r0, [r4, #0]
1000baee:	2300      	movs	r3, #0
1000baf0:	a901      	add	r1, sp, #4
1000baf2:	4c12      	ldr	r4, [pc, #72]	; (1000bb3c <ble_slave_security_request_handler+0x1e0>)
1000baf4:	47a0      	blx	r4
1000baf6:	2800      	cmp	r0, #0
1000baf8:	d00a      	beq.n	1000bb10 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000bafa:	ab01      	add	r3, sp, #4
1000bafc:	2200      	movs	r2, #0
1000bafe:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000bb00:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000bb02:	4809      	ldr	r0, [pc, #36]	; (1000bb28 <ble_slave_security_request_handler+0x1cc>)
1000bb04:	4b09      	ldr	r3, [pc, #36]	; (1000bb2c <ble_slave_security_request_handler+0x1d0>)
1000bb06:	4798      	blx	r3
1000bb08:	480d      	ldr	r0, [pc, #52]	; (1000bb40 <ble_slave_security_request_handler+0x1e4>)
1000bb0a:	4b0a      	ldr	r3, [pc, #40]	; (1000bb34 <ble_slave_security_request_handler+0x1d8>)
1000bb0c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bb0e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000bb10:	b004      	add	sp, #16
1000bb12:	bc1c      	pop	{r2, r3, r4}
1000bb14:	4690      	mov	r8, r2
1000bb16:	4699      	mov	r9, r3
1000bb18:	46a2      	mov	sl, r4
1000bb1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bb1c:	10011bc9 	.word	0x10011bc9
1000bb20:	10015c54 	.word	0x10015c54
1000bb24:	1000ef59 	.word	0x1000ef59
1000bb28:	10012d7c 	.word	0x10012d7c
1000bb2c:	10011e31 	.word	0x10011e31
1000bb30:	10013730 	.word	0x10013730
1000bb34:	10011d11 	.word	0x10011d11
1000bb38:	10011e45 	.word	0x10011e45
1000bb3c:	1000ed6d 	.word	0x1000ed6d
1000bb40:	10013748 	.word	0x10013748

1000bb44 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000bb44:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bb46:	465f      	mov	r7, fp
1000bb48:	4656      	mov	r6, sl
1000bb4a:	464d      	mov	r5, r9
1000bb4c:	4644      	mov	r4, r8
1000bb4e:	b4f0      	push	{r4, r5, r6, r7}
1000bb50:	b085      	sub	sp, #20
1000bb52:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bb54:	8804      	ldrh	r4, [r0, #0]
1000bb56:	4a48      	ldr	r2, [pc, #288]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bb58:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb5a:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bb5c:	8910      	ldrh	r0, [r2, #8]
1000bb5e:	42a0      	cmp	r0, r4
1000bb60:	d10d      	bne.n	1000bb7e <ble_pair_request_handler+0x3a>
1000bb62:	0010      	movs	r0, r2
1000bb64:	305e      	adds	r0, #94	; 0x5e
1000bb66:	7800      	ldrb	r0, [r0, #0]
1000bb68:	2802      	cmp	r0, #2
1000bb6a:	d108      	bne.n	1000bb7e <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000bb6c:	014a      	lsls	r2, r1, #5
1000bb6e:	1a52      	subs	r2, r2, r1
1000bb70:	0095      	lsls	r5, r2, #2
1000bb72:	4a41      	ldr	r2, [pc, #260]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bb74:	1952      	adds	r2, r2, r5
1000bb76:	325e      	adds	r2, #94	; 0x5e
1000bb78:	2103      	movs	r1, #3
1000bb7a:	7011      	strb	r1, [r2, #0]
			break;
1000bb7c:	e005      	b.n	1000bb8a <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bb7e:	3301      	adds	r3, #1
1000bb80:	b2db      	uxtb	r3, r3
1000bb82:	3101      	adds	r1, #1
1000bb84:	327c      	adds	r2, #124	; 0x7c
1000bb86:	2b05      	cmp	r3, #5
1000bb88:	d1e8      	bne.n	1000bb5c <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000bb8a:	aa01      	add	r2, sp, #4
1000bb8c:	2100      	movs	r1, #0
1000bb8e:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000bb90:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000bb92:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000bb94:	2003      	movs	r0, #3
1000bb96:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000bb98:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000bb9a:	001f      	movs	r7, r3
1000bb9c:	015a      	lsls	r2, r3, #5
1000bb9e:	1ad2      	subs	r2, r2, r3
1000bba0:	0092      	lsls	r2, r2, #2
1000bba2:	4935      	ldr	r1, [pc, #212]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bba4:	5c52      	ldrb	r2, [r2, r1]
1000bba6:	2a02      	cmp	r2, #2
1000bba8:	d104      	bne.n	1000bbb4 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bbaa:	aa01      	add	r2, sp, #4
1000bbac:	2103      	movs	r1, #3
1000bbae:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bbb0:	71d1      	strb	r1, [r2, #7]
1000bbb2:	e003      	b.n	1000bbbc <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000bbb4:	aa01      	add	r2, sp, #4
1000bbb6:	2101      	movs	r1, #1
1000bbb8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000bbba:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000bbbc:	aa01      	add	r2, sp, #4
1000bbbe:	2110      	movs	r1, #16
1000bbc0:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000bbc2:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000bbc4:	017a      	lsls	r2, r7, #5
1000bbc6:	1bd2      	subs	r2, r2, r7
1000bbc8:	0092      	lsls	r2, r2, #2
1000bbca:	492b      	ldr	r1, [pc, #172]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bbcc:	188a      	adds	r2, r1, r2
1000bbce:	7e12      	ldrb	r2, [r2, #24]
1000bbd0:	2a40      	cmp	r2, #64	; 0x40
1000bbd2:	d131      	bne.n	1000bc38 <ble_pair_request_handler+0xf4>
1000bbd4:	015a      	lsls	r2, r3, #5
1000bbd6:	1ad3      	subs	r3, r2, r3
1000bbd8:	009b      	lsls	r3, r3, #2
1000bbda:	469a      	mov	sl, r3
1000bbdc:	001d      	movs	r5, r3
1000bbde:	3560      	adds	r5, #96	; 0x60
1000bbe0:	186d      	adds	r5, r5, r1
1000bbe2:	4654      	mov	r4, sl
1000bbe4:	3468      	adds	r4, #104	; 0x68
1000bbe6:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bbe8:	4b24      	ldr	r3, [pc, #144]	; (1000bc7c <ble_pair_request_handler+0x138>)
1000bbea:	4699      	mov	r9, r3
1000bbec:	260f      	movs	r6, #15
1000bbee:	47c8      	blx	r9
1000bbf0:	4030      	ands	r0, r6
1000bbf2:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000bbf4:	47c8      	blx	r9
1000bbf6:	4030      	ands	r0, r6
1000bbf8:	74a8      	strb	r0, [r5, #18]
1000bbfa:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000bbfc:	42a5      	cmp	r5, r4
1000bbfe:	d1f6      	bne.n	1000bbee <ble_pair_request_handler+0xaa>
1000bc00:	4655      	mov	r5, sl
1000bc02:	3570      	adds	r5, #112	; 0x70
1000bc04:	4a1c      	ldr	r2, [pc, #112]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bc06:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bc08:	4b1c      	ldr	r3, [pc, #112]	; (1000bc7c <ble_pair_request_handler+0x138>)
1000bc0a:	4699      	mov	r9, r3
1000bc0c:	230f      	movs	r3, #15
1000bc0e:	4698      	mov	r8, r3
1000bc10:	47c8      	blx	r9
1000bc12:	4643      	mov	r3, r8
1000bc14:	4018      	ands	r0, r3
1000bc16:	7020      	strb	r0, [r4, #0]
1000bc18:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bc1a:	42ac      	cmp	r4, r5
1000bc1c:	d1f8      	bne.n	1000bc10 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bc1e:	4b17      	ldr	r3, [pc, #92]	; (1000bc7c <ble_pair_request_handler+0x138>)
1000bc20:	4798      	blx	r3
1000bc22:	017b      	lsls	r3, r7, #5
1000bc24:	1bdb      	subs	r3, r3, r7
1000bc26:	009b      	lsls	r3, r3, #2
1000bc28:	4a13      	ldr	r2, [pc, #76]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bc2a:	18d3      	adds	r3, r2, r3
1000bc2c:	001a      	movs	r2, r3
1000bc2e:	3270      	adds	r2, #112	; 0x70
1000bc30:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000bc32:	337a      	adds	r3, #122	; 0x7a
1000bc34:	2210      	movs	r2, #16
1000bc36:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000bc38:	017a      	lsls	r2, r7, #5
1000bc3a:	1bd7      	subs	r7, r2, r7
1000bc3c:	00bf      	lsls	r7, r7, #2
1000bc3e:	3760      	adds	r7, #96	; 0x60
1000bc40:	4a0d      	ldr	r2, [pc, #52]	; (1000bc78 <ble_pair_request_handler+0x134>)
1000bc42:	18ba      	adds	r2, r7, r2
1000bc44:	465b      	mov	r3, fp
1000bc46:	8818      	ldrh	r0, [r3, #0]
1000bc48:	2300      	movs	r3, #0
1000bc4a:	a901      	add	r1, sp, #4
1000bc4c:	4c0c      	ldr	r4, [pc, #48]	; (1000bc80 <ble_pair_request_handler+0x13c>)
1000bc4e:	47a0      	blx	r4
1000bc50:	2800      	cmp	r0, #0
1000bc52:	d00a      	beq.n	1000bc6a <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000bc54:	ab01      	add	r3, sp, #4
1000bc56:	2200      	movs	r2, #0
1000bc58:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000bc5a:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000bc5c:	4809      	ldr	r0, [pc, #36]	; (1000bc84 <ble_pair_request_handler+0x140>)
1000bc5e:	4b0a      	ldr	r3, [pc, #40]	; (1000bc88 <ble_pair_request_handler+0x144>)
1000bc60:	4798      	blx	r3
1000bc62:	480a      	ldr	r0, [pc, #40]	; (1000bc8c <ble_pair_request_handler+0x148>)
1000bc64:	4b0a      	ldr	r3, [pc, #40]	; (1000bc90 <ble_pair_request_handler+0x14c>)
1000bc66:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bc68:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000bc6a:	b005      	add	sp, #20
1000bc6c:	bc3c      	pop	{r2, r3, r4, r5}
1000bc6e:	4690      	mov	r8, r2
1000bc70:	4699      	mov	r9, r3
1000bc72:	46a2      	mov	sl, r4
1000bc74:	46ab      	mov	fp, r5
1000bc76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc78:	10015c54 	.word	0x10015c54
1000bc7c:	10011e45 	.word	0x10011e45
1000bc80:	1000ed6d 	.word	0x1000ed6d
1000bc84:	10012d7c 	.word	0x10012d7c
1000bc88:	10011e31 	.word	0x10011e31
1000bc8c:	10013774 	.word	0x10013774
1000bc90:	10011d11 	.word	0x10011d11

1000bc94 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000bc94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc96:	b085      	sub	sp, #20
1000bc98:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000bc9a:	2206      	movs	r2, #6
1000bc9c:	493d      	ldr	r1, [pc, #244]	; (1000bd94 <ble_pair_key_request_handler+0x100>)
1000bc9e:	a802      	add	r0, sp, #8
1000bca0:	4e3d      	ldr	r6, [pc, #244]	; (1000bd98 <ble_pair_key_request_handler+0x104>)
1000bca2:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000bca4:	ac01      	add	r4, sp, #4
1000bca6:	2204      	movs	r2, #4
1000bca8:	0029      	movs	r1, r5
1000bcaa:	0020      	movs	r0, r4
1000bcac:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000bcae:	78e3      	ldrb	r3, [r4, #3]
1000bcb0:	2b00      	cmp	r3, #0
1000bcb2:	d162      	bne.n	1000bd7a <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000bcb4:	4839      	ldr	r0, [pc, #228]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bcb6:	4b3a      	ldr	r3, [pc, #232]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bcb8:	4798      	blx	r3
1000bcba:	483a      	ldr	r0, [pc, #232]	; (1000bda4 <ble_pair_key_request_handler+0x110>)
1000bcbc:	4b3a      	ldr	r3, [pc, #232]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bcbe:	4798      	blx	r3
1000bcc0:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000bcc2:	4c3a      	ldr	r4, [pc, #232]	; (1000bdac <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000bcc4:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000bcc6:	201e      	movs	r0, #30
1000bcc8:	47a0      	blx	r4
1000bcca:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000bccc:	2b00      	cmp	r3, #0
1000bcce:	d11a      	bne.n	1000bd06 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000bcd0:	4f32      	ldr	r7, [pc, #200]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bcd2:	0038      	movs	r0, r7
1000bcd4:	4e32      	ldr	r6, [pc, #200]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bcd6:	47b0      	blx	r6
1000bcd8:	4835      	ldr	r0, [pc, #212]	; (1000bdb0 <ble_pair_key_request_handler+0x11c>)
1000bcda:	4c33      	ldr	r4, [pc, #204]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bcdc:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000bcde:	0038      	movs	r0, r7
1000bce0:	47b0      	blx	r6
1000bce2:	4834      	ldr	r0, [pc, #208]	; (1000bdb4 <ble_pair_key_request_handler+0x120>)
1000bce4:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000bce6:	8828      	ldrh	r0, [r5, #0]
1000bce8:	2113      	movs	r1, #19
1000bcea:	4b33      	ldr	r3, [pc, #204]	; (1000bdb8 <ble_pair_key_request_handler+0x124>)
1000bcec:	4798      	blx	r3
1000bcee:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000bcf0:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000bcf2:	2b00      	cmp	r3, #0
1000bcf4:	d04c      	beq.n	1000bd90 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000bcf6:	4829      	ldr	r0, [pc, #164]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bcf8:	4b29      	ldr	r3, [pc, #164]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bcfa:	4798      	blx	r3
1000bcfc:	482f      	ldr	r0, [pc, #188]	; (1000bdbc <ble_pair_key_request_handler+0x128>)
1000bcfe:	4b2a      	ldr	r3, [pc, #168]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bd00:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000bd02:	20e2      	movs	r0, #226	; 0xe2
1000bd04:	e044      	b.n	1000bd90 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000bd06:	001a      	movs	r2, r3
1000bd08:	3a30      	subs	r2, #48	; 0x30
1000bd0a:	2a09      	cmp	r2, #9
1000bd0c:	d8db      	bhi.n	1000bcc6 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000bd0e:	aa02      	add	r2, sp, #8
1000bd10:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000bd12:	4038      	ands	r0, r7
1000bd14:	4b2a      	ldr	r3, [pc, #168]	; (1000bdc0 <ble_pair_key_request_handler+0x12c>)
1000bd16:	4798      	blx	r3
1000bd18:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000bd1a:	2e06      	cmp	r6, #6
1000bd1c:	d026      	beq.n	1000bd6c <ble_pair_key_request_handler+0xd8>
1000bd1e:	e7d2      	b.n	1000bcc6 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000bd20:	481e      	ldr	r0, [pc, #120]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bd22:	4b1f      	ldr	r3, [pc, #124]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bd24:	4798      	blx	r3
1000bd26:	4827      	ldr	r0, [pc, #156]	; (1000bdc4 <ble_pair_key_request_handler+0x130>)
1000bd28:	4b1f      	ldr	r3, [pc, #124]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bd2a:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000bd2c:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000bd2e:	4e24      	ldr	r6, [pc, #144]	; (1000bdc0 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000bd30:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000bd32:	5ce0      	ldrb	r0, [r4, r3]
1000bd34:	47b0      	blx	r6
1000bd36:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000bd38:	2c06      	cmp	r4, #6
1000bd3a:	d1f9      	bne.n	1000bd30 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000bd3c:	ab01      	add	r3, sp, #4
1000bd3e:	7899      	ldrb	r1, [r3, #2]
1000bd40:	8828      	ldrh	r0, [r5, #0]
1000bd42:	aa02      	add	r2, sp, #8
1000bd44:	4b20      	ldr	r3, [pc, #128]	; (1000bdc8 <ble_pair_key_request_handler+0x134>)
1000bd46:	4798      	blx	r3
1000bd48:	2800      	cmp	r0, #0
1000bd4a:	d021      	beq.n	1000bd90 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000bd4c:	4813      	ldr	r0, [pc, #76]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bd4e:	4b14      	ldr	r3, [pc, #80]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bd50:	4798      	blx	r3
1000bd52:	481e      	ldr	r0, [pc, #120]	; (1000bdcc <ble_pair_key_request_handler+0x138>)
1000bd54:	4b14      	ldr	r3, [pc, #80]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bd56:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000bd58:	2000      	movs	r0, #0
1000bd5a:	e019      	b.n	1000bd90 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000bd5c:	480f      	ldr	r0, [pc, #60]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bd5e:	4b10      	ldr	r3, [pc, #64]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bd60:	4798      	blx	r3
1000bd62:	481b      	ldr	r0, [pc, #108]	; (1000bdd0 <ble_pair_key_request_handler+0x13c>)
1000bd64:	4b10      	ldr	r3, [pc, #64]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bd66:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000bd68:	2000      	movs	r0, #0
1000bd6a:	e011      	b.n	1000bd90 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000bd6c:	480b      	ldr	r0, [pc, #44]	; (1000bd9c <ble_pair_key_request_handler+0x108>)
1000bd6e:	4b0c      	ldr	r3, [pc, #48]	; (1000bda0 <ble_pair_key_request_handler+0x10c>)
1000bd70:	4798      	blx	r3
1000bd72:	4818      	ldr	r0, [pc, #96]	; (1000bdd4 <ble_pair_key_request_handler+0x140>)
1000bd74:	4b0c      	ldr	r3, [pc, #48]	; (1000bda8 <ble_pair_key_request_handler+0x114>)
1000bd76:	4798      	blx	r3
1000bd78:	e7d8      	b.n	1000bd2c <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000bd7a:	ab01      	add	r3, sp, #4
1000bd7c:	885a      	ldrh	r2, [r3, #2]
1000bd7e:	2380      	movs	r3, #128	; 0x80
1000bd80:	005b      	lsls	r3, r3, #1
1000bd82:	429a      	cmp	r2, r3
1000bd84:	d0cc      	beq.n	1000bd20 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000bd86:	ab01      	add	r3, sp, #4
1000bd88:	789b      	ldrb	r3, [r3, #2]
1000bd8a:	2b01      	cmp	r3, #1
1000bd8c:	d0e6      	beq.n	1000bd5c <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000bd8e:	2000      	movs	r0, #0
}
1000bd90:	b005      	add	sp, #20
1000bd92:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bd94:	10013520 	.word	0x10013520
1000bd98:	10011bb7 	.word	0x10011bb7
1000bd9c:	10012d7c 	.word	0x10012d7c
1000bda0:	10011e31 	.word	0x10011e31
1000bda4:	1001379c 	.word	0x1001379c
1000bda8:	10011d11 	.word	0x10011d11
1000bdac:	1000c91d 	.word	0x1000c91d
1000bdb0:	100137c4 	.word	0x100137c4
1000bdb4:	100137d0 	.word	0x100137d0
1000bdb8:	1000e375 	.word	0x1000e375
1000bdbc:	100136b8 	.word	0x100136b8
1000bdc0:	10011d45 	.word	0x10011d45
1000bdc4:	100137e4 	.word	0x100137e4
1000bdc8:	1000ee9d 	.word	0x1000ee9d
1000bdcc:	1001381c 	.word	0x1001381c
1000bdd0:	10013834 	.word	0x10013834
1000bdd4:	10013850 	.word	0x10013850

1000bdd8 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000bdd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bdda:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000bddc:	8805      	ldrh	r5, [r0, #0]
1000bdde:	4b2f      	ldr	r3, [pc, #188]	; (1000be9c <ble_encryption_request_handler+0xc4>)
1000bde0:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bde2:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000bde4:	0010      	movs	r0, r2
1000bde6:	8919      	ldrh	r1, [r3, #8]
1000bde8:	42a9      	cmp	r1, r5
1000bdea:	d116      	bne.n	1000be1a <ble_encryption_request_handler+0x42>
1000bdec:	0019      	movs	r1, r3
1000bdee:	315e      	adds	r1, #94	; 0x5e
1000bdf0:	7809      	ldrb	r1, [r1, #0]
1000bdf2:	2901      	cmp	r1, #1
1000bdf4:	d911      	bls.n	1000be1a <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000bdf6:	4929      	ldr	r1, [pc, #164]	; (1000be9c <ble_encryption_request_handler+0xc4>)
1000bdf8:	0152      	lsls	r2, r2, #5
1000bdfa:	1a10      	subs	r0, r2, r0
1000bdfc:	0080      	lsls	r0, r0, #2
1000bdfe:	1808      	adds	r0, r1, r0
1000be00:	305e      	adds	r0, #94	; 0x5e
1000be02:	2306      	movs	r3, #6
1000be04:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000be06:	0162      	lsls	r2, r4, #5
1000be08:	1b13      	subs	r3, r2, r4
1000be0a:	009b      	lsls	r3, r3, #2
1000be0c:	18cb      	adds	r3, r1, r3
1000be0e:	3370      	adds	r3, #112	; 0x70
1000be10:	881a      	ldrh	r2, [r3, #0]
1000be12:	8873      	ldrh	r3, [r6, #2]
1000be14:	429a      	cmp	r2, r3
1000be16:	d113      	bne.n	1000be40 <ble_encryption_request_handler+0x68>
1000be18:	e006      	b.n	1000be28 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be1a:	3401      	adds	r4, #1
1000be1c:	b2e4      	uxtb	r4, r4
1000be1e:	3201      	adds	r2, #1
1000be20:	337c      	adds	r3, #124	; 0x7c
1000be22:	2c05      	cmp	r4, #5
1000be24:	d1de      	bne.n	1000bde4 <ble_encryption_request_handler+0xc>
1000be26:	e00b      	b.n	1000be40 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000be28:	0161      	lsls	r1, r4, #5
1000be2a:	1b09      	subs	r1, r1, r4
1000be2c:	0089      	lsls	r1, r1, #2
1000be2e:	4b1b      	ldr	r3, [pc, #108]	; (1000be9c <ble_encryption_request_handler+0xc4>)
1000be30:	1859      	adds	r1, r3, r1
1000be32:	3172      	adds	r1, #114	; 0x72
1000be34:	1d30      	adds	r0, r6, #4
1000be36:	2208      	movs	r2, #8
1000be38:	4b19      	ldr	r3, [pc, #100]	; (1000bea0 <ble_encryption_request_handler+0xc8>)
1000be3a:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000be3c:	2800      	cmp	r0, #0
1000be3e:	d015      	beq.n	1000be6c <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000be40:	4f18      	ldr	r7, [pc, #96]	; (1000bea4 <ble_encryption_request_handler+0xcc>)
1000be42:	0038      	movs	r0, r7
1000be44:	4e18      	ldr	r6, [pc, #96]	; (1000bea8 <ble_encryption_request_handler+0xd0>)
1000be46:	47b0      	blx	r6
1000be48:	4818      	ldr	r0, [pc, #96]	; (1000beac <ble_encryption_request_handler+0xd4>)
1000be4a:	4d19      	ldr	r5, [pc, #100]	; (1000beb0 <ble_encryption_request_handler+0xd8>)
1000be4c:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000be4e:	0038      	movs	r0, r7
1000be50:	47b0      	blx	r6
1000be52:	4818      	ldr	r0, [pc, #96]	; (1000beb4 <ble_encryption_request_handler+0xdc>)
1000be54:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000be56:	0163      	lsls	r3, r4, #5
1000be58:	1b1c      	subs	r4, r3, r4
1000be5a:	00a4      	lsls	r4, r4, #2
1000be5c:	4b0f      	ldr	r3, [pc, #60]	; (1000be9c <ble_encryption_request_handler+0xc4>)
1000be5e:	191c      	adds	r4, r3, r4
1000be60:	8920      	ldrh	r0, [r4, #8]
1000be62:	2105      	movs	r1, #5
1000be64:	4b14      	ldr	r3, [pc, #80]	; (1000beb8 <ble_encryption_request_handler+0xe0>)
1000be66:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000be68:	20e2      	movs	r0, #226	; 0xe2
1000be6a:	e016      	b.n	1000be9a <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000be6c:	0162      	lsls	r2, r4, #5
1000be6e:	1b13      	subs	r3, r2, r4
1000be70:	009b      	lsls	r3, r3, #2
1000be72:	3360      	adds	r3, #96	; 0x60
1000be74:	4909      	ldr	r1, [pc, #36]	; (1000be9c <ble_encryption_request_handler+0xc4>)
1000be76:	185b      	adds	r3, r3, r1
1000be78:	1b14      	subs	r4, r2, r4
1000be7a:	00a4      	lsls	r4, r4, #2
1000be7c:	190c      	adds	r4, r1, r4
1000be7e:	7d21      	ldrb	r1, [r4, #20]
1000be80:	8830      	ldrh	r0, [r6, #0]
1000be82:	2201      	movs	r2, #1
1000be84:	4c0d      	ldr	r4, [pc, #52]	; (1000bebc <ble_encryption_request_handler+0xe4>)
1000be86:	47a0      	blx	r4
1000be88:	2800      	cmp	r0, #0
1000be8a:	d006      	beq.n	1000be9a <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000be8c:	4805      	ldr	r0, [pc, #20]	; (1000bea4 <ble_encryption_request_handler+0xcc>)
1000be8e:	4b06      	ldr	r3, [pc, #24]	; (1000bea8 <ble_encryption_request_handler+0xd0>)
1000be90:	4798      	blx	r3
1000be92:	480b      	ldr	r0, [pc, #44]	; (1000bec0 <ble_encryption_request_handler+0xe8>)
1000be94:	4b06      	ldr	r3, [pc, #24]	; (1000beb0 <ble_encryption_request_handler+0xd8>)
1000be96:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000be98:	2000      	movs	r0, #0
}
1000be9a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000be9c:	10015c54 	.word	0x10015c54
1000bea0:	10011b99 	.word	0x10011b99
1000bea4:	10012d7c 	.word	0x10012d7c
1000bea8:	10011e31 	.word	0x10011e31
1000beac:	10013864 	.word	0x10013864
1000beb0:	10011d11 	.word	0x10011d11
1000beb4:	1001389c 	.word	0x1001389c
1000beb8:	1000e375 	.word	0x1000e375
1000bebc:	1000efd1 	.word	0x1000efd1
1000bec0:	100138f4 	.word	0x100138f4

1000bec4 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000bec4:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000bec6:	2a00      	cmp	r2, #0
1000bec8:	d047      	beq.n	1000bf5a <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000beca:	2906      	cmp	r1, #6
1000becc:	d847      	bhi.n	1000bf5e <ble_mgr_events_callback_handler+0x9a>
1000bece:	0089      	lsls	r1, r1, #2
1000bed0:	4b28      	ldr	r3, [pc, #160]	; (1000bf74 <ble_mgr_events_callback_handler+0xb0>)
1000bed2:	585b      	ldr	r3, [r3, r1]
1000bed4:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000bed6:	4b28      	ldr	r3, [pc, #160]	; (1000bf78 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000bed8:	2405      	movs	r4, #5
1000beda:	e00a      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000bedc:	4b27      	ldr	r3, [pc, #156]	; (1000bf7c <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000bede:	2401      	movs	r4, #1
			}
			break;
1000bee0:	e007      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000bee2:	4b27      	ldr	r3, [pc, #156]	; (1000bf80 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000bee4:	2405      	movs	r4, #5
			}
			break;
1000bee6:	e004      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000bee8:	4b26      	ldr	r3, [pc, #152]	; (1000bf84 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000beea:	2401      	movs	r4, #1
			}
			break;
1000beec:	e001      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000beee:	4b26      	ldr	r3, [pc, #152]	; (1000bf88 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000bef0:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000bef2:	2800      	cmp	r0, #0
1000bef4:	d116      	bne.n	1000bf24 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000bef6:	6819      	ldr	r1, [r3, #0]
1000bef8:	2900      	cmp	r1, #0
1000befa:	d10b      	bne.n	1000bf14 <ble_mgr_events_callback_handler+0x50>
1000befc:	e006      	b.n	1000bf0c <ble_mgr_events_callback_handler+0x48>
1000befe:	001d      	movs	r5, r3
1000bf00:	3304      	adds	r3, #4
1000bf02:	1f18      	subs	r0, r3, #4
1000bf04:	6800      	ldr	r0, [r0, #0]
1000bf06:	2800      	cmp	r0, #0
1000bf08:	d106      	bne.n	1000bf18 <ble_mgr_events_callback_handler+0x54>
1000bf0a:	e000      	b.n	1000bf0e <ble_mgr_events_callback_handler+0x4a>
1000bf0c:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000bf0e:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000bf10:	2101      	movs	r1, #1
						break;
1000bf12:	e02c      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
1000bf14:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000bf16:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000bf18:	3101      	adds	r1, #1
1000bf1a:	b2c9      	uxtb	r1, r1
1000bf1c:	42a1      	cmp	r1, r4
1000bf1e:	d3ee      	bcc.n	1000befe <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000bf20:	2100      	movs	r1, #0
1000bf22:	e024      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
1000bf24:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000bf26:	2801      	cmp	r0, #1
1000bf28:	d121      	bne.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000bf2a:	6819      	ldr	r1, [r3, #0]
1000bf2c:	428a      	cmp	r2, r1
1000bf2e:	d10c      	bne.n	1000bf4a <ble_mgr_events_callback_handler+0x86>
1000bf30:	e006      	b.n	1000bf40 <ble_mgr_events_callback_handler+0x7c>
1000bf32:	001d      	movs	r5, r3
1000bf34:	3304      	adds	r3, #4
1000bf36:	1f18      	subs	r0, r3, #4
1000bf38:	6800      	ldr	r0, [r0, #0]
1000bf3a:	4282      	cmp	r2, r0
1000bf3c:	d107      	bne.n	1000bf4e <ble_mgr_events_callback_handler+0x8a>
1000bf3e:	e000      	b.n	1000bf42 <ble_mgr_events_callback_handler+0x7e>
1000bf40:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000bf42:	2300      	movs	r3, #0
1000bf44:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000bf46:	2101      	movs	r1, #1
						break;
1000bf48:	e011      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
1000bf4a:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000bf4c:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000bf4e:	3101      	adds	r1, #1
1000bf50:	b2c9      	uxtb	r1, r1
1000bf52:	42a1      	cmp	r1, r4
1000bf54:	d3ed      	bcc.n	1000bf32 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000bf56:	2100      	movs	r1, #0
1000bf58:	e009      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000bf5a:	2100      	movs	r1, #0
1000bf5c:	e007      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000bf5e:	2100      	movs	r1, #0
1000bf60:	e005      	b.n	1000bf6e <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000bf62:	4b0a      	ldr	r3, [pc, #40]	; (1000bf8c <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000bf64:	2405      	movs	r4, #5
1000bf66:	e7c4      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000bf68:	4b09      	ldr	r3, [pc, #36]	; (1000bf90 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000bf6a:	2401      	movs	r4, #1
1000bf6c:	e7c1      	b.n	1000bef2 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000bf6e:	0008      	movs	r0, r1
1000bf70:	bd30      	pop	{r4, r5, pc}
1000bf72:	46c0      	nop			; (mov r8, r8)
1000bf74:	10013414 	.word	0x10013414
1000bf78:	10015c40 	.word	0x10015c40
1000bf7c:	10015c3c 	.word	0x10015c3c
1000bf80:	10015ec4 	.word	0x10015ec4
1000bf84:	10016478 	.word	0x10016478
1000bf88:	10015ed8 	.word	0x10015ed8
1000bf8c:	10015eec 	.word	0x10015eec
1000bf90:	10015f34 	.word	0x10015f34

1000bf94 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000bf94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bf96:	465f      	mov	r7, fp
1000bf98:	4656      	mov	r6, sl
1000bf9a:	464d      	mov	r5, r9
1000bf9c:	4644      	mov	r4, r8
1000bf9e:	b4f0      	push	{r4, r5, r6, r7}
1000bfa0:	b08d      	sub	sp, #52	; 0x34
1000bfa2:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000bfa4:	2400      	movs	r4, #0
1000bfa6:	4b72      	ldr	r3, [pc, #456]	; (1000c170 <ble_device_init+0x1dc>)
1000bfa8:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000bfaa:	2207      	movs	r2, #7
1000bfac:	2100      	movs	r1, #0
1000bfae:	4871      	ldr	r0, [pc, #452]	; (1000c174 <ble_device_init+0x1e0>)
1000bfb0:	4d71      	ldr	r5, [pc, #452]	; (1000c178 <ble_device_init+0x1e4>)
1000bfb2:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000bfb4:	2212      	movs	r2, #18
1000bfb6:	2100      	movs	r1, #0
1000bfb8:	4870      	ldr	r0, [pc, #448]	; (1000c17c <ble_device_init+0x1e8>)
1000bfba:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000bfbc:	4a70      	ldr	r2, [pc, #448]	; (1000c180 <ble_device_init+0x1ec>)
1000bfbe:	2100      	movs	r1, #0
1000bfc0:	4870      	ldr	r0, [pc, #448]	; (1000c184 <ble_device_init+0x1f0>)
1000bfc2:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000bfc4:	4b70      	ldr	r3, [pc, #448]	; (1000c188 <ble_device_init+0x1f4>)
1000bfc6:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000bfc8:	22cd      	movs	r2, #205	; 0xcd
1000bfca:	0092      	lsls	r2, r2, #2
1000bfcc:	2100      	movs	r1, #0
1000bfce:	486f      	ldr	r0, [pc, #444]	; (1000c18c <ble_device_init+0x1f8>)
1000bfd0:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000bfd2:	4b6f      	ldr	r3, [pc, #444]	; (1000c190 <ble_device_init+0x1fc>)
1000bfd4:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000bfd6:	2283      	movs	r2, #131	; 0x83
1000bfd8:	0092      	lsls	r2, r2, #2
1000bfda:	2100      	movs	r1, #0
1000bfdc:	486d      	ldr	r0, [pc, #436]	; (1000c194 <ble_device_init+0x200>)
1000bfde:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000bfe0:	4b6d      	ldr	r3, [pc, #436]	; (1000c198 <ble_device_init+0x204>)
1000bfe2:	469b      	mov	fp, r3
1000bfe4:	2380      	movs	r3, #128	; 0x80
1000bfe6:	00db      	lsls	r3, r3, #3
1000bfe8:	469a      	mov	sl, r3
1000bfea:	001a      	movs	r2, r3
1000bfec:	2100      	movs	r1, #0
1000bfee:	4658      	mov	r0, fp
1000bff0:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000bff2:	4b6a      	ldr	r3, [pc, #424]	; (1000c19c <ble_device_init+0x208>)
1000bff4:	4699      	mov	r9, r3
1000bff6:	2380      	movs	r3, #128	; 0x80
1000bff8:	015b      	lsls	r3, r3, #5
1000bffa:	4698      	mov	r8, r3
1000bffc:	001a      	movs	r2, r3
1000bffe:	2100      	movs	r1, #0
1000c000:	4648      	mov	r0, r9
1000c002:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c004:	4f66      	ldr	r7, [pc, #408]	; (1000c1a0 <ble_device_init+0x20c>)
1000c006:	221c      	movs	r2, #28
1000c008:	2100      	movs	r1, #0
1000c00a:	0038      	movs	r0, r7
1000c00c:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c00e:	465b      	mov	r3, fp
1000c010:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c012:	4653      	mov	r3, sl
1000c014:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c016:	464b      	mov	r3, r9
1000c018:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c01a:	4643      	mov	r3, r8
1000c01c:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c01e:	4b61      	ldr	r3, [pc, #388]	; (1000c1a4 <ble_device_init+0x210>)
1000c020:	601c      	str	r4, [r3, #0]
1000c022:	605c      	str	r4, [r3, #4]
1000c024:	609c      	str	r4, [r3, #8]
1000c026:	60dc      	str	r4, [r3, #12]
1000c028:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c02a:	4b5f      	ldr	r3, [pc, #380]	; (1000c1a8 <ble_device_init+0x214>)
1000c02c:	601c      	str	r4, [r3, #0]
1000c02e:	605c      	str	r4, [r3, #4]
1000c030:	609c      	str	r4, [r3, #8]
1000c032:	60dc      	str	r4, [r3, #12]
1000c034:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c036:	4b5d      	ldr	r3, [pc, #372]	; (1000c1ac <ble_device_init+0x218>)
1000c038:	601c      	str	r4, [r3, #0]
1000c03a:	605c      	str	r4, [r3, #4]
1000c03c:	609c      	str	r4, [r3, #8]
1000c03e:	60dc      	str	r4, [r3, #12]
1000c040:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c042:	4b5b      	ldr	r3, [pc, #364]	; (1000c1b0 <ble_device_init+0x21c>)
1000c044:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c046:	4b5b      	ldr	r3, [pc, #364]	; (1000c1b4 <ble_device_init+0x220>)
1000c048:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c04a:	4b5b      	ldr	r3, [pc, #364]	; (1000c1b8 <ble_device_init+0x224>)
1000c04c:	601c      	str	r4, [r3, #0]
1000c04e:	605c      	str	r4, [r3, #4]
1000c050:	609c      	str	r4, [r3, #8]
1000c052:	60dc      	str	r4, [r3, #12]
1000c054:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c056:	4b59      	ldr	r3, [pc, #356]	; (1000c1bc <ble_device_init+0x228>)
1000c058:	601c      	str	r4, [r3, #0]
1000c05a:	4c59      	ldr	r4, [pc, #356]	; (1000c1c0 <ble_device_init+0x22c>)
1000c05c:	239b      	movs	r3, #155	; 0x9b
1000c05e:	009b      	lsls	r3, r3, #2
1000c060:	4698      	mov	r8, r3
1000c062:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c064:	4f44      	ldr	r7, [pc, #272]	; (1000c178 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c066:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c068:	227c      	movs	r2, #124	; 0x7c
1000c06a:	2100      	movs	r1, #0
1000c06c:	0020      	movs	r0, r4
1000c06e:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c070:	0023      	movs	r3, r4
1000c072:	335e      	adds	r3, #94	; 0x5e
1000c074:	2200      	movs	r2, #0
1000c076:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c078:	7625      	strb	r5, [r4, #24]
1000c07a:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c07c:	45a0      	cmp	r8, r4
1000c07e:	d1f3      	bne.n	1000c068 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c080:	4b50      	ldr	r3, [pc, #320]	; (1000c1c4 <ble_device_init+0x230>)
1000c082:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c084:	4846      	ldr	r0, [pc, #280]	; (1000c1a0 <ble_device_init+0x20c>)
1000c086:	4b3e      	ldr	r3, [pc, #248]	; (1000c180 <ble_device_init+0x1ec>)
1000c088:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c08a:	4b3e      	ldr	r3, [pc, #248]	; (1000c184 <ble_device_init+0x1f0>)
1000c08c:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c08e:	4b4e      	ldr	r3, [pc, #312]	; (1000c1c8 <ble_device_init+0x234>)
1000c090:	4798      	blx	r3
1000c092:	2800      	cmp	r0, #0
1000c094:	d00b      	beq.n	1000c0ae <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c096:	4e4d      	ldr	r6, [pc, #308]	; (1000c1cc <ble_device_init+0x238>)
1000c098:	0030      	movs	r0, r6
1000c09a:	4d4d      	ldr	r5, [pc, #308]	; (1000c1d0 <ble_device_init+0x23c>)
1000c09c:	47a8      	blx	r5
1000c09e:	484d      	ldr	r0, [pc, #308]	; (1000c1d4 <ble_device_init+0x240>)
1000c0a0:	4c4d      	ldr	r4, [pc, #308]	; (1000c1d8 <ble_device_init+0x244>)
1000c0a2:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c0a4:	0030      	movs	r0, r6
1000c0a6:	47a8      	blx	r5
1000c0a8:	484c      	ldr	r0, [pc, #304]	; (1000c1dc <ble_device_init+0x248>)
1000c0aa:	47a0      	blx	r4
1000c0ac:	e7fe      	b.n	1000c0ac <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c0ae:	4a4c      	ldr	r2, [pc, #304]	; (1000c1e0 <ble_device_init+0x24c>)
1000c0b0:	2100      	movs	r1, #0
1000c0b2:	2000      	movs	r0, #0
1000c0b4:	4c4b      	ldr	r4, [pc, #300]	; (1000c1e4 <ble_device_init+0x250>)
1000c0b6:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c0b8:	4a4b      	ldr	r2, [pc, #300]	; (1000c1e8 <ble_device_init+0x254>)
1000c0ba:	2102      	movs	r1, #2
1000c0bc:	2000      	movs	r0, #0
1000c0be:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c0c0:	2109      	movs	r1, #9
1000c0c2:	484a      	ldr	r0, [pc, #296]	; (1000c1ec <ble_device_init+0x258>)
1000c0c4:	4b4a      	ldr	r3, [pc, #296]	; (1000c1f0 <ble_device_init+0x25c>)
1000c0c6:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c0c8:	2800      	cmp	r0, #0
1000c0ca:	d005      	beq.n	1000c0d8 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000c0cc:	483f      	ldr	r0, [pc, #252]	; (1000c1cc <ble_device_init+0x238>)
1000c0ce:	4b40      	ldr	r3, [pc, #256]	; (1000c1d0 <ble_device_init+0x23c>)
1000c0d0:	4798      	blx	r3
1000c0d2:	4848      	ldr	r0, [pc, #288]	; (1000c1f4 <ble_device_init+0x260>)
1000c0d4:	4b40      	ldr	r3, [pc, #256]	; (1000c1d8 <ble_device_init+0x244>)
1000c0d6:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c0d8:	2207      	movs	r2, #7
1000c0da:	4947      	ldr	r1, [pc, #284]	; (1000c1f8 <ble_device_init+0x264>)
1000c0dc:	3108      	adds	r1, #8
1000c0de:	4668      	mov	r0, sp
1000c0e0:	4b46      	ldr	r3, [pc, #280]	; (1000c1fc <ble_device_init+0x268>)
1000c0e2:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c0e4:	2226      	movs	r2, #38	; 0x26
1000c0e6:	2100      	movs	r1, #0
1000c0e8:	a802      	add	r0, sp, #8
1000c0ea:	4b23      	ldr	r3, [pc, #140]	; (1000c178 <ble_device_init+0x1e4>)
1000c0ec:	4798      	blx	r3
	
	if (addr == NULL)
1000c0ee:	2e00      	cmp	r6, #0
1000c0f0:	d10c      	bne.n	1000c10c <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c0f2:	4668      	mov	r0, sp
1000c0f4:	4b42      	ldr	r3, [pc, #264]	; (1000c200 <ble_device_init+0x26c>)
1000c0f6:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c0f8:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c0fa:	2800      	cmp	r0, #0
1000c0fc:	d006      	beq.n	1000c10c <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c0fe:	4833      	ldr	r0, [pc, #204]	; (1000c1cc <ble_device_init+0x238>)
1000c100:	4b33      	ldr	r3, [pc, #204]	; (1000c1d0 <ble_device_init+0x23c>)
1000c102:	4798      	blx	r3
1000c104:	483f      	ldr	r0, [pc, #252]	; (1000c204 <ble_device_init+0x270>)
1000c106:	4b34      	ldr	r3, [pc, #208]	; (1000c1d8 <ble_device_init+0x244>)
1000c108:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c10a:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c10c:	ac02      	add	r4, sp, #8
1000c10e:	230a      	movs	r3, #10
1000c110:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000c112:	4b3d      	ldr	r3, [pc, #244]	; (1000c208 <ble_device_init+0x274>)
1000c114:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000c116:	2207      	movs	r2, #7
1000c118:	0031      	movs	r1, r6
1000c11a:	a803      	add	r0, sp, #12
1000c11c:	4b37      	ldr	r3, [pc, #220]	; (1000c1fc <ble_device_init+0x268>)
1000c11e:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000c120:	2300      	movs	r3, #0
1000c122:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000c124:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000c126:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000c128:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000c12a:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c12c:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c12e:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000c130:	2380      	movs	r3, #128	; 0x80
1000c132:	009b      	lsls	r3, r3, #2
1000c134:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000c136:	0020      	movs	r0, r4
1000c138:	4b34      	ldr	r3, [pc, #208]	; (1000c20c <ble_device_init+0x278>)
1000c13a:	4798      	blx	r3
1000c13c:	2800      	cmp	r0, #0
1000c13e:	d005      	beq.n	1000c14c <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000c140:	4822      	ldr	r0, [pc, #136]	; (1000c1cc <ble_device_init+0x238>)
1000c142:	4b23      	ldr	r3, [pc, #140]	; (1000c1d0 <ble_device_init+0x23c>)
1000c144:	4798      	blx	r3
1000c146:	4832      	ldr	r0, [pc, #200]	; (1000c210 <ble_device_init+0x27c>)
1000c148:	4b23      	ldr	r3, [pc, #140]	; (1000c1d8 <ble_device_init+0x244>)
1000c14a:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000c14c:	0030      	movs	r0, r6
1000c14e:	4b31      	ldr	r3, [pc, #196]	; (1000c214 <ble_device_init+0x280>)
1000c150:	4798      	blx	r3
1000c152:	2800      	cmp	r0, #0
1000c154:	d005      	beq.n	1000c162 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000c156:	481d      	ldr	r0, [pc, #116]	; (1000c1cc <ble_device_init+0x238>)
1000c158:	4b1d      	ldr	r3, [pc, #116]	; (1000c1d0 <ble_device_init+0x23c>)
1000c15a:	4798      	blx	r3
1000c15c:	482e      	ldr	r0, [pc, #184]	; (1000c218 <ble_device_init+0x284>)
1000c15e:	4b1e      	ldr	r3, [pc, #120]	; (1000c1d8 <ble_device_init+0x244>)
1000c160:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000c162:	b00d      	add	sp, #52	; 0x34
1000c164:	bc3c      	pop	{r2, r3, r4, r5}
1000c166:	4690      	mov	r8, r2
1000c168:	4699      	mov	r9, r3
1000c16a:	46a2      	mov	sl, r4
1000c16c:	46ab      	mov	fp, r5
1000c16e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c170:	10014750 	.word	0x10014750
1000c174:	10014758 	.word	0x10014758
1000c178:	10011bc9 	.word	0x10011bc9
1000c17c:	10015f00 	.word	0x10015f00
1000c180:	000004e2 	.word	0x000004e2
1000c184:	10014270 	.word	0x10014270
1000c188:	10014754 	.word	0x10014754
1000c18c:	10015f38 	.word	0x10015f38
1000c190:	10015f30 	.word	0x10015f30
1000c194:	1001626c 	.word	0x1001626c
1000c198:	10013e70 	.word	0x10013e70
1000c19c:	10014760 	.word	0x10014760
1000c1a0:	10015f14 	.word	0x10015f14
1000c1a4:	10015ed8 	.word	0x10015ed8
1000c1a8:	10015eec 	.word	0x10015eec
1000c1ac:	10015c40 	.word	0x10015c40
1000c1b0:	10015f34 	.word	0x10015f34
1000c1b4:	10015c3c 	.word	0x10015c3c
1000c1b8:	10015ec4 	.word	0x10015ec4
1000c1bc:	10016478 	.word	0x10016478
1000c1c0:	10015c54 	.word	0x10015c54
1000c1c4:	10015ec0 	.word	0x10015ec0
1000c1c8:	1000df81 	.word	0x1000df81
1000c1cc:	10012d7c 	.word	0x10012d7c
1000c1d0:	10011e31 	.word	0x10011e31
1000c1d4:	10013914 	.word	0x10013914
1000c1d8:	10011d11 	.word	0x10011d11
1000c1dc:	10013940 	.word	0x10013940
1000c1e0:	10013b94 	.word	0x10013b94
1000c1e4:	1000bec5 	.word	0x1000bec5
1000c1e8:	10013530 	.word	0x10013530
1000c1ec:	10013988 	.word	0x10013988
1000c1f0:	1000de99 	.word	0x1000de99
1000c1f4:	10013994 	.word	0x10013994
1000c1f8:	10013520 	.word	0x10013520
1000c1fc:	10011bb7 	.word	0x10011bb7
1000c200:	1000decd 	.word	0x1000decd
1000c204:	100139ac 	.word	0x100139ac
1000c208:	00003a98 	.word	0x00003a98
1000c20c:	1000def1 	.word	0x1000def1
1000c210:	100139d8 	.word	0x100139d8
1000c214:	1000e135 	.word	0x1000e135
1000c218:	10013a14 	.word	0x10013a14

1000c21c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000c21c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000c21e:	2200      	movs	r2, #0
1000c220:	2100      	movs	r1, #0
1000c222:	4b06      	ldr	r3, [pc, #24]	; (1000c23c <ble_send_slave_sec_request+0x20>)
1000c224:	4798      	blx	r3
1000c226:	2800      	cmp	r0, #0
1000c228:	d006      	beq.n	1000c238 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000c22a:	4805      	ldr	r0, [pc, #20]	; (1000c240 <ble_send_slave_sec_request+0x24>)
1000c22c:	4b05      	ldr	r3, [pc, #20]	; (1000c244 <ble_send_slave_sec_request+0x28>)
1000c22e:	4798      	blx	r3
1000c230:	4805      	ldr	r0, [pc, #20]	; (1000c248 <ble_send_slave_sec_request+0x2c>)
1000c232:	4b06      	ldr	r3, [pc, #24]	; (1000c24c <ble_send_slave_sec_request+0x30>)
1000c234:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000c236:	20e2      	movs	r0, #226	; 0xe2
}
1000c238:	bd10      	pop	{r4, pc}
1000c23a:	46c0      	nop			; (mov r8, r8)
1000c23c:	1000ef19 	.word	0x1000ef19
1000c240:	10012d7c 	.word	0x10012d7c
1000c244:	10011e31 	.word	0x10011e31
1000c248:	10013a64 	.word	0x10013a64
1000c24c:	10011d11 	.word	0x10011d11

1000c250 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c250:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c252:	465f      	mov	r7, fp
1000c254:	464e      	mov	r6, r9
1000c256:	4645      	mov	r5, r8
1000c258:	b4e0      	push	{r5, r6, r7}
1000c25a:	b09a      	sub	sp, #104	; 0x68
1000c25c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000c25e:	7a86      	ldrb	r6, [r0, #10]
1000c260:	2e00      	cmp	r6, #0
1000c262:	d000      	beq.n	1000c266 <ble_connected_state_handler+0x16>
1000c264:	e0c6      	b.n	1000c3f4 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000c266:	4875      	ldr	r0, [pc, #468]	; (1000c43c <ble_connected_state_handler+0x1ec>)
1000c268:	4f75      	ldr	r7, [pc, #468]	; (1000c440 <ble_connected_state_handler+0x1f0>)
1000c26a:	47b8      	blx	r7
1000c26c:	792b      	ldrb	r3, [r5, #4]
1000c26e:	796a      	ldrb	r2, [r5, #5]
1000c270:	79a9      	ldrb	r1, [r5, #6]
1000c272:	7868      	ldrb	r0, [r5, #1]
1000c274:	9002      	str	r0, [sp, #8]
1000c276:	78a8      	ldrb	r0, [r5, #2]
1000c278:	9001      	str	r0, [sp, #4]
1000c27a:	78e8      	ldrb	r0, [r5, #3]
1000c27c:	9000      	str	r0, [sp, #0]
1000c27e:	4871      	ldr	r0, [pc, #452]	; (1000c444 <ble_connected_state_handler+0x1f4>)
1000c280:	4c71      	ldr	r4, [pc, #452]	; (1000c448 <ble_connected_state_handler+0x1f8>)
1000c282:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000c284:	486d      	ldr	r0, [pc, #436]	; (1000c43c <ble_connected_state_handler+0x1ec>)
1000c286:	47b8      	blx	r7
1000c288:	8929      	ldrh	r1, [r5, #8]
1000c28a:	4870      	ldr	r0, [pc, #448]	; (1000c44c <ble_connected_state_handler+0x1fc>)
1000c28c:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000c28e:	2212      	movs	r2, #18
1000c290:	0029      	movs	r1, r5
1000c292:	486f      	ldr	r0, [pc, #444]	; (1000c450 <ble_connected_state_handler+0x200>)
1000c294:	4b6f      	ldr	r3, [pc, #444]	; (1000c454 <ble_connected_state_handler+0x204>)
1000c296:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c298:	9504      	str	r5, [sp, #16]
1000c29a:	2207      	movs	r2, #7
1000c29c:	0029      	movs	r1, r5
1000c29e:	486e      	ldr	r0, [pc, #440]	; (1000c458 <ble_connected_state_handler+0x208>)
1000c2a0:	4b6e      	ldr	r3, [pc, #440]	; (1000c45c <ble_connected_state_handler+0x20c>)
1000c2a2:	4798      	blx	r3
1000c2a4:	2800      	cmp	r0, #0
1000c2a6:	d100      	bne.n	1000c2aa <ble_connected_state_handler+0x5a>
1000c2a8:	e0ad      	b.n	1000c406 <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000c2aa:	782b      	ldrb	r3, [r5, #0]
1000c2ac:	2b02      	cmp	r3, #2
1000c2ae:	d000      	beq.n	1000c2b2 <ble_connected_state_handler+0x62>
1000c2b0:	e0a9      	b.n	1000c406 <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000c2b2:	2250      	movs	r2, #80	; 0x50
1000c2b4:	2100      	movs	r1, #0
1000c2b6:	a806      	add	r0, sp, #24
1000c2b8:	4b69      	ldr	r3, [pc, #420]	; (1000c460 <ble_connected_state_handler+0x210>)
1000c2ba:	4798      	blx	r3
1000c2bc:	4f69      	ldr	r7, [pc, #420]	; (1000c464 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000c2be:	2300      	movs	r3, #0
1000c2c0:	e00b      	b.n	1000c2da <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c2c2:	1c59      	adds	r1, r3, #1
1000c2c4:	7814      	ldrb	r4, [r2, #0]
1000c2c6:	a806      	add	r0, sp, #24
1000c2c8:	54c4      	strb	r4, [r0, r3]
1000c2ca:	3201      	adds	r2, #1
1000c2cc:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000c2ce:	42b3      	cmp	r3, r6
1000c2d0:	d1f7      	bne.n	1000c2c2 <ble_connected_state_handler+0x72>
1000c2d2:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c2d4:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000c2d6:	2b50      	cmp	r3, #80	; 0x50
1000c2d8:	d004      	beq.n	1000c2e4 <ble_connected_state_handler+0x94>
1000c2da:	001e      	movs	r6, r3
1000c2dc:	3610      	adds	r6, #16
1000c2de:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c2e0:	003a      	movs	r2, r7
1000c2e2:	e7ee      	b.n	1000c2c2 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000c2e4:	aa06      	add	r2, sp, #24
1000c2e6:	0029      	movs	r1, r5
1000c2e8:	2005      	movs	r0, #5
1000c2ea:	4b5f      	ldr	r3, [pc, #380]	; (1000c468 <ble_connected_state_handler+0x218>)
1000c2ec:	4798      	blx	r3
1000c2ee:	1e06      	subs	r6, r0, #0
1000c2f0:	d100      	bne.n	1000c2f4 <ble_connected_state_handler+0xa4>
1000c2f2:	e09c      	b.n	1000c42e <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000c2f4:	4851      	ldr	r0, [pc, #324]	; (1000c43c <ble_connected_state_handler+0x1ec>)
1000c2f6:	4b52      	ldr	r3, [pc, #328]	; (1000c440 <ble_connected_state_handler+0x1f0>)
1000c2f8:	4798      	blx	r3
1000c2fa:	485c      	ldr	r0, [pc, #368]	; (1000c46c <ble_connected_state_handler+0x21c>)
1000c2fc:	4b52      	ldr	r3, [pc, #328]	; (1000c448 <ble_connected_state_handler+0x1f8>)
1000c2fe:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000c300:	26e2      	movs	r6, #226	; 0xe2
1000c302:	e094      	b.n	1000c42e <ble_connected_state_handler+0x1de>
1000c304:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c306:	9405      	str	r4, [sp, #20]
1000c308:	2207      	movs	r2, #7
1000c30a:	9904      	ldr	r1, [sp, #16]
1000c30c:	4648      	mov	r0, r9
1000c30e:	47d8      	blx	fp
1000c310:	2800      	cmp	r0, #0
1000c312:	d109      	bne.n	1000c328 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c314:	9a05      	ldr	r2, [sp, #20]
1000c316:	0153      	lsls	r3, r2, #5
1000c318:	1a9b      	subs	r3, r3, r2
1000c31a:	009a      	lsls	r2, r3, #2
1000c31c:	4b54      	ldr	r3, [pc, #336]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c31e:	189b      	adds	r3, r3, r2
1000c320:	335e      	adds	r3, #94	; 0x5e
1000c322:	2202      	movs	r2, #2
1000c324:	701a      	strb	r2, [r3, #0]
1000c326:	e02b      	b.n	1000c380 <ble_connected_state_handler+0x130>
1000c328:	3401      	adds	r4, #1
1000c32a:	237c      	movs	r3, #124	; 0x7c
1000c32c:	469c      	mov	ip, r3
1000c32e:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c330:	2c05      	cmp	r4, #5
1000c332:	d1e7      	bne.n	1000c304 <ble_connected_state_handler+0xb4>
1000c334:	e072      	b.n	1000c41c <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c336:	001c      	movs	r4, r3
1000c338:	7811      	ldrb	r1, [r2, #0]
1000c33a:	2900      	cmp	r1, #0
1000c33c:	d11a      	bne.n	1000c374 <ble_connected_state_handler+0x124>
1000c33e:	e001      	b.n	1000c344 <ble_connected_state_handler+0xf4>
1000c340:	2400      	movs	r4, #0
1000c342:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000c344:	0163      	lsls	r3, r4, #5
1000c346:	4699      	mov	r9, r3
1000c348:	1b18      	subs	r0, r3, r4
1000c34a:	0080      	lsls	r0, r0, #2
1000c34c:	4b48      	ldr	r3, [pc, #288]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c34e:	4698      	mov	r8, r3
1000c350:	4440      	add	r0, r8
1000c352:	2212      	movs	r2, #18
1000c354:	0029      	movs	r1, r5
1000c356:	4b3f      	ldr	r3, [pc, #252]	; (1000c454 <ble_connected_state_handler+0x204>)
1000c358:	4798      	blx	r3
						ble_device_count++;
1000c35a:	4a46      	ldr	r2, [pc, #280]	; (1000c474 <ble_connected_state_handler+0x224>)
1000c35c:	7813      	ldrb	r3, [r2, #0]
1000c35e:	3301      	adds	r3, #1
1000c360:	b2db      	uxtb	r3, r3
1000c362:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c364:	464b      	mov	r3, r9
1000c366:	1b1b      	subs	r3, r3, r4
1000c368:	009b      	lsls	r3, r3, #2
1000c36a:	4443      	add	r3, r8
1000c36c:	335e      	adds	r3, #94	; 0x5e
1000c36e:	2202      	movs	r2, #2
1000c370:	701a      	strb	r2, [r3, #0]
						break;
1000c372:	e005      	b.n	1000c380 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c374:	1c79      	adds	r1, r7, #1
1000c376:	b2cf      	uxtb	r7, r1
1000c378:	3301      	adds	r3, #1
1000c37a:	327c      	adds	r2, #124	; 0x7c
1000c37c:	2f05      	cmp	r7, #5
1000c37e:	d1da      	bne.n	1000c336 <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c380:	2207      	movs	r2, #7
1000c382:	0029      	movs	r1, r5
1000c384:	4834      	ldr	r0, [pc, #208]	; (1000c458 <ble_connected_state_handler+0x208>)
1000c386:	4b35      	ldr	r3, [pc, #212]	; (1000c45c <ble_connected_state_handler+0x20c>)
1000c388:	4798      	blx	r3
1000c38a:	2800      	cmp	r0, #0
1000c38c:	d10c      	bne.n	1000c3a8 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000c38e:	017b      	lsls	r3, r7, #5
1000c390:	1bdb      	subs	r3, r3, r7
1000c392:	009b      	lsls	r3, r3, #2
1000c394:	4a36      	ldr	r2, [pc, #216]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c396:	18d3      	adds	r3, r2, r3
1000c398:	2205      	movs	r2, #5
1000c39a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c39c:	3202      	adds	r2, #2
1000c39e:	2100      	movs	r1, #0
1000c3a0:	482d      	ldr	r0, [pc, #180]	; (1000c458 <ble_connected_state_handler+0x208>)
1000c3a2:	4b2f      	ldr	r3, [pc, #188]	; (1000c460 <ble_connected_state_handler+0x210>)
1000c3a4:	4798      	blx	r3
1000c3a6:	e042      	b.n	1000c42e <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c3a8:	4b31      	ldr	r3, [pc, #196]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c3aa:	4698      	mov	r8, r3
1000c3ac:	017c      	lsls	r4, r7, #5
1000c3ae:	1be3      	subs	r3, r4, r7
1000c3b0:	009b      	lsls	r3, r3, #2
1000c3b2:	4443      	add	r3, r8
1000c3b4:	220a      	movs	r2, #10
1000c3b6:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c3b8:	3a03      	subs	r2, #3
1000c3ba:	2100      	movs	r1, #0
1000c3bc:	4826      	ldr	r0, [pc, #152]	; (1000c458 <ble_connected_state_handler+0x208>)
1000c3be:	4b28      	ldr	r3, [pc, #160]	; (1000c460 <ble_connected_state_handler+0x210>)
1000c3c0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c3c2:	1be4      	subs	r4, r4, r7
1000c3c4:	00a4      	lsls	r4, r4, #2
1000c3c6:	4444      	add	r4, r8
1000c3c8:	7ca3      	ldrb	r3, [r4, #18]
1000c3ca:	2b0a      	cmp	r3, #10
1000c3cc:	d12f      	bne.n	1000c42e <ble_connected_state_handler+0x1de>
1000c3ce:	e00d      	b.n	1000c3ec <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000c3d0:	481a      	ldr	r0, [pc, #104]	; (1000c43c <ble_connected_state_handler+0x1ec>)
1000c3d2:	4b1b      	ldr	r3, [pc, #108]	; (1000c440 <ble_connected_state_handler+0x1f0>)
1000c3d4:	4798      	blx	r3
1000c3d6:	4b27      	ldr	r3, [pc, #156]	; (1000c474 <ble_connected_state_handler+0x224>)
1000c3d8:	7819      	ldrb	r1, [r3, #0]
1000c3da:	b2c9      	uxtb	r1, r1
1000c3dc:	4826      	ldr	r0, [pc, #152]	; (1000c478 <ble_connected_state_handler+0x228>)
1000c3de:	4b1a      	ldr	r3, [pc, #104]	; (1000c448 <ble_connected_state_handler+0x1f8>)
1000c3e0:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000c3e2:	8928      	ldrh	r0, [r5, #8]
1000c3e4:	2113      	movs	r1, #19
1000c3e6:	4b25      	ldr	r3, [pc, #148]	; (1000c47c <ble_connected_state_handler+0x22c>)
1000c3e8:	4798      	blx	r3
1000c3ea:	e020      	b.n	1000c42e <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000c3ec:	8928      	ldrh	r0, [r5, #8]
1000c3ee:	4b24      	ldr	r3, [pc, #144]	; (1000c480 <ble_connected_state_handler+0x230>)
1000c3f0:	4798      	blx	r3
1000c3f2:	e01c      	b.n	1000c42e <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000c3f4:	4811      	ldr	r0, [pc, #68]	; (1000c43c <ble_connected_state_handler+0x1ec>)
1000c3f6:	4b12      	ldr	r3, [pc, #72]	; (1000c440 <ble_connected_state_handler+0x1f0>)
1000c3f8:	4798      	blx	r3
1000c3fa:	7aa9      	ldrb	r1, [r5, #10]
1000c3fc:	4821      	ldr	r0, [pc, #132]	; (1000c484 <ble_connected_state_handler+0x234>)
1000c3fe:	4b12      	ldr	r3, [pc, #72]	; (1000c448 <ble_connected_state_handler+0x1f8>)
1000c400:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000c402:	2600      	movs	r6, #0
1000c404:	e013      	b.n	1000c42e <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000c406:	4b1b      	ldr	r3, [pc, #108]	; (1000c474 <ble_connected_state_handler+0x224>)
1000c408:	781b      	ldrb	r3, [r3, #0]
1000c40a:	b2db      	uxtb	r3, r3
1000c40c:	2b04      	cmp	r3, #4
1000c40e:	d8df      	bhi.n	1000c3d0 <ble_connected_state_handler+0x180>
1000c410:	4b17      	ldr	r3, [pc, #92]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c412:	4699      	mov	r9, r3
1000c414:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c416:	4b11      	ldr	r3, [pc, #68]	; (1000c45c <ble_connected_state_handler+0x20c>)
1000c418:	469b      	mov	fp, r3
1000c41a:	e773      	b.n	1000c304 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c41c:	235e      	movs	r3, #94	; 0x5e
1000c41e:	4a14      	ldr	r2, [pc, #80]	; (1000c470 <ble_connected_state_handler+0x220>)
1000c420:	5cd3      	ldrb	r3, [r2, r3]
1000c422:	2b00      	cmp	r3, #0
1000c424:	d08c      	beq.n	1000c340 <ble_connected_state_handler+0xf0>
1000c426:	4a18      	ldr	r2, [pc, #96]	; (1000c488 <ble_connected_state_handler+0x238>)
1000c428:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c42a:	2701      	movs	r7, #1
1000c42c:	e783      	b.n	1000c336 <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000c42e:	0030      	movs	r0, r6
1000c430:	b01a      	add	sp, #104	; 0x68
1000c432:	bc1c      	pop	{r2, r3, r4}
1000c434:	4690      	mov	r8, r2
1000c436:	4699      	mov	r9, r3
1000c438:	46a3      	mov	fp, r4
1000c43a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c43c:	10012d7c 	.word	0x10012d7c
1000c440:	10011e31 	.word	0x10011e31
1000c444:	10013a84 	.word	0x10013a84
1000c448:	10011d11 	.word	0x10011d11
1000c44c:	10013ac8 	.word	0x10013ac8
1000c450:	10015f00 	.word	0x10015f00
1000c454:	10011bb7 	.word	0x10011bb7
1000c458:	10014758 	.word	0x10014758
1000c45c:	10011b99 	.word	0x10011b99
1000c460:	10011bc9 	.word	0x10011bc9
1000c464:	10015c9a 	.word	0x10015c9a
1000c468:	1000e3a1 	.word	0x1000e3a1
1000c46c:	10013ae0 	.word	0x10013ae0
1000c470:	10015c54 	.word	0x10015c54
1000c474:	10015ec0 	.word	0x10015ec0
1000c478:	10013b04 	.word	0x10013b04
1000c47c:	1000e375 	.word	0x1000e375
1000c480:	1000c21d 	.word	0x1000c21d
1000c484:	10013b40 	.word	0x10013b40
1000c488:	10015d2e 	.word	0x10015d2e

1000c48c <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000c48c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c48e:	4647      	mov	r7, r8
1000c490:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c492:	7803      	ldrb	r3, [r0, #0]
1000c494:	2b00      	cmp	r3, #0
1000c496:	d141      	bne.n	1000c51c <ble_resolv_rand_addr_handler+0x90>
1000c498:	4d2f      	ldr	r5, [pc, #188]	; (1000c558 <ble_resolv_rand_addr_handler+0xcc>)
1000c49a:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000c49c:	1c46      	adds	r6, r0, #1
1000c49e:	4f2f      	ldr	r7, [pc, #188]	; (1000c55c <ble_resolv_rand_addr_handler+0xd0>)
1000c4a0:	2210      	movs	r2, #16
1000c4a2:	0029      	movs	r1, r5
1000c4a4:	0030      	movs	r0, r6
1000c4a6:	47b8      	blx	r7
1000c4a8:	2800      	cmp	r0, #0
1000c4aa:	d03f      	beq.n	1000c52c <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c4ac:	3401      	adds	r4, #1
1000c4ae:	b2e4      	uxtb	r4, r4
1000c4b0:	357c      	adds	r5, #124	; 0x7c
1000c4b2:	2c05      	cmp	r4, #5
1000c4b4:	d1f4      	bne.n	1000c4a0 <ble_resolv_rand_addr_handler+0x14>
1000c4b6:	e031      	b.n	1000c51c <ble_resolv_rand_addr_handler+0x90>
1000c4b8:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c4ba:	001c      	movs	r4, r3
1000c4bc:	7811      	ldrb	r1, [r2, #0]
1000c4be:	2900      	cmp	r1, #0
1000c4c0:	d122      	bne.n	1000c508 <ble_resolv_rand_addr_handler+0x7c>
1000c4c2:	e001      	b.n	1000c4c8 <ble_resolv_rand_addr_handler+0x3c>
1000c4c4:	2400      	movs	r4, #0
1000c4c6:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c4c8:	4b25      	ldr	r3, [pc, #148]	; (1000c560 <ble_resolv_rand_addr_handler+0xd4>)
1000c4ca:	4698      	mov	r8, r3
1000c4cc:	0166      	lsls	r6, r4, #5
1000c4ce:	1b37      	subs	r7, r6, r4
1000c4d0:	00bf      	lsls	r7, r7, #2
1000c4d2:	4447      	add	r7, r8
1000c4d4:	2212      	movs	r2, #18
1000c4d6:	4923      	ldr	r1, [pc, #140]	; (1000c564 <ble_resolv_rand_addr_handler+0xd8>)
1000c4d8:	0038      	movs	r0, r7
1000c4da:	4b23      	ldr	r3, [pc, #140]	; (1000c568 <ble_resolv_rand_addr_handler+0xdc>)
1000c4dc:	4798      	blx	r3
				ble_device_count++;
1000c4de:	4a23      	ldr	r2, [pc, #140]	; (1000c56c <ble_resolv_rand_addr_handler+0xe0>)
1000c4e0:	7813      	ldrb	r3, [r2, #0]
1000c4e2:	3301      	adds	r3, #1
1000c4e4:	b2db      	uxtb	r3, r3
1000c4e6:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c4e8:	375e      	adds	r7, #94	; 0x5e
1000c4ea:	2302      	movs	r3, #2
1000c4ec:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c4ee:	1b34      	subs	r4, r6, r4
1000c4f0:	00a4      	lsls	r4, r4, #2
1000c4f2:	4444      	add	r4, r8
1000c4f4:	3308      	adds	r3, #8
1000c4f6:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c4f8:	016b      	lsls	r3, r5, #5
1000c4fa:	1b5d      	subs	r5, r3, r5
1000c4fc:	00ad      	lsls	r5, r5, #2
1000c4fe:	4445      	add	r5, r8
1000c500:	7cab      	ldrb	r3, [r5, #18]
1000c502:	2b0a      	cmp	r3, #10
1000c504:	d123      	bne.n	1000c54e <ble_resolv_rand_addr_handler+0xc2>
1000c506:	e004      	b.n	1000c512 <ble_resolv_rand_addr_handler+0x86>
1000c508:	3301      	adds	r3, #1
1000c50a:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c50c:	2b05      	cmp	r3, #5
1000c50e:	d1d3      	bne.n	1000c4b8 <ble_resolv_rand_addr_handler+0x2c>
1000c510:	e01d      	b.n	1000c54e <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c512:	4b14      	ldr	r3, [pc, #80]	; (1000c564 <ble_resolv_rand_addr_handler+0xd8>)
1000c514:	8918      	ldrh	r0, [r3, #8]
1000c516:	4b16      	ldr	r3, [pc, #88]	; (1000c570 <ble_resolv_rand_addr_handler+0xe4>)
1000c518:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000c51a:	e018      	b.n	1000c54e <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c51c:	235e      	movs	r3, #94	; 0x5e
1000c51e:	4a10      	ldr	r2, [pc, #64]	; (1000c560 <ble_resolv_rand_addr_handler+0xd4>)
1000c520:	5cd3      	ldrb	r3, [r2, r3]
1000c522:	2b00      	cmp	r3, #0
1000c524:	d0ce      	beq.n	1000c4c4 <ble_resolv_rand_addr_handler+0x38>
1000c526:	4a13      	ldr	r2, [pc, #76]	; (1000c574 <ble_resolv_rand_addr_handler+0xe8>)
1000c528:	2301      	movs	r3, #1
1000c52a:	e7c5      	b.n	1000c4b8 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c52c:	480c      	ldr	r0, [pc, #48]	; (1000c560 <ble_resolv_rand_addr_handler+0xd4>)
1000c52e:	0163      	lsls	r3, r4, #5
1000c530:	1b1a      	subs	r2, r3, r4
1000c532:	0092      	lsls	r2, r2, #2
1000c534:	1882      	adds	r2, r0, r2
1000c536:	0011      	movs	r1, r2
1000c538:	315e      	adds	r1, #94	; 0x5e
1000c53a:	2502      	movs	r5, #2
1000c53c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c53e:	210a      	movs	r1, #10
1000c540:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c542:	0010      	movs	r0, r2
1000c544:	2212      	movs	r2, #18
1000c546:	4907      	ldr	r1, [pc, #28]	; (1000c564 <ble_resolv_rand_addr_handler+0xd8>)
1000c548:	4b07      	ldr	r3, [pc, #28]	; (1000c568 <ble_resolv_rand_addr_handler+0xdc>)
1000c54a:	4798      	blx	r3
1000c54c:	e7e1      	b.n	1000c512 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c54e:	2000      	movs	r0, #0
1000c550:	bc04      	pop	{r2}
1000c552:	4690      	mov	r8, r2
1000c554:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c556:	46c0      	nop			; (mov r8, r8)
1000c558:	10015c9a 	.word	0x10015c9a
1000c55c:	10011b99 	.word	0x10011b99
1000c560:	10015c54 	.word	0x10015c54
1000c564:	10015f00 	.word	0x10015f00
1000c568:	10011bb7 	.word	0x10011bb7
1000c56c:	10015ec0 	.word	0x10015ec0
1000c570:	1000c21d 	.word	0x1000c21d
1000c574:	10015d2e 	.word	0x10015d2e

1000c578 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000c578:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c57a:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000c57c:	283b      	cmp	r0, #59	; 0x3b
1000c57e:	d872      	bhi.n	1000c666 <ble_event_manager+0xee>
1000c580:	0083      	lsls	r3, r0, #2
1000c582:	4a3c      	ldr	r2, [pc, #240]	; (1000c674 <ble_event_manager+0xfc>)
1000c584:	58d3      	ldr	r3, [r2, r3]
1000c586:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c588:	0084      	lsls	r4, r0, #2
1000c58a:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000c58c:	4f3a      	ldr	r7, [pc, #232]	; (1000c678 <ble_event_manager+0x100>)
1000c58e:	59bb      	ldr	r3, [r7, r6]
1000c590:	2b00      	cmp	r3, #0
1000c592:	d004      	beq.n	1000c59e <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c594:	591b      	ldr	r3, [r3, r4]
1000c596:	2b00      	cmp	r3, #0
1000c598:	d001      	beq.n	1000c59e <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000c59a:	0028      	movs	r0, r5
1000c59c:	4798      	blx	r3
1000c59e:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000c5a0:	2e14      	cmp	r6, #20
1000c5a2:	d1f4      	bne.n	1000c58e <ble_event_manager+0x16>
1000c5a4:	e065      	b.n	1000c672 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c5a6:	3813      	subs	r0, #19
1000c5a8:	b2c4      	uxtb	r4, r0
1000c5aa:	00a4      	lsls	r4, r4, #2
1000c5ac:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000c5ae:	4f33      	ldr	r7, [pc, #204]	; (1000c67c <ble_event_manager+0x104>)
1000c5b0:	59bb      	ldr	r3, [r7, r6]
1000c5b2:	2b00      	cmp	r3, #0
1000c5b4:	d004      	beq.n	1000c5c0 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c5b6:	591b      	ldr	r3, [r3, r4]
1000c5b8:	2b00      	cmp	r3, #0
1000c5ba:	d001      	beq.n	1000c5c0 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000c5bc:	0028      	movs	r0, r5
1000c5be:	4798      	blx	r3
1000c5c0:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000c5c2:	2e14      	cmp	r6, #20
1000c5c4:	d1f4      	bne.n	1000c5b0 <ble_event_manager+0x38>
1000c5c6:	e054      	b.n	1000c672 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c5c8:	381d      	subs	r0, #29
1000c5ca:	b2c4      	uxtb	r4, r0
1000c5cc:	00a4      	lsls	r4, r4, #2
1000c5ce:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000c5d0:	4f2b      	ldr	r7, [pc, #172]	; (1000c680 <ble_event_manager+0x108>)
1000c5d2:	59bb      	ldr	r3, [r7, r6]
1000c5d4:	2b00      	cmp	r3, #0
1000c5d6:	d004      	beq.n	1000c5e2 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c5d8:	591b      	ldr	r3, [r3, r4]
1000c5da:	2b00      	cmp	r3, #0
1000c5dc:	d001      	beq.n	1000c5e2 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000c5de:	0028      	movs	r0, r5
1000c5e0:	4798      	blx	r3
1000c5e2:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000c5e4:	2e14      	cmp	r6, #20
1000c5e6:	d1f4      	bne.n	1000c5d2 <ble_event_manager+0x5a>
1000c5e8:	e043      	b.n	1000c672 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000c5ea:	3827      	subs	r0, #39	; 0x27
1000c5ec:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000c5ee:	4b25      	ldr	r3, [pc, #148]	; (1000c684 <ble_event_manager+0x10c>)
1000c5f0:	681b      	ldr	r3, [r3, #0]
1000c5f2:	2b00      	cmp	r3, #0
1000c5f4:	d03d      	beq.n	1000c672 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c5f6:	0080      	lsls	r0, r0, #2
1000c5f8:	58c3      	ldr	r3, [r0, r3]
1000c5fa:	2b00      	cmp	r3, #0
1000c5fc:	d039      	beq.n	1000c672 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c5fe:	0008      	movs	r0, r1
1000c600:	4798      	blx	r3
1000c602:	e036      	b.n	1000c672 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000c604:	382d      	subs	r0, #45	; 0x2d
1000c606:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000c608:	4b1f      	ldr	r3, [pc, #124]	; (1000c688 <ble_event_manager+0x110>)
1000c60a:	681b      	ldr	r3, [r3, #0]
1000c60c:	2b00      	cmp	r3, #0
1000c60e:	d030      	beq.n	1000c672 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c610:	0080      	lsls	r0, r0, #2
1000c612:	58c3      	ldr	r3, [r0, r3]
1000c614:	2b00      	cmp	r3, #0
1000c616:	d02c      	beq.n	1000c672 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c618:	0008      	movs	r0, r1
1000c61a:	4798      	blx	r3
1000c61c:	e029      	b.n	1000c672 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c61e:	3836      	subs	r0, #54	; 0x36
1000c620:	b2c4      	uxtb	r4, r0
1000c622:	00a4      	lsls	r4, r4, #2
1000c624:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000c626:	4f19      	ldr	r7, [pc, #100]	; (1000c68c <ble_event_manager+0x114>)
1000c628:	59bb      	ldr	r3, [r7, r6]
1000c62a:	2b00      	cmp	r3, #0
1000c62c:	d004      	beq.n	1000c638 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c62e:	591b      	ldr	r3, [r3, r4]
1000c630:	2b00      	cmp	r3, #0
1000c632:	d001      	beq.n	1000c638 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000c634:	0028      	movs	r0, r5
1000c636:	4798      	blx	r3
1000c638:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000c63a:	2e14      	cmp	r6, #20
1000c63c:	d1f4      	bne.n	1000c628 <ble_event_manager+0xb0>
1000c63e:	e018      	b.n	1000c672 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000c640:	3838      	subs	r0, #56	; 0x38
1000c642:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000c644:	4b12      	ldr	r3, [pc, #72]	; (1000c690 <ble_event_manager+0x118>)
1000c646:	681b      	ldr	r3, [r3, #0]
1000c648:	2b00      	cmp	r3, #0
1000c64a:	d012      	beq.n	1000c672 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000c64c:	0080      	lsls	r0, r0, #2
1000c64e:	58c3      	ldr	r3, [r0, r3]
1000c650:	2b00      	cmp	r3, #0
1000c652:	d00e      	beq.n	1000c672 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000c654:	0008      	movs	r0, r1
1000c656:	4798      	blx	r3
1000c658:	e00b      	b.n	1000c672 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000c65a:	4b0e      	ldr	r3, [pc, #56]	; (1000c694 <ble_event_manager+0x11c>)
1000c65c:	681b      	ldr	r3, [r3, #0]
1000c65e:	2b00      	cmp	r3, #0
1000c660:	d007      	beq.n	1000c672 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000c662:	4798      	blx	r3
1000c664:	e005      	b.n	1000c672 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000c666:	4d0c      	ldr	r5, [pc, #48]	; (1000c698 <ble_event_manager+0x120>)
1000c668:	0028      	movs	r0, r5
1000c66a:	4c0c      	ldr	r4, [pc, #48]	; (1000c69c <ble_event_manager+0x124>)
1000c66c:	47a0      	blx	r4
1000c66e:	0028      	movs	r0, r5
1000c670:	47a0      	blx	r4
	}
	break;		
	}
}
1000c672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c674:	10013430 	.word	0x10013430
1000c678:	10015ed8 	.word	0x10015ed8
1000c67c:	10015eec 	.word	0x10015eec
1000c680:	10015c40 	.word	0x10015c40
1000c684:	10015f34 	.word	0x10015f34
1000c688:	10015c3c 	.word	0x10015c3c
1000c68c:	10015ec4 	.word	0x10015ec4
1000c690:	10016478 	.word	0x10016478
1000c694:	10014750 	.word	0x10014750
1000c698:	10012d7c 	.word	0x10012d7c
1000c69c:	10011e31 	.word	0x10011e31

1000c6a0 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000c6a0:	b570      	push	{r4, r5, r6, lr}
1000c6a2:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c6a4:	4b0d      	ldr	r3, [pc, #52]	; (1000c6dc <ble_event_task+0x3c>)
1000c6a6:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c6a8:	2b01      	cmp	r3, #1
1000c6aa:	d101      	bne.n	1000c6b0 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000c6ac:	4b0c      	ldr	r3, [pc, #48]	; (1000c6e0 <ble_event_task+0x40>)
1000c6ae:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000c6b0:	0022      	movs	r2, r4
1000c6b2:	490c      	ldr	r1, [pc, #48]	; (1000c6e4 <ble_event_task+0x44>)
1000c6b4:	480c      	ldr	r0, [pc, #48]	; (1000c6e8 <ble_event_task+0x48>)
1000c6b6:	4b0d      	ldr	r3, [pc, #52]	; (1000c6ec <ble_event_task+0x4c>)
1000c6b8:	4798      	blx	r3
1000c6ba:	0004      	movs	r4, r0
1000c6bc:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000c6be:	4b07      	ldr	r3, [pc, #28]	; (1000c6dc <ble_event_task+0x3c>)
1000c6c0:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000c6c2:	2b01      	cmp	r3, #1
1000c6c4:	d101      	bne.n	1000c6ca <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000c6c6:	4b0a      	ldr	r3, [pc, #40]	; (1000c6f0 <ble_event_task+0x50>)
1000c6c8:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000c6ca:	2d00      	cmp	r5, #0
1000c6cc:	d104      	bne.n	1000c6d8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000c6ce:	4b06      	ldr	r3, [pc, #24]	; (1000c6e8 <ble_event_task+0x48>)
1000c6d0:	7818      	ldrb	r0, [r3, #0]
1000c6d2:	4904      	ldr	r1, [pc, #16]	; (1000c6e4 <ble_event_task+0x44>)
1000c6d4:	4b07      	ldr	r3, [pc, #28]	; (1000c6f4 <ble_event_task+0x54>)
1000c6d6:	4798      	blx	r3
    }
    
    return status;
}
1000c6d8:	0020      	movs	r0, r4
1000c6da:	bd70      	pop	{r4, r5, r6, pc}
1000c6dc:	1001475f 	.word	0x1001475f
1000c6e0:	1000d095 	.word	0x1000d095
1000c6e4:	1001626c 	.word	0x1001626c
1000c6e8:	10015f30 	.word	0x10015f30
1000c6ec:	1000d729 	.word	0x1000d729
1000c6f0:	1000d06d 	.word	0x1000d06d
1000c6f4:	1000c579 	.word	0x1000c579

1000c6f8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000c6f8:	b510      	push	{r4, lr}
1000c6fa:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000c6fc:	ac08      	add	r4, sp, #32
1000c6fe:	2203      	movs	r2, #3
1000c700:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000c702:	2302      	movs	r3, #2
1000c704:	70a3      	strb	r3, [r4, #2]
1000c706:	3316      	adds	r3, #22
1000c708:	70e3      	strb	r3, [r4, #3]
1000c70a:	7122      	strb	r2, [r4, #4]
1000c70c:	7163      	strb	r3, [r4, #5]
1000c70e:	3201      	adds	r2, #1
1000c710:	71a2      	strb	r2, [r4, #6]
1000c712:	71e3      	strb	r3, [r4, #7]
1000c714:	320b      	adds	r2, #11
1000c716:	7222      	strb	r2, [r4, #8]
1000c718:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000c71a:	3b0f      	subs	r3, #15
1000c71c:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000c71e:	3a05      	subs	r2, #5
1000c720:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000c722:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000c724:	aa0b      	add	r2, sp, #44	; 0x2c
1000c726:	4b10      	ldr	r3, [pc, #64]	; (1000c768 <ble_advertisement_data_set+0x70>)
1000c728:	cb03      	ldmia	r3!, {r0, r1}
1000c72a:	c203      	stmia	r2!, {r0, r1}
1000c72c:	781b      	ldrb	r3, [r3, #0]
1000c72e:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000c730:	2307      	movs	r3, #7
1000c732:	466a      	mov	r2, sp
1000c734:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000c736:	33f8      	adds	r3, #248	; 0xf8
1000c738:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000c73a:	2206      	movs	r2, #6
1000c73c:	490b      	ldr	r1, [pc, #44]	; (1000c76c <ble_advertisement_data_set+0x74>)
1000c73e:	466b      	mov	r3, sp
1000c740:	1c98      	adds	r0, r3, #2
1000c742:	4b0b      	ldr	r3, [pc, #44]	; (1000c770 <ble_advertisement_data_set+0x78>)
1000c744:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000c746:	2308      	movs	r3, #8
1000c748:	466a      	mov	r2, sp
1000c74a:	2115      	movs	r1, #21
1000c74c:	0020      	movs	r0, r4
1000c74e:	4c09      	ldr	r4, [pc, #36]	; (1000c774 <ble_advertisement_data_set+0x7c>)
1000c750:	47a0      	blx	r4
1000c752:	2800      	cmp	r0, #0
1000c754:	d005      	beq.n	1000c762 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000c756:	4808      	ldr	r0, [pc, #32]	; (1000c778 <ble_advertisement_data_set+0x80>)
1000c758:	4b08      	ldr	r3, [pc, #32]	; (1000c77c <ble_advertisement_data_set+0x84>)
1000c75a:	4798      	blx	r3
1000c75c:	4808      	ldr	r0, [pc, #32]	; (1000c780 <ble_advertisement_data_set+0x88>)
1000c75e:	4b09      	ldr	r3, [pc, #36]	; (1000c784 <ble_advertisement_data_set+0x8c>)
1000c760:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000c762:	2000      	movs	r0, #0
1000c764:	b010      	add	sp, #64	; 0x40
1000c766:	bd10      	pop	{r4, pc}
1000c768:	10013988 	.word	0x10013988
1000c76c:	10013b68 	.word	0x10013b68
1000c770:	10011bb7 	.word	0x10011bb7
1000c774:	1000e189 	.word	0x1000e189
1000c778:	10012d7c 	.word	0x10012d7c
1000c77c:	10011e31 	.word	0x10011e31
1000c780:	10013b70 	.word	0x10013b70
1000c784:	10011d11 	.word	0x10011d11

1000c788 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000c788:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000c78a:	4b0e      	ldr	r3, [pc, #56]	; (1000c7c4 <uart_read_complete_callback+0x3c>)
1000c78c:	781b      	ldrb	r3, [r3, #0]
1000c78e:	2b01      	cmp	r3, #1
1000c790:	d10b      	bne.n	1000c7aa <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000c792:	2202      	movs	r2, #2
1000c794:	4b0b      	ldr	r3, [pc, #44]	; (1000c7c4 <uart_read_complete_callback+0x3c>)
1000c796:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000c798:	4b0b      	ldr	r3, [pc, #44]	; (1000c7c8 <uart_read_complete_callback+0x40>)
1000c79a:	681b      	ldr	r3, [r3, #0]
1000c79c:	2b00      	cmp	r3, #0
1000c79e:	d110      	bne.n	1000c7c2 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000c7a0:	2102      	movs	r1, #2
1000c7a2:	480a      	ldr	r0, [pc, #40]	; (1000c7cc <uart_read_complete_callback+0x44>)
1000c7a4:	4b0a      	ldr	r3, [pc, #40]	; (1000c7d0 <uart_read_complete_callback+0x48>)
1000c7a6:	4798      	blx	r3
1000c7a8:	e00b      	b.n	1000c7c2 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000c7aa:	4b07      	ldr	r3, [pc, #28]	; (1000c7c8 <uart_read_complete_callback+0x40>)
1000c7ac:	681b      	ldr	r3, [r3, #0]
1000c7ae:	2b00      	cmp	r3, #0
1000c7b0:	d007      	beq.n	1000c7c2 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000c7b2:	4c08      	ldr	r4, [pc, #32]	; (1000c7d4 <uart_read_complete_callback+0x4c>)
1000c7b4:	7820      	ldrb	r0, [r4, #0]
1000c7b6:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c7b8:	2201      	movs	r2, #1
1000c7ba:	0021      	movs	r1, r4
1000c7bc:	4803      	ldr	r0, [pc, #12]	; (1000c7cc <uart_read_complete_callback+0x44>)
1000c7be:	4b06      	ldr	r3, [pc, #24]	; (1000c7d8 <uart_read_complete_callback+0x50>)
1000c7c0:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000c7c2:	bd10      	pop	{r4, pc}
1000c7c4:	10015764 	.word	0x10015764
1000c7c8:	1001576c 	.word	0x1001576c
1000c7cc:	1001647c 	.word	0x1001647c
1000c7d0:	1000b511 	.word	0x1000b511
1000c7d4:	10015768 	.word	0x10015768
1000c7d8:	1000b4b5 	.word	0x1000b4b5

1000c7dc <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000c7dc:	b570      	push	{r4, r5, r6, lr}
1000c7de:	0006      	movs	r6, r0
1000c7e0:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000c7e2:	4c03      	ldr	r4, [pc, #12]	; (1000c7f0 <usart_serial_getchar+0x14>)
1000c7e4:	0029      	movs	r1, r5
1000c7e6:	0030      	movs	r0, r6
1000c7e8:	47a0      	blx	r4
1000c7ea:	2800      	cmp	r0, #0
1000c7ec:	d1fa      	bne.n	1000c7e4 <usart_serial_getchar+0x8>
}
1000c7ee:	bd70      	pop	{r4, r5, r6, pc}
1000c7f0:	1000b4a1 	.word	0x1000b4a1

1000c7f4 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000c7f4:	b570      	push	{r4, r5, r6, lr}
1000c7f6:	0006      	movs	r6, r0
1000c7f8:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000c7fa:	4c03      	ldr	r4, [pc, #12]	; (1000c808 <usart_serial_putchar+0x14>)
1000c7fc:	0029      	movs	r1, r5
1000c7fe:	0030      	movs	r0, r6
1000c800:	47a0      	blx	r4
1000c802:	2800      	cmp	r0, #0
1000c804:	d1fa      	bne.n	1000c7fc <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000c806:	bd70      	pop	{r4, r5, r6, pc}
1000c808:	1000b491 	.word	0x1000b491

1000c80c <serial_console_init>:

void serial_console_init(void)
{
1000c80c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000c80e:	2100      	movs	r1, #0
1000c810:	2000      	movs	r0, #0
1000c812:	4b19      	ldr	r3, [pc, #100]	; (1000c878 <serial_console_init+0x6c>)
1000c814:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000c816:	4c19      	ldr	r4, [pc, #100]	; (1000c87c <serial_console_init+0x70>)
1000c818:	0020      	movs	r0, r4
1000c81a:	4b19      	ldr	r3, [pc, #100]	; (1000c880 <serial_console_init+0x74>)
1000c81c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000c81e:	23e1      	movs	r3, #225	; 0xe1
1000c820:	025b      	lsls	r3, r3, #9
1000c822:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000c824:	2302      	movs	r3, #2
1000c826:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000c828:	2203      	movs	r2, #3
1000c82a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000c82c:	3201      	adds	r2, #1
1000c82e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000c830:	3201      	adds	r2, #1
1000c832:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000c834:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000c836:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000c838:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000c83a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000c83c:	4d11      	ldr	r5, [pc, #68]	; (1000c884 <serial_console_init+0x78>)
1000c83e:	4b12      	ldr	r3, [pc, #72]	; (1000c888 <serial_console_init+0x7c>)
1000c840:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000c842:	4a12      	ldr	r2, [pc, #72]	; (1000c88c <serial_console_init+0x80>)
1000c844:	4b12      	ldr	r3, [pc, #72]	; (1000c890 <serial_console_init+0x84>)
1000c846:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000c848:	4a12      	ldr	r2, [pc, #72]	; (1000c894 <serial_console_init+0x88>)
1000c84a:	4b13      	ldr	r3, [pc, #76]	; (1000c898 <serial_console_init+0x8c>)
1000c84c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000c84e:	0022      	movs	r2, r4
1000c850:	4912      	ldr	r1, [pc, #72]	; (1000c89c <serial_console_init+0x90>)
1000c852:	0028      	movs	r0, r5
1000c854:	4b12      	ldr	r3, [pc, #72]	; (1000c8a0 <serial_console_init+0x94>)
1000c856:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000c858:	4e12      	ldr	r6, [pc, #72]	; (1000c8a4 <serial_console_init+0x98>)
1000c85a:	6833      	ldr	r3, [r6, #0]
1000c85c:	6898      	ldr	r0, [r3, #8]
1000c85e:	2100      	movs	r1, #0
1000c860:	4c11      	ldr	r4, [pc, #68]	; (1000c8a8 <serial_console_init+0x9c>)
1000c862:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000c864:	6833      	ldr	r3, [r6, #0]
1000c866:	6858      	ldr	r0, [r3, #4]
1000c868:	2100      	movs	r1, #0
1000c86a:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000c86c:	2202      	movs	r2, #2
1000c86e:	490f      	ldr	r1, [pc, #60]	; (1000c8ac <serial_console_init+0xa0>)
1000c870:	0028      	movs	r0, r5
1000c872:	4b0f      	ldr	r3, [pc, #60]	; (1000c8b0 <serial_console_init+0xa4>)
1000c874:	4798      	blx	r3
}
1000c876:	bd70      	pop	{r4, r5, r6, pc}
1000c878:	1000a4b1 	.word	0x1000a4b1
1000c87c:	100164a0 	.word	0x100164a0
1000c880:	1000b2a9 	.word	0x1000b2a9
1000c884:	1001647c 	.word	0x1001647c
1000c888:	10015c38 	.word	0x10015c38
1000c88c:	1000c7f5 	.word	0x1000c7f5
1000c890:	10015c34 	.word	0x10015c34
1000c894:	1000c7dd 	.word	0x1000c7dd
1000c898:	10015c30 	.word	0x10015c30
1000c89c:	40004000 	.word	0x40004000
1000c8a0:	1000b2d5 	.word	0x1000b2d5
1000c8a4:	10013e40 	.word	0x10013e40
1000c8a8:	10011ee1 	.word	0x10011ee1
1000c8ac:	1000c789 	.word	0x1000c789
1000c8b0:	1000b4dd 	.word	0x1000b4dd

1000c8b4 <_time_start>:

void _time_start(unsigned int sec)
{
1000c8b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8b6:	b083      	sub	sp, #12
1000c8b8:	0005      	movs	r5, r0
	system_clock_get_value();
1000c8ba:	4c0d      	ldr	r4, [pc, #52]	; (1000c8f0 <_time_start+0x3c>)
1000c8bc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000c8be:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000c8c0:	4f0c      	ldr	r7, [pc, #48]	; (1000c8f4 <_time_start+0x40>)
1000c8c2:	47b8      	blx	r7
1000c8c4:	4e0c      	ldr	r6, [pc, #48]	; (1000c8f8 <_time_start+0x44>)
1000c8c6:	4a0d      	ldr	r2, [pc, #52]	; (1000c8fc <_time_start+0x48>)
1000c8c8:	4b0d      	ldr	r3, [pc, #52]	; (1000c900 <_time_start+0x4c>)
1000c8ca:	47b0      	blx	r6
1000c8cc:	9000      	str	r0, [sp, #0]
1000c8ce:	9101      	str	r1, [sp, #4]
1000c8d0:	20fa      	movs	r0, #250	; 0xfa
1000c8d2:	0080      	lsls	r0, r0, #2
1000c8d4:	4368      	muls	r0, r5
1000c8d6:	47b8      	blx	r7
1000c8d8:	0002      	movs	r2, r0
1000c8da:	000b      	movs	r3, r1
1000c8dc:	9800      	ldr	r0, [sp, #0]
1000c8de:	9901      	ldr	r1, [sp, #4]
1000c8e0:	47b0      	blx	r6
1000c8e2:	4b08      	ldr	r3, [pc, #32]	; (1000c904 <_time_start+0x50>)
1000c8e4:	4798      	blx	r3
1000c8e6:	4b08      	ldr	r3, [pc, #32]	; (1000c908 <_time_start+0x54>)
1000c8e8:	6018      	str	r0, [r3, #0]
}
1000c8ea:	b003      	add	sp, #12
1000c8ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c8ee:	46c0      	nop			; (mov r8, r8)
1000c8f0:	1000a535 	.word	0x1000a535
1000c8f4:	10011a8d 	.word	0x10011a8d
1000c8f8:	10010e85 	.word	0x10010e85
1000c8fc:	19feaec7 	.word	0x19feaec7
1000c900:	3f09d8ef 	.word	0x3f09d8ef
1000c904:	10010c2d 	.word	0x10010c2d
1000c908:	10015760 	.word	0x10015760

1000c90c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000c90c:	4b02      	ldr	r3, [pc, #8]	; (1000c918 <_time_done+0xc>)
1000c90e:	681a      	ldr	r2, [r3, #0]
1000c910:	1e50      	subs	r0, r2, #1
1000c912:	6018      	str	r0, [r3, #0]
}
1000c914:	4770      	bx	lr
1000c916:	46c0      	nop			; (mov r8, r8)
1000c918:	10015760 	.word	0x10015760

1000c91c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000c91c:	b570      	push	{r4, r5, r6, lr}
1000c91e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000c920:	2201      	movs	r2, #1
1000c922:	4b11      	ldr	r3, [pc, #68]	; (1000c968 <getchar_b11_timeout+0x4c>)
1000c924:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000c926:	4b11      	ldr	r3, [pc, #68]	; (1000c96c <getchar_b11_timeout+0x50>)
1000c928:	681b      	ldr	r3, [r3, #0]
1000c92a:	2b00      	cmp	r3, #0
1000c92c:	d103      	bne.n	1000c936 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000c92e:	2102      	movs	r1, #2
1000c930:	480f      	ldr	r0, [pc, #60]	; (1000c970 <getchar_b11_timeout+0x54>)
1000c932:	4b10      	ldr	r3, [pc, #64]	; (1000c974 <getchar_b11_timeout+0x58>)
1000c934:	4798      	blx	r3

	_time_start(sec);
1000c936:	0020      	movs	r0, r4
1000c938:	4b0f      	ldr	r3, [pc, #60]	; (1000c978 <getchar_b11_timeout+0x5c>)
1000c93a:	4798      	blx	r3
	
	string_input[0] = 0;
1000c93c:	490f      	ldr	r1, [pc, #60]	; (1000c97c <getchar_b11_timeout+0x60>)
1000c93e:	2300      	movs	r3, #0
1000c940:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000c942:	2201      	movs	r2, #1
1000c944:	480a      	ldr	r0, [pc, #40]	; (1000c970 <getchar_b11_timeout+0x54>)
1000c946:	4b0e      	ldr	r3, [pc, #56]	; (1000c980 <getchar_b11_timeout+0x64>)
1000c948:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000c94a:	4c07      	ldr	r4, [pc, #28]	; (1000c968 <getchar_b11_timeout+0x4c>)
1000c94c:	4d0d      	ldr	r5, [pc, #52]	; (1000c984 <getchar_b11_timeout+0x68>)
1000c94e:	7823      	ldrb	r3, [r4, #0]
1000c950:	2b02      	cmp	r3, #2
1000c952:	d002      	beq.n	1000c95a <getchar_b11_timeout+0x3e>
1000c954:	47a8      	blx	r5
1000c956:	2800      	cmp	r0, #0
1000c958:	d1f9      	bne.n	1000c94e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000c95a:	2200      	movs	r2, #0
1000c95c:	4b02      	ldr	r3, [pc, #8]	; (1000c968 <getchar_b11_timeout+0x4c>)
1000c95e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000c960:	4b06      	ldr	r3, [pc, #24]	; (1000c97c <getchar_b11_timeout+0x60>)
1000c962:	7818      	ldrb	r0, [r3, #0]
}
1000c964:	bd70      	pop	{r4, r5, r6, pc}
1000c966:	46c0      	nop			; (mov r8, r8)
1000c968:	10015764 	.word	0x10015764
1000c96c:	1001576c 	.word	0x1001576c
1000c970:	1001647c 	.word	0x1001647c
1000c974:	1000b4f1 	.word	0x1000b4f1
1000c978:	1000c8b5 	.word	0x1000c8b5
1000c97c:	10015768 	.word	0x10015768
1000c980:	1000b4b5 	.word	0x1000b4b5
1000c984:	1000c90d 	.word	0x1000c90d

1000c988 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000c988:	4b02      	ldr	r3, [pc, #8]	; (1000c994 <platform_event_free+0xc>)
1000c98a:	681a      	ldr	r2, [r3, #0]
1000c98c:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000c98e:	6018      	str	r0, [r3, #0]
}
1000c990:	4770      	bx	lr
1000c992:	46c0      	nop			; (mov r8, r8)
1000c994:	10015774 	.word	0x10015774

1000c998 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000c998:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000c99a:	4b0b      	ldr	r3, [pc, #44]	; (1000c9c8 <platform_event_post+0x30>)
1000c99c:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000c99e:	2c00      	cmp	r4, #0
1000c9a0:	d011      	beq.n	1000c9c6 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000c9a2:	6825      	ldr	r5, [r4, #0]
1000c9a4:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000c9a6:	2300      	movs	r3, #0
1000c9a8:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000c9aa:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000c9ac:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000c9ae:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000c9b0:	4b06      	ldr	r3, [pc, #24]	; (1000c9cc <platform_event_post+0x34>)
1000c9b2:	681a      	ldr	r2, [r3, #0]
1000c9b4:	2a00      	cmp	r2, #0
1000c9b6:	d102      	bne.n	1000c9be <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000c9b8:	601c      	str	r4, [r3, #0]
1000c9ba:	e004      	b.n	1000c9c6 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000c9bc:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000c9be:	6813      	ldr	r3, [r2, #0]
1000c9c0:	2b00      	cmp	r3, #0
1000c9c2:	d1fb      	bne.n	1000c9bc <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000c9c4:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000c9c6:	bd30      	pop	{r4, r5, pc}
1000c9c8:	10015774 	.word	0x10015774
1000c9cc:	10015770 	.word	0x10015770

1000c9d0 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000c9d0:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000c9d2:	2300      	movs	r3, #0
1000c9d4:	4a06      	ldr	r2, [pc, #24]	; (1000c9f0 <platform_event_init+0x20>)
1000c9d6:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000c9d8:	4a06      	ldr	r2, [pc, #24]	; (1000c9f4 <platform_event_init+0x24>)
1000c9da:	6013      	str	r3, [r2, #0]
1000c9dc:	4c06      	ldr	r4, [pc, #24]	; (1000c9f8 <platform_event_init+0x28>)
1000c9de:	0026      	movs	r6, r4
1000c9e0:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000c9e2:	4d06      	ldr	r5, [pc, #24]	; (1000c9fc <platform_event_init+0x2c>)
1000c9e4:	0020      	movs	r0, r4
1000c9e6:	47a8      	blx	r5
1000c9e8:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000c9ea:	42b4      	cmp	r4, r6
1000c9ec:	d1fa      	bne.n	1000c9e4 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000c9ee:	bd70      	pop	{r4, r5, r6, pc}
1000c9f0:	10015774 	.word	0x10015774
1000c9f4:	10015770 	.word	0x10015770
1000c9f8:	10015778 	.word	0x10015778
1000c9fc:	1000c989 	.word	0x1000c989

1000ca00 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000ca00:	b570      	push	{r4, r5, r6, lr}
1000ca02:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000ca04:	4b13      	ldr	r3, [pc, #76]	; (1000ca54 <at_ke_msg_send+0x54>)
1000ca06:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000ca08:	4b13      	ldr	r3, [pc, #76]	; (1000ca58 <at_ke_msg_send+0x58>)
1000ca0a:	681b      	ldr	r3, [r3, #0]
1000ca0c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000ca0e:	2c0c      	cmp	r4, #12
1000ca10:	d01f      	beq.n	1000ca52 <at_ke_msg_send+0x52>
1000ca12:	3c0c      	subs	r4, #12
1000ca14:	88e3      	ldrh	r3, [r4, #6]
1000ca16:	2b05      	cmp	r3, #5
1000ca18:	d01b      	beq.n	1000ca52 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000ca1a:	07eb      	lsls	r3, r5, #31
1000ca1c:	d414      	bmi.n	1000ca48 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ca1e:	4b0f      	ldr	r3, [pc, #60]	; (1000ca5c <at_ke_msg_send+0x5c>)
1000ca20:	681b      	ldr	r3, [r3, #0]
1000ca22:	2002      	movs	r0, #2
1000ca24:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000ca26:	4b0e      	ldr	r3, [pc, #56]	; (1000ca60 <at_ke_msg_send+0x60>)
1000ca28:	681b      	ldr	r3, [r3, #0]
1000ca2a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000ca2c:	4c0d      	ldr	r4, [pc, #52]	; (1000ca64 <at_ke_msg_send+0x64>)
1000ca2e:	2003      	movs	r0, #3
1000ca30:	6823      	ldr	r3, [r4, #0]
1000ca32:	4798      	blx	r3
1000ca34:	2800      	cmp	r0, #0
1000ca36:	d1fa      	bne.n	1000ca2e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000ca38:	4b0b      	ldr	r3, [pc, #44]	; (1000ca68 <at_ke_msg_send+0x68>)
1000ca3a:	681b      	ldr	r3, [r3, #0]
1000ca3c:	3002      	adds	r0, #2
1000ca3e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000ca40:	2201      	movs	r2, #1
1000ca42:	4b0a      	ldr	r3, [pc, #40]	; (1000ca6c <at_ke_msg_send+0x6c>)
1000ca44:	601a      	str	r2, [r3, #0]
1000ca46:	e004      	b.n	1000ca52 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000ca48:	4b09      	ldr	r3, [pc, #36]	; (1000ca70 <at_ke_msg_send+0x70>)
1000ca4a:	6818      	ldr	r0, [r3, #0]
1000ca4c:	4b09      	ldr	r3, [pc, #36]	; (1000ca74 <at_ke_msg_send+0x74>)
1000ca4e:	681b      	ldr	r3, [r3, #0]
1000ca50:	4798      	blx	r3
		}
	}
}
1000ca52:	bd70      	pop	{r4, r5, r6, pc}
1000ca54:	4000b1ec 	.word	0x4000b1ec
1000ca58:	10015820 	.word	0x10015820
1000ca5c:	10015818 	.word	0x10015818
1000ca60:	1001582c 	.word	0x1001582c
1000ca64:	10015800 	.word	0x10015800
1000ca68:	10015808 	.word	0x10015808
1000ca6c:	4000b020 	.word	0x4000b020
1000ca70:	1001580c 	.word	0x1001580c
1000ca74:	100157fc 	.word	0x100157fc

1000ca78 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000ca78:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000ca7a:	4b06      	ldr	r3, [pc, #24]	; (1000ca94 <samb11_plf_resume_callback+0x1c>)
1000ca7c:	4a06      	ldr	r2, [pc, #24]	; (1000ca98 <samb11_plf_resume_callback+0x20>)
1000ca7e:	6819      	ldr	r1, [r3, #0]
1000ca80:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000ca82:	685a      	ldr	r2, [r3, #4]
1000ca84:	4b05      	ldr	r3, [pc, #20]	; (1000ca9c <samb11_plf_resume_callback+0x24>)
1000ca86:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000ca88:	4b05      	ldr	r3, [pc, #20]	; (1000caa0 <samb11_plf_resume_callback+0x28>)
1000ca8a:	681b      	ldr	r3, [r3, #0]
1000ca8c:	2b00      	cmp	r3, #0
1000ca8e:	d000      	beq.n	1000ca92 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000ca90:	4798      	blx	r3
	}
}
1000ca92:	bd10      	pop	{r4, pc}
1000ca94:	100164c8 	.word	0x100164c8
1000ca98:	4000b00c 	.word	0x4000b00c
1000ca9c:	4000b010 	.word	0x4000b010
1000caa0:	100167a4 	.word	0x100167a4

1000caa4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000caa4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000caa6:	2232      	movs	r2, #50	; 0x32
1000caa8:	2100      	movs	r1, #0
1000caaa:	480d      	ldr	r0, [pc, #52]	; (1000cae0 <init_port_list+0x3c>)
1000caac:	4b0d      	ldr	r3, [pc, #52]	; (1000cae4 <init_port_list+0x40>)
1000caae:	4798      	blx	r3
1000cab0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cab2:	480b      	ldr	r0, [pc, #44]	; (1000cae0 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000cab4:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000cab6:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cab8:	004a      	lsls	r2, r1, #1
1000caba:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000cabc:	1882      	adds	r2, r0, r2
1000cabe:	7853      	ldrb	r3, [r2, #1]
1000cac0:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000cac2:	b2db      	uxtb	r3, r3
1000cac4:	43a3      	bics	r3, r4
1000cac6:	7053      	strb	r3, [r2, #1]
1000cac8:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000caca:	2919      	cmp	r1, #25
1000cacc:	d1f4      	bne.n	1000cab8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000cace:	4b04      	ldr	r3, [pc, #16]	; (1000cae0 <init_port_list+0x3c>)
1000cad0:	785a      	ldrb	r2, [r3, #1]
1000cad2:	3918      	subs	r1, #24
1000cad4:	438a      	bics	r2, r1
1000cad6:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000cad8:	78da      	ldrb	r2, [r3, #3]
1000cada:	438a      	bics	r2, r1
1000cadc:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000cade:	bd70      	pop	{r4, r5, r6, pc}
1000cae0:	100164e4 	.word	0x100164e4
1000cae4:	10011bc9 	.word	0x10011bc9

1000cae8 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000cae8:	4a06      	ldr	r2, [pc, #24]	; (1000cb04 <init_clock+0x1c>)
1000caea:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000caec:	4b06      	ldr	r3, [pc, #24]	; (1000cb08 <init_clock+0x20>)
1000caee:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000caf0:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000caf2:	4a06      	ldr	r2, [pc, #24]	; (1000cb0c <init_clock+0x24>)
1000caf4:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000caf6:	4906      	ldr	r1, [pc, #24]	; (1000cb10 <init_clock+0x28>)
1000caf8:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000cafa:	4b06      	ldr	r3, [pc, #24]	; (1000cb14 <init_clock+0x2c>)
1000cafc:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000cafe:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000cb00:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000cb02:	4770      	bx	lr
1000cb04:	4000b00c 	.word	0x4000b00c
1000cb08:	fffe0fd3 	.word	0xfffe0fd3
1000cb0c:	100164c8 	.word	0x100164c8
1000cb10:	4000b010 	.word	0x4000b010
1000cb14:	ffffe7c0 	.word	0xffffe7c0

1000cb18 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000cb18:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb1a:	4657      	mov	r7, sl
1000cb1c:	464e      	mov	r6, r9
1000cb1e:	4645      	mov	r5, r8
1000cb20:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000cb22:	4b4f      	ldr	r3, [pc, #316]	; (1000cc60 <platform_driver_init+0x148>)
1000cb24:	781b      	ldrb	r3, [r3, #0]
1000cb26:	2b00      	cmp	r3, #0
1000cb28:	d004      	beq.n	1000cb34 <platform_driver_init+0x1c>
1000cb2a:	4b4d      	ldr	r3, [pc, #308]	; (1000cc60 <platform_driver_init+0x148>)
1000cb2c:	781b      	ldrb	r3, [r3, #0]
1000cb2e:	2b01      	cmp	r3, #1
1000cb30:	d100      	bne.n	1000cb34 <platform_driver_init+0x1c>
1000cb32:	e08c      	b.n	1000cc4e <platform_driver_init+0x136>
		init_port_list();
1000cb34:	4b4b      	ldr	r3, [pc, #300]	; (1000cc64 <platform_driver_init+0x14c>)
1000cb36:	4798      	blx	r3
		init_clock();
1000cb38:	4b4b      	ldr	r3, [pc, #300]	; (1000cc68 <platform_driver_init+0x150>)
1000cb3a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000cb3c:	2300      	movs	r3, #0
1000cb3e:	4698      	mov	r8, r3
1000cb40:	4b4a      	ldr	r3, [pc, #296]	; (1000cc6c <platform_driver_init+0x154>)
1000cb42:	4642      	mov	r2, r8
1000cb44:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cb46:	4c4a      	ldr	r4, [pc, #296]	; (1000cc70 <platform_driver_init+0x158>)
1000cb48:	2380      	movs	r3, #128	; 0x80
1000cb4a:	2280      	movs	r2, #128	; 0x80
1000cb4c:	0412      	lsls	r2, r2, #16
1000cb4e:	4692      	mov	sl, r2
1000cb50:	50e2      	str	r2, [r4, r3]
1000cb52:	2280      	movs	r2, #128	; 0x80
1000cb54:	0452      	lsls	r2, r2, #17
1000cb56:	4691      	mov	r9, r2
1000cb58:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000cb5a:	4d46      	ldr	r5, [pc, #280]	; (1000cc74 <platform_driver_init+0x15c>)
1000cb5c:	4b46      	ldr	r3, [pc, #280]	; (1000cc78 <platform_driver_init+0x160>)
1000cb5e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000cb60:	4b46      	ldr	r3, [pc, #280]	; (1000cc7c <platform_driver_init+0x164>)
1000cb62:	4a47      	ldr	r2, [pc, #284]	; (1000cc80 <platform_driver_init+0x168>)
1000cb64:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000cb66:	4947      	ldr	r1, [pc, #284]	; (1000cc84 <platform_driver_init+0x16c>)
1000cb68:	4a47      	ldr	r2, [pc, #284]	; (1000cc88 <platform_driver_init+0x170>)
1000cb6a:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000cb6c:	4a47      	ldr	r2, [pc, #284]	; (1000cc8c <platform_driver_init+0x174>)
1000cb6e:	6811      	ldr	r1, [r2, #0]
1000cb70:	4a47      	ldr	r2, [pc, #284]	; (1000cc90 <platform_driver_init+0x178>)
1000cb72:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000cb74:	4a47      	ldr	r2, [pc, #284]	; (1000cc94 <platform_driver_init+0x17c>)
1000cb76:	6811      	ldr	r1, [r2, #0]
1000cb78:	4a47      	ldr	r2, [pc, #284]	; (1000cc98 <platform_driver_init+0x180>)
1000cb7a:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000cb7c:	4947      	ldr	r1, [pc, #284]	; (1000cc9c <platform_driver_init+0x184>)
1000cb7e:	4a48      	ldr	r2, [pc, #288]	; (1000cca0 <platform_driver_init+0x188>)
1000cb80:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000cb82:	4948      	ldr	r1, [pc, #288]	; (1000cca4 <platform_driver_init+0x18c>)
1000cb84:	4a48      	ldr	r2, [pc, #288]	; (1000cca8 <platform_driver_init+0x190>)
1000cb86:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000cb88:	4f48      	ldr	r7, [pc, #288]	; (1000ccac <platform_driver_init+0x194>)
1000cb8a:	4a49      	ldr	r2, [pc, #292]	; (1000ccb0 <platform_driver_init+0x198>)
1000cb8c:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000cb8e:	4949      	ldr	r1, [pc, #292]	; (1000ccb4 <platform_driver_init+0x19c>)
1000cb90:	4a49      	ldr	r2, [pc, #292]	; (1000ccb8 <platform_driver_init+0x1a0>)
1000cb92:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000cb94:	4949      	ldr	r1, [pc, #292]	; (1000ccbc <platform_driver_init+0x1a4>)
1000cb96:	4a4a      	ldr	r2, [pc, #296]	; (1000ccc0 <platform_driver_init+0x1a8>)
1000cb98:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000cb9a:	4e4a      	ldr	r6, [pc, #296]	; (1000ccc4 <platform_driver_init+0x1ac>)
1000cb9c:	4a4a      	ldr	r2, [pc, #296]	; (1000ccc8 <platform_driver_init+0x1b0>)
1000cb9e:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000cba0:	494a      	ldr	r1, [pc, #296]	; (1000cccc <platform_driver_init+0x1b4>)
1000cba2:	4a4b      	ldr	r2, [pc, #300]	; (1000ccd0 <platform_driver_init+0x1b8>)
1000cba4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000cba6:	494b      	ldr	r1, [pc, #300]	; (1000ccd4 <platform_driver_init+0x1bc>)
1000cba8:	4a4b      	ldr	r2, [pc, #300]	; (1000ccd8 <platform_driver_init+0x1c0>)
1000cbaa:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000cbac:	494b      	ldr	r1, [pc, #300]	; (1000ccdc <platform_driver_init+0x1c4>)
1000cbae:	4a4c      	ldr	r2, [pc, #304]	; (1000cce0 <platform_driver_init+0x1c8>)
1000cbb0:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000cbb2:	494c      	ldr	r1, [pc, #304]	; (1000cce4 <platform_driver_init+0x1cc>)
1000cbb4:	4a4c      	ldr	r2, [pc, #304]	; (1000cce8 <platform_driver_init+0x1d0>)
1000cbb6:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000cbb8:	494c      	ldr	r1, [pc, #304]	; (1000ccec <platform_driver_init+0x1d4>)
1000cbba:	4a4d      	ldr	r2, [pc, #308]	; (1000ccf0 <platform_driver_init+0x1d8>)
1000cbbc:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000cbbe:	2028      	movs	r0, #40	; 0x28
1000cbc0:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000cbc2:	494c      	ldr	r1, [pc, #304]	; (1000ccf4 <platform_driver_init+0x1dc>)
1000cbc4:	2028      	movs	r0, #40	; 0x28
1000cbc6:	682b      	ldr	r3, [r5, #0]
1000cbc8:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000cbca:	682b      	ldr	r3, [r5, #0]
1000cbcc:	494a      	ldr	r1, [pc, #296]	; (1000ccf8 <platform_driver_init+0x1e0>)
1000cbce:	2027      	movs	r0, #39	; 0x27
1000cbd0:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000cbd2:	4b4a      	ldr	r3, [pc, #296]	; (1000ccfc <platform_driver_init+0x1e4>)
1000cbd4:	681a      	ldr	r2, [r3, #0]
1000cbd6:	4b4a      	ldr	r3, [pc, #296]	; (1000cd00 <platform_driver_init+0x1e8>)
1000cbd8:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000cbda:	4a4a      	ldr	r2, [pc, #296]	; (1000cd04 <platform_driver_init+0x1ec>)
1000cbdc:	4b4a      	ldr	r3, [pc, #296]	; (1000cd08 <platform_driver_init+0x1f0>)
1000cbde:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000cbe0:	4a4a      	ldr	r2, [pc, #296]	; (1000cd0c <platform_driver_init+0x1f4>)
1000cbe2:	4b4b      	ldr	r3, [pc, #300]	; (1000cd10 <platform_driver_init+0x1f8>)
1000cbe4:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000cbe6:	4a4b      	ldr	r2, [pc, #300]	; (1000cd14 <platform_driver_init+0x1fc>)
1000cbe8:	4b4b      	ldr	r3, [pc, #300]	; (1000cd18 <platform_driver_init+0x200>)
1000cbea:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000cbec:	4a4b      	ldr	r2, [pc, #300]	; (1000cd1c <platform_driver_init+0x204>)
1000cbee:	4b4c      	ldr	r3, [pc, #304]	; (1000cd20 <platform_driver_init+0x208>)
1000cbf0:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000cbf2:	4a4c      	ldr	r2, [pc, #304]	; (1000cd24 <platform_driver_init+0x20c>)
1000cbf4:	4b4c      	ldr	r3, [pc, #304]	; (1000cd28 <platform_driver_init+0x210>)
1000cbf6:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000cbf8:	4a4c      	ldr	r2, [pc, #304]	; (1000cd2c <platform_driver_init+0x214>)
1000cbfa:	4b4d      	ldr	r3, [pc, #308]	; (1000cd30 <platform_driver_init+0x218>)
1000cbfc:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000cbfe:	4a4d      	ldr	r2, [pc, #308]	; (1000cd34 <platform_driver_init+0x21c>)
1000cc00:	4b4d      	ldr	r3, [pc, #308]	; (1000cd38 <platform_driver_init+0x220>)
1000cc02:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000cc04:	22a0      	movs	r2, #160	; 0xa0
1000cc06:	0092      	lsls	r2, r2, #2
1000cc08:	2100      	movs	r1, #0
1000cc0a:	484c      	ldr	r0, [pc, #304]	; (1000cd3c <platform_driver_init+0x224>)
1000cc0c:	4b4c      	ldr	r3, [pc, #304]	; (1000cd40 <platform_driver_init+0x228>)
1000cc0e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000cc10:	2280      	movs	r2, #128	; 0x80
1000cc12:	0092      	lsls	r2, r2, #2
1000cc14:	4b4b      	ldr	r3, [pc, #300]	; (1000cd44 <platform_driver_init+0x22c>)
1000cc16:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000cc18:	4b4b      	ldr	r3, [pc, #300]	; (1000cd48 <platform_driver_init+0x230>)
1000cc1a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000cc1c:	4653      	mov	r3, sl
1000cc1e:	6023      	str	r3, [r4, #0]
1000cc20:	464b      	mov	r3, r9
1000cc22:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000cc24:	4b49      	ldr	r3, [pc, #292]	; (1000cd4c <platform_driver_init+0x234>)
1000cc26:	4642      	mov	r2, r8
1000cc28:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000cc2a:	683b      	ldr	r3, [r7, #0]
1000cc2c:	4a48      	ldr	r2, [pc, #288]	; (1000cd50 <platform_driver_init+0x238>)
1000cc2e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000cc30:	6833      	ldr	r3, [r6, #0]
1000cc32:	4a48      	ldr	r2, [pc, #288]	; (1000cd54 <platform_driver_init+0x23c>)
1000cc34:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000cc36:	2000      	movs	r0, #0
1000cc38:	4c47      	ldr	r4, [pc, #284]	; (1000cd58 <platform_driver_init+0x240>)
1000cc3a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000cc3c:	2001      	movs	r0, #1
1000cc3e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000cc40:	2002      	movs	r0, #2
1000cc42:	47a0      	blx	r4
		platform_initialized = 1;
1000cc44:	2201      	movs	r2, #1
1000cc46:	4b06      	ldr	r3, [pc, #24]	; (1000cc60 <platform_driver_init+0x148>)
1000cc48:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000cc4a:	2000      	movs	r0, #0
1000cc4c:	e003      	b.n	1000cc56 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000cc4e:	2201      	movs	r2, #1
1000cc50:	4b03      	ldr	r3, [pc, #12]	; (1000cc60 <platform_driver_init+0x148>)
1000cc52:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000cc54:	2001      	movs	r0, #1
	}
	return status;
}
1000cc56:	bc1c      	pop	{r2, r3, r4}
1000cc58:	4690      	mov	r8, r2
1000cc5a:	4699      	mov	r9, r3
1000cc5c:	46a2      	mov	sl, r4
1000cc5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cc60:	10015804 	.word	0x10015804
1000cc64:	1000caa5 	.word	0x1000caa5
1000cc68:	1000cae9 	.word	0x1000cae9
1000cc6c:	10015824 	.word	0x10015824
1000cc70:	e000e100 	.word	0xe000e100
1000cc74:	10016798 	.word	0x10016798
1000cc78:	000007d7 	.word	0x000007d7
1000cc7c:	000007bd 	.word	0x000007bd
1000cc80:	100164d4 	.word	0x100164d4
1000cc84:	0001bc51 	.word	0x0001bc51
1000cc88:	1001679c 	.word	0x1001679c
1000cc8c:	100400bc 	.word	0x100400bc
1000cc90:	100157f8 	.word	0x100157f8
1000cc94:	100400b8 	.word	0x100400b8
1000cc98:	100157f4 	.word	0x100157f4
1000cc9c:	0001b99f 	.word	0x0001b99f
1000cca0:	100164d0 	.word	0x100164d0
1000cca4:	0001b9db 	.word	0x0001b9db
1000cca8:	100164dc 	.word	0x100164dc
1000ccac:	100167ac 	.word	0x100167ac
1000ccb0:	1004003c 	.word	0x1004003c
1000ccb4:	10041fc0 	.word	0x10041fc0
1000ccb8:	100164e0 	.word	0x100164e0
1000ccbc:	10041fc4 	.word	0x10041fc4
1000ccc0:	100167a8 	.word	0x100167a8
1000ccc4:	100167a0 	.word	0x100167a0
1000ccc8:	10041fd4 	.word	0x10041fd4
1000cccc:	10041fd8 	.word	0x10041fd8
1000ccd0:	100164d8 	.word	0x100164d8
1000ccd4:	0001cbe9 	.word	0x0001cbe9
1000ccd8:	10015818 	.word	0x10015818
1000ccdc:	0001cd8f 	.word	0x0001cd8f
1000cce0:	10015808 	.word	0x10015808
1000cce4:	0001cea3 	.word	0x0001cea3
1000cce8:	1001582c 	.word	0x1001582c
1000ccec:	0001cbcf 	.word	0x0001cbcf
1000ccf0:	10015800 	.word	0x10015800
1000ccf4:	1000d1a1 	.word	0x1000d1a1
1000ccf8:	1000d135 	.word	0x1000d135
1000ccfc:	100400e4 	.word	0x100400e4
1000cd00:	10015820 	.word	0x10015820
1000cd04:	00019fe9 	.word	0x00019fe9
1000cd08:	10015830 	.word	0x10015830
1000cd0c:	0001dbdd 	.word	0x0001dbdd
1000cd10:	100157fc 	.word	0x100157fc
1000cd14:	0001dc5b 	.word	0x0001dc5b
1000cd18:	10015810 	.word	0x10015810
1000cd1c:	100405ec 	.word	0x100405ec
1000cd20:	1001580c 	.word	0x1001580c
1000cd24:	0001d5e3 	.word	0x0001d5e3
1000cd28:	1001581c 	.word	0x1001581c
1000cd2c:	10040c20 	.word	0x10040c20
1000cd30:	10015834 	.word	0x10015834
1000cd34:	00019f09 	.word	0x00019f09
1000cd38:	100157f0 	.word	0x100157f0
1000cd3c:	10016518 	.word	0x10016518
1000cd40:	10011bc9 	.word	0x10011bc9
1000cd44:	100167b0 	.word	0x100167b0
1000cd48:	1000c9d1 	.word	0x1000c9d1
1000cd4c:	100167a4 	.word	0x100167a4
1000cd50:	1000ca79 	.word	0x1000ca79
1000cd54:	1000d1fd 	.word	0x1000d1fd
1000cd58:	1000d1e5 	.word	0x1000d1e5

1000cd5c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000cd5c:	4b04      	ldr	r3, [pc, #16]	; (1000cd70 <platform_register_ble_msg_handler+0x14>)
1000cd5e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000cd60:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000cd62:	2a01      	cmp	r2, #1
1000cd64:	d102      	bne.n	1000cd6c <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000cd66:	4b03      	ldr	r3, [pc, #12]	; (1000cd74 <platform_register_ble_msg_handler+0x18>)
1000cd68:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000cd6a:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000cd6c:	0018      	movs	r0, r3
1000cd6e:	4770      	bx	lr
1000cd70:	10015804 	.word	0x10015804
1000cd74:	10015824 	.word	0x10015824

1000cd78 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000cd78:	b570      	push	{r4, r5, r6, lr}
1000cd7a:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000cd7c:	4b0e      	ldr	r3, [pc, #56]	; (1000cdb8 <platform_interface_send+0x40>)
1000cd7e:	681b      	ldr	r3, [r3, #0]
1000cd80:	2b00      	cmp	r3, #0
1000cd82:	d002      	beq.n	1000cd8a <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000cd84:	8840      	ldrh	r0, [r0, #2]
1000cd86:	4798      	blx	r3
1000cd88:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000cd8a:	88e3      	ldrh	r3, [r4, #6]
1000cd8c:	88a2      	ldrh	r2, [r4, #4]
1000cd8e:	8861      	ldrh	r1, [r4, #2]
1000cd90:	8820      	ldrh	r0, [r4, #0]
1000cd92:	4d0a      	ldr	r5, [pc, #40]	; (1000cdbc <platform_interface_send+0x44>)
1000cd94:	682d      	ldr	r5, [r5, #0]
1000cd96:	47a8      	blx	r5
1000cd98:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000cd9a:	88e2      	ldrh	r2, [r4, #6]
1000cd9c:	2a00      	cmp	r2, #0
1000cd9e:	d102      	bne.n	1000cda6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000cda0:	4b07      	ldr	r3, [pc, #28]	; (1000cdc0 <platform_interface_send+0x48>)
1000cda2:	4798      	blx	r3
1000cda4:	e006      	b.n	1000cdb4 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000cda6:	0021      	movs	r1, r4
1000cda8:	3108      	adds	r1, #8
1000cdaa:	4b06      	ldr	r3, [pc, #24]	; (1000cdc4 <platform_interface_send+0x4c>)
1000cdac:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000cdae:	0028      	movs	r0, r5
1000cdb0:	4b03      	ldr	r3, [pc, #12]	; (1000cdc0 <platform_interface_send+0x48>)
1000cdb2:	4798      	blx	r3
	}
}
1000cdb4:	bd70      	pop	{r4, r5, r6, pc}
1000cdb6:	46c0      	nop			; (mov r8, r8)
1000cdb8:	100157f8 	.word	0x100157f8
1000cdbc:	10015830 	.word	0x10015830
1000cdc0:	1000ca01 	.word	0x1000ca01
1000cdc4:	10011bb7 	.word	0x10011bb7

1000cdc8 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000cdc8:	b570      	push	{r4, r5, r6, lr}
1000cdca:	0015      	movs	r5, r2
1000cdcc:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000cdce:	020a      	lsls	r2, r1, #8
1000cdd0:	4302      	orrs	r2, r0
1000cdd2:	4b0a      	ldr	r3, [pc, #40]	; (1000cdfc <send_plf_int_msg_ind+0x34>)
1000cdd4:	681e      	ldr	r6, [r3, #0]
1000cdd6:	0023      	movs	r3, r4
1000cdd8:	2105      	movs	r1, #5
1000cdda:	20a0      	movs	r0, #160	; 0xa0
1000cddc:	00c0      	lsls	r0, r0, #3
1000cdde:	47b0      	blx	r6
1000cde0:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000cde2:	d00a      	beq.n	1000cdfa <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000cde4:	2c00      	cmp	r4, #0
1000cde6:	d005      	beq.n	1000cdf4 <send_plf_int_msg_ind+0x2c>
1000cde8:	2d00      	cmp	r5, #0
1000cdea:	d003      	beq.n	1000cdf4 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000cdec:	0022      	movs	r2, r4
1000cdee:	0029      	movs	r1, r5
1000cdf0:	4b03      	ldr	r3, [pc, #12]	; (1000ce00 <send_plf_int_msg_ind+0x38>)
1000cdf2:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000cdf4:	0030      	movs	r0, r6
1000cdf6:	4b03      	ldr	r3, [pc, #12]	; (1000ce04 <send_plf_int_msg_ind+0x3c>)
1000cdf8:	4798      	blx	r3
	}
}
1000cdfa:	bd70      	pop	{r4, r5, r6, pc}
1000cdfc:	10015830 	.word	0x10015830
1000ce00:	10011bb7 	.word	0x10011bb7
1000ce04:	1000ca01 	.word	0x1000ca01

1000ce08 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000ce08:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce0a:	465f      	mov	r7, fp
1000ce0c:	4656      	mov	r6, sl
1000ce0e:	464d      	mov	r5, r9
1000ce10:	4644      	mov	r4, r8
1000ce12:	b4f0      	push	{r4, r5, r6, r7}
1000ce14:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ce16:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000ce18:	2300      	movs	r3, #0
1000ce1a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000ce1c:	1ce3      	adds	r3, r4, #3
1000ce1e:	d81c      	bhi.n	1000ce5a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000ce20:	220d      	movs	r2, #13
1000ce22:	2100      	movs	r1, #0
1000ce24:	a802      	add	r0, sp, #8
1000ce26:	4b82      	ldr	r3, [pc, #520]	; (1000d030 <platform_event_wait+0x228>)
1000ce28:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ce2a:	2333      	movs	r3, #51	; 0x33
1000ce2c:	aa02      	add	r2, sp, #8
1000ce2e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000ce30:	3b30      	subs	r3, #48	; 0x30
1000ce32:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000ce34:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000ce36:	3302      	adds	r3, #2
1000ce38:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ce3a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000ce3c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000ce3e:	0a23      	lsrs	r3, r4, #8
1000ce40:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000ce42:	0c23      	lsrs	r3, r4, #16
1000ce44:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000ce46:	0e24      	lsrs	r4, r4, #24
1000ce48:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000ce4a:	2301      	movs	r3, #1
1000ce4c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000ce4e:	210d      	movs	r1, #13
1000ce50:	0010      	movs	r0, r2
1000ce52:	4b78      	ldr	r3, [pc, #480]	; (1000d034 <platform_event_wait+0x22c>)
1000ce54:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000ce56:	2301      	movs	r3, #1
1000ce58:	4699      	mov	r9, r3
1000ce5a:	2400      	movs	r4, #0
1000ce5c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000ce5e:	4f76      	ldr	r7, [pc, #472]	; (1000d038 <platform_event_wait+0x230>)
1000ce60:	4e76      	ldr	r6, [pc, #472]	; (1000d03c <platform_event_wait+0x234>)
1000ce62:	4977      	ldr	r1, [pc, #476]	; (1000d040 <platform_event_wait+0x238>)
1000ce64:	6838      	ldr	r0, [r7, #0]
1000ce66:	6833      	ldr	r3, [r6, #0]
1000ce68:	4798      	blx	r3
1000ce6a:	2800      	cmp	r0, #0
1000ce6c:	d000      	beq.n	1000ce70 <platform_event_wait+0x68>
1000ce6e:	e088      	b.n	1000cf82 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000ce70:	4b73      	ldr	r3, [pc, #460]	; (1000d040 <platform_event_wait+0x238>)
1000ce72:	681c      	ldr	r4, [r3, #0]
1000ce74:	88a3      	ldrh	r3, [r4, #4]
1000ce76:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ce78:	23cd      	movs	r3, #205	; 0xcd
1000ce7a:	009b      	lsls	r3, r3, #2
1000ce7c:	459a      	cmp	sl, r3
1000ce7e:	d100      	bne.n	1000ce82 <platform_event_wait+0x7a>
1000ce80:	e0c7      	b.n	1000d012 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000ce82:	8923      	ldrh	r3, [r4, #8]
1000ce84:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000ce86:	8963      	ldrh	r3, [r4, #10]
1000ce88:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000ce8a:	464b      	mov	r3, r9
1000ce8c:	2b00      	cmp	r3, #0
1000ce8e:	d011      	beq.n	1000ceb4 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000ce90:	220d      	movs	r2, #13
1000ce92:	2100      	movs	r1, #0
1000ce94:	a802      	add	r0, sp, #8
1000ce96:	4b66      	ldr	r3, [pc, #408]	; (1000d030 <platform_event_wait+0x228>)
1000ce98:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000ce9a:	2333      	movs	r3, #51	; 0x33
1000ce9c:	aa02      	add	r2, sp, #8
1000ce9e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000cea0:	3b30      	subs	r3, #48	; 0x30
1000cea2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000cea4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000cea6:	3302      	adds	r3, #2
1000cea8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000ceaa:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000ceac:	210d      	movs	r1, #13
1000ceae:	0010      	movs	r0, r2
1000ceb0:	4b60      	ldr	r3, [pc, #384]	; (1000d034 <platform_event_wait+0x22c>)
1000ceb2:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000ceb4:	23a0      	movs	r3, #160	; 0xa0
1000ceb6:	00db      	lsls	r3, r3, #3
1000ceb8:	459a      	cmp	sl, r3
1000ceba:	d121      	bne.n	1000cf00 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000cebc:	4b61      	ldr	r3, [pc, #388]	; (1000d044 <platform_event_wait+0x23c>)
1000cebe:	881b      	ldrh	r3, [r3, #0]
1000cec0:	4443      	add	r3, r8
1000cec2:	22a0      	movs	r2, #160	; 0xa0
1000cec4:	0092      	lsls	r2, r2, #2
1000cec6:	4293      	cmp	r3, r2
1000cec8:	dd02      	ble.n	1000ced0 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000ceca:	3a80      	subs	r2, #128	; 0x80
1000cecc:	4b5d      	ldr	r3, [pc, #372]	; (1000d044 <platform_event_wait+0x23c>)
1000cece:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000ced0:	4b5c      	ldr	r3, [pc, #368]	; (1000d044 <platform_event_wait+0x23c>)
1000ced2:	469a      	mov	sl, r3
1000ced4:	881d      	ldrh	r5, [r3, #0]
1000ced6:	4b5c      	ldr	r3, [pc, #368]	; (1000d048 <platform_event_wait+0x240>)
1000ced8:	18ed      	adds	r5, r5, r3
1000ceda:	0021      	movs	r1, r4
1000cedc:	310c      	adds	r1, #12
1000cede:	4642      	mov	r2, r8
1000cee0:	0028      	movs	r0, r5
1000cee2:	4b5a      	ldr	r3, [pc, #360]	; (1000d04c <platform_event_wait+0x244>)
1000cee4:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000cee6:	4642      	mov	r2, r8
1000cee8:	0029      	movs	r1, r5
1000ceea:	4658      	mov	r0, fp
1000ceec:	4b58      	ldr	r3, [pc, #352]	; (1000d050 <platform_event_wait+0x248>)
1000ceee:	4798      	blx	r3
				plf_event_buff_index += len;
1000cef0:	4653      	mov	r3, sl
1000cef2:	881b      	ldrh	r3, [r3, #0]
1000cef4:	4443      	add	r3, r8
1000cef6:	4652      	mov	r2, sl
1000cef8:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000cefa:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000cefc:	2502      	movs	r5, #2
1000cefe:	e03a      	b.n	1000cf76 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000cf00:	4b54      	ldr	r3, [pc, #336]	; (1000d054 <platform_event_wait+0x24c>)
1000cf02:	681b      	ldr	r3, [r3, #0]
1000cf04:	2b00      	cmp	r3, #0
1000cf06:	d032      	beq.n	1000cf6e <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000cf08:	4b4d      	ldr	r3, [pc, #308]	; (1000d040 <platform_event_wait+0x238>)
1000cf0a:	681a      	ldr	r2, [r3, #0]
1000cf0c:	8893      	ldrh	r3, [r2, #4]
1000cf0e:	21cd      	movs	r1, #205	; 0xcd
1000cf10:	0089      	lsls	r1, r1, #2
1000cf12:	428b      	cmp	r3, r1
1000cf14:	d104      	bne.n	1000cf20 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000cf16:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000cf18:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000cf1a:	2b00      	cmp	r3, #0
1000cf1c:	d02b      	beq.n	1000cf76 <platform_event_wait+0x16e>
1000cf1e:	e028      	b.n	1000cf72 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000cf20:	4c4d      	ldr	r4, [pc, #308]	; (1000d058 <platform_event_wait+0x250>)
1000cf22:	4d49      	ldr	r5, [pc, #292]	; (1000d048 <platform_event_wait+0x240>)
1000cf24:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000cf26:	702b      	strb	r3, [r5, #0]
1000cf28:	0a1b      	lsrs	r3, r3, #8
1000cf2a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000cf2c:	8910      	ldrh	r0, [r2, #8]
1000cf2e:	4b4b      	ldr	r3, [pc, #300]	; (1000d05c <platform_event_wait+0x254>)
1000cf30:	681b      	ldr	r3, [r3, #0]
1000cf32:	4798      	blx	r3
1000cf34:	7128      	strb	r0, [r5, #4]
1000cf36:	0a00      	lsrs	r0, r0, #8
1000cf38:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000cf3a:	6820      	ldr	r0, [r4, #0]
1000cf3c:	4b40      	ldr	r3, [pc, #256]	; (1000d040 <platform_event_wait+0x238>)
1000cf3e:	681a      	ldr	r2, [r3, #0]
1000cf40:	88d2      	ldrh	r2, [r2, #6]
1000cf42:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000cf44:	681d      	ldr	r5, [r3, #0]
1000cf46:	896b      	ldrh	r3, [r5, #10]
1000cf48:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000cf4a:	3008      	adds	r0, #8
1000cf4c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000cf4e:	896a      	ldrh	r2, [r5, #10]
1000cf50:	2a00      	cmp	r2, #0
1000cf52:	d003      	beq.n	1000cf5c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000cf54:	0029      	movs	r1, r5
1000cf56:	310c      	adds	r1, #12
1000cf58:	4b3c      	ldr	r3, [pc, #240]	; (1000d04c <platform_event_wait+0x244>)
1000cf5a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000cf5c:	8969      	ldrh	r1, [r5, #10]
1000cf5e:	3108      	adds	r1, #8
1000cf60:	4b3c      	ldr	r3, [pc, #240]	; (1000d054 <platform_event_wait+0x24c>)
1000cf62:	681b      	ldr	r3, [r3, #0]
1000cf64:	4838      	ldr	r0, [pc, #224]	; (1000d048 <platform_event_wait+0x240>)
1000cf66:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000cf68:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000cf6a:	2503      	movs	r5, #3
1000cf6c:	e003      	b.n	1000cf76 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000cf6e:	2400      	movs	r4, #0
1000cf70:	e001      	b.n	1000cf76 <platform_event_wait+0x16e>
1000cf72:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000cf74:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000cf76:	4b32      	ldr	r3, [pc, #200]	; (1000d040 <platform_event_wait+0x238>)
1000cf78:	6818      	ldr	r0, [r3, #0]
1000cf7a:	4b39      	ldr	r3, [pc, #228]	; (1000d060 <platform_event_wait+0x258>)
1000cf7c:	681b      	ldr	r3, [r3, #0]
1000cf7e:	4798      	blx	r3
1000cf80:	e000      	b.n	1000cf84 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000cf82:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000cf84:	2c00      	cmp	r4, #0
1000cf86:	d000      	beq.n	1000cf8a <platform_event_wait+0x182>
1000cf88:	e76b      	b.n	1000ce62 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000cf8a:	464b      	mov	r3, r9
1000cf8c:	2b00      	cmp	r3, #0
1000cf8e:	d046      	beq.n	1000d01e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000cf90:	4b29      	ldr	r3, [pc, #164]	; (1000d038 <platform_event_wait+0x230>)
1000cf92:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000cf94:	2e00      	cmp	r6, #0
1000cf96:	d104      	bne.n	1000cfa2 <platform_event_wait+0x19a>
1000cf98:	2300      	movs	r3, #0
1000cf9a:	6a1c      	ldr	r4, [r3, #32]
1000cf9c:	2c00      	cmp	r4, #0
1000cf9e:	d131      	bne.n	1000d004 <platform_event_wait+0x1fc>
1000cfa0:	e03d      	b.n	1000d01e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000cfa2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000cfa4:	2314      	movs	r3, #20
1000cfa6:	469c      	mov	ip, r3
1000cfa8:	44b4      	add	ip, r6
1000cfaa:	4663      	mov	r3, ip
1000cfac:	4660      	mov	r0, ip
1000cfae:	9300      	str	r3, [sp, #0]
1000cfb0:	4b2c      	ldr	r3, [pc, #176]	; (1000d064 <platform_event_wait+0x25c>)
1000cfb2:	681b      	ldr	r3, [r3, #0]
1000cfb4:	4798      	blx	r3
	while(NULL != current)
1000cfb6:	2c00      	cmp	r4, #0
1000cfb8:	d01f      	beq.n	1000cffa <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000cfba:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000cfbc:	23cd      	movs	r3, #205	; 0xcd
1000cfbe:	009b      	lsls	r3, r3, #2
1000cfc0:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000cfc2:	4b27      	ldr	r3, [pc, #156]	; (1000d060 <platform_event_wait+0x258>)
1000cfc4:	469a      	mov	sl, r3
1000cfc6:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000cfc8:	6803      	ldr	r3, [r0, #0]
1000cfca:	889b      	ldrh	r3, [r3, #4]
1000cfcc:	4543      	cmp	r3, r8
1000cfce:	d110      	bne.n	1000cff2 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000cfd0:	2f00      	cmp	r7, #0
1000cfd2:	d006      	beq.n	1000cfe2 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000cfd4:	6883      	ldr	r3, [r0, #8]
1000cfd6:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000cfd8:	4653      	mov	r3, sl
1000cfda:	681b      	ldr	r3, [r3, #0]
1000cfdc:	4798      	blx	r3
				current = prev->pstrNext;
1000cfde:	68b8      	ldr	r0, [r7, #8]
1000cfe0:	e009      	b.n	1000cff6 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000cfe2:	6883      	ldr	r3, [r0, #8]
1000cfe4:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000cfe6:	4b1e      	ldr	r3, [pc, #120]	; (1000d060 <platform_event_wait+0x258>)
1000cfe8:	681b      	ldr	r3, [r3, #0]
1000cfea:	9301      	str	r3, [sp, #4]
1000cfec:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000cfee:	6a30      	ldr	r0, [r6, #32]
1000cff0:	e001      	b.n	1000cff6 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000cff2:	0007      	movs	r7, r0
1000cff4:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000cff6:	2800      	cmp	r0, #0
1000cff8:	d1e6      	bne.n	1000cfc8 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000cffa:	4b1b      	ldr	r3, [pc, #108]	; (1000d068 <platform_event_wait+0x260>)
1000cffc:	681b      	ldr	r3, [r3, #0]
1000cffe:	9800      	ldr	r0, [sp, #0]
1000d000:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d002:	e00c      	b.n	1000d01e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d004:	2314      	movs	r3, #20
1000d006:	9300      	str	r3, [sp, #0]
1000d008:	4b16      	ldr	r3, [pc, #88]	; (1000d064 <platform_event_wait+0x25c>)
1000d00a:	681b      	ldr	r3, [r3, #0]
1000d00c:	2014      	movs	r0, #20
1000d00e:	4798      	blx	r3
1000d010:	e7d3      	b.n	1000cfba <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d012:	4b10      	ldr	r3, [pc, #64]	; (1000d054 <platform_event_wait+0x24c>)
1000d014:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d016:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d018:	2b00      	cmp	r3, #0
1000d01a:	d0ac      	beq.n	1000cf76 <platform_event_wait+0x16e>
1000d01c:	e77b      	b.n	1000cf16 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d01e:	0028      	movs	r0, r5
1000d020:	b007      	add	sp, #28
1000d022:	bc3c      	pop	{r2, r3, r4, r5}
1000d024:	4690      	mov	r8, r2
1000d026:	4699      	mov	r9, r3
1000d028:	46a2      	mov	sl, r4
1000d02a:	46ab      	mov	fp, r5
1000d02c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d02e:	46c0      	nop			; (mov r8, r8)
1000d030:	10011bc9 	.word	0x10011bc9
1000d034:	1000cd79 	.word	0x1000cd79
1000d038:	10015834 	.word	0x10015834
1000d03c:	1001581c 	.word	0x1001581c
1000d040:	10015828 	.word	0x10015828
1000d044:	100167b0 	.word	0x100167b0
1000d048:	10016518 	.word	0x10016518
1000d04c:	10011bb7 	.word	0x10011bb7
1000d050:	1000c999 	.word	0x1000c999
1000d054:	10015824 	.word	0x10015824
1000d058:	10015814 	.word	0x10015814
1000d05c:	100157f4 	.word	0x100157f4
1000d060:	100157f0 	.word	0x100157f0
1000d064:	10015810 	.word	0x10015810
1000d068:	100157fc 	.word	0x100157fc

1000d06c <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d06c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d06e:	4b03      	ldr	r3, [pc, #12]	; (1000d07c <acquire_sleep_lock+0x10>)
1000d070:	681b      	ldr	r3, [r3, #0]
1000d072:	2080      	movs	r0, #128	; 0x80
1000d074:	0200      	lsls	r0, r0, #8
1000d076:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d078:	2008      	movs	r0, #8
1000d07a:	bd10      	pop	{r4, pc}
1000d07c:	100164d0 	.word	0x100164d0

1000d080 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d080:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d082:	4b03      	ldr	r3, [pc, #12]	; (1000d090 <release_message_lock+0x10>)
1000d084:	681b      	ldr	r3, [r3, #0]
1000d086:	2080      	movs	r0, #128	; 0x80
1000d088:	01c0      	lsls	r0, r0, #7
1000d08a:	4798      	blx	r3
	return status;
}
1000d08c:	2000      	movs	r0, #0
1000d08e:	bd10      	pop	{r4, pc}
1000d090:	100164dc 	.word	0x100164dc

1000d094 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d094:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d096:	4c05      	ldr	r4, [pc, #20]	; (1000d0ac <release_sleep_lock+0x18>)
1000d098:	2080      	movs	r0, #128	; 0x80
1000d09a:	01c0      	lsls	r0, r0, #7
1000d09c:	6823      	ldr	r3, [r4, #0]
1000d09e:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d0a0:	6823      	ldr	r3, [r4, #0]
1000d0a2:	2080      	movs	r0, #128	; 0x80
1000d0a4:	0200      	lsls	r0, r0, #8
1000d0a6:	4798      	blx	r3
	return status;
}
1000d0a8:	2000      	movs	r0, #0
1000d0aa:	bd10      	pop	{r4, pc}
1000d0ac:	100164dc 	.word	0x100164dc

1000d0b0 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d0b0:	2800      	cmp	r0, #0
1000d0b2:	d003      	beq.n	1000d0bc <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d0b4:	4b02      	ldr	r3, [pc, #8]	; (1000d0c0 <register_resume_callback+0x10>)
1000d0b6:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d0b8:	2000      	movs	r0, #0
1000d0ba:	e000      	b.n	1000d0be <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d0bc:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d0be:	4770      	bx	lr
1000d0c0:	100167a4 	.word	0x100167a4

1000d0c4 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d0c4:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d0c6:	4a18      	ldr	r2, [pc, #96]	; (1000d128 <gpio1_combined_isr_handler+0x64>)
1000d0c8:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d0ca:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d0cc:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d0ce:	2180      	movs	r1, #128	; 0x80
1000d0d0:	0209      	lsls	r1, r1, #8
1000d0d2:	4301      	orrs	r1, r0
1000d0d4:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d0d6:	0010      	movs	r0, r2
1000d0d8:	4d14      	ldr	r5, [pc, #80]	; (1000d12c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d0da:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d0dc:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d0de:	05db      	lsls	r3, r3, #23
1000d0e0:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d0e2:	d011      	beq.n	1000d108 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d0e4:	b2db      	uxtb	r3, r3
1000d0e6:	4259      	negs	r1, r3
1000d0e8:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d0ea:	2b01      	cmp	r3, #1
1000d0ec:	d006      	beq.n	1000d0fc <gpio1_combined_isr_handler+0x38>
1000d0ee:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d0f0:	085b      	lsrs	r3, r3, #1
				index++;
1000d0f2:	3101      	adds	r1, #1
1000d0f4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d0f6:	2b01      	cmp	r3, #1
1000d0f8:	d1fa      	bne.n	1000d0f0 <gpio1_combined_isr_handler+0x2c>
1000d0fa:	e000      	b.n	1000d0fe <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d0fc:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d0fe:	0023      	movs	r3, r4
1000d100:	408b      	lsls	r3, r1
1000d102:	b29b      	uxth	r3, r3
1000d104:	8703      	strh	r3, [r0, #56]	; 0x38
1000d106:	e003      	b.n	1000d110 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d108:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d10a:	432b      	orrs	r3, r5
1000d10c:	b29b      	uxth	r3, r3
1000d10e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d110:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d112:	05db      	lsls	r3, r3, #23
1000d114:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d116:	d1e2      	bne.n	1000d0de <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d118:	2180      	movs	r1, #128	; 0x80
1000d11a:	0049      	lsls	r1, r1, #1
1000d11c:	3381      	adds	r3, #129	; 0x81
1000d11e:	33ff      	adds	r3, #255	; 0xff
1000d120:	4a03      	ldr	r2, [pc, #12]	; (1000d130 <gpio1_combined_isr_handler+0x6c>)
1000d122:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d124:	bd30      	pop	{r4, r5, pc}
1000d126:	46c0      	nop			; (mov r8, r8)
1000d128:	40011000 	.word	0x40011000
1000d12c:	ffff8000 	.word	0xffff8000
1000d130:	e000e100 	.word	0xe000e100

1000d134 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d134:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d136:	4a17      	ldr	r2, [pc, #92]	; (1000d194 <gpio0_combined_isr_handler+0x60>)
1000d138:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d13a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d13c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d13e:	2180      	movs	r1, #128	; 0x80
1000d140:	0209      	lsls	r1, r1, #8
1000d142:	4301      	orrs	r1, r0
1000d144:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d146:	0010      	movs	r0, r2
1000d148:	4d13      	ldr	r5, [pc, #76]	; (1000d198 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d14a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d14c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d14e:	05db      	lsls	r3, r3, #23
1000d150:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d152:	d011      	beq.n	1000d178 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d154:	b2db      	uxtb	r3, r3
1000d156:	4259      	negs	r1, r3
1000d158:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d15a:	2b01      	cmp	r3, #1
1000d15c:	d006      	beq.n	1000d16c <gpio0_combined_isr_handler+0x38>
1000d15e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d160:	085b      	lsrs	r3, r3, #1
				index++;
1000d162:	3101      	adds	r1, #1
1000d164:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d166:	2b01      	cmp	r3, #1
1000d168:	d1fa      	bne.n	1000d160 <gpio0_combined_isr_handler+0x2c>
1000d16a:	e000      	b.n	1000d16e <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d16c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d16e:	0023      	movs	r3, r4
1000d170:	408b      	lsls	r3, r1
1000d172:	b29b      	uxth	r3, r3
1000d174:	8703      	strh	r3, [r0, #56]	; 0x38
1000d176:	e003      	b.n	1000d180 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d178:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d17a:	432b      	orrs	r3, r5
1000d17c:	b29b      	uxth	r3, r3
1000d17e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d180:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d182:	05db      	lsls	r3, r3, #23
1000d184:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d186:	d1e2      	bne.n	1000d14e <gpio0_combined_isr_handler+0x1a>
1000d188:	2180      	movs	r1, #128	; 0x80
1000d18a:	3381      	adds	r3, #129	; 0x81
1000d18c:	33ff      	adds	r3, #255	; 0xff
1000d18e:	4a03      	ldr	r2, [pc, #12]	; (1000d19c <gpio0_combined_isr_handler+0x68>)
1000d190:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d192:	bd30      	pop	{r4, r5, pc}
1000d194:	40010000 	.word	0x40010000
1000d198:	ffff8000 	.word	0xffff8000
1000d19c:	e000e100 	.word	0xe000e100

1000d1a0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d1a0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d1a2:	4b0c      	ldr	r3, [pc, #48]	; (1000d1d4 <PORT1_COMB_Handler+0x34>)
1000d1a4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d1a6:	0b5b      	lsrs	r3, r3, #13
1000d1a8:	d010      	beq.n	1000d1cc <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d1aa:	4b0b      	ldr	r3, [pc, #44]	; (1000d1d8 <PORT1_COMB_Handler+0x38>)
1000d1ac:	681b      	ldr	r3, [r3, #0]
1000d1ae:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d1b0:	4a08      	ldr	r2, [pc, #32]	; (1000d1d4 <PORT1_COMB_Handler+0x34>)
1000d1b2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d1b4:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d1b6:	0b5b      	lsrs	r3, r3, #13
1000d1b8:	035b      	lsls	r3, r3, #13
1000d1ba:	430b      	orrs	r3, r1
1000d1bc:	8713      	strh	r3, [r2, #56]	; 0x38
1000d1be:	2180      	movs	r1, #128	; 0x80
1000d1c0:	0049      	lsls	r1, r1, #1
1000d1c2:	23c0      	movs	r3, #192	; 0xc0
1000d1c4:	005b      	lsls	r3, r3, #1
1000d1c6:	4a05      	ldr	r2, [pc, #20]	; (1000d1dc <PORT1_COMB_Handler+0x3c>)
1000d1c8:	50d1      	str	r1, [r2, r3]
1000d1ca:	e001      	b.n	1000d1d0 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d1cc:	4b04      	ldr	r3, [pc, #16]	; (1000d1e0 <PORT1_COMB_Handler+0x40>)
1000d1ce:	4798      	blx	r3
	}
}
1000d1d0:	bd10      	pop	{r4, pc}
1000d1d2:	46c0      	nop			; (mov r8, r8)
1000d1d4:	40011000 	.word	0x40011000
1000d1d8:	1001679c 	.word	0x1001679c
1000d1dc:	e000e100 	.word	0xe000e100
1000d1e0:	1000d0c5 	.word	0x1000d0c5

1000d1e4 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d1e4:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d1e6:	2802      	cmp	r0, #2
1000d1e8:	d804      	bhi.n	1000d1f4 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d1ea:	0080      	lsls	r0, r0, #2
1000d1ec:	2200      	movs	r2, #0
1000d1ee:	4b02      	ldr	r3, [pc, #8]	; (1000d1f8 <wakeup_int_unregister_callback+0x14>)
1000d1f0:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d1f2:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000d1f4:	0018      	movs	r0, r3
1000d1f6:	4770      	bx	lr
1000d1f8:	100167b4 	.word	0x100167b4

1000d1fc <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000d1fc:	b510      	push	{r4, lr}
1000d1fe:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000d200:	7803      	ldrb	r3, [r0, #0]
1000d202:	2b01      	cmp	r3, #1
1000d204:	d108      	bne.n	1000d218 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000d206:	4b11      	ldr	r3, [pc, #68]	; (1000d24c <wakeup_active_event_callback+0x50>)
1000d208:	681b      	ldr	r3, [r3, #0]
1000d20a:	2b00      	cmp	r3, #0
1000d20c:	d000      	beq.n	1000d210 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000d20e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000d210:	23ff      	movs	r3, #255	; 0xff
1000d212:	6822      	ldr	r2, [r4, #0]
1000d214:	439a      	bics	r2, r3
1000d216:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000d218:	7863      	ldrb	r3, [r4, #1]
1000d21a:	2b01      	cmp	r3, #1
1000d21c:	d108      	bne.n	1000d230 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000d21e:	4b0b      	ldr	r3, [pc, #44]	; (1000d24c <wakeup_active_event_callback+0x50>)
1000d220:	685b      	ldr	r3, [r3, #4]
1000d222:	2b00      	cmp	r3, #0
1000d224:	d000      	beq.n	1000d228 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000d226:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000d228:	4b09      	ldr	r3, [pc, #36]	; (1000d250 <wakeup_active_event_callback+0x54>)
1000d22a:	6822      	ldr	r2, [r4, #0]
1000d22c:	4013      	ands	r3, r2
1000d22e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000d230:	78a3      	ldrb	r3, [r4, #2]
1000d232:	2b01      	cmp	r3, #1
1000d234:	d108      	bne.n	1000d248 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000d236:	4b05      	ldr	r3, [pc, #20]	; (1000d24c <wakeup_active_event_callback+0x50>)
1000d238:	689b      	ldr	r3, [r3, #8]
1000d23a:	2b00      	cmp	r3, #0
1000d23c:	d000      	beq.n	1000d240 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000d23e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000d240:	4b04      	ldr	r3, [pc, #16]	; (1000d254 <wakeup_active_event_callback+0x58>)
1000d242:	6822      	ldr	r2, [r4, #0]
1000d244:	4013      	ands	r3, r2
1000d246:	6023      	str	r3, [r4, #0]
	}
}
1000d248:	bd10      	pop	{r4, pc}
1000d24a:	46c0      	nop			; (mov r8, r8)
1000d24c:	100167b4 	.word	0x100167b4
1000d250:	ffff00ff 	.word	0xffff00ff
1000d254:	ff00ffff 	.word	0xff00ffff

1000d258 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000d258:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000d25a:	4b09      	ldr	r3, [pc, #36]	; (1000d280 <resume_cb+0x28>)
1000d25c:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000d25e:	4b09      	ldr	r3, [pc, #36]	; (1000d284 <resume_cb+0x2c>)
1000d260:	4798      	blx	r3
	sms_dualtimer_init();
1000d262:	4b09      	ldr	r3, [pc, #36]	; (1000d288 <resume_cb+0x30>)
1000d264:	4798      	blx	r3
	delay_init();
1000d266:	4b09      	ldr	r3, [pc, #36]	; (1000d28c <resume_cb+0x34>)
1000d268:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000d26a:	4b09      	ldr	r3, [pc, #36]	; (1000d290 <resume_cb+0x38>)
1000d26c:	4798      	blx	r3
	sms_led_gpio_init();
1000d26e:	4b09      	ldr	r3, [pc, #36]	; (1000d294 <resume_cb+0x3c>)
1000d270:	4798      	blx	r3
	sms_spi_master_configure();
1000d272:	4b09      	ldr	r3, [pc, #36]	; (1000d298 <resume_cb+0x40>)
1000d274:	4798      	blx	r3
	sms_i2c_master_configure();
1000d276:	4b09      	ldr	r3, [pc, #36]	; (1000d29c <resume_cb+0x44>)
1000d278:	4798      	blx	r3
	//sms_mpu_configure_gpio();
	sms_monitor_configure_gpio();
1000d27a:	4b09      	ldr	r3, [pc, #36]	; (1000d2a0 <resume_cb+0x48>)
1000d27c:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000d27e:	bd10      	pop	{r4, pc}
1000d280:	1000caa5 	.word	0x1000caa5
1000d284:	1000c80d 	.word	0x1000c80d
1000d288:	10009405 	.word	0x10009405
1000d28c:	100080e9 	.word	0x100080e9
1000d290:	10008a1d 	.word	0x10008a1d
1000d294:	10008f1d 	.word	0x10008f1d
1000d298:	100092b9 	.word	0x100092b9
1000d29c:	10008da9 	.word	0x10008da9
1000d2a0:	10008d09 	.word	0x10008d09

1000d2a4 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000d2a4:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000d2a6:	2300      	movs	r3, #0
1000d2a8:	4a09      	ldr	r2, [pc, #36]	; (1000d2d0 <sms_init_variables+0x2c>)
1000d2aa:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000d2ac:	4a09      	ldr	r2, [pc, #36]	; (1000d2d4 <sms_init_variables+0x30>)
1000d2ae:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000d2b0:	2101      	movs	r1, #1
1000d2b2:	4a09      	ldr	r2, [pc, #36]	; (1000d2d8 <sms_init_variables+0x34>)
1000d2b4:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000d2b6:	4a09      	ldr	r2, [pc, #36]	; (1000d2dc <sms_init_variables+0x38>)
1000d2b8:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000d2ba:	2201      	movs	r2, #1
1000d2bc:	4252      	negs	r2, r2
1000d2be:	4b08      	ldr	r3, [pc, #32]	; (1000d2e0 <sms_init_variables+0x3c>)
1000d2c0:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000d2c2:	4b08      	ldr	r3, [pc, #32]	; (1000d2e4 <sms_init_variables+0x40>)
1000d2c4:	4798      	blx	r3
	sms_button_init_variables();
1000d2c6:	4b08      	ldr	r3, [pc, #32]	; (1000d2e8 <sms_init_variables+0x44>)
1000d2c8:	4798      	blx	r3
	sms_pressure_init_variables();
1000d2ca:	4b08      	ldr	r3, [pc, #32]	; (1000d2ec <sms_init_variables+0x48>)
1000d2cc:	4798      	blx	r3
}
1000d2ce:	bd10      	pop	{r4, pc}
1000d2d0:	10015908 	.word	0x10015908
1000d2d4:	10015afb 	.word	0x10015afb
1000d2d8:	100159b8 	.word	0x100159b8
1000d2dc:	100159b9 	.word	0x100159b9
1000d2e0:	100159b4 	.word	0x100159b4
1000d2e4:	10008439 	.word	0x10008439
1000d2e8:	100089f5 	.word	0x100089f5
1000d2ec:	10008fb9 	.word	0x10008fb9

1000d2f0 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000d2f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000d2f2:	2210      	movs	r2, #16
1000d2f4:	4b8d      	ldr	r3, [pc, #564]	; (1000d52c <main+0x23c>)
1000d2f6:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000d2f8:	4b8d      	ldr	r3, [pc, #564]	; (1000d530 <main+0x240>)
1000d2fa:	4798      	blx	r3
	gpio_init(); // GPIO
1000d2fc:	4b8d      	ldr	r3, [pc, #564]	; (1000d534 <main+0x244>)
1000d2fe:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000d300:	4b8d      	ldr	r3, [pc, #564]	; (1000d538 <main+0x248>)
1000d302:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000d304:	4b8d      	ldr	r3, [pc, #564]	; (1000d53c <main+0x24c>)
1000d306:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000d308:	4b8d      	ldr	r3, [pc, #564]	; (1000d540 <main+0x250>)
1000d30a:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000d30c:	4b8d      	ldr	r3, [pc, #564]	; (1000d544 <main+0x254>)
1000d30e:	4798      	blx	r3
	
	// Blocking delay (hacked from other SAM platforms)
	delay_init();
1000d310:	4b8d      	ldr	r3, [pc, #564]	; (1000d548 <main+0x258>)
1000d312:	4798      	blx	r3

	// Buttons
	sms_button_gpio_init();
1000d314:	4b8d      	ldr	r3, [pc, #564]	; (1000d54c <main+0x25c>)
1000d316:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000d318:	4b8d      	ldr	r3, [pc, #564]	; (1000d550 <main+0x260>)
1000d31a:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000d31c:	4b8d      	ldr	r3, [pc, #564]	; (1000d554 <main+0x264>)
1000d31e:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000d320:	4b8d      	ldr	r3, [pc, #564]	; (1000d558 <main+0x268>)
1000d322:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000d324:	4b8d      	ldr	r3, [pc, #564]	; (1000d55c <main+0x26c>)
1000d326:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000d328:	4b8d      	ldr	r3, [pc, #564]	; (1000d560 <main+0x270>)
1000d32a:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000d32c:	2000      	movs	r0, #0
1000d32e:	4b8d      	ldr	r3, [pc, #564]	; (1000d564 <main+0x274>)
1000d330:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000d332:	4b8d      	ldr	r3, [pc, #564]	; (1000d568 <main+0x278>)
1000d334:	4798      	blx	r3
	sms_pressure_define_services();
1000d336:	4b8d      	ldr	r3, [pc, #564]	; (1000d56c <main+0x27c>)
1000d338:	4798      	blx	r3
	sms_mpu_define_services();
1000d33a:	4b8d      	ldr	r3, [pc, #564]	; (1000d570 <main+0x280>)
1000d33c:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000d33e:	488d      	ldr	r0, [pc, #564]	; (1000d574 <main+0x284>)
1000d340:	4b8d      	ldr	r3, [pc, #564]	; (1000d578 <main+0x288>)
1000d342:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000d344:	498d      	ldr	r1, [pc, #564]	; (1000d57c <main+0x28c>)
1000d346:	2000      	movs	r0, #0
1000d348:	4c8d      	ldr	r4, [pc, #564]	; (1000d580 <main+0x290>)
1000d34a:	47a0      	blx	r4
	sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000d34c:	498d      	ldr	r1, [pc, #564]	; (1000d584 <main+0x294>)
1000d34e:	2001      	movs	r0, #1
1000d350:	47a0      	blx	r4

	// Buttons
	sms_button_register_callbacks();
1000d352:	4b8d      	ldr	r3, [pc, #564]	; (1000d588 <main+0x298>)
1000d354:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000d356:	4b8d      	ldr	r3, [pc, #564]	; (1000d58c <main+0x29c>)
1000d358:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000d35a:	4a8d      	ldr	r2, [pc, #564]	; (1000d590 <main+0x2a0>)
1000d35c:	2100      	movs	r1, #0
1000d35e:	2000      	movs	r0, #0
1000d360:	4c8c      	ldr	r4, [pc, #560]	; (1000d594 <main+0x2a4>)
1000d362:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000d364:	4a8c      	ldr	r2, [pc, #560]	; (1000d598 <main+0x2a8>)
1000d366:	2102      	movs	r1, #2
1000d368:	2000      	movs	r0, #0
1000d36a:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000d36c:	2100      	movs	r1, #0
1000d36e:	2000      	movs	r0, #0
1000d370:	4b8a      	ldr	r3, [pc, #552]	; (1000d59c <main+0x2ac>)
1000d372:	4798      	blx	r3
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000d374:	4e8a      	ldr	r6, [pc, #552]	; (1000d5a0 <main+0x2b0>)
1000d376:	4c8b      	ldr	r4, [pc, #556]	; (1000d5a4 <main+0x2b4>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000d378:	4d8b      	ldr	r5, [pc, #556]	; (1000d5a8 <main+0x2b8>)
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000d37a:	6830      	ldr	r0, [r6, #0]
1000d37c:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000d37e:	2800      	cmp	r0, #0
1000d380:	d000      	beq.n	1000d384 <main+0x94>
1000d382:	e0b9      	b.n	1000d4f8 <main+0x208>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000d384:	4b89      	ldr	r3, [pc, #548]	; (1000d5ac <main+0x2bc>)
1000d386:	78db      	ldrb	r3, [r3, #3]
1000d388:	2b00      	cmp	r3, #0
1000d38a:	d00b      	beq.n	1000d3a4 <main+0xb4>
				DBG_LOG("Btn0 int... ");
1000d38c:	4886      	ldr	r0, [pc, #536]	; (1000d5a8 <main+0x2b8>)
1000d38e:	4b88      	ldr	r3, [pc, #544]	; (1000d5b0 <main+0x2c0>)
1000d390:	4798      	blx	r3
1000d392:	4888      	ldr	r0, [pc, #544]	; (1000d5b4 <main+0x2c4>)
1000d394:	4b88      	ldr	r3, [pc, #544]	; (1000d5b8 <main+0x2c8>)
1000d396:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000d398:	2000      	movs	r0, #0
1000d39a:	4b88      	ldr	r3, [pc, #544]	; (1000d5bc <main+0x2cc>)
1000d39c:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000d39e:	2200      	movs	r2, #0
1000d3a0:	4b82      	ldr	r3, [pc, #520]	; (1000d5ac <main+0x2bc>)
1000d3a2:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000d3a4:	4b81      	ldr	r3, [pc, #516]	; (1000d5ac <main+0x2bc>)
1000d3a6:	7a5b      	ldrb	r3, [r3, #9]
1000d3a8:	2b00      	cmp	r3, #0
1000d3aa:	d00b      	beq.n	1000d3c4 <main+0xd4>
				DBG_LOG("Btn1 int... ");
1000d3ac:	487e      	ldr	r0, [pc, #504]	; (1000d5a8 <main+0x2b8>)
1000d3ae:	4b80      	ldr	r3, [pc, #512]	; (1000d5b0 <main+0x2c0>)
1000d3b0:	4798      	blx	r3
1000d3b2:	4883      	ldr	r0, [pc, #524]	; (1000d5c0 <main+0x2d0>)
1000d3b4:	4b80      	ldr	r3, [pc, #512]	; (1000d5b8 <main+0x2c8>)
1000d3b6:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000d3b8:	2001      	movs	r0, #1
1000d3ba:	4b80      	ldr	r3, [pc, #512]	; (1000d5bc <main+0x2cc>)
1000d3bc:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000d3be:	2200      	movs	r2, #0
1000d3c0:	4b7a      	ldr	r3, [pc, #488]	; (1000d5ac <main+0x2bc>)
1000d3c2:	725a      	strb	r2, [r3, #9]
			}
			if(mpu_device.new_int) {
1000d3c4:	2345      	movs	r3, #69	; 0x45
1000d3c6:	4a7f      	ldr	r2, [pc, #508]	; (1000d5c4 <main+0x2d4>)
1000d3c8:	5cd3      	ldrb	r3, [r2, r3]
1000d3ca:	2b00      	cmp	r3, #0
1000d3cc:	d018      	beq.n	1000d400 <main+0x110>
				DBG_LOG("MPU int (%d)... ", ble_instance.sending_queue);
1000d3ce:	4876      	ldr	r0, [pc, #472]	; (1000d5a8 <main+0x2b8>)
1000d3d0:	4b77      	ldr	r3, [pc, #476]	; (1000d5b0 <main+0x2c0>)
1000d3d2:	4798      	blx	r3
1000d3d4:	4b55      	ldr	r3, [pc, #340]	; (1000d52c <main+0x23c>)
1000d3d6:	7859      	ldrb	r1, [r3, #1]
1000d3d8:	b2c9      	uxtb	r1, r1
1000d3da:	487b      	ldr	r0, [pc, #492]	; (1000d5c8 <main+0x2d8>)
1000d3dc:	4b76      	ldr	r3, [pc, #472]	; (1000d5b8 <main+0x2c8>)
1000d3de:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000d3e0:	2101      	movs	r1, #1
1000d3e2:	200e      	movs	r0, #14
1000d3e4:	4f79      	ldr	r7, [pc, #484]	; (1000d5cc <main+0x2dc>)
1000d3e6:	47b8      	blx	r7
				sms_mpu_poll_data();
1000d3e8:	4b79      	ldr	r3, [pc, #484]	; (1000d5d0 <main+0x2e0>)
1000d3ea:	4798      	blx	r3
				mpu_device.new_int = false;
1000d3ec:	4b75      	ldr	r3, [pc, #468]	; (1000d5c4 <main+0x2d4>)
1000d3ee:	2100      	movs	r1, #0
1000d3f0:	2245      	movs	r2, #69	; 0x45
1000d3f2:	5499      	strb	r1, [r3, r2]
				mpu_device.rts = true;
1000d3f4:	3101      	adds	r1, #1
1000d3f6:	3205      	adds	r2, #5
1000d3f8:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000d3fa:	2100      	movs	r1, #0
1000d3fc:	200e      	movs	r0, #14
1000d3fe:	47b8      	blx	r7
				DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000d400:	2329      	movs	r3, #41	; 0x29
1000d402:	4a74      	ldr	r2, [pc, #464]	; (1000d5d4 <main+0x2e4>)
1000d404:	5cd3      	ldrb	r3, [r2, r3]
1000d406:	2b00      	cmp	r3, #0
1000d408:	d002      	beq.n	1000d410 <main+0x120>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000d40a:	2100      	movs	r1, #0
1000d40c:	2329      	movs	r3, #41	; 0x29
1000d40e:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000d410:	4b71      	ldr	r3, [pc, #452]	; (1000d5d8 <main+0x2e8>)
1000d412:	789b      	ldrb	r3, [r3, #2]
1000d414:	2b00      	cmp	r3, #0
1000d416:	d00d      	beq.n	1000d434 <main+0x144>
				DBG_LOG("Timer1 int... ");
1000d418:	4863      	ldr	r0, [pc, #396]	; (1000d5a8 <main+0x2b8>)
1000d41a:	4b65      	ldr	r3, [pc, #404]	; (1000d5b0 <main+0x2c0>)
1000d41c:	4798      	blx	r3
1000d41e:	486f      	ldr	r0, [pc, #444]	; (1000d5dc <main+0x2ec>)
1000d420:	4b65      	ldr	r3, [pc, #404]	; (1000d5b8 <main+0x2c8>)
1000d422:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000d424:	2000      	movs	r0, #0
1000d426:	4b6e      	ldr	r3, [pc, #440]	; (1000d5e0 <main+0x2f0>)
1000d428:	4798      	blx	r3
				sms_dualtimer1_fn();
1000d42a:	4b6e      	ldr	r3, [pc, #440]	; (1000d5e4 <main+0x2f4>)
1000d42c:	4798      	blx	r3
				timer1_instance.new_int = false;
1000d42e:	2200      	movs	r2, #0
1000d430:	4b69      	ldr	r3, [pc, #420]	; (1000d5d8 <main+0x2e8>)
1000d432:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000d434:	4b6c      	ldr	r3, [pc, #432]	; (1000d5e8 <main+0x2f8>)
1000d436:	789b      	ldrb	r3, [r3, #2]
1000d438:	2b00      	cmp	r3, #0
1000d43a:	d00d      	beq.n	1000d458 <main+0x168>
				DBG_LOG("Timer2 int... ");
1000d43c:	485a      	ldr	r0, [pc, #360]	; (1000d5a8 <main+0x2b8>)
1000d43e:	4b5c      	ldr	r3, [pc, #368]	; (1000d5b0 <main+0x2c0>)
1000d440:	4798      	blx	r3
1000d442:	486a      	ldr	r0, [pc, #424]	; (1000d5ec <main+0x2fc>)
1000d444:	4b5c      	ldr	r3, [pc, #368]	; (1000d5b8 <main+0x2c8>)
1000d446:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000d448:	2001      	movs	r0, #1
1000d44a:	4b65      	ldr	r3, [pc, #404]	; (1000d5e0 <main+0x2f0>)
1000d44c:	4798      	blx	r3
				sms_dualtimer2_fn();
1000d44e:	4b68      	ldr	r3, [pc, #416]	; (1000d5f0 <main+0x300>)
1000d450:	4798      	blx	r3
				timer2_instance.new_int = false;
1000d452:	2200      	movs	r2, #0
1000d454:	4b64      	ldr	r3, [pc, #400]	; (1000d5e8 <main+0x2f8>)
1000d456:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(mpu_device.rts) {
1000d458:	234a      	movs	r3, #74	; 0x4a
1000d45a:	4a5a      	ldr	r2, [pc, #360]	; (1000d5c4 <main+0x2d4>)
1000d45c:	5cd3      	ldrb	r3, [r2, r3]
1000d45e:	2b00      	cmp	r3, #0
1000d460:	d021      	beq.n	1000d4a6 <main+0x1b6>
				DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
1000d462:	4851      	ldr	r0, [pc, #324]	; (1000d5a8 <main+0x2b8>)
1000d464:	4b52      	ldr	r3, [pc, #328]	; (1000d5b0 <main+0x2c0>)
1000d466:	4798      	blx	r3
1000d468:	2329      	movs	r3, #41	; 0x29
1000d46a:	4a5a      	ldr	r2, [pc, #360]	; (1000d5d4 <main+0x2e4>)
1000d46c:	5cd1      	ldrb	r1, [r2, r3]
1000d46e:	b2c9      	uxtb	r1, r1
1000d470:	4f2e      	ldr	r7, [pc, #184]	; (1000d52c <main+0x23c>)
1000d472:	787a      	ldrb	r2, [r7, #1]
1000d474:	b2d2      	uxtb	r2, r2
1000d476:	485f      	ldr	r0, [pc, #380]	; (1000d5f4 <main+0x304>)
1000d478:	4b4f      	ldr	r3, [pc, #316]	; (1000d5b8 <main+0x2c8>)
1000d47a:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000d47c:	2101      	movs	r1, #1
1000d47e:	200f      	movs	r0, #15
1000d480:	4b52      	ldr	r3, [pc, #328]	; (1000d5cc <main+0x2dc>)
1000d482:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000d484:	787b      	ldrb	r3, [r7, #1]
1000d486:	2b00      	cmp	r3, #0
1000d488:	d103      	bne.n	1000d492 <main+0x1a2>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000d48a:	2002      	movs	r0, #2
1000d48c:	4b5a      	ldr	r3, [pc, #360]	; (1000d5f8 <main+0x308>)
1000d48e:	4798      	blx	r3
1000d490:	e002      	b.n	1000d498 <main+0x1a8>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000d492:	485a      	ldr	r0, [pc, #360]	; (1000d5fc <main+0x30c>)
1000d494:	4b48      	ldr	r3, [pc, #288]	; (1000d5b8 <main+0x2c8>)
1000d496:	4798      	blx	r3
				}
				mpu_device.rts = false;
1000d498:	2100      	movs	r1, #0
1000d49a:	234a      	movs	r3, #74	; 0x4a
1000d49c:	4a49      	ldr	r2, [pc, #292]	; (1000d5c4 <main+0x2d4>)
1000d49e:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000d4a0:	200f      	movs	r0, #15
1000d4a2:	4b4a      	ldr	r3, [pc, #296]	; (1000d5cc <main+0x2dc>)
1000d4a4:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000d4a6:	232a      	movs	r3, #42	; 0x2a
1000d4a8:	4a4a      	ldr	r2, [pc, #296]	; (1000d5d4 <main+0x2e4>)
1000d4aa:	5cd3      	ldrb	r3, [r2, r3]
1000d4ac:	2b00      	cmp	r3, #0
1000d4ae:	d100      	bne.n	1000d4b2 <main+0x1c2>
1000d4b0:	e763      	b.n	1000d37a <main+0x8a>
				DBG_LOG("Press sending (%d/%d)... ", mpu_device.new_int, ble_instance.sending_queue);
1000d4b2:	483d      	ldr	r0, [pc, #244]	; (1000d5a8 <main+0x2b8>)
1000d4b4:	4b3e      	ldr	r3, [pc, #248]	; (1000d5b0 <main+0x2c0>)
1000d4b6:	4798      	blx	r3
1000d4b8:	2345      	movs	r3, #69	; 0x45
1000d4ba:	4a42      	ldr	r2, [pc, #264]	; (1000d5c4 <main+0x2d4>)
1000d4bc:	5cd1      	ldrb	r1, [r2, r3]
1000d4be:	b2c9      	uxtb	r1, r1
1000d4c0:	4f1a      	ldr	r7, [pc, #104]	; (1000d52c <main+0x23c>)
1000d4c2:	787a      	ldrb	r2, [r7, #1]
1000d4c4:	b2d2      	uxtb	r2, r2
1000d4c6:	484e      	ldr	r0, [pc, #312]	; (1000d600 <main+0x310>)
1000d4c8:	4b3b      	ldr	r3, [pc, #236]	; (1000d5b8 <main+0x2c8>)
1000d4ca:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000d4cc:	2101      	movs	r1, #1
1000d4ce:	200f      	movs	r0, #15
1000d4d0:	4b3e      	ldr	r3, [pc, #248]	; (1000d5cc <main+0x2dc>)
1000d4d2:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000d4d4:	787b      	ldrb	r3, [r7, #1]
1000d4d6:	2b00      	cmp	r3, #0
1000d4d8:	d103      	bne.n	1000d4e2 <main+0x1f2>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000d4da:	2001      	movs	r0, #1
1000d4dc:	4b46      	ldr	r3, [pc, #280]	; (1000d5f8 <main+0x308>)
1000d4de:	4798      	blx	r3
1000d4e0:	e002      	b.n	1000d4e8 <main+0x1f8>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000d4e2:	4846      	ldr	r0, [pc, #280]	; (1000d5fc <main+0x30c>)
1000d4e4:	4b34      	ldr	r3, [pc, #208]	; (1000d5b8 <main+0x2c8>)
1000d4e6:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000d4e8:	2100      	movs	r1, #0
1000d4ea:	232a      	movs	r3, #42	; 0x2a
1000d4ec:	4a39      	ldr	r2, [pc, #228]	; (1000d5d4 <main+0x2e4>)
1000d4ee:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000d4f0:	200f      	movs	r0, #15
1000d4f2:	4b36      	ldr	r3, [pc, #216]	; (1000d5cc <main+0x2dc>)
1000d4f4:	4798      	blx	r3
1000d4f6:	e740      	b.n	1000d37a <main+0x8a>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000d4f8:	2845      	cmp	r0, #69	; 0x45
1000d4fa:	d106      	bne.n	1000d50a <main+0x21a>
			DBG_LOG("GAP timeout");
1000d4fc:	482a      	ldr	r0, [pc, #168]	; (1000d5a8 <main+0x2b8>)
1000d4fe:	4b2c      	ldr	r3, [pc, #176]	; (1000d5b0 <main+0x2c0>)
1000d500:	4798      	blx	r3
1000d502:	4840      	ldr	r0, [pc, #256]	; (1000d604 <main+0x314>)
1000d504:	4b2c      	ldr	r3, [pc, #176]	; (1000d5b8 <main+0x2c8>)
1000d506:	4798      	blx	r3
1000d508:	e737      	b.n	1000d37a <main+0x8a>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000d50a:	28d0      	cmp	r0, #208	; 0xd0
1000d50c:	d106      	bne.n	1000d51c <main+0x22c>
			DBG_LOG("Event get timeout");
1000d50e:	4826      	ldr	r0, [pc, #152]	; (1000d5a8 <main+0x2b8>)
1000d510:	4b27      	ldr	r3, [pc, #156]	; (1000d5b0 <main+0x2c0>)
1000d512:	4798      	blx	r3
1000d514:	483c      	ldr	r0, [pc, #240]	; (1000d608 <main+0x318>)
1000d516:	4b28      	ldr	r3, [pc, #160]	; (1000d5b8 <main+0x2c8>)
1000d518:	4798      	blx	r3
1000d51a:	e72e      	b.n	1000d37a <main+0x8a>
		}
		else {
			DBG_LOG("BLE error occurred");
1000d51c:	0028      	movs	r0, r5
1000d51e:	4b24      	ldr	r3, [pc, #144]	; (1000d5b0 <main+0x2c0>)
1000d520:	4798      	blx	r3
1000d522:	483a      	ldr	r0, [pc, #232]	; (1000d60c <main+0x31c>)
1000d524:	4b24      	ldr	r3, [pc, #144]	; (1000d5b8 <main+0x2c8>)
1000d526:	4798      	blx	r3
1000d528:	e727      	b.n	1000d37a <main+0x8a>
1000d52a:	46c0      	nop			; (mov r8, r8)
1000d52c:	100159bc 	.word	0x100159bc
1000d530:	1000cb19 	.word	0x1000cb19
1000d534:	1000a445 	.word	0x1000a445
1000d538:	1000c80d 	.word	0x1000c80d
1000d53c:	1000d06d 	.word	0x1000d06d
1000d540:	1000d2a5 	.word	0x1000d2a5
1000d544:	10009405 	.word	0x10009405
1000d548:	100080e9 	.word	0x100080e9
1000d54c:	10008a1d 	.word	0x10008a1d
1000d550:	10008f1d 	.word	0x10008f1d
1000d554:	10008da9 	.word	0x10008da9
1000d558:	100092b9 	.word	0x100092b9
1000d55c:	10008e45 	.word	0x10008e45
1000d560:	10008d09 	.word	0x10008d09
1000d564:	1000bf95 	.word	0x1000bf95
1000d568:	10008cb9 	.word	0x10008cb9
1000d56c:	100091a5 	.word	0x100091a5
1000d570:	10008ead 	.word	0x10008ead
1000d574:	1000d259 	.word	0x1000d259
1000d578:	1000d0b1 	.word	0x1000d0b1
1000d57c:	100094c5 	.word	0x100094c5
1000d580:	10009441 	.word	0x10009441
1000d584:	100094e5 	.word	0x100094e5
1000d588:	10008ac5 	.word	0x10008ac5
1000d58c:	10008e91 	.word	0x10008e91
1000d590:	10012e70 	.word	0x10012e70
1000d594:	1000bec5 	.word	0x1000bec5
1000d598:	10012ebc 	.word	0x10012ebc
1000d59c:	10008c71 	.word	0x10008c71
1000d5a0:	100159b4 	.word	0x100159b4
1000d5a4:	1000c6a1 	.word	0x1000c6a1
1000d5a8:	10012d7c 	.word	0x10012d7c
1000d5ac:	100159d8 	.word	0x100159d8
1000d5b0:	10011e31 	.word	0x10011e31
1000d5b4:	10013be0 	.word	0x10013be0
1000d5b8:	10011d11 	.word	0x10011d11
1000d5bc:	10008b19 	.word	0x10008b19
1000d5c0:	10013bf0 	.word	0x10013bf0
1000d5c4:	1001590c 	.word	0x1001590c
1000d5c8:	10013c00 	.word	0x10013c00
1000d5cc:	1000a105 	.word	0x1000a105
1000d5d0:	10008ea9 	.word	0x10008ea9
1000d5d4:	10015a60 	.word	0x10015a60
1000d5d8:	10015a4c 	.word	0x10015a4c
1000d5dc:	10013c14 	.word	0x10013c14
1000d5e0:	100094b9 	.word	0x100094b9
1000d5e4:	10009505 	.word	0x10009505
1000d5e8:	10015af8 	.word	0x10015af8
1000d5ec:	10013c24 	.word	0x10013c24
1000d5f0:	10009729 	.word	0x10009729
1000d5f4:	10013c34 	.word	0x10013c34
1000d5f8:	100086d1 	.word	0x100086d1
1000d5fc:	10013c4c 	.word	0x10013c4c
1000d600:	10013c58 	.word	0x10013c58
1000d604:	10013c74 	.word	0x10013c74
1000d608:	10013c80 	.word	0x10013c80
1000d60c:	10013c94 	.word	0x10013c94

1000d610 <internal_event_post>:
1000d610:	b570      	push	{r4, r5, r6, lr}
1000d612:	4d12      	ldr	r5, [pc, #72]	; (1000d65c <internal_event_post+0x4c>)
1000d614:	682c      	ldr	r4, [r5, #0]
1000d616:	2c00      	cmp	r4, #0
1000d618:	d014      	beq.n	1000d644 <internal_event_post+0x34>
1000d61a:	6826      	ldr	r6, [r4, #0]
1000d61c:	60e2      	str	r2, [r4, #12]
1000d61e:	602e      	str	r6, [r5, #0]
1000d620:	2500      	movs	r5, #0
1000d622:	4a0f      	ldr	r2, [pc, #60]	; (1000d660 <internal_event_post+0x50>)
1000d624:	8123      	strh	r3, [r4, #8]
1000d626:	6813      	ldr	r3, [r2, #0]
1000d628:	6025      	str	r5, [r4, #0]
1000d62a:	80a0      	strh	r0, [r4, #4]
1000d62c:	80e1      	strh	r1, [r4, #6]
1000d62e:	42ab      	cmp	r3, r5
1000d630:	d101      	bne.n	1000d636 <internal_event_post+0x26>
1000d632:	6014      	str	r4, [r2, #0]
1000d634:	e011      	b.n	1000d65a <internal_event_post+0x4a>
1000d636:	681a      	ldr	r2, [r3, #0]
1000d638:	2a00      	cmp	r2, #0
1000d63a:	d001      	beq.n	1000d640 <internal_event_post+0x30>
1000d63c:	1c13      	adds	r3, r2, #0
1000d63e:	e7fa      	b.n	1000d636 <internal_event_post+0x26>
1000d640:	601c      	str	r4, [r3, #0]
1000d642:	e00a      	b.n	1000d65a <internal_event_post+0x4a>
1000d644:	b2c4      	uxtb	r4, r0
1000d646:	2c00      	cmp	r4, #0
1000d648:	d107      	bne.n	1000d65a <internal_event_post+0x4a>
1000d64a:	4c06      	ldr	r4, [pc, #24]	; (1000d664 <internal_event_post+0x54>)
1000d64c:	60e2      	str	r2, [r4, #12]
1000d64e:	2201      	movs	r2, #1
1000d650:	8123      	strh	r3, [r4, #8]
1000d652:	4b05      	ldr	r3, [pc, #20]	; (1000d668 <internal_event_post+0x58>)
1000d654:	80a0      	strh	r0, [r4, #4]
1000d656:	80e1      	strh	r1, [r4, #6]
1000d658:	701a      	strb	r2, [r3, #0]
1000d65a:	bd70      	pop	{r4, r5, r6, pc}
1000d65c:	10015850 	.word	0x10015850
1000d660:	1001584c 	.word	0x1001584c
1000d664:	10015838 	.word	0x10015838
1000d668:	10015848 	.word	0x10015848

1000d66c <internal_event_init>:
1000d66c:	b510      	push	{r4, lr}
1000d66e:	4b08      	ldr	r3, [pc, #32]	; (1000d690 <internal_event_init+0x24>)
1000d670:	0900      	lsrs	r0, r0, #4
1000d672:	0100      	lsls	r0, r0, #4
1000d674:	681a      	ldr	r2, [r3, #0]
1000d676:	1808      	adds	r0, r1, r0
1000d678:	4281      	cmp	r1, r0
1000d67a:	d003      	beq.n	1000d684 <internal_event_init+0x18>
1000d67c:	600a      	str	r2, [r1, #0]
1000d67e:	1c0a      	adds	r2, r1, #0
1000d680:	3110      	adds	r1, #16
1000d682:	e7f9      	b.n	1000d678 <internal_event_init+0xc>
1000d684:	601a      	str	r2, [r3, #0]
1000d686:	2200      	movs	r2, #0
1000d688:	4b02      	ldr	r3, [pc, #8]	; (1000d694 <internal_event_init+0x28>)
1000d68a:	601a      	str	r2, [r3, #0]
1000d68c:	bd10      	pop	{r4, pc}
1000d68e:	46c0      	nop			; (mov r8, r8)
1000d690:	10015850 	.word	0x10015850
1000d694:	1001584c 	.word	0x1001584c

1000d698 <special_events_handler>:
1000d698:	b538      	push	{r3, r4, r5, lr}
1000d69a:	4c1b      	ldr	r4, [pc, #108]	; (1000d708 <special_events_handler+0x70>)
1000d69c:	1c03      	adds	r3, r0, #0
1000d69e:	8825      	ldrh	r5, [r4, #0]
1000d6a0:	1c08      	adds	r0, r1, #0
1000d6a2:	1c21      	adds	r1, r4, #0
1000d6a4:	429d      	cmp	r5, r3
1000d6a6:	d107      	bne.n	1000d6b8 <special_events_handler+0x20>
1000d6a8:	88a5      	ldrh	r5, [r4, #4]
1000d6aa:	4285      	cmp	r5, r0
1000d6ac:	d104      	bne.n	1000d6b8 <special_events_handler+0x20>
1000d6ae:	2301      	movs	r3, #1
1000d6b0:	425b      	negs	r3, r3
1000d6b2:	8023      	strh	r3, [r4, #0]
1000d6b4:	60a2      	str	r2, [r4, #8]
1000d6b6:	e009      	b.n	1000d6cc <special_events_handler+0x34>
1000d6b8:	884c      	ldrh	r4, [r1, #2]
1000d6ba:	429c      	cmp	r4, r3
1000d6bc:	d10a      	bne.n	1000d6d4 <special_events_handler+0x3c>
1000d6be:	888c      	ldrh	r4, [r1, #4]
1000d6c0:	4284      	cmp	r4, r0
1000d6c2:	d107      	bne.n	1000d6d4 <special_events_handler+0x3c>
1000d6c4:	2301      	movs	r3, #1
1000d6c6:	425b      	negs	r3, r3
1000d6c8:	804b      	strh	r3, [r1, #2]
1000d6ca:	608a      	str	r2, [r1, #8]
1000d6cc:	4b0f      	ldr	r3, [pc, #60]	; (1000d70c <special_events_handler+0x74>)
1000d6ce:	4798      	blx	r3
1000d6d0:	2001      	movs	r0, #1
1000d6d2:	e017      	b.n	1000d704 <special_events_handler+0x6c>
1000d6d4:	490e      	ldr	r1, [pc, #56]	; (1000d710 <special_events_handler+0x78>)
1000d6d6:	428b      	cmp	r3, r1
1000d6d8:	d00e      	beq.n	1000d6f8 <special_events_handler+0x60>
1000d6da:	490e      	ldr	r1, [pc, #56]	; (1000d714 <special_events_handler+0x7c>)
1000d6dc:	428b      	cmp	r3, r1
1000d6de:	d007      	beq.n	1000d6f0 <special_events_handler+0x58>
1000d6e0:	490d      	ldr	r1, [pc, #52]	; (1000d718 <special_events_handler+0x80>)
1000d6e2:	2000      	movs	r0, #0
1000d6e4:	428b      	cmp	r3, r1
1000d6e6:	d10d      	bne.n	1000d704 <special_events_handler+0x6c>
1000d6e8:	1c10      	adds	r0, r2, #0
1000d6ea:	4b0c      	ldr	r3, [pc, #48]	; (1000d71c <special_events_handler+0x84>)
1000d6ec:	4798      	blx	r3
1000d6ee:	e7ef      	b.n	1000d6d0 <special_events_handler+0x38>
1000d6f0:	1c11      	adds	r1, r2, #0
1000d6f2:	4b0b      	ldr	r3, [pc, #44]	; (1000d720 <special_events_handler+0x88>)
1000d6f4:	2200      	movs	r2, #0
1000d6f6:	e002      	b.n	1000d6fe <special_events_handler+0x66>
1000d6f8:	1c11      	adds	r1, r2, #0
1000d6fa:	2200      	movs	r2, #0
1000d6fc:	4b09      	ldr	r3, [pc, #36]	; (1000d724 <special_events_handler+0x8c>)
1000d6fe:	4798      	blx	r3
1000d700:	4243      	negs	r3, r0
1000d702:	4158      	adcs	r0, r3
1000d704:	bd38      	pop	{r3, r4, r5, pc}
1000d706:	46c0      	nop			; (mov r8, r8)
1000d708:	100167c0 	.word	0x100167c0
1000d70c:	1000f0f5 	.word	0x1000f0f5
1000d710:	00000e13 	.word	0x00000e13
1000d714:	00000e15 	.word	0x00000e15
1000d718:	00000e01 	.word	0x00000e01
1000d71c:	1000f465 	.word	0x1000f465
1000d720:	1000f625 	.word	0x1000f625
1000d724:	1000f6fd 	.word	0x1000f6fd

1000d728 <at_ble_event_get>:
1000d728:	2300      	movs	r3, #0
1000d72a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d72c:	b087      	sub	sp, #28
1000d72e:	9204      	str	r2, [sp, #16]
1000d730:	7003      	strb	r3, [r0, #0]
1000d732:	9b04      	ldr	r3, [sp, #16]
1000d734:	9003      	str	r0, [sp, #12]
1000d736:	3b01      	subs	r3, #1
1000d738:	1c0d      	adds	r5, r1, #0
1000d73a:	9305      	str	r3, [sp, #20]
1000d73c:	3303      	adds	r3, #3
1000d73e:	d802      	bhi.n	1000d746 <at_ble_event_get+0x1e>
1000d740:	9804      	ldr	r0, [sp, #16]
1000d742:	4bae      	ldr	r3, [pc, #696]	; (1000d9fc <at_ble_event_get+0x2d4>)
1000d744:	4798      	blx	r3
1000d746:	9b05      	ldr	r3, [sp, #20]
1000d748:	4cad      	ldr	r4, [pc, #692]	; (1000da00 <at_ble_event_get+0x2d8>)
1000d74a:	3303      	adds	r3, #3
1000d74c:	d902      	bls.n	1000d754 <at_ble_event_get+0x2c>
1000d74e:	2300      	movs	r3, #0
1000d750:	9302      	str	r3, [sp, #8]
1000d752:	e015      	b.n	1000d780 <at_ble_event_get+0x58>
1000d754:	2300      	movs	r3, #0
1000d756:	9302      	str	r3, [sp, #8]
1000d758:	6823      	ldr	r3, [r4, #0]
1000d75a:	2b00      	cmp	r3, #0
1000d75c:	d113      	bne.n	1000d786 <at_ble_event_get+0x5e>
1000d75e:	9b02      	ldr	r3, [sp, #8]
1000d760:	2bd0      	cmp	r3, #208	; 0xd0
1000d762:	d100      	bne.n	1000d766 <at_ble_event_get+0x3e>
1000d764:	e2da      	b.n	1000dd1c <at_ble_event_get+0x5f4>
1000d766:	9804      	ldr	r0, [sp, #16]
1000d768:	4ba6      	ldr	r3, [pc, #664]	; (1000da04 <at_ble_event_get+0x2dc>)
1000d76a:	4798      	blx	r3
1000d76c:	9002      	str	r0, [sp, #8]
1000d76e:	2802      	cmp	r0, #2
1000d770:	d1f2      	bne.n	1000d758 <at_ble_event_get+0x30>
1000d772:	e03f      	b.n	1000d7f4 <at_ble_event_get+0xcc>
1000d774:	9804      	ldr	r0, [sp, #16]
1000d776:	4ba3      	ldr	r3, [pc, #652]	; (1000da04 <at_ble_event_get+0x2dc>)
1000d778:	4798      	blx	r3
1000d77a:	9002      	str	r0, [sp, #8]
1000d77c:	2802      	cmp	r0, #2
1000d77e:	d039      	beq.n	1000d7f4 <at_ble_event_get+0xcc>
1000d780:	6823      	ldr	r3, [r4, #0]
1000d782:	2b00      	cmp	r3, #0
1000d784:	d0f6      	beq.n	1000d774 <at_ble_event_get+0x4c>
1000d786:	9b02      	ldr	r3, [sp, #8]
1000d788:	2bd0      	cmp	r3, #208	; 0xd0
1000d78a:	d100      	bne.n	1000d78e <at_ble_event_get+0x66>
1000d78c:	e2c6      	b.n	1000dd1c <at_ble_event_get+0x5f4>
1000d78e:	9b02      	ldr	r3, [sp, #8]
1000d790:	3b03      	subs	r3, #3
1000d792:	1e5a      	subs	r2, r3, #1
1000d794:	4193      	sbcs	r3, r2
1000d796:	9a02      	ldr	r2, [sp, #8]
1000d798:	425b      	negs	r3, r3
1000d79a:	401a      	ands	r2, r3
1000d79c:	6823      	ldr	r3, [r4, #0]
1000d79e:	9202      	str	r2, [sp, #8]
1000d7a0:	2b00      	cmp	r3, #0
1000d7a2:	d100      	bne.n	1000d7a6 <at_ble_event_get+0x7e>
1000d7a4:	e2c2      	b.n	1000dd2c <at_ble_event_get+0x604>
1000d7a6:	681a      	ldr	r2, [r3, #0]
1000d7a8:	68de      	ldr	r6, [r3, #12]
1000d7aa:	6022      	str	r2, [r4, #0]
1000d7ac:	88da      	ldrh	r2, [r3, #6]
1000d7ae:	9201      	str	r2, [sp, #4]
1000d7b0:	4a95      	ldr	r2, [pc, #596]	; (1000da08 <at_ble_event_get+0x2e0>)
1000d7b2:	889c      	ldrh	r4, [r3, #4]
1000d7b4:	6811      	ldr	r1, [r2, #0]
1000d7b6:	6013      	str	r3, [r2, #0]
1000d7b8:	6019      	str	r1, [r3, #0]
1000d7ba:	4b94      	ldr	r3, [pc, #592]	; (1000da0c <at_ble_event_get+0x2e4>)
1000d7bc:	781b      	ldrb	r3, [r3, #0]
1000d7be:	2b01      	cmp	r3, #1
1000d7c0:	d10f      	bne.n	1000d7e2 <at_ble_event_get+0xba>
1000d7c2:	4b93      	ldr	r3, [pc, #588]	; (1000da10 <at_ble_event_get+0x2e8>)
1000d7c4:	4a92      	ldr	r2, [pc, #584]	; (1000da10 <at_ble_event_get+0x2e8>)
1000d7c6:	8898      	ldrh	r0, [r3, #4]
1000d7c8:	88d9      	ldrh	r1, [r3, #6]
1000d7ca:	68d2      	ldr	r2, [r2, #12]
1000d7cc:	891b      	ldrh	r3, [r3, #8]
1000d7ce:	4f91      	ldr	r7, [pc, #580]	; (1000da14 <at_ble_event_get+0x2ec>)
1000d7d0:	47b8      	blx	r7
1000d7d2:	2210      	movs	r2, #16
1000d7d4:	4b90      	ldr	r3, [pc, #576]	; (1000da18 <at_ble_event_get+0x2f0>)
1000d7d6:	488e      	ldr	r0, [pc, #568]	; (1000da10 <at_ble_event_get+0x2e8>)
1000d7d8:	2100      	movs	r1, #0
1000d7da:	4798      	blx	r3
1000d7dc:	2300      	movs	r3, #0
1000d7de:	4a8b      	ldr	r2, [pc, #556]	; (1000da0c <at_ble_event_get+0x2e4>)
1000d7e0:	7013      	strb	r3, [r2, #0]
1000d7e2:	9b02      	ldr	r3, [sp, #8]
1000d7e4:	2b00      	cmp	r3, #0
1000d7e6:	d114      	bne.n	1000d812 <at_ble_event_get+0xea>
1000d7e8:	4b8c      	ldr	r3, [pc, #560]	; (1000da1c <at_ble_event_get+0x2f4>)
1000d7ea:	429c      	cmp	r4, r3
1000d7ec:	d009      	beq.n	1000d802 <at_ble_event_get+0xda>
1000d7ee:	4b8c      	ldr	r3, [pc, #560]	; (1000da20 <at_ble_event_get+0x2f8>)
1000d7f0:	429c      	cmp	r4, r3
1000d7f2:	d127      	bne.n	1000d844 <at_ble_event_get+0x11c>
1000d7f4:	233a      	movs	r3, #58	; 0x3a
1000d7f6:	9a03      	ldr	r2, [sp, #12]
1000d7f8:	7013      	strb	r3, [r2, #0]
1000d7fa:	2300      	movs	r3, #0
1000d7fc:	9302      	str	r3, [sp, #8]
1000d7fe:	1c1d      	adds	r5, r3, #0
1000d800:	e007      	b.n	1000d812 <at_ble_event_get+0xea>
1000d802:	9b01      	ldr	r3, [sp, #4]
1000d804:	42a3      	cmp	r3, r4
1000d806:	d000      	beq.n	1000d80a <at_ble_event_get+0xe2>
1000d808:	e28a      	b.n	1000dd20 <at_ble_event_get+0x5f8>
1000d80a:	2338      	movs	r3, #56	; 0x38
1000d80c:	9a03      	ldr	r2, [sp, #12]
1000d80e:	7013      	strb	r3, [r2, #0]
1000d810:	602e      	str	r6, [r5, #0]
1000d812:	9b03      	ldr	r3, [sp, #12]
1000d814:	781b      	ldrb	r3, [r3, #0]
1000d816:	2b3b      	cmp	r3, #59	; 0x3b
1000d818:	d101      	bne.n	1000d81e <at_ble_event_get+0xf6>
1000d81a:	4b82      	ldr	r3, [pc, #520]	; (1000da24 <at_ble_event_get+0x2fc>)
1000d81c:	4798      	blx	r3
1000d81e:	9b03      	ldr	r3, [sp, #12]
1000d820:	781b      	ldrb	r3, [r3, #0]
1000d822:	2b3b      	cmp	r3, #59	; 0x3b
1000d824:	d003      	beq.n	1000d82e <at_ble_event_get+0x106>
1000d826:	9b05      	ldr	r3, [sp, #20]
1000d828:	3303      	adds	r3, #3
1000d82a:	d904      	bls.n	1000d836 <at_ble_event_get+0x10e>
1000d82c:	e283      	b.n	1000dd36 <at_ble_event_get+0x60e>
1000d82e:	9b02      	ldr	r3, [sp, #8]
1000d830:	2b00      	cmp	r3, #0
1000d832:	d088      	beq.n	1000d746 <at_ble_event_get+0x1e>
1000d834:	e7f7      	b.n	1000d826 <at_ble_event_get+0xfe>
1000d836:	9b02      	ldr	r3, [sp, #8]
1000d838:	2bd0      	cmp	r3, #208	; 0xd0
1000d83a:	d100      	bne.n	1000d83e <at_ble_event_get+0x116>
1000d83c:	e27b      	b.n	1000dd36 <at_ble_event_get+0x60e>
1000d83e:	4b7a      	ldr	r3, [pc, #488]	; (1000da28 <at_ble_event_get+0x300>)
1000d840:	4798      	blx	r3
1000d842:	e278      	b.n	1000dd36 <at_ble_event_get+0x60e>
1000d844:	9b01      	ldr	r3, [sp, #4]
1000d846:	2bbb      	cmp	r3, #187	; 0xbb
1000d848:	d125      	bne.n	1000d896 <at_ble_event_get+0x16e>
1000d84a:	2cbb      	cmp	r4, #187	; 0xbb
1000d84c:	d123      	bne.n	1000d896 <at_ble_event_get+0x16e>
1000d84e:	466b      	mov	r3, sp
1000d850:	891b      	ldrh	r3, [r3, #8]
1000d852:	80ab      	strh	r3, [r5, #4]
1000d854:	78b3      	ldrb	r3, [r6, #2]
1000d856:	7872      	ldrb	r2, [r6, #1]
1000d858:	78f0      	ldrb	r0, [r6, #3]
1000d85a:	021b      	lsls	r3, r3, #8
1000d85c:	4313      	orrs	r3, r2
1000d85e:	7971      	ldrb	r1, [r6, #5]
1000d860:	7932      	ldrb	r2, [r6, #4]
1000d862:	70a8      	strb	r0, [r5, #2]
1000d864:	4871      	ldr	r0, [pc, #452]	; (1000da2c <at_ble_event_get+0x304>)
1000d866:	802b      	strh	r3, [r5, #0]
1000d868:	4283      	cmp	r3, r0
1000d86a:	d806      	bhi.n	1000d87a <at_ble_event_get+0x152>
1000d86c:	4a70      	ldr	r2, [pc, #448]	; (1000da30 <at_ble_event_get+0x308>)
1000d86e:	4293      	cmp	r3, r2
1000d870:	d20b      	bcs.n	1000d88a <at_ble_event_get+0x162>
1000d872:	4a70      	ldr	r2, [pc, #448]	; (1000da34 <at_ble_event_get+0x30c>)
1000d874:	4293      	cmp	r3, r2
1000d876:	d008      	beq.n	1000d88a <at_ble_event_get+0x162>
1000d878:	e009      	b.n	1000d88e <at_ble_event_get+0x166>
1000d87a:	486f      	ldr	r0, [pc, #444]	; (1000da38 <at_ble_event_get+0x310>)
1000d87c:	4283      	cmp	r3, r0
1000d87e:	d106      	bne.n	1000d88e <at_ble_event_get+0x166>
1000d880:	020b      	lsls	r3, r1, #8
1000d882:	4313      	orrs	r3, r2
1000d884:	80ab      	strh	r3, [r5, #4]
1000d886:	2337      	movs	r3, #55	; 0x37
1000d888:	e002      	b.n	1000d890 <at_ble_event_get+0x168>
1000d88a:	2336      	movs	r3, #54	; 0x36
1000d88c:	e000      	b.n	1000d890 <at_ble_event_get+0x168>
1000d88e:	2300      	movs	r3, #0
1000d890:	9a03      	ldr	r2, [sp, #12]
1000d892:	7013      	strb	r3, [r2, #0]
1000d894:	e7bd      	b.n	1000d812 <at_ble_event_get+0xea>
1000d896:	4b69      	ldr	r3, [pc, #420]	; (1000da3c <at_ble_event_get+0x314>)
1000d898:	429c      	cmp	r4, r3
1000d89a:	d100      	bne.n	1000d89e <at_ble_event_get+0x176>
1000d89c:	e144      	b.n	1000db28 <at_ble_event_get+0x400>
1000d89e:	d865      	bhi.n	1000d96c <at_ble_event_get+0x244>
1000d8a0:	4b67      	ldr	r3, [pc, #412]	; (1000da40 <at_ble_event_get+0x318>)
1000d8a2:	429c      	cmp	r4, r3
1000d8a4:	d100      	bne.n	1000d8a8 <at_ble_event_get+0x180>
1000d8a6:	e1d5      	b.n	1000dc54 <at_ble_event_get+0x52c>
1000d8a8:	d82f      	bhi.n	1000d90a <at_ble_event_get+0x1e2>
1000d8aa:	4b66      	ldr	r3, [pc, #408]	; (1000da44 <at_ble_event_get+0x31c>)
1000d8ac:	429c      	cmp	r4, r3
1000d8ae:	d100      	bne.n	1000d8b2 <at_ble_event_get+0x18a>
1000d8b0:	e1e0      	b.n	1000dc74 <at_ble_event_get+0x54c>
1000d8b2:	d813      	bhi.n	1000d8dc <at_ble_event_get+0x1b4>
1000d8b4:	4b64      	ldr	r3, [pc, #400]	; (1000da48 <at_ble_event_get+0x320>)
1000d8b6:	429c      	cmp	r4, r3
1000d8b8:	d100      	bne.n	1000d8bc <at_ble_event_get+0x194>
1000d8ba:	e1a3      	b.n	1000dc04 <at_ble_event_get+0x4dc>
1000d8bc:	d804      	bhi.n	1000d8c8 <at_ble_event_get+0x1a0>
1000d8be:	2638      	movs	r6, #56	; 0x38
1000d8c0:	42b4      	cmp	r4, r6
1000d8c2:	d100      	bne.n	1000d8c6 <at_ble_event_get+0x19e>
1000d8c4:	e225      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000d8c6:	e117      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d8c8:	4b60      	ldr	r3, [pc, #384]	; (1000da4c <at_ble_event_get+0x324>)
1000d8ca:	429c      	cmp	r4, r3
1000d8cc:	d100      	bne.n	1000d8d0 <at_ble_event_get+0x1a8>
1000d8ce:	e19f      	b.n	1000dc10 <at_ble_event_get+0x4e8>
1000d8d0:	33fe      	adds	r3, #254	; 0xfe
1000d8d2:	33ff      	adds	r3, #255	; 0xff
1000d8d4:	429c      	cmp	r4, r3
1000d8d6:	d100      	bne.n	1000d8da <at_ble_event_get+0x1b2>
1000d8d8:	e1d3      	b.n	1000dc82 <at_ble_event_get+0x55a>
1000d8da:	e10d      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d8dc:	4b5c      	ldr	r3, [pc, #368]	; (1000da50 <at_ble_event_get+0x328>)
1000d8de:	429c      	cmp	r4, r3
1000d8e0:	d100      	bne.n	1000d8e4 <at_ble_event_get+0x1bc>
1000d8e2:	e1a9      	b.n	1000dc38 <at_ble_event_get+0x510>
1000d8e4:	d808      	bhi.n	1000d8f8 <at_ble_event_get+0x1d0>
1000d8e6:	4b5b      	ldr	r3, [pc, #364]	; (1000da54 <at_ble_event_get+0x32c>)
1000d8e8:	429c      	cmp	r4, r3
1000d8ea:	d100      	bne.n	1000d8ee <at_ble_event_get+0x1c6>
1000d8ec:	e196      	b.n	1000dc1c <at_ble_event_get+0x4f4>
1000d8ee:	4b5a      	ldr	r3, [pc, #360]	; (1000da58 <at_ble_event_get+0x330>)
1000d8f0:	429c      	cmp	r4, r3
1000d8f2:	d100      	bne.n	1000d8f6 <at_ble_event_get+0x1ce>
1000d8f4:	e199      	b.n	1000dc2a <at_ble_event_get+0x502>
1000d8f6:	e0ff      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d8f8:	4b58      	ldr	r3, [pc, #352]	; (1000da5c <at_ble_event_get+0x334>)
1000d8fa:	429c      	cmp	r4, r3
1000d8fc:	d100      	bne.n	1000d900 <at_ble_event_get+0x1d8>
1000d8fe:	e1a2      	b.n	1000dc46 <at_ble_event_get+0x51e>
1000d900:	4b57      	ldr	r3, [pc, #348]	; (1000da60 <at_ble_event_get+0x338>)
1000d902:	429c      	cmp	r4, r3
1000d904:	d100      	bne.n	1000d908 <at_ble_event_get+0x1e0>
1000d906:	e1d4      	b.n	1000dcb2 <at_ble_event_get+0x58a>
1000d908:	e0f6      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d90a:	4b56      	ldr	r3, [pc, #344]	; (1000da64 <at_ble_event_get+0x33c>)
1000d90c:	429c      	cmp	r4, r3
1000d90e:	d100      	bne.n	1000d912 <at_ble_event_get+0x1ea>
1000d910:	e1c8      	b.n	1000dca4 <at_ble_event_get+0x57c>
1000d912:	d812      	bhi.n	1000d93a <at_ble_event_get+0x212>
1000d914:	4b54      	ldr	r3, [pc, #336]	; (1000da68 <at_ble_event_get+0x340>)
1000d916:	429c      	cmp	r4, r3
1000d918:	d100      	bne.n	1000d91c <at_ble_event_get+0x1f4>
1000d91a:	e1d1      	b.n	1000dcc0 <at_ble_event_get+0x598>
1000d91c:	d804      	bhi.n	1000d928 <at_ble_event_get+0x200>
1000d91e:	4b53      	ldr	r3, [pc, #332]	; (1000da6c <at_ble_event_get+0x344>)
1000d920:	429c      	cmp	r4, r3
1000d922:	d100      	bne.n	1000d926 <at_ble_event_get+0x1fe>
1000d924:	e19b      	b.n	1000dc5e <at_ble_event_get+0x536>
1000d926:	e0e7      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d928:	4b51      	ldr	r3, [pc, #324]	; (1000da70 <at_ble_event_get+0x348>)
1000d92a:	429c      	cmp	r4, r3
1000d92c:	d100      	bne.n	1000d930 <at_ble_event_get+0x208>
1000d92e:	e1ad      	b.n	1000dc8c <at_ble_event_get+0x564>
1000d930:	4b50      	ldr	r3, [pc, #320]	; (1000da74 <at_ble_event_get+0x34c>)
1000d932:	429c      	cmp	r4, r3
1000d934:	d100      	bne.n	1000d938 <at_ble_event_get+0x210>
1000d936:	e1b0      	b.n	1000dc9a <at_ble_event_get+0x572>
1000d938:	e0de      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d93a:	4b4f      	ldr	r3, [pc, #316]	; (1000da78 <at_ble_event_get+0x350>)
1000d93c:	429c      	cmp	r4, r3
1000d93e:	d100      	bne.n	1000d942 <at_ble_event_get+0x21a>
1000d940:	e0e0      	b.n	1000db04 <at_ble_event_get+0x3dc>
1000d942:	d809      	bhi.n	1000d958 <at_ble_event_get+0x230>
1000d944:	3b08      	subs	r3, #8
1000d946:	429c      	cmp	r4, r3
1000d948:	d100      	bne.n	1000d94c <at_ble_event_get+0x224>
1000d94a:	e0d7      	b.n	1000dafc <at_ble_event_get+0x3d4>
1000d94c:	4b4b      	ldr	r3, [pc, #300]	; (1000da7c <at_ble_event_get+0x354>)
1000d94e:	2639      	movs	r6, #57	; 0x39
1000d950:	429c      	cmp	r4, r3
1000d952:	d100      	bne.n	1000d956 <at_ble_event_get+0x22e>
1000d954:	e1dd      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000d956:	e0cf      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d958:	23d1      	movs	r3, #209	; 0xd1
1000d95a:	011b      	lsls	r3, r3, #4
1000d95c:	429c      	cmp	r4, r3
1000d95e:	d100      	bne.n	1000d962 <at_ble_event_get+0x23a>
1000d960:	e0d6      	b.n	1000db10 <at_ble_event_get+0x3e8>
1000d962:	4b47      	ldr	r3, [pc, #284]	; (1000da80 <at_ble_event_get+0x358>)
1000d964:	429c      	cmp	r4, r3
1000d966:	d100      	bne.n	1000d96a <at_ble_event_get+0x242>
1000d968:	e0d8      	b.n	1000db1c <at_ble_event_get+0x3f4>
1000d96a:	e0c5      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d96c:	4b45      	ldr	r3, [pc, #276]	; (1000da84 <at_ble_event_get+0x35c>)
1000d96e:	429c      	cmp	r4, r3
1000d970:	d100      	bne.n	1000d974 <at_ble_event_get+0x24c>
1000d972:	e117      	b.n	1000dba4 <at_ble_event_get+0x47c>
1000d974:	d82e      	bhi.n	1000d9d4 <at_ble_event_get+0x2ac>
1000d976:	4b44      	ldr	r3, [pc, #272]	; (1000da88 <at_ble_event_get+0x360>)
1000d978:	429c      	cmp	r4, r3
1000d97a:	d100      	bne.n	1000d97e <at_ble_event_get+0x256>
1000d97c:	e13d      	b.n	1000dbfa <at_ble_event_get+0x4d2>
1000d97e:	d812      	bhi.n	1000d9a6 <at_ble_event_get+0x27e>
1000d980:	4b42      	ldr	r3, [pc, #264]	; (1000da8c <at_ble_event_get+0x364>)
1000d982:	429c      	cmp	r4, r3
1000d984:	d100      	bne.n	1000d988 <at_ble_event_get+0x260>
1000d986:	e0e8      	b.n	1000db5a <at_ble_event_get+0x432>
1000d988:	d804      	bhi.n	1000d994 <at_ble_event_get+0x26c>
1000d98a:	3b03      	subs	r3, #3
1000d98c:	429c      	cmp	r4, r3
1000d98e:	d100      	bne.n	1000d992 <at_ble_event_get+0x26a>
1000d990:	e0d0      	b.n	1000db34 <at_ble_event_get+0x40c>
1000d992:	e0b1      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d994:	4b3e      	ldr	r3, [pc, #248]	; (1000da90 <at_ble_event_get+0x368>)
1000d996:	429c      	cmp	r4, r3
1000d998:	d100      	bne.n	1000d99c <at_ble_event_get+0x274>
1000d99a:	e0d0      	b.n	1000db3e <at_ble_event_get+0x416>
1000d99c:	4b3d      	ldr	r3, [pc, #244]	; (1000da94 <at_ble_event_get+0x36c>)
1000d99e:	429c      	cmp	r4, r3
1000d9a0:	d100      	bne.n	1000d9a4 <at_ble_event_get+0x27c>
1000d9a2:	e0f9      	b.n	1000db98 <at_ble_event_get+0x470>
1000d9a4:	e0a8      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d9a6:	4b3c      	ldr	r3, [pc, #240]	; (1000da98 <at_ble_event_get+0x370>)
1000d9a8:	429c      	cmp	r4, r3
1000d9aa:	d100      	bne.n	1000d9ae <at_ble_event_get+0x286>
1000d9ac:	e0db      	b.n	1000db66 <at_ble_event_get+0x43e>
1000d9ae:	d808      	bhi.n	1000d9c2 <at_ble_event_get+0x29a>
1000d9b0:	4b3a      	ldr	r3, [pc, #232]	; (1000da9c <at_ble_event_get+0x374>)
1000d9b2:	429c      	cmp	r4, r3
1000d9b4:	d100      	bne.n	1000d9b8 <at_ble_event_get+0x290>
1000d9b6:	e11b      	b.n	1000dbf0 <at_ble_event_get+0x4c8>
1000d9b8:	4b39      	ldr	r3, [pc, #228]	; (1000daa0 <at_ble_event_get+0x378>)
1000d9ba:	429c      	cmp	r4, r3
1000d9bc:	d100      	bne.n	1000d9c0 <at_ble_event_get+0x298>
1000d9be:	e0d8      	b.n	1000db72 <at_ble_event_get+0x44a>
1000d9c0:	e09a      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d9c2:	4b38      	ldr	r3, [pc, #224]	; (1000daa4 <at_ble_event_get+0x37c>)
1000d9c4:	429c      	cmp	r4, r3
1000d9c6:	d100      	bne.n	1000d9ca <at_ble_event_get+0x2a2>
1000d9c8:	e0d8      	b.n	1000db7c <at_ble_event_get+0x454>
1000d9ca:	4b37      	ldr	r3, [pc, #220]	; (1000daa8 <at_ble_event_get+0x380>)
1000d9cc:	429c      	cmp	r4, r3
1000d9ce:	d100      	bne.n	1000d9d2 <at_ble_event_get+0x2aa>
1000d9d0:	e0db      	b.n	1000db8a <at_ble_event_get+0x462>
1000d9d2:	e091      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d9d4:	4b35      	ldr	r3, [pc, #212]	; (1000daac <at_ble_event_get+0x384>)
1000d9d6:	429c      	cmp	r4, r3
1000d9d8:	d100      	bne.n	1000d9dc <at_ble_event_get+0x2b4>
1000d9da:	e0f7      	b.n	1000dbcc <at_ble_event_get+0x4a4>
1000d9dc:	d876      	bhi.n	1000dacc <at_ble_event_get+0x3a4>
1000d9de:	4b34      	ldr	r3, [pc, #208]	; (1000dab0 <at_ble_event_get+0x388>)
1000d9e0:	429c      	cmp	r4, r3
1000d9e2:	d100      	bne.n	1000d9e6 <at_ble_event_get+0x2be>
1000d9e4:	e0f8      	b.n	1000dbd8 <at_ble_event_get+0x4b0>
1000d9e6:	d869      	bhi.n	1000dabc <at_ble_event_get+0x394>
1000d9e8:	4b32      	ldr	r3, [pc, #200]	; (1000dab4 <at_ble_event_get+0x38c>)
1000d9ea:	429c      	cmp	r4, r3
1000d9ec:	d100      	bne.n	1000d9f0 <at_ble_event_get+0x2c8>
1000d9ee:	e0e0      	b.n	1000dbb2 <at_ble_event_get+0x48a>
1000d9f0:	4b31      	ldr	r3, [pc, #196]	; (1000dab8 <at_ble_event_get+0x390>)
1000d9f2:	429c      	cmp	r4, r3
1000d9f4:	d100      	bne.n	1000d9f8 <at_ble_event_get+0x2d0>
1000d9f6:	e0a9      	b.n	1000db4c <at_ble_event_get+0x424>
1000d9f8:	e07e      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000d9fa:	46c0      	nop			; (mov r8, r8)
1000d9fc:	1000f12d 	.word	0x1000f12d
1000da00:	1001584c 	.word	0x1001584c
1000da04:	1000ce09 	.word	0x1000ce09
1000da08:	10015850 	.word	0x10015850
1000da0c:	10015848 	.word	0x10015848
1000da10:	10015838 	.word	0x10015838
1000da14:	1000d611 	.word	0x1000d611
1000da18:	10011bc9 	.word	0x10011bc9
1000da1c:	0000ffff 	.word	0x0000ffff
1000da20:	0000fffe 	.word	0x0000fffe
1000da24:	1000d081 	.word	0x1000d081
1000da28:	1000f12f 	.word	0x1000f12f
1000da2c:	0000201e 	.word	0x0000201e
1000da30:	0000201d 	.word	0x0000201d
1000da34:	00000c03 	.word	0x00000c03
1000da38:	0000201f 	.word	0x0000201f
1000da3c:	00000d1c 	.word	0x00000d1c
1000da40:	00000c0c 	.word	0x00000c0c
1000da44:	00000c02 	.word	0x00000c02
1000da48:	00000a02 	.word	0x00000a02
1000da4c:	00000a03 	.word	0x00000a03
1000da50:	00000c06 	.word	0x00000c06
1000da54:	00000c04 	.word	0x00000c04
1000da58:	00000c05 	.word	0x00000c05
1000da5c:	00000c07 	.word	0x00000c07
1000da60:	00000c09 	.word	0x00000c09
1000da64:	00000c17 	.word	0x00000c17
1000da68:	00000c12 	.word	0x00000c12
1000da6c:	00000c0d 	.word	0x00000c0d
1000da70:	00000c13 	.word	0x00000c13
1000da74:	00000c15 	.word	0x00000c15
1000da78:	00000d08 	.word	0x00000d08
1000da7c:	00000d01 	.word	0x00000d01
1000da80:	00000d15 	.word	0x00000d15
1000da84:	00000e1b 	.word	0x00000e1b
1000da88:	00000e0f 	.word	0x00000e0f
1000da8c:	00000e03 	.word	0x00000e03
1000da90:	00000e06 	.word	0x00000e06
1000da94:	00000e0a 	.word	0x00000e0a
1000da98:	00000e15 	.word	0x00000e15
1000da9c:	00000e11 	.word	0x00000e11
1000daa0:	00000e13 	.word	0x00000e13
1000daa4:	00000e17 	.word	0x00000e17
1000daa8:	00000e19 	.word	0x00000e19
1000daac:	00000e27 	.word	0x00000e27
1000dab0:	00000e21 	.word	0x00000e21
1000dab4:	00000e1c 	.word	0x00000e1c
1000dab8:	00000e1d 	.word	0x00000e1d
1000dabc:	4b9f      	ldr	r3, [pc, #636]	; (1000dd3c <at_ble_event_get+0x614>)
1000dabe:	429c      	cmp	r4, r3
1000dac0:	d07e      	beq.n	1000dbc0 <at_ble_event_get+0x498>
1000dac2:	4b9f      	ldr	r3, [pc, #636]	; (1000dd40 <at_ble_event_get+0x618>)
1000dac4:	429c      	cmp	r4, r3
1000dac6:	d100      	bne.n	1000daca <at_ble_event_get+0x3a2>
1000dac8:	e08c      	b.n	1000dbe4 <at_ble_event_get+0x4bc>
1000daca:	e015      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000dacc:	4b9d      	ldr	r3, [pc, #628]	; (1000dd44 <at_ble_event_get+0x61c>)
1000dace:	429c      	cmp	r4, r3
1000dad0:	d100      	bne.n	1000dad4 <at_ble_event_get+0x3ac>
1000dad2:	e10a      	b.n	1000dcea <at_ble_event_get+0x5c2>
1000dad4:	d808      	bhi.n	1000dae8 <at_ble_event_get+0x3c0>
1000dad6:	4b9c      	ldr	r3, [pc, #624]	; (1000dd48 <at_ble_event_get+0x620>)
1000dad8:	429c      	cmp	r4, r3
1000dada:	d100      	bne.n	1000dade <at_ble_event_get+0x3b6>
1000dadc:	e0f7      	b.n	1000dcce <at_ble_event_get+0x5a6>
1000dade:	4b9b      	ldr	r3, [pc, #620]	; (1000dd4c <at_ble_event_get+0x624>)
1000dae0:	429c      	cmp	r4, r3
1000dae2:	d100      	bne.n	1000dae6 <at_ble_event_get+0x3be>
1000dae4:	e0fa      	b.n	1000dcdc <at_ble_event_get+0x5b4>
1000dae6:	e007      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000dae8:	4b99      	ldr	r3, [pc, #612]	; (1000dd50 <at_ble_event_get+0x628>)
1000daea:	429c      	cmp	r4, r3
1000daec:	d100      	bne.n	1000daf0 <at_ble_event_get+0x3c8>
1000daee:	e103      	b.n	1000dcf8 <at_ble_event_get+0x5d0>
1000daf0:	4b98      	ldr	r3, [pc, #608]	; (1000dd54 <at_ble_event_get+0x62c>)
1000daf2:	429c      	cmp	r4, r3
1000daf4:	d100      	bne.n	1000daf8 <at_ble_event_get+0x3d0>
1000daf6:	e106      	b.n	1000dd06 <at_ble_event_get+0x5de>
1000daf8:	2600      	movs	r6, #0
1000dafa:	e10a      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dafc:	1c30      	adds	r0, r6, #0
1000dafe:	1c29      	adds	r1, r5, #0
1000db00:	4b95      	ldr	r3, [pc, #596]	; (1000dd58 <at_ble_event_get+0x630>)
1000db02:	e014      	b.n	1000db2e <at_ble_event_get+0x406>
1000db04:	1c30      	adds	r0, r6, #0
1000db06:	1c29      	adds	r1, r5, #0
1000db08:	4b94      	ldr	r3, [pc, #592]	; (1000dd5c <at_ble_event_get+0x634>)
1000db0a:	4798      	blx	r3
1000db0c:	2604      	movs	r6, #4
1000db0e:	e100      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db10:	1c30      	adds	r0, r6, #0
1000db12:	1c29      	adds	r1, r5, #0
1000db14:	4b92      	ldr	r3, [pc, #584]	; (1000dd60 <at_ble_event_get+0x638>)
1000db16:	4798      	blx	r3
1000db18:	2601      	movs	r6, #1
1000db1a:	e0fa      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db1c:	1c30      	adds	r0, r6, #0
1000db1e:	1c29      	adds	r1, r5, #0
1000db20:	4b90      	ldr	r3, [pc, #576]	; (1000dd64 <at_ble_event_get+0x63c>)
1000db22:	4798      	blx	r3
1000db24:	260f      	movs	r6, #15
1000db26:	e0f4      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db28:	1c30      	adds	r0, r6, #0
1000db2a:	1c29      	adds	r1, r5, #0
1000db2c:	4b8e      	ldr	r3, [pc, #568]	; (1000dd68 <at_ble_event_get+0x640>)
1000db2e:	4798      	blx	r3
1000db30:	1c06      	adds	r6, r0, #0
1000db32:	e0ee      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db34:	9801      	ldr	r0, [sp, #4]
1000db36:	1c31      	adds	r1, r6, #0
1000db38:	1c2a      	adds	r2, r5, #0
1000db3a:	4b8c      	ldr	r3, [pc, #560]	; (1000dd6c <at_ble_event_get+0x644>)
1000db3c:	e017      	b.n	1000db6e <at_ble_event_get+0x446>
1000db3e:	1c31      	adds	r1, r6, #0
1000db40:	9801      	ldr	r0, [sp, #4]
1000db42:	1c2a      	adds	r2, r5, #0
1000db44:	4b8a      	ldr	r3, [pc, #552]	; (1000dd70 <at_ble_event_get+0x648>)
1000db46:	4798      	blx	r3
1000db48:	2611      	movs	r6, #17
1000db4a:	e0e2      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db4c:	1c31      	adds	r1, r6, #0
1000db4e:	9801      	ldr	r0, [sp, #4]
1000db50:	1c2a      	adds	r2, r5, #0
1000db52:	4b88      	ldr	r3, [pc, #544]	; (1000dd74 <at_ble_event_get+0x64c>)
1000db54:	4798      	blx	r3
1000db56:	2612      	movs	r6, #18
1000db58:	e0db      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db5a:	1c30      	adds	r0, r6, #0
1000db5c:	1c29      	adds	r1, r5, #0
1000db5e:	4b86      	ldr	r3, [pc, #536]	; (1000dd78 <at_ble_event_get+0x650>)
1000db60:	4798      	blx	r3
1000db62:	2606      	movs	r6, #6
1000db64:	e0d5      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db66:	1c31      	adds	r1, r6, #0
1000db68:	1c2a      	adds	r2, r5, #0
1000db6a:	9801      	ldr	r0, [sp, #4]
1000db6c:	4b83      	ldr	r3, [pc, #524]	; (1000dd7c <at_ble_event_get+0x654>)
1000db6e:	4798      	blx	r3
1000db70:	e7de      	b.n	1000db30 <at_ble_event_get+0x408>
1000db72:	9801      	ldr	r0, [sp, #4]
1000db74:	1c31      	adds	r1, r6, #0
1000db76:	1c2a      	adds	r2, r5, #0
1000db78:	4b81      	ldr	r3, [pc, #516]	; (1000dd80 <at_ble_event_get+0x658>)
1000db7a:	e7f8      	b.n	1000db6e <at_ble_event_get+0x446>
1000db7c:	1c31      	adds	r1, r6, #0
1000db7e:	9801      	ldr	r0, [sp, #4]
1000db80:	1c2a      	adds	r2, r5, #0
1000db82:	4b80      	ldr	r3, [pc, #512]	; (1000dd84 <at_ble_event_get+0x65c>)
1000db84:	4798      	blx	r3
1000db86:	260d      	movs	r6, #13
1000db88:	e0c3      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db8a:	1c31      	adds	r1, r6, #0
1000db8c:	9801      	ldr	r0, [sp, #4]
1000db8e:	1c2a      	adds	r2, r5, #0
1000db90:	4b7d      	ldr	r3, [pc, #500]	; (1000dd88 <at_ble_event_get+0x660>)
1000db92:	4798      	blx	r3
1000db94:	260e      	movs	r6, #14
1000db96:	e0bc      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000db98:	9801      	ldr	r0, [sp, #4]
1000db9a:	1c31      	adds	r1, r6, #0
1000db9c:	1c2a      	adds	r2, r5, #0
1000db9e:	4b7b      	ldr	r3, [pc, #492]	; (1000dd8c <at_ble_event_get+0x664>)
1000dba0:	4798      	blx	r3
1000dba2:	e084      	b.n	1000dcae <at_ble_event_get+0x586>
1000dba4:	1c31      	adds	r1, r6, #0
1000dba6:	9801      	ldr	r0, [sp, #4]
1000dba8:	1c2a      	adds	r2, r5, #0
1000dbaa:	4b79      	ldr	r3, [pc, #484]	; (1000dd90 <at_ble_event_get+0x668>)
1000dbac:	4798      	blx	r3
1000dbae:	260b      	movs	r6, #11
1000dbb0:	e0af      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbb2:	1c31      	adds	r1, r6, #0
1000dbb4:	9801      	ldr	r0, [sp, #4]
1000dbb6:	1c2a      	adds	r2, r5, #0
1000dbb8:	4b76      	ldr	r3, [pc, #472]	; (1000dd94 <at_ble_event_get+0x66c>)
1000dbba:	4798      	blx	r3
1000dbbc:	2610      	movs	r6, #16
1000dbbe:	e0a8      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbc0:	1c30      	adds	r0, r6, #0
1000dbc2:	1c29      	adds	r1, r5, #0
1000dbc4:	4b74      	ldr	r3, [pc, #464]	; (1000dd98 <at_ble_event_get+0x670>)
1000dbc6:	4798      	blx	r3
1000dbc8:	2628      	movs	r6, #40	; 0x28
1000dbca:	e0a2      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbcc:	1c30      	adds	r0, r6, #0
1000dbce:	1c29      	adds	r1, r5, #0
1000dbd0:	4b72      	ldr	r3, [pc, #456]	; (1000dd9c <at_ble_event_get+0x674>)
1000dbd2:	4798      	blx	r3
1000dbd4:	2629      	movs	r6, #41	; 0x29
1000dbd6:	e09c      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbd8:	1c30      	adds	r0, r6, #0
1000dbda:	1c29      	adds	r1, r5, #0
1000dbdc:	4b70      	ldr	r3, [pc, #448]	; (1000dda0 <at_ble_event_get+0x678>)
1000dbde:	4798      	blx	r3
1000dbe0:	2627      	movs	r6, #39	; 0x27
1000dbe2:	e096      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbe4:	1c30      	adds	r0, r6, #0
1000dbe6:	1c29      	adds	r1, r5, #0
1000dbe8:	4b6e      	ldr	r3, [pc, #440]	; (1000dda4 <at_ble_event_get+0x67c>)
1000dbea:	4798      	blx	r3
1000dbec:	262a      	movs	r6, #42	; 0x2a
1000dbee:	e090      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dbf0:	9801      	ldr	r0, [sp, #4]
1000dbf2:	1c31      	adds	r1, r6, #0
1000dbf4:	1c2a      	adds	r2, r5, #0
1000dbf6:	4b6c      	ldr	r3, [pc, #432]	; (1000dda8 <at_ble_event_get+0x680>)
1000dbf8:	e7b9      	b.n	1000db6e <at_ble_event_get+0x446>
1000dbfa:	9801      	ldr	r0, [sp, #4]
1000dbfc:	1c31      	adds	r1, r6, #0
1000dbfe:	1c2a      	adds	r2, r5, #0
1000dc00:	4b6a      	ldr	r3, [pc, #424]	; (1000ddac <at_ble_event_get+0x684>)
1000dc02:	e7b4      	b.n	1000db6e <at_ble_event_get+0x446>
1000dc04:	1c30      	adds	r0, r6, #0
1000dc06:	1c29      	adds	r1, r5, #0
1000dc08:	4b69      	ldr	r3, [pc, #420]	; (1000ddb0 <at_ble_event_get+0x688>)
1000dc0a:	4798      	blx	r3
1000dc0c:	262b      	movs	r6, #43	; 0x2b
1000dc0e:	e080      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc10:	1c30      	adds	r0, r6, #0
1000dc12:	1c29      	adds	r1, r5, #0
1000dc14:	4b67      	ldr	r3, [pc, #412]	; (1000ddb4 <at_ble_event_get+0x68c>)
1000dc16:	4798      	blx	r3
1000dc18:	262c      	movs	r6, #44	; 0x2c
1000dc1a:	e07a      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc1c:	1c31      	adds	r1, r6, #0
1000dc1e:	9801      	ldr	r0, [sp, #4]
1000dc20:	1c2a      	adds	r2, r5, #0
1000dc22:	4b65      	ldr	r3, [pc, #404]	; (1000ddb8 <at_ble_event_get+0x690>)
1000dc24:	4798      	blx	r3
1000dc26:	2613      	movs	r6, #19
1000dc28:	e073      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc2a:	1c31      	adds	r1, r6, #0
1000dc2c:	9801      	ldr	r0, [sp, #4]
1000dc2e:	1c2a      	adds	r2, r5, #0
1000dc30:	4b62      	ldr	r3, [pc, #392]	; (1000ddbc <at_ble_event_get+0x694>)
1000dc32:	4798      	blx	r3
1000dc34:	2614      	movs	r6, #20
1000dc36:	e06c      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc38:	1c31      	adds	r1, r6, #0
1000dc3a:	9801      	ldr	r0, [sp, #4]
1000dc3c:	1c2a      	adds	r2, r5, #0
1000dc3e:	4b60      	ldr	r3, [pc, #384]	; (1000ddc0 <at_ble_event_get+0x698>)
1000dc40:	4798      	blx	r3
1000dc42:	2615      	movs	r6, #21
1000dc44:	e065      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc46:	1c31      	adds	r1, r6, #0
1000dc48:	9801      	ldr	r0, [sp, #4]
1000dc4a:	1c2a      	adds	r2, r5, #0
1000dc4c:	4b5d      	ldr	r3, [pc, #372]	; (1000ddc4 <at_ble_event_get+0x69c>)
1000dc4e:	4798      	blx	r3
1000dc50:	2616      	movs	r6, #22
1000dc52:	e05e      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc54:	9801      	ldr	r0, [sp, #4]
1000dc56:	1c31      	adds	r1, r6, #0
1000dc58:	1c2a      	adds	r2, r5, #0
1000dc5a:	4b5b      	ldr	r3, [pc, #364]	; (1000ddc8 <at_ble_event_get+0x6a0>)
1000dc5c:	e787      	b.n	1000db6e <at_ble_event_get+0x446>
1000dc5e:	1c31      	adds	r1, r6, #0
1000dc60:	9801      	ldr	r0, [sp, #4]
1000dc62:	1c2a      	adds	r2, r5, #0
1000dc64:	4b58      	ldr	r3, [pc, #352]	; (1000ddc8 <at_ble_event_get+0x6a0>)
1000dc66:	4798      	blx	r3
1000dc68:	88a9      	ldrh	r1, [r5, #4]
1000dc6a:	1c06      	adds	r6, r0, #0
1000dc6c:	4b57      	ldr	r3, [pc, #348]	; (1000ddcc <at_ble_event_get+0x6a4>)
1000dc6e:	8828      	ldrh	r0, [r5, #0]
1000dc70:	4798      	blx	r3
1000dc72:	e04e      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc74:	1c31      	adds	r1, r6, #0
1000dc76:	9801      	ldr	r0, [sp, #4]
1000dc78:	1c2a      	adds	r2, r5, #0
1000dc7a:	4b55      	ldr	r3, [pc, #340]	; (1000ddd0 <at_ble_event_get+0x6a8>)
1000dc7c:	4798      	blx	r3
1000dc7e:	2623      	movs	r6, #35	; 0x23
1000dc80:	e047      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dc82:	9801      	ldr	r0, [sp, #4]
1000dc84:	1c31      	adds	r1, r6, #0
1000dc86:	1c2a      	adds	r2, r5, #0
1000dc88:	4b52      	ldr	r3, [pc, #328]	; (1000ddd4 <at_ble_event_get+0x6ac>)
1000dc8a:	e770      	b.n	1000db6e <at_ble_event_get+0x446>
1000dc8c:	9b01      	ldr	r3, [sp, #4]
1000dc8e:	1c30      	adds	r0, r6, #0
1000dc90:	0a1f      	lsrs	r7, r3, #8
1000dc92:	802f      	strh	r7, [r5, #0]
1000dc94:	1c29      	adds	r1, r5, #0
1000dc96:	4b50      	ldr	r3, [pc, #320]	; (1000ddd8 <at_ble_event_get+0x6b0>)
1000dc98:	e749      	b.n	1000db2e <at_ble_event_get+0x406>
1000dc9a:	9801      	ldr	r0, [sp, #4]
1000dc9c:	1c31      	adds	r1, r6, #0
1000dc9e:	1c2a      	adds	r2, r5, #0
1000dca0:	4b4e      	ldr	r3, [pc, #312]	; (1000dddc <at_ble_event_get+0x6b4>)
1000dca2:	e764      	b.n	1000db6e <at_ble_event_get+0x446>
1000dca4:	1c30      	adds	r0, r6, #0
1000dca6:	1c29      	adds	r1, r5, #0
1000dca8:	9a01      	ldr	r2, [sp, #4]
1000dcaa:	4b4d      	ldr	r3, [pc, #308]	; (1000dde0 <at_ble_event_get+0x6b8>)
1000dcac:	4798      	blx	r3
1000dcae:	263b      	movs	r6, #59	; 0x3b
1000dcb0:	e02f      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcb2:	1c31      	adds	r1, r6, #0
1000dcb4:	9801      	ldr	r0, [sp, #4]
1000dcb6:	1c2a      	adds	r2, r5, #0
1000dcb8:	4b4a      	ldr	r3, [pc, #296]	; (1000dde4 <at_ble_event_get+0x6bc>)
1000dcba:	4798      	blx	r3
1000dcbc:	2618      	movs	r6, #24
1000dcbe:	e028      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcc0:	1c31      	adds	r1, r6, #0
1000dcc2:	9801      	ldr	r0, [sp, #4]
1000dcc4:	1c2a      	adds	r2, r5, #0
1000dcc6:	4b48      	ldr	r3, [pc, #288]	; (1000dde8 <at_ble_event_get+0x6c0>)
1000dcc8:	4798      	blx	r3
1000dcca:	2620      	movs	r6, #32
1000dccc:	e021      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcce:	1c31      	adds	r1, r6, #0
1000dcd0:	9801      	ldr	r0, [sp, #4]
1000dcd2:	1c2a      	adds	r2, r5, #0
1000dcd4:	4b45      	ldr	r3, [pc, #276]	; (1000ddec <at_ble_event_get+0x6c4>)
1000dcd6:	4798      	blx	r3
1000dcd8:	2633      	movs	r6, #51	; 0x33
1000dcda:	e01a      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcdc:	1c31      	adds	r1, r6, #0
1000dcde:	9801      	ldr	r0, [sp, #4]
1000dce0:	1c2a      	adds	r2, r5, #0
1000dce2:	4b43      	ldr	r3, [pc, #268]	; (1000ddf0 <at_ble_event_get+0x6c8>)
1000dce4:	4798      	blx	r3
1000dce6:	2630      	movs	r6, #48	; 0x30
1000dce8:	e013      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcea:	1c31      	adds	r1, r6, #0
1000dcec:	9801      	ldr	r0, [sp, #4]
1000dcee:	1c2a      	adds	r2, r5, #0
1000dcf0:	4b40      	ldr	r3, [pc, #256]	; (1000ddf4 <at_ble_event_get+0x6cc>)
1000dcf2:	4798      	blx	r3
1000dcf4:	2634      	movs	r6, #52	; 0x34
1000dcf6:	e00c      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dcf8:	1c31      	adds	r1, r6, #0
1000dcfa:	9801      	ldr	r0, [sp, #4]
1000dcfc:	1c2a      	adds	r2, r5, #0
1000dcfe:	4b3e      	ldr	r3, [pc, #248]	; (1000ddf8 <at_ble_event_get+0x6d0>)
1000dd00:	4798      	blx	r3
1000dd02:	2635      	movs	r6, #53	; 0x35
1000dd04:	e005      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dd06:	1c31      	adds	r1, r6, #0
1000dd08:	9801      	ldr	r0, [sp, #4]
1000dd0a:	1c2a      	adds	r2, r5, #0
1000dd0c:	4b3b      	ldr	r3, [pc, #236]	; (1000ddfc <at_ble_event_get+0x6d4>)
1000dd0e:	4798      	blx	r3
1000dd10:	2632      	movs	r6, #50	; 0x32
1000dd12:	9b03      	ldr	r3, [sp, #12]
1000dd14:	701e      	strb	r6, [r3, #0]
1000dd16:	2300      	movs	r3, #0
1000dd18:	9302      	str	r3, [sp, #8]
1000dd1a:	e57a      	b.n	1000d812 <at_ble_event_get+0xea>
1000dd1c:	23d0      	movs	r3, #208	; 0xd0
1000dd1e:	e7fb      	b.n	1000dd18 <at_ble_event_get+0x5f0>
1000dd20:	9b01      	ldr	r3, [sp, #4]
1000dd22:	9e02      	ldr	r6, [sp, #8]
1000dd24:	2bbb      	cmp	r3, #187	; 0xbb
1000dd26:	d000      	beq.n	1000dd2a <at_ble_event_get+0x602>
1000dd28:	e6e6      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000dd2a:	e7f2      	b.n	1000dd12 <at_ble_event_get+0x5ea>
1000dd2c:	9b02      	ldr	r3, [sp, #8]
1000dd2e:	2b00      	cmp	r3, #0
1000dd30:	d000      	beq.n	1000dd34 <at_ble_event_get+0x60c>
1000dd32:	e56e      	b.n	1000d812 <at_ble_event_get+0xea>
1000dd34:	e6e0      	b.n	1000daf8 <at_ble_event_get+0x3d0>
1000dd36:	9802      	ldr	r0, [sp, #8]
1000dd38:	b007      	add	sp, #28
1000dd3a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dd3c:	00000e22 	.word	0x00000e22
1000dd40:	00000e25 	.word	0x00000e25
1000dd44:	00001b05 	.word	0x00001b05
1000dd48:	00001b01 	.word	0x00001b01
1000dd4c:	00001b03 	.word	0x00001b03
1000dd50:	00001b06 	.word	0x00001b06
1000dd54:	00001b08 	.word	0x00001b08
1000dd58:	1000ff59 	.word	0x1000ff59
1000dd5c:	1000ff3d 	.word	0x1000ff3d
1000dd60:	100101d9 	.word	0x100101d9
1000dd64:	100102c9 	.word	0x100102c9
1000dd68:	100102ed 	.word	0x100102ed
1000dd6c:	1000f2d1 	.word	0x1000f2d1
1000dd70:	1000fb51 	.word	0x1000fb51
1000dd74:	1000fbcd 	.word	0x1000fbcd
1000dd78:	1000f589 	.word	0x1000f589
1000dd7c:	1000f625 	.word	0x1000f625
1000dd80:	1000f6fd 	.word	0x1000f6fd
1000dd84:	1000f985 	.word	0x1000f985
1000dd88:	1000fa25 	.word	0x1000fa25
1000dd8c:	1000fadd 	.word	0x1000fadd
1000dd90:	1000fb05 	.word	0x1000fb05
1000dd94:	1000fb1b 	.word	0x1000fb1b
1000dd98:	1000fbe5 	.word	0x1000fbe5
1000dd9c:	1000fc13 	.word	0x1000fc13
1000dda0:	1000fc29 	.word	0x1000fc29
1000dda4:	1000fc53 	.word	0x1000fc53
1000dda8:	1000fa81 	.word	0x1000fa81
1000ddac:	1000faab 	.word	0x1000faab
1000ddb0:	1000ed11 	.word	0x1000ed11
1000ddb4:	1000ed3d 	.word	0x1000ed3d
1000ddb8:	1001050d 	.word	0x1001050d
1000ddbc:	10010549 	.word	0x10010549
1000ddc0:	10010591 	.word	0x10010591
1000ddc4:	100105d5 	.word	0x100105d5
1000ddc8:	10010609 	.word	0x10010609
1000ddcc:	100104cd 	.word	0x100104cd
1000ddd0:	100106d5 	.word	0x100106d5
1000ddd4:	1001065d 	.word	0x1001065d
1000ddd8:	1000ebf5 	.word	0x1000ebf5
1000dddc:	1000ec61 	.word	0x1000ec61
1000dde0:	1000ec25 	.word	0x1000ec25
1000dde4:	100106e5 	.word	0x100106e5
1000dde8:	10010725 	.word	0x10010725
1000ddec:	100109ed 	.word	0x100109ed
1000ddf0:	100109f7 	.word	0x100109f7
1000ddf4:	100109fd 	.word	0x100109fd
1000ddf8:	10010a03 	.word	0x10010a03
1000ddfc:	10010a0f 	.word	0x10010a0f

1000de00 <internal_event_flush>:
1000de00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de02:	490e      	ldr	r1, [pc, #56]	; (1000de3c <internal_event_flush+0x3c>)
1000de04:	2400      	movs	r4, #0
1000de06:	680b      	ldr	r3, [r1, #0]
1000de08:	1c0f      	adds	r7, r1, #0
1000de0a:	1c1e      	adds	r6, r3, #0
1000de0c:	4a0c      	ldr	r2, [pc, #48]	; (1000de40 <internal_event_flush+0x40>)
1000de0e:	6815      	ldr	r5, [r2, #0]
1000de10:	9201      	str	r2, [sp, #4]
1000de12:	2b00      	cmp	r3, #0
1000de14:	d00e      	beq.n	1000de34 <internal_event_flush+0x34>
1000de16:	889a      	ldrh	r2, [r3, #4]
1000de18:	6819      	ldr	r1, [r3, #0]
1000de1a:	4282      	cmp	r2, r0
1000de1c:	d107      	bne.n	1000de2e <internal_event_flush+0x2e>
1000de1e:	2c00      	cmp	r4, #0
1000de20:	d001      	beq.n	1000de26 <internal_event_flush+0x26>
1000de22:	6021      	str	r1, [r4, #0]
1000de24:	e000      	b.n	1000de28 <internal_event_flush+0x28>
1000de26:	1c0e      	adds	r6, r1, #0
1000de28:	601d      	str	r5, [r3, #0]
1000de2a:	1c1d      	adds	r5, r3, #0
1000de2c:	1c23      	adds	r3, r4, #0
1000de2e:	1c1c      	adds	r4, r3, #0
1000de30:	1c0b      	adds	r3, r1, #0
1000de32:	e7ee      	b.n	1000de12 <internal_event_flush+0x12>
1000de34:	9b01      	ldr	r3, [sp, #4]
1000de36:	603e      	str	r6, [r7, #0]
1000de38:	601d      	str	r5, [r3, #0]
1000de3a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000de3c:	1001584c 	.word	0x1001584c
1000de40:	10015850 	.word	0x10015850

1000de44 <internal_conn_flush>:
1000de44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000de46:	4a12      	ldr	r2, [pc, #72]	; (1000de90 <internal_conn_flush+0x4c>)
1000de48:	9000      	str	r0, [sp, #0]
1000de4a:	6813      	ldr	r3, [r2, #0]
1000de4c:	4811      	ldr	r0, [pc, #68]	; (1000de94 <internal_conn_flush+0x50>)
1000de4e:	1c1f      	adds	r7, r3, #0
1000de50:	2100      	movs	r1, #0
1000de52:	4684      	mov	ip, r0
1000de54:	6804      	ldr	r4, [r0, #0]
1000de56:	9201      	str	r2, [sp, #4]
1000de58:	2b00      	cmp	r3, #0
1000de5a:	d014      	beq.n	1000de86 <internal_conn_flush+0x42>
1000de5c:	88d8      	ldrh	r0, [r3, #6]
1000de5e:	9a00      	ldr	r2, [sp, #0]
1000de60:	681d      	ldr	r5, [r3, #0]
1000de62:	0a06      	lsrs	r6, r0, #8
1000de64:	4296      	cmp	r6, r2
1000de66:	d10b      	bne.n	1000de80 <internal_conn_flush+0x3c>
1000de68:	26fd      	movs	r6, #253	; 0xfd
1000de6a:	4006      	ands	r6, r0
1000de6c:	2e0c      	cmp	r6, #12
1000de6e:	d107      	bne.n	1000de80 <internal_conn_flush+0x3c>
1000de70:	2900      	cmp	r1, #0
1000de72:	d001      	beq.n	1000de78 <internal_conn_flush+0x34>
1000de74:	600d      	str	r5, [r1, #0]
1000de76:	e000      	b.n	1000de7a <internal_conn_flush+0x36>
1000de78:	1c2f      	adds	r7, r5, #0
1000de7a:	601c      	str	r4, [r3, #0]
1000de7c:	1c1c      	adds	r4, r3, #0
1000de7e:	1c0b      	adds	r3, r1, #0
1000de80:	1c19      	adds	r1, r3, #0
1000de82:	1c2b      	adds	r3, r5, #0
1000de84:	e7e8      	b.n	1000de58 <internal_conn_flush+0x14>
1000de86:	9b01      	ldr	r3, [sp, #4]
1000de88:	601f      	str	r7, [r3, #0]
1000de8a:	4663      	mov	r3, ip
1000de8c:	601c      	str	r4, [r3, #0]
1000de8e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000de90:	1001584c 	.word	0x1001584c
1000de94:	10015850 	.word	0x10015850

1000de98 <at_ble_device_name_set>:
1000de98:	b530      	push	{r4, r5, lr}
1000de9a:	23cf      	movs	r3, #207	; 0xcf
1000de9c:	2800      	cmp	r0, #0
1000de9e:	d010      	beq.n	1000dec2 <at_ble_device_name_set+0x2a>
1000dea0:	1e4a      	subs	r2, r1, #1
1000dea2:	2a1f      	cmp	r2, #31
1000dea4:	d80d      	bhi.n	1000dec2 <at_ble_device_name_set+0x2a>
1000dea6:	4a08      	ldr	r2, [pc, #32]	; (1000dec8 <at_ble_device_name_set+0x30>)
1000dea8:	1c13      	adds	r3, r2, #0
1000deaa:	33aa      	adds	r3, #170	; 0xaa
1000deac:	8019      	strh	r1, [r3, #0]
1000deae:	2300      	movs	r3, #0
1000deb0:	1c1c      	adds	r4, r3, #0
1000deb2:	5cc5      	ldrb	r5, [r0, r3]
1000deb4:	34ac      	adds	r4, #172	; 0xac
1000deb6:	3301      	adds	r3, #1
1000deb8:	5515      	strb	r5, [r2, r4]
1000deba:	b2dc      	uxtb	r4, r3
1000debc:	428c      	cmp	r4, r1
1000debe:	d3f7      	bcc.n	1000deb0 <at_ble_device_name_set+0x18>
1000dec0:	2300      	movs	r3, #0
1000dec2:	1c18      	adds	r0, r3, #0
1000dec4:	bd30      	pop	{r4, r5, pc}
1000dec6:	46c0      	nop			; (mov r8, r8)
1000dec8:	1001685e 	.word	0x1001685e

1000decc <at_ble_addr_get>:
1000decc:	b510      	push	{r4, lr}
1000dece:	1c04      	adds	r4, r0, #0
1000ded0:	20cf      	movs	r0, #207	; 0xcf
1000ded2:	2c00      	cmp	r4, #0
1000ded4:	d006      	beq.n	1000dee4 <at_ble_addr_get+0x18>
1000ded6:	4b04      	ldr	r3, [pc, #16]	; (1000dee8 <at_ble_addr_get+0x1c>)
1000ded8:	38ce      	subs	r0, #206	; 0xce
1000deda:	1c21      	adds	r1, r4, #0
1000dedc:	4798      	blx	r3
1000dede:	4b03      	ldr	r3, [pc, #12]	; (1000deec <at_ble_addr_get+0x20>)
1000dee0:	791b      	ldrb	r3, [r3, #4]
1000dee2:	7023      	strb	r3, [r4, #0]
1000dee4:	bd10      	pop	{r4, pc}
1000dee6:	46c0      	nop			; (mov r8, r8)
1000dee8:	1000fded 	.word	0x1000fded
1000deec:	1001685e 	.word	0x1001685e

1000def0 <at_ble_set_dev_config>:
1000def0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000def2:	7906      	ldrb	r6, [r0, #4]
1000def4:	b089      	sub	sp, #36	; 0x24
1000def6:	25cf      	movs	r5, #207	; 0xcf
1000def8:	2e03      	cmp	r6, #3
1000defa:	d838      	bhi.n	1000df6e <at_ble_set_dev_config+0x7e>
1000defc:	7803      	ldrb	r3, [r0, #0]
1000defe:	3511      	adds	r5, #17
1000df00:	2b0f      	cmp	r3, #15
1000df02:	d834      	bhi.n	1000df6e <at_ble_set_dev_config+0x7e>
1000df04:	2380      	movs	r3, #128	; 0x80
1000df06:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000df08:	3d11      	subs	r5, #17
1000df0a:	009b      	lsls	r3, r3, #2
1000df0c:	429f      	cmp	r7, r3
1000df0e:	d82e      	bhi.n	1000df6e <at_ble_set_dev_config+0x7e>
1000df10:	7fc5      	ldrb	r5, [r0, #31]
1000df12:	7f83      	ldrb	r3, [r0, #30]
1000df14:	01ad      	lsls	r5, r5, #6
1000df16:	015b      	lsls	r3, r3, #5
1000df18:	431d      	orrs	r5, r3
1000df1a:	7ec3      	ldrb	r3, [r0, #27]
1000df1c:	431d      	orrs	r5, r3
1000df1e:	7f43      	ldrb	r3, [r0, #29]
1000df20:	011b      	lsls	r3, r3, #4
1000df22:	431d      	orrs	r5, r3
1000df24:	7f03      	ldrb	r3, [r0, #28]
1000df26:	009b      	lsls	r3, r3, #2
1000df28:	431d      	orrs	r5, r3
1000df2a:	4b12      	ldr	r3, [pc, #72]	; (1000df74 <at_ble_set_dev_config+0x84>)
1000df2c:	b2ed      	uxtb	r5, r5
1000df2e:	711e      	strb	r6, [r3, #4]
1000df30:	7903      	ldrb	r3, [r0, #4]
1000df32:	3b02      	subs	r3, #2
1000df34:	2b01      	cmp	r3, #1
1000df36:	d801      	bhi.n	1000df3c <at_ble_set_dev_config+0x4c>
1000df38:	2302      	movs	r3, #2
1000df3a:	7103      	strb	r3, [r0, #4]
1000df3c:	1c04      	adds	r4, r0, #0
1000df3e:	1c23      	adds	r3, r4, #0
1000df40:	330b      	adds	r3, #11
1000df42:	8861      	ldrh	r1, [r4, #2]
1000df44:	9307      	str	r3, [sp, #28]
1000df46:	7923      	ldrb	r3, [r4, #4]
1000df48:	7800      	ldrb	r0, [r0, #0]
1000df4a:	9300      	str	r3, [sp, #0]
1000df4c:	9501      	str	r5, [sp, #4]
1000df4e:	8c25      	ldrh	r5, [r4, #32]
1000df50:	1d62      	adds	r2, r4, #5
1000df52:	9502      	str	r5, [sp, #8]
1000df54:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000df56:	9b07      	ldr	r3, [sp, #28]
1000df58:	9503      	str	r5, [sp, #12]
1000df5a:	9704      	str	r7, [sp, #16]
1000df5c:	4d06      	ldr	r5, [pc, #24]	; (1000df78 <at_ble_set_dev_config+0x88>)
1000df5e:	47a8      	blx	r5
1000df60:	7126      	strb	r6, [r4, #4]
1000df62:	1c05      	adds	r5, r0, #0
1000df64:	1c21      	adds	r1, r4, #0
1000df66:	4803      	ldr	r0, [pc, #12]	; (1000df74 <at_ble_set_dev_config+0x84>)
1000df68:	2226      	movs	r2, #38	; 0x26
1000df6a:	4b04      	ldr	r3, [pc, #16]	; (1000df7c <at_ble_set_dev_config+0x8c>)
1000df6c:	4798      	blx	r3
1000df6e:	1c28      	adds	r0, r5, #0
1000df70:	b009      	add	sp, #36	; 0x24
1000df72:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000df74:	1001685e 	.word	0x1001685e
1000df78:	1000fce5 	.word	0x1000fce5
1000df7c:	10011bb7 	.word	0x10011bb7

1000df80 <at_ble_init>:
1000df80:	b5f0      	push	{r4, r5, r6, r7, lr}
1000df82:	b087      	sub	sp, #28
1000df84:	af03      	add	r7, sp, #12
1000df86:	4954      	ldr	r1, [pc, #336]	; (1000e0d8 <at_ble_init+0x158>)
1000df88:	220b      	movs	r2, #11
1000df8a:	4b54      	ldr	r3, [pc, #336]	; (1000e0dc <at_ble_init+0x15c>)
1000df8c:	1c04      	adds	r4, r0, #0
1000df8e:	1c38      	adds	r0, r7, #0
1000df90:	4798      	blx	r3
1000df92:	2205      	movs	r2, #5
1000df94:	4b52      	ldr	r3, [pc, #328]	; (1000e0e0 <at_ble_init+0x160>)
1000df96:	2640      	movs	r6, #64	; 0x40
1000df98:	801a      	strh	r2, [r3, #0]
1000df9a:	2300      	movs	r3, #0
1000df9c:	4a51      	ldr	r2, [pc, #324]	; (1000e0e4 <at_ble_init+0x164>)
1000df9e:	6013      	str	r3, [r2, #0]
1000dfa0:	4a51      	ldr	r2, [pc, #324]	; (1000e0e8 <at_ble_init+0x168>)
1000dfa2:	7013      	strb	r3, [r2, #0]
1000dfa4:	4a51      	ldr	r2, [pc, #324]	; (1000e0ec <at_ble_init+0x16c>)
1000dfa6:	7013      	strb	r3, [r2, #0]
1000dfa8:	4b51      	ldr	r3, [pc, #324]	; (1000e0f0 <at_ble_init+0x170>)
1000dfaa:	4798      	blx	r3
1000dfac:	4b51      	ldr	r3, [pc, #324]	; (1000e0f4 <at_ble_init+0x174>)
1000dfae:	4798      	blx	r3
1000dfb0:	4b51      	ldr	r3, [pc, #324]	; (1000e0f8 <at_ble_init+0x178>)
1000dfb2:	4798      	blx	r3
1000dfb4:	4b51      	ldr	r3, [pc, #324]	; (1000e0fc <at_ble_init+0x17c>)
1000dfb6:	4798      	blx	r3
1000dfb8:	2c00      	cmp	r4, #0
1000dfba:	d100      	bne.n	1000dfbe <at_ble_init+0x3e>
1000dfbc:	e089      	b.n	1000e0d2 <at_ble_init+0x152>
1000dfbe:	68a3      	ldr	r3, [r4, #8]
1000dfc0:	2b00      	cmp	r3, #0
1000dfc2:	d100      	bne.n	1000dfc6 <at_ble_init+0x46>
1000dfc4:	e085      	b.n	1000e0d2 <at_ble_init+0x152>
1000dfc6:	6923      	ldr	r3, [r4, #16]
1000dfc8:	2b00      	cmp	r3, #0
1000dfca:	d100      	bne.n	1000dfce <at_ble_init+0x4e>
1000dfcc:	e081      	b.n	1000e0d2 <at_ble_init+0x152>
1000dfce:	6820      	ldr	r0, [r4, #0]
1000dfd0:	2800      	cmp	r0, #0
1000dfd2:	d102      	bne.n	1000dfda <at_ble_init+0x5a>
1000dfd4:	6863      	ldr	r3, [r4, #4]
1000dfd6:	2b00      	cmp	r3, #0
1000dfd8:	d17b      	bne.n	1000e0d2 <at_ble_init+0x152>
1000dfda:	4b49      	ldr	r3, [pc, #292]	; (1000e100 <at_ble_init+0x180>)
1000dfdc:	6861      	ldr	r1, [r4, #4]
1000dfde:	4798      	blx	r3
1000dfe0:	4b48      	ldr	r3, [pc, #288]	; (1000e104 <at_ble_init+0x184>)
1000dfe2:	4798      	blx	r3
1000dfe4:	2801      	cmp	r0, #1
1000dfe6:	d901      	bls.n	1000dfec <at_ble_init+0x6c>
1000dfe8:	26e2      	movs	r6, #226	; 0xe2
1000dfea:	e072      	b.n	1000e0d2 <at_ble_init+0x152>
1000dfec:	4846      	ldr	r0, [pc, #280]	; (1000e108 <at_ble_init+0x188>)
1000dfee:	4b47      	ldr	r3, [pc, #284]	; (1000e10c <at_ble_init+0x18c>)
1000dff0:	4798      	blx	r3
1000dff2:	2800      	cmp	r0, #0
1000dff4:	d1f8      	bne.n	1000dfe8 <at_ble_init+0x68>
1000dff6:	1c20      	adds	r0, r4, #0
1000dff8:	4b45      	ldr	r3, [pc, #276]	; (1000e110 <at_ble_init+0x190>)
1000dffa:	4798      	blx	r3
1000dffc:	68e0      	ldr	r0, [r4, #12]
1000dffe:	68a1      	ldr	r1, [r4, #8]
1000e000:	4b44      	ldr	r3, [pc, #272]	; (1000e114 <at_ble_init+0x194>)
1000e002:	4798      	blx	r3
1000e004:	466b      	mov	r3, sp
1000e006:	2201      	movs	r2, #1
1000e008:	1cdc      	adds	r4, r3, #3
1000e00a:	1c20      	adds	r0, r4, #0
1000e00c:	a901      	add	r1, sp, #4
1000e00e:	4252      	negs	r2, r2
1000e010:	4b41      	ldr	r3, [pc, #260]	; (1000e118 <at_ble_init+0x198>)
1000e012:	4798      	blx	r3
1000e014:	2800      	cmp	r0, #0
1000e016:	d102      	bne.n	1000e01e <at_ble_init+0x9e>
1000e018:	7823      	ldrb	r3, [r4, #0]
1000e01a:	2b39      	cmp	r3, #57	; 0x39
1000e01c:	d1f2      	bne.n	1000e004 <at_ble_init+0x84>
1000e01e:	4b3f      	ldr	r3, [pc, #252]	; (1000e11c <at_ble_init+0x19c>)
1000e020:	4798      	blx	r3
1000e022:	1e06      	subs	r6, r0, #0
1000e024:	d155      	bne.n	1000e0d2 <at_ble_init+0x152>
1000e026:	1c03      	adds	r3, r0, #0
1000e028:	2101      	movs	r1, #1
1000e02a:	4a3d      	ldr	r2, [pc, #244]	; (1000e120 <at_ble_init+0x1a0>)
1000e02c:	4249      	negs	r1, r1
1000e02e:	189a      	adds	r2, r3, r2
1000e030:	3312      	adds	r3, #18
1000e032:	8151      	strh	r1, [r2, #10]
1000e034:	2b90      	cmp	r3, #144	; 0x90
1000e036:	d1f7      	bne.n	1000e028 <at_ble_init+0xa8>
1000e038:	4c3a      	ldr	r4, [pc, #232]	; (1000e124 <at_ble_init+0x1a4>)
1000e03a:	3b81      	subs	r3, #129	; 0x81
1000e03c:	7023      	strb	r3, [r4, #0]
1000e03e:	4b3a      	ldr	r3, [pc, #232]	; (1000e128 <at_ble_init+0x1a8>)
1000e040:	4a3a      	ldr	r2, [pc, #232]	; (1000e12c <at_ble_init+0x1ac>)
1000e042:	8063      	strh	r3, [r4, #2]
1000e044:	2300      	movs	r3, #0
1000e046:	7123      	strb	r3, [r4, #4]
1000e048:	3301      	adds	r3, #1
1000e04a:	1e58      	subs	r0, r3, #1
1000e04c:	0119      	lsls	r1, r3, #4
1000e04e:	4301      	orrs	r1, r0
1000e050:	3302      	adds	r3, #2
1000e052:	7011      	strb	r1, [r2, #0]
1000e054:	3201      	adds	r2, #1
1000e056:	2b21      	cmp	r3, #33	; 0x21
1000e058:	d1f7      	bne.n	1000e04a <at_ble_init+0xca>
1000e05a:	33e0      	adds	r3, #224	; 0xe0
1000e05c:	33ff      	adds	r3, #255	; 0xff
1000e05e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e060:	1c23      	adds	r3, r4, #0
1000e062:	2500      	movs	r5, #0
1000e064:	3373      	adds	r3, #115	; 0x73
1000e066:	701d      	strb	r5, [r3, #0]
1000e068:	1c23      	adds	r3, r4, #0
1000e06a:	3372      	adds	r3, #114	; 0x72
1000e06c:	701d      	strb	r5, [r3, #0]
1000e06e:	1c23      	adds	r3, r4, #0
1000e070:	3376      	adds	r3, #118	; 0x76
1000e072:	701d      	strb	r5, [r3, #0]
1000e074:	1c23      	adds	r3, r4, #0
1000e076:	33cc      	adds	r3, #204	; 0xcc
1000e078:	801d      	strh	r5, [r3, #0]
1000e07a:	1c22      	adds	r2, r4, #0
1000e07c:	23a0      	movs	r3, #160	; 0xa0
1000e07e:	32d0      	adds	r2, #208	; 0xd0
1000e080:	005b      	lsls	r3, r3, #1
1000e082:	8013      	strh	r3, [r2, #0]
1000e084:	1c22      	adds	r2, r4, #0
1000e086:	32ce      	adds	r2, #206	; 0xce
1000e088:	8013      	strh	r3, [r2, #0]
1000e08a:	1c23      	adds	r3, r4, #0
1000e08c:	33d2      	adds	r3, #210	; 0xd2
1000e08e:	801d      	strh	r5, [r3, #0]
1000e090:	22fa      	movs	r2, #250	; 0xfa
1000e092:	1c23      	adds	r3, r4, #0
1000e094:	0052      	lsls	r2, r2, #1
1000e096:	33d4      	adds	r3, #212	; 0xd4
1000e098:	801a      	strh	r2, [r3, #0]
1000e09a:	1c23      	adds	r3, r4, #0
1000e09c:	33d6      	adds	r3, #214	; 0xd6
1000e09e:	701d      	strb	r5, [r3, #0]
1000e0a0:	1c20      	adds	r0, r4, #0
1000e0a2:	4b23      	ldr	r3, [pc, #140]	; (1000e130 <at_ble_init+0x1b0>)
1000e0a4:	76e5      	strb	r5, [r4, #27]
1000e0a6:	7725      	strb	r5, [r4, #28]
1000e0a8:	7765      	strb	r5, [r4, #29]
1000e0aa:	77a5      	strb	r5, [r4, #30]
1000e0ac:	77e5      	strb	r5, [r4, #31]
1000e0ae:	8425      	strh	r5, [r4, #32]
1000e0b0:	8465      	strh	r5, [r4, #34]	; 0x22
1000e0b2:	4798      	blx	r3
1000e0b4:	1c23      	adds	r3, r4, #0
1000e0b6:	2207      	movs	r2, #7
1000e0b8:	3374      	adds	r3, #116	; 0x74
1000e0ba:	701a      	strb	r2, [r3, #0]
1000e0bc:	1c23      	adds	r3, r4, #0
1000e0be:	3204      	adds	r2, #4
1000e0c0:	33aa      	adds	r3, #170	; 0xaa
1000e0c2:	801a      	strh	r2, [r3, #0]
1000e0c4:	1c2b      	adds	r3, r5, #0
1000e0c6:	5d7a      	ldrb	r2, [r7, r5]
1000e0c8:	33ac      	adds	r3, #172	; 0xac
1000e0ca:	3501      	adds	r5, #1
1000e0cc:	54e2      	strb	r2, [r4, r3]
1000e0ce:	2d0b      	cmp	r5, #11
1000e0d0:	d1f8      	bne.n	1000e0c4 <at_ble_init+0x144>
1000e0d2:	1c30      	adds	r0, r6, #0
1000e0d4:	b007      	add	sp, #28
1000e0d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e0d8:	10013ca8 	.word	0x10013ca8
1000e0dc:	10011bb7 	.word	0x10011bb7
1000e0e0:	100167cc 	.word	0x100167cc
1000e0e4:	100158fc 	.word	0x100158fc
1000e0e8:	1001585c 	.word	0x1001585c
1000e0ec:	10013dd8 	.word	0x10013dd8
1000e0f0:	10010735 	.word	0x10010735
1000e0f4:	1000e3f1 	.word	0x1000e3f1
1000e0f8:	1000ea51 	.word	0x1000ea51
1000e0fc:	1000ed05 	.word	0x1000ed05
1000e100:	1000ea8d 	.word	0x1000ea8d
1000e104:	1000cb19 	.word	0x1000cb19
1000e108:	1000f005 	.word	0x1000f005
1000e10c:	1000cd5d 	.word	0x1000cd5d
1000e110:	1000f0ad 	.word	0x1000f0ad
1000e114:	1000d66d 	.word	0x1000d66d
1000e118:	1000d729 	.word	0x1000d729
1000e11c:	1000fc75 	.word	0x1000fc75
1000e120:	100167ce 	.word	0x100167ce
1000e124:	1001685e 	.word	0x1001685e
1000e128:	00003a98 	.word	0x00003a98
1000e12c:	10016869 	.word	0x10016869
1000e130:	1000def1 	.word	0x1000def1

1000e134 <at_ble_addr_set>:
1000e134:	b538      	push	{r3, r4, r5, lr}
1000e136:	1c45      	adds	r5, r0, #1
1000e138:	1c03      	adds	r3, r0, #0
1000e13a:	20cf      	movs	r0, #207	; 0xcf
1000e13c:	2d00      	cmp	r5, #0
1000e13e:	d018      	beq.n	1000e172 <at_ble_addr_set+0x3e>
1000e140:	781a      	ldrb	r2, [r3, #0]
1000e142:	2a03      	cmp	r2, #3
1000e144:	d815      	bhi.n	1000e172 <at_ble_addr_set+0x3e>
1000e146:	2a01      	cmp	r2, #1
1000e148:	d102      	bne.n	1000e150 <at_ble_addr_set+0x1c>
1000e14a:	785a      	ldrb	r2, [r3, #1]
1000e14c:	2a00      	cmp	r2, #0
1000e14e:	d010      	beq.n	1000e172 <at_ble_addr_set+0x3e>
1000e150:	1c1c      	adds	r4, r3, #0
1000e152:	1c29      	adds	r1, r5, #0
1000e154:	2206      	movs	r2, #6
1000e156:	4b07      	ldr	r3, [pc, #28]	; (1000e174 <at_ble_addr_set+0x40>)
1000e158:	4807      	ldr	r0, [pc, #28]	; (1000e178 <at_ble_addr_set+0x44>)
1000e15a:	4798      	blx	r3
1000e15c:	7823      	ldrb	r3, [r4, #0]
1000e15e:	4807      	ldr	r0, [pc, #28]	; (1000e17c <at_ble_addr_set+0x48>)
1000e160:	7103      	strb	r3, [r0, #4]
1000e162:	4b07      	ldr	r3, [pc, #28]	; (1000e180 <at_ble_addr_set+0x4c>)
1000e164:	4798      	blx	r3
1000e166:	7823      	ldrb	r3, [r4, #0]
1000e168:	2b00      	cmp	r3, #0
1000e16a:	d102      	bne.n	1000e172 <at_ble_addr_set+0x3e>
1000e16c:	1c28      	adds	r0, r5, #0
1000e16e:	4b05      	ldr	r3, [pc, #20]	; (1000e184 <at_ble_addr_set+0x50>)
1000e170:	4798      	blx	r3
1000e172:	bd38      	pop	{r3, r4, r5, pc}
1000e174:	10011bb7 	.word	0x10011bb7
1000e178:	10016863 	.word	0x10016863
1000e17c:	1001685e 	.word	0x1001685e
1000e180:	1000def1 	.word	0x1000def1
1000e184:	1000f131 	.word	0x1000f131

1000e188 <at_ble_adv_data_set>:
1000e188:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e18a:	4684      	mov	ip, r0
1000e18c:	1c0f      	adds	r7, r1, #0
1000e18e:	1c16      	adds	r6, r2, #0
1000e190:	1c1c      	adds	r4, r3, #0
1000e192:	2800      	cmp	r0, #0
1000e194:	d102      	bne.n	1000e19c <at_ble_adv_data_set+0x14>
1000e196:	20e2      	movs	r0, #226	; 0xe2
1000e198:	2a00      	cmp	r2, #0
1000e19a:	d02b      	beq.n	1000e1f4 <at_ble_adv_data_set+0x6c>
1000e19c:	20cf      	movs	r0, #207	; 0xcf
1000e19e:	2f1f      	cmp	r7, #31
1000e1a0:	d828      	bhi.n	1000e1f4 <at_ble_adv_data_set+0x6c>
1000e1a2:	2c1f      	cmp	r4, #31
1000e1a4:	d826      	bhi.n	1000e1f4 <at_ble_adv_data_set+0x6c>
1000e1a6:	4663      	mov	r3, ip
1000e1a8:	2b00      	cmp	r3, #0
1000e1aa:	d00e      	beq.n	1000e1ca <at_ble_adv_data_set+0x42>
1000e1ac:	4812      	ldr	r0, [pc, #72]	; (1000e1f8 <at_ble_adv_data_set+0x70>)
1000e1ae:	4d13      	ldr	r5, [pc, #76]	; (1000e1fc <at_ble_adv_data_set+0x74>)
1000e1b0:	2f00      	cmp	r7, #0
1000e1b2:	d104      	bne.n	1000e1be <at_ble_adv_data_set+0x36>
1000e1b4:	1c39      	adds	r1, r7, #0
1000e1b6:	221f      	movs	r2, #31
1000e1b8:	4b11      	ldr	r3, [pc, #68]	; (1000e200 <at_ble_adv_data_set+0x78>)
1000e1ba:	4798      	blx	r3
1000e1bc:	e003      	b.n	1000e1c6 <at_ble_adv_data_set+0x3e>
1000e1be:	4661      	mov	r1, ip
1000e1c0:	1c3a      	adds	r2, r7, #0
1000e1c2:	4b10      	ldr	r3, [pc, #64]	; (1000e204 <at_ble_adv_data_set+0x7c>)
1000e1c4:	4798      	blx	r3
1000e1c6:	3572      	adds	r5, #114	; 0x72
1000e1c8:	702f      	strb	r7, [r5, #0]
1000e1ca:	1e30      	subs	r0, r6, #0
1000e1cc:	d012      	beq.n	1000e1f4 <at_ble_adv_data_set+0x6c>
1000e1ce:	4d0b      	ldr	r5, [pc, #44]	; (1000e1fc <at_ble_adv_data_set+0x74>)
1000e1d0:	480d      	ldr	r0, [pc, #52]	; (1000e208 <at_ble_adv_data_set+0x80>)
1000e1d2:	2c00      	cmp	r4, #0
1000e1d4:	d107      	bne.n	1000e1e6 <at_ble_adv_data_set+0x5e>
1000e1d6:	1c21      	adds	r1, r4, #0
1000e1d8:	221f      	movs	r2, #31
1000e1da:	4b09      	ldr	r3, [pc, #36]	; (1000e200 <at_ble_adv_data_set+0x78>)
1000e1dc:	3573      	adds	r5, #115	; 0x73
1000e1de:	4798      	blx	r3
1000e1e0:	702c      	strb	r4, [r5, #0]
1000e1e2:	1c20      	adds	r0, r4, #0
1000e1e4:	e006      	b.n	1000e1f4 <at_ble_adv_data_set+0x6c>
1000e1e6:	1c31      	adds	r1, r6, #0
1000e1e8:	1c22      	adds	r2, r4, #0
1000e1ea:	4b06      	ldr	r3, [pc, #24]	; (1000e204 <at_ble_adv_data_set+0x7c>)
1000e1ec:	4798      	blx	r3
1000e1ee:	2000      	movs	r0, #0
1000e1f0:	3573      	adds	r5, #115	; 0x73
1000e1f2:	702c      	strb	r4, [r5, #0]
1000e1f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e1f6:	46c0      	nop			; (mov r8, r8)
1000e1f8:	10016892 	.word	0x10016892
1000e1fc:	1001685e 	.word	0x1001685e
1000e200:	10011bc9 	.word	0x10011bc9
1000e204:	10011bb7 	.word	0x10011bb7
1000e208:	100168b1 	.word	0x100168b1

1000e20c <at_ble_adv_start>:
1000e20c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e20e:	b091      	sub	sp, #68	; 0x44
1000e210:	1c1f      	adds	r7, r3, #0
1000e212:	ab16      	add	r3, sp, #88	; 0x58
1000e214:	881d      	ldrh	r5, [r3, #0]
1000e216:	ab17      	add	r3, sp, #92	; 0x5c
1000e218:	881b      	ldrh	r3, [r3, #0]
1000e21a:	910d      	str	r1, [sp, #52]	; 0x34
1000e21c:	930e      	str	r3, [sp, #56]	; 0x38
1000e21e:	ab18      	add	r3, sp, #96	; 0x60
1000e220:	781b      	ldrb	r3, [r3, #0]
1000e222:	1c04      	adds	r4, r0, #0
1000e224:	930f      	str	r3, [sp, #60]	; 0x3c
1000e226:	4b42      	ldr	r3, [pc, #264]	; (1000e330 <at_ble_adv_start+0x124>)
1000e228:	1c16      	adds	r6, r2, #0
1000e22a:	3373      	adds	r3, #115	; 0x73
1000e22c:	781b      	ldrb	r3, [r3, #0]
1000e22e:	20cf      	movs	r0, #207	; 0xcf
1000e230:	930c      	str	r3, [sp, #48]	; 0x30
1000e232:	2c01      	cmp	r4, #1
1000e234:	d103      	bne.n	1000e23e <at_ble_adv_start+0x32>
1000e236:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e238:	2b00      	cmp	r3, #0
1000e23a:	d176      	bne.n	1000e32a <at_ble_adv_start+0x11e>
1000e23c:	e024      	b.n	1000e288 <at_ble_adv_start+0x7c>
1000e23e:	2c04      	cmp	r4, #4
1000e240:	d873      	bhi.n	1000e32a <at_ble_adv_start+0x11e>
1000e242:	2380      	movs	r3, #128	; 0x80
1000e244:	01db      	lsls	r3, r3, #7
1000e246:	429d      	cmp	r5, r3
1000e248:	d86f      	bhi.n	1000e32a <at_ble_adv_start+0x11e>
1000e24a:	2c00      	cmp	r4, #0
1000e24c:	d102      	bne.n	1000e254 <at_ble_adv_start+0x48>
1000e24e:	2d1f      	cmp	r5, #31
1000e250:	d96b      	bls.n	1000e32a <at_ble_adv_start+0x11e>
1000e252:	e003      	b.n	1000e25c <at_ble_adv_start+0x50>
1000e254:	2d9f      	cmp	r5, #159	; 0x9f
1000e256:	d801      	bhi.n	1000e25c <at_ble_adv_start+0x50>
1000e258:	2c01      	cmp	r4, #1
1000e25a:	d166      	bne.n	1000e32a <at_ble_adv_start+0x11e>
1000e25c:	2f00      	cmp	r7, #0
1000e25e:	d009      	beq.n	1000e274 <at_ble_adv_start+0x68>
1000e260:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e262:	20cf      	movs	r0, #207	; 0xcf
1000e264:	3b01      	subs	r3, #1
1000e266:	2b01      	cmp	r3, #1
1000e268:	d95f      	bls.n	1000e32a <at_ble_adv_start+0x11e>
1000e26a:	2c01      	cmp	r4, #1
1000e26c:	d102      	bne.n	1000e274 <at_ble_adv_start+0x68>
1000e26e:	2d00      	cmp	r5, #0
1000e270:	d100      	bne.n	1000e274 <at_ble_adv_start+0x68>
1000e272:	3520      	adds	r5, #32
1000e274:	4b2f      	ldr	r3, [pc, #188]	; (1000e334 <at_ble_adv_start+0x128>)
1000e276:	4798      	blx	r3
1000e278:	1c01      	adds	r1, r0, #0
1000e27a:	2e00      	cmp	r6, #0
1000e27c:	d043      	beq.n	1000e306 <at_ble_adv_start+0xfa>
1000e27e:	7833      	ldrb	r3, [r6, #0]
1000e280:	1e60      	subs	r0, r4, #1
1000e282:	2b00      	cmp	r3, #0
1000e284:	d109      	bne.n	1000e29a <at_ble_adv_start+0x8e>
1000e286:	e03b      	b.n	1000e300 <at_ble_adv_start+0xf4>
1000e288:	2380      	movs	r3, #128	; 0x80
1000e28a:	01db      	lsls	r3, r3, #7
1000e28c:	429d      	cmp	r5, r3
1000e28e:	d84c      	bhi.n	1000e32a <at_ble_adv_start+0x11e>
1000e290:	2e00      	cmp	r6, #0
1000e292:	d04a      	beq.n	1000e32a <at_ble_adv_start+0x11e>
1000e294:	2f00      	cmp	r7, #0
1000e296:	d1e3      	bne.n	1000e260 <at_ble_adv_start+0x54>
1000e298:	e02b      	b.n	1000e2f2 <at_ble_adv_start+0xe6>
1000e29a:	2301      	movs	r3, #1
1000e29c:	2803      	cmp	r0, #3
1000e29e:	d93a      	bls.n	1000e316 <at_ble_adv_start+0x10a>
1000e2a0:	200d      	movs	r0, #13
1000e2a2:	1c72      	adds	r2, r6, #1
1000e2a4:	e002      	b.n	1000e2ac <at_ble_adv_start+0xa0>
1000e2a6:	200e      	movs	r0, #14
1000e2a8:	1e32      	subs	r2, r6, #0
1000e2aa:	d1fa      	bne.n	1000e2a2 <at_ble_adv_start+0x96>
1000e2ac:	4c20      	ldr	r4, [pc, #128]	; (1000e330 <at_ble_adv_start+0x124>)
1000e2ae:	3474      	adds	r4, #116	; 0x74
1000e2b0:	7826      	ldrb	r6, [r4, #0]
1000e2b2:	2407      	movs	r4, #7
1000e2b4:	2e00      	cmp	r6, #0
1000e2b6:	d000      	beq.n	1000e2ba <at_ble_adv_start+0xae>
1000e2b8:	1c34      	adds	r4, r6, #0
1000e2ba:	9200      	str	r2, [sp, #0]
1000e2bc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e2be:	9403      	str	r4, [sp, #12]
1000e2c0:	9204      	str	r2, [sp, #16]
1000e2c2:	4a1b      	ldr	r2, [pc, #108]	; (1000e330 <at_ble_adv_start+0x124>)
1000e2c4:	9501      	str	r5, [sp, #4]
1000e2c6:	9502      	str	r5, [sp, #8]
1000e2c8:	9705      	str	r7, [sp, #20]
1000e2ca:	3272      	adds	r2, #114	; 0x72
1000e2cc:	7812      	ldrb	r2, [r2, #0]
1000e2ce:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e2d0:	9206      	str	r2, [sp, #24]
1000e2d2:	4a19      	ldr	r2, [pc, #100]	; (1000e338 <at_ble_adv_start+0x12c>)
1000e2d4:	9207      	str	r2, [sp, #28]
1000e2d6:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e2d8:	9208      	str	r2, [sp, #32]
1000e2da:	4a18      	ldr	r2, [pc, #96]	; (1000e33c <at_ble_adv_start+0x130>)
1000e2dc:	9209      	str	r2, [sp, #36]	; 0x24
1000e2de:	2264      	movs	r2, #100	; 0x64
1000e2e0:	4362      	muls	r2, r4
1000e2e2:	b292      	uxth	r2, r2
1000e2e4:	920a      	str	r2, [sp, #40]	; 0x28
1000e2e6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e2e8:	4c15      	ldr	r4, [pc, #84]	; (1000e340 <at_ble_adv_start+0x134>)
1000e2ea:	920b      	str	r2, [sp, #44]	; 0x2c
1000e2ec:	4a15      	ldr	r2, [pc, #84]	; (1000e344 <at_ble_adv_start+0x138>)
1000e2ee:	47a0      	blx	r4
1000e2f0:	e01b      	b.n	1000e32a <at_ble_adv_start+0x11e>
1000e2f2:	2d00      	cmp	r5, #0
1000e2f4:	d1be      	bne.n	1000e274 <at_ble_adv_start+0x68>
1000e2f6:	4b0f      	ldr	r3, [pc, #60]	; (1000e334 <at_ble_adv_start+0x128>)
1000e2f8:	4798      	blx	r3
1000e2fa:	2520      	movs	r5, #32
1000e2fc:	1c01      	adds	r1, r0, #0
1000e2fe:	e7be      	b.n	1000e27e <at_ble_adv_start+0x72>
1000e300:	2803      	cmp	r0, #3
1000e302:	d8cd      	bhi.n	1000e2a0 <at_ble_adv_start+0x94>
1000e304:	e006      	b.n	1000e314 <at_ble_adv_start+0x108>
1000e306:	1e60      	subs	r0, r4, #1
1000e308:	2803      	cmp	r0, #3
1000e30a:	d903      	bls.n	1000e314 <at_ble_adv_start+0x108>
1000e30c:	1c33      	adds	r3, r6, #0
1000e30e:	200d      	movs	r0, #13
1000e310:	1c32      	adds	r2, r6, #0
1000e312:	e7cb      	b.n	1000e2ac <at_ble_adv_start+0xa0>
1000e314:	2300      	movs	r3, #0
1000e316:	f002 fb7f 	bl	10010a18 <__gnu_thumb1_case_sqi>
1000e31a:	06c6      	.short	0x06c6
1000e31c:	0204      	.short	0x0204
1000e31e:	200f      	movs	r0, #15
1000e320:	e7c2      	b.n	1000e2a8 <at_ble_adv_start+0x9c>
1000e322:	2200      	movs	r2, #0
1000e324:	920c      	str	r2, [sp, #48]	; 0x30
1000e326:	200c      	movs	r0, #12
1000e328:	e7be      	b.n	1000e2a8 <at_ble_adv_start+0x9c>
1000e32a:	b011      	add	sp, #68	; 0x44
1000e32c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e32e:	46c0      	nop			; (mov r8, r8)
1000e330:	1001685e 	.word	0x1001685e
1000e334:	100101c1 	.word	0x100101c1
1000e338:	10016892 	.word	0x10016892
1000e33c:	100168b1 	.word	0x100168b1
1000e340:	100100a1 	.word	0x100100a1
1000e344:	00003a98 	.word	0x00003a98

1000e348 <at_ble_adv_stop>:
1000e348:	b508      	push	{r3, lr}
1000e34a:	4b01      	ldr	r3, [pc, #4]	; (1000e350 <at_ble_adv_stop+0x8>)
1000e34c:	4798      	blx	r3
1000e34e:	bd08      	pop	{r3, pc}
1000e350:	1000fecd 	.word	0x1000fecd

1000e354 <at_ble_scan_stop>:
1000e354:	b510      	push	{r4, lr}
1000e356:	4b05      	ldr	r3, [pc, #20]	; (1000e36c <at_ble_scan_stop+0x18>)
1000e358:	4798      	blx	r3
1000e35a:	1e04      	subs	r4, r0, #0
1000e35c:	d103      	bne.n	1000e366 <at_ble_scan_stop+0x12>
1000e35e:	20d1      	movs	r0, #209	; 0xd1
1000e360:	4b03      	ldr	r3, [pc, #12]	; (1000e370 <at_ble_scan_stop+0x1c>)
1000e362:	0100      	lsls	r0, r0, #4
1000e364:	4798      	blx	r3
1000e366:	1c20      	adds	r0, r4, #0
1000e368:	bd10      	pop	{r4, pc}
1000e36a:	46c0      	nop			; (mov r8, r8)
1000e36c:	1000fecd 	.word	0x1000fecd
1000e370:	1000de01 	.word	0x1000de01

1000e374 <at_ble_disconnect>:
1000e374:	b538      	push	{r3, r4, r5, lr}
1000e376:	1c04      	adds	r4, r0, #0
1000e378:	4b04      	ldr	r3, [pc, #16]	; (1000e38c <at_ble_disconnect+0x18>)
1000e37a:	1c08      	adds	r0, r1, #0
1000e37c:	1c21      	adds	r1, r4, #0
1000e37e:	4798      	blx	r3
1000e380:	1c05      	adds	r5, r0, #0
1000e382:	4b03      	ldr	r3, [pc, #12]	; (1000e390 <at_ble_disconnect+0x1c>)
1000e384:	1c20      	adds	r0, r4, #0
1000e386:	4798      	blx	r3
1000e388:	1c28      	adds	r0, r5, #0
1000e38a:	bd38      	pop	{r3, r4, r5, pc}
1000e38c:	1000f545 	.word	0x1000f545
1000e390:	1000de45 	.word	0x1000de45

1000e394 <at_ble_conn_update_reply>:
1000e394:	b510      	push	{r4, lr}
1000e396:	4c01      	ldr	r4, [pc, #4]	; (1000e39c <at_ble_conn_update_reply+0x8>)
1000e398:	47a0      	blx	r4
1000e39a:	bd10      	pop	{r4, pc}
1000e39c:	1000fa35 	.word	0x1000fa35

1000e3a0 <at_ble_random_address_resolve>:
1000e3a0:	b510      	push	{r4, lr}
1000e3a2:	23cf      	movs	r3, #207	; 0xcf
1000e3a4:	2800      	cmp	r0, #0
1000e3a6:	d00a      	beq.n	1000e3be <at_ble_random_address_resolve+0x1e>
1000e3a8:	2900      	cmp	r1, #0
1000e3aa:	d008      	beq.n	1000e3be <at_ble_random_address_resolve+0x1e>
1000e3ac:	2a00      	cmp	r2, #0
1000e3ae:	d006      	beq.n	1000e3be <at_ble_random_address_resolve+0x1e>
1000e3b0:	780c      	ldrb	r4, [r1, #0]
1000e3b2:	2c02      	cmp	r4, #2
1000e3b4:	d103      	bne.n	1000e3be <at_ble_random_address_resolve+0x1e>
1000e3b6:	4b03      	ldr	r3, [pc, #12]	; (1000e3c4 <at_ble_random_address_resolve+0x24>)
1000e3b8:	3101      	adds	r1, #1
1000e3ba:	4798      	blx	r3
1000e3bc:	2300      	movs	r3, #0
1000e3be:	1c18      	adds	r0, r3, #0
1000e3c0:	bd10      	pop	{r4, pc}
1000e3c2:	46c0      	nop			; (mov r8, r8)
1000e3c4:	10010261 	.word	0x10010261

1000e3c8 <at_ble_uuid_type2len>:
1000e3c8:	23cf      	movs	r3, #207	; 0xcf
1000e3ca:	2802      	cmp	r0, #2
1000e3cc:	d801      	bhi.n	1000e3d2 <at_ble_uuid_type2len+0xa>
1000e3ce:	4b02      	ldr	r3, [pc, #8]	; (1000e3d8 <at_ble_uuid_type2len+0x10>)
1000e3d0:	5c1b      	ldrb	r3, [r3, r0]
1000e3d2:	1c18      	adds	r0, r3, #0
1000e3d4:	4770      	bx	lr
1000e3d6:	46c0      	nop			; (mov r8, r8)
1000e3d8:	10013cb3 	.word	0x10013cb3

1000e3dc <at_ble_uuid_len2type>:
1000e3dc:	1e83      	subs	r3, r0, #2
1000e3de:	b2db      	uxtb	r3, r3
1000e3e0:	2003      	movs	r0, #3
1000e3e2:	2b0e      	cmp	r3, #14
1000e3e4:	d801      	bhi.n	1000e3ea <at_ble_uuid_len2type+0xe>
1000e3e6:	4a01      	ldr	r2, [pc, #4]	; (1000e3ec <at_ble_uuid_len2type+0x10>)
1000e3e8:	5cd0      	ldrb	r0, [r2, r3]
1000e3ea:	4770      	bx	lr
1000e3ec:	10013cb6 	.word	0x10013cb6

1000e3f0 <init_gatt_client_module>:
1000e3f0:	2200      	movs	r2, #0
1000e3f2:	4b01      	ldr	r3, [pc, #4]	; (1000e3f8 <init_gatt_client_module+0x8>)
1000e3f4:	801a      	strh	r2, [r3, #0]
1000e3f6:	4770      	bx	lr
1000e3f8:	10015854 	.word	0x10015854

1000e3fc <db_searchATT>:
1000e3fc:	b570      	push	{r4, r5, r6, lr}
1000e3fe:	1c05      	adds	r5, r0, #0
1000e400:	2400      	movs	r4, #0
1000e402:	4b0c      	ldr	r3, [pc, #48]	; (1000e434 <db_searchATT+0x38>)
1000e404:	6819      	ldr	r1, [r3, #0]
1000e406:	4b0c      	ldr	r3, [pc, #48]	; (1000e438 <db_searchATT+0x3c>)
1000e408:	681e      	ldr	r6, [r3, #0]
1000e40a:	428c      	cmp	r4, r1
1000e40c:	dc10      	bgt.n	1000e430 <db_searchATT+0x34>
1000e40e:	200c      	movs	r0, #12
1000e410:	1863      	adds	r3, r4, r1
1000e412:	0fda      	lsrs	r2, r3, #31
1000e414:	18d3      	adds	r3, r2, r3
1000e416:	1c02      	adds	r2, r0, #0
1000e418:	105b      	asrs	r3, r3, #1
1000e41a:	435a      	muls	r2, r3
1000e41c:	18b0      	adds	r0, r6, r2
1000e41e:	8802      	ldrh	r2, [r0, #0]
1000e420:	42aa      	cmp	r2, r5
1000e422:	d201      	bcs.n	1000e428 <db_searchATT+0x2c>
1000e424:	1e59      	subs	r1, r3, #1
1000e426:	e7f0      	b.n	1000e40a <db_searchATT+0xe>
1000e428:	42aa      	cmp	r2, r5
1000e42a:	d902      	bls.n	1000e432 <db_searchATT+0x36>
1000e42c:	1c5c      	adds	r4, r3, #1
1000e42e:	e7ec      	b.n	1000e40a <db_searchATT+0xe>
1000e430:	2000      	movs	r0, #0
1000e432:	bd70      	pop	{r4, r5, r6, pc}
1000e434:	10015868 	.word	0x10015868
1000e438:	10015860 	.word	0x10015860

1000e43c <att_permissions>:
1000e43c:	b530      	push	{r4, r5, lr}
1000e43e:	2403      	movs	r4, #3
1000e440:	1c05      	adds	r5, r0, #0
1000e442:	2301      	movs	r3, #1
1000e444:	4025      	ands	r5, r4
1000e446:	42a5      	cmp	r5, r4
1000e448:	d009      	beq.n	1000e45e <att_permissions+0x22>
1000e44a:	1c23      	adds	r3, r4, #0
1000e44c:	1924      	adds	r4, r4, r4
1000e44e:	4220      	tst	r0, r4
1000e450:	d105      	bne.n	1000e45e <att_permissions+0x22>
1000e452:	3b02      	subs	r3, #2
1000e454:	4218      	tst	r0, r3
1000e456:	d102      	bne.n	1000e45e <att_permissions+0x22>
1000e458:	1e4b      	subs	r3, r1, #1
1000e45a:	4199      	sbcs	r1, r3
1000e45c:	b28b      	uxth	r3, r1
1000e45e:	2130      	movs	r1, #48	; 0x30
1000e460:	4001      	ands	r1, r0
1000e462:	2930      	cmp	r1, #48	; 0x30
1000e464:	d007      	beq.n	1000e476 <att_permissions+0x3a>
1000e466:	0641      	lsls	r1, r0, #25
1000e468:	d401      	bmi.n	1000e46e <att_permissions+0x32>
1000e46a:	0681      	lsls	r1, r0, #26
1000e46c:	d501      	bpl.n	1000e472 <att_permissions+0x36>
1000e46e:	4807      	ldr	r0, [pc, #28]	; (1000e48c <att_permissions+0x50>)
1000e470:	e009      	b.n	1000e486 <att_permissions+0x4a>
1000e472:	06c1      	lsls	r1, r0, #27
1000e474:	d501      	bpl.n	1000e47a <att_permissions+0x3e>
1000e476:	4806      	ldr	r0, [pc, #24]	; (1000e490 <att_permissions+0x54>)
1000e478:	e005      	b.n	1000e486 <att_permissions+0x4a>
1000e47a:	2a00      	cmp	r2, #0
1000e47c:	d001      	beq.n	1000e482 <att_permissions+0x46>
1000e47e:	2204      	movs	r2, #4
1000e480:	4313      	orrs	r3, r2
1000e482:	2080      	movs	r0, #128	; 0x80
1000e484:	0180      	lsls	r0, r0, #6
1000e486:	4318      	orrs	r0, r3
1000e488:	bd30      	pop	{r4, r5, pc}
1000e48a:	46c0      	nop			; (mov r8, r8)
1000e48c:	0000200c 	.word	0x0000200c
1000e490:	00002004 	.word	0x00002004

1000e494 <char_permissions>:
1000e494:	b530      	push	{r4, r5, lr}
1000e496:	2300      	movs	r3, #0
1000e498:	0784      	lsls	r4, r0, #30
1000e49a:	d503      	bpl.n	1000e4a4 <char_permissions+0x10>
1000e49c:	3301      	adds	r3, #1
1000e49e:	4219      	tst	r1, r3
1000e4a0:	d100      	bne.n	1000e4a4 <char_permissions+0x10>
1000e4a2:	3302      	adds	r3, #2
1000e4a4:	0704      	lsls	r4, r0, #28
1000e4a6:	d508      	bpl.n	1000e4ba <char_permissions+0x26>
1000e4a8:	06cc      	lsls	r4, r1, #27
1000e4aa:	d501      	bpl.n	1000e4b0 <char_permissions+0x1c>
1000e4ac:	2404      	movs	r4, #4
1000e4ae:	e000      	b.n	1000e4b2 <char_permissions+0x1e>
1000e4b0:	240c      	movs	r4, #12
1000e4b2:	4323      	orrs	r3, r4
1000e4b4:	2480      	movs	r4, #128	; 0x80
1000e4b6:	01a4      	lsls	r4, r4, #6
1000e4b8:	4323      	orrs	r3, r4
1000e4ba:	0684      	lsls	r4, r0, #26
1000e4bc:	d506      	bpl.n	1000e4cc <char_permissions+0x38>
1000e4be:	2406      	movs	r4, #6
1000e4c0:	4221      	tst	r1, r4
1000e4c2:	d101      	bne.n	1000e4c8 <char_permissions+0x34>
1000e4c4:	340a      	adds	r4, #10
1000e4c6:	e000      	b.n	1000e4ca <char_permissions+0x36>
1000e4c8:	2430      	movs	r4, #48	; 0x30
1000e4ca:	4323      	orrs	r3, r4
1000e4cc:	06c4      	lsls	r4, r0, #27
1000e4ce:	d506      	bpl.n	1000e4de <char_permissions+0x4a>
1000e4d0:	2406      	movs	r4, #6
1000e4d2:	4221      	tst	r1, r4
1000e4d4:	d101      	bne.n	1000e4da <char_permissions+0x46>
1000e4d6:	343a      	adds	r4, #58	; 0x3a
1000e4d8:	e000      	b.n	1000e4dc <char_permissions+0x48>
1000e4da:	24c0      	movs	r4, #192	; 0xc0
1000e4dc:	4323      	orrs	r3, r4
1000e4de:	2480      	movs	r4, #128	; 0x80
1000e4e0:	0064      	lsls	r4, r4, #1
1000e4e2:	4220      	tst	r0, r4
1000e4e4:	d000      	beq.n	1000e4e8 <char_permissions+0x54>
1000e4e6:	4323      	orrs	r3, r4
1000e4e8:	07c4      	lsls	r4, r0, #31
1000e4ea:	d502      	bpl.n	1000e4f2 <char_permissions+0x5e>
1000e4ec:	2480      	movs	r4, #128	; 0x80
1000e4ee:	00a4      	lsls	r4, r4, #2
1000e4f0:	4323      	orrs	r3, r4
1000e4f2:	2404      	movs	r4, #4
1000e4f4:	4220      	tst	r0, r4
1000e4f6:	d006      	beq.n	1000e506 <char_permissions+0x72>
1000e4f8:	06cd      	lsls	r5, r1, #27
1000e4fa:	d400      	bmi.n	1000e4fe <char_permissions+0x6a>
1000e4fc:	240c      	movs	r4, #12
1000e4fe:	4323      	orrs	r3, r4
1000e500:	2480      	movs	r4, #128	; 0x80
1000e502:	0124      	lsls	r4, r4, #4
1000e504:	4323      	orrs	r3, r4
1000e506:	0644      	lsls	r4, r0, #25
1000e508:	d501      	bpl.n	1000e50e <char_permissions+0x7a>
1000e50a:	4c08      	ldr	r4, [pc, #32]	; (1000e52c <char_permissions+0x98>)
1000e50c:	4323      	orrs	r3, r4
1000e50e:	0600      	lsls	r0, r0, #24
1000e510:	d507      	bpl.n	1000e522 <char_permissions+0x8e>
1000e512:	2004      	movs	r0, #4
1000e514:	06c9      	lsls	r1, r1, #27
1000e516:	d400      	bmi.n	1000e51a <char_permissions+0x86>
1000e518:	200c      	movs	r0, #12
1000e51a:	4303      	orrs	r3, r0
1000e51c:	2084      	movs	r0, #132	; 0x84
1000e51e:	0180      	lsls	r0, r0, #6
1000e520:	4303      	orrs	r3, r0
1000e522:	0390      	lsls	r0, r2, #14
1000e524:	4303      	orrs	r3, r0
1000e526:	b298      	uxth	r0, r3
1000e528:	bd30      	pop	{r4, r5, pc}
1000e52a:	46c0      	nop			; (mov r8, r8)
1000e52c:	00001004 	.word	0x00001004

1000e530 <presentation_format_define>:
1000e530:	b507      	push	{r0, r1, r2, lr}
1000e532:	466a      	mov	r2, sp
1000e534:	780b      	ldrb	r3, [r1, #0]
1000e536:	7013      	strb	r3, [r2, #0]
1000e538:	784b      	ldrb	r3, [r1, #1]
1000e53a:	7053      	strb	r3, [r2, #1]
1000e53c:	884b      	ldrh	r3, [r1, #2]
1000e53e:	7093      	strb	r3, [r2, #2]
1000e540:	0a1b      	lsrs	r3, r3, #8
1000e542:	70d3      	strb	r3, [r2, #3]
1000e544:	790b      	ldrb	r3, [r1, #4]
1000e546:	7113      	strb	r3, [r2, #4]
1000e548:	88cb      	ldrh	r3, [r1, #6]
1000e54a:	2107      	movs	r1, #7
1000e54c:	7153      	strb	r3, [r2, #5]
1000e54e:	0a1b      	lsrs	r3, r3, #8
1000e550:	7193      	strb	r3, [r2, #6]
1000e552:	4b01      	ldr	r3, [pc, #4]	; (1000e558 <presentation_format_define+0x28>)
1000e554:	4798      	blx	r3
1000e556:	bd0e      	pop	{r1, r2, r3, pc}
1000e558:	100108c5 	.word	0x100108c5

1000e55c <db_addATT>:
1000e55c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e55e:	4c29      	ldr	r4, [pc, #164]	; (1000e604 <db_addATT+0xa8>)
1000e560:	1c1d      	adds	r5, r3, #0
1000e562:	6823      	ldr	r3, [r4, #0]
1000e564:	9001      	str	r0, [sp, #4]
1000e566:	26d3      	movs	r6, #211	; 0xd3
1000e568:	2b00      	cmp	r3, #0
1000e56a:	d048      	beq.n	1000e5fe <db_addATT+0xa2>
1000e56c:	1c1e      	adds	r6, r3, #0
1000e56e:	3e0c      	subs	r6, #12
1000e570:	6026      	str	r6, [r4, #0]
1000e572:	2900      	cmp	r1, #0
1000e574:	d005      	beq.n	1000e582 <db_addATT+0x26>
1000e576:	4f24      	ldr	r7, [pc, #144]	; (1000e608 <db_addATT+0xac>)
1000e578:	46bc      	mov	ip, r7
1000e57a:	4660      	mov	r0, ip
1000e57c:	683f      	ldr	r7, [r7, #0]
1000e57e:	18bf      	adds	r7, r7, r2
1000e580:	6007      	str	r7, [r0, #0]
1000e582:	4821      	ldr	r0, [pc, #132]	; (1000e608 <db_addATT+0xac>)
1000e584:	6807      	ldr	r7, [r0, #0]
1000e586:	4684      	mov	ip, r0
1000e588:	42be      	cmp	r6, r7
1000e58a:	d932      	bls.n	1000e5f2 <db_addATT+0x96>
1000e58c:	4668      	mov	r0, sp
1000e58e:	8880      	ldrh	r0, [r0, #4]
1000e590:	3b0c      	subs	r3, #12
1000e592:	8018      	strh	r0, [r3, #0]
1000e594:	6823      	ldr	r3, [r4, #0]
1000e596:	2900      	cmp	r1, #0
1000e598:	d009      	beq.n	1000e5ae <db_addATT+0x52>
1000e59a:	2a00      	cmp	r2, #0
1000e59c:	d007      	beq.n	1000e5ae <db_addATT+0x52>
1000e59e:	4660      	mov	r0, ip
1000e5a0:	6800      	ldr	r0, [r0, #0]
1000e5a2:	809a      	strh	r2, [r3, #4]
1000e5a4:	1a80      	subs	r0, r0, r2
1000e5a6:	6098      	str	r0, [r3, #8]
1000e5a8:	4b18      	ldr	r3, [pc, #96]	; (1000e60c <db_addATT+0xb0>)
1000e5aa:	4798      	blx	r3
1000e5ac:	e002      	b.n	1000e5b4 <db_addATT+0x58>
1000e5ae:	2100      	movs	r1, #0
1000e5b0:	809a      	strh	r2, [r3, #4]
1000e5b2:	6099      	str	r1, [r3, #8]
1000e5b4:	2300      	movs	r3, #0
1000e5b6:	6822      	ldr	r2, [r4, #0]
1000e5b8:	7093      	strb	r3, [r2, #2]
1000e5ba:	3303      	adds	r3, #3
1000e5bc:	402b      	ands	r3, r5
1000e5be:	2b03      	cmp	r3, #3
1000e5c0:	d001      	beq.n	1000e5c6 <db_addATT+0x6a>
1000e5c2:	076b      	lsls	r3, r5, #29
1000e5c4:	d504      	bpl.n	1000e5d0 <db_addATT+0x74>
1000e5c6:	2101      	movs	r1, #1
1000e5c8:	6822      	ldr	r2, [r4, #0]
1000e5ca:	7893      	ldrb	r3, [r2, #2]
1000e5cc:	430b      	orrs	r3, r1
1000e5ce:	7093      	strb	r3, [r2, #2]
1000e5d0:	2330      	movs	r3, #48	; 0x30
1000e5d2:	402b      	ands	r3, r5
1000e5d4:	2b30      	cmp	r3, #48	; 0x30
1000e5d6:	d001      	beq.n	1000e5dc <db_addATT+0x80>
1000e5d8:	066b      	lsls	r3, r5, #25
1000e5da:	d504      	bpl.n	1000e5e6 <db_addATT+0x8a>
1000e5dc:	2102      	movs	r1, #2
1000e5de:	6822      	ldr	r2, [r4, #0]
1000e5e0:	7893      	ldrb	r3, [r2, #2]
1000e5e2:	430b      	orrs	r3, r1
1000e5e4:	7093      	strb	r3, [r2, #2]
1000e5e6:	4a0a      	ldr	r2, [pc, #40]	; (1000e610 <db_addATT+0xb4>)
1000e5e8:	2600      	movs	r6, #0
1000e5ea:	6813      	ldr	r3, [r2, #0]
1000e5ec:	3301      	adds	r3, #1
1000e5ee:	6013      	str	r3, [r2, #0]
1000e5f0:	e005      	b.n	1000e5fe <db_addATT+0xa2>
1000e5f2:	6023      	str	r3, [r4, #0]
1000e5f4:	2611      	movs	r6, #17
1000e5f6:	2900      	cmp	r1, #0
1000e5f8:	d001      	beq.n	1000e5fe <db_addATT+0xa2>
1000e5fa:	1aba      	subs	r2, r7, r2
1000e5fc:	6002      	str	r2, [r0, #0]
1000e5fe:	1c30      	adds	r0, r6, #0
1000e600:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000e602:	46c0      	nop			; (mov r8, r8)
1000e604:	10015860 	.word	0x10015860
1000e608:	10015864 	.word	0x10015864
1000e60c:	10011bb7 	.word	0x10011bb7
1000e610:	10015868 	.word	0x10015868

1000e614 <user_description_define>:
1000e614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e616:	1c05      	adds	r5, r0, #0
1000e618:	20cf      	movs	r0, #207	; 0xcf
1000e61a:	2a00      	cmp	r2, #0
1000e61c:	d01c      	beq.n	1000e658 <user_description_define+0x44>
1000e61e:	1c14      	adds	r4, r2, #0
1000e620:	2203      	movs	r2, #3
1000e622:	1c1e      	adds	r6, r3, #0
1000e624:	400a      	ands	r2, r1
1000e626:	1c0b      	adds	r3, r1, #0
1000e628:	3a03      	subs	r2, #3
1000e62a:	4251      	negs	r1, r2
1000e62c:	4151      	adcs	r1, r2
1000e62e:	075a      	lsls	r2, r3, #29
1000e630:	0fd2      	lsrs	r2, r2, #31
1000e632:	430a      	orrs	r2, r1
1000e634:	03d2      	lsls	r2, r2, #15
1000e636:	4f09      	ldr	r7, [pc, #36]	; (1000e65c <user_description_define+0x48>)
1000e638:	1c28      	adds	r0, r5, #0
1000e63a:	2a00      	cmp	r2, #0
1000e63c:	d003      	beq.n	1000e646 <user_description_define+0x32>
1000e63e:	1c21      	adds	r1, r4, #0
1000e640:	1c32      	adds	r2, r6, #0
1000e642:	47b8      	blx	r7
1000e644:	e008      	b.n	1000e658 <user_description_define+0x44>
1000e646:	1c11      	adds	r1, r2, #0
1000e648:	47b8      	blx	r7
1000e64a:	2800      	cmp	r0, #0
1000e64c:	d104      	bne.n	1000e658 <user_description_define+0x44>
1000e64e:	1c28      	adds	r0, r5, #0
1000e650:	1c31      	adds	r1, r6, #0
1000e652:	1c22      	adds	r2, r4, #0
1000e654:	4b02      	ldr	r3, [pc, #8]	; (1000e660 <user_description_define+0x4c>)
1000e656:	4798      	blx	r3
1000e658:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e65a:	46c0      	nop			; (mov r8, r8)
1000e65c:	1000e55d 	.word	0x1000e55d
1000e660:	100108c5 	.word	0x100108c5

1000e664 <at_ble_read_authorize_reply.part.1>:
1000e664:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000e666:	4b09      	ldr	r3, [pc, #36]	; (1000e68c <at_ble_read_authorize_reply.part.1+0x28>)
1000e668:	1c05      	adds	r5, r0, #0
1000e66a:	1c08      	adds	r0, r1, #0
1000e66c:	1c0c      	adds	r4, r1, #0
1000e66e:	4798      	blx	r3
1000e670:	2800      	cmp	r0, #0
1000e672:	d009      	beq.n	1000e688 <at_ble_read_authorize_reply.part.1+0x24>
1000e674:	6882      	ldr	r2, [r0, #8]
1000e676:	2a00      	cmp	r2, #0
1000e678:	d006      	beq.n	1000e688 <at_ble_read_authorize_reply.part.1+0x24>
1000e67a:	8883      	ldrh	r3, [r0, #4]
1000e67c:	1c29      	adds	r1, r5, #0
1000e67e:	9200      	str	r2, [sp, #0]
1000e680:	1c20      	adds	r0, r4, #0
1000e682:	2200      	movs	r2, #0
1000e684:	4c02      	ldr	r4, [pc, #8]	; (1000e690 <at_ble_read_authorize_reply.part.1+0x2c>)
1000e686:	47a0      	blx	r4
1000e688:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000e68a:	46c0      	nop			; (mov r8, r8)
1000e68c:	1000e3fd 	.word	0x1000e3fd
1000e690:	1001035d 	.word	0x1001035d

1000e694 <internal_at_ble_service_define>:
1000e694:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e696:	b08b      	sub	sp, #44	; 0x2c
1000e698:	9306      	str	r3, [sp, #24]
1000e69a:	ab10      	add	r3, sp, #64	; 0x40
1000e69c:	9202      	str	r2, [sp, #8]
1000e69e:	cb04      	ldmia	r3!, {r2}
1000e6a0:	1c05      	adds	r5, r0, #0
1000e6a2:	881b      	ldrh	r3, [r3, #0]
1000e6a4:	9105      	str	r1, [sp, #20]
1000e6a6:	9303      	str	r3, [sp, #12]
1000e6a8:	ab12      	add	r3, sp, #72	; 0x48
1000e6aa:	781b      	ldrb	r3, [r3, #0]
1000e6ac:	20cf      	movs	r0, #207	; 0xcf
1000e6ae:	9304      	str	r3, [sp, #16]
1000e6b0:	2d00      	cmp	r5, #0
1000e6b2:	d100      	bne.n	1000e6b6 <internal_at_ble_service_define+0x22>
1000e6b4:	e1ca      	b.n	1000ea4c <internal_at_ble_service_define+0x3b8>
1000e6b6:	2900      	cmp	r1, #0
1000e6b8:	d100      	bne.n	1000e6bc <internal_at_ble_service_define+0x28>
1000e6ba:	e1c7      	b.n	1000ea4c <internal_at_ble_service_define+0x3b8>
1000e6bc:	2a00      	cmp	r2, #0
1000e6be:	d100      	bne.n	1000e6c2 <internal_at_ble_service_define+0x2e>
1000e6c0:	e1c4      	b.n	1000ea4c <internal_at_ble_service_define+0x3b8>
1000e6c2:	9b03      	ldr	r3, [sp, #12]
1000e6c4:	2b00      	cmp	r3, #0
1000e6c6:	d100      	bne.n	1000e6ca <internal_at_ble_service_define+0x36>
1000e6c8:	e1c0      	b.n	1000ea4c <internal_at_ble_service_define+0x3b8>
1000e6ca:	4bc9      	ldr	r3, [pc, #804]	; (1000e9f0 <internal_at_ble_service_define+0x35c>)
1000e6cc:	3004      	adds	r0, #4
1000e6ce:	681e      	ldr	r6, [r3, #0]
1000e6d0:	2e00      	cmp	r6, #0
1000e6d2:	d100      	bne.n	1000e6d6 <internal_at_ble_service_define+0x42>
1000e6d4:	e1ba      	b.n	1000ea4c <internal_at_ble_service_define+0x3b8>
1000e6d6:	2400      	movs	r4, #0
1000e6d8:	4bc6      	ldr	r3, [pc, #792]	; (1000e9f4 <internal_at_ble_service_define+0x360>)
1000e6da:	8034      	strh	r4, [r6, #0]
1000e6dc:	881b      	ldrh	r3, [r3, #0]
1000e6de:	1db7      	adds	r7, r6, #6
1000e6e0:	1c21      	adds	r1, r4, #0
1000e6e2:	2210      	movs	r2, #16
1000e6e4:	8073      	strh	r3, [r6, #2]
1000e6e6:	1c38      	adds	r0, r7, #0
1000e6e8:	4bc3      	ldr	r3, [pc, #780]	; (1000e9f8 <internal_at_ble_service_define+0x364>)
1000e6ea:	4798      	blx	r3
1000e6ec:	7828      	ldrb	r0, [r5, #0]
1000e6ee:	4bc3      	ldr	r3, [pc, #780]	; (1000e9fc <internal_at_ble_service_define+0x368>)
1000e6f0:	4798      	blx	r3
1000e6f2:	1c69      	adds	r1, r5, #1
1000e6f4:	1c02      	adds	r2, r0, #0
1000e6f6:	4bc2      	ldr	r3, [pc, #776]	; (1000ea00 <internal_at_ble_service_define+0x36c>)
1000e6f8:	1c38      	adds	r0, r7, #0
1000e6fa:	4798      	blx	r3
1000e6fc:	2204      	movs	r2, #4
1000e6fe:	782b      	ldrb	r3, [r5, #0]
1000e700:	9d02      	ldr	r5, [sp, #8]
1000e702:	011b      	lsls	r3, r3, #4
1000e704:	4313      	orrs	r3, r2
1000e706:	9a04      	ldr	r2, [sp, #16]
1000e708:	7174      	strb	r4, [r6, #5]
1000e70a:	0192      	lsls	r2, r2, #6
1000e70c:	4313      	orrs	r3, r2
1000e70e:	7133      	strb	r3, [r6, #4]
1000e710:	2316      	movs	r3, #22
1000e712:	9a06      	ldr	r2, [sp, #24]
1000e714:	3512      	adds	r5, #18
1000e716:	4353      	muls	r3, r2
1000e718:	9a02      	ldr	r2, [sp, #8]
1000e71a:	3312      	adds	r3, #18
1000e71c:	18d7      	adds	r7, r2, r3
1000e71e:	42bd      	cmp	r5, r7
1000e720:	d00f      	beq.n	1000e742 <internal_at_ble_service_define+0xae>
1000e722:	4bb8      	ldr	r3, [pc, #736]	; (1000ea04 <internal_at_ble_service_define+0x370>)
1000e724:	8829      	ldrh	r1, [r5, #0]
1000e726:	9300      	str	r3, [sp, #0]
1000e728:	230e      	movs	r3, #14
1000e72a:	aa06      	add	r2, sp, #24
1000e72c:	189b      	adds	r3, r3, r2
1000e72e:	9301      	str	r3, [sp, #4]
1000e730:	4cb5      	ldr	r4, [pc, #724]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e732:	1c30      	adds	r0, r6, #0
1000e734:	2201      	movs	r2, #1
1000e736:	2302      	movs	r3, #2
1000e738:	47a0      	blx	r4
1000e73a:	3516      	adds	r5, #22
1000e73c:	1e04      	subs	r4, r0, #0
1000e73e:	d0ee      	beq.n	1000e71e <internal_at_ble_service_define+0x8a>
1000e740:	e183      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e742:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000e744:	2300      	movs	r3, #0
1000e746:	3714      	adds	r7, #20
1000e748:	1c3d      	adds	r5, r7, #0
1000e74a:	9302      	str	r3, [sp, #8]
1000e74c:	9b02      	ldr	r3, [sp, #8]
1000e74e:	9a03      	ldr	r2, [sp, #12]
1000e750:	4293      	cmp	r3, r2
1000e752:	db00      	blt.n	1000e756 <internal_at_ble_service_define+0xc2>
1000e754:	e0bf      	b.n	1000e8d6 <internal_at_ble_service_define+0x242>
1000e756:	4bad      	ldr	r3, [pc, #692]	; (1000ea0c <internal_at_ble_service_define+0x378>)
1000e758:	aa06      	add	r2, sp, #24
1000e75a:	9300      	str	r3, [sp, #0]
1000e75c:	230e      	movs	r3, #14
1000e75e:	189b      	adds	r3, r3, r2
1000e760:	9301      	str	r3, [sp, #4]
1000e762:	4ca9      	ldr	r4, [pc, #676]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e764:	1c30      	adds	r0, r6, #0
1000e766:	2104      	movs	r1, #4
1000e768:	2201      	movs	r2, #1
1000e76a:	2302      	movs	r3, #2
1000e76c:	47a0      	blx	r4
1000e76e:	1e04      	subs	r4, r0, #0
1000e770:	d000      	beq.n	1000e774 <internal_at_ble_service_define+0xe0>
1000e772:	e16a      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e774:	1c2b      	adds	r3, r5, #0
1000e776:	3b12      	subs	r3, #18
1000e778:	7b2c      	ldrb	r4, [r5, #12]
1000e77a:	781b      	ldrb	r3, [r3, #0]
1000e77c:	1c21      	adds	r1, r4, #0
1000e77e:	1c1a      	adds	r2, r3, #0
1000e780:	9304      	str	r3, [sp, #16]
1000e782:	8828      	ldrh	r0, [r5, #0]
1000e784:	4ba2      	ldr	r3, [pc, #648]	; (1000ea10 <internal_at_ble_service_define+0x37c>)
1000e786:	4798      	blx	r3
1000e788:	2303      	movs	r3, #3
1000e78a:	4023      	ands	r3, r4
1000e78c:	3b03      	subs	r3, #3
1000e78e:	4259      	negs	r1, r3
1000e790:	4159      	adcs	r1, r3
1000e792:	2301      	movs	r3, #1
1000e794:	08a4      	lsrs	r4, r4, #2
1000e796:	401c      	ands	r4, r3
1000e798:	430c      	orrs	r4, r1
1000e79a:	896b      	ldrh	r3, [r5, #10]
1000e79c:	03e4      	lsls	r4, r4, #15
1000e79e:	431c      	orrs	r4, r3
1000e7a0:	9007      	str	r0, [sp, #28]
1000e7a2:	4b96      	ldr	r3, [pc, #600]	; (1000e9fc <internal_at_ble_service_define+0x368>)
1000e7a4:	9804      	ldr	r0, [sp, #16]
1000e7a6:	4798      	blx	r3
1000e7a8:	1c2a      	adds	r2, r5, #0
1000e7aa:	3a11      	subs	r2, #17
1000e7ac:	9200      	str	r2, [sp, #0]
1000e7ae:	3a03      	subs	r2, #3
1000e7b0:	1c03      	adds	r3, r0, #0
1000e7b2:	9201      	str	r2, [sp, #4]
1000e7b4:	1c21      	adds	r1, r4, #0
1000e7b6:	1c30      	adds	r0, r6, #0
1000e7b8:	4c93      	ldr	r4, [pc, #588]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e7ba:	9a07      	ldr	r2, [sp, #28]
1000e7bc:	47a0      	blx	r4
1000e7be:	1e04      	subs	r4, r0, #0
1000e7c0:	d000      	beq.n	1000e7c4 <internal_at_ble_service_define+0x130>
1000e7c2:	e142      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e7c4:	22c0      	movs	r2, #192	; 0xc0
1000e7c6:	882b      	ldrh	r3, [r5, #0]
1000e7c8:	0052      	lsls	r2, r2, #1
1000e7ca:	4213      	tst	r3, r2
1000e7cc:	d104      	bne.n	1000e7d8 <internal_at_ble_service_define+0x144>
1000e7ce:	8aab      	ldrh	r3, [r5, #20]
1000e7d0:	9304      	str	r3, [sp, #16]
1000e7d2:	2b00      	cmp	r3, #0
1000e7d4:	d116      	bne.n	1000e804 <internal_at_ble_service_define+0x170>
1000e7d6:	e03a      	b.n	1000e84e <internal_at_ble_service_define+0x1ba>
1000e7d8:	2201      	movs	r2, #1
1000e7da:	09d9      	lsrs	r1, r3, #7
1000e7dc:	4011      	ands	r1, r2
1000e7de:	05db      	lsls	r3, r3, #23
1000e7e0:	d501      	bpl.n	1000e7e6 <internal_at_ble_service_define+0x152>
1000e7e2:	2302      	movs	r3, #2
1000e7e4:	4319      	orrs	r1, r3
1000e7e6:	4b8b      	ldr	r3, [pc, #556]	; (1000ea14 <internal_at_ble_service_define+0x380>)
1000e7e8:	aa06      	add	r2, sp, #24
1000e7ea:	9300      	str	r3, [sp, #0]
1000e7ec:	230e      	movs	r3, #14
1000e7ee:	189b      	adds	r3, r3, r2
1000e7f0:	9301      	str	r3, [sp, #4]
1000e7f2:	4c85      	ldr	r4, [pc, #532]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e7f4:	0209      	lsls	r1, r1, #8
1000e7f6:	1c30      	adds	r0, r6, #0
1000e7f8:	2201      	movs	r2, #1
1000e7fa:	2302      	movs	r3, #2
1000e7fc:	47a0      	blx	r4
1000e7fe:	1e04      	subs	r4, r0, #0
1000e800:	d0e5      	beq.n	1000e7ce <internal_at_ble_service_define+0x13a>
1000e802:	e122      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e804:	2380      	movs	r3, #128	; 0x80
1000e806:	882a      	ldrh	r2, [r5, #0]
1000e808:	7f2c      	ldrb	r4, [r5, #28]
1000e80a:	005b      	lsls	r3, r3, #1
1000e80c:	401a      	ands	r2, r3
1000e80e:	1c20      	adds	r0, r4, #0
1000e810:	2101      	movs	r1, #1
1000e812:	2a00      	cmp	r2, #0
1000e814:	d000      	beq.n	1000e818 <internal_at_ble_service_define+0x184>
1000e816:	1c0a      	adds	r2, r1, #0
1000e818:	4b7f      	ldr	r3, [pc, #508]	; (1000ea18 <internal_at_ble_service_define+0x384>)
1000e81a:	4798      	blx	r3
1000e81c:	2203      	movs	r2, #3
1000e81e:	4022      	ands	r2, r4
1000e820:	3a03      	subs	r2, #3
1000e822:	4251      	negs	r1, r2
1000e824:	4151      	adcs	r1, r2
1000e826:	4b7d      	ldr	r3, [pc, #500]	; (1000ea1c <internal_at_ble_service_define+0x388>)
1000e828:	1c0a      	adds	r2, r1, #0
1000e82a:	9300      	str	r3, [sp, #0]
1000e82c:	1c2b      	adds	r3, r5, #0
1000e82e:	0764      	lsls	r4, r4, #29
1000e830:	0fe4      	lsrs	r4, r4, #31
1000e832:	4322      	orrs	r2, r4
1000e834:	03d2      	lsls	r2, r2, #15
1000e836:	4310      	orrs	r0, r2
1000e838:	3320      	adds	r3, #32
1000e83a:	b282      	uxth	r2, r0
1000e83c:	9301      	str	r3, [sp, #4]
1000e83e:	4c72      	ldr	r4, [pc, #456]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e840:	1c30      	adds	r0, r6, #0
1000e842:	9904      	ldr	r1, [sp, #16]
1000e844:	2302      	movs	r3, #2
1000e846:	47a0      	blx	r4
1000e848:	1e04      	subs	r4, r0, #0
1000e84a:	d000      	beq.n	1000e84e <internal_at_ble_service_define+0x1ba>
1000e84c:	e0fd      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e84e:	2101      	movs	r1, #1
1000e850:	882b      	ldrh	r3, [r5, #0]
1000e852:	420b      	tst	r3, r1
1000e854:	d011      	beq.n	1000e87a <internal_at_ble_service_define+0x1e6>
1000e856:	7fa8      	ldrb	r0, [r5, #30]
1000e858:	4b6f      	ldr	r3, [pc, #444]	; (1000ea18 <internal_at_ble_service_define+0x384>)
1000e85a:	2200      	movs	r2, #0
1000e85c:	4798      	blx	r3
1000e85e:	4b70      	ldr	r3, [pc, #448]	; (1000ea20 <internal_at_ble_service_define+0x38c>)
1000e860:	1c02      	adds	r2, r0, #0
1000e862:	9300      	str	r3, [sp, #0]
1000e864:	1c2b      	adds	r3, r5, #0
1000e866:	3324      	adds	r3, #36	; 0x24
1000e868:	9301      	str	r3, [sp, #4]
1000e86a:	4c67      	ldr	r4, [pc, #412]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e86c:	1c30      	adds	r0, r6, #0
1000e86e:	496d      	ldr	r1, [pc, #436]	; (1000ea24 <internal_at_ble_service_define+0x390>)
1000e870:	2302      	movs	r3, #2
1000e872:	47a0      	blx	r4
1000e874:	1e04      	subs	r4, r0, #0
1000e876:	d000      	beq.n	1000e87a <internal_at_ble_service_define+0x1e6>
1000e878:	e0e7      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e87a:	2330      	movs	r3, #48	; 0x30
1000e87c:	882a      	ldrh	r2, [r5, #0]
1000e87e:	421a      	tst	r2, r3
1000e880:	d012      	beq.n	1000e8a8 <internal_at_ble_service_define+0x214>
1000e882:	2101      	movs	r1, #1
1000e884:	7f68      	ldrb	r0, [r5, #29]
1000e886:	1c0a      	adds	r2, r1, #0
1000e888:	4b63      	ldr	r3, [pc, #396]	; (1000ea18 <internal_at_ble_service_define+0x384>)
1000e88a:	4798      	blx	r3
1000e88c:	4b66      	ldr	r3, [pc, #408]	; (1000ea28 <internal_at_ble_service_define+0x394>)
1000e88e:	1c02      	adds	r2, r0, #0
1000e890:	9300      	str	r3, [sp, #0]
1000e892:	1c2b      	adds	r3, r5, #0
1000e894:	3322      	adds	r3, #34	; 0x22
1000e896:	9301      	str	r3, [sp, #4]
1000e898:	4c5b      	ldr	r4, [pc, #364]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e89a:	1c30      	adds	r0, r6, #0
1000e89c:	4961      	ldr	r1, [pc, #388]	; (1000ea24 <internal_at_ble_service_define+0x390>)
1000e89e:	2302      	movs	r3, #2
1000e8a0:	47a0      	blx	r4
1000e8a2:	1e04      	subs	r4, r0, #0
1000e8a4:	d000      	beq.n	1000e8a8 <internal_at_ble_service_define+0x214>
1000e8a6:	e0d0      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e8a8:	69ab      	ldr	r3, [r5, #24]
1000e8aa:	2b00      	cmp	r3, #0
1000e8ac:	d00e      	beq.n	1000e8cc <internal_at_ble_service_define+0x238>
1000e8ae:	4b5f      	ldr	r3, [pc, #380]	; (1000ea2c <internal_at_ble_service_define+0x398>)
1000e8b0:	aa06      	add	r2, sp, #24
1000e8b2:	9300      	str	r3, [sp, #0]
1000e8b4:	230e      	movs	r3, #14
1000e8b6:	189b      	adds	r3, r3, r2
1000e8b8:	9301      	str	r3, [sp, #4]
1000e8ba:	4c53      	ldr	r4, [pc, #332]	; (1000ea08 <internal_at_ble_service_define+0x374>)
1000e8bc:	1c30      	adds	r0, r6, #0
1000e8be:	2107      	movs	r1, #7
1000e8c0:	2201      	movs	r2, #1
1000e8c2:	2302      	movs	r3, #2
1000e8c4:	47a0      	blx	r4
1000e8c6:	1e04      	subs	r4, r0, #0
1000e8c8:	d000      	beq.n	1000e8cc <internal_at_ble_service_define+0x238>
1000e8ca:	e0be      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e8cc:	9b02      	ldr	r3, [sp, #8]
1000e8ce:	353c      	adds	r5, #60	; 0x3c
1000e8d0:	3301      	adds	r3, #1
1000e8d2:	9302      	str	r3, [sp, #8]
1000e8d4:	e73a      	b.n	1000e74c <internal_at_ble_service_define+0xb8>
1000e8d6:	1c30      	adds	r0, r6, #0
1000e8d8:	4b55      	ldr	r3, [pc, #340]	; (1000ea30 <internal_at_ble_service_define+0x39c>)
1000e8da:	4798      	blx	r3
1000e8dc:	1e04      	subs	r4, r0, #0
1000e8de:	d000      	beq.n	1000e8e2 <internal_at_ble_service_define+0x24e>
1000e8e0:	e0b3      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e8e2:	8833      	ldrh	r3, [r6, #0]
1000e8e4:	9a05      	ldr	r2, [sp, #20]
1000e8e6:	8013      	strh	r3, [r2, #0]
1000e8e8:	8836      	ldrh	r6, [r6, #0]
1000e8ea:	9b06      	ldr	r3, [sp, #24]
1000e8ec:	9a03      	ldr	r2, [sp, #12]
1000e8ee:	18f6      	adds	r6, r6, r3
1000e8f0:	b2b3      	uxth	r3, r6
1000e8f2:	9302      	str	r3, [sp, #8]
1000e8f4:	233c      	movs	r3, #60	; 0x3c
1000e8f6:	4353      	muls	r3, r2
1000e8f8:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000e8fa:	3314      	adds	r3, #20
1000e8fc:	18d3      	adds	r3, r2, r3
1000e8fe:	9304      	str	r3, [sp, #16]
1000e900:	9b04      	ldr	r3, [sp, #16]
1000e902:	429f      	cmp	r7, r3
1000e904:	d100      	bne.n	1000e908 <internal_at_ble_service_define+0x274>
1000e906:	e0a0      	b.n	1000ea4a <internal_at_ble_service_define+0x3b6>
1000e908:	9b02      	ldr	r3, [sp, #8]
1000e90a:	1c9d      	adds	r5, r3, #2
1000e90c:	1c3b      	adds	r3, r7, #0
1000e90e:	b2ad      	uxth	r5, r5
1000e910:	3b14      	subs	r3, #20
1000e912:	801d      	strh	r5, [r3, #0]
1000e914:	9303      	str	r3, [sp, #12]
1000e916:	893b      	ldrh	r3, [r7, #8]
1000e918:	2b00      	cmp	r3, #0
1000e91a:	d108      	bne.n	1000e92e <internal_at_ble_service_define+0x29a>
1000e91c:	23c0      	movs	r3, #192	; 0xc0
1000e91e:	883a      	ldrh	r2, [r7, #0]
1000e920:	005b      	lsls	r3, r3, #1
1000e922:	421a      	tst	r2, r3
1000e924:	d026      	beq.n	1000e974 <internal_at_ble_service_define+0x2e0>
1000e926:	9e02      	ldr	r6, [sp, #8]
1000e928:	3603      	adds	r6, #3
1000e92a:	b2b5      	uxth	r5, r6
1000e92c:	e022      	b.n	1000e974 <internal_at_ble_service_define+0x2e0>
1000e92e:	2103      	movs	r1, #3
1000e930:	7b3b      	ldrb	r3, [r7, #12]
1000e932:	4019      	ands	r1, r3
1000e934:	3903      	subs	r1, #3
1000e936:	424a      	negs	r2, r1
1000e938:	414a      	adcs	r2, r1
1000e93a:	0759      	lsls	r1, r3, #29
1000e93c:	0fc9      	lsrs	r1, r1, #31
1000e93e:	4311      	orrs	r1, r2
1000e940:	03c9      	lsls	r1, r1, #15
1000e942:	897a      	ldrh	r2, [r7, #10]
1000e944:	2900      	cmp	r1, #0
1000e946:	d007      	beq.n	1000e958 <internal_at_ble_service_define+0x2c4>
1000e948:	6879      	ldr	r1, [r7, #4]
1000e94a:	2900      	cmp	r1, #0
1000e94c:	d100      	bne.n	1000e950 <internal_at_ble_service_define+0x2bc>
1000e94e:	4939      	ldr	r1, [pc, #228]	; (1000ea34 <internal_at_ble_service_define+0x3a0>)
1000e950:	1c28      	adds	r0, r5, #0
1000e952:	4e39      	ldr	r6, [pc, #228]	; (1000ea38 <internal_at_ble_service_define+0x3a4>)
1000e954:	47b0      	blx	r6
1000e956:	e00a      	b.n	1000e96e <internal_at_ble_service_define+0x2da>
1000e958:	1c28      	adds	r0, r5, #0
1000e95a:	4e37      	ldr	r6, [pc, #220]	; (1000ea38 <internal_at_ble_service_define+0x3a4>)
1000e95c:	47b0      	blx	r6
1000e95e:	2800      	cmp	r0, #0
1000e960:	d172      	bne.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e962:	9b03      	ldr	r3, [sp, #12]
1000e964:	8939      	ldrh	r1, [r7, #8]
1000e966:	8818      	ldrh	r0, [r3, #0]
1000e968:	687a      	ldr	r2, [r7, #4]
1000e96a:	4b34      	ldr	r3, [pc, #208]	; (1000ea3c <internal_at_ble_service_define+0x3a8>)
1000e96c:	4798      	blx	r3
1000e96e:	2800      	cmp	r0, #0
1000e970:	d0d4      	beq.n	1000e91c <internal_at_ble_service_define+0x288>
1000e972:	e069      	b.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e974:	8abb      	ldrh	r3, [r7, #20]
1000e976:	2b00      	cmp	r3, #0
1000e978:	d00a      	beq.n	1000e990 <internal_at_ble_service_define+0x2fc>
1000e97a:	3501      	adds	r5, #1
1000e97c:	b2ad      	uxth	r5, r5
1000e97e:	843d      	strh	r5, [r7, #32]
1000e980:	7f39      	ldrb	r1, [r7, #28]
1000e982:	8afb      	ldrh	r3, [r7, #22]
1000e984:	1c28      	adds	r0, r5, #0
1000e986:	693a      	ldr	r2, [r7, #16]
1000e988:	4e2d      	ldr	r6, [pc, #180]	; (1000ea40 <internal_at_ble_service_define+0x3ac>)
1000e98a:	47b0      	blx	r6
1000e98c:	2800      	cmp	r0, #0
1000e98e:	d15b      	bne.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e990:	883b      	ldrh	r3, [r7, #0]
1000e992:	07db      	lsls	r3, r3, #31
1000e994:	d50d      	bpl.n	1000e9b2 <internal_at_ble_service_define+0x31e>
1000e996:	2200      	movs	r2, #0
1000e998:	3501      	adds	r5, #1
1000e99a:	b2ad      	uxth	r5, r5
1000e99c:	a909      	add	r1, sp, #36	; 0x24
1000e99e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000e9a0:	7fbb      	ldrb	r3, [r7, #30]
1000e9a2:	1c28      	adds	r0, r5, #0
1000e9a4:	700a      	strb	r2, [r1, #0]
1000e9a6:	704a      	strb	r2, [r1, #1]
1000e9a8:	4e23      	ldr	r6, [pc, #140]	; (1000ea38 <internal_at_ble_service_define+0x3a4>)
1000e9aa:	3202      	adds	r2, #2
1000e9ac:	47b0      	blx	r6
1000e9ae:	2800      	cmp	r0, #0
1000e9b0:	d14a      	bne.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e9b2:	2330      	movs	r3, #48	; 0x30
1000e9b4:	883a      	ldrh	r2, [r7, #0]
1000e9b6:	421a      	tst	r2, r3
1000e9b8:	d00d      	beq.n	1000e9d6 <internal_at_ble_service_define+0x342>
1000e9ba:	2200      	movs	r2, #0
1000e9bc:	3501      	adds	r5, #1
1000e9be:	b2ad      	uxth	r5, r5
1000e9c0:	a909      	add	r1, sp, #36	; 0x24
1000e9c2:	847d      	strh	r5, [r7, #34]	; 0x22
1000e9c4:	7f7b      	ldrb	r3, [r7, #29]
1000e9c6:	1c28      	adds	r0, r5, #0
1000e9c8:	700a      	strb	r2, [r1, #0]
1000e9ca:	704a      	strb	r2, [r1, #1]
1000e9cc:	4e1a      	ldr	r6, [pc, #104]	; (1000ea38 <internal_at_ble_service_define+0x3a4>)
1000e9ce:	3202      	adds	r2, #2
1000e9d0:	47b0      	blx	r6
1000e9d2:	2800      	cmp	r0, #0
1000e9d4:	d138      	bne.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e9d6:	69b9      	ldr	r1, [r7, #24]
1000e9d8:	2900      	cmp	r1, #0
1000e9da:	d006      	beq.n	1000e9ea <internal_at_ble_service_define+0x356>
1000e9dc:	3501      	adds	r5, #1
1000e9de:	b2ad      	uxth	r5, r5
1000e9e0:	1c28      	adds	r0, r5, #0
1000e9e2:	4b18      	ldr	r3, [pc, #96]	; (1000ea44 <internal_at_ble_service_define+0x3b0>)
1000e9e4:	4798      	blx	r3
1000e9e6:	2800      	cmp	r0, #0
1000e9e8:	d12e      	bne.n	1000ea48 <internal_at_ble_service_define+0x3b4>
1000e9ea:	373c      	adds	r7, #60	; 0x3c
1000e9ec:	9502      	str	r5, [sp, #8]
1000e9ee:	e787      	b.n	1000e900 <internal_at_ble_service_define+0x26c>
1000e9f0:	10015870 	.word	0x10015870
1000e9f4:	100167cc 	.word	0x100167cc
1000e9f8:	10011bc9 	.word	0x10011bc9
1000e9fc:	1000e3c9 	.word	0x1000e3c9
1000ea00:	10011bb7 	.word	0x10011bb7
1000ea04:	10013ccf 	.word	0x10013ccf
1000ea08:	10010855 	.word	0x10010855
1000ea0c:	10013cd1 	.word	0x10013cd1
1000ea10:	1000e495 	.word	0x1000e495
1000ea14:	10013ccd 	.word	0x10013ccd
1000ea18:	1000e43d 	.word	0x1000e43d
1000ea1c:	10013cc9 	.word	0x10013cc9
1000ea20:	10013ccb 	.word	0x10013ccb
1000ea24:	00008002 	.word	0x00008002
1000ea28:	10013cc5 	.word	0x10013cc5
1000ea2c:	10013cc7 	.word	0x10013cc7
1000ea30:	10010749 	.word	0x10010749
1000ea34:	1001585c 	.word	0x1001585c
1000ea38:	1000e55d 	.word	0x1000e55d
1000ea3c:	100108c5 	.word	0x100108c5
1000ea40:	1000e615 	.word	0x1000e615
1000ea44:	1000e531 	.word	0x1000e531
1000ea48:	1c04      	adds	r4, r0, #0
1000ea4a:	1c20      	adds	r0, r4, #0
1000ea4c:	b00b      	add	sp, #44	; 0x2c
1000ea4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000ea50 <initi_gatt_server_module>:
1000ea50:	2300      	movs	r3, #0
1000ea52:	4a07      	ldr	r2, [pc, #28]	; (1000ea70 <initi_gatt_server_module+0x20>)
1000ea54:	7013      	strb	r3, [r2, #0]
1000ea56:	4a07      	ldr	r2, [pc, #28]	; (1000ea74 <initi_gatt_server_module+0x24>)
1000ea58:	6013      	str	r3, [r2, #0]
1000ea5a:	4a07      	ldr	r2, [pc, #28]	; (1000ea78 <initi_gatt_server_module+0x28>)
1000ea5c:	6013      	str	r3, [r2, #0]
1000ea5e:	4a07      	ldr	r2, [pc, #28]	; (1000ea7c <initi_gatt_server_module+0x2c>)
1000ea60:	6013      	str	r3, [r2, #0]
1000ea62:	4a07      	ldr	r2, [pc, #28]	; (1000ea80 <initi_gatt_server_module+0x30>)
1000ea64:	6013      	str	r3, [r2, #0]
1000ea66:	4a07      	ldr	r2, [pc, #28]	; (1000ea84 <initi_gatt_server_module+0x34>)
1000ea68:	6013      	str	r3, [r2, #0]
1000ea6a:	4a07      	ldr	r2, [pc, #28]	; (1000ea88 <initi_gatt_server_module+0x38>)
1000ea6c:	6013      	str	r3, [r2, #0]
1000ea6e:	4770      	bx	lr
1000ea70:	1001585c 	.word	0x1001585c
1000ea74:	1001586c 	.word	0x1001586c
1000ea78:	10015868 	.word	0x10015868
1000ea7c:	10015858 	.word	0x10015858
1000ea80:	10015864 	.word	0x10015864
1000ea84:	10015860 	.word	0x10015860
1000ea88:	10015870 	.word	0x10015870

1000ea8c <db_init>:
1000ea8c:	4b0a      	ldr	r3, [pc, #40]	; (1000eab8 <db_init+0x2c>)
1000ea8e:	4a0b      	ldr	r2, [pc, #44]	; (1000eabc <db_init+0x30>)
1000ea90:	6018      	str	r0, [r3, #0]
1000ea92:	084b      	lsrs	r3, r1, #1
1000ea94:	6013      	str	r3, [r2, #0]
1000ea96:	4a0a      	ldr	r2, [pc, #40]	; (1000eac0 <db_init+0x34>)
1000ea98:	18c3      	adds	r3, r0, r3
1000ea9a:	6013      	str	r3, [r2, #0]
1000ea9c:	4a09      	ldr	r2, [pc, #36]	; (1000eac4 <db_init+0x38>)
1000ea9e:	1841      	adds	r1, r0, r1
1000eaa0:	6013      	str	r3, [r2, #0]
1000eaa2:	2303      	movs	r3, #3
1000eaa4:	2200      	movs	r2, #0
1000eaa6:	3103      	adds	r1, #3
1000eaa8:	4399      	bics	r1, r3
1000eaaa:	4b07      	ldr	r3, [pc, #28]	; (1000eac8 <db_init+0x3c>)
1000eaac:	3904      	subs	r1, #4
1000eaae:	6019      	str	r1, [r3, #0]
1000eab0:	4b06      	ldr	r3, [pc, #24]	; (1000eacc <db_init+0x40>)
1000eab2:	601a      	str	r2, [r3, #0]
1000eab4:	4770      	bx	lr
1000eab6:	46c0      	nop			; (mov r8, r8)
1000eab8:	10015870 	.word	0x10015870
1000eabc:	1001586c 	.word	0x1001586c
1000eac0:	10015858 	.word	0x10015858
1000eac4:	10015864 	.word	0x10015864
1000eac8:	10015860 	.word	0x10015860
1000eacc:	10015868 	.word	0x10015868

1000ead0 <at_ble_primary_service_define>:
1000ead0:	b530      	push	{r4, r5, lr}
1000ead2:	b085      	sub	sp, #20
1000ead4:	ac08      	add	r4, sp, #32
1000ead6:	cc20      	ldmia	r4!, {r5}
1000ead8:	8824      	ldrh	r4, [r4, #0]
1000eada:	9500      	str	r5, [sp, #0]
1000eadc:	9401      	str	r4, [sp, #4]
1000eade:	2401      	movs	r4, #1
1000eae0:	9402      	str	r4, [sp, #8]
1000eae2:	4c02      	ldr	r4, [pc, #8]	; (1000eaec <at_ble_primary_service_define+0x1c>)
1000eae4:	47a0      	blx	r4
1000eae6:	b005      	add	sp, #20
1000eae8:	bd30      	pop	{r4, r5, pc}
1000eaea:	46c0      	nop			; (mov r8, r8)
1000eaec:	1000e695 	.word	0x1000e695

1000eaf0 <at_ble_characteristic_value_set>:
1000eaf0:	b570      	push	{r4, r5, r6, lr}
1000eaf2:	4b0b      	ldr	r3, [pc, #44]	; (1000eb20 <at_ble_characteristic_value_set+0x30>)
1000eaf4:	1c06      	adds	r6, r0, #0
1000eaf6:	1c0c      	adds	r4, r1, #0
1000eaf8:	1c15      	adds	r5, r2, #0
1000eafa:	4798      	blx	r3
1000eafc:	2800      	cmp	r0, #0
1000eafe:	d008      	beq.n	1000eb12 <at_ble_characteristic_value_set+0x22>
1000eb00:	6880      	ldr	r0, [r0, #8]
1000eb02:	2800      	cmp	r0, #0
1000eb04:	d005      	beq.n	1000eb12 <at_ble_characteristic_value_set+0x22>
1000eb06:	1c21      	adds	r1, r4, #0
1000eb08:	1c2a      	adds	r2, r5, #0
1000eb0a:	4b06      	ldr	r3, [pc, #24]	; (1000eb24 <at_ble_characteristic_value_set+0x34>)
1000eb0c:	4798      	blx	r3
1000eb0e:	2000      	movs	r0, #0
1000eb10:	e004      	b.n	1000eb1c <at_ble_characteristic_value_set+0x2c>
1000eb12:	1c30      	adds	r0, r6, #0
1000eb14:	1c29      	adds	r1, r5, #0
1000eb16:	1c22      	adds	r2, r4, #0
1000eb18:	4b03      	ldr	r3, [pc, #12]	; (1000eb28 <at_ble_characteristic_value_set+0x38>)
1000eb1a:	4798      	blx	r3
1000eb1c:	bd70      	pop	{r4, r5, r6, pc}
1000eb1e:	46c0      	nop			; (mov r8, r8)
1000eb20:	1000e3fd 	.word	0x1000e3fd
1000eb24:	10011bb7 	.word	0x10011bb7
1000eb28:	100108c5 	.word	0x100108c5

1000eb2c <at_ble_characteristic_value_get>:
1000eb2c:	b570      	push	{r4, r5, r6, lr}
1000eb2e:	4b0c      	ldr	r3, [pc, #48]	; (1000eb60 <at_ble_characteristic_value_get+0x34>)
1000eb30:	1c06      	adds	r6, r0, #0
1000eb32:	1c0c      	adds	r4, r1, #0
1000eb34:	1c15      	adds	r5, r2, #0
1000eb36:	4798      	blx	r3
1000eb38:	2800      	cmp	r0, #0
1000eb3a:	d00b      	beq.n	1000eb54 <at_ble_characteristic_value_get+0x28>
1000eb3c:	6883      	ldr	r3, [r0, #8]
1000eb3e:	2b00      	cmp	r3, #0
1000eb40:	d008      	beq.n	1000eb54 <at_ble_characteristic_value_get+0x28>
1000eb42:	8883      	ldrh	r3, [r0, #4]
1000eb44:	802b      	strh	r3, [r5, #0]
1000eb46:	8882      	ldrh	r2, [r0, #4]
1000eb48:	6881      	ldr	r1, [r0, #8]
1000eb4a:	4b06      	ldr	r3, [pc, #24]	; (1000eb64 <at_ble_characteristic_value_get+0x38>)
1000eb4c:	1c20      	adds	r0, r4, #0
1000eb4e:	4798      	blx	r3
1000eb50:	2000      	movs	r0, #0
1000eb52:	e004      	b.n	1000eb5e <at_ble_characteristic_value_get+0x32>
1000eb54:	1c30      	adds	r0, r6, #0
1000eb56:	1c29      	adds	r1, r5, #0
1000eb58:	1c22      	adds	r2, r4, #0
1000eb5a:	4b03      	ldr	r3, [pc, #12]	; (1000eb68 <at_ble_characteristic_value_get+0x3c>)
1000eb5c:	4798      	blx	r3
1000eb5e:	bd70      	pop	{r4, r5, r6, pc}
1000eb60:	1000e3fd 	.word	0x1000e3fd
1000eb64:	10011bb7 	.word	0x10011bb7
1000eb68:	10010951 	.word	0x10010951

1000eb6c <at_ble_write_authorize_reply>:
1000eb6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb6e:	b085      	sub	sp, #20
1000eb70:	1c04      	adds	r4, r0, #0
1000eb72:	9101      	str	r1, [sp, #4]
1000eb74:	2900      	cmp	r1, #0
1000eb76:	d128      	bne.n	1000ebca <at_ble_write_authorize_reply+0x5e>
1000eb78:	8843      	ldrh	r3, [r0, #2]
1000eb7a:	1c27      	adds	r7, r4, #0
1000eb7c:	9300      	str	r3, [sp, #0]
1000eb7e:	1c18      	adds	r0, r3, #0
1000eb80:	4b16      	ldr	r3, [pc, #88]	; (1000ebdc <at_ble_write_authorize_reply+0x70>)
1000eb82:	4798      	blx	r3
1000eb84:	3708      	adds	r7, #8
1000eb86:	2800      	cmp	r0, #0
1000eb88:	d009      	beq.n	1000eb9e <at_ble_write_authorize_reply+0x32>
1000eb8a:	6880      	ldr	r0, [r0, #8]
1000eb8c:	2800      	cmp	r0, #0
1000eb8e:	d006      	beq.n	1000eb9e <at_ble_write_authorize_reply+0x32>
1000eb90:	88a3      	ldrh	r3, [r4, #4]
1000eb92:	88e2      	ldrh	r2, [r4, #6]
1000eb94:	18c0      	adds	r0, r0, r3
1000eb96:	1c39      	adds	r1, r7, #0
1000eb98:	4b11      	ldr	r3, [pc, #68]	; (1000ebe0 <at_ble_write_authorize_reply+0x74>)
1000eb9a:	4798      	blx	r3
1000eb9c:	e015      	b.n	1000ebca <at_ble_write_authorize_reply+0x5e>
1000eb9e:	ab02      	add	r3, sp, #8
1000eba0:	1d9e      	adds	r6, r3, #6
1000eba2:	2300      	movs	r3, #0
1000eba4:	4d0f      	ldr	r5, [pc, #60]	; (1000ebe4 <at_ble_write_authorize_reply+0x78>)
1000eba6:	8033      	strh	r3, [r6, #0]
1000eba8:	6829      	ldr	r1, [r5, #0]
1000ebaa:	1c32      	adds	r2, r6, #0
1000ebac:	4b0e      	ldr	r3, [pc, #56]	; (1000ebe8 <at_ble_write_authorize_reply+0x7c>)
1000ebae:	9800      	ldr	r0, [sp, #0]
1000ebb0:	4798      	blx	r3
1000ebb2:	682b      	ldr	r3, [r5, #0]
1000ebb4:	88a0      	ldrh	r0, [r4, #4]
1000ebb6:	88e2      	ldrh	r2, [r4, #6]
1000ebb8:	1818      	adds	r0, r3, r0
1000ebba:	1c39      	adds	r1, r7, #0
1000ebbc:	4b08      	ldr	r3, [pc, #32]	; (1000ebe0 <at_ble_write_authorize_reply+0x74>)
1000ebbe:	4798      	blx	r3
1000ebc0:	8860      	ldrh	r0, [r4, #2]
1000ebc2:	8832      	ldrh	r2, [r6, #0]
1000ebc4:	6829      	ldr	r1, [r5, #0]
1000ebc6:	4b09      	ldr	r3, [pc, #36]	; (1000ebec <at_ble_write_authorize_reply+0x80>)
1000ebc8:	4798      	blx	r3
1000ebca:	8860      	ldrh	r0, [r4, #2]
1000ebcc:	8821      	ldrh	r1, [r4, #0]
1000ebce:	9a01      	ldr	r2, [sp, #4]
1000ebd0:	4b07      	ldr	r3, [pc, #28]	; (1000ebf0 <at_ble_write_authorize_reply+0x84>)
1000ebd2:	4798      	blx	r3
1000ebd4:	2000      	movs	r0, #0
1000ebd6:	b005      	add	sp, #20
1000ebd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebda:	46c0      	nop			; (mov r8, r8)
1000ebdc:	1000e3fd 	.word	0x1000e3fd
1000ebe0:	10011bb7 	.word	0x10011bb7
1000ebe4:	10013ddc 	.word	0x10013ddc
1000ebe8:	1000eb2d 	.word	0x1000eb2d
1000ebec:	1000eaf1 	.word	0x1000eaf1
1000ebf0:	100103c9 	.word	0x100103c9

1000ebf4 <gatts_handle_read_req>:
1000ebf4:	b538      	push	{r3, r4, r5, lr}
1000ebf6:	1c0c      	adds	r4, r1, #0
1000ebf8:	4b07      	ldr	r3, [pc, #28]	; (1000ec18 <gatts_handle_read_req+0x24>)
1000ebfa:	4798      	blx	r3
1000ebfc:	8865      	ldrh	r5, [r4, #2]
1000ebfe:	4b07      	ldr	r3, [pc, #28]	; (1000ec1c <gatts_handle_read_req+0x28>)
1000ec00:	1c28      	adds	r0, r5, #0
1000ec02:	4798      	blx	r3
1000ec04:	7883      	ldrb	r3, [r0, #2]
1000ec06:	2026      	movs	r0, #38	; 0x26
1000ec08:	07db      	lsls	r3, r3, #31
1000ec0a:	d404      	bmi.n	1000ec16 <gatts_handle_read_req+0x22>
1000ec0c:	8820      	ldrh	r0, [r4, #0]
1000ec0e:	1c29      	adds	r1, r5, #0
1000ec10:	4b03      	ldr	r3, [pc, #12]	; (1000ec20 <gatts_handle_read_req+0x2c>)
1000ec12:	4798      	blx	r3
1000ec14:	203b      	movs	r0, #59	; 0x3b
1000ec16:	bd38      	pop	{r3, r4, r5, pc}
1000ec18:	1001030d 	.word	0x1001030d
1000ec1c:	1000e3fd 	.word	0x1000e3fd
1000ec20:	1000e665 	.word	0x1000e665

1000ec24 <gatts_handle_att_info_req>:
1000ec24:	b538      	push	{r3, r4, r5, lr}
1000ec26:	1c0d      	adds	r5, r1, #0
1000ec28:	4b0a      	ldr	r3, [pc, #40]	; (1000ec54 <gatts_handle_att_info_req+0x30>)
1000ec2a:	1c14      	adds	r4, r2, #0
1000ec2c:	4798      	blx	r3
1000ec2e:	882d      	ldrh	r5, [r5, #0]
1000ec30:	4b09      	ldr	r3, [pc, #36]	; (1000ec58 <gatts_handle_att_info_req+0x34>)
1000ec32:	1c28      	adds	r0, r5, #0
1000ec34:	4798      	blx	r3
1000ec36:	0a22      	lsrs	r2, r4, #8
1000ec38:	1c03      	adds	r3, r0, #0
1000ec3a:	4c08      	ldr	r4, [pc, #32]	; (1000ec5c <gatts_handle_att_info_req+0x38>)
1000ec3c:	b291      	uxth	r1, r2
1000ec3e:	2800      	cmp	r0, #0
1000ec40:	d003      	beq.n	1000ec4a <gatts_handle_att_info_req+0x26>
1000ec42:	8882      	ldrh	r2, [r0, #4]
1000ec44:	2300      	movs	r3, #0
1000ec46:	1c28      	adds	r0, r5, #0
1000ec48:	e001      	b.n	1000ec4e <gatts_handle_att_info_req+0x2a>
1000ec4a:	1c28      	adds	r0, r5, #0
1000ec4c:	2201      	movs	r2, #1
1000ec4e:	47a0      	blx	r4
1000ec50:	203b      	movs	r0, #59	; 0x3b
1000ec52:	bd38      	pop	{r3, r4, r5, pc}
1000ec54:	10010351 	.word	0x10010351
1000ec58:	1000e3fd 	.word	0x1000e3fd
1000ec5c:	1001040d 	.word	0x1001040d

1000ec60 <gatts_handle_write_req>:
1000ec60:	b510      	push	{r4, lr}
1000ec62:	1c14      	adds	r4, r2, #0
1000ec64:	4b07      	ldr	r3, [pc, #28]	; (1000ec84 <gatts_handle_write_req+0x24>)
1000ec66:	4798      	blx	r3
1000ec68:	4b07      	ldr	r3, [pc, #28]	; (1000ec88 <gatts_handle_write_req+0x28>)
1000ec6a:	8860      	ldrh	r0, [r4, #2]
1000ec6c:	4798      	blx	r3
1000ec6e:	2302      	movs	r3, #2
1000ec70:	7881      	ldrb	r1, [r0, #2]
1000ec72:	2022      	movs	r0, #34	; 0x22
1000ec74:	4019      	ands	r1, r3
1000ec76:	d103      	bne.n	1000ec80 <gatts_handle_write_req+0x20>
1000ec78:	1c20      	adds	r0, r4, #0
1000ec7a:	4b04      	ldr	r3, [pc, #16]	; (1000ec8c <gatts_handle_write_req+0x2c>)
1000ec7c:	4798      	blx	r3
1000ec7e:	201f      	movs	r0, #31
1000ec80:	bd10      	pop	{r4, pc}
1000ec82:	46c0      	nop			; (mov r8, r8)
1000ec84:	10010319 	.word	0x10010319
1000ec88:	1000e3fd 	.word	0x1000e3fd
1000ec8c:	1000eb6d 	.word	0x1000eb6d

1000ec90 <at_ble_notification_send>:
1000ec90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec92:	4d17      	ldr	r5, [pc, #92]	; (1000ecf0 <at_ble_notification_send+0x60>)
1000ec94:	4c17      	ldr	r4, [pc, #92]	; (1000ecf4 <at_ble_notification_send+0x64>)
1000ec96:	682a      	ldr	r2, [r5, #0]
1000ec98:	44a5      	add	sp, r4
1000ec9a:	23d2      	movs	r3, #210	; 0xd2
1000ec9c:	2a04      	cmp	r2, #4
1000ec9e:	d822      	bhi.n	1000ece6 <at_ble_notification_send+0x56>
1000eca0:	1c06      	adds	r6, r0, #0
1000eca2:	4b15      	ldr	r3, [pc, #84]	; (1000ecf8 <at_ble_notification_send+0x68>)
1000eca4:	1c08      	adds	r0, r1, #0
1000eca6:	1c0c      	adds	r4, r1, #0
1000eca8:	4798      	blx	r3
1000ecaa:	2800      	cmp	r0, #0
1000ecac:	d008      	beq.n	1000ecc0 <at_ble_notification_send+0x30>
1000ecae:	6883      	ldr	r3, [r0, #8]
1000ecb0:	2b00      	cmp	r3, #0
1000ecb2:	d005      	beq.n	1000ecc0 <at_ble_notification_send+0x30>
1000ecb4:	8882      	ldrh	r2, [r0, #4]
1000ecb6:	1c21      	adds	r1, r4, #0
1000ecb8:	9200      	str	r2, [sp, #0]
1000ecba:	2012      	movs	r0, #18
1000ecbc:	1c32      	adds	r2, r6, #0
1000ecbe:	e00c      	b.n	1000ecda <at_ble_notification_send+0x4a>
1000ecc0:	270e      	movs	r7, #14
1000ecc2:	446f      	add	r7, sp
1000ecc4:	1c39      	adds	r1, r7, #0
1000ecc6:	aa04      	add	r2, sp, #16
1000ecc8:	4b0c      	ldr	r3, [pc, #48]	; (1000ecfc <at_ble_notification_send+0x6c>)
1000ecca:	1c20      	adds	r0, r4, #0
1000eccc:	4798      	blx	r3
1000ecce:	2012      	movs	r0, #18
1000ecd0:	1c21      	adds	r1, r4, #0
1000ecd2:	1c32      	adds	r2, r6, #0
1000ecd4:	883b      	ldrh	r3, [r7, #0]
1000ecd6:	9300      	str	r3, [sp, #0]
1000ecd8:	ab04      	add	r3, sp, #16
1000ecda:	4c09      	ldr	r4, [pc, #36]	; (1000ed00 <at_ble_notification_send+0x70>)
1000ecdc:	47a0      	blx	r4
1000ecde:	682b      	ldr	r3, [r5, #0]
1000ece0:	3301      	adds	r3, #1
1000ece2:	602b      	str	r3, [r5, #0]
1000ece4:	2300      	movs	r3, #0
1000ece6:	1c18      	adds	r0, r3, #0
1000ece8:	2385      	movs	r3, #133	; 0x85
1000ecea:	009b      	lsls	r3, r3, #2
1000ecec:	449d      	add	sp, r3
1000ecee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ecf0:	100158fc 	.word	0x100158fc
1000ecf4:	fffffdec 	.word	0xfffffdec
1000ecf8:	1000e3fd 	.word	0x1000e3fd
1000ecfc:	10010951 	.word	0x10010951
1000ed00:	10010455 	.word	0x10010455

1000ed04 <init_l2cc_task_module>:
1000ed04:	220a      	movs	r2, #10
1000ed06:	4b01      	ldr	r3, [pc, #4]	; (1000ed0c <init_l2cc_task_module+0x8>)
1000ed08:	701a      	strb	r2, [r3, #0]
1000ed0a:	4770      	bx	lr
1000ed0c:	10013dd8 	.word	0x10013dd8

1000ed10 <l2cc_data_send_rsp_handler>:
1000ed10:	b510      	push	{r4, lr}
1000ed12:	7802      	ldrb	r2, [r0, #0]
1000ed14:	700a      	strb	r2, [r1, #0]
1000ed16:	7883      	ldrb	r3, [r0, #2]
1000ed18:	7844      	ldrb	r4, [r0, #1]
1000ed1a:	021b      	lsls	r3, r3, #8
1000ed1c:	4323      	orrs	r3, r4
1000ed1e:	804b      	strh	r3, [r1, #2]
1000ed20:	7903      	ldrb	r3, [r0, #4]
1000ed22:	78c0      	ldrb	r0, [r0, #3]
1000ed24:	021b      	lsls	r3, r3, #8
1000ed26:	4303      	orrs	r3, r0
1000ed28:	808b      	strh	r3, [r1, #4]
1000ed2a:	2a00      	cmp	r2, #0
1000ed2c:	d103      	bne.n	1000ed36 <l2cc_data_send_rsp_handler+0x26>
1000ed2e:	4a02      	ldr	r2, [pc, #8]	; (1000ed38 <l2cc_data_send_rsp_handler+0x28>)
1000ed30:	7813      	ldrb	r3, [r2, #0]
1000ed32:	3301      	adds	r3, #1
1000ed34:	7013      	strb	r3, [r2, #0]
1000ed36:	bd10      	pop	{r4, pc}
1000ed38:	10013dd8 	.word	0x10013dd8

1000ed3c <l2cc_data_received_handler>:
1000ed3c:	b508      	push	{r3, lr}
1000ed3e:	1c03      	adds	r3, r0, #0
1000ed40:	7842      	ldrb	r2, [r0, #1]
1000ed42:	7800      	ldrb	r0, [r0, #0]
1000ed44:	0212      	lsls	r2, r2, #8
1000ed46:	4302      	orrs	r2, r0
1000ed48:	800a      	strh	r2, [r1, #0]
1000ed4a:	78da      	ldrb	r2, [r3, #3]
1000ed4c:	7898      	ldrb	r0, [r3, #2]
1000ed4e:	0212      	lsls	r2, r2, #8
1000ed50:	4302      	orrs	r2, r0
1000ed52:	804a      	strh	r2, [r1, #2]
1000ed54:	795a      	ldrb	r2, [r3, #5]
1000ed56:	7918      	ldrb	r0, [r3, #4]
1000ed58:	0212      	lsls	r2, r2, #8
1000ed5a:	4302      	orrs	r2, r0
1000ed5c:	808a      	strh	r2, [r1, #4]
1000ed5e:	1d88      	adds	r0, r1, #6
1000ed60:	1d99      	adds	r1, r3, #6
1000ed62:	4b01      	ldr	r3, [pc, #4]	; (1000ed68 <l2cc_data_received_handler+0x2c>)
1000ed64:	4798      	blx	r3
1000ed66:	bd08      	pop	{r3, pc}
1000ed68:	10011bb7 	.word	0x10011bb7

1000ed6c <at_ble_authenticate>:
1000ed6c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed6e:	1c0c      	adds	r4, r1, #0
1000ed70:	211f      	movs	r1, #31
1000ed72:	b08b      	sub	sp, #44	; 0x2c
1000ed74:	9307      	str	r3, [sp, #28]
1000ed76:	ab02      	add	r3, sp, #8
1000ed78:	18c9      	adds	r1, r1, r3
1000ed7a:	230f      	movs	r3, #15
1000ed7c:	700b      	strb	r3, [r1, #0]
1000ed7e:	4b40      	ldr	r3, [pc, #256]	; (1000ee80 <at_ble_authenticate+0x114>)
1000ed80:	1c05      	adds	r5, r0, #0
1000ed82:	1c16      	adds	r6, r2, #0
1000ed84:	4798      	blx	r3
1000ed86:	1c07      	adds	r7, r0, #0
1000ed88:	2001      	movs	r0, #1
1000ed8a:	2f07      	cmp	r7, #7
1000ed8c:	d875      	bhi.n	1000ee7a <at_ble_authenticate+0x10e>
1000ed8e:	2c00      	cmp	r4, #0
1000ed90:	d113      	bne.n	1000edba <at_ble_authenticate+0x4e>
1000ed92:	2312      	movs	r3, #18
1000ed94:	435f      	muls	r7, r3
1000ed96:	4b3b      	ldr	r3, [pc, #236]	; (1000ee84 <at_ble_authenticate+0x118>)
1000ed98:	5cfb      	ldrb	r3, [r7, r3]
1000ed9a:	4283      	cmp	r3, r0
1000ed9c:	d001      	beq.n	1000eda2 <at_ble_authenticate+0x36>
1000ed9e:	20cf      	movs	r0, #207	; 0xcf
1000eda0:	e06b      	b.n	1000ee7a <at_ble_authenticate+0x10e>
1000eda2:	9504      	str	r5, [sp, #16]
1000eda4:	9400      	str	r4, [sp, #0]
1000eda6:	9401      	str	r4, [sp, #4]
1000eda8:	9402      	str	r4, [sp, #8]
1000edaa:	9403      	str	r4, [sp, #12]
1000edac:	1c20      	adds	r0, r4, #0
1000edae:	1c21      	adds	r1, r4, #0
1000edb0:	1c22      	adds	r2, r4, #0
1000edb2:	1c23      	adds	r3, r4, #0
1000edb4:	4d34      	ldr	r5, [pc, #208]	; (1000ee88 <at_ble_authenticate+0x11c>)
1000edb6:	47a8      	blx	r5
1000edb8:	e05e      	b.n	1000ee78 <at_ble_authenticate+0x10c>
1000edba:	7922      	ldrb	r2, [r4, #4]
1000edbc:	2a06      	cmp	r2, #6
1000edbe:	d9ee      	bls.n	1000ed9e <at_ble_authenticate+0x32>
1000edc0:	7963      	ldrb	r3, [r4, #5]
1000edc2:	2b10      	cmp	r3, #16
1000edc4:	d8eb      	bhi.n	1000ed9e <at_ble_authenticate+0x32>
1000edc6:	429a      	cmp	r2, r3
1000edc8:	d8e9      	bhi.n	1000ed9e <at_ble_authenticate+0x32>
1000edca:	7a23      	ldrb	r3, [r4, #8]
1000edcc:	2b04      	cmp	r3, #4
1000edce:	d8e6      	bhi.n	1000ed9e <at_ble_authenticate+0x32>
1000edd0:	79a3      	ldrb	r3, [r4, #6]
1000edd2:	2b07      	cmp	r3, #7
1000edd4:	d8e3      	bhi.n	1000ed9e <at_ble_authenticate+0x32>
1000edd6:	79e3      	ldrb	r3, [r4, #7]
1000edd8:	2b07      	cmp	r3, #7
1000edda:	d8e0      	bhi.n	1000ed9e <at_ble_authenticate+0x32>
1000eddc:	78a3      	ldrb	r3, [r4, #2]
1000edde:	2b00      	cmp	r3, #0
1000ede0:	d006      	beq.n	1000edf0 <at_ble_authenticate+0x84>
1000ede2:	2e00      	cmp	r6, #0
1000ede4:	d0db      	beq.n	1000ed9e <at_ble_authenticate+0x32>
1000ede6:	4829      	ldr	r0, [pc, #164]	; (1000ee8c <at_ble_authenticate+0x120>)
1000ede8:	1c31      	adds	r1, r6, #0
1000edea:	221c      	movs	r2, #28
1000edec:	4b28      	ldr	r3, [pc, #160]	; (1000ee90 <at_ble_authenticate+0x124>)
1000edee:	4798      	blx	r3
1000edf0:	9b07      	ldr	r3, [sp, #28]
1000edf2:	2b00      	cmp	r3, #0
1000edf4:	d005      	beq.n	1000ee02 <at_ble_authenticate+0x96>
1000edf6:	4827      	ldr	r0, [pc, #156]	; (1000ee94 <at_ble_authenticate+0x128>)
1000edf8:	1c19      	adds	r1, r3, #0
1000edfa:	309a      	adds	r0, #154	; 0x9a
1000edfc:	2210      	movs	r2, #16
1000edfe:	4b24      	ldr	r3, [pc, #144]	; (1000ee90 <at_ble_authenticate+0x124>)
1000ee00:	4798      	blx	r3
1000ee02:	7863      	ldrb	r3, [r4, #1]
1000ee04:	78a2      	ldrb	r2, [r4, #2]
1000ee06:	009b      	lsls	r3, r3, #2
1000ee08:	4313      	orrs	r3, r2
1000ee0a:	2212      	movs	r2, #18
1000ee0c:	4357      	muls	r7, r2
1000ee0e:	4a1d      	ldr	r2, [pc, #116]	; (1000ee84 <at_ble_authenticate+0x118>)
1000ee10:	b2db      	uxtb	r3, r3
1000ee12:	5cba      	ldrb	r2, [r7, r2]
1000ee14:	2a00      	cmp	r2, #0
1000ee16:	d116      	bne.n	1000ee46 <at_ble_authenticate+0xda>
1000ee18:	79a0      	ldrb	r0, [r4, #6]
1000ee1a:	0742      	lsls	r2, r0, #29
1000ee1c:	d502      	bpl.n	1000ee24 <at_ble_authenticate+0xb8>
1000ee1e:	9a07      	ldr	r2, [sp, #28]
1000ee20:	2a00      	cmp	r2, #0
1000ee22:	d0bc      	beq.n	1000ed9e <at_ble_authenticate+0x32>
1000ee24:	07c2      	lsls	r2, r0, #31
1000ee26:	d501      	bpl.n	1000ee2c <at_ble_authenticate+0xc0>
1000ee28:	2e00      	cmp	r6, #0
1000ee2a:	d0b8      	beq.n	1000ed9e <at_ble_authenticate+0x32>
1000ee2c:	7966      	ldrb	r6, [r4, #5]
1000ee2e:	7821      	ldrb	r1, [r4, #0]
1000ee30:	78e2      	ldrb	r2, [r4, #3]
1000ee32:	9600      	str	r6, [sp, #0]
1000ee34:	9001      	str	r0, [sp, #4]
1000ee36:	79e0      	ldrb	r0, [r4, #7]
1000ee38:	9002      	str	r0, [sp, #8]
1000ee3a:	7a20      	ldrb	r0, [r4, #8]
1000ee3c:	4c16      	ldr	r4, [pc, #88]	; (1000ee98 <at_ble_authenticate+0x12c>)
1000ee3e:	9003      	str	r0, [sp, #12]
1000ee40:	1c28      	adds	r0, r5, #0
1000ee42:	47a0      	blx	r4
1000ee44:	e018      	b.n	1000ee78 <at_ble_authenticate+0x10c>
1000ee46:	2a01      	cmp	r2, #1
1000ee48:	d1a9      	bne.n	1000ed9e <at_ble_authenticate+0x32>
1000ee4a:	79e0      	ldrb	r0, [r4, #7]
1000ee4c:	0742      	lsls	r2, r0, #29
1000ee4e:	d502      	bpl.n	1000ee56 <at_ble_authenticate+0xea>
1000ee50:	9a07      	ldr	r2, [sp, #28]
1000ee52:	2a00      	cmp	r2, #0
1000ee54:	d0a3      	beq.n	1000ed9e <at_ble_authenticate+0x32>
1000ee56:	07c2      	lsls	r2, r0, #31
1000ee58:	d501      	bpl.n	1000ee5e <at_ble_authenticate+0xf2>
1000ee5a:	2e00      	cmp	r6, #0
1000ee5c:	d09f      	beq.n	1000ed9e <at_ble_authenticate+0x32>
1000ee5e:	7966      	ldrb	r6, [r4, #5]
1000ee60:	7821      	ldrb	r1, [r4, #0]
1000ee62:	78e2      	ldrb	r2, [r4, #3]
1000ee64:	9600      	str	r6, [sp, #0]
1000ee66:	79a6      	ldrb	r6, [r4, #6]
1000ee68:	9002      	str	r0, [sp, #8]
1000ee6a:	9601      	str	r6, [sp, #4]
1000ee6c:	7a20      	ldrb	r0, [r4, #8]
1000ee6e:	9504      	str	r5, [sp, #16]
1000ee70:	9003      	str	r0, [sp, #12]
1000ee72:	4c05      	ldr	r4, [pc, #20]	; (1000ee88 <at_ble_authenticate+0x11c>)
1000ee74:	2001      	movs	r0, #1
1000ee76:	47a0      	blx	r4
1000ee78:	2000      	movs	r0, #0
1000ee7a:	b00b      	add	sp, #44	; 0x2c
1000ee7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee7e:	46c0      	nop			; (mov r8, r8)
1000ee80:	1000f26d 	.word	0x1000f26d
1000ee84:	100167ce 	.word	0x100167ce
1000ee88:	1000f7dd 	.word	0x1000f7dd
1000ee8c:	100168dc 	.word	0x100168dc
1000ee90:	10011bb7 	.word	0x10011bb7
1000ee94:	1001685e 	.word	0x1001685e
1000ee98:	1000f5bd 	.word	0x1000f5bd

1000ee9c <at_ble_pair_key_reply>:
1000ee9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee9e:	b085      	sub	sp, #20
1000eea0:	1c05      	adds	r5, r0, #0
1000eea2:	1c0c      	adds	r4, r1, #0
1000eea4:	1c16      	adds	r6, r2, #0
1000eea6:	2100      	movs	r1, #0
1000eea8:	4668      	mov	r0, sp
1000eeaa:	2210      	movs	r2, #16
1000eeac:	4b18      	ldr	r3, [pc, #96]	; (1000ef10 <at_ble_pair_key_reply+0x74>)
1000eeae:	4798      	blx	r3
1000eeb0:	2101      	movs	r1, #1
1000eeb2:	2e00      	cmp	r6, #0
1000eeb4:	d101      	bne.n	1000eeba <at_ble_pair_key_reply+0x1e>
1000eeb6:	1c31      	adds	r1, r6, #0
1000eeb8:	466e      	mov	r6, sp
1000eeba:	2c00      	cmp	r4, #0
1000eebc:	d116      	bne.n	1000eeec <at_ble_pair_key_reply+0x50>
1000eebe:	2701      	movs	r7, #1
1000eec0:	1c23      	adds	r3, r4, #0
1000eec2:	1d70      	adds	r0, r6, #5
1000eec4:	3e01      	subs	r6, #1
1000eec6:	7802      	ldrb	r2, [r0, #0]
1000eec8:	3801      	subs	r0, #1
1000eeca:	3a30      	subs	r2, #48	; 0x30
1000eecc:	437a      	muls	r2, r7
1000eece:	189b      	adds	r3, r3, r2
1000eed0:	220a      	movs	r2, #10
1000eed2:	4357      	muls	r7, r2
1000eed4:	42b0      	cmp	r0, r6
1000eed6:	d1f6      	bne.n	1000eec6 <at_ble_pair_key_reply+0x2a>
1000eed8:	466a      	mov	r2, sp
1000eeda:	4668      	mov	r0, sp
1000eedc:	7013      	strb	r3, [r2, #0]
1000eede:	0a1a      	lsrs	r2, r3, #8
1000eee0:	7042      	strb	r2, [r0, #1]
1000eee2:	0c1a      	lsrs	r2, r3, #16
1000eee4:	0e1b      	lsrs	r3, r3, #24
1000eee6:	7082      	strb	r2, [r0, #2]
1000eee8:	70c3      	strb	r3, [r0, #3]
1000eeea:	e009      	b.n	1000ef00 <at_ble_pair_key_reply+0x64>
1000eeec:	20cf      	movs	r0, #207	; 0xcf
1000eeee:	2c01      	cmp	r4, #1
1000eef0:	d10c      	bne.n	1000ef0c <at_ble_pair_key_reply+0x70>
1000eef2:	2300      	movs	r3, #0
1000eef4:	4668      	mov	r0, sp
1000eef6:	5cf2      	ldrb	r2, [r6, r3]
1000eef8:	54c2      	strb	r2, [r0, r3]
1000eefa:	3301      	adds	r3, #1
1000eefc:	2b10      	cmp	r3, #16
1000eefe:	d1f9      	bne.n	1000eef4 <at_ble_pair_key_reply+0x58>
1000ef00:	2004      	movs	r0, #4
1000ef02:	466a      	mov	r2, sp
1000ef04:	1c2b      	adds	r3, r5, #0
1000ef06:	4c03      	ldr	r4, [pc, #12]	; (1000ef14 <at_ble_pair_key_reply+0x78>)
1000ef08:	47a0      	blx	r4
1000ef0a:	2000      	movs	r0, #0
1000ef0c:	b005      	add	sp, #20
1000ef0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef10:	10011bc9 	.word	0x10011bc9
1000ef14:	1000f859 	.word	0x1000f859

1000ef18 <at_ble_send_slave_sec_request>:
1000ef18:	b570      	push	{r4, r5, r6, lr}
1000ef1a:	4b0c      	ldr	r3, [pc, #48]	; (1000ef4c <at_ble_send_slave_sec_request+0x34>)
1000ef1c:	1c0e      	adds	r6, r1, #0
1000ef1e:	2100      	movs	r1, #0
1000ef20:	1c05      	adds	r5, r0, #0
1000ef22:	1c14      	adds	r4, r2, #0
1000ef24:	4798      	blx	r3
1000ef26:	2301      	movs	r3, #1
1000ef28:	2807      	cmp	r0, #7
1000ef2a:	d80d      	bhi.n	1000ef48 <at_ble_send_slave_sec_request+0x30>
1000ef2c:	3311      	adds	r3, #17
1000ef2e:	4358      	muls	r0, r3
1000ef30:	4b07      	ldr	r3, [pc, #28]	; (1000ef50 <at_ble_send_slave_sec_request+0x38>)
1000ef32:	5cc2      	ldrb	r2, [r0, r3]
1000ef34:	23e0      	movs	r3, #224	; 0xe0
1000ef36:	2a01      	cmp	r2, #1
1000ef38:	d106      	bne.n	1000ef48 <at_ble_send_slave_sec_request+0x30>
1000ef3a:	00b1      	lsls	r1, r6, #2
1000ef3c:	430c      	orrs	r4, r1
1000ef3e:	4b05      	ldr	r3, [pc, #20]	; (1000ef54 <at_ble_send_slave_sec_request+0x3c>)
1000ef40:	b2e1      	uxtb	r1, r4
1000ef42:	1c28      	adds	r0, r5, #0
1000ef44:	4798      	blx	r3
1000ef46:	2300      	movs	r3, #0
1000ef48:	1c18      	adds	r0, r3, #0
1000ef4a:	bd70      	pop	{r4, r5, r6, pc}
1000ef4c:	1000f26d 	.word	0x1000f26d
1000ef50:	100167ce 	.word	0x100167ce
1000ef54:	1000f8a9 	.word	0x1000f8a9

1000ef58 <at_ble_encryption_start>:
1000ef58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ef5a:	23cf      	movs	r3, #207	; 0xcf
1000ef5c:	2900      	cmp	r1, #0
1000ef5e:	d02b      	beq.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef60:	2a05      	cmp	r2, #5
1000ef62:	d829      	bhi.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef64:	2701      	movs	r7, #1
1000ef66:	1c3d      	adds	r5, r7, #0
1000ef68:	2433      	movs	r4, #51	; 0x33
1000ef6a:	4095      	lsls	r5, r2
1000ef6c:	4225      	tst	r5, r4
1000ef6e:	d023      	beq.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef70:	7e8c      	ldrb	r4, [r1, #26]
1000ef72:	3c07      	subs	r4, #7
1000ef74:	2c09      	cmp	r4, #9
1000ef76:	d81f      	bhi.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef78:	4b10      	ldr	r3, [pc, #64]	; (1000efbc <at_ble_encryption_start+0x64>)
1000ef7a:	1c0c      	adds	r4, r1, #0
1000ef7c:	2100      	movs	r1, #0
1000ef7e:	1c15      	adds	r5, r2, #0
1000ef80:	1c06      	adds	r6, r0, #0
1000ef82:	4798      	blx	r3
1000ef84:	1c3b      	adds	r3, r7, #0
1000ef86:	2807      	cmp	r0, #7
1000ef88:	d816      	bhi.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef8a:	2312      	movs	r3, #18
1000ef8c:	4358      	muls	r0, r3
1000ef8e:	4b0c      	ldr	r3, [pc, #48]	; (1000efc0 <at_ble_encryption_start+0x68>)
1000ef90:	5cc7      	ldrb	r7, [r0, r3]
1000ef92:	23e0      	movs	r3, #224	; 0xe0
1000ef94:	2f00      	cmp	r7, #0
1000ef96:	d10f      	bne.n	1000efb8 <at_ble_encryption_start+0x60>
1000ef98:	1c21      	adds	r1, r4, #0
1000ef9a:	221c      	movs	r2, #28
1000ef9c:	4b09      	ldr	r3, [pc, #36]	; (1000efc4 <at_ble_encryption_start+0x6c>)
1000ef9e:	480a      	ldr	r0, [pc, #40]	; (1000efc8 <at_ble_encryption_start+0x70>)
1000efa0:	4798      	blx	r3
1000efa2:	1c23      	adds	r3, r4, #0
1000efa4:	7ea1      	ldrb	r1, [r4, #26]
1000efa6:	8a22      	ldrh	r2, [r4, #16]
1000efa8:	3312      	adds	r3, #18
1000efaa:	9100      	str	r1, [sp, #0]
1000efac:	9501      	str	r5, [sp, #4]
1000efae:	1c21      	adds	r1, r4, #0
1000efb0:	1c30      	adds	r0, r6, #0
1000efb2:	4c06      	ldr	r4, [pc, #24]	; (1000efcc <at_ble_encryption_start+0x74>)
1000efb4:	47a0      	blx	r4
1000efb6:	1c3b      	adds	r3, r7, #0
1000efb8:	1c18      	adds	r0, r3, #0
1000efba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000efbc:	1000f26d 	.word	0x1000f26d
1000efc0:	100167ce 	.word	0x100167ce
1000efc4:	10011bb7 	.word	0x10011bb7
1000efc8:	100168dc 	.word	0x100168dc
1000efcc:	1000f8e9 	.word	0x1000f8e9

1000efd0 <at_ble_encryption_request_reply>:
1000efd0:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000efd2:	24cf      	movs	r4, #207	; 0xcf
1000efd4:	2b00      	cmp	r3, #0
1000efd6:	d011      	beq.n	1000effc <at_ble_encryption_request_reply+0x2c>
1000efd8:	2a00      	cmp	r2, #0
1000efda:	d00a      	beq.n	1000eff2 <at_ble_encryption_request_reply+0x22>
1000efdc:	2905      	cmp	r1, #5
1000efde:	d80d      	bhi.n	1000effc <at_ble_encryption_request_reply+0x2c>
1000efe0:	2501      	movs	r5, #1
1000efe2:	2633      	movs	r6, #51	; 0x33
1000efe4:	408d      	lsls	r5, r1
1000efe6:	4235      	tst	r5, r6
1000efe8:	d008      	beq.n	1000effc <at_ble_encryption_request_reply+0x2c>
1000efea:	7e9d      	ldrb	r5, [r3, #26]
1000efec:	3d07      	subs	r5, #7
1000efee:	2d09      	cmp	r5, #9
1000eff0:	d804      	bhi.n	1000effc <at_ble_encryption_request_reply+0x2c>
1000eff2:	7e9c      	ldrb	r4, [r3, #26]
1000eff4:	9400      	str	r4, [sp, #0]
1000eff6:	4c02      	ldr	r4, [pc, #8]	; (1000f000 <at_ble_encryption_request_reply+0x30>)
1000eff8:	47a0      	blx	r4
1000effa:	2400      	movs	r4, #0
1000effc:	1c20      	adds	r0, r4, #0
1000effe:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f000:	1000f9a5 	.word	0x1000f9a5

1000f004 <rx_callback>:
1000f004:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f006:	8883      	ldrh	r3, [r0, #4]
1000f008:	1c01      	adds	r1, r0, #0
1000f00a:	9301      	str	r3, [sp, #4]
1000f00c:	88c5      	ldrh	r5, [r0, #6]
1000f00e:	8806      	ldrh	r6, [r0, #0]
1000f010:	2d00      	cmp	r5, #0
1000f012:	d10f      	bne.n	1000f034 <rx_callback+0x30>
1000f014:	1c19      	adds	r1, r3, #0
1000f016:	1c30      	adds	r0, r6, #0
1000f018:	4b19      	ldr	r3, [pc, #100]	; (1000f080 <rx_callback+0x7c>)
1000f01a:	1c2a      	adds	r2, r5, #0
1000f01c:	4798      	blx	r3
1000f01e:	1e03      	subs	r3, r0, #0
1000f020:	d105      	bne.n	1000f02e <rx_callback+0x2a>
1000f022:	1c30      	adds	r0, r6, #0
1000f024:	9901      	ldr	r1, [sp, #4]
1000f026:	1c1a      	adds	r2, r3, #0
1000f028:	4c16      	ldr	r4, [pc, #88]	; (1000f084 <rx_callback+0x80>)
1000f02a:	47a0      	blx	r4
1000f02c:	e027      	b.n	1000f07e <rx_callback+0x7a>
1000f02e:	4b16      	ldr	r3, [pc, #88]	; (1000f088 <rx_callback+0x84>)
1000f030:	4798      	blx	r3
1000f032:	e024      	b.n	1000f07e <rx_callback+0x7a>
1000f034:	4c15      	ldr	r4, [pc, #84]	; (1000f08c <rx_callback+0x88>)
1000f036:	4a16      	ldr	r2, [pc, #88]	; (1000f090 <rx_callback+0x8c>)
1000f038:	6823      	ldr	r3, [r4, #0]
1000f03a:	6812      	ldr	r2, [r2, #0]
1000f03c:	18eb      	adds	r3, r5, r3
1000f03e:	4293      	cmp	r3, r2
1000f040:	d901      	bls.n	1000f046 <rx_callback+0x42>
1000f042:	2300      	movs	r3, #0
1000f044:	6023      	str	r3, [r4, #0]
1000f046:	4f13      	ldr	r7, [pc, #76]	; (1000f094 <rx_callback+0x90>)
1000f048:	6822      	ldr	r2, [r4, #0]
1000f04a:	683b      	ldr	r3, [r7, #0]
1000f04c:	3108      	adds	r1, #8
1000f04e:	1898      	adds	r0, r3, r2
1000f050:	1c2a      	adds	r2, r5, #0
1000f052:	4b11      	ldr	r3, [pc, #68]	; (1000f098 <rx_callback+0x94>)
1000f054:	4798      	blx	r3
1000f056:	683b      	ldr	r3, [r7, #0]
1000f058:	6822      	ldr	r2, [r4, #0]
1000f05a:	1c30      	adds	r0, r6, #0
1000f05c:	189a      	adds	r2, r3, r2
1000f05e:	9901      	ldr	r1, [sp, #4]
1000f060:	4b07      	ldr	r3, [pc, #28]	; (1000f080 <rx_callback+0x7c>)
1000f062:	4798      	blx	r3
1000f064:	2800      	cmp	r0, #0
1000f066:	d1e2      	bne.n	1000f02e <rx_callback+0x2a>
1000f068:	6823      	ldr	r3, [r4, #0]
1000f06a:	683a      	ldr	r2, [r7, #0]
1000f06c:	1c30      	adds	r0, r6, #0
1000f06e:	18d2      	adds	r2, r2, r3
1000f070:	9901      	ldr	r1, [sp, #4]
1000f072:	1c2b      	adds	r3, r5, #0
1000f074:	4e03      	ldr	r6, [pc, #12]	; (1000f084 <rx_callback+0x80>)
1000f076:	47b0      	blx	r6
1000f078:	6823      	ldr	r3, [r4, #0]
1000f07a:	18ed      	adds	r5, r5, r3
1000f07c:	6025      	str	r5, [r4, #0]
1000f07e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f080:	1000d699 	.word	0x1000d699
1000f084:	1000d611 	.word	0x1000d611
1000f088:	1000d081 	.word	0x1000d081
1000f08c:	10016938 	.word	0x10016938
1000f090:	10015878 	.word	0x10015878
1000f094:	10015874 	.word	0x10015874
1000f098:	10011bb7 	.word	0x10011bb7

1000f09c <interface_send>:
1000f09c:	b508      	push	{r3, lr}
1000f09e:	4b02      	ldr	r3, [pc, #8]	; (1000f0a8 <interface_send+0xc>)
1000f0a0:	4798      	blx	r3
1000f0a2:	2000      	movs	r0, #0
1000f0a4:	bd08      	pop	{r3, pc}
1000f0a6:	46c0      	nop			; (mov r8, r8)
1000f0a8:	1000cd79 	.word	0x1000cd79

1000f0ac <interface_init>:
1000f0ac:	2280      	movs	r2, #128	; 0x80
1000f0ae:	b510      	push	{r4, lr}
1000f0b0:	2100      	movs	r1, #0
1000f0b2:	1c04      	adds	r4, r0, #0
1000f0b4:	0092      	lsls	r2, r2, #2
1000f0b6:	4b08      	ldr	r3, [pc, #32]	; (1000f0d8 <interface_init+0x2c>)
1000f0b8:	4808      	ldr	r0, [pc, #32]	; (1000f0dc <interface_init+0x30>)
1000f0ba:	4798      	blx	r3
1000f0bc:	2200      	movs	r2, #0
1000f0be:	4b08      	ldr	r3, [pc, #32]	; (1000f0e0 <interface_init+0x34>)
1000f0c0:	601a      	str	r2, [r3, #0]
1000f0c2:	4a08      	ldr	r2, [pc, #32]	; (1000f0e4 <interface_init+0x38>)
1000f0c4:	4b08      	ldr	r3, [pc, #32]	; (1000f0e8 <interface_init+0x3c>)
1000f0c6:	601a      	str	r2, [r3, #0]
1000f0c8:	4b08      	ldr	r3, [pc, #32]	; (1000f0ec <interface_init+0x40>)
1000f0ca:	6922      	ldr	r2, [r4, #16]
1000f0cc:	601a      	str	r2, [r3, #0]
1000f0ce:	6962      	ldr	r2, [r4, #20]
1000f0d0:	4b07      	ldr	r3, [pc, #28]	; (1000f0f0 <interface_init+0x44>)
1000f0d2:	601a      	str	r2, [r3, #0]
1000f0d4:	bd10      	pop	{r4, pc}
1000f0d6:	46c0      	nop			; (mov r8, r8)
1000f0d8:	10011bc9 	.word	0x10011bc9
1000f0dc:	10016b3c 	.word	0x10016b3c
1000f0e0:	10016938 	.word	0x10016938
1000f0e4:	1001693c 	.word	0x1001693c
1000f0e8:	10013ddc 	.word	0x10013ddc
1000f0ec:	10015874 	.word	0x10015874
1000f0f0:	10015878 	.word	0x10015878

1000f0f4 <platform_cmd_cmpl_signal>:
1000f0f4:	2201      	movs	r2, #1
1000f0f6:	4b01      	ldr	r3, [pc, #4]	; (1000f0fc <platform_cmd_cmpl_signal+0x8>)
1000f0f8:	601a      	str	r2, [r3, #0]
1000f0fa:	4770      	bx	lr
1000f0fc:	1001587c 	.word	0x1001587c

1000f100 <platform_cmd_cmpl_wait>:
1000f100:	b510      	push	{r4, lr}
1000f102:	1c04      	adds	r4, r0, #0
1000f104:	4b07      	ldr	r3, [pc, #28]	; (1000f124 <platform_cmd_cmpl_wait+0x24>)
1000f106:	681a      	ldr	r2, [r3, #0]
1000f108:	2a01      	cmp	r2, #1
1000f10a:	d003      	beq.n	1000f114 <platform_cmd_cmpl_wait+0x14>
1000f10c:	4b06      	ldr	r3, [pc, #24]	; (1000f128 <platform_cmd_cmpl_wait+0x28>)
1000f10e:	2000      	movs	r0, #0
1000f110:	4798      	blx	r3
1000f112:	e7f7      	b.n	1000f104 <platform_cmd_cmpl_wait+0x4>
1000f114:	6819      	ldr	r1, [r3, #0]
1000f116:	2901      	cmp	r1, #1
1000f118:	d102      	bne.n	1000f120 <platform_cmd_cmpl_wait+0x20>
1000f11a:	2200      	movs	r2, #0
1000f11c:	601a      	str	r2, [r3, #0]
1000f11e:	e000      	b.n	1000f122 <platform_cmd_cmpl_wait+0x22>
1000f120:	7022      	strb	r2, [r4, #0]
1000f122:	bd10      	pop	{r4, pc}
1000f124:	1001587c 	.word	0x1001587c
1000f128:	1000ce09 	.word	0x1000ce09

1000f12c <start_timer>:
1000f12c:	4770      	bx	lr

1000f12e <stop_timer>:
1000f12e:	4770      	bx	lr

1000f130 <dbg_le_set_bd_addr_req_handler>:
1000f130:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f132:	466b      	mov	r3, sp
1000f134:	1dde      	adds	r6, r3, #7
1000f136:	2300      	movs	r3, #0
1000f138:	7033      	strb	r3, [r6, #0]
1000f13a:	230f      	movs	r3, #15
1000f13c:	4c13      	ldr	r4, [pc, #76]	; (1000f18c <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f13e:	2703      	movs	r7, #3
1000f140:	7023      	strb	r3, [r4, #0]
1000f142:	2300      	movs	r3, #0
1000f144:	70e3      	strb	r3, [r4, #3]
1000f146:	4b12      	ldr	r3, [pc, #72]	; (1000f190 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f148:	1c01      	adds	r1, r0, #0
1000f14a:	881a      	ldrh	r2, [r3, #0]
1000f14c:	881b      	ldrh	r3, [r3, #0]
1000f14e:	7122      	strb	r2, [r4, #4]
1000f150:	0a1b      	lsrs	r3, r3, #8
1000f152:	2206      	movs	r2, #6
1000f154:	7163      	strb	r3, [r4, #5]
1000f156:	480f      	ldr	r0, [pc, #60]	; (1000f194 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f158:	4b0f      	ldr	r3, [pc, #60]	; (1000f198 <dbg_le_set_bd_addr_req_handler+0x68>)
1000f15a:	7067      	strb	r7, [r4, #1]
1000f15c:	70a7      	strb	r7, [r4, #2]
1000f15e:	4798      	blx	r3
1000f160:	4d0e      	ldr	r5, [pc, #56]	; (1000f19c <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f162:	4b0f      	ldr	r3, [pc, #60]	; (1000f1a0 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f164:	210e      	movs	r1, #14
1000f166:	802b      	strh	r3, [r5, #0]
1000f168:	2306      	movs	r3, #6
1000f16a:	71a3      	strb	r3, [r4, #6]
1000f16c:	2300      	movs	r3, #0
1000f16e:	1c20      	adds	r0, r4, #0
1000f170:	71e3      	strb	r3, [r4, #7]
1000f172:	4b0c      	ldr	r3, [pc, #48]	; (1000f1a4 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f174:	80af      	strh	r7, [r5, #4]
1000f176:	4798      	blx	r3
1000f178:	1c30      	adds	r0, r6, #0
1000f17a:	4b0b      	ldr	r3, [pc, #44]	; (1000f1a8 <dbg_le_set_bd_addr_req_handler+0x78>)
1000f17c:	4798      	blx	r3
1000f17e:	7833      	ldrb	r3, [r6, #0]
1000f180:	20e2      	movs	r0, #226	; 0xe2
1000f182:	2b00      	cmp	r3, #0
1000f184:	d101      	bne.n	1000f18a <dbg_le_set_bd_addr_req_handler+0x5a>
1000f186:	68ab      	ldr	r3, [r5, #8]
1000f188:	7818      	ldrb	r0, [r3, #0]
1000f18a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f18c:	10016b3c 	.word	0x10016b3c
1000f190:	100167cc 	.word	0x100167cc
1000f194:	10016b44 	.word	0x10016b44
1000f198:	10011bb7 	.word	0x10011bb7
1000f19c:	100167c0 	.word	0x100167c0
1000f1a0:	00000329 	.word	0x00000329
1000f1a4:	1000f09d 	.word	0x1000f09d
1000f1a8:	1000f101 	.word	0x1000f101

1000f1ac <gapc_get_dev_info_cfm.constprop.1>:
1000f1ac:	b538      	push	{r3, r4, r5, lr}
1000f1ae:	230b      	movs	r3, #11
1000f1b0:	4c27      	ldr	r4, [pc, #156]	; (1000f250 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f1b2:	7023      	strb	r3, [r4, #0]
1000f1b4:	3303      	adds	r3, #3
1000f1b6:	7063      	strb	r3, [r4, #1]
1000f1b8:	3329      	adds	r3, #41	; 0x29
1000f1ba:	70a3      	strb	r3, [r4, #2]
1000f1bc:	4b25      	ldr	r3, [pc, #148]	; (1000f254 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f1be:	70e1      	strb	r1, [r4, #3]
1000f1c0:	881a      	ldrh	r2, [r3, #0]
1000f1c2:	881b      	ldrh	r3, [r3, #0]
1000f1c4:	7122      	strb	r2, [r4, #4]
1000f1c6:	0a1b      	lsrs	r3, r3, #8
1000f1c8:	7163      	strb	r3, [r4, #5]
1000f1ca:	2300      	movs	r3, #0
1000f1cc:	7220      	strb	r0, [r4, #8]
1000f1ce:	7263      	strb	r3, [r4, #9]
1000f1d0:	2801      	cmp	r0, #1
1000f1d2:	d02b      	beq.n	1000f22c <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f1d4:	4298      	cmp	r0, r3
1000f1d6:	d01b      	beq.n	1000f210 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f1d8:	2802      	cmp	r0, #2
1000f1da:	d12f      	bne.n	1000f23c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f1dc:	4b1e      	ldr	r3, [pc, #120]	; (1000f258 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f1de:	2112      	movs	r1, #18
1000f1e0:	1c1a      	adds	r2, r3, #0
1000f1e2:	32ce      	adds	r2, #206	; 0xce
1000f1e4:	8812      	ldrh	r2, [r2, #0]
1000f1e6:	72a2      	strb	r2, [r4, #10]
1000f1e8:	0a12      	lsrs	r2, r2, #8
1000f1ea:	72e2      	strb	r2, [r4, #11]
1000f1ec:	1c1a      	adds	r2, r3, #0
1000f1ee:	32d0      	adds	r2, #208	; 0xd0
1000f1f0:	8812      	ldrh	r2, [r2, #0]
1000f1f2:	7322      	strb	r2, [r4, #12]
1000f1f4:	0a12      	lsrs	r2, r2, #8
1000f1f6:	7362      	strb	r2, [r4, #13]
1000f1f8:	1c1a      	adds	r2, r3, #0
1000f1fa:	32d2      	adds	r2, #210	; 0xd2
1000f1fc:	8812      	ldrh	r2, [r2, #0]
1000f1fe:	33d4      	adds	r3, #212	; 0xd4
1000f200:	73a2      	strb	r2, [r4, #14]
1000f202:	0a12      	lsrs	r2, r2, #8
1000f204:	73e2      	strb	r2, [r4, #15]
1000f206:	881b      	ldrh	r3, [r3, #0]
1000f208:	7423      	strb	r3, [r4, #16]
1000f20a:	0a1b      	lsrs	r3, r3, #8
1000f20c:	7463      	strb	r3, [r4, #17]
1000f20e:	e016      	b.n	1000f23e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f210:	4b11      	ldr	r3, [pc, #68]	; (1000f258 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f212:	4912      	ldr	r1, [pc, #72]	; (1000f25c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f214:	33aa      	adds	r3, #170	; 0xaa
1000f216:	881d      	ldrh	r5, [r3, #0]
1000f218:	4811      	ldr	r0, [pc, #68]	; (1000f260 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f21a:	0a2b      	lsrs	r3, r5, #8
1000f21c:	72a5      	strb	r5, [r4, #10]
1000f21e:	72e3      	strb	r3, [r4, #11]
1000f220:	1c2a      	adds	r2, r5, #0
1000f222:	4b10      	ldr	r3, [pc, #64]	; (1000f264 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f224:	350c      	adds	r5, #12
1000f226:	4798      	blx	r3
1000f228:	b2a9      	uxth	r1, r5
1000f22a:	e008      	b.n	1000f23e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f22c:	4b0a      	ldr	r3, [pc, #40]	; (1000f258 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f22e:	210c      	movs	r1, #12
1000f230:	33cc      	adds	r3, #204	; 0xcc
1000f232:	881b      	ldrh	r3, [r3, #0]
1000f234:	72a3      	strb	r3, [r4, #10]
1000f236:	0a1b      	lsrs	r3, r3, #8
1000f238:	72e3      	strb	r3, [r4, #11]
1000f23a:	e000      	b.n	1000f23e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f23c:	210a      	movs	r1, #10
1000f23e:	1c0b      	adds	r3, r1, #0
1000f240:	3b08      	subs	r3, #8
1000f242:	71a3      	strb	r3, [r4, #6]
1000f244:	121b      	asrs	r3, r3, #8
1000f246:	71e3      	strb	r3, [r4, #7]
1000f248:	1c20      	adds	r0, r4, #0
1000f24a:	4b07      	ldr	r3, [pc, #28]	; (1000f268 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f24c:	4798      	blx	r3
1000f24e:	bd38      	pop	{r3, r4, r5, pc}
1000f250:	10016b3c 	.word	0x10016b3c
1000f254:	100167cc 	.word	0x100167cc
1000f258:	1001685e 	.word	0x1001685e
1000f25c:	1001690a 	.word	0x1001690a
1000f260:	10016b48 	.word	0x10016b48
1000f264:	10011bb7 	.word	0x10011bb7
1000f268:	1000f09d 	.word	0x1000f09d

1000f26c <check_ConnData_idx_role>:
1000f26c:	4b0c      	ldr	r3, [pc, #48]	; (1000f2a0 <check_ConnData_idx_role+0x34>)
1000f26e:	b570      	push	{r4, r5, r6, lr}
1000f270:	1c04      	adds	r4, r0, #0
1000f272:	2008      	movs	r0, #8
1000f274:	429c      	cmp	r4, r3
1000f276:	d011      	beq.n	1000f29c <check_ConnData_idx_role+0x30>
1000f278:	2300      	movs	r3, #0
1000f27a:	2212      	movs	r2, #18
1000f27c:	435a      	muls	r2, r3
1000f27e:	4d09      	ldr	r5, [pc, #36]	; (1000f2a4 <check_ConnData_idx_role+0x38>)
1000f280:	b2d8      	uxtb	r0, r3
1000f282:	1956      	adds	r6, r2, r5
1000f284:	8976      	ldrh	r6, [r6, #10]
1000f286:	42a6      	cmp	r6, r4
1000f288:	d104      	bne.n	1000f294 <check_ConnData_idx_role+0x28>
1000f28a:	2900      	cmp	r1, #0
1000f28c:	d006      	beq.n	1000f29c <check_ConnData_idx_role+0x30>
1000f28e:	5d53      	ldrb	r3, [r2, r5]
1000f290:	700b      	strb	r3, [r1, #0]
1000f292:	e003      	b.n	1000f29c <check_ConnData_idx_role+0x30>
1000f294:	3301      	adds	r3, #1
1000f296:	2b08      	cmp	r3, #8
1000f298:	d1ef      	bne.n	1000f27a <check_ConnData_idx_role+0xe>
1000f29a:	1c18      	adds	r0, r3, #0
1000f29c:	bd70      	pop	{r4, r5, r6, pc}
1000f29e:	46c0      	nop			; (mov r8, r8)
1000f2a0:	0000ffff 	.word	0x0000ffff
1000f2a4:	100167ce 	.word	0x100167ce

1000f2a8 <check_ConnData_emptyEntry>:
1000f2a8:	2300      	movs	r3, #0
1000f2aa:	2212      	movs	r2, #18
1000f2ac:	435a      	muls	r2, r3
1000f2ae:	4906      	ldr	r1, [pc, #24]	; (1000f2c8 <check_ConnData_emptyEntry+0x20>)
1000f2b0:	b2d8      	uxtb	r0, r3
1000f2b2:	1852      	adds	r2, r2, r1
1000f2b4:	8951      	ldrh	r1, [r2, #10]
1000f2b6:	4a05      	ldr	r2, [pc, #20]	; (1000f2cc <check_ConnData_emptyEntry+0x24>)
1000f2b8:	4291      	cmp	r1, r2
1000f2ba:	d003      	beq.n	1000f2c4 <check_ConnData_emptyEntry+0x1c>
1000f2bc:	3301      	adds	r3, #1
1000f2be:	2b08      	cmp	r3, #8
1000f2c0:	d1f3      	bne.n	1000f2aa <check_ConnData_emptyEntry+0x2>
1000f2c2:	1c18      	adds	r0, r3, #0
1000f2c4:	4770      	bx	lr
1000f2c6:	46c0      	nop			; (mov r8, r8)
1000f2c8:	100167ce 	.word	0x100167ce
1000f2cc:	0000ffff 	.word	0x0000ffff

1000f2d0 <gapc_cmp_evt>:
1000f2d0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f2d2:	780b      	ldrb	r3, [r1, #0]
1000f2d4:	1c05      	adds	r5, r0, #0
1000f2d6:	1e58      	subs	r0, r3, #1
1000f2d8:	784e      	ldrb	r6, [r1, #1]
1000f2da:	280f      	cmp	r0, #15
1000f2dc:	d85a      	bhi.n	1000f394 <gapc_cmp_evt+0xc4>
1000f2de:	1c14      	adds	r4, r2, #0
1000f2e0:	f001 fba4 	bl	10010a2c <__gnu_thumb1_case_uqi>
1000f2e4:	5858440a 	.word	0x5858440a
1000f2e8:	4b584444 	.word	0x4b584444
1000f2ec:	0825122d 	.word	0x0825122d
1000f2f0:	3e395858 	.word	0x3e395858
1000f2f4:	203b      	movs	r0, #59	; 0x3b
1000f2f6:	e04e      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f2f8:	203b      	movs	r0, #59	; 0x3b
1000f2fa:	2e00      	cmp	r6, #0
1000f2fc:	d04b      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f2fe:	0a2d      	lsrs	r5, r5, #8
1000f300:	8015      	strh	r5, [r2, #0]
1000f302:	7096      	strb	r6, [r2, #2]
1000f304:	3835      	subs	r0, #53	; 0x35
1000f306:	e046      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f308:	466b      	mov	r3, sp
1000f30a:	1ddf      	adds	r7, r3, #7
1000f30c:	2301      	movs	r3, #1
1000f30e:	0a2d      	lsrs	r5, r5, #8
1000f310:	703b      	strb	r3, [r7, #0]
1000f312:	1c28      	adds	r0, r5, #0
1000f314:	1c39      	adds	r1, r7, #0
1000f316:	4b20      	ldr	r3, [pc, #128]	; (1000f398 <gapc_cmp_evt+0xc8>)
1000f318:	4798      	blx	r3
1000f31a:	2807      	cmp	r0, #7
1000f31c:	d803      	bhi.n	1000f326 <gapc_cmp_evt+0x56>
1000f31e:	783b      	ldrb	r3, [r7, #0]
1000f320:	203b      	movs	r0, #59	; 0x3b
1000f322:	2b00      	cmp	r3, #0
1000f324:	d037      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f326:	8065      	strh	r5, [r4, #2]
1000f328:	7126      	strb	r6, [r4, #4]
1000f32a:	2009      	movs	r0, #9
1000f32c:	e033      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f32e:	203b      	movs	r0, #59	; 0x3b
1000f330:	2e00      	cmp	r6, #0
1000f332:	d030      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f334:	0a2d      	lsrs	r5, r5, #8
1000f336:	8015      	strh	r5, [r2, #0]
1000f338:	7096      	strb	r6, [r2, #2]
1000f33a:	382d      	subs	r0, #45	; 0x2d
1000f33c:	e02b      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f33e:	203b      	movs	r0, #59	; 0x3b
1000f340:	2e00      	cmp	r6, #0
1000f342:	d028      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f344:	2300      	movs	r3, #0
1000f346:	0a2d      	lsrs	r5, r5, #8
1000f348:	8015      	strh	r5, [r2, #0]
1000f34a:	7096      	strb	r6, [r2, #2]
1000f34c:	8093      	strh	r3, [r2, #4]
1000f34e:	80d3      	strh	r3, [r2, #6]
1000f350:	8113      	strh	r3, [r2, #8]
1000f352:	3834      	subs	r0, #52	; 0x34
1000f354:	e01f      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f356:	203b      	movs	r0, #59	; 0x3b
1000f358:	2e00      	cmp	r6, #0
1000f35a:	d01c      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f35c:	7216      	strb	r6, [r2, #8]
1000f35e:	e003      	b.n	1000f368 <gapc_cmp_evt+0x98>
1000f360:	203b      	movs	r0, #59	; 0x3b
1000f362:	2e00      	cmp	r6, #0
1000f364:	d017      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f366:	7116      	strb	r6, [r2, #4]
1000f368:	3812      	subs	r0, #18
1000f36a:	e014      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f36c:	203b      	movs	r0, #59	; 0x3b
1000f36e:	2e00      	cmp	r6, #0
1000f370:	d011      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f372:	7093      	strb	r3, [r2, #2]
1000f374:	70d6      	strb	r6, [r2, #3]
1000f376:	382a      	subs	r0, #42	; 0x2a
1000f378:	e00d      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f37a:	203b      	movs	r0, #59	; 0x3b
1000f37c:	2e00      	cmp	r6, #0
1000f37e:	d00a      	beq.n	1000f396 <gapc_cmp_evt+0xc6>
1000f380:	0a2d      	lsrs	r5, r5, #8
1000f382:	7016      	strb	r6, [r2, #0]
1000f384:	8055      	strh	r5, [r2, #2]
1000f386:	1d10      	adds	r0, r2, #4
1000f388:	2100      	movs	r1, #0
1000f38a:	2205      	movs	r2, #5
1000f38c:	4b03      	ldr	r3, [pc, #12]	; (1000f39c <gapc_cmp_evt+0xcc>)
1000f38e:	4798      	blx	r3
1000f390:	2012      	movs	r0, #18
1000f392:	e000      	b.n	1000f396 <gapc_cmp_evt+0xc6>
1000f394:	2000      	movs	r0, #0
1000f396:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f398:	1000f26d 	.word	0x1000f26d
1000f39c:	10011bc9 	.word	0x10011bc9

1000f3a0 <gapc_connection_cfm_handler>:
1000f3a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3a2:	b085      	sub	sp, #20
1000f3a4:	1c1d      	adds	r5, r3, #0
1000f3a6:	ab0a      	add	r3, sp, #40	; 0x28
1000f3a8:	781b      	ldrb	r3, [r3, #0]
1000f3aa:	9201      	str	r2, [sp, #4]
1000f3ac:	9302      	str	r3, [sp, #8]
1000f3ae:	ab0b      	add	r3, sp, #44	; 0x2c
1000f3b0:	781b      	ldrb	r3, [r3, #0]
1000f3b2:	1c07      	adds	r7, r0, #0
1000f3b4:	9303      	str	r3, [sp, #12]
1000f3b6:	ab0c      	add	r3, sp, #48	; 0x30
1000f3b8:	881a      	ldrh	r2, [r3, #0]
1000f3ba:	2302      	movs	r3, #2
1000f3bc:	1c0e      	adds	r6, r1, #0
1000f3be:	4c23      	ldr	r4, [pc, #140]	; (1000f44c <gapc_connection_cfm_handler+0xac>)
1000f3c0:	1c39      	adds	r1, r7, #0
1000f3c2:	7023      	strb	r3, [r4, #0]
1000f3c4:	330c      	adds	r3, #12
1000f3c6:	7063      	strb	r3, [r4, #1]
1000f3c8:	70a3      	strb	r3, [r4, #2]
1000f3ca:	4b21      	ldr	r3, [pc, #132]	; (1000f450 <gapc_connection_cfm_handler+0xb0>)
1000f3cc:	70e2      	strb	r2, [r4, #3]
1000f3ce:	881a      	ldrh	r2, [r3, #0]
1000f3d0:	881b      	ldrh	r3, [r3, #0]
1000f3d2:	7122      	strb	r2, [r4, #4]
1000f3d4:	0a1b      	lsrs	r3, r3, #8
1000f3d6:	4f1f      	ldr	r7, [pc, #124]	; (1000f454 <gapc_connection_cfm_handler+0xb4>)
1000f3d8:	2210      	movs	r2, #16
1000f3da:	481f      	ldr	r0, [pc, #124]	; (1000f458 <gapc_connection_cfm_handler+0xb8>)
1000f3dc:	7163      	strb	r3, [r4, #5]
1000f3de:	47b8      	blx	r7
1000f3e0:	0a33      	lsrs	r3, r6, #8
1000f3e2:	7626      	strb	r6, [r4, #24]
1000f3e4:	7663      	strb	r3, [r4, #25]
1000f3e6:	9901      	ldr	r1, [sp, #4]
1000f3e8:	0c33      	lsrs	r3, r6, #16
1000f3ea:	2210      	movs	r2, #16
1000f3ec:	0e36      	lsrs	r6, r6, #24
1000f3ee:	481b      	ldr	r0, [pc, #108]	; (1000f45c <gapc_connection_cfm_handler+0xbc>)
1000f3f0:	76a3      	strb	r3, [r4, #26]
1000f3f2:	76e6      	strb	r6, [r4, #27]
1000f3f4:	47b8      	blx	r7
1000f3f6:	1c23      	adds	r3, r4, #0
1000f3f8:	332c      	adds	r3, #44	; 0x2c
1000f3fa:	701d      	strb	r5, [r3, #0]
1000f3fc:	1c23      	adds	r3, r4, #0
1000f3fe:	0a2a      	lsrs	r2, r5, #8
1000f400:	332d      	adds	r3, #45	; 0x2d
1000f402:	701a      	strb	r2, [r3, #0]
1000f404:	1c23      	adds	r3, r4, #0
1000f406:	0c2a      	lsrs	r2, r5, #16
1000f408:	332e      	adds	r3, #46	; 0x2e
1000f40a:	701a      	strb	r2, [r3, #0]
1000f40c:	1c23      	adds	r3, r4, #0
1000f40e:	0e2d      	lsrs	r5, r5, #24
1000f410:	332f      	adds	r3, #47	; 0x2f
1000f412:	466a      	mov	r2, sp
1000f414:	701d      	strb	r5, [r3, #0]
1000f416:	1c23      	adds	r3, r4, #0
1000f418:	7a12      	ldrb	r2, [r2, #8]
1000f41a:	3330      	adds	r3, #48	; 0x30
1000f41c:	701a      	strb	r2, [r3, #0]
1000f41e:	1c23      	adds	r3, r4, #0
1000f420:	2500      	movs	r5, #0
1000f422:	3331      	adds	r3, #49	; 0x31
1000f424:	466a      	mov	r2, sp
1000f426:	701d      	strb	r5, [r3, #0]
1000f428:	1c23      	adds	r3, r4, #0
1000f42a:	7b12      	ldrb	r2, [r2, #12]
1000f42c:	3332      	adds	r3, #50	; 0x32
1000f42e:	701a      	strb	r2, [r3, #0]
1000f430:	1c23      	adds	r3, r4, #0
1000f432:	3333      	adds	r3, #51	; 0x33
1000f434:	701d      	strb	r5, [r3, #0]
1000f436:	232c      	movs	r3, #44	; 0x2c
1000f438:	1c20      	adds	r0, r4, #0
1000f43a:	71a3      	strb	r3, [r4, #6]
1000f43c:	2134      	movs	r1, #52	; 0x34
1000f43e:	4b08      	ldr	r3, [pc, #32]	; (1000f460 <gapc_connection_cfm_handler+0xc0>)
1000f440:	71e5      	strb	r5, [r4, #7]
1000f442:	4798      	blx	r3
1000f444:	1c28      	adds	r0, r5, #0
1000f446:	b005      	add	sp, #20
1000f448:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f44a:	46c0      	nop			; (mov r8, r8)
1000f44c:	10016b3c 	.word	0x10016b3c
1000f450:	100167cc 	.word	0x100167cc
1000f454:	10011bb7 	.word	0x10011bb7
1000f458:	10016b44 	.word	0x10016b44
1000f45c:	10016b58 	.word	0x10016b58
1000f460:	1000f09d 	.word	0x1000f09d

1000f464 <gapc_con_req_ind>:
1000f464:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f466:	7845      	ldrb	r5, [r0, #1]
1000f468:	7803      	ldrb	r3, [r0, #0]
1000f46a:	4c30      	ldr	r4, [pc, #192]	; (1000f52c <gapc_con_req_ind+0xc8>)
1000f46c:	022d      	lsls	r5, r5, #8
1000f46e:	431d      	orrs	r5, r3
1000f470:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000f472:	78c3      	ldrb	r3, [r0, #3]
1000f474:	7882      	ldrb	r2, [r0, #2]
1000f476:	b08b      	sub	sp, #44	; 0x2c
1000f478:	021b      	lsls	r3, r3, #8
1000f47a:	431a      	orrs	r2, r3
1000f47c:	466b      	mov	r3, sp
1000f47e:	9205      	str	r2, [sp, #20]
1000f480:	8a9b      	ldrh	r3, [r3, #20]
1000f482:	2120      	movs	r1, #32
1000f484:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000f486:	7943      	ldrb	r3, [r0, #5]
1000f488:	7902      	ldrb	r2, [r0, #4]
1000f48a:	021b      	lsls	r3, r3, #8
1000f48c:	431a      	orrs	r2, r3
1000f48e:	466b      	mov	r3, sp
1000f490:	9206      	str	r2, [sp, #24]
1000f492:	8b1b      	ldrh	r3, [r3, #24]
1000f494:	1c06      	adds	r6, r0, #0
1000f496:	8623      	strh	r3, [r4, #48]	; 0x30
1000f498:	79c3      	ldrb	r3, [r0, #7]
1000f49a:	7982      	ldrb	r2, [r0, #6]
1000f49c:	021b      	lsls	r3, r3, #8
1000f49e:	431a      	orrs	r2, r3
1000f4a0:	466b      	mov	r3, sp
1000f4a2:	9207      	str	r2, [sp, #28]
1000f4a4:	466a      	mov	r2, sp
1000f4a6:	8b9b      	ldrh	r3, [r3, #28]
1000f4a8:	1852      	adds	r2, r2, r1
1000f4aa:	8663      	strh	r3, [r4, #50]	; 0x32
1000f4ac:	7a43      	ldrb	r3, [r0, #9]
1000f4ae:	1c01      	adds	r1, r0, #0
1000f4b0:	9308      	str	r3, [sp, #32]
1000f4b2:	1c23      	adds	r3, r4, #0
1000f4b4:	7812      	ldrb	r2, [r2, #0]
1000f4b6:	3377      	adds	r3, #119	; 0x77
1000f4b8:	3478      	adds	r4, #120	; 0x78
1000f4ba:	701a      	strb	r2, [r3, #0]
1000f4bc:	310a      	adds	r1, #10
1000f4be:	2206      	movs	r2, #6
1000f4c0:	4b1b      	ldr	r3, [pc, #108]	; (1000f530 <gapc_con_req_ind+0xcc>)
1000f4c2:	1c20      	adds	r0, r4, #0
1000f4c4:	4798      	blx	r3
1000f4c6:	7c33      	ldrb	r3, [r6, #16]
1000f4c8:	9309      	str	r3, [sp, #36]	; 0x24
1000f4ca:	4b1a      	ldr	r3, [pc, #104]	; (1000f534 <gapc_con_req_ind+0xd0>)
1000f4cc:	4798      	blx	r3
1000f4ce:	4e1a      	ldr	r6, [pc, #104]	; (1000f538 <gapc_con_req_ind+0xd4>)
1000f4d0:	1e07      	subs	r7, r0, #0
1000f4d2:	2f07      	cmp	r7, #7
1000f4d4:	d81b      	bhi.n	1000f50e <gapc_con_req_ind+0xaa>
1000f4d6:	2312      	movs	r3, #18
1000f4d8:	4343      	muls	r3, r0
1000f4da:	18f0      	adds	r0, r6, r3
1000f4dc:	8145      	strh	r5, [r0, #10]
1000f4de:	4669      	mov	r1, sp
1000f4e0:	2524      	movs	r5, #36	; 0x24
1000f4e2:	1949      	adds	r1, r1, r5
1000f4e4:	7809      	ldrb	r1, [r1, #0]
1000f4e6:	2206      	movs	r2, #6
1000f4e8:	54f1      	strb	r1, [r6, r3]
1000f4ea:	2120      	movs	r1, #32
1000f4ec:	466b      	mov	r3, sp
1000f4ee:	185b      	adds	r3, r3, r1
1000f4f0:	781b      	ldrb	r3, [r3, #0]
1000f4f2:	1c21      	adds	r1, r4, #0
1000f4f4:	7043      	strb	r3, [r0, #1]
1000f4f6:	466b      	mov	r3, sp
1000f4f8:	8a9b      	ldrh	r3, [r3, #20]
1000f4fa:	3002      	adds	r0, #2
1000f4fc:	8143      	strh	r3, [r0, #10]
1000f4fe:	466b      	mov	r3, sp
1000f500:	8b1b      	ldrh	r3, [r3, #24]
1000f502:	8183      	strh	r3, [r0, #12]
1000f504:	466b      	mov	r3, sp
1000f506:	8b9b      	ldrh	r3, [r3, #28]
1000f508:	81c3      	strh	r3, [r0, #14]
1000f50a:	4b09      	ldr	r3, [pc, #36]	; (1000f530 <gapc_con_req_ind+0xcc>)
1000f50c:	4798      	blx	r3
1000f50e:	2112      	movs	r1, #18
1000f510:	2300      	movs	r3, #0
1000f512:	434f      	muls	r7, r1
1000f514:	9300      	str	r3, [sp, #0]
1000f516:	9301      	str	r3, [sp, #4]
1000f518:	19f6      	adds	r6, r6, r7
1000f51a:	8971      	ldrh	r1, [r6, #10]
1000f51c:	4a07      	ldr	r2, [pc, #28]	; (1000f53c <gapc_con_req_ind+0xd8>)
1000f51e:	9102      	str	r1, [sp, #8]
1000f520:	1c10      	adds	r0, r2, #0
1000f522:	1c19      	adds	r1, r3, #0
1000f524:	4c06      	ldr	r4, [pc, #24]	; (1000f540 <gapc_con_req_ind+0xdc>)
1000f526:	47a0      	blx	r4
1000f528:	b00b      	add	sp, #44	; 0x2c
1000f52a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f52c:	1001685e 	.word	0x1001685e
1000f530:	10011bb7 	.word	0x10011bb7
1000f534:	1000f2a9 	.word	0x1000f2a9
1000f538:	100167ce 	.word	0x100167ce
1000f53c:	10015880 	.word	0x10015880
1000f540:	1000f3a1 	.word	0x1000f3a1

1000f544 <gapc_disconnect_cmd_handler>:
1000f544:	2204      	movs	r2, #4
1000f546:	b510      	push	{r4, lr}
1000f548:	4b0c      	ldr	r3, [pc, #48]	; (1000f57c <gapc_disconnect_cmd_handler+0x38>)
1000f54a:	2400      	movs	r4, #0
1000f54c:	701a      	strb	r2, [r3, #0]
1000f54e:	320a      	adds	r2, #10
1000f550:	705a      	strb	r2, [r3, #1]
1000f552:	709a      	strb	r2, [r3, #2]
1000f554:	4a0a      	ldr	r2, [pc, #40]	; (1000f580 <gapc_disconnect_cmd_handler+0x3c>)
1000f556:	70d9      	strb	r1, [r3, #3]
1000f558:	8811      	ldrh	r1, [r2, #0]
1000f55a:	8812      	ldrh	r2, [r2, #0]
1000f55c:	7119      	strb	r1, [r3, #4]
1000f55e:	0a12      	lsrs	r2, r2, #8
1000f560:	715a      	strb	r2, [r3, #5]
1000f562:	2201      	movs	r2, #1
1000f564:	721a      	strb	r2, [r3, #8]
1000f566:	1892      	adds	r2, r2, r2
1000f568:	7258      	strb	r0, [r3, #9]
1000f56a:	719a      	strb	r2, [r3, #6]
1000f56c:	71dc      	strb	r4, [r3, #7]
1000f56e:	1c18      	adds	r0, r3, #0
1000f570:	210a      	movs	r1, #10
1000f572:	4b04      	ldr	r3, [pc, #16]	; (1000f584 <gapc_disconnect_cmd_handler+0x40>)
1000f574:	4798      	blx	r3
1000f576:	1c20      	adds	r0, r4, #0
1000f578:	bd10      	pop	{r4, pc}
1000f57a:	46c0      	nop			; (mov r8, r8)
1000f57c:	10016b3c 	.word	0x10016b3c
1000f580:	100167cc 	.word	0x100167cc
1000f584:	1000f09d 	.word	0x1000f09d

1000f588 <gapc_disconnect_ind>:
1000f588:	1c02      	adds	r2, r0, #0
1000f58a:	b508      	push	{r3, lr}
1000f58c:	7843      	ldrb	r3, [r0, #1]
1000f58e:	7800      	ldrb	r0, [r0, #0]
1000f590:	021b      	lsls	r3, r3, #8
1000f592:	4318      	orrs	r0, r3
1000f594:	8008      	strh	r0, [r1, #0]
1000f596:	7893      	ldrb	r3, [r2, #2]
1000f598:	708b      	strb	r3, [r1, #2]
1000f59a:	2100      	movs	r1, #0
1000f59c:	4b05      	ldr	r3, [pc, #20]	; (1000f5b4 <gapc_disconnect_ind+0x2c>)
1000f59e:	4798      	blx	r3
1000f5a0:	2807      	cmp	r0, #7
1000f5a2:	d806      	bhi.n	1000f5b2 <gapc_disconnect_ind+0x2a>
1000f5a4:	2312      	movs	r3, #18
1000f5a6:	4358      	muls	r0, r3
1000f5a8:	4b03      	ldr	r3, [pc, #12]	; (1000f5b8 <gapc_disconnect_ind+0x30>)
1000f5aa:	1818      	adds	r0, r3, r0
1000f5ac:	2301      	movs	r3, #1
1000f5ae:	425b      	negs	r3, r3
1000f5b0:	8143      	strh	r3, [r0, #10]
1000f5b2:	bd08      	pop	{r3, pc}
1000f5b4:	1000f26d 	.word	0x1000f26d
1000f5b8:	100167ce 	.word	0x100167ce

1000f5bc <gapc_bond_cmd_handler>:
1000f5bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f5be:	9300      	str	r3, [sp, #0]
1000f5c0:	2312      	movs	r3, #18
1000f5c2:	1c04      	adds	r4, r0, #0
1000f5c4:	a808      	add	r0, sp, #32
1000f5c6:	7807      	ldrb	r7, [r0, #0]
1000f5c8:	a809      	add	r0, sp, #36	; 0x24
1000f5ca:	7806      	ldrb	r6, [r0, #0]
1000f5cc:	a80a      	add	r0, sp, #40	; 0x28
1000f5ce:	7805      	ldrb	r5, [r0, #0]
1000f5d0:	a80b      	add	r0, sp, #44	; 0x2c
1000f5d2:	7800      	ldrb	r0, [r0, #0]
1000f5d4:	9001      	str	r0, [sp, #4]
1000f5d6:	4810      	ldr	r0, [pc, #64]	; (1000f618 <gapc_bond_cmd_handler+0x5c>)
1000f5d8:	7003      	strb	r3, [r0, #0]
1000f5da:	230e      	movs	r3, #14
1000f5dc:	70c4      	strb	r4, [r0, #3]
1000f5de:	4c0f      	ldr	r4, [pc, #60]	; (1000f61c <gapc_bond_cmd_handler+0x60>)
1000f5e0:	7043      	strb	r3, [r0, #1]
1000f5e2:	7083      	strb	r3, [r0, #2]
1000f5e4:	8823      	ldrh	r3, [r4, #0]
1000f5e6:	8824      	ldrh	r4, [r4, #0]
1000f5e8:	7103      	strb	r3, [r0, #4]
1000f5ea:	466b      	mov	r3, sp
1000f5ec:	781b      	ldrb	r3, [r3, #0]
1000f5ee:	0a24      	lsrs	r4, r4, #8
1000f5f0:	72c3      	strb	r3, [r0, #11]
1000f5f2:	466b      	mov	r3, sp
1000f5f4:	791b      	ldrb	r3, [r3, #4]
1000f5f6:	7144      	strb	r4, [r0, #5]
1000f5f8:	73c3      	strb	r3, [r0, #15]
1000f5fa:	2308      	movs	r3, #8
1000f5fc:	7183      	strb	r3, [r0, #6]
1000f5fe:	2300      	movs	r3, #0
1000f600:	240a      	movs	r4, #10
1000f602:	7241      	strb	r1, [r0, #9]
1000f604:	71c3      	strb	r3, [r0, #7]
1000f606:	2110      	movs	r1, #16
1000f608:	4b05      	ldr	r3, [pc, #20]	; (1000f620 <gapc_bond_cmd_handler+0x64>)
1000f60a:	7307      	strb	r7, [r0, #12]
1000f60c:	7346      	strb	r6, [r0, #13]
1000f60e:	7385      	strb	r5, [r0, #14]
1000f610:	7204      	strb	r4, [r0, #8]
1000f612:	7282      	strb	r2, [r0, #10]
1000f614:	4798      	blx	r3
1000f616:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f618:	10016b3c 	.word	0x10016b3c
1000f61c:	100167cc 	.word	0x100167cc
1000f620:	1000f09d 	.word	0x1000f09d

1000f624 <gapc_bond_ind>:
1000f624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f626:	780e      	ldrb	r6, [r1, #0]
1000f628:	1c03      	adds	r3, r0, #0
1000f62a:	1eb0      	subs	r0, r6, #2
1000f62c:	2805      	cmp	r0, #5
1000f62e:	d85d      	bhi.n	1000f6ec <gapc_bond_ind+0xc8>
1000f630:	1c15      	adds	r5, r2, #0
1000f632:	1c0c      	adds	r4, r1, #0
1000f634:	f001 f9fa 	bl	10010a2c <__gnu_thumb1_case_uqi>
1000f638:	2f5a030d 	.word	0x2f5a030d
1000f63c:	4740      	.short	0x4740
1000f63e:	2009      	movs	r0, #9
1000f640:	2a00      	cmp	r2, #0
1000f642:	d054      	beq.n	1000f6ee <gapc_bond_ind+0xca>
1000f644:	0a1b      	lsrs	r3, r3, #8
1000f646:	8053      	strh	r3, [r2, #2]
1000f648:	788b      	ldrb	r3, [r1, #2]
1000f64a:	4829      	ldr	r0, [pc, #164]	; (1000f6f0 <gapc_bond_ind+0xcc>)
1000f64c:	7113      	strb	r3, [r2, #4]
1000f64e:	2100      	movs	r1, #0
1000f650:	e01c      	b.n	1000f68c <gapc_bond_ind+0x68>
1000f652:	2009      	movs	r0, #9
1000f654:	2a00      	cmp	r2, #0
1000f656:	d04a      	beq.n	1000f6ee <gapc_bond_ind+0xca>
1000f658:	4c25      	ldr	r4, [pc, #148]	; (1000f6f0 <gapc_bond_ind+0xcc>)
1000f65a:	0a1b      	lsrs	r3, r3, #8
1000f65c:	8053      	strh	r3, [r2, #2]
1000f65e:	788b      	ldrb	r3, [r1, #2]
1000f660:	2700      	movs	r7, #0
1000f662:	1c10      	adds	r0, r2, #0
1000f664:	1c21      	adds	r1, r4, #0
1000f666:	7013      	strb	r3, [r2, #0]
1000f668:	4e22      	ldr	r6, [pc, #136]	; (1000f6f4 <gapc_bond_ind+0xd0>)
1000f66a:	7117      	strb	r7, [r2, #4]
1000f66c:	312e      	adds	r1, #46	; 0x2e
1000f66e:	2217      	movs	r2, #23
1000f670:	3032      	adds	r0, #50	; 0x32
1000f672:	47b0      	blx	r6
1000f674:	1c28      	adds	r0, r5, #0
1000f676:	1c21      	adds	r1, r4, #0
1000f678:	2210      	movs	r2, #16
1000f67a:	311e      	adds	r1, #30
1000f67c:	3022      	adds	r0, #34	; 0x22
1000f67e:	47b0      	blx	r6
1000f680:	1ca1      	adds	r1, r4, #2
1000f682:	1da8      	adds	r0, r5, #6
1000f684:	221c      	movs	r2, #28
1000f686:	47b0      	blx	r6
1000f688:	1c20      	adds	r0, r4, #0
1000f68a:	1c39      	adds	r1, r7, #0
1000f68c:	2246      	movs	r2, #70	; 0x46
1000f68e:	4b1a      	ldr	r3, [pc, #104]	; (1000f6f8 <gapc_bond_ind+0xd4>)
1000f690:	4798      	blx	r3
1000f692:	2009      	movs	r0, #9
1000f694:	e02b      	b.n	1000f6ee <gapc_bond_ind+0xca>
1000f696:	4d16      	ldr	r5, [pc, #88]	; (1000f6f0 <gapc_bond_ind+0xcc>)
1000f698:	3102      	adds	r1, #2
1000f69a:	1c28      	adds	r0, r5, #0
1000f69c:	2210      	movs	r2, #16
1000f69e:	4e15      	ldr	r6, [pc, #84]	; (1000f6f4 <gapc_bond_ind+0xd0>)
1000f6a0:	302e      	adds	r0, #46	; 0x2e
1000f6a2:	47b0      	blx	r6
1000f6a4:	1c28      	adds	r0, r5, #0
1000f6a6:	1c21      	adds	r1, r4, #0
1000f6a8:	303f      	adds	r0, #63	; 0x3f
1000f6aa:	3112      	adds	r1, #18
1000f6ac:	2206      	movs	r2, #6
1000f6ae:	47b0      	blx	r6
1000f6b0:	7e23      	ldrb	r3, [r4, #24]
1000f6b2:	353e      	adds	r5, #62	; 0x3e
1000f6b4:	702b      	strb	r3, [r5, #0]
1000f6b6:	e019      	b.n	1000f6ec <gapc_bond_ind+0xc8>
1000f6b8:	480d      	ldr	r0, [pc, #52]	; (1000f6f0 <gapc_bond_ind+0xcc>)
1000f6ba:	3102      	adds	r1, #2
1000f6bc:	2210      	movs	r2, #16
1000f6be:	4b0d      	ldr	r3, [pc, #52]	; (1000f6f4 <gapc_bond_ind+0xd0>)
1000f6c0:	301e      	adds	r0, #30
1000f6c2:	4798      	blx	r3
1000f6c4:	e012      	b.n	1000f6ec <gapc_bond_ind+0xc8>
1000f6c6:	4d0a      	ldr	r5, [pc, #40]	; (1000f6f0 <gapc_bond_ind+0xcc>)
1000f6c8:	3102      	adds	r1, #2
1000f6ca:	2210      	movs	r2, #16
1000f6cc:	4e09      	ldr	r6, [pc, #36]	; (1000f6f4 <gapc_bond_ind+0xd0>)
1000f6ce:	1ca8      	adds	r0, r5, #2
1000f6d0:	47b0      	blx	r6
1000f6d2:	1c28      	adds	r0, r5, #0
1000f6d4:	1c21      	adds	r1, r4, #0
1000f6d6:	7ce3      	ldrb	r3, [r4, #19]
1000f6d8:	7ca2      	ldrb	r2, [r4, #18]
1000f6da:	021b      	lsls	r3, r3, #8
1000f6dc:	4313      	orrs	r3, r2
1000f6de:	3014      	adds	r0, #20
1000f6e0:	3114      	adds	r1, #20
1000f6e2:	2208      	movs	r2, #8
1000f6e4:	826b      	strh	r3, [r5, #18]
1000f6e6:	47b0      	blx	r6
1000f6e8:	7f23      	ldrb	r3, [r4, #28]
1000f6ea:	772b      	strb	r3, [r5, #28]
1000f6ec:	2000      	movs	r0, #0
1000f6ee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f6f0:	100158b0 	.word	0x100158b0
1000f6f4:	10011bb7 	.word	0x10011bb7
1000f6f8:	10011bc9 	.word	0x10011bc9

1000f6fc <gapc_bond_req_ind>:
1000f6fc:	b570      	push	{r4, r5, r6, lr}
1000f6fe:	780c      	ldrb	r4, [r1, #0]
1000f700:	1c03      	adds	r3, r0, #0
1000f702:	7849      	ldrb	r1, [r1, #1]
1000f704:	2c07      	cmp	r4, #7
1000f706:	d85c      	bhi.n	1000f7c2 <gapc_bond_req_ind+0xc6>
1000f708:	1c20      	adds	r0, r4, #0
1000f70a:	f001 f98f 	bl	10010a2c <__gnu_thumb1_case_uqi>
1000f70e:	5a04      	.short	0x5a04
1000f710:	5a0b5a5a 	.word	0x5a0b5a5a
1000f714:	1f1f      	.short	0x1f1f
1000f716:	200a      	movs	r0, #10
1000f718:	2a00      	cmp	r2, #0
1000f71a:	d053      	beq.n	1000f7c4 <gapc_bond_req_ind+0xc8>
1000f71c:	0a1b      	lsrs	r3, r3, #8
1000f71e:	8013      	strh	r3, [r2, #0]
1000f720:	7091      	strb	r1, [r2, #2]
1000f722:	e04f      	b.n	1000f7c4 <gapc_bond_req_ind+0xc8>
1000f724:	2a00      	cmp	r2, #0
1000f726:	d00b      	beq.n	1000f740 <gapc_bond_req_ind+0x44>
1000f728:	0a1b      	lsrs	r3, r3, #8
1000f72a:	8013      	strh	r3, [r2, #0]
1000f72c:	2900      	cmp	r1, #0
1000f72e:	d102      	bne.n	1000f736 <gapc_bond_req_ind+0x3a>
1000f730:	2301      	movs	r3, #1
1000f732:	7093      	strb	r3, [r2, #2]
1000f734:	e004      	b.n	1000f740 <gapc_bond_req_ind+0x44>
1000f736:	2300      	movs	r3, #0
1000f738:	7093      	strb	r3, [r2, #2]
1000f73a:	2902      	cmp	r1, #2
1000f73c:	d102      	bne.n	1000f744 <gapc_bond_req_ind+0x48>
1000f73e:	70d3      	strb	r3, [r2, #3]
1000f740:	200c      	movs	r0, #12
1000f742:	e03f      	b.n	1000f7c4 <gapc_bond_req_ind+0xc8>
1000f744:	2901      	cmp	r1, #1
1000f746:	d1fb      	bne.n	1000f740 <gapc_bond_req_ind+0x44>
1000f748:	70d1      	strb	r1, [r2, #3]
1000f74a:	e7f9      	b.n	1000f740 <gapc_bond_req_ind+0x44>
1000f74c:	2214      	movs	r2, #20
1000f74e:	481e      	ldr	r0, [pc, #120]	; (1000f7c8 <gapc_bond_req_ind+0xcc>)
1000f750:	0a1b      	lsrs	r3, r3, #8
1000f752:	70c3      	strb	r3, [r0, #3]
1000f754:	4b1d      	ldr	r3, [pc, #116]	; (1000f7cc <gapc_bond_req_ind+0xd0>)
1000f756:	7002      	strb	r2, [r0, #0]
1000f758:	3a06      	subs	r2, #6
1000f75a:	7042      	strb	r2, [r0, #1]
1000f75c:	7082      	strb	r2, [r0, #2]
1000f75e:	881a      	ldrh	r2, [r3, #0]
1000f760:	881b      	ldrh	r3, [r3, #0]
1000f762:	4e1b      	ldr	r6, [pc, #108]	; (1000f7d0 <gapc_bond_req_ind+0xd4>)
1000f764:	0a1b      	lsrs	r3, r3, #8
1000f766:	7143      	strb	r3, [r0, #5]
1000f768:	2301      	movs	r3, #1
1000f76a:	7102      	strb	r2, [r0, #4]
1000f76c:	7204      	strb	r4, [r0, #8]
1000f76e:	7243      	strb	r3, [r0, #9]
1000f770:	1c05      	adds	r5, r0, #0
1000f772:	1c31      	adds	r1, r6, #0
1000f774:	300a      	adds	r0, #10
1000f776:	2c07      	cmp	r4, #7
1000f778:	d116      	bne.n	1000f7a8 <gapc_bond_req_ind+0xac>
1000f77a:	317e      	adds	r1, #126	; 0x7e
1000f77c:	2210      	movs	r2, #16
1000f77e:	4c15      	ldr	r4, [pc, #84]	; (1000f7d4 <gapc_bond_req_ind+0xd8>)
1000f780:	47a0      	blx	r4
1000f782:	1c33      	adds	r3, r6, #0
1000f784:	1c31      	adds	r1, r6, #0
1000f786:	1c28      	adds	r0, r5, #0
1000f788:	338e      	adds	r3, #142	; 0x8e
1000f78a:	881b      	ldrh	r3, [r3, #0]
1000f78c:	3190      	adds	r1, #144	; 0x90
1000f78e:	76ab      	strb	r3, [r5, #26]
1000f790:	2208      	movs	r2, #8
1000f792:	0a1b      	lsrs	r3, r3, #8
1000f794:	301c      	adds	r0, #28
1000f796:	76eb      	strb	r3, [r5, #27]
1000f798:	47a0      	blx	r4
1000f79a:	1c31      	adds	r1, r6, #0
1000f79c:	3198      	adds	r1, #152	; 0x98
1000f79e:	780a      	ldrb	r2, [r1, #0]
1000f7a0:	1d6b      	adds	r3, r5, #5
1000f7a2:	77da      	strb	r2, [r3, #31]
1000f7a4:	2125      	movs	r1, #37	; 0x25
1000f7a6:	e004      	b.n	1000f7b2 <gapc_bond_req_ind+0xb6>
1000f7a8:	319a      	adds	r1, #154	; 0x9a
1000f7aa:	2210      	movs	r2, #16
1000f7ac:	4b09      	ldr	r3, [pc, #36]	; (1000f7d4 <gapc_bond_req_ind+0xd8>)
1000f7ae:	4798      	blx	r3
1000f7b0:	211a      	movs	r1, #26
1000f7b2:	1c0b      	adds	r3, r1, #0
1000f7b4:	2400      	movs	r4, #0
1000f7b6:	3b08      	subs	r3, #8
1000f7b8:	71ab      	strb	r3, [r5, #6]
1000f7ba:	1c28      	adds	r0, r5, #0
1000f7bc:	4b06      	ldr	r3, [pc, #24]	; (1000f7d8 <gapc_bond_req_ind+0xdc>)
1000f7be:	71ec      	strb	r4, [r5, #7]
1000f7c0:	4798      	blx	r3
1000f7c2:	2000      	movs	r0, #0
1000f7c4:	bd70      	pop	{r4, r5, r6, pc}
1000f7c6:	46c0      	nop			; (mov r8, r8)
1000f7c8:	10016b3c 	.word	0x10016b3c
1000f7cc:	100167cc 	.word	0x100167cc
1000f7d0:	1001685e 	.word	0x1001685e
1000f7d4:	10011bb7 	.word	0x10011bb7
1000f7d8:	1000f09d 	.word	0x1000f09d

1000f7dc <gapc_bond_cfm_handler_pair_resp>:
1000f7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7de:	b085      	sub	sp, #20
1000f7e0:	1c07      	adds	r7, r0, #0
1000f7e2:	a80a      	add	r0, sp, #40	; 0x28
1000f7e4:	7806      	ldrb	r6, [r0, #0]
1000f7e6:	a80b      	add	r0, sp, #44	; 0x2c
1000f7e8:	7805      	ldrb	r5, [r0, #0]
1000f7ea:	a80c      	add	r0, sp, #48	; 0x30
1000f7ec:	7800      	ldrb	r0, [r0, #0]
1000f7ee:	2414      	movs	r4, #20
1000f7f0:	9002      	str	r0, [sp, #8]
1000f7f2:	a80d      	add	r0, sp, #52	; 0x34
1000f7f4:	7800      	ldrb	r0, [r0, #0]
1000f7f6:	9301      	str	r3, [sp, #4]
1000f7f8:	9003      	str	r0, [sp, #12]
1000f7fa:	a80e      	add	r0, sp, #56	; 0x38
1000f7fc:	8800      	ldrh	r0, [r0, #0]
1000f7fe:	4684      	mov	ip, r0
1000f800:	4812      	ldr	r0, [pc, #72]	; (1000f84c <gapc_bond_cfm_handler_pair_resp+0x70>)
1000f802:	7004      	strb	r4, [r0, #0]
1000f804:	3c06      	subs	r4, #6
1000f806:	7044      	strb	r4, [r0, #1]
1000f808:	7084      	strb	r4, [r0, #2]
1000f80a:	4664      	mov	r4, ip
1000f80c:	70c4      	strb	r4, [r0, #3]
1000f80e:	4c10      	ldr	r4, [pc, #64]	; (1000f850 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000f810:	7247      	strb	r7, [r0, #9]
1000f812:	8823      	ldrh	r3, [r4, #0]
1000f814:	8824      	ldrh	r4, [r4, #0]
1000f816:	7103      	strb	r3, [r0, #4]
1000f818:	466b      	mov	r3, sp
1000f81a:	791b      	ldrb	r3, [r3, #4]
1000f81c:	0a24      	lsrs	r4, r4, #8
1000f81e:	7303      	strb	r3, [r0, #12]
1000f820:	466b      	mov	r3, sp
1000f822:	7a1b      	ldrb	r3, [r3, #8]
1000f824:	7144      	strb	r4, [r0, #5]
1000f826:	73c3      	strb	r3, [r0, #15]
1000f828:	466b      	mov	r3, sp
1000f82a:	7b1b      	ldrb	r3, [r3, #12]
1000f82c:	2401      	movs	r4, #1
1000f82e:	7403      	strb	r3, [r0, #16]
1000f830:	2309      	movs	r3, #9
1000f832:	7183      	strb	r3, [r0, #6]
1000f834:	2300      	movs	r3, #0
1000f836:	7204      	strb	r4, [r0, #8]
1000f838:	7281      	strb	r1, [r0, #10]
1000f83a:	72c2      	strb	r2, [r0, #11]
1000f83c:	7346      	strb	r6, [r0, #13]
1000f83e:	7385      	strb	r5, [r0, #14]
1000f840:	71c3      	strb	r3, [r0, #7]
1000f842:	2111      	movs	r1, #17
1000f844:	4b03      	ldr	r3, [pc, #12]	; (1000f854 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000f846:	4798      	blx	r3
1000f848:	b005      	add	sp, #20
1000f84a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f84c:	10016b3c 	.word	0x10016b3c
1000f850:	100167cc 	.word	0x100167cc
1000f854:	1000f09d 	.word	0x1000f09d

1000f858 <gapc_bond_cfm_handler_key_exch>:
1000f858:	b538      	push	{r3, r4, r5, lr}
1000f85a:	2514      	movs	r5, #20
1000f85c:	4c0d      	ldr	r4, [pc, #52]	; (1000f894 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000f85e:	70e3      	strb	r3, [r4, #3]
1000f860:	4b0d      	ldr	r3, [pc, #52]	; (1000f898 <gapc_bond_cfm_handler_key_exch+0x40>)
1000f862:	7025      	strb	r5, [r4, #0]
1000f864:	3d06      	subs	r5, #6
1000f866:	7065      	strb	r5, [r4, #1]
1000f868:	70a5      	strb	r5, [r4, #2]
1000f86a:	881d      	ldrh	r5, [r3, #0]
1000f86c:	881b      	ldrh	r3, [r3, #0]
1000f86e:	7220      	strb	r0, [r4, #8]
1000f870:	0a1b      	lsrs	r3, r3, #8
1000f872:	7163      	strb	r3, [r4, #5]
1000f874:	7261      	strb	r1, [r4, #9]
1000f876:	4b09      	ldr	r3, [pc, #36]	; (1000f89c <gapc_bond_cfm_handler_key_exch+0x44>)
1000f878:	1c11      	adds	r1, r2, #0
1000f87a:	4809      	ldr	r0, [pc, #36]	; (1000f8a0 <gapc_bond_cfm_handler_key_exch+0x48>)
1000f87c:	2210      	movs	r2, #16
1000f87e:	7125      	strb	r5, [r4, #4]
1000f880:	4798      	blx	r3
1000f882:	2312      	movs	r3, #18
1000f884:	71a3      	strb	r3, [r4, #6]
1000f886:	2300      	movs	r3, #0
1000f888:	1c20      	adds	r0, r4, #0
1000f88a:	71e3      	strb	r3, [r4, #7]
1000f88c:	211a      	movs	r1, #26
1000f88e:	4b05      	ldr	r3, [pc, #20]	; (1000f8a4 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000f890:	4798      	blx	r3
1000f892:	bd38      	pop	{r3, r4, r5, pc}
1000f894:	10016b3c 	.word	0x10016b3c
1000f898:	100167cc 	.word	0x100167cc
1000f89c:	10011bb7 	.word	0x10011bb7
1000f8a0:	10016b46 	.word	0x10016b46
1000f8a4:	1000f09d 	.word	0x1000f09d

1000f8a8 <gapc_security_cmd_handler>:
1000f8a8:	221a      	movs	r2, #26
1000f8aa:	b508      	push	{r3, lr}
1000f8ac:	4b0b      	ldr	r3, [pc, #44]	; (1000f8dc <gapc_security_cmd_handler+0x34>)
1000f8ae:	701a      	strb	r2, [r3, #0]
1000f8b0:	3a0c      	subs	r2, #12
1000f8b2:	705a      	strb	r2, [r3, #1]
1000f8b4:	709a      	strb	r2, [r3, #2]
1000f8b6:	4a0a      	ldr	r2, [pc, #40]	; (1000f8e0 <gapc_security_cmd_handler+0x38>)
1000f8b8:	70d8      	strb	r0, [r3, #3]
1000f8ba:	8810      	ldrh	r0, [r2, #0]
1000f8bc:	8812      	ldrh	r2, [r2, #0]
1000f8be:	7118      	strb	r0, [r3, #4]
1000f8c0:	0a12      	lsrs	r2, r2, #8
1000f8c2:	715a      	strb	r2, [r3, #5]
1000f8c4:	220c      	movs	r2, #12
1000f8c6:	721a      	strb	r2, [r3, #8]
1000f8c8:	3a0a      	subs	r2, #10
1000f8ca:	719a      	strb	r2, [r3, #6]
1000f8cc:	2200      	movs	r2, #0
1000f8ce:	7259      	strb	r1, [r3, #9]
1000f8d0:	71da      	strb	r2, [r3, #7]
1000f8d2:	1c18      	adds	r0, r3, #0
1000f8d4:	210a      	movs	r1, #10
1000f8d6:	4b03      	ldr	r3, [pc, #12]	; (1000f8e4 <gapc_security_cmd_handler+0x3c>)
1000f8d8:	4798      	blx	r3
1000f8da:	bd08      	pop	{r3, pc}
1000f8dc:	10016b3c 	.word	0x10016b3c
1000f8e0:	100167cc 	.word	0x100167cc
1000f8e4:	1000f09d 	.word	0x1000f09d

1000f8e8 <gapc_encrypt_cmd_handler>:
1000f8e8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8ea:	2500      	movs	r5, #0
1000f8ec:	b089      	sub	sp, #36	; 0x24
1000f8ee:	9306      	str	r3, [sp, #24]
1000f8f0:	ab0e      	add	r3, sp, #56	; 0x38
1000f8f2:	781b      	ldrb	r3, [r3, #0]
1000f8f4:	1c17      	adds	r7, r2, #0
1000f8f6:	9307      	str	r3, [sp, #28]
1000f8f8:	ab0f      	add	r3, sp, #60	; 0x3c
1000f8fa:	781b      	ldrb	r3, [r3, #0]
1000f8fc:	4a19      	ldr	r2, [pc, #100]	; (1000f964 <gapc_encrypt_cmd_handler+0x7c>)
1000f8fe:	1c06      	adds	r6, r0, #0
1000f900:	9105      	str	r1, [sp, #20]
1000f902:	9300      	str	r3, [sp, #0]
1000f904:	9002      	str	r0, [sp, #8]
1000f906:	1c29      	adds	r1, r5, #0
1000f908:	1c2b      	adds	r3, r5, #0
1000f90a:	9501      	str	r5, [sp, #4]
1000f90c:	1c10      	adds	r0, r2, #0
1000f90e:	4c16      	ldr	r4, [pc, #88]	; (1000f968 <gapc_encrypt_cmd_handler+0x80>)
1000f910:	47a0      	blx	r4
1000f912:	2316      	movs	r3, #22
1000f914:	4c15      	ldr	r4, [pc, #84]	; (1000f96c <gapc_encrypt_cmd_handler+0x84>)
1000f916:	9905      	ldr	r1, [sp, #20]
1000f918:	7023      	strb	r3, [r4, #0]
1000f91a:	3b08      	subs	r3, #8
1000f91c:	7063      	strb	r3, [r4, #1]
1000f91e:	70a3      	strb	r3, [r4, #2]
1000f920:	4b13      	ldr	r3, [pc, #76]	; (1000f970 <gapc_encrypt_cmd_handler+0x88>)
1000f922:	70e6      	strb	r6, [r4, #3]
1000f924:	881a      	ldrh	r2, [r3, #0]
1000f926:	881b      	ldrh	r3, [r3, #0]
1000f928:	7122      	strb	r2, [r4, #4]
1000f92a:	0a1b      	lsrs	r3, r3, #8
1000f92c:	7163      	strb	r3, [r4, #5]
1000f92e:	230b      	movs	r3, #11
1000f930:	4e10      	ldr	r6, [pc, #64]	; (1000f974 <gapc_encrypt_cmd_handler+0x8c>)
1000f932:	2210      	movs	r2, #16
1000f934:	4810      	ldr	r0, [pc, #64]	; (1000f978 <gapc_encrypt_cmd_handler+0x90>)
1000f936:	7223      	strb	r3, [r4, #8]
1000f938:	7265      	strb	r5, [r4, #9]
1000f93a:	47b0      	blx	r6
1000f93c:	0a3b      	lsrs	r3, r7, #8
1000f93e:	9906      	ldr	r1, [sp, #24]
1000f940:	2208      	movs	r2, #8
1000f942:	480e      	ldr	r0, [pc, #56]	; (1000f97c <gapc_encrypt_cmd_handler+0x94>)
1000f944:	76e3      	strb	r3, [r4, #27]
1000f946:	76a7      	strb	r7, [r4, #26]
1000f948:	47b0      	blx	r6
1000f94a:	466a      	mov	r2, sp
1000f94c:	7f12      	ldrb	r2, [r2, #28]
1000f94e:	1d63      	adds	r3, r4, #5
1000f950:	77da      	strb	r2, [r3, #31]
1000f952:	231d      	movs	r3, #29
1000f954:	1c20      	adds	r0, r4, #0
1000f956:	71a3      	strb	r3, [r4, #6]
1000f958:	2125      	movs	r1, #37	; 0x25
1000f95a:	4b09      	ldr	r3, [pc, #36]	; (1000f980 <gapc_encrypt_cmd_handler+0x98>)
1000f95c:	71e5      	strb	r5, [r4, #7]
1000f95e:	4798      	blx	r3
1000f960:	b009      	add	sp, #36	; 0x24
1000f962:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f964:	10015890 	.word	0x10015890
1000f968:	1000f3a1 	.word	0x1000f3a1
1000f96c:	10016b3c 	.word	0x10016b3c
1000f970:	100167cc 	.word	0x100167cc
1000f974:	10011bb7 	.word	0x10011bb7
1000f978:	10016b46 	.word	0x10016b46
1000f97c:	10016b58 	.word	0x10016b58
1000f980:	1000f09d 	.word	0x1000f09d

1000f984 <gapc_encrypt_req_ind>:
1000f984:	b508      	push	{r3, lr}
1000f986:	0a00      	lsrs	r0, r0, #8
1000f988:	8010      	strh	r0, [r2, #0]
1000f98a:	784b      	ldrb	r3, [r1, #1]
1000f98c:	7808      	ldrb	r0, [r1, #0]
1000f98e:	021b      	lsls	r3, r3, #8
1000f990:	4303      	orrs	r3, r0
1000f992:	8053      	strh	r3, [r2, #2]
1000f994:	1d10      	adds	r0, r2, #4
1000f996:	3102      	adds	r1, #2
1000f998:	2208      	movs	r2, #8
1000f99a:	4b01      	ldr	r3, [pc, #4]	; (1000f9a0 <gapc_encrypt_req_ind+0x1c>)
1000f99c:	4798      	blx	r3
1000f99e:	bd08      	pop	{r3, pc}
1000f9a0:	10011bb7 	.word	0x10011bb7

1000f9a4 <gapc_encrypt_cfm_handler>:
1000f9a4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9a6:	2500      	movs	r5, #0
1000f9a8:	b087      	sub	sp, #28
1000f9aa:	9304      	str	r3, [sp, #16]
1000f9ac:	ab0c      	add	r3, sp, #48	; 0x30
1000f9ae:	781b      	ldrb	r3, [r3, #0]
1000f9b0:	1c17      	adds	r7, r2, #0
1000f9b2:	4a15      	ldr	r2, [pc, #84]	; (1000fa08 <gapc_encrypt_cfm_handler+0x64>)
1000f9b4:	1c06      	adds	r6, r0, #0
1000f9b6:	9305      	str	r3, [sp, #20]
1000f9b8:	9100      	str	r1, [sp, #0]
1000f9ba:	9002      	str	r0, [sp, #8]
1000f9bc:	1c29      	adds	r1, r5, #0
1000f9be:	1c2b      	adds	r3, r5, #0
1000f9c0:	9501      	str	r5, [sp, #4]
1000f9c2:	1c10      	adds	r0, r2, #0
1000f9c4:	4c11      	ldr	r4, [pc, #68]	; (1000fa0c <gapc_encrypt_cfm_handler+0x68>)
1000f9c6:	47a0      	blx	r4
1000f9c8:	2318      	movs	r3, #24
1000f9ca:	4c11      	ldr	r4, [pc, #68]	; (1000fa10 <gapc_encrypt_cfm_handler+0x6c>)
1000f9cc:	9904      	ldr	r1, [sp, #16]
1000f9ce:	7023      	strb	r3, [r4, #0]
1000f9d0:	3b0a      	subs	r3, #10
1000f9d2:	7063      	strb	r3, [r4, #1]
1000f9d4:	70a3      	strb	r3, [r4, #2]
1000f9d6:	4b0f      	ldr	r3, [pc, #60]	; (1000fa14 <gapc_encrypt_cfm_handler+0x70>)
1000f9d8:	480f      	ldr	r0, [pc, #60]	; (1000fa18 <gapc_encrypt_cfm_handler+0x74>)
1000f9da:	881a      	ldrh	r2, [r3, #0]
1000f9dc:	881b      	ldrh	r3, [r3, #0]
1000f9de:	7122      	strb	r2, [r4, #4]
1000f9e0:	0a1b      	lsrs	r3, r3, #8
1000f9e2:	7163      	strb	r3, [r4, #5]
1000f9e4:	2210      	movs	r2, #16
1000f9e6:	4b0d      	ldr	r3, [pc, #52]	; (1000fa1c <gapc_encrypt_cfm_handler+0x78>)
1000f9e8:	70e6      	strb	r6, [r4, #3]
1000f9ea:	7227      	strb	r7, [r4, #8]
1000f9ec:	4798      	blx	r3
1000f9ee:	466b      	mov	r3, sp
1000f9f0:	7d1b      	ldrb	r3, [r3, #20]
1000f9f2:	1c20      	adds	r0, r4, #0
1000f9f4:	7663      	strb	r3, [r4, #25]
1000f9f6:	2312      	movs	r3, #18
1000f9f8:	211a      	movs	r1, #26
1000f9fa:	71a3      	strb	r3, [r4, #6]
1000f9fc:	4b08      	ldr	r3, [pc, #32]	; (1000fa20 <gapc_encrypt_cfm_handler+0x7c>)
1000f9fe:	71e5      	strb	r5, [r4, #7]
1000fa00:	4798      	blx	r3
1000fa02:	b007      	add	sp, #28
1000fa04:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa06:	46c0      	nop			; (mov r8, r8)
1000fa08:	100158a0 	.word	0x100158a0
1000fa0c:	1000f3a1 	.word	0x1000f3a1
1000fa10:	10016b3c 	.word	0x10016b3c
1000fa14:	100167cc 	.word	0x100167cc
1000fa18:	10016b45 	.word	0x10016b45
1000fa1c:	10011bb7 	.word	0x10011bb7
1000fa20:	1000f09d 	.word	0x1000f09d

1000fa24 <gapc_encrypt_ind>:
1000fa24:	780b      	ldrb	r3, [r1, #0]
1000fa26:	0a00      	lsrs	r0, r0, #8
1000fa28:	70d3      	strb	r3, [r2, #3]
1000fa2a:	2300      	movs	r3, #0
1000fa2c:	8010      	strh	r0, [r2, #0]
1000fa2e:	7093      	strb	r3, [r2, #2]
1000fa30:	4770      	bx	lr
	...

1000fa34 <gapc_param_update_cfm_handler>:
1000fa34:	b538      	push	{r3, r4, r5, lr}
1000fa36:	2410      	movs	r4, #16
1000fa38:	1c05      	adds	r5, r0, #0
1000fa3a:	480e      	ldr	r0, [pc, #56]	; (1000fa74 <gapc_param_update_cfm_handler+0x40>)
1000fa3c:	7004      	strb	r4, [r0, #0]
1000fa3e:	3c02      	subs	r4, #2
1000fa40:	7044      	strb	r4, [r0, #1]
1000fa42:	7084      	strb	r4, [r0, #2]
1000fa44:	4c0c      	ldr	r4, [pc, #48]	; (1000fa78 <gapc_param_update_cfm_handler+0x44>)
1000fa46:	70c5      	strb	r5, [r0, #3]
1000fa48:	8825      	ldrh	r5, [r4, #0]
1000fa4a:	8824      	ldrh	r4, [r4, #0]
1000fa4c:	72c3      	strb	r3, [r0, #11]
1000fa4e:	0a1b      	lsrs	r3, r3, #8
1000fa50:	0a24      	lsrs	r4, r4, #8
1000fa52:	7303      	strb	r3, [r0, #12]
1000fa54:	2305      	movs	r3, #5
1000fa56:	7144      	strb	r4, [r0, #5]
1000fa58:	2400      	movs	r4, #0
1000fa5a:	7201      	strb	r1, [r0, #8]
1000fa5c:	7242      	strb	r2, [r0, #9]
1000fa5e:	7183      	strb	r3, [r0, #6]
1000fa60:	0a12      	lsrs	r2, r2, #8
1000fa62:	210d      	movs	r1, #13
1000fa64:	4b05      	ldr	r3, [pc, #20]	; (1000fa7c <gapc_param_update_cfm_handler+0x48>)
1000fa66:	7105      	strb	r5, [r0, #4]
1000fa68:	7282      	strb	r2, [r0, #10]
1000fa6a:	71c4      	strb	r4, [r0, #7]
1000fa6c:	4798      	blx	r3
1000fa6e:	1c20      	adds	r0, r4, #0
1000fa70:	bd38      	pop	{r3, r4, r5, pc}
1000fa72:	46c0      	nop			; (mov r8, r8)
1000fa74:	10016b3c 	.word	0x10016b3c
1000fa78:	100167cc 	.word	0x100167cc
1000fa7c:	1000f09d 	.word	0x1000f09d

1000fa80 <gapc_param_updated_ind>:
1000fa80:	2300      	movs	r3, #0
1000fa82:	0a00      	lsrs	r0, r0, #8
1000fa84:	8010      	strh	r0, [r2, #0]
1000fa86:	7093      	strb	r3, [r2, #2]
1000fa88:	784b      	ldrb	r3, [r1, #1]
1000fa8a:	7808      	ldrb	r0, [r1, #0]
1000fa8c:	021b      	lsls	r3, r3, #8
1000fa8e:	4303      	orrs	r3, r0
1000fa90:	8093      	strh	r3, [r2, #4]
1000fa92:	78cb      	ldrb	r3, [r1, #3]
1000fa94:	7888      	ldrb	r0, [r1, #2]
1000fa96:	021b      	lsls	r3, r3, #8
1000fa98:	4303      	orrs	r3, r0
1000fa9a:	80d3      	strh	r3, [r2, #6]
1000fa9c:	794b      	ldrb	r3, [r1, #5]
1000fa9e:	7909      	ldrb	r1, [r1, #4]
1000faa0:	021b      	lsls	r3, r3, #8
1000faa2:	430b      	orrs	r3, r1
1000faa4:	2007      	movs	r0, #7
1000faa6:	8113      	strh	r3, [r2, #8]
1000faa8:	4770      	bx	lr

1000faaa <gapc_param_updated_req_ind>:
1000faaa:	0a00      	lsrs	r0, r0, #8
1000faac:	8010      	strh	r0, [r2, #0]
1000faae:	784b      	ldrb	r3, [r1, #1]
1000fab0:	7808      	ldrb	r0, [r1, #0]
1000fab2:	021b      	lsls	r3, r3, #8
1000fab4:	4303      	orrs	r3, r0
1000fab6:	8053      	strh	r3, [r2, #2]
1000fab8:	78cb      	ldrb	r3, [r1, #3]
1000faba:	7888      	ldrb	r0, [r1, #2]
1000fabc:	021b      	lsls	r3, r3, #8
1000fabe:	4303      	orrs	r3, r0
1000fac0:	8093      	strh	r3, [r2, #4]
1000fac2:	794b      	ldrb	r3, [r1, #5]
1000fac4:	7908      	ldrb	r0, [r1, #4]
1000fac6:	021b      	lsls	r3, r3, #8
1000fac8:	4303      	orrs	r3, r0
1000faca:	80d3      	strh	r3, [r2, #6]
1000facc:	79cb      	ldrb	r3, [r1, #7]
1000face:	7989      	ldrb	r1, [r1, #6]
1000fad0:	021b      	lsls	r3, r3, #8
1000fad2:	430b      	orrs	r3, r1
1000fad4:	2008      	movs	r0, #8
1000fad6:	8113      	strh	r3, [r2, #8]
1000fad8:	4770      	bx	lr
	...

1000fadc <gapc_dev_info_req_ind_handler>:
1000fadc:	b508      	push	{r3, lr}
1000fade:	1c0b      	adds	r3, r1, #0
1000fae0:	0a01      	lsrs	r1, r0, #8
1000fae2:	8011      	strh	r1, [r2, #0]
1000fae4:	7818      	ldrb	r0, [r3, #0]
1000fae6:	7090      	strb	r0, [r2, #2]
1000fae8:	2800      	cmp	r0, #0
1000faea:	d104      	bne.n	1000faf6 <gapc_dev_info_req_ind_handler+0x1a>
1000faec:	4b03      	ldr	r3, [pc, #12]	; (1000fafc <gapc_dev_info_req_ind_handler+0x20>)
1000faee:	33aa      	adds	r3, #170	; 0xaa
1000faf0:	881b      	ldrh	r3, [r3, #0]
1000faf2:	2b00      	cmp	r3, #0
1000faf4:	d001      	beq.n	1000fafa <gapc_dev_info_req_ind_handler+0x1e>
1000faf6:	4b02      	ldr	r3, [pc, #8]	; (1000fb00 <gapc_dev_info_req_ind_handler+0x24>)
1000faf8:	4798      	blx	r3
1000fafa:	bd08      	pop	{r3, pc}
1000fafc:	1001685e 	.word	0x1001685e
1000fb00:	1000f1ad 	.word	0x1000f1ad

1000fb04 <gapc_sec_req_ind>:
1000fb04:	0a00      	lsrs	r0, r0, #8
1000fb06:	8010      	strh	r0, [r2, #0]
1000fb08:	7809      	ldrb	r1, [r1, #0]
1000fb0a:	2301      	movs	r3, #1
1000fb0c:	1c08      	adds	r0, r1, #0
1000fb0e:	0889      	lsrs	r1, r1, #2
1000fb10:	4018      	ands	r0, r3
1000fb12:	400b      	ands	r3, r1
1000fb14:	70d0      	strb	r0, [r2, #3]
1000fb16:	7113      	strb	r3, [r2, #4]
1000fb18:	4770      	bx	lr

1000fb1a <gapc_sign_counter_ind_handler>:
1000fb1a:	0a00      	lsrs	r0, r0, #8
1000fb1c:	8010      	strh	r0, [r2, #0]
1000fb1e:	784b      	ldrb	r3, [r1, #1]
1000fb20:	0218      	lsls	r0, r3, #8
1000fb22:	788b      	ldrb	r3, [r1, #2]
1000fb24:	041b      	lsls	r3, r3, #16
1000fb26:	4303      	orrs	r3, r0
1000fb28:	7808      	ldrb	r0, [r1, #0]
1000fb2a:	4303      	orrs	r3, r0
1000fb2c:	78c8      	ldrb	r0, [r1, #3]
1000fb2e:	0600      	lsls	r0, r0, #24
1000fb30:	4303      	orrs	r3, r0
1000fb32:	6053      	str	r3, [r2, #4]
1000fb34:	794b      	ldrb	r3, [r1, #5]
1000fb36:	0218      	lsls	r0, r3, #8
1000fb38:	798b      	ldrb	r3, [r1, #6]
1000fb3a:	041b      	lsls	r3, r3, #16
1000fb3c:	4303      	orrs	r3, r0
1000fb3e:	7908      	ldrb	r0, [r1, #4]
1000fb40:	79c9      	ldrb	r1, [r1, #7]
1000fb42:	4303      	orrs	r3, r0
1000fb44:	0609      	lsls	r1, r1, #24
1000fb46:	430b      	orrs	r3, r1
1000fb48:	2000      	movs	r0, #0
1000fb4a:	6093      	str	r3, [r2, #8]
1000fb4c:	4770      	bx	lr
	...

1000fb50 <gapc_peer_att_info_ind_handler>:
1000fb50:	b510      	push	{r4, lr}
1000fb52:	0a00      	lsrs	r0, r0, #8
1000fb54:	8010      	strh	r0, [r2, #0]
1000fb56:	7808      	ldrb	r0, [r1, #0]
1000fb58:	7090      	strb	r0, [r2, #2]
1000fb5a:	788b      	ldrb	r3, [r1, #2]
1000fb5c:	784c      	ldrb	r4, [r1, #1]
1000fb5e:	021b      	lsls	r3, r3, #8
1000fb60:	4323      	orrs	r3, r4
1000fb62:	8093      	strh	r3, [r2, #4]
1000fb64:	2801      	cmp	r0, #1
1000fb66:	d027      	beq.n	1000fbb8 <gapc_peer_att_info_ind_handler+0x68>
1000fb68:	2800      	cmp	r0, #0
1000fb6a:	d017      	beq.n	1000fb9c <gapc_peer_att_info_ind_handler+0x4c>
1000fb6c:	2802      	cmp	r0, #2
1000fb6e:	d12a      	bne.n	1000fbc6 <gapc_peer_att_info_ind_handler+0x76>
1000fb70:	790b      	ldrb	r3, [r1, #4]
1000fb72:	78c8      	ldrb	r0, [r1, #3]
1000fb74:	021b      	lsls	r3, r3, #8
1000fb76:	4303      	orrs	r3, r0
1000fb78:	8113      	strh	r3, [r2, #8]
1000fb7a:	798b      	ldrb	r3, [r1, #6]
1000fb7c:	7948      	ldrb	r0, [r1, #5]
1000fb7e:	021b      	lsls	r3, r3, #8
1000fb80:	4303      	orrs	r3, r0
1000fb82:	80d3      	strh	r3, [r2, #6]
1000fb84:	7a0b      	ldrb	r3, [r1, #8]
1000fb86:	79c8      	ldrb	r0, [r1, #7]
1000fb88:	021b      	lsls	r3, r3, #8
1000fb8a:	4303      	orrs	r3, r0
1000fb8c:	8193      	strh	r3, [r2, #12]
1000fb8e:	7a8b      	ldrb	r3, [r1, #10]
1000fb90:	7a49      	ldrb	r1, [r1, #9]
1000fb92:	021b      	lsls	r3, r3, #8
1000fb94:	430b      	orrs	r3, r1
1000fb96:	8153      	strh	r3, [r2, #10]
1000fb98:	2306      	movs	r3, #6
1000fb9a:	e013      	b.n	1000fbc4 <gapc_peer_att_info_ind_handler+0x74>
1000fb9c:	1c14      	adds	r4, r2, #0
1000fb9e:	1c20      	adds	r0, r4, #0
1000fba0:	790a      	ldrb	r2, [r1, #4]
1000fba2:	78cb      	ldrb	r3, [r1, #3]
1000fba4:	0212      	lsls	r2, r2, #8
1000fba6:	431a      	orrs	r2, r3
1000fba8:	80e2      	strh	r2, [r4, #6]
1000fbaa:	4b07      	ldr	r3, [pc, #28]	; (1000fbc8 <gapc_peer_att_info_ind_handler+0x78>)
1000fbac:	3008      	adds	r0, #8
1000fbae:	3105      	adds	r1, #5
1000fbb0:	4798      	blx	r3
1000fbb2:	2302      	movs	r3, #2
1000fbb4:	70a3      	strb	r3, [r4, #2]
1000fbb6:	e006      	b.n	1000fbc6 <gapc_peer_att_info_ind_handler+0x76>
1000fbb8:	790b      	ldrb	r3, [r1, #4]
1000fbba:	78c9      	ldrb	r1, [r1, #3]
1000fbbc:	021b      	lsls	r3, r3, #8
1000fbbe:	430b      	orrs	r3, r1
1000fbc0:	80d3      	strh	r3, [r2, #6]
1000fbc2:	2305      	movs	r3, #5
1000fbc4:	7093      	strb	r3, [r2, #2]
1000fbc6:	bd10      	pop	{r4, pc}
1000fbc8:	10011bb7 	.word	0x10011bb7

1000fbcc <gapc_con_channel_map_ind_handler>:
1000fbcc:	b508      	push	{r3, lr}
1000fbce:	2300      	movs	r3, #0
1000fbd0:	0a00      	lsrs	r0, r0, #8
1000fbd2:	7013      	strb	r3, [r2, #0]
1000fbd4:	8050      	strh	r0, [r2, #2]
1000fbd6:	4b02      	ldr	r3, [pc, #8]	; (1000fbe0 <gapc_con_channel_map_ind_handler+0x14>)
1000fbd8:	1d10      	adds	r0, r2, #4
1000fbda:	2205      	movs	r2, #5
1000fbdc:	4798      	blx	r3
1000fbde:	bd08      	pop	{r3, pc}
1000fbe0:	10011bb7 	.word	0x10011bb7

1000fbe4 <gapc_lecb_connected>:
1000fbe4:	7843      	ldrb	r3, [r0, #1]
1000fbe6:	7802      	ldrb	r2, [r0, #0]
1000fbe8:	021b      	lsls	r3, r3, #8
1000fbea:	4313      	orrs	r3, r2
1000fbec:	800b      	strh	r3, [r1, #0]
1000fbee:	78c3      	ldrb	r3, [r0, #3]
1000fbf0:	7882      	ldrb	r2, [r0, #2]
1000fbf2:	021b      	lsls	r3, r3, #8
1000fbf4:	4313      	orrs	r3, r2
1000fbf6:	804b      	strh	r3, [r1, #2]
1000fbf8:	7943      	ldrb	r3, [r0, #5]
1000fbfa:	7902      	ldrb	r2, [r0, #4]
1000fbfc:	021b      	lsls	r3, r3, #8
1000fbfe:	4313      	orrs	r3, r2
1000fc00:	808b      	strh	r3, [r1, #4]
1000fc02:	79c3      	ldrb	r3, [r0, #7]
1000fc04:	7982      	ldrb	r2, [r0, #6]
1000fc06:	021b      	lsls	r3, r3, #8
1000fc08:	4313      	orrs	r3, r2
1000fc0a:	80cb      	strh	r3, [r1, #6]
1000fc0c:	2300      	movs	r3, #0
1000fc0e:	720b      	strb	r3, [r1, #8]
1000fc10:	4770      	bx	lr

1000fc12 <gapc_lecb_disconnected>:
1000fc12:	7843      	ldrb	r3, [r0, #1]
1000fc14:	7802      	ldrb	r2, [r0, #0]
1000fc16:	021b      	lsls	r3, r3, #8
1000fc18:	4313      	orrs	r3, r2
1000fc1a:	800b      	strh	r3, [r1, #0]
1000fc1c:	78c3      	ldrb	r3, [r0, #3]
1000fc1e:	7882      	ldrb	r2, [r0, #2]
1000fc20:	021b      	lsls	r3, r3, #8
1000fc22:	4313      	orrs	r3, r2
1000fc24:	804b      	strh	r3, [r1, #2]
1000fc26:	4770      	bx	lr

1000fc28 <gapc_lecb_connect_req_ind>:
1000fc28:	7843      	ldrb	r3, [r0, #1]
1000fc2a:	7802      	ldrb	r2, [r0, #0]
1000fc2c:	021b      	lsls	r3, r3, #8
1000fc2e:	4313      	orrs	r3, r2
1000fc30:	800b      	strh	r3, [r1, #0]
1000fc32:	78c3      	ldrb	r3, [r0, #3]
1000fc34:	7882      	ldrb	r2, [r0, #2]
1000fc36:	021b      	lsls	r3, r3, #8
1000fc38:	4313      	orrs	r3, r2
1000fc3a:	804b      	strh	r3, [r1, #2]
1000fc3c:	7943      	ldrb	r3, [r0, #5]
1000fc3e:	7902      	ldrb	r2, [r0, #4]
1000fc40:	021b      	lsls	r3, r3, #8
1000fc42:	4313      	orrs	r3, r2
1000fc44:	808b      	strh	r3, [r1, #4]
1000fc46:	79c3      	ldrb	r3, [r0, #7]
1000fc48:	7982      	ldrb	r2, [r0, #6]
1000fc4a:	021b      	lsls	r3, r3, #8
1000fc4c:	4313      	orrs	r3, r2
1000fc4e:	80cb      	strh	r3, [r1, #6]
1000fc50:	4770      	bx	lr

1000fc52 <gapc_lecb_add_credit_resp_handler>:
1000fc52:	7843      	ldrb	r3, [r0, #1]
1000fc54:	7802      	ldrb	r2, [r0, #0]
1000fc56:	021b      	lsls	r3, r3, #8
1000fc58:	4313      	orrs	r3, r2
1000fc5a:	800b      	strh	r3, [r1, #0]
1000fc5c:	78c3      	ldrb	r3, [r0, #3]
1000fc5e:	7882      	ldrb	r2, [r0, #2]
1000fc60:	021b      	lsls	r3, r3, #8
1000fc62:	4313      	orrs	r3, r2
1000fc64:	804b      	strh	r3, [r1, #2]
1000fc66:	7943      	ldrb	r3, [r0, #5]
1000fc68:	7902      	ldrb	r2, [r0, #4]
1000fc6a:	021b      	lsls	r3, r3, #8
1000fc6c:	4313      	orrs	r3, r2
1000fc6e:	808b      	strh	r3, [r1, #4]
1000fc70:	4770      	bx	lr
	...

1000fc74 <gapm_reset_req_handler>:
1000fc74:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fc76:	466b      	mov	r3, sp
1000fc78:	4915      	ldr	r1, [pc, #84]	; (1000fcd0 <gapm_reset_req_handler+0x5c>)
1000fc7a:	4816      	ldr	r0, [pc, #88]	; (1000fcd4 <gapm_reset_req_handler+0x60>)
1000fc7c:	880c      	ldrh	r4, [r1, #0]
1000fc7e:	8809      	ldrh	r1, [r1, #0]
1000fc80:	1ddd      	adds	r5, r3, #7
1000fc82:	0a09      	lsrs	r1, r1, #8
1000fc84:	2300      	movs	r3, #0
1000fc86:	2202      	movs	r2, #2
1000fc88:	7141      	strb	r1, [r0, #5]
1000fc8a:	26d0      	movs	r6, #208	; 0xd0
1000fc8c:	2101      	movs	r1, #1
1000fc8e:	7104      	strb	r4, [r0, #4]
1000fc90:	4c11      	ldr	r4, [pc, #68]	; (1000fcd8 <gapm_reset_req_handler+0x64>)
1000fc92:	702b      	strb	r3, [r5, #0]
1000fc94:	7002      	strb	r2, [r0, #0]
1000fc96:	70c3      	strb	r3, [r0, #3]
1000fc98:	320b      	adds	r2, #11
1000fc9a:	7201      	strb	r1, [r0, #8]
1000fc9c:	7181      	strb	r1, [r0, #6]
1000fc9e:	71c3      	strb	r3, [r0, #7]
1000fca0:	3108      	adds	r1, #8
1000fca2:	4b0e      	ldr	r3, [pc, #56]	; (1000fcdc <gapm_reset_req_handler+0x68>)
1000fca4:	0136      	lsls	r6, r6, #4
1000fca6:	7042      	strb	r2, [r0, #1]
1000fca8:	7082      	strb	r2, [r0, #2]
1000fcaa:	80a2      	strh	r2, [r4, #4]
1000fcac:	8026      	strh	r6, [r4, #0]
1000fcae:	4798      	blx	r3
1000fcb0:	1c28      	adds	r0, r5, #0
1000fcb2:	4b0b      	ldr	r3, [pc, #44]	; (1000fce0 <gapm_reset_req_handler+0x6c>)
1000fcb4:	4798      	blx	r3
1000fcb6:	782b      	ldrb	r3, [r5, #0]
1000fcb8:	20e2      	movs	r0, #226	; 0xe2
1000fcba:	2b00      	cmp	r3, #0
1000fcbc:	d106      	bne.n	1000fccc <gapm_reset_req_handler+0x58>
1000fcbe:	68a3      	ldr	r3, [r4, #8]
1000fcc0:	20e2      	movs	r0, #226	; 0xe2
1000fcc2:	781a      	ldrb	r2, [r3, #0]
1000fcc4:	785b      	ldrb	r3, [r3, #1]
1000fcc6:	2a01      	cmp	r2, #1
1000fcc8:	d100      	bne.n	1000fccc <gapm_reset_req_handler+0x58>
1000fcca:	1c18      	adds	r0, r3, #0
1000fccc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fcce:	46c0      	nop			; (mov r8, r8)
1000fcd0:	100167cc 	.word	0x100167cc
1000fcd4:	10016b3c 	.word	0x10016b3c
1000fcd8:	100167c0 	.word	0x100167c0
1000fcdc:	1000f09d 	.word	0x1000f09d
1000fce0:	1000f101 	.word	0x1000f101

1000fce4 <gapm_set_dev_config_cmd_handler>:
1000fce4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fce6:	b089      	sub	sp, #36	; 0x24
1000fce8:	9303      	str	r3, [sp, #12]
1000fcea:	ab0e      	add	r3, sp, #56	; 0x38
1000fcec:	781b      	ldrb	r3, [r3, #0]
1000fcee:	4c37      	ldr	r4, [pc, #220]	; (1000fdcc <gapm_set_dev_config_cmd_handler+0xe8>)
1000fcf0:	9304      	str	r3, [sp, #16]
1000fcf2:	ab0f      	add	r3, sp, #60	; 0x3c
1000fcf4:	781b      	ldrb	r3, [r3, #0]
1000fcf6:	270d      	movs	r7, #13
1000fcf8:	9305      	str	r3, [sp, #20]
1000fcfa:	ab10      	add	r3, sp, #64	; 0x40
1000fcfc:	881b      	ldrh	r3, [r3, #0]
1000fcfe:	72a1      	strb	r1, [r4, #10]
1000fd00:	9300      	str	r3, [sp, #0]
1000fd02:	ab11      	add	r3, sp, #68	; 0x44
1000fd04:	881b      	ldrh	r3, [r3, #0]
1000fd06:	0a09      	lsrs	r1, r1, #8
1000fd08:	9301      	str	r3, [sp, #4]
1000fd0a:	ab12      	add	r3, sp, #72	; 0x48
1000fd0c:	881b      	ldrh	r3, [r3, #0]
1000fd0e:	7260      	strb	r0, [r4, #9]
1000fd10:	9302      	str	r3, [sp, #8]
1000fd12:	ab06      	add	r3, sp, #24
1000fd14:	1dde      	adds	r6, r3, #7
1000fd16:	2300      	movs	r3, #0
1000fd18:	7033      	strb	r3, [r6, #0]
1000fd1a:	2304      	movs	r3, #4
1000fd1c:	7023      	strb	r3, [r4, #0]
1000fd1e:	2300      	movs	r3, #0
1000fd20:	70e3      	strb	r3, [r4, #3]
1000fd22:	4b2b      	ldr	r3, [pc, #172]	; (1000fdd0 <gapm_set_dev_config_cmd_handler+0xec>)
1000fd24:	72e1      	strb	r1, [r4, #11]
1000fd26:	881d      	ldrh	r5, [r3, #0]
1000fd28:	881b      	ldrh	r3, [r3, #0]
1000fd2a:	1c11      	adds	r1, r2, #0
1000fd2c:	0a1b      	lsrs	r3, r3, #8
1000fd2e:	7163      	strb	r3, [r4, #5]
1000fd30:	2303      	movs	r3, #3
1000fd32:	7125      	strb	r5, [r4, #4]
1000fd34:	2206      	movs	r2, #6
1000fd36:	4d27      	ldr	r5, [pc, #156]	; (1000fdd4 <gapm_set_dev_config_cmd_handler+0xf0>)
1000fd38:	4827      	ldr	r0, [pc, #156]	; (1000fdd8 <gapm_set_dev_config_cmd_handler+0xf4>)
1000fd3a:	7223      	strb	r3, [r4, #8]
1000fd3c:	7067      	strb	r7, [r4, #1]
1000fd3e:	70a7      	strb	r7, [r4, #2]
1000fd40:	47a8      	blx	r5
1000fd42:	9903      	ldr	r1, [sp, #12]
1000fd44:	2210      	movs	r2, #16
1000fd46:	4825      	ldr	r0, [pc, #148]	; (1000fddc <gapm_set_dev_config_cmd_handler+0xf8>)
1000fd48:	47a8      	blx	r5
1000fd4a:	466a      	mov	r2, sp
1000fd4c:	7c12      	ldrb	r2, [r2, #16]
1000fd4e:	1ce3      	adds	r3, r4, #3
1000fd50:	77da      	strb	r2, [r3, #31]
1000fd52:	466a      	mov	r2, sp
1000fd54:	7d12      	ldrb	r2, [r2, #20]
1000fd56:	1d23      	adds	r3, r4, #4
1000fd58:	77da      	strb	r2, [r3, #31]
1000fd5a:	466a      	mov	r2, sp
1000fd5c:	7812      	ldrb	r2, [r2, #0]
1000fd5e:	1d63      	adds	r3, r4, #5
1000fd60:	77da      	strb	r2, [r3, #31]
1000fd62:	9b00      	ldr	r3, [sp, #0]
1000fd64:	1da2      	adds	r2, r4, #6
1000fd66:	0a1b      	lsrs	r3, r3, #8
1000fd68:	77d3      	strb	r3, [r2, #31]
1000fd6a:	466a      	mov	r2, sp
1000fd6c:	7912      	ldrb	r2, [r2, #4]
1000fd6e:	1de3      	adds	r3, r4, #7
1000fd70:	77da      	strb	r2, [r3, #31]
1000fd72:	1c22      	adds	r2, r4, #0
1000fd74:	9b01      	ldr	r3, [sp, #4]
1000fd76:	3208      	adds	r2, #8
1000fd78:	0a1b      	lsrs	r3, r3, #8
1000fd7a:	77d3      	strb	r3, [r2, #31]
1000fd7c:	466a      	mov	r2, sp
1000fd7e:	1c23      	adds	r3, r4, #0
1000fd80:	7a12      	ldrb	r2, [r2, #8]
1000fd82:	3328      	adds	r3, #40	; 0x28
1000fd84:	701a      	strb	r2, [r3, #0]
1000fd86:	1c22      	adds	r2, r4, #0
1000fd88:	9b02      	ldr	r3, [sp, #8]
1000fd8a:	3229      	adds	r2, #41	; 0x29
1000fd8c:	0a1b      	lsrs	r3, r3, #8
1000fd8e:	7013      	strb	r3, [r2, #0]
1000fd90:	23d0      	movs	r3, #208	; 0xd0
1000fd92:	4d13      	ldr	r5, [pc, #76]	; (1000fde0 <gapm_set_dev_config_cmd_handler+0xfc>)
1000fd94:	011b      	lsls	r3, r3, #4
1000fd96:	802b      	strh	r3, [r5, #0]
1000fd98:	2322      	movs	r3, #34	; 0x22
1000fd9a:	71a3      	strb	r3, [r4, #6]
1000fd9c:	2300      	movs	r3, #0
1000fd9e:	212a      	movs	r1, #42	; 0x2a
1000fda0:	71e3      	strb	r3, [r4, #7]
1000fda2:	1c20      	adds	r0, r4, #0
1000fda4:	4b0f      	ldr	r3, [pc, #60]	; (1000fde4 <gapm_set_dev_config_cmd_handler+0x100>)
1000fda6:	80af      	strh	r7, [r5, #4]
1000fda8:	4798      	blx	r3
1000fdaa:	1c30      	adds	r0, r6, #0
1000fdac:	4b0e      	ldr	r3, [pc, #56]	; (1000fde8 <gapm_set_dev_config_cmd_handler+0x104>)
1000fdae:	4798      	blx	r3
1000fdb0:	7833      	ldrb	r3, [r6, #0]
1000fdb2:	20e2      	movs	r0, #226	; 0xe2
1000fdb4:	2b00      	cmp	r3, #0
1000fdb6:	d106      	bne.n	1000fdc6 <gapm_set_dev_config_cmd_handler+0xe2>
1000fdb8:	68ab      	ldr	r3, [r5, #8]
1000fdba:	20e2      	movs	r0, #226	; 0xe2
1000fdbc:	781a      	ldrb	r2, [r3, #0]
1000fdbe:	785b      	ldrb	r3, [r3, #1]
1000fdc0:	2a03      	cmp	r2, #3
1000fdc2:	d100      	bne.n	1000fdc6 <gapm_set_dev_config_cmd_handler+0xe2>
1000fdc4:	1c18      	adds	r0, r3, #0
1000fdc6:	b009      	add	sp, #36	; 0x24
1000fdc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fdca:	46c0      	nop			; (mov r8, r8)
1000fdcc:	10016b3c 	.word	0x10016b3c
1000fdd0:	100167cc 	.word	0x100167cc
1000fdd4:	10011bb7 	.word	0x10011bb7
1000fdd8:	10016b48 	.word	0x10016b48
1000fddc:	10016b4e 	.word	0x10016b4e
1000fde0:	100167c0 	.word	0x100167c0
1000fde4:	1000f09d 	.word	0x1000f09d
1000fde8:	1000f101 	.word	0x1000f101

1000fdec <gapm_get_dev_config_cmd_handler>:
1000fdec:	4684      	mov	ip, r0
1000fdee:	4663      	mov	r3, ip
1000fdf0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fdf2:	b085      	sub	sp, #20
1000fdf4:	9100      	str	r1, [sp, #0]
1000fdf6:	20cf      	movs	r0, #207	; 0xcf
1000fdf8:	2b01      	cmp	r3, #1
1000fdfa:	d854      	bhi.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fdfc:	2900      	cmp	r1, #0
1000fdfe:	d052      	beq.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fe00:	2200      	movs	r2, #0
1000fe02:	492a      	ldr	r1, [pc, #168]	; (1000feac <gapm_get_dev_config_cmd_handler+0xc0>)
1000fe04:	ab02      	add	r3, sp, #8
1000fe06:	880c      	ldrh	r4, [r1, #0]
1000fe08:	8809      	ldrh	r1, [r1, #0]
1000fe0a:	1d9f      	adds	r7, r3, #6
1000fe0c:	719a      	strb	r2, [r3, #6]
1000fe0e:	4b28      	ldr	r3, [pc, #160]	; (1000feb0 <gapm_get_dev_config_cmd_handler+0xc4>)
1000fe10:	0a09      	lsrs	r1, r1, #8
1000fe12:	250d      	movs	r5, #13
1000fe14:	2606      	movs	r6, #6
1000fe16:	7159      	strb	r1, [r3, #5]
1000fe18:	4661      	mov	r1, ip
1000fe1a:	701e      	strb	r6, [r3, #0]
1000fe1c:	705d      	strb	r5, [r3, #1]
1000fe1e:	709d      	strb	r5, [r3, #2]
1000fe20:	70da      	strb	r2, [r3, #3]
1000fe22:	711c      	strb	r4, [r3, #4]
1000fe24:	2901      	cmp	r1, #1
1000fe26:	d13e      	bne.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fe28:	21d0      	movs	r1, #208	; 0xd0
1000fe2a:	4c22      	ldr	r4, [pc, #136]	; (1000feb4 <gapm_get_dev_config_cmd_handler+0xc8>)
1000fe2c:	0109      	lsls	r1, r1, #4
1000fe2e:	8061      	strh	r1, [r4, #2]
1000fe30:	4921      	ldr	r1, [pc, #132]	; (1000feb8 <gapm_get_dev_config_cmd_handler+0xcc>)
1000fe32:	71da      	strb	r2, [r3, #7]
1000fe34:	8021      	strh	r1, [r4, #0]
1000fe36:	4661      	mov	r1, ip
1000fe38:	721e      	strb	r6, [r3, #8]
1000fe3a:	7199      	strb	r1, [r3, #6]
1000fe3c:	1c18      	adds	r0, r3, #0
1000fe3e:	2109      	movs	r1, #9
1000fe40:	4b1e      	ldr	r3, [pc, #120]	; (1000febc <gapm_get_dev_config_cmd_handler+0xd0>)
1000fe42:	80a5      	strh	r5, [r4, #4]
1000fe44:	4798      	blx	r3
1000fe46:	1c38      	adds	r0, r7, #0
1000fe48:	4b1d      	ldr	r3, [pc, #116]	; (1000fec0 <gapm_get_dev_config_cmd_handler+0xd4>)
1000fe4a:	4798      	blx	r3
1000fe4c:	783b      	ldrb	r3, [r7, #0]
1000fe4e:	20e2      	movs	r0, #226	; 0xe2
1000fe50:	9301      	str	r3, [sp, #4]
1000fe52:	2b00      	cmp	r3, #0
1000fe54:	d127      	bne.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fe56:	8821      	ldrh	r1, [r4, #0]
1000fe58:	4a1a      	ldr	r2, [pc, #104]	; (1000fec4 <gapm_get_dev_config_cmd_handler+0xd8>)
1000fe5a:	68a7      	ldr	r7, [r4, #8]
1000fe5c:	3b01      	subs	r3, #1
1000fe5e:	4291      	cmp	r1, r2
1000fe60:	d001      	beq.n	1000fe66 <gapm_get_dev_config_cmd_handler+0x7a>
1000fe62:	8023      	strh	r3, [r4, #0]
1000fe64:	e01a      	b.n	1000fe9c <gapm_get_dev_config_cmd_handler+0xb0>
1000fe66:	8063      	strh	r3, [r4, #2]
1000fe68:	9b00      	ldr	r3, [sp, #0]
1000fe6a:	1c39      	adds	r1, r7, #0
1000fe6c:	1c58      	adds	r0, r3, #1
1000fe6e:	1c32      	adds	r2, r6, #0
1000fe70:	4b15      	ldr	r3, [pc, #84]	; (1000fec8 <gapm_get_dev_config_cmd_handler+0xdc>)
1000fe72:	4798      	blx	r3
1000fe74:	79bb      	ldrb	r3, [r7, #6]
1000fe76:	9a00      	ldr	r2, [sp, #0]
1000fe78:	7013      	strb	r3, [r2, #0]
1000fe7a:	23d0      	movs	r3, #208	; 0xd0
1000fe7c:	011b      	lsls	r3, r3, #4
1000fe7e:	8023      	strh	r3, [r4, #0]
1000fe80:	ab02      	add	r3, sp, #8
1000fe82:	80a5      	strh	r5, [r4, #4]
1000fe84:	1ddd      	adds	r5, r3, #7
1000fe86:	466b      	mov	r3, sp
1000fe88:	791b      	ldrb	r3, [r3, #4]
1000fe8a:	1c28      	adds	r0, r5, #0
1000fe8c:	702b      	strb	r3, [r5, #0]
1000fe8e:	4b0c      	ldr	r3, [pc, #48]	; (1000fec0 <gapm_get_dev_config_cmd_handler+0xd4>)
1000fe90:	4798      	blx	r3
1000fe92:	782b      	ldrb	r3, [r5, #0]
1000fe94:	20d0      	movs	r0, #208	; 0xd0
1000fe96:	2b00      	cmp	r3, #0
1000fe98:	d105      	bne.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fe9a:	68a7      	ldr	r7, [r4, #8]
1000fe9c:	783b      	ldrb	r3, [r7, #0]
1000fe9e:	7878      	ldrb	r0, [r7, #1]
1000fea0:	2b06      	cmp	r3, #6
1000fea2:	d000      	beq.n	1000fea6 <gapm_get_dev_config_cmd_handler+0xba>
1000fea4:	20e2      	movs	r0, #226	; 0xe2
1000fea6:	b005      	add	sp, #20
1000fea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000feaa:	46c0      	nop			; (mov r8, r8)
1000feac:	100167cc 	.word	0x100167cc
1000feb0:	10016b3c 	.word	0x10016b3c
1000feb4:	100167c0 	.word	0x100167c0
1000feb8:	00000d08 	.word	0x00000d08
1000febc:	1000f09d 	.word	0x1000f09d
1000fec0:	1000f101 	.word	0x1000f101
1000fec4:	0000ffff 	.word	0x0000ffff
1000fec8:	10011bb7 	.word	0x10011bb7

1000fecc <gapm_cancel_cmd_handler>:
1000fecc:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fece:	4916      	ldr	r1, [pc, #88]	; (1000ff28 <gapm_cancel_cmd_handler+0x5c>)
1000fed0:	4816      	ldr	r0, [pc, #88]	; (1000ff2c <gapm_cancel_cmd_handler+0x60>)
1000fed2:	880c      	ldrh	r4, [r1, #0]
1000fed4:	8809      	ldrh	r1, [r1, #0]
1000fed6:	466b      	mov	r3, sp
1000fed8:	0a09      	lsrs	r1, r1, #8
1000feda:	7141      	strb	r1, [r0, #5]
1000fedc:	2102      	movs	r1, #2
1000fede:	2203      	movs	r2, #3
1000fee0:	7201      	strb	r1, [r0, #8]
1000fee2:	21d0      	movs	r1, #208	; 0xd0
1000fee4:	1ddd      	adds	r5, r3, #7
1000fee6:	2300      	movs	r3, #0
1000fee8:	7104      	strb	r4, [r0, #4]
1000feea:	4c11      	ldr	r4, [pc, #68]	; (1000ff30 <gapm_cancel_cmd_handler+0x64>)
1000feec:	7002      	strb	r2, [r0, #0]
1000feee:	0109      	lsls	r1, r1, #4
1000fef0:	320a      	adds	r2, #10
1000fef2:	702b      	strb	r3, [r5, #0]
1000fef4:	7042      	strb	r2, [r0, #1]
1000fef6:	7082      	strb	r2, [r0, #2]
1000fef8:	70c3      	strb	r3, [r0, #3]
1000fefa:	8021      	strh	r1, [r4, #0]
1000fefc:	80a2      	strh	r2, [r4, #4]
1000fefe:	71c3      	strb	r3, [r0, #7]
1000ff00:	3a0c      	subs	r2, #12
1000ff02:	2109      	movs	r1, #9
1000ff04:	4b0b      	ldr	r3, [pc, #44]	; (1000ff34 <gapm_cancel_cmd_handler+0x68>)
1000ff06:	7182      	strb	r2, [r0, #6]
1000ff08:	4798      	blx	r3
1000ff0a:	1c28      	adds	r0, r5, #0
1000ff0c:	4b0a      	ldr	r3, [pc, #40]	; (1000ff38 <gapm_cancel_cmd_handler+0x6c>)
1000ff0e:	4798      	blx	r3
1000ff10:	7828      	ldrb	r0, [r5, #0]
1000ff12:	2800      	cmp	r0, #0
1000ff14:	d001      	beq.n	1000ff1a <gapm_cancel_cmd_handler+0x4e>
1000ff16:	20e2      	movs	r0, #226	; 0xe2
1000ff18:	e004      	b.n	1000ff24 <gapm_cancel_cmd_handler+0x58>
1000ff1a:	68a3      	ldr	r3, [r4, #8]
1000ff1c:	785b      	ldrb	r3, [r3, #1]
1000ff1e:	2b44      	cmp	r3, #68	; 0x44
1000ff20:	d000      	beq.n	1000ff24 <gapm_cancel_cmd_handler+0x58>
1000ff22:	1c18      	adds	r0, r3, #0
1000ff24:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ff26:	46c0      	nop			; (mov r8, r8)
1000ff28:	100167cc 	.word	0x100167cc
1000ff2c:	10016b3c 	.word	0x10016b3c
1000ff30:	100167c0 	.word	0x100167c0
1000ff34:	1000f09d 	.word	0x1000f09d
1000ff38:	1000f101 	.word	0x1000f101

1000ff3c <gapm_dev_bdaddr_ind_handler>:
1000ff3c:	b538      	push	{r3, r4, r5, lr}
1000ff3e:	1c05      	adds	r5, r0, #0
1000ff40:	1c0c      	adds	r4, r1, #0
1000ff42:	1c48      	adds	r0, r1, #1
1000ff44:	2206      	movs	r2, #6
1000ff46:	1c29      	adds	r1, r5, #0
1000ff48:	4b02      	ldr	r3, [pc, #8]	; (1000ff54 <gapm_dev_bdaddr_ind_handler+0x18>)
1000ff4a:	4798      	blx	r3
1000ff4c:	79ab      	ldrb	r3, [r5, #6]
1000ff4e:	2000      	movs	r0, #0
1000ff50:	7023      	strb	r3, [r4, #0]
1000ff52:	bd38      	pop	{r3, r4, r5, pc}
1000ff54:	10011bb7 	.word	0x10011bb7

1000ff58 <gapm_cmp_evt>:
1000ff58:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff5a:	7803      	ldrb	r3, [r0, #0]
1000ff5c:	7845      	ldrb	r5, [r0, #1]
1000ff5e:	3b0c      	subs	r3, #12
1000ff60:	1e18      	subs	r0, r3, #0
1000ff62:	280b      	cmp	r0, #11
1000ff64:	d900      	bls.n	1000ff68 <gapm_cmp_evt+0x10>
1000ff66:	e08d      	b.n	10010084 <gapm_cmp_evt+0x12c>
1000ff68:	1c0c      	adds	r4, r1, #0
1000ff6a:	f000 fd5f 	bl	10010a2c <__gnu_thumb1_case_uqi>
1000ff6e:	1952      	.short	0x1952
1000ff70:	068b1919 	.word	0x068b1919
1000ff74:	8b595906 	.word	0x8b595906
1000ff78:	0d8b      	.short	0x0d8b
1000ff7a:	2300      	movs	r3, #0
1000ff7c:	2d45      	cmp	r5, #69	; 0x45
1000ff7e:	d000      	beq.n	1000ff82 <gapm_cmp_evt+0x2a>
1000ff80:	1c2b      	adds	r3, r5, #0
1000ff82:	7023      	strb	r3, [r4, #0]
1000ff84:	2002      	movs	r0, #2
1000ff86:	e07e      	b.n	10010086 <gapm_cmp_evt+0x12e>
1000ff88:	203b      	movs	r0, #59	; 0x3b
1000ff8a:	2d00      	cmp	r5, #0
1000ff8c:	d100      	bne.n	1000ff90 <gapm_cmp_evt+0x38>
1000ff8e:	e07a      	b.n	10010086 <gapm_cmp_evt+0x12e>
1000ff90:	700d      	strb	r5, [r1, #0]
1000ff92:	1c48      	adds	r0, r1, #1
1000ff94:	2210      	movs	r2, #16
1000ff96:	2100      	movs	r1, #0
1000ff98:	4b3b      	ldr	r3, [pc, #236]	; (10010088 <gapm_cmp_evt+0x130>)
1000ff9a:	4798      	blx	r3
1000ff9c:	200f      	movs	r0, #15
1000ff9e:	e072      	b.n	10010086 <gapm_cmp_evt+0x12e>
1000ffa0:	2d00      	cmp	r5, #0
1000ffa2:	d134      	bne.n	1001000e <gapm_cmp_evt+0xb6>
1000ffa4:	4b39      	ldr	r3, [pc, #228]	; (1001008c <gapm_cmp_evt+0x134>)
1000ffa6:	4798      	blx	r3
1000ffa8:	1e43      	subs	r3, r0, #1
1000ffaa:	b2db      	uxtb	r3, r3
1000ffac:	1c28      	adds	r0, r5, #0
1000ffae:	2b06      	cmp	r3, #6
1000ffb0:	d869      	bhi.n	10010086 <gapm_cmp_evt+0x12e>
1000ffb2:	466b      	mov	r3, sp
1000ffb4:	4e36      	ldr	r6, [pc, #216]	; (10010090 <gapm_cmp_evt+0x138>)
1000ffb6:	1dd9      	adds	r1, r3, #7
1000ffb8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1000ffba:	4b36      	ldr	r3, [pc, #216]	; (10010094 <gapm_cmp_evt+0x13c>)
1000ffbc:	4798      	blx	r3
1000ffbe:	2312      	movs	r3, #18
1000ffc0:	4358      	muls	r0, r3
1000ffc2:	4935      	ldr	r1, [pc, #212]	; (10010098 <gapm_cmp_evt+0x140>)
1000ffc4:	1809      	adds	r1, r1, r0
1000ffc6:	1c0b      	adds	r3, r1, #0
1000ffc8:	894a      	ldrh	r2, [r1, #10]
1000ffca:	3308      	adds	r3, #8
1000ffcc:	8122      	strh	r2, [r4, #8]
1000ffce:	784f      	ldrb	r7, [r1, #1]
1000ffd0:	72a5      	strb	r5, [r4, #10]
1000ffd2:	7027      	strb	r7, [r4, #0]
1000ffd4:	898a      	ldrh	r2, [r1, #12]
1000ffd6:	1c60      	adds	r0, r4, #1
1000ffd8:	81a2      	strh	r2, [r4, #12]
1000ffda:	88db      	ldrh	r3, [r3, #6]
1000ffdc:	3102      	adds	r1, #2
1000ffde:	81e3      	strh	r3, [r4, #14]
1000ffe0:	89cb      	ldrh	r3, [r1, #14]
1000ffe2:	2206      	movs	r2, #6
1000ffe4:	8223      	strh	r3, [r4, #16]
1000ffe6:	4b2d      	ldr	r3, [pc, #180]	; (1001009c <gapm_cmp_evt+0x144>)
1000ffe8:	4798      	blx	r3
1000ffea:	2f00      	cmp	r7, #0
1000ffec:	d00a      	beq.n	10010004 <gapm_cmp_evt+0xac>
1000ffee:	79a3      	ldrb	r3, [r4, #6]
1000fff0:	223f      	movs	r2, #63	; 0x3f
1000fff2:	1c19      	adds	r1, r3, #0
1000fff4:	3501      	adds	r5, #1
1000fff6:	4391      	bics	r1, r2
1000fff8:	29c0      	cmp	r1, #192	; 0xc0
1000fffa:	d003      	beq.n	10010004 <gapm_cmp_evt+0xac>
1000fffc:	065b      	lsls	r3, r3, #25
1000fffe:	0fdb      	lsrs	r3, r3, #31
10010000:	3502      	adds	r5, #2
10010002:	1aed      	subs	r5, r5, r3
10010004:	2301      	movs	r3, #1
10010006:	425b      	negs	r3, r3
10010008:	7025      	strb	r5, [r4, #0]
1001000a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001000c:	e038      	b.n	10010080 <gapm_cmp_evt+0x128>
1001000e:	700d      	strb	r5, [r1, #0]
10010010:	e004      	b.n	1001001c <gapm_cmp_evt+0xc4>
10010012:	2300      	movs	r3, #0
10010014:	2d45      	cmp	r5, #69	; 0x45
10010016:	d000      	beq.n	1001001a <gapm_cmp_evt+0xc2>
10010018:	1c2b      	adds	r3, r5, #0
1001001a:	7023      	strb	r3, [r4, #0]
1001001c:	2003      	movs	r0, #3
1001001e:	e032      	b.n	10010086 <gapm_cmp_evt+0x12e>
10010020:	4e1b      	ldr	r6, [pc, #108]	; (10010090 <gapm_cmp_evt+0x138>)
10010022:	2100      	movs	r1, #0
10010024:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010026:	4b1b      	ldr	r3, [pc, #108]	; (10010094 <gapm_cmp_evt+0x13c>)
10010028:	4798      	blx	r3
1001002a:	2807      	cmp	r0, #7
1001002c:	d818      	bhi.n	10010060 <gapm_cmp_evt+0x108>
1001002e:	2301      	movs	r3, #1
10010030:	425b      	negs	r3, r3
10010032:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010034:	3313      	adds	r3, #19
10010036:	4358      	muls	r0, r3
10010038:	4917      	ldr	r1, [pc, #92]	; (10010098 <gapm_cmp_evt+0x140>)
1001003a:	1809      	adds	r1, r1, r0
1001003c:	1c0b      	adds	r3, r1, #0
1001003e:	894a      	ldrh	r2, [r1, #10]
10010040:	3308      	adds	r3, #8
10010042:	8122      	strh	r2, [r4, #8]
10010044:	784a      	ldrb	r2, [r1, #1]
10010046:	72a5      	strb	r5, [r4, #10]
10010048:	7022      	strb	r2, [r4, #0]
1001004a:	898a      	ldrh	r2, [r1, #12]
1001004c:	1c60      	adds	r0, r4, #1
1001004e:	81a2      	strh	r2, [r4, #12]
10010050:	88db      	ldrh	r3, [r3, #6]
10010052:	3102      	adds	r1, #2
10010054:	81e3      	strh	r3, [r4, #14]
10010056:	89cb      	ldrh	r3, [r1, #14]
10010058:	2206      	movs	r2, #6
1001005a:	8223      	strh	r3, [r4, #16]
1001005c:	4b0f      	ldr	r3, [pc, #60]	; (1001009c <gapm_cmp_evt+0x144>)
1001005e:	4798      	blx	r3
10010060:	2200      	movs	r2, #0
10010062:	7823      	ldrb	r3, [r4, #0]
10010064:	4293      	cmp	r3, r2
10010066:	d00a      	beq.n	1001007e <gapm_cmp_evt+0x126>
10010068:	79a3      	ldrb	r3, [r4, #6]
1001006a:	323f      	adds	r2, #63	; 0x3f
1001006c:	1c19      	adds	r1, r3, #0
1001006e:	4391      	bics	r1, r2
10010070:	3a3e      	subs	r2, #62	; 0x3e
10010072:	29c0      	cmp	r1, #192	; 0xc0
10010074:	d003      	beq.n	1001007e <gapm_cmp_evt+0x126>
10010076:	065b      	lsls	r3, r3, #25
10010078:	0fdb      	lsrs	r3, r3, #31
1001007a:	3202      	adds	r2, #2
1001007c:	1ad2      	subs	r2, r2, r3
1001007e:	7022      	strb	r2, [r4, #0]
10010080:	2005      	movs	r0, #5
10010082:	e000      	b.n	10010086 <gapm_cmp_evt+0x12e>
10010084:	2000      	movs	r0, #0
10010086:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010088:	10011bc9 	.word	0x10011bc9
1001008c:	1000f2a9 	.word	0x1000f2a9
10010090:	1001685e 	.word	0x1001685e
10010094:	1000f26d 	.word	0x1000f26d
10010098:	100167ce 	.word	0x100167ce
1001009c:	10011bb7 	.word	0x10011bb7

100100a0 <gapm_start_adv_cmd_handler>:
100100a0:	b5f0      	push	{r4, r5, r6, r7, lr}
100100a2:	b089      	sub	sp, #36	; 0x24
100100a4:	9303      	str	r3, [sp, #12]
100100a6:	ab0e      	add	r3, sp, #56	; 0x38
100100a8:	9102      	str	r1, [sp, #8]
100100aa:	cb02      	ldmia	r3!, {r1}
100100ac:	aa08      	add	r2, sp, #32
100100ae:	881b      	ldrh	r3, [r3, #0]
100100b0:	4e3c      	ldr	r6, [pc, #240]	; (100101a4 <gapm_start_adv_cmd_handler+0x104>)
100100b2:	9300      	str	r3, [sp, #0]
100100b4:	ab10      	add	r3, sp, #64	; 0x40
100100b6:	881b      	ldrh	r3, [r3, #0]
100100b8:	240d      	movs	r4, #13
100100ba:	469c      	mov	ip, r3
100100bc:	ab11      	add	r3, sp, #68	; 0x44
100100be:	781b      	ldrb	r3, [r3, #0]
100100c0:	9304      	str	r3, [sp, #16]
100100c2:	ab12      	add	r3, sp, #72	; 0x48
100100c4:	781b      	ldrb	r3, [r3, #0]
100100c6:	9305      	str	r3, [sp, #20]
100100c8:	ab13      	add	r3, sp, #76	; 0x4c
100100ca:	781b      	ldrb	r3, [r3, #0]
100100cc:	9306      	str	r3, [sp, #24]
100100ce:	ab14      	add	r3, sp, #80	; 0x50
100100d0:	781b      	ldrb	r3, [r3, #0]
100100d2:	9301      	str	r3, [sp, #4]
100100d4:	2319      	movs	r3, #25
100100d6:	189b      	adds	r3, r3, r2
100100d8:	7fdd      	ldrb	r5, [r3, #31]
100100da:	ab18      	add	r3, sp, #96	; 0x60
100100dc:	881f      	ldrh	r7, [r3, #0]
100100de:	ab19      	add	r3, sp, #100	; 0x64
100100e0:	781b      	ldrb	r3, [r3, #0]
100100e2:	8832      	ldrh	r2, [r6, #0]
100100e4:	9307      	str	r3, [sp, #28]
100100e6:	4b30      	ldr	r3, [pc, #192]	; (100101a8 <gapm_start_adv_cmd_handler+0x108>)
100100e8:	8836      	ldrh	r6, [r6, #0]
100100ea:	711a      	strb	r2, [r3, #4]
100100ec:	466a      	mov	r2, sp
100100ee:	7a12      	ldrb	r2, [r2, #8]
100100f0:	701c      	strb	r4, [r3, #0]
100100f2:	705c      	strb	r4, [r3, #1]
100100f4:	709c      	strb	r4, [r3, #2]
100100f6:	725a      	strb	r2, [r3, #9]
100100f8:	2400      	movs	r4, #0
100100fa:	466a      	mov	r2, sp
100100fc:	0a36      	lsrs	r6, r6, #8
100100fe:	70dc      	strb	r4, [r3, #3]
10010100:	7218      	strb	r0, [r3, #8]
10010102:	729c      	strb	r4, [r3, #10]
10010104:	715e      	strb	r6, [r3, #5]
10010106:	72dc      	strb	r4, [r3, #11]
10010108:	7812      	ldrb	r2, [r2, #0]
1001010a:	380e      	subs	r0, #14
1001010c:	731a      	strb	r2, [r3, #12]
1001010e:	9a00      	ldr	r2, [sp, #0]
10010110:	0a14      	lsrs	r4, r2, #8
10010112:	4662      	mov	r2, ip
10010114:	739a      	strb	r2, [r3, #14]
10010116:	4662      	mov	r2, ip
10010118:	735c      	strb	r4, [r3, #13]
1001011a:	0a14      	lsrs	r4, r2, #8
1001011c:	466a      	mov	r2, sp
1001011e:	7c12      	ldrb	r2, [r2, #16]
10010120:	73dc      	strb	r4, [r3, #15]
10010122:	741a      	strb	r2, [r3, #16]
10010124:	1c1c      	adds	r4, r3, #0
10010126:	2801      	cmp	r0, #1
10010128:	d809      	bhi.n	1001013e <gapm_start_adv_cmd_handler+0x9e>
1001012a:	2900      	cmp	r1, #0
1001012c:	d003      	beq.n	10010136 <gapm_start_adv_cmd_handler+0x96>
1001012e:	481f      	ldr	r0, [pc, #124]	; (100101ac <gapm_start_adv_cmd_handler+0x10c>)
10010130:	2206      	movs	r2, #6
10010132:	4b1f      	ldr	r3, [pc, #124]	; (100101b0 <gapm_start_adv_cmd_handler+0x110>)
10010134:	4798      	blx	r3
10010136:	466b      	mov	r3, sp
10010138:	7b1b      	ldrb	r3, [r3, #12]
1001013a:	75e3      	strb	r3, [r4, #23]
1001013c:	e014      	b.n	10010168 <gapm_start_adv_cmd_handler+0xc8>
1001013e:	466b      	mov	r3, sp
10010140:	7d1b      	ldrb	r3, [r3, #20]
10010142:	9915      	ldr	r1, [sp, #84]	; 0x54
10010144:	7463      	strb	r3, [r4, #17]
10010146:	466b      	mov	r3, sp
10010148:	7e1b      	ldrb	r3, [r3, #24]
1001014a:	9a01      	ldr	r2, [sp, #4]
1001014c:	74a3      	strb	r3, [r4, #18]
1001014e:	466b      	mov	r3, sp
10010150:	791b      	ldrb	r3, [r3, #4]
10010152:	4818      	ldr	r0, [pc, #96]	; (100101b4 <gapm_start_adv_cmd_handler+0x114>)
10010154:	4e16      	ldr	r6, [pc, #88]	; (100101b0 <gapm_start_adv_cmd_handler+0x110>)
10010156:	74e3      	strb	r3, [r4, #19]
10010158:	47b0      	blx	r6
1001015a:	1c23      	adds	r3, r4, #0
1001015c:	4816      	ldr	r0, [pc, #88]	; (100101b8 <gapm_start_adv_cmd_handler+0x118>)
1001015e:	3330      	adds	r3, #48	; 0x30
10010160:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010162:	1c2a      	adds	r2, r5, #0
10010164:	701d      	strb	r5, [r3, #0]
10010166:	47b0      	blx	r6
10010168:	1c22      	adds	r2, r4, #0
1001016a:	23a5      	movs	r3, #165	; 0xa5
1001016c:	3250      	adds	r2, #80	; 0x50
1001016e:	7013      	strb	r3, [r2, #0]
10010170:	1c22      	adds	r2, r4, #0
10010172:	3251      	adds	r2, #81	; 0x51
10010174:	7013      	strb	r3, [r2, #0]
10010176:	1c23      	adds	r3, r4, #0
10010178:	1c22      	adds	r2, r4, #0
1001017a:	3352      	adds	r3, #82	; 0x52
1001017c:	701f      	strb	r7, [r3, #0]
1001017e:	3253      	adds	r2, #83	; 0x53
10010180:	0a3b      	lsrs	r3, r7, #8
10010182:	7013      	strb	r3, [r2, #0]
10010184:	466a      	mov	r2, sp
10010186:	1c23      	adds	r3, r4, #0
10010188:	7f12      	ldrb	r2, [r2, #28]
1001018a:	3354      	adds	r3, #84	; 0x54
1001018c:	701a      	strb	r2, [r3, #0]
1001018e:	234d      	movs	r3, #77	; 0x4d
10010190:	2500      	movs	r5, #0
10010192:	71a3      	strb	r3, [r4, #6]
10010194:	1c20      	adds	r0, r4, #0
10010196:	2155      	movs	r1, #85	; 0x55
10010198:	4b08      	ldr	r3, [pc, #32]	; (100101bc <gapm_start_adv_cmd_handler+0x11c>)
1001019a:	71e5      	strb	r5, [r4, #7]
1001019c:	4798      	blx	r3
1001019e:	1c28      	adds	r0, r5, #0
100101a0:	b009      	add	sp, #36	; 0x24
100101a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101a4:	100167cc 	.word	0x100167cc
100101a8:	10016b3c 	.word	0x10016b3c
100101ac:	10016b4d 	.word	0x10016b4d
100101b0:	10011bb7 	.word	0x10011bb7
100101b4:	10016b50 	.word	0x10016b50
100101b8:	10016b6d 	.word	0x10016b6d
100101bc:	1000f09d 	.word	0x1000f09d

100101c0 <get_gap_local_addr_type>:
100101c0:	4b04      	ldr	r3, [pc, #16]	; (100101d4 <get_gap_local_addr_type+0x14>)
100101c2:	2001      	movs	r0, #1
100101c4:	791b      	ldrb	r3, [r3, #4]
100101c6:	2b02      	cmp	r3, #2
100101c8:	d003      	beq.n	100101d2 <get_gap_local_addr_type+0x12>
100101ca:	3b03      	subs	r3, #3
100101cc:	4258      	negs	r0, r3
100101ce:	4158      	adcs	r0, r3
100101d0:	0040      	lsls	r0, r0, #1
100101d2:	4770      	bx	lr
100101d4:	1001685e 	.word	0x1001685e

100101d8 <gapm_adv_report_evt_handler>:
100101d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101da:	7843      	ldrb	r3, [r0, #1]
100101dc:	1c05      	adds	r5, r0, #0
100101de:	9301      	str	r3, [sp, #4]
100101e0:	466b      	mov	r3, sp
100101e2:	1c0c      	adds	r4, r1, #0
100101e4:	791b      	ldrb	r3, [r3, #4]
100101e6:	7806      	ldrb	r6, [r0, #0]
100101e8:	2206      	movs	r2, #6
100101ea:	704b      	strb	r3, [r1, #1]
100101ec:	1c88      	adds	r0, r1, #2
100101ee:	4f1b      	ldr	r7, [pc, #108]	; (1001025c <gapm_adv_report_evt_handler+0x84>)
100101f0:	1ca9      	adds	r1, r5, #2
100101f2:	47b8      	blx	r7
100101f4:	1c20      	adds	r0, r4, #0
100101f6:	1c29      	adds	r1, r5, #0
100101f8:	7a2a      	ldrb	r2, [r5, #8]
100101fa:	3008      	adds	r0, #8
100101fc:	77c2      	strb	r2, [r0, #31]
100101fe:	3109      	adds	r1, #9
10010200:	3528      	adds	r5, #40	; 0x28
10010202:	47b8      	blx	r7
10010204:	782b      	ldrb	r3, [r5, #0]
10010206:	b25a      	sxtb	r2, r3
10010208:	2a00      	cmp	r2, #0
1001020a:	da01      	bge.n	10010210 <gapm_adv_report_evt_handler+0x38>
1001020c:	3301      	adds	r3, #1
1001020e:	b2db      	uxtb	r3, r3
10010210:	1c22      	adds	r2, r4, #0
10010212:	3228      	adds	r2, #40	; 0x28
10010214:	7013      	strb	r3, [r2, #0]
10010216:	2200      	movs	r2, #0
10010218:	9b01      	ldr	r3, [sp, #4]
1001021a:	4293      	cmp	r3, r2
1001021c:	d00a      	beq.n	10010234 <gapm_adv_report_evt_handler+0x5c>
1001021e:	79e3      	ldrb	r3, [r4, #7]
10010220:	323f      	adds	r2, #63	; 0x3f
10010222:	1c19      	adds	r1, r3, #0
10010224:	4391      	bics	r1, r2
10010226:	3a3e      	subs	r2, #62	; 0x3e
10010228:	29c0      	cmp	r1, #192	; 0xc0
1001022a:	d003      	beq.n	10010234 <gapm_adv_report_evt_handler+0x5c>
1001022c:	065b      	lsls	r3, r3, #25
1001022e:	0fdb      	lsrs	r3, r3, #31
10010230:	3202      	adds	r2, #2
10010232:	1ad2      	subs	r2, r2, r3
10010234:	7062      	strb	r2, [r4, #1]
10010236:	2e04      	cmp	r6, #4
10010238:	d80f      	bhi.n	1001025a <gapm_adv_report_evt_handler+0x82>
1001023a:	1c30      	adds	r0, r6, #0
1001023c:	f000 fbf6 	bl	10010a2c <__gnu_thumb1_case_uqi>
10010240:	09070503 	.word	0x09070503
10010244:	0b          	.byte	0x0b
10010245:	00          	.byte	0x00
10010246:	2300      	movs	r3, #0
10010248:	e006      	b.n	10010258 <gapm_adv_report_evt_handler+0x80>
1001024a:	2301      	movs	r3, #1
1001024c:	e004      	b.n	10010258 <gapm_adv_report_evt_handler+0x80>
1001024e:	2302      	movs	r3, #2
10010250:	e002      	b.n	10010258 <gapm_adv_report_evt_handler+0x80>
10010252:	2303      	movs	r3, #3
10010254:	e000      	b.n	10010258 <gapm_adv_report_evt_handler+0x80>
10010256:	2305      	movs	r3, #5
10010258:	7023      	strb	r3, [r4, #0]
1001025a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001025c:	10011bb7 	.word	0x10011bb7

10010260 <gapm_resolv_addr_cmd_handler>:
10010260:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010262:	2314      	movs	r3, #20
10010264:	4c12      	ldr	r4, [pc, #72]	; (100102b0 <gapm_resolv_addr_cmd_handler+0x50>)
10010266:	1c17      	adds	r7, r2, #0
10010268:	7023      	strb	r3, [r4, #0]
1001026a:	3b07      	subs	r3, #7
1001026c:	7063      	strb	r3, [r4, #1]
1001026e:	70a3      	strb	r3, [r4, #2]
10010270:	2300      	movs	r3, #0
10010272:	70e3      	strb	r3, [r4, #3]
10010274:	4b0f      	ldr	r3, [pc, #60]	; (100102b4 <gapm_resolv_addr_cmd_handler+0x54>)
10010276:	1c05      	adds	r5, r0, #0
10010278:	881a      	ldrh	r2, [r3, #0]
1001027a:	881b      	ldrh	r3, [r3, #0]
1001027c:	4e0e      	ldr	r6, [pc, #56]	; (100102b8 <gapm_resolv_addr_cmd_handler+0x58>)
1001027e:	0a1b      	lsrs	r3, r3, #8
10010280:	7163      	strb	r3, [r4, #5]
10010282:	2317      	movs	r3, #23
10010284:	012d      	lsls	r5, r5, #4
10010286:	7122      	strb	r2, [r4, #4]
10010288:	7260      	strb	r0, [r4, #9]
1001028a:	2206      	movs	r2, #6
1001028c:	480b      	ldr	r0, [pc, #44]	; (100102bc <gapm_resolv_addr_cmd_handler+0x5c>)
1001028e:	7223      	strb	r3, [r4, #8]
10010290:	47b0      	blx	r6
10010292:	1c39      	adds	r1, r7, #0
10010294:	1c2a      	adds	r2, r5, #0
10010296:	480a      	ldr	r0, [pc, #40]	; (100102c0 <gapm_resolv_addr_cmd_handler+0x60>)
10010298:	47b0      	blx	r6
1001029a:	1c29      	adds	r1, r5, #0
1001029c:	3110      	adds	r1, #16
1001029e:	1c0b      	adds	r3, r1, #0
100102a0:	3b08      	subs	r3, #8
100102a2:	71a3      	strb	r3, [r4, #6]
100102a4:	121b      	asrs	r3, r3, #8
100102a6:	71e3      	strb	r3, [r4, #7]
100102a8:	1c20      	adds	r0, r4, #0
100102aa:	4b06      	ldr	r3, [pc, #24]	; (100102c4 <gapm_resolv_addr_cmd_handler+0x64>)
100102ac:	4798      	blx	r3
100102ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100102b0:	10016b3c 	.word	0x10016b3c
100102b4:	100167cc 	.word	0x100167cc
100102b8:	10011bb7 	.word	0x10011bb7
100102bc:	10016b46 	.word	0x10016b46
100102c0:	10016b4c 	.word	0x10016b4c
100102c4:	1000f09d 	.word	0x1000f09d

100102c8 <gapm_addr_solved_ind_handler>:
100102c8:	b570      	push	{r4, r5, r6, lr}
100102ca:	1c04      	adds	r4, r0, #0
100102cc:	1c08      	adds	r0, r1, #0
100102ce:	1c0d      	adds	r5, r1, #0
100102d0:	4e05      	ldr	r6, [pc, #20]	; (100102e8 <gapm_addr_solved_ind_handler+0x20>)
100102d2:	1c21      	adds	r1, r4, #0
100102d4:	2206      	movs	r2, #6
100102d6:	3011      	adds	r0, #17
100102d8:	47b0      	blx	r6
100102da:	1c68      	adds	r0, r5, #1
100102dc:	1da1      	adds	r1, r4, #6
100102de:	2210      	movs	r2, #16
100102e0:	47b0      	blx	r6
100102e2:	2300      	movs	r3, #0
100102e4:	702b      	strb	r3, [r5, #0]
100102e6:	bd70      	pop	{r4, r5, r6, pc}
100102e8:	10011bb7 	.word	0x10011bb7

100102ec <gapm_profile_added_ind_handler>:
100102ec:	b510      	push	{r4, lr}
100102ee:	7843      	ldrb	r3, [r0, #1]
100102f0:	7902      	ldrb	r2, [r0, #4]
100102f2:	7944      	ldrb	r4, [r0, #5]
100102f4:	7800      	ldrb	r0, [r0, #0]
100102f6:	021b      	lsls	r3, r3, #8
100102f8:	4303      	orrs	r3, r0
100102fa:	2b1b      	cmp	r3, #27
100102fc:	d104      	bne.n	10010308 <gapm_profile_added_ind_handler+0x1c>
100102fe:	2300      	movs	r3, #0
10010300:	700b      	strb	r3, [r1, #0]
10010302:	0223      	lsls	r3, r4, #8
10010304:	4313      	orrs	r3, r2
10010306:	804b      	strh	r3, [r1, #2]
10010308:	203b      	movs	r0, #59	; 0x3b
1001030a:	bd10      	pop	{r4, pc}

1001030c <gattc_read_req_ind_parser>:
1001030c:	7843      	ldrb	r3, [r0, #1]
1001030e:	7802      	ldrb	r2, [r0, #0]
10010310:	021b      	lsls	r3, r3, #8
10010312:	4313      	orrs	r3, r2
10010314:	804b      	strh	r3, [r1, #2]
10010316:	4770      	bx	lr

10010318 <gattc_write_req_ind_parser>:
10010318:	b508      	push	{r3, lr}
1001031a:	1c13      	adds	r3, r2, #0
1001031c:	0a00      	lsrs	r0, r0, #8
1001031e:	8010      	strh	r0, [r2, #0]
10010320:	784a      	ldrb	r2, [r1, #1]
10010322:	7808      	ldrb	r0, [r1, #0]
10010324:	0212      	lsls	r2, r2, #8
10010326:	4302      	orrs	r2, r0
10010328:	805a      	strh	r2, [r3, #2]
1001032a:	78ca      	ldrb	r2, [r1, #3]
1001032c:	7888      	ldrb	r0, [r1, #2]
1001032e:	0212      	lsls	r2, r2, #8
10010330:	4302      	orrs	r2, r0
10010332:	809a      	strh	r2, [r3, #4]
10010334:	794a      	ldrb	r2, [r1, #5]
10010336:	7908      	ldrb	r0, [r1, #4]
10010338:	0212      	lsls	r2, r2, #8
1001033a:	4302      	orrs	r2, r0
1001033c:	80da      	strh	r2, [r3, #6]
1001033e:	3308      	adds	r3, #8
10010340:	1c18      	adds	r0, r3, #0
10010342:	3106      	adds	r1, #6
10010344:	4b01      	ldr	r3, [pc, #4]	; (1001034c <gattc_write_req_ind_parser+0x34>)
10010346:	4798      	blx	r3
10010348:	bd08      	pop	{r3, pc}
1001034a:	46c0      	nop			; (mov r8, r8)
1001034c:	10011bb7 	.word	0x10011bb7

10010350 <gattc_att_info_req_parser>:
10010350:	7843      	ldrb	r3, [r0, #1]
10010352:	7802      	ldrb	r2, [r0, #0]
10010354:	021b      	lsls	r3, r3, #8
10010356:	4313      	orrs	r3, r2
10010358:	800b      	strh	r3, [r1, #0]
1001035a:	4770      	bx	lr

1001035c <gattc_read_cfm>:
1001035c:	b538      	push	{r3, r4, r5, lr}
1001035e:	2514      	movs	r5, #20
10010360:	1c1c      	adds	r4, r3, #0
10010362:	4b14      	ldr	r3, [pc, #80]	; (100103b4 <gattc_read_cfm+0x58>)
10010364:	70d9      	strb	r1, [r3, #3]
10010366:	4914      	ldr	r1, [pc, #80]	; (100103b8 <gattc_read_cfm+0x5c>)
10010368:	701d      	strb	r5, [r3, #0]
1001036a:	3d08      	subs	r5, #8
1001036c:	705d      	strb	r5, [r3, #1]
1001036e:	709d      	strb	r5, [r3, #2]
10010370:	880d      	ldrh	r5, [r1, #0]
10010372:	8809      	ldrh	r1, [r1, #0]
10010374:	7218      	strb	r0, [r3, #8]
10010376:	0a09      	lsrs	r1, r1, #8
10010378:	7159      	strb	r1, [r3, #5]
1001037a:	0a00      	lsrs	r0, r0, #8
1001037c:	0a21      	lsrs	r1, r4, #8
1001037e:	711d      	strb	r5, [r3, #4]
10010380:	7258      	strb	r0, [r3, #9]
10010382:	729c      	strb	r4, [r3, #10]
10010384:	72d9      	strb	r1, [r3, #11]
10010386:	731a      	strb	r2, [r3, #12]
10010388:	1c1d      	adds	r5, r3, #0
1001038a:	2c00      	cmp	r4, #0
1001038c:	d007      	beq.n	1001039e <gattc_read_cfm+0x42>
1001038e:	9904      	ldr	r1, [sp, #16]
10010390:	1c22      	adds	r2, r4, #0
10010392:	480a      	ldr	r0, [pc, #40]	; (100103bc <gattc_read_cfm+0x60>)
10010394:	4b0a      	ldr	r3, [pc, #40]	; (100103c0 <gattc_read_cfm+0x64>)
10010396:	340d      	adds	r4, #13
10010398:	4798      	blx	r3
1001039a:	b2a1      	uxth	r1, r4
1001039c:	e001      	b.n	100103a2 <gattc_read_cfm+0x46>
1001039e:	210e      	movs	r1, #14
100103a0:	735c      	strb	r4, [r3, #13]
100103a2:	1c0b      	adds	r3, r1, #0
100103a4:	3b08      	subs	r3, #8
100103a6:	71ab      	strb	r3, [r5, #6]
100103a8:	121b      	asrs	r3, r3, #8
100103aa:	71eb      	strb	r3, [r5, #7]
100103ac:	1c28      	adds	r0, r5, #0
100103ae:	4b05      	ldr	r3, [pc, #20]	; (100103c4 <gattc_read_cfm+0x68>)
100103b0:	4798      	blx	r3
100103b2:	bd38      	pop	{r3, r4, r5, pc}
100103b4:	10016b3c 	.word	0x10016b3c
100103b8:	100167cc 	.word	0x100167cc
100103bc:	10016b49 	.word	0x10016b49
100103c0:	10011bb7 	.word	0x10011bb7
100103c4:	1000f09d 	.word	0x1000f09d

100103c8 <gattc_write_cfm>:
100103c8:	4b0d      	ldr	r3, [pc, #52]	; (10010400 <gattc_write_cfm+0x38>)
100103ca:	b510      	push	{r4, lr}
100103cc:	729a      	strb	r2, [r3, #10]
100103ce:	2203      	movs	r2, #3
100103d0:	2416      	movs	r4, #22
100103d2:	719a      	strb	r2, [r3, #6]
100103d4:	2200      	movs	r2, #0
100103d6:	70d9      	strb	r1, [r3, #3]
100103d8:	490a      	ldr	r1, [pc, #40]	; (10010404 <gattc_write_cfm+0x3c>)
100103da:	701c      	strb	r4, [r3, #0]
100103dc:	3c0a      	subs	r4, #10
100103de:	705c      	strb	r4, [r3, #1]
100103e0:	709c      	strb	r4, [r3, #2]
100103e2:	880c      	ldrh	r4, [r1, #0]
100103e4:	8809      	ldrh	r1, [r1, #0]
100103e6:	7218      	strb	r0, [r3, #8]
100103e8:	0a09      	lsrs	r1, r1, #8
100103ea:	0a00      	lsrs	r0, r0, #8
100103ec:	711c      	strb	r4, [r3, #4]
100103ee:	7159      	strb	r1, [r3, #5]
100103f0:	7258      	strb	r0, [r3, #9]
100103f2:	71da      	strb	r2, [r3, #7]
100103f4:	1c18      	adds	r0, r3, #0
100103f6:	210b      	movs	r1, #11
100103f8:	4b03      	ldr	r3, [pc, #12]	; (10010408 <gattc_write_cfm+0x40>)
100103fa:	4798      	blx	r3
100103fc:	bd10      	pop	{r4, pc}
100103fe:	46c0      	nop			; (mov r8, r8)
10010400:	10016b3c 	.word	0x10016b3c
10010404:	100167cc 	.word	0x100167cc
10010408:	1000f09d 	.word	0x1000f09d

1001040c <gattc_att_info_cfm>:
1001040c:	b538      	push	{r3, r4, r5, lr}
1001040e:	4c0e      	ldr	r4, [pc, #56]	; (10010448 <gattc_att_info_cfm+0x3c>)
10010410:	2518      	movs	r5, #24
10010412:	7323      	strb	r3, [r4, #12]
10010414:	2305      	movs	r3, #5
10010416:	71a3      	strb	r3, [r4, #6]
10010418:	2300      	movs	r3, #0
1001041a:	70e1      	strb	r1, [r4, #3]
1001041c:	490b      	ldr	r1, [pc, #44]	; (1001044c <gattc_att_info_cfm+0x40>)
1001041e:	7025      	strb	r5, [r4, #0]
10010420:	3d0c      	subs	r5, #12
10010422:	7065      	strb	r5, [r4, #1]
10010424:	70a5      	strb	r5, [r4, #2]
10010426:	880d      	ldrh	r5, [r1, #0]
10010428:	8809      	ldrh	r1, [r1, #0]
1001042a:	7220      	strb	r0, [r4, #8]
1001042c:	0a09      	lsrs	r1, r1, #8
1001042e:	0a00      	lsrs	r0, r0, #8
10010430:	7161      	strb	r1, [r4, #5]
10010432:	7260      	strb	r0, [r4, #9]
10010434:	72a2      	strb	r2, [r4, #10]
10010436:	71e3      	strb	r3, [r4, #7]
10010438:	0a12      	lsrs	r2, r2, #8
1001043a:	1c20      	adds	r0, r4, #0
1001043c:	210d      	movs	r1, #13
1001043e:	4b04      	ldr	r3, [pc, #16]	; (10010450 <gattc_att_info_cfm+0x44>)
10010440:	7125      	strb	r5, [r4, #4]
10010442:	72e2      	strb	r2, [r4, #11]
10010444:	4798      	blx	r3
10010446:	bd38      	pop	{r3, r4, r5, pc}
10010448:	10016b3c 	.word	0x10016b3c
1001044c:	100167cc 	.word	0x100167cc
10010450:	1000f09d 	.word	0x1000f09d

10010454 <gattc_send_evt_cmd_handler>:
10010454:	b570      	push	{r4, r5, r6, lr}
10010456:	2610      	movs	r6, #16
10010458:	ac04      	add	r4, sp, #16
1001045a:	8825      	ldrh	r5, [r4, #0]
1001045c:	4c15      	ldr	r4, [pc, #84]	; (100104b4 <gattc_send_evt_cmd_handler+0x60>)
1001045e:	70e2      	strb	r2, [r4, #3]
10010460:	4a15      	ldr	r2, [pc, #84]	; (100104b8 <gattc_send_evt_cmd_handler+0x64>)
10010462:	7026      	strb	r6, [r4, #0]
10010464:	3e04      	subs	r6, #4
10010466:	7066      	strb	r6, [r4, #1]
10010468:	70a6      	strb	r6, [r4, #2]
1001046a:	8816      	ldrh	r6, [r2, #0]
1001046c:	8812      	ldrh	r2, [r2, #0]
1001046e:	7220      	strb	r0, [r4, #8]
10010470:	0a12      	lsrs	r2, r2, #8
10010472:	7162      	strb	r2, [r4, #5]
10010474:	4a11      	ldr	r2, [pc, #68]	; (100104bc <gattc_send_evt_cmd_handler+0x68>)
10010476:	7321      	strb	r1, [r4, #12]
10010478:	8812      	ldrh	r2, [r2, #0]
1001047a:	73a5      	strb	r5, [r4, #14]
1001047c:	3201      	adds	r2, #1
1001047e:	7262      	strb	r2, [r4, #9]
10010480:	1212      	asrs	r2, r2, #8
10010482:	72a2      	strb	r2, [r4, #10]
10010484:	2200      	movs	r2, #0
10010486:	72e2      	strb	r2, [r4, #11]
10010488:	0a0a      	lsrs	r2, r1, #8
1001048a:	7362      	strb	r2, [r4, #13]
1001048c:	0a2a      	lsrs	r2, r5, #8
1001048e:	73e2      	strb	r2, [r4, #15]
10010490:	1c19      	adds	r1, r3, #0
10010492:	1c2a      	adds	r2, r5, #0
10010494:	4b0a      	ldr	r3, [pc, #40]	; (100104c0 <gattc_send_evt_cmd_handler+0x6c>)
10010496:	3510      	adds	r5, #16
10010498:	480a      	ldr	r0, [pc, #40]	; (100104c4 <gattc_send_evt_cmd_handler+0x70>)
1001049a:	7126      	strb	r6, [r4, #4]
1001049c:	4798      	blx	r3
1001049e:	b2a9      	uxth	r1, r5
100104a0:	1c0b      	adds	r3, r1, #0
100104a2:	3b08      	subs	r3, #8
100104a4:	71a3      	strb	r3, [r4, #6]
100104a6:	121b      	asrs	r3, r3, #8
100104a8:	71e3      	strb	r3, [r4, #7]
100104aa:	1c20      	adds	r0, r4, #0
100104ac:	4b06      	ldr	r3, [pc, #24]	; (100104c8 <gattc_send_evt_cmd_handler+0x74>)
100104ae:	4798      	blx	r3
100104b0:	bd70      	pop	{r4, r5, r6, pc}
100104b2:	46c0      	nop			; (mov r8, r8)
100104b4:	10016b3c 	.word	0x10016b3c
100104b8:	100167cc 	.word	0x100167cc
100104bc:	100158f8 	.word	0x100158f8
100104c0:	10011bb7 	.word	0x10011bb7
100104c4:	10016b4c 	.word	0x10016b4c
100104c8:	1000f09d 	.word	0x1000f09d

100104cc <gattc_event_cfm_handler>:
100104cc:	220e      	movs	r2, #14
100104ce:	b508      	push	{r3, lr}
100104d0:	4b0b      	ldr	r3, [pc, #44]	; (10010500 <gattc_event_cfm_handler+0x34>)
100104d2:	701a      	strb	r2, [r3, #0]
100104d4:	3a02      	subs	r2, #2
100104d6:	705a      	strb	r2, [r3, #1]
100104d8:	709a      	strb	r2, [r3, #2]
100104da:	4a0a      	ldr	r2, [pc, #40]	; (10010504 <gattc_event_cfm_handler+0x38>)
100104dc:	70d8      	strb	r0, [r3, #3]
100104de:	8810      	ldrh	r0, [r2, #0]
100104e0:	8812      	ldrh	r2, [r2, #0]
100104e2:	7219      	strb	r1, [r3, #8]
100104e4:	0a12      	lsrs	r2, r2, #8
100104e6:	715a      	strb	r2, [r3, #5]
100104e8:	2202      	movs	r2, #2
100104ea:	719a      	strb	r2, [r3, #6]
100104ec:	2200      	movs	r2, #0
100104ee:	0a09      	lsrs	r1, r1, #8
100104f0:	7118      	strb	r0, [r3, #4]
100104f2:	7259      	strb	r1, [r3, #9]
100104f4:	71da      	strb	r2, [r3, #7]
100104f6:	1c18      	adds	r0, r3, #0
100104f8:	210a      	movs	r1, #10
100104fa:	4b03      	ldr	r3, [pc, #12]	; (10010508 <gattc_event_cfm_handler+0x3c>)
100104fc:	4798      	blx	r3
100104fe:	bd08      	pop	{r3, pc}
10010500:	10016b3c 	.word	0x10016b3c
10010504:	100167cc 	.word	0x100167cc
10010508:	1000f09d 	.word	0x1000f09d

1001050c <gattc_disc_svc_ind_parser>:
1001050c:	b570      	push	{r4, r5, r6, lr}
1001050e:	1c15      	adds	r5, r2, #0
10010510:	0a00      	lsrs	r0, r0, #8
10010512:	8010      	strh	r0, [r2, #0]
10010514:	784b      	ldrb	r3, [r1, #1]
10010516:	780a      	ldrb	r2, [r1, #0]
10010518:	021b      	lsls	r3, r3, #8
1001051a:	4313      	orrs	r3, r2
1001051c:	806b      	strh	r3, [r5, #2]
1001051e:	78cb      	ldrb	r3, [r1, #3]
10010520:	788a      	ldrb	r2, [r1, #2]
10010522:	021b      	lsls	r3, r3, #8
10010524:	4313      	orrs	r3, r2
10010526:	80ab      	strh	r3, [r5, #4]
10010528:	790e      	ldrb	r6, [r1, #4]
1001052a:	4b05      	ldr	r3, [pc, #20]	; (10010540 <gattc_disc_svc_ind_parser+0x34>)
1001052c:	1c30      	adds	r0, r6, #0
1001052e:	1c0c      	adds	r4, r1, #0
10010530:	4798      	blx	r3
10010532:	1c32      	adds	r2, r6, #0
10010534:	71a8      	strb	r0, [r5, #6]
10010536:	1d61      	adds	r1, r4, #5
10010538:	1de8      	adds	r0, r5, #7
1001053a:	4b02      	ldr	r3, [pc, #8]	; (10010544 <gattc_disc_svc_ind_parser+0x38>)
1001053c:	4798      	blx	r3
1001053e:	bd70      	pop	{r4, r5, r6, pc}
10010540:	1000e3dd 	.word	0x1000e3dd
10010544:	10011bb7 	.word	0x10011bb7

10010548 <gattc_disc_svc_incl_ind_parser>:
10010548:	b570      	push	{r4, r5, r6, lr}
1001054a:	1c15      	adds	r5, r2, #0
1001054c:	0a00      	lsrs	r0, r0, #8
1001054e:	8010      	strh	r0, [r2, #0]
10010550:	784b      	ldrb	r3, [r1, #1]
10010552:	780a      	ldrb	r2, [r1, #0]
10010554:	021b      	lsls	r3, r3, #8
10010556:	4313      	orrs	r3, r2
10010558:	806b      	strh	r3, [r5, #2]
1001055a:	78cb      	ldrb	r3, [r1, #3]
1001055c:	788a      	ldrb	r2, [r1, #2]
1001055e:	021b      	lsls	r3, r3, #8
10010560:	4313      	orrs	r3, r2
10010562:	80ab      	strh	r3, [r5, #4]
10010564:	794b      	ldrb	r3, [r1, #5]
10010566:	790a      	ldrb	r2, [r1, #4]
10010568:	021b      	lsls	r3, r3, #8
1001056a:	4313      	orrs	r3, r2
1001056c:	80eb      	strh	r3, [r5, #6]
1001056e:	798e      	ldrb	r6, [r1, #6]
10010570:	4b05      	ldr	r3, [pc, #20]	; (10010588 <gattc_disc_svc_incl_ind_parser+0x40>)
10010572:	1c30      	adds	r0, r6, #0
10010574:	1c0c      	adds	r4, r1, #0
10010576:	4798      	blx	r3
10010578:	7228      	strb	r0, [r5, #8]
1001057a:	1c28      	adds	r0, r5, #0
1001057c:	1c32      	adds	r2, r6, #0
1001057e:	1de1      	adds	r1, r4, #7
10010580:	4b02      	ldr	r3, [pc, #8]	; (1001058c <gattc_disc_svc_incl_ind_parser+0x44>)
10010582:	3009      	adds	r0, #9
10010584:	4798      	blx	r3
10010586:	bd70      	pop	{r4, r5, r6, pc}
10010588:	1000e3dd 	.word	0x1000e3dd
1001058c:	10011bb7 	.word	0x10011bb7

10010590 <gattc_disc_char_ind_parser>:
10010590:	b570      	push	{r4, r5, r6, lr}
10010592:	1c15      	adds	r5, r2, #0
10010594:	0a00      	lsrs	r0, r0, #8
10010596:	8010      	strh	r0, [r2, #0]
10010598:	784b      	ldrb	r3, [r1, #1]
1001059a:	780a      	ldrb	r2, [r1, #0]
1001059c:	021b      	lsls	r3, r3, #8
1001059e:	4313      	orrs	r3, r2
100105a0:	806b      	strh	r3, [r5, #2]
100105a2:	78cb      	ldrb	r3, [r1, #3]
100105a4:	788a      	ldrb	r2, [r1, #2]
100105a6:	021b      	lsls	r3, r3, #8
100105a8:	4313      	orrs	r3, r2
100105aa:	80ab      	strh	r3, [r5, #4]
100105ac:	790b      	ldrb	r3, [r1, #4]
100105ae:	1c0c      	adds	r4, r1, #0
100105b0:	71ab      	strb	r3, [r5, #6]
100105b2:	794e      	ldrb	r6, [r1, #5]
100105b4:	4b05      	ldr	r3, [pc, #20]	; (100105cc <gattc_disc_char_ind_parser+0x3c>)
100105b6:	1c30      	adds	r0, r6, #0
100105b8:	4798      	blx	r3
100105ba:	71e8      	strb	r0, [r5, #7]
100105bc:	1c28      	adds	r0, r5, #0
100105be:	1c32      	adds	r2, r6, #0
100105c0:	1da1      	adds	r1, r4, #6
100105c2:	4b03      	ldr	r3, [pc, #12]	; (100105d0 <gattc_disc_char_ind_parser+0x40>)
100105c4:	3008      	adds	r0, #8
100105c6:	4798      	blx	r3
100105c8:	bd70      	pop	{r4, r5, r6, pc}
100105ca:	46c0      	nop			; (mov r8, r8)
100105cc:	1000e3dd 	.word	0x1000e3dd
100105d0:	10011bb7 	.word	0x10011bb7

100105d4 <gattc_disc_char_desc_ind_parser>:
100105d4:	b570      	push	{r4, r5, r6, lr}
100105d6:	1c15      	adds	r5, r2, #0
100105d8:	0a00      	lsrs	r0, r0, #8
100105da:	8010      	strh	r0, [r2, #0]
100105dc:	784b      	ldrb	r3, [r1, #1]
100105de:	780a      	ldrb	r2, [r1, #0]
100105e0:	021b      	lsls	r3, r3, #8
100105e2:	4313      	orrs	r3, r2
100105e4:	806b      	strh	r3, [r5, #2]
100105e6:	788e      	ldrb	r6, [r1, #2]
100105e8:	4b05      	ldr	r3, [pc, #20]	; (10010600 <gattc_disc_char_desc_ind_parser+0x2c>)
100105ea:	1c30      	adds	r0, r6, #0
100105ec:	1c0c      	adds	r4, r1, #0
100105ee:	4798      	blx	r3
100105f0:	1c32      	adds	r2, r6, #0
100105f2:	7128      	strb	r0, [r5, #4]
100105f4:	1ce1      	adds	r1, r4, #3
100105f6:	1d68      	adds	r0, r5, #5
100105f8:	4b02      	ldr	r3, [pc, #8]	; (10010604 <gattc_disc_char_desc_ind_parser+0x30>)
100105fa:	4798      	blx	r3
100105fc:	bd70      	pop	{r4, r5, r6, pc}
100105fe:	46c0      	nop			; (mov r8, r8)
10010600:	1000e3dd 	.word	0x1000e3dd
10010604:	10011bb7 	.word	0x10011bb7

10010608 <gattc_event_ind_and_notification_parser>:
10010608:	b510      	push	{r4, lr}
1001060a:	780c      	ldrb	r4, [r1, #0]
1001060c:	1c13      	adds	r3, r2, #0
1001060e:	2c12      	cmp	r4, #18
10010610:	d10e      	bne.n	10010630 <gattc_event_ind_and_notification_parser+0x28>
10010612:	0a00      	lsrs	r0, r0, #8
10010614:	8010      	strh	r0, [r2, #0]
10010616:	788a      	ldrb	r2, [r1, #2]
10010618:	709a      	strb	r2, [r3, #2]
1001061a:	7948      	ldrb	r0, [r1, #5]
1001061c:	790c      	ldrb	r4, [r1, #4]
1001061e:	0200      	lsls	r0, r0, #8
10010620:	4320      	orrs	r0, r4
10010622:	8098      	strh	r0, [r3, #4]
10010624:	3106      	adds	r1, #6
10010626:	1d98      	adds	r0, r3, #6
10010628:	4b0b      	ldr	r3, [pc, #44]	; (10010658 <gattc_event_ind_and_notification_parser+0x50>)
1001062a:	4798      	blx	r3
1001062c:	221b      	movs	r2, #27
1001062e:	e010      	b.n	10010652 <gattc_event_ind_and_notification_parser+0x4a>
10010630:	2200      	movs	r2, #0
10010632:	2c13      	cmp	r4, #19
10010634:	d10d      	bne.n	10010652 <gattc_event_ind_and_notification_parser+0x4a>
10010636:	0a00      	lsrs	r0, r0, #8
10010638:	8018      	strh	r0, [r3, #0]
1001063a:	788a      	ldrb	r2, [r1, #2]
1001063c:	709a      	strb	r2, [r3, #2]
1001063e:	7908      	ldrb	r0, [r1, #4]
10010640:	78cc      	ldrb	r4, [r1, #3]
10010642:	0200      	lsls	r0, r0, #8
10010644:	4320      	orrs	r0, r4
10010646:	8098      	strh	r0, [r3, #4]
10010648:	3106      	adds	r1, #6
1001064a:	1d98      	adds	r0, r3, #6
1001064c:	4b02      	ldr	r3, [pc, #8]	; (10010658 <gattc_event_ind_and_notification_parser+0x50>)
1001064e:	4798      	blx	r3
10010650:	221c      	movs	r2, #28
10010652:	1c10      	adds	r0, r2, #0
10010654:	bd10      	pop	{r4, pc}
10010656:	46c0      	nop			; (mov r8, r8)
10010658:	10011bb7 	.word	0x10011bb7

1001065c <gattc_complete_evt_handler>:
1001065c:	b500      	push	{lr}
1001065e:	0a00      	lsrs	r0, r0, #8
10010660:	8010      	strh	r0, [r2, #0]
10010662:	7808      	ldrb	r0, [r1, #0]
10010664:	7090      	strb	r0, [r2, #2]
10010666:	784b      	ldrb	r3, [r1, #1]
10010668:	3801      	subs	r0, #1
1001066a:	70d3      	strb	r3, [r2, #3]
1001066c:	2813      	cmp	r0, #19
1001066e:	d82c      	bhi.n	100106ca <gattc_complete_evt_handler+0x6e>
10010670:	f000 f9dc 	bl	10010a2c <__gnu_thumb1_case_uqi>
10010674:	0a0a0a0c 	.word	0x0a0a0a0c
10010678:	210a0a0a 	.word	0x210a0a0a
1001067c:	111f2121 	.word	0x111f2121
10010680:	2b111111 	.word	0x2b111111
10010684:	2919132b 	.word	0x2919132b
10010688:	2017      	movs	r0, #23
1001068a:	e01f      	b.n	100106cc <gattc_complete_evt_handler+0x70>
1001068c:	2024      	movs	r0, #36	; 0x24
1001068e:	2b00      	cmp	r3, #0
10010690:	d11c      	bne.n	100106cc <gattc_complete_evt_handler+0x70>
10010692:	3017      	adds	r0, #23
10010694:	e01a      	b.n	100106cc <gattc_complete_evt_handler+0x70>
10010696:	2025      	movs	r0, #37	; 0x25
10010698:	e018      	b.n	100106cc <gattc_complete_evt_handler+0x70>
1001069a:	4a0d      	ldr	r2, [pc, #52]	; (100106d0 <gattc_complete_evt_handler+0x74>)
1001069c:	201d      	movs	r0, #29
1001069e:	6813      	ldr	r3, [r2, #0]
100106a0:	3b01      	subs	r3, #1
100106a2:	6013      	str	r3, [r2, #0]
100106a4:	e012      	b.n	100106cc <gattc_complete_evt_handler+0x70>
100106a6:	4a0a      	ldr	r2, [pc, #40]	; (100106d0 <gattc_complete_evt_handler+0x74>)
100106a8:	201e      	movs	r0, #30
100106aa:	6813      	ldr	r3, [r2, #0]
100106ac:	3b01      	subs	r3, #1
100106ae:	6013      	str	r3, [r2, #0]
100106b0:	e00c      	b.n	100106cc <gattc_complete_evt_handler+0x70>
100106b2:	2019      	movs	r0, #25
100106b4:	e00a      	b.n	100106cc <gattc_complete_evt_handler+0x70>
100106b6:	203b      	movs	r0, #59	; 0x3b
100106b8:	2b00      	cmp	r3, #0
100106ba:	d007      	beq.n	100106cc <gattc_complete_evt_handler+0x70>
100106bc:	2182      	movs	r1, #130	; 0x82
100106be:	0089      	lsls	r1, r1, #2
100106c0:	5453      	strb	r3, [r2, r1]
100106c2:	3823      	subs	r0, #35	; 0x23
100106c4:	e002      	b.n	100106cc <gattc_complete_evt_handler+0x70>
100106c6:	2021      	movs	r0, #33	; 0x21
100106c8:	e000      	b.n	100106cc <gattc_complete_evt_handler+0x70>
100106ca:	2000      	movs	r0, #0
100106cc:	bd00      	pop	{pc}
100106ce:	46c0      	nop			; (mov r8, r8)
100106d0:	100158fc 	.word	0x100158fc

100106d4 <gattc_event_mtu_changed_ind_parser>:
100106d4:	0a00      	lsrs	r0, r0, #8
100106d6:	8010      	strh	r0, [r2, #0]
100106d8:	784b      	ldrb	r3, [r1, #1]
100106da:	7809      	ldrb	r1, [r1, #0]
100106dc:	021b      	lsls	r3, r3, #8
100106de:	430b      	orrs	r3, r1
100106e0:	8053      	strh	r3, [r2, #2]
100106e2:	4770      	bx	lr

100106e4 <gattc_read_ind_parser>:
100106e4:	0a00      	lsrs	r0, r0, #8
100106e6:	b508      	push	{r3, lr}
100106e8:	8010      	strh	r0, [r2, #0]
100106ea:	1c13      	adds	r3, r2, #0
100106ec:	2282      	movs	r2, #130	; 0x82
100106ee:	2000      	movs	r0, #0
100106f0:	0092      	lsls	r2, r2, #2
100106f2:	5498      	strb	r0, [r3, r2]
100106f4:	784a      	ldrb	r2, [r1, #1]
100106f6:	7808      	ldrb	r0, [r1, #0]
100106f8:	0212      	lsls	r2, r2, #8
100106fa:	4302      	orrs	r2, r0
100106fc:	805a      	strh	r2, [r3, #2]
100106fe:	78ca      	ldrb	r2, [r1, #3]
10010700:	7888      	ldrb	r0, [r1, #2]
10010702:	0212      	lsls	r2, r2, #8
10010704:	4302      	orrs	r2, r0
10010706:	80da      	strh	r2, [r3, #6]
10010708:	794a      	ldrb	r2, [r1, #5]
1001070a:	7908      	ldrb	r0, [r1, #4]
1001070c:	0212      	lsls	r2, r2, #8
1001070e:	4302      	orrs	r2, r0
10010710:	809a      	strh	r2, [r3, #4]
10010712:	3308      	adds	r3, #8
10010714:	1c18      	adds	r0, r3, #0
10010716:	3106      	adds	r1, #6
10010718:	4b01      	ldr	r3, [pc, #4]	; (10010720 <gattc_read_ind_parser+0x3c>)
1001071a:	4798      	blx	r3
1001071c:	bd08      	pop	{r3, pc}
1001071e:	46c0      	nop			; (mov r8, r8)
10010720:	10011bb7 	.word	0x10011bb7

10010724 <gattc_svc_changed_cfg_ind_parser>:
10010724:	0a00      	lsrs	r0, r0, #8
10010726:	8010      	strh	r0, [r2, #0]
10010728:	784b      	ldrb	r3, [r1, #1]
1001072a:	7809      	ldrb	r1, [r1, #0]
1001072c:	021b      	lsls	r3, r3, #8
1001072e:	430b      	orrs	r3, r1
10010730:	8053      	strh	r3, [r2, #2]
10010732:	4770      	bx	lr

10010734 <init_gattc_task_module>:
10010734:	2300      	movs	r3, #0
10010736:	4a02      	ldr	r2, [pc, #8]	; (10010740 <init_gattc_task_module+0xc>)
10010738:	8013      	strh	r3, [r2, #0]
1001073a:	4a02      	ldr	r2, [pc, #8]	; (10010744 <init_gattc_task_module+0x10>)
1001073c:	8013      	strh	r3, [r2, #0]
1001073e:	4770      	bx	lr
10010740:	100158f6 	.word	0x100158f6
10010744:	100158f8 	.word	0x100158f8

10010748 <gattm_add_svc_req_handler>:
10010748:	2200      	movs	r2, #0
1001074a:	210b      	movs	r1, #11
1001074c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001074e:	1c04      	adds	r4, r0, #0
10010750:	7943      	ldrb	r3, [r0, #5]
10010752:	b085      	sub	sp, #20
10010754:	9301      	str	r3, [sp, #4]
10010756:	ab02      	add	r3, sp, #8
10010758:	71da      	strb	r2, [r3, #7]
1001075a:	4b37      	ldr	r3, [pc, #220]	; (10010838 <gattm_add_svc_req_handler+0xf0>)
1001075c:	7059      	strb	r1, [r3, #1]
1001075e:	7099      	strb	r1, [r3, #2]
10010760:	4936      	ldr	r1, [pc, #216]	; (1001083c <gattm_add_svc_req_handler+0xf4>)
10010762:	701a      	strb	r2, [r3, #0]
10010764:	8808      	ldrh	r0, [r1, #0]
10010766:	8809      	ldrh	r1, [r1, #0]
10010768:	70da      	strb	r2, [r3, #3]
1001076a:	0a09      	lsrs	r1, r1, #8
1001076c:	7118      	strb	r0, [r3, #4]
1001076e:	7159      	strb	r1, [r3, #5]
10010770:	8821      	ldrh	r1, [r4, #0]
10010772:	7219      	strb	r1, [r3, #8]
10010774:	8821      	ldrh	r1, [r4, #0]
10010776:	0a09      	lsrs	r1, r1, #8
10010778:	7259      	strb	r1, [r3, #9]
1001077a:	8861      	ldrh	r1, [r4, #2]
1001077c:	7299      	strb	r1, [r3, #10]
1001077e:	8861      	ldrh	r1, [r4, #2]
10010780:	0a09      	lsrs	r1, r1, #8
10010782:	72d9      	strb	r1, [r3, #11]
10010784:	7921      	ldrb	r1, [r4, #4]
10010786:	7319      	strb	r1, [r3, #12]
10010788:	4669      	mov	r1, sp
1001078a:	7909      	ldrb	r1, [r1, #4]
1001078c:	7359      	strb	r1, [r3, #13]
1001078e:	18a1      	adds	r1, r4, r2
10010790:	7988      	ldrb	r0, [r1, #6]
10010792:	1899      	adds	r1, r3, r2
10010794:	3201      	adds	r2, #1
10010796:	7388      	strb	r0, [r1, #14]
10010798:	2a10      	cmp	r2, #16
1001079a:	d1f8      	bne.n	1001078e <gattm_add_svc_req_handler+0x46>
1001079c:	1c27      	adds	r7, r4, #0
1001079e:	2300      	movs	r3, #0
100107a0:	251e      	movs	r5, #30
100107a2:	3716      	adds	r7, #22
100107a4:	9300      	str	r3, [sp, #0]
100107a6:	9b00      	ldr	r3, [sp, #0]
100107a8:	9a01      	ldr	r2, [sp, #4]
100107aa:	4e23      	ldr	r6, [pc, #140]	; (10010838 <gattm_add_svc_req_handler+0xf0>)
100107ac:	4293      	cmp	r3, r2
100107ae:	da21      	bge.n	100107f4 <gattm_add_svc_req_handler+0xac>
100107b0:	1c39      	adds	r1, r7, #0
100107b2:	1970      	adds	r0, r6, r5
100107b4:	2210      	movs	r2, #16
100107b6:	4b22      	ldr	r3, [pc, #136]	; (10010840 <gattm_add_svc_req_handler+0xf8>)
100107b8:	4798      	blx	r3
100107ba:	1c2b      	adds	r3, r5, #0
100107bc:	8a3a      	ldrh	r2, [r7, #16]
100107be:	3310      	adds	r3, #16
100107c0:	b29b      	uxth	r3, r3
100107c2:	54f2      	strb	r2, [r6, r3]
100107c4:	1c2b      	adds	r3, r5, #0
100107c6:	8a3a      	ldrh	r2, [r7, #16]
100107c8:	3311      	adds	r3, #17
100107ca:	b29b      	uxth	r3, r3
100107cc:	0a12      	lsrs	r2, r2, #8
100107ce:	54f2      	strb	r2, [r6, r3]
100107d0:	1c2a      	adds	r2, r5, #0
100107d2:	1c2b      	adds	r3, r5, #0
100107d4:	8a79      	ldrh	r1, [r7, #18]
100107d6:	3212      	adds	r2, #18
100107d8:	b292      	uxth	r2, r2
100107da:	54b1      	strb	r1, [r6, r2]
100107dc:	8a7a      	ldrh	r2, [r7, #18]
100107de:	3313      	adds	r3, #19
100107e0:	b29b      	uxth	r3, r3
100107e2:	0a12      	lsrs	r2, r2, #8
100107e4:	54f2      	strb	r2, [r6, r3]
100107e6:	9b00      	ldr	r3, [sp, #0]
100107e8:	3514      	adds	r5, #20
100107ea:	3301      	adds	r3, #1
100107ec:	b2ad      	uxth	r5, r5
100107ee:	9300      	str	r3, [sp, #0]
100107f0:	3714      	adds	r7, #20
100107f2:	e7d8      	b.n	100107a6 <gattm_add_svc_req_handler+0x5e>
100107f4:	2114      	movs	r1, #20
100107f6:	4d13      	ldr	r5, [pc, #76]	; (10010844 <gattm_add_svc_req_handler+0xfc>)
100107f8:	4b13      	ldr	r3, [pc, #76]	; (10010848 <gattm_add_svc_req_handler+0x100>)
100107fa:	4351      	muls	r1, r2
100107fc:	802b      	strh	r3, [r5, #0]
100107fe:	230b      	movs	r3, #11
10010800:	311e      	adds	r1, #30
10010802:	80ab      	strh	r3, [r5, #4]
10010804:	1c0b      	adds	r3, r1, #0
10010806:	3b08      	subs	r3, #8
10010808:	71b3      	strb	r3, [r6, #6]
1001080a:	121b      	asrs	r3, r3, #8
1001080c:	71f3      	strb	r3, [r6, #7]
1001080e:	1c30      	adds	r0, r6, #0
10010810:	4b0e      	ldr	r3, [pc, #56]	; (1001084c <gattm_add_svc_req_handler+0x104>)
10010812:	4798      	blx	r3
10010814:	ab02      	add	r3, sp, #8
10010816:	1dde      	adds	r6, r3, #7
10010818:	1c30      	adds	r0, r6, #0
1001081a:	4b0d      	ldr	r3, [pc, #52]	; (10010850 <gattm_add_svc_req_handler+0x108>)
1001081c:	4798      	blx	r3
1001081e:	7833      	ldrb	r3, [r6, #0]
10010820:	20e2      	movs	r0, #226	; 0xe2
10010822:	2b00      	cmp	r3, #0
10010824:	d106      	bne.n	10010834 <gattm_add_svc_req_handler+0xec>
10010826:	68aa      	ldr	r2, [r5, #8]
10010828:	7853      	ldrb	r3, [r2, #1]
1001082a:	7811      	ldrb	r1, [r2, #0]
1001082c:	021b      	lsls	r3, r3, #8
1001082e:	430b      	orrs	r3, r1
10010830:	8023      	strh	r3, [r4, #0]
10010832:	7890      	ldrb	r0, [r2, #2]
10010834:	b005      	add	sp, #20
10010836:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010838:	10016b3c 	.word	0x10016b3c
1001083c:	100167cc 	.word	0x100167cc
10010840:	10011bb7 	.word	0x10011bb7
10010844:	100167c0 	.word	0x100167c0
10010848:	00000b01 	.word	0x00000b01
1001084c:	1000f09d 	.word	0x1000f09d
10010850:	1000f101 	.word	0x1000f101

10010854 <gattm_add_attribute_req_handler>:
10010854:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010856:	1c1f      	adds	r7, r3, #0
10010858:	4b16      	ldr	r3, [pc, #88]	; (100108b4 <gattm_add_attribute_req_handler+0x60>)
1001085a:	9100      	str	r1, [sp, #0]
1001085c:	9201      	str	r2, [sp, #4]
1001085e:	1c05      	adds	r5, r0, #0
10010860:	7946      	ldrb	r6, [r0, #5]
10010862:	6818      	ldr	r0, [r3, #0]
10010864:	2114      	movs	r1, #20
10010866:	4b14      	ldr	r3, [pc, #80]	; (100108b8 <gattm_add_attribute_req_handler+0x64>)
10010868:	382a      	subs	r0, #42	; 0x2a
1001086a:	4798      	blx	r3
1001086c:	2311      	movs	r3, #17
1001086e:	4286      	cmp	r6, r0
10010870:	d21e      	bcs.n	100108b0 <gattm_add_attribute_req_handler+0x5c>
10010872:	2414      	movs	r4, #20
10010874:	4366      	muls	r6, r4
10010876:	19a8      	adds	r0, r5, r6
10010878:	2100      	movs	r1, #0
1001087a:	2210      	movs	r2, #16
1001087c:	4b0f      	ldr	r3, [pc, #60]	; (100108bc <gattm_add_attribute_req_handler+0x68>)
1001087e:	3016      	adds	r0, #22
10010880:	4798      	blx	r3
10010882:	7968      	ldrb	r0, [r5, #5]
10010884:	1c3a      	adds	r2, r7, #0
10010886:	4360      	muls	r0, r4
10010888:	1828      	adds	r0, r5, r0
1001088a:	4b0d      	ldr	r3, [pc, #52]	; (100108c0 <gattm_add_attribute_req_handler+0x6c>)
1001088c:	3016      	adds	r0, #22
1001088e:	9908      	ldr	r1, [sp, #32]
10010890:	4798      	blx	r3
10010892:	466a      	mov	r2, sp
10010894:	796b      	ldrb	r3, [r5, #5]
10010896:	8812      	ldrh	r2, [r2, #0]
10010898:	435c      	muls	r4, r3
1001089a:	192c      	adds	r4, r5, r4
1001089c:	8522      	strh	r2, [r4, #40]	; 0x28
1001089e:	466a      	mov	r2, sp
100108a0:	8892      	ldrh	r2, [r2, #4]
100108a2:	84e2      	strh	r2, [r4, #38]	; 0x26
100108a4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100108a6:	8013      	strh	r3, [r2, #0]
100108a8:	796b      	ldrb	r3, [r5, #5]
100108aa:	3301      	adds	r3, #1
100108ac:	716b      	strb	r3, [r5, #5]
100108ae:	2300      	movs	r3, #0
100108b0:	1c18      	adds	r0, r3, #0
100108b2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100108b4:	1001586c 	.word	0x1001586c
100108b8:	10010a41 	.word	0x10010a41
100108bc:	10011bc9 	.word	0x10011bc9
100108c0:	10011bb7 	.word	0x10011bb7

100108c4 <gattm_att_set_value_req_handler>:
100108c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100108c6:	466b      	mov	r3, sp
100108c8:	1dde      	adds	r6, r3, #7
100108ca:	2300      	movs	r3, #0
100108cc:	1c0d      	adds	r5, r1, #0
100108ce:	210c      	movs	r1, #12
100108d0:	270b      	movs	r7, #11
100108d2:	4c17      	ldr	r4, [pc, #92]	; (10010930 <gattm_att_set_value_req_handler+0x6c>)
100108d4:	7033      	strb	r3, [r6, #0]
100108d6:	70e3      	strb	r3, [r4, #3]
100108d8:	4b16      	ldr	r3, [pc, #88]	; (10010934 <gattm_att_set_value_req_handler+0x70>)
100108da:	7021      	strb	r1, [r4, #0]
100108dc:	8819      	ldrh	r1, [r3, #0]
100108de:	881b      	ldrh	r3, [r3, #0]
100108e0:	7220      	strb	r0, [r4, #8]
100108e2:	0a1b      	lsrs	r3, r3, #8
100108e4:	7163      	strb	r3, [r4, #5]
100108e6:	0a00      	lsrs	r0, r0, #8
100108e8:	0a2b      	lsrs	r3, r5, #8
100108ea:	7121      	strb	r1, [r4, #4]
100108ec:	7260      	strb	r0, [r4, #9]
100108ee:	1c11      	adds	r1, r2, #0
100108f0:	72a5      	strb	r5, [r4, #10]
100108f2:	1c2a      	adds	r2, r5, #0
100108f4:	72e3      	strb	r3, [r4, #11]
100108f6:	350c      	adds	r5, #12
100108f8:	4b0f      	ldr	r3, [pc, #60]	; (10010938 <gattm_att_set_value_req_handler+0x74>)
100108fa:	4810      	ldr	r0, [pc, #64]	; (1001093c <gattm_att_set_value_req_handler+0x78>)
100108fc:	7067      	strb	r7, [r4, #1]
100108fe:	70a7      	strb	r7, [r4, #2]
10010900:	4798      	blx	r3
10010902:	b2a9      	uxth	r1, r5
10010904:	4b0e      	ldr	r3, [pc, #56]	; (10010940 <gattm_att_set_value_req_handler+0x7c>)
10010906:	4d0f      	ldr	r5, [pc, #60]	; (10010944 <gattm_att_set_value_req_handler+0x80>)
10010908:	1c20      	adds	r0, r4, #0
1001090a:	802b      	strh	r3, [r5, #0]
1001090c:	1c0b      	adds	r3, r1, #0
1001090e:	3b08      	subs	r3, #8
10010910:	71a3      	strb	r3, [r4, #6]
10010912:	121b      	asrs	r3, r3, #8
10010914:	71e3      	strb	r3, [r4, #7]
10010916:	4b0c      	ldr	r3, [pc, #48]	; (10010948 <gattm_att_set_value_req_handler+0x84>)
10010918:	80af      	strh	r7, [r5, #4]
1001091a:	4798      	blx	r3
1001091c:	1c30      	adds	r0, r6, #0
1001091e:	4b0b      	ldr	r3, [pc, #44]	; (1001094c <gattm_att_set_value_req_handler+0x88>)
10010920:	4798      	blx	r3
10010922:	7833      	ldrb	r3, [r6, #0]
10010924:	20e2      	movs	r0, #226	; 0xe2
10010926:	2b00      	cmp	r3, #0
10010928:	d101      	bne.n	1001092e <gattm_att_set_value_req_handler+0x6a>
1001092a:	68ab      	ldr	r3, [r5, #8]
1001092c:	7898      	ldrb	r0, [r3, #2]
1001092e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010930:	10016b3c 	.word	0x10016b3c
10010934:	100167cc 	.word	0x100167cc
10010938:	10011bb7 	.word	0x10011bb7
1001093c:	10016b48 	.word	0x10016b48
10010940:	00000b0d 	.word	0x00000b0d
10010944:	100167c0 	.word	0x100167c0
10010948:	1000f09d 	.word	0x1000f09d
1001094c:	1000f101 	.word	0x1000f101

10010950 <gattm_att_get_value_req_handler>:
10010950:	b5f0      	push	{r4, r5, r6, r7, lr}
10010952:	b085      	sub	sp, #20
10010954:	9201      	str	r2, [sp, #4]
10010956:	220a      	movs	r2, #10
10010958:	1c04      	adds	r4, r0, #0
1001095a:	481d      	ldr	r0, [pc, #116]	; (100109d0 <gattm_att_get_value_req_handler+0x80>)
1001095c:	ab02      	add	r3, sp, #8
1001095e:	1dde      	adds	r6, r3, #7
10010960:	7002      	strb	r2, [r0, #0]
10010962:	2300      	movs	r3, #0
10010964:	220b      	movs	r2, #11
10010966:	4d1b      	ldr	r5, [pc, #108]	; (100109d4 <gattm_att_get_value_req_handler+0x84>)
10010968:	1c0f      	adds	r7, r1, #0
1001096a:	8829      	ldrh	r1, [r5, #0]
1001096c:	882d      	ldrh	r5, [r5, #0]
1001096e:	7101      	strb	r1, [r0, #4]
10010970:	0a2d      	lsrs	r5, r5, #8
10010972:	7145      	strb	r5, [r0, #5]
10010974:	0a25      	lsrs	r5, r4, #8
10010976:	7245      	strb	r5, [r0, #9]
10010978:	4917      	ldr	r1, [pc, #92]	; (100109d8 <gattm_att_get_value_req_handler+0x88>)
1001097a:	4d18      	ldr	r5, [pc, #96]	; (100109dc <gattm_att_get_value_req_handler+0x8c>)
1001097c:	7033      	strb	r3, [r6, #0]
1001097e:	7042      	strb	r2, [r0, #1]
10010980:	7082      	strb	r2, [r0, #2]
10010982:	70c3      	strb	r3, [r0, #3]
10010984:	8029      	strh	r1, [r5, #0]
10010986:	80aa      	strh	r2, [r5, #4]
10010988:	71c3      	strb	r3, [r0, #7]
1001098a:	3a09      	subs	r2, #9
1001098c:	210a      	movs	r1, #10
1001098e:	4b14      	ldr	r3, [pc, #80]	; (100109e0 <gattm_att_get_value_req_handler+0x90>)
10010990:	7182      	strb	r2, [r0, #6]
10010992:	7204      	strb	r4, [r0, #8]
10010994:	4798      	blx	r3
10010996:	1c30      	adds	r0, r6, #0
10010998:	4b12      	ldr	r3, [pc, #72]	; (100109e4 <gattm_att_get_value_req_handler+0x94>)
1001099a:	4798      	blx	r3
1001099c:	7833      	ldrb	r3, [r6, #0]
1001099e:	20e2      	movs	r0, #226	; 0xe2
100109a0:	2b00      	cmp	r3, #0
100109a2:	d112      	bne.n	100109ca <gattm_att_get_value_req_handler+0x7a>
100109a4:	68a9      	ldr	r1, [r5, #8]
100109a6:	9801      	ldr	r0, [sp, #4]
100109a8:	784d      	ldrb	r5, [r1, #1]
100109aa:	780b      	ldrb	r3, [r1, #0]
100109ac:	78ca      	ldrb	r2, [r1, #3]
100109ae:	022d      	lsls	r5, r5, #8
100109b0:	431d      	orrs	r5, r3
100109b2:	788b      	ldrb	r3, [r1, #2]
100109b4:	0212      	lsls	r2, r2, #8
100109b6:	431a      	orrs	r2, r3
100109b8:	803a      	strh	r2, [r7, #0]
100109ba:	790e      	ldrb	r6, [r1, #4]
100109bc:	4b0a      	ldr	r3, [pc, #40]	; (100109e8 <gattm_att_get_value_req_handler+0x98>)
100109be:	3105      	adds	r1, #5
100109c0:	4798      	blx	r3
100109c2:	20e2      	movs	r0, #226	; 0xe2
100109c4:	42ac      	cmp	r4, r5
100109c6:	d100      	bne.n	100109ca <gattm_att_get_value_req_handler+0x7a>
100109c8:	1c30      	adds	r0, r6, #0
100109ca:	b005      	add	sp, #20
100109cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100109ce:	46c0      	nop			; (mov r8, r8)
100109d0:	10016b3c 	.word	0x10016b3c
100109d4:	100167cc 	.word	0x100167cc
100109d8:	00000b0b 	.word	0x00000b0b
100109dc:	100167c0 	.word	0x100167c0
100109e0:	1000f09d 	.word	0x1000f09d
100109e4:	1000f101 	.word	0x1000f101
100109e8:	10011bb7 	.word	0x10011bb7

100109ec <htpt_enable_rsp_handler>:
100109ec:	780b      	ldrb	r3, [r1, #0]
100109ee:	7013      	strb	r3, [r2, #0]
100109f0:	784b      	ldrb	r3, [r1, #1]
100109f2:	7053      	strb	r3, [r2, #1]
100109f4:	4770      	bx	lr

100109f6 <htpt_temp_send_rsp_handler>:
100109f6:	780b      	ldrb	r3, [r1, #0]
100109f8:	7013      	strb	r3, [r2, #0]
100109fa:	4770      	bx	lr

100109fc <htpt_meas_intv_upd_rsp_handler>:
100109fc:	780b      	ldrb	r3, [r1, #0]
100109fe:	7013      	strb	r3, [r2, #0]
10010a00:	4770      	bx	lr

10010a02 <htpt_meas_intv_chg_req_ind_handler>:
10010a02:	78cb      	ldrb	r3, [r1, #3]
10010a04:	7889      	ldrb	r1, [r1, #2]
10010a06:	021b      	lsls	r3, r3, #8
10010a08:	430b      	orrs	r3, r1
10010a0a:	8013      	strh	r3, [r2, #0]
10010a0c:	4770      	bx	lr

10010a0e <htpt_cfg_indntf_ind_handler>:
10010a0e:	780b      	ldrb	r3, [r1, #0]
10010a10:	7013      	strb	r3, [r2, #0]
10010a12:	784b      	ldrb	r3, [r1, #1]
10010a14:	7053      	strb	r3, [r2, #1]
10010a16:	4770      	bx	lr

10010a18 <__gnu_thumb1_case_sqi>:
10010a18:	b402      	push	{r1}
10010a1a:	4671      	mov	r1, lr
10010a1c:	0849      	lsrs	r1, r1, #1
10010a1e:	0049      	lsls	r1, r1, #1
10010a20:	5609      	ldrsb	r1, [r1, r0]
10010a22:	0049      	lsls	r1, r1, #1
10010a24:	448e      	add	lr, r1
10010a26:	bc02      	pop	{r1}
10010a28:	4770      	bx	lr
10010a2a:	46c0      	nop			; (mov r8, r8)

10010a2c <__gnu_thumb1_case_uqi>:
10010a2c:	b402      	push	{r1}
10010a2e:	4671      	mov	r1, lr
10010a30:	0849      	lsrs	r1, r1, #1
10010a32:	0049      	lsls	r1, r1, #1
10010a34:	5c09      	ldrb	r1, [r1, r0]
10010a36:	0049      	lsls	r1, r1, #1
10010a38:	448e      	add	lr, r1
10010a3a:	bc02      	pop	{r1}
10010a3c:	4770      	bx	lr
10010a3e:	46c0      	nop			; (mov r8, r8)

10010a40 <__aeabi_uidiv>:
10010a40:	2200      	movs	r2, #0
10010a42:	0843      	lsrs	r3, r0, #1
10010a44:	428b      	cmp	r3, r1
10010a46:	d374      	bcc.n	10010b32 <__aeabi_uidiv+0xf2>
10010a48:	0903      	lsrs	r3, r0, #4
10010a4a:	428b      	cmp	r3, r1
10010a4c:	d35f      	bcc.n	10010b0e <__aeabi_uidiv+0xce>
10010a4e:	0a03      	lsrs	r3, r0, #8
10010a50:	428b      	cmp	r3, r1
10010a52:	d344      	bcc.n	10010ade <__aeabi_uidiv+0x9e>
10010a54:	0b03      	lsrs	r3, r0, #12
10010a56:	428b      	cmp	r3, r1
10010a58:	d328      	bcc.n	10010aac <__aeabi_uidiv+0x6c>
10010a5a:	0c03      	lsrs	r3, r0, #16
10010a5c:	428b      	cmp	r3, r1
10010a5e:	d30d      	bcc.n	10010a7c <__aeabi_uidiv+0x3c>
10010a60:	22ff      	movs	r2, #255	; 0xff
10010a62:	0209      	lsls	r1, r1, #8
10010a64:	ba12      	rev	r2, r2
10010a66:	0c03      	lsrs	r3, r0, #16
10010a68:	428b      	cmp	r3, r1
10010a6a:	d302      	bcc.n	10010a72 <__aeabi_uidiv+0x32>
10010a6c:	1212      	asrs	r2, r2, #8
10010a6e:	0209      	lsls	r1, r1, #8
10010a70:	d065      	beq.n	10010b3e <__aeabi_uidiv+0xfe>
10010a72:	0b03      	lsrs	r3, r0, #12
10010a74:	428b      	cmp	r3, r1
10010a76:	d319      	bcc.n	10010aac <__aeabi_uidiv+0x6c>
10010a78:	e000      	b.n	10010a7c <__aeabi_uidiv+0x3c>
10010a7a:	0a09      	lsrs	r1, r1, #8
10010a7c:	0bc3      	lsrs	r3, r0, #15
10010a7e:	428b      	cmp	r3, r1
10010a80:	d301      	bcc.n	10010a86 <__aeabi_uidiv+0x46>
10010a82:	03cb      	lsls	r3, r1, #15
10010a84:	1ac0      	subs	r0, r0, r3
10010a86:	4152      	adcs	r2, r2
10010a88:	0b83      	lsrs	r3, r0, #14
10010a8a:	428b      	cmp	r3, r1
10010a8c:	d301      	bcc.n	10010a92 <__aeabi_uidiv+0x52>
10010a8e:	038b      	lsls	r3, r1, #14
10010a90:	1ac0      	subs	r0, r0, r3
10010a92:	4152      	adcs	r2, r2
10010a94:	0b43      	lsrs	r3, r0, #13
10010a96:	428b      	cmp	r3, r1
10010a98:	d301      	bcc.n	10010a9e <__aeabi_uidiv+0x5e>
10010a9a:	034b      	lsls	r3, r1, #13
10010a9c:	1ac0      	subs	r0, r0, r3
10010a9e:	4152      	adcs	r2, r2
10010aa0:	0b03      	lsrs	r3, r0, #12
10010aa2:	428b      	cmp	r3, r1
10010aa4:	d301      	bcc.n	10010aaa <__aeabi_uidiv+0x6a>
10010aa6:	030b      	lsls	r3, r1, #12
10010aa8:	1ac0      	subs	r0, r0, r3
10010aaa:	4152      	adcs	r2, r2
10010aac:	0ac3      	lsrs	r3, r0, #11
10010aae:	428b      	cmp	r3, r1
10010ab0:	d301      	bcc.n	10010ab6 <__aeabi_uidiv+0x76>
10010ab2:	02cb      	lsls	r3, r1, #11
10010ab4:	1ac0      	subs	r0, r0, r3
10010ab6:	4152      	adcs	r2, r2
10010ab8:	0a83      	lsrs	r3, r0, #10
10010aba:	428b      	cmp	r3, r1
10010abc:	d301      	bcc.n	10010ac2 <__aeabi_uidiv+0x82>
10010abe:	028b      	lsls	r3, r1, #10
10010ac0:	1ac0      	subs	r0, r0, r3
10010ac2:	4152      	adcs	r2, r2
10010ac4:	0a43      	lsrs	r3, r0, #9
10010ac6:	428b      	cmp	r3, r1
10010ac8:	d301      	bcc.n	10010ace <__aeabi_uidiv+0x8e>
10010aca:	024b      	lsls	r3, r1, #9
10010acc:	1ac0      	subs	r0, r0, r3
10010ace:	4152      	adcs	r2, r2
10010ad0:	0a03      	lsrs	r3, r0, #8
10010ad2:	428b      	cmp	r3, r1
10010ad4:	d301      	bcc.n	10010ada <__aeabi_uidiv+0x9a>
10010ad6:	020b      	lsls	r3, r1, #8
10010ad8:	1ac0      	subs	r0, r0, r3
10010ada:	4152      	adcs	r2, r2
10010adc:	d2cd      	bcs.n	10010a7a <__aeabi_uidiv+0x3a>
10010ade:	09c3      	lsrs	r3, r0, #7
10010ae0:	428b      	cmp	r3, r1
10010ae2:	d301      	bcc.n	10010ae8 <__aeabi_uidiv+0xa8>
10010ae4:	01cb      	lsls	r3, r1, #7
10010ae6:	1ac0      	subs	r0, r0, r3
10010ae8:	4152      	adcs	r2, r2
10010aea:	0983      	lsrs	r3, r0, #6
10010aec:	428b      	cmp	r3, r1
10010aee:	d301      	bcc.n	10010af4 <__aeabi_uidiv+0xb4>
10010af0:	018b      	lsls	r3, r1, #6
10010af2:	1ac0      	subs	r0, r0, r3
10010af4:	4152      	adcs	r2, r2
10010af6:	0943      	lsrs	r3, r0, #5
10010af8:	428b      	cmp	r3, r1
10010afa:	d301      	bcc.n	10010b00 <__aeabi_uidiv+0xc0>
10010afc:	014b      	lsls	r3, r1, #5
10010afe:	1ac0      	subs	r0, r0, r3
10010b00:	4152      	adcs	r2, r2
10010b02:	0903      	lsrs	r3, r0, #4
10010b04:	428b      	cmp	r3, r1
10010b06:	d301      	bcc.n	10010b0c <__aeabi_uidiv+0xcc>
10010b08:	010b      	lsls	r3, r1, #4
10010b0a:	1ac0      	subs	r0, r0, r3
10010b0c:	4152      	adcs	r2, r2
10010b0e:	08c3      	lsrs	r3, r0, #3
10010b10:	428b      	cmp	r3, r1
10010b12:	d301      	bcc.n	10010b18 <__aeabi_uidiv+0xd8>
10010b14:	00cb      	lsls	r3, r1, #3
10010b16:	1ac0      	subs	r0, r0, r3
10010b18:	4152      	adcs	r2, r2
10010b1a:	0883      	lsrs	r3, r0, #2
10010b1c:	428b      	cmp	r3, r1
10010b1e:	d301      	bcc.n	10010b24 <__aeabi_uidiv+0xe4>
10010b20:	008b      	lsls	r3, r1, #2
10010b22:	1ac0      	subs	r0, r0, r3
10010b24:	4152      	adcs	r2, r2
10010b26:	0843      	lsrs	r3, r0, #1
10010b28:	428b      	cmp	r3, r1
10010b2a:	d301      	bcc.n	10010b30 <__aeabi_uidiv+0xf0>
10010b2c:	004b      	lsls	r3, r1, #1
10010b2e:	1ac0      	subs	r0, r0, r3
10010b30:	4152      	adcs	r2, r2
10010b32:	1a41      	subs	r1, r0, r1
10010b34:	d200      	bcs.n	10010b38 <__aeabi_uidiv+0xf8>
10010b36:	4601      	mov	r1, r0
10010b38:	4152      	adcs	r2, r2
10010b3a:	4610      	mov	r0, r2
10010b3c:	4770      	bx	lr
10010b3e:	e7ff      	b.n	10010b40 <__aeabi_uidiv+0x100>
10010b40:	b501      	push	{r0, lr}
10010b42:	2000      	movs	r0, #0
10010b44:	f000 f806 	bl	10010b54 <__aeabi_idiv0>
10010b48:	bd02      	pop	{r1, pc}
10010b4a:	46c0      	nop			; (mov r8, r8)

10010b4c <__aeabi_uidivmod>:
10010b4c:	2900      	cmp	r1, #0
10010b4e:	d0f7      	beq.n	10010b40 <__aeabi_uidiv+0x100>
10010b50:	e776      	b.n	10010a40 <__aeabi_uidiv>
10010b52:	4770      	bx	lr

10010b54 <__aeabi_idiv0>:
10010b54:	4770      	bx	lr
10010b56:	46c0      	nop			; (mov r8, r8)

10010b58 <__aeabi_cdrcmple>:
10010b58:	4684      	mov	ip, r0
10010b5a:	1c10      	adds	r0, r2, #0
10010b5c:	4662      	mov	r2, ip
10010b5e:	468c      	mov	ip, r1
10010b60:	1c19      	adds	r1, r3, #0
10010b62:	4663      	mov	r3, ip
10010b64:	e000      	b.n	10010b68 <__aeabi_cdcmpeq>
10010b66:	46c0      	nop			; (mov r8, r8)

10010b68 <__aeabi_cdcmpeq>:
10010b68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10010b6a:	f000 f921 	bl	10010db0 <__ledf2>
10010b6e:	2800      	cmp	r0, #0
10010b70:	d401      	bmi.n	10010b76 <__aeabi_cdcmpeq+0xe>
10010b72:	2100      	movs	r1, #0
10010b74:	42c8      	cmn	r0, r1
10010b76:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10010b78 <__aeabi_dcmpeq>:
10010b78:	b510      	push	{r4, lr}
10010b7a:	f000 f875 	bl	10010c68 <__eqdf2>
10010b7e:	4240      	negs	r0, r0
10010b80:	3001      	adds	r0, #1
10010b82:	bd10      	pop	{r4, pc}

10010b84 <__aeabi_dcmplt>:
10010b84:	b510      	push	{r4, lr}
10010b86:	f000 f913 	bl	10010db0 <__ledf2>
10010b8a:	2800      	cmp	r0, #0
10010b8c:	db01      	blt.n	10010b92 <__aeabi_dcmplt+0xe>
10010b8e:	2000      	movs	r0, #0
10010b90:	bd10      	pop	{r4, pc}
10010b92:	2001      	movs	r0, #1
10010b94:	bd10      	pop	{r4, pc}
10010b96:	46c0      	nop			; (mov r8, r8)

10010b98 <__aeabi_dcmple>:
10010b98:	b510      	push	{r4, lr}
10010b9a:	f000 f909 	bl	10010db0 <__ledf2>
10010b9e:	2800      	cmp	r0, #0
10010ba0:	dd01      	ble.n	10010ba6 <__aeabi_dcmple+0xe>
10010ba2:	2000      	movs	r0, #0
10010ba4:	bd10      	pop	{r4, pc}
10010ba6:	2001      	movs	r0, #1
10010ba8:	bd10      	pop	{r4, pc}
10010baa:	46c0      	nop			; (mov r8, r8)

10010bac <__aeabi_dcmpgt>:
10010bac:	b510      	push	{r4, lr}
10010bae:	f000 f89b 	bl	10010ce8 <__gedf2>
10010bb2:	2800      	cmp	r0, #0
10010bb4:	dc01      	bgt.n	10010bba <__aeabi_dcmpgt+0xe>
10010bb6:	2000      	movs	r0, #0
10010bb8:	bd10      	pop	{r4, pc}
10010bba:	2001      	movs	r0, #1
10010bbc:	bd10      	pop	{r4, pc}
10010bbe:	46c0      	nop			; (mov r8, r8)

10010bc0 <__aeabi_dcmpge>:
10010bc0:	b510      	push	{r4, lr}
10010bc2:	f000 f891 	bl	10010ce8 <__gedf2>
10010bc6:	2800      	cmp	r0, #0
10010bc8:	da01      	bge.n	10010bce <__aeabi_dcmpge+0xe>
10010bca:	2000      	movs	r0, #0
10010bcc:	bd10      	pop	{r4, pc}
10010bce:	2001      	movs	r0, #1
10010bd0:	bd10      	pop	{r4, pc}
10010bd2:	46c0      	nop			; (mov r8, r8)

10010bd4 <__aeabi_lmul>:
10010bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010bd6:	464f      	mov	r7, r9
10010bd8:	4646      	mov	r6, r8
10010bda:	b4c0      	push	{r6, r7}
10010bdc:	0416      	lsls	r6, r2, #16
10010bde:	0c36      	lsrs	r6, r6, #16
10010be0:	4699      	mov	r9, r3
10010be2:	0033      	movs	r3, r6
10010be4:	0405      	lsls	r5, r0, #16
10010be6:	0c2c      	lsrs	r4, r5, #16
10010be8:	0c07      	lsrs	r7, r0, #16
10010bea:	0c15      	lsrs	r5, r2, #16
10010bec:	4363      	muls	r3, r4
10010bee:	437e      	muls	r6, r7
10010bf0:	436f      	muls	r7, r5
10010bf2:	4365      	muls	r5, r4
10010bf4:	0c1c      	lsrs	r4, r3, #16
10010bf6:	19ad      	adds	r5, r5, r6
10010bf8:	1964      	adds	r4, r4, r5
10010bfa:	469c      	mov	ip, r3
10010bfc:	42a6      	cmp	r6, r4
10010bfe:	d903      	bls.n	10010c08 <__aeabi_lmul+0x34>
10010c00:	2380      	movs	r3, #128	; 0x80
10010c02:	025b      	lsls	r3, r3, #9
10010c04:	4698      	mov	r8, r3
10010c06:	4447      	add	r7, r8
10010c08:	4663      	mov	r3, ip
10010c0a:	0c25      	lsrs	r5, r4, #16
10010c0c:	19ef      	adds	r7, r5, r7
10010c0e:	041d      	lsls	r5, r3, #16
10010c10:	464b      	mov	r3, r9
10010c12:	434a      	muls	r2, r1
10010c14:	4343      	muls	r3, r0
10010c16:	0c2d      	lsrs	r5, r5, #16
10010c18:	0424      	lsls	r4, r4, #16
10010c1a:	1964      	adds	r4, r4, r5
10010c1c:	1899      	adds	r1, r3, r2
10010c1e:	19c9      	adds	r1, r1, r7
10010c20:	0020      	movs	r0, r4
10010c22:	bc0c      	pop	{r2, r3}
10010c24:	4690      	mov	r8, r2
10010c26:	4699      	mov	r9, r3
10010c28:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c2a:	46c0      	nop			; (mov r8, r8)

10010c2c <__aeabi_d2uiz>:
10010c2c:	b570      	push	{r4, r5, r6, lr}
10010c2e:	2200      	movs	r2, #0
10010c30:	4b0c      	ldr	r3, [pc, #48]	; (10010c64 <__aeabi_d2uiz+0x38>)
10010c32:	0004      	movs	r4, r0
10010c34:	000d      	movs	r5, r1
10010c36:	f7ff ffc3 	bl	10010bc0 <__aeabi_dcmpge>
10010c3a:	2800      	cmp	r0, #0
10010c3c:	d104      	bne.n	10010c48 <__aeabi_d2uiz+0x1c>
10010c3e:	0020      	movs	r0, r4
10010c40:	0029      	movs	r1, r5
10010c42:	f000 feed 	bl	10011a20 <__aeabi_d2iz>
10010c46:	bd70      	pop	{r4, r5, r6, pc}
10010c48:	4b06      	ldr	r3, [pc, #24]	; (10010c64 <__aeabi_d2uiz+0x38>)
10010c4a:	2200      	movs	r2, #0
10010c4c:	0020      	movs	r0, r4
10010c4e:	0029      	movs	r1, r5
10010c50:	f000 fb92 	bl	10011378 <__aeabi_dsub>
10010c54:	f000 fee4 	bl	10011a20 <__aeabi_d2iz>
10010c58:	2380      	movs	r3, #128	; 0x80
10010c5a:	061b      	lsls	r3, r3, #24
10010c5c:	469c      	mov	ip, r3
10010c5e:	4460      	add	r0, ip
10010c60:	e7f1      	b.n	10010c46 <__aeabi_d2uiz+0x1a>
10010c62:	46c0      	nop			; (mov r8, r8)
10010c64:	41e00000 	.word	0x41e00000

10010c68 <__eqdf2>:
10010c68:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c6a:	465f      	mov	r7, fp
10010c6c:	4656      	mov	r6, sl
10010c6e:	464d      	mov	r5, r9
10010c70:	4644      	mov	r4, r8
10010c72:	b4f0      	push	{r4, r5, r6, r7}
10010c74:	031f      	lsls	r7, r3, #12
10010c76:	005c      	lsls	r4, r3, #1
10010c78:	0fdb      	lsrs	r3, r3, #31
10010c7a:	469a      	mov	sl, r3
10010c7c:	4b19      	ldr	r3, [pc, #100]	; (10010ce4 <__eqdf2+0x7c>)
10010c7e:	030e      	lsls	r6, r1, #12
10010c80:	004d      	lsls	r5, r1, #1
10010c82:	0fc9      	lsrs	r1, r1, #31
10010c84:	4680      	mov	r8, r0
10010c86:	0b36      	lsrs	r6, r6, #12
10010c88:	0d6d      	lsrs	r5, r5, #21
10010c8a:	468b      	mov	fp, r1
10010c8c:	4691      	mov	r9, r2
10010c8e:	0b3f      	lsrs	r7, r7, #12
10010c90:	0d64      	lsrs	r4, r4, #21
10010c92:	429d      	cmp	r5, r3
10010c94:	d019      	beq.n	10010cca <__eqdf2+0x62>
10010c96:	4b13      	ldr	r3, [pc, #76]	; (10010ce4 <__eqdf2+0x7c>)
10010c98:	429c      	cmp	r4, r3
10010c9a:	d01b      	beq.n	10010cd4 <__eqdf2+0x6c>
10010c9c:	2301      	movs	r3, #1
10010c9e:	42a5      	cmp	r5, r4
10010ca0:	d006      	beq.n	10010cb0 <__eqdf2+0x48>
10010ca2:	0018      	movs	r0, r3
10010ca4:	bc3c      	pop	{r2, r3, r4, r5}
10010ca6:	4690      	mov	r8, r2
10010ca8:	4699      	mov	r9, r3
10010caa:	46a2      	mov	sl, r4
10010cac:	46ab      	mov	fp, r5
10010cae:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010cb0:	42be      	cmp	r6, r7
10010cb2:	d1f6      	bne.n	10010ca2 <__eqdf2+0x3a>
10010cb4:	45c8      	cmp	r8, r9
10010cb6:	d1f4      	bne.n	10010ca2 <__eqdf2+0x3a>
10010cb8:	45d3      	cmp	fp, sl
10010cba:	d010      	beq.n	10010cde <__eqdf2+0x76>
10010cbc:	2d00      	cmp	r5, #0
10010cbe:	d1f0      	bne.n	10010ca2 <__eqdf2+0x3a>
10010cc0:	4330      	orrs	r0, r6
10010cc2:	0003      	movs	r3, r0
10010cc4:	1e5a      	subs	r2, r3, #1
10010cc6:	4193      	sbcs	r3, r2
10010cc8:	e7eb      	b.n	10010ca2 <__eqdf2+0x3a>
10010cca:	0031      	movs	r1, r6
10010ccc:	2301      	movs	r3, #1
10010cce:	4301      	orrs	r1, r0
10010cd0:	d1e7      	bne.n	10010ca2 <__eqdf2+0x3a>
10010cd2:	e7e0      	b.n	10010c96 <__eqdf2+0x2e>
10010cd4:	433a      	orrs	r2, r7
10010cd6:	2301      	movs	r3, #1
10010cd8:	2a00      	cmp	r2, #0
10010cda:	d1e2      	bne.n	10010ca2 <__eqdf2+0x3a>
10010cdc:	e7de      	b.n	10010c9c <__eqdf2+0x34>
10010cde:	2300      	movs	r3, #0
10010ce0:	e7df      	b.n	10010ca2 <__eqdf2+0x3a>
10010ce2:	46c0      	nop			; (mov r8, r8)
10010ce4:	000007ff 	.word	0x000007ff

10010ce8 <__gedf2>:
10010ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
10010cea:	465f      	mov	r7, fp
10010cec:	4644      	mov	r4, r8
10010cee:	4656      	mov	r6, sl
10010cf0:	464d      	mov	r5, r9
10010cf2:	b4f0      	push	{r4, r5, r6, r7}
10010cf4:	031f      	lsls	r7, r3, #12
10010cf6:	0b3c      	lsrs	r4, r7, #12
10010cf8:	4f2c      	ldr	r7, [pc, #176]	; (10010dac <__gedf2+0xc4>)
10010cfa:	030e      	lsls	r6, r1, #12
10010cfc:	004d      	lsls	r5, r1, #1
10010cfe:	46a3      	mov	fp, r4
10010d00:	005c      	lsls	r4, r3, #1
10010d02:	4684      	mov	ip, r0
10010d04:	0b36      	lsrs	r6, r6, #12
10010d06:	0d6d      	lsrs	r5, r5, #21
10010d08:	0fc9      	lsrs	r1, r1, #31
10010d0a:	4690      	mov	r8, r2
10010d0c:	0d64      	lsrs	r4, r4, #21
10010d0e:	0fdb      	lsrs	r3, r3, #31
10010d10:	42bd      	cmp	r5, r7
10010d12:	d02b      	beq.n	10010d6c <__gedf2+0x84>
10010d14:	4f25      	ldr	r7, [pc, #148]	; (10010dac <__gedf2+0xc4>)
10010d16:	42bc      	cmp	r4, r7
10010d18:	d02e      	beq.n	10010d78 <__gedf2+0x90>
10010d1a:	2d00      	cmp	r5, #0
10010d1c:	d10e      	bne.n	10010d3c <__gedf2+0x54>
10010d1e:	4330      	orrs	r0, r6
10010d20:	0007      	movs	r7, r0
10010d22:	4681      	mov	r9, r0
10010d24:	4278      	negs	r0, r7
10010d26:	4178      	adcs	r0, r7
10010d28:	2c00      	cmp	r4, #0
10010d2a:	d117      	bne.n	10010d5c <__gedf2+0x74>
10010d2c:	465f      	mov	r7, fp
10010d2e:	433a      	orrs	r2, r7
10010d30:	d114      	bne.n	10010d5c <__gedf2+0x74>
10010d32:	464b      	mov	r3, r9
10010d34:	2000      	movs	r0, #0
10010d36:	2b00      	cmp	r3, #0
10010d38:	d00a      	beq.n	10010d50 <__gedf2+0x68>
10010d3a:	e006      	b.n	10010d4a <__gedf2+0x62>
10010d3c:	2c00      	cmp	r4, #0
10010d3e:	d102      	bne.n	10010d46 <__gedf2+0x5e>
10010d40:	4658      	mov	r0, fp
10010d42:	4302      	orrs	r2, r0
10010d44:	d001      	beq.n	10010d4a <__gedf2+0x62>
10010d46:	4299      	cmp	r1, r3
10010d48:	d01a      	beq.n	10010d80 <__gedf2+0x98>
10010d4a:	2301      	movs	r3, #1
10010d4c:	4248      	negs	r0, r1
10010d4e:	4318      	orrs	r0, r3
10010d50:	bc3c      	pop	{r2, r3, r4, r5}
10010d52:	4690      	mov	r8, r2
10010d54:	4699      	mov	r9, r3
10010d56:	46a2      	mov	sl, r4
10010d58:	46ab      	mov	fp, r5
10010d5a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d5c:	2800      	cmp	r0, #0
10010d5e:	d0f2      	beq.n	10010d46 <__gedf2+0x5e>
10010d60:	4258      	negs	r0, r3
10010d62:	4158      	adcs	r0, r3
10010d64:	2201      	movs	r2, #1
10010d66:	4240      	negs	r0, r0
10010d68:	4310      	orrs	r0, r2
10010d6a:	e7f1      	b.n	10010d50 <__gedf2+0x68>
10010d6c:	0037      	movs	r7, r6
10010d6e:	4307      	orrs	r7, r0
10010d70:	d0d0      	beq.n	10010d14 <__gedf2+0x2c>
10010d72:	2002      	movs	r0, #2
10010d74:	4240      	negs	r0, r0
10010d76:	e7eb      	b.n	10010d50 <__gedf2+0x68>
10010d78:	465f      	mov	r7, fp
10010d7a:	4317      	orrs	r7, r2
10010d7c:	d0cd      	beq.n	10010d1a <__gedf2+0x32>
10010d7e:	e7f8      	b.n	10010d72 <__gedf2+0x8a>
10010d80:	42a5      	cmp	r5, r4
10010d82:	dce2      	bgt.n	10010d4a <__gedf2+0x62>
10010d84:	db05      	blt.n	10010d92 <__gedf2+0xaa>
10010d86:	455e      	cmp	r6, fp
10010d88:	d8df      	bhi.n	10010d4a <__gedf2+0x62>
10010d8a:	d008      	beq.n	10010d9e <__gedf2+0xb6>
10010d8c:	2000      	movs	r0, #0
10010d8e:	455e      	cmp	r6, fp
10010d90:	d2de      	bcs.n	10010d50 <__gedf2+0x68>
10010d92:	4248      	negs	r0, r1
10010d94:	4148      	adcs	r0, r1
10010d96:	2301      	movs	r3, #1
10010d98:	4240      	negs	r0, r0
10010d9a:	4318      	orrs	r0, r3
10010d9c:	e7d8      	b.n	10010d50 <__gedf2+0x68>
10010d9e:	45c4      	cmp	ip, r8
10010da0:	d8d3      	bhi.n	10010d4a <__gedf2+0x62>
10010da2:	2000      	movs	r0, #0
10010da4:	45c4      	cmp	ip, r8
10010da6:	d3f4      	bcc.n	10010d92 <__gedf2+0xaa>
10010da8:	e7d2      	b.n	10010d50 <__gedf2+0x68>
10010daa:	46c0      	nop			; (mov r8, r8)
10010dac:	000007ff 	.word	0x000007ff

10010db0 <__ledf2>:
10010db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010db2:	465f      	mov	r7, fp
10010db4:	464d      	mov	r5, r9
10010db6:	4644      	mov	r4, r8
10010db8:	4656      	mov	r6, sl
10010dba:	b4f0      	push	{r4, r5, r6, r7}
10010dbc:	031c      	lsls	r4, r3, #12
10010dbe:	0b24      	lsrs	r4, r4, #12
10010dc0:	46a4      	mov	ip, r4
10010dc2:	4c2f      	ldr	r4, [pc, #188]	; (10010e80 <__ledf2+0xd0>)
10010dc4:	030f      	lsls	r7, r1, #12
10010dc6:	004d      	lsls	r5, r1, #1
10010dc8:	005e      	lsls	r6, r3, #1
10010dca:	0fc9      	lsrs	r1, r1, #31
10010dcc:	4680      	mov	r8, r0
10010dce:	0b3f      	lsrs	r7, r7, #12
10010dd0:	0d6d      	lsrs	r5, r5, #21
10010dd2:	468b      	mov	fp, r1
10010dd4:	4691      	mov	r9, r2
10010dd6:	0d76      	lsrs	r6, r6, #21
10010dd8:	0fdb      	lsrs	r3, r3, #31
10010dda:	42a5      	cmp	r5, r4
10010ddc:	d020      	beq.n	10010e20 <__ledf2+0x70>
10010dde:	4c28      	ldr	r4, [pc, #160]	; (10010e80 <__ledf2+0xd0>)
10010de0:	42a6      	cmp	r6, r4
10010de2:	d022      	beq.n	10010e2a <__ledf2+0x7a>
10010de4:	2d00      	cmp	r5, #0
10010de6:	d112      	bne.n	10010e0e <__ledf2+0x5e>
10010de8:	4338      	orrs	r0, r7
10010dea:	4244      	negs	r4, r0
10010dec:	4144      	adcs	r4, r0
10010dee:	2e00      	cmp	r6, #0
10010df0:	d020      	beq.n	10010e34 <__ledf2+0x84>
10010df2:	2c00      	cmp	r4, #0
10010df4:	d00d      	beq.n	10010e12 <__ledf2+0x62>
10010df6:	425c      	negs	r4, r3
10010df8:	4163      	adcs	r3, r4
10010dfa:	2401      	movs	r4, #1
10010dfc:	425b      	negs	r3, r3
10010dfe:	431c      	orrs	r4, r3
10010e00:	0020      	movs	r0, r4
10010e02:	bc3c      	pop	{r2, r3, r4, r5}
10010e04:	4690      	mov	r8, r2
10010e06:	4699      	mov	r9, r3
10010e08:	46a2      	mov	sl, r4
10010e0a:	46ab      	mov	fp, r5
10010e0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e0e:	2e00      	cmp	r6, #0
10010e10:	d017      	beq.n	10010e42 <__ledf2+0x92>
10010e12:	455b      	cmp	r3, fp
10010e14:	d019      	beq.n	10010e4a <__ledf2+0x9a>
10010e16:	465b      	mov	r3, fp
10010e18:	425c      	negs	r4, r3
10010e1a:	2301      	movs	r3, #1
10010e1c:	431c      	orrs	r4, r3
10010e1e:	e7ef      	b.n	10010e00 <__ledf2+0x50>
10010e20:	0039      	movs	r1, r7
10010e22:	2402      	movs	r4, #2
10010e24:	4301      	orrs	r1, r0
10010e26:	d1eb      	bne.n	10010e00 <__ledf2+0x50>
10010e28:	e7d9      	b.n	10010dde <__ledf2+0x2e>
10010e2a:	4661      	mov	r1, ip
10010e2c:	2402      	movs	r4, #2
10010e2e:	4311      	orrs	r1, r2
10010e30:	d1e6      	bne.n	10010e00 <__ledf2+0x50>
10010e32:	e7d7      	b.n	10010de4 <__ledf2+0x34>
10010e34:	4661      	mov	r1, ip
10010e36:	430a      	orrs	r2, r1
10010e38:	d1db      	bne.n	10010df2 <__ledf2+0x42>
10010e3a:	2400      	movs	r4, #0
10010e3c:	2800      	cmp	r0, #0
10010e3e:	d0df      	beq.n	10010e00 <__ledf2+0x50>
10010e40:	e7e9      	b.n	10010e16 <__ledf2+0x66>
10010e42:	4661      	mov	r1, ip
10010e44:	430a      	orrs	r2, r1
10010e46:	d1e4      	bne.n	10010e12 <__ledf2+0x62>
10010e48:	e7e5      	b.n	10010e16 <__ledf2+0x66>
10010e4a:	42b5      	cmp	r5, r6
10010e4c:	dd03      	ble.n	10010e56 <__ledf2+0xa6>
10010e4e:	2201      	movs	r2, #1
10010e50:	425c      	negs	r4, r3
10010e52:	4314      	orrs	r4, r2
10010e54:	e7d4      	b.n	10010e00 <__ledf2+0x50>
10010e56:	42b5      	cmp	r5, r6
10010e58:	dbcd      	blt.n	10010df6 <__ledf2+0x46>
10010e5a:	4567      	cmp	r7, ip
10010e5c:	d8db      	bhi.n	10010e16 <__ledf2+0x66>
10010e5e:	d009      	beq.n	10010e74 <__ledf2+0xc4>
10010e60:	2400      	movs	r4, #0
10010e62:	4567      	cmp	r7, ip
10010e64:	d2cc      	bcs.n	10010e00 <__ledf2+0x50>
10010e66:	4659      	mov	r1, fp
10010e68:	424c      	negs	r4, r1
10010e6a:	4161      	adcs	r1, r4
10010e6c:	2401      	movs	r4, #1
10010e6e:	4249      	negs	r1, r1
10010e70:	430c      	orrs	r4, r1
10010e72:	e7c5      	b.n	10010e00 <__ledf2+0x50>
10010e74:	45c8      	cmp	r8, r9
10010e76:	d8ce      	bhi.n	10010e16 <__ledf2+0x66>
10010e78:	2400      	movs	r4, #0
10010e7a:	45c8      	cmp	r8, r9
10010e7c:	d3f3      	bcc.n	10010e66 <__ledf2+0xb6>
10010e7e:	e7bf      	b.n	10010e00 <__ledf2+0x50>
10010e80:	000007ff 	.word	0x000007ff

10010e84 <__aeabi_dmul>:
10010e84:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e86:	465f      	mov	r7, fp
10010e88:	4656      	mov	r6, sl
10010e8a:	464d      	mov	r5, r9
10010e8c:	4644      	mov	r4, r8
10010e8e:	b4f0      	push	{r4, r5, r6, r7}
10010e90:	030d      	lsls	r5, r1, #12
10010e92:	4699      	mov	r9, r3
10010e94:	004e      	lsls	r6, r1, #1
10010e96:	0b2b      	lsrs	r3, r5, #12
10010e98:	b087      	sub	sp, #28
10010e9a:	0007      	movs	r7, r0
10010e9c:	4692      	mov	sl, r2
10010e9e:	4680      	mov	r8, r0
10010ea0:	469b      	mov	fp, r3
10010ea2:	0d76      	lsrs	r6, r6, #21
10010ea4:	0fcc      	lsrs	r4, r1, #31
10010ea6:	2e00      	cmp	r6, #0
10010ea8:	d069      	beq.n	10010f7e <__aeabi_dmul+0xfa>
10010eaa:	4b6d      	ldr	r3, [pc, #436]	; (10011060 <__aeabi_dmul+0x1dc>)
10010eac:	429e      	cmp	r6, r3
10010eae:	d035      	beq.n	10010f1c <__aeabi_dmul+0x98>
10010eb0:	465b      	mov	r3, fp
10010eb2:	2280      	movs	r2, #128	; 0x80
10010eb4:	00dd      	lsls	r5, r3, #3
10010eb6:	0412      	lsls	r2, r2, #16
10010eb8:	0f43      	lsrs	r3, r0, #29
10010eba:	4313      	orrs	r3, r2
10010ebc:	432b      	orrs	r3, r5
10010ebe:	469b      	mov	fp, r3
10010ec0:	00c3      	lsls	r3, r0, #3
10010ec2:	4698      	mov	r8, r3
10010ec4:	4b67      	ldr	r3, [pc, #412]	; (10011064 <__aeabi_dmul+0x1e0>)
10010ec6:	2700      	movs	r7, #0
10010ec8:	469c      	mov	ip, r3
10010eca:	2300      	movs	r3, #0
10010ecc:	4466      	add	r6, ip
10010ece:	9301      	str	r3, [sp, #4]
10010ed0:	464a      	mov	r2, r9
10010ed2:	0315      	lsls	r5, r2, #12
10010ed4:	0050      	lsls	r0, r2, #1
10010ed6:	0fd2      	lsrs	r2, r2, #31
10010ed8:	4653      	mov	r3, sl
10010eda:	0b2d      	lsrs	r5, r5, #12
10010edc:	0d40      	lsrs	r0, r0, #21
10010ede:	4691      	mov	r9, r2
10010ee0:	d100      	bne.n	10010ee4 <__aeabi_dmul+0x60>
10010ee2:	e076      	b.n	10010fd2 <__aeabi_dmul+0x14e>
10010ee4:	4a5e      	ldr	r2, [pc, #376]	; (10011060 <__aeabi_dmul+0x1dc>)
10010ee6:	4290      	cmp	r0, r2
10010ee8:	d06c      	beq.n	10010fc4 <__aeabi_dmul+0x140>
10010eea:	2280      	movs	r2, #128	; 0x80
10010eec:	0f5b      	lsrs	r3, r3, #29
10010eee:	0412      	lsls	r2, r2, #16
10010ef0:	4313      	orrs	r3, r2
10010ef2:	4a5c      	ldr	r2, [pc, #368]	; (10011064 <__aeabi_dmul+0x1e0>)
10010ef4:	00ed      	lsls	r5, r5, #3
10010ef6:	4694      	mov	ip, r2
10010ef8:	431d      	orrs	r5, r3
10010efa:	4653      	mov	r3, sl
10010efc:	2200      	movs	r2, #0
10010efe:	00db      	lsls	r3, r3, #3
10010f00:	4460      	add	r0, ip
10010f02:	4649      	mov	r1, r9
10010f04:	1836      	adds	r6, r6, r0
10010f06:	1c70      	adds	r0, r6, #1
10010f08:	4061      	eors	r1, r4
10010f0a:	9002      	str	r0, [sp, #8]
10010f0c:	4317      	orrs	r7, r2
10010f0e:	2f0f      	cmp	r7, #15
10010f10:	d900      	bls.n	10010f14 <__aeabi_dmul+0x90>
10010f12:	e0af      	b.n	10011074 <__aeabi_dmul+0x1f0>
10010f14:	4854      	ldr	r0, [pc, #336]	; (10011068 <__aeabi_dmul+0x1e4>)
10010f16:	00bf      	lsls	r7, r7, #2
10010f18:	59c7      	ldr	r7, [r0, r7]
10010f1a:	46bf      	mov	pc, r7
10010f1c:	465b      	mov	r3, fp
10010f1e:	431f      	orrs	r7, r3
10010f20:	d000      	beq.n	10010f24 <__aeabi_dmul+0xa0>
10010f22:	e088      	b.n	10011036 <__aeabi_dmul+0x1b2>
10010f24:	2300      	movs	r3, #0
10010f26:	469b      	mov	fp, r3
10010f28:	4698      	mov	r8, r3
10010f2a:	3302      	adds	r3, #2
10010f2c:	2708      	movs	r7, #8
10010f2e:	9301      	str	r3, [sp, #4]
10010f30:	e7ce      	b.n	10010ed0 <__aeabi_dmul+0x4c>
10010f32:	4649      	mov	r1, r9
10010f34:	2a02      	cmp	r2, #2
10010f36:	d06a      	beq.n	1001100e <__aeabi_dmul+0x18a>
10010f38:	2a03      	cmp	r2, #3
10010f3a:	d100      	bne.n	10010f3e <__aeabi_dmul+0xba>
10010f3c:	e209      	b.n	10011352 <__aeabi_dmul+0x4ce>
10010f3e:	2a01      	cmp	r2, #1
10010f40:	d000      	beq.n	10010f44 <__aeabi_dmul+0xc0>
10010f42:	e1bb      	b.n	100112bc <__aeabi_dmul+0x438>
10010f44:	4011      	ands	r1, r2
10010f46:	2200      	movs	r2, #0
10010f48:	2300      	movs	r3, #0
10010f4a:	2500      	movs	r5, #0
10010f4c:	4690      	mov	r8, r2
10010f4e:	b2cc      	uxtb	r4, r1
10010f50:	2100      	movs	r1, #0
10010f52:	032d      	lsls	r5, r5, #12
10010f54:	0d0a      	lsrs	r2, r1, #20
10010f56:	0512      	lsls	r2, r2, #20
10010f58:	0b2d      	lsrs	r5, r5, #12
10010f5a:	4315      	orrs	r5, r2
10010f5c:	4a43      	ldr	r2, [pc, #268]	; (1001106c <__aeabi_dmul+0x1e8>)
10010f5e:	051b      	lsls	r3, r3, #20
10010f60:	4015      	ands	r5, r2
10010f62:	431d      	orrs	r5, r3
10010f64:	006d      	lsls	r5, r5, #1
10010f66:	07e4      	lsls	r4, r4, #31
10010f68:	086d      	lsrs	r5, r5, #1
10010f6a:	4325      	orrs	r5, r4
10010f6c:	4640      	mov	r0, r8
10010f6e:	0029      	movs	r1, r5
10010f70:	b007      	add	sp, #28
10010f72:	bc3c      	pop	{r2, r3, r4, r5}
10010f74:	4690      	mov	r8, r2
10010f76:	4699      	mov	r9, r3
10010f78:	46a2      	mov	sl, r4
10010f7a:	46ab      	mov	fp, r5
10010f7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f7e:	4303      	orrs	r3, r0
10010f80:	d052      	beq.n	10011028 <__aeabi_dmul+0x1a4>
10010f82:	465b      	mov	r3, fp
10010f84:	2b00      	cmp	r3, #0
10010f86:	d100      	bne.n	10010f8a <__aeabi_dmul+0x106>
10010f88:	e18a      	b.n	100112a0 <__aeabi_dmul+0x41c>
10010f8a:	4658      	mov	r0, fp
10010f8c:	f000 fdb6 	bl	10011afc <__clzsi2>
10010f90:	0003      	movs	r3, r0
10010f92:	3b0b      	subs	r3, #11
10010f94:	2b1c      	cmp	r3, #28
10010f96:	dd00      	ble.n	10010f9a <__aeabi_dmul+0x116>
10010f98:	e17b      	b.n	10011292 <__aeabi_dmul+0x40e>
10010f9a:	221d      	movs	r2, #29
10010f9c:	1ad3      	subs	r3, r2, r3
10010f9e:	003a      	movs	r2, r7
10010fa0:	0001      	movs	r1, r0
10010fa2:	465d      	mov	r5, fp
10010fa4:	40da      	lsrs	r2, r3
10010fa6:	3908      	subs	r1, #8
10010fa8:	408d      	lsls	r5, r1
10010faa:	0013      	movs	r3, r2
10010fac:	408f      	lsls	r7, r1
10010fae:	432b      	orrs	r3, r5
10010fb0:	469b      	mov	fp, r3
10010fb2:	46b8      	mov	r8, r7
10010fb4:	4b2e      	ldr	r3, [pc, #184]	; (10011070 <__aeabi_dmul+0x1ec>)
10010fb6:	2700      	movs	r7, #0
10010fb8:	469c      	mov	ip, r3
10010fba:	2300      	movs	r3, #0
10010fbc:	4460      	add	r0, ip
10010fbe:	4246      	negs	r6, r0
10010fc0:	9301      	str	r3, [sp, #4]
10010fc2:	e785      	b.n	10010ed0 <__aeabi_dmul+0x4c>
10010fc4:	4652      	mov	r2, sl
10010fc6:	432a      	orrs	r2, r5
10010fc8:	d12c      	bne.n	10011024 <__aeabi_dmul+0x1a0>
10010fca:	2500      	movs	r5, #0
10010fcc:	2300      	movs	r3, #0
10010fce:	2202      	movs	r2, #2
10010fd0:	e797      	b.n	10010f02 <__aeabi_dmul+0x7e>
10010fd2:	4652      	mov	r2, sl
10010fd4:	432a      	orrs	r2, r5
10010fd6:	d021      	beq.n	1001101c <__aeabi_dmul+0x198>
10010fd8:	2d00      	cmp	r5, #0
10010fda:	d100      	bne.n	10010fde <__aeabi_dmul+0x15a>
10010fdc:	e154      	b.n	10011288 <__aeabi_dmul+0x404>
10010fde:	0028      	movs	r0, r5
10010fe0:	f000 fd8c 	bl	10011afc <__clzsi2>
10010fe4:	0003      	movs	r3, r0
10010fe6:	3b0b      	subs	r3, #11
10010fe8:	2b1c      	cmp	r3, #28
10010fea:	dd00      	ble.n	10010fee <__aeabi_dmul+0x16a>
10010fec:	e146      	b.n	1001127c <__aeabi_dmul+0x3f8>
10010fee:	211d      	movs	r1, #29
10010ff0:	1acb      	subs	r3, r1, r3
10010ff2:	4651      	mov	r1, sl
10010ff4:	0002      	movs	r2, r0
10010ff6:	40d9      	lsrs	r1, r3
10010ff8:	4653      	mov	r3, sl
10010ffa:	3a08      	subs	r2, #8
10010ffc:	4095      	lsls	r5, r2
10010ffe:	4093      	lsls	r3, r2
10011000:	430d      	orrs	r5, r1
10011002:	4a1b      	ldr	r2, [pc, #108]	; (10011070 <__aeabi_dmul+0x1ec>)
10011004:	4694      	mov	ip, r2
10011006:	4460      	add	r0, ip
10011008:	4240      	negs	r0, r0
1001100a:	2200      	movs	r2, #0
1001100c:	e779      	b.n	10010f02 <__aeabi_dmul+0x7e>
1001100e:	2401      	movs	r4, #1
10011010:	2200      	movs	r2, #0
10011012:	400c      	ands	r4, r1
10011014:	4b12      	ldr	r3, [pc, #72]	; (10011060 <__aeabi_dmul+0x1dc>)
10011016:	2500      	movs	r5, #0
10011018:	4690      	mov	r8, r2
1001101a:	e799      	b.n	10010f50 <__aeabi_dmul+0xcc>
1001101c:	2500      	movs	r5, #0
1001101e:	2300      	movs	r3, #0
10011020:	2201      	movs	r2, #1
10011022:	e76e      	b.n	10010f02 <__aeabi_dmul+0x7e>
10011024:	2203      	movs	r2, #3
10011026:	e76c      	b.n	10010f02 <__aeabi_dmul+0x7e>
10011028:	2300      	movs	r3, #0
1001102a:	469b      	mov	fp, r3
1001102c:	4698      	mov	r8, r3
1001102e:	3301      	adds	r3, #1
10011030:	2704      	movs	r7, #4
10011032:	9301      	str	r3, [sp, #4]
10011034:	e74c      	b.n	10010ed0 <__aeabi_dmul+0x4c>
10011036:	2303      	movs	r3, #3
10011038:	270c      	movs	r7, #12
1001103a:	9301      	str	r3, [sp, #4]
1001103c:	e748      	b.n	10010ed0 <__aeabi_dmul+0x4c>
1001103e:	2300      	movs	r3, #0
10011040:	2580      	movs	r5, #128	; 0x80
10011042:	4698      	mov	r8, r3
10011044:	2400      	movs	r4, #0
10011046:	032d      	lsls	r5, r5, #12
10011048:	4b05      	ldr	r3, [pc, #20]	; (10011060 <__aeabi_dmul+0x1dc>)
1001104a:	e781      	b.n	10010f50 <__aeabi_dmul+0xcc>
1001104c:	465d      	mov	r5, fp
1001104e:	4643      	mov	r3, r8
10011050:	9a01      	ldr	r2, [sp, #4]
10011052:	e76f      	b.n	10010f34 <__aeabi_dmul+0xb0>
10011054:	465d      	mov	r5, fp
10011056:	4643      	mov	r3, r8
10011058:	0021      	movs	r1, r4
1001105a:	9a01      	ldr	r2, [sp, #4]
1001105c:	e76a      	b.n	10010f34 <__aeabi_dmul+0xb0>
1001105e:	46c0      	nop			; (mov r8, r8)
10011060:	000007ff 	.word	0x000007ff
10011064:	fffffc01 	.word	0xfffffc01
10011068:	10013cd4 	.word	0x10013cd4
1001106c:	800fffff 	.word	0x800fffff
10011070:	000003f3 	.word	0x000003f3
10011074:	4642      	mov	r2, r8
10011076:	0c12      	lsrs	r2, r2, #16
10011078:	4691      	mov	r9, r2
1001107a:	0c1a      	lsrs	r2, r3, #16
1001107c:	4694      	mov	ip, r2
1001107e:	4642      	mov	r2, r8
10011080:	0417      	lsls	r7, r2, #16
10011082:	464a      	mov	r2, r9
10011084:	041b      	lsls	r3, r3, #16
10011086:	0c1b      	lsrs	r3, r3, #16
10011088:	435a      	muls	r2, r3
1001108a:	4660      	mov	r0, ip
1001108c:	4690      	mov	r8, r2
1001108e:	464a      	mov	r2, r9
10011090:	4342      	muls	r2, r0
10011092:	0010      	movs	r0, r2
10011094:	9203      	str	r2, [sp, #12]
10011096:	4662      	mov	r2, ip
10011098:	001c      	movs	r4, r3
1001109a:	0c3f      	lsrs	r7, r7, #16
1001109c:	437a      	muls	r2, r7
1001109e:	437c      	muls	r4, r7
100110a0:	4442      	add	r2, r8
100110a2:	9201      	str	r2, [sp, #4]
100110a4:	0c22      	lsrs	r2, r4, #16
100110a6:	4692      	mov	sl, r2
100110a8:	9a01      	ldr	r2, [sp, #4]
100110aa:	4452      	add	r2, sl
100110ac:	4590      	cmp	r8, r2
100110ae:	d906      	bls.n	100110be <__aeabi_dmul+0x23a>
100110b0:	4682      	mov	sl, r0
100110b2:	2080      	movs	r0, #128	; 0x80
100110b4:	0240      	lsls	r0, r0, #9
100110b6:	4680      	mov	r8, r0
100110b8:	44c2      	add	sl, r8
100110ba:	4650      	mov	r0, sl
100110bc:	9003      	str	r0, [sp, #12]
100110be:	0c10      	lsrs	r0, r2, #16
100110c0:	9004      	str	r0, [sp, #16]
100110c2:	4648      	mov	r0, r9
100110c4:	0424      	lsls	r4, r4, #16
100110c6:	0c24      	lsrs	r4, r4, #16
100110c8:	0412      	lsls	r2, r2, #16
100110ca:	1912      	adds	r2, r2, r4
100110cc:	9205      	str	r2, [sp, #20]
100110ce:	0c2a      	lsrs	r2, r5, #16
100110d0:	042d      	lsls	r5, r5, #16
100110d2:	0c2d      	lsrs	r5, r5, #16
100110d4:	4368      	muls	r0, r5
100110d6:	002c      	movs	r4, r5
100110d8:	4682      	mov	sl, r0
100110da:	4648      	mov	r0, r9
100110dc:	437c      	muls	r4, r7
100110de:	4350      	muls	r0, r2
100110e0:	4681      	mov	r9, r0
100110e2:	0c20      	lsrs	r0, r4, #16
100110e4:	4680      	mov	r8, r0
100110e6:	4357      	muls	r7, r2
100110e8:	4457      	add	r7, sl
100110ea:	4447      	add	r7, r8
100110ec:	45ba      	cmp	sl, r7
100110ee:	d903      	bls.n	100110f8 <__aeabi_dmul+0x274>
100110f0:	2080      	movs	r0, #128	; 0x80
100110f2:	0240      	lsls	r0, r0, #9
100110f4:	4680      	mov	r8, r0
100110f6:	44c1      	add	r9, r8
100110f8:	0c38      	lsrs	r0, r7, #16
100110fa:	043f      	lsls	r7, r7, #16
100110fc:	46b8      	mov	r8, r7
100110fe:	4448      	add	r0, r9
10011100:	0424      	lsls	r4, r4, #16
10011102:	0c24      	lsrs	r4, r4, #16
10011104:	9001      	str	r0, [sp, #4]
10011106:	9804      	ldr	r0, [sp, #16]
10011108:	44a0      	add	r8, r4
1001110a:	4440      	add	r0, r8
1001110c:	9004      	str	r0, [sp, #16]
1001110e:	4658      	mov	r0, fp
10011110:	0c00      	lsrs	r0, r0, #16
10011112:	4681      	mov	r9, r0
10011114:	4658      	mov	r0, fp
10011116:	0404      	lsls	r4, r0, #16
10011118:	0c20      	lsrs	r0, r4, #16
1001111a:	4682      	mov	sl, r0
1001111c:	0007      	movs	r7, r0
1001111e:	4648      	mov	r0, r9
10011120:	435f      	muls	r7, r3
10011122:	464c      	mov	r4, r9
10011124:	4343      	muls	r3, r0
10011126:	4660      	mov	r0, ip
10011128:	4360      	muls	r0, r4
1001112a:	4664      	mov	r4, ip
1001112c:	4683      	mov	fp, r0
1001112e:	4650      	mov	r0, sl
10011130:	4344      	muls	r4, r0
10011132:	0c38      	lsrs	r0, r7, #16
10011134:	4684      	mov	ip, r0
10011136:	18e4      	adds	r4, r4, r3
10011138:	4464      	add	r4, ip
1001113a:	42a3      	cmp	r3, r4
1001113c:	d903      	bls.n	10011146 <__aeabi_dmul+0x2c2>
1001113e:	2380      	movs	r3, #128	; 0x80
10011140:	025b      	lsls	r3, r3, #9
10011142:	469c      	mov	ip, r3
10011144:	44e3      	add	fp, ip
10011146:	4648      	mov	r0, r9
10011148:	043f      	lsls	r7, r7, #16
1001114a:	0c23      	lsrs	r3, r4, #16
1001114c:	0c3f      	lsrs	r7, r7, #16
1001114e:	0424      	lsls	r4, r4, #16
10011150:	19e4      	adds	r4, r4, r7
10011152:	4657      	mov	r7, sl
10011154:	4368      	muls	r0, r5
10011156:	436f      	muls	r7, r5
10011158:	4684      	mov	ip, r0
1001115a:	464d      	mov	r5, r9
1001115c:	4650      	mov	r0, sl
1001115e:	4355      	muls	r5, r2
10011160:	4342      	muls	r2, r0
10011162:	0c38      	lsrs	r0, r7, #16
10011164:	4681      	mov	r9, r0
10011166:	4462      	add	r2, ip
10011168:	444a      	add	r2, r9
1001116a:	445b      	add	r3, fp
1001116c:	4594      	cmp	ip, r2
1001116e:	d903      	bls.n	10011178 <__aeabi_dmul+0x2f4>
10011170:	2080      	movs	r0, #128	; 0x80
10011172:	0240      	lsls	r0, r0, #9
10011174:	4684      	mov	ip, r0
10011176:	4465      	add	r5, ip
10011178:	9803      	ldr	r0, [sp, #12]
1001117a:	043f      	lsls	r7, r7, #16
1001117c:	4683      	mov	fp, r0
1001117e:	9804      	ldr	r0, [sp, #16]
10011180:	0c3f      	lsrs	r7, r7, #16
10011182:	4684      	mov	ip, r0
10011184:	44e3      	add	fp, ip
10011186:	45c3      	cmp	fp, r8
10011188:	4180      	sbcs	r0, r0
1001118a:	4240      	negs	r0, r0
1001118c:	4682      	mov	sl, r0
1001118e:	0410      	lsls	r0, r2, #16
10011190:	4684      	mov	ip, r0
10011192:	9801      	ldr	r0, [sp, #4]
10011194:	4467      	add	r7, ip
10011196:	4684      	mov	ip, r0
10011198:	4467      	add	r7, ip
1001119a:	44a3      	add	fp, r4
1001119c:	46bc      	mov	ip, r7
1001119e:	45a3      	cmp	fp, r4
100111a0:	41a4      	sbcs	r4, r4
100111a2:	4699      	mov	r9, r3
100111a4:	44d4      	add	ip, sl
100111a6:	4264      	negs	r4, r4
100111a8:	4287      	cmp	r7, r0
100111aa:	41bf      	sbcs	r7, r7
100111ac:	45d4      	cmp	ip, sl
100111ae:	4180      	sbcs	r0, r0
100111b0:	44e1      	add	r9, ip
100111b2:	46a0      	mov	r8, r4
100111b4:	4599      	cmp	r9, r3
100111b6:	419b      	sbcs	r3, r3
100111b8:	427f      	negs	r7, r7
100111ba:	4240      	negs	r0, r0
100111bc:	44c8      	add	r8, r9
100111be:	4307      	orrs	r7, r0
100111c0:	0c12      	lsrs	r2, r2, #16
100111c2:	18ba      	adds	r2, r7, r2
100111c4:	45a0      	cmp	r8, r4
100111c6:	41a4      	sbcs	r4, r4
100111c8:	425f      	negs	r7, r3
100111ca:	003b      	movs	r3, r7
100111cc:	4264      	negs	r4, r4
100111ce:	4323      	orrs	r3, r4
100111d0:	18d7      	adds	r7, r2, r3
100111d2:	4643      	mov	r3, r8
100111d4:	197d      	adds	r5, r7, r5
100111d6:	0ddb      	lsrs	r3, r3, #23
100111d8:	026d      	lsls	r5, r5, #9
100111da:	431d      	orrs	r5, r3
100111dc:	465b      	mov	r3, fp
100111de:	025a      	lsls	r2, r3, #9
100111e0:	9b05      	ldr	r3, [sp, #20]
100111e2:	431a      	orrs	r2, r3
100111e4:	1e53      	subs	r3, r2, #1
100111e6:	419a      	sbcs	r2, r3
100111e8:	465b      	mov	r3, fp
100111ea:	0ddb      	lsrs	r3, r3, #23
100111ec:	431a      	orrs	r2, r3
100111ee:	4643      	mov	r3, r8
100111f0:	025b      	lsls	r3, r3, #9
100111f2:	4313      	orrs	r3, r2
100111f4:	01ea      	lsls	r2, r5, #7
100111f6:	d507      	bpl.n	10011208 <__aeabi_dmul+0x384>
100111f8:	2201      	movs	r2, #1
100111fa:	085c      	lsrs	r4, r3, #1
100111fc:	4013      	ands	r3, r2
100111fe:	4323      	orrs	r3, r4
10011200:	07ea      	lsls	r2, r5, #31
10011202:	9e02      	ldr	r6, [sp, #8]
10011204:	4313      	orrs	r3, r2
10011206:	086d      	lsrs	r5, r5, #1
10011208:	4a57      	ldr	r2, [pc, #348]	; (10011368 <__aeabi_dmul+0x4e4>)
1001120a:	18b2      	adds	r2, r6, r2
1001120c:	2a00      	cmp	r2, #0
1001120e:	dd4b      	ble.n	100112a8 <__aeabi_dmul+0x424>
10011210:	0758      	lsls	r0, r3, #29
10011212:	d009      	beq.n	10011228 <__aeabi_dmul+0x3a4>
10011214:	200f      	movs	r0, #15
10011216:	4018      	ands	r0, r3
10011218:	2804      	cmp	r0, #4
1001121a:	d005      	beq.n	10011228 <__aeabi_dmul+0x3a4>
1001121c:	1d18      	adds	r0, r3, #4
1001121e:	4298      	cmp	r0, r3
10011220:	419b      	sbcs	r3, r3
10011222:	425b      	negs	r3, r3
10011224:	18ed      	adds	r5, r5, r3
10011226:	0003      	movs	r3, r0
10011228:	01e8      	lsls	r0, r5, #7
1001122a:	d504      	bpl.n	10011236 <__aeabi_dmul+0x3b2>
1001122c:	4a4f      	ldr	r2, [pc, #316]	; (1001136c <__aeabi_dmul+0x4e8>)
1001122e:	4015      	ands	r5, r2
10011230:	2280      	movs	r2, #128	; 0x80
10011232:	00d2      	lsls	r2, r2, #3
10011234:	18b2      	adds	r2, r6, r2
10011236:	484e      	ldr	r0, [pc, #312]	; (10011370 <__aeabi_dmul+0x4ec>)
10011238:	4282      	cmp	r2, r0
1001123a:	dd00      	ble.n	1001123e <__aeabi_dmul+0x3ba>
1001123c:	e6e7      	b.n	1001100e <__aeabi_dmul+0x18a>
1001123e:	2401      	movs	r4, #1
10011240:	08db      	lsrs	r3, r3, #3
10011242:	0768      	lsls	r0, r5, #29
10011244:	4318      	orrs	r0, r3
10011246:	026d      	lsls	r5, r5, #9
10011248:	0553      	lsls	r3, r2, #21
1001124a:	4680      	mov	r8, r0
1001124c:	0b2d      	lsrs	r5, r5, #12
1001124e:	0d5b      	lsrs	r3, r3, #21
10011250:	400c      	ands	r4, r1
10011252:	e67d      	b.n	10010f50 <__aeabi_dmul+0xcc>
10011254:	2280      	movs	r2, #128	; 0x80
10011256:	4659      	mov	r1, fp
10011258:	0312      	lsls	r2, r2, #12
1001125a:	4211      	tst	r1, r2
1001125c:	d008      	beq.n	10011270 <__aeabi_dmul+0x3ec>
1001125e:	4215      	tst	r5, r2
10011260:	d106      	bne.n	10011270 <__aeabi_dmul+0x3ec>
10011262:	4315      	orrs	r5, r2
10011264:	032d      	lsls	r5, r5, #12
10011266:	4698      	mov	r8, r3
10011268:	0b2d      	lsrs	r5, r5, #12
1001126a:	464c      	mov	r4, r9
1001126c:	4b41      	ldr	r3, [pc, #260]	; (10011374 <__aeabi_dmul+0x4f0>)
1001126e:	e66f      	b.n	10010f50 <__aeabi_dmul+0xcc>
10011270:	465d      	mov	r5, fp
10011272:	4315      	orrs	r5, r2
10011274:	032d      	lsls	r5, r5, #12
10011276:	0b2d      	lsrs	r5, r5, #12
10011278:	4b3e      	ldr	r3, [pc, #248]	; (10011374 <__aeabi_dmul+0x4f0>)
1001127a:	e669      	b.n	10010f50 <__aeabi_dmul+0xcc>
1001127c:	0003      	movs	r3, r0
1001127e:	4655      	mov	r5, sl
10011280:	3b28      	subs	r3, #40	; 0x28
10011282:	409d      	lsls	r5, r3
10011284:	2300      	movs	r3, #0
10011286:	e6bc      	b.n	10011002 <__aeabi_dmul+0x17e>
10011288:	4650      	mov	r0, sl
1001128a:	f000 fc37 	bl	10011afc <__clzsi2>
1001128e:	3020      	adds	r0, #32
10011290:	e6a8      	b.n	10010fe4 <__aeabi_dmul+0x160>
10011292:	0003      	movs	r3, r0
10011294:	3b28      	subs	r3, #40	; 0x28
10011296:	409f      	lsls	r7, r3
10011298:	2300      	movs	r3, #0
1001129a:	46bb      	mov	fp, r7
1001129c:	4698      	mov	r8, r3
1001129e:	e689      	b.n	10010fb4 <__aeabi_dmul+0x130>
100112a0:	f000 fc2c 	bl	10011afc <__clzsi2>
100112a4:	3020      	adds	r0, #32
100112a6:	e673      	b.n	10010f90 <__aeabi_dmul+0x10c>
100112a8:	2401      	movs	r4, #1
100112aa:	1aa6      	subs	r6, r4, r2
100112ac:	2e38      	cmp	r6, #56	; 0x38
100112ae:	dd07      	ble.n	100112c0 <__aeabi_dmul+0x43c>
100112b0:	2200      	movs	r2, #0
100112b2:	400c      	ands	r4, r1
100112b4:	2300      	movs	r3, #0
100112b6:	2500      	movs	r5, #0
100112b8:	4690      	mov	r8, r2
100112ba:	e649      	b.n	10010f50 <__aeabi_dmul+0xcc>
100112bc:	9e02      	ldr	r6, [sp, #8]
100112be:	e7a3      	b.n	10011208 <__aeabi_dmul+0x384>
100112c0:	2e1f      	cmp	r6, #31
100112c2:	dc20      	bgt.n	10011306 <__aeabi_dmul+0x482>
100112c4:	2220      	movs	r2, #32
100112c6:	002c      	movs	r4, r5
100112c8:	0018      	movs	r0, r3
100112ca:	1b92      	subs	r2, r2, r6
100112cc:	40f0      	lsrs	r0, r6
100112ce:	4094      	lsls	r4, r2
100112d0:	4093      	lsls	r3, r2
100112d2:	4304      	orrs	r4, r0
100112d4:	1e58      	subs	r0, r3, #1
100112d6:	4183      	sbcs	r3, r0
100112d8:	431c      	orrs	r4, r3
100112da:	40f5      	lsrs	r5, r6
100112dc:	0763      	lsls	r3, r4, #29
100112de:	d009      	beq.n	100112f4 <__aeabi_dmul+0x470>
100112e0:	230f      	movs	r3, #15
100112e2:	4023      	ands	r3, r4
100112e4:	2b04      	cmp	r3, #4
100112e6:	d005      	beq.n	100112f4 <__aeabi_dmul+0x470>
100112e8:	0023      	movs	r3, r4
100112ea:	1d1c      	adds	r4, r3, #4
100112ec:	429c      	cmp	r4, r3
100112ee:	4192      	sbcs	r2, r2
100112f0:	4252      	negs	r2, r2
100112f2:	18ad      	adds	r5, r5, r2
100112f4:	022b      	lsls	r3, r5, #8
100112f6:	d51f      	bpl.n	10011338 <__aeabi_dmul+0x4b4>
100112f8:	2401      	movs	r4, #1
100112fa:	2200      	movs	r2, #0
100112fc:	400c      	ands	r4, r1
100112fe:	2301      	movs	r3, #1
10011300:	2500      	movs	r5, #0
10011302:	4690      	mov	r8, r2
10011304:	e624      	b.n	10010f50 <__aeabi_dmul+0xcc>
10011306:	201f      	movs	r0, #31
10011308:	002c      	movs	r4, r5
1001130a:	4240      	negs	r0, r0
1001130c:	1a82      	subs	r2, r0, r2
1001130e:	40d4      	lsrs	r4, r2
10011310:	2e20      	cmp	r6, #32
10011312:	d01c      	beq.n	1001134e <__aeabi_dmul+0x4ca>
10011314:	2240      	movs	r2, #64	; 0x40
10011316:	1b96      	subs	r6, r2, r6
10011318:	40b5      	lsls	r5, r6
1001131a:	432b      	orrs	r3, r5
1001131c:	1e58      	subs	r0, r3, #1
1001131e:	4183      	sbcs	r3, r0
10011320:	2007      	movs	r0, #7
10011322:	4323      	orrs	r3, r4
10011324:	4018      	ands	r0, r3
10011326:	2500      	movs	r5, #0
10011328:	2800      	cmp	r0, #0
1001132a:	d009      	beq.n	10011340 <__aeabi_dmul+0x4bc>
1001132c:	220f      	movs	r2, #15
1001132e:	2500      	movs	r5, #0
10011330:	401a      	ands	r2, r3
10011332:	001c      	movs	r4, r3
10011334:	2a04      	cmp	r2, #4
10011336:	d1d8      	bne.n	100112ea <__aeabi_dmul+0x466>
10011338:	0023      	movs	r3, r4
1001133a:	0768      	lsls	r0, r5, #29
1001133c:	026d      	lsls	r5, r5, #9
1001133e:	0b2d      	lsrs	r5, r5, #12
10011340:	2401      	movs	r4, #1
10011342:	08db      	lsrs	r3, r3, #3
10011344:	4303      	orrs	r3, r0
10011346:	4698      	mov	r8, r3
10011348:	400c      	ands	r4, r1
1001134a:	2300      	movs	r3, #0
1001134c:	e600      	b.n	10010f50 <__aeabi_dmul+0xcc>
1001134e:	2500      	movs	r5, #0
10011350:	e7e3      	b.n	1001131a <__aeabi_dmul+0x496>
10011352:	2280      	movs	r2, #128	; 0x80
10011354:	2401      	movs	r4, #1
10011356:	0312      	lsls	r2, r2, #12
10011358:	4315      	orrs	r5, r2
1001135a:	032d      	lsls	r5, r5, #12
1001135c:	4698      	mov	r8, r3
1001135e:	0b2d      	lsrs	r5, r5, #12
10011360:	400c      	ands	r4, r1
10011362:	4b04      	ldr	r3, [pc, #16]	; (10011374 <__aeabi_dmul+0x4f0>)
10011364:	e5f4      	b.n	10010f50 <__aeabi_dmul+0xcc>
10011366:	46c0      	nop			; (mov r8, r8)
10011368:	000003ff 	.word	0x000003ff
1001136c:	feffffff 	.word	0xfeffffff
10011370:	000007fe 	.word	0x000007fe
10011374:	000007ff 	.word	0x000007ff

10011378 <__aeabi_dsub>:
10011378:	b5f0      	push	{r4, r5, r6, r7, lr}
1001137a:	4657      	mov	r7, sl
1001137c:	464e      	mov	r6, r9
1001137e:	4645      	mov	r5, r8
10011380:	b4e0      	push	{r5, r6, r7}
10011382:	000e      	movs	r6, r1
10011384:	0011      	movs	r1, r2
10011386:	0ff2      	lsrs	r2, r6, #31
10011388:	4692      	mov	sl, r2
1001138a:	00c5      	lsls	r5, r0, #3
1001138c:	0f42      	lsrs	r2, r0, #29
1001138e:	0318      	lsls	r0, r3, #12
10011390:	0337      	lsls	r7, r6, #12
10011392:	0074      	lsls	r4, r6, #1
10011394:	0a40      	lsrs	r0, r0, #9
10011396:	0f4e      	lsrs	r6, r1, #29
10011398:	0a7f      	lsrs	r7, r7, #9
1001139a:	4330      	orrs	r0, r6
1001139c:	4ecf      	ldr	r6, [pc, #828]	; (100116dc <__aeabi_dsub+0x364>)
1001139e:	4317      	orrs	r7, r2
100113a0:	005a      	lsls	r2, r3, #1
100113a2:	0d64      	lsrs	r4, r4, #21
100113a4:	0d52      	lsrs	r2, r2, #21
100113a6:	0fdb      	lsrs	r3, r3, #31
100113a8:	00c9      	lsls	r1, r1, #3
100113aa:	42b2      	cmp	r2, r6
100113ac:	d100      	bne.n	100113b0 <__aeabi_dsub+0x38>
100113ae:	e0e5      	b.n	1001157c <__aeabi_dsub+0x204>
100113b0:	2601      	movs	r6, #1
100113b2:	4073      	eors	r3, r6
100113b4:	1aa6      	subs	r6, r4, r2
100113b6:	46b4      	mov	ip, r6
100113b8:	4553      	cmp	r3, sl
100113ba:	d100      	bne.n	100113be <__aeabi_dsub+0x46>
100113bc:	e0af      	b.n	1001151e <__aeabi_dsub+0x1a6>
100113be:	2e00      	cmp	r6, #0
100113c0:	dc00      	bgt.n	100113c4 <__aeabi_dsub+0x4c>
100113c2:	e10d      	b.n	100115e0 <__aeabi_dsub+0x268>
100113c4:	2a00      	cmp	r2, #0
100113c6:	d13a      	bne.n	1001143e <__aeabi_dsub+0xc6>
100113c8:	0003      	movs	r3, r0
100113ca:	430b      	orrs	r3, r1
100113cc:	d000      	beq.n	100113d0 <__aeabi_dsub+0x58>
100113ce:	e0e4      	b.n	1001159a <__aeabi_dsub+0x222>
100113d0:	076b      	lsls	r3, r5, #29
100113d2:	d009      	beq.n	100113e8 <__aeabi_dsub+0x70>
100113d4:	230f      	movs	r3, #15
100113d6:	402b      	ands	r3, r5
100113d8:	2b04      	cmp	r3, #4
100113da:	d005      	beq.n	100113e8 <__aeabi_dsub+0x70>
100113dc:	1d2b      	adds	r3, r5, #4
100113de:	42ab      	cmp	r3, r5
100113e0:	41ad      	sbcs	r5, r5
100113e2:	426d      	negs	r5, r5
100113e4:	197f      	adds	r7, r7, r5
100113e6:	001d      	movs	r5, r3
100113e8:	023b      	lsls	r3, r7, #8
100113ea:	d400      	bmi.n	100113ee <__aeabi_dsub+0x76>
100113ec:	e088      	b.n	10011500 <__aeabi_dsub+0x188>
100113ee:	4bbb      	ldr	r3, [pc, #748]	; (100116dc <__aeabi_dsub+0x364>)
100113f0:	3401      	adds	r4, #1
100113f2:	429c      	cmp	r4, r3
100113f4:	d100      	bne.n	100113f8 <__aeabi_dsub+0x80>
100113f6:	e110      	b.n	1001161a <__aeabi_dsub+0x2a2>
100113f8:	003a      	movs	r2, r7
100113fa:	4bb9      	ldr	r3, [pc, #740]	; (100116e0 <__aeabi_dsub+0x368>)
100113fc:	4651      	mov	r1, sl
100113fe:	401a      	ands	r2, r3
10011400:	2301      	movs	r3, #1
10011402:	0750      	lsls	r0, r2, #29
10011404:	08ed      	lsrs	r5, r5, #3
10011406:	0252      	lsls	r2, r2, #9
10011408:	0564      	lsls	r4, r4, #21
1001140a:	4305      	orrs	r5, r0
1001140c:	0b12      	lsrs	r2, r2, #12
1001140e:	0d64      	lsrs	r4, r4, #21
10011410:	400b      	ands	r3, r1
10011412:	2100      	movs	r1, #0
10011414:	0028      	movs	r0, r5
10011416:	0312      	lsls	r2, r2, #12
10011418:	0d0d      	lsrs	r5, r1, #20
1001141a:	0b12      	lsrs	r2, r2, #12
1001141c:	0564      	lsls	r4, r4, #21
1001141e:	052d      	lsls	r5, r5, #20
10011420:	4315      	orrs	r5, r2
10011422:	0862      	lsrs	r2, r4, #1
10011424:	4caf      	ldr	r4, [pc, #700]	; (100116e4 <__aeabi_dsub+0x36c>)
10011426:	07db      	lsls	r3, r3, #31
10011428:	402c      	ands	r4, r5
1001142a:	4314      	orrs	r4, r2
1001142c:	0064      	lsls	r4, r4, #1
1001142e:	0864      	lsrs	r4, r4, #1
10011430:	431c      	orrs	r4, r3
10011432:	0021      	movs	r1, r4
10011434:	bc1c      	pop	{r2, r3, r4}
10011436:	4690      	mov	r8, r2
10011438:	4699      	mov	r9, r3
1001143a:	46a2      	mov	sl, r4
1001143c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001143e:	4ba7      	ldr	r3, [pc, #668]	; (100116dc <__aeabi_dsub+0x364>)
10011440:	429c      	cmp	r4, r3
10011442:	d0c5      	beq.n	100113d0 <__aeabi_dsub+0x58>
10011444:	2380      	movs	r3, #128	; 0x80
10011446:	041b      	lsls	r3, r3, #16
10011448:	4318      	orrs	r0, r3
1001144a:	4663      	mov	r3, ip
1001144c:	2b38      	cmp	r3, #56	; 0x38
1001144e:	dd00      	ble.n	10011452 <__aeabi_dsub+0xda>
10011450:	e0fd      	b.n	1001164e <__aeabi_dsub+0x2d6>
10011452:	2b1f      	cmp	r3, #31
10011454:	dd00      	ble.n	10011458 <__aeabi_dsub+0xe0>
10011456:	e130      	b.n	100116ba <__aeabi_dsub+0x342>
10011458:	4662      	mov	r2, ip
1001145a:	2320      	movs	r3, #32
1001145c:	1a9b      	subs	r3, r3, r2
1001145e:	0002      	movs	r2, r0
10011460:	409a      	lsls	r2, r3
10011462:	4666      	mov	r6, ip
10011464:	4690      	mov	r8, r2
10011466:	000a      	movs	r2, r1
10011468:	4099      	lsls	r1, r3
1001146a:	40f2      	lsrs	r2, r6
1001146c:	4646      	mov	r6, r8
1001146e:	1e4b      	subs	r3, r1, #1
10011470:	4199      	sbcs	r1, r3
10011472:	4332      	orrs	r2, r6
10011474:	4311      	orrs	r1, r2
10011476:	4663      	mov	r3, ip
10011478:	0002      	movs	r2, r0
1001147a:	40da      	lsrs	r2, r3
1001147c:	1a69      	subs	r1, r5, r1
1001147e:	428d      	cmp	r5, r1
10011480:	419b      	sbcs	r3, r3
10011482:	000d      	movs	r5, r1
10011484:	1aba      	subs	r2, r7, r2
10011486:	425b      	negs	r3, r3
10011488:	1ad7      	subs	r7, r2, r3
1001148a:	023b      	lsls	r3, r7, #8
1001148c:	d535      	bpl.n	100114fa <__aeabi_dsub+0x182>
1001148e:	027a      	lsls	r2, r7, #9
10011490:	0a53      	lsrs	r3, r2, #9
10011492:	4698      	mov	r8, r3
10011494:	4643      	mov	r3, r8
10011496:	2b00      	cmp	r3, #0
10011498:	d100      	bne.n	1001149c <__aeabi_dsub+0x124>
1001149a:	e0c4      	b.n	10011626 <__aeabi_dsub+0x2ae>
1001149c:	4640      	mov	r0, r8
1001149e:	f000 fb2d 	bl	10011afc <__clzsi2>
100114a2:	0003      	movs	r3, r0
100114a4:	3b08      	subs	r3, #8
100114a6:	2b1f      	cmp	r3, #31
100114a8:	dd00      	ble.n	100114ac <__aeabi_dsub+0x134>
100114aa:	e0c5      	b.n	10011638 <__aeabi_dsub+0x2c0>
100114ac:	2220      	movs	r2, #32
100114ae:	0029      	movs	r1, r5
100114b0:	1ad2      	subs	r2, r2, r3
100114b2:	4647      	mov	r7, r8
100114b4:	40d1      	lsrs	r1, r2
100114b6:	409f      	lsls	r7, r3
100114b8:	000a      	movs	r2, r1
100114ba:	409d      	lsls	r5, r3
100114bc:	433a      	orrs	r2, r7
100114be:	429c      	cmp	r4, r3
100114c0:	dd00      	ble.n	100114c4 <__aeabi_dsub+0x14c>
100114c2:	e0c0      	b.n	10011646 <__aeabi_dsub+0x2ce>
100114c4:	1b1c      	subs	r4, r3, r4
100114c6:	1c63      	adds	r3, r4, #1
100114c8:	2b1f      	cmp	r3, #31
100114ca:	dd00      	ble.n	100114ce <__aeabi_dsub+0x156>
100114cc:	e0e4      	b.n	10011698 <__aeabi_dsub+0x320>
100114ce:	2120      	movs	r1, #32
100114d0:	0014      	movs	r4, r2
100114d2:	0028      	movs	r0, r5
100114d4:	1ac9      	subs	r1, r1, r3
100114d6:	40d8      	lsrs	r0, r3
100114d8:	408c      	lsls	r4, r1
100114da:	408d      	lsls	r5, r1
100114dc:	4304      	orrs	r4, r0
100114de:	40da      	lsrs	r2, r3
100114e0:	1e68      	subs	r0, r5, #1
100114e2:	4185      	sbcs	r5, r0
100114e4:	0017      	movs	r7, r2
100114e6:	4325      	orrs	r5, r4
100114e8:	2400      	movs	r4, #0
100114ea:	e771      	b.n	100113d0 <__aeabi_dsub+0x58>
100114ec:	4642      	mov	r2, r8
100114ee:	4663      	mov	r3, ip
100114f0:	431a      	orrs	r2, r3
100114f2:	d100      	bne.n	100114f6 <__aeabi_dsub+0x17e>
100114f4:	e24c      	b.n	10011990 <__aeabi_dsub+0x618>
100114f6:	4667      	mov	r7, ip
100114f8:	4645      	mov	r5, r8
100114fa:	076b      	lsls	r3, r5, #29
100114fc:	d000      	beq.n	10011500 <__aeabi_dsub+0x188>
100114fe:	e769      	b.n	100113d4 <__aeabi_dsub+0x5c>
10011500:	2301      	movs	r3, #1
10011502:	4651      	mov	r1, sl
10011504:	0778      	lsls	r0, r7, #29
10011506:	08ed      	lsrs	r5, r5, #3
10011508:	08fa      	lsrs	r2, r7, #3
1001150a:	400b      	ands	r3, r1
1001150c:	4305      	orrs	r5, r0
1001150e:	4973      	ldr	r1, [pc, #460]	; (100116dc <__aeabi_dsub+0x364>)
10011510:	428c      	cmp	r4, r1
10011512:	d038      	beq.n	10011586 <__aeabi_dsub+0x20e>
10011514:	0312      	lsls	r2, r2, #12
10011516:	0564      	lsls	r4, r4, #21
10011518:	0b12      	lsrs	r2, r2, #12
1001151a:	0d64      	lsrs	r4, r4, #21
1001151c:	e779      	b.n	10011412 <__aeabi_dsub+0x9a>
1001151e:	2e00      	cmp	r6, #0
10011520:	dc00      	bgt.n	10011524 <__aeabi_dsub+0x1ac>
10011522:	e09a      	b.n	1001165a <__aeabi_dsub+0x2e2>
10011524:	2a00      	cmp	r2, #0
10011526:	d047      	beq.n	100115b8 <__aeabi_dsub+0x240>
10011528:	4a6c      	ldr	r2, [pc, #432]	; (100116dc <__aeabi_dsub+0x364>)
1001152a:	4294      	cmp	r4, r2
1001152c:	d100      	bne.n	10011530 <__aeabi_dsub+0x1b8>
1001152e:	e74f      	b.n	100113d0 <__aeabi_dsub+0x58>
10011530:	2280      	movs	r2, #128	; 0x80
10011532:	0412      	lsls	r2, r2, #16
10011534:	4310      	orrs	r0, r2
10011536:	4662      	mov	r2, ip
10011538:	2a38      	cmp	r2, #56	; 0x38
1001153a:	dc00      	bgt.n	1001153e <__aeabi_dsub+0x1c6>
1001153c:	e108      	b.n	10011750 <__aeabi_dsub+0x3d8>
1001153e:	4301      	orrs	r1, r0
10011540:	1e48      	subs	r0, r1, #1
10011542:	4181      	sbcs	r1, r0
10011544:	2200      	movs	r2, #0
10011546:	b2c9      	uxtb	r1, r1
10011548:	1949      	adds	r1, r1, r5
1001154a:	19d2      	adds	r2, r2, r7
1001154c:	42a9      	cmp	r1, r5
1001154e:	41bf      	sbcs	r7, r7
10011550:	000d      	movs	r5, r1
10011552:	427f      	negs	r7, r7
10011554:	18bf      	adds	r7, r7, r2
10011556:	023a      	lsls	r2, r7, #8
10011558:	d400      	bmi.n	1001155c <__aeabi_dsub+0x1e4>
1001155a:	e142      	b.n	100117e2 <__aeabi_dsub+0x46a>
1001155c:	4a5f      	ldr	r2, [pc, #380]	; (100116dc <__aeabi_dsub+0x364>)
1001155e:	3401      	adds	r4, #1
10011560:	4294      	cmp	r4, r2
10011562:	d100      	bne.n	10011566 <__aeabi_dsub+0x1ee>
10011564:	e14e      	b.n	10011804 <__aeabi_dsub+0x48c>
10011566:	2001      	movs	r0, #1
10011568:	4a5d      	ldr	r2, [pc, #372]	; (100116e0 <__aeabi_dsub+0x368>)
1001156a:	0869      	lsrs	r1, r5, #1
1001156c:	403a      	ands	r2, r7
1001156e:	4028      	ands	r0, r5
10011570:	4308      	orrs	r0, r1
10011572:	07d5      	lsls	r5, r2, #31
10011574:	4305      	orrs	r5, r0
10011576:	0857      	lsrs	r7, r2, #1
10011578:	469a      	mov	sl, r3
1001157a:	e729      	b.n	100113d0 <__aeabi_dsub+0x58>
1001157c:	0006      	movs	r6, r0
1001157e:	430e      	orrs	r6, r1
10011580:	d000      	beq.n	10011584 <__aeabi_dsub+0x20c>
10011582:	e717      	b.n	100113b4 <__aeabi_dsub+0x3c>
10011584:	e714      	b.n	100113b0 <__aeabi_dsub+0x38>
10011586:	0029      	movs	r1, r5
10011588:	4311      	orrs	r1, r2
1001158a:	d100      	bne.n	1001158e <__aeabi_dsub+0x216>
1001158c:	e1f9      	b.n	10011982 <__aeabi_dsub+0x60a>
1001158e:	2180      	movs	r1, #128	; 0x80
10011590:	0309      	lsls	r1, r1, #12
10011592:	430a      	orrs	r2, r1
10011594:	0312      	lsls	r2, r2, #12
10011596:	0b12      	lsrs	r2, r2, #12
10011598:	e73b      	b.n	10011412 <__aeabi_dsub+0x9a>
1001159a:	2301      	movs	r3, #1
1001159c:	425b      	negs	r3, r3
1001159e:	4698      	mov	r8, r3
100115a0:	44c4      	add	ip, r8
100115a2:	4663      	mov	r3, ip
100115a4:	2b00      	cmp	r3, #0
100115a6:	d172      	bne.n	1001168e <__aeabi_dsub+0x316>
100115a8:	1a69      	subs	r1, r5, r1
100115aa:	428d      	cmp	r5, r1
100115ac:	419b      	sbcs	r3, r3
100115ae:	1a3f      	subs	r7, r7, r0
100115b0:	425b      	negs	r3, r3
100115b2:	1aff      	subs	r7, r7, r3
100115b4:	000d      	movs	r5, r1
100115b6:	e768      	b.n	1001148a <__aeabi_dsub+0x112>
100115b8:	0002      	movs	r2, r0
100115ba:	430a      	orrs	r2, r1
100115bc:	d100      	bne.n	100115c0 <__aeabi_dsub+0x248>
100115be:	e707      	b.n	100113d0 <__aeabi_dsub+0x58>
100115c0:	2201      	movs	r2, #1
100115c2:	4252      	negs	r2, r2
100115c4:	4690      	mov	r8, r2
100115c6:	44c4      	add	ip, r8
100115c8:	4662      	mov	r2, ip
100115ca:	2a00      	cmp	r2, #0
100115cc:	d000      	beq.n	100115d0 <__aeabi_dsub+0x258>
100115ce:	e0e6      	b.n	1001179e <__aeabi_dsub+0x426>
100115d0:	1869      	adds	r1, r5, r1
100115d2:	42a9      	cmp	r1, r5
100115d4:	41b6      	sbcs	r6, r6
100115d6:	183f      	adds	r7, r7, r0
100115d8:	4276      	negs	r6, r6
100115da:	19f7      	adds	r7, r6, r7
100115dc:	000d      	movs	r5, r1
100115de:	e7ba      	b.n	10011556 <__aeabi_dsub+0x1de>
100115e0:	2e00      	cmp	r6, #0
100115e2:	d000      	beq.n	100115e6 <__aeabi_dsub+0x26e>
100115e4:	e080      	b.n	100116e8 <__aeabi_dsub+0x370>
100115e6:	1c62      	adds	r2, r4, #1
100115e8:	0552      	lsls	r2, r2, #21
100115ea:	0d52      	lsrs	r2, r2, #21
100115ec:	2a01      	cmp	r2, #1
100115ee:	dc00      	bgt.n	100115f2 <__aeabi_dsub+0x27a>
100115f0:	e0f9      	b.n	100117e6 <__aeabi_dsub+0x46e>
100115f2:	1a6a      	subs	r2, r5, r1
100115f4:	4691      	mov	r9, r2
100115f6:	454d      	cmp	r5, r9
100115f8:	41b6      	sbcs	r6, r6
100115fa:	1a3a      	subs	r2, r7, r0
100115fc:	4276      	negs	r6, r6
100115fe:	1b92      	subs	r2, r2, r6
10011600:	4690      	mov	r8, r2
10011602:	0212      	lsls	r2, r2, #8
10011604:	d400      	bmi.n	10011608 <__aeabi_dsub+0x290>
10011606:	e099      	b.n	1001173c <__aeabi_dsub+0x3c4>
10011608:	1b4d      	subs	r5, r1, r5
1001160a:	42a9      	cmp	r1, r5
1001160c:	4189      	sbcs	r1, r1
1001160e:	1bc7      	subs	r7, r0, r7
10011610:	4249      	negs	r1, r1
10011612:	1a7a      	subs	r2, r7, r1
10011614:	4690      	mov	r8, r2
10011616:	469a      	mov	sl, r3
10011618:	e73c      	b.n	10011494 <__aeabi_dsub+0x11c>
1001161a:	4652      	mov	r2, sl
1001161c:	2301      	movs	r3, #1
1001161e:	2500      	movs	r5, #0
10011620:	4013      	ands	r3, r2
10011622:	2200      	movs	r2, #0
10011624:	e6f5      	b.n	10011412 <__aeabi_dsub+0x9a>
10011626:	0028      	movs	r0, r5
10011628:	f000 fa68 	bl	10011afc <__clzsi2>
1001162c:	3020      	adds	r0, #32
1001162e:	0003      	movs	r3, r0
10011630:	3b08      	subs	r3, #8
10011632:	2b1f      	cmp	r3, #31
10011634:	dc00      	bgt.n	10011638 <__aeabi_dsub+0x2c0>
10011636:	e739      	b.n	100114ac <__aeabi_dsub+0x134>
10011638:	002a      	movs	r2, r5
1001163a:	3828      	subs	r0, #40	; 0x28
1001163c:	4082      	lsls	r2, r0
1001163e:	2500      	movs	r5, #0
10011640:	429c      	cmp	r4, r3
10011642:	dc00      	bgt.n	10011646 <__aeabi_dsub+0x2ce>
10011644:	e73e      	b.n	100114c4 <__aeabi_dsub+0x14c>
10011646:	4f26      	ldr	r7, [pc, #152]	; (100116e0 <__aeabi_dsub+0x368>)
10011648:	1ae4      	subs	r4, r4, r3
1001164a:	4017      	ands	r7, r2
1001164c:	e6c0      	b.n	100113d0 <__aeabi_dsub+0x58>
1001164e:	4301      	orrs	r1, r0
10011650:	1e48      	subs	r0, r1, #1
10011652:	4181      	sbcs	r1, r0
10011654:	2200      	movs	r2, #0
10011656:	b2c9      	uxtb	r1, r1
10011658:	e710      	b.n	1001147c <__aeabi_dsub+0x104>
1001165a:	2e00      	cmp	r6, #0
1001165c:	d000      	beq.n	10011660 <__aeabi_dsub+0x2e8>
1001165e:	e0f1      	b.n	10011844 <__aeabi_dsub+0x4cc>
10011660:	1c62      	adds	r2, r4, #1
10011662:	4694      	mov	ip, r2
10011664:	0552      	lsls	r2, r2, #21
10011666:	0d52      	lsrs	r2, r2, #21
10011668:	2a01      	cmp	r2, #1
1001166a:	dc00      	bgt.n	1001166e <__aeabi_dsub+0x2f6>
1001166c:	e0a0      	b.n	100117b0 <__aeabi_dsub+0x438>
1001166e:	4a1b      	ldr	r2, [pc, #108]	; (100116dc <__aeabi_dsub+0x364>)
10011670:	4594      	cmp	ip, r2
10011672:	d100      	bne.n	10011676 <__aeabi_dsub+0x2fe>
10011674:	e0c5      	b.n	10011802 <__aeabi_dsub+0x48a>
10011676:	1869      	adds	r1, r5, r1
10011678:	42a9      	cmp	r1, r5
1001167a:	4192      	sbcs	r2, r2
1001167c:	183f      	adds	r7, r7, r0
1001167e:	4252      	negs	r2, r2
10011680:	19d2      	adds	r2, r2, r7
10011682:	0849      	lsrs	r1, r1, #1
10011684:	07d5      	lsls	r5, r2, #31
10011686:	430d      	orrs	r5, r1
10011688:	0857      	lsrs	r7, r2, #1
1001168a:	4664      	mov	r4, ip
1001168c:	e6a0      	b.n	100113d0 <__aeabi_dsub+0x58>
1001168e:	4b13      	ldr	r3, [pc, #76]	; (100116dc <__aeabi_dsub+0x364>)
10011690:	429c      	cmp	r4, r3
10011692:	d000      	beq.n	10011696 <__aeabi_dsub+0x31e>
10011694:	e6d9      	b.n	1001144a <__aeabi_dsub+0xd2>
10011696:	e69b      	b.n	100113d0 <__aeabi_dsub+0x58>
10011698:	0011      	movs	r1, r2
1001169a:	3c1f      	subs	r4, #31
1001169c:	40e1      	lsrs	r1, r4
1001169e:	000c      	movs	r4, r1
100116a0:	2b20      	cmp	r3, #32
100116a2:	d100      	bne.n	100116a6 <__aeabi_dsub+0x32e>
100116a4:	e080      	b.n	100117a8 <__aeabi_dsub+0x430>
100116a6:	2140      	movs	r1, #64	; 0x40
100116a8:	1acb      	subs	r3, r1, r3
100116aa:	409a      	lsls	r2, r3
100116ac:	4315      	orrs	r5, r2
100116ae:	1e6a      	subs	r2, r5, #1
100116b0:	4195      	sbcs	r5, r2
100116b2:	2700      	movs	r7, #0
100116b4:	4325      	orrs	r5, r4
100116b6:	2400      	movs	r4, #0
100116b8:	e71f      	b.n	100114fa <__aeabi_dsub+0x182>
100116ba:	4663      	mov	r3, ip
100116bc:	0002      	movs	r2, r0
100116be:	3b20      	subs	r3, #32
100116c0:	40da      	lsrs	r2, r3
100116c2:	4663      	mov	r3, ip
100116c4:	2b20      	cmp	r3, #32
100116c6:	d071      	beq.n	100117ac <__aeabi_dsub+0x434>
100116c8:	2340      	movs	r3, #64	; 0x40
100116ca:	4666      	mov	r6, ip
100116cc:	1b9b      	subs	r3, r3, r6
100116ce:	4098      	lsls	r0, r3
100116d0:	4301      	orrs	r1, r0
100116d2:	1e48      	subs	r0, r1, #1
100116d4:	4181      	sbcs	r1, r0
100116d6:	4311      	orrs	r1, r2
100116d8:	2200      	movs	r2, #0
100116da:	e6cf      	b.n	1001147c <__aeabi_dsub+0x104>
100116dc:	000007ff 	.word	0x000007ff
100116e0:	ff7fffff 	.word	0xff7fffff
100116e4:	800fffff 	.word	0x800fffff
100116e8:	2c00      	cmp	r4, #0
100116ea:	d048      	beq.n	1001177e <__aeabi_dsub+0x406>
100116ec:	4cca      	ldr	r4, [pc, #808]	; (10011a18 <__aeabi_dsub+0x6a0>)
100116ee:	42a2      	cmp	r2, r4
100116f0:	d100      	bne.n	100116f4 <__aeabi_dsub+0x37c>
100116f2:	e0a2      	b.n	1001183a <__aeabi_dsub+0x4c2>
100116f4:	4274      	negs	r4, r6
100116f6:	46a1      	mov	r9, r4
100116f8:	2480      	movs	r4, #128	; 0x80
100116fa:	0424      	lsls	r4, r4, #16
100116fc:	4327      	orrs	r7, r4
100116fe:	464c      	mov	r4, r9
10011700:	2c38      	cmp	r4, #56	; 0x38
10011702:	dd00      	ble.n	10011706 <__aeabi_dsub+0x38e>
10011704:	e0db      	b.n	100118be <__aeabi_dsub+0x546>
10011706:	2c1f      	cmp	r4, #31
10011708:	dd00      	ble.n	1001170c <__aeabi_dsub+0x394>
1001170a:	e144      	b.n	10011996 <__aeabi_dsub+0x61e>
1001170c:	464e      	mov	r6, r9
1001170e:	2420      	movs	r4, #32
10011710:	1ba4      	subs	r4, r4, r6
10011712:	003e      	movs	r6, r7
10011714:	40a6      	lsls	r6, r4
10011716:	46a2      	mov	sl, r4
10011718:	46b0      	mov	r8, r6
1001171a:	464c      	mov	r4, r9
1001171c:	002e      	movs	r6, r5
1001171e:	40e6      	lsrs	r6, r4
10011720:	46b4      	mov	ip, r6
10011722:	4646      	mov	r6, r8
10011724:	4664      	mov	r4, ip
10011726:	4326      	orrs	r6, r4
10011728:	4654      	mov	r4, sl
1001172a:	40a5      	lsls	r5, r4
1001172c:	1e6c      	subs	r4, r5, #1
1001172e:	41a5      	sbcs	r5, r4
10011730:	0034      	movs	r4, r6
10011732:	432c      	orrs	r4, r5
10011734:	464d      	mov	r5, r9
10011736:	40ef      	lsrs	r7, r5
10011738:	1b0d      	subs	r5, r1, r4
1001173a:	e028      	b.n	1001178e <__aeabi_dsub+0x416>
1001173c:	464a      	mov	r2, r9
1001173e:	4643      	mov	r3, r8
10011740:	464d      	mov	r5, r9
10011742:	431a      	orrs	r2, r3
10011744:	d000      	beq.n	10011748 <__aeabi_dsub+0x3d0>
10011746:	e6a5      	b.n	10011494 <__aeabi_dsub+0x11c>
10011748:	2300      	movs	r3, #0
1001174a:	2400      	movs	r4, #0
1001174c:	2500      	movs	r5, #0
1001174e:	e6de      	b.n	1001150e <__aeabi_dsub+0x196>
10011750:	2a1f      	cmp	r2, #31
10011752:	dc5a      	bgt.n	1001180a <__aeabi_dsub+0x492>
10011754:	4666      	mov	r6, ip
10011756:	2220      	movs	r2, #32
10011758:	1b92      	subs	r2, r2, r6
1001175a:	0006      	movs	r6, r0
1001175c:	4096      	lsls	r6, r2
1001175e:	4691      	mov	r9, r2
10011760:	46b0      	mov	r8, r6
10011762:	4662      	mov	r2, ip
10011764:	000e      	movs	r6, r1
10011766:	40d6      	lsrs	r6, r2
10011768:	4642      	mov	r2, r8
1001176a:	4316      	orrs	r6, r2
1001176c:	464a      	mov	r2, r9
1001176e:	4091      	lsls	r1, r2
10011770:	1e4a      	subs	r2, r1, #1
10011772:	4191      	sbcs	r1, r2
10011774:	0002      	movs	r2, r0
10011776:	4660      	mov	r0, ip
10011778:	4331      	orrs	r1, r6
1001177a:	40c2      	lsrs	r2, r0
1001177c:	e6e4      	b.n	10011548 <__aeabi_dsub+0x1d0>
1001177e:	003c      	movs	r4, r7
10011780:	432c      	orrs	r4, r5
10011782:	d05a      	beq.n	1001183a <__aeabi_dsub+0x4c2>
10011784:	43f4      	mvns	r4, r6
10011786:	46a1      	mov	r9, r4
10011788:	2c00      	cmp	r4, #0
1001178a:	d152      	bne.n	10011832 <__aeabi_dsub+0x4ba>
1001178c:	1b4d      	subs	r5, r1, r5
1001178e:	42a9      	cmp	r1, r5
10011790:	4189      	sbcs	r1, r1
10011792:	1bc7      	subs	r7, r0, r7
10011794:	4249      	negs	r1, r1
10011796:	1a7f      	subs	r7, r7, r1
10011798:	0014      	movs	r4, r2
1001179a:	469a      	mov	sl, r3
1001179c:	e675      	b.n	1001148a <__aeabi_dsub+0x112>
1001179e:	4a9e      	ldr	r2, [pc, #632]	; (10011a18 <__aeabi_dsub+0x6a0>)
100117a0:	4294      	cmp	r4, r2
100117a2:	d000      	beq.n	100117a6 <__aeabi_dsub+0x42e>
100117a4:	e6c7      	b.n	10011536 <__aeabi_dsub+0x1be>
100117a6:	e613      	b.n	100113d0 <__aeabi_dsub+0x58>
100117a8:	2200      	movs	r2, #0
100117aa:	e77f      	b.n	100116ac <__aeabi_dsub+0x334>
100117ac:	2000      	movs	r0, #0
100117ae:	e78f      	b.n	100116d0 <__aeabi_dsub+0x358>
100117b0:	2c00      	cmp	r4, #0
100117b2:	d000      	beq.n	100117b6 <__aeabi_dsub+0x43e>
100117b4:	e0c8      	b.n	10011948 <__aeabi_dsub+0x5d0>
100117b6:	003b      	movs	r3, r7
100117b8:	432b      	orrs	r3, r5
100117ba:	d100      	bne.n	100117be <__aeabi_dsub+0x446>
100117bc:	e10f      	b.n	100119de <__aeabi_dsub+0x666>
100117be:	0003      	movs	r3, r0
100117c0:	430b      	orrs	r3, r1
100117c2:	d100      	bne.n	100117c6 <__aeabi_dsub+0x44e>
100117c4:	e604      	b.n	100113d0 <__aeabi_dsub+0x58>
100117c6:	1869      	adds	r1, r5, r1
100117c8:	42a9      	cmp	r1, r5
100117ca:	419b      	sbcs	r3, r3
100117cc:	183f      	adds	r7, r7, r0
100117ce:	425b      	negs	r3, r3
100117d0:	19df      	adds	r7, r3, r7
100117d2:	023b      	lsls	r3, r7, #8
100117d4:	d400      	bmi.n	100117d8 <__aeabi_dsub+0x460>
100117d6:	e11a      	b.n	10011a0e <__aeabi_dsub+0x696>
100117d8:	4b90      	ldr	r3, [pc, #576]	; (10011a1c <__aeabi_dsub+0x6a4>)
100117da:	000d      	movs	r5, r1
100117dc:	401f      	ands	r7, r3
100117de:	4664      	mov	r4, ip
100117e0:	e5f6      	b.n	100113d0 <__aeabi_dsub+0x58>
100117e2:	469a      	mov	sl, r3
100117e4:	e689      	b.n	100114fa <__aeabi_dsub+0x182>
100117e6:	003a      	movs	r2, r7
100117e8:	432a      	orrs	r2, r5
100117ea:	2c00      	cmp	r4, #0
100117ec:	d15c      	bne.n	100118a8 <__aeabi_dsub+0x530>
100117ee:	2a00      	cmp	r2, #0
100117f0:	d175      	bne.n	100118de <__aeabi_dsub+0x566>
100117f2:	0002      	movs	r2, r0
100117f4:	430a      	orrs	r2, r1
100117f6:	d100      	bne.n	100117fa <__aeabi_dsub+0x482>
100117f8:	e0ca      	b.n	10011990 <__aeabi_dsub+0x618>
100117fa:	0007      	movs	r7, r0
100117fc:	000d      	movs	r5, r1
100117fe:	469a      	mov	sl, r3
10011800:	e5e6      	b.n	100113d0 <__aeabi_dsub+0x58>
10011802:	4664      	mov	r4, ip
10011804:	2200      	movs	r2, #0
10011806:	2500      	movs	r5, #0
10011808:	e681      	b.n	1001150e <__aeabi_dsub+0x196>
1001180a:	4662      	mov	r2, ip
1001180c:	0006      	movs	r6, r0
1001180e:	3a20      	subs	r2, #32
10011810:	40d6      	lsrs	r6, r2
10011812:	4662      	mov	r2, ip
10011814:	46b0      	mov	r8, r6
10011816:	2a20      	cmp	r2, #32
10011818:	d100      	bne.n	1001181c <__aeabi_dsub+0x4a4>
1001181a:	e0b7      	b.n	1001198c <__aeabi_dsub+0x614>
1001181c:	2240      	movs	r2, #64	; 0x40
1001181e:	4666      	mov	r6, ip
10011820:	1b92      	subs	r2, r2, r6
10011822:	4090      	lsls	r0, r2
10011824:	4301      	orrs	r1, r0
10011826:	4642      	mov	r2, r8
10011828:	1e48      	subs	r0, r1, #1
1001182a:	4181      	sbcs	r1, r0
1001182c:	4311      	orrs	r1, r2
1001182e:	2200      	movs	r2, #0
10011830:	e68a      	b.n	10011548 <__aeabi_dsub+0x1d0>
10011832:	4c79      	ldr	r4, [pc, #484]	; (10011a18 <__aeabi_dsub+0x6a0>)
10011834:	42a2      	cmp	r2, r4
10011836:	d000      	beq.n	1001183a <__aeabi_dsub+0x4c2>
10011838:	e761      	b.n	100116fe <__aeabi_dsub+0x386>
1001183a:	0007      	movs	r7, r0
1001183c:	000d      	movs	r5, r1
1001183e:	0014      	movs	r4, r2
10011840:	469a      	mov	sl, r3
10011842:	e5c5      	b.n	100113d0 <__aeabi_dsub+0x58>
10011844:	2c00      	cmp	r4, #0
10011846:	d141      	bne.n	100118cc <__aeabi_dsub+0x554>
10011848:	003c      	movs	r4, r7
1001184a:	432c      	orrs	r4, r5
1001184c:	d078      	beq.n	10011940 <__aeabi_dsub+0x5c8>
1001184e:	43f4      	mvns	r4, r6
10011850:	46a1      	mov	r9, r4
10011852:	2c00      	cmp	r4, #0
10011854:	d020      	beq.n	10011898 <__aeabi_dsub+0x520>
10011856:	4c70      	ldr	r4, [pc, #448]	; (10011a18 <__aeabi_dsub+0x6a0>)
10011858:	42a2      	cmp	r2, r4
1001185a:	d071      	beq.n	10011940 <__aeabi_dsub+0x5c8>
1001185c:	464c      	mov	r4, r9
1001185e:	2c38      	cmp	r4, #56	; 0x38
10011860:	dd00      	ble.n	10011864 <__aeabi_dsub+0x4ec>
10011862:	e0b2      	b.n	100119ca <__aeabi_dsub+0x652>
10011864:	2c1f      	cmp	r4, #31
10011866:	dd00      	ble.n	1001186a <__aeabi_dsub+0x4f2>
10011868:	e0bc      	b.n	100119e4 <__aeabi_dsub+0x66c>
1001186a:	2620      	movs	r6, #32
1001186c:	1b34      	subs	r4, r6, r4
1001186e:	46a2      	mov	sl, r4
10011870:	003c      	movs	r4, r7
10011872:	4656      	mov	r6, sl
10011874:	40b4      	lsls	r4, r6
10011876:	464e      	mov	r6, r9
10011878:	46a0      	mov	r8, r4
1001187a:	002c      	movs	r4, r5
1001187c:	40f4      	lsrs	r4, r6
1001187e:	46a4      	mov	ip, r4
10011880:	4644      	mov	r4, r8
10011882:	4666      	mov	r6, ip
10011884:	4334      	orrs	r4, r6
10011886:	46a4      	mov	ip, r4
10011888:	4654      	mov	r4, sl
1001188a:	40a5      	lsls	r5, r4
1001188c:	4664      	mov	r4, ip
1001188e:	1e6e      	subs	r6, r5, #1
10011890:	41b5      	sbcs	r5, r6
10011892:	4325      	orrs	r5, r4
10011894:	464c      	mov	r4, r9
10011896:	40e7      	lsrs	r7, r4
10011898:	186d      	adds	r5, r5, r1
1001189a:	428d      	cmp	r5, r1
1001189c:	4189      	sbcs	r1, r1
1001189e:	183f      	adds	r7, r7, r0
100118a0:	4249      	negs	r1, r1
100118a2:	19cf      	adds	r7, r1, r7
100118a4:	0014      	movs	r4, r2
100118a6:	e656      	b.n	10011556 <__aeabi_dsub+0x1de>
100118a8:	2a00      	cmp	r2, #0
100118aa:	d12f      	bne.n	1001190c <__aeabi_dsub+0x594>
100118ac:	0002      	movs	r2, r0
100118ae:	430a      	orrs	r2, r1
100118b0:	d100      	bne.n	100118b4 <__aeabi_dsub+0x53c>
100118b2:	e084      	b.n	100119be <__aeabi_dsub+0x646>
100118b4:	0007      	movs	r7, r0
100118b6:	000d      	movs	r5, r1
100118b8:	469a      	mov	sl, r3
100118ba:	4c57      	ldr	r4, [pc, #348]	; (10011a18 <__aeabi_dsub+0x6a0>)
100118bc:	e588      	b.n	100113d0 <__aeabi_dsub+0x58>
100118be:	433d      	orrs	r5, r7
100118c0:	1e6f      	subs	r7, r5, #1
100118c2:	41bd      	sbcs	r5, r7
100118c4:	b2ec      	uxtb	r4, r5
100118c6:	2700      	movs	r7, #0
100118c8:	1b0d      	subs	r5, r1, r4
100118ca:	e760      	b.n	1001178e <__aeabi_dsub+0x416>
100118cc:	4c52      	ldr	r4, [pc, #328]	; (10011a18 <__aeabi_dsub+0x6a0>)
100118ce:	42a2      	cmp	r2, r4
100118d0:	d036      	beq.n	10011940 <__aeabi_dsub+0x5c8>
100118d2:	4274      	negs	r4, r6
100118d4:	2680      	movs	r6, #128	; 0x80
100118d6:	0436      	lsls	r6, r6, #16
100118d8:	46a1      	mov	r9, r4
100118da:	4337      	orrs	r7, r6
100118dc:	e7be      	b.n	1001185c <__aeabi_dsub+0x4e4>
100118de:	0002      	movs	r2, r0
100118e0:	430a      	orrs	r2, r1
100118e2:	d100      	bne.n	100118e6 <__aeabi_dsub+0x56e>
100118e4:	e574      	b.n	100113d0 <__aeabi_dsub+0x58>
100118e6:	1a6a      	subs	r2, r5, r1
100118e8:	4690      	mov	r8, r2
100118ea:	4545      	cmp	r5, r8
100118ec:	41b6      	sbcs	r6, r6
100118ee:	1a3a      	subs	r2, r7, r0
100118f0:	4276      	negs	r6, r6
100118f2:	1b92      	subs	r2, r2, r6
100118f4:	4694      	mov	ip, r2
100118f6:	0212      	lsls	r2, r2, #8
100118f8:	d400      	bmi.n	100118fc <__aeabi_dsub+0x584>
100118fa:	e5f7      	b.n	100114ec <__aeabi_dsub+0x174>
100118fc:	1b4d      	subs	r5, r1, r5
100118fe:	42a9      	cmp	r1, r5
10011900:	4189      	sbcs	r1, r1
10011902:	1bc7      	subs	r7, r0, r7
10011904:	4249      	negs	r1, r1
10011906:	1a7f      	subs	r7, r7, r1
10011908:	469a      	mov	sl, r3
1001190a:	e561      	b.n	100113d0 <__aeabi_dsub+0x58>
1001190c:	0002      	movs	r2, r0
1001190e:	430a      	orrs	r2, r1
10011910:	d03a      	beq.n	10011988 <__aeabi_dsub+0x610>
10011912:	08ed      	lsrs	r5, r5, #3
10011914:	077c      	lsls	r4, r7, #29
10011916:	432c      	orrs	r4, r5
10011918:	2580      	movs	r5, #128	; 0x80
1001191a:	08fa      	lsrs	r2, r7, #3
1001191c:	032d      	lsls	r5, r5, #12
1001191e:	422a      	tst	r2, r5
10011920:	d008      	beq.n	10011934 <__aeabi_dsub+0x5bc>
10011922:	08c7      	lsrs	r7, r0, #3
10011924:	422f      	tst	r7, r5
10011926:	d105      	bne.n	10011934 <__aeabi_dsub+0x5bc>
10011928:	0745      	lsls	r5, r0, #29
1001192a:	002c      	movs	r4, r5
1001192c:	003a      	movs	r2, r7
1001192e:	469a      	mov	sl, r3
10011930:	08c9      	lsrs	r1, r1, #3
10011932:	430c      	orrs	r4, r1
10011934:	0f67      	lsrs	r7, r4, #29
10011936:	00d2      	lsls	r2, r2, #3
10011938:	00e5      	lsls	r5, r4, #3
1001193a:	4317      	orrs	r7, r2
1001193c:	4c36      	ldr	r4, [pc, #216]	; (10011a18 <__aeabi_dsub+0x6a0>)
1001193e:	e547      	b.n	100113d0 <__aeabi_dsub+0x58>
10011940:	0007      	movs	r7, r0
10011942:	000d      	movs	r5, r1
10011944:	0014      	movs	r4, r2
10011946:	e543      	b.n	100113d0 <__aeabi_dsub+0x58>
10011948:	003a      	movs	r2, r7
1001194a:	432a      	orrs	r2, r5
1001194c:	d043      	beq.n	100119d6 <__aeabi_dsub+0x65e>
1001194e:	0002      	movs	r2, r0
10011950:	430a      	orrs	r2, r1
10011952:	d019      	beq.n	10011988 <__aeabi_dsub+0x610>
10011954:	08ed      	lsrs	r5, r5, #3
10011956:	077c      	lsls	r4, r7, #29
10011958:	432c      	orrs	r4, r5
1001195a:	2580      	movs	r5, #128	; 0x80
1001195c:	08fa      	lsrs	r2, r7, #3
1001195e:	032d      	lsls	r5, r5, #12
10011960:	422a      	tst	r2, r5
10011962:	d007      	beq.n	10011974 <__aeabi_dsub+0x5fc>
10011964:	08c6      	lsrs	r6, r0, #3
10011966:	422e      	tst	r6, r5
10011968:	d104      	bne.n	10011974 <__aeabi_dsub+0x5fc>
1001196a:	0747      	lsls	r7, r0, #29
1001196c:	003c      	movs	r4, r7
1001196e:	0032      	movs	r2, r6
10011970:	08c9      	lsrs	r1, r1, #3
10011972:	430c      	orrs	r4, r1
10011974:	00d7      	lsls	r7, r2, #3
10011976:	0f62      	lsrs	r2, r4, #29
10011978:	00e5      	lsls	r5, r4, #3
1001197a:	4317      	orrs	r7, r2
1001197c:	469a      	mov	sl, r3
1001197e:	4c26      	ldr	r4, [pc, #152]	; (10011a18 <__aeabi_dsub+0x6a0>)
10011980:	e526      	b.n	100113d0 <__aeabi_dsub+0x58>
10011982:	2200      	movs	r2, #0
10011984:	2500      	movs	r5, #0
10011986:	e544      	b.n	10011412 <__aeabi_dsub+0x9a>
10011988:	4c23      	ldr	r4, [pc, #140]	; (10011a18 <__aeabi_dsub+0x6a0>)
1001198a:	e521      	b.n	100113d0 <__aeabi_dsub+0x58>
1001198c:	2000      	movs	r0, #0
1001198e:	e749      	b.n	10011824 <__aeabi_dsub+0x4ac>
10011990:	2300      	movs	r3, #0
10011992:	2500      	movs	r5, #0
10011994:	e5bb      	b.n	1001150e <__aeabi_dsub+0x196>
10011996:	464c      	mov	r4, r9
10011998:	003e      	movs	r6, r7
1001199a:	3c20      	subs	r4, #32
1001199c:	40e6      	lsrs	r6, r4
1001199e:	464c      	mov	r4, r9
100119a0:	46b4      	mov	ip, r6
100119a2:	2c20      	cmp	r4, #32
100119a4:	d031      	beq.n	10011a0a <__aeabi_dsub+0x692>
100119a6:	2440      	movs	r4, #64	; 0x40
100119a8:	464e      	mov	r6, r9
100119aa:	1ba6      	subs	r6, r4, r6
100119ac:	40b7      	lsls	r7, r6
100119ae:	433d      	orrs	r5, r7
100119b0:	1e6c      	subs	r4, r5, #1
100119b2:	41a5      	sbcs	r5, r4
100119b4:	4664      	mov	r4, ip
100119b6:	432c      	orrs	r4, r5
100119b8:	2700      	movs	r7, #0
100119ba:	1b0d      	subs	r5, r1, r4
100119bc:	e6e7      	b.n	1001178e <__aeabi_dsub+0x416>
100119be:	2280      	movs	r2, #128	; 0x80
100119c0:	2300      	movs	r3, #0
100119c2:	0312      	lsls	r2, r2, #12
100119c4:	4c14      	ldr	r4, [pc, #80]	; (10011a18 <__aeabi_dsub+0x6a0>)
100119c6:	2500      	movs	r5, #0
100119c8:	e5a1      	b.n	1001150e <__aeabi_dsub+0x196>
100119ca:	433d      	orrs	r5, r7
100119cc:	1e6f      	subs	r7, r5, #1
100119ce:	41bd      	sbcs	r5, r7
100119d0:	2700      	movs	r7, #0
100119d2:	b2ed      	uxtb	r5, r5
100119d4:	e760      	b.n	10011898 <__aeabi_dsub+0x520>
100119d6:	0007      	movs	r7, r0
100119d8:	000d      	movs	r5, r1
100119da:	4c0f      	ldr	r4, [pc, #60]	; (10011a18 <__aeabi_dsub+0x6a0>)
100119dc:	e4f8      	b.n	100113d0 <__aeabi_dsub+0x58>
100119de:	0007      	movs	r7, r0
100119e0:	000d      	movs	r5, r1
100119e2:	e4f5      	b.n	100113d0 <__aeabi_dsub+0x58>
100119e4:	464e      	mov	r6, r9
100119e6:	003c      	movs	r4, r7
100119e8:	3e20      	subs	r6, #32
100119ea:	40f4      	lsrs	r4, r6
100119ec:	46a0      	mov	r8, r4
100119ee:	464c      	mov	r4, r9
100119f0:	2c20      	cmp	r4, #32
100119f2:	d00e      	beq.n	10011a12 <__aeabi_dsub+0x69a>
100119f4:	2440      	movs	r4, #64	; 0x40
100119f6:	464e      	mov	r6, r9
100119f8:	1ba4      	subs	r4, r4, r6
100119fa:	40a7      	lsls	r7, r4
100119fc:	433d      	orrs	r5, r7
100119fe:	1e6f      	subs	r7, r5, #1
10011a00:	41bd      	sbcs	r5, r7
10011a02:	4644      	mov	r4, r8
10011a04:	2700      	movs	r7, #0
10011a06:	4325      	orrs	r5, r4
10011a08:	e746      	b.n	10011898 <__aeabi_dsub+0x520>
10011a0a:	2700      	movs	r7, #0
10011a0c:	e7cf      	b.n	100119ae <__aeabi_dsub+0x636>
10011a0e:	000d      	movs	r5, r1
10011a10:	e573      	b.n	100114fa <__aeabi_dsub+0x182>
10011a12:	2700      	movs	r7, #0
10011a14:	e7f2      	b.n	100119fc <__aeabi_dsub+0x684>
10011a16:	46c0      	nop			; (mov r8, r8)
10011a18:	000007ff 	.word	0x000007ff
10011a1c:	ff7fffff 	.word	0xff7fffff

10011a20 <__aeabi_d2iz>:
10011a20:	030b      	lsls	r3, r1, #12
10011a22:	b530      	push	{r4, r5, lr}
10011a24:	4d13      	ldr	r5, [pc, #76]	; (10011a74 <__aeabi_d2iz+0x54>)
10011a26:	0b1a      	lsrs	r2, r3, #12
10011a28:	004b      	lsls	r3, r1, #1
10011a2a:	0d5b      	lsrs	r3, r3, #21
10011a2c:	0fc9      	lsrs	r1, r1, #31
10011a2e:	2400      	movs	r4, #0
10011a30:	42ab      	cmp	r3, r5
10011a32:	dd11      	ble.n	10011a58 <__aeabi_d2iz+0x38>
10011a34:	4c10      	ldr	r4, [pc, #64]	; (10011a78 <__aeabi_d2iz+0x58>)
10011a36:	42a3      	cmp	r3, r4
10011a38:	dc10      	bgt.n	10011a5c <__aeabi_d2iz+0x3c>
10011a3a:	2480      	movs	r4, #128	; 0x80
10011a3c:	0364      	lsls	r4, r4, #13
10011a3e:	4322      	orrs	r2, r4
10011a40:	4c0e      	ldr	r4, [pc, #56]	; (10011a7c <__aeabi_d2iz+0x5c>)
10011a42:	1ae4      	subs	r4, r4, r3
10011a44:	2c1f      	cmp	r4, #31
10011a46:	dd0c      	ble.n	10011a62 <__aeabi_d2iz+0x42>
10011a48:	480d      	ldr	r0, [pc, #52]	; (10011a80 <__aeabi_d2iz+0x60>)
10011a4a:	1ac3      	subs	r3, r0, r3
10011a4c:	40da      	lsrs	r2, r3
10011a4e:	0013      	movs	r3, r2
10011a50:	425c      	negs	r4, r3
10011a52:	2900      	cmp	r1, #0
10011a54:	d100      	bne.n	10011a58 <__aeabi_d2iz+0x38>
10011a56:	001c      	movs	r4, r3
10011a58:	0020      	movs	r0, r4
10011a5a:	bd30      	pop	{r4, r5, pc}
10011a5c:	4b09      	ldr	r3, [pc, #36]	; (10011a84 <__aeabi_d2iz+0x64>)
10011a5e:	18cc      	adds	r4, r1, r3
10011a60:	e7fa      	b.n	10011a58 <__aeabi_d2iz+0x38>
10011a62:	40e0      	lsrs	r0, r4
10011a64:	4c08      	ldr	r4, [pc, #32]	; (10011a88 <__aeabi_d2iz+0x68>)
10011a66:	46a4      	mov	ip, r4
10011a68:	4463      	add	r3, ip
10011a6a:	409a      	lsls	r2, r3
10011a6c:	0013      	movs	r3, r2
10011a6e:	4303      	orrs	r3, r0
10011a70:	e7ee      	b.n	10011a50 <__aeabi_d2iz+0x30>
10011a72:	46c0      	nop			; (mov r8, r8)
10011a74:	000003fe 	.word	0x000003fe
10011a78:	0000041d 	.word	0x0000041d
10011a7c:	00000433 	.word	0x00000433
10011a80:	00000413 	.word	0x00000413
10011a84:	7fffffff 	.word	0x7fffffff
10011a88:	fffffbed 	.word	0xfffffbed

10011a8c <__aeabi_ui2d>:
10011a8c:	b570      	push	{r4, r5, r6, lr}
10011a8e:	1e05      	subs	r5, r0, #0
10011a90:	d028      	beq.n	10011ae4 <__aeabi_ui2d+0x58>
10011a92:	f000 f833 	bl	10011afc <__clzsi2>
10011a96:	4b15      	ldr	r3, [pc, #84]	; (10011aec <__aeabi_ui2d+0x60>)
10011a98:	4a15      	ldr	r2, [pc, #84]	; (10011af0 <__aeabi_ui2d+0x64>)
10011a9a:	1a1b      	subs	r3, r3, r0
10011a9c:	1ad2      	subs	r2, r2, r3
10011a9e:	2a1f      	cmp	r2, #31
10011aa0:	dd16      	ble.n	10011ad0 <__aeabi_ui2d+0x44>
10011aa2:	002c      	movs	r4, r5
10011aa4:	4a13      	ldr	r2, [pc, #76]	; (10011af4 <__aeabi_ui2d+0x68>)
10011aa6:	2500      	movs	r5, #0
10011aa8:	1ad2      	subs	r2, r2, r3
10011aaa:	4094      	lsls	r4, r2
10011aac:	055a      	lsls	r2, r3, #21
10011aae:	0324      	lsls	r4, r4, #12
10011ab0:	0b24      	lsrs	r4, r4, #12
10011ab2:	0d52      	lsrs	r2, r2, #21
10011ab4:	2100      	movs	r1, #0
10011ab6:	0324      	lsls	r4, r4, #12
10011ab8:	0d0b      	lsrs	r3, r1, #20
10011aba:	0b24      	lsrs	r4, r4, #12
10011abc:	051b      	lsls	r3, r3, #20
10011abe:	4323      	orrs	r3, r4
10011ac0:	4c0d      	ldr	r4, [pc, #52]	; (10011af8 <__aeabi_ui2d+0x6c>)
10011ac2:	0512      	lsls	r2, r2, #20
10011ac4:	4023      	ands	r3, r4
10011ac6:	4313      	orrs	r3, r2
10011ac8:	005b      	lsls	r3, r3, #1
10011aca:	0028      	movs	r0, r5
10011acc:	0859      	lsrs	r1, r3, #1
10011ace:	bd70      	pop	{r4, r5, r6, pc}
10011ad0:	210b      	movs	r1, #11
10011ad2:	002c      	movs	r4, r5
10011ad4:	1a08      	subs	r0, r1, r0
10011ad6:	40c4      	lsrs	r4, r0
10011ad8:	4095      	lsls	r5, r2
10011ada:	0324      	lsls	r4, r4, #12
10011adc:	055a      	lsls	r2, r3, #21
10011ade:	0b24      	lsrs	r4, r4, #12
10011ae0:	0d52      	lsrs	r2, r2, #21
10011ae2:	e7e7      	b.n	10011ab4 <__aeabi_ui2d+0x28>
10011ae4:	2200      	movs	r2, #0
10011ae6:	2400      	movs	r4, #0
10011ae8:	e7e4      	b.n	10011ab4 <__aeabi_ui2d+0x28>
10011aea:	46c0      	nop			; (mov r8, r8)
10011aec:	0000041e 	.word	0x0000041e
10011af0:	00000433 	.word	0x00000433
10011af4:	00000413 	.word	0x00000413
10011af8:	800fffff 	.word	0x800fffff

10011afc <__clzsi2>:
10011afc:	211c      	movs	r1, #28
10011afe:	2301      	movs	r3, #1
10011b00:	041b      	lsls	r3, r3, #16
10011b02:	4298      	cmp	r0, r3
10011b04:	d301      	bcc.n	10011b0a <__clzsi2+0xe>
10011b06:	0c00      	lsrs	r0, r0, #16
10011b08:	3910      	subs	r1, #16
10011b0a:	0a1b      	lsrs	r3, r3, #8
10011b0c:	4298      	cmp	r0, r3
10011b0e:	d301      	bcc.n	10011b14 <__clzsi2+0x18>
10011b10:	0a00      	lsrs	r0, r0, #8
10011b12:	3908      	subs	r1, #8
10011b14:	091b      	lsrs	r3, r3, #4
10011b16:	4298      	cmp	r0, r3
10011b18:	d301      	bcc.n	10011b1e <__clzsi2+0x22>
10011b1a:	0900      	lsrs	r0, r0, #4
10011b1c:	3904      	subs	r1, #4
10011b1e:	a202      	add	r2, pc, #8	; (adr r2, 10011b28 <__clzsi2+0x2c>)
10011b20:	5c10      	ldrb	r0, [r2, r0]
10011b22:	1840      	adds	r0, r0, r1
10011b24:	4770      	bx	lr
10011b26:	46c0      	nop			; (mov r8, r8)
10011b28:	02020304 	.word	0x02020304
10011b2c:	01010101 	.word	0x01010101
	...

10011b38 <__libc_init_array>:
10011b38:	4b0e      	ldr	r3, [pc, #56]	; (10011b74 <__libc_init_array+0x3c>)
10011b3a:	b570      	push	{r4, r5, r6, lr}
10011b3c:	2500      	movs	r5, #0
10011b3e:	001e      	movs	r6, r3
10011b40:	4c0d      	ldr	r4, [pc, #52]	; (10011b78 <__libc_init_array+0x40>)
10011b42:	1ae4      	subs	r4, r4, r3
10011b44:	10a4      	asrs	r4, r4, #2
10011b46:	42a5      	cmp	r5, r4
10011b48:	d004      	beq.n	10011b54 <__libc_init_array+0x1c>
10011b4a:	00ab      	lsls	r3, r5, #2
10011b4c:	58f3      	ldr	r3, [r6, r3]
10011b4e:	4798      	blx	r3
10011b50:	3501      	adds	r5, #1
10011b52:	e7f8      	b.n	10011b46 <__libc_init_array+0xe>
10011b54:	f002 f92c 	bl	10013db0 <_init>
10011b58:	4b08      	ldr	r3, [pc, #32]	; (10011b7c <__libc_init_array+0x44>)
10011b5a:	2500      	movs	r5, #0
10011b5c:	001e      	movs	r6, r3
10011b5e:	4c08      	ldr	r4, [pc, #32]	; (10011b80 <__libc_init_array+0x48>)
10011b60:	1ae4      	subs	r4, r4, r3
10011b62:	10a4      	asrs	r4, r4, #2
10011b64:	42a5      	cmp	r5, r4
10011b66:	d004      	beq.n	10011b72 <__libc_init_array+0x3a>
10011b68:	00ab      	lsls	r3, r5, #2
10011b6a:	58f3      	ldr	r3, [r6, r3]
10011b6c:	4798      	blx	r3
10011b6e:	3501      	adds	r5, #1
10011b70:	e7f8      	b.n	10011b64 <__libc_init_array+0x2c>
10011b72:	bd70      	pop	{r4, r5, r6, pc}
10011b74:	10013dbc 	.word	0x10013dbc
10011b78:	10013dbc 	.word	0x10013dbc
10011b7c:	10013dbc 	.word	0x10013dbc
10011b80:	10013dc0 	.word	0x10013dc0

10011b84 <malloc>:
10011b84:	b510      	push	{r4, lr}
10011b86:	4b03      	ldr	r3, [pc, #12]	; (10011b94 <malloc+0x10>)
10011b88:	0001      	movs	r1, r0
10011b8a:	6818      	ldr	r0, [r3, #0]
10011b8c:	f000 f86a 	bl	10011c64 <_malloc_r>
10011b90:	bd10      	pop	{r4, pc}
10011b92:	46c0      	nop			; (mov r8, r8)
10011b94:	10013e40 	.word	0x10013e40

10011b98 <memcmp>:
10011b98:	b530      	push	{r4, r5, lr}
10011b9a:	2400      	movs	r4, #0
10011b9c:	42a2      	cmp	r2, r4
10011b9e:	d008      	beq.n	10011bb2 <memcmp+0x1a>
10011ba0:	5d03      	ldrb	r3, [r0, r4]
10011ba2:	1c65      	adds	r5, r4, #1
10011ba4:	5d0c      	ldrb	r4, [r1, r4]
10011ba6:	42a3      	cmp	r3, r4
10011ba8:	d001      	beq.n	10011bae <memcmp+0x16>
10011baa:	1b18      	subs	r0, r3, r4
10011bac:	e002      	b.n	10011bb4 <memcmp+0x1c>
10011bae:	002c      	movs	r4, r5
10011bb0:	e7f4      	b.n	10011b9c <memcmp+0x4>
10011bb2:	2000      	movs	r0, #0
10011bb4:	bd30      	pop	{r4, r5, pc}

10011bb6 <memcpy>:
10011bb6:	2300      	movs	r3, #0
10011bb8:	b510      	push	{r4, lr}
10011bba:	429a      	cmp	r2, r3
10011bbc:	d003      	beq.n	10011bc6 <memcpy+0x10>
10011bbe:	5ccc      	ldrb	r4, [r1, r3]
10011bc0:	54c4      	strb	r4, [r0, r3]
10011bc2:	3301      	adds	r3, #1
10011bc4:	e7f9      	b.n	10011bba <memcpy+0x4>
10011bc6:	bd10      	pop	{r4, pc}

10011bc8 <memset>:
10011bc8:	0003      	movs	r3, r0
10011bca:	1882      	adds	r2, r0, r2
10011bcc:	4293      	cmp	r3, r2
10011bce:	d002      	beq.n	10011bd6 <memset+0xe>
10011bd0:	7019      	strb	r1, [r3, #0]
10011bd2:	3301      	adds	r3, #1
10011bd4:	e7fa      	b.n	10011bcc <memset+0x4>
10011bd6:	4770      	bx	lr

10011bd8 <_free_r>:
10011bd8:	b530      	push	{r4, r5, lr}
10011bda:	2900      	cmp	r1, #0
10011bdc:	d03e      	beq.n	10011c5c <_free_r+0x84>
10011bde:	3904      	subs	r1, #4
10011be0:	680b      	ldr	r3, [r1, #0]
10011be2:	2b00      	cmp	r3, #0
10011be4:	da00      	bge.n	10011be8 <_free_r+0x10>
10011be6:	18c9      	adds	r1, r1, r3
10011be8:	4a1d      	ldr	r2, [pc, #116]	; (10011c60 <_free_r+0x88>)
10011bea:	6813      	ldr	r3, [r2, #0]
10011bec:	0014      	movs	r4, r2
10011bee:	2b00      	cmp	r3, #0
10011bf0:	d102      	bne.n	10011bf8 <_free_r+0x20>
10011bf2:	604b      	str	r3, [r1, #4]
10011bf4:	6011      	str	r1, [r2, #0]
10011bf6:	e031      	b.n	10011c5c <_free_r+0x84>
10011bf8:	428b      	cmp	r3, r1
10011bfa:	d90d      	bls.n	10011c18 <_free_r+0x40>
10011bfc:	680a      	ldr	r2, [r1, #0]
10011bfe:	1888      	adds	r0, r1, r2
10011c00:	4283      	cmp	r3, r0
10011c02:	d103      	bne.n	10011c0c <_free_r+0x34>
10011c04:	6818      	ldr	r0, [r3, #0]
10011c06:	685b      	ldr	r3, [r3, #4]
10011c08:	1882      	adds	r2, r0, r2
10011c0a:	600a      	str	r2, [r1, #0]
10011c0c:	604b      	str	r3, [r1, #4]
10011c0e:	6021      	str	r1, [r4, #0]
10011c10:	e024      	b.n	10011c5c <_free_r+0x84>
10011c12:	428a      	cmp	r2, r1
10011c14:	d803      	bhi.n	10011c1e <_free_r+0x46>
10011c16:	0013      	movs	r3, r2
10011c18:	685a      	ldr	r2, [r3, #4]
10011c1a:	2a00      	cmp	r2, #0
10011c1c:	d1f9      	bne.n	10011c12 <_free_r+0x3a>
10011c1e:	681d      	ldr	r5, [r3, #0]
10011c20:	195c      	adds	r4, r3, r5
10011c22:	428c      	cmp	r4, r1
10011c24:	d10b      	bne.n	10011c3e <_free_r+0x66>
10011c26:	6809      	ldr	r1, [r1, #0]
10011c28:	1869      	adds	r1, r5, r1
10011c2a:	1858      	adds	r0, r3, r1
10011c2c:	6019      	str	r1, [r3, #0]
10011c2e:	4282      	cmp	r2, r0
10011c30:	d114      	bne.n	10011c5c <_free_r+0x84>
10011c32:	6810      	ldr	r0, [r2, #0]
10011c34:	6852      	ldr	r2, [r2, #4]
10011c36:	1841      	adds	r1, r0, r1
10011c38:	6019      	str	r1, [r3, #0]
10011c3a:	605a      	str	r2, [r3, #4]
10011c3c:	e00e      	b.n	10011c5c <_free_r+0x84>
10011c3e:	428c      	cmp	r4, r1
10011c40:	d902      	bls.n	10011c48 <_free_r+0x70>
10011c42:	230c      	movs	r3, #12
10011c44:	6003      	str	r3, [r0, #0]
10011c46:	e009      	b.n	10011c5c <_free_r+0x84>
10011c48:	6808      	ldr	r0, [r1, #0]
10011c4a:	180c      	adds	r4, r1, r0
10011c4c:	42a2      	cmp	r2, r4
10011c4e:	d103      	bne.n	10011c58 <_free_r+0x80>
10011c50:	6814      	ldr	r4, [r2, #0]
10011c52:	6852      	ldr	r2, [r2, #4]
10011c54:	1820      	adds	r0, r4, r0
10011c56:	6008      	str	r0, [r1, #0]
10011c58:	604a      	str	r2, [r1, #4]
10011c5a:	6059      	str	r1, [r3, #4]
10011c5c:	bd30      	pop	{r4, r5, pc}
10011c5e:	46c0      	nop			; (mov r8, r8)
10011c60:	10015904 	.word	0x10015904

10011c64 <_malloc_r>:
10011c64:	2303      	movs	r3, #3
10011c66:	b570      	push	{r4, r5, r6, lr}
10011c68:	1ccd      	adds	r5, r1, #3
10011c6a:	439d      	bics	r5, r3
10011c6c:	3508      	adds	r5, #8
10011c6e:	0006      	movs	r6, r0
10011c70:	2d0c      	cmp	r5, #12
10011c72:	d201      	bcs.n	10011c78 <_malloc_r+0x14>
10011c74:	250c      	movs	r5, #12
10011c76:	e005      	b.n	10011c84 <_malloc_r+0x20>
10011c78:	2d00      	cmp	r5, #0
10011c7a:	da03      	bge.n	10011c84 <_malloc_r+0x20>
10011c7c:	230c      	movs	r3, #12
10011c7e:	2000      	movs	r0, #0
10011c80:	6033      	str	r3, [r6, #0]
10011c82:	e040      	b.n	10011d06 <_malloc_r+0xa2>
10011c84:	42a9      	cmp	r1, r5
10011c86:	d8f9      	bhi.n	10011c7c <_malloc_r+0x18>
10011c88:	4b1f      	ldr	r3, [pc, #124]	; (10011d08 <_malloc_r+0xa4>)
10011c8a:	681c      	ldr	r4, [r3, #0]
10011c8c:	001a      	movs	r2, r3
10011c8e:	0021      	movs	r1, r4
10011c90:	2900      	cmp	r1, #0
10011c92:	d013      	beq.n	10011cbc <_malloc_r+0x58>
10011c94:	680b      	ldr	r3, [r1, #0]
10011c96:	1b5b      	subs	r3, r3, r5
10011c98:	d40d      	bmi.n	10011cb6 <_malloc_r+0x52>
10011c9a:	2b0b      	cmp	r3, #11
10011c9c:	d902      	bls.n	10011ca4 <_malloc_r+0x40>
10011c9e:	600b      	str	r3, [r1, #0]
10011ca0:	18cc      	adds	r4, r1, r3
10011ca2:	e01e      	b.n	10011ce2 <_malloc_r+0x7e>
10011ca4:	428c      	cmp	r4, r1
10011ca6:	d102      	bne.n	10011cae <_malloc_r+0x4a>
10011ca8:	6863      	ldr	r3, [r4, #4]
10011caa:	6013      	str	r3, [r2, #0]
10011cac:	e01a      	b.n	10011ce4 <_malloc_r+0x80>
10011cae:	684b      	ldr	r3, [r1, #4]
10011cb0:	6063      	str	r3, [r4, #4]
10011cb2:	000c      	movs	r4, r1
10011cb4:	e016      	b.n	10011ce4 <_malloc_r+0x80>
10011cb6:	000c      	movs	r4, r1
10011cb8:	6849      	ldr	r1, [r1, #4]
10011cba:	e7e9      	b.n	10011c90 <_malloc_r+0x2c>
10011cbc:	4c13      	ldr	r4, [pc, #76]	; (10011d0c <_malloc_r+0xa8>)
10011cbe:	6823      	ldr	r3, [r4, #0]
10011cc0:	2b00      	cmp	r3, #0
10011cc2:	d103      	bne.n	10011ccc <_malloc_r+0x68>
10011cc4:	0030      	movs	r0, r6
10011cc6:	f000 f8f9 	bl	10011ebc <_sbrk_r>
10011cca:	6020      	str	r0, [r4, #0]
10011ccc:	0029      	movs	r1, r5
10011cce:	0030      	movs	r0, r6
10011cd0:	f000 f8f4 	bl	10011ebc <_sbrk_r>
10011cd4:	1c43      	adds	r3, r0, #1
10011cd6:	d0d1      	beq.n	10011c7c <_malloc_r+0x18>
10011cd8:	2303      	movs	r3, #3
10011cda:	1cc4      	adds	r4, r0, #3
10011cdc:	439c      	bics	r4, r3
10011cde:	42a0      	cmp	r0, r4
10011ce0:	d10a      	bne.n	10011cf8 <_malloc_r+0x94>
10011ce2:	6025      	str	r5, [r4, #0]
10011ce4:	0020      	movs	r0, r4
10011ce6:	2207      	movs	r2, #7
10011ce8:	300b      	adds	r0, #11
10011cea:	1d23      	adds	r3, r4, #4
10011cec:	4390      	bics	r0, r2
10011cee:	1ac3      	subs	r3, r0, r3
10011cf0:	d009      	beq.n	10011d06 <_malloc_r+0xa2>
10011cf2:	425a      	negs	r2, r3
10011cf4:	50e2      	str	r2, [r4, r3]
10011cf6:	e006      	b.n	10011d06 <_malloc_r+0xa2>
10011cf8:	1a21      	subs	r1, r4, r0
10011cfa:	0030      	movs	r0, r6
10011cfc:	f000 f8de 	bl	10011ebc <_sbrk_r>
10011d00:	1c43      	adds	r3, r0, #1
10011d02:	d1ee      	bne.n	10011ce2 <_malloc_r+0x7e>
10011d04:	e7ba      	b.n	10011c7c <_malloc_r+0x18>
10011d06:	bd70      	pop	{r4, r5, r6, pc}
10011d08:	10015904 	.word	0x10015904
10011d0c:	10015900 	.word	0x10015900

10011d10 <iprintf>:
10011d10:	b40f      	push	{r0, r1, r2, r3}
10011d12:	4b0b      	ldr	r3, [pc, #44]	; (10011d40 <iprintf+0x30>)
10011d14:	b513      	push	{r0, r1, r4, lr}
10011d16:	681c      	ldr	r4, [r3, #0]
10011d18:	2c00      	cmp	r4, #0
10011d1a:	d005      	beq.n	10011d28 <iprintf+0x18>
10011d1c:	69a3      	ldr	r3, [r4, #24]
10011d1e:	2b00      	cmp	r3, #0
10011d20:	d102      	bne.n	10011d28 <iprintf+0x18>
10011d22:	0020      	movs	r0, r4
10011d24:	f000 fb58 	bl	100123d8 <__sinit>
10011d28:	ab05      	add	r3, sp, #20
10011d2a:	9a04      	ldr	r2, [sp, #16]
10011d2c:	68a1      	ldr	r1, [r4, #8]
10011d2e:	0020      	movs	r0, r4
10011d30:	9301      	str	r3, [sp, #4]
10011d32:	f000 fc71 	bl	10012618 <_vfiprintf_r>
10011d36:	bc16      	pop	{r1, r2, r4}
10011d38:	bc08      	pop	{r3}
10011d3a:	b004      	add	sp, #16
10011d3c:	4718      	bx	r3
10011d3e:	46c0      	nop			; (mov r8, r8)
10011d40:	10013e40 	.word	0x10013e40

10011d44 <putchar>:
10011d44:	4b08      	ldr	r3, [pc, #32]	; (10011d68 <putchar+0x24>)
10011d46:	b570      	push	{r4, r5, r6, lr}
10011d48:	681c      	ldr	r4, [r3, #0]
10011d4a:	0005      	movs	r5, r0
10011d4c:	2c00      	cmp	r4, #0
10011d4e:	d005      	beq.n	10011d5c <putchar+0x18>
10011d50:	69a3      	ldr	r3, [r4, #24]
10011d52:	2b00      	cmp	r3, #0
10011d54:	d102      	bne.n	10011d5c <putchar+0x18>
10011d56:	0020      	movs	r0, r4
10011d58:	f000 fb3e 	bl	100123d8 <__sinit>
10011d5c:	0029      	movs	r1, r5
10011d5e:	68a2      	ldr	r2, [r4, #8]
10011d60:	0020      	movs	r0, r4
10011d62:	f000 ff05 	bl	10012b70 <_putc_r>
10011d66:	bd70      	pop	{r4, r5, r6, pc}
10011d68:	10013e40 	.word	0x10013e40

10011d6c <_puts_r>:
10011d6c:	b570      	push	{r4, r5, r6, lr}
10011d6e:	0005      	movs	r5, r0
10011d70:	000e      	movs	r6, r1
10011d72:	2800      	cmp	r0, #0
10011d74:	d004      	beq.n	10011d80 <_puts_r+0x14>
10011d76:	6983      	ldr	r3, [r0, #24]
10011d78:	2b00      	cmp	r3, #0
10011d7a:	d101      	bne.n	10011d80 <_puts_r+0x14>
10011d7c:	f000 fb2c 	bl	100123d8 <__sinit>
10011d80:	69ab      	ldr	r3, [r5, #24]
10011d82:	68ac      	ldr	r4, [r5, #8]
10011d84:	2b00      	cmp	r3, #0
10011d86:	d102      	bne.n	10011d8e <_puts_r+0x22>
10011d88:	0028      	movs	r0, r5
10011d8a:	f000 fb25 	bl	100123d8 <__sinit>
10011d8e:	4b25      	ldr	r3, [pc, #148]	; (10011e24 <_puts_r+0xb8>)
10011d90:	429c      	cmp	r4, r3
10011d92:	d101      	bne.n	10011d98 <_puts_r+0x2c>
10011d94:	686c      	ldr	r4, [r5, #4]
10011d96:	e008      	b.n	10011daa <_puts_r+0x3e>
10011d98:	4b23      	ldr	r3, [pc, #140]	; (10011e28 <_puts_r+0xbc>)
10011d9a:	429c      	cmp	r4, r3
10011d9c:	d101      	bne.n	10011da2 <_puts_r+0x36>
10011d9e:	68ac      	ldr	r4, [r5, #8]
10011da0:	e003      	b.n	10011daa <_puts_r+0x3e>
10011da2:	4b22      	ldr	r3, [pc, #136]	; (10011e2c <_puts_r+0xc0>)
10011da4:	429c      	cmp	r4, r3
10011da6:	d100      	bne.n	10011daa <_puts_r+0x3e>
10011da8:	68ec      	ldr	r4, [r5, #12]
10011daa:	89a3      	ldrh	r3, [r4, #12]
10011dac:	071b      	lsls	r3, r3, #28
10011dae:	d502      	bpl.n	10011db6 <_puts_r+0x4a>
10011db0:	6923      	ldr	r3, [r4, #16]
10011db2:	2b00      	cmp	r3, #0
10011db4:	d111      	bne.n	10011dda <_puts_r+0x6e>
10011db6:	0021      	movs	r1, r4
10011db8:	0028      	movs	r0, r5
10011dba:	f000 f9a3 	bl	10012104 <__swsetup_r>
10011dbe:	2800      	cmp	r0, #0
10011dc0:	d00b      	beq.n	10011dda <_puts_r+0x6e>
10011dc2:	2001      	movs	r0, #1
10011dc4:	4240      	negs	r0, r0
10011dc6:	e02b      	b.n	10011e20 <_puts_r+0xb4>
10011dc8:	3b01      	subs	r3, #1
10011dca:	3601      	adds	r6, #1
10011dcc:	60a3      	str	r3, [r4, #8]
10011dce:	2b00      	cmp	r3, #0
10011dd0:	db08      	blt.n	10011de4 <_puts_r+0x78>
10011dd2:	6823      	ldr	r3, [r4, #0]
10011dd4:	1c5a      	adds	r2, r3, #1
10011dd6:	6022      	str	r2, [r4, #0]
10011dd8:	7019      	strb	r1, [r3, #0]
10011dda:	7831      	ldrb	r1, [r6, #0]
10011ddc:	68a3      	ldr	r3, [r4, #8]
10011dde:	2900      	cmp	r1, #0
10011de0:	d1f2      	bne.n	10011dc8 <_puts_r+0x5c>
10011de2:	e00b      	b.n	10011dfc <_puts_r+0x90>
10011de4:	69a2      	ldr	r2, [r4, #24]
10011de6:	4293      	cmp	r3, r2
10011de8:	db01      	blt.n	10011dee <_puts_r+0x82>
10011dea:	290a      	cmp	r1, #10
10011dec:	d1f1      	bne.n	10011dd2 <_puts_r+0x66>
10011dee:	0022      	movs	r2, r4
10011df0:	0028      	movs	r0, r5
10011df2:	f000 f92f 	bl	10012054 <__swbuf_r>
10011df6:	1c43      	adds	r3, r0, #1
10011df8:	d1ef      	bne.n	10011dda <_puts_r+0x6e>
10011dfa:	e7e2      	b.n	10011dc2 <_puts_r+0x56>
10011dfc:	3b01      	subs	r3, #1
10011dfe:	60a3      	str	r3, [r4, #8]
10011e00:	2b00      	cmp	r3, #0
10011e02:	da08      	bge.n	10011e16 <_puts_r+0xaa>
10011e04:	0022      	movs	r2, r4
10011e06:	310a      	adds	r1, #10
10011e08:	0028      	movs	r0, r5
10011e0a:	f000 f923 	bl	10012054 <__swbuf_r>
10011e0e:	1c43      	adds	r3, r0, #1
10011e10:	d0d7      	beq.n	10011dc2 <_puts_r+0x56>
10011e12:	200a      	movs	r0, #10
10011e14:	e004      	b.n	10011e20 <_puts_r+0xb4>
10011e16:	200a      	movs	r0, #10
10011e18:	6823      	ldr	r3, [r4, #0]
10011e1a:	1c5a      	adds	r2, r3, #1
10011e1c:	6022      	str	r2, [r4, #0]
10011e1e:	7018      	strb	r0, [r3, #0]
10011e20:	bd70      	pop	{r4, r5, r6, pc}
10011e22:	46c0      	nop			; (mov r8, r8)
10011e24:	10013d1c 	.word	0x10013d1c
10011e28:	10013d3c 	.word	0x10013d3c
10011e2c:	10013d5c 	.word	0x10013d5c

10011e30 <puts>:
10011e30:	b510      	push	{r4, lr}
10011e32:	4b03      	ldr	r3, [pc, #12]	; (10011e40 <puts+0x10>)
10011e34:	0001      	movs	r1, r0
10011e36:	6818      	ldr	r0, [r3, #0]
10011e38:	f7ff ff98 	bl	10011d6c <_puts_r>
10011e3c:	bd10      	pop	{r4, pc}
10011e3e:	46c0      	nop			; (mov r8, r8)
10011e40:	10013e40 	.word	0x10013e40

10011e44 <rand>:
10011e44:	4b15      	ldr	r3, [pc, #84]	; (10011e9c <rand+0x58>)
10011e46:	b510      	push	{r4, lr}
10011e48:	681c      	ldr	r4, [r3, #0]
10011e4a:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10011e4c:	2b00      	cmp	r3, #0
10011e4e:	d115      	bne.n	10011e7c <rand+0x38>
10011e50:	2018      	movs	r0, #24
10011e52:	f7ff fe97 	bl	10011b84 <malloc>
10011e56:	4b12      	ldr	r3, [pc, #72]	; (10011ea0 <rand+0x5c>)
10011e58:	63a0      	str	r0, [r4, #56]	; 0x38
10011e5a:	8003      	strh	r3, [r0, #0]
10011e5c:	4b11      	ldr	r3, [pc, #68]	; (10011ea4 <rand+0x60>)
10011e5e:	2201      	movs	r2, #1
10011e60:	8043      	strh	r3, [r0, #2]
10011e62:	4b11      	ldr	r3, [pc, #68]	; (10011ea8 <rand+0x64>)
10011e64:	8083      	strh	r3, [r0, #4]
10011e66:	4b11      	ldr	r3, [pc, #68]	; (10011eac <rand+0x68>)
10011e68:	80c3      	strh	r3, [r0, #6]
10011e6a:	4b11      	ldr	r3, [pc, #68]	; (10011eb0 <rand+0x6c>)
10011e6c:	8103      	strh	r3, [r0, #8]
10011e6e:	2305      	movs	r3, #5
10011e70:	8143      	strh	r3, [r0, #10]
10011e72:	3306      	adds	r3, #6
10011e74:	8183      	strh	r3, [r0, #12]
10011e76:	2300      	movs	r3, #0
10011e78:	6102      	str	r2, [r0, #16]
10011e7a:	6143      	str	r3, [r0, #20]
10011e7c:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10011e7e:	4a0d      	ldr	r2, [pc, #52]	; (10011eb4 <rand+0x70>)
10011e80:	6920      	ldr	r0, [r4, #16]
10011e82:	6961      	ldr	r1, [r4, #20]
10011e84:	4b0c      	ldr	r3, [pc, #48]	; (10011eb8 <rand+0x74>)
10011e86:	f7fe fea5 	bl	10010bd4 <__aeabi_lmul>
10011e8a:	2201      	movs	r2, #1
10011e8c:	2300      	movs	r3, #0
10011e8e:	1880      	adds	r0, r0, r2
10011e90:	4159      	adcs	r1, r3
10011e92:	6120      	str	r0, [r4, #16]
10011e94:	6161      	str	r1, [r4, #20]
10011e96:	0048      	lsls	r0, r1, #1
10011e98:	0840      	lsrs	r0, r0, #1
10011e9a:	bd10      	pop	{r4, pc}
10011e9c:	10013e40 	.word	0x10013e40
10011ea0:	0000330e 	.word	0x0000330e
10011ea4:	ffffabcd 	.word	0xffffabcd
10011ea8:	00001234 	.word	0x00001234
10011eac:	ffffe66d 	.word	0xffffe66d
10011eb0:	ffffdeec 	.word	0xffffdeec
10011eb4:	4c957f2d 	.word	0x4c957f2d
10011eb8:	5851f42d 	.word	0x5851f42d

10011ebc <_sbrk_r>:
10011ebc:	2300      	movs	r3, #0
10011ebe:	b570      	push	{r4, r5, r6, lr}
10011ec0:	4c06      	ldr	r4, [pc, #24]	; (10011edc <_sbrk_r+0x20>)
10011ec2:	0005      	movs	r5, r0
10011ec4:	0008      	movs	r0, r1
10011ec6:	6023      	str	r3, [r4, #0]
10011ec8:	f7f6 fa30 	bl	1000832c <_sbrk>
10011ecc:	1c43      	adds	r3, r0, #1
10011ece:	d103      	bne.n	10011ed8 <_sbrk_r+0x1c>
10011ed0:	6823      	ldr	r3, [r4, #0]
10011ed2:	2b00      	cmp	r3, #0
10011ed4:	d000      	beq.n	10011ed8 <_sbrk_r+0x1c>
10011ed6:	602b      	str	r3, [r5, #0]
10011ed8:	bd70      	pop	{r4, r5, r6, pc}
10011eda:	46c0      	nop			; (mov r8, r8)
10011edc:	10016d3c 	.word	0x10016d3c

10011ee0 <setbuf>:
10011ee0:	424a      	negs	r2, r1
10011ee2:	414a      	adcs	r2, r1
10011ee4:	2380      	movs	r3, #128	; 0x80
10011ee6:	b510      	push	{r4, lr}
10011ee8:	0052      	lsls	r2, r2, #1
10011eea:	00db      	lsls	r3, r3, #3
10011eec:	f000 f802 	bl	10011ef4 <setvbuf>
10011ef0:	bd10      	pop	{r4, pc}
	...

10011ef4 <setvbuf>:
10011ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10011ef6:	001d      	movs	r5, r3
10011ef8:	4b51      	ldr	r3, [pc, #324]	; (10012040 <setvbuf+0x14c>)
10011efa:	b085      	sub	sp, #20
10011efc:	681e      	ldr	r6, [r3, #0]
10011efe:	0004      	movs	r4, r0
10011f00:	000f      	movs	r7, r1
10011f02:	9200      	str	r2, [sp, #0]
10011f04:	2e00      	cmp	r6, #0
10011f06:	d005      	beq.n	10011f14 <setvbuf+0x20>
10011f08:	69b3      	ldr	r3, [r6, #24]
10011f0a:	2b00      	cmp	r3, #0
10011f0c:	d102      	bne.n	10011f14 <setvbuf+0x20>
10011f0e:	0030      	movs	r0, r6
10011f10:	f000 fa62 	bl	100123d8 <__sinit>
10011f14:	4b4b      	ldr	r3, [pc, #300]	; (10012044 <setvbuf+0x150>)
10011f16:	429c      	cmp	r4, r3
10011f18:	d101      	bne.n	10011f1e <setvbuf+0x2a>
10011f1a:	6874      	ldr	r4, [r6, #4]
10011f1c:	e008      	b.n	10011f30 <setvbuf+0x3c>
10011f1e:	4b4a      	ldr	r3, [pc, #296]	; (10012048 <setvbuf+0x154>)
10011f20:	429c      	cmp	r4, r3
10011f22:	d101      	bne.n	10011f28 <setvbuf+0x34>
10011f24:	68b4      	ldr	r4, [r6, #8]
10011f26:	e003      	b.n	10011f30 <setvbuf+0x3c>
10011f28:	4b48      	ldr	r3, [pc, #288]	; (1001204c <setvbuf+0x158>)
10011f2a:	429c      	cmp	r4, r3
10011f2c:	d100      	bne.n	10011f30 <setvbuf+0x3c>
10011f2e:	68f4      	ldr	r4, [r6, #12]
10011f30:	9b00      	ldr	r3, [sp, #0]
10011f32:	2b02      	cmp	r3, #2
10011f34:	d005      	beq.n	10011f42 <setvbuf+0x4e>
10011f36:	2b01      	cmp	r3, #1
10011f38:	d900      	bls.n	10011f3c <setvbuf+0x48>
10011f3a:	e07c      	b.n	10012036 <setvbuf+0x142>
10011f3c:	2d00      	cmp	r5, #0
10011f3e:	da00      	bge.n	10011f42 <setvbuf+0x4e>
10011f40:	e079      	b.n	10012036 <setvbuf+0x142>
10011f42:	0021      	movs	r1, r4
10011f44:	0030      	movs	r0, r6
10011f46:	f000 f9d9 	bl	100122fc <_fflush_r>
10011f4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10011f4c:	2900      	cmp	r1, #0
10011f4e:	d008      	beq.n	10011f62 <setvbuf+0x6e>
10011f50:	0023      	movs	r3, r4
10011f52:	3344      	adds	r3, #68	; 0x44
10011f54:	4299      	cmp	r1, r3
10011f56:	d002      	beq.n	10011f5e <setvbuf+0x6a>
10011f58:	0030      	movs	r0, r6
10011f5a:	f7ff fe3d 	bl	10011bd8 <_free_r>
10011f5e:	2300      	movs	r3, #0
10011f60:	6363      	str	r3, [r4, #52]	; 0x34
10011f62:	2300      	movs	r3, #0
10011f64:	61a3      	str	r3, [r4, #24]
10011f66:	6063      	str	r3, [r4, #4]
10011f68:	89a3      	ldrh	r3, [r4, #12]
10011f6a:	061b      	lsls	r3, r3, #24
10011f6c:	d503      	bpl.n	10011f76 <setvbuf+0x82>
10011f6e:	6921      	ldr	r1, [r4, #16]
10011f70:	0030      	movs	r0, r6
10011f72:	f7ff fe31 	bl	10011bd8 <_free_r>
10011f76:	89a2      	ldrh	r2, [r4, #12]
10011f78:	4b35      	ldr	r3, [pc, #212]	; (10012050 <setvbuf+0x15c>)
10011f7a:	4013      	ands	r3, r2
10011f7c:	81a3      	strh	r3, [r4, #12]
10011f7e:	9b00      	ldr	r3, [sp, #0]
10011f80:	2b02      	cmp	r3, #2
10011f82:	d021      	beq.n	10011fc8 <setvbuf+0xd4>
10011f84:	ab03      	add	r3, sp, #12
10011f86:	aa02      	add	r2, sp, #8
10011f88:	0021      	movs	r1, r4
10011f8a:	0030      	movs	r0, r6
10011f8c:	f000 fab8 	bl	10012500 <__swhatbuf_r>
10011f90:	89a3      	ldrh	r3, [r4, #12]
10011f92:	4318      	orrs	r0, r3
10011f94:	81a0      	strh	r0, [r4, #12]
10011f96:	2d00      	cmp	r5, #0
10011f98:	d101      	bne.n	10011f9e <setvbuf+0xaa>
10011f9a:	9d02      	ldr	r5, [sp, #8]
10011f9c:	e001      	b.n	10011fa2 <setvbuf+0xae>
10011f9e:	2f00      	cmp	r7, #0
10011fa0:	d125      	bne.n	10011fee <setvbuf+0xfa>
10011fa2:	0028      	movs	r0, r5
10011fa4:	f7ff fdee 	bl	10011b84 <malloc>
10011fa8:	9501      	str	r5, [sp, #4]
10011faa:	1e07      	subs	r7, r0, #0
10011fac:	d11a      	bne.n	10011fe4 <setvbuf+0xf0>
10011fae:	9b02      	ldr	r3, [sp, #8]
10011fb0:	9301      	str	r3, [sp, #4]
10011fb2:	42ab      	cmp	r3, r5
10011fb4:	d102      	bne.n	10011fbc <setvbuf+0xc8>
10011fb6:	2001      	movs	r0, #1
10011fb8:	4240      	negs	r0, r0
10011fba:	e006      	b.n	10011fca <setvbuf+0xd6>
10011fbc:	9801      	ldr	r0, [sp, #4]
10011fbe:	f7ff fde1 	bl	10011b84 <malloc>
10011fc2:	1e07      	subs	r7, r0, #0
10011fc4:	d10e      	bne.n	10011fe4 <setvbuf+0xf0>
10011fc6:	e7f6      	b.n	10011fb6 <setvbuf+0xc2>
10011fc8:	2000      	movs	r0, #0
10011fca:	2202      	movs	r2, #2
10011fcc:	89a3      	ldrh	r3, [r4, #12]
10011fce:	4313      	orrs	r3, r2
10011fd0:	81a3      	strh	r3, [r4, #12]
10011fd2:	2300      	movs	r3, #0
10011fd4:	60a3      	str	r3, [r4, #8]
10011fd6:	0023      	movs	r3, r4
10011fd8:	3347      	adds	r3, #71	; 0x47
10011fda:	6023      	str	r3, [r4, #0]
10011fdc:	6123      	str	r3, [r4, #16]
10011fde:	2301      	movs	r3, #1
10011fe0:	6163      	str	r3, [r4, #20]
10011fe2:	e02a      	b.n	1001203a <setvbuf+0x146>
10011fe4:	2280      	movs	r2, #128	; 0x80
10011fe6:	89a3      	ldrh	r3, [r4, #12]
10011fe8:	9d01      	ldr	r5, [sp, #4]
10011fea:	4313      	orrs	r3, r2
10011fec:	81a3      	strh	r3, [r4, #12]
10011fee:	69b3      	ldr	r3, [r6, #24]
10011ff0:	2b00      	cmp	r3, #0
10011ff2:	d102      	bne.n	10011ffa <setvbuf+0x106>
10011ff4:	0030      	movs	r0, r6
10011ff6:	f000 f9ef 	bl	100123d8 <__sinit>
10011ffa:	9b00      	ldr	r3, [sp, #0]
10011ffc:	2b01      	cmp	r3, #1
10011ffe:	d103      	bne.n	10012008 <setvbuf+0x114>
10012000:	89a3      	ldrh	r3, [r4, #12]
10012002:	9a00      	ldr	r2, [sp, #0]
10012004:	431a      	orrs	r2, r3
10012006:	81a2      	strh	r2, [r4, #12]
10012008:	2308      	movs	r3, #8
1001200a:	89a2      	ldrh	r2, [r4, #12]
1001200c:	6027      	str	r7, [r4, #0]
1001200e:	4013      	ands	r3, r2
10012010:	6127      	str	r7, [r4, #16]
10012012:	6165      	str	r5, [r4, #20]
10012014:	1e18      	subs	r0, r3, #0
10012016:	d00c      	beq.n	10012032 <setvbuf+0x13e>
10012018:	2301      	movs	r3, #1
1001201a:	401a      	ands	r2, r3
1001201c:	2300      	movs	r3, #0
1001201e:	1e10      	subs	r0, r2, #0
10012020:	4298      	cmp	r0, r3
10012022:	d004      	beq.n	1001202e <setvbuf+0x13a>
10012024:	426d      	negs	r5, r5
10012026:	60a3      	str	r3, [r4, #8]
10012028:	61a5      	str	r5, [r4, #24]
1001202a:	0018      	movs	r0, r3
1001202c:	e005      	b.n	1001203a <setvbuf+0x146>
1001202e:	60a5      	str	r5, [r4, #8]
10012030:	e003      	b.n	1001203a <setvbuf+0x146>
10012032:	60a3      	str	r3, [r4, #8]
10012034:	e001      	b.n	1001203a <setvbuf+0x146>
10012036:	2001      	movs	r0, #1
10012038:	4240      	negs	r0, r0
1001203a:	b005      	add	sp, #20
1001203c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001203e:	46c0      	nop			; (mov r8, r8)
10012040:	10013e40 	.word	0x10013e40
10012044:	10013d1c 	.word	0x10013d1c
10012048:	10013d3c 	.word	0x10013d3c
1001204c:	10013d5c 	.word	0x10013d5c
10012050:	fffff35c 	.word	0xfffff35c

10012054 <__swbuf_r>:
10012054:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012056:	0005      	movs	r5, r0
10012058:	000f      	movs	r7, r1
1001205a:	0014      	movs	r4, r2
1001205c:	2800      	cmp	r0, #0
1001205e:	d004      	beq.n	1001206a <__swbuf_r+0x16>
10012060:	6983      	ldr	r3, [r0, #24]
10012062:	2b00      	cmp	r3, #0
10012064:	d101      	bne.n	1001206a <__swbuf_r+0x16>
10012066:	f000 f9b7 	bl	100123d8 <__sinit>
1001206a:	4b23      	ldr	r3, [pc, #140]	; (100120f8 <__swbuf_r+0xa4>)
1001206c:	429c      	cmp	r4, r3
1001206e:	d101      	bne.n	10012074 <__swbuf_r+0x20>
10012070:	686c      	ldr	r4, [r5, #4]
10012072:	e008      	b.n	10012086 <__swbuf_r+0x32>
10012074:	4b21      	ldr	r3, [pc, #132]	; (100120fc <__swbuf_r+0xa8>)
10012076:	429c      	cmp	r4, r3
10012078:	d101      	bne.n	1001207e <__swbuf_r+0x2a>
1001207a:	68ac      	ldr	r4, [r5, #8]
1001207c:	e003      	b.n	10012086 <__swbuf_r+0x32>
1001207e:	4b20      	ldr	r3, [pc, #128]	; (10012100 <__swbuf_r+0xac>)
10012080:	429c      	cmp	r4, r3
10012082:	d100      	bne.n	10012086 <__swbuf_r+0x32>
10012084:	68ec      	ldr	r4, [r5, #12]
10012086:	69a3      	ldr	r3, [r4, #24]
10012088:	60a3      	str	r3, [r4, #8]
1001208a:	89a3      	ldrh	r3, [r4, #12]
1001208c:	071b      	lsls	r3, r3, #28
1001208e:	d50a      	bpl.n	100120a6 <__swbuf_r+0x52>
10012090:	6923      	ldr	r3, [r4, #16]
10012092:	2b00      	cmp	r3, #0
10012094:	d007      	beq.n	100120a6 <__swbuf_r+0x52>
10012096:	6823      	ldr	r3, [r4, #0]
10012098:	6922      	ldr	r2, [r4, #16]
1001209a:	b2fe      	uxtb	r6, r7
1001209c:	1a98      	subs	r0, r3, r2
1001209e:	6963      	ldr	r3, [r4, #20]
100120a0:	4298      	cmp	r0, r3
100120a2:	db0f      	blt.n	100120c4 <__swbuf_r+0x70>
100120a4:	e008      	b.n	100120b8 <__swbuf_r+0x64>
100120a6:	0021      	movs	r1, r4
100120a8:	0028      	movs	r0, r5
100120aa:	f000 f82b 	bl	10012104 <__swsetup_r>
100120ae:	2800      	cmp	r0, #0
100120b0:	d0f1      	beq.n	10012096 <__swbuf_r+0x42>
100120b2:	2001      	movs	r0, #1
100120b4:	4240      	negs	r0, r0
100120b6:	e01d      	b.n	100120f4 <__swbuf_r+0xa0>
100120b8:	0021      	movs	r1, r4
100120ba:	0028      	movs	r0, r5
100120bc:	f000 f91e 	bl	100122fc <_fflush_r>
100120c0:	2800      	cmp	r0, #0
100120c2:	d1f6      	bne.n	100120b2 <__swbuf_r+0x5e>
100120c4:	68a3      	ldr	r3, [r4, #8]
100120c6:	3001      	adds	r0, #1
100120c8:	3b01      	subs	r3, #1
100120ca:	60a3      	str	r3, [r4, #8]
100120cc:	6823      	ldr	r3, [r4, #0]
100120ce:	1c5a      	adds	r2, r3, #1
100120d0:	6022      	str	r2, [r4, #0]
100120d2:	701f      	strb	r7, [r3, #0]
100120d4:	6963      	ldr	r3, [r4, #20]
100120d6:	4298      	cmp	r0, r3
100120d8:	d005      	beq.n	100120e6 <__swbuf_r+0x92>
100120da:	89a3      	ldrh	r3, [r4, #12]
100120dc:	0030      	movs	r0, r6
100120de:	07db      	lsls	r3, r3, #31
100120e0:	d508      	bpl.n	100120f4 <__swbuf_r+0xa0>
100120e2:	2e0a      	cmp	r6, #10
100120e4:	d106      	bne.n	100120f4 <__swbuf_r+0xa0>
100120e6:	0021      	movs	r1, r4
100120e8:	0028      	movs	r0, r5
100120ea:	f000 f907 	bl	100122fc <_fflush_r>
100120ee:	2800      	cmp	r0, #0
100120f0:	d1df      	bne.n	100120b2 <__swbuf_r+0x5e>
100120f2:	0030      	movs	r0, r6
100120f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100120f6:	46c0      	nop			; (mov r8, r8)
100120f8:	10013d1c 	.word	0x10013d1c
100120fc:	10013d3c 	.word	0x10013d3c
10012100:	10013d5c 	.word	0x10013d5c

10012104 <__swsetup_r>:
10012104:	4b36      	ldr	r3, [pc, #216]	; (100121e0 <__swsetup_r+0xdc>)
10012106:	b570      	push	{r4, r5, r6, lr}
10012108:	681d      	ldr	r5, [r3, #0]
1001210a:	0006      	movs	r6, r0
1001210c:	000c      	movs	r4, r1
1001210e:	2d00      	cmp	r5, #0
10012110:	d005      	beq.n	1001211e <__swsetup_r+0x1a>
10012112:	69ab      	ldr	r3, [r5, #24]
10012114:	2b00      	cmp	r3, #0
10012116:	d102      	bne.n	1001211e <__swsetup_r+0x1a>
10012118:	0028      	movs	r0, r5
1001211a:	f000 f95d 	bl	100123d8 <__sinit>
1001211e:	4b31      	ldr	r3, [pc, #196]	; (100121e4 <__swsetup_r+0xe0>)
10012120:	429c      	cmp	r4, r3
10012122:	d101      	bne.n	10012128 <__swsetup_r+0x24>
10012124:	686c      	ldr	r4, [r5, #4]
10012126:	e008      	b.n	1001213a <__swsetup_r+0x36>
10012128:	4b2f      	ldr	r3, [pc, #188]	; (100121e8 <__swsetup_r+0xe4>)
1001212a:	429c      	cmp	r4, r3
1001212c:	d101      	bne.n	10012132 <__swsetup_r+0x2e>
1001212e:	68ac      	ldr	r4, [r5, #8]
10012130:	e003      	b.n	1001213a <__swsetup_r+0x36>
10012132:	4b2e      	ldr	r3, [pc, #184]	; (100121ec <__swsetup_r+0xe8>)
10012134:	429c      	cmp	r4, r3
10012136:	d100      	bne.n	1001213a <__swsetup_r+0x36>
10012138:	68ec      	ldr	r4, [r5, #12]
1001213a:	220c      	movs	r2, #12
1001213c:	5ea3      	ldrsh	r3, [r4, r2]
1001213e:	b29a      	uxth	r2, r3
10012140:	0711      	lsls	r1, r2, #28
10012142:	d423      	bmi.n	1001218c <__swsetup_r+0x88>
10012144:	06d1      	lsls	r1, r2, #27
10012146:	d407      	bmi.n	10012158 <__swsetup_r+0x54>
10012148:	2209      	movs	r2, #9
1001214a:	2001      	movs	r0, #1
1001214c:	6032      	str	r2, [r6, #0]
1001214e:	3237      	adds	r2, #55	; 0x37
10012150:	4313      	orrs	r3, r2
10012152:	81a3      	strh	r3, [r4, #12]
10012154:	4240      	negs	r0, r0
10012156:	e042      	b.n	100121de <__swsetup_r+0xda>
10012158:	0753      	lsls	r3, r2, #29
1001215a:	d513      	bpl.n	10012184 <__swsetup_r+0x80>
1001215c:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001215e:	2900      	cmp	r1, #0
10012160:	d008      	beq.n	10012174 <__swsetup_r+0x70>
10012162:	0023      	movs	r3, r4
10012164:	3344      	adds	r3, #68	; 0x44
10012166:	4299      	cmp	r1, r3
10012168:	d002      	beq.n	10012170 <__swsetup_r+0x6c>
1001216a:	0030      	movs	r0, r6
1001216c:	f7ff fd34 	bl	10011bd8 <_free_r>
10012170:	2300      	movs	r3, #0
10012172:	6363      	str	r3, [r4, #52]	; 0x34
10012174:	2224      	movs	r2, #36	; 0x24
10012176:	89a3      	ldrh	r3, [r4, #12]
10012178:	4393      	bics	r3, r2
1001217a:	81a3      	strh	r3, [r4, #12]
1001217c:	2300      	movs	r3, #0
1001217e:	6063      	str	r3, [r4, #4]
10012180:	6923      	ldr	r3, [r4, #16]
10012182:	6023      	str	r3, [r4, #0]
10012184:	2208      	movs	r2, #8
10012186:	89a3      	ldrh	r3, [r4, #12]
10012188:	4313      	orrs	r3, r2
1001218a:	81a3      	strh	r3, [r4, #12]
1001218c:	6923      	ldr	r3, [r4, #16]
1001218e:	2b00      	cmp	r3, #0
10012190:	d10b      	bne.n	100121aa <__swsetup_r+0xa6>
10012192:	23a0      	movs	r3, #160	; 0xa0
10012194:	89a2      	ldrh	r2, [r4, #12]
10012196:	009b      	lsls	r3, r3, #2
10012198:	4013      	ands	r3, r2
1001219a:	2280      	movs	r2, #128	; 0x80
1001219c:	0092      	lsls	r2, r2, #2
1001219e:	4293      	cmp	r3, r2
100121a0:	d003      	beq.n	100121aa <__swsetup_r+0xa6>
100121a2:	0021      	movs	r1, r4
100121a4:	0030      	movs	r0, r6
100121a6:	f000 f9d1 	bl	1001254c <__smakebuf_r>
100121aa:	2301      	movs	r3, #1
100121ac:	89a2      	ldrh	r2, [r4, #12]
100121ae:	4013      	ands	r3, r2
100121b0:	d005      	beq.n	100121be <__swsetup_r+0xba>
100121b2:	2300      	movs	r3, #0
100121b4:	60a3      	str	r3, [r4, #8]
100121b6:	6963      	ldr	r3, [r4, #20]
100121b8:	425b      	negs	r3, r3
100121ba:	61a3      	str	r3, [r4, #24]
100121bc:	e003      	b.n	100121c6 <__swsetup_r+0xc2>
100121be:	0792      	lsls	r2, r2, #30
100121c0:	d400      	bmi.n	100121c4 <__swsetup_r+0xc0>
100121c2:	6963      	ldr	r3, [r4, #20]
100121c4:	60a3      	str	r3, [r4, #8]
100121c6:	2000      	movs	r0, #0
100121c8:	6923      	ldr	r3, [r4, #16]
100121ca:	4283      	cmp	r3, r0
100121cc:	d107      	bne.n	100121de <__swsetup_r+0xda>
100121ce:	220c      	movs	r2, #12
100121d0:	5ea3      	ldrsh	r3, [r4, r2]
100121d2:	061a      	lsls	r2, r3, #24
100121d4:	d503      	bpl.n	100121de <__swsetup_r+0xda>
100121d6:	2240      	movs	r2, #64	; 0x40
100121d8:	4313      	orrs	r3, r2
100121da:	81a3      	strh	r3, [r4, #12]
100121dc:	3801      	subs	r0, #1
100121de:	bd70      	pop	{r4, r5, r6, pc}
100121e0:	10013e40 	.word	0x10013e40
100121e4:	10013d1c 	.word	0x10013d1c
100121e8:	10013d3c 	.word	0x10013d3c
100121ec:	10013d5c 	.word	0x10013d5c

100121f0 <__sflush_r>:
100121f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100121f2:	898a      	ldrh	r2, [r1, #12]
100121f4:	0005      	movs	r5, r0
100121f6:	000c      	movs	r4, r1
100121f8:	0713      	lsls	r3, r2, #28
100121fa:	d45a      	bmi.n	100122b2 <__sflush_r+0xc2>
100121fc:	684b      	ldr	r3, [r1, #4]
100121fe:	2b00      	cmp	r3, #0
10012200:	dc02      	bgt.n	10012208 <__sflush_r+0x18>
10012202:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10012204:	2b00      	cmp	r3, #0
10012206:	dd19      	ble.n	1001223c <__sflush_r+0x4c>
10012208:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001220a:	2f00      	cmp	r7, #0
1001220c:	d016      	beq.n	1001223c <__sflush_r+0x4c>
1001220e:	2300      	movs	r3, #0
10012210:	682e      	ldr	r6, [r5, #0]
10012212:	602b      	str	r3, [r5, #0]
10012214:	2380      	movs	r3, #128	; 0x80
10012216:	015b      	lsls	r3, r3, #5
10012218:	401a      	ands	r2, r3
1001221a:	d001      	beq.n	10012220 <__sflush_r+0x30>
1001221c:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001221e:	e014      	b.n	1001224a <__sflush_r+0x5a>
10012220:	2301      	movs	r3, #1
10012222:	6a21      	ldr	r1, [r4, #32]
10012224:	0028      	movs	r0, r5
10012226:	47b8      	blx	r7
10012228:	1c43      	adds	r3, r0, #1
1001222a:	d10e      	bne.n	1001224a <__sflush_r+0x5a>
1001222c:	682b      	ldr	r3, [r5, #0]
1001222e:	2b00      	cmp	r3, #0
10012230:	d00b      	beq.n	1001224a <__sflush_r+0x5a>
10012232:	2b1d      	cmp	r3, #29
10012234:	d001      	beq.n	1001223a <__sflush_r+0x4a>
10012236:	2b16      	cmp	r3, #22
10012238:	d102      	bne.n	10012240 <__sflush_r+0x50>
1001223a:	602e      	str	r6, [r5, #0]
1001223c:	2000      	movs	r0, #0
1001223e:	e05a      	b.n	100122f6 <__sflush_r+0x106>
10012240:	2240      	movs	r2, #64	; 0x40
10012242:	89a3      	ldrh	r3, [r4, #12]
10012244:	4313      	orrs	r3, r2
10012246:	81a3      	strh	r3, [r4, #12]
10012248:	e055      	b.n	100122f6 <__sflush_r+0x106>
1001224a:	89a3      	ldrh	r3, [r4, #12]
1001224c:	075b      	lsls	r3, r3, #29
1001224e:	d506      	bpl.n	1001225e <__sflush_r+0x6e>
10012250:	6863      	ldr	r3, [r4, #4]
10012252:	1ac0      	subs	r0, r0, r3
10012254:	6b63      	ldr	r3, [r4, #52]	; 0x34
10012256:	2b00      	cmp	r3, #0
10012258:	d001      	beq.n	1001225e <__sflush_r+0x6e>
1001225a:	6c23      	ldr	r3, [r4, #64]	; 0x40
1001225c:	1ac0      	subs	r0, r0, r3
1001225e:	2300      	movs	r3, #0
10012260:	0002      	movs	r2, r0
10012262:	6a21      	ldr	r1, [r4, #32]
10012264:	0028      	movs	r0, r5
10012266:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10012268:	47b8      	blx	r7
1001226a:	89a3      	ldrh	r3, [r4, #12]
1001226c:	1c42      	adds	r2, r0, #1
1001226e:	d106      	bne.n	1001227e <__sflush_r+0x8e>
10012270:	6829      	ldr	r1, [r5, #0]
10012272:	291d      	cmp	r1, #29
10012274:	d83a      	bhi.n	100122ec <__sflush_r+0xfc>
10012276:	4a20      	ldr	r2, [pc, #128]	; (100122f8 <__sflush_r+0x108>)
10012278:	40ca      	lsrs	r2, r1
1001227a:	07d2      	lsls	r2, r2, #31
1001227c:	d536      	bpl.n	100122ec <__sflush_r+0xfc>
1001227e:	2200      	movs	r2, #0
10012280:	6062      	str	r2, [r4, #4]
10012282:	6922      	ldr	r2, [r4, #16]
10012284:	6022      	str	r2, [r4, #0]
10012286:	04db      	lsls	r3, r3, #19
10012288:	d505      	bpl.n	10012296 <__sflush_r+0xa6>
1001228a:	1c43      	adds	r3, r0, #1
1001228c:	d102      	bne.n	10012294 <__sflush_r+0xa4>
1001228e:	682b      	ldr	r3, [r5, #0]
10012290:	2b00      	cmp	r3, #0
10012292:	d100      	bne.n	10012296 <__sflush_r+0xa6>
10012294:	6560      	str	r0, [r4, #84]	; 0x54
10012296:	6b61      	ldr	r1, [r4, #52]	; 0x34
10012298:	602e      	str	r6, [r5, #0]
1001229a:	2900      	cmp	r1, #0
1001229c:	d0ce      	beq.n	1001223c <__sflush_r+0x4c>
1001229e:	0023      	movs	r3, r4
100122a0:	3344      	adds	r3, #68	; 0x44
100122a2:	4299      	cmp	r1, r3
100122a4:	d002      	beq.n	100122ac <__sflush_r+0xbc>
100122a6:	0028      	movs	r0, r5
100122a8:	f7ff fc96 	bl	10011bd8 <_free_r>
100122ac:	2000      	movs	r0, #0
100122ae:	6360      	str	r0, [r4, #52]	; 0x34
100122b0:	e021      	b.n	100122f6 <__sflush_r+0x106>
100122b2:	690f      	ldr	r7, [r1, #16]
100122b4:	2f00      	cmp	r7, #0
100122b6:	d0c1      	beq.n	1001223c <__sflush_r+0x4c>
100122b8:	680b      	ldr	r3, [r1, #0]
100122ba:	600f      	str	r7, [r1, #0]
100122bc:	1bdb      	subs	r3, r3, r7
100122be:	9301      	str	r3, [sp, #4]
100122c0:	2300      	movs	r3, #0
100122c2:	0792      	lsls	r2, r2, #30
100122c4:	d100      	bne.n	100122c8 <__sflush_r+0xd8>
100122c6:	694b      	ldr	r3, [r1, #20]
100122c8:	60a3      	str	r3, [r4, #8]
100122ca:	e003      	b.n	100122d4 <__sflush_r+0xe4>
100122cc:	9b01      	ldr	r3, [sp, #4]
100122ce:	183f      	adds	r7, r7, r0
100122d0:	1a1b      	subs	r3, r3, r0
100122d2:	9301      	str	r3, [sp, #4]
100122d4:	9b01      	ldr	r3, [sp, #4]
100122d6:	2b00      	cmp	r3, #0
100122d8:	ddb0      	ble.n	1001223c <__sflush_r+0x4c>
100122da:	9b01      	ldr	r3, [sp, #4]
100122dc:	003a      	movs	r2, r7
100122de:	6a21      	ldr	r1, [r4, #32]
100122e0:	0028      	movs	r0, r5
100122e2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
100122e4:	47b0      	blx	r6
100122e6:	2800      	cmp	r0, #0
100122e8:	dcf0      	bgt.n	100122cc <__sflush_r+0xdc>
100122ea:	89a3      	ldrh	r3, [r4, #12]
100122ec:	2240      	movs	r2, #64	; 0x40
100122ee:	2001      	movs	r0, #1
100122f0:	4313      	orrs	r3, r2
100122f2:	81a3      	strh	r3, [r4, #12]
100122f4:	4240      	negs	r0, r0
100122f6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100122f8:	20400001 	.word	0x20400001

100122fc <_fflush_r>:
100122fc:	690b      	ldr	r3, [r1, #16]
100122fe:	b570      	push	{r4, r5, r6, lr}
10012300:	0005      	movs	r5, r0
10012302:	000c      	movs	r4, r1
10012304:	2b00      	cmp	r3, #0
10012306:	d101      	bne.n	1001230c <_fflush_r+0x10>
10012308:	2000      	movs	r0, #0
1001230a:	e01c      	b.n	10012346 <_fflush_r+0x4a>
1001230c:	2800      	cmp	r0, #0
1001230e:	d004      	beq.n	1001231a <_fflush_r+0x1e>
10012310:	6983      	ldr	r3, [r0, #24]
10012312:	2b00      	cmp	r3, #0
10012314:	d101      	bne.n	1001231a <_fflush_r+0x1e>
10012316:	f000 f85f 	bl	100123d8 <__sinit>
1001231a:	4b0b      	ldr	r3, [pc, #44]	; (10012348 <_fflush_r+0x4c>)
1001231c:	429c      	cmp	r4, r3
1001231e:	d101      	bne.n	10012324 <_fflush_r+0x28>
10012320:	686c      	ldr	r4, [r5, #4]
10012322:	e008      	b.n	10012336 <_fflush_r+0x3a>
10012324:	4b09      	ldr	r3, [pc, #36]	; (1001234c <_fflush_r+0x50>)
10012326:	429c      	cmp	r4, r3
10012328:	d101      	bne.n	1001232e <_fflush_r+0x32>
1001232a:	68ac      	ldr	r4, [r5, #8]
1001232c:	e003      	b.n	10012336 <_fflush_r+0x3a>
1001232e:	4b08      	ldr	r3, [pc, #32]	; (10012350 <_fflush_r+0x54>)
10012330:	429c      	cmp	r4, r3
10012332:	d100      	bne.n	10012336 <_fflush_r+0x3a>
10012334:	68ec      	ldr	r4, [r5, #12]
10012336:	220c      	movs	r2, #12
10012338:	5ea3      	ldrsh	r3, [r4, r2]
1001233a:	2b00      	cmp	r3, #0
1001233c:	d0e4      	beq.n	10012308 <_fflush_r+0xc>
1001233e:	0021      	movs	r1, r4
10012340:	0028      	movs	r0, r5
10012342:	f7ff ff55 	bl	100121f0 <__sflush_r>
10012346:	bd70      	pop	{r4, r5, r6, pc}
10012348:	10013d1c 	.word	0x10013d1c
1001234c:	10013d3c 	.word	0x10013d3c
10012350:	10013d5c 	.word	0x10013d5c

10012354 <_cleanup_r>:
10012354:	b510      	push	{r4, lr}
10012356:	4902      	ldr	r1, [pc, #8]	; (10012360 <_cleanup_r+0xc>)
10012358:	f000 f8b0 	bl	100124bc <_fwalk_reent>
1001235c:	bd10      	pop	{r4, pc}
1001235e:	46c0      	nop			; (mov r8, r8)
10012360:	100122fd 	.word	0x100122fd

10012364 <std.isra.0>:
10012364:	2300      	movs	r3, #0
10012366:	b510      	push	{r4, lr}
10012368:	0004      	movs	r4, r0
1001236a:	6003      	str	r3, [r0, #0]
1001236c:	6043      	str	r3, [r0, #4]
1001236e:	6083      	str	r3, [r0, #8]
10012370:	8181      	strh	r1, [r0, #12]
10012372:	6643      	str	r3, [r0, #100]	; 0x64
10012374:	81c2      	strh	r2, [r0, #14]
10012376:	6103      	str	r3, [r0, #16]
10012378:	6143      	str	r3, [r0, #20]
1001237a:	6183      	str	r3, [r0, #24]
1001237c:	0019      	movs	r1, r3
1001237e:	2208      	movs	r2, #8
10012380:	305c      	adds	r0, #92	; 0x5c
10012382:	f7ff fc21 	bl	10011bc8 <memset>
10012386:	4b05      	ldr	r3, [pc, #20]	; (1001239c <std.isra.0+0x38>)
10012388:	6224      	str	r4, [r4, #32]
1001238a:	6263      	str	r3, [r4, #36]	; 0x24
1001238c:	4b04      	ldr	r3, [pc, #16]	; (100123a0 <std.isra.0+0x3c>)
1001238e:	62a3      	str	r3, [r4, #40]	; 0x28
10012390:	4b04      	ldr	r3, [pc, #16]	; (100123a4 <std.isra.0+0x40>)
10012392:	62e3      	str	r3, [r4, #44]	; 0x2c
10012394:	4b04      	ldr	r3, [pc, #16]	; (100123a8 <std.isra.0+0x44>)
10012396:	6323      	str	r3, [r4, #48]	; 0x30
10012398:	bd10      	pop	{r4, pc}
1001239a:	46c0      	nop			; (mov r8, r8)
1001239c:	10012bdd 	.word	0x10012bdd
100123a0:	10012c05 	.word	0x10012c05
100123a4:	10012c3d 	.word	0x10012c3d
100123a8:	10012c69 	.word	0x10012c69

100123ac <__sfmoreglue>:
100123ac:	b570      	push	{r4, r5, r6, lr}
100123ae:	2568      	movs	r5, #104	; 0x68
100123b0:	1e4b      	subs	r3, r1, #1
100123b2:	435d      	muls	r5, r3
100123b4:	000e      	movs	r6, r1
100123b6:	0029      	movs	r1, r5
100123b8:	3174      	adds	r1, #116	; 0x74
100123ba:	f7ff fc53 	bl	10011c64 <_malloc_r>
100123be:	1e04      	subs	r4, r0, #0
100123c0:	d008      	beq.n	100123d4 <__sfmoreglue+0x28>
100123c2:	2100      	movs	r1, #0
100123c4:	002a      	movs	r2, r5
100123c6:	6001      	str	r1, [r0, #0]
100123c8:	6046      	str	r6, [r0, #4]
100123ca:	300c      	adds	r0, #12
100123cc:	60a0      	str	r0, [r4, #8]
100123ce:	3268      	adds	r2, #104	; 0x68
100123d0:	f7ff fbfa 	bl	10011bc8 <memset>
100123d4:	0020      	movs	r0, r4
100123d6:	bd70      	pop	{r4, r5, r6, pc}

100123d8 <__sinit>:
100123d8:	6983      	ldr	r3, [r0, #24]
100123da:	b513      	push	{r0, r1, r4, lr}
100123dc:	0004      	movs	r4, r0
100123de:	2b00      	cmp	r3, #0
100123e0:	d128      	bne.n	10012434 <__sinit+0x5c>
100123e2:	6483      	str	r3, [r0, #72]	; 0x48
100123e4:	64c3      	str	r3, [r0, #76]	; 0x4c
100123e6:	6503      	str	r3, [r0, #80]	; 0x50
100123e8:	4b13      	ldr	r3, [pc, #76]	; (10012438 <__sinit+0x60>)
100123ea:	4a14      	ldr	r2, [pc, #80]	; (1001243c <__sinit+0x64>)
100123ec:	681b      	ldr	r3, [r3, #0]
100123ee:	6282      	str	r2, [r0, #40]	; 0x28
100123f0:	9301      	str	r3, [sp, #4]
100123f2:	4298      	cmp	r0, r3
100123f4:	d101      	bne.n	100123fa <__sinit+0x22>
100123f6:	2301      	movs	r3, #1
100123f8:	6183      	str	r3, [r0, #24]
100123fa:	0020      	movs	r0, r4
100123fc:	f000 f820 	bl	10012440 <__sfp>
10012400:	6060      	str	r0, [r4, #4]
10012402:	0020      	movs	r0, r4
10012404:	f000 f81c 	bl	10012440 <__sfp>
10012408:	60a0      	str	r0, [r4, #8]
1001240a:	0020      	movs	r0, r4
1001240c:	f000 f818 	bl	10012440 <__sfp>
10012410:	2200      	movs	r2, #0
10012412:	60e0      	str	r0, [r4, #12]
10012414:	2104      	movs	r1, #4
10012416:	6860      	ldr	r0, [r4, #4]
10012418:	f7ff ffa4 	bl	10012364 <std.isra.0>
1001241c:	2201      	movs	r2, #1
1001241e:	2109      	movs	r1, #9
10012420:	68a0      	ldr	r0, [r4, #8]
10012422:	f7ff ff9f 	bl	10012364 <std.isra.0>
10012426:	2202      	movs	r2, #2
10012428:	2112      	movs	r1, #18
1001242a:	68e0      	ldr	r0, [r4, #12]
1001242c:	f7ff ff9a 	bl	10012364 <std.isra.0>
10012430:	2301      	movs	r3, #1
10012432:	61a3      	str	r3, [r4, #24]
10012434:	bd13      	pop	{r0, r1, r4, pc}
10012436:	46c0      	nop			; (mov r8, r8)
10012438:	10013d18 	.word	0x10013d18
1001243c:	10012355 	.word	0x10012355

10012440 <__sfp>:
10012440:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012442:	4b1d      	ldr	r3, [pc, #116]	; (100124b8 <__sfp+0x78>)
10012444:	0006      	movs	r6, r0
10012446:	681d      	ldr	r5, [r3, #0]
10012448:	69ab      	ldr	r3, [r5, #24]
1001244a:	2b00      	cmp	r3, #0
1001244c:	d102      	bne.n	10012454 <__sfp+0x14>
1001244e:	0028      	movs	r0, r5
10012450:	f7ff ffc2 	bl	100123d8 <__sinit>
10012454:	3548      	adds	r5, #72	; 0x48
10012456:	68ac      	ldr	r4, [r5, #8]
10012458:	686b      	ldr	r3, [r5, #4]
1001245a:	3b01      	subs	r3, #1
1001245c:	d405      	bmi.n	1001246a <__sfp+0x2a>
1001245e:	220c      	movs	r2, #12
10012460:	5ea7      	ldrsh	r7, [r4, r2]
10012462:	2f00      	cmp	r7, #0
10012464:	d010      	beq.n	10012488 <__sfp+0x48>
10012466:	3468      	adds	r4, #104	; 0x68
10012468:	e7f7      	b.n	1001245a <__sfp+0x1a>
1001246a:	682b      	ldr	r3, [r5, #0]
1001246c:	2b00      	cmp	r3, #0
1001246e:	d001      	beq.n	10012474 <__sfp+0x34>
10012470:	682d      	ldr	r5, [r5, #0]
10012472:	e7f0      	b.n	10012456 <__sfp+0x16>
10012474:	2104      	movs	r1, #4
10012476:	0030      	movs	r0, r6
10012478:	f7ff ff98 	bl	100123ac <__sfmoreglue>
1001247c:	6028      	str	r0, [r5, #0]
1001247e:	2800      	cmp	r0, #0
10012480:	d1f6      	bne.n	10012470 <__sfp+0x30>
10012482:	230c      	movs	r3, #12
10012484:	6033      	str	r3, [r6, #0]
10012486:	e016      	b.n	100124b6 <__sfp+0x76>
10012488:	2301      	movs	r3, #1
1001248a:	0020      	movs	r0, r4
1001248c:	425b      	negs	r3, r3
1001248e:	81e3      	strh	r3, [r4, #14]
10012490:	3302      	adds	r3, #2
10012492:	81a3      	strh	r3, [r4, #12]
10012494:	6667      	str	r7, [r4, #100]	; 0x64
10012496:	6027      	str	r7, [r4, #0]
10012498:	60a7      	str	r7, [r4, #8]
1001249a:	6067      	str	r7, [r4, #4]
1001249c:	6127      	str	r7, [r4, #16]
1001249e:	6167      	str	r7, [r4, #20]
100124a0:	61a7      	str	r7, [r4, #24]
100124a2:	305c      	adds	r0, #92	; 0x5c
100124a4:	2208      	movs	r2, #8
100124a6:	0039      	movs	r1, r7
100124a8:	f7ff fb8e 	bl	10011bc8 <memset>
100124ac:	0020      	movs	r0, r4
100124ae:	6367      	str	r7, [r4, #52]	; 0x34
100124b0:	63a7      	str	r7, [r4, #56]	; 0x38
100124b2:	64a7      	str	r7, [r4, #72]	; 0x48
100124b4:	64e7      	str	r7, [r4, #76]	; 0x4c
100124b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100124b8:	10013d18 	.word	0x10013d18

100124bc <_fwalk_reent>:
100124bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100124be:	0004      	movs	r4, r0
100124c0:	0007      	movs	r7, r0
100124c2:	2600      	movs	r6, #0
100124c4:	9101      	str	r1, [sp, #4]
100124c6:	3448      	adds	r4, #72	; 0x48
100124c8:	2c00      	cmp	r4, #0
100124ca:	d016      	beq.n	100124fa <_fwalk_reent+0x3e>
100124cc:	6863      	ldr	r3, [r4, #4]
100124ce:	68a5      	ldr	r5, [r4, #8]
100124d0:	9300      	str	r3, [sp, #0]
100124d2:	9b00      	ldr	r3, [sp, #0]
100124d4:	3b01      	subs	r3, #1
100124d6:	9300      	str	r3, [sp, #0]
100124d8:	d40d      	bmi.n	100124f6 <_fwalk_reent+0x3a>
100124da:	89ab      	ldrh	r3, [r5, #12]
100124dc:	2b01      	cmp	r3, #1
100124de:	d908      	bls.n	100124f2 <_fwalk_reent+0x36>
100124e0:	220e      	movs	r2, #14
100124e2:	5eab      	ldrsh	r3, [r5, r2]
100124e4:	3301      	adds	r3, #1
100124e6:	d004      	beq.n	100124f2 <_fwalk_reent+0x36>
100124e8:	0029      	movs	r1, r5
100124ea:	0038      	movs	r0, r7
100124ec:	9b01      	ldr	r3, [sp, #4]
100124ee:	4798      	blx	r3
100124f0:	4306      	orrs	r6, r0
100124f2:	3568      	adds	r5, #104	; 0x68
100124f4:	e7ed      	b.n	100124d2 <_fwalk_reent+0x16>
100124f6:	6824      	ldr	r4, [r4, #0]
100124f8:	e7e6      	b.n	100124c8 <_fwalk_reent+0xc>
100124fa:	0030      	movs	r0, r6
100124fc:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10012500 <__swhatbuf_r>:
10012500:	b570      	push	{r4, r5, r6, lr}
10012502:	000e      	movs	r6, r1
10012504:	001d      	movs	r5, r3
10012506:	230e      	movs	r3, #14
10012508:	5ec9      	ldrsh	r1, [r1, r3]
1001250a:	b090      	sub	sp, #64	; 0x40
1001250c:	0014      	movs	r4, r2
1001250e:	2900      	cmp	r1, #0
10012510:	da06      	bge.n	10012520 <__swhatbuf_r+0x20>
10012512:	2300      	movs	r3, #0
10012514:	602b      	str	r3, [r5, #0]
10012516:	89b3      	ldrh	r3, [r6, #12]
10012518:	061b      	lsls	r3, r3, #24
1001251a:	d50f      	bpl.n	1001253c <__swhatbuf_r+0x3c>
1001251c:	2340      	movs	r3, #64	; 0x40
1001251e:	e00f      	b.n	10012540 <__swhatbuf_r+0x40>
10012520:	aa01      	add	r2, sp, #4
10012522:	f000 fbcd 	bl	10012cc0 <_fstat_r>
10012526:	2800      	cmp	r0, #0
10012528:	dbf3      	blt.n	10012512 <__swhatbuf_r+0x12>
1001252a:	23f0      	movs	r3, #240	; 0xf0
1001252c:	9a02      	ldr	r2, [sp, #8]
1001252e:	021b      	lsls	r3, r3, #8
10012530:	4013      	ands	r3, r2
10012532:	4a05      	ldr	r2, [pc, #20]	; (10012548 <__swhatbuf_r+0x48>)
10012534:	189b      	adds	r3, r3, r2
10012536:	425a      	negs	r2, r3
10012538:	4153      	adcs	r3, r2
1001253a:	602b      	str	r3, [r5, #0]
1001253c:	2380      	movs	r3, #128	; 0x80
1001253e:	00db      	lsls	r3, r3, #3
10012540:	2000      	movs	r0, #0
10012542:	6023      	str	r3, [r4, #0]
10012544:	b010      	add	sp, #64	; 0x40
10012546:	bd70      	pop	{r4, r5, r6, pc}
10012548:	ffffe000 	.word	0xffffe000

1001254c <__smakebuf_r>:
1001254c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001254e:	2602      	movs	r6, #2
10012550:	898b      	ldrh	r3, [r1, #12]
10012552:	0005      	movs	r5, r0
10012554:	000c      	movs	r4, r1
10012556:	4233      	tst	r3, r6
10012558:	d110      	bne.n	1001257c <__smakebuf_r+0x30>
1001255a:	ab01      	add	r3, sp, #4
1001255c:	466a      	mov	r2, sp
1001255e:	f7ff ffcf 	bl	10012500 <__swhatbuf_r>
10012562:	9900      	ldr	r1, [sp, #0]
10012564:	0007      	movs	r7, r0
10012566:	0028      	movs	r0, r5
10012568:	f7ff fb7c 	bl	10011c64 <_malloc_r>
1001256c:	2800      	cmp	r0, #0
1001256e:	d10c      	bne.n	1001258a <__smakebuf_r+0x3e>
10012570:	220c      	movs	r2, #12
10012572:	5ea3      	ldrsh	r3, [r4, r2]
10012574:	059a      	lsls	r2, r3, #22
10012576:	d423      	bmi.n	100125c0 <__smakebuf_r+0x74>
10012578:	4333      	orrs	r3, r6
1001257a:	81a3      	strh	r3, [r4, #12]
1001257c:	0023      	movs	r3, r4
1001257e:	3347      	adds	r3, #71	; 0x47
10012580:	6023      	str	r3, [r4, #0]
10012582:	6123      	str	r3, [r4, #16]
10012584:	2301      	movs	r3, #1
10012586:	6163      	str	r3, [r4, #20]
10012588:	e01a      	b.n	100125c0 <__smakebuf_r+0x74>
1001258a:	2280      	movs	r2, #128	; 0x80
1001258c:	4b0d      	ldr	r3, [pc, #52]	; (100125c4 <__smakebuf_r+0x78>)
1001258e:	62ab      	str	r3, [r5, #40]	; 0x28
10012590:	89a3      	ldrh	r3, [r4, #12]
10012592:	6020      	str	r0, [r4, #0]
10012594:	4313      	orrs	r3, r2
10012596:	81a3      	strh	r3, [r4, #12]
10012598:	9b00      	ldr	r3, [sp, #0]
1001259a:	6120      	str	r0, [r4, #16]
1001259c:	6163      	str	r3, [r4, #20]
1001259e:	9b01      	ldr	r3, [sp, #4]
100125a0:	2b00      	cmp	r3, #0
100125a2:	d00a      	beq.n	100125ba <__smakebuf_r+0x6e>
100125a4:	230e      	movs	r3, #14
100125a6:	5ee1      	ldrsh	r1, [r4, r3]
100125a8:	0028      	movs	r0, r5
100125aa:	f000 fb9b 	bl	10012ce4 <_isatty_r>
100125ae:	2800      	cmp	r0, #0
100125b0:	d003      	beq.n	100125ba <__smakebuf_r+0x6e>
100125b2:	2201      	movs	r2, #1
100125b4:	89a3      	ldrh	r3, [r4, #12]
100125b6:	4313      	orrs	r3, r2
100125b8:	81a3      	strh	r3, [r4, #12]
100125ba:	89a3      	ldrh	r3, [r4, #12]
100125bc:	431f      	orrs	r7, r3
100125be:	81a7      	strh	r7, [r4, #12]
100125c0:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100125c2:	46c0      	nop			; (mov r8, r8)
100125c4:	10012355 	.word	0x10012355

100125c8 <__sfputc_r>:
100125c8:	6893      	ldr	r3, [r2, #8]
100125ca:	b510      	push	{r4, lr}
100125cc:	3b01      	subs	r3, #1
100125ce:	6093      	str	r3, [r2, #8]
100125d0:	2b00      	cmp	r3, #0
100125d2:	da05      	bge.n	100125e0 <__sfputc_r+0x18>
100125d4:	6994      	ldr	r4, [r2, #24]
100125d6:	42a3      	cmp	r3, r4
100125d8:	db08      	blt.n	100125ec <__sfputc_r+0x24>
100125da:	b2cb      	uxtb	r3, r1
100125dc:	2b0a      	cmp	r3, #10
100125de:	d005      	beq.n	100125ec <__sfputc_r+0x24>
100125e0:	6813      	ldr	r3, [r2, #0]
100125e2:	1c58      	adds	r0, r3, #1
100125e4:	6010      	str	r0, [r2, #0]
100125e6:	7019      	strb	r1, [r3, #0]
100125e8:	b2c8      	uxtb	r0, r1
100125ea:	e001      	b.n	100125f0 <__sfputc_r+0x28>
100125ec:	f7ff fd32 	bl	10012054 <__swbuf_r>
100125f0:	bd10      	pop	{r4, pc}

100125f2 <__sfputs_r>:
100125f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100125f4:	0006      	movs	r6, r0
100125f6:	000f      	movs	r7, r1
100125f8:	0014      	movs	r4, r2
100125fa:	18d5      	adds	r5, r2, r3
100125fc:	42ac      	cmp	r4, r5
100125fe:	d008      	beq.n	10012612 <__sfputs_r+0x20>
10012600:	7821      	ldrb	r1, [r4, #0]
10012602:	003a      	movs	r2, r7
10012604:	0030      	movs	r0, r6
10012606:	f7ff ffdf 	bl	100125c8 <__sfputc_r>
1001260a:	3401      	adds	r4, #1
1001260c:	1c43      	adds	r3, r0, #1
1001260e:	d1f5      	bne.n	100125fc <__sfputs_r+0xa>
10012610:	e000      	b.n	10012614 <__sfputs_r+0x22>
10012612:	2000      	movs	r0, #0
10012614:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012618 <_vfiprintf_r>:
10012618:	b5f0      	push	{r4, r5, r6, r7, lr}
1001261a:	b09f      	sub	sp, #124	; 0x7c
1001261c:	0006      	movs	r6, r0
1001261e:	000f      	movs	r7, r1
10012620:	9202      	str	r2, [sp, #8]
10012622:	9305      	str	r3, [sp, #20]
10012624:	2800      	cmp	r0, #0
10012626:	d004      	beq.n	10012632 <_vfiprintf_r+0x1a>
10012628:	6983      	ldr	r3, [r0, #24]
1001262a:	2b00      	cmp	r3, #0
1001262c:	d101      	bne.n	10012632 <_vfiprintf_r+0x1a>
1001262e:	f7ff fed3 	bl	100123d8 <__sinit>
10012632:	4b7f      	ldr	r3, [pc, #508]	; (10012830 <_vfiprintf_r+0x218>)
10012634:	429f      	cmp	r7, r3
10012636:	d101      	bne.n	1001263c <_vfiprintf_r+0x24>
10012638:	6877      	ldr	r7, [r6, #4]
1001263a:	e008      	b.n	1001264e <_vfiprintf_r+0x36>
1001263c:	4b7d      	ldr	r3, [pc, #500]	; (10012834 <_vfiprintf_r+0x21c>)
1001263e:	429f      	cmp	r7, r3
10012640:	d101      	bne.n	10012646 <_vfiprintf_r+0x2e>
10012642:	68b7      	ldr	r7, [r6, #8]
10012644:	e003      	b.n	1001264e <_vfiprintf_r+0x36>
10012646:	4b7c      	ldr	r3, [pc, #496]	; (10012838 <_vfiprintf_r+0x220>)
10012648:	429f      	cmp	r7, r3
1001264a:	d100      	bne.n	1001264e <_vfiprintf_r+0x36>
1001264c:	68f7      	ldr	r7, [r6, #12]
1001264e:	89bb      	ldrh	r3, [r7, #12]
10012650:	071b      	lsls	r3, r3, #28
10012652:	d50a      	bpl.n	1001266a <_vfiprintf_r+0x52>
10012654:	693b      	ldr	r3, [r7, #16]
10012656:	2b00      	cmp	r3, #0
10012658:	d007      	beq.n	1001266a <_vfiprintf_r+0x52>
1001265a:	2300      	movs	r3, #0
1001265c:	ad06      	add	r5, sp, #24
1001265e:	616b      	str	r3, [r5, #20]
10012660:	3320      	adds	r3, #32
10012662:	766b      	strb	r3, [r5, #25]
10012664:	3310      	adds	r3, #16
10012666:	76ab      	strb	r3, [r5, #26]
10012668:	e03d      	b.n	100126e6 <_vfiprintf_r+0xce>
1001266a:	0039      	movs	r1, r7
1001266c:	0030      	movs	r0, r6
1001266e:	f7ff fd49 	bl	10012104 <__swsetup_r>
10012672:	2800      	cmp	r0, #0
10012674:	d0f1      	beq.n	1001265a <_vfiprintf_r+0x42>
10012676:	2001      	movs	r0, #1
10012678:	4240      	negs	r0, r0
1001267a:	e0d6      	b.n	1001282a <_vfiprintf_r+0x212>
1001267c:	9a05      	ldr	r2, [sp, #20]
1001267e:	1d11      	adds	r1, r2, #4
10012680:	6812      	ldr	r2, [r2, #0]
10012682:	9105      	str	r1, [sp, #20]
10012684:	2a00      	cmp	r2, #0
10012686:	da00      	bge.n	1001268a <_vfiprintf_r+0x72>
10012688:	e07f      	b.n	1001278a <_vfiprintf_r+0x172>
1001268a:	9209      	str	r2, [sp, #36]	; 0x24
1001268c:	3401      	adds	r4, #1
1001268e:	7823      	ldrb	r3, [r4, #0]
10012690:	2b2e      	cmp	r3, #46	; 0x2e
10012692:	d100      	bne.n	10012696 <_vfiprintf_r+0x7e>
10012694:	e08d      	b.n	100127b2 <_vfiprintf_r+0x19a>
10012696:	7821      	ldrb	r1, [r4, #0]
10012698:	2203      	movs	r2, #3
1001269a:	4868      	ldr	r0, [pc, #416]	; (1001283c <_vfiprintf_r+0x224>)
1001269c:	f000 fb48 	bl	10012d30 <memchr>
100126a0:	2800      	cmp	r0, #0
100126a2:	d007      	beq.n	100126b4 <_vfiprintf_r+0x9c>
100126a4:	4b65      	ldr	r3, [pc, #404]	; (1001283c <_vfiprintf_r+0x224>)
100126a6:	682a      	ldr	r2, [r5, #0]
100126a8:	1ac0      	subs	r0, r0, r3
100126aa:	2340      	movs	r3, #64	; 0x40
100126ac:	4083      	lsls	r3, r0
100126ae:	4313      	orrs	r3, r2
100126b0:	602b      	str	r3, [r5, #0]
100126b2:	3401      	adds	r4, #1
100126b4:	7821      	ldrb	r1, [r4, #0]
100126b6:	1c63      	adds	r3, r4, #1
100126b8:	2206      	movs	r2, #6
100126ba:	4861      	ldr	r0, [pc, #388]	; (10012840 <_vfiprintf_r+0x228>)
100126bc:	9302      	str	r3, [sp, #8]
100126be:	7629      	strb	r1, [r5, #24]
100126c0:	f000 fb36 	bl	10012d30 <memchr>
100126c4:	2800      	cmp	r0, #0
100126c6:	d100      	bne.n	100126ca <_vfiprintf_r+0xb2>
100126c8:	e09d      	b.n	10012806 <_vfiprintf_r+0x1ee>
100126ca:	4b5e      	ldr	r3, [pc, #376]	; (10012844 <_vfiprintf_r+0x22c>)
100126cc:	2b00      	cmp	r3, #0
100126ce:	d000      	beq.n	100126d2 <_vfiprintf_r+0xba>
100126d0:	e090      	b.n	100127f4 <_vfiprintf_r+0x1dc>
100126d2:	2207      	movs	r2, #7
100126d4:	9b05      	ldr	r3, [sp, #20]
100126d6:	3307      	adds	r3, #7
100126d8:	4393      	bics	r3, r2
100126da:	3308      	adds	r3, #8
100126dc:	9305      	str	r3, [sp, #20]
100126de:	696b      	ldr	r3, [r5, #20]
100126e0:	9a03      	ldr	r2, [sp, #12]
100126e2:	189b      	adds	r3, r3, r2
100126e4:	616b      	str	r3, [r5, #20]
100126e6:	9c02      	ldr	r4, [sp, #8]
100126e8:	7823      	ldrb	r3, [r4, #0]
100126ea:	2b00      	cmp	r3, #0
100126ec:	d104      	bne.n	100126f8 <_vfiprintf_r+0xe0>
100126ee:	9b02      	ldr	r3, [sp, #8]
100126f0:	1ae3      	subs	r3, r4, r3
100126f2:	9304      	str	r3, [sp, #16]
100126f4:	d012      	beq.n	1001271c <_vfiprintf_r+0x104>
100126f6:	e003      	b.n	10012700 <_vfiprintf_r+0xe8>
100126f8:	2b25      	cmp	r3, #37	; 0x25
100126fa:	d0f8      	beq.n	100126ee <_vfiprintf_r+0xd6>
100126fc:	3401      	adds	r4, #1
100126fe:	e7f3      	b.n	100126e8 <_vfiprintf_r+0xd0>
10012700:	9b04      	ldr	r3, [sp, #16]
10012702:	9a02      	ldr	r2, [sp, #8]
10012704:	0039      	movs	r1, r7
10012706:	0030      	movs	r0, r6
10012708:	f7ff ff73 	bl	100125f2 <__sfputs_r>
1001270c:	1c43      	adds	r3, r0, #1
1001270e:	d100      	bne.n	10012712 <_vfiprintf_r+0xfa>
10012710:	e086      	b.n	10012820 <_vfiprintf_r+0x208>
10012712:	696a      	ldr	r2, [r5, #20]
10012714:	9b04      	ldr	r3, [sp, #16]
10012716:	4694      	mov	ip, r2
10012718:	4463      	add	r3, ip
1001271a:	616b      	str	r3, [r5, #20]
1001271c:	7823      	ldrb	r3, [r4, #0]
1001271e:	2b00      	cmp	r3, #0
10012720:	d07e      	beq.n	10012820 <_vfiprintf_r+0x208>
10012722:	2201      	movs	r2, #1
10012724:	2300      	movs	r3, #0
10012726:	4252      	negs	r2, r2
10012728:	606a      	str	r2, [r5, #4]
1001272a:	a902      	add	r1, sp, #8
1001272c:	3254      	adds	r2, #84	; 0x54
1001272e:	1852      	adds	r2, r2, r1
10012730:	3401      	adds	r4, #1
10012732:	602b      	str	r3, [r5, #0]
10012734:	60eb      	str	r3, [r5, #12]
10012736:	60ab      	str	r3, [r5, #8]
10012738:	7013      	strb	r3, [r2, #0]
1001273a:	65ab      	str	r3, [r5, #88]	; 0x58
1001273c:	7821      	ldrb	r1, [r4, #0]
1001273e:	2205      	movs	r2, #5
10012740:	4841      	ldr	r0, [pc, #260]	; (10012848 <_vfiprintf_r+0x230>)
10012742:	f000 faf5 	bl	10012d30 <memchr>
10012746:	2800      	cmp	r0, #0
10012748:	d008      	beq.n	1001275c <_vfiprintf_r+0x144>
1001274a:	4b3f      	ldr	r3, [pc, #252]	; (10012848 <_vfiprintf_r+0x230>)
1001274c:	682a      	ldr	r2, [r5, #0]
1001274e:	1ac0      	subs	r0, r0, r3
10012750:	2301      	movs	r3, #1
10012752:	4083      	lsls	r3, r0
10012754:	4313      	orrs	r3, r2
10012756:	602b      	str	r3, [r5, #0]
10012758:	3401      	adds	r4, #1
1001275a:	e7ef      	b.n	1001273c <_vfiprintf_r+0x124>
1001275c:	682b      	ldr	r3, [r5, #0]
1001275e:	06da      	lsls	r2, r3, #27
10012760:	d504      	bpl.n	1001276c <_vfiprintf_r+0x154>
10012762:	2253      	movs	r2, #83	; 0x53
10012764:	2120      	movs	r1, #32
10012766:	a802      	add	r0, sp, #8
10012768:	1812      	adds	r2, r2, r0
1001276a:	7011      	strb	r1, [r2, #0]
1001276c:	071a      	lsls	r2, r3, #28
1001276e:	d504      	bpl.n	1001277a <_vfiprintf_r+0x162>
10012770:	2253      	movs	r2, #83	; 0x53
10012772:	212b      	movs	r1, #43	; 0x2b
10012774:	a802      	add	r0, sp, #8
10012776:	1812      	adds	r2, r2, r0
10012778:	7011      	strb	r1, [r2, #0]
1001277a:	7822      	ldrb	r2, [r4, #0]
1001277c:	2a2a      	cmp	r2, #42	; 0x2a
1001277e:	d100      	bne.n	10012782 <_vfiprintf_r+0x16a>
10012780:	e77c      	b.n	1001267c <_vfiprintf_r+0x64>
10012782:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012784:	2000      	movs	r0, #0
10012786:	210a      	movs	r1, #10
10012788:	e005      	b.n	10012796 <_vfiprintf_r+0x17e>
1001278a:	4252      	negs	r2, r2
1001278c:	60ea      	str	r2, [r5, #12]
1001278e:	2202      	movs	r2, #2
10012790:	4313      	orrs	r3, r2
10012792:	602b      	str	r3, [r5, #0]
10012794:	e77a      	b.n	1001268c <_vfiprintf_r+0x74>
10012796:	7822      	ldrb	r2, [r4, #0]
10012798:	3a30      	subs	r2, #48	; 0x30
1001279a:	2a09      	cmp	r2, #9
1001279c:	d804      	bhi.n	100127a8 <_vfiprintf_r+0x190>
1001279e:	434b      	muls	r3, r1
100127a0:	3401      	adds	r4, #1
100127a2:	189b      	adds	r3, r3, r2
100127a4:	2001      	movs	r0, #1
100127a6:	e7f6      	b.n	10012796 <_vfiprintf_r+0x17e>
100127a8:	2800      	cmp	r0, #0
100127aa:	d100      	bne.n	100127ae <_vfiprintf_r+0x196>
100127ac:	e76f      	b.n	1001268e <_vfiprintf_r+0x76>
100127ae:	9309      	str	r3, [sp, #36]	; 0x24
100127b0:	e76d      	b.n	1001268e <_vfiprintf_r+0x76>
100127b2:	7863      	ldrb	r3, [r4, #1]
100127b4:	2b2a      	cmp	r3, #42	; 0x2a
100127b6:	d10a      	bne.n	100127ce <_vfiprintf_r+0x1b6>
100127b8:	9b05      	ldr	r3, [sp, #20]
100127ba:	3402      	adds	r4, #2
100127bc:	1d1a      	adds	r2, r3, #4
100127be:	681b      	ldr	r3, [r3, #0]
100127c0:	9205      	str	r2, [sp, #20]
100127c2:	2b00      	cmp	r3, #0
100127c4:	da01      	bge.n	100127ca <_vfiprintf_r+0x1b2>
100127c6:	2301      	movs	r3, #1
100127c8:	425b      	negs	r3, r3
100127ca:	9307      	str	r3, [sp, #28]
100127cc:	e763      	b.n	10012696 <_vfiprintf_r+0x7e>
100127ce:	2300      	movs	r3, #0
100127d0:	200a      	movs	r0, #10
100127d2:	001a      	movs	r2, r3
100127d4:	3401      	adds	r4, #1
100127d6:	606b      	str	r3, [r5, #4]
100127d8:	7821      	ldrb	r1, [r4, #0]
100127da:	3930      	subs	r1, #48	; 0x30
100127dc:	2909      	cmp	r1, #9
100127de:	d804      	bhi.n	100127ea <_vfiprintf_r+0x1d2>
100127e0:	4342      	muls	r2, r0
100127e2:	3401      	adds	r4, #1
100127e4:	1852      	adds	r2, r2, r1
100127e6:	2301      	movs	r3, #1
100127e8:	e7f6      	b.n	100127d8 <_vfiprintf_r+0x1c0>
100127ea:	2b00      	cmp	r3, #0
100127ec:	d100      	bne.n	100127f0 <_vfiprintf_r+0x1d8>
100127ee:	e752      	b.n	10012696 <_vfiprintf_r+0x7e>
100127f0:	9207      	str	r2, [sp, #28]
100127f2:	e750      	b.n	10012696 <_vfiprintf_r+0x7e>
100127f4:	ab05      	add	r3, sp, #20
100127f6:	9300      	str	r3, [sp, #0]
100127f8:	003a      	movs	r2, r7
100127fa:	4b14      	ldr	r3, [pc, #80]	; (1001284c <_vfiprintf_r+0x234>)
100127fc:	0029      	movs	r1, r5
100127fe:	0030      	movs	r0, r6
10012800:	e000      	b.n	10012804 <_vfiprintf_r+0x1ec>
10012802:	bf00      	nop
10012804:	e007      	b.n	10012816 <_vfiprintf_r+0x1fe>
10012806:	ab05      	add	r3, sp, #20
10012808:	9300      	str	r3, [sp, #0]
1001280a:	003a      	movs	r2, r7
1001280c:	4b0f      	ldr	r3, [pc, #60]	; (1001284c <_vfiprintf_r+0x234>)
1001280e:	0029      	movs	r1, r5
10012810:	0030      	movs	r0, r6
10012812:	f000 f88b 	bl	1001292c <_printf_i>
10012816:	9003      	str	r0, [sp, #12]
10012818:	9b03      	ldr	r3, [sp, #12]
1001281a:	3301      	adds	r3, #1
1001281c:	d000      	beq.n	10012820 <_vfiprintf_r+0x208>
1001281e:	e75e      	b.n	100126de <_vfiprintf_r+0xc6>
10012820:	89bb      	ldrh	r3, [r7, #12]
10012822:	065b      	lsls	r3, r3, #25
10012824:	d500      	bpl.n	10012828 <_vfiprintf_r+0x210>
10012826:	e726      	b.n	10012676 <_vfiprintf_r+0x5e>
10012828:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001282a:	b01f      	add	sp, #124	; 0x7c
1001282c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001282e:	46c0      	nop			; (mov r8, r8)
10012830:	10013d1c 	.word	0x10013d1c
10012834:	10013d3c 	.word	0x10013d3c
10012838:	10013d5c 	.word	0x10013d5c
1001283c:	10013d82 	.word	0x10013d82
10012840:	10013d86 	.word	0x10013d86
10012844:	00000000 	.word	0x00000000
10012848:	10013d7c 	.word	0x10013d7c
1001284c:	100125f3 	.word	0x100125f3

10012850 <_printf_common>:
10012850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012852:	0017      	movs	r7, r2
10012854:	9301      	str	r3, [sp, #4]
10012856:	688a      	ldr	r2, [r1, #8]
10012858:	690b      	ldr	r3, [r1, #16]
1001285a:	9000      	str	r0, [sp, #0]
1001285c:	000c      	movs	r4, r1
1001285e:	4293      	cmp	r3, r2
10012860:	da00      	bge.n	10012864 <_printf_common+0x14>
10012862:	0013      	movs	r3, r2
10012864:	0022      	movs	r2, r4
10012866:	603b      	str	r3, [r7, #0]
10012868:	3243      	adds	r2, #67	; 0x43
1001286a:	7812      	ldrb	r2, [r2, #0]
1001286c:	2a00      	cmp	r2, #0
1001286e:	d001      	beq.n	10012874 <_printf_common+0x24>
10012870:	3301      	adds	r3, #1
10012872:	603b      	str	r3, [r7, #0]
10012874:	6823      	ldr	r3, [r4, #0]
10012876:	069b      	lsls	r3, r3, #26
10012878:	d502      	bpl.n	10012880 <_printf_common+0x30>
1001287a:	683b      	ldr	r3, [r7, #0]
1001287c:	3302      	adds	r3, #2
1001287e:	603b      	str	r3, [r7, #0]
10012880:	2506      	movs	r5, #6
10012882:	6823      	ldr	r3, [r4, #0]
10012884:	401d      	ands	r5, r3
10012886:	d01e      	beq.n	100128c6 <_printf_common+0x76>
10012888:	0023      	movs	r3, r4
1001288a:	3343      	adds	r3, #67	; 0x43
1001288c:	781b      	ldrb	r3, [r3, #0]
1001288e:	1e5a      	subs	r2, r3, #1
10012890:	4193      	sbcs	r3, r2
10012892:	6822      	ldr	r2, [r4, #0]
10012894:	0692      	lsls	r2, r2, #26
10012896:	d51c      	bpl.n	100128d2 <_printf_common+0x82>
10012898:	2030      	movs	r0, #48	; 0x30
1001289a:	18e1      	adds	r1, r4, r3
1001289c:	3143      	adds	r1, #67	; 0x43
1001289e:	7008      	strb	r0, [r1, #0]
100128a0:	0021      	movs	r1, r4
100128a2:	1c5a      	adds	r2, r3, #1
100128a4:	3145      	adds	r1, #69	; 0x45
100128a6:	7809      	ldrb	r1, [r1, #0]
100128a8:	18a2      	adds	r2, r4, r2
100128aa:	3243      	adds	r2, #67	; 0x43
100128ac:	3302      	adds	r3, #2
100128ae:	7011      	strb	r1, [r2, #0]
100128b0:	e00f      	b.n	100128d2 <_printf_common+0x82>
100128b2:	0022      	movs	r2, r4
100128b4:	2301      	movs	r3, #1
100128b6:	3219      	adds	r2, #25
100128b8:	9901      	ldr	r1, [sp, #4]
100128ba:	9800      	ldr	r0, [sp, #0]
100128bc:	9e08      	ldr	r6, [sp, #32]
100128be:	47b0      	blx	r6
100128c0:	1c43      	adds	r3, r0, #1
100128c2:	d00e      	beq.n	100128e2 <_printf_common+0x92>
100128c4:	3501      	adds	r5, #1
100128c6:	68e3      	ldr	r3, [r4, #12]
100128c8:	683a      	ldr	r2, [r7, #0]
100128ca:	1a9b      	subs	r3, r3, r2
100128cc:	429d      	cmp	r5, r3
100128ce:	dbf0      	blt.n	100128b2 <_printf_common+0x62>
100128d0:	e7da      	b.n	10012888 <_printf_common+0x38>
100128d2:	0022      	movs	r2, r4
100128d4:	9901      	ldr	r1, [sp, #4]
100128d6:	3243      	adds	r2, #67	; 0x43
100128d8:	9800      	ldr	r0, [sp, #0]
100128da:	9d08      	ldr	r5, [sp, #32]
100128dc:	47a8      	blx	r5
100128de:	1c43      	adds	r3, r0, #1
100128e0:	d102      	bne.n	100128e8 <_printf_common+0x98>
100128e2:	2001      	movs	r0, #1
100128e4:	4240      	negs	r0, r0
100128e6:	e020      	b.n	1001292a <_printf_common+0xda>
100128e8:	2306      	movs	r3, #6
100128ea:	6820      	ldr	r0, [r4, #0]
100128ec:	68e1      	ldr	r1, [r4, #12]
100128ee:	683a      	ldr	r2, [r7, #0]
100128f0:	4003      	ands	r3, r0
100128f2:	2500      	movs	r5, #0
100128f4:	2b04      	cmp	r3, #4
100128f6:	d103      	bne.n	10012900 <_printf_common+0xb0>
100128f8:	1a8d      	subs	r5, r1, r2
100128fa:	43eb      	mvns	r3, r5
100128fc:	17db      	asrs	r3, r3, #31
100128fe:	401d      	ands	r5, r3
10012900:	68a3      	ldr	r3, [r4, #8]
10012902:	6922      	ldr	r2, [r4, #16]
10012904:	4293      	cmp	r3, r2
10012906:	dd01      	ble.n	1001290c <_printf_common+0xbc>
10012908:	1a9b      	subs	r3, r3, r2
1001290a:	18ed      	adds	r5, r5, r3
1001290c:	2700      	movs	r7, #0
1001290e:	42bd      	cmp	r5, r7
10012910:	d00a      	beq.n	10012928 <_printf_common+0xd8>
10012912:	0022      	movs	r2, r4
10012914:	2301      	movs	r3, #1
10012916:	321a      	adds	r2, #26
10012918:	9901      	ldr	r1, [sp, #4]
1001291a:	9800      	ldr	r0, [sp, #0]
1001291c:	9e08      	ldr	r6, [sp, #32]
1001291e:	47b0      	blx	r6
10012920:	1c43      	adds	r3, r0, #1
10012922:	d0de      	beq.n	100128e2 <_printf_common+0x92>
10012924:	3701      	adds	r7, #1
10012926:	e7f2      	b.n	1001290e <_printf_common+0xbe>
10012928:	2000      	movs	r0, #0
1001292a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

1001292c <_printf_i>:
1001292c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001292e:	b08b      	sub	sp, #44	; 0x2c
10012930:	9206      	str	r2, [sp, #24]
10012932:	000a      	movs	r2, r1
10012934:	3243      	adds	r2, #67	; 0x43
10012936:	9307      	str	r3, [sp, #28]
10012938:	9005      	str	r0, [sp, #20]
1001293a:	9204      	str	r2, [sp, #16]
1001293c:	7e0a      	ldrb	r2, [r1, #24]
1001293e:	000c      	movs	r4, r1
10012940:	9b10      	ldr	r3, [sp, #64]	; 0x40
10012942:	2a6e      	cmp	r2, #110	; 0x6e
10012944:	d100      	bne.n	10012948 <_printf_i+0x1c>
10012946:	e0ab      	b.n	10012aa0 <_printf_i+0x174>
10012948:	d811      	bhi.n	1001296e <_printf_i+0x42>
1001294a:	2a63      	cmp	r2, #99	; 0x63
1001294c:	d022      	beq.n	10012994 <_printf_i+0x68>
1001294e:	d809      	bhi.n	10012964 <_printf_i+0x38>
10012950:	2a00      	cmp	r2, #0
10012952:	d100      	bne.n	10012956 <_printf_i+0x2a>
10012954:	e0b5      	b.n	10012ac2 <_printf_i+0x196>
10012956:	2a58      	cmp	r2, #88	; 0x58
10012958:	d000      	beq.n	1001295c <_printf_i+0x30>
1001295a:	e0c5      	b.n	10012ae8 <_printf_i+0x1bc>
1001295c:	3145      	adds	r1, #69	; 0x45
1001295e:	700a      	strb	r2, [r1, #0]
10012960:	4a81      	ldr	r2, [pc, #516]	; (10012b68 <_printf_i+0x23c>)
10012962:	e04f      	b.n	10012a04 <_printf_i+0xd8>
10012964:	2a64      	cmp	r2, #100	; 0x64
10012966:	d01d      	beq.n	100129a4 <_printf_i+0x78>
10012968:	2a69      	cmp	r2, #105	; 0x69
1001296a:	d01b      	beq.n	100129a4 <_printf_i+0x78>
1001296c:	e0bc      	b.n	10012ae8 <_printf_i+0x1bc>
1001296e:	2a73      	cmp	r2, #115	; 0x73
10012970:	d100      	bne.n	10012974 <_printf_i+0x48>
10012972:	e0aa      	b.n	10012aca <_printf_i+0x19e>
10012974:	d809      	bhi.n	1001298a <_printf_i+0x5e>
10012976:	2a6f      	cmp	r2, #111	; 0x6f
10012978:	d029      	beq.n	100129ce <_printf_i+0xa2>
1001297a:	2a70      	cmp	r2, #112	; 0x70
1001297c:	d000      	beq.n	10012980 <_printf_i+0x54>
1001297e:	e0b3      	b.n	10012ae8 <_printf_i+0x1bc>
10012980:	2220      	movs	r2, #32
10012982:	6809      	ldr	r1, [r1, #0]
10012984:	430a      	orrs	r2, r1
10012986:	6022      	str	r2, [r4, #0]
10012988:	e037      	b.n	100129fa <_printf_i+0xce>
1001298a:	2a75      	cmp	r2, #117	; 0x75
1001298c:	d01f      	beq.n	100129ce <_printf_i+0xa2>
1001298e:	2a78      	cmp	r2, #120	; 0x78
10012990:	d033      	beq.n	100129fa <_printf_i+0xce>
10012992:	e0a9      	b.n	10012ae8 <_printf_i+0x1bc>
10012994:	000e      	movs	r6, r1
10012996:	681a      	ldr	r2, [r3, #0]
10012998:	3642      	adds	r6, #66	; 0x42
1001299a:	1d11      	adds	r1, r2, #4
1001299c:	6019      	str	r1, [r3, #0]
1001299e:	6813      	ldr	r3, [r2, #0]
100129a0:	7033      	strb	r3, [r6, #0]
100129a2:	e0a4      	b.n	10012aee <_printf_i+0x1c2>
100129a4:	6821      	ldr	r1, [r4, #0]
100129a6:	681a      	ldr	r2, [r3, #0]
100129a8:	0608      	lsls	r0, r1, #24
100129aa:	d406      	bmi.n	100129ba <_printf_i+0x8e>
100129ac:	0649      	lsls	r1, r1, #25
100129ae:	d504      	bpl.n	100129ba <_printf_i+0x8e>
100129b0:	1d11      	adds	r1, r2, #4
100129b2:	6019      	str	r1, [r3, #0]
100129b4:	2300      	movs	r3, #0
100129b6:	5ed5      	ldrsh	r5, [r2, r3]
100129b8:	e002      	b.n	100129c0 <_printf_i+0x94>
100129ba:	1d11      	adds	r1, r2, #4
100129bc:	6019      	str	r1, [r3, #0]
100129be:	6815      	ldr	r5, [r2, #0]
100129c0:	2d00      	cmp	r5, #0
100129c2:	da3b      	bge.n	10012a3c <_printf_i+0x110>
100129c4:	232d      	movs	r3, #45	; 0x2d
100129c6:	9a04      	ldr	r2, [sp, #16]
100129c8:	426d      	negs	r5, r5
100129ca:	7013      	strb	r3, [r2, #0]
100129cc:	e036      	b.n	10012a3c <_printf_i+0x110>
100129ce:	6821      	ldr	r1, [r4, #0]
100129d0:	681a      	ldr	r2, [r3, #0]
100129d2:	0608      	lsls	r0, r1, #24
100129d4:	d406      	bmi.n	100129e4 <_printf_i+0xb8>
100129d6:	0649      	lsls	r1, r1, #25
100129d8:	d504      	bpl.n	100129e4 <_printf_i+0xb8>
100129da:	6815      	ldr	r5, [r2, #0]
100129dc:	1d11      	adds	r1, r2, #4
100129de:	6019      	str	r1, [r3, #0]
100129e0:	b2ad      	uxth	r5, r5
100129e2:	e002      	b.n	100129ea <_printf_i+0xbe>
100129e4:	1d11      	adds	r1, r2, #4
100129e6:	6019      	str	r1, [r3, #0]
100129e8:	6815      	ldr	r5, [r2, #0]
100129ea:	4b5f      	ldr	r3, [pc, #380]	; (10012b68 <_printf_i+0x23c>)
100129ec:	7e22      	ldrb	r2, [r4, #24]
100129ee:	9303      	str	r3, [sp, #12]
100129f0:	2708      	movs	r7, #8
100129f2:	2a6f      	cmp	r2, #111	; 0x6f
100129f4:	d01d      	beq.n	10012a32 <_printf_i+0x106>
100129f6:	270a      	movs	r7, #10
100129f8:	e01b      	b.n	10012a32 <_printf_i+0x106>
100129fa:	0022      	movs	r2, r4
100129fc:	2178      	movs	r1, #120	; 0x78
100129fe:	3245      	adds	r2, #69	; 0x45
10012a00:	7011      	strb	r1, [r2, #0]
10012a02:	4a5a      	ldr	r2, [pc, #360]	; (10012b6c <_printf_i+0x240>)
10012a04:	6819      	ldr	r1, [r3, #0]
10012a06:	9203      	str	r2, [sp, #12]
10012a08:	1d08      	adds	r0, r1, #4
10012a0a:	6822      	ldr	r2, [r4, #0]
10012a0c:	6018      	str	r0, [r3, #0]
10012a0e:	680d      	ldr	r5, [r1, #0]
10012a10:	0610      	lsls	r0, r2, #24
10012a12:	d402      	bmi.n	10012a1a <_printf_i+0xee>
10012a14:	0650      	lsls	r0, r2, #25
10012a16:	d500      	bpl.n	10012a1a <_printf_i+0xee>
10012a18:	b2ad      	uxth	r5, r5
10012a1a:	07d3      	lsls	r3, r2, #31
10012a1c:	d502      	bpl.n	10012a24 <_printf_i+0xf8>
10012a1e:	2320      	movs	r3, #32
10012a20:	431a      	orrs	r2, r3
10012a22:	6022      	str	r2, [r4, #0]
10012a24:	2710      	movs	r7, #16
10012a26:	2d00      	cmp	r5, #0
10012a28:	d103      	bne.n	10012a32 <_printf_i+0x106>
10012a2a:	2320      	movs	r3, #32
10012a2c:	6822      	ldr	r2, [r4, #0]
10012a2e:	439a      	bics	r2, r3
10012a30:	6022      	str	r2, [r4, #0]
10012a32:	0023      	movs	r3, r4
10012a34:	2200      	movs	r2, #0
10012a36:	3343      	adds	r3, #67	; 0x43
10012a38:	701a      	strb	r2, [r3, #0]
10012a3a:	e002      	b.n	10012a42 <_printf_i+0x116>
10012a3c:	270a      	movs	r7, #10
10012a3e:	4b4a      	ldr	r3, [pc, #296]	; (10012b68 <_printf_i+0x23c>)
10012a40:	9303      	str	r3, [sp, #12]
10012a42:	6863      	ldr	r3, [r4, #4]
10012a44:	60a3      	str	r3, [r4, #8]
10012a46:	2b00      	cmp	r3, #0
10012a48:	db09      	blt.n	10012a5e <_printf_i+0x132>
10012a4a:	2204      	movs	r2, #4
10012a4c:	6821      	ldr	r1, [r4, #0]
10012a4e:	4391      	bics	r1, r2
10012a50:	6021      	str	r1, [r4, #0]
10012a52:	2d00      	cmp	r5, #0
10012a54:	d105      	bne.n	10012a62 <_printf_i+0x136>
10012a56:	9e04      	ldr	r6, [sp, #16]
10012a58:	2b00      	cmp	r3, #0
10012a5a:	d011      	beq.n	10012a80 <_printf_i+0x154>
10012a5c:	e07b      	b.n	10012b56 <_printf_i+0x22a>
10012a5e:	2d00      	cmp	r5, #0
10012a60:	d079      	beq.n	10012b56 <_printf_i+0x22a>
10012a62:	9e04      	ldr	r6, [sp, #16]
10012a64:	0028      	movs	r0, r5
10012a66:	0039      	movs	r1, r7
10012a68:	f7fe f870 	bl	10010b4c <__aeabi_uidivmod>
10012a6c:	9b03      	ldr	r3, [sp, #12]
10012a6e:	3e01      	subs	r6, #1
10012a70:	5c5b      	ldrb	r3, [r3, r1]
10012a72:	0028      	movs	r0, r5
10012a74:	7033      	strb	r3, [r6, #0]
10012a76:	0039      	movs	r1, r7
10012a78:	f7fd ffe2 	bl	10010a40 <__aeabi_uidiv>
10012a7c:	1e05      	subs	r5, r0, #0
10012a7e:	d1f1      	bne.n	10012a64 <_printf_i+0x138>
10012a80:	2f08      	cmp	r7, #8
10012a82:	d109      	bne.n	10012a98 <_printf_i+0x16c>
10012a84:	6823      	ldr	r3, [r4, #0]
10012a86:	07db      	lsls	r3, r3, #31
10012a88:	d506      	bpl.n	10012a98 <_printf_i+0x16c>
10012a8a:	6863      	ldr	r3, [r4, #4]
10012a8c:	6922      	ldr	r2, [r4, #16]
10012a8e:	4293      	cmp	r3, r2
10012a90:	dc02      	bgt.n	10012a98 <_printf_i+0x16c>
10012a92:	2330      	movs	r3, #48	; 0x30
10012a94:	3e01      	subs	r6, #1
10012a96:	7033      	strb	r3, [r6, #0]
10012a98:	9b04      	ldr	r3, [sp, #16]
10012a9a:	1b9b      	subs	r3, r3, r6
10012a9c:	6123      	str	r3, [r4, #16]
10012a9e:	e02b      	b.n	10012af8 <_printf_i+0x1cc>
10012aa0:	6809      	ldr	r1, [r1, #0]
10012aa2:	681a      	ldr	r2, [r3, #0]
10012aa4:	0608      	lsls	r0, r1, #24
10012aa6:	d407      	bmi.n	10012ab8 <_printf_i+0x18c>
10012aa8:	0649      	lsls	r1, r1, #25
10012aaa:	d505      	bpl.n	10012ab8 <_printf_i+0x18c>
10012aac:	1d11      	adds	r1, r2, #4
10012aae:	6019      	str	r1, [r3, #0]
10012ab0:	6813      	ldr	r3, [r2, #0]
10012ab2:	8aa2      	ldrh	r2, [r4, #20]
10012ab4:	801a      	strh	r2, [r3, #0]
10012ab6:	e004      	b.n	10012ac2 <_printf_i+0x196>
10012ab8:	1d11      	adds	r1, r2, #4
10012aba:	6019      	str	r1, [r3, #0]
10012abc:	6813      	ldr	r3, [r2, #0]
10012abe:	6962      	ldr	r2, [r4, #20]
10012ac0:	601a      	str	r2, [r3, #0]
10012ac2:	2300      	movs	r3, #0
10012ac4:	9e04      	ldr	r6, [sp, #16]
10012ac6:	6123      	str	r3, [r4, #16]
10012ac8:	e016      	b.n	10012af8 <_printf_i+0x1cc>
10012aca:	681a      	ldr	r2, [r3, #0]
10012acc:	1d11      	adds	r1, r2, #4
10012ace:	6019      	str	r1, [r3, #0]
10012ad0:	6816      	ldr	r6, [r2, #0]
10012ad2:	2100      	movs	r1, #0
10012ad4:	6862      	ldr	r2, [r4, #4]
10012ad6:	0030      	movs	r0, r6
10012ad8:	f000 f92a 	bl	10012d30 <memchr>
10012adc:	2800      	cmp	r0, #0
10012ade:	d001      	beq.n	10012ae4 <_printf_i+0x1b8>
10012ae0:	1b80      	subs	r0, r0, r6
10012ae2:	6060      	str	r0, [r4, #4]
10012ae4:	6863      	ldr	r3, [r4, #4]
10012ae6:	e003      	b.n	10012af0 <_printf_i+0x1c4>
10012ae8:	0026      	movs	r6, r4
10012aea:	3642      	adds	r6, #66	; 0x42
10012aec:	7032      	strb	r2, [r6, #0]
10012aee:	2301      	movs	r3, #1
10012af0:	6123      	str	r3, [r4, #16]
10012af2:	2300      	movs	r3, #0
10012af4:	9a04      	ldr	r2, [sp, #16]
10012af6:	7013      	strb	r3, [r2, #0]
10012af8:	9b07      	ldr	r3, [sp, #28]
10012afa:	aa09      	add	r2, sp, #36	; 0x24
10012afc:	9300      	str	r3, [sp, #0]
10012afe:	0021      	movs	r1, r4
10012b00:	9b06      	ldr	r3, [sp, #24]
10012b02:	9805      	ldr	r0, [sp, #20]
10012b04:	f7ff fea4 	bl	10012850 <_printf_common>
10012b08:	1c43      	adds	r3, r0, #1
10012b0a:	d102      	bne.n	10012b12 <_printf_i+0x1e6>
10012b0c:	2001      	movs	r0, #1
10012b0e:	4240      	negs	r0, r0
10012b10:	e027      	b.n	10012b62 <_printf_i+0x236>
10012b12:	6923      	ldr	r3, [r4, #16]
10012b14:	0032      	movs	r2, r6
10012b16:	9906      	ldr	r1, [sp, #24]
10012b18:	9805      	ldr	r0, [sp, #20]
10012b1a:	9d07      	ldr	r5, [sp, #28]
10012b1c:	47a8      	blx	r5
10012b1e:	1c43      	adds	r3, r0, #1
10012b20:	d0f4      	beq.n	10012b0c <_printf_i+0x1e0>
10012b22:	6823      	ldr	r3, [r4, #0]
10012b24:	2500      	movs	r5, #0
10012b26:	079b      	lsls	r3, r3, #30
10012b28:	d40f      	bmi.n	10012b4a <_printf_i+0x21e>
10012b2a:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012b2c:	68e0      	ldr	r0, [r4, #12]
10012b2e:	4298      	cmp	r0, r3
10012b30:	da17      	bge.n	10012b62 <_printf_i+0x236>
10012b32:	0018      	movs	r0, r3
10012b34:	e015      	b.n	10012b62 <_printf_i+0x236>
10012b36:	0022      	movs	r2, r4
10012b38:	2301      	movs	r3, #1
10012b3a:	3219      	adds	r2, #25
10012b3c:	9906      	ldr	r1, [sp, #24]
10012b3e:	9805      	ldr	r0, [sp, #20]
10012b40:	9e07      	ldr	r6, [sp, #28]
10012b42:	47b0      	blx	r6
10012b44:	1c43      	adds	r3, r0, #1
10012b46:	d0e1      	beq.n	10012b0c <_printf_i+0x1e0>
10012b48:	3501      	adds	r5, #1
10012b4a:	68e3      	ldr	r3, [r4, #12]
10012b4c:	9a09      	ldr	r2, [sp, #36]	; 0x24
10012b4e:	1a9b      	subs	r3, r3, r2
10012b50:	429d      	cmp	r5, r3
10012b52:	dbf0      	blt.n	10012b36 <_printf_i+0x20a>
10012b54:	e7e9      	b.n	10012b2a <_printf_i+0x1fe>
10012b56:	0026      	movs	r6, r4
10012b58:	9b03      	ldr	r3, [sp, #12]
10012b5a:	3642      	adds	r6, #66	; 0x42
10012b5c:	781b      	ldrb	r3, [r3, #0]
10012b5e:	7033      	strb	r3, [r6, #0]
10012b60:	e78e      	b.n	10012a80 <_printf_i+0x154>
10012b62:	b00b      	add	sp, #44	; 0x2c
10012b64:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012b66:	46c0      	nop			; (mov r8, r8)
10012b68:	10013d8d 	.word	0x10013d8d
10012b6c:	10013d9e 	.word	0x10013d9e

10012b70 <_putc_r>:
10012b70:	b570      	push	{r4, r5, r6, lr}
10012b72:	0006      	movs	r6, r0
10012b74:	000d      	movs	r5, r1
10012b76:	0014      	movs	r4, r2
10012b78:	2800      	cmp	r0, #0
10012b7a:	d004      	beq.n	10012b86 <_putc_r+0x16>
10012b7c:	6983      	ldr	r3, [r0, #24]
10012b7e:	2b00      	cmp	r3, #0
10012b80:	d101      	bne.n	10012b86 <_putc_r+0x16>
10012b82:	f7ff fc29 	bl	100123d8 <__sinit>
10012b86:	4b12      	ldr	r3, [pc, #72]	; (10012bd0 <_putc_r+0x60>)
10012b88:	429c      	cmp	r4, r3
10012b8a:	d101      	bne.n	10012b90 <_putc_r+0x20>
10012b8c:	6874      	ldr	r4, [r6, #4]
10012b8e:	e008      	b.n	10012ba2 <_putc_r+0x32>
10012b90:	4b10      	ldr	r3, [pc, #64]	; (10012bd4 <_putc_r+0x64>)
10012b92:	429c      	cmp	r4, r3
10012b94:	d101      	bne.n	10012b9a <_putc_r+0x2a>
10012b96:	68b4      	ldr	r4, [r6, #8]
10012b98:	e003      	b.n	10012ba2 <_putc_r+0x32>
10012b9a:	4b0f      	ldr	r3, [pc, #60]	; (10012bd8 <_putc_r+0x68>)
10012b9c:	429c      	cmp	r4, r3
10012b9e:	d100      	bne.n	10012ba2 <_putc_r+0x32>
10012ba0:	68f4      	ldr	r4, [r6, #12]
10012ba2:	68a3      	ldr	r3, [r4, #8]
10012ba4:	3b01      	subs	r3, #1
10012ba6:	60a3      	str	r3, [r4, #8]
10012ba8:	2b00      	cmp	r3, #0
10012baa:	da05      	bge.n	10012bb8 <_putc_r+0x48>
10012bac:	69a2      	ldr	r2, [r4, #24]
10012bae:	4293      	cmp	r3, r2
10012bb0:	db08      	blt.n	10012bc4 <_putc_r+0x54>
10012bb2:	b2eb      	uxtb	r3, r5
10012bb4:	2b0a      	cmp	r3, #10
10012bb6:	d005      	beq.n	10012bc4 <_putc_r+0x54>
10012bb8:	6823      	ldr	r3, [r4, #0]
10012bba:	b2e8      	uxtb	r0, r5
10012bbc:	1c5a      	adds	r2, r3, #1
10012bbe:	6022      	str	r2, [r4, #0]
10012bc0:	701d      	strb	r5, [r3, #0]
10012bc2:	e004      	b.n	10012bce <_putc_r+0x5e>
10012bc4:	0022      	movs	r2, r4
10012bc6:	0029      	movs	r1, r5
10012bc8:	0030      	movs	r0, r6
10012bca:	f7ff fa43 	bl	10012054 <__swbuf_r>
10012bce:	bd70      	pop	{r4, r5, r6, pc}
10012bd0:	10013d1c 	.word	0x10013d1c
10012bd4:	10013d3c 	.word	0x10013d3c
10012bd8:	10013d5c 	.word	0x10013d5c

10012bdc <__sread>:
10012bdc:	b570      	push	{r4, r5, r6, lr}
10012bde:	000c      	movs	r4, r1
10012be0:	250e      	movs	r5, #14
10012be2:	5f49      	ldrsh	r1, [r1, r5]
10012be4:	f000 f8b0 	bl	10012d48 <_read_r>
10012be8:	2800      	cmp	r0, #0
10012bea:	db03      	blt.n	10012bf4 <__sread+0x18>
10012bec:	6d63      	ldr	r3, [r4, #84]	; 0x54
10012bee:	181b      	adds	r3, r3, r0
10012bf0:	6563      	str	r3, [r4, #84]	; 0x54
10012bf2:	e003      	b.n	10012bfc <__sread+0x20>
10012bf4:	89a2      	ldrh	r2, [r4, #12]
10012bf6:	4b02      	ldr	r3, [pc, #8]	; (10012c00 <__sread+0x24>)
10012bf8:	4013      	ands	r3, r2
10012bfa:	81a3      	strh	r3, [r4, #12]
10012bfc:	bd70      	pop	{r4, r5, r6, pc}
10012bfe:	46c0      	nop			; (mov r8, r8)
10012c00:	ffffefff 	.word	0xffffefff

10012c04 <__swrite>:
10012c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012c06:	001f      	movs	r7, r3
10012c08:	898b      	ldrh	r3, [r1, #12]
10012c0a:	0005      	movs	r5, r0
10012c0c:	000c      	movs	r4, r1
10012c0e:	0016      	movs	r6, r2
10012c10:	05db      	lsls	r3, r3, #23
10012c12:	d505      	bpl.n	10012c20 <__swrite+0x1c>
10012c14:	230e      	movs	r3, #14
10012c16:	5ec9      	ldrsh	r1, [r1, r3]
10012c18:	2200      	movs	r2, #0
10012c1a:	2302      	movs	r3, #2
10012c1c:	f000 f874 	bl	10012d08 <_lseek_r>
10012c20:	89a2      	ldrh	r2, [r4, #12]
10012c22:	4b05      	ldr	r3, [pc, #20]	; (10012c38 <__swrite+0x34>)
10012c24:	0028      	movs	r0, r5
10012c26:	4013      	ands	r3, r2
10012c28:	81a3      	strh	r3, [r4, #12]
10012c2a:	0032      	movs	r2, r6
10012c2c:	230e      	movs	r3, #14
10012c2e:	5ee1      	ldrsh	r1, [r4, r3]
10012c30:	003b      	movs	r3, r7
10012c32:	f000 f81f 	bl	10012c74 <_write_r>
10012c36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012c38:	ffffefff 	.word	0xffffefff

10012c3c <__sseek>:
10012c3c:	b570      	push	{r4, r5, r6, lr}
10012c3e:	000c      	movs	r4, r1
10012c40:	250e      	movs	r5, #14
10012c42:	5f49      	ldrsh	r1, [r1, r5]
10012c44:	f000 f860 	bl	10012d08 <_lseek_r>
10012c48:	89a3      	ldrh	r3, [r4, #12]
10012c4a:	1c42      	adds	r2, r0, #1
10012c4c:	d103      	bne.n	10012c56 <__sseek+0x1a>
10012c4e:	4a05      	ldr	r2, [pc, #20]	; (10012c64 <__sseek+0x28>)
10012c50:	4013      	ands	r3, r2
10012c52:	81a3      	strh	r3, [r4, #12]
10012c54:	e004      	b.n	10012c60 <__sseek+0x24>
10012c56:	2280      	movs	r2, #128	; 0x80
10012c58:	0152      	lsls	r2, r2, #5
10012c5a:	4313      	orrs	r3, r2
10012c5c:	81a3      	strh	r3, [r4, #12]
10012c5e:	6560      	str	r0, [r4, #84]	; 0x54
10012c60:	bd70      	pop	{r4, r5, r6, pc}
10012c62:	46c0      	nop			; (mov r8, r8)
10012c64:	ffffefff 	.word	0xffffefff

10012c68 <__sclose>:
10012c68:	b510      	push	{r4, lr}
10012c6a:	230e      	movs	r3, #14
10012c6c:	5ec9      	ldrsh	r1, [r1, r3]
10012c6e:	f000 f815 	bl	10012c9c <_close_r>
10012c72:	bd10      	pop	{r4, pc}

10012c74 <_write_r>:
10012c74:	b570      	push	{r4, r5, r6, lr}
10012c76:	0005      	movs	r5, r0
10012c78:	0008      	movs	r0, r1
10012c7a:	0011      	movs	r1, r2
10012c7c:	2200      	movs	r2, #0
10012c7e:	4c06      	ldr	r4, [pc, #24]	; (10012c98 <_write_r+0x24>)
10012c80:	6022      	str	r2, [r4, #0]
10012c82:	001a      	movs	r2, r3
10012c84:	f7f8 fc74 	bl	1000b570 <_write>
10012c88:	1c43      	adds	r3, r0, #1
10012c8a:	d103      	bne.n	10012c94 <_write_r+0x20>
10012c8c:	6823      	ldr	r3, [r4, #0]
10012c8e:	2b00      	cmp	r3, #0
10012c90:	d000      	beq.n	10012c94 <_write_r+0x20>
10012c92:	602b      	str	r3, [r5, #0]
10012c94:	bd70      	pop	{r4, r5, r6, pc}
10012c96:	46c0      	nop			; (mov r8, r8)
10012c98:	10016d3c 	.word	0x10016d3c

10012c9c <_close_r>:
10012c9c:	2300      	movs	r3, #0
10012c9e:	b570      	push	{r4, r5, r6, lr}
10012ca0:	4c06      	ldr	r4, [pc, #24]	; (10012cbc <_close_r+0x20>)
10012ca2:	0005      	movs	r5, r0
10012ca4:	0008      	movs	r0, r1
10012ca6:	6023      	str	r3, [r4, #0]
10012ca8:	f7f5 fb52 	bl	10008350 <_close>
10012cac:	1c43      	adds	r3, r0, #1
10012cae:	d103      	bne.n	10012cb8 <_close_r+0x1c>
10012cb0:	6823      	ldr	r3, [r4, #0]
10012cb2:	2b00      	cmp	r3, #0
10012cb4:	d000      	beq.n	10012cb8 <_close_r+0x1c>
10012cb6:	602b      	str	r3, [r5, #0]
10012cb8:	bd70      	pop	{r4, r5, r6, pc}
10012cba:	46c0      	nop			; (mov r8, r8)
10012cbc:	10016d3c 	.word	0x10016d3c

10012cc0 <_fstat_r>:
10012cc0:	2300      	movs	r3, #0
10012cc2:	b570      	push	{r4, r5, r6, lr}
10012cc4:	4c06      	ldr	r4, [pc, #24]	; (10012ce0 <_fstat_r+0x20>)
10012cc6:	0005      	movs	r5, r0
10012cc8:	0008      	movs	r0, r1
10012cca:	0011      	movs	r1, r2
10012ccc:	6023      	str	r3, [r4, #0]
10012cce:	f7f5 fb43 	bl	10008358 <_fstat>
10012cd2:	1c43      	adds	r3, r0, #1
10012cd4:	d103      	bne.n	10012cde <_fstat_r+0x1e>
10012cd6:	6823      	ldr	r3, [r4, #0]
10012cd8:	2b00      	cmp	r3, #0
10012cda:	d000      	beq.n	10012cde <_fstat_r+0x1e>
10012cdc:	602b      	str	r3, [r5, #0]
10012cde:	bd70      	pop	{r4, r5, r6, pc}
10012ce0:	10016d3c 	.word	0x10016d3c

10012ce4 <_isatty_r>:
10012ce4:	2300      	movs	r3, #0
10012ce6:	b570      	push	{r4, r5, r6, lr}
10012ce8:	4c06      	ldr	r4, [pc, #24]	; (10012d04 <_isatty_r+0x20>)
10012cea:	0005      	movs	r5, r0
10012cec:	0008      	movs	r0, r1
10012cee:	6023      	str	r3, [r4, #0]
10012cf0:	f7f5 fb38 	bl	10008364 <_isatty>
10012cf4:	1c43      	adds	r3, r0, #1
10012cf6:	d103      	bne.n	10012d00 <_isatty_r+0x1c>
10012cf8:	6823      	ldr	r3, [r4, #0]
10012cfa:	2b00      	cmp	r3, #0
10012cfc:	d000      	beq.n	10012d00 <_isatty_r+0x1c>
10012cfe:	602b      	str	r3, [r5, #0]
10012d00:	bd70      	pop	{r4, r5, r6, pc}
10012d02:	46c0      	nop			; (mov r8, r8)
10012d04:	10016d3c 	.word	0x10016d3c

10012d08 <_lseek_r>:
10012d08:	b570      	push	{r4, r5, r6, lr}
10012d0a:	0005      	movs	r5, r0
10012d0c:	0008      	movs	r0, r1
10012d0e:	0011      	movs	r1, r2
10012d10:	2200      	movs	r2, #0
10012d12:	4c06      	ldr	r4, [pc, #24]	; (10012d2c <_lseek_r+0x24>)
10012d14:	6022      	str	r2, [r4, #0]
10012d16:	001a      	movs	r2, r3
10012d18:	f7f5 fb26 	bl	10008368 <_lseek>
10012d1c:	1c43      	adds	r3, r0, #1
10012d1e:	d103      	bne.n	10012d28 <_lseek_r+0x20>
10012d20:	6823      	ldr	r3, [r4, #0]
10012d22:	2b00      	cmp	r3, #0
10012d24:	d000      	beq.n	10012d28 <_lseek_r+0x20>
10012d26:	602b      	str	r3, [r5, #0]
10012d28:	bd70      	pop	{r4, r5, r6, pc}
10012d2a:	46c0      	nop			; (mov r8, r8)
10012d2c:	10016d3c 	.word	0x10016d3c

10012d30 <memchr>:
10012d30:	b2c9      	uxtb	r1, r1
10012d32:	1882      	adds	r2, r0, r2
10012d34:	4290      	cmp	r0, r2
10012d36:	d004      	beq.n	10012d42 <memchr+0x12>
10012d38:	7803      	ldrb	r3, [r0, #0]
10012d3a:	428b      	cmp	r3, r1
10012d3c:	d002      	beq.n	10012d44 <memchr+0x14>
10012d3e:	3001      	adds	r0, #1
10012d40:	e7f8      	b.n	10012d34 <memchr+0x4>
10012d42:	2000      	movs	r0, #0
10012d44:	4770      	bx	lr
	...

10012d48 <_read_r>:
10012d48:	b570      	push	{r4, r5, r6, lr}
10012d4a:	0005      	movs	r5, r0
10012d4c:	0008      	movs	r0, r1
10012d4e:	0011      	movs	r1, r2
10012d50:	2200      	movs	r2, #0
10012d52:	4c06      	ldr	r4, [pc, #24]	; (10012d6c <_read_r+0x24>)
10012d54:	6022      	str	r2, [r4, #0]
10012d56:	001a      	movs	r2, r3
10012d58:	f7f8 fbea 	bl	1000b530 <_read>
10012d5c:	1c43      	adds	r3, r0, #1
10012d5e:	d103      	bne.n	10012d68 <_read_r+0x20>
10012d60:	6823      	ldr	r3, [r4, #0]
10012d62:	2b00      	cmp	r3, #0
10012d64:	d000      	beq.n	10012d68 <_read_r+0x20>
10012d66:	602b      	str	r3, [r5, #0]
10012d68:	bd70      	pop	{r4, r5, r6, pc}
10012d6a:	46c0      	nop			; (mov r8, r8)
10012d6c:	10016d3c 	.word	0x10016d3c
10012d70:	00000d0a 	.word	0x00000d0a
10012d74:	6e6f6420 	.word	0x6e6f6420
10012d78:	00002165 	.word	0x00002165
10012d7c:	0000000d 	.word	0x0000000d
10012d80:	3a4f2f54 	.word	0x3a4f2f54
10012d84:	46464f20 	.word	0x46464f20
10012d88:	00000000 	.word	0x00000000
10012d8c:	736d735b 	.word	0x736d735b
10012d90:	656c625f 	.word	0x656c625f
10012d94:	776f705f 	.word	0x776f705f
10012d98:	645f7265 	.word	0x645f7265
10012d9c:	5d6e776f 	.word	0x5d6e776f
10012da0:	00000000 	.word	0x00000000
10012da4:	3a4f2f54 	.word	0x3a4f2f54
10012da8:	30303520 	.word	0x30303520
10012dac:	736d2030 	.word	0x736d2030
10012db0:	00000000 	.word	0x00000000
10012db4:	736d735b 	.word	0x736d735b
10012db8:	656c625f 	.word	0x656c625f
10012dbc:	6961705f 	.word	0x6961705f
10012dc0:	5f646572 	.word	0x5f646572
10012dc4:	005d6e66 	.word	0x005d6e66
10012dc8:	736d735b 	.word	0x736d735b
10012dcc:	656c625f 	.word	0x656c625f
10012dd0:	7664615f 	.word	0x7664615f
10012dd4:	69747265 	.word	0x69747265
10012dd8:	095d6573 	.word	0x095d6573
10012ddc:	65766441 	.word	0x65766441
10012de0:	73697472 	.word	0x73697472
10012de4:	6e656d65 	.word	0x6e656d65
10012de8:	61642074 	.word	0x61642074
10012dec:	73206174 	.word	0x73206174
10012df0:	66207465 	.word	0x66207465
10012df4:	656c6961 	.word	0x656c6961
10012df8:	00002164 	.word	0x00002164
10012dfc:	736d735b 	.word	0x736d735b
10012e00:	7265735f 	.word	0x7265735f
10012e04:	65636976 	.word	0x65636976
10012e08:	7664615f 	.word	0x7664615f
10012e0c:	69747265 	.word	0x69747265
10012e10:	095d6573 	.word	0x095d6573
10012e14:	20454c42 	.word	0x20454c42
10012e18:	65766441 	.word	0x65766441
10012e1c:	73697472 	.word	0x73697472
10012e20:	6e656d65 	.word	0x6e656d65
10012e24:	74732074 	.word	0x74732074
10012e28:	20747261 	.word	0x20747261
10012e2c:	6c696166 	.word	0x6c696166
10012e30:	203a6465 	.word	0x203a6465
10012e34:	73616572 	.word	0x73616572
10012e38:	30206e6f 	.word	0x30206e6f
10012e3c:	00782578 	.word	0x00782578
10012e40:	20642520 	.word	0x20642520
10012e44:	454e4f47 	.word	0x454e4f47
10012e48:	0000203f 	.word	0x0000203f
10012e4c:	3a4f2f54 	.word	0x3a4f2f54
10012e50:	6d303220 	.word	0x6d303220
10012e54:	00000073 	.word	0x00000073
10012e58:	49544f4e 	.word	0x49544f4e
10012e5c:	41434946 	.word	0x41434946
10012e60:	4e4f4954 	.word	0x4e4f4954
10012e64:	52524520 	.word	0x52524520
10012e68:	2121524f 	.word	0x2121524f
10012e6c:	00000000 	.word	0x00000000

10012e70 <sms_ble_gap_cb>:
	...
10012e7c:	10008505 00000000 1000851d 10008651     ............Q...
	...
10012e94:	10008571 1000836d 00000000 00000000     q...m...........
	...

10012ebc <sms_ble_gatt_server_cb>:
10012ebc:	10008389 100083fd 00000000 00000000     ................
	...
10012ee4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10012ef4:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10012f04:	656c6968 74657320 676e6974 20707520     hile setting up 
10012f14:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10012f24:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10012f34:	6c626f72 77206d65 656c6968 74657320     roblem while set
10012f44:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10012f54:	65737520 75622072 6e6f7474 00000000      user button....
10012f64:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10012f74:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
10012f84:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
10012f94:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10012fa4:	5d736563 72655309 65636976 65642073     ces].Services de
10012fb4:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10012fc4:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
10012fd4:	206d656c 6c696877 65732065 6e697474     lem while settin
10012fe4:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10012ff4:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10013004:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10013014:	7320656c 69747465 7520676e 4d492070     le setting up IM
10013024:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10013034:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10013044:	73656369 6553095d 63697672 64207365     ices].Services d
10013054:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10013064:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
10013074:	75706d5f 6d6f635f 68635f70 5d6b6365     _mpu_comp_check]
10013084:	4b410909 33363938 20736920 696c6e6f     ..AK8963 is onli
10013094:	2e2e656e 0000002e 736d735b 75706d5f     ne......[sms_mpu
100130a4:	6568635f 095d6b63 55504d09 3532392d     _check]..MPU-925
100130b4:	73692030 6c6e6f20 2e656e69 00002e2e     0 is online.....
100130c4:	736d735b 6572705f 72757373 65645f65     [sms_pressure_de
100130d4:	656e6966 7265735f 65636976 53095d73     fine_services].S
100130e4:	69767265 20736563 69666564 676e696e     ervices defining
100130f4:	69616620 2c64656c 61657220 206e6f73      failed, reason 
10013104:	78257830 00000000 736d735b 6175645f     0x%x....[sms_dua
10013114:	6d69746c 5f317265 005d6e66 736d735b     ltimer1_fn].[sms
10013124:	6175645f 6d69746c 5f327265 005d6e66     _dualtimer2_fn].
10013134:	1000a550 1000a55e 1000a56c 1000a57a     P...^...l...z...
10013144:	1000a588 1000a596 1000a5a4 1000a5b4     ................
10013154:	1000a5c4 1000a5d4 1000a5e4 1000a5f4     ................
10013164:	1000a604 1000a614 1000a624 1000a634     ........$...4...
10013174:	1000a644 1000a654 1000a664 1000a674     D...T...d...t...
10013184:	1000a684 1000a694 1000a6a4 1000a6b4     ................
10013194:	1000a6c4 1000a6d4 1000a6e4 1000a6f4     ................
100131a4:	1000a702 1000a710 1000a71e 1000a72c     ............,...
100131b4:	1000a73a 1000a748 1000a756 1000a764     :...H...V...d...
100131c4:	1000a774 1000a784 1000a794 1000a7a4     t...............
100131d4:	1000a7b4 1000a7c4 1000a7d4 1000a7e4     ................
100131e4:	1000a7f4 1000a804 1000a814 1000a824     ............$...
100131f4:	1000a834 1000a844 1000a854 1000a864     4...D...T...d...
10013204:	1000a872 1000a880 1000a8ac 1000a8ba     r...............
10013214:	1000a8c8 1000a8d6 1000a8e4 1000a8f2     ................
10013224:	1000a900 1000a90e 1000a91c 1000a92a     ............*...
10013234:	1000a938 1000a946 1000a954 1000a962     8...F...T...b...
10013244:	1000a970 1000a97e 1000a98c 1000a99a     p...~...........
10013254:	1000a9a8 1000a9b6 1000a9c4 1000a9d2     ................
10013264:	1000a9e0 1000a9ee 1000a9fc 1000aa0a     ................
10013274:	1000aa18 1000aa26 1000aa34 1000aa42     ....&...4...B...
10013284:	1000aa50 1000aa5e 1000aa6c 1000aa7a     P...^...l...z...
10013294:	1000aa88 1000aa96 1000aaa4 1000aab2     ................
100132a4:	1000aac0 1000aace 1000aadc 1000aaea     ................
100132b4:	1000aaf8 1000ab06 1000ab14 1000ab22     ............"...
100132c4:	1000ab30 1000ab3e 1000ab4c 1000ab5a     0...>...L...Z...
100132d4:	1000ab68 1000ab76 1000ab84 1000ab92     h...v...........
100132e4:	1000ac2c 1000ac54 1000ac7c 1000aca4     ,...T...|.......
100132f4:	1000aee4 1000acd4 1000acec 1000ad64     ............d...
10013304:	1000ad7c 1000ad04 1000ad1c 1000ad34     |...........4...
10013314:	1000ad4c 1000ad94 1000b058 1000b058     L.......X...X...
10013324:	1000b058 1000b058 1000b058 1000b058     X...X...X...X...
10013334:	1000b058 1000b058 1000ae3c 1000ae54     X...X...<...T...
10013344:	1000ae6c 1000aefa 1000adc4 1000b058     l...........X...
10013354:	1000b058 1000b058 1000b058 1000b058     X...X...X...X...
10013364:	1000b058 1000ae84 1000ae9c 1000aeb4     X...............
10013374:	1000aecc 1000b058 1000b010 1000b028     ....X.......(...
10013384:	1000b058 1000b058 1000af26 1000af3c     X...X...&...<...
10013394:	1000af52 1000af68 1000b058 1000b058     R...h...X...X...
100133a4:	1000b058 1000b058 1000b058 1000b058     X...X...X...X...
100133b4:	1000b058 1000b058 1000ac18 1000ac40     X...X.......@...
100133c4:	1000ac68 1000ac90 1000acbc 1000adac     h...............
100133d4:	1000addc 1000adf4 1000ae0c 1000ae24     ............$...
100133e4:	1000af10 1000af7e 1000aff8 1000b040     ....~.......@...
100133f4:	1000b6a8 1000b6aa 1000b690 1000b690     ................
10013404:	1000b690 1000b6a8 1000b690 1000b690     ................
10013414:	1000beee 1000bf62 1000bed6 1000bf68     ....b.......h...
10013424:	1000bedc 1000bee2 1000bee8 1000c588     ................
10013434:	1000c588 1000c588 1000c588 1000c588     ................
10013444:	1000c588 1000c588 1000c588 1000c588     ................
10013454:	1000c588 1000c588 1000c588 1000c588     ................
10013464:	1000c588 1000c588 1000c588 1000c588     ................
10013474:	1000c588 1000c588 1000c5a6 1000c5a6     ................
10013484:	1000c5a6 1000c5a6 1000c5a6 1000c5a6     ................
10013494:	1000c5a6 1000c5a6 1000c5a6 1000c5a6     ................
100134a4:	1000c5c8 1000c5c8 1000c5c8 1000c5c8     ................
100134b4:	1000c5c8 1000c5c8 1000c5c8 1000c5c8     ................
100134c4:	1000c5c8 1000c5c8 1000c5ea 1000c5ea     ................
100134d4:	1000c5ea 1000c5ea 1000c5ea 1000c5ea     ................
100134e4:	1000c604 1000c604 1000c604 1000c604     ................
100134f4:	1000c604 1000c604 1000c604 1000c604     ................
10013504:	1000c604 1000c61e 1000c61e 1000c640     ............@...
10013514:	1000c640 1000c65a 1000c640 34333231     @...Z...@...1234
10013524:	00003635 efcdab00 00efcdab              56..........

10013530 <ble_mgr_gatt_server_handle>:
	...
10013548:	1000b5c5 1000b629 1000b5c9 00000000     ....)...........
10013558:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10013568:	00000000 65766441 73697472 20676e69     ....Advertising 
10013578:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10013588:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10013598:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
100135a8:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
100135b8:	69766544 64206563 6f637369 63656e6e     Device disconnec
100135c8:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
100135d8:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
100135e8:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100135f8:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10013608:	6c706d6f 64657465 63757320 73736563     ompleted success
10013618:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10013628:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10013638:	74707972 206e6f69 6f666e69 00000000     ryption info....
10013648:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10013658:	7320666f 206e6163 69766564 72206563     of scan device r
10013668:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10013678:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10013688:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10013698:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
100136a8:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
100136b8:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
100136c8:	46207473 656c6961 00000064 72696150     st Failed...Pair
100136d8:	20676e69 636f7270 72756465 6f632065     ing procedure co
100136e8:	656c706d 20646574 63637573 66737365     mpleted successf
100136f8:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10013708:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10013718:	726f7473 68742065 61702065 6e697269     store the pairin
10013728:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10013738:	4e206e6f 7320746f 74726174 00006465     on Not started..
10013748:	76616c53 65532065 69727563 52207974     Slave Security R
10013758:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10013768:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10013778:	71655220 74736575 41202d20 65687475      Request - Authe
10013788:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10013798:	00000000 65746e45 68742072 61502065     ....Enter the Pa
100137a8:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
100137b8:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
100137c8:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
100137d8:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100137e8:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100137f8:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10013808:	206e6f28 6568746f 65442072 65636976     (on other Device
10013818:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10013828:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10013838:	74616546 20657275 20746f4e 70707573     Feature Not supp
10013848:	6574726f 00000064 65746e45 20646572     orted...Entered 
10013858:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10013868:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10013878:	7020666f 20726565 69766564 69206563     of peer device i
10013888:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10013898:	00000000 61656c50 75206573 6961706e     ....Please unpai
100138a8:	68742072 65642065 65636976 6f726620     r the device fro
100138b8:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
100138c8:	656c6962 65732029 6e697474 6d207367     bile) settings m
100138d8:	20756e65 20646e61 72617473 61702074     enu and start pa
100138e8:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100138f8:	69747079 52206e6f 65757165 52207473     yption Request R
10013908:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
10013918:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
10013928:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
10013938:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10013948:	09095d74 61656c50 63206573 6b636568     t]..Please check
10013958:	65687420 776f7020 61207265 6320646e      the power and c
10013968:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10013978:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10013988:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10013998:	6e206563 20656d61 20746573 6c696166     ce name set fail
100139a8:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
100139b8:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
100139c8:	73736572 74656720 69616620 0064656c     ress get failed.
100139d8:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100139e8:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100139f8:	20656369 666e6f63 72756769 6f697461     ice configuratio
10013a08:	6166206e 64656c69 00000000 656c625b     n failed....[ble
10013a18:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10013a28:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10013a38:	72646441 20737365 6c696166 00006465     Address failed..
10013a48:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10013a58:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10013a68:	65732065 69727563 72207974 65757165     e security reque
10013a78:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10013a88:	65746365 6f742064 65657020 65642072     ected to peer de
10013a98:	65636976 74697720 64612068 73657264     vice with addres
10013aa8:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10013ab8:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10013ac8:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10013ad8:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10013ae8:	61522067 6d6f646e 64646120 73736572     g Random address
10013af8:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
10013b08:	626d756e 6f207265 6f632066 63656e6e     number of connec
10013b18:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
10013b28:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
10013b38:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10013b48:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10013b58:	53202d20 75746174 25203a73 00000064      - Status: %d...
10013b68:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10013b78:	73697472 6e656d65 61642074 73206174     rtisement data s
10013b88:	66207465 656c6961 00000064              et failed...

10013b94 <ble_mgr_gap_handle>:
10013b94:	1000b5c1 1000b7a5 1000b5d9 1000b601     ................
10013ba4:	00000000 1000c251 1000b659 1000b5d5     ....Q...Y.......
10013bb4:	1000b945 1000b825 1000bb45 1000b95d     E...%...E...]...
10013bc4:	1000bc95 1000bdd9 1000b6e1 1000c48d     ................
	...
10013be0:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10013bf0:	316e7442 746e6920 202e2e2e 00000000     Btn1 int... ....
10013c00:	2055504d 20746e69 29642528 202e2e2e     MPU int (%d)... 
10013c10:	00000000 656d6954 69203172 2e2e746e     ....Timer1 int..
10013c20:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10013c30:	0000202e 2055504d 646e6573 20676e69     . ..MPU sending 
10013c40:	2f642528 2e296425 00202e2e 73756c66     (%d/%d)... .flus
10013c50:	676e6968 00000021 73657250 65732073     hing!...Press se
10013c60:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10013c70:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10013c80:	6e657645 65672074 69742074 756f656d     Event get timeou
10013c90:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
10013ca0:	72727563 00006465 656d7441 6f43206c     curred..Atmel Co
10013cb0:	022e7072                                         rp.

10013cb3 <CSWTCH.45>:
10013cb3:	00100402                                         ...

10013cb6 <CSWTCH.47>:
10013cb6:	03010300 03030303 03030303 02020303              ...............

10013cc5 <client_conf_uuid>:
10013cc5:	29042902                                         .)

10013cc7 <presentation_format_uuid>:
10013cc7:	29012904                                         .)

10013cc9 <user_desc_uuid>:
10013cc9:	29032901                                         .)

10013ccb <server_conf_uuid>:
10013ccb:	29002903                                         .)

10013ccd <extended_props_uuid>:
10013ccd:	28022900                                         .)

10013ccf <include_uuid>:
10013ccf:	28032802                                         .(

10013cd1 <char_uuid>:
10013cd1:	74002803 34100110 3410010f 3210010f     .(.t...4...4...2
10013ce1:	4c10010f 4c100110 3e100110 32100110     ...L...L...>...2
10013cf1:	4c10010f 3e100110 4c100110 32100110     ...L...>...L...2
10013d01:	5410010f 54100110 54100110 54100110     ...T...T...T...T
10013d11:	43100112 e0000000                                ...C...

10013d18 <_global_impure_ptr>:
10013d18:	10013de0                                .=..

10013d1c <__sf_fake_stdin>:
	...

10013d3c <__sf_fake_stdout>:
	...

10013d5c <__sf_fake_stderr>:
	...
10013d7c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10013d8c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10013d9c:	31300046 35343332 39383736 64636261     F.0123456789abcd
10013dac:	00006665                                ef..

10013db0 <_init>:
10013db0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013db2:	46c0      	nop			; (mov r8, r8)
10013db4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10013db6:	bc08      	pop	{r3}
10013db8:	469e      	mov	lr, r3
10013dba:	4770      	bx	lr

10013dbc <__init_array_start>:
10013dbc:	100080b1 	.word	0x100080b1

10013dc0 <_fini>:
10013dc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013dc2:	46c0      	nop			; (mov r8, r8)
10013dc4:	bcf8      	pop	{r3, r4, r5, r6, r7}
10013dc6:	bc08      	pop	{r3}
10013dc8:	469e      	mov	lr, r3
10013dca:	4770      	bx	lr

10013dcc <__fini_array_start>:
10013dcc:	10008089 	.word	0x10008089
