
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0001065c  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  1001865c  1001865c  0001865c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef8  100186cc  100186cc  000186cc  2**2
                  ALLOC
  3 .stack        00000804  1001b5c4  1001b5c4  000186cc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  000186cc  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  000186f4  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b810  00000000  00000000  000187a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000053b9  00000000  00000000  00063fb8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000aa0b  00000000  00000000  00069371  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ba8  00000000  00000000  00073d7c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b88  00000000  00000000  00074924  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c38c  00000000  00000000  000754ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016225  00000000  00000000  00081838  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001416ae  00000000  00000000  00097a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002d94  00000000  00000000  001d910c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	1001865c 	.word	0x1001865c
10008068:	1001865c 	.word	0x1001865c
1000806c:	100186cc 	.word	0x100186cc
10008070:	1001b5c4 	.word	0x1001b5c4
10008074:	100186cc 	.word	0x100186cc
10008078:	10018660 	.word	0x10018660
1000807c:	100186d0 	.word	0x100186d0
10008080:	100161a5 	.word	0x100161a5
10008084:	1000e79d 	.word	0x1000e79d

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	100186cc 	.word	0x100186cc
100080a8:	00000000 	.word	0x00000000
100080ac:	1001865c 	.word	0x1001865c

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	100186d0 	.word	0x100186d0
100080dc:	1001865c 	.word	0x1001865c
100080e0:	1001865c 	.word	0x1001865c
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	100186e8 	.word	0x100186e8

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	100186e8 	.word	0x100186e8

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	100186e8 	.word	0x100186e8

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000c525 	.word	0x1000c525

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000c0bd 	.word	0x1000c0bd
10008388:	40003400 	.word	0x40003400
1000838c:	1000b645 	.word	0x1000b645

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	100186ec 	.word	0x100186ec
1000841c:	1001bdc8 	.word	0x1001bdc8

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <mahony_quaternion_update>:


// Similar to Madgwick scheme but uses proportional and integral filtering on the error between estimated reference vectors and
// measured ones.
void mahony_quaternion_update(float ax, float ay, float az, float gx, float gy, float gz, float mx, float my, float mz, float deltat)
{
1000843c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000843e:	465f      	mov	r7, fp
10008440:	4656      	mov	r6, sl
10008442:	4645      	mov	r5, r8
10008444:	b4e0      	push	{r5, r6, r7}
10008446:	b09c      	sub	sp, #112	; 0x70
10008448:	1c0f      	adds	r7, r1, #0
1000844a:	1c14      	adds	r4, r2, #0
1000844c:	9309      	str	r3, [sp, #36]	; 0x24
	float q1 = imu_device.output.q[0];   // short name local variable for readability
1000844e:	4bfd      	ldr	r3, [pc, #1012]	; (10008844 <mahony_quaternion_update+0x408>)
10008450:	6e9a      	ldr	r2, [r3, #104]	; 0x68
10008452:	4692      	mov	sl, r2
	float q2 = imu_device.output.q[1];
10008454:	6ede      	ldr	r6, [r3, #108]	; 0x6c
	float q3 = imu_device.output.q[2];
10008456:	6f1a      	ldr	r2, [r3, #112]	; 0x70
10008458:	9202      	str	r2, [sp, #8]
	float q4 = imu_device.output.q[3];
1000845a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
1000845c:	9303      	str	r3, [sp, #12]
	float q3q3 = q3 * q3;
	float q3q4 = q3 * q4;
	float q4q4 = q4 * q4;

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
1000845e:	4dfa      	ldr	r5, [pc, #1000]	; (10008848 <mahony_quaternion_update+0x40c>)
10008460:	1c01      	adds	r1, r0, #0
10008462:	9004      	str	r0, [sp, #16]
10008464:	47a8      	blx	r5
10008466:	9001      	str	r0, [sp, #4]
10008468:	1c39      	adds	r1, r7, #0
1000846a:	9705      	str	r7, [sp, #20]
1000846c:	1c38      	adds	r0, r7, #0
1000846e:	47a8      	blx	r5
10008470:	1c01      	adds	r1, r0, #0
10008472:	4ff6      	ldr	r7, [pc, #984]	; (1000884c <mahony_quaternion_update+0x410>)
10008474:	9006      	str	r0, [sp, #24]
10008476:	9801      	ldr	r0, [sp, #4]
10008478:	47b8      	blx	r7
1000847a:	9007      	str	r0, [sp, #28]
1000847c:	1c21      	adds	r1, r4, #0
1000847e:	1c20      	adds	r0, r4, #0
10008480:	47a8      	blx	r5
10008482:	9008      	str	r0, [sp, #32]
10008484:	9906      	ldr	r1, [sp, #24]
10008486:	9801      	ldr	r0, [sp, #4]
10008488:	47b8      	blx	r7
1000848a:	9001      	str	r0, [sp, #4]
1000848c:	9908      	ldr	r1, [sp, #32]
1000848e:	9801      	ldr	r0, [sp, #4]
10008490:	47b8      	blx	r7
10008492:	4bef      	ldr	r3, [pc, #956]	; (10008850 <mahony_quaternion_update+0x414>)
10008494:	4798      	blx	r3
10008496:	9006      	str	r0, [sp, #24]
	if (norm == 0.0f) return; // handle NaN
10008498:	2100      	movs	r1, #0
1000849a:	4bee      	ldr	r3, [pc, #952]	; (10008854 <mahony_quaternion_update+0x418>)
1000849c:	4798      	blx	r3
1000849e:	2800      	cmp	r0, #0
100084a0:	d000      	beq.n	100084a4 <mahony_quaternion_update+0x68>
100084a2:	e233      	b.n	1000890c <mahony_quaternion_update+0x4d0>
	ax *= norm;
	ay *= norm;
	az *= norm;

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
100084a4:	4de8      	ldr	r5, [pc, #928]	; (10008848 <mahony_quaternion_update+0x40c>)
100084a6:	9926      	ldr	r1, [sp, #152]	; 0x98
100084a8:	1c08      	adds	r0, r1, #0
100084aa:	47a8      	blx	r5
100084ac:	9001      	str	r0, [sp, #4]
100084ae:	9927      	ldr	r1, [sp, #156]	; 0x9c
100084b0:	1c08      	adds	r0, r1, #0
100084b2:	47a8      	blx	r5
100084b4:	4fe5      	ldr	r7, [pc, #916]	; (1000884c <mahony_quaternion_update+0x410>)
100084b6:	9007      	str	r0, [sp, #28]
100084b8:	1c01      	adds	r1, r0, #0
100084ba:	9801      	ldr	r0, [sp, #4]
100084bc:	47b8      	blx	r7
100084be:	9008      	str	r0, [sp, #32]
100084c0:	9928      	ldr	r1, [sp, #160]	; 0xa0
100084c2:	1c08      	adds	r0, r1, #0
100084c4:	47a8      	blx	r5
100084c6:	900a      	str	r0, [sp, #40]	; 0x28
100084c8:	9907      	ldr	r1, [sp, #28]
100084ca:	9801      	ldr	r0, [sp, #4]
100084cc:	47b8      	blx	r7
100084ce:	9001      	str	r0, [sp, #4]
100084d0:	990a      	ldr	r1, [sp, #40]	; 0x28
100084d2:	9801      	ldr	r0, [sp, #4]
100084d4:	47b8      	blx	r7
100084d6:	4bde      	ldr	r3, [pc, #888]	; (10008850 <mahony_quaternion_update+0x414>)
100084d8:	4798      	blx	r3
100084da:	1c05      	adds	r5, r0, #0
	if (norm == 0.0f) return; // handle NaN
100084dc:	2100      	movs	r1, #0
100084de:	4bdd      	ldr	r3, [pc, #884]	; (10008854 <mahony_quaternion_update+0x418>)
100084e0:	4798      	blx	r3
100084e2:	2800      	cmp	r0, #0
100084e4:	d000      	beq.n	100084e8 <mahony_quaternion_update+0xac>
100084e6:	e211      	b.n	1000890c <mahony_quaternion_update+0x4d0>

	//DBG_LOG("accel: %ld %ld %ld\n\rgyro: %ld %ld %ld\n\rcompass: %ld %ld %ld", (uint32_t)(ax * 10000), (uint32_t)(ay * 10000), (uint32_t)(az * 10000), (uint32_t)(gx * 10000), (uint32_t)(gy * 10000), (uint32_t)(gz * 10000), (uint32_t)(mx * 10000), (uint32_t)(my * 10000), (uint32_t)(mz * 10000));

	// Auxiliary variables to avoid repeated arithmetic
	float q1q1 = q1 * q1;
	float q1q2 = q1 * q2;
100084e8:	4fd7      	ldr	r7, [pc, #860]	; (10008848 <mahony_quaternion_update+0x40c>)
100084ea:	1c31      	adds	r1, r6, #0
100084ec:	4650      	mov	r0, sl
100084ee:	47b8      	blx	r7
100084f0:	900e      	str	r0, [sp, #56]	; 0x38
	float q1q3 = q1 * q3;
100084f2:	9902      	ldr	r1, [sp, #8]
100084f4:	4650      	mov	r0, sl
100084f6:	47b8      	blx	r7
100084f8:	900f      	str	r0, [sp, #60]	; 0x3c
	float q1q4 = q1 * q4;
100084fa:	9903      	ldr	r1, [sp, #12]
100084fc:	4650      	mov	r0, sl
100084fe:	47b8      	blx	r7
10008500:	9007      	str	r0, [sp, #28]
	float q2q2 = q2 * q2;
10008502:	1c31      	adds	r1, r6, #0
10008504:	1c30      	adds	r0, r6, #0
10008506:	47b8      	blx	r7
10008508:	9010      	str	r0, [sp, #64]	; 0x40
	float q2q3 = q2 * q3;
1000850a:	9902      	ldr	r1, [sp, #8]
1000850c:	1c30      	adds	r0, r6, #0
1000850e:	47b8      	blx	r7
10008510:	9011      	str	r0, [sp, #68]	; 0x44
	float q2q4 = q2 * q4;
10008512:	9903      	ldr	r1, [sp, #12]
10008514:	1c30      	adds	r0, r6, #0
10008516:	47b8      	blx	r7
10008518:	9012      	str	r0, [sp, #72]	; 0x48
	float q3q3 = q3 * q3;
1000851a:	9b02      	ldr	r3, [sp, #8]
1000851c:	1c19      	adds	r1, r3, #0
1000851e:	1c18      	adds	r0, r3, #0
10008520:	47b8      	blx	r7
10008522:	9008      	str	r0, [sp, #32]
	float q3q4 = q3 * q4;
10008524:	9903      	ldr	r1, [sp, #12]
10008526:	9802      	ldr	r0, [sp, #8]
10008528:	47b8      	blx	r7
1000852a:	9013      	str	r0, [sp, #76]	; 0x4c
	float q4q4 = q4 * q4;
1000852c:	9a03      	ldr	r2, [sp, #12]
1000852e:	1c11      	adds	r1, r2, #0
10008530:	1c10      	adds	r0, r2, #0
10008532:	47b8      	blx	r7
10008534:	900a      	str	r0, [sp, #40]	; 0x28

	// Normalize accelerometer measurement
	norm = sqrtf(ax * ax + ay * ay + az * az);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f / norm;        // use reciprocal for division
10008536:	49c8      	ldr	r1, [pc, #800]	; (10008858 <mahony_quaternion_update+0x41c>)
10008538:	4688      	mov	r8, r1
1000853a:	9906      	ldr	r1, [sp, #24]
1000853c:	20fe      	movs	r0, #254	; 0xfe
1000853e:	0580      	lsls	r0, r0, #22
10008540:	47c0      	blx	r8
10008542:	1c01      	adds	r1, r0, #0
	ax *= norm;
10008544:	9001      	str	r0, [sp, #4]
10008546:	9804      	ldr	r0, [sp, #16]
10008548:	47b8      	blx	r7
1000854a:	9014      	str	r0, [sp, #80]	; 0x50
	ay *= norm;
1000854c:	9901      	ldr	r1, [sp, #4]
1000854e:	9805      	ldr	r0, [sp, #20]
10008550:	47b8      	blx	r7
10008552:	9015      	str	r0, [sp, #84]	; 0x54
	az *= norm;
10008554:	9901      	ldr	r1, [sp, #4]
10008556:	1c20      	adds	r0, r4, #0
10008558:	47b8      	blx	r7
1000855a:	9016      	str	r0, [sp, #88]	; 0x58

	// Normalize magnetometer measurement
	norm = sqrtf(mx * mx + my * my + mz * mz);
	if (norm == 0.0f) return; // handle NaN
	norm = 1.0f / norm;        // use reciprocal for division
1000855c:	1c29      	adds	r1, r5, #0
1000855e:	20fe      	movs	r0, #254	; 0xfe
10008560:	0580      	lsls	r0, r0, #22
10008562:	47c0      	blx	r8
10008564:	1c04      	adds	r4, r0, #0
	mx *= norm;
10008566:	1c01      	adds	r1, r0, #0
10008568:	9826      	ldr	r0, [sp, #152]	; 0x98
1000856a:	47b8      	blx	r7
1000856c:	9001      	str	r0, [sp, #4]
	my *= norm;
1000856e:	1c21      	adds	r1, r4, #0
10008570:	9827      	ldr	r0, [sp, #156]	; 0x9c
10008572:	47b8      	blx	r7
10008574:	9004      	str	r0, [sp, #16]
	mz *= norm;
10008576:	1c21      	adds	r1, r4, #0
10008578:	9828      	ldr	r0, [sp, #160]	; 0xa0
1000857a:	47b8      	blx	r7
1000857c:	9005      	str	r0, [sp, #20]

	// Reference direction of Earth's magnetic field
	hx = 2.0f * mx * (0.5f - q3q3 - q4q4) + 2.0f * my * (q2q3 - q1q4) + 2.0f * mz * (q2q4 + q1q3);
1000857e:	4db3      	ldr	r5, [pc, #716]	; (1000884c <mahony_quaternion_update+0x410>)
10008580:	9c01      	ldr	r4, [sp, #4]
10008582:	1c21      	adds	r1, r4, #0
10008584:	1c20      	adds	r0, r4, #0
10008586:	47a8      	blx	r5
10008588:	900b      	str	r0, [sp, #44]	; 0x2c
1000858a:	4cb4      	ldr	r4, [pc, #720]	; (1000885c <mahony_quaternion_update+0x420>)
1000858c:	9908      	ldr	r1, [sp, #32]
1000858e:	20fc      	movs	r0, #252	; 0xfc
10008590:	0580      	lsls	r0, r0, #22
10008592:	47a0      	blx	r4
10008594:	990a      	ldr	r1, [sp, #40]	; 0x28
10008596:	47a0      	blx	r4
10008598:	9017      	str	r0, [sp, #92]	; 0x5c
1000859a:	9a04      	ldr	r2, [sp, #16]
1000859c:	1c11      	adds	r1, r2, #0
1000859e:	1c10      	adds	r0, r2, #0
100085a0:	47a8      	blx	r5
100085a2:	900c      	str	r0, [sp, #48]	; 0x30
100085a4:	9907      	ldr	r1, [sp, #28]
100085a6:	9811      	ldr	r0, [sp, #68]	; 0x44
100085a8:	47a0      	blx	r4
100085aa:	9018      	str	r0, [sp, #96]	; 0x60
100085ac:	9b05      	ldr	r3, [sp, #20]
100085ae:	1c19      	adds	r1, r3, #0
100085b0:	1c18      	adds	r0, r3, #0
100085b2:	47a8      	blx	r5
100085b4:	900d      	str	r0, [sp, #52]	; 0x34
100085b6:	9912      	ldr	r1, [sp, #72]	; 0x48
100085b8:	980f      	ldr	r0, [sp, #60]	; 0x3c
100085ba:	47a8      	blx	r5
100085bc:	9019      	str	r0, [sp, #100]	; 0x64
100085be:	9917      	ldr	r1, [sp, #92]	; 0x5c
100085c0:	980b      	ldr	r0, [sp, #44]	; 0x2c
100085c2:	47b8      	blx	r7
100085c4:	9006      	str	r0, [sp, #24]
100085c6:	9918      	ldr	r1, [sp, #96]	; 0x60
100085c8:	980c      	ldr	r0, [sp, #48]	; 0x30
100085ca:	47b8      	blx	r7
100085cc:	1c01      	adds	r1, r0, #0
100085ce:	9806      	ldr	r0, [sp, #24]
100085d0:	47a8      	blx	r5
100085d2:	9006      	str	r0, [sp, #24]
100085d4:	9919      	ldr	r1, [sp, #100]	; 0x64
100085d6:	980d      	ldr	r0, [sp, #52]	; 0x34
100085d8:	47b8      	blx	r7
100085da:	1c01      	adds	r1, r0, #0
100085dc:	9806      	ldr	r0, [sp, #24]
100085de:	47a8      	blx	r5
100085e0:	9006      	str	r0, [sp, #24]
	hy = 2.0f * mx * (q2q3 + q1q4) + 2.0f * my * (0.5f - q2q2 - q4q4) + 2.0f * mz * (q3q4 - q1q2);
100085e2:	9910      	ldr	r1, [sp, #64]	; 0x40
100085e4:	20fc      	movs	r0, #252	; 0xfc
100085e6:	0580      	lsls	r0, r0, #22
100085e8:	47a0      	blx	r4
100085ea:	901a      	str	r0, [sp, #104]	; 0x68
100085ec:	9911      	ldr	r1, [sp, #68]	; 0x44
100085ee:	9807      	ldr	r0, [sp, #28]
100085f0:	47a8      	blx	r5
100085f2:	990b      	ldr	r1, [sp, #44]	; 0x2c
100085f4:	47b8      	blx	r7
100085f6:	9007      	str	r0, [sp, #28]
100085f8:	990a      	ldr	r1, [sp, #40]	; 0x28
100085fa:	981a      	ldr	r0, [sp, #104]	; 0x68
100085fc:	47a0      	blx	r4
100085fe:	990c      	ldr	r1, [sp, #48]	; 0x30
10008600:	47b8      	blx	r7
10008602:	1c01      	adds	r1, r0, #0
10008604:	9807      	ldr	r0, [sp, #28]
10008606:	47a8      	blx	r5
10008608:	9007      	str	r0, [sp, #28]
1000860a:	990e      	ldr	r1, [sp, #56]	; 0x38
1000860c:	9813      	ldr	r0, [sp, #76]	; 0x4c
1000860e:	47a0      	blx	r4
10008610:	990d      	ldr	r1, [sp, #52]	; 0x34
10008612:	47b8      	blx	r7
10008614:	1c01      	adds	r1, r0, #0
10008616:	9807      	ldr	r0, [sp, #28]
10008618:	47a8      	blx	r5
1000861a:	9007      	str	r0, [sp, #28]
	bx = sqrtf((hx * hx) + (hy * hy));
1000861c:	9a06      	ldr	r2, [sp, #24]
1000861e:	1c11      	adds	r1, r2, #0
10008620:	1c10      	adds	r0, r2, #0
10008622:	47b8      	blx	r7
10008624:	9011      	str	r0, [sp, #68]	; 0x44
10008626:	9a06      	ldr	r2, [sp, #24]
10008628:	1c11      	adds	r1, r2, #0
1000862a:	1c10      	adds	r0, r2, #0
1000862c:	47b8      	blx	r7
1000862e:	9006      	str	r0, [sp, #24]
10008630:	9b07      	ldr	r3, [sp, #28]
10008632:	1c19      	adds	r1, r3, #0
10008634:	1c18      	adds	r0, r3, #0
10008636:	47b8      	blx	r7
10008638:	1c01      	adds	r1, r0, #0
1000863a:	9806      	ldr	r0, [sp, #24]
1000863c:	47a8      	blx	r5
1000863e:	4b84      	ldr	r3, [pc, #528]	; (10008850 <mahony_quaternion_update+0x414>)
10008640:	469b      	mov	fp, r3
10008642:	4798      	blx	r3
10008644:	901b      	str	r0, [sp, #108]	; 0x6c
	bz = 2.0f * mx * (q2q4 - q1q3) + 2.0f * my * (q3q4 + q1q2) + 2.0f * mz * (0.5f - q2q2 - q3q3);
10008646:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008648:	9812      	ldr	r0, [sp, #72]	; 0x48
1000864a:	47a0      	blx	r4
1000864c:	9006      	str	r0, [sp, #24]
1000864e:	9913      	ldr	r1, [sp, #76]	; 0x4c
10008650:	980e      	ldr	r0, [sp, #56]	; 0x38
10008652:	47a8      	blx	r5
10008654:	9007      	str	r0, [sp, #28]
10008656:	9908      	ldr	r1, [sp, #32]
10008658:	981a      	ldr	r0, [sp, #104]	; 0x68
1000865a:	47a0      	blx	r4
1000865c:	900e      	str	r0, [sp, #56]	; 0x38

	// Estimated direction of gravity and magnetic field
	vx = 2.0f * (q2q4 - q1q3);
1000865e:	9a06      	ldr	r2, [sp, #24]
10008660:	1c11      	adds	r1, r2, #0
10008662:	1c10      	adds	r0, r2, #0
10008664:	47a8      	blx	r5
10008666:	900f      	str	r0, [sp, #60]	; 0x3c
	vy = 2.0f * (q1q2 + q3q4);
10008668:	9b07      	ldr	r3, [sp, #28]
1000866a:	1c19      	adds	r1, r3, #0
1000866c:	1c18      	adds	r0, r3, #0
1000866e:	47a8      	blx	r5
10008670:	9011      	str	r0, [sp, #68]	; 0x44
	vz = q1q1 - q2q2 - q3q3 + q4q4;
10008672:	4651      	mov	r1, sl
10008674:	4650      	mov	r0, sl
10008676:	47b8      	blx	r7
10008678:	9910      	ldr	r1, [sp, #64]	; 0x40
1000867a:	47a0      	blx	r4
1000867c:	9908      	ldr	r1, [sp, #32]
1000867e:	47a0      	blx	r4
10008680:	990a      	ldr	r1, [sp, #40]	; 0x28
10008682:	47a8      	blx	r5
10008684:	9010      	str	r0, [sp, #64]	; 0x40
	wx = 2.0f * bx * (0.5f - q3q3 - q4q4) + 2.0f * bz * (q2q4 - q1q3);
10008686:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
10008688:	1c19      	adds	r1, r3, #0
1000868a:	1c18      	adds	r0, r3, #0
1000868c:	47a8      	blx	r5
1000868e:	9008      	str	r0, [sp, #32]
10008690:	9906      	ldr	r1, [sp, #24]
10008692:	980b      	ldr	r0, [sp, #44]	; 0x2c
10008694:	47b8      	blx	r7
10008696:	900a      	str	r0, [sp, #40]	; 0x28
10008698:	9907      	ldr	r1, [sp, #28]
1000869a:	980c      	ldr	r0, [sp, #48]	; 0x30
1000869c:	47b8      	blx	r7
1000869e:	1c01      	adds	r1, r0, #0
100086a0:	980a      	ldr	r0, [sp, #40]	; 0x28
100086a2:	47a8      	blx	r5
100086a4:	900a      	str	r0, [sp, #40]	; 0x28
100086a6:	990e      	ldr	r1, [sp, #56]	; 0x38
100086a8:	980d      	ldr	r0, [sp, #52]	; 0x34
100086aa:	47b8      	blx	r7
100086ac:	1c01      	adds	r1, r0, #0
100086ae:	980a      	ldr	r0, [sp, #40]	; 0x28
100086b0:	47a8      	blx	r5
100086b2:	1c01      	adds	r1, r0, #0
100086b4:	47a8      	blx	r5
100086b6:	900a      	str	r0, [sp, #40]	; 0x28
100086b8:	9908      	ldr	r1, [sp, #32]
100086ba:	9817      	ldr	r0, [sp, #92]	; 0x5c
100086bc:	47b8      	blx	r7
100086be:	900b      	str	r0, [sp, #44]	; 0x2c
100086c0:	990a      	ldr	r1, [sp, #40]	; 0x28
100086c2:	9806      	ldr	r0, [sp, #24]
100086c4:	47b8      	blx	r7
100086c6:	1c01      	adds	r1, r0, #0
100086c8:	980b      	ldr	r0, [sp, #44]	; 0x2c
100086ca:	47a8      	blx	r5
100086cc:	900b      	str	r0, [sp, #44]	; 0x2c
	wy = 2.0f * bx * (q2q3 - q1q4) + 2.0f * bz * (q1q2 + q3q4);
100086ce:	9908      	ldr	r1, [sp, #32]
100086d0:	9818      	ldr	r0, [sp, #96]	; 0x60
100086d2:	47b8      	blx	r7
100086d4:	9006      	str	r0, [sp, #24]
100086d6:	990a      	ldr	r1, [sp, #40]	; 0x28
100086d8:	9807      	ldr	r0, [sp, #28]
100086da:	47b8      	blx	r7
100086dc:	1c01      	adds	r1, r0, #0
100086de:	9806      	ldr	r0, [sp, #24]
100086e0:	47a8      	blx	r5
100086e2:	900c      	str	r0, [sp, #48]	; 0x30
	wz = 2.0f * bx * (q1q3 + q2q4) + 2.0f * bz * (0.5f - q2q2 - q3q3);
100086e4:	9908      	ldr	r1, [sp, #32]
100086e6:	9819      	ldr	r0, [sp, #100]	; 0x64
100086e8:	47b8      	blx	r7
100086ea:	9006      	str	r0, [sp, #24]
100086ec:	990a      	ldr	r1, [sp, #40]	; 0x28
100086ee:	980e      	ldr	r0, [sp, #56]	; 0x38
100086f0:	47b8      	blx	r7
100086f2:	1c01      	adds	r1, r0, #0
100086f4:	9806      	ldr	r0, [sp, #24]
100086f6:	47a8      	blx	r5
100086f8:	9007      	str	r0, [sp, #28]
		eInt[1] = 0.0f;
		eInt[2] = 0.0f;
	}

	// Apply feedback terms
	gx = gx + Kp * ex + Ki * eInt[0];
100086fa:	9910      	ldr	r1, [sp, #64]	; 0x40
100086fc:	9815      	ldr	r0, [sp, #84]	; 0x54
100086fe:	47b8      	blx	r7
10008700:	9006      	str	r0, [sp, #24]
10008702:	9911      	ldr	r1, [sp, #68]	; 0x44
10008704:	9816      	ldr	r0, [sp, #88]	; 0x58
10008706:	47b8      	blx	r7
10008708:	1c01      	adds	r1, r0, #0
1000870a:	9806      	ldr	r0, [sp, #24]
1000870c:	47a0      	blx	r4
1000870e:	9006      	str	r0, [sp, #24]
10008710:	9907      	ldr	r1, [sp, #28]
10008712:	9804      	ldr	r0, [sp, #16]
10008714:	47b8      	blx	r7
10008716:	9008      	str	r0, [sp, #32]
10008718:	990c      	ldr	r1, [sp, #48]	; 0x30
1000871a:	9805      	ldr	r0, [sp, #20]
1000871c:	47b8      	blx	r7
1000871e:	1c01      	adds	r1, r0, #0
10008720:	9808      	ldr	r0, [sp, #32]
10008722:	47a0      	blx	r4
10008724:	1c01      	adds	r1, r0, #0
10008726:	9806      	ldr	r0, [sp, #24]
10008728:	47a8      	blx	r5
1000872a:	494d      	ldr	r1, [pc, #308]	; (10008860 <mahony_quaternion_update+0x424>)
1000872c:	47b8      	blx	r7
1000872e:	9909      	ldr	r1, [sp, #36]	; 0x24
10008730:	47a8      	blx	r5
10008732:	2100      	movs	r1, #0
10008734:	47a8      	blx	r5
10008736:	9006      	str	r0, [sp, #24]
	gy = gy + Kp * ey + Ki * eInt[1];
10008738:	990f      	ldr	r1, [sp, #60]	; 0x3c
1000873a:	9816      	ldr	r0, [sp, #88]	; 0x58
1000873c:	47b8      	blx	r7
1000873e:	9008      	str	r0, [sp, #32]
10008740:	9910      	ldr	r1, [sp, #64]	; 0x40
10008742:	9814      	ldr	r0, [sp, #80]	; 0x50
10008744:	47b8      	blx	r7
10008746:	1c01      	adds	r1, r0, #0
10008748:	9808      	ldr	r0, [sp, #32]
1000874a:	47a0      	blx	r4
1000874c:	9008      	str	r0, [sp, #32]
1000874e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008750:	9805      	ldr	r0, [sp, #20]
10008752:	47b8      	blx	r7
10008754:	9005      	str	r0, [sp, #20]
10008756:	9907      	ldr	r1, [sp, #28]
10008758:	9801      	ldr	r0, [sp, #4]
1000875a:	47b8      	blx	r7
1000875c:	1c01      	adds	r1, r0, #0
1000875e:	9805      	ldr	r0, [sp, #20]
10008760:	47a0      	blx	r4
10008762:	1c01      	adds	r1, r0, #0
10008764:	9808      	ldr	r0, [sp, #32]
10008766:	47a8      	blx	r5
10008768:	493d      	ldr	r1, [pc, #244]	; (10008860 <mahony_quaternion_update+0x424>)
1000876a:	47b8      	blx	r7
1000876c:	9924      	ldr	r1, [sp, #144]	; 0x90
1000876e:	47a8      	blx	r5
10008770:	2100      	movs	r1, #0
10008772:	47a8      	blx	r5
10008774:	9007      	str	r0, [sp, #28]
	gz = gz + Kp * ez + Ki * eInt[2];
10008776:	9911      	ldr	r1, [sp, #68]	; 0x44
10008778:	9814      	ldr	r0, [sp, #80]	; 0x50
1000877a:	47b8      	blx	r7
1000877c:	9005      	str	r0, [sp, #20]
1000877e:	990f      	ldr	r1, [sp, #60]	; 0x3c
10008780:	9815      	ldr	r0, [sp, #84]	; 0x54
10008782:	47b8      	blx	r7
10008784:	1c01      	adds	r1, r0, #0
10008786:	9805      	ldr	r0, [sp, #20]
10008788:	47a0      	blx	r4
1000878a:	9005      	str	r0, [sp, #20]
1000878c:	990c      	ldr	r1, [sp, #48]	; 0x30
1000878e:	9801      	ldr	r0, [sp, #4]
10008790:	47b8      	blx	r7
10008792:	9001      	str	r0, [sp, #4]
10008794:	990b      	ldr	r1, [sp, #44]	; 0x2c
10008796:	9804      	ldr	r0, [sp, #16]
10008798:	47b8      	blx	r7
1000879a:	1c01      	adds	r1, r0, #0
1000879c:	9801      	ldr	r0, [sp, #4]
1000879e:	47a0      	blx	r4
100087a0:	1c01      	adds	r1, r0, #0
100087a2:	9805      	ldr	r0, [sp, #20]
100087a4:	47a8      	blx	r5
100087a6:	492e      	ldr	r1, [pc, #184]	; (10008860 <mahony_quaternion_update+0x424>)
100087a8:	47b8      	blx	r7
100087aa:	9925      	ldr	r1, [sp, #148]	; 0x94
100087ac:	47a8      	blx	r5
100087ae:	2100      	movs	r1, #0
100087b0:	47a8      	blx	r5
100087b2:	9008      	str	r0, [sp, #32]

	// Integrate rate of change of quaternion
	pa = q2;
	pb = q3;
	pc = q4;
	q1 = q1 + (-q2 * gx - q3 * gy - q4 * gz) * (0.5f * deltat);
100087b4:	21fc      	movs	r1, #252	; 0xfc
100087b6:	0589      	lsls	r1, r1, #22
100087b8:	9829      	ldr	r0, [sp, #164]	; 0xa4
100087ba:	47b8      	blx	r7
100087bc:	9009      	str	r0, [sp, #36]	; 0x24
100087be:	2180      	movs	r1, #128	; 0x80
100087c0:	0609      	lsls	r1, r1, #24
100087c2:	1870      	adds	r0, r6, r1
100087c4:	9906      	ldr	r1, [sp, #24]
100087c6:	47b8      	blx	r7
100087c8:	9001      	str	r0, [sp, #4]
100087ca:	9907      	ldr	r1, [sp, #28]
100087cc:	9802      	ldr	r0, [sp, #8]
100087ce:	47b8      	blx	r7
100087d0:	1c01      	adds	r1, r0, #0
100087d2:	9801      	ldr	r0, [sp, #4]
100087d4:	47a0      	blx	r4
100087d6:	9001      	str	r0, [sp, #4]
100087d8:	9908      	ldr	r1, [sp, #32]
100087da:	9803      	ldr	r0, [sp, #12]
100087dc:	47b8      	blx	r7
100087de:	1c01      	adds	r1, r0, #0
100087e0:	9801      	ldr	r0, [sp, #4]
100087e2:	47a0      	blx	r4
100087e4:	9909      	ldr	r1, [sp, #36]	; 0x24
100087e6:	47b8      	blx	r7
100087e8:	4651      	mov	r1, sl
100087ea:	47a8      	blx	r5
	q2 = pa + (q1 * gx + pb * gz - pc * gy) * (0.5f * deltat);
100087ec:	9001      	str	r0, [sp, #4]
100087ee:	1c01      	adds	r1, r0, #0
100087f0:	9806      	ldr	r0, [sp, #24]
100087f2:	47b8      	blx	r7
100087f4:	9004      	str	r0, [sp, #16]
100087f6:	9908      	ldr	r1, [sp, #32]
100087f8:	9802      	ldr	r0, [sp, #8]
100087fa:	47b8      	blx	r7
100087fc:	1c01      	adds	r1, r0, #0
100087fe:	9804      	ldr	r0, [sp, #16]
10008800:	47a8      	blx	r5
10008802:	9004      	str	r0, [sp, #16]
10008804:	9907      	ldr	r1, [sp, #28]
10008806:	9803      	ldr	r0, [sp, #12]
10008808:	47b8      	blx	r7
1000880a:	1c01      	adds	r1, r0, #0
1000880c:	9804      	ldr	r0, [sp, #16]
1000880e:	47a0      	blx	r4
10008810:	9909      	ldr	r1, [sp, #36]	; 0x24
10008812:	47b8      	blx	r7
10008814:	1c31      	adds	r1, r6, #0
10008816:	47a8      	blx	r5
10008818:	9004      	str	r0, [sp, #16]
	q3 = pb + (q1 * gy - pa * gz + pc * gx) * (0.5f * deltat);
1000881a:	9901      	ldr	r1, [sp, #4]
1000881c:	9807      	ldr	r0, [sp, #28]
1000881e:	47b8      	blx	r7
10008820:	9005      	str	r0, [sp, #20]
10008822:	9908      	ldr	r1, [sp, #32]
10008824:	1c30      	adds	r0, r6, #0
10008826:	47b8      	blx	r7
10008828:	1c01      	adds	r1, r0, #0
1000882a:	9805      	ldr	r0, [sp, #20]
1000882c:	47a0      	blx	r4
1000882e:	9005      	str	r0, [sp, #20]
10008830:	9906      	ldr	r1, [sp, #24]
10008832:	9803      	ldr	r0, [sp, #12]
10008834:	47b8      	blx	r7
10008836:	1c01      	adds	r1, r0, #0
10008838:	9805      	ldr	r0, [sp, #20]
1000883a:	47a8      	blx	r5
1000883c:	9909      	ldr	r1, [sp, #36]	; 0x24
1000883e:	47b8      	blx	r7
10008840:	9902      	ldr	r1, [sp, #8]
10008842:	e00f      	b.n	10008864 <mahony_quaternion_update+0x428>
10008844:	1001a2e8 	.word	0x1001a2e8
10008848:	10013d0d 	.word	0x10013d0d
1000884c:	1001368d 	.word	0x1001368d
10008850:	100121c1 	.word	0x100121c1
10008854:	1001356d 	.word	0x1001356d
10008858:	10013979 	.word	0x10013979
1000885c:	10013f35 	.word	0x10013f35
10008860:	41200000 	.word	0x41200000
10008864:	47a8      	blx	r5
10008866:	9005      	str	r0, [sp, #20]
	q4 = pc + (q1 * gz + pa * gy - pb * gx) * (0.5f * deltat);
10008868:	9901      	ldr	r1, [sp, #4]
1000886a:	9808      	ldr	r0, [sp, #32]
1000886c:	47b8      	blx	r7
1000886e:	9008      	str	r0, [sp, #32]
10008870:	9907      	ldr	r1, [sp, #28]
10008872:	1c30      	adds	r0, r6, #0
10008874:	47b8      	blx	r7
10008876:	1c01      	adds	r1, r0, #0
10008878:	9808      	ldr	r0, [sp, #32]
1000887a:	47a8      	blx	r5
1000887c:	1c06      	adds	r6, r0, #0
1000887e:	9906      	ldr	r1, [sp, #24]
10008880:	9802      	ldr	r0, [sp, #8]
10008882:	47b8      	blx	r7
10008884:	1c01      	adds	r1, r0, #0
10008886:	1c30      	adds	r0, r6, #0
10008888:	47a0      	blx	r4
1000888a:	9909      	ldr	r1, [sp, #36]	; 0x24
1000888c:	47b8      	blx	r7
1000888e:	9903      	ldr	r1, [sp, #12]
10008890:	47a8      	blx	r5
10008892:	1c04      	adds	r4, r0, #0

	// Normalize quaternion
	norm = sqrtf(q1 * q1 + q2 * q2 + q3 * q3 + q4 * q4);
10008894:	9b01      	ldr	r3, [sp, #4]
10008896:	1c19      	adds	r1, r3, #0
10008898:	1c18      	adds	r0, r3, #0
1000889a:	47b8      	blx	r7
1000889c:	1c06      	adds	r6, r0, #0
1000889e:	9804      	ldr	r0, [sp, #16]
100088a0:	1c01      	adds	r1, r0, #0
100088a2:	47b8      	blx	r7
100088a4:	1c01      	adds	r1, r0, #0
100088a6:	9002      	str	r0, [sp, #8]
100088a8:	1c30      	adds	r0, r6, #0
100088aa:	47a8      	blx	r5
100088ac:	9003      	str	r0, [sp, #12]
100088ae:	9a05      	ldr	r2, [sp, #20]
100088b0:	1c11      	adds	r1, r2, #0
100088b2:	1c10      	adds	r0, r2, #0
100088b4:	47b8      	blx	r7
100088b6:	1c01      	adds	r1, r0, #0
100088b8:	9006      	str	r0, [sp, #24]
100088ba:	9803      	ldr	r0, [sp, #12]
100088bc:	47a8      	blx	r5
100088be:	9003      	str	r0, [sp, #12]
100088c0:	1c21      	adds	r1, r4, #0
100088c2:	1c20      	adds	r0, r4, #0
100088c4:	47b8      	blx	r7
100088c6:	9007      	str	r0, [sp, #28]
100088c8:	9902      	ldr	r1, [sp, #8]
100088ca:	1c30      	adds	r0, r6, #0
100088cc:	47a8      	blx	r5
100088ce:	1c06      	adds	r6, r0, #0
100088d0:	9906      	ldr	r1, [sp, #24]
100088d2:	1c30      	adds	r0, r6, #0
100088d4:	47a8      	blx	r5
100088d6:	1c06      	adds	r6, r0, #0
100088d8:	9907      	ldr	r1, [sp, #28]
100088da:	1c30      	adds	r0, r6, #0
100088dc:	47a8      	blx	r5
100088de:	47d8      	blx	fp
100088e0:	1c01      	adds	r1, r0, #0
	norm = 1.0f / norm;
100088e2:	20fe      	movs	r0, #254	; 0xfe
100088e4:	0580      	lsls	r0, r0, #22
100088e6:	47c0      	blx	r8
100088e8:	1c05      	adds	r5, r0, #0
	imu_device.output.q[0] = q1 * norm;
100088ea:	4e0b      	ldr	r6, [pc, #44]	; (10008918 <mahony_quaternion_update+0x4dc>)
100088ec:	1c01      	adds	r1, r0, #0
100088ee:	9801      	ldr	r0, [sp, #4]
100088f0:	47b8      	blx	r7
100088f2:	66b0      	str	r0, [r6, #104]	; 0x68
	imu_device.output.q[1] = q2 * norm;
100088f4:	1c29      	adds	r1, r5, #0
100088f6:	9804      	ldr	r0, [sp, #16]
100088f8:	47b8      	blx	r7
100088fa:	66f0      	str	r0, [r6, #108]	; 0x6c
	imu_device.output.q[2] = q3 * norm;
100088fc:	1c29      	adds	r1, r5, #0
100088fe:	9805      	ldr	r0, [sp, #20]
10008900:	47b8      	blx	r7
10008902:	6730      	str	r0, [r6, #112]	; 0x70
	imu_device.output.q[3] = q4 * norm;
10008904:	1c29      	adds	r1, r5, #0
10008906:	1c20      	adds	r0, r4, #0
10008908:	47b8      	blx	r7
1000890a:	6770      	str	r0, [r6, #116]	; 0x74
	//DBG_LOG("Quaternions (x 10000): q1 %ld, q2 %ld, q3 %ld, q4 %ld", (uint32_t)(imu_device.output.q[0]*10000), (uint32_t)(imu_device.output.q[1] * 10000), (uint32_t)(imu_device.output.q[2] * 10000), (uint32_t)(imu_device.output.q[3] * 10000));
}
1000890c:	b01c      	add	sp, #112	; 0x70
1000890e:	bc1c      	pop	{r2, r3, r4}
10008910:	4690      	mov	r8, r2
10008912:	469a      	mov	sl, r3
10008914:	46a3      	mov	fp, r4
10008916:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008918:	1001a2e8 	.word	0x1001a2e8

1000891c <ahrs_calculation>:
	//mpu_device.output.roll  = atan2(2.0f * (q[0] * q[1] + q[2] * q[3]), q[0] * q[0] - q[1] * q[1] - q[2] * q[2] + q[3] * q[3]);
	//mpu_device.output.pitch *= 180.0f / PI;
	//mpu_device.output.yaw   *= 180.0f / PI;
	//mpu_device.output.yaw   -= 2.25; // Declination at Zurich, Switzerland is 2 degrees 14 minutes  on 2017-02-06
	//mpu_device.output.roll  *= 180.0f / PI;
1000891c:	4770      	bx	lr
1000891e:	46c0      	nop			; (mov r8, r8)

10008920 <sms_ble_pair_request_fn>:
{
	//at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\t\tPairing request...");
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
10008920:	2000      	movs	r0, #0
10008922:	4770      	bx	lr

10008924 <sms_ble_notification_confirmed_fn>:
{
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	//at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008924:	4a05      	ldr	r2, [pc, #20]	; (1000893c <sms_ble_notification_confirmed_fn+0x18>)
10008926:	7a13      	ldrb	r3, [r2, #8]
10008928:	3b01      	subs	r3, #1
1000892a:	b2db      	uxtb	r3, r3
1000892c:	7213      	strb	r3, [r2, #8]
	//DBG_LOG("T/O: OFF");
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000892e:	2301      	movs	r3, #1
10008930:	425b      	negs	r3, r3
10008932:	6053      	str	r3, [r2, #4]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	//sms_dualtimer_stop(DUALTIMER_TIMER2);
	//timer2_current_mode = TIMER2_MODE_NONE;
	ble_instance.current_state = BLE_STATE_PAIRED;
10008934:	3323      	adds	r3, #35	; 0x23
10008936:	7013      	strb	r3, [r2, #0]
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	//if(timer1_current_mode == TIMER1_MODE_NONE) {
	////ulp_ready = true;
	//}
	return AT_BLE_SUCCESS;
}
10008938:	2000      	movs	r0, #0
1000893a:	4770      	bx	lr
1000893c:	1001a19c 	.word	0x1001a19c

10008940 <sms_ble_indication_confirmed_fn>:
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	//sms_dualtimer_stop(DUALTIMER_TIMER2);
	//timer2_current_mode = TIMER2_MODE_NONE;
	ble_instance.current_state = BLE_STATE_PAIRED;
10008940:	2222      	movs	r2, #34	; 0x22
10008942:	4b02      	ldr	r3, [pc, #8]	; (1000894c <sms_ble_indication_confirmed_fn+0xc>)
10008944:	701a      	strb	r2, [r3, #0]
	
	//if(timer1_current_mode == TIMER1_MODE_NONE) {
	////ulp_ready = true;
	//}
	return AT_BLE_SUCCESS;
}
10008946:	2000      	movs	r0, #0
10008948:	4770      	bx	lr
1000894a:	46c0      	nop			; (mov r8, r8)
1000894c:	1001a19c 	.word	0x1001a19c

10008950 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
10008950:	4b04      	ldr	r3, [pc, #16]	; (10008964 <sms_ble_init_variables+0x14>)
10008952:	2200      	movs	r2, #0
10008954:	701a      	strb	r2, [r3, #0]
	ble_instance.conn_handle = 0xffff;
10008956:	2101      	movs	r1, #1
10008958:	4249      	negs	r1, r1
1000895a:	8159      	strh	r1, [r3, #10]
	ble_instance.ind_retries = 0;
1000895c:	731a      	strb	r2, [r3, #12]
	ble_instance.sending_queue = 0;
1000895e:	721a      	strb	r2, [r3, #8]
	ble_instance.send_cnt = 0;
10008960:	81da      	strh	r2, [r3, #14]
}
10008962:	4770      	bx	lr
10008964:	1001a19c 	.word	0x1001a19c

10008968 <sms_ble_power_down>:
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
	return 0;
}

void sms_ble_power_down(void)
{
10008968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
1000896a:	481c      	ldr	r0, [pc, #112]	; (100089dc <sms_ble_power_down+0x74>)
1000896c:	4b1c      	ldr	r3, [pc, #112]	; (100089e0 <sms_ble_power_down+0x78>)
1000896e:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008970:	4b1c      	ldr	r3, [pc, #112]	; (100089e4 <sms_ble_power_down+0x7c>)
10008972:	781b      	ldrb	r3, [r3, #0]
10008974:	2b00      	cmp	r3, #0
10008976:	d01c      	beq.n	100089b2 <sms_ble_power_down+0x4a>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008978:	4b1a      	ldr	r3, [pc, #104]	; (100089e4 <sms_ble_power_down+0x7c>)
1000897a:	781b      	ldrb	r3, [r3, #0]
1000897c:	b2db      	uxtb	r3, r3
1000897e:	2b21      	cmp	r3, #33	; 0x21
10008980:	d012      	beq.n	100089a8 <sms_ble_power_down+0x40>
10008982:	d802      	bhi.n	1000898a <sms_ble_power_down+0x22>
10008984:	2b20      	cmp	r3, #32
10008986:	d003      	beq.n	10008990 <sms_ble_power_down+0x28>
10008988:	e013      	b.n	100089b2 <sms_ble_power_down+0x4a>
1000898a:	2b23      	cmp	r3, #35	; 0x23
1000898c:	d908      	bls.n	100089a0 <sms_ble_power_down+0x38>
1000898e:	e010      	b.n	100089b2 <sms_ble_power_down+0x4a>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008990:	4b15      	ldr	r3, [pc, #84]	; (100089e8 <sms_ble_power_down+0x80>)
10008992:	4798      	blx	r3
10008994:	2800      	cmp	r0, #0
10008996:	d10c      	bne.n	100089b2 <sms_ble_power_down+0x4a>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008998:	2211      	movs	r2, #17
1000899a:	4b12      	ldr	r3, [pc, #72]	; (100089e4 <sms_ble_power_down+0x7c>)
1000899c:	701a      	strb	r2, [r3, #0]
1000899e:	e008      	b.n	100089b2 <sms_ble_power_down+0x4a>
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			sms_sensors_switch(false, false);
100089a0:	2100      	movs	r1, #0
100089a2:	2000      	movs	r0, #0
100089a4:	4b11      	ldr	r3, [pc, #68]	; (100089ec <sms_ble_power_down+0x84>)
100089a6:	4798      	blx	r3
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(ble_instance.conn_handle, AT_BLE_TERMINATED_BY_USER);
100089a8:	4b0e      	ldr	r3, [pc, #56]	; (100089e4 <sms_ble_power_down+0x7c>)
100089aa:	8958      	ldrh	r0, [r3, #10]
100089ac:	2113      	movs	r1, #19
100089ae:	4b10      	ldr	r3, [pc, #64]	; (100089f0 <sms_ble_power_down+0x88>)
100089b0:	4798      	blx	r3
	/* Common part:
	* - set BLE state to power-off
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
100089b2:	2200      	movs	r2, #0
100089b4:	4b0b      	ldr	r3, [pc, #44]	; (100089e4 <sms_ble_power_down+0x7c>)
100089b6:	701a      	strb	r2, [r3, #0]
100089b8:	2404      	movs	r4, #4
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100089ba:	4f0e      	ldr	r7, [pc, #56]	; (100089f4 <sms_ble_power_down+0x8c>)
		delay_ms(SMS_BLINK_SHTDWN_MS);
100089bc:	26c8      	movs	r6, #200	; 0xc8
100089be:	0076      	lsls	r6, r6, #1
100089c0:	4d0d      	ldr	r5, [pc, #52]	; (100089f8 <sms_ble_power_down+0x90>)
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
100089c2:	2016      	movs	r0, #22
100089c4:	47b8      	blx	r7
		delay_ms(SMS_BLINK_SHTDWN_MS);
100089c6:	0030      	movs	r0, r6
100089c8:	47a8      	blx	r5
100089ca:	3c01      	subs	r4, #1
100089cc:	b2e4      	uxtb	r4, r4
	* - set BLE state to power-off
	* - blink LED
	* - enable ULP
	*/
	ble_instance.current_state = BLE_STATE_POWEROFF;
	for(uint8_t i = 0; i < SMS_BLINK_SHTDWN_CNT; i++) {
100089ce:	2c00      	cmp	r4, #0
100089d0:	d1f7      	bne.n	100089c2 <sms_ble_power_down+0x5a>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_SHTDWN_MS);
	}
	ulp_ready = true;
100089d2:	2201      	movs	r2, #1
100089d4:	4b09      	ldr	r3, [pc, #36]	; (100089fc <sms_ble_power_down+0x94>)
100089d6:	701a      	strb	r2, [r3, #0]
}
100089d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100089da:	46c0      	nop			; (mov r8, r8)
100089dc:	100174c4 	.word	0x100174c4
100089e0:	10009221 	.word	0x10009221
100089e4:	1001a19c 	.word	0x1001a19c
100089e8:	1000f779 	.word	0x1000f779
100089ec:	1000a855 	.word	0x1000a855
100089f0:	1000f7a5 	.word	0x1000f7a5
100089f4:	1000a345 	.word	0x1000a345
100089f8:	1000ac69 	.word	0x1000ac69
100089fc:	1001a199 	.word	0x1001a199

10008a00 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008a00:	b510      	push	{r4, lr}
	//at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008a02:	2211      	movs	r2, #17
10008a04:	4b04      	ldr	r3, [pc, #16]	; (10008a18 <sms_ble_adv_report_fn+0x18>)
10008a06:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\t\tAdvertisement timeout...");

	sms_led_blink_stop(SMS_LED_0);
10008a08:	2016      	movs	r0, #22
10008a0a:	4b04      	ldr	r3, [pc, #16]	; (10008a1c <sms_ble_adv_report_fn+0x1c>)
10008a0c:	4798      	blx	r3

	sms_ble_power_down();
10008a0e:	4b04      	ldr	r3, [pc, #16]	; (10008a20 <sms_ble_adv_report_fn+0x20>)
10008a10:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10008a12:	2000      	movs	r0, #0
10008a14:	bd10      	pop	{r4, pc}
10008a16:	46c0      	nop			; (mov r8, r8)
10008a18:	1001a19c 	.word	0x1001a19c
10008a1c:	1000a3b1 	.word	0x1000a3b1
10008a20:	10008969 	.word	0x10008969

10008a24 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008a24:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008a26:	4b08      	ldr	r3, [pc, #32]	; (10008a48 <sms_ble_connected_fn+0x24>)
10008a28:	781b      	ldrb	r3, [r3, #0]
10008a2a:	2b20      	cmp	r3, #32
10008a2c:	d108      	bne.n	10008a40 <sms_ble_connected_fn+0x1c>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		ble_instance.conn_handle = connected->handle;
10008a2e:	8902      	ldrh	r2, [r0, #8]
10008a30:	4b05      	ldr	r3, [pc, #20]	; (10008a48 <sms_ble_connected_fn+0x24>)
10008a32:	815a      	strh	r2, [r3, #10]
		ble_instance.current_state = BLE_STATE_CONNECTED;
10008a34:	2221      	movs	r2, #33	; 0x21
10008a36:	701a      	strb	r2, [r3, #0]
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		DBG_LOG_DEV("BLE T/O: 5000 ms");
		ble_instance.timeout = BLE_APP_TIMEOUT_PAIR;
10008a38:	32d4      	adds	r2, #212	; 0xd4
10008a3a:	32ff      	adds	r2, #255	; 0xff
10008a3c:	605a      	str	r2, [r3, #4]
10008a3e:	e001      	b.n	10008a44 <sms_ble_connected_fn+0x20>
	}
	else {
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tWrong BLE state... shutting down");
		sms_ble_power_down();
10008a40:	4b02      	ldr	r3, [pc, #8]	; (10008a4c <sms_ble_connected_fn+0x28>)
10008a42:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008a44:	2000      	movs	r0, #0
10008a46:	bd10      	pop	{r4, pc}
10008a48:	1001a19c 	.word	0x1001a19c
10008a4c:	10008969 	.word	0x10008969

10008a50 <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008a50:	b510      	push	{r4, lr}
	//at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008a52:	4b0c      	ldr	r3, [pc, #48]	; (10008a84 <sms_ble_paired_fn+0x34>)
10008a54:	781b      	ldrb	r3, [r3, #0]
10008a56:	2b21      	cmp	r3, #33	; 0x21
10008a58:	d110      	bne.n	10008a7c <sms_ble_paired_fn+0x2c>
		ble_instance.current_state = BLE_STATE_PAIRED;
10008a5a:	4c0a      	ldr	r4, [pc, #40]	; (10008a84 <sms_ble_paired_fn+0x34>)
10008a5c:	3301      	adds	r3, #1
10008a5e:	7023      	strb	r3, [r4, #0]
		sms_monitor_get_states("[sms_ble_paired_fn]");
10008a60:	4809      	ldr	r0, [pc, #36]	; (10008a88 <sms_ble_paired_fn+0x38>)
10008a62:	4b0a      	ldr	r3, [pc, #40]	; (10008a8c <sms_ble_paired_fn+0x3c>)
10008a64:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		sms_led_blink_stop(SMS_LED_0);
10008a66:	2016      	movs	r0, #22
10008a68:	4b09      	ldr	r3, [pc, #36]	; (10008a90 <sms_ble_paired_fn+0x40>)
10008a6a:	4798      	blx	r3
		
		/* Try to switch of both sensors */
		sms_sensors_switch(true, true);
10008a6c:	2101      	movs	r1, #1
10008a6e:	2001      	movs	r0, #1
10008a70:	4b08      	ldr	r3, [pc, #32]	; (10008a94 <sms_ble_paired_fn+0x44>)
10008a72:	4798      	blx	r3
		
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
10008a74:	2301      	movs	r3, #1
10008a76:	425b      	negs	r3, r3
10008a78:	6063      	str	r3, [r4, #4]
10008a7a:	e001      	b.n	10008a80 <sms_ble_paired_fn+0x30>
	}
	else {
		sms_ble_power_down();
10008a7c:	4b06      	ldr	r3, [pc, #24]	; (10008a98 <sms_ble_paired_fn+0x48>)
10008a7e:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008a80:	2000      	movs	r0, #0
10008a82:	bd10      	pop	{r4, pc}
10008a84:	1001a19c 	.word	0x1001a19c
10008a88:	100174dc 	.word	0x100174dc
10008a8c:	10009221 	.word	0x10009221
10008a90:	1000a3b1 	.word	0x1000a3b1
10008a94:	1000a855 	.word	0x1000a855
10008a98:	10008969 	.word	0x10008969

10008a9c <sms_ble_advertise>:
	}
	ulp_ready = true;
}

at_ble_status_t sms_ble_advertise(void)
{
10008a9c:	b510      	push	{r4, lr}
10008a9e:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
10008aa0:	2220      	movs	r2, #32
10008aa2:	4b16      	ldr	r3, [pc, #88]	; (10008afc <sms_ble_advertise+0x60>)
10008aa4:	701a      	strb	r2, [r3, #0]
	
	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008aa6:	4b16      	ldr	r3, [pc, #88]	; (10008b00 <sms_ble_advertise+0x64>)
10008aa8:	4798      	blx	r3
10008aaa:	1e04      	subs	r4, r0, #0
10008aac:	d007      	beq.n	10008abe <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\t\tAdvertisement data set failed!");
10008aae:	4815      	ldr	r0, [pc, #84]	; (10008b04 <sms_ble_advertise+0x68>)
10008ab0:	4b15      	ldr	r3, [pc, #84]	; (10008b08 <sms_ble_advertise+0x6c>)
10008ab2:	4798      	blx	r3
10008ab4:	4815      	ldr	r0, [pc, #84]	; (10008b0c <sms_ble_advertise+0x70>)
10008ab6:	4b16      	ldr	r3, [pc, #88]	; (10008b10 <sms_ble_advertise+0x74>)
10008ab8:	4798      	blx	r3
		return status;
10008aba:	0020      	movs	r0, r4
10008abc:	e01c      	b.n	10008af8 <sms_ble_advertise+0x5c>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, BLE_ADV_INTERVAL, BLE_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008abe:	2300      	movs	r3, #0
10008ac0:	9302      	str	r3, [sp, #8]
10008ac2:	333c      	adds	r3, #60	; 0x3c
10008ac4:	9301      	str	r3, [sp, #4]
10008ac6:	23c8      	movs	r3, #200	; 0xc8
10008ac8:	00db      	lsls	r3, r3, #3
10008aca:	9300      	str	r3, [sp, #0]
10008acc:	2300      	movs	r3, #0
10008ace:	2200      	movs	r2, #0
10008ad0:	2101      	movs	r1, #1
10008ad2:	2000      	movs	r0, #0
10008ad4:	4c0f      	ldr	r4, [pc, #60]	; (10008b14 <sms_ble_advertise+0x78>)
10008ad6:	47a0      	blx	r4
10008ad8:	1e04      	subs	r4, r0, #0
10008ada:	d105      	bne.n	10008ae8 <sms_ble_advertise+0x4c>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE started advertisement");
		sms_led_blink_start(SMS_LED_0, TIMER_MODE_ADVERTISING);
10008adc:	2101      	movs	r1, #1
10008ade:	2016      	movs	r0, #22
10008ae0:	4b0d      	ldr	r3, [pc, #52]	; (10008b18 <sms_ble_advertise+0x7c>)
10008ae2:	4798      	blx	r3
		/* */
		return AT_BLE_SUCCESS;
10008ae4:	2000      	movs	r0, #0
10008ae6:	e007      	b.n	10008af8 <sms_ble_advertise+0x5c>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE advertisement start failed: reason 0x%x", status);
10008ae8:	4806      	ldr	r0, [pc, #24]	; (10008b04 <sms_ble_advertise+0x68>)
10008aea:	4b07      	ldr	r3, [pc, #28]	; (10008b08 <sms_ble_advertise+0x6c>)
10008aec:	4798      	blx	r3
10008aee:	0021      	movs	r1, r4
10008af0:	480a      	ldr	r0, [pc, #40]	; (10008b1c <sms_ble_advertise+0x80>)
10008af2:	4b07      	ldr	r3, [pc, #28]	; (10008b10 <sms_ble_advertise+0x74>)
10008af4:	4798      	blx	r3
		return status;
10008af6:	0020      	movs	r0, r4
	}
	return AT_BLE_FAILURE;
}
10008af8:	b004      	add	sp, #16
10008afa:	bd10      	pop	{r4, pc}
10008afc:	1001a19c 	.word	0x1001a19c
10008b00:	1000dbad 	.word	0x1000dbad
10008b04:	100174f0 	.word	0x100174f0
10008b08:	1001649d 	.word	0x1001649d
10008b0c:	100174f4 	.word	0x100174f4
10008b10:	1001637d 	.word	0x1001637d
10008b14:	1000f63d 	.word	0x1000f63d
10008b18:	1000a36d 	.word	0x1000a36d
10008b1c:	10017528 	.word	0x10017528

10008b20 <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008b20:	b510      	push	{r4, lr}
10008b22:	0004      	movs	r4, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	
	switch(ble_instance.current_state) {
10008b24:	4b16      	ldr	r3, [pc, #88]	; (10008b80 <sms_ble_disconnected_fn+0x60>)
10008b26:	781b      	ldrb	r3, [r3, #0]
10008b28:	b2db      	uxtb	r3, r3
10008b2a:	2b20      	cmp	r3, #32
10008b2c:	d312      	bcc.n	10008b54 <sms_ble_disconnected_fn+0x34>
10008b2e:	2b21      	cmp	r3, #33	; 0x21
10008b30:	d90d      	bls.n	10008b4e <sms_ble_disconnected_fn+0x2e>
10008b32:	2b22      	cmp	r3, #34	; 0x22
10008b34:	d10e      	bne.n	10008b54 <sms_ble_disconnected_fn+0x34>
		case BLE_STATE_PAIRED:
		pressure_device.state = PRESSURE_STATE_OFF;
10008b36:	2100      	movs	r1, #0
10008b38:	3309      	adds	r3, #9
10008b3a:	4a12      	ldr	r2, [pc, #72]	; (10008b84 <sms_ble_disconnected_fn+0x64>)
10008b3c:	54d1      	strb	r1, [r2, r3]
		sms_sensors_enable_callback(false, false);
10008b3e:	2000      	movs	r0, #0
10008b40:	4b11      	ldr	r3, [pc, #68]	; (10008b88 <sms_ble_disconnected_fn+0x68>)
10008b42:	4798      	blx	r3
		sms_sensors_switch(false, false);
10008b44:	2100      	movs	r1, #0
10008b46:	2000      	movs	r0, #0
10008b48:	4b10      	ldr	r3, [pc, #64]	; (10008b8c <sms_ble_disconnected_fn+0x6c>)
10008b4a:	4798      	blx	r3
		break;
10008b4c:	e002      	b.n	10008b54 <sms_ble_disconnected_fn+0x34>
		
		case BLE_STATE_ADVERTISING:
		case BLE_STATE_CONNECTED:
		sms_led_blink_stop(SMS_LED_0);
10008b4e:	2016      	movs	r0, #22
10008b50:	4b0f      	ldr	r3, [pc, #60]	; (10008b90 <sms_ble_disconnected_fn+0x70>)
10008b52:	4798      	blx	r3
		
		default:
		break;
	}

	ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008b54:	4b0a      	ldr	r3, [pc, #40]	; (10008b80 <sms_ble_disconnected_fn+0x60>)
10008b56:	2211      	movs	r2, #17
10008b58:	701a      	strb	r2, [r3, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
10008b5a:	3a12      	subs	r2, #18
10008b5c:	605a      	str	r2, [r3, #4]
	
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... handle: 0x%04x, reason: 0x%02x", disconnect->handle, disconnect->reason);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
10008b5e:	78a3      	ldrb	r3, [r4, #2]
10008b60:	3b05      	subs	r3, #5
10008b62:	b2da      	uxtb	r2, r3
10008b64:	2a39      	cmp	r2, #57	; 0x39
10008b66:	d806      	bhi.n	10008b76 <sms_ble_disconnected_fn+0x56>
10008b68:	0093      	lsls	r3, r2, #2
10008b6a:	4a0a      	ldr	r2, [pc, #40]	; (10008b94 <sms_ble_disconnected_fn+0x74>)
10008b6c:	58d3      	ldr	r3, [r2, r3]
10008b6e:	469f      	mov	pc, r3
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNKNOWN_LMP_PDU: // 0x19
		case BLE_ERR_CONN_FAILED: // 0x3E
		sms_ble_advertise();
10008b70:	4b09      	ldr	r3, [pc, #36]	; (10008b98 <sms_ble_disconnected_fn+0x78>)
10008b72:	4798      	blx	r3
		break;
10008b74:	e001      	b.n	10008b7a <sms_ble_disconnected_fn+0x5a>
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		// additional error messages from BLE 4.1 specifications
		case BLE_ERR_UNSPECIFIED: // 0x1F
		default:
		sms_ble_power_down();
10008b76:	4b09      	ldr	r3, [pc, #36]	; (10008b9c <sms_ble_disconnected_fn+0x7c>)
10008b78:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
10008b7a:	2000      	movs	r0, #0
10008b7c:	bd10      	pop	{r4, pc}
10008b7e:	46c0      	nop			; (mov r8, r8)
10008b80:	1001a19c 	.word	0x1001a19c
10008b84:	1001a238 	.word	0x1001a238
10008b88:	1000a821 	.word	0x1000a821
10008b8c:	1000a855 	.word	0x1000a855
10008b90:	1000a3b1 	.word	0x1000a3b1
10008b94:	100173dc 	.word	0x100173dc
10008b98:	10008a9d 	.word	0x10008a9d
10008b9c:	10008969 	.word	0x10008969

10008ba0 <sms_ble_startup>:
	ble_instance.sending_queue = 0;
	ble_instance.send_cnt = 0;
}

int sms_ble_startup(void)
{
10008ba0:	b570      	push	{r4, r5, r6, lr}
10008ba2:	240a      	movs	r4, #10
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008ba4:	4e09      	ldr	r6, [pc, #36]	; (10008bcc <sms_ble_startup+0x2c>)
		delay_ms(SMS_BLINK_STARTUP_MS);
10008ba6:	4d0a      	ldr	r5, [pc, #40]	; (10008bd0 <sms_ble_startup+0x30>)

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008ba8:	2016      	movs	r0, #22
10008baa:	47b0      	blx	r6
		delay_ms(SMS_BLINK_STARTUP_MS);
10008bac:	2064      	movs	r0, #100	; 0x64
10008bae:	47a8      	blx	r5
10008bb0:	3c01      	subs	r4, #1
10008bb2:	b2e4      	uxtb	r4, r4
}

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
10008bb4:	2c00      	cmp	r4, #0
10008bb6:	d1f7      	bne.n	10008ba8 <sms_ble_startup+0x8>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_STARTUP_MS);
	}
	ulp_ready = false;
10008bb8:	2200      	movs	r2, #0
10008bba:	4b06      	ldr	r3, [pc, #24]	; (10008bd4 <sms_ble_startup+0x34>)
10008bbc:	701a      	strb	r2, [r3, #0]
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
10008bbe:	4b06      	ldr	r3, [pc, #24]	; (10008bd8 <sms_ble_startup+0x38>)
10008bc0:	4798      	blx	r3
10008bc2:	1e43      	subs	r3, r0, #1
10008bc4:	4198      	sbcs	r0, r3
10008bc6:	4240      	negs	r0, r0
	return 0;
}
10008bc8:	bd70      	pop	{r4, r5, r6, pc}
10008bca:	46c0      	nop			; (mov r8, r8)
10008bcc:	1000a345 	.word	0x1000a345
10008bd0:	1000ac69 	.word	0x1000ac69
10008bd4:	1001a199 	.word	0x1001a199
10008bd8:	10008a9d 	.word	0x10008a9d

10008bdc <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008bdc:	b570      	push	{r4, r5, r6, lr}
10008bde:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
10008be0:	2801      	cmp	r0, #1
10008be2:	d02e      	beq.n	10008c42 <sms_ble_send_characteristic+0x66>
10008be4:	2800      	cmp	r0, #0
10008be6:	d002      	beq.n	10008bee <sms_ble_send_characteristic+0x12>
10008be8:	2802      	cmp	r0, #2
10008bea:	d040      	beq.n	10008c6e <sms_ble_send_characteristic+0x92>
10008bec:	e076      	b.n	10008cdc <sms_ble_send_characteristic+0x100>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10008bee:	2300      	movs	r3, #0
10008bf0:	466a      	mov	r2, sp
10008bf2:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
10008bf4:	4b52      	ldr	r3, [pc, #328]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008bf6:	791b      	ldrb	r3, [r3, #4]
10008bf8:	2b00      	cmp	r3, #0
10008bfa:	d00a      	beq.n	10008c12 <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008bfc:	4b50      	ldr	r3, [pc, #320]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008bfe:	795a      	ldrb	r2, [r3, #5]
10008c00:	2300      	movs	r3, #0
10008c02:	2a7e      	cmp	r2, #126	; 0x7e
10008c04:	d801      	bhi.n	10008c0a <sms_ble_send_characteristic+0x2e>
10008c06:	3201      	adds	r2, #1
10008c08:	b2d3      	uxtb	r3, r2
10008c0a:	4a4d      	ldr	r2, [pc, #308]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008c0c:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
10008c0e:	466a      	mov	r2, sp
10008c10:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
10008c12:	4b4b      	ldr	r3, [pc, #300]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008c14:	7a9b      	ldrb	r3, [r3, #10]
10008c16:	2b00      	cmp	r3, #0
10008c18:	d00f      	beq.n	10008c3a <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
10008c1a:	4b49      	ldr	r3, [pc, #292]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008c1c:	7adb      	ldrb	r3, [r3, #11]
10008c1e:	2bff      	cmp	r3, #255	; 0xff
10008c20:	d002      	beq.n	10008c28 <sms_ble_send_characteristic+0x4c>
10008c22:	3301      	adds	r3, #1
10008c24:	b2db      	uxtb	r3, r3
10008c26:	e000      	b.n	10008c2a <sms_ble_send_characteristic+0x4e>
10008c28:	2300      	movs	r3, #0
10008c2a:	4a45      	ldr	r2, [pc, #276]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008c2c:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
10008c2e:	3b80      	subs	r3, #128	; 0x80
10008c30:	466a      	mov	r2, sp
10008c32:	7812      	ldrb	r2, [r2, #0]
10008c34:	4313      	orrs	r3, r2
10008c36:	466a      	mov	r2, sp
10008c38:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
10008c3a:	4b41      	ldr	r3, [pc, #260]	; (10008d40 <sms_ble_send_characteristic+0x164>)
10008c3c:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
10008c3e:	2201      	movs	r2, #1
		break;
10008c40:	e04e      	b.n	10008ce0 <sms_ble_send_characteristic+0x104>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.output.temperature >> 24) & 0xff);
10008c42:	4a40      	ldr	r2, [pc, #256]	; (10008d44 <sms_ble_send_characteristic+0x168>)
10008c44:	6a53      	ldr	r3, [r2, #36]	; 0x24
10008c46:	1619      	asrs	r1, r3, #24
10008c48:	4668      	mov	r0, sp
10008c4a:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.output.temperature >> 16) & 0xff);
10008c4c:	1419      	asrs	r1, r3, #16
10008c4e:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.output.temperature >> 8) & 0xff);
10008c50:	1219      	asrs	r1, r3, #8
10008c52:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.output.temperature) & 0xff);
10008c54:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.output.pressure >> 24) & 0xff);
10008c56:	6a13      	ldr	r3, [r2, #32]
10008c58:	1619      	asrs	r1, r3, #24
10008c5a:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.output.pressure >> 16) & 0xff);
10008c5c:	1419      	asrs	r1, r3, #16
10008c5e:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.output.pressure >> 8) & 0xff);
10008c60:	1219      	asrs	r1, r3, #8
10008c62:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.output.pressure) & 0xff);
10008c64:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10008c66:	2340      	movs	r3, #64	; 0x40
10008c68:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
10008c6a:	2208      	movs	r2, #8
		break;
10008c6c:	e038      	b.n	10008ce0 <sms_ble_send_characteristic+0x104>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
10008c6e:	4c36      	ldr	r4, [pc, #216]	; (10008d48 <sms_ble_send_characteristic+0x16c>)
10008c70:	4e36      	ldr	r6, [pc, #216]	; (10008d4c <sms_ble_send_characteristic+0x170>)
10008c72:	4937      	ldr	r1, [pc, #220]	; (10008d50 <sms_ble_send_characteristic+0x174>)
10008c74:	6ea0      	ldr	r0, [r4, #104]	; 0x68
10008c76:	47b0      	blx	r6
10008c78:	4d36      	ldr	r5, [pc, #216]	; (10008d54 <sms_ble_send_characteristic+0x178>)
10008c7a:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", int_val);
		send_val[0] = (uint8_t)((int_val >> 24) & 0xff);
10008c7c:	0e03      	lsrs	r3, r0, #24
10008c7e:	466a      	mov	r2, sp
10008c80:	7013      	strb	r3, [r2, #0]
		send_val[1] = (uint8_t)((int_val >> 16) & 0xff);
10008c82:	0c03      	lsrs	r3, r0, #16
10008c84:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 8) & 0xff);
10008c86:	0a03      	lsrs	r3, r0, #8
10008c88:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 0) & 0xff);
10008c8a:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
10008c8c:	4930      	ldr	r1, [pc, #192]	; (10008d50 <sms_ble_send_characteristic+0x174>)
10008c8e:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
10008c90:	47b0      	blx	r6
10008c92:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", int_val);
		send_val[4] = (uint8_t)((int_val >> 24) & 0xff);
10008c94:	0e03      	lsrs	r3, r0, #24
10008c96:	466a      	mov	r2, sp
10008c98:	7113      	strb	r3, [r2, #4]
		send_val[5] = (uint8_t)((int_val >> 16) & 0xff);
10008c9a:	0c03      	lsrs	r3, r0, #16
10008c9c:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 8) & 0xff);
10008c9e:	0a03      	lsrs	r3, r0, #8
10008ca0:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 0) & 0xff);
10008ca2:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
10008ca4:	492a      	ldr	r1, [pc, #168]	; (10008d50 <sms_ble_send_characteristic+0x174>)
10008ca6:	6f20      	ldr	r0, [r4, #112]	; 0x70
10008ca8:	47b0      	blx	r6
10008caa:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", int_val);
		send_val[8] = (uint8_t)((int_val >> 24) & 0xff);
10008cac:	0e03      	lsrs	r3, r0, #24
10008cae:	466a      	mov	r2, sp
10008cb0:	7213      	strb	r3, [r2, #8]
		send_val[9] = (uint8_t)((int_val >> 16) & 0xff);
10008cb2:	0c03      	lsrs	r3, r0, #16
10008cb4:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 8) & 0xff);
10008cb6:	0a03      	lsrs	r3, r0, #8
10008cb8:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 0) & 0xff);
10008cba:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
10008cbc:	4924      	ldr	r1, [pc, #144]	; (10008d50 <sms_ble_send_characteristic+0x174>)
10008cbe:	6f60      	ldr	r0, [r4, #116]	; 0x74
10008cc0:	47b0      	blx	r6
10008cc2:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", int_val);
		send_val[12] = (uint8_t)((int_val >> 24) & 0xff);
10008cc4:	0e03      	lsrs	r3, r0, #24
10008cc6:	466a      	mov	r2, sp
10008cc8:	7313      	strb	r3, [r2, #12]
		send_val[13] = (uint8_t)((int_val >> 16) & 0xff);
10008cca:	0c03      	lsrs	r3, r0, #16
10008ccc:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 8) & 0xff);
10008cce:	0a03      	lsrs	r3, r0, #8
10008cd0:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 0) & 0xff);
10008cd2:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10008cd4:	239c      	movs	r3, #156	; 0x9c
10008cd6:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
10008cd8:	2210      	movs	r2, #16
		

		break;
10008cda:	e001      	b.n	10008ce0 <sms_ble_send_characteristic+0x104>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
10008cdc:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
10008cde:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008ce0:	b292      	uxth	r2, r2
10008ce2:	4669      	mov	r1, sp
10008ce4:	0028      	movs	r0, r5
10008ce6:	4b1c      	ldr	r3, [pc, #112]	; (10008d58 <sms_ble_send_characteristic+0x17c>)
10008ce8:	4798      	blx	r3
10008cea:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
10008cec:	d124      	bne.n	10008d38 <sms_ble_send_characteristic+0x15c>
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
10008cee:	f3ef 8309 	mrs	r3, PSP
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		mypsp = __get_PSP();
10008cf2:	4e1a      	ldr	r6, [pc, #104]	; (10008d5c <sms_ble_send_characteristic+0x180>)
10008cf4:	6033      	str	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
10008cf6:	f3ef 8308 	mrs	r3, MSP
		mymsp = __get_MSP();
10008cfa:	4c19      	ldr	r4, [pc, #100]	; (10008d60 <sms_ble_send_characteristic+0x184>)
10008cfc:	6023      	str	r3, [r4, #0]
		DBG_LOG("PSP: 0x%lx, MSP: 0x%lx", mypsp, mymsp);
10008cfe:	4819      	ldr	r0, [pc, #100]	; (10008d64 <sms_ble_send_characteristic+0x188>)
10008d00:	4b19      	ldr	r3, [pc, #100]	; (10008d68 <sms_ble_send_characteristic+0x18c>)
10008d02:	4798      	blx	r3
10008d04:	6831      	ldr	r1, [r6, #0]
10008d06:	6822      	ldr	r2, [r4, #0]
10008d08:	4818      	ldr	r0, [pc, #96]	; (10008d6c <sms_ble_send_characteristic+0x190>)
10008d0a:	4b19      	ldr	r3, [pc, #100]	; (10008d70 <sms_ble_send_characteristic+0x194>)
10008d0c:	4798      	blx	r3
		status = at_ble_notification_send(ble_instance.conn_handle, val_handle);
10008d0e:	4b19      	ldr	r3, [pc, #100]	; (10008d74 <sms_ble_send_characteristic+0x198>)
10008d10:	8958      	ldrh	r0, [r3, #10]
10008d12:	0029      	movs	r1, r5
10008d14:	4b18      	ldr	r3, [pc, #96]	; (10008d78 <sms_ble_send_characteristic+0x19c>)
10008d16:	4798      	blx	r3
10008d18:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
10008d1a:	d10a      	bne.n	10008d32 <sms_ble_send_characteristic+0x156>
			ble_instance.sending_queue++;
10008d1c:	4b15      	ldr	r3, [pc, #84]	; (10008d74 <sms_ble_send_characteristic+0x198>)
10008d1e:	7a1a      	ldrb	r2, [r3, #8]
10008d20:	3201      	adds	r2, #1
10008d22:	b2d2      	uxtb	r2, r2
10008d24:	721a      	strb	r2, [r3, #8]
			ble_instance.send_cnt++;
10008d26:	89da      	ldrh	r2, [r3, #14]
10008d28:	3201      	adds	r2, #1
10008d2a:	81da      	strh	r2, [r3, #14]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			ble_instance.timeout = BLE_APP_TIMEOUT_NOTIFY;
10008d2c:	2202      	movs	r2, #2
10008d2e:	605a      	str	r2, [r3, #4]
10008d30:	e002      	b.n	10008d38 <sms_ble_send_characteristic+0x15c>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
10008d32:	4812      	ldr	r0, [pc, #72]	; (10008d7c <sms_ble_send_characteristic+0x1a0>)
10008d34:	4b0e      	ldr	r3, [pc, #56]	; (10008d70 <sms_ble_send_characteristic+0x194>)
10008d36:	4798      	blx	r3
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
	return status;
}
10008d38:	0020      	movs	r0, r4
10008d3a:	b004      	add	sp, #16
10008d3c:	bd70      	pop	{r4, r5, r6, pc}
10008d3e:	46c0      	nop			; (mov r8, r8)
10008d40:	1001a1b0 	.word	0x1001a1b0
10008d44:	1001a238 	.word	0x1001a238
10008d48:	1001a2e8 	.word	0x1001a2e8
10008d4c:	10013d0d 	.word	0x10013d0d
10008d50:	49742400 	.word	0x49742400
10008d54:	10013621 	.word	0x10013621
10008d58:	1000ff21 	.word	0x1000ff21
10008d5c:	1001a220 	.word	0x1001a220
10008d60:	1001a1ac 	.word	0x1001a1ac
10008d64:	100174f0 	.word	0x100174f0
10008d68:	1001649d 	.word	0x1001649d
10008d6c:	1001756c 	.word	0x1001756c
10008d70:	1001637d 	.word	0x1001637d
10008d74:	1001a19c 	.word	0x1001a19c
10008d78:	100100c1 	.word	0x100100c1
10008d7c:	10017584 	.word	0x10017584

10008d80 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008d80:	b510      	push	{r4, lr}
10008d82:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10008d84:	0001      	movs	r1, r0
10008d86:	3112      	adds	r1, #18
10008d88:	2301      	movs	r3, #1
10008d8a:	9301      	str	r3, [sp, #4]
10008d8c:	0003      	movs	r3, r0
10008d8e:	3314      	adds	r3, #20
10008d90:	9300      	str	r3, [sp, #0]
10008d92:	2300      	movs	r3, #0
10008d94:	2200      	movs	r2, #0
10008d96:	4c02      	ldr	r4, [pc, #8]	; (10008da0 <sms_ble_primary_service_define+0x20>)
10008d98:	47a0      	blx	r4
}
10008d9a:	b002      	add	sp, #8
10008d9c:	bd10      	pop	{r4, pc}
10008d9e:	46c0      	nop			; (mov r8, r8)
10008da0:	1000ff01 	.word	0x1000ff01

10008da4 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10008da4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008da6:	464f      	mov	r7, r9
10008da8:	4646      	mov	r6, r8
10008daa:	b4c0      	push	{r6, r7}
10008dac:	b083      	sub	sp, #12
10008dae:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
10008db0:	2801      	cmp	r0, #1
10008db2:	d010      	beq.n	10008dd6 <sms_ble_service_init+0x32>
10008db4:	2800      	cmp	r0, #0
10008db6:	d002      	beq.n	10008dbe <sms_ble_service_init+0x1a>
10008db8:	2802      	cmp	r0, #2
10008dba:	d019      	beq.n	10008df0 <sms_ble_service_init+0x4c>
10008dbc:	e025      	b.n	10008e0a <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
10008dbe:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
10008dc0:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10008dc2:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
10008dc4:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
10008dc6:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10008dc8:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10008dca:	221c      	movs	r2, #28
10008dcc:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
10008dce:	3a1b      	subs	r2, #27
10008dd0:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
10008dd2:	4691      	mov	r9, r2
10008dd4:	e023      	b.n	10008e1e <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008dd6:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008dd8:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008dda:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008ddc:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008dde:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008de0:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008de2:	221c      	movs	r2, #28
10008de4:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
10008de6:	3a14      	subs	r2, #20
10008de8:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10008dea:	3a06      	subs	r2, #6
10008dec:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10008dee:	e016      	b.n	10008e1e <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 8) & 0xFF);
10008df0:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 16) & 0xFF);
10008df2:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_IMU_SERVICE_UUID_2 >> 24) & 0xFF);
10008df4:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1) & 0xFF);
10008df6:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 8) & 0xFF);
10008df8:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 16) & 0xFF);
10008dfa:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_IMU_SERVICE_UUID_1 >> 24) & 0xFF);
10008dfc:	221c      	movs	r2, #28
10008dfe:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_IMU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10008e00:	3a08      	subs	r2, #8
10008e02:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
10008e04:	3a11      	subs	r2, #17
10008e06:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_IMU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10008e08:	e009      	b.n	10008e1e <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10008e0a:	2300      	movs	r3, #0
10008e0c:	2400      	movs	r4, #0
10008e0e:	2500      	movs	r5, #0
10008e10:	2600      	movs	r6, #0
10008e12:	2700      	movs	r7, #0
10008e14:	2000      	movs	r0, #0
10008e16:	2200      	movs	r2, #0
10008e18:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10008e1a:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10008e1c:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10008e1e:	464a      	mov	r2, r9
10008e20:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
10008e22:	2202      	movs	r2, #2
10008e24:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
10008e26:	4642      	mov	r2, r8
10008e28:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10008e2a:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10008e2c:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10008e2e:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10008e30:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
10008e32:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
10008e34:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
10008e36:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10008e38:	2300      	movs	r3, #0
10008e3a:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10008e3c:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10008e3e:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10008e40:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
10008e42:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
10008e44:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
10008e46:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10008e48:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008e4a:	2412      	movs	r4, #18
10008e4c:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10008e4e:	4662      	mov	r2, ip
10008e50:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008e52:	466a      	mov	r2, sp
10008e54:	8892      	ldrh	r2, [r2, #4]
10008e56:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008e58:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008e5a:	2011      	movs	r0, #17
10008e5c:	2234      	movs	r2, #52	; 0x34
10008e5e:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10008e60:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
10008e62:	2200      	movs	r2, #0
10008e64:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
10008e66:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008e68:	3033      	adds	r0, #51	; 0x33
10008e6a:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008e6c:	3001      	adds	r0, #1
10008e6e:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008e70:	3001      	adds	r0, #1
10008e72:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
10008e74:	2248      	movs	r2, #72	; 0x48
10008e76:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
10008e78:	3202      	adds	r2, #2
10008e7a:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
10008e7c:	3202      	adds	r2, #2
10008e7e:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
10008e80:	640b      	str	r3, [r1, #64]	; 0x40
10008e82:	b003      	add	sp, #12
10008e84:	bc0c      	pop	{r2, r3}
10008e86:	4690      	mov	r8, r2
10008e88:	4699      	mov	r9, r3
10008e8a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008e8c <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008e8c:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008e8e:	4b05      	ldr	r3, [pc, #20]	; (10008ea4 <sms_button_bt0_callback+0x18>)
10008e90:	2201      	movs	r2, #1
10008e92:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
10008e94:	7858      	ldrb	r0, [r3, #1]
10008e96:	2300      	movs	r3, #0
10008e98:	2200      	movs	r2, #0
10008e9a:	2101      	movs	r1, #1
10008e9c:	4c02      	ldr	r4, [pc, #8]	; (10008ea8 <sms_button_bt0_callback+0x1c>)
10008e9e:	47a0      	blx	r4
}
10008ea0:	bd10      	pop	{r4, pc}
10008ea2:	46c0      	nop			; (mov r8, r8)
10008ea4:	1001a1b0 	.word	0x1001a1b0
10008ea8:	1000e27d 	.word	0x1000e27d

10008eac <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008eac:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008eae:	4b05      	ldr	r3, [pc, #20]	; (10008ec4 <sms_button_bt1_callback+0x18>)
10008eb0:	2201      	movs	r2, #1
10008eb2:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
10008eb4:	79d8      	ldrb	r0, [r3, #7]
10008eb6:	2300      	movs	r3, #0
10008eb8:	2200      	movs	r2, #0
10008eba:	2101      	movs	r1, #1
10008ebc:	4c02      	ldr	r4, [pc, #8]	; (10008ec8 <sms_button_bt1_callback+0x1c>)
10008ebe:	47a0      	blx	r4
}
10008ec0:	bd10      	pop	{r4, pc}
10008ec2:	46c0      	nop			; (mov r8, r8)
10008ec4:	1001a1b0 	.word	0x1001a1b0
10008ec8:	1000e27d 	.word	0x1000e27d

10008ecc <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008ecc:	4b08      	ldr	r3, [pc, #32]	; (10008ef0 <sms_button_init_variables+0x24>)
10008ece:	2200      	movs	r2, #0
10008ed0:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008ed2:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008ed4:	211f      	movs	r1, #31
10008ed6:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008ed8:	391e      	subs	r1, #30
10008eda:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008edc:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008ede:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008ee0:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008ee2:	201d      	movs	r0, #29
10008ee4:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008ee6:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008ee8:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008eea:	72da      	strb	r2, [r3, #11]
}
10008eec:	4770      	bx	lr
10008eee:	46c0      	nop			; (mov r8, r8)
10008ef0:	1001a1b0 	.word	0x1001a1b0

10008ef4 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008ef4:	b5f0      	push	{r4, r5, r6, r7, lr}
10008ef6:	4657      	mov	r7, sl
10008ef8:	464e      	mov	r6, r9
10008efa:	4645      	mov	r5, r8
10008efc:	b4e0      	push	{r5, r6, r7}
10008efe:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008f00:	ac01      	add	r4, sp, #4
10008f02:	0020      	movs	r0, r4
10008f04:	4b1d      	ldr	r3, [pc, #116]	; (10008f7c <sms_button_gpio_init+0x88>)
10008f06:	469a      	mov	sl, r3
10008f08:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008f0a:	2300      	movs	r3, #0
10008f0c:	4699      	mov	r9, r3
10008f0e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008f10:	2302      	movs	r3, #2
10008f12:	4698      	mov	r8, r3
10008f14:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008f16:	2701      	movs	r7, #1
10008f18:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008f1a:	4e19      	ldr	r6, [pc, #100]	; (10008f80 <sms_button_gpio_init+0x8c>)
10008f1c:	7870      	ldrb	r0, [r6, #1]
10008f1e:	0021      	movs	r1, r4
10008f20:	4d18      	ldr	r5, [pc, #96]	; (10008f84 <sms_button_gpio_init+0x90>)
10008f22:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008f24:	0020      	movs	r0, r4
10008f26:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008f28:	464b      	mov	r3, r9
10008f2a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008f2c:	4643      	mov	r3, r8
10008f2e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008f30:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008f32:	79f0      	ldrb	r0, [r6, #7]
10008f34:	0021      	movs	r1, r4
10008f36:	47a8      	blx	r5
10008f38:	2800      	cmp	r0, #0
10008f3a:	d005      	beq.n	10008f48 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008f3c:	4812      	ldr	r0, [pc, #72]	; (10008f88 <sms_button_gpio_init+0x94>)
10008f3e:	4b13      	ldr	r3, [pc, #76]	; (10008f8c <sms_button_gpio_init+0x98>)
10008f40:	4798      	blx	r3
10008f42:	4813      	ldr	r0, [pc, #76]	; (10008f90 <sms_button_gpio_init+0x9c>)
10008f44:	4b13      	ldr	r3, [pc, #76]	; (10008f94 <sms_button_gpio_init+0xa0>)
10008f46:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008f48:	ac01      	add	r4, sp, #4
10008f4a:	0020      	movs	r0, r4
10008f4c:	4b0b      	ldr	r3, [pc, #44]	; (10008f7c <sms_button_gpio_init+0x88>)
10008f4e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008f50:	2300      	movs	r3, #0
10008f52:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008f54:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008f56:	0021      	movs	r1, r4
10008f58:	2017      	movs	r0, #23
10008f5a:	4b0a      	ldr	r3, [pc, #40]	; (10008f84 <sms_button_gpio_init+0x90>)
10008f5c:	4798      	blx	r3
10008f5e:	2800      	cmp	r0, #0
10008f60:	d005      	beq.n	10008f6e <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008f62:	4809      	ldr	r0, [pc, #36]	; (10008f88 <sms_button_gpio_init+0x94>)
10008f64:	4b09      	ldr	r3, [pc, #36]	; (10008f8c <sms_button_gpio_init+0x98>)
10008f66:	4798      	blx	r3
10008f68:	480b      	ldr	r0, [pc, #44]	; (10008f98 <sms_button_gpio_init+0xa4>)
10008f6a:	4b0a      	ldr	r3, [pc, #40]	; (10008f94 <sms_button_gpio_init+0xa0>)
10008f6c:	4798      	blx	r3
    }
}
10008f6e:	b002      	add	sp, #8
10008f70:	bc1c      	pop	{r2, r3, r4}
10008f72:	4690      	mov	r8, r2
10008f74:	4699      	mov	r9, r3
10008f76:	46a2      	mov	sl, r4
10008f78:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008f7a:	46c0      	nop			; (mov r8, r8)
10008f7c:	1000b351 	.word	0x1000b351
10008f80:	1001a1b0 	.word	0x1001a1b0
10008f84:	1000b361 	.word	0x1000b361
10008f88:	100174f0 	.word	0x100174f0
10008f8c:	1001649d 	.word	0x1001649d
10008f90:	10017610 	.word	0x10017610
10008f94:	1001637d 	.word	0x1001637d
10008f98:	10017648 	.word	0x10017648

10008f9c <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008f9c:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_HIGH);
10008f9e:	4d05      	ldr	r5, [pc, #20]	; (10008fb4 <sms_button_register_callbacks+0x18>)
10008fa0:	7868      	ldrb	r0, [r5, #1]
10008fa2:	2201      	movs	r2, #1
10008fa4:	4904      	ldr	r1, [pc, #16]	; (10008fb8 <sms_button_register_callbacks+0x1c>)
10008fa6:	4c05      	ldr	r4, [pc, #20]	; (10008fbc <sms_button_register_callbacks+0x20>)
10008fa8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_HIGH);
10008faa:	79e8      	ldrb	r0, [r5, #7]
10008fac:	2201      	movs	r2, #1
10008fae:	4904      	ldr	r1, [pc, #16]	; (10008fc0 <sms_button_register_callbacks+0x24>)
10008fb0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008fb2:	bd70      	pop	{r4, r5, r6, pc}
10008fb4:	1001a1b0 	.word	0x1001a1b0
10008fb8:	10008e8d 	.word	0x10008e8d
10008fbc:	1000b791 	.word	0x1000b791
10008fc0:	10008ead 	.word	0x10008ead

10008fc4 <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008fc4:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008fc6:	201f      	movs	r0, #31
10008fc8:	4c08      	ldr	r4, [pc, #32]	; (10008fec <sms_button_get_state+0x28>)
10008fca:	47a0      	blx	r4
10008fcc:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008fce:	201d      	movs	r0, #29
10008fd0:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008fd2:	2d00      	cmp	r5, #0
10008fd4:	d004      	beq.n	10008fe0 <sms_button_get_state+0x1c>
10008fd6:	2303      	movs	r3, #3
10008fd8:	2800      	cmp	r0, #0
10008fda:	d104      	bne.n	10008fe6 <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008fdc:	3b02      	subs	r3, #2
10008fde:	e002      	b.n	10008fe6 <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008fe0:	1e43      	subs	r3, r0, #1
10008fe2:	4198      	sbcs	r0, r3
10008fe4:	0043      	lsls	r3, r0, #1
}
10008fe6:	0018      	movs	r0, r3
10008fe8:	bd70      	pop	{r4, r5, r6, pc}
10008fea:	46c0      	nop			; (mov r8, r8)
10008fec:	1000b519 	.word	0x1000b519

10008ff0 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008ff0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008ff2:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10008ff4:	4c39      	ldr	r4, [pc, #228]	; (100090dc <sms_button_fn+0xec>)
10008ff6:	7b63      	ldrb	r3, [r4, #13]
10008ff8:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008ffa:	4b39      	ldr	r3, [pc, #228]	; (100090e0 <sms_button_fn+0xf0>)
10008ffc:	4798      	blx	r3
10008ffe:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10009000:	2d00      	cmp	r5, #0
10009002:	d103      	bne.n	1000900c <sms_button_fn+0x1c>
10009004:	4837      	ldr	r0, [pc, #220]	; (100090e4 <sms_button_fn+0xf4>)
10009006:	4b38      	ldr	r3, [pc, #224]	; (100090e8 <sms_button_fn+0xf8>)
10009008:	4798      	blx	r3
1000900a:	e004      	b.n	10009016 <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
1000900c:	2d01      	cmp	r5, #1
1000900e:	d143      	bne.n	10009098 <sms_button_fn+0xa8>
10009010:	4836      	ldr	r0, [pc, #216]	; (100090ec <sms_button_fn+0xfc>)
10009012:	4b35      	ldr	r3, [pc, #212]	; (100090e8 <sms_button_fn+0xf8>)
10009014:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10009016:	4b31      	ldr	r3, [pc, #196]	; (100090dc <sms_button_fn+0xec>)
10009018:	7b5b      	ldrb	r3, [r3, #13]
1000901a:	2b00      	cmp	r3, #0
1000901c:	d03f      	beq.n	1000909e <sms_button_fn+0xae>
1000901e:	b2da      	uxtb	r2, r3
10009020:	2a02      	cmp	r2, #2
10009022:	d902      	bls.n	1000902a <sms_button_fn+0x3a>
10009024:	2b03      	cmp	r3, #3
10009026:	d020      	beq.n	1000906a <sms_button_fn+0x7a>
10009028:	e039      	b.n	1000909e <sms_button_fn+0xae>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
1000902a:	4b31      	ldr	r3, [pc, #196]	; (100090f0 <sms_button_fn+0x100>)
1000902c:	781b      	ldrb	r3, [r3, #0]
1000902e:	b2db      	uxtb	r3, r3
10009030:	2b00      	cmp	r3, #0
10009032:	d003      	beq.n	1000903c <sms_button_fn+0x4c>
10009034:	3b22      	subs	r3, #34	; 0x22
10009036:	2b01      	cmp	r3, #1
10009038:	d833      	bhi.n	100090a2 <sms_button_fn+0xb2>
1000903a:	e011      	b.n	10009060 <sms_button_fn+0x70>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
1000903c:	201f      	movs	r0, #31
1000903e:	4b2d      	ldr	r3, [pc, #180]	; (100090f4 <sms_button_fn+0x104>)
10009040:	4798      	blx	r3
10009042:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
				delay_ms(SMS_BTN_STARTUP_MS);
10009044:	4f2c      	ldr	r7, [pc, #176]	; (100090f8 <sms_button_fn+0x108>)
				if(sms_button_get_state() != button_instance.current_state) {
10009046:	4e26      	ldr	r6, [pc, #152]	; (100090e0 <sms_button_fn+0xf0>)
10009048:	4d24      	ldr	r5, [pc, #144]	; (100090dc <sms_button_fn+0xec>)
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
				delay_ms(SMS_BTN_STARTUP_MS);
1000904a:	2032      	movs	r0, #50	; 0x32
1000904c:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
1000904e:	47b0      	blx	r6
10009050:	7b6b      	ldrb	r3, [r5, #13]
10009052:	4283      	cmp	r3, r0
10009054:	d131      	bne.n	100090ba <sms_button_fn+0xca>
10009056:	3c01      	subs	r4, #1
10009058:	b2e4      	uxtb	r4, r4
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_STARTUP_CNT; i++) {
1000905a:	2c00      	cmp	r4, #0
1000905c:	d1f5      	bne.n	1000904a <sms_button_fn+0x5a>
1000905e:	e023      	b.n	100090a8 <sms_button_fn+0xb8>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10009060:	2000      	movs	r0, #0
10009062:	4b26      	ldr	r3, [pc, #152]	; (100090fc <sms_button_fn+0x10c>)
10009064:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10009066:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10009068:	e037      	b.n	100090da <sms_button_fn+0xea>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000906a:	4b21      	ldr	r3, [pc, #132]	; (100090f0 <sms_button_fn+0x100>)
1000906c:	781b      	ldrb	r3, [r3, #0]
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000906e:	2000      	movs	r0, #0
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10009070:	2b00      	cmp	r3, #0
10009072:	d032      	beq.n	100090da <sms_button_fn+0xea>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
10009074:	301f      	adds	r0, #31
10009076:	4b1f      	ldr	r3, [pc, #124]	; (100090f4 <sms_button_fn+0x104>)
10009078:	4798      	blx	r3
1000907a:	2432      	movs	r4, #50	; 0x32
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
				delay_ms(SMS_BTN_SHTDWN_MS);
1000907c:	4f1e      	ldr	r7, [pc, #120]	; (100090f8 <sms_button_fn+0x108>)
				if(sms_button_get_state() != button_instance.current_state) {
1000907e:	4e18      	ldr	r6, [pc, #96]	; (100090e0 <sms_button_fn+0xf0>)
10009080:	4d16      	ldr	r5, [pc, #88]	; (100090dc <sms_button_fn+0xec>)
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
				delay_ms(SMS_BTN_SHTDWN_MS);
10009082:	2032      	movs	r0, #50	; 0x32
10009084:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10009086:	47b0      	blx	r6
10009088:	7b6b      	ldrb	r3, [r5, #13]
1000908a:	4283      	cmp	r3, r0
1000908c:	d121      	bne.n	100090d2 <sms_button_fn+0xe2>
1000908e:	3c01      	subs	r4, #1
10009090:	b2e4      	uxtb	r4, r4
            //ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			sms_disable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
			for(uint8_t i = 0; i < SMS_BTN_SHTDWN_CNT; i++) {
10009092:	2c00      	cmp	r4, #0
10009094:	d1f5      	bne.n	10009082 <sms_button_fn+0x92>
10009096:	e015      	b.n	100090c4 <sms_button_fn+0xd4>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10009098:	2001      	movs	r0, #1
1000909a:	4240      	negs	r0, r0
1000909c:	e01d      	b.n	100090da <sms_button_fn+0xea>
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000909e:	2000      	movs	r0, #0
100090a0:	e01b      	b.n	100090da <sms_button_fn+0xea>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
100090a2:	2001      	movs	r0, #1
100090a4:	4240      	negs	r0, r0
100090a6:	e018      	b.n	100090da <sms_button_fn+0xea>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
100090a8:	201f      	movs	r0, #31
100090aa:	4b15      	ldr	r3, [pc, #84]	; (10009100 <sms_button_fn+0x110>)
100090ac:	4798      	blx	r3
			if(wait_success) {
				if(sms_ble_startup()) return -1;
100090ae:	4b15      	ldr	r3, [pc, #84]	; (10009104 <sms_button_fn+0x114>)
100090b0:	4798      	blx	r3
100090b2:	1e43      	subs	r3, r0, #1
100090b4:	4198      	sbcs	r0, r3
100090b6:	4240      	negs	r0, r0
100090b8:	e00f      	b.n	100090da <sms_button_fn+0xea>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
100090ba:	201f      	movs	r0, #31
100090bc:	4b10      	ldr	r3, [pc, #64]	; (10009100 <sms_button_fn+0x110>)
100090be:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100090c0:	2000      	movs	r0, #0
100090c2:	e00a      	b.n	100090da <sms_button_fn+0xea>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
100090c4:	201f      	movs	r0, #31
100090c6:	4b0e      	ldr	r3, [pc, #56]	; (10009100 <sms_button_fn+0x110>)
100090c8:	4798      	blx	r3
			if(wait_success) {
				sms_ble_power_down();
100090ca:	4b0f      	ldr	r3, [pc, #60]	; (10009108 <sms_button_fn+0x118>)
100090cc:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100090ce:	2000      	movs	r0, #0
100090d0:	e003      	b.n	100090da <sms_button_fn+0xea>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(".");
			}
			sms_enable_irq(SMS_BTN_0_IRQ | SMS_BTN_1_IRQ);
100090d2:	201f      	movs	r0, #31
100090d4:	4b0a      	ldr	r3, [pc, #40]	; (10009100 <sms_button_fn+0x110>)
100090d6:	4798      	blx	r3
        //ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100090d8:	2000      	movs	r0, #0
}
100090da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100090dc:	1001a1b0 	.word	0x1001a1b0
100090e0:	10008fc5 	.word	0x10008fc5
100090e4:	10017690 	.word	0x10017690
100090e8:	10009221 	.word	0x10009221
100090ec:	100176a4 	.word	0x100176a4
100090f0:	1001a19c 	.word	0x1001a19c
100090f4:	10009235 	.word	0x10009235
100090f8:	1000ac69 	.word	0x1000ac69
100090fc:	10008bdd 	.word	0x10008bdd
10009100:	10009295 	.word	0x10009295
10009104:	10008ba1 	.word	0x10008ba1
10009108:	10008969 	.word	0x10008969

1000910c <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
1000910c:	b510      	push	{r4, lr}
1000910e:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10009110:	2800      	cmp	r0, #0
10009112:	d104      	bne.n	1000911e <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10009114:	4b0c      	ldr	r3, [pc, #48]	; (10009148 <sms_button_toggle_callback+0x3c>)
10009116:	7858      	ldrb	r0, [r3, #1]
10009118:	4b0c      	ldr	r3, [pc, #48]	; (1000914c <sms_button_toggle_callback+0x40>)
1000911a:	4798      	blx	r3
1000911c:	e005      	b.n	1000912a <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
1000911e:	2801      	cmp	r0, #1
10009120:	d103      	bne.n	1000912a <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10009122:	4b09      	ldr	r3, [pc, #36]	; (10009148 <sms_button_toggle_callback+0x3c>)
10009124:	7858      	ldrb	r0, [r3, #1]
10009126:	4b0a      	ldr	r3, [pc, #40]	; (10009150 <sms_button_toggle_callback+0x44>)
10009128:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
1000912a:	2c00      	cmp	r4, #0
1000912c:	d104      	bne.n	10009138 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
1000912e:	4b06      	ldr	r3, [pc, #24]	; (10009148 <sms_button_toggle_callback+0x3c>)
10009130:	79d8      	ldrb	r0, [r3, #7]
10009132:	4b06      	ldr	r3, [pc, #24]	; (1000914c <sms_button_toggle_callback+0x40>)
10009134:	4798      	blx	r3
10009136:	e005      	b.n	10009144 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10009138:	2c01      	cmp	r4, #1
1000913a:	d103      	bne.n	10009144 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
1000913c:	4b02      	ldr	r3, [pc, #8]	; (10009148 <sms_button_toggle_callback+0x3c>)
1000913e:	79d8      	ldrb	r0, [r3, #7]
10009140:	4b03      	ldr	r3, [pc, #12]	; (10009150 <sms_button_toggle_callback+0x44>)
10009142:	4798      	blx	r3
    }
}
10009144:	bd10      	pop	{r4, pc}
10009146:	46c0      	nop			; (mov r8, r8)
10009148:	1001a1b0 	.word	0x1001a1b0
1000914c:	1000b861 	.word	0x1000b861
10009150:	1000b8bd 	.word	0x1000b8bd

10009154 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_HIGH, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10009154:	b510      	push	{r4, lr}
10009156:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009158:	466b      	mov	r3, sp
1000915a:	1dda      	adds	r2, r3, #7
1000915c:	2300      	movs	r3, #0
1000915e:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10009160:	4c09      	ldr	r4, [pc, #36]	; (10009188 <sms_button_define_services+0x34>)
10009162:	0021      	movs	r1, r4
10009164:	2000      	movs	r0, #0
10009166:	4b09      	ldr	r3, [pc, #36]	; (1000918c <sms_button_define_services+0x38>)
10009168:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
1000916a:	0020      	movs	r0, r4
1000916c:	4b08      	ldr	r3, [pc, #32]	; (10009190 <sms_button_define_services+0x3c>)
1000916e:	4798      	blx	r3
10009170:	1e04      	subs	r4, r0, #0
10009172:	d006      	beq.n	10009182 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10009174:	4807      	ldr	r0, [pc, #28]	; (10009194 <sms_button_define_services+0x40>)
10009176:	4b08      	ldr	r3, [pc, #32]	; (10009198 <sms_button_define_services+0x44>)
10009178:	4798      	blx	r3
1000917a:	0021      	movs	r1, r4
1000917c:	4807      	ldr	r0, [pc, #28]	; (1000919c <sms_button_define_services+0x48>)
1000917e:	4b08      	ldr	r3, [pc, #32]	; (100091a0 <sms_button_define_services+0x4c>)
10009180:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
10009182:	b002      	add	sp, #8
10009184:	bd10      	pop	{r4, pc}
10009186:	46c0      	nop			; (mov r8, r8)
10009188:	1001a1c0 	.word	0x1001a1c0
1000918c:	10008da5 	.word	0x10008da5
10009190:	10008d81 	.word	0x10008d81
10009194:	100174f0 	.word	0x100174f0
10009198:	1001649d 	.word	0x1001649d
1000919c:	100176b8 	.word	0x100176b8
100091a0:	1001637d 	.word	0x1001637d

100091a4 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
100091a4:	b510      	push	{r4, lr}
100091a6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
100091a8:	ac01      	add	r4, sp, #4
100091aa:	0020      	movs	r0, r4
100091ac:	4b15      	ldr	r3, [pc, #84]	; (10009204 <sms_monitor_configure_gpio+0x60>)
100091ae:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
100091b0:	2301      	movs	r3, #1
100091b2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
100091b4:	0021      	movs	r1, r4
100091b6:	200e      	movs	r0, #14
100091b8:	4b13      	ldr	r3, [pc, #76]	; (10009208 <sms_monitor_configure_gpio+0x64>)
100091ba:	4798      	blx	r3
100091bc:	2800      	cmp	r0, #0
100091be:	d005      	beq.n	100091cc <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
100091c0:	4812      	ldr	r0, [pc, #72]	; (1000920c <sms_monitor_configure_gpio+0x68>)
100091c2:	4b13      	ldr	r3, [pc, #76]	; (10009210 <sms_monitor_configure_gpio+0x6c>)
100091c4:	4798      	blx	r3
100091c6:	4813      	ldr	r0, [pc, #76]	; (10009214 <sms_monitor_configure_gpio+0x70>)
100091c8:	4b13      	ldr	r3, [pc, #76]	; (10009218 <sms_monitor_configure_gpio+0x74>)
100091ca:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
100091cc:	2100      	movs	r1, #0
100091ce:	200e      	movs	r0, #14
100091d0:	4b12      	ldr	r3, [pc, #72]	; (1000921c <sms_monitor_configure_gpio+0x78>)
100091d2:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
100091d4:	ac01      	add	r4, sp, #4
100091d6:	0020      	movs	r0, r4
100091d8:	4b0a      	ldr	r3, [pc, #40]	; (10009204 <sms_monitor_configure_gpio+0x60>)
100091da:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
100091dc:	2301      	movs	r3, #1
100091de:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
100091e0:	0021      	movs	r1, r4
100091e2:	200f      	movs	r0, #15
100091e4:	4b08      	ldr	r3, [pc, #32]	; (10009208 <sms_monitor_configure_gpio+0x64>)
100091e6:	4798      	blx	r3
100091e8:	2800      	cmp	r0, #0
100091ea:	d005      	beq.n	100091f8 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
100091ec:	4807      	ldr	r0, [pc, #28]	; (1000920c <sms_monitor_configure_gpio+0x68>)
100091ee:	4b08      	ldr	r3, [pc, #32]	; (10009210 <sms_monitor_configure_gpio+0x6c>)
100091f0:	4798      	blx	r3
100091f2:	4808      	ldr	r0, [pc, #32]	; (10009214 <sms_monitor_configure_gpio+0x70>)
100091f4:	4b08      	ldr	r3, [pc, #32]	; (10009218 <sms_monitor_configure_gpio+0x74>)
100091f6:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
100091f8:	2100      	movs	r1, #0
100091fa:	200f      	movs	r0, #15
100091fc:	4b07      	ldr	r3, [pc, #28]	; (1000921c <sms_monitor_configure_gpio+0x78>)
100091fe:	4798      	blx	r3
}
10009200:	b002      	add	sp, #8
10009202:	bd10      	pop	{r4, pc}
10009204:	1000b351 	.word	0x1000b351
10009208:	1000b361 	.word	0x1000b361
1000920c:	100174f0 	.word	0x100174f0
10009210:	1001649d 	.word	0x1001649d
10009214:	100176fc 	.word	0x100176fc
10009218:	1001637d 	.word	0x1001637d
1000921c:	1000b5b9 	.word	0x1000b5b9

10009220 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_instance.current_mode, timer2_instance.current_mode, sms_working_mode);
10009220:	4b02      	ldr	r3, [pc, #8]	; (1000922c <sms_monitor_get_states+0xc>)
10009222:	781b      	ldrb	r3, [r3, #0]
10009224:	4b02      	ldr	r3, [pc, #8]	; (10009230 <sms_monitor_get_states+0x10>)
10009226:	781b      	ldrb	r3, [r3, #0]
}
10009228:	4770      	bx	lr
1000922a:	46c0      	nop			; (mov r8, r8)
1000922c:	1001a19c 	.word	0x1001a19c
10009230:	1001a198 	.word	0x1001a198

10009234 <sms_disable_irq>:

void sms_disable_irq(enum sms_irq irq)
{
10009234:	b510      	push	{r4, lr}
10009236:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10009238:	07c3      	lsls	r3, r0, #31
1000923a:	d507      	bpl.n	1000924c <sms_disable_irq+0x18>
		DBG_LOG_CONT(".");
1000923c:	202e      	movs	r0, #46	; 0x2e
1000923e:	4b13      	ldr	r3, [pc, #76]	; (1000928c <sms_disable_irq+0x58>)
10009240:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009242:	2180      	movs	r1, #128	; 0x80
10009244:	0409      	lsls	r1, r1, #16
10009246:	2380      	movs	r3, #128	; 0x80
10009248:	4a11      	ldr	r2, [pc, #68]	; (10009290 <sms_disable_irq+0x5c>)
1000924a:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
1000924c:	07a3      	lsls	r3, r4, #30
1000924e:	d507      	bpl.n	10009260 <sms_disable_irq+0x2c>
		DBG_LOG_CONT(".");
10009250:	202e      	movs	r0, #46	; 0x2e
10009252:	4b0e      	ldr	r3, [pc, #56]	; (1000928c <sms_disable_irq+0x58>)
10009254:	4798      	blx	r3
10009256:	2180      	movs	r1, #128	; 0x80
10009258:	0489      	lsls	r1, r1, #18
1000925a:	2380      	movs	r3, #128	; 0x80
1000925c:	4a0c      	ldr	r2, [pc, #48]	; (10009290 <sms_disable_irq+0x5c>)
1000925e:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
10009260:	0763      	lsls	r3, r4, #29
10009262:	d507      	bpl.n	10009274 <sms_disable_irq+0x40>
		DBG_LOG_CONT(".");
10009264:	202e      	movs	r0, #46	; 0x2e
10009266:	4b09      	ldr	r3, [pc, #36]	; (1000928c <sms_disable_irq+0x58>)
10009268:	4798      	blx	r3
1000926a:	2180      	movs	r1, #128	; 0x80
1000926c:	0449      	lsls	r1, r1, #17
1000926e:	2380      	movs	r3, #128	; 0x80
10009270:	4a07      	ldr	r2, [pc, #28]	; (10009290 <sms_disable_irq+0x5c>)
10009272:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
10009274:	0723      	lsls	r3, r4, #28
10009276:	d507      	bpl.n	10009288 <sms_disable_irq+0x54>
		DBG_LOG_CONT(".");
10009278:	202e      	movs	r0, #46	; 0x2e
1000927a:	4b04      	ldr	r3, [pc, #16]	; (1000928c <sms_disable_irq+0x58>)
1000927c:	4798      	blx	r3
1000927e:	2180      	movs	r1, #128	; 0x80
10009280:	0509      	lsls	r1, r1, #20
10009282:	2380      	movs	r3, #128	; 0x80
10009284:	4a02      	ldr	r2, [pc, #8]	; (10009290 <sms_disable_irq+0x5c>)
10009286:	50d1      	str	r1, [r2, r3]
		NVIC_DisableIRQ(SMS_TIMER_AON_IRQ);
	}
}
10009288:	bd10      	pop	{r4, pc}
1000928a:	46c0      	nop			; (mov r8, r8)
1000928c:	100163b1 	.word	0x100163b1
10009290:	e000e100 	.word	0xe000e100

10009294 <sms_enable_irq>:

void sms_enable_irq(enum sms_irq irq)
{
10009294:	b510      	push	{r4, lr}
10009296:	0004      	movs	r4, r0
	if(SMS_IRQ_BTN0 & irq) {
10009298:	07c3      	lsls	r3, r0, #31
1000929a:	d509      	bpl.n	100092b0 <sms_enable_irq+0x1c>
		DBG_LOG_CONT(".");
1000929c:	202e      	movs	r0, #46	; 0x2e
1000929e:	4b17      	ldr	r3, [pc, #92]	; (100092fc <sms_enable_irq+0x68>)
100092a0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100092a2:	4b17      	ldr	r3, [pc, #92]	; (10009300 <sms_enable_irq+0x6c>)
100092a4:	2280      	movs	r2, #128	; 0x80
100092a6:	0412      	lsls	r2, r2, #16
100092a8:	21c0      	movs	r1, #192	; 0xc0
100092aa:	0049      	lsls	r1, r1, #1
100092ac:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100092ae:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_0_IRQ);
		NVIC_EnableIRQ(SMS_BTN_0_IRQ);
	}
	if(SMS_IRQ_BTN1 & irq) {
100092b0:	07a3      	lsls	r3, r4, #30
100092b2:	d509      	bpl.n	100092c8 <sms_enable_irq+0x34>
		DBG_LOG_CONT(".");
100092b4:	202e      	movs	r0, #46	; 0x2e
100092b6:	4b11      	ldr	r3, [pc, #68]	; (100092fc <sms_enable_irq+0x68>)
100092b8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100092ba:	4b11      	ldr	r3, [pc, #68]	; (10009300 <sms_enable_irq+0x6c>)
100092bc:	2280      	movs	r2, #128	; 0x80
100092be:	0492      	lsls	r2, r2, #18
100092c0:	21c0      	movs	r1, #192	; 0xc0
100092c2:	0049      	lsls	r1, r1, #1
100092c4:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100092c6:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_BTN_1_IRQ);
		NVIC_EnableIRQ(SMS_BTN_1_IRQ);
	}
	if(SMS_IRQ_DRDY & irq) {
100092c8:	0763      	lsls	r3, r4, #29
100092ca:	d509      	bpl.n	100092e0 <sms_enable_irq+0x4c>
		DBG_LOG_CONT(".");
100092cc:	202e      	movs	r0, #46	; 0x2e
100092ce:	4b0b      	ldr	r3, [pc, #44]	; (100092fc <sms_enable_irq+0x68>)
100092d0:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100092d2:	4b0b      	ldr	r3, [pc, #44]	; (10009300 <sms_enable_irq+0x6c>)
100092d4:	2280      	movs	r2, #128	; 0x80
100092d6:	0452      	lsls	r2, r2, #17
100092d8:	21c0      	movs	r1, #192	; 0xc0
100092da:	0049      	lsls	r1, r1, #1
100092dc:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100092de:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_IMU_DRDY_IRQ);
		NVIC_EnableIRQ(SMS_IMU_DRDY_IRQ);
	}
	if(SMS_IRQ_AON_TIMER & irq) {
100092e0:	0723      	lsls	r3, r4, #28
100092e2:	d509      	bpl.n	100092f8 <sms_enable_irq+0x64>
		DBG_LOG_CONT(".");
100092e4:	202e      	movs	r0, #46	; 0x2e
100092e6:	4b05      	ldr	r3, [pc, #20]	; (100092fc <sms_enable_irq+0x68>)
100092e8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
100092ea:	4b05      	ldr	r3, [pc, #20]	; (10009300 <sms_enable_irq+0x6c>)
100092ec:	2280      	movs	r2, #128	; 0x80
100092ee:	0512      	lsls	r2, r2, #20
100092f0:	21c0      	movs	r1, #192	; 0xc0
100092f2:	0049      	lsls	r1, r1, #1
100092f4:	505a      	str	r2, [r3, r1]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100092f6:	601a      	str	r2, [r3, #0]
		NVIC_ClearPendingIRQ(SMS_TIMER_AON_IRQ);
		NVIC_EnableIRQ(SMS_TIMER_AON_IRQ);
	}
100092f8:	bd10      	pop	{r4, pc}
100092fa:	46c0      	nop			; (mov r8, r8)
100092fc:	100163b1 	.word	0x100163b1
10009300:	e000e100 	.word	0xe000e100

10009304 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10009304:	b530      	push	{r4, r5, lr}
10009306:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009308:	2010      	movs	r0, #16
1000930a:	4c14      	ldr	r4, [pc, #80]	; (1000935c <sms_i2c_master_configure+0x58>)
1000930c:	47a0      	blx	r4
1000930e:	4b14      	ldr	r3, [pc, #80]	; (10009360 <sms_i2c_master_configure+0x5c>)
10009310:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10009312:	2010      	movs	r0, #16
10009314:	47a0      	blx	r4
10009316:	4b13      	ldr	r3, [pc, #76]	; (10009364 <sms_i2c_master_configure+0x60>)
10009318:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
1000931a:	ac01      	add	r4, sp, #4
1000931c:	0020      	movs	r0, r4
1000931e:	4b12      	ldr	r3, [pc, #72]	; (10009368 <sms_i2c_master_configure+0x64>)
10009320:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10009322:	2303      	movs	r3, #3
10009324:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10009326:	331b      	adds	r3, #27
10009328:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
1000932a:	3b16      	subs	r3, #22
1000932c:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
1000932e:	3301      	adds	r3, #1
10009330:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10009332:	3b07      	subs	r3, #7
10009334:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10009336:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10009338:	4d0c      	ldr	r5, [pc, #48]	; (1000936c <sms_i2c_master_configure+0x68>)
1000933a:	4c0d      	ldr	r4, [pc, #52]	; (10009370 <sms_i2c_master_configure+0x6c>)
1000933c:	aa01      	add	r2, sp, #4
1000933e:	490d      	ldr	r1, [pc, #52]	; (10009374 <sms_i2c_master_configure+0x70>)
10009340:	0028      	movs	r0, r5
10009342:	47a0      	blx	r4
10009344:	2800      	cmp	r0, #0
10009346:	d1f9      	bne.n	1000933c <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10009348:	4b08      	ldr	r3, [pc, #32]	; (1000936c <sms_i2c_master_configure+0x68>)
1000934a:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000934c:	2128      	movs	r1, #40	; 0x28
1000934e:	5c53      	ldrb	r3, [r2, r1]
10009350:	07db      	lsls	r3, r3, #31
10009352:	d4fc      	bmi.n	1000934e <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10009354:	2301      	movs	r3, #1
10009356:	7513      	strb	r3, [r2, #20]
}
10009358:	b007      	add	sp, #28
1000935a:	bd30      	pop	{r4, r5, pc}
1000935c:	100161f1 	.word	0x100161f1
10009360:	1001a2d8 	.word	0x1001a2d8
10009364:	1001a2bc 	.word	0x1001a2bc
10009368:	10008305 	.word	0x10008305
1000936c:	1001a2c8 	.word	0x1001a2c8
10009370:	1000831d 	.word	0x1000831d
10009374:	40003000 	.word	0x40003000

10009378 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
1000937a:	4c12      	ldr	r4, [pc, #72]	; (100093c4 <sms_i2c_master_write+0x4c>)
1000937c:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
1000937e:	1c50      	adds	r0, r2, #1
10009380:	b2c0      	uxtb	r0, r0
10009382:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009384:	6860      	ldr	r0, [r4, #4]
10009386:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009388:	2a00      	cmp	r2, #0
1000938a:	d00e      	beq.n	100093aa <sms_i2c_master_write+0x32>
1000938c:	2000      	movs	r0, #0
1000938e:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10009390:	5c18      	ldrb	r0, [r3, r0]
10009392:	6865      	ldr	r5, [r4, #4]
10009394:	5468      	strb	r0, [r5, r1]
10009396:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009398:	b2c9      	uxtb	r1, r1
1000939a:	428a      	cmp	r2, r1
1000939c:	d8f7      	bhi.n	1000938e <sms_i2c_master_write+0x16>
1000939e:	e004      	b.n	100093aa <sms_i2c_master_write+0x32>
100093a0:	3c01      	subs	r4, #1
100093a2:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
100093a4:	2c00      	cmp	r4, #0
100093a6:	d104      	bne.n	100093b2 <sms_i2c_master_write+0x3a>
100093a8:	e009      	b.n	100093be <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
100093aa:	2433      	movs	r4, #51	; 0x33
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100093ac:	4e05      	ldr	r6, [pc, #20]	; (100093c4 <sms_i2c_master_write+0x4c>)
100093ae:	4d06      	ldr	r5, [pc, #24]	; (100093c8 <sms_i2c_master_write+0x50>)
100093b0:	4f06      	ldr	r7, [pc, #24]	; (100093cc <sms_i2c_master_write+0x54>)
100093b2:	0031      	movs	r1, r6
100093b4:	0028      	movs	r0, r5
100093b6:	47b8      	blx	r7
100093b8:	2800      	cmp	r0, #0
100093ba:	d1f1      	bne.n	100093a0 <sms_i2c_master_write+0x28>
100093bc:	e001      	b.n	100093c2 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
100093be:	2001      	movs	r0, #1
100093c0:	4240      	negs	r0, r0
        }
    }
    return 0;
}
100093c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100093c4:	1001a2d8 	.word	0x1001a2d8
100093c8:	1001a2c8 	.word	0x1001a2c8
100093cc:	100083b5 	.word	0x100083b5

100093d0 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
100093d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100093d2:	4647      	mov	r7, r8
100093d4:	b480      	push	{r7}
100093d6:	0017      	movs	r7, r2
100093d8:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
100093da:	b280      	uxth	r0, r0
100093dc:	4b1d      	ldr	r3, [pc, #116]	; (10009454 <sms_i2c_master_read+0x84>)
100093de:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
100093e0:	2201      	movs	r2, #1
100093e2:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
100093e4:	685b      	ldr	r3, [r3, #4]
100093e6:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
100093e8:	4b1b      	ldr	r3, [pc, #108]	; (10009458 <sms_i2c_master_read+0x88>)
100093ea:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
100093ec:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100093ee:	2433      	movs	r4, #51	; 0x33
100093f0:	4e18      	ldr	r6, [pc, #96]	; (10009454 <sms_i2c_master_read+0x84>)
100093f2:	4d1a      	ldr	r5, [pc, #104]	; (1000945c <sms_i2c_master_read+0x8c>)
100093f4:	e003      	b.n	100093fe <sms_i2c_master_read+0x2e>
100093f6:	3c01      	subs	r4, #1
100093f8:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100093fa:	2c00      	cmp	r4, #0
100093fc:	d01f      	beq.n	1000943e <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
100093fe:	0031      	movs	r1, r6
10009400:	4817      	ldr	r0, [pc, #92]	; (10009460 <sms_i2c_master_read+0x90>)
10009402:	47a8      	blx	r5
10009404:	2800      	cmp	r0, #0
10009406:	d1f6      	bne.n	100093f6 <sms_i2c_master_read+0x26>
10009408:	2633      	movs	r6, #51	; 0x33
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
1000940a:	4d13      	ldr	r5, [pc, #76]	; (10009458 <sms_i2c_master_read+0x88>)
1000940c:	4c15      	ldr	r4, [pc, #84]	; (10009464 <sms_i2c_master_read+0x94>)
1000940e:	e003      	b.n	10009418 <sms_i2c_master_read+0x48>
10009410:	3e01      	subs	r6, #1
10009412:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009414:	2e00      	cmp	r6, #0
10009416:	d015      	beq.n	10009444 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009418:	0029      	movs	r1, r5
1000941a:	4811      	ldr	r0, [pc, #68]	; (10009460 <sms_i2c_master_read+0x90>)
1000941c:	47a0      	blx	r4
1000941e:	2800      	cmp	r0, #0
10009420:	d1f6      	bne.n	10009410 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009422:	2f00      	cmp	r7, #0
10009424:	d011      	beq.n	1000944a <sms_i2c_master_read+0x7a>
10009426:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10009428:	490b      	ldr	r1, [pc, #44]	; (10009458 <sms_i2c_master_read+0x88>)
1000942a:	684a      	ldr	r2, [r1, #4]
1000942c:	5cd2      	ldrb	r2, [r2, r3]
1000942e:	4640      	mov	r0, r8
10009430:	54c2      	strb	r2, [r0, r3]
10009432:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10009434:	b2da      	uxtb	r2, r3
10009436:	4297      	cmp	r7, r2
10009438:	d8f7      	bhi.n	1000942a <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000943a:	2000      	movs	r0, #0
1000943c:	e006      	b.n	1000944c <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
1000943e:	2001      	movs	r0, #1
10009440:	4240      	negs	r0, r0
10009442:	e003      	b.n	1000944c <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10009444:	2001      	movs	r0, #1
10009446:	4240      	negs	r0, r0
10009448:	e000      	b.n	1000944c <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
1000944a:	2000      	movs	r0, #0
1000944c:	bc04      	pop	{r2}
1000944e:	4690      	mov	r8, r2
10009450:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009452:	46c0      	nop			; (mov r8, r8)
10009454:	1001a2d8 	.word	0x1001a2d8
10009458:	1001a2bc 	.word	0x1001a2bc
1000945c:	100083d9 	.word	0x100083d9
10009460:	1001a2c8 	.word	0x1001a2c8
10009464:	10008391 	.word	0x10008391

10009468 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
10009468:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
1000946a:	2384      	movs	r3, #132	; 0x84
1000946c:	4a06      	ldr	r2, [pc, #24]	; (10009488 <sms_imu_interrupt_callback+0x20>)
1000946e:	5cd3      	ldrb	r3, [r2, r3]
10009470:	2b00      	cmp	r3, #0
10009472:	d008      	beq.n	10009486 <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009474:	2101      	movs	r1, #1
10009476:	2385      	movs	r3, #133	; 0x85
10009478:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000947a:	2300      	movs	r3, #0
1000947c:	2200      	movs	r2, #0
1000947e:	3101      	adds	r1, #1
10009480:	201e      	movs	r0, #30
10009482:	4c02      	ldr	r4, [pc, #8]	; (1000948c <sms_imu_interrupt_callback+0x24>)
10009484:	47a0      	blx	r4
	}
}
10009486:	bd10      	pop	{r4, pc}
10009488:	1001a2e8 	.word	0x1001a2e8
1000948c:	1000e27d 	.word	0x1000e27d

10009490 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
10009490:	b510      	push	{r4, lr}
10009492:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
10009494:	ac01      	add	r4, sp, #4
10009496:	0020      	movs	r0, r4
10009498:	4b0a      	ldr	r3, [pc, #40]	; (100094c4 <sms_imu_configure_gpio+0x34>)
1000949a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000949c:	2300      	movs	r3, #0
1000949e:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
100094a0:	3302      	adds	r3, #2
100094a2:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
100094a4:	3b01      	subs	r3, #1
100094a6:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_IMU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
100094a8:	0021      	movs	r1, r4
100094aa:	201e      	movs	r0, #30
100094ac:	4b06      	ldr	r3, [pc, #24]	; (100094c8 <sms_imu_configure_gpio+0x38>)
100094ae:	4798      	blx	r3
100094b0:	2800      	cmp	r0, #0
100094b2:	d005      	beq.n	100094c0 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
100094b4:	4805      	ldr	r0, [pc, #20]	; (100094cc <sms_imu_configure_gpio+0x3c>)
100094b6:	4b06      	ldr	r3, [pc, #24]	; (100094d0 <sms_imu_configure_gpio+0x40>)
100094b8:	4798      	blx	r3
100094ba:	4806      	ldr	r0, [pc, #24]	; (100094d4 <sms_imu_configure_gpio+0x44>)
100094bc:	4b06      	ldr	r3, [pc, #24]	; (100094d8 <sms_imu_configure_gpio+0x48>)
100094be:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
100094c0:	b002      	add	sp, #8
100094c2:	bd10      	pop	{r4, pc}
100094c4:	1000b351 	.word	0x1000b351
100094c8:	1000b361 	.word	0x1000b361
100094cc:	100174f0 	.word	0x100174f0
100094d0:	1001649d 	.word	0x1001649d
100094d4:	1001771c 	.word	0x1001771c
100094d8:	1001637d 	.word	0x1001637d

100094dc <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
100094dc:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_IMU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
100094de:	2202      	movs	r2, #2
100094e0:	4902      	ldr	r1, [pc, #8]	; (100094ec <sms_imu_register_callbacks+0x10>)
100094e2:	201e      	movs	r0, #30
100094e4:	4b02      	ldr	r3, [pc, #8]	; (100094f0 <sms_imu_register_callbacks+0x14>)
100094e6:	4798      	blx	r3
}
100094e8:	bd10      	pop	{r4, pc}
100094ea:	46c0      	nop			; (mov r8, r8)
100094ec:	10009469 	.word	0x10009469
100094f0:	1000b791 	.word	0x1000b791

100094f4 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
100094f4:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_IMU_DRDY_PIN);
100094f6:	201e      	movs	r0, #30
100094f8:	4b03      	ldr	r3, [pc, #12]	; (10009508 <sms_imu_enable_callback+0x14>)
100094fa:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
100094fc:	2101      	movs	r1, #1
100094fe:	2384      	movs	r3, #132	; 0x84
10009500:	4a02      	ldr	r2, [pc, #8]	; (1000950c <sms_imu_enable_callback+0x18>)
10009502:	54d1      	strb	r1, [r2, r3]
}
10009504:	bd10      	pop	{r4, pc}
10009506:	46c0      	nop			; (mov r8, r8)
10009508:	1000b861 	.word	0x1000b861
1000950c:	1001a2e8 	.word	0x1001a2e8

10009510 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
10009510:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_IMU_DRDY_PIN);
10009512:	201e      	movs	r0, #30
10009514:	4b03      	ldr	r3, [pc, #12]	; (10009524 <sms_imu_disable_callback+0x14>)
10009516:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
10009518:	2100      	movs	r1, #0
1000951a:	2384      	movs	r3, #132	; 0x84
1000951c:	4a02      	ldr	r2, [pc, #8]	; (10009528 <sms_imu_disable_callback+0x18>)
1000951e:	54d1      	strb	r1, [r2, r3]
}
10009520:	bd10      	pop	{r4, pc}
10009522:	46c0      	nop			; (mov r8, r8)
10009524:	1000b8bd 	.word	0x1000b8bd
10009528:	1001a2e8 	.word	0x1001a2e8

1000952c <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
1000952c:	b510      	push	{r4, lr}
1000952e:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
10009530:	466b      	mov	r3, sp
10009532:	1dda      	adds	r2, r3, #7
10009534:	2300      	movs	r3, #0
10009536:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
10009538:	4c09      	ldr	r4, [pc, #36]	; (10009560 <sms_imu_define_services+0x34>)
1000953a:	0021      	movs	r1, r4
1000953c:	2002      	movs	r0, #2
1000953e:	4b09      	ldr	r3, [pc, #36]	; (10009564 <sms_imu_define_services+0x38>)
10009540:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
10009542:	0020      	movs	r0, r4
10009544:	4b08      	ldr	r3, [pc, #32]	; (10009568 <sms_imu_define_services+0x3c>)
10009546:	4798      	blx	r3
10009548:	1e04      	subs	r4, r0, #0
1000954a:	d006      	beq.n	1000955a <sms_imu_define_services+0x2e>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
1000954c:	4807      	ldr	r0, [pc, #28]	; (1000956c <sms_imu_define_services+0x40>)
1000954e:	4b08      	ldr	r3, [pc, #32]	; (10009570 <sms_imu_define_services+0x44>)
10009550:	4798      	blx	r3
10009552:	0021      	movs	r1, r4
10009554:	4807      	ldr	r0, [pc, #28]	; (10009574 <sms_imu_define_services+0x48>)
10009556:	4b08      	ldr	r3, [pc, #32]	; (10009578 <sms_imu_define_services+0x4c>)
10009558:	4798      	blx	r3
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
	}
}
1000955a:	b002      	add	sp, #8
1000955c:	bd10      	pop	{r4, pc}
1000955e:	46c0      	nop			; (mov r8, r8)
10009560:	1001a370 	.word	0x1001a370
10009564:	10008da5 	.word	0x10008da5
10009568:	10008d81 	.word	0x10008d81
1000956c:	100174f0 	.word	0x100174f0
10009570:	1001649d 	.word	0x1001649d
10009574:	1001775c 	.word	0x1001775c
10009578:	1001637d 	.word	0x1001637d

1000957c <sms_imu_init_variables>:

/* Initialization functions... */
/* Variables */
void sms_imu_init_variables(void)
{
	imu_device.config.a_scale = AFS_2G;
1000957c:	4a0a      	ldr	r2, [pc, #40]	; (100095a8 <sms_imu_init_variables+0x2c>)
1000957e:	2300      	movs	r3, #0
10009580:	7013      	strb	r3, [r2, #0]
	imu_device.config.g_scale = GFS_250DPS;
10009582:	7053      	strb	r3, [r2, #1]
	imu_device.config.ahrs = false;
10009584:	2150      	movs	r1, #80	; 0x50
10009586:	5453      	strb	r3, [r2, r1]
	imu_device.config.init_ok = false;
10009588:	7113      	strb	r3, [r2, #4]
1000958a:	0013      	movs	r3, r2
1000958c:	0010      	movs	r0, r2
1000958e:	300c      	adds	r0, #12
	
	for(uint8_t i = 0; i < 3; i++) {
		imu_device.config.gyro_bias[i] = 0.0;
10009590:	2100      	movs	r1, #0
10009592:	6219      	str	r1, [r3, #32]
		imu_device.config.accel_bias[i] = 0.0;
10009594:	62d9      	str	r1, [r3, #44]	; 0x2c
		imu_device.config.mag_bias[i] = 0.0;
10009596:	6399      	str	r1, [r3, #56]	; 0x38
		imu_device.config.mag_calibration[i] = 0.0;
10009598:	6459      	str	r1, [r3, #68]	; 0x44
		imu_device.config.self_test[(2*i)] = 0.0;
1000959a:	6091      	str	r1, [r2, #8]
		imu_device.config.self_test[(2*i)+1] = 0.0;
1000959c:	60d1      	str	r1, [r2, #12]
1000959e:	3304      	adds	r3, #4
100095a0:	3208      	adds	r2, #8
	imu_device.config.a_scale = AFS_2G;
	imu_device.config.g_scale = GFS_250DPS;
	imu_device.config.ahrs = false;
	imu_device.config.init_ok = false;
	
	for(uint8_t i = 0; i < 3; i++) {
100095a2:	4283      	cmp	r3, r0
100095a4:	d1f5      	bne.n	10009592 <sms_imu_init_variables+0x16>
		imu_device.config.mag_bias[i] = 0.0;
		imu_device.config.mag_calibration[i] = 0.0;
		imu_device.config.self_test[(2*i)] = 0.0;
		imu_device.config.self_test[(2*i)+1] = 0.0;
	}
}
100095a6:	4770      	bx	lr
100095a8:	1001a2e8 	.word	0x1001a2e8

100095ac <read_accel_data>:
	}
	return 0;
}
/* Read accel data */
void read_accel_data(int16_t *destination)
{
100095ac:	b530      	push	{r4, r5, lr}
100095ae:	b083      	sub	sp, #12
100095b0:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100095b2:	466b      	mov	r3, sp
100095b4:	2206      	movs	r2, #6
100095b6:	213b      	movs	r1, #59	; 0x3b
100095b8:	2069      	movs	r0, #105	; 0x69
100095ba:	4d0c      	ldr	r5, [pc, #48]	; (100095ec <read_accel_data+0x40>)
100095bc:	47a8      	blx	r5
/* Read accel data */
void read_accel_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z accel register data stored here
	readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
100095be:	466b      	mov	r3, sp
100095c0:	781b      	ldrb	r3, [r3, #0]
100095c2:	021b      	lsls	r3, r3, #8
100095c4:	466a      	mov	r2, sp
100095c6:	7852      	ldrb	r2, [r2, #1]
100095c8:	4313      	orrs	r3, r2
100095ca:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
100095cc:	466b      	mov	r3, sp
100095ce:	789b      	ldrb	r3, [r3, #2]
100095d0:	021b      	lsls	r3, r3, #8
100095d2:	466a      	mov	r2, sp
100095d4:	78d2      	ldrb	r2, [r2, #3]
100095d6:	4313      	orrs	r3, r2
100095d8:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
100095da:	466b      	mov	r3, sp
100095dc:	791b      	ldrb	r3, [r3, #4]
100095de:	021b      	lsls	r3, r3, #8
100095e0:	466a      	mov	r2, sp
100095e2:	7952      	ldrb	r2, [r2, #5]
100095e4:	4313      	orrs	r3, r2
100095e6:	80a3      	strh	r3, [r4, #4]
}
100095e8:	b003      	add	sp, #12
100095ea:	bd30      	pop	{r4, r5, pc}
100095ec:	100093d1 	.word	0x100093d1

100095f0 <read_gyro_data>:
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
100095f0:	b530      	push	{r4, r5, lr}
100095f2:	b083      	sub	sp, #12
100095f4:	0004      	movs	r4, r0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100095f6:	466b      	mov	r3, sp
100095f8:	2206      	movs	r2, #6
100095fa:	2143      	movs	r1, #67	; 0x43
100095fc:	2069      	movs	r0, #105	; 0x69
100095fe:	4d0c      	ldr	r5, [pc, #48]	; (10009630 <read_gyro_data+0x40>)
10009600:	47a8      	blx	r5
/* Read gyro data */
void read_gyro_data(int16_t *destination)
{
	uint8_t rawData[6];  // x/y/z gyro register data stored here
	readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, &rawData[0]);  // Read the six raw data registers sequentially into data array
	destination[0] = ((int16_t)rawData[0] << 8) | rawData[1] ;  // Turn the MSB and LSB into a signed 16-bit value
10009602:	466b      	mov	r3, sp
10009604:	781b      	ldrb	r3, [r3, #0]
10009606:	021b      	lsls	r3, r3, #8
10009608:	466a      	mov	r2, sp
1000960a:	7852      	ldrb	r2, [r2, #1]
1000960c:	4313      	orrs	r3, r2
1000960e:	8023      	strh	r3, [r4, #0]
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
10009610:	466b      	mov	r3, sp
10009612:	789b      	ldrb	r3, [r3, #2]
10009614:	021b      	lsls	r3, r3, #8
10009616:	466a      	mov	r2, sp
10009618:	78d2      	ldrb	r2, [r2, #3]
1000961a:	4313      	orrs	r3, r2
1000961c:	8063      	strh	r3, [r4, #2]
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
1000961e:	466b      	mov	r3, sp
10009620:	791b      	ldrb	r3, [r3, #4]
10009622:	021b      	lsls	r3, r3, #8
10009624:	466a      	mov	r2, sp
10009626:	7952      	ldrb	r2, [r2, #5]
10009628:	4313      	orrs	r3, r2
1000962a:	80a3      	strh	r3, [r4, #4]
}
1000962c:	b003      	add	sp, #12
1000962e:	bd30      	pop	{r4, r5, pc}
10009630:	100093d1 	.word	0x100093d1

10009634 <get_Mres>:
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
	// Possible magnetometer scales (and their register bit settings) are:
	// 14 bit resolution (0) and 16 bit resolution (1)
	switch(m_scale) {
10009634:	2800      	cmp	r0, #0
10009636:	d002      	beq.n	1000963e <get_Mres+0xa>
10009638:	2801      	cmp	r0, #1
1000963a:	d002      	beq.n	10009642 <get_Mres+0xe>
1000963c:	e003      	b.n	10009646 <get_Mres+0x12>
		case MFS_14BITS:
		retVal = 10.0 * 4912.0 / 8190.0;
1000963e:	4803      	ldr	r0, [pc, #12]	; (1000964c <get_Mres+0x18>)
10009640:	e002      	b.n	10009648 <get_Mres+0x14>
		break;
		
		case MFS_16BITS:
		retVal = 10.0 * 4912.0 / 32760.0;
10009642:	4803      	ldr	r0, [pc, #12]	; (10009650 <get_Mres+0x1c>)
		break;
10009644:	e000      	b.n	10009648 <get_Mres+0x14>


/* Utility functions */
float get_Mres(uint8_t m_scale)
{
	float retVal = 0;
10009646:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
10009648:	4770      	bx	lr
1000964a:	46c0      	nop			; (mov r8, r8)
1000964c:	40bfebff 	.word	0x40bfebff
10009650:	3fbfebff 	.word	0x3fbfebff

10009654 <get_Gres>:
{
	float retVal = 0;
	// Possible gyro scales (and their register bit settings) are:
	// 250 DPS (00), 500 DPS (01), 1000 DPS (10), and 2000 DPS  (11).
	// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
	switch(g_scale) {
10009654:	2801      	cmp	r0, #1
10009656:	d008      	beq.n	1000966a <get_Gres+0x16>
10009658:	2800      	cmp	r0, #0
1000965a:	d004      	beq.n	10009666 <get_Gres+0x12>
1000965c:	2802      	cmp	r0, #2
1000965e:	d006      	beq.n	1000966e <get_Gres+0x1a>
10009660:	2803      	cmp	r0, #3
10009662:	d006      	beq.n	10009672 <get_Gres+0x1e>
10009664:	e007      	b.n	10009676 <get_Gres+0x22>
		case GFS_250DPS:
		retVal = 250.0 / 32768.0;
10009666:	4805      	ldr	r0, [pc, #20]	; (1000967c <get_Gres+0x28>)
10009668:	e006      	b.n	10009678 <get_Gres+0x24>
		break;
		
		case GFS_500DPS:
		retVal = 500.0 / 32768.0;
1000966a:	4805      	ldr	r0, [pc, #20]	; (10009680 <get_Gres+0x2c>)
		break;
1000966c:	e004      	b.n	10009678 <get_Gres+0x24>
		
		case GFS_1000DPS:
		retVal = 1000.0 / 32768.0;
1000966e:	4805      	ldr	r0, [pc, #20]	; (10009684 <get_Gres+0x30>)
		break;
10009670:	e002      	b.n	10009678 <get_Gres+0x24>
		
		case GFS_2000DPS:
		retVal = 2000.0 / 32768.0;
10009672:	4805      	ldr	r0, [pc, #20]	; (10009688 <get_Gres+0x34>)
		break;
10009674:	e000      	b.n	10009678 <get_Gres+0x24>
	}
	return retVal;
}
float get_Gres(uint8_t g_scale)
{
	float retVal = 0;
10009676:	2000      	movs	r0, #0
		
		default:
		break;
	}
	return retVal;
}
10009678:	4770      	bx	lr
1000967a:	46c0      	nop			; (mov r8, r8)
1000967c:	3bfa0000 	.word	0x3bfa0000
10009680:	3c7a0000 	.word	0x3c7a0000
10009684:	3cfa0000 	.word	0x3cfa0000
10009688:	3d7a0000 	.word	0x3d7a0000

1000968c <get_Ares>:
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
	switch(a_scale) {
1000968c:	2801      	cmp	r0, #1
1000968e:	d009      	beq.n	100096a4 <get_Ares+0x18>
10009690:	2800      	cmp	r0, #0
10009692:	d004      	beq.n	1000969e <get_Ares+0x12>
10009694:	2802      	cmp	r0, #2
10009696:	d008      	beq.n	100096aa <get_Ares+0x1e>
10009698:	2803      	cmp	r0, #3
1000969a:	d009      	beq.n	100096b0 <get_Ares+0x24>
1000969c:	e00b      	b.n	100096b6 <get_Ares+0x2a>
		// Possible accelerometer scales (and their register bit settings) are:
		// 2 Gs (00), 4 Gs (01), 8 Gs (10), and 16 Gs  (11).
		// Here's a bit of an algorith to calculate DPS/(ADC tick) based on that 2-bit value:
		case AFS_2G:
		retVal = 2.0/32768.0;
1000969e:	20e2      	movs	r0, #226	; 0xe2
100096a0:	0580      	lsls	r0, r0, #22
100096a2:	e009      	b.n	100096b8 <get_Ares+0x2c>
		break;
		case AFS_4G:
		retVal = 4.0/32768.0;
100096a4:	20e4      	movs	r0, #228	; 0xe4
100096a6:	0580      	lsls	r0, r0, #22
		break;
100096a8:	e006      	b.n	100096b8 <get_Ares+0x2c>
		case AFS_8G:
		retVal = 8.0/32768.0;
100096aa:	20e6      	movs	r0, #230	; 0xe6
100096ac:	0580      	lsls	r0, r0, #22
		break;
100096ae:	e003      	b.n	100096b8 <get_Ares+0x2c>
		case AFS_16G:
		retVal = 16.0/32768.0;
100096b0:	20e8      	movs	r0, #232	; 0xe8
100096b2:	0580      	lsls	r0, r0, #22
		break;
100096b4:	e000      	b.n	100096b8 <get_Ares+0x2c>
	}
	return retVal;
}
float get_Ares(uint8_t a_scale)
{
	float retVal = 0.0;
100096b6:	2000      	movs	r0, #0
		case AFS_16G:
		retVal = 16.0/32768.0;
		break;
	}
	return retVal;
}
100096b8:	4770      	bx	lr
100096ba:	46c0      	nop			; (mov r8, r8)

100096bc <writeByte>:


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
100096bc:	b510      	push	{r4, lr}
100096be:	b082      	sub	sp, #8
100096c0:	466b      	mov	r3, sp
100096c2:	3307      	adds	r3, #7
100096c4:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
100096c6:	2201      	movs	r2, #1
100096c8:	4c01      	ldr	r4, [pc, #4]	; (100096d0 <writeByte+0x14>)
100096ca:	47a0      	blx	r4
}
100096cc:	b002      	add	sp, #8
100096ce:	bd10      	pop	{r4, pc}
100096d0:	10009379 	.word	0x10009379

100096d4 <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
100096d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100096d6:	465f      	mov	r7, fp
100096d8:	4656      	mov	r6, sl
100096da:	464d      	mov	r5, r9
100096dc:	4644      	mov	r4, r8
100096de:	b4f0      	push	{r4, r5, r6, r7}
100096e0:	b08f      	sub	sp, #60	; 0x3c
100096e2:	9003      	str	r0, [sp, #12]
100096e4:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
100096e6:	2280      	movs	r2, #128	; 0x80
100096e8:	216b      	movs	r1, #107	; 0x6b
100096ea:	2069      	movs	r0, #105	; 0x69
100096ec:	4ccd      	ldr	r4, [pc, #820]	; (10009a24 <sms_imu_mpu_calibrate+0x350>)
100096ee:	47a0      	blx	r4
	delay_ms(100);
100096f0:	2064      	movs	r0, #100	; 0x64
100096f2:	4dcd      	ldr	r5, [pc, #820]	; (10009a28 <sms_imu_mpu_calibrate+0x354>)
100096f4:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
100096f6:	2201      	movs	r2, #1
100096f8:	216b      	movs	r1, #107	; 0x6b
100096fa:	2069      	movs	r0, #105	; 0x69
100096fc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
100096fe:	2200      	movs	r2, #0
10009700:	216c      	movs	r1, #108	; 0x6c
10009702:	2069      	movs	r0, #105	; 0x69
10009704:	47a0      	blx	r4
	delay_ms(200);
10009706:	20c8      	movs	r0, #200	; 0xc8
10009708:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
1000970a:	2200      	movs	r2, #0
1000970c:	2138      	movs	r1, #56	; 0x38
1000970e:	2069      	movs	r0, #105	; 0x69
10009710:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009712:	2200      	movs	r2, #0
10009714:	2123      	movs	r1, #35	; 0x23
10009716:	2069      	movs	r0, #105	; 0x69
10009718:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
1000971a:	2200      	movs	r2, #0
1000971c:	216b      	movs	r1, #107	; 0x6b
1000971e:	2069      	movs	r0, #105	; 0x69
10009720:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
10009722:	2200      	movs	r2, #0
10009724:	2124      	movs	r1, #36	; 0x24
10009726:	2069      	movs	r0, #105	; 0x69
10009728:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
1000972a:	2200      	movs	r2, #0
1000972c:	216a      	movs	r1, #106	; 0x6a
1000972e:	2069      	movs	r0, #105	; 0x69
10009730:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
10009732:	220c      	movs	r2, #12
10009734:	216a      	movs	r1, #106	; 0x6a
10009736:	2069      	movs	r0, #105	; 0x69
10009738:	47a0      	blx	r4
	delay_ms(15);
1000973a:	200f      	movs	r0, #15
1000973c:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
1000973e:	2201      	movs	r2, #1
10009740:	211a      	movs	r1, #26
10009742:	2069      	movs	r0, #105	; 0x69
10009744:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009746:	2200      	movs	r2, #0
10009748:	2119      	movs	r1, #25
1000974a:	2069      	movs	r0, #105	; 0x69
1000974c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
1000974e:	2200      	movs	r2, #0
10009750:	211b      	movs	r1, #27
10009752:	2069      	movs	r0, #105	; 0x69
10009754:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009756:	2200      	movs	r2, #0
10009758:	211c      	movs	r1, #28
1000975a:	2069      	movs	r0, #105	; 0x69
1000975c:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
1000975e:	2240      	movs	r2, #64	; 0x40
10009760:	216a      	movs	r1, #106	; 0x6a
10009762:	2069      	movs	r0, #105	; 0x69
10009764:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
10009766:	2278      	movs	r2, #120	; 0x78
10009768:	2123      	movs	r1, #35	; 0x23
1000976a:	2069      	movs	r0, #105	; 0x69
1000976c:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
1000976e:	2028      	movs	r0, #40	; 0x28
10009770:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
10009772:	2200      	movs	r2, #0
10009774:	2123      	movs	r1, #35	; 0x23
10009776:	2069      	movs	r0, #105	; 0x69
10009778:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000977a:	ac0b      	add	r4, sp, #44	; 0x2c
1000977c:	0023      	movs	r3, r4
1000977e:	2202      	movs	r2, #2
10009780:	2172      	movs	r1, #114	; 0x72
10009782:	2069      	movs	r0, #105	; 0x69
10009784:	4da9      	ldr	r5, [pc, #676]	; (10009a2c <sms_imu_mpu_calibrate+0x358>)
10009786:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009788:	7820      	ldrb	r0, [r4, #0]
1000978a:	0200      	lsls	r0, r0, #8
1000978c:	7863      	ldrb	r3, [r4, #1]
1000978e:	4318      	orrs	r0, r3
10009790:	210c      	movs	r1, #12
10009792:	4ba7      	ldr	r3, [pc, #668]	; (10009a30 <sms_imu_mpu_calibrate+0x35c>)
10009794:	4798      	blx	r3
10009796:	b283      	uxth	r3, r0
10009798:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
1000979a:	2b00      	cmp	r3, #0
1000979c:	d042      	beq.n	10009824 <sms_imu_mpu_calibrate+0x150>
1000979e:	2300      	movs	r3, #0
100097a0:	4698      	mov	r8, r3
100097a2:	2700      	movs	r7, #0
100097a4:	469b      	mov	fp, r3
100097a6:	469a      	mov	sl, r3
100097a8:	4699      	mov	r9, r3
100097aa:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100097ac:	ac0b      	add	r4, sp, #44	; 0x2c
100097ae:	9301      	str	r3, [sp, #4]
100097b0:	0023      	movs	r3, r4
100097b2:	220c      	movs	r2, #12
100097b4:	2174      	movs	r1, #116	; 0x74
100097b6:	2069      	movs	r0, #105	; 0x69
100097b8:	4e9c      	ldr	r6, [pc, #624]	; (10009a2c <sms_imu_mpu_calibrate+0x358>)
100097ba:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
100097bc:	7823      	ldrb	r3, [r4, #0]
100097be:	021b      	lsls	r3, r3, #8
100097c0:	7862      	ldrb	r2, [r4, #1]
100097c2:	4313      	orrs	r3, r2
100097c4:	b21b      	sxth	r3, r3
100097c6:	9a01      	ldr	r2, [sp, #4]
100097c8:	4694      	mov	ip, r2
100097ca:	449c      	add	ip, r3
100097cc:	4663      	mov	r3, ip
100097ce:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
100097d0:	78a3      	ldrb	r3, [r4, #2]
100097d2:	021b      	lsls	r3, r3, #8
100097d4:	78e2      	ldrb	r2, [r4, #3]
100097d6:	4313      	orrs	r3, r2
100097d8:	b21b      	sxth	r3, r3
100097da:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
100097dc:	7923      	ldrb	r3, [r4, #4]
100097de:	021b      	lsls	r3, r3, #8
100097e0:	7962      	ldrb	r2, [r4, #5]
100097e2:	4313      	orrs	r3, r2
100097e4:	b21b      	sxth	r3, r3
100097e6:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
100097e8:	79a3      	ldrb	r3, [r4, #6]
100097ea:	021b      	lsls	r3, r3, #8
100097ec:	79e2      	ldrb	r2, [r4, #7]
100097ee:	4313      	orrs	r3, r2
100097f0:	b21b      	sxth	r3, r3
100097f2:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
100097f4:	7a23      	ldrb	r3, [r4, #8]
100097f6:	021b      	lsls	r3, r3, #8
100097f8:	7a62      	ldrb	r2, [r4, #9]
100097fa:	4313      	orrs	r3, r2
100097fc:	b21b      	sxth	r3, r3
100097fe:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009800:	7aa3      	ldrb	r3, [r4, #10]
10009802:	021b      	lsls	r3, r3, #8
10009804:	7ae2      	ldrb	r2, [r4, #11]
10009806:	4313      	orrs	r3, r2
10009808:	b21b      	sxth	r3, r3
1000980a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
1000980c:	3501      	adds	r5, #1
1000980e:	b2ad      	uxth	r5, r5
10009810:	9b02      	ldr	r3, [sp, #8]
10009812:	42ab      	cmp	r3, r5
10009814:	d1cc      	bne.n	100097b0 <sms_imu_mpu_calibrate+0xdc>
10009816:	4653      	mov	r3, sl
10009818:	46ba      	mov	sl, r7
1000981a:	465a      	mov	r2, fp
1000981c:	46e3      	mov	fp, ip
1000981e:	0016      	movs	r6, r2
10009820:	001f      	movs	r7, r3
10009822:	e006      	b.n	10009832 <sms_imu_mpu_calibrate+0x15e>
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	DBG_LOG_DEV("Calibrating MPU");
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009824:	2300      	movs	r3, #0
10009826:	4698      	mov	r8, r3
10009828:	2700      	movs	r7, #0
1000982a:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
1000982c:	469b      	mov	fp, r3
1000982e:	469a      	mov	sl, r3
10009830:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
10009832:	4c80      	ldr	r4, [pc, #512]	; (10009a34 <sms_imu_mpu_calibrate+0x360>)
10009834:	9902      	ldr	r1, [sp, #8]
10009836:	4658      	mov	r0, fp
10009838:	47a0      	blx	r4
1000983a:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
1000983c:	9b02      	ldr	r3, [sp, #8]
1000983e:	469b      	mov	fp, r3
10009840:	0019      	movs	r1, r3
10009842:	4650      	mov	r0, sl
10009844:	47a0      	blx	r4
10009846:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009848:	4659      	mov	r1, fp
1000984a:	4648      	mov	r0, r9
1000984c:	47a0      	blx	r4
1000984e:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
10009850:	4659      	mov	r1, fp
10009852:	4640      	mov	r0, r8
10009854:	47a0      	blx	r4
10009856:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009858:	4659      	mov	r1, fp
1000985a:	0038      	movs	r0, r7
1000985c:	47a0      	blx	r4
1000985e:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
10009860:	4659      	mov	r1, fp
10009862:	0030      	movs	r0, r6
10009864:	47a0      	blx	r4
10009866:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
10009868:	464b      	mov	r3, r9
1000986a:	2b00      	cmp	r3, #0
1000986c:	dd03      	ble.n	10009876 <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
1000986e:	4b72      	ldr	r3, [pc, #456]	; (10009a38 <sms_imu_mpu_calibrate+0x364>)
10009870:	469c      	mov	ip, r3
10009872:	44e1      	add	r9, ip
10009874:	e003      	b.n	1000987e <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
10009876:	2380      	movs	r3, #128	; 0x80
10009878:	01db      	lsls	r3, r3, #7
1000987a:	469c      	mov	ip, r3
1000987c:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
1000987e:	9b01      	ldr	r3, [sp, #4]
10009880:	4259      	negs	r1, r3
10009882:	17ca      	asrs	r2, r1, #31
10009884:	2303      	movs	r3, #3
10009886:	401a      	ands	r2, r3
10009888:	1852      	adds	r2, r2, r1
1000988a:	1091      	asrs	r1, r2, #2
1000988c:	1292      	asrs	r2, r2, #10
1000988e:	b2d2      	uxtb	r2, r2
10009890:	ac0b      	add	r4, sp, #44	; 0x2c
10009892:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009894:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10009896:	9902      	ldr	r1, [sp, #8]
10009898:	4248      	negs	r0, r1
1000989a:	17c1      	asrs	r1, r0, #31
1000989c:	4019      	ands	r1, r3
1000989e:	1809      	adds	r1, r1, r0
100098a0:	1088      	asrs	r0, r1, #2
100098a2:	1289      	asrs	r1, r1, #10
100098a4:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100098a6:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100098a8:	9e04      	ldr	r6, [sp, #16]
100098aa:	4271      	negs	r1, r6
100098ac:	17c8      	asrs	r0, r1, #31
100098ae:	4003      	ands	r3, r0
100098b0:	185b      	adds	r3, r3, r1
100098b2:	1099      	asrs	r1, r3, #2
100098b4:	129b      	asrs	r3, r3, #10
100098b6:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100098b8:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100098ba:	2113      	movs	r1, #19
100098bc:	2069      	movs	r0, #105	; 0x69
100098be:	4e59      	ldr	r6, [pc, #356]	; (10009a24 <sms_imu_mpu_calibrate+0x350>)
100098c0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
100098c2:	7862      	ldrb	r2, [r4, #1]
100098c4:	2114      	movs	r1, #20
100098c6:	2069      	movs	r0, #105	; 0x69
100098c8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
100098ca:	78a2      	ldrb	r2, [r4, #2]
100098cc:	2115      	movs	r1, #21
100098ce:	2069      	movs	r0, #105	; 0x69
100098d0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
100098d2:	78e2      	ldrb	r2, [r4, #3]
100098d4:	2116      	movs	r1, #22
100098d6:	2069      	movs	r0, #105	; 0x69
100098d8:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
100098da:	7922      	ldrb	r2, [r4, #4]
100098dc:	2117      	movs	r1, #23
100098de:	2069      	movs	r0, #105	; 0x69
100098e0:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
100098e2:	7962      	ldrb	r2, [r4, #5]
100098e4:	2118      	movs	r1, #24
100098e6:	2069      	movs	r0, #105	; 0x69
100098e8:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
100098ea:	4f54      	ldr	r7, [pc, #336]	; (10009a3c <sms_imu_mpu_calibrate+0x368>)
100098ec:	9801      	ldr	r0, [sp, #4]
100098ee:	47b8      	blx	r7
100098f0:	4e53      	ldr	r6, [pc, #332]	; (10009a40 <sms_imu_mpu_calibrate+0x36c>)
100098f2:	4954      	ldr	r1, [pc, #336]	; (10009a44 <sms_imu_mpu_calibrate+0x370>)
100098f4:	47b0      	blx	r6
100098f6:	9b03      	ldr	r3, [sp, #12]
100098f8:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
100098fa:	9802      	ldr	r0, [sp, #8]
100098fc:	47b8      	blx	r7
100098fe:	4951      	ldr	r1, [pc, #324]	; (10009a44 <sms_imu_mpu_calibrate+0x370>)
10009900:	47b0      	blx	r6
10009902:	9b03      	ldr	r3, [sp, #12]
10009904:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009906:	9804      	ldr	r0, [sp, #16]
10009908:	47b8      	blx	r7
1000990a:	494e      	ldr	r1, [pc, #312]	; (10009a44 <sms_imu_mpu_calibrate+0x370>)
1000990c:	47b0      	blx	r6
1000990e:	9b03      	ldr	r3, [sp, #12]
10009910:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009912:	0023      	movs	r3, r4
10009914:	2202      	movs	r2, #2
10009916:	2177      	movs	r1, #119	; 0x77
10009918:	2069      	movs	r0, #105	; 0x69
1000991a:	4e44      	ldr	r6, [pc, #272]	; (10009a2c <sms_imu_mpu_calibrate+0x358>)
1000991c:	46b0      	mov	r8, r6
1000991e:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009920:	7827      	ldrb	r7, [r4, #0]
10009922:	023f      	lsls	r7, r7, #8
10009924:	7863      	ldrb	r3, [r4, #1]
10009926:	431f      	orrs	r7, r3
10009928:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000992a:	0023      	movs	r3, r4
1000992c:	2202      	movs	r2, #2
1000992e:	217a      	movs	r1, #122	; 0x7a
10009930:	2069      	movs	r0, #105	; 0x69
10009932:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009934:	7826      	ldrb	r6, [r4, #0]
10009936:	0236      	lsls	r6, r6, #8
10009938:	7863      	ldrb	r3, [r4, #1]
1000993a:	431e      	orrs	r6, r3
1000993c:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000993e:	0023      	movs	r3, r4
10009940:	2202      	movs	r2, #2
10009942:	217d      	movs	r1, #125	; 0x7d
10009944:	2069      	movs	r0, #105	; 0x69
10009946:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009948:	7823      	ldrb	r3, [r4, #0]
1000994a:	021b      	lsls	r3, r3, #8
1000994c:	7861      	ldrb	r1, [r4, #1]
1000994e:	4319      	orrs	r1, r3
10009950:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
10009952:	ab07      	add	r3, sp, #28
10009954:	2200      	movs	r2, #0
10009956:	701a      	strb	r2, [r3, #0]
10009958:	705a      	strb	r2, [r3, #1]
1000995a:	709a      	strb	r2, [r3, #2]
1000995c:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
1000995e:	2401      	movs	r4, #1
10009960:	009a      	lsls	r2, r3, #2
10009962:	a808      	add	r0, sp, #32
10009964:	5812      	ldr	r2, [r2, r0]
10009966:	4222      	tst	r2, r4
10009968:	d001      	beq.n	1000996e <sms_imu_mpu_calibrate+0x29a>
1000996a:	aa07      	add	r2, sp, #28
1000996c:	549c      	strb	r4, [r3, r2]
1000996e:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
10009970:	2b03      	cmp	r3, #3
10009972:	d1f5      	bne.n	10009960 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
10009974:	17ea      	asrs	r2, r5, #31
10009976:	3304      	adds	r3, #4
10009978:	401a      	ands	r2, r3
1000997a:	1952      	adds	r2, r2, r5
1000997c:	10d2      	asrs	r2, r2, #3
1000997e:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009980:	4652      	mov	r2, sl
10009982:	17d0      	asrs	r0, r2, #31
10009984:	4018      	ands	r0, r3
10009986:	4450      	add	r0, sl
10009988:	10c0      	asrs	r0, r0, #3
1000998a:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
1000998c:	464a      	mov	r2, r9
1000998e:	17d2      	asrs	r2, r2, #31
10009990:	4013      	ands	r3, r2
10009992:	444b      	add	r3, r9
10009994:	10da      	asrs	r2, r3, #3
10009996:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009998:	123a      	asrs	r2, r7, #8
1000999a:	b2d2      	uxtb	r2, r2
1000999c:	ac0b      	add	r4, sp, #44	; 0x2c
1000999e:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099a0:	a907      	add	r1, sp, #28
100099a2:	7808      	ldrb	r0, [r1, #0]
100099a4:	4307      	orrs	r7, r0
100099a6:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100099a8:	1230      	asrs	r0, r6, #8
100099aa:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099ac:	7848      	ldrb	r0, [r1, #1]
100099ae:	4306      	orrs	r6, r0
100099b0:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
100099b2:	1218      	asrs	r0, r3, #8
100099b4:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100099b6:	7889      	ldrb	r1, [r1, #2]
100099b8:	430b      	orrs	r3, r1
100099ba:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
100099bc:	2177      	movs	r1, #119	; 0x77
100099be:	2069      	movs	r0, #105	; 0x69
100099c0:	4e18      	ldr	r6, [pc, #96]	; (10009a24 <sms_imu_mpu_calibrate+0x350>)
100099c2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
100099c4:	7862      	ldrb	r2, [r4, #1]
100099c6:	2178      	movs	r1, #120	; 0x78
100099c8:	2069      	movs	r0, #105	; 0x69
100099ca:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
100099cc:	78a2      	ldrb	r2, [r4, #2]
100099ce:	217a      	movs	r1, #122	; 0x7a
100099d0:	2069      	movs	r0, #105	; 0x69
100099d2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
100099d4:	78e2      	ldrb	r2, [r4, #3]
100099d6:	217b      	movs	r1, #123	; 0x7b
100099d8:	2069      	movs	r0, #105	; 0x69
100099da:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
100099dc:	7922      	ldrb	r2, [r4, #4]
100099de:	217d      	movs	r1, #125	; 0x7d
100099e0:	2069      	movs	r0, #105	; 0x69
100099e2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
100099e4:	7962      	ldrb	r2, [r4, #5]
100099e6:	217e      	movs	r1, #126	; 0x7e
100099e8:	2069      	movs	r0, #105	; 0x69
100099ea:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
100099ec:	4e13      	ldr	r6, [pc, #76]	; (10009a3c <sms_imu_mpu_calibrate+0x368>)
100099ee:	0028      	movs	r0, r5
100099f0:	47b0      	blx	r6
100099f2:	4c15      	ldr	r4, [pc, #84]	; (10009a48 <sms_imu_mpu_calibrate+0x374>)
100099f4:	21e2      	movs	r1, #226	; 0xe2
100099f6:	0589      	lsls	r1, r1, #22
100099f8:	47a0      	blx	r4
100099fa:	9d05      	ldr	r5, [sp, #20]
100099fc:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
100099fe:	4650      	mov	r0, sl
10009a00:	47b0      	blx	r6
10009a02:	21e2      	movs	r1, #226	; 0xe2
10009a04:	0589      	lsls	r1, r1, #22
10009a06:	47a0      	blx	r4
10009a08:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009a0a:	4648      	mov	r0, r9
10009a0c:	47b0      	blx	r6
10009a0e:	21e2      	movs	r1, #226	; 0xe2
10009a10:	0589      	lsls	r1, r1, #22
10009a12:	47a0      	blx	r4
10009a14:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009a16:	b00f      	add	sp, #60	; 0x3c
10009a18:	bc3c      	pop	{r2, r3, r4, r5}
10009a1a:	4690      	mov	r8, r2
10009a1c:	4699      	mov	r9, r3
10009a1e:	46a2      	mov	sl, r4
10009a20:	46ab      	mov	fp, r5
10009a22:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009a24:	100096bd 	.word	0x100096bd
10009a28:	1000ac69 	.word	0x1000ac69
10009a2c:	100093d1 	.word	0x100093d1
10009a30:	100131ed 	.word	0x100131ed
10009a34:	10013301 	.word	0x10013301
10009a38:	ffffc000 	.word	0xffffc000
10009a3c:	100142b5 	.word	0x100142b5
10009a40:	10013979 	.word	0x10013979
10009a44:	43030000 	.word	0x43030000
10009a48:	10013d0d 	.word	0x10013d0d

10009a4c <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
10009a4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009a4e:	465f      	mov	r7, fp
10009a50:	4656      	mov	r6, sl
10009a52:	464d      	mov	r5, r9
10009a54:	4644      	mov	r4, r8
10009a56:	b4f0      	push	{r4, r5, r6, r7}
10009a58:	b083      	sub	sp, #12
10009a5a:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
10009a5c:	4c36      	ldr	r4, [pc, #216]	; (10009b38 <sms_imu_comp_initialize+0xec>)
10009a5e:	2301      	movs	r3, #1
10009a60:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
10009a62:	3301      	adds	r3, #1
10009a64:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
10009a66:	4b35      	ldr	r3, [pc, #212]	; (10009b3c <sms_imu_comp_initialize+0xf0>)
10009a68:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[1] = 120.0;
10009a6a:	4b35      	ldr	r3, [pc, #212]	; (10009b40 <sms_imu_comp_initialize+0xf4>)
10009a6c:	63e3      	str	r3, [r4, #60]	; 0x3c
	imu_device.config.mag_bias[2] = 125.0;
10009a6e:	4b35      	ldr	r3, [pc, #212]	; (10009b44 <sms_imu_comp_initialize+0xf8>)
10009a70:	6423      	str	r3, [r4, #64]	; 0x40
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009a72:	2200      	movs	r2, #0
10009a74:	210a      	movs	r1, #10
10009a76:	200c      	movs	r0, #12
10009a78:	4e33      	ldr	r6, [pc, #204]	; (10009b48 <sms_imu_comp_initialize+0xfc>)
10009a7a:	47b0      	blx	r6
	delay_ms(10);
10009a7c:	200a      	movs	r0, #10
10009a7e:	4b33      	ldr	r3, [pc, #204]	; (10009b4c <sms_imu_comp_initialize+0x100>)
10009a80:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009a82:	220f      	movs	r2, #15
10009a84:	210a      	movs	r1, #10
10009a86:	200c      	movs	r0, #12
10009a88:	47b0      	blx	r6
	delay_ms(10);
10009a8a:	200a      	movs	r0, #10
10009a8c:	4b2f      	ldr	r3, [pc, #188]	; (10009b4c <sms_imu_comp_initialize+0x100>)
10009a8e:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009a90:	af01      	add	r7, sp, #4
10009a92:	003b      	movs	r3, r7
10009a94:	2203      	movs	r2, #3
10009a96:	2110      	movs	r1, #16
10009a98:	200c      	movs	r0, #12
10009a9a:	4d2d      	ldr	r5, [pc, #180]	; (10009b50 <sms_imu_comp_initialize+0x104>)
10009a9c:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
10009a9e:	7838      	ldrb	r0, [r7, #0]
10009aa0:	3880      	subs	r0, #128	; 0x80
10009aa2:	4b2c      	ldr	r3, [pc, #176]	; (10009b54 <sms_imu_comp_initialize+0x108>)
10009aa4:	469b      	mov	fp, r3
10009aa6:	4798      	blx	r3
10009aa8:	4b2b      	ldr	r3, [pc, #172]	; (10009b58 <sms_imu_comp_initialize+0x10c>)
10009aaa:	469a      	mov	sl, r3
10009aac:	4798      	blx	r3
10009aae:	2200      	movs	r2, #0
10009ab0:	4b2a      	ldr	r3, [pc, #168]	; (10009b5c <sms_imu_comp_initialize+0x110>)
10009ab2:	4d2b      	ldr	r5, [pc, #172]	; (10009b60 <sms_imu_comp_initialize+0x114>)
10009ab4:	47a8      	blx	r5
10009ab6:	2200      	movs	r2, #0
10009ab8:	4b2a      	ldr	r3, [pc, #168]	; (10009b64 <sms_imu_comp_initialize+0x118>)
10009aba:	4d2b      	ldr	r5, [pc, #172]	; (10009b68 <sms_imu_comp_initialize+0x11c>)
10009abc:	47a8      	blx	r5
10009abe:	4b2b      	ldr	r3, [pc, #172]	; (10009b6c <sms_imu_comp_initialize+0x120>)
10009ac0:	4699      	mov	r9, r3
10009ac2:	4798      	blx	r3
10009ac4:	4643      	mov	r3, r8
10009ac6:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009ac8:	7878      	ldrb	r0, [r7, #1]
10009aca:	3880      	subs	r0, #128	; 0x80
10009acc:	47d8      	blx	fp
10009ace:	47d0      	blx	sl
10009ad0:	2200      	movs	r2, #0
10009ad2:	4b22      	ldr	r3, [pc, #136]	; (10009b5c <sms_imu_comp_initialize+0x110>)
10009ad4:	4d22      	ldr	r5, [pc, #136]	; (10009b60 <sms_imu_comp_initialize+0x114>)
10009ad6:	47a8      	blx	r5
10009ad8:	2200      	movs	r2, #0
10009ada:	4b22      	ldr	r3, [pc, #136]	; (10009b64 <sms_imu_comp_initialize+0x118>)
10009adc:	4d22      	ldr	r5, [pc, #136]	; (10009b68 <sms_imu_comp_initialize+0x11c>)
10009ade:	47a8      	blx	r5
10009ae0:	47c8      	blx	r9
10009ae2:	4643      	mov	r3, r8
10009ae4:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009ae6:	78b8      	ldrb	r0, [r7, #2]
10009ae8:	3880      	subs	r0, #128	; 0x80
10009aea:	47d8      	blx	fp
10009aec:	47d0      	blx	sl
10009aee:	2200      	movs	r2, #0
10009af0:	4b1a      	ldr	r3, [pc, #104]	; (10009b5c <sms_imu_comp_initialize+0x110>)
10009af2:	4d1b      	ldr	r5, [pc, #108]	; (10009b60 <sms_imu_comp_initialize+0x114>)
10009af4:	47a8      	blx	r5
10009af6:	2200      	movs	r2, #0
10009af8:	4b1a      	ldr	r3, [pc, #104]	; (10009b64 <sms_imu_comp_initialize+0x118>)
10009afa:	4d1b      	ldr	r5, [pc, #108]	; (10009b68 <sms_imu_comp_initialize+0x11c>)
10009afc:	47a8      	blx	r5
10009afe:	47c8      	blx	r9
10009b00:	4643      	mov	r3, r8
10009b02:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009b04:	2200      	movs	r2, #0
10009b06:	210a      	movs	r1, #10
10009b08:	200c      	movs	r0, #12
10009b0a:	47b0      	blx	r6
	delay_ms(10);
10009b0c:	200a      	movs	r0, #10
10009b0e:	4b0f      	ldr	r3, [pc, #60]	; (10009b4c <sms_imu_comp_initialize+0x100>)
10009b10:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009b12:	78a2      	ldrb	r2, [r4, #2]
10009b14:	0112      	lsls	r2, r2, #4
10009b16:	78e3      	ldrb	r3, [r4, #3]
10009b18:	431a      	orrs	r2, r3
10009b1a:	b2d2      	uxtb	r2, r2
10009b1c:	210a      	movs	r1, #10
10009b1e:	200c      	movs	r0, #12
10009b20:	47b0      	blx	r6
	delay_ms(10);
10009b22:	200a      	movs	r0, #10
10009b24:	4b09      	ldr	r3, [pc, #36]	; (10009b4c <sms_imu_comp_initialize+0x100>)
10009b26:	4798      	blx	r3
}
10009b28:	b003      	add	sp, #12
10009b2a:	bc3c      	pop	{r2, r3, r4, r5}
10009b2c:	4690      	mov	r8, r2
10009b2e:	4699      	mov	r9, r3
10009b30:	46a2      	mov	sl, r4
10009b32:	46ab      	mov	fp, r5
10009b34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b36:	46c0      	nop			; (mov r8, r8)
10009b38:	1001a2e8 	.word	0x1001a2e8
10009b3c:	43eb0000 	.word	0x43eb0000
10009b40:	42f00000 	.word	0x42f00000
10009b44:	42fa0000 	.word	0x42fa0000
10009b48:	100096bd 	.word	0x100096bd
10009b4c:	1000ac69 	.word	0x1000ac69
10009b50:	100093d1 	.word	0x100093d1
10009b54:	100142b5 	.word	0x100142b5
10009b58:	10015f9d 	.word	0x10015f9d
10009b5c:	3f700000 	.word	0x3f700000
10009b60:	10015261 	.word	0x10015261
10009b64:	3ff00000 	.word	0x3ff00000
10009b68:	100143c1 	.word	0x100143c1
10009b6c:	10016045 	.word	0x10016045

10009b70 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009b70:	b530      	push	{r4, r5, lr}
10009b72:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009b74:	ac01      	add	r4, sp, #4
10009b76:	0023      	movs	r3, r4
10009b78:	2201      	movs	r2, #1
10009b7a:	4d02      	ldr	r5, [pc, #8]	; (10009b84 <readByte+0x14>)
10009b7c:	47a8      	blx	r5
	return data[0];
10009b7e:	7820      	ldrb	r0, [r4, #0]
}
10009b80:	b003      	add	sp, #12
10009b82:	bd30      	pop	{r4, r5, pc}
10009b84:	100093d1 	.word	0x100093d1

10009b88 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009b88:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
10009b8a:	2100      	movs	r1, #0
10009b8c:	200c      	movs	r0, #12
10009b8e:	4b03      	ldr	r3, [pc, #12]	; (10009b9c <sms_imu_comp_check+0x14>)
10009b90:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009b92:	3848      	subs	r0, #72	; 0x48
10009b94:	1e43      	subs	r3, r0, #1
10009b96:	4198      	sbcs	r0, r3
10009b98:	4240      	negs	r0, r0
}
10009b9a:	bd10      	pop	{r4, pc}
10009b9c:	10009b71 	.word	0x10009b71

10009ba0 <sms_imu_mpu_initialize>:
		imu_device.config.self_test[(2*i)+1] = 0.0;
	}
}
/* MPU */
void sms_imu_mpu_initialize(void)
{
10009ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	DBG_LOG_DEV("Initializing MPU");
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009ba2:	2200      	movs	r2, #0
10009ba4:	216b      	movs	r1, #107	; 0x6b
10009ba6:	2069      	movs	r0, #105	; 0x69
10009ba8:	4c21      	ldr	r4, [pc, #132]	; (10009c30 <sms_imu_mpu_initialize+0x90>)
10009baa:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
10009bac:	2064      	movs	r0, #100	; 0x64
10009bae:	4d21      	ldr	r5, [pc, #132]	; (10009c34 <sms_imu_mpu_initialize+0x94>)
10009bb0:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009bb2:	2201      	movs	r2, #1
10009bb4:	216b      	movs	r1, #107	; 0x6b
10009bb6:	2069      	movs	r0, #105	; 0x69
10009bb8:	47a0      	blx	r4
	delay_ms(200);
10009bba:	20c8      	movs	r0, #200	; 0xc8
10009bbc:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	 //writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
10009bbe:	2205      	movs	r2, #5
10009bc0:	211a      	movs	r1, #26
10009bc2:	2069      	movs	r0, #105	; 0x69
10009bc4:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
10009bc6:	2263      	movs	r2, #99	; 0x63
10009bc8:	2119      	movs	r1, #25
10009bca:	2069      	movs	r0, #105	; 0x69
10009bcc:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
10009bce:	211b      	movs	r1, #27
10009bd0:	2069      	movs	r0, #105	; 0x69
10009bd2:	4e19      	ldr	r6, [pc, #100]	; (10009c38 <sms_imu_mpu_initialize+0x98>)
10009bd4:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
10009bd6:	4f19      	ldr	r7, [pc, #100]	; (10009c3c <sms_imu_mpu_initialize+0x9c>)
10009bd8:	787a      	ldrb	r2, [r7, #1]
10009bda:	00d2      	lsls	r2, r2, #3
10009bdc:	231a      	movs	r3, #26
10009bde:	4398      	bics	r0, r3
10009be0:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009be2:	b2d2      	uxtb	r2, r2
10009be4:	211b      	movs	r1, #27
10009be6:	2069      	movs	r0, #105	; 0x69
10009be8:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
10009bea:	211c      	movs	r1, #28
10009bec:	2069      	movs	r0, #105	; 0x69
10009bee:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009bf0:	783a      	ldrb	r2, [r7, #0]
10009bf2:	00d2      	lsls	r2, r2, #3
10009bf4:	2318      	movs	r3, #24
10009bf6:	4398      	bics	r0, r3
10009bf8:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009bfa:	b2d2      	uxtb	r2, r2
10009bfc:	211c      	movs	r1, #28
10009bfe:	2069      	movs	r0, #105	; 0x69
10009c00:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009c02:	211d      	movs	r1, #29
10009c04:	2069      	movs	r0, #105	; 0x69
10009c06:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009c08:	23f0      	movs	r3, #240	; 0xf0
10009c0a:	0002      	movs	r2, r0
10009c0c:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
10009c0e:	3bed      	subs	r3, #237	; 0xed
10009c10:	431a      	orrs	r2, r3
10009c12:	211d      	movs	r1, #29
10009c14:	2069      	movs	r0, #105	; 0x69
10009c16:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009c18:	2212      	movs	r2, #18
10009c1a:	2137      	movs	r1, #55	; 0x37
10009c1c:	2069      	movs	r0, #105	; 0x69
10009c1e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
10009c20:	2201      	movs	r2, #1
10009c22:	2138      	movs	r1, #56	; 0x38
10009c24:	2069      	movs	r0, #105	; 0x69
10009c26:	47a0      	blx	r4
	delay_ms(100);
10009c28:	2064      	movs	r0, #100	; 0x64
10009c2a:	47a8      	blx	r5
}
10009c2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009c2e:	46c0      	nop			; (mov r8, r8)
10009c30:	100096bd 	.word	0x100096bd
10009c34:	1000ac69 	.word	0x1000ac69
10009c38:	10009b71 	.word	0x10009b71
10009c3c:	1001a2e8 	.word	0x1001a2e8

10009c40 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
10009c40:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c42:	465f      	mov	r7, fp
10009c44:	4656      	mov	r6, sl
10009c46:	464d      	mov	r5, r9
10009c48:	4644      	mov	r4, r8
10009c4a:	b4f0      	push	{r4, r5, r6, r7}
10009c4c:	b09d      	sub	sp, #116	; 0x74
10009c4e:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009c50:	2206      	movs	r2, #6
10009c52:	2100      	movs	r1, #0
10009c54:	a81a      	add	r0, sp, #104	; 0x68
10009c56:	4ce0      	ldr	r4, [pc, #896]	; (10009fd8 <sms_imu_selftest+0x398>)
10009c58:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
10009c5a:	220c      	movs	r2, #12
10009c5c:	2100      	movs	r1, #0
10009c5e:	a817      	add	r0, sp, #92	; 0x5c
10009c60:	47a0      	blx	r4
10009c62:	220c      	movs	r2, #12
10009c64:	2100      	movs	r1, #0
10009c66:	a814      	add	r0, sp, #80	; 0x50
10009c68:	47a0      	blx	r4
10009c6a:	220c      	movs	r2, #12
10009c6c:	2100      	movs	r1, #0
10009c6e:	a811      	add	r0, sp, #68	; 0x44
10009c70:	47a0      	blx	r4
10009c72:	220c      	movs	r2, #12
10009c74:	2100      	movs	r1, #0
10009c76:	a80e      	add	r0, sp, #56	; 0x38
10009c78:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
10009c7a:	2200      	movs	r2, #0
10009c7c:	2119      	movs	r1, #25
10009c7e:	2069      	movs	r0, #105	; 0x69
10009c80:	4cd6      	ldr	r4, [pc, #856]	; (10009fdc <sms_imu_selftest+0x39c>)
10009c82:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009c84:	2202      	movs	r2, #2
10009c86:	211a      	movs	r1, #26
10009c88:	2069      	movs	r0, #105	; 0x69
10009c8a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
10009c8c:	2200      	movs	r2, #0
10009c8e:	211b      	movs	r1, #27
10009c90:	2069      	movs	r0, #105	; 0x69
10009c92:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009c94:	2202      	movs	r2, #2
10009c96:	211d      	movs	r1, #29
10009c98:	2069      	movs	r0, #105	; 0x69
10009c9a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
10009c9c:	2200      	movs	r2, #0
10009c9e:	211c      	movs	r1, #28
10009ca0:	2069      	movs	r0, #105	; 0x69
10009ca2:	47a0      	blx	r4
10009ca4:	2596      	movs	r5, #150	; 0x96
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009ca6:	ac1a      	add	r4, sp, #104	; 0x68
10009ca8:	4ecd      	ldr	r6, [pc, #820]	; (10009fe0 <sms_imu_selftest+0x3a0>)
10009caa:	0023      	movs	r3, r4
10009cac:	2206      	movs	r2, #6
10009cae:	213b      	movs	r1, #59	; 0x3b
10009cb0:	2069      	movs	r0, #105	; 0x69
10009cb2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 150; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009cb4:	7823      	ldrb	r3, [r4, #0]
10009cb6:	021b      	lsls	r3, r3, #8
10009cb8:	7862      	ldrb	r2, [r4, #1]
10009cba:	4313      	orrs	r3, r2
10009cbc:	b21b      	sxth	r3, r3
10009cbe:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009cc0:	4694      	mov	ip, r2
10009cc2:	4463      	add	r3, ip
10009cc4:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009cc6:	78a3      	ldrb	r3, [r4, #2]
10009cc8:	021b      	lsls	r3, r3, #8
10009cca:	78e2      	ldrb	r2, [r4, #3]
10009ccc:	4313      	orrs	r3, r2
10009cce:	b21b      	sxth	r3, r3
10009cd0:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009cd2:	9200      	str	r2, [sp, #0]
10009cd4:	4694      	mov	ip, r2
10009cd6:	4463      	add	r3, ip
10009cd8:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009cda:	7923      	ldrb	r3, [r4, #4]
10009cdc:	021b      	lsls	r3, r3, #8
10009cde:	7962      	ldrb	r2, [r4, #5]
10009ce0:	4313      	orrs	r3, r2
10009ce2:	b21b      	sxth	r3, r3
10009ce4:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009ce6:	9200      	str	r2, [sp, #0]
10009ce8:	4694      	mov	ip, r2
10009cea:	4463      	add	r3, ip
10009cec:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009cee:	0023      	movs	r3, r4
10009cf0:	2206      	movs	r2, #6
10009cf2:	2143      	movs	r1, #67	; 0x43
10009cf4:	2069      	movs	r0, #105	; 0x69
10009cf6:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009cf8:	7823      	ldrb	r3, [r4, #0]
10009cfa:	021b      	lsls	r3, r3, #8
10009cfc:	7862      	ldrb	r2, [r4, #1]
10009cfe:	4313      	orrs	r3, r2
10009d00:	b21b      	sxth	r3, r3
10009d02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009d04:	4694      	mov	ip, r2
10009d06:	4463      	add	r3, ip
10009d08:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009d0a:	78a3      	ldrb	r3, [r4, #2]
10009d0c:	021b      	lsls	r3, r3, #8
10009d0e:	78e2      	ldrb	r2, [r4, #3]
10009d10:	4313      	orrs	r3, r2
10009d12:	b21b      	sxth	r3, r3
10009d14:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009d16:	9200      	str	r2, [sp, #0]
10009d18:	4694      	mov	ip, r2
10009d1a:	4463      	add	r3, ip
10009d1c:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
10009d1e:	7923      	ldrb	r3, [r4, #4]
10009d20:	021b      	lsls	r3, r3, #8
10009d22:	7962      	ldrb	r2, [r4, #5]
10009d24:	4313      	orrs	r3, r2
10009d26:	b21b      	sxth	r3, r3
10009d28:	9a19      	ldr	r2, [sp, #100]	; 0x64
10009d2a:	9200      	str	r2, [sp, #0]
10009d2c:	4694      	mov	ip, r2
10009d2e:	4463      	add	r3, ip
10009d30:	9319      	str	r3, [sp, #100]	; 0x64
10009d32:	3d01      	subs	r5, #1
10009d34:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 150; i++) { // get average current values of gyro and accelerometer
10009d36:	2d00      	cmp	r5, #0
10009d38:	d1b7      	bne.n	10009caa <sms_imu_selftest+0x6a>
10009d3a:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
10009d3c:	4ea9      	ldr	r6, [pc, #676]	; (10009fe4 <sms_imu_selftest+0x3a4>)
10009d3e:	ad14      	add	r5, sp, #80	; 0x50
10009d40:	21c8      	movs	r1, #200	; 0xc8
10009d42:	5960      	ldr	r0, [r4, r5]
10009d44:	47b0      	blx	r6
10009d46:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
10009d48:	ad17      	add	r5, sp, #92	; 0x5c
10009d4a:	21c8      	movs	r1, #200	; 0xc8
10009d4c:	5960      	ldr	r0, [r4, r5]
10009d4e:	47b0      	blx	r6
10009d50:	5160      	str	r0, [r4, r5]
10009d52:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009d54:	2c0c      	cmp	r4, #12
10009d56:	d1f2      	bne.n	10009d3e <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
10009d58:	22e0      	movs	r2, #224	; 0xe0
10009d5a:	211c      	movs	r1, #28
10009d5c:	2069      	movs	r0, #105	; 0x69
10009d5e:	4c9f      	ldr	r4, [pc, #636]	; (10009fdc <sms_imu_selftest+0x39c>)
10009d60:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009d62:	22e0      	movs	r2, #224	; 0xe0
10009d64:	211c      	movs	r1, #28
10009d66:	2069      	movs	r0, #105	; 0x69
10009d68:	47a0      	blx	r4
	delay_ms(50);  // Delay a while to let the device stabilize
10009d6a:	2032      	movs	r0, #50	; 0x32
10009d6c:	4b9e      	ldr	r3, [pc, #632]	; (10009fe8 <sms_imu_selftest+0x3a8>)
10009d6e:	4798      	blx	r3
10009d70:	2596      	movs	r5, #150	; 0x96
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009d72:	ac1a      	add	r4, sp, #104	; 0x68
10009d74:	4e9a      	ldr	r6, [pc, #616]	; (10009fe0 <sms_imu_selftest+0x3a0>)
10009d76:	0023      	movs	r3, r4
10009d78:	2206      	movs	r2, #6
10009d7a:	213b      	movs	r1, #59	; 0x3b
10009d7c:	2069      	movs	r0, #105	; 0x69
10009d7e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(50);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 150; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009d80:	7823      	ldrb	r3, [r4, #0]
10009d82:	021b      	lsls	r3, r3, #8
10009d84:	7862      	ldrb	r2, [r4, #1]
10009d86:	4313      	orrs	r3, r2
10009d88:	b21b      	sxth	r3, r3
10009d8a:	9a11      	ldr	r2, [sp, #68]	; 0x44
10009d8c:	4694      	mov	ip, r2
10009d8e:	4463      	add	r3, ip
10009d90:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009d92:	78a3      	ldrb	r3, [r4, #2]
10009d94:	021b      	lsls	r3, r3, #8
10009d96:	78e2      	ldrb	r2, [r4, #3]
10009d98:	4313      	orrs	r3, r2
10009d9a:	b21b      	sxth	r3, r3
10009d9c:	9a12      	ldr	r2, [sp, #72]	; 0x48
10009d9e:	9200      	str	r2, [sp, #0]
10009da0:	4694      	mov	ip, r2
10009da2:	4463      	add	r3, ip
10009da4:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009da6:	7923      	ldrb	r3, [r4, #4]
10009da8:	021b      	lsls	r3, r3, #8
10009daa:	7962      	ldrb	r2, [r4, #5]
10009dac:	4313      	orrs	r3, r2
10009dae:	b21b      	sxth	r3, r3
10009db0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009db2:	9200      	str	r2, [sp, #0]
10009db4:	4694      	mov	ip, r2
10009db6:	4463      	add	r3, ip
10009db8:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009dba:	0023      	movs	r3, r4
10009dbc:	2206      	movs	r2, #6
10009dbe:	2143      	movs	r1, #67	; 0x43
10009dc0:	2069      	movs	r0, #105	; 0x69
10009dc2:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009dc4:	7823      	ldrb	r3, [r4, #0]
10009dc6:	021b      	lsls	r3, r3, #8
10009dc8:	7862      	ldrb	r2, [r4, #1]
10009dca:	4313      	orrs	r3, r2
10009dcc:	b21b      	sxth	r3, r3
10009dce:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009dd0:	4694      	mov	ip, r2
10009dd2:	4463      	add	r3, ip
10009dd4:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009dd6:	78a3      	ldrb	r3, [r4, #2]
10009dd8:	021b      	lsls	r3, r3, #8
10009dda:	78e2      	ldrb	r2, [r4, #3]
10009ddc:	4313      	orrs	r3, r2
10009dde:	b21b      	sxth	r3, r3
10009de0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009de2:	9200      	str	r2, [sp, #0]
10009de4:	4694      	mov	ip, r2
10009de6:	4463      	add	r3, ip
10009de8:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009dea:	7923      	ldrb	r3, [r4, #4]
10009dec:	021b      	lsls	r3, r3, #8
10009dee:	7962      	ldrb	r2, [r4, #5]
10009df0:	4313      	orrs	r3, r2
10009df2:	b21b      	sxth	r3, r3
10009df4:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009df6:	9200      	str	r2, [sp, #0]
10009df8:	4694      	mov	ip, r2
10009dfa:	4463      	add	r3, ip
10009dfc:	9310      	str	r3, [sp, #64]	; 0x40
10009dfe:	3d01      	subs	r5, #1
10009e00:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(50);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 150; i++) {  // get average self-test values of gyro and accelerometer
10009e02:	2d00      	cmp	r5, #0
10009e04:	d1b7      	bne.n	10009d76 <sms_imu_selftest+0x136>
10009e06:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009e08:	4e76      	ldr	r6, [pc, #472]	; (10009fe4 <sms_imu_selftest+0x3a4>)
10009e0a:	ad11      	add	r5, sp, #68	; 0x44
10009e0c:	21c8      	movs	r1, #200	; 0xc8
10009e0e:	5960      	ldr	r0, [r4, r5]
10009e10:	47b0      	blx	r6
10009e12:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009e14:	ad0e      	add	r5, sp, #56	; 0x38
10009e16:	21c8      	movs	r1, #200	; 0xc8
10009e18:	5960      	ldr	r0, [r4, r5]
10009e1a:	47b0      	blx	r6
10009e1c:	5160      	str	r0, [r4, r5]
10009e1e:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009e20:	2c0c      	cmp	r4, #12
10009e22:	d1f2      	bne.n	10009e0a <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009e24:	2200      	movs	r2, #0
10009e26:	211c      	movs	r1, #28
10009e28:	2069      	movs	r0, #105	; 0x69
10009e2a:	4c6c      	ldr	r4, [pc, #432]	; (10009fdc <sms_imu_selftest+0x39c>)
10009e2c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
10009e2e:	2200      	movs	r2, #0
10009e30:	211b      	movs	r1, #27
10009e32:	2069      	movs	r0, #105	; 0x69
10009e34:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009e36:	2019      	movs	r0, #25
10009e38:	4b6b      	ldr	r3, [pc, #428]	; (10009fe8 <sms_imu_selftest+0x3a8>)
10009e3a:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
10009e3c:	210d      	movs	r1, #13
10009e3e:	2069      	movs	r0, #105	; 0x69
10009e40:	4d6a      	ldr	r5, [pc, #424]	; (10009fec <sms_imu_selftest+0x3ac>)
10009e42:	47a8      	blx	r5
10009e44:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
10009e46:	210e      	movs	r1, #14
10009e48:	2069      	movs	r0, #105	; 0x69
10009e4a:	47a8      	blx	r5
10009e4c:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
10009e4e:	210f      	movs	r1, #15
10009e50:	2069      	movs	r0, #105	; 0x69
10009e52:	47a8      	blx	r5
10009e54:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
10009e56:	2100      	movs	r1, #0
10009e58:	2069      	movs	r0, #105	; 0x69
10009e5a:	47a8      	blx	r5
10009e5c:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
10009e5e:	2101      	movs	r1, #1
10009e60:	2069      	movs	r0, #105	; 0x69
10009e62:	47a8      	blx	r5
10009e64:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
10009e66:	2102      	movs	r1, #2
10009e68:	2069      	movs	r0, #105	; 0x69
10009e6a:	47a8      	blx	r5
10009e6c:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
10009e6e:	4b60      	ldr	r3, [pc, #384]	; (10009ff0 <sms_imu_selftest+0x3b0>)
10009e70:	469a      	mov	sl, r3
10009e72:	0020      	movs	r0, r4
10009e74:	4798      	blx	r3
10009e76:	4b5f      	ldr	r3, [pc, #380]	; (10009ff4 <sms_imu_selftest+0x3b4>)
10009e78:	4699      	mov	r9, r3
10009e7a:	4798      	blx	r3
10009e7c:	4e5e      	ldr	r6, [pc, #376]	; (10009ff8 <sms_imu_selftest+0x3b8>)
10009e7e:	2200      	movs	r2, #0
10009e80:	4b5e      	ldr	r3, [pc, #376]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009e82:	47b0      	blx	r6
10009e84:	0002      	movs	r2, r0
10009e86:	000b      	movs	r3, r1
10009e88:	485d      	ldr	r0, [pc, #372]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009e8a:	495e      	ldr	r1, [pc, #376]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009e8c:	4f5e      	ldr	r7, [pc, #376]	; (1000a008 <sms_imu_selftest+0x3c8>)
10009e8e:	47b8      	blx	r7
10009e90:	4d5e      	ldr	r5, [pc, #376]	; (1000a00c <sms_imu_selftest+0x3cc>)
10009e92:	2200      	movs	r2, #0
10009e94:	4b5e      	ldr	r3, [pc, #376]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009e96:	47a8      	blx	r5
10009e98:	4c5e      	ldr	r4, [pc, #376]	; (1000a014 <sms_imu_selftest+0x3d4>)
10009e9a:	47a0      	blx	r4
10009e9c:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009e9e:	9800      	ldr	r0, [sp, #0]
10009ea0:	47d0      	blx	sl
10009ea2:	47c8      	blx	r9
10009ea4:	2200      	movs	r2, #0
10009ea6:	4b55      	ldr	r3, [pc, #340]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009ea8:	47b0      	blx	r6
10009eaa:	0002      	movs	r2, r0
10009eac:	000b      	movs	r3, r1
10009eae:	4854      	ldr	r0, [pc, #336]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009eb0:	4954      	ldr	r1, [pc, #336]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009eb2:	47b8      	blx	r7
10009eb4:	2200      	movs	r2, #0
10009eb6:	4b56      	ldr	r3, [pc, #344]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009eb8:	47a8      	blx	r5
10009eba:	47a0      	blx	r4
10009ebc:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009ebe:	9804      	ldr	r0, [sp, #16]
10009ec0:	47d0      	blx	sl
10009ec2:	47c8      	blx	r9
10009ec4:	2200      	movs	r2, #0
10009ec6:	4b4d      	ldr	r3, [pc, #308]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009ec8:	47b0      	blx	r6
10009eca:	0002      	movs	r2, r0
10009ecc:	000b      	movs	r3, r1
10009ece:	484c      	ldr	r0, [pc, #304]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009ed0:	494c      	ldr	r1, [pc, #304]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009ed2:	47b8      	blx	r7
10009ed4:	2200      	movs	r2, #0
10009ed6:	4b4e      	ldr	r3, [pc, #312]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009ed8:	47a8      	blx	r5
10009eda:	47a0      	blx	r4
10009edc:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009ede:	9805      	ldr	r0, [sp, #20]
10009ee0:	47d0      	blx	sl
10009ee2:	47c8      	blx	r9
10009ee4:	2200      	movs	r2, #0
10009ee6:	4b45      	ldr	r3, [pc, #276]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009ee8:	47b0      	blx	r6
10009eea:	0002      	movs	r2, r0
10009eec:	000b      	movs	r3, r1
10009eee:	4844      	ldr	r0, [pc, #272]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009ef0:	4944      	ldr	r1, [pc, #272]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009ef2:	47b8      	blx	r7
10009ef4:	2200      	movs	r2, #0
10009ef6:	4b46      	ldr	r3, [pc, #280]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009ef8:	47a8      	blx	r5
10009efa:	47a0      	blx	r4
10009efc:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009efe:	9806      	ldr	r0, [sp, #24]
10009f00:	47d0      	blx	sl
10009f02:	47c8      	blx	r9
10009f04:	2200      	movs	r2, #0
10009f06:	4b3d      	ldr	r3, [pc, #244]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009f08:	47b0      	blx	r6
10009f0a:	0002      	movs	r2, r0
10009f0c:	000b      	movs	r3, r1
10009f0e:	483c      	ldr	r0, [pc, #240]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009f10:	493c      	ldr	r1, [pc, #240]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009f12:	47b8      	blx	r7
10009f14:	2200      	movs	r2, #0
10009f16:	4b3e      	ldr	r3, [pc, #248]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009f18:	47a8      	blx	r5
10009f1a:	47a0      	blx	r4
10009f1c:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009f1e:	9807      	ldr	r0, [sp, #28]
10009f20:	47d0      	blx	sl
10009f22:	47c8      	blx	r9
10009f24:	2200      	movs	r2, #0
10009f26:	4b35      	ldr	r3, [pc, #212]	; (10009ffc <sms_imu_selftest+0x3bc>)
10009f28:	47b0      	blx	r6
10009f2a:	0002      	movs	r2, r0
10009f2c:	000b      	movs	r3, r1
10009f2e:	4834      	ldr	r0, [pc, #208]	; (1000a000 <sms_imu_selftest+0x3c0>)
10009f30:	4934      	ldr	r1, [pc, #208]	; (1000a004 <sms_imu_selftest+0x3c4>)
10009f32:	47b8      	blx	r7
10009f34:	2200      	movs	r2, #0
10009f36:	4b36      	ldr	r3, [pc, #216]	; (1000a010 <sms_imu_selftest+0x3d0>)
10009f38:	47a8      	blx	r5
10009f3a:	47a0      	blx	r4
10009f3c:	900d      	str	r0, [sp, #52]	; 0x34
10009f3e:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009f40:	4b35      	ldr	r3, [pc, #212]	; (1000a018 <sms_imu_selftest+0x3d8>)
10009f42:	4699      	mov	r9, r3
10009f44:	4d2b      	ldr	r5, [pc, #172]	; (10009ff4 <sms_imu_selftest+0x3b4>)
10009f46:	4b31      	ldr	r3, [pc, #196]	; (1000a00c <sms_imu_selftest+0x3cc>)
10009f48:	4698      	mov	r8, r3
10009f4a:	4b34      	ldr	r3, [pc, #208]	; (1000a01c <sms_imu_selftest+0x3dc>)
10009f4c:	469a      	mov	sl, r3
10009f4e:	4f2a      	ldr	r7, [pc, #168]	; (10009ff8 <sms_imu_selftest+0x3b8>)
10009f50:	4e30      	ldr	r6, [pc, #192]	; (1000a014 <sms_imu_selftest+0x3d4>)
10009f52:	ab11      	add	r3, sp, #68	; 0x44
10009f54:	58e3      	ldr	r3, [r4, r3]
10009f56:	aa14      	add	r2, sp, #80	; 0x50
10009f58:	58a0      	ldr	r0, [r4, r2]
10009f5a:	1a18      	subs	r0, r3, r0
10009f5c:	47c8      	blx	r9
10009f5e:	47a8      	blx	r5
10009f60:	2200      	movs	r2, #0
10009f62:	4b2f      	ldr	r3, [pc, #188]	; (1000a020 <sms_imu_selftest+0x3e0>)
10009f64:	47c0      	blx	r8
10009f66:	9000      	str	r0, [sp, #0]
10009f68:	9101      	str	r1, [sp, #4]
10009f6a:	ab08      	add	r3, sp, #32
10009f6c:	58e0      	ldr	r0, [r4, r3]
10009f6e:	47a8      	blx	r5
10009f70:	0002      	movs	r2, r0
10009f72:	000b      	movs	r3, r1
10009f74:	9800      	ldr	r0, [sp, #0]
10009f76:	9901      	ldr	r1, [sp, #4]
10009f78:	47d0      	blx	sl
10009f7a:	2200      	movs	r2, #0
10009f7c:	4b28      	ldr	r3, [pc, #160]	; (1000a020 <sms_imu_selftest+0x3e0>)
10009f7e:	47b8      	blx	r7
10009f80:	47b0      	blx	r6
10009f82:	9b03      	ldr	r3, [sp, #12]
10009f84:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009f86:	469b      	mov	fp, r3
10009f88:	44a3      	add	fp, r4
10009f8a:	ab0e      	add	r3, sp, #56	; 0x38
10009f8c:	58e3      	ldr	r3, [r4, r3]
10009f8e:	aa17      	add	r2, sp, #92	; 0x5c
10009f90:	58a0      	ldr	r0, [r4, r2]
10009f92:	1a18      	subs	r0, r3, r0
10009f94:	47c8      	blx	r9
10009f96:	47a8      	blx	r5
10009f98:	2200      	movs	r2, #0
10009f9a:	4b21      	ldr	r3, [pc, #132]	; (1000a020 <sms_imu_selftest+0x3e0>)
10009f9c:	47c0      	blx	r8
10009f9e:	9000      	str	r0, [sp, #0]
10009fa0:	9101      	str	r1, [sp, #4]
10009fa2:	0023      	movs	r3, r4
10009fa4:	aa08      	add	r2, sp, #32
10009fa6:	4694      	mov	ip, r2
10009fa8:	4463      	add	r3, ip
10009faa:	68d8      	ldr	r0, [r3, #12]
10009fac:	47a8      	blx	r5
10009fae:	0002      	movs	r2, r0
10009fb0:	000b      	movs	r3, r1
10009fb2:	9800      	ldr	r0, [sp, #0]
10009fb4:	9901      	ldr	r1, [sp, #4]
10009fb6:	47d0      	blx	sl
10009fb8:	2200      	movs	r2, #0
10009fba:	4b19      	ldr	r3, [pc, #100]	; (1000a020 <sms_imu_selftest+0x3e0>)
10009fbc:	47b8      	blx	r7
10009fbe:	47b0      	blx	r6
10009fc0:	465b      	mov	r3, fp
10009fc2:	60d8      	str	r0, [r3, #12]
10009fc4:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
10009fc6:	2c0c      	cmp	r4, #12
10009fc8:	d1c3      	bne.n	10009f52 <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
10009fca:	b01d      	add	sp, #116	; 0x74
10009fcc:	bc3c      	pop	{r2, r3, r4, r5}
10009fce:	4690      	mov	r8, r2
10009fd0:	4699      	mov	r9, r3
10009fd2:	46a2      	mov	sl, r4
10009fd4:	46ab      	mov	fp, r5
10009fd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009fd8:	10016235 	.word	0x10016235
10009fdc:	100096bd 	.word	0x100096bd
10009fe0:	100093d1 	.word	0x100093d1
10009fe4:	10013301 	.word	0x10013301
10009fe8:	1000ac69 	.word	0x1000ac69
10009fec:	10009b71 	.word	0x10009b71
10009ff0:	10014345 	.word	0x10014345
10009ff4:	10015f9d 	.word	0x10015f9d
10009ff8:	10015755 	.word	0x10015755
10009ffc:	3ff00000 	.word	0x3ff00000
1000a000:	c28f5c29 	.word	0xc28f5c29
1000a004:	3ff028f5 	.word	0x3ff028f5
1000a008:	10011e49 	.word	0x10011e49
1000a00c:	10015261 	.word	0x10015261
1000a010:	40a47800 	.word	0x40a47800
1000a014:	10016045 	.word	0x10016045
1000a018:	100142b5 	.word	0x100142b5
1000a01c:	10014a19 	.word	0x10014a19
1000a020:	40590000 	.word	0x40590000

1000a024 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
1000a024:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
1000a026:	2175      	movs	r1, #117	; 0x75
1000a028:	2069      	movs	r0, #105	; 0x69
1000a02a:	4b06      	ldr	r3, [pc, #24]	; (1000a044 <sms_imu_mpu_check+0x20>)
1000a02c:	4798      	blx	r3
	if(c == 0x71) {
1000a02e:	2871      	cmp	r0, #113	; 0x71
1000a030:	d104      	bne.n	1000a03c <sms_imu_mpu_check+0x18>
		DBG_LOG_DEV("[sms_mpu_check]\t\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
1000a032:	4805      	ldr	r0, [pc, #20]	; (1000a048 <sms_imu_mpu_check+0x24>)
1000a034:	4b05      	ldr	r3, [pc, #20]	; (1000a04c <sms_imu_mpu_check+0x28>)
1000a036:	4798      	blx	r3
		DBG_LOG_DEV("[sms_mpu_check]\t\t\tMPU-9250 self-test passed");
		retVal = 0;
1000a038:	2000      	movs	r0, #0
1000a03a:	e001      	b.n	1000a040 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
1000a03c:	2001      	movs	r0, #1
1000a03e:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		DBG_LOG_DEV("[sms_mpu_check]\t\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
1000a040:	bd10      	pop	{r4, pc}
1000a042:	46c0      	nop			; (mov r8, r8)
1000a044:	10009b71 	.word	0x10009b71
1000a048:	1001a2f0 	.word	0x1001a2f0
1000a04c:	10009c41 	.word	0x10009c41

1000a050 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_IMU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
1000a050:	b510      	push	{r4, lr}
	/* MPU */
	int status = sms_imu_mpu_check();
1000a052:	4b0d      	ldr	r3, [pc, #52]	; (1000a088 <sms_imu_startup+0x38>)
1000a054:	4798      	blx	r3
	if(status) return -1;
1000a056:	2800      	cmp	r0, #0
1000a058:	d10f      	bne.n	1000a07a <sms_imu_startup+0x2a>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
1000a05a:	490c      	ldr	r1, [pc, #48]	; (1000a08c <sms_imu_startup+0x3c>)
1000a05c:	0008      	movs	r0, r1
1000a05e:	380c      	subs	r0, #12
1000a060:	4b0b      	ldr	r3, [pc, #44]	; (1000a090 <sms_imu_startup+0x40>)
1000a062:	4798      	blx	r3
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
1000a064:	4b0b      	ldr	r3, [pc, #44]	; (1000a094 <sms_imu_startup+0x44>)
1000a066:	4798      	blx	r3
	
	/* Compass */
	status = sms_imu_comp_check();
1000a068:	4b0b      	ldr	r3, [pc, #44]	; (1000a098 <sms_imu_startup+0x48>)
1000a06a:	4798      	blx	r3
	if(status) return -1;
1000a06c:	2800      	cmp	r0, #0
1000a06e:	d107      	bne.n	1000a080 <sms_imu_startup+0x30>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
1000a070:	480a      	ldr	r0, [pc, #40]	; (1000a09c <sms_imu_startup+0x4c>)
1000a072:	4b0b      	ldr	r3, [pc, #44]	; (1000a0a0 <sms_imu_startup+0x50>)
1000a074:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
1000a076:	2000      	movs	r0, #0
1000a078:	e004      	b.n	1000a084 <sms_imu_startup+0x34>
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	int status = sms_imu_mpu_check();
	if(status) return -1;
1000a07a:	2001      	movs	r0, #1
1000a07c:	4240      	negs	r0, r0
1000a07e:	e001      	b.n	1000a084 <sms_imu_startup+0x34>
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	status = sms_imu_comp_check();
	if(status) return -1;
1000a080:	2001      	movs	r0, #1
1000a082:	4240      	negs	r0, r0
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
1000a084:	bd10      	pop	{r4, pc}
1000a086:	46c0      	nop			; (mov r8, r8)
1000a088:	1000a025 	.word	0x1000a025
1000a08c:	1001a314 	.word	0x1001a314
1000a090:	100096d5 	.word	0x100096d5
1000a094:	10009ba1 	.word	0x10009ba1
1000a098:	10009b89 	.word	0x10009b89
1000a09c:	1001a32c 	.word	0x1001a32c
1000a0a0:	10009a4d 	.word	0x10009a4d

1000a0a4 <read_comp_data>:
	destination[1] = ((int16_t)rawData[2] << 8) | rawData[3] ;
	destination[2] = ((int16_t)rawData[4] << 8) | rawData[5] ;
}
/* Read compass data */
void read_comp_data(int16_t *destination)
{
1000a0a4:	b530      	push	{r4, r5, lr}
1000a0a6:	b083      	sub	sp, #12
1000a0a8:	0004      	movs	r4, r0
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
1000a0aa:	2102      	movs	r1, #2
1000a0ac:	200c      	movs	r0, #12
1000a0ae:	4b12      	ldr	r3, [pc, #72]	; (1000a0f8 <read_comp_data+0x54>)
1000a0b0:	4798      	blx	r3
1000a0b2:	07c3      	lsls	r3, r0, #31
1000a0b4:	d51e      	bpl.n	1000a0f4 <read_comp_data+0x50>
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000a0b6:	466b      	mov	r3, sp
1000a0b8:	2207      	movs	r2, #7
1000a0ba:	2103      	movs	r1, #3
1000a0bc:	200c      	movs	r0, #12
1000a0be:	4d0f      	ldr	r5, [pc, #60]	; (1000a0fc <read_comp_data+0x58>)
1000a0c0:	47a8      	blx	r5
{
	uint8_t rawData[7];  // x/y/z gyro register data, ST2 register stored here, must read ST2 at end of data acquisition
	if(readByte(AK8963_ADDRESS, AK8963_ST1) & 0x01) { // wait for magnetometer data ready bit to be set
		readBytes(AK8963_ADDRESS, AK8963_XOUT_L, 7, &rawData[0]);  // Read the six raw data and ST2 registers sequentially into data array
		uint8_t c = rawData[6]; // End data read by reading ST2 register
		if(!(c & 0x08)) { // Check if magnetic sensor overflow set, if not then report data
1000a0c2:	466b      	mov	r3, sp
1000a0c4:	799b      	ldrb	r3, [r3, #6]
1000a0c6:	071b      	lsls	r3, r3, #28
1000a0c8:	d414      	bmi.n	1000a0f4 <read_comp_data+0x50>
			destination[0] = ((int16_t)rawData[1] << 8) | rawData[0] ;  // Turn the MSB and LSB into a signed 16-bit value
1000a0ca:	466b      	mov	r3, sp
1000a0cc:	785b      	ldrb	r3, [r3, #1]
1000a0ce:	021b      	lsls	r3, r3, #8
1000a0d0:	466a      	mov	r2, sp
1000a0d2:	7812      	ldrb	r2, [r2, #0]
1000a0d4:	4313      	orrs	r3, r2
1000a0d6:	8023      	strh	r3, [r4, #0]
			destination[1] = ((int16_t)rawData[3] << 8) | rawData[2] ;  // Data stored as little Endian
1000a0d8:	466b      	mov	r3, sp
1000a0da:	78db      	ldrb	r3, [r3, #3]
1000a0dc:	021b      	lsls	r3, r3, #8
1000a0de:	466a      	mov	r2, sp
1000a0e0:	7892      	ldrb	r2, [r2, #2]
1000a0e2:	4313      	orrs	r3, r2
1000a0e4:	8063      	strh	r3, [r4, #2]
			destination[2] = ((int16_t)rawData[5] << 8) | rawData[4] ;
1000a0e6:	466b      	mov	r3, sp
1000a0e8:	795b      	ldrb	r3, [r3, #5]
1000a0ea:	021b      	lsls	r3, r3, #8
1000a0ec:	466a      	mov	r2, sp
1000a0ee:	7912      	ldrb	r2, [r2, #4]
1000a0f0:	4313      	orrs	r3, r2
1000a0f2:	80a3      	strh	r3, [r4, #4]
		}
	}
}
1000a0f4:	b003      	add	sp, #12
1000a0f6:	bd30      	pop	{r4, r5, pc}
1000a0f8:	10009b71 	.word	0x10009b71
1000a0fc:	100093d1 	.word	0x100093d1

1000a100 <sms_imu_poll_data>:


/* Data reading functions... */
/* Poll */
int sms_imu_poll_data(void)
{
1000a100:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a102:	465f      	mov	r7, fp
1000a104:	4656      	mov	r6, sl
1000a106:	464d      	mov	r5, r9
1000a108:	4644      	mov	r4, r8
1000a10a:	b4f0      	push	{r4, r5, r6, r7}
1000a10c:	b08f      	sub	sp, #60	; 0x3c
	read_accel_data(imu_device.output.raw_accel);
1000a10e:	4e5c      	ldr	r6, [pc, #368]	; (1000a280 <sms_imu_poll_data+0x180>)
1000a110:	0030      	movs	r0, r6
1000a112:	4b5c      	ldr	r3, [pc, #368]	; (1000a284 <sms_imu_poll_data+0x184>)
1000a114:	4798      	blx	r3
	float a_res = get_Ares(imu_device.config.a_scale);
1000a116:	3e5a      	subs	r6, #90	; 0x5a
1000a118:	7830      	ldrb	r0, [r6, #0]
1000a11a:	4b5b      	ldr	r3, [pc, #364]	; (1000a288 <sms_imu_poll_data+0x188>)
1000a11c:	4798      	blx	r3
1000a11e:	1c05      	adds	r5, r0, #0
	float ax = ((float)imu_device.output.raw_accel[0]) * a_res;
1000a120:	235a      	movs	r3, #90	; 0x5a
1000a122:	5ef0      	ldrsh	r0, [r6, r3]
1000a124:	4c59      	ldr	r4, [pc, #356]	; (1000a28c <sms_imu_poll_data+0x18c>)
1000a126:	47a0      	blx	r4
1000a128:	4f59      	ldr	r7, [pc, #356]	; (1000a290 <sms_imu_poll_data+0x190>)
1000a12a:	1c29      	adds	r1, r5, #0
1000a12c:	47b8      	blx	r7
1000a12e:	9008      	str	r0, [sp, #32]
	float ay = ((float)imu_device.output.raw_accel[1]) * a_res;
1000a130:	235c      	movs	r3, #92	; 0x5c
1000a132:	5ef0      	ldrsh	r0, [r6, r3]
1000a134:	47a0      	blx	r4
1000a136:	1c29      	adds	r1, r5, #0
1000a138:	47b8      	blx	r7
1000a13a:	9009      	str	r0, [sp, #36]	; 0x24
	float az = ((float)imu_device.output.raw_accel[2]) * a_res;
1000a13c:	235e      	movs	r3, #94	; 0x5e
1000a13e:	5ef0      	ldrsh	r0, [r6, r3]
1000a140:	47a0      	blx	r4
1000a142:	1c29      	adds	r1, r5, #0
1000a144:	47b8      	blx	r7
1000a146:	900a      	str	r0, [sp, #40]	; 0x28
	
	read_gyro_data(imu_device.output.raw_gyro);
1000a148:	0030      	movs	r0, r6
1000a14a:	3054      	adds	r0, #84	; 0x54
1000a14c:	4b51      	ldr	r3, [pc, #324]	; (1000a294 <sms_imu_poll_data+0x194>)
1000a14e:	4798      	blx	r3
	float g_res = get_Gres(imu_device.config.g_scale);
1000a150:	7870      	ldrb	r0, [r6, #1]
1000a152:	4b51      	ldr	r3, [pc, #324]	; (1000a298 <sms_imu_poll_data+0x198>)
1000a154:	4798      	blx	r3
1000a156:	1c05      	adds	r5, r0, #0
	float gx = ((float)imu_device.output.raw_gyro[0]) * g_res;
1000a158:	2354      	movs	r3, #84	; 0x54
1000a15a:	5ef0      	ldrsh	r0, [r6, r3]
1000a15c:	47a0      	blx	r4
1000a15e:	1c29      	adds	r1, r5, #0
1000a160:	47b8      	blx	r7
1000a162:	900b      	str	r0, [sp, #44]	; 0x2c
	float gy = ((float)imu_device.output.raw_gyro[1]) * g_res;
1000a164:	2356      	movs	r3, #86	; 0x56
1000a166:	5ef0      	ldrsh	r0, [r6, r3]
1000a168:	47a0      	blx	r4
1000a16a:	1c29      	adds	r1, r5, #0
1000a16c:	47b8      	blx	r7
1000a16e:	900c      	str	r0, [sp, #48]	; 0x30
	float gz = ((float)imu_device.output.raw_gyro[2]) * g_res;
1000a170:	2358      	movs	r3, #88	; 0x58
1000a172:	5ef0      	ldrsh	r0, [r6, r3]
1000a174:	47a0      	blx	r4
1000a176:	1c29      	adds	r1, r5, #0
1000a178:	47b8      	blx	r7
1000a17a:	900d      	str	r0, [sp, #52]	; 0x34
	
	read_comp_data(imu_device.output.raw_compass);
1000a17c:	0030      	movs	r0, r6
1000a17e:	3060      	adds	r0, #96	; 0x60
1000a180:	4b46      	ldr	r3, [pc, #280]	; (1000a29c <sms_imu_poll_data+0x19c>)
1000a182:	4798      	blx	r3
	float m_res = get_Mres(imu_device.config.m_scale);
1000a184:	78b0      	ldrb	r0, [r6, #2]
1000a186:	4b46      	ldr	r3, [pc, #280]	; (1000a2a0 <sms_imu_poll_data+0x1a0>)
1000a188:	4798      	blx	r3
1000a18a:	1c05      	adds	r5, r0, #0
	float mx = ( ((float)imu_device.output.raw_compass[0]) * m_res * imu_device.config.mag_calibration[0] ) - imu_device.config.mag_bias[0];
1000a18c:	2360      	movs	r3, #96	; 0x60
1000a18e:	5ef0      	ldrsh	r0, [r6, r3]
1000a190:	47a0      	blx	r4
1000a192:	9507      	str	r5, [sp, #28]
1000a194:	1c29      	adds	r1, r5, #0
1000a196:	47b8      	blx	r7
1000a198:	6c71      	ldr	r1, [r6, #68]	; 0x44
1000a19a:	47b8      	blx	r7
1000a19c:	4d41      	ldr	r5, [pc, #260]	; (1000a2a4 <sms_imu_poll_data+0x1a4>)
1000a19e:	6bb1      	ldr	r1, [r6, #56]	; 0x38
1000a1a0:	47a8      	blx	r5
1000a1a2:	4683      	mov	fp, r0
	float my = ( ((float)imu_device.output.raw_compass[1]) * m_res * imu_device.config.mag_calibration[1] ) - imu_device.config.mag_bias[1];
1000a1a4:	2362      	movs	r3, #98	; 0x62
1000a1a6:	5ef0      	ldrsh	r0, [r6, r3]
1000a1a8:	47a0      	blx	r4
1000a1aa:	9907      	ldr	r1, [sp, #28]
1000a1ac:	47b8      	blx	r7
1000a1ae:	6cb1      	ldr	r1, [r6, #72]	; 0x48
1000a1b0:	47b8      	blx	r7
1000a1b2:	6bf1      	ldr	r1, [r6, #60]	; 0x3c
1000a1b4:	47a8      	blx	r5
1000a1b6:	4681      	mov	r9, r0
	float mz = ( ((float)imu_device.output.raw_compass[2]) * m_res * imu_device.config.mag_calibration[2] ) - imu_device.config.mag_bias[2];
1000a1b8:	2364      	movs	r3, #100	; 0x64
1000a1ba:	5ef0      	ldrsh	r0, [r6, r3]
1000a1bc:	47a0      	blx	r4
1000a1be:	9907      	ldr	r1, [sp, #28]
1000a1c0:	47b8      	blx	r7
1000a1c2:	6cf1      	ldr	r1, [r6, #76]	; 0x4c
1000a1c4:	47b8      	blx	r7
1000a1c6:	6c31      	ldr	r1, [r6, #64]	; 0x40
1000a1c8:	47a8      	blx	r5
1000a1ca:	4682      	mov	sl, r0
	
	static uint32_t last_time = 0;
	const uint32_t cnt_max = 0xffffffff/SMS_DUALTIMER_LOAD_US;
	uint32_t now = (uint32_t)(dualtimer_get_value(timer1_instance.id)/SMS_DUALTIMER_LOAD_US);
1000a1cc:	4b36      	ldr	r3, [pc, #216]	; (1000a2a8 <sms_imu_poll_data+0x1a8>)
1000a1ce:	7818      	ldrb	r0, [r3, #0]
1000a1d0:	4b36      	ldr	r3, [pc, #216]	; (1000a2ac <sms_imu_poll_data+0x1ac>)
1000a1d2:	4798      	blx	r3
1000a1d4:	211a      	movs	r1, #26
1000a1d6:	4b36      	ldr	r3, [pc, #216]	; (1000a2b0 <sms_imu_poll_data+0x1b0>)
1000a1d8:	4798      	blx	r3
	uint32_t deltati = ((now < last_time) ? (last_time - now) : (cnt_max - now + last_time));
1000a1da:	4b36      	ldr	r3, [pc, #216]	; (1000a2b4 <sms_imu_poll_data+0x1b4>)
1000a1dc:	681c      	ldr	r4, [r3, #0]
1000a1de:	42a0      	cmp	r0, r4
1000a1e0:	d202      	bcs.n	1000a1e8 <sms_imu_poll_data+0xe8>
1000a1e2:	1a23      	subs	r3, r4, r0
1000a1e4:	4698      	mov	r8, r3
1000a1e6:	e004      	b.n	1000a1f2 <sms_imu_poll_data+0xf2>
1000a1e8:	4b33      	ldr	r3, [pc, #204]	; (1000a2b8 <sms_imu_poll_data+0x1b8>)
1000a1ea:	469c      	mov	ip, r3
1000a1ec:	4464      	add	r4, ip
1000a1ee:	1a23      	subs	r3, r4, r0
1000a1f0:	4698      	mov	r8, r3
	last_time = now;
1000a1f2:	4b30      	ldr	r3, [pc, #192]	; (1000a2b4 <sms_imu_poll_data+0x1b4>)
1000a1f4:	6018      	str	r0, [r3, #0]
	float deltatf = (float)deltati / 1000000.0;
	mahony_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltatf);
1000a1f6:	4c31      	ldr	r4, [pc, #196]	; (1000a2bc <sms_imu_poll_data+0x1bc>)
1000a1f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
1000a1fa:	47a0      	blx	r4
1000a1fc:	4f30      	ldr	r7, [pc, #192]	; (1000a2c0 <sms_imu_poll_data+0x1c0>)
1000a1fe:	4a31      	ldr	r2, [pc, #196]	; (1000a2c4 <sms_imu_poll_data+0x1c4>)
1000a200:	4b31      	ldr	r3, [pc, #196]	; (1000a2c8 <sms_imu_poll_data+0x1c8>)
1000a202:	47b8      	blx	r7
1000a204:	4e31      	ldr	r6, [pc, #196]	; (1000a2cc <sms_imu_poll_data+0x1cc>)
1000a206:	2200      	movs	r2, #0
1000a208:	4b31      	ldr	r3, [pc, #196]	; (1000a2d0 <sms_imu_poll_data+0x1d0>)
1000a20a:	47b0      	blx	r6
1000a20c:	4d31      	ldr	r5, [pc, #196]	; (1000a2d4 <sms_imu_poll_data+0x1d4>)
1000a20e:	47a8      	blx	r5
1000a210:	9007      	str	r0, [sp, #28]
1000a212:	4640      	mov	r0, r8
1000a214:	4b30      	ldr	r3, [pc, #192]	; (1000a2d8 <sms_imu_poll_data+0x1d8>)
1000a216:	4798      	blx	r3
1000a218:	4930      	ldr	r1, [pc, #192]	; (1000a2dc <sms_imu_poll_data+0x1dc>)
1000a21a:	4b31      	ldr	r3, [pc, #196]	; (1000a2e0 <sms_imu_poll_data+0x1e0>)
1000a21c:	4798      	blx	r3
1000a21e:	9005      	str	r0, [sp, #20]
1000a220:	4652      	mov	r2, sl
1000a222:	9204      	str	r2, [sp, #16]
1000a224:	465a      	mov	r2, fp
1000a226:	9203      	str	r2, [sp, #12]
1000a228:	464a      	mov	r2, r9
1000a22a:	9202      	str	r2, [sp, #8]
1000a22c:	980d      	ldr	r0, [sp, #52]	; 0x34
1000a22e:	47a0      	blx	r4
1000a230:	4a24      	ldr	r2, [pc, #144]	; (1000a2c4 <sms_imu_poll_data+0x1c4>)
1000a232:	4b25      	ldr	r3, [pc, #148]	; (1000a2c8 <sms_imu_poll_data+0x1c8>)
1000a234:	47b8      	blx	r7
1000a236:	2200      	movs	r2, #0
1000a238:	4b25      	ldr	r3, [pc, #148]	; (1000a2d0 <sms_imu_poll_data+0x1d0>)
1000a23a:	47b0      	blx	r6
1000a23c:	47a8      	blx	r5
1000a23e:	9001      	str	r0, [sp, #4]
1000a240:	980c      	ldr	r0, [sp, #48]	; 0x30
1000a242:	47a0      	blx	r4
1000a244:	4a1f      	ldr	r2, [pc, #124]	; (1000a2c4 <sms_imu_poll_data+0x1c4>)
1000a246:	4b20      	ldr	r3, [pc, #128]	; (1000a2c8 <sms_imu_poll_data+0x1c8>)
1000a248:	47b8      	blx	r7
1000a24a:	2200      	movs	r2, #0
1000a24c:	4b20      	ldr	r3, [pc, #128]	; (1000a2d0 <sms_imu_poll_data+0x1d0>)
1000a24e:	47b0      	blx	r6
1000a250:	47a8      	blx	r5
1000a252:	9000      	str	r0, [sp, #0]
1000a254:	9b07      	ldr	r3, [sp, #28]
1000a256:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1000a258:	9909      	ldr	r1, [sp, #36]	; 0x24
1000a25a:	9808      	ldr	r0, [sp, #32]
1000a25c:	4c21      	ldr	r4, [pc, #132]	; (1000a2e4 <sms_imu_poll_data+0x1e4>)
1000a25e:	47a0      	blx	r4
	//madgwick_quaternion_update(ax, ay, az, gx*PI/180.0, gy*PI/180.0, gz*PI/180.0, my, mx, mz, deltatf);
	
	if(imu_device.config.ahrs) {
1000a260:	2350      	movs	r3, #80	; 0x50
1000a262:	4a21      	ldr	r2, [pc, #132]	; (1000a2e8 <sms_imu_poll_data+0x1e8>)
1000a264:	5cd3      	ldrb	r3, [r2, r3]
1000a266:	2b00      	cmp	r3, #0
1000a268:	d002      	beq.n	1000a270 <sms_imu_poll_data+0x170>
		ahrs_calculation(imu_device.output.q);
1000a26a:	4820      	ldr	r0, [pc, #128]	; (1000a2ec <sms_imu_poll_data+0x1ec>)
1000a26c:	4b20      	ldr	r3, [pc, #128]	; (1000a2f0 <sms_imu_poll_data+0x1f0>)
1000a26e:	4798      	blx	r3
	}
	return 0;
}
1000a270:	2000      	movs	r0, #0
1000a272:	b00f      	add	sp, #60	; 0x3c
1000a274:	bc3c      	pop	{r2, r3, r4, r5}
1000a276:	4690      	mov	r8, r2
1000a278:	4699      	mov	r9, r3
1000a27a:	46a2      	mov	sl, r4
1000a27c:	46ab      	mov	fp, r5
1000a27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a280:	1001a342 	.word	0x1001a342
1000a284:	100095ad 	.word	0x100095ad
1000a288:	1000968d 	.word	0x1000968d
1000a28c:	100142b5 	.word	0x100142b5
1000a290:	10013d0d 	.word	0x10013d0d
1000a294:	100095f1 	.word	0x100095f1
1000a298:	10009655 	.word	0x10009655
1000a29c:	1000a0a5 	.word	0x1000a0a5
1000a2a0:	10009635 	.word	0x10009635
1000a2a4:	10013f35 	.word	0x10013f35
1000a2a8:	1001a224 	.word	0x1001a224
1000a2ac:	1000b045 	.word	0x1000b045
1000a2b0:	100131ed 	.word	0x100131ed
1000a2b4:	100186f0 	.word	0x100186f0
1000a2b8:	09d89d89 	.word	0x09d89d89
1000a2bc:	10015f9d 	.word	0x10015f9d
1000a2c0:	10015261 	.word	0x10015261
1000a2c4:	54442d28 	.word	0x54442d28
1000a2c8:	400921fb 	.word	0x400921fb
1000a2cc:	10014a19 	.word	0x10014a19
1000a2d0:	40668000 	.word	0x40668000
1000a2d4:	10016045 	.word	0x10016045
1000a2d8:	10014345 	.word	0x10014345
1000a2dc:	49742400 	.word	0x49742400
1000a2e0:	10013979 	.word	0x10013979
1000a2e4:	1000843d 	.word	0x1000843d
1000a2e8:	1001a2e8 	.word	0x1001a2e8
1000a2ec:	1001a350 	.word	0x1001a350
1000a2f0:	1000891d 	.word	0x1000891d

1000a2f4 <sms_led_switch_on>:
	sms_led_switch_off(SMS_LED_0);
}


void sms_led_switch_on(enum sms_leds led)
{
1000a2f4:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(led, LED_ON);
1000a2f6:	2100      	movs	r1, #0
1000a2f8:	4b01      	ldr	r3, [pc, #4]	; (1000a300 <sms_led_switch_on+0xc>)
1000a2fa:	4798      	blx	r3
}
1000a2fc:	bd10      	pop	{r4, pc}
1000a2fe:	46c0      	nop			; (mov r8, r8)
1000a300:	1000b5b9 	.word	0x1000b5b9

1000a304 <sms_led_switch_off>:
void sms_led_switch_off(enum sms_leds led)
{
1000a304:	b510      	push	{r4, lr}
	gpio_pin_set_output_level(led, LED_OFF);
1000a306:	2101      	movs	r1, #1
1000a308:	4b01      	ldr	r3, [pc, #4]	; (1000a310 <sms_led_switch_off+0xc>)
1000a30a:	4798      	blx	r3
}
1000a30c:	bd10      	pop	{r4, pc}
1000a30e:	46c0      	nop			; (mov r8, r8)
1000a310:	1000b5b9 	.word	0x1000b5b9

1000a314 <sms_led_gpio_init>:

#include "sms_led.h"
#include "sms_timer.h"

void sms_led_gpio_init(void)
{
1000a314:	b510      	push	{r4, lr}
1000a316:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* LED0 @ GPIO_LP_GPIO_22 */
	gpio_get_config_defaults(&config_gpio_pin);
1000a318:	ac01      	add	r4, sp, #4
1000a31a:	0020      	movs	r0, r4
1000a31c:	4b06      	ldr	r3, [pc, #24]	; (1000a338 <sms_led_gpio_init+0x24>)
1000a31e:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
1000a320:	2301      	movs	r3, #1
1000a322:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(SMS_LED_0, &config_gpio_pin) != STATUS_OK) {
1000a324:	0021      	movs	r1, r4
1000a326:	2016      	movs	r0, #22
1000a328:	4b04      	ldr	r3, [pc, #16]	; (1000a33c <sms_led_gpio_init+0x28>)
1000a32a:	4798      	blx	r3
		DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
	}
	sms_led_switch_off(SMS_LED_0);
1000a32c:	2016      	movs	r0, #22
1000a32e:	4b04      	ldr	r3, [pc, #16]	; (1000a340 <sms_led_gpio_init+0x2c>)
1000a330:	4798      	blx	r3
}
1000a332:	b002      	add	sp, #8
1000a334:	bd10      	pop	{r4, pc}
1000a336:	46c0      	nop			; (mov r8, r8)
1000a338:	1000b351 	.word	0x1000b351
1000a33c:	1000b361 	.word	0x1000b361
1000a340:	1000a305 	.word	0x1000a305

1000a344 <sms_led_toggle>:
void sms_led_switch_off(enum sms_leds led)
{
	gpio_pin_set_output_level(led, LED_OFF);
}
void sms_led_toggle(enum sms_leds led)
{
1000a344:	b510      	push	{r4, lr}
1000a346:	0004      	movs	r4, r0
	if(state == LED_ON) sms_led_switch_off(led);
	else sms_led_switch_on(led);
}
bool sms_led_get_state(enum sms_leds led)
{
	return gpio_pin_get_output_level(led);
1000a348:	4b05      	ldr	r3, [pc, #20]	; (1000a360 <sms_led_toggle+0x1c>)
1000a34a:	4798      	blx	r3
	gpio_pin_set_output_level(led, LED_OFF);
}
void sms_led_toggle(enum sms_leds led)
{
	bool state = sms_led_get_state(led);
	if(state == LED_ON) sms_led_switch_off(led);
1000a34c:	2800      	cmp	r0, #0
1000a34e:	d103      	bne.n	1000a358 <sms_led_toggle+0x14>
1000a350:	0020      	movs	r0, r4
1000a352:	4b04      	ldr	r3, [pc, #16]	; (1000a364 <sms_led_toggle+0x20>)
1000a354:	4798      	blx	r3
1000a356:	e002      	b.n	1000a35e <sms_led_toggle+0x1a>
	else sms_led_switch_on(led);
1000a358:	0020      	movs	r0, r4
1000a35a:	4b03      	ldr	r3, [pc, #12]	; (1000a368 <sms_led_toggle+0x24>)
1000a35c:	4798      	blx	r3
}
1000a35e:	bd10      	pop	{r4, pc}
1000a360:	1000b569 	.word	0x1000b569
1000a364:	1000a305 	.word	0x1000a305
1000a368:	1000a2f5 	.word	0x1000a2f5

1000a36c <sms_led_blink_start>:
{
	return gpio_pin_get_output_level(led);
}

void sms_led_blink_start(enum sms_leds led, enum sms_timer_modes t_mode)
{
1000a36c:	b570      	push	{r4, r5, r6, lr}
1000a36e:	000c      	movs	r4, r1
	sms_led_switch_on(led);
1000a370:	4b0a      	ldr	r3, [pc, #40]	; (1000a39c <sms_led_blink_start+0x30>)
1000a372:	4798      	blx	r3
	uint32_t delay = 0;
	timer2_instance.current_mode = t_mode;
1000a374:	4b0a      	ldr	r3, [pc, #40]	; (1000a3a0 <sms_led_blink_start+0x34>)
1000a376:	705c      	strb	r4, [r3, #1]
}

void sms_led_blink_start(enum sms_leds led, enum sms_timer_modes t_mode)
{
	sms_led_switch_on(led);
	uint32_t delay = 0;
1000a378:	2500      	movs	r5, #0
	timer2_instance.current_mode = t_mode;
	switch(t_mode) {
1000a37a:	2c01      	cmp	r4, #1
1000a37c:	d102      	bne.n	1000a384 <sms_led_blink_start+0x18>
		case TIMER_MODE_ADVERTISING:
		delay = SMS_BLINK_ADV_MS;
1000a37e:	25fa      	movs	r5, #250	; 0xfa
1000a380:	00ad      	lsls	r5, r5, #2
1000a382:	e7ff      	b.n	1000a384 <sms_led_blink_start+0x18>
		
		default:
		break;
	}

	sms_dualtimer_register_callback(timer2_instance.id, sms_dualtimer2_cb);
1000a384:	4c06      	ldr	r4, [pc, #24]	; (1000a3a0 <sms_led_blink_start+0x34>)
1000a386:	7820      	ldrb	r0, [r4, #0]
1000a388:	4906      	ldr	r1, [pc, #24]	; (1000a3a4 <sms_led_blink_start+0x38>)
1000a38a:	4b07      	ldr	r3, [pc, #28]	; (1000a3a8 <sms_led_blink_start+0x3c>)
1000a38c:	4798      	blx	r3
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
1000a38e:	7822      	ldrb	r2, [r4, #0]
1000a390:	0029      	movs	r1, r5
1000a392:	2001      	movs	r0, #1
1000a394:	4b05      	ldr	r3, [pc, #20]	; (1000a3ac <sms_led_blink_start+0x40>)
1000a396:	4798      	blx	r3
}
1000a398:	bd70      	pop	{r4, r5, r6, pc}
1000a39a:	46c0      	nop			; (mov r8, r8)
1000a39c:	1000a2f5 	.word	0x1000a2f5
1000a3a0:	1001a2d0 	.word	0x1001a2d0
1000a3a4:	1000ac1d 	.word	0x1000ac1d
1000a3a8:	1000ab99 	.word	0x1000ab99
1000a3ac:	1000abc9 	.word	0x1000abc9

1000a3b0 <sms_led_blink_stop>:

void sms_led_blink_stop(enum sms_leds led)
{
1000a3b0:	b510      	push	{r4, lr}
	/* Switch LED off and unregister timer2 callback
	* to use it later as a blocking delay */
	sms_led_switch_off(led);
1000a3b2:	4b04      	ldr	r3, [pc, #16]	; (1000a3c4 <sms_led_blink_stop+0x14>)
1000a3b4:	4798      	blx	r3
	timer2_instance.current_mode = TIMER_MODE_NONE;
1000a3b6:	4b04      	ldr	r3, [pc, #16]	; (1000a3c8 <sms_led_blink_stop+0x18>)
1000a3b8:	2200      	movs	r2, #0
1000a3ba:	705a      	strb	r2, [r3, #1]
	sms_dualtimer_unregister_callback(timer2_instance.id);
1000a3bc:	7818      	ldrb	r0, [r3, #0]
1000a3be:	4b03      	ldr	r3, [pc, #12]	; (1000a3cc <sms_led_blink_stop+0x1c>)
1000a3c0:	4798      	blx	r3
1000a3c2:	bd10      	pop	{r4, pc}
1000a3c4:	1000a305 	.word	0x1000a305
1000a3c8:	1001a2d0 	.word	0x1001a2d0
1000a3cc:	1000abb1 	.word	0x1000abb1

1000a3d0 <sms_pressure_init_variables>:
#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	//pressure_device.hal.current_state = MS58_STATE_NONE;
	pressure_device.state = PRESSURE_STATE_OFF;
1000a3d0:	4b08      	ldr	r3, [pc, #32]	; (1000a3f4 <sms_pressure_init_variables+0x24>)
1000a3d2:	2200      	movs	r2, #0
1000a3d4:	212b      	movs	r1, #43	; 0x2b
1000a3d6:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.rts = false;
1000a3d8:	3901      	subs	r1, #1
1000a3da:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.enabled = false;
1000a3dc:	3902      	subs	r1, #2
1000a3de:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.new_value = false;
1000a3e0:	3101      	adds	r1, #1
1000a3e2:	545a      	strb	r2, [r3, r1]
	pressure_device.config.init_ok = false;
1000a3e4:	701a      	strb	r2, [r3, #0]
	pressure_device.config.osr = 0xff;
1000a3e6:	31d6      	adds	r1, #214	; 0xd6
1000a3e8:	7059      	strb	r1, [r3, #1]
	pressure_device.output.complete = false;
1000a3ea:	771a      	strb	r2, [r3, #28]
	pressure_device.output.pressure = 0;
1000a3ec:	621a      	str	r2, [r3, #32]
	pressure_device.output.temperature = 0;
1000a3ee:	625a      	str	r2, [r3, #36]	; 0x24
}
1000a3f0:	4770      	bx	lr
1000a3f2:	46c0      	nop			; (mov r8, r8)
1000a3f4:	1001a238 	.word	0x1001a238

1000a3f8 <sms_pressure_ms58_reset>:
	
	return STATUS_OK;
}

enum status_code sms_pressure_ms58_reset(void)
{
1000a3f8:	b510      	push	{r4, lr}
1000a3fa:	b082      	sub	sp, #8
	enum status_code status;
    spi_wdata[0] = MS58_RESET;
1000a3fc:	4a08      	ldr	r2, [pc, #32]	; (1000a420 <sms_pressure_ms58_reset+0x28>)
1000a3fe:	231e      	movs	r3, #30
1000a400:	7013      	strb	r3, [r2, #0]
    if((status = sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1)) != STATUS_OK) return status;
1000a402:	3b1d      	subs	r3, #29
1000a404:	9300      	str	r3, [sp, #0]
1000a406:	4b07      	ldr	r3, [pc, #28]	; (1000a424 <sms_pressure_ms58_reset+0x2c>)
1000a408:	4907      	ldr	r1, [pc, #28]	; (1000a428 <sms_pressure_ms58_reset+0x30>)
1000a40a:	4808      	ldr	r0, [pc, #32]	; (1000a42c <sms_pressure_ms58_reset+0x34>)
1000a40c:	4c08      	ldr	r4, [pc, #32]	; (1000a430 <sms_pressure_ms58_reset+0x38>)
1000a40e:	47a0      	blx	r4
1000a410:	1e04      	subs	r4, r0, #0
1000a412:	d102      	bne.n	1000a41a <sms_pressure_ms58_reset+0x22>
	
	delay_ms(SMS_PRESSURE_RESET_MS);
1000a414:	200a      	movs	r0, #10
1000a416:	4b07      	ldr	r3, [pc, #28]	; (1000a434 <sms_pressure_ms58_reset+0x3c>)
1000a418:	4798      	blx	r3
	//delay_ms(10);
	DBG_LOG_CONT_DEV(" done");
	return STATUS_OK;
}
1000a41a:	0020      	movs	r0, r4
1000a41c:	b002      	add	sp, #8
1000a41e:	bd10      	pop	{r4, pc}
1000a420:	1001a228 	.word	0x1001a228
1000a424:	1001a210 	.word	0x1001a210
1000a428:	1001a2d4 	.word	0x1001a2d4
1000a42c:	1001a2e0 	.word	0x1001a2e0
1000a430:	1000aa5d 	.word	0x1000aa5d
1000a434:	1000ac69 	.word	0x1000ac69

1000a438 <sms_pressure_ms58_read_prom>:

int sms_pressure_ms58_read_prom(void)
{
1000a438:	b510      	push	{r4, lr}
1000a43a:	b082      	sub	sp, #8
    DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
1000a43c:	4a59      	ldr	r2, [pc, #356]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a43e:	23a2      	movs	r3, #162	; 0xa2
1000a440:	7013      	strb	r3, [r2, #0]
    spi_wdata[1] = 0x00;
1000a442:	2300      	movs	r3, #0
1000a444:	7053      	strb	r3, [r2, #1]
    spi_wdata[2] = 0x00;
1000a446:	7093      	strb	r3, [r2, #2]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a448:	3303      	adds	r3, #3
1000a44a:	9300      	str	r3, [sp, #0]
1000a44c:	4b56      	ldr	r3, [pc, #344]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a44e:	4957      	ldr	r1, [pc, #348]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a450:	4857      	ldr	r0, [pc, #348]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a452:	4c58      	ldr	r4, [pc, #352]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a454:	47a0      	blx	r4
1000a456:	2800      	cmp	r0, #0
1000a458:	d000      	beq.n	1000a45c <sms_pressure_ms58_read_prom+0x24>
1000a45a:	e086      	b.n	1000a56a <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a45c:	4b52      	ldr	r3, [pc, #328]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a45e:	785a      	ldrb	r2, [r3, #1]
1000a460:	0212      	lsls	r2, r2, #8
1000a462:	7899      	ldrb	r1, [r3, #2]
1000a464:	430a      	orrs	r2, r1
1000a466:	4954      	ldr	r1, [pc, #336]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a468:	80ca      	strh	r2, [r1, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
1000a46a:	4a4e      	ldr	r2, [pc, #312]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a46c:	21a4      	movs	r1, #164	; 0xa4
1000a46e:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a470:	39a1      	subs	r1, #161	; 0xa1
1000a472:	9100      	str	r1, [sp, #0]
1000a474:	494d      	ldr	r1, [pc, #308]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a476:	484e      	ldr	r0, [pc, #312]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a478:	4c4e      	ldr	r4, [pc, #312]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a47a:	47a0      	blx	r4
1000a47c:	2800      	cmp	r0, #0
1000a47e:	d177      	bne.n	1000a570 <sms_pressure_ms58_read_prom+0x138>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a480:	4b49      	ldr	r3, [pc, #292]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a482:	785a      	ldrb	r2, [r3, #1]
1000a484:	0212      	lsls	r2, r2, #8
1000a486:	7899      	ldrb	r1, [r3, #2]
1000a488:	430a      	orrs	r2, r1
1000a48a:	494b      	ldr	r1, [pc, #300]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a48c:	810a      	strh	r2, [r1, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
1000a48e:	4a45      	ldr	r2, [pc, #276]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a490:	21a6      	movs	r1, #166	; 0xa6
1000a492:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a494:	39a3      	subs	r1, #163	; 0xa3
1000a496:	9100      	str	r1, [sp, #0]
1000a498:	4944      	ldr	r1, [pc, #272]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a49a:	4845      	ldr	r0, [pc, #276]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a49c:	4c45      	ldr	r4, [pc, #276]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a49e:	47a0      	blx	r4
1000a4a0:	2800      	cmp	r0, #0
1000a4a2:	d168      	bne.n	1000a576 <sms_pressure_ms58_read_prom+0x13e>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a4a4:	4b40      	ldr	r3, [pc, #256]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a4a6:	785a      	ldrb	r2, [r3, #1]
1000a4a8:	0212      	lsls	r2, r2, #8
1000a4aa:	7899      	ldrb	r1, [r3, #2]
1000a4ac:	430a      	orrs	r2, r1
1000a4ae:	4942      	ldr	r1, [pc, #264]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a4b0:	814a      	strh	r2, [r1, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
1000a4b2:	4a3c      	ldr	r2, [pc, #240]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a4b4:	21a8      	movs	r1, #168	; 0xa8
1000a4b6:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a4b8:	39a5      	subs	r1, #165	; 0xa5
1000a4ba:	9100      	str	r1, [sp, #0]
1000a4bc:	493b      	ldr	r1, [pc, #236]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a4be:	483c      	ldr	r0, [pc, #240]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a4c0:	4c3c      	ldr	r4, [pc, #240]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a4c2:	47a0      	blx	r4
1000a4c4:	2800      	cmp	r0, #0
1000a4c6:	d159      	bne.n	1000a57c <sms_pressure_ms58_read_prom+0x144>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a4c8:	4b37      	ldr	r3, [pc, #220]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a4ca:	785a      	ldrb	r2, [r3, #1]
1000a4cc:	0212      	lsls	r2, r2, #8
1000a4ce:	7899      	ldrb	r1, [r3, #2]
1000a4d0:	430a      	orrs	r2, r1
1000a4d2:	4939      	ldr	r1, [pc, #228]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a4d4:	818a      	strh	r2, [r1, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
1000a4d6:	4a33      	ldr	r2, [pc, #204]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a4d8:	21aa      	movs	r1, #170	; 0xaa
1000a4da:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a4dc:	39a7      	subs	r1, #167	; 0xa7
1000a4de:	9100      	str	r1, [sp, #0]
1000a4e0:	4932      	ldr	r1, [pc, #200]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a4e2:	4833      	ldr	r0, [pc, #204]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a4e4:	4c33      	ldr	r4, [pc, #204]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a4e6:	47a0      	blx	r4
1000a4e8:	2800      	cmp	r0, #0
1000a4ea:	d14a      	bne.n	1000a582 <sms_pressure_ms58_read_prom+0x14a>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a4ec:	4b2e      	ldr	r3, [pc, #184]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a4ee:	785a      	ldrb	r2, [r3, #1]
1000a4f0:	0212      	lsls	r2, r2, #8
1000a4f2:	7899      	ldrb	r1, [r3, #2]
1000a4f4:	430a      	orrs	r2, r1
1000a4f6:	4930      	ldr	r1, [pc, #192]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a4f8:	81ca      	strh	r2, [r1, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
1000a4fa:	4a2a      	ldr	r2, [pc, #168]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a4fc:	21ac      	movs	r1, #172	; 0xac
1000a4fe:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a500:	39a9      	subs	r1, #169	; 0xa9
1000a502:	9100      	str	r1, [sp, #0]
1000a504:	4929      	ldr	r1, [pc, #164]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a506:	482a      	ldr	r0, [pc, #168]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a508:	4c2a      	ldr	r4, [pc, #168]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a50a:	47a0      	blx	r4
1000a50c:	2800      	cmp	r0, #0
1000a50e:	d13b      	bne.n	1000a588 <sms_pressure_ms58_read_prom+0x150>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a510:	4b25      	ldr	r3, [pc, #148]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a512:	785a      	ldrb	r2, [r3, #1]
1000a514:	0212      	lsls	r2, r2, #8
1000a516:	7899      	ldrb	r1, [r3, #2]
1000a518:	430a      	orrs	r2, r1
1000a51a:	4927      	ldr	r1, [pc, #156]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a51c:	820a      	strh	r2, [r1, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
1000a51e:	4a21      	ldr	r2, [pc, #132]	; (1000a5a4 <sms_pressure_ms58_read_prom+0x16c>)
1000a520:	21ae      	movs	r1, #174	; 0xae
1000a522:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a524:	39ab      	subs	r1, #171	; 0xab
1000a526:	9100      	str	r1, [sp, #0]
1000a528:	4920      	ldr	r1, [pc, #128]	; (1000a5ac <sms_pressure_ms58_read_prom+0x174>)
1000a52a:	4821      	ldr	r0, [pc, #132]	; (1000a5b0 <sms_pressure_ms58_read_prom+0x178>)
1000a52c:	4c21      	ldr	r4, [pc, #132]	; (1000a5b4 <sms_pressure_ms58_read_prom+0x17c>)
1000a52e:	47a0      	blx	r4
1000a530:	2800      	cmp	r0, #0
1000a532:	d12c      	bne.n	1000a58e <sms_pressure_ms58_read_prom+0x156>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
1000a534:	4a20      	ldr	r2, [pc, #128]	; (1000a5b8 <sms_pressure_ms58_read_prom+0x180>)
1000a536:	491c      	ldr	r1, [pc, #112]	; (1000a5a8 <sms_pressure_ms58_read_prom+0x170>)
1000a538:	784b      	ldrb	r3, [r1, #1]
1000a53a:	021b      	lsls	r3, r3, #8
1000a53c:	7889      	ldrb	r1, [r1, #2]
1000a53e:	430b      	orrs	r3, r1
1000a540:	8253      	strh	r3, [r2, #18]

    DBG_LOG_CONT_DEV("done! Results:");
    for(uint8_t i = 1; i < MS58_PROM_VAL_MAX; i++) {
        DBG_LOG_DEV("  C%d -> %d", (i+1), pressure_device.output.prom_values[i]);
		if((pressure_device.output.prom_values[i] > MS58_PROM_VAL_ERR) || (pressure_device.output.prom_values[i] == 0)) return -1;
1000a542:	88d3      	ldrh	r3, [r2, #6]
1000a544:	3b01      	subs	r3, #1
1000a546:	b29b      	uxth	r3, r3
1000a548:	4a1c      	ldr	r2, [pc, #112]	; (1000a5bc <sms_pressure_ms58_read_prom+0x184>)
1000a54a:	4293      	cmp	r3, r2
1000a54c:	d822      	bhi.n	1000a594 <sms_pressure_ms58_read_prom+0x15c>
1000a54e:	4a1c      	ldr	r2, [pc, #112]	; (1000a5c0 <sms_pressure_ms58_read_prom+0x188>)
1000a550:	0010      	movs	r0, r2
1000a552:	300c      	adds	r0, #12
1000a554:	4919      	ldr	r1, [pc, #100]	; (1000a5bc <sms_pressure_ms58_read_prom+0x184>)
1000a556:	8813      	ldrh	r3, [r2, #0]
1000a558:	3b01      	subs	r3, #1
1000a55a:	b29b      	uxth	r3, r3
1000a55c:	428b      	cmp	r3, r1
1000a55e:	d81c      	bhi.n	1000a59a <sms_pressure_ms58_read_prom+0x162>
1000a560:	3202      	adds	r2, #2
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    DBG_LOG_CONT_DEV("done! Results:");
    for(uint8_t i = 1; i < MS58_PROM_VAL_MAX; i++) {
1000a562:	4282      	cmp	r2, r0
1000a564:	d1f7      	bne.n	1000a556 <sms_pressure_ms58_read_prom+0x11e>
        DBG_LOG_DEV("  C%d -> %d", (i+1), pressure_device.output.prom_values[i]);
		if((pressure_device.output.prom_values[i] > MS58_PROM_VAL_ERR) || (pressure_device.output.prom_values[i] == 0)) return -1;
    }

    return 0;
1000a566:	2000      	movs	r0, #0
1000a568:	e019      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
{
    DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
    spi_wdata[1] = 0x00;
    spi_wdata[2] = 0x00;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a56a:	2001      	movs	r0, #1
1000a56c:	4240      	negs	r0, r0
1000a56e:	e016      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_2;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a570:	2001      	movs	r0, #1
1000a572:	4240      	negs	r0, r0
1000a574:	e013      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_3;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a576:	2001      	movs	r0, #1
1000a578:	4240      	negs	r0, r0
1000a57a:	e010      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_4;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a57c:	2001      	movs	r0, #1
1000a57e:	4240      	negs	r0, r0
1000a580:	e00d      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_5;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a582:	2001      	movs	r0, #1
1000a584:	4240      	negs	r0, r0
1000a586:	e00a      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_6;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a588:	2001      	movs	r0, #1
1000a58a:	4240      	negs	r0, r0
1000a58c:	e007      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_7;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
1000a58e:	2001      	movs	r0, #1
1000a590:	4240      	negs	r0, r0
1000a592:	e004      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    DBG_LOG_CONT_DEV("done! Results:");
    for(uint8_t i = 1; i < MS58_PROM_VAL_MAX; i++) {
        DBG_LOG_DEV("  C%d -> %d", (i+1), pressure_device.output.prom_values[i]);
		if((pressure_device.output.prom_values[i] > MS58_PROM_VAL_ERR) || (pressure_device.output.prom_values[i] == 0)) return -1;
1000a594:	2001      	movs	r0, #1
1000a596:	4240      	negs	r0, r0
1000a598:	e001      	b.n	1000a59e <sms_pressure_ms58_read_prom+0x166>
1000a59a:	2001      	movs	r0, #1
1000a59c:	4240      	negs	r0, r0
    }

    return 0;
}
1000a59e:	b002      	add	sp, #8
1000a5a0:	bd10      	pop	{r4, pc}
1000a5a2:	46c0      	nop			; (mov r8, r8)
1000a5a4:	1001a228 	.word	0x1001a228
1000a5a8:	1001a210 	.word	0x1001a210
1000a5ac:	1001a2d4 	.word	0x1001a2d4
1000a5b0:	1001a2e0 	.word	0x1001a2e0
1000a5b4:	1000aa5d 	.word	0x1000aa5d
1000a5b8:	1001a238 	.word	0x1001a238
1000a5bc:	0000fde7 	.word	0x0000fde7
1000a5c0:	1001a240 	.word	0x1001a240

1000a5c4 <sms_pressure_init>:
	DBG_LOG_DEV("[sms_pressure_startup]\t\t\tReturning 0...");
	return 0;
}

enum status_code sms_pressure_init(void)
{
1000a5c4:	b510      	push	{r4, lr}
    /* Read the PROM values */
	DBG_LOG_DEV("Pressure init..");
    if(sms_pressure_ms58_read_prom()) return STATUS_ERR_IO;
1000a5c6:	4b03      	ldr	r3, [pc, #12]	; (1000a5d4 <sms_pressure_init+0x10>)
1000a5c8:	4798      	blx	r3
	
	return STATUS_OK;
1000a5ca:	1e43      	subs	r3, r0, #1
1000a5cc:	4198      	sbcs	r0, r3
1000a5ce:	0100      	lsls	r0, r0, #4
}
1000a5d0:	bd10      	pop	{r4, pc}
1000a5d2:	46c0      	nop			; (mov r8, r8)
1000a5d4:	1000a439 	.word	0x1000a439

1000a5d8 <sms_pressure_startup>:
    /* Disable power supply by default */
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

int sms_pressure_startup(void)
{
1000a5d8:	b510      	push	{r4, lr}
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    //sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    //pressure_device.hal.current_state = MS58_STATE_RESETTING;
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
1000a5da:	4b0e      	ldr	r3, [pc, #56]	; (1000a614 <sms_pressure_startup+0x3c>)
1000a5dc:	4798      	blx	r3
1000a5de:	2800      	cmp	r0, #0
1000a5e0:	d008      	beq.n	1000a5f4 <sms_pressure_startup+0x1c>
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
1000a5e2:	480d      	ldr	r0, [pc, #52]	; (1000a618 <sms_pressure_startup+0x40>)
1000a5e4:	4b0d      	ldr	r3, [pc, #52]	; (1000a61c <sms_pressure_startup+0x44>)
1000a5e6:	4798      	blx	r3
1000a5e8:	480d      	ldr	r0, [pc, #52]	; (1000a620 <sms_pressure_startup+0x48>)
1000a5ea:	4b0e      	ldr	r3, [pc, #56]	; (1000a624 <sms_pressure_startup+0x4c>)
1000a5ec:	4798      	blx	r3
		return -1;
1000a5ee:	2301      	movs	r3, #1
1000a5f0:	425b      	negs	r3, r3
1000a5f2:	e00c      	b.n	1000a60e <sms_pressure_startup+0x36>
	}	
    if(sms_pressure_init() != STATUS_OK) {
1000a5f4:	4b0c      	ldr	r3, [pc, #48]	; (1000a628 <sms_pressure_startup+0x50>)
1000a5f6:	4798      	blx	r3
        DBG_LOG("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        return -1;
    }
	DBG_LOG_DEV("[sms_pressure_startup]\t\t\tReturning 0...");
	return 0;
1000a5f8:	2300      	movs	r3, #0
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
		return -1;
	}	
    if(sms_pressure_init() != STATUS_OK) {
1000a5fa:	2800      	cmp	r0, #0
1000a5fc:	d007      	beq.n	1000a60e <sms_pressure_startup+0x36>
        DBG_LOG("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
1000a5fe:	4806      	ldr	r0, [pc, #24]	; (1000a618 <sms_pressure_startup+0x40>)
1000a600:	4b06      	ldr	r3, [pc, #24]	; (1000a61c <sms_pressure_startup+0x44>)
1000a602:	4798      	blx	r3
1000a604:	4809      	ldr	r0, [pc, #36]	; (1000a62c <sms_pressure_startup+0x54>)
1000a606:	4b07      	ldr	r3, [pc, #28]	; (1000a624 <sms_pressure_startup+0x4c>)
1000a608:	4798      	blx	r3
        return -1;
1000a60a:	2301      	movs	r3, #1
1000a60c:	425b      	negs	r3, r3
    }
	DBG_LOG_DEV("[sms_pressure_startup]\t\t\tReturning 0...");
	return 0;
}
1000a60e:	0018      	movs	r0, r3
1000a610:	bd10      	pop	{r4, pc}
1000a612:	46c0      	nop			; (mov r8, r8)
1000a614:	1000a3f9 	.word	0x1000a3f9
1000a618:	100174f0 	.word	0x100174f0
1000a61c:	1001649d 	.word	0x1001649d
1000a620:	1001779c 	.word	0x1001779c
1000a624:	1001637d 	.word	0x1001637d
1000a628:	1000a5c5 	.word	0x1000a5c5
1000a62c:	100177d8 	.word	0x100177d8

1000a630 <sms_pressure_ms58_read_data>:
	}
}


enum status_code sms_pressure_ms58_read_data(void)
{
1000a630:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a632:	464f      	mov	r7, r9
1000a634:	4646      	mov	r6, r8
1000a636:	b4c0      	push	{r6, r7}
1000a638:	b083      	sub	sp, #12
    if(pressure_device.output.complete) {
1000a63a:	4b2a      	ldr	r3, [pc, #168]	; (1000a6e4 <sms_pressure_ms58_read_data+0xb4>)
1000a63c:	7f1b      	ldrb	r3, [r3, #28]
1000a63e:	2b00      	cmp	r3, #0
1000a640:	d026      	beq.n	1000a690 <sms_pressure_ms58_read_data+0x60>
		//gpio_pin_set_output_level(DBG_PIN_1, true);
        spi_wdata[0] = MS58_ADC_READ;
1000a642:	4c29      	ldr	r4, [pc, #164]	; (1000a6e8 <sms_pressure_ms58_read_data+0xb8>)
1000a644:	2500      	movs	r5, #0
1000a646:	7025      	strb	r5, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000a648:	7065      	strb	r5, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000a64a:	70a5      	strb	r5, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000a64c:	70e5      	strb	r5, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000a64e:	4b27      	ldr	r3, [pc, #156]	; (1000a6ec <sms_pressure_ms58_read_data+0xbc>)
1000a650:	4698      	mov	r8, r3
1000a652:	2304      	movs	r3, #4
1000a654:	9300      	str	r3, [sp, #0]
1000a656:	4643      	mov	r3, r8
1000a658:	0022      	movs	r2, r4
1000a65a:	4925      	ldr	r1, [pc, #148]	; (1000a6f0 <sms_pressure_ms58_read_data+0xc0>)
1000a65c:	4825      	ldr	r0, [pc, #148]	; (1000a6f4 <sms_pressure_ms58_read_data+0xc4>)
1000a65e:	4f26      	ldr	r7, [pc, #152]	; (1000a6f8 <sms_pressure_ms58_read_data+0xc8>)
1000a660:	47b8      	blx	r7
        pressure_device.output.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000a662:	4e20      	ldr	r6, [pc, #128]	; (1000a6e4 <sms_pressure_ms58_read_data+0xb4>)
1000a664:	4643      	mov	r3, r8
1000a666:	785b      	ldrb	r3, [r3, #1]
1000a668:	041a      	lsls	r2, r3, #16
1000a66a:	4643      	mov	r3, r8
1000a66c:	789b      	ldrb	r3, [r3, #2]
1000a66e:	021b      	lsls	r3, r3, #8
1000a670:	4313      	orrs	r3, r2
1000a672:	4642      	mov	r2, r8
1000a674:	78d2      	ldrb	r2, [r2, #3]
1000a676:	4313      	orrs	r3, r2
1000a678:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_4096;
1000a67a:	2358      	movs	r3, #88	; 0x58
1000a67c:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a67e:	3b57      	subs	r3, #87	; 0x57
1000a680:	9300      	str	r3, [sp, #0]
1000a682:	4643      	mov	r3, r8
1000a684:	0022      	movs	r2, r4
1000a686:	491a      	ldr	r1, [pc, #104]	; (1000a6f0 <sms_pressure_ms58_read_data+0xc0>)
1000a688:	481a      	ldr	r0, [pc, #104]	; (1000a6f4 <sms_pressure_ms58_read_data+0xc4>)
1000a68a:	47b8      	blx	r7
		pressure_device.output.complete = false;
1000a68c:	7735      	strb	r5, [r6, #28]
1000a68e:	e022      	b.n	1000a6d6 <sms_pressure_ms58_read_data+0xa6>
		//gpio_pin_set_output_level(DBG_PIN_1, false);
	}
	else {
		//gpio_pin_set_output_level(DBG_PIN_2, true);
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
1000a690:	4c15      	ldr	r4, [pc, #84]	; (1000a6e8 <sms_pressure_ms58_read_data+0xb8>)
1000a692:	2300      	movs	r3, #0
1000a694:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
1000a696:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
1000a698:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
1000a69a:	70e3      	strb	r3, [r4, #3]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
1000a69c:	4d13      	ldr	r5, [pc, #76]	; (1000a6ec <sms_pressure_ms58_read_data+0xbc>)
1000a69e:	3304      	adds	r3, #4
1000a6a0:	9300      	str	r3, [sp, #0]
1000a6a2:	002b      	movs	r3, r5
1000a6a4:	0022      	movs	r2, r4
1000a6a6:	4912      	ldr	r1, [pc, #72]	; (1000a6f0 <sms_pressure_ms58_read_data+0xc0>)
1000a6a8:	4812      	ldr	r0, [pc, #72]	; (1000a6f4 <sms_pressure_ms58_read_data+0xc4>)
1000a6aa:	4e13      	ldr	r6, [pc, #76]	; (1000a6f8 <sms_pressure_ms58_read_data+0xc8>)
1000a6ac:	46b1      	mov	r9, r6
1000a6ae:	47b0      	blx	r6
        pressure_device.output.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
1000a6b0:	4e0c      	ldr	r6, [pc, #48]	; (1000a6e4 <sms_pressure_ms58_read_data+0xb4>)
1000a6b2:	786b      	ldrb	r3, [r5, #1]
1000a6b4:	041a      	lsls	r2, r3, #16
1000a6b6:	78ab      	ldrb	r3, [r5, #2]
1000a6b8:	021b      	lsls	r3, r3, #8
1000a6ba:	4313      	orrs	r3, r2
1000a6bc:	78ea      	ldrb	r2, [r5, #3]
1000a6be:	4313      	orrs	r3, r2
1000a6c0:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_4096;
1000a6c2:	2348      	movs	r3, #72	; 0x48
1000a6c4:	7023      	strb	r3, [r4, #0]
        sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
1000a6c6:	2701      	movs	r7, #1
1000a6c8:	9700      	str	r7, [sp, #0]
1000a6ca:	002b      	movs	r3, r5
1000a6cc:	0022      	movs	r2, r4
1000a6ce:	4908      	ldr	r1, [pc, #32]	; (1000a6f0 <sms_pressure_ms58_read_data+0xc0>)
1000a6d0:	4808      	ldr	r0, [pc, #32]	; (1000a6f4 <sms_pressure_ms58_read_data+0xc4>)
1000a6d2:	47c8      	blx	r9
        pressure_device.output.complete = true;
1000a6d4:	7737      	strb	r7, [r6, #28]
		//gpio_pin_set_output_level(DBG_PIN_2, false);
	}
    return STATUS_OK;
}
1000a6d6:	2000      	movs	r0, #0
1000a6d8:	b003      	add	sp, #12
1000a6da:	bc0c      	pop	{r2, r3}
1000a6dc:	4690      	mov	r8, r2
1000a6de:	4699      	mov	r9, r3
1000a6e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a6e2:	46c0      	nop			; (mov r8, r8)
1000a6e4:	1001a238 	.word	0x1001a238
1000a6e8:	1001a228 	.word	0x1001a228
1000a6ec:	1001a210 	.word	0x1001a210
1000a6f0:	1001a2d4 	.word	0x1001a2d4
1000a6f4:	1001a2e0 	.word	0x1001a2e0
1000a6f8:	1000aa5d 	.word	0x1000aa5d

1000a6fc <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
1000a6fc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a6fe:	464f      	mov	r7, r9
1000a700:	b480      	push	{r7}
1000a702:	b082      	sub	sp, #8
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(pressure_device.output.prom_values[5]) << 8);
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)pressure_device.output.adc_values[MS58_TYPE_TEMP] - tv1);
1000a704:	4d22      	ldr	r5, [pc, #136]	; (1000a790 <sms_pressure_ms58_calculate+0x94>)

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)pressure_device.output.prom_values[6] * (int64_t)deltaT);
1000a706:	89ec      	ldrh	r4, [r5, #14]
1000a708:	0224      	lsls	r4, r4, #8
1000a70a:	69ab      	ldr	r3, [r5, #24]
1000a70c:	1b1c      	subs	r4, r3, r4
1000a70e:	17e3      	asrs	r3, r4, #31
1000a710:	001e      	movs	r6, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    pressure_device.output.temperature = (int32_t)(tv2 + 2000);
1000a712:	8a28      	ldrh	r0, [r5, #16]
1000a714:	4a1f      	ldr	r2, [pc, #124]	; (1000a794 <sms_pressure_ms58_calculate+0x98>)
1000a716:	4691      	mov	r9, r2
1000a718:	0022      	movs	r2, r4
1000a71a:	2100      	movs	r1, #0
1000a71c:	47c8      	blx	r9
1000a71e:	0249      	lsls	r1, r1, #9
1000a720:	0dc0      	lsrs	r0, r0, #23
1000a722:	4308      	orrs	r0, r1
1000a724:	23fa      	movs	r3, #250	; 0xfa
1000a726:	00db      	lsls	r3, r3, #3
1000a728:	469c      	mov	ip, r3
1000a72a:	4460      	add	r0, ip
1000a72c:	6268      	str	r0, [r5, #36]	; 0x24
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)pressure_device.output.prom_values[4] * (int64_t)deltaT);
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
1000a72e:	89a8      	ldrh	r0, [r5, #12]
1000a730:	0022      	movs	r2, r4
1000a732:	9601      	str	r6, [sp, #4]
1000a734:	0033      	movs	r3, r6
1000a736:	2100      	movs	r1, #0
1000a738:	47c8      	blx	r9
1000a73a:	064e      	lsls	r6, r1, #25
1000a73c:	09c2      	lsrs	r2, r0, #7
1000a73e:	4332      	orrs	r2, r6
1000a740:	11cb      	asrs	r3, r1, #7
1000a742:	892e      	ldrh	r6, [r5, #8]
1000a744:	2100      	movs	r1, #0
1000a746:	0430      	lsls	r0, r6, #16
1000a748:	1812      	adds	r2, r2, r0
1000a74a:	414b      	adcs	r3, r1
1000a74c:	0016      	movs	r6, r2
1000a74e:	001f      	movs	r7, r3
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)pressure_device.output.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000a750:	8968      	ldrh	r0, [r5, #10]
1000a752:	0022      	movs	r2, r4
1000a754:	9b01      	ldr	r3, [sp, #4]
1000a756:	2100      	movs	r1, #0
1000a758:	47c8      	blx	r9
1000a75a:	060c      	lsls	r4, r1, #24
1000a75c:	0a02      	lsrs	r2, r0, #8
1000a75e:	4322      	orrs	r2, r4
1000a760:	120b      	asrs	r3, r1, #8
1000a762:	88ec      	ldrh	r4, [r5, #6]
1000a764:	2100      	movs	r1, #0
1000a766:	03e0      	lsls	r0, r4, #15
1000a768:	1880      	adds	r0, r0, r2
1000a76a:	4159      	adcs	r1, r3
1000a76c:	696a      	ldr	r2, [r5, #20]
1000a76e:	2300      	movs	r3, #0
1000a770:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    pressure_device.output.pressure = (int32_t)(tv2 >> 15);
1000a772:	02cc      	lsls	r4, r1, #11
1000a774:	0d42      	lsrs	r2, r0, #21
1000a776:	4322      	orrs	r2, r4
1000a778:	154b      	asrs	r3, r1, #21
1000a77a:	1b92      	subs	r2, r2, r6
1000a77c:	41bb      	sbcs	r3, r7
1000a77e:	0011      	movs	r1, r2
1000a780:	045b      	lsls	r3, r3, #17
1000a782:	0bca      	lsrs	r2, r1, #15
1000a784:	431a      	orrs	r2, r3
1000a786:	622a      	str	r2, [r5, #32]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.output.temperature, pressure_device.output.pressure);
}
1000a788:	b002      	add	sp, #8
1000a78a:	bc04      	pop	{r2}
1000a78c:	4691      	mov	r9, r2
1000a78e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a790:	1001a238 	.word	0x1001a238
1000a794:	100135c9 	.word	0x100135c9

1000a798 <sms_pressure_poll_data>:

    return 0;
}

void sms_pressure_poll_data(void)
{
1000a798:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000a79a:	4b09      	ldr	r3, [pc, #36]	; (1000a7c0 <sms_pressure_poll_data+0x28>)
1000a79c:	781b      	ldrb	r3, [r3, #0]
1000a79e:	2b22      	cmp	r3, #34	; 0x22
1000a7a0:	d10d      	bne.n	1000a7be <sms_pressure_poll_data+0x26>
		enum status_code status = sms_pressure_ms58_read_data();
1000a7a2:	4b08      	ldr	r3, [pc, #32]	; (1000a7c4 <sms_pressure_poll_data+0x2c>)
1000a7a4:	4798      	blx	r3
		if(status != STATUS_OK) {
1000a7a6:	2800      	cmp	r0, #0
1000a7a8:	d109      	bne.n	1000a7be <sms_pressure_poll_data+0x26>
			DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
		}
		else {
			if(pressure_device.output.complete) {
1000a7aa:	4b07      	ldr	r3, [pc, #28]	; (1000a7c8 <sms_pressure_poll_data+0x30>)
1000a7ac:	7f1b      	ldrb	r3, [r3, #28]
1000a7ae:	2b00      	cmp	r3, #0
1000a7b0:	d005      	beq.n	1000a7be <sms_pressure_poll_data+0x26>
				sms_pressure_ms58_calculate();
1000a7b2:	4b06      	ldr	r3, [pc, #24]	; (1000a7cc <sms_pressure_poll_data+0x34>)
1000a7b4:	4798      	blx	r3
				pressure_device.interrupt.rts = true;
1000a7b6:	2101      	movs	r1, #1
1000a7b8:	232a      	movs	r3, #42	; 0x2a
1000a7ba:	4a03      	ldr	r2, [pc, #12]	; (1000a7c8 <sms_pressure_poll_data+0x30>)
1000a7bc:	54d1      	strb	r1, [r2, r3]
			}
		}
	}
}
1000a7be:	bd10      	pop	{r4, pc}
1000a7c0:	1001a19c 	.word	0x1001a19c
1000a7c4:	1000a631 	.word	0x1000a631
1000a7c8:	1001a238 	.word	0x1001a238
1000a7cc:	1000a6fd 	.word	0x1000a6fd

1000a7d0 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.output.temperature, pressure_device.output.pressure);
}

void sms_pressure_define_services(void)
{
1000a7d0:	b510      	push	{r4, lr}
1000a7d2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
1000a7d4:	466b      	mov	r3, sp
1000a7d6:	1dda      	adds	r2, r3, #7
1000a7d8:	2300      	movs	r3, #0
1000a7da:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
1000a7dc:	4c09      	ldr	r4, [pc, #36]	; (1000a804 <sms_pressure_define_services+0x34>)
1000a7de:	0021      	movs	r1, r4
1000a7e0:	2001      	movs	r0, #1
1000a7e2:	4b09      	ldr	r3, [pc, #36]	; (1000a808 <sms_pressure_define_services+0x38>)
1000a7e4:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
1000a7e6:	0020      	movs	r0, r4
1000a7e8:	4b08      	ldr	r3, [pc, #32]	; (1000a80c <sms_pressure_define_services+0x3c>)
1000a7ea:	4798      	blx	r3
1000a7ec:	1e04      	subs	r4, r0, #0
1000a7ee:	d006      	beq.n	1000a7fe <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
1000a7f0:	4807      	ldr	r0, [pc, #28]	; (1000a810 <sms_pressure_define_services+0x40>)
1000a7f2:	4b08      	ldr	r3, [pc, #32]	; (1000a814 <sms_pressure_define_services+0x44>)
1000a7f4:	4798      	blx	r3
1000a7f6:	0021      	movs	r1, r4
1000a7f8:	4807      	ldr	r0, [pc, #28]	; (1000a818 <sms_pressure_define_services+0x48>)
1000a7fa:	4b08      	ldr	r3, [pc, #32]	; (1000a81c <sms_pressure_define_services+0x4c>)
1000a7fc:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
1000a7fe:	b002      	add	sp, #8
1000a800:	bd10      	pop	{r4, pc}
1000a802:	46c0      	nop			; (mov r8, r8)
1000a804:	1001a264 	.word	0x1001a264
1000a808:	10008da5 	.word	0x10008da5
1000a80c:	10008d81 	.word	0x10008d81
1000a810:	100174f0 	.word	0x100174f0
1000a814:	1001649d 	.word	0x1001649d
1000a818:	10017818 	.word	0x10017818
1000a81c:	1001637d 	.word	0x1001637d

1000a820 <sms_sensors_enable_callback>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
1000a820:	b510      	push	{r4, lr}
1000a822:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
1000a824:	2800      	cmp	r0, #0
1000a826:	d002      	beq.n	1000a82e <sms_sensors_enable_callback+0xe>
        sms_imu_enable_callback();
1000a828:	4b06      	ldr	r3, [pc, #24]	; (1000a844 <sms_sensors_enable_callback+0x24>)
1000a82a:	4798      	blx	r3
1000a82c:	e001      	b.n	1000a832 <sms_sensors_enable_callback+0x12>
    }
    else {
        sms_imu_disable_callback();
1000a82e:	4b06      	ldr	r3, [pc, #24]	; (1000a848 <sms_sensors_enable_callback+0x28>)
1000a830:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
1000a832:	2c00      	cmp	r4, #0
1000a834:	d002      	beq.n	1000a83c <sms_sensors_enable_callback+0x1c>
        sms_timer_aon_register_callback();
1000a836:	4b05      	ldr	r3, [pc, #20]	; (1000a84c <sms_sensors_enable_callback+0x2c>)
1000a838:	4798      	blx	r3
1000a83a:	e001      	b.n	1000a840 <sms_sensors_enable_callback+0x20>
    }
    else {
        sms_timer_aon_unregister_callback();
1000a83c:	4b04      	ldr	r3, [pc, #16]	; (1000a850 <sms_sensors_enable_callback+0x30>)
1000a83e:	4798      	blx	r3
    }
}
1000a840:	bd10      	pop	{r4, pc}
1000a842:	46c0      	nop			; (mov r8, r8)
1000a844:	100094f5 	.word	0x100094f5
1000a848:	10009511 	.word	0x10009511
1000a84c:	1000aaf1 	.word	0x1000aaf1
1000a850:	1000ab11 	.word	0x1000ab11

1000a854 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
1000a854:	b530      	push	{r4, r5, lr}
1000a856:	b089      	sub	sp, #36	; 0x24
1000a858:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
1000a85a:	2800      	cmp	r0, #0
1000a85c:	d02b      	beq.n	1000a8b6 <sms_sensors_switch+0x62>
		DBG_LOG_DEV("[sms_sensors_switch]\t\tSwitching on MPU");
		//gpio_pin_set_output_level(DBG_PIN_1, true);
        if(sms_imu_startup()) {
1000a85e:	4b4b      	ldr	r3, [pc, #300]	; (1000a98c <sms_sensors_switch+0x138>)
1000a860:	4798      	blx	r3
1000a862:	2800      	cmp	r0, #0
1000a864:	d00f      	beq.n	1000a886 <sms_sensors_switch+0x32>
	        DBG_LOG("[sms_sensors_switch]\t\tCouldn't start IMU");
1000a866:	484a      	ldr	r0, [pc, #296]	; (1000a990 <sms_sensors_switch+0x13c>)
1000a868:	4b4a      	ldr	r3, [pc, #296]	; (1000a994 <sms_sensors_switch+0x140>)
1000a86a:	4798      	blx	r3
1000a86c:	484a      	ldr	r0, [pc, #296]	; (1000a998 <sms_sensors_switch+0x144>)
1000a86e:	4b4b      	ldr	r3, [pc, #300]	; (1000a99c <sms_sensors_switch+0x148>)
1000a870:	4798      	blx	r3
			dualtimer_disable(timer1_instance.id);
1000a872:	4b4b      	ldr	r3, [pc, #300]	; (1000a9a0 <sms_sensors_switch+0x14c>)
1000a874:	7818      	ldrb	r0, [r3, #0]
1000a876:	4b4b      	ldr	r3, [pc, #300]	; (1000a9a4 <sms_sensors_switch+0x150>)
1000a878:	4798      	blx	r3
			imu_device.state = IMU_STATE_OFF;
1000a87a:	4b4b      	ldr	r3, [pc, #300]	; (1000a9a8 <sms_sensors_switch+0x154>)
1000a87c:	2200      	movs	r2, #0
1000a87e:	2187      	movs	r1, #135	; 0x87
1000a880:	545a      	strb	r2, [r3, r1]
			imu_device.config.init_ok = false;
1000a882:	711a      	strb	r2, [r3, #4]
1000a884:	e020      	b.n	1000a8c8 <sms_sensors_switch+0x74>
        }
        else {
			/* */
			struct dualtimer_config config;
			config.timer1.load_value = 0xffffffff;
1000a886:	a801      	add	r0, sp, #4
1000a888:	2301      	movs	r3, #1
1000a88a:	425b      	negs	r3, r3
1000a88c:	6083      	str	r3, [r0, #8]
			config.timer1.interrup_enable = false;
1000a88e:	2300      	movs	r3, #0
1000a890:	7103      	strb	r3, [r0, #4]
			config.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a892:	2501      	movs	r5, #1
1000a894:	7045      	strb	r5, [r0, #1]
			dualtimer_init(&config);
1000a896:	4b45      	ldr	r3, [pc, #276]	; (1000a9ac <sms_sensors_switch+0x158>)
1000a898:	4798      	blx	r3
			dualtimer_disable(timer2_instance.id);
1000a89a:	4b45      	ldr	r3, [pc, #276]	; (1000a9b0 <sms_sensors_switch+0x15c>)
1000a89c:	7818      	ldrb	r0, [r3, #0]
1000a89e:	4b41      	ldr	r3, [pc, #260]	; (1000a9a4 <sms_sensors_switch+0x150>)
1000a8a0:	4798      	blx	r3
			dualtimer_enable(timer1_instance.id);
1000a8a2:	4b3f      	ldr	r3, [pc, #252]	; (1000a9a0 <sms_sensors_switch+0x14c>)
1000a8a4:	7818      	ldrb	r0, [r3, #0]
1000a8a6:	4b43      	ldr	r3, [pc, #268]	; (1000a9b4 <sms_sensors_switch+0x160>)
1000a8a8:	4798      	blx	r3
			imu_device.state = IMU_STATE_ON;
1000a8aa:	4b3f      	ldr	r3, [pc, #252]	; (1000a9a8 <sms_sensors_switch+0x154>)
1000a8ac:	2102      	movs	r1, #2
1000a8ae:	2287      	movs	r2, #135	; 0x87
1000a8b0:	5499      	strb	r1, [r3, r2]
	        imu_device.config.init_ok = true;
1000a8b2:	711d      	strb	r5, [r3, #4]
1000a8b4:	e008      	b.n	1000a8c8 <sms_sensors_switch+0x74>
        }
		//gpio_pin_set_output_level(DBG_PIN_1, false);
    }
    else {
		DBG_LOG_DEV("[sms_sensors_switch]\t\tSwitching off MPU");
		dualtimer_disable(timer1_instance.id);
1000a8b6:	4b3a      	ldr	r3, [pc, #232]	; (1000a9a0 <sms_sensors_switch+0x14c>)
1000a8b8:	7818      	ldrb	r0, [r3, #0]
1000a8ba:	4b3a      	ldr	r3, [pc, #232]	; (1000a9a4 <sms_sensors_switch+0x150>)
1000a8bc:	4798      	blx	r3
        imu_device.state = IMU_STATE_OFF;
1000a8be:	4b3a      	ldr	r3, [pc, #232]	; (1000a9a8 <sms_sensors_switch+0x154>)
1000a8c0:	2200      	movs	r2, #0
1000a8c2:	2187      	movs	r1, #135	; 0x87
1000a8c4:	545a      	strb	r2, [r3, r1]
		imu_device.config.init_ok = false;
1000a8c6:	711a      	strb	r2, [r3, #4]
		// switch off VCC pin to save current...
    }
    
    /* Pressure */
    if(press_en) {   
1000a8c8:	2c00      	cmp	r4, #0
1000a8ca:	d021      	beq.n	1000a910 <sms_sensors_switch+0xbc>
		DBG_LOG_DEV("[sms_sensors_switch]\t\tSwitching on pressure");
		//gpio_pin_set_output_level(DBG_PIN_2, true);          
        if(sms_pressure_startup()) {
1000a8cc:	4b3a      	ldr	r3, [pc, #232]	; (1000a9b8 <sms_sensors_switch+0x164>)
1000a8ce:	4798      	blx	r3
1000a8d0:	2800      	cmp	r0, #0
1000a8d2:	d00d      	beq.n	1000a8f0 <sms_sensors_switch+0x9c>
			DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't start pressure sensor");
1000a8d4:	482e      	ldr	r0, [pc, #184]	; (1000a990 <sms_sensors_switch+0x13c>)
1000a8d6:	4b2f      	ldr	r3, [pc, #188]	; (1000a994 <sms_sensors_switch+0x140>)
1000a8d8:	4798      	blx	r3
1000a8da:	4838      	ldr	r0, [pc, #224]	; (1000a9bc <sms_sensors_switch+0x168>)
1000a8dc:	4b2f      	ldr	r3, [pc, #188]	; (1000a99c <sms_sensors_switch+0x148>)
1000a8de:	4798      	blx	r3
			sms_timer_aon_disable();
1000a8e0:	4b37      	ldr	r3, [pc, #220]	; (1000a9c0 <sms_sensors_switch+0x16c>)
1000a8e2:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
1000a8e4:	4b37      	ldr	r3, [pc, #220]	; (1000a9c4 <sms_sensors_switch+0x170>)
1000a8e6:	2200      	movs	r2, #0
1000a8e8:	212b      	movs	r1, #43	; 0x2b
1000a8ea:	545a      	strb	r2, [r3, r1]
			pressure_device.config.init_ok = false;
1000a8ec:	701a      	strb	r2, [r3, #0]
1000a8ee:	e045      	b.n	1000a97c <sms_sensors_switch+0x128>
		}
		else {
			sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a8f0:	2100      	movs	r1, #0
1000a8f2:	2064      	movs	r0, #100	; 0x64
1000a8f4:	4b34      	ldr	r3, [pc, #208]	; (1000a9c8 <sms_sensors_switch+0x174>)
1000a8f6:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_ON;
1000a8f8:	4b32      	ldr	r3, [pc, #200]	; (1000a9c4 <sms_sensors_switch+0x170>)
1000a8fa:	2102      	movs	r1, #2
1000a8fc:	222b      	movs	r2, #43	; 0x2b
1000a8fe:	5499      	strb	r1, [r3, r2]
			pressure_device.config.init_ok = true;
1000a900:	3a2a      	subs	r2, #42	; 0x2a
1000a902:	701a      	strb	r2, [r3, #0]
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a904:	2387      	movs	r3, #135	; 0x87
1000a906:	4a28      	ldr	r2, [pc, #160]	; (1000a9a8 <sms_sensors_switch+0x154>)
1000a908:	5cd3      	ldrb	r3, [r2, r3]
1000a90a:	2b02      	cmp	r3, #2
1000a90c:	d115      	bne.n	1000a93a <sms_sensors_switch+0xe6>
1000a90e:	e007      	b.n	1000a920 <sms_sensors_switch+0xcc>
		}
		//gpio_pin_set_output_level(DBG_PIN_2, false);
    }
    else {
		DBG_LOG_DEV("[sms_sensors_switch]\t\tSwitching off pressure");
		sms_timer_aon_disable();
1000a910:	4b2b      	ldr	r3, [pc, #172]	; (1000a9c0 <sms_sensors_switch+0x16c>)
1000a912:	4798      	blx	r3
		pressure_device.state = PRESSURE_STATE_OFF;
1000a914:	4b2b      	ldr	r3, [pc, #172]	; (1000a9c4 <sms_sensors_switch+0x170>)
1000a916:	2200      	movs	r2, #0
1000a918:	212b      	movs	r1, #43	; 0x2b
1000a91a:	545a      	strb	r2, [r3, r1]
		pressure_device.config.init_ok = false;
1000a91c:	701a      	strb	r2, [r3, #0]
1000a91e:	e02d      	b.n	1000a97c <sms_sensors_switch+0x128>
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
1000a920:	2207      	movs	r2, #7
1000a922:	4b2a      	ldr	r3, [pc, #168]	; (1000a9cc <sms_sensors_switch+0x178>)
1000a924:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a926:	4b2a      	ldr	r3, [pc, #168]	; (1000a9d0 <sms_sensors_switch+0x17c>)
1000a928:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a92a:	4b2a      	ldr	r3, [pc, #168]	; (1000a9d4 <sms_sensors_switch+0x180>)
1000a92c:	4798      	blx	r3
1000a92e:	e013      	b.n	1000a958 <sms_sensors_switch+0x104>
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
		sms_sensors_enable_callback(true, false);
	}
	else if(pressure_device.state == PRESSURE_STATE_ON) {
1000a930:	232b      	movs	r3, #43	; 0x2b
1000a932:	4a24      	ldr	r2, [pc, #144]	; (1000a9c4 <sms_sensors_switch+0x170>)
1000a934:	5cd3      	ldrb	r3, [r2, r3]
1000a936:	2b02      	cmp	r3, #2
1000a938:	d107      	bne.n	1000a94a <sms_sensors_switch+0xf6>
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000a93a:	2205      	movs	r2, #5
1000a93c:	4b23      	ldr	r3, [pc, #140]	; (1000a9cc <sms_sensors_switch+0x178>)
1000a93e:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a940:	4b25      	ldr	r3, [pc, #148]	; (1000a9d8 <sms_sensors_switch+0x184>)
1000a942:	4798      	blx	r3
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
1000a944:	4b23      	ldr	r3, [pc, #140]	; (1000a9d4 <sms_sensors_switch+0x180>)
1000a946:	4798      	blx	r3
1000a948:	e006      	b.n	1000a958 <sms_sensors_switch+0x104>
	else if(pressure_device.state == PRESSURE_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
		sms_sensors_enable_callback(false, true);
	}
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000a94a:	2201      	movs	r2, #1
1000a94c:	4b1f      	ldr	r3, [pc, #124]	; (1000a9cc <sms_sensors_switch+0x178>)
1000a94e:	701a      	strb	r2, [r3, #0]
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
    }
    else {
        sms_imu_disable_callback();
1000a950:	4b21      	ldr	r3, [pc, #132]	; (1000a9d8 <sms_sensors_switch+0x184>)
1000a952:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a954:	4b21      	ldr	r3, [pc, #132]	; (1000a9dc <sms_sensors_switch+0x188>)
1000a956:	4798      	blx	r3
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
1000a958:	480d      	ldr	r0, [pc, #52]	; (1000a990 <sms_sensors_switch+0x13c>)
1000a95a:	4b0e      	ldr	r3, [pc, #56]	; (1000a994 <sms_sensors_switch+0x140>)
1000a95c:	4798      	blx	r3
1000a95e:	4b1b      	ldr	r3, [pc, #108]	; (1000a9cc <sms_sensors_switch+0x178>)
1000a960:	7819      	ldrb	r1, [r3, #0]
1000a962:	b2c9      	uxtb	r1, r1
1000a964:	481e      	ldr	r0, [pc, #120]	; (1000a9e0 <sms_sensors_switch+0x18c>)
1000a966:	4b0d      	ldr	r3, [pc, #52]	; (1000a99c <sms_sensors_switch+0x148>)
1000a968:	4798      	blx	r3
}
1000a96a:	e00d      	b.n	1000a988 <sms_sensors_switch+0x134>
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
		sms_working_mode = SMS_MODE_COMPLETE;
		sms_sensors_enable_callback(true, true);
	}
	else if(imu_device.state == IMU_STATE_ON) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
1000a96c:	2204      	movs	r2, #4
1000a96e:	4b17      	ldr	r3, [pc, #92]	; (1000a9cc <sms_sensors_switch+0x178>)
1000a970:	701a      	strb	r2, [r3, #0]

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
        sms_imu_enable_callback();
1000a972:	4b17      	ldr	r3, [pc, #92]	; (1000a9d0 <sms_sensors_switch+0x17c>)
1000a974:	4798      	blx	r3
     */
    if(press_cb) {
        sms_timer_aon_register_callback();
    }
    else {
        sms_timer_aon_unregister_callback();
1000a976:	4b19      	ldr	r3, [pc, #100]	; (1000a9dc <sms_sensors_switch+0x188>)
1000a978:	4798      	blx	r3
1000a97a:	e7ed      	b.n	1000a958 <sms_sensors_switch+0x104>
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if((imu_device.state == IMU_STATE_ON) && (pressure_device.state == PRESSURE_STATE_ON)) {
1000a97c:	2387      	movs	r3, #135	; 0x87
1000a97e:	4a0a      	ldr	r2, [pc, #40]	; (1000a9a8 <sms_sensors_switch+0x154>)
1000a980:	5cd3      	ldrb	r3, [r2, r3]
1000a982:	2b02      	cmp	r3, #2
1000a984:	d1d4      	bne.n	1000a930 <sms_sensors_switch+0xdc>
1000a986:	e7f1      	b.n	1000a96c <sms_sensors_switch+0x118>
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG("[sms_sensors_switch]\t\tSMS working mode: %d", sms_working_mode);
}
1000a988:	b009      	add	sp, #36	; 0x24
1000a98a:	bd30      	pop	{r4, r5, pc}
1000a98c:	1000a051 	.word	0x1000a051
1000a990:	100174f0 	.word	0x100174f0
1000a994:	1001649d 	.word	0x1001649d
1000a998:	10017860 	.word	0x10017860
1000a99c:	1001637d 	.word	0x1001637d
1000a9a0:	1001a224 	.word	0x1001a224
1000a9a4:	1000b0a5 	.word	0x1000b0a5
1000a9a8:	1001a2e8 	.word	0x1001a2e8
1000a9ac:	1000b0c9 	.word	0x1000b0c9
1000a9b0:	1001a2d0 	.word	0x1001a2d0
1000a9b4:	1000b081 	.word	0x1000b081
1000a9b8:	1000a5d9 	.word	0x1000a5d9
1000a9bc:	1001788c 	.word	0x1001788c
1000a9c0:	1000aae5 	.word	0x1000aae5
1000a9c4:	1001a238 	.word	0x1001a238
1000a9c8:	1000aab9 	.word	0x1000aab9
1000a9cc:	1001a198 	.word	0x1001a198
1000a9d0:	100094f5 	.word	0x100094f5
1000a9d4:	1000aaf1 	.word	0x1000aaf1
1000a9d8:	10009511 	.word	0x10009511
1000a9dc:	1000ab11 	.word	0x1000ab11
1000a9e0:	100178c4 	.word	0x100178c4

1000a9e4 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a9e4:	b530      	push	{r4, r5, lr}
1000a9e6:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a9e8:	ac01      	add	r4, sp, #4
1000a9ea:	0020      	movs	r0, r4
1000a9ec:	4b13      	ldr	r3, [pc, #76]	; (1000aa3c <sms_spi_master_configure+0x58>)
1000a9ee:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a9f0:	2310      	movs	r3, #16
1000a9f2:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a9f4:	0021      	movs	r1, r4
1000a9f6:	4812      	ldr	r0, [pc, #72]	; (1000aa40 <sms_spi_master_configure+0x5c>)
1000a9f8:	4b12      	ldr	r3, [pc, #72]	; (1000aa44 <sms_spi_master_configure+0x60>)
1000a9fa:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a9fc:	ac02      	add	r4, sp, #8
1000a9fe:	0020      	movs	r0, r4
1000aa00:	4b11      	ldr	r3, [pc, #68]	; (1000aa48 <sms_spi_master_configure+0x64>)
1000aa02:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000aa04:	2368      	movs	r3, #104	; 0x68
1000aa06:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000aa08:	2300      	movs	r3, #0
1000aa0a:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000aa0c:	3311      	adds	r3, #17
1000aa0e:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000aa10:	3b0d      	subs	r3, #13
1000aa12:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000aa14:	2213      	movs	r2, #19
1000aa16:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000aa18:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000aa1a:	3a14      	subs	r2, #20
1000aa1c:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000aa1e:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000aa20:	3213      	adds	r2, #19
1000aa22:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000aa24:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000aa26:	4d09      	ldr	r5, [pc, #36]	; (1000aa4c <sms_spi_master_configure+0x68>)
1000aa28:	0022      	movs	r2, r4
1000aa2a:	4909      	ldr	r1, [pc, #36]	; (1000aa50 <sms_spi_master_configure+0x6c>)
1000aa2c:	0028      	movs	r0, r5
1000aa2e:	4b09      	ldr	r3, [pc, #36]	; (1000aa54 <sms_spi_master_configure+0x70>)
1000aa30:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000aa32:	0028      	movs	r0, r5
1000aa34:	4b08      	ldr	r3, [pc, #32]	; (1000aa58 <sms_spi_master_configure+0x74>)
1000aa36:	4798      	blx	r3
}
1000aa38:	b00d      	add	sp, #52	; 0x34
1000aa3a:	bd30      	pop	{r4, r5, pc}
1000aa3c:	1000accd 	.word	0x1000accd
1000aa40:	1001a2d4 	.word	0x1001a2d4
1000aa44:	1000ad05 	.word	0x1000ad05
1000aa48:	1000acd9 	.word	0x1000acd9
1000aa4c:	1001a2e0 	.word	0x1001a2e0
1000aa50:	40007000 	.word	0x40007000
1000aa54:	1000add5 	.word	0x1000add5
1000aa58:	1000ad45 	.word	0x1000ad45

1000aa5c <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000aa5c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000aa5e:	b083      	sub	sp, #12
1000aa60:	0004      	movs	r4, r0
1000aa62:	000d      	movs	r5, r1
1000aa64:	9200      	str	r2, [sp, #0]
1000aa66:	9301      	str	r3, [sp, #4]
1000aa68:	ab08      	add	r3, sp, #32
1000aa6a:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000aa6c:	2201      	movs	r2, #1
1000aa6e:	4f08      	ldr	r7, [pc, #32]	; (1000aa90 <sms_spi_master_transceive+0x34>)
1000aa70:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000aa72:	0033      	movs	r3, r6
1000aa74:	9a01      	ldr	r2, [sp, #4]
1000aa76:	9900      	ldr	r1, [sp, #0]
1000aa78:	0020      	movs	r0, r4
1000aa7a:	4e06      	ldr	r6, [pc, #24]	; (1000aa94 <sms_spi_master_transceive+0x38>)
1000aa7c:	47b0      	blx	r6
1000aa7e:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000aa80:	2200      	movs	r2, #0
1000aa82:	0029      	movs	r1, r5
1000aa84:	0020      	movs	r0, r4
1000aa86:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000aa88:	0030      	movs	r0, r6
1000aa8a:	b003      	add	sp, #12
1000aa8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000aa8e:	46c0      	nop			; (mov r8, r8)
1000aa90:	1000afbd 	.word	0x1000afbd
1000aa94:	1000af39 	.word	0x1000af39

1000aa98 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000aa98:	b510      	push	{r4, lr}
    //if(pressure_device.int_enabled) {
		pressure_device.interrupt.new_value = true;
1000aa9a:	2101      	movs	r1, #1
1000aa9c:	2329      	movs	r3, #41	; 0x29
1000aa9e:	4a04      	ldr	r2, [pc, #16]	; (1000aab0 <sms_timer_aon_callback+0x18>)
1000aaa0:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000aaa2:	2300      	movs	r3, #0
1000aaa4:	2200      	movs	r2, #0
1000aaa6:	3102      	adds	r1, #2
1000aaa8:	2042      	movs	r0, #66	; 0x42
1000aaaa:	4c02      	ldr	r4, [pc, #8]	; (1000aab4 <sms_timer_aon_callback+0x1c>)
1000aaac:	47a0      	blx	r4
	//}
}
1000aaae:	bd10      	pop	{r4, pc}
1000aab0:	1001a238 	.word	0x1001a238
1000aab4:	1000e27d 	.word	0x1000e27d

1000aab8 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt_ms, enum aon_sleep_timer_mode cnt_mode)
{
1000aab8:	b530      	push	{r4, r5, lr}
1000aaba:	b083      	sub	sp, #12
1000aabc:	0004      	movs	r4, r0
1000aabe:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000aac0:	4668      	mov	r0, sp
1000aac2:	4b06      	ldr	r3, [pc, #24]	; (1000aadc <sms_timer_aon_init+0x24>)
1000aac4:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000aac6:	466b      	mov	r3, sp
1000aac8:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt_ms * SMS_TIMER_AON_LOAD_1MS;
1000aaca:	0163      	lsls	r3, r4, #5
1000aacc:	191c      	adds	r4, r3, r4
1000aace:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000aad0:	4668      	mov	r0, sp
1000aad2:	4b03      	ldr	r3, [pc, #12]	; (1000aae0 <sms_timer_aon_init+0x28>)
1000aad4:	4798      	blx	r3
}
1000aad6:	b003      	add	sp, #12
1000aad8:	bd30      	pop	{r4, r5, pc}
1000aada:	46c0      	nop			; (mov r8, r8)
1000aadc:	100080e9 	.word	0x100080e9
1000aae0:	1000815d 	.word	0x1000815d

1000aae4 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000aae4:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000aae6:	4b01      	ldr	r3, [pc, #4]	; (1000aaec <sms_timer_aon_disable+0x8>)
1000aae8:	4798      	blx	r3
}
1000aaea:	bd10      	pop	{r4, pc}
1000aaec:	100080f9 	.word	0x100080f9

1000aaf0 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000aaf0:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000aaf2:	4804      	ldr	r0, [pc, #16]	; (1000ab04 <sms_timer_aon_register_callback+0x14>)
1000aaf4:	4b04      	ldr	r3, [pc, #16]	; (1000ab08 <sms_timer_aon_register_callback+0x18>)
1000aaf6:	4798      	blx	r3
1000aaf8:	2280      	movs	r2, #128	; 0x80
1000aafa:	0512      	lsls	r2, r2, #20
1000aafc:	4b03      	ldr	r3, [pc, #12]	; (1000ab0c <sms_timer_aon_register_callback+0x1c>)
1000aafe:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000ab00:	bd10      	pop	{r4, pc}
1000ab02:	46c0      	nop			; (mov r8, r8)
1000ab04:	1000aa99 	.word	0x1000aa99
1000ab08:	10008145 	.word	0x10008145
1000ab0c:	e000e100 	.word	0xe000e100

1000ab10 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000ab10:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000ab12:	4b04      	ldr	r3, [pc, #16]	; (1000ab24 <sms_timer_aon_unregister_callback+0x14>)
1000ab14:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ab16:	2180      	movs	r1, #128	; 0x80
1000ab18:	0509      	lsls	r1, r1, #20
1000ab1a:	2380      	movs	r3, #128	; 0x80
1000ab1c:	4a02      	ldr	r2, [pc, #8]	; (1000ab28 <sms_timer_aon_unregister_callback+0x18>)
1000ab1e:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000ab20:	bd10      	pop	{r4, pc}
1000ab22:	46c0      	nop			; (mov r8, r8)
1000ab24:	10008151 	.word	0x10008151
1000ab28:	e000e100 	.word	0xe000e100

1000ab2c <sms_dualtimer_init>:


/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000ab2c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ab2e:	4647      	mov	r7, r8
1000ab30:	b480      	push	{r7}
1000ab32:	b088      	sub	sp, #32
	timer1_instance.id = DUALTIMER_TIMER1;
1000ab34:	4f12      	ldr	r7, [pc, #72]	; (1000ab80 <sms_dualtimer_init+0x54>)
1000ab36:	2500      	movs	r5, #0
1000ab38:	703d      	strb	r5, [r7, #0]
	timer1_instance.current_mode = TIMER_MODE_NONE;
1000ab3a:	707d      	strb	r5, [r7, #1]
	timer1_instance.int_enabled = false;
1000ab3c:	70bd      	strb	r5, [r7, #2]
	timer2_instance.id = DUALTIMER_TIMER2;
1000ab3e:	4e11      	ldr	r6, [pc, #68]	; (1000ab84 <sms_dualtimer_init+0x58>)
1000ab40:	2301      	movs	r3, #1
1000ab42:	4698      	mov	r8, r3
1000ab44:	7033      	strb	r3, [r6, #0]
	timer2_instance.current_mode = TIMER_MODE_NONE;
1000ab46:	7075      	strb	r5, [r6, #1]
	timer2_instance.int_enabled = false;
1000ab48:	70b5      	strb	r5, [r6, #2]
	
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000ab4a:	ac01      	add	r4, sp, #4
1000ab4c:	0020      	movs	r0, r4
1000ab4e:	4b0e      	ldr	r3, [pc, #56]	; (1000ab88 <sms_dualtimer_init+0x5c>)
1000ab50:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000ab52:	2301      	movs	r3, #1
1000ab54:	425b      	negs	r3, r3
1000ab56:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000ab58:	4643      	mov	r3, r8
1000ab5a:	7063      	strb	r3, [r4, #1]
	config_dualtimer.timer1.interrup_enable = false;
1000ab5c:	7125      	strb	r5, [r4, #4]
	/* Dualtimer2 used first as a ms delay... 
	 * blocking (without cb) or not (with cb) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000ab5e:	4b0b      	ldr	r3, [pc, #44]	; (1000ab8c <sms_dualtimer_init+0x60>)
1000ab60:	6163      	str	r3, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000ab62:	7365      	strb	r5, [r4, #13]
	config_dualtimer.timer2.interrup_enable = true;
1000ab64:	4643      	mov	r3, r8
1000ab66:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000ab68:	0020      	movs	r0, r4
1000ab6a:	4b09      	ldr	r3, [pc, #36]	; (1000ab90 <sms_dualtimer_init+0x64>)
1000ab6c:	4798      	blx	r3
    dualtimer_disable(timer1_instance.id);
1000ab6e:	7838      	ldrb	r0, [r7, #0]
1000ab70:	4c08      	ldr	r4, [pc, #32]	; (1000ab94 <sms_dualtimer_init+0x68>)
1000ab72:	47a0      	blx	r4
    dualtimer_disable(timer2_instance.id);
1000ab74:	7830      	ldrb	r0, [r6, #0]
1000ab76:	47a0      	blx	r4
}
1000ab78:	b008      	add	sp, #32
1000ab7a:	bc04      	pop	{r2}
1000ab7c:	4690      	mov	r8, r2
1000ab7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ab80:	1001a224 	.word	0x1001a224
1000ab84:	1001a2d0 	.word	0x1001a2d0
1000ab88:	1000b021 	.word	0x1000b021
1000ab8c:	00006590 	.word	0x00006590
1000ab90:	1000b0c9 	.word	0x1000b0c9
1000ab94:	1000b0a5 	.word	0x1000b0a5

1000ab98 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
1000ab98:	b510      	push	{r4, lr}
1000ab9a:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
1000ab9c:	4b02      	ldr	r3, [pc, #8]	; (1000aba8 <sms_dualtimer_register_callback+0x10>)
1000ab9e:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000aba0:	0020      	movs	r0, r4
1000aba2:	4b02      	ldr	r3, [pc, #8]	; (1000abac <sms_dualtimer_register_callback+0x14>)
1000aba4:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
1000aba6:	bd10      	pop	{r4, pc}
1000aba8:	1000b1cd 	.word	0x1000b1cd
1000abac:	1000b0a5 	.word	0x1000b0a5

1000abb0 <sms_dualtimer_unregister_callback>:

void sms_dualtimer_unregister_callback(enum dualtimer_timer tmr)
{
1000abb0:	b510      	push	{r4, lr}
1000abb2:	0004      	movs	r4, r0
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000abb4:	4b02      	ldr	r3, [pc, #8]	; (1000abc0 <sms_dualtimer_unregister_callback+0x10>)
1000abb6:	4798      	blx	r3
}

void sms_dualtimer_unregister_callback(enum dualtimer_timer tmr)
{
	sms_dualtimer_stop(tmr);
	dualtimer_unregister_callback(tmr);
1000abb8:	0020      	movs	r0, r4
1000abba:	4b02      	ldr	r3, [pc, #8]	; (1000abc4 <sms_dualtimer_unregister_callback+0x14>)
1000abbc:	4798      	blx	r3
}
1000abbe:	bd10      	pop	{r4, pc}
1000abc0:	1000b0a5 	.word	0x1000b0a5
1000abc4:	1000b1e5 	.word	0x1000b1e5

1000abc8 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000abc8:	b510      	push	{r4, lr}
1000abca:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000abcc:	2801      	cmp	r0, #1
1000abce:	d006      	beq.n	1000abde <sms_dualtimer_start+0x16>
1000abd0:	2800      	cmp	r0, #0
1000abd2:	d002      	beq.n	1000abda <sms_dualtimer_start+0x12>
1000abd4:	2802      	cmp	r0, #2
1000abd6:	d004      	beq.n	1000abe2 <sms_dualtimer_start+0x1a>
1000abd8:	e005      	b.n	1000abe6 <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000abda:	221a      	movs	r2, #26
1000abdc:	e004      	b.n	1000abe8 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000abde:	4a0a      	ldr	r2, [pc, #40]	; (1000ac08 <sms_dualtimer_start+0x40>)
        break;
1000abe0:	e002      	b.n	1000abe8 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000abe2:	4a0a      	ldr	r2, [pc, #40]	; (1000ac0c <sms_dualtimer_start+0x44>)
        break;
1000abe4:	e000      	b.n	1000abe8 <sms_dualtimer_start+0x20>
	dualtimer_unregister_callback(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000abe6:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000abe8:	2900      	cmp	r1, #0
1000abea:	d100      	bne.n	1000abee <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000abec:	3101      	adds	r1, #1
    }
    
    //ulp_ready = false;
    DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000abee:	434a      	muls	r2, r1
1000abf0:	2100      	movs	r1, #0
1000abf2:	0020      	movs	r0, r4
1000abf4:	4b06      	ldr	r3, [pc, #24]	; (1000ac10 <sms_dualtimer_start+0x48>)
1000abf6:	4798      	blx	r3
    dualtimer_enable(tmr);
1000abf8:	0020      	movs	r0, r4
1000abfa:	4b06      	ldr	r3, [pc, #24]	; (1000ac14 <sms_dualtimer_start+0x4c>)
1000abfc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000abfe:	2280      	movs	r2, #128	; 0x80
1000ac00:	01d2      	lsls	r2, r2, #7
1000ac02:	4b05      	ldr	r3, [pc, #20]	; (1000ac18 <sms_dualtimer_start+0x50>)
1000ac04:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000ac06:	bd10      	pop	{r4, pc}
1000ac08:	00006590 	.word	0x00006590
1000ac0c:	018cba80 	.word	0x018cba80
1000ac10:	1000b059 	.word	0x1000b059
1000ac14:	1000b081 	.word	0x1000b081
1000ac18:	e000e100 	.word	0xe000e100

1000ac1c <sms_dualtimer2_cb>:
    timer1_instance.new_int = true;
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}

void sms_dualtimer2_cb(void)
{
1000ac1c:	b510      	push	{r4, lr}
    timer2_instance.new_int = true;
1000ac1e:	2201      	movs	r2, #1
1000ac20:	4b04      	ldr	r3, [pc, #16]	; (1000ac34 <sms_dualtimer2_cb+0x18>)
1000ac22:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000ac24:	2300      	movs	r3, #0
1000ac26:	2200      	movs	r2, #0
1000ac28:	2101      	movs	r1, #1
1000ac2a:	2041      	movs	r0, #65	; 0x41
1000ac2c:	4c02      	ldr	r4, [pc, #8]	; (1000ac38 <sms_dualtimer2_cb+0x1c>)
1000ac2e:	47a0      	blx	r4
}
1000ac30:	bd10      	pop	{r4, pc}
1000ac32:	46c0      	nop			; (mov r8, r8)
1000ac34:	1001a2d0 	.word	0x1001a2d0
1000ac38:	1000e27d 	.word	0x1000e27d

1000ac3c <sms_dualtimer2_fn>:
{
	
}

void sms_dualtimer2_fn(void)
{
1000ac3c:	b510      	push	{r4, lr}
	switch(timer2_instance.current_mode) {
1000ac3e:	4b07      	ldr	r3, [pc, #28]	; (1000ac5c <sms_dualtimer2_fn+0x20>)
1000ac40:	785b      	ldrb	r3, [r3, #1]
1000ac42:	2b01      	cmp	r3, #1
1000ac44:	d109      	bne.n	1000ac5a <sms_dualtimer2_fn+0x1e>
		case TIMER_MODE_ADVERTISING:
		sms_led_toggle(SMS_LED_0);
1000ac46:	2016      	movs	r0, #22
1000ac48:	4b05      	ldr	r3, [pc, #20]	; (1000ac60 <sms_dualtimer2_fn+0x24>)
1000ac4a:	4798      	blx	r3
		sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_ADV_MS, timer2_instance.id);
1000ac4c:	4b03      	ldr	r3, [pc, #12]	; (1000ac5c <sms_dualtimer2_fn+0x20>)
1000ac4e:	781a      	ldrb	r2, [r3, #0]
1000ac50:	21fa      	movs	r1, #250	; 0xfa
1000ac52:	0089      	lsls	r1, r1, #2
1000ac54:	2001      	movs	r0, #1
1000ac56:	4b03      	ldr	r3, [pc, #12]	; (1000ac64 <sms_dualtimer2_fn+0x28>)
1000ac58:	4798      	blx	r3
		break;
		
		default:
		break;
	}
}
1000ac5a:	bd10      	pop	{r4, pc}
1000ac5c:	1001a2d0 	.word	0x1001a2d0
1000ac60:	1000a345 	.word	0x1000a345
1000ac64:	1000abc9 	.word	0x1000abc9

1000ac68 <delay_ms>:

void delay_ms(uint32_t delay) {
1000ac68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ac6a:	b083      	sub	sp, #12
1000ac6c:	0001      	movs	r1, r0
	uint32_t last = 0xffffffff;
	volatile uint32_t now;
	volatile bool quit = false;
1000ac6e:	2200      	movs	r2, #0
1000ac70:	466b      	mov	r3, sp
1000ac72:	70da      	strb	r2, [r3, #3]
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
1000ac74:	4b11      	ldr	r3, [pc, #68]	; (1000acbc <delay_ms+0x54>)
1000ac76:	781a      	ldrb	r2, [r3, #0]
1000ac78:	2001      	movs	r0, #1
1000ac7a:	4b11      	ldr	r3, [pc, #68]	; (1000acc0 <delay_ms+0x58>)
1000ac7c:	4798      	blx	r3
		break;
	}
}

void delay_ms(uint32_t delay) {
	uint32_t last = 0xffffffff;
1000ac7e:	2701      	movs	r7, #1
1000ac80:	427f      	negs	r7, r7
	volatile uint32_t now;
	volatile bool quit = false;
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
	while(!quit) {
1000ac82:	466b      	mov	r3, sp
1000ac84:	1cdc      	adds	r4, r3, #3
		now = dualtimer_get_value(timer2_instance.id);
1000ac86:	4e0d      	ldr	r6, [pc, #52]	; (1000acbc <delay_ms+0x54>)
1000ac88:	4d0e      	ldr	r5, [pc, #56]	; (1000acc4 <delay_ms+0x5c>)
void delay_ms(uint32_t delay) {
	uint32_t last = 0xffffffff;
	volatile uint32_t now;
	volatile bool quit = false;
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
	while(!quit) {
1000ac8a:	e00d      	b.n	1000aca8 <delay_ms+0x40>
		now = dualtimer_get_value(timer2_instance.id);
1000ac8c:	7830      	ldrb	r0, [r6, #0]
1000ac8e:	47a8      	blx	r5
1000ac90:	9001      	str	r0, [sp, #4]
		DBG_LOG_DEV("now: %lu", now);
1000ac92:	9b01      	ldr	r3, [sp, #4]
		if((now == 0) || (now > last)) quit = true;
1000ac94:	9b01      	ldr	r3, [sp, #4]
1000ac96:	2b00      	cmp	r3, #0
1000ac98:	d002      	beq.n	1000aca0 <delay_ms+0x38>
1000ac9a:	9b01      	ldr	r3, [sp, #4]
1000ac9c:	429f      	cmp	r7, r3
1000ac9e:	d202      	bcs.n	1000aca6 <delay_ms+0x3e>
1000aca0:	2301      	movs	r3, #1
1000aca2:	7023      	strb	r3, [r4, #0]
1000aca4:	e000      	b.n	1000aca8 <delay_ms+0x40>
		else last = now;
1000aca6:	9f01      	ldr	r7, [sp, #4]
void delay_ms(uint32_t delay) {
	uint32_t last = 0xffffffff;
	volatile uint32_t now;
	volatile bool quit = false;
	sms_dualtimer_start(TIMER_UNIT_MS, delay, timer2_instance.id);
	while(!quit) {
1000aca8:	7823      	ldrb	r3, [r4, #0]
1000acaa:	2b00      	cmp	r3, #0
1000acac:	d0ee      	beq.n	1000ac8c <delay_ms+0x24>
		now = dualtimer_get_value(timer2_instance.id);
		DBG_LOG_DEV("now: %lu", now);
		if((now == 0) || (now > last)) quit = true;
		else last = now;
	}
	sms_dualtimer_stop(timer2_instance.id);
1000acae:	4b03      	ldr	r3, [pc, #12]	; (1000acbc <delay_ms+0x54>)
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000acb0:	7818      	ldrb	r0, [r3, #0]
1000acb2:	4b05      	ldr	r3, [pc, #20]	; (1000acc8 <delay_ms+0x60>)
1000acb4:	4798      	blx	r3
		DBG_LOG_DEV("now: %lu", now);
		if((now == 0) || (now > last)) quit = true;
		else last = now;
	}
	sms_dualtimer_stop(timer2_instance.id);
1000acb6:	b003      	add	sp, #12
1000acb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000acba:	46c0      	nop			; (mov r8, r8)
1000acbc:	1001a2d0 	.word	0x1001a2d0
1000acc0:	1000abc9 	.word	0x1000abc9
1000acc4:	1000b045 	.word	0x1000b045
1000acc8:	1000b0a5 	.word	0x1000b0a5

1000accc <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000accc:	230c      	movs	r3, #12
1000acce:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000acd0:	2300      	movs	r3, #0
1000acd2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000acd4:	7083      	strb	r3, [r0, #2]
}
1000acd6:	4770      	bx	lr

1000acd8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000acd8:	2301      	movs	r3, #1
1000acda:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000acdc:	2300      	movs	r3, #0
1000acde:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000ace0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000ace2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000ace4:	3381      	adds	r3, #129	; 0x81
1000ace6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000ace8:	3b77      	subs	r3, #119	; 0x77
1000acea:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000acec:	3301      	adds	r3, #1
1000acee:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000acf0:	3301      	adds	r3, #1
1000acf2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000acf4:	3301      	adds	r3, #1
1000acf6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000acf8:	3b0b      	subs	r3, #11
1000acfa:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000acfc:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000acfe:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000ad00:	6243      	str	r3, [r0, #36]	; 0x24
};
1000ad02:	4770      	bx	lr

1000ad04 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000ad04:	b530      	push	{r4, r5, lr}
1000ad06:	b083      	sub	sp, #12
1000ad08:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000ad0a:	780b      	ldrb	r3, [r1, #0]
1000ad0c:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000ad0e:	784b      	ldrb	r3, [r1, #1]
1000ad10:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000ad12:	788b      	ldrb	r3, [r1, #2]
1000ad14:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ad16:	ad01      	add	r5, sp, #4
1000ad18:	0028      	movs	r0, r5
1000ad1a:	4b07      	ldr	r3, [pc, #28]	; (1000ad38 <spi_attach_slave+0x34>)
1000ad1c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ad1e:	2301      	movs	r3, #1
1000ad20:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000ad22:	7820      	ldrb	r0, [r4, #0]
1000ad24:	0029      	movs	r1, r5
1000ad26:	4b05      	ldr	r3, [pc, #20]	; (1000ad3c <spi_attach_slave+0x38>)
1000ad28:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000ad2a:	7820      	ldrb	r0, [r4, #0]
1000ad2c:	2101      	movs	r1, #1
1000ad2e:	4b04      	ldr	r3, [pc, #16]	; (1000ad40 <spi_attach_slave+0x3c>)
1000ad30:	4798      	blx	r3
}
1000ad32:	b003      	add	sp, #12
1000ad34:	bd30      	pop	{r4, r5, pc}
1000ad36:	46c0      	nop			; (mov r8, r8)
1000ad38:	1000b351 	.word	0x1000b351
1000ad3c:	1000b361 	.word	0x1000b361
1000ad40:	1000b5b9 	.word	0x1000b5b9

1000ad44 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000ad44:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000ad46:	2201      	movs	r2, #1
1000ad48:	761a      	strb	r2, [r3, #24]
}
1000ad4a:	4770      	bx	lr

1000ad4c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000ad4c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000ad4e:	2300      	movs	r3, #0
1000ad50:	6802      	ldr	r2, [r0, #0]
1000ad52:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000ad54:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000ad56:	4a0d      	ldr	r2, [pc, #52]	; (1000ad8c <spi_disable+0x40>)
1000ad58:	4293      	cmp	r3, r2
1000ad5a:	d109      	bne.n	1000ad70 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000ad5c:	2041      	movs	r0, #65	; 0x41
1000ad5e:	4c0c      	ldr	r4, [pc, #48]	; (1000ad90 <spi_disable+0x44>)
1000ad60:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000ad62:	2026      	movs	r0, #38	; 0x26
1000ad64:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000ad66:	2038      	movs	r0, #56	; 0x38
1000ad68:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000ad6a:	2001      	movs	r0, #1
1000ad6c:	47a0      	blx	r4
1000ad6e:	e00b      	b.n	1000ad88 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000ad70:	4a08      	ldr	r2, [pc, #32]	; (1000ad94 <spi_disable+0x48>)
1000ad72:	4293      	cmp	r3, r2
1000ad74:	d108      	bne.n	1000ad88 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000ad76:	2042      	movs	r0, #66	; 0x42
1000ad78:	4c05      	ldr	r4, [pc, #20]	; (1000ad90 <spi_disable+0x44>)
1000ad7a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000ad7c:	2027      	movs	r0, #39	; 0x27
1000ad7e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000ad80:	2039      	movs	r0, #57	; 0x39
1000ad82:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000ad84:	2002      	movs	r0, #2
1000ad86:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000ad88:	bd10      	pop	{r4, pc}
1000ad8a:	46c0      	nop			; (mov r8, r8)
1000ad8c:	40006000 	.word	0x40006000
1000ad90:	1000bd51 	.word	0x1000bd51
1000ad94:	40007000 	.word	0x40007000

1000ad98 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000ad98:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000ad9a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000ad9c:	4b09      	ldr	r3, [pc, #36]	; (1000adc4 <spi_reset+0x2c>)
1000ad9e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000ada0:	4b09      	ldr	r3, [pc, #36]	; (1000adc8 <spi_reset+0x30>)
1000ada2:	429c      	cmp	r4, r3
1000ada4:	d105      	bne.n	1000adb2 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000ada6:	2001      	movs	r0, #1
1000ada8:	4c08      	ldr	r4, [pc, #32]	; (1000adcc <spi_reset+0x34>)
1000adaa:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000adac:	2038      	movs	r0, #56	; 0x38
1000adae:	47a0      	blx	r4
1000adb0:	e007      	b.n	1000adc2 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000adb2:	4b07      	ldr	r3, [pc, #28]	; (1000add0 <spi_reset+0x38>)
1000adb4:	429c      	cmp	r4, r3
1000adb6:	d104      	bne.n	1000adc2 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000adb8:	2002      	movs	r0, #2
1000adba:	4c04      	ldr	r4, [pc, #16]	; (1000adcc <spi_reset+0x34>)
1000adbc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000adbe:	2039      	movs	r0, #57	; 0x39
1000adc0:	47a0      	blx	r4
	}
}
1000adc2:	bd10      	pop	{r4, pc}
1000adc4:	1000ad4d 	.word	0x1000ad4d
1000adc8:	40006000 	.word	0x40006000
1000adcc:	1000c0bd 	.word	0x1000c0bd
1000add0:	40007000 	.word	0x40007000

1000add4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000add4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000add6:	465f      	mov	r7, fp
1000add8:	4646      	mov	r6, r8
1000adda:	b4c0      	push	{r6, r7}
1000addc:	b083      	sub	sp, #12
1000adde:	0006      	movs	r6, r0
1000ade0:	4688      	mov	r8, r1
1000ade2:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000ade4:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000ade6:	7e0b      	ldrb	r3, [r1, #24]
1000ade8:	07db      	lsls	r3, r3, #31
1000adea:	d501      	bpl.n	1000adf0 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000adec:	2300      	movs	r3, #0
1000adee:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000adf0:	0030      	movs	r0, r6
1000adf2:	4b4a      	ldr	r3, [pc, #296]	; (1000af1c <spi_init+0x148>)
1000adf4:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000adf6:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000adf8:	4a49      	ldr	r2, [pc, #292]	; (1000af20 <spi_init+0x14c>)
1000adfa:	4293      	cmp	r3, r2
1000adfc:	d109      	bne.n	1000ae12 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000adfe:	2041      	movs	r0, #65	; 0x41
1000ae00:	4c48      	ldr	r4, [pc, #288]	; (1000af24 <spi_init+0x150>)
1000ae02:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000ae04:	2026      	movs	r0, #38	; 0x26
1000ae06:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000ae08:	2038      	movs	r0, #56	; 0x38
1000ae0a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000ae0c:	2001      	movs	r0, #1
1000ae0e:	47a0      	blx	r4
1000ae10:	e00b      	b.n	1000ae2a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000ae12:	4a45      	ldr	r2, [pc, #276]	; (1000af28 <spi_init+0x154>)
1000ae14:	4293      	cmp	r3, r2
1000ae16:	d108      	bne.n	1000ae2a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000ae18:	2042      	movs	r0, #66	; 0x42
1000ae1a:	4c42      	ldr	r4, [pc, #264]	; (1000af24 <spi_init+0x150>)
1000ae1c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000ae1e:	2027      	movs	r0, #39	; 0x27
1000ae20:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000ae22:	2039      	movs	r0, #57	; 0x39
1000ae24:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000ae26:	2002      	movs	r0, #2
1000ae28:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000ae2a:	a801      	add	r0, sp, #4
1000ae2c:	4b3f      	ldr	r3, [pc, #252]	; (1000af2c <spi_init+0x158>)
1000ae2e:	4798      	blx	r3
1000ae30:	002c      	movs	r4, r5
1000ae32:	3408      	adds	r4, #8
1000ae34:	2318      	movs	r3, #24
1000ae36:	469b      	mov	fp, r3
1000ae38:	44ab      	add	fp, r5
1000ae3a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000ae3c:	6820      	ldr	r0, [r4, #0]
1000ae3e:	1c43      	adds	r3, r0, #1
1000ae40:	d011      	beq.n	1000ae66 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000ae42:	782b      	ldrb	r3, [r5, #0]
1000ae44:	2b01      	cmp	r3, #1
1000ae46:	d102      	bne.n	1000ae4e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000ae48:	466a      	mov	r2, sp
1000ae4a:	7113      	strb	r3, [r2, #4]
1000ae4c:	e003      	b.n	1000ae56 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000ae4e:	2b00      	cmp	r3, #0
1000ae50:	d101      	bne.n	1000ae56 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000ae52:	466a      	mov	r2, sp
1000ae54:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000ae56:	b2c0      	uxtb	r0, r0
1000ae58:	a901      	add	r1, sp, #4
1000ae5a:	4b35      	ldr	r3, [pc, #212]	; (1000af30 <spi_init+0x15c>)
1000ae5c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000ae5e:	8a39      	ldrh	r1, [r7, #16]
1000ae60:	7838      	ldrb	r0, [r7, #0]
1000ae62:	4b34      	ldr	r3, [pc, #208]	; (1000af34 <spi_init+0x160>)
1000ae64:	4798      	blx	r3
1000ae66:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000ae68:	455c      	cmp	r4, fp
1000ae6a:	d1e6      	bne.n	1000ae3a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000ae6c:	78eb      	ldrb	r3, [r5, #3]
1000ae6e:	4642      	mov	r2, r8
1000ae70:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000ae72:	782b      	ldrb	r3, [r5, #0]
1000ae74:	2b01      	cmp	r3, #1
1000ae76:	d100      	bne.n	1000ae7a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000ae78:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000ae7a:	782b      	ldrb	r3, [r5, #0]
1000ae7c:	2b00      	cmp	r3, #0
1000ae7e:	d101      	bne.n	1000ae84 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000ae80:	4642      	mov	r2, r8
1000ae82:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000ae84:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000ae86:	782a      	ldrb	r2, [r5, #0]
1000ae88:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000ae8a:	782a      	ldrb	r2, [r5, #0]
1000ae8c:	2a01      	cmp	r2, #1
1000ae8e:	d101      	bne.n	1000ae94 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000ae90:	792a      	ldrb	r2, [r5, #4]
1000ae92:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000ae94:	786a      	ldrb	r2, [r5, #1]
1000ae96:	2a04      	cmp	r2, #4
1000ae98:	d104      	bne.n	1000aea4 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000ae9a:	2124      	movs	r1, #36	; 0x24
1000ae9c:	5c58      	ldrb	r0, [r3, r1]
1000ae9e:	4302      	orrs	r2, r0
1000aea0:	545a      	strb	r2, [r3, r1]
1000aea2:	e004      	b.n	1000aeae <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000aea4:	2124      	movs	r1, #36	; 0x24
1000aea6:	5c5a      	ldrb	r2, [r3, r1]
1000aea8:	2004      	movs	r0, #4
1000aeaa:	4382      	bics	r2, r0
1000aeac:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000aeae:	78aa      	ldrb	r2, [r5, #2]
1000aeb0:	2a01      	cmp	r2, #1
1000aeb2:	d01a      	beq.n	1000aeea <spi_init+0x116>
1000aeb4:	2a00      	cmp	r2, #0
1000aeb6:	d004      	beq.n	1000aec2 <spi_init+0xee>
1000aeb8:	2a02      	cmp	r2, #2
1000aeba:	d00c      	beq.n	1000aed6 <spi_init+0x102>
1000aebc:	2a03      	cmp	r2, #3
1000aebe:	d01e      	beq.n	1000aefe <spi_init+0x12a>
1000aec0:	e026      	b.n	1000af10 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000aec2:	2224      	movs	r2, #36	; 0x24
1000aec4:	5c99      	ldrb	r1, [r3, r2]
1000aec6:	2002      	movs	r0, #2
1000aec8:	4381      	bics	r1, r0
1000aeca:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000aecc:	5c99      	ldrb	r1, [r3, r2]
1000aece:	3801      	subs	r0, #1
1000aed0:	4381      	bics	r1, r0
1000aed2:	5499      	strb	r1, [r3, r2]
1000aed4:	e01c      	b.n	1000af10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000aed6:	2224      	movs	r2, #36	; 0x24
1000aed8:	5c98      	ldrb	r0, [r3, r2]
1000aeda:	2102      	movs	r1, #2
1000aedc:	4301      	orrs	r1, r0
1000aede:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000aee0:	5c99      	ldrb	r1, [r3, r2]
1000aee2:	2001      	movs	r0, #1
1000aee4:	4381      	bics	r1, r0
1000aee6:	5499      	strb	r1, [r3, r2]
1000aee8:	e012      	b.n	1000af10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000aeea:	2224      	movs	r2, #36	; 0x24
1000aeec:	5c99      	ldrb	r1, [r3, r2]
1000aeee:	2002      	movs	r0, #2
1000aef0:	4381      	bics	r1, r0
1000aef2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000aef4:	5c98      	ldrb	r0, [r3, r2]
1000aef6:	2101      	movs	r1, #1
1000aef8:	4301      	orrs	r1, r0
1000aefa:	5499      	strb	r1, [r3, r2]
1000aefc:	e008      	b.n	1000af10 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000aefe:	2224      	movs	r2, #36	; 0x24
1000af00:	5c98      	ldrb	r0, [r3, r2]
1000af02:	2102      	movs	r1, #2
1000af04:	4301      	orrs	r1, r0
1000af06:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000af08:	5c98      	ldrb	r0, [r3, r2]
1000af0a:	2101      	movs	r1, #1
1000af0c:	4301      	orrs	r1, r0
1000af0e:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000af10:	2000      	movs	r0, #0
1000af12:	b003      	add	sp, #12
1000af14:	bc0c      	pop	{r2, r3}
1000af16:	4690      	mov	r8, r2
1000af18:	469b      	mov	fp, r3
1000af1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af1c:	1000ad99 	.word	0x1000ad99
1000af20:	40006000 	.word	0x40006000
1000af24:	1000b9f5 	.word	0x1000b9f5
1000af28:	40007000 	.word	0x40007000
1000af2c:	1000b351 	.word	0x1000b351
1000af30:	1000b361 	.word	0x1000b361
1000af34:	1000b645 	.word	0x1000b645

1000af38 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000af38:	b5f0      	push	{r4, r5, r6, r7, lr}
1000af3a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000af3c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000af3e:	2600      	movs	r6, #0
1000af40:	466d      	mov	r5, sp
1000af42:	71ee      	strb	r6, [r5, #7]
1000af44:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000af46:	2c00      	cmp	r4, #0
1000af48:	d034      	beq.n	1000afb4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000af4a:	2900      	cmp	r1, #0
1000af4c:	d104      	bne.n	1000af58 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000af4e:	0029      	movs	r1, r5
1000af50:	7980      	ldrb	r0, [r0, #6]
1000af52:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000af54:	2701      	movs	r7, #1
1000af56:	e00b      	b.n	1000af70 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000af58:	2a00      	cmp	r2, #0
1000af5a:	d005      	beq.n	1000af68 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000af5c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000af5e:	2b00      	cmp	r3, #0
1000af60:	d029      	beq.n	1000afb6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000af62:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000af64:	2700      	movs	r7, #0
1000af66:	e003      	b.n	1000af70 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000af68:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000af6a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000af6c:	466a      	mov	r2, sp
1000af6e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000af70:	2528      	movs	r5, #40	; 0x28
1000af72:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000af74:	07c0      	lsls	r0, r0, #31
1000af76:	d4fc      	bmi.n	1000af72 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000af78:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000af7a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000af7c:	2b00      	cmp	r3, #0
1000af7e:	d014      	beq.n	1000afaa <spi_transceive_buffer_wait+0x72>
1000af80:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000af82:	4278      	negs	r0, r7
1000af84:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000af86:	4270      	negs	r0, r6
1000af88:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000af8a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000af8c:	07c0      	lsls	r0, r0, #31
1000af8e:	d5fc      	bpl.n	1000af8a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000af90:	7808      	ldrb	r0, [r1, #0]
1000af92:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000af94:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000af96:	07c0      	lsls	r0, r0, #31
1000af98:	d5fc      	bpl.n	1000af94 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000af9a:	7920      	ldrb	r0, [r4, #4]
1000af9c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000af9e:	3501      	adds	r5, #1
1000afa0:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000afa2:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000afa4:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000afa6:	42ab      	cmp	r3, r5
1000afa8:	d1ef      	bne.n	1000af8a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000afaa:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000afac:	06db      	lsls	r3, r3, #27
1000afae:	d5fc      	bpl.n	1000afaa <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000afb0:	2000      	movs	r0, #0
1000afb2:	e000      	b.n	1000afb6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000afb4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000afb6:	b003      	add	sp, #12
1000afb8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000afba:	46c0      	nop			; (mov r8, r8)

1000afbc <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000afbc:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000afbe:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000afc0:	2a00      	cmp	r2, #0
1000afc2:	d003      	beq.n	1000afcc <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000afc4:	2100      	movs	r1, #0
1000afc6:	4b04      	ldr	r3, [pc, #16]	; (1000afd8 <spi_select_slave+0x1c>)
1000afc8:	4798      	blx	r3
1000afca:	e002      	b.n	1000afd2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000afcc:	2101      	movs	r1, #1
1000afce:	4b02      	ldr	r3, [pc, #8]	; (1000afd8 <spi_select_slave+0x1c>)
1000afd0:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000afd2:	2000      	movs	r0, #0
1000afd4:	bd10      	pop	{r4, pc}
1000afd6:	46c0      	nop			; (mov r8, r8)
1000afd8:	1000b5b9 	.word	0x1000b5b9

1000afdc <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000afdc:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000afde:	4b0d      	ldr	r3, [pc, #52]	; (1000b014 <dualtimer_isr_handler+0x38>)
1000afe0:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000afe2:	2b00      	cmp	r3, #0
1000afe4:	d007      	beq.n	1000aff6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000afe6:	2201      	movs	r2, #1
1000afe8:	4b0a      	ldr	r3, [pc, #40]	; (1000b014 <dualtimer_isr_handler+0x38>)
1000afea:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000afec:	4b0a      	ldr	r3, [pc, #40]	; (1000b018 <dualtimer_isr_handler+0x3c>)
1000afee:	681b      	ldr	r3, [r3, #0]
1000aff0:	2b00      	cmp	r3, #0
1000aff2:	d000      	beq.n	1000aff6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000aff4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000aff6:	2334      	movs	r3, #52	; 0x34
1000aff8:	4a06      	ldr	r2, [pc, #24]	; (1000b014 <dualtimer_isr_handler+0x38>)
1000affa:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000affc:	2b00      	cmp	r3, #0
1000affe:	d007      	beq.n	1000b010 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000b000:	2101      	movs	r1, #1
1000b002:	232c      	movs	r3, #44	; 0x2c
1000b004:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000b006:	4b05      	ldr	r3, [pc, #20]	; (1000b01c <dualtimer_isr_handler+0x40>)
1000b008:	681b      	ldr	r3, [r3, #0]
1000b00a:	2b00      	cmp	r3, #0
1000b00c:	d000      	beq.n	1000b010 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000b00e:	4798      	blx	r3
	}
}
1000b010:	bd10      	pop	{r4, pc}
1000b012:	46c0      	nop			; (mov r8, r8)
1000b014:	40001000 	.word	0x40001000
1000b018:	100186f4 	.word	0x100186f4
1000b01c:	100186f8 	.word	0x100186f8

1000b020 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000b020:	2301      	movs	r3, #1
1000b022:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000b024:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b026:	2202      	movs	r2, #2
1000b028:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000b02a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b02c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000b02e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b030:	2200      	movs	r2, #0
1000b032:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000b034:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000b036:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000b038:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000b03a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000b03c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000b03e:	7602      	strb	r2, [r0, #24]
}
1000b040:	4770      	bx	lr
1000b042:	46c0      	nop			; (mov r8, r8)

1000b044 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b044:	2800      	cmp	r0, #0
1000b046:	d102      	bne.n	1000b04e <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000b048:	4b02      	ldr	r3, [pc, #8]	; (1000b054 <dualtimer_get_value+0x10>)
1000b04a:	6858      	ldr	r0, [r3, #4]
1000b04c:	e001      	b.n	1000b052 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000b04e:	4b01      	ldr	r3, [pc, #4]	; (1000b054 <dualtimer_get_value+0x10>)
1000b050:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000b052:	4770      	bx	lr
1000b054:	40001000 	.word	0x40001000

1000b058 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000b058:	2800      	cmp	r0, #0
1000b05a:	d107      	bne.n	1000b06c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b05c:	2900      	cmp	r1, #0
1000b05e:	d102      	bne.n	1000b066 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000b060:	4b06      	ldr	r3, [pc, #24]	; (1000b07c <dualtimer_set_counter+0x24>)
1000b062:	601a      	str	r2, [r3, #0]
1000b064:	e009      	b.n	1000b07a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000b066:	4b05      	ldr	r3, [pc, #20]	; (1000b07c <dualtimer_set_counter+0x24>)
1000b068:	619a      	str	r2, [r3, #24]
1000b06a:	e006      	b.n	1000b07a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000b06c:	2900      	cmp	r1, #0
1000b06e:	d102      	bne.n	1000b076 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000b070:	4b02      	ldr	r3, [pc, #8]	; (1000b07c <dualtimer_set_counter+0x24>)
1000b072:	621a      	str	r2, [r3, #32]
1000b074:	e001      	b.n	1000b07a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000b076:	4b01      	ldr	r3, [pc, #4]	; (1000b07c <dualtimer_set_counter+0x24>)
1000b078:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000b07a:	4770      	bx	lr
1000b07c:	40001000 	.word	0x40001000

1000b080 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b080:	2800      	cmp	r0, #0
1000b082:	d105      	bne.n	1000b090 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b084:	4a06      	ldr	r2, [pc, #24]	; (1000b0a0 <dualtimer_enable+0x20>)
1000b086:	7a11      	ldrb	r1, [r2, #8]
1000b088:	2380      	movs	r3, #128	; 0x80
1000b08a:	430b      	orrs	r3, r1
1000b08c:	7213      	strb	r3, [r2, #8]
1000b08e:	e005      	b.n	1000b09c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b090:	4903      	ldr	r1, [pc, #12]	; (1000b0a0 <dualtimer_enable+0x20>)
1000b092:	2228      	movs	r2, #40	; 0x28
1000b094:	5c88      	ldrb	r0, [r1, r2]
1000b096:	2380      	movs	r3, #128	; 0x80
1000b098:	4303      	orrs	r3, r0
1000b09a:	548b      	strb	r3, [r1, r2]
	}
}
1000b09c:	4770      	bx	lr
1000b09e:	46c0      	nop			; (mov r8, r8)
1000b0a0:	40001000 	.word	0x40001000

1000b0a4 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b0a4:	2800      	cmp	r0, #0
1000b0a6:	d105      	bne.n	1000b0b4 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000b0a8:	4a06      	ldr	r2, [pc, #24]	; (1000b0c4 <dualtimer_disable+0x20>)
1000b0aa:	7a11      	ldrb	r1, [r2, #8]
1000b0ac:	237f      	movs	r3, #127	; 0x7f
1000b0ae:	400b      	ands	r3, r1
1000b0b0:	7213      	strb	r3, [r2, #8]
1000b0b2:	e005      	b.n	1000b0c0 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000b0b4:	4903      	ldr	r1, [pc, #12]	; (1000b0c4 <dualtimer_disable+0x20>)
1000b0b6:	2228      	movs	r2, #40	; 0x28
1000b0b8:	5c88      	ldrb	r0, [r1, r2]
1000b0ba:	237f      	movs	r3, #127	; 0x7f
1000b0bc:	4003      	ands	r3, r0
1000b0be:	548b      	strb	r3, [r1, r2]
	}
}
1000b0c0:	4770      	bx	lr
1000b0c2:	46c0      	nop			; (mov r8, r8)
1000b0c4:	40001000 	.word	0x40001000

1000b0c8 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000b0c8:	b570      	push	{r4, r5, r6, lr}
1000b0ca:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000b0cc:	2004      	movs	r0, #4
1000b0ce:	4b39      	ldr	r3, [pc, #228]	; (1000b1b4 <dualtimer_init+0xec>)
1000b0d0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000b0d2:	7823      	ldrb	r3, [r4, #0]
1000b0d4:	2b00      	cmp	r3, #0
1000b0d6:	d102      	bne.n	1000b0de <dualtimer_init+0x16>
1000b0d8:	7b23      	ldrb	r3, [r4, #12]
1000b0da:	2b00      	cmp	r3, #0
1000b0dc:	d065      	beq.n	1000b1aa <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000b0de:	4936      	ldr	r1, [pc, #216]	; (1000b1b8 <dualtimer_init+0xf0>)
1000b0e0:	68ca      	ldr	r2, [r1, #12]
1000b0e2:	2320      	movs	r3, #32
1000b0e4:	4313      	orrs	r3, r2
1000b0e6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000b0e8:	7e22      	ldrb	r2, [r4, #24]
1000b0ea:	698b      	ldr	r3, [r1, #24]
1000b0ec:	2003      	movs	r0, #3
1000b0ee:	4002      	ands	r2, r0
1000b0f0:	0112      	lsls	r2, r2, #4
1000b0f2:	302d      	adds	r0, #45	; 0x2d
1000b0f4:	4383      	bics	r3, r0
1000b0f6:	4313      	orrs	r3, r2
1000b0f8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000b0fa:	7823      	ldrb	r3, [r4, #0]
1000b0fc:	2b00      	cmp	r3, #0
1000b0fe:	d026      	beq.n	1000b14e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b100:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000b102:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b104:	2b00      	cmp	r3, #0
1000b106:	d003      	beq.n	1000b110 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000b108:	3b02      	subs	r3, #2
1000b10a:	425d      	negs	r5, r3
1000b10c:	415d      	adcs	r5, r3
1000b10e:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000b110:	78a2      	ldrb	r2, [r4, #2]
1000b112:	0052      	lsls	r2, r2, #1
1000b114:	2502      	movs	r5, #2
1000b116:	402a      	ands	r2, r5
1000b118:	78e3      	ldrb	r3, [r4, #3]
1000b11a:	009b      	lsls	r3, r3, #2
1000b11c:	350a      	adds	r5, #10
1000b11e:	402b      	ands	r3, r5
1000b120:	431a      	orrs	r2, r3
1000b122:	0015      	movs	r5, r2
1000b124:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000b126:	7923      	ldrb	r3, [r4, #4]
1000b128:	2b00      	cmp	r3, #0
1000b12a:	d001      	beq.n	1000b130 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000b12c:	2320      	movs	r3, #32
1000b12e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000b130:	4b22      	ldr	r3, [pc, #136]	; (1000b1bc <dualtimer_init+0xf4>)
1000b132:	68a2      	ldr	r2, [r4, #8]
1000b134:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000b136:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000b138:	491f      	ldr	r1, [pc, #124]	; (1000b1b8 <dualtimer_init+0xf0>)
1000b13a:	22c4      	movs	r2, #196	; 0xc4
1000b13c:	0052      	lsls	r2, r2, #1
1000b13e:	5c88      	ldrb	r0, [r1, r2]
1000b140:	2301      	movs	r3, #1
1000b142:	4303      	orrs	r3, r0
1000b144:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000b146:	2000      	movs	r0, #0
1000b148:	4b1d      	ldr	r3, [pc, #116]	; (1000b1c0 <dualtimer_init+0xf8>)
1000b14a:	4798      	blx	r3
1000b14c:	e000      	b.n	1000b150 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000b14e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000b150:	7b23      	ldrb	r3, [r4, #12]
1000b152:	2b00      	cmp	r3, #0
1000b154:	d029      	beq.n	1000b1aa <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000b156:	7b63      	ldrb	r3, [r4, #13]
1000b158:	2b00      	cmp	r3, #0
1000b15a:	d005      	beq.n	1000b168 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000b15c:	2b01      	cmp	r3, #1
1000b15e:	d005      	beq.n	1000b16c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000b160:	2b02      	cmp	r3, #2
1000b162:	d104      	bne.n	1000b16e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000b164:	2540      	movs	r5, #64	; 0x40
1000b166:	e002      	b.n	1000b16e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000b168:	2501      	movs	r5, #1
1000b16a:	e000      	b.n	1000b16e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000b16c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000b16e:	7ba3      	ldrb	r3, [r4, #14]
1000b170:	005b      	lsls	r3, r3, #1
1000b172:	2102      	movs	r1, #2
1000b174:	4019      	ands	r1, r3
1000b176:	7be2      	ldrb	r2, [r4, #15]
1000b178:	0092      	lsls	r2, r2, #2
1000b17a:	230c      	movs	r3, #12
1000b17c:	4013      	ands	r3, r2
1000b17e:	430b      	orrs	r3, r1
1000b180:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000b182:	7c23      	ldrb	r3, [r4, #16]
1000b184:	2b00      	cmp	r3, #0
1000b186:	d001      	beq.n	1000b18c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000b188:	2320      	movs	r3, #32
1000b18a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000b18c:	6962      	ldr	r2, [r4, #20]
1000b18e:	4b0b      	ldr	r3, [pc, #44]	; (1000b1bc <dualtimer_init+0xf4>)
1000b190:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000b192:	2228      	movs	r2, #40	; 0x28
1000b194:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000b196:	4908      	ldr	r1, [pc, #32]	; (1000b1b8 <dualtimer_init+0xf0>)
1000b198:	3261      	adds	r2, #97	; 0x61
1000b19a:	32ff      	adds	r2, #255	; 0xff
1000b19c:	5c88      	ldrb	r0, [r1, r2]
1000b19e:	2302      	movs	r3, #2
1000b1a0:	4303      	orrs	r3, r0
1000b1a2:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000b1a4:	2001      	movs	r0, #1
1000b1a6:	4b06      	ldr	r3, [pc, #24]	; (1000b1c0 <dualtimer_init+0xf8>)
1000b1a8:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000b1aa:	4906      	ldr	r1, [pc, #24]	; (1000b1c4 <dualtimer_init+0xfc>)
1000b1ac:	201e      	movs	r0, #30
1000b1ae:	4b06      	ldr	r3, [pc, #24]	; (1000b1c8 <dualtimer_init+0x100>)
1000b1b0:	4798      	blx	r3
}
1000b1b2:	bd70      	pop	{r4, r5, r6, pc}
1000b1b4:	1000c0bd 	.word	0x1000c0bd
1000b1b8:	4000b000 	.word	0x4000b000
1000b1bc:	40001000 	.word	0x40001000
1000b1c0:	1000b081 	.word	0x1000b081
1000b1c4:	1000afdd 	.word	0x1000afdd
1000b1c8:	1000c525 	.word	0x1000c525

1000b1cc <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000b1cc:	2800      	cmp	r0, #0
1000b1ce:	d102      	bne.n	1000b1d6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000b1d0:	4b02      	ldr	r3, [pc, #8]	; (1000b1dc <dualtimer_register_callback+0x10>)
1000b1d2:	6019      	str	r1, [r3, #0]
1000b1d4:	e001      	b.n	1000b1da <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000b1d6:	4b02      	ldr	r3, [pc, #8]	; (1000b1e0 <dualtimer_register_callback+0x14>)
1000b1d8:	6019      	str	r1, [r3, #0]
	}
}
1000b1da:	4770      	bx	lr
1000b1dc:	100186f4 	.word	0x100186f4
1000b1e0:	100186f8 	.word	0x100186f8

1000b1e4 <dualtimer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void dualtimer_unregister_callback(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000b1e4:	2800      	cmp	r0, #0
1000b1e6:	d103      	bne.n	1000b1f0 <dualtimer_unregister_callback+0xc>
		dualtimer_callback_timer1 = NULL;
1000b1e8:	2200      	movs	r2, #0
1000b1ea:	4b03      	ldr	r3, [pc, #12]	; (1000b1f8 <dualtimer_unregister_callback+0x14>)
1000b1ec:	601a      	str	r2, [r3, #0]
1000b1ee:	e002      	b.n	1000b1f6 <dualtimer_unregister_callback+0x12>
	} else {
		dualtimer_callback_timer2 = NULL;
1000b1f0:	2200      	movs	r2, #0
1000b1f2:	4b02      	ldr	r3, [pc, #8]	; (1000b1fc <dualtimer_unregister_callback+0x18>)
1000b1f4:	601a      	str	r2, [r3, #0]
	}
1000b1f6:	4770      	bx	lr
1000b1f8:	100186f4 	.word	0x100186f4
1000b1fc:	100186f8 	.word	0x100186f8

1000b200 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000b200:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000b202:	4b16      	ldr	r3, [pc, #88]	; (1000b25c <gpio_port0_isr_handler+0x5c>)
1000b204:	681d      	ldr	r5, [r3, #0]
1000b206:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000b208:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000b20a:	07cb      	lsls	r3, r1, #31
1000b20c:	d407      	bmi.n	1000b21e <gpio_port0_isr_handler+0x1e>
1000b20e:	2301      	movs	r3, #1
1000b210:	2401      	movs	r4, #1
1000b212:	0018      	movs	r0, r3
1000b214:	0022      	movs	r2, r4
1000b216:	409a      	lsls	r2, r3
1000b218:	4211      	tst	r1, r2
1000b21a:	d014      	beq.n	1000b246 <gpio_port0_isr_handler+0x46>
1000b21c:	e001      	b.n	1000b222 <gpio_port0_isr_handler+0x22>
1000b21e:	2201      	movs	r2, #1
1000b220:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b222:	b292      	uxth	r2, r2
1000b224:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b226:	2346      	movs	r3, #70	; 0x46
1000b228:	4a0c      	ldr	r2, [pc, #48]	; (1000b25c <gpio_port0_isr_handler+0x5c>)
1000b22a:	5ad3      	ldrh	r3, [r2, r3]
1000b22c:	4103      	asrs	r3, r0
1000b22e:	07db      	lsls	r3, r3, #31
1000b230:	d50c      	bpl.n	1000b24c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000b232:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000b234:	5ad3      	ldrh	r3, [r2, r3]
1000b236:	4103      	asrs	r3, r0
1000b238:	07db      	lsls	r3, r3, #31
1000b23a:	d507      	bpl.n	1000b24c <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000b23c:	0080      	lsls	r0, r0, #2
1000b23e:	1810      	adds	r0, r2, r0
1000b240:	6843      	ldr	r3, [r0, #4]
1000b242:	4798      	blx	r3
1000b244:	e002      	b.n	1000b24c <gpio_port0_isr_handler+0x4c>
1000b246:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b248:	2b10      	cmp	r3, #16
1000b24a:	d1e2      	bne.n	1000b212 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000b24c:	2180      	movs	r1, #128	; 0x80
1000b24e:	0409      	lsls	r1, r1, #16
1000b250:	23c0      	movs	r3, #192	; 0xc0
1000b252:	005b      	lsls	r3, r3, #1
1000b254:	4a02      	ldr	r2, [pc, #8]	; (1000b260 <gpio_port0_isr_handler+0x60>)
1000b256:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000b258:	bd70      	pop	{r4, r5, r6, pc}
1000b25a:	46c0      	nop			; (mov r8, r8)
1000b25c:	1001a3d0 	.word	0x1001a3d0
1000b260:	e000e100 	.word	0xe000e100

1000b264 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000b264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000b266:	4b18      	ldr	r3, [pc, #96]	; (1000b2c8 <gpio_port1_isr_handler+0x64>)
1000b268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000b26a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000b26c:	b2b6      	uxth	r6, r6
1000b26e:	0037      	movs	r7, r6
1000b270:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b272:	0b76      	lsrs	r6, r6, #13
1000b274:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b276:	4d14      	ldr	r5, [pc, #80]	; (1000b2c8 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000b278:	2e00      	cmp	r6, #0
1000b27a:	d001      	beq.n	1000b280 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000b27c:	4b13      	ldr	r3, [pc, #76]	; (1000b2cc <gpio_port1_isr_handler+0x68>)
1000b27e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000b280:	0022      	movs	r2, r4
1000b282:	2301      	movs	r3, #1
1000b284:	40a3      	lsls	r3, r4
1000b286:	421f      	tst	r7, r3
1000b288:	d013      	beq.n	1000b2b2 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b28a:	b29b      	uxth	r3, r3
1000b28c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000b28e:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b290:	238e      	movs	r3, #142	; 0x8e
1000b292:	5aeb      	ldrh	r3, [r5, r3]
1000b294:	4123      	asrs	r3, r4
1000b296:	07db      	lsls	r3, r3, #31
1000b298:	d50b      	bpl.n	1000b2b2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000b29a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000b29c:	490a      	ldr	r1, [pc, #40]	; (1000b2c8 <gpio_port1_isr_handler+0x64>)
1000b29e:	5acb      	ldrh	r3, [r1, r3]
1000b2a0:	4123      	asrs	r3, r4
1000b2a2:	07db      	lsls	r3, r3, #31
1000b2a4:	d505      	bpl.n	1000b2b2 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000b2a6:	3212      	adds	r2, #18
1000b2a8:	0092      	lsls	r2, r2, #2
1000b2aa:	188a      	adds	r2, r1, r2
1000b2ac:	6853      	ldr	r3, [r2, #4]
1000b2ae:	4798      	blx	r3
				break;
1000b2b0:	e002      	b.n	1000b2b8 <gpio_port1_isr_handler+0x54>
1000b2b2:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000b2b4:	2c10      	cmp	r4, #16
1000b2b6:	d1df      	bne.n	1000b278 <gpio_port1_isr_handler+0x14>
1000b2b8:	2180      	movs	r1, #128	; 0x80
1000b2ba:	0449      	lsls	r1, r1, #17
1000b2bc:	23c0      	movs	r3, #192	; 0xc0
1000b2be:	005b      	lsls	r3, r3, #1
1000b2c0:	4a03      	ldr	r2, [pc, #12]	; (1000b2d0 <gpio_port1_isr_handler+0x6c>)
1000b2c2:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000b2c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b2c6:	46c0      	nop			; (mov r8, r8)
1000b2c8:	1001a3d0 	.word	0x1001a3d0
1000b2cc:	0001bc51 	.word	0x0001bc51
1000b2d0:	e000e100 	.word	0xe000e100

1000b2d4 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000b2d4:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000b2d6:	2390      	movs	r3, #144	; 0x90
1000b2d8:	4a1b      	ldr	r2, [pc, #108]	; (1000b348 <gpio_port2_isr_handler+0x74>)
1000b2da:	58d2      	ldr	r2, [r2, r3]
1000b2dc:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000b2de:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000b2e0:	04d9      	lsls	r1, r3, #19
1000b2e2:	d414      	bmi.n	1000b30e <gpio_port2_isr_handler+0x3a>
1000b2e4:	0499      	lsls	r1, r3, #18
1000b2e6:	d40a      	bmi.n	1000b2fe <gpio_port2_isr_handler+0x2a>
1000b2e8:	0459      	lsls	r1, r3, #17
1000b2ea:	d40c      	bmi.n	1000b306 <gpio_port2_isr_handler+0x32>
1000b2ec:	0bdb      	lsrs	r3, r3, #15
1000b2ee:	03db      	lsls	r3, r3, #15
1000b2f0:	b29b      	uxth	r3, r3
1000b2f2:	2b00      	cmp	r3, #0
1000b2f4:	d020      	beq.n	1000b338 <gpio_port2_isr_handler+0x64>
1000b2f6:	2380      	movs	r3, #128	; 0x80
1000b2f8:	021b      	lsls	r3, r3, #8
1000b2fa:	210f      	movs	r1, #15
1000b2fc:	e00a      	b.n	1000b314 <gpio_port2_isr_handler+0x40>
1000b2fe:	2380      	movs	r3, #128	; 0x80
1000b300:	019b      	lsls	r3, r3, #6
1000b302:	210d      	movs	r1, #13
1000b304:	e006      	b.n	1000b314 <gpio_port2_isr_handler+0x40>
1000b306:	2380      	movs	r3, #128	; 0x80
1000b308:	01db      	lsls	r3, r3, #7
1000b30a:	210e      	movs	r1, #14
1000b30c:	e002      	b.n	1000b314 <gpio_port2_isr_handler+0x40>
1000b30e:	2380      	movs	r3, #128	; 0x80
1000b310:	015b      	lsls	r3, r3, #5
1000b312:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000b314:	b29b      	uxth	r3, r3
1000b316:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b318:	23d6      	movs	r3, #214	; 0xd6
1000b31a:	4a0b      	ldr	r2, [pc, #44]	; (1000b348 <gpio_port2_isr_handler+0x74>)
1000b31c:	5ad3      	ldrh	r3, [r2, r3]
1000b31e:	410b      	asrs	r3, r1
1000b320:	07db      	lsls	r3, r3, #31
1000b322:	d509      	bpl.n	1000b338 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000b324:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000b326:	5ad3      	ldrh	r3, [r2, r3]
1000b328:	410b      	asrs	r3, r1
1000b32a:	07db      	lsls	r3, r3, #31
1000b32c:	d504      	bpl.n	1000b338 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000b32e:	3124      	adds	r1, #36	; 0x24
1000b330:	0089      	lsls	r1, r1, #2
1000b332:	1851      	adds	r1, r2, r1
1000b334:	684b      	ldr	r3, [r1, #4]
1000b336:	4798      	blx	r3
1000b338:	2180      	movs	r1, #128	; 0x80
1000b33a:	0489      	lsls	r1, r1, #18
1000b33c:	23c0      	movs	r3, #192	; 0xc0
1000b33e:	005b      	lsls	r3, r3, #1
1000b340:	4a02      	ldr	r2, [pc, #8]	; (1000b34c <gpio_port2_isr_handler+0x78>)
1000b342:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000b344:	bd10      	pop	{r4, pc}
1000b346:	46c0      	nop			; (mov r8, r8)
1000b348:	1001a3d0 	.word	0x1001a3d0
1000b34c:	e000e100 	.word	0xe000e100

1000b350 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000b350:	2300      	movs	r3, #0
1000b352:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000b354:	2201      	movs	r2, #1
1000b356:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000b358:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000b35a:	70c3      	strb	r3, [r0, #3]
}
1000b35c:	4770      	bx	lr
1000b35e:	46c0      	nop			; (mov r8, r8)

1000b360 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000b360:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000b362:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000b364:	2801      	cmp	r0, #1
1000b366:	d800      	bhi.n	1000b36a <gpio_pin_set_config+0xa>
1000b368:	e0c8      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000b36a:	2807      	cmp	r0, #7
1000b36c:	d809      	bhi.n	1000b382 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b36e:	4d64      	ldr	r5, [pc, #400]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b370:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000b372:	3b10      	subs	r3, #16
1000b374:	4003      	ands	r3, r0
1000b376:	009b      	lsls	r3, r3, #2
1000b378:	2407      	movs	r4, #7
1000b37a:	409c      	lsls	r4, r3
1000b37c:	43a2      	bics	r2, r4
1000b37e:	646a      	str	r2, [r5, #68]	; 0x44
1000b380:	e029      	b.n	1000b3d6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000b382:	280f      	cmp	r0, #15
1000b384:	d809      	bhi.n	1000b39a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b386:	4d5e      	ldr	r5, [pc, #376]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b388:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000b38a:	2307      	movs	r3, #7
1000b38c:	4003      	ands	r3, r0
1000b38e:	009b      	lsls	r3, r3, #2
1000b390:	2407      	movs	r4, #7
1000b392:	409c      	lsls	r4, r3
1000b394:	43a2      	bics	r2, r4
1000b396:	64aa      	str	r2, [r5, #72]	; 0x48
1000b398:	e01d      	b.n	1000b3d6 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000b39a:	2817      	cmp	r0, #23
1000b39c:	d809      	bhi.n	1000b3b2 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b39e:	4d58      	ldr	r5, [pc, #352]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b3a0:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000b3a2:	2307      	movs	r3, #7
1000b3a4:	4003      	ands	r3, r0
1000b3a6:	009b      	lsls	r3, r3, #2
1000b3a8:	2407      	movs	r4, #7
1000b3aa:	409c      	lsls	r4, r3
1000b3ac:	43a2      	bics	r2, r4
1000b3ae:	64ea      	str	r2, [r5, #76]	; 0x4c
1000b3b0:	e011      	b.n	1000b3d6 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000b3b2:	0003      	movs	r3, r0
1000b3b4:	3b2c      	subs	r3, #44	; 0x2c
1000b3b6:	2b03      	cmp	r3, #3
1000b3b8:	d80d      	bhi.n	1000b3d6 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000b3ba:	4d52      	ldr	r5, [pc, #328]	; (1000b504 <gpio_pin_set_config+0x1a4>)
1000b3bc:	2482      	movs	r4, #130	; 0x82
1000b3be:	00e4      	lsls	r4, r4, #3
1000b3c0:	5d2a      	ldrb	r2, [r5, r4]
1000b3c2:	0712      	lsls	r2, r2, #28
1000b3c4:	2601      	movs	r6, #1
1000b3c6:	409e      	lsls	r6, r3
1000b3c8:	0f12      	lsrs	r2, r2, #28
1000b3ca:	5d2b      	ldrb	r3, [r5, r4]
1000b3cc:	43b2      	bics	r2, r6
1000b3ce:	260f      	movs	r6, #15
1000b3d0:	43b3      	bics	r3, r6
1000b3d2:	4313      	orrs	r3, r2
1000b3d4:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000b3d6:	0003      	movs	r3, r0
1000b3d8:	3b1d      	subs	r3, #29
1000b3da:	2b02      	cmp	r3, #2
1000b3dc:	d829      	bhi.n	1000b432 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000b3de:	784b      	ldrb	r3, [r1, #1]
1000b3e0:	2b01      	cmp	r3, #1
1000b3e2:	d108      	bne.n	1000b3f6 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000b3e4:	4d47      	ldr	r5, [pc, #284]	; (1000b504 <gpio_pin_set_config+0x1a4>)
1000b3e6:	7d2b      	ldrb	r3, [r5, #20]
1000b3e8:	241f      	movs	r4, #31
1000b3ea:	1a24      	subs	r4, r4, r0
1000b3ec:	2201      	movs	r2, #1
1000b3ee:	40a2      	lsls	r2, r4
1000b3f0:	4393      	bics	r3, r2
1000b3f2:	752b      	strb	r3, [r5, #20]
1000b3f4:	e008      	b.n	1000b408 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000b3f6:	4c43      	ldr	r4, [pc, #268]	; (1000b504 <gpio_pin_set_config+0x1a4>)
1000b3f8:	7d25      	ldrb	r5, [r4, #20]
1000b3fa:	221f      	movs	r2, #31
1000b3fc:	1a12      	subs	r2, r2, r0
1000b3fe:	2301      	movs	r3, #1
1000b400:	4093      	lsls	r3, r2
1000b402:	432b      	orrs	r3, r5
1000b404:	b2db      	uxtb	r3, r3
1000b406:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000b408:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b40a:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000b40c:	2a00      	cmp	r2, #0
1000b40e:	d075      	beq.n	1000b4fc <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000b410:	493c      	ldr	r1, [pc, #240]	; (1000b504 <gpio_pin_set_config+0x1a4>)
1000b412:	880c      	ldrh	r4, [r1, #0]
1000b414:	221f      	movs	r2, #31
1000b416:	1a10      	subs	r0, r2, r0
1000b418:	0080      	lsls	r0, r0, #2
1000b41a:	3301      	adds	r3, #1
1000b41c:	4083      	lsls	r3, r0
1000b41e:	4323      	orrs	r3, r4
1000b420:	b29b      	uxth	r3, r3
1000b422:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000b424:	4a38      	ldr	r2, [pc, #224]	; (1000b508 <gpio_pin_set_config+0x1a8>)
1000b426:	7811      	ldrb	r1, [r2, #0]
1000b428:	2302      	movs	r3, #2
1000b42a:	430b      	orrs	r3, r1
1000b42c:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b42e:	2300      	movs	r3, #0
1000b430:	e064      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000b432:	780a      	ldrb	r2, [r1, #0]
1000b434:	2a00      	cmp	r2, #0
1000b436:	d140      	bne.n	1000b4ba <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000b438:	280f      	cmp	r0, #15
1000b43a:	d808      	bhi.n	1000b44e <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000b43c:	2301      	movs	r3, #1
1000b43e:	4083      	lsls	r3, r0
1000b440:	b29b      	uxth	r3, r3
1000b442:	4a32      	ldr	r2, [pc, #200]	; (1000b50c <gpio_pin_set_config+0x1ac>)
1000b444:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b446:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000b448:	281f      	cmp	r0, #31
1000b44a:	d857      	bhi.n	1000b4fc <gpio_pin_set_config+0x19c>
1000b44c:	e012      	b.n	1000b474 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000b44e:	281f      	cmp	r0, #31
1000b450:	d807      	bhi.n	1000b462 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b452:	220f      	movs	r2, #15
1000b454:	4002      	ands	r2, r0
1000b456:	2301      	movs	r3, #1
1000b458:	4093      	lsls	r3, r2
1000b45a:	b29b      	uxth	r3, r3
1000b45c:	4a2c      	ldr	r2, [pc, #176]	; (1000b510 <gpio_pin_set_config+0x1b0>)
1000b45e:	8293      	strh	r3, [r2, #20]
1000b460:	e008      	b.n	1000b474 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000b462:	230f      	movs	r3, #15
1000b464:	4018      	ands	r0, r3
1000b466:	3b0e      	subs	r3, #14
1000b468:	4083      	lsls	r3, r0
1000b46a:	b29b      	uxth	r3, r3
1000b46c:	4a29      	ldr	r2, [pc, #164]	; (1000b514 <gpio_pin_set_config+0x1b4>)
1000b46e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b470:	2300      	movs	r3, #0
1000b472:	e043      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000b474:	784b      	ldrb	r3, [r1, #1]
1000b476:	2b01      	cmp	r3, #1
1000b478:	d00c      	beq.n	1000b494 <gpio_pin_set_config+0x134>
1000b47a:	2b00      	cmp	r3, #0
1000b47c:	d002      	beq.n	1000b484 <gpio_pin_set_config+0x124>
1000b47e:	2b02      	cmp	r3, #2
1000b480:	d010      	beq.n	1000b4a4 <gpio_pin_set_config+0x144>
1000b482:	e03a      	b.n	1000b4fa <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000b484:	491e      	ldr	r1, [pc, #120]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b486:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000b488:	2301      	movs	r3, #1
1000b48a:	4083      	lsls	r3, r0
1000b48c:	4313      	orrs	r3, r2
1000b48e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b490:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000b492:	e033      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b494:	491a      	ldr	r1, [pc, #104]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b496:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000b498:	2201      	movs	r2, #1
1000b49a:	4082      	lsls	r2, r0
1000b49c:	4393      	bics	r3, r2
1000b49e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4a0:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b4a2:	e02b      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000b4a4:	4b16      	ldr	r3, [pc, #88]	; (1000b500 <gpio_pin_set_config+0x1a0>)
1000b4a6:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000b4a8:	2201      	movs	r2, #1
1000b4aa:	4082      	lsls	r2, r0
1000b4ac:	4311      	orrs	r1, r2
1000b4ae:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000b4b0:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000b4b2:	4391      	bics	r1, r2
1000b4b4:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4b6:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000b4b8:	e020      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4ba:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000b4bc:	2a01      	cmp	r2, #1
1000b4be:	d11d      	bne.n	1000b4fc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000b4c0:	280f      	cmp	r0, #15
1000b4c2:	d806      	bhi.n	1000b4d2 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000b4c4:	3301      	adds	r3, #1
1000b4c6:	4083      	lsls	r3, r0
1000b4c8:	b29b      	uxth	r3, r3
1000b4ca:	4a10      	ldr	r2, [pc, #64]	; (1000b50c <gpio_pin_set_config+0x1ac>)
1000b4cc:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4ce:	2300      	movs	r3, #0
1000b4d0:	e014      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000b4d2:	281f      	cmp	r0, #31
1000b4d4:	d808      	bhi.n	1000b4e8 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b4d6:	230f      	movs	r3, #15
1000b4d8:	4018      	ands	r0, r3
1000b4da:	3b0e      	subs	r3, #14
1000b4dc:	4083      	lsls	r3, r0
1000b4de:	b29b      	uxth	r3, r3
1000b4e0:	4a0b      	ldr	r2, [pc, #44]	; (1000b510 <gpio_pin_set_config+0x1b0>)
1000b4e2:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4e4:	2300      	movs	r3, #0
1000b4e6:	e009      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000b4e8:	230f      	movs	r3, #15
1000b4ea:	4018      	ands	r0, r3
1000b4ec:	3b0e      	subs	r3, #14
1000b4ee:	4083      	lsls	r3, r0
1000b4f0:	b29b      	uxth	r3, r3
1000b4f2:	4a08      	ldr	r2, [pc, #32]	; (1000b514 <gpio_pin_set_config+0x1b4>)
1000b4f4:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000b4f6:	2300      	movs	r3, #0
1000b4f8:	e000      	b.n	1000b4fc <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000b4fa:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000b4fc:	0018      	movs	r0, r3
1000b4fe:	bd70      	pop	{r4, r5, r6, pc}
1000b500:	4000b000 	.word	0x4000b000
1000b504:	4000f000 	.word	0x4000f000
1000b508:	4000e000 	.word	0x4000e000
1000b50c:	40010000 	.word	0x40010000
1000b510:	40011000 	.word	0x40011000
1000b514:	40013000 	.word	0x40013000

1000b518 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b518:	280f      	cmp	r0, #15
1000b51a:	d806      	bhi.n	1000b52a <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000b51c:	4b0f      	ldr	r3, [pc, #60]	; (1000b55c <gpio_pin_get_input_level+0x44>)
1000b51e:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000b520:	2301      	movs	r3, #1
1000b522:	4083      	lsls	r3, r0
1000b524:	0018      	movs	r0, r3
1000b526:	4008      	ands	r0, r1
1000b528:	e014      	b.n	1000b554 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000b52a:	281f      	cmp	r0, #31
1000b52c:	d809      	bhi.n	1000b542 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000b52e:	4b0c      	ldr	r3, [pc, #48]	; (1000b560 <gpio_pin_get_input_level+0x48>)
1000b530:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b532:	230f      	movs	r3, #15
1000b534:	4003      	ands	r3, r0
1000b536:	001a      	movs	r2, r3
1000b538:	2301      	movs	r3, #1
1000b53a:	4093      	lsls	r3, r2
1000b53c:	0018      	movs	r0, r3
1000b53e:	4008      	ands	r0, r1
1000b540:	e008      	b.n	1000b554 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000b542:	4b08      	ldr	r3, [pc, #32]	; (1000b564 <gpio_pin_get_input_level+0x4c>)
1000b544:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000b546:	230f      	movs	r3, #15
1000b548:	4003      	ands	r3, r0
1000b54a:	001a      	movs	r2, r3
1000b54c:	2301      	movs	r3, #1
1000b54e:	4093      	lsls	r3, r2
1000b550:	0018      	movs	r0, r3
1000b552:	4008      	ands	r0, r1
	}

	return regval;
1000b554:	1e43      	subs	r3, r0, #1
1000b556:	4198      	sbcs	r0, r3
1000b558:	b2c0      	uxtb	r0, r0
}
1000b55a:	4770      	bx	lr
1000b55c:	40010000 	.word	0x40010000
1000b560:	40011000 	.word	0x40011000
1000b564:	40013000 	.word	0x40013000

1000b568 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000b568:	280f      	cmp	r0, #15
1000b56a:	d806      	bhi.n	1000b57a <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000b56c:	4b0f      	ldr	r3, [pc, #60]	; (1000b5ac <gpio_pin_get_output_level+0x44>)
1000b56e:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000b570:	2301      	movs	r3, #1
1000b572:	4083      	lsls	r3, r0
1000b574:	0018      	movs	r0, r3
1000b576:	4008      	ands	r0, r1
1000b578:	e014      	b.n	1000b5a4 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000b57a:	281f      	cmp	r0, #31
1000b57c:	d809      	bhi.n	1000b592 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000b57e:	4b0c      	ldr	r3, [pc, #48]	; (1000b5b0 <gpio_pin_get_output_level+0x48>)
1000b580:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b582:	230f      	movs	r3, #15
1000b584:	4003      	ands	r3, r0
1000b586:	001a      	movs	r2, r3
1000b588:	2301      	movs	r3, #1
1000b58a:	4093      	lsls	r3, r2
1000b58c:	0018      	movs	r0, r3
1000b58e:	4008      	ands	r0, r1
1000b590:	e008      	b.n	1000b5a4 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000b592:	4b08      	ldr	r3, [pc, #32]	; (1000b5b4 <gpio_pin_get_output_level+0x4c>)
1000b594:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000b596:	230f      	movs	r3, #15
1000b598:	4003      	ands	r3, r0
1000b59a:	001a      	movs	r2, r3
1000b59c:	2301      	movs	r3, #1
1000b59e:	4093      	lsls	r3, r2
1000b5a0:	0018      	movs	r0, r3
1000b5a2:	4008      	ands	r0, r1
	}

	return regval;
1000b5a4:	1e43      	subs	r3, r0, #1
1000b5a6:	4198      	sbcs	r0, r3
1000b5a8:	b2c0      	uxtb	r0, r0
}
1000b5aa:	4770      	bx	lr
1000b5ac:	40010000 	.word	0x40010000
1000b5b0:	40011000 	.word	0x40011000
1000b5b4:	40013000 	.word	0x40013000

1000b5b8 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000b5b8:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000b5ba:	280f      	cmp	r0, #15
1000b5bc:	d810      	bhi.n	1000b5e0 <gpio_pin_set_output_level+0x28>
		if(level) {
1000b5be:	2900      	cmp	r1, #0
1000b5c0:	d007      	beq.n	1000b5d2 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000b5c2:	4a1d      	ldr	r2, [pc, #116]	; (1000b638 <gpio_pin_set_output_level+0x80>)
1000b5c4:	8891      	ldrh	r1, [r2, #4]
1000b5c6:	2301      	movs	r3, #1
1000b5c8:	4083      	lsls	r3, r0
1000b5ca:	430b      	orrs	r3, r1
1000b5cc:	b29b      	uxth	r3, r3
1000b5ce:	8093      	strh	r3, [r2, #4]
1000b5d0:	e031      	b.n	1000b636 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000b5d2:	4919      	ldr	r1, [pc, #100]	; (1000b638 <gpio_pin_set_output_level+0x80>)
1000b5d4:	888b      	ldrh	r3, [r1, #4]
1000b5d6:	2201      	movs	r2, #1
1000b5d8:	4082      	lsls	r2, r0
1000b5da:	4393      	bics	r3, r2
1000b5dc:	808b      	strh	r3, [r1, #4]
1000b5de:	e02a      	b.n	1000b636 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000b5e0:	281f      	cmp	r0, #31
1000b5e2:	d814      	bhi.n	1000b60e <gpio_pin_set_output_level+0x56>
		if(level) {
1000b5e4:	2900      	cmp	r1, #0
1000b5e6:	d009      	beq.n	1000b5fc <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b5e8:	4914      	ldr	r1, [pc, #80]	; (1000b63c <gpio_pin_set_output_level+0x84>)
1000b5ea:	888c      	ldrh	r4, [r1, #4]
1000b5ec:	220f      	movs	r2, #15
1000b5ee:	4010      	ands	r0, r2
1000b5f0:	2301      	movs	r3, #1
1000b5f2:	4083      	lsls	r3, r0
1000b5f4:	4323      	orrs	r3, r4
1000b5f6:	b29b      	uxth	r3, r3
1000b5f8:	808b      	strh	r3, [r1, #4]
1000b5fa:	e01c      	b.n	1000b636 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b5fc:	490f      	ldr	r1, [pc, #60]	; (1000b63c <gpio_pin_set_output_level+0x84>)
1000b5fe:	888b      	ldrh	r3, [r1, #4]
1000b600:	220f      	movs	r2, #15
1000b602:	4010      	ands	r0, r2
1000b604:	3a0e      	subs	r2, #14
1000b606:	4082      	lsls	r2, r0
1000b608:	4393      	bics	r3, r2
1000b60a:	808b      	strh	r3, [r1, #4]
1000b60c:	e013      	b.n	1000b636 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000b60e:	2900      	cmp	r1, #0
1000b610:	d009      	beq.n	1000b626 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000b612:	490b      	ldr	r1, [pc, #44]	; (1000b640 <gpio_pin_set_output_level+0x88>)
1000b614:	888c      	ldrh	r4, [r1, #4]
1000b616:	220f      	movs	r2, #15
1000b618:	4010      	ands	r0, r2
1000b61a:	2301      	movs	r3, #1
1000b61c:	4083      	lsls	r3, r0
1000b61e:	4323      	orrs	r3, r4
1000b620:	b29b      	uxth	r3, r3
1000b622:	808b      	strh	r3, [r1, #4]
1000b624:	e007      	b.n	1000b636 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000b626:	4906      	ldr	r1, [pc, #24]	; (1000b640 <gpio_pin_set_output_level+0x88>)
1000b628:	888b      	ldrh	r3, [r1, #4]
1000b62a:	220f      	movs	r2, #15
1000b62c:	4010      	ands	r0, r2
1000b62e:	3a0e      	subs	r2, #14
1000b630:	4082      	lsls	r2, r0
1000b632:	4393      	bics	r3, r2
1000b634:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000b636:	bd10      	pop	{r4, pc}
1000b638:	40010000 	.word	0x40010000
1000b63c:	40011000 	.word	0x40011000
1000b640:	40013000 	.word	0x40013000

1000b644 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000b644:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000b646:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000b648:	23ff      	movs	r3, #255	; 0xff
1000b64a:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000b64c:	2807      	cmp	r0, #7
1000b64e:	d833      	bhi.n	1000b6b8 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b650:	4a4e      	ldr	r2, [pc, #312]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b652:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b654:	3bf8      	subs	r3, #248	; 0xf8
1000b656:	4003      	ands	r3, r0
1000b658:	009b      	lsls	r3, r3, #2
1000b65a:	2607      	movs	r6, #7
1000b65c:	409e      	lsls	r6, r3
1000b65e:	43b4      	bics	r4, r6
1000b660:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b662:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000b664:	000e      	movs	r6, r1
1000b666:	409e      	lsls	r6, r3
1000b668:	0033      	movs	r3, r6
1000b66a:	4323      	orrs	r3, r4
1000b66c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000b66e:	2901      	cmp	r1, #1
1000b670:	d000      	beq.n	1000b674 <gpio_pinmux_cofiguration+0x30>
1000b672:	e08a      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000b674:	2803      	cmp	r0, #3
1000b676:	d80f      	bhi.n	1000b698 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b678:	0011      	movs	r1, r2
1000b67a:	22d0      	movs	r2, #208	; 0xd0
1000b67c:	0052      	lsls	r2, r2, #1
1000b67e:	588c      	ldr	r4, [r1, r2]
1000b680:	2303      	movs	r3, #3
1000b682:	4018      	ands	r0, r3
1000b684:	00c0      	lsls	r0, r0, #3
1000b686:	333c      	adds	r3, #60	; 0x3c
1000b688:	4083      	lsls	r3, r0
1000b68a:	439c      	bics	r4, r3
1000b68c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b68e:	588b      	ldr	r3, [r1, r2]
1000b690:	4085      	lsls	r5, r0
1000b692:	431d      	orrs	r5, r3
1000b694:	508d      	str	r5, [r1, r2]
1000b696:	e078      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b698:	493c      	ldr	r1, [pc, #240]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b69a:	22d2      	movs	r2, #210	; 0xd2
1000b69c:	0052      	lsls	r2, r2, #1
1000b69e:	588c      	ldr	r4, [r1, r2]
1000b6a0:	2303      	movs	r3, #3
1000b6a2:	4018      	ands	r0, r3
1000b6a4:	00c0      	lsls	r0, r0, #3
1000b6a6:	333c      	adds	r3, #60	; 0x3c
1000b6a8:	4083      	lsls	r3, r0
1000b6aa:	439c      	bics	r4, r3
1000b6ac:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b6ae:	588b      	ldr	r3, [r1, r2]
1000b6b0:	4085      	lsls	r5, r0
1000b6b2:	431d      	orrs	r5, r3
1000b6b4:	508d      	str	r5, [r1, r2]
1000b6b6:	e068      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000b6b8:	280f      	cmp	r0, #15
1000b6ba:	d832      	bhi.n	1000b722 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b6bc:	4a33      	ldr	r2, [pc, #204]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b6be:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b6c0:	2307      	movs	r3, #7
1000b6c2:	4003      	ands	r3, r0
1000b6c4:	009b      	lsls	r3, r3, #2
1000b6c6:	2607      	movs	r6, #7
1000b6c8:	409e      	lsls	r6, r3
1000b6ca:	43b4      	bics	r4, r6
1000b6cc:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b6ce:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000b6d0:	000e      	movs	r6, r1
1000b6d2:	409e      	lsls	r6, r3
1000b6d4:	0033      	movs	r3, r6
1000b6d6:	4323      	orrs	r3, r4
1000b6d8:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000b6da:	2901      	cmp	r1, #1
1000b6dc:	d155      	bne.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000b6de:	280b      	cmp	r0, #11
1000b6e0:	d80f      	bhi.n	1000b702 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b6e2:	0011      	movs	r1, r2
1000b6e4:	22d4      	movs	r2, #212	; 0xd4
1000b6e6:	0052      	lsls	r2, r2, #1
1000b6e8:	588c      	ldr	r4, [r1, r2]
1000b6ea:	2303      	movs	r3, #3
1000b6ec:	4018      	ands	r0, r3
1000b6ee:	00c0      	lsls	r0, r0, #3
1000b6f0:	333c      	adds	r3, #60	; 0x3c
1000b6f2:	4083      	lsls	r3, r0
1000b6f4:	439c      	bics	r4, r3
1000b6f6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b6f8:	588b      	ldr	r3, [r1, r2]
1000b6fa:	4085      	lsls	r5, r0
1000b6fc:	431d      	orrs	r5, r3
1000b6fe:	508d      	str	r5, [r1, r2]
1000b700:	e043      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b702:	4922      	ldr	r1, [pc, #136]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b704:	22d6      	movs	r2, #214	; 0xd6
1000b706:	0052      	lsls	r2, r2, #1
1000b708:	588c      	ldr	r4, [r1, r2]
1000b70a:	2303      	movs	r3, #3
1000b70c:	4018      	ands	r0, r3
1000b70e:	00c0      	lsls	r0, r0, #3
1000b710:	333c      	adds	r3, #60	; 0x3c
1000b712:	4083      	lsls	r3, r0
1000b714:	439c      	bics	r4, r3
1000b716:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b718:	588b      	ldr	r3, [r1, r2]
1000b71a:	4085      	lsls	r5, r0
1000b71c:	431d      	orrs	r5, r3
1000b71e:	508d      	str	r5, [r1, r2]
1000b720:	e033      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000b722:	2817      	cmp	r0, #23
1000b724:	d831      	bhi.n	1000b78a <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000b726:	4a19      	ldr	r2, [pc, #100]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b728:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b72a:	2307      	movs	r3, #7
1000b72c:	4003      	ands	r3, r0
1000b72e:	009b      	lsls	r3, r3, #2
1000b730:	2607      	movs	r6, #7
1000b732:	409e      	lsls	r6, r3
1000b734:	43b4      	bics	r4, r6
1000b736:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000b738:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000b73a:	000e      	movs	r6, r1
1000b73c:	409e      	lsls	r6, r3
1000b73e:	0033      	movs	r3, r6
1000b740:	4323      	orrs	r3, r4
1000b742:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000b744:	2901      	cmp	r1, #1
1000b746:	d120      	bne.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000b748:	2813      	cmp	r0, #19
1000b74a:	d80f      	bhi.n	1000b76c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b74c:	0011      	movs	r1, r2
1000b74e:	22d8      	movs	r2, #216	; 0xd8
1000b750:	0052      	lsls	r2, r2, #1
1000b752:	588c      	ldr	r4, [r1, r2]
1000b754:	2303      	movs	r3, #3
1000b756:	4018      	ands	r0, r3
1000b758:	00c0      	lsls	r0, r0, #3
1000b75a:	333c      	adds	r3, #60	; 0x3c
1000b75c:	4083      	lsls	r3, r0
1000b75e:	439c      	bics	r4, r3
1000b760:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b762:	588b      	ldr	r3, [r1, r2]
1000b764:	4085      	lsls	r5, r0
1000b766:	431d      	orrs	r5, r3
1000b768:	508d      	str	r5, [r1, r2]
1000b76a:	e00e      	b.n	1000b78a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000b76c:	4a07      	ldr	r2, [pc, #28]	; (1000b78c <gpio_pinmux_cofiguration+0x148>)
1000b76e:	23da      	movs	r3, #218	; 0xda
1000b770:	005b      	lsls	r3, r3, #1
1000b772:	58d1      	ldr	r1, [r2, r3]
1000b774:	2403      	movs	r4, #3
1000b776:	4020      	ands	r0, r4
1000b778:	00c0      	lsls	r0, r0, #3
1000b77a:	343c      	adds	r4, #60	; 0x3c
1000b77c:	4084      	lsls	r4, r0
1000b77e:	43a1      	bics	r1, r4
1000b780:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000b782:	58d1      	ldr	r1, [r2, r3]
1000b784:	4085      	lsls	r5, r0
1000b786:	430d      	orrs	r5, r1
1000b788:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000b78a:	bd70      	pop	{r4, r5, r6, pc}
1000b78c:	4000b000 	.word	0x4000b000

1000b790 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000b790:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b792:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b794:	280f      	cmp	r0, #15
1000b796:	d904      	bls.n	1000b7a2 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b798:	241f      	movs	r4, #31
1000b79a:	4284      	cmp	r4, r0
1000b79c:	415b      	adcs	r3, r3
1000b79e:	3c1d      	subs	r4, #29
1000b7a0:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000b7a2:	2a01      	cmp	r2, #1
1000b7a4:	d016      	beq.n	1000b7d4 <gpio_register_callback+0x44>
1000b7a6:	2a00      	cmp	r2, #0
1000b7a8:	d004      	beq.n	1000b7b4 <gpio_register_callback+0x24>
1000b7aa:	2a02      	cmp	r2, #2
1000b7ac:	d022      	beq.n	1000b7f4 <gpio_register_callback+0x64>
1000b7ae:	2a03      	cmp	r2, #3
1000b7b0:	d030      	beq.n	1000b814 <gpio_register_callback+0x84>
1000b7b2:	e03e      	b.n	1000b832 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b7b4:	4e29      	ldr	r6, [pc, #164]	; (1000b85c <gpio_register_callback+0xcc>)
1000b7b6:	00dc      	lsls	r4, r3, #3
1000b7b8:	18e2      	adds	r2, r4, r3
1000b7ba:	00d2      	lsls	r2, r2, #3
1000b7bc:	5997      	ldr	r7, [r2, r6]
1000b7be:	250f      	movs	r5, #15
1000b7c0:	4005      	ands	r5, r0
1000b7c2:	2201      	movs	r2, #1
1000b7c4:	40aa      	lsls	r2, r5
1000b7c6:	b292      	uxth	r2, r2
1000b7c8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000b7ca:	18e4      	adds	r4, r4, r3
1000b7cc:	00e4      	lsls	r4, r4, #3
1000b7ce:	59a4      	ldr	r4, [r4, r6]
1000b7d0:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000b7d2:	e02e      	b.n	1000b832 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000b7d4:	4e21      	ldr	r6, [pc, #132]	; (1000b85c <gpio_register_callback+0xcc>)
1000b7d6:	00dc      	lsls	r4, r3, #3
1000b7d8:	18e2      	adds	r2, r4, r3
1000b7da:	00d2      	lsls	r2, r2, #3
1000b7dc:	5997      	ldr	r7, [r2, r6]
1000b7de:	250f      	movs	r5, #15
1000b7e0:	4005      	ands	r5, r0
1000b7e2:	2201      	movs	r2, #1
1000b7e4:	40aa      	lsls	r2, r5
1000b7e6:	b292      	uxth	r2, r2
1000b7e8:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b7ea:	18e4      	adds	r4, r4, r3
1000b7ec:	00e4      	lsls	r4, r4, #3
1000b7ee:	59a4      	ldr	r4, [r4, r6]
1000b7f0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b7f2:	e01e      	b.n	1000b832 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b7f4:	4e19      	ldr	r6, [pc, #100]	; (1000b85c <gpio_register_callback+0xcc>)
1000b7f6:	00dc      	lsls	r4, r3, #3
1000b7f8:	18e2      	adds	r2, r4, r3
1000b7fa:	00d2      	lsls	r2, r2, #3
1000b7fc:	5997      	ldr	r7, [r2, r6]
1000b7fe:	250f      	movs	r5, #15
1000b800:	4005      	ands	r5, r0
1000b802:	2201      	movs	r2, #1
1000b804:	40aa      	lsls	r2, r5
1000b806:	b292      	uxth	r2, r2
1000b808:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000b80a:	18e4      	adds	r4, r4, r3
1000b80c:	00e4      	lsls	r4, r4, #3
1000b80e:	59a4      	ldr	r4, [r4, r6]
1000b810:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000b812:	e00e      	b.n	1000b832 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000b814:	4e11      	ldr	r6, [pc, #68]	; (1000b85c <gpio_register_callback+0xcc>)
1000b816:	00dc      	lsls	r4, r3, #3
1000b818:	18e2      	adds	r2, r4, r3
1000b81a:	00d2      	lsls	r2, r2, #3
1000b81c:	5997      	ldr	r7, [r2, r6]
1000b81e:	250f      	movs	r5, #15
1000b820:	4005      	ands	r5, r0
1000b822:	2201      	movs	r2, #1
1000b824:	40aa      	lsls	r2, r5
1000b826:	b292      	uxth	r2, r2
1000b828:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000b82a:	18e4      	adds	r4, r4, r3
1000b82c:	00e4      	lsls	r4, r4, #3
1000b82e:	59a4      	ldr	r4, [r4, r6]
1000b830:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000b832:	220f      	movs	r2, #15
1000b834:	4010      	ands	r0, r2
1000b836:	4c09      	ldr	r4, [pc, #36]	; (1000b85c <gpio_register_callback+0xcc>)
1000b838:	00dd      	lsls	r5, r3, #3
1000b83a:	18ea      	adds	r2, r5, r3
1000b83c:	0052      	lsls	r2, r2, #1
1000b83e:	1812      	adds	r2, r2, r0
1000b840:	0092      	lsls	r2, r2, #2
1000b842:	18a2      	adds	r2, r4, r2
1000b844:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000b846:	18ea      	adds	r2, r5, r3
1000b848:	00d2      	lsls	r2, r2, #3
1000b84a:	18a2      	adds	r2, r4, r2
1000b84c:	3244      	adds	r2, #68	; 0x44
1000b84e:	2101      	movs	r1, #1
1000b850:	4081      	lsls	r1, r0
1000b852:	8813      	ldrh	r3, [r2, #0]
1000b854:	430b      	orrs	r3, r1
1000b856:	8013      	strh	r3, [r2, #0]
}
1000b858:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b85a:	46c0      	nop			; (mov r8, r8)
1000b85c:	1001a3d0 	.word	0x1001a3d0

1000b860 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000b860:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b862:	280f      	cmp	r0, #15
1000b864:	d805      	bhi.n	1000b872 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000b866:	2280      	movs	r2, #128	; 0x80
1000b868:	0412      	lsls	r2, r2, #16
1000b86a:	4b12      	ldr	r3, [pc, #72]	; (1000b8b4 <gpio_enable_callback+0x54>)
1000b86c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000b86e:	2200      	movs	r2, #0
1000b870:	e00c      	b.n	1000b88c <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000b872:	281f      	cmp	r0, #31
1000b874:	d805      	bhi.n	1000b882 <gpio_enable_callback+0x22>
1000b876:	2280      	movs	r2, #128	; 0x80
1000b878:	0452      	lsls	r2, r2, #17
1000b87a:	4b0e      	ldr	r3, [pc, #56]	; (1000b8b4 <gpio_enable_callback+0x54>)
1000b87c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000b87e:	2201      	movs	r2, #1
1000b880:	e004      	b.n	1000b88c <gpio_enable_callback+0x2c>
1000b882:	2280      	movs	r2, #128	; 0x80
1000b884:	0492      	lsls	r2, r2, #18
1000b886:	4b0b      	ldr	r3, [pc, #44]	; (1000b8b4 <gpio_enable_callback+0x54>)
1000b888:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000b88a:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000b88c:	230f      	movs	r3, #15
1000b88e:	4018      	ands	r0, r3
1000b890:	2101      	movs	r1, #1
1000b892:	4081      	lsls	r1, r0
1000b894:	4c08      	ldr	r4, [pc, #32]	; (1000b8b8 <gpio_enable_callback+0x58>)
1000b896:	00d5      	lsls	r5, r2, #3
1000b898:	18ab      	adds	r3, r5, r2
1000b89a:	00db      	lsls	r3, r3, #3
1000b89c:	18e3      	adds	r3, r4, r3
1000b89e:	3346      	adds	r3, #70	; 0x46
1000b8a0:	8818      	ldrh	r0, [r3, #0]
1000b8a2:	4308      	orrs	r0, r1
1000b8a4:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000b8a6:	18aa      	adds	r2, r5, r2
1000b8a8:	00d2      	lsls	r2, r2, #3
1000b8aa:	5913      	ldr	r3, [r2, r4]
1000b8ac:	b289      	uxth	r1, r1
1000b8ae:	8419      	strh	r1, [r3, #32]
}
1000b8b0:	bd30      	pop	{r4, r5, pc}
1000b8b2:	46c0      	nop			; (mov r8, r8)
1000b8b4:	e000e100 	.word	0xe000e100
1000b8b8:	1001a3d0 	.word	0x1001a3d0

1000b8bc <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000b8bc:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000b8be:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000b8c0:	280f      	cmp	r0, #15
1000b8c2:	d904      	bls.n	1000b8ce <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000b8c4:	221f      	movs	r2, #31
1000b8c6:	4282      	cmp	r2, r0
1000b8c8:	415b      	adcs	r3, r3
1000b8ca:	3a1d      	subs	r2, #29
1000b8cc:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000b8ce:	220f      	movs	r2, #15
1000b8d0:	4010      	ands	r0, r2
1000b8d2:	2101      	movs	r1, #1
1000b8d4:	4081      	lsls	r1, r0
1000b8d6:	4c07      	ldr	r4, [pc, #28]	; (1000b8f4 <gpio_disable_callback+0x38>)
1000b8d8:	00dd      	lsls	r5, r3, #3
1000b8da:	18ea      	adds	r2, r5, r3
1000b8dc:	00d2      	lsls	r2, r2, #3
1000b8de:	18a2      	adds	r2, r4, r2
1000b8e0:	3246      	adds	r2, #70	; 0x46
1000b8e2:	8810      	ldrh	r0, [r2, #0]
1000b8e4:	4388      	bics	r0, r1
1000b8e6:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000b8e8:	18eb      	adds	r3, r5, r3
1000b8ea:	00db      	lsls	r3, r3, #3
1000b8ec:	591b      	ldr	r3, [r3, r4]
1000b8ee:	b289      	uxth	r1, r1
1000b8f0:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000b8f2:	bd30      	pop	{r4, r5, pc}
1000b8f4:	1001a3d0 	.word	0x1001a3d0

1000b8f8 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000b8f8:	b510      	push	{r4, lr}
1000b8fa:	4a11      	ldr	r2, [pc, #68]	; (1000b940 <gpio_init+0x48>)
1000b8fc:	0010      	movs	r0, r2
1000b8fe:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000b900:	2100      	movs	r1, #0
1000b902:	e007      	b.n	1000b914 <gpio_init+0x1c>
1000b904:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000b906:	4293      	cmp	r3, r2
1000b908:	d1fc      	bne.n	1000b904 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000b90a:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000b90c:	8011      	strh	r1, [r2, #0]
1000b90e:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000b910:	4282      	cmp	r2, r0
1000b912:	d002      	beq.n	1000b91a <gpio_init+0x22>
1000b914:	0013      	movs	r3, r2
1000b916:	3b40      	subs	r3, #64	; 0x40
1000b918:	e7f4      	b.n	1000b904 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000b91a:	4b0a      	ldr	r3, [pc, #40]	; (1000b944 <gpio_init+0x4c>)
1000b91c:	4a0a      	ldr	r2, [pc, #40]	; (1000b948 <gpio_init+0x50>)
1000b91e:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000b920:	4a0a      	ldr	r2, [pc, #40]	; (1000b94c <gpio_init+0x54>)
1000b922:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000b924:	490a      	ldr	r1, [pc, #40]	; (1000b950 <gpio_init+0x58>)
1000b926:	2290      	movs	r2, #144	; 0x90
1000b928:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000b92a:	490a      	ldr	r1, [pc, #40]	; (1000b954 <gpio_init+0x5c>)
1000b92c:	2027      	movs	r0, #39	; 0x27
1000b92e:	4c0a      	ldr	r4, [pc, #40]	; (1000b958 <gpio_init+0x60>)
1000b930:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b932:	490a      	ldr	r1, [pc, #40]	; (1000b95c <gpio_init+0x64>)
1000b934:	2028      	movs	r0, #40	; 0x28
1000b936:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b938:	4909      	ldr	r1, [pc, #36]	; (1000b960 <gpio_init+0x68>)
1000b93a:	2029      	movs	r0, #41	; 0x29
1000b93c:	47a0      	blx	r4
}
1000b93e:	bd10      	pop	{r4, pc}
1000b940:	1001a414 	.word	0x1001a414
1000b944:	1001a3d0 	.word	0x1001a3d0
1000b948:	40010000 	.word	0x40010000
1000b94c:	40011000 	.word	0x40011000
1000b950:	40013000 	.word	0x40013000
1000b954:	1000b201 	.word	0x1000b201
1000b958:	1000c525 	.word	0x1000c525
1000b95c:	1000b265 	.word	0x1000b265
1000b960:	1000b2d5 	.word	0x1000b2d5

1000b964 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000b964:	2801      	cmp	r0, #1
1000b966:	d00d      	beq.n	1000b984 <system_clock_config+0x20>
1000b968:	2800      	cmp	r0, #0
1000b96a:	d002      	beq.n	1000b972 <system_clock_config+0xe>
1000b96c:	2802      	cmp	r0, #2
1000b96e:	d01c      	beq.n	1000b9aa <system_clock_config+0x46>
1000b970:	e02e      	b.n	1000b9d0 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b972:	4a18      	ldr	r2, [pc, #96]	; (1000b9d4 <system_clock_config+0x70>)
1000b974:	6990      	ldr	r0, [r2, #24]
1000b976:	230c      	movs	r3, #12
1000b978:	4303      	orrs	r3, r0
1000b97a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000b97c:	4a16      	ldr	r2, [pc, #88]	; (1000b9d8 <system_clock_config+0x74>)
1000b97e:	4b17      	ldr	r3, [pc, #92]	; (1000b9dc <system_clock_config+0x78>)
1000b980:	601a      	str	r2, [r3, #0]
			break;
1000b982:	e01a      	b.n	1000b9ba <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b984:	4b13      	ldr	r3, [pc, #76]	; (1000b9d4 <system_clock_config+0x70>)
1000b986:	6998      	ldr	r0, [r3, #24]
1000b988:	2208      	movs	r2, #8
1000b98a:	4302      	orrs	r2, r0
1000b98c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b98e:	699a      	ldr	r2, [r3, #24]
1000b990:	2004      	movs	r0, #4
1000b992:	4382      	bics	r2, r0
1000b994:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b996:	4a12      	ldr	r2, [pc, #72]	; (1000b9e0 <system_clock_config+0x7c>)
1000b998:	6853      	ldr	r3, [r2, #4]
1000b99a:	2080      	movs	r0, #128	; 0x80
1000b99c:	0300      	lsls	r0, r0, #12
1000b99e:	4303      	orrs	r3, r0
1000b9a0:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b9a2:	4a10      	ldr	r2, [pc, #64]	; (1000b9e4 <system_clock_config+0x80>)
1000b9a4:	4b0d      	ldr	r3, [pc, #52]	; (1000b9dc <system_clock_config+0x78>)
1000b9a6:	601a      	str	r2, [r3, #0]
			break;
1000b9a8:	e007      	b.n	1000b9ba <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b9aa:	4a0a      	ldr	r2, [pc, #40]	; (1000b9d4 <system_clock_config+0x70>)
1000b9ac:	6993      	ldr	r3, [r2, #24]
1000b9ae:	200c      	movs	r0, #12
1000b9b0:	4383      	bics	r3, r0
1000b9b2:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b9b4:	4a08      	ldr	r2, [pc, #32]	; (1000b9d8 <system_clock_config+0x74>)
1000b9b6:	4b09      	ldr	r3, [pc, #36]	; (1000b9dc <system_clock_config+0x78>)
1000b9b8:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b9ba:	4b06      	ldr	r3, [pc, #24]	; (1000b9d4 <system_clock_config+0x70>)
1000b9bc:	699a      	ldr	r2, [r3, #24]
1000b9be:	2003      	movs	r0, #3
1000b9c0:	4382      	bics	r2, r0
1000b9c2:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b9c4:	699a      	ldr	r2, [r3, #24]
1000b9c6:	4001      	ands	r1, r0
1000b9c8:	4311      	orrs	r1, r2
1000b9ca:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b9cc:	2000      	movs	r0, #0
1000b9ce:	e000      	b.n	1000b9d2 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b9d0:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b9d2:	4770      	bx	lr
1000b9d4:	4000b000 	.word	0x4000b000
1000b9d8:	018cba80 	.word	0x018cba80
1000b9dc:	1001a4a8 	.word	0x1001a4a8
1000b9e0:	4000f000 	.word	0x4000f000
1000b9e4:	001e8480 	.word	0x001e8480

1000b9e8 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b9e8:	4b01      	ldr	r3, [pc, #4]	; (1000b9f0 <system_clock_get_value+0x8>)
1000b9ea:	6818      	ldr	r0, [r3, #0]
}
1000b9ec:	4770      	bx	lr
1000b9ee:	46c0      	nop			; (mov r8, r8)
1000b9f0:	1001a4a8 	.word	0x1001a4a8

1000b9f4 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b9f4:	b500      	push	{lr}
	switch (peripheral) {
1000b9f6:	2835      	cmp	r0, #53	; 0x35
1000b9f8:	d900      	bls.n	1000b9fc <system_clock_peripheral_enable+0x8>
1000b9fa:	e1a2      	b.n	1000bd42 <system_clock_peripheral_enable+0x34e>
1000b9fc:	0080      	lsls	r0, r0, #2
1000b9fe:	4bd2      	ldr	r3, [pc, #840]	; (1000bd48 <system_clock_peripheral_enable+0x354>)
1000ba00:	581b      	ldr	r3, [r3, r0]
1000ba02:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba04:	4ad1      	ldr	r2, [pc, #836]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba06:	68d1      	ldr	r1, [r2, #12]
1000ba08:	2302      	movs	r3, #2
1000ba0a:	430b      	orrs	r3, r1
1000ba0c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba0e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000ba10:	e198      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba12:	4ace      	ldr	r2, [pc, #824]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba14:	68d1      	ldr	r1, [r2, #12]
1000ba16:	2304      	movs	r3, #4
1000ba18:	430b      	orrs	r3, r1
1000ba1a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000ba1e:	e191      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba20:	4aca      	ldr	r2, [pc, #808]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba22:	68d1      	ldr	r1, [r2, #12]
1000ba24:	2308      	movs	r3, #8
1000ba26:	430b      	orrs	r3, r1
1000ba28:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000ba2c:	e18a      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba2e:	4ac7      	ldr	r2, [pc, #796]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba30:	68d1      	ldr	r1, [r2, #12]
1000ba32:	2310      	movs	r3, #16
1000ba34:	430b      	orrs	r3, r1
1000ba36:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000ba3a:	e183      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba3c:	4ac3      	ldr	r2, [pc, #780]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba3e:	68d1      	ldr	r1, [r2, #12]
1000ba40:	2320      	movs	r3, #32
1000ba42:	430b      	orrs	r3, r1
1000ba44:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000ba48:	e17c      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba4a:	4ac0      	ldr	r2, [pc, #768]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba4c:	68d1      	ldr	r1, [r2, #12]
1000ba4e:	2380      	movs	r3, #128	; 0x80
1000ba50:	430b      	orrs	r3, r1
1000ba52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000ba56:	e175      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba58:	4abc      	ldr	r2, [pc, #752]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba5a:	68d3      	ldr	r3, [r2, #12]
1000ba5c:	2180      	movs	r1, #128	; 0x80
1000ba5e:	0049      	lsls	r1, r1, #1
1000ba60:	430b      	orrs	r3, r1
1000ba62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000ba66:	e16d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba68:	4ab8      	ldr	r2, [pc, #736]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba6a:	68d3      	ldr	r3, [r2, #12]
1000ba6c:	2180      	movs	r1, #128	; 0x80
1000ba6e:	0109      	lsls	r1, r1, #4
1000ba70:	430b      	orrs	r3, r1
1000ba72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000ba76:	e165      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba78:	4ab4      	ldr	r2, [pc, #720]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba7a:	68d3      	ldr	r3, [r2, #12]
1000ba7c:	2180      	movs	r1, #128	; 0x80
1000ba7e:	0149      	lsls	r1, r1, #5
1000ba80:	430b      	orrs	r3, r1
1000ba82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000ba86:	e15d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba88:	4ab0      	ldr	r2, [pc, #704]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba8a:	68d3      	ldr	r3, [r2, #12]
1000ba8c:	2180      	movs	r1, #128	; 0x80
1000ba8e:	0189      	lsls	r1, r1, #6
1000ba90:	430b      	orrs	r3, r1
1000ba92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000ba96:	e155      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000ba98:	4aac      	ldr	r2, [pc, #688]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000ba9a:	68d3      	ldr	r3, [r2, #12]
1000ba9c:	2180      	movs	r1, #128	; 0x80
1000ba9e:	01c9      	lsls	r1, r1, #7
1000baa0:	430b      	orrs	r3, r1
1000baa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000baa6:	e14d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baa8:	4aa8      	ldr	r2, [pc, #672]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000baaa:	68d3      	ldr	r3, [r2, #12]
1000baac:	2180      	movs	r1, #128	; 0x80
1000baae:	0209      	lsls	r1, r1, #8
1000bab0:	430b      	orrs	r3, r1
1000bab2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bab4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000bab6:	e145      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bab8:	4aa4      	ldr	r2, [pc, #656]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000baba:	68d3      	ldr	r3, [r2, #12]
1000babc:	2180      	movs	r1, #128	; 0x80
1000babe:	0249      	lsls	r1, r1, #9
1000bac0:	430b      	orrs	r3, r1
1000bac2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000bac6:	e13d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bac8:	4aa0      	ldr	r2, [pc, #640]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000baca:	68d3      	ldr	r3, [r2, #12]
1000bacc:	2180      	movs	r1, #128	; 0x80
1000bace:	0289      	lsls	r1, r1, #10
1000bad0:	430b      	orrs	r3, r1
1000bad2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bad4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000bad6:	e135      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bad8:	4a9c      	ldr	r2, [pc, #624]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bada:	68d3      	ldr	r3, [r2, #12]
1000badc:	2180      	movs	r1, #128	; 0x80
1000bade:	02c9      	lsls	r1, r1, #11
1000bae0:	430b      	orrs	r3, r1
1000bae2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bae4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000bae6:	e12d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bae8:	4a98      	ldr	r2, [pc, #608]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000baea:	68d3      	ldr	r3, [r2, #12]
1000baec:	2180      	movs	r1, #128	; 0x80
1000baee:	0309      	lsls	r1, r1, #12
1000baf0:	430b      	orrs	r3, r1
1000baf2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000baf6:	e125      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000baf8:	4a94      	ldr	r2, [pc, #592]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bafa:	68d3      	ldr	r3, [r2, #12]
1000bafc:	2180      	movs	r1, #128	; 0x80
1000bafe:	0349      	lsls	r1, r1, #13
1000bb00:	430b      	orrs	r3, r1
1000bb02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000bb06:	e11d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb08:	4a90      	ldr	r2, [pc, #576]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb0a:	68d3      	ldr	r3, [r2, #12]
1000bb0c:	2180      	movs	r1, #128	; 0x80
1000bb0e:	0389      	lsls	r1, r1, #14
1000bb10:	430b      	orrs	r3, r1
1000bb12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000bb16:	e115      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb18:	4a8c      	ldr	r2, [pc, #560]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb1a:	68d3      	ldr	r3, [r2, #12]
1000bb1c:	2180      	movs	r1, #128	; 0x80
1000bb1e:	03c9      	lsls	r1, r1, #15
1000bb20:	430b      	orrs	r3, r1
1000bb22:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000bb26:	e10d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb28:	4a88      	ldr	r2, [pc, #544]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb2a:	68d3      	ldr	r3, [r2, #12]
1000bb2c:	2180      	movs	r1, #128	; 0x80
1000bb2e:	0409      	lsls	r1, r1, #16
1000bb30:	430b      	orrs	r3, r1
1000bb32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000bb36:	e105      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb38:	4a84      	ldr	r2, [pc, #528]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb3a:	68d3      	ldr	r3, [r2, #12]
1000bb3c:	2180      	movs	r1, #128	; 0x80
1000bb3e:	0449      	lsls	r1, r1, #17
1000bb40:	430b      	orrs	r3, r1
1000bb42:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000bb46:	e0fd      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb48:	4a80      	ldr	r2, [pc, #512]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb4a:	68d3      	ldr	r3, [r2, #12]
1000bb4c:	2180      	movs	r1, #128	; 0x80
1000bb4e:	0489      	lsls	r1, r1, #18
1000bb50:	430b      	orrs	r3, r1
1000bb52:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000bb56:	e0f5      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb58:	4a7c      	ldr	r2, [pc, #496]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb5a:	68d3      	ldr	r3, [r2, #12]
1000bb5c:	2180      	movs	r1, #128	; 0x80
1000bb5e:	04c9      	lsls	r1, r1, #19
1000bb60:	430b      	orrs	r3, r1
1000bb62:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bb66:	e0ed      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb68:	4a78      	ldr	r2, [pc, #480]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb6a:	68d3      	ldr	r3, [r2, #12]
1000bb6c:	2180      	movs	r1, #128	; 0x80
1000bb6e:	0509      	lsls	r1, r1, #20
1000bb70:	430b      	orrs	r3, r1
1000bb72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000bb76:	e0e5      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb78:	4a74      	ldr	r2, [pc, #464]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb7a:	68d3      	ldr	r3, [r2, #12]
1000bb7c:	2180      	movs	r1, #128	; 0x80
1000bb7e:	0549      	lsls	r1, r1, #21
1000bb80:	430b      	orrs	r3, r1
1000bb82:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bb86:	e0dd      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb88:	4a70      	ldr	r2, [pc, #448]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb8a:	68d3      	ldr	r3, [r2, #12]
1000bb8c:	2180      	movs	r1, #128	; 0x80
1000bb8e:	0589      	lsls	r1, r1, #22
1000bb90:	430b      	orrs	r3, r1
1000bb92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000bb96:	e0d5      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000bb98:	4a6c      	ldr	r2, [pc, #432]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bb9a:	68d3      	ldr	r3, [r2, #12]
1000bb9c:	2180      	movs	r1, #128	; 0x80
1000bb9e:	05c9      	lsls	r1, r1, #23
1000bba0:	430b      	orrs	r3, r1
1000bba2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bba4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bba6:	e0cd      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bba8:	4a68      	ldr	r2, [pc, #416]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbaa:	6911      	ldr	r1, [r2, #16]
1000bbac:	2301      	movs	r3, #1
1000bbae:	430b      	orrs	r3, r1
1000bbb0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbb2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bbb4:	e0c6      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbb6:	4a65      	ldr	r2, [pc, #404]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbb8:	6911      	ldr	r1, [r2, #16]
1000bbba:	2302      	movs	r3, #2
1000bbbc:	430b      	orrs	r3, r1
1000bbbe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bbc2:	e0bf      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbc4:	4a61      	ldr	r2, [pc, #388]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbc6:	6911      	ldr	r1, [r2, #16]
1000bbc8:	2304      	movs	r3, #4
1000bbca:	430b      	orrs	r3, r1
1000bbcc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bbd0:	e0b8      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbd2:	4a5e      	ldr	r2, [pc, #376]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbd4:	6911      	ldr	r1, [r2, #16]
1000bbd6:	2308      	movs	r3, #8
1000bbd8:	430b      	orrs	r3, r1
1000bbda:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbdc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bbde:	e0b1      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbe0:	4a5a      	ldr	r2, [pc, #360]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbe2:	6911      	ldr	r1, [r2, #16]
1000bbe4:	2310      	movs	r3, #16
1000bbe6:	430b      	orrs	r3, r1
1000bbe8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bbec:	e0aa      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbee:	4a57      	ldr	r2, [pc, #348]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbf0:	6911      	ldr	r1, [r2, #16]
1000bbf2:	2320      	movs	r3, #32
1000bbf4:	430b      	orrs	r3, r1
1000bbf6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bbfa:	e0a3      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bbfc:	4a53      	ldr	r2, [pc, #332]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bbfe:	6911      	ldr	r1, [r2, #16]
1000bc00:	2340      	movs	r3, #64	; 0x40
1000bc02:	430b      	orrs	r3, r1
1000bc04:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bc08:	e09c      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc0a:	4a50      	ldr	r2, [pc, #320]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc0c:	6911      	ldr	r1, [r2, #16]
1000bc0e:	2380      	movs	r3, #128	; 0x80
1000bc10:	430b      	orrs	r3, r1
1000bc12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bc16:	e095      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc18:	4a4c      	ldr	r2, [pc, #304]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc1a:	6913      	ldr	r3, [r2, #16]
1000bc1c:	2180      	movs	r1, #128	; 0x80
1000bc1e:	0049      	lsls	r1, r1, #1
1000bc20:	430b      	orrs	r3, r1
1000bc22:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc24:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bc26:	e08d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc28:	4a48      	ldr	r2, [pc, #288]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc2a:	6913      	ldr	r3, [r2, #16]
1000bc2c:	2180      	movs	r1, #128	; 0x80
1000bc2e:	0089      	lsls	r1, r1, #2
1000bc30:	430b      	orrs	r3, r1
1000bc32:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bc36:	e085      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc38:	4a44      	ldr	r2, [pc, #272]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc3a:	6913      	ldr	r3, [r2, #16]
1000bc3c:	2180      	movs	r1, #128	; 0x80
1000bc3e:	00c9      	lsls	r1, r1, #3
1000bc40:	430b      	orrs	r3, r1
1000bc42:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc44:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bc46:	e07d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc48:	4a40      	ldr	r2, [pc, #256]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc4a:	6913      	ldr	r3, [r2, #16]
1000bc4c:	2180      	movs	r1, #128	; 0x80
1000bc4e:	0109      	lsls	r1, r1, #4
1000bc50:	430b      	orrs	r3, r1
1000bc52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bc56:	e075      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc58:	4a3c      	ldr	r2, [pc, #240]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc5a:	6913      	ldr	r3, [r2, #16]
1000bc5c:	2180      	movs	r1, #128	; 0x80
1000bc5e:	0149      	lsls	r1, r1, #5
1000bc60:	430b      	orrs	r3, r1
1000bc62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bc66:	e06d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc68:	4a38      	ldr	r2, [pc, #224]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc6a:	6913      	ldr	r3, [r2, #16]
1000bc6c:	2180      	movs	r1, #128	; 0x80
1000bc6e:	0189      	lsls	r1, r1, #6
1000bc70:	430b      	orrs	r3, r1
1000bc72:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bc76:	e065      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc78:	4a34      	ldr	r2, [pc, #208]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc7a:	6913      	ldr	r3, [r2, #16]
1000bc7c:	2180      	movs	r1, #128	; 0x80
1000bc7e:	01c9      	lsls	r1, r1, #7
1000bc80:	430b      	orrs	r3, r1
1000bc82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bc86:	e05d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc88:	4a30      	ldr	r2, [pc, #192]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc8a:	6913      	ldr	r3, [r2, #16]
1000bc8c:	2180      	movs	r1, #128	; 0x80
1000bc8e:	0209      	lsls	r1, r1, #8
1000bc90:	430b      	orrs	r3, r1
1000bc92:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bc94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bc96:	e055      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bc98:	4a2c      	ldr	r2, [pc, #176]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bc9a:	6913      	ldr	r3, [r2, #16]
1000bc9c:	2180      	movs	r1, #128	; 0x80
1000bc9e:	0249      	lsls	r1, r1, #9
1000bca0:	430b      	orrs	r3, r1
1000bca2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bca4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bca6:	e04d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bca8:	4a28      	ldr	r2, [pc, #160]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcaa:	6913      	ldr	r3, [r2, #16]
1000bcac:	2180      	movs	r1, #128	; 0x80
1000bcae:	0289      	lsls	r1, r1, #10
1000bcb0:	430b      	orrs	r3, r1
1000bcb2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcb4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bcb6:	e045      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcb8:	4a24      	ldr	r2, [pc, #144]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcba:	6913      	ldr	r3, [r2, #16]
1000bcbc:	2180      	movs	r1, #128	; 0x80
1000bcbe:	02c9      	lsls	r1, r1, #11
1000bcc0:	430b      	orrs	r3, r1
1000bcc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bcc6:	e03d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcc8:	4a20      	ldr	r2, [pc, #128]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcca:	6913      	ldr	r3, [r2, #16]
1000bccc:	2180      	movs	r1, #128	; 0x80
1000bcce:	0309      	lsls	r1, r1, #12
1000bcd0:	430b      	orrs	r3, r1
1000bcd2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bcd6:	e035      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcd8:	4a1c      	ldr	r2, [pc, #112]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcda:	6913      	ldr	r3, [r2, #16]
1000bcdc:	2180      	movs	r1, #128	; 0x80
1000bcde:	0349      	lsls	r1, r1, #13
1000bce0:	430b      	orrs	r3, r1
1000bce2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bce4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bce6:	e02d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bce8:	4a18      	ldr	r2, [pc, #96]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcea:	6913      	ldr	r3, [r2, #16]
1000bcec:	2180      	movs	r1, #128	; 0x80
1000bcee:	0389      	lsls	r1, r1, #14
1000bcf0:	430b      	orrs	r3, r1
1000bcf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bcf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000bcf6:	e025      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bcf8:	4a14      	ldr	r2, [pc, #80]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bcfa:	6913      	ldr	r3, [r2, #16]
1000bcfc:	2180      	movs	r1, #128	; 0x80
1000bcfe:	03c9      	lsls	r1, r1, #15
1000bd00:	430b      	orrs	r3, r1
1000bd02:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000bd06:	e01d      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000bd08:	4a10      	ldr	r2, [pc, #64]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bd0a:	6913      	ldr	r3, [r2, #16]
1000bd0c:	2180      	movs	r1, #128	; 0x80
1000bd0e:	0409      	lsls	r1, r1, #16
1000bd10:	430b      	orrs	r3, r1
1000bd12:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000bd16:	e015      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bd18:	4a0c      	ldr	r2, [pc, #48]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bd1a:	7d11      	ldrb	r1, [r2, #20]
1000bd1c:	2301      	movs	r3, #1
1000bd1e:	430b      	orrs	r3, r1
1000bd20:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000bd24:	e00e      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bd26:	4a09      	ldr	r2, [pc, #36]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bd28:	7d11      	ldrb	r1, [r2, #20]
1000bd2a:	2302      	movs	r3, #2
1000bd2c:	430b      	orrs	r3, r1
1000bd2e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000bd32:	e007      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000bd34:	4a05      	ldr	r2, [pc, #20]	; (1000bd4c <system_clock_peripheral_enable+0x358>)
1000bd36:	7d11      	ldrb	r1, [r2, #20]
1000bd38:	2304      	movs	r3, #4
1000bd3a:	430b      	orrs	r3, r1
1000bd3c:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000bd40:	e000      	b.n	1000bd44 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bd42:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bd44:	bd00      	pop	{pc}
1000bd46:	46c0      	nop			; (mov r8, r8)
1000bd48:	100178f0 	.word	0x100178f0
1000bd4c:	4000b000 	.word	0x4000b000

1000bd50 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000bd50:	b500      	push	{lr}
	switch (peripheral) {
1000bd52:	2835      	cmp	r0, #53	; 0x35
1000bd54:	d900      	bls.n	1000bd58 <system_clock_peripheral_disable+0x8>
1000bd56:	e17d      	b.n	1000c054 <system_clock_peripheral_disable+0x304>
1000bd58:	0080      	lsls	r0, r0, #2
1000bd5a:	4bbf      	ldr	r3, [pc, #764]	; (1000c058 <system_clock_peripheral_disable+0x308>)
1000bd5c:	581b      	ldr	r3, [r3, r0]
1000bd5e:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd60:	4abe      	ldr	r2, [pc, #760]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bd62:	68d3      	ldr	r3, [r2, #12]
1000bd64:	2102      	movs	r1, #2
1000bd66:	438b      	bics	r3, r1
1000bd68:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd6a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000bd6c:	e173      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd6e:	4abb      	ldr	r2, [pc, #748]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bd70:	68d3      	ldr	r3, [r2, #12]
1000bd72:	2104      	movs	r1, #4
1000bd74:	438b      	bics	r3, r1
1000bd76:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd78:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000bd7a:	e16c      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd7c:	4ab7      	ldr	r2, [pc, #732]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bd7e:	68d3      	ldr	r3, [r2, #12]
1000bd80:	2108      	movs	r1, #8
1000bd82:	438b      	bics	r3, r1
1000bd84:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd86:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000bd88:	e165      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd8a:	4ab4      	ldr	r2, [pc, #720]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bd8c:	68d3      	ldr	r3, [r2, #12]
1000bd8e:	2110      	movs	r1, #16
1000bd90:	438b      	bics	r3, r1
1000bd92:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bd94:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000bd96:	e15e      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bd98:	4ab0      	ldr	r2, [pc, #704]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bd9a:	68d3      	ldr	r3, [r2, #12]
1000bd9c:	2120      	movs	r1, #32
1000bd9e:	438b      	bics	r3, r1
1000bda0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bda2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000bda4:	e157      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bda6:	4aad      	ldr	r2, [pc, #692]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bda8:	68d3      	ldr	r3, [r2, #12]
1000bdaa:	2180      	movs	r1, #128	; 0x80
1000bdac:	438b      	bics	r3, r1
1000bdae:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdb0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000bdb2:	e150      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdb4:	4aa9      	ldr	r2, [pc, #676]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bdb6:	68d1      	ldr	r1, [r2, #12]
1000bdb8:	4ba9      	ldr	r3, [pc, #676]	; (1000c060 <system_clock_peripheral_disable+0x310>)
1000bdba:	400b      	ands	r3, r1
1000bdbc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdbe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000bdc0:	e149      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdc2:	4aa6      	ldr	r2, [pc, #664]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bdc4:	68d1      	ldr	r1, [r2, #12]
1000bdc6:	4ba7      	ldr	r3, [pc, #668]	; (1000c064 <system_clock_peripheral_disable+0x314>)
1000bdc8:	400b      	ands	r3, r1
1000bdca:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdcc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000bdce:	e142      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdd0:	4aa2      	ldr	r2, [pc, #648]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bdd2:	68d1      	ldr	r1, [r2, #12]
1000bdd4:	4ba4      	ldr	r3, [pc, #656]	; (1000c068 <system_clock_peripheral_disable+0x318>)
1000bdd6:	400b      	ands	r3, r1
1000bdd8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdda:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000bddc:	e13b      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdde:	4a9f      	ldr	r2, [pc, #636]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bde0:	68d1      	ldr	r1, [r2, #12]
1000bde2:	4ba2      	ldr	r3, [pc, #648]	; (1000c06c <system_clock_peripheral_disable+0x31c>)
1000bde4:	400b      	ands	r3, r1
1000bde6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bde8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000bdea:	e134      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdec:	4a9b      	ldr	r2, [pc, #620]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bdee:	68d1      	ldr	r1, [r2, #12]
1000bdf0:	4b9f      	ldr	r3, [pc, #636]	; (1000c070 <system_clock_peripheral_disable+0x320>)
1000bdf2:	400b      	ands	r3, r1
1000bdf4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bdf6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000bdf8:	e12d      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bdfa:	4a98      	ldr	r2, [pc, #608]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bdfc:	68d1      	ldr	r1, [r2, #12]
1000bdfe:	4b9d      	ldr	r3, [pc, #628]	; (1000c074 <system_clock_peripheral_disable+0x324>)
1000be00:	400b      	ands	r3, r1
1000be02:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be04:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000be06:	e126      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be08:	4a94      	ldr	r2, [pc, #592]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be0a:	68d1      	ldr	r1, [r2, #12]
1000be0c:	4b9a      	ldr	r3, [pc, #616]	; (1000c078 <system_clock_peripheral_disable+0x328>)
1000be0e:	400b      	ands	r3, r1
1000be10:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be12:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000be14:	e11f      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be16:	4a91      	ldr	r2, [pc, #580]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be18:	68d1      	ldr	r1, [r2, #12]
1000be1a:	4b98      	ldr	r3, [pc, #608]	; (1000c07c <system_clock_peripheral_disable+0x32c>)
1000be1c:	400b      	ands	r3, r1
1000be1e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be20:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000be22:	e118      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be24:	4a8d      	ldr	r2, [pc, #564]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be26:	68d1      	ldr	r1, [r2, #12]
1000be28:	4b95      	ldr	r3, [pc, #596]	; (1000c080 <system_clock_peripheral_disable+0x330>)
1000be2a:	400b      	ands	r3, r1
1000be2c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be2e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000be30:	e111      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be32:	4a8a      	ldr	r2, [pc, #552]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be34:	68d1      	ldr	r1, [r2, #12]
1000be36:	4b93      	ldr	r3, [pc, #588]	; (1000c084 <system_clock_peripheral_disable+0x334>)
1000be38:	400b      	ands	r3, r1
1000be3a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be3c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000be3e:	e10a      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be40:	4a86      	ldr	r2, [pc, #536]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be42:	68d1      	ldr	r1, [r2, #12]
1000be44:	4b90      	ldr	r3, [pc, #576]	; (1000c088 <system_clock_peripheral_disable+0x338>)
1000be46:	400b      	ands	r3, r1
1000be48:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be4a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000be4c:	e103      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be4e:	4a83      	ldr	r2, [pc, #524]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be50:	68d1      	ldr	r1, [r2, #12]
1000be52:	4b8e      	ldr	r3, [pc, #568]	; (1000c08c <system_clock_peripheral_disable+0x33c>)
1000be54:	400b      	ands	r3, r1
1000be56:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be58:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000be5a:	e0fc      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be5c:	4a7f      	ldr	r2, [pc, #508]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be5e:	68d1      	ldr	r1, [r2, #12]
1000be60:	4b8b      	ldr	r3, [pc, #556]	; (1000c090 <system_clock_peripheral_disable+0x340>)
1000be62:	400b      	ands	r3, r1
1000be64:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be66:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000be68:	e0f5      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be6a:	4a7c      	ldr	r2, [pc, #496]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be6c:	68d1      	ldr	r1, [r2, #12]
1000be6e:	4b89      	ldr	r3, [pc, #548]	; (1000c094 <system_clock_peripheral_disable+0x344>)
1000be70:	400b      	ands	r3, r1
1000be72:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be74:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000be76:	e0ee      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be78:	4a78      	ldr	r2, [pc, #480]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be7a:	68d1      	ldr	r1, [r2, #12]
1000be7c:	4b86      	ldr	r3, [pc, #536]	; (1000c098 <system_clock_peripheral_disable+0x348>)
1000be7e:	400b      	ands	r3, r1
1000be80:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be82:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000be84:	e0e7      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be86:	4a75      	ldr	r2, [pc, #468]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be88:	68d1      	ldr	r1, [r2, #12]
1000be8a:	4b84      	ldr	r3, [pc, #528]	; (1000c09c <system_clock_peripheral_disable+0x34c>)
1000be8c:	400b      	ands	r3, r1
1000be8e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be90:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000be92:	e0e0      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000be94:	4a71      	ldr	r2, [pc, #452]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000be96:	68d1      	ldr	r1, [r2, #12]
1000be98:	4b81      	ldr	r3, [pc, #516]	; (1000c0a0 <system_clock_peripheral_disable+0x350>)
1000be9a:	400b      	ands	r3, r1
1000be9c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000be9e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000bea0:	e0d9      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bea2:	4a6e      	ldr	r2, [pc, #440]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bea4:	68d1      	ldr	r1, [r2, #12]
1000bea6:	4b7f      	ldr	r3, [pc, #508]	; (1000c0a4 <system_clock_peripheral_disable+0x354>)
1000bea8:	400b      	ands	r3, r1
1000beaa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000beae:	e0d2      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000beb0:	4a6a      	ldr	r2, [pc, #424]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000beb2:	68d1      	ldr	r1, [r2, #12]
1000beb4:	4b7c      	ldr	r3, [pc, #496]	; (1000c0a8 <system_clock_peripheral_disable+0x358>)
1000beb6:	400b      	ands	r3, r1
1000beb8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000beba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000bebc:	e0cb      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000bebe:	4a67      	ldr	r2, [pc, #412]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bec0:	68d1      	ldr	r1, [r2, #12]
1000bec2:	4b7a      	ldr	r3, [pc, #488]	; (1000c0ac <system_clock_peripheral_disable+0x35c>)
1000bec4:	400b      	ands	r3, r1
1000bec6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bec8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000beca:	e0c4      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000becc:	4a63      	ldr	r2, [pc, #396]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bece:	68d1      	ldr	r1, [r2, #12]
1000bed0:	4b77      	ldr	r3, [pc, #476]	; (1000c0b0 <system_clock_peripheral_disable+0x360>)
1000bed2:	400b      	ands	r3, r1
1000bed4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bed6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000bed8:	e0bd      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000beda:	4a60      	ldr	r2, [pc, #384]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bedc:	6913      	ldr	r3, [r2, #16]
1000bede:	2101      	movs	r1, #1
1000bee0:	438b      	bics	r3, r1
1000bee2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bee4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000bee6:	e0b6      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bee8:	4a5c      	ldr	r2, [pc, #368]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000beea:	6913      	ldr	r3, [r2, #16]
1000beec:	2102      	movs	r1, #2
1000beee:	438b      	bics	r3, r1
1000bef0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bef2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000bef4:	e0af      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bef6:	4a59      	ldr	r2, [pc, #356]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bef8:	6913      	ldr	r3, [r2, #16]
1000befa:	2104      	movs	r1, #4
1000befc:	438b      	bics	r3, r1
1000befe:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf00:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000bf02:	e0a8      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf04:	4a55      	ldr	r2, [pc, #340]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf06:	6913      	ldr	r3, [r2, #16]
1000bf08:	2108      	movs	r1, #8
1000bf0a:	438b      	bics	r3, r1
1000bf0c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf0e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000bf10:	e0a1      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf12:	4a52      	ldr	r2, [pc, #328]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf14:	6913      	ldr	r3, [r2, #16]
1000bf16:	2110      	movs	r1, #16
1000bf18:	438b      	bics	r3, r1
1000bf1a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf1c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000bf1e:	e09a      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf20:	4a4e      	ldr	r2, [pc, #312]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf22:	6913      	ldr	r3, [r2, #16]
1000bf24:	2120      	movs	r1, #32
1000bf26:	438b      	bics	r3, r1
1000bf28:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf2a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000bf2c:	e093      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf2e:	4a4b      	ldr	r2, [pc, #300]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf30:	6913      	ldr	r3, [r2, #16]
1000bf32:	2140      	movs	r1, #64	; 0x40
1000bf34:	438b      	bics	r3, r1
1000bf36:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf38:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000bf3a:	e08c      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf3c:	4a47      	ldr	r2, [pc, #284]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf3e:	6913      	ldr	r3, [r2, #16]
1000bf40:	2180      	movs	r1, #128	; 0x80
1000bf42:	438b      	bics	r3, r1
1000bf44:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf46:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000bf48:	e085      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf4a:	4a44      	ldr	r2, [pc, #272]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf4c:	6911      	ldr	r1, [r2, #16]
1000bf4e:	4b44      	ldr	r3, [pc, #272]	; (1000c060 <system_clock_peripheral_disable+0x310>)
1000bf50:	400b      	ands	r3, r1
1000bf52:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf54:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000bf56:	e07e      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf58:	4a40      	ldr	r2, [pc, #256]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf5a:	6911      	ldr	r1, [r2, #16]
1000bf5c:	4b55      	ldr	r3, [pc, #340]	; (1000c0b4 <system_clock_peripheral_disable+0x364>)
1000bf5e:	400b      	ands	r3, r1
1000bf60:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf62:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000bf64:	e077      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf66:	4a3d      	ldr	r2, [pc, #244]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf68:	6911      	ldr	r1, [r2, #16]
1000bf6a:	4b53      	ldr	r3, [pc, #332]	; (1000c0b8 <system_clock_peripheral_disable+0x368>)
1000bf6c:	400b      	ands	r3, r1
1000bf6e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf70:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000bf72:	e070      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf74:	4a39      	ldr	r2, [pc, #228]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf76:	6911      	ldr	r1, [r2, #16]
1000bf78:	4b3a      	ldr	r3, [pc, #232]	; (1000c064 <system_clock_peripheral_disable+0x314>)
1000bf7a:	400b      	ands	r3, r1
1000bf7c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf7e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000bf80:	e069      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf82:	4a36      	ldr	r2, [pc, #216]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf84:	6911      	ldr	r1, [r2, #16]
1000bf86:	4b38      	ldr	r3, [pc, #224]	; (1000c068 <system_clock_peripheral_disable+0x318>)
1000bf88:	400b      	ands	r3, r1
1000bf8a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf8c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000bf8e:	e062      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf90:	4a32      	ldr	r2, [pc, #200]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bf92:	6911      	ldr	r1, [r2, #16]
1000bf94:	4b35      	ldr	r3, [pc, #212]	; (1000c06c <system_clock_peripheral_disable+0x31c>)
1000bf96:	400b      	ands	r3, r1
1000bf98:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bf9a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000bf9c:	e05b      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bf9e:	4a2f      	ldr	r2, [pc, #188]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfa0:	6911      	ldr	r1, [r2, #16]
1000bfa2:	4b33      	ldr	r3, [pc, #204]	; (1000c070 <system_clock_peripheral_disable+0x320>)
1000bfa4:	400b      	ands	r3, r1
1000bfa6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfa8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000bfaa:	e054      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bfac:	4a2b      	ldr	r2, [pc, #172]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfae:	6911      	ldr	r1, [r2, #16]
1000bfb0:	4b30      	ldr	r3, [pc, #192]	; (1000c074 <system_clock_peripheral_disable+0x324>)
1000bfb2:	400b      	ands	r3, r1
1000bfb4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfb6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000bfb8:	e04d      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bfba:	4a28      	ldr	r2, [pc, #160]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfbc:	6911      	ldr	r1, [r2, #16]
1000bfbe:	4b2e      	ldr	r3, [pc, #184]	; (1000c078 <system_clock_peripheral_disable+0x328>)
1000bfc0:	400b      	ands	r3, r1
1000bfc2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfc4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000bfc6:	e046      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bfc8:	4a24      	ldr	r2, [pc, #144]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfca:	6911      	ldr	r1, [r2, #16]
1000bfcc:	4b2b      	ldr	r3, [pc, #172]	; (1000c07c <system_clock_peripheral_disable+0x32c>)
1000bfce:	400b      	ands	r3, r1
1000bfd0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfd2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000bfd4:	e03f      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bfd6:	4a21      	ldr	r2, [pc, #132]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfd8:	6911      	ldr	r1, [r2, #16]
1000bfda:	4b29      	ldr	r3, [pc, #164]	; (1000c080 <system_clock_peripheral_disable+0x330>)
1000bfdc:	400b      	ands	r3, r1
1000bfde:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfe0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000bfe2:	e038      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bfe4:	4a1d      	ldr	r2, [pc, #116]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bfe6:	6911      	ldr	r1, [r2, #16]
1000bfe8:	4b26      	ldr	r3, [pc, #152]	; (1000c084 <system_clock_peripheral_disable+0x334>)
1000bfea:	400b      	ands	r3, r1
1000bfec:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bfee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000bff0:	e031      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000bff2:	4a1a      	ldr	r2, [pc, #104]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000bff4:	6911      	ldr	r1, [r2, #16]
1000bff6:	4b24      	ldr	r3, [pc, #144]	; (1000c088 <system_clock_peripheral_disable+0x338>)
1000bff8:	400b      	ands	r3, r1
1000bffa:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bffc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000bffe:	e02a      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c000:	4a16      	ldr	r2, [pc, #88]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c002:	6911      	ldr	r1, [r2, #16]
1000c004:	4b21      	ldr	r3, [pc, #132]	; (1000c08c <system_clock_peripheral_disable+0x33c>)
1000c006:	400b      	ands	r3, r1
1000c008:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c00a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000c00c:	e023      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c00e:	4a13      	ldr	r2, [pc, #76]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c010:	6911      	ldr	r1, [r2, #16]
1000c012:	4b1f      	ldr	r3, [pc, #124]	; (1000c090 <system_clock_peripheral_disable+0x340>)
1000c014:	400b      	ands	r3, r1
1000c016:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c018:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000c01a:	e01c      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000c01c:	4a0f      	ldr	r2, [pc, #60]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c01e:	6911      	ldr	r1, [r2, #16]
1000c020:	4b1c      	ldr	r3, [pc, #112]	; (1000c094 <system_clock_peripheral_disable+0x344>)
1000c022:	400b      	ands	r3, r1
1000c024:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c026:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000c028:	e015      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c02a:	4a0c      	ldr	r2, [pc, #48]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c02c:	7d13      	ldrb	r3, [r2, #20]
1000c02e:	2101      	movs	r1, #1
1000c030:	438b      	bics	r3, r1
1000c032:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c034:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000c036:	e00e      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c038:	4a08      	ldr	r2, [pc, #32]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c03a:	7d13      	ldrb	r3, [r2, #20]
1000c03c:	2102      	movs	r1, #2
1000c03e:	438b      	bics	r3, r1
1000c040:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c042:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000c044:	e007      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000c046:	4a05      	ldr	r2, [pc, #20]	; (1000c05c <system_clock_peripheral_disable+0x30c>)
1000c048:	7d13      	ldrb	r3, [r2, #20]
1000c04a:	2104      	movs	r1, #4
1000c04c:	438b      	bics	r3, r1
1000c04e:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c050:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000c052:	e000      	b.n	1000c056 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c054:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c056:	bd00      	pop	{pc}
1000c058:	100179c8 	.word	0x100179c8
1000c05c:	4000b000 	.word	0x4000b000
1000c060:	fffffeff 	.word	0xfffffeff
1000c064:	fffff7ff 	.word	0xfffff7ff
1000c068:	ffffefff 	.word	0xffffefff
1000c06c:	ffffdfff 	.word	0xffffdfff
1000c070:	ffffbfff 	.word	0xffffbfff
1000c074:	ffff7fff 	.word	0xffff7fff
1000c078:	fffeffff 	.word	0xfffeffff
1000c07c:	fffdffff 	.word	0xfffdffff
1000c080:	fffbffff 	.word	0xfffbffff
1000c084:	fff7ffff 	.word	0xfff7ffff
1000c088:	ffefffff 	.word	0xffefffff
1000c08c:	ffdfffff 	.word	0xffdfffff
1000c090:	ffbfffff 	.word	0xffbfffff
1000c094:	ff7fffff 	.word	0xff7fffff
1000c098:	feffffff 	.word	0xfeffffff
1000c09c:	fdffffff 	.word	0xfdffffff
1000c0a0:	fbffffff 	.word	0xfbffffff
1000c0a4:	f7ffffff 	.word	0xf7ffffff
1000c0a8:	efffffff 	.word	0xefffffff
1000c0ac:	dfffffff 	.word	0xdfffffff
1000c0b0:	bfffffff 	.word	0xbfffffff
1000c0b4:	fffffdff 	.word	0xfffffdff
1000c0b8:	fffffbff 	.word	0xfffffbff

1000c0bc <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000c0bc:	b500      	push	{lr}
	switch (peripheral) {
1000c0be:	2843      	cmp	r0, #67	; 0x43
1000c0c0:	d900      	bls.n	1000c0c4 <system_peripheral_reset+0x8>
1000c0c2:	e223      	b.n	1000c50c <system_peripheral_reset+0x450>
1000c0c4:	0080      	lsls	r0, r0, #2
1000c0c6:	4be0      	ldr	r3, [pc, #896]	; (1000c448 <system_peripheral_reset+0x38c>)
1000c0c8:	581b      	ldr	r3, [r3, r0]
1000c0ca:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0cc:	4bdf      	ldr	r3, [pc, #892]	; (1000c44c <system_peripheral_reset+0x390>)
1000c0ce:	6859      	ldr	r1, [r3, #4]
1000c0d0:	2202      	movs	r2, #2
1000c0d2:	4391      	bics	r1, r2
1000c0d4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0d6:	6859      	ldr	r1, [r3, #4]
1000c0d8:	430a      	orrs	r2, r1
1000c0da:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0dc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000c0de:	e216      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0e0:	4bda      	ldr	r3, [pc, #872]	; (1000c44c <system_peripheral_reset+0x390>)
1000c0e2:	6859      	ldr	r1, [r3, #4]
1000c0e4:	2204      	movs	r2, #4
1000c0e6:	4391      	bics	r1, r2
1000c0e8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0ea:	6859      	ldr	r1, [r3, #4]
1000c0ec:	430a      	orrs	r2, r1
1000c0ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c0f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000c0f2:	e20c      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c0f4:	4bd5      	ldr	r3, [pc, #852]	; (1000c44c <system_peripheral_reset+0x390>)
1000c0f6:	6859      	ldr	r1, [r3, #4]
1000c0f8:	2208      	movs	r2, #8
1000c0fa:	4391      	bics	r1, r2
1000c0fc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c0fe:	6859      	ldr	r1, [r3, #4]
1000c100:	430a      	orrs	r2, r1
1000c102:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c104:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000c106:	e202      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c108:	4bd0      	ldr	r3, [pc, #832]	; (1000c44c <system_peripheral_reset+0x390>)
1000c10a:	6859      	ldr	r1, [r3, #4]
1000c10c:	2210      	movs	r2, #16
1000c10e:	4391      	bics	r1, r2
1000c110:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c112:	6859      	ldr	r1, [r3, #4]
1000c114:	430a      	orrs	r2, r1
1000c116:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c118:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000c11a:	e1f8      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c11c:	4bcb      	ldr	r3, [pc, #812]	; (1000c44c <system_peripheral_reset+0x390>)
1000c11e:	6859      	ldr	r1, [r3, #4]
1000c120:	2220      	movs	r2, #32
1000c122:	4391      	bics	r1, r2
1000c124:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c126:	6859      	ldr	r1, [r3, #4]
1000c128:	430a      	orrs	r2, r1
1000c12a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c12c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000c12e:	e1ee      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c130:	4bc6      	ldr	r3, [pc, #792]	; (1000c44c <system_peripheral_reset+0x390>)
1000c132:	6859      	ldr	r1, [r3, #4]
1000c134:	2240      	movs	r2, #64	; 0x40
1000c136:	4391      	bics	r1, r2
1000c138:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c13a:	6859      	ldr	r1, [r3, #4]
1000c13c:	430a      	orrs	r2, r1
1000c13e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c140:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000c142:	e1e4      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c144:	4bc1      	ldr	r3, [pc, #772]	; (1000c44c <system_peripheral_reset+0x390>)
1000c146:	6859      	ldr	r1, [r3, #4]
1000c148:	2280      	movs	r2, #128	; 0x80
1000c14a:	4391      	bics	r1, r2
1000c14c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c14e:	6859      	ldr	r1, [r3, #4]
1000c150:	430a      	orrs	r2, r1
1000c152:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c154:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000c156:	e1da      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c158:	4bbc      	ldr	r3, [pc, #752]	; (1000c44c <system_peripheral_reset+0x390>)
1000c15a:	6859      	ldr	r1, [r3, #4]
1000c15c:	4abc      	ldr	r2, [pc, #752]	; (1000c450 <system_peripheral_reset+0x394>)
1000c15e:	400a      	ands	r2, r1
1000c160:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c162:	685a      	ldr	r2, [r3, #4]
1000c164:	2180      	movs	r1, #128	; 0x80
1000c166:	0049      	lsls	r1, r1, #1
1000c168:	430a      	orrs	r2, r1
1000c16a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c16c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000c16e:	e1ce      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c170:	4bb6      	ldr	r3, [pc, #728]	; (1000c44c <system_peripheral_reset+0x390>)
1000c172:	6859      	ldr	r1, [r3, #4]
1000c174:	4ab7      	ldr	r2, [pc, #732]	; (1000c454 <system_peripheral_reset+0x398>)
1000c176:	400a      	ands	r2, r1
1000c178:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c17a:	685a      	ldr	r2, [r3, #4]
1000c17c:	2180      	movs	r1, #128	; 0x80
1000c17e:	0089      	lsls	r1, r1, #2
1000c180:	430a      	orrs	r2, r1
1000c182:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c184:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000c186:	e1c2      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c188:	4bb0      	ldr	r3, [pc, #704]	; (1000c44c <system_peripheral_reset+0x390>)
1000c18a:	6859      	ldr	r1, [r3, #4]
1000c18c:	4ab2      	ldr	r2, [pc, #712]	; (1000c458 <system_peripheral_reset+0x39c>)
1000c18e:	400a      	ands	r2, r1
1000c190:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c192:	685a      	ldr	r2, [r3, #4]
1000c194:	2180      	movs	r1, #128	; 0x80
1000c196:	00c9      	lsls	r1, r1, #3
1000c198:	430a      	orrs	r2, r1
1000c19a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c19c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000c19e:	e1b6      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1a0:	4baa      	ldr	r3, [pc, #680]	; (1000c44c <system_peripheral_reset+0x390>)
1000c1a2:	6859      	ldr	r1, [r3, #4]
1000c1a4:	4aad      	ldr	r2, [pc, #692]	; (1000c45c <system_peripheral_reset+0x3a0>)
1000c1a6:	400a      	ands	r2, r1
1000c1a8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1aa:	685a      	ldr	r2, [r3, #4]
1000c1ac:	2180      	movs	r1, #128	; 0x80
1000c1ae:	0109      	lsls	r1, r1, #4
1000c1b0:	430a      	orrs	r2, r1
1000c1b2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1b4:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000c1b6:	e1aa      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1b8:	4ba4      	ldr	r3, [pc, #656]	; (1000c44c <system_peripheral_reset+0x390>)
1000c1ba:	6859      	ldr	r1, [r3, #4]
1000c1bc:	4aa8      	ldr	r2, [pc, #672]	; (1000c460 <system_peripheral_reset+0x3a4>)
1000c1be:	400a      	ands	r2, r1
1000c1c0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1c2:	685a      	ldr	r2, [r3, #4]
1000c1c4:	2180      	movs	r1, #128	; 0x80
1000c1c6:	0149      	lsls	r1, r1, #5
1000c1c8:	430a      	orrs	r2, r1
1000c1ca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1cc:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000c1ce:	e19e      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1d0:	4b9e      	ldr	r3, [pc, #632]	; (1000c44c <system_peripheral_reset+0x390>)
1000c1d2:	6859      	ldr	r1, [r3, #4]
1000c1d4:	4aa3      	ldr	r2, [pc, #652]	; (1000c464 <system_peripheral_reset+0x3a8>)
1000c1d6:	400a      	ands	r2, r1
1000c1d8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1da:	685a      	ldr	r2, [r3, #4]
1000c1dc:	2180      	movs	r1, #128	; 0x80
1000c1de:	0189      	lsls	r1, r1, #6
1000c1e0:	430a      	orrs	r2, r1
1000c1e2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1e4:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000c1e6:	e192      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c1e8:	4b98      	ldr	r3, [pc, #608]	; (1000c44c <system_peripheral_reset+0x390>)
1000c1ea:	6859      	ldr	r1, [r3, #4]
1000c1ec:	4a9e      	ldr	r2, [pc, #632]	; (1000c468 <system_peripheral_reset+0x3ac>)
1000c1ee:	400a      	ands	r2, r1
1000c1f0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c1f2:	685a      	ldr	r2, [r3, #4]
1000c1f4:	2180      	movs	r1, #128	; 0x80
1000c1f6:	01c9      	lsls	r1, r1, #7
1000c1f8:	430a      	orrs	r2, r1
1000c1fa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c1fc:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000c1fe:	e186      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c200:	4b92      	ldr	r3, [pc, #584]	; (1000c44c <system_peripheral_reset+0x390>)
1000c202:	6859      	ldr	r1, [r3, #4]
1000c204:	4a99      	ldr	r2, [pc, #612]	; (1000c46c <system_peripheral_reset+0x3b0>)
1000c206:	400a      	ands	r2, r1
1000c208:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c20a:	685a      	ldr	r2, [r3, #4]
1000c20c:	2180      	movs	r1, #128	; 0x80
1000c20e:	0209      	lsls	r1, r1, #8
1000c210:	430a      	orrs	r2, r1
1000c212:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c214:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000c216:	e17a      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c218:	4b8c      	ldr	r3, [pc, #560]	; (1000c44c <system_peripheral_reset+0x390>)
1000c21a:	6859      	ldr	r1, [r3, #4]
1000c21c:	4a94      	ldr	r2, [pc, #592]	; (1000c470 <system_peripheral_reset+0x3b4>)
1000c21e:	400a      	ands	r2, r1
1000c220:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c222:	685a      	ldr	r2, [r3, #4]
1000c224:	2180      	movs	r1, #128	; 0x80
1000c226:	0249      	lsls	r1, r1, #9
1000c228:	430a      	orrs	r2, r1
1000c22a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c22c:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000c22e:	e16e      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c230:	4b86      	ldr	r3, [pc, #536]	; (1000c44c <system_peripheral_reset+0x390>)
1000c232:	6859      	ldr	r1, [r3, #4]
1000c234:	4a8f      	ldr	r2, [pc, #572]	; (1000c474 <system_peripheral_reset+0x3b8>)
1000c236:	400a      	ands	r2, r1
1000c238:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c23a:	685a      	ldr	r2, [r3, #4]
1000c23c:	2180      	movs	r1, #128	; 0x80
1000c23e:	0289      	lsls	r1, r1, #10
1000c240:	430a      	orrs	r2, r1
1000c242:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c244:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000c246:	e162      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c248:	4b80      	ldr	r3, [pc, #512]	; (1000c44c <system_peripheral_reset+0x390>)
1000c24a:	6859      	ldr	r1, [r3, #4]
1000c24c:	4a8a      	ldr	r2, [pc, #552]	; (1000c478 <system_peripheral_reset+0x3bc>)
1000c24e:	400a      	ands	r2, r1
1000c250:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c252:	685a      	ldr	r2, [r3, #4]
1000c254:	2180      	movs	r1, #128	; 0x80
1000c256:	02c9      	lsls	r1, r1, #11
1000c258:	430a      	orrs	r2, r1
1000c25a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c25c:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000c25e:	e156      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c260:	4b7a      	ldr	r3, [pc, #488]	; (1000c44c <system_peripheral_reset+0x390>)
1000c262:	6859      	ldr	r1, [r3, #4]
1000c264:	4a85      	ldr	r2, [pc, #532]	; (1000c47c <system_peripheral_reset+0x3c0>)
1000c266:	400a      	ands	r2, r1
1000c268:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c26a:	685a      	ldr	r2, [r3, #4]
1000c26c:	2180      	movs	r1, #128	; 0x80
1000c26e:	0309      	lsls	r1, r1, #12
1000c270:	430a      	orrs	r2, r1
1000c272:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c274:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000c276:	e14a      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c278:	4b74      	ldr	r3, [pc, #464]	; (1000c44c <system_peripheral_reset+0x390>)
1000c27a:	6859      	ldr	r1, [r3, #4]
1000c27c:	4a80      	ldr	r2, [pc, #512]	; (1000c480 <system_peripheral_reset+0x3c4>)
1000c27e:	400a      	ands	r2, r1
1000c280:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c282:	685a      	ldr	r2, [r3, #4]
1000c284:	2180      	movs	r1, #128	; 0x80
1000c286:	0349      	lsls	r1, r1, #13
1000c288:	430a      	orrs	r2, r1
1000c28a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c28c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000c28e:	e13e      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c290:	4b6e      	ldr	r3, [pc, #440]	; (1000c44c <system_peripheral_reset+0x390>)
1000c292:	6859      	ldr	r1, [r3, #4]
1000c294:	4a7b      	ldr	r2, [pc, #492]	; (1000c484 <system_peripheral_reset+0x3c8>)
1000c296:	400a      	ands	r2, r1
1000c298:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c29a:	685a      	ldr	r2, [r3, #4]
1000c29c:	2180      	movs	r1, #128	; 0x80
1000c29e:	0389      	lsls	r1, r1, #14
1000c2a0:	430a      	orrs	r2, r1
1000c2a2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2a4:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000c2a6:	e132      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2a8:	4b68      	ldr	r3, [pc, #416]	; (1000c44c <system_peripheral_reset+0x390>)
1000c2aa:	6859      	ldr	r1, [r3, #4]
1000c2ac:	4a76      	ldr	r2, [pc, #472]	; (1000c488 <system_peripheral_reset+0x3cc>)
1000c2ae:	400a      	ands	r2, r1
1000c2b0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2b2:	685a      	ldr	r2, [r3, #4]
1000c2b4:	2180      	movs	r1, #128	; 0x80
1000c2b6:	03c9      	lsls	r1, r1, #15
1000c2b8:	430a      	orrs	r2, r1
1000c2ba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2bc:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000c2be:	e126      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2c0:	4b62      	ldr	r3, [pc, #392]	; (1000c44c <system_peripheral_reset+0x390>)
1000c2c2:	6859      	ldr	r1, [r3, #4]
1000c2c4:	4a71      	ldr	r2, [pc, #452]	; (1000c48c <system_peripheral_reset+0x3d0>)
1000c2c6:	400a      	ands	r2, r1
1000c2c8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2ca:	685a      	ldr	r2, [r3, #4]
1000c2cc:	2180      	movs	r1, #128	; 0x80
1000c2ce:	0409      	lsls	r1, r1, #16
1000c2d0:	430a      	orrs	r2, r1
1000c2d2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2d4:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000c2d6:	e11a      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2d8:	4b5c      	ldr	r3, [pc, #368]	; (1000c44c <system_peripheral_reset+0x390>)
1000c2da:	6859      	ldr	r1, [r3, #4]
1000c2dc:	4a6c      	ldr	r2, [pc, #432]	; (1000c490 <system_peripheral_reset+0x3d4>)
1000c2de:	400a      	ands	r2, r1
1000c2e0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2e2:	685a      	ldr	r2, [r3, #4]
1000c2e4:	2180      	movs	r1, #128	; 0x80
1000c2e6:	0449      	lsls	r1, r1, #17
1000c2e8:	430a      	orrs	r2, r1
1000c2ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c2ec:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000c2ee:	e10e      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c2f0:	4b56      	ldr	r3, [pc, #344]	; (1000c44c <system_peripheral_reset+0x390>)
1000c2f2:	6859      	ldr	r1, [r3, #4]
1000c2f4:	4a67      	ldr	r2, [pc, #412]	; (1000c494 <system_peripheral_reset+0x3d8>)
1000c2f6:	400a      	ands	r2, r1
1000c2f8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c2fa:	685a      	ldr	r2, [r3, #4]
1000c2fc:	2180      	movs	r1, #128	; 0x80
1000c2fe:	0489      	lsls	r1, r1, #18
1000c300:	430a      	orrs	r2, r1
1000c302:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c304:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000c306:	e102      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c308:	4b50      	ldr	r3, [pc, #320]	; (1000c44c <system_peripheral_reset+0x390>)
1000c30a:	6859      	ldr	r1, [r3, #4]
1000c30c:	4a62      	ldr	r2, [pc, #392]	; (1000c498 <system_peripheral_reset+0x3dc>)
1000c30e:	400a      	ands	r2, r1
1000c310:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c312:	685a      	ldr	r2, [r3, #4]
1000c314:	2180      	movs	r1, #128	; 0x80
1000c316:	04c9      	lsls	r1, r1, #19
1000c318:	430a      	orrs	r2, r1
1000c31a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c31c:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000c31e:	e0f6      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c320:	4b4a      	ldr	r3, [pc, #296]	; (1000c44c <system_peripheral_reset+0x390>)
1000c322:	6859      	ldr	r1, [r3, #4]
1000c324:	4a5d      	ldr	r2, [pc, #372]	; (1000c49c <system_peripheral_reset+0x3e0>)
1000c326:	400a      	ands	r2, r1
1000c328:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c32a:	685a      	ldr	r2, [r3, #4]
1000c32c:	2180      	movs	r1, #128	; 0x80
1000c32e:	0509      	lsls	r1, r1, #20
1000c330:	430a      	orrs	r2, r1
1000c332:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c334:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000c336:	e0ea      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c338:	4b44      	ldr	r3, [pc, #272]	; (1000c44c <system_peripheral_reset+0x390>)
1000c33a:	6859      	ldr	r1, [r3, #4]
1000c33c:	4a58      	ldr	r2, [pc, #352]	; (1000c4a0 <system_peripheral_reset+0x3e4>)
1000c33e:	400a      	ands	r2, r1
1000c340:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c342:	685a      	ldr	r2, [r3, #4]
1000c344:	2180      	movs	r1, #128	; 0x80
1000c346:	0549      	lsls	r1, r1, #21
1000c348:	430a      	orrs	r2, r1
1000c34a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c34c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000c34e:	e0de      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c350:	4b3e      	ldr	r3, [pc, #248]	; (1000c44c <system_peripheral_reset+0x390>)
1000c352:	6859      	ldr	r1, [r3, #4]
1000c354:	4a53      	ldr	r2, [pc, #332]	; (1000c4a4 <system_peripheral_reset+0x3e8>)
1000c356:	400a      	ands	r2, r1
1000c358:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c35a:	685a      	ldr	r2, [r3, #4]
1000c35c:	2180      	movs	r1, #128	; 0x80
1000c35e:	0589      	lsls	r1, r1, #22
1000c360:	430a      	orrs	r2, r1
1000c362:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c364:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000c366:	e0d2      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c368:	4b38      	ldr	r3, [pc, #224]	; (1000c44c <system_peripheral_reset+0x390>)
1000c36a:	6859      	ldr	r1, [r3, #4]
1000c36c:	4a4e      	ldr	r2, [pc, #312]	; (1000c4a8 <system_peripheral_reset+0x3ec>)
1000c36e:	400a      	ands	r2, r1
1000c370:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c372:	685a      	ldr	r2, [r3, #4]
1000c374:	2180      	movs	r1, #128	; 0x80
1000c376:	05c9      	lsls	r1, r1, #23
1000c378:	430a      	orrs	r2, r1
1000c37a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c37c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000c37e:	e0c6      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000c380:	4a32      	ldr	r2, [pc, #200]	; (1000c44c <system_peripheral_reset+0x390>)
1000c382:	6853      	ldr	r3, [r2, #4]
1000c384:	005b      	lsls	r3, r3, #1
1000c386:	085b      	lsrs	r3, r3, #1
1000c388:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000c38a:	6853      	ldr	r3, [r2, #4]
1000c38c:	2180      	movs	r1, #128	; 0x80
1000c38e:	0609      	lsls	r1, r1, #24
1000c390:	430b      	orrs	r3, r1
1000c392:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c394:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000c396:	e0ba      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c398:	4b2c      	ldr	r3, [pc, #176]	; (1000c44c <system_peripheral_reset+0x390>)
1000c39a:	891a      	ldrh	r2, [r3, #8]
1000c39c:	2101      	movs	r1, #1
1000c39e:	438a      	bics	r2, r1
1000c3a0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3a2:	8919      	ldrh	r1, [r3, #8]
1000c3a4:	2201      	movs	r2, #1
1000c3a6:	430a      	orrs	r2, r1
1000c3a8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3aa:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000c3ac:	e0af      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3ae:	4b27      	ldr	r3, [pc, #156]	; (1000c44c <system_peripheral_reset+0x390>)
1000c3b0:	891a      	ldrh	r2, [r3, #8]
1000c3b2:	2102      	movs	r1, #2
1000c3b4:	438a      	bics	r2, r1
1000c3b6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3b8:	8919      	ldrh	r1, [r3, #8]
1000c3ba:	2202      	movs	r2, #2
1000c3bc:	430a      	orrs	r2, r1
1000c3be:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3c0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000c3c2:	e0a4      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3c4:	4b21      	ldr	r3, [pc, #132]	; (1000c44c <system_peripheral_reset+0x390>)
1000c3c6:	891a      	ldrh	r2, [r3, #8]
1000c3c8:	2104      	movs	r1, #4
1000c3ca:	438a      	bics	r2, r1
1000c3cc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3ce:	8919      	ldrh	r1, [r3, #8]
1000c3d0:	2204      	movs	r2, #4
1000c3d2:	430a      	orrs	r2, r1
1000c3d4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3d6:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000c3d8:	e099      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3da:	4b1c      	ldr	r3, [pc, #112]	; (1000c44c <system_peripheral_reset+0x390>)
1000c3dc:	891a      	ldrh	r2, [r3, #8]
1000c3de:	2108      	movs	r1, #8
1000c3e0:	438a      	bics	r2, r1
1000c3e2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3e4:	8919      	ldrh	r1, [r3, #8]
1000c3e6:	2208      	movs	r2, #8
1000c3e8:	430a      	orrs	r2, r1
1000c3ea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c3ec:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000c3ee:	e08e      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c3f0:	4b16      	ldr	r3, [pc, #88]	; (1000c44c <system_peripheral_reset+0x390>)
1000c3f2:	891a      	ldrh	r2, [r3, #8]
1000c3f4:	2110      	movs	r1, #16
1000c3f6:	438a      	bics	r2, r1
1000c3f8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c3fa:	8919      	ldrh	r1, [r3, #8]
1000c3fc:	2210      	movs	r2, #16
1000c3fe:	430a      	orrs	r2, r1
1000c400:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c402:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000c404:	e083      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c406:	4b11      	ldr	r3, [pc, #68]	; (1000c44c <system_peripheral_reset+0x390>)
1000c408:	891a      	ldrh	r2, [r3, #8]
1000c40a:	2120      	movs	r1, #32
1000c40c:	438a      	bics	r2, r1
1000c40e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c410:	8919      	ldrh	r1, [r3, #8]
1000c412:	2220      	movs	r2, #32
1000c414:	430a      	orrs	r2, r1
1000c416:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c418:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000c41a:	e078      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c41c:	4b0b      	ldr	r3, [pc, #44]	; (1000c44c <system_peripheral_reset+0x390>)
1000c41e:	891a      	ldrh	r2, [r3, #8]
1000c420:	2140      	movs	r1, #64	; 0x40
1000c422:	438a      	bics	r2, r1
1000c424:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c426:	8919      	ldrh	r1, [r3, #8]
1000c428:	2240      	movs	r2, #64	; 0x40
1000c42a:	430a      	orrs	r2, r1
1000c42c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c42e:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000c430:	e06d      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c432:	4b06      	ldr	r3, [pc, #24]	; (1000c44c <system_peripheral_reset+0x390>)
1000c434:	891a      	ldrh	r2, [r3, #8]
1000c436:	2180      	movs	r1, #128	; 0x80
1000c438:	438a      	bics	r2, r1
1000c43a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c43c:	8919      	ldrh	r1, [r3, #8]
1000c43e:	2280      	movs	r2, #128	; 0x80
1000c440:	430a      	orrs	r2, r1
1000c442:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c444:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000c446:	e062      	b.n	1000c50e <system_peripheral_reset+0x452>
1000c448:	10017aa0 	.word	0x10017aa0
1000c44c:	4000b000 	.word	0x4000b000
1000c450:	fffffeff 	.word	0xfffffeff
1000c454:	fffffdff 	.word	0xfffffdff
1000c458:	fffffbff 	.word	0xfffffbff
1000c45c:	fffff7ff 	.word	0xfffff7ff
1000c460:	ffffefff 	.word	0xffffefff
1000c464:	ffffdfff 	.word	0xffffdfff
1000c468:	ffffbfff 	.word	0xffffbfff
1000c46c:	ffff7fff 	.word	0xffff7fff
1000c470:	fffeffff 	.word	0xfffeffff
1000c474:	fffdffff 	.word	0xfffdffff
1000c478:	fffbffff 	.word	0xfffbffff
1000c47c:	fff7ffff 	.word	0xfff7ffff
1000c480:	ffefffff 	.word	0xffefffff
1000c484:	ffdfffff 	.word	0xffdfffff
1000c488:	ffbfffff 	.word	0xffbfffff
1000c48c:	ff7fffff 	.word	0xff7fffff
1000c490:	feffffff 	.word	0xfeffffff
1000c494:	fdffffff 	.word	0xfdffffff
1000c498:	fbffffff 	.word	0xfbffffff
1000c49c:	f7ffffff 	.word	0xf7ffffff
1000c4a0:	efffffff 	.word	0xefffffff
1000c4a4:	dfffffff 	.word	0xdfffffff
1000c4a8:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4ac:	4b18      	ldr	r3, [pc, #96]	; (1000c510 <system_peripheral_reset+0x454>)
1000c4ae:	8919      	ldrh	r1, [r3, #8]
1000c4b0:	4a18      	ldr	r2, [pc, #96]	; (1000c514 <system_peripheral_reset+0x458>)
1000c4b2:	400a      	ands	r2, r1
1000c4b4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4b6:	8919      	ldrh	r1, [r3, #8]
1000c4b8:	2280      	movs	r2, #128	; 0x80
1000c4ba:	0052      	lsls	r2, r2, #1
1000c4bc:	430a      	orrs	r2, r1
1000c4be:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4c0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000c4c2:	e024      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4c4:	4b12      	ldr	r3, [pc, #72]	; (1000c510 <system_peripheral_reset+0x454>)
1000c4c6:	8919      	ldrh	r1, [r3, #8]
1000c4c8:	4a13      	ldr	r2, [pc, #76]	; (1000c518 <system_peripheral_reset+0x45c>)
1000c4ca:	400a      	ands	r2, r1
1000c4cc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4ce:	8919      	ldrh	r1, [r3, #8]
1000c4d0:	2280      	movs	r2, #128	; 0x80
1000c4d2:	0092      	lsls	r2, r2, #2
1000c4d4:	430a      	orrs	r2, r1
1000c4d6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4d8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c4da:	e018      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4dc:	4b0c      	ldr	r3, [pc, #48]	; (1000c510 <system_peripheral_reset+0x454>)
1000c4de:	8919      	ldrh	r1, [r3, #8]
1000c4e0:	4a0e      	ldr	r2, [pc, #56]	; (1000c51c <system_peripheral_reset+0x460>)
1000c4e2:	400a      	ands	r2, r1
1000c4e4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4e6:	8919      	ldrh	r1, [r3, #8]
1000c4e8:	2280      	movs	r2, #128	; 0x80
1000c4ea:	00d2      	lsls	r2, r2, #3
1000c4ec:	430a      	orrs	r2, r1
1000c4ee:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c4f0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000c4f2:	e00c      	b.n	1000c50e <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000c4f4:	4b06      	ldr	r3, [pc, #24]	; (1000c510 <system_peripheral_reset+0x454>)
1000c4f6:	8919      	ldrh	r1, [r3, #8]
1000c4f8:	4a09      	ldr	r2, [pc, #36]	; (1000c520 <system_peripheral_reset+0x464>)
1000c4fa:	400a      	ands	r2, r1
1000c4fc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000c4fe:	8919      	ldrh	r1, [r3, #8]
1000c500:	2280      	movs	r2, #128	; 0x80
1000c502:	0112      	lsls	r2, r2, #4
1000c504:	430a      	orrs	r2, r1
1000c506:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000c508:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000c50a:	e000      	b.n	1000c50e <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000c50c:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000c50e:	bd00      	pop	{pc}
1000c510:	4000b000 	.word	0x4000b000
1000c514:	fffffeff 	.word	0xfffffeff
1000c518:	fffffdff 	.word	0xfffffdff
1000c51c:	fffffbff 	.word	0xfffffbff
1000c520:	fffff7ff 	.word	0xfffff7ff

1000c524 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000c524:	2380      	movs	r3, #128	; 0x80
1000c526:	04db      	lsls	r3, r3, #19
1000c528:	469c      	mov	ip, r3
1000c52a:	4460      	add	r0, ip
1000c52c:	0080      	lsls	r0, r0, #2
1000c52e:	6001      	str	r1, [r0, #0]
}
1000c530:	4770      	bx	lr
1000c532:	46c0      	nop			; (mov r8, r8)

1000c534 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000c534:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c536:	4b20      	ldr	r3, [pc, #128]	; (1000c5b8 <uart_rx0_isr_handler+0x84>)
1000c538:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c53a:	6823      	ldr	r3, [r4, #0]
1000c53c:	7d1d      	ldrb	r5, [r3, #20]
1000c53e:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c540:	066a      	lsls	r2, r5, #25
1000c542:	d513      	bpl.n	1000c56c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c544:	211e      	movs	r1, #30
1000c546:	2222      	movs	r2, #34	; 0x22
1000c548:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c54a:	7e1a      	ldrb	r2, [r3, #24]
1000c54c:	3123      	adds	r1, #35	; 0x23
1000c54e:	438a      	bics	r2, r1
1000c550:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c552:	2321      	movs	r3, #33	; 0x21
1000c554:	5ce3      	ldrb	r3, [r4, r3]
1000c556:	071b      	lsls	r3, r3, #28
1000c558:	d506      	bpl.n	1000c568 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c55a:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c55c:	5ce3      	ldrb	r3, [r4, r3]
1000c55e:	071b      	lsls	r3, r3, #28
1000c560:	d502      	bpl.n	1000c568 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c562:	0020      	movs	r0, r4
1000c564:	6923      	ldr	r3, [r4, #16]
1000c566:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c568:	6823      	ldr	r3, [r4, #0]
1000c56a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c56c:	07eb      	lsls	r3, r5, #31
1000c56e:	d522      	bpl.n	1000c5b6 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c570:	6823      	ldr	r3, [r4, #0]
1000c572:	7c1b      	ldrb	r3, [r3, #16]
1000c574:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c576:	6962      	ldr	r2, [r4, #20]
1000c578:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c57a:	6963      	ldr	r3, [r4, #20]
1000c57c:	3301      	adds	r3, #1
1000c57e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c580:	8ba3      	ldrh	r3, [r4, #28]
1000c582:	3b01      	subs	r3, #1
1000c584:	b29b      	uxth	r3, r3
1000c586:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c588:	8ba3      	ldrh	r3, [r4, #28]
1000c58a:	b29b      	uxth	r3, r3
1000c58c:	2b00      	cmp	r3, #0
1000c58e:	d112      	bne.n	1000c5b6 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c590:	3321      	adds	r3, #33	; 0x21
1000c592:	5ce3      	ldrb	r3, [r4, r3]
1000c594:	075b      	lsls	r3, r3, #29
1000c596:	d50e      	bpl.n	1000c5b6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c598:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c59a:	5ce3      	ldrb	r3, [r4, r3]
1000c59c:	075b      	lsls	r3, r3, #29
1000c59e:	d50a      	bpl.n	1000c5b6 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c5a0:	2200      	movs	r2, #0
1000c5a2:	2322      	movs	r3, #34	; 0x22
1000c5a4:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c5a6:	6822      	ldr	r2, [r4, #0]
1000c5a8:	7e13      	ldrb	r3, [r2, #24]
1000c5aa:	2101      	movs	r1, #1
1000c5ac:	438b      	bics	r3, r1
1000c5ae:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c5b0:	68e3      	ldr	r3, [r4, #12]
1000c5b2:	0020      	movs	r0, r4
1000c5b4:	4798      	blx	r3
			}
		}
	}
}
1000c5b6:	bd70      	pop	{r4, r5, r6, pc}
1000c5b8:	1001a4ac 	.word	0x1001a4ac

1000c5bc <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000c5bc:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000c5be:	4b21      	ldr	r3, [pc, #132]	; (1000c644 <uart_tx0_isr_handler+0x88>)
1000c5c0:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c5c2:	6823      	ldr	r3, [r4, #0]
1000c5c4:	791d      	ldrb	r5, [r3, #4]
1000c5c6:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c5c8:	07ea      	lsls	r2, r5, #31
1000c5ca:	d517      	bpl.n	1000c5fc <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c5cc:	69a2      	ldr	r2, [r4, #24]
1000c5ce:	7811      	ldrb	r1, [r2, #0]
1000c5d0:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c5d2:	3201      	adds	r2, #1
1000c5d4:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c5d6:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c5d8:	8be3      	ldrh	r3, [r4, #30]
1000c5da:	3b01      	subs	r3, #1
1000c5dc:	b29b      	uxth	r3, r3
1000c5de:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c5e0:	8be3      	ldrh	r3, [r4, #30]
1000c5e2:	b29b      	uxth	r3, r3
1000c5e4:	2b00      	cmp	r3, #0
1000c5e6:	d109      	bne.n	1000c5fc <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c5e8:	6822      	ldr	r2, [r4, #0]
1000c5ea:	7a13      	ldrb	r3, [r2, #8]
1000c5ec:	2101      	movs	r1, #1
1000c5ee:	438b      	bics	r3, r1
1000c5f0:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c5f2:	6822      	ldr	r2, [r4, #0]
1000c5f4:	7a11      	ldrb	r1, [r2, #8]
1000c5f6:	2310      	movs	r3, #16
1000c5f8:	430b      	orrs	r3, r1
1000c5fa:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c5fc:	06eb      	lsls	r3, r5, #27
1000c5fe:	d512      	bpl.n	1000c626 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c600:	2321      	movs	r3, #33	; 0x21
1000c602:	5ce3      	ldrb	r3, [r4, r3]
1000c604:	07db      	lsls	r3, r3, #31
1000c606:	d50e      	bpl.n	1000c626 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c608:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c60a:	5ce3      	ldrb	r3, [r4, r3]
1000c60c:	07db      	lsls	r3, r3, #31
1000c60e:	d50a      	bpl.n	1000c626 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c610:	2200      	movs	r2, #0
1000c612:	2322      	movs	r3, #34	; 0x22
1000c614:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c616:	6822      	ldr	r2, [r4, #0]
1000c618:	7a13      	ldrb	r3, [r2, #8]
1000c61a:	2110      	movs	r1, #16
1000c61c:	438b      	bics	r3, r1
1000c61e:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c620:	0020      	movs	r0, r4
1000c622:	6863      	ldr	r3, [r4, #4]
1000c624:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c626:	06ab      	lsls	r3, r5, #26
1000c628:	d50a      	bpl.n	1000c640 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c62a:	2321      	movs	r3, #33	; 0x21
1000c62c:	5ce3      	ldrb	r3, [r4, r3]
1000c62e:	079b      	lsls	r3, r3, #30
1000c630:	d506      	bpl.n	1000c640 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c632:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c634:	5ce3      	ldrb	r3, [r4, r3]
1000c636:	079b      	lsls	r3, r3, #30
1000c638:	d502      	bpl.n	1000c640 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c63a:	68a3      	ldr	r3, [r4, #8]
1000c63c:	0020      	movs	r0, r4
1000c63e:	4798      	blx	r3
		}

	}
}
1000c640:	bd70      	pop	{r4, r5, r6, pc}
1000c642:	46c0      	nop			; (mov r8, r8)
1000c644:	1001a4ac 	.word	0x1001a4ac

1000c648 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000c648:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c64a:	4b20      	ldr	r3, [pc, #128]	; (1000c6cc <uart_rx1_isr_handler+0x84>)
1000c64c:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000c64e:	6823      	ldr	r3, [r4, #0]
1000c650:	7d1d      	ldrb	r5, [r3, #20]
1000c652:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000c654:	066a      	lsls	r2, r5, #25
1000c656:	d513      	bpl.n	1000c680 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000c658:	211e      	movs	r1, #30
1000c65a:	2222      	movs	r2, #34	; 0x22
1000c65c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000c65e:	7e1a      	ldrb	r2, [r3, #24]
1000c660:	3123      	adds	r1, #35	; 0x23
1000c662:	438a      	bics	r2, r1
1000c664:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c666:	2321      	movs	r3, #33	; 0x21
1000c668:	5ce3      	ldrb	r3, [r4, r3]
1000c66a:	071b      	lsls	r3, r3, #28
1000c66c:	d506      	bpl.n	1000c67c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000c66e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000c670:	5ce3      	ldrb	r3, [r4, r3]
1000c672:	071b      	lsls	r3, r3, #28
1000c674:	d502      	bpl.n	1000c67c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000c676:	0020      	movs	r0, r4
1000c678:	6923      	ldr	r3, [r4, #16]
1000c67a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000c67c:	6823      	ldr	r3, [r4, #0]
1000c67e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c680:	07eb      	lsls	r3, r5, #31
1000c682:	d522      	bpl.n	1000c6ca <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000c684:	6823      	ldr	r3, [r4, #0]
1000c686:	7c1b      	ldrb	r3, [r3, #16]
1000c688:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000c68a:	6962      	ldr	r2, [r4, #20]
1000c68c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000c68e:	6963      	ldr	r3, [r4, #20]
1000c690:	3301      	adds	r3, #1
1000c692:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000c694:	8ba3      	ldrh	r3, [r4, #28]
1000c696:	3b01      	subs	r3, #1
1000c698:	b29b      	uxth	r3, r3
1000c69a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000c69c:	8ba3      	ldrh	r3, [r4, #28]
1000c69e:	b29b      	uxth	r3, r3
1000c6a0:	2b00      	cmp	r3, #0
1000c6a2:	d112      	bne.n	1000c6ca <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c6a4:	3321      	adds	r3, #33	; 0x21
1000c6a6:	5ce3      	ldrb	r3, [r4, r3]
1000c6a8:	075b      	lsls	r3, r3, #29
1000c6aa:	d50e      	bpl.n	1000c6ca <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000c6ac:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000c6ae:	5ce3      	ldrb	r3, [r4, r3]
1000c6b0:	075b      	lsls	r3, r3, #29
1000c6b2:	d50a      	bpl.n	1000c6ca <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000c6b4:	2200      	movs	r2, #0
1000c6b6:	2322      	movs	r3, #34	; 0x22
1000c6b8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000c6ba:	6822      	ldr	r2, [r4, #0]
1000c6bc:	7e13      	ldrb	r3, [r2, #24]
1000c6be:	2101      	movs	r1, #1
1000c6c0:	438b      	bics	r3, r1
1000c6c2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000c6c4:	68e3      	ldr	r3, [r4, #12]
1000c6c6:	0020      	movs	r0, r4
1000c6c8:	4798      	blx	r3
			}
		}
	}
}
1000c6ca:	bd70      	pop	{r4, r5, r6, pc}
1000c6cc:	1001a4ac 	.word	0x1001a4ac

1000c6d0 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000c6d0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000c6d2:	4b21      	ldr	r3, [pc, #132]	; (1000c758 <uart_tx1_isr_handler+0x88>)
1000c6d4:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000c6d6:	6823      	ldr	r3, [r4, #0]
1000c6d8:	791d      	ldrb	r5, [r3, #4]
1000c6da:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000c6dc:	07ea      	lsls	r2, r5, #31
1000c6de:	d517      	bpl.n	1000c710 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000c6e0:	69a2      	ldr	r2, [r4, #24]
1000c6e2:	7811      	ldrb	r1, [r2, #0]
1000c6e4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000c6e6:	3201      	adds	r2, #1
1000c6e8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000c6ea:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000c6ec:	8be3      	ldrh	r3, [r4, #30]
1000c6ee:	3b01      	subs	r3, #1
1000c6f0:	b29b      	uxth	r3, r3
1000c6f2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000c6f4:	8be3      	ldrh	r3, [r4, #30]
1000c6f6:	b29b      	uxth	r3, r3
1000c6f8:	2b00      	cmp	r3, #0
1000c6fa:	d109      	bne.n	1000c710 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c6fc:	6822      	ldr	r2, [r4, #0]
1000c6fe:	7a13      	ldrb	r3, [r2, #8]
1000c700:	2101      	movs	r1, #1
1000c702:	438b      	bics	r3, r1
1000c704:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000c706:	6822      	ldr	r2, [r4, #0]
1000c708:	7a11      	ldrb	r1, [r2, #8]
1000c70a:	2310      	movs	r3, #16
1000c70c:	430b      	orrs	r3, r1
1000c70e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000c710:	06eb      	lsls	r3, r5, #27
1000c712:	d512      	bpl.n	1000c73a <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c714:	2321      	movs	r3, #33	; 0x21
1000c716:	5ce3      	ldrb	r3, [r4, r3]
1000c718:	07db      	lsls	r3, r3, #31
1000c71a:	d50e      	bpl.n	1000c73a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000c71c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000c71e:	5ce3      	ldrb	r3, [r4, r3]
1000c720:	07db      	lsls	r3, r3, #31
1000c722:	d50a      	bpl.n	1000c73a <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000c724:	2200      	movs	r2, #0
1000c726:	2322      	movs	r3, #34	; 0x22
1000c728:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000c72a:	6822      	ldr	r2, [r4, #0]
1000c72c:	7a13      	ldrb	r3, [r2, #8]
1000c72e:	2110      	movs	r1, #16
1000c730:	438b      	bics	r3, r1
1000c732:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000c734:	0020      	movs	r0, r4
1000c736:	6863      	ldr	r3, [r4, #4]
1000c738:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000c73a:	06ab      	lsls	r3, r5, #26
1000c73c:	d50a      	bpl.n	1000c754 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c73e:	2321      	movs	r3, #33	; 0x21
1000c740:	5ce3      	ldrb	r3, [r4, r3]
1000c742:	079b      	lsls	r3, r3, #30
1000c744:	d506      	bpl.n	1000c754 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000c746:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000c748:	5ce3      	ldrb	r3, [r4, r3]
1000c74a:	079b      	lsls	r3, r3, #30
1000c74c:	d502      	bpl.n	1000c754 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000c74e:	68a3      	ldr	r3, [r4, #8]
1000c750:	0020      	movs	r0, r4
1000c752:	4798      	blx	r3
		}

	}
}
1000c754:	bd70      	pop	{r4, r5, r6, pc}
1000c756:	46c0      	nop			; (mov r8, r8)
1000c758:	1001a4ac 	.word	0x1001a4ac

1000c75c <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000c75c:	23e1      	movs	r3, #225	; 0xe1
1000c75e:	025b      	lsls	r3, r3, #9
1000c760:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000c762:	2300      	movs	r3, #0
1000c764:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000c766:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000c768:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000c76a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000c76c:	3302      	adds	r3, #2
1000c76e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000c770:	2203      	movs	r2, #3
1000c772:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000c774:	3201      	adds	r2, #1
1000c776:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000c778:	3201      	adds	r2, #1
1000c77a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000c77c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000c77e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000c780:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000c782:	6243      	str	r3, [r0, #36]	; 0x24
}
1000c784:	4770      	bx	lr
1000c786:	46c0      	nop			; (mov r8, r8)

1000c788 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c78a:	464f      	mov	r7, r9
1000c78c:	4646      	mov	r6, r8
1000c78e:	b4c0      	push	{r6, r7}
1000c790:	0005      	movs	r5, r0
1000c792:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000c794:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000c796:	2300      	movs	r3, #0
1000c798:	6043      	str	r3, [r0, #4]
1000c79a:	6083      	str	r3, [r0, #8]
1000c79c:	60c3      	str	r3, [r0, #12]
1000c79e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000c7a0:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000c7a2:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000c7a4:	2200      	movs	r2, #0
1000c7a6:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000c7a8:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000c7aa:	3320      	adds	r3, #32
1000c7ac:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000c7ae:	3301      	adds	r3, #1
1000c7b0:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000c7b2:	3301      	adds	r3, #1
1000c7b4:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000c7b6:	4b55      	ldr	r3, [pc, #340]	; (1000c90c <uart_init+0x184>)
1000c7b8:	4299      	cmp	r1, r3
1000c7ba:	d118      	bne.n	1000c7ee <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000c7bc:	2009      	movs	r0, #9
1000c7be:	4c54      	ldr	r4, [pc, #336]	; (1000c910 <uart_init+0x188>)
1000c7c0:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000c7c2:	200a      	movs	r0, #10
1000c7c4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000c7c6:	2009      	movs	r0, #9
1000c7c8:	4c52      	ldr	r4, [pc, #328]	; (1000c914 <uart_init+0x18c>)
1000c7ca:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000c7cc:	200a      	movs	r0, #10
1000c7ce:	47a0      	blx	r4
		_uart_instances[0] = module;
1000c7d0:	4b51      	ldr	r3, [pc, #324]	; (1000c918 <uart_init+0x190>)
1000c7d2:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000c7d4:	4951      	ldr	r1, [pc, #324]	; (1000c91c <uart_init+0x194>)
1000c7d6:	2010      	movs	r0, #16
1000c7d8:	4c51      	ldr	r4, [pc, #324]	; (1000c920 <uart_init+0x198>)
1000c7da:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000c7dc:	4951      	ldr	r1, [pc, #324]	; (1000c924 <uart_init+0x19c>)
1000c7de:	2011      	movs	r0, #17
1000c7e0:	47a0      	blx	r4
1000c7e2:	4b51      	ldr	r3, [pc, #324]	; (1000c928 <uart_init+0x1a0>)
1000c7e4:	2201      	movs	r2, #1
1000c7e6:	601a      	str	r2, [r3, #0]
1000c7e8:	3201      	adds	r2, #1
1000c7ea:	601a      	str	r2, [r3, #0]
1000c7ec:	e01a      	b.n	1000c824 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000c7ee:	4b4f      	ldr	r3, [pc, #316]	; (1000c92c <uart_init+0x1a4>)
1000c7f0:	4299      	cmp	r1, r3
1000c7f2:	d117      	bne.n	1000c824 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000c7f4:	200b      	movs	r0, #11
1000c7f6:	4c46      	ldr	r4, [pc, #280]	; (1000c910 <uart_init+0x188>)
1000c7f8:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000c7fa:	200c      	movs	r0, #12
1000c7fc:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000c7fe:	200b      	movs	r0, #11
1000c800:	4c44      	ldr	r4, [pc, #272]	; (1000c914 <uart_init+0x18c>)
1000c802:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000c804:	200c      	movs	r0, #12
1000c806:	47a0      	blx	r4
		_uart_instances[1] = module;
1000c808:	4b43      	ldr	r3, [pc, #268]	; (1000c918 <uart_init+0x190>)
1000c80a:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000c80c:	4948      	ldr	r1, [pc, #288]	; (1000c930 <uart_init+0x1a8>)
1000c80e:	2012      	movs	r0, #18
1000c810:	4c43      	ldr	r4, [pc, #268]	; (1000c920 <uart_init+0x198>)
1000c812:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000c814:	4947      	ldr	r1, [pc, #284]	; (1000c934 <uart_init+0x1ac>)
1000c816:	2013      	movs	r0, #19
1000c818:	47a0      	blx	r4
1000c81a:	4b43      	ldr	r3, [pc, #268]	; (1000c928 <uart_init+0x1a0>)
1000c81c:	2204      	movs	r2, #4
1000c81e:	601a      	str	r2, [r3, #0]
1000c820:	3204      	adds	r2, #4
1000c822:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c824:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000c826:	2204      	movs	r2, #4
1000c828:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000c82a:	2b00      	cmp	r3, #0
1000c82c:	d152      	bne.n	1000c8d4 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000c82e:	3302      	adds	r3, #2
1000c830:	4698      	mov	r8, r3
1000c832:	e04f      	b.n	1000c8d4 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c834:	8a31      	ldrh	r1, [r6, #16]
1000c836:	ce01      	ldmia	r6!, {r0}
1000c838:	b2c0      	uxtb	r0, r0
1000c83a:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000c83c:	3401      	adds	r4, #1
1000c83e:	b2e4      	uxtb	r4, r4
1000c840:	4544      	cmp	r4, r8
1000c842:	d3f7      	bcc.n	1000c834 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c844:	682b      	ldr	r3, [r5, #0]
1000c846:	7d1a      	ldrb	r2, [r3, #20]
1000c848:	07d2      	lsls	r2, r2, #31
1000c84a:	d504      	bpl.n	1000c856 <uart_init+0xce>
1000c84c:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000c84e:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000c850:	7d1a      	ldrb	r2, [r3, #20]
1000c852:	420a      	tst	r2, r1
1000c854:	d1fb      	bne.n	1000c84e <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000c856:	2100      	movs	r1, #0
1000c858:	2220      	movs	r2, #32
1000c85a:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000c85c:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000c85e:	1e59      	subs	r1, r3, #1
1000c860:	418b      	sbcs	r3, r1
1000c862:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000c864:	793b      	ldrb	r3, [r7, #4]
1000c866:	797a      	ldrb	r2, [r7, #5]
1000c868:	4313      	orrs	r3, r2
1000c86a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000c86c:	79ba      	ldrb	r2, [r7, #6]
1000c86e:	2a02      	cmp	r2, #2
1000c870:	d00d      	beq.n	1000c88e <uart_init+0x106>
1000c872:	b2d1      	uxtb	r1, r2
1000c874:	2902      	cmp	r1, #2
1000c876:	d802      	bhi.n	1000c87e <uart_init+0xf6>
1000c878:	2a01      	cmp	r2, #1
1000c87a:	d005      	beq.n	1000c888 <uart_init+0x100>
1000c87c:	e00f      	b.n	1000c89e <uart_init+0x116>
1000c87e:	2a03      	cmp	r2, #3
1000c880:	d008      	beq.n	1000c894 <uart_init+0x10c>
1000c882:	2a04      	cmp	r2, #4
1000c884:	d009      	beq.n	1000c89a <uart_init+0x112>
1000c886:	e00a      	b.n	1000c89e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000c888:	2202      	movs	r2, #2
1000c88a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000c88c:	e007      	b.n	1000c89e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000c88e:	2206      	movs	r2, #6
1000c890:	4313      	orrs	r3, r2
			break;
1000c892:	e004      	b.n	1000c89e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000c894:	220a      	movs	r2, #10
1000c896:	4313      	orrs	r3, r2
			break;
1000c898:	e001      	b.n	1000c89e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000c89a:	220e      	movs	r2, #14
1000c89c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000c89e:	2220      	movs	r2, #32
1000c8a0:	6829      	ldr	r1, [r5, #0]
1000c8a2:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000c8a4:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000c8a6:	4b24      	ldr	r3, [pc, #144]	; (1000c938 <uart_init+0x1b0>)
1000c8a8:	4798      	blx	r3
1000c8aa:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000c8ac:	0031      	movs	r1, r6
1000c8ae:	4b23      	ldr	r3, [pc, #140]	; (1000c93c <uart_init+0x1b4>)
1000c8b0:	4798      	blx	r3
1000c8b2:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000c8b4:	0400      	lsls	r0, r0, #16
1000c8b6:	0c00      	lsrs	r0, r0, #16
1000c8b8:	4370      	muls	r0, r6
1000c8ba:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c8bc:	0931      	lsrs	r1, r6, #4
1000c8be:	4288      	cmp	r0, r1
1000c8c0:	d906      	bls.n	1000c8d0 <uart_init+0x148>
1000c8c2:	2300      	movs	r3, #0
		i++;
1000c8c4:	3301      	adds	r3, #1
1000c8c6:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000c8c8:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000c8ca:	4288      	cmp	r0, r1
1000c8cc:	d8fa      	bhi.n	1000c8c4 <uart_init+0x13c>
1000c8ce:	e007      	b.n	1000c8e0 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000c8d0:	2300      	movs	r3, #0
1000c8d2:	e005      	b.n	1000c8e0 <uart_init+0x158>
1000c8d4:	003e      	movs	r6, r7
1000c8d6:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000c8d8:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000c8da:	4b19      	ldr	r3, [pc, #100]	; (1000c940 <uart_init+0x1b8>)
1000c8dc:	4699      	mov	r9, r3
1000c8de:	e7a9      	b.n	1000c834 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000c8e0:	2100      	movs	r1, #0
1000c8e2:	2028      	movs	r0, #40	; 0x28
1000c8e4:	682c      	ldr	r4, [r5, #0]
1000c8e6:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000c8e8:	3301      	adds	r3, #1
1000c8ea:	071b      	lsls	r3, r3, #28
1000c8ec:	0f5b      	lsrs	r3, r3, #29
1000c8ee:	00d2      	lsls	r2, r2, #3
1000c8f0:	4313      	orrs	r3, r2
1000c8f2:	b29b      	uxth	r3, r3
1000c8f4:	682a      	ldr	r2, [r5, #0]
1000c8f6:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000c8f8:	682b      	ldr	r3, [r5, #0]
1000c8fa:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000c8fc:	682b      	ldr	r3, [r5, #0]
1000c8fe:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000c900:	2000      	movs	r0, #0
1000c902:	bc0c      	pop	{r2, r3}
1000c904:	4690      	mov	r8, r2
1000c906:	4699      	mov	r9, r3
1000c908:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c90a:	46c0      	nop			; (mov r8, r8)
1000c90c:	40004000 	.word	0x40004000
1000c910:	1000c0bd 	.word	0x1000c0bd
1000c914:	1000b9f5 	.word	0x1000b9f5
1000c918:	1001a4ac 	.word	0x1001a4ac
1000c91c:	1000c535 	.word	0x1000c535
1000c920:	1000c525 	.word	0x1000c525
1000c924:	1000c5bd 	.word	0x1000c5bd
1000c928:	e000e100 	.word	0xe000e100
1000c92c:	40005000 	.word	0x40005000
1000c930:	1000c649 	.word	0x1000c649
1000c934:	1000c6d1 	.word	0x1000c6d1
1000c938:	1000b9e9 	.word	0x1000b9e9
1000c93c:	100131ed 	.word	0x100131ed
1000c940:	1000b645 	.word	0x1000b645

1000c944 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c944:	6802      	ldr	r2, [r0, #0]
1000c946:	2001      	movs	r0, #1
1000c948:	7913      	ldrb	r3, [r2, #4]
1000c94a:	4203      	tst	r3, r0
1000c94c:	d0fc      	beq.n	1000c948 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c94e:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c950:	2000      	movs	r0, #0
1000c952:	4770      	bx	lr

1000c954 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c954:	6802      	ldr	r2, [r0, #0]
1000c956:	2001      	movs	r0, #1
1000c958:	7d13      	ldrb	r3, [r2, #20]
1000c95a:	4203      	tst	r3, r0
1000c95c:	d0fc      	beq.n	1000c958 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c95e:	7c13      	ldrb	r3, [r2, #16]
1000c960:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c962:	2000      	movs	r0, #0
1000c964:	4770      	bx	lr
1000c966:	46c0      	nop			; (mov r8, r8)

1000c968 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c968:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c96a:	2a00      	cmp	r2, #0
1000c96c:	d00d      	beq.n	1000c98a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c96e:	330b      	adds	r3, #11
1000c970:	5cc3      	ldrb	r3, [r0, r3]
1000c972:	b2db      	uxtb	r3, r3
1000c974:	2b05      	cmp	r3, #5
1000c976:	d008      	beq.n	1000c98a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c978:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c97a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c97c:	2205      	movs	r2, #5
1000c97e:	2322      	movs	r3, #34	; 0x22
1000c980:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c982:	6803      	ldr	r3, [r0, #0]
1000c984:	3a04      	subs	r2, #4
1000c986:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c988:	2300      	movs	r3, #0
}
1000c98a:	0018      	movs	r0, r3
1000c98c:	4770      	bx	lr
1000c98e:	46c0      	nop			; (mov r8, r8)

1000c990 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c990:	0093      	lsls	r3, r2, #2
1000c992:	18c3      	adds	r3, r0, r3
1000c994:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c996:	2120      	movs	r1, #32
1000c998:	2301      	movs	r3, #1
1000c99a:	4093      	lsls	r3, r2
1000c99c:	5c42      	ldrb	r2, [r0, r1]
1000c99e:	4313      	orrs	r3, r2
1000c9a0:	5443      	strb	r3, [r0, r1]
}
1000c9a2:	4770      	bx	lr

1000c9a4 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c9a4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c9a6:	2221      	movs	r2, #33	; 0x21
1000c9a8:	2301      	movs	r3, #1
1000c9aa:	408b      	lsls	r3, r1
1000c9ac:	5c84      	ldrb	r4, [r0, r2]
1000c9ae:	4323      	orrs	r3, r4
1000c9b0:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c9b2:	2901      	cmp	r1, #1
1000c9b4:	d104      	bne.n	1000c9c0 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c9b6:	6802      	ldr	r2, [r0, #0]
1000c9b8:	7a11      	ldrb	r1, [r2, #8]
1000c9ba:	2320      	movs	r3, #32
1000c9bc:	430b      	orrs	r3, r1
1000c9be:	7213      	strb	r3, [r2, #8]
	}
}
1000c9c0:	bd10      	pop	{r4, pc}
1000c9c2:	46c0      	nop			; (mov r8, r8)

1000c9c4 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c9c4:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c9c6:	2201      	movs	r2, #1
1000c9c8:	408a      	lsls	r2, r1
1000c9ca:	2421      	movs	r4, #33	; 0x21
1000c9cc:	5d03      	ldrb	r3, [r0, r4]
1000c9ce:	4393      	bics	r3, r2
1000c9d0:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c9d2:	2901      	cmp	r1, #1
1000c9d4:	d104      	bne.n	1000c9e0 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c9d6:	6802      	ldr	r2, [r0, #0]
1000c9d8:	7a13      	ldrb	r3, [r2, #8]
1000c9da:	311f      	adds	r1, #31
1000c9dc:	438b      	bics	r3, r1
1000c9de:	7213      	strb	r3, [r2, #8]
	}

}
1000c9e0:	bd10      	pop	{r4, pc}
1000c9e2:	46c0      	nop			; (mov r8, r8)

1000c9e4 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c9e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c9e6:	4647      	mov	r7, r8
1000c9e8:	b480      	push	{r7}
1000c9ea:	000c      	movs	r4, r1
1000c9ec:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c9ee:	2800      	cmp	r0, #0
1000c9f0:	d10d      	bne.n	1000ca0e <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c9f2:	2a00      	cmp	r2, #0
1000c9f4:	dd0e      	ble.n	1000ca14 <_read+0x30>
1000c9f6:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c9f8:	4e08      	ldr	r6, [pc, #32]	; (1000ca1c <_read+0x38>)
1000c9fa:	4d09      	ldr	r5, [pc, #36]	; (1000ca20 <_read+0x3c>)
1000c9fc:	6830      	ldr	r0, [r6, #0]
1000c9fe:	0021      	movs	r1, r4
1000ca00:	682b      	ldr	r3, [r5, #0]
1000ca02:	4798      	blx	r3
		ptr++;
1000ca04:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000ca06:	42a7      	cmp	r7, r4
1000ca08:	d1f8      	bne.n	1000c9fc <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000ca0a:	4640      	mov	r0, r8
1000ca0c:	e003      	b.n	1000ca16 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000ca0e:	2001      	movs	r0, #1
1000ca10:	4240      	negs	r0, r0
1000ca12:	e000      	b.n	1000ca16 <_read+0x32>
	}

	for (; len > 0; --len) {
1000ca14:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000ca16:	bc04      	pop	{r2}
1000ca18:	4690      	mov	r8, r2
1000ca1a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca1c:	1001a4bc 	.word	0x1001a4bc
1000ca20:	1001a4b4 	.word	0x1001a4b4

1000ca24 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000ca24:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca26:	4647      	mov	r7, r8
1000ca28:	b480      	push	{r7}
1000ca2a:	000e      	movs	r6, r1
1000ca2c:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000ca2e:	3801      	subs	r0, #1
1000ca30:	2802      	cmp	r0, #2
1000ca32:	d811      	bhi.n	1000ca58 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000ca34:	2a00      	cmp	r2, #0
1000ca36:	d012      	beq.n	1000ca5e <_write+0x3a>
1000ca38:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000ca3a:	4b0c      	ldr	r3, [pc, #48]	; (1000ca6c <_write+0x48>)
1000ca3c:	4698      	mov	r8, r3
1000ca3e:	4f0c      	ldr	r7, [pc, #48]	; (1000ca70 <_write+0x4c>)
1000ca40:	4643      	mov	r3, r8
1000ca42:	6818      	ldr	r0, [r3, #0]
1000ca44:	5d31      	ldrb	r1, [r6, r4]
1000ca46:	683b      	ldr	r3, [r7, #0]
1000ca48:	4798      	blx	r3
1000ca4a:	2800      	cmp	r0, #0
1000ca4c:	db09      	blt.n	1000ca62 <_write+0x3e>
			return -1;
		}
		++nChars;
1000ca4e:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000ca50:	42a5      	cmp	r5, r4
1000ca52:	d1f5      	bne.n	1000ca40 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000ca54:	0020      	movs	r0, r4
1000ca56:	e006      	b.n	1000ca66 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000ca58:	2001      	movs	r0, #1
1000ca5a:	4240      	negs	r0, r0
1000ca5c:	e003      	b.n	1000ca66 <_write+0x42>
	}

	for (; len != 0; --len) {
1000ca5e:	2000      	movs	r0, #0
1000ca60:	e001      	b.n	1000ca66 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000ca62:	2001      	movs	r0, #1
1000ca64:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000ca66:	bc04      	pop	{r2}
1000ca68:	4690      	mov	r8, r2
1000ca6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca6c:	1001a4bc 	.word	0x1001a4bc
1000ca70:	1001a4b8 	.word	0x1001a4b8

1000ca74 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000ca74:	2000      	movs	r0, #0
1000ca76:	4770      	bx	lr

1000ca78 <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000ca78:	2000      	movs	r0, #0
1000ca7a:	4770      	bx	lr

1000ca7c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000ca7c:	78c0      	ldrb	r0, [r0, #3]
1000ca7e:	2800      	cmp	r0, #0
1000ca80:	d000      	beq.n	1000ca84 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000ca82:	20e2      	movs	r0, #226	; 0xe2
}
1000ca84:	4770      	bx	lr
1000ca86:	46c0      	nop			; (mov r8, r8)

1000ca88 <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000ca88:	2000      	movs	r0, #0
1000ca8a:	4770      	bx	lr

1000ca8c <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000ca8c:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000ca8e:	7800      	ldrb	r0, [r0, #0]
1000ca90:	2800      	cmp	r0, #0
1000ca92:	d006      	beq.n	1000caa2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000ca94:	4803      	ldr	r0, [pc, #12]	; (1000caa4 <ble_scan_report_handler+0x18>)
1000ca96:	4b04      	ldr	r3, [pc, #16]	; (1000caa8 <ble_scan_report_handler+0x1c>)
1000ca98:	4798      	blx	r3
1000ca9a:	4804      	ldr	r0, [pc, #16]	; (1000caac <ble_scan_report_handler+0x20>)
1000ca9c:	4b04      	ldr	r3, [pc, #16]	; (1000cab0 <ble_scan_report_handler+0x24>)
1000ca9e:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000caa0:	20e2      	movs	r0, #226	; 0xe2
}
1000caa2:	bd10      	pop	{r4, pc}
1000caa4:	100174f0 	.word	0x100174f0
1000caa8:	1001649d 	.word	0x1001649d
1000caac:	10017d14 	.word	0x10017d14
1000cab0:	1001637d 	.word	0x1001637d

1000cab4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000cab4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000cab6:	7800      	ldrb	r0, [r0, #0]
1000cab8:	2800      	cmp	r0, #0
1000caba:	d006      	beq.n	1000caca <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000cabc:	4803      	ldr	r0, [pc, #12]	; (1000cacc <ble_adv_report_handler+0x18>)
1000cabe:	4b04      	ldr	r3, [pc, #16]	; (1000cad0 <ble_adv_report_handler+0x1c>)
1000cac0:	4798      	blx	r3
1000cac2:	4804      	ldr	r0, [pc, #16]	; (1000cad4 <ble_adv_report_handler+0x20>)
1000cac4:	4b04      	ldr	r3, [pc, #16]	; (1000cad8 <ble_adv_report_handler+0x24>)
1000cac6:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000cac8:	20e2      	movs	r0, #226	; 0xe2
}
1000caca:	bd10      	pop	{r4, pc}
1000cacc:	100174f0 	.word	0x100174f0
1000cad0:	1001649d 	.word	0x1001649d
1000cad4:	10017d28 	.word	0x10017d28
1000cad8:	1001637d 	.word	0x1001637d

1000cadc <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000cadc:	b510      	push	{r4, lr}
1000cade:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000cae0:	78c0      	ldrb	r0, [r0, #3]
1000cae2:	2800      	cmp	r0, #0
1000cae4:	d008      	beq.n	1000caf8 <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000cae6:	4805      	ldr	r0, [pc, #20]	; (1000cafc <ble_mtu_changed_cmd_complete_handler+0x20>)
1000cae8:	4b05      	ldr	r3, [pc, #20]	; (1000cb00 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000caea:	4798      	blx	r3
1000caec:	78a2      	ldrb	r2, [r4, #2]
1000caee:	8821      	ldrh	r1, [r4, #0]
1000caf0:	4804      	ldr	r0, [pc, #16]	; (1000cb04 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000caf2:	4b05      	ldr	r3, [pc, #20]	; (1000cb08 <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000caf4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000caf6:	20e2      	movs	r0, #226	; 0xe2
}
1000caf8:	bd10      	pop	{r4, pc}
1000cafa:	46c0      	nop			; (mov r8, r8)
1000cafc:	100174f0 	.word	0x100174f0
1000cb00:	1001649d 	.word	0x1001649d
1000cb04:	10017d3c 	.word	0x10017d3c
1000cb08:	1001637d 	.word	0x1001637d

1000cb0c <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000cb0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cb0e:	0004      	movs	r4, r0
1000cb10:	4b19      	ldr	r3, [pc, #100]	; (1000cb78 <ble_disconnected_state_handler+0x6c>)
1000cb12:	229b      	movs	r2, #155	; 0x9b
1000cb14:	0092      	lsls	r2, r2, #2
1000cb16:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000cb18:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cb1a:	2600      	movs	r6, #0
1000cb1c:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000cb1e:	001a      	movs	r2, r3
1000cb20:	3a56      	subs	r2, #86	; 0x56
1000cb22:	8811      	ldrh	r1, [r2, #0]
1000cb24:	8822      	ldrh	r2, [r4, #0]
1000cb26:	4291      	cmp	r1, r2
1000cb28:	d119      	bne.n	1000cb5e <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000cb2a:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000cb2c:	2a05      	cmp	r2, #5
1000cb2e:	d001      	beq.n	1000cb34 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000cb30:	2a08      	cmp	r2, #8
1000cb32:	d101      	bne.n	1000cb38 <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000cb34:	7007      	strb	r7, [r0, #0]
1000cb36:	e012      	b.n	1000cb5e <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000cb38:	2a07      	cmp	r2, #7
1000cb3a:	d80f      	bhi.n	1000cb5c <ble_disconnected_state_handler+0x50>
1000cb3c:	0092      	lsls	r2, r2, #2
1000cb3e:	490f      	ldr	r1, [pc, #60]	; (1000cb7c <ble_disconnected_state_handler+0x70>)
1000cb40:	588a      	ldr	r2, [r1, r2]
1000cb42:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cb44:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000cb46:	4a0e      	ldr	r2, [pc, #56]	; (1000cb80 <ble_disconnected_state_handler+0x74>)
1000cb48:	7812      	ldrb	r2, [r2, #0]
1000cb4a:	2a00      	cmp	r2, #0
1000cb4c:	d007      	beq.n	1000cb5e <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000cb4e:	4a0c      	ldr	r2, [pc, #48]	; (1000cb80 <ble_disconnected_state_handler+0x74>)
1000cb50:	7812      	ldrb	r2, [r2, #0]
1000cb52:	3a01      	subs	r2, #1
1000cb54:	b2d2      	uxtb	r2, r2
1000cb56:	490a      	ldr	r1, [pc, #40]	; (1000cb80 <ble_disconnected_state_handler+0x74>)
1000cb58:	700a      	strb	r2, [r1, #0]
1000cb5a:	e000      	b.n	1000cb5e <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cb5c:	7006      	strb	r6, [r0, #0]
1000cb5e:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb60:	42ab      	cmp	r3, r5
1000cb62:	d1db      	bne.n	1000cb1c <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000cb64:	4807      	ldr	r0, [pc, #28]	; (1000cb84 <ble_disconnected_state_handler+0x78>)
1000cb66:	4b08      	ldr	r3, [pc, #32]	; (1000cb88 <ble_disconnected_state_handler+0x7c>)
1000cb68:	4798      	blx	r3
1000cb6a:	8822      	ldrh	r2, [r4, #0]
1000cb6c:	78a1      	ldrb	r1, [r4, #2]
1000cb6e:	4807      	ldr	r0, [pc, #28]	; (1000cb8c <ble_disconnected_state_handler+0x80>)
1000cb70:	4b07      	ldr	r3, [pc, #28]	; (1000cb90 <ble_disconnected_state_handler+0x84>)
1000cb72:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000cb74:	2000      	movs	r0, #0
1000cb76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cb78:	1001a536 	.word	0x1001a536
1000cb7c:	10017bb0 	.word	0x10017bb0
1000cb80:	1001a744 	.word	0x1001a744
1000cb84:	100174f0 	.word	0x100174f0
1000cb88:	1001649d 	.word	0x1001649d
1000cb8c:	10017d74 	.word	0x10017d74
1000cb90:	1001637d 	.word	0x1001637d

1000cb94 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000cb94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000cb96:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cb98:	8801      	ldrh	r1, [r0, #0]
1000cb9a:	4b28      	ldr	r3, [pc, #160]	; (1000cc3c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb9c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000cb9e:	891a      	ldrh	r2, [r3, #8]
1000cba0:	428a      	cmp	r2, r1
1000cba2:	d104      	bne.n	1000cbae <ble_encryption_status_change_handler+0x1a>
1000cba4:	001a      	movs	r2, r3
1000cba6:	325e      	adds	r2, #94	; 0x5e
1000cba8:	7812      	ldrb	r2, [r2, #0]
1000cbaa:	2a06      	cmp	r2, #6
1000cbac:	d02e      	beq.n	1000cc0c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cbae:	3401      	adds	r4, #1
1000cbb0:	b2e4      	uxtb	r4, r4
1000cbb2:	337c      	adds	r3, #124	; 0x7c
1000cbb4:	2c05      	cmp	r4, #5
1000cbb6:	d1f2      	bne.n	1000cb9e <ble_encryption_status_change_handler+0xa>
1000cbb8:	e039      	b.n	1000cc2e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000cbba:	4920      	ldr	r1, [pc, #128]	; (1000cc3c <ble_encryption_status_change_handler+0xa8>)
1000cbbc:	0163      	lsls	r3, r4, #5
1000cbbe:	1b1a      	subs	r2, r3, r4
1000cbc0:	0092      	lsls	r2, r2, #2
1000cbc2:	188a      	adds	r2, r1, r2
1000cbc4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000cbc6:	0014      	movs	r4, r2
1000cbc8:	345e      	adds	r4, #94	; 0x5e
1000cbca:	2307      	movs	r3, #7
1000cbcc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000cbce:	481c      	ldr	r0, [pc, #112]	; (1000cc40 <ble_encryption_status_change_handler+0xac>)
1000cbd0:	4b1c      	ldr	r3, [pc, #112]	; (1000cc44 <ble_encryption_status_change_handler+0xb0>)
1000cbd2:	4798      	blx	r3
1000cbd4:	481c      	ldr	r0, [pc, #112]	; (1000cc48 <ble_encryption_status_change_handler+0xb4>)
1000cbd6:	4b1d      	ldr	r3, [pc, #116]	; (1000cc4c <ble_encryption_status_change_handler+0xb8>)
1000cbd8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cbda:	25e2      	movs	r5, #226	; 0xe2
1000cbdc:	e02b      	b.n	1000cc36 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000cbde:	4818      	ldr	r0, [pc, #96]	; (1000cc40 <ble_encryption_status_change_handler+0xac>)
1000cbe0:	4b18      	ldr	r3, [pc, #96]	; (1000cc44 <ble_encryption_status_change_handler+0xb0>)
1000cbe2:	4798      	blx	r3
1000cbe4:	481a      	ldr	r0, [pc, #104]	; (1000cc50 <ble_encryption_status_change_handler+0xbc>)
1000cbe6:	4b19      	ldr	r3, [pc, #100]	; (1000cc4c <ble_encryption_status_change_handler+0xb8>)
1000cbe8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000cbea:	4914      	ldr	r1, [pc, #80]	; (1000cc3c <ble_encryption_status_change_handler+0xa8>)
1000cbec:	0163      	lsls	r3, r4, #5
1000cbee:	1b1a      	subs	r2, r3, r4
1000cbf0:	0092      	lsls	r2, r2, #2
1000cbf2:	188a      	adds	r2, r1, r2
1000cbf4:	0010      	movs	r0, r2
1000cbf6:	305e      	adds	r0, #94	; 0x5e
1000cbf8:	2708      	movs	r7, #8
1000cbfa:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000cbfc:	78f0      	ldrb	r0, [r6, #3]
1000cbfe:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000cc00:	78b2      	ldrb	r2, [r6, #2]
1000cc02:	1b1c      	subs	r4, r3, r4
1000cc04:	00a4      	lsls	r4, r4, #2
1000cc06:	190c      	adds	r4, r1, r4
1000cc08:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000cc0a:	e014      	b.n	1000cc36 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cc0c:	78b5      	ldrb	r5, [r6, #2]
1000cc0e:	2d00      	cmp	r5, #0
1000cc10:	d0e5      	beq.n	1000cbde <ble_encryption_status_change_handler+0x4a>
1000cc12:	e7d2      	b.n	1000cbba <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000cc14:	4e0a      	ldr	r6, [pc, #40]	; (1000cc40 <ble_encryption_status_change_handler+0xac>)
1000cc16:	0030      	movs	r0, r6
1000cc18:	4d0a      	ldr	r5, [pc, #40]	; (1000cc44 <ble_encryption_status_change_handler+0xb0>)
1000cc1a:	47a8      	blx	r5
1000cc1c:	480c      	ldr	r0, [pc, #48]	; (1000cc50 <ble_encryption_status_change_handler+0xbc>)
1000cc1e:	4c0b      	ldr	r4, [pc, #44]	; (1000cc4c <ble_encryption_status_change_handler+0xb8>)
1000cc20:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000cc22:	0030      	movs	r0, r6
1000cc24:	47a8      	blx	r5
1000cc26:	480b      	ldr	r0, [pc, #44]	; (1000cc54 <ble_encryption_status_change_handler+0xc0>)
1000cc28:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cc2a:	25e2      	movs	r5, #226	; 0xe2
1000cc2c:	e003      	b.n	1000cc36 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000cc2e:	78b5      	ldrb	r5, [r6, #2]
1000cc30:	2d00      	cmp	r5, #0
1000cc32:	d1c2      	bne.n	1000cbba <ble_encryption_status_change_handler+0x26>
1000cc34:	e7ee      	b.n	1000cc14 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000cc36:	0028      	movs	r0, r5
1000cc38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cc3a:	46c0      	nop			; (mov r8, r8)
1000cc3c:	1001a4d8 	.word	0x1001a4d8
1000cc40:	100174f0 	.word	0x100174f0
1000cc44:	1001649d 	.word	0x1001649d
1000cc48:	10017da4 	.word	0x10017da4
1000cc4c:	1001637d 	.word	0x1001637d
1000cc50:	10017db8 	.word	0x10017db8
1000cc54:	10017ddc 	.word	0x10017ddc

1000cc58 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000cc58:	b510      	push	{r4, lr}
1000cc5a:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000cc5c:	4b15      	ldr	r3, [pc, #84]	; (1000ccb4 <ble_scan_info_handler+0x5c>)
1000cc5e:	781b      	ldrb	r3, [r3, #0]
1000cc60:	b2db      	uxtb	r3, r3
1000cc62:	2b13      	cmp	r3, #19
1000cc64:	d812      	bhi.n	1000cc8c <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000cc66:	4c13      	ldr	r4, [pc, #76]	; (1000ccb4 <ble_scan_info_handler+0x5c>)
1000cc68:	7823      	ldrb	r3, [r4, #0]
1000cc6a:	b2db      	uxtb	r3, r3
1000cc6c:	0098      	lsls	r0, r3, #2
1000cc6e:	18c0      	adds	r0, r0, r3
1000cc70:	00c0      	lsls	r0, r0, #3
1000cc72:	18c3      	adds	r3, r0, r3
1000cc74:	4810      	ldr	r0, [pc, #64]	; (1000ccb8 <ble_scan_info_handler+0x60>)
1000cc76:	1818      	adds	r0, r3, r0
1000cc78:	2229      	movs	r2, #41	; 0x29
1000cc7a:	4b10      	ldr	r3, [pc, #64]	; (1000ccbc <ble_scan_info_handler+0x64>)
1000cc7c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000cc7e:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000cc80:	7823      	ldrb	r3, [r4, #0]
1000cc82:	3301      	adds	r3, #1
1000cc84:	b2db      	uxtb	r3, r3
1000cc86:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000cc88:	2300      	movs	r3, #0
1000cc8a:	e011      	b.n	1000ccb0 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000cc8c:	480c      	ldr	r0, [pc, #48]	; (1000ccc0 <ble_scan_info_handler+0x68>)
1000cc8e:	4b0d      	ldr	r3, [pc, #52]	; (1000ccc4 <ble_scan_info_handler+0x6c>)
1000cc90:	4798      	blx	r3
1000cc92:	480d      	ldr	r0, [pc, #52]	; (1000ccc8 <ble_scan_info_handler+0x70>)
1000cc94:	4b0d      	ldr	r3, [pc, #52]	; (1000cccc <ble_scan_info_handler+0x74>)
1000cc96:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cc98:	4b0d      	ldr	r3, [pc, #52]	; (1000ccd0 <ble_scan_info_handler+0x78>)
1000cc9a:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000cc9c:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000cc9e:	2800      	cmp	r0, #0
1000cca0:	d006      	beq.n	1000ccb0 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000cca2:	4807      	ldr	r0, [pc, #28]	; (1000ccc0 <ble_scan_info_handler+0x68>)
1000cca4:	4b07      	ldr	r3, [pc, #28]	; (1000ccc4 <ble_scan_info_handler+0x6c>)
1000cca6:	4798      	blx	r3
1000cca8:	480a      	ldr	r0, [pc, #40]	; (1000ccd4 <ble_scan_info_handler+0x7c>)
1000ccaa:	4b08      	ldr	r3, [pc, #32]	; (1000cccc <ble_scan_info_handler+0x74>)
1000ccac:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000ccae:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000ccb0:	0018      	movs	r0, r3
1000ccb2:	bd10      	pop	{r4, pc}
1000ccb4:	10018fe0 	.word	0x10018fe0
1000ccb8:	1001a7bc 	.word	0x1001a7bc
1000ccbc:	10016223 	.word	0x10016223
1000ccc0:	100174f0 	.word	0x100174f0
1000ccc4:	1001649d 	.word	0x1001649d
1000ccc8:	10017e04 	.word	0x10017e04
1000cccc:	1001637d 	.word	0x1001637d
1000ccd0:	1000f785 	.word	0x1000f785
1000ccd4:	10017e3c 	.word	0x10017e3c

1000ccd8 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000ccd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ccda:	464f      	mov	r7, r9
1000ccdc:	4646      	mov	r6, r8
1000ccde:	b4c0      	push	{r6, r7}
1000cce0:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cce2:	8841      	ldrh	r1, [r0, #2]
1000cce4:	4b3a      	ldr	r3, [pc, #232]	; (1000cdd0 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cce6:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000cce8:	891a      	ldrh	r2, [r3, #8]
1000ccea:	428a      	cmp	r2, r1
1000ccec:	d104      	bne.n	1000ccf8 <ble_pair_done_handler+0x20>
1000ccee:	001a      	movs	r2, r3
1000ccf0:	325e      	adds	r2, #94	; 0x5e
1000ccf2:	7812      	ldrb	r2, [r2, #0]
1000ccf4:	2a03      	cmp	r2, #3
1000ccf6:	d062      	beq.n	1000cdbe <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ccf8:	3401      	adds	r4, #1
1000ccfa:	b2e4      	uxtb	r4, r4
1000ccfc:	337c      	adds	r3, #124	; 0x7c
1000ccfe:	2c05      	cmp	r4, #5
1000cd00:	d1f2      	bne.n	1000cce8 <ble_pair_done_handler+0x10>
1000cd02:	e02b      	b.n	1000cd5c <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000cd04:	0163      	lsls	r3, r4, #5
1000cd06:	1b1c      	subs	r4, r3, r4
1000cd08:	00a4      	lsls	r4, r4, #2
1000cd0a:	4b31      	ldr	r3, [pc, #196]	; (1000cdd0 <ble_pair_done_handler+0xf8>)
1000cd0c:	191c      	adds	r4, r3, r4
1000cd0e:	345e      	adds	r4, #94	; 0x5e
1000cd10:	7823      	ldrb	r3, [r4, #0]
1000cd12:	2b01      	cmp	r3, #1
1000cd14:	d913      	bls.n	1000cd3e <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000cd16:	482f      	ldr	r0, [pc, #188]	; (1000cdd4 <ble_pair_done_handler+0xfc>)
1000cd18:	4b2f      	ldr	r3, [pc, #188]	; (1000cdd8 <ble_pair_done_handler+0x100>)
1000cd1a:	4798      	blx	r3
1000cd1c:	482f      	ldr	r0, [pc, #188]	; (1000cddc <ble_pair_done_handler+0x104>)
1000cd1e:	4b30      	ldr	r3, [pc, #192]	; (1000cde0 <ble_pair_done_handler+0x108>)
1000cd20:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000cd22:	8868      	ldrh	r0, [r5, #2]
1000cd24:	2113      	movs	r1, #19
1000cd26:	4b2f      	ldr	r3, [pc, #188]	; (1000cde4 <ble_pair_done_handler+0x10c>)
1000cd28:	4798      	blx	r3
1000cd2a:	1e06      	subs	r6, r0, #0
1000cd2c:	d04b      	beq.n	1000cdc6 <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000cd2e:	4829      	ldr	r0, [pc, #164]	; (1000cdd4 <ble_pair_done_handler+0xfc>)
1000cd30:	4b29      	ldr	r3, [pc, #164]	; (1000cdd8 <ble_pair_done_handler+0x100>)
1000cd32:	4798      	blx	r3
1000cd34:	482c      	ldr	r0, [pc, #176]	; (1000cde8 <ble_pair_done_handler+0x110>)
1000cd36:	4b2a      	ldr	r3, [pc, #168]	; (1000cde0 <ble_pair_done_handler+0x108>)
1000cd38:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000cd3a:	26e2      	movs	r6, #226	; 0xe2
1000cd3c:	e043      	b.n	1000cdc6 <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000cd3e:	2600      	movs	r6, #0
1000cd40:	e041      	b.n	1000cdc6 <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cd42:	4e24      	ldr	r6, [pc, #144]	; (1000cdd4 <ble_pair_done_handler+0xfc>)
1000cd44:	0030      	movs	r0, r6
1000cd46:	4d24      	ldr	r5, [pc, #144]	; (1000cdd8 <ble_pair_done_handler+0x100>)
1000cd48:	47a8      	blx	r5
1000cd4a:	4828      	ldr	r0, [pc, #160]	; (1000cdec <ble_pair_done_handler+0x114>)
1000cd4c:	4c24      	ldr	r4, [pc, #144]	; (1000cde0 <ble_pair_done_handler+0x108>)
1000cd4e:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000cd50:	0030      	movs	r0, r6
1000cd52:	47a8      	blx	r5
1000cd54:	4826      	ldr	r0, [pc, #152]	; (1000cdf0 <ble_pair_done_handler+0x118>)
1000cd56:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000cd58:	26e2      	movs	r6, #226	; 0xe2
1000cd5a:	e034      	b.n	1000cdc6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cd5c:	792b      	ldrb	r3, [r5, #4]
1000cd5e:	2b00      	cmp	r3, #0
1000cd60:	d1d0      	bne.n	1000cd04 <ble_pair_done_handler+0x2c>
1000cd62:	e7ee      	b.n	1000cd42 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000cd64:	481b      	ldr	r0, [pc, #108]	; (1000cdd4 <ble_pair_done_handler+0xfc>)
1000cd66:	4b1c      	ldr	r3, [pc, #112]	; (1000cdd8 <ble_pair_done_handler+0x100>)
1000cd68:	4798      	blx	r3
1000cd6a:	4820      	ldr	r0, [pc, #128]	; (1000cdec <ble_pair_done_handler+0x114>)
1000cd6c:	4b1c      	ldr	r3, [pc, #112]	; (1000cde0 <ble_pair_done_handler+0x108>)
1000cd6e:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000cd70:	782a      	ldrb	r2, [r5, #0]
1000cd72:	4b17      	ldr	r3, [pc, #92]	; (1000cdd0 <ble_pair_done_handler+0xf8>)
1000cd74:	4699      	mov	r9, r3
1000cd76:	0167      	lsls	r7, r4, #5
1000cd78:	1b3b      	subs	r3, r7, r4
1000cd7a:	009b      	lsls	r3, r3, #2
1000cd7c:	444b      	add	r3, r9
1000cd7e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000cd80:	792a      	ldrb	r2, [r5, #4]
1000cd82:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000cd84:	335e      	adds	r3, #94	; 0x5e
1000cd86:	2205      	movs	r2, #5
1000cd88:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000cd8a:	1b38      	subs	r0, r7, r4
1000cd8c:	0080      	lsls	r0, r0, #2
1000cd8e:	4448      	add	r0, r9
1000cd90:	3036      	adds	r0, #54	; 0x36
1000cd92:	0029      	movs	r1, r5
1000cd94:	3122      	adds	r1, #34	; 0x22
1000cd96:	320b      	adds	r2, #11
1000cd98:	4b16      	ldr	r3, [pc, #88]	; (1000cdf4 <ble_pair_done_handler+0x11c>)
1000cd9a:	4698      	mov	r8, r3
1000cd9c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000cd9e:	1b38      	subs	r0, r7, r4
1000cda0:	0080      	lsls	r0, r0, #2
1000cda2:	4448      	add	r0, r9
1000cda4:	3046      	adds	r0, #70	; 0x46
1000cda6:	0029      	movs	r1, r5
1000cda8:	3132      	adds	r1, #50	; 0x32
1000cdaa:	2217      	movs	r2, #23
1000cdac:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000cdae:	1b38      	subs	r0, r7, r4
1000cdb0:	0080      	lsls	r0, r0, #2
1000cdb2:	4448      	add	r0, r9
1000cdb4:	301a      	adds	r0, #26
1000cdb6:	1da9      	adds	r1, r5, #6
1000cdb8:	221c      	movs	r2, #28
1000cdba:	47c0      	blx	r8
1000cdbc:	e003      	b.n	1000cdc6 <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000cdbe:	792e      	ldrb	r6, [r5, #4]
1000cdc0:	2e00      	cmp	r6, #0
1000cdc2:	d0cf      	beq.n	1000cd64 <ble_pair_done_handler+0x8c>
1000cdc4:	e79e      	b.n	1000cd04 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000cdc6:	0030      	movs	r0, r6
1000cdc8:	bc0c      	pop	{r2, r3}
1000cdca:	4690      	mov	r8, r2
1000cdcc:	4699      	mov	r9, r3
1000cdce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cdd0:	1001a4d8 	.word	0x1001a4d8
1000cdd4:	100174f0 	.word	0x100174f0
1000cdd8:	1001649d 	.word	0x1001649d
1000cddc:	10017e54 	.word	0x10017e54
1000cde0:	1001637d 	.word	0x1001637d
1000cde4:	1000f7a5 	.word	0x1000f7a5
1000cde8:	10017e74 	.word	0x10017e74
1000cdec:	10017e90 	.word	0x10017e90
1000cdf0:	10017ebc 	.word	0x10017ebc
1000cdf4:	10016223 	.word	0x10016223

1000cdf8 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000cdf8:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000cdfa:	8800      	ldrh	r0, [r0, #0]
1000cdfc:	2378      	movs	r3, #120	; 0x78
1000cdfe:	2201      	movs	r2, #1
1000ce00:	2101      	movs	r1, #1
1000ce02:	4c02      	ldr	r4, [pc, #8]	; (1000ce0c <ble_conn_param_update_req+0x14>)
1000ce04:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000ce06:	2000      	movs	r0, #0
1000ce08:	bd10      	pop	{r4, pc}
1000ce0a:	46c0      	nop			; (mov r8, r8)
1000ce0c:	1000f7c5 	.word	0x1000f7c5

1000ce10 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000ce10:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ce12:	4657      	mov	r7, sl
1000ce14:	464e      	mov	r6, r9
1000ce16:	4645      	mov	r5, r8
1000ce18:	b4e0      	push	{r5, r6, r7}
1000ce1a:	b084      	sub	sp, #16
1000ce1c:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000ce1e:	2209      	movs	r2, #9
1000ce20:	2100      	movs	r1, #0
1000ce22:	a801      	add	r0, sp, #4
1000ce24:	4b6a      	ldr	r3, [pc, #424]	; (1000cfd0 <ble_slave_security_request_handler+0x1c0>)
1000ce26:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ce28:	8825      	ldrh	r5, [r4, #0]
1000ce2a:	496a      	ldr	r1, [pc, #424]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000ce2c:	000a      	movs	r2, r1
1000ce2e:	2300      	movs	r3, #0
1000ce30:	8910      	ldrh	r0, [r2, #8]
1000ce32:	42a8      	cmp	r0, r5
1000ce34:	d116      	bne.n	1000ce64 <ble_slave_security_request_handler+0x54>
1000ce36:	0010      	movs	r0, r2
1000ce38:	305e      	adds	r0, #94	; 0x5e
1000ce3a:	7800      	ldrb	r0, [r0, #0]
1000ce3c:	2802      	cmp	r0, #2
1000ce3e:	d111      	bne.n	1000ce64 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000ce40:	4864      	ldr	r0, [pc, #400]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000ce42:	015a      	lsls	r2, r3, #5
1000ce44:	1ad6      	subs	r6, r2, r3
1000ce46:	00b6      	lsls	r6, r6, #2
1000ce48:	1986      	adds	r6, r0, r6
1000ce4a:	365e      	adds	r6, #94	; 0x5e
1000ce4c:	2206      	movs	r2, #6
1000ce4e:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ce50:	32f9      	adds	r2, #249	; 0xf9
1000ce52:	4013      	ands	r3, r2
1000ce54:	015a      	lsls	r2, r3, #5
1000ce56:	1ad2      	subs	r2, r2, r3
1000ce58:	0092      	lsls	r2, r2, #2
1000ce5a:	1882      	adds	r2, r0, r2
1000ce5c:	7d12      	ldrb	r2, [r2, #20]
1000ce5e:	07d0      	lsls	r0, r2, #31
1000ce60:	d405      	bmi.n	1000ce6e <ble_slave_security_request_handler+0x5e>
1000ce62:	e01b      	b.n	1000ce9c <ble_slave_security_request_handler+0x8c>
1000ce64:	3301      	adds	r3, #1
1000ce66:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ce68:	2b05      	cmp	r3, #5
1000ce6a:	d1e1      	bne.n	1000ce30 <ble_slave_security_request_handler+0x20>
1000ce6c:	e01e      	b.n	1000ceac <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000ce6e:	78e0      	ldrb	r0, [r4, #3]
1000ce70:	2800      	cmp	r0, #0
1000ce72:	d013      	beq.n	1000ce9c <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000ce74:	0159      	lsls	r1, r3, #5
1000ce76:	1ac9      	subs	r1, r1, r3
1000ce78:	008b      	lsls	r3, r1, #2
1000ce7a:	4956      	ldr	r1, [pc, #344]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000ce7c:	18c9      	adds	r1, r1, r3
1000ce7e:	311a      	adds	r1, #26
1000ce80:	8820      	ldrh	r0, [r4, #0]
1000ce82:	4b55      	ldr	r3, [pc, #340]	; (1000cfd8 <ble_slave_security_request_handler+0x1c8>)
1000ce84:	4798      	blx	r3
1000ce86:	2800      	cmp	r0, #0
1000ce88:	d100      	bne.n	1000ce8c <ble_slave_security_request_handler+0x7c>
1000ce8a:	e09b      	b.n	1000cfc4 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000ce8c:	4853      	ldr	r0, [pc, #332]	; (1000cfdc <ble_slave_security_request_handler+0x1cc>)
1000ce8e:	4b54      	ldr	r3, [pc, #336]	; (1000cfe0 <ble_slave_security_request_handler+0x1d0>)
1000ce90:	4798      	blx	r3
1000ce92:	4854      	ldr	r0, [pc, #336]	; (1000cfe4 <ble_slave_security_request_handler+0x1d4>)
1000ce94:	4b54      	ldr	r3, [pc, #336]	; (1000cfe8 <ble_slave_security_request_handler+0x1d8>)
1000ce96:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000ce98:	20e2      	movs	r0, #226	; 0xe2
1000ce9a:	e093      	b.n	1000cfc4 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ce9c:	015a      	lsls	r2, r3, #5
1000ce9e:	1ad3      	subs	r3, r2, r3
1000cea0:	009b      	lsls	r3, r3, #2
1000cea2:	4a4c      	ldr	r2, [pc, #304]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cea4:	18d3      	adds	r3, r2, r3
1000cea6:	335e      	adds	r3, #94	; 0x5e
1000cea8:	2202      	movs	r2, #2
1000ceaa:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ceac:	8825      	ldrh	r5, [r4, #0]
1000ceae:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ceb0:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000ceb2:	0016      	movs	r6, r2
1000ceb4:	8908      	ldrh	r0, [r1, #8]
1000ceb6:	42a8      	cmp	r0, r5
1000ceb8:	d10d      	bne.n	1000ced6 <ble_slave_security_request_handler+0xc6>
1000ceba:	0008      	movs	r0, r1
1000cebc:	305e      	adds	r0, #94	; 0x5e
1000cebe:	7800      	ldrb	r0, [r0, #0]
1000cec0:	2802      	cmp	r0, #2
1000cec2:	d108      	bne.n	1000ced6 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000cec4:	0152      	lsls	r2, r2, #5
1000cec6:	1b92      	subs	r2, r2, r6
1000cec8:	0096      	lsls	r6, r2, #2
1000ceca:	4a42      	ldr	r2, [pc, #264]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cecc:	1992      	adds	r2, r2, r6
1000cece:	325e      	adds	r2, #94	; 0x5e
1000ced0:	2103      	movs	r1, #3
1000ced2:	7011      	strb	r1, [r2, #0]
			break;
1000ced4:	e005      	b.n	1000cee2 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ced6:	3301      	adds	r3, #1
1000ced8:	b2db      	uxtb	r3, r3
1000ceda:	3201      	adds	r2, #1
1000cedc:	317c      	adds	r1, #124	; 0x7c
1000cede:	2b05      	cmp	r3, #5
1000cee0:	d1e7      	bne.n	1000ceb2 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000cee2:	aa01      	add	r2, sp, #4
1000cee4:	78e1      	ldrb	r1, [r4, #3]
1000cee6:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000cee8:	2101      	movs	r1, #1
1000ceea:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000ceec:	3103      	adds	r1, #3
1000ceee:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000cef0:	001f      	movs	r7, r3
1000cef2:	015a      	lsls	r2, r3, #5
1000cef4:	1ad2      	subs	r2, r2, r3
1000cef6:	0092      	lsls	r2, r2, #2
1000cef8:	4936      	ldr	r1, [pc, #216]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cefa:	5c52      	ldrb	r2, [r2, r1]
1000cefc:	2a02      	cmp	r2, #2
1000cefe:	d104      	bne.n	1000cf0a <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf00:	aa01      	add	r2, sp, #4
1000cf02:	2103      	movs	r1, #3
1000cf04:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000cf06:	71d1      	strb	r1, [r2, #7]
1000cf08:	e003      	b.n	1000cf12 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000cf0a:	aa01      	add	r2, sp, #4
1000cf0c:	2101      	movs	r1, #1
1000cf0e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000cf10:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000cf12:	aa01      	add	r2, sp, #4
1000cf14:	2110      	movs	r1, #16
1000cf16:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000cf18:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000cf1a:	017a      	lsls	r2, r7, #5
1000cf1c:	1bd2      	subs	r2, r2, r7
1000cf1e:	0092      	lsls	r2, r2, #2
1000cf20:	492c      	ldr	r1, [pc, #176]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cf22:	188a      	adds	r2, r1, r2
1000cf24:	7e12      	ldrb	r2, [r2, #24]
1000cf26:	2a40      	cmp	r2, #64	; 0x40
1000cf28:	d134      	bne.n	1000cf94 <ble_slave_security_request_handler+0x184>
1000cf2a:	015a      	lsls	r2, r3, #5
1000cf2c:	1ad3      	subs	r3, r2, r3
1000cf2e:	009b      	lsls	r3, r3, #2
1000cf30:	469a      	mov	sl, r3
1000cf32:	001e      	movs	r6, r3
1000cf34:	3660      	adds	r6, #96	; 0x60
1000cf36:	1876      	adds	r6, r6, r1
1000cf38:	4655      	mov	r5, sl
1000cf3a:	3568      	adds	r5, #104	; 0x68
1000cf3c:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cf3e:	4b2b      	ldr	r3, [pc, #172]	; (1000cfec <ble_slave_security_request_handler+0x1dc>)
1000cf40:	4699      	mov	r9, r3
1000cf42:	230f      	movs	r3, #15
1000cf44:	4698      	mov	r8, r3
1000cf46:	47c8      	blx	r9
1000cf48:	4643      	mov	r3, r8
1000cf4a:	4018      	ands	r0, r3
1000cf4c:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000cf4e:	47c8      	blx	r9
1000cf50:	4643      	mov	r3, r8
1000cf52:	4018      	ands	r0, r3
1000cf54:	74b0      	strb	r0, [r6, #18]
1000cf56:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000cf58:	42ae      	cmp	r6, r5
1000cf5a:	d1f4      	bne.n	1000cf46 <ble_slave_security_request_handler+0x136>
1000cf5c:	4656      	mov	r6, sl
1000cf5e:	3670      	adds	r6, #112	; 0x70
1000cf60:	4a1c      	ldr	r2, [pc, #112]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cf62:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000cf64:	4b21      	ldr	r3, [pc, #132]	; (1000cfec <ble_slave_security_request_handler+0x1dc>)
1000cf66:	4699      	mov	r9, r3
1000cf68:	230f      	movs	r3, #15
1000cf6a:	4698      	mov	r8, r3
1000cf6c:	47c8      	blx	r9
1000cf6e:	4643      	mov	r3, r8
1000cf70:	4018      	ands	r0, r3
1000cf72:	7028      	strb	r0, [r5, #0]
1000cf74:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000cf76:	42b5      	cmp	r5, r6
1000cf78:	d1f8      	bne.n	1000cf6c <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000cf7a:	4b1c      	ldr	r3, [pc, #112]	; (1000cfec <ble_slave_security_request_handler+0x1dc>)
1000cf7c:	4798      	blx	r3
1000cf7e:	017b      	lsls	r3, r7, #5
1000cf80:	1bdb      	subs	r3, r3, r7
1000cf82:	009b      	lsls	r3, r3, #2
1000cf84:	4a13      	ldr	r2, [pc, #76]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cf86:	18d3      	adds	r3, r2, r3
1000cf88:	001a      	movs	r2, r3
1000cf8a:	3270      	adds	r2, #112	; 0x70
1000cf8c:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000cf8e:	337a      	adds	r3, #122	; 0x7a
1000cf90:	2210      	movs	r2, #16
1000cf92:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000cf94:	017a      	lsls	r2, r7, #5
1000cf96:	1bd7      	subs	r7, r2, r7
1000cf98:	00bf      	lsls	r7, r7, #2
1000cf9a:	3760      	adds	r7, #96	; 0x60
1000cf9c:	4a0d      	ldr	r2, [pc, #52]	; (1000cfd4 <ble_slave_security_request_handler+0x1c4>)
1000cf9e:	18ba      	adds	r2, r7, r2
1000cfa0:	8820      	ldrh	r0, [r4, #0]
1000cfa2:	2300      	movs	r3, #0
1000cfa4:	a901      	add	r1, sp, #4
1000cfa6:	4c12      	ldr	r4, [pc, #72]	; (1000cff0 <ble_slave_security_request_handler+0x1e0>)
1000cfa8:	47a0      	blx	r4
1000cfaa:	2800      	cmp	r0, #0
1000cfac:	d00a      	beq.n	1000cfc4 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000cfae:	ab01      	add	r3, sp, #4
1000cfb0:	2200      	movs	r2, #0
1000cfb2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000cfb4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000cfb6:	4809      	ldr	r0, [pc, #36]	; (1000cfdc <ble_slave_security_request_handler+0x1cc>)
1000cfb8:	4b09      	ldr	r3, [pc, #36]	; (1000cfe0 <ble_slave_security_request_handler+0x1d0>)
1000cfba:	4798      	blx	r3
1000cfbc:	480d      	ldr	r0, [pc, #52]	; (1000cff4 <ble_slave_security_request_handler+0x1e4>)
1000cfbe:	4b0a      	ldr	r3, [pc, #40]	; (1000cfe8 <ble_slave_security_request_handler+0x1d8>)
1000cfc0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cfc2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000cfc4:	b004      	add	sp, #16
1000cfc6:	bc1c      	pop	{r2, r3, r4}
1000cfc8:	4690      	mov	r8, r2
1000cfca:	4699      	mov	r9, r3
1000cfcc:	46a2      	mov	sl, r4
1000cfce:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cfd0:	10016235 	.word	0x10016235
1000cfd4:	1001a4d8 	.word	0x1001a4d8
1000cfd8:	10010389 	.word	0x10010389
1000cfdc:	100174f0 	.word	0x100174f0
1000cfe0:	1001649d 	.word	0x1001649d
1000cfe4:	10017eec 	.word	0x10017eec
1000cfe8:	1001637d 	.word	0x1001637d
1000cfec:	100164b1 	.word	0x100164b1
1000cff0:	1001019d 	.word	0x1001019d
1000cff4:	10017f04 	.word	0x10017f04

1000cff8 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000cff8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cffa:	465f      	mov	r7, fp
1000cffc:	4656      	mov	r6, sl
1000cffe:	464d      	mov	r5, r9
1000d000:	4644      	mov	r4, r8
1000d002:	b4f0      	push	{r4, r5, r6, r7}
1000d004:	b085      	sub	sp, #20
1000d006:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d008:	8804      	ldrh	r4, [r0, #0]
1000d00a:	4a48      	ldr	r2, [pc, #288]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d00c:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d00e:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000d010:	8910      	ldrh	r0, [r2, #8]
1000d012:	42a0      	cmp	r0, r4
1000d014:	d10d      	bne.n	1000d032 <ble_pair_request_handler+0x3a>
1000d016:	0010      	movs	r0, r2
1000d018:	305e      	adds	r0, #94	; 0x5e
1000d01a:	7800      	ldrb	r0, [r0, #0]
1000d01c:	2802      	cmp	r0, #2
1000d01e:	d108      	bne.n	1000d032 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000d020:	014a      	lsls	r2, r1, #5
1000d022:	1a52      	subs	r2, r2, r1
1000d024:	0095      	lsls	r5, r2, #2
1000d026:	4a41      	ldr	r2, [pc, #260]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d028:	1952      	adds	r2, r2, r5
1000d02a:	325e      	adds	r2, #94	; 0x5e
1000d02c:	2103      	movs	r1, #3
1000d02e:	7011      	strb	r1, [r2, #0]
			break;
1000d030:	e005      	b.n	1000d03e <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d032:	3301      	adds	r3, #1
1000d034:	b2db      	uxtb	r3, r3
1000d036:	3101      	adds	r1, #1
1000d038:	327c      	adds	r2, #124	; 0x7c
1000d03a:	2b05      	cmp	r3, #5
1000d03c:	d1e8      	bne.n	1000d010 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000d03e:	aa01      	add	r2, sp, #4
1000d040:	2100      	movs	r1, #0
1000d042:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000d044:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000d046:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000d048:	2003      	movs	r0, #3
1000d04a:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000d04c:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000d04e:	001f      	movs	r7, r3
1000d050:	015a      	lsls	r2, r3, #5
1000d052:	1ad2      	subs	r2, r2, r3
1000d054:	0092      	lsls	r2, r2, #2
1000d056:	4935      	ldr	r1, [pc, #212]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d058:	5c52      	ldrb	r2, [r2, r1]
1000d05a:	2a02      	cmp	r2, #2
1000d05c:	d104      	bne.n	1000d068 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d05e:	aa01      	add	r2, sp, #4
1000d060:	2103      	movs	r1, #3
1000d062:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000d064:	71d1      	strb	r1, [r2, #7]
1000d066:	e003      	b.n	1000d070 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000d068:	aa01      	add	r2, sp, #4
1000d06a:	2101      	movs	r1, #1
1000d06c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000d06e:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000d070:	aa01      	add	r2, sp, #4
1000d072:	2110      	movs	r1, #16
1000d074:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000d076:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000d078:	017a      	lsls	r2, r7, #5
1000d07a:	1bd2      	subs	r2, r2, r7
1000d07c:	0092      	lsls	r2, r2, #2
1000d07e:	492b      	ldr	r1, [pc, #172]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d080:	188a      	adds	r2, r1, r2
1000d082:	7e12      	ldrb	r2, [r2, #24]
1000d084:	2a40      	cmp	r2, #64	; 0x40
1000d086:	d131      	bne.n	1000d0ec <ble_pair_request_handler+0xf4>
1000d088:	015a      	lsls	r2, r3, #5
1000d08a:	1ad3      	subs	r3, r2, r3
1000d08c:	009b      	lsls	r3, r3, #2
1000d08e:	469a      	mov	sl, r3
1000d090:	001d      	movs	r5, r3
1000d092:	3560      	adds	r5, #96	; 0x60
1000d094:	186d      	adds	r5, r5, r1
1000d096:	4654      	mov	r4, sl
1000d098:	3468      	adds	r4, #104	; 0x68
1000d09a:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d09c:	4b24      	ldr	r3, [pc, #144]	; (1000d130 <ble_pair_request_handler+0x138>)
1000d09e:	4699      	mov	r9, r3
1000d0a0:	260f      	movs	r6, #15
1000d0a2:	47c8      	blx	r9
1000d0a4:	4030      	ands	r0, r6
1000d0a6:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000d0a8:	47c8      	blx	r9
1000d0aa:	4030      	ands	r0, r6
1000d0ac:	74a8      	strb	r0, [r5, #18]
1000d0ae:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000d0b0:	42a5      	cmp	r5, r4
1000d0b2:	d1f6      	bne.n	1000d0a2 <ble_pair_request_handler+0xaa>
1000d0b4:	4655      	mov	r5, sl
1000d0b6:	3570      	adds	r5, #112	; 0x70
1000d0b8:	4a1c      	ldr	r2, [pc, #112]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d0ba:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000d0bc:	4b1c      	ldr	r3, [pc, #112]	; (1000d130 <ble_pair_request_handler+0x138>)
1000d0be:	4699      	mov	r9, r3
1000d0c0:	230f      	movs	r3, #15
1000d0c2:	4698      	mov	r8, r3
1000d0c4:	47c8      	blx	r9
1000d0c6:	4643      	mov	r3, r8
1000d0c8:	4018      	ands	r0, r3
1000d0ca:	7020      	strb	r0, [r4, #0]
1000d0cc:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000d0ce:	42ac      	cmp	r4, r5
1000d0d0:	d1f8      	bne.n	1000d0c4 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000d0d2:	4b17      	ldr	r3, [pc, #92]	; (1000d130 <ble_pair_request_handler+0x138>)
1000d0d4:	4798      	blx	r3
1000d0d6:	017b      	lsls	r3, r7, #5
1000d0d8:	1bdb      	subs	r3, r3, r7
1000d0da:	009b      	lsls	r3, r3, #2
1000d0dc:	4a13      	ldr	r2, [pc, #76]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d0de:	18d3      	adds	r3, r2, r3
1000d0e0:	001a      	movs	r2, r3
1000d0e2:	3270      	adds	r2, #112	; 0x70
1000d0e4:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000d0e6:	337a      	adds	r3, #122	; 0x7a
1000d0e8:	2210      	movs	r2, #16
1000d0ea:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000d0ec:	017a      	lsls	r2, r7, #5
1000d0ee:	1bd7      	subs	r7, r2, r7
1000d0f0:	00bf      	lsls	r7, r7, #2
1000d0f2:	3760      	adds	r7, #96	; 0x60
1000d0f4:	4a0d      	ldr	r2, [pc, #52]	; (1000d12c <ble_pair_request_handler+0x134>)
1000d0f6:	18ba      	adds	r2, r7, r2
1000d0f8:	465b      	mov	r3, fp
1000d0fa:	8818      	ldrh	r0, [r3, #0]
1000d0fc:	2300      	movs	r3, #0
1000d0fe:	a901      	add	r1, sp, #4
1000d100:	4c0c      	ldr	r4, [pc, #48]	; (1000d134 <ble_pair_request_handler+0x13c>)
1000d102:	47a0      	blx	r4
1000d104:	2800      	cmp	r0, #0
1000d106:	d00a      	beq.n	1000d11e <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000d108:	ab01      	add	r3, sp, #4
1000d10a:	2200      	movs	r2, #0
1000d10c:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000d10e:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000d110:	4809      	ldr	r0, [pc, #36]	; (1000d138 <ble_pair_request_handler+0x140>)
1000d112:	4b0a      	ldr	r3, [pc, #40]	; (1000d13c <ble_pair_request_handler+0x144>)
1000d114:	4798      	blx	r3
1000d116:	480a      	ldr	r0, [pc, #40]	; (1000d140 <ble_pair_request_handler+0x148>)
1000d118:	4b0a      	ldr	r3, [pc, #40]	; (1000d144 <ble_pair_request_handler+0x14c>)
1000d11a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d11c:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000d11e:	b005      	add	sp, #20
1000d120:	bc3c      	pop	{r2, r3, r4, r5}
1000d122:	4690      	mov	r8, r2
1000d124:	4699      	mov	r9, r3
1000d126:	46a2      	mov	sl, r4
1000d128:	46ab      	mov	fp, r5
1000d12a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d12c:	1001a4d8 	.word	0x1001a4d8
1000d130:	100164b1 	.word	0x100164b1
1000d134:	1001019d 	.word	0x1001019d
1000d138:	100174f0 	.word	0x100174f0
1000d13c:	1001649d 	.word	0x1001649d
1000d140:	10017f30 	.word	0x10017f30
1000d144:	1001637d 	.word	0x1001637d

1000d148 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000d148:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d14a:	b085      	sub	sp, #20
1000d14c:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000d14e:	2206      	movs	r2, #6
1000d150:	493d      	ldr	r1, [pc, #244]	; (1000d248 <ble_pair_key_request_handler+0x100>)
1000d152:	a802      	add	r0, sp, #8
1000d154:	4e3d      	ldr	r6, [pc, #244]	; (1000d24c <ble_pair_key_request_handler+0x104>)
1000d156:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000d158:	ac01      	add	r4, sp, #4
1000d15a:	2204      	movs	r2, #4
1000d15c:	0029      	movs	r1, r5
1000d15e:	0020      	movs	r0, r4
1000d160:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000d162:	78e3      	ldrb	r3, [r4, #3]
1000d164:	2b00      	cmp	r3, #0
1000d166:	d162      	bne.n	1000d22e <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d168:	4839      	ldr	r0, [pc, #228]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d16a:	4b3a      	ldr	r3, [pc, #232]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d16c:	4798      	blx	r3
1000d16e:	483a      	ldr	r0, [pc, #232]	; (1000d258 <ble_pair_key_request_handler+0x110>)
1000d170:	4b3a      	ldr	r3, [pc, #232]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d172:	4798      	blx	r3
1000d174:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d176:	4c3a      	ldr	r4, [pc, #232]	; (1000d260 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000d178:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000d17a:	201e      	movs	r0, #30
1000d17c:	47a0      	blx	r4
1000d17e:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000d180:	2b00      	cmp	r3, #0
1000d182:	d11a      	bne.n	1000d1ba <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000d184:	4f32      	ldr	r7, [pc, #200]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d186:	0038      	movs	r0, r7
1000d188:	4e32      	ldr	r6, [pc, #200]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d18a:	47b0      	blx	r6
1000d18c:	4835      	ldr	r0, [pc, #212]	; (1000d264 <ble_pair_key_request_handler+0x11c>)
1000d18e:	4c33      	ldr	r4, [pc, #204]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d190:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000d192:	0038      	movs	r0, r7
1000d194:	47b0      	blx	r6
1000d196:	4834      	ldr	r0, [pc, #208]	; (1000d268 <ble_pair_key_request_handler+0x120>)
1000d198:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000d19a:	8828      	ldrh	r0, [r5, #0]
1000d19c:	2113      	movs	r1, #19
1000d19e:	4b33      	ldr	r3, [pc, #204]	; (1000d26c <ble_pair_key_request_handler+0x124>)
1000d1a0:	4798      	blx	r3
1000d1a2:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000d1a4:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000d1a6:	2b00      	cmp	r3, #0
1000d1a8:	d04c      	beq.n	1000d244 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000d1aa:	4829      	ldr	r0, [pc, #164]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d1ac:	4b29      	ldr	r3, [pc, #164]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d1ae:	4798      	blx	r3
1000d1b0:	482f      	ldr	r0, [pc, #188]	; (1000d270 <ble_pair_key_request_handler+0x128>)
1000d1b2:	4b2a      	ldr	r3, [pc, #168]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d1b4:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000d1b6:	20e2      	movs	r0, #226	; 0xe2
1000d1b8:	e044      	b.n	1000d244 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000d1ba:	001a      	movs	r2, r3
1000d1bc:	3a30      	subs	r2, #48	; 0x30
1000d1be:	2a09      	cmp	r2, #9
1000d1c0:	d8db      	bhi.n	1000d17a <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000d1c2:	aa02      	add	r2, sp, #8
1000d1c4:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000d1c6:	4038      	ands	r0, r7
1000d1c8:	4b2a      	ldr	r3, [pc, #168]	; (1000d274 <ble_pair_key_request_handler+0x12c>)
1000d1ca:	4798      	blx	r3
1000d1cc:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000d1ce:	2e06      	cmp	r6, #6
1000d1d0:	d026      	beq.n	1000d220 <ble_pair_key_request_handler+0xd8>
1000d1d2:	e7d2      	b.n	1000d17a <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000d1d4:	481e      	ldr	r0, [pc, #120]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d1d6:	4b1f      	ldr	r3, [pc, #124]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d1d8:	4798      	blx	r3
1000d1da:	4827      	ldr	r0, [pc, #156]	; (1000d278 <ble_pair_key_request_handler+0x130>)
1000d1dc:	4b1f      	ldr	r3, [pc, #124]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d1de:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000d1e0:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d1e2:	4e24      	ldr	r6, [pc, #144]	; (1000d274 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000d1e4:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000d1e6:	5ce0      	ldrb	r0, [r4, r3]
1000d1e8:	47b0      	blx	r6
1000d1ea:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000d1ec:	2c06      	cmp	r4, #6
1000d1ee:	d1f9      	bne.n	1000d1e4 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000d1f0:	ab01      	add	r3, sp, #4
1000d1f2:	7899      	ldrb	r1, [r3, #2]
1000d1f4:	8828      	ldrh	r0, [r5, #0]
1000d1f6:	aa02      	add	r2, sp, #8
1000d1f8:	4b20      	ldr	r3, [pc, #128]	; (1000d27c <ble_pair_key_request_handler+0x134>)
1000d1fa:	4798      	blx	r3
1000d1fc:	2800      	cmp	r0, #0
1000d1fe:	d021      	beq.n	1000d244 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000d200:	4813      	ldr	r0, [pc, #76]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d202:	4b14      	ldr	r3, [pc, #80]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d204:	4798      	blx	r3
1000d206:	481e      	ldr	r0, [pc, #120]	; (1000d280 <ble_pair_key_request_handler+0x138>)
1000d208:	4b14      	ldr	r3, [pc, #80]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d20a:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d20c:	2000      	movs	r0, #0
1000d20e:	e019      	b.n	1000d244 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000d210:	480f      	ldr	r0, [pc, #60]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d212:	4b10      	ldr	r3, [pc, #64]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d214:	4798      	blx	r3
1000d216:	481b      	ldr	r0, [pc, #108]	; (1000d284 <ble_pair_key_request_handler+0x13c>)
1000d218:	4b10      	ldr	r3, [pc, #64]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d21a:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000d21c:	2000      	movs	r0, #0
1000d21e:	e011      	b.n	1000d244 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000d220:	480b      	ldr	r0, [pc, #44]	; (1000d250 <ble_pair_key_request_handler+0x108>)
1000d222:	4b0c      	ldr	r3, [pc, #48]	; (1000d254 <ble_pair_key_request_handler+0x10c>)
1000d224:	4798      	blx	r3
1000d226:	4818      	ldr	r0, [pc, #96]	; (1000d288 <ble_pair_key_request_handler+0x140>)
1000d228:	4b0c      	ldr	r3, [pc, #48]	; (1000d25c <ble_pair_key_request_handler+0x114>)
1000d22a:	4798      	blx	r3
1000d22c:	e7d8      	b.n	1000d1e0 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000d22e:	ab01      	add	r3, sp, #4
1000d230:	885a      	ldrh	r2, [r3, #2]
1000d232:	2380      	movs	r3, #128	; 0x80
1000d234:	005b      	lsls	r3, r3, #1
1000d236:	429a      	cmp	r2, r3
1000d238:	d0cc      	beq.n	1000d1d4 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000d23a:	ab01      	add	r3, sp, #4
1000d23c:	789b      	ldrb	r3, [r3, #2]
1000d23e:	2b01      	cmp	r3, #1
1000d240:	d0e6      	beq.n	1000d210 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000d242:	2000      	movs	r0, #0
}
1000d244:	b005      	add	sp, #20
1000d246:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d248:	10017cdc 	.word	0x10017cdc
1000d24c:	10016223 	.word	0x10016223
1000d250:	100174f0 	.word	0x100174f0
1000d254:	1001649d 	.word	0x1001649d
1000d258:	10017f58 	.word	0x10017f58
1000d25c:	1001637d 	.word	0x1001637d
1000d260:	1000ddd1 	.word	0x1000ddd1
1000d264:	10017f80 	.word	0x10017f80
1000d268:	10017f8c 	.word	0x10017f8c
1000d26c:	1000f7a5 	.word	0x1000f7a5
1000d270:	10017e74 	.word	0x10017e74
1000d274:	100163b1 	.word	0x100163b1
1000d278:	10017fa0 	.word	0x10017fa0
1000d27c:	100102cd 	.word	0x100102cd
1000d280:	10017fd8 	.word	0x10017fd8
1000d284:	10017ff0 	.word	0x10017ff0
1000d288:	1001800c 	.word	0x1001800c

1000d28c <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000d28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d28e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d290:	8805      	ldrh	r5, [r0, #0]
1000d292:	4b2f      	ldr	r3, [pc, #188]	; (1000d350 <ble_encryption_request_handler+0xc4>)
1000d294:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d296:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000d298:	0010      	movs	r0, r2
1000d29a:	8919      	ldrh	r1, [r3, #8]
1000d29c:	42a9      	cmp	r1, r5
1000d29e:	d116      	bne.n	1000d2ce <ble_encryption_request_handler+0x42>
1000d2a0:	0019      	movs	r1, r3
1000d2a2:	315e      	adds	r1, #94	; 0x5e
1000d2a4:	7809      	ldrb	r1, [r1, #0]
1000d2a6:	2901      	cmp	r1, #1
1000d2a8:	d911      	bls.n	1000d2ce <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000d2aa:	4929      	ldr	r1, [pc, #164]	; (1000d350 <ble_encryption_request_handler+0xc4>)
1000d2ac:	0152      	lsls	r2, r2, #5
1000d2ae:	1a10      	subs	r0, r2, r0
1000d2b0:	0080      	lsls	r0, r0, #2
1000d2b2:	1808      	adds	r0, r1, r0
1000d2b4:	305e      	adds	r0, #94	; 0x5e
1000d2b6:	2306      	movs	r3, #6
1000d2b8:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000d2ba:	0162      	lsls	r2, r4, #5
1000d2bc:	1b13      	subs	r3, r2, r4
1000d2be:	009b      	lsls	r3, r3, #2
1000d2c0:	18cb      	adds	r3, r1, r3
1000d2c2:	3370      	adds	r3, #112	; 0x70
1000d2c4:	881a      	ldrh	r2, [r3, #0]
1000d2c6:	8873      	ldrh	r3, [r6, #2]
1000d2c8:	429a      	cmp	r2, r3
1000d2ca:	d113      	bne.n	1000d2f4 <ble_encryption_request_handler+0x68>
1000d2cc:	e006      	b.n	1000d2dc <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2ce:	3401      	adds	r4, #1
1000d2d0:	b2e4      	uxtb	r4, r4
1000d2d2:	3201      	adds	r2, #1
1000d2d4:	337c      	adds	r3, #124	; 0x7c
1000d2d6:	2c05      	cmp	r4, #5
1000d2d8:	d1de      	bne.n	1000d298 <ble_encryption_request_handler+0xc>
1000d2da:	e00b      	b.n	1000d2f4 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000d2dc:	0161      	lsls	r1, r4, #5
1000d2de:	1b09      	subs	r1, r1, r4
1000d2e0:	0089      	lsls	r1, r1, #2
1000d2e2:	4b1b      	ldr	r3, [pc, #108]	; (1000d350 <ble_encryption_request_handler+0xc4>)
1000d2e4:	1859      	adds	r1, r3, r1
1000d2e6:	3172      	adds	r1, #114	; 0x72
1000d2e8:	1d30      	adds	r0, r6, #4
1000d2ea:	2208      	movs	r2, #8
1000d2ec:	4b19      	ldr	r3, [pc, #100]	; (1000d354 <ble_encryption_request_handler+0xc8>)
1000d2ee:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000d2f0:	2800      	cmp	r0, #0
1000d2f2:	d015      	beq.n	1000d320 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000d2f4:	4f18      	ldr	r7, [pc, #96]	; (1000d358 <ble_encryption_request_handler+0xcc>)
1000d2f6:	0038      	movs	r0, r7
1000d2f8:	4e18      	ldr	r6, [pc, #96]	; (1000d35c <ble_encryption_request_handler+0xd0>)
1000d2fa:	47b0      	blx	r6
1000d2fc:	4818      	ldr	r0, [pc, #96]	; (1000d360 <ble_encryption_request_handler+0xd4>)
1000d2fe:	4d19      	ldr	r5, [pc, #100]	; (1000d364 <ble_encryption_request_handler+0xd8>)
1000d300:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000d302:	0038      	movs	r0, r7
1000d304:	47b0      	blx	r6
1000d306:	4818      	ldr	r0, [pc, #96]	; (1000d368 <ble_encryption_request_handler+0xdc>)
1000d308:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000d30a:	0163      	lsls	r3, r4, #5
1000d30c:	1b1c      	subs	r4, r3, r4
1000d30e:	00a4      	lsls	r4, r4, #2
1000d310:	4b0f      	ldr	r3, [pc, #60]	; (1000d350 <ble_encryption_request_handler+0xc4>)
1000d312:	191c      	adds	r4, r3, r4
1000d314:	8920      	ldrh	r0, [r4, #8]
1000d316:	2105      	movs	r1, #5
1000d318:	4b14      	ldr	r3, [pc, #80]	; (1000d36c <ble_encryption_request_handler+0xe0>)
1000d31a:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000d31c:	20e2      	movs	r0, #226	; 0xe2
1000d31e:	e016      	b.n	1000d34e <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000d320:	0162      	lsls	r2, r4, #5
1000d322:	1b13      	subs	r3, r2, r4
1000d324:	009b      	lsls	r3, r3, #2
1000d326:	3360      	adds	r3, #96	; 0x60
1000d328:	4909      	ldr	r1, [pc, #36]	; (1000d350 <ble_encryption_request_handler+0xc4>)
1000d32a:	185b      	adds	r3, r3, r1
1000d32c:	1b14      	subs	r4, r2, r4
1000d32e:	00a4      	lsls	r4, r4, #2
1000d330:	190c      	adds	r4, r1, r4
1000d332:	7d21      	ldrb	r1, [r4, #20]
1000d334:	8830      	ldrh	r0, [r6, #0]
1000d336:	2201      	movs	r2, #1
1000d338:	4c0d      	ldr	r4, [pc, #52]	; (1000d370 <ble_encryption_request_handler+0xe4>)
1000d33a:	47a0      	blx	r4
1000d33c:	2800      	cmp	r0, #0
1000d33e:	d006      	beq.n	1000d34e <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000d340:	4805      	ldr	r0, [pc, #20]	; (1000d358 <ble_encryption_request_handler+0xcc>)
1000d342:	4b06      	ldr	r3, [pc, #24]	; (1000d35c <ble_encryption_request_handler+0xd0>)
1000d344:	4798      	blx	r3
1000d346:	480b      	ldr	r0, [pc, #44]	; (1000d374 <ble_encryption_request_handler+0xe8>)
1000d348:	4b06      	ldr	r3, [pc, #24]	; (1000d364 <ble_encryption_request_handler+0xd8>)
1000d34a:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000d34c:	2000      	movs	r0, #0
}
1000d34e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d350:	1001a4d8 	.word	0x1001a4d8
1000d354:	10016205 	.word	0x10016205
1000d358:	100174f0 	.word	0x100174f0
1000d35c:	1001649d 	.word	0x1001649d
1000d360:	10018020 	.word	0x10018020
1000d364:	1001637d 	.word	0x1001637d
1000d368:	10018058 	.word	0x10018058
1000d36c:	1000f7a5 	.word	0x1000f7a5
1000d370:	10010401 	.word	0x10010401
1000d374:	100180b0 	.word	0x100180b0

1000d378 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000d378:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000d37a:	2a00      	cmp	r2, #0
1000d37c:	d047      	beq.n	1000d40e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000d37e:	2906      	cmp	r1, #6
1000d380:	d847      	bhi.n	1000d412 <ble_mgr_events_callback_handler+0x9a>
1000d382:	0089      	lsls	r1, r1, #2
1000d384:	4b28      	ldr	r3, [pc, #160]	; (1000d428 <ble_mgr_events_callback_handler+0xb0>)
1000d386:	585b      	ldr	r3, [r3, r1]
1000d388:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000d38a:	4b28      	ldr	r3, [pc, #160]	; (1000d42c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000d38c:	2405      	movs	r4, #5
1000d38e:	e00a      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000d390:	4b27      	ldr	r3, [pc, #156]	; (1000d430 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000d392:	2401      	movs	r4, #1
			}
			break;
1000d394:	e007      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000d396:	4b27      	ldr	r3, [pc, #156]	; (1000d434 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000d398:	2405      	movs	r4, #5
			}
			break;
1000d39a:	e004      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000d39c:	4b26      	ldr	r3, [pc, #152]	; (1000d438 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000d39e:	2401      	movs	r4, #1
			}
			break;
1000d3a0:	e001      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000d3a2:	4b26      	ldr	r3, [pc, #152]	; (1000d43c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000d3a4:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000d3a6:	2800      	cmp	r0, #0
1000d3a8:	d116      	bne.n	1000d3d8 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d3aa:	6819      	ldr	r1, [r3, #0]
1000d3ac:	2900      	cmp	r1, #0
1000d3ae:	d10b      	bne.n	1000d3c8 <ble_mgr_events_callback_handler+0x50>
1000d3b0:	e006      	b.n	1000d3c0 <ble_mgr_events_callback_handler+0x48>
1000d3b2:	001d      	movs	r5, r3
1000d3b4:	3304      	adds	r3, #4
1000d3b6:	1f18      	subs	r0, r3, #4
1000d3b8:	6800      	ldr	r0, [r0, #0]
1000d3ba:	2800      	cmp	r0, #0
1000d3bc:	d106      	bne.n	1000d3cc <ble_mgr_events_callback_handler+0x54>
1000d3be:	e000      	b.n	1000d3c2 <ble_mgr_events_callback_handler+0x4a>
1000d3c0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000d3c2:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000d3c4:	2101      	movs	r1, #1
						break;
1000d3c6:	e02c      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
1000d3c8:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000d3ca:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d3cc:	3101      	adds	r1, #1
1000d3ce:	b2c9      	uxtb	r1, r1
1000d3d0:	42a1      	cmp	r1, r4
1000d3d2:	d3ee      	bcc.n	1000d3b2 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d3d4:	2100      	movs	r1, #0
1000d3d6:	e024      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
1000d3d8:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000d3da:	2801      	cmp	r0, #1
1000d3dc:	d121      	bne.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d3de:	6819      	ldr	r1, [r3, #0]
1000d3e0:	428a      	cmp	r2, r1
1000d3e2:	d10c      	bne.n	1000d3fe <ble_mgr_events_callback_handler+0x86>
1000d3e4:	e006      	b.n	1000d3f4 <ble_mgr_events_callback_handler+0x7c>
1000d3e6:	001d      	movs	r5, r3
1000d3e8:	3304      	adds	r3, #4
1000d3ea:	1f18      	subs	r0, r3, #4
1000d3ec:	6800      	ldr	r0, [r0, #0]
1000d3ee:	4282      	cmp	r2, r0
1000d3f0:	d107      	bne.n	1000d402 <ble_mgr_events_callback_handler+0x8a>
1000d3f2:	e000      	b.n	1000d3f6 <ble_mgr_events_callback_handler+0x7e>
1000d3f4:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000d3f6:	2300      	movs	r3, #0
1000d3f8:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000d3fa:	2101      	movs	r1, #1
						break;
1000d3fc:	e011      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
1000d3fe:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000d400:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000d402:	3101      	adds	r1, #1
1000d404:	b2c9      	uxtb	r1, r1
1000d406:	42a1      	cmp	r1, r4
1000d408:	d3ed      	bcc.n	1000d3e6 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000d40a:	2100      	movs	r1, #0
1000d40c:	e009      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000d40e:	2100      	movs	r1, #0
1000d410:	e007      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000d412:	2100      	movs	r1, #0
1000d414:	e005      	b.n	1000d422 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000d416:	4b0a      	ldr	r3, [pc, #40]	; (1000d440 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000d418:	2405      	movs	r4, #5
1000d41a:	e7c4      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000d41c:	4b09      	ldr	r3, [pc, #36]	; (1000d444 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000d41e:	2401      	movs	r4, #1
1000d420:	e7c1      	b.n	1000d3a6 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000d422:	0008      	movs	r0, r1
1000d424:	bd30      	pop	{r4, r5, pc}
1000d426:	46c0      	nop			; (mov r8, r8)
1000d428:	10017bd0 	.word	0x10017bd0
1000d42c:	1001a4c4 	.word	0x1001a4c4
1000d430:	1001a4c0 	.word	0x1001a4c0
1000d434:	1001a748 	.word	0x1001a748
1000d438:	1001acfc 	.word	0x1001acfc
1000d43c:	1001a75c 	.word	0x1001a75c
1000d440:	1001a770 	.word	0x1001a770
1000d444:	1001a7b8 	.word	0x1001a7b8

1000d448 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000d448:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d44a:	465f      	mov	r7, fp
1000d44c:	4656      	mov	r6, sl
1000d44e:	464d      	mov	r5, r9
1000d450:	4644      	mov	r4, r8
1000d452:	b4f0      	push	{r4, r5, r6, r7}
1000d454:	b08d      	sub	sp, #52	; 0x34
1000d456:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000d458:	2400      	movs	r4, #0
1000d45a:	4b72      	ldr	r3, [pc, #456]	; (1000d624 <ble_device_init+0x1dc>)
1000d45c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d45e:	2207      	movs	r2, #7
1000d460:	2100      	movs	r1, #0
1000d462:	4871      	ldr	r0, [pc, #452]	; (1000d628 <ble_device_init+0x1e0>)
1000d464:	4d71      	ldr	r5, [pc, #452]	; (1000d62c <ble_device_init+0x1e4>)
1000d466:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000d468:	2212      	movs	r2, #18
1000d46a:	2100      	movs	r1, #0
1000d46c:	4870      	ldr	r0, [pc, #448]	; (1000d630 <ble_device_init+0x1e8>)
1000d46e:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000d470:	4a70      	ldr	r2, [pc, #448]	; (1000d634 <ble_device_init+0x1ec>)
1000d472:	2100      	movs	r1, #0
1000d474:	4870      	ldr	r0, [pc, #448]	; (1000d638 <ble_device_init+0x1f0>)
1000d476:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000d478:	4b70      	ldr	r3, [pc, #448]	; (1000d63c <ble_device_init+0x1f4>)
1000d47a:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000d47c:	22cd      	movs	r2, #205	; 0xcd
1000d47e:	0092      	lsls	r2, r2, #2
1000d480:	2100      	movs	r1, #0
1000d482:	486f      	ldr	r0, [pc, #444]	; (1000d640 <ble_device_init+0x1f8>)
1000d484:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000d486:	4b6f      	ldr	r3, [pc, #444]	; (1000d644 <ble_device_init+0x1fc>)
1000d488:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000d48a:	2283      	movs	r2, #131	; 0x83
1000d48c:	0092      	lsls	r2, r2, #2
1000d48e:	2100      	movs	r1, #0
1000d490:	486d      	ldr	r0, [pc, #436]	; (1000d648 <ble_device_init+0x200>)
1000d492:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000d494:	4b6d      	ldr	r3, [pc, #436]	; (1000d64c <ble_device_init+0x204>)
1000d496:	469b      	mov	fp, r3
1000d498:	2380      	movs	r3, #128	; 0x80
1000d49a:	00db      	lsls	r3, r3, #3
1000d49c:	469a      	mov	sl, r3
1000d49e:	001a      	movs	r2, r3
1000d4a0:	2100      	movs	r1, #0
1000d4a2:	4658      	mov	r0, fp
1000d4a4:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000d4a6:	4b6a      	ldr	r3, [pc, #424]	; (1000d650 <ble_device_init+0x208>)
1000d4a8:	4699      	mov	r9, r3
1000d4aa:	2380      	movs	r3, #128	; 0x80
1000d4ac:	015b      	lsls	r3, r3, #5
1000d4ae:	4698      	mov	r8, r3
1000d4b0:	001a      	movs	r2, r3
1000d4b2:	2100      	movs	r1, #0
1000d4b4:	4648      	mov	r0, r9
1000d4b6:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000d4b8:	4f66      	ldr	r7, [pc, #408]	; (1000d654 <ble_device_init+0x20c>)
1000d4ba:	221c      	movs	r2, #28
1000d4bc:	2100      	movs	r1, #0
1000d4be:	0038      	movs	r0, r7
1000d4c0:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000d4c2:	465b      	mov	r3, fp
1000d4c4:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000d4c6:	4653      	mov	r3, sl
1000d4c8:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000d4ca:	464b      	mov	r3, r9
1000d4cc:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000d4ce:	4643      	mov	r3, r8
1000d4d0:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000d4d2:	4b61      	ldr	r3, [pc, #388]	; (1000d658 <ble_device_init+0x210>)
1000d4d4:	601c      	str	r4, [r3, #0]
1000d4d6:	605c      	str	r4, [r3, #4]
1000d4d8:	609c      	str	r4, [r3, #8]
1000d4da:	60dc      	str	r4, [r3, #12]
1000d4dc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000d4de:	4b5f      	ldr	r3, [pc, #380]	; (1000d65c <ble_device_init+0x214>)
1000d4e0:	601c      	str	r4, [r3, #0]
1000d4e2:	605c      	str	r4, [r3, #4]
1000d4e4:	609c      	str	r4, [r3, #8]
1000d4e6:	60dc      	str	r4, [r3, #12]
1000d4e8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000d4ea:	4b5d      	ldr	r3, [pc, #372]	; (1000d660 <ble_device_init+0x218>)
1000d4ec:	601c      	str	r4, [r3, #0]
1000d4ee:	605c      	str	r4, [r3, #4]
1000d4f0:	609c      	str	r4, [r3, #8]
1000d4f2:	60dc      	str	r4, [r3, #12]
1000d4f4:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000d4f6:	4b5b      	ldr	r3, [pc, #364]	; (1000d664 <ble_device_init+0x21c>)
1000d4f8:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000d4fa:	4b5b      	ldr	r3, [pc, #364]	; (1000d668 <ble_device_init+0x220>)
1000d4fc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000d4fe:	4b5b      	ldr	r3, [pc, #364]	; (1000d66c <ble_device_init+0x224>)
1000d500:	601c      	str	r4, [r3, #0]
1000d502:	605c      	str	r4, [r3, #4]
1000d504:	609c      	str	r4, [r3, #8]
1000d506:	60dc      	str	r4, [r3, #12]
1000d508:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000d50a:	4b59      	ldr	r3, [pc, #356]	; (1000d670 <ble_device_init+0x228>)
1000d50c:	601c      	str	r4, [r3, #0]
1000d50e:	4c59      	ldr	r4, [pc, #356]	; (1000d674 <ble_device_init+0x22c>)
1000d510:	239b      	movs	r3, #155	; 0x9b
1000d512:	009b      	lsls	r3, r3, #2
1000d514:	4698      	mov	r8, r3
1000d516:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d518:	4f44      	ldr	r7, [pc, #272]	; (1000d62c <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d51a:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000d51c:	227c      	movs	r2, #124	; 0x7c
1000d51e:	2100      	movs	r1, #0
1000d520:	0020      	movs	r0, r4
1000d522:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000d524:	0023      	movs	r3, r4
1000d526:	335e      	adds	r3, #94	; 0x5e
1000d528:	2200      	movs	r2, #0
1000d52a:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000d52c:	7625      	strb	r5, [r4, #24]
1000d52e:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d530:	45a0      	cmp	r8, r4
1000d532:	d1f3      	bne.n	1000d51c <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000d534:	4b50      	ldr	r3, [pc, #320]	; (1000d678 <ble_device_init+0x230>)
1000d536:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000d538:	4846      	ldr	r0, [pc, #280]	; (1000d654 <ble_device_init+0x20c>)
1000d53a:	4b3e      	ldr	r3, [pc, #248]	; (1000d634 <ble_device_init+0x1ec>)
1000d53c:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000d53e:	4b3e      	ldr	r3, [pc, #248]	; (1000d638 <ble_device_init+0x1f0>)
1000d540:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000d542:	4b4e      	ldr	r3, [pc, #312]	; (1000d67c <ble_device_init+0x234>)
1000d544:	4798      	blx	r3
1000d546:	2800      	cmp	r0, #0
1000d548:	d00b      	beq.n	1000d562 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000d54a:	4e4d      	ldr	r6, [pc, #308]	; (1000d680 <ble_device_init+0x238>)
1000d54c:	0030      	movs	r0, r6
1000d54e:	4d4d      	ldr	r5, [pc, #308]	; (1000d684 <ble_device_init+0x23c>)
1000d550:	47a8      	blx	r5
1000d552:	484d      	ldr	r0, [pc, #308]	; (1000d688 <ble_device_init+0x240>)
1000d554:	4c4d      	ldr	r4, [pc, #308]	; (1000d68c <ble_device_init+0x244>)
1000d556:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000d558:	0030      	movs	r0, r6
1000d55a:	47a8      	blx	r5
1000d55c:	484c      	ldr	r0, [pc, #304]	; (1000d690 <ble_device_init+0x248>)
1000d55e:	47a0      	blx	r4
1000d560:	e7fe      	b.n	1000d560 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000d562:	4a4c      	ldr	r2, [pc, #304]	; (1000d694 <ble_device_init+0x24c>)
1000d564:	2100      	movs	r1, #0
1000d566:	2000      	movs	r0, #0
1000d568:	4c4b      	ldr	r4, [pc, #300]	; (1000d698 <ble_device_init+0x250>)
1000d56a:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000d56c:	4a4b      	ldr	r2, [pc, #300]	; (1000d69c <ble_device_init+0x254>)
1000d56e:	2102      	movs	r1, #2
1000d570:	2000      	movs	r0, #0
1000d572:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000d574:	2109      	movs	r1, #9
1000d576:	484a      	ldr	r0, [pc, #296]	; (1000d6a0 <ble_device_init+0x258>)
1000d578:	4b4a      	ldr	r3, [pc, #296]	; (1000d6a4 <ble_device_init+0x25c>)
1000d57a:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000d57c:	2800      	cmp	r0, #0
1000d57e:	d005      	beq.n	1000d58c <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000d580:	483f      	ldr	r0, [pc, #252]	; (1000d680 <ble_device_init+0x238>)
1000d582:	4b40      	ldr	r3, [pc, #256]	; (1000d684 <ble_device_init+0x23c>)
1000d584:	4798      	blx	r3
1000d586:	4848      	ldr	r0, [pc, #288]	; (1000d6a8 <ble_device_init+0x260>)
1000d588:	4b40      	ldr	r3, [pc, #256]	; (1000d68c <ble_device_init+0x244>)
1000d58a:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000d58c:	2207      	movs	r2, #7
1000d58e:	4947      	ldr	r1, [pc, #284]	; (1000d6ac <ble_device_init+0x264>)
1000d590:	3108      	adds	r1, #8
1000d592:	4668      	mov	r0, sp
1000d594:	4b46      	ldr	r3, [pc, #280]	; (1000d6b0 <ble_device_init+0x268>)
1000d596:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000d598:	2226      	movs	r2, #38	; 0x26
1000d59a:	2100      	movs	r1, #0
1000d59c:	a802      	add	r0, sp, #8
1000d59e:	4b23      	ldr	r3, [pc, #140]	; (1000d62c <ble_device_init+0x1e4>)
1000d5a0:	4798      	blx	r3
	
	if (addr == NULL)
1000d5a2:	2e00      	cmp	r6, #0
1000d5a4:	d10c      	bne.n	1000d5c0 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d5a6:	4668      	mov	r0, sp
1000d5a8:	4b42      	ldr	r3, [pc, #264]	; (1000d6b4 <ble_device_init+0x26c>)
1000d5aa:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d5ac:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000d5ae:	2800      	cmp	r0, #0
1000d5b0:	d006      	beq.n	1000d5c0 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000d5b2:	4833      	ldr	r0, [pc, #204]	; (1000d680 <ble_device_init+0x238>)
1000d5b4:	4b33      	ldr	r3, [pc, #204]	; (1000d684 <ble_device_init+0x23c>)
1000d5b6:	4798      	blx	r3
1000d5b8:	483f      	ldr	r0, [pc, #252]	; (1000d6b8 <ble_device_init+0x270>)
1000d5ba:	4b34      	ldr	r3, [pc, #208]	; (1000d68c <ble_device_init+0x244>)
1000d5bc:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000d5be:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000d5c0:	ac02      	add	r4, sp, #8
1000d5c2:	230a      	movs	r3, #10
1000d5c4:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000d5c6:	4b3d      	ldr	r3, [pc, #244]	; (1000d6bc <ble_device_init+0x274>)
1000d5c8:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000d5ca:	2207      	movs	r2, #7
1000d5cc:	0031      	movs	r1, r6
1000d5ce:	a803      	add	r0, sp, #12
1000d5d0:	4b37      	ldr	r3, [pc, #220]	; (1000d6b0 <ble_device_init+0x268>)
1000d5d2:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000d5d4:	2300      	movs	r3, #0
1000d5d6:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000d5d8:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000d5da:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000d5dc:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000d5de:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d5e0:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000d5e2:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000d5e4:	2380      	movs	r3, #128	; 0x80
1000d5e6:	009b      	lsls	r3, r3, #2
1000d5e8:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000d5ea:	0020      	movs	r0, r4
1000d5ec:	4b34      	ldr	r3, [pc, #208]	; (1000d6c0 <ble_device_init+0x278>)
1000d5ee:	4798      	blx	r3
1000d5f0:	2800      	cmp	r0, #0
1000d5f2:	d005      	beq.n	1000d600 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000d5f4:	4822      	ldr	r0, [pc, #136]	; (1000d680 <ble_device_init+0x238>)
1000d5f6:	4b23      	ldr	r3, [pc, #140]	; (1000d684 <ble_device_init+0x23c>)
1000d5f8:	4798      	blx	r3
1000d5fa:	4832      	ldr	r0, [pc, #200]	; (1000d6c4 <ble_device_init+0x27c>)
1000d5fc:	4b23      	ldr	r3, [pc, #140]	; (1000d68c <ble_device_init+0x244>)
1000d5fe:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000d600:	0030      	movs	r0, r6
1000d602:	4b31      	ldr	r3, [pc, #196]	; (1000d6c8 <ble_device_init+0x280>)
1000d604:	4798      	blx	r3
1000d606:	2800      	cmp	r0, #0
1000d608:	d005      	beq.n	1000d616 <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000d60a:	481d      	ldr	r0, [pc, #116]	; (1000d680 <ble_device_init+0x238>)
1000d60c:	4b1d      	ldr	r3, [pc, #116]	; (1000d684 <ble_device_init+0x23c>)
1000d60e:	4798      	blx	r3
1000d610:	482e      	ldr	r0, [pc, #184]	; (1000d6cc <ble_device_init+0x284>)
1000d612:	4b1e      	ldr	r3, [pc, #120]	; (1000d68c <ble_device_init+0x244>)
1000d614:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000d616:	b00d      	add	sp, #52	; 0x34
1000d618:	bc3c      	pop	{r2, r3, r4, r5}
1000d61a:	4690      	mov	r8, r2
1000d61c:	4699      	mov	r9, r3
1000d61e:	46a2      	mov	sl, r4
1000d620:	46ab      	mov	fp, r5
1000d622:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d624:	10018fdc 	.word	0x10018fdc
1000d628:	10018fe4 	.word	0x10018fe4
1000d62c:	10016235 	.word	0x10016235
1000d630:	1001a784 	.word	0x1001a784
1000d634:	000004e2 	.word	0x000004e2
1000d638:	10018afc 	.word	0x10018afc
1000d63c:	10018fe0 	.word	0x10018fe0
1000d640:	1001a7bc 	.word	0x1001a7bc
1000d644:	1001a7b4 	.word	0x1001a7b4
1000d648:	1001aaf0 	.word	0x1001aaf0
1000d64c:	100186fc 	.word	0x100186fc
1000d650:	10018fec 	.word	0x10018fec
1000d654:	1001a798 	.word	0x1001a798
1000d658:	1001a75c 	.word	0x1001a75c
1000d65c:	1001a770 	.word	0x1001a770
1000d660:	1001a4c4 	.word	0x1001a4c4
1000d664:	1001a7b8 	.word	0x1001a7b8
1000d668:	1001a4c0 	.word	0x1001a4c0
1000d66c:	1001a748 	.word	0x1001a748
1000d670:	1001acfc 	.word	0x1001acfc
1000d674:	1001a4d8 	.word	0x1001a4d8
1000d678:	1001a744 	.word	0x1001a744
1000d67c:	1000f3b1 	.word	0x1000f3b1
1000d680:	100174f0 	.word	0x100174f0
1000d684:	1001649d 	.word	0x1001649d
1000d688:	100180d0 	.word	0x100180d0
1000d68c:	1001637d 	.word	0x1001637d
1000d690:	100180fc 	.word	0x100180fc
1000d694:	10018350 	.word	0x10018350
1000d698:	1000d379 	.word	0x1000d379
1000d69c:	10017cec 	.word	0x10017cec
1000d6a0:	10018144 	.word	0x10018144
1000d6a4:	1000f2c9 	.word	0x1000f2c9
1000d6a8:	10018150 	.word	0x10018150
1000d6ac:	10017cdc 	.word	0x10017cdc
1000d6b0:	10016223 	.word	0x10016223
1000d6b4:	1000f2fd 	.word	0x1000f2fd
1000d6b8:	10018168 	.word	0x10018168
1000d6bc:	00003a98 	.word	0x00003a98
1000d6c0:	1000f321 	.word	0x1000f321
1000d6c4:	10018194 	.word	0x10018194
1000d6c8:	1000f565 	.word	0x1000f565
1000d6cc:	100181d0 	.word	0x100181d0

1000d6d0 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000d6d0:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000d6d2:	2200      	movs	r2, #0
1000d6d4:	2100      	movs	r1, #0
1000d6d6:	4b06      	ldr	r3, [pc, #24]	; (1000d6f0 <ble_send_slave_sec_request+0x20>)
1000d6d8:	4798      	blx	r3
1000d6da:	2800      	cmp	r0, #0
1000d6dc:	d006      	beq.n	1000d6ec <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000d6de:	4805      	ldr	r0, [pc, #20]	; (1000d6f4 <ble_send_slave_sec_request+0x24>)
1000d6e0:	4b05      	ldr	r3, [pc, #20]	; (1000d6f8 <ble_send_slave_sec_request+0x28>)
1000d6e2:	4798      	blx	r3
1000d6e4:	4805      	ldr	r0, [pc, #20]	; (1000d6fc <ble_send_slave_sec_request+0x2c>)
1000d6e6:	4b06      	ldr	r3, [pc, #24]	; (1000d700 <ble_send_slave_sec_request+0x30>)
1000d6e8:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000d6ea:	20e2      	movs	r0, #226	; 0xe2
}
1000d6ec:	bd10      	pop	{r4, pc}
1000d6ee:	46c0      	nop			; (mov r8, r8)
1000d6f0:	10010349 	.word	0x10010349
1000d6f4:	100174f0 	.word	0x100174f0
1000d6f8:	1001649d 	.word	0x1001649d
1000d6fc:	10018220 	.word	0x10018220
1000d700:	1001637d 	.word	0x1001637d

1000d704 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d704:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d706:	465f      	mov	r7, fp
1000d708:	464e      	mov	r6, r9
1000d70a:	4645      	mov	r5, r8
1000d70c:	b4e0      	push	{r5, r6, r7}
1000d70e:	b09a      	sub	sp, #104	; 0x68
1000d710:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000d712:	7a86      	ldrb	r6, [r0, #10]
1000d714:	2e00      	cmp	r6, #0
1000d716:	d000      	beq.n	1000d71a <ble_connected_state_handler+0x16>
1000d718:	e0c6      	b.n	1000d8a8 <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000d71a:	4875      	ldr	r0, [pc, #468]	; (1000d8f0 <ble_connected_state_handler+0x1ec>)
1000d71c:	4f75      	ldr	r7, [pc, #468]	; (1000d8f4 <ble_connected_state_handler+0x1f0>)
1000d71e:	47b8      	blx	r7
1000d720:	792b      	ldrb	r3, [r5, #4]
1000d722:	796a      	ldrb	r2, [r5, #5]
1000d724:	79a9      	ldrb	r1, [r5, #6]
1000d726:	7868      	ldrb	r0, [r5, #1]
1000d728:	9002      	str	r0, [sp, #8]
1000d72a:	78a8      	ldrb	r0, [r5, #2]
1000d72c:	9001      	str	r0, [sp, #4]
1000d72e:	78e8      	ldrb	r0, [r5, #3]
1000d730:	9000      	str	r0, [sp, #0]
1000d732:	4871      	ldr	r0, [pc, #452]	; (1000d8f8 <ble_connected_state_handler+0x1f4>)
1000d734:	4c71      	ldr	r4, [pc, #452]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d736:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d738:	486d      	ldr	r0, [pc, #436]	; (1000d8f0 <ble_connected_state_handler+0x1ec>)
1000d73a:	47b8      	blx	r7
1000d73c:	8929      	ldrh	r1, [r5, #8]
1000d73e:	4870      	ldr	r0, [pc, #448]	; (1000d900 <ble_connected_state_handler+0x1fc>)
1000d740:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d742:	2212      	movs	r2, #18
1000d744:	0029      	movs	r1, r5
1000d746:	486f      	ldr	r0, [pc, #444]	; (1000d904 <ble_connected_state_handler+0x200>)
1000d748:	4b6f      	ldr	r3, [pc, #444]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d74a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d74c:	9504      	str	r5, [sp, #16]
1000d74e:	2207      	movs	r2, #7
1000d750:	0029      	movs	r1, r5
1000d752:	486e      	ldr	r0, [pc, #440]	; (1000d90c <ble_connected_state_handler+0x208>)
1000d754:	4b6e      	ldr	r3, [pc, #440]	; (1000d910 <ble_connected_state_handler+0x20c>)
1000d756:	4798      	blx	r3
1000d758:	2800      	cmp	r0, #0
1000d75a:	d100      	bne.n	1000d75e <ble_connected_state_handler+0x5a>
1000d75c:	e0ad      	b.n	1000d8ba <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d75e:	782b      	ldrb	r3, [r5, #0]
1000d760:	2b02      	cmp	r3, #2
1000d762:	d000      	beq.n	1000d766 <ble_connected_state_handler+0x62>
1000d764:	e0a9      	b.n	1000d8ba <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d766:	2250      	movs	r2, #80	; 0x50
1000d768:	2100      	movs	r1, #0
1000d76a:	a806      	add	r0, sp, #24
1000d76c:	4b69      	ldr	r3, [pc, #420]	; (1000d914 <ble_connected_state_handler+0x210>)
1000d76e:	4798      	blx	r3
1000d770:	4f69      	ldr	r7, [pc, #420]	; (1000d918 <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d772:	2300      	movs	r3, #0
1000d774:	e00b      	b.n	1000d78e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d776:	1c59      	adds	r1, r3, #1
1000d778:	7814      	ldrb	r4, [r2, #0]
1000d77a:	a806      	add	r0, sp, #24
1000d77c:	54c4      	strb	r4, [r0, r3]
1000d77e:	3201      	adds	r2, #1
1000d780:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d782:	42b3      	cmp	r3, r6
1000d784:	d1f7      	bne.n	1000d776 <ble_connected_state_handler+0x72>
1000d786:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d788:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d78a:	2b50      	cmp	r3, #80	; 0x50
1000d78c:	d004      	beq.n	1000d798 <ble_connected_state_handler+0x94>
1000d78e:	001e      	movs	r6, r3
1000d790:	3610      	adds	r6, #16
1000d792:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d794:	003a      	movs	r2, r7
1000d796:	e7ee      	b.n	1000d776 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d798:	aa06      	add	r2, sp, #24
1000d79a:	0029      	movs	r1, r5
1000d79c:	2005      	movs	r0, #5
1000d79e:	4b5f      	ldr	r3, [pc, #380]	; (1000d91c <ble_connected_state_handler+0x218>)
1000d7a0:	4798      	blx	r3
1000d7a2:	1e06      	subs	r6, r0, #0
1000d7a4:	d100      	bne.n	1000d7a8 <ble_connected_state_handler+0xa4>
1000d7a6:	e09c      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d7a8:	4851      	ldr	r0, [pc, #324]	; (1000d8f0 <ble_connected_state_handler+0x1ec>)
1000d7aa:	4b52      	ldr	r3, [pc, #328]	; (1000d8f4 <ble_connected_state_handler+0x1f0>)
1000d7ac:	4798      	blx	r3
1000d7ae:	485c      	ldr	r0, [pc, #368]	; (1000d920 <ble_connected_state_handler+0x21c>)
1000d7b0:	4b52      	ldr	r3, [pc, #328]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d7b2:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d7b4:	26e2      	movs	r6, #226	; 0xe2
1000d7b6:	e094      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
1000d7b8:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d7ba:	9405      	str	r4, [sp, #20]
1000d7bc:	2207      	movs	r2, #7
1000d7be:	9904      	ldr	r1, [sp, #16]
1000d7c0:	4648      	mov	r0, r9
1000d7c2:	47d8      	blx	fp
1000d7c4:	2800      	cmp	r0, #0
1000d7c6:	d109      	bne.n	1000d7dc <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d7c8:	9a05      	ldr	r2, [sp, #20]
1000d7ca:	0153      	lsls	r3, r2, #5
1000d7cc:	1a9b      	subs	r3, r3, r2
1000d7ce:	009a      	lsls	r2, r3, #2
1000d7d0:	4b54      	ldr	r3, [pc, #336]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d7d2:	189b      	adds	r3, r3, r2
1000d7d4:	335e      	adds	r3, #94	; 0x5e
1000d7d6:	2202      	movs	r2, #2
1000d7d8:	701a      	strb	r2, [r3, #0]
1000d7da:	e02b      	b.n	1000d834 <ble_connected_state_handler+0x130>
1000d7dc:	3401      	adds	r4, #1
1000d7de:	237c      	movs	r3, #124	; 0x7c
1000d7e0:	469c      	mov	ip, r3
1000d7e2:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d7e4:	2c05      	cmp	r4, #5
1000d7e6:	d1e7      	bne.n	1000d7b8 <ble_connected_state_handler+0xb4>
1000d7e8:	e072      	b.n	1000d8d0 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d7ea:	001c      	movs	r4, r3
1000d7ec:	7811      	ldrb	r1, [r2, #0]
1000d7ee:	2900      	cmp	r1, #0
1000d7f0:	d11a      	bne.n	1000d828 <ble_connected_state_handler+0x124>
1000d7f2:	e001      	b.n	1000d7f8 <ble_connected_state_handler+0xf4>
1000d7f4:	2400      	movs	r4, #0
1000d7f6:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d7f8:	0163      	lsls	r3, r4, #5
1000d7fa:	4699      	mov	r9, r3
1000d7fc:	1b18      	subs	r0, r3, r4
1000d7fe:	0080      	lsls	r0, r0, #2
1000d800:	4b48      	ldr	r3, [pc, #288]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d802:	4698      	mov	r8, r3
1000d804:	4440      	add	r0, r8
1000d806:	2212      	movs	r2, #18
1000d808:	0029      	movs	r1, r5
1000d80a:	4b3f      	ldr	r3, [pc, #252]	; (1000d908 <ble_connected_state_handler+0x204>)
1000d80c:	4798      	blx	r3
						ble_device_count++;
1000d80e:	4a46      	ldr	r2, [pc, #280]	; (1000d928 <ble_connected_state_handler+0x224>)
1000d810:	7813      	ldrb	r3, [r2, #0]
1000d812:	3301      	adds	r3, #1
1000d814:	b2db      	uxtb	r3, r3
1000d816:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d818:	464b      	mov	r3, r9
1000d81a:	1b1b      	subs	r3, r3, r4
1000d81c:	009b      	lsls	r3, r3, #2
1000d81e:	4443      	add	r3, r8
1000d820:	335e      	adds	r3, #94	; 0x5e
1000d822:	2202      	movs	r2, #2
1000d824:	701a      	strb	r2, [r3, #0]
						break;
1000d826:	e005      	b.n	1000d834 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d828:	1c79      	adds	r1, r7, #1
1000d82a:	b2cf      	uxtb	r7, r1
1000d82c:	3301      	adds	r3, #1
1000d82e:	327c      	adds	r2, #124	; 0x7c
1000d830:	2f05      	cmp	r7, #5
1000d832:	d1da      	bne.n	1000d7ea <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d834:	2207      	movs	r2, #7
1000d836:	0029      	movs	r1, r5
1000d838:	4834      	ldr	r0, [pc, #208]	; (1000d90c <ble_connected_state_handler+0x208>)
1000d83a:	4b35      	ldr	r3, [pc, #212]	; (1000d910 <ble_connected_state_handler+0x20c>)
1000d83c:	4798      	blx	r3
1000d83e:	2800      	cmp	r0, #0
1000d840:	d10c      	bne.n	1000d85c <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d842:	017b      	lsls	r3, r7, #5
1000d844:	1bdb      	subs	r3, r3, r7
1000d846:	009b      	lsls	r3, r3, #2
1000d848:	4a36      	ldr	r2, [pc, #216]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d84a:	18d3      	adds	r3, r2, r3
1000d84c:	2205      	movs	r2, #5
1000d84e:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d850:	3202      	adds	r2, #2
1000d852:	2100      	movs	r1, #0
1000d854:	482d      	ldr	r0, [pc, #180]	; (1000d90c <ble_connected_state_handler+0x208>)
1000d856:	4b2f      	ldr	r3, [pc, #188]	; (1000d914 <ble_connected_state_handler+0x210>)
1000d858:	4798      	blx	r3
1000d85a:	e042      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d85c:	4b31      	ldr	r3, [pc, #196]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d85e:	4698      	mov	r8, r3
1000d860:	017c      	lsls	r4, r7, #5
1000d862:	1be3      	subs	r3, r4, r7
1000d864:	009b      	lsls	r3, r3, #2
1000d866:	4443      	add	r3, r8
1000d868:	220a      	movs	r2, #10
1000d86a:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d86c:	3a03      	subs	r2, #3
1000d86e:	2100      	movs	r1, #0
1000d870:	4826      	ldr	r0, [pc, #152]	; (1000d90c <ble_connected_state_handler+0x208>)
1000d872:	4b28      	ldr	r3, [pc, #160]	; (1000d914 <ble_connected_state_handler+0x210>)
1000d874:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d876:	1be4      	subs	r4, r4, r7
1000d878:	00a4      	lsls	r4, r4, #2
1000d87a:	4444      	add	r4, r8
1000d87c:	7ca3      	ldrb	r3, [r4, #18]
1000d87e:	2b0a      	cmp	r3, #10
1000d880:	d12f      	bne.n	1000d8e2 <ble_connected_state_handler+0x1de>
1000d882:	e00d      	b.n	1000d8a0 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d884:	481a      	ldr	r0, [pc, #104]	; (1000d8f0 <ble_connected_state_handler+0x1ec>)
1000d886:	4b1b      	ldr	r3, [pc, #108]	; (1000d8f4 <ble_connected_state_handler+0x1f0>)
1000d888:	4798      	blx	r3
1000d88a:	4b27      	ldr	r3, [pc, #156]	; (1000d928 <ble_connected_state_handler+0x224>)
1000d88c:	7819      	ldrb	r1, [r3, #0]
1000d88e:	b2c9      	uxtb	r1, r1
1000d890:	4826      	ldr	r0, [pc, #152]	; (1000d92c <ble_connected_state_handler+0x228>)
1000d892:	4b1a      	ldr	r3, [pc, #104]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d894:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d896:	8928      	ldrh	r0, [r5, #8]
1000d898:	2113      	movs	r1, #19
1000d89a:	4b25      	ldr	r3, [pc, #148]	; (1000d930 <ble_connected_state_handler+0x22c>)
1000d89c:	4798      	blx	r3
1000d89e:	e020      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d8a0:	8928      	ldrh	r0, [r5, #8]
1000d8a2:	4b24      	ldr	r3, [pc, #144]	; (1000d934 <ble_connected_state_handler+0x230>)
1000d8a4:	4798      	blx	r3
1000d8a6:	e01c      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d8a8:	4811      	ldr	r0, [pc, #68]	; (1000d8f0 <ble_connected_state_handler+0x1ec>)
1000d8aa:	4b12      	ldr	r3, [pc, #72]	; (1000d8f4 <ble_connected_state_handler+0x1f0>)
1000d8ac:	4798      	blx	r3
1000d8ae:	7aa9      	ldrb	r1, [r5, #10]
1000d8b0:	4821      	ldr	r0, [pc, #132]	; (1000d938 <ble_connected_state_handler+0x234>)
1000d8b2:	4b12      	ldr	r3, [pc, #72]	; (1000d8fc <ble_connected_state_handler+0x1f8>)
1000d8b4:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d8b6:	2600      	movs	r6, #0
1000d8b8:	e013      	b.n	1000d8e2 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d8ba:	4b1b      	ldr	r3, [pc, #108]	; (1000d928 <ble_connected_state_handler+0x224>)
1000d8bc:	781b      	ldrb	r3, [r3, #0]
1000d8be:	b2db      	uxtb	r3, r3
1000d8c0:	2b04      	cmp	r3, #4
1000d8c2:	d8df      	bhi.n	1000d884 <ble_connected_state_handler+0x180>
1000d8c4:	4b17      	ldr	r3, [pc, #92]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d8c6:	4699      	mov	r9, r3
1000d8c8:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d8ca:	4b11      	ldr	r3, [pc, #68]	; (1000d910 <ble_connected_state_handler+0x20c>)
1000d8cc:	469b      	mov	fp, r3
1000d8ce:	e773      	b.n	1000d7b8 <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d8d0:	235e      	movs	r3, #94	; 0x5e
1000d8d2:	4a14      	ldr	r2, [pc, #80]	; (1000d924 <ble_connected_state_handler+0x220>)
1000d8d4:	5cd3      	ldrb	r3, [r2, r3]
1000d8d6:	2b00      	cmp	r3, #0
1000d8d8:	d08c      	beq.n	1000d7f4 <ble_connected_state_handler+0xf0>
1000d8da:	4a18      	ldr	r2, [pc, #96]	; (1000d93c <ble_connected_state_handler+0x238>)
1000d8dc:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d8de:	2701      	movs	r7, #1
1000d8e0:	e783      	b.n	1000d7ea <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d8e2:	0030      	movs	r0, r6
1000d8e4:	b01a      	add	sp, #104	; 0x68
1000d8e6:	bc1c      	pop	{r2, r3, r4}
1000d8e8:	4690      	mov	r8, r2
1000d8ea:	4699      	mov	r9, r3
1000d8ec:	46a3      	mov	fp, r4
1000d8ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d8f0:	100174f0 	.word	0x100174f0
1000d8f4:	1001649d 	.word	0x1001649d
1000d8f8:	10018240 	.word	0x10018240
1000d8fc:	1001637d 	.word	0x1001637d
1000d900:	10018284 	.word	0x10018284
1000d904:	1001a784 	.word	0x1001a784
1000d908:	10016223 	.word	0x10016223
1000d90c:	10018fe4 	.word	0x10018fe4
1000d910:	10016205 	.word	0x10016205
1000d914:	10016235 	.word	0x10016235
1000d918:	1001a51e 	.word	0x1001a51e
1000d91c:	1000f7d1 	.word	0x1000f7d1
1000d920:	1001829c 	.word	0x1001829c
1000d924:	1001a4d8 	.word	0x1001a4d8
1000d928:	1001a744 	.word	0x1001a744
1000d92c:	100182c0 	.word	0x100182c0
1000d930:	1000f7a5 	.word	0x1000f7a5
1000d934:	1000d6d1 	.word	0x1000d6d1
1000d938:	100182fc 	.word	0x100182fc
1000d93c:	1001a5b2 	.word	0x1001a5b2

1000d940 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d940:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d942:	4647      	mov	r7, r8
1000d944:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d946:	7803      	ldrb	r3, [r0, #0]
1000d948:	2b00      	cmp	r3, #0
1000d94a:	d141      	bne.n	1000d9d0 <ble_resolv_rand_addr_handler+0x90>
1000d94c:	4d2f      	ldr	r5, [pc, #188]	; (1000da0c <ble_resolv_rand_addr_handler+0xcc>)
1000d94e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d950:	1c46      	adds	r6, r0, #1
1000d952:	4f2f      	ldr	r7, [pc, #188]	; (1000da10 <ble_resolv_rand_addr_handler+0xd0>)
1000d954:	2210      	movs	r2, #16
1000d956:	0029      	movs	r1, r5
1000d958:	0030      	movs	r0, r6
1000d95a:	47b8      	blx	r7
1000d95c:	2800      	cmp	r0, #0
1000d95e:	d03f      	beq.n	1000d9e0 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d960:	3401      	adds	r4, #1
1000d962:	b2e4      	uxtb	r4, r4
1000d964:	357c      	adds	r5, #124	; 0x7c
1000d966:	2c05      	cmp	r4, #5
1000d968:	d1f4      	bne.n	1000d954 <ble_resolv_rand_addr_handler+0x14>
1000d96a:	e031      	b.n	1000d9d0 <ble_resolv_rand_addr_handler+0x90>
1000d96c:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d96e:	001c      	movs	r4, r3
1000d970:	7811      	ldrb	r1, [r2, #0]
1000d972:	2900      	cmp	r1, #0
1000d974:	d122      	bne.n	1000d9bc <ble_resolv_rand_addr_handler+0x7c>
1000d976:	e001      	b.n	1000d97c <ble_resolv_rand_addr_handler+0x3c>
1000d978:	2400      	movs	r4, #0
1000d97a:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d97c:	4b25      	ldr	r3, [pc, #148]	; (1000da14 <ble_resolv_rand_addr_handler+0xd4>)
1000d97e:	4698      	mov	r8, r3
1000d980:	0166      	lsls	r6, r4, #5
1000d982:	1b37      	subs	r7, r6, r4
1000d984:	00bf      	lsls	r7, r7, #2
1000d986:	4447      	add	r7, r8
1000d988:	2212      	movs	r2, #18
1000d98a:	4923      	ldr	r1, [pc, #140]	; (1000da18 <ble_resolv_rand_addr_handler+0xd8>)
1000d98c:	0038      	movs	r0, r7
1000d98e:	4b23      	ldr	r3, [pc, #140]	; (1000da1c <ble_resolv_rand_addr_handler+0xdc>)
1000d990:	4798      	blx	r3
				ble_device_count++;
1000d992:	4a23      	ldr	r2, [pc, #140]	; (1000da20 <ble_resolv_rand_addr_handler+0xe0>)
1000d994:	7813      	ldrb	r3, [r2, #0]
1000d996:	3301      	adds	r3, #1
1000d998:	b2db      	uxtb	r3, r3
1000d99a:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d99c:	375e      	adds	r7, #94	; 0x5e
1000d99e:	2302      	movs	r3, #2
1000d9a0:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d9a2:	1b34      	subs	r4, r6, r4
1000d9a4:	00a4      	lsls	r4, r4, #2
1000d9a6:	4444      	add	r4, r8
1000d9a8:	3308      	adds	r3, #8
1000d9aa:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d9ac:	016b      	lsls	r3, r5, #5
1000d9ae:	1b5d      	subs	r5, r3, r5
1000d9b0:	00ad      	lsls	r5, r5, #2
1000d9b2:	4445      	add	r5, r8
1000d9b4:	7cab      	ldrb	r3, [r5, #18]
1000d9b6:	2b0a      	cmp	r3, #10
1000d9b8:	d123      	bne.n	1000da02 <ble_resolv_rand_addr_handler+0xc2>
1000d9ba:	e004      	b.n	1000d9c6 <ble_resolv_rand_addr_handler+0x86>
1000d9bc:	3301      	adds	r3, #1
1000d9be:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d9c0:	2b05      	cmp	r3, #5
1000d9c2:	d1d3      	bne.n	1000d96c <ble_resolv_rand_addr_handler+0x2c>
1000d9c4:	e01d      	b.n	1000da02 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d9c6:	4b14      	ldr	r3, [pc, #80]	; (1000da18 <ble_resolv_rand_addr_handler+0xd8>)
1000d9c8:	8918      	ldrh	r0, [r3, #8]
1000d9ca:	4b16      	ldr	r3, [pc, #88]	; (1000da24 <ble_resolv_rand_addr_handler+0xe4>)
1000d9cc:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000d9ce:	e018      	b.n	1000da02 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d9d0:	235e      	movs	r3, #94	; 0x5e
1000d9d2:	4a10      	ldr	r2, [pc, #64]	; (1000da14 <ble_resolv_rand_addr_handler+0xd4>)
1000d9d4:	5cd3      	ldrb	r3, [r2, r3]
1000d9d6:	2b00      	cmp	r3, #0
1000d9d8:	d0ce      	beq.n	1000d978 <ble_resolv_rand_addr_handler+0x38>
1000d9da:	4a13      	ldr	r2, [pc, #76]	; (1000da28 <ble_resolv_rand_addr_handler+0xe8>)
1000d9dc:	2301      	movs	r3, #1
1000d9de:	e7c5      	b.n	1000d96c <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d9e0:	480c      	ldr	r0, [pc, #48]	; (1000da14 <ble_resolv_rand_addr_handler+0xd4>)
1000d9e2:	0163      	lsls	r3, r4, #5
1000d9e4:	1b1a      	subs	r2, r3, r4
1000d9e6:	0092      	lsls	r2, r2, #2
1000d9e8:	1882      	adds	r2, r0, r2
1000d9ea:	0011      	movs	r1, r2
1000d9ec:	315e      	adds	r1, #94	; 0x5e
1000d9ee:	2502      	movs	r5, #2
1000d9f0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d9f2:	210a      	movs	r1, #10
1000d9f4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d9f6:	0010      	movs	r0, r2
1000d9f8:	2212      	movs	r2, #18
1000d9fa:	4907      	ldr	r1, [pc, #28]	; (1000da18 <ble_resolv_rand_addr_handler+0xd8>)
1000d9fc:	4b07      	ldr	r3, [pc, #28]	; (1000da1c <ble_resolv_rand_addr_handler+0xdc>)
1000d9fe:	4798      	blx	r3
1000da00:	e7e1      	b.n	1000d9c6 <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000da02:	2000      	movs	r0, #0
1000da04:	bc04      	pop	{r2}
1000da06:	4690      	mov	r8, r2
1000da08:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000da0a:	46c0      	nop			; (mov r8, r8)
1000da0c:	1001a51e 	.word	0x1001a51e
1000da10:	10016205 	.word	0x10016205
1000da14:	1001a4d8 	.word	0x1001a4d8
1000da18:	1001a784 	.word	0x1001a784
1000da1c:	10016223 	.word	0x10016223
1000da20:	1001a744 	.word	0x1001a744
1000da24:	1000d6d1 	.word	0x1000d6d1
1000da28:	1001a5b2 	.word	0x1001a5b2

1000da2c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000da2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000da2e:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000da30:	283b      	cmp	r0, #59	; 0x3b
1000da32:	d872      	bhi.n	1000db1a <ble_event_manager+0xee>
1000da34:	0083      	lsls	r3, r0, #2
1000da36:	4a3c      	ldr	r2, [pc, #240]	; (1000db28 <ble_event_manager+0xfc>)
1000da38:	58d3      	ldr	r3, [r2, r3]
1000da3a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da3c:	0084      	lsls	r4, r0, #2
1000da3e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000da40:	4f3a      	ldr	r7, [pc, #232]	; (1000db2c <ble_event_manager+0x100>)
1000da42:	59bb      	ldr	r3, [r7, r6]
1000da44:	2b00      	cmp	r3, #0
1000da46:	d004      	beq.n	1000da52 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da48:	591b      	ldr	r3, [r3, r4]
1000da4a:	2b00      	cmp	r3, #0
1000da4c:	d001      	beq.n	1000da52 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000da4e:	0028      	movs	r0, r5
1000da50:	4798      	blx	r3
1000da52:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000da54:	2e14      	cmp	r6, #20
1000da56:	d1f4      	bne.n	1000da42 <ble_event_manager+0x16>
1000da58:	e065      	b.n	1000db26 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da5a:	3813      	subs	r0, #19
1000da5c:	b2c4      	uxtb	r4, r0
1000da5e:	00a4      	lsls	r4, r4, #2
1000da60:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000da62:	4f33      	ldr	r7, [pc, #204]	; (1000db30 <ble_event_manager+0x104>)
1000da64:	59bb      	ldr	r3, [r7, r6]
1000da66:	2b00      	cmp	r3, #0
1000da68:	d004      	beq.n	1000da74 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da6a:	591b      	ldr	r3, [r3, r4]
1000da6c:	2b00      	cmp	r3, #0
1000da6e:	d001      	beq.n	1000da74 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000da70:	0028      	movs	r0, r5
1000da72:	4798      	blx	r3
1000da74:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000da76:	2e14      	cmp	r6, #20
1000da78:	d1f4      	bne.n	1000da64 <ble_event_manager+0x38>
1000da7a:	e054      	b.n	1000db26 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da7c:	381d      	subs	r0, #29
1000da7e:	b2c4      	uxtb	r4, r0
1000da80:	00a4      	lsls	r4, r4, #2
1000da82:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000da84:	4f2b      	ldr	r7, [pc, #172]	; (1000db34 <ble_event_manager+0x108>)
1000da86:	59bb      	ldr	r3, [r7, r6]
1000da88:	2b00      	cmp	r3, #0
1000da8a:	d004      	beq.n	1000da96 <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000da8c:	591b      	ldr	r3, [r3, r4]
1000da8e:	2b00      	cmp	r3, #0
1000da90:	d001      	beq.n	1000da96 <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000da92:	0028      	movs	r0, r5
1000da94:	4798      	blx	r3
1000da96:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000da98:	2e14      	cmp	r6, #20
1000da9a:	d1f4      	bne.n	1000da86 <ble_event_manager+0x5a>
1000da9c:	e043      	b.n	1000db26 <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000da9e:	3827      	subs	r0, #39	; 0x27
1000daa0:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000daa2:	4b25      	ldr	r3, [pc, #148]	; (1000db38 <ble_event_manager+0x10c>)
1000daa4:	681b      	ldr	r3, [r3, #0]
1000daa6:	2b00      	cmp	r3, #0
1000daa8:	d03d      	beq.n	1000db26 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000daaa:	0080      	lsls	r0, r0, #2
1000daac:	58c3      	ldr	r3, [r0, r3]
1000daae:	2b00      	cmp	r3, #0
1000dab0:	d039      	beq.n	1000db26 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000dab2:	0008      	movs	r0, r1
1000dab4:	4798      	blx	r3
1000dab6:	e036      	b.n	1000db26 <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000dab8:	382d      	subs	r0, #45	; 0x2d
1000daba:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000dabc:	4b1f      	ldr	r3, [pc, #124]	; (1000db3c <ble_event_manager+0x110>)
1000dabe:	681b      	ldr	r3, [r3, #0]
1000dac0:	2b00      	cmp	r3, #0
1000dac2:	d030      	beq.n	1000db26 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dac4:	0080      	lsls	r0, r0, #2
1000dac6:	58c3      	ldr	r3, [r0, r3]
1000dac8:	2b00      	cmp	r3, #0
1000daca:	d02c      	beq.n	1000db26 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000dacc:	0008      	movs	r0, r1
1000dace:	4798      	blx	r3
1000dad0:	e029      	b.n	1000db26 <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dad2:	3836      	subs	r0, #54	; 0x36
1000dad4:	b2c4      	uxtb	r4, r0
1000dad6:	00a4      	lsls	r4, r4, #2
1000dad8:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000dada:	4f19      	ldr	r7, [pc, #100]	; (1000db40 <ble_event_manager+0x114>)
1000dadc:	59bb      	ldr	r3, [r7, r6]
1000dade:	2b00      	cmp	r3, #0
1000dae0:	d004      	beq.n	1000daec <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000dae2:	591b      	ldr	r3, [r3, r4]
1000dae4:	2b00      	cmp	r3, #0
1000dae6:	d001      	beq.n	1000daec <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000dae8:	0028      	movs	r0, r5
1000daea:	4798      	blx	r3
1000daec:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000daee:	2e14      	cmp	r6, #20
1000daf0:	d1f4      	bne.n	1000dadc <ble_event_manager+0xb0>
1000daf2:	e018      	b.n	1000db26 <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000daf4:	3838      	subs	r0, #56	; 0x38
1000daf6:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000daf8:	4b12      	ldr	r3, [pc, #72]	; (1000db44 <ble_event_manager+0x118>)
1000dafa:	681b      	ldr	r3, [r3, #0]
1000dafc:	2b00      	cmp	r3, #0
1000dafe:	d012      	beq.n	1000db26 <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000db00:	0080      	lsls	r0, r0, #2
1000db02:	58c3      	ldr	r3, [r0, r3]
1000db04:	2b00      	cmp	r3, #0
1000db06:	d00e      	beq.n	1000db26 <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000db08:	0008      	movs	r0, r1
1000db0a:	4798      	blx	r3
1000db0c:	e00b      	b.n	1000db26 <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000db0e:	4b0e      	ldr	r3, [pc, #56]	; (1000db48 <ble_event_manager+0x11c>)
1000db10:	681b      	ldr	r3, [r3, #0]
1000db12:	2b00      	cmp	r3, #0
1000db14:	d007      	beq.n	1000db26 <ble_event_manager+0xfa>
			ble_user_event_cb();
1000db16:	4798      	blx	r3
1000db18:	e005      	b.n	1000db26 <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000db1a:	4d0c      	ldr	r5, [pc, #48]	; (1000db4c <ble_event_manager+0x120>)
1000db1c:	0028      	movs	r0, r5
1000db1e:	4c0c      	ldr	r4, [pc, #48]	; (1000db50 <ble_event_manager+0x124>)
1000db20:	47a0      	blx	r4
1000db22:	0028      	movs	r0, r5
1000db24:	47a0      	blx	r4
	}
	break;		
	}
}
1000db26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000db28:	10017bec 	.word	0x10017bec
1000db2c:	1001a75c 	.word	0x1001a75c
1000db30:	1001a770 	.word	0x1001a770
1000db34:	1001a4c4 	.word	0x1001a4c4
1000db38:	1001a7b8 	.word	0x1001a7b8
1000db3c:	1001a4c0 	.word	0x1001a4c0
1000db40:	1001a748 	.word	0x1001a748
1000db44:	1001acfc 	.word	0x1001acfc
1000db48:	10018fdc 	.word	0x10018fdc
1000db4c:	100174f0 	.word	0x100174f0
1000db50:	1001649d 	.word	0x1001649d

1000db54 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000db54:	b570      	push	{r4, r5, r6, lr}
1000db56:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000db58:	4b0d      	ldr	r3, [pc, #52]	; (1000db90 <ble_event_task+0x3c>)
1000db5a:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000db5c:	2b01      	cmp	r3, #1
1000db5e:	d101      	bne.n	1000db64 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000db60:	4b0c      	ldr	r3, [pc, #48]	; (1000db94 <ble_event_task+0x40>)
1000db62:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000db64:	0022      	movs	r2, r4
1000db66:	490c      	ldr	r1, [pc, #48]	; (1000db98 <ble_event_task+0x44>)
1000db68:	480c      	ldr	r0, [pc, #48]	; (1000db9c <ble_event_task+0x48>)
1000db6a:	4b0d      	ldr	r3, [pc, #52]	; (1000dba0 <ble_event_task+0x4c>)
1000db6c:	4798      	blx	r3
1000db6e:	0004      	movs	r4, r0
1000db70:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000db72:	4b07      	ldr	r3, [pc, #28]	; (1000db90 <ble_event_task+0x3c>)
1000db74:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000db76:	2b01      	cmp	r3, #1
1000db78:	d101      	bne.n	1000db7e <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000db7a:	4b0a      	ldr	r3, [pc, #40]	; (1000dba4 <ble_event_task+0x50>)
1000db7c:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000db7e:	2d00      	cmp	r5, #0
1000db80:	d104      	bne.n	1000db8c <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000db82:	4b06      	ldr	r3, [pc, #24]	; (1000db9c <ble_event_task+0x48>)
1000db84:	7818      	ldrb	r0, [r3, #0]
1000db86:	4904      	ldr	r1, [pc, #16]	; (1000db98 <ble_event_task+0x44>)
1000db88:	4b07      	ldr	r3, [pc, #28]	; (1000dba8 <ble_event_task+0x54>)
1000db8a:	4798      	blx	r3
    }
    
    return status;
}
1000db8c:	0020      	movs	r0, r4
1000db8e:	bd70      	pop	{r4, r5, r6, pc}
1000db90:	10018feb 	.word	0x10018feb
1000db94:	1000e549 	.word	0x1000e549
1000db98:	1001aaf0 	.word	0x1001aaf0
1000db9c:	1001a7b4 	.word	0x1001a7b4
1000dba0:	1000eb59 	.word	0x1000eb59
1000dba4:	1000e521 	.word	0x1000e521
1000dba8:	1000da2d 	.word	0x1000da2d

1000dbac <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000dbac:	b510      	push	{r4, lr}
1000dbae:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000dbb0:	ac08      	add	r4, sp, #32
1000dbb2:	2203      	movs	r2, #3
1000dbb4:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000dbb6:	2302      	movs	r3, #2
1000dbb8:	70a3      	strb	r3, [r4, #2]
1000dbba:	3316      	adds	r3, #22
1000dbbc:	70e3      	strb	r3, [r4, #3]
1000dbbe:	7122      	strb	r2, [r4, #4]
1000dbc0:	7163      	strb	r3, [r4, #5]
1000dbc2:	3201      	adds	r2, #1
1000dbc4:	71a2      	strb	r2, [r4, #6]
1000dbc6:	71e3      	strb	r3, [r4, #7]
1000dbc8:	320b      	adds	r2, #11
1000dbca:	7222      	strb	r2, [r4, #8]
1000dbcc:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000dbce:	3b0f      	subs	r3, #15
1000dbd0:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000dbd2:	3a05      	subs	r2, #5
1000dbd4:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000dbd6:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000dbd8:	aa0b      	add	r2, sp, #44	; 0x2c
1000dbda:	4b10      	ldr	r3, [pc, #64]	; (1000dc1c <ble_advertisement_data_set+0x70>)
1000dbdc:	cb03      	ldmia	r3!, {r0, r1}
1000dbde:	c203      	stmia	r2!, {r0, r1}
1000dbe0:	781b      	ldrb	r3, [r3, #0]
1000dbe2:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000dbe4:	2307      	movs	r3, #7
1000dbe6:	466a      	mov	r2, sp
1000dbe8:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000dbea:	33f8      	adds	r3, #248	; 0xf8
1000dbec:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000dbee:	2206      	movs	r2, #6
1000dbf0:	490b      	ldr	r1, [pc, #44]	; (1000dc20 <ble_advertisement_data_set+0x74>)
1000dbf2:	466b      	mov	r3, sp
1000dbf4:	1c98      	adds	r0, r3, #2
1000dbf6:	4b0b      	ldr	r3, [pc, #44]	; (1000dc24 <ble_advertisement_data_set+0x78>)
1000dbf8:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000dbfa:	2308      	movs	r3, #8
1000dbfc:	466a      	mov	r2, sp
1000dbfe:	2115      	movs	r1, #21
1000dc00:	0020      	movs	r0, r4
1000dc02:	4c09      	ldr	r4, [pc, #36]	; (1000dc28 <ble_advertisement_data_set+0x7c>)
1000dc04:	47a0      	blx	r4
1000dc06:	2800      	cmp	r0, #0
1000dc08:	d005      	beq.n	1000dc16 <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000dc0a:	4808      	ldr	r0, [pc, #32]	; (1000dc2c <ble_advertisement_data_set+0x80>)
1000dc0c:	4b08      	ldr	r3, [pc, #32]	; (1000dc30 <ble_advertisement_data_set+0x84>)
1000dc0e:	4798      	blx	r3
1000dc10:	4808      	ldr	r0, [pc, #32]	; (1000dc34 <ble_advertisement_data_set+0x88>)
1000dc12:	4b09      	ldr	r3, [pc, #36]	; (1000dc38 <ble_advertisement_data_set+0x8c>)
1000dc14:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000dc16:	2000      	movs	r0, #0
1000dc18:	b010      	add	sp, #64	; 0x40
1000dc1a:	bd10      	pop	{r4, pc}
1000dc1c:	10018144 	.word	0x10018144
1000dc20:	10018324 	.word	0x10018324
1000dc24:	10016223 	.word	0x10016223
1000dc28:	1000f5b9 	.word	0x1000f5b9
1000dc2c:	100174f0 	.word	0x100174f0
1000dc30:	1001649d 	.word	0x1001649d
1000dc34:	1001832c 	.word	0x1001832c
1000dc38:	1001637d 	.word	0x1001637d

1000dc3c <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000dc3c:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000dc3e:	4b0e      	ldr	r3, [pc, #56]	; (1000dc78 <uart_read_complete_callback+0x3c>)
1000dc40:	781b      	ldrb	r3, [r3, #0]
1000dc42:	2b01      	cmp	r3, #1
1000dc44:	d10b      	bne.n	1000dc5e <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000dc46:	2202      	movs	r2, #2
1000dc48:	4b0b      	ldr	r3, [pc, #44]	; (1000dc78 <uart_read_complete_callback+0x3c>)
1000dc4a:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000dc4c:	4b0b      	ldr	r3, [pc, #44]	; (1000dc7c <uart_read_complete_callback+0x40>)
1000dc4e:	681b      	ldr	r3, [r3, #0]
1000dc50:	2b00      	cmp	r3, #0
1000dc52:	d110      	bne.n	1000dc76 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000dc54:	2102      	movs	r1, #2
1000dc56:	480a      	ldr	r0, [pc, #40]	; (1000dc80 <uart_read_complete_callback+0x44>)
1000dc58:	4b0a      	ldr	r3, [pc, #40]	; (1000dc84 <uart_read_complete_callback+0x48>)
1000dc5a:	4798      	blx	r3
1000dc5c:	e00b      	b.n	1000dc76 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000dc5e:	4b07      	ldr	r3, [pc, #28]	; (1000dc7c <uart_read_complete_callback+0x40>)
1000dc60:	681b      	ldr	r3, [r3, #0]
1000dc62:	2b00      	cmp	r3, #0
1000dc64:	d007      	beq.n	1000dc76 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000dc66:	4c08      	ldr	r4, [pc, #32]	; (1000dc88 <uart_read_complete_callback+0x4c>)
1000dc68:	7820      	ldrb	r0, [r4, #0]
1000dc6a:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000dc6c:	2201      	movs	r2, #1
1000dc6e:	0021      	movs	r1, r4
1000dc70:	4803      	ldr	r0, [pc, #12]	; (1000dc80 <uart_read_complete_callback+0x44>)
1000dc72:	4b06      	ldr	r3, [pc, #24]	; (1000dc8c <uart_read_complete_callback+0x50>)
1000dc74:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000dc76:	bd10      	pop	{r4, pc}
1000dc78:	10019ff0 	.word	0x10019ff0
1000dc7c:	10019ff8 	.word	0x10019ff8
1000dc80:	1001ad00 	.word	0x1001ad00
1000dc84:	1000c9c5 	.word	0x1000c9c5
1000dc88:	10019ff4 	.word	0x10019ff4
1000dc8c:	1000c969 	.word	0x1000c969

1000dc90 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000dc90:	b570      	push	{r4, r5, r6, lr}
1000dc92:	0006      	movs	r6, r0
1000dc94:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000dc96:	4c03      	ldr	r4, [pc, #12]	; (1000dca4 <usart_serial_getchar+0x14>)
1000dc98:	0029      	movs	r1, r5
1000dc9a:	0030      	movs	r0, r6
1000dc9c:	47a0      	blx	r4
1000dc9e:	2800      	cmp	r0, #0
1000dca0:	d1fa      	bne.n	1000dc98 <usart_serial_getchar+0x8>
}
1000dca2:	bd70      	pop	{r4, r5, r6, pc}
1000dca4:	1000c955 	.word	0x1000c955

1000dca8 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000dca8:	b570      	push	{r4, r5, r6, lr}
1000dcaa:	0006      	movs	r6, r0
1000dcac:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000dcae:	4c03      	ldr	r4, [pc, #12]	; (1000dcbc <usart_serial_putchar+0x14>)
1000dcb0:	0029      	movs	r1, r5
1000dcb2:	0030      	movs	r0, r6
1000dcb4:	47a0      	blx	r4
1000dcb6:	2800      	cmp	r0, #0
1000dcb8:	d1fa      	bne.n	1000dcb0 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000dcba:	bd70      	pop	{r4, r5, r6, pc}
1000dcbc:	1000c945 	.word	0x1000c945

1000dcc0 <serial_console_init>:

void serial_console_init(void)
{
1000dcc0:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000dcc2:	2100      	movs	r1, #0
1000dcc4:	2000      	movs	r0, #0
1000dcc6:	4b19      	ldr	r3, [pc, #100]	; (1000dd2c <serial_console_init+0x6c>)
1000dcc8:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000dcca:	4c19      	ldr	r4, [pc, #100]	; (1000dd30 <serial_console_init+0x70>)
1000dccc:	0020      	movs	r0, r4
1000dcce:	4b19      	ldr	r3, [pc, #100]	; (1000dd34 <serial_console_init+0x74>)
1000dcd0:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000dcd2:	23e1      	movs	r3, #225	; 0xe1
1000dcd4:	025b      	lsls	r3, r3, #9
1000dcd6:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000dcd8:	2302      	movs	r3, #2
1000dcda:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000dcdc:	2203      	movs	r2, #3
1000dcde:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000dce0:	3201      	adds	r2, #1
1000dce2:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000dce4:	3201      	adds	r2, #1
1000dce6:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000dce8:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000dcea:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000dcec:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000dcee:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000dcf0:	4d11      	ldr	r5, [pc, #68]	; (1000dd38 <serial_console_init+0x78>)
1000dcf2:	4b12      	ldr	r3, [pc, #72]	; (1000dd3c <serial_console_init+0x7c>)
1000dcf4:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000dcf6:	4a12      	ldr	r2, [pc, #72]	; (1000dd40 <serial_console_init+0x80>)
1000dcf8:	4b12      	ldr	r3, [pc, #72]	; (1000dd44 <serial_console_init+0x84>)
1000dcfa:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000dcfc:	4a12      	ldr	r2, [pc, #72]	; (1000dd48 <serial_console_init+0x88>)
1000dcfe:	4b13      	ldr	r3, [pc, #76]	; (1000dd4c <serial_console_init+0x8c>)
1000dd00:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000dd02:	0022      	movs	r2, r4
1000dd04:	4912      	ldr	r1, [pc, #72]	; (1000dd50 <serial_console_init+0x90>)
1000dd06:	0028      	movs	r0, r5
1000dd08:	4b12      	ldr	r3, [pc, #72]	; (1000dd54 <serial_console_init+0x94>)
1000dd0a:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000dd0c:	4e12      	ldr	r6, [pc, #72]	; (1000dd58 <serial_console_init+0x98>)
1000dd0e:	6833      	ldr	r3, [r6, #0]
1000dd10:	6898      	ldr	r0, [r3, #8]
1000dd12:	2100      	movs	r1, #0
1000dd14:	4c11      	ldr	r4, [pc, #68]	; (1000dd5c <serial_console_init+0x9c>)
1000dd16:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000dd18:	6833      	ldr	r3, [r6, #0]
1000dd1a:	6858      	ldr	r0, [r3, #4]
1000dd1c:	2100      	movs	r1, #0
1000dd1e:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000dd20:	2202      	movs	r2, #2
1000dd22:	490f      	ldr	r1, [pc, #60]	; (1000dd60 <serial_console_init+0xa0>)
1000dd24:	0028      	movs	r0, r5
1000dd26:	4b0f      	ldr	r3, [pc, #60]	; (1000dd64 <serial_console_init+0xa4>)
1000dd28:	4798      	blx	r3
}
1000dd2a:	bd70      	pop	{r4, r5, r6, pc}
1000dd2c:	1000b965 	.word	0x1000b965
1000dd30:	1001ad24 	.word	0x1001ad24
1000dd34:	1000c75d 	.word	0x1000c75d
1000dd38:	1001ad00 	.word	0x1001ad00
1000dd3c:	1001a4bc 	.word	0x1001a4bc
1000dd40:	1000dca9 	.word	0x1000dca9
1000dd44:	1001a4b8 	.word	0x1001a4b8
1000dd48:	1000dc91 	.word	0x1000dc91
1000dd4c:	1001a4b4 	.word	0x1001a4b4
1000dd50:	40004000 	.word	0x40004000
1000dd54:	1000c789 	.word	0x1000c789
1000dd58:	100186c8 	.word	0x100186c8
1000dd5c:	1001654d 	.word	0x1001654d
1000dd60:	1000dc3d 	.word	0x1000dc3d
1000dd64:	1000c991 	.word	0x1000c991

1000dd68 <_time_start>:

void _time_start(unsigned int sec)
{
1000dd68:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dd6a:	b083      	sub	sp, #12
1000dd6c:	0005      	movs	r5, r0
	system_clock_get_value();
1000dd6e:	4c0d      	ldr	r4, [pc, #52]	; (1000dda4 <_time_start+0x3c>)
1000dd70:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000dd72:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000dd74:	4f0c      	ldr	r7, [pc, #48]	; (1000dda8 <_time_start+0x40>)
1000dd76:	47b8      	blx	r7
1000dd78:	4e0c      	ldr	r6, [pc, #48]	; (1000ddac <_time_start+0x44>)
1000dd7a:	4a0d      	ldr	r2, [pc, #52]	; (1000ddb0 <_time_start+0x48>)
1000dd7c:	4b0d      	ldr	r3, [pc, #52]	; (1000ddb4 <_time_start+0x4c>)
1000dd7e:	47b0      	blx	r6
1000dd80:	9000      	str	r0, [sp, #0]
1000dd82:	9101      	str	r1, [sp, #4]
1000dd84:	20fa      	movs	r0, #250	; 0xfa
1000dd86:	0080      	lsls	r0, r0, #2
1000dd88:	4368      	muls	r0, r5
1000dd8a:	47b8      	blx	r7
1000dd8c:	0002      	movs	r2, r0
1000dd8e:	000b      	movs	r3, r1
1000dd90:	9800      	ldr	r0, [sp, #0]
1000dd92:	9901      	ldr	r1, [sp, #4]
1000dd94:	47b0      	blx	r6
1000dd96:	4b08      	ldr	r3, [pc, #32]	; (1000ddb8 <_time_start+0x50>)
1000dd98:	4798      	blx	r3
1000dd9a:	4b08      	ldr	r3, [pc, #32]	; (1000ddbc <_time_start+0x54>)
1000dd9c:	6018      	str	r0, [r3, #0]
}
1000dd9e:	b003      	add	sp, #12
1000dda0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dda2:	46c0      	nop			; (mov r8, r8)
1000dda4:	1000b9e9 	.word	0x1000b9e9
1000dda8:	10015f2d 	.word	0x10015f2d
1000ddac:	10015261 	.word	0x10015261
1000ddb0:	19feaec7 	.word	0x19feaec7
1000ddb4:	3f09d8ef 	.word	0x3f09d8ef
1000ddb8:	10013651 	.word	0x10013651
1000ddbc:	10019fec 	.word	0x10019fec

1000ddc0 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ddc0:	4b02      	ldr	r3, [pc, #8]	; (1000ddcc <_time_done+0xc>)
1000ddc2:	681a      	ldr	r2, [r3, #0]
1000ddc4:	1e50      	subs	r0, r2, #1
1000ddc6:	6018      	str	r0, [r3, #0]
}
1000ddc8:	4770      	bx	lr
1000ddca:	46c0      	nop			; (mov r8, r8)
1000ddcc:	10019fec 	.word	0x10019fec

1000ddd0 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ddd0:	b570      	push	{r4, r5, r6, lr}
1000ddd2:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ddd4:	2201      	movs	r2, #1
1000ddd6:	4b11      	ldr	r3, [pc, #68]	; (1000de1c <getchar_b11_timeout+0x4c>)
1000ddd8:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ddda:	4b11      	ldr	r3, [pc, #68]	; (1000de20 <getchar_b11_timeout+0x50>)
1000dddc:	681b      	ldr	r3, [r3, #0]
1000ddde:	2b00      	cmp	r3, #0
1000dde0:	d103      	bne.n	1000ddea <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000dde2:	2102      	movs	r1, #2
1000dde4:	480f      	ldr	r0, [pc, #60]	; (1000de24 <getchar_b11_timeout+0x54>)
1000dde6:	4b10      	ldr	r3, [pc, #64]	; (1000de28 <getchar_b11_timeout+0x58>)
1000dde8:	4798      	blx	r3

	_time_start(sec);
1000ddea:	0020      	movs	r0, r4
1000ddec:	4b0f      	ldr	r3, [pc, #60]	; (1000de2c <getchar_b11_timeout+0x5c>)
1000ddee:	4798      	blx	r3
	
	string_input[0] = 0;
1000ddf0:	490f      	ldr	r1, [pc, #60]	; (1000de30 <getchar_b11_timeout+0x60>)
1000ddf2:	2300      	movs	r3, #0
1000ddf4:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ddf6:	2201      	movs	r2, #1
1000ddf8:	480a      	ldr	r0, [pc, #40]	; (1000de24 <getchar_b11_timeout+0x54>)
1000ddfa:	4b0e      	ldr	r3, [pc, #56]	; (1000de34 <getchar_b11_timeout+0x64>)
1000ddfc:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ddfe:	4c07      	ldr	r4, [pc, #28]	; (1000de1c <getchar_b11_timeout+0x4c>)
1000de00:	4d0d      	ldr	r5, [pc, #52]	; (1000de38 <getchar_b11_timeout+0x68>)
1000de02:	7823      	ldrb	r3, [r4, #0]
1000de04:	2b02      	cmp	r3, #2
1000de06:	d002      	beq.n	1000de0e <getchar_b11_timeout+0x3e>
1000de08:	47a8      	blx	r5
1000de0a:	2800      	cmp	r0, #0
1000de0c:	d1f9      	bne.n	1000de02 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000de0e:	2200      	movs	r2, #0
1000de10:	4b02      	ldr	r3, [pc, #8]	; (1000de1c <getchar_b11_timeout+0x4c>)
1000de12:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000de14:	4b06      	ldr	r3, [pc, #24]	; (1000de30 <getchar_b11_timeout+0x60>)
1000de16:	7818      	ldrb	r0, [r3, #0]
}
1000de18:	bd70      	pop	{r4, r5, r6, pc}
1000de1a:	46c0      	nop			; (mov r8, r8)
1000de1c:	10019ff0 	.word	0x10019ff0
1000de20:	10019ff8 	.word	0x10019ff8
1000de24:	1001ad00 	.word	0x1001ad00
1000de28:	1000c9a5 	.word	0x1000c9a5
1000de2c:	1000dd69 	.word	0x1000dd69
1000de30:	10019ff4 	.word	0x10019ff4
1000de34:	1000c969 	.word	0x1000c969
1000de38:	1000ddc1 	.word	0x1000ddc1

1000de3c <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000de3c:	4b02      	ldr	r3, [pc, #8]	; (1000de48 <platform_event_free+0xc>)
1000de3e:	681a      	ldr	r2, [r3, #0]
1000de40:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000de42:	6018      	str	r0, [r3, #0]
}
1000de44:	4770      	bx	lr
1000de46:	46c0      	nop			; (mov r8, r8)
1000de48:	1001a000 	.word	0x1001a000

1000de4c <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000de4c:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000de4e:	4b0b      	ldr	r3, [pc, #44]	; (1000de7c <platform_event_post+0x30>)
1000de50:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000de52:	2c00      	cmp	r4, #0
1000de54:	d011      	beq.n	1000de7a <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000de56:	6825      	ldr	r5, [r4, #0]
1000de58:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000de5a:	2300      	movs	r3, #0
1000de5c:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000de5e:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000de60:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000de62:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000de64:	4b06      	ldr	r3, [pc, #24]	; (1000de80 <platform_event_post+0x34>)
1000de66:	681a      	ldr	r2, [r3, #0]
1000de68:	2a00      	cmp	r2, #0
1000de6a:	d102      	bne.n	1000de72 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000de6c:	601c      	str	r4, [r3, #0]
1000de6e:	e004      	b.n	1000de7a <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000de70:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000de72:	6813      	ldr	r3, [r2, #0]
1000de74:	2b00      	cmp	r3, #0
1000de76:	d1fb      	bne.n	1000de70 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000de78:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000de7a:	bd30      	pop	{r4, r5, pc}
1000de7c:	1001a000 	.word	0x1001a000
1000de80:	10019ffc 	.word	0x10019ffc

1000de84 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000de84:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000de86:	2300      	movs	r3, #0
1000de88:	4a06      	ldr	r2, [pc, #24]	; (1000dea4 <platform_event_init+0x20>)
1000de8a:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000de8c:	4a06      	ldr	r2, [pc, #24]	; (1000dea8 <platform_event_init+0x24>)
1000de8e:	6013      	str	r3, [r2, #0]
1000de90:	4c06      	ldr	r4, [pc, #24]	; (1000deac <platform_event_init+0x28>)
1000de92:	0026      	movs	r6, r4
1000de94:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000de96:	4d06      	ldr	r5, [pc, #24]	; (1000deb0 <platform_event_init+0x2c>)
1000de98:	0020      	movs	r0, r4
1000de9a:	47a8      	blx	r5
1000de9c:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000de9e:	42b4      	cmp	r4, r6
1000dea0:	d1fa      	bne.n	1000de98 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000dea2:	bd70      	pop	{r4, r5, r6, pc}
1000dea4:	1001a000 	.word	0x1001a000
1000dea8:	10019ffc 	.word	0x10019ffc
1000deac:	1001a004 	.word	0x1001a004
1000deb0:	1000de3d 	.word	0x1000de3d

1000deb4 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000deb4:	b570      	push	{r4, r5, r6, lr}
1000deb6:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000deb8:	4b13      	ldr	r3, [pc, #76]	; (1000df08 <at_ke_msg_send+0x54>)
1000deba:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000debc:	4b13      	ldr	r3, [pc, #76]	; (1000df0c <at_ke_msg_send+0x58>)
1000debe:	681b      	ldr	r3, [r3, #0]
1000dec0:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000dec2:	2c0c      	cmp	r4, #12
1000dec4:	d01f      	beq.n	1000df06 <at_ke_msg_send+0x52>
1000dec6:	3c0c      	subs	r4, #12
1000dec8:	88e3      	ldrh	r3, [r4, #6]
1000deca:	2b05      	cmp	r3, #5
1000decc:	d01b      	beq.n	1000df06 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000dece:	07eb      	lsls	r3, r5, #31
1000ded0:	d414      	bmi.n	1000defc <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000ded2:	4b0f      	ldr	r3, [pc, #60]	; (1000df10 <at_ke_msg_send+0x5c>)
1000ded4:	681b      	ldr	r3, [r3, #0]
1000ded6:	2002      	movs	r0, #2
1000ded8:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000deda:	4b0e      	ldr	r3, [pc, #56]	; (1000df14 <at_ke_msg_send+0x60>)
1000dedc:	681b      	ldr	r3, [r3, #0]
1000dede:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000dee0:	4c0d      	ldr	r4, [pc, #52]	; (1000df18 <at_ke_msg_send+0x64>)
1000dee2:	2003      	movs	r0, #3
1000dee4:	6823      	ldr	r3, [r4, #0]
1000dee6:	4798      	blx	r3
1000dee8:	2800      	cmp	r0, #0
1000deea:	d1fa      	bne.n	1000dee2 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000deec:	4b0b      	ldr	r3, [pc, #44]	; (1000df1c <at_ke_msg_send+0x68>)
1000deee:	681b      	ldr	r3, [r3, #0]
1000def0:	3002      	adds	r0, #2
1000def2:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000def4:	2201      	movs	r2, #1
1000def6:	4b0a      	ldr	r3, [pc, #40]	; (1000df20 <at_ke_msg_send+0x6c>)
1000def8:	601a      	str	r2, [r3, #0]
1000defa:	e004      	b.n	1000df06 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000defc:	4b09      	ldr	r3, [pc, #36]	; (1000df24 <at_ke_msg_send+0x70>)
1000defe:	6818      	ldr	r0, [r3, #0]
1000df00:	4b09      	ldr	r3, [pc, #36]	; (1000df28 <at_ke_msg_send+0x74>)
1000df02:	681b      	ldr	r3, [r3, #0]
1000df04:	4798      	blx	r3
		}
	}
}
1000df06:	bd70      	pop	{r4, r5, r6, pc}
1000df08:	4000b1ec 	.word	0x4000b1ec
1000df0c:	1001a0ac 	.word	0x1001a0ac
1000df10:	1001a0a4 	.word	0x1001a0a4
1000df14:	1001a0b8 	.word	0x1001a0b8
1000df18:	1001a08c 	.word	0x1001a08c
1000df1c:	1001a094 	.word	0x1001a094
1000df20:	4000b020 	.word	0x4000b020
1000df24:	1001a098 	.word	0x1001a098
1000df28:	1001a088 	.word	0x1001a088

1000df2c <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000df2c:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000df2e:	4b06      	ldr	r3, [pc, #24]	; (1000df48 <samb11_plf_resume_callback+0x1c>)
1000df30:	4a06      	ldr	r2, [pc, #24]	; (1000df4c <samb11_plf_resume_callback+0x20>)
1000df32:	6819      	ldr	r1, [r3, #0]
1000df34:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000df36:	685a      	ldr	r2, [r3, #4]
1000df38:	4b05      	ldr	r3, [pc, #20]	; (1000df50 <samb11_plf_resume_callback+0x24>)
1000df3a:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000df3c:	4b05      	ldr	r3, [pc, #20]	; (1000df54 <samb11_plf_resume_callback+0x28>)
1000df3e:	681b      	ldr	r3, [r3, #0]
1000df40:	2b00      	cmp	r3, #0
1000df42:	d000      	beq.n	1000df46 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000df44:	4798      	blx	r3
	}
}
1000df46:	bd10      	pop	{r4, pc}
1000df48:	1001ad4c 	.word	0x1001ad4c
1000df4c:	4000b00c 	.word	0x4000b00c
1000df50:	4000b010 	.word	0x4000b010
1000df54:	1001b028 	.word	0x1001b028

1000df58 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000df58:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000df5a:	2232      	movs	r2, #50	; 0x32
1000df5c:	2100      	movs	r1, #0
1000df5e:	480d      	ldr	r0, [pc, #52]	; (1000df94 <init_port_list+0x3c>)
1000df60:	4b0d      	ldr	r3, [pc, #52]	; (1000df98 <init_port_list+0x40>)
1000df62:	4798      	blx	r3
1000df64:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000df66:	480b      	ldr	r0, [pc, #44]	; (1000df94 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000df68:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000df6a:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000df6c:	004a      	lsls	r2, r1, #1
1000df6e:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000df70:	1882      	adds	r2, r0, r2
1000df72:	7853      	ldrb	r3, [r2, #1]
1000df74:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000df76:	b2db      	uxtb	r3, r3
1000df78:	43a3      	bics	r3, r4
1000df7a:	7053      	strb	r3, [r2, #1]
1000df7c:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000df7e:	2919      	cmp	r1, #25
1000df80:	d1f4      	bne.n	1000df6c <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000df82:	4b04      	ldr	r3, [pc, #16]	; (1000df94 <init_port_list+0x3c>)
1000df84:	785a      	ldrb	r2, [r3, #1]
1000df86:	3918      	subs	r1, #24
1000df88:	438a      	bics	r2, r1
1000df8a:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000df8c:	78da      	ldrb	r2, [r3, #3]
1000df8e:	438a      	bics	r2, r1
1000df90:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000df92:	bd70      	pop	{r4, r5, r6, pc}
1000df94:	1001ad68 	.word	0x1001ad68
1000df98:	10016235 	.word	0x10016235

1000df9c <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000df9c:	4a06      	ldr	r2, [pc, #24]	; (1000dfb8 <init_clock+0x1c>)
1000df9e:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000dfa0:	4b06      	ldr	r3, [pc, #24]	; (1000dfbc <init_clock+0x20>)
1000dfa2:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000dfa4:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000dfa6:	4a06      	ldr	r2, [pc, #24]	; (1000dfc0 <init_clock+0x24>)
1000dfa8:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000dfaa:	4906      	ldr	r1, [pc, #24]	; (1000dfc4 <init_clock+0x28>)
1000dfac:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000dfae:	4b06      	ldr	r3, [pc, #24]	; (1000dfc8 <init_clock+0x2c>)
1000dfb0:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000dfb2:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000dfb4:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000dfb6:	4770      	bx	lr
1000dfb8:	4000b00c 	.word	0x4000b00c
1000dfbc:	fffe0fd3 	.word	0xfffe0fd3
1000dfc0:	1001ad4c 	.word	0x1001ad4c
1000dfc4:	4000b010 	.word	0x4000b010
1000dfc8:	ffffe7c0 	.word	0xffffe7c0

1000dfcc <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000dfcc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dfce:	4657      	mov	r7, sl
1000dfd0:	464e      	mov	r6, r9
1000dfd2:	4645      	mov	r5, r8
1000dfd4:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000dfd6:	4b4f      	ldr	r3, [pc, #316]	; (1000e114 <platform_driver_init+0x148>)
1000dfd8:	781b      	ldrb	r3, [r3, #0]
1000dfda:	2b00      	cmp	r3, #0
1000dfdc:	d004      	beq.n	1000dfe8 <platform_driver_init+0x1c>
1000dfde:	4b4d      	ldr	r3, [pc, #308]	; (1000e114 <platform_driver_init+0x148>)
1000dfe0:	781b      	ldrb	r3, [r3, #0]
1000dfe2:	2b01      	cmp	r3, #1
1000dfe4:	d100      	bne.n	1000dfe8 <platform_driver_init+0x1c>
1000dfe6:	e08c      	b.n	1000e102 <platform_driver_init+0x136>
		init_port_list();
1000dfe8:	4b4b      	ldr	r3, [pc, #300]	; (1000e118 <platform_driver_init+0x14c>)
1000dfea:	4798      	blx	r3
		init_clock();
1000dfec:	4b4b      	ldr	r3, [pc, #300]	; (1000e11c <platform_driver_init+0x150>)
1000dfee:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000dff0:	2300      	movs	r3, #0
1000dff2:	4698      	mov	r8, r3
1000dff4:	4b4a      	ldr	r3, [pc, #296]	; (1000e120 <platform_driver_init+0x154>)
1000dff6:	4642      	mov	r2, r8
1000dff8:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000dffa:	4c4a      	ldr	r4, [pc, #296]	; (1000e124 <platform_driver_init+0x158>)
1000dffc:	2380      	movs	r3, #128	; 0x80
1000dffe:	2280      	movs	r2, #128	; 0x80
1000e000:	0412      	lsls	r2, r2, #16
1000e002:	4692      	mov	sl, r2
1000e004:	50e2      	str	r2, [r4, r3]
1000e006:	2280      	movs	r2, #128	; 0x80
1000e008:	0452      	lsls	r2, r2, #17
1000e00a:	4691      	mov	r9, r2
1000e00c:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000e00e:	4d46      	ldr	r5, [pc, #280]	; (1000e128 <platform_driver_init+0x15c>)
1000e010:	4b46      	ldr	r3, [pc, #280]	; (1000e12c <platform_driver_init+0x160>)
1000e012:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000e014:	4b46      	ldr	r3, [pc, #280]	; (1000e130 <platform_driver_init+0x164>)
1000e016:	4a47      	ldr	r2, [pc, #284]	; (1000e134 <platform_driver_init+0x168>)
1000e018:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000e01a:	4947      	ldr	r1, [pc, #284]	; (1000e138 <platform_driver_init+0x16c>)
1000e01c:	4a47      	ldr	r2, [pc, #284]	; (1000e13c <platform_driver_init+0x170>)
1000e01e:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000e020:	4a47      	ldr	r2, [pc, #284]	; (1000e140 <platform_driver_init+0x174>)
1000e022:	6811      	ldr	r1, [r2, #0]
1000e024:	4a47      	ldr	r2, [pc, #284]	; (1000e144 <platform_driver_init+0x178>)
1000e026:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000e028:	4a47      	ldr	r2, [pc, #284]	; (1000e148 <platform_driver_init+0x17c>)
1000e02a:	6811      	ldr	r1, [r2, #0]
1000e02c:	4a47      	ldr	r2, [pc, #284]	; (1000e14c <platform_driver_init+0x180>)
1000e02e:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000e030:	4947      	ldr	r1, [pc, #284]	; (1000e150 <platform_driver_init+0x184>)
1000e032:	4a48      	ldr	r2, [pc, #288]	; (1000e154 <platform_driver_init+0x188>)
1000e034:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000e036:	4948      	ldr	r1, [pc, #288]	; (1000e158 <platform_driver_init+0x18c>)
1000e038:	4a48      	ldr	r2, [pc, #288]	; (1000e15c <platform_driver_init+0x190>)
1000e03a:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000e03c:	4f48      	ldr	r7, [pc, #288]	; (1000e160 <platform_driver_init+0x194>)
1000e03e:	4a49      	ldr	r2, [pc, #292]	; (1000e164 <platform_driver_init+0x198>)
1000e040:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000e042:	4949      	ldr	r1, [pc, #292]	; (1000e168 <platform_driver_init+0x19c>)
1000e044:	4a49      	ldr	r2, [pc, #292]	; (1000e16c <platform_driver_init+0x1a0>)
1000e046:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000e048:	4949      	ldr	r1, [pc, #292]	; (1000e170 <platform_driver_init+0x1a4>)
1000e04a:	4a4a      	ldr	r2, [pc, #296]	; (1000e174 <platform_driver_init+0x1a8>)
1000e04c:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000e04e:	4e4a      	ldr	r6, [pc, #296]	; (1000e178 <platform_driver_init+0x1ac>)
1000e050:	4a4a      	ldr	r2, [pc, #296]	; (1000e17c <platform_driver_init+0x1b0>)
1000e052:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000e054:	494a      	ldr	r1, [pc, #296]	; (1000e180 <platform_driver_init+0x1b4>)
1000e056:	4a4b      	ldr	r2, [pc, #300]	; (1000e184 <platform_driver_init+0x1b8>)
1000e058:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000e05a:	494b      	ldr	r1, [pc, #300]	; (1000e188 <platform_driver_init+0x1bc>)
1000e05c:	4a4b      	ldr	r2, [pc, #300]	; (1000e18c <platform_driver_init+0x1c0>)
1000e05e:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000e060:	494b      	ldr	r1, [pc, #300]	; (1000e190 <platform_driver_init+0x1c4>)
1000e062:	4a4c      	ldr	r2, [pc, #304]	; (1000e194 <platform_driver_init+0x1c8>)
1000e064:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000e066:	494c      	ldr	r1, [pc, #304]	; (1000e198 <platform_driver_init+0x1cc>)
1000e068:	4a4c      	ldr	r2, [pc, #304]	; (1000e19c <platform_driver_init+0x1d0>)
1000e06a:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000e06c:	494c      	ldr	r1, [pc, #304]	; (1000e1a0 <platform_driver_init+0x1d4>)
1000e06e:	4a4d      	ldr	r2, [pc, #308]	; (1000e1a4 <platform_driver_init+0x1d8>)
1000e070:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000e072:	2028      	movs	r0, #40	; 0x28
1000e074:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000e076:	494c      	ldr	r1, [pc, #304]	; (1000e1a8 <platform_driver_init+0x1dc>)
1000e078:	2028      	movs	r0, #40	; 0x28
1000e07a:	682b      	ldr	r3, [r5, #0]
1000e07c:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000e07e:	682b      	ldr	r3, [r5, #0]
1000e080:	494a      	ldr	r1, [pc, #296]	; (1000e1ac <platform_driver_init+0x1e0>)
1000e082:	2027      	movs	r0, #39	; 0x27
1000e084:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000e086:	4b4a      	ldr	r3, [pc, #296]	; (1000e1b0 <platform_driver_init+0x1e4>)
1000e088:	681a      	ldr	r2, [r3, #0]
1000e08a:	4b4a      	ldr	r3, [pc, #296]	; (1000e1b4 <platform_driver_init+0x1e8>)
1000e08c:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000e08e:	4a4a      	ldr	r2, [pc, #296]	; (1000e1b8 <platform_driver_init+0x1ec>)
1000e090:	4b4a      	ldr	r3, [pc, #296]	; (1000e1bc <platform_driver_init+0x1f0>)
1000e092:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000e094:	4a4a      	ldr	r2, [pc, #296]	; (1000e1c0 <platform_driver_init+0x1f4>)
1000e096:	4b4b      	ldr	r3, [pc, #300]	; (1000e1c4 <platform_driver_init+0x1f8>)
1000e098:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000e09a:	4a4b      	ldr	r2, [pc, #300]	; (1000e1c8 <platform_driver_init+0x1fc>)
1000e09c:	4b4b      	ldr	r3, [pc, #300]	; (1000e1cc <platform_driver_init+0x200>)
1000e09e:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000e0a0:	4a4b      	ldr	r2, [pc, #300]	; (1000e1d0 <platform_driver_init+0x204>)
1000e0a2:	4b4c      	ldr	r3, [pc, #304]	; (1000e1d4 <platform_driver_init+0x208>)
1000e0a4:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000e0a6:	4a4c      	ldr	r2, [pc, #304]	; (1000e1d8 <platform_driver_init+0x20c>)
1000e0a8:	4b4c      	ldr	r3, [pc, #304]	; (1000e1dc <platform_driver_init+0x210>)
1000e0aa:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000e0ac:	4a4c      	ldr	r2, [pc, #304]	; (1000e1e0 <platform_driver_init+0x214>)
1000e0ae:	4b4d      	ldr	r3, [pc, #308]	; (1000e1e4 <platform_driver_init+0x218>)
1000e0b0:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000e0b2:	4a4d      	ldr	r2, [pc, #308]	; (1000e1e8 <platform_driver_init+0x21c>)
1000e0b4:	4b4d      	ldr	r3, [pc, #308]	; (1000e1ec <platform_driver_init+0x220>)
1000e0b6:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000e0b8:	22a0      	movs	r2, #160	; 0xa0
1000e0ba:	0092      	lsls	r2, r2, #2
1000e0bc:	2100      	movs	r1, #0
1000e0be:	484c      	ldr	r0, [pc, #304]	; (1000e1f0 <platform_driver_init+0x224>)
1000e0c0:	4b4c      	ldr	r3, [pc, #304]	; (1000e1f4 <platform_driver_init+0x228>)
1000e0c2:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e0c4:	2280      	movs	r2, #128	; 0x80
1000e0c6:	0092      	lsls	r2, r2, #2
1000e0c8:	4b4b      	ldr	r3, [pc, #300]	; (1000e1f8 <platform_driver_init+0x22c>)
1000e0ca:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000e0cc:	4b4b      	ldr	r3, [pc, #300]	; (1000e1fc <platform_driver_init+0x230>)
1000e0ce:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000e0d0:	4653      	mov	r3, sl
1000e0d2:	6023      	str	r3, [r4, #0]
1000e0d4:	464b      	mov	r3, r9
1000e0d6:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000e0d8:	4b49      	ldr	r3, [pc, #292]	; (1000e200 <platform_driver_init+0x234>)
1000e0da:	4642      	mov	r2, r8
1000e0dc:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000e0de:	683b      	ldr	r3, [r7, #0]
1000e0e0:	4a48      	ldr	r2, [pc, #288]	; (1000e204 <platform_driver_init+0x238>)
1000e0e2:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000e0e4:	6833      	ldr	r3, [r6, #0]
1000e0e6:	4a48      	ldr	r2, [pc, #288]	; (1000e208 <platform_driver_init+0x23c>)
1000e0e8:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000e0ea:	2000      	movs	r0, #0
1000e0ec:	4c47      	ldr	r4, [pc, #284]	; (1000e20c <platform_driver_init+0x240>)
1000e0ee:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000e0f0:	2001      	movs	r0, #1
1000e0f2:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000e0f4:	2002      	movs	r0, #2
1000e0f6:	47a0      	blx	r4
		platform_initialized = 1;
1000e0f8:	2201      	movs	r2, #1
1000e0fa:	4b06      	ldr	r3, [pc, #24]	; (1000e114 <platform_driver_init+0x148>)
1000e0fc:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000e0fe:	2000      	movs	r0, #0
1000e100:	e003      	b.n	1000e10a <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000e102:	2201      	movs	r2, #1
1000e104:	4b03      	ldr	r3, [pc, #12]	; (1000e114 <platform_driver_init+0x148>)
1000e106:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000e108:	2001      	movs	r0, #1
	}
	return status;
}
1000e10a:	bc1c      	pop	{r2, r3, r4}
1000e10c:	4690      	mov	r8, r2
1000e10e:	4699      	mov	r9, r3
1000e110:	46a2      	mov	sl, r4
1000e112:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e114:	1001a090 	.word	0x1001a090
1000e118:	1000df59 	.word	0x1000df59
1000e11c:	1000df9d 	.word	0x1000df9d
1000e120:	1001a0b0 	.word	0x1001a0b0
1000e124:	e000e100 	.word	0xe000e100
1000e128:	1001b01c 	.word	0x1001b01c
1000e12c:	000007d7 	.word	0x000007d7
1000e130:	000007bd 	.word	0x000007bd
1000e134:	1001ad58 	.word	0x1001ad58
1000e138:	0001bc51 	.word	0x0001bc51
1000e13c:	1001b020 	.word	0x1001b020
1000e140:	100400bc 	.word	0x100400bc
1000e144:	1001a084 	.word	0x1001a084
1000e148:	100400b8 	.word	0x100400b8
1000e14c:	1001a080 	.word	0x1001a080
1000e150:	0001b99f 	.word	0x0001b99f
1000e154:	1001ad54 	.word	0x1001ad54
1000e158:	0001b9db 	.word	0x0001b9db
1000e15c:	1001ad60 	.word	0x1001ad60
1000e160:	1001b030 	.word	0x1001b030
1000e164:	1004003c 	.word	0x1004003c
1000e168:	10041fc0 	.word	0x10041fc0
1000e16c:	1001ad64 	.word	0x1001ad64
1000e170:	10041fc4 	.word	0x10041fc4
1000e174:	1001b02c 	.word	0x1001b02c
1000e178:	1001b024 	.word	0x1001b024
1000e17c:	10041fd4 	.word	0x10041fd4
1000e180:	10041fd8 	.word	0x10041fd8
1000e184:	1001ad5c 	.word	0x1001ad5c
1000e188:	0001cbe9 	.word	0x0001cbe9
1000e18c:	1001a0a4 	.word	0x1001a0a4
1000e190:	0001cd8f 	.word	0x0001cd8f
1000e194:	1001a094 	.word	0x1001a094
1000e198:	0001cea3 	.word	0x0001cea3
1000e19c:	1001a0b8 	.word	0x1001a0b8
1000e1a0:	0001cbcf 	.word	0x0001cbcf
1000e1a4:	1001a08c 	.word	0x1001a08c
1000e1a8:	1000e655 	.word	0x1000e655
1000e1ac:	1000e5e9 	.word	0x1000e5e9
1000e1b0:	100400e4 	.word	0x100400e4
1000e1b4:	1001a0ac 	.word	0x1001a0ac
1000e1b8:	00019fe9 	.word	0x00019fe9
1000e1bc:	1001a0bc 	.word	0x1001a0bc
1000e1c0:	0001dbdd 	.word	0x0001dbdd
1000e1c4:	1001a088 	.word	0x1001a088
1000e1c8:	0001dc5b 	.word	0x0001dc5b
1000e1cc:	1001a09c 	.word	0x1001a09c
1000e1d0:	100405ec 	.word	0x100405ec
1000e1d4:	1001a098 	.word	0x1001a098
1000e1d8:	0001d5e3 	.word	0x0001d5e3
1000e1dc:	1001a0a8 	.word	0x1001a0a8
1000e1e0:	10040c20 	.word	0x10040c20
1000e1e4:	1001a0c0 	.word	0x1001a0c0
1000e1e8:	00019f09 	.word	0x00019f09
1000e1ec:	1001a07c 	.word	0x1001a07c
1000e1f0:	1001ad9c 	.word	0x1001ad9c
1000e1f4:	10016235 	.word	0x10016235
1000e1f8:	1001b034 	.word	0x1001b034
1000e1fc:	1000de85 	.word	0x1000de85
1000e200:	1001b028 	.word	0x1001b028
1000e204:	1000df2d 	.word	0x1000df2d
1000e208:	1000e6b1 	.word	0x1000e6b1
1000e20c:	1000e699 	.word	0x1000e699

1000e210 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e210:	4b04      	ldr	r3, [pc, #16]	; (1000e224 <platform_register_ble_msg_handler+0x14>)
1000e212:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000e214:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000e216:	2a01      	cmp	r2, #1
1000e218:	d102      	bne.n	1000e220 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000e21a:	4b03      	ldr	r3, [pc, #12]	; (1000e228 <platform_register_ble_msg_handler+0x18>)
1000e21c:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000e21e:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000e220:	0018      	movs	r0, r3
1000e222:	4770      	bx	lr
1000e224:	1001a090 	.word	0x1001a090
1000e228:	1001a0b0 	.word	0x1001a0b0

1000e22c <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000e22c:	b570      	push	{r4, r5, r6, lr}
1000e22e:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000e230:	4b0e      	ldr	r3, [pc, #56]	; (1000e26c <platform_interface_send+0x40>)
1000e232:	681b      	ldr	r3, [r3, #0]
1000e234:	2b00      	cmp	r3, #0
1000e236:	d002      	beq.n	1000e23e <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000e238:	8840      	ldrh	r0, [r0, #2]
1000e23a:	4798      	blx	r3
1000e23c:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000e23e:	88e3      	ldrh	r3, [r4, #6]
1000e240:	88a2      	ldrh	r2, [r4, #4]
1000e242:	8861      	ldrh	r1, [r4, #2]
1000e244:	8820      	ldrh	r0, [r4, #0]
1000e246:	4d0a      	ldr	r5, [pc, #40]	; (1000e270 <platform_interface_send+0x44>)
1000e248:	682d      	ldr	r5, [r5, #0]
1000e24a:	47a8      	blx	r5
1000e24c:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000e24e:	88e2      	ldrh	r2, [r4, #6]
1000e250:	2a00      	cmp	r2, #0
1000e252:	d102      	bne.n	1000e25a <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000e254:	4b07      	ldr	r3, [pc, #28]	; (1000e274 <platform_interface_send+0x48>)
1000e256:	4798      	blx	r3
1000e258:	e006      	b.n	1000e268 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000e25a:	0021      	movs	r1, r4
1000e25c:	3108      	adds	r1, #8
1000e25e:	4b06      	ldr	r3, [pc, #24]	; (1000e278 <platform_interface_send+0x4c>)
1000e260:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000e262:	0028      	movs	r0, r5
1000e264:	4b03      	ldr	r3, [pc, #12]	; (1000e274 <platform_interface_send+0x48>)
1000e266:	4798      	blx	r3
	}
}
1000e268:	bd70      	pop	{r4, r5, r6, pc}
1000e26a:	46c0      	nop			; (mov r8, r8)
1000e26c:	1001a084 	.word	0x1001a084
1000e270:	1001a0bc 	.word	0x1001a0bc
1000e274:	1000deb5 	.word	0x1000deb5
1000e278:	10016223 	.word	0x10016223

1000e27c <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000e27c:	b570      	push	{r4, r5, r6, lr}
1000e27e:	0015      	movs	r5, r2
1000e280:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000e282:	020a      	lsls	r2, r1, #8
1000e284:	4302      	orrs	r2, r0
1000e286:	4b0a      	ldr	r3, [pc, #40]	; (1000e2b0 <send_plf_int_msg_ind+0x34>)
1000e288:	681e      	ldr	r6, [r3, #0]
1000e28a:	0023      	movs	r3, r4
1000e28c:	2105      	movs	r1, #5
1000e28e:	20a0      	movs	r0, #160	; 0xa0
1000e290:	00c0      	lsls	r0, r0, #3
1000e292:	47b0      	blx	r6
1000e294:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000e296:	d00a      	beq.n	1000e2ae <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000e298:	2c00      	cmp	r4, #0
1000e29a:	d005      	beq.n	1000e2a8 <send_plf_int_msg_ind+0x2c>
1000e29c:	2d00      	cmp	r5, #0
1000e29e:	d003      	beq.n	1000e2a8 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000e2a0:	0022      	movs	r2, r4
1000e2a2:	0029      	movs	r1, r5
1000e2a4:	4b03      	ldr	r3, [pc, #12]	; (1000e2b4 <send_plf_int_msg_ind+0x38>)
1000e2a6:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000e2a8:	0030      	movs	r0, r6
1000e2aa:	4b03      	ldr	r3, [pc, #12]	; (1000e2b8 <send_plf_int_msg_ind+0x3c>)
1000e2ac:	4798      	blx	r3
	}
}
1000e2ae:	bd70      	pop	{r4, r5, r6, pc}
1000e2b0:	1001a0bc 	.word	0x1001a0bc
1000e2b4:	10016223 	.word	0x10016223
1000e2b8:	1000deb5 	.word	0x1000deb5

1000e2bc <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000e2bc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e2be:	465f      	mov	r7, fp
1000e2c0:	4656      	mov	r6, sl
1000e2c2:	464d      	mov	r5, r9
1000e2c4:	4644      	mov	r4, r8
1000e2c6:	b4f0      	push	{r4, r5, r6, r7}
1000e2c8:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e2ca:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000e2cc:	2300      	movs	r3, #0
1000e2ce:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000e2d0:	1ce3      	adds	r3, r4, #3
1000e2d2:	d81c      	bhi.n	1000e30e <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000e2d4:	220d      	movs	r2, #13
1000e2d6:	2100      	movs	r1, #0
1000e2d8:	a802      	add	r0, sp, #8
1000e2da:	4b82      	ldr	r3, [pc, #520]	; (1000e4e4 <platform_event_wait+0x228>)
1000e2dc:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e2de:	2333      	movs	r3, #51	; 0x33
1000e2e0:	aa02      	add	r2, sp, #8
1000e2e2:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e2e4:	3b30      	subs	r3, #48	; 0x30
1000e2e6:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e2e8:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e2ea:	3302      	adds	r3, #2
1000e2ec:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e2ee:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000e2f0:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000e2f2:	0a23      	lsrs	r3, r4, #8
1000e2f4:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000e2f6:	0c23      	lsrs	r3, r4, #16
1000e2f8:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000e2fa:	0e24      	lsrs	r4, r4, #24
1000e2fc:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000e2fe:	2301      	movs	r3, #1
1000e300:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000e302:	210d      	movs	r1, #13
1000e304:	0010      	movs	r0, r2
1000e306:	4b78      	ldr	r3, [pc, #480]	; (1000e4e8 <platform_event_wait+0x22c>)
1000e308:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000e30a:	2301      	movs	r3, #1
1000e30c:	4699      	mov	r9, r3
1000e30e:	2400      	movs	r4, #0
1000e310:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000e312:	4f76      	ldr	r7, [pc, #472]	; (1000e4ec <platform_event_wait+0x230>)
1000e314:	4e76      	ldr	r6, [pc, #472]	; (1000e4f0 <platform_event_wait+0x234>)
1000e316:	4977      	ldr	r1, [pc, #476]	; (1000e4f4 <platform_event_wait+0x238>)
1000e318:	6838      	ldr	r0, [r7, #0]
1000e31a:	6833      	ldr	r3, [r6, #0]
1000e31c:	4798      	blx	r3
1000e31e:	2800      	cmp	r0, #0
1000e320:	d000      	beq.n	1000e324 <platform_event_wait+0x68>
1000e322:	e088      	b.n	1000e436 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000e324:	4b73      	ldr	r3, [pc, #460]	; (1000e4f4 <platform_event_wait+0x238>)
1000e326:	681c      	ldr	r4, [r3, #0]
1000e328:	88a3      	ldrh	r3, [r4, #4]
1000e32a:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e32c:	23cd      	movs	r3, #205	; 0xcd
1000e32e:	009b      	lsls	r3, r3, #2
1000e330:	459a      	cmp	sl, r3
1000e332:	d100      	bne.n	1000e336 <platform_event_wait+0x7a>
1000e334:	e0c7      	b.n	1000e4c6 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000e336:	8923      	ldrh	r3, [r4, #8]
1000e338:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000e33a:	8963      	ldrh	r3, [r4, #10]
1000e33c:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000e33e:	464b      	mov	r3, r9
1000e340:	2b00      	cmp	r3, #0
1000e342:	d011      	beq.n	1000e368 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000e344:	220d      	movs	r2, #13
1000e346:	2100      	movs	r1, #0
1000e348:	a802      	add	r0, sp, #8
1000e34a:	4b66      	ldr	r3, [pc, #408]	; (1000e4e4 <platform_event_wait+0x228>)
1000e34c:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000e34e:	2333      	movs	r3, #51	; 0x33
1000e350:	aa02      	add	r2, sp, #8
1000e352:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000e354:	3b30      	subs	r3, #48	; 0x30
1000e356:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000e358:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000e35a:	3302      	adds	r3, #2
1000e35c:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000e35e:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000e360:	210d      	movs	r1, #13
1000e362:	0010      	movs	r0, r2
1000e364:	4b60      	ldr	r3, [pc, #384]	; (1000e4e8 <platform_event_wait+0x22c>)
1000e366:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000e368:	23a0      	movs	r3, #160	; 0xa0
1000e36a:	00db      	lsls	r3, r3, #3
1000e36c:	459a      	cmp	sl, r3
1000e36e:	d121      	bne.n	1000e3b4 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000e370:	4b61      	ldr	r3, [pc, #388]	; (1000e4f8 <platform_event_wait+0x23c>)
1000e372:	881b      	ldrh	r3, [r3, #0]
1000e374:	4443      	add	r3, r8
1000e376:	22a0      	movs	r2, #160	; 0xa0
1000e378:	0092      	lsls	r2, r2, #2
1000e37a:	4293      	cmp	r3, r2
1000e37c:	dd02      	ble.n	1000e384 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000e37e:	3a80      	subs	r2, #128	; 0x80
1000e380:	4b5d      	ldr	r3, [pc, #372]	; (1000e4f8 <platform_event_wait+0x23c>)
1000e382:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000e384:	4b5c      	ldr	r3, [pc, #368]	; (1000e4f8 <platform_event_wait+0x23c>)
1000e386:	469a      	mov	sl, r3
1000e388:	881d      	ldrh	r5, [r3, #0]
1000e38a:	4b5c      	ldr	r3, [pc, #368]	; (1000e4fc <platform_event_wait+0x240>)
1000e38c:	18ed      	adds	r5, r5, r3
1000e38e:	0021      	movs	r1, r4
1000e390:	310c      	adds	r1, #12
1000e392:	4642      	mov	r2, r8
1000e394:	0028      	movs	r0, r5
1000e396:	4b5a      	ldr	r3, [pc, #360]	; (1000e500 <platform_event_wait+0x244>)
1000e398:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000e39a:	4642      	mov	r2, r8
1000e39c:	0029      	movs	r1, r5
1000e39e:	4658      	mov	r0, fp
1000e3a0:	4b58      	ldr	r3, [pc, #352]	; (1000e504 <platform_event_wait+0x248>)
1000e3a2:	4798      	blx	r3
				plf_event_buff_index += len;
1000e3a4:	4653      	mov	r3, sl
1000e3a6:	881b      	ldrh	r3, [r3, #0]
1000e3a8:	4443      	add	r3, r8
1000e3aa:	4652      	mov	r2, sl
1000e3ac:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e3ae:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000e3b0:	2502      	movs	r5, #2
1000e3b2:	e03a      	b.n	1000e42a <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e3b4:	4b54      	ldr	r3, [pc, #336]	; (1000e508 <platform_event_wait+0x24c>)
1000e3b6:	681b      	ldr	r3, [r3, #0]
1000e3b8:	2b00      	cmp	r3, #0
1000e3ba:	d032      	beq.n	1000e422 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000e3bc:	4b4d      	ldr	r3, [pc, #308]	; (1000e4f4 <platform_event_wait+0x238>)
1000e3be:	681a      	ldr	r2, [r3, #0]
1000e3c0:	8893      	ldrh	r3, [r2, #4]
1000e3c2:	21cd      	movs	r1, #205	; 0xcd
1000e3c4:	0089      	lsls	r1, r1, #2
1000e3c6:	428b      	cmp	r3, r1
1000e3c8:	d104      	bne.n	1000e3d4 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000e3ca:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000e3cc:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000e3ce:	2b00      	cmp	r3, #0
1000e3d0:	d02b      	beq.n	1000e42a <platform_event_wait+0x16e>
1000e3d2:	e028      	b.n	1000e426 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000e3d4:	4c4d      	ldr	r4, [pc, #308]	; (1000e50c <platform_event_wait+0x250>)
1000e3d6:	4d49      	ldr	r5, [pc, #292]	; (1000e4fc <platform_event_wait+0x240>)
1000e3d8:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000e3da:	702b      	strb	r3, [r5, #0]
1000e3dc:	0a1b      	lsrs	r3, r3, #8
1000e3de:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000e3e0:	8910      	ldrh	r0, [r2, #8]
1000e3e2:	4b4b      	ldr	r3, [pc, #300]	; (1000e510 <platform_event_wait+0x254>)
1000e3e4:	681b      	ldr	r3, [r3, #0]
1000e3e6:	4798      	blx	r3
1000e3e8:	7128      	strb	r0, [r5, #4]
1000e3ea:	0a00      	lsrs	r0, r0, #8
1000e3ec:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000e3ee:	6820      	ldr	r0, [r4, #0]
1000e3f0:	4b40      	ldr	r3, [pc, #256]	; (1000e4f4 <platform_event_wait+0x238>)
1000e3f2:	681a      	ldr	r2, [r3, #0]
1000e3f4:	88d2      	ldrh	r2, [r2, #6]
1000e3f6:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000e3f8:	681d      	ldr	r5, [r3, #0]
1000e3fa:	896b      	ldrh	r3, [r5, #10]
1000e3fc:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000e3fe:	3008      	adds	r0, #8
1000e400:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000e402:	896a      	ldrh	r2, [r5, #10]
1000e404:	2a00      	cmp	r2, #0
1000e406:	d003      	beq.n	1000e410 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000e408:	0029      	movs	r1, r5
1000e40a:	310c      	adds	r1, #12
1000e40c:	4b3c      	ldr	r3, [pc, #240]	; (1000e500 <platform_event_wait+0x244>)
1000e40e:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000e410:	8969      	ldrh	r1, [r5, #10]
1000e412:	3108      	adds	r1, #8
1000e414:	4b3c      	ldr	r3, [pc, #240]	; (1000e508 <platform_event_wait+0x24c>)
1000e416:	681b      	ldr	r3, [r3, #0]
1000e418:	4838      	ldr	r0, [pc, #224]	; (1000e4fc <platform_event_wait+0x240>)
1000e41a:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e41c:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000e41e:	2503      	movs	r5, #3
1000e420:	e003      	b.n	1000e42a <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e422:	2400      	movs	r4, #0
1000e424:	e001      	b.n	1000e42a <platform_event_wait+0x16e>
1000e426:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000e428:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000e42a:	4b32      	ldr	r3, [pc, #200]	; (1000e4f4 <platform_event_wait+0x238>)
1000e42c:	6818      	ldr	r0, [r3, #0]
1000e42e:	4b39      	ldr	r3, [pc, #228]	; (1000e514 <platform_event_wait+0x258>)
1000e430:	681b      	ldr	r3, [r3, #0]
1000e432:	4798      	blx	r3
1000e434:	e000      	b.n	1000e438 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000e436:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000e438:	2c00      	cmp	r4, #0
1000e43a:	d000      	beq.n	1000e43e <platform_event_wait+0x182>
1000e43c:	e76b      	b.n	1000e316 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000e43e:	464b      	mov	r3, r9
1000e440:	2b00      	cmp	r3, #0
1000e442:	d046      	beq.n	1000e4d2 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000e444:	4b29      	ldr	r3, [pc, #164]	; (1000e4ec <platform_event_wait+0x230>)
1000e446:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000e448:	2e00      	cmp	r6, #0
1000e44a:	d104      	bne.n	1000e456 <platform_event_wait+0x19a>
1000e44c:	2300      	movs	r3, #0
1000e44e:	6a1c      	ldr	r4, [r3, #32]
1000e450:	2c00      	cmp	r4, #0
1000e452:	d131      	bne.n	1000e4b8 <platform_event_wait+0x1fc>
1000e454:	e03d      	b.n	1000e4d2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000e456:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000e458:	2314      	movs	r3, #20
1000e45a:	469c      	mov	ip, r3
1000e45c:	44b4      	add	ip, r6
1000e45e:	4663      	mov	r3, ip
1000e460:	4660      	mov	r0, ip
1000e462:	9300      	str	r3, [sp, #0]
1000e464:	4b2c      	ldr	r3, [pc, #176]	; (1000e518 <platform_event_wait+0x25c>)
1000e466:	681b      	ldr	r3, [r3, #0]
1000e468:	4798      	blx	r3
	while(NULL != current)
1000e46a:	2c00      	cmp	r4, #0
1000e46c:	d01f      	beq.n	1000e4ae <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000e46e:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e470:	23cd      	movs	r3, #205	; 0xcd
1000e472:	009b      	lsls	r3, r3, #2
1000e474:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000e476:	4b27      	ldr	r3, [pc, #156]	; (1000e514 <platform_event_wait+0x258>)
1000e478:	469a      	mov	sl, r3
1000e47a:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000e47c:	6803      	ldr	r3, [r0, #0]
1000e47e:	889b      	ldrh	r3, [r3, #4]
1000e480:	4543      	cmp	r3, r8
1000e482:	d110      	bne.n	1000e4a6 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000e484:	2f00      	cmp	r7, #0
1000e486:	d006      	beq.n	1000e496 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000e488:	6883      	ldr	r3, [r0, #8]
1000e48a:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000e48c:	4653      	mov	r3, sl
1000e48e:	681b      	ldr	r3, [r3, #0]
1000e490:	4798      	blx	r3
				current = prev->pstrNext;
1000e492:	68b8      	ldr	r0, [r7, #8]
1000e494:	e009      	b.n	1000e4aa <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000e496:	6883      	ldr	r3, [r0, #8]
1000e498:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000e49a:	4b1e      	ldr	r3, [pc, #120]	; (1000e514 <platform_event_wait+0x258>)
1000e49c:	681b      	ldr	r3, [r3, #0]
1000e49e:	9301      	str	r3, [sp, #4]
1000e4a0:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000e4a2:	6a30      	ldr	r0, [r6, #32]
1000e4a4:	e001      	b.n	1000e4aa <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000e4a6:	0007      	movs	r7, r0
1000e4a8:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000e4aa:	2800      	cmp	r0, #0
1000e4ac:	d1e6      	bne.n	1000e47c <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000e4ae:	4b1b      	ldr	r3, [pc, #108]	; (1000e51c <platform_event_wait+0x260>)
1000e4b0:	681b      	ldr	r3, [r3, #0]
1000e4b2:	9800      	ldr	r0, [sp, #0]
1000e4b4:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000e4b6:	e00c      	b.n	1000e4d2 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000e4b8:	2314      	movs	r3, #20
1000e4ba:	9300      	str	r3, [sp, #0]
1000e4bc:	4b16      	ldr	r3, [pc, #88]	; (1000e518 <platform_event_wait+0x25c>)
1000e4be:	681b      	ldr	r3, [r3, #0]
1000e4c0:	2014      	movs	r0, #20
1000e4c2:	4798      	blx	r3
1000e4c4:	e7d3      	b.n	1000e46e <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e4c6:	4b10      	ldr	r3, [pc, #64]	; (1000e508 <platform_event_wait+0x24c>)
1000e4c8:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000e4ca:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000e4cc:	2b00      	cmp	r3, #0
1000e4ce:	d0ac      	beq.n	1000e42a <platform_event_wait+0x16e>
1000e4d0:	e77b      	b.n	1000e3ca <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000e4d2:	0028      	movs	r0, r5
1000e4d4:	b007      	add	sp, #28
1000e4d6:	bc3c      	pop	{r2, r3, r4, r5}
1000e4d8:	4690      	mov	r8, r2
1000e4da:	4699      	mov	r9, r3
1000e4dc:	46a2      	mov	sl, r4
1000e4de:	46ab      	mov	fp, r5
1000e4e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e4e2:	46c0      	nop			; (mov r8, r8)
1000e4e4:	10016235 	.word	0x10016235
1000e4e8:	1000e22d 	.word	0x1000e22d
1000e4ec:	1001a0c0 	.word	0x1001a0c0
1000e4f0:	1001a0a8 	.word	0x1001a0a8
1000e4f4:	1001a0b4 	.word	0x1001a0b4
1000e4f8:	1001b034 	.word	0x1001b034
1000e4fc:	1001ad9c 	.word	0x1001ad9c
1000e500:	10016223 	.word	0x10016223
1000e504:	1000de4d 	.word	0x1000de4d
1000e508:	1001a0b0 	.word	0x1001a0b0
1000e50c:	1001a0a0 	.word	0x1001a0a0
1000e510:	1001a080 	.word	0x1001a080
1000e514:	1001a07c 	.word	0x1001a07c
1000e518:	1001a09c 	.word	0x1001a09c
1000e51c:	1001a088 	.word	0x1001a088

1000e520 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000e520:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000e522:	4b03      	ldr	r3, [pc, #12]	; (1000e530 <acquire_sleep_lock+0x10>)
1000e524:	681b      	ldr	r3, [r3, #0]
1000e526:	2080      	movs	r0, #128	; 0x80
1000e528:	0200      	lsls	r0, r0, #8
1000e52a:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000e52c:	2008      	movs	r0, #8
1000e52e:	bd10      	pop	{r4, pc}
1000e530:	1001ad54 	.word	0x1001ad54

1000e534 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000e534:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e536:	4b03      	ldr	r3, [pc, #12]	; (1000e544 <release_message_lock+0x10>)
1000e538:	681b      	ldr	r3, [r3, #0]
1000e53a:	2080      	movs	r0, #128	; 0x80
1000e53c:	01c0      	lsls	r0, r0, #7
1000e53e:	4798      	blx	r3
	return status;
}
1000e540:	2000      	movs	r0, #0
1000e542:	bd10      	pop	{r4, pc}
1000e544:	1001ad60 	.word	0x1001ad60

1000e548 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000e548:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000e54a:	4c05      	ldr	r4, [pc, #20]	; (1000e560 <release_sleep_lock+0x18>)
1000e54c:	2080      	movs	r0, #128	; 0x80
1000e54e:	01c0      	lsls	r0, r0, #7
1000e550:	6823      	ldr	r3, [r4, #0]
1000e552:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000e554:	6823      	ldr	r3, [r4, #0]
1000e556:	2080      	movs	r0, #128	; 0x80
1000e558:	0200      	lsls	r0, r0, #8
1000e55a:	4798      	blx	r3
	return status;
}
1000e55c:	2000      	movs	r0, #0
1000e55e:	bd10      	pop	{r4, pc}
1000e560:	1001ad60 	.word	0x1001ad60

1000e564 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000e564:	2800      	cmp	r0, #0
1000e566:	d003      	beq.n	1000e570 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000e568:	4b02      	ldr	r3, [pc, #8]	; (1000e574 <register_resume_callback+0x10>)
1000e56a:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000e56c:	2000      	movs	r0, #0
1000e56e:	e000      	b.n	1000e572 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000e570:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000e572:	4770      	bx	lr
1000e574:	1001b028 	.word	0x1001b028

1000e578 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000e578:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000e57a:	4a18      	ldr	r2, [pc, #96]	; (1000e5dc <gpio1_combined_isr_handler+0x64>)
1000e57c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e57e:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e580:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e582:	2180      	movs	r1, #128	; 0x80
1000e584:	0209      	lsls	r1, r1, #8
1000e586:	4301      	orrs	r1, r0
1000e588:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e58a:	0010      	movs	r0, r2
1000e58c:	4d14      	ldr	r5, [pc, #80]	; (1000e5e0 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e58e:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e590:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e592:	05db      	lsls	r3, r3, #23
1000e594:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e596:	d011      	beq.n	1000e5bc <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000e598:	b2db      	uxtb	r3, r3
1000e59a:	4259      	negs	r1, r3
1000e59c:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000e59e:	2b01      	cmp	r3, #1
1000e5a0:	d006      	beq.n	1000e5b0 <gpio1_combined_isr_handler+0x38>
1000e5a2:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000e5a4:	085b      	lsrs	r3, r3, #1
				index++;
1000e5a6:	3101      	adds	r1, #1
1000e5a8:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000e5aa:	2b01      	cmp	r3, #1
1000e5ac:	d1fa      	bne.n	1000e5a4 <gpio1_combined_isr_handler+0x2c>
1000e5ae:	e000      	b.n	1000e5b2 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e5b0:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e5b2:	0023      	movs	r3, r4
1000e5b4:	408b      	lsls	r3, r1
1000e5b6:	b29b      	uxth	r3, r3
1000e5b8:	8703      	strh	r3, [r0, #56]	; 0x38
1000e5ba:	e003      	b.n	1000e5c4 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e5bc:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e5be:	432b      	orrs	r3, r5
1000e5c0:	b29b      	uxth	r3, r3
1000e5c2:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000e5c4:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e5c6:	05db      	lsls	r3, r3, #23
1000e5c8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e5ca:	d1e2      	bne.n	1000e592 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000e5cc:	2180      	movs	r1, #128	; 0x80
1000e5ce:	0049      	lsls	r1, r1, #1
1000e5d0:	3381      	adds	r3, #129	; 0x81
1000e5d2:	33ff      	adds	r3, #255	; 0xff
1000e5d4:	4a03      	ldr	r2, [pc, #12]	; (1000e5e4 <gpio1_combined_isr_handler+0x6c>)
1000e5d6:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000e5d8:	bd30      	pop	{r4, r5, pc}
1000e5da:	46c0      	nop			; (mov r8, r8)
1000e5dc:	40011000 	.word	0x40011000
1000e5e0:	ffff8000 	.word	0xffff8000
1000e5e4:	e000e100 	.word	0xe000e100

1000e5e8 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000e5e8:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000e5ea:	4a17      	ldr	r2, [pc, #92]	; (1000e648 <gpio0_combined_isr_handler+0x60>)
1000e5ec:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e5ee:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000e5f0:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000e5f2:	2180      	movs	r1, #128	; 0x80
1000e5f4:	0209      	lsls	r1, r1, #8
1000e5f6:	4301      	orrs	r1, r0
1000e5f8:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e5fa:	0010      	movs	r0, r2
1000e5fc:	4d13      	ldr	r5, [pc, #76]	; (1000e64c <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e5fe:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e600:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e602:	05db      	lsls	r3, r3, #23
1000e604:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000e606:	d011      	beq.n	1000e62c <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000e608:	b2db      	uxtb	r3, r3
1000e60a:	4259      	negs	r1, r3
1000e60c:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000e60e:	2b01      	cmp	r3, #1
1000e610:	d006      	beq.n	1000e620 <gpio0_combined_isr_handler+0x38>
1000e612:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000e614:	085b      	lsrs	r3, r3, #1
				index++;
1000e616:	3101      	adds	r1, #1
1000e618:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000e61a:	2b01      	cmp	r3, #1
1000e61c:	d1fa      	bne.n	1000e614 <gpio0_combined_isr_handler+0x2c>
1000e61e:	e000      	b.n	1000e622 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000e620:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000e622:	0023      	movs	r3, r4
1000e624:	408b      	lsls	r3, r1
1000e626:	b29b      	uxth	r3, r3
1000e628:	8703      	strh	r3, [r0, #56]	; 0x38
1000e62a:	e003      	b.n	1000e634 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000e62c:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000e62e:	432b      	orrs	r3, r5
1000e630:	b29b      	uxth	r3, r3
1000e632:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000e634:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000e636:	05db      	lsls	r3, r3, #23
1000e638:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000e63a:	d1e2      	bne.n	1000e602 <gpio0_combined_isr_handler+0x1a>
1000e63c:	2180      	movs	r1, #128	; 0x80
1000e63e:	3381      	adds	r3, #129	; 0x81
1000e640:	33ff      	adds	r3, #255	; 0xff
1000e642:	4a03      	ldr	r2, [pc, #12]	; (1000e650 <gpio0_combined_isr_handler+0x68>)
1000e644:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000e646:	bd30      	pop	{r4, r5, pc}
1000e648:	40010000 	.word	0x40010000
1000e64c:	ffff8000 	.word	0xffff8000
1000e650:	e000e100 	.word	0xe000e100

1000e654 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000e654:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000e656:	4b0c      	ldr	r3, [pc, #48]	; (1000e688 <PORT1_COMB_Handler+0x34>)
1000e658:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000e65a:	0b5b      	lsrs	r3, r3, #13
1000e65c:	d010      	beq.n	1000e680 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000e65e:	4b0b      	ldr	r3, [pc, #44]	; (1000e68c <PORT1_COMB_Handler+0x38>)
1000e660:	681b      	ldr	r3, [r3, #0]
1000e662:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000e664:	4a08      	ldr	r2, [pc, #32]	; (1000e688 <PORT1_COMB_Handler+0x34>)
1000e666:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000e668:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000e66a:	0b5b      	lsrs	r3, r3, #13
1000e66c:	035b      	lsls	r3, r3, #13
1000e66e:	430b      	orrs	r3, r1
1000e670:	8713      	strh	r3, [r2, #56]	; 0x38
1000e672:	2180      	movs	r1, #128	; 0x80
1000e674:	0049      	lsls	r1, r1, #1
1000e676:	23c0      	movs	r3, #192	; 0xc0
1000e678:	005b      	lsls	r3, r3, #1
1000e67a:	4a05      	ldr	r2, [pc, #20]	; (1000e690 <PORT1_COMB_Handler+0x3c>)
1000e67c:	50d1      	str	r1, [r2, r3]
1000e67e:	e001      	b.n	1000e684 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e680:	4b04      	ldr	r3, [pc, #16]	; (1000e694 <PORT1_COMB_Handler+0x40>)
1000e682:	4798      	blx	r3
	}
}
1000e684:	bd10      	pop	{r4, pc}
1000e686:	46c0      	nop			; (mov r8, r8)
1000e688:	40011000 	.word	0x40011000
1000e68c:	1001b020 	.word	0x1001b020
1000e690:	e000e100 	.word	0xe000e100
1000e694:	1000e579 	.word	0x1000e579

1000e698 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e698:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e69a:	2802      	cmp	r0, #2
1000e69c:	d804      	bhi.n	1000e6a8 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e69e:	0080      	lsls	r0, r0, #2
1000e6a0:	2200      	movs	r2, #0
1000e6a2:	4b02      	ldr	r3, [pc, #8]	; (1000e6ac <wakeup_int_unregister_callback+0x14>)
1000e6a4:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e6a6:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e6a8:	0018      	movs	r0, r3
1000e6aa:	4770      	bx	lr
1000e6ac:	1001b038 	.word	0x1001b038

1000e6b0 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e6b0:	b510      	push	{r4, lr}
1000e6b2:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e6b4:	7803      	ldrb	r3, [r0, #0]
1000e6b6:	2b01      	cmp	r3, #1
1000e6b8:	d108      	bne.n	1000e6cc <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e6ba:	4b11      	ldr	r3, [pc, #68]	; (1000e700 <wakeup_active_event_callback+0x50>)
1000e6bc:	681b      	ldr	r3, [r3, #0]
1000e6be:	2b00      	cmp	r3, #0
1000e6c0:	d000      	beq.n	1000e6c4 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e6c2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e6c4:	23ff      	movs	r3, #255	; 0xff
1000e6c6:	6822      	ldr	r2, [r4, #0]
1000e6c8:	439a      	bics	r2, r3
1000e6ca:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e6cc:	7863      	ldrb	r3, [r4, #1]
1000e6ce:	2b01      	cmp	r3, #1
1000e6d0:	d108      	bne.n	1000e6e4 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e6d2:	4b0b      	ldr	r3, [pc, #44]	; (1000e700 <wakeup_active_event_callback+0x50>)
1000e6d4:	685b      	ldr	r3, [r3, #4]
1000e6d6:	2b00      	cmp	r3, #0
1000e6d8:	d000      	beq.n	1000e6dc <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e6da:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e6dc:	4b09      	ldr	r3, [pc, #36]	; (1000e704 <wakeup_active_event_callback+0x54>)
1000e6de:	6822      	ldr	r2, [r4, #0]
1000e6e0:	4013      	ands	r3, r2
1000e6e2:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e6e4:	78a3      	ldrb	r3, [r4, #2]
1000e6e6:	2b01      	cmp	r3, #1
1000e6e8:	d108      	bne.n	1000e6fc <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e6ea:	4b05      	ldr	r3, [pc, #20]	; (1000e700 <wakeup_active_event_callback+0x50>)
1000e6ec:	689b      	ldr	r3, [r3, #8]
1000e6ee:	2b00      	cmp	r3, #0
1000e6f0:	d000      	beq.n	1000e6f4 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e6f2:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e6f4:	4b04      	ldr	r3, [pc, #16]	; (1000e708 <wakeup_active_event_callback+0x58>)
1000e6f6:	6822      	ldr	r2, [r4, #0]
1000e6f8:	4013      	ands	r3, r2
1000e6fa:	6023      	str	r3, [r4, #0]
	}
}
1000e6fc:	bd10      	pop	{r4, pc}
1000e6fe:	46c0      	nop			; (mov r8, r8)
1000e700:	1001b038 	.word	0x1001b038
1000e704:	ffff00ff 	.word	0xffff00ff
1000e708:	ff00ffff 	.word	0xff00ffff

1000e70c <resume_cb>:
	sms_imu_init_variables();
	sms_pressure_init_variables();
}

static void resume_cb(void)
{
1000e70c:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000e70e:	4b09      	ldr	r3, [pc, #36]	; (1000e734 <resume_cb+0x28>)
1000e710:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000e712:	4b09      	ldr	r3, [pc, #36]	; (1000e738 <resume_cb+0x2c>)
1000e714:	4798      	blx	r3
	sms_dualtimer_init();
1000e716:	4b09      	ldr	r3, [pc, #36]	; (1000e73c <resume_cb+0x30>)
1000e718:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000e71a:	4b09      	ldr	r3, [pc, #36]	; (1000e740 <resume_cb+0x34>)
1000e71c:	4798      	blx	r3
	sms_led_gpio_init();
1000e71e:	4b09      	ldr	r3, [pc, #36]	; (1000e744 <resume_cb+0x38>)
1000e720:	4798      	blx	r3
	sms_spi_master_configure();
1000e722:	4b09      	ldr	r3, [pc, #36]	; (1000e748 <resume_cb+0x3c>)
1000e724:	4798      	blx	r3
	sms_i2c_master_configure();
1000e726:	4b09      	ldr	r3, [pc, #36]	; (1000e74c <resume_cb+0x40>)
1000e728:	4798      	blx	r3
	sms_imu_configure_gpio();
1000e72a:	4b09      	ldr	r3, [pc, #36]	; (1000e750 <resume_cb+0x44>)
1000e72c:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000e72e:	4b09      	ldr	r3, [pc, #36]	; (1000e754 <resume_cb+0x48>)
1000e730:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e732:	bd10      	pop	{r4, pc}
1000e734:	1000df59 	.word	0x1000df59
1000e738:	1000dcc1 	.word	0x1000dcc1
1000e73c:	1000ab2d 	.word	0x1000ab2d
1000e740:	10008ef5 	.word	0x10008ef5
1000e744:	1000a315 	.word	0x1000a315
1000e748:	1000a9e5 	.word	0x1000a9e5
1000e74c:	10009305 	.word	0x10009305
1000e750:	10009491 	.word	0x10009491
1000e754:	100091a5 	.word	0x100091a5

1000e758 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e758:	b510      	push	{r4, lr}
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e75a:	2201      	movs	r2, #1
1000e75c:	4b08      	ldr	r3, [pc, #32]	; (1000e780 <sms_init_variables+0x28>)
1000e75e:	701a      	strb	r2, [r3, #0]
	ulp_ready = false;
1000e760:	2200      	movs	r2, #0
1000e762:	4b08      	ldr	r3, [pc, #32]	; (1000e784 <sms_init_variables+0x2c>)
1000e764:	701a      	strb	r2, [r3, #0]
	ble_instance.timeout = BLE_APP_TIMEOUT_OFF;
1000e766:	3a01      	subs	r2, #1
1000e768:	4b07      	ldr	r3, [pc, #28]	; (1000e788 <sms_init_variables+0x30>)
1000e76a:	605a      	str	r2, [r3, #4]
	
	sms_ble_init_variables();
1000e76c:	4b07      	ldr	r3, [pc, #28]	; (1000e78c <sms_init_variables+0x34>)
1000e76e:	4798      	blx	r3
	sms_button_init_variables();
1000e770:	4b07      	ldr	r3, [pc, #28]	; (1000e790 <sms_init_variables+0x38>)
1000e772:	4798      	blx	r3
	sms_imu_init_variables();
1000e774:	4b07      	ldr	r3, [pc, #28]	; (1000e794 <sms_init_variables+0x3c>)
1000e776:	4798      	blx	r3
	sms_pressure_init_variables();
1000e778:	4b07      	ldr	r3, [pc, #28]	; (1000e798 <sms_init_variables+0x40>)
1000e77a:	4798      	blx	r3
}
1000e77c:	bd10      	pop	{r4, pc}
1000e77e:	46c0      	nop			; (mov r8, r8)
1000e780:	1001a198 	.word	0x1001a198
1000e784:	1001a199 	.word	0x1001a199
1000e788:	1001a19c 	.word	0x1001a19c
1000e78c:	10008951 	.word	0x10008951
1000e790:	10008ecd 	.word	0x10008ecd
1000e794:	1000957d 	.word	0x1000957d
1000e798:	1000a3d1 	.word	0x1000a3d1

1000e79c <main>:
	sms_monitor_configure_gpio();
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

int main(void)
{
1000e79c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e79e:	2210      	movs	r2, #16
1000e7a0:	4b76      	ldr	r3, [pc, #472]	; (1000e97c <main+0x1e0>)
1000e7a2:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e7a4:	4b76      	ldr	r3, [pc, #472]	; (1000e980 <main+0x1e4>)
1000e7a6:	4798      	blx	r3
	gpio_init(); // GPIO
1000e7a8:	4b76      	ldr	r3, [pc, #472]	; (1000e984 <main+0x1e8>)
1000e7aa:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e7ac:	4b76      	ldr	r3, [pc, #472]	; (1000e988 <main+0x1ec>)
1000e7ae:	4798      	blx	r3
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_PSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, psp\n"  : "=r" (result) );
1000e7b0:	f3ef 8309 	mrs	r3, PSP
	
	mypsp = __get_PSP();
1000e7b4:	4d75      	ldr	r5, [pc, #468]	; (1000e98c <main+0x1f0>)
1000e7b6:	602b      	str	r3, [r5, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_MSP(void)
{
  register uint32_t result;

  __ASM volatile ("MRS %0, msp\n" : "=r" (result) );
1000e7b8:	f3ef 8308 	mrs	r3, MSP
	mymsp = __get_MSP();
1000e7bc:	4e74      	ldr	r6, [pc, #464]	; (1000e990 <main+0x1f4>)
1000e7be:	6033      	str	r3, [r6, #0]
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE uint32_t __get_CONTROL(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, control" : "=r" (result) );
1000e7c0:	f3ef 8314 	mrs	r3, CONTROL
	myctrl = __get_CONTROL();
1000e7c4:	4c73      	ldr	r4, [pc, #460]	; (1000e994 <main+0x1f8>)
1000e7c6:	6023      	str	r3, [r4, #0]
	DBG_LOG("PSP: 0x%lx, MSP: 0x%lx, CONTROL: 0x%lx", mypsp, mymsp, myctrl);
1000e7c8:	4873      	ldr	r0, [pc, #460]	; (1000e998 <main+0x1fc>)
1000e7ca:	4b74      	ldr	r3, [pc, #464]	; (1000e99c <main+0x200>)
1000e7cc:	4798      	blx	r3
1000e7ce:	6829      	ldr	r1, [r5, #0]
1000e7d0:	6832      	ldr	r2, [r6, #0]
1000e7d2:	6823      	ldr	r3, [r4, #0]
1000e7d4:	4872      	ldr	r0, [pc, #456]	; (1000e9a0 <main+0x204>)
1000e7d6:	4c73      	ldr	r4, [pc, #460]	; (1000e9a4 <main+0x208>)
1000e7d8:	47a0      	blx	r4

	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e7da:	4b73      	ldr	r3, [pc, #460]	; (1000e9a8 <main+0x20c>)
1000e7dc:	4798      	blx	r3

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e7de:	4b73      	ldr	r3, [pc, #460]	; (1000e9ac <main+0x210>)
1000e7e0:	4798      	blx	r3

	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e7e2:	4b73      	ldr	r3, [pc, #460]	; (1000e9b0 <main+0x214>)
1000e7e4:	4798      	blx	r3

	
	// Buttons
	sms_button_gpio_init();
1000e7e6:	4b73      	ldr	r3, [pc, #460]	; (1000e9b4 <main+0x218>)
1000e7e8:	4798      	blx	r3

	
	// LED
	sms_led_gpio_init();
1000e7ea:	4b73      	ldr	r3, [pc, #460]	; (1000e9b8 <main+0x21c>)
1000e7ec:	4798      	blx	r3

	
	// I2C
	sms_i2c_master_configure();
1000e7ee:	4b73      	ldr	r3, [pc, #460]	; (1000e9bc <main+0x220>)
1000e7f0:	4798      	blx	r3

	
	// SPI
	sms_spi_master_configure();
1000e7f2:	4b73      	ldr	r3, [pc, #460]	; (1000e9c0 <main+0x224>)
1000e7f4:	4798      	blx	r3

	
	// MPU
	sms_imu_configure_gpio();
1000e7f6:	4b73      	ldr	r3, [pc, #460]	; (1000e9c4 <main+0x228>)
1000e7f8:	4798      	blx	r3

	
	// monitoring...
	sms_monitor_configure_gpio();
1000e7fa:	4b73      	ldr	r3, [pc, #460]	; (1000e9c8 <main+0x22c>)
1000e7fc:	4798      	blx	r3

	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e7fe:	2000      	movs	r0, #0
1000e800:	4b72      	ldr	r3, [pc, #456]	; (1000e9cc <main+0x230>)
1000e802:	4798      	blx	r3

	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e804:	4b72      	ldr	r3, [pc, #456]	; (1000e9d0 <main+0x234>)
1000e806:	4798      	blx	r3
	sms_pressure_define_services();
1000e808:	4b72      	ldr	r3, [pc, #456]	; (1000e9d4 <main+0x238>)
1000e80a:	4798      	blx	r3
	sms_imu_define_services();
1000e80c:	4b72      	ldr	r3, [pc, #456]	; (1000e9d8 <main+0x23c>)
1000e80e:	4798      	blx	r3

	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e810:	4872      	ldr	r0, [pc, #456]	; (1000e9dc <main+0x240>)
1000e812:	4b73      	ldr	r3, [pc, #460]	; (1000e9e0 <main+0x244>)
1000e814:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e816:	4b73      	ldr	r3, [pc, #460]	; (1000e9e4 <main+0x248>)
1000e818:	4798      	blx	r3

	
	// MPU
	sms_imu_register_callbacks();
1000e81a:	4b73      	ldr	r3, [pc, #460]	; (1000e9e8 <main+0x24c>)
1000e81c:	4798      	blx	r3


	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e81e:	4a73      	ldr	r2, [pc, #460]	; (1000e9ec <main+0x250>)
1000e820:	2100      	movs	r1, #0
1000e822:	2000      	movs	r0, #0
1000e824:	4c72      	ldr	r4, [pc, #456]	; (1000e9f0 <main+0x254>)
1000e826:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e828:	4a72      	ldr	r2, [pc, #456]	; (1000e9f4 <main+0x258>)
1000e82a:	2102      	movs	r1, #2
1000e82c:	2000      	movs	r0, #0
1000e82e:	47a0      	blx	r4



	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e830:	2100      	movs	r1, #0
1000e832:	2000      	movs	r0, #0
1000e834:	4b70      	ldr	r3, [pc, #448]	; (1000e9f8 <main+0x25c>)
1000e836:	4798      	blx	r3

	
	/* Goto sleep
	* ---------- */
	sms_ble_power_down();
1000e838:	4b70      	ldr	r3, [pc, #448]	; (1000e9fc <main+0x260>)
1000e83a:	4798      	blx	r3
	static uint32_t mpu_cnt = 0;
	static uint32_t press_cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e83c:	4f4f      	ldr	r7, [pc, #316]	; (1000e97c <main+0x1e0>)
1000e83e:	4e70      	ldr	r6, [pc, #448]	; (1000ea00 <main+0x264>)
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e840:	4d59      	ldr	r5, [pc, #356]	; (1000e9a8 <main+0x20c>)
	static uint32_t mpu_cnt = 0;
	static uint32_t press_cnt = 0;
	while(true)
	{
		/* BLE event task --> BLOCKING FUNCTION! */
		ble_status = ble_event_task(ble_instance.timeout);
1000e842:	6878      	ldr	r0, [r7, #4]
1000e844:	47b0      	blx	r6
1000e846:	0004      	movs	r4, r0
		
		/* Return from BLE event task --> EVERYTHING TAKES PLACE HERE! */
		acquire_sleep_lock();
1000e848:	47a8      	blx	r5
		if(ble_status == AT_BLE_SUCCESS)
1000e84a:	2c00      	cmp	r4, #0
1000e84c:	d17d      	bne.n	1000e94a <main+0x1ae>
		{
			/* ******************************************
			 * SENSOR INTERRUPT REGION
			 * ****************************************** */
			if(button_instance.btn0.new_int) {
1000e84e:	4b6d      	ldr	r3, [pc, #436]	; (1000ea04 <main+0x268>)
1000e850:	78db      	ldrb	r3, [r3, #3]
1000e852:	2b00      	cmp	r3, #0
1000e854:	d00b      	beq.n	1000e86e <main+0xd2>
				button_instance.btn0.new_int = false;
1000e856:	2200      	movs	r2, #0
1000e858:	4b6a      	ldr	r3, [pc, #424]	; (1000ea04 <main+0x268>)
1000e85a:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000e85c:	484e      	ldr	r0, [pc, #312]	; (1000e998 <main+0x1fc>)
1000e85e:	4b4f      	ldr	r3, [pc, #316]	; (1000e99c <main+0x200>)
1000e860:	4798      	blx	r3
1000e862:	4869      	ldr	r0, [pc, #420]	; (1000ea08 <main+0x26c>)
1000e864:	4b4f      	ldr	r3, [pc, #316]	; (1000e9a4 <main+0x208>)
1000e866:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e868:	2000      	movs	r0, #0
1000e86a:	4b68      	ldr	r3, [pc, #416]	; (1000ea0c <main+0x270>)
1000e86c:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
			}
			if(button_instance.btn1.new_int) {
1000e86e:	4b65      	ldr	r3, [pc, #404]	; (1000ea04 <main+0x268>)
1000e870:	7a5b      	ldrb	r3, [r3, #9]
1000e872:	2b00      	cmp	r3, #0
1000e874:	d00b      	beq.n	1000e88e <main+0xf2>
				button_instance.btn1.new_int = false;
1000e876:	2200      	movs	r2, #0
1000e878:	4b62      	ldr	r3, [pc, #392]	; (1000ea04 <main+0x268>)
1000e87a:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000e87c:	4846      	ldr	r0, [pc, #280]	; (1000e998 <main+0x1fc>)
1000e87e:	4b47      	ldr	r3, [pc, #284]	; (1000e99c <main+0x200>)
1000e880:	4798      	blx	r3
1000e882:	4863      	ldr	r0, [pc, #396]	; (1000ea10 <main+0x274>)
1000e884:	4b47      	ldr	r3, [pc, #284]	; (1000e9a4 <main+0x208>)
1000e886:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e888:	2001      	movs	r0, #1
1000e88a:	4b60      	ldr	r3, [pc, #384]	; (1000ea0c <main+0x270>)
1000e88c:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000e88e:	2385      	movs	r3, #133	; 0x85
1000e890:	4a60      	ldr	r2, [pc, #384]	; (1000ea14 <main+0x278>)
1000e892:	5cd3      	ldrb	r3, [r2, r3]
1000e894:	2b00      	cmp	r3, #0
1000e896:	d00f      	beq.n	1000e8b8 <main+0x11c>
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
				//DBG_LOG("MPU int (%lu)... ", mpu_cnt++);
				gpio_pin_set_output_level(DBG_PIN_1, true);
1000e898:	2101      	movs	r1, #1
1000e89a:	200e      	movs	r0, #14
1000e89c:	4c5e      	ldr	r4, [pc, #376]	; (1000ea18 <main+0x27c>)
1000e89e:	47a0      	blx	r4
				sms_imu_poll_data();
1000e8a0:	4b5e      	ldr	r3, [pc, #376]	; (1000ea1c <main+0x280>)
1000e8a2:	4798      	blx	r3
				imu_device.interrupt.new_gyro = false;
1000e8a4:	4b5b      	ldr	r3, [pc, #364]	; (1000ea14 <main+0x278>)
1000e8a6:	2100      	movs	r1, #0
1000e8a8:	2285      	movs	r2, #133	; 0x85
1000e8aa:	5499      	strb	r1, [r3, r2]
				imu_device.interrupt.rts = true;
1000e8ac:	3101      	adds	r1, #1
1000e8ae:	3201      	adds	r2, #1
1000e8b0:	5499      	strb	r1, [r3, r2]
				gpio_pin_set_output_level(DBG_PIN_1, false);
1000e8b2:	2100      	movs	r1, #0
1000e8b4:	200e      	movs	r0, #14
1000e8b6:	47a0      	blx	r4
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.interrupt.new_value) {
1000e8b8:	2329      	movs	r3, #41	; 0x29
1000e8ba:	4a59      	ldr	r2, [pc, #356]	; (1000ea20 <main+0x284>)
1000e8bc:	5cd3      	ldrb	r3, [r2, r3]
1000e8be:	2b00      	cmp	r3, #0
1000e8c0:	d00b      	beq.n	1000e8da <main+0x13e>
				//DBG_LOG("Press int (%lu)... ", press_cnt++);
				gpio_pin_set_output_level(DBG_PIN_1, true);
1000e8c2:	2101      	movs	r1, #1
1000e8c4:	200e      	movs	r0, #14
1000e8c6:	4c54      	ldr	r4, [pc, #336]	; (1000ea18 <main+0x27c>)
1000e8c8:	47a0      	blx	r4
				sms_pressure_poll_data();
1000e8ca:	4b56      	ldr	r3, [pc, #344]	; (1000ea24 <main+0x288>)
1000e8cc:	4798      	blx	r3
				pressure_device.interrupt.new_value = false;
1000e8ce:	2100      	movs	r1, #0
1000e8d0:	2329      	movs	r3, #41	; 0x29
1000e8d2:	4a53      	ldr	r2, [pc, #332]	; (1000ea20 <main+0x284>)
1000e8d4:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_1, false);
1000e8d6:	200e      	movs	r0, #14
1000e8d8:	47a0      	blx	r4
				////sms_dualtimer_stop(DUALTIMER_TIMER1);
				//sms_dualtimer1_fn();
				//timer1_instance.new_int = false;
				//gpio_pin_set_output_level(DBG_PIN_1, false);
			//}
			if(timer2_instance.new_int) {
1000e8da:	4b53      	ldr	r3, [pc, #332]	; (1000ea28 <main+0x28c>)
1000e8dc:	78db      	ldrb	r3, [r3, #3]
1000e8de:	2b00      	cmp	r3, #0
1000e8e0:	d004      	beq.n	1000e8ec <main+0x150>
				//DBG_LOG_DEV("Timer2 int... ");
				//sms_dualtimer_stop(DUALTIMER_TIMER2);
				sms_dualtimer2_fn();
1000e8e2:	4b52      	ldr	r3, [pc, #328]	; (1000ea2c <main+0x290>)
1000e8e4:	4798      	blx	r3
				timer2_instance.new_int = false;
1000e8e6:	2200      	movs	r2, #0
1000e8e8:	4b4f      	ldr	r3, [pc, #316]	; (1000ea28 <main+0x28c>)
1000e8ea:	70da      	strb	r2, [r3, #3]
			}
			
			/* ******************************************
			 * SENDING REGION
			 * ****************************************** */
			if(imu_device.interrupt.rts) {
1000e8ec:	2386      	movs	r3, #134	; 0x86
1000e8ee:	4a49      	ldr	r2, [pc, #292]	; (1000ea14 <main+0x278>)
1000e8f0:	5cd3      	ldrb	r3, [r2, r3]
1000e8f2:	2b00      	cmp	r3, #0
1000e8f4:	d011      	beq.n	1000e91a <main+0x17e>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				if(ble_instance.sending_queue == 0) {
1000e8f6:	4b21      	ldr	r3, [pc, #132]	; (1000e97c <main+0x1e0>)
1000e8f8:	7a1b      	ldrb	r3, [r3, #8]
1000e8fa:	2b00      	cmp	r3, #0
1000e8fc:	d109      	bne.n	1000e912 <main+0x176>
					gpio_pin_set_output_level(DBG_PIN_2, true);
1000e8fe:	2101      	movs	r1, #1
1000e900:	200f      	movs	r0, #15
1000e902:	4c45      	ldr	r4, [pc, #276]	; (1000ea18 <main+0x27c>)
1000e904:	47a0      	blx	r4
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e906:	2002      	movs	r0, #2
1000e908:	4b49      	ldr	r3, [pc, #292]	; (1000ea30 <main+0x294>)
1000e90a:	4798      	blx	r3
					gpio_pin_set_output_level(DBG_PIN_2, false);
1000e90c:	2100      	movs	r1, #0
1000e90e:	200f      	movs	r0, #15
1000e910:	47a0      	blx	r4
				}
				else {
					//DBG_LOG_CONT("flushing!");
				}
				imu_device.interrupt.rts = false;
1000e912:	2100      	movs	r1, #0
1000e914:	2386      	movs	r3, #134	; 0x86
1000e916:	4a3f      	ldr	r2, [pc, #252]	; (1000ea14 <main+0x278>)
1000e918:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
			}
			if(pressure_device.interrupt.rts) {
1000e91a:	232a      	movs	r3, #42	; 0x2a
1000e91c:	4a40      	ldr	r2, [pc, #256]	; (1000ea20 <main+0x284>)
1000e91e:	5cd3      	ldrb	r3, [r2, r3]
1000e920:	2b00      	cmp	r3, #0
1000e922:	d08e      	beq.n	1000e842 <main+0xa6>
				//DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				if(ble_instance.sending_queue == 0) {
1000e924:	4b15      	ldr	r3, [pc, #84]	; (1000e97c <main+0x1e0>)
1000e926:	7a1b      	ldrb	r3, [r3, #8]
1000e928:	2b00      	cmp	r3, #0
1000e92a:	d109      	bne.n	1000e940 <main+0x1a4>
					gpio_pin_set_output_level(DBG_PIN_2, true);
1000e92c:	2101      	movs	r1, #1
1000e92e:	200f      	movs	r0, #15
1000e930:	4c39      	ldr	r4, [pc, #228]	; (1000ea18 <main+0x27c>)
1000e932:	47a0      	blx	r4
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e934:	2001      	movs	r0, #1
1000e936:	4b3e      	ldr	r3, [pc, #248]	; (1000ea30 <main+0x294>)
1000e938:	4798      	blx	r3
					gpio_pin_set_output_level(DBG_PIN_2, false);
1000e93a:	2100      	movs	r1, #0
1000e93c:	200f      	movs	r0, #15
1000e93e:	47a0      	blx	r4
				}
				else {
					//DBG_LOG_CONT("flushing!");
				}
				pressure_device.interrupt.rts = false;
1000e940:	2100      	movs	r1, #0
1000e942:	232a      	movs	r3, #42	; 0x2a
1000e944:	4a36      	ldr	r2, [pc, #216]	; (1000ea20 <main+0x284>)
1000e946:	54d1      	strb	r1, [r2, r3]
1000e948:	e77b      	b.n	1000e842 <main+0xa6>
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
			}
			//DBG_LOG("BLE event task end");
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT)
1000e94a:	2c45      	cmp	r4, #69	; 0x45
1000e94c:	d106      	bne.n	1000e95c <main+0x1c0>
		{
			DBG_LOG("GAP timeout");
1000e94e:	4812      	ldr	r0, [pc, #72]	; (1000e998 <main+0x1fc>)
1000e950:	4b12      	ldr	r3, [pc, #72]	; (1000e99c <main+0x200>)
1000e952:	4798      	blx	r3
1000e954:	4837      	ldr	r0, [pc, #220]	; (1000ea34 <main+0x298>)
1000e956:	4b13      	ldr	r3, [pc, #76]	; (1000e9a4 <main+0x208>)
1000e958:	4798      	blx	r3
1000e95a:	e772      	b.n	1000e842 <main+0xa6>
		}
		else if(ble_status == AT_BLE_TIMEOUT)
1000e95c:	2cd0      	cmp	r4, #208	; 0xd0
1000e95e:	d106      	bne.n	1000e96e <main+0x1d2>
		{
			DBG_LOG("Event get timeout");
1000e960:	480d      	ldr	r0, [pc, #52]	; (1000e998 <main+0x1fc>)
1000e962:	4b0e      	ldr	r3, [pc, #56]	; (1000e99c <main+0x200>)
1000e964:	4798      	blx	r3
1000e966:	4834      	ldr	r0, [pc, #208]	; (1000ea38 <main+0x29c>)
1000e968:	4b0e      	ldr	r3, [pc, #56]	; (1000e9a4 <main+0x208>)
1000e96a:	4798      	blx	r3
1000e96c:	e769      	b.n	1000e842 <main+0xa6>
		}
		else
		{
			DBG_LOG("BLE error occurred");
1000e96e:	480a      	ldr	r0, [pc, #40]	; (1000e998 <main+0x1fc>)
1000e970:	4b0a      	ldr	r3, [pc, #40]	; (1000e99c <main+0x200>)
1000e972:	4798      	blx	r3
1000e974:	4831      	ldr	r0, [pc, #196]	; (1000ea3c <main+0x2a0>)
1000e976:	4b0b      	ldr	r3, [pc, #44]	; (1000e9a4 <main+0x208>)
1000e978:	4798      	blx	r3
1000e97a:	e762      	b.n	1000e842 <main+0xa6>
1000e97c:	1001a19c 	.word	0x1001a19c
1000e980:	1000dfcd 	.word	0x1000dfcd
1000e984:	1000b8f9 	.word	0x1000b8f9
1000e988:	1000dcc1 	.word	0x1000dcc1
1000e98c:	1001a220 	.word	0x1001a220
1000e990:	1001a1ac 	.word	0x1001a1ac
1000e994:	1001a194 	.word	0x1001a194
1000e998:	100174f0 	.word	0x100174f0
1000e99c:	1001649d 	.word	0x1001649d
1000e9a0:	1001839c 	.word	0x1001839c
1000e9a4:	1001637d 	.word	0x1001637d
1000e9a8:	1000e521 	.word	0x1000e521
1000e9ac:	1000e759 	.word	0x1000e759
1000e9b0:	1000ab2d 	.word	0x1000ab2d
1000e9b4:	10008ef5 	.word	0x10008ef5
1000e9b8:	1000a315 	.word	0x1000a315
1000e9bc:	10009305 	.word	0x10009305
1000e9c0:	1000a9e5 	.word	0x1000a9e5
1000e9c4:	10009491 	.word	0x10009491
1000e9c8:	100091a5 	.word	0x100091a5
1000e9cc:	1000d449 	.word	0x1000d449
1000e9d0:	10009155 	.word	0x10009155
1000e9d4:	1000a7d1 	.word	0x1000a7d1
1000e9d8:	1000952d 	.word	0x1000952d
1000e9dc:	1000e70d 	.word	0x1000e70d
1000e9e0:	1000e565 	.word	0x1000e565
1000e9e4:	10008f9d 	.word	0x10008f9d
1000e9e8:	100094dd 	.word	0x100094dd
1000e9ec:	1001759c 	.word	0x1001759c
1000e9f0:	1000d379 	.word	0x1000d379
1000e9f4:	100175e8 	.word	0x100175e8
1000e9f8:	1000910d 	.word	0x1000910d
1000e9fc:	10008969 	.word	0x10008969
1000ea00:	1000db55 	.word	0x1000db55
1000ea04:	1001a1b0 	.word	0x1001a1b0
1000ea08:	100183c4 	.word	0x100183c4
1000ea0c:	10008ff1 	.word	0x10008ff1
1000ea10:	100183d4 	.word	0x100183d4
1000ea14:	1001a2e8 	.word	0x1001a2e8
1000ea18:	1000b5b9 	.word	0x1000b5b9
1000ea1c:	1000a101 	.word	0x1000a101
1000ea20:	1001a238 	.word	0x1001a238
1000ea24:	1000a799 	.word	0x1000a799
1000ea28:	1001a2d0 	.word	0x1001a2d0
1000ea2c:	1000ac3d 	.word	0x1000ac3d
1000ea30:	10008bdd 	.word	0x10008bdd
1000ea34:	100183e4 	.word	0x100183e4
1000ea38:	100183f0 	.word	0x100183f0
1000ea3c:	10018404 	.word	0x10018404

1000ea40 <internal_event_post>:
1000ea40:	b570      	push	{r4, r5, r6, lr}
1000ea42:	4d12      	ldr	r5, [pc, #72]	; (1000ea8c <internal_event_post+0x4c>)
1000ea44:	682c      	ldr	r4, [r5, #0]
1000ea46:	2c00      	cmp	r4, #0
1000ea48:	d014      	beq.n	1000ea74 <internal_event_post+0x34>
1000ea4a:	6826      	ldr	r6, [r4, #0]
1000ea4c:	60e2      	str	r2, [r4, #12]
1000ea4e:	602e      	str	r6, [r5, #0]
1000ea50:	2500      	movs	r5, #0
1000ea52:	4a0f      	ldr	r2, [pc, #60]	; (1000ea90 <internal_event_post+0x50>)
1000ea54:	8123      	strh	r3, [r4, #8]
1000ea56:	6813      	ldr	r3, [r2, #0]
1000ea58:	6025      	str	r5, [r4, #0]
1000ea5a:	80a0      	strh	r0, [r4, #4]
1000ea5c:	80e1      	strh	r1, [r4, #6]
1000ea5e:	42ab      	cmp	r3, r5
1000ea60:	d101      	bne.n	1000ea66 <internal_event_post+0x26>
1000ea62:	6014      	str	r4, [r2, #0]
1000ea64:	e011      	b.n	1000ea8a <internal_event_post+0x4a>
1000ea66:	681a      	ldr	r2, [r3, #0]
1000ea68:	2a00      	cmp	r2, #0
1000ea6a:	d001      	beq.n	1000ea70 <internal_event_post+0x30>
1000ea6c:	1c13      	adds	r3, r2, #0
1000ea6e:	e7fa      	b.n	1000ea66 <internal_event_post+0x26>
1000ea70:	601c      	str	r4, [r3, #0]
1000ea72:	e00a      	b.n	1000ea8a <internal_event_post+0x4a>
1000ea74:	b2c4      	uxtb	r4, r0
1000ea76:	2c00      	cmp	r4, #0
1000ea78:	d107      	bne.n	1000ea8a <internal_event_post+0x4a>
1000ea7a:	4c06      	ldr	r4, [pc, #24]	; (1000ea94 <internal_event_post+0x54>)
1000ea7c:	60e2      	str	r2, [r4, #12]
1000ea7e:	2201      	movs	r2, #1
1000ea80:	8123      	strh	r3, [r4, #8]
1000ea82:	4b05      	ldr	r3, [pc, #20]	; (1000ea98 <internal_event_post+0x58>)
1000ea84:	80a0      	strh	r0, [r4, #4]
1000ea86:	80e1      	strh	r1, [r4, #6]
1000ea88:	701a      	strb	r2, [r3, #0]
1000ea8a:	bd70      	pop	{r4, r5, r6, pc}
1000ea8c:	1001a0dc 	.word	0x1001a0dc
1000ea90:	1001a0d8 	.word	0x1001a0d8
1000ea94:	1001a0c4 	.word	0x1001a0c4
1000ea98:	1001a0d4 	.word	0x1001a0d4

1000ea9c <internal_event_init>:
1000ea9c:	b510      	push	{r4, lr}
1000ea9e:	4b08      	ldr	r3, [pc, #32]	; (1000eac0 <internal_event_init+0x24>)
1000eaa0:	0900      	lsrs	r0, r0, #4
1000eaa2:	0100      	lsls	r0, r0, #4
1000eaa4:	681a      	ldr	r2, [r3, #0]
1000eaa6:	1808      	adds	r0, r1, r0
1000eaa8:	4281      	cmp	r1, r0
1000eaaa:	d003      	beq.n	1000eab4 <internal_event_init+0x18>
1000eaac:	600a      	str	r2, [r1, #0]
1000eaae:	1c0a      	adds	r2, r1, #0
1000eab0:	3110      	adds	r1, #16
1000eab2:	e7f9      	b.n	1000eaa8 <internal_event_init+0xc>
1000eab4:	601a      	str	r2, [r3, #0]
1000eab6:	2200      	movs	r2, #0
1000eab8:	4b02      	ldr	r3, [pc, #8]	; (1000eac4 <internal_event_init+0x28>)
1000eaba:	601a      	str	r2, [r3, #0]
1000eabc:	bd10      	pop	{r4, pc}
1000eabe:	46c0      	nop			; (mov r8, r8)
1000eac0:	1001a0dc 	.word	0x1001a0dc
1000eac4:	1001a0d8 	.word	0x1001a0d8

1000eac8 <special_events_handler>:
1000eac8:	b538      	push	{r3, r4, r5, lr}
1000eaca:	4c1b      	ldr	r4, [pc, #108]	; (1000eb38 <special_events_handler+0x70>)
1000eacc:	1c03      	adds	r3, r0, #0
1000eace:	8825      	ldrh	r5, [r4, #0]
1000ead0:	1c08      	adds	r0, r1, #0
1000ead2:	1c21      	adds	r1, r4, #0
1000ead4:	429d      	cmp	r5, r3
1000ead6:	d107      	bne.n	1000eae8 <special_events_handler+0x20>
1000ead8:	88a5      	ldrh	r5, [r4, #4]
1000eada:	4285      	cmp	r5, r0
1000eadc:	d104      	bne.n	1000eae8 <special_events_handler+0x20>
1000eade:	2301      	movs	r3, #1
1000eae0:	425b      	negs	r3, r3
1000eae2:	8023      	strh	r3, [r4, #0]
1000eae4:	60a2      	str	r2, [r4, #8]
1000eae6:	e009      	b.n	1000eafc <special_events_handler+0x34>
1000eae8:	884c      	ldrh	r4, [r1, #2]
1000eaea:	429c      	cmp	r4, r3
1000eaec:	d10a      	bne.n	1000eb04 <special_events_handler+0x3c>
1000eaee:	888c      	ldrh	r4, [r1, #4]
1000eaf0:	4284      	cmp	r4, r0
1000eaf2:	d107      	bne.n	1000eb04 <special_events_handler+0x3c>
1000eaf4:	2301      	movs	r3, #1
1000eaf6:	425b      	negs	r3, r3
1000eaf8:	804b      	strh	r3, [r1, #2]
1000eafa:	608a      	str	r2, [r1, #8]
1000eafc:	4b0f      	ldr	r3, [pc, #60]	; (1000eb3c <special_events_handler+0x74>)
1000eafe:	4798      	blx	r3
1000eb00:	2001      	movs	r0, #1
1000eb02:	e017      	b.n	1000eb34 <special_events_handler+0x6c>
1000eb04:	490e      	ldr	r1, [pc, #56]	; (1000eb40 <special_events_handler+0x78>)
1000eb06:	428b      	cmp	r3, r1
1000eb08:	d00e      	beq.n	1000eb28 <special_events_handler+0x60>
1000eb0a:	490e      	ldr	r1, [pc, #56]	; (1000eb44 <special_events_handler+0x7c>)
1000eb0c:	428b      	cmp	r3, r1
1000eb0e:	d007      	beq.n	1000eb20 <special_events_handler+0x58>
1000eb10:	490d      	ldr	r1, [pc, #52]	; (1000eb48 <special_events_handler+0x80>)
1000eb12:	2000      	movs	r0, #0
1000eb14:	428b      	cmp	r3, r1
1000eb16:	d10d      	bne.n	1000eb34 <special_events_handler+0x6c>
1000eb18:	1c10      	adds	r0, r2, #0
1000eb1a:	4b0c      	ldr	r3, [pc, #48]	; (1000eb4c <special_events_handler+0x84>)
1000eb1c:	4798      	blx	r3
1000eb1e:	e7ef      	b.n	1000eb00 <special_events_handler+0x38>
1000eb20:	1c11      	adds	r1, r2, #0
1000eb22:	4b0b      	ldr	r3, [pc, #44]	; (1000eb50 <special_events_handler+0x88>)
1000eb24:	2200      	movs	r2, #0
1000eb26:	e002      	b.n	1000eb2e <special_events_handler+0x66>
1000eb28:	1c11      	adds	r1, r2, #0
1000eb2a:	2200      	movs	r2, #0
1000eb2c:	4b09      	ldr	r3, [pc, #36]	; (1000eb54 <special_events_handler+0x8c>)
1000eb2e:	4798      	blx	r3
1000eb30:	4243      	negs	r3, r0
1000eb32:	4158      	adcs	r0, r3
1000eb34:	bd38      	pop	{r3, r4, r5, pc}
1000eb36:	46c0      	nop			; (mov r8, r8)
1000eb38:	1001b044 	.word	0x1001b044
1000eb3c:	10010525 	.word	0x10010525
1000eb40:	00000e13 	.word	0x00000e13
1000eb44:	00000e15 	.word	0x00000e15
1000eb48:	00000e01 	.word	0x00000e01
1000eb4c:	10010895 	.word	0x10010895
1000eb50:	10010a55 	.word	0x10010a55
1000eb54:	10010b2d 	.word	0x10010b2d

1000eb58 <at_ble_event_get>:
1000eb58:	2300      	movs	r3, #0
1000eb5a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb5c:	b087      	sub	sp, #28
1000eb5e:	9204      	str	r2, [sp, #16]
1000eb60:	7003      	strb	r3, [r0, #0]
1000eb62:	9b04      	ldr	r3, [sp, #16]
1000eb64:	9003      	str	r0, [sp, #12]
1000eb66:	3b01      	subs	r3, #1
1000eb68:	1c0d      	adds	r5, r1, #0
1000eb6a:	9305      	str	r3, [sp, #20]
1000eb6c:	3303      	adds	r3, #3
1000eb6e:	d802      	bhi.n	1000eb76 <at_ble_event_get+0x1e>
1000eb70:	9804      	ldr	r0, [sp, #16]
1000eb72:	4bae      	ldr	r3, [pc, #696]	; (1000ee2c <at_ble_event_get+0x2d4>)
1000eb74:	4798      	blx	r3
1000eb76:	9b05      	ldr	r3, [sp, #20]
1000eb78:	4cad      	ldr	r4, [pc, #692]	; (1000ee30 <at_ble_event_get+0x2d8>)
1000eb7a:	3303      	adds	r3, #3
1000eb7c:	d902      	bls.n	1000eb84 <at_ble_event_get+0x2c>
1000eb7e:	2300      	movs	r3, #0
1000eb80:	9302      	str	r3, [sp, #8]
1000eb82:	e015      	b.n	1000ebb0 <at_ble_event_get+0x58>
1000eb84:	2300      	movs	r3, #0
1000eb86:	9302      	str	r3, [sp, #8]
1000eb88:	6823      	ldr	r3, [r4, #0]
1000eb8a:	2b00      	cmp	r3, #0
1000eb8c:	d113      	bne.n	1000ebb6 <at_ble_event_get+0x5e>
1000eb8e:	9b02      	ldr	r3, [sp, #8]
1000eb90:	2bd0      	cmp	r3, #208	; 0xd0
1000eb92:	d100      	bne.n	1000eb96 <at_ble_event_get+0x3e>
1000eb94:	e2da      	b.n	1000f14c <at_ble_event_get+0x5f4>
1000eb96:	9804      	ldr	r0, [sp, #16]
1000eb98:	4ba6      	ldr	r3, [pc, #664]	; (1000ee34 <at_ble_event_get+0x2dc>)
1000eb9a:	4798      	blx	r3
1000eb9c:	9002      	str	r0, [sp, #8]
1000eb9e:	2802      	cmp	r0, #2
1000eba0:	d1f2      	bne.n	1000eb88 <at_ble_event_get+0x30>
1000eba2:	e03f      	b.n	1000ec24 <at_ble_event_get+0xcc>
1000eba4:	9804      	ldr	r0, [sp, #16]
1000eba6:	4ba3      	ldr	r3, [pc, #652]	; (1000ee34 <at_ble_event_get+0x2dc>)
1000eba8:	4798      	blx	r3
1000ebaa:	9002      	str	r0, [sp, #8]
1000ebac:	2802      	cmp	r0, #2
1000ebae:	d039      	beq.n	1000ec24 <at_ble_event_get+0xcc>
1000ebb0:	6823      	ldr	r3, [r4, #0]
1000ebb2:	2b00      	cmp	r3, #0
1000ebb4:	d0f6      	beq.n	1000eba4 <at_ble_event_get+0x4c>
1000ebb6:	9b02      	ldr	r3, [sp, #8]
1000ebb8:	2bd0      	cmp	r3, #208	; 0xd0
1000ebba:	d100      	bne.n	1000ebbe <at_ble_event_get+0x66>
1000ebbc:	e2c6      	b.n	1000f14c <at_ble_event_get+0x5f4>
1000ebbe:	9b02      	ldr	r3, [sp, #8]
1000ebc0:	3b03      	subs	r3, #3
1000ebc2:	1e5a      	subs	r2, r3, #1
1000ebc4:	4193      	sbcs	r3, r2
1000ebc6:	9a02      	ldr	r2, [sp, #8]
1000ebc8:	425b      	negs	r3, r3
1000ebca:	401a      	ands	r2, r3
1000ebcc:	6823      	ldr	r3, [r4, #0]
1000ebce:	9202      	str	r2, [sp, #8]
1000ebd0:	2b00      	cmp	r3, #0
1000ebd2:	d100      	bne.n	1000ebd6 <at_ble_event_get+0x7e>
1000ebd4:	e2c2      	b.n	1000f15c <at_ble_event_get+0x604>
1000ebd6:	681a      	ldr	r2, [r3, #0]
1000ebd8:	68de      	ldr	r6, [r3, #12]
1000ebda:	6022      	str	r2, [r4, #0]
1000ebdc:	88da      	ldrh	r2, [r3, #6]
1000ebde:	9201      	str	r2, [sp, #4]
1000ebe0:	4a95      	ldr	r2, [pc, #596]	; (1000ee38 <at_ble_event_get+0x2e0>)
1000ebe2:	889c      	ldrh	r4, [r3, #4]
1000ebe4:	6811      	ldr	r1, [r2, #0]
1000ebe6:	6013      	str	r3, [r2, #0]
1000ebe8:	6019      	str	r1, [r3, #0]
1000ebea:	4b94      	ldr	r3, [pc, #592]	; (1000ee3c <at_ble_event_get+0x2e4>)
1000ebec:	781b      	ldrb	r3, [r3, #0]
1000ebee:	2b01      	cmp	r3, #1
1000ebf0:	d10f      	bne.n	1000ec12 <at_ble_event_get+0xba>
1000ebf2:	4b93      	ldr	r3, [pc, #588]	; (1000ee40 <at_ble_event_get+0x2e8>)
1000ebf4:	4a92      	ldr	r2, [pc, #584]	; (1000ee40 <at_ble_event_get+0x2e8>)
1000ebf6:	8898      	ldrh	r0, [r3, #4]
1000ebf8:	88d9      	ldrh	r1, [r3, #6]
1000ebfa:	68d2      	ldr	r2, [r2, #12]
1000ebfc:	891b      	ldrh	r3, [r3, #8]
1000ebfe:	4f91      	ldr	r7, [pc, #580]	; (1000ee44 <at_ble_event_get+0x2ec>)
1000ec00:	47b8      	blx	r7
1000ec02:	2210      	movs	r2, #16
1000ec04:	4b90      	ldr	r3, [pc, #576]	; (1000ee48 <at_ble_event_get+0x2f0>)
1000ec06:	488e      	ldr	r0, [pc, #568]	; (1000ee40 <at_ble_event_get+0x2e8>)
1000ec08:	2100      	movs	r1, #0
1000ec0a:	4798      	blx	r3
1000ec0c:	2300      	movs	r3, #0
1000ec0e:	4a8b      	ldr	r2, [pc, #556]	; (1000ee3c <at_ble_event_get+0x2e4>)
1000ec10:	7013      	strb	r3, [r2, #0]
1000ec12:	9b02      	ldr	r3, [sp, #8]
1000ec14:	2b00      	cmp	r3, #0
1000ec16:	d114      	bne.n	1000ec42 <at_ble_event_get+0xea>
1000ec18:	4b8c      	ldr	r3, [pc, #560]	; (1000ee4c <at_ble_event_get+0x2f4>)
1000ec1a:	429c      	cmp	r4, r3
1000ec1c:	d009      	beq.n	1000ec32 <at_ble_event_get+0xda>
1000ec1e:	4b8c      	ldr	r3, [pc, #560]	; (1000ee50 <at_ble_event_get+0x2f8>)
1000ec20:	429c      	cmp	r4, r3
1000ec22:	d127      	bne.n	1000ec74 <at_ble_event_get+0x11c>
1000ec24:	233a      	movs	r3, #58	; 0x3a
1000ec26:	9a03      	ldr	r2, [sp, #12]
1000ec28:	7013      	strb	r3, [r2, #0]
1000ec2a:	2300      	movs	r3, #0
1000ec2c:	9302      	str	r3, [sp, #8]
1000ec2e:	1c1d      	adds	r5, r3, #0
1000ec30:	e007      	b.n	1000ec42 <at_ble_event_get+0xea>
1000ec32:	9b01      	ldr	r3, [sp, #4]
1000ec34:	42a3      	cmp	r3, r4
1000ec36:	d000      	beq.n	1000ec3a <at_ble_event_get+0xe2>
1000ec38:	e28a      	b.n	1000f150 <at_ble_event_get+0x5f8>
1000ec3a:	2338      	movs	r3, #56	; 0x38
1000ec3c:	9a03      	ldr	r2, [sp, #12]
1000ec3e:	7013      	strb	r3, [r2, #0]
1000ec40:	602e      	str	r6, [r5, #0]
1000ec42:	9b03      	ldr	r3, [sp, #12]
1000ec44:	781b      	ldrb	r3, [r3, #0]
1000ec46:	2b3b      	cmp	r3, #59	; 0x3b
1000ec48:	d101      	bne.n	1000ec4e <at_ble_event_get+0xf6>
1000ec4a:	4b82      	ldr	r3, [pc, #520]	; (1000ee54 <at_ble_event_get+0x2fc>)
1000ec4c:	4798      	blx	r3
1000ec4e:	9b03      	ldr	r3, [sp, #12]
1000ec50:	781b      	ldrb	r3, [r3, #0]
1000ec52:	2b3b      	cmp	r3, #59	; 0x3b
1000ec54:	d003      	beq.n	1000ec5e <at_ble_event_get+0x106>
1000ec56:	9b05      	ldr	r3, [sp, #20]
1000ec58:	3303      	adds	r3, #3
1000ec5a:	d904      	bls.n	1000ec66 <at_ble_event_get+0x10e>
1000ec5c:	e283      	b.n	1000f166 <at_ble_event_get+0x60e>
1000ec5e:	9b02      	ldr	r3, [sp, #8]
1000ec60:	2b00      	cmp	r3, #0
1000ec62:	d088      	beq.n	1000eb76 <at_ble_event_get+0x1e>
1000ec64:	e7f7      	b.n	1000ec56 <at_ble_event_get+0xfe>
1000ec66:	9b02      	ldr	r3, [sp, #8]
1000ec68:	2bd0      	cmp	r3, #208	; 0xd0
1000ec6a:	d100      	bne.n	1000ec6e <at_ble_event_get+0x116>
1000ec6c:	e27b      	b.n	1000f166 <at_ble_event_get+0x60e>
1000ec6e:	4b7a      	ldr	r3, [pc, #488]	; (1000ee58 <at_ble_event_get+0x300>)
1000ec70:	4798      	blx	r3
1000ec72:	e278      	b.n	1000f166 <at_ble_event_get+0x60e>
1000ec74:	9b01      	ldr	r3, [sp, #4]
1000ec76:	2bbb      	cmp	r3, #187	; 0xbb
1000ec78:	d125      	bne.n	1000ecc6 <at_ble_event_get+0x16e>
1000ec7a:	2cbb      	cmp	r4, #187	; 0xbb
1000ec7c:	d123      	bne.n	1000ecc6 <at_ble_event_get+0x16e>
1000ec7e:	466b      	mov	r3, sp
1000ec80:	891b      	ldrh	r3, [r3, #8]
1000ec82:	80ab      	strh	r3, [r5, #4]
1000ec84:	78b3      	ldrb	r3, [r6, #2]
1000ec86:	7872      	ldrb	r2, [r6, #1]
1000ec88:	78f0      	ldrb	r0, [r6, #3]
1000ec8a:	021b      	lsls	r3, r3, #8
1000ec8c:	4313      	orrs	r3, r2
1000ec8e:	7971      	ldrb	r1, [r6, #5]
1000ec90:	7932      	ldrb	r2, [r6, #4]
1000ec92:	70a8      	strb	r0, [r5, #2]
1000ec94:	4871      	ldr	r0, [pc, #452]	; (1000ee5c <at_ble_event_get+0x304>)
1000ec96:	802b      	strh	r3, [r5, #0]
1000ec98:	4283      	cmp	r3, r0
1000ec9a:	d806      	bhi.n	1000ecaa <at_ble_event_get+0x152>
1000ec9c:	4a70      	ldr	r2, [pc, #448]	; (1000ee60 <at_ble_event_get+0x308>)
1000ec9e:	4293      	cmp	r3, r2
1000eca0:	d20b      	bcs.n	1000ecba <at_ble_event_get+0x162>
1000eca2:	4a70      	ldr	r2, [pc, #448]	; (1000ee64 <at_ble_event_get+0x30c>)
1000eca4:	4293      	cmp	r3, r2
1000eca6:	d008      	beq.n	1000ecba <at_ble_event_get+0x162>
1000eca8:	e009      	b.n	1000ecbe <at_ble_event_get+0x166>
1000ecaa:	486f      	ldr	r0, [pc, #444]	; (1000ee68 <at_ble_event_get+0x310>)
1000ecac:	4283      	cmp	r3, r0
1000ecae:	d106      	bne.n	1000ecbe <at_ble_event_get+0x166>
1000ecb0:	020b      	lsls	r3, r1, #8
1000ecb2:	4313      	orrs	r3, r2
1000ecb4:	80ab      	strh	r3, [r5, #4]
1000ecb6:	2337      	movs	r3, #55	; 0x37
1000ecb8:	e002      	b.n	1000ecc0 <at_ble_event_get+0x168>
1000ecba:	2336      	movs	r3, #54	; 0x36
1000ecbc:	e000      	b.n	1000ecc0 <at_ble_event_get+0x168>
1000ecbe:	2300      	movs	r3, #0
1000ecc0:	9a03      	ldr	r2, [sp, #12]
1000ecc2:	7013      	strb	r3, [r2, #0]
1000ecc4:	e7bd      	b.n	1000ec42 <at_ble_event_get+0xea>
1000ecc6:	4b69      	ldr	r3, [pc, #420]	; (1000ee6c <at_ble_event_get+0x314>)
1000ecc8:	429c      	cmp	r4, r3
1000ecca:	d100      	bne.n	1000ecce <at_ble_event_get+0x176>
1000eccc:	e144      	b.n	1000ef58 <at_ble_event_get+0x400>
1000ecce:	d865      	bhi.n	1000ed9c <at_ble_event_get+0x244>
1000ecd0:	4b67      	ldr	r3, [pc, #412]	; (1000ee70 <at_ble_event_get+0x318>)
1000ecd2:	429c      	cmp	r4, r3
1000ecd4:	d100      	bne.n	1000ecd8 <at_ble_event_get+0x180>
1000ecd6:	e1d5      	b.n	1000f084 <at_ble_event_get+0x52c>
1000ecd8:	d82f      	bhi.n	1000ed3a <at_ble_event_get+0x1e2>
1000ecda:	4b66      	ldr	r3, [pc, #408]	; (1000ee74 <at_ble_event_get+0x31c>)
1000ecdc:	429c      	cmp	r4, r3
1000ecde:	d100      	bne.n	1000ece2 <at_ble_event_get+0x18a>
1000ece0:	e1e0      	b.n	1000f0a4 <at_ble_event_get+0x54c>
1000ece2:	d813      	bhi.n	1000ed0c <at_ble_event_get+0x1b4>
1000ece4:	4b64      	ldr	r3, [pc, #400]	; (1000ee78 <at_ble_event_get+0x320>)
1000ece6:	429c      	cmp	r4, r3
1000ece8:	d100      	bne.n	1000ecec <at_ble_event_get+0x194>
1000ecea:	e1a3      	b.n	1000f034 <at_ble_event_get+0x4dc>
1000ecec:	d804      	bhi.n	1000ecf8 <at_ble_event_get+0x1a0>
1000ecee:	2638      	movs	r6, #56	; 0x38
1000ecf0:	42b4      	cmp	r4, r6
1000ecf2:	d100      	bne.n	1000ecf6 <at_ble_event_get+0x19e>
1000ecf4:	e225      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ecf6:	e117      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ecf8:	4b60      	ldr	r3, [pc, #384]	; (1000ee7c <at_ble_event_get+0x324>)
1000ecfa:	429c      	cmp	r4, r3
1000ecfc:	d100      	bne.n	1000ed00 <at_ble_event_get+0x1a8>
1000ecfe:	e19f      	b.n	1000f040 <at_ble_event_get+0x4e8>
1000ed00:	33fe      	adds	r3, #254	; 0xfe
1000ed02:	33ff      	adds	r3, #255	; 0xff
1000ed04:	429c      	cmp	r4, r3
1000ed06:	d100      	bne.n	1000ed0a <at_ble_event_get+0x1b2>
1000ed08:	e1d3      	b.n	1000f0b2 <at_ble_event_get+0x55a>
1000ed0a:	e10d      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed0c:	4b5c      	ldr	r3, [pc, #368]	; (1000ee80 <at_ble_event_get+0x328>)
1000ed0e:	429c      	cmp	r4, r3
1000ed10:	d100      	bne.n	1000ed14 <at_ble_event_get+0x1bc>
1000ed12:	e1a9      	b.n	1000f068 <at_ble_event_get+0x510>
1000ed14:	d808      	bhi.n	1000ed28 <at_ble_event_get+0x1d0>
1000ed16:	4b5b      	ldr	r3, [pc, #364]	; (1000ee84 <at_ble_event_get+0x32c>)
1000ed18:	429c      	cmp	r4, r3
1000ed1a:	d100      	bne.n	1000ed1e <at_ble_event_get+0x1c6>
1000ed1c:	e196      	b.n	1000f04c <at_ble_event_get+0x4f4>
1000ed1e:	4b5a      	ldr	r3, [pc, #360]	; (1000ee88 <at_ble_event_get+0x330>)
1000ed20:	429c      	cmp	r4, r3
1000ed22:	d100      	bne.n	1000ed26 <at_ble_event_get+0x1ce>
1000ed24:	e199      	b.n	1000f05a <at_ble_event_get+0x502>
1000ed26:	e0ff      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed28:	4b58      	ldr	r3, [pc, #352]	; (1000ee8c <at_ble_event_get+0x334>)
1000ed2a:	429c      	cmp	r4, r3
1000ed2c:	d100      	bne.n	1000ed30 <at_ble_event_get+0x1d8>
1000ed2e:	e1a2      	b.n	1000f076 <at_ble_event_get+0x51e>
1000ed30:	4b57      	ldr	r3, [pc, #348]	; (1000ee90 <at_ble_event_get+0x338>)
1000ed32:	429c      	cmp	r4, r3
1000ed34:	d100      	bne.n	1000ed38 <at_ble_event_get+0x1e0>
1000ed36:	e1d4      	b.n	1000f0e2 <at_ble_event_get+0x58a>
1000ed38:	e0f6      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed3a:	4b56      	ldr	r3, [pc, #344]	; (1000ee94 <at_ble_event_get+0x33c>)
1000ed3c:	429c      	cmp	r4, r3
1000ed3e:	d100      	bne.n	1000ed42 <at_ble_event_get+0x1ea>
1000ed40:	e1c8      	b.n	1000f0d4 <at_ble_event_get+0x57c>
1000ed42:	d812      	bhi.n	1000ed6a <at_ble_event_get+0x212>
1000ed44:	4b54      	ldr	r3, [pc, #336]	; (1000ee98 <at_ble_event_get+0x340>)
1000ed46:	429c      	cmp	r4, r3
1000ed48:	d100      	bne.n	1000ed4c <at_ble_event_get+0x1f4>
1000ed4a:	e1d1      	b.n	1000f0f0 <at_ble_event_get+0x598>
1000ed4c:	d804      	bhi.n	1000ed58 <at_ble_event_get+0x200>
1000ed4e:	4b53      	ldr	r3, [pc, #332]	; (1000ee9c <at_ble_event_get+0x344>)
1000ed50:	429c      	cmp	r4, r3
1000ed52:	d100      	bne.n	1000ed56 <at_ble_event_get+0x1fe>
1000ed54:	e19b      	b.n	1000f08e <at_ble_event_get+0x536>
1000ed56:	e0e7      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed58:	4b51      	ldr	r3, [pc, #324]	; (1000eea0 <at_ble_event_get+0x348>)
1000ed5a:	429c      	cmp	r4, r3
1000ed5c:	d100      	bne.n	1000ed60 <at_ble_event_get+0x208>
1000ed5e:	e1ad      	b.n	1000f0bc <at_ble_event_get+0x564>
1000ed60:	4b50      	ldr	r3, [pc, #320]	; (1000eea4 <at_ble_event_get+0x34c>)
1000ed62:	429c      	cmp	r4, r3
1000ed64:	d100      	bne.n	1000ed68 <at_ble_event_get+0x210>
1000ed66:	e1b0      	b.n	1000f0ca <at_ble_event_get+0x572>
1000ed68:	e0de      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed6a:	4b4f      	ldr	r3, [pc, #316]	; (1000eea8 <at_ble_event_get+0x350>)
1000ed6c:	429c      	cmp	r4, r3
1000ed6e:	d100      	bne.n	1000ed72 <at_ble_event_get+0x21a>
1000ed70:	e0e0      	b.n	1000ef34 <at_ble_event_get+0x3dc>
1000ed72:	d809      	bhi.n	1000ed88 <at_ble_event_get+0x230>
1000ed74:	3b08      	subs	r3, #8
1000ed76:	429c      	cmp	r4, r3
1000ed78:	d100      	bne.n	1000ed7c <at_ble_event_get+0x224>
1000ed7a:	e0d7      	b.n	1000ef2c <at_ble_event_get+0x3d4>
1000ed7c:	4b4b      	ldr	r3, [pc, #300]	; (1000eeac <at_ble_event_get+0x354>)
1000ed7e:	2639      	movs	r6, #57	; 0x39
1000ed80:	429c      	cmp	r4, r3
1000ed82:	d100      	bne.n	1000ed86 <at_ble_event_get+0x22e>
1000ed84:	e1dd      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ed86:	e0cf      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed88:	23d1      	movs	r3, #209	; 0xd1
1000ed8a:	011b      	lsls	r3, r3, #4
1000ed8c:	429c      	cmp	r4, r3
1000ed8e:	d100      	bne.n	1000ed92 <at_ble_event_get+0x23a>
1000ed90:	e0d6      	b.n	1000ef40 <at_ble_event_get+0x3e8>
1000ed92:	4b47      	ldr	r3, [pc, #284]	; (1000eeb0 <at_ble_event_get+0x358>)
1000ed94:	429c      	cmp	r4, r3
1000ed96:	d100      	bne.n	1000ed9a <at_ble_event_get+0x242>
1000ed98:	e0d8      	b.n	1000ef4c <at_ble_event_get+0x3f4>
1000ed9a:	e0c5      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ed9c:	4b45      	ldr	r3, [pc, #276]	; (1000eeb4 <at_ble_event_get+0x35c>)
1000ed9e:	429c      	cmp	r4, r3
1000eda0:	d100      	bne.n	1000eda4 <at_ble_event_get+0x24c>
1000eda2:	e117      	b.n	1000efd4 <at_ble_event_get+0x47c>
1000eda4:	d82e      	bhi.n	1000ee04 <at_ble_event_get+0x2ac>
1000eda6:	4b44      	ldr	r3, [pc, #272]	; (1000eeb8 <at_ble_event_get+0x360>)
1000eda8:	429c      	cmp	r4, r3
1000edaa:	d100      	bne.n	1000edae <at_ble_event_get+0x256>
1000edac:	e13d      	b.n	1000f02a <at_ble_event_get+0x4d2>
1000edae:	d812      	bhi.n	1000edd6 <at_ble_event_get+0x27e>
1000edb0:	4b42      	ldr	r3, [pc, #264]	; (1000eebc <at_ble_event_get+0x364>)
1000edb2:	429c      	cmp	r4, r3
1000edb4:	d100      	bne.n	1000edb8 <at_ble_event_get+0x260>
1000edb6:	e0e8      	b.n	1000ef8a <at_ble_event_get+0x432>
1000edb8:	d804      	bhi.n	1000edc4 <at_ble_event_get+0x26c>
1000edba:	3b03      	subs	r3, #3
1000edbc:	429c      	cmp	r4, r3
1000edbe:	d100      	bne.n	1000edc2 <at_ble_event_get+0x26a>
1000edc0:	e0d0      	b.n	1000ef64 <at_ble_event_get+0x40c>
1000edc2:	e0b1      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000edc4:	4b3e      	ldr	r3, [pc, #248]	; (1000eec0 <at_ble_event_get+0x368>)
1000edc6:	429c      	cmp	r4, r3
1000edc8:	d100      	bne.n	1000edcc <at_ble_event_get+0x274>
1000edca:	e0d0      	b.n	1000ef6e <at_ble_event_get+0x416>
1000edcc:	4b3d      	ldr	r3, [pc, #244]	; (1000eec4 <at_ble_event_get+0x36c>)
1000edce:	429c      	cmp	r4, r3
1000edd0:	d100      	bne.n	1000edd4 <at_ble_event_get+0x27c>
1000edd2:	e0f9      	b.n	1000efc8 <at_ble_event_get+0x470>
1000edd4:	e0a8      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000edd6:	4b3c      	ldr	r3, [pc, #240]	; (1000eec8 <at_ble_event_get+0x370>)
1000edd8:	429c      	cmp	r4, r3
1000edda:	d100      	bne.n	1000edde <at_ble_event_get+0x286>
1000eddc:	e0db      	b.n	1000ef96 <at_ble_event_get+0x43e>
1000edde:	d808      	bhi.n	1000edf2 <at_ble_event_get+0x29a>
1000ede0:	4b3a      	ldr	r3, [pc, #232]	; (1000eecc <at_ble_event_get+0x374>)
1000ede2:	429c      	cmp	r4, r3
1000ede4:	d100      	bne.n	1000ede8 <at_ble_event_get+0x290>
1000ede6:	e11b      	b.n	1000f020 <at_ble_event_get+0x4c8>
1000ede8:	4b39      	ldr	r3, [pc, #228]	; (1000eed0 <at_ble_event_get+0x378>)
1000edea:	429c      	cmp	r4, r3
1000edec:	d100      	bne.n	1000edf0 <at_ble_event_get+0x298>
1000edee:	e0d8      	b.n	1000efa2 <at_ble_event_get+0x44a>
1000edf0:	e09a      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000edf2:	4b38      	ldr	r3, [pc, #224]	; (1000eed4 <at_ble_event_get+0x37c>)
1000edf4:	429c      	cmp	r4, r3
1000edf6:	d100      	bne.n	1000edfa <at_ble_event_get+0x2a2>
1000edf8:	e0d8      	b.n	1000efac <at_ble_event_get+0x454>
1000edfa:	4b37      	ldr	r3, [pc, #220]	; (1000eed8 <at_ble_event_get+0x380>)
1000edfc:	429c      	cmp	r4, r3
1000edfe:	d100      	bne.n	1000ee02 <at_ble_event_get+0x2aa>
1000ee00:	e0db      	b.n	1000efba <at_ble_event_get+0x462>
1000ee02:	e091      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ee04:	4b35      	ldr	r3, [pc, #212]	; (1000eedc <at_ble_event_get+0x384>)
1000ee06:	429c      	cmp	r4, r3
1000ee08:	d100      	bne.n	1000ee0c <at_ble_event_get+0x2b4>
1000ee0a:	e0f7      	b.n	1000effc <at_ble_event_get+0x4a4>
1000ee0c:	d876      	bhi.n	1000eefc <at_ble_event_get+0x3a4>
1000ee0e:	4b34      	ldr	r3, [pc, #208]	; (1000eee0 <at_ble_event_get+0x388>)
1000ee10:	429c      	cmp	r4, r3
1000ee12:	d100      	bne.n	1000ee16 <at_ble_event_get+0x2be>
1000ee14:	e0f8      	b.n	1000f008 <at_ble_event_get+0x4b0>
1000ee16:	d869      	bhi.n	1000eeec <at_ble_event_get+0x394>
1000ee18:	4b32      	ldr	r3, [pc, #200]	; (1000eee4 <at_ble_event_get+0x38c>)
1000ee1a:	429c      	cmp	r4, r3
1000ee1c:	d100      	bne.n	1000ee20 <at_ble_event_get+0x2c8>
1000ee1e:	e0e0      	b.n	1000efe2 <at_ble_event_get+0x48a>
1000ee20:	4b31      	ldr	r3, [pc, #196]	; (1000eee8 <at_ble_event_get+0x390>)
1000ee22:	429c      	cmp	r4, r3
1000ee24:	d100      	bne.n	1000ee28 <at_ble_event_get+0x2d0>
1000ee26:	e0a9      	b.n	1000ef7c <at_ble_event_get+0x424>
1000ee28:	e07e      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ee2a:	46c0      	nop			; (mov r8, r8)
1000ee2c:	1001055d 	.word	0x1001055d
1000ee30:	1001a0d8 	.word	0x1001a0d8
1000ee34:	1000e2bd 	.word	0x1000e2bd
1000ee38:	1001a0dc 	.word	0x1001a0dc
1000ee3c:	1001a0d4 	.word	0x1001a0d4
1000ee40:	1001a0c4 	.word	0x1001a0c4
1000ee44:	1000ea41 	.word	0x1000ea41
1000ee48:	10016235 	.word	0x10016235
1000ee4c:	0000ffff 	.word	0x0000ffff
1000ee50:	0000fffe 	.word	0x0000fffe
1000ee54:	1000e535 	.word	0x1000e535
1000ee58:	1001055f 	.word	0x1001055f
1000ee5c:	0000201e 	.word	0x0000201e
1000ee60:	0000201d 	.word	0x0000201d
1000ee64:	00000c03 	.word	0x00000c03
1000ee68:	0000201f 	.word	0x0000201f
1000ee6c:	00000d1c 	.word	0x00000d1c
1000ee70:	00000c0c 	.word	0x00000c0c
1000ee74:	00000c02 	.word	0x00000c02
1000ee78:	00000a02 	.word	0x00000a02
1000ee7c:	00000a03 	.word	0x00000a03
1000ee80:	00000c06 	.word	0x00000c06
1000ee84:	00000c04 	.word	0x00000c04
1000ee88:	00000c05 	.word	0x00000c05
1000ee8c:	00000c07 	.word	0x00000c07
1000ee90:	00000c09 	.word	0x00000c09
1000ee94:	00000c17 	.word	0x00000c17
1000ee98:	00000c12 	.word	0x00000c12
1000ee9c:	00000c0d 	.word	0x00000c0d
1000eea0:	00000c13 	.word	0x00000c13
1000eea4:	00000c15 	.word	0x00000c15
1000eea8:	00000d08 	.word	0x00000d08
1000eeac:	00000d01 	.word	0x00000d01
1000eeb0:	00000d15 	.word	0x00000d15
1000eeb4:	00000e1b 	.word	0x00000e1b
1000eeb8:	00000e0f 	.word	0x00000e0f
1000eebc:	00000e03 	.word	0x00000e03
1000eec0:	00000e06 	.word	0x00000e06
1000eec4:	00000e0a 	.word	0x00000e0a
1000eec8:	00000e15 	.word	0x00000e15
1000eecc:	00000e11 	.word	0x00000e11
1000eed0:	00000e13 	.word	0x00000e13
1000eed4:	00000e17 	.word	0x00000e17
1000eed8:	00000e19 	.word	0x00000e19
1000eedc:	00000e27 	.word	0x00000e27
1000eee0:	00000e21 	.word	0x00000e21
1000eee4:	00000e1c 	.word	0x00000e1c
1000eee8:	00000e1d 	.word	0x00000e1d
1000eeec:	4b9f      	ldr	r3, [pc, #636]	; (1000f16c <at_ble_event_get+0x614>)
1000eeee:	429c      	cmp	r4, r3
1000eef0:	d07e      	beq.n	1000eff0 <at_ble_event_get+0x498>
1000eef2:	4b9f      	ldr	r3, [pc, #636]	; (1000f170 <at_ble_event_get+0x618>)
1000eef4:	429c      	cmp	r4, r3
1000eef6:	d100      	bne.n	1000eefa <at_ble_event_get+0x3a2>
1000eef8:	e08c      	b.n	1000f014 <at_ble_event_get+0x4bc>
1000eefa:	e015      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000eefc:	4b9d      	ldr	r3, [pc, #628]	; (1000f174 <at_ble_event_get+0x61c>)
1000eefe:	429c      	cmp	r4, r3
1000ef00:	d100      	bne.n	1000ef04 <at_ble_event_get+0x3ac>
1000ef02:	e10a      	b.n	1000f11a <at_ble_event_get+0x5c2>
1000ef04:	d808      	bhi.n	1000ef18 <at_ble_event_get+0x3c0>
1000ef06:	4b9c      	ldr	r3, [pc, #624]	; (1000f178 <at_ble_event_get+0x620>)
1000ef08:	429c      	cmp	r4, r3
1000ef0a:	d100      	bne.n	1000ef0e <at_ble_event_get+0x3b6>
1000ef0c:	e0f7      	b.n	1000f0fe <at_ble_event_get+0x5a6>
1000ef0e:	4b9b      	ldr	r3, [pc, #620]	; (1000f17c <at_ble_event_get+0x624>)
1000ef10:	429c      	cmp	r4, r3
1000ef12:	d100      	bne.n	1000ef16 <at_ble_event_get+0x3be>
1000ef14:	e0fa      	b.n	1000f10c <at_ble_event_get+0x5b4>
1000ef16:	e007      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000ef18:	4b99      	ldr	r3, [pc, #612]	; (1000f180 <at_ble_event_get+0x628>)
1000ef1a:	429c      	cmp	r4, r3
1000ef1c:	d100      	bne.n	1000ef20 <at_ble_event_get+0x3c8>
1000ef1e:	e103      	b.n	1000f128 <at_ble_event_get+0x5d0>
1000ef20:	4b98      	ldr	r3, [pc, #608]	; (1000f184 <at_ble_event_get+0x62c>)
1000ef22:	429c      	cmp	r4, r3
1000ef24:	d100      	bne.n	1000ef28 <at_ble_event_get+0x3d0>
1000ef26:	e106      	b.n	1000f136 <at_ble_event_get+0x5de>
1000ef28:	2600      	movs	r6, #0
1000ef2a:	e10a      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef2c:	1c30      	adds	r0, r6, #0
1000ef2e:	1c29      	adds	r1, r5, #0
1000ef30:	4b95      	ldr	r3, [pc, #596]	; (1000f188 <at_ble_event_get+0x630>)
1000ef32:	e014      	b.n	1000ef5e <at_ble_event_get+0x406>
1000ef34:	1c30      	adds	r0, r6, #0
1000ef36:	1c29      	adds	r1, r5, #0
1000ef38:	4b94      	ldr	r3, [pc, #592]	; (1000f18c <at_ble_event_get+0x634>)
1000ef3a:	4798      	blx	r3
1000ef3c:	2604      	movs	r6, #4
1000ef3e:	e100      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef40:	1c30      	adds	r0, r6, #0
1000ef42:	1c29      	adds	r1, r5, #0
1000ef44:	4b92      	ldr	r3, [pc, #584]	; (1000f190 <at_ble_event_get+0x638>)
1000ef46:	4798      	blx	r3
1000ef48:	2601      	movs	r6, #1
1000ef4a:	e0fa      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef4c:	1c30      	adds	r0, r6, #0
1000ef4e:	1c29      	adds	r1, r5, #0
1000ef50:	4b90      	ldr	r3, [pc, #576]	; (1000f194 <at_ble_event_get+0x63c>)
1000ef52:	4798      	blx	r3
1000ef54:	260f      	movs	r6, #15
1000ef56:	e0f4      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef58:	1c30      	adds	r0, r6, #0
1000ef5a:	1c29      	adds	r1, r5, #0
1000ef5c:	4b8e      	ldr	r3, [pc, #568]	; (1000f198 <at_ble_event_get+0x640>)
1000ef5e:	4798      	blx	r3
1000ef60:	1c06      	adds	r6, r0, #0
1000ef62:	e0ee      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef64:	9801      	ldr	r0, [sp, #4]
1000ef66:	1c31      	adds	r1, r6, #0
1000ef68:	1c2a      	adds	r2, r5, #0
1000ef6a:	4b8c      	ldr	r3, [pc, #560]	; (1000f19c <at_ble_event_get+0x644>)
1000ef6c:	e017      	b.n	1000ef9e <at_ble_event_get+0x446>
1000ef6e:	1c31      	adds	r1, r6, #0
1000ef70:	9801      	ldr	r0, [sp, #4]
1000ef72:	1c2a      	adds	r2, r5, #0
1000ef74:	4b8a      	ldr	r3, [pc, #552]	; (1000f1a0 <at_ble_event_get+0x648>)
1000ef76:	4798      	blx	r3
1000ef78:	2611      	movs	r6, #17
1000ef7a:	e0e2      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef7c:	1c31      	adds	r1, r6, #0
1000ef7e:	9801      	ldr	r0, [sp, #4]
1000ef80:	1c2a      	adds	r2, r5, #0
1000ef82:	4b88      	ldr	r3, [pc, #544]	; (1000f1a4 <at_ble_event_get+0x64c>)
1000ef84:	4798      	blx	r3
1000ef86:	2612      	movs	r6, #18
1000ef88:	e0db      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef8a:	1c30      	adds	r0, r6, #0
1000ef8c:	1c29      	adds	r1, r5, #0
1000ef8e:	4b86      	ldr	r3, [pc, #536]	; (1000f1a8 <at_ble_event_get+0x650>)
1000ef90:	4798      	blx	r3
1000ef92:	2606      	movs	r6, #6
1000ef94:	e0d5      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000ef96:	1c31      	adds	r1, r6, #0
1000ef98:	1c2a      	adds	r2, r5, #0
1000ef9a:	9801      	ldr	r0, [sp, #4]
1000ef9c:	4b83      	ldr	r3, [pc, #524]	; (1000f1ac <at_ble_event_get+0x654>)
1000ef9e:	4798      	blx	r3
1000efa0:	e7de      	b.n	1000ef60 <at_ble_event_get+0x408>
1000efa2:	9801      	ldr	r0, [sp, #4]
1000efa4:	1c31      	adds	r1, r6, #0
1000efa6:	1c2a      	adds	r2, r5, #0
1000efa8:	4b81      	ldr	r3, [pc, #516]	; (1000f1b0 <at_ble_event_get+0x658>)
1000efaa:	e7f8      	b.n	1000ef9e <at_ble_event_get+0x446>
1000efac:	1c31      	adds	r1, r6, #0
1000efae:	9801      	ldr	r0, [sp, #4]
1000efb0:	1c2a      	adds	r2, r5, #0
1000efb2:	4b80      	ldr	r3, [pc, #512]	; (1000f1b4 <at_ble_event_get+0x65c>)
1000efb4:	4798      	blx	r3
1000efb6:	260d      	movs	r6, #13
1000efb8:	e0c3      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000efba:	1c31      	adds	r1, r6, #0
1000efbc:	9801      	ldr	r0, [sp, #4]
1000efbe:	1c2a      	adds	r2, r5, #0
1000efc0:	4b7d      	ldr	r3, [pc, #500]	; (1000f1b8 <at_ble_event_get+0x660>)
1000efc2:	4798      	blx	r3
1000efc4:	260e      	movs	r6, #14
1000efc6:	e0bc      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000efc8:	9801      	ldr	r0, [sp, #4]
1000efca:	1c31      	adds	r1, r6, #0
1000efcc:	1c2a      	adds	r2, r5, #0
1000efce:	4b7b      	ldr	r3, [pc, #492]	; (1000f1bc <at_ble_event_get+0x664>)
1000efd0:	4798      	blx	r3
1000efd2:	e084      	b.n	1000f0de <at_ble_event_get+0x586>
1000efd4:	1c31      	adds	r1, r6, #0
1000efd6:	9801      	ldr	r0, [sp, #4]
1000efd8:	1c2a      	adds	r2, r5, #0
1000efda:	4b79      	ldr	r3, [pc, #484]	; (1000f1c0 <at_ble_event_get+0x668>)
1000efdc:	4798      	blx	r3
1000efde:	260b      	movs	r6, #11
1000efe0:	e0af      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000efe2:	1c31      	adds	r1, r6, #0
1000efe4:	9801      	ldr	r0, [sp, #4]
1000efe6:	1c2a      	adds	r2, r5, #0
1000efe8:	4b76      	ldr	r3, [pc, #472]	; (1000f1c4 <at_ble_event_get+0x66c>)
1000efea:	4798      	blx	r3
1000efec:	2610      	movs	r6, #16
1000efee:	e0a8      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000eff0:	1c30      	adds	r0, r6, #0
1000eff2:	1c29      	adds	r1, r5, #0
1000eff4:	4b74      	ldr	r3, [pc, #464]	; (1000f1c8 <at_ble_event_get+0x670>)
1000eff6:	4798      	blx	r3
1000eff8:	2628      	movs	r6, #40	; 0x28
1000effa:	e0a2      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000effc:	1c30      	adds	r0, r6, #0
1000effe:	1c29      	adds	r1, r5, #0
1000f000:	4b72      	ldr	r3, [pc, #456]	; (1000f1cc <at_ble_event_get+0x674>)
1000f002:	4798      	blx	r3
1000f004:	2629      	movs	r6, #41	; 0x29
1000f006:	e09c      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f008:	1c30      	adds	r0, r6, #0
1000f00a:	1c29      	adds	r1, r5, #0
1000f00c:	4b70      	ldr	r3, [pc, #448]	; (1000f1d0 <at_ble_event_get+0x678>)
1000f00e:	4798      	blx	r3
1000f010:	2627      	movs	r6, #39	; 0x27
1000f012:	e096      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f014:	1c30      	adds	r0, r6, #0
1000f016:	1c29      	adds	r1, r5, #0
1000f018:	4b6e      	ldr	r3, [pc, #440]	; (1000f1d4 <at_ble_event_get+0x67c>)
1000f01a:	4798      	blx	r3
1000f01c:	262a      	movs	r6, #42	; 0x2a
1000f01e:	e090      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f020:	9801      	ldr	r0, [sp, #4]
1000f022:	1c31      	adds	r1, r6, #0
1000f024:	1c2a      	adds	r2, r5, #0
1000f026:	4b6c      	ldr	r3, [pc, #432]	; (1000f1d8 <at_ble_event_get+0x680>)
1000f028:	e7b9      	b.n	1000ef9e <at_ble_event_get+0x446>
1000f02a:	9801      	ldr	r0, [sp, #4]
1000f02c:	1c31      	adds	r1, r6, #0
1000f02e:	1c2a      	adds	r2, r5, #0
1000f030:	4b6a      	ldr	r3, [pc, #424]	; (1000f1dc <at_ble_event_get+0x684>)
1000f032:	e7b4      	b.n	1000ef9e <at_ble_event_get+0x446>
1000f034:	1c30      	adds	r0, r6, #0
1000f036:	1c29      	adds	r1, r5, #0
1000f038:	4b69      	ldr	r3, [pc, #420]	; (1000f1e0 <at_ble_event_get+0x688>)
1000f03a:	4798      	blx	r3
1000f03c:	262b      	movs	r6, #43	; 0x2b
1000f03e:	e080      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f040:	1c30      	adds	r0, r6, #0
1000f042:	1c29      	adds	r1, r5, #0
1000f044:	4b67      	ldr	r3, [pc, #412]	; (1000f1e4 <at_ble_event_get+0x68c>)
1000f046:	4798      	blx	r3
1000f048:	262c      	movs	r6, #44	; 0x2c
1000f04a:	e07a      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f04c:	1c31      	adds	r1, r6, #0
1000f04e:	9801      	ldr	r0, [sp, #4]
1000f050:	1c2a      	adds	r2, r5, #0
1000f052:	4b65      	ldr	r3, [pc, #404]	; (1000f1e8 <at_ble_event_get+0x690>)
1000f054:	4798      	blx	r3
1000f056:	2613      	movs	r6, #19
1000f058:	e073      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f05a:	1c31      	adds	r1, r6, #0
1000f05c:	9801      	ldr	r0, [sp, #4]
1000f05e:	1c2a      	adds	r2, r5, #0
1000f060:	4b62      	ldr	r3, [pc, #392]	; (1000f1ec <at_ble_event_get+0x694>)
1000f062:	4798      	blx	r3
1000f064:	2614      	movs	r6, #20
1000f066:	e06c      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f068:	1c31      	adds	r1, r6, #0
1000f06a:	9801      	ldr	r0, [sp, #4]
1000f06c:	1c2a      	adds	r2, r5, #0
1000f06e:	4b60      	ldr	r3, [pc, #384]	; (1000f1f0 <at_ble_event_get+0x698>)
1000f070:	4798      	blx	r3
1000f072:	2615      	movs	r6, #21
1000f074:	e065      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f076:	1c31      	adds	r1, r6, #0
1000f078:	9801      	ldr	r0, [sp, #4]
1000f07a:	1c2a      	adds	r2, r5, #0
1000f07c:	4b5d      	ldr	r3, [pc, #372]	; (1000f1f4 <at_ble_event_get+0x69c>)
1000f07e:	4798      	blx	r3
1000f080:	2616      	movs	r6, #22
1000f082:	e05e      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f084:	9801      	ldr	r0, [sp, #4]
1000f086:	1c31      	adds	r1, r6, #0
1000f088:	1c2a      	adds	r2, r5, #0
1000f08a:	4b5b      	ldr	r3, [pc, #364]	; (1000f1f8 <at_ble_event_get+0x6a0>)
1000f08c:	e787      	b.n	1000ef9e <at_ble_event_get+0x446>
1000f08e:	1c31      	adds	r1, r6, #0
1000f090:	9801      	ldr	r0, [sp, #4]
1000f092:	1c2a      	adds	r2, r5, #0
1000f094:	4b58      	ldr	r3, [pc, #352]	; (1000f1f8 <at_ble_event_get+0x6a0>)
1000f096:	4798      	blx	r3
1000f098:	88a9      	ldrh	r1, [r5, #4]
1000f09a:	1c06      	adds	r6, r0, #0
1000f09c:	4b57      	ldr	r3, [pc, #348]	; (1000f1fc <at_ble_event_get+0x6a4>)
1000f09e:	8828      	ldrh	r0, [r5, #0]
1000f0a0:	4798      	blx	r3
1000f0a2:	e04e      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f0a4:	1c31      	adds	r1, r6, #0
1000f0a6:	9801      	ldr	r0, [sp, #4]
1000f0a8:	1c2a      	adds	r2, r5, #0
1000f0aa:	4b55      	ldr	r3, [pc, #340]	; (1000f200 <at_ble_event_get+0x6a8>)
1000f0ac:	4798      	blx	r3
1000f0ae:	2623      	movs	r6, #35	; 0x23
1000f0b0:	e047      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f0b2:	9801      	ldr	r0, [sp, #4]
1000f0b4:	1c31      	adds	r1, r6, #0
1000f0b6:	1c2a      	adds	r2, r5, #0
1000f0b8:	4b52      	ldr	r3, [pc, #328]	; (1000f204 <at_ble_event_get+0x6ac>)
1000f0ba:	e770      	b.n	1000ef9e <at_ble_event_get+0x446>
1000f0bc:	9b01      	ldr	r3, [sp, #4]
1000f0be:	1c30      	adds	r0, r6, #0
1000f0c0:	0a1f      	lsrs	r7, r3, #8
1000f0c2:	802f      	strh	r7, [r5, #0]
1000f0c4:	1c29      	adds	r1, r5, #0
1000f0c6:	4b50      	ldr	r3, [pc, #320]	; (1000f208 <at_ble_event_get+0x6b0>)
1000f0c8:	e749      	b.n	1000ef5e <at_ble_event_get+0x406>
1000f0ca:	9801      	ldr	r0, [sp, #4]
1000f0cc:	1c31      	adds	r1, r6, #0
1000f0ce:	1c2a      	adds	r2, r5, #0
1000f0d0:	4b4e      	ldr	r3, [pc, #312]	; (1000f20c <at_ble_event_get+0x6b4>)
1000f0d2:	e764      	b.n	1000ef9e <at_ble_event_get+0x446>
1000f0d4:	1c30      	adds	r0, r6, #0
1000f0d6:	1c29      	adds	r1, r5, #0
1000f0d8:	9a01      	ldr	r2, [sp, #4]
1000f0da:	4b4d      	ldr	r3, [pc, #308]	; (1000f210 <at_ble_event_get+0x6b8>)
1000f0dc:	4798      	blx	r3
1000f0de:	263b      	movs	r6, #59	; 0x3b
1000f0e0:	e02f      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f0e2:	1c31      	adds	r1, r6, #0
1000f0e4:	9801      	ldr	r0, [sp, #4]
1000f0e6:	1c2a      	adds	r2, r5, #0
1000f0e8:	4b4a      	ldr	r3, [pc, #296]	; (1000f214 <at_ble_event_get+0x6bc>)
1000f0ea:	4798      	blx	r3
1000f0ec:	2618      	movs	r6, #24
1000f0ee:	e028      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f0f0:	1c31      	adds	r1, r6, #0
1000f0f2:	9801      	ldr	r0, [sp, #4]
1000f0f4:	1c2a      	adds	r2, r5, #0
1000f0f6:	4b48      	ldr	r3, [pc, #288]	; (1000f218 <at_ble_event_get+0x6c0>)
1000f0f8:	4798      	blx	r3
1000f0fa:	2620      	movs	r6, #32
1000f0fc:	e021      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f0fe:	1c31      	adds	r1, r6, #0
1000f100:	9801      	ldr	r0, [sp, #4]
1000f102:	1c2a      	adds	r2, r5, #0
1000f104:	4b45      	ldr	r3, [pc, #276]	; (1000f21c <at_ble_event_get+0x6c4>)
1000f106:	4798      	blx	r3
1000f108:	2633      	movs	r6, #51	; 0x33
1000f10a:	e01a      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f10c:	1c31      	adds	r1, r6, #0
1000f10e:	9801      	ldr	r0, [sp, #4]
1000f110:	1c2a      	adds	r2, r5, #0
1000f112:	4b43      	ldr	r3, [pc, #268]	; (1000f220 <at_ble_event_get+0x6c8>)
1000f114:	4798      	blx	r3
1000f116:	2630      	movs	r6, #48	; 0x30
1000f118:	e013      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f11a:	1c31      	adds	r1, r6, #0
1000f11c:	9801      	ldr	r0, [sp, #4]
1000f11e:	1c2a      	adds	r2, r5, #0
1000f120:	4b40      	ldr	r3, [pc, #256]	; (1000f224 <at_ble_event_get+0x6cc>)
1000f122:	4798      	blx	r3
1000f124:	2634      	movs	r6, #52	; 0x34
1000f126:	e00c      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f128:	1c31      	adds	r1, r6, #0
1000f12a:	9801      	ldr	r0, [sp, #4]
1000f12c:	1c2a      	adds	r2, r5, #0
1000f12e:	4b3e      	ldr	r3, [pc, #248]	; (1000f228 <at_ble_event_get+0x6d0>)
1000f130:	4798      	blx	r3
1000f132:	2635      	movs	r6, #53	; 0x35
1000f134:	e005      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f136:	1c31      	adds	r1, r6, #0
1000f138:	9801      	ldr	r0, [sp, #4]
1000f13a:	1c2a      	adds	r2, r5, #0
1000f13c:	4b3b      	ldr	r3, [pc, #236]	; (1000f22c <at_ble_event_get+0x6d4>)
1000f13e:	4798      	blx	r3
1000f140:	2632      	movs	r6, #50	; 0x32
1000f142:	9b03      	ldr	r3, [sp, #12]
1000f144:	701e      	strb	r6, [r3, #0]
1000f146:	2300      	movs	r3, #0
1000f148:	9302      	str	r3, [sp, #8]
1000f14a:	e57a      	b.n	1000ec42 <at_ble_event_get+0xea>
1000f14c:	23d0      	movs	r3, #208	; 0xd0
1000f14e:	e7fb      	b.n	1000f148 <at_ble_event_get+0x5f0>
1000f150:	9b01      	ldr	r3, [sp, #4]
1000f152:	9e02      	ldr	r6, [sp, #8]
1000f154:	2bbb      	cmp	r3, #187	; 0xbb
1000f156:	d000      	beq.n	1000f15a <at_ble_event_get+0x602>
1000f158:	e6e6      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000f15a:	e7f2      	b.n	1000f142 <at_ble_event_get+0x5ea>
1000f15c:	9b02      	ldr	r3, [sp, #8]
1000f15e:	2b00      	cmp	r3, #0
1000f160:	d000      	beq.n	1000f164 <at_ble_event_get+0x60c>
1000f162:	e56e      	b.n	1000ec42 <at_ble_event_get+0xea>
1000f164:	e6e0      	b.n	1000ef28 <at_ble_event_get+0x3d0>
1000f166:	9802      	ldr	r0, [sp, #8]
1000f168:	b007      	add	sp, #28
1000f16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f16c:	00000e22 	.word	0x00000e22
1000f170:	00000e25 	.word	0x00000e25
1000f174:	00001b05 	.word	0x00001b05
1000f178:	00001b01 	.word	0x00001b01
1000f17c:	00001b03 	.word	0x00001b03
1000f180:	00001b06 	.word	0x00001b06
1000f184:	00001b08 	.word	0x00001b08
1000f188:	10011389 	.word	0x10011389
1000f18c:	1001136d 	.word	0x1001136d
1000f190:	10011609 	.word	0x10011609
1000f194:	100116f9 	.word	0x100116f9
1000f198:	1001171d 	.word	0x1001171d
1000f19c:	10010701 	.word	0x10010701
1000f1a0:	10010f81 	.word	0x10010f81
1000f1a4:	10010ffd 	.word	0x10010ffd
1000f1a8:	100109b9 	.word	0x100109b9
1000f1ac:	10010a55 	.word	0x10010a55
1000f1b0:	10010b2d 	.word	0x10010b2d
1000f1b4:	10010db5 	.word	0x10010db5
1000f1b8:	10010e55 	.word	0x10010e55
1000f1bc:	10010f0d 	.word	0x10010f0d
1000f1c0:	10010f35 	.word	0x10010f35
1000f1c4:	10010f4b 	.word	0x10010f4b
1000f1c8:	10011015 	.word	0x10011015
1000f1cc:	10011043 	.word	0x10011043
1000f1d0:	10011059 	.word	0x10011059
1000f1d4:	10011083 	.word	0x10011083
1000f1d8:	10010eb1 	.word	0x10010eb1
1000f1dc:	10010edb 	.word	0x10010edb
1000f1e0:	10010141 	.word	0x10010141
1000f1e4:	1001016d 	.word	0x1001016d
1000f1e8:	1001193d 	.word	0x1001193d
1000f1ec:	10011979 	.word	0x10011979
1000f1f0:	100119c1 	.word	0x100119c1
1000f1f4:	10011a05 	.word	0x10011a05
1000f1f8:	10011a39 	.word	0x10011a39
1000f1fc:	100118fd 	.word	0x100118fd
1000f200:	10011b05 	.word	0x10011b05
1000f204:	10011a8d 	.word	0x10011a8d
1000f208:	10010025 	.word	0x10010025
1000f20c:	10010091 	.word	0x10010091
1000f210:	10010055 	.word	0x10010055
1000f214:	10011b15 	.word	0x10011b15
1000f218:	10011b55 	.word	0x10011b55
1000f21c:	10011e1d 	.word	0x10011e1d
1000f220:	10011e27 	.word	0x10011e27
1000f224:	10011e2d 	.word	0x10011e2d
1000f228:	10011e33 	.word	0x10011e33
1000f22c:	10011e3f 	.word	0x10011e3f

1000f230 <internal_event_flush>:
1000f230:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f232:	490e      	ldr	r1, [pc, #56]	; (1000f26c <internal_event_flush+0x3c>)
1000f234:	2400      	movs	r4, #0
1000f236:	680b      	ldr	r3, [r1, #0]
1000f238:	1c0f      	adds	r7, r1, #0
1000f23a:	1c1e      	adds	r6, r3, #0
1000f23c:	4a0c      	ldr	r2, [pc, #48]	; (1000f270 <internal_event_flush+0x40>)
1000f23e:	6815      	ldr	r5, [r2, #0]
1000f240:	9201      	str	r2, [sp, #4]
1000f242:	2b00      	cmp	r3, #0
1000f244:	d00e      	beq.n	1000f264 <internal_event_flush+0x34>
1000f246:	889a      	ldrh	r2, [r3, #4]
1000f248:	6819      	ldr	r1, [r3, #0]
1000f24a:	4282      	cmp	r2, r0
1000f24c:	d107      	bne.n	1000f25e <internal_event_flush+0x2e>
1000f24e:	2c00      	cmp	r4, #0
1000f250:	d001      	beq.n	1000f256 <internal_event_flush+0x26>
1000f252:	6021      	str	r1, [r4, #0]
1000f254:	e000      	b.n	1000f258 <internal_event_flush+0x28>
1000f256:	1c0e      	adds	r6, r1, #0
1000f258:	601d      	str	r5, [r3, #0]
1000f25a:	1c1d      	adds	r5, r3, #0
1000f25c:	1c23      	adds	r3, r4, #0
1000f25e:	1c1c      	adds	r4, r3, #0
1000f260:	1c0b      	adds	r3, r1, #0
1000f262:	e7ee      	b.n	1000f242 <internal_event_flush+0x12>
1000f264:	9b01      	ldr	r3, [sp, #4]
1000f266:	603e      	str	r6, [r7, #0]
1000f268:	601d      	str	r5, [r3, #0]
1000f26a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f26c:	1001a0d8 	.word	0x1001a0d8
1000f270:	1001a0dc 	.word	0x1001a0dc

1000f274 <internal_conn_flush>:
1000f274:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f276:	4a12      	ldr	r2, [pc, #72]	; (1000f2c0 <internal_conn_flush+0x4c>)
1000f278:	9000      	str	r0, [sp, #0]
1000f27a:	6813      	ldr	r3, [r2, #0]
1000f27c:	4811      	ldr	r0, [pc, #68]	; (1000f2c4 <internal_conn_flush+0x50>)
1000f27e:	1c1f      	adds	r7, r3, #0
1000f280:	2100      	movs	r1, #0
1000f282:	4684      	mov	ip, r0
1000f284:	6804      	ldr	r4, [r0, #0]
1000f286:	9201      	str	r2, [sp, #4]
1000f288:	2b00      	cmp	r3, #0
1000f28a:	d014      	beq.n	1000f2b6 <internal_conn_flush+0x42>
1000f28c:	88d8      	ldrh	r0, [r3, #6]
1000f28e:	9a00      	ldr	r2, [sp, #0]
1000f290:	681d      	ldr	r5, [r3, #0]
1000f292:	0a06      	lsrs	r6, r0, #8
1000f294:	4296      	cmp	r6, r2
1000f296:	d10b      	bne.n	1000f2b0 <internal_conn_flush+0x3c>
1000f298:	26fd      	movs	r6, #253	; 0xfd
1000f29a:	4006      	ands	r6, r0
1000f29c:	2e0c      	cmp	r6, #12
1000f29e:	d107      	bne.n	1000f2b0 <internal_conn_flush+0x3c>
1000f2a0:	2900      	cmp	r1, #0
1000f2a2:	d001      	beq.n	1000f2a8 <internal_conn_flush+0x34>
1000f2a4:	600d      	str	r5, [r1, #0]
1000f2a6:	e000      	b.n	1000f2aa <internal_conn_flush+0x36>
1000f2a8:	1c2f      	adds	r7, r5, #0
1000f2aa:	601c      	str	r4, [r3, #0]
1000f2ac:	1c1c      	adds	r4, r3, #0
1000f2ae:	1c0b      	adds	r3, r1, #0
1000f2b0:	1c19      	adds	r1, r3, #0
1000f2b2:	1c2b      	adds	r3, r5, #0
1000f2b4:	e7e8      	b.n	1000f288 <internal_conn_flush+0x14>
1000f2b6:	9b01      	ldr	r3, [sp, #4]
1000f2b8:	601f      	str	r7, [r3, #0]
1000f2ba:	4663      	mov	r3, ip
1000f2bc:	601c      	str	r4, [r3, #0]
1000f2be:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f2c0:	1001a0d8 	.word	0x1001a0d8
1000f2c4:	1001a0dc 	.word	0x1001a0dc

1000f2c8 <at_ble_device_name_set>:
1000f2c8:	b530      	push	{r4, r5, lr}
1000f2ca:	23cf      	movs	r3, #207	; 0xcf
1000f2cc:	2800      	cmp	r0, #0
1000f2ce:	d010      	beq.n	1000f2f2 <at_ble_device_name_set+0x2a>
1000f2d0:	1e4a      	subs	r2, r1, #1
1000f2d2:	2a1f      	cmp	r2, #31
1000f2d4:	d80d      	bhi.n	1000f2f2 <at_ble_device_name_set+0x2a>
1000f2d6:	4a08      	ldr	r2, [pc, #32]	; (1000f2f8 <at_ble_device_name_set+0x30>)
1000f2d8:	1c13      	adds	r3, r2, #0
1000f2da:	33aa      	adds	r3, #170	; 0xaa
1000f2dc:	8019      	strh	r1, [r3, #0]
1000f2de:	2300      	movs	r3, #0
1000f2e0:	1c1c      	adds	r4, r3, #0
1000f2e2:	5cc5      	ldrb	r5, [r0, r3]
1000f2e4:	34ac      	adds	r4, #172	; 0xac
1000f2e6:	3301      	adds	r3, #1
1000f2e8:	5515      	strb	r5, [r2, r4]
1000f2ea:	b2dc      	uxtb	r4, r3
1000f2ec:	428c      	cmp	r4, r1
1000f2ee:	d3f7      	bcc.n	1000f2e0 <at_ble_device_name_set+0x18>
1000f2f0:	2300      	movs	r3, #0
1000f2f2:	1c18      	adds	r0, r3, #0
1000f2f4:	bd30      	pop	{r4, r5, pc}
1000f2f6:	46c0      	nop			; (mov r8, r8)
1000f2f8:	1001b0e2 	.word	0x1001b0e2

1000f2fc <at_ble_addr_get>:
1000f2fc:	b510      	push	{r4, lr}
1000f2fe:	1c04      	adds	r4, r0, #0
1000f300:	20cf      	movs	r0, #207	; 0xcf
1000f302:	2c00      	cmp	r4, #0
1000f304:	d006      	beq.n	1000f314 <at_ble_addr_get+0x18>
1000f306:	4b04      	ldr	r3, [pc, #16]	; (1000f318 <at_ble_addr_get+0x1c>)
1000f308:	38ce      	subs	r0, #206	; 0xce
1000f30a:	1c21      	adds	r1, r4, #0
1000f30c:	4798      	blx	r3
1000f30e:	4b03      	ldr	r3, [pc, #12]	; (1000f31c <at_ble_addr_get+0x20>)
1000f310:	791b      	ldrb	r3, [r3, #4]
1000f312:	7023      	strb	r3, [r4, #0]
1000f314:	bd10      	pop	{r4, pc}
1000f316:	46c0      	nop			; (mov r8, r8)
1000f318:	1001121d 	.word	0x1001121d
1000f31c:	1001b0e2 	.word	0x1001b0e2

1000f320 <at_ble_set_dev_config>:
1000f320:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f322:	7906      	ldrb	r6, [r0, #4]
1000f324:	b089      	sub	sp, #36	; 0x24
1000f326:	25cf      	movs	r5, #207	; 0xcf
1000f328:	2e03      	cmp	r6, #3
1000f32a:	d838      	bhi.n	1000f39e <at_ble_set_dev_config+0x7e>
1000f32c:	7803      	ldrb	r3, [r0, #0]
1000f32e:	3511      	adds	r5, #17
1000f330:	2b0f      	cmp	r3, #15
1000f332:	d834      	bhi.n	1000f39e <at_ble_set_dev_config+0x7e>
1000f334:	2380      	movs	r3, #128	; 0x80
1000f336:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000f338:	3d11      	subs	r5, #17
1000f33a:	009b      	lsls	r3, r3, #2
1000f33c:	429f      	cmp	r7, r3
1000f33e:	d82e      	bhi.n	1000f39e <at_ble_set_dev_config+0x7e>
1000f340:	7fc5      	ldrb	r5, [r0, #31]
1000f342:	7f83      	ldrb	r3, [r0, #30]
1000f344:	01ad      	lsls	r5, r5, #6
1000f346:	015b      	lsls	r3, r3, #5
1000f348:	431d      	orrs	r5, r3
1000f34a:	7ec3      	ldrb	r3, [r0, #27]
1000f34c:	431d      	orrs	r5, r3
1000f34e:	7f43      	ldrb	r3, [r0, #29]
1000f350:	011b      	lsls	r3, r3, #4
1000f352:	431d      	orrs	r5, r3
1000f354:	7f03      	ldrb	r3, [r0, #28]
1000f356:	009b      	lsls	r3, r3, #2
1000f358:	431d      	orrs	r5, r3
1000f35a:	4b12      	ldr	r3, [pc, #72]	; (1000f3a4 <at_ble_set_dev_config+0x84>)
1000f35c:	b2ed      	uxtb	r5, r5
1000f35e:	711e      	strb	r6, [r3, #4]
1000f360:	7903      	ldrb	r3, [r0, #4]
1000f362:	3b02      	subs	r3, #2
1000f364:	2b01      	cmp	r3, #1
1000f366:	d801      	bhi.n	1000f36c <at_ble_set_dev_config+0x4c>
1000f368:	2302      	movs	r3, #2
1000f36a:	7103      	strb	r3, [r0, #4]
1000f36c:	1c04      	adds	r4, r0, #0
1000f36e:	1c23      	adds	r3, r4, #0
1000f370:	330b      	adds	r3, #11
1000f372:	8861      	ldrh	r1, [r4, #2]
1000f374:	9307      	str	r3, [sp, #28]
1000f376:	7923      	ldrb	r3, [r4, #4]
1000f378:	7800      	ldrb	r0, [r0, #0]
1000f37a:	9300      	str	r3, [sp, #0]
1000f37c:	9501      	str	r5, [sp, #4]
1000f37e:	8c25      	ldrh	r5, [r4, #32]
1000f380:	1d62      	adds	r2, r4, #5
1000f382:	9502      	str	r5, [sp, #8]
1000f384:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000f386:	9b07      	ldr	r3, [sp, #28]
1000f388:	9503      	str	r5, [sp, #12]
1000f38a:	9704      	str	r7, [sp, #16]
1000f38c:	4d06      	ldr	r5, [pc, #24]	; (1000f3a8 <at_ble_set_dev_config+0x88>)
1000f38e:	47a8      	blx	r5
1000f390:	7126      	strb	r6, [r4, #4]
1000f392:	1c05      	adds	r5, r0, #0
1000f394:	1c21      	adds	r1, r4, #0
1000f396:	4803      	ldr	r0, [pc, #12]	; (1000f3a4 <at_ble_set_dev_config+0x84>)
1000f398:	2226      	movs	r2, #38	; 0x26
1000f39a:	4b04      	ldr	r3, [pc, #16]	; (1000f3ac <at_ble_set_dev_config+0x8c>)
1000f39c:	4798      	blx	r3
1000f39e:	1c28      	adds	r0, r5, #0
1000f3a0:	b009      	add	sp, #36	; 0x24
1000f3a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3a4:	1001b0e2 	.word	0x1001b0e2
1000f3a8:	10011115 	.word	0x10011115
1000f3ac:	10016223 	.word	0x10016223

1000f3b0 <at_ble_init>:
1000f3b0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f3b2:	b087      	sub	sp, #28
1000f3b4:	af03      	add	r7, sp, #12
1000f3b6:	4954      	ldr	r1, [pc, #336]	; (1000f508 <at_ble_init+0x158>)
1000f3b8:	220b      	movs	r2, #11
1000f3ba:	4b54      	ldr	r3, [pc, #336]	; (1000f50c <at_ble_init+0x15c>)
1000f3bc:	1c04      	adds	r4, r0, #0
1000f3be:	1c38      	adds	r0, r7, #0
1000f3c0:	4798      	blx	r3
1000f3c2:	2205      	movs	r2, #5
1000f3c4:	4b52      	ldr	r3, [pc, #328]	; (1000f510 <at_ble_init+0x160>)
1000f3c6:	2640      	movs	r6, #64	; 0x40
1000f3c8:	801a      	strh	r2, [r3, #0]
1000f3ca:	2300      	movs	r3, #0
1000f3cc:	4a51      	ldr	r2, [pc, #324]	; (1000f514 <at_ble_init+0x164>)
1000f3ce:	6013      	str	r3, [r2, #0]
1000f3d0:	4a51      	ldr	r2, [pc, #324]	; (1000f518 <at_ble_init+0x168>)
1000f3d2:	7013      	strb	r3, [r2, #0]
1000f3d4:	4a51      	ldr	r2, [pc, #324]	; (1000f51c <at_ble_init+0x16c>)
1000f3d6:	7013      	strb	r3, [r2, #0]
1000f3d8:	4b51      	ldr	r3, [pc, #324]	; (1000f520 <at_ble_init+0x170>)
1000f3da:	4798      	blx	r3
1000f3dc:	4b51      	ldr	r3, [pc, #324]	; (1000f524 <at_ble_init+0x174>)
1000f3de:	4798      	blx	r3
1000f3e0:	4b51      	ldr	r3, [pc, #324]	; (1000f528 <at_ble_init+0x178>)
1000f3e2:	4798      	blx	r3
1000f3e4:	4b51      	ldr	r3, [pc, #324]	; (1000f52c <at_ble_init+0x17c>)
1000f3e6:	4798      	blx	r3
1000f3e8:	2c00      	cmp	r4, #0
1000f3ea:	d100      	bne.n	1000f3ee <at_ble_init+0x3e>
1000f3ec:	e089      	b.n	1000f502 <at_ble_init+0x152>
1000f3ee:	68a3      	ldr	r3, [r4, #8]
1000f3f0:	2b00      	cmp	r3, #0
1000f3f2:	d100      	bne.n	1000f3f6 <at_ble_init+0x46>
1000f3f4:	e085      	b.n	1000f502 <at_ble_init+0x152>
1000f3f6:	6923      	ldr	r3, [r4, #16]
1000f3f8:	2b00      	cmp	r3, #0
1000f3fa:	d100      	bne.n	1000f3fe <at_ble_init+0x4e>
1000f3fc:	e081      	b.n	1000f502 <at_ble_init+0x152>
1000f3fe:	6820      	ldr	r0, [r4, #0]
1000f400:	2800      	cmp	r0, #0
1000f402:	d102      	bne.n	1000f40a <at_ble_init+0x5a>
1000f404:	6863      	ldr	r3, [r4, #4]
1000f406:	2b00      	cmp	r3, #0
1000f408:	d17b      	bne.n	1000f502 <at_ble_init+0x152>
1000f40a:	4b49      	ldr	r3, [pc, #292]	; (1000f530 <at_ble_init+0x180>)
1000f40c:	6861      	ldr	r1, [r4, #4]
1000f40e:	4798      	blx	r3
1000f410:	4b48      	ldr	r3, [pc, #288]	; (1000f534 <at_ble_init+0x184>)
1000f412:	4798      	blx	r3
1000f414:	2801      	cmp	r0, #1
1000f416:	d901      	bls.n	1000f41c <at_ble_init+0x6c>
1000f418:	26e2      	movs	r6, #226	; 0xe2
1000f41a:	e072      	b.n	1000f502 <at_ble_init+0x152>
1000f41c:	4846      	ldr	r0, [pc, #280]	; (1000f538 <at_ble_init+0x188>)
1000f41e:	4b47      	ldr	r3, [pc, #284]	; (1000f53c <at_ble_init+0x18c>)
1000f420:	4798      	blx	r3
1000f422:	2800      	cmp	r0, #0
1000f424:	d1f8      	bne.n	1000f418 <at_ble_init+0x68>
1000f426:	1c20      	adds	r0, r4, #0
1000f428:	4b45      	ldr	r3, [pc, #276]	; (1000f540 <at_ble_init+0x190>)
1000f42a:	4798      	blx	r3
1000f42c:	68e0      	ldr	r0, [r4, #12]
1000f42e:	68a1      	ldr	r1, [r4, #8]
1000f430:	4b44      	ldr	r3, [pc, #272]	; (1000f544 <at_ble_init+0x194>)
1000f432:	4798      	blx	r3
1000f434:	466b      	mov	r3, sp
1000f436:	2201      	movs	r2, #1
1000f438:	1cdc      	adds	r4, r3, #3
1000f43a:	1c20      	adds	r0, r4, #0
1000f43c:	a901      	add	r1, sp, #4
1000f43e:	4252      	negs	r2, r2
1000f440:	4b41      	ldr	r3, [pc, #260]	; (1000f548 <at_ble_init+0x198>)
1000f442:	4798      	blx	r3
1000f444:	2800      	cmp	r0, #0
1000f446:	d102      	bne.n	1000f44e <at_ble_init+0x9e>
1000f448:	7823      	ldrb	r3, [r4, #0]
1000f44a:	2b39      	cmp	r3, #57	; 0x39
1000f44c:	d1f2      	bne.n	1000f434 <at_ble_init+0x84>
1000f44e:	4b3f      	ldr	r3, [pc, #252]	; (1000f54c <at_ble_init+0x19c>)
1000f450:	4798      	blx	r3
1000f452:	1e06      	subs	r6, r0, #0
1000f454:	d155      	bne.n	1000f502 <at_ble_init+0x152>
1000f456:	1c03      	adds	r3, r0, #0
1000f458:	2101      	movs	r1, #1
1000f45a:	4a3d      	ldr	r2, [pc, #244]	; (1000f550 <at_ble_init+0x1a0>)
1000f45c:	4249      	negs	r1, r1
1000f45e:	189a      	adds	r2, r3, r2
1000f460:	3312      	adds	r3, #18
1000f462:	8151      	strh	r1, [r2, #10]
1000f464:	2b90      	cmp	r3, #144	; 0x90
1000f466:	d1f7      	bne.n	1000f458 <at_ble_init+0xa8>
1000f468:	4c3a      	ldr	r4, [pc, #232]	; (1000f554 <at_ble_init+0x1a4>)
1000f46a:	3b81      	subs	r3, #129	; 0x81
1000f46c:	7023      	strb	r3, [r4, #0]
1000f46e:	4b3a      	ldr	r3, [pc, #232]	; (1000f558 <at_ble_init+0x1a8>)
1000f470:	4a3a      	ldr	r2, [pc, #232]	; (1000f55c <at_ble_init+0x1ac>)
1000f472:	8063      	strh	r3, [r4, #2]
1000f474:	2300      	movs	r3, #0
1000f476:	7123      	strb	r3, [r4, #4]
1000f478:	3301      	adds	r3, #1
1000f47a:	1e58      	subs	r0, r3, #1
1000f47c:	0119      	lsls	r1, r3, #4
1000f47e:	4301      	orrs	r1, r0
1000f480:	3302      	adds	r3, #2
1000f482:	7011      	strb	r1, [r2, #0]
1000f484:	3201      	adds	r2, #1
1000f486:	2b21      	cmp	r3, #33	; 0x21
1000f488:	d1f7      	bne.n	1000f47a <at_ble_init+0xca>
1000f48a:	33e0      	adds	r3, #224	; 0xe0
1000f48c:	33ff      	adds	r3, #255	; 0xff
1000f48e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000f490:	1c23      	adds	r3, r4, #0
1000f492:	2500      	movs	r5, #0
1000f494:	3373      	adds	r3, #115	; 0x73
1000f496:	701d      	strb	r5, [r3, #0]
1000f498:	1c23      	adds	r3, r4, #0
1000f49a:	3372      	adds	r3, #114	; 0x72
1000f49c:	701d      	strb	r5, [r3, #0]
1000f49e:	1c23      	adds	r3, r4, #0
1000f4a0:	3376      	adds	r3, #118	; 0x76
1000f4a2:	701d      	strb	r5, [r3, #0]
1000f4a4:	1c23      	adds	r3, r4, #0
1000f4a6:	33cc      	adds	r3, #204	; 0xcc
1000f4a8:	801d      	strh	r5, [r3, #0]
1000f4aa:	1c22      	adds	r2, r4, #0
1000f4ac:	23a0      	movs	r3, #160	; 0xa0
1000f4ae:	32d0      	adds	r2, #208	; 0xd0
1000f4b0:	005b      	lsls	r3, r3, #1
1000f4b2:	8013      	strh	r3, [r2, #0]
1000f4b4:	1c22      	adds	r2, r4, #0
1000f4b6:	32ce      	adds	r2, #206	; 0xce
1000f4b8:	8013      	strh	r3, [r2, #0]
1000f4ba:	1c23      	adds	r3, r4, #0
1000f4bc:	33d2      	adds	r3, #210	; 0xd2
1000f4be:	801d      	strh	r5, [r3, #0]
1000f4c0:	22fa      	movs	r2, #250	; 0xfa
1000f4c2:	1c23      	adds	r3, r4, #0
1000f4c4:	0052      	lsls	r2, r2, #1
1000f4c6:	33d4      	adds	r3, #212	; 0xd4
1000f4c8:	801a      	strh	r2, [r3, #0]
1000f4ca:	1c23      	adds	r3, r4, #0
1000f4cc:	33d6      	adds	r3, #214	; 0xd6
1000f4ce:	701d      	strb	r5, [r3, #0]
1000f4d0:	1c20      	adds	r0, r4, #0
1000f4d2:	4b23      	ldr	r3, [pc, #140]	; (1000f560 <at_ble_init+0x1b0>)
1000f4d4:	76e5      	strb	r5, [r4, #27]
1000f4d6:	7725      	strb	r5, [r4, #28]
1000f4d8:	7765      	strb	r5, [r4, #29]
1000f4da:	77a5      	strb	r5, [r4, #30]
1000f4dc:	77e5      	strb	r5, [r4, #31]
1000f4de:	8425      	strh	r5, [r4, #32]
1000f4e0:	8465      	strh	r5, [r4, #34]	; 0x22
1000f4e2:	4798      	blx	r3
1000f4e4:	1c23      	adds	r3, r4, #0
1000f4e6:	2207      	movs	r2, #7
1000f4e8:	3374      	adds	r3, #116	; 0x74
1000f4ea:	701a      	strb	r2, [r3, #0]
1000f4ec:	1c23      	adds	r3, r4, #0
1000f4ee:	3204      	adds	r2, #4
1000f4f0:	33aa      	adds	r3, #170	; 0xaa
1000f4f2:	801a      	strh	r2, [r3, #0]
1000f4f4:	1c2b      	adds	r3, r5, #0
1000f4f6:	5d7a      	ldrb	r2, [r7, r5]
1000f4f8:	33ac      	adds	r3, #172	; 0xac
1000f4fa:	3501      	adds	r5, #1
1000f4fc:	54e2      	strb	r2, [r4, r3]
1000f4fe:	2d0b      	cmp	r5, #11
1000f500:	d1f8      	bne.n	1000f4f4 <at_ble_init+0x144>
1000f502:	1c30      	adds	r0, r6, #0
1000f504:	b007      	add	sp, #28
1000f506:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f508:	10018417 	.word	0x10018417
1000f50c:	10016223 	.word	0x10016223
1000f510:	1001b050 	.word	0x1001b050
1000f514:	1001a188 	.word	0x1001a188
1000f518:	1001a0e8 	.word	0x1001a0e8
1000f51c:	1001865c 	.word	0x1001865c
1000f520:	10011b65 	.word	0x10011b65
1000f524:	1000f821 	.word	0x1000f821
1000f528:	1000fe81 	.word	0x1000fe81
1000f52c:	10010135 	.word	0x10010135
1000f530:	1000febd 	.word	0x1000febd
1000f534:	1000dfcd 	.word	0x1000dfcd
1000f538:	10010435 	.word	0x10010435
1000f53c:	1000e211 	.word	0x1000e211
1000f540:	100104dd 	.word	0x100104dd
1000f544:	1000ea9d 	.word	0x1000ea9d
1000f548:	1000eb59 	.word	0x1000eb59
1000f54c:	100110a5 	.word	0x100110a5
1000f550:	1001b052 	.word	0x1001b052
1000f554:	1001b0e2 	.word	0x1001b0e2
1000f558:	00003a98 	.word	0x00003a98
1000f55c:	1001b0ed 	.word	0x1001b0ed
1000f560:	1000f321 	.word	0x1000f321

1000f564 <at_ble_addr_set>:
1000f564:	b538      	push	{r3, r4, r5, lr}
1000f566:	1c45      	adds	r5, r0, #1
1000f568:	1c03      	adds	r3, r0, #0
1000f56a:	20cf      	movs	r0, #207	; 0xcf
1000f56c:	2d00      	cmp	r5, #0
1000f56e:	d018      	beq.n	1000f5a2 <at_ble_addr_set+0x3e>
1000f570:	781a      	ldrb	r2, [r3, #0]
1000f572:	2a03      	cmp	r2, #3
1000f574:	d815      	bhi.n	1000f5a2 <at_ble_addr_set+0x3e>
1000f576:	2a01      	cmp	r2, #1
1000f578:	d102      	bne.n	1000f580 <at_ble_addr_set+0x1c>
1000f57a:	785a      	ldrb	r2, [r3, #1]
1000f57c:	2a00      	cmp	r2, #0
1000f57e:	d010      	beq.n	1000f5a2 <at_ble_addr_set+0x3e>
1000f580:	1c1c      	adds	r4, r3, #0
1000f582:	1c29      	adds	r1, r5, #0
1000f584:	2206      	movs	r2, #6
1000f586:	4b07      	ldr	r3, [pc, #28]	; (1000f5a4 <at_ble_addr_set+0x40>)
1000f588:	4807      	ldr	r0, [pc, #28]	; (1000f5a8 <at_ble_addr_set+0x44>)
1000f58a:	4798      	blx	r3
1000f58c:	7823      	ldrb	r3, [r4, #0]
1000f58e:	4807      	ldr	r0, [pc, #28]	; (1000f5ac <at_ble_addr_set+0x48>)
1000f590:	7103      	strb	r3, [r0, #4]
1000f592:	4b07      	ldr	r3, [pc, #28]	; (1000f5b0 <at_ble_addr_set+0x4c>)
1000f594:	4798      	blx	r3
1000f596:	7823      	ldrb	r3, [r4, #0]
1000f598:	2b00      	cmp	r3, #0
1000f59a:	d102      	bne.n	1000f5a2 <at_ble_addr_set+0x3e>
1000f59c:	1c28      	adds	r0, r5, #0
1000f59e:	4b05      	ldr	r3, [pc, #20]	; (1000f5b4 <at_ble_addr_set+0x50>)
1000f5a0:	4798      	blx	r3
1000f5a2:	bd38      	pop	{r3, r4, r5, pc}
1000f5a4:	10016223 	.word	0x10016223
1000f5a8:	1001b0e7 	.word	0x1001b0e7
1000f5ac:	1001b0e2 	.word	0x1001b0e2
1000f5b0:	1000f321 	.word	0x1000f321
1000f5b4:	10010561 	.word	0x10010561

1000f5b8 <at_ble_adv_data_set>:
1000f5b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f5ba:	4684      	mov	ip, r0
1000f5bc:	1c0f      	adds	r7, r1, #0
1000f5be:	1c16      	adds	r6, r2, #0
1000f5c0:	1c1c      	adds	r4, r3, #0
1000f5c2:	2800      	cmp	r0, #0
1000f5c4:	d102      	bne.n	1000f5cc <at_ble_adv_data_set+0x14>
1000f5c6:	20e2      	movs	r0, #226	; 0xe2
1000f5c8:	2a00      	cmp	r2, #0
1000f5ca:	d02b      	beq.n	1000f624 <at_ble_adv_data_set+0x6c>
1000f5cc:	20cf      	movs	r0, #207	; 0xcf
1000f5ce:	2f1f      	cmp	r7, #31
1000f5d0:	d828      	bhi.n	1000f624 <at_ble_adv_data_set+0x6c>
1000f5d2:	2c1f      	cmp	r4, #31
1000f5d4:	d826      	bhi.n	1000f624 <at_ble_adv_data_set+0x6c>
1000f5d6:	4663      	mov	r3, ip
1000f5d8:	2b00      	cmp	r3, #0
1000f5da:	d00e      	beq.n	1000f5fa <at_ble_adv_data_set+0x42>
1000f5dc:	4812      	ldr	r0, [pc, #72]	; (1000f628 <at_ble_adv_data_set+0x70>)
1000f5de:	4d13      	ldr	r5, [pc, #76]	; (1000f62c <at_ble_adv_data_set+0x74>)
1000f5e0:	2f00      	cmp	r7, #0
1000f5e2:	d104      	bne.n	1000f5ee <at_ble_adv_data_set+0x36>
1000f5e4:	1c39      	adds	r1, r7, #0
1000f5e6:	221f      	movs	r2, #31
1000f5e8:	4b11      	ldr	r3, [pc, #68]	; (1000f630 <at_ble_adv_data_set+0x78>)
1000f5ea:	4798      	blx	r3
1000f5ec:	e003      	b.n	1000f5f6 <at_ble_adv_data_set+0x3e>
1000f5ee:	4661      	mov	r1, ip
1000f5f0:	1c3a      	adds	r2, r7, #0
1000f5f2:	4b10      	ldr	r3, [pc, #64]	; (1000f634 <at_ble_adv_data_set+0x7c>)
1000f5f4:	4798      	blx	r3
1000f5f6:	3572      	adds	r5, #114	; 0x72
1000f5f8:	702f      	strb	r7, [r5, #0]
1000f5fa:	1e30      	subs	r0, r6, #0
1000f5fc:	d012      	beq.n	1000f624 <at_ble_adv_data_set+0x6c>
1000f5fe:	4d0b      	ldr	r5, [pc, #44]	; (1000f62c <at_ble_adv_data_set+0x74>)
1000f600:	480d      	ldr	r0, [pc, #52]	; (1000f638 <at_ble_adv_data_set+0x80>)
1000f602:	2c00      	cmp	r4, #0
1000f604:	d107      	bne.n	1000f616 <at_ble_adv_data_set+0x5e>
1000f606:	1c21      	adds	r1, r4, #0
1000f608:	221f      	movs	r2, #31
1000f60a:	4b09      	ldr	r3, [pc, #36]	; (1000f630 <at_ble_adv_data_set+0x78>)
1000f60c:	3573      	adds	r5, #115	; 0x73
1000f60e:	4798      	blx	r3
1000f610:	702c      	strb	r4, [r5, #0]
1000f612:	1c20      	adds	r0, r4, #0
1000f614:	e006      	b.n	1000f624 <at_ble_adv_data_set+0x6c>
1000f616:	1c31      	adds	r1, r6, #0
1000f618:	1c22      	adds	r2, r4, #0
1000f61a:	4b06      	ldr	r3, [pc, #24]	; (1000f634 <at_ble_adv_data_set+0x7c>)
1000f61c:	4798      	blx	r3
1000f61e:	2000      	movs	r0, #0
1000f620:	3573      	adds	r5, #115	; 0x73
1000f622:	702c      	strb	r4, [r5, #0]
1000f624:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f626:	46c0      	nop			; (mov r8, r8)
1000f628:	1001b116 	.word	0x1001b116
1000f62c:	1001b0e2 	.word	0x1001b0e2
1000f630:	10016235 	.word	0x10016235
1000f634:	10016223 	.word	0x10016223
1000f638:	1001b135 	.word	0x1001b135

1000f63c <at_ble_adv_start>:
1000f63c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f63e:	b091      	sub	sp, #68	; 0x44
1000f640:	1c1f      	adds	r7, r3, #0
1000f642:	ab16      	add	r3, sp, #88	; 0x58
1000f644:	881d      	ldrh	r5, [r3, #0]
1000f646:	ab17      	add	r3, sp, #92	; 0x5c
1000f648:	881b      	ldrh	r3, [r3, #0]
1000f64a:	910d      	str	r1, [sp, #52]	; 0x34
1000f64c:	930e      	str	r3, [sp, #56]	; 0x38
1000f64e:	ab18      	add	r3, sp, #96	; 0x60
1000f650:	781b      	ldrb	r3, [r3, #0]
1000f652:	1c04      	adds	r4, r0, #0
1000f654:	930f      	str	r3, [sp, #60]	; 0x3c
1000f656:	4b42      	ldr	r3, [pc, #264]	; (1000f760 <at_ble_adv_start+0x124>)
1000f658:	1c16      	adds	r6, r2, #0
1000f65a:	3373      	adds	r3, #115	; 0x73
1000f65c:	781b      	ldrb	r3, [r3, #0]
1000f65e:	20cf      	movs	r0, #207	; 0xcf
1000f660:	930c      	str	r3, [sp, #48]	; 0x30
1000f662:	2c01      	cmp	r4, #1
1000f664:	d103      	bne.n	1000f66e <at_ble_adv_start+0x32>
1000f666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000f668:	2b00      	cmp	r3, #0
1000f66a:	d176      	bne.n	1000f75a <at_ble_adv_start+0x11e>
1000f66c:	e024      	b.n	1000f6b8 <at_ble_adv_start+0x7c>
1000f66e:	2c04      	cmp	r4, #4
1000f670:	d873      	bhi.n	1000f75a <at_ble_adv_start+0x11e>
1000f672:	2380      	movs	r3, #128	; 0x80
1000f674:	01db      	lsls	r3, r3, #7
1000f676:	429d      	cmp	r5, r3
1000f678:	d86f      	bhi.n	1000f75a <at_ble_adv_start+0x11e>
1000f67a:	2c00      	cmp	r4, #0
1000f67c:	d102      	bne.n	1000f684 <at_ble_adv_start+0x48>
1000f67e:	2d1f      	cmp	r5, #31
1000f680:	d96b      	bls.n	1000f75a <at_ble_adv_start+0x11e>
1000f682:	e003      	b.n	1000f68c <at_ble_adv_start+0x50>
1000f684:	2d9f      	cmp	r5, #159	; 0x9f
1000f686:	d801      	bhi.n	1000f68c <at_ble_adv_start+0x50>
1000f688:	2c01      	cmp	r4, #1
1000f68a:	d166      	bne.n	1000f75a <at_ble_adv_start+0x11e>
1000f68c:	2f00      	cmp	r7, #0
1000f68e:	d009      	beq.n	1000f6a4 <at_ble_adv_start+0x68>
1000f690:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f692:	20cf      	movs	r0, #207	; 0xcf
1000f694:	3b01      	subs	r3, #1
1000f696:	2b01      	cmp	r3, #1
1000f698:	d95f      	bls.n	1000f75a <at_ble_adv_start+0x11e>
1000f69a:	2c01      	cmp	r4, #1
1000f69c:	d102      	bne.n	1000f6a4 <at_ble_adv_start+0x68>
1000f69e:	2d00      	cmp	r5, #0
1000f6a0:	d100      	bne.n	1000f6a4 <at_ble_adv_start+0x68>
1000f6a2:	3520      	adds	r5, #32
1000f6a4:	4b2f      	ldr	r3, [pc, #188]	; (1000f764 <at_ble_adv_start+0x128>)
1000f6a6:	4798      	blx	r3
1000f6a8:	1c01      	adds	r1, r0, #0
1000f6aa:	2e00      	cmp	r6, #0
1000f6ac:	d043      	beq.n	1000f736 <at_ble_adv_start+0xfa>
1000f6ae:	7833      	ldrb	r3, [r6, #0]
1000f6b0:	1e60      	subs	r0, r4, #1
1000f6b2:	2b00      	cmp	r3, #0
1000f6b4:	d109      	bne.n	1000f6ca <at_ble_adv_start+0x8e>
1000f6b6:	e03b      	b.n	1000f730 <at_ble_adv_start+0xf4>
1000f6b8:	2380      	movs	r3, #128	; 0x80
1000f6ba:	01db      	lsls	r3, r3, #7
1000f6bc:	429d      	cmp	r5, r3
1000f6be:	d84c      	bhi.n	1000f75a <at_ble_adv_start+0x11e>
1000f6c0:	2e00      	cmp	r6, #0
1000f6c2:	d04a      	beq.n	1000f75a <at_ble_adv_start+0x11e>
1000f6c4:	2f00      	cmp	r7, #0
1000f6c6:	d1e3      	bne.n	1000f690 <at_ble_adv_start+0x54>
1000f6c8:	e02b      	b.n	1000f722 <at_ble_adv_start+0xe6>
1000f6ca:	2301      	movs	r3, #1
1000f6cc:	2803      	cmp	r0, #3
1000f6ce:	d93a      	bls.n	1000f746 <at_ble_adv_start+0x10a>
1000f6d0:	200d      	movs	r0, #13
1000f6d2:	1c72      	adds	r2, r6, #1
1000f6d4:	e002      	b.n	1000f6dc <at_ble_adv_start+0xa0>
1000f6d6:	200e      	movs	r0, #14
1000f6d8:	1e32      	subs	r2, r6, #0
1000f6da:	d1fa      	bne.n	1000f6d2 <at_ble_adv_start+0x96>
1000f6dc:	4c20      	ldr	r4, [pc, #128]	; (1000f760 <at_ble_adv_start+0x124>)
1000f6de:	3474      	adds	r4, #116	; 0x74
1000f6e0:	7826      	ldrb	r6, [r4, #0]
1000f6e2:	2407      	movs	r4, #7
1000f6e4:	2e00      	cmp	r6, #0
1000f6e6:	d000      	beq.n	1000f6ea <at_ble_adv_start+0xae>
1000f6e8:	1c34      	adds	r4, r6, #0
1000f6ea:	9200      	str	r2, [sp, #0]
1000f6ec:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f6ee:	9403      	str	r4, [sp, #12]
1000f6f0:	9204      	str	r2, [sp, #16]
1000f6f2:	4a1b      	ldr	r2, [pc, #108]	; (1000f760 <at_ble_adv_start+0x124>)
1000f6f4:	9501      	str	r5, [sp, #4]
1000f6f6:	9502      	str	r5, [sp, #8]
1000f6f8:	9705      	str	r7, [sp, #20]
1000f6fa:	3272      	adds	r2, #114	; 0x72
1000f6fc:	7812      	ldrb	r2, [r2, #0]
1000f6fe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f700:	9206      	str	r2, [sp, #24]
1000f702:	4a19      	ldr	r2, [pc, #100]	; (1000f768 <at_ble_adv_start+0x12c>)
1000f704:	9207      	str	r2, [sp, #28]
1000f706:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f708:	9208      	str	r2, [sp, #32]
1000f70a:	4a18      	ldr	r2, [pc, #96]	; (1000f76c <at_ble_adv_start+0x130>)
1000f70c:	9209      	str	r2, [sp, #36]	; 0x24
1000f70e:	2264      	movs	r2, #100	; 0x64
1000f710:	4362      	muls	r2, r4
1000f712:	b292      	uxth	r2, r2
1000f714:	920a      	str	r2, [sp, #40]	; 0x28
1000f716:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f718:	4c15      	ldr	r4, [pc, #84]	; (1000f770 <at_ble_adv_start+0x134>)
1000f71a:	920b      	str	r2, [sp, #44]	; 0x2c
1000f71c:	4a15      	ldr	r2, [pc, #84]	; (1000f774 <at_ble_adv_start+0x138>)
1000f71e:	47a0      	blx	r4
1000f720:	e01b      	b.n	1000f75a <at_ble_adv_start+0x11e>
1000f722:	2d00      	cmp	r5, #0
1000f724:	d1be      	bne.n	1000f6a4 <at_ble_adv_start+0x68>
1000f726:	4b0f      	ldr	r3, [pc, #60]	; (1000f764 <at_ble_adv_start+0x128>)
1000f728:	4798      	blx	r3
1000f72a:	2520      	movs	r5, #32
1000f72c:	1c01      	adds	r1, r0, #0
1000f72e:	e7be      	b.n	1000f6ae <at_ble_adv_start+0x72>
1000f730:	2803      	cmp	r0, #3
1000f732:	d8cd      	bhi.n	1000f6d0 <at_ble_adv_start+0x94>
1000f734:	e006      	b.n	1000f744 <at_ble_adv_start+0x108>
1000f736:	1e60      	subs	r0, r4, #1
1000f738:	2803      	cmp	r0, #3
1000f73a:	d903      	bls.n	1000f744 <at_ble_adv_start+0x108>
1000f73c:	1c33      	adds	r3, r6, #0
1000f73e:	200d      	movs	r0, #13
1000f740:	1c32      	adds	r2, r6, #0
1000f742:	e7cb      	b.n	1000f6dc <at_ble_adv_start+0xa0>
1000f744:	2300      	movs	r3, #0
1000f746:	f003 fd3d 	bl	100131c4 <__gnu_thumb1_case_sqi>
1000f74a:	06c6      	.short	0x06c6
1000f74c:	0204      	.short	0x0204
1000f74e:	200f      	movs	r0, #15
1000f750:	e7c2      	b.n	1000f6d8 <at_ble_adv_start+0x9c>
1000f752:	2200      	movs	r2, #0
1000f754:	920c      	str	r2, [sp, #48]	; 0x30
1000f756:	200c      	movs	r0, #12
1000f758:	e7be      	b.n	1000f6d8 <at_ble_adv_start+0x9c>
1000f75a:	b011      	add	sp, #68	; 0x44
1000f75c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f75e:	46c0      	nop			; (mov r8, r8)
1000f760:	1001b0e2 	.word	0x1001b0e2
1000f764:	100115f1 	.word	0x100115f1
1000f768:	1001b116 	.word	0x1001b116
1000f76c:	1001b135 	.word	0x1001b135
1000f770:	100114d1 	.word	0x100114d1
1000f774:	00003a98 	.word	0x00003a98

1000f778 <at_ble_adv_stop>:
1000f778:	b508      	push	{r3, lr}
1000f77a:	4b01      	ldr	r3, [pc, #4]	; (1000f780 <at_ble_adv_stop+0x8>)
1000f77c:	4798      	blx	r3
1000f77e:	bd08      	pop	{r3, pc}
1000f780:	100112fd 	.word	0x100112fd

1000f784 <at_ble_scan_stop>:
1000f784:	b510      	push	{r4, lr}
1000f786:	4b05      	ldr	r3, [pc, #20]	; (1000f79c <at_ble_scan_stop+0x18>)
1000f788:	4798      	blx	r3
1000f78a:	1e04      	subs	r4, r0, #0
1000f78c:	d103      	bne.n	1000f796 <at_ble_scan_stop+0x12>
1000f78e:	20d1      	movs	r0, #209	; 0xd1
1000f790:	4b03      	ldr	r3, [pc, #12]	; (1000f7a0 <at_ble_scan_stop+0x1c>)
1000f792:	0100      	lsls	r0, r0, #4
1000f794:	4798      	blx	r3
1000f796:	1c20      	adds	r0, r4, #0
1000f798:	bd10      	pop	{r4, pc}
1000f79a:	46c0      	nop			; (mov r8, r8)
1000f79c:	100112fd 	.word	0x100112fd
1000f7a0:	1000f231 	.word	0x1000f231

1000f7a4 <at_ble_disconnect>:
1000f7a4:	b538      	push	{r3, r4, r5, lr}
1000f7a6:	1c04      	adds	r4, r0, #0
1000f7a8:	4b04      	ldr	r3, [pc, #16]	; (1000f7bc <at_ble_disconnect+0x18>)
1000f7aa:	1c08      	adds	r0, r1, #0
1000f7ac:	1c21      	adds	r1, r4, #0
1000f7ae:	4798      	blx	r3
1000f7b0:	1c05      	adds	r5, r0, #0
1000f7b2:	4b03      	ldr	r3, [pc, #12]	; (1000f7c0 <at_ble_disconnect+0x1c>)
1000f7b4:	1c20      	adds	r0, r4, #0
1000f7b6:	4798      	blx	r3
1000f7b8:	1c28      	adds	r0, r5, #0
1000f7ba:	bd38      	pop	{r3, r4, r5, pc}
1000f7bc:	10010975 	.word	0x10010975
1000f7c0:	1000f275 	.word	0x1000f275

1000f7c4 <at_ble_conn_update_reply>:
1000f7c4:	b510      	push	{r4, lr}
1000f7c6:	4c01      	ldr	r4, [pc, #4]	; (1000f7cc <at_ble_conn_update_reply+0x8>)
1000f7c8:	47a0      	blx	r4
1000f7ca:	bd10      	pop	{r4, pc}
1000f7cc:	10010e65 	.word	0x10010e65

1000f7d0 <at_ble_random_address_resolve>:
1000f7d0:	b510      	push	{r4, lr}
1000f7d2:	23cf      	movs	r3, #207	; 0xcf
1000f7d4:	2800      	cmp	r0, #0
1000f7d6:	d00a      	beq.n	1000f7ee <at_ble_random_address_resolve+0x1e>
1000f7d8:	2900      	cmp	r1, #0
1000f7da:	d008      	beq.n	1000f7ee <at_ble_random_address_resolve+0x1e>
1000f7dc:	2a00      	cmp	r2, #0
1000f7de:	d006      	beq.n	1000f7ee <at_ble_random_address_resolve+0x1e>
1000f7e0:	780c      	ldrb	r4, [r1, #0]
1000f7e2:	2c02      	cmp	r4, #2
1000f7e4:	d103      	bne.n	1000f7ee <at_ble_random_address_resolve+0x1e>
1000f7e6:	4b03      	ldr	r3, [pc, #12]	; (1000f7f4 <at_ble_random_address_resolve+0x24>)
1000f7e8:	3101      	adds	r1, #1
1000f7ea:	4798      	blx	r3
1000f7ec:	2300      	movs	r3, #0
1000f7ee:	1c18      	adds	r0, r3, #0
1000f7f0:	bd10      	pop	{r4, pc}
1000f7f2:	46c0      	nop			; (mov r8, r8)
1000f7f4:	10011691 	.word	0x10011691

1000f7f8 <at_ble_uuid_type2len>:
1000f7f8:	23cf      	movs	r3, #207	; 0xcf
1000f7fa:	2802      	cmp	r0, #2
1000f7fc:	d801      	bhi.n	1000f802 <at_ble_uuid_type2len+0xa>
1000f7fe:	4b02      	ldr	r3, [pc, #8]	; (1000f808 <at_ble_uuid_type2len+0x10>)
1000f800:	5c1b      	ldrb	r3, [r3, r0]
1000f802:	1c18      	adds	r0, r3, #0
1000f804:	4770      	bx	lr
1000f806:	46c0      	nop			; (mov r8, r8)
1000f808:	10018422 	.word	0x10018422

1000f80c <at_ble_uuid_len2type>:
1000f80c:	1e83      	subs	r3, r0, #2
1000f80e:	b2db      	uxtb	r3, r3
1000f810:	2003      	movs	r0, #3
1000f812:	2b0e      	cmp	r3, #14
1000f814:	d801      	bhi.n	1000f81a <at_ble_uuid_len2type+0xe>
1000f816:	4a01      	ldr	r2, [pc, #4]	; (1000f81c <at_ble_uuid_len2type+0x10>)
1000f818:	5cd0      	ldrb	r0, [r2, r3]
1000f81a:	4770      	bx	lr
1000f81c:	10018425 	.word	0x10018425

1000f820 <init_gatt_client_module>:
1000f820:	2200      	movs	r2, #0
1000f822:	4b01      	ldr	r3, [pc, #4]	; (1000f828 <init_gatt_client_module+0x8>)
1000f824:	801a      	strh	r2, [r3, #0]
1000f826:	4770      	bx	lr
1000f828:	1001a0e0 	.word	0x1001a0e0

1000f82c <db_searchATT>:
1000f82c:	b570      	push	{r4, r5, r6, lr}
1000f82e:	1c05      	adds	r5, r0, #0
1000f830:	2400      	movs	r4, #0
1000f832:	4b0c      	ldr	r3, [pc, #48]	; (1000f864 <db_searchATT+0x38>)
1000f834:	6819      	ldr	r1, [r3, #0]
1000f836:	4b0c      	ldr	r3, [pc, #48]	; (1000f868 <db_searchATT+0x3c>)
1000f838:	681e      	ldr	r6, [r3, #0]
1000f83a:	428c      	cmp	r4, r1
1000f83c:	dc10      	bgt.n	1000f860 <db_searchATT+0x34>
1000f83e:	200c      	movs	r0, #12
1000f840:	1863      	adds	r3, r4, r1
1000f842:	0fda      	lsrs	r2, r3, #31
1000f844:	18d3      	adds	r3, r2, r3
1000f846:	1c02      	adds	r2, r0, #0
1000f848:	105b      	asrs	r3, r3, #1
1000f84a:	435a      	muls	r2, r3
1000f84c:	18b0      	adds	r0, r6, r2
1000f84e:	8802      	ldrh	r2, [r0, #0]
1000f850:	42aa      	cmp	r2, r5
1000f852:	d201      	bcs.n	1000f858 <db_searchATT+0x2c>
1000f854:	1e59      	subs	r1, r3, #1
1000f856:	e7f0      	b.n	1000f83a <db_searchATT+0xe>
1000f858:	42aa      	cmp	r2, r5
1000f85a:	d902      	bls.n	1000f862 <db_searchATT+0x36>
1000f85c:	1c5c      	adds	r4, r3, #1
1000f85e:	e7ec      	b.n	1000f83a <db_searchATT+0xe>
1000f860:	2000      	movs	r0, #0
1000f862:	bd70      	pop	{r4, r5, r6, pc}
1000f864:	1001a0f4 	.word	0x1001a0f4
1000f868:	1001a0ec 	.word	0x1001a0ec

1000f86c <att_permissions>:
1000f86c:	b530      	push	{r4, r5, lr}
1000f86e:	2403      	movs	r4, #3
1000f870:	1c05      	adds	r5, r0, #0
1000f872:	2301      	movs	r3, #1
1000f874:	4025      	ands	r5, r4
1000f876:	42a5      	cmp	r5, r4
1000f878:	d009      	beq.n	1000f88e <att_permissions+0x22>
1000f87a:	1c23      	adds	r3, r4, #0
1000f87c:	1924      	adds	r4, r4, r4
1000f87e:	4220      	tst	r0, r4
1000f880:	d105      	bne.n	1000f88e <att_permissions+0x22>
1000f882:	3b02      	subs	r3, #2
1000f884:	4218      	tst	r0, r3
1000f886:	d102      	bne.n	1000f88e <att_permissions+0x22>
1000f888:	1e4b      	subs	r3, r1, #1
1000f88a:	4199      	sbcs	r1, r3
1000f88c:	b28b      	uxth	r3, r1
1000f88e:	2130      	movs	r1, #48	; 0x30
1000f890:	4001      	ands	r1, r0
1000f892:	2930      	cmp	r1, #48	; 0x30
1000f894:	d007      	beq.n	1000f8a6 <att_permissions+0x3a>
1000f896:	0641      	lsls	r1, r0, #25
1000f898:	d401      	bmi.n	1000f89e <att_permissions+0x32>
1000f89a:	0681      	lsls	r1, r0, #26
1000f89c:	d501      	bpl.n	1000f8a2 <att_permissions+0x36>
1000f89e:	4807      	ldr	r0, [pc, #28]	; (1000f8bc <att_permissions+0x50>)
1000f8a0:	e009      	b.n	1000f8b6 <att_permissions+0x4a>
1000f8a2:	06c1      	lsls	r1, r0, #27
1000f8a4:	d501      	bpl.n	1000f8aa <att_permissions+0x3e>
1000f8a6:	4806      	ldr	r0, [pc, #24]	; (1000f8c0 <att_permissions+0x54>)
1000f8a8:	e005      	b.n	1000f8b6 <att_permissions+0x4a>
1000f8aa:	2a00      	cmp	r2, #0
1000f8ac:	d001      	beq.n	1000f8b2 <att_permissions+0x46>
1000f8ae:	2204      	movs	r2, #4
1000f8b0:	4313      	orrs	r3, r2
1000f8b2:	2080      	movs	r0, #128	; 0x80
1000f8b4:	0180      	lsls	r0, r0, #6
1000f8b6:	4318      	orrs	r0, r3
1000f8b8:	bd30      	pop	{r4, r5, pc}
1000f8ba:	46c0      	nop			; (mov r8, r8)
1000f8bc:	0000200c 	.word	0x0000200c
1000f8c0:	00002004 	.word	0x00002004

1000f8c4 <char_permissions>:
1000f8c4:	b530      	push	{r4, r5, lr}
1000f8c6:	2300      	movs	r3, #0
1000f8c8:	0784      	lsls	r4, r0, #30
1000f8ca:	d503      	bpl.n	1000f8d4 <char_permissions+0x10>
1000f8cc:	3301      	adds	r3, #1
1000f8ce:	4219      	tst	r1, r3
1000f8d0:	d100      	bne.n	1000f8d4 <char_permissions+0x10>
1000f8d2:	3302      	adds	r3, #2
1000f8d4:	0704      	lsls	r4, r0, #28
1000f8d6:	d508      	bpl.n	1000f8ea <char_permissions+0x26>
1000f8d8:	06cc      	lsls	r4, r1, #27
1000f8da:	d501      	bpl.n	1000f8e0 <char_permissions+0x1c>
1000f8dc:	2404      	movs	r4, #4
1000f8de:	e000      	b.n	1000f8e2 <char_permissions+0x1e>
1000f8e0:	240c      	movs	r4, #12
1000f8e2:	4323      	orrs	r3, r4
1000f8e4:	2480      	movs	r4, #128	; 0x80
1000f8e6:	01a4      	lsls	r4, r4, #6
1000f8e8:	4323      	orrs	r3, r4
1000f8ea:	0684      	lsls	r4, r0, #26
1000f8ec:	d506      	bpl.n	1000f8fc <char_permissions+0x38>
1000f8ee:	2406      	movs	r4, #6
1000f8f0:	4221      	tst	r1, r4
1000f8f2:	d101      	bne.n	1000f8f8 <char_permissions+0x34>
1000f8f4:	340a      	adds	r4, #10
1000f8f6:	e000      	b.n	1000f8fa <char_permissions+0x36>
1000f8f8:	2430      	movs	r4, #48	; 0x30
1000f8fa:	4323      	orrs	r3, r4
1000f8fc:	06c4      	lsls	r4, r0, #27
1000f8fe:	d506      	bpl.n	1000f90e <char_permissions+0x4a>
1000f900:	2406      	movs	r4, #6
1000f902:	4221      	tst	r1, r4
1000f904:	d101      	bne.n	1000f90a <char_permissions+0x46>
1000f906:	343a      	adds	r4, #58	; 0x3a
1000f908:	e000      	b.n	1000f90c <char_permissions+0x48>
1000f90a:	24c0      	movs	r4, #192	; 0xc0
1000f90c:	4323      	orrs	r3, r4
1000f90e:	2480      	movs	r4, #128	; 0x80
1000f910:	0064      	lsls	r4, r4, #1
1000f912:	4220      	tst	r0, r4
1000f914:	d000      	beq.n	1000f918 <char_permissions+0x54>
1000f916:	4323      	orrs	r3, r4
1000f918:	07c4      	lsls	r4, r0, #31
1000f91a:	d502      	bpl.n	1000f922 <char_permissions+0x5e>
1000f91c:	2480      	movs	r4, #128	; 0x80
1000f91e:	00a4      	lsls	r4, r4, #2
1000f920:	4323      	orrs	r3, r4
1000f922:	2404      	movs	r4, #4
1000f924:	4220      	tst	r0, r4
1000f926:	d006      	beq.n	1000f936 <char_permissions+0x72>
1000f928:	06cd      	lsls	r5, r1, #27
1000f92a:	d400      	bmi.n	1000f92e <char_permissions+0x6a>
1000f92c:	240c      	movs	r4, #12
1000f92e:	4323      	orrs	r3, r4
1000f930:	2480      	movs	r4, #128	; 0x80
1000f932:	0124      	lsls	r4, r4, #4
1000f934:	4323      	orrs	r3, r4
1000f936:	0644      	lsls	r4, r0, #25
1000f938:	d501      	bpl.n	1000f93e <char_permissions+0x7a>
1000f93a:	4c08      	ldr	r4, [pc, #32]	; (1000f95c <char_permissions+0x98>)
1000f93c:	4323      	orrs	r3, r4
1000f93e:	0600      	lsls	r0, r0, #24
1000f940:	d507      	bpl.n	1000f952 <char_permissions+0x8e>
1000f942:	2004      	movs	r0, #4
1000f944:	06c9      	lsls	r1, r1, #27
1000f946:	d400      	bmi.n	1000f94a <char_permissions+0x86>
1000f948:	200c      	movs	r0, #12
1000f94a:	4303      	orrs	r3, r0
1000f94c:	2084      	movs	r0, #132	; 0x84
1000f94e:	0180      	lsls	r0, r0, #6
1000f950:	4303      	orrs	r3, r0
1000f952:	0390      	lsls	r0, r2, #14
1000f954:	4303      	orrs	r3, r0
1000f956:	b298      	uxth	r0, r3
1000f958:	bd30      	pop	{r4, r5, pc}
1000f95a:	46c0      	nop			; (mov r8, r8)
1000f95c:	00001004 	.word	0x00001004

1000f960 <presentation_format_define>:
1000f960:	b507      	push	{r0, r1, r2, lr}
1000f962:	466a      	mov	r2, sp
1000f964:	780b      	ldrb	r3, [r1, #0]
1000f966:	7013      	strb	r3, [r2, #0]
1000f968:	784b      	ldrb	r3, [r1, #1]
1000f96a:	7053      	strb	r3, [r2, #1]
1000f96c:	884b      	ldrh	r3, [r1, #2]
1000f96e:	7093      	strb	r3, [r2, #2]
1000f970:	0a1b      	lsrs	r3, r3, #8
1000f972:	70d3      	strb	r3, [r2, #3]
1000f974:	790b      	ldrb	r3, [r1, #4]
1000f976:	7113      	strb	r3, [r2, #4]
1000f978:	88cb      	ldrh	r3, [r1, #6]
1000f97a:	2107      	movs	r1, #7
1000f97c:	7153      	strb	r3, [r2, #5]
1000f97e:	0a1b      	lsrs	r3, r3, #8
1000f980:	7193      	strb	r3, [r2, #6]
1000f982:	4b01      	ldr	r3, [pc, #4]	; (1000f988 <presentation_format_define+0x28>)
1000f984:	4798      	blx	r3
1000f986:	bd0e      	pop	{r1, r2, r3, pc}
1000f988:	10011cf5 	.word	0x10011cf5

1000f98c <db_addATT>:
1000f98c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f98e:	4c29      	ldr	r4, [pc, #164]	; (1000fa34 <db_addATT+0xa8>)
1000f990:	1c1d      	adds	r5, r3, #0
1000f992:	6823      	ldr	r3, [r4, #0]
1000f994:	9001      	str	r0, [sp, #4]
1000f996:	26d3      	movs	r6, #211	; 0xd3
1000f998:	2b00      	cmp	r3, #0
1000f99a:	d048      	beq.n	1000fa2e <db_addATT+0xa2>
1000f99c:	1c1e      	adds	r6, r3, #0
1000f99e:	3e0c      	subs	r6, #12
1000f9a0:	6026      	str	r6, [r4, #0]
1000f9a2:	2900      	cmp	r1, #0
1000f9a4:	d005      	beq.n	1000f9b2 <db_addATT+0x26>
1000f9a6:	4f24      	ldr	r7, [pc, #144]	; (1000fa38 <db_addATT+0xac>)
1000f9a8:	46bc      	mov	ip, r7
1000f9aa:	4660      	mov	r0, ip
1000f9ac:	683f      	ldr	r7, [r7, #0]
1000f9ae:	18bf      	adds	r7, r7, r2
1000f9b0:	6007      	str	r7, [r0, #0]
1000f9b2:	4821      	ldr	r0, [pc, #132]	; (1000fa38 <db_addATT+0xac>)
1000f9b4:	6807      	ldr	r7, [r0, #0]
1000f9b6:	4684      	mov	ip, r0
1000f9b8:	42be      	cmp	r6, r7
1000f9ba:	d932      	bls.n	1000fa22 <db_addATT+0x96>
1000f9bc:	4668      	mov	r0, sp
1000f9be:	8880      	ldrh	r0, [r0, #4]
1000f9c0:	3b0c      	subs	r3, #12
1000f9c2:	8018      	strh	r0, [r3, #0]
1000f9c4:	6823      	ldr	r3, [r4, #0]
1000f9c6:	2900      	cmp	r1, #0
1000f9c8:	d009      	beq.n	1000f9de <db_addATT+0x52>
1000f9ca:	2a00      	cmp	r2, #0
1000f9cc:	d007      	beq.n	1000f9de <db_addATT+0x52>
1000f9ce:	4660      	mov	r0, ip
1000f9d0:	6800      	ldr	r0, [r0, #0]
1000f9d2:	809a      	strh	r2, [r3, #4]
1000f9d4:	1a80      	subs	r0, r0, r2
1000f9d6:	6098      	str	r0, [r3, #8]
1000f9d8:	4b18      	ldr	r3, [pc, #96]	; (1000fa3c <db_addATT+0xb0>)
1000f9da:	4798      	blx	r3
1000f9dc:	e002      	b.n	1000f9e4 <db_addATT+0x58>
1000f9de:	2100      	movs	r1, #0
1000f9e0:	809a      	strh	r2, [r3, #4]
1000f9e2:	6099      	str	r1, [r3, #8]
1000f9e4:	2300      	movs	r3, #0
1000f9e6:	6822      	ldr	r2, [r4, #0]
1000f9e8:	7093      	strb	r3, [r2, #2]
1000f9ea:	3303      	adds	r3, #3
1000f9ec:	402b      	ands	r3, r5
1000f9ee:	2b03      	cmp	r3, #3
1000f9f0:	d001      	beq.n	1000f9f6 <db_addATT+0x6a>
1000f9f2:	076b      	lsls	r3, r5, #29
1000f9f4:	d504      	bpl.n	1000fa00 <db_addATT+0x74>
1000f9f6:	2101      	movs	r1, #1
1000f9f8:	6822      	ldr	r2, [r4, #0]
1000f9fa:	7893      	ldrb	r3, [r2, #2]
1000f9fc:	430b      	orrs	r3, r1
1000f9fe:	7093      	strb	r3, [r2, #2]
1000fa00:	2330      	movs	r3, #48	; 0x30
1000fa02:	402b      	ands	r3, r5
1000fa04:	2b30      	cmp	r3, #48	; 0x30
1000fa06:	d001      	beq.n	1000fa0c <db_addATT+0x80>
1000fa08:	066b      	lsls	r3, r5, #25
1000fa0a:	d504      	bpl.n	1000fa16 <db_addATT+0x8a>
1000fa0c:	2102      	movs	r1, #2
1000fa0e:	6822      	ldr	r2, [r4, #0]
1000fa10:	7893      	ldrb	r3, [r2, #2]
1000fa12:	430b      	orrs	r3, r1
1000fa14:	7093      	strb	r3, [r2, #2]
1000fa16:	4a0a      	ldr	r2, [pc, #40]	; (1000fa40 <db_addATT+0xb4>)
1000fa18:	2600      	movs	r6, #0
1000fa1a:	6813      	ldr	r3, [r2, #0]
1000fa1c:	3301      	adds	r3, #1
1000fa1e:	6013      	str	r3, [r2, #0]
1000fa20:	e005      	b.n	1000fa2e <db_addATT+0xa2>
1000fa22:	6023      	str	r3, [r4, #0]
1000fa24:	2611      	movs	r6, #17
1000fa26:	2900      	cmp	r1, #0
1000fa28:	d001      	beq.n	1000fa2e <db_addATT+0xa2>
1000fa2a:	1aba      	subs	r2, r7, r2
1000fa2c:	6002      	str	r2, [r0, #0]
1000fa2e:	1c30      	adds	r0, r6, #0
1000fa30:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fa32:	46c0      	nop			; (mov r8, r8)
1000fa34:	1001a0ec 	.word	0x1001a0ec
1000fa38:	1001a0f0 	.word	0x1001a0f0
1000fa3c:	10016223 	.word	0x10016223
1000fa40:	1001a0f4 	.word	0x1001a0f4

1000fa44 <user_description_define>:
1000fa44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fa46:	1c05      	adds	r5, r0, #0
1000fa48:	20cf      	movs	r0, #207	; 0xcf
1000fa4a:	2a00      	cmp	r2, #0
1000fa4c:	d01c      	beq.n	1000fa88 <user_description_define+0x44>
1000fa4e:	1c14      	adds	r4, r2, #0
1000fa50:	2203      	movs	r2, #3
1000fa52:	1c1e      	adds	r6, r3, #0
1000fa54:	400a      	ands	r2, r1
1000fa56:	1c0b      	adds	r3, r1, #0
1000fa58:	3a03      	subs	r2, #3
1000fa5a:	4251      	negs	r1, r2
1000fa5c:	4151      	adcs	r1, r2
1000fa5e:	075a      	lsls	r2, r3, #29
1000fa60:	0fd2      	lsrs	r2, r2, #31
1000fa62:	430a      	orrs	r2, r1
1000fa64:	03d2      	lsls	r2, r2, #15
1000fa66:	4f09      	ldr	r7, [pc, #36]	; (1000fa8c <user_description_define+0x48>)
1000fa68:	1c28      	adds	r0, r5, #0
1000fa6a:	2a00      	cmp	r2, #0
1000fa6c:	d003      	beq.n	1000fa76 <user_description_define+0x32>
1000fa6e:	1c21      	adds	r1, r4, #0
1000fa70:	1c32      	adds	r2, r6, #0
1000fa72:	47b8      	blx	r7
1000fa74:	e008      	b.n	1000fa88 <user_description_define+0x44>
1000fa76:	1c11      	adds	r1, r2, #0
1000fa78:	47b8      	blx	r7
1000fa7a:	2800      	cmp	r0, #0
1000fa7c:	d104      	bne.n	1000fa88 <user_description_define+0x44>
1000fa7e:	1c28      	adds	r0, r5, #0
1000fa80:	1c31      	adds	r1, r6, #0
1000fa82:	1c22      	adds	r2, r4, #0
1000fa84:	4b02      	ldr	r3, [pc, #8]	; (1000fa90 <user_description_define+0x4c>)
1000fa86:	4798      	blx	r3
1000fa88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fa8a:	46c0      	nop			; (mov r8, r8)
1000fa8c:	1000f98d 	.word	0x1000f98d
1000fa90:	10011cf5 	.word	0x10011cf5

1000fa94 <at_ble_read_authorize_reply.part.1>:
1000fa94:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000fa96:	4b09      	ldr	r3, [pc, #36]	; (1000fabc <at_ble_read_authorize_reply.part.1+0x28>)
1000fa98:	1c05      	adds	r5, r0, #0
1000fa9a:	1c08      	adds	r0, r1, #0
1000fa9c:	1c0c      	adds	r4, r1, #0
1000fa9e:	4798      	blx	r3
1000faa0:	2800      	cmp	r0, #0
1000faa2:	d009      	beq.n	1000fab8 <at_ble_read_authorize_reply.part.1+0x24>
1000faa4:	6882      	ldr	r2, [r0, #8]
1000faa6:	2a00      	cmp	r2, #0
1000faa8:	d006      	beq.n	1000fab8 <at_ble_read_authorize_reply.part.1+0x24>
1000faaa:	8883      	ldrh	r3, [r0, #4]
1000faac:	1c29      	adds	r1, r5, #0
1000faae:	9200      	str	r2, [sp, #0]
1000fab0:	1c20      	adds	r0, r4, #0
1000fab2:	2200      	movs	r2, #0
1000fab4:	4c02      	ldr	r4, [pc, #8]	; (1000fac0 <at_ble_read_authorize_reply.part.1+0x2c>)
1000fab6:	47a0      	blx	r4
1000fab8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000faba:	46c0      	nop			; (mov r8, r8)
1000fabc:	1000f82d 	.word	0x1000f82d
1000fac0:	1001178d 	.word	0x1001178d

1000fac4 <internal_at_ble_service_define>:
1000fac4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fac6:	b08b      	sub	sp, #44	; 0x2c
1000fac8:	9306      	str	r3, [sp, #24]
1000faca:	ab10      	add	r3, sp, #64	; 0x40
1000facc:	9202      	str	r2, [sp, #8]
1000face:	cb04      	ldmia	r3!, {r2}
1000fad0:	1c05      	adds	r5, r0, #0
1000fad2:	881b      	ldrh	r3, [r3, #0]
1000fad4:	9105      	str	r1, [sp, #20]
1000fad6:	9303      	str	r3, [sp, #12]
1000fad8:	ab12      	add	r3, sp, #72	; 0x48
1000fada:	781b      	ldrb	r3, [r3, #0]
1000fadc:	20cf      	movs	r0, #207	; 0xcf
1000fade:	9304      	str	r3, [sp, #16]
1000fae0:	2d00      	cmp	r5, #0
1000fae2:	d100      	bne.n	1000fae6 <internal_at_ble_service_define+0x22>
1000fae4:	e1ca      	b.n	1000fe7c <internal_at_ble_service_define+0x3b8>
1000fae6:	2900      	cmp	r1, #0
1000fae8:	d100      	bne.n	1000faec <internal_at_ble_service_define+0x28>
1000faea:	e1c7      	b.n	1000fe7c <internal_at_ble_service_define+0x3b8>
1000faec:	2a00      	cmp	r2, #0
1000faee:	d100      	bne.n	1000faf2 <internal_at_ble_service_define+0x2e>
1000faf0:	e1c4      	b.n	1000fe7c <internal_at_ble_service_define+0x3b8>
1000faf2:	9b03      	ldr	r3, [sp, #12]
1000faf4:	2b00      	cmp	r3, #0
1000faf6:	d100      	bne.n	1000fafa <internal_at_ble_service_define+0x36>
1000faf8:	e1c0      	b.n	1000fe7c <internal_at_ble_service_define+0x3b8>
1000fafa:	4bc9      	ldr	r3, [pc, #804]	; (1000fe20 <internal_at_ble_service_define+0x35c>)
1000fafc:	3004      	adds	r0, #4
1000fafe:	681e      	ldr	r6, [r3, #0]
1000fb00:	2e00      	cmp	r6, #0
1000fb02:	d100      	bne.n	1000fb06 <internal_at_ble_service_define+0x42>
1000fb04:	e1ba      	b.n	1000fe7c <internal_at_ble_service_define+0x3b8>
1000fb06:	2400      	movs	r4, #0
1000fb08:	4bc6      	ldr	r3, [pc, #792]	; (1000fe24 <internal_at_ble_service_define+0x360>)
1000fb0a:	8034      	strh	r4, [r6, #0]
1000fb0c:	881b      	ldrh	r3, [r3, #0]
1000fb0e:	1db7      	adds	r7, r6, #6
1000fb10:	1c21      	adds	r1, r4, #0
1000fb12:	2210      	movs	r2, #16
1000fb14:	8073      	strh	r3, [r6, #2]
1000fb16:	1c38      	adds	r0, r7, #0
1000fb18:	4bc3      	ldr	r3, [pc, #780]	; (1000fe28 <internal_at_ble_service_define+0x364>)
1000fb1a:	4798      	blx	r3
1000fb1c:	7828      	ldrb	r0, [r5, #0]
1000fb1e:	4bc3      	ldr	r3, [pc, #780]	; (1000fe2c <internal_at_ble_service_define+0x368>)
1000fb20:	4798      	blx	r3
1000fb22:	1c69      	adds	r1, r5, #1
1000fb24:	1c02      	adds	r2, r0, #0
1000fb26:	4bc2      	ldr	r3, [pc, #776]	; (1000fe30 <internal_at_ble_service_define+0x36c>)
1000fb28:	1c38      	adds	r0, r7, #0
1000fb2a:	4798      	blx	r3
1000fb2c:	2204      	movs	r2, #4
1000fb2e:	782b      	ldrb	r3, [r5, #0]
1000fb30:	9d02      	ldr	r5, [sp, #8]
1000fb32:	011b      	lsls	r3, r3, #4
1000fb34:	4313      	orrs	r3, r2
1000fb36:	9a04      	ldr	r2, [sp, #16]
1000fb38:	7174      	strb	r4, [r6, #5]
1000fb3a:	0192      	lsls	r2, r2, #6
1000fb3c:	4313      	orrs	r3, r2
1000fb3e:	7133      	strb	r3, [r6, #4]
1000fb40:	2316      	movs	r3, #22
1000fb42:	9a06      	ldr	r2, [sp, #24]
1000fb44:	3512      	adds	r5, #18
1000fb46:	4353      	muls	r3, r2
1000fb48:	9a02      	ldr	r2, [sp, #8]
1000fb4a:	3312      	adds	r3, #18
1000fb4c:	18d7      	adds	r7, r2, r3
1000fb4e:	42bd      	cmp	r5, r7
1000fb50:	d00f      	beq.n	1000fb72 <internal_at_ble_service_define+0xae>
1000fb52:	4bb8      	ldr	r3, [pc, #736]	; (1000fe34 <internal_at_ble_service_define+0x370>)
1000fb54:	8829      	ldrh	r1, [r5, #0]
1000fb56:	9300      	str	r3, [sp, #0]
1000fb58:	230e      	movs	r3, #14
1000fb5a:	aa06      	add	r2, sp, #24
1000fb5c:	189b      	adds	r3, r3, r2
1000fb5e:	9301      	str	r3, [sp, #4]
1000fb60:	4cb5      	ldr	r4, [pc, #724]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fb62:	1c30      	adds	r0, r6, #0
1000fb64:	2201      	movs	r2, #1
1000fb66:	2302      	movs	r3, #2
1000fb68:	47a0      	blx	r4
1000fb6a:	3516      	adds	r5, #22
1000fb6c:	1e04      	subs	r4, r0, #0
1000fb6e:	d0ee      	beq.n	1000fb4e <internal_at_ble_service_define+0x8a>
1000fb70:	e183      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fb72:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000fb74:	2300      	movs	r3, #0
1000fb76:	3714      	adds	r7, #20
1000fb78:	1c3d      	adds	r5, r7, #0
1000fb7a:	9302      	str	r3, [sp, #8]
1000fb7c:	9b02      	ldr	r3, [sp, #8]
1000fb7e:	9a03      	ldr	r2, [sp, #12]
1000fb80:	4293      	cmp	r3, r2
1000fb82:	db00      	blt.n	1000fb86 <internal_at_ble_service_define+0xc2>
1000fb84:	e0bf      	b.n	1000fd06 <internal_at_ble_service_define+0x242>
1000fb86:	4bad      	ldr	r3, [pc, #692]	; (1000fe3c <internal_at_ble_service_define+0x378>)
1000fb88:	aa06      	add	r2, sp, #24
1000fb8a:	9300      	str	r3, [sp, #0]
1000fb8c:	230e      	movs	r3, #14
1000fb8e:	189b      	adds	r3, r3, r2
1000fb90:	9301      	str	r3, [sp, #4]
1000fb92:	4ca9      	ldr	r4, [pc, #676]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fb94:	1c30      	adds	r0, r6, #0
1000fb96:	2104      	movs	r1, #4
1000fb98:	2201      	movs	r2, #1
1000fb9a:	2302      	movs	r3, #2
1000fb9c:	47a0      	blx	r4
1000fb9e:	1e04      	subs	r4, r0, #0
1000fba0:	d000      	beq.n	1000fba4 <internal_at_ble_service_define+0xe0>
1000fba2:	e16a      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fba4:	1c2b      	adds	r3, r5, #0
1000fba6:	3b12      	subs	r3, #18
1000fba8:	7b2c      	ldrb	r4, [r5, #12]
1000fbaa:	781b      	ldrb	r3, [r3, #0]
1000fbac:	1c21      	adds	r1, r4, #0
1000fbae:	1c1a      	adds	r2, r3, #0
1000fbb0:	9304      	str	r3, [sp, #16]
1000fbb2:	8828      	ldrh	r0, [r5, #0]
1000fbb4:	4ba2      	ldr	r3, [pc, #648]	; (1000fe40 <internal_at_ble_service_define+0x37c>)
1000fbb6:	4798      	blx	r3
1000fbb8:	2303      	movs	r3, #3
1000fbba:	4023      	ands	r3, r4
1000fbbc:	3b03      	subs	r3, #3
1000fbbe:	4259      	negs	r1, r3
1000fbc0:	4159      	adcs	r1, r3
1000fbc2:	2301      	movs	r3, #1
1000fbc4:	08a4      	lsrs	r4, r4, #2
1000fbc6:	401c      	ands	r4, r3
1000fbc8:	430c      	orrs	r4, r1
1000fbca:	896b      	ldrh	r3, [r5, #10]
1000fbcc:	03e4      	lsls	r4, r4, #15
1000fbce:	431c      	orrs	r4, r3
1000fbd0:	9007      	str	r0, [sp, #28]
1000fbd2:	4b96      	ldr	r3, [pc, #600]	; (1000fe2c <internal_at_ble_service_define+0x368>)
1000fbd4:	9804      	ldr	r0, [sp, #16]
1000fbd6:	4798      	blx	r3
1000fbd8:	1c2a      	adds	r2, r5, #0
1000fbda:	3a11      	subs	r2, #17
1000fbdc:	9200      	str	r2, [sp, #0]
1000fbde:	3a03      	subs	r2, #3
1000fbe0:	1c03      	adds	r3, r0, #0
1000fbe2:	9201      	str	r2, [sp, #4]
1000fbe4:	1c21      	adds	r1, r4, #0
1000fbe6:	1c30      	adds	r0, r6, #0
1000fbe8:	4c93      	ldr	r4, [pc, #588]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fbea:	9a07      	ldr	r2, [sp, #28]
1000fbec:	47a0      	blx	r4
1000fbee:	1e04      	subs	r4, r0, #0
1000fbf0:	d000      	beq.n	1000fbf4 <internal_at_ble_service_define+0x130>
1000fbf2:	e142      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fbf4:	22c0      	movs	r2, #192	; 0xc0
1000fbf6:	882b      	ldrh	r3, [r5, #0]
1000fbf8:	0052      	lsls	r2, r2, #1
1000fbfa:	4213      	tst	r3, r2
1000fbfc:	d104      	bne.n	1000fc08 <internal_at_ble_service_define+0x144>
1000fbfe:	8aab      	ldrh	r3, [r5, #20]
1000fc00:	9304      	str	r3, [sp, #16]
1000fc02:	2b00      	cmp	r3, #0
1000fc04:	d116      	bne.n	1000fc34 <internal_at_ble_service_define+0x170>
1000fc06:	e03a      	b.n	1000fc7e <internal_at_ble_service_define+0x1ba>
1000fc08:	2201      	movs	r2, #1
1000fc0a:	09d9      	lsrs	r1, r3, #7
1000fc0c:	4011      	ands	r1, r2
1000fc0e:	05db      	lsls	r3, r3, #23
1000fc10:	d501      	bpl.n	1000fc16 <internal_at_ble_service_define+0x152>
1000fc12:	2302      	movs	r3, #2
1000fc14:	4319      	orrs	r1, r3
1000fc16:	4b8b      	ldr	r3, [pc, #556]	; (1000fe44 <internal_at_ble_service_define+0x380>)
1000fc18:	aa06      	add	r2, sp, #24
1000fc1a:	9300      	str	r3, [sp, #0]
1000fc1c:	230e      	movs	r3, #14
1000fc1e:	189b      	adds	r3, r3, r2
1000fc20:	9301      	str	r3, [sp, #4]
1000fc22:	4c85      	ldr	r4, [pc, #532]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fc24:	0209      	lsls	r1, r1, #8
1000fc26:	1c30      	adds	r0, r6, #0
1000fc28:	2201      	movs	r2, #1
1000fc2a:	2302      	movs	r3, #2
1000fc2c:	47a0      	blx	r4
1000fc2e:	1e04      	subs	r4, r0, #0
1000fc30:	d0e5      	beq.n	1000fbfe <internal_at_ble_service_define+0x13a>
1000fc32:	e122      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fc34:	2380      	movs	r3, #128	; 0x80
1000fc36:	882a      	ldrh	r2, [r5, #0]
1000fc38:	7f2c      	ldrb	r4, [r5, #28]
1000fc3a:	005b      	lsls	r3, r3, #1
1000fc3c:	401a      	ands	r2, r3
1000fc3e:	1c20      	adds	r0, r4, #0
1000fc40:	2101      	movs	r1, #1
1000fc42:	2a00      	cmp	r2, #0
1000fc44:	d000      	beq.n	1000fc48 <internal_at_ble_service_define+0x184>
1000fc46:	1c0a      	adds	r2, r1, #0
1000fc48:	4b7f      	ldr	r3, [pc, #508]	; (1000fe48 <internal_at_ble_service_define+0x384>)
1000fc4a:	4798      	blx	r3
1000fc4c:	2203      	movs	r2, #3
1000fc4e:	4022      	ands	r2, r4
1000fc50:	3a03      	subs	r2, #3
1000fc52:	4251      	negs	r1, r2
1000fc54:	4151      	adcs	r1, r2
1000fc56:	4b7d      	ldr	r3, [pc, #500]	; (1000fe4c <internal_at_ble_service_define+0x388>)
1000fc58:	1c0a      	adds	r2, r1, #0
1000fc5a:	9300      	str	r3, [sp, #0]
1000fc5c:	1c2b      	adds	r3, r5, #0
1000fc5e:	0764      	lsls	r4, r4, #29
1000fc60:	0fe4      	lsrs	r4, r4, #31
1000fc62:	4322      	orrs	r2, r4
1000fc64:	03d2      	lsls	r2, r2, #15
1000fc66:	4310      	orrs	r0, r2
1000fc68:	3320      	adds	r3, #32
1000fc6a:	b282      	uxth	r2, r0
1000fc6c:	9301      	str	r3, [sp, #4]
1000fc6e:	4c72      	ldr	r4, [pc, #456]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fc70:	1c30      	adds	r0, r6, #0
1000fc72:	9904      	ldr	r1, [sp, #16]
1000fc74:	2302      	movs	r3, #2
1000fc76:	47a0      	blx	r4
1000fc78:	1e04      	subs	r4, r0, #0
1000fc7a:	d000      	beq.n	1000fc7e <internal_at_ble_service_define+0x1ba>
1000fc7c:	e0fd      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fc7e:	2101      	movs	r1, #1
1000fc80:	882b      	ldrh	r3, [r5, #0]
1000fc82:	420b      	tst	r3, r1
1000fc84:	d011      	beq.n	1000fcaa <internal_at_ble_service_define+0x1e6>
1000fc86:	7fa8      	ldrb	r0, [r5, #30]
1000fc88:	4b6f      	ldr	r3, [pc, #444]	; (1000fe48 <internal_at_ble_service_define+0x384>)
1000fc8a:	2200      	movs	r2, #0
1000fc8c:	4798      	blx	r3
1000fc8e:	4b70      	ldr	r3, [pc, #448]	; (1000fe50 <internal_at_ble_service_define+0x38c>)
1000fc90:	1c02      	adds	r2, r0, #0
1000fc92:	9300      	str	r3, [sp, #0]
1000fc94:	1c2b      	adds	r3, r5, #0
1000fc96:	3324      	adds	r3, #36	; 0x24
1000fc98:	9301      	str	r3, [sp, #4]
1000fc9a:	4c67      	ldr	r4, [pc, #412]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fc9c:	1c30      	adds	r0, r6, #0
1000fc9e:	496d      	ldr	r1, [pc, #436]	; (1000fe54 <internal_at_ble_service_define+0x390>)
1000fca0:	2302      	movs	r3, #2
1000fca2:	47a0      	blx	r4
1000fca4:	1e04      	subs	r4, r0, #0
1000fca6:	d000      	beq.n	1000fcaa <internal_at_ble_service_define+0x1e6>
1000fca8:	e0e7      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fcaa:	2330      	movs	r3, #48	; 0x30
1000fcac:	882a      	ldrh	r2, [r5, #0]
1000fcae:	421a      	tst	r2, r3
1000fcb0:	d012      	beq.n	1000fcd8 <internal_at_ble_service_define+0x214>
1000fcb2:	2101      	movs	r1, #1
1000fcb4:	7f68      	ldrb	r0, [r5, #29]
1000fcb6:	1c0a      	adds	r2, r1, #0
1000fcb8:	4b63      	ldr	r3, [pc, #396]	; (1000fe48 <internal_at_ble_service_define+0x384>)
1000fcba:	4798      	blx	r3
1000fcbc:	4b66      	ldr	r3, [pc, #408]	; (1000fe58 <internal_at_ble_service_define+0x394>)
1000fcbe:	1c02      	adds	r2, r0, #0
1000fcc0:	9300      	str	r3, [sp, #0]
1000fcc2:	1c2b      	adds	r3, r5, #0
1000fcc4:	3322      	adds	r3, #34	; 0x22
1000fcc6:	9301      	str	r3, [sp, #4]
1000fcc8:	4c5b      	ldr	r4, [pc, #364]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fcca:	1c30      	adds	r0, r6, #0
1000fccc:	4961      	ldr	r1, [pc, #388]	; (1000fe54 <internal_at_ble_service_define+0x390>)
1000fcce:	2302      	movs	r3, #2
1000fcd0:	47a0      	blx	r4
1000fcd2:	1e04      	subs	r4, r0, #0
1000fcd4:	d000      	beq.n	1000fcd8 <internal_at_ble_service_define+0x214>
1000fcd6:	e0d0      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fcd8:	69ab      	ldr	r3, [r5, #24]
1000fcda:	2b00      	cmp	r3, #0
1000fcdc:	d00e      	beq.n	1000fcfc <internal_at_ble_service_define+0x238>
1000fcde:	4b5f      	ldr	r3, [pc, #380]	; (1000fe5c <internal_at_ble_service_define+0x398>)
1000fce0:	aa06      	add	r2, sp, #24
1000fce2:	9300      	str	r3, [sp, #0]
1000fce4:	230e      	movs	r3, #14
1000fce6:	189b      	adds	r3, r3, r2
1000fce8:	9301      	str	r3, [sp, #4]
1000fcea:	4c53      	ldr	r4, [pc, #332]	; (1000fe38 <internal_at_ble_service_define+0x374>)
1000fcec:	1c30      	adds	r0, r6, #0
1000fcee:	2107      	movs	r1, #7
1000fcf0:	2201      	movs	r2, #1
1000fcf2:	2302      	movs	r3, #2
1000fcf4:	47a0      	blx	r4
1000fcf6:	1e04      	subs	r4, r0, #0
1000fcf8:	d000      	beq.n	1000fcfc <internal_at_ble_service_define+0x238>
1000fcfa:	e0be      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fcfc:	9b02      	ldr	r3, [sp, #8]
1000fcfe:	353c      	adds	r5, #60	; 0x3c
1000fd00:	3301      	adds	r3, #1
1000fd02:	9302      	str	r3, [sp, #8]
1000fd04:	e73a      	b.n	1000fb7c <internal_at_ble_service_define+0xb8>
1000fd06:	1c30      	adds	r0, r6, #0
1000fd08:	4b55      	ldr	r3, [pc, #340]	; (1000fe60 <internal_at_ble_service_define+0x39c>)
1000fd0a:	4798      	blx	r3
1000fd0c:	1e04      	subs	r4, r0, #0
1000fd0e:	d000      	beq.n	1000fd12 <internal_at_ble_service_define+0x24e>
1000fd10:	e0b3      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fd12:	8833      	ldrh	r3, [r6, #0]
1000fd14:	9a05      	ldr	r2, [sp, #20]
1000fd16:	8013      	strh	r3, [r2, #0]
1000fd18:	8836      	ldrh	r6, [r6, #0]
1000fd1a:	9b06      	ldr	r3, [sp, #24]
1000fd1c:	9a03      	ldr	r2, [sp, #12]
1000fd1e:	18f6      	adds	r6, r6, r3
1000fd20:	b2b3      	uxth	r3, r6
1000fd22:	9302      	str	r3, [sp, #8]
1000fd24:	233c      	movs	r3, #60	; 0x3c
1000fd26:	4353      	muls	r3, r2
1000fd28:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000fd2a:	3314      	adds	r3, #20
1000fd2c:	18d3      	adds	r3, r2, r3
1000fd2e:	9304      	str	r3, [sp, #16]
1000fd30:	9b04      	ldr	r3, [sp, #16]
1000fd32:	429f      	cmp	r7, r3
1000fd34:	d100      	bne.n	1000fd38 <internal_at_ble_service_define+0x274>
1000fd36:	e0a0      	b.n	1000fe7a <internal_at_ble_service_define+0x3b6>
1000fd38:	9b02      	ldr	r3, [sp, #8]
1000fd3a:	1c9d      	adds	r5, r3, #2
1000fd3c:	1c3b      	adds	r3, r7, #0
1000fd3e:	b2ad      	uxth	r5, r5
1000fd40:	3b14      	subs	r3, #20
1000fd42:	801d      	strh	r5, [r3, #0]
1000fd44:	9303      	str	r3, [sp, #12]
1000fd46:	893b      	ldrh	r3, [r7, #8]
1000fd48:	2b00      	cmp	r3, #0
1000fd4a:	d108      	bne.n	1000fd5e <internal_at_ble_service_define+0x29a>
1000fd4c:	23c0      	movs	r3, #192	; 0xc0
1000fd4e:	883a      	ldrh	r2, [r7, #0]
1000fd50:	005b      	lsls	r3, r3, #1
1000fd52:	421a      	tst	r2, r3
1000fd54:	d026      	beq.n	1000fda4 <internal_at_ble_service_define+0x2e0>
1000fd56:	9e02      	ldr	r6, [sp, #8]
1000fd58:	3603      	adds	r6, #3
1000fd5a:	b2b5      	uxth	r5, r6
1000fd5c:	e022      	b.n	1000fda4 <internal_at_ble_service_define+0x2e0>
1000fd5e:	2103      	movs	r1, #3
1000fd60:	7b3b      	ldrb	r3, [r7, #12]
1000fd62:	4019      	ands	r1, r3
1000fd64:	3903      	subs	r1, #3
1000fd66:	424a      	negs	r2, r1
1000fd68:	414a      	adcs	r2, r1
1000fd6a:	0759      	lsls	r1, r3, #29
1000fd6c:	0fc9      	lsrs	r1, r1, #31
1000fd6e:	4311      	orrs	r1, r2
1000fd70:	03c9      	lsls	r1, r1, #15
1000fd72:	897a      	ldrh	r2, [r7, #10]
1000fd74:	2900      	cmp	r1, #0
1000fd76:	d007      	beq.n	1000fd88 <internal_at_ble_service_define+0x2c4>
1000fd78:	6879      	ldr	r1, [r7, #4]
1000fd7a:	2900      	cmp	r1, #0
1000fd7c:	d100      	bne.n	1000fd80 <internal_at_ble_service_define+0x2bc>
1000fd7e:	4939      	ldr	r1, [pc, #228]	; (1000fe64 <internal_at_ble_service_define+0x3a0>)
1000fd80:	1c28      	adds	r0, r5, #0
1000fd82:	4e39      	ldr	r6, [pc, #228]	; (1000fe68 <internal_at_ble_service_define+0x3a4>)
1000fd84:	47b0      	blx	r6
1000fd86:	e00a      	b.n	1000fd9e <internal_at_ble_service_define+0x2da>
1000fd88:	1c28      	adds	r0, r5, #0
1000fd8a:	4e37      	ldr	r6, [pc, #220]	; (1000fe68 <internal_at_ble_service_define+0x3a4>)
1000fd8c:	47b0      	blx	r6
1000fd8e:	2800      	cmp	r0, #0
1000fd90:	d172      	bne.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fd92:	9b03      	ldr	r3, [sp, #12]
1000fd94:	8939      	ldrh	r1, [r7, #8]
1000fd96:	8818      	ldrh	r0, [r3, #0]
1000fd98:	687a      	ldr	r2, [r7, #4]
1000fd9a:	4b34      	ldr	r3, [pc, #208]	; (1000fe6c <internal_at_ble_service_define+0x3a8>)
1000fd9c:	4798      	blx	r3
1000fd9e:	2800      	cmp	r0, #0
1000fda0:	d0d4      	beq.n	1000fd4c <internal_at_ble_service_define+0x288>
1000fda2:	e069      	b.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fda4:	8abb      	ldrh	r3, [r7, #20]
1000fda6:	2b00      	cmp	r3, #0
1000fda8:	d00a      	beq.n	1000fdc0 <internal_at_ble_service_define+0x2fc>
1000fdaa:	3501      	adds	r5, #1
1000fdac:	b2ad      	uxth	r5, r5
1000fdae:	843d      	strh	r5, [r7, #32]
1000fdb0:	7f39      	ldrb	r1, [r7, #28]
1000fdb2:	8afb      	ldrh	r3, [r7, #22]
1000fdb4:	1c28      	adds	r0, r5, #0
1000fdb6:	693a      	ldr	r2, [r7, #16]
1000fdb8:	4e2d      	ldr	r6, [pc, #180]	; (1000fe70 <internal_at_ble_service_define+0x3ac>)
1000fdba:	47b0      	blx	r6
1000fdbc:	2800      	cmp	r0, #0
1000fdbe:	d15b      	bne.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fdc0:	883b      	ldrh	r3, [r7, #0]
1000fdc2:	07db      	lsls	r3, r3, #31
1000fdc4:	d50d      	bpl.n	1000fde2 <internal_at_ble_service_define+0x31e>
1000fdc6:	2200      	movs	r2, #0
1000fdc8:	3501      	adds	r5, #1
1000fdca:	b2ad      	uxth	r5, r5
1000fdcc:	a909      	add	r1, sp, #36	; 0x24
1000fdce:	84bd      	strh	r5, [r7, #36]	; 0x24
1000fdd0:	7fbb      	ldrb	r3, [r7, #30]
1000fdd2:	1c28      	adds	r0, r5, #0
1000fdd4:	700a      	strb	r2, [r1, #0]
1000fdd6:	704a      	strb	r2, [r1, #1]
1000fdd8:	4e23      	ldr	r6, [pc, #140]	; (1000fe68 <internal_at_ble_service_define+0x3a4>)
1000fdda:	3202      	adds	r2, #2
1000fddc:	47b0      	blx	r6
1000fdde:	2800      	cmp	r0, #0
1000fde0:	d14a      	bne.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fde2:	2330      	movs	r3, #48	; 0x30
1000fde4:	883a      	ldrh	r2, [r7, #0]
1000fde6:	421a      	tst	r2, r3
1000fde8:	d00d      	beq.n	1000fe06 <internal_at_ble_service_define+0x342>
1000fdea:	2200      	movs	r2, #0
1000fdec:	3501      	adds	r5, #1
1000fdee:	b2ad      	uxth	r5, r5
1000fdf0:	a909      	add	r1, sp, #36	; 0x24
1000fdf2:	847d      	strh	r5, [r7, #34]	; 0x22
1000fdf4:	7f7b      	ldrb	r3, [r7, #29]
1000fdf6:	1c28      	adds	r0, r5, #0
1000fdf8:	700a      	strb	r2, [r1, #0]
1000fdfa:	704a      	strb	r2, [r1, #1]
1000fdfc:	4e1a      	ldr	r6, [pc, #104]	; (1000fe68 <internal_at_ble_service_define+0x3a4>)
1000fdfe:	3202      	adds	r2, #2
1000fe00:	47b0      	blx	r6
1000fe02:	2800      	cmp	r0, #0
1000fe04:	d138      	bne.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fe06:	69b9      	ldr	r1, [r7, #24]
1000fe08:	2900      	cmp	r1, #0
1000fe0a:	d006      	beq.n	1000fe1a <internal_at_ble_service_define+0x356>
1000fe0c:	3501      	adds	r5, #1
1000fe0e:	b2ad      	uxth	r5, r5
1000fe10:	1c28      	adds	r0, r5, #0
1000fe12:	4b18      	ldr	r3, [pc, #96]	; (1000fe74 <internal_at_ble_service_define+0x3b0>)
1000fe14:	4798      	blx	r3
1000fe16:	2800      	cmp	r0, #0
1000fe18:	d12e      	bne.n	1000fe78 <internal_at_ble_service_define+0x3b4>
1000fe1a:	373c      	adds	r7, #60	; 0x3c
1000fe1c:	9502      	str	r5, [sp, #8]
1000fe1e:	e787      	b.n	1000fd30 <internal_at_ble_service_define+0x26c>
1000fe20:	1001a0fc 	.word	0x1001a0fc
1000fe24:	1001b050 	.word	0x1001b050
1000fe28:	10016235 	.word	0x10016235
1000fe2c:	1000f7f9 	.word	0x1000f7f9
1000fe30:	10016223 	.word	0x10016223
1000fe34:	1001843e 	.word	0x1001843e
1000fe38:	10011c85 	.word	0x10011c85
1000fe3c:	10018440 	.word	0x10018440
1000fe40:	1000f8c5 	.word	0x1000f8c5
1000fe44:	1001843c 	.word	0x1001843c
1000fe48:	1000f86d 	.word	0x1000f86d
1000fe4c:	10018438 	.word	0x10018438
1000fe50:	1001843a 	.word	0x1001843a
1000fe54:	00008002 	.word	0x00008002
1000fe58:	10018434 	.word	0x10018434
1000fe5c:	10018436 	.word	0x10018436
1000fe60:	10011b79 	.word	0x10011b79
1000fe64:	1001a0e8 	.word	0x1001a0e8
1000fe68:	1000f98d 	.word	0x1000f98d
1000fe6c:	10011cf5 	.word	0x10011cf5
1000fe70:	1000fa45 	.word	0x1000fa45
1000fe74:	1000f961 	.word	0x1000f961
1000fe78:	1c04      	adds	r4, r0, #0
1000fe7a:	1c20      	adds	r0, r4, #0
1000fe7c:	b00b      	add	sp, #44	; 0x2c
1000fe7e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000fe80 <initi_gatt_server_module>:
1000fe80:	2300      	movs	r3, #0
1000fe82:	4a07      	ldr	r2, [pc, #28]	; (1000fea0 <initi_gatt_server_module+0x20>)
1000fe84:	7013      	strb	r3, [r2, #0]
1000fe86:	4a07      	ldr	r2, [pc, #28]	; (1000fea4 <initi_gatt_server_module+0x24>)
1000fe88:	6013      	str	r3, [r2, #0]
1000fe8a:	4a07      	ldr	r2, [pc, #28]	; (1000fea8 <initi_gatt_server_module+0x28>)
1000fe8c:	6013      	str	r3, [r2, #0]
1000fe8e:	4a07      	ldr	r2, [pc, #28]	; (1000feac <initi_gatt_server_module+0x2c>)
1000fe90:	6013      	str	r3, [r2, #0]
1000fe92:	4a07      	ldr	r2, [pc, #28]	; (1000feb0 <initi_gatt_server_module+0x30>)
1000fe94:	6013      	str	r3, [r2, #0]
1000fe96:	4a07      	ldr	r2, [pc, #28]	; (1000feb4 <initi_gatt_server_module+0x34>)
1000fe98:	6013      	str	r3, [r2, #0]
1000fe9a:	4a07      	ldr	r2, [pc, #28]	; (1000feb8 <initi_gatt_server_module+0x38>)
1000fe9c:	6013      	str	r3, [r2, #0]
1000fe9e:	4770      	bx	lr
1000fea0:	1001a0e8 	.word	0x1001a0e8
1000fea4:	1001a0f8 	.word	0x1001a0f8
1000fea8:	1001a0f4 	.word	0x1001a0f4
1000feac:	1001a0e4 	.word	0x1001a0e4
1000feb0:	1001a0f0 	.word	0x1001a0f0
1000feb4:	1001a0ec 	.word	0x1001a0ec
1000feb8:	1001a0fc 	.word	0x1001a0fc

1000febc <db_init>:
1000febc:	4b0a      	ldr	r3, [pc, #40]	; (1000fee8 <db_init+0x2c>)
1000febe:	4a0b      	ldr	r2, [pc, #44]	; (1000feec <db_init+0x30>)
1000fec0:	6018      	str	r0, [r3, #0]
1000fec2:	084b      	lsrs	r3, r1, #1
1000fec4:	6013      	str	r3, [r2, #0]
1000fec6:	4a0a      	ldr	r2, [pc, #40]	; (1000fef0 <db_init+0x34>)
1000fec8:	18c3      	adds	r3, r0, r3
1000feca:	6013      	str	r3, [r2, #0]
1000fecc:	4a09      	ldr	r2, [pc, #36]	; (1000fef4 <db_init+0x38>)
1000fece:	1841      	adds	r1, r0, r1
1000fed0:	6013      	str	r3, [r2, #0]
1000fed2:	2303      	movs	r3, #3
1000fed4:	2200      	movs	r2, #0
1000fed6:	3103      	adds	r1, #3
1000fed8:	4399      	bics	r1, r3
1000feda:	4b07      	ldr	r3, [pc, #28]	; (1000fef8 <db_init+0x3c>)
1000fedc:	3904      	subs	r1, #4
1000fede:	6019      	str	r1, [r3, #0]
1000fee0:	4b06      	ldr	r3, [pc, #24]	; (1000fefc <db_init+0x40>)
1000fee2:	601a      	str	r2, [r3, #0]
1000fee4:	4770      	bx	lr
1000fee6:	46c0      	nop			; (mov r8, r8)
1000fee8:	1001a0fc 	.word	0x1001a0fc
1000feec:	1001a0f8 	.word	0x1001a0f8
1000fef0:	1001a0e4 	.word	0x1001a0e4
1000fef4:	1001a0f0 	.word	0x1001a0f0
1000fef8:	1001a0ec 	.word	0x1001a0ec
1000fefc:	1001a0f4 	.word	0x1001a0f4

1000ff00 <at_ble_primary_service_define>:
1000ff00:	b530      	push	{r4, r5, lr}
1000ff02:	b085      	sub	sp, #20
1000ff04:	ac08      	add	r4, sp, #32
1000ff06:	cc20      	ldmia	r4!, {r5}
1000ff08:	8824      	ldrh	r4, [r4, #0]
1000ff0a:	9500      	str	r5, [sp, #0]
1000ff0c:	9401      	str	r4, [sp, #4]
1000ff0e:	2401      	movs	r4, #1
1000ff10:	9402      	str	r4, [sp, #8]
1000ff12:	4c02      	ldr	r4, [pc, #8]	; (1000ff1c <at_ble_primary_service_define+0x1c>)
1000ff14:	47a0      	blx	r4
1000ff16:	b005      	add	sp, #20
1000ff18:	bd30      	pop	{r4, r5, pc}
1000ff1a:	46c0      	nop			; (mov r8, r8)
1000ff1c:	1000fac5 	.word	0x1000fac5

1000ff20 <at_ble_characteristic_value_set>:
1000ff20:	b570      	push	{r4, r5, r6, lr}
1000ff22:	4b0b      	ldr	r3, [pc, #44]	; (1000ff50 <at_ble_characteristic_value_set+0x30>)
1000ff24:	1c06      	adds	r6, r0, #0
1000ff26:	1c0c      	adds	r4, r1, #0
1000ff28:	1c15      	adds	r5, r2, #0
1000ff2a:	4798      	blx	r3
1000ff2c:	2800      	cmp	r0, #0
1000ff2e:	d008      	beq.n	1000ff42 <at_ble_characteristic_value_set+0x22>
1000ff30:	6880      	ldr	r0, [r0, #8]
1000ff32:	2800      	cmp	r0, #0
1000ff34:	d005      	beq.n	1000ff42 <at_ble_characteristic_value_set+0x22>
1000ff36:	1c21      	adds	r1, r4, #0
1000ff38:	1c2a      	adds	r2, r5, #0
1000ff3a:	4b06      	ldr	r3, [pc, #24]	; (1000ff54 <at_ble_characteristic_value_set+0x34>)
1000ff3c:	4798      	blx	r3
1000ff3e:	2000      	movs	r0, #0
1000ff40:	e004      	b.n	1000ff4c <at_ble_characteristic_value_set+0x2c>
1000ff42:	1c30      	adds	r0, r6, #0
1000ff44:	1c29      	adds	r1, r5, #0
1000ff46:	1c22      	adds	r2, r4, #0
1000ff48:	4b03      	ldr	r3, [pc, #12]	; (1000ff58 <at_ble_characteristic_value_set+0x38>)
1000ff4a:	4798      	blx	r3
1000ff4c:	bd70      	pop	{r4, r5, r6, pc}
1000ff4e:	46c0      	nop			; (mov r8, r8)
1000ff50:	1000f82d 	.word	0x1000f82d
1000ff54:	10016223 	.word	0x10016223
1000ff58:	10011cf5 	.word	0x10011cf5

1000ff5c <at_ble_characteristic_value_get>:
1000ff5c:	b570      	push	{r4, r5, r6, lr}
1000ff5e:	4b0c      	ldr	r3, [pc, #48]	; (1000ff90 <at_ble_characteristic_value_get+0x34>)
1000ff60:	1c06      	adds	r6, r0, #0
1000ff62:	1c0c      	adds	r4, r1, #0
1000ff64:	1c15      	adds	r5, r2, #0
1000ff66:	4798      	blx	r3
1000ff68:	2800      	cmp	r0, #0
1000ff6a:	d00b      	beq.n	1000ff84 <at_ble_characteristic_value_get+0x28>
1000ff6c:	6883      	ldr	r3, [r0, #8]
1000ff6e:	2b00      	cmp	r3, #0
1000ff70:	d008      	beq.n	1000ff84 <at_ble_characteristic_value_get+0x28>
1000ff72:	8883      	ldrh	r3, [r0, #4]
1000ff74:	802b      	strh	r3, [r5, #0]
1000ff76:	8882      	ldrh	r2, [r0, #4]
1000ff78:	6881      	ldr	r1, [r0, #8]
1000ff7a:	4b06      	ldr	r3, [pc, #24]	; (1000ff94 <at_ble_characteristic_value_get+0x38>)
1000ff7c:	1c20      	adds	r0, r4, #0
1000ff7e:	4798      	blx	r3
1000ff80:	2000      	movs	r0, #0
1000ff82:	e004      	b.n	1000ff8e <at_ble_characteristic_value_get+0x32>
1000ff84:	1c30      	adds	r0, r6, #0
1000ff86:	1c29      	adds	r1, r5, #0
1000ff88:	1c22      	adds	r2, r4, #0
1000ff8a:	4b03      	ldr	r3, [pc, #12]	; (1000ff98 <at_ble_characteristic_value_get+0x3c>)
1000ff8c:	4798      	blx	r3
1000ff8e:	bd70      	pop	{r4, r5, r6, pc}
1000ff90:	1000f82d 	.word	0x1000f82d
1000ff94:	10016223 	.word	0x10016223
1000ff98:	10011d81 	.word	0x10011d81

1000ff9c <at_ble_write_authorize_reply>:
1000ff9c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ff9e:	b085      	sub	sp, #20
1000ffa0:	1c04      	adds	r4, r0, #0
1000ffa2:	9101      	str	r1, [sp, #4]
1000ffa4:	2900      	cmp	r1, #0
1000ffa6:	d128      	bne.n	1000fffa <at_ble_write_authorize_reply+0x5e>
1000ffa8:	8843      	ldrh	r3, [r0, #2]
1000ffaa:	1c27      	adds	r7, r4, #0
1000ffac:	9300      	str	r3, [sp, #0]
1000ffae:	1c18      	adds	r0, r3, #0
1000ffb0:	4b16      	ldr	r3, [pc, #88]	; (1001000c <at_ble_write_authorize_reply+0x70>)
1000ffb2:	4798      	blx	r3
1000ffb4:	3708      	adds	r7, #8
1000ffb6:	2800      	cmp	r0, #0
1000ffb8:	d009      	beq.n	1000ffce <at_ble_write_authorize_reply+0x32>
1000ffba:	6880      	ldr	r0, [r0, #8]
1000ffbc:	2800      	cmp	r0, #0
1000ffbe:	d006      	beq.n	1000ffce <at_ble_write_authorize_reply+0x32>
1000ffc0:	88a3      	ldrh	r3, [r4, #4]
1000ffc2:	88e2      	ldrh	r2, [r4, #6]
1000ffc4:	18c0      	adds	r0, r0, r3
1000ffc6:	1c39      	adds	r1, r7, #0
1000ffc8:	4b11      	ldr	r3, [pc, #68]	; (10010010 <at_ble_write_authorize_reply+0x74>)
1000ffca:	4798      	blx	r3
1000ffcc:	e015      	b.n	1000fffa <at_ble_write_authorize_reply+0x5e>
1000ffce:	ab02      	add	r3, sp, #8
1000ffd0:	1d9e      	adds	r6, r3, #6
1000ffd2:	2300      	movs	r3, #0
1000ffd4:	4d0f      	ldr	r5, [pc, #60]	; (10010014 <at_ble_write_authorize_reply+0x78>)
1000ffd6:	8033      	strh	r3, [r6, #0]
1000ffd8:	6829      	ldr	r1, [r5, #0]
1000ffda:	1c32      	adds	r2, r6, #0
1000ffdc:	4b0e      	ldr	r3, [pc, #56]	; (10010018 <at_ble_write_authorize_reply+0x7c>)
1000ffde:	9800      	ldr	r0, [sp, #0]
1000ffe0:	4798      	blx	r3
1000ffe2:	682b      	ldr	r3, [r5, #0]
1000ffe4:	88a0      	ldrh	r0, [r4, #4]
1000ffe6:	88e2      	ldrh	r2, [r4, #6]
1000ffe8:	1818      	adds	r0, r3, r0
1000ffea:	1c39      	adds	r1, r7, #0
1000ffec:	4b08      	ldr	r3, [pc, #32]	; (10010010 <at_ble_write_authorize_reply+0x74>)
1000ffee:	4798      	blx	r3
1000fff0:	8860      	ldrh	r0, [r4, #2]
1000fff2:	8832      	ldrh	r2, [r6, #0]
1000fff4:	6829      	ldr	r1, [r5, #0]
1000fff6:	4b09      	ldr	r3, [pc, #36]	; (1001001c <at_ble_write_authorize_reply+0x80>)
1000fff8:	4798      	blx	r3
1000fffa:	8860      	ldrh	r0, [r4, #2]
1000fffc:	8821      	ldrh	r1, [r4, #0]
1000fffe:	9a01      	ldr	r2, [sp, #4]
10010000:	4b07      	ldr	r3, [pc, #28]	; (10010020 <at_ble_write_authorize_reply+0x84>)
10010002:	4798      	blx	r3
10010004:	2000      	movs	r0, #0
10010006:	b005      	add	sp, #20
10010008:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001000a:	46c0      	nop			; (mov r8, r8)
1001000c:	1000f82d 	.word	0x1000f82d
10010010:	10016223 	.word	0x10016223
10010014:	10018660 	.word	0x10018660
10010018:	1000ff5d 	.word	0x1000ff5d
1001001c:	1000ff21 	.word	0x1000ff21
10010020:	100117f9 	.word	0x100117f9

10010024 <gatts_handle_read_req>:
10010024:	b538      	push	{r3, r4, r5, lr}
10010026:	1c0c      	adds	r4, r1, #0
10010028:	4b07      	ldr	r3, [pc, #28]	; (10010048 <gatts_handle_read_req+0x24>)
1001002a:	4798      	blx	r3
1001002c:	8865      	ldrh	r5, [r4, #2]
1001002e:	4b07      	ldr	r3, [pc, #28]	; (1001004c <gatts_handle_read_req+0x28>)
10010030:	1c28      	adds	r0, r5, #0
10010032:	4798      	blx	r3
10010034:	7883      	ldrb	r3, [r0, #2]
10010036:	2026      	movs	r0, #38	; 0x26
10010038:	07db      	lsls	r3, r3, #31
1001003a:	d404      	bmi.n	10010046 <gatts_handle_read_req+0x22>
1001003c:	8820      	ldrh	r0, [r4, #0]
1001003e:	1c29      	adds	r1, r5, #0
10010040:	4b03      	ldr	r3, [pc, #12]	; (10010050 <gatts_handle_read_req+0x2c>)
10010042:	4798      	blx	r3
10010044:	203b      	movs	r0, #59	; 0x3b
10010046:	bd38      	pop	{r3, r4, r5, pc}
10010048:	1001173d 	.word	0x1001173d
1001004c:	1000f82d 	.word	0x1000f82d
10010050:	1000fa95 	.word	0x1000fa95

10010054 <gatts_handle_att_info_req>:
10010054:	b538      	push	{r3, r4, r5, lr}
10010056:	1c0d      	adds	r5, r1, #0
10010058:	4b0a      	ldr	r3, [pc, #40]	; (10010084 <gatts_handle_att_info_req+0x30>)
1001005a:	1c14      	adds	r4, r2, #0
1001005c:	4798      	blx	r3
1001005e:	882d      	ldrh	r5, [r5, #0]
10010060:	4b09      	ldr	r3, [pc, #36]	; (10010088 <gatts_handle_att_info_req+0x34>)
10010062:	1c28      	adds	r0, r5, #0
10010064:	4798      	blx	r3
10010066:	0a22      	lsrs	r2, r4, #8
10010068:	1c03      	adds	r3, r0, #0
1001006a:	4c08      	ldr	r4, [pc, #32]	; (1001008c <gatts_handle_att_info_req+0x38>)
1001006c:	b291      	uxth	r1, r2
1001006e:	2800      	cmp	r0, #0
10010070:	d003      	beq.n	1001007a <gatts_handle_att_info_req+0x26>
10010072:	8882      	ldrh	r2, [r0, #4]
10010074:	2300      	movs	r3, #0
10010076:	1c28      	adds	r0, r5, #0
10010078:	e001      	b.n	1001007e <gatts_handle_att_info_req+0x2a>
1001007a:	1c28      	adds	r0, r5, #0
1001007c:	2201      	movs	r2, #1
1001007e:	47a0      	blx	r4
10010080:	203b      	movs	r0, #59	; 0x3b
10010082:	bd38      	pop	{r3, r4, r5, pc}
10010084:	10011781 	.word	0x10011781
10010088:	1000f82d 	.word	0x1000f82d
1001008c:	1001183d 	.word	0x1001183d

10010090 <gatts_handle_write_req>:
10010090:	b510      	push	{r4, lr}
10010092:	1c14      	adds	r4, r2, #0
10010094:	4b07      	ldr	r3, [pc, #28]	; (100100b4 <gatts_handle_write_req+0x24>)
10010096:	4798      	blx	r3
10010098:	4b07      	ldr	r3, [pc, #28]	; (100100b8 <gatts_handle_write_req+0x28>)
1001009a:	8860      	ldrh	r0, [r4, #2]
1001009c:	4798      	blx	r3
1001009e:	2302      	movs	r3, #2
100100a0:	7881      	ldrb	r1, [r0, #2]
100100a2:	2022      	movs	r0, #34	; 0x22
100100a4:	4019      	ands	r1, r3
100100a6:	d103      	bne.n	100100b0 <gatts_handle_write_req+0x20>
100100a8:	1c20      	adds	r0, r4, #0
100100aa:	4b04      	ldr	r3, [pc, #16]	; (100100bc <gatts_handle_write_req+0x2c>)
100100ac:	4798      	blx	r3
100100ae:	201f      	movs	r0, #31
100100b0:	bd10      	pop	{r4, pc}
100100b2:	46c0      	nop			; (mov r8, r8)
100100b4:	10011749 	.word	0x10011749
100100b8:	1000f82d 	.word	0x1000f82d
100100bc:	1000ff9d 	.word	0x1000ff9d

100100c0 <at_ble_notification_send>:
100100c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100100c2:	4d17      	ldr	r5, [pc, #92]	; (10010120 <at_ble_notification_send+0x60>)
100100c4:	4c17      	ldr	r4, [pc, #92]	; (10010124 <at_ble_notification_send+0x64>)
100100c6:	682a      	ldr	r2, [r5, #0]
100100c8:	44a5      	add	sp, r4
100100ca:	23d2      	movs	r3, #210	; 0xd2
100100cc:	2a04      	cmp	r2, #4
100100ce:	d822      	bhi.n	10010116 <at_ble_notification_send+0x56>
100100d0:	1c06      	adds	r6, r0, #0
100100d2:	4b15      	ldr	r3, [pc, #84]	; (10010128 <at_ble_notification_send+0x68>)
100100d4:	1c08      	adds	r0, r1, #0
100100d6:	1c0c      	adds	r4, r1, #0
100100d8:	4798      	blx	r3
100100da:	2800      	cmp	r0, #0
100100dc:	d008      	beq.n	100100f0 <at_ble_notification_send+0x30>
100100de:	6883      	ldr	r3, [r0, #8]
100100e0:	2b00      	cmp	r3, #0
100100e2:	d005      	beq.n	100100f0 <at_ble_notification_send+0x30>
100100e4:	8882      	ldrh	r2, [r0, #4]
100100e6:	1c21      	adds	r1, r4, #0
100100e8:	9200      	str	r2, [sp, #0]
100100ea:	2012      	movs	r0, #18
100100ec:	1c32      	adds	r2, r6, #0
100100ee:	e00c      	b.n	1001010a <at_ble_notification_send+0x4a>
100100f0:	270e      	movs	r7, #14
100100f2:	446f      	add	r7, sp
100100f4:	1c39      	adds	r1, r7, #0
100100f6:	aa04      	add	r2, sp, #16
100100f8:	4b0c      	ldr	r3, [pc, #48]	; (1001012c <at_ble_notification_send+0x6c>)
100100fa:	1c20      	adds	r0, r4, #0
100100fc:	4798      	blx	r3
100100fe:	2012      	movs	r0, #18
10010100:	1c21      	adds	r1, r4, #0
10010102:	1c32      	adds	r2, r6, #0
10010104:	883b      	ldrh	r3, [r7, #0]
10010106:	9300      	str	r3, [sp, #0]
10010108:	ab04      	add	r3, sp, #16
1001010a:	4c09      	ldr	r4, [pc, #36]	; (10010130 <at_ble_notification_send+0x70>)
1001010c:	47a0      	blx	r4
1001010e:	682b      	ldr	r3, [r5, #0]
10010110:	3301      	adds	r3, #1
10010112:	602b      	str	r3, [r5, #0]
10010114:	2300      	movs	r3, #0
10010116:	1c18      	adds	r0, r3, #0
10010118:	2385      	movs	r3, #133	; 0x85
1001011a:	009b      	lsls	r3, r3, #2
1001011c:	449d      	add	sp, r3
1001011e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010120:	1001a188 	.word	0x1001a188
10010124:	fffffdec 	.word	0xfffffdec
10010128:	1000f82d 	.word	0x1000f82d
1001012c:	10011d81 	.word	0x10011d81
10010130:	10011885 	.word	0x10011885

10010134 <init_l2cc_task_module>:
10010134:	220a      	movs	r2, #10
10010136:	4b01      	ldr	r3, [pc, #4]	; (1001013c <init_l2cc_task_module+0x8>)
10010138:	701a      	strb	r2, [r3, #0]
1001013a:	4770      	bx	lr
1001013c:	1001865c 	.word	0x1001865c

10010140 <l2cc_data_send_rsp_handler>:
10010140:	b510      	push	{r4, lr}
10010142:	7802      	ldrb	r2, [r0, #0]
10010144:	700a      	strb	r2, [r1, #0]
10010146:	7883      	ldrb	r3, [r0, #2]
10010148:	7844      	ldrb	r4, [r0, #1]
1001014a:	021b      	lsls	r3, r3, #8
1001014c:	4323      	orrs	r3, r4
1001014e:	804b      	strh	r3, [r1, #2]
10010150:	7903      	ldrb	r3, [r0, #4]
10010152:	78c0      	ldrb	r0, [r0, #3]
10010154:	021b      	lsls	r3, r3, #8
10010156:	4303      	orrs	r3, r0
10010158:	808b      	strh	r3, [r1, #4]
1001015a:	2a00      	cmp	r2, #0
1001015c:	d103      	bne.n	10010166 <l2cc_data_send_rsp_handler+0x26>
1001015e:	4a02      	ldr	r2, [pc, #8]	; (10010168 <l2cc_data_send_rsp_handler+0x28>)
10010160:	7813      	ldrb	r3, [r2, #0]
10010162:	3301      	adds	r3, #1
10010164:	7013      	strb	r3, [r2, #0]
10010166:	bd10      	pop	{r4, pc}
10010168:	1001865c 	.word	0x1001865c

1001016c <l2cc_data_received_handler>:
1001016c:	b508      	push	{r3, lr}
1001016e:	1c03      	adds	r3, r0, #0
10010170:	7842      	ldrb	r2, [r0, #1]
10010172:	7800      	ldrb	r0, [r0, #0]
10010174:	0212      	lsls	r2, r2, #8
10010176:	4302      	orrs	r2, r0
10010178:	800a      	strh	r2, [r1, #0]
1001017a:	78da      	ldrb	r2, [r3, #3]
1001017c:	7898      	ldrb	r0, [r3, #2]
1001017e:	0212      	lsls	r2, r2, #8
10010180:	4302      	orrs	r2, r0
10010182:	804a      	strh	r2, [r1, #2]
10010184:	795a      	ldrb	r2, [r3, #5]
10010186:	7918      	ldrb	r0, [r3, #4]
10010188:	0212      	lsls	r2, r2, #8
1001018a:	4302      	orrs	r2, r0
1001018c:	808a      	strh	r2, [r1, #4]
1001018e:	1d88      	adds	r0, r1, #6
10010190:	1d99      	adds	r1, r3, #6
10010192:	4b01      	ldr	r3, [pc, #4]	; (10010198 <l2cc_data_received_handler+0x2c>)
10010194:	4798      	blx	r3
10010196:	bd08      	pop	{r3, pc}
10010198:	10016223 	.word	0x10016223

1001019c <at_ble_authenticate>:
1001019c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001019e:	1c0c      	adds	r4, r1, #0
100101a0:	211f      	movs	r1, #31
100101a2:	b08b      	sub	sp, #44	; 0x2c
100101a4:	9307      	str	r3, [sp, #28]
100101a6:	ab02      	add	r3, sp, #8
100101a8:	18c9      	adds	r1, r1, r3
100101aa:	230f      	movs	r3, #15
100101ac:	700b      	strb	r3, [r1, #0]
100101ae:	4b40      	ldr	r3, [pc, #256]	; (100102b0 <at_ble_authenticate+0x114>)
100101b0:	1c05      	adds	r5, r0, #0
100101b2:	1c16      	adds	r6, r2, #0
100101b4:	4798      	blx	r3
100101b6:	1c07      	adds	r7, r0, #0
100101b8:	2001      	movs	r0, #1
100101ba:	2f07      	cmp	r7, #7
100101bc:	d875      	bhi.n	100102aa <at_ble_authenticate+0x10e>
100101be:	2c00      	cmp	r4, #0
100101c0:	d113      	bne.n	100101ea <at_ble_authenticate+0x4e>
100101c2:	2312      	movs	r3, #18
100101c4:	435f      	muls	r7, r3
100101c6:	4b3b      	ldr	r3, [pc, #236]	; (100102b4 <at_ble_authenticate+0x118>)
100101c8:	5cfb      	ldrb	r3, [r7, r3]
100101ca:	4283      	cmp	r3, r0
100101cc:	d001      	beq.n	100101d2 <at_ble_authenticate+0x36>
100101ce:	20cf      	movs	r0, #207	; 0xcf
100101d0:	e06b      	b.n	100102aa <at_ble_authenticate+0x10e>
100101d2:	9504      	str	r5, [sp, #16]
100101d4:	9400      	str	r4, [sp, #0]
100101d6:	9401      	str	r4, [sp, #4]
100101d8:	9402      	str	r4, [sp, #8]
100101da:	9403      	str	r4, [sp, #12]
100101dc:	1c20      	adds	r0, r4, #0
100101de:	1c21      	adds	r1, r4, #0
100101e0:	1c22      	adds	r2, r4, #0
100101e2:	1c23      	adds	r3, r4, #0
100101e4:	4d34      	ldr	r5, [pc, #208]	; (100102b8 <at_ble_authenticate+0x11c>)
100101e6:	47a8      	blx	r5
100101e8:	e05e      	b.n	100102a8 <at_ble_authenticate+0x10c>
100101ea:	7922      	ldrb	r2, [r4, #4]
100101ec:	2a06      	cmp	r2, #6
100101ee:	d9ee      	bls.n	100101ce <at_ble_authenticate+0x32>
100101f0:	7963      	ldrb	r3, [r4, #5]
100101f2:	2b10      	cmp	r3, #16
100101f4:	d8eb      	bhi.n	100101ce <at_ble_authenticate+0x32>
100101f6:	429a      	cmp	r2, r3
100101f8:	d8e9      	bhi.n	100101ce <at_ble_authenticate+0x32>
100101fa:	7a23      	ldrb	r3, [r4, #8]
100101fc:	2b04      	cmp	r3, #4
100101fe:	d8e6      	bhi.n	100101ce <at_ble_authenticate+0x32>
10010200:	79a3      	ldrb	r3, [r4, #6]
10010202:	2b07      	cmp	r3, #7
10010204:	d8e3      	bhi.n	100101ce <at_ble_authenticate+0x32>
10010206:	79e3      	ldrb	r3, [r4, #7]
10010208:	2b07      	cmp	r3, #7
1001020a:	d8e0      	bhi.n	100101ce <at_ble_authenticate+0x32>
1001020c:	78a3      	ldrb	r3, [r4, #2]
1001020e:	2b00      	cmp	r3, #0
10010210:	d006      	beq.n	10010220 <at_ble_authenticate+0x84>
10010212:	2e00      	cmp	r6, #0
10010214:	d0db      	beq.n	100101ce <at_ble_authenticate+0x32>
10010216:	4829      	ldr	r0, [pc, #164]	; (100102bc <at_ble_authenticate+0x120>)
10010218:	1c31      	adds	r1, r6, #0
1001021a:	221c      	movs	r2, #28
1001021c:	4b28      	ldr	r3, [pc, #160]	; (100102c0 <at_ble_authenticate+0x124>)
1001021e:	4798      	blx	r3
10010220:	9b07      	ldr	r3, [sp, #28]
10010222:	2b00      	cmp	r3, #0
10010224:	d005      	beq.n	10010232 <at_ble_authenticate+0x96>
10010226:	4827      	ldr	r0, [pc, #156]	; (100102c4 <at_ble_authenticate+0x128>)
10010228:	1c19      	adds	r1, r3, #0
1001022a:	309a      	adds	r0, #154	; 0x9a
1001022c:	2210      	movs	r2, #16
1001022e:	4b24      	ldr	r3, [pc, #144]	; (100102c0 <at_ble_authenticate+0x124>)
10010230:	4798      	blx	r3
10010232:	7863      	ldrb	r3, [r4, #1]
10010234:	78a2      	ldrb	r2, [r4, #2]
10010236:	009b      	lsls	r3, r3, #2
10010238:	4313      	orrs	r3, r2
1001023a:	2212      	movs	r2, #18
1001023c:	4357      	muls	r7, r2
1001023e:	4a1d      	ldr	r2, [pc, #116]	; (100102b4 <at_ble_authenticate+0x118>)
10010240:	b2db      	uxtb	r3, r3
10010242:	5cba      	ldrb	r2, [r7, r2]
10010244:	2a00      	cmp	r2, #0
10010246:	d116      	bne.n	10010276 <at_ble_authenticate+0xda>
10010248:	79a0      	ldrb	r0, [r4, #6]
1001024a:	0742      	lsls	r2, r0, #29
1001024c:	d502      	bpl.n	10010254 <at_ble_authenticate+0xb8>
1001024e:	9a07      	ldr	r2, [sp, #28]
10010250:	2a00      	cmp	r2, #0
10010252:	d0bc      	beq.n	100101ce <at_ble_authenticate+0x32>
10010254:	07c2      	lsls	r2, r0, #31
10010256:	d501      	bpl.n	1001025c <at_ble_authenticate+0xc0>
10010258:	2e00      	cmp	r6, #0
1001025a:	d0b8      	beq.n	100101ce <at_ble_authenticate+0x32>
1001025c:	7966      	ldrb	r6, [r4, #5]
1001025e:	7821      	ldrb	r1, [r4, #0]
10010260:	78e2      	ldrb	r2, [r4, #3]
10010262:	9600      	str	r6, [sp, #0]
10010264:	9001      	str	r0, [sp, #4]
10010266:	79e0      	ldrb	r0, [r4, #7]
10010268:	9002      	str	r0, [sp, #8]
1001026a:	7a20      	ldrb	r0, [r4, #8]
1001026c:	4c16      	ldr	r4, [pc, #88]	; (100102c8 <at_ble_authenticate+0x12c>)
1001026e:	9003      	str	r0, [sp, #12]
10010270:	1c28      	adds	r0, r5, #0
10010272:	47a0      	blx	r4
10010274:	e018      	b.n	100102a8 <at_ble_authenticate+0x10c>
10010276:	2a01      	cmp	r2, #1
10010278:	d1a9      	bne.n	100101ce <at_ble_authenticate+0x32>
1001027a:	79e0      	ldrb	r0, [r4, #7]
1001027c:	0742      	lsls	r2, r0, #29
1001027e:	d502      	bpl.n	10010286 <at_ble_authenticate+0xea>
10010280:	9a07      	ldr	r2, [sp, #28]
10010282:	2a00      	cmp	r2, #0
10010284:	d0a3      	beq.n	100101ce <at_ble_authenticate+0x32>
10010286:	07c2      	lsls	r2, r0, #31
10010288:	d501      	bpl.n	1001028e <at_ble_authenticate+0xf2>
1001028a:	2e00      	cmp	r6, #0
1001028c:	d09f      	beq.n	100101ce <at_ble_authenticate+0x32>
1001028e:	7966      	ldrb	r6, [r4, #5]
10010290:	7821      	ldrb	r1, [r4, #0]
10010292:	78e2      	ldrb	r2, [r4, #3]
10010294:	9600      	str	r6, [sp, #0]
10010296:	79a6      	ldrb	r6, [r4, #6]
10010298:	9002      	str	r0, [sp, #8]
1001029a:	9601      	str	r6, [sp, #4]
1001029c:	7a20      	ldrb	r0, [r4, #8]
1001029e:	9504      	str	r5, [sp, #16]
100102a0:	9003      	str	r0, [sp, #12]
100102a2:	4c05      	ldr	r4, [pc, #20]	; (100102b8 <at_ble_authenticate+0x11c>)
100102a4:	2001      	movs	r0, #1
100102a6:	47a0      	blx	r4
100102a8:	2000      	movs	r0, #0
100102aa:	b00b      	add	sp, #44	; 0x2c
100102ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102ae:	46c0      	nop			; (mov r8, r8)
100102b0:	1001069d 	.word	0x1001069d
100102b4:	1001b052 	.word	0x1001b052
100102b8:	10010c0d 	.word	0x10010c0d
100102bc:	1001b160 	.word	0x1001b160
100102c0:	10016223 	.word	0x10016223
100102c4:	1001b0e2 	.word	0x1001b0e2
100102c8:	100109ed 	.word	0x100109ed

100102cc <at_ble_pair_key_reply>:
100102cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100102ce:	b085      	sub	sp, #20
100102d0:	1c05      	adds	r5, r0, #0
100102d2:	1c0c      	adds	r4, r1, #0
100102d4:	1c16      	adds	r6, r2, #0
100102d6:	2100      	movs	r1, #0
100102d8:	4668      	mov	r0, sp
100102da:	2210      	movs	r2, #16
100102dc:	4b18      	ldr	r3, [pc, #96]	; (10010340 <at_ble_pair_key_reply+0x74>)
100102de:	4798      	blx	r3
100102e0:	2101      	movs	r1, #1
100102e2:	2e00      	cmp	r6, #0
100102e4:	d101      	bne.n	100102ea <at_ble_pair_key_reply+0x1e>
100102e6:	1c31      	adds	r1, r6, #0
100102e8:	466e      	mov	r6, sp
100102ea:	2c00      	cmp	r4, #0
100102ec:	d116      	bne.n	1001031c <at_ble_pair_key_reply+0x50>
100102ee:	2701      	movs	r7, #1
100102f0:	1c23      	adds	r3, r4, #0
100102f2:	1d70      	adds	r0, r6, #5
100102f4:	3e01      	subs	r6, #1
100102f6:	7802      	ldrb	r2, [r0, #0]
100102f8:	3801      	subs	r0, #1
100102fa:	3a30      	subs	r2, #48	; 0x30
100102fc:	437a      	muls	r2, r7
100102fe:	189b      	adds	r3, r3, r2
10010300:	220a      	movs	r2, #10
10010302:	4357      	muls	r7, r2
10010304:	42b0      	cmp	r0, r6
10010306:	d1f6      	bne.n	100102f6 <at_ble_pair_key_reply+0x2a>
10010308:	466a      	mov	r2, sp
1001030a:	4668      	mov	r0, sp
1001030c:	7013      	strb	r3, [r2, #0]
1001030e:	0a1a      	lsrs	r2, r3, #8
10010310:	7042      	strb	r2, [r0, #1]
10010312:	0c1a      	lsrs	r2, r3, #16
10010314:	0e1b      	lsrs	r3, r3, #24
10010316:	7082      	strb	r2, [r0, #2]
10010318:	70c3      	strb	r3, [r0, #3]
1001031a:	e009      	b.n	10010330 <at_ble_pair_key_reply+0x64>
1001031c:	20cf      	movs	r0, #207	; 0xcf
1001031e:	2c01      	cmp	r4, #1
10010320:	d10c      	bne.n	1001033c <at_ble_pair_key_reply+0x70>
10010322:	2300      	movs	r3, #0
10010324:	4668      	mov	r0, sp
10010326:	5cf2      	ldrb	r2, [r6, r3]
10010328:	54c2      	strb	r2, [r0, r3]
1001032a:	3301      	adds	r3, #1
1001032c:	2b10      	cmp	r3, #16
1001032e:	d1f9      	bne.n	10010324 <at_ble_pair_key_reply+0x58>
10010330:	2004      	movs	r0, #4
10010332:	466a      	mov	r2, sp
10010334:	1c2b      	adds	r3, r5, #0
10010336:	4c03      	ldr	r4, [pc, #12]	; (10010344 <at_ble_pair_key_reply+0x78>)
10010338:	47a0      	blx	r4
1001033a:	2000      	movs	r0, #0
1001033c:	b005      	add	sp, #20
1001033e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010340:	10016235 	.word	0x10016235
10010344:	10010c89 	.word	0x10010c89

10010348 <at_ble_send_slave_sec_request>:
10010348:	b570      	push	{r4, r5, r6, lr}
1001034a:	4b0c      	ldr	r3, [pc, #48]	; (1001037c <at_ble_send_slave_sec_request+0x34>)
1001034c:	1c0e      	adds	r6, r1, #0
1001034e:	2100      	movs	r1, #0
10010350:	1c05      	adds	r5, r0, #0
10010352:	1c14      	adds	r4, r2, #0
10010354:	4798      	blx	r3
10010356:	2301      	movs	r3, #1
10010358:	2807      	cmp	r0, #7
1001035a:	d80d      	bhi.n	10010378 <at_ble_send_slave_sec_request+0x30>
1001035c:	3311      	adds	r3, #17
1001035e:	4358      	muls	r0, r3
10010360:	4b07      	ldr	r3, [pc, #28]	; (10010380 <at_ble_send_slave_sec_request+0x38>)
10010362:	5cc2      	ldrb	r2, [r0, r3]
10010364:	23e0      	movs	r3, #224	; 0xe0
10010366:	2a01      	cmp	r2, #1
10010368:	d106      	bne.n	10010378 <at_ble_send_slave_sec_request+0x30>
1001036a:	00b1      	lsls	r1, r6, #2
1001036c:	430c      	orrs	r4, r1
1001036e:	4b05      	ldr	r3, [pc, #20]	; (10010384 <at_ble_send_slave_sec_request+0x3c>)
10010370:	b2e1      	uxtb	r1, r4
10010372:	1c28      	adds	r0, r5, #0
10010374:	4798      	blx	r3
10010376:	2300      	movs	r3, #0
10010378:	1c18      	adds	r0, r3, #0
1001037a:	bd70      	pop	{r4, r5, r6, pc}
1001037c:	1001069d 	.word	0x1001069d
10010380:	1001b052 	.word	0x1001b052
10010384:	10010cd9 	.word	0x10010cd9

10010388 <at_ble_encryption_start>:
10010388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001038a:	23cf      	movs	r3, #207	; 0xcf
1001038c:	2900      	cmp	r1, #0
1001038e:	d02b      	beq.n	100103e8 <at_ble_encryption_start+0x60>
10010390:	2a05      	cmp	r2, #5
10010392:	d829      	bhi.n	100103e8 <at_ble_encryption_start+0x60>
10010394:	2701      	movs	r7, #1
10010396:	1c3d      	adds	r5, r7, #0
10010398:	2433      	movs	r4, #51	; 0x33
1001039a:	4095      	lsls	r5, r2
1001039c:	4225      	tst	r5, r4
1001039e:	d023      	beq.n	100103e8 <at_ble_encryption_start+0x60>
100103a0:	7e8c      	ldrb	r4, [r1, #26]
100103a2:	3c07      	subs	r4, #7
100103a4:	2c09      	cmp	r4, #9
100103a6:	d81f      	bhi.n	100103e8 <at_ble_encryption_start+0x60>
100103a8:	4b10      	ldr	r3, [pc, #64]	; (100103ec <at_ble_encryption_start+0x64>)
100103aa:	1c0c      	adds	r4, r1, #0
100103ac:	2100      	movs	r1, #0
100103ae:	1c15      	adds	r5, r2, #0
100103b0:	1c06      	adds	r6, r0, #0
100103b2:	4798      	blx	r3
100103b4:	1c3b      	adds	r3, r7, #0
100103b6:	2807      	cmp	r0, #7
100103b8:	d816      	bhi.n	100103e8 <at_ble_encryption_start+0x60>
100103ba:	2312      	movs	r3, #18
100103bc:	4358      	muls	r0, r3
100103be:	4b0c      	ldr	r3, [pc, #48]	; (100103f0 <at_ble_encryption_start+0x68>)
100103c0:	5cc7      	ldrb	r7, [r0, r3]
100103c2:	23e0      	movs	r3, #224	; 0xe0
100103c4:	2f00      	cmp	r7, #0
100103c6:	d10f      	bne.n	100103e8 <at_ble_encryption_start+0x60>
100103c8:	1c21      	adds	r1, r4, #0
100103ca:	221c      	movs	r2, #28
100103cc:	4b09      	ldr	r3, [pc, #36]	; (100103f4 <at_ble_encryption_start+0x6c>)
100103ce:	480a      	ldr	r0, [pc, #40]	; (100103f8 <at_ble_encryption_start+0x70>)
100103d0:	4798      	blx	r3
100103d2:	1c23      	adds	r3, r4, #0
100103d4:	7ea1      	ldrb	r1, [r4, #26]
100103d6:	8a22      	ldrh	r2, [r4, #16]
100103d8:	3312      	adds	r3, #18
100103da:	9100      	str	r1, [sp, #0]
100103dc:	9501      	str	r5, [sp, #4]
100103de:	1c21      	adds	r1, r4, #0
100103e0:	1c30      	adds	r0, r6, #0
100103e2:	4c06      	ldr	r4, [pc, #24]	; (100103fc <at_ble_encryption_start+0x74>)
100103e4:	47a0      	blx	r4
100103e6:	1c3b      	adds	r3, r7, #0
100103e8:	1c18      	adds	r0, r3, #0
100103ea:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100103ec:	1001069d 	.word	0x1001069d
100103f0:	1001b052 	.word	0x1001b052
100103f4:	10016223 	.word	0x10016223
100103f8:	1001b160 	.word	0x1001b160
100103fc:	10010d19 	.word	0x10010d19

10010400 <at_ble_encryption_request_reply>:
10010400:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010402:	24cf      	movs	r4, #207	; 0xcf
10010404:	2b00      	cmp	r3, #0
10010406:	d011      	beq.n	1001042c <at_ble_encryption_request_reply+0x2c>
10010408:	2a00      	cmp	r2, #0
1001040a:	d00a      	beq.n	10010422 <at_ble_encryption_request_reply+0x22>
1001040c:	2905      	cmp	r1, #5
1001040e:	d80d      	bhi.n	1001042c <at_ble_encryption_request_reply+0x2c>
10010410:	2501      	movs	r5, #1
10010412:	2633      	movs	r6, #51	; 0x33
10010414:	408d      	lsls	r5, r1
10010416:	4235      	tst	r5, r6
10010418:	d008      	beq.n	1001042c <at_ble_encryption_request_reply+0x2c>
1001041a:	7e9d      	ldrb	r5, [r3, #26]
1001041c:	3d07      	subs	r5, #7
1001041e:	2d09      	cmp	r5, #9
10010420:	d804      	bhi.n	1001042c <at_ble_encryption_request_reply+0x2c>
10010422:	7e9c      	ldrb	r4, [r3, #26]
10010424:	9400      	str	r4, [sp, #0]
10010426:	4c02      	ldr	r4, [pc, #8]	; (10010430 <at_ble_encryption_request_reply+0x30>)
10010428:	47a0      	blx	r4
1001042a:	2400      	movs	r4, #0
1001042c:	1c20      	adds	r0, r4, #0
1001042e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010430:	10010dd5 	.word	0x10010dd5

10010434 <rx_callback>:
10010434:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010436:	8883      	ldrh	r3, [r0, #4]
10010438:	1c01      	adds	r1, r0, #0
1001043a:	9301      	str	r3, [sp, #4]
1001043c:	88c5      	ldrh	r5, [r0, #6]
1001043e:	8806      	ldrh	r6, [r0, #0]
10010440:	2d00      	cmp	r5, #0
10010442:	d10f      	bne.n	10010464 <rx_callback+0x30>
10010444:	1c19      	adds	r1, r3, #0
10010446:	1c30      	adds	r0, r6, #0
10010448:	4b19      	ldr	r3, [pc, #100]	; (100104b0 <rx_callback+0x7c>)
1001044a:	1c2a      	adds	r2, r5, #0
1001044c:	4798      	blx	r3
1001044e:	1e03      	subs	r3, r0, #0
10010450:	d105      	bne.n	1001045e <rx_callback+0x2a>
10010452:	1c30      	adds	r0, r6, #0
10010454:	9901      	ldr	r1, [sp, #4]
10010456:	1c1a      	adds	r2, r3, #0
10010458:	4c16      	ldr	r4, [pc, #88]	; (100104b4 <rx_callback+0x80>)
1001045a:	47a0      	blx	r4
1001045c:	e027      	b.n	100104ae <rx_callback+0x7a>
1001045e:	4b16      	ldr	r3, [pc, #88]	; (100104b8 <rx_callback+0x84>)
10010460:	4798      	blx	r3
10010462:	e024      	b.n	100104ae <rx_callback+0x7a>
10010464:	4c15      	ldr	r4, [pc, #84]	; (100104bc <rx_callback+0x88>)
10010466:	4a16      	ldr	r2, [pc, #88]	; (100104c0 <rx_callback+0x8c>)
10010468:	6823      	ldr	r3, [r4, #0]
1001046a:	6812      	ldr	r2, [r2, #0]
1001046c:	18eb      	adds	r3, r5, r3
1001046e:	4293      	cmp	r3, r2
10010470:	d901      	bls.n	10010476 <rx_callback+0x42>
10010472:	2300      	movs	r3, #0
10010474:	6023      	str	r3, [r4, #0]
10010476:	4f13      	ldr	r7, [pc, #76]	; (100104c4 <rx_callback+0x90>)
10010478:	6822      	ldr	r2, [r4, #0]
1001047a:	683b      	ldr	r3, [r7, #0]
1001047c:	3108      	adds	r1, #8
1001047e:	1898      	adds	r0, r3, r2
10010480:	1c2a      	adds	r2, r5, #0
10010482:	4b11      	ldr	r3, [pc, #68]	; (100104c8 <rx_callback+0x94>)
10010484:	4798      	blx	r3
10010486:	683b      	ldr	r3, [r7, #0]
10010488:	6822      	ldr	r2, [r4, #0]
1001048a:	1c30      	adds	r0, r6, #0
1001048c:	189a      	adds	r2, r3, r2
1001048e:	9901      	ldr	r1, [sp, #4]
10010490:	4b07      	ldr	r3, [pc, #28]	; (100104b0 <rx_callback+0x7c>)
10010492:	4798      	blx	r3
10010494:	2800      	cmp	r0, #0
10010496:	d1e2      	bne.n	1001045e <rx_callback+0x2a>
10010498:	6823      	ldr	r3, [r4, #0]
1001049a:	683a      	ldr	r2, [r7, #0]
1001049c:	1c30      	adds	r0, r6, #0
1001049e:	18d2      	adds	r2, r2, r3
100104a0:	9901      	ldr	r1, [sp, #4]
100104a2:	1c2b      	adds	r3, r5, #0
100104a4:	4e03      	ldr	r6, [pc, #12]	; (100104b4 <rx_callback+0x80>)
100104a6:	47b0      	blx	r6
100104a8:	6823      	ldr	r3, [r4, #0]
100104aa:	18ed      	adds	r5, r5, r3
100104ac:	6025      	str	r5, [r4, #0]
100104ae:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100104b0:	1000eac9 	.word	0x1000eac9
100104b4:	1000ea41 	.word	0x1000ea41
100104b8:	1000e535 	.word	0x1000e535
100104bc:	1001b1bc 	.word	0x1001b1bc
100104c0:	1001a104 	.word	0x1001a104
100104c4:	1001a100 	.word	0x1001a100
100104c8:	10016223 	.word	0x10016223

100104cc <interface_send>:
100104cc:	b508      	push	{r3, lr}
100104ce:	4b02      	ldr	r3, [pc, #8]	; (100104d8 <interface_send+0xc>)
100104d0:	4798      	blx	r3
100104d2:	2000      	movs	r0, #0
100104d4:	bd08      	pop	{r3, pc}
100104d6:	46c0      	nop			; (mov r8, r8)
100104d8:	1000e22d 	.word	0x1000e22d

100104dc <interface_init>:
100104dc:	2280      	movs	r2, #128	; 0x80
100104de:	b510      	push	{r4, lr}
100104e0:	2100      	movs	r1, #0
100104e2:	1c04      	adds	r4, r0, #0
100104e4:	0092      	lsls	r2, r2, #2
100104e6:	4b08      	ldr	r3, [pc, #32]	; (10010508 <interface_init+0x2c>)
100104e8:	4808      	ldr	r0, [pc, #32]	; (1001050c <interface_init+0x30>)
100104ea:	4798      	blx	r3
100104ec:	2200      	movs	r2, #0
100104ee:	4b08      	ldr	r3, [pc, #32]	; (10010510 <interface_init+0x34>)
100104f0:	601a      	str	r2, [r3, #0]
100104f2:	4a08      	ldr	r2, [pc, #32]	; (10010514 <interface_init+0x38>)
100104f4:	4b08      	ldr	r3, [pc, #32]	; (10010518 <interface_init+0x3c>)
100104f6:	601a      	str	r2, [r3, #0]
100104f8:	4b08      	ldr	r3, [pc, #32]	; (1001051c <interface_init+0x40>)
100104fa:	6922      	ldr	r2, [r4, #16]
100104fc:	601a      	str	r2, [r3, #0]
100104fe:	6962      	ldr	r2, [r4, #20]
10010500:	4b07      	ldr	r3, [pc, #28]	; (10010520 <interface_init+0x44>)
10010502:	601a      	str	r2, [r3, #0]
10010504:	bd10      	pop	{r4, pc}
10010506:	46c0      	nop			; (mov r8, r8)
10010508:	10016235 	.word	0x10016235
1001050c:	1001b3c0 	.word	0x1001b3c0
10010510:	1001b1bc 	.word	0x1001b1bc
10010514:	1001b1c0 	.word	0x1001b1c0
10010518:	10018660 	.word	0x10018660
1001051c:	1001a100 	.word	0x1001a100
10010520:	1001a104 	.word	0x1001a104

10010524 <platform_cmd_cmpl_signal>:
10010524:	2201      	movs	r2, #1
10010526:	4b01      	ldr	r3, [pc, #4]	; (1001052c <platform_cmd_cmpl_signal+0x8>)
10010528:	601a      	str	r2, [r3, #0]
1001052a:	4770      	bx	lr
1001052c:	1001a108 	.word	0x1001a108

10010530 <platform_cmd_cmpl_wait>:
10010530:	b510      	push	{r4, lr}
10010532:	1c04      	adds	r4, r0, #0
10010534:	4b07      	ldr	r3, [pc, #28]	; (10010554 <platform_cmd_cmpl_wait+0x24>)
10010536:	681a      	ldr	r2, [r3, #0]
10010538:	2a01      	cmp	r2, #1
1001053a:	d003      	beq.n	10010544 <platform_cmd_cmpl_wait+0x14>
1001053c:	4b06      	ldr	r3, [pc, #24]	; (10010558 <platform_cmd_cmpl_wait+0x28>)
1001053e:	2000      	movs	r0, #0
10010540:	4798      	blx	r3
10010542:	e7f7      	b.n	10010534 <platform_cmd_cmpl_wait+0x4>
10010544:	6819      	ldr	r1, [r3, #0]
10010546:	2901      	cmp	r1, #1
10010548:	d102      	bne.n	10010550 <platform_cmd_cmpl_wait+0x20>
1001054a:	2200      	movs	r2, #0
1001054c:	601a      	str	r2, [r3, #0]
1001054e:	e000      	b.n	10010552 <platform_cmd_cmpl_wait+0x22>
10010550:	7022      	strb	r2, [r4, #0]
10010552:	bd10      	pop	{r4, pc}
10010554:	1001a108 	.word	0x1001a108
10010558:	1000e2bd 	.word	0x1000e2bd

1001055c <start_timer>:
1001055c:	4770      	bx	lr

1001055e <stop_timer>:
1001055e:	4770      	bx	lr

10010560 <dbg_le_set_bd_addr_req_handler>:
10010560:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010562:	466b      	mov	r3, sp
10010564:	1dde      	adds	r6, r3, #7
10010566:	2300      	movs	r3, #0
10010568:	7033      	strb	r3, [r6, #0]
1001056a:	230f      	movs	r3, #15
1001056c:	4c13      	ldr	r4, [pc, #76]	; (100105bc <dbg_le_set_bd_addr_req_handler+0x5c>)
1001056e:	2703      	movs	r7, #3
10010570:	7023      	strb	r3, [r4, #0]
10010572:	2300      	movs	r3, #0
10010574:	70e3      	strb	r3, [r4, #3]
10010576:	4b12      	ldr	r3, [pc, #72]	; (100105c0 <dbg_le_set_bd_addr_req_handler+0x60>)
10010578:	1c01      	adds	r1, r0, #0
1001057a:	881a      	ldrh	r2, [r3, #0]
1001057c:	881b      	ldrh	r3, [r3, #0]
1001057e:	7122      	strb	r2, [r4, #4]
10010580:	0a1b      	lsrs	r3, r3, #8
10010582:	2206      	movs	r2, #6
10010584:	7163      	strb	r3, [r4, #5]
10010586:	480f      	ldr	r0, [pc, #60]	; (100105c4 <dbg_le_set_bd_addr_req_handler+0x64>)
10010588:	4b0f      	ldr	r3, [pc, #60]	; (100105c8 <dbg_le_set_bd_addr_req_handler+0x68>)
1001058a:	7067      	strb	r7, [r4, #1]
1001058c:	70a7      	strb	r7, [r4, #2]
1001058e:	4798      	blx	r3
10010590:	4d0e      	ldr	r5, [pc, #56]	; (100105cc <dbg_le_set_bd_addr_req_handler+0x6c>)
10010592:	4b0f      	ldr	r3, [pc, #60]	; (100105d0 <dbg_le_set_bd_addr_req_handler+0x70>)
10010594:	210e      	movs	r1, #14
10010596:	802b      	strh	r3, [r5, #0]
10010598:	2306      	movs	r3, #6
1001059a:	71a3      	strb	r3, [r4, #6]
1001059c:	2300      	movs	r3, #0
1001059e:	1c20      	adds	r0, r4, #0
100105a0:	71e3      	strb	r3, [r4, #7]
100105a2:	4b0c      	ldr	r3, [pc, #48]	; (100105d4 <dbg_le_set_bd_addr_req_handler+0x74>)
100105a4:	80af      	strh	r7, [r5, #4]
100105a6:	4798      	blx	r3
100105a8:	1c30      	adds	r0, r6, #0
100105aa:	4b0b      	ldr	r3, [pc, #44]	; (100105d8 <dbg_le_set_bd_addr_req_handler+0x78>)
100105ac:	4798      	blx	r3
100105ae:	7833      	ldrb	r3, [r6, #0]
100105b0:	20e2      	movs	r0, #226	; 0xe2
100105b2:	2b00      	cmp	r3, #0
100105b4:	d101      	bne.n	100105ba <dbg_le_set_bd_addr_req_handler+0x5a>
100105b6:	68ab      	ldr	r3, [r5, #8]
100105b8:	7818      	ldrb	r0, [r3, #0]
100105ba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100105bc:	1001b3c0 	.word	0x1001b3c0
100105c0:	1001b050 	.word	0x1001b050
100105c4:	1001b3c8 	.word	0x1001b3c8
100105c8:	10016223 	.word	0x10016223
100105cc:	1001b044 	.word	0x1001b044
100105d0:	00000329 	.word	0x00000329
100105d4:	100104cd 	.word	0x100104cd
100105d8:	10010531 	.word	0x10010531

100105dc <gapc_get_dev_info_cfm.constprop.1>:
100105dc:	b538      	push	{r3, r4, r5, lr}
100105de:	230b      	movs	r3, #11
100105e0:	4c27      	ldr	r4, [pc, #156]	; (10010680 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
100105e2:	7023      	strb	r3, [r4, #0]
100105e4:	3303      	adds	r3, #3
100105e6:	7063      	strb	r3, [r4, #1]
100105e8:	3329      	adds	r3, #41	; 0x29
100105ea:	70a3      	strb	r3, [r4, #2]
100105ec:	4b25      	ldr	r3, [pc, #148]	; (10010684 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
100105ee:	70e1      	strb	r1, [r4, #3]
100105f0:	881a      	ldrh	r2, [r3, #0]
100105f2:	881b      	ldrh	r3, [r3, #0]
100105f4:	7122      	strb	r2, [r4, #4]
100105f6:	0a1b      	lsrs	r3, r3, #8
100105f8:	7163      	strb	r3, [r4, #5]
100105fa:	2300      	movs	r3, #0
100105fc:	7220      	strb	r0, [r4, #8]
100105fe:	7263      	strb	r3, [r4, #9]
10010600:	2801      	cmp	r0, #1
10010602:	d02b      	beq.n	1001065c <gapc_get_dev_info_cfm.constprop.1+0x80>
10010604:	4298      	cmp	r0, r3
10010606:	d01b      	beq.n	10010640 <gapc_get_dev_info_cfm.constprop.1+0x64>
10010608:	2802      	cmp	r0, #2
1001060a:	d12f      	bne.n	1001066c <gapc_get_dev_info_cfm.constprop.1+0x90>
1001060c:	4b1e      	ldr	r3, [pc, #120]	; (10010688 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001060e:	2112      	movs	r1, #18
10010610:	1c1a      	adds	r2, r3, #0
10010612:	32ce      	adds	r2, #206	; 0xce
10010614:	8812      	ldrh	r2, [r2, #0]
10010616:	72a2      	strb	r2, [r4, #10]
10010618:	0a12      	lsrs	r2, r2, #8
1001061a:	72e2      	strb	r2, [r4, #11]
1001061c:	1c1a      	adds	r2, r3, #0
1001061e:	32d0      	adds	r2, #208	; 0xd0
10010620:	8812      	ldrh	r2, [r2, #0]
10010622:	7322      	strb	r2, [r4, #12]
10010624:	0a12      	lsrs	r2, r2, #8
10010626:	7362      	strb	r2, [r4, #13]
10010628:	1c1a      	adds	r2, r3, #0
1001062a:	32d2      	adds	r2, #210	; 0xd2
1001062c:	8812      	ldrh	r2, [r2, #0]
1001062e:	33d4      	adds	r3, #212	; 0xd4
10010630:	73a2      	strb	r2, [r4, #14]
10010632:	0a12      	lsrs	r2, r2, #8
10010634:	73e2      	strb	r2, [r4, #15]
10010636:	881b      	ldrh	r3, [r3, #0]
10010638:	7423      	strb	r3, [r4, #16]
1001063a:	0a1b      	lsrs	r3, r3, #8
1001063c:	7463      	strb	r3, [r4, #17]
1001063e:	e016      	b.n	1001066e <gapc_get_dev_info_cfm.constprop.1+0x92>
10010640:	4b11      	ldr	r3, [pc, #68]	; (10010688 <gapc_get_dev_info_cfm.constprop.1+0xac>)
10010642:	4912      	ldr	r1, [pc, #72]	; (1001068c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
10010644:	33aa      	adds	r3, #170	; 0xaa
10010646:	881d      	ldrh	r5, [r3, #0]
10010648:	4811      	ldr	r0, [pc, #68]	; (10010690 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1001064a:	0a2b      	lsrs	r3, r5, #8
1001064c:	72a5      	strb	r5, [r4, #10]
1001064e:	72e3      	strb	r3, [r4, #11]
10010650:	1c2a      	adds	r2, r5, #0
10010652:	4b10      	ldr	r3, [pc, #64]	; (10010694 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
10010654:	350c      	adds	r5, #12
10010656:	4798      	blx	r3
10010658:	b2a9      	uxth	r1, r5
1001065a:	e008      	b.n	1001066e <gapc_get_dev_info_cfm.constprop.1+0x92>
1001065c:	4b0a      	ldr	r3, [pc, #40]	; (10010688 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1001065e:	210c      	movs	r1, #12
10010660:	33cc      	adds	r3, #204	; 0xcc
10010662:	881b      	ldrh	r3, [r3, #0]
10010664:	72a3      	strb	r3, [r4, #10]
10010666:	0a1b      	lsrs	r3, r3, #8
10010668:	72e3      	strb	r3, [r4, #11]
1001066a:	e000      	b.n	1001066e <gapc_get_dev_info_cfm.constprop.1+0x92>
1001066c:	210a      	movs	r1, #10
1001066e:	1c0b      	adds	r3, r1, #0
10010670:	3b08      	subs	r3, #8
10010672:	71a3      	strb	r3, [r4, #6]
10010674:	121b      	asrs	r3, r3, #8
10010676:	71e3      	strb	r3, [r4, #7]
10010678:	1c20      	adds	r0, r4, #0
1001067a:	4b07      	ldr	r3, [pc, #28]	; (10010698 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1001067c:	4798      	blx	r3
1001067e:	bd38      	pop	{r3, r4, r5, pc}
10010680:	1001b3c0 	.word	0x1001b3c0
10010684:	1001b050 	.word	0x1001b050
10010688:	1001b0e2 	.word	0x1001b0e2
1001068c:	1001b18e 	.word	0x1001b18e
10010690:	1001b3cc 	.word	0x1001b3cc
10010694:	10016223 	.word	0x10016223
10010698:	100104cd 	.word	0x100104cd

1001069c <check_ConnData_idx_role>:
1001069c:	4b0c      	ldr	r3, [pc, #48]	; (100106d0 <check_ConnData_idx_role+0x34>)
1001069e:	b570      	push	{r4, r5, r6, lr}
100106a0:	1c04      	adds	r4, r0, #0
100106a2:	2008      	movs	r0, #8
100106a4:	429c      	cmp	r4, r3
100106a6:	d011      	beq.n	100106cc <check_ConnData_idx_role+0x30>
100106a8:	2300      	movs	r3, #0
100106aa:	2212      	movs	r2, #18
100106ac:	435a      	muls	r2, r3
100106ae:	4d09      	ldr	r5, [pc, #36]	; (100106d4 <check_ConnData_idx_role+0x38>)
100106b0:	b2d8      	uxtb	r0, r3
100106b2:	1956      	adds	r6, r2, r5
100106b4:	8976      	ldrh	r6, [r6, #10]
100106b6:	42a6      	cmp	r6, r4
100106b8:	d104      	bne.n	100106c4 <check_ConnData_idx_role+0x28>
100106ba:	2900      	cmp	r1, #0
100106bc:	d006      	beq.n	100106cc <check_ConnData_idx_role+0x30>
100106be:	5d53      	ldrb	r3, [r2, r5]
100106c0:	700b      	strb	r3, [r1, #0]
100106c2:	e003      	b.n	100106cc <check_ConnData_idx_role+0x30>
100106c4:	3301      	adds	r3, #1
100106c6:	2b08      	cmp	r3, #8
100106c8:	d1ef      	bne.n	100106aa <check_ConnData_idx_role+0xe>
100106ca:	1c18      	adds	r0, r3, #0
100106cc:	bd70      	pop	{r4, r5, r6, pc}
100106ce:	46c0      	nop			; (mov r8, r8)
100106d0:	0000ffff 	.word	0x0000ffff
100106d4:	1001b052 	.word	0x1001b052

100106d8 <check_ConnData_emptyEntry>:
100106d8:	2300      	movs	r3, #0
100106da:	2212      	movs	r2, #18
100106dc:	435a      	muls	r2, r3
100106de:	4906      	ldr	r1, [pc, #24]	; (100106f8 <check_ConnData_emptyEntry+0x20>)
100106e0:	b2d8      	uxtb	r0, r3
100106e2:	1852      	adds	r2, r2, r1
100106e4:	8951      	ldrh	r1, [r2, #10]
100106e6:	4a05      	ldr	r2, [pc, #20]	; (100106fc <check_ConnData_emptyEntry+0x24>)
100106e8:	4291      	cmp	r1, r2
100106ea:	d003      	beq.n	100106f4 <check_ConnData_emptyEntry+0x1c>
100106ec:	3301      	adds	r3, #1
100106ee:	2b08      	cmp	r3, #8
100106f0:	d1f3      	bne.n	100106da <check_ConnData_emptyEntry+0x2>
100106f2:	1c18      	adds	r0, r3, #0
100106f4:	4770      	bx	lr
100106f6:	46c0      	nop			; (mov r8, r8)
100106f8:	1001b052 	.word	0x1001b052
100106fc:	0000ffff 	.word	0x0000ffff

10010700 <gapc_cmp_evt>:
10010700:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010702:	780b      	ldrb	r3, [r1, #0]
10010704:	1c05      	adds	r5, r0, #0
10010706:	1e58      	subs	r0, r3, #1
10010708:	784e      	ldrb	r6, [r1, #1]
1001070a:	280f      	cmp	r0, #15
1001070c:	d85a      	bhi.n	100107c4 <gapc_cmp_evt+0xc4>
1001070e:	1c14      	adds	r4, r2, #0
10010710:	f002 fd62 	bl	100131d8 <__gnu_thumb1_case_uqi>
10010714:	5858440a 	.word	0x5858440a
10010718:	4b584444 	.word	0x4b584444
1001071c:	0825122d 	.word	0x0825122d
10010720:	3e395858 	.word	0x3e395858
10010724:	203b      	movs	r0, #59	; 0x3b
10010726:	e04e      	b.n	100107c6 <gapc_cmp_evt+0xc6>
10010728:	203b      	movs	r0, #59	; 0x3b
1001072a:	2e00      	cmp	r6, #0
1001072c:	d04b      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
1001072e:	0a2d      	lsrs	r5, r5, #8
10010730:	8015      	strh	r5, [r2, #0]
10010732:	7096      	strb	r6, [r2, #2]
10010734:	3835      	subs	r0, #53	; 0x35
10010736:	e046      	b.n	100107c6 <gapc_cmp_evt+0xc6>
10010738:	466b      	mov	r3, sp
1001073a:	1ddf      	adds	r7, r3, #7
1001073c:	2301      	movs	r3, #1
1001073e:	0a2d      	lsrs	r5, r5, #8
10010740:	703b      	strb	r3, [r7, #0]
10010742:	1c28      	adds	r0, r5, #0
10010744:	1c39      	adds	r1, r7, #0
10010746:	4b20      	ldr	r3, [pc, #128]	; (100107c8 <gapc_cmp_evt+0xc8>)
10010748:	4798      	blx	r3
1001074a:	2807      	cmp	r0, #7
1001074c:	d803      	bhi.n	10010756 <gapc_cmp_evt+0x56>
1001074e:	783b      	ldrb	r3, [r7, #0]
10010750:	203b      	movs	r0, #59	; 0x3b
10010752:	2b00      	cmp	r3, #0
10010754:	d037      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
10010756:	8065      	strh	r5, [r4, #2]
10010758:	7126      	strb	r6, [r4, #4]
1001075a:	2009      	movs	r0, #9
1001075c:	e033      	b.n	100107c6 <gapc_cmp_evt+0xc6>
1001075e:	203b      	movs	r0, #59	; 0x3b
10010760:	2e00      	cmp	r6, #0
10010762:	d030      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
10010764:	0a2d      	lsrs	r5, r5, #8
10010766:	8015      	strh	r5, [r2, #0]
10010768:	7096      	strb	r6, [r2, #2]
1001076a:	382d      	subs	r0, #45	; 0x2d
1001076c:	e02b      	b.n	100107c6 <gapc_cmp_evt+0xc6>
1001076e:	203b      	movs	r0, #59	; 0x3b
10010770:	2e00      	cmp	r6, #0
10010772:	d028      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
10010774:	2300      	movs	r3, #0
10010776:	0a2d      	lsrs	r5, r5, #8
10010778:	8015      	strh	r5, [r2, #0]
1001077a:	7096      	strb	r6, [r2, #2]
1001077c:	8093      	strh	r3, [r2, #4]
1001077e:	80d3      	strh	r3, [r2, #6]
10010780:	8113      	strh	r3, [r2, #8]
10010782:	3834      	subs	r0, #52	; 0x34
10010784:	e01f      	b.n	100107c6 <gapc_cmp_evt+0xc6>
10010786:	203b      	movs	r0, #59	; 0x3b
10010788:	2e00      	cmp	r6, #0
1001078a:	d01c      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
1001078c:	7216      	strb	r6, [r2, #8]
1001078e:	e003      	b.n	10010798 <gapc_cmp_evt+0x98>
10010790:	203b      	movs	r0, #59	; 0x3b
10010792:	2e00      	cmp	r6, #0
10010794:	d017      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
10010796:	7116      	strb	r6, [r2, #4]
10010798:	3812      	subs	r0, #18
1001079a:	e014      	b.n	100107c6 <gapc_cmp_evt+0xc6>
1001079c:	203b      	movs	r0, #59	; 0x3b
1001079e:	2e00      	cmp	r6, #0
100107a0:	d011      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
100107a2:	7093      	strb	r3, [r2, #2]
100107a4:	70d6      	strb	r6, [r2, #3]
100107a6:	382a      	subs	r0, #42	; 0x2a
100107a8:	e00d      	b.n	100107c6 <gapc_cmp_evt+0xc6>
100107aa:	203b      	movs	r0, #59	; 0x3b
100107ac:	2e00      	cmp	r6, #0
100107ae:	d00a      	beq.n	100107c6 <gapc_cmp_evt+0xc6>
100107b0:	0a2d      	lsrs	r5, r5, #8
100107b2:	7016      	strb	r6, [r2, #0]
100107b4:	8055      	strh	r5, [r2, #2]
100107b6:	1d10      	adds	r0, r2, #4
100107b8:	2100      	movs	r1, #0
100107ba:	2205      	movs	r2, #5
100107bc:	4b03      	ldr	r3, [pc, #12]	; (100107cc <gapc_cmp_evt+0xcc>)
100107be:	4798      	blx	r3
100107c0:	2012      	movs	r0, #18
100107c2:	e000      	b.n	100107c6 <gapc_cmp_evt+0xc6>
100107c4:	2000      	movs	r0, #0
100107c6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100107c8:	1001069d 	.word	0x1001069d
100107cc:	10016235 	.word	0x10016235

100107d0 <gapc_connection_cfm_handler>:
100107d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100107d2:	b085      	sub	sp, #20
100107d4:	1c1d      	adds	r5, r3, #0
100107d6:	ab0a      	add	r3, sp, #40	; 0x28
100107d8:	781b      	ldrb	r3, [r3, #0]
100107da:	9201      	str	r2, [sp, #4]
100107dc:	9302      	str	r3, [sp, #8]
100107de:	ab0b      	add	r3, sp, #44	; 0x2c
100107e0:	781b      	ldrb	r3, [r3, #0]
100107e2:	1c07      	adds	r7, r0, #0
100107e4:	9303      	str	r3, [sp, #12]
100107e6:	ab0c      	add	r3, sp, #48	; 0x30
100107e8:	881a      	ldrh	r2, [r3, #0]
100107ea:	2302      	movs	r3, #2
100107ec:	1c0e      	adds	r6, r1, #0
100107ee:	4c23      	ldr	r4, [pc, #140]	; (1001087c <gapc_connection_cfm_handler+0xac>)
100107f0:	1c39      	adds	r1, r7, #0
100107f2:	7023      	strb	r3, [r4, #0]
100107f4:	330c      	adds	r3, #12
100107f6:	7063      	strb	r3, [r4, #1]
100107f8:	70a3      	strb	r3, [r4, #2]
100107fa:	4b21      	ldr	r3, [pc, #132]	; (10010880 <gapc_connection_cfm_handler+0xb0>)
100107fc:	70e2      	strb	r2, [r4, #3]
100107fe:	881a      	ldrh	r2, [r3, #0]
10010800:	881b      	ldrh	r3, [r3, #0]
10010802:	7122      	strb	r2, [r4, #4]
10010804:	0a1b      	lsrs	r3, r3, #8
10010806:	4f1f      	ldr	r7, [pc, #124]	; (10010884 <gapc_connection_cfm_handler+0xb4>)
10010808:	2210      	movs	r2, #16
1001080a:	481f      	ldr	r0, [pc, #124]	; (10010888 <gapc_connection_cfm_handler+0xb8>)
1001080c:	7163      	strb	r3, [r4, #5]
1001080e:	47b8      	blx	r7
10010810:	0a33      	lsrs	r3, r6, #8
10010812:	7626      	strb	r6, [r4, #24]
10010814:	7663      	strb	r3, [r4, #25]
10010816:	9901      	ldr	r1, [sp, #4]
10010818:	0c33      	lsrs	r3, r6, #16
1001081a:	2210      	movs	r2, #16
1001081c:	0e36      	lsrs	r6, r6, #24
1001081e:	481b      	ldr	r0, [pc, #108]	; (1001088c <gapc_connection_cfm_handler+0xbc>)
10010820:	76a3      	strb	r3, [r4, #26]
10010822:	76e6      	strb	r6, [r4, #27]
10010824:	47b8      	blx	r7
10010826:	1c23      	adds	r3, r4, #0
10010828:	332c      	adds	r3, #44	; 0x2c
1001082a:	701d      	strb	r5, [r3, #0]
1001082c:	1c23      	adds	r3, r4, #0
1001082e:	0a2a      	lsrs	r2, r5, #8
10010830:	332d      	adds	r3, #45	; 0x2d
10010832:	701a      	strb	r2, [r3, #0]
10010834:	1c23      	adds	r3, r4, #0
10010836:	0c2a      	lsrs	r2, r5, #16
10010838:	332e      	adds	r3, #46	; 0x2e
1001083a:	701a      	strb	r2, [r3, #0]
1001083c:	1c23      	adds	r3, r4, #0
1001083e:	0e2d      	lsrs	r5, r5, #24
10010840:	332f      	adds	r3, #47	; 0x2f
10010842:	466a      	mov	r2, sp
10010844:	701d      	strb	r5, [r3, #0]
10010846:	1c23      	adds	r3, r4, #0
10010848:	7a12      	ldrb	r2, [r2, #8]
1001084a:	3330      	adds	r3, #48	; 0x30
1001084c:	701a      	strb	r2, [r3, #0]
1001084e:	1c23      	adds	r3, r4, #0
10010850:	2500      	movs	r5, #0
10010852:	3331      	adds	r3, #49	; 0x31
10010854:	466a      	mov	r2, sp
10010856:	701d      	strb	r5, [r3, #0]
10010858:	1c23      	adds	r3, r4, #0
1001085a:	7b12      	ldrb	r2, [r2, #12]
1001085c:	3332      	adds	r3, #50	; 0x32
1001085e:	701a      	strb	r2, [r3, #0]
10010860:	1c23      	adds	r3, r4, #0
10010862:	3333      	adds	r3, #51	; 0x33
10010864:	701d      	strb	r5, [r3, #0]
10010866:	232c      	movs	r3, #44	; 0x2c
10010868:	1c20      	adds	r0, r4, #0
1001086a:	71a3      	strb	r3, [r4, #6]
1001086c:	2134      	movs	r1, #52	; 0x34
1001086e:	4b08      	ldr	r3, [pc, #32]	; (10010890 <gapc_connection_cfm_handler+0xc0>)
10010870:	71e5      	strb	r5, [r4, #7]
10010872:	4798      	blx	r3
10010874:	1c28      	adds	r0, r5, #0
10010876:	b005      	add	sp, #20
10010878:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001087a:	46c0      	nop			; (mov r8, r8)
1001087c:	1001b3c0 	.word	0x1001b3c0
10010880:	1001b050 	.word	0x1001b050
10010884:	10016223 	.word	0x10016223
10010888:	1001b3c8 	.word	0x1001b3c8
1001088c:	1001b3dc 	.word	0x1001b3dc
10010890:	100104cd 	.word	0x100104cd

10010894 <gapc_con_req_ind>:
10010894:	b5f0      	push	{r4, r5, r6, r7, lr}
10010896:	7845      	ldrb	r5, [r0, #1]
10010898:	7803      	ldrb	r3, [r0, #0]
1001089a:	4c30      	ldr	r4, [pc, #192]	; (1001095c <gapc_con_req_ind+0xc8>)
1001089c:	022d      	lsls	r5, r5, #8
1001089e:	431d      	orrs	r5, r3
100108a0:	85a5      	strh	r5, [r4, #44]	; 0x2c
100108a2:	78c3      	ldrb	r3, [r0, #3]
100108a4:	7882      	ldrb	r2, [r0, #2]
100108a6:	b08b      	sub	sp, #44	; 0x2c
100108a8:	021b      	lsls	r3, r3, #8
100108aa:	431a      	orrs	r2, r3
100108ac:	466b      	mov	r3, sp
100108ae:	9205      	str	r2, [sp, #20]
100108b0:	8a9b      	ldrh	r3, [r3, #20]
100108b2:	2120      	movs	r1, #32
100108b4:	85e3      	strh	r3, [r4, #46]	; 0x2e
100108b6:	7943      	ldrb	r3, [r0, #5]
100108b8:	7902      	ldrb	r2, [r0, #4]
100108ba:	021b      	lsls	r3, r3, #8
100108bc:	431a      	orrs	r2, r3
100108be:	466b      	mov	r3, sp
100108c0:	9206      	str	r2, [sp, #24]
100108c2:	8b1b      	ldrh	r3, [r3, #24]
100108c4:	1c06      	adds	r6, r0, #0
100108c6:	8623      	strh	r3, [r4, #48]	; 0x30
100108c8:	79c3      	ldrb	r3, [r0, #7]
100108ca:	7982      	ldrb	r2, [r0, #6]
100108cc:	021b      	lsls	r3, r3, #8
100108ce:	431a      	orrs	r2, r3
100108d0:	466b      	mov	r3, sp
100108d2:	9207      	str	r2, [sp, #28]
100108d4:	466a      	mov	r2, sp
100108d6:	8b9b      	ldrh	r3, [r3, #28]
100108d8:	1852      	adds	r2, r2, r1
100108da:	8663      	strh	r3, [r4, #50]	; 0x32
100108dc:	7a43      	ldrb	r3, [r0, #9]
100108de:	1c01      	adds	r1, r0, #0
100108e0:	9308      	str	r3, [sp, #32]
100108e2:	1c23      	adds	r3, r4, #0
100108e4:	7812      	ldrb	r2, [r2, #0]
100108e6:	3377      	adds	r3, #119	; 0x77
100108e8:	3478      	adds	r4, #120	; 0x78
100108ea:	701a      	strb	r2, [r3, #0]
100108ec:	310a      	adds	r1, #10
100108ee:	2206      	movs	r2, #6
100108f0:	4b1b      	ldr	r3, [pc, #108]	; (10010960 <gapc_con_req_ind+0xcc>)
100108f2:	1c20      	adds	r0, r4, #0
100108f4:	4798      	blx	r3
100108f6:	7c33      	ldrb	r3, [r6, #16]
100108f8:	9309      	str	r3, [sp, #36]	; 0x24
100108fa:	4b1a      	ldr	r3, [pc, #104]	; (10010964 <gapc_con_req_ind+0xd0>)
100108fc:	4798      	blx	r3
100108fe:	4e1a      	ldr	r6, [pc, #104]	; (10010968 <gapc_con_req_ind+0xd4>)
10010900:	1e07      	subs	r7, r0, #0
10010902:	2f07      	cmp	r7, #7
10010904:	d81b      	bhi.n	1001093e <gapc_con_req_ind+0xaa>
10010906:	2312      	movs	r3, #18
10010908:	4343      	muls	r3, r0
1001090a:	18f0      	adds	r0, r6, r3
1001090c:	8145      	strh	r5, [r0, #10]
1001090e:	4669      	mov	r1, sp
10010910:	2524      	movs	r5, #36	; 0x24
10010912:	1949      	adds	r1, r1, r5
10010914:	7809      	ldrb	r1, [r1, #0]
10010916:	2206      	movs	r2, #6
10010918:	54f1      	strb	r1, [r6, r3]
1001091a:	2120      	movs	r1, #32
1001091c:	466b      	mov	r3, sp
1001091e:	185b      	adds	r3, r3, r1
10010920:	781b      	ldrb	r3, [r3, #0]
10010922:	1c21      	adds	r1, r4, #0
10010924:	7043      	strb	r3, [r0, #1]
10010926:	466b      	mov	r3, sp
10010928:	8a9b      	ldrh	r3, [r3, #20]
1001092a:	3002      	adds	r0, #2
1001092c:	8143      	strh	r3, [r0, #10]
1001092e:	466b      	mov	r3, sp
10010930:	8b1b      	ldrh	r3, [r3, #24]
10010932:	8183      	strh	r3, [r0, #12]
10010934:	466b      	mov	r3, sp
10010936:	8b9b      	ldrh	r3, [r3, #28]
10010938:	81c3      	strh	r3, [r0, #14]
1001093a:	4b09      	ldr	r3, [pc, #36]	; (10010960 <gapc_con_req_ind+0xcc>)
1001093c:	4798      	blx	r3
1001093e:	2112      	movs	r1, #18
10010940:	2300      	movs	r3, #0
10010942:	434f      	muls	r7, r1
10010944:	9300      	str	r3, [sp, #0]
10010946:	9301      	str	r3, [sp, #4]
10010948:	19f6      	adds	r6, r6, r7
1001094a:	8971      	ldrh	r1, [r6, #10]
1001094c:	4a07      	ldr	r2, [pc, #28]	; (1001096c <gapc_con_req_ind+0xd8>)
1001094e:	9102      	str	r1, [sp, #8]
10010950:	1c10      	adds	r0, r2, #0
10010952:	1c19      	adds	r1, r3, #0
10010954:	4c06      	ldr	r4, [pc, #24]	; (10010970 <gapc_con_req_ind+0xdc>)
10010956:	47a0      	blx	r4
10010958:	b00b      	add	sp, #44	; 0x2c
1001095a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001095c:	1001b0e2 	.word	0x1001b0e2
10010960:	10016223 	.word	0x10016223
10010964:	100106d9 	.word	0x100106d9
10010968:	1001b052 	.word	0x1001b052
1001096c:	1001a10c 	.word	0x1001a10c
10010970:	100107d1 	.word	0x100107d1

10010974 <gapc_disconnect_cmd_handler>:
10010974:	2204      	movs	r2, #4
10010976:	b510      	push	{r4, lr}
10010978:	4b0c      	ldr	r3, [pc, #48]	; (100109ac <gapc_disconnect_cmd_handler+0x38>)
1001097a:	2400      	movs	r4, #0
1001097c:	701a      	strb	r2, [r3, #0]
1001097e:	320a      	adds	r2, #10
10010980:	705a      	strb	r2, [r3, #1]
10010982:	709a      	strb	r2, [r3, #2]
10010984:	4a0a      	ldr	r2, [pc, #40]	; (100109b0 <gapc_disconnect_cmd_handler+0x3c>)
10010986:	70d9      	strb	r1, [r3, #3]
10010988:	8811      	ldrh	r1, [r2, #0]
1001098a:	8812      	ldrh	r2, [r2, #0]
1001098c:	7119      	strb	r1, [r3, #4]
1001098e:	0a12      	lsrs	r2, r2, #8
10010990:	715a      	strb	r2, [r3, #5]
10010992:	2201      	movs	r2, #1
10010994:	721a      	strb	r2, [r3, #8]
10010996:	1892      	adds	r2, r2, r2
10010998:	7258      	strb	r0, [r3, #9]
1001099a:	719a      	strb	r2, [r3, #6]
1001099c:	71dc      	strb	r4, [r3, #7]
1001099e:	1c18      	adds	r0, r3, #0
100109a0:	210a      	movs	r1, #10
100109a2:	4b04      	ldr	r3, [pc, #16]	; (100109b4 <gapc_disconnect_cmd_handler+0x40>)
100109a4:	4798      	blx	r3
100109a6:	1c20      	adds	r0, r4, #0
100109a8:	bd10      	pop	{r4, pc}
100109aa:	46c0      	nop			; (mov r8, r8)
100109ac:	1001b3c0 	.word	0x1001b3c0
100109b0:	1001b050 	.word	0x1001b050
100109b4:	100104cd 	.word	0x100104cd

100109b8 <gapc_disconnect_ind>:
100109b8:	1c02      	adds	r2, r0, #0
100109ba:	b508      	push	{r3, lr}
100109bc:	7843      	ldrb	r3, [r0, #1]
100109be:	7800      	ldrb	r0, [r0, #0]
100109c0:	021b      	lsls	r3, r3, #8
100109c2:	4318      	orrs	r0, r3
100109c4:	8008      	strh	r0, [r1, #0]
100109c6:	7893      	ldrb	r3, [r2, #2]
100109c8:	708b      	strb	r3, [r1, #2]
100109ca:	2100      	movs	r1, #0
100109cc:	4b05      	ldr	r3, [pc, #20]	; (100109e4 <gapc_disconnect_ind+0x2c>)
100109ce:	4798      	blx	r3
100109d0:	2807      	cmp	r0, #7
100109d2:	d806      	bhi.n	100109e2 <gapc_disconnect_ind+0x2a>
100109d4:	2312      	movs	r3, #18
100109d6:	4358      	muls	r0, r3
100109d8:	4b03      	ldr	r3, [pc, #12]	; (100109e8 <gapc_disconnect_ind+0x30>)
100109da:	1818      	adds	r0, r3, r0
100109dc:	2301      	movs	r3, #1
100109de:	425b      	negs	r3, r3
100109e0:	8143      	strh	r3, [r0, #10]
100109e2:	bd08      	pop	{r3, pc}
100109e4:	1001069d 	.word	0x1001069d
100109e8:	1001b052 	.word	0x1001b052

100109ec <gapc_bond_cmd_handler>:
100109ec:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100109ee:	9300      	str	r3, [sp, #0]
100109f0:	2312      	movs	r3, #18
100109f2:	1c04      	adds	r4, r0, #0
100109f4:	a808      	add	r0, sp, #32
100109f6:	7807      	ldrb	r7, [r0, #0]
100109f8:	a809      	add	r0, sp, #36	; 0x24
100109fa:	7806      	ldrb	r6, [r0, #0]
100109fc:	a80a      	add	r0, sp, #40	; 0x28
100109fe:	7805      	ldrb	r5, [r0, #0]
10010a00:	a80b      	add	r0, sp, #44	; 0x2c
10010a02:	7800      	ldrb	r0, [r0, #0]
10010a04:	9001      	str	r0, [sp, #4]
10010a06:	4810      	ldr	r0, [pc, #64]	; (10010a48 <gapc_bond_cmd_handler+0x5c>)
10010a08:	7003      	strb	r3, [r0, #0]
10010a0a:	230e      	movs	r3, #14
10010a0c:	70c4      	strb	r4, [r0, #3]
10010a0e:	4c0f      	ldr	r4, [pc, #60]	; (10010a4c <gapc_bond_cmd_handler+0x60>)
10010a10:	7043      	strb	r3, [r0, #1]
10010a12:	7083      	strb	r3, [r0, #2]
10010a14:	8823      	ldrh	r3, [r4, #0]
10010a16:	8824      	ldrh	r4, [r4, #0]
10010a18:	7103      	strb	r3, [r0, #4]
10010a1a:	466b      	mov	r3, sp
10010a1c:	781b      	ldrb	r3, [r3, #0]
10010a1e:	0a24      	lsrs	r4, r4, #8
10010a20:	72c3      	strb	r3, [r0, #11]
10010a22:	466b      	mov	r3, sp
10010a24:	791b      	ldrb	r3, [r3, #4]
10010a26:	7144      	strb	r4, [r0, #5]
10010a28:	73c3      	strb	r3, [r0, #15]
10010a2a:	2308      	movs	r3, #8
10010a2c:	7183      	strb	r3, [r0, #6]
10010a2e:	2300      	movs	r3, #0
10010a30:	240a      	movs	r4, #10
10010a32:	7241      	strb	r1, [r0, #9]
10010a34:	71c3      	strb	r3, [r0, #7]
10010a36:	2110      	movs	r1, #16
10010a38:	4b05      	ldr	r3, [pc, #20]	; (10010a50 <gapc_bond_cmd_handler+0x64>)
10010a3a:	7307      	strb	r7, [r0, #12]
10010a3c:	7346      	strb	r6, [r0, #13]
10010a3e:	7385      	strb	r5, [r0, #14]
10010a40:	7204      	strb	r4, [r0, #8]
10010a42:	7282      	strb	r2, [r0, #10]
10010a44:	4798      	blx	r3
10010a46:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010a48:	1001b3c0 	.word	0x1001b3c0
10010a4c:	1001b050 	.word	0x1001b050
10010a50:	100104cd 	.word	0x100104cd

10010a54 <gapc_bond_ind>:
10010a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010a56:	780e      	ldrb	r6, [r1, #0]
10010a58:	1c03      	adds	r3, r0, #0
10010a5a:	1eb0      	subs	r0, r6, #2
10010a5c:	2805      	cmp	r0, #5
10010a5e:	d85d      	bhi.n	10010b1c <gapc_bond_ind+0xc8>
10010a60:	1c15      	adds	r5, r2, #0
10010a62:	1c0c      	adds	r4, r1, #0
10010a64:	f002 fbb8 	bl	100131d8 <__gnu_thumb1_case_uqi>
10010a68:	2f5a030d 	.word	0x2f5a030d
10010a6c:	4740      	.short	0x4740
10010a6e:	2009      	movs	r0, #9
10010a70:	2a00      	cmp	r2, #0
10010a72:	d054      	beq.n	10010b1e <gapc_bond_ind+0xca>
10010a74:	0a1b      	lsrs	r3, r3, #8
10010a76:	8053      	strh	r3, [r2, #2]
10010a78:	788b      	ldrb	r3, [r1, #2]
10010a7a:	4829      	ldr	r0, [pc, #164]	; (10010b20 <gapc_bond_ind+0xcc>)
10010a7c:	7113      	strb	r3, [r2, #4]
10010a7e:	2100      	movs	r1, #0
10010a80:	e01c      	b.n	10010abc <gapc_bond_ind+0x68>
10010a82:	2009      	movs	r0, #9
10010a84:	2a00      	cmp	r2, #0
10010a86:	d04a      	beq.n	10010b1e <gapc_bond_ind+0xca>
10010a88:	4c25      	ldr	r4, [pc, #148]	; (10010b20 <gapc_bond_ind+0xcc>)
10010a8a:	0a1b      	lsrs	r3, r3, #8
10010a8c:	8053      	strh	r3, [r2, #2]
10010a8e:	788b      	ldrb	r3, [r1, #2]
10010a90:	2700      	movs	r7, #0
10010a92:	1c10      	adds	r0, r2, #0
10010a94:	1c21      	adds	r1, r4, #0
10010a96:	7013      	strb	r3, [r2, #0]
10010a98:	4e22      	ldr	r6, [pc, #136]	; (10010b24 <gapc_bond_ind+0xd0>)
10010a9a:	7117      	strb	r7, [r2, #4]
10010a9c:	312e      	adds	r1, #46	; 0x2e
10010a9e:	2217      	movs	r2, #23
10010aa0:	3032      	adds	r0, #50	; 0x32
10010aa2:	47b0      	blx	r6
10010aa4:	1c28      	adds	r0, r5, #0
10010aa6:	1c21      	adds	r1, r4, #0
10010aa8:	2210      	movs	r2, #16
10010aaa:	311e      	adds	r1, #30
10010aac:	3022      	adds	r0, #34	; 0x22
10010aae:	47b0      	blx	r6
10010ab0:	1ca1      	adds	r1, r4, #2
10010ab2:	1da8      	adds	r0, r5, #6
10010ab4:	221c      	movs	r2, #28
10010ab6:	47b0      	blx	r6
10010ab8:	1c20      	adds	r0, r4, #0
10010aba:	1c39      	adds	r1, r7, #0
10010abc:	2246      	movs	r2, #70	; 0x46
10010abe:	4b1a      	ldr	r3, [pc, #104]	; (10010b28 <gapc_bond_ind+0xd4>)
10010ac0:	4798      	blx	r3
10010ac2:	2009      	movs	r0, #9
10010ac4:	e02b      	b.n	10010b1e <gapc_bond_ind+0xca>
10010ac6:	4d16      	ldr	r5, [pc, #88]	; (10010b20 <gapc_bond_ind+0xcc>)
10010ac8:	3102      	adds	r1, #2
10010aca:	1c28      	adds	r0, r5, #0
10010acc:	2210      	movs	r2, #16
10010ace:	4e15      	ldr	r6, [pc, #84]	; (10010b24 <gapc_bond_ind+0xd0>)
10010ad0:	302e      	adds	r0, #46	; 0x2e
10010ad2:	47b0      	blx	r6
10010ad4:	1c28      	adds	r0, r5, #0
10010ad6:	1c21      	adds	r1, r4, #0
10010ad8:	303f      	adds	r0, #63	; 0x3f
10010ada:	3112      	adds	r1, #18
10010adc:	2206      	movs	r2, #6
10010ade:	47b0      	blx	r6
10010ae0:	7e23      	ldrb	r3, [r4, #24]
10010ae2:	353e      	adds	r5, #62	; 0x3e
10010ae4:	702b      	strb	r3, [r5, #0]
10010ae6:	e019      	b.n	10010b1c <gapc_bond_ind+0xc8>
10010ae8:	480d      	ldr	r0, [pc, #52]	; (10010b20 <gapc_bond_ind+0xcc>)
10010aea:	3102      	adds	r1, #2
10010aec:	2210      	movs	r2, #16
10010aee:	4b0d      	ldr	r3, [pc, #52]	; (10010b24 <gapc_bond_ind+0xd0>)
10010af0:	301e      	adds	r0, #30
10010af2:	4798      	blx	r3
10010af4:	e012      	b.n	10010b1c <gapc_bond_ind+0xc8>
10010af6:	4d0a      	ldr	r5, [pc, #40]	; (10010b20 <gapc_bond_ind+0xcc>)
10010af8:	3102      	adds	r1, #2
10010afa:	2210      	movs	r2, #16
10010afc:	4e09      	ldr	r6, [pc, #36]	; (10010b24 <gapc_bond_ind+0xd0>)
10010afe:	1ca8      	adds	r0, r5, #2
10010b00:	47b0      	blx	r6
10010b02:	1c28      	adds	r0, r5, #0
10010b04:	1c21      	adds	r1, r4, #0
10010b06:	7ce3      	ldrb	r3, [r4, #19]
10010b08:	7ca2      	ldrb	r2, [r4, #18]
10010b0a:	021b      	lsls	r3, r3, #8
10010b0c:	4313      	orrs	r3, r2
10010b0e:	3014      	adds	r0, #20
10010b10:	3114      	adds	r1, #20
10010b12:	2208      	movs	r2, #8
10010b14:	826b      	strh	r3, [r5, #18]
10010b16:	47b0      	blx	r6
10010b18:	7f23      	ldrb	r3, [r4, #28]
10010b1a:	772b      	strb	r3, [r5, #28]
10010b1c:	2000      	movs	r0, #0
10010b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010b20:	1001a13c 	.word	0x1001a13c
10010b24:	10016223 	.word	0x10016223
10010b28:	10016235 	.word	0x10016235

10010b2c <gapc_bond_req_ind>:
10010b2c:	b570      	push	{r4, r5, r6, lr}
10010b2e:	780c      	ldrb	r4, [r1, #0]
10010b30:	1c03      	adds	r3, r0, #0
10010b32:	7849      	ldrb	r1, [r1, #1]
10010b34:	2c07      	cmp	r4, #7
10010b36:	d85c      	bhi.n	10010bf2 <gapc_bond_req_ind+0xc6>
10010b38:	1c20      	adds	r0, r4, #0
10010b3a:	f002 fb4d 	bl	100131d8 <__gnu_thumb1_case_uqi>
10010b3e:	5a04      	.short	0x5a04
10010b40:	5a0b5a5a 	.word	0x5a0b5a5a
10010b44:	1f1f      	.short	0x1f1f
10010b46:	200a      	movs	r0, #10
10010b48:	2a00      	cmp	r2, #0
10010b4a:	d053      	beq.n	10010bf4 <gapc_bond_req_ind+0xc8>
10010b4c:	0a1b      	lsrs	r3, r3, #8
10010b4e:	8013      	strh	r3, [r2, #0]
10010b50:	7091      	strb	r1, [r2, #2]
10010b52:	e04f      	b.n	10010bf4 <gapc_bond_req_ind+0xc8>
10010b54:	2a00      	cmp	r2, #0
10010b56:	d00b      	beq.n	10010b70 <gapc_bond_req_ind+0x44>
10010b58:	0a1b      	lsrs	r3, r3, #8
10010b5a:	8013      	strh	r3, [r2, #0]
10010b5c:	2900      	cmp	r1, #0
10010b5e:	d102      	bne.n	10010b66 <gapc_bond_req_ind+0x3a>
10010b60:	2301      	movs	r3, #1
10010b62:	7093      	strb	r3, [r2, #2]
10010b64:	e004      	b.n	10010b70 <gapc_bond_req_ind+0x44>
10010b66:	2300      	movs	r3, #0
10010b68:	7093      	strb	r3, [r2, #2]
10010b6a:	2902      	cmp	r1, #2
10010b6c:	d102      	bne.n	10010b74 <gapc_bond_req_ind+0x48>
10010b6e:	70d3      	strb	r3, [r2, #3]
10010b70:	200c      	movs	r0, #12
10010b72:	e03f      	b.n	10010bf4 <gapc_bond_req_ind+0xc8>
10010b74:	2901      	cmp	r1, #1
10010b76:	d1fb      	bne.n	10010b70 <gapc_bond_req_ind+0x44>
10010b78:	70d1      	strb	r1, [r2, #3]
10010b7a:	e7f9      	b.n	10010b70 <gapc_bond_req_ind+0x44>
10010b7c:	2214      	movs	r2, #20
10010b7e:	481e      	ldr	r0, [pc, #120]	; (10010bf8 <gapc_bond_req_ind+0xcc>)
10010b80:	0a1b      	lsrs	r3, r3, #8
10010b82:	70c3      	strb	r3, [r0, #3]
10010b84:	4b1d      	ldr	r3, [pc, #116]	; (10010bfc <gapc_bond_req_ind+0xd0>)
10010b86:	7002      	strb	r2, [r0, #0]
10010b88:	3a06      	subs	r2, #6
10010b8a:	7042      	strb	r2, [r0, #1]
10010b8c:	7082      	strb	r2, [r0, #2]
10010b8e:	881a      	ldrh	r2, [r3, #0]
10010b90:	881b      	ldrh	r3, [r3, #0]
10010b92:	4e1b      	ldr	r6, [pc, #108]	; (10010c00 <gapc_bond_req_ind+0xd4>)
10010b94:	0a1b      	lsrs	r3, r3, #8
10010b96:	7143      	strb	r3, [r0, #5]
10010b98:	2301      	movs	r3, #1
10010b9a:	7102      	strb	r2, [r0, #4]
10010b9c:	7204      	strb	r4, [r0, #8]
10010b9e:	7243      	strb	r3, [r0, #9]
10010ba0:	1c05      	adds	r5, r0, #0
10010ba2:	1c31      	adds	r1, r6, #0
10010ba4:	300a      	adds	r0, #10
10010ba6:	2c07      	cmp	r4, #7
10010ba8:	d116      	bne.n	10010bd8 <gapc_bond_req_ind+0xac>
10010baa:	317e      	adds	r1, #126	; 0x7e
10010bac:	2210      	movs	r2, #16
10010bae:	4c15      	ldr	r4, [pc, #84]	; (10010c04 <gapc_bond_req_ind+0xd8>)
10010bb0:	47a0      	blx	r4
10010bb2:	1c33      	adds	r3, r6, #0
10010bb4:	1c31      	adds	r1, r6, #0
10010bb6:	1c28      	adds	r0, r5, #0
10010bb8:	338e      	adds	r3, #142	; 0x8e
10010bba:	881b      	ldrh	r3, [r3, #0]
10010bbc:	3190      	adds	r1, #144	; 0x90
10010bbe:	76ab      	strb	r3, [r5, #26]
10010bc0:	2208      	movs	r2, #8
10010bc2:	0a1b      	lsrs	r3, r3, #8
10010bc4:	301c      	adds	r0, #28
10010bc6:	76eb      	strb	r3, [r5, #27]
10010bc8:	47a0      	blx	r4
10010bca:	1c31      	adds	r1, r6, #0
10010bcc:	3198      	adds	r1, #152	; 0x98
10010bce:	780a      	ldrb	r2, [r1, #0]
10010bd0:	1d6b      	adds	r3, r5, #5
10010bd2:	77da      	strb	r2, [r3, #31]
10010bd4:	2125      	movs	r1, #37	; 0x25
10010bd6:	e004      	b.n	10010be2 <gapc_bond_req_ind+0xb6>
10010bd8:	319a      	adds	r1, #154	; 0x9a
10010bda:	2210      	movs	r2, #16
10010bdc:	4b09      	ldr	r3, [pc, #36]	; (10010c04 <gapc_bond_req_ind+0xd8>)
10010bde:	4798      	blx	r3
10010be0:	211a      	movs	r1, #26
10010be2:	1c0b      	adds	r3, r1, #0
10010be4:	2400      	movs	r4, #0
10010be6:	3b08      	subs	r3, #8
10010be8:	71ab      	strb	r3, [r5, #6]
10010bea:	1c28      	adds	r0, r5, #0
10010bec:	4b06      	ldr	r3, [pc, #24]	; (10010c08 <gapc_bond_req_ind+0xdc>)
10010bee:	71ec      	strb	r4, [r5, #7]
10010bf0:	4798      	blx	r3
10010bf2:	2000      	movs	r0, #0
10010bf4:	bd70      	pop	{r4, r5, r6, pc}
10010bf6:	46c0      	nop			; (mov r8, r8)
10010bf8:	1001b3c0 	.word	0x1001b3c0
10010bfc:	1001b050 	.word	0x1001b050
10010c00:	1001b0e2 	.word	0x1001b0e2
10010c04:	10016223 	.word	0x10016223
10010c08:	100104cd 	.word	0x100104cd

10010c0c <gapc_bond_cfm_handler_pair_resp>:
10010c0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10010c0e:	b085      	sub	sp, #20
10010c10:	1c07      	adds	r7, r0, #0
10010c12:	a80a      	add	r0, sp, #40	; 0x28
10010c14:	7806      	ldrb	r6, [r0, #0]
10010c16:	a80b      	add	r0, sp, #44	; 0x2c
10010c18:	7805      	ldrb	r5, [r0, #0]
10010c1a:	a80c      	add	r0, sp, #48	; 0x30
10010c1c:	7800      	ldrb	r0, [r0, #0]
10010c1e:	2414      	movs	r4, #20
10010c20:	9002      	str	r0, [sp, #8]
10010c22:	a80d      	add	r0, sp, #52	; 0x34
10010c24:	7800      	ldrb	r0, [r0, #0]
10010c26:	9301      	str	r3, [sp, #4]
10010c28:	9003      	str	r0, [sp, #12]
10010c2a:	a80e      	add	r0, sp, #56	; 0x38
10010c2c:	8800      	ldrh	r0, [r0, #0]
10010c2e:	4684      	mov	ip, r0
10010c30:	4812      	ldr	r0, [pc, #72]	; (10010c7c <gapc_bond_cfm_handler_pair_resp+0x70>)
10010c32:	7004      	strb	r4, [r0, #0]
10010c34:	3c06      	subs	r4, #6
10010c36:	7044      	strb	r4, [r0, #1]
10010c38:	7084      	strb	r4, [r0, #2]
10010c3a:	4664      	mov	r4, ip
10010c3c:	70c4      	strb	r4, [r0, #3]
10010c3e:	4c10      	ldr	r4, [pc, #64]	; (10010c80 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010c40:	7247      	strb	r7, [r0, #9]
10010c42:	8823      	ldrh	r3, [r4, #0]
10010c44:	8824      	ldrh	r4, [r4, #0]
10010c46:	7103      	strb	r3, [r0, #4]
10010c48:	466b      	mov	r3, sp
10010c4a:	791b      	ldrb	r3, [r3, #4]
10010c4c:	0a24      	lsrs	r4, r4, #8
10010c4e:	7303      	strb	r3, [r0, #12]
10010c50:	466b      	mov	r3, sp
10010c52:	7a1b      	ldrb	r3, [r3, #8]
10010c54:	7144      	strb	r4, [r0, #5]
10010c56:	73c3      	strb	r3, [r0, #15]
10010c58:	466b      	mov	r3, sp
10010c5a:	7b1b      	ldrb	r3, [r3, #12]
10010c5c:	2401      	movs	r4, #1
10010c5e:	7403      	strb	r3, [r0, #16]
10010c60:	2309      	movs	r3, #9
10010c62:	7183      	strb	r3, [r0, #6]
10010c64:	2300      	movs	r3, #0
10010c66:	7204      	strb	r4, [r0, #8]
10010c68:	7281      	strb	r1, [r0, #10]
10010c6a:	72c2      	strb	r2, [r0, #11]
10010c6c:	7346      	strb	r6, [r0, #13]
10010c6e:	7385      	strb	r5, [r0, #14]
10010c70:	71c3      	strb	r3, [r0, #7]
10010c72:	2111      	movs	r1, #17
10010c74:	4b03      	ldr	r3, [pc, #12]	; (10010c84 <gapc_bond_cfm_handler_pair_resp+0x78>)
10010c76:	4798      	blx	r3
10010c78:	b005      	add	sp, #20
10010c7a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c7c:	1001b3c0 	.word	0x1001b3c0
10010c80:	1001b050 	.word	0x1001b050
10010c84:	100104cd 	.word	0x100104cd

10010c88 <gapc_bond_cfm_handler_key_exch>:
10010c88:	b538      	push	{r3, r4, r5, lr}
10010c8a:	2514      	movs	r5, #20
10010c8c:	4c0d      	ldr	r4, [pc, #52]	; (10010cc4 <gapc_bond_cfm_handler_key_exch+0x3c>)
10010c8e:	70e3      	strb	r3, [r4, #3]
10010c90:	4b0d      	ldr	r3, [pc, #52]	; (10010cc8 <gapc_bond_cfm_handler_key_exch+0x40>)
10010c92:	7025      	strb	r5, [r4, #0]
10010c94:	3d06      	subs	r5, #6
10010c96:	7065      	strb	r5, [r4, #1]
10010c98:	70a5      	strb	r5, [r4, #2]
10010c9a:	881d      	ldrh	r5, [r3, #0]
10010c9c:	881b      	ldrh	r3, [r3, #0]
10010c9e:	7220      	strb	r0, [r4, #8]
10010ca0:	0a1b      	lsrs	r3, r3, #8
10010ca2:	7163      	strb	r3, [r4, #5]
10010ca4:	7261      	strb	r1, [r4, #9]
10010ca6:	4b09      	ldr	r3, [pc, #36]	; (10010ccc <gapc_bond_cfm_handler_key_exch+0x44>)
10010ca8:	1c11      	adds	r1, r2, #0
10010caa:	4809      	ldr	r0, [pc, #36]	; (10010cd0 <gapc_bond_cfm_handler_key_exch+0x48>)
10010cac:	2210      	movs	r2, #16
10010cae:	7125      	strb	r5, [r4, #4]
10010cb0:	4798      	blx	r3
10010cb2:	2312      	movs	r3, #18
10010cb4:	71a3      	strb	r3, [r4, #6]
10010cb6:	2300      	movs	r3, #0
10010cb8:	1c20      	adds	r0, r4, #0
10010cba:	71e3      	strb	r3, [r4, #7]
10010cbc:	211a      	movs	r1, #26
10010cbe:	4b05      	ldr	r3, [pc, #20]	; (10010cd4 <gapc_bond_cfm_handler_key_exch+0x4c>)
10010cc0:	4798      	blx	r3
10010cc2:	bd38      	pop	{r3, r4, r5, pc}
10010cc4:	1001b3c0 	.word	0x1001b3c0
10010cc8:	1001b050 	.word	0x1001b050
10010ccc:	10016223 	.word	0x10016223
10010cd0:	1001b3ca 	.word	0x1001b3ca
10010cd4:	100104cd 	.word	0x100104cd

10010cd8 <gapc_security_cmd_handler>:
10010cd8:	221a      	movs	r2, #26
10010cda:	b508      	push	{r3, lr}
10010cdc:	4b0b      	ldr	r3, [pc, #44]	; (10010d0c <gapc_security_cmd_handler+0x34>)
10010cde:	701a      	strb	r2, [r3, #0]
10010ce0:	3a0c      	subs	r2, #12
10010ce2:	705a      	strb	r2, [r3, #1]
10010ce4:	709a      	strb	r2, [r3, #2]
10010ce6:	4a0a      	ldr	r2, [pc, #40]	; (10010d10 <gapc_security_cmd_handler+0x38>)
10010ce8:	70d8      	strb	r0, [r3, #3]
10010cea:	8810      	ldrh	r0, [r2, #0]
10010cec:	8812      	ldrh	r2, [r2, #0]
10010cee:	7118      	strb	r0, [r3, #4]
10010cf0:	0a12      	lsrs	r2, r2, #8
10010cf2:	715a      	strb	r2, [r3, #5]
10010cf4:	220c      	movs	r2, #12
10010cf6:	721a      	strb	r2, [r3, #8]
10010cf8:	3a0a      	subs	r2, #10
10010cfa:	719a      	strb	r2, [r3, #6]
10010cfc:	2200      	movs	r2, #0
10010cfe:	7259      	strb	r1, [r3, #9]
10010d00:	71da      	strb	r2, [r3, #7]
10010d02:	1c18      	adds	r0, r3, #0
10010d04:	210a      	movs	r1, #10
10010d06:	4b03      	ldr	r3, [pc, #12]	; (10010d14 <gapc_security_cmd_handler+0x3c>)
10010d08:	4798      	blx	r3
10010d0a:	bd08      	pop	{r3, pc}
10010d0c:	1001b3c0 	.word	0x1001b3c0
10010d10:	1001b050 	.word	0x1001b050
10010d14:	100104cd 	.word	0x100104cd

10010d18 <gapc_encrypt_cmd_handler>:
10010d18:	b5f0      	push	{r4, r5, r6, r7, lr}
10010d1a:	2500      	movs	r5, #0
10010d1c:	b089      	sub	sp, #36	; 0x24
10010d1e:	9306      	str	r3, [sp, #24]
10010d20:	ab0e      	add	r3, sp, #56	; 0x38
10010d22:	781b      	ldrb	r3, [r3, #0]
10010d24:	1c17      	adds	r7, r2, #0
10010d26:	9307      	str	r3, [sp, #28]
10010d28:	ab0f      	add	r3, sp, #60	; 0x3c
10010d2a:	781b      	ldrb	r3, [r3, #0]
10010d2c:	4a19      	ldr	r2, [pc, #100]	; (10010d94 <gapc_encrypt_cmd_handler+0x7c>)
10010d2e:	1c06      	adds	r6, r0, #0
10010d30:	9105      	str	r1, [sp, #20]
10010d32:	9300      	str	r3, [sp, #0]
10010d34:	9002      	str	r0, [sp, #8]
10010d36:	1c29      	adds	r1, r5, #0
10010d38:	1c2b      	adds	r3, r5, #0
10010d3a:	9501      	str	r5, [sp, #4]
10010d3c:	1c10      	adds	r0, r2, #0
10010d3e:	4c16      	ldr	r4, [pc, #88]	; (10010d98 <gapc_encrypt_cmd_handler+0x80>)
10010d40:	47a0      	blx	r4
10010d42:	2316      	movs	r3, #22
10010d44:	4c15      	ldr	r4, [pc, #84]	; (10010d9c <gapc_encrypt_cmd_handler+0x84>)
10010d46:	9905      	ldr	r1, [sp, #20]
10010d48:	7023      	strb	r3, [r4, #0]
10010d4a:	3b08      	subs	r3, #8
10010d4c:	7063      	strb	r3, [r4, #1]
10010d4e:	70a3      	strb	r3, [r4, #2]
10010d50:	4b13      	ldr	r3, [pc, #76]	; (10010da0 <gapc_encrypt_cmd_handler+0x88>)
10010d52:	70e6      	strb	r6, [r4, #3]
10010d54:	881a      	ldrh	r2, [r3, #0]
10010d56:	881b      	ldrh	r3, [r3, #0]
10010d58:	7122      	strb	r2, [r4, #4]
10010d5a:	0a1b      	lsrs	r3, r3, #8
10010d5c:	7163      	strb	r3, [r4, #5]
10010d5e:	230b      	movs	r3, #11
10010d60:	4e10      	ldr	r6, [pc, #64]	; (10010da4 <gapc_encrypt_cmd_handler+0x8c>)
10010d62:	2210      	movs	r2, #16
10010d64:	4810      	ldr	r0, [pc, #64]	; (10010da8 <gapc_encrypt_cmd_handler+0x90>)
10010d66:	7223      	strb	r3, [r4, #8]
10010d68:	7265      	strb	r5, [r4, #9]
10010d6a:	47b0      	blx	r6
10010d6c:	0a3b      	lsrs	r3, r7, #8
10010d6e:	9906      	ldr	r1, [sp, #24]
10010d70:	2208      	movs	r2, #8
10010d72:	480e      	ldr	r0, [pc, #56]	; (10010dac <gapc_encrypt_cmd_handler+0x94>)
10010d74:	76e3      	strb	r3, [r4, #27]
10010d76:	76a7      	strb	r7, [r4, #26]
10010d78:	47b0      	blx	r6
10010d7a:	466a      	mov	r2, sp
10010d7c:	7f12      	ldrb	r2, [r2, #28]
10010d7e:	1d63      	adds	r3, r4, #5
10010d80:	77da      	strb	r2, [r3, #31]
10010d82:	231d      	movs	r3, #29
10010d84:	1c20      	adds	r0, r4, #0
10010d86:	71a3      	strb	r3, [r4, #6]
10010d88:	2125      	movs	r1, #37	; 0x25
10010d8a:	4b09      	ldr	r3, [pc, #36]	; (10010db0 <gapc_encrypt_cmd_handler+0x98>)
10010d8c:	71e5      	strb	r5, [r4, #7]
10010d8e:	4798      	blx	r3
10010d90:	b009      	add	sp, #36	; 0x24
10010d92:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010d94:	1001a11c 	.word	0x1001a11c
10010d98:	100107d1 	.word	0x100107d1
10010d9c:	1001b3c0 	.word	0x1001b3c0
10010da0:	1001b050 	.word	0x1001b050
10010da4:	10016223 	.word	0x10016223
10010da8:	1001b3ca 	.word	0x1001b3ca
10010dac:	1001b3dc 	.word	0x1001b3dc
10010db0:	100104cd 	.word	0x100104cd

10010db4 <gapc_encrypt_req_ind>:
10010db4:	b508      	push	{r3, lr}
10010db6:	0a00      	lsrs	r0, r0, #8
10010db8:	8010      	strh	r0, [r2, #0]
10010dba:	784b      	ldrb	r3, [r1, #1]
10010dbc:	7808      	ldrb	r0, [r1, #0]
10010dbe:	021b      	lsls	r3, r3, #8
10010dc0:	4303      	orrs	r3, r0
10010dc2:	8053      	strh	r3, [r2, #2]
10010dc4:	1d10      	adds	r0, r2, #4
10010dc6:	3102      	adds	r1, #2
10010dc8:	2208      	movs	r2, #8
10010dca:	4b01      	ldr	r3, [pc, #4]	; (10010dd0 <gapc_encrypt_req_ind+0x1c>)
10010dcc:	4798      	blx	r3
10010dce:	bd08      	pop	{r3, pc}
10010dd0:	10016223 	.word	0x10016223

10010dd4 <gapc_encrypt_cfm_handler>:
10010dd4:	b5f0      	push	{r4, r5, r6, r7, lr}
10010dd6:	2500      	movs	r5, #0
10010dd8:	b087      	sub	sp, #28
10010dda:	9304      	str	r3, [sp, #16]
10010ddc:	ab0c      	add	r3, sp, #48	; 0x30
10010dde:	781b      	ldrb	r3, [r3, #0]
10010de0:	1c17      	adds	r7, r2, #0
10010de2:	4a15      	ldr	r2, [pc, #84]	; (10010e38 <gapc_encrypt_cfm_handler+0x64>)
10010de4:	1c06      	adds	r6, r0, #0
10010de6:	9305      	str	r3, [sp, #20]
10010de8:	9100      	str	r1, [sp, #0]
10010dea:	9002      	str	r0, [sp, #8]
10010dec:	1c29      	adds	r1, r5, #0
10010dee:	1c2b      	adds	r3, r5, #0
10010df0:	9501      	str	r5, [sp, #4]
10010df2:	1c10      	adds	r0, r2, #0
10010df4:	4c11      	ldr	r4, [pc, #68]	; (10010e3c <gapc_encrypt_cfm_handler+0x68>)
10010df6:	47a0      	blx	r4
10010df8:	2318      	movs	r3, #24
10010dfa:	4c11      	ldr	r4, [pc, #68]	; (10010e40 <gapc_encrypt_cfm_handler+0x6c>)
10010dfc:	9904      	ldr	r1, [sp, #16]
10010dfe:	7023      	strb	r3, [r4, #0]
10010e00:	3b0a      	subs	r3, #10
10010e02:	7063      	strb	r3, [r4, #1]
10010e04:	70a3      	strb	r3, [r4, #2]
10010e06:	4b0f      	ldr	r3, [pc, #60]	; (10010e44 <gapc_encrypt_cfm_handler+0x70>)
10010e08:	480f      	ldr	r0, [pc, #60]	; (10010e48 <gapc_encrypt_cfm_handler+0x74>)
10010e0a:	881a      	ldrh	r2, [r3, #0]
10010e0c:	881b      	ldrh	r3, [r3, #0]
10010e0e:	7122      	strb	r2, [r4, #4]
10010e10:	0a1b      	lsrs	r3, r3, #8
10010e12:	7163      	strb	r3, [r4, #5]
10010e14:	2210      	movs	r2, #16
10010e16:	4b0d      	ldr	r3, [pc, #52]	; (10010e4c <gapc_encrypt_cfm_handler+0x78>)
10010e18:	70e6      	strb	r6, [r4, #3]
10010e1a:	7227      	strb	r7, [r4, #8]
10010e1c:	4798      	blx	r3
10010e1e:	466b      	mov	r3, sp
10010e20:	7d1b      	ldrb	r3, [r3, #20]
10010e22:	1c20      	adds	r0, r4, #0
10010e24:	7663      	strb	r3, [r4, #25]
10010e26:	2312      	movs	r3, #18
10010e28:	211a      	movs	r1, #26
10010e2a:	71a3      	strb	r3, [r4, #6]
10010e2c:	4b08      	ldr	r3, [pc, #32]	; (10010e50 <gapc_encrypt_cfm_handler+0x7c>)
10010e2e:	71e5      	strb	r5, [r4, #7]
10010e30:	4798      	blx	r3
10010e32:	b007      	add	sp, #28
10010e34:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010e36:	46c0      	nop			; (mov r8, r8)
10010e38:	1001a12c 	.word	0x1001a12c
10010e3c:	100107d1 	.word	0x100107d1
10010e40:	1001b3c0 	.word	0x1001b3c0
10010e44:	1001b050 	.word	0x1001b050
10010e48:	1001b3c9 	.word	0x1001b3c9
10010e4c:	10016223 	.word	0x10016223
10010e50:	100104cd 	.word	0x100104cd

10010e54 <gapc_encrypt_ind>:
10010e54:	780b      	ldrb	r3, [r1, #0]
10010e56:	0a00      	lsrs	r0, r0, #8
10010e58:	70d3      	strb	r3, [r2, #3]
10010e5a:	2300      	movs	r3, #0
10010e5c:	8010      	strh	r0, [r2, #0]
10010e5e:	7093      	strb	r3, [r2, #2]
10010e60:	4770      	bx	lr
	...

10010e64 <gapc_param_update_cfm_handler>:
10010e64:	b538      	push	{r3, r4, r5, lr}
10010e66:	2410      	movs	r4, #16
10010e68:	1c05      	adds	r5, r0, #0
10010e6a:	480e      	ldr	r0, [pc, #56]	; (10010ea4 <gapc_param_update_cfm_handler+0x40>)
10010e6c:	7004      	strb	r4, [r0, #0]
10010e6e:	3c02      	subs	r4, #2
10010e70:	7044      	strb	r4, [r0, #1]
10010e72:	7084      	strb	r4, [r0, #2]
10010e74:	4c0c      	ldr	r4, [pc, #48]	; (10010ea8 <gapc_param_update_cfm_handler+0x44>)
10010e76:	70c5      	strb	r5, [r0, #3]
10010e78:	8825      	ldrh	r5, [r4, #0]
10010e7a:	8824      	ldrh	r4, [r4, #0]
10010e7c:	72c3      	strb	r3, [r0, #11]
10010e7e:	0a1b      	lsrs	r3, r3, #8
10010e80:	0a24      	lsrs	r4, r4, #8
10010e82:	7303      	strb	r3, [r0, #12]
10010e84:	2305      	movs	r3, #5
10010e86:	7144      	strb	r4, [r0, #5]
10010e88:	2400      	movs	r4, #0
10010e8a:	7201      	strb	r1, [r0, #8]
10010e8c:	7242      	strb	r2, [r0, #9]
10010e8e:	7183      	strb	r3, [r0, #6]
10010e90:	0a12      	lsrs	r2, r2, #8
10010e92:	210d      	movs	r1, #13
10010e94:	4b05      	ldr	r3, [pc, #20]	; (10010eac <gapc_param_update_cfm_handler+0x48>)
10010e96:	7105      	strb	r5, [r0, #4]
10010e98:	7282      	strb	r2, [r0, #10]
10010e9a:	71c4      	strb	r4, [r0, #7]
10010e9c:	4798      	blx	r3
10010e9e:	1c20      	adds	r0, r4, #0
10010ea0:	bd38      	pop	{r3, r4, r5, pc}
10010ea2:	46c0      	nop			; (mov r8, r8)
10010ea4:	1001b3c0 	.word	0x1001b3c0
10010ea8:	1001b050 	.word	0x1001b050
10010eac:	100104cd 	.word	0x100104cd

10010eb0 <gapc_param_updated_ind>:
10010eb0:	2300      	movs	r3, #0
10010eb2:	0a00      	lsrs	r0, r0, #8
10010eb4:	8010      	strh	r0, [r2, #0]
10010eb6:	7093      	strb	r3, [r2, #2]
10010eb8:	784b      	ldrb	r3, [r1, #1]
10010eba:	7808      	ldrb	r0, [r1, #0]
10010ebc:	021b      	lsls	r3, r3, #8
10010ebe:	4303      	orrs	r3, r0
10010ec0:	8093      	strh	r3, [r2, #4]
10010ec2:	78cb      	ldrb	r3, [r1, #3]
10010ec4:	7888      	ldrb	r0, [r1, #2]
10010ec6:	021b      	lsls	r3, r3, #8
10010ec8:	4303      	orrs	r3, r0
10010eca:	80d3      	strh	r3, [r2, #6]
10010ecc:	794b      	ldrb	r3, [r1, #5]
10010ece:	7909      	ldrb	r1, [r1, #4]
10010ed0:	021b      	lsls	r3, r3, #8
10010ed2:	430b      	orrs	r3, r1
10010ed4:	2007      	movs	r0, #7
10010ed6:	8113      	strh	r3, [r2, #8]
10010ed8:	4770      	bx	lr

10010eda <gapc_param_updated_req_ind>:
10010eda:	0a00      	lsrs	r0, r0, #8
10010edc:	8010      	strh	r0, [r2, #0]
10010ede:	784b      	ldrb	r3, [r1, #1]
10010ee0:	7808      	ldrb	r0, [r1, #0]
10010ee2:	021b      	lsls	r3, r3, #8
10010ee4:	4303      	orrs	r3, r0
10010ee6:	8053      	strh	r3, [r2, #2]
10010ee8:	78cb      	ldrb	r3, [r1, #3]
10010eea:	7888      	ldrb	r0, [r1, #2]
10010eec:	021b      	lsls	r3, r3, #8
10010eee:	4303      	orrs	r3, r0
10010ef0:	8093      	strh	r3, [r2, #4]
10010ef2:	794b      	ldrb	r3, [r1, #5]
10010ef4:	7908      	ldrb	r0, [r1, #4]
10010ef6:	021b      	lsls	r3, r3, #8
10010ef8:	4303      	orrs	r3, r0
10010efa:	80d3      	strh	r3, [r2, #6]
10010efc:	79cb      	ldrb	r3, [r1, #7]
10010efe:	7989      	ldrb	r1, [r1, #6]
10010f00:	021b      	lsls	r3, r3, #8
10010f02:	430b      	orrs	r3, r1
10010f04:	2008      	movs	r0, #8
10010f06:	8113      	strh	r3, [r2, #8]
10010f08:	4770      	bx	lr
	...

10010f0c <gapc_dev_info_req_ind_handler>:
10010f0c:	b508      	push	{r3, lr}
10010f0e:	1c0b      	adds	r3, r1, #0
10010f10:	0a01      	lsrs	r1, r0, #8
10010f12:	8011      	strh	r1, [r2, #0]
10010f14:	7818      	ldrb	r0, [r3, #0]
10010f16:	7090      	strb	r0, [r2, #2]
10010f18:	2800      	cmp	r0, #0
10010f1a:	d104      	bne.n	10010f26 <gapc_dev_info_req_ind_handler+0x1a>
10010f1c:	4b03      	ldr	r3, [pc, #12]	; (10010f2c <gapc_dev_info_req_ind_handler+0x20>)
10010f1e:	33aa      	adds	r3, #170	; 0xaa
10010f20:	881b      	ldrh	r3, [r3, #0]
10010f22:	2b00      	cmp	r3, #0
10010f24:	d001      	beq.n	10010f2a <gapc_dev_info_req_ind_handler+0x1e>
10010f26:	4b02      	ldr	r3, [pc, #8]	; (10010f30 <gapc_dev_info_req_ind_handler+0x24>)
10010f28:	4798      	blx	r3
10010f2a:	bd08      	pop	{r3, pc}
10010f2c:	1001b0e2 	.word	0x1001b0e2
10010f30:	100105dd 	.word	0x100105dd

10010f34 <gapc_sec_req_ind>:
10010f34:	0a00      	lsrs	r0, r0, #8
10010f36:	8010      	strh	r0, [r2, #0]
10010f38:	7809      	ldrb	r1, [r1, #0]
10010f3a:	2301      	movs	r3, #1
10010f3c:	1c08      	adds	r0, r1, #0
10010f3e:	0889      	lsrs	r1, r1, #2
10010f40:	4018      	ands	r0, r3
10010f42:	400b      	ands	r3, r1
10010f44:	70d0      	strb	r0, [r2, #3]
10010f46:	7113      	strb	r3, [r2, #4]
10010f48:	4770      	bx	lr

10010f4a <gapc_sign_counter_ind_handler>:
10010f4a:	0a00      	lsrs	r0, r0, #8
10010f4c:	8010      	strh	r0, [r2, #0]
10010f4e:	784b      	ldrb	r3, [r1, #1]
10010f50:	0218      	lsls	r0, r3, #8
10010f52:	788b      	ldrb	r3, [r1, #2]
10010f54:	041b      	lsls	r3, r3, #16
10010f56:	4303      	orrs	r3, r0
10010f58:	7808      	ldrb	r0, [r1, #0]
10010f5a:	4303      	orrs	r3, r0
10010f5c:	78c8      	ldrb	r0, [r1, #3]
10010f5e:	0600      	lsls	r0, r0, #24
10010f60:	4303      	orrs	r3, r0
10010f62:	6053      	str	r3, [r2, #4]
10010f64:	794b      	ldrb	r3, [r1, #5]
10010f66:	0218      	lsls	r0, r3, #8
10010f68:	798b      	ldrb	r3, [r1, #6]
10010f6a:	041b      	lsls	r3, r3, #16
10010f6c:	4303      	orrs	r3, r0
10010f6e:	7908      	ldrb	r0, [r1, #4]
10010f70:	79c9      	ldrb	r1, [r1, #7]
10010f72:	4303      	orrs	r3, r0
10010f74:	0609      	lsls	r1, r1, #24
10010f76:	430b      	orrs	r3, r1
10010f78:	2000      	movs	r0, #0
10010f7a:	6093      	str	r3, [r2, #8]
10010f7c:	4770      	bx	lr
	...

10010f80 <gapc_peer_att_info_ind_handler>:
10010f80:	b510      	push	{r4, lr}
10010f82:	0a00      	lsrs	r0, r0, #8
10010f84:	8010      	strh	r0, [r2, #0]
10010f86:	7808      	ldrb	r0, [r1, #0]
10010f88:	7090      	strb	r0, [r2, #2]
10010f8a:	788b      	ldrb	r3, [r1, #2]
10010f8c:	784c      	ldrb	r4, [r1, #1]
10010f8e:	021b      	lsls	r3, r3, #8
10010f90:	4323      	orrs	r3, r4
10010f92:	8093      	strh	r3, [r2, #4]
10010f94:	2801      	cmp	r0, #1
10010f96:	d027      	beq.n	10010fe8 <gapc_peer_att_info_ind_handler+0x68>
10010f98:	2800      	cmp	r0, #0
10010f9a:	d017      	beq.n	10010fcc <gapc_peer_att_info_ind_handler+0x4c>
10010f9c:	2802      	cmp	r0, #2
10010f9e:	d12a      	bne.n	10010ff6 <gapc_peer_att_info_ind_handler+0x76>
10010fa0:	790b      	ldrb	r3, [r1, #4]
10010fa2:	78c8      	ldrb	r0, [r1, #3]
10010fa4:	021b      	lsls	r3, r3, #8
10010fa6:	4303      	orrs	r3, r0
10010fa8:	8113      	strh	r3, [r2, #8]
10010faa:	798b      	ldrb	r3, [r1, #6]
10010fac:	7948      	ldrb	r0, [r1, #5]
10010fae:	021b      	lsls	r3, r3, #8
10010fb0:	4303      	orrs	r3, r0
10010fb2:	80d3      	strh	r3, [r2, #6]
10010fb4:	7a0b      	ldrb	r3, [r1, #8]
10010fb6:	79c8      	ldrb	r0, [r1, #7]
10010fb8:	021b      	lsls	r3, r3, #8
10010fba:	4303      	orrs	r3, r0
10010fbc:	8193      	strh	r3, [r2, #12]
10010fbe:	7a8b      	ldrb	r3, [r1, #10]
10010fc0:	7a49      	ldrb	r1, [r1, #9]
10010fc2:	021b      	lsls	r3, r3, #8
10010fc4:	430b      	orrs	r3, r1
10010fc6:	8153      	strh	r3, [r2, #10]
10010fc8:	2306      	movs	r3, #6
10010fca:	e013      	b.n	10010ff4 <gapc_peer_att_info_ind_handler+0x74>
10010fcc:	1c14      	adds	r4, r2, #0
10010fce:	1c20      	adds	r0, r4, #0
10010fd0:	790a      	ldrb	r2, [r1, #4]
10010fd2:	78cb      	ldrb	r3, [r1, #3]
10010fd4:	0212      	lsls	r2, r2, #8
10010fd6:	431a      	orrs	r2, r3
10010fd8:	80e2      	strh	r2, [r4, #6]
10010fda:	4b07      	ldr	r3, [pc, #28]	; (10010ff8 <gapc_peer_att_info_ind_handler+0x78>)
10010fdc:	3008      	adds	r0, #8
10010fde:	3105      	adds	r1, #5
10010fe0:	4798      	blx	r3
10010fe2:	2302      	movs	r3, #2
10010fe4:	70a3      	strb	r3, [r4, #2]
10010fe6:	e006      	b.n	10010ff6 <gapc_peer_att_info_ind_handler+0x76>
10010fe8:	790b      	ldrb	r3, [r1, #4]
10010fea:	78c9      	ldrb	r1, [r1, #3]
10010fec:	021b      	lsls	r3, r3, #8
10010fee:	430b      	orrs	r3, r1
10010ff0:	80d3      	strh	r3, [r2, #6]
10010ff2:	2305      	movs	r3, #5
10010ff4:	7093      	strb	r3, [r2, #2]
10010ff6:	bd10      	pop	{r4, pc}
10010ff8:	10016223 	.word	0x10016223

10010ffc <gapc_con_channel_map_ind_handler>:
10010ffc:	b508      	push	{r3, lr}
10010ffe:	2300      	movs	r3, #0
10011000:	0a00      	lsrs	r0, r0, #8
10011002:	7013      	strb	r3, [r2, #0]
10011004:	8050      	strh	r0, [r2, #2]
10011006:	4b02      	ldr	r3, [pc, #8]	; (10011010 <gapc_con_channel_map_ind_handler+0x14>)
10011008:	1d10      	adds	r0, r2, #4
1001100a:	2205      	movs	r2, #5
1001100c:	4798      	blx	r3
1001100e:	bd08      	pop	{r3, pc}
10011010:	10016223 	.word	0x10016223

10011014 <gapc_lecb_connected>:
10011014:	7843      	ldrb	r3, [r0, #1]
10011016:	7802      	ldrb	r2, [r0, #0]
10011018:	021b      	lsls	r3, r3, #8
1001101a:	4313      	orrs	r3, r2
1001101c:	800b      	strh	r3, [r1, #0]
1001101e:	78c3      	ldrb	r3, [r0, #3]
10011020:	7882      	ldrb	r2, [r0, #2]
10011022:	021b      	lsls	r3, r3, #8
10011024:	4313      	orrs	r3, r2
10011026:	804b      	strh	r3, [r1, #2]
10011028:	7943      	ldrb	r3, [r0, #5]
1001102a:	7902      	ldrb	r2, [r0, #4]
1001102c:	021b      	lsls	r3, r3, #8
1001102e:	4313      	orrs	r3, r2
10011030:	808b      	strh	r3, [r1, #4]
10011032:	79c3      	ldrb	r3, [r0, #7]
10011034:	7982      	ldrb	r2, [r0, #6]
10011036:	021b      	lsls	r3, r3, #8
10011038:	4313      	orrs	r3, r2
1001103a:	80cb      	strh	r3, [r1, #6]
1001103c:	2300      	movs	r3, #0
1001103e:	720b      	strb	r3, [r1, #8]
10011040:	4770      	bx	lr

10011042 <gapc_lecb_disconnected>:
10011042:	7843      	ldrb	r3, [r0, #1]
10011044:	7802      	ldrb	r2, [r0, #0]
10011046:	021b      	lsls	r3, r3, #8
10011048:	4313      	orrs	r3, r2
1001104a:	800b      	strh	r3, [r1, #0]
1001104c:	78c3      	ldrb	r3, [r0, #3]
1001104e:	7882      	ldrb	r2, [r0, #2]
10011050:	021b      	lsls	r3, r3, #8
10011052:	4313      	orrs	r3, r2
10011054:	804b      	strh	r3, [r1, #2]
10011056:	4770      	bx	lr

10011058 <gapc_lecb_connect_req_ind>:
10011058:	7843      	ldrb	r3, [r0, #1]
1001105a:	7802      	ldrb	r2, [r0, #0]
1001105c:	021b      	lsls	r3, r3, #8
1001105e:	4313      	orrs	r3, r2
10011060:	800b      	strh	r3, [r1, #0]
10011062:	78c3      	ldrb	r3, [r0, #3]
10011064:	7882      	ldrb	r2, [r0, #2]
10011066:	021b      	lsls	r3, r3, #8
10011068:	4313      	orrs	r3, r2
1001106a:	804b      	strh	r3, [r1, #2]
1001106c:	7943      	ldrb	r3, [r0, #5]
1001106e:	7902      	ldrb	r2, [r0, #4]
10011070:	021b      	lsls	r3, r3, #8
10011072:	4313      	orrs	r3, r2
10011074:	808b      	strh	r3, [r1, #4]
10011076:	79c3      	ldrb	r3, [r0, #7]
10011078:	7982      	ldrb	r2, [r0, #6]
1001107a:	021b      	lsls	r3, r3, #8
1001107c:	4313      	orrs	r3, r2
1001107e:	80cb      	strh	r3, [r1, #6]
10011080:	4770      	bx	lr

10011082 <gapc_lecb_add_credit_resp_handler>:
10011082:	7843      	ldrb	r3, [r0, #1]
10011084:	7802      	ldrb	r2, [r0, #0]
10011086:	021b      	lsls	r3, r3, #8
10011088:	4313      	orrs	r3, r2
1001108a:	800b      	strh	r3, [r1, #0]
1001108c:	78c3      	ldrb	r3, [r0, #3]
1001108e:	7882      	ldrb	r2, [r0, #2]
10011090:	021b      	lsls	r3, r3, #8
10011092:	4313      	orrs	r3, r2
10011094:	804b      	strh	r3, [r1, #2]
10011096:	7943      	ldrb	r3, [r0, #5]
10011098:	7902      	ldrb	r2, [r0, #4]
1001109a:	021b      	lsls	r3, r3, #8
1001109c:	4313      	orrs	r3, r2
1001109e:	808b      	strh	r3, [r1, #4]
100110a0:	4770      	bx	lr
	...

100110a4 <gapm_reset_req_handler>:
100110a4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100110a6:	466b      	mov	r3, sp
100110a8:	4915      	ldr	r1, [pc, #84]	; (10011100 <gapm_reset_req_handler+0x5c>)
100110aa:	4816      	ldr	r0, [pc, #88]	; (10011104 <gapm_reset_req_handler+0x60>)
100110ac:	880c      	ldrh	r4, [r1, #0]
100110ae:	8809      	ldrh	r1, [r1, #0]
100110b0:	1ddd      	adds	r5, r3, #7
100110b2:	0a09      	lsrs	r1, r1, #8
100110b4:	2300      	movs	r3, #0
100110b6:	2202      	movs	r2, #2
100110b8:	7141      	strb	r1, [r0, #5]
100110ba:	26d0      	movs	r6, #208	; 0xd0
100110bc:	2101      	movs	r1, #1
100110be:	7104      	strb	r4, [r0, #4]
100110c0:	4c11      	ldr	r4, [pc, #68]	; (10011108 <gapm_reset_req_handler+0x64>)
100110c2:	702b      	strb	r3, [r5, #0]
100110c4:	7002      	strb	r2, [r0, #0]
100110c6:	70c3      	strb	r3, [r0, #3]
100110c8:	320b      	adds	r2, #11
100110ca:	7201      	strb	r1, [r0, #8]
100110cc:	7181      	strb	r1, [r0, #6]
100110ce:	71c3      	strb	r3, [r0, #7]
100110d0:	3108      	adds	r1, #8
100110d2:	4b0e      	ldr	r3, [pc, #56]	; (1001110c <gapm_reset_req_handler+0x68>)
100110d4:	0136      	lsls	r6, r6, #4
100110d6:	7042      	strb	r2, [r0, #1]
100110d8:	7082      	strb	r2, [r0, #2]
100110da:	80a2      	strh	r2, [r4, #4]
100110dc:	8026      	strh	r6, [r4, #0]
100110de:	4798      	blx	r3
100110e0:	1c28      	adds	r0, r5, #0
100110e2:	4b0b      	ldr	r3, [pc, #44]	; (10011110 <gapm_reset_req_handler+0x6c>)
100110e4:	4798      	blx	r3
100110e6:	782b      	ldrb	r3, [r5, #0]
100110e8:	20e2      	movs	r0, #226	; 0xe2
100110ea:	2b00      	cmp	r3, #0
100110ec:	d106      	bne.n	100110fc <gapm_reset_req_handler+0x58>
100110ee:	68a3      	ldr	r3, [r4, #8]
100110f0:	20e2      	movs	r0, #226	; 0xe2
100110f2:	781a      	ldrb	r2, [r3, #0]
100110f4:	785b      	ldrb	r3, [r3, #1]
100110f6:	2a01      	cmp	r2, #1
100110f8:	d100      	bne.n	100110fc <gapm_reset_req_handler+0x58>
100110fa:	1c18      	adds	r0, r3, #0
100110fc:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100110fe:	46c0      	nop			; (mov r8, r8)
10011100:	1001b050 	.word	0x1001b050
10011104:	1001b3c0 	.word	0x1001b3c0
10011108:	1001b044 	.word	0x1001b044
1001110c:	100104cd 	.word	0x100104cd
10011110:	10010531 	.word	0x10010531

10011114 <gapm_set_dev_config_cmd_handler>:
10011114:	b5f0      	push	{r4, r5, r6, r7, lr}
10011116:	b089      	sub	sp, #36	; 0x24
10011118:	9303      	str	r3, [sp, #12]
1001111a:	ab0e      	add	r3, sp, #56	; 0x38
1001111c:	781b      	ldrb	r3, [r3, #0]
1001111e:	4c37      	ldr	r4, [pc, #220]	; (100111fc <gapm_set_dev_config_cmd_handler+0xe8>)
10011120:	9304      	str	r3, [sp, #16]
10011122:	ab0f      	add	r3, sp, #60	; 0x3c
10011124:	781b      	ldrb	r3, [r3, #0]
10011126:	270d      	movs	r7, #13
10011128:	9305      	str	r3, [sp, #20]
1001112a:	ab10      	add	r3, sp, #64	; 0x40
1001112c:	881b      	ldrh	r3, [r3, #0]
1001112e:	72a1      	strb	r1, [r4, #10]
10011130:	9300      	str	r3, [sp, #0]
10011132:	ab11      	add	r3, sp, #68	; 0x44
10011134:	881b      	ldrh	r3, [r3, #0]
10011136:	0a09      	lsrs	r1, r1, #8
10011138:	9301      	str	r3, [sp, #4]
1001113a:	ab12      	add	r3, sp, #72	; 0x48
1001113c:	881b      	ldrh	r3, [r3, #0]
1001113e:	7260      	strb	r0, [r4, #9]
10011140:	9302      	str	r3, [sp, #8]
10011142:	ab06      	add	r3, sp, #24
10011144:	1dde      	adds	r6, r3, #7
10011146:	2300      	movs	r3, #0
10011148:	7033      	strb	r3, [r6, #0]
1001114a:	2304      	movs	r3, #4
1001114c:	7023      	strb	r3, [r4, #0]
1001114e:	2300      	movs	r3, #0
10011150:	70e3      	strb	r3, [r4, #3]
10011152:	4b2b      	ldr	r3, [pc, #172]	; (10011200 <gapm_set_dev_config_cmd_handler+0xec>)
10011154:	72e1      	strb	r1, [r4, #11]
10011156:	881d      	ldrh	r5, [r3, #0]
10011158:	881b      	ldrh	r3, [r3, #0]
1001115a:	1c11      	adds	r1, r2, #0
1001115c:	0a1b      	lsrs	r3, r3, #8
1001115e:	7163      	strb	r3, [r4, #5]
10011160:	2303      	movs	r3, #3
10011162:	7125      	strb	r5, [r4, #4]
10011164:	2206      	movs	r2, #6
10011166:	4d27      	ldr	r5, [pc, #156]	; (10011204 <gapm_set_dev_config_cmd_handler+0xf0>)
10011168:	4827      	ldr	r0, [pc, #156]	; (10011208 <gapm_set_dev_config_cmd_handler+0xf4>)
1001116a:	7223      	strb	r3, [r4, #8]
1001116c:	7067      	strb	r7, [r4, #1]
1001116e:	70a7      	strb	r7, [r4, #2]
10011170:	47a8      	blx	r5
10011172:	9903      	ldr	r1, [sp, #12]
10011174:	2210      	movs	r2, #16
10011176:	4825      	ldr	r0, [pc, #148]	; (1001120c <gapm_set_dev_config_cmd_handler+0xf8>)
10011178:	47a8      	blx	r5
1001117a:	466a      	mov	r2, sp
1001117c:	7c12      	ldrb	r2, [r2, #16]
1001117e:	1ce3      	adds	r3, r4, #3
10011180:	77da      	strb	r2, [r3, #31]
10011182:	466a      	mov	r2, sp
10011184:	7d12      	ldrb	r2, [r2, #20]
10011186:	1d23      	adds	r3, r4, #4
10011188:	77da      	strb	r2, [r3, #31]
1001118a:	466a      	mov	r2, sp
1001118c:	7812      	ldrb	r2, [r2, #0]
1001118e:	1d63      	adds	r3, r4, #5
10011190:	77da      	strb	r2, [r3, #31]
10011192:	9b00      	ldr	r3, [sp, #0]
10011194:	1da2      	adds	r2, r4, #6
10011196:	0a1b      	lsrs	r3, r3, #8
10011198:	77d3      	strb	r3, [r2, #31]
1001119a:	466a      	mov	r2, sp
1001119c:	7912      	ldrb	r2, [r2, #4]
1001119e:	1de3      	adds	r3, r4, #7
100111a0:	77da      	strb	r2, [r3, #31]
100111a2:	1c22      	adds	r2, r4, #0
100111a4:	9b01      	ldr	r3, [sp, #4]
100111a6:	3208      	adds	r2, #8
100111a8:	0a1b      	lsrs	r3, r3, #8
100111aa:	77d3      	strb	r3, [r2, #31]
100111ac:	466a      	mov	r2, sp
100111ae:	1c23      	adds	r3, r4, #0
100111b0:	7a12      	ldrb	r2, [r2, #8]
100111b2:	3328      	adds	r3, #40	; 0x28
100111b4:	701a      	strb	r2, [r3, #0]
100111b6:	1c22      	adds	r2, r4, #0
100111b8:	9b02      	ldr	r3, [sp, #8]
100111ba:	3229      	adds	r2, #41	; 0x29
100111bc:	0a1b      	lsrs	r3, r3, #8
100111be:	7013      	strb	r3, [r2, #0]
100111c0:	23d0      	movs	r3, #208	; 0xd0
100111c2:	4d13      	ldr	r5, [pc, #76]	; (10011210 <gapm_set_dev_config_cmd_handler+0xfc>)
100111c4:	011b      	lsls	r3, r3, #4
100111c6:	802b      	strh	r3, [r5, #0]
100111c8:	2322      	movs	r3, #34	; 0x22
100111ca:	71a3      	strb	r3, [r4, #6]
100111cc:	2300      	movs	r3, #0
100111ce:	212a      	movs	r1, #42	; 0x2a
100111d0:	71e3      	strb	r3, [r4, #7]
100111d2:	1c20      	adds	r0, r4, #0
100111d4:	4b0f      	ldr	r3, [pc, #60]	; (10011214 <gapm_set_dev_config_cmd_handler+0x100>)
100111d6:	80af      	strh	r7, [r5, #4]
100111d8:	4798      	blx	r3
100111da:	1c30      	adds	r0, r6, #0
100111dc:	4b0e      	ldr	r3, [pc, #56]	; (10011218 <gapm_set_dev_config_cmd_handler+0x104>)
100111de:	4798      	blx	r3
100111e0:	7833      	ldrb	r3, [r6, #0]
100111e2:	20e2      	movs	r0, #226	; 0xe2
100111e4:	2b00      	cmp	r3, #0
100111e6:	d106      	bne.n	100111f6 <gapm_set_dev_config_cmd_handler+0xe2>
100111e8:	68ab      	ldr	r3, [r5, #8]
100111ea:	20e2      	movs	r0, #226	; 0xe2
100111ec:	781a      	ldrb	r2, [r3, #0]
100111ee:	785b      	ldrb	r3, [r3, #1]
100111f0:	2a03      	cmp	r2, #3
100111f2:	d100      	bne.n	100111f6 <gapm_set_dev_config_cmd_handler+0xe2>
100111f4:	1c18      	adds	r0, r3, #0
100111f6:	b009      	add	sp, #36	; 0x24
100111f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100111fa:	46c0      	nop			; (mov r8, r8)
100111fc:	1001b3c0 	.word	0x1001b3c0
10011200:	1001b050 	.word	0x1001b050
10011204:	10016223 	.word	0x10016223
10011208:	1001b3cc 	.word	0x1001b3cc
1001120c:	1001b3d2 	.word	0x1001b3d2
10011210:	1001b044 	.word	0x1001b044
10011214:	100104cd 	.word	0x100104cd
10011218:	10010531 	.word	0x10010531

1001121c <gapm_get_dev_config_cmd_handler>:
1001121c:	4684      	mov	ip, r0
1001121e:	4663      	mov	r3, ip
10011220:	b5f0      	push	{r4, r5, r6, r7, lr}
10011222:	b085      	sub	sp, #20
10011224:	9100      	str	r1, [sp, #0]
10011226:	20cf      	movs	r0, #207	; 0xcf
10011228:	2b01      	cmp	r3, #1
1001122a:	d854      	bhi.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
1001122c:	2900      	cmp	r1, #0
1001122e:	d052      	beq.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
10011230:	2200      	movs	r2, #0
10011232:	492a      	ldr	r1, [pc, #168]	; (100112dc <gapm_get_dev_config_cmd_handler+0xc0>)
10011234:	ab02      	add	r3, sp, #8
10011236:	880c      	ldrh	r4, [r1, #0]
10011238:	8809      	ldrh	r1, [r1, #0]
1001123a:	1d9f      	adds	r7, r3, #6
1001123c:	719a      	strb	r2, [r3, #6]
1001123e:	4b28      	ldr	r3, [pc, #160]	; (100112e0 <gapm_get_dev_config_cmd_handler+0xc4>)
10011240:	0a09      	lsrs	r1, r1, #8
10011242:	250d      	movs	r5, #13
10011244:	2606      	movs	r6, #6
10011246:	7159      	strb	r1, [r3, #5]
10011248:	4661      	mov	r1, ip
1001124a:	701e      	strb	r6, [r3, #0]
1001124c:	705d      	strb	r5, [r3, #1]
1001124e:	709d      	strb	r5, [r3, #2]
10011250:	70da      	strb	r2, [r3, #3]
10011252:	711c      	strb	r4, [r3, #4]
10011254:	2901      	cmp	r1, #1
10011256:	d13e      	bne.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
10011258:	21d0      	movs	r1, #208	; 0xd0
1001125a:	4c22      	ldr	r4, [pc, #136]	; (100112e4 <gapm_get_dev_config_cmd_handler+0xc8>)
1001125c:	0109      	lsls	r1, r1, #4
1001125e:	8061      	strh	r1, [r4, #2]
10011260:	4921      	ldr	r1, [pc, #132]	; (100112e8 <gapm_get_dev_config_cmd_handler+0xcc>)
10011262:	71da      	strb	r2, [r3, #7]
10011264:	8021      	strh	r1, [r4, #0]
10011266:	4661      	mov	r1, ip
10011268:	721e      	strb	r6, [r3, #8]
1001126a:	7199      	strb	r1, [r3, #6]
1001126c:	1c18      	adds	r0, r3, #0
1001126e:	2109      	movs	r1, #9
10011270:	4b1e      	ldr	r3, [pc, #120]	; (100112ec <gapm_get_dev_config_cmd_handler+0xd0>)
10011272:	80a5      	strh	r5, [r4, #4]
10011274:	4798      	blx	r3
10011276:	1c38      	adds	r0, r7, #0
10011278:	4b1d      	ldr	r3, [pc, #116]	; (100112f0 <gapm_get_dev_config_cmd_handler+0xd4>)
1001127a:	4798      	blx	r3
1001127c:	783b      	ldrb	r3, [r7, #0]
1001127e:	20e2      	movs	r0, #226	; 0xe2
10011280:	9301      	str	r3, [sp, #4]
10011282:	2b00      	cmp	r3, #0
10011284:	d127      	bne.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
10011286:	8821      	ldrh	r1, [r4, #0]
10011288:	4a1a      	ldr	r2, [pc, #104]	; (100112f4 <gapm_get_dev_config_cmd_handler+0xd8>)
1001128a:	68a7      	ldr	r7, [r4, #8]
1001128c:	3b01      	subs	r3, #1
1001128e:	4291      	cmp	r1, r2
10011290:	d001      	beq.n	10011296 <gapm_get_dev_config_cmd_handler+0x7a>
10011292:	8023      	strh	r3, [r4, #0]
10011294:	e01a      	b.n	100112cc <gapm_get_dev_config_cmd_handler+0xb0>
10011296:	8063      	strh	r3, [r4, #2]
10011298:	9b00      	ldr	r3, [sp, #0]
1001129a:	1c39      	adds	r1, r7, #0
1001129c:	1c58      	adds	r0, r3, #1
1001129e:	1c32      	adds	r2, r6, #0
100112a0:	4b15      	ldr	r3, [pc, #84]	; (100112f8 <gapm_get_dev_config_cmd_handler+0xdc>)
100112a2:	4798      	blx	r3
100112a4:	79bb      	ldrb	r3, [r7, #6]
100112a6:	9a00      	ldr	r2, [sp, #0]
100112a8:	7013      	strb	r3, [r2, #0]
100112aa:	23d0      	movs	r3, #208	; 0xd0
100112ac:	011b      	lsls	r3, r3, #4
100112ae:	8023      	strh	r3, [r4, #0]
100112b0:	ab02      	add	r3, sp, #8
100112b2:	80a5      	strh	r5, [r4, #4]
100112b4:	1ddd      	adds	r5, r3, #7
100112b6:	466b      	mov	r3, sp
100112b8:	791b      	ldrb	r3, [r3, #4]
100112ba:	1c28      	adds	r0, r5, #0
100112bc:	702b      	strb	r3, [r5, #0]
100112be:	4b0c      	ldr	r3, [pc, #48]	; (100112f0 <gapm_get_dev_config_cmd_handler+0xd4>)
100112c0:	4798      	blx	r3
100112c2:	782b      	ldrb	r3, [r5, #0]
100112c4:	20d0      	movs	r0, #208	; 0xd0
100112c6:	2b00      	cmp	r3, #0
100112c8:	d105      	bne.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
100112ca:	68a7      	ldr	r7, [r4, #8]
100112cc:	783b      	ldrb	r3, [r7, #0]
100112ce:	7878      	ldrb	r0, [r7, #1]
100112d0:	2b06      	cmp	r3, #6
100112d2:	d000      	beq.n	100112d6 <gapm_get_dev_config_cmd_handler+0xba>
100112d4:	20e2      	movs	r0, #226	; 0xe2
100112d6:	b005      	add	sp, #20
100112d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112da:	46c0      	nop			; (mov r8, r8)
100112dc:	1001b050 	.word	0x1001b050
100112e0:	1001b3c0 	.word	0x1001b3c0
100112e4:	1001b044 	.word	0x1001b044
100112e8:	00000d08 	.word	0x00000d08
100112ec:	100104cd 	.word	0x100104cd
100112f0:	10010531 	.word	0x10010531
100112f4:	0000ffff 	.word	0x0000ffff
100112f8:	10016223 	.word	0x10016223

100112fc <gapm_cancel_cmd_handler>:
100112fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
100112fe:	4916      	ldr	r1, [pc, #88]	; (10011358 <gapm_cancel_cmd_handler+0x5c>)
10011300:	4816      	ldr	r0, [pc, #88]	; (1001135c <gapm_cancel_cmd_handler+0x60>)
10011302:	880c      	ldrh	r4, [r1, #0]
10011304:	8809      	ldrh	r1, [r1, #0]
10011306:	466b      	mov	r3, sp
10011308:	0a09      	lsrs	r1, r1, #8
1001130a:	7141      	strb	r1, [r0, #5]
1001130c:	2102      	movs	r1, #2
1001130e:	2203      	movs	r2, #3
10011310:	7201      	strb	r1, [r0, #8]
10011312:	21d0      	movs	r1, #208	; 0xd0
10011314:	1ddd      	adds	r5, r3, #7
10011316:	2300      	movs	r3, #0
10011318:	7104      	strb	r4, [r0, #4]
1001131a:	4c11      	ldr	r4, [pc, #68]	; (10011360 <gapm_cancel_cmd_handler+0x64>)
1001131c:	7002      	strb	r2, [r0, #0]
1001131e:	0109      	lsls	r1, r1, #4
10011320:	320a      	adds	r2, #10
10011322:	702b      	strb	r3, [r5, #0]
10011324:	7042      	strb	r2, [r0, #1]
10011326:	7082      	strb	r2, [r0, #2]
10011328:	70c3      	strb	r3, [r0, #3]
1001132a:	8021      	strh	r1, [r4, #0]
1001132c:	80a2      	strh	r2, [r4, #4]
1001132e:	71c3      	strb	r3, [r0, #7]
10011330:	3a0c      	subs	r2, #12
10011332:	2109      	movs	r1, #9
10011334:	4b0b      	ldr	r3, [pc, #44]	; (10011364 <gapm_cancel_cmd_handler+0x68>)
10011336:	7182      	strb	r2, [r0, #6]
10011338:	4798      	blx	r3
1001133a:	1c28      	adds	r0, r5, #0
1001133c:	4b0a      	ldr	r3, [pc, #40]	; (10011368 <gapm_cancel_cmd_handler+0x6c>)
1001133e:	4798      	blx	r3
10011340:	7828      	ldrb	r0, [r5, #0]
10011342:	2800      	cmp	r0, #0
10011344:	d001      	beq.n	1001134a <gapm_cancel_cmd_handler+0x4e>
10011346:	20e2      	movs	r0, #226	; 0xe2
10011348:	e004      	b.n	10011354 <gapm_cancel_cmd_handler+0x58>
1001134a:	68a3      	ldr	r3, [r4, #8]
1001134c:	785b      	ldrb	r3, [r3, #1]
1001134e:	2b44      	cmp	r3, #68	; 0x44
10011350:	d000      	beq.n	10011354 <gapm_cancel_cmd_handler+0x58>
10011352:	1c18      	adds	r0, r3, #0
10011354:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10011356:	46c0      	nop			; (mov r8, r8)
10011358:	1001b050 	.word	0x1001b050
1001135c:	1001b3c0 	.word	0x1001b3c0
10011360:	1001b044 	.word	0x1001b044
10011364:	100104cd 	.word	0x100104cd
10011368:	10010531 	.word	0x10010531

1001136c <gapm_dev_bdaddr_ind_handler>:
1001136c:	b538      	push	{r3, r4, r5, lr}
1001136e:	1c05      	adds	r5, r0, #0
10011370:	1c0c      	adds	r4, r1, #0
10011372:	1c48      	adds	r0, r1, #1
10011374:	2206      	movs	r2, #6
10011376:	1c29      	adds	r1, r5, #0
10011378:	4b02      	ldr	r3, [pc, #8]	; (10011384 <gapm_dev_bdaddr_ind_handler+0x18>)
1001137a:	4798      	blx	r3
1001137c:	79ab      	ldrb	r3, [r5, #6]
1001137e:	2000      	movs	r0, #0
10011380:	7023      	strb	r3, [r4, #0]
10011382:	bd38      	pop	{r3, r4, r5, pc}
10011384:	10016223 	.word	0x10016223

10011388 <gapm_cmp_evt>:
10011388:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001138a:	7803      	ldrb	r3, [r0, #0]
1001138c:	7845      	ldrb	r5, [r0, #1]
1001138e:	3b0c      	subs	r3, #12
10011390:	1e18      	subs	r0, r3, #0
10011392:	280b      	cmp	r0, #11
10011394:	d900      	bls.n	10011398 <gapm_cmp_evt+0x10>
10011396:	e08d      	b.n	100114b4 <gapm_cmp_evt+0x12c>
10011398:	1c0c      	adds	r4, r1, #0
1001139a:	f001 ff1d 	bl	100131d8 <__gnu_thumb1_case_uqi>
1001139e:	1952      	.short	0x1952
100113a0:	068b1919 	.word	0x068b1919
100113a4:	8b595906 	.word	0x8b595906
100113a8:	0d8b      	.short	0x0d8b
100113aa:	2300      	movs	r3, #0
100113ac:	2d45      	cmp	r5, #69	; 0x45
100113ae:	d000      	beq.n	100113b2 <gapm_cmp_evt+0x2a>
100113b0:	1c2b      	adds	r3, r5, #0
100113b2:	7023      	strb	r3, [r4, #0]
100113b4:	2002      	movs	r0, #2
100113b6:	e07e      	b.n	100114b6 <gapm_cmp_evt+0x12e>
100113b8:	203b      	movs	r0, #59	; 0x3b
100113ba:	2d00      	cmp	r5, #0
100113bc:	d100      	bne.n	100113c0 <gapm_cmp_evt+0x38>
100113be:	e07a      	b.n	100114b6 <gapm_cmp_evt+0x12e>
100113c0:	700d      	strb	r5, [r1, #0]
100113c2:	1c48      	adds	r0, r1, #1
100113c4:	2210      	movs	r2, #16
100113c6:	2100      	movs	r1, #0
100113c8:	4b3b      	ldr	r3, [pc, #236]	; (100114b8 <gapm_cmp_evt+0x130>)
100113ca:	4798      	blx	r3
100113cc:	200f      	movs	r0, #15
100113ce:	e072      	b.n	100114b6 <gapm_cmp_evt+0x12e>
100113d0:	2d00      	cmp	r5, #0
100113d2:	d134      	bne.n	1001143e <gapm_cmp_evt+0xb6>
100113d4:	4b39      	ldr	r3, [pc, #228]	; (100114bc <gapm_cmp_evt+0x134>)
100113d6:	4798      	blx	r3
100113d8:	1e43      	subs	r3, r0, #1
100113da:	b2db      	uxtb	r3, r3
100113dc:	1c28      	adds	r0, r5, #0
100113de:	2b06      	cmp	r3, #6
100113e0:	d869      	bhi.n	100114b6 <gapm_cmp_evt+0x12e>
100113e2:	466b      	mov	r3, sp
100113e4:	4e36      	ldr	r6, [pc, #216]	; (100114c0 <gapm_cmp_evt+0x138>)
100113e6:	1dd9      	adds	r1, r3, #7
100113e8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100113ea:	4b36      	ldr	r3, [pc, #216]	; (100114c4 <gapm_cmp_evt+0x13c>)
100113ec:	4798      	blx	r3
100113ee:	2312      	movs	r3, #18
100113f0:	4358      	muls	r0, r3
100113f2:	4935      	ldr	r1, [pc, #212]	; (100114c8 <gapm_cmp_evt+0x140>)
100113f4:	1809      	adds	r1, r1, r0
100113f6:	1c0b      	adds	r3, r1, #0
100113f8:	894a      	ldrh	r2, [r1, #10]
100113fa:	3308      	adds	r3, #8
100113fc:	8122      	strh	r2, [r4, #8]
100113fe:	784f      	ldrb	r7, [r1, #1]
10011400:	72a5      	strb	r5, [r4, #10]
10011402:	7027      	strb	r7, [r4, #0]
10011404:	898a      	ldrh	r2, [r1, #12]
10011406:	1c60      	adds	r0, r4, #1
10011408:	81a2      	strh	r2, [r4, #12]
1001140a:	88db      	ldrh	r3, [r3, #6]
1001140c:	3102      	adds	r1, #2
1001140e:	81e3      	strh	r3, [r4, #14]
10011410:	89cb      	ldrh	r3, [r1, #14]
10011412:	2206      	movs	r2, #6
10011414:	8223      	strh	r3, [r4, #16]
10011416:	4b2d      	ldr	r3, [pc, #180]	; (100114cc <gapm_cmp_evt+0x144>)
10011418:	4798      	blx	r3
1001141a:	2f00      	cmp	r7, #0
1001141c:	d00a      	beq.n	10011434 <gapm_cmp_evt+0xac>
1001141e:	79a3      	ldrb	r3, [r4, #6]
10011420:	223f      	movs	r2, #63	; 0x3f
10011422:	1c19      	adds	r1, r3, #0
10011424:	3501      	adds	r5, #1
10011426:	4391      	bics	r1, r2
10011428:	29c0      	cmp	r1, #192	; 0xc0
1001142a:	d003      	beq.n	10011434 <gapm_cmp_evt+0xac>
1001142c:	065b      	lsls	r3, r3, #25
1001142e:	0fdb      	lsrs	r3, r3, #31
10011430:	3502      	adds	r5, #2
10011432:	1aed      	subs	r5, r5, r3
10011434:	2301      	movs	r3, #1
10011436:	425b      	negs	r3, r3
10011438:	7025      	strb	r5, [r4, #0]
1001143a:	85b3      	strh	r3, [r6, #44]	; 0x2c
1001143c:	e038      	b.n	100114b0 <gapm_cmp_evt+0x128>
1001143e:	700d      	strb	r5, [r1, #0]
10011440:	e004      	b.n	1001144c <gapm_cmp_evt+0xc4>
10011442:	2300      	movs	r3, #0
10011444:	2d45      	cmp	r5, #69	; 0x45
10011446:	d000      	beq.n	1001144a <gapm_cmp_evt+0xc2>
10011448:	1c2b      	adds	r3, r5, #0
1001144a:	7023      	strb	r3, [r4, #0]
1001144c:	2003      	movs	r0, #3
1001144e:	e032      	b.n	100114b6 <gapm_cmp_evt+0x12e>
10011450:	4e1b      	ldr	r6, [pc, #108]	; (100114c0 <gapm_cmp_evt+0x138>)
10011452:	2100      	movs	r1, #0
10011454:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10011456:	4b1b      	ldr	r3, [pc, #108]	; (100114c4 <gapm_cmp_evt+0x13c>)
10011458:	4798      	blx	r3
1001145a:	2807      	cmp	r0, #7
1001145c:	d818      	bhi.n	10011490 <gapm_cmp_evt+0x108>
1001145e:	2301      	movs	r3, #1
10011460:	425b      	negs	r3, r3
10011462:	85b3      	strh	r3, [r6, #44]	; 0x2c
10011464:	3313      	adds	r3, #19
10011466:	4358      	muls	r0, r3
10011468:	4917      	ldr	r1, [pc, #92]	; (100114c8 <gapm_cmp_evt+0x140>)
1001146a:	1809      	adds	r1, r1, r0
1001146c:	1c0b      	adds	r3, r1, #0
1001146e:	894a      	ldrh	r2, [r1, #10]
10011470:	3308      	adds	r3, #8
10011472:	8122      	strh	r2, [r4, #8]
10011474:	784a      	ldrb	r2, [r1, #1]
10011476:	72a5      	strb	r5, [r4, #10]
10011478:	7022      	strb	r2, [r4, #0]
1001147a:	898a      	ldrh	r2, [r1, #12]
1001147c:	1c60      	adds	r0, r4, #1
1001147e:	81a2      	strh	r2, [r4, #12]
10011480:	88db      	ldrh	r3, [r3, #6]
10011482:	3102      	adds	r1, #2
10011484:	81e3      	strh	r3, [r4, #14]
10011486:	89cb      	ldrh	r3, [r1, #14]
10011488:	2206      	movs	r2, #6
1001148a:	8223      	strh	r3, [r4, #16]
1001148c:	4b0f      	ldr	r3, [pc, #60]	; (100114cc <gapm_cmp_evt+0x144>)
1001148e:	4798      	blx	r3
10011490:	2200      	movs	r2, #0
10011492:	7823      	ldrb	r3, [r4, #0]
10011494:	4293      	cmp	r3, r2
10011496:	d00a      	beq.n	100114ae <gapm_cmp_evt+0x126>
10011498:	79a3      	ldrb	r3, [r4, #6]
1001149a:	323f      	adds	r2, #63	; 0x3f
1001149c:	1c19      	adds	r1, r3, #0
1001149e:	4391      	bics	r1, r2
100114a0:	3a3e      	subs	r2, #62	; 0x3e
100114a2:	29c0      	cmp	r1, #192	; 0xc0
100114a4:	d003      	beq.n	100114ae <gapm_cmp_evt+0x126>
100114a6:	065b      	lsls	r3, r3, #25
100114a8:	0fdb      	lsrs	r3, r3, #31
100114aa:	3202      	adds	r2, #2
100114ac:	1ad2      	subs	r2, r2, r3
100114ae:	7022      	strb	r2, [r4, #0]
100114b0:	2005      	movs	r0, #5
100114b2:	e000      	b.n	100114b6 <gapm_cmp_evt+0x12e>
100114b4:	2000      	movs	r0, #0
100114b6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100114b8:	10016235 	.word	0x10016235
100114bc:	100106d9 	.word	0x100106d9
100114c0:	1001b0e2 	.word	0x1001b0e2
100114c4:	1001069d 	.word	0x1001069d
100114c8:	1001b052 	.word	0x1001b052
100114cc:	10016223 	.word	0x10016223

100114d0 <gapm_start_adv_cmd_handler>:
100114d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100114d2:	b089      	sub	sp, #36	; 0x24
100114d4:	9303      	str	r3, [sp, #12]
100114d6:	ab0e      	add	r3, sp, #56	; 0x38
100114d8:	9102      	str	r1, [sp, #8]
100114da:	cb02      	ldmia	r3!, {r1}
100114dc:	aa08      	add	r2, sp, #32
100114de:	881b      	ldrh	r3, [r3, #0]
100114e0:	4e3c      	ldr	r6, [pc, #240]	; (100115d4 <gapm_start_adv_cmd_handler+0x104>)
100114e2:	9300      	str	r3, [sp, #0]
100114e4:	ab10      	add	r3, sp, #64	; 0x40
100114e6:	881b      	ldrh	r3, [r3, #0]
100114e8:	240d      	movs	r4, #13
100114ea:	469c      	mov	ip, r3
100114ec:	ab11      	add	r3, sp, #68	; 0x44
100114ee:	781b      	ldrb	r3, [r3, #0]
100114f0:	9304      	str	r3, [sp, #16]
100114f2:	ab12      	add	r3, sp, #72	; 0x48
100114f4:	781b      	ldrb	r3, [r3, #0]
100114f6:	9305      	str	r3, [sp, #20]
100114f8:	ab13      	add	r3, sp, #76	; 0x4c
100114fa:	781b      	ldrb	r3, [r3, #0]
100114fc:	9306      	str	r3, [sp, #24]
100114fe:	ab14      	add	r3, sp, #80	; 0x50
10011500:	781b      	ldrb	r3, [r3, #0]
10011502:	9301      	str	r3, [sp, #4]
10011504:	2319      	movs	r3, #25
10011506:	189b      	adds	r3, r3, r2
10011508:	7fdd      	ldrb	r5, [r3, #31]
1001150a:	ab18      	add	r3, sp, #96	; 0x60
1001150c:	881f      	ldrh	r7, [r3, #0]
1001150e:	ab19      	add	r3, sp, #100	; 0x64
10011510:	781b      	ldrb	r3, [r3, #0]
10011512:	8832      	ldrh	r2, [r6, #0]
10011514:	9307      	str	r3, [sp, #28]
10011516:	4b30      	ldr	r3, [pc, #192]	; (100115d8 <gapm_start_adv_cmd_handler+0x108>)
10011518:	8836      	ldrh	r6, [r6, #0]
1001151a:	711a      	strb	r2, [r3, #4]
1001151c:	466a      	mov	r2, sp
1001151e:	7a12      	ldrb	r2, [r2, #8]
10011520:	701c      	strb	r4, [r3, #0]
10011522:	705c      	strb	r4, [r3, #1]
10011524:	709c      	strb	r4, [r3, #2]
10011526:	725a      	strb	r2, [r3, #9]
10011528:	2400      	movs	r4, #0
1001152a:	466a      	mov	r2, sp
1001152c:	0a36      	lsrs	r6, r6, #8
1001152e:	70dc      	strb	r4, [r3, #3]
10011530:	7218      	strb	r0, [r3, #8]
10011532:	729c      	strb	r4, [r3, #10]
10011534:	715e      	strb	r6, [r3, #5]
10011536:	72dc      	strb	r4, [r3, #11]
10011538:	7812      	ldrb	r2, [r2, #0]
1001153a:	380e      	subs	r0, #14
1001153c:	731a      	strb	r2, [r3, #12]
1001153e:	9a00      	ldr	r2, [sp, #0]
10011540:	0a14      	lsrs	r4, r2, #8
10011542:	4662      	mov	r2, ip
10011544:	739a      	strb	r2, [r3, #14]
10011546:	4662      	mov	r2, ip
10011548:	735c      	strb	r4, [r3, #13]
1001154a:	0a14      	lsrs	r4, r2, #8
1001154c:	466a      	mov	r2, sp
1001154e:	7c12      	ldrb	r2, [r2, #16]
10011550:	73dc      	strb	r4, [r3, #15]
10011552:	741a      	strb	r2, [r3, #16]
10011554:	1c1c      	adds	r4, r3, #0
10011556:	2801      	cmp	r0, #1
10011558:	d809      	bhi.n	1001156e <gapm_start_adv_cmd_handler+0x9e>
1001155a:	2900      	cmp	r1, #0
1001155c:	d003      	beq.n	10011566 <gapm_start_adv_cmd_handler+0x96>
1001155e:	481f      	ldr	r0, [pc, #124]	; (100115dc <gapm_start_adv_cmd_handler+0x10c>)
10011560:	2206      	movs	r2, #6
10011562:	4b1f      	ldr	r3, [pc, #124]	; (100115e0 <gapm_start_adv_cmd_handler+0x110>)
10011564:	4798      	blx	r3
10011566:	466b      	mov	r3, sp
10011568:	7b1b      	ldrb	r3, [r3, #12]
1001156a:	75e3      	strb	r3, [r4, #23]
1001156c:	e014      	b.n	10011598 <gapm_start_adv_cmd_handler+0xc8>
1001156e:	466b      	mov	r3, sp
10011570:	7d1b      	ldrb	r3, [r3, #20]
10011572:	9915      	ldr	r1, [sp, #84]	; 0x54
10011574:	7463      	strb	r3, [r4, #17]
10011576:	466b      	mov	r3, sp
10011578:	7e1b      	ldrb	r3, [r3, #24]
1001157a:	9a01      	ldr	r2, [sp, #4]
1001157c:	74a3      	strb	r3, [r4, #18]
1001157e:	466b      	mov	r3, sp
10011580:	791b      	ldrb	r3, [r3, #4]
10011582:	4818      	ldr	r0, [pc, #96]	; (100115e4 <gapm_start_adv_cmd_handler+0x114>)
10011584:	4e16      	ldr	r6, [pc, #88]	; (100115e0 <gapm_start_adv_cmd_handler+0x110>)
10011586:	74e3      	strb	r3, [r4, #19]
10011588:	47b0      	blx	r6
1001158a:	1c23      	adds	r3, r4, #0
1001158c:	4816      	ldr	r0, [pc, #88]	; (100115e8 <gapm_start_adv_cmd_handler+0x118>)
1001158e:	3330      	adds	r3, #48	; 0x30
10011590:	9917      	ldr	r1, [sp, #92]	; 0x5c
10011592:	1c2a      	adds	r2, r5, #0
10011594:	701d      	strb	r5, [r3, #0]
10011596:	47b0      	blx	r6
10011598:	1c22      	adds	r2, r4, #0
1001159a:	23a5      	movs	r3, #165	; 0xa5
1001159c:	3250      	adds	r2, #80	; 0x50
1001159e:	7013      	strb	r3, [r2, #0]
100115a0:	1c22      	adds	r2, r4, #0
100115a2:	3251      	adds	r2, #81	; 0x51
100115a4:	7013      	strb	r3, [r2, #0]
100115a6:	1c23      	adds	r3, r4, #0
100115a8:	1c22      	adds	r2, r4, #0
100115aa:	3352      	adds	r3, #82	; 0x52
100115ac:	701f      	strb	r7, [r3, #0]
100115ae:	3253      	adds	r2, #83	; 0x53
100115b0:	0a3b      	lsrs	r3, r7, #8
100115b2:	7013      	strb	r3, [r2, #0]
100115b4:	466a      	mov	r2, sp
100115b6:	1c23      	adds	r3, r4, #0
100115b8:	7f12      	ldrb	r2, [r2, #28]
100115ba:	3354      	adds	r3, #84	; 0x54
100115bc:	701a      	strb	r2, [r3, #0]
100115be:	234d      	movs	r3, #77	; 0x4d
100115c0:	2500      	movs	r5, #0
100115c2:	71a3      	strb	r3, [r4, #6]
100115c4:	1c20      	adds	r0, r4, #0
100115c6:	2155      	movs	r1, #85	; 0x55
100115c8:	4b08      	ldr	r3, [pc, #32]	; (100115ec <gapm_start_adv_cmd_handler+0x11c>)
100115ca:	71e5      	strb	r5, [r4, #7]
100115cc:	4798      	blx	r3
100115ce:	1c28      	adds	r0, r5, #0
100115d0:	b009      	add	sp, #36	; 0x24
100115d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115d4:	1001b050 	.word	0x1001b050
100115d8:	1001b3c0 	.word	0x1001b3c0
100115dc:	1001b3d1 	.word	0x1001b3d1
100115e0:	10016223 	.word	0x10016223
100115e4:	1001b3d4 	.word	0x1001b3d4
100115e8:	1001b3f1 	.word	0x1001b3f1
100115ec:	100104cd 	.word	0x100104cd

100115f0 <get_gap_local_addr_type>:
100115f0:	4b04      	ldr	r3, [pc, #16]	; (10011604 <get_gap_local_addr_type+0x14>)
100115f2:	2001      	movs	r0, #1
100115f4:	791b      	ldrb	r3, [r3, #4]
100115f6:	2b02      	cmp	r3, #2
100115f8:	d003      	beq.n	10011602 <get_gap_local_addr_type+0x12>
100115fa:	3b03      	subs	r3, #3
100115fc:	4258      	negs	r0, r3
100115fe:	4158      	adcs	r0, r3
10011600:	0040      	lsls	r0, r0, #1
10011602:	4770      	bx	lr
10011604:	1001b0e2 	.word	0x1001b0e2

10011608 <gapm_adv_report_evt_handler>:
10011608:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001160a:	7843      	ldrb	r3, [r0, #1]
1001160c:	1c05      	adds	r5, r0, #0
1001160e:	9301      	str	r3, [sp, #4]
10011610:	466b      	mov	r3, sp
10011612:	1c0c      	adds	r4, r1, #0
10011614:	791b      	ldrb	r3, [r3, #4]
10011616:	7806      	ldrb	r6, [r0, #0]
10011618:	2206      	movs	r2, #6
1001161a:	704b      	strb	r3, [r1, #1]
1001161c:	1c88      	adds	r0, r1, #2
1001161e:	4f1b      	ldr	r7, [pc, #108]	; (1001168c <gapm_adv_report_evt_handler+0x84>)
10011620:	1ca9      	adds	r1, r5, #2
10011622:	47b8      	blx	r7
10011624:	1c20      	adds	r0, r4, #0
10011626:	1c29      	adds	r1, r5, #0
10011628:	7a2a      	ldrb	r2, [r5, #8]
1001162a:	3008      	adds	r0, #8
1001162c:	77c2      	strb	r2, [r0, #31]
1001162e:	3109      	adds	r1, #9
10011630:	3528      	adds	r5, #40	; 0x28
10011632:	47b8      	blx	r7
10011634:	782b      	ldrb	r3, [r5, #0]
10011636:	b25a      	sxtb	r2, r3
10011638:	2a00      	cmp	r2, #0
1001163a:	da01      	bge.n	10011640 <gapm_adv_report_evt_handler+0x38>
1001163c:	3301      	adds	r3, #1
1001163e:	b2db      	uxtb	r3, r3
10011640:	1c22      	adds	r2, r4, #0
10011642:	3228      	adds	r2, #40	; 0x28
10011644:	7013      	strb	r3, [r2, #0]
10011646:	2200      	movs	r2, #0
10011648:	9b01      	ldr	r3, [sp, #4]
1001164a:	4293      	cmp	r3, r2
1001164c:	d00a      	beq.n	10011664 <gapm_adv_report_evt_handler+0x5c>
1001164e:	79e3      	ldrb	r3, [r4, #7]
10011650:	323f      	adds	r2, #63	; 0x3f
10011652:	1c19      	adds	r1, r3, #0
10011654:	4391      	bics	r1, r2
10011656:	3a3e      	subs	r2, #62	; 0x3e
10011658:	29c0      	cmp	r1, #192	; 0xc0
1001165a:	d003      	beq.n	10011664 <gapm_adv_report_evt_handler+0x5c>
1001165c:	065b      	lsls	r3, r3, #25
1001165e:	0fdb      	lsrs	r3, r3, #31
10011660:	3202      	adds	r2, #2
10011662:	1ad2      	subs	r2, r2, r3
10011664:	7062      	strb	r2, [r4, #1]
10011666:	2e04      	cmp	r6, #4
10011668:	d80f      	bhi.n	1001168a <gapm_adv_report_evt_handler+0x82>
1001166a:	1c30      	adds	r0, r6, #0
1001166c:	f001 fdb4 	bl	100131d8 <__gnu_thumb1_case_uqi>
10011670:	09070503 	.word	0x09070503
10011674:	0b          	.byte	0x0b
10011675:	00          	.byte	0x00
10011676:	2300      	movs	r3, #0
10011678:	e006      	b.n	10011688 <gapm_adv_report_evt_handler+0x80>
1001167a:	2301      	movs	r3, #1
1001167c:	e004      	b.n	10011688 <gapm_adv_report_evt_handler+0x80>
1001167e:	2302      	movs	r3, #2
10011680:	e002      	b.n	10011688 <gapm_adv_report_evt_handler+0x80>
10011682:	2303      	movs	r3, #3
10011684:	e000      	b.n	10011688 <gapm_adv_report_evt_handler+0x80>
10011686:	2305      	movs	r3, #5
10011688:	7023      	strb	r3, [r4, #0]
1001168a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1001168c:	10016223 	.word	0x10016223

10011690 <gapm_resolv_addr_cmd_handler>:
10011690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011692:	2314      	movs	r3, #20
10011694:	4c12      	ldr	r4, [pc, #72]	; (100116e0 <gapm_resolv_addr_cmd_handler+0x50>)
10011696:	1c17      	adds	r7, r2, #0
10011698:	7023      	strb	r3, [r4, #0]
1001169a:	3b07      	subs	r3, #7
1001169c:	7063      	strb	r3, [r4, #1]
1001169e:	70a3      	strb	r3, [r4, #2]
100116a0:	2300      	movs	r3, #0
100116a2:	70e3      	strb	r3, [r4, #3]
100116a4:	4b0f      	ldr	r3, [pc, #60]	; (100116e4 <gapm_resolv_addr_cmd_handler+0x54>)
100116a6:	1c05      	adds	r5, r0, #0
100116a8:	881a      	ldrh	r2, [r3, #0]
100116aa:	881b      	ldrh	r3, [r3, #0]
100116ac:	4e0e      	ldr	r6, [pc, #56]	; (100116e8 <gapm_resolv_addr_cmd_handler+0x58>)
100116ae:	0a1b      	lsrs	r3, r3, #8
100116b0:	7163      	strb	r3, [r4, #5]
100116b2:	2317      	movs	r3, #23
100116b4:	012d      	lsls	r5, r5, #4
100116b6:	7122      	strb	r2, [r4, #4]
100116b8:	7260      	strb	r0, [r4, #9]
100116ba:	2206      	movs	r2, #6
100116bc:	480b      	ldr	r0, [pc, #44]	; (100116ec <gapm_resolv_addr_cmd_handler+0x5c>)
100116be:	7223      	strb	r3, [r4, #8]
100116c0:	47b0      	blx	r6
100116c2:	1c39      	adds	r1, r7, #0
100116c4:	1c2a      	adds	r2, r5, #0
100116c6:	480a      	ldr	r0, [pc, #40]	; (100116f0 <gapm_resolv_addr_cmd_handler+0x60>)
100116c8:	47b0      	blx	r6
100116ca:	1c29      	adds	r1, r5, #0
100116cc:	3110      	adds	r1, #16
100116ce:	1c0b      	adds	r3, r1, #0
100116d0:	3b08      	subs	r3, #8
100116d2:	71a3      	strb	r3, [r4, #6]
100116d4:	121b      	asrs	r3, r3, #8
100116d6:	71e3      	strb	r3, [r4, #7]
100116d8:	1c20      	adds	r0, r4, #0
100116da:	4b06      	ldr	r3, [pc, #24]	; (100116f4 <gapm_resolv_addr_cmd_handler+0x64>)
100116dc:	4798      	blx	r3
100116de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100116e0:	1001b3c0 	.word	0x1001b3c0
100116e4:	1001b050 	.word	0x1001b050
100116e8:	10016223 	.word	0x10016223
100116ec:	1001b3ca 	.word	0x1001b3ca
100116f0:	1001b3d0 	.word	0x1001b3d0
100116f4:	100104cd 	.word	0x100104cd

100116f8 <gapm_addr_solved_ind_handler>:
100116f8:	b570      	push	{r4, r5, r6, lr}
100116fa:	1c04      	adds	r4, r0, #0
100116fc:	1c08      	adds	r0, r1, #0
100116fe:	1c0d      	adds	r5, r1, #0
10011700:	4e05      	ldr	r6, [pc, #20]	; (10011718 <gapm_addr_solved_ind_handler+0x20>)
10011702:	1c21      	adds	r1, r4, #0
10011704:	2206      	movs	r2, #6
10011706:	3011      	adds	r0, #17
10011708:	47b0      	blx	r6
1001170a:	1c68      	adds	r0, r5, #1
1001170c:	1da1      	adds	r1, r4, #6
1001170e:	2210      	movs	r2, #16
10011710:	47b0      	blx	r6
10011712:	2300      	movs	r3, #0
10011714:	702b      	strb	r3, [r5, #0]
10011716:	bd70      	pop	{r4, r5, r6, pc}
10011718:	10016223 	.word	0x10016223

1001171c <gapm_profile_added_ind_handler>:
1001171c:	b510      	push	{r4, lr}
1001171e:	7843      	ldrb	r3, [r0, #1]
10011720:	7902      	ldrb	r2, [r0, #4]
10011722:	7944      	ldrb	r4, [r0, #5]
10011724:	7800      	ldrb	r0, [r0, #0]
10011726:	021b      	lsls	r3, r3, #8
10011728:	4303      	orrs	r3, r0
1001172a:	2b1b      	cmp	r3, #27
1001172c:	d104      	bne.n	10011738 <gapm_profile_added_ind_handler+0x1c>
1001172e:	2300      	movs	r3, #0
10011730:	700b      	strb	r3, [r1, #0]
10011732:	0223      	lsls	r3, r4, #8
10011734:	4313      	orrs	r3, r2
10011736:	804b      	strh	r3, [r1, #2]
10011738:	203b      	movs	r0, #59	; 0x3b
1001173a:	bd10      	pop	{r4, pc}

1001173c <gattc_read_req_ind_parser>:
1001173c:	7843      	ldrb	r3, [r0, #1]
1001173e:	7802      	ldrb	r2, [r0, #0]
10011740:	021b      	lsls	r3, r3, #8
10011742:	4313      	orrs	r3, r2
10011744:	804b      	strh	r3, [r1, #2]
10011746:	4770      	bx	lr

10011748 <gattc_write_req_ind_parser>:
10011748:	b508      	push	{r3, lr}
1001174a:	1c13      	adds	r3, r2, #0
1001174c:	0a00      	lsrs	r0, r0, #8
1001174e:	8010      	strh	r0, [r2, #0]
10011750:	784a      	ldrb	r2, [r1, #1]
10011752:	7808      	ldrb	r0, [r1, #0]
10011754:	0212      	lsls	r2, r2, #8
10011756:	4302      	orrs	r2, r0
10011758:	805a      	strh	r2, [r3, #2]
1001175a:	78ca      	ldrb	r2, [r1, #3]
1001175c:	7888      	ldrb	r0, [r1, #2]
1001175e:	0212      	lsls	r2, r2, #8
10011760:	4302      	orrs	r2, r0
10011762:	809a      	strh	r2, [r3, #4]
10011764:	794a      	ldrb	r2, [r1, #5]
10011766:	7908      	ldrb	r0, [r1, #4]
10011768:	0212      	lsls	r2, r2, #8
1001176a:	4302      	orrs	r2, r0
1001176c:	80da      	strh	r2, [r3, #6]
1001176e:	3308      	adds	r3, #8
10011770:	1c18      	adds	r0, r3, #0
10011772:	3106      	adds	r1, #6
10011774:	4b01      	ldr	r3, [pc, #4]	; (1001177c <gattc_write_req_ind_parser+0x34>)
10011776:	4798      	blx	r3
10011778:	bd08      	pop	{r3, pc}
1001177a:	46c0      	nop			; (mov r8, r8)
1001177c:	10016223 	.word	0x10016223

10011780 <gattc_att_info_req_parser>:
10011780:	7843      	ldrb	r3, [r0, #1]
10011782:	7802      	ldrb	r2, [r0, #0]
10011784:	021b      	lsls	r3, r3, #8
10011786:	4313      	orrs	r3, r2
10011788:	800b      	strh	r3, [r1, #0]
1001178a:	4770      	bx	lr

1001178c <gattc_read_cfm>:
1001178c:	b538      	push	{r3, r4, r5, lr}
1001178e:	2514      	movs	r5, #20
10011790:	1c1c      	adds	r4, r3, #0
10011792:	4b14      	ldr	r3, [pc, #80]	; (100117e4 <gattc_read_cfm+0x58>)
10011794:	70d9      	strb	r1, [r3, #3]
10011796:	4914      	ldr	r1, [pc, #80]	; (100117e8 <gattc_read_cfm+0x5c>)
10011798:	701d      	strb	r5, [r3, #0]
1001179a:	3d08      	subs	r5, #8
1001179c:	705d      	strb	r5, [r3, #1]
1001179e:	709d      	strb	r5, [r3, #2]
100117a0:	880d      	ldrh	r5, [r1, #0]
100117a2:	8809      	ldrh	r1, [r1, #0]
100117a4:	7218      	strb	r0, [r3, #8]
100117a6:	0a09      	lsrs	r1, r1, #8
100117a8:	7159      	strb	r1, [r3, #5]
100117aa:	0a00      	lsrs	r0, r0, #8
100117ac:	0a21      	lsrs	r1, r4, #8
100117ae:	711d      	strb	r5, [r3, #4]
100117b0:	7258      	strb	r0, [r3, #9]
100117b2:	729c      	strb	r4, [r3, #10]
100117b4:	72d9      	strb	r1, [r3, #11]
100117b6:	731a      	strb	r2, [r3, #12]
100117b8:	1c1d      	adds	r5, r3, #0
100117ba:	2c00      	cmp	r4, #0
100117bc:	d007      	beq.n	100117ce <gattc_read_cfm+0x42>
100117be:	9904      	ldr	r1, [sp, #16]
100117c0:	1c22      	adds	r2, r4, #0
100117c2:	480a      	ldr	r0, [pc, #40]	; (100117ec <gattc_read_cfm+0x60>)
100117c4:	4b0a      	ldr	r3, [pc, #40]	; (100117f0 <gattc_read_cfm+0x64>)
100117c6:	340d      	adds	r4, #13
100117c8:	4798      	blx	r3
100117ca:	b2a1      	uxth	r1, r4
100117cc:	e001      	b.n	100117d2 <gattc_read_cfm+0x46>
100117ce:	210e      	movs	r1, #14
100117d0:	735c      	strb	r4, [r3, #13]
100117d2:	1c0b      	adds	r3, r1, #0
100117d4:	3b08      	subs	r3, #8
100117d6:	71ab      	strb	r3, [r5, #6]
100117d8:	121b      	asrs	r3, r3, #8
100117da:	71eb      	strb	r3, [r5, #7]
100117dc:	1c28      	adds	r0, r5, #0
100117de:	4b05      	ldr	r3, [pc, #20]	; (100117f4 <gattc_read_cfm+0x68>)
100117e0:	4798      	blx	r3
100117e2:	bd38      	pop	{r3, r4, r5, pc}
100117e4:	1001b3c0 	.word	0x1001b3c0
100117e8:	1001b050 	.word	0x1001b050
100117ec:	1001b3cd 	.word	0x1001b3cd
100117f0:	10016223 	.word	0x10016223
100117f4:	100104cd 	.word	0x100104cd

100117f8 <gattc_write_cfm>:
100117f8:	4b0d      	ldr	r3, [pc, #52]	; (10011830 <gattc_write_cfm+0x38>)
100117fa:	b510      	push	{r4, lr}
100117fc:	729a      	strb	r2, [r3, #10]
100117fe:	2203      	movs	r2, #3
10011800:	2416      	movs	r4, #22
10011802:	719a      	strb	r2, [r3, #6]
10011804:	2200      	movs	r2, #0
10011806:	70d9      	strb	r1, [r3, #3]
10011808:	490a      	ldr	r1, [pc, #40]	; (10011834 <gattc_write_cfm+0x3c>)
1001180a:	701c      	strb	r4, [r3, #0]
1001180c:	3c0a      	subs	r4, #10
1001180e:	705c      	strb	r4, [r3, #1]
10011810:	709c      	strb	r4, [r3, #2]
10011812:	880c      	ldrh	r4, [r1, #0]
10011814:	8809      	ldrh	r1, [r1, #0]
10011816:	7218      	strb	r0, [r3, #8]
10011818:	0a09      	lsrs	r1, r1, #8
1001181a:	0a00      	lsrs	r0, r0, #8
1001181c:	711c      	strb	r4, [r3, #4]
1001181e:	7159      	strb	r1, [r3, #5]
10011820:	7258      	strb	r0, [r3, #9]
10011822:	71da      	strb	r2, [r3, #7]
10011824:	1c18      	adds	r0, r3, #0
10011826:	210b      	movs	r1, #11
10011828:	4b03      	ldr	r3, [pc, #12]	; (10011838 <gattc_write_cfm+0x40>)
1001182a:	4798      	blx	r3
1001182c:	bd10      	pop	{r4, pc}
1001182e:	46c0      	nop			; (mov r8, r8)
10011830:	1001b3c0 	.word	0x1001b3c0
10011834:	1001b050 	.word	0x1001b050
10011838:	100104cd 	.word	0x100104cd

1001183c <gattc_att_info_cfm>:
1001183c:	b538      	push	{r3, r4, r5, lr}
1001183e:	4c0e      	ldr	r4, [pc, #56]	; (10011878 <gattc_att_info_cfm+0x3c>)
10011840:	2518      	movs	r5, #24
10011842:	7323      	strb	r3, [r4, #12]
10011844:	2305      	movs	r3, #5
10011846:	71a3      	strb	r3, [r4, #6]
10011848:	2300      	movs	r3, #0
1001184a:	70e1      	strb	r1, [r4, #3]
1001184c:	490b      	ldr	r1, [pc, #44]	; (1001187c <gattc_att_info_cfm+0x40>)
1001184e:	7025      	strb	r5, [r4, #0]
10011850:	3d0c      	subs	r5, #12
10011852:	7065      	strb	r5, [r4, #1]
10011854:	70a5      	strb	r5, [r4, #2]
10011856:	880d      	ldrh	r5, [r1, #0]
10011858:	8809      	ldrh	r1, [r1, #0]
1001185a:	7220      	strb	r0, [r4, #8]
1001185c:	0a09      	lsrs	r1, r1, #8
1001185e:	0a00      	lsrs	r0, r0, #8
10011860:	7161      	strb	r1, [r4, #5]
10011862:	7260      	strb	r0, [r4, #9]
10011864:	72a2      	strb	r2, [r4, #10]
10011866:	71e3      	strb	r3, [r4, #7]
10011868:	0a12      	lsrs	r2, r2, #8
1001186a:	1c20      	adds	r0, r4, #0
1001186c:	210d      	movs	r1, #13
1001186e:	4b04      	ldr	r3, [pc, #16]	; (10011880 <gattc_att_info_cfm+0x44>)
10011870:	7125      	strb	r5, [r4, #4]
10011872:	72e2      	strb	r2, [r4, #11]
10011874:	4798      	blx	r3
10011876:	bd38      	pop	{r3, r4, r5, pc}
10011878:	1001b3c0 	.word	0x1001b3c0
1001187c:	1001b050 	.word	0x1001b050
10011880:	100104cd 	.word	0x100104cd

10011884 <gattc_send_evt_cmd_handler>:
10011884:	b570      	push	{r4, r5, r6, lr}
10011886:	2610      	movs	r6, #16
10011888:	ac04      	add	r4, sp, #16
1001188a:	8825      	ldrh	r5, [r4, #0]
1001188c:	4c15      	ldr	r4, [pc, #84]	; (100118e4 <gattc_send_evt_cmd_handler+0x60>)
1001188e:	70e2      	strb	r2, [r4, #3]
10011890:	4a15      	ldr	r2, [pc, #84]	; (100118e8 <gattc_send_evt_cmd_handler+0x64>)
10011892:	7026      	strb	r6, [r4, #0]
10011894:	3e04      	subs	r6, #4
10011896:	7066      	strb	r6, [r4, #1]
10011898:	70a6      	strb	r6, [r4, #2]
1001189a:	8816      	ldrh	r6, [r2, #0]
1001189c:	8812      	ldrh	r2, [r2, #0]
1001189e:	7220      	strb	r0, [r4, #8]
100118a0:	0a12      	lsrs	r2, r2, #8
100118a2:	7162      	strb	r2, [r4, #5]
100118a4:	4a11      	ldr	r2, [pc, #68]	; (100118ec <gattc_send_evt_cmd_handler+0x68>)
100118a6:	7321      	strb	r1, [r4, #12]
100118a8:	8812      	ldrh	r2, [r2, #0]
100118aa:	73a5      	strb	r5, [r4, #14]
100118ac:	3201      	adds	r2, #1
100118ae:	7262      	strb	r2, [r4, #9]
100118b0:	1212      	asrs	r2, r2, #8
100118b2:	72a2      	strb	r2, [r4, #10]
100118b4:	2200      	movs	r2, #0
100118b6:	72e2      	strb	r2, [r4, #11]
100118b8:	0a0a      	lsrs	r2, r1, #8
100118ba:	7362      	strb	r2, [r4, #13]
100118bc:	0a2a      	lsrs	r2, r5, #8
100118be:	73e2      	strb	r2, [r4, #15]
100118c0:	1c19      	adds	r1, r3, #0
100118c2:	1c2a      	adds	r2, r5, #0
100118c4:	4b0a      	ldr	r3, [pc, #40]	; (100118f0 <gattc_send_evt_cmd_handler+0x6c>)
100118c6:	3510      	adds	r5, #16
100118c8:	480a      	ldr	r0, [pc, #40]	; (100118f4 <gattc_send_evt_cmd_handler+0x70>)
100118ca:	7126      	strb	r6, [r4, #4]
100118cc:	4798      	blx	r3
100118ce:	b2a9      	uxth	r1, r5
100118d0:	1c0b      	adds	r3, r1, #0
100118d2:	3b08      	subs	r3, #8
100118d4:	71a3      	strb	r3, [r4, #6]
100118d6:	121b      	asrs	r3, r3, #8
100118d8:	71e3      	strb	r3, [r4, #7]
100118da:	1c20      	adds	r0, r4, #0
100118dc:	4b06      	ldr	r3, [pc, #24]	; (100118f8 <gattc_send_evt_cmd_handler+0x74>)
100118de:	4798      	blx	r3
100118e0:	bd70      	pop	{r4, r5, r6, pc}
100118e2:	46c0      	nop			; (mov r8, r8)
100118e4:	1001b3c0 	.word	0x1001b3c0
100118e8:	1001b050 	.word	0x1001b050
100118ec:	1001a184 	.word	0x1001a184
100118f0:	10016223 	.word	0x10016223
100118f4:	1001b3d0 	.word	0x1001b3d0
100118f8:	100104cd 	.word	0x100104cd

100118fc <gattc_event_cfm_handler>:
100118fc:	220e      	movs	r2, #14
100118fe:	b508      	push	{r3, lr}
10011900:	4b0b      	ldr	r3, [pc, #44]	; (10011930 <gattc_event_cfm_handler+0x34>)
10011902:	701a      	strb	r2, [r3, #0]
10011904:	3a02      	subs	r2, #2
10011906:	705a      	strb	r2, [r3, #1]
10011908:	709a      	strb	r2, [r3, #2]
1001190a:	4a0a      	ldr	r2, [pc, #40]	; (10011934 <gattc_event_cfm_handler+0x38>)
1001190c:	70d8      	strb	r0, [r3, #3]
1001190e:	8810      	ldrh	r0, [r2, #0]
10011910:	8812      	ldrh	r2, [r2, #0]
10011912:	7219      	strb	r1, [r3, #8]
10011914:	0a12      	lsrs	r2, r2, #8
10011916:	715a      	strb	r2, [r3, #5]
10011918:	2202      	movs	r2, #2
1001191a:	719a      	strb	r2, [r3, #6]
1001191c:	2200      	movs	r2, #0
1001191e:	0a09      	lsrs	r1, r1, #8
10011920:	7118      	strb	r0, [r3, #4]
10011922:	7259      	strb	r1, [r3, #9]
10011924:	71da      	strb	r2, [r3, #7]
10011926:	1c18      	adds	r0, r3, #0
10011928:	210a      	movs	r1, #10
1001192a:	4b03      	ldr	r3, [pc, #12]	; (10011938 <gattc_event_cfm_handler+0x3c>)
1001192c:	4798      	blx	r3
1001192e:	bd08      	pop	{r3, pc}
10011930:	1001b3c0 	.word	0x1001b3c0
10011934:	1001b050 	.word	0x1001b050
10011938:	100104cd 	.word	0x100104cd

1001193c <gattc_disc_svc_ind_parser>:
1001193c:	b570      	push	{r4, r5, r6, lr}
1001193e:	1c15      	adds	r5, r2, #0
10011940:	0a00      	lsrs	r0, r0, #8
10011942:	8010      	strh	r0, [r2, #0]
10011944:	784b      	ldrb	r3, [r1, #1]
10011946:	780a      	ldrb	r2, [r1, #0]
10011948:	021b      	lsls	r3, r3, #8
1001194a:	4313      	orrs	r3, r2
1001194c:	806b      	strh	r3, [r5, #2]
1001194e:	78cb      	ldrb	r3, [r1, #3]
10011950:	788a      	ldrb	r2, [r1, #2]
10011952:	021b      	lsls	r3, r3, #8
10011954:	4313      	orrs	r3, r2
10011956:	80ab      	strh	r3, [r5, #4]
10011958:	790e      	ldrb	r6, [r1, #4]
1001195a:	4b05      	ldr	r3, [pc, #20]	; (10011970 <gattc_disc_svc_ind_parser+0x34>)
1001195c:	1c30      	adds	r0, r6, #0
1001195e:	1c0c      	adds	r4, r1, #0
10011960:	4798      	blx	r3
10011962:	1c32      	adds	r2, r6, #0
10011964:	71a8      	strb	r0, [r5, #6]
10011966:	1d61      	adds	r1, r4, #5
10011968:	1de8      	adds	r0, r5, #7
1001196a:	4b02      	ldr	r3, [pc, #8]	; (10011974 <gattc_disc_svc_ind_parser+0x38>)
1001196c:	4798      	blx	r3
1001196e:	bd70      	pop	{r4, r5, r6, pc}
10011970:	1000f80d 	.word	0x1000f80d
10011974:	10016223 	.word	0x10016223

10011978 <gattc_disc_svc_incl_ind_parser>:
10011978:	b570      	push	{r4, r5, r6, lr}
1001197a:	1c15      	adds	r5, r2, #0
1001197c:	0a00      	lsrs	r0, r0, #8
1001197e:	8010      	strh	r0, [r2, #0]
10011980:	784b      	ldrb	r3, [r1, #1]
10011982:	780a      	ldrb	r2, [r1, #0]
10011984:	021b      	lsls	r3, r3, #8
10011986:	4313      	orrs	r3, r2
10011988:	806b      	strh	r3, [r5, #2]
1001198a:	78cb      	ldrb	r3, [r1, #3]
1001198c:	788a      	ldrb	r2, [r1, #2]
1001198e:	021b      	lsls	r3, r3, #8
10011990:	4313      	orrs	r3, r2
10011992:	80ab      	strh	r3, [r5, #4]
10011994:	794b      	ldrb	r3, [r1, #5]
10011996:	790a      	ldrb	r2, [r1, #4]
10011998:	021b      	lsls	r3, r3, #8
1001199a:	4313      	orrs	r3, r2
1001199c:	80eb      	strh	r3, [r5, #6]
1001199e:	798e      	ldrb	r6, [r1, #6]
100119a0:	4b05      	ldr	r3, [pc, #20]	; (100119b8 <gattc_disc_svc_incl_ind_parser+0x40>)
100119a2:	1c30      	adds	r0, r6, #0
100119a4:	1c0c      	adds	r4, r1, #0
100119a6:	4798      	blx	r3
100119a8:	7228      	strb	r0, [r5, #8]
100119aa:	1c28      	adds	r0, r5, #0
100119ac:	1c32      	adds	r2, r6, #0
100119ae:	1de1      	adds	r1, r4, #7
100119b0:	4b02      	ldr	r3, [pc, #8]	; (100119bc <gattc_disc_svc_incl_ind_parser+0x44>)
100119b2:	3009      	adds	r0, #9
100119b4:	4798      	blx	r3
100119b6:	bd70      	pop	{r4, r5, r6, pc}
100119b8:	1000f80d 	.word	0x1000f80d
100119bc:	10016223 	.word	0x10016223

100119c0 <gattc_disc_char_ind_parser>:
100119c0:	b570      	push	{r4, r5, r6, lr}
100119c2:	1c15      	adds	r5, r2, #0
100119c4:	0a00      	lsrs	r0, r0, #8
100119c6:	8010      	strh	r0, [r2, #0]
100119c8:	784b      	ldrb	r3, [r1, #1]
100119ca:	780a      	ldrb	r2, [r1, #0]
100119cc:	021b      	lsls	r3, r3, #8
100119ce:	4313      	orrs	r3, r2
100119d0:	806b      	strh	r3, [r5, #2]
100119d2:	78cb      	ldrb	r3, [r1, #3]
100119d4:	788a      	ldrb	r2, [r1, #2]
100119d6:	021b      	lsls	r3, r3, #8
100119d8:	4313      	orrs	r3, r2
100119da:	80ab      	strh	r3, [r5, #4]
100119dc:	790b      	ldrb	r3, [r1, #4]
100119de:	1c0c      	adds	r4, r1, #0
100119e0:	71ab      	strb	r3, [r5, #6]
100119e2:	794e      	ldrb	r6, [r1, #5]
100119e4:	4b05      	ldr	r3, [pc, #20]	; (100119fc <gattc_disc_char_ind_parser+0x3c>)
100119e6:	1c30      	adds	r0, r6, #0
100119e8:	4798      	blx	r3
100119ea:	71e8      	strb	r0, [r5, #7]
100119ec:	1c28      	adds	r0, r5, #0
100119ee:	1c32      	adds	r2, r6, #0
100119f0:	1da1      	adds	r1, r4, #6
100119f2:	4b03      	ldr	r3, [pc, #12]	; (10011a00 <gattc_disc_char_ind_parser+0x40>)
100119f4:	3008      	adds	r0, #8
100119f6:	4798      	blx	r3
100119f8:	bd70      	pop	{r4, r5, r6, pc}
100119fa:	46c0      	nop			; (mov r8, r8)
100119fc:	1000f80d 	.word	0x1000f80d
10011a00:	10016223 	.word	0x10016223

10011a04 <gattc_disc_char_desc_ind_parser>:
10011a04:	b570      	push	{r4, r5, r6, lr}
10011a06:	1c15      	adds	r5, r2, #0
10011a08:	0a00      	lsrs	r0, r0, #8
10011a0a:	8010      	strh	r0, [r2, #0]
10011a0c:	784b      	ldrb	r3, [r1, #1]
10011a0e:	780a      	ldrb	r2, [r1, #0]
10011a10:	021b      	lsls	r3, r3, #8
10011a12:	4313      	orrs	r3, r2
10011a14:	806b      	strh	r3, [r5, #2]
10011a16:	788e      	ldrb	r6, [r1, #2]
10011a18:	4b05      	ldr	r3, [pc, #20]	; (10011a30 <gattc_disc_char_desc_ind_parser+0x2c>)
10011a1a:	1c30      	adds	r0, r6, #0
10011a1c:	1c0c      	adds	r4, r1, #0
10011a1e:	4798      	blx	r3
10011a20:	1c32      	adds	r2, r6, #0
10011a22:	7128      	strb	r0, [r5, #4]
10011a24:	1ce1      	adds	r1, r4, #3
10011a26:	1d68      	adds	r0, r5, #5
10011a28:	4b02      	ldr	r3, [pc, #8]	; (10011a34 <gattc_disc_char_desc_ind_parser+0x30>)
10011a2a:	4798      	blx	r3
10011a2c:	bd70      	pop	{r4, r5, r6, pc}
10011a2e:	46c0      	nop			; (mov r8, r8)
10011a30:	1000f80d 	.word	0x1000f80d
10011a34:	10016223 	.word	0x10016223

10011a38 <gattc_event_ind_and_notification_parser>:
10011a38:	b510      	push	{r4, lr}
10011a3a:	780c      	ldrb	r4, [r1, #0]
10011a3c:	1c13      	adds	r3, r2, #0
10011a3e:	2c12      	cmp	r4, #18
10011a40:	d10e      	bne.n	10011a60 <gattc_event_ind_and_notification_parser+0x28>
10011a42:	0a00      	lsrs	r0, r0, #8
10011a44:	8010      	strh	r0, [r2, #0]
10011a46:	788a      	ldrb	r2, [r1, #2]
10011a48:	709a      	strb	r2, [r3, #2]
10011a4a:	7948      	ldrb	r0, [r1, #5]
10011a4c:	790c      	ldrb	r4, [r1, #4]
10011a4e:	0200      	lsls	r0, r0, #8
10011a50:	4320      	orrs	r0, r4
10011a52:	8098      	strh	r0, [r3, #4]
10011a54:	3106      	adds	r1, #6
10011a56:	1d98      	adds	r0, r3, #6
10011a58:	4b0b      	ldr	r3, [pc, #44]	; (10011a88 <gattc_event_ind_and_notification_parser+0x50>)
10011a5a:	4798      	blx	r3
10011a5c:	221b      	movs	r2, #27
10011a5e:	e010      	b.n	10011a82 <gattc_event_ind_and_notification_parser+0x4a>
10011a60:	2200      	movs	r2, #0
10011a62:	2c13      	cmp	r4, #19
10011a64:	d10d      	bne.n	10011a82 <gattc_event_ind_and_notification_parser+0x4a>
10011a66:	0a00      	lsrs	r0, r0, #8
10011a68:	8018      	strh	r0, [r3, #0]
10011a6a:	788a      	ldrb	r2, [r1, #2]
10011a6c:	709a      	strb	r2, [r3, #2]
10011a6e:	7908      	ldrb	r0, [r1, #4]
10011a70:	78cc      	ldrb	r4, [r1, #3]
10011a72:	0200      	lsls	r0, r0, #8
10011a74:	4320      	orrs	r0, r4
10011a76:	8098      	strh	r0, [r3, #4]
10011a78:	3106      	adds	r1, #6
10011a7a:	1d98      	adds	r0, r3, #6
10011a7c:	4b02      	ldr	r3, [pc, #8]	; (10011a88 <gattc_event_ind_and_notification_parser+0x50>)
10011a7e:	4798      	blx	r3
10011a80:	221c      	movs	r2, #28
10011a82:	1c10      	adds	r0, r2, #0
10011a84:	bd10      	pop	{r4, pc}
10011a86:	46c0      	nop			; (mov r8, r8)
10011a88:	10016223 	.word	0x10016223

10011a8c <gattc_complete_evt_handler>:
10011a8c:	b500      	push	{lr}
10011a8e:	0a00      	lsrs	r0, r0, #8
10011a90:	8010      	strh	r0, [r2, #0]
10011a92:	7808      	ldrb	r0, [r1, #0]
10011a94:	7090      	strb	r0, [r2, #2]
10011a96:	784b      	ldrb	r3, [r1, #1]
10011a98:	3801      	subs	r0, #1
10011a9a:	70d3      	strb	r3, [r2, #3]
10011a9c:	2813      	cmp	r0, #19
10011a9e:	d82c      	bhi.n	10011afa <gattc_complete_evt_handler+0x6e>
10011aa0:	f001 fb9a 	bl	100131d8 <__gnu_thumb1_case_uqi>
10011aa4:	0a0a0a0c 	.word	0x0a0a0a0c
10011aa8:	210a0a0a 	.word	0x210a0a0a
10011aac:	111f2121 	.word	0x111f2121
10011ab0:	2b111111 	.word	0x2b111111
10011ab4:	2919132b 	.word	0x2919132b
10011ab8:	2017      	movs	r0, #23
10011aba:	e01f      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011abc:	2024      	movs	r0, #36	; 0x24
10011abe:	2b00      	cmp	r3, #0
10011ac0:	d11c      	bne.n	10011afc <gattc_complete_evt_handler+0x70>
10011ac2:	3017      	adds	r0, #23
10011ac4:	e01a      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011ac6:	2025      	movs	r0, #37	; 0x25
10011ac8:	e018      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011aca:	4a0d      	ldr	r2, [pc, #52]	; (10011b00 <gattc_complete_evt_handler+0x74>)
10011acc:	201d      	movs	r0, #29
10011ace:	6813      	ldr	r3, [r2, #0]
10011ad0:	3b01      	subs	r3, #1
10011ad2:	6013      	str	r3, [r2, #0]
10011ad4:	e012      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011ad6:	4a0a      	ldr	r2, [pc, #40]	; (10011b00 <gattc_complete_evt_handler+0x74>)
10011ad8:	201e      	movs	r0, #30
10011ada:	6813      	ldr	r3, [r2, #0]
10011adc:	3b01      	subs	r3, #1
10011ade:	6013      	str	r3, [r2, #0]
10011ae0:	e00c      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011ae2:	2019      	movs	r0, #25
10011ae4:	e00a      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011ae6:	203b      	movs	r0, #59	; 0x3b
10011ae8:	2b00      	cmp	r3, #0
10011aea:	d007      	beq.n	10011afc <gattc_complete_evt_handler+0x70>
10011aec:	2182      	movs	r1, #130	; 0x82
10011aee:	0089      	lsls	r1, r1, #2
10011af0:	5453      	strb	r3, [r2, r1]
10011af2:	3823      	subs	r0, #35	; 0x23
10011af4:	e002      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011af6:	2021      	movs	r0, #33	; 0x21
10011af8:	e000      	b.n	10011afc <gattc_complete_evt_handler+0x70>
10011afa:	2000      	movs	r0, #0
10011afc:	bd00      	pop	{pc}
10011afe:	46c0      	nop			; (mov r8, r8)
10011b00:	1001a188 	.word	0x1001a188

10011b04 <gattc_event_mtu_changed_ind_parser>:
10011b04:	0a00      	lsrs	r0, r0, #8
10011b06:	8010      	strh	r0, [r2, #0]
10011b08:	784b      	ldrb	r3, [r1, #1]
10011b0a:	7809      	ldrb	r1, [r1, #0]
10011b0c:	021b      	lsls	r3, r3, #8
10011b0e:	430b      	orrs	r3, r1
10011b10:	8053      	strh	r3, [r2, #2]
10011b12:	4770      	bx	lr

10011b14 <gattc_read_ind_parser>:
10011b14:	0a00      	lsrs	r0, r0, #8
10011b16:	b508      	push	{r3, lr}
10011b18:	8010      	strh	r0, [r2, #0]
10011b1a:	1c13      	adds	r3, r2, #0
10011b1c:	2282      	movs	r2, #130	; 0x82
10011b1e:	2000      	movs	r0, #0
10011b20:	0092      	lsls	r2, r2, #2
10011b22:	5498      	strb	r0, [r3, r2]
10011b24:	784a      	ldrb	r2, [r1, #1]
10011b26:	7808      	ldrb	r0, [r1, #0]
10011b28:	0212      	lsls	r2, r2, #8
10011b2a:	4302      	orrs	r2, r0
10011b2c:	805a      	strh	r2, [r3, #2]
10011b2e:	78ca      	ldrb	r2, [r1, #3]
10011b30:	7888      	ldrb	r0, [r1, #2]
10011b32:	0212      	lsls	r2, r2, #8
10011b34:	4302      	orrs	r2, r0
10011b36:	80da      	strh	r2, [r3, #6]
10011b38:	794a      	ldrb	r2, [r1, #5]
10011b3a:	7908      	ldrb	r0, [r1, #4]
10011b3c:	0212      	lsls	r2, r2, #8
10011b3e:	4302      	orrs	r2, r0
10011b40:	809a      	strh	r2, [r3, #4]
10011b42:	3308      	adds	r3, #8
10011b44:	1c18      	adds	r0, r3, #0
10011b46:	3106      	adds	r1, #6
10011b48:	4b01      	ldr	r3, [pc, #4]	; (10011b50 <gattc_read_ind_parser+0x3c>)
10011b4a:	4798      	blx	r3
10011b4c:	bd08      	pop	{r3, pc}
10011b4e:	46c0      	nop			; (mov r8, r8)
10011b50:	10016223 	.word	0x10016223

10011b54 <gattc_svc_changed_cfg_ind_parser>:
10011b54:	0a00      	lsrs	r0, r0, #8
10011b56:	8010      	strh	r0, [r2, #0]
10011b58:	784b      	ldrb	r3, [r1, #1]
10011b5a:	7809      	ldrb	r1, [r1, #0]
10011b5c:	021b      	lsls	r3, r3, #8
10011b5e:	430b      	orrs	r3, r1
10011b60:	8053      	strh	r3, [r2, #2]
10011b62:	4770      	bx	lr

10011b64 <init_gattc_task_module>:
10011b64:	2300      	movs	r3, #0
10011b66:	4a02      	ldr	r2, [pc, #8]	; (10011b70 <init_gattc_task_module+0xc>)
10011b68:	8013      	strh	r3, [r2, #0]
10011b6a:	4a02      	ldr	r2, [pc, #8]	; (10011b74 <init_gattc_task_module+0x10>)
10011b6c:	8013      	strh	r3, [r2, #0]
10011b6e:	4770      	bx	lr
10011b70:	1001a182 	.word	0x1001a182
10011b74:	1001a184 	.word	0x1001a184

10011b78 <gattm_add_svc_req_handler>:
10011b78:	2200      	movs	r2, #0
10011b7a:	210b      	movs	r1, #11
10011b7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b7e:	1c04      	adds	r4, r0, #0
10011b80:	7943      	ldrb	r3, [r0, #5]
10011b82:	b085      	sub	sp, #20
10011b84:	9301      	str	r3, [sp, #4]
10011b86:	ab02      	add	r3, sp, #8
10011b88:	71da      	strb	r2, [r3, #7]
10011b8a:	4b37      	ldr	r3, [pc, #220]	; (10011c68 <gattm_add_svc_req_handler+0xf0>)
10011b8c:	7059      	strb	r1, [r3, #1]
10011b8e:	7099      	strb	r1, [r3, #2]
10011b90:	4936      	ldr	r1, [pc, #216]	; (10011c6c <gattm_add_svc_req_handler+0xf4>)
10011b92:	701a      	strb	r2, [r3, #0]
10011b94:	8808      	ldrh	r0, [r1, #0]
10011b96:	8809      	ldrh	r1, [r1, #0]
10011b98:	70da      	strb	r2, [r3, #3]
10011b9a:	0a09      	lsrs	r1, r1, #8
10011b9c:	7118      	strb	r0, [r3, #4]
10011b9e:	7159      	strb	r1, [r3, #5]
10011ba0:	8821      	ldrh	r1, [r4, #0]
10011ba2:	7219      	strb	r1, [r3, #8]
10011ba4:	8821      	ldrh	r1, [r4, #0]
10011ba6:	0a09      	lsrs	r1, r1, #8
10011ba8:	7259      	strb	r1, [r3, #9]
10011baa:	8861      	ldrh	r1, [r4, #2]
10011bac:	7299      	strb	r1, [r3, #10]
10011bae:	8861      	ldrh	r1, [r4, #2]
10011bb0:	0a09      	lsrs	r1, r1, #8
10011bb2:	72d9      	strb	r1, [r3, #11]
10011bb4:	7921      	ldrb	r1, [r4, #4]
10011bb6:	7319      	strb	r1, [r3, #12]
10011bb8:	4669      	mov	r1, sp
10011bba:	7909      	ldrb	r1, [r1, #4]
10011bbc:	7359      	strb	r1, [r3, #13]
10011bbe:	18a1      	adds	r1, r4, r2
10011bc0:	7988      	ldrb	r0, [r1, #6]
10011bc2:	1899      	adds	r1, r3, r2
10011bc4:	3201      	adds	r2, #1
10011bc6:	7388      	strb	r0, [r1, #14]
10011bc8:	2a10      	cmp	r2, #16
10011bca:	d1f8      	bne.n	10011bbe <gattm_add_svc_req_handler+0x46>
10011bcc:	1c27      	adds	r7, r4, #0
10011bce:	2300      	movs	r3, #0
10011bd0:	251e      	movs	r5, #30
10011bd2:	3716      	adds	r7, #22
10011bd4:	9300      	str	r3, [sp, #0]
10011bd6:	9b00      	ldr	r3, [sp, #0]
10011bd8:	9a01      	ldr	r2, [sp, #4]
10011bda:	4e23      	ldr	r6, [pc, #140]	; (10011c68 <gattm_add_svc_req_handler+0xf0>)
10011bdc:	4293      	cmp	r3, r2
10011bde:	da21      	bge.n	10011c24 <gattm_add_svc_req_handler+0xac>
10011be0:	1c39      	adds	r1, r7, #0
10011be2:	1970      	adds	r0, r6, r5
10011be4:	2210      	movs	r2, #16
10011be6:	4b22      	ldr	r3, [pc, #136]	; (10011c70 <gattm_add_svc_req_handler+0xf8>)
10011be8:	4798      	blx	r3
10011bea:	1c2b      	adds	r3, r5, #0
10011bec:	8a3a      	ldrh	r2, [r7, #16]
10011bee:	3310      	adds	r3, #16
10011bf0:	b29b      	uxth	r3, r3
10011bf2:	54f2      	strb	r2, [r6, r3]
10011bf4:	1c2b      	adds	r3, r5, #0
10011bf6:	8a3a      	ldrh	r2, [r7, #16]
10011bf8:	3311      	adds	r3, #17
10011bfa:	b29b      	uxth	r3, r3
10011bfc:	0a12      	lsrs	r2, r2, #8
10011bfe:	54f2      	strb	r2, [r6, r3]
10011c00:	1c2a      	adds	r2, r5, #0
10011c02:	1c2b      	adds	r3, r5, #0
10011c04:	8a79      	ldrh	r1, [r7, #18]
10011c06:	3212      	adds	r2, #18
10011c08:	b292      	uxth	r2, r2
10011c0a:	54b1      	strb	r1, [r6, r2]
10011c0c:	8a7a      	ldrh	r2, [r7, #18]
10011c0e:	3313      	adds	r3, #19
10011c10:	b29b      	uxth	r3, r3
10011c12:	0a12      	lsrs	r2, r2, #8
10011c14:	54f2      	strb	r2, [r6, r3]
10011c16:	9b00      	ldr	r3, [sp, #0]
10011c18:	3514      	adds	r5, #20
10011c1a:	3301      	adds	r3, #1
10011c1c:	b2ad      	uxth	r5, r5
10011c1e:	9300      	str	r3, [sp, #0]
10011c20:	3714      	adds	r7, #20
10011c22:	e7d8      	b.n	10011bd6 <gattm_add_svc_req_handler+0x5e>
10011c24:	2114      	movs	r1, #20
10011c26:	4d13      	ldr	r5, [pc, #76]	; (10011c74 <gattm_add_svc_req_handler+0xfc>)
10011c28:	4b13      	ldr	r3, [pc, #76]	; (10011c78 <gattm_add_svc_req_handler+0x100>)
10011c2a:	4351      	muls	r1, r2
10011c2c:	802b      	strh	r3, [r5, #0]
10011c2e:	230b      	movs	r3, #11
10011c30:	311e      	adds	r1, #30
10011c32:	80ab      	strh	r3, [r5, #4]
10011c34:	1c0b      	adds	r3, r1, #0
10011c36:	3b08      	subs	r3, #8
10011c38:	71b3      	strb	r3, [r6, #6]
10011c3a:	121b      	asrs	r3, r3, #8
10011c3c:	71f3      	strb	r3, [r6, #7]
10011c3e:	1c30      	adds	r0, r6, #0
10011c40:	4b0e      	ldr	r3, [pc, #56]	; (10011c7c <gattm_add_svc_req_handler+0x104>)
10011c42:	4798      	blx	r3
10011c44:	ab02      	add	r3, sp, #8
10011c46:	1dde      	adds	r6, r3, #7
10011c48:	1c30      	adds	r0, r6, #0
10011c4a:	4b0d      	ldr	r3, [pc, #52]	; (10011c80 <gattm_add_svc_req_handler+0x108>)
10011c4c:	4798      	blx	r3
10011c4e:	7833      	ldrb	r3, [r6, #0]
10011c50:	20e2      	movs	r0, #226	; 0xe2
10011c52:	2b00      	cmp	r3, #0
10011c54:	d106      	bne.n	10011c64 <gattm_add_svc_req_handler+0xec>
10011c56:	68aa      	ldr	r2, [r5, #8]
10011c58:	7853      	ldrb	r3, [r2, #1]
10011c5a:	7811      	ldrb	r1, [r2, #0]
10011c5c:	021b      	lsls	r3, r3, #8
10011c5e:	430b      	orrs	r3, r1
10011c60:	8023      	strh	r3, [r4, #0]
10011c62:	7890      	ldrb	r0, [r2, #2]
10011c64:	b005      	add	sp, #20
10011c66:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011c68:	1001b3c0 	.word	0x1001b3c0
10011c6c:	1001b050 	.word	0x1001b050
10011c70:	10016223 	.word	0x10016223
10011c74:	1001b044 	.word	0x1001b044
10011c78:	00000b01 	.word	0x00000b01
10011c7c:	100104cd 	.word	0x100104cd
10011c80:	10010531 	.word	0x10010531

10011c84 <gattm_add_attribute_req_handler>:
10011c84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011c86:	1c1f      	adds	r7, r3, #0
10011c88:	4b16      	ldr	r3, [pc, #88]	; (10011ce4 <gattm_add_attribute_req_handler+0x60>)
10011c8a:	9100      	str	r1, [sp, #0]
10011c8c:	9201      	str	r2, [sp, #4]
10011c8e:	1c05      	adds	r5, r0, #0
10011c90:	7946      	ldrb	r6, [r0, #5]
10011c92:	6818      	ldr	r0, [r3, #0]
10011c94:	2114      	movs	r1, #20
10011c96:	4b14      	ldr	r3, [pc, #80]	; (10011ce8 <gattm_add_attribute_req_handler+0x64>)
10011c98:	382a      	subs	r0, #42	; 0x2a
10011c9a:	4798      	blx	r3
10011c9c:	2311      	movs	r3, #17
10011c9e:	4286      	cmp	r6, r0
10011ca0:	d21e      	bcs.n	10011ce0 <gattm_add_attribute_req_handler+0x5c>
10011ca2:	2414      	movs	r4, #20
10011ca4:	4366      	muls	r6, r4
10011ca6:	19a8      	adds	r0, r5, r6
10011ca8:	2100      	movs	r1, #0
10011caa:	2210      	movs	r2, #16
10011cac:	4b0f      	ldr	r3, [pc, #60]	; (10011cec <gattm_add_attribute_req_handler+0x68>)
10011cae:	3016      	adds	r0, #22
10011cb0:	4798      	blx	r3
10011cb2:	7968      	ldrb	r0, [r5, #5]
10011cb4:	1c3a      	adds	r2, r7, #0
10011cb6:	4360      	muls	r0, r4
10011cb8:	1828      	adds	r0, r5, r0
10011cba:	4b0d      	ldr	r3, [pc, #52]	; (10011cf0 <gattm_add_attribute_req_handler+0x6c>)
10011cbc:	3016      	adds	r0, #22
10011cbe:	9908      	ldr	r1, [sp, #32]
10011cc0:	4798      	blx	r3
10011cc2:	466a      	mov	r2, sp
10011cc4:	796b      	ldrb	r3, [r5, #5]
10011cc6:	8812      	ldrh	r2, [r2, #0]
10011cc8:	435c      	muls	r4, r3
10011cca:	192c      	adds	r4, r5, r4
10011ccc:	8522      	strh	r2, [r4, #40]	; 0x28
10011cce:	466a      	mov	r2, sp
10011cd0:	8892      	ldrh	r2, [r2, #4]
10011cd2:	84e2      	strh	r2, [r4, #38]	; 0x26
10011cd4:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011cd6:	8013      	strh	r3, [r2, #0]
10011cd8:	796b      	ldrb	r3, [r5, #5]
10011cda:	3301      	adds	r3, #1
10011cdc:	716b      	strb	r3, [r5, #5]
10011cde:	2300      	movs	r3, #0
10011ce0:	1c18      	adds	r0, r3, #0
10011ce2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011ce4:	1001a0f8 	.word	0x1001a0f8
10011ce8:	100131ed 	.word	0x100131ed
10011cec:	10016235 	.word	0x10016235
10011cf0:	10016223 	.word	0x10016223

10011cf4 <gattm_att_set_value_req_handler>:
10011cf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011cf6:	466b      	mov	r3, sp
10011cf8:	1dde      	adds	r6, r3, #7
10011cfa:	2300      	movs	r3, #0
10011cfc:	1c0d      	adds	r5, r1, #0
10011cfe:	210c      	movs	r1, #12
10011d00:	270b      	movs	r7, #11
10011d02:	4c17      	ldr	r4, [pc, #92]	; (10011d60 <gattm_att_set_value_req_handler+0x6c>)
10011d04:	7033      	strb	r3, [r6, #0]
10011d06:	70e3      	strb	r3, [r4, #3]
10011d08:	4b16      	ldr	r3, [pc, #88]	; (10011d64 <gattm_att_set_value_req_handler+0x70>)
10011d0a:	7021      	strb	r1, [r4, #0]
10011d0c:	8819      	ldrh	r1, [r3, #0]
10011d0e:	881b      	ldrh	r3, [r3, #0]
10011d10:	7220      	strb	r0, [r4, #8]
10011d12:	0a1b      	lsrs	r3, r3, #8
10011d14:	7163      	strb	r3, [r4, #5]
10011d16:	0a00      	lsrs	r0, r0, #8
10011d18:	0a2b      	lsrs	r3, r5, #8
10011d1a:	7121      	strb	r1, [r4, #4]
10011d1c:	7260      	strb	r0, [r4, #9]
10011d1e:	1c11      	adds	r1, r2, #0
10011d20:	72a5      	strb	r5, [r4, #10]
10011d22:	1c2a      	adds	r2, r5, #0
10011d24:	72e3      	strb	r3, [r4, #11]
10011d26:	350c      	adds	r5, #12
10011d28:	4b0f      	ldr	r3, [pc, #60]	; (10011d68 <gattm_att_set_value_req_handler+0x74>)
10011d2a:	4810      	ldr	r0, [pc, #64]	; (10011d6c <gattm_att_set_value_req_handler+0x78>)
10011d2c:	7067      	strb	r7, [r4, #1]
10011d2e:	70a7      	strb	r7, [r4, #2]
10011d30:	4798      	blx	r3
10011d32:	b2a9      	uxth	r1, r5
10011d34:	4b0e      	ldr	r3, [pc, #56]	; (10011d70 <gattm_att_set_value_req_handler+0x7c>)
10011d36:	4d0f      	ldr	r5, [pc, #60]	; (10011d74 <gattm_att_set_value_req_handler+0x80>)
10011d38:	1c20      	adds	r0, r4, #0
10011d3a:	802b      	strh	r3, [r5, #0]
10011d3c:	1c0b      	adds	r3, r1, #0
10011d3e:	3b08      	subs	r3, #8
10011d40:	71a3      	strb	r3, [r4, #6]
10011d42:	121b      	asrs	r3, r3, #8
10011d44:	71e3      	strb	r3, [r4, #7]
10011d46:	4b0c      	ldr	r3, [pc, #48]	; (10011d78 <gattm_att_set_value_req_handler+0x84>)
10011d48:	80af      	strh	r7, [r5, #4]
10011d4a:	4798      	blx	r3
10011d4c:	1c30      	adds	r0, r6, #0
10011d4e:	4b0b      	ldr	r3, [pc, #44]	; (10011d7c <gattm_att_set_value_req_handler+0x88>)
10011d50:	4798      	blx	r3
10011d52:	7833      	ldrb	r3, [r6, #0]
10011d54:	20e2      	movs	r0, #226	; 0xe2
10011d56:	2b00      	cmp	r3, #0
10011d58:	d101      	bne.n	10011d5e <gattm_att_set_value_req_handler+0x6a>
10011d5a:	68ab      	ldr	r3, [r5, #8]
10011d5c:	7898      	ldrb	r0, [r3, #2]
10011d5e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011d60:	1001b3c0 	.word	0x1001b3c0
10011d64:	1001b050 	.word	0x1001b050
10011d68:	10016223 	.word	0x10016223
10011d6c:	1001b3cc 	.word	0x1001b3cc
10011d70:	00000b0d 	.word	0x00000b0d
10011d74:	1001b044 	.word	0x1001b044
10011d78:	100104cd 	.word	0x100104cd
10011d7c:	10010531 	.word	0x10010531

10011d80 <gattm_att_get_value_req_handler>:
10011d80:	b5f0      	push	{r4, r5, r6, r7, lr}
10011d82:	b085      	sub	sp, #20
10011d84:	9201      	str	r2, [sp, #4]
10011d86:	220a      	movs	r2, #10
10011d88:	1c04      	adds	r4, r0, #0
10011d8a:	481d      	ldr	r0, [pc, #116]	; (10011e00 <gattm_att_get_value_req_handler+0x80>)
10011d8c:	ab02      	add	r3, sp, #8
10011d8e:	1dde      	adds	r6, r3, #7
10011d90:	7002      	strb	r2, [r0, #0]
10011d92:	2300      	movs	r3, #0
10011d94:	220b      	movs	r2, #11
10011d96:	4d1b      	ldr	r5, [pc, #108]	; (10011e04 <gattm_att_get_value_req_handler+0x84>)
10011d98:	1c0f      	adds	r7, r1, #0
10011d9a:	8829      	ldrh	r1, [r5, #0]
10011d9c:	882d      	ldrh	r5, [r5, #0]
10011d9e:	7101      	strb	r1, [r0, #4]
10011da0:	0a2d      	lsrs	r5, r5, #8
10011da2:	7145      	strb	r5, [r0, #5]
10011da4:	0a25      	lsrs	r5, r4, #8
10011da6:	7245      	strb	r5, [r0, #9]
10011da8:	4917      	ldr	r1, [pc, #92]	; (10011e08 <gattm_att_get_value_req_handler+0x88>)
10011daa:	4d18      	ldr	r5, [pc, #96]	; (10011e0c <gattm_att_get_value_req_handler+0x8c>)
10011dac:	7033      	strb	r3, [r6, #0]
10011dae:	7042      	strb	r2, [r0, #1]
10011db0:	7082      	strb	r2, [r0, #2]
10011db2:	70c3      	strb	r3, [r0, #3]
10011db4:	8029      	strh	r1, [r5, #0]
10011db6:	80aa      	strh	r2, [r5, #4]
10011db8:	71c3      	strb	r3, [r0, #7]
10011dba:	3a09      	subs	r2, #9
10011dbc:	210a      	movs	r1, #10
10011dbe:	4b14      	ldr	r3, [pc, #80]	; (10011e10 <gattm_att_get_value_req_handler+0x90>)
10011dc0:	7182      	strb	r2, [r0, #6]
10011dc2:	7204      	strb	r4, [r0, #8]
10011dc4:	4798      	blx	r3
10011dc6:	1c30      	adds	r0, r6, #0
10011dc8:	4b12      	ldr	r3, [pc, #72]	; (10011e14 <gattm_att_get_value_req_handler+0x94>)
10011dca:	4798      	blx	r3
10011dcc:	7833      	ldrb	r3, [r6, #0]
10011dce:	20e2      	movs	r0, #226	; 0xe2
10011dd0:	2b00      	cmp	r3, #0
10011dd2:	d112      	bne.n	10011dfa <gattm_att_get_value_req_handler+0x7a>
10011dd4:	68a9      	ldr	r1, [r5, #8]
10011dd6:	9801      	ldr	r0, [sp, #4]
10011dd8:	784d      	ldrb	r5, [r1, #1]
10011dda:	780b      	ldrb	r3, [r1, #0]
10011ddc:	78ca      	ldrb	r2, [r1, #3]
10011dde:	022d      	lsls	r5, r5, #8
10011de0:	431d      	orrs	r5, r3
10011de2:	788b      	ldrb	r3, [r1, #2]
10011de4:	0212      	lsls	r2, r2, #8
10011de6:	431a      	orrs	r2, r3
10011de8:	803a      	strh	r2, [r7, #0]
10011dea:	790e      	ldrb	r6, [r1, #4]
10011dec:	4b0a      	ldr	r3, [pc, #40]	; (10011e18 <gattm_att_get_value_req_handler+0x98>)
10011dee:	3105      	adds	r1, #5
10011df0:	4798      	blx	r3
10011df2:	20e2      	movs	r0, #226	; 0xe2
10011df4:	42ac      	cmp	r4, r5
10011df6:	d100      	bne.n	10011dfa <gattm_att_get_value_req_handler+0x7a>
10011df8:	1c30      	adds	r0, r6, #0
10011dfa:	b005      	add	sp, #20
10011dfc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011dfe:	46c0      	nop			; (mov r8, r8)
10011e00:	1001b3c0 	.word	0x1001b3c0
10011e04:	1001b050 	.word	0x1001b050
10011e08:	00000b0b 	.word	0x00000b0b
10011e0c:	1001b044 	.word	0x1001b044
10011e10:	100104cd 	.word	0x100104cd
10011e14:	10010531 	.word	0x10010531
10011e18:	10016223 	.word	0x10016223

10011e1c <htpt_enable_rsp_handler>:
10011e1c:	780b      	ldrb	r3, [r1, #0]
10011e1e:	7013      	strb	r3, [r2, #0]
10011e20:	784b      	ldrb	r3, [r1, #1]
10011e22:	7053      	strb	r3, [r2, #1]
10011e24:	4770      	bx	lr

10011e26 <htpt_temp_send_rsp_handler>:
10011e26:	780b      	ldrb	r3, [r1, #0]
10011e28:	7013      	strb	r3, [r2, #0]
10011e2a:	4770      	bx	lr

10011e2c <htpt_meas_intv_upd_rsp_handler>:
10011e2c:	780b      	ldrb	r3, [r1, #0]
10011e2e:	7013      	strb	r3, [r2, #0]
10011e30:	4770      	bx	lr

10011e32 <htpt_meas_intv_chg_req_ind_handler>:
10011e32:	78cb      	ldrb	r3, [r1, #3]
10011e34:	7889      	ldrb	r1, [r1, #2]
10011e36:	021b      	lsls	r3, r3, #8
10011e38:	430b      	orrs	r3, r1
10011e3a:	8013      	strh	r3, [r2, #0]
10011e3c:	4770      	bx	lr

10011e3e <htpt_cfg_indntf_ind_handler>:
10011e3e:	780b      	ldrb	r3, [r1, #0]
10011e40:	7013      	strb	r3, [r2, #0]
10011e42:	784b      	ldrb	r3, [r1, #1]
10011e44:	7053      	strb	r3, [r2, #1]
10011e46:	4770      	bx	lr

10011e48 <pow>:
10011e48:	b5f0      	push	{r4, r5, r6, r7, lr}
10011e4a:	465f      	mov	r7, fp
10011e4c:	464d      	mov	r5, r9
10011e4e:	4656      	mov	r6, sl
10011e50:	4644      	mov	r4, r8
10011e52:	b4f0      	push	{r4, r5, r6, r7}
10011e54:	b091      	sub	sp, #68	; 0x44
10011e56:	001f      	movs	r7, r3
10011e58:	0004      	movs	r4, r0
10011e5a:	000d      	movs	r5, r1
10011e5c:	0016      	movs	r6, r2
10011e5e:	f000 fa01 	bl	10012264 <__ieee754_pow>
10011e62:	4bcf      	ldr	r3, [pc, #828]	; (100121a0 <pow+0x358>)
10011e64:	9002      	str	r0, [sp, #8]
10011e66:	9103      	str	r1, [sp, #12]
10011e68:	469b      	mov	fp, r3
10011e6a:	781b      	ldrb	r3, [r3, #0]
10011e6c:	b25b      	sxtb	r3, r3
10011e6e:	4699      	mov	r9, r3
10011e70:	3301      	adds	r3, #1
10011e72:	d04f      	beq.n	10011f14 <pow+0xcc>
10011e74:	0032      	movs	r2, r6
10011e76:	003b      	movs	r3, r7
10011e78:	0030      	movs	r0, r6
10011e7a:	0039      	movs	r1, r7
10011e7c:	f003 ffbe 	bl	10015dfc <__aeabi_dcmpun>
10011e80:	9000      	str	r0, [sp, #0]
10011e82:	2800      	cmp	r0, #0
10011e84:	d146      	bne.n	10011f14 <pow+0xcc>
10011e86:	0022      	movs	r2, r4
10011e88:	002b      	movs	r3, r5
10011e8a:	0020      	movs	r0, r4
10011e8c:	0029      	movs	r1, r5
10011e8e:	f003 ffb5 	bl	10015dfc <__aeabi_dcmpun>
10011e92:	2200      	movs	r2, #0
10011e94:	4682      	mov	sl, r0
10011e96:	2800      	cmp	r0, #0
10011e98:	d134      	bne.n	10011f04 <pow+0xbc>
10011e9a:	2300      	movs	r3, #0
10011e9c:	0020      	movs	r0, r4
10011e9e:	0029      	movs	r1, r5
10011ea0:	f001 fb2a 	bl	100134f8 <__aeabi_dcmpeq>
10011ea4:	2800      	cmp	r0, #0
10011ea6:	d03a      	beq.n	10011f1e <pow+0xd6>
10011ea8:	2200      	movs	r2, #0
10011eaa:	2300      	movs	r3, #0
10011eac:	0030      	movs	r0, r6
10011eae:	0039      	movs	r1, r7
10011eb0:	f001 fb22 	bl	100134f8 <__aeabi_dcmpeq>
10011eb4:	9005      	str	r0, [sp, #20]
10011eb6:	2800      	cmp	r0, #0
10011eb8:	d100      	bne.n	10011ebc <pow+0x74>
10011eba:	e074      	b.n	10011fa6 <pow+0x15e>
10011ebc:	ab06      	add	r3, sp, #24
10011ebe:	4698      	mov	r8, r3
10011ec0:	2301      	movs	r3, #1
10011ec2:	4642      	mov	r2, r8
10011ec4:	9306      	str	r3, [sp, #24]
10011ec6:	4bb7      	ldr	r3, [pc, #732]	; (100121a4 <pow+0x35c>)
10011ec8:	6053      	str	r3, [r2, #4]
10011eca:	4643      	mov	r3, r8
10011ecc:	4652      	mov	r2, sl
10011ece:	609c      	str	r4, [r3, #8]
10011ed0:	60dd      	str	r5, [r3, #12]
10011ed2:	621a      	str	r2, [r3, #32]
10011ed4:	611e      	str	r6, [r3, #16]
10011ed6:	615f      	str	r7, [r3, #20]
10011ed8:	4642      	mov	r2, r8
10011eda:	2300      	movs	r3, #0
10011edc:	2400      	movs	r4, #0
10011ede:	6193      	str	r3, [r2, #24]
10011ee0:	61d4      	str	r4, [r2, #28]
10011ee2:	464b      	mov	r3, r9
10011ee4:	2b00      	cmp	r3, #0
10011ee6:	d100      	bne.n	10011eea <pow+0xa2>
10011ee8:	e094      	b.n	10012014 <pow+0x1cc>
10011eea:	2300      	movs	r3, #0
10011eec:	4cae      	ldr	r4, [pc, #696]	; (100121a8 <pow+0x360>)
10011eee:	9300      	str	r3, [sp, #0]
10011ef0:	9401      	str	r4, [sp, #4]
10011ef2:	9800      	ldr	r0, [sp, #0]
10011ef4:	9901      	ldr	r1, [sp, #4]
10011ef6:	b011      	add	sp, #68	; 0x44
10011ef8:	bc3c      	pop	{r2, r3, r4, r5}
10011efa:	4690      	mov	r8, r2
10011efc:	4699      	mov	r9, r3
10011efe:	46a2      	mov	sl, r4
10011f00:	46ab      	mov	fp, r5
10011f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011f04:	2300      	movs	r3, #0
10011f06:	0030      	movs	r0, r6
10011f08:	0039      	movs	r1, r7
10011f0a:	f001 faf5 	bl	100134f8 <__aeabi_dcmpeq>
10011f0e:	2800      	cmp	r0, #0
10011f10:	d000      	beq.n	10011f14 <pow+0xcc>
10011f12:	e0eb      	b.n	100120ec <pow+0x2a4>
10011f14:	9b02      	ldr	r3, [sp, #8]
10011f16:	9c03      	ldr	r4, [sp, #12]
10011f18:	9300      	str	r3, [sp, #0]
10011f1a:	9401      	str	r4, [sp, #4]
10011f1c:	e7e9      	b.n	10011ef2 <pow+0xaa>
10011f1e:	9802      	ldr	r0, [sp, #8]
10011f20:	9903      	ldr	r1, [sp, #12]
10011f22:	f001 f82b 	bl	10012f7c <finite>
10011f26:	4681      	mov	r9, r0
10011f28:	2800      	cmp	r0, #0
10011f2a:	d100      	bne.n	10011f2e <pow+0xe6>
10011f2c:	e086      	b.n	1001203c <pow+0x1f4>
10011f2e:	9802      	ldr	r0, [sp, #8]
10011f30:	9903      	ldr	r1, [sp, #12]
10011f32:	2200      	movs	r2, #0
10011f34:	2300      	movs	r3, #0
10011f36:	f001 fadf 	bl	100134f8 <__aeabi_dcmpeq>
10011f3a:	2800      	cmp	r0, #0
10011f3c:	d0ea      	beq.n	10011f14 <pow+0xcc>
10011f3e:	0020      	movs	r0, r4
10011f40:	0029      	movs	r1, r5
10011f42:	f001 f81b 	bl	10012f7c <finite>
10011f46:	9a02      	ldr	r2, [sp, #8]
10011f48:	9b03      	ldr	r3, [sp, #12]
10011f4a:	9200      	str	r2, [sp, #0]
10011f4c:	9301      	str	r3, [sp, #4]
10011f4e:	2800      	cmp	r0, #0
10011f50:	d0cf      	beq.n	10011ef2 <pow+0xaa>
10011f52:	0030      	movs	r0, r6
10011f54:	0039      	movs	r1, r7
10011f56:	f001 f811 	bl	10012f7c <finite>
10011f5a:	9a02      	ldr	r2, [sp, #8]
10011f5c:	9b03      	ldr	r3, [sp, #12]
10011f5e:	9200      	str	r2, [sp, #0]
10011f60:	9301      	str	r3, [sp, #4]
10011f62:	2800      	cmp	r0, #0
10011f64:	d0c5      	beq.n	10011ef2 <pow+0xaa>
10011f66:	ab06      	add	r3, sp, #24
10011f68:	4698      	mov	r8, r3
10011f6a:	2304      	movs	r3, #4
10011f6c:	4642      	mov	r2, r8
10011f6e:	9306      	str	r3, [sp, #24]
10011f70:	4b8c      	ldr	r3, [pc, #560]	; (100121a4 <pow+0x35c>)
10011f72:	6094      	str	r4, [r2, #8]
10011f74:	60d5      	str	r5, [r2, #12]
10011f76:	6053      	str	r3, [r2, #4]
10011f78:	2300      	movs	r3, #0
10011f7a:	2400      	movs	r4, #0
10011f7c:	6213      	str	r3, [r2, #32]
10011f7e:	2300      	movs	r3, #0
10011f80:	6193      	str	r3, [r2, #24]
10011f82:	61d4      	str	r4, [r2, #28]
10011f84:	465b      	mov	r3, fp
10011f86:	781b      	ldrb	r3, [r3, #0]
10011f88:	6116      	str	r6, [r2, #16]
10011f8a:	6157      	str	r7, [r2, #20]
10011f8c:	b25b      	sxtb	r3, r3
10011f8e:	2b02      	cmp	r3, #2
10011f90:	d004      	beq.n	10011f9c <pow+0x154>
10011f92:	4640      	mov	r0, r8
10011f94:	f000 fffc 	bl	10012f90 <matherr>
10011f98:	2800      	cmp	r0, #0
10011f9a:	d140      	bne.n	1001201e <pow+0x1d6>
10011f9c:	f004 f8fc 	bl	10016198 <__errno>
10011fa0:	2322      	movs	r3, #34	; 0x22
10011fa2:	6003      	str	r3, [r0, #0]
10011fa4:	e03b      	b.n	1001201e <pow+0x1d6>
10011fa6:	0030      	movs	r0, r6
10011fa8:	0039      	movs	r1, r7
10011faa:	f000 ffe7 	bl	10012f7c <finite>
10011fae:	9a02      	ldr	r2, [sp, #8]
10011fb0:	9b03      	ldr	r3, [sp, #12]
10011fb2:	9200      	str	r2, [sp, #0]
10011fb4:	9301      	str	r3, [sp, #4]
10011fb6:	2800      	cmp	r0, #0
10011fb8:	d09b      	beq.n	10011ef2 <pow+0xaa>
10011fba:	2200      	movs	r2, #0
10011fbc:	2300      	movs	r3, #0
10011fbe:	0030      	movs	r0, r6
10011fc0:	0039      	movs	r1, r7
10011fc2:	f001 fa9f 	bl	10013504 <__aeabi_dcmplt>
10011fc6:	2800      	cmp	r0, #0
10011fc8:	d100      	bne.n	10011fcc <pow+0x184>
10011fca:	e792      	b.n	10011ef2 <pow+0xaa>
10011fcc:	ab06      	add	r3, sp, #24
10011fce:	4698      	mov	r8, r3
10011fd0:	2301      	movs	r3, #1
10011fd2:	4642      	mov	r2, r8
10011fd4:	9306      	str	r3, [sp, #24]
10011fd6:	4b73      	ldr	r3, [pc, #460]	; (100121a4 <pow+0x35c>)
10011fd8:	6053      	str	r3, [r2, #4]
10011fda:	4643      	mov	r3, r8
10011fdc:	9a05      	ldr	r2, [sp, #20]
10011fde:	609c      	str	r4, [r3, #8]
10011fe0:	60dd      	str	r5, [r3, #12]
10011fe2:	621a      	str	r2, [r3, #32]
10011fe4:	611e      	str	r6, [r3, #16]
10011fe6:	615f      	str	r7, [r3, #20]
10011fe8:	465b      	mov	r3, fp
10011fea:	781b      	ldrb	r3, [r3, #0]
10011fec:	b25b      	sxtb	r3, r3
10011fee:	2b00      	cmp	r3, #0
10011ff0:	d00b      	beq.n	1001200a <pow+0x1c2>
10011ff2:	2000      	movs	r0, #0
10011ff4:	4642      	mov	r2, r8
10011ff6:	496d      	ldr	r1, [pc, #436]	; (100121ac <pow+0x364>)
10011ff8:	6190      	str	r0, [r2, #24]
10011ffa:	61d1      	str	r1, [r2, #28]
10011ffc:	2b02      	cmp	r3, #2
10011ffe:	d109      	bne.n	10012014 <pow+0x1cc>
10012000:	f004 f8ca 	bl	10016198 <__errno>
10012004:	2321      	movs	r3, #33	; 0x21
10012006:	6003      	str	r3, [r0, #0]
10012008:	e009      	b.n	1001201e <pow+0x1d6>
1001200a:	4642      	mov	r2, r8
1001200c:	2300      	movs	r3, #0
1001200e:	2400      	movs	r4, #0
10012010:	6193      	str	r3, [r2, #24]
10012012:	61d4      	str	r4, [r2, #28]
10012014:	4640      	mov	r0, r8
10012016:	f000 ffbb 	bl	10012f90 <matherr>
1001201a:	2800      	cmp	r0, #0
1001201c:	d0f0      	beq.n	10012000 <pow+0x1b8>
1001201e:	4643      	mov	r3, r8
10012020:	6a1b      	ldr	r3, [r3, #32]
10012022:	2b00      	cmp	r3, #0
10012024:	d004      	beq.n	10012030 <pow+0x1e8>
10012026:	f004 f8b7 	bl	10016198 <__errno>
1001202a:	4643      	mov	r3, r8
1001202c:	6a1b      	ldr	r3, [r3, #32]
1001202e:	6003      	str	r3, [r0, #0]
10012030:	4643      	mov	r3, r8
10012032:	69dc      	ldr	r4, [r3, #28]
10012034:	699b      	ldr	r3, [r3, #24]
10012036:	9300      	str	r3, [sp, #0]
10012038:	9401      	str	r4, [sp, #4]
1001203a:	e75a      	b.n	10011ef2 <pow+0xaa>
1001203c:	0020      	movs	r0, r4
1001203e:	0029      	movs	r1, r5
10012040:	f000 ff9c 	bl	10012f7c <finite>
10012044:	2800      	cmp	r0, #0
10012046:	d100      	bne.n	1001204a <pow+0x202>
10012048:	e771      	b.n	10011f2e <pow+0xe6>
1001204a:	0030      	movs	r0, r6
1001204c:	0039      	movs	r1, r7
1001204e:	f000 ff95 	bl	10012f7c <finite>
10012052:	2800      	cmp	r0, #0
10012054:	d100      	bne.n	10012058 <pow+0x210>
10012056:	e76a      	b.n	10011f2e <pow+0xe6>
10012058:	9802      	ldr	r0, [sp, #8]
1001205a:	9903      	ldr	r1, [sp, #12]
1001205c:	000b      	movs	r3, r1
1001205e:	0002      	movs	r2, r0
10012060:	f003 fecc 	bl	10015dfc <__aeabi_dcmpun>
10012064:	ab06      	add	r3, sp, #24
10012066:	4698      	mov	r8, r3
10012068:	2800      	cmp	r0, #0
1001206a:	d17a      	bne.n	10012162 <pow+0x31a>
1001206c:	2303      	movs	r3, #3
1001206e:	4642      	mov	r2, r8
10012070:	9306      	str	r3, [sp, #24]
10012072:	4b4c      	ldr	r3, [pc, #304]	; (100121a4 <pow+0x35c>)
10012074:	6210      	str	r0, [r2, #32]
10012076:	6053      	str	r3, [r2, #4]
10012078:	465b      	mov	r3, fp
1001207a:	781b      	ldrb	r3, [r3, #0]
1001207c:	6094      	str	r4, [r2, #8]
1001207e:	60d5      	str	r5, [r2, #12]
10012080:	b25b      	sxtb	r3, r3
10012082:	6116      	str	r6, [r2, #16]
10012084:	6157      	str	r7, [r2, #20]
10012086:	4699      	mov	r9, r3
10012088:	2b00      	cmp	r3, #0
1001208a:	d148      	bne.n	1001211e <pow+0x2d6>
1001208c:	22e0      	movs	r2, #224	; 0xe0
1001208e:	4641      	mov	r1, r8
10012090:	4b47      	ldr	r3, [pc, #284]	; (100121b0 <pow+0x368>)
10012092:	0612      	lsls	r2, r2, #24
10012094:	618a      	str	r2, [r1, #24]
10012096:	61cb      	str	r3, [r1, #28]
10012098:	0020      	movs	r0, r4
1001209a:	2200      	movs	r2, #0
1001209c:	2300      	movs	r3, #0
1001209e:	0029      	movs	r1, r5
100120a0:	f001 fa30 	bl	10013504 <__aeabi_dcmplt>
100120a4:	2800      	cmp	r0, #0
100120a6:	d100      	bne.n	100120aa <pow+0x262>
100120a8:	e773      	b.n	10011f92 <pow+0x14a>
100120aa:	2200      	movs	r2, #0
100120ac:	4b41      	ldr	r3, [pc, #260]	; (100121b4 <pow+0x36c>)
100120ae:	0030      	movs	r0, r6
100120b0:	0039      	movs	r1, r7
100120b2:	f003 f8d5 	bl	10015260 <__aeabi_dmul>
100120b6:	0004      	movs	r4, r0
100120b8:	000d      	movs	r5, r1
100120ba:	f000 ff71 	bl	10012fa0 <rint>
100120be:	0002      	movs	r2, r0
100120c0:	000b      	movs	r3, r1
100120c2:	0020      	movs	r0, r4
100120c4:	0029      	movs	r1, r5
100120c6:	f001 fa17 	bl	100134f8 <__aeabi_dcmpeq>
100120ca:	2800      	cmp	r0, #0
100120cc:	d105      	bne.n	100120da <pow+0x292>
100120ce:	22e0      	movs	r2, #224	; 0xe0
100120d0:	4b39      	ldr	r3, [pc, #228]	; (100121b8 <pow+0x370>)
100120d2:	0612      	lsls	r2, r2, #24
100120d4:	4641      	mov	r1, r8
100120d6:	618a      	str	r2, [r1, #24]
100120d8:	61cb      	str	r3, [r1, #28]
100120da:	465b      	mov	r3, fp
100120dc:	781b      	ldrb	r3, [r3, #0]
100120de:	b25b      	sxtb	r3, r3
100120e0:	4699      	mov	r9, r3
100120e2:	464b      	mov	r3, r9
100120e4:	2b02      	cmp	r3, #2
100120e6:	d000      	beq.n	100120ea <pow+0x2a2>
100120e8:	e753      	b.n	10011f92 <pow+0x14a>
100120ea:	e757      	b.n	10011f9c <pow+0x154>
100120ec:	ab06      	add	r3, sp, #24
100120ee:	4698      	mov	r8, r3
100120f0:	2301      	movs	r3, #1
100120f2:	4642      	mov	r2, r8
100120f4:	9306      	str	r3, [sp, #24]
100120f6:	4b2b      	ldr	r3, [pc, #172]	; (100121a4 <pow+0x35c>)
100120f8:	6053      	str	r3, [r2, #4]
100120fa:	4643      	mov	r3, r8
100120fc:	609c      	str	r4, [r3, #8]
100120fe:	60dd      	str	r5, [r3, #12]
10012100:	2400      	movs	r4, #0
10012102:	9a00      	ldr	r2, [sp, #0]
10012104:	4d28      	ldr	r5, [pc, #160]	; (100121a8 <pow+0x360>)
10012106:	621a      	str	r2, [r3, #32]
10012108:	611e      	str	r6, [r3, #16]
1001210a:	615f      	str	r7, [r3, #20]
1001210c:	619c      	str	r4, [r3, #24]
1001210e:	61dd      	str	r5, [r3, #28]
10012110:	464b      	mov	r3, r9
10012112:	9400      	str	r4, [sp, #0]
10012114:	9501      	str	r5, [sp, #4]
10012116:	2b02      	cmp	r3, #2
10012118:	d000      	beq.n	1001211c <pow+0x2d4>
1001211a:	e77b      	b.n	10012014 <pow+0x1cc>
1001211c:	e6e9      	b.n	10011ef2 <pow+0xaa>
1001211e:	2200      	movs	r2, #0
10012120:	4641      	mov	r1, r8
10012122:	4b26      	ldr	r3, [pc, #152]	; (100121bc <pow+0x374>)
10012124:	0020      	movs	r0, r4
10012126:	618a      	str	r2, [r1, #24]
10012128:	61cb      	str	r3, [r1, #28]
1001212a:	2200      	movs	r2, #0
1001212c:	2300      	movs	r3, #0
1001212e:	0029      	movs	r1, r5
10012130:	f001 f9e8 	bl	10013504 <__aeabi_dcmplt>
10012134:	2800      	cmp	r0, #0
10012136:	d0d4      	beq.n	100120e2 <pow+0x29a>
10012138:	2200      	movs	r2, #0
1001213a:	4b1e      	ldr	r3, [pc, #120]	; (100121b4 <pow+0x36c>)
1001213c:	0030      	movs	r0, r6
1001213e:	0039      	movs	r1, r7
10012140:	f003 f88e 	bl	10015260 <__aeabi_dmul>
10012144:	0004      	movs	r4, r0
10012146:	000d      	movs	r5, r1
10012148:	f000 ff2a 	bl	10012fa0 <rint>
1001214c:	0002      	movs	r2, r0
1001214e:	000b      	movs	r3, r1
10012150:	0020      	movs	r0, r4
10012152:	0029      	movs	r1, r5
10012154:	f001 f9d0 	bl	100134f8 <__aeabi_dcmpeq>
10012158:	2800      	cmp	r0, #0
1001215a:	d1be      	bne.n	100120da <pow+0x292>
1001215c:	2200      	movs	r2, #0
1001215e:	4b13      	ldr	r3, [pc, #76]	; (100121ac <pow+0x364>)
10012160:	e7b8      	b.n	100120d4 <pow+0x28c>
10012162:	2301      	movs	r3, #1
10012164:	4642      	mov	r2, r8
10012166:	9306      	str	r3, [sp, #24]
10012168:	4b0e      	ldr	r3, [pc, #56]	; (100121a4 <pow+0x35c>)
1001216a:	6053      	str	r3, [r2, #4]
1001216c:	4643      	mov	r3, r8
1001216e:	464a      	mov	r2, r9
10012170:	609c      	str	r4, [r3, #8]
10012172:	60dd      	str	r5, [r3, #12]
10012174:	621a      	str	r2, [r3, #32]
10012176:	611e      	str	r6, [r3, #16]
10012178:	615f      	str	r7, [r3, #20]
1001217a:	2400      	movs	r4, #0
1001217c:	465b      	mov	r3, fp
1001217e:	571c      	ldrsb	r4, [r3, r4]
10012180:	2c00      	cmp	r4, #0
10012182:	d100      	bne.n	10012186 <pow+0x33e>
10012184:	e741      	b.n	1001200a <pow+0x1c2>
10012186:	2300      	movs	r3, #0
10012188:	2200      	movs	r2, #0
1001218a:	0019      	movs	r1, r3
1001218c:	0010      	movs	r0, r2
1001218e:	f002 fc43 	bl	10014a18 <__aeabi_ddiv>
10012192:	4643      	mov	r3, r8
10012194:	6198      	str	r0, [r3, #24]
10012196:	61d9      	str	r1, [r3, #28]
10012198:	2c02      	cmp	r4, #2
1001219a:	d100      	bne.n	1001219e <pow+0x356>
1001219c:	e730      	b.n	10012000 <pow+0x1b8>
1001219e:	e739      	b.n	10012014 <pow+0x1cc>
100121a0:	10018664 	.word	0x10018664
100121a4:	10018444 	.word	0x10018444
100121a8:	3ff00000 	.word	0x3ff00000
100121ac:	fff00000 	.word	0xfff00000
100121b0:	47efffff 	.word	0x47efffff
100121b4:	3fe00000 	.word	0x3fe00000
100121b8:	c7efffff 	.word	0xc7efffff
100121bc:	7ff00000 	.word	0x7ff00000

100121c0 <sqrtf>:
100121c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100121c2:	2600      	movs	r6, #0
100121c4:	b08d      	sub	sp, #52	; 0x34
100121c6:	1c04      	adds	r4, r0, #0
100121c8:	f000 fe78 	bl	10012ebc <__ieee754_sqrtf>
100121cc:	4b23      	ldr	r3, [pc, #140]	; (1001225c <sqrtf+0x9c>)
100121ce:	1c05      	adds	r5, r0, #0
100121d0:	579e      	ldrsb	r6, [r3, r6]
100121d2:	1c73      	adds	r3, r6, #1
100121d4:	d00b      	beq.n	100121ee <sqrtf+0x2e>
100121d6:	1c21      	adds	r1, r4, #0
100121d8:	1c20      	adds	r0, r4, #0
100121da:	f002 f831 	bl	10014240 <__aeabi_fcmpun>
100121de:	1e07      	subs	r7, r0, #0
100121e0:	d105      	bne.n	100121ee <sqrtf+0x2e>
100121e2:	2100      	movs	r1, #0
100121e4:	1c20      	adds	r0, r4, #0
100121e6:	f001 f9c7 	bl	10013578 <__aeabi_fcmplt>
100121ea:	2800      	cmp	r0, #0
100121ec:	d102      	bne.n	100121f4 <sqrtf+0x34>
100121ee:	1c28      	adds	r0, r5, #0
100121f0:	b00d      	add	sp, #52	; 0x34
100121f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121f4:	2301      	movs	r3, #1
100121f6:	9302      	str	r3, [sp, #8]
100121f8:	4b19      	ldr	r3, [pc, #100]	; (10012260 <sqrtf+0xa0>)
100121fa:	1c20      	adds	r0, r4, #0
100121fc:	9303      	str	r3, [sp, #12]
100121fe:	970a      	str	r7, [sp, #40]	; 0x28
10012200:	f003 fecc 	bl	10015f9c <__aeabi_f2d>
10012204:	2200      	movs	r2, #0
10012206:	9006      	str	r0, [sp, #24]
10012208:	9107      	str	r1, [sp, #28]
1001220a:	9004      	str	r0, [sp, #16]
1001220c:	9105      	str	r1, [sp, #20]
1001220e:	2300      	movs	r3, #0
10012210:	2e00      	cmp	r6, #0
10012212:	d014      	beq.n	1001223e <sqrtf+0x7e>
10012214:	0010      	movs	r0, r2
10012216:	0019      	movs	r1, r3
10012218:	f002 fbfe 	bl	10014a18 <__aeabi_ddiv>
1001221c:	9008      	str	r0, [sp, #32]
1001221e:	9109      	str	r1, [sp, #36]	; 0x24
10012220:	2e02      	cmp	r6, #2
10012222:	d10e      	bne.n	10012242 <sqrtf+0x82>
10012224:	f003 ffb8 	bl	10016198 <__errno>
10012228:	2321      	movs	r3, #33	; 0x21
1001222a:	6003      	str	r3, [r0, #0]
1001222c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
1001222e:	9301      	str	r3, [sp, #4]
10012230:	2b00      	cmp	r3, #0
10012232:	d10c      	bne.n	1001224e <sqrtf+0x8e>
10012234:	9808      	ldr	r0, [sp, #32]
10012236:	9909      	ldr	r1, [sp, #36]	; 0x24
10012238:	f003 ff04 	bl	10016044 <__aeabi_d2f>
1001223c:	e7d8      	b.n	100121f0 <sqrtf+0x30>
1001223e:	9208      	str	r2, [sp, #32]
10012240:	9309      	str	r3, [sp, #36]	; 0x24
10012242:	a802      	add	r0, sp, #8
10012244:	f000 fea4 	bl	10012f90 <matherr>
10012248:	2800      	cmp	r0, #0
1001224a:	d1ef      	bne.n	1001222c <sqrtf+0x6c>
1001224c:	e7ea      	b.n	10012224 <sqrtf+0x64>
1001224e:	f003 ffa3 	bl	10016198 <__errno>
10012252:	9b0a      	ldr	r3, [sp, #40]	; 0x28
10012254:	9301      	str	r3, [sp, #4]
10012256:	6003      	str	r3, [r0, #0]
10012258:	e7ec      	b.n	10012234 <sqrtf+0x74>
1001225a:	46c0      	nop			; (mov r8, r8)
1001225c:	10018664 	.word	0x10018664
10012260:	10018448 	.word	0x10018448

10012264 <__ieee754_pow>:
10012264:	b5f0      	push	{r4, r5, r6, r7, lr}
10012266:	4656      	mov	r6, sl
10012268:	464d      	mov	r5, r9
1001226a:	4644      	mov	r4, r8
1001226c:	465f      	mov	r7, fp
1001226e:	b4f0      	push	{r4, r5, r6, r7}
10012270:	001c      	movs	r4, r3
10012272:	0013      	movs	r3, r2
10012274:	0067      	lsls	r7, r4, #1
10012276:	b091      	sub	sp, #68	; 0x44
10012278:	087f      	lsrs	r7, r7, #1
1001227a:	9300      	str	r3, [sp, #0]
1001227c:	9401      	str	r4, [sp, #4]
1001227e:	0006      	movs	r6, r0
10012280:	000d      	movs	r5, r1
10012282:	4680      	mov	r8, r0
10012284:	4689      	mov	r9, r1
10012286:	46a2      	mov	sl, r4
10012288:	433b      	orrs	r3, r7
1001228a:	d032      	beq.n	100122f2 <__ieee754_pow+0x8e>
1001228c:	4b6e      	ldr	r3, [pc, #440]	; (10012448 <__ieee754_pow+0x1e4>)
1001228e:	006c      	lsls	r4, r5, #1
10012290:	0864      	lsrs	r4, r4, #1
10012292:	429c      	cmp	r4, r3
10012294:	dc29      	bgt.n	100122ea <__ieee754_pow+0x86>
10012296:	d026      	beq.n	100122e6 <__ieee754_pow+0x82>
10012298:	429f      	cmp	r7, r3
1001229a:	dc26      	bgt.n	100122ea <__ieee754_pow+0x86>
1001229c:	4b6a      	ldr	r3, [pc, #424]	; (10012448 <__ieee754_pow+0x1e4>)
1001229e:	429f      	cmp	r7, r3
100122a0:	d100      	bne.n	100122a4 <__ieee754_pow+0x40>
100122a2:	e089      	b.n	100123b8 <__ieee754_pow+0x154>
100122a4:	2300      	movs	r3, #0
100122a6:	469b      	mov	fp, r3
100122a8:	464b      	mov	r3, r9
100122aa:	2b00      	cmp	r3, #0
100122ac:	da00      	bge.n	100122b0 <__ieee754_pow+0x4c>
100122ae:	e087      	b.n	100123c0 <__ieee754_pow+0x15c>
100122b0:	2a00      	cmp	r2, #0
100122b2:	d12f      	bne.n	10012314 <__ieee754_pow+0xb0>
100122b4:	4b64      	ldr	r3, [pc, #400]	; (10012448 <__ieee754_pow+0x1e4>)
100122b6:	429f      	cmp	r7, r3
100122b8:	d100      	bne.n	100122bc <__ieee754_pow+0x58>
100122ba:	e09f      	b.n	100123fc <__ieee754_pow+0x198>
100122bc:	4b63      	ldr	r3, [pc, #396]	; (1001244c <__ieee754_pow+0x1e8>)
100122be:	429f      	cmp	r7, r3
100122c0:	d05d      	beq.n	1001237e <__ieee754_pow+0x11a>
100122c2:	2380      	movs	r3, #128	; 0x80
100122c4:	05db      	lsls	r3, r3, #23
100122c6:	459a      	cmp	sl, r3
100122c8:	d101      	bne.n	100122ce <__ieee754_pow+0x6a>
100122ca:	f000 fbc1 	bl	10012a50 <__ieee754_pow+0x7ec>
100122ce:	4b60      	ldr	r3, [pc, #384]	; (10012450 <__ieee754_pow+0x1ec>)
100122d0:	459a      	cmp	sl, r3
100122d2:	d11f      	bne.n	10012314 <__ieee754_pow+0xb0>
100122d4:	464b      	mov	r3, r9
100122d6:	2b00      	cmp	r3, #0
100122d8:	db1c      	blt.n	10012314 <__ieee754_pow+0xb0>
100122da:	0030      	movs	r0, r6
100122dc:	0029      	movs	r1, r5
100122de:	f000 fcf7 	bl	10012cd0 <__ieee754_sqrt>
100122e2:	0006      	movs	r6, r0
100122e4:	e007      	b.n	100122f6 <__ieee754_pow+0x92>
100122e6:	2800      	cmp	r0, #0
100122e8:	d00d      	beq.n	10012306 <__ieee754_pow+0xa2>
100122ea:	4b5a      	ldr	r3, [pc, #360]	; (10012454 <__ieee754_pow+0x1f0>)
100122ec:	18e0      	adds	r0, r4, r3
100122ee:	4330      	orrs	r0, r6
100122f0:	d10b      	bne.n	1001230a <__ieee754_pow+0xa6>
100122f2:	2600      	movs	r6, #0
100122f4:	4955      	ldr	r1, [pc, #340]	; (1001244c <__ieee754_pow+0x1e8>)
100122f6:	0030      	movs	r0, r6
100122f8:	b011      	add	sp, #68	; 0x44
100122fa:	bc3c      	pop	{r2, r3, r4, r5}
100122fc:	4690      	mov	r8, r2
100122fe:	4699      	mov	r9, r3
10012300:	46a2      	mov	sl, r4
10012302:	46ab      	mov	fp, r5
10012304:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012306:	42a7      	cmp	r7, r4
10012308:	ddc8      	ble.n	1001229c <__ieee754_pow+0x38>
1001230a:	4853      	ldr	r0, [pc, #332]	; (10012458 <__ieee754_pow+0x1f4>)
1001230c:	f000 fe42 	bl	10012f94 <nan>
10012310:	0006      	movs	r6, r0
10012312:	e7f0      	b.n	100122f6 <__ieee754_pow+0x92>
10012314:	0030      	movs	r0, r6
10012316:	0029      	movs	r1, r5
10012318:	f000 fe2c 	bl	10012f74 <fabs>
1001231c:	4643      	mov	r3, r8
1001231e:	2b00      	cmp	r3, #0
10012320:	d01d      	beq.n	1001235e <__ieee754_pow+0xfa>
10012322:	0feb      	lsrs	r3, r5, #31
10012324:	3b01      	subs	r3, #1
10012326:	4698      	mov	r8, r3
10012328:	465b      	mov	r3, fp
1001232a:	4642      	mov	r2, r8
1001232c:	4313      	orrs	r3, r2
1001232e:	d079      	beq.n	10012424 <__ieee754_pow+0x1c0>
10012330:	4b4a      	ldr	r3, [pc, #296]	; (1001245c <__ieee754_pow+0x1f8>)
10012332:	429f      	cmp	r7, r3
10012334:	dc00      	bgt.n	10012338 <__ieee754_pow+0xd4>
10012336:	e09f      	b.n	10012478 <__ieee754_pow+0x214>
10012338:	4b49      	ldr	r3, [pc, #292]	; (10012460 <__ieee754_pow+0x1fc>)
1001233a:	429f      	cmp	r7, r3
1001233c:	dc01      	bgt.n	10012342 <__ieee754_pow+0xde>
1001233e:	f000 fbce 	bl	10012ade <__ieee754_pow+0x87a>
10012342:	4b48      	ldr	r3, [pc, #288]	; (10012464 <__ieee754_pow+0x200>)
10012344:	429c      	cmp	r4, r3
10012346:	dd79      	ble.n	1001243c <__ieee754_pow+0x1d8>
10012348:	4653      	mov	r3, sl
1001234a:	2b00      	cmp	r3, #0
1001234c:	dd79      	ble.n	10012442 <__ieee754_pow+0x1de>
1001234e:	4a46      	ldr	r2, [pc, #280]	; (10012468 <__ieee754_pow+0x204>)
10012350:	4b46      	ldr	r3, [pc, #280]	; (1001246c <__ieee754_pow+0x208>)
10012352:	0010      	movs	r0, r2
10012354:	0019      	movs	r1, r3
10012356:	f002 ff83 	bl	10015260 <__aeabi_dmul>
1001235a:	0006      	movs	r6, r0
1001235c:	e7cb      	b.n	100122f6 <__ieee754_pow+0x92>
1001235e:	2c00      	cmp	r4, #0
10012360:	d004      	beq.n	1001236c <__ieee754_pow+0x108>
10012362:	4a3a      	ldr	r2, [pc, #232]	; (1001244c <__ieee754_pow+0x1e8>)
10012364:	00ab      	lsls	r3, r5, #2
10012366:	089b      	lsrs	r3, r3, #2
10012368:	4293      	cmp	r3, r2
1001236a:	d1da      	bne.n	10012322 <__ieee754_pow+0xbe>
1001236c:	4653      	mov	r3, sl
1001236e:	2b00      	cmp	r3, #0
10012370:	da00      	bge.n	10012374 <__ieee754_pow+0x110>
10012372:	e3ad      	b.n	10012ad0 <__ieee754_pow+0x86c>
10012374:	464b      	mov	r3, r9
10012376:	2b00      	cmp	r3, #0
10012378:	db0d      	blt.n	10012396 <__ieee754_pow+0x132>
1001237a:	0006      	movs	r6, r0
1001237c:	e7bb      	b.n	100122f6 <__ieee754_pow+0x92>
1001237e:	4653      	mov	r3, sl
10012380:	0029      	movs	r1, r5
10012382:	2b00      	cmp	r3, #0
10012384:	dab7      	bge.n	100122f6 <__ieee754_pow+0x92>
10012386:	0032      	movs	r2, r6
10012388:	002b      	movs	r3, r5
1001238a:	2000      	movs	r0, #0
1001238c:	492f      	ldr	r1, [pc, #188]	; (1001244c <__ieee754_pow+0x1e8>)
1001238e:	f002 fb43 	bl	10014a18 <__aeabi_ddiv>
10012392:	0006      	movs	r6, r0
10012394:	e7af      	b.n	100122f6 <__ieee754_pow+0x92>
10012396:	4b2f      	ldr	r3, [pc, #188]	; (10012454 <__ieee754_pow+0x1f0>)
10012398:	469c      	mov	ip, r3
1001239a:	465b      	mov	r3, fp
1001239c:	4464      	add	r4, ip
1001239e:	431c      	orrs	r4, r3
100123a0:	d101      	bne.n	100123a6 <__ieee754_pow+0x142>
100123a2:	f000 fc2b 	bl	10012bfc <__ieee754_pow+0x998>
100123a6:	465b      	mov	r3, fp
100123a8:	0006      	movs	r6, r0
100123aa:	2b01      	cmp	r3, #1
100123ac:	d1a3      	bne.n	100122f6 <__ieee754_pow+0x92>
100123ae:	2380      	movs	r3, #128	; 0x80
100123b0:	061b      	lsls	r3, r3, #24
100123b2:	469c      	mov	ip, r3
100123b4:	4461      	add	r1, ip
100123b6:	e79e      	b.n	100122f6 <__ieee754_pow+0x92>
100123b8:	2a00      	cmp	r2, #0
100123ba:	d100      	bne.n	100123be <__ieee754_pow+0x15a>
100123bc:	e772      	b.n	100122a4 <__ieee754_pow+0x40>
100123be:	e794      	b.n	100122ea <__ieee754_pow+0x86>
100123c0:	4b2b      	ldr	r3, [pc, #172]	; (10012470 <__ieee754_pow+0x20c>)
100123c2:	429f      	cmp	r7, r3
100123c4:	dc2b      	bgt.n	1001241e <__ieee754_pow+0x1ba>
100123c6:	4b27      	ldr	r3, [pc, #156]	; (10012464 <__ieee754_pow+0x200>)
100123c8:	429f      	cmp	r7, r3
100123ca:	dc00      	bgt.n	100123ce <__ieee754_pow+0x16a>
100123cc:	e770      	b.n	100122b0 <__ieee754_pow+0x4c>
100123ce:	4929      	ldr	r1, [pc, #164]	; (10012474 <__ieee754_pow+0x210>)
100123d0:	153b      	asrs	r3, r7, #20
100123d2:	468c      	mov	ip, r1
100123d4:	4463      	add	r3, ip
100123d6:	2b14      	cmp	r3, #20
100123d8:	dc01      	bgt.n	100123de <__ieee754_pow+0x17a>
100123da:	f000 fbf2 	bl	10012bc2 <__ieee754_pow+0x95e>
100123de:	2134      	movs	r1, #52	; 0x34
100123e0:	1acb      	subs	r3, r1, r3
100123e2:	9900      	ldr	r1, [sp, #0]
100123e4:	40d9      	lsrs	r1, r3
100123e6:	0008      	movs	r0, r1
100123e8:	4098      	lsls	r0, r3
100123ea:	4282      	cmp	r2, r0
100123ec:	d000      	beq.n	100123f0 <__ieee754_pow+0x18c>
100123ee:	e75f      	b.n	100122b0 <__ieee754_pow+0x4c>
100123f0:	2301      	movs	r3, #1
100123f2:	4019      	ands	r1, r3
100123f4:	3301      	adds	r3, #1
100123f6:	1a5b      	subs	r3, r3, r1
100123f8:	469b      	mov	fp, r3
100123fa:	e759      	b.n	100122b0 <__ieee754_pow+0x4c>
100123fc:	4b15      	ldr	r3, [pc, #84]	; (10012454 <__ieee754_pow+0x1f0>)
100123fe:	18e0      	adds	r0, r4, r3
10012400:	4306      	orrs	r6, r0
10012402:	d100      	bne.n	10012406 <__ieee754_pow+0x1a2>
10012404:	e775      	b.n	100122f2 <__ieee754_pow+0x8e>
10012406:	4b17      	ldr	r3, [pc, #92]	; (10012464 <__ieee754_pow+0x200>)
10012408:	429c      	cmp	r4, r3
1001240a:	dc00      	bgt.n	1001240e <__ieee754_pow+0x1aa>
1001240c:	e351      	b.n	10012ab2 <__ieee754_pow+0x84e>
1001240e:	4653      	mov	r3, sl
10012410:	2b00      	cmp	r3, #0
10012412:	db16      	blt.n	10012442 <__ieee754_pow+0x1de>
10012414:	9b00      	ldr	r3, [sp, #0]
10012416:	9c01      	ldr	r4, [sp, #4]
10012418:	001e      	movs	r6, r3
1001241a:	0021      	movs	r1, r4
1001241c:	e76b      	b.n	100122f6 <__ieee754_pow+0x92>
1001241e:	2302      	movs	r3, #2
10012420:	469b      	mov	fp, r3
10012422:	e745      	b.n	100122b0 <__ieee754_pow+0x4c>
10012424:	0032      	movs	r2, r6
10012426:	002b      	movs	r3, r5
10012428:	0030      	movs	r0, r6
1001242a:	0029      	movs	r1, r5
1001242c:	f003 f992 	bl	10015754 <__aeabi_dsub>
10012430:	0002      	movs	r2, r0
10012432:	000b      	movs	r3, r1
10012434:	f002 faf0 	bl	10014a18 <__aeabi_ddiv>
10012438:	0006      	movs	r6, r0
1001243a:	e75c      	b.n	100122f6 <__ieee754_pow+0x92>
1001243c:	4653      	mov	r3, sl
1001243e:	2b00      	cmp	r3, #0
10012440:	db85      	blt.n	1001234e <__ieee754_pow+0xea>
10012442:	2600      	movs	r6, #0
10012444:	2100      	movs	r1, #0
10012446:	e756      	b.n	100122f6 <__ieee754_pow+0x92>
10012448:	7ff00000 	.word	0x7ff00000
1001244c:	3ff00000 	.word	0x3ff00000
10012450:	3fe00000 	.word	0x3fe00000
10012454:	c0100000 	.word	0xc0100000
10012458:	100183d0 	.word	0x100183d0
1001245c:	41e00000 	.word	0x41e00000
10012460:	43f00000 	.word	0x43f00000
10012464:	3fefffff 	.word	0x3fefffff
10012468:	8800759c 	.word	0x8800759c
1001246c:	7e37e43c 	.word	0x7e37e43c
10012470:	433fffff 	.word	0x433fffff
10012474:	fffffc01 	.word	0xfffffc01
10012478:	4be8      	ldr	r3, [pc, #928]	; (1001281c <__ieee754_pow+0x5b8>)
1001247a:	2200      	movs	r2, #0
1001247c:	429c      	cmp	r4, r3
1001247e:	dc06      	bgt.n	1001248e <__ieee754_pow+0x22a>
10012480:	2200      	movs	r2, #0
10012482:	4be7      	ldr	r3, [pc, #924]	; (10012820 <__ieee754_pow+0x5bc>)
10012484:	f002 feec 	bl	10015260 <__aeabi_dmul>
10012488:	2235      	movs	r2, #53	; 0x35
1001248a:	000c      	movs	r4, r1
1001248c:	4252      	negs	r2, r2
1001248e:	4de5      	ldr	r5, [pc, #916]	; (10012824 <__ieee754_pow+0x5c0>)
10012490:	1523      	asrs	r3, r4, #20
10012492:	46ac      	mov	ip, r5
10012494:	4463      	add	r3, ip
10012496:	4699      	mov	r9, r3
10012498:	0324      	lsls	r4, r4, #12
1001249a:	4de3      	ldr	r5, [pc, #908]	; (10012828 <__ieee754_pow+0x5c4>)
1001249c:	4be3      	ldr	r3, [pc, #908]	; (1001282c <__ieee754_pow+0x5c8>)
1001249e:	0b24      	lsrs	r4, r4, #12
100124a0:	4491      	add	r9, r2
100124a2:	4325      	orrs	r5, r4
100124a4:	429c      	cmp	r4, r3
100124a6:	dd09      	ble.n	100124bc <__ieee754_pow+0x258>
100124a8:	4be1      	ldr	r3, [pc, #900]	; (10012830 <__ieee754_pow+0x5cc>)
100124aa:	429c      	cmp	r4, r3
100124ac:	dc00      	bgt.n	100124b0 <__ieee754_pow+0x24c>
100124ae:	e3a9      	b.n	10012c04 <__ieee754_pow+0x9a0>
100124b0:	2301      	movs	r3, #1
100124b2:	469c      	mov	ip, r3
100124b4:	4bdf      	ldr	r3, [pc, #892]	; (10012834 <__ieee754_pow+0x5d0>)
100124b6:	44e1      	add	r9, ip
100124b8:	469c      	mov	ip, r3
100124ba:	4465      	add	r5, ip
100124bc:	2300      	movs	r3, #0
100124be:	2400      	movs	r4, #0
100124c0:	2200      	movs	r2, #0
100124c2:	9308      	str	r3, [sp, #32]
100124c4:	9409      	str	r4, [sp, #36]	; 0x24
100124c6:	930c      	str	r3, [sp, #48]	; 0x30
100124c8:	940d      	str	r4, [sp, #52]	; 0x34
100124ca:	2400      	movs	r4, #0
100124cc:	4bd6      	ldr	r3, [pc, #856]	; (10012828 <__ieee754_pow+0x5c4>)
100124ce:	9206      	str	r2, [sp, #24]
100124d0:	9307      	str	r3, [sp, #28]
100124d2:	9a06      	ldr	r2, [sp, #24]
100124d4:	9b07      	ldr	r3, [sp, #28]
100124d6:	0029      	movs	r1, r5
100124d8:	900a      	str	r0, [sp, #40]	; 0x28
100124da:	910b      	str	r1, [sp, #44]	; 0x2c
100124dc:	f003 f93a 	bl	10015754 <__aeabi_dsub>
100124e0:	9a06      	ldr	r2, [sp, #24]
100124e2:	9b07      	ldr	r3, [sp, #28]
100124e4:	0006      	movs	r6, r0
100124e6:	000f      	movs	r7, r1
100124e8:	980a      	ldr	r0, [sp, #40]	; 0x28
100124ea:	990b      	ldr	r1, [sp, #44]	; 0x2c
100124ec:	f001 ff68 	bl	100143c0 <__aeabi_dadd>
100124f0:	0002      	movs	r2, r0
100124f2:	000b      	movs	r3, r1
100124f4:	2000      	movs	r0, #0
100124f6:	49cc      	ldr	r1, [pc, #816]	; (10012828 <__ieee754_pow+0x5c4>)
100124f8:	f002 fa8e 	bl	10014a18 <__aeabi_ddiv>
100124fc:	000a      	movs	r2, r1
100124fe:	0001      	movs	r1, r0
10012500:	0013      	movs	r3, r2
10012502:	910e      	str	r1, [sp, #56]	; 0x38
10012504:	920f      	str	r2, [sp, #60]	; 0x3c
10012506:	0002      	movs	r2, r0
10012508:	0039      	movs	r1, r7
1001250a:	0030      	movs	r0, r6
1001250c:	f002 fea8 	bl	10015260 <__aeabi_dmul>
10012510:	000a      	movs	r2, r1
10012512:	0001      	movs	r1, r0
10012514:	2080      	movs	r0, #128	; 0x80
10012516:	9104      	str	r1, [sp, #16]
10012518:	9205      	str	r2, [sp, #20]
1001251a:	0013      	movs	r3, r2
1001251c:	2200      	movs	r2, #0
1001251e:	2180      	movs	r1, #128	; 0x80
10012520:	0300      	lsls	r0, r0, #12
10012522:	4684      	mov	ip, r0
10012524:	9202      	str	r2, [sp, #8]
10012526:	9303      	str	r3, [sp, #12]
10012528:	2200      	movs	r2, #0
1001252a:	0589      	lsls	r1, r1, #22
1001252c:	106d      	asrs	r5, r5, #1
1001252e:	430d      	orrs	r5, r1
10012530:	4465      	add	r5, ip
10012532:	192b      	adds	r3, r5, r4
10012534:	9802      	ldr	r0, [sp, #8]
10012536:	9903      	ldr	r1, [sp, #12]
10012538:	0014      	movs	r4, r2
1001253a:	001d      	movs	r5, r3
1001253c:	f002 fe90 	bl	10015260 <__aeabi_dmul>
10012540:	0002      	movs	r2, r0
10012542:	000b      	movs	r3, r1
10012544:	0030      	movs	r0, r6
10012546:	0039      	movs	r1, r7
10012548:	f003 f904 	bl	10015754 <__aeabi_dsub>
1001254c:	9a06      	ldr	r2, [sp, #24]
1001254e:	9b07      	ldr	r3, [sp, #28]
10012550:	0006      	movs	r6, r0
10012552:	000f      	movs	r7, r1
10012554:	0020      	movs	r0, r4
10012556:	0029      	movs	r1, r5
10012558:	f003 f8fc 	bl	10015754 <__aeabi_dsub>
1001255c:	0002      	movs	r2, r0
1001255e:	000b      	movs	r3, r1
10012560:	980a      	ldr	r0, [sp, #40]	; 0x28
10012562:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012564:	f003 f8f6 	bl	10015754 <__aeabi_dsub>
10012568:	9a02      	ldr	r2, [sp, #8]
1001256a:	9b03      	ldr	r3, [sp, #12]
1001256c:	f002 fe78 	bl	10015260 <__aeabi_dmul>
10012570:	0002      	movs	r2, r0
10012572:	000b      	movs	r3, r1
10012574:	0030      	movs	r0, r6
10012576:	0039      	movs	r1, r7
10012578:	f003 f8ec 	bl	10015754 <__aeabi_dsub>
1001257c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
1001257e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10012580:	f002 fe6e 	bl	10015260 <__aeabi_dmul>
10012584:	9d04      	ldr	r5, [sp, #16]
10012586:	9e05      	ldr	r6, [sp, #20]
10012588:	9006      	str	r0, [sp, #24]
1001258a:	9107      	str	r1, [sp, #28]
1001258c:	002a      	movs	r2, r5
1001258e:	0033      	movs	r3, r6
10012590:	0028      	movs	r0, r5
10012592:	0031      	movs	r1, r6
10012594:	f002 fe64 	bl	10015260 <__aeabi_dmul>
10012598:	0006      	movs	r6, r0
1001259a:	000f      	movs	r7, r1
1001259c:	4aa6      	ldr	r2, [pc, #664]	; (10012838 <__ieee754_pow+0x5d4>)
1001259e:	4ba7      	ldr	r3, [pc, #668]	; (1001283c <__ieee754_pow+0x5d8>)
100125a0:	f002 fe5e 	bl	10015260 <__aeabi_dmul>
100125a4:	4aa6      	ldr	r2, [pc, #664]	; (10012840 <__ieee754_pow+0x5dc>)
100125a6:	4ba7      	ldr	r3, [pc, #668]	; (10012844 <__ieee754_pow+0x5e0>)
100125a8:	f001 ff0a 	bl	100143c0 <__aeabi_dadd>
100125ac:	0032      	movs	r2, r6
100125ae:	003b      	movs	r3, r7
100125b0:	f002 fe56 	bl	10015260 <__aeabi_dmul>
100125b4:	4aa4      	ldr	r2, [pc, #656]	; (10012848 <__ieee754_pow+0x5e4>)
100125b6:	4ba5      	ldr	r3, [pc, #660]	; (1001284c <__ieee754_pow+0x5e8>)
100125b8:	f001 ff02 	bl	100143c0 <__aeabi_dadd>
100125bc:	0032      	movs	r2, r6
100125be:	003b      	movs	r3, r7
100125c0:	f002 fe4e 	bl	10015260 <__aeabi_dmul>
100125c4:	4aa2      	ldr	r2, [pc, #648]	; (10012850 <__ieee754_pow+0x5ec>)
100125c6:	4ba3      	ldr	r3, [pc, #652]	; (10012854 <__ieee754_pow+0x5f0>)
100125c8:	f001 fefa 	bl	100143c0 <__aeabi_dadd>
100125cc:	0032      	movs	r2, r6
100125ce:	003b      	movs	r3, r7
100125d0:	f002 fe46 	bl	10015260 <__aeabi_dmul>
100125d4:	4aa0      	ldr	r2, [pc, #640]	; (10012858 <__ieee754_pow+0x5f4>)
100125d6:	4ba1      	ldr	r3, [pc, #644]	; (1001285c <__ieee754_pow+0x5f8>)
100125d8:	f001 fef2 	bl	100143c0 <__aeabi_dadd>
100125dc:	0032      	movs	r2, r6
100125de:	003b      	movs	r3, r7
100125e0:	f002 fe3e 	bl	10015260 <__aeabi_dmul>
100125e4:	4a9e      	ldr	r2, [pc, #632]	; (10012860 <__ieee754_pow+0x5fc>)
100125e6:	4b9f      	ldr	r3, [pc, #636]	; (10012864 <__ieee754_pow+0x600>)
100125e8:	f001 feea 	bl	100143c0 <__aeabi_dadd>
100125ec:	0032      	movs	r2, r6
100125ee:	0004      	movs	r4, r0
100125f0:	000d      	movs	r5, r1
100125f2:	003b      	movs	r3, r7
100125f4:	0030      	movs	r0, r6
100125f6:	0039      	movs	r1, r7
100125f8:	f002 fe32 	bl	10015260 <__aeabi_dmul>
100125fc:	0002      	movs	r2, r0
100125fe:	000b      	movs	r3, r1
10012600:	0020      	movs	r0, r4
10012602:	0029      	movs	r1, r5
10012604:	f002 fe2c 	bl	10015260 <__aeabi_dmul>
10012608:	9e02      	ldr	r6, [sp, #8]
1001260a:	9f03      	ldr	r7, [sp, #12]
1001260c:	0004      	movs	r4, r0
1001260e:	000d      	movs	r5, r1
10012610:	9804      	ldr	r0, [sp, #16]
10012612:	9905      	ldr	r1, [sp, #20]
10012614:	0032      	movs	r2, r6
10012616:	003b      	movs	r3, r7
10012618:	f001 fed2 	bl	100143c0 <__aeabi_dadd>
1001261c:	9a06      	ldr	r2, [sp, #24]
1001261e:	9b07      	ldr	r3, [sp, #28]
10012620:	f002 fe1e 	bl	10015260 <__aeabi_dmul>
10012624:	0022      	movs	r2, r4
10012626:	002b      	movs	r3, r5
10012628:	f001 feca 	bl	100143c0 <__aeabi_dadd>
1001262c:	0032      	movs	r2, r6
1001262e:	900a      	str	r0, [sp, #40]	; 0x28
10012630:	910b      	str	r1, [sp, #44]	; 0x2c
10012632:	003b      	movs	r3, r7
10012634:	0030      	movs	r0, r6
10012636:	0039      	movs	r1, r7
10012638:	9602      	str	r6, [sp, #8]
1001263a:	9703      	str	r7, [sp, #12]
1001263c:	f002 fe10 	bl	10015260 <__aeabi_dmul>
10012640:	2200      	movs	r2, #0
10012642:	4b89      	ldr	r3, [pc, #548]	; (10012868 <__ieee754_pow+0x604>)
10012644:	0004      	movs	r4, r0
10012646:	000d      	movs	r5, r1
10012648:	f001 feba 	bl	100143c0 <__aeabi_dadd>
1001264c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
1001264e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10012650:	f001 feb6 	bl	100143c0 <__aeabi_dadd>
10012654:	2600      	movs	r6, #0
10012656:	000f      	movs	r7, r1
10012658:	0032      	movs	r2, r6
1001265a:	000b      	movs	r3, r1
1001265c:	9802      	ldr	r0, [sp, #8]
1001265e:	9903      	ldr	r1, [sp, #12]
10012660:	f002 fdfe 	bl	10015260 <__aeabi_dmul>
10012664:	2200      	movs	r2, #0
10012666:	9002      	str	r0, [sp, #8]
10012668:	9103      	str	r1, [sp, #12]
1001266a:	4b7f      	ldr	r3, [pc, #508]	; (10012868 <__ieee754_pow+0x604>)
1001266c:	0030      	movs	r0, r6
1001266e:	0039      	movs	r1, r7
10012670:	f003 f870 	bl	10015754 <__aeabi_dsub>
10012674:	0022      	movs	r2, r4
10012676:	002b      	movs	r3, r5
10012678:	f003 f86c 	bl	10015754 <__aeabi_dsub>
1001267c:	0002      	movs	r2, r0
1001267e:	000b      	movs	r3, r1
10012680:	980a      	ldr	r0, [sp, #40]	; 0x28
10012682:	990b      	ldr	r1, [sp, #44]	; 0x2c
10012684:	f003 f866 	bl	10015754 <__aeabi_dsub>
10012688:	9a04      	ldr	r2, [sp, #16]
1001268a:	9b05      	ldr	r3, [sp, #20]
1001268c:	f002 fde8 	bl	10015260 <__aeabi_dmul>
10012690:	0032      	movs	r2, r6
10012692:	0004      	movs	r4, r0
10012694:	000d      	movs	r5, r1
10012696:	9806      	ldr	r0, [sp, #24]
10012698:	9907      	ldr	r1, [sp, #28]
1001269a:	003b      	movs	r3, r7
1001269c:	f002 fde0 	bl	10015260 <__aeabi_dmul>
100126a0:	0002      	movs	r2, r0
100126a2:	000b      	movs	r3, r1
100126a4:	0020      	movs	r0, r4
100126a6:	0029      	movs	r1, r5
100126a8:	f001 fe8a 	bl	100143c0 <__aeabi_dadd>
100126ac:	0004      	movs	r4, r0
100126ae:	000d      	movs	r5, r1
100126b0:	0002      	movs	r2, r0
100126b2:	000b      	movs	r3, r1
100126b4:	9802      	ldr	r0, [sp, #8]
100126b6:	9903      	ldr	r1, [sp, #12]
100126b8:	f001 fe82 	bl	100143c0 <__aeabi_dadd>
100126bc:	2600      	movs	r6, #0
100126be:	22e0      	movs	r2, #224	; 0xe0
100126c0:	4b6a      	ldr	r3, [pc, #424]	; (1001286c <__ieee754_pow+0x608>)
100126c2:	0612      	lsls	r2, r2, #24
100126c4:	0030      	movs	r0, r6
100126c6:	000f      	movs	r7, r1
100126c8:	f002 fdca 	bl	10015260 <__aeabi_dmul>
100126cc:	9a02      	ldr	r2, [sp, #8]
100126ce:	9b03      	ldr	r3, [sp, #12]
100126d0:	9004      	str	r0, [sp, #16]
100126d2:	9105      	str	r1, [sp, #20]
100126d4:	0030      	movs	r0, r6
100126d6:	0039      	movs	r1, r7
100126d8:	f003 f83c 	bl	10015754 <__aeabi_dsub>
100126dc:	0002      	movs	r2, r0
100126de:	000b      	movs	r3, r1
100126e0:	0020      	movs	r0, r4
100126e2:	0029      	movs	r1, r5
100126e4:	f003 f836 	bl	10015754 <__aeabi_dsub>
100126e8:	4a61      	ldr	r2, [pc, #388]	; (10012870 <__ieee754_pow+0x60c>)
100126ea:	4b60      	ldr	r3, [pc, #384]	; (1001286c <__ieee754_pow+0x608>)
100126ec:	f002 fdb8 	bl	10015260 <__aeabi_dmul>
100126f0:	4a60      	ldr	r2, [pc, #384]	; (10012874 <__ieee754_pow+0x610>)
100126f2:	0004      	movs	r4, r0
100126f4:	000d      	movs	r5, r1
100126f6:	4b60      	ldr	r3, [pc, #384]	; (10012878 <__ieee754_pow+0x614>)
100126f8:	0030      	movs	r0, r6
100126fa:	0039      	movs	r1, r7
100126fc:	f002 fdb0 	bl	10015260 <__aeabi_dmul>
10012700:	0002      	movs	r2, r0
10012702:	000b      	movs	r3, r1
10012704:	0020      	movs	r0, r4
10012706:	0029      	movs	r1, r5
10012708:	f001 fe5a 	bl	100143c0 <__aeabi_dadd>
1001270c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1001270e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10012710:	f001 fe56 	bl	100143c0 <__aeabi_dadd>
10012714:	0006      	movs	r6, r0
10012716:	4648      	mov	r0, r9
10012718:	000f      	movs	r7, r1
1001271a:	f003 fbc5 	bl	10015ea8 <__aeabi_i2d>
1001271e:	0004      	movs	r4, r0
10012720:	000d      	movs	r5, r1
10012722:	9804      	ldr	r0, [sp, #16]
10012724:	9905      	ldr	r1, [sp, #20]
10012726:	0032      	movs	r2, r6
10012728:	003b      	movs	r3, r7
1001272a:	f001 fe49 	bl	100143c0 <__aeabi_dadd>
1001272e:	9a08      	ldr	r2, [sp, #32]
10012730:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012732:	f001 fe45 	bl	100143c0 <__aeabi_dadd>
10012736:	0022      	movs	r2, r4
10012738:	002b      	movs	r3, r5
1001273a:	f001 fe41 	bl	100143c0 <__aeabi_dadd>
1001273e:	2000      	movs	r0, #0
10012740:	0022      	movs	r2, r4
10012742:	002b      	movs	r3, r5
10012744:	9002      	str	r0, [sp, #8]
10012746:	9103      	str	r1, [sp, #12]
10012748:	f003 f804 	bl	10015754 <__aeabi_dsub>
1001274c:	9a08      	ldr	r2, [sp, #32]
1001274e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012750:	f003 f800 	bl	10015754 <__aeabi_dsub>
10012754:	9a04      	ldr	r2, [sp, #16]
10012756:	9b05      	ldr	r3, [sp, #20]
10012758:	f002 fffc 	bl	10015754 <__aeabi_dsub>
1001275c:	0002      	movs	r2, r0
1001275e:	000b      	movs	r3, r1
10012760:	0030      	movs	r0, r6
10012762:	0039      	movs	r1, r7
10012764:	f002 fff6 	bl	10015754 <__aeabi_dsub>
10012768:	9004      	str	r0, [sp, #16]
1001276a:	9105      	str	r1, [sp, #20]
1001276c:	465b      	mov	r3, fp
1001276e:	4642      	mov	r2, r8
10012770:	3b01      	subs	r3, #1
10012772:	4313      	orrs	r3, r2
10012774:	d100      	bne.n	10012778 <__ieee754_pow+0x514>
10012776:	e197      	b.n	10012aa8 <__ieee754_pow+0x844>
10012778:	2300      	movs	r3, #0
1001277a:	4c2b      	ldr	r4, [pc, #172]	; (10012828 <__ieee754_pow+0x5c4>)
1001277c:	9306      	str	r3, [sp, #24]
1001277e:	9407      	str	r4, [sp, #28]
10012780:	9800      	ldr	r0, [sp, #0]
10012782:	9901      	ldr	r1, [sp, #4]
10012784:	2600      	movs	r6, #0
10012786:	000b      	movs	r3, r1
10012788:	0032      	movs	r2, r6
1001278a:	000f      	movs	r7, r1
1001278c:	f002 ffe2 	bl	10015754 <__aeabi_dsub>
10012790:	9a02      	ldr	r2, [sp, #8]
10012792:	9b03      	ldr	r3, [sp, #12]
10012794:	f002 fd64 	bl	10015260 <__aeabi_dmul>
10012798:	9a00      	ldr	r2, [sp, #0]
1001279a:	9b01      	ldr	r3, [sp, #4]
1001279c:	0004      	movs	r4, r0
1001279e:	000d      	movs	r5, r1
100127a0:	9804      	ldr	r0, [sp, #16]
100127a2:	9905      	ldr	r1, [sp, #20]
100127a4:	f002 fd5c 	bl	10015260 <__aeabi_dmul>
100127a8:	0002      	movs	r2, r0
100127aa:	000b      	movs	r3, r1
100127ac:	0020      	movs	r0, r4
100127ae:	0029      	movs	r1, r5
100127b0:	f001 fe06 	bl	100143c0 <__aeabi_dadd>
100127b4:	0004      	movs	r4, r0
100127b6:	000d      	movs	r5, r1
100127b8:	9802      	ldr	r0, [sp, #8]
100127ba:	9903      	ldr	r1, [sp, #12]
100127bc:	003b      	movs	r3, r7
100127be:	0032      	movs	r2, r6
100127c0:	9404      	str	r4, [sp, #16]
100127c2:	9505      	str	r5, [sp, #20]
100127c4:	f002 fd4c 	bl	10015260 <__aeabi_dmul>
100127c8:	9000      	str	r0, [sp, #0]
100127ca:	9101      	str	r1, [sp, #4]
100127cc:	000b      	movs	r3, r1
100127ce:	0002      	movs	r2, r0
100127d0:	0029      	movs	r1, r5
100127d2:	0020      	movs	r0, r4
100127d4:	f001 fdf4 	bl	100143c0 <__aeabi_dadd>
100127d8:	4b28      	ldr	r3, [pc, #160]	; (1001287c <__ieee754_pow+0x618>)
100127da:	4681      	mov	r9, r0
100127dc:	1e0f      	subs	r7, r1, #0
100127de:	468a      	mov	sl, r1
100127e0:	429f      	cmp	r7, r3
100127e2:	dc00      	bgt.n	100127e6 <__ieee754_pow+0x582>
100127e4:	e13c      	b.n	10012a60 <__ieee754_pow+0x7fc>
100127e6:	4b26      	ldr	r3, [pc, #152]	; (10012880 <__ieee754_pow+0x61c>)
100127e8:	18cb      	adds	r3, r1, r3
100127ea:	4303      	orrs	r3, r0
100127ec:	d000      	beq.n	100127f0 <__ieee754_pow+0x58c>
100127ee:	e1db      	b.n	10012ba8 <__ieee754_pow+0x944>
100127f0:	9804      	ldr	r0, [sp, #16]
100127f2:	9905      	ldr	r1, [sp, #20]
100127f4:	4a23      	ldr	r2, [pc, #140]	; (10012884 <__ieee754_pow+0x620>)
100127f6:	4b24      	ldr	r3, [pc, #144]	; (10012888 <__ieee754_pow+0x624>)
100127f8:	f001 fde2 	bl	100143c0 <__aeabi_dadd>
100127fc:	9a00      	ldr	r2, [sp, #0]
100127fe:	9b01      	ldr	r3, [sp, #4]
10012800:	0004      	movs	r4, r0
10012802:	000d      	movs	r5, r1
10012804:	4648      	mov	r0, r9
10012806:	0039      	movs	r1, r7
10012808:	f002 ffa4 	bl	10015754 <__aeabi_dsub>
1001280c:	0002      	movs	r2, r0
1001280e:	000b      	movs	r3, r1
10012810:	0020      	movs	r0, r4
10012812:	0029      	movs	r1, r5
10012814:	f000 fe8a 	bl	1001352c <__aeabi_dcmpgt>
10012818:	003e      	movs	r6, r7
1001281a:	e037      	b.n	1001288c <__ieee754_pow+0x628>
1001281c:	000fffff 	.word	0x000fffff
10012820:	43400000 	.word	0x43400000
10012824:	fffffc01 	.word	0xfffffc01
10012828:	3ff00000 	.word	0x3ff00000
1001282c:	0003988e 	.word	0x0003988e
10012830:	000bb679 	.word	0x000bb679
10012834:	fff00000 	.word	0xfff00000
10012838:	4a454eef 	.word	0x4a454eef
1001283c:	3fca7e28 	.word	0x3fca7e28
10012840:	93c9db65 	.word	0x93c9db65
10012844:	3fcd864a 	.word	0x3fcd864a
10012848:	a91d4101 	.word	0xa91d4101
1001284c:	3fd17460 	.word	0x3fd17460
10012850:	518f264d 	.word	0x518f264d
10012854:	3fd55555 	.word	0x3fd55555
10012858:	db6fabff 	.word	0xdb6fabff
1001285c:	3fdb6db6 	.word	0x3fdb6db6
10012860:	33333303 	.word	0x33333303
10012864:	3fe33333 	.word	0x3fe33333
10012868:	40080000 	.word	0x40080000
1001286c:	3feec709 	.word	0x3feec709
10012870:	dc3a03fd 	.word	0xdc3a03fd
10012874:	145b01f5 	.word	0x145b01f5
10012878:	be3e2fe0 	.word	0xbe3e2fe0
1001287c:	408fffff 	.word	0x408fffff
10012880:	bf700000 	.word	0xbf700000
10012884:	652b82fe 	.word	0x652b82fe
10012888:	3c971547 	.word	0x3c971547
1001288c:	2800      	cmp	r0, #0
1001288e:	d000      	beq.n	10012892 <__ieee754_pow+0x62e>
10012890:	e18a      	b.n	10012ba8 <__ieee754_pow+0x944>
10012892:	2280      	movs	r2, #128	; 0x80
10012894:	4be7      	ldr	r3, [pc, #924]	; (10012c34 <__ieee754_pow+0x9d0>)
10012896:	0352      	lsls	r2, r2, #13
10012898:	469c      	mov	ip, r3
1001289a:	0013      	movs	r3, r2
1001289c:	1536      	asrs	r6, r6, #20
1001289e:	4466      	add	r6, ip
100128a0:	4133      	asrs	r3, r6
100128a2:	49e5      	ldr	r1, [pc, #916]	; (10012c38 <__ieee754_pow+0x9d4>)
100128a4:	19db      	adds	r3, r3, r7
100128a6:	005e      	lsls	r6, r3, #1
100128a8:	001c      	movs	r4, r3
100128aa:	031b      	lsls	r3, r3, #12
100128ac:	468c      	mov	ip, r1
100128ae:	0b1b      	lsrs	r3, r3, #12
100128b0:	4313      	orrs	r3, r2
100128b2:	2214      	movs	r2, #20
100128b4:	0d76      	lsrs	r6, r6, #21
100128b6:	4fe1      	ldr	r7, [pc, #900]	; (10012c3c <__ieee754_pow+0x9d8>)
100128b8:	4466      	add	r6, ip
100128ba:	4137      	asrs	r7, r6
100128bc:	1b96      	subs	r6, r2, r6
100128be:	4133      	asrs	r3, r6
100128c0:	4698      	mov	r8, r3
100128c2:	4653      	mov	r3, sl
100128c4:	43bc      	bics	r4, r7
100128c6:	2000      	movs	r0, #0
100128c8:	0021      	movs	r1, r4
100128ca:	2b00      	cmp	r3, #0
100128cc:	da00      	bge.n	100128d0 <__ieee754_pow+0x66c>
100128ce:	e1a9      	b.n	10012c24 <__ieee754_pow+0x9c0>
100128d0:	0002      	movs	r2, r0
100128d2:	000b      	movs	r3, r1
100128d4:	9800      	ldr	r0, [sp, #0]
100128d6:	9901      	ldr	r1, [sp, #4]
100128d8:	f002 ff3c 	bl	10015754 <__aeabi_dsub>
100128dc:	000b      	movs	r3, r1
100128de:	9000      	str	r0, [sp, #0]
100128e0:	9101      	str	r1, [sp, #4]
100128e2:	0002      	movs	r2, r0
100128e4:	9804      	ldr	r0, [sp, #16]
100128e6:	9905      	ldr	r1, [sp, #20]
100128e8:	f001 fd6a 	bl	100143c0 <__aeabi_dadd>
100128ec:	4643      	mov	r3, r8
100128ee:	051b      	lsls	r3, r3, #20
100128f0:	4699      	mov	r9, r3
100128f2:	2000      	movs	r0, #0
100128f4:	2200      	movs	r2, #0
100128f6:	4bd2      	ldr	r3, [pc, #840]	; (10012c40 <__ieee754_pow+0x9dc>)
100128f8:	0006      	movs	r6, r0
100128fa:	000f      	movs	r7, r1
100128fc:	f002 fcb0 	bl	10015260 <__aeabi_dmul>
10012900:	9a00      	ldr	r2, [sp, #0]
10012902:	9b01      	ldr	r3, [sp, #4]
10012904:	9002      	str	r0, [sp, #8]
10012906:	9103      	str	r1, [sp, #12]
10012908:	0030      	movs	r0, r6
1001290a:	0039      	movs	r1, r7
1001290c:	f002 ff22 	bl	10015754 <__aeabi_dsub>
10012910:	0002      	movs	r2, r0
10012912:	000b      	movs	r3, r1
10012914:	9804      	ldr	r0, [sp, #16]
10012916:	9905      	ldr	r1, [sp, #20]
10012918:	f002 ff1c 	bl	10015754 <__aeabi_dsub>
1001291c:	4ac9      	ldr	r2, [pc, #804]	; (10012c44 <__ieee754_pow+0x9e0>)
1001291e:	4bca      	ldr	r3, [pc, #808]	; (10012c48 <__ieee754_pow+0x9e4>)
10012920:	f002 fc9e 	bl	10015260 <__aeabi_dmul>
10012924:	4ac9      	ldr	r2, [pc, #804]	; (10012c4c <__ieee754_pow+0x9e8>)
10012926:	0004      	movs	r4, r0
10012928:	000d      	movs	r5, r1
1001292a:	4bc9      	ldr	r3, [pc, #804]	; (10012c50 <__ieee754_pow+0x9ec>)
1001292c:	0030      	movs	r0, r6
1001292e:	0039      	movs	r1, r7
10012930:	f002 fc96 	bl	10015260 <__aeabi_dmul>
10012934:	0002      	movs	r2, r0
10012936:	000b      	movs	r3, r1
10012938:	0020      	movs	r0, r4
1001293a:	0029      	movs	r1, r5
1001293c:	f001 fd40 	bl	100143c0 <__aeabi_dadd>
10012940:	0004      	movs	r4, r0
10012942:	000d      	movs	r5, r1
10012944:	0002      	movs	r2, r0
10012946:	000b      	movs	r3, r1
10012948:	9802      	ldr	r0, [sp, #8]
1001294a:	9903      	ldr	r1, [sp, #12]
1001294c:	f001 fd38 	bl	100143c0 <__aeabi_dadd>
10012950:	9a02      	ldr	r2, [sp, #8]
10012952:	9b03      	ldr	r3, [sp, #12]
10012954:	0006      	movs	r6, r0
10012956:	000f      	movs	r7, r1
10012958:	f002 fefc 	bl	10015754 <__aeabi_dsub>
1001295c:	0002      	movs	r2, r0
1001295e:	000b      	movs	r3, r1
10012960:	0020      	movs	r0, r4
10012962:	0029      	movs	r1, r5
10012964:	f002 fef6 	bl	10015754 <__aeabi_dsub>
10012968:	0032      	movs	r2, r6
1001296a:	9000      	str	r0, [sp, #0]
1001296c:	9101      	str	r1, [sp, #4]
1001296e:	003b      	movs	r3, r7
10012970:	0030      	movs	r0, r6
10012972:	0039      	movs	r1, r7
10012974:	f002 fc74 	bl	10015260 <__aeabi_dmul>
10012978:	0004      	movs	r4, r0
1001297a:	000d      	movs	r5, r1
1001297c:	4ab5      	ldr	r2, [pc, #724]	; (10012c54 <__ieee754_pow+0x9f0>)
1001297e:	4bb6      	ldr	r3, [pc, #728]	; (10012c58 <__ieee754_pow+0x9f4>)
10012980:	f002 fc6e 	bl	10015260 <__aeabi_dmul>
10012984:	4ab5      	ldr	r2, [pc, #724]	; (10012c5c <__ieee754_pow+0x9f8>)
10012986:	4bb6      	ldr	r3, [pc, #728]	; (10012c60 <__ieee754_pow+0x9fc>)
10012988:	f002 fee4 	bl	10015754 <__aeabi_dsub>
1001298c:	0022      	movs	r2, r4
1001298e:	002b      	movs	r3, r5
10012990:	f002 fc66 	bl	10015260 <__aeabi_dmul>
10012994:	4ab3      	ldr	r2, [pc, #716]	; (10012c64 <__ieee754_pow+0xa00>)
10012996:	4bb4      	ldr	r3, [pc, #720]	; (10012c68 <__ieee754_pow+0xa04>)
10012998:	f001 fd12 	bl	100143c0 <__aeabi_dadd>
1001299c:	0022      	movs	r2, r4
1001299e:	002b      	movs	r3, r5
100129a0:	f002 fc5e 	bl	10015260 <__aeabi_dmul>
100129a4:	4ab1      	ldr	r2, [pc, #708]	; (10012c6c <__ieee754_pow+0xa08>)
100129a6:	4bb2      	ldr	r3, [pc, #712]	; (10012c70 <__ieee754_pow+0xa0c>)
100129a8:	f002 fed4 	bl	10015754 <__aeabi_dsub>
100129ac:	0022      	movs	r2, r4
100129ae:	002b      	movs	r3, r5
100129b0:	f002 fc56 	bl	10015260 <__aeabi_dmul>
100129b4:	4aaf      	ldr	r2, [pc, #700]	; (10012c74 <__ieee754_pow+0xa10>)
100129b6:	4bb0      	ldr	r3, [pc, #704]	; (10012c78 <__ieee754_pow+0xa14>)
100129b8:	f001 fd02 	bl	100143c0 <__aeabi_dadd>
100129bc:	0022      	movs	r2, r4
100129be:	002b      	movs	r3, r5
100129c0:	f002 fc4e 	bl	10015260 <__aeabi_dmul>
100129c4:	0002      	movs	r2, r0
100129c6:	000b      	movs	r3, r1
100129c8:	0030      	movs	r0, r6
100129ca:	0039      	movs	r1, r7
100129cc:	f002 fec2 	bl	10015754 <__aeabi_dsub>
100129d0:	0004      	movs	r4, r0
100129d2:	000d      	movs	r5, r1
100129d4:	0002      	movs	r2, r0
100129d6:	000b      	movs	r3, r1
100129d8:	0030      	movs	r0, r6
100129da:	0039      	movs	r1, r7
100129dc:	f002 fc40 	bl	10015260 <__aeabi_dmul>
100129e0:	2380      	movs	r3, #128	; 0x80
100129e2:	9002      	str	r0, [sp, #8]
100129e4:	9103      	str	r1, [sp, #12]
100129e6:	2200      	movs	r2, #0
100129e8:	05db      	lsls	r3, r3, #23
100129ea:	0020      	movs	r0, r4
100129ec:	0029      	movs	r1, r5
100129ee:	f002 feb1 	bl	10015754 <__aeabi_dsub>
100129f2:	0002      	movs	r2, r0
100129f4:	000b      	movs	r3, r1
100129f6:	9802      	ldr	r0, [sp, #8]
100129f8:	9903      	ldr	r1, [sp, #12]
100129fa:	f002 f80d 	bl	10014a18 <__aeabi_ddiv>
100129fe:	9a00      	ldr	r2, [sp, #0]
10012a00:	9b01      	ldr	r3, [sp, #4]
10012a02:	0004      	movs	r4, r0
10012a04:	000d      	movs	r5, r1
10012a06:	0030      	movs	r0, r6
10012a08:	0039      	movs	r1, r7
10012a0a:	f002 fc29 	bl	10015260 <__aeabi_dmul>
10012a0e:	9a00      	ldr	r2, [sp, #0]
10012a10:	9b01      	ldr	r3, [sp, #4]
10012a12:	f001 fcd5 	bl	100143c0 <__aeabi_dadd>
10012a16:	0002      	movs	r2, r0
10012a18:	000b      	movs	r3, r1
10012a1a:	0020      	movs	r0, r4
10012a1c:	0029      	movs	r1, r5
10012a1e:	f002 fe99 	bl	10015754 <__aeabi_dsub>
10012a22:	0032      	movs	r2, r6
10012a24:	003b      	movs	r3, r7
10012a26:	f002 fe95 	bl	10015754 <__aeabi_dsub>
10012a2a:	0002      	movs	r2, r0
10012a2c:	000b      	movs	r3, r1
10012a2e:	2000      	movs	r0, #0
10012a30:	4992      	ldr	r1, [pc, #584]	; (10012c7c <__ieee754_pow+0xa18>)
10012a32:	f002 fe8f 	bl	10015754 <__aeabi_dsub>
10012a36:	464b      	mov	r3, r9
10012a38:	185b      	adds	r3, r3, r1
10012a3a:	151a      	asrs	r2, r3, #20
10012a3c:	2a00      	cmp	r2, #0
10012a3e:	dc00      	bgt.n	10012a42 <__ieee754_pow+0x7de>
10012a40:	e0f4      	b.n	10012c2c <__ieee754_pow+0x9c8>
10012a42:	0019      	movs	r1, r3
10012a44:	9a06      	ldr	r2, [sp, #24]
10012a46:	9b07      	ldr	r3, [sp, #28]
10012a48:	f002 fc0a 	bl	10015260 <__aeabi_dmul>
10012a4c:	0006      	movs	r6, r0
10012a4e:	e452      	b.n	100122f6 <__ieee754_pow+0x92>
10012a50:	0032      	movs	r2, r6
10012a52:	0030      	movs	r0, r6
10012a54:	002b      	movs	r3, r5
10012a56:	0029      	movs	r1, r5
10012a58:	f002 fc02 	bl	10015260 <__aeabi_dmul>
10012a5c:	0006      	movs	r6, r0
10012a5e:	e44a      	b.n	100122f6 <__ieee754_pow+0x92>
10012a60:	4b87      	ldr	r3, [pc, #540]	; (10012c80 <__ieee754_pow+0xa1c>)
10012a62:	004e      	lsls	r6, r1, #1
10012a64:	0876      	lsrs	r6, r6, #1
10012a66:	429e      	cmp	r6, r3
10012a68:	dc00      	bgt.n	10012a6c <__ieee754_pow+0x808>
10012a6a:	e0bf      	b.n	10012bec <__ieee754_pow+0x988>
10012a6c:	4b85      	ldr	r3, [pc, #532]	; (10012c84 <__ieee754_pow+0xa20>)
10012a6e:	18cb      	adds	r3, r1, r3
10012a70:	4303      	orrs	r3, r0
10012a72:	d10c      	bne.n	10012a8e <__ieee754_pow+0x82a>
10012a74:	9a00      	ldr	r2, [sp, #0]
10012a76:	9b01      	ldr	r3, [sp, #4]
10012a78:	f002 fe6c 	bl	10015754 <__aeabi_dsub>
10012a7c:	0002      	movs	r2, r0
10012a7e:	000b      	movs	r3, r1
10012a80:	9804      	ldr	r0, [sp, #16]
10012a82:	9905      	ldr	r1, [sp, #20]
10012a84:	f000 fd48 	bl	10013518 <__aeabi_dcmple>
10012a88:	2800      	cmp	r0, #0
10012a8a:	d100      	bne.n	10012a8e <__ieee754_pow+0x82a>
10012a8c:	e701      	b.n	10012892 <__ieee754_pow+0x62e>
10012a8e:	9806      	ldr	r0, [sp, #24]
10012a90:	9907      	ldr	r1, [sp, #28]
10012a92:	4a7d      	ldr	r2, [pc, #500]	; (10012c88 <__ieee754_pow+0xa24>)
10012a94:	4b7d      	ldr	r3, [pc, #500]	; (10012c8c <__ieee754_pow+0xa28>)
10012a96:	f002 fbe3 	bl	10015260 <__aeabi_dmul>
10012a9a:	4a7b      	ldr	r2, [pc, #492]	; (10012c88 <__ieee754_pow+0xa24>)
10012a9c:	4b7b      	ldr	r3, [pc, #492]	; (10012c8c <__ieee754_pow+0xa28>)
10012a9e:	f002 fbdf 	bl	10015260 <__aeabi_dmul>
10012aa2:	0006      	movs	r6, r0
10012aa4:	f7ff fc27 	bl	100122f6 <__ieee754_pow+0x92>
10012aa8:	2300      	movs	r3, #0
10012aaa:	4c79      	ldr	r4, [pc, #484]	; (10012c90 <__ieee754_pow+0xa2c>)
10012aac:	9306      	str	r3, [sp, #24]
10012aae:	9407      	str	r4, [sp, #28]
10012ab0:	e666      	b.n	10012780 <__ieee754_pow+0x51c>
10012ab2:	4653      	mov	r3, sl
10012ab4:	2b00      	cmp	r3, #0
10012ab6:	db00      	blt.n	10012aba <__ieee754_pow+0x856>
10012ab8:	e4c3      	b.n	10012442 <__ieee754_pow+0x1de>
10012aba:	9b00      	ldr	r3, [sp, #0]
10012abc:	9c01      	ldr	r4, [sp, #4]
10012abe:	2280      	movs	r2, #128	; 0x80
10012ac0:	0612      	lsls	r2, r2, #24
10012ac2:	001e      	movs	r6, r3
10012ac4:	4694      	mov	ip, r2
10012ac6:	0023      	movs	r3, r4
10012ac8:	4463      	add	r3, ip
10012aca:	0019      	movs	r1, r3
10012acc:	f7ff fc13 	bl	100122f6 <__ieee754_pow+0x92>
10012ad0:	0002      	movs	r2, r0
10012ad2:	000b      	movs	r3, r1
10012ad4:	2000      	movs	r0, #0
10012ad6:	4969      	ldr	r1, [pc, #420]	; (10012c7c <__ieee754_pow+0xa18>)
10012ad8:	f001 ff9e 	bl	10014a18 <__aeabi_ddiv>
10012adc:	e44a      	b.n	10012374 <__ieee754_pow+0x110>
10012ade:	4b6d      	ldr	r3, [pc, #436]	; (10012c94 <__ieee754_pow+0xa30>)
10012ae0:	429c      	cmp	r4, r3
10012ae2:	dc00      	bgt.n	10012ae6 <__ieee754_pow+0x882>
10012ae4:	e4aa      	b.n	1001243c <__ieee754_pow+0x1d8>
10012ae6:	4b65      	ldr	r3, [pc, #404]	; (10012c7c <__ieee754_pow+0xa18>)
10012ae8:	429c      	cmp	r4, r3
10012aea:	dd01      	ble.n	10012af0 <__ieee754_pow+0x88c>
10012aec:	f7ff fc2c 	bl	10012348 <__ieee754_pow+0xe4>
10012af0:	2200      	movs	r2, #0
10012af2:	4b62      	ldr	r3, [pc, #392]	; (10012c7c <__ieee754_pow+0xa18>)
10012af4:	f002 fe2e 	bl	10015754 <__aeabi_dsub>
10012af8:	22c0      	movs	r2, #192	; 0xc0
10012afa:	4b67      	ldr	r3, [pc, #412]	; (10012c98 <__ieee754_pow+0xa34>)
10012afc:	05d2      	lsls	r2, r2, #23
10012afe:	0004      	movs	r4, r0
10012b00:	000d      	movs	r5, r1
10012b02:	f002 fbad 	bl	10015260 <__aeabi_dmul>
10012b06:	4a65      	ldr	r2, [pc, #404]	; (10012c9c <__ieee754_pow+0xa38>)
10012b08:	0006      	movs	r6, r0
10012b0a:	000f      	movs	r7, r1
10012b0c:	4b64      	ldr	r3, [pc, #400]	; (10012ca0 <__ieee754_pow+0xa3c>)
10012b0e:	0020      	movs	r0, r4
10012b10:	0029      	movs	r1, r5
10012b12:	f002 fba5 	bl	10015260 <__aeabi_dmul>
10012b16:	2200      	movs	r2, #0
10012b18:	9002      	str	r0, [sp, #8]
10012b1a:	9103      	str	r1, [sp, #12]
10012b1c:	4b61      	ldr	r3, [pc, #388]	; (10012ca4 <__ieee754_pow+0xa40>)
10012b1e:	0020      	movs	r0, r4
10012b20:	0029      	movs	r1, r5
10012b22:	f002 fb9d 	bl	10015260 <__aeabi_dmul>
10012b26:	0002      	movs	r2, r0
10012b28:	000b      	movs	r3, r1
10012b2a:	485f      	ldr	r0, [pc, #380]	; (10012ca8 <__ieee754_pow+0xa44>)
10012b2c:	495f      	ldr	r1, [pc, #380]	; (10012cac <__ieee754_pow+0xa48>)
10012b2e:	f002 fe11 	bl	10015754 <__aeabi_dsub>
10012b32:	0022      	movs	r2, r4
10012b34:	002b      	movs	r3, r5
10012b36:	f002 fb93 	bl	10015260 <__aeabi_dmul>
10012b3a:	0002      	movs	r2, r0
10012b3c:	000b      	movs	r3, r1
10012b3e:	2000      	movs	r0, #0
10012b40:	495b      	ldr	r1, [pc, #364]	; (10012cb0 <__ieee754_pow+0xa4c>)
10012b42:	f002 fe07 	bl	10015754 <__aeabi_dsub>
10012b46:	0022      	movs	r2, r4
10012b48:	9004      	str	r0, [sp, #16]
10012b4a:	9105      	str	r1, [sp, #20]
10012b4c:	002b      	movs	r3, r5
10012b4e:	0020      	movs	r0, r4
10012b50:	0029      	movs	r1, r5
10012b52:	f002 fb85 	bl	10015260 <__aeabi_dmul>
10012b56:	0002      	movs	r2, r0
10012b58:	000b      	movs	r3, r1
10012b5a:	9804      	ldr	r0, [sp, #16]
10012b5c:	9905      	ldr	r1, [sp, #20]
10012b5e:	f002 fb7f 	bl	10015260 <__aeabi_dmul>
10012b62:	4a54      	ldr	r2, [pc, #336]	; (10012cb4 <__ieee754_pow+0xa50>)
10012b64:	4b4c      	ldr	r3, [pc, #304]	; (10012c98 <__ieee754_pow+0xa34>)
10012b66:	f002 fb7b 	bl	10015260 <__aeabi_dmul>
10012b6a:	0002      	movs	r2, r0
10012b6c:	000b      	movs	r3, r1
10012b6e:	9802      	ldr	r0, [sp, #8]
10012b70:	9903      	ldr	r1, [sp, #12]
10012b72:	f002 fdef 	bl	10015754 <__aeabi_dsub>
10012b76:	0002      	movs	r2, r0
10012b78:	000b      	movs	r3, r1
10012b7a:	0004      	movs	r4, r0
10012b7c:	000d      	movs	r5, r1
10012b7e:	0030      	movs	r0, r6
10012b80:	0039      	movs	r1, r7
10012b82:	f001 fc1d 	bl	100143c0 <__aeabi_dadd>
10012b86:	2200      	movs	r2, #0
10012b88:	0010      	movs	r0, r2
10012b8a:	003b      	movs	r3, r7
10012b8c:	0032      	movs	r2, r6
10012b8e:	9002      	str	r0, [sp, #8]
10012b90:	9103      	str	r1, [sp, #12]
10012b92:	f002 fddf 	bl	10015754 <__aeabi_dsub>
10012b96:	0002      	movs	r2, r0
10012b98:	000b      	movs	r3, r1
10012b9a:	0020      	movs	r0, r4
10012b9c:	0029      	movs	r1, r5
10012b9e:	f002 fdd9 	bl	10015754 <__aeabi_dsub>
10012ba2:	9004      	str	r0, [sp, #16]
10012ba4:	9105      	str	r1, [sp, #20]
10012ba6:	e5e1      	b.n	1001276c <__ieee754_pow+0x508>
10012ba8:	4a43      	ldr	r2, [pc, #268]	; (10012cb8 <__ieee754_pow+0xa54>)
10012baa:	4b44      	ldr	r3, [pc, #272]	; (10012cbc <__ieee754_pow+0xa58>)
10012bac:	9806      	ldr	r0, [sp, #24]
10012bae:	9907      	ldr	r1, [sp, #28]
10012bb0:	f002 fb56 	bl	10015260 <__aeabi_dmul>
10012bb4:	4a40      	ldr	r2, [pc, #256]	; (10012cb8 <__ieee754_pow+0xa54>)
10012bb6:	4b41      	ldr	r3, [pc, #260]	; (10012cbc <__ieee754_pow+0xa58>)
10012bb8:	f002 fb52 	bl	10015260 <__aeabi_dmul>
10012bbc:	0006      	movs	r6, r0
10012bbe:	f7ff fb9a 	bl	100122f6 <__ieee754_pow+0x92>
10012bc2:	2a00      	cmp	r2, #0
10012bc4:	d001      	beq.n	10012bca <__ieee754_pow+0x966>
10012bc6:	f7ff fba5 	bl	10012314 <__ieee754_pow+0xb0>
10012bca:	3214      	adds	r2, #20
10012bcc:	1ad3      	subs	r3, r2, r3
10012bce:	003a      	movs	r2, r7
10012bd0:	411a      	asrs	r2, r3
10012bd2:	0011      	movs	r1, r2
10012bd4:	4099      	lsls	r1, r3
10012bd6:	428f      	cmp	r7, r1
10012bd8:	d001      	beq.n	10012bde <__ieee754_pow+0x97a>
10012bda:	f7ff fb6f 	bl	100122bc <__ieee754_pow+0x58>
10012bde:	2301      	movs	r3, #1
10012be0:	4013      	ands	r3, r2
10012be2:	2202      	movs	r2, #2
10012be4:	1ad3      	subs	r3, r2, r3
10012be6:	469b      	mov	fp, r3
10012be8:	f7ff fb68 	bl	100122bc <__ieee754_pow+0x58>
10012bec:	4b30      	ldr	r3, [pc, #192]	; (10012cb0 <__ieee754_pow+0xa4c>)
10012bee:	429e      	cmp	r6, r3
10012bf0:	dd00      	ble.n	10012bf4 <__ieee754_pow+0x990>
10012bf2:	e64e      	b.n	10012892 <__ieee754_pow+0x62e>
10012bf4:	2300      	movs	r3, #0
10012bf6:	4699      	mov	r9, r3
10012bf8:	4698      	mov	r8, r3
10012bfa:	e67a      	b.n	100128f2 <__ieee754_pow+0x68e>
10012bfc:	0002      	movs	r2, r0
10012bfe:	000b      	movs	r3, r1
10012c00:	f7ff fc14 	bl	1001242c <__ieee754_pow+0x1c8>
10012c04:	2380      	movs	r3, #128	; 0x80
10012c06:	4c2e      	ldr	r4, [pc, #184]	; (10012cc0 <__ieee754_pow+0xa5c>)
10012c08:	05db      	lsls	r3, r3, #23
10012c0a:	9308      	str	r3, [sp, #32]
10012c0c:	9409      	str	r4, [sp, #36]	; 0x24
10012c0e:	4b2d      	ldr	r3, [pc, #180]	; (10012cc4 <__ieee754_pow+0xa60>)
10012c10:	4c2d      	ldr	r4, [pc, #180]	; (10012cc8 <__ieee754_pow+0xa64>)
10012c12:	2200      	movs	r2, #0
10012c14:	930c      	str	r3, [sp, #48]	; 0x30
10012c16:	940d      	str	r4, [sp, #52]	; 0x34
10012c18:	2480      	movs	r4, #128	; 0x80
10012c1a:	4b2c      	ldr	r3, [pc, #176]	; (10012ccc <__ieee754_pow+0xa68>)
10012c1c:	02e4      	lsls	r4, r4, #11
10012c1e:	9206      	str	r2, [sp, #24]
10012c20:	9307      	str	r3, [sp, #28]
10012c22:	e456      	b.n	100124d2 <__ieee754_pow+0x26e>
10012c24:	4643      	mov	r3, r8
10012c26:	425b      	negs	r3, r3
10012c28:	4698      	mov	r8, r3
10012c2a:	e651      	b.n	100128d0 <__ieee754_pow+0x66c>
10012c2c:	4642      	mov	r2, r8
10012c2e:	f000 fa59 	bl	100130e4 <scalbn>
10012c32:	e707      	b.n	10012a44 <__ieee754_pow+0x7e0>
10012c34:	fffffc02 	.word	0xfffffc02
10012c38:	fffffc01 	.word	0xfffffc01
10012c3c:	000fffff 	.word	0x000fffff
10012c40:	3fe62e43 	.word	0x3fe62e43
10012c44:	fefa39ef 	.word	0xfefa39ef
10012c48:	3fe62e42 	.word	0x3fe62e42
10012c4c:	0ca86c39 	.word	0x0ca86c39
10012c50:	be205c61 	.word	0xbe205c61
10012c54:	72bea4d0 	.word	0x72bea4d0
10012c58:	3e663769 	.word	0x3e663769
10012c5c:	c5d26bf1 	.word	0xc5d26bf1
10012c60:	3ebbbd41 	.word	0x3ebbbd41
10012c64:	af25de2c 	.word	0xaf25de2c
10012c68:	3f11566a 	.word	0x3f11566a
10012c6c:	16bebd93 	.word	0x16bebd93
10012c70:	3f66c16c 	.word	0x3f66c16c
10012c74:	5555553e 	.word	0x5555553e
10012c78:	3fc55555 	.word	0x3fc55555
10012c7c:	3ff00000 	.word	0x3ff00000
10012c80:	4090cbff 	.word	0x4090cbff
10012c84:	3f6f3400 	.word	0x3f6f3400
10012c88:	c2f8f359 	.word	0xc2f8f359
10012c8c:	01a56e1f 	.word	0x01a56e1f
10012c90:	bff00000 	.word	0xbff00000
10012c94:	3feffffe 	.word	0x3feffffe
10012c98:	3ff71547 	.word	0x3ff71547
10012c9c:	f85ddf44 	.word	0xf85ddf44
10012ca0:	3e54ae0b 	.word	0x3e54ae0b
10012ca4:	3fd00000 	.word	0x3fd00000
10012ca8:	55555555 	.word	0x55555555
10012cac:	3fd55555 	.word	0x3fd55555
10012cb0:	3fe00000 	.word	0x3fe00000
10012cb4:	652b82fe 	.word	0x652b82fe
10012cb8:	8800759c 	.word	0x8800759c
10012cbc:	7e37e43c 	.word	0x7e37e43c
10012cc0:	3fe2b803 	.word	0x3fe2b803
10012cc4:	43cfd006 	.word	0x43cfd006
10012cc8:	3e4cfdeb 	.word	0x3e4cfdeb
10012ccc:	3ff80000 	.word	0x3ff80000

10012cd0 <__ieee754_sqrt>:
10012cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012cd2:	4656      	mov	r6, sl
10012cd4:	464d      	mov	r5, r9
10012cd6:	4644      	mov	r4, r8
10012cd8:	465f      	mov	r7, fp
10012cda:	4b75      	ldr	r3, [pc, #468]	; (10012eb0 <__ieee754_sqrt+0x1e0>)
10012cdc:	b4f0      	push	{r4, r5, r6, r7}
10012cde:	000a      	movs	r2, r1
10012ce0:	000d      	movs	r5, r1
10012ce2:	0019      	movs	r1, r3
10012ce4:	b083      	sub	sp, #12
10012ce6:	0006      	movs	r6, r0
10012ce8:	0004      	movs	r4, r0
10012cea:	4029      	ands	r1, r5
10012cec:	4299      	cmp	r1, r3
10012cee:	d100      	bne.n	10012cf2 <__ieee754_sqrt+0x22>
10012cf0:	e0ba      	b.n	10012e68 <__ieee754_sqrt+0x198>
10012cf2:	2d00      	cmp	r5, #0
10012cf4:	dc00      	bgt.n	10012cf8 <__ieee754_sqrt+0x28>
10012cf6:	e094      	b.n	10012e22 <__ieee754_sqrt+0x152>
10012cf8:	152d      	asrs	r5, r5, #20
10012cfa:	d100      	bne.n	10012cfe <__ieee754_sqrt+0x2e>
10012cfc:	e0a3      	b.n	10012e46 <__ieee754_sqrt+0x176>
10012cfe:	4b6d      	ldr	r3, [pc, #436]	; (10012eb4 <__ieee754_sqrt+0x1e4>)
10012d00:	0312      	lsls	r2, r2, #12
10012d02:	469c      	mov	ip, r3
10012d04:	2380      	movs	r3, #128	; 0x80
10012d06:	0b12      	lsrs	r2, r2, #12
10012d08:	035b      	lsls	r3, r3, #13
10012d0a:	4465      	add	r5, ip
10012d0c:	431a      	orrs	r2, r3
10012d0e:	07eb      	lsls	r3, r5, #31
10012d10:	d500      	bpl.n	10012d14 <__ieee754_sqrt+0x44>
10012d12:	e081      	b.n	10012e18 <__ieee754_sqrt+0x148>
10012d14:	106b      	asrs	r3, r5, #1
10012d16:	4698      	mov	r8, r3
10012d18:	0fe3      	lsrs	r3, r4, #31
10012d1a:	189b      	adds	r3, r3, r2
10012d1c:	189b      	adds	r3, r3, r2
10012d1e:	2280      	movs	r2, #128	; 0x80
10012d20:	2116      	movs	r1, #22
10012d22:	2600      	movs	r6, #0
10012d24:	2700      	movs	r7, #0
10012d26:	0064      	lsls	r4, r4, #1
10012d28:	0392      	lsls	r2, r2, #14
10012d2a:	18b8      	adds	r0, r7, r2
10012d2c:	4298      	cmp	r0, r3
10012d2e:	dc02      	bgt.n	10012d36 <__ieee754_sqrt+0x66>
10012d30:	1887      	adds	r7, r0, r2
10012d32:	1a1b      	subs	r3, r3, r0
10012d34:	18b6      	adds	r6, r6, r2
10012d36:	0fe0      	lsrs	r0, r4, #31
10012d38:	005b      	lsls	r3, r3, #1
10012d3a:	3901      	subs	r1, #1
10012d3c:	181b      	adds	r3, r3, r0
10012d3e:	0064      	lsls	r4, r4, #1
10012d40:	0852      	lsrs	r2, r2, #1
10012d42:	2900      	cmp	r1, #0
10012d44:	d1f1      	bne.n	10012d2a <__ieee754_sqrt+0x5a>
10012d46:	2200      	movs	r2, #0
10012d48:	9201      	str	r2, [sp, #4]
10012d4a:	4694      	mov	ip, r2
10012d4c:	2280      	movs	r2, #128	; 0x80
10012d4e:	0612      	lsls	r2, r2, #24
10012d50:	2020      	movs	r0, #32
10012d52:	4691      	mov	r9, r2
10012d54:	e009      	b.n	10012d6a <__ieee754_sqrt+0x9a>
10012d56:	429f      	cmp	r7, r3
10012d58:	d041      	beq.n	10012dde <__ieee754_sqrt+0x10e>
10012d5a:	0fe1      	lsrs	r1, r4, #31
10012d5c:	18c9      	adds	r1, r1, r3
10012d5e:	3801      	subs	r0, #1
10012d60:	18cb      	adds	r3, r1, r3
10012d62:	0064      	lsls	r4, r4, #1
10012d64:	0852      	lsrs	r2, r2, #1
10012d66:	2800      	cmp	r0, #0
10012d68:	d01e      	beq.n	10012da8 <__ieee754_sqrt+0xd8>
10012d6a:	4661      	mov	r1, ip
10012d6c:	1851      	adds	r1, r2, r1
10012d6e:	429f      	cmp	r7, r3
10012d70:	daf1      	bge.n	10012d56 <__ieee754_sqrt+0x86>
10012d72:	188d      	adds	r5, r1, r2
10012d74:	46ac      	mov	ip, r5
10012d76:	0fcd      	lsrs	r5, r1, #31
10012d78:	07ed      	lsls	r5, r5, #31
10012d7a:	46ba      	mov	sl, r7
10012d7c:	454d      	cmp	r5, r9
10012d7e:	d039      	beq.n	10012df4 <__ieee754_sqrt+0x124>
10012d80:	1bdb      	subs	r3, r3, r7
10012d82:	428c      	cmp	r4, r1
10012d84:	41bf      	sbcs	r7, r7
10012d86:	427f      	negs	r7, r7
10012d88:	1bdb      	subs	r3, r3, r7
10012d8a:	1a64      	subs	r4, r4, r1
10012d8c:	9901      	ldr	r1, [sp, #4]
10012d8e:	3801      	subs	r0, #1
10012d90:	468b      	mov	fp, r1
10012d92:	4493      	add	fp, r2
10012d94:	4659      	mov	r1, fp
10012d96:	9101      	str	r1, [sp, #4]
10012d98:	0fe1      	lsrs	r1, r4, #31
10012d9a:	18c9      	adds	r1, r1, r3
10012d9c:	4657      	mov	r7, sl
10012d9e:	18cb      	adds	r3, r1, r3
10012da0:	0064      	lsls	r4, r4, #1
10012da2:	0852      	lsrs	r2, r2, #1
10012da4:	2800      	cmp	r0, #0
10012da6:	d1e0      	bne.n	10012d6a <__ieee754_sqrt+0x9a>
10012da8:	4323      	orrs	r3, r4
10012daa:	d12b      	bne.n	10012e04 <__ieee754_sqrt+0x134>
10012dac:	9b01      	ldr	r3, [sp, #4]
10012dae:	085b      	lsrs	r3, r3, #1
10012db0:	4941      	ldr	r1, [pc, #260]	; (10012eb8 <__ieee754_sqrt+0x1e8>)
10012db2:	1072      	asrs	r2, r6, #1
10012db4:	468c      	mov	ip, r1
10012db6:	4462      	add	r2, ip
10012db8:	07f1      	lsls	r1, r6, #31
10012dba:	d502      	bpl.n	10012dc2 <__ieee754_sqrt+0xf2>
10012dbc:	2180      	movs	r1, #128	; 0x80
10012dbe:	0609      	lsls	r1, r1, #24
10012dc0:	430b      	orrs	r3, r1
10012dc2:	4641      	mov	r1, r8
10012dc4:	0509      	lsls	r1, r1, #20
10012dc6:	188d      	adds	r5, r1, r2
10012dc8:	001e      	movs	r6, r3
10012dca:	002f      	movs	r7, r5
10012dcc:	0030      	movs	r0, r6
10012dce:	0039      	movs	r1, r7
10012dd0:	b003      	add	sp, #12
10012dd2:	bc3c      	pop	{r2, r3, r4, r5}
10012dd4:	4690      	mov	r8, r2
10012dd6:	4699      	mov	r9, r3
10012dd8:	46a2      	mov	sl, r4
10012dda:	46ab      	mov	fp, r5
10012ddc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012dde:	42a1      	cmp	r1, r4
10012de0:	d80e      	bhi.n	10012e00 <__ieee754_sqrt+0x130>
10012de2:	188d      	adds	r5, r1, r2
10012de4:	46ac      	mov	ip, r5
10012de6:	0fcd      	lsrs	r5, r1, #31
10012de8:	07ed      	lsls	r5, r5, #31
10012dea:	454d      	cmp	r5, r9
10012dec:	d048      	beq.n	10012e80 <__ieee754_sqrt+0x1b0>
10012dee:	469a      	mov	sl, r3
10012df0:	2300      	movs	r3, #0
10012df2:	e7ca      	b.n	10012d8a <__ieee754_sqrt+0xba>
10012df4:	4665      	mov	r5, ip
10012df6:	2d00      	cmp	r5, #0
10012df8:	dbc2      	blt.n	10012d80 <__ieee754_sqrt+0xb0>
10012dfa:	1c7d      	adds	r5, r7, #1
10012dfc:	46aa      	mov	sl, r5
10012dfe:	e7bf      	b.n	10012d80 <__ieee754_sqrt+0xb0>
10012e00:	003b      	movs	r3, r7
10012e02:	e7aa      	b.n	10012d5a <__ieee754_sqrt+0x8a>
10012e04:	9b01      	ldr	r3, [sp, #4]
10012e06:	3301      	adds	r3, #1
10012e08:	d03e      	beq.n	10012e88 <__ieee754_sqrt+0x1b8>
10012e0a:	9a01      	ldr	r2, [sp, #4]
10012e0c:	2301      	movs	r3, #1
10012e0e:	4694      	mov	ip, r2
10012e10:	4013      	ands	r3, r2
10012e12:	4463      	add	r3, ip
10012e14:	085b      	lsrs	r3, r3, #1
10012e16:	e7cb      	b.n	10012db0 <__ieee754_sqrt+0xe0>
10012e18:	0fe3      	lsrs	r3, r4, #31
10012e1a:	0052      	lsls	r2, r2, #1
10012e1c:	189a      	adds	r2, r3, r2
10012e1e:	0064      	lsls	r4, r4, #1
10012e20:	e778      	b.n	10012d14 <__ieee754_sqrt+0x44>
10012e22:	006b      	lsls	r3, r5, #1
10012e24:	085b      	lsrs	r3, r3, #1
10012e26:	4303      	orrs	r3, r0
10012e28:	002f      	movs	r7, r5
10012e2a:	2b00      	cmp	r3, #0
10012e2c:	d0ce      	beq.n	10012dcc <__ieee754_sqrt+0xfc>
10012e2e:	2500      	movs	r5, #0
10012e30:	2a00      	cmp	r2, #0
10012e32:	d131      	bne.n	10012e98 <__ieee754_sqrt+0x1c8>
10012e34:	0ae2      	lsrs	r2, r4, #11
10012e36:	3d15      	subs	r5, #21
10012e38:	0564      	lsls	r4, r4, #21
10012e3a:	2a00      	cmp	r2, #0
10012e3c:	d0fa      	beq.n	10012e34 <__ieee754_sqrt+0x164>
10012e3e:	2380      	movs	r3, #128	; 0x80
10012e40:	035b      	lsls	r3, r3, #13
10012e42:	421a      	tst	r2, r3
10012e44:	d123      	bne.n	10012e8e <__ieee754_sqrt+0x1be>
10012e46:	2080      	movs	r0, #128	; 0x80
10012e48:	2300      	movs	r3, #0
10012e4a:	0340      	lsls	r0, r0, #13
10012e4c:	e000      	b.n	10012e50 <__ieee754_sqrt+0x180>
10012e4e:	000b      	movs	r3, r1
10012e50:	0052      	lsls	r2, r2, #1
10012e52:	1c59      	adds	r1, r3, #1
10012e54:	4202      	tst	r2, r0
10012e56:	d0fa      	beq.n	10012e4e <__ieee754_sqrt+0x17e>
10012e58:	2020      	movs	r0, #32
10012e5a:	1a40      	subs	r0, r0, r1
10012e5c:	1aed      	subs	r5, r5, r3
10012e5e:	0023      	movs	r3, r4
10012e60:	40c3      	lsrs	r3, r0
10012e62:	408c      	lsls	r4, r1
10012e64:	431a      	orrs	r2, r3
10012e66:	e74a      	b.n	10012cfe <__ieee754_sqrt+0x2e>
10012e68:	0002      	movs	r2, r0
10012e6a:	002b      	movs	r3, r5
10012e6c:	0029      	movs	r1, r5
10012e6e:	f002 f9f7 	bl	10015260 <__aeabi_dmul>
10012e72:	0032      	movs	r2, r6
10012e74:	002b      	movs	r3, r5
10012e76:	f001 faa3 	bl	100143c0 <__aeabi_dadd>
10012e7a:	0006      	movs	r6, r0
10012e7c:	000f      	movs	r7, r1
10012e7e:	e7a5      	b.n	10012dcc <__ieee754_sqrt+0xfc>
10012e80:	4665      	mov	r5, ip
10012e82:	2d00      	cmp	r5, #0
10012e84:	dab9      	bge.n	10012dfa <__ieee754_sqrt+0x12a>
10012e86:	e7b2      	b.n	10012dee <__ieee754_sqrt+0x11e>
10012e88:	3601      	adds	r6, #1
10012e8a:	2300      	movs	r3, #0
10012e8c:	e790      	b.n	10012db0 <__ieee754_sqrt+0xe0>
10012e8e:	2301      	movs	r3, #1
10012e90:	2020      	movs	r0, #32
10012e92:	425b      	negs	r3, r3
10012e94:	2100      	movs	r1, #0
10012e96:	e7e1      	b.n	10012e5c <__ieee754_sqrt+0x18c>
10012e98:	003b      	movs	r3, r7
10012e9a:	0002      	movs	r2, r0
10012e9c:	0039      	movs	r1, r7
10012e9e:	f002 fc59 	bl	10015754 <__aeabi_dsub>
10012ea2:	0002      	movs	r2, r0
10012ea4:	000b      	movs	r3, r1
10012ea6:	f001 fdb7 	bl	10014a18 <__aeabi_ddiv>
10012eaa:	0006      	movs	r6, r0
10012eac:	000f      	movs	r7, r1
10012eae:	e78d      	b.n	10012dcc <__ieee754_sqrt+0xfc>
10012eb0:	7ff00000 	.word	0x7ff00000
10012eb4:	fffffc01 	.word	0xfffffc01
10012eb8:	3fe00000 	.word	0x3fe00000

10012ebc <__ieee754_sqrtf>:
10012ebc:	492b      	ldr	r1, [pc, #172]	; (10012f6c <__ieee754_sqrtf+0xb0>)
10012ebe:	0042      	lsls	r2, r0, #1
10012ec0:	b570      	push	{r4, r5, r6, lr}
10012ec2:	0003      	movs	r3, r0
10012ec4:	1c04      	adds	r4, r0, #0
10012ec6:	0852      	lsrs	r2, r2, #1
10012ec8:	428a      	cmp	r2, r1
10012eca:	d83a      	bhi.n	10012f42 <__ieee754_sqrtf+0x86>
10012ecc:	2a00      	cmp	r2, #0
10012ece:	d037      	beq.n	10012f40 <__ieee754_sqrtf+0x84>
10012ed0:	2800      	cmp	r0, #0
10012ed2:	db3f      	blt.n	10012f54 <__ieee754_sqrtf+0x98>
10012ed4:	4926      	ldr	r1, [pc, #152]	; (10012f70 <__ieee754_sqrtf+0xb4>)
10012ed6:	15c0      	asrs	r0, r0, #23
10012ed8:	428a      	cmp	r2, r1
10012eda:	d80b      	bhi.n	10012ef4 <__ieee754_sqrtf+0x38>
10012edc:	3101      	adds	r1, #1
10012ede:	4221      	tst	r1, r4
10012ee0:	d13f      	bne.n	10012f62 <__ieee754_sqrtf+0xa6>
10012ee2:	2200      	movs	r2, #0
10012ee4:	000c      	movs	r4, r1
10012ee6:	e000      	b.n	10012eea <__ieee754_sqrtf+0x2e>
10012ee8:	000a      	movs	r2, r1
10012eea:	005b      	lsls	r3, r3, #1
10012eec:	1c51      	adds	r1, r2, #1
10012eee:	4223      	tst	r3, r4
10012ef0:	d0fa      	beq.n	10012ee8 <__ieee754_sqrtf+0x2c>
10012ef2:	1a80      	subs	r0, r0, r2
10012ef4:	2280      	movs	r2, #128	; 0x80
10012ef6:	025b      	lsls	r3, r3, #9
10012ef8:	0a5b      	lsrs	r3, r3, #9
10012efa:	0412      	lsls	r2, r2, #16
10012efc:	387f      	subs	r0, #127	; 0x7f
10012efe:	4313      	orrs	r3, r2
10012f00:	07c2      	lsls	r2, r0, #31
10012f02:	d425      	bmi.n	10012f50 <__ieee754_sqrtf+0x94>
10012f04:	2280      	movs	r2, #128	; 0x80
10012f06:	2119      	movs	r1, #25
10012f08:	2500      	movs	r5, #0
10012f0a:	2600      	movs	r6, #0
10012f0c:	1040      	asrs	r0, r0, #1
10012f0e:	005b      	lsls	r3, r3, #1
10012f10:	0452      	lsls	r2, r2, #17
10012f12:	18b4      	adds	r4, r6, r2
10012f14:	429c      	cmp	r4, r3
10012f16:	dc02      	bgt.n	10012f1e <__ieee754_sqrtf+0x62>
10012f18:	18a6      	adds	r6, r4, r2
10012f1a:	1b1b      	subs	r3, r3, r4
10012f1c:	18ad      	adds	r5, r5, r2
10012f1e:	3901      	subs	r1, #1
10012f20:	005b      	lsls	r3, r3, #1
10012f22:	0852      	lsrs	r2, r2, #1
10012f24:	2900      	cmp	r1, #0
10012f26:	d1f4      	bne.n	10012f12 <__ieee754_sqrtf+0x56>
10012f28:	2b00      	cmp	r3, #0
10012f2a:	d002      	beq.n	10012f32 <__ieee754_sqrtf+0x76>
10012f2c:	2301      	movs	r3, #1
10012f2e:	402b      	ands	r3, r5
10012f30:	18ed      	adds	r5, r5, r3
10012f32:	23fc      	movs	r3, #252	; 0xfc
10012f34:	059b      	lsls	r3, r3, #22
10012f36:	469c      	mov	ip, r3
10012f38:	106d      	asrs	r5, r5, #1
10012f3a:	4465      	add	r5, ip
10012f3c:	05c0      	lsls	r0, r0, #23
10012f3e:	1940      	adds	r0, r0, r5
10012f40:	bd70      	pop	{r4, r5, r6, pc}
10012f42:	1c01      	adds	r1, r0, #0
10012f44:	f000 fee2 	bl	10013d0c <__aeabi_fmul>
10012f48:	1c21      	adds	r1, r4, #0
10012f4a:	f000 fb9f 	bl	1001368c <__aeabi_fadd>
10012f4e:	e7f7      	b.n	10012f40 <__ieee754_sqrtf+0x84>
10012f50:	005b      	lsls	r3, r3, #1
10012f52:	e7d7      	b.n	10012f04 <__ieee754_sqrtf+0x48>
10012f54:	1c01      	adds	r1, r0, #0
10012f56:	f000 ffed 	bl	10013f34 <__aeabi_fsub>
10012f5a:	1c01      	adds	r1, r0, #0
10012f5c:	f000 fd0c 	bl	10013978 <__aeabi_fdiv>
10012f60:	e7ee      	b.n	10012f40 <__ieee754_sqrtf+0x84>
10012f62:	2201      	movs	r2, #1
10012f64:	4252      	negs	r2, r2
10012f66:	1a80      	subs	r0, r0, r2
10012f68:	e7c4      	b.n	10012ef4 <__ieee754_sqrtf+0x38>
10012f6a:	46c0      	nop			; (mov r8, r8)
10012f6c:	7f7fffff 	.word	0x7f7fffff
10012f70:	007fffff 	.word	0x007fffff

10012f74 <fabs>:
10012f74:	0049      	lsls	r1, r1, #1
10012f76:	084b      	lsrs	r3, r1, #1
10012f78:	0019      	movs	r1, r3
10012f7a:	4770      	bx	lr

10012f7c <finite>:
10012f7c:	4b03      	ldr	r3, [pc, #12]	; (10012f8c <finite+0x10>)
10012f7e:	0048      	lsls	r0, r1, #1
10012f80:	469c      	mov	ip, r3
10012f82:	0840      	lsrs	r0, r0, #1
10012f84:	4460      	add	r0, ip
10012f86:	0fc0      	lsrs	r0, r0, #31
10012f88:	4770      	bx	lr
10012f8a:	46c0      	nop			; (mov r8, r8)
10012f8c:	80100000 	.word	0x80100000

10012f90 <matherr>:
10012f90:	2000      	movs	r0, #0
10012f92:	4770      	bx	lr

10012f94 <nan>:
10012f94:	2000      	movs	r0, #0
10012f96:	4901      	ldr	r1, [pc, #4]	; (10012f9c <nan+0x8>)
10012f98:	4770      	bx	lr
10012f9a:	46c0      	nop			; (mov r8, r8)
10012f9c:	7ff80000 	.word	0x7ff80000

10012fa0 <rint>:
10012fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fa2:	4647      	mov	r7, r8
10012fa4:	b480      	push	{r7}
10012fa6:	0fcb      	lsrs	r3, r1, #31
10012fa8:	4698      	mov	r8, r3
10012faa:	4c4a      	ldr	r4, [pc, #296]	; (100130d4 <rint+0x134>)
10012fac:	004b      	lsls	r3, r1, #1
10012fae:	0d5b      	lsrs	r3, r3, #21
10012fb0:	191e      	adds	r6, r3, r4
10012fb2:	b082      	sub	sp, #8
10012fb4:	0007      	movs	r7, r0
10012fb6:	000a      	movs	r2, r1
10012fb8:	2e13      	cmp	r6, #19
10012fba:	dc35      	bgt.n	10013028 <rint+0x88>
10012fbc:	2e00      	cmp	r6, #0
10012fbe:	db57      	blt.n	10013070 <rint+0xd0>
10012fc0:	4b45      	ldr	r3, [pc, #276]	; (100130d8 <rint+0x138>)
10012fc2:	0004      	movs	r4, r0
10012fc4:	4133      	asrs	r3, r6
10012fc6:	001f      	movs	r7, r3
10012fc8:	400f      	ands	r7, r1
10012fca:	4307      	orrs	r7, r0
10012fcc:	000d      	movs	r5, r1
10012fce:	2f00      	cmp	r7, #0
10012fd0:	d024      	beq.n	1001301c <rint+0x7c>
10012fd2:	085b      	lsrs	r3, r3, #1
10012fd4:	001c      	movs	r4, r3
10012fd6:	400c      	ands	r4, r1
10012fd8:	4320      	orrs	r0, r4
10012fda:	2700      	movs	r7, #0
10012fdc:	2800      	cmp	r0, #0
10012fde:	d007      	beq.n	10012ff0 <rint+0x50>
10012fe0:	2e13      	cmp	r6, #19
10012fe2:	d100      	bne.n	10012fe6 <rint+0x46>
10012fe4:	e072      	b.n	100130cc <rint+0x12c>
10012fe6:	2280      	movs	r2, #128	; 0x80
10012fe8:	02d2      	lsls	r2, r2, #11
10012fea:	4132      	asrs	r2, r6
10012fec:	4399      	bics	r1, r3
10012fee:	430a      	orrs	r2, r1
10012ff0:	4643      	mov	r3, r8
10012ff2:	00de      	lsls	r6, r3, #3
10012ff4:	4b39      	ldr	r3, [pc, #228]	; (100130dc <rint+0x13c>)
10012ff6:	0011      	movs	r1, r2
10012ff8:	199e      	adds	r6, r3, r6
10012ffa:	6834      	ldr	r4, [r6, #0]
10012ffc:	6875      	ldr	r5, [r6, #4]
10012ffe:	0038      	movs	r0, r7
10013000:	0022      	movs	r2, r4
10013002:	002b      	movs	r3, r5
10013004:	f001 f9dc 	bl	100143c0 <__aeabi_dadd>
10013008:	9000      	str	r0, [sp, #0]
1001300a:	9101      	str	r1, [sp, #4]
1001300c:	9800      	ldr	r0, [sp, #0]
1001300e:	9901      	ldr	r1, [sp, #4]
10013010:	0022      	movs	r2, r4
10013012:	002b      	movs	r3, r5
10013014:	f002 fb9e 	bl	10015754 <__aeabi_dsub>
10013018:	0004      	movs	r4, r0
1001301a:	000d      	movs	r5, r1
1001301c:	0020      	movs	r0, r4
1001301e:	0029      	movs	r1, r5
10013020:	b002      	add	sp, #8
10013022:	bc04      	pop	{r2}
10013024:	4690      	mov	r8, r2
10013026:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013028:	2e33      	cmp	r6, #51	; 0x33
1001302a:	dd0c      	ble.n	10013046 <rint+0xa6>
1001302c:	2380      	movs	r3, #128	; 0x80
1001302e:	0004      	movs	r4, r0
10013030:	000d      	movs	r5, r1
10013032:	00db      	lsls	r3, r3, #3
10013034:	429e      	cmp	r6, r3
10013036:	d1f1      	bne.n	1001301c <rint+0x7c>
10013038:	0002      	movs	r2, r0
1001303a:	000b      	movs	r3, r1
1001303c:	f001 f9c0 	bl	100143c0 <__aeabi_dadd>
10013040:	0004      	movs	r4, r0
10013042:	000d      	movs	r5, r1
10013044:	e7ea      	b.n	1001301c <rint+0x7c>
10013046:	4c26      	ldr	r4, [pc, #152]	; (100130e0 <rint+0x140>)
10013048:	000d      	movs	r5, r1
1001304a:	46a4      	mov	ip, r4
1001304c:	2401      	movs	r4, #1
1001304e:	4463      	add	r3, ip
10013050:	4264      	negs	r4, r4
10013052:	40dc      	lsrs	r4, r3
10013054:	46a4      	mov	ip, r4
10013056:	4661      	mov	r1, ip
10013058:	0004      	movs	r4, r0
1001305a:	4201      	tst	r1, r0
1001305c:	d0de      	beq.n	1001301c <rint+0x7c>
1001305e:	0849      	lsrs	r1, r1, #1
10013060:	4201      	tst	r1, r0
10013062:	d0c5      	beq.n	10012ff0 <rint+0x50>
10013064:	2780      	movs	r7, #128	; 0x80
10013066:	05ff      	lsls	r7, r7, #23
10013068:	411f      	asrs	r7, r3
1001306a:	4388      	bics	r0, r1
1001306c:	4307      	orrs	r7, r0
1001306e:	e7bf      	b.n	10012ff0 <rint+0x50>
10013070:	004b      	lsls	r3, r1, #1
10013072:	085b      	lsrs	r3, r3, #1
10013074:	4303      	orrs	r3, r0
10013076:	0004      	movs	r4, r0
10013078:	000d      	movs	r5, r1
1001307a:	2b00      	cmp	r3, #0
1001307c:	d0ce      	beq.n	1001301c <rint+0x7c>
1001307e:	030b      	lsls	r3, r1, #12
10013080:	0b1b      	lsrs	r3, r3, #12
10013082:	4303      	orrs	r3, r0
10013084:	425a      	negs	r2, r3
10013086:	4313      	orrs	r3, r2
10013088:	2280      	movs	r2, #128	; 0x80
1001308a:	0b1b      	lsrs	r3, r3, #12
1001308c:	0312      	lsls	r2, r2, #12
1001308e:	4013      	ands	r3, r2
10013090:	0c4a      	lsrs	r2, r1, #17
10013092:	0452      	lsls	r2, r2, #17
10013094:	4313      	orrs	r3, r2
10013096:	0019      	movs	r1, r3
10013098:	4643      	mov	r3, r8
1001309a:	4a10      	ldr	r2, [pc, #64]	; (100130dc <rint+0x13c>)
1001309c:	00db      	lsls	r3, r3, #3
1001309e:	18d3      	adds	r3, r2, r3
100130a0:	681c      	ldr	r4, [r3, #0]
100130a2:	685d      	ldr	r5, [r3, #4]
100130a4:	0022      	movs	r2, r4
100130a6:	002b      	movs	r3, r5
100130a8:	f001 f98a 	bl	100143c0 <__aeabi_dadd>
100130ac:	9000      	str	r0, [sp, #0]
100130ae:	9101      	str	r1, [sp, #4]
100130b0:	9800      	ldr	r0, [sp, #0]
100130b2:	9901      	ldr	r1, [sp, #4]
100130b4:	0022      	movs	r2, r4
100130b6:	002b      	movs	r3, r5
100130b8:	f002 fb4c 	bl	10015754 <__aeabi_dsub>
100130bc:	4642      	mov	r2, r8
100130be:	004b      	lsls	r3, r1, #1
100130c0:	085b      	lsrs	r3, r3, #1
100130c2:	07d6      	lsls	r6, r2, #31
100130c4:	4333      	orrs	r3, r6
100130c6:	0004      	movs	r4, r0
100130c8:	001d      	movs	r5, r3
100130ca:	e7a7      	b.n	1001301c <rint+0x7c>
100130cc:	2780      	movs	r7, #128	; 0x80
100130ce:	063f      	lsls	r7, r7, #24
100130d0:	e789      	b.n	10012fe6 <rint+0x46>
100130d2:	46c0      	nop			; (mov r8, r8)
100130d4:	fffffc01 	.word	0xfffffc01
100130d8:	000fffff 	.word	0x000fffff
100130dc:	10018450 	.word	0x10018450
100130e0:	fffffbed 	.word	0xfffffbed

100130e4 <scalbn>:
100130e4:	004b      	lsls	r3, r1, #1
100130e6:	b570      	push	{r4, r5, r6, lr}
100130e8:	0d5b      	lsrs	r3, r3, #21
100130ea:	0014      	movs	r4, r2
100130ec:	000a      	movs	r2, r1
100130ee:	2b00      	cmp	r3, #0
100130f0:	d11a      	bne.n	10013128 <scalbn+0x44>
100130f2:	004b      	lsls	r3, r1, #1
100130f4:	085b      	lsrs	r3, r3, #1
100130f6:	4303      	orrs	r3, r0
100130f8:	d015      	beq.n	10013126 <scalbn+0x42>
100130fa:	2200      	movs	r2, #0
100130fc:	4b22      	ldr	r3, [pc, #136]	; (10013188 <scalbn+0xa4>)
100130fe:	f002 f8af 	bl	10015260 <__aeabi_dmul>
10013102:	4b22      	ldr	r3, [pc, #136]	; (1001318c <scalbn+0xa8>)
10013104:	000a      	movs	r2, r1
10013106:	429c      	cmp	r4, r3
10013108:	db22      	blt.n	10013150 <scalbn+0x6c>
1001310a:	004b      	lsls	r3, r1, #1
1001310c:	0d5b      	lsrs	r3, r3, #21
1001310e:	3b36      	subs	r3, #54	; 0x36
10013110:	4d1f      	ldr	r5, [pc, #124]	; (10013190 <scalbn+0xac>)
10013112:	18e3      	adds	r3, r4, r3
10013114:	42ab      	cmp	r3, r5
10013116:	dc20      	bgt.n	1001315a <scalbn+0x76>
10013118:	2b00      	cmp	r3, #0
1001311a:	dd0d      	ble.n	10013138 <scalbn+0x54>
1001311c:	4c1d      	ldr	r4, [pc, #116]	; (10013194 <scalbn+0xb0>)
1001311e:	051b      	lsls	r3, r3, #20
10013120:	4022      	ands	r2, r4
10013122:	431a      	orrs	r2, r3
10013124:	0011      	movs	r1, r2
10013126:	bd70      	pop	{r4, r5, r6, pc}
10013128:	4d1b      	ldr	r5, [pc, #108]	; (10013198 <scalbn+0xb4>)
1001312a:	42ab      	cmp	r3, r5
1001312c:	d1f0      	bne.n	10013110 <scalbn+0x2c>
1001312e:	0002      	movs	r2, r0
10013130:	000b      	movs	r3, r1
10013132:	f001 f945 	bl	100143c0 <__aeabi_dadd>
10013136:	e7f6      	b.n	10013126 <scalbn+0x42>
10013138:	001d      	movs	r5, r3
1001313a:	3535      	adds	r5, #53	; 0x35
1001313c:	da18      	bge.n	10013170 <scalbn+0x8c>
1001313e:	4b17      	ldr	r3, [pc, #92]	; (1001319c <scalbn+0xb8>)
10013140:	0002      	movs	r2, r0
10013142:	429c      	cmp	r4, r3
10013144:	dc0a      	bgt.n	1001315c <scalbn+0x78>
10013146:	000b      	movs	r3, r1
10013148:	4815      	ldr	r0, [pc, #84]	; (100131a0 <scalbn+0xbc>)
1001314a:	4916      	ldr	r1, [pc, #88]	; (100131a4 <scalbn+0xc0>)
1001314c:	f000 f832 	bl	100131b4 <copysign>
10013150:	4a13      	ldr	r2, [pc, #76]	; (100131a0 <scalbn+0xbc>)
10013152:	4b14      	ldr	r3, [pc, #80]	; (100131a4 <scalbn+0xc0>)
10013154:	f002 f884 	bl	10015260 <__aeabi_dmul>
10013158:	e7e5      	b.n	10013126 <scalbn+0x42>
1001315a:	0002      	movs	r2, r0
1001315c:	000b      	movs	r3, r1
1001315e:	4812      	ldr	r0, [pc, #72]	; (100131a8 <scalbn+0xc4>)
10013160:	4912      	ldr	r1, [pc, #72]	; (100131ac <scalbn+0xc8>)
10013162:	f000 f827 	bl	100131b4 <copysign>
10013166:	4a10      	ldr	r2, [pc, #64]	; (100131a8 <scalbn+0xc4>)
10013168:	4b10      	ldr	r3, [pc, #64]	; (100131ac <scalbn+0xc8>)
1001316a:	f002 f879 	bl	10015260 <__aeabi_dmul>
1001316e:	e7da      	b.n	10013126 <scalbn+0x42>
10013170:	4c08      	ldr	r4, [pc, #32]	; (10013194 <scalbn+0xb0>)
10013172:	3336      	adds	r3, #54	; 0x36
10013174:	4022      	ands	r2, r4
10013176:	051b      	lsls	r3, r3, #20
10013178:	4313      	orrs	r3, r2
1001317a:	0019      	movs	r1, r3
1001317c:	2200      	movs	r2, #0
1001317e:	4b0c      	ldr	r3, [pc, #48]	; (100131b0 <scalbn+0xcc>)
10013180:	f002 f86e 	bl	10015260 <__aeabi_dmul>
10013184:	e7cf      	b.n	10013126 <scalbn+0x42>
10013186:	46c0      	nop			; (mov r8, r8)
10013188:	43500000 	.word	0x43500000
1001318c:	ffff3cb0 	.word	0xffff3cb0
10013190:	000007fe 	.word	0x000007fe
10013194:	800fffff 	.word	0x800fffff
10013198:	000007ff 	.word	0x000007ff
1001319c:	0000c350 	.word	0x0000c350
100131a0:	c2f8f359 	.word	0xc2f8f359
100131a4:	01a56e1f 	.word	0x01a56e1f
100131a8:	8800759c 	.word	0x8800759c
100131ac:	7e37e43c 	.word	0x7e37e43c
100131b0:	3c900000 	.word	0x3c900000

100131b4 <copysign>:
100131b4:	b530      	push	{r4, r5, lr}
100131b6:	004a      	lsls	r2, r1, #1
100131b8:	0fdb      	lsrs	r3, r3, #31
100131ba:	07db      	lsls	r3, r3, #31
100131bc:	0852      	lsrs	r2, r2, #1
100131be:	431a      	orrs	r2, r3
100131c0:	0011      	movs	r1, r2
100131c2:	bd30      	pop	{r4, r5, pc}

100131c4 <__gnu_thumb1_case_sqi>:
100131c4:	b402      	push	{r1}
100131c6:	4671      	mov	r1, lr
100131c8:	0849      	lsrs	r1, r1, #1
100131ca:	0049      	lsls	r1, r1, #1
100131cc:	5609      	ldrsb	r1, [r1, r0]
100131ce:	0049      	lsls	r1, r1, #1
100131d0:	448e      	add	lr, r1
100131d2:	bc02      	pop	{r1}
100131d4:	4770      	bx	lr
100131d6:	46c0      	nop			; (mov r8, r8)

100131d8 <__gnu_thumb1_case_uqi>:
100131d8:	b402      	push	{r1}
100131da:	4671      	mov	r1, lr
100131dc:	0849      	lsrs	r1, r1, #1
100131de:	0049      	lsls	r1, r1, #1
100131e0:	5c09      	ldrb	r1, [r1, r0]
100131e2:	0049      	lsls	r1, r1, #1
100131e4:	448e      	add	lr, r1
100131e6:	bc02      	pop	{r1}
100131e8:	4770      	bx	lr
100131ea:	46c0      	nop			; (mov r8, r8)

100131ec <__aeabi_uidiv>:
100131ec:	2200      	movs	r2, #0
100131ee:	0843      	lsrs	r3, r0, #1
100131f0:	428b      	cmp	r3, r1
100131f2:	d374      	bcc.n	100132de <__aeabi_uidiv+0xf2>
100131f4:	0903      	lsrs	r3, r0, #4
100131f6:	428b      	cmp	r3, r1
100131f8:	d35f      	bcc.n	100132ba <__aeabi_uidiv+0xce>
100131fa:	0a03      	lsrs	r3, r0, #8
100131fc:	428b      	cmp	r3, r1
100131fe:	d344      	bcc.n	1001328a <__aeabi_uidiv+0x9e>
10013200:	0b03      	lsrs	r3, r0, #12
10013202:	428b      	cmp	r3, r1
10013204:	d328      	bcc.n	10013258 <__aeabi_uidiv+0x6c>
10013206:	0c03      	lsrs	r3, r0, #16
10013208:	428b      	cmp	r3, r1
1001320a:	d30d      	bcc.n	10013228 <__aeabi_uidiv+0x3c>
1001320c:	22ff      	movs	r2, #255	; 0xff
1001320e:	0209      	lsls	r1, r1, #8
10013210:	ba12      	rev	r2, r2
10013212:	0c03      	lsrs	r3, r0, #16
10013214:	428b      	cmp	r3, r1
10013216:	d302      	bcc.n	1001321e <__aeabi_uidiv+0x32>
10013218:	1212      	asrs	r2, r2, #8
1001321a:	0209      	lsls	r1, r1, #8
1001321c:	d065      	beq.n	100132ea <__aeabi_uidiv+0xfe>
1001321e:	0b03      	lsrs	r3, r0, #12
10013220:	428b      	cmp	r3, r1
10013222:	d319      	bcc.n	10013258 <__aeabi_uidiv+0x6c>
10013224:	e000      	b.n	10013228 <__aeabi_uidiv+0x3c>
10013226:	0a09      	lsrs	r1, r1, #8
10013228:	0bc3      	lsrs	r3, r0, #15
1001322a:	428b      	cmp	r3, r1
1001322c:	d301      	bcc.n	10013232 <__aeabi_uidiv+0x46>
1001322e:	03cb      	lsls	r3, r1, #15
10013230:	1ac0      	subs	r0, r0, r3
10013232:	4152      	adcs	r2, r2
10013234:	0b83      	lsrs	r3, r0, #14
10013236:	428b      	cmp	r3, r1
10013238:	d301      	bcc.n	1001323e <__aeabi_uidiv+0x52>
1001323a:	038b      	lsls	r3, r1, #14
1001323c:	1ac0      	subs	r0, r0, r3
1001323e:	4152      	adcs	r2, r2
10013240:	0b43      	lsrs	r3, r0, #13
10013242:	428b      	cmp	r3, r1
10013244:	d301      	bcc.n	1001324a <__aeabi_uidiv+0x5e>
10013246:	034b      	lsls	r3, r1, #13
10013248:	1ac0      	subs	r0, r0, r3
1001324a:	4152      	adcs	r2, r2
1001324c:	0b03      	lsrs	r3, r0, #12
1001324e:	428b      	cmp	r3, r1
10013250:	d301      	bcc.n	10013256 <__aeabi_uidiv+0x6a>
10013252:	030b      	lsls	r3, r1, #12
10013254:	1ac0      	subs	r0, r0, r3
10013256:	4152      	adcs	r2, r2
10013258:	0ac3      	lsrs	r3, r0, #11
1001325a:	428b      	cmp	r3, r1
1001325c:	d301      	bcc.n	10013262 <__aeabi_uidiv+0x76>
1001325e:	02cb      	lsls	r3, r1, #11
10013260:	1ac0      	subs	r0, r0, r3
10013262:	4152      	adcs	r2, r2
10013264:	0a83      	lsrs	r3, r0, #10
10013266:	428b      	cmp	r3, r1
10013268:	d301      	bcc.n	1001326e <__aeabi_uidiv+0x82>
1001326a:	028b      	lsls	r3, r1, #10
1001326c:	1ac0      	subs	r0, r0, r3
1001326e:	4152      	adcs	r2, r2
10013270:	0a43      	lsrs	r3, r0, #9
10013272:	428b      	cmp	r3, r1
10013274:	d301      	bcc.n	1001327a <__aeabi_uidiv+0x8e>
10013276:	024b      	lsls	r3, r1, #9
10013278:	1ac0      	subs	r0, r0, r3
1001327a:	4152      	adcs	r2, r2
1001327c:	0a03      	lsrs	r3, r0, #8
1001327e:	428b      	cmp	r3, r1
10013280:	d301      	bcc.n	10013286 <__aeabi_uidiv+0x9a>
10013282:	020b      	lsls	r3, r1, #8
10013284:	1ac0      	subs	r0, r0, r3
10013286:	4152      	adcs	r2, r2
10013288:	d2cd      	bcs.n	10013226 <__aeabi_uidiv+0x3a>
1001328a:	09c3      	lsrs	r3, r0, #7
1001328c:	428b      	cmp	r3, r1
1001328e:	d301      	bcc.n	10013294 <__aeabi_uidiv+0xa8>
10013290:	01cb      	lsls	r3, r1, #7
10013292:	1ac0      	subs	r0, r0, r3
10013294:	4152      	adcs	r2, r2
10013296:	0983      	lsrs	r3, r0, #6
10013298:	428b      	cmp	r3, r1
1001329a:	d301      	bcc.n	100132a0 <__aeabi_uidiv+0xb4>
1001329c:	018b      	lsls	r3, r1, #6
1001329e:	1ac0      	subs	r0, r0, r3
100132a0:	4152      	adcs	r2, r2
100132a2:	0943      	lsrs	r3, r0, #5
100132a4:	428b      	cmp	r3, r1
100132a6:	d301      	bcc.n	100132ac <__aeabi_uidiv+0xc0>
100132a8:	014b      	lsls	r3, r1, #5
100132aa:	1ac0      	subs	r0, r0, r3
100132ac:	4152      	adcs	r2, r2
100132ae:	0903      	lsrs	r3, r0, #4
100132b0:	428b      	cmp	r3, r1
100132b2:	d301      	bcc.n	100132b8 <__aeabi_uidiv+0xcc>
100132b4:	010b      	lsls	r3, r1, #4
100132b6:	1ac0      	subs	r0, r0, r3
100132b8:	4152      	adcs	r2, r2
100132ba:	08c3      	lsrs	r3, r0, #3
100132bc:	428b      	cmp	r3, r1
100132be:	d301      	bcc.n	100132c4 <__aeabi_uidiv+0xd8>
100132c0:	00cb      	lsls	r3, r1, #3
100132c2:	1ac0      	subs	r0, r0, r3
100132c4:	4152      	adcs	r2, r2
100132c6:	0883      	lsrs	r3, r0, #2
100132c8:	428b      	cmp	r3, r1
100132ca:	d301      	bcc.n	100132d0 <__aeabi_uidiv+0xe4>
100132cc:	008b      	lsls	r3, r1, #2
100132ce:	1ac0      	subs	r0, r0, r3
100132d0:	4152      	adcs	r2, r2
100132d2:	0843      	lsrs	r3, r0, #1
100132d4:	428b      	cmp	r3, r1
100132d6:	d301      	bcc.n	100132dc <__aeabi_uidiv+0xf0>
100132d8:	004b      	lsls	r3, r1, #1
100132da:	1ac0      	subs	r0, r0, r3
100132dc:	4152      	adcs	r2, r2
100132de:	1a41      	subs	r1, r0, r1
100132e0:	d200      	bcs.n	100132e4 <__aeabi_uidiv+0xf8>
100132e2:	4601      	mov	r1, r0
100132e4:	4152      	adcs	r2, r2
100132e6:	4610      	mov	r0, r2
100132e8:	4770      	bx	lr
100132ea:	e7ff      	b.n	100132ec <__aeabi_uidiv+0x100>
100132ec:	b501      	push	{r0, lr}
100132ee:	2000      	movs	r0, #0
100132f0:	f000 f8f0 	bl	100134d4 <__aeabi_idiv0>
100132f4:	bd02      	pop	{r1, pc}
100132f6:	46c0      	nop			; (mov r8, r8)

100132f8 <__aeabi_uidivmod>:
100132f8:	2900      	cmp	r1, #0
100132fa:	d0f7      	beq.n	100132ec <__aeabi_uidiv+0x100>
100132fc:	e776      	b.n	100131ec <__aeabi_uidiv>
100132fe:	4770      	bx	lr

10013300 <__aeabi_idiv>:
10013300:	4603      	mov	r3, r0
10013302:	430b      	orrs	r3, r1
10013304:	d47f      	bmi.n	10013406 <__aeabi_idiv+0x106>
10013306:	2200      	movs	r2, #0
10013308:	0843      	lsrs	r3, r0, #1
1001330a:	428b      	cmp	r3, r1
1001330c:	d374      	bcc.n	100133f8 <__aeabi_idiv+0xf8>
1001330e:	0903      	lsrs	r3, r0, #4
10013310:	428b      	cmp	r3, r1
10013312:	d35f      	bcc.n	100133d4 <__aeabi_idiv+0xd4>
10013314:	0a03      	lsrs	r3, r0, #8
10013316:	428b      	cmp	r3, r1
10013318:	d344      	bcc.n	100133a4 <__aeabi_idiv+0xa4>
1001331a:	0b03      	lsrs	r3, r0, #12
1001331c:	428b      	cmp	r3, r1
1001331e:	d328      	bcc.n	10013372 <__aeabi_idiv+0x72>
10013320:	0c03      	lsrs	r3, r0, #16
10013322:	428b      	cmp	r3, r1
10013324:	d30d      	bcc.n	10013342 <__aeabi_idiv+0x42>
10013326:	22ff      	movs	r2, #255	; 0xff
10013328:	0209      	lsls	r1, r1, #8
1001332a:	ba12      	rev	r2, r2
1001332c:	0c03      	lsrs	r3, r0, #16
1001332e:	428b      	cmp	r3, r1
10013330:	d302      	bcc.n	10013338 <__aeabi_idiv+0x38>
10013332:	1212      	asrs	r2, r2, #8
10013334:	0209      	lsls	r1, r1, #8
10013336:	d065      	beq.n	10013404 <__aeabi_idiv+0x104>
10013338:	0b03      	lsrs	r3, r0, #12
1001333a:	428b      	cmp	r3, r1
1001333c:	d319      	bcc.n	10013372 <__aeabi_idiv+0x72>
1001333e:	e000      	b.n	10013342 <__aeabi_idiv+0x42>
10013340:	0a09      	lsrs	r1, r1, #8
10013342:	0bc3      	lsrs	r3, r0, #15
10013344:	428b      	cmp	r3, r1
10013346:	d301      	bcc.n	1001334c <__aeabi_idiv+0x4c>
10013348:	03cb      	lsls	r3, r1, #15
1001334a:	1ac0      	subs	r0, r0, r3
1001334c:	4152      	adcs	r2, r2
1001334e:	0b83      	lsrs	r3, r0, #14
10013350:	428b      	cmp	r3, r1
10013352:	d301      	bcc.n	10013358 <__aeabi_idiv+0x58>
10013354:	038b      	lsls	r3, r1, #14
10013356:	1ac0      	subs	r0, r0, r3
10013358:	4152      	adcs	r2, r2
1001335a:	0b43      	lsrs	r3, r0, #13
1001335c:	428b      	cmp	r3, r1
1001335e:	d301      	bcc.n	10013364 <__aeabi_idiv+0x64>
10013360:	034b      	lsls	r3, r1, #13
10013362:	1ac0      	subs	r0, r0, r3
10013364:	4152      	adcs	r2, r2
10013366:	0b03      	lsrs	r3, r0, #12
10013368:	428b      	cmp	r3, r1
1001336a:	d301      	bcc.n	10013370 <__aeabi_idiv+0x70>
1001336c:	030b      	lsls	r3, r1, #12
1001336e:	1ac0      	subs	r0, r0, r3
10013370:	4152      	adcs	r2, r2
10013372:	0ac3      	lsrs	r3, r0, #11
10013374:	428b      	cmp	r3, r1
10013376:	d301      	bcc.n	1001337c <__aeabi_idiv+0x7c>
10013378:	02cb      	lsls	r3, r1, #11
1001337a:	1ac0      	subs	r0, r0, r3
1001337c:	4152      	adcs	r2, r2
1001337e:	0a83      	lsrs	r3, r0, #10
10013380:	428b      	cmp	r3, r1
10013382:	d301      	bcc.n	10013388 <__aeabi_idiv+0x88>
10013384:	028b      	lsls	r3, r1, #10
10013386:	1ac0      	subs	r0, r0, r3
10013388:	4152      	adcs	r2, r2
1001338a:	0a43      	lsrs	r3, r0, #9
1001338c:	428b      	cmp	r3, r1
1001338e:	d301      	bcc.n	10013394 <__aeabi_idiv+0x94>
10013390:	024b      	lsls	r3, r1, #9
10013392:	1ac0      	subs	r0, r0, r3
10013394:	4152      	adcs	r2, r2
10013396:	0a03      	lsrs	r3, r0, #8
10013398:	428b      	cmp	r3, r1
1001339a:	d301      	bcc.n	100133a0 <__aeabi_idiv+0xa0>
1001339c:	020b      	lsls	r3, r1, #8
1001339e:	1ac0      	subs	r0, r0, r3
100133a0:	4152      	adcs	r2, r2
100133a2:	d2cd      	bcs.n	10013340 <__aeabi_idiv+0x40>
100133a4:	09c3      	lsrs	r3, r0, #7
100133a6:	428b      	cmp	r3, r1
100133a8:	d301      	bcc.n	100133ae <__aeabi_idiv+0xae>
100133aa:	01cb      	lsls	r3, r1, #7
100133ac:	1ac0      	subs	r0, r0, r3
100133ae:	4152      	adcs	r2, r2
100133b0:	0983      	lsrs	r3, r0, #6
100133b2:	428b      	cmp	r3, r1
100133b4:	d301      	bcc.n	100133ba <__aeabi_idiv+0xba>
100133b6:	018b      	lsls	r3, r1, #6
100133b8:	1ac0      	subs	r0, r0, r3
100133ba:	4152      	adcs	r2, r2
100133bc:	0943      	lsrs	r3, r0, #5
100133be:	428b      	cmp	r3, r1
100133c0:	d301      	bcc.n	100133c6 <__aeabi_idiv+0xc6>
100133c2:	014b      	lsls	r3, r1, #5
100133c4:	1ac0      	subs	r0, r0, r3
100133c6:	4152      	adcs	r2, r2
100133c8:	0903      	lsrs	r3, r0, #4
100133ca:	428b      	cmp	r3, r1
100133cc:	d301      	bcc.n	100133d2 <__aeabi_idiv+0xd2>
100133ce:	010b      	lsls	r3, r1, #4
100133d0:	1ac0      	subs	r0, r0, r3
100133d2:	4152      	adcs	r2, r2
100133d4:	08c3      	lsrs	r3, r0, #3
100133d6:	428b      	cmp	r3, r1
100133d8:	d301      	bcc.n	100133de <__aeabi_idiv+0xde>
100133da:	00cb      	lsls	r3, r1, #3
100133dc:	1ac0      	subs	r0, r0, r3
100133de:	4152      	adcs	r2, r2
100133e0:	0883      	lsrs	r3, r0, #2
100133e2:	428b      	cmp	r3, r1
100133e4:	d301      	bcc.n	100133ea <__aeabi_idiv+0xea>
100133e6:	008b      	lsls	r3, r1, #2
100133e8:	1ac0      	subs	r0, r0, r3
100133ea:	4152      	adcs	r2, r2
100133ec:	0843      	lsrs	r3, r0, #1
100133ee:	428b      	cmp	r3, r1
100133f0:	d301      	bcc.n	100133f6 <__aeabi_idiv+0xf6>
100133f2:	004b      	lsls	r3, r1, #1
100133f4:	1ac0      	subs	r0, r0, r3
100133f6:	4152      	adcs	r2, r2
100133f8:	1a41      	subs	r1, r0, r1
100133fa:	d200      	bcs.n	100133fe <__aeabi_idiv+0xfe>
100133fc:	4601      	mov	r1, r0
100133fe:	4152      	adcs	r2, r2
10013400:	4610      	mov	r0, r2
10013402:	4770      	bx	lr
10013404:	e05d      	b.n	100134c2 <__aeabi_idiv+0x1c2>
10013406:	0fca      	lsrs	r2, r1, #31
10013408:	d000      	beq.n	1001340c <__aeabi_idiv+0x10c>
1001340a:	4249      	negs	r1, r1
1001340c:	1003      	asrs	r3, r0, #32
1001340e:	d300      	bcc.n	10013412 <__aeabi_idiv+0x112>
10013410:	4240      	negs	r0, r0
10013412:	4053      	eors	r3, r2
10013414:	2200      	movs	r2, #0
10013416:	469c      	mov	ip, r3
10013418:	0903      	lsrs	r3, r0, #4
1001341a:	428b      	cmp	r3, r1
1001341c:	d32d      	bcc.n	1001347a <__aeabi_idiv+0x17a>
1001341e:	0a03      	lsrs	r3, r0, #8
10013420:	428b      	cmp	r3, r1
10013422:	d312      	bcc.n	1001344a <__aeabi_idiv+0x14a>
10013424:	22fc      	movs	r2, #252	; 0xfc
10013426:	0189      	lsls	r1, r1, #6
10013428:	ba12      	rev	r2, r2
1001342a:	0a03      	lsrs	r3, r0, #8
1001342c:	428b      	cmp	r3, r1
1001342e:	d30c      	bcc.n	1001344a <__aeabi_idiv+0x14a>
10013430:	0189      	lsls	r1, r1, #6
10013432:	1192      	asrs	r2, r2, #6
10013434:	428b      	cmp	r3, r1
10013436:	d308      	bcc.n	1001344a <__aeabi_idiv+0x14a>
10013438:	0189      	lsls	r1, r1, #6
1001343a:	1192      	asrs	r2, r2, #6
1001343c:	428b      	cmp	r3, r1
1001343e:	d304      	bcc.n	1001344a <__aeabi_idiv+0x14a>
10013440:	0189      	lsls	r1, r1, #6
10013442:	d03a      	beq.n	100134ba <__aeabi_idiv+0x1ba>
10013444:	1192      	asrs	r2, r2, #6
10013446:	e000      	b.n	1001344a <__aeabi_idiv+0x14a>
10013448:	0989      	lsrs	r1, r1, #6
1001344a:	09c3      	lsrs	r3, r0, #7
1001344c:	428b      	cmp	r3, r1
1001344e:	d301      	bcc.n	10013454 <__aeabi_idiv+0x154>
10013450:	01cb      	lsls	r3, r1, #7
10013452:	1ac0      	subs	r0, r0, r3
10013454:	4152      	adcs	r2, r2
10013456:	0983      	lsrs	r3, r0, #6
10013458:	428b      	cmp	r3, r1
1001345a:	d301      	bcc.n	10013460 <__aeabi_idiv+0x160>
1001345c:	018b      	lsls	r3, r1, #6
1001345e:	1ac0      	subs	r0, r0, r3
10013460:	4152      	adcs	r2, r2
10013462:	0943      	lsrs	r3, r0, #5
10013464:	428b      	cmp	r3, r1
10013466:	d301      	bcc.n	1001346c <__aeabi_idiv+0x16c>
10013468:	014b      	lsls	r3, r1, #5
1001346a:	1ac0      	subs	r0, r0, r3
1001346c:	4152      	adcs	r2, r2
1001346e:	0903      	lsrs	r3, r0, #4
10013470:	428b      	cmp	r3, r1
10013472:	d301      	bcc.n	10013478 <__aeabi_idiv+0x178>
10013474:	010b      	lsls	r3, r1, #4
10013476:	1ac0      	subs	r0, r0, r3
10013478:	4152      	adcs	r2, r2
1001347a:	08c3      	lsrs	r3, r0, #3
1001347c:	428b      	cmp	r3, r1
1001347e:	d301      	bcc.n	10013484 <__aeabi_idiv+0x184>
10013480:	00cb      	lsls	r3, r1, #3
10013482:	1ac0      	subs	r0, r0, r3
10013484:	4152      	adcs	r2, r2
10013486:	0883      	lsrs	r3, r0, #2
10013488:	428b      	cmp	r3, r1
1001348a:	d301      	bcc.n	10013490 <__aeabi_idiv+0x190>
1001348c:	008b      	lsls	r3, r1, #2
1001348e:	1ac0      	subs	r0, r0, r3
10013490:	4152      	adcs	r2, r2
10013492:	d2d9      	bcs.n	10013448 <__aeabi_idiv+0x148>
10013494:	0843      	lsrs	r3, r0, #1
10013496:	428b      	cmp	r3, r1
10013498:	d301      	bcc.n	1001349e <__aeabi_idiv+0x19e>
1001349a:	004b      	lsls	r3, r1, #1
1001349c:	1ac0      	subs	r0, r0, r3
1001349e:	4152      	adcs	r2, r2
100134a0:	1a41      	subs	r1, r0, r1
100134a2:	d200      	bcs.n	100134a6 <__aeabi_idiv+0x1a6>
100134a4:	4601      	mov	r1, r0
100134a6:	4663      	mov	r3, ip
100134a8:	4152      	adcs	r2, r2
100134aa:	105b      	asrs	r3, r3, #1
100134ac:	4610      	mov	r0, r2
100134ae:	d301      	bcc.n	100134b4 <__aeabi_idiv+0x1b4>
100134b0:	4240      	negs	r0, r0
100134b2:	2b00      	cmp	r3, #0
100134b4:	d500      	bpl.n	100134b8 <__aeabi_idiv+0x1b8>
100134b6:	4249      	negs	r1, r1
100134b8:	4770      	bx	lr
100134ba:	4663      	mov	r3, ip
100134bc:	105b      	asrs	r3, r3, #1
100134be:	d300      	bcc.n	100134c2 <__aeabi_idiv+0x1c2>
100134c0:	4240      	negs	r0, r0
100134c2:	b501      	push	{r0, lr}
100134c4:	2000      	movs	r0, #0
100134c6:	f000 f805 	bl	100134d4 <__aeabi_idiv0>
100134ca:	bd02      	pop	{r1, pc}

100134cc <__aeabi_idivmod>:
100134cc:	2900      	cmp	r1, #0
100134ce:	d0f8      	beq.n	100134c2 <__aeabi_idiv+0x1c2>
100134d0:	e716      	b.n	10013300 <__aeabi_idiv>
100134d2:	4770      	bx	lr

100134d4 <__aeabi_idiv0>:
100134d4:	4770      	bx	lr
100134d6:	46c0      	nop			; (mov r8, r8)

100134d8 <__aeabi_cdrcmple>:
100134d8:	4684      	mov	ip, r0
100134da:	1c10      	adds	r0, r2, #0
100134dc:	4662      	mov	r2, ip
100134de:	468c      	mov	ip, r1
100134e0:	1c19      	adds	r1, r3, #0
100134e2:	4663      	mov	r3, ip
100134e4:	e000      	b.n	100134e8 <__aeabi_cdcmpeq>
100134e6:	46c0      	nop			; (mov r8, r8)

100134e8 <__aeabi_cdcmpeq>:
100134e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
100134ea:	f001 fe4f 	bl	1001518c <__ledf2>
100134ee:	2800      	cmp	r0, #0
100134f0:	d401      	bmi.n	100134f6 <__aeabi_cdcmpeq+0xe>
100134f2:	2100      	movs	r1, #0
100134f4:	42c8      	cmn	r0, r1
100134f6:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

100134f8 <__aeabi_dcmpeq>:
100134f8:	b510      	push	{r4, lr}
100134fa:	f001 fda3 	bl	10015044 <__eqdf2>
100134fe:	4240      	negs	r0, r0
10013500:	3001      	adds	r0, #1
10013502:	bd10      	pop	{r4, pc}

10013504 <__aeabi_dcmplt>:
10013504:	b510      	push	{r4, lr}
10013506:	f001 fe41 	bl	1001518c <__ledf2>
1001350a:	2800      	cmp	r0, #0
1001350c:	db01      	blt.n	10013512 <__aeabi_dcmplt+0xe>
1001350e:	2000      	movs	r0, #0
10013510:	bd10      	pop	{r4, pc}
10013512:	2001      	movs	r0, #1
10013514:	bd10      	pop	{r4, pc}
10013516:	46c0      	nop			; (mov r8, r8)

10013518 <__aeabi_dcmple>:
10013518:	b510      	push	{r4, lr}
1001351a:	f001 fe37 	bl	1001518c <__ledf2>
1001351e:	2800      	cmp	r0, #0
10013520:	dd01      	ble.n	10013526 <__aeabi_dcmple+0xe>
10013522:	2000      	movs	r0, #0
10013524:	bd10      	pop	{r4, pc}
10013526:	2001      	movs	r0, #1
10013528:	bd10      	pop	{r4, pc}
1001352a:	46c0      	nop			; (mov r8, r8)

1001352c <__aeabi_dcmpgt>:
1001352c:	b510      	push	{r4, lr}
1001352e:	f001 fdc9 	bl	100150c4 <__gedf2>
10013532:	2800      	cmp	r0, #0
10013534:	dc01      	bgt.n	1001353a <__aeabi_dcmpgt+0xe>
10013536:	2000      	movs	r0, #0
10013538:	bd10      	pop	{r4, pc}
1001353a:	2001      	movs	r0, #1
1001353c:	bd10      	pop	{r4, pc}
1001353e:	46c0      	nop			; (mov r8, r8)

10013540 <__aeabi_dcmpge>:
10013540:	b510      	push	{r4, lr}
10013542:	f001 fdbf 	bl	100150c4 <__gedf2>
10013546:	2800      	cmp	r0, #0
10013548:	da01      	bge.n	1001354e <__aeabi_dcmpge+0xe>
1001354a:	2000      	movs	r0, #0
1001354c:	bd10      	pop	{r4, pc}
1001354e:	2001      	movs	r0, #1
10013550:	bd10      	pop	{r4, pc}
10013552:	46c0      	nop			; (mov r8, r8)

10013554 <__aeabi_cfrcmple>:
10013554:	4684      	mov	ip, r0
10013556:	1c08      	adds	r0, r1, #0
10013558:	4661      	mov	r1, ip
1001355a:	e7ff      	b.n	1001355c <__aeabi_cfcmpeq>

1001355c <__aeabi_cfcmpeq>:
1001355c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
1001355e:	f000 fb91 	bl	10013c84 <__lesf2>
10013562:	2800      	cmp	r0, #0
10013564:	d401      	bmi.n	1001356a <__aeabi_cfcmpeq+0xe>
10013566:	2100      	movs	r1, #0
10013568:	42c8      	cmn	r0, r1
1001356a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

1001356c <__aeabi_fcmpeq>:
1001356c:	b510      	push	{r4, lr}
1001356e:	f000 fb1d 	bl	10013bac <__eqsf2>
10013572:	4240      	negs	r0, r0
10013574:	3001      	adds	r0, #1
10013576:	bd10      	pop	{r4, pc}

10013578 <__aeabi_fcmplt>:
10013578:	b510      	push	{r4, lr}
1001357a:	f000 fb83 	bl	10013c84 <__lesf2>
1001357e:	2800      	cmp	r0, #0
10013580:	db01      	blt.n	10013586 <__aeabi_fcmplt+0xe>
10013582:	2000      	movs	r0, #0
10013584:	bd10      	pop	{r4, pc}
10013586:	2001      	movs	r0, #1
10013588:	bd10      	pop	{r4, pc}
1001358a:	46c0      	nop			; (mov r8, r8)

1001358c <__aeabi_fcmple>:
1001358c:	b510      	push	{r4, lr}
1001358e:	f000 fb79 	bl	10013c84 <__lesf2>
10013592:	2800      	cmp	r0, #0
10013594:	dd01      	ble.n	1001359a <__aeabi_fcmple+0xe>
10013596:	2000      	movs	r0, #0
10013598:	bd10      	pop	{r4, pc}
1001359a:	2001      	movs	r0, #1
1001359c:	bd10      	pop	{r4, pc}
1001359e:	46c0      	nop			; (mov r8, r8)

100135a0 <__aeabi_fcmpgt>:
100135a0:	b510      	push	{r4, lr}
100135a2:	f000 fb2b 	bl	10013bfc <__gesf2>
100135a6:	2800      	cmp	r0, #0
100135a8:	dc01      	bgt.n	100135ae <__aeabi_fcmpgt+0xe>
100135aa:	2000      	movs	r0, #0
100135ac:	bd10      	pop	{r4, pc}
100135ae:	2001      	movs	r0, #1
100135b0:	bd10      	pop	{r4, pc}
100135b2:	46c0      	nop			; (mov r8, r8)

100135b4 <__aeabi_fcmpge>:
100135b4:	b510      	push	{r4, lr}
100135b6:	f000 fb21 	bl	10013bfc <__gesf2>
100135ba:	2800      	cmp	r0, #0
100135bc:	da01      	bge.n	100135c2 <__aeabi_fcmpge+0xe>
100135be:	2000      	movs	r0, #0
100135c0:	bd10      	pop	{r4, pc}
100135c2:	2001      	movs	r0, #1
100135c4:	bd10      	pop	{r4, pc}
100135c6:	46c0      	nop			; (mov r8, r8)

100135c8 <__aeabi_lmul>:
100135c8:	b5f0      	push	{r4, r5, r6, r7, lr}
100135ca:	464f      	mov	r7, r9
100135cc:	4646      	mov	r6, r8
100135ce:	b4c0      	push	{r6, r7}
100135d0:	0416      	lsls	r6, r2, #16
100135d2:	0c36      	lsrs	r6, r6, #16
100135d4:	4699      	mov	r9, r3
100135d6:	0033      	movs	r3, r6
100135d8:	0405      	lsls	r5, r0, #16
100135da:	0c2c      	lsrs	r4, r5, #16
100135dc:	0c07      	lsrs	r7, r0, #16
100135de:	0c15      	lsrs	r5, r2, #16
100135e0:	4363      	muls	r3, r4
100135e2:	437e      	muls	r6, r7
100135e4:	436f      	muls	r7, r5
100135e6:	4365      	muls	r5, r4
100135e8:	0c1c      	lsrs	r4, r3, #16
100135ea:	19ad      	adds	r5, r5, r6
100135ec:	1964      	adds	r4, r4, r5
100135ee:	469c      	mov	ip, r3
100135f0:	42a6      	cmp	r6, r4
100135f2:	d903      	bls.n	100135fc <__aeabi_lmul+0x34>
100135f4:	2380      	movs	r3, #128	; 0x80
100135f6:	025b      	lsls	r3, r3, #9
100135f8:	4698      	mov	r8, r3
100135fa:	4447      	add	r7, r8
100135fc:	4663      	mov	r3, ip
100135fe:	0c25      	lsrs	r5, r4, #16
10013600:	19ef      	adds	r7, r5, r7
10013602:	041d      	lsls	r5, r3, #16
10013604:	464b      	mov	r3, r9
10013606:	434a      	muls	r2, r1
10013608:	4343      	muls	r3, r0
1001360a:	0c2d      	lsrs	r5, r5, #16
1001360c:	0424      	lsls	r4, r4, #16
1001360e:	1964      	adds	r4, r4, r5
10013610:	1899      	adds	r1, r3, r2
10013612:	19c9      	adds	r1, r1, r7
10013614:	0020      	movs	r0, r4
10013616:	bc0c      	pop	{r2, r3}
10013618:	4690      	mov	r8, r2
1001361a:	4699      	mov	r9, r3
1001361c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001361e:	46c0      	nop			; (mov r8, r8)

10013620 <__aeabi_f2uiz>:
10013620:	219e      	movs	r1, #158	; 0x9e
10013622:	b510      	push	{r4, lr}
10013624:	05c9      	lsls	r1, r1, #23
10013626:	1c04      	adds	r4, r0, #0
10013628:	f7ff ffc4 	bl	100135b4 <__aeabi_fcmpge>
1001362c:	2800      	cmp	r0, #0
1001362e:	d103      	bne.n	10013638 <__aeabi_f2uiz+0x18>
10013630:	1c20      	adds	r0, r4, #0
10013632:	f000 fe1d 	bl	10014270 <__aeabi_f2iz>
10013636:	bd10      	pop	{r4, pc}
10013638:	219e      	movs	r1, #158	; 0x9e
1001363a:	1c20      	adds	r0, r4, #0
1001363c:	05c9      	lsls	r1, r1, #23
1001363e:	f000 fc79 	bl	10013f34 <__aeabi_fsub>
10013642:	f000 fe15 	bl	10014270 <__aeabi_f2iz>
10013646:	2380      	movs	r3, #128	; 0x80
10013648:	061b      	lsls	r3, r3, #24
1001364a:	469c      	mov	ip, r3
1001364c:	4460      	add	r0, ip
1001364e:	e7f2      	b.n	10013636 <__aeabi_f2uiz+0x16>

10013650 <__aeabi_d2uiz>:
10013650:	b570      	push	{r4, r5, r6, lr}
10013652:	2200      	movs	r2, #0
10013654:	4b0c      	ldr	r3, [pc, #48]	; (10013688 <__aeabi_d2uiz+0x38>)
10013656:	0004      	movs	r4, r0
10013658:	000d      	movs	r5, r1
1001365a:	f7ff ff71 	bl	10013540 <__aeabi_dcmpge>
1001365e:	2800      	cmp	r0, #0
10013660:	d104      	bne.n	1001366c <__aeabi_d2uiz+0x1c>
10013662:	0020      	movs	r0, r4
10013664:	0029      	movs	r1, r5
10013666:	f002 fbe9 	bl	10015e3c <__aeabi_d2iz>
1001366a:	bd70      	pop	{r4, r5, r6, pc}
1001366c:	4b06      	ldr	r3, [pc, #24]	; (10013688 <__aeabi_d2uiz+0x38>)
1001366e:	2200      	movs	r2, #0
10013670:	0020      	movs	r0, r4
10013672:	0029      	movs	r1, r5
10013674:	f002 f86e 	bl	10015754 <__aeabi_dsub>
10013678:	f002 fbe0 	bl	10015e3c <__aeabi_d2iz>
1001367c:	2380      	movs	r3, #128	; 0x80
1001367e:	061b      	lsls	r3, r3, #24
10013680:	469c      	mov	ip, r3
10013682:	4460      	add	r0, ip
10013684:	e7f1      	b.n	1001366a <__aeabi_d2uiz+0x1a>
10013686:	46c0      	nop			; (mov r8, r8)
10013688:	41e00000 	.word	0x41e00000

1001368c <__aeabi_fadd>:
1001368c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001368e:	024a      	lsls	r2, r1, #9
10013690:	0243      	lsls	r3, r0, #9
10013692:	0044      	lsls	r4, r0, #1
10013694:	004e      	lsls	r6, r1, #1
10013696:	0fc5      	lsrs	r5, r0, #31
10013698:	0e24      	lsrs	r4, r4, #24
1001369a:	0028      	movs	r0, r5
1001369c:	099b      	lsrs	r3, r3, #6
1001369e:	0e36      	lsrs	r6, r6, #24
100136a0:	0fc9      	lsrs	r1, r1, #31
100136a2:	0992      	lsrs	r2, r2, #6
100136a4:	428d      	cmp	r5, r1
100136a6:	d059      	beq.n	1001375c <__aeabi_fadd+0xd0>
100136a8:	1ba0      	subs	r0, r4, r6
100136aa:	2800      	cmp	r0, #0
100136ac:	dc00      	bgt.n	100136b0 <__aeabi_fadd+0x24>
100136ae:	e08d      	b.n	100137cc <__aeabi_fadd+0x140>
100136b0:	2e00      	cmp	r6, #0
100136b2:	d11a      	bne.n	100136ea <__aeabi_fadd+0x5e>
100136b4:	2a00      	cmp	r2, #0
100136b6:	d000      	beq.n	100136ba <__aeabi_fadd+0x2e>
100136b8:	e079      	b.n	100137ae <__aeabi_fadd+0x122>
100136ba:	075a      	lsls	r2, r3, #29
100136bc:	d004      	beq.n	100136c8 <__aeabi_fadd+0x3c>
100136be:	220f      	movs	r2, #15
100136c0:	401a      	ands	r2, r3
100136c2:	2a04      	cmp	r2, #4
100136c4:	d000      	beq.n	100136c8 <__aeabi_fadd+0x3c>
100136c6:	3304      	adds	r3, #4
100136c8:	015a      	lsls	r2, r3, #5
100136ca:	d538      	bpl.n	1001373e <__aeabi_fadd+0xb2>
100136cc:	3401      	adds	r4, #1
100136ce:	2cff      	cmp	r4, #255	; 0xff
100136d0:	d100      	bne.n	100136d4 <__aeabi_fadd+0x48>
100136d2:	e089      	b.n	100137e8 <__aeabi_fadd+0x15c>
100136d4:	0028      	movs	r0, r5
100136d6:	019b      	lsls	r3, r3, #6
100136d8:	0a5b      	lsrs	r3, r3, #9
100136da:	b2e4      	uxtb	r4, r4
100136dc:	025b      	lsls	r3, r3, #9
100136de:	05e4      	lsls	r4, r4, #23
100136e0:	0a5b      	lsrs	r3, r3, #9
100136e2:	4323      	orrs	r3, r4
100136e4:	07c0      	lsls	r0, r0, #31
100136e6:	4318      	orrs	r0, r3
100136e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100136ea:	2cff      	cmp	r4, #255	; 0xff
100136ec:	d0e5      	beq.n	100136ba <__aeabi_fadd+0x2e>
100136ee:	2180      	movs	r1, #128	; 0x80
100136f0:	04c9      	lsls	r1, r1, #19
100136f2:	430a      	orrs	r2, r1
100136f4:	281b      	cmp	r0, #27
100136f6:	dd00      	ble.n	100136fa <__aeabi_fadd+0x6e>
100136f8:	e089      	b.n	1001380e <__aeabi_fadd+0x182>
100136fa:	0016      	movs	r6, r2
100136fc:	2120      	movs	r1, #32
100136fe:	40c6      	lsrs	r6, r0
10013700:	1a08      	subs	r0, r1, r0
10013702:	4082      	lsls	r2, r0
10013704:	1e51      	subs	r1, r2, #1
10013706:	418a      	sbcs	r2, r1
10013708:	4332      	orrs	r2, r6
1001370a:	1a9b      	subs	r3, r3, r2
1001370c:	015a      	lsls	r2, r3, #5
1001370e:	d514      	bpl.n	1001373a <__aeabi_fadd+0xae>
10013710:	019b      	lsls	r3, r3, #6
10013712:	099e      	lsrs	r6, r3, #6
10013714:	0030      	movs	r0, r6
10013716:	f002 fd21 	bl	1001615c <__clzsi2>
1001371a:	3805      	subs	r0, #5
1001371c:	4086      	lsls	r6, r0
1001371e:	4284      	cmp	r4, r0
10013720:	dc65      	bgt.n	100137ee <__aeabi_fadd+0x162>
10013722:	1b04      	subs	r4, r0, r4
10013724:	0033      	movs	r3, r6
10013726:	2020      	movs	r0, #32
10013728:	3401      	adds	r4, #1
1001372a:	40e3      	lsrs	r3, r4
1001372c:	1b04      	subs	r4, r0, r4
1001372e:	40a6      	lsls	r6, r4
10013730:	1e72      	subs	r2, r6, #1
10013732:	4196      	sbcs	r6, r2
10013734:	2400      	movs	r4, #0
10013736:	4333      	orrs	r3, r6
10013738:	e7bf      	b.n	100136ba <__aeabi_fadd+0x2e>
1001373a:	075a      	lsls	r2, r3, #29
1001373c:	d1bf      	bne.n	100136be <__aeabi_fadd+0x32>
1001373e:	08df      	lsrs	r7, r3, #3
10013740:	0028      	movs	r0, r5
10013742:	2cff      	cmp	r4, #255	; 0xff
10013744:	d12f      	bne.n	100137a6 <__aeabi_fadd+0x11a>
10013746:	2f00      	cmp	r7, #0
10013748:	d100      	bne.n	1001374c <__aeabi_fadd+0xc0>
1001374a:	e087      	b.n	1001385c <__aeabi_fadd+0x1d0>
1001374c:	2280      	movs	r2, #128	; 0x80
1001374e:	03d2      	lsls	r2, r2, #15
10013750:	0013      	movs	r3, r2
10013752:	433b      	orrs	r3, r7
10013754:	025b      	lsls	r3, r3, #9
10013756:	0a5b      	lsrs	r3, r3, #9
10013758:	24ff      	movs	r4, #255	; 0xff
1001375a:	e7bf      	b.n	100136dc <__aeabi_fadd+0x50>
1001375c:	1ba1      	subs	r1, r4, r6
1001375e:	2900      	cmp	r1, #0
10013760:	dd49      	ble.n	100137f6 <__aeabi_fadd+0x16a>
10013762:	2e00      	cmp	r6, #0
10013764:	d029      	beq.n	100137ba <__aeabi_fadd+0x12e>
10013766:	2cff      	cmp	r4, #255	; 0xff
10013768:	d0a7      	beq.n	100136ba <__aeabi_fadd+0x2e>
1001376a:	2680      	movs	r6, #128	; 0x80
1001376c:	04f6      	lsls	r6, r6, #19
1001376e:	4332      	orrs	r2, r6
10013770:	291b      	cmp	r1, #27
10013772:	dd00      	ble.n	10013776 <__aeabi_fadd+0xea>
10013774:	e08d      	b.n	10013892 <__aeabi_fadd+0x206>
10013776:	0017      	movs	r7, r2
10013778:	2620      	movs	r6, #32
1001377a:	40cf      	lsrs	r7, r1
1001377c:	1a71      	subs	r1, r6, r1
1001377e:	408a      	lsls	r2, r1
10013780:	1e51      	subs	r1, r2, #1
10013782:	418a      	sbcs	r2, r1
10013784:	433a      	orrs	r2, r7
10013786:	189b      	adds	r3, r3, r2
10013788:	015a      	lsls	r2, r3, #5
1001378a:	d5d6      	bpl.n	1001373a <__aeabi_fadd+0xae>
1001378c:	3401      	adds	r4, #1
1001378e:	2cff      	cmp	r4, #255	; 0xff
10013790:	d064      	beq.n	1001385c <__aeabi_fadd+0x1d0>
10013792:	2201      	movs	r2, #1
10013794:	4976      	ldr	r1, [pc, #472]	; (10013970 <__aeabi_fadd+0x2e4>)
10013796:	401a      	ands	r2, r3
10013798:	085b      	lsrs	r3, r3, #1
1001379a:	400b      	ands	r3, r1
1001379c:	4313      	orrs	r3, r2
1001379e:	e78c      	b.n	100136ba <__aeabi_fadd+0x2e>
100137a0:	1e03      	subs	r3, r0, #0
100137a2:	d1ca      	bne.n	1001373a <__aeabi_fadd+0xae>
100137a4:	2000      	movs	r0, #0
100137a6:	027b      	lsls	r3, r7, #9
100137a8:	0a5b      	lsrs	r3, r3, #9
100137aa:	b2e4      	uxtb	r4, r4
100137ac:	e796      	b.n	100136dc <__aeabi_fadd+0x50>
100137ae:	3801      	subs	r0, #1
100137b0:	2800      	cmp	r0, #0
100137b2:	d0aa      	beq.n	1001370a <__aeabi_fadd+0x7e>
100137b4:	2cff      	cmp	r4, #255	; 0xff
100137b6:	d19d      	bne.n	100136f4 <__aeabi_fadd+0x68>
100137b8:	e77f      	b.n	100136ba <__aeabi_fadd+0x2e>
100137ba:	2a00      	cmp	r2, #0
100137bc:	d100      	bne.n	100137c0 <__aeabi_fadd+0x134>
100137be:	e77c      	b.n	100136ba <__aeabi_fadd+0x2e>
100137c0:	3901      	subs	r1, #1
100137c2:	2900      	cmp	r1, #0
100137c4:	d0df      	beq.n	10013786 <__aeabi_fadd+0xfa>
100137c6:	2cff      	cmp	r4, #255	; 0xff
100137c8:	d1d2      	bne.n	10013770 <__aeabi_fadd+0xe4>
100137ca:	e776      	b.n	100136ba <__aeabi_fadd+0x2e>
100137cc:	2800      	cmp	r0, #0
100137ce:	d120      	bne.n	10013812 <__aeabi_fadd+0x186>
100137d0:	1c60      	adds	r0, r4, #1
100137d2:	b2c0      	uxtb	r0, r0
100137d4:	2801      	cmp	r0, #1
100137d6:	dd53      	ble.n	10013880 <__aeabi_fadd+0x1f4>
100137d8:	2780      	movs	r7, #128	; 0x80
100137da:	1a9e      	subs	r6, r3, r2
100137dc:	04ff      	lsls	r7, r7, #19
100137de:	4037      	ands	r7, r6
100137e0:	d02f      	beq.n	10013842 <__aeabi_fadd+0x1b6>
100137e2:	1ad6      	subs	r6, r2, r3
100137e4:	000d      	movs	r5, r1
100137e6:	e795      	b.n	10013714 <__aeabi_fadd+0x88>
100137e8:	0028      	movs	r0, r5
100137ea:	2300      	movs	r3, #0
100137ec:	e776      	b.n	100136dc <__aeabi_fadd+0x50>
100137ee:	4b61      	ldr	r3, [pc, #388]	; (10013974 <__aeabi_fadd+0x2e8>)
100137f0:	1a24      	subs	r4, r4, r0
100137f2:	4033      	ands	r3, r6
100137f4:	e761      	b.n	100136ba <__aeabi_fadd+0x2e>
100137f6:	2900      	cmp	r1, #0
100137f8:	d14d      	bne.n	10013896 <__aeabi_fadd+0x20a>
100137fa:	1c61      	adds	r1, r4, #1
100137fc:	b2ce      	uxtb	r6, r1
100137fe:	2e01      	cmp	r6, #1
10013800:	dd2f      	ble.n	10013862 <__aeabi_fadd+0x1d6>
10013802:	29ff      	cmp	r1, #255	; 0xff
10013804:	d02a      	beq.n	1001385c <__aeabi_fadd+0x1d0>
10013806:	189b      	adds	r3, r3, r2
10013808:	085b      	lsrs	r3, r3, #1
1001380a:	000c      	movs	r4, r1
1001380c:	e755      	b.n	100136ba <__aeabi_fadd+0x2e>
1001380e:	2201      	movs	r2, #1
10013810:	e77b      	b.n	1001370a <__aeabi_fadd+0x7e>
10013812:	2c00      	cmp	r4, #0
10013814:	d11b      	bne.n	1001384e <__aeabi_fadd+0x1c2>
10013816:	2b00      	cmp	r3, #0
10013818:	d05b      	beq.n	100138d2 <__aeabi_fadd+0x246>
1001381a:	43c0      	mvns	r0, r0
1001381c:	2800      	cmp	r0, #0
1001381e:	d00c      	beq.n	1001383a <__aeabi_fadd+0x1ae>
10013820:	2eff      	cmp	r6, #255	; 0xff
10013822:	d07e      	beq.n	10013922 <__aeabi_fadd+0x296>
10013824:	281b      	cmp	r0, #27
10013826:	dd00      	ble.n	1001382a <__aeabi_fadd+0x19e>
10013828:	e092      	b.n	10013950 <__aeabi_fadd+0x2c4>
1001382a:	001d      	movs	r5, r3
1001382c:	2420      	movs	r4, #32
1001382e:	40c5      	lsrs	r5, r0
10013830:	1a20      	subs	r0, r4, r0
10013832:	4083      	lsls	r3, r0
10013834:	1e58      	subs	r0, r3, #1
10013836:	4183      	sbcs	r3, r0
10013838:	432b      	orrs	r3, r5
1001383a:	1ad3      	subs	r3, r2, r3
1001383c:	0034      	movs	r4, r6
1001383e:	000d      	movs	r5, r1
10013840:	e764      	b.n	1001370c <__aeabi_fadd+0x80>
10013842:	2e00      	cmp	r6, #0
10013844:	d000      	beq.n	10013848 <__aeabi_fadd+0x1bc>
10013846:	e765      	b.n	10013714 <__aeabi_fadd+0x88>
10013848:	2000      	movs	r0, #0
1001384a:	2400      	movs	r4, #0
1001384c:	e7ab      	b.n	100137a6 <__aeabi_fadd+0x11a>
1001384e:	2eff      	cmp	r6, #255	; 0xff
10013850:	d067      	beq.n	10013922 <__aeabi_fadd+0x296>
10013852:	2480      	movs	r4, #128	; 0x80
10013854:	04e4      	lsls	r4, r4, #19
10013856:	4240      	negs	r0, r0
10013858:	4323      	orrs	r3, r4
1001385a:	e7e3      	b.n	10013824 <__aeabi_fadd+0x198>
1001385c:	24ff      	movs	r4, #255	; 0xff
1001385e:	2300      	movs	r3, #0
10013860:	e73c      	b.n	100136dc <__aeabi_fadd+0x50>
10013862:	2c00      	cmp	r4, #0
10013864:	d161      	bne.n	1001392a <__aeabi_fadd+0x29e>
10013866:	2b00      	cmp	r3, #0
10013868:	d07e      	beq.n	10013968 <__aeabi_fadd+0x2dc>
1001386a:	2a00      	cmp	r2, #0
1001386c:	d100      	bne.n	10013870 <__aeabi_fadd+0x1e4>
1001386e:	e724      	b.n	100136ba <__aeabi_fadd+0x2e>
10013870:	189b      	adds	r3, r3, r2
10013872:	015a      	lsls	r2, r3, #5
10013874:	d400      	bmi.n	10013878 <__aeabi_fadd+0x1ec>
10013876:	e760      	b.n	1001373a <__aeabi_fadd+0xae>
10013878:	4a3e      	ldr	r2, [pc, #248]	; (10013974 <__aeabi_fadd+0x2e8>)
1001387a:	000c      	movs	r4, r1
1001387c:	4013      	ands	r3, r2
1001387e:	e71c      	b.n	100136ba <__aeabi_fadd+0x2e>
10013880:	2c00      	cmp	r4, #0
10013882:	d11e      	bne.n	100138c2 <__aeabi_fadd+0x236>
10013884:	2b00      	cmp	r3, #0
10013886:	d12f      	bne.n	100138e8 <__aeabi_fadd+0x25c>
10013888:	2a00      	cmp	r2, #0
1001388a:	d066      	beq.n	1001395a <__aeabi_fadd+0x2ce>
1001388c:	0013      	movs	r3, r2
1001388e:	000d      	movs	r5, r1
10013890:	e713      	b.n	100136ba <__aeabi_fadd+0x2e>
10013892:	2201      	movs	r2, #1
10013894:	e777      	b.n	10013786 <__aeabi_fadd+0xfa>
10013896:	2c00      	cmp	r4, #0
10013898:	d11f      	bne.n	100138da <__aeabi_fadd+0x24e>
1001389a:	2b00      	cmp	r3, #0
1001389c:	d05a      	beq.n	10013954 <__aeabi_fadd+0x2c8>
1001389e:	43c9      	mvns	r1, r1
100138a0:	2900      	cmp	r1, #0
100138a2:	d00b      	beq.n	100138bc <__aeabi_fadd+0x230>
100138a4:	2eff      	cmp	r6, #255	; 0xff
100138a6:	d050      	beq.n	1001394a <__aeabi_fadd+0x2be>
100138a8:	291b      	cmp	r1, #27
100138aa:	dc5f      	bgt.n	1001396c <__aeabi_fadd+0x2e0>
100138ac:	001f      	movs	r7, r3
100138ae:	2420      	movs	r4, #32
100138b0:	40cf      	lsrs	r7, r1
100138b2:	1a61      	subs	r1, r4, r1
100138b4:	408b      	lsls	r3, r1
100138b6:	1e59      	subs	r1, r3, #1
100138b8:	418b      	sbcs	r3, r1
100138ba:	433b      	orrs	r3, r7
100138bc:	189b      	adds	r3, r3, r2
100138be:	0034      	movs	r4, r6
100138c0:	e762      	b.n	10013788 <__aeabi_fadd+0xfc>
100138c2:	2b00      	cmp	r3, #0
100138c4:	d11c      	bne.n	10013900 <__aeabi_fadd+0x274>
100138c6:	2a00      	cmp	r2, #0
100138c8:	d04a      	beq.n	10013960 <__aeabi_fadd+0x2d4>
100138ca:	0013      	movs	r3, r2
100138cc:	000d      	movs	r5, r1
100138ce:	24ff      	movs	r4, #255	; 0xff
100138d0:	e6f3      	b.n	100136ba <__aeabi_fadd+0x2e>
100138d2:	0013      	movs	r3, r2
100138d4:	0034      	movs	r4, r6
100138d6:	000d      	movs	r5, r1
100138d8:	e6ef      	b.n	100136ba <__aeabi_fadd+0x2e>
100138da:	2eff      	cmp	r6, #255	; 0xff
100138dc:	d035      	beq.n	1001394a <__aeabi_fadd+0x2be>
100138de:	2480      	movs	r4, #128	; 0x80
100138e0:	04e4      	lsls	r4, r4, #19
100138e2:	4249      	negs	r1, r1
100138e4:	4323      	orrs	r3, r4
100138e6:	e7df      	b.n	100138a8 <__aeabi_fadd+0x21c>
100138e8:	2a00      	cmp	r2, #0
100138ea:	d100      	bne.n	100138ee <__aeabi_fadd+0x262>
100138ec:	e6e5      	b.n	100136ba <__aeabi_fadd+0x2e>
100138ee:	2780      	movs	r7, #128	; 0x80
100138f0:	1a98      	subs	r0, r3, r2
100138f2:	04ff      	lsls	r7, r7, #19
100138f4:	4007      	ands	r7, r0
100138f6:	d100      	bne.n	100138fa <__aeabi_fadd+0x26e>
100138f8:	e752      	b.n	100137a0 <__aeabi_fadd+0x114>
100138fa:	1ad3      	subs	r3, r2, r3
100138fc:	000d      	movs	r5, r1
100138fe:	e6dc      	b.n	100136ba <__aeabi_fadd+0x2e>
10013900:	24ff      	movs	r4, #255	; 0xff
10013902:	2a00      	cmp	r2, #0
10013904:	d100      	bne.n	10013908 <__aeabi_fadd+0x27c>
10013906:	e6d8      	b.n	100136ba <__aeabi_fadd+0x2e>
10013908:	2080      	movs	r0, #128	; 0x80
1001390a:	08db      	lsrs	r3, r3, #3
1001390c:	03c0      	lsls	r0, r0, #15
1001390e:	4203      	tst	r3, r0
10013910:	d004      	beq.n	1001391c <__aeabi_fadd+0x290>
10013912:	08d2      	lsrs	r2, r2, #3
10013914:	4202      	tst	r2, r0
10013916:	d101      	bne.n	1001391c <__aeabi_fadd+0x290>
10013918:	0013      	movs	r3, r2
1001391a:	000d      	movs	r5, r1
1001391c:	00db      	lsls	r3, r3, #3
1001391e:	24ff      	movs	r4, #255	; 0xff
10013920:	e6cb      	b.n	100136ba <__aeabi_fadd+0x2e>
10013922:	0013      	movs	r3, r2
10013924:	24ff      	movs	r4, #255	; 0xff
10013926:	000d      	movs	r5, r1
10013928:	e6c7      	b.n	100136ba <__aeabi_fadd+0x2e>
1001392a:	2b00      	cmp	r3, #0
1001392c:	d00d      	beq.n	1001394a <__aeabi_fadd+0x2be>
1001392e:	24ff      	movs	r4, #255	; 0xff
10013930:	2a00      	cmp	r2, #0
10013932:	d100      	bne.n	10013936 <__aeabi_fadd+0x2aa>
10013934:	e6c1      	b.n	100136ba <__aeabi_fadd+0x2e>
10013936:	2180      	movs	r1, #128	; 0x80
10013938:	08db      	lsrs	r3, r3, #3
1001393a:	03c9      	lsls	r1, r1, #15
1001393c:	420b      	tst	r3, r1
1001393e:	d0ed      	beq.n	1001391c <__aeabi_fadd+0x290>
10013940:	08d2      	lsrs	r2, r2, #3
10013942:	420a      	tst	r2, r1
10013944:	d1ea      	bne.n	1001391c <__aeabi_fadd+0x290>
10013946:	0013      	movs	r3, r2
10013948:	e7e8      	b.n	1001391c <__aeabi_fadd+0x290>
1001394a:	0013      	movs	r3, r2
1001394c:	24ff      	movs	r4, #255	; 0xff
1001394e:	e6b4      	b.n	100136ba <__aeabi_fadd+0x2e>
10013950:	2301      	movs	r3, #1
10013952:	e772      	b.n	1001383a <__aeabi_fadd+0x1ae>
10013954:	0013      	movs	r3, r2
10013956:	0034      	movs	r4, r6
10013958:	e6af      	b.n	100136ba <__aeabi_fadd+0x2e>
1001395a:	2700      	movs	r7, #0
1001395c:	2000      	movs	r0, #0
1001395e:	e722      	b.n	100137a6 <__aeabi_fadd+0x11a>
10013960:	2780      	movs	r7, #128	; 0x80
10013962:	2000      	movs	r0, #0
10013964:	03ff      	lsls	r7, r7, #15
10013966:	e6f1      	b.n	1001374c <__aeabi_fadd+0xc0>
10013968:	0013      	movs	r3, r2
1001396a:	e6a6      	b.n	100136ba <__aeabi_fadd+0x2e>
1001396c:	2301      	movs	r3, #1
1001396e:	e7a5      	b.n	100138bc <__aeabi_fadd+0x230>
10013970:	7dffffff 	.word	0x7dffffff
10013974:	fbffffff 	.word	0xfbffffff

10013978 <__aeabi_fdiv>:
10013978:	b5f0      	push	{r4, r5, r6, r7, lr}
1001397a:	4656      	mov	r6, sl
1001397c:	4644      	mov	r4, r8
1001397e:	465f      	mov	r7, fp
10013980:	464d      	mov	r5, r9
10013982:	b4f0      	push	{r4, r5, r6, r7}
10013984:	0244      	lsls	r4, r0, #9
10013986:	0046      	lsls	r6, r0, #1
10013988:	0fc7      	lsrs	r7, r0, #31
1001398a:	b083      	sub	sp, #12
1001398c:	4688      	mov	r8, r1
1001398e:	0a65      	lsrs	r5, r4, #9
10013990:	0e36      	lsrs	r6, r6, #24
10013992:	46ba      	mov	sl, r7
10013994:	d03d      	beq.n	10013a12 <__aeabi_fdiv+0x9a>
10013996:	2eff      	cmp	r6, #255	; 0xff
10013998:	d022      	beq.n	100139e0 <__aeabi_fdiv+0x68>
1001399a:	2300      	movs	r3, #0
1001399c:	00ec      	lsls	r4, r5, #3
1001399e:	2580      	movs	r5, #128	; 0x80
100139a0:	4699      	mov	r9, r3
100139a2:	469b      	mov	fp, r3
100139a4:	04ed      	lsls	r5, r5, #19
100139a6:	4325      	orrs	r5, r4
100139a8:	3e7f      	subs	r6, #127	; 0x7f
100139aa:	4643      	mov	r3, r8
100139ac:	025c      	lsls	r4, r3, #9
100139ae:	0058      	lsls	r0, r3, #1
100139b0:	0fdb      	lsrs	r3, r3, #31
100139b2:	0a64      	lsrs	r4, r4, #9
100139b4:	0e00      	lsrs	r0, r0, #24
100139b6:	4698      	mov	r8, r3
100139b8:	d036      	beq.n	10013a28 <__aeabi_fdiv+0xb0>
100139ba:	28ff      	cmp	r0, #255	; 0xff
100139bc:	d030      	beq.n	10013a20 <__aeabi_fdiv+0xa8>
100139be:	2380      	movs	r3, #128	; 0x80
100139c0:	2100      	movs	r1, #0
100139c2:	00e4      	lsls	r4, r4, #3
100139c4:	04db      	lsls	r3, r3, #19
100139c6:	431c      	orrs	r4, r3
100139c8:	387f      	subs	r0, #127	; 0x7f
100139ca:	1a30      	subs	r0, r6, r0
100139cc:	9001      	str	r0, [sp, #4]
100139ce:	4648      	mov	r0, r9
100139d0:	4642      	mov	r2, r8
100139d2:	4308      	orrs	r0, r1
100139d4:	4e72      	ldr	r6, [pc, #456]	; (10013ba0 <__aeabi_fdiv+0x228>)
100139d6:	0080      	lsls	r0, r0, #2
100139d8:	5830      	ldr	r0, [r6, r0]
100139da:	407a      	eors	r2, r7
100139dc:	0013      	movs	r3, r2
100139de:	4687      	mov	pc, r0
100139e0:	2d00      	cmp	r5, #0
100139e2:	d144      	bne.n	10013a6e <__aeabi_fdiv+0xf6>
100139e4:	2308      	movs	r3, #8
100139e6:	4699      	mov	r9, r3
100139e8:	3b06      	subs	r3, #6
100139ea:	469b      	mov	fp, r3
100139ec:	e7dd      	b.n	100139aa <__aeabi_fdiv+0x32>
100139ee:	2201      	movs	r2, #1
100139f0:	20ff      	movs	r0, #255	; 0xff
100139f2:	2400      	movs	r4, #0
100139f4:	401a      	ands	r2, r3
100139f6:	0264      	lsls	r4, r4, #9
100139f8:	05c3      	lsls	r3, r0, #23
100139fa:	0a64      	lsrs	r4, r4, #9
100139fc:	07d2      	lsls	r2, r2, #31
100139fe:	431c      	orrs	r4, r3
10013a00:	4314      	orrs	r4, r2
10013a02:	0020      	movs	r0, r4
10013a04:	b003      	add	sp, #12
10013a06:	bc3c      	pop	{r2, r3, r4, r5}
10013a08:	4690      	mov	r8, r2
10013a0a:	4699      	mov	r9, r3
10013a0c:	46a2      	mov	sl, r4
10013a0e:	46ab      	mov	fp, r5
10013a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013a12:	2d00      	cmp	r5, #0
10013a14:	d120      	bne.n	10013a58 <__aeabi_fdiv+0xe0>
10013a16:	2304      	movs	r3, #4
10013a18:	4699      	mov	r9, r3
10013a1a:	3b03      	subs	r3, #3
10013a1c:	469b      	mov	fp, r3
10013a1e:	e7c4      	b.n	100139aa <__aeabi_fdiv+0x32>
10013a20:	2c00      	cmp	r4, #0
10013a22:	d117      	bne.n	10013a54 <__aeabi_fdiv+0xdc>
10013a24:	2102      	movs	r1, #2
10013a26:	e002      	b.n	10013a2e <__aeabi_fdiv+0xb6>
10013a28:	2c00      	cmp	r4, #0
10013a2a:	d10a      	bne.n	10013a42 <__aeabi_fdiv+0xca>
10013a2c:	2101      	movs	r1, #1
10013a2e:	1a32      	subs	r2, r6, r0
10013a30:	9201      	str	r2, [sp, #4]
10013a32:	464a      	mov	r2, r9
10013a34:	4643      	mov	r3, r8
10013a36:	430a      	orrs	r2, r1
10013a38:	485a      	ldr	r0, [pc, #360]	; (10013ba4 <__aeabi_fdiv+0x22c>)
10013a3a:	0092      	lsls	r2, r2, #2
10013a3c:	5882      	ldr	r2, [r0, r2]
10013a3e:	407b      	eors	r3, r7
10013a40:	4697      	mov	pc, r2
10013a42:	0020      	movs	r0, r4
10013a44:	f002 fb8a 	bl	1001615c <__clzsi2>
10013a48:	1f43      	subs	r3, r0, #5
10013a4a:	3076      	adds	r0, #118	; 0x76
10013a4c:	409c      	lsls	r4, r3
10013a4e:	4240      	negs	r0, r0
10013a50:	2100      	movs	r1, #0
10013a52:	e7ba      	b.n	100139ca <__aeabi_fdiv+0x52>
10013a54:	2103      	movs	r1, #3
10013a56:	e7b8      	b.n	100139ca <__aeabi_fdiv+0x52>
10013a58:	0028      	movs	r0, r5
10013a5a:	f002 fb7f 	bl	1001615c <__clzsi2>
10013a5e:	1f43      	subs	r3, r0, #5
10013a60:	409d      	lsls	r5, r3
10013a62:	2300      	movs	r3, #0
10013a64:	3076      	adds	r0, #118	; 0x76
10013a66:	4246      	negs	r6, r0
10013a68:	4699      	mov	r9, r3
10013a6a:	469b      	mov	fp, r3
10013a6c:	e79d      	b.n	100139aa <__aeabi_fdiv+0x32>
10013a6e:	230c      	movs	r3, #12
10013a70:	4699      	mov	r9, r3
10013a72:	3b09      	subs	r3, #9
10013a74:	469b      	mov	fp, r3
10013a76:	e798      	b.n	100139aa <__aeabi_fdiv+0x32>
10013a78:	2480      	movs	r4, #128	; 0x80
10013a7a:	2200      	movs	r2, #0
10013a7c:	03e4      	lsls	r4, r4, #15
10013a7e:	20ff      	movs	r0, #255	; 0xff
10013a80:	e7b9      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013a82:	2400      	movs	r4, #0
10013a84:	46c2      	mov	sl, r8
10013a86:	468b      	mov	fp, r1
10013a88:	465a      	mov	r2, fp
10013a8a:	4653      	mov	r3, sl
10013a8c:	2a02      	cmp	r2, #2
10013a8e:	d0ae      	beq.n	100139ee <__aeabi_fdiv+0x76>
10013a90:	2a03      	cmp	r2, #3
10013a92:	d07d      	beq.n	10013b90 <__aeabi_fdiv+0x218>
10013a94:	2a01      	cmp	r2, #1
10013a96:	d131      	bne.n	10013afc <__aeabi_fdiv+0x184>
10013a98:	2201      	movs	r2, #1
10013a9a:	2000      	movs	r0, #0
10013a9c:	401a      	ands	r2, r3
10013a9e:	2400      	movs	r4, #0
10013aa0:	e7a9      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013aa2:	2201      	movs	r2, #1
10013aa4:	1a10      	subs	r0, r2, r0
10013aa6:	281b      	cmp	r0, #27
10013aa8:	dd56      	ble.n	10013b58 <__aeabi_fdiv+0x1e0>
10013aaa:	401a      	ands	r2, r3
10013aac:	2000      	movs	r0, #0
10013aae:	2400      	movs	r4, #0
10013ab0:	e7a1      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013ab2:	2380      	movs	r3, #128	; 0x80
10013ab4:	03db      	lsls	r3, r3, #15
10013ab6:	421d      	tst	r5, r3
10013ab8:	d14b      	bne.n	10013b52 <__aeabi_fdiv+0x1da>
10013aba:	2380      	movs	r3, #128	; 0x80
10013abc:	03db      	lsls	r3, r3, #15
10013abe:	432b      	orrs	r3, r5
10013ac0:	025c      	lsls	r4, r3, #9
10013ac2:	0a64      	lsrs	r4, r4, #9
10013ac4:	003a      	movs	r2, r7
10013ac6:	20ff      	movs	r0, #255	; 0xff
10013ac8:	e795      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013aca:	016d      	lsls	r5, r5, #5
10013acc:	0160      	lsls	r0, r4, #5
10013ace:	4285      	cmp	r5, r0
10013ad0:	d230      	bcs.n	10013b34 <__aeabi_fdiv+0x1bc>
10013ad2:	9a01      	ldr	r2, [sp, #4]
10013ad4:	2400      	movs	r4, #0
10013ad6:	3a01      	subs	r2, #1
10013ad8:	9201      	str	r2, [sp, #4]
10013ada:	221b      	movs	r2, #27
10013adc:	2701      	movs	r7, #1
10013ade:	0029      	movs	r1, r5
10013ae0:	0064      	lsls	r4, r4, #1
10013ae2:	006d      	lsls	r5, r5, #1
10013ae4:	2900      	cmp	r1, #0
10013ae6:	db01      	blt.n	10013aec <__aeabi_fdiv+0x174>
10013ae8:	42a8      	cmp	r0, r5
10013aea:	d801      	bhi.n	10013af0 <__aeabi_fdiv+0x178>
10013aec:	1a2d      	subs	r5, r5, r0
10013aee:	433c      	orrs	r4, r7
10013af0:	3a01      	subs	r2, #1
10013af2:	2a00      	cmp	r2, #0
10013af4:	d1f3      	bne.n	10013ade <__aeabi_fdiv+0x166>
10013af6:	1e6a      	subs	r2, r5, #1
10013af8:	4195      	sbcs	r5, r2
10013afa:	432c      	orrs	r4, r5
10013afc:	9801      	ldr	r0, [sp, #4]
10013afe:	307f      	adds	r0, #127	; 0x7f
10013b00:	2800      	cmp	r0, #0
10013b02:	ddce      	ble.n	10013aa2 <__aeabi_fdiv+0x12a>
10013b04:	0762      	lsls	r2, r4, #29
10013b06:	d004      	beq.n	10013b12 <__aeabi_fdiv+0x19a>
10013b08:	220f      	movs	r2, #15
10013b0a:	4022      	ands	r2, r4
10013b0c:	2a04      	cmp	r2, #4
10013b0e:	d000      	beq.n	10013b12 <__aeabi_fdiv+0x19a>
10013b10:	3404      	adds	r4, #4
10013b12:	0122      	lsls	r2, r4, #4
10013b14:	d503      	bpl.n	10013b1e <__aeabi_fdiv+0x1a6>
10013b16:	4a24      	ldr	r2, [pc, #144]	; (10013ba8 <__aeabi_fdiv+0x230>)
10013b18:	9801      	ldr	r0, [sp, #4]
10013b1a:	4014      	ands	r4, r2
10013b1c:	3080      	adds	r0, #128	; 0x80
10013b1e:	28fe      	cmp	r0, #254	; 0xfe
10013b20:	dd00      	ble.n	10013b24 <__aeabi_fdiv+0x1ac>
10013b22:	e764      	b.n	100139ee <__aeabi_fdiv+0x76>
10013b24:	2201      	movs	r2, #1
10013b26:	01a4      	lsls	r4, r4, #6
10013b28:	0a64      	lsrs	r4, r4, #9
10013b2a:	b2c0      	uxtb	r0, r0
10013b2c:	401a      	ands	r2, r3
10013b2e:	e762      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013b30:	002c      	movs	r4, r5
10013b32:	e7a9      	b.n	10013a88 <__aeabi_fdiv+0x110>
10013b34:	1a2d      	subs	r5, r5, r0
10013b36:	221a      	movs	r2, #26
10013b38:	2401      	movs	r4, #1
10013b3a:	e7cf      	b.n	10013adc <__aeabi_fdiv+0x164>
10013b3c:	026b      	lsls	r3, r5, #9
10013b3e:	d5bc      	bpl.n	10013aba <__aeabi_fdiv+0x142>
10013b40:	2400      	movs	r4, #0
10013b42:	2380      	movs	r3, #128	; 0x80
10013b44:	03db      	lsls	r3, r3, #15
10013b46:	431c      	orrs	r4, r3
10013b48:	0264      	lsls	r4, r4, #9
10013b4a:	0a64      	lsrs	r4, r4, #9
10013b4c:	4642      	mov	r2, r8
10013b4e:	20ff      	movs	r0, #255	; 0xff
10013b50:	e751      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013b52:	421c      	tst	r4, r3
10013b54:	d1b3      	bne.n	10013abe <__aeabi_fdiv+0x146>
10013b56:	e7f4      	b.n	10013b42 <__aeabi_fdiv+0x1ca>
10013b58:	0021      	movs	r1, r4
10013b5a:	2220      	movs	r2, #32
10013b5c:	40c1      	lsrs	r1, r0
10013b5e:	1a10      	subs	r0, r2, r0
10013b60:	4084      	lsls	r4, r0
10013b62:	1e62      	subs	r2, r4, #1
10013b64:	4194      	sbcs	r4, r2
10013b66:	430c      	orrs	r4, r1
10013b68:	0762      	lsls	r2, r4, #29
10013b6a:	d004      	beq.n	10013b76 <__aeabi_fdiv+0x1fe>
10013b6c:	220f      	movs	r2, #15
10013b6e:	4022      	ands	r2, r4
10013b70:	2a04      	cmp	r2, #4
10013b72:	d000      	beq.n	10013b76 <__aeabi_fdiv+0x1fe>
10013b74:	3404      	adds	r4, #4
10013b76:	0162      	lsls	r2, r4, #5
10013b78:	d504      	bpl.n	10013b84 <__aeabi_fdiv+0x20c>
10013b7a:	2201      	movs	r2, #1
10013b7c:	2001      	movs	r0, #1
10013b7e:	401a      	ands	r2, r3
10013b80:	2400      	movs	r4, #0
10013b82:	e738      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013b84:	2201      	movs	r2, #1
10013b86:	01a4      	lsls	r4, r4, #6
10013b88:	0a64      	lsrs	r4, r4, #9
10013b8a:	401a      	ands	r2, r3
10013b8c:	2000      	movs	r0, #0
10013b8e:	e732      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013b90:	2380      	movs	r3, #128	; 0x80
10013b92:	03db      	lsls	r3, r3, #15
10013b94:	431c      	orrs	r4, r3
10013b96:	0264      	lsls	r4, r4, #9
10013b98:	0a64      	lsrs	r4, r4, #9
10013b9a:	4652      	mov	r2, sl
10013b9c:	20ff      	movs	r0, #255	; 0xff
10013b9e:	e72a      	b.n	100139f6 <__aeabi_fdiv+0x7e>
10013ba0:	10018460 	.word	0x10018460
10013ba4:	100184a0 	.word	0x100184a0
10013ba8:	f7ffffff 	.word	0xf7ffffff

10013bac <__eqsf2>:
10013bac:	0243      	lsls	r3, r0, #9
10013bae:	b570      	push	{r4, r5, r6, lr}
10013bb0:	0042      	lsls	r2, r0, #1
10013bb2:	004c      	lsls	r4, r1, #1
10013bb4:	0a5d      	lsrs	r5, r3, #9
10013bb6:	0fc3      	lsrs	r3, r0, #31
10013bb8:	0248      	lsls	r0, r1, #9
10013bba:	0e12      	lsrs	r2, r2, #24
10013bbc:	0a46      	lsrs	r6, r0, #9
10013bbe:	0e24      	lsrs	r4, r4, #24
10013bc0:	0fc9      	lsrs	r1, r1, #31
10013bc2:	2aff      	cmp	r2, #255	; 0xff
10013bc4:	d00f      	beq.n	10013be6 <__eqsf2+0x3a>
10013bc6:	2cff      	cmp	r4, #255	; 0xff
10013bc8:	d011      	beq.n	10013bee <__eqsf2+0x42>
10013bca:	2001      	movs	r0, #1
10013bcc:	42a2      	cmp	r2, r4
10013bce:	d000      	beq.n	10013bd2 <__eqsf2+0x26>
10013bd0:	bd70      	pop	{r4, r5, r6, pc}
10013bd2:	42b5      	cmp	r5, r6
10013bd4:	d1fc      	bne.n	10013bd0 <__eqsf2+0x24>
10013bd6:	428b      	cmp	r3, r1
10013bd8:	d00d      	beq.n	10013bf6 <__eqsf2+0x4a>
10013bda:	2a00      	cmp	r2, #0
10013bdc:	d1f8      	bne.n	10013bd0 <__eqsf2+0x24>
10013bde:	0028      	movs	r0, r5
10013be0:	1e43      	subs	r3, r0, #1
10013be2:	4198      	sbcs	r0, r3
10013be4:	e7f4      	b.n	10013bd0 <__eqsf2+0x24>
10013be6:	2001      	movs	r0, #1
10013be8:	2d00      	cmp	r5, #0
10013bea:	d1f1      	bne.n	10013bd0 <__eqsf2+0x24>
10013bec:	e7eb      	b.n	10013bc6 <__eqsf2+0x1a>
10013bee:	2001      	movs	r0, #1
10013bf0:	2e00      	cmp	r6, #0
10013bf2:	d1ed      	bne.n	10013bd0 <__eqsf2+0x24>
10013bf4:	e7e9      	b.n	10013bca <__eqsf2+0x1e>
10013bf6:	2000      	movs	r0, #0
10013bf8:	e7ea      	b.n	10013bd0 <__eqsf2+0x24>
10013bfa:	46c0      	nop			; (mov r8, r8)

10013bfc <__gesf2>:
10013bfc:	0243      	lsls	r3, r0, #9
10013bfe:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c00:	0042      	lsls	r2, r0, #1
10013c02:	0a5d      	lsrs	r5, r3, #9
10013c04:	0fc3      	lsrs	r3, r0, #31
10013c06:	0248      	lsls	r0, r1, #9
10013c08:	0a44      	lsrs	r4, r0, #9
10013c0a:	0048      	lsls	r0, r1, #1
10013c0c:	0e12      	lsrs	r2, r2, #24
10013c0e:	0e00      	lsrs	r0, r0, #24
10013c10:	0fc9      	lsrs	r1, r1, #31
10013c12:	2aff      	cmp	r2, #255	; 0xff
10013c14:	d01f      	beq.n	10013c56 <__gesf2+0x5a>
10013c16:	28ff      	cmp	r0, #255	; 0xff
10013c18:	d022      	beq.n	10013c60 <__gesf2+0x64>
10013c1a:	2a00      	cmp	r2, #0
10013c1c:	d109      	bne.n	10013c32 <__gesf2+0x36>
10013c1e:	426e      	negs	r6, r5
10013c20:	416e      	adcs	r6, r5
10013c22:	2800      	cmp	r0, #0
10013c24:	d10f      	bne.n	10013c46 <__gesf2+0x4a>
10013c26:	2c00      	cmp	r4, #0
10013c28:	d10d      	bne.n	10013c46 <__gesf2+0x4a>
10013c2a:	2000      	movs	r0, #0
10013c2c:	2d00      	cmp	r5, #0
10013c2e:	d009      	beq.n	10013c44 <__gesf2+0x48>
10013c30:	e005      	b.n	10013c3e <__gesf2+0x42>
10013c32:	2800      	cmp	r0, #0
10013c34:	d101      	bne.n	10013c3a <__gesf2+0x3e>
10013c36:	2c00      	cmp	r4, #0
10013c38:	d001      	beq.n	10013c3e <__gesf2+0x42>
10013c3a:	428b      	cmp	r3, r1
10013c3c:	d013      	beq.n	10013c66 <__gesf2+0x6a>
10013c3e:	4258      	negs	r0, r3
10013c40:	2301      	movs	r3, #1
10013c42:	4318      	orrs	r0, r3
10013c44:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013c46:	2e00      	cmp	r6, #0
10013c48:	d0f7      	beq.n	10013c3a <__gesf2+0x3e>
10013c4a:	4248      	negs	r0, r1
10013c4c:	4141      	adcs	r1, r0
10013c4e:	2001      	movs	r0, #1
10013c50:	4249      	negs	r1, r1
10013c52:	4308      	orrs	r0, r1
10013c54:	e7f6      	b.n	10013c44 <__gesf2+0x48>
10013c56:	2d00      	cmp	r5, #0
10013c58:	d0dd      	beq.n	10013c16 <__gesf2+0x1a>
10013c5a:	2002      	movs	r0, #2
10013c5c:	4240      	negs	r0, r0
10013c5e:	e7f1      	b.n	10013c44 <__gesf2+0x48>
10013c60:	2c00      	cmp	r4, #0
10013c62:	d0da      	beq.n	10013c1a <__gesf2+0x1e>
10013c64:	e7f9      	b.n	10013c5a <__gesf2+0x5e>
10013c66:	4282      	cmp	r2, r0
10013c68:	dce9      	bgt.n	10013c3e <__gesf2+0x42>
10013c6a:	db04      	blt.n	10013c76 <__gesf2+0x7a>
10013c6c:	42a5      	cmp	r5, r4
10013c6e:	d8e6      	bhi.n	10013c3e <__gesf2+0x42>
10013c70:	2000      	movs	r0, #0
10013c72:	42a5      	cmp	r5, r4
10013c74:	d2e6      	bcs.n	10013c44 <__gesf2+0x48>
10013c76:	4258      	negs	r0, r3
10013c78:	4143      	adcs	r3, r0
10013c7a:	2001      	movs	r0, #1
10013c7c:	425b      	negs	r3, r3
10013c7e:	4318      	orrs	r0, r3
10013c80:	e7e0      	b.n	10013c44 <__gesf2+0x48>
10013c82:	46c0      	nop			; (mov r8, r8)

10013c84 <__lesf2>:
10013c84:	0243      	lsls	r3, r0, #9
10013c86:	b5f0      	push	{r4, r5, r6, r7, lr}
10013c88:	0042      	lsls	r2, r0, #1
10013c8a:	004c      	lsls	r4, r1, #1
10013c8c:	0a5e      	lsrs	r6, r3, #9
10013c8e:	0fc3      	lsrs	r3, r0, #31
10013c90:	0248      	lsls	r0, r1, #9
10013c92:	0e12      	lsrs	r2, r2, #24
10013c94:	0a45      	lsrs	r5, r0, #9
10013c96:	0e24      	lsrs	r4, r4, #24
10013c98:	0fc9      	lsrs	r1, r1, #31
10013c9a:	2aff      	cmp	r2, #255	; 0xff
10013c9c:	d017      	beq.n	10013cce <__lesf2+0x4a>
10013c9e:	2cff      	cmp	r4, #255	; 0xff
10013ca0:	d019      	beq.n	10013cd6 <__lesf2+0x52>
10013ca2:	2a00      	cmp	r2, #0
10013ca4:	d10b      	bne.n	10013cbe <__lesf2+0x3a>
10013ca6:	4270      	negs	r0, r6
10013ca8:	4170      	adcs	r0, r6
10013caa:	2c00      	cmp	r4, #0
10013cac:	d017      	beq.n	10013cde <__lesf2+0x5a>
10013cae:	2800      	cmp	r0, #0
10013cb0:	d007      	beq.n	10013cc2 <__lesf2+0x3e>
10013cb2:	4248      	negs	r0, r1
10013cb4:	4141      	adcs	r1, r0
10013cb6:	2001      	movs	r0, #1
10013cb8:	4249      	negs	r1, r1
10013cba:	4308      	orrs	r0, r1
10013cbc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013cbe:	2c00      	cmp	r4, #0
10013cc0:	d013      	beq.n	10013cea <__lesf2+0x66>
10013cc2:	428b      	cmp	r3, r1
10013cc4:	d014      	beq.n	10013cf0 <__lesf2+0x6c>
10013cc6:	4258      	negs	r0, r3
10013cc8:	2301      	movs	r3, #1
10013cca:	4318      	orrs	r0, r3
10013ccc:	e7f6      	b.n	10013cbc <__lesf2+0x38>
10013cce:	2002      	movs	r0, #2
10013cd0:	2e00      	cmp	r6, #0
10013cd2:	d1f3      	bne.n	10013cbc <__lesf2+0x38>
10013cd4:	e7e3      	b.n	10013c9e <__lesf2+0x1a>
10013cd6:	2002      	movs	r0, #2
10013cd8:	2d00      	cmp	r5, #0
10013cda:	d1ef      	bne.n	10013cbc <__lesf2+0x38>
10013cdc:	e7e1      	b.n	10013ca2 <__lesf2+0x1e>
10013cde:	2d00      	cmp	r5, #0
10013ce0:	d1e5      	bne.n	10013cae <__lesf2+0x2a>
10013ce2:	2000      	movs	r0, #0
10013ce4:	2e00      	cmp	r6, #0
10013ce6:	d0e9      	beq.n	10013cbc <__lesf2+0x38>
10013ce8:	e7ed      	b.n	10013cc6 <__lesf2+0x42>
10013cea:	2d00      	cmp	r5, #0
10013cec:	d1e9      	bne.n	10013cc2 <__lesf2+0x3e>
10013cee:	e7ea      	b.n	10013cc6 <__lesf2+0x42>
10013cf0:	42a2      	cmp	r2, r4
10013cf2:	dce8      	bgt.n	10013cc6 <__lesf2+0x42>
10013cf4:	db04      	blt.n	10013d00 <__lesf2+0x7c>
10013cf6:	42ae      	cmp	r6, r5
10013cf8:	d8e5      	bhi.n	10013cc6 <__lesf2+0x42>
10013cfa:	2000      	movs	r0, #0
10013cfc:	42ae      	cmp	r6, r5
10013cfe:	d2dd      	bcs.n	10013cbc <__lesf2+0x38>
10013d00:	4258      	negs	r0, r3
10013d02:	4143      	adcs	r3, r0
10013d04:	2001      	movs	r0, #1
10013d06:	425b      	negs	r3, r3
10013d08:	4318      	orrs	r0, r3
10013d0a:	e7d7      	b.n	10013cbc <__lesf2+0x38>

10013d0c <__aeabi_fmul>:
10013d0c:	b5f0      	push	{r4, r5, r6, r7, lr}
10013d0e:	4657      	mov	r7, sl
10013d10:	464e      	mov	r6, r9
10013d12:	4645      	mov	r5, r8
10013d14:	0043      	lsls	r3, r0, #1
10013d16:	b4e0      	push	{r5, r6, r7}
10013d18:	0246      	lsls	r6, r0, #9
10013d1a:	4688      	mov	r8, r1
10013d1c:	0a76      	lsrs	r6, r6, #9
10013d1e:	0e1f      	lsrs	r7, r3, #24
10013d20:	0fc4      	lsrs	r4, r0, #31
10013d22:	2f00      	cmp	r7, #0
10013d24:	d047      	beq.n	10013db6 <__aeabi_fmul+0xaa>
10013d26:	2fff      	cmp	r7, #255	; 0xff
10013d28:	d025      	beq.n	10013d76 <__aeabi_fmul+0x6a>
10013d2a:	2300      	movs	r3, #0
10013d2c:	2580      	movs	r5, #128	; 0x80
10013d2e:	469a      	mov	sl, r3
10013d30:	4699      	mov	r9, r3
10013d32:	00f6      	lsls	r6, r6, #3
10013d34:	04ed      	lsls	r5, r5, #19
10013d36:	432e      	orrs	r6, r5
10013d38:	3f7f      	subs	r7, #127	; 0x7f
10013d3a:	4643      	mov	r3, r8
10013d3c:	4642      	mov	r2, r8
10013d3e:	025d      	lsls	r5, r3, #9
10013d40:	0fd2      	lsrs	r2, r2, #31
10013d42:	005b      	lsls	r3, r3, #1
10013d44:	0a6d      	lsrs	r5, r5, #9
10013d46:	0e1b      	lsrs	r3, r3, #24
10013d48:	4690      	mov	r8, r2
10013d4a:	d040      	beq.n	10013dce <__aeabi_fmul+0xc2>
10013d4c:	2bff      	cmp	r3, #255	; 0xff
10013d4e:	d039      	beq.n	10013dc4 <__aeabi_fmul+0xb8>
10013d50:	2280      	movs	r2, #128	; 0x80
10013d52:	2000      	movs	r0, #0
10013d54:	00ed      	lsls	r5, r5, #3
10013d56:	04d2      	lsls	r2, r2, #19
10013d58:	4315      	orrs	r5, r2
10013d5a:	3b7f      	subs	r3, #127	; 0x7f
10013d5c:	18fb      	adds	r3, r7, r3
10013d5e:	4642      	mov	r2, r8
10013d60:	4657      	mov	r7, sl
10013d62:	1c59      	adds	r1, r3, #1
10013d64:	4062      	eors	r2, r4
10013d66:	468c      	mov	ip, r1
10013d68:	4307      	orrs	r7, r0
10013d6a:	2f0f      	cmp	r7, #15
10013d6c:	d85c      	bhi.n	10013e28 <__aeabi_fmul+0x11c>
10013d6e:	496f      	ldr	r1, [pc, #444]	; (10013f2c <__aeabi_fmul+0x220>)
10013d70:	00bf      	lsls	r7, r7, #2
10013d72:	59c9      	ldr	r1, [r1, r7]
10013d74:	468f      	mov	pc, r1
10013d76:	2e00      	cmp	r6, #0
10013d78:	d145      	bne.n	10013e06 <__aeabi_fmul+0xfa>
10013d7a:	2308      	movs	r3, #8
10013d7c:	469a      	mov	sl, r3
10013d7e:	3b06      	subs	r3, #6
10013d80:	4699      	mov	r9, r3
10013d82:	e7da      	b.n	10013d3a <__aeabi_fmul+0x2e>
10013d84:	4642      	mov	r2, r8
10013d86:	2802      	cmp	r0, #2
10013d88:	d02d      	beq.n	10013de6 <__aeabi_fmul+0xda>
10013d8a:	2803      	cmp	r0, #3
10013d8c:	d100      	bne.n	10013d90 <__aeabi_fmul+0x84>
10013d8e:	e0c3      	b.n	10013f18 <__aeabi_fmul+0x20c>
10013d90:	2801      	cmp	r0, #1
10013d92:	d000      	beq.n	10013d96 <__aeabi_fmul+0x8a>
10013d94:	e0a2      	b.n	10013edc <__aeabi_fmul+0x1d0>
10013d96:	2500      	movs	r5, #0
10013d98:	2600      	movs	r6, #0
10013d9a:	4002      	ands	r2, r0
10013d9c:	b2d4      	uxtb	r4, r2
10013d9e:	0276      	lsls	r6, r6, #9
10013da0:	05ed      	lsls	r5, r5, #23
10013da2:	0a76      	lsrs	r6, r6, #9
10013da4:	432e      	orrs	r6, r5
10013da6:	07e4      	lsls	r4, r4, #31
10013da8:	4326      	orrs	r6, r4
10013daa:	0030      	movs	r0, r6
10013dac:	bc1c      	pop	{r2, r3, r4}
10013dae:	4690      	mov	r8, r2
10013db0:	4699      	mov	r9, r3
10013db2:	46a2      	mov	sl, r4
10013db4:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013db6:	2e00      	cmp	r6, #0
10013db8:	d11a      	bne.n	10013df0 <__aeabi_fmul+0xe4>
10013dba:	2304      	movs	r3, #4
10013dbc:	469a      	mov	sl, r3
10013dbe:	3b03      	subs	r3, #3
10013dc0:	4699      	mov	r9, r3
10013dc2:	e7ba      	b.n	10013d3a <__aeabi_fmul+0x2e>
10013dc4:	002a      	movs	r2, r5
10013dc6:	1e51      	subs	r1, r2, #1
10013dc8:	418a      	sbcs	r2, r1
10013dca:	1c90      	adds	r0, r2, #2
10013dcc:	e7c6      	b.n	10013d5c <__aeabi_fmul+0x50>
10013dce:	2001      	movs	r0, #1
10013dd0:	2d00      	cmp	r5, #0
10013dd2:	d0c3      	beq.n	10013d5c <__aeabi_fmul+0x50>
10013dd4:	0028      	movs	r0, r5
10013dd6:	f002 f9c1 	bl	1001615c <__clzsi2>
10013dda:	1f43      	subs	r3, r0, #5
10013ddc:	3076      	adds	r0, #118	; 0x76
10013dde:	409d      	lsls	r5, r3
10013de0:	4243      	negs	r3, r0
10013de2:	2000      	movs	r0, #0
10013de4:	e7ba      	b.n	10013d5c <__aeabi_fmul+0x50>
10013de6:	2401      	movs	r4, #1
10013de8:	25ff      	movs	r5, #255	; 0xff
10013dea:	4014      	ands	r4, r2
10013dec:	2600      	movs	r6, #0
10013dee:	e7d6      	b.n	10013d9e <__aeabi_fmul+0x92>
10013df0:	0030      	movs	r0, r6
10013df2:	f002 f9b3 	bl	1001615c <__clzsi2>
10013df6:	1f43      	subs	r3, r0, #5
10013df8:	409e      	lsls	r6, r3
10013dfa:	2300      	movs	r3, #0
10013dfc:	3076      	adds	r0, #118	; 0x76
10013dfe:	4247      	negs	r7, r0
10013e00:	469a      	mov	sl, r3
10013e02:	4699      	mov	r9, r3
10013e04:	e799      	b.n	10013d3a <__aeabi_fmul+0x2e>
10013e06:	230c      	movs	r3, #12
10013e08:	469a      	mov	sl, r3
10013e0a:	3b09      	subs	r3, #9
10013e0c:	4699      	mov	r9, r3
10013e0e:	e794      	b.n	10013d3a <__aeabi_fmul+0x2e>
10013e10:	2680      	movs	r6, #128	; 0x80
10013e12:	2400      	movs	r4, #0
10013e14:	03f6      	lsls	r6, r6, #15
10013e16:	25ff      	movs	r5, #255	; 0xff
10013e18:	e7c1      	b.n	10013d9e <__aeabi_fmul+0x92>
10013e1a:	0035      	movs	r5, r6
10013e1c:	4648      	mov	r0, r9
10013e1e:	e7b2      	b.n	10013d86 <__aeabi_fmul+0x7a>
10013e20:	0035      	movs	r5, r6
10013e22:	0022      	movs	r2, r4
10013e24:	4648      	mov	r0, r9
10013e26:	e7ae      	b.n	10013d86 <__aeabi_fmul+0x7a>
10013e28:	0429      	lsls	r1, r5, #16
10013e2a:	0c09      	lsrs	r1, r1, #16
10013e2c:	0008      	movs	r0, r1
10013e2e:	0c37      	lsrs	r7, r6, #16
10013e30:	0436      	lsls	r6, r6, #16
10013e32:	0c36      	lsrs	r6, r6, #16
10013e34:	0c2c      	lsrs	r4, r5, #16
10013e36:	4379      	muls	r1, r7
10013e38:	4370      	muls	r0, r6
10013e3a:	4367      	muls	r7, r4
10013e3c:	4374      	muls	r4, r6
10013e3e:	0c06      	lsrs	r6, r0, #16
10013e40:	1864      	adds	r4, r4, r1
10013e42:	1936      	adds	r6, r6, r4
10013e44:	42b1      	cmp	r1, r6
10013e46:	d903      	bls.n	10013e50 <__aeabi_fmul+0x144>
10013e48:	2180      	movs	r1, #128	; 0x80
10013e4a:	0249      	lsls	r1, r1, #9
10013e4c:	4688      	mov	r8, r1
10013e4e:	4447      	add	r7, r8
10013e50:	0400      	lsls	r0, r0, #16
10013e52:	0c00      	lsrs	r0, r0, #16
10013e54:	0431      	lsls	r1, r6, #16
10013e56:	1809      	adds	r1, r1, r0
10013e58:	018d      	lsls	r5, r1, #6
10013e5a:	1e68      	subs	r0, r5, #1
10013e5c:	4185      	sbcs	r5, r0
10013e5e:	0e89      	lsrs	r1, r1, #26
10013e60:	4329      	orrs	r1, r5
10013e62:	0c35      	lsrs	r5, r6, #16
10013e64:	19ed      	adds	r5, r5, r7
10013e66:	01ad      	lsls	r5, r5, #6
10013e68:	430d      	orrs	r5, r1
10013e6a:	0129      	lsls	r1, r5, #4
10013e6c:	d504      	bpl.n	10013e78 <__aeabi_fmul+0x16c>
10013e6e:	2301      	movs	r3, #1
10013e70:	0869      	lsrs	r1, r5, #1
10013e72:	401d      	ands	r5, r3
10013e74:	4663      	mov	r3, ip
10013e76:	430d      	orrs	r5, r1
10013e78:	0019      	movs	r1, r3
10013e7a:	317f      	adds	r1, #127	; 0x7f
10013e7c:	2900      	cmp	r1, #0
10013e7e:	dd25      	ble.n	10013ecc <__aeabi_fmul+0x1c0>
10013e80:	0768      	lsls	r0, r5, #29
10013e82:	d004      	beq.n	10013e8e <__aeabi_fmul+0x182>
10013e84:	200f      	movs	r0, #15
10013e86:	4028      	ands	r0, r5
10013e88:	2804      	cmp	r0, #4
10013e8a:	d000      	beq.n	10013e8e <__aeabi_fmul+0x182>
10013e8c:	3504      	adds	r5, #4
10013e8e:	0128      	lsls	r0, r5, #4
10013e90:	d503      	bpl.n	10013e9a <__aeabi_fmul+0x18e>
10013e92:	4927      	ldr	r1, [pc, #156]	; (10013f30 <__aeabi_fmul+0x224>)
10013e94:	3380      	adds	r3, #128	; 0x80
10013e96:	400d      	ands	r5, r1
10013e98:	0019      	movs	r1, r3
10013e9a:	29fe      	cmp	r1, #254	; 0xfe
10013e9c:	dca3      	bgt.n	10013de6 <__aeabi_fmul+0xda>
10013e9e:	2401      	movs	r4, #1
10013ea0:	01ad      	lsls	r5, r5, #6
10013ea2:	0a6e      	lsrs	r6, r5, #9
10013ea4:	4014      	ands	r4, r2
10013ea6:	b2cd      	uxtb	r5, r1
10013ea8:	e779      	b.n	10013d9e <__aeabi_fmul+0x92>
10013eaa:	2080      	movs	r0, #128	; 0x80
10013eac:	03c0      	lsls	r0, r0, #15
10013eae:	4206      	tst	r6, r0
10013eb0:	d007      	beq.n	10013ec2 <__aeabi_fmul+0x1b6>
10013eb2:	4205      	tst	r5, r0
10013eb4:	d105      	bne.n	10013ec2 <__aeabi_fmul+0x1b6>
10013eb6:	4328      	orrs	r0, r5
10013eb8:	0246      	lsls	r6, r0, #9
10013eba:	0a76      	lsrs	r6, r6, #9
10013ebc:	4644      	mov	r4, r8
10013ebe:	25ff      	movs	r5, #255	; 0xff
10013ec0:	e76d      	b.n	10013d9e <__aeabi_fmul+0x92>
10013ec2:	4306      	orrs	r6, r0
10013ec4:	0276      	lsls	r6, r6, #9
10013ec6:	0a76      	lsrs	r6, r6, #9
10013ec8:	25ff      	movs	r5, #255	; 0xff
10013eca:	e768      	b.n	10013d9e <__aeabi_fmul+0x92>
10013ecc:	2401      	movs	r4, #1
10013ece:	1a61      	subs	r1, r4, r1
10013ed0:	291b      	cmp	r1, #27
10013ed2:	dd05      	ble.n	10013ee0 <__aeabi_fmul+0x1d4>
10013ed4:	4014      	ands	r4, r2
10013ed6:	2500      	movs	r5, #0
10013ed8:	2600      	movs	r6, #0
10013eda:	e760      	b.n	10013d9e <__aeabi_fmul+0x92>
10013edc:	4663      	mov	r3, ip
10013ede:	e7cb      	b.n	10013e78 <__aeabi_fmul+0x16c>
10013ee0:	002e      	movs	r6, r5
10013ee2:	2320      	movs	r3, #32
10013ee4:	40ce      	lsrs	r6, r1
10013ee6:	1a59      	subs	r1, r3, r1
10013ee8:	408d      	lsls	r5, r1
10013eea:	1e6b      	subs	r3, r5, #1
10013eec:	419d      	sbcs	r5, r3
10013eee:	432e      	orrs	r6, r5
10013ef0:	0773      	lsls	r3, r6, #29
10013ef2:	d004      	beq.n	10013efe <__aeabi_fmul+0x1f2>
10013ef4:	230f      	movs	r3, #15
10013ef6:	4033      	ands	r3, r6
10013ef8:	2b04      	cmp	r3, #4
10013efa:	d000      	beq.n	10013efe <__aeabi_fmul+0x1f2>
10013efc:	3604      	adds	r6, #4
10013efe:	0173      	lsls	r3, r6, #5
10013f00:	d504      	bpl.n	10013f0c <__aeabi_fmul+0x200>
10013f02:	2401      	movs	r4, #1
10013f04:	2501      	movs	r5, #1
10013f06:	4014      	ands	r4, r2
10013f08:	2600      	movs	r6, #0
10013f0a:	e748      	b.n	10013d9e <__aeabi_fmul+0x92>
10013f0c:	2401      	movs	r4, #1
10013f0e:	01b6      	lsls	r6, r6, #6
10013f10:	0a76      	lsrs	r6, r6, #9
10013f12:	4014      	ands	r4, r2
10013f14:	2500      	movs	r5, #0
10013f16:	e742      	b.n	10013d9e <__aeabi_fmul+0x92>
10013f18:	2680      	movs	r6, #128	; 0x80
10013f1a:	2401      	movs	r4, #1
10013f1c:	03f6      	lsls	r6, r6, #15
10013f1e:	432e      	orrs	r6, r5
10013f20:	0276      	lsls	r6, r6, #9
10013f22:	0a76      	lsrs	r6, r6, #9
10013f24:	4014      	ands	r4, r2
10013f26:	25ff      	movs	r5, #255	; 0xff
10013f28:	e739      	b.n	10013d9e <__aeabi_fmul+0x92>
10013f2a:	46c0      	nop			; (mov r8, r8)
10013f2c:	100184e0 	.word	0x100184e0
10013f30:	f7ffffff 	.word	0xf7ffffff

10013f34 <__aeabi_fsub>:
10013f34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10013f36:	024a      	lsls	r2, r1, #9
10013f38:	004e      	lsls	r6, r1, #1
10013f3a:	0243      	lsls	r3, r0, #9
10013f3c:	0044      	lsls	r4, r0, #1
10013f3e:	0e24      	lsrs	r4, r4, #24
10013f40:	0fc5      	lsrs	r5, r0, #31
10013f42:	099b      	lsrs	r3, r3, #6
10013f44:	0e36      	lsrs	r6, r6, #24
10013f46:	0fc9      	lsrs	r1, r1, #31
10013f48:	0992      	lsrs	r2, r2, #6
10013f4a:	2eff      	cmp	r6, #255	; 0xff
10013f4c:	d100      	bne.n	10013f50 <__aeabi_fsub+0x1c>
10013f4e:	e083      	b.n	10014058 <__aeabi_fsub+0x124>
10013f50:	2001      	movs	r0, #1
10013f52:	4041      	eors	r1, r0
10013f54:	1ba0      	subs	r0, r4, r6
10013f56:	42a9      	cmp	r1, r5
10013f58:	d05c      	beq.n	10014014 <__aeabi_fsub+0xe0>
10013f5a:	2800      	cmp	r0, #0
10013f5c:	dc00      	bgt.n	10013f60 <__aeabi_fsub+0x2c>
10013f5e:	e095      	b.n	1001408c <__aeabi_fsub+0x158>
10013f60:	2e00      	cmp	r6, #0
10013f62:	d11c      	bne.n	10013f9e <__aeabi_fsub+0x6a>
10013f64:	2a00      	cmp	r2, #0
10013f66:	d000      	beq.n	10013f6a <__aeabi_fsub+0x36>
10013f68:	e081      	b.n	1001406e <__aeabi_fsub+0x13a>
10013f6a:	075a      	lsls	r2, r3, #29
10013f6c:	d004      	beq.n	10013f78 <__aeabi_fsub+0x44>
10013f6e:	220f      	movs	r2, #15
10013f70:	401a      	ands	r2, r3
10013f72:	2a04      	cmp	r2, #4
10013f74:	d000      	beq.n	10013f78 <__aeabi_fsub+0x44>
10013f76:	3304      	adds	r3, #4
10013f78:	015a      	lsls	r2, r3, #5
10013f7a:	d53b      	bpl.n	10013ff4 <__aeabi_fsub+0xc0>
10013f7c:	3401      	adds	r4, #1
10013f7e:	2cff      	cmp	r4, #255	; 0xff
10013f80:	d100      	bne.n	10013f84 <__aeabi_fsub+0x50>
10013f82:	e091      	b.n	100140a8 <__aeabi_fsub+0x174>
10013f84:	2001      	movs	r0, #1
10013f86:	019b      	lsls	r3, r3, #6
10013f88:	0a5b      	lsrs	r3, r3, #9
10013f8a:	b2e4      	uxtb	r4, r4
10013f8c:	4005      	ands	r5, r0
10013f8e:	025b      	lsls	r3, r3, #9
10013f90:	05e4      	lsls	r4, r4, #23
10013f92:	0a5b      	lsrs	r3, r3, #9
10013f94:	07ed      	lsls	r5, r5, #31
10013f96:	4323      	orrs	r3, r4
10013f98:	432b      	orrs	r3, r5
10013f9a:	0018      	movs	r0, r3
10013f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013f9e:	2cff      	cmp	r4, #255	; 0xff
10013fa0:	d0e3      	beq.n	10013f6a <__aeabi_fsub+0x36>
10013fa2:	2180      	movs	r1, #128	; 0x80
10013fa4:	04c9      	lsls	r1, r1, #19
10013fa6:	430a      	orrs	r2, r1
10013fa8:	281b      	cmp	r0, #27
10013faa:	dd00      	ble.n	10013fae <__aeabi_fsub+0x7a>
10013fac:	e090      	b.n	100140d0 <__aeabi_fsub+0x19c>
10013fae:	0016      	movs	r6, r2
10013fb0:	2120      	movs	r1, #32
10013fb2:	40c6      	lsrs	r6, r0
10013fb4:	1a08      	subs	r0, r1, r0
10013fb6:	4082      	lsls	r2, r0
10013fb8:	1e51      	subs	r1, r2, #1
10013fba:	418a      	sbcs	r2, r1
10013fbc:	4332      	orrs	r2, r6
10013fbe:	1a9b      	subs	r3, r3, r2
10013fc0:	015a      	lsls	r2, r3, #5
10013fc2:	d515      	bpl.n	10013ff0 <__aeabi_fsub+0xbc>
10013fc4:	019b      	lsls	r3, r3, #6
10013fc6:	099e      	lsrs	r6, r3, #6
10013fc8:	0030      	movs	r0, r6
10013fca:	f002 f8c7 	bl	1001615c <__clzsi2>
10013fce:	3805      	subs	r0, #5
10013fd0:	4086      	lsls	r6, r0
10013fd2:	4284      	cmp	r4, r0
10013fd4:	dc6c      	bgt.n	100140b0 <__aeabi_fsub+0x17c>
10013fd6:	1b04      	subs	r4, r0, r4
10013fd8:	0033      	movs	r3, r6
10013fda:	2020      	movs	r0, #32
10013fdc:	3401      	adds	r4, #1
10013fde:	40e3      	lsrs	r3, r4
10013fe0:	1b04      	subs	r4, r0, r4
10013fe2:	40a6      	lsls	r6, r4
10013fe4:	1e72      	subs	r2, r6, #1
10013fe6:	4196      	sbcs	r6, r2
10013fe8:	2400      	movs	r4, #0
10013fea:	4333      	orrs	r3, r6
10013fec:	e7bd      	b.n	10013f6a <__aeabi_fsub+0x36>
10013fee:	000d      	movs	r5, r1
10013ff0:	075a      	lsls	r2, r3, #29
10013ff2:	d1bc      	bne.n	10013f6e <__aeabi_fsub+0x3a>
10013ff4:	08df      	lsrs	r7, r3, #3
10013ff6:	2301      	movs	r3, #1
10013ff8:	401d      	ands	r5, r3
10013ffa:	2cff      	cmp	r4, #255	; 0xff
10013ffc:	d133      	bne.n	10014066 <__aeabi_fsub+0x132>
10013ffe:	2f00      	cmp	r7, #0
10014000:	d100      	bne.n	10014004 <__aeabi_fsub+0xd0>
10014002:	e090      	b.n	10014126 <__aeabi_fsub+0x1f2>
10014004:	2280      	movs	r2, #128	; 0x80
10014006:	03d2      	lsls	r2, r2, #15
10014008:	0013      	movs	r3, r2
1001400a:	433b      	orrs	r3, r7
1001400c:	025b      	lsls	r3, r3, #9
1001400e:	0a5b      	lsrs	r3, r3, #9
10014010:	24ff      	movs	r4, #255	; 0xff
10014012:	e7bc      	b.n	10013f8e <__aeabi_fsub+0x5a>
10014014:	2800      	cmp	r0, #0
10014016:	dd4f      	ble.n	100140b8 <__aeabi_fsub+0x184>
10014018:	2e00      	cmp	r6, #0
1001401a:	d02e      	beq.n	1001407a <__aeabi_fsub+0x146>
1001401c:	2cff      	cmp	r4, #255	; 0xff
1001401e:	d0a4      	beq.n	10013f6a <__aeabi_fsub+0x36>
10014020:	2580      	movs	r5, #128	; 0x80
10014022:	04ed      	lsls	r5, r5, #19
10014024:	432a      	orrs	r2, r5
10014026:	281b      	cmp	r0, #27
10014028:	dd00      	ble.n	1001402c <__aeabi_fsub+0xf8>
1001402a:	e097      	b.n	1001415c <__aeabi_fsub+0x228>
1001402c:	0016      	movs	r6, r2
1001402e:	2520      	movs	r5, #32
10014030:	40c6      	lsrs	r6, r0
10014032:	1a28      	subs	r0, r5, r0
10014034:	4082      	lsls	r2, r0
10014036:	1e50      	subs	r0, r2, #1
10014038:	4182      	sbcs	r2, r0
1001403a:	4332      	orrs	r2, r6
1001403c:	189b      	adds	r3, r3, r2
1001403e:	015a      	lsls	r2, r3, #5
10014040:	d5d5      	bpl.n	10013fee <__aeabi_fsub+0xba>
10014042:	3401      	adds	r4, #1
10014044:	2cff      	cmp	r4, #255	; 0xff
10014046:	d06d      	beq.n	10014124 <__aeabi_fsub+0x1f0>
10014048:	2201      	movs	r2, #1
1001404a:	487b      	ldr	r0, [pc, #492]	; (10014238 <__aeabi_fsub+0x304>)
1001404c:	401a      	ands	r2, r3
1001404e:	085b      	lsrs	r3, r3, #1
10014050:	4003      	ands	r3, r0
10014052:	4313      	orrs	r3, r2
10014054:	000d      	movs	r5, r1
10014056:	e788      	b.n	10013f6a <__aeabi_fsub+0x36>
10014058:	2a00      	cmp	r2, #0
1001405a:	d000      	beq.n	1001405e <__aeabi_fsub+0x12a>
1001405c:	e77a      	b.n	10013f54 <__aeabi_fsub+0x20>
1001405e:	e777      	b.n	10013f50 <__aeabi_fsub+0x1c>
10014060:	1e03      	subs	r3, r0, #0
10014062:	d1c5      	bne.n	10013ff0 <__aeabi_fsub+0xbc>
10014064:	2500      	movs	r5, #0
10014066:	027b      	lsls	r3, r7, #9
10014068:	0a5b      	lsrs	r3, r3, #9
1001406a:	b2e4      	uxtb	r4, r4
1001406c:	e78f      	b.n	10013f8e <__aeabi_fsub+0x5a>
1001406e:	3801      	subs	r0, #1
10014070:	2800      	cmp	r0, #0
10014072:	d0a4      	beq.n	10013fbe <__aeabi_fsub+0x8a>
10014074:	2cff      	cmp	r4, #255	; 0xff
10014076:	d197      	bne.n	10013fa8 <__aeabi_fsub+0x74>
10014078:	e777      	b.n	10013f6a <__aeabi_fsub+0x36>
1001407a:	2a00      	cmp	r2, #0
1001407c:	d100      	bne.n	10014080 <__aeabi_fsub+0x14c>
1001407e:	e774      	b.n	10013f6a <__aeabi_fsub+0x36>
10014080:	3801      	subs	r0, #1
10014082:	2800      	cmp	r0, #0
10014084:	d0da      	beq.n	1001403c <__aeabi_fsub+0x108>
10014086:	2cff      	cmp	r4, #255	; 0xff
10014088:	d1cd      	bne.n	10014026 <__aeabi_fsub+0xf2>
1001408a:	e76e      	b.n	10013f6a <__aeabi_fsub+0x36>
1001408c:	2800      	cmp	r0, #0
1001408e:	d121      	bne.n	100140d4 <__aeabi_fsub+0x1a0>
10014090:	1c60      	adds	r0, r4, #1
10014092:	b2c0      	uxtb	r0, r0
10014094:	2801      	cmp	r0, #1
10014096:	dd58      	ble.n	1001414a <__aeabi_fsub+0x216>
10014098:	2780      	movs	r7, #128	; 0x80
1001409a:	1a9e      	subs	r6, r3, r2
1001409c:	04ff      	lsls	r7, r7, #19
1001409e:	4037      	ands	r7, r6
100140a0:	d02f      	beq.n	10014102 <__aeabi_fsub+0x1ce>
100140a2:	1ad6      	subs	r6, r2, r3
100140a4:	000d      	movs	r5, r1
100140a6:	e78f      	b.n	10013fc8 <__aeabi_fsub+0x94>
100140a8:	2301      	movs	r3, #1
100140aa:	401d      	ands	r5, r3
100140ac:	2300      	movs	r3, #0
100140ae:	e76e      	b.n	10013f8e <__aeabi_fsub+0x5a>
100140b0:	4b62      	ldr	r3, [pc, #392]	; (1001423c <__aeabi_fsub+0x308>)
100140b2:	1a24      	subs	r4, r4, r0
100140b4:	4033      	ands	r3, r6
100140b6:	e758      	b.n	10013f6a <__aeabi_fsub+0x36>
100140b8:	2800      	cmp	r0, #0
100140ba:	d151      	bne.n	10014160 <__aeabi_fsub+0x22c>
100140bc:	1c60      	adds	r0, r4, #1
100140be:	b2c6      	uxtb	r6, r0
100140c0:	2e01      	cmp	r6, #1
100140c2:	dd33      	ble.n	1001412c <__aeabi_fsub+0x1f8>
100140c4:	28ff      	cmp	r0, #255	; 0xff
100140c6:	d02d      	beq.n	10014124 <__aeabi_fsub+0x1f0>
100140c8:	189b      	adds	r3, r3, r2
100140ca:	085b      	lsrs	r3, r3, #1
100140cc:	0004      	movs	r4, r0
100140ce:	e74c      	b.n	10013f6a <__aeabi_fsub+0x36>
100140d0:	2201      	movs	r2, #1
100140d2:	e774      	b.n	10013fbe <__aeabi_fsub+0x8a>
100140d4:	2c00      	cmp	r4, #0
100140d6:	d01a      	beq.n	1001410e <__aeabi_fsub+0x1da>
100140d8:	2eff      	cmp	r6, #255	; 0xff
100140da:	d01f      	beq.n	1001411c <__aeabi_fsub+0x1e8>
100140dc:	2480      	movs	r4, #128	; 0x80
100140de:	04e4      	lsls	r4, r4, #19
100140e0:	4240      	negs	r0, r0
100140e2:	4323      	orrs	r3, r4
100140e4:	281b      	cmp	r0, #27
100140e6:	dd00      	ble.n	100140ea <__aeabi_fsub+0x1b6>
100140e8:	e096      	b.n	10014218 <__aeabi_fsub+0x2e4>
100140ea:	001d      	movs	r5, r3
100140ec:	2420      	movs	r4, #32
100140ee:	40c5      	lsrs	r5, r0
100140f0:	1a20      	subs	r0, r4, r0
100140f2:	4083      	lsls	r3, r0
100140f4:	1e58      	subs	r0, r3, #1
100140f6:	4183      	sbcs	r3, r0
100140f8:	432b      	orrs	r3, r5
100140fa:	1ad3      	subs	r3, r2, r3
100140fc:	0034      	movs	r4, r6
100140fe:	000d      	movs	r5, r1
10014100:	e75e      	b.n	10013fc0 <__aeabi_fsub+0x8c>
10014102:	2e00      	cmp	r6, #0
10014104:	d000      	beq.n	10014108 <__aeabi_fsub+0x1d4>
10014106:	e75f      	b.n	10013fc8 <__aeabi_fsub+0x94>
10014108:	2500      	movs	r5, #0
1001410a:	2400      	movs	r4, #0
1001410c:	e7ab      	b.n	10014066 <__aeabi_fsub+0x132>
1001410e:	2b00      	cmp	r3, #0
10014110:	d044      	beq.n	1001419c <__aeabi_fsub+0x268>
10014112:	43c0      	mvns	r0, r0
10014114:	2800      	cmp	r0, #0
10014116:	d0f0      	beq.n	100140fa <__aeabi_fsub+0x1c6>
10014118:	2eff      	cmp	r6, #255	; 0xff
1001411a:	d1e3      	bne.n	100140e4 <__aeabi_fsub+0x1b0>
1001411c:	0013      	movs	r3, r2
1001411e:	24ff      	movs	r4, #255	; 0xff
10014120:	000d      	movs	r5, r1
10014122:	e722      	b.n	10013f6a <__aeabi_fsub+0x36>
10014124:	000d      	movs	r5, r1
10014126:	24ff      	movs	r4, #255	; 0xff
10014128:	2300      	movs	r3, #0
1001412a:	e730      	b.n	10013f8e <__aeabi_fsub+0x5a>
1001412c:	2c00      	cmp	r4, #0
1001412e:	d15d      	bne.n	100141ec <__aeabi_fsub+0x2b8>
10014130:	2b00      	cmp	r3, #0
10014132:	d07d      	beq.n	10014230 <__aeabi_fsub+0x2fc>
10014134:	2a00      	cmp	r2, #0
10014136:	d100      	bne.n	1001413a <__aeabi_fsub+0x206>
10014138:	e717      	b.n	10013f6a <__aeabi_fsub+0x36>
1001413a:	189b      	adds	r3, r3, r2
1001413c:	015a      	lsls	r2, r3, #5
1001413e:	d400      	bmi.n	10014142 <__aeabi_fsub+0x20e>
10014140:	e756      	b.n	10013ff0 <__aeabi_fsub+0xbc>
10014142:	4a3e      	ldr	r2, [pc, #248]	; (1001423c <__aeabi_fsub+0x308>)
10014144:	0004      	movs	r4, r0
10014146:	4013      	ands	r3, r2
10014148:	e70f      	b.n	10013f6a <__aeabi_fsub+0x36>
1001414a:	2c00      	cmp	r4, #0
1001414c:	d11e      	bne.n	1001418c <__aeabi_fsub+0x258>
1001414e:	2b00      	cmp	r3, #0
10014150:	d12f      	bne.n	100141b2 <__aeabi_fsub+0x27e>
10014152:	2a00      	cmp	r2, #0
10014154:	d065      	beq.n	10014222 <__aeabi_fsub+0x2ee>
10014156:	0013      	movs	r3, r2
10014158:	000d      	movs	r5, r1
1001415a:	e706      	b.n	10013f6a <__aeabi_fsub+0x36>
1001415c:	2201      	movs	r2, #1
1001415e:	e76d      	b.n	1001403c <__aeabi_fsub+0x108>
10014160:	2c00      	cmp	r4, #0
10014162:	d11f      	bne.n	100141a4 <__aeabi_fsub+0x270>
10014164:	2b00      	cmp	r3, #0
10014166:	d059      	beq.n	1001421c <__aeabi_fsub+0x2e8>
10014168:	43c0      	mvns	r0, r0
1001416a:	2800      	cmp	r0, #0
1001416c:	d00b      	beq.n	10014186 <__aeabi_fsub+0x252>
1001416e:	2eff      	cmp	r6, #255	; 0xff
10014170:	d04f      	beq.n	10014212 <__aeabi_fsub+0x2de>
10014172:	281b      	cmp	r0, #27
10014174:	dc5e      	bgt.n	10014234 <__aeabi_fsub+0x300>
10014176:	001d      	movs	r5, r3
10014178:	2420      	movs	r4, #32
1001417a:	40c5      	lsrs	r5, r0
1001417c:	1a20      	subs	r0, r4, r0
1001417e:	4083      	lsls	r3, r0
10014180:	1e58      	subs	r0, r3, #1
10014182:	4183      	sbcs	r3, r0
10014184:	432b      	orrs	r3, r5
10014186:	189b      	adds	r3, r3, r2
10014188:	0034      	movs	r4, r6
1001418a:	e758      	b.n	1001403e <__aeabi_fsub+0x10a>
1001418c:	2b00      	cmp	r3, #0
1001418e:	d11c      	bne.n	100141ca <__aeabi_fsub+0x296>
10014190:	2a00      	cmp	r2, #0
10014192:	d049      	beq.n	10014228 <__aeabi_fsub+0x2f4>
10014194:	0013      	movs	r3, r2
10014196:	000d      	movs	r5, r1
10014198:	24ff      	movs	r4, #255	; 0xff
1001419a:	e6e6      	b.n	10013f6a <__aeabi_fsub+0x36>
1001419c:	0013      	movs	r3, r2
1001419e:	0034      	movs	r4, r6
100141a0:	000d      	movs	r5, r1
100141a2:	e6e2      	b.n	10013f6a <__aeabi_fsub+0x36>
100141a4:	2eff      	cmp	r6, #255	; 0xff
100141a6:	d034      	beq.n	10014212 <__aeabi_fsub+0x2de>
100141a8:	2480      	movs	r4, #128	; 0x80
100141aa:	04e4      	lsls	r4, r4, #19
100141ac:	4240      	negs	r0, r0
100141ae:	4323      	orrs	r3, r4
100141b0:	e7df      	b.n	10014172 <__aeabi_fsub+0x23e>
100141b2:	2a00      	cmp	r2, #0
100141b4:	d100      	bne.n	100141b8 <__aeabi_fsub+0x284>
100141b6:	e6d8      	b.n	10013f6a <__aeabi_fsub+0x36>
100141b8:	2780      	movs	r7, #128	; 0x80
100141ba:	1a98      	subs	r0, r3, r2
100141bc:	04ff      	lsls	r7, r7, #19
100141be:	4007      	ands	r7, r0
100141c0:	d100      	bne.n	100141c4 <__aeabi_fsub+0x290>
100141c2:	e74d      	b.n	10014060 <__aeabi_fsub+0x12c>
100141c4:	1ad3      	subs	r3, r2, r3
100141c6:	000d      	movs	r5, r1
100141c8:	e6cf      	b.n	10013f6a <__aeabi_fsub+0x36>
100141ca:	24ff      	movs	r4, #255	; 0xff
100141cc:	2a00      	cmp	r2, #0
100141ce:	d100      	bne.n	100141d2 <__aeabi_fsub+0x29e>
100141d0:	e6cb      	b.n	10013f6a <__aeabi_fsub+0x36>
100141d2:	2080      	movs	r0, #128	; 0x80
100141d4:	08db      	lsrs	r3, r3, #3
100141d6:	03c0      	lsls	r0, r0, #15
100141d8:	4203      	tst	r3, r0
100141da:	d004      	beq.n	100141e6 <__aeabi_fsub+0x2b2>
100141dc:	08d2      	lsrs	r2, r2, #3
100141de:	4202      	tst	r2, r0
100141e0:	d101      	bne.n	100141e6 <__aeabi_fsub+0x2b2>
100141e2:	0013      	movs	r3, r2
100141e4:	000d      	movs	r5, r1
100141e6:	00db      	lsls	r3, r3, #3
100141e8:	24ff      	movs	r4, #255	; 0xff
100141ea:	e6be      	b.n	10013f6a <__aeabi_fsub+0x36>
100141ec:	2b00      	cmp	r3, #0
100141ee:	d010      	beq.n	10014212 <__aeabi_fsub+0x2de>
100141f0:	24ff      	movs	r4, #255	; 0xff
100141f2:	2a00      	cmp	r2, #0
100141f4:	d100      	bne.n	100141f8 <__aeabi_fsub+0x2c4>
100141f6:	e6b8      	b.n	10013f6a <__aeabi_fsub+0x36>
100141f8:	2080      	movs	r0, #128	; 0x80
100141fa:	08db      	lsrs	r3, r3, #3
100141fc:	03c0      	lsls	r0, r0, #15
100141fe:	4203      	tst	r3, r0
10014200:	d003      	beq.n	1001420a <__aeabi_fsub+0x2d6>
10014202:	08d2      	lsrs	r2, r2, #3
10014204:	4202      	tst	r2, r0
10014206:	d100      	bne.n	1001420a <__aeabi_fsub+0x2d6>
10014208:	0013      	movs	r3, r2
1001420a:	00db      	lsls	r3, r3, #3
1001420c:	000d      	movs	r5, r1
1001420e:	24ff      	movs	r4, #255	; 0xff
10014210:	e6ab      	b.n	10013f6a <__aeabi_fsub+0x36>
10014212:	0013      	movs	r3, r2
10014214:	24ff      	movs	r4, #255	; 0xff
10014216:	e6a8      	b.n	10013f6a <__aeabi_fsub+0x36>
10014218:	2301      	movs	r3, #1
1001421a:	e76e      	b.n	100140fa <__aeabi_fsub+0x1c6>
1001421c:	0013      	movs	r3, r2
1001421e:	0034      	movs	r4, r6
10014220:	e6a3      	b.n	10013f6a <__aeabi_fsub+0x36>
10014222:	2700      	movs	r7, #0
10014224:	2500      	movs	r5, #0
10014226:	e71e      	b.n	10014066 <__aeabi_fsub+0x132>
10014228:	2780      	movs	r7, #128	; 0x80
1001422a:	2500      	movs	r5, #0
1001422c:	03ff      	lsls	r7, r7, #15
1001422e:	e6e9      	b.n	10014004 <__aeabi_fsub+0xd0>
10014230:	0013      	movs	r3, r2
10014232:	e69a      	b.n	10013f6a <__aeabi_fsub+0x36>
10014234:	2301      	movs	r3, #1
10014236:	e7a6      	b.n	10014186 <__aeabi_fsub+0x252>
10014238:	7dffffff 	.word	0x7dffffff
1001423c:	fbffffff 	.word	0xfbffffff

10014240 <__aeabi_fcmpun>:
10014240:	0243      	lsls	r3, r0, #9
10014242:	0a5a      	lsrs	r2, r3, #9
10014244:	0040      	lsls	r0, r0, #1
10014246:	024b      	lsls	r3, r1, #9
10014248:	0049      	lsls	r1, r1, #1
1001424a:	0e00      	lsrs	r0, r0, #24
1001424c:	0a5b      	lsrs	r3, r3, #9
1001424e:	0e09      	lsrs	r1, r1, #24
10014250:	28ff      	cmp	r0, #255	; 0xff
10014252:	d003      	beq.n	1001425c <__aeabi_fcmpun+0x1c>
10014254:	2000      	movs	r0, #0
10014256:	29ff      	cmp	r1, #255	; 0xff
10014258:	d006      	beq.n	10014268 <__aeabi_fcmpun+0x28>
1001425a:	4770      	bx	lr
1001425c:	38fe      	subs	r0, #254	; 0xfe
1001425e:	2a00      	cmp	r2, #0
10014260:	d1fb      	bne.n	1001425a <__aeabi_fcmpun+0x1a>
10014262:	2000      	movs	r0, #0
10014264:	29ff      	cmp	r1, #255	; 0xff
10014266:	d1f8      	bne.n	1001425a <__aeabi_fcmpun+0x1a>
10014268:	0018      	movs	r0, r3
1001426a:	1e43      	subs	r3, r0, #1
1001426c:	4198      	sbcs	r0, r3
1001426e:	e7f4      	b.n	1001425a <__aeabi_fcmpun+0x1a>

10014270 <__aeabi_f2iz>:
10014270:	0243      	lsls	r3, r0, #9
10014272:	0a59      	lsrs	r1, r3, #9
10014274:	0043      	lsls	r3, r0, #1
10014276:	0fc2      	lsrs	r2, r0, #31
10014278:	0e1b      	lsrs	r3, r3, #24
1001427a:	2000      	movs	r0, #0
1001427c:	2b7e      	cmp	r3, #126	; 0x7e
1001427e:	dd0e      	ble.n	1001429e <__aeabi_f2iz+0x2e>
10014280:	2b9d      	cmp	r3, #157	; 0x9d
10014282:	dc0d      	bgt.n	100142a0 <__aeabi_f2iz+0x30>
10014284:	2080      	movs	r0, #128	; 0x80
10014286:	0400      	lsls	r0, r0, #16
10014288:	4301      	orrs	r1, r0
1001428a:	2b95      	cmp	r3, #149	; 0x95
1001428c:	dc0b      	bgt.n	100142a6 <__aeabi_f2iz+0x36>
1001428e:	2096      	movs	r0, #150	; 0x96
10014290:	1ac3      	subs	r3, r0, r3
10014292:	40d9      	lsrs	r1, r3
10014294:	000b      	movs	r3, r1
10014296:	4258      	negs	r0, r3
10014298:	2a00      	cmp	r2, #0
1001429a:	d100      	bne.n	1001429e <__aeabi_f2iz+0x2e>
1001429c:	0018      	movs	r0, r3
1001429e:	4770      	bx	lr
100142a0:	4b03      	ldr	r3, [pc, #12]	; (100142b0 <__aeabi_f2iz+0x40>)
100142a2:	18d0      	adds	r0, r2, r3
100142a4:	e7fb      	b.n	1001429e <__aeabi_f2iz+0x2e>
100142a6:	3b96      	subs	r3, #150	; 0x96
100142a8:	4099      	lsls	r1, r3
100142aa:	000b      	movs	r3, r1
100142ac:	e7f3      	b.n	10014296 <__aeabi_f2iz+0x26>
100142ae:	46c0      	nop			; (mov r8, r8)
100142b0:	7fffffff 	.word	0x7fffffff

100142b4 <__aeabi_i2f>:
100142b4:	b570      	push	{r4, r5, r6, lr}
100142b6:	2800      	cmp	r0, #0
100142b8:	d030      	beq.n	1001431c <__aeabi_i2f+0x68>
100142ba:	17c3      	asrs	r3, r0, #31
100142bc:	18c5      	adds	r5, r0, r3
100142be:	405d      	eors	r5, r3
100142c0:	0fc4      	lsrs	r4, r0, #31
100142c2:	0028      	movs	r0, r5
100142c4:	f001 ff4a 	bl	1001615c <__clzsi2>
100142c8:	239e      	movs	r3, #158	; 0x9e
100142ca:	1a1b      	subs	r3, r3, r0
100142cc:	2b96      	cmp	r3, #150	; 0x96
100142ce:	dc0d      	bgt.n	100142ec <__aeabi_i2f+0x38>
100142d0:	2296      	movs	r2, #150	; 0x96
100142d2:	1ad2      	subs	r2, r2, r3
100142d4:	4095      	lsls	r5, r2
100142d6:	026a      	lsls	r2, r5, #9
100142d8:	0a52      	lsrs	r2, r2, #9
100142da:	b2d8      	uxtb	r0, r3
100142dc:	0252      	lsls	r2, r2, #9
100142de:	05c0      	lsls	r0, r0, #23
100142e0:	0a52      	lsrs	r2, r2, #9
100142e2:	07e4      	lsls	r4, r4, #31
100142e4:	4302      	orrs	r2, r0
100142e6:	4322      	orrs	r2, r4
100142e8:	0010      	movs	r0, r2
100142ea:	bd70      	pop	{r4, r5, r6, pc}
100142ec:	2b99      	cmp	r3, #153	; 0x99
100142ee:	dc19      	bgt.n	10014324 <__aeabi_i2f+0x70>
100142f0:	2299      	movs	r2, #153	; 0x99
100142f2:	1ad2      	subs	r2, r2, r3
100142f4:	4095      	lsls	r5, r2
100142f6:	4a12      	ldr	r2, [pc, #72]	; (10014340 <__aeabi_i2f+0x8c>)
100142f8:	402a      	ands	r2, r5
100142fa:	0769      	lsls	r1, r5, #29
100142fc:	d004      	beq.n	10014308 <__aeabi_i2f+0x54>
100142fe:	210f      	movs	r1, #15
10014300:	400d      	ands	r5, r1
10014302:	2d04      	cmp	r5, #4
10014304:	d000      	beq.n	10014308 <__aeabi_i2f+0x54>
10014306:	3204      	adds	r2, #4
10014308:	0151      	lsls	r1, r2, #5
1001430a:	d503      	bpl.n	10014314 <__aeabi_i2f+0x60>
1001430c:	4b0c      	ldr	r3, [pc, #48]	; (10014340 <__aeabi_i2f+0x8c>)
1001430e:	401a      	ands	r2, r3
10014310:	239f      	movs	r3, #159	; 0x9f
10014312:	1a1b      	subs	r3, r3, r0
10014314:	0192      	lsls	r2, r2, #6
10014316:	0a52      	lsrs	r2, r2, #9
10014318:	b2d8      	uxtb	r0, r3
1001431a:	e7df      	b.n	100142dc <__aeabi_i2f+0x28>
1001431c:	2400      	movs	r4, #0
1001431e:	2000      	movs	r0, #0
10014320:	2200      	movs	r2, #0
10014322:	e7db      	b.n	100142dc <__aeabi_i2f+0x28>
10014324:	2205      	movs	r2, #5
10014326:	002e      	movs	r6, r5
10014328:	1a12      	subs	r2, r2, r0
1001432a:	21b9      	movs	r1, #185	; 0xb9
1001432c:	40d6      	lsrs	r6, r2
1001432e:	002a      	movs	r2, r5
10014330:	1ac9      	subs	r1, r1, r3
10014332:	408a      	lsls	r2, r1
10014334:	1e55      	subs	r5, r2, #1
10014336:	41aa      	sbcs	r2, r5
10014338:	0035      	movs	r5, r6
1001433a:	4315      	orrs	r5, r2
1001433c:	e7db      	b.n	100142f6 <__aeabi_i2f+0x42>
1001433e:	46c0      	nop			; (mov r8, r8)
10014340:	fbffffff 	.word	0xfbffffff

10014344 <__aeabi_ui2f>:
10014344:	b570      	push	{r4, r5, r6, lr}
10014346:	1e04      	subs	r4, r0, #0
10014348:	d028      	beq.n	1001439c <__aeabi_ui2f+0x58>
1001434a:	f001 ff07 	bl	1001615c <__clzsi2>
1001434e:	239e      	movs	r3, #158	; 0x9e
10014350:	1a1b      	subs	r3, r3, r0
10014352:	2b96      	cmp	r3, #150	; 0x96
10014354:	dc0a      	bgt.n	1001436c <__aeabi_ui2f+0x28>
10014356:	2296      	movs	r2, #150	; 0x96
10014358:	1ad2      	subs	r2, r2, r3
1001435a:	4094      	lsls	r4, r2
1001435c:	0262      	lsls	r2, r4, #9
1001435e:	0a52      	lsrs	r2, r2, #9
10014360:	b2d8      	uxtb	r0, r3
10014362:	0252      	lsls	r2, r2, #9
10014364:	0a52      	lsrs	r2, r2, #9
10014366:	05c0      	lsls	r0, r0, #23
10014368:	4310      	orrs	r0, r2
1001436a:	bd70      	pop	{r4, r5, r6, pc}
1001436c:	2b99      	cmp	r3, #153	; 0x99
1001436e:	dc18      	bgt.n	100143a2 <__aeabi_ui2f+0x5e>
10014370:	2299      	movs	r2, #153	; 0x99
10014372:	1ad2      	subs	r2, r2, r3
10014374:	4094      	lsls	r4, r2
10014376:	4a11      	ldr	r2, [pc, #68]	; (100143bc <__aeabi_ui2f+0x78>)
10014378:	4022      	ands	r2, r4
1001437a:	0761      	lsls	r1, r4, #29
1001437c:	d004      	beq.n	10014388 <__aeabi_ui2f+0x44>
1001437e:	210f      	movs	r1, #15
10014380:	400c      	ands	r4, r1
10014382:	2c04      	cmp	r4, #4
10014384:	d000      	beq.n	10014388 <__aeabi_ui2f+0x44>
10014386:	3204      	adds	r2, #4
10014388:	0151      	lsls	r1, r2, #5
1001438a:	d503      	bpl.n	10014394 <__aeabi_ui2f+0x50>
1001438c:	4b0b      	ldr	r3, [pc, #44]	; (100143bc <__aeabi_ui2f+0x78>)
1001438e:	401a      	ands	r2, r3
10014390:	239f      	movs	r3, #159	; 0x9f
10014392:	1a1b      	subs	r3, r3, r0
10014394:	0192      	lsls	r2, r2, #6
10014396:	0a52      	lsrs	r2, r2, #9
10014398:	b2d8      	uxtb	r0, r3
1001439a:	e7e2      	b.n	10014362 <__aeabi_ui2f+0x1e>
1001439c:	2000      	movs	r0, #0
1001439e:	2200      	movs	r2, #0
100143a0:	e7df      	b.n	10014362 <__aeabi_ui2f+0x1e>
100143a2:	2205      	movs	r2, #5
100143a4:	0025      	movs	r5, r4
100143a6:	1a12      	subs	r2, r2, r0
100143a8:	21b9      	movs	r1, #185	; 0xb9
100143aa:	40d5      	lsrs	r5, r2
100143ac:	0022      	movs	r2, r4
100143ae:	1ac9      	subs	r1, r1, r3
100143b0:	408a      	lsls	r2, r1
100143b2:	1e54      	subs	r4, r2, #1
100143b4:	41a2      	sbcs	r2, r4
100143b6:	002c      	movs	r4, r5
100143b8:	4314      	orrs	r4, r2
100143ba:	e7dc      	b.n	10014376 <__aeabi_ui2f+0x32>
100143bc:	fbffffff 	.word	0xfbffffff

100143c0 <__aeabi_dadd>:
100143c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100143c2:	4656      	mov	r6, sl
100143c4:	465f      	mov	r7, fp
100143c6:	464d      	mov	r5, r9
100143c8:	4644      	mov	r4, r8
100143ca:	b4f0      	push	{r4, r5, r6, r7}
100143cc:	000f      	movs	r7, r1
100143ce:	0ffd      	lsrs	r5, r7, #31
100143d0:	46aa      	mov	sl, r5
100143d2:	0309      	lsls	r1, r1, #12
100143d4:	007c      	lsls	r4, r7, #1
100143d6:	002e      	movs	r6, r5
100143d8:	005f      	lsls	r7, r3, #1
100143da:	0f45      	lsrs	r5, r0, #29
100143dc:	0a49      	lsrs	r1, r1, #9
100143de:	0d7f      	lsrs	r7, r7, #21
100143e0:	4329      	orrs	r1, r5
100143e2:	00c5      	lsls	r5, r0, #3
100143e4:	0318      	lsls	r0, r3, #12
100143e6:	46bc      	mov	ip, r7
100143e8:	0a40      	lsrs	r0, r0, #9
100143ea:	0f57      	lsrs	r7, r2, #29
100143ec:	0d64      	lsrs	r4, r4, #21
100143ee:	0fdb      	lsrs	r3, r3, #31
100143f0:	4338      	orrs	r0, r7
100143f2:	00d2      	lsls	r2, r2, #3
100143f4:	459a      	cmp	sl, r3
100143f6:	d100      	bne.n	100143fa <__aeabi_dadd+0x3a>
100143f8:	e0aa      	b.n	10014550 <__aeabi_dadd+0x190>
100143fa:	4666      	mov	r6, ip
100143fc:	1ba6      	subs	r6, r4, r6
100143fe:	2e00      	cmp	r6, #0
10014400:	dc00      	bgt.n	10014404 <__aeabi_dadd+0x44>
10014402:	e0ff      	b.n	10014604 <__aeabi_dadd+0x244>
10014404:	4663      	mov	r3, ip
10014406:	2b00      	cmp	r3, #0
10014408:	d139      	bne.n	1001447e <__aeabi_dadd+0xbe>
1001440a:	0003      	movs	r3, r0
1001440c:	4313      	orrs	r3, r2
1001440e:	d000      	beq.n	10014412 <__aeabi_dadd+0x52>
10014410:	e0d9      	b.n	100145c6 <__aeabi_dadd+0x206>
10014412:	076b      	lsls	r3, r5, #29
10014414:	d009      	beq.n	1001442a <__aeabi_dadd+0x6a>
10014416:	230f      	movs	r3, #15
10014418:	402b      	ands	r3, r5
1001441a:	2b04      	cmp	r3, #4
1001441c:	d005      	beq.n	1001442a <__aeabi_dadd+0x6a>
1001441e:	1d2b      	adds	r3, r5, #4
10014420:	42ab      	cmp	r3, r5
10014422:	41ad      	sbcs	r5, r5
10014424:	426d      	negs	r5, r5
10014426:	1949      	adds	r1, r1, r5
10014428:	001d      	movs	r5, r3
1001442a:	020b      	lsls	r3, r1, #8
1001442c:	d400      	bmi.n	10014430 <__aeabi_dadd+0x70>
1001442e:	e082      	b.n	10014536 <__aeabi_dadd+0x176>
10014430:	4bca      	ldr	r3, [pc, #808]	; (1001475c <__aeabi_dadd+0x39c>)
10014432:	3401      	adds	r4, #1
10014434:	429c      	cmp	r4, r3
10014436:	d100      	bne.n	1001443a <__aeabi_dadd+0x7a>
10014438:	e0fe      	b.n	10014638 <__aeabi_dadd+0x278>
1001443a:	000a      	movs	r2, r1
1001443c:	4656      	mov	r6, sl
1001443e:	4bc8      	ldr	r3, [pc, #800]	; (10014760 <__aeabi_dadd+0x3a0>)
10014440:	08ed      	lsrs	r5, r5, #3
10014442:	401a      	ands	r2, r3
10014444:	0750      	lsls	r0, r2, #29
10014446:	0564      	lsls	r4, r4, #21
10014448:	0252      	lsls	r2, r2, #9
1001444a:	4305      	orrs	r5, r0
1001444c:	0b12      	lsrs	r2, r2, #12
1001444e:	0d64      	lsrs	r4, r4, #21
10014450:	2100      	movs	r1, #0
10014452:	0312      	lsls	r2, r2, #12
10014454:	0d0b      	lsrs	r3, r1, #20
10014456:	051b      	lsls	r3, r3, #20
10014458:	0564      	lsls	r4, r4, #21
1001445a:	0b12      	lsrs	r2, r2, #12
1001445c:	431a      	orrs	r2, r3
1001445e:	0863      	lsrs	r3, r4, #1
10014460:	4cc0      	ldr	r4, [pc, #768]	; (10014764 <__aeabi_dadd+0x3a4>)
10014462:	07f6      	lsls	r6, r6, #31
10014464:	4014      	ands	r4, r2
10014466:	431c      	orrs	r4, r3
10014468:	0064      	lsls	r4, r4, #1
1001446a:	0864      	lsrs	r4, r4, #1
1001446c:	4334      	orrs	r4, r6
1001446e:	0028      	movs	r0, r5
10014470:	0021      	movs	r1, r4
10014472:	bc3c      	pop	{r2, r3, r4, r5}
10014474:	4690      	mov	r8, r2
10014476:	4699      	mov	r9, r3
10014478:	46a2      	mov	sl, r4
1001447a:	46ab      	mov	fp, r5
1001447c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001447e:	4bb7      	ldr	r3, [pc, #732]	; (1001475c <__aeabi_dadd+0x39c>)
10014480:	429c      	cmp	r4, r3
10014482:	d0c6      	beq.n	10014412 <__aeabi_dadd+0x52>
10014484:	2380      	movs	r3, #128	; 0x80
10014486:	041b      	lsls	r3, r3, #16
10014488:	4318      	orrs	r0, r3
1001448a:	2e38      	cmp	r6, #56	; 0x38
1001448c:	dd00      	ble.n	10014490 <__aeabi_dadd+0xd0>
1001448e:	e0eb      	b.n	10014668 <__aeabi_dadd+0x2a8>
10014490:	2e1f      	cmp	r6, #31
10014492:	dd00      	ble.n	10014496 <__aeabi_dadd+0xd6>
10014494:	e11e      	b.n	100146d4 <__aeabi_dadd+0x314>
10014496:	2320      	movs	r3, #32
10014498:	1b9b      	subs	r3, r3, r6
1001449a:	469c      	mov	ip, r3
1001449c:	0003      	movs	r3, r0
1001449e:	4667      	mov	r7, ip
100144a0:	40bb      	lsls	r3, r7
100144a2:	4698      	mov	r8, r3
100144a4:	0013      	movs	r3, r2
100144a6:	4647      	mov	r7, r8
100144a8:	40f3      	lsrs	r3, r6
100144aa:	433b      	orrs	r3, r7
100144ac:	4667      	mov	r7, ip
100144ae:	40ba      	lsls	r2, r7
100144b0:	1e57      	subs	r7, r2, #1
100144b2:	41ba      	sbcs	r2, r7
100144b4:	4313      	orrs	r3, r2
100144b6:	0002      	movs	r2, r0
100144b8:	40f2      	lsrs	r2, r6
100144ba:	1aeb      	subs	r3, r5, r3
100144bc:	429d      	cmp	r5, r3
100144be:	41b6      	sbcs	r6, r6
100144c0:	001d      	movs	r5, r3
100144c2:	1a8a      	subs	r2, r1, r2
100144c4:	4276      	negs	r6, r6
100144c6:	1b91      	subs	r1, r2, r6
100144c8:	020b      	lsls	r3, r1, #8
100144ca:	d531      	bpl.n	10014530 <__aeabi_dadd+0x170>
100144cc:	024a      	lsls	r2, r1, #9
100144ce:	0a56      	lsrs	r6, r2, #9
100144d0:	2e00      	cmp	r6, #0
100144d2:	d100      	bne.n	100144d6 <__aeabi_dadd+0x116>
100144d4:	e0b4      	b.n	10014640 <__aeabi_dadd+0x280>
100144d6:	0030      	movs	r0, r6
100144d8:	f001 fe40 	bl	1001615c <__clzsi2>
100144dc:	0003      	movs	r3, r0
100144de:	3b08      	subs	r3, #8
100144e0:	2b1f      	cmp	r3, #31
100144e2:	dd00      	ble.n	100144e6 <__aeabi_dadd+0x126>
100144e4:	e0b5      	b.n	10014652 <__aeabi_dadd+0x292>
100144e6:	2220      	movs	r2, #32
100144e8:	0029      	movs	r1, r5
100144ea:	1ad2      	subs	r2, r2, r3
100144ec:	40d1      	lsrs	r1, r2
100144ee:	409e      	lsls	r6, r3
100144f0:	000a      	movs	r2, r1
100144f2:	409d      	lsls	r5, r3
100144f4:	4332      	orrs	r2, r6
100144f6:	429c      	cmp	r4, r3
100144f8:	dd00      	ble.n	100144fc <__aeabi_dadd+0x13c>
100144fa:	e0b1      	b.n	10014660 <__aeabi_dadd+0x2a0>
100144fc:	1b1c      	subs	r4, r3, r4
100144fe:	1c63      	adds	r3, r4, #1
10014500:	2b1f      	cmp	r3, #31
10014502:	dd00      	ble.n	10014506 <__aeabi_dadd+0x146>
10014504:	e0d5      	b.n	100146b2 <__aeabi_dadd+0x2f2>
10014506:	2120      	movs	r1, #32
10014508:	0014      	movs	r4, r2
1001450a:	0028      	movs	r0, r5
1001450c:	1ac9      	subs	r1, r1, r3
1001450e:	408c      	lsls	r4, r1
10014510:	40d8      	lsrs	r0, r3
10014512:	408d      	lsls	r5, r1
10014514:	4304      	orrs	r4, r0
10014516:	40da      	lsrs	r2, r3
10014518:	1e68      	subs	r0, r5, #1
1001451a:	4185      	sbcs	r5, r0
1001451c:	0011      	movs	r1, r2
1001451e:	4325      	orrs	r5, r4
10014520:	2400      	movs	r4, #0
10014522:	e776      	b.n	10014412 <__aeabi_dadd+0x52>
10014524:	4641      	mov	r1, r8
10014526:	4331      	orrs	r1, r6
10014528:	d100      	bne.n	1001452c <__aeabi_dadd+0x16c>
1001452a:	e234      	b.n	10014996 <__aeabi_dadd+0x5d6>
1001452c:	0031      	movs	r1, r6
1001452e:	4645      	mov	r5, r8
10014530:	076b      	lsls	r3, r5, #29
10014532:	d000      	beq.n	10014536 <__aeabi_dadd+0x176>
10014534:	e76f      	b.n	10014416 <__aeabi_dadd+0x56>
10014536:	4656      	mov	r6, sl
10014538:	0748      	lsls	r0, r1, #29
1001453a:	08ed      	lsrs	r5, r5, #3
1001453c:	08c9      	lsrs	r1, r1, #3
1001453e:	4305      	orrs	r5, r0
10014540:	4b86      	ldr	r3, [pc, #536]	; (1001475c <__aeabi_dadd+0x39c>)
10014542:	429c      	cmp	r4, r3
10014544:	d035      	beq.n	100145b2 <__aeabi_dadd+0x1f2>
10014546:	030a      	lsls	r2, r1, #12
10014548:	0564      	lsls	r4, r4, #21
1001454a:	0b12      	lsrs	r2, r2, #12
1001454c:	0d64      	lsrs	r4, r4, #21
1001454e:	e77f      	b.n	10014450 <__aeabi_dadd+0x90>
10014550:	4663      	mov	r3, ip
10014552:	1ae3      	subs	r3, r4, r3
10014554:	469b      	mov	fp, r3
10014556:	2b00      	cmp	r3, #0
10014558:	dc00      	bgt.n	1001455c <__aeabi_dadd+0x19c>
1001455a:	e08b      	b.n	10014674 <__aeabi_dadd+0x2b4>
1001455c:	4667      	mov	r7, ip
1001455e:	2f00      	cmp	r7, #0
10014560:	d03c      	beq.n	100145dc <__aeabi_dadd+0x21c>
10014562:	4f7e      	ldr	r7, [pc, #504]	; (1001475c <__aeabi_dadd+0x39c>)
10014564:	42bc      	cmp	r4, r7
10014566:	d100      	bne.n	1001456a <__aeabi_dadd+0x1aa>
10014568:	e753      	b.n	10014412 <__aeabi_dadd+0x52>
1001456a:	2780      	movs	r7, #128	; 0x80
1001456c:	043f      	lsls	r7, r7, #16
1001456e:	4338      	orrs	r0, r7
10014570:	465b      	mov	r3, fp
10014572:	2b38      	cmp	r3, #56	; 0x38
10014574:	dc00      	bgt.n	10014578 <__aeabi_dadd+0x1b8>
10014576:	e0f7      	b.n	10014768 <__aeabi_dadd+0x3a8>
10014578:	4302      	orrs	r2, r0
1001457a:	1e50      	subs	r0, r2, #1
1001457c:	4182      	sbcs	r2, r0
1001457e:	2000      	movs	r0, #0
10014580:	b2d2      	uxtb	r2, r2
10014582:	1953      	adds	r3, r2, r5
10014584:	1842      	adds	r2, r0, r1
10014586:	42ab      	cmp	r3, r5
10014588:	4189      	sbcs	r1, r1
1001458a:	001d      	movs	r5, r3
1001458c:	4249      	negs	r1, r1
1001458e:	1889      	adds	r1, r1, r2
10014590:	020b      	lsls	r3, r1, #8
10014592:	d5cd      	bpl.n	10014530 <__aeabi_dadd+0x170>
10014594:	4b71      	ldr	r3, [pc, #452]	; (1001475c <__aeabi_dadd+0x39c>)
10014596:	3401      	adds	r4, #1
10014598:	429c      	cmp	r4, r3
1001459a:	d100      	bne.n	1001459e <__aeabi_dadd+0x1de>
1001459c:	e13d      	b.n	1001481a <__aeabi_dadd+0x45a>
1001459e:	2001      	movs	r0, #1
100145a0:	4a6f      	ldr	r2, [pc, #444]	; (10014760 <__aeabi_dadd+0x3a0>)
100145a2:	086b      	lsrs	r3, r5, #1
100145a4:	400a      	ands	r2, r1
100145a6:	4028      	ands	r0, r5
100145a8:	4318      	orrs	r0, r3
100145aa:	07d5      	lsls	r5, r2, #31
100145ac:	4305      	orrs	r5, r0
100145ae:	0851      	lsrs	r1, r2, #1
100145b0:	e72f      	b.n	10014412 <__aeabi_dadd+0x52>
100145b2:	002b      	movs	r3, r5
100145b4:	430b      	orrs	r3, r1
100145b6:	d100      	bne.n	100145ba <__aeabi_dadd+0x1fa>
100145b8:	e1cb      	b.n	10014952 <__aeabi_dadd+0x592>
100145ba:	2380      	movs	r3, #128	; 0x80
100145bc:	031b      	lsls	r3, r3, #12
100145be:	430b      	orrs	r3, r1
100145c0:	031a      	lsls	r2, r3, #12
100145c2:	0b12      	lsrs	r2, r2, #12
100145c4:	e744      	b.n	10014450 <__aeabi_dadd+0x90>
100145c6:	3e01      	subs	r6, #1
100145c8:	2e00      	cmp	r6, #0
100145ca:	d16d      	bne.n	100146a8 <__aeabi_dadd+0x2e8>
100145cc:	1aae      	subs	r6, r5, r2
100145ce:	42b5      	cmp	r5, r6
100145d0:	419b      	sbcs	r3, r3
100145d2:	1a09      	subs	r1, r1, r0
100145d4:	425b      	negs	r3, r3
100145d6:	1ac9      	subs	r1, r1, r3
100145d8:	0035      	movs	r5, r6
100145da:	e775      	b.n	100144c8 <__aeabi_dadd+0x108>
100145dc:	0007      	movs	r7, r0
100145de:	4317      	orrs	r7, r2
100145e0:	d100      	bne.n	100145e4 <__aeabi_dadd+0x224>
100145e2:	e716      	b.n	10014412 <__aeabi_dadd+0x52>
100145e4:	2301      	movs	r3, #1
100145e6:	425b      	negs	r3, r3
100145e8:	469c      	mov	ip, r3
100145ea:	44e3      	add	fp, ip
100145ec:	465b      	mov	r3, fp
100145ee:	2b00      	cmp	r3, #0
100145f0:	d000      	beq.n	100145f4 <__aeabi_dadd+0x234>
100145f2:	e0e0      	b.n	100147b6 <__aeabi_dadd+0x3f6>
100145f4:	18aa      	adds	r2, r5, r2
100145f6:	42aa      	cmp	r2, r5
100145f8:	419b      	sbcs	r3, r3
100145fa:	1809      	adds	r1, r1, r0
100145fc:	425b      	negs	r3, r3
100145fe:	1859      	adds	r1, r3, r1
10014600:	0015      	movs	r5, r2
10014602:	e7c5      	b.n	10014590 <__aeabi_dadd+0x1d0>
10014604:	2e00      	cmp	r6, #0
10014606:	d175      	bne.n	100146f4 <__aeabi_dadd+0x334>
10014608:	1c66      	adds	r6, r4, #1
1001460a:	0576      	lsls	r6, r6, #21
1001460c:	0d76      	lsrs	r6, r6, #21
1001460e:	2e01      	cmp	r6, #1
10014610:	dc00      	bgt.n	10014614 <__aeabi_dadd+0x254>
10014612:	e0f3      	b.n	100147fc <__aeabi_dadd+0x43c>
10014614:	1aae      	subs	r6, r5, r2
10014616:	46b0      	mov	r8, r6
10014618:	4545      	cmp	r5, r8
1001461a:	41bf      	sbcs	r7, r7
1001461c:	1a0e      	subs	r6, r1, r0
1001461e:	427f      	negs	r7, r7
10014620:	1bf6      	subs	r6, r6, r7
10014622:	0237      	lsls	r7, r6, #8
10014624:	d400      	bmi.n	10014628 <__aeabi_dadd+0x268>
10014626:	e08f      	b.n	10014748 <__aeabi_dadd+0x388>
10014628:	1b55      	subs	r5, r2, r5
1001462a:	42aa      	cmp	r2, r5
1001462c:	41b6      	sbcs	r6, r6
1001462e:	1a41      	subs	r1, r0, r1
10014630:	4276      	negs	r6, r6
10014632:	1b8e      	subs	r6, r1, r6
10014634:	469a      	mov	sl, r3
10014636:	e74b      	b.n	100144d0 <__aeabi_dadd+0x110>
10014638:	4656      	mov	r6, sl
1001463a:	2200      	movs	r2, #0
1001463c:	2500      	movs	r5, #0
1001463e:	e707      	b.n	10014450 <__aeabi_dadd+0x90>
10014640:	0028      	movs	r0, r5
10014642:	f001 fd8b 	bl	1001615c <__clzsi2>
10014646:	3020      	adds	r0, #32
10014648:	0003      	movs	r3, r0
1001464a:	3b08      	subs	r3, #8
1001464c:	2b1f      	cmp	r3, #31
1001464e:	dc00      	bgt.n	10014652 <__aeabi_dadd+0x292>
10014650:	e749      	b.n	100144e6 <__aeabi_dadd+0x126>
10014652:	002a      	movs	r2, r5
10014654:	3828      	subs	r0, #40	; 0x28
10014656:	4082      	lsls	r2, r0
10014658:	2500      	movs	r5, #0
1001465a:	429c      	cmp	r4, r3
1001465c:	dc00      	bgt.n	10014660 <__aeabi_dadd+0x2a0>
1001465e:	e74d      	b.n	100144fc <__aeabi_dadd+0x13c>
10014660:	493f      	ldr	r1, [pc, #252]	; (10014760 <__aeabi_dadd+0x3a0>)
10014662:	1ae4      	subs	r4, r4, r3
10014664:	4011      	ands	r1, r2
10014666:	e6d4      	b.n	10014412 <__aeabi_dadd+0x52>
10014668:	4302      	orrs	r2, r0
1001466a:	1e50      	subs	r0, r2, #1
1001466c:	4182      	sbcs	r2, r0
1001466e:	b2d3      	uxtb	r3, r2
10014670:	2200      	movs	r2, #0
10014672:	e722      	b.n	100144ba <__aeabi_dadd+0xfa>
10014674:	2b00      	cmp	r3, #0
10014676:	d000      	beq.n	1001467a <__aeabi_dadd+0x2ba>
10014678:	e0f3      	b.n	10014862 <__aeabi_dadd+0x4a2>
1001467a:	1c63      	adds	r3, r4, #1
1001467c:	469c      	mov	ip, r3
1001467e:	055b      	lsls	r3, r3, #21
10014680:	0d5b      	lsrs	r3, r3, #21
10014682:	2b01      	cmp	r3, #1
10014684:	dc00      	bgt.n	10014688 <__aeabi_dadd+0x2c8>
10014686:	e09f      	b.n	100147c8 <__aeabi_dadd+0x408>
10014688:	4b34      	ldr	r3, [pc, #208]	; (1001475c <__aeabi_dadd+0x39c>)
1001468a:	459c      	cmp	ip, r3
1001468c:	d100      	bne.n	10014690 <__aeabi_dadd+0x2d0>
1001468e:	e0c3      	b.n	10014818 <__aeabi_dadd+0x458>
10014690:	18aa      	adds	r2, r5, r2
10014692:	1809      	adds	r1, r1, r0
10014694:	42aa      	cmp	r2, r5
10014696:	4180      	sbcs	r0, r0
10014698:	4240      	negs	r0, r0
1001469a:	1841      	adds	r1, r0, r1
1001469c:	07cd      	lsls	r5, r1, #31
1001469e:	0852      	lsrs	r2, r2, #1
100146a0:	4315      	orrs	r5, r2
100146a2:	0849      	lsrs	r1, r1, #1
100146a4:	4664      	mov	r4, ip
100146a6:	e6b4      	b.n	10014412 <__aeabi_dadd+0x52>
100146a8:	4b2c      	ldr	r3, [pc, #176]	; (1001475c <__aeabi_dadd+0x39c>)
100146aa:	429c      	cmp	r4, r3
100146ac:	d000      	beq.n	100146b0 <__aeabi_dadd+0x2f0>
100146ae:	e6ec      	b.n	1001448a <__aeabi_dadd+0xca>
100146b0:	e6af      	b.n	10014412 <__aeabi_dadd+0x52>
100146b2:	0011      	movs	r1, r2
100146b4:	3c1f      	subs	r4, #31
100146b6:	40e1      	lsrs	r1, r4
100146b8:	000c      	movs	r4, r1
100146ba:	2b20      	cmp	r3, #32
100146bc:	d100      	bne.n	100146c0 <__aeabi_dadd+0x300>
100146be:	e07f      	b.n	100147c0 <__aeabi_dadd+0x400>
100146c0:	2140      	movs	r1, #64	; 0x40
100146c2:	1acb      	subs	r3, r1, r3
100146c4:	409a      	lsls	r2, r3
100146c6:	4315      	orrs	r5, r2
100146c8:	1e6a      	subs	r2, r5, #1
100146ca:	4195      	sbcs	r5, r2
100146cc:	2100      	movs	r1, #0
100146ce:	4325      	orrs	r5, r4
100146d0:	2400      	movs	r4, #0
100146d2:	e72d      	b.n	10014530 <__aeabi_dadd+0x170>
100146d4:	0033      	movs	r3, r6
100146d6:	0007      	movs	r7, r0
100146d8:	3b20      	subs	r3, #32
100146da:	40df      	lsrs	r7, r3
100146dc:	003b      	movs	r3, r7
100146de:	2e20      	cmp	r6, #32
100146e0:	d070      	beq.n	100147c4 <__aeabi_dadd+0x404>
100146e2:	2740      	movs	r7, #64	; 0x40
100146e4:	1bbe      	subs	r6, r7, r6
100146e6:	40b0      	lsls	r0, r6
100146e8:	4302      	orrs	r2, r0
100146ea:	1e50      	subs	r0, r2, #1
100146ec:	4182      	sbcs	r2, r0
100146ee:	4313      	orrs	r3, r2
100146f0:	2200      	movs	r2, #0
100146f2:	e6e2      	b.n	100144ba <__aeabi_dadd+0xfa>
100146f4:	2c00      	cmp	r4, #0
100146f6:	d04f      	beq.n	10014798 <__aeabi_dadd+0x3d8>
100146f8:	4c18      	ldr	r4, [pc, #96]	; (1001475c <__aeabi_dadd+0x39c>)
100146fa:	45a4      	cmp	ip, r4
100146fc:	d100      	bne.n	10014700 <__aeabi_dadd+0x340>
100146fe:	e0ab      	b.n	10014858 <__aeabi_dadd+0x498>
10014700:	2480      	movs	r4, #128	; 0x80
10014702:	0424      	lsls	r4, r4, #16
10014704:	4276      	negs	r6, r6
10014706:	4321      	orrs	r1, r4
10014708:	2e38      	cmp	r6, #56	; 0x38
1001470a:	dd00      	ble.n	1001470e <__aeabi_dadd+0x34e>
1001470c:	e0df      	b.n	100148ce <__aeabi_dadd+0x50e>
1001470e:	2e1f      	cmp	r6, #31
10014710:	dd00      	ble.n	10014714 <__aeabi_dadd+0x354>
10014712:	e143      	b.n	1001499c <__aeabi_dadd+0x5dc>
10014714:	2720      	movs	r7, #32
10014716:	1bbc      	subs	r4, r7, r6
10014718:	46a1      	mov	r9, r4
1001471a:	000c      	movs	r4, r1
1001471c:	464f      	mov	r7, r9
1001471e:	40bc      	lsls	r4, r7
10014720:	46a0      	mov	r8, r4
10014722:	002c      	movs	r4, r5
10014724:	4647      	mov	r7, r8
10014726:	40f4      	lsrs	r4, r6
10014728:	433c      	orrs	r4, r7
1001472a:	464f      	mov	r7, r9
1001472c:	40bd      	lsls	r5, r7
1001472e:	1e6f      	subs	r7, r5, #1
10014730:	41bd      	sbcs	r5, r7
10014732:	40f1      	lsrs	r1, r6
10014734:	432c      	orrs	r4, r5
10014736:	1b15      	subs	r5, r2, r4
10014738:	42aa      	cmp	r2, r5
1001473a:	4192      	sbcs	r2, r2
1001473c:	1a41      	subs	r1, r0, r1
1001473e:	4252      	negs	r2, r2
10014740:	1a89      	subs	r1, r1, r2
10014742:	4664      	mov	r4, ip
10014744:	469a      	mov	sl, r3
10014746:	e6bf      	b.n	100144c8 <__aeabi_dadd+0x108>
10014748:	4641      	mov	r1, r8
1001474a:	4645      	mov	r5, r8
1001474c:	4331      	orrs	r1, r6
1001474e:	d000      	beq.n	10014752 <__aeabi_dadd+0x392>
10014750:	e6be      	b.n	100144d0 <__aeabi_dadd+0x110>
10014752:	2600      	movs	r6, #0
10014754:	2400      	movs	r4, #0
10014756:	2500      	movs	r5, #0
10014758:	e6f2      	b.n	10014540 <__aeabi_dadd+0x180>
1001475a:	46c0      	nop			; (mov r8, r8)
1001475c:	000007ff 	.word	0x000007ff
10014760:	ff7fffff 	.word	0xff7fffff
10014764:	800fffff 	.word	0x800fffff
10014768:	2b1f      	cmp	r3, #31
1001476a:	dc59      	bgt.n	10014820 <__aeabi_dadd+0x460>
1001476c:	2720      	movs	r7, #32
1001476e:	1aff      	subs	r7, r7, r3
10014770:	46bc      	mov	ip, r7
10014772:	0007      	movs	r7, r0
10014774:	4663      	mov	r3, ip
10014776:	409f      	lsls	r7, r3
10014778:	465b      	mov	r3, fp
1001477a:	46b9      	mov	r9, r7
1001477c:	0017      	movs	r7, r2
1001477e:	40df      	lsrs	r7, r3
10014780:	46b8      	mov	r8, r7
10014782:	464f      	mov	r7, r9
10014784:	4643      	mov	r3, r8
10014786:	431f      	orrs	r7, r3
10014788:	4663      	mov	r3, ip
1001478a:	409a      	lsls	r2, r3
1001478c:	1e53      	subs	r3, r2, #1
1001478e:	419a      	sbcs	r2, r3
10014790:	465b      	mov	r3, fp
10014792:	433a      	orrs	r2, r7
10014794:	40d8      	lsrs	r0, r3
10014796:	e6f4      	b.n	10014582 <__aeabi_dadd+0x1c2>
10014798:	000c      	movs	r4, r1
1001479a:	432c      	orrs	r4, r5
1001479c:	d05c      	beq.n	10014858 <__aeabi_dadd+0x498>
1001479e:	43f6      	mvns	r6, r6
100147a0:	2e00      	cmp	r6, #0
100147a2:	d155      	bne.n	10014850 <__aeabi_dadd+0x490>
100147a4:	1b55      	subs	r5, r2, r5
100147a6:	42aa      	cmp	r2, r5
100147a8:	41a4      	sbcs	r4, r4
100147aa:	1a41      	subs	r1, r0, r1
100147ac:	4264      	negs	r4, r4
100147ae:	1b09      	subs	r1, r1, r4
100147b0:	469a      	mov	sl, r3
100147b2:	4664      	mov	r4, ip
100147b4:	e688      	b.n	100144c8 <__aeabi_dadd+0x108>
100147b6:	4f96      	ldr	r7, [pc, #600]	; (10014a10 <__aeabi_dadd+0x650>)
100147b8:	42bc      	cmp	r4, r7
100147ba:	d000      	beq.n	100147be <__aeabi_dadd+0x3fe>
100147bc:	e6d8      	b.n	10014570 <__aeabi_dadd+0x1b0>
100147be:	e628      	b.n	10014412 <__aeabi_dadd+0x52>
100147c0:	2200      	movs	r2, #0
100147c2:	e780      	b.n	100146c6 <__aeabi_dadd+0x306>
100147c4:	2000      	movs	r0, #0
100147c6:	e78f      	b.n	100146e8 <__aeabi_dadd+0x328>
100147c8:	000b      	movs	r3, r1
100147ca:	432b      	orrs	r3, r5
100147cc:	2c00      	cmp	r4, #0
100147ce:	d000      	beq.n	100147d2 <__aeabi_dadd+0x412>
100147d0:	e0c2      	b.n	10014958 <__aeabi_dadd+0x598>
100147d2:	2b00      	cmp	r3, #0
100147d4:	d100      	bne.n	100147d8 <__aeabi_dadd+0x418>
100147d6:	e101      	b.n	100149dc <__aeabi_dadd+0x61c>
100147d8:	0003      	movs	r3, r0
100147da:	4313      	orrs	r3, r2
100147dc:	d100      	bne.n	100147e0 <__aeabi_dadd+0x420>
100147de:	e618      	b.n	10014412 <__aeabi_dadd+0x52>
100147e0:	18ab      	adds	r3, r5, r2
100147e2:	42ab      	cmp	r3, r5
100147e4:	41b6      	sbcs	r6, r6
100147e6:	1809      	adds	r1, r1, r0
100147e8:	4276      	negs	r6, r6
100147ea:	1871      	adds	r1, r6, r1
100147ec:	020a      	lsls	r2, r1, #8
100147ee:	d400      	bmi.n	100147f2 <__aeabi_dadd+0x432>
100147f0:	e109      	b.n	10014a06 <__aeabi_dadd+0x646>
100147f2:	4a88      	ldr	r2, [pc, #544]	; (10014a14 <__aeabi_dadd+0x654>)
100147f4:	001d      	movs	r5, r3
100147f6:	4011      	ands	r1, r2
100147f8:	4664      	mov	r4, ip
100147fa:	e60a      	b.n	10014412 <__aeabi_dadd+0x52>
100147fc:	2c00      	cmp	r4, #0
100147fe:	d15b      	bne.n	100148b8 <__aeabi_dadd+0x4f8>
10014800:	000e      	movs	r6, r1
10014802:	432e      	orrs	r6, r5
10014804:	d000      	beq.n	10014808 <__aeabi_dadd+0x448>
10014806:	e08a      	b.n	1001491e <__aeabi_dadd+0x55e>
10014808:	0001      	movs	r1, r0
1001480a:	4311      	orrs	r1, r2
1001480c:	d100      	bne.n	10014810 <__aeabi_dadd+0x450>
1001480e:	e0c2      	b.n	10014996 <__aeabi_dadd+0x5d6>
10014810:	0001      	movs	r1, r0
10014812:	0015      	movs	r5, r2
10014814:	469a      	mov	sl, r3
10014816:	e5fc      	b.n	10014412 <__aeabi_dadd+0x52>
10014818:	4664      	mov	r4, ip
1001481a:	2100      	movs	r1, #0
1001481c:	2500      	movs	r5, #0
1001481e:	e68f      	b.n	10014540 <__aeabi_dadd+0x180>
10014820:	2320      	movs	r3, #32
10014822:	425b      	negs	r3, r3
10014824:	469c      	mov	ip, r3
10014826:	44dc      	add	ip, fp
10014828:	4663      	mov	r3, ip
1001482a:	0007      	movs	r7, r0
1001482c:	40df      	lsrs	r7, r3
1001482e:	465b      	mov	r3, fp
10014830:	46bc      	mov	ip, r7
10014832:	2b20      	cmp	r3, #32
10014834:	d100      	bne.n	10014838 <__aeabi_dadd+0x478>
10014836:	e0ac      	b.n	10014992 <__aeabi_dadd+0x5d2>
10014838:	2340      	movs	r3, #64	; 0x40
1001483a:	465f      	mov	r7, fp
1001483c:	1bdb      	subs	r3, r3, r7
1001483e:	4098      	lsls	r0, r3
10014840:	4302      	orrs	r2, r0
10014842:	1e50      	subs	r0, r2, #1
10014844:	4182      	sbcs	r2, r0
10014846:	4663      	mov	r3, ip
10014848:	4313      	orrs	r3, r2
1001484a:	001a      	movs	r2, r3
1001484c:	2000      	movs	r0, #0
1001484e:	e698      	b.n	10014582 <__aeabi_dadd+0x1c2>
10014850:	4c6f      	ldr	r4, [pc, #444]	; (10014a10 <__aeabi_dadd+0x650>)
10014852:	45a4      	cmp	ip, r4
10014854:	d000      	beq.n	10014858 <__aeabi_dadd+0x498>
10014856:	e757      	b.n	10014708 <__aeabi_dadd+0x348>
10014858:	0001      	movs	r1, r0
1001485a:	0015      	movs	r5, r2
1001485c:	4664      	mov	r4, ip
1001485e:	469a      	mov	sl, r3
10014860:	e5d7      	b.n	10014412 <__aeabi_dadd+0x52>
10014862:	2c00      	cmp	r4, #0
10014864:	d139      	bne.n	100148da <__aeabi_dadd+0x51a>
10014866:	000c      	movs	r4, r1
10014868:	432c      	orrs	r4, r5
1001486a:	d06e      	beq.n	1001494a <__aeabi_dadd+0x58a>
1001486c:	43db      	mvns	r3, r3
1001486e:	2b00      	cmp	r3, #0
10014870:	d01a      	beq.n	100148a8 <__aeabi_dadd+0x4e8>
10014872:	4c67      	ldr	r4, [pc, #412]	; (10014a10 <__aeabi_dadd+0x650>)
10014874:	45a4      	cmp	ip, r4
10014876:	d068      	beq.n	1001494a <__aeabi_dadd+0x58a>
10014878:	2b38      	cmp	r3, #56	; 0x38
1001487a:	dd00      	ble.n	1001487e <__aeabi_dadd+0x4be>
1001487c:	e0a4      	b.n	100149c8 <__aeabi_dadd+0x608>
1001487e:	2b1f      	cmp	r3, #31
10014880:	dd00      	ble.n	10014884 <__aeabi_dadd+0x4c4>
10014882:	e0ae      	b.n	100149e2 <__aeabi_dadd+0x622>
10014884:	2420      	movs	r4, #32
10014886:	000f      	movs	r7, r1
10014888:	1ae4      	subs	r4, r4, r3
1001488a:	40a7      	lsls	r7, r4
1001488c:	46b9      	mov	r9, r7
1001488e:	002f      	movs	r7, r5
10014890:	40df      	lsrs	r7, r3
10014892:	46b8      	mov	r8, r7
10014894:	46a3      	mov	fp, r4
10014896:	464f      	mov	r7, r9
10014898:	4644      	mov	r4, r8
1001489a:	4327      	orrs	r7, r4
1001489c:	465c      	mov	r4, fp
1001489e:	40a5      	lsls	r5, r4
100148a0:	1e6c      	subs	r4, r5, #1
100148a2:	41a5      	sbcs	r5, r4
100148a4:	40d9      	lsrs	r1, r3
100148a6:	433d      	orrs	r5, r7
100148a8:	18ad      	adds	r5, r5, r2
100148aa:	4295      	cmp	r5, r2
100148ac:	419b      	sbcs	r3, r3
100148ae:	1809      	adds	r1, r1, r0
100148b0:	425b      	negs	r3, r3
100148b2:	1859      	adds	r1, r3, r1
100148b4:	4664      	mov	r4, ip
100148b6:	e66b      	b.n	10014590 <__aeabi_dadd+0x1d0>
100148b8:	000c      	movs	r4, r1
100148ba:	432c      	orrs	r4, r5
100148bc:	d115      	bne.n	100148ea <__aeabi_dadd+0x52a>
100148be:	0001      	movs	r1, r0
100148c0:	4311      	orrs	r1, r2
100148c2:	d07b      	beq.n	100149bc <__aeabi_dadd+0x5fc>
100148c4:	0001      	movs	r1, r0
100148c6:	0015      	movs	r5, r2
100148c8:	469a      	mov	sl, r3
100148ca:	4c51      	ldr	r4, [pc, #324]	; (10014a10 <__aeabi_dadd+0x650>)
100148cc:	e5a1      	b.n	10014412 <__aeabi_dadd+0x52>
100148ce:	430d      	orrs	r5, r1
100148d0:	1e69      	subs	r1, r5, #1
100148d2:	418d      	sbcs	r5, r1
100148d4:	2100      	movs	r1, #0
100148d6:	b2ec      	uxtb	r4, r5
100148d8:	e72d      	b.n	10014736 <__aeabi_dadd+0x376>
100148da:	4c4d      	ldr	r4, [pc, #308]	; (10014a10 <__aeabi_dadd+0x650>)
100148dc:	45a4      	cmp	ip, r4
100148de:	d034      	beq.n	1001494a <__aeabi_dadd+0x58a>
100148e0:	2480      	movs	r4, #128	; 0x80
100148e2:	0424      	lsls	r4, r4, #16
100148e4:	425b      	negs	r3, r3
100148e6:	4321      	orrs	r1, r4
100148e8:	e7c6      	b.n	10014878 <__aeabi_dadd+0x4b8>
100148ea:	0004      	movs	r4, r0
100148ec:	4314      	orrs	r4, r2
100148ee:	d04e      	beq.n	1001498e <__aeabi_dadd+0x5ce>
100148f0:	08ed      	lsrs	r5, r5, #3
100148f2:	074c      	lsls	r4, r1, #29
100148f4:	432c      	orrs	r4, r5
100148f6:	2580      	movs	r5, #128	; 0x80
100148f8:	08c9      	lsrs	r1, r1, #3
100148fa:	032d      	lsls	r5, r5, #12
100148fc:	4229      	tst	r1, r5
100148fe:	d008      	beq.n	10014912 <__aeabi_dadd+0x552>
10014900:	08c6      	lsrs	r6, r0, #3
10014902:	422e      	tst	r6, r5
10014904:	d105      	bne.n	10014912 <__aeabi_dadd+0x552>
10014906:	08d2      	lsrs	r2, r2, #3
10014908:	0741      	lsls	r1, r0, #29
1001490a:	4311      	orrs	r1, r2
1001490c:	000c      	movs	r4, r1
1001490e:	469a      	mov	sl, r3
10014910:	0031      	movs	r1, r6
10014912:	0f62      	lsrs	r2, r4, #29
10014914:	00c9      	lsls	r1, r1, #3
10014916:	00e5      	lsls	r5, r4, #3
10014918:	4311      	orrs	r1, r2
1001491a:	4c3d      	ldr	r4, [pc, #244]	; (10014a10 <__aeabi_dadd+0x650>)
1001491c:	e579      	b.n	10014412 <__aeabi_dadd+0x52>
1001491e:	0006      	movs	r6, r0
10014920:	4316      	orrs	r6, r2
10014922:	d100      	bne.n	10014926 <__aeabi_dadd+0x566>
10014924:	e575      	b.n	10014412 <__aeabi_dadd+0x52>
10014926:	1aae      	subs	r6, r5, r2
10014928:	46b0      	mov	r8, r6
1001492a:	4545      	cmp	r5, r8
1001492c:	41bf      	sbcs	r7, r7
1001492e:	1a0e      	subs	r6, r1, r0
10014930:	427f      	negs	r7, r7
10014932:	1bf6      	subs	r6, r6, r7
10014934:	0237      	lsls	r7, r6, #8
10014936:	d400      	bmi.n	1001493a <__aeabi_dadd+0x57a>
10014938:	e5f4      	b.n	10014524 <__aeabi_dadd+0x164>
1001493a:	1b55      	subs	r5, r2, r5
1001493c:	42aa      	cmp	r2, r5
1001493e:	41b6      	sbcs	r6, r6
10014940:	1a41      	subs	r1, r0, r1
10014942:	4276      	negs	r6, r6
10014944:	1b89      	subs	r1, r1, r6
10014946:	469a      	mov	sl, r3
10014948:	e563      	b.n	10014412 <__aeabi_dadd+0x52>
1001494a:	0001      	movs	r1, r0
1001494c:	0015      	movs	r5, r2
1001494e:	4664      	mov	r4, ip
10014950:	e55f      	b.n	10014412 <__aeabi_dadd+0x52>
10014952:	2200      	movs	r2, #0
10014954:	2500      	movs	r5, #0
10014956:	e57b      	b.n	10014450 <__aeabi_dadd+0x90>
10014958:	2b00      	cmp	r3, #0
1001495a:	d03b      	beq.n	100149d4 <__aeabi_dadd+0x614>
1001495c:	0003      	movs	r3, r0
1001495e:	4313      	orrs	r3, r2
10014960:	d015      	beq.n	1001498e <__aeabi_dadd+0x5ce>
10014962:	08ed      	lsrs	r5, r5, #3
10014964:	074b      	lsls	r3, r1, #29
10014966:	432b      	orrs	r3, r5
10014968:	2580      	movs	r5, #128	; 0x80
1001496a:	08c9      	lsrs	r1, r1, #3
1001496c:	032d      	lsls	r5, r5, #12
1001496e:	4229      	tst	r1, r5
10014970:	d007      	beq.n	10014982 <__aeabi_dadd+0x5c2>
10014972:	08c4      	lsrs	r4, r0, #3
10014974:	422c      	tst	r4, r5
10014976:	d104      	bne.n	10014982 <__aeabi_dadd+0x5c2>
10014978:	0741      	lsls	r1, r0, #29
1001497a:	000b      	movs	r3, r1
1001497c:	0021      	movs	r1, r4
1001497e:	08d2      	lsrs	r2, r2, #3
10014980:	4313      	orrs	r3, r2
10014982:	00c9      	lsls	r1, r1, #3
10014984:	0f5a      	lsrs	r2, r3, #29
10014986:	4311      	orrs	r1, r2
10014988:	00dd      	lsls	r5, r3, #3
1001498a:	4c21      	ldr	r4, [pc, #132]	; (10014a10 <__aeabi_dadd+0x650>)
1001498c:	e541      	b.n	10014412 <__aeabi_dadd+0x52>
1001498e:	4c20      	ldr	r4, [pc, #128]	; (10014a10 <__aeabi_dadd+0x650>)
10014990:	e53f      	b.n	10014412 <__aeabi_dadd+0x52>
10014992:	2000      	movs	r0, #0
10014994:	e754      	b.n	10014840 <__aeabi_dadd+0x480>
10014996:	2600      	movs	r6, #0
10014998:	2500      	movs	r5, #0
1001499a:	e5d1      	b.n	10014540 <__aeabi_dadd+0x180>
1001499c:	0034      	movs	r4, r6
1001499e:	000f      	movs	r7, r1
100149a0:	3c20      	subs	r4, #32
100149a2:	40e7      	lsrs	r7, r4
100149a4:	003c      	movs	r4, r7
100149a6:	2e20      	cmp	r6, #32
100149a8:	d02b      	beq.n	10014a02 <__aeabi_dadd+0x642>
100149aa:	2740      	movs	r7, #64	; 0x40
100149ac:	1bbe      	subs	r6, r7, r6
100149ae:	40b1      	lsls	r1, r6
100149b0:	430d      	orrs	r5, r1
100149b2:	1e69      	subs	r1, r5, #1
100149b4:	418d      	sbcs	r5, r1
100149b6:	2100      	movs	r1, #0
100149b8:	432c      	orrs	r4, r5
100149ba:	e6bc      	b.n	10014736 <__aeabi_dadd+0x376>
100149bc:	2180      	movs	r1, #128	; 0x80
100149be:	2600      	movs	r6, #0
100149c0:	0309      	lsls	r1, r1, #12
100149c2:	4c13      	ldr	r4, [pc, #76]	; (10014a10 <__aeabi_dadd+0x650>)
100149c4:	2500      	movs	r5, #0
100149c6:	e5bb      	b.n	10014540 <__aeabi_dadd+0x180>
100149c8:	430d      	orrs	r5, r1
100149ca:	1e69      	subs	r1, r5, #1
100149cc:	418d      	sbcs	r5, r1
100149ce:	2100      	movs	r1, #0
100149d0:	b2ed      	uxtb	r5, r5
100149d2:	e769      	b.n	100148a8 <__aeabi_dadd+0x4e8>
100149d4:	0001      	movs	r1, r0
100149d6:	0015      	movs	r5, r2
100149d8:	4c0d      	ldr	r4, [pc, #52]	; (10014a10 <__aeabi_dadd+0x650>)
100149da:	e51a      	b.n	10014412 <__aeabi_dadd+0x52>
100149dc:	0001      	movs	r1, r0
100149de:	0015      	movs	r5, r2
100149e0:	e517      	b.n	10014412 <__aeabi_dadd+0x52>
100149e2:	001c      	movs	r4, r3
100149e4:	000f      	movs	r7, r1
100149e6:	3c20      	subs	r4, #32
100149e8:	40e7      	lsrs	r7, r4
100149ea:	003c      	movs	r4, r7
100149ec:	2b20      	cmp	r3, #32
100149ee:	d00c      	beq.n	10014a0a <__aeabi_dadd+0x64a>
100149f0:	2740      	movs	r7, #64	; 0x40
100149f2:	1afb      	subs	r3, r7, r3
100149f4:	4099      	lsls	r1, r3
100149f6:	430d      	orrs	r5, r1
100149f8:	1e69      	subs	r1, r5, #1
100149fa:	418d      	sbcs	r5, r1
100149fc:	2100      	movs	r1, #0
100149fe:	4325      	orrs	r5, r4
10014a00:	e752      	b.n	100148a8 <__aeabi_dadd+0x4e8>
10014a02:	2100      	movs	r1, #0
10014a04:	e7d4      	b.n	100149b0 <__aeabi_dadd+0x5f0>
10014a06:	001d      	movs	r5, r3
10014a08:	e592      	b.n	10014530 <__aeabi_dadd+0x170>
10014a0a:	2100      	movs	r1, #0
10014a0c:	e7f3      	b.n	100149f6 <__aeabi_dadd+0x636>
10014a0e:	46c0      	nop			; (mov r8, r8)
10014a10:	000007ff 	.word	0x000007ff
10014a14:	ff7fffff 	.word	0xff7fffff

10014a18 <__aeabi_ddiv>:
10014a18:	b5f0      	push	{r4, r5, r6, r7, lr}
10014a1a:	4656      	mov	r6, sl
10014a1c:	464d      	mov	r5, r9
10014a1e:	4644      	mov	r4, r8
10014a20:	465f      	mov	r7, fp
10014a22:	b4f0      	push	{r4, r5, r6, r7}
10014a24:	001d      	movs	r5, r3
10014a26:	030e      	lsls	r6, r1, #12
10014a28:	004c      	lsls	r4, r1, #1
10014a2a:	0fcb      	lsrs	r3, r1, #31
10014a2c:	b087      	sub	sp, #28
10014a2e:	0007      	movs	r7, r0
10014a30:	4692      	mov	sl, r2
10014a32:	4681      	mov	r9, r0
10014a34:	0b36      	lsrs	r6, r6, #12
10014a36:	0d64      	lsrs	r4, r4, #21
10014a38:	4698      	mov	r8, r3
10014a3a:	d06a      	beq.n	10014b12 <__aeabi_ddiv+0xfa>
10014a3c:	4b6d      	ldr	r3, [pc, #436]	; (10014bf4 <__aeabi_ddiv+0x1dc>)
10014a3e:	429c      	cmp	r4, r3
10014a40:	d035      	beq.n	10014aae <__aeabi_ddiv+0x96>
10014a42:	2280      	movs	r2, #128	; 0x80
10014a44:	0f43      	lsrs	r3, r0, #29
10014a46:	0412      	lsls	r2, r2, #16
10014a48:	4313      	orrs	r3, r2
10014a4a:	00f6      	lsls	r6, r6, #3
10014a4c:	431e      	orrs	r6, r3
10014a4e:	00c3      	lsls	r3, r0, #3
10014a50:	4699      	mov	r9, r3
10014a52:	4b69      	ldr	r3, [pc, #420]	; (10014bf8 <__aeabi_ddiv+0x1e0>)
10014a54:	2700      	movs	r7, #0
10014a56:	469c      	mov	ip, r3
10014a58:	2300      	movs	r3, #0
10014a5a:	4464      	add	r4, ip
10014a5c:	9302      	str	r3, [sp, #8]
10014a5e:	032b      	lsls	r3, r5, #12
10014a60:	0068      	lsls	r0, r5, #1
10014a62:	0b1b      	lsrs	r3, r3, #12
10014a64:	0fed      	lsrs	r5, r5, #31
10014a66:	4651      	mov	r1, sl
10014a68:	469b      	mov	fp, r3
10014a6a:	0d40      	lsrs	r0, r0, #21
10014a6c:	9500      	str	r5, [sp, #0]
10014a6e:	d100      	bne.n	10014a72 <__aeabi_ddiv+0x5a>
10014a70:	e078      	b.n	10014b64 <__aeabi_ddiv+0x14c>
10014a72:	4b60      	ldr	r3, [pc, #384]	; (10014bf4 <__aeabi_ddiv+0x1dc>)
10014a74:	4298      	cmp	r0, r3
10014a76:	d06c      	beq.n	10014b52 <__aeabi_ddiv+0x13a>
10014a78:	465b      	mov	r3, fp
10014a7a:	00da      	lsls	r2, r3, #3
10014a7c:	0f4b      	lsrs	r3, r1, #29
10014a7e:	2180      	movs	r1, #128	; 0x80
10014a80:	0409      	lsls	r1, r1, #16
10014a82:	430b      	orrs	r3, r1
10014a84:	4313      	orrs	r3, r2
10014a86:	469b      	mov	fp, r3
10014a88:	4653      	mov	r3, sl
10014a8a:	00d9      	lsls	r1, r3, #3
10014a8c:	4b5a      	ldr	r3, [pc, #360]	; (10014bf8 <__aeabi_ddiv+0x1e0>)
10014a8e:	469c      	mov	ip, r3
10014a90:	2300      	movs	r3, #0
10014a92:	4460      	add	r0, ip
10014a94:	4642      	mov	r2, r8
10014a96:	1a20      	subs	r0, r4, r0
10014a98:	406a      	eors	r2, r5
10014a9a:	4692      	mov	sl, r2
10014a9c:	9001      	str	r0, [sp, #4]
10014a9e:	431f      	orrs	r7, r3
10014aa0:	2f0f      	cmp	r7, #15
10014aa2:	d900      	bls.n	10014aa6 <__aeabi_ddiv+0x8e>
10014aa4:	e0b0      	b.n	10014c08 <__aeabi_ddiv+0x1f0>
10014aa6:	4855      	ldr	r0, [pc, #340]	; (10014bfc <__aeabi_ddiv+0x1e4>)
10014aa8:	00bf      	lsls	r7, r7, #2
10014aaa:	59c0      	ldr	r0, [r0, r7]
10014aac:	4687      	mov	pc, r0
10014aae:	4337      	orrs	r7, r6
10014ab0:	d000      	beq.n	10014ab4 <__aeabi_ddiv+0x9c>
10014ab2:	e088      	b.n	10014bc6 <__aeabi_ddiv+0x1ae>
10014ab4:	2300      	movs	r3, #0
10014ab6:	4699      	mov	r9, r3
10014ab8:	3302      	adds	r3, #2
10014aba:	2708      	movs	r7, #8
10014abc:	2600      	movs	r6, #0
10014abe:	9302      	str	r3, [sp, #8]
10014ac0:	e7cd      	b.n	10014a5e <__aeabi_ddiv+0x46>
10014ac2:	4643      	mov	r3, r8
10014ac4:	46b3      	mov	fp, r6
10014ac6:	4649      	mov	r1, r9
10014ac8:	9300      	str	r3, [sp, #0]
10014aca:	9b02      	ldr	r3, [sp, #8]
10014acc:	9a00      	ldr	r2, [sp, #0]
10014ace:	4692      	mov	sl, r2
10014ad0:	2b02      	cmp	r3, #2
10014ad2:	d000      	beq.n	10014ad6 <__aeabi_ddiv+0xbe>
10014ad4:	e1bf      	b.n	10014e56 <__aeabi_ddiv+0x43e>
10014ad6:	2100      	movs	r1, #0
10014ad8:	4653      	mov	r3, sl
10014ada:	2201      	movs	r2, #1
10014adc:	2600      	movs	r6, #0
10014ade:	4689      	mov	r9, r1
10014ae0:	401a      	ands	r2, r3
10014ae2:	4b44      	ldr	r3, [pc, #272]	; (10014bf4 <__aeabi_ddiv+0x1dc>)
10014ae4:	2100      	movs	r1, #0
10014ae6:	0336      	lsls	r6, r6, #12
10014ae8:	0d0c      	lsrs	r4, r1, #20
10014aea:	0524      	lsls	r4, r4, #20
10014aec:	0b36      	lsrs	r6, r6, #12
10014aee:	4326      	orrs	r6, r4
10014af0:	4c43      	ldr	r4, [pc, #268]	; (10014c00 <__aeabi_ddiv+0x1e8>)
10014af2:	051b      	lsls	r3, r3, #20
10014af4:	4026      	ands	r6, r4
10014af6:	431e      	orrs	r6, r3
10014af8:	0076      	lsls	r6, r6, #1
10014afa:	07d2      	lsls	r2, r2, #31
10014afc:	0876      	lsrs	r6, r6, #1
10014afe:	4316      	orrs	r6, r2
10014b00:	4648      	mov	r0, r9
10014b02:	0031      	movs	r1, r6
10014b04:	b007      	add	sp, #28
10014b06:	bc3c      	pop	{r2, r3, r4, r5}
10014b08:	4690      	mov	r8, r2
10014b0a:	4699      	mov	r9, r3
10014b0c:	46a2      	mov	sl, r4
10014b0e:	46ab      	mov	fp, r5
10014b10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014b12:	0033      	movs	r3, r6
10014b14:	4303      	orrs	r3, r0
10014b16:	d04f      	beq.n	10014bb8 <__aeabi_ddiv+0x1a0>
10014b18:	2e00      	cmp	r6, #0
10014b1a:	d100      	bne.n	10014b1e <__aeabi_ddiv+0x106>
10014b1c:	e1bc      	b.n	10014e98 <__aeabi_ddiv+0x480>
10014b1e:	0030      	movs	r0, r6
10014b20:	f001 fb1c 	bl	1001615c <__clzsi2>
10014b24:	0003      	movs	r3, r0
10014b26:	3b0b      	subs	r3, #11
10014b28:	2b1c      	cmp	r3, #28
10014b2a:	dd00      	ble.n	10014b2e <__aeabi_ddiv+0x116>
10014b2c:	e1ad      	b.n	10014e8a <__aeabi_ddiv+0x472>
10014b2e:	221d      	movs	r2, #29
10014b30:	0001      	movs	r1, r0
10014b32:	1ad3      	subs	r3, r2, r3
10014b34:	3908      	subs	r1, #8
10014b36:	003a      	movs	r2, r7
10014b38:	408f      	lsls	r7, r1
10014b3a:	408e      	lsls	r6, r1
10014b3c:	40da      	lsrs	r2, r3
10014b3e:	46b9      	mov	r9, r7
10014b40:	4316      	orrs	r6, r2
10014b42:	4b30      	ldr	r3, [pc, #192]	; (10014c04 <__aeabi_ddiv+0x1ec>)
10014b44:	2700      	movs	r7, #0
10014b46:	469c      	mov	ip, r3
10014b48:	2300      	movs	r3, #0
10014b4a:	4460      	add	r0, ip
10014b4c:	4244      	negs	r4, r0
10014b4e:	9302      	str	r3, [sp, #8]
10014b50:	e785      	b.n	10014a5e <__aeabi_ddiv+0x46>
10014b52:	4653      	mov	r3, sl
10014b54:	465a      	mov	r2, fp
10014b56:	4313      	orrs	r3, r2
10014b58:	d12c      	bne.n	10014bb4 <__aeabi_ddiv+0x19c>
10014b5a:	2300      	movs	r3, #0
10014b5c:	2100      	movs	r1, #0
10014b5e:	469b      	mov	fp, r3
10014b60:	3302      	adds	r3, #2
10014b62:	e797      	b.n	10014a94 <__aeabi_ddiv+0x7c>
10014b64:	430b      	orrs	r3, r1
10014b66:	d020      	beq.n	10014baa <__aeabi_ddiv+0x192>
10014b68:	465b      	mov	r3, fp
10014b6a:	2b00      	cmp	r3, #0
10014b6c:	d100      	bne.n	10014b70 <__aeabi_ddiv+0x158>
10014b6e:	e19e      	b.n	10014eae <__aeabi_ddiv+0x496>
10014b70:	4658      	mov	r0, fp
10014b72:	f001 faf3 	bl	1001615c <__clzsi2>
10014b76:	0003      	movs	r3, r0
10014b78:	3b0b      	subs	r3, #11
10014b7a:	2b1c      	cmp	r3, #28
10014b7c:	dd00      	ble.n	10014b80 <__aeabi_ddiv+0x168>
10014b7e:	e18f      	b.n	10014ea0 <__aeabi_ddiv+0x488>
10014b80:	0002      	movs	r2, r0
10014b82:	4659      	mov	r1, fp
10014b84:	3a08      	subs	r2, #8
10014b86:	4091      	lsls	r1, r2
10014b88:	468b      	mov	fp, r1
10014b8a:	211d      	movs	r1, #29
10014b8c:	1acb      	subs	r3, r1, r3
10014b8e:	4651      	mov	r1, sl
10014b90:	40d9      	lsrs	r1, r3
10014b92:	000b      	movs	r3, r1
10014b94:	4659      	mov	r1, fp
10014b96:	430b      	orrs	r3, r1
10014b98:	4651      	mov	r1, sl
10014b9a:	469b      	mov	fp, r3
10014b9c:	4091      	lsls	r1, r2
10014b9e:	4b19      	ldr	r3, [pc, #100]	; (10014c04 <__aeabi_ddiv+0x1ec>)
10014ba0:	469c      	mov	ip, r3
10014ba2:	4460      	add	r0, ip
10014ba4:	4240      	negs	r0, r0
10014ba6:	2300      	movs	r3, #0
10014ba8:	e774      	b.n	10014a94 <__aeabi_ddiv+0x7c>
10014baa:	2300      	movs	r3, #0
10014bac:	2100      	movs	r1, #0
10014bae:	469b      	mov	fp, r3
10014bb0:	3301      	adds	r3, #1
10014bb2:	e76f      	b.n	10014a94 <__aeabi_ddiv+0x7c>
10014bb4:	2303      	movs	r3, #3
10014bb6:	e76d      	b.n	10014a94 <__aeabi_ddiv+0x7c>
10014bb8:	2300      	movs	r3, #0
10014bba:	4699      	mov	r9, r3
10014bbc:	3301      	adds	r3, #1
10014bbe:	2704      	movs	r7, #4
10014bc0:	2600      	movs	r6, #0
10014bc2:	9302      	str	r3, [sp, #8]
10014bc4:	e74b      	b.n	10014a5e <__aeabi_ddiv+0x46>
10014bc6:	2303      	movs	r3, #3
10014bc8:	270c      	movs	r7, #12
10014bca:	9302      	str	r3, [sp, #8]
10014bcc:	e747      	b.n	10014a5e <__aeabi_ddiv+0x46>
10014bce:	2201      	movs	r2, #1
10014bd0:	1ad5      	subs	r5, r2, r3
10014bd2:	2d38      	cmp	r5, #56	; 0x38
10014bd4:	dc00      	bgt.n	10014bd8 <__aeabi_ddiv+0x1c0>
10014bd6:	e1b0      	b.n	10014f3a <__aeabi_ddiv+0x522>
10014bd8:	4653      	mov	r3, sl
10014bda:	401a      	ands	r2, r3
10014bdc:	2100      	movs	r1, #0
10014bde:	2300      	movs	r3, #0
10014be0:	2600      	movs	r6, #0
10014be2:	4689      	mov	r9, r1
10014be4:	e77e      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014be6:	2300      	movs	r3, #0
10014be8:	2680      	movs	r6, #128	; 0x80
10014bea:	4699      	mov	r9, r3
10014bec:	2200      	movs	r2, #0
10014bee:	0336      	lsls	r6, r6, #12
10014bf0:	4b00      	ldr	r3, [pc, #0]	; (10014bf4 <__aeabi_ddiv+0x1dc>)
10014bf2:	e777      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014bf4:	000007ff 	.word	0x000007ff
10014bf8:	fffffc01 	.word	0xfffffc01
10014bfc:	10018520 	.word	0x10018520
10014c00:	800fffff 	.word	0x800fffff
10014c04:	000003f3 	.word	0x000003f3
10014c08:	455e      	cmp	r6, fp
10014c0a:	d900      	bls.n	10014c0e <__aeabi_ddiv+0x1f6>
10014c0c:	e172      	b.n	10014ef4 <__aeabi_ddiv+0x4dc>
10014c0e:	d100      	bne.n	10014c12 <__aeabi_ddiv+0x1fa>
10014c10:	e16d      	b.n	10014eee <__aeabi_ddiv+0x4d6>
10014c12:	9b01      	ldr	r3, [sp, #4]
10014c14:	464d      	mov	r5, r9
10014c16:	3b01      	subs	r3, #1
10014c18:	9301      	str	r3, [sp, #4]
10014c1a:	2300      	movs	r3, #0
10014c1c:	0034      	movs	r4, r6
10014c1e:	9302      	str	r3, [sp, #8]
10014c20:	465b      	mov	r3, fp
10014c22:	021e      	lsls	r6, r3, #8
10014c24:	0e0b      	lsrs	r3, r1, #24
10014c26:	431e      	orrs	r6, r3
10014c28:	020b      	lsls	r3, r1, #8
10014c2a:	9303      	str	r3, [sp, #12]
10014c2c:	0c33      	lsrs	r3, r6, #16
10014c2e:	4699      	mov	r9, r3
10014c30:	0433      	lsls	r3, r6, #16
10014c32:	0c1b      	lsrs	r3, r3, #16
10014c34:	4649      	mov	r1, r9
10014c36:	0020      	movs	r0, r4
10014c38:	9300      	str	r3, [sp, #0]
10014c3a:	f7fe fad7 	bl	100131ec <__aeabi_uidiv>
10014c3e:	9b00      	ldr	r3, [sp, #0]
10014c40:	0037      	movs	r7, r6
10014c42:	4343      	muls	r3, r0
10014c44:	0006      	movs	r6, r0
10014c46:	4649      	mov	r1, r9
10014c48:	0020      	movs	r0, r4
10014c4a:	4698      	mov	r8, r3
10014c4c:	f7fe fb54 	bl	100132f8 <__aeabi_uidivmod>
10014c50:	0c2c      	lsrs	r4, r5, #16
10014c52:	0409      	lsls	r1, r1, #16
10014c54:	430c      	orrs	r4, r1
10014c56:	45a0      	cmp	r8, r4
10014c58:	d909      	bls.n	10014c6e <__aeabi_ddiv+0x256>
10014c5a:	19e4      	adds	r4, r4, r7
10014c5c:	1e73      	subs	r3, r6, #1
10014c5e:	42a7      	cmp	r7, r4
10014c60:	d900      	bls.n	10014c64 <__aeabi_ddiv+0x24c>
10014c62:	e15c      	b.n	10014f1e <__aeabi_ddiv+0x506>
10014c64:	45a0      	cmp	r8, r4
10014c66:	d800      	bhi.n	10014c6a <__aeabi_ddiv+0x252>
10014c68:	e159      	b.n	10014f1e <__aeabi_ddiv+0x506>
10014c6a:	3e02      	subs	r6, #2
10014c6c:	19e4      	adds	r4, r4, r7
10014c6e:	4643      	mov	r3, r8
10014c70:	1ae4      	subs	r4, r4, r3
10014c72:	4649      	mov	r1, r9
10014c74:	0020      	movs	r0, r4
10014c76:	f7fe fab9 	bl	100131ec <__aeabi_uidiv>
10014c7a:	0003      	movs	r3, r0
10014c7c:	9a00      	ldr	r2, [sp, #0]
10014c7e:	4680      	mov	r8, r0
10014c80:	4353      	muls	r3, r2
10014c82:	4649      	mov	r1, r9
10014c84:	0020      	movs	r0, r4
10014c86:	469b      	mov	fp, r3
10014c88:	f7fe fb36 	bl	100132f8 <__aeabi_uidivmod>
10014c8c:	042a      	lsls	r2, r5, #16
10014c8e:	0409      	lsls	r1, r1, #16
10014c90:	0c12      	lsrs	r2, r2, #16
10014c92:	430a      	orrs	r2, r1
10014c94:	4593      	cmp	fp, r2
10014c96:	d90d      	bls.n	10014cb4 <__aeabi_ddiv+0x29c>
10014c98:	4643      	mov	r3, r8
10014c9a:	19d2      	adds	r2, r2, r7
10014c9c:	3b01      	subs	r3, #1
10014c9e:	4297      	cmp	r7, r2
10014ca0:	d900      	bls.n	10014ca4 <__aeabi_ddiv+0x28c>
10014ca2:	e13a      	b.n	10014f1a <__aeabi_ddiv+0x502>
10014ca4:	4593      	cmp	fp, r2
10014ca6:	d800      	bhi.n	10014caa <__aeabi_ddiv+0x292>
10014ca8:	e137      	b.n	10014f1a <__aeabi_ddiv+0x502>
10014caa:	2302      	movs	r3, #2
10014cac:	425b      	negs	r3, r3
10014cae:	469c      	mov	ip, r3
10014cb0:	19d2      	adds	r2, r2, r7
10014cb2:	44e0      	add	r8, ip
10014cb4:	465b      	mov	r3, fp
10014cb6:	1ad2      	subs	r2, r2, r3
10014cb8:	4643      	mov	r3, r8
10014cba:	0436      	lsls	r6, r6, #16
10014cbc:	4333      	orrs	r3, r6
10014cbe:	469b      	mov	fp, r3
10014cc0:	9903      	ldr	r1, [sp, #12]
10014cc2:	0c18      	lsrs	r0, r3, #16
10014cc4:	0c0b      	lsrs	r3, r1, #16
10014cc6:	001d      	movs	r5, r3
10014cc8:	9305      	str	r3, [sp, #20]
10014cca:	0409      	lsls	r1, r1, #16
10014ccc:	465b      	mov	r3, fp
10014cce:	0c09      	lsrs	r1, r1, #16
10014cd0:	000c      	movs	r4, r1
10014cd2:	041b      	lsls	r3, r3, #16
10014cd4:	0c1b      	lsrs	r3, r3, #16
10014cd6:	4344      	muls	r4, r0
10014cd8:	9104      	str	r1, [sp, #16]
10014cda:	4359      	muls	r1, r3
10014cdc:	436b      	muls	r3, r5
10014cde:	4368      	muls	r0, r5
10014ce0:	191b      	adds	r3, r3, r4
10014ce2:	0c0d      	lsrs	r5, r1, #16
10014ce4:	18eb      	adds	r3, r5, r3
10014ce6:	429c      	cmp	r4, r3
10014ce8:	d903      	bls.n	10014cf2 <__aeabi_ddiv+0x2da>
10014cea:	2480      	movs	r4, #128	; 0x80
10014cec:	0264      	lsls	r4, r4, #9
10014cee:	46a4      	mov	ip, r4
10014cf0:	4460      	add	r0, ip
10014cf2:	0c1c      	lsrs	r4, r3, #16
10014cf4:	0409      	lsls	r1, r1, #16
10014cf6:	041b      	lsls	r3, r3, #16
10014cf8:	0c09      	lsrs	r1, r1, #16
10014cfa:	1820      	adds	r0, r4, r0
10014cfc:	185d      	adds	r5, r3, r1
10014cfe:	4282      	cmp	r2, r0
10014d00:	d200      	bcs.n	10014d04 <__aeabi_ddiv+0x2ec>
10014d02:	e0de      	b.n	10014ec2 <__aeabi_ddiv+0x4aa>
10014d04:	d100      	bne.n	10014d08 <__aeabi_ddiv+0x2f0>
10014d06:	e0d7      	b.n	10014eb8 <__aeabi_ddiv+0x4a0>
10014d08:	1a16      	subs	r6, r2, r0
10014d0a:	9b02      	ldr	r3, [sp, #8]
10014d0c:	469c      	mov	ip, r3
10014d0e:	1b5d      	subs	r5, r3, r5
10014d10:	45ac      	cmp	ip, r5
10014d12:	419b      	sbcs	r3, r3
10014d14:	425b      	negs	r3, r3
10014d16:	1af6      	subs	r6, r6, r3
10014d18:	42b7      	cmp	r7, r6
10014d1a:	d100      	bne.n	10014d1e <__aeabi_ddiv+0x306>
10014d1c:	e106      	b.n	10014f2c <__aeabi_ddiv+0x514>
10014d1e:	4649      	mov	r1, r9
10014d20:	0030      	movs	r0, r6
10014d22:	f7fe fa63 	bl	100131ec <__aeabi_uidiv>
10014d26:	9b00      	ldr	r3, [sp, #0]
10014d28:	0004      	movs	r4, r0
10014d2a:	4343      	muls	r3, r0
10014d2c:	4649      	mov	r1, r9
10014d2e:	0030      	movs	r0, r6
10014d30:	4698      	mov	r8, r3
10014d32:	f7fe fae1 	bl	100132f8 <__aeabi_uidivmod>
10014d36:	0c2e      	lsrs	r6, r5, #16
10014d38:	0409      	lsls	r1, r1, #16
10014d3a:	430e      	orrs	r6, r1
10014d3c:	45b0      	cmp	r8, r6
10014d3e:	d909      	bls.n	10014d54 <__aeabi_ddiv+0x33c>
10014d40:	19f6      	adds	r6, r6, r7
10014d42:	1e63      	subs	r3, r4, #1
10014d44:	42b7      	cmp	r7, r6
10014d46:	d900      	bls.n	10014d4a <__aeabi_ddiv+0x332>
10014d48:	e0f3      	b.n	10014f32 <__aeabi_ddiv+0x51a>
10014d4a:	45b0      	cmp	r8, r6
10014d4c:	d800      	bhi.n	10014d50 <__aeabi_ddiv+0x338>
10014d4e:	e0f0      	b.n	10014f32 <__aeabi_ddiv+0x51a>
10014d50:	3c02      	subs	r4, #2
10014d52:	19f6      	adds	r6, r6, r7
10014d54:	4643      	mov	r3, r8
10014d56:	1af3      	subs	r3, r6, r3
10014d58:	4649      	mov	r1, r9
10014d5a:	0018      	movs	r0, r3
10014d5c:	9302      	str	r3, [sp, #8]
10014d5e:	f7fe fa45 	bl	100131ec <__aeabi_uidiv>
10014d62:	9b00      	ldr	r3, [sp, #0]
10014d64:	0006      	movs	r6, r0
10014d66:	4343      	muls	r3, r0
10014d68:	4649      	mov	r1, r9
10014d6a:	9802      	ldr	r0, [sp, #8]
10014d6c:	4698      	mov	r8, r3
10014d6e:	f7fe fac3 	bl	100132f8 <__aeabi_uidivmod>
10014d72:	042d      	lsls	r5, r5, #16
10014d74:	0409      	lsls	r1, r1, #16
10014d76:	0c2d      	lsrs	r5, r5, #16
10014d78:	430d      	orrs	r5, r1
10014d7a:	45a8      	cmp	r8, r5
10014d7c:	d909      	bls.n	10014d92 <__aeabi_ddiv+0x37a>
10014d7e:	19ed      	adds	r5, r5, r7
10014d80:	1e73      	subs	r3, r6, #1
10014d82:	42af      	cmp	r7, r5
10014d84:	d900      	bls.n	10014d88 <__aeabi_ddiv+0x370>
10014d86:	e0d6      	b.n	10014f36 <__aeabi_ddiv+0x51e>
10014d88:	45a8      	cmp	r8, r5
10014d8a:	d800      	bhi.n	10014d8e <__aeabi_ddiv+0x376>
10014d8c:	e0d3      	b.n	10014f36 <__aeabi_ddiv+0x51e>
10014d8e:	3e02      	subs	r6, #2
10014d90:	19ed      	adds	r5, r5, r7
10014d92:	0424      	lsls	r4, r4, #16
10014d94:	0021      	movs	r1, r4
10014d96:	4643      	mov	r3, r8
10014d98:	4331      	orrs	r1, r6
10014d9a:	9e04      	ldr	r6, [sp, #16]
10014d9c:	9a05      	ldr	r2, [sp, #20]
10014d9e:	0030      	movs	r0, r6
10014da0:	1aed      	subs	r5, r5, r3
10014da2:	040b      	lsls	r3, r1, #16
10014da4:	0c0c      	lsrs	r4, r1, #16
10014da6:	0c1b      	lsrs	r3, r3, #16
10014da8:	4358      	muls	r0, r3
10014daa:	4366      	muls	r6, r4
10014dac:	4353      	muls	r3, r2
10014dae:	4354      	muls	r4, r2
10014db0:	199a      	adds	r2, r3, r6
10014db2:	0c03      	lsrs	r3, r0, #16
10014db4:	189b      	adds	r3, r3, r2
10014db6:	429e      	cmp	r6, r3
10014db8:	d903      	bls.n	10014dc2 <__aeabi_ddiv+0x3aa>
10014dba:	2280      	movs	r2, #128	; 0x80
10014dbc:	0252      	lsls	r2, r2, #9
10014dbe:	4694      	mov	ip, r2
10014dc0:	4464      	add	r4, ip
10014dc2:	0c1a      	lsrs	r2, r3, #16
10014dc4:	0400      	lsls	r0, r0, #16
10014dc6:	041b      	lsls	r3, r3, #16
10014dc8:	0c00      	lsrs	r0, r0, #16
10014dca:	1914      	adds	r4, r2, r4
10014dcc:	181b      	adds	r3, r3, r0
10014dce:	42a5      	cmp	r5, r4
10014dd0:	d350      	bcc.n	10014e74 <__aeabi_ddiv+0x45c>
10014dd2:	d04d      	beq.n	10014e70 <__aeabi_ddiv+0x458>
10014dd4:	2301      	movs	r3, #1
10014dd6:	4319      	orrs	r1, r3
10014dd8:	4a96      	ldr	r2, [pc, #600]	; (10015034 <__aeabi_ddiv+0x61c>)
10014dda:	9b01      	ldr	r3, [sp, #4]
10014ddc:	4694      	mov	ip, r2
10014dde:	4463      	add	r3, ip
10014de0:	2b00      	cmp	r3, #0
10014de2:	dc00      	bgt.n	10014de6 <__aeabi_ddiv+0x3ce>
10014de4:	e6f3      	b.n	10014bce <__aeabi_ddiv+0x1b6>
10014de6:	074a      	lsls	r2, r1, #29
10014de8:	d009      	beq.n	10014dfe <__aeabi_ddiv+0x3e6>
10014dea:	220f      	movs	r2, #15
10014dec:	400a      	ands	r2, r1
10014dee:	2a04      	cmp	r2, #4
10014df0:	d005      	beq.n	10014dfe <__aeabi_ddiv+0x3e6>
10014df2:	1d0a      	adds	r2, r1, #4
10014df4:	428a      	cmp	r2, r1
10014df6:	4189      	sbcs	r1, r1
10014df8:	4249      	negs	r1, r1
10014dfa:	448b      	add	fp, r1
10014dfc:	0011      	movs	r1, r2
10014dfe:	465a      	mov	r2, fp
10014e00:	01d2      	lsls	r2, r2, #7
10014e02:	d508      	bpl.n	10014e16 <__aeabi_ddiv+0x3fe>
10014e04:	465a      	mov	r2, fp
10014e06:	4b8c      	ldr	r3, [pc, #560]	; (10015038 <__aeabi_ddiv+0x620>)
10014e08:	401a      	ands	r2, r3
10014e0a:	4693      	mov	fp, r2
10014e0c:	2280      	movs	r2, #128	; 0x80
10014e0e:	00d2      	lsls	r2, r2, #3
10014e10:	4694      	mov	ip, r2
10014e12:	9b01      	ldr	r3, [sp, #4]
10014e14:	4463      	add	r3, ip
10014e16:	4a89      	ldr	r2, [pc, #548]	; (1001503c <__aeabi_ddiv+0x624>)
10014e18:	4293      	cmp	r3, r2
10014e1a:	dd00      	ble.n	10014e1e <__aeabi_ddiv+0x406>
10014e1c:	e65b      	b.n	10014ad6 <__aeabi_ddiv+0xbe>
10014e1e:	465a      	mov	r2, fp
10014e20:	08c9      	lsrs	r1, r1, #3
10014e22:	0750      	lsls	r0, r2, #29
10014e24:	4308      	orrs	r0, r1
10014e26:	0256      	lsls	r6, r2, #9
10014e28:	4651      	mov	r1, sl
10014e2a:	2201      	movs	r2, #1
10014e2c:	055b      	lsls	r3, r3, #21
10014e2e:	4681      	mov	r9, r0
10014e30:	0b36      	lsrs	r6, r6, #12
10014e32:	0d5b      	lsrs	r3, r3, #21
10014e34:	400a      	ands	r2, r1
10014e36:	e655      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014e38:	2380      	movs	r3, #128	; 0x80
10014e3a:	031b      	lsls	r3, r3, #12
10014e3c:	421e      	tst	r6, r3
10014e3e:	d011      	beq.n	10014e64 <__aeabi_ddiv+0x44c>
10014e40:	465a      	mov	r2, fp
10014e42:	421a      	tst	r2, r3
10014e44:	d10e      	bne.n	10014e64 <__aeabi_ddiv+0x44c>
10014e46:	465e      	mov	r6, fp
10014e48:	431e      	orrs	r6, r3
10014e4a:	0336      	lsls	r6, r6, #12
10014e4c:	0b36      	lsrs	r6, r6, #12
10014e4e:	002a      	movs	r2, r5
10014e50:	4689      	mov	r9, r1
10014e52:	4b7b      	ldr	r3, [pc, #492]	; (10015040 <__aeabi_ddiv+0x628>)
10014e54:	e646      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014e56:	2b03      	cmp	r3, #3
10014e58:	d100      	bne.n	10014e5c <__aeabi_ddiv+0x444>
10014e5a:	e0e1      	b.n	10015020 <__aeabi_ddiv+0x608>
10014e5c:	2b01      	cmp	r3, #1
10014e5e:	d1bb      	bne.n	10014dd8 <__aeabi_ddiv+0x3c0>
10014e60:	401a      	ands	r2, r3
10014e62:	e6bb      	b.n	10014bdc <__aeabi_ddiv+0x1c4>
10014e64:	431e      	orrs	r6, r3
10014e66:	0336      	lsls	r6, r6, #12
10014e68:	0b36      	lsrs	r6, r6, #12
10014e6a:	4642      	mov	r2, r8
10014e6c:	4b74      	ldr	r3, [pc, #464]	; (10015040 <__aeabi_ddiv+0x628>)
10014e6e:	e639      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014e70:	2b00      	cmp	r3, #0
10014e72:	d0b1      	beq.n	10014dd8 <__aeabi_ddiv+0x3c0>
10014e74:	197d      	adds	r5, r7, r5
10014e76:	1e4a      	subs	r2, r1, #1
10014e78:	42af      	cmp	r7, r5
10014e7a:	d952      	bls.n	10014f22 <__aeabi_ddiv+0x50a>
10014e7c:	0011      	movs	r1, r2
10014e7e:	42a5      	cmp	r5, r4
10014e80:	d1a8      	bne.n	10014dd4 <__aeabi_ddiv+0x3bc>
10014e82:	9a03      	ldr	r2, [sp, #12]
10014e84:	429a      	cmp	r2, r3
10014e86:	d1a5      	bne.n	10014dd4 <__aeabi_ddiv+0x3bc>
10014e88:	e7a6      	b.n	10014dd8 <__aeabi_ddiv+0x3c0>
10014e8a:	0003      	movs	r3, r0
10014e8c:	003e      	movs	r6, r7
10014e8e:	3b28      	subs	r3, #40	; 0x28
10014e90:	409e      	lsls	r6, r3
10014e92:	2300      	movs	r3, #0
10014e94:	4699      	mov	r9, r3
10014e96:	e654      	b.n	10014b42 <__aeabi_ddiv+0x12a>
10014e98:	f001 f960 	bl	1001615c <__clzsi2>
10014e9c:	3020      	adds	r0, #32
10014e9e:	e641      	b.n	10014b24 <__aeabi_ddiv+0x10c>
10014ea0:	0003      	movs	r3, r0
10014ea2:	4652      	mov	r2, sl
10014ea4:	3b28      	subs	r3, #40	; 0x28
10014ea6:	409a      	lsls	r2, r3
10014ea8:	2100      	movs	r1, #0
10014eaa:	4693      	mov	fp, r2
10014eac:	e677      	b.n	10014b9e <__aeabi_ddiv+0x186>
10014eae:	4650      	mov	r0, sl
10014eb0:	f001 f954 	bl	1001615c <__clzsi2>
10014eb4:	3020      	adds	r0, #32
10014eb6:	e65e      	b.n	10014b76 <__aeabi_ddiv+0x15e>
10014eb8:	9b02      	ldr	r3, [sp, #8]
10014eba:	2600      	movs	r6, #0
10014ebc:	42ab      	cmp	r3, r5
10014ebe:	d300      	bcc.n	10014ec2 <__aeabi_ddiv+0x4aa>
10014ec0:	e723      	b.n	10014d0a <__aeabi_ddiv+0x2f2>
10014ec2:	9e03      	ldr	r6, [sp, #12]
10014ec4:	9902      	ldr	r1, [sp, #8]
10014ec6:	46b4      	mov	ip, r6
10014ec8:	4461      	add	r1, ip
10014eca:	4688      	mov	r8, r1
10014ecc:	45b0      	cmp	r8, r6
10014ece:	41b6      	sbcs	r6, r6
10014ed0:	465b      	mov	r3, fp
10014ed2:	4276      	negs	r6, r6
10014ed4:	19f6      	adds	r6, r6, r7
10014ed6:	18b2      	adds	r2, r6, r2
10014ed8:	3b01      	subs	r3, #1
10014eda:	9102      	str	r1, [sp, #8]
10014edc:	4297      	cmp	r7, r2
10014ede:	d213      	bcs.n	10014f08 <__aeabi_ddiv+0x4f0>
10014ee0:	4290      	cmp	r0, r2
10014ee2:	d84f      	bhi.n	10014f84 <__aeabi_ddiv+0x56c>
10014ee4:	d100      	bne.n	10014ee8 <__aeabi_ddiv+0x4d0>
10014ee6:	e08e      	b.n	10015006 <__aeabi_ddiv+0x5ee>
10014ee8:	1a16      	subs	r6, r2, r0
10014eea:	469b      	mov	fp, r3
10014eec:	e70d      	b.n	10014d0a <__aeabi_ddiv+0x2f2>
10014eee:	4589      	cmp	r9, r1
10014ef0:	d200      	bcs.n	10014ef4 <__aeabi_ddiv+0x4dc>
10014ef2:	e68e      	b.n	10014c12 <__aeabi_ddiv+0x1fa>
10014ef4:	0874      	lsrs	r4, r6, #1
10014ef6:	464b      	mov	r3, r9
10014ef8:	07f6      	lsls	r6, r6, #31
10014efa:	0035      	movs	r5, r6
10014efc:	085b      	lsrs	r3, r3, #1
10014efe:	431d      	orrs	r5, r3
10014f00:	464b      	mov	r3, r9
10014f02:	07db      	lsls	r3, r3, #31
10014f04:	9302      	str	r3, [sp, #8]
10014f06:	e68b      	b.n	10014c20 <__aeabi_ddiv+0x208>
10014f08:	4297      	cmp	r7, r2
10014f0a:	d1ed      	bne.n	10014ee8 <__aeabi_ddiv+0x4d0>
10014f0c:	9903      	ldr	r1, [sp, #12]
10014f0e:	9c02      	ldr	r4, [sp, #8]
10014f10:	42a1      	cmp	r1, r4
10014f12:	d9e5      	bls.n	10014ee0 <__aeabi_ddiv+0x4c8>
10014f14:	1a3e      	subs	r6, r7, r0
10014f16:	469b      	mov	fp, r3
10014f18:	e6f7      	b.n	10014d0a <__aeabi_ddiv+0x2f2>
10014f1a:	4698      	mov	r8, r3
10014f1c:	e6ca      	b.n	10014cb4 <__aeabi_ddiv+0x29c>
10014f1e:	001e      	movs	r6, r3
10014f20:	e6a5      	b.n	10014c6e <__aeabi_ddiv+0x256>
10014f22:	42ac      	cmp	r4, r5
10014f24:	d83e      	bhi.n	10014fa4 <__aeabi_ddiv+0x58c>
10014f26:	d074      	beq.n	10015012 <__aeabi_ddiv+0x5fa>
10014f28:	0011      	movs	r1, r2
10014f2a:	e753      	b.n	10014dd4 <__aeabi_ddiv+0x3bc>
10014f2c:	2101      	movs	r1, #1
10014f2e:	4249      	negs	r1, r1
10014f30:	e752      	b.n	10014dd8 <__aeabi_ddiv+0x3c0>
10014f32:	001c      	movs	r4, r3
10014f34:	e70e      	b.n	10014d54 <__aeabi_ddiv+0x33c>
10014f36:	001e      	movs	r6, r3
10014f38:	e72b      	b.n	10014d92 <__aeabi_ddiv+0x37a>
10014f3a:	2d1f      	cmp	r5, #31
10014f3c:	dc3c      	bgt.n	10014fb8 <__aeabi_ddiv+0x5a0>
10014f3e:	2320      	movs	r3, #32
10014f40:	000a      	movs	r2, r1
10014f42:	4658      	mov	r0, fp
10014f44:	1b5b      	subs	r3, r3, r5
10014f46:	4098      	lsls	r0, r3
10014f48:	40ea      	lsrs	r2, r5
10014f4a:	4099      	lsls	r1, r3
10014f4c:	4302      	orrs	r2, r0
10014f4e:	1e48      	subs	r0, r1, #1
10014f50:	4181      	sbcs	r1, r0
10014f52:	465e      	mov	r6, fp
10014f54:	4311      	orrs	r1, r2
10014f56:	40ee      	lsrs	r6, r5
10014f58:	074b      	lsls	r3, r1, #29
10014f5a:	d009      	beq.n	10014f70 <__aeabi_ddiv+0x558>
10014f5c:	230f      	movs	r3, #15
10014f5e:	400b      	ands	r3, r1
10014f60:	2b04      	cmp	r3, #4
10014f62:	d005      	beq.n	10014f70 <__aeabi_ddiv+0x558>
10014f64:	000b      	movs	r3, r1
10014f66:	1d19      	adds	r1, r3, #4
10014f68:	4299      	cmp	r1, r3
10014f6a:	419b      	sbcs	r3, r3
10014f6c:	425b      	negs	r3, r3
10014f6e:	18f6      	adds	r6, r6, r3
10014f70:	0233      	lsls	r3, r6, #8
10014f72:	d53c      	bpl.n	10014fee <__aeabi_ddiv+0x5d6>
10014f74:	4653      	mov	r3, sl
10014f76:	2201      	movs	r2, #1
10014f78:	2100      	movs	r1, #0
10014f7a:	401a      	ands	r2, r3
10014f7c:	2600      	movs	r6, #0
10014f7e:	2301      	movs	r3, #1
10014f80:	4689      	mov	r9, r1
10014f82:	e5af      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10014f84:	2302      	movs	r3, #2
10014f86:	425b      	negs	r3, r3
10014f88:	469c      	mov	ip, r3
10014f8a:	9c03      	ldr	r4, [sp, #12]
10014f8c:	44e3      	add	fp, ip
10014f8e:	46a4      	mov	ip, r4
10014f90:	9b02      	ldr	r3, [sp, #8]
10014f92:	4463      	add	r3, ip
10014f94:	4698      	mov	r8, r3
10014f96:	45a0      	cmp	r8, r4
10014f98:	41b6      	sbcs	r6, r6
10014f9a:	4276      	negs	r6, r6
10014f9c:	19f6      	adds	r6, r6, r7
10014f9e:	9302      	str	r3, [sp, #8]
10014fa0:	18b2      	adds	r2, r6, r2
10014fa2:	e6b1      	b.n	10014d08 <__aeabi_ddiv+0x2f0>
10014fa4:	9803      	ldr	r0, [sp, #12]
10014fa6:	1e8a      	subs	r2, r1, #2
10014fa8:	0041      	lsls	r1, r0, #1
10014faa:	4281      	cmp	r1, r0
10014fac:	41b6      	sbcs	r6, r6
10014fae:	4276      	negs	r6, r6
10014fb0:	19f6      	adds	r6, r6, r7
10014fb2:	19ad      	adds	r5, r5, r6
10014fb4:	9103      	str	r1, [sp, #12]
10014fb6:	e761      	b.n	10014e7c <__aeabi_ddiv+0x464>
10014fb8:	221f      	movs	r2, #31
10014fba:	4252      	negs	r2, r2
10014fbc:	1ad3      	subs	r3, r2, r3
10014fbe:	465a      	mov	r2, fp
10014fc0:	40da      	lsrs	r2, r3
10014fc2:	0013      	movs	r3, r2
10014fc4:	2d20      	cmp	r5, #32
10014fc6:	d029      	beq.n	1001501c <__aeabi_ddiv+0x604>
10014fc8:	2240      	movs	r2, #64	; 0x40
10014fca:	4658      	mov	r0, fp
10014fcc:	1b55      	subs	r5, r2, r5
10014fce:	40a8      	lsls	r0, r5
10014fd0:	4301      	orrs	r1, r0
10014fd2:	1e48      	subs	r0, r1, #1
10014fd4:	4181      	sbcs	r1, r0
10014fd6:	2007      	movs	r0, #7
10014fd8:	430b      	orrs	r3, r1
10014fda:	4018      	ands	r0, r3
10014fdc:	2600      	movs	r6, #0
10014fde:	2800      	cmp	r0, #0
10014fe0:	d009      	beq.n	10014ff6 <__aeabi_ddiv+0x5de>
10014fe2:	220f      	movs	r2, #15
10014fe4:	2600      	movs	r6, #0
10014fe6:	401a      	ands	r2, r3
10014fe8:	0019      	movs	r1, r3
10014fea:	2a04      	cmp	r2, #4
10014fec:	d1bb      	bne.n	10014f66 <__aeabi_ddiv+0x54e>
10014fee:	000b      	movs	r3, r1
10014ff0:	0770      	lsls	r0, r6, #29
10014ff2:	0276      	lsls	r6, r6, #9
10014ff4:	0b36      	lsrs	r6, r6, #12
10014ff6:	08db      	lsrs	r3, r3, #3
10014ff8:	4303      	orrs	r3, r0
10014ffa:	4699      	mov	r9, r3
10014ffc:	2201      	movs	r2, #1
10014ffe:	4653      	mov	r3, sl
10015000:	401a      	ands	r2, r3
10015002:	2300      	movs	r3, #0
10015004:	e56e      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10015006:	9902      	ldr	r1, [sp, #8]
10015008:	428d      	cmp	r5, r1
1001500a:	d8bb      	bhi.n	10014f84 <__aeabi_ddiv+0x56c>
1001500c:	469b      	mov	fp, r3
1001500e:	2600      	movs	r6, #0
10015010:	e67b      	b.n	10014d0a <__aeabi_ddiv+0x2f2>
10015012:	9803      	ldr	r0, [sp, #12]
10015014:	4298      	cmp	r0, r3
10015016:	d3c5      	bcc.n	10014fa4 <__aeabi_ddiv+0x58c>
10015018:	0011      	movs	r1, r2
1001501a:	e732      	b.n	10014e82 <__aeabi_ddiv+0x46a>
1001501c:	2000      	movs	r0, #0
1001501e:	e7d7      	b.n	10014fd0 <__aeabi_ddiv+0x5b8>
10015020:	2680      	movs	r6, #128	; 0x80
10015022:	465b      	mov	r3, fp
10015024:	0336      	lsls	r6, r6, #12
10015026:	431e      	orrs	r6, r3
10015028:	0336      	lsls	r6, r6, #12
1001502a:	0b36      	lsrs	r6, r6, #12
1001502c:	9a00      	ldr	r2, [sp, #0]
1001502e:	4689      	mov	r9, r1
10015030:	4b03      	ldr	r3, [pc, #12]	; (10015040 <__aeabi_ddiv+0x628>)
10015032:	e557      	b.n	10014ae4 <__aeabi_ddiv+0xcc>
10015034:	000003ff 	.word	0x000003ff
10015038:	feffffff 	.word	0xfeffffff
1001503c:	000007fe 	.word	0x000007fe
10015040:	000007ff 	.word	0x000007ff

10015044 <__eqdf2>:
10015044:	b5f0      	push	{r4, r5, r6, r7, lr}
10015046:	465f      	mov	r7, fp
10015048:	4656      	mov	r6, sl
1001504a:	464d      	mov	r5, r9
1001504c:	4644      	mov	r4, r8
1001504e:	b4f0      	push	{r4, r5, r6, r7}
10015050:	031f      	lsls	r7, r3, #12
10015052:	005c      	lsls	r4, r3, #1
10015054:	0fdb      	lsrs	r3, r3, #31
10015056:	469a      	mov	sl, r3
10015058:	4b19      	ldr	r3, [pc, #100]	; (100150c0 <__eqdf2+0x7c>)
1001505a:	030e      	lsls	r6, r1, #12
1001505c:	004d      	lsls	r5, r1, #1
1001505e:	0fc9      	lsrs	r1, r1, #31
10015060:	4680      	mov	r8, r0
10015062:	0b36      	lsrs	r6, r6, #12
10015064:	0d6d      	lsrs	r5, r5, #21
10015066:	468b      	mov	fp, r1
10015068:	4691      	mov	r9, r2
1001506a:	0b3f      	lsrs	r7, r7, #12
1001506c:	0d64      	lsrs	r4, r4, #21
1001506e:	429d      	cmp	r5, r3
10015070:	d019      	beq.n	100150a6 <__eqdf2+0x62>
10015072:	4b13      	ldr	r3, [pc, #76]	; (100150c0 <__eqdf2+0x7c>)
10015074:	429c      	cmp	r4, r3
10015076:	d01b      	beq.n	100150b0 <__eqdf2+0x6c>
10015078:	2301      	movs	r3, #1
1001507a:	42a5      	cmp	r5, r4
1001507c:	d006      	beq.n	1001508c <__eqdf2+0x48>
1001507e:	0018      	movs	r0, r3
10015080:	bc3c      	pop	{r2, r3, r4, r5}
10015082:	4690      	mov	r8, r2
10015084:	4699      	mov	r9, r3
10015086:	46a2      	mov	sl, r4
10015088:	46ab      	mov	fp, r5
1001508a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001508c:	42be      	cmp	r6, r7
1001508e:	d1f6      	bne.n	1001507e <__eqdf2+0x3a>
10015090:	45c8      	cmp	r8, r9
10015092:	d1f4      	bne.n	1001507e <__eqdf2+0x3a>
10015094:	45d3      	cmp	fp, sl
10015096:	d010      	beq.n	100150ba <__eqdf2+0x76>
10015098:	2d00      	cmp	r5, #0
1001509a:	d1f0      	bne.n	1001507e <__eqdf2+0x3a>
1001509c:	4330      	orrs	r0, r6
1001509e:	0003      	movs	r3, r0
100150a0:	1e5a      	subs	r2, r3, #1
100150a2:	4193      	sbcs	r3, r2
100150a4:	e7eb      	b.n	1001507e <__eqdf2+0x3a>
100150a6:	0031      	movs	r1, r6
100150a8:	2301      	movs	r3, #1
100150aa:	4301      	orrs	r1, r0
100150ac:	d1e7      	bne.n	1001507e <__eqdf2+0x3a>
100150ae:	e7e0      	b.n	10015072 <__eqdf2+0x2e>
100150b0:	433a      	orrs	r2, r7
100150b2:	2301      	movs	r3, #1
100150b4:	2a00      	cmp	r2, #0
100150b6:	d1e2      	bne.n	1001507e <__eqdf2+0x3a>
100150b8:	e7de      	b.n	10015078 <__eqdf2+0x34>
100150ba:	2300      	movs	r3, #0
100150bc:	e7df      	b.n	1001507e <__eqdf2+0x3a>
100150be:	46c0      	nop			; (mov r8, r8)
100150c0:	000007ff 	.word	0x000007ff

100150c4 <__gedf2>:
100150c4:	b5f0      	push	{r4, r5, r6, r7, lr}
100150c6:	465f      	mov	r7, fp
100150c8:	4644      	mov	r4, r8
100150ca:	4656      	mov	r6, sl
100150cc:	464d      	mov	r5, r9
100150ce:	b4f0      	push	{r4, r5, r6, r7}
100150d0:	031f      	lsls	r7, r3, #12
100150d2:	0b3c      	lsrs	r4, r7, #12
100150d4:	4f2c      	ldr	r7, [pc, #176]	; (10015188 <__gedf2+0xc4>)
100150d6:	030e      	lsls	r6, r1, #12
100150d8:	004d      	lsls	r5, r1, #1
100150da:	46a3      	mov	fp, r4
100150dc:	005c      	lsls	r4, r3, #1
100150de:	4684      	mov	ip, r0
100150e0:	0b36      	lsrs	r6, r6, #12
100150e2:	0d6d      	lsrs	r5, r5, #21
100150e4:	0fc9      	lsrs	r1, r1, #31
100150e6:	4690      	mov	r8, r2
100150e8:	0d64      	lsrs	r4, r4, #21
100150ea:	0fdb      	lsrs	r3, r3, #31
100150ec:	42bd      	cmp	r5, r7
100150ee:	d02b      	beq.n	10015148 <__gedf2+0x84>
100150f0:	4f25      	ldr	r7, [pc, #148]	; (10015188 <__gedf2+0xc4>)
100150f2:	42bc      	cmp	r4, r7
100150f4:	d02e      	beq.n	10015154 <__gedf2+0x90>
100150f6:	2d00      	cmp	r5, #0
100150f8:	d10e      	bne.n	10015118 <__gedf2+0x54>
100150fa:	4330      	orrs	r0, r6
100150fc:	0007      	movs	r7, r0
100150fe:	4681      	mov	r9, r0
10015100:	4278      	negs	r0, r7
10015102:	4178      	adcs	r0, r7
10015104:	2c00      	cmp	r4, #0
10015106:	d117      	bne.n	10015138 <__gedf2+0x74>
10015108:	465f      	mov	r7, fp
1001510a:	433a      	orrs	r2, r7
1001510c:	d114      	bne.n	10015138 <__gedf2+0x74>
1001510e:	464b      	mov	r3, r9
10015110:	2000      	movs	r0, #0
10015112:	2b00      	cmp	r3, #0
10015114:	d00a      	beq.n	1001512c <__gedf2+0x68>
10015116:	e006      	b.n	10015126 <__gedf2+0x62>
10015118:	2c00      	cmp	r4, #0
1001511a:	d102      	bne.n	10015122 <__gedf2+0x5e>
1001511c:	4658      	mov	r0, fp
1001511e:	4302      	orrs	r2, r0
10015120:	d001      	beq.n	10015126 <__gedf2+0x62>
10015122:	4299      	cmp	r1, r3
10015124:	d01a      	beq.n	1001515c <__gedf2+0x98>
10015126:	2301      	movs	r3, #1
10015128:	4248      	negs	r0, r1
1001512a:	4318      	orrs	r0, r3
1001512c:	bc3c      	pop	{r2, r3, r4, r5}
1001512e:	4690      	mov	r8, r2
10015130:	4699      	mov	r9, r3
10015132:	46a2      	mov	sl, r4
10015134:	46ab      	mov	fp, r5
10015136:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015138:	2800      	cmp	r0, #0
1001513a:	d0f2      	beq.n	10015122 <__gedf2+0x5e>
1001513c:	4258      	negs	r0, r3
1001513e:	4158      	adcs	r0, r3
10015140:	2201      	movs	r2, #1
10015142:	4240      	negs	r0, r0
10015144:	4310      	orrs	r0, r2
10015146:	e7f1      	b.n	1001512c <__gedf2+0x68>
10015148:	0037      	movs	r7, r6
1001514a:	4307      	orrs	r7, r0
1001514c:	d0d0      	beq.n	100150f0 <__gedf2+0x2c>
1001514e:	2002      	movs	r0, #2
10015150:	4240      	negs	r0, r0
10015152:	e7eb      	b.n	1001512c <__gedf2+0x68>
10015154:	465f      	mov	r7, fp
10015156:	4317      	orrs	r7, r2
10015158:	d0cd      	beq.n	100150f6 <__gedf2+0x32>
1001515a:	e7f8      	b.n	1001514e <__gedf2+0x8a>
1001515c:	42a5      	cmp	r5, r4
1001515e:	dce2      	bgt.n	10015126 <__gedf2+0x62>
10015160:	db05      	blt.n	1001516e <__gedf2+0xaa>
10015162:	455e      	cmp	r6, fp
10015164:	d8df      	bhi.n	10015126 <__gedf2+0x62>
10015166:	d008      	beq.n	1001517a <__gedf2+0xb6>
10015168:	2000      	movs	r0, #0
1001516a:	455e      	cmp	r6, fp
1001516c:	d2de      	bcs.n	1001512c <__gedf2+0x68>
1001516e:	4248      	negs	r0, r1
10015170:	4148      	adcs	r0, r1
10015172:	2301      	movs	r3, #1
10015174:	4240      	negs	r0, r0
10015176:	4318      	orrs	r0, r3
10015178:	e7d8      	b.n	1001512c <__gedf2+0x68>
1001517a:	45c4      	cmp	ip, r8
1001517c:	d8d3      	bhi.n	10015126 <__gedf2+0x62>
1001517e:	2000      	movs	r0, #0
10015180:	45c4      	cmp	ip, r8
10015182:	d3f4      	bcc.n	1001516e <__gedf2+0xaa>
10015184:	e7d2      	b.n	1001512c <__gedf2+0x68>
10015186:	46c0      	nop			; (mov r8, r8)
10015188:	000007ff 	.word	0x000007ff

1001518c <__ledf2>:
1001518c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001518e:	465f      	mov	r7, fp
10015190:	464d      	mov	r5, r9
10015192:	4644      	mov	r4, r8
10015194:	4656      	mov	r6, sl
10015196:	b4f0      	push	{r4, r5, r6, r7}
10015198:	031c      	lsls	r4, r3, #12
1001519a:	0b24      	lsrs	r4, r4, #12
1001519c:	46a4      	mov	ip, r4
1001519e:	4c2f      	ldr	r4, [pc, #188]	; (1001525c <__ledf2+0xd0>)
100151a0:	030f      	lsls	r7, r1, #12
100151a2:	004d      	lsls	r5, r1, #1
100151a4:	005e      	lsls	r6, r3, #1
100151a6:	0fc9      	lsrs	r1, r1, #31
100151a8:	4680      	mov	r8, r0
100151aa:	0b3f      	lsrs	r7, r7, #12
100151ac:	0d6d      	lsrs	r5, r5, #21
100151ae:	468b      	mov	fp, r1
100151b0:	4691      	mov	r9, r2
100151b2:	0d76      	lsrs	r6, r6, #21
100151b4:	0fdb      	lsrs	r3, r3, #31
100151b6:	42a5      	cmp	r5, r4
100151b8:	d020      	beq.n	100151fc <__ledf2+0x70>
100151ba:	4c28      	ldr	r4, [pc, #160]	; (1001525c <__ledf2+0xd0>)
100151bc:	42a6      	cmp	r6, r4
100151be:	d022      	beq.n	10015206 <__ledf2+0x7a>
100151c0:	2d00      	cmp	r5, #0
100151c2:	d112      	bne.n	100151ea <__ledf2+0x5e>
100151c4:	4338      	orrs	r0, r7
100151c6:	4244      	negs	r4, r0
100151c8:	4144      	adcs	r4, r0
100151ca:	2e00      	cmp	r6, #0
100151cc:	d020      	beq.n	10015210 <__ledf2+0x84>
100151ce:	2c00      	cmp	r4, #0
100151d0:	d00d      	beq.n	100151ee <__ledf2+0x62>
100151d2:	425c      	negs	r4, r3
100151d4:	4163      	adcs	r3, r4
100151d6:	2401      	movs	r4, #1
100151d8:	425b      	negs	r3, r3
100151da:	431c      	orrs	r4, r3
100151dc:	0020      	movs	r0, r4
100151de:	bc3c      	pop	{r2, r3, r4, r5}
100151e0:	4690      	mov	r8, r2
100151e2:	4699      	mov	r9, r3
100151e4:	46a2      	mov	sl, r4
100151e6:	46ab      	mov	fp, r5
100151e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100151ea:	2e00      	cmp	r6, #0
100151ec:	d017      	beq.n	1001521e <__ledf2+0x92>
100151ee:	455b      	cmp	r3, fp
100151f0:	d019      	beq.n	10015226 <__ledf2+0x9a>
100151f2:	465b      	mov	r3, fp
100151f4:	425c      	negs	r4, r3
100151f6:	2301      	movs	r3, #1
100151f8:	431c      	orrs	r4, r3
100151fa:	e7ef      	b.n	100151dc <__ledf2+0x50>
100151fc:	0039      	movs	r1, r7
100151fe:	2402      	movs	r4, #2
10015200:	4301      	orrs	r1, r0
10015202:	d1eb      	bne.n	100151dc <__ledf2+0x50>
10015204:	e7d9      	b.n	100151ba <__ledf2+0x2e>
10015206:	4661      	mov	r1, ip
10015208:	2402      	movs	r4, #2
1001520a:	4311      	orrs	r1, r2
1001520c:	d1e6      	bne.n	100151dc <__ledf2+0x50>
1001520e:	e7d7      	b.n	100151c0 <__ledf2+0x34>
10015210:	4661      	mov	r1, ip
10015212:	430a      	orrs	r2, r1
10015214:	d1db      	bne.n	100151ce <__ledf2+0x42>
10015216:	2400      	movs	r4, #0
10015218:	2800      	cmp	r0, #0
1001521a:	d0df      	beq.n	100151dc <__ledf2+0x50>
1001521c:	e7e9      	b.n	100151f2 <__ledf2+0x66>
1001521e:	4661      	mov	r1, ip
10015220:	430a      	orrs	r2, r1
10015222:	d1e4      	bne.n	100151ee <__ledf2+0x62>
10015224:	e7e5      	b.n	100151f2 <__ledf2+0x66>
10015226:	42b5      	cmp	r5, r6
10015228:	dd03      	ble.n	10015232 <__ledf2+0xa6>
1001522a:	2201      	movs	r2, #1
1001522c:	425c      	negs	r4, r3
1001522e:	4314      	orrs	r4, r2
10015230:	e7d4      	b.n	100151dc <__ledf2+0x50>
10015232:	42b5      	cmp	r5, r6
10015234:	dbcd      	blt.n	100151d2 <__ledf2+0x46>
10015236:	4567      	cmp	r7, ip
10015238:	d8db      	bhi.n	100151f2 <__ledf2+0x66>
1001523a:	d009      	beq.n	10015250 <__ledf2+0xc4>
1001523c:	2400      	movs	r4, #0
1001523e:	4567      	cmp	r7, ip
10015240:	d2cc      	bcs.n	100151dc <__ledf2+0x50>
10015242:	4659      	mov	r1, fp
10015244:	424c      	negs	r4, r1
10015246:	4161      	adcs	r1, r4
10015248:	2401      	movs	r4, #1
1001524a:	4249      	negs	r1, r1
1001524c:	430c      	orrs	r4, r1
1001524e:	e7c5      	b.n	100151dc <__ledf2+0x50>
10015250:	45c8      	cmp	r8, r9
10015252:	d8ce      	bhi.n	100151f2 <__ledf2+0x66>
10015254:	2400      	movs	r4, #0
10015256:	45c8      	cmp	r8, r9
10015258:	d3f3      	bcc.n	10015242 <__ledf2+0xb6>
1001525a:	e7bf      	b.n	100151dc <__ledf2+0x50>
1001525c:	000007ff 	.word	0x000007ff

10015260 <__aeabi_dmul>:
10015260:	b5f0      	push	{r4, r5, r6, r7, lr}
10015262:	465f      	mov	r7, fp
10015264:	4656      	mov	r6, sl
10015266:	464d      	mov	r5, r9
10015268:	4644      	mov	r4, r8
1001526a:	b4f0      	push	{r4, r5, r6, r7}
1001526c:	030d      	lsls	r5, r1, #12
1001526e:	4699      	mov	r9, r3
10015270:	004e      	lsls	r6, r1, #1
10015272:	0b2b      	lsrs	r3, r5, #12
10015274:	b087      	sub	sp, #28
10015276:	0007      	movs	r7, r0
10015278:	4692      	mov	sl, r2
1001527a:	4680      	mov	r8, r0
1001527c:	469b      	mov	fp, r3
1001527e:	0d76      	lsrs	r6, r6, #21
10015280:	0fcc      	lsrs	r4, r1, #31
10015282:	2e00      	cmp	r6, #0
10015284:	d069      	beq.n	1001535a <__aeabi_dmul+0xfa>
10015286:	4b6d      	ldr	r3, [pc, #436]	; (1001543c <__aeabi_dmul+0x1dc>)
10015288:	429e      	cmp	r6, r3
1001528a:	d035      	beq.n	100152f8 <__aeabi_dmul+0x98>
1001528c:	465b      	mov	r3, fp
1001528e:	2280      	movs	r2, #128	; 0x80
10015290:	00dd      	lsls	r5, r3, #3
10015292:	0412      	lsls	r2, r2, #16
10015294:	0f43      	lsrs	r3, r0, #29
10015296:	4313      	orrs	r3, r2
10015298:	432b      	orrs	r3, r5
1001529a:	469b      	mov	fp, r3
1001529c:	00c3      	lsls	r3, r0, #3
1001529e:	4698      	mov	r8, r3
100152a0:	4b67      	ldr	r3, [pc, #412]	; (10015440 <__aeabi_dmul+0x1e0>)
100152a2:	2700      	movs	r7, #0
100152a4:	469c      	mov	ip, r3
100152a6:	2300      	movs	r3, #0
100152a8:	4466      	add	r6, ip
100152aa:	9301      	str	r3, [sp, #4]
100152ac:	464a      	mov	r2, r9
100152ae:	0315      	lsls	r5, r2, #12
100152b0:	0050      	lsls	r0, r2, #1
100152b2:	0fd2      	lsrs	r2, r2, #31
100152b4:	4653      	mov	r3, sl
100152b6:	0b2d      	lsrs	r5, r5, #12
100152b8:	0d40      	lsrs	r0, r0, #21
100152ba:	4691      	mov	r9, r2
100152bc:	d100      	bne.n	100152c0 <__aeabi_dmul+0x60>
100152be:	e076      	b.n	100153ae <__aeabi_dmul+0x14e>
100152c0:	4a5e      	ldr	r2, [pc, #376]	; (1001543c <__aeabi_dmul+0x1dc>)
100152c2:	4290      	cmp	r0, r2
100152c4:	d06c      	beq.n	100153a0 <__aeabi_dmul+0x140>
100152c6:	2280      	movs	r2, #128	; 0x80
100152c8:	0f5b      	lsrs	r3, r3, #29
100152ca:	0412      	lsls	r2, r2, #16
100152cc:	4313      	orrs	r3, r2
100152ce:	4a5c      	ldr	r2, [pc, #368]	; (10015440 <__aeabi_dmul+0x1e0>)
100152d0:	00ed      	lsls	r5, r5, #3
100152d2:	4694      	mov	ip, r2
100152d4:	431d      	orrs	r5, r3
100152d6:	4653      	mov	r3, sl
100152d8:	2200      	movs	r2, #0
100152da:	00db      	lsls	r3, r3, #3
100152dc:	4460      	add	r0, ip
100152de:	4649      	mov	r1, r9
100152e0:	1836      	adds	r6, r6, r0
100152e2:	1c70      	adds	r0, r6, #1
100152e4:	4061      	eors	r1, r4
100152e6:	9002      	str	r0, [sp, #8]
100152e8:	4317      	orrs	r7, r2
100152ea:	2f0f      	cmp	r7, #15
100152ec:	d900      	bls.n	100152f0 <__aeabi_dmul+0x90>
100152ee:	e0af      	b.n	10015450 <__aeabi_dmul+0x1f0>
100152f0:	4854      	ldr	r0, [pc, #336]	; (10015444 <__aeabi_dmul+0x1e4>)
100152f2:	00bf      	lsls	r7, r7, #2
100152f4:	59c7      	ldr	r7, [r0, r7]
100152f6:	46bf      	mov	pc, r7
100152f8:	465b      	mov	r3, fp
100152fa:	431f      	orrs	r7, r3
100152fc:	d000      	beq.n	10015300 <__aeabi_dmul+0xa0>
100152fe:	e088      	b.n	10015412 <__aeabi_dmul+0x1b2>
10015300:	2300      	movs	r3, #0
10015302:	469b      	mov	fp, r3
10015304:	4698      	mov	r8, r3
10015306:	3302      	adds	r3, #2
10015308:	2708      	movs	r7, #8
1001530a:	9301      	str	r3, [sp, #4]
1001530c:	e7ce      	b.n	100152ac <__aeabi_dmul+0x4c>
1001530e:	4649      	mov	r1, r9
10015310:	2a02      	cmp	r2, #2
10015312:	d06a      	beq.n	100153ea <__aeabi_dmul+0x18a>
10015314:	2a03      	cmp	r2, #3
10015316:	d100      	bne.n	1001531a <__aeabi_dmul+0xba>
10015318:	e209      	b.n	1001572e <__aeabi_dmul+0x4ce>
1001531a:	2a01      	cmp	r2, #1
1001531c:	d000      	beq.n	10015320 <__aeabi_dmul+0xc0>
1001531e:	e1bb      	b.n	10015698 <__aeabi_dmul+0x438>
10015320:	4011      	ands	r1, r2
10015322:	2200      	movs	r2, #0
10015324:	2300      	movs	r3, #0
10015326:	2500      	movs	r5, #0
10015328:	4690      	mov	r8, r2
1001532a:	b2cc      	uxtb	r4, r1
1001532c:	2100      	movs	r1, #0
1001532e:	032d      	lsls	r5, r5, #12
10015330:	0d0a      	lsrs	r2, r1, #20
10015332:	0512      	lsls	r2, r2, #20
10015334:	0b2d      	lsrs	r5, r5, #12
10015336:	4315      	orrs	r5, r2
10015338:	4a43      	ldr	r2, [pc, #268]	; (10015448 <__aeabi_dmul+0x1e8>)
1001533a:	051b      	lsls	r3, r3, #20
1001533c:	4015      	ands	r5, r2
1001533e:	431d      	orrs	r5, r3
10015340:	006d      	lsls	r5, r5, #1
10015342:	07e4      	lsls	r4, r4, #31
10015344:	086d      	lsrs	r5, r5, #1
10015346:	4325      	orrs	r5, r4
10015348:	4640      	mov	r0, r8
1001534a:	0029      	movs	r1, r5
1001534c:	b007      	add	sp, #28
1001534e:	bc3c      	pop	{r2, r3, r4, r5}
10015350:	4690      	mov	r8, r2
10015352:	4699      	mov	r9, r3
10015354:	46a2      	mov	sl, r4
10015356:	46ab      	mov	fp, r5
10015358:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001535a:	4303      	orrs	r3, r0
1001535c:	d052      	beq.n	10015404 <__aeabi_dmul+0x1a4>
1001535e:	465b      	mov	r3, fp
10015360:	2b00      	cmp	r3, #0
10015362:	d100      	bne.n	10015366 <__aeabi_dmul+0x106>
10015364:	e18a      	b.n	1001567c <__aeabi_dmul+0x41c>
10015366:	4658      	mov	r0, fp
10015368:	f000 fef8 	bl	1001615c <__clzsi2>
1001536c:	0003      	movs	r3, r0
1001536e:	3b0b      	subs	r3, #11
10015370:	2b1c      	cmp	r3, #28
10015372:	dd00      	ble.n	10015376 <__aeabi_dmul+0x116>
10015374:	e17b      	b.n	1001566e <__aeabi_dmul+0x40e>
10015376:	221d      	movs	r2, #29
10015378:	1ad3      	subs	r3, r2, r3
1001537a:	003a      	movs	r2, r7
1001537c:	0001      	movs	r1, r0
1001537e:	465d      	mov	r5, fp
10015380:	40da      	lsrs	r2, r3
10015382:	3908      	subs	r1, #8
10015384:	408d      	lsls	r5, r1
10015386:	0013      	movs	r3, r2
10015388:	408f      	lsls	r7, r1
1001538a:	432b      	orrs	r3, r5
1001538c:	469b      	mov	fp, r3
1001538e:	46b8      	mov	r8, r7
10015390:	4b2e      	ldr	r3, [pc, #184]	; (1001544c <__aeabi_dmul+0x1ec>)
10015392:	2700      	movs	r7, #0
10015394:	469c      	mov	ip, r3
10015396:	2300      	movs	r3, #0
10015398:	4460      	add	r0, ip
1001539a:	4246      	negs	r6, r0
1001539c:	9301      	str	r3, [sp, #4]
1001539e:	e785      	b.n	100152ac <__aeabi_dmul+0x4c>
100153a0:	4652      	mov	r2, sl
100153a2:	432a      	orrs	r2, r5
100153a4:	d12c      	bne.n	10015400 <__aeabi_dmul+0x1a0>
100153a6:	2500      	movs	r5, #0
100153a8:	2300      	movs	r3, #0
100153aa:	2202      	movs	r2, #2
100153ac:	e797      	b.n	100152de <__aeabi_dmul+0x7e>
100153ae:	4652      	mov	r2, sl
100153b0:	432a      	orrs	r2, r5
100153b2:	d021      	beq.n	100153f8 <__aeabi_dmul+0x198>
100153b4:	2d00      	cmp	r5, #0
100153b6:	d100      	bne.n	100153ba <__aeabi_dmul+0x15a>
100153b8:	e154      	b.n	10015664 <__aeabi_dmul+0x404>
100153ba:	0028      	movs	r0, r5
100153bc:	f000 fece 	bl	1001615c <__clzsi2>
100153c0:	0003      	movs	r3, r0
100153c2:	3b0b      	subs	r3, #11
100153c4:	2b1c      	cmp	r3, #28
100153c6:	dd00      	ble.n	100153ca <__aeabi_dmul+0x16a>
100153c8:	e146      	b.n	10015658 <__aeabi_dmul+0x3f8>
100153ca:	211d      	movs	r1, #29
100153cc:	1acb      	subs	r3, r1, r3
100153ce:	4651      	mov	r1, sl
100153d0:	0002      	movs	r2, r0
100153d2:	40d9      	lsrs	r1, r3
100153d4:	4653      	mov	r3, sl
100153d6:	3a08      	subs	r2, #8
100153d8:	4095      	lsls	r5, r2
100153da:	4093      	lsls	r3, r2
100153dc:	430d      	orrs	r5, r1
100153de:	4a1b      	ldr	r2, [pc, #108]	; (1001544c <__aeabi_dmul+0x1ec>)
100153e0:	4694      	mov	ip, r2
100153e2:	4460      	add	r0, ip
100153e4:	4240      	negs	r0, r0
100153e6:	2200      	movs	r2, #0
100153e8:	e779      	b.n	100152de <__aeabi_dmul+0x7e>
100153ea:	2401      	movs	r4, #1
100153ec:	2200      	movs	r2, #0
100153ee:	400c      	ands	r4, r1
100153f0:	4b12      	ldr	r3, [pc, #72]	; (1001543c <__aeabi_dmul+0x1dc>)
100153f2:	2500      	movs	r5, #0
100153f4:	4690      	mov	r8, r2
100153f6:	e799      	b.n	1001532c <__aeabi_dmul+0xcc>
100153f8:	2500      	movs	r5, #0
100153fa:	2300      	movs	r3, #0
100153fc:	2201      	movs	r2, #1
100153fe:	e76e      	b.n	100152de <__aeabi_dmul+0x7e>
10015400:	2203      	movs	r2, #3
10015402:	e76c      	b.n	100152de <__aeabi_dmul+0x7e>
10015404:	2300      	movs	r3, #0
10015406:	469b      	mov	fp, r3
10015408:	4698      	mov	r8, r3
1001540a:	3301      	adds	r3, #1
1001540c:	2704      	movs	r7, #4
1001540e:	9301      	str	r3, [sp, #4]
10015410:	e74c      	b.n	100152ac <__aeabi_dmul+0x4c>
10015412:	2303      	movs	r3, #3
10015414:	270c      	movs	r7, #12
10015416:	9301      	str	r3, [sp, #4]
10015418:	e748      	b.n	100152ac <__aeabi_dmul+0x4c>
1001541a:	2300      	movs	r3, #0
1001541c:	2580      	movs	r5, #128	; 0x80
1001541e:	4698      	mov	r8, r3
10015420:	2400      	movs	r4, #0
10015422:	032d      	lsls	r5, r5, #12
10015424:	4b05      	ldr	r3, [pc, #20]	; (1001543c <__aeabi_dmul+0x1dc>)
10015426:	e781      	b.n	1001532c <__aeabi_dmul+0xcc>
10015428:	465d      	mov	r5, fp
1001542a:	4643      	mov	r3, r8
1001542c:	9a01      	ldr	r2, [sp, #4]
1001542e:	e76f      	b.n	10015310 <__aeabi_dmul+0xb0>
10015430:	465d      	mov	r5, fp
10015432:	4643      	mov	r3, r8
10015434:	0021      	movs	r1, r4
10015436:	9a01      	ldr	r2, [sp, #4]
10015438:	e76a      	b.n	10015310 <__aeabi_dmul+0xb0>
1001543a:	46c0      	nop			; (mov r8, r8)
1001543c:	000007ff 	.word	0x000007ff
10015440:	fffffc01 	.word	0xfffffc01
10015444:	10018560 	.word	0x10018560
10015448:	800fffff 	.word	0x800fffff
1001544c:	000003f3 	.word	0x000003f3
10015450:	4642      	mov	r2, r8
10015452:	0c12      	lsrs	r2, r2, #16
10015454:	4691      	mov	r9, r2
10015456:	0c1a      	lsrs	r2, r3, #16
10015458:	4694      	mov	ip, r2
1001545a:	4642      	mov	r2, r8
1001545c:	0417      	lsls	r7, r2, #16
1001545e:	464a      	mov	r2, r9
10015460:	041b      	lsls	r3, r3, #16
10015462:	0c1b      	lsrs	r3, r3, #16
10015464:	435a      	muls	r2, r3
10015466:	4660      	mov	r0, ip
10015468:	4690      	mov	r8, r2
1001546a:	464a      	mov	r2, r9
1001546c:	4342      	muls	r2, r0
1001546e:	0010      	movs	r0, r2
10015470:	9203      	str	r2, [sp, #12]
10015472:	4662      	mov	r2, ip
10015474:	001c      	movs	r4, r3
10015476:	0c3f      	lsrs	r7, r7, #16
10015478:	437a      	muls	r2, r7
1001547a:	437c      	muls	r4, r7
1001547c:	4442      	add	r2, r8
1001547e:	9201      	str	r2, [sp, #4]
10015480:	0c22      	lsrs	r2, r4, #16
10015482:	4692      	mov	sl, r2
10015484:	9a01      	ldr	r2, [sp, #4]
10015486:	4452      	add	r2, sl
10015488:	4590      	cmp	r8, r2
1001548a:	d906      	bls.n	1001549a <__aeabi_dmul+0x23a>
1001548c:	4682      	mov	sl, r0
1001548e:	2080      	movs	r0, #128	; 0x80
10015490:	0240      	lsls	r0, r0, #9
10015492:	4680      	mov	r8, r0
10015494:	44c2      	add	sl, r8
10015496:	4650      	mov	r0, sl
10015498:	9003      	str	r0, [sp, #12]
1001549a:	0c10      	lsrs	r0, r2, #16
1001549c:	9004      	str	r0, [sp, #16]
1001549e:	4648      	mov	r0, r9
100154a0:	0424      	lsls	r4, r4, #16
100154a2:	0c24      	lsrs	r4, r4, #16
100154a4:	0412      	lsls	r2, r2, #16
100154a6:	1912      	adds	r2, r2, r4
100154a8:	9205      	str	r2, [sp, #20]
100154aa:	0c2a      	lsrs	r2, r5, #16
100154ac:	042d      	lsls	r5, r5, #16
100154ae:	0c2d      	lsrs	r5, r5, #16
100154b0:	4368      	muls	r0, r5
100154b2:	002c      	movs	r4, r5
100154b4:	4682      	mov	sl, r0
100154b6:	4648      	mov	r0, r9
100154b8:	437c      	muls	r4, r7
100154ba:	4350      	muls	r0, r2
100154bc:	4681      	mov	r9, r0
100154be:	0c20      	lsrs	r0, r4, #16
100154c0:	4680      	mov	r8, r0
100154c2:	4357      	muls	r7, r2
100154c4:	4457      	add	r7, sl
100154c6:	4447      	add	r7, r8
100154c8:	45ba      	cmp	sl, r7
100154ca:	d903      	bls.n	100154d4 <__aeabi_dmul+0x274>
100154cc:	2080      	movs	r0, #128	; 0x80
100154ce:	0240      	lsls	r0, r0, #9
100154d0:	4680      	mov	r8, r0
100154d2:	44c1      	add	r9, r8
100154d4:	0c38      	lsrs	r0, r7, #16
100154d6:	043f      	lsls	r7, r7, #16
100154d8:	46b8      	mov	r8, r7
100154da:	4448      	add	r0, r9
100154dc:	0424      	lsls	r4, r4, #16
100154de:	0c24      	lsrs	r4, r4, #16
100154e0:	9001      	str	r0, [sp, #4]
100154e2:	9804      	ldr	r0, [sp, #16]
100154e4:	44a0      	add	r8, r4
100154e6:	4440      	add	r0, r8
100154e8:	9004      	str	r0, [sp, #16]
100154ea:	4658      	mov	r0, fp
100154ec:	0c00      	lsrs	r0, r0, #16
100154ee:	4681      	mov	r9, r0
100154f0:	4658      	mov	r0, fp
100154f2:	0404      	lsls	r4, r0, #16
100154f4:	0c20      	lsrs	r0, r4, #16
100154f6:	4682      	mov	sl, r0
100154f8:	0007      	movs	r7, r0
100154fa:	4648      	mov	r0, r9
100154fc:	435f      	muls	r7, r3
100154fe:	464c      	mov	r4, r9
10015500:	4343      	muls	r3, r0
10015502:	4660      	mov	r0, ip
10015504:	4360      	muls	r0, r4
10015506:	4664      	mov	r4, ip
10015508:	4683      	mov	fp, r0
1001550a:	4650      	mov	r0, sl
1001550c:	4344      	muls	r4, r0
1001550e:	0c38      	lsrs	r0, r7, #16
10015510:	4684      	mov	ip, r0
10015512:	18e4      	adds	r4, r4, r3
10015514:	4464      	add	r4, ip
10015516:	42a3      	cmp	r3, r4
10015518:	d903      	bls.n	10015522 <__aeabi_dmul+0x2c2>
1001551a:	2380      	movs	r3, #128	; 0x80
1001551c:	025b      	lsls	r3, r3, #9
1001551e:	469c      	mov	ip, r3
10015520:	44e3      	add	fp, ip
10015522:	4648      	mov	r0, r9
10015524:	043f      	lsls	r7, r7, #16
10015526:	0c23      	lsrs	r3, r4, #16
10015528:	0c3f      	lsrs	r7, r7, #16
1001552a:	0424      	lsls	r4, r4, #16
1001552c:	19e4      	adds	r4, r4, r7
1001552e:	4657      	mov	r7, sl
10015530:	4368      	muls	r0, r5
10015532:	436f      	muls	r7, r5
10015534:	4684      	mov	ip, r0
10015536:	464d      	mov	r5, r9
10015538:	4650      	mov	r0, sl
1001553a:	4355      	muls	r5, r2
1001553c:	4342      	muls	r2, r0
1001553e:	0c38      	lsrs	r0, r7, #16
10015540:	4681      	mov	r9, r0
10015542:	4462      	add	r2, ip
10015544:	444a      	add	r2, r9
10015546:	445b      	add	r3, fp
10015548:	4594      	cmp	ip, r2
1001554a:	d903      	bls.n	10015554 <__aeabi_dmul+0x2f4>
1001554c:	2080      	movs	r0, #128	; 0x80
1001554e:	0240      	lsls	r0, r0, #9
10015550:	4684      	mov	ip, r0
10015552:	4465      	add	r5, ip
10015554:	9803      	ldr	r0, [sp, #12]
10015556:	043f      	lsls	r7, r7, #16
10015558:	4683      	mov	fp, r0
1001555a:	9804      	ldr	r0, [sp, #16]
1001555c:	0c3f      	lsrs	r7, r7, #16
1001555e:	4684      	mov	ip, r0
10015560:	44e3      	add	fp, ip
10015562:	45c3      	cmp	fp, r8
10015564:	4180      	sbcs	r0, r0
10015566:	4240      	negs	r0, r0
10015568:	4682      	mov	sl, r0
1001556a:	0410      	lsls	r0, r2, #16
1001556c:	4684      	mov	ip, r0
1001556e:	9801      	ldr	r0, [sp, #4]
10015570:	4467      	add	r7, ip
10015572:	4684      	mov	ip, r0
10015574:	4467      	add	r7, ip
10015576:	44a3      	add	fp, r4
10015578:	46bc      	mov	ip, r7
1001557a:	45a3      	cmp	fp, r4
1001557c:	41a4      	sbcs	r4, r4
1001557e:	4699      	mov	r9, r3
10015580:	44d4      	add	ip, sl
10015582:	4264      	negs	r4, r4
10015584:	4287      	cmp	r7, r0
10015586:	41bf      	sbcs	r7, r7
10015588:	45d4      	cmp	ip, sl
1001558a:	4180      	sbcs	r0, r0
1001558c:	44e1      	add	r9, ip
1001558e:	46a0      	mov	r8, r4
10015590:	4599      	cmp	r9, r3
10015592:	419b      	sbcs	r3, r3
10015594:	427f      	negs	r7, r7
10015596:	4240      	negs	r0, r0
10015598:	44c8      	add	r8, r9
1001559a:	4307      	orrs	r7, r0
1001559c:	0c12      	lsrs	r2, r2, #16
1001559e:	18ba      	adds	r2, r7, r2
100155a0:	45a0      	cmp	r8, r4
100155a2:	41a4      	sbcs	r4, r4
100155a4:	425f      	negs	r7, r3
100155a6:	003b      	movs	r3, r7
100155a8:	4264      	negs	r4, r4
100155aa:	4323      	orrs	r3, r4
100155ac:	18d7      	adds	r7, r2, r3
100155ae:	4643      	mov	r3, r8
100155b0:	197d      	adds	r5, r7, r5
100155b2:	0ddb      	lsrs	r3, r3, #23
100155b4:	026d      	lsls	r5, r5, #9
100155b6:	431d      	orrs	r5, r3
100155b8:	465b      	mov	r3, fp
100155ba:	025a      	lsls	r2, r3, #9
100155bc:	9b05      	ldr	r3, [sp, #20]
100155be:	431a      	orrs	r2, r3
100155c0:	1e53      	subs	r3, r2, #1
100155c2:	419a      	sbcs	r2, r3
100155c4:	465b      	mov	r3, fp
100155c6:	0ddb      	lsrs	r3, r3, #23
100155c8:	431a      	orrs	r2, r3
100155ca:	4643      	mov	r3, r8
100155cc:	025b      	lsls	r3, r3, #9
100155ce:	4313      	orrs	r3, r2
100155d0:	01ea      	lsls	r2, r5, #7
100155d2:	d507      	bpl.n	100155e4 <__aeabi_dmul+0x384>
100155d4:	2201      	movs	r2, #1
100155d6:	085c      	lsrs	r4, r3, #1
100155d8:	4013      	ands	r3, r2
100155da:	4323      	orrs	r3, r4
100155dc:	07ea      	lsls	r2, r5, #31
100155de:	9e02      	ldr	r6, [sp, #8]
100155e0:	4313      	orrs	r3, r2
100155e2:	086d      	lsrs	r5, r5, #1
100155e4:	4a57      	ldr	r2, [pc, #348]	; (10015744 <__aeabi_dmul+0x4e4>)
100155e6:	18b2      	adds	r2, r6, r2
100155e8:	2a00      	cmp	r2, #0
100155ea:	dd4b      	ble.n	10015684 <__aeabi_dmul+0x424>
100155ec:	0758      	lsls	r0, r3, #29
100155ee:	d009      	beq.n	10015604 <__aeabi_dmul+0x3a4>
100155f0:	200f      	movs	r0, #15
100155f2:	4018      	ands	r0, r3
100155f4:	2804      	cmp	r0, #4
100155f6:	d005      	beq.n	10015604 <__aeabi_dmul+0x3a4>
100155f8:	1d18      	adds	r0, r3, #4
100155fa:	4298      	cmp	r0, r3
100155fc:	419b      	sbcs	r3, r3
100155fe:	425b      	negs	r3, r3
10015600:	18ed      	adds	r5, r5, r3
10015602:	0003      	movs	r3, r0
10015604:	01e8      	lsls	r0, r5, #7
10015606:	d504      	bpl.n	10015612 <__aeabi_dmul+0x3b2>
10015608:	4a4f      	ldr	r2, [pc, #316]	; (10015748 <__aeabi_dmul+0x4e8>)
1001560a:	4015      	ands	r5, r2
1001560c:	2280      	movs	r2, #128	; 0x80
1001560e:	00d2      	lsls	r2, r2, #3
10015610:	18b2      	adds	r2, r6, r2
10015612:	484e      	ldr	r0, [pc, #312]	; (1001574c <__aeabi_dmul+0x4ec>)
10015614:	4282      	cmp	r2, r0
10015616:	dd00      	ble.n	1001561a <__aeabi_dmul+0x3ba>
10015618:	e6e7      	b.n	100153ea <__aeabi_dmul+0x18a>
1001561a:	2401      	movs	r4, #1
1001561c:	08db      	lsrs	r3, r3, #3
1001561e:	0768      	lsls	r0, r5, #29
10015620:	4318      	orrs	r0, r3
10015622:	026d      	lsls	r5, r5, #9
10015624:	0553      	lsls	r3, r2, #21
10015626:	4680      	mov	r8, r0
10015628:	0b2d      	lsrs	r5, r5, #12
1001562a:	0d5b      	lsrs	r3, r3, #21
1001562c:	400c      	ands	r4, r1
1001562e:	e67d      	b.n	1001532c <__aeabi_dmul+0xcc>
10015630:	2280      	movs	r2, #128	; 0x80
10015632:	4659      	mov	r1, fp
10015634:	0312      	lsls	r2, r2, #12
10015636:	4211      	tst	r1, r2
10015638:	d008      	beq.n	1001564c <__aeabi_dmul+0x3ec>
1001563a:	4215      	tst	r5, r2
1001563c:	d106      	bne.n	1001564c <__aeabi_dmul+0x3ec>
1001563e:	4315      	orrs	r5, r2
10015640:	032d      	lsls	r5, r5, #12
10015642:	4698      	mov	r8, r3
10015644:	0b2d      	lsrs	r5, r5, #12
10015646:	464c      	mov	r4, r9
10015648:	4b41      	ldr	r3, [pc, #260]	; (10015750 <__aeabi_dmul+0x4f0>)
1001564a:	e66f      	b.n	1001532c <__aeabi_dmul+0xcc>
1001564c:	465d      	mov	r5, fp
1001564e:	4315      	orrs	r5, r2
10015650:	032d      	lsls	r5, r5, #12
10015652:	0b2d      	lsrs	r5, r5, #12
10015654:	4b3e      	ldr	r3, [pc, #248]	; (10015750 <__aeabi_dmul+0x4f0>)
10015656:	e669      	b.n	1001532c <__aeabi_dmul+0xcc>
10015658:	0003      	movs	r3, r0
1001565a:	4655      	mov	r5, sl
1001565c:	3b28      	subs	r3, #40	; 0x28
1001565e:	409d      	lsls	r5, r3
10015660:	2300      	movs	r3, #0
10015662:	e6bc      	b.n	100153de <__aeabi_dmul+0x17e>
10015664:	4650      	mov	r0, sl
10015666:	f000 fd79 	bl	1001615c <__clzsi2>
1001566a:	3020      	adds	r0, #32
1001566c:	e6a8      	b.n	100153c0 <__aeabi_dmul+0x160>
1001566e:	0003      	movs	r3, r0
10015670:	3b28      	subs	r3, #40	; 0x28
10015672:	409f      	lsls	r7, r3
10015674:	2300      	movs	r3, #0
10015676:	46bb      	mov	fp, r7
10015678:	4698      	mov	r8, r3
1001567a:	e689      	b.n	10015390 <__aeabi_dmul+0x130>
1001567c:	f000 fd6e 	bl	1001615c <__clzsi2>
10015680:	3020      	adds	r0, #32
10015682:	e673      	b.n	1001536c <__aeabi_dmul+0x10c>
10015684:	2401      	movs	r4, #1
10015686:	1aa6      	subs	r6, r4, r2
10015688:	2e38      	cmp	r6, #56	; 0x38
1001568a:	dd07      	ble.n	1001569c <__aeabi_dmul+0x43c>
1001568c:	2200      	movs	r2, #0
1001568e:	400c      	ands	r4, r1
10015690:	2300      	movs	r3, #0
10015692:	2500      	movs	r5, #0
10015694:	4690      	mov	r8, r2
10015696:	e649      	b.n	1001532c <__aeabi_dmul+0xcc>
10015698:	9e02      	ldr	r6, [sp, #8]
1001569a:	e7a3      	b.n	100155e4 <__aeabi_dmul+0x384>
1001569c:	2e1f      	cmp	r6, #31
1001569e:	dc20      	bgt.n	100156e2 <__aeabi_dmul+0x482>
100156a0:	2220      	movs	r2, #32
100156a2:	002c      	movs	r4, r5
100156a4:	0018      	movs	r0, r3
100156a6:	1b92      	subs	r2, r2, r6
100156a8:	40f0      	lsrs	r0, r6
100156aa:	4094      	lsls	r4, r2
100156ac:	4093      	lsls	r3, r2
100156ae:	4304      	orrs	r4, r0
100156b0:	1e58      	subs	r0, r3, #1
100156b2:	4183      	sbcs	r3, r0
100156b4:	431c      	orrs	r4, r3
100156b6:	40f5      	lsrs	r5, r6
100156b8:	0763      	lsls	r3, r4, #29
100156ba:	d009      	beq.n	100156d0 <__aeabi_dmul+0x470>
100156bc:	230f      	movs	r3, #15
100156be:	4023      	ands	r3, r4
100156c0:	2b04      	cmp	r3, #4
100156c2:	d005      	beq.n	100156d0 <__aeabi_dmul+0x470>
100156c4:	0023      	movs	r3, r4
100156c6:	1d1c      	adds	r4, r3, #4
100156c8:	429c      	cmp	r4, r3
100156ca:	4192      	sbcs	r2, r2
100156cc:	4252      	negs	r2, r2
100156ce:	18ad      	adds	r5, r5, r2
100156d0:	022b      	lsls	r3, r5, #8
100156d2:	d51f      	bpl.n	10015714 <__aeabi_dmul+0x4b4>
100156d4:	2401      	movs	r4, #1
100156d6:	2200      	movs	r2, #0
100156d8:	400c      	ands	r4, r1
100156da:	2301      	movs	r3, #1
100156dc:	2500      	movs	r5, #0
100156de:	4690      	mov	r8, r2
100156e0:	e624      	b.n	1001532c <__aeabi_dmul+0xcc>
100156e2:	201f      	movs	r0, #31
100156e4:	002c      	movs	r4, r5
100156e6:	4240      	negs	r0, r0
100156e8:	1a82      	subs	r2, r0, r2
100156ea:	40d4      	lsrs	r4, r2
100156ec:	2e20      	cmp	r6, #32
100156ee:	d01c      	beq.n	1001572a <__aeabi_dmul+0x4ca>
100156f0:	2240      	movs	r2, #64	; 0x40
100156f2:	1b96      	subs	r6, r2, r6
100156f4:	40b5      	lsls	r5, r6
100156f6:	432b      	orrs	r3, r5
100156f8:	1e58      	subs	r0, r3, #1
100156fa:	4183      	sbcs	r3, r0
100156fc:	2007      	movs	r0, #7
100156fe:	4323      	orrs	r3, r4
10015700:	4018      	ands	r0, r3
10015702:	2500      	movs	r5, #0
10015704:	2800      	cmp	r0, #0
10015706:	d009      	beq.n	1001571c <__aeabi_dmul+0x4bc>
10015708:	220f      	movs	r2, #15
1001570a:	2500      	movs	r5, #0
1001570c:	401a      	ands	r2, r3
1001570e:	001c      	movs	r4, r3
10015710:	2a04      	cmp	r2, #4
10015712:	d1d8      	bne.n	100156c6 <__aeabi_dmul+0x466>
10015714:	0023      	movs	r3, r4
10015716:	0768      	lsls	r0, r5, #29
10015718:	026d      	lsls	r5, r5, #9
1001571a:	0b2d      	lsrs	r5, r5, #12
1001571c:	2401      	movs	r4, #1
1001571e:	08db      	lsrs	r3, r3, #3
10015720:	4303      	orrs	r3, r0
10015722:	4698      	mov	r8, r3
10015724:	400c      	ands	r4, r1
10015726:	2300      	movs	r3, #0
10015728:	e600      	b.n	1001532c <__aeabi_dmul+0xcc>
1001572a:	2500      	movs	r5, #0
1001572c:	e7e3      	b.n	100156f6 <__aeabi_dmul+0x496>
1001572e:	2280      	movs	r2, #128	; 0x80
10015730:	2401      	movs	r4, #1
10015732:	0312      	lsls	r2, r2, #12
10015734:	4315      	orrs	r5, r2
10015736:	032d      	lsls	r5, r5, #12
10015738:	4698      	mov	r8, r3
1001573a:	0b2d      	lsrs	r5, r5, #12
1001573c:	400c      	ands	r4, r1
1001573e:	4b04      	ldr	r3, [pc, #16]	; (10015750 <__aeabi_dmul+0x4f0>)
10015740:	e5f4      	b.n	1001532c <__aeabi_dmul+0xcc>
10015742:	46c0      	nop			; (mov r8, r8)
10015744:	000003ff 	.word	0x000003ff
10015748:	feffffff 	.word	0xfeffffff
1001574c:	000007fe 	.word	0x000007fe
10015750:	000007ff 	.word	0x000007ff

10015754 <__aeabi_dsub>:
10015754:	b5f0      	push	{r4, r5, r6, r7, lr}
10015756:	4657      	mov	r7, sl
10015758:	464e      	mov	r6, r9
1001575a:	4645      	mov	r5, r8
1001575c:	b4e0      	push	{r5, r6, r7}
1001575e:	000e      	movs	r6, r1
10015760:	0011      	movs	r1, r2
10015762:	0ff2      	lsrs	r2, r6, #31
10015764:	4692      	mov	sl, r2
10015766:	00c5      	lsls	r5, r0, #3
10015768:	0f42      	lsrs	r2, r0, #29
1001576a:	0318      	lsls	r0, r3, #12
1001576c:	0337      	lsls	r7, r6, #12
1001576e:	0074      	lsls	r4, r6, #1
10015770:	0a40      	lsrs	r0, r0, #9
10015772:	0f4e      	lsrs	r6, r1, #29
10015774:	0a7f      	lsrs	r7, r7, #9
10015776:	4330      	orrs	r0, r6
10015778:	4ecf      	ldr	r6, [pc, #828]	; (10015ab8 <__aeabi_dsub+0x364>)
1001577a:	4317      	orrs	r7, r2
1001577c:	005a      	lsls	r2, r3, #1
1001577e:	0d64      	lsrs	r4, r4, #21
10015780:	0d52      	lsrs	r2, r2, #21
10015782:	0fdb      	lsrs	r3, r3, #31
10015784:	00c9      	lsls	r1, r1, #3
10015786:	42b2      	cmp	r2, r6
10015788:	d100      	bne.n	1001578c <__aeabi_dsub+0x38>
1001578a:	e0e5      	b.n	10015958 <__aeabi_dsub+0x204>
1001578c:	2601      	movs	r6, #1
1001578e:	4073      	eors	r3, r6
10015790:	1aa6      	subs	r6, r4, r2
10015792:	46b4      	mov	ip, r6
10015794:	4553      	cmp	r3, sl
10015796:	d100      	bne.n	1001579a <__aeabi_dsub+0x46>
10015798:	e0af      	b.n	100158fa <__aeabi_dsub+0x1a6>
1001579a:	2e00      	cmp	r6, #0
1001579c:	dc00      	bgt.n	100157a0 <__aeabi_dsub+0x4c>
1001579e:	e10d      	b.n	100159bc <__aeabi_dsub+0x268>
100157a0:	2a00      	cmp	r2, #0
100157a2:	d13a      	bne.n	1001581a <__aeabi_dsub+0xc6>
100157a4:	0003      	movs	r3, r0
100157a6:	430b      	orrs	r3, r1
100157a8:	d000      	beq.n	100157ac <__aeabi_dsub+0x58>
100157aa:	e0e4      	b.n	10015976 <__aeabi_dsub+0x222>
100157ac:	076b      	lsls	r3, r5, #29
100157ae:	d009      	beq.n	100157c4 <__aeabi_dsub+0x70>
100157b0:	230f      	movs	r3, #15
100157b2:	402b      	ands	r3, r5
100157b4:	2b04      	cmp	r3, #4
100157b6:	d005      	beq.n	100157c4 <__aeabi_dsub+0x70>
100157b8:	1d2b      	adds	r3, r5, #4
100157ba:	42ab      	cmp	r3, r5
100157bc:	41ad      	sbcs	r5, r5
100157be:	426d      	negs	r5, r5
100157c0:	197f      	adds	r7, r7, r5
100157c2:	001d      	movs	r5, r3
100157c4:	023b      	lsls	r3, r7, #8
100157c6:	d400      	bmi.n	100157ca <__aeabi_dsub+0x76>
100157c8:	e088      	b.n	100158dc <__aeabi_dsub+0x188>
100157ca:	4bbb      	ldr	r3, [pc, #748]	; (10015ab8 <__aeabi_dsub+0x364>)
100157cc:	3401      	adds	r4, #1
100157ce:	429c      	cmp	r4, r3
100157d0:	d100      	bne.n	100157d4 <__aeabi_dsub+0x80>
100157d2:	e110      	b.n	100159f6 <__aeabi_dsub+0x2a2>
100157d4:	003a      	movs	r2, r7
100157d6:	4bb9      	ldr	r3, [pc, #740]	; (10015abc <__aeabi_dsub+0x368>)
100157d8:	4651      	mov	r1, sl
100157da:	401a      	ands	r2, r3
100157dc:	2301      	movs	r3, #1
100157de:	0750      	lsls	r0, r2, #29
100157e0:	08ed      	lsrs	r5, r5, #3
100157e2:	0252      	lsls	r2, r2, #9
100157e4:	0564      	lsls	r4, r4, #21
100157e6:	4305      	orrs	r5, r0
100157e8:	0b12      	lsrs	r2, r2, #12
100157ea:	0d64      	lsrs	r4, r4, #21
100157ec:	400b      	ands	r3, r1
100157ee:	2100      	movs	r1, #0
100157f0:	0028      	movs	r0, r5
100157f2:	0312      	lsls	r2, r2, #12
100157f4:	0d0d      	lsrs	r5, r1, #20
100157f6:	0b12      	lsrs	r2, r2, #12
100157f8:	0564      	lsls	r4, r4, #21
100157fa:	052d      	lsls	r5, r5, #20
100157fc:	4315      	orrs	r5, r2
100157fe:	0862      	lsrs	r2, r4, #1
10015800:	4caf      	ldr	r4, [pc, #700]	; (10015ac0 <__aeabi_dsub+0x36c>)
10015802:	07db      	lsls	r3, r3, #31
10015804:	402c      	ands	r4, r5
10015806:	4314      	orrs	r4, r2
10015808:	0064      	lsls	r4, r4, #1
1001580a:	0864      	lsrs	r4, r4, #1
1001580c:	431c      	orrs	r4, r3
1001580e:	0021      	movs	r1, r4
10015810:	bc1c      	pop	{r2, r3, r4}
10015812:	4690      	mov	r8, r2
10015814:	4699      	mov	r9, r3
10015816:	46a2      	mov	sl, r4
10015818:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001581a:	4ba7      	ldr	r3, [pc, #668]	; (10015ab8 <__aeabi_dsub+0x364>)
1001581c:	429c      	cmp	r4, r3
1001581e:	d0c5      	beq.n	100157ac <__aeabi_dsub+0x58>
10015820:	2380      	movs	r3, #128	; 0x80
10015822:	041b      	lsls	r3, r3, #16
10015824:	4318      	orrs	r0, r3
10015826:	4663      	mov	r3, ip
10015828:	2b38      	cmp	r3, #56	; 0x38
1001582a:	dd00      	ble.n	1001582e <__aeabi_dsub+0xda>
1001582c:	e0fd      	b.n	10015a2a <__aeabi_dsub+0x2d6>
1001582e:	2b1f      	cmp	r3, #31
10015830:	dd00      	ble.n	10015834 <__aeabi_dsub+0xe0>
10015832:	e130      	b.n	10015a96 <__aeabi_dsub+0x342>
10015834:	4662      	mov	r2, ip
10015836:	2320      	movs	r3, #32
10015838:	1a9b      	subs	r3, r3, r2
1001583a:	0002      	movs	r2, r0
1001583c:	409a      	lsls	r2, r3
1001583e:	4666      	mov	r6, ip
10015840:	4690      	mov	r8, r2
10015842:	000a      	movs	r2, r1
10015844:	4099      	lsls	r1, r3
10015846:	40f2      	lsrs	r2, r6
10015848:	4646      	mov	r6, r8
1001584a:	1e4b      	subs	r3, r1, #1
1001584c:	4199      	sbcs	r1, r3
1001584e:	4332      	orrs	r2, r6
10015850:	4311      	orrs	r1, r2
10015852:	4663      	mov	r3, ip
10015854:	0002      	movs	r2, r0
10015856:	40da      	lsrs	r2, r3
10015858:	1a69      	subs	r1, r5, r1
1001585a:	428d      	cmp	r5, r1
1001585c:	419b      	sbcs	r3, r3
1001585e:	000d      	movs	r5, r1
10015860:	1aba      	subs	r2, r7, r2
10015862:	425b      	negs	r3, r3
10015864:	1ad7      	subs	r7, r2, r3
10015866:	023b      	lsls	r3, r7, #8
10015868:	d535      	bpl.n	100158d6 <__aeabi_dsub+0x182>
1001586a:	027a      	lsls	r2, r7, #9
1001586c:	0a53      	lsrs	r3, r2, #9
1001586e:	4698      	mov	r8, r3
10015870:	4643      	mov	r3, r8
10015872:	2b00      	cmp	r3, #0
10015874:	d100      	bne.n	10015878 <__aeabi_dsub+0x124>
10015876:	e0c4      	b.n	10015a02 <__aeabi_dsub+0x2ae>
10015878:	4640      	mov	r0, r8
1001587a:	f000 fc6f 	bl	1001615c <__clzsi2>
1001587e:	0003      	movs	r3, r0
10015880:	3b08      	subs	r3, #8
10015882:	2b1f      	cmp	r3, #31
10015884:	dd00      	ble.n	10015888 <__aeabi_dsub+0x134>
10015886:	e0c5      	b.n	10015a14 <__aeabi_dsub+0x2c0>
10015888:	2220      	movs	r2, #32
1001588a:	0029      	movs	r1, r5
1001588c:	1ad2      	subs	r2, r2, r3
1001588e:	4647      	mov	r7, r8
10015890:	40d1      	lsrs	r1, r2
10015892:	409f      	lsls	r7, r3
10015894:	000a      	movs	r2, r1
10015896:	409d      	lsls	r5, r3
10015898:	433a      	orrs	r2, r7
1001589a:	429c      	cmp	r4, r3
1001589c:	dd00      	ble.n	100158a0 <__aeabi_dsub+0x14c>
1001589e:	e0c0      	b.n	10015a22 <__aeabi_dsub+0x2ce>
100158a0:	1b1c      	subs	r4, r3, r4
100158a2:	1c63      	adds	r3, r4, #1
100158a4:	2b1f      	cmp	r3, #31
100158a6:	dd00      	ble.n	100158aa <__aeabi_dsub+0x156>
100158a8:	e0e4      	b.n	10015a74 <__aeabi_dsub+0x320>
100158aa:	2120      	movs	r1, #32
100158ac:	0014      	movs	r4, r2
100158ae:	0028      	movs	r0, r5
100158b0:	1ac9      	subs	r1, r1, r3
100158b2:	40d8      	lsrs	r0, r3
100158b4:	408c      	lsls	r4, r1
100158b6:	408d      	lsls	r5, r1
100158b8:	4304      	orrs	r4, r0
100158ba:	40da      	lsrs	r2, r3
100158bc:	1e68      	subs	r0, r5, #1
100158be:	4185      	sbcs	r5, r0
100158c0:	0017      	movs	r7, r2
100158c2:	4325      	orrs	r5, r4
100158c4:	2400      	movs	r4, #0
100158c6:	e771      	b.n	100157ac <__aeabi_dsub+0x58>
100158c8:	4642      	mov	r2, r8
100158ca:	4663      	mov	r3, ip
100158cc:	431a      	orrs	r2, r3
100158ce:	d100      	bne.n	100158d2 <__aeabi_dsub+0x17e>
100158d0:	e24c      	b.n	10015d6c <__aeabi_dsub+0x618>
100158d2:	4667      	mov	r7, ip
100158d4:	4645      	mov	r5, r8
100158d6:	076b      	lsls	r3, r5, #29
100158d8:	d000      	beq.n	100158dc <__aeabi_dsub+0x188>
100158da:	e769      	b.n	100157b0 <__aeabi_dsub+0x5c>
100158dc:	2301      	movs	r3, #1
100158de:	4651      	mov	r1, sl
100158e0:	0778      	lsls	r0, r7, #29
100158e2:	08ed      	lsrs	r5, r5, #3
100158e4:	08fa      	lsrs	r2, r7, #3
100158e6:	400b      	ands	r3, r1
100158e8:	4305      	orrs	r5, r0
100158ea:	4973      	ldr	r1, [pc, #460]	; (10015ab8 <__aeabi_dsub+0x364>)
100158ec:	428c      	cmp	r4, r1
100158ee:	d038      	beq.n	10015962 <__aeabi_dsub+0x20e>
100158f0:	0312      	lsls	r2, r2, #12
100158f2:	0564      	lsls	r4, r4, #21
100158f4:	0b12      	lsrs	r2, r2, #12
100158f6:	0d64      	lsrs	r4, r4, #21
100158f8:	e779      	b.n	100157ee <__aeabi_dsub+0x9a>
100158fa:	2e00      	cmp	r6, #0
100158fc:	dc00      	bgt.n	10015900 <__aeabi_dsub+0x1ac>
100158fe:	e09a      	b.n	10015a36 <__aeabi_dsub+0x2e2>
10015900:	2a00      	cmp	r2, #0
10015902:	d047      	beq.n	10015994 <__aeabi_dsub+0x240>
10015904:	4a6c      	ldr	r2, [pc, #432]	; (10015ab8 <__aeabi_dsub+0x364>)
10015906:	4294      	cmp	r4, r2
10015908:	d100      	bne.n	1001590c <__aeabi_dsub+0x1b8>
1001590a:	e74f      	b.n	100157ac <__aeabi_dsub+0x58>
1001590c:	2280      	movs	r2, #128	; 0x80
1001590e:	0412      	lsls	r2, r2, #16
10015910:	4310      	orrs	r0, r2
10015912:	4662      	mov	r2, ip
10015914:	2a38      	cmp	r2, #56	; 0x38
10015916:	dc00      	bgt.n	1001591a <__aeabi_dsub+0x1c6>
10015918:	e108      	b.n	10015b2c <__aeabi_dsub+0x3d8>
1001591a:	4301      	orrs	r1, r0
1001591c:	1e48      	subs	r0, r1, #1
1001591e:	4181      	sbcs	r1, r0
10015920:	2200      	movs	r2, #0
10015922:	b2c9      	uxtb	r1, r1
10015924:	1949      	adds	r1, r1, r5
10015926:	19d2      	adds	r2, r2, r7
10015928:	42a9      	cmp	r1, r5
1001592a:	41bf      	sbcs	r7, r7
1001592c:	000d      	movs	r5, r1
1001592e:	427f      	negs	r7, r7
10015930:	18bf      	adds	r7, r7, r2
10015932:	023a      	lsls	r2, r7, #8
10015934:	d400      	bmi.n	10015938 <__aeabi_dsub+0x1e4>
10015936:	e142      	b.n	10015bbe <__aeabi_dsub+0x46a>
10015938:	4a5f      	ldr	r2, [pc, #380]	; (10015ab8 <__aeabi_dsub+0x364>)
1001593a:	3401      	adds	r4, #1
1001593c:	4294      	cmp	r4, r2
1001593e:	d100      	bne.n	10015942 <__aeabi_dsub+0x1ee>
10015940:	e14e      	b.n	10015be0 <__aeabi_dsub+0x48c>
10015942:	2001      	movs	r0, #1
10015944:	4a5d      	ldr	r2, [pc, #372]	; (10015abc <__aeabi_dsub+0x368>)
10015946:	0869      	lsrs	r1, r5, #1
10015948:	403a      	ands	r2, r7
1001594a:	4028      	ands	r0, r5
1001594c:	4308      	orrs	r0, r1
1001594e:	07d5      	lsls	r5, r2, #31
10015950:	4305      	orrs	r5, r0
10015952:	0857      	lsrs	r7, r2, #1
10015954:	469a      	mov	sl, r3
10015956:	e729      	b.n	100157ac <__aeabi_dsub+0x58>
10015958:	0006      	movs	r6, r0
1001595a:	430e      	orrs	r6, r1
1001595c:	d000      	beq.n	10015960 <__aeabi_dsub+0x20c>
1001595e:	e717      	b.n	10015790 <__aeabi_dsub+0x3c>
10015960:	e714      	b.n	1001578c <__aeabi_dsub+0x38>
10015962:	0029      	movs	r1, r5
10015964:	4311      	orrs	r1, r2
10015966:	d100      	bne.n	1001596a <__aeabi_dsub+0x216>
10015968:	e1f9      	b.n	10015d5e <__aeabi_dsub+0x60a>
1001596a:	2180      	movs	r1, #128	; 0x80
1001596c:	0309      	lsls	r1, r1, #12
1001596e:	430a      	orrs	r2, r1
10015970:	0312      	lsls	r2, r2, #12
10015972:	0b12      	lsrs	r2, r2, #12
10015974:	e73b      	b.n	100157ee <__aeabi_dsub+0x9a>
10015976:	2301      	movs	r3, #1
10015978:	425b      	negs	r3, r3
1001597a:	4698      	mov	r8, r3
1001597c:	44c4      	add	ip, r8
1001597e:	4663      	mov	r3, ip
10015980:	2b00      	cmp	r3, #0
10015982:	d172      	bne.n	10015a6a <__aeabi_dsub+0x316>
10015984:	1a69      	subs	r1, r5, r1
10015986:	428d      	cmp	r5, r1
10015988:	419b      	sbcs	r3, r3
1001598a:	1a3f      	subs	r7, r7, r0
1001598c:	425b      	negs	r3, r3
1001598e:	1aff      	subs	r7, r7, r3
10015990:	000d      	movs	r5, r1
10015992:	e768      	b.n	10015866 <__aeabi_dsub+0x112>
10015994:	0002      	movs	r2, r0
10015996:	430a      	orrs	r2, r1
10015998:	d100      	bne.n	1001599c <__aeabi_dsub+0x248>
1001599a:	e707      	b.n	100157ac <__aeabi_dsub+0x58>
1001599c:	2201      	movs	r2, #1
1001599e:	4252      	negs	r2, r2
100159a0:	4690      	mov	r8, r2
100159a2:	44c4      	add	ip, r8
100159a4:	4662      	mov	r2, ip
100159a6:	2a00      	cmp	r2, #0
100159a8:	d000      	beq.n	100159ac <__aeabi_dsub+0x258>
100159aa:	e0e6      	b.n	10015b7a <__aeabi_dsub+0x426>
100159ac:	1869      	adds	r1, r5, r1
100159ae:	42a9      	cmp	r1, r5
100159b0:	41b6      	sbcs	r6, r6
100159b2:	183f      	adds	r7, r7, r0
100159b4:	4276      	negs	r6, r6
100159b6:	19f7      	adds	r7, r6, r7
100159b8:	000d      	movs	r5, r1
100159ba:	e7ba      	b.n	10015932 <__aeabi_dsub+0x1de>
100159bc:	2e00      	cmp	r6, #0
100159be:	d000      	beq.n	100159c2 <__aeabi_dsub+0x26e>
100159c0:	e080      	b.n	10015ac4 <__aeabi_dsub+0x370>
100159c2:	1c62      	adds	r2, r4, #1
100159c4:	0552      	lsls	r2, r2, #21
100159c6:	0d52      	lsrs	r2, r2, #21
100159c8:	2a01      	cmp	r2, #1
100159ca:	dc00      	bgt.n	100159ce <__aeabi_dsub+0x27a>
100159cc:	e0f9      	b.n	10015bc2 <__aeabi_dsub+0x46e>
100159ce:	1a6a      	subs	r2, r5, r1
100159d0:	4691      	mov	r9, r2
100159d2:	454d      	cmp	r5, r9
100159d4:	41b6      	sbcs	r6, r6
100159d6:	1a3a      	subs	r2, r7, r0
100159d8:	4276      	negs	r6, r6
100159da:	1b92      	subs	r2, r2, r6
100159dc:	4690      	mov	r8, r2
100159de:	0212      	lsls	r2, r2, #8
100159e0:	d400      	bmi.n	100159e4 <__aeabi_dsub+0x290>
100159e2:	e099      	b.n	10015b18 <__aeabi_dsub+0x3c4>
100159e4:	1b4d      	subs	r5, r1, r5
100159e6:	42a9      	cmp	r1, r5
100159e8:	4189      	sbcs	r1, r1
100159ea:	1bc7      	subs	r7, r0, r7
100159ec:	4249      	negs	r1, r1
100159ee:	1a7a      	subs	r2, r7, r1
100159f0:	4690      	mov	r8, r2
100159f2:	469a      	mov	sl, r3
100159f4:	e73c      	b.n	10015870 <__aeabi_dsub+0x11c>
100159f6:	4652      	mov	r2, sl
100159f8:	2301      	movs	r3, #1
100159fa:	2500      	movs	r5, #0
100159fc:	4013      	ands	r3, r2
100159fe:	2200      	movs	r2, #0
10015a00:	e6f5      	b.n	100157ee <__aeabi_dsub+0x9a>
10015a02:	0028      	movs	r0, r5
10015a04:	f000 fbaa 	bl	1001615c <__clzsi2>
10015a08:	3020      	adds	r0, #32
10015a0a:	0003      	movs	r3, r0
10015a0c:	3b08      	subs	r3, #8
10015a0e:	2b1f      	cmp	r3, #31
10015a10:	dc00      	bgt.n	10015a14 <__aeabi_dsub+0x2c0>
10015a12:	e739      	b.n	10015888 <__aeabi_dsub+0x134>
10015a14:	002a      	movs	r2, r5
10015a16:	3828      	subs	r0, #40	; 0x28
10015a18:	4082      	lsls	r2, r0
10015a1a:	2500      	movs	r5, #0
10015a1c:	429c      	cmp	r4, r3
10015a1e:	dc00      	bgt.n	10015a22 <__aeabi_dsub+0x2ce>
10015a20:	e73e      	b.n	100158a0 <__aeabi_dsub+0x14c>
10015a22:	4f26      	ldr	r7, [pc, #152]	; (10015abc <__aeabi_dsub+0x368>)
10015a24:	1ae4      	subs	r4, r4, r3
10015a26:	4017      	ands	r7, r2
10015a28:	e6c0      	b.n	100157ac <__aeabi_dsub+0x58>
10015a2a:	4301      	orrs	r1, r0
10015a2c:	1e48      	subs	r0, r1, #1
10015a2e:	4181      	sbcs	r1, r0
10015a30:	2200      	movs	r2, #0
10015a32:	b2c9      	uxtb	r1, r1
10015a34:	e710      	b.n	10015858 <__aeabi_dsub+0x104>
10015a36:	2e00      	cmp	r6, #0
10015a38:	d000      	beq.n	10015a3c <__aeabi_dsub+0x2e8>
10015a3a:	e0f1      	b.n	10015c20 <__aeabi_dsub+0x4cc>
10015a3c:	1c62      	adds	r2, r4, #1
10015a3e:	4694      	mov	ip, r2
10015a40:	0552      	lsls	r2, r2, #21
10015a42:	0d52      	lsrs	r2, r2, #21
10015a44:	2a01      	cmp	r2, #1
10015a46:	dc00      	bgt.n	10015a4a <__aeabi_dsub+0x2f6>
10015a48:	e0a0      	b.n	10015b8c <__aeabi_dsub+0x438>
10015a4a:	4a1b      	ldr	r2, [pc, #108]	; (10015ab8 <__aeabi_dsub+0x364>)
10015a4c:	4594      	cmp	ip, r2
10015a4e:	d100      	bne.n	10015a52 <__aeabi_dsub+0x2fe>
10015a50:	e0c5      	b.n	10015bde <__aeabi_dsub+0x48a>
10015a52:	1869      	adds	r1, r5, r1
10015a54:	42a9      	cmp	r1, r5
10015a56:	4192      	sbcs	r2, r2
10015a58:	183f      	adds	r7, r7, r0
10015a5a:	4252      	negs	r2, r2
10015a5c:	19d2      	adds	r2, r2, r7
10015a5e:	0849      	lsrs	r1, r1, #1
10015a60:	07d5      	lsls	r5, r2, #31
10015a62:	430d      	orrs	r5, r1
10015a64:	0857      	lsrs	r7, r2, #1
10015a66:	4664      	mov	r4, ip
10015a68:	e6a0      	b.n	100157ac <__aeabi_dsub+0x58>
10015a6a:	4b13      	ldr	r3, [pc, #76]	; (10015ab8 <__aeabi_dsub+0x364>)
10015a6c:	429c      	cmp	r4, r3
10015a6e:	d000      	beq.n	10015a72 <__aeabi_dsub+0x31e>
10015a70:	e6d9      	b.n	10015826 <__aeabi_dsub+0xd2>
10015a72:	e69b      	b.n	100157ac <__aeabi_dsub+0x58>
10015a74:	0011      	movs	r1, r2
10015a76:	3c1f      	subs	r4, #31
10015a78:	40e1      	lsrs	r1, r4
10015a7a:	000c      	movs	r4, r1
10015a7c:	2b20      	cmp	r3, #32
10015a7e:	d100      	bne.n	10015a82 <__aeabi_dsub+0x32e>
10015a80:	e080      	b.n	10015b84 <__aeabi_dsub+0x430>
10015a82:	2140      	movs	r1, #64	; 0x40
10015a84:	1acb      	subs	r3, r1, r3
10015a86:	409a      	lsls	r2, r3
10015a88:	4315      	orrs	r5, r2
10015a8a:	1e6a      	subs	r2, r5, #1
10015a8c:	4195      	sbcs	r5, r2
10015a8e:	2700      	movs	r7, #0
10015a90:	4325      	orrs	r5, r4
10015a92:	2400      	movs	r4, #0
10015a94:	e71f      	b.n	100158d6 <__aeabi_dsub+0x182>
10015a96:	4663      	mov	r3, ip
10015a98:	0002      	movs	r2, r0
10015a9a:	3b20      	subs	r3, #32
10015a9c:	40da      	lsrs	r2, r3
10015a9e:	4663      	mov	r3, ip
10015aa0:	2b20      	cmp	r3, #32
10015aa2:	d071      	beq.n	10015b88 <__aeabi_dsub+0x434>
10015aa4:	2340      	movs	r3, #64	; 0x40
10015aa6:	4666      	mov	r6, ip
10015aa8:	1b9b      	subs	r3, r3, r6
10015aaa:	4098      	lsls	r0, r3
10015aac:	4301      	orrs	r1, r0
10015aae:	1e48      	subs	r0, r1, #1
10015ab0:	4181      	sbcs	r1, r0
10015ab2:	4311      	orrs	r1, r2
10015ab4:	2200      	movs	r2, #0
10015ab6:	e6cf      	b.n	10015858 <__aeabi_dsub+0x104>
10015ab8:	000007ff 	.word	0x000007ff
10015abc:	ff7fffff 	.word	0xff7fffff
10015ac0:	800fffff 	.word	0x800fffff
10015ac4:	2c00      	cmp	r4, #0
10015ac6:	d048      	beq.n	10015b5a <__aeabi_dsub+0x406>
10015ac8:	4cca      	ldr	r4, [pc, #808]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015aca:	42a2      	cmp	r2, r4
10015acc:	d100      	bne.n	10015ad0 <__aeabi_dsub+0x37c>
10015ace:	e0a2      	b.n	10015c16 <__aeabi_dsub+0x4c2>
10015ad0:	4274      	negs	r4, r6
10015ad2:	46a1      	mov	r9, r4
10015ad4:	2480      	movs	r4, #128	; 0x80
10015ad6:	0424      	lsls	r4, r4, #16
10015ad8:	4327      	orrs	r7, r4
10015ada:	464c      	mov	r4, r9
10015adc:	2c38      	cmp	r4, #56	; 0x38
10015ade:	dd00      	ble.n	10015ae2 <__aeabi_dsub+0x38e>
10015ae0:	e0db      	b.n	10015c9a <__aeabi_dsub+0x546>
10015ae2:	2c1f      	cmp	r4, #31
10015ae4:	dd00      	ble.n	10015ae8 <__aeabi_dsub+0x394>
10015ae6:	e144      	b.n	10015d72 <__aeabi_dsub+0x61e>
10015ae8:	464e      	mov	r6, r9
10015aea:	2420      	movs	r4, #32
10015aec:	1ba4      	subs	r4, r4, r6
10015aee:	003e      	movs	r6, r7
10015af0:	40a6      	lsls	r6, r4
10015af2:	46a2      	mov	sl, r4
10015af4:	46b0      	mov	r8, r6
10015af6:	464c      	mov	r4, r9
10015af8:	002e      	movs	r6, r5
10015afa:	40e6      	lsrs	r6, r4
10015afc:	46b4      	mov	ip, r6
10015afe:	4646      	mov	r6, r8
10015b00:	4664      	mov	r4, ip
10015b02:	4326      	orrs	r6, r4
10015b04:	4654      	mov	r4, sl
10015b06:	40a5      	lsls	r5, r4
10015b08:	1e6c      	subs	r4, r5, #1
10015b0a:	41a5      	sbcs	r5, r4
10015b0c:	0034      	movs	r4, r6
10015b0e:	432c      	orrs	r4, r5
10015b10:	464d      	mov	r5, r9
10015b12:	40ef      	lsrs	r7, r5
10015b14:	1b0d      	subs	r5, r1, r4
10015b16:	e028      	b.n	10015b6a <__aeabi_dsub+0x416>
10015b18:	464a      	mov	r2, r9
10015b1a:	4643      	mov	r3, r8
10015b1c:	464d      	mov	r5, r9
10015b1e:	431a      	orrs	r2, r3
10015b20:	d000      	beq.n	10015b24 <__aeabi_dsub+0x3d0>
10015b22:	e6a5      	b.n	10015870 <__aeabi_dsub+0x11c>
10015b24:	2300      	movs	r3, #0
10015b26:	2400      	movs	r4, #0
10015b28:	2500      	movs	r5, #0
10015b2a:	e6de      	b.n	100158ea <__aeabi_dsub+0x196>
10015b2c:	2a1f      	cmp	r2, #31
10015b2e:	dc5a      	bgt.n	10015be6 <__aeabi_dsub+0x492>
10015b30:	4666      	mov	r6, ip
10015b32:	2220      	movs	r2, #32
10015b34:	1b92      	subs	r2, r2, r6
10015b36:	0006      	movs	r6, r0
10015b38:	4096      	lsls	r6, r2
10015b3a:	4691      	mov	r9, r2
10015b3c:	46b0      	mov	r8, r6
10015b3e:	4662      	mov	r2, ip
10015b40:	000e      	movs	r6, r1
10015b42:	40d6      	lsrs	r6, r2
10015b44:	4642      	mov	r2, r8
10015b46:	4316      	orrs	r6, r2
10015b48:	464a      	mov	r2, r9
10015b4a:	4091      	lsls	r1, r2
10015b4c:	1e4a      	subs	r2, r1, #1
10015b4e:	4191      	sbcs	r1, r2
10015b50:	0002      	movs	r2, r0
10015b52:	4660      	mov	r0, ip
10015b54:	4331      	orrs	r1, r6
10015b56:	40c2      	lsrs	r2, r0
10015b58:	e6e4      	b.n	10015924 <__aeabi_dsub+0x1d0>
10015b5a:	003c      	movs	r4, r7
10015b5c:	432c      	orrs	r4, r5
10015b5e:	d05a      	beq.n	10015c16 <__aeabi_dsub+0x4c2>
10015b60:	43f4      	mvns	r4, r6
10015b62:	46a1      	mov	r9, r4
10015b64:	2c00      	cmp	r4, #0
10015b66:	d152      	bne.n	10015c0e <__aeabi_dsub+0x4ba>
10015b68:	1b4d      	subs	r5, r1, r5
10015b6a:	42a9      	cmp	r1, r5
10015b6c:	4189      	sbcs	r1, r1
10015b6e:	1bc7      	subs	r7, r0, r7
10015b70:	4249      	negs	r1, r1
10015b72:	1a7f      	subs	r7, r7, r1
10015b74:	0014      	movs	r4, r2
10015b76:	469a      	mov	sl, r3
10015b78:	e675      	b.n	10015866 <__aeabi_dsub+0x112>
10015b7a:	4a9e      	ldr	r2, [pc, #632]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015b7c:	4294      	cmp	r4, r2
10015b7e:	d000      	beq.n	10015b82 <__aeabi_dsub+0x42e>
10015b80:	e6c7      	b.n	10015912 <__aeabi_dsub+0x1be>
10015b82:	e613      	b.n	100157ac <__aeabi_dsub+0x58>
10015b84:	2200      	movs	r2, #0
10015b86:	e77f      	b.n	10015a88 <__aeabi_dsub+0x334>
10015b88:	2000      	movs	r0, #0
10015b8a:	e78f      	b.n	10015aac <__aeabi_dsub+0x358>
10015b8c:	2c00      	cmp	r4, #0
10015b8e:	d000      	beq.n	10015b92 <__aeabi_dsub+0x43e>
10015b90:	e0c8      	b.n	10015d24 <__aeabi_dsub+0x5d0>
10015b92:	003b      	movs	r3, r7
10015b94:	432b      	orrs	r3, r5
10015b96:	d100      	bne.n	10015b9a <__aeabi_dsub+0x446>
10015b98:	e10f      	b.n	10015dba <__aeabi_dsub+0x666>
10015b9a:	0003      	movs	r3, r0
10015b9c:	430b      	orrs	r3, r1
10015b9e:	d100      	bne.n	10015ba2 <__aeabi_dsub+0x44e>
10015ba0:	e604      	b.n	100157ac <__aeabi_dsub+0x58>
10015ba2:	1869      	adds	r1, r5, r1
10015ba4:	42a9      	cmp	r1, r5
10015ba6:	419b      	sbcs	r3, r3
10015ba8:	183f      	adds	r7, r7, r0
10015baa:	425b      	negs	r3, r3
10015bac:	19df      	adds	r7, r3, r7
10015bae:	023b      	lsls	r3, r7, #8
10015bb0:	d400      	bmi.n	10015bb4 <__aeabi_dsub+0x460>
10015bb2:	e11a      	b.n	10015dea <__aeabi_dsub+0x696>
10015bb4:	4b90      	ldr	r3, [pc, #576]	; (10015df8 <__aeabi_dsub+0x6a4>)
10015bb6:	000d      	movs	r5, r1
10015bb8:	401f      	ands	r7, r3
10015bba:	4664      	mov	r4, ip
10015bbc:	e5f6      	b.n	100157ac <__aeabi_dsub+0x58>
10015bbe:	469a      	mov	sl, r3
10015bc0:	e689      	b.n	100158d6 <__aeabi_dsub+0x182>
10015bc2:	003a      	movs	r2, r7
10015bc4:	432a      	orrs	r2, r5
10015bc6:	2c00      	cmp	r4, #0
10015bc8:	d15c      	bne.n	10015c84 <__aeabi_dsub+0x530>
10015bca:	2a00      	cmp	r2, #0
10015bcc:	d175      	bne.n	10015cba <__aeabi_dsub+0x566>
10015bce:	0002      	movs	r2, r0
10015bd0:	430a      	orrs	r2, r1
10015bd2:	d100      	bne.n	10015bd6 <__aeabi_dsub+0x482>
10015bd4:	e0ca      	b.n	10015d6c <__aeabi_dsub+0x618>
10015bd6:	0007      	movs	r7, r0
10015bd8:	000d      	movs	r5, r1
10015bda:	469a      	mov	sl, r3
10015bdc:	e5e6      	b.n	100157ac <__aeabi_dsub+0x58>
10015bde:	4664      	mov	r4, ip
10015be0:	2200      	movs	r2, #0
10015be2:	2500      	movs	r5, #0
10015be4:	e681      	b.n	100158ea <__aeabi_dsub+0x196>
10015be6:	4662      	mov	r2, ip
10015be8:	0006      	movs	r6, r0
10015bea:	3a20      	subs	r2, #32
10015bec:	40d6      	lsrs	r6, r2
10015bee:	4662      	mov	r2, ip
10015bf0:	46b0      	mov	r8, r6
10015bf2:	2a20      	cmp	r2, #32
10015bf4:	d100      	bne.n	10015bf8 <__aeabi_dsub+0x4a4>
10015bf6:	e0b7      	b.n	10015d68 <__aeabi_dsub+0x614>
10015bf8:	2240      	movs	r2, #64	; 0x40
10015bfa:	4666      	mov	r6, ip
10015bfc:	1b92      	subs	r2, r2, r6
10015bfe:	4090      	lsls	r0, r2
10015c00:	4301      	orrs	r1, r0
10015c02:	4642      	mov	r2, r8
10015c04:	1e48      	subs	r0, r1, #1
10015c06:	4181      	sbcs	r1, r0
10015c08:	4311      	orrs	r1, r2
10015c0a:	2200      	movs	r2, #0
10015c0c:	e68a      	b.n	10015924 <__aeabi_dsub+0x1d0>
10015c0e:	4c79      	ldr	r4, [pc, #484]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015c10:	42a2      	cmp	r2, r4
10015c12:	d000      	beq.n	10015c16 <__aeabi_dsub+0x4c2>
10015c14:	e761      	b.n	10015ada <__aeabi_dsub+0x386>
10015c16:	0007      	movs	r7, r0
10015c18:	000d      	movs	r5, r1
10015c1a:	0014      	movs	r4, r2
10015c1c:	469a      	mov	sl, r3
10015c1e:	e5c5      	b.n	100157ac <__aeabi_dsub+0x58>
10015c20:	2c00      	cmp	r4, #0
10015c22:	d141      	bne.n	10015ca8 <__aeabi_dsub+0x554>
10015c24:	003c      	movs	r4, r7
10015c26:	432c      	orrs	r4, r5
10015c28:	d078      	beq.n	10015d1c <__aeabi_dsub+0x5c8>
10015c2a:	43f4      	mvns	r4, r6
10015c2c:	46a1      	mov	r9, r4
10015c2e:	2c00      	cmp	r4, #0
10015c30:	d020      	beq.n	10015c74 <__aeabi_dsub+0x520>
10015c32:	4c70      	ldr	r4, [pc, #448]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015c34:	42a2      	cmp	r2, r4
10015c36:	d071      	beq.n	10015d1c <__aeabi_dsub+0x5c8>
10015c38:	464c      	mov	r4, r9
10015c3a:	2c38      	cmp	r4, #56	; 0x38
10015c3c:	dd00      	ble.n	10015c40 <__aeabi_dsub+0x4ec>
10015c3e:	e0b2      	b.n	10015da6 <__aeabi_dsub+0x652>
10015c40:	2c1f      	cmp	r4, #31
10015c42:	dd00      	ble.n	10015c46 <__aeabi_dsub+0x4f2>
10015c44:	e0bc      	b.n	10015dc0 <__aeabi_dsub+0x66c>
10015c46:	2620      	movs	r6, #32
10015c48:	1b34      	subs	r4, r6, r4
10015c4a:	46a2      	mov	sl, r4
10015c4c:	003c      	movs	r4, r7
10015c4e:	4656      	mov	r6, sl
10015c50:	40b4      	lsls	r4, r6
10015c52:	464e      	mov	r6, r9
10015c54:	46a0      	mov	r8, r4
10015c56:	002c      	movs	r4, r5
10015c58:	40f4      	lsrs	r4, r6
10015c5a:	46a4      	mov	ip, r4
10015c5c:	4644      	mov	r4, r8
10015c5e:	4666      	mov	r6, ip
10015c60:	4334      	orrs	r4, r6
10015c62:	46a4      	mov	ip, r4
10015c64:	4654      	mov	r4, sl
10015c66:	40a5      	lsls	r5, r4
10015c68:	4664      	mov	r4, ip
10015c6a:	1e6e      	subs	r6, r5, #1
10015c6c:	41b5      	sbcs	r5, r6
10015c6e:	4325      	orrs	r5, r4
10015c70:	464c      	mov	r4, r9
10015c72:	40e7      	lsrs	r7, r4
10015c74:	186d      	adds	r5, r5, r1
10015c76:	428d      	cmp	r5, r1
10015c78:	4189      	sbcs	r1, r1
10015c7a:	183f      	adds	r7, r7, r0
10015c7c:	4249      	negs	r1, r1
10015c7e:	19cf      	adds	r7, r1, r7
10015c80:	0014      	movs	r4, r2
10015c82:	e656      	b.n	10015932 <__aeabi_dsub+0x1de>
10015c84:	2a00      	cmp	r2, #0
10015c86:	d12f      	bne.n	10015ce8 <__aeabi_dsub+0x594>
10015c88:	0002      	movs	r2, r0
10015c8a:	430a      	orrs	r2, r1
10015c8c:	d100      	bne.n	10015c90 <__aeabi_dsub+0x53c>
10015c8e:	e084      	b.n	10015d9a <__aeabi_dsub+0x646>
10015c90:	0007      	movs	r7, r0
10015c92:	000d      	movs	r5, r1
10015c94:	469a      	mov	sl, r3
10015c96:	4c57      	ldr	r4, [pc, #348]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015c98:	e588      	b.n	100157ac <__aeabi_dsub+0x58>
10015c9a:	433d      	orrs	r5, r7
10015c9c:	1e6f      	subs	r7, r5, #1
10015c9e:	41bd      	sbcs	r5, r7
10015ca0:	b2ec      	uxtb	r4, r5
10015ca2:	2700      	movs	r7, #0
10015ca4:	1b0d      	subs	r5, r1, r4
10015ca6:	e760      	b.n	10015b6a <__aeabi_dsub+0x416>
10015ca8:	4c52      	ldr	r4, [pc, #328]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015caa:	42a2      	cmp	r2, r4
10015cac:	d036      	beq.n	10015d1c <__aeabi_dsub+0x5c8>
10015cae:	4274      	negs	r4, r6
10015cb0:	2680      	movs	r6, #128	; 0x80
10015cb2:	0436      	lsls	r6, r6, #16
10015cb4:	46a1      	mov	r9, r4
10015cb6:	4337      	orrs	r7, r6
10015cb8:	e7be      	b.n	10015c38 <__aeabi_dsub+0x4e4>
10015cba:	0002      	movs	r2, r0
10015cbc:	430a      	orrs	r2, r1
10015cbe:	d100      	bne.n	10015cc2 <__aeabi_dsub+0x56e>
10015cc0:	e574      	b.n	100157ac <__aeabi_dsub+0x58>
10015cc2:	1a6a      	subs	r2, r5, r1
10015cc4:	4690      	mov	r8, r2
10015cc6:	4545      	cmp	r5, r8
10015cc8:	41b6      	sbcs	r6, r6
10015cca:	1a3a      	subs	r2, r7, r0
10015ccc:	4276      	negs	r6, r6
10015cce:	1b92      	subs	r2, r2, r6
10015cd0:	4694      	mov	ip, r2
10015cd2:	0212      	lsls	r2, r2, #8
10015cd4:	d400      	bmi.n	10015cd8 <__aeabi_dsub+0x584>
10015cd6:	e5f7      	b.n	100158c8 <__aeabi_dsub+0x174>
10015cd8:	1b4d      	subs	r5, r1, r5
10015cda:	42a9      	cmp	r1, r5
10015cdc:	4189      	sbcs	r1, r1
10015cde:	1bc7      	subs	r7, r0, r7
10015ce0:	4249      	negs	r1, r1
10015ce2:	1a7f      	subs	r7, r7, r1
10015ce4:	469a      	mov	sl, r3
10015ce6:	e561      	b.n	100157ac <__aeabi_dsub+0x58>
10015ce8:	0002      	movs	r2, r0
10015cea:	430a      	orrs	r2, r1
10015cec:	d03a      	beq.n	10015d64 <__aeabi_dsub+0x610>
10015cee:	08ed      	lsrs	r5, r5, #3
10015cf0:	077c      	lsls	r4, r7, #29
10015cf2:	432c      	orrs	r4, r5
10015cf4:	2580      	movs	r5, #128	; 0x80
10015cf6:	08fa      	lsrs	r2, r7, #3
10015cf8:	032d      	lsls	r5, r5, #12
10015cfa:	422a      	tst	r2, r5
10015cfc:	d008      	beq.n	10015d10 <__aeabi_dsub+0x5bc>
10015cfe:	08c7      	lsrs	r7, r0, #3
10015d00:	422f      	tst	r7, r5
10015d02:	d105      	bne.n	10015d10 <__aeabi_dsub+0x5bc>
10015d04:	0745      	lsls	r5, r0, #29
10015d06:	002c      	movs	r4, r5
10015d08:	003a      	movs	r2, r7
10015d0a:	469a      	mov	sl, r3
10015d0c:	08c9      	lsrs	r1, r1, #3
10015d0e:	430c      	orrs	r4, r1
10015d10:	0f67      	lsrs	r7, r4, #29
10015d12:	00d2      	lsls	r2, r2, #3
10015d14:	00e5      	lsls	r5, r4, #3
10015d16:	4317      	orrs	r7, r2
10015d18:	4c36      	ldr	r4, [pc, #216]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015d1a:	e547      	b.n	100157ac <__aeabi_dsub+0x58>
10015d1c:	0007      	movs	r7, r0
10015d1e:	000d      	movs	r5, r1
10015d20:	0014      	movs	r4, r2
10015d22:	e543      	b.n	100157ac <__aeabi_dsub+0x58>
10015d24:	003a      	movs	r2, r7
10015d26:	432a      	orrs	r2, r5
10015d28:	d043      	beq.n	10015db2 <__aeabi_dsub+0x65e>
10015d2a:	0002      	movs	r2, r0
10015d2c:	430a      	orrs	r2, r1
10015d2e:	d019      	beq.n	10015d64 <__aeabi_dsub+0x610>
10015d30:	08ed      	lsrs	r5, r5, #3
10015d32:	077c      	lsls	r4, r7, #29
10015d34:	432c      	orrs	r4, r5
10015d36:	2580      	movs	r5, #128	; 0x80
10015d38:	08fa      	lsrs	r2, r7, #3
10015d3a:	032d      	lsls	r5, r5, #12
10015d3c:	422a      	tst	r2, r5
10015d3e:	d007      	beq.n	10015d50 <__aeabi_dsub+0x5fc>
10015d40:	08c6      	lsrs	r6, r0, #3
10015d42:	422e      	tst	r6, r5
10015d44:	d104      	bne.n	10015d50 <__aeabi_dsub+0x5fc>
10015d46:	0747      	lsls	r7, r0, #29
10015d48:	003c      	movs	r4, r7
10015d4a:	0032      	movs	r2, r6
10015d4c:	08c9      	lsrs	r1, r1, #3
10015d4e:	430c      	orrs	r4, r1
10015d50:	00d7      	lsls	r7, r2, #3
10015d52:	0f62      	lsrs	r2, r4, #29
10015d54:	00e5      	lsls	r5, r4, #3
10015d56:	4317      	orrs	r7, r2
10015d58:	469a      	mov	sl, r3
10015d5a:	4c26      	ldr	r4, [pc, #152]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015d5c:	e526      	b.n	100157ac <__aeabi_dsub+0x58>
10015d5e:	2200      	movs	r2, #0
10015d60:	2500      	movs	r5, #0
10015d62:	e544      	b.n	100157ee <__aeabi_dsub+0x9a>
10015d64:	4c23      	ldr	r4, [pc, #140]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015d66:	e521      	b.n	100157ac <__aeabi_dsub+0x58>
10015d68:	2000      	movs	r0, #0
10015d6a:	e749      	b.n	10015c00 <__aeabi_dsub+0x4ac>
10015d6c:	2300      	movs	r3, #0
10015d6e:	2500      	movs	r5, #0
10015d70:	e5bb      	b.n	100158ea <__aeabi_dsub+0x196>
10015d72:	464c      	mov	r4, r9
10015d74:	003e      	movs	r6, r7
10015d76:	3c20      	subs	r4, #32
10015d78:	40e6      	lsrs	r6, r4
10015d7a:	464c      	mov	r4, r9
10015d7c:	46b4      	mov	ip, r6
10015d7e:	2c20      	cmp	r4, #32
10015d80:	d031      	beq.n	10015de6 <__aeabi_dsub+0x692>
10015d82:	2440      	movs	r4, #64	; 0x40
10015d84:	464e      	mov	r6, r9
10015d86:	1ba6      	subs	r6, r4, r6
10015d88:	40b7      	lsls	r7, r6
10015d8a:	433d      	orrs	r5, r7
10015d8c:	1e6c      	subs	r4, r5, #1
10015d8e:	41a5      	sbcs	r5, r4
10015d90:	4664      	mov	r4, ip
10015d92:	432c      	orrs	r4, r5
10015d94:	2700      	movs	r7, #0
10015d96:	1b0d      	subs	r5, r1, r4
10015d98:	e6e7      	b.n	10015b6a <__aeabi_dsub+0x416>
10015d9a:	2280      	movs	r2, #128	; 0x80
10015d9c:	2300      	movs	r3, #0
10015d9e:	0312      	lsls	r2, r2, #12
10015da0:	4c14      	ldr	r4, [pc, #80]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015da2:	2500      	movs	r5, #0
10015da4:	e5a1      	b.n	100158ea <__aeabi_dsub+0x196>
10015da6:	433d      	orrs	r5, r7
10015da8:	1e6f      	subs	r7, r5, #1
10015daa:	41bd      	sbcs	r5, r7
10015dac:	2700      	movs	r7, #0
10015dae:	b2ed      	uxtb	r5, r5
10015db0:	e760      	b.n	10015c74 <__aeabi_dsub+0x520>
10015db2:	0007      	movs	r7, r0
10015db4:	000d      	movs	r5, r1
10015db6:	4c0f      	ldr	r4, [pc, #60]	; (10015df4 <__aeabi_dsub+0x6a0>)
10015db8:	e4f8      	b.n	100157ac <__aeabi_dsub+0x58>
10015dba:	0007      	movs	r7, r0
10015dbc:	000d      	movs	r5, r1
10015dbe:	e4f5      	b.n	100157ac <__aeabi_dsub+0x58>
10015dc0:	464e      	mov	r6, r9
10015dc2:	003c      	movs	r4, r7
10015dc4:	3e20      	subs	r6, #32
10015dc6:	40f4      	lsrs	r4, r6
10015dc8:	46a0      	mov	r8, r4
10015dca:	464c      	mov	r4, r9
10015dcc:	2c20      	cmp	r4, #32
10015dce:	d00e      	beq.n	10015dee <__aeabi_dsub+0x69a>
10015dd0:	2440      	movs	r4, #64	; 0x40
10015dd2:	464e      	mov	r6, r9
10015dd4:	1ba4      	subs	r4, r4, r6
10015dd6:	40a7      	lsls	r7, r4
10015dd8:	433d      	orrs	r5, r7
10015dda:	1e6f      	subs	r7, r5, #1
10015ddc:	41bd      	sbcs	r5, r7
10015dde:	4644      	mov	r4, r8
10015de0:	2700      	movs	r7, #0
10015de2:	4325      	orrs	r5, r4
10015de4:	e746      	b.n	10015c74 <__aeabi_dsub+0x520>
10015de6:	2700      	movs	r7, #0
10015de8:	e7cf      	b.n	10015d8a <__aeabi_dsub+0x636>
10015dea:	000d      	movs	r5, r1
10015dec:	e573      	b.n	100158d6 <__aeabi_dsub+0x182>
10015dee:	2700      	movs	r7, #0
10015df0:	e7f2      	b.n	10015dd8 <__aeabi_dsub+0x684>
10015df2:	46c0      	nop			; (mov r8, r8)
10015df4:	000007ff 	.word	0x000007ff
10015df8:	ff7fffff 	.word	0xff7fffff

10015dfc <__aeabi_dcmpun>:
10015dfc:	b570      	push	{r4, r5, r6, lr}
10015dfe:	4e0e      	ldr	r6, [pc, #56]	; (10015e38 <__aeabi_dcmpun+0x3c>)
10015e00:	030c      	lsls	r4, r1, #12
10015e02:	031d      	lsls	r5, r3, #12
10015e04:	0049      	lsls	r1, r1, #1
10015e06:	005b      	lsls	r3, r3, #1
10015e08:	0b24      	lsrs	r4, r4, #12
10015e0a:	0d49      	lsrs	r1, r1, #21
10015e0c:	0b2d      	lsrs	r5, r5, #12
10015e0e:	0d5b      	lsrs	r3, r3, #21
10015e10:	42b1      	cmp	r1, r6
10015e12:	d004      	beq.n	10015e1e <__aeabi_dcmpun+0x22>
10015e14:	4908      	ldr	r1, [pc, #32]	; (10015e38 <__aeabi_dcmpun+0x3c>)
10015e16:	2000      	movs	r0, #0
10015e18:	428b      	cmp	r3, r1
10015e1a:	d008      	beq.n	10015e2e <__aeabi_dcmpun+0x32>
10015e1c:	bd70      	pop	{r4, r5, r6, pc}
10015e1e:	4304      	orrs	r4, r0
10015e20:	2001      	movs	r0, #1
10015e22:	2c00      	cmp	r4, #0
10015e24:	d1fa      	bne.n	10015e1c <__aeabi_dcmpun+0x20>
10015e26:	4904      	ldr	r1, [pc, #16]	; (10015e38 <__aeabi_dcmpun+0x3c>)
10015e28:	2000      	movs	r0, #0
10015e2a:	428b      	cmp	r3, r1
10015e2c:	d1f6      	bne.n	10015e1c <__aeabi_dcmpun+0x20>
10015e2e:	4315      	orrs	r5, r2
10015e30:	0028      	movs	r0, r5
10015e32:	1e45      	subs	r5, r0, #1
10015e34:	41a8      	sbcs	r0, r5
10015e36:	e7f1      	b.n	10015e1c <__aeabi_dcmpun+0x20>
10015e38:	000007ff 	.word	0x000007ff

10015e3c <__aeabi_d2iz>:
10015e3c:	030b      	lsls	r3, r1, #12
10015e3e:	b530      	push	{r4, r5, lr}
10015e40:	4d13      	ldr	r5, [pc, #76]	; (10015e90 <__aeabi_d2iz+0x54>)
10015e42:	0b1a      	lsrs	r2, r3, #12
10015e44:	004b      	lsls	r3, r1, #1
10015e46:	0d5b      	lsrs	r3, r3, #21
10015e48:	0fc9      	lsrs	r1, r1, #31
10015e4a:	2400      	movs	r4, #0
10015e4c:	42ab      	cmp	r3, r5
10015e4e:	dd11      	ble.n	10015e74 <__aeabi_d2iz+0x38>
10015e50:	4c10      	ldr	r4, [pc, #64]	; (10015e94 <__aeabi_d2iz+0x58>)
10015e52:	42a3      	cmp	r3, r4
10015e54:	dc10      	bgt.n	10015e78 <__aeabi_d2iz+0x3c>
10015e56:	2480      	movs	r4, #128	; 0x80
10015e58:	0364      	lsls	r4, r4, #13
10015e5a:	4322      	orrs	r2, r4
10015e5c:	4c0e      	ldr	r4, [pc, #56]	; (10015e98 <__aeabi_d2iz+0x5c>)
10015e5e:	1ae4      	subs	r4, r4, r3
10015e60:	2c1f      	cmp	r4, #31
10015e62:	dd0c      	ble.n	10015e7e <__aeabi_d2iz+0x42>
10015e64:	480d      	ldr	r0, [pc, #52]	; (10015e9c <__aeabi_d2iz+0x60>)
10015e66:	1ac3      	subs	r3, r0, r3
10015e68:	40da      	lsrs	r2, r3
10015e6a:	0013      	movs	r3, r2
10015e6c:	425c      	negs	r4, r3
10015e6e:	2900      	cmp	r1, #0
10015e70:	d100      	bne.n	10015e74 <__aeabi_d2iz+0x38>
10015e72:	001c      	movs	r4, r3
10015e74:	0020      	movs	r0, r4
10015e76:	bd30      	pop	{r4, r5, pc}
10015e78:	4b09      	ldr	r3, [pc, #36]	; (10015ea0 <__aeabi_d2iz+0x64>)
10015e7a:	18cc      	adds	r4, r1, r3
10015e7c:	e7fa      	b.n	10015e74 <__aeabi_d2iz+0x38>
10015e7e:	40e0      	lsrs	r0, r4
10015e80:	4c08      	ldr	r4, [pc, #32]	; (10015ea4 <__aeabi_d2iz+0x68>)
10015e82:	46a4      	mov	ip, r4
10015e84:	4463      	add	r3, ip
10015e86:	409a      	lsls	r2, r3
10015e88:	0013      	movs	r3, r2
10015e8a:	4303      	orrs	r3, r0
10015e8c:	e7ee      	b.n	10015e6c <__aeabi_d2iz+0x30>
10015e8e:	46c0      	nop			; (mov r8, r8)
10015e90:	000003fe 	.word	0x000003fe
10015e94:	0000041d 	.word	0x0000041d
10015e98:	00000433 	.word	0x00000433
10015e9c:	00000413 	.word	0x00000413
10015ea0:	7fffffff 	.word	0x7fffffff
10015ea4:	fffffbed 	.word	0xfffffbed

10015ea8 <__aeabi_i2d>:
10015ea8:	b570      	push	{r4, r5, r6, lr}
10015eaa:	2800      	cmp	r0, #0
10015eac:	d030      	beq.n	10015f10 <__aeabi_i2d+0x68>
10015eae:	17c3      	asrs	r3, r0, #31
10015eb0:	18c4      	adds	r4, r0, r3
10015eb2:	405c      	eors	r4, r3
10015eb4:	0fc5      	lsrs	r5, r0, #31
10015eb6:	0020      	movs	r0, r4
10015eb8:	f000 f950 	bl	1001615c <__clzsi2>
10015ebc:	4b17      	ldr	r3, [pc, #92]	; (10015f1c <__aeabi_i2d+0x74>)
10015ebe:	4a18      	ldr	r2, [pc, #96]	; (10015f20 <__aeabi_i2d+0x78>)
10015ec0:	1a1b      	subs	r3, r3, r0
10015ec2:	1ad2      	subs	r2, r2, r3
10015ec4:	2a1f      	cmp	r2, #31
10015ec6:	dd18      	ble.n	10015efa <__aeabi_i2d+0x52>
10015ec8:	4a16      	ldr	r2, [pc, #88]	; (10015f24 <__aeabi_i2d+0x7c>)
10015eca:	1ad2      	subs	r2, r2, r3
10015ecc:	4094      	lsls	r4, r2
10015ece:	2200      	movs	r2, #0
10015ed0:	0324      	lsls	r4, r4, #12
10015ed2:	055b      	lsls	r3, r3, #21
10015ed4:	0b24      	lsrs	r4, r4, #12
10015ed6:	0d5b      	lsrs	r3, r3, #21
10015ed8:	2100      	movs	r1, #0
10015eda:	0010      	movs	r0, r2
10015edc:	0324      	lsls	r4, r4, #12
10015ede:	0d0a      	lsrs	r2, r1, #20
10015ee0:	0512      	lsls	r2, r2, #20
10015ee2:	0b24      	lsrs	r4, r4, #12
10015ee4:	4314      	orrs	r4, r2
10015ee6:	4a10      	ldr	r2, [pc, #64]	; (10015f28 <__aeabi_i2d+0x80>)
10015ee8:	051b      	lsls	r3, r3, #20
10015eea:	4014      	ands	r4, r2
10015eec:	431c      	orrs	r4, r3
10015eee:	0064      	lsls	r4, r4, #1
10015ef0:	07ed      	lsls	r5, r5, #31
10015ef2:	0864      	lsrs	r4, r4, #1
10015ef4:	432c      	orrs	r4, r5
10015ef6:	0021      	movs	r1, r4
10015ef8:	bd70      	pop	{r4, r5, r6, pc}
10015efa:	0021      	movs	r1, r4
10015efc:	4091      	lsls	r1, r2
10015efe:	000a      	movs	r2, r1
10015f00:	210b      	movs	r1, #11
10015f02:	1a08      	subs	r0, r1, r0
10015f04:	40c4      	lsrs	r4, r0
10015f06:	055b      	lsls	r3, r3, #21
10015f08:	0324      	lsls	r4, r4, #12
10015f0a:	0b24      	lsrs	r4, r4, #12
10015f0c:	0d5b      	lsrs	r3, r3, #21
10015f0e:	e7e3      	b.n	10015ed8 <__aeabi_i2d+0x30>
10015f10:	2500      	movs	r5, #0
10015f12:	2300      	movs	r3, #0
10015f14:	2400      	movs	r4, #0
10015f16:	2200      	movs	r2, #0
10015f18:	e7de      	b.n	10015ed8 <__aeabi_i2d+0x30>
10015f1a:	46c0      	nop			; (mov r8, r8)
10015f1c:	0000041e 	.word	0x0000041e
10015f20:	00000433 	.word	0x00000433
10015f24:	00000413 	.word	0x00000413
10015f28:	800fffff 	.word	0x800fffff

10015f2c <__aeabi_ui2d>:
10015f2c:	b570      	push	{r4, r5, r6, lr}
10015f2e:	1e05      	subs	r5, r0, #0
10015f30:	d028      	beq.n	10015f84 <__aeabi_ui2d+0x58>
10015f32:	f000 f913 	bl	1001615c <__clzsi2>
10015f36:	4b15      	ldr	r3, [pc, #84]	; (10015f8c <__aeabi_ui2d+0x60>)
10015f38:	4a15      	ldr	r2, [pc, #84]	; (10015f90 <__aeabi_ui2d+0x64>)
10015f3a:	1a1b      	subs	r3, r3, r0
10015f3c:	1ad2      	subs	r2, r2, r3
10015f3e:	2a1f      	cmp	r2, #31
10015f40:	dd16      	ble.n	10015f70 <__aeabi_ui2d+0x44>
10015f42:	002c      	movs	r4, r5
10015f44:	4a13      	ldr	r2, [pc, #76]	; (10015f94 <__aeabi_ui2d+0x68>)
10015f46:	2500      	movs	r5, #0
10015f48:	1ad2      	subs	r2, r2, r3
10015f4a:	4094      	lsls	r4, r2
10015f4c:	055a      	lsls	r2, r3, #21
10015f4e:	0324      	lsls	r4, r4, #12
10015f50:	0b24      	lsrs	r4, r4, #12
10015f52:	0d52      	lsrs	r2, r2, #21
10015f54:	2100      	movs	r1, #0
10015f56:	0324      	lsls	r4, r4, #12
10015f58:	0d0b      	lsrs	r3, r1, #20
10015f5a:	0b24      	lsrs	r4, r4, #12
10015f5c:	051b      	lsls	r3, r3, #20
10015f5e:	4323      	orrs	r3, r4
10015f60:	4c0d      	ldr	r4, [pc, #52]	; (10015f98 <__aeabi_ui2d+0x6c>)
10015f62:	0512      	lsls	r2, r2, #20
10015f64:	4023      	ands	r3, r4
10015f66:	4313      	orrs	r3, r2
10015f68:	005b      	lsls	r3, r3, #1
10015f6a:	0028      	movs	r0, r5
10015f6c:	0859      	lsrs	r1, r3, #1
10015f6e:	bd70      	pop	{r4, r5, r6, pc}
10015f70:	210b      	movs	r1, #11
10015f72:	002c      	movs	r4, r5
10015f74:	1a08      	subs	r0, r1, r0
10015f76:	40c4      	lsrs	r4, r0
10015f78:	4095      	lsls	r5, r2
10015f7a:	0324      	lsls	r4, r4, #12
10015f7c:	055a      	lsls	r2, r3, #21
10015f7e:	0b24      	lsrs	r4, r4, #12
10015f80:	0d52      	lsrs	r2, r2, #21
10015f82:	e7e7      	b.n	10015f54 <__aeabi_ui2d+0x28>
10015f84:	2200      	movs	r2, #0
10015f86:	2400      	movs	r4, #0
10015f88:	e7e4      	b.n	10015f54 <__aeabi_ui2d+0x28>
10015f8a:	46c0      	nop			; (mov r8, r8)
10015f8c:	0000041e 	.word	0x0000041e
10015f90:	00000433 	.word	0x00000433
10015f94:	00000413 	.word	0x00000413
10015f98:	800fffff 	.word	0x800fffff

10015f9c <__aeabi_f2d>:
10015f9c:	0042      	lsls	r2, r0, #1
10015f9e:	0e12      	lsrs	r2, r2, #24
10015fa0:	1c51      	adds	r1, r2, #1
10015fa2:	0243      	lsls	r3, r0, #9
10015fa4:	b2c9      	uxtb	r1, r1
10015fa6:	b570      	push	{r4, r5, r6, lr}
10015fa8:	0a5d      	lsrs	r5, r3, #9
10015faa:	0fc4      	lsrs	r4, r0, #31
10015fac:	2901      	cmp	r1, #1
10015fae:	dd15      	ble.n	10015fdc <__aeabi_f2d+0x40>
10015fb0:	21e0      	movs	r1, #224	; 0xe0
10015fb2:	0089      	lsls	r1, r1, #2
10015fb4:	468c      	mov	ip, r1
10015fb6:	076d      	lsls	r5, r5, #29
10015fb8:	0b1b      	lsrs	r3, r3, #12
10015fba:	4462      	add	r2, ip
10015fbc:	2100      	movs	r1, #0
10015fbe:	0028      	movs	r0, r5
10015fc0:	0d0d      	lsrs	r5, r1, #20
10015fc2:	052d      	lsls	r5, r5, #20
10015fc4:	432b      	orrs	r3, r5
10015fc6:	4d1c      	ldr	r5, [pc, #112]	; (10016038 <__aeabi_f2d+0x9c>)
10015fc8:	0552      	lsls	r2, r2, #21
10015fca:	402b      	ands	r3, r5
10015fcc:	0852      	lsrs	r2, r2, #1
10015fce:	4313      	orrs	r3, r2
10015fd0:	005b      	lsls	r3, r3, #1
10015fd2:	07e4      	lsls	r4, r4, #31
10015fd4:	085b      	lsrs	r3, r3, #1
10015fd6:	4323      	orrs	r3, r4
10015fd8:	0019      	movs	r1, r3
10015fda:	bd70      	pop	{r4, r5, r6, pc}
10015fdc:	2a00      	cmp	r2, #0
10015fde:	d115      	bne.n	1001600c <__aeabi_f2d+0x70>
10015fe0:	2d00      	cmp	r5, #0
10015fe2:	d01f      	beq.n	10016024 <__aeabi_f2d+0x88>
10015fe4:	0028      	movs	r0, r5
10015fe6:	f000 f8b9 	bl	1001615c <__clzsi2>
10015fea:	280a      	cmp	r0, #10
10015fec:	dc1d      	bgt.n	1001602a <__aeabi_f2d+0x8e>
10015fee:	230b      	movs	r3, #11
10015ff0:	002a      	movs	r2, r5
10015ff2:	1a1b      	subs	r3, r3, r0
10015ff4:	40da      	lsrs	r2, r3
10015ff6:	0013      	movs	r3, r2
10015ff8:	0002      	movs	r2, r0
10015ffa:	3215      	adds	r2, #21
10015ffc:	4095      	lsls	r5, r2
10015ffe:	4a0f      	ldr	r2, [pc, #60]	; (1001603c <__aeabi_f2d+0xa0>)
10016000:	031b      	lsls	r3, r3, #12
10016002:	1a12      	subs	r2, r2, r0
10016004:	0552      	lsls	r2, r2, #21
10016006:	0b1b      	lsrs	r3, r3, #12
10016008:	0d52      	lsrs	r2, r2, #21
1001600a:	e7d7      	b.n	10015fbc <__aeabi_f2d+0x20>
1001600c:	2d00      	cmp	r5, #0
1001600e:	d006      	beq.n	1001601e <__aeabi_f2d+0x82>
10016010:	2280      	movs	r2, #128	; 0x80
10016012:	0b1b      	lsrs	r3, r3, #12
10016014:	0312      	lsls	r2, r2, #12
10016016:	4313      	orrs	r3, r2
10016018:	076d      	lsls	r5, r5, #29
1001601a:	4a09      	ldr	r2, [pc, #36]	; (10016040 <__aeabi_f2d+0xa4>)
1001601c:	e7ce      	b.n	10015fbc <__aeabi_f2d+0x20>
1001601e:	4a08      	ldr	r2, [pc, #32]	; (10016040 <__aeabi_f2d+0xa4>)
10016020:	2300      	movs	r3, #0
10016022:	e7cb      	b.n	10015fbc <__aeabi_f2d+0x20>
10016024:	2200      	movs	r2, #0
10016026:	2300      	movs	r3, #0
10016028:	e7c8      	b.n	10015fbc <__aeabi_f2d+0x20>
1001602a:	0003      	movs	r3, r0
1001602c:	3b0b      	subs	r3, #11
1001602e:	409d      	lsls	r5, r3
10016030:	002b      	movs	r3, r5
10016032:	2500      	movs	r5, #0
10016034:	e7e3      	b.n	10015ffe <__aeabi_f2d+0x62>
10016036:	46c0      	nop			; (mov r8, r8)
10016038:	800fffff 	.word	0x800fffff
1001603c:	00000389 	.word	0x00000389
10016040:	000007ff 	.word	0x000007ff

10016044 <__aeabi_d2f>:
10016044:	004b      	lsls	r3, r1, #1
10016046:	b570      	push	{r4, r5, r6, lr}
10016048:	0d5e      	lsrs	r6, r3, #21
1001604a:	030c      	lsls	r4, r1, #12
1001604c:	1c75      	adds	r5, r6, #1
1001604e:	0a64      	lsrs	r4, r4, #9
10016050:	0f42      	lsrs	r2, r0, #29
10016052:	056d      	lsls	r5, r5, #21
10016054:	4322      	orrs	r2, r4
10016056:	0fc9      	lsrs	r1, r1, #31
10016058:	00c4      	lsls	r4, r0, #3
1001605a:	0d6d      	lsrs	r5, r5, #21
1001605c:	2d01      	cmp	r5, #1
1001605e:	dd2a      	ble.n	100160b6 <__aeabi_d2f+0x72>
10016060:	4b3b      	ldr	r3, [pc, #236]	; (10016150 <__aeabi_d2f+0x10c>)
10016062:	18f3      	adds	r3, r6, r3
10016064:	2bfe      	cmp	r3, #254	; 0xfe
10016066:	dc1a      	bgt.n	1001609e <__aeabi_d2f+0x5a>
10016068:	2b00      	cmp	r3, #0
1001606a:	dd42      	ble.n	100160f2 <__aeabi_d2f+0xae>
1001606c:	0180      	lsls	r0, r0, #6
1001606e:	1e45      	subs	r5, r0, #1
10016070:	41a8      	sbcs	r0, r5
10016072:	00d2      	lsls	r2, r2, #3
10016074:	4310      	orrs	r0, r2
10016076:	0f62      	lsrs	r2, r4, #29
10016078:	4302      	orrs	r2, r0
1001607a:	0750      	lsls	r0, r2, #29
1001607c:	d004      	beq.n	10016088 <__aeabi_d2f+0x44>
1001607e:	200f      	movs	r0, #15
10016080:	4010      	ands	r0, r2
10016082:	2804      	cmp	r0, #4
10016084:	d000      	beq.n	10016088 <__aeabi_d2f+0x44>
10016086:	3204      	adds	r2, #4
10016088:	2080      	movs	r0, #128	; 0x80
1001608a:	04c0      	lsls	r0, r0, #19
1001608c:	4010      	ands	r0, r2
1001608e:	d021      	beq.n	100160d4 <__aeabi_d2f+0x90>
10016090:	3301      	adds	r3, #1
10016092:	2bff      	cmp	r3, #255	; 0xff
10016094:	d003      	beq.n	1001609e <__aeabi_d2f+0x5a>
10016096:	0192      	lsls	r2, r2, #6
10016098:	0a52      	lsrs	r2, r2, #9
1001609a:	b2db      	uxtb	r3, r3
1001609c:	e001      	b.n	100160a2 <__aeabi_d2f+0x5e>
1001609e:	23ff      	movs	r3, #255	; 0xff
100160a0:	2200      	movs	r2, #0
100160a2:	0252      	lsls	r2, r2, #9
100160a4:	0a52      	lsrs	r2, r2, #9
100160a6:	05db      	lsls	r3, r3, #23
100160a8:	4313      	orrs	r3, r2
100160aa:	005b      	lsls	r3, r3, #1
100160ac:	07c9      	lsls	r1, r1, #31
100160ae:	085b      	lsrs	r3, r3, #1
100160b0:	430b      	orrs	r3, r1
100160b2:	0018      	movs	r0, r3
100160b4:	bd70      	pop	{r4, r5, r6, pc}
100160b6:	2e00      	cmp	r6, #0
100160b8:	d007      	beq.n	100160ca <__aeabi_d2f+0x86>
100160ba:	4314      	orrs	r4, r2
100160bc:	d0ef      	beq.n	1001609e <__aeabi_d2f+0x5a>
100160be:	2080      	movs	r0, #128	; 0x80
100160c0:	00d2      	lsls	r2, r2, #3
100160c2:	0480      	lsls	r0, r0, #18
100160c4:	4302      	orrs	r2, r0
100160c6:	23ff      	movs	r3, #255	; 0xff
100160c8:	e7d7      	b.n	1001607a <__aeabi_d2f+0x36>
100160ca:	4322      	orrs	r2, r4
100160cc:	2300      	movs	r3, #0
100160ce:	2a00      	cmp	r2, #0
100160d0:	d003      	beq.n	100160da <__aeabi_d2f+0x96>
100160d2:	2205      	movs	r2, #5
100160d4:	08d2      	lsrs	r2, r2, #3
100160d6:	2bff      	cmp	r3, #255	; 0xff
100160d8:	d003      	beq.n	100160e2 <__aeabi_d2f+0x9e>
100160da:	0252      	lsls	r2, r2, #9
100160dc:	0a52      	lsrs	r2, r2, #9
100160de:	b2db      	uxtb	r3, r3
100160e0:	e7df      	b.n	100160a2 <__aeabi_d2f+0x5e>
100160e2:	2a00      	cmp	r2, #0
100160e4:	d032      	beq.n	1001614c <__aeabi_d2f+0x108>
100160e6:	2080      	movs	r0, #128	; 0x80
100160e8:	03c0      	lsls	r0, r0, #15
100160ea:	4302      	orrs	r2, r0
100160ec:	0252      	lsls	r2, r2, #9
100160ee:	0a52      	lsrs	r2, r2, #9
100160f0:	e7d7      	b.n	100160a2 <__aeabi_d2f+0x5e>
100160f2:	0018      	movs	r0, r3
100160f4:	3017      	adds	r0, #23
100160f6:	db14      	blt.n	10016122 <__aeabi_d2f+0xde>
100160f8:	2080      	movs	r0, #128	; 0x80
100160fa:	0400      	lsls	r0, r0, #16
100160fc:	4302      	orrs	r2, r0
100160fe:	201e      	movs	r0, #30
10016100:	1ac0      	subs	r0, r0, r3
10016102:	281f      	cmp	r0, #31
10016104:	dc0f      	bgt.n	10016126 <__aeabi_d2f+0xe2>
10016106:	0025      	movs	r5, r4
10016108:	4b12      	ldr	r3, [pc, #72]	; (10016154 <__aeabi_d2f+0x110>)
1001610a:	18f3      	adds	r3, r6, r3
1001610c:	409d      	lsls	r5, r3
1001610e:	1e6e      	subs	r6, r5, #1
10016110:	41b5      	sbcs	r5, r6
10016112:	409a      	lsls	r2, r3
10016114:	002b      	movs	r3, r5
10016116:	4313      	orrs	r3, r2
10016118:	0022      	movs	r2, r4
1001611a:	40c2      	lsrs	r2, r0
1001611c:	431a      	orrs	r2, r3
1001611e:	2300      	movs	r3, #0
10016120:	e7ab      	b.n	1001607a <__aeabi_d2f+0x36>
10016122:	2300      	movs	r3, #0
10016124:	e7d5      	b.n	100160d2 <__aeabi_d2f+0x8e>
10016126:	2502      	movs	r5, #2
10016128:	426d      	negs	r5, r5
1001612a:	1aeb      	subs	r3, r5, r3
1001612c:	0015      	movs	r5, r2
1001612e:	40dd      	lsrs	r5, r3
10016130:	2820      	cmp	r0, #32
10016132:	d009      	beq.n	10016148 <__aeabi_d2f+0x104>
10016134:	4b08      	ldr	r3, [pc, #32]	; (10016158 <__aeabi_d2f+0x114>)
10016136:	18f3      	adds	r3, r6, r3
10016138:	409a      	lsls	r2, r3
1001613a:	4314      	orrs	r4, r2
1001613c:	1e62      	subs	r2, r4, #1
1001613e:	4194      	sbcs	r4, r2
10016140:	0022      	movs	r2, r4
10016142:	2300      	movs	r3, #0
10016144:	432a      	orrs	r2, r5
10016146:	e798      	b.n	1001607a <__aeabi_d2f+0x36>
10016148:	2200      	movs	r2, #0
1001614a:	e7f6      	b.n	1001613a <__aeabi_d2f+0xf6>
1001614c:	2200      	movs	r2, #0
1001614e:	e7a8      	b.n	100160a2 <__aeabi_d2f+0x5e>
10016150:	fffffc80 	.word	0xfffffc80
10016154:	fffffc82 	.word	0xfffffc82
10016158:	fffffca2 	.word	0xfffffca2

1001615c <__clzsi2>:
1001615c:	211c      	movs	r1, #28
1001615e:	2301      	movs	r3, #1
10016160:	041b      	lsls	r3, r3, #16
10016162:	4298      	cmp	r0, r3
10016164:	d301      	bcc.n	1001616a <__clzsi2+0xe>
10016166:	0c00      	lsrs	r0, r0, #16
10016168:	3910      	subs	r1, #16
1001616a:	0a1b      	lsrs	r3, r3, #8
1001616c:	4298      	cmp	r0, r3
1001616e:	d301      	bcc.n	10016174 <__clzsi2+0x18>
10016170:	0a00      	lsrs	r0, r0, #8
10016172:	3908      	subs	r1, #8
10016174:	091b      	lsrs	r3, r3, #4
10016176:	4298      	cmp	r0, r3
10016178:	d301      	bcc.n	1001617e <__clzsi2+0x22>
1001617a:	0900      	lsrs	r0, r0, #4
1001617c:	3904      	subs	r1, #4
1001617e:	a202      	add	r2, pc, #8	; (adr r2, 10016188 <__clzsi2+0x2c>)
10016180:	5c10      	ldrb	r0, [r2, r0]
10016182:	1840      	adds	r0, r0, r1
10016184:	4770      	bx	lr
10016186:	46c0      	nop			; (mov r8, r8)
10016188:	02020304 	.word	0x02020304
1001618c:	01010101 	.word	0x01010101
	...

10016198 <__errno>:
10016198:	4b01      	ldr	r3, [pc, #4]	; (100161a0 <__errno+0x8>)
1001619a:	6818      	ldr	r0, [r3, #0]
1001619c:	4770      	bx	lr
1001619e:	46c0      	nop			; (mov r8, r8)
100161a0:	100186c8 	.word	0x100186c8

100161a4 <__libc_init_array>:
100161a4:	4b0e      	ldr	r3, [pc, #56]	; (100161e0 <__libc_init_array+0x3c>)
100161a6:	b570      	push	{r4, r5, r6, lr}
100161a8:	2500      	movs	r5, #0
100161aa:	001e      	movs	r6, r3
100161ac:	4c0d      	ldr	r4, [pc, #52]	; (100161e4 <__libc_init_array+0x40>)
100161ae:	1ae4      	subs	r4, r4, r3
100161b0:	10a4      	asrs	r4, r4, #2
100161b2:	42a5      	cmp	r5, r4
100161b4:	d004      	beq.n	100161c0 <__libc_init_array+0x1c>
100161b6:	00ab      	lsls	r3, r5, #2
100161b8:	58f3      	ldr	r3, [r6, r3]
100161ba:	4798      	blx	r3
100161bc:	3501      	adds	r5, #1
100161be:	e7f8      	b.n	100161b2 <__libc_init_array+0xe>
100161c0:	f002 fa3c 	bl	1001863c <_init>
100161c4:	4b08      	ldr	r3, [pc, #32]	; (100161e8 <__libc_init_array+0x44>)
100161c6:	2500      	movs	r5, #0
100161c8:	001e      	movs	r6, r3
100161ca:	4c08      	ldr	r4, [pc, #32]	; (100161ec <__libc_init_array+0x48>)
100161cc:	1ae4      	subs	r4, r4, r3
100161ce:	10a4      	asrs	r4, r4, #2
100161d0:	42a5      	cmp	r5, r4
100161d2:	d004      	beq.n	100161de <__libc_init_array+0x3a>
100161d4:	00ab      	lsls	r3, r5, #2
100161d6:	58f3      	ldr	r3, [r6, r3]
100161d8:	4798      	blx	r3
100161da:	3501      	adds	r5, #1
100161dc:	e7f8      	b.n	100161d0 <__libc_init_array+0x2c>
100161de:	bd70      	pop	{r4, r5, r6, pc}
100161e0:	10018648 	.word	0x10018648
100161e4:	10018648 	.word	0x10018648
100161e8:	10018648 	.word	0x10018648
100161ec:	1001864c 	.word	0x1001864c

100161f0 <malloc>:
100161f0:	b510      	push	{r4, lr}
100161f2:	4b03      	ldr	r3, [pc, #12]	; (10016200 <malloc+0x10>)
100161f4:	0001      	movs	r1, r0
100161f6:	6818      	ldr	r0, [r3, #0]
100161f8:	f000 f86a 	bl	100162d0 <_malloc_r>
100161fc:	bd10      	pop	{r4, pc}
100161fe:	46c0      	nop			; (mov r8, r8)
10016200:	100186c8 	.word	0x100186c8

10016204 <memcmp>:
10016204:	b530      	push	{r4, r5, lr}
10016206:	2400      	movs	r4, #0
10016208:	42a2      	cmp	r2, r4
1001620a:	d008      	beq.n	1001621e <memcmp+0x1a>
1001620c:	5d03      	ldrb	r3, [r0, r4]
1001620e:	1c65      	adds	r5, r4, #1
10016210:	5d0c      	ldrb	r4, [r1, r4]
10016212:	42a3      	cmp	r3, r4
10016214:	d001      	beq.n	1001621a <memcmp+0x16>
10016216:	1b18      	subs	r0, r3, r4
10016218:	e002      	b.n	10016220 <memcmp+0x1c>
1001621a:	002c      	movs	r4, r5
1001621c:	e7f4      	b.n	10016208 <memcmp+0x4>
1001621e:	2000      	movs	r0, #0
10016220:	bd30      	pop	{r4, r5, pc}

10016222 <memcpy>:
10016222:	2300      	movs	r3, #0
10016224:	b510      	push	{r4, lr}
10016226:	429a      	cmp	r2, r3
10016228:	d003      	beq.n	10016232 <memcpy+0x10>
1001622a:	5ccc      	ldrb	r4, [r1, r3]
1001622c:	54c4      	strb	r4, [r0, r3]
1001622e:	3301      	adds	r3, #1
10016230:	e7f9      	b.n	10016226 <memcpy+0x4>
10016232:	bd10      	pop	{r4, pc}

10016234 <memset>:
10016234:	0003      	movs	r3, r0
10016236:	1882      	adds	r2, r0, r2
10016238:	4293      	cmp	r3, r2
1001623a:	d002      	beq.n	10016242 <memset+0xe>
1001623c:	7019      	strb	r1, [r3, #0]
1001623e:	3301      	adds	r3, #1
10016240:	e7fa      	b.n	10016238 <memset+0x4>
10016242:	4770      	bx	lr

10016244 <_free_r>:
10016244:	b530      	push	{r4, r5, lr}
10016246:	2900      	cmp	r1, #0
10016248:	d03e      	beq.n	100162c8 <_free_r+0x84>
1001624a:	3904      	subs	r1, #4
1001624c:	680b      	ldr	r3, [r1, #0]
1001624e:	2b00      	cmp	r3, #0
10016250:	da00      	bge.n	10016254 <_free_r+0x10>
10016252:	18c9      	adds	r1, r1, r3
10016254:	4a1d      	ldr	r2, [pc, #116]	; (100162cc <_free_r+0x88>)
10016256:	6813      	ldr	r3, [r2, #0]
10016258:	0014      	movs	r4, r2
1001625a:	2b00      	cmp	r3, #0
1001625c:	d102      	bne.n	10016264 <_free_r+0x20>
1001625e:	604b      	str	r3, [r1, #4]
10016260:	6011      	str	r1, [r2, #0]
10016262:	e031      	b.n	100162c8 <_free_r+0x84>
10016264:	428b      	cmp	r3, r1
10016266:	d90d      	bls.n	10016284 <_free_r+0x40>
10016268:	680a      	ldr	r2, [r1, #0]
1001626a:	1888      	adds	r0, r1, r2
1001626c:	4283      	cmp	r3, r0
1001626e:	d103      	bne.n	10016278 <_free_r+0x34>
10016270:	6818      	ldr	r0, [r3, #0]
10016272:	685b      	ldr	r3, [r3, #4]
10016274:	1882      	adds	r2, r0, r2
10016276:	600a      	str	r2, [r1, #0]
10016278:	604b      	str	r3, [r1, #4]
1001627a:	6021      	str	r1, [r4, #0]
1001627c:	e024      	b.n	100162c8 <_free_r+0x84>
1001627e:	428a      	cmp	r2, r1
10016280:	d803      	bhi.n	1001628a <_free_r+0x46>
10016282:	0013      	movs	r3, r2
10016284:	685a      	ldr	r2, [r3, #4]
10016286:	2a00      	cmp	r2, #0
10016288:	d1f9      	bne.n	1001627e <_free_r+0x3a>
1001628a:	681d      	ldr	r5, [r3, #0]
1001628c:	195c      	adds	r4, r3, r5
1001628e:	428c      	cmp	r4, r1
10016290:	d10b      	bne.n	100162aa <_free_r+0x66>
10016292:	6809      	ldr	r1, [r1, #0]
10016294:	1869      	adds	r1, r5, r1
10016296:	1858      	adds	r0, r3, r1
10016298:	6019      	str	r1, [r3, #0]
1001629a:	4282      	cmp	r2, r0
1001629c:	d114      	bne.n	100162c8 <_free_r+0x84>
1001629e:	6810      	ldr	r0, [r2, #0]
100162a0:	6852      	ldr	r2, [r2, #4]
100162a2:	1841      	adds	r1, r0, r1
100162a4:	6019      	str	r1, [r3, #0]
100162a6:	605a      	str	r2, [r3, #4]
100162a8:	e00e      	b.n	100162c8 <_free_r+0x84>
100162aa:	428c      	cmp	r4, r1
100162ac:	d902      	bls.n	100162b4 <_free_r+0x70>
100162ae:	230c      	movs	r3, #12
100162b0:	6003      	str	r3, [r0, #0]
100162b2:	e009      	b.n	100162c8 <_free_r+0x84>
100162b4:	6808      	ldr	r0, [r1, #0]
100162b6:	180c      	adds	r4, r1, r0
100162b8:	42a2      	cmp	r2, r4
100162ba:	d103      	bne.n	100162c4 <_free_r+0x80>
100162bc:	6814      	ldr	r4, [r2, #0]
100162be:	6852      	ldr	r2, [r2, #4]
100162c0:	1820      	adds	r0, r4, r0
100162c2:	6008      	str	r0, [r1, #0]
100162c4:	604a      	str	r2, [r1, #4]
100162c6:	6059      	str	r1, [r3, #4]
100162c8:	bd30      	pop	{r4, r5, pc}
100162ca:	46c0      	nop			; (mov r8, r8)
100162cc:	1001a190 	.word	0x1001a190

100162d0 <_malloc_r>:
100162d0:	2303      	movs	r3, #3
100162d2:	b570      	push	{r4, r5, r6, lr}
100162d4:	1ccd      	adds	r5, r1, #3
100162d6:	439d      	bics	r5, r3
100162d8:	3508      	adds	r5, #8
100162da:	0006      	movs	r6, r0
100162dc:	2d0c      	cmp	r5, #12
100162de:	d201      	bcs.n	100162e4 <_malloc_r+0x14>
100162e0:	250c      	movs	r5, #12
100162e2:	e005      	b.n	100162f0 <_malloc_r+0x20>
100162e4:	2d00      	cmp	r5, #0
100162e6:	da03      	bge.n	100162f0 <_malloc_r+0x20>
100162e8:	230c      	movs	r3, #12
100162ea:	2000      	movs	r0, #0
100162ec:	6033      	str	r3, [r6, #0]
100162ee:	e040      	b.n	10016372 <_malloc_r+0xa2>
100162f0:	42a9      	cmp	r1, r5
100162f2:	d8f9      	bhi.n	100162e8 <_malloc_r+0x18>
100162f4:	4b1f      	ldr	r3, [pc, #124]	; (10016374 <_malloc_r+0xa4>)
100162f6:	681c      	ldr	r4, [r3, #0]
100162f8:	001a      	movs	r2, r3
100162fa:	0021      	movs	r1, r4
100162fc:	2900      	cmp	r1, #0
100162fe:	d013      	beq.n	10016328 <_malloc_r+0x58>
10016300:	680b      	ldr	r3, [r1, #0]
10016302:	1b5b      	subs	r3, r3, r5
10016304:	d40d      	bmi.n	10016322 <_malloc_r+0x52>
10016306:	2b0b      	cmp	r3, #11
10016308:	d902      	bls.n	10016310 <_malloc_r+0x40>
1001630a:	600b      	str	r3, [r1, #0]
1001630c:	18cc      	adds	r4, r1, r3
1001630e:	e01e      	b.n	1001634e <_malloc_r+0x7e>
10016310:	428c      	cmp	r4, r1
10016312:	d102      	bne.n	1001631a <_malloc_r+0x4a>
10016314:	6863      	ldr	r3, [r4, #4]
10016316:	6013      	str	r3, [r2, #0]
10016318:	e01a      	b.n	10016350 <_malloc_r+0x80>
1001631a:	684b      	ldr	r3, [r1, #4]
1001631c:	6063      	str	r3, [r4, #4]
1001631e:	000c      	movs	r4, r1
10016320:	e016      	b.n	10016350 <_malloc_r+0x80>
10016322:	000c      	movs	r4, r1
10016324:	6849      	ldr	r1, [r1, #4]
10016326:	e7e9      	b.n	100162fc <_malloc_r+0x2c>
10016328:	4c13      	ldr	r4, [pc, #76]	; (10016378 <_malloc_r+0xa8>)
1001632a:	6823      	ldr	r3, [r4, #0]
1001632c:	2b00      	cmp	r3, #0
1001632e:	d103      	bne.n	10016338 <_malloc_r+0x68>
10016330:	0030      	movs	r0, r6
10016332:	f000 f8f9 	bl	10016528 <_sbrk_r>
10016336:	6020      	str	r0, [r4, #0]
10016338:	0029      	movs	r1, r5
1001633a:	0030      	movs	r0, r6
1001633c:	f000 f8f4 	bl	10016528 <_sbrk_r>
10016340:	1c43      	adds	r3, r0, #1
10016342:	d0d1      	beq.n	100162e8 <_malloc_r+0x18>
10016344:	2303      	movs	r3, #3
10016346:	1cc4      	adds	r4, r0, #3
10016348:	439c      	bics	r4, r3
1001634a:	42a0      	cmp	r0, r4
1001634c:	d10a      	bne.n	10016364 <_malloc_r+0x94>
1001634e:	6025      	str	r5, [r4, #0]
10016350:	0020      	movs	r0, r4
10016352:	2207      	movs	r2, #7
10016354:	300b      	adds	r0, #11
10016356:	1d23      	adds	r3, r4, #4
10016358:	4390      	bics	r0, r2
1001635a:	1ac3      	subs	r3, r0, r3
1001635c:	d009      	beq.n	10016372 <_malloc_r+0xa2>
1001635e:	425a      	negs	r2, r3
10016360:	50e2      	str	r2, [r4, r3]
10016362:	e006      	b.n	10016372 <_malloc_r+0xa2>
10016364:	1a21      	subs	r1, r4, r0
10016366:	0030      	movs	r0, r6
10016368:	f000 f8de 	bl	10016528 <_sbrk_r>
1001636c:	1c43      	adds	r3, r0, #1
1001636e:	d1ee      	bne.n	1001634e <_malloc_r+0x7e>
10016370:	e7ba      	b.n	100162e8 <_malloc_r+0x18>
10016372:	bd70      	pop	{r4, r5, r6, pc}
10016374:	1001a190 	.word	0x1001a190
10016378:	1001a18c 	.word	0x1001a18c

1001637c <iprintf>:
1001637c:	b40f      	push	{r0, r1, r2, r3}
1001637e:	4b0b      	ldr	r3, [pc, #44]	; (100163ac <iprintf+0x30>)
10016380:	b513      	push	{r0, r1, r4, lr}
10016382:	681c      	ldr	r4, [r3, #0]
10016384:	2c00      	cmp	r4, #0
10016386:	d005      	beq.n	10016394 <iprintf+0x18>
10016388:	69a3      	ldr	r3, [r4, #24]
1001638a:	2b00      	cmp	r3, #0
1001638c:	d102      	bne.n	10016394 <iprintf+0x18>
1001638e:	0020      	movs	r0, r4
10016390:	f000 fb58 	bl	10016a44 <__sinit>
10016394:	ab05      	add	r3, sp, #20
10016396:	9a04      	ldr	r2, [sp, #16]
10016398:	68a1      	ldr	r1, [r4, #8]
1001639a:	0020      	movs	r0, r4
1001639c:	9301      	str	r3, [sp, #4]
1001639e:	f000 fc71 	bl	10016c84 <_vfiprintf_r>
100163a2:	bc16      	pop	{r1, r2, r4}
100163a4:	bc08      	pop	{r3}
100163a6:	b004      	add	sp, #16
100163a8:	4718      	bx	r3
100163aa:	46c0      	nop			; (mov r8, r8)
100163ac:	100186c8 	.word	0x100186c8

100163b0 <putchar>:
100163b0:	4b08      	ldr	r3, [pc, #32]	; (100163d4 <putchar+0x24>)
100163b2:	b570      	push	{r4, r5, r6, lr}
100163b4:	681c      	ldr	r4, [r3, #0]
100163b6:	0005      	movs	r5, r0
100163b8:	2c00      	cmp	r4, #0
100163ba:	d005      	beq.n	100163c8 <putchar+0x18>
100163bc:	69a3      	ldr	r3, [r4, #24]
100163be:	2b00      	cmp	r3, #0
100163c0:	d102      	bne.n	100163c8 <putchar+0x18>
100163c2:	0020      	movs	r0, r4
100163c4:	f000 fb3e 	bl	10016a44 <__sinit>
100163c8:	0029      	movs	r1, r5
100163ca:	68a2      	ldr	r2, [r4, #8]
100163cc:	0020      	movs	r0, r4
100163ce:	f000 ff05 	bl	100171dc <_putc_r>
100163d2:	bd70      	pop	{r4, r5, r6, pc}
100163d4:	100186c8 	.word	0x100186c8

100163d8 <_puts_r>:
100163d8:	b570      	push	{r4, r5, r6, lr}
100163da:	0005      	movs	r5, r0
100163dc:	000e      	movs	r6, r1
100163de:	2800      	cmp	r0, #0
100163e0:	d004      	beq.n	100163ec <_puts_r+0x14>
100163e2:	6983      	ldr	r3, [r0, #24]
100163e4:	2b00      	cmp	r3, #0
100163e6:	d101      	bne.n	100163ec <_puts_r+0x14>
100163e8:	f000 fb2c 	bl	10016a44 <__sinit>
100163ec:	69ab      	ldr	r3, [r5, #24]
100163ee:	68ac      	ldr	r4, [r5, #8]
100163f0:	2b00      	cmp	r3, #0
100163f2:	d102      	bne.n	100163fa <_puts_r+0x22>
100163f4:	0028      	movs	r0, r5
100163f6:	f000 fb25 	bl	10016a44 <__sinit>
100163fa:	4b25      	ldr	r3, [pc, #148]	; (10016490 <_puts_r+0xb8>)
100163fc:	429c      	cmp	r4, r3
100163fe:	d101      	bne.n	10016404 <_puts_r+0x2c>
10016400:	686c      	ldr	r4, [r5, #4]
10016402:	e008      	b.n	10016416 <_puts_r+0x3e>
10016404:	4b23      	ldr	r3, [pc, #140]	; (10016494 <_puts_r+0xbc>)
10016406:	429c      	cmp	r4, r3
10016408:	d101      	bne.n	1001640e <_puts_r+0x36>
1001640a:	68ac      	ldr	r4, [r5, #8]
1001640c:	e003      	b.n	10016416 <_puts_r+0x3e>
1001640e:	4b22      	ldr	r3, [pc, #136]	; (10016498 <_puts_r+0xc0>)
10016410:	429c      	cmp	r4, r3
10016412:	d100      	bne.n	10016416 <_puts_r+0x3e>
10016414:	68ec      	ldr	r4, [r5, #12]
10016416:	89a3      	ldrh	r3, [r4, #12]
10016418:	071b      	lsls	r3, r3, #28
1001641a:	d502      	bpl.n	10016422 <_puts_r+0x4a>
1001641c:	6923      	ldr	r3, [r4, #16]
1001641e:	2b00      	cmp	r3, #0
10016420:	d111      	bne.n	10016446 <_puts_r+0x6e>
10016422:	0021      	movs	r1, r4
10016424:	0028      	movs	r0, r5
10016426:	f000 f9a3 	bl	10016770 <__swsetup_r>
1001642a:	2800      	cmp	r0, #0
1001642c:	d00b      	beq.n	10016446 <_puts_r+0x6e>
1001642e:	2001      	movs	r0, #1
10016430:	4240      	negs	r0, r0
10016432:	e02b      	b.n	1001648c <_puts_r+0xb4>
10016434:	3b01      	subs	r3, #1
10016436:	3601      	adds	r6, #1
10016438:	60a3      	str	r3, [r4, #8]
1001643a:	2b00      	cmp	r3, #0
1001643c:	db08      	blt.n	10016450 <_puts_r+0x78>
1001643e:	6823      	ldr	r3, [r4, #0]
10016440:	1c5a      	adds	r2, r3, #1
10016442:	6022      	str	r2, [r4, #0]
10016444:	7019      	strb	r1, [r3, #0]
10016446:	7831      	ldrb	r1, [r6, #0]
10016448:	68a3      	ldr	r3, [r4, #8]
1001644a:	2900      	cmp	r1, #0
1001644c:	d1f2      	bne.n	10016434 <_puts_r+0x5c>
1001644e:	e00b      	b.n	10016468 <_puts_r+0x90>
10016450:	69a2      	ldr	r2, [r4, #24]
10016452:	4293      	cmp	r3, r2
10016454:	db01      	blt.n	1001645a <_puts_r+0x82>
10016456:	290a      	cmp	r1, #10
10016458:	d1f1      	bne.n	1001643e <_puts_r+0x66>
1001645a:	0022      	movs	r2, r4
1001645c:	0028      	movs	r0, r5
1001645e:	f000 f92f 	bl	100166c0 <__swbuf_r>
10016462:	1c43      	adds	r3, r0, #1
10016464:	d1ef      	bne.n	10016446 <_puts_r+0x6e>
10016466:	e7e2      	b.n	1001642e <_puts_r+0x56>
10016468:	3b01      	subs	r3, #1
1001646a:	60a3      	str	r3, [r4, #8]
1001646c:	2b00      	cmp	r3, #0
1001646e:	da08      	bge.n	10016482 <_puts_r+0xaa>
10016470:	0022      	movs	r2, r4
10016472:	310a      	adds	r1, #10
10016474:	0028      	movs	r0, r5
10016476:	f000 f923 	bl	100166c0 <__swbuf_r>
1001647a:	1c43      	adds	r3, r0, #1
1001647c:	d0d7      	beq.n	1001642e <_puts_r+0x56>
1001647e:	200a      	movs	r0, #10
10016480:	e004      	b.n	1001648c <_puts_r+0xb4>
10016482:	200a      	movs	r0, #10
10016484:	6823      	ldr	r3, [r4, #0]
10016486:	1c5a      	adds	r2, r3, #1
10016488:	6022      	str	r2, [r4, #0]
1001648a:	7018      	strb	r0, [r3, #0]
1001648c:	bd70      	pop	{r4, r5, r6, pc}
1001648e:	46c0      	nop			; (mov r8, r8)
10016490:	100185a8 	.word	0x100185a8
10016494:	100185c8 	.word	0x100185c8
10016498:	100185e8 	.word	0x100185e8

1001649c <puts>:
1001649c:	b510      	push	{r4, lr}
1001649e:	4b03      	ldr	r3, [pc, #12]	; (100164ac <puts+0x10>)
100164a0:	0001      	movs	r1, r0
100164a2:	6818      	ldr	r0, [r3, #0]
100164a4:	f7ff ff98 	bl	100163d8 <_puts_r>
100164a8:	bd10      	pop	{r4, pc}
100164aa:	46c0      	nop			; (mov r8, r8)
100164ac:	100186c8 	.word	0x100186c8

100164b0 <rand>:
100164b0:	4b15      	ldr	r3, [pc, #84]	; (10016508 <rand+0x58>)
100164b2:	b510      	push	{r4, lr}
100164b4:	681c      	ldr	r4, [r3, #0]
100164b6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100164b8:	2b00      	cmp	r3, #0
100164ba:	d115      	bne.n	100164e8 <rand+0x38>
100164bc:	2018      	movs	r0, #24
100164be:	f7ff fe97 	bl	100161f0 <malloc>
100164c2:	4b12      	ldr	r3, [pc, #72]	; (1001650c <rand+0x5c>)
100164c4:	63a0      	str	r0, [r4, #56]	; 0x38
100164c6:	8003      	strh	r3, [r0, #0]
100164c8:	4b11      	ldr	r3, [pc, #68]	; (10016510 <rand+0x60>)
100164ca:	2201      	movs	r2, #1
100164cc:	8043      	strh	r3, [r0, #2]
100164ce:	4b11      	ldr	r3, [pc, #68]	; (10016514 <rand+0x64>)
100164d0:	8083      	strh	r3, [r0, #4]
100164d2:	4b11      	ldr	r3, [pc, #68]	; (10016518 <rand+0x68>)
100164d4:	80c3      	strh	r3, [r0, #6]
100164d6:	4b11      	ldr	r3, [pc, #68]	; (1001651c <rand+0x6c>)
100164d8:	8103      	strh	r3, [r0, #8]
100164da:	2305      	movs	r3, #5
100164dc:	8143      	strh	r3, [r0, #10]
100164de:	3306      	adds	r3, #6
100164e0:	8183      	strh	r3, [r0, #12]
100164e2:	2300      	movs	r3, #0
100164e4:	6102      	str	r2, [r0, #16]
100164e6:	6143      	str	r3, [r0, #20]
100164e8:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100164ea:	4a0d      	ldr	r2, [pc, #52]	; (10016520 <rand+0x70>)
100164ec:	6920      	ldr	r0, [r4, #16]
100164ee:	6961      	ldr	r1, [r4, #20]
100164f0:	4b0c      	ldr	r3, [pc, #48]	; (10016524 <rand+0x74>)
100164f2:	f7fd f869 	bl	100135c8 <__aeabi_lmul>
100164f6:	2201      	movs	r2, #1
100164f8:	2300      	movs	r3, #0
100164fa:	1880      	adds	r0, r0, r2
100164fc:	4159      	adcs	r1, r3
100164fe:	6120      	str	r0, [r4, #16]
10016500:	6161      	str	r1, [r4, #20]
10016502:	0048      	lsls	r0, r1, #1
10016504:	0840      	lsrs	r0, r0, #1
10016506:	bd10      	pop	{r4, pc}
10016508:	100186c8 	.word	0x100186c8
1001650c:	0000330e 	.word	0x0000330e
10016510:	ffffabcd 	.word	0xffffabcd
10016514:	00001234 	.word	0x00001234
10016518:	ffffe66d 	.word	0xffffe66d
1001651c:	ffffdeec 	.word	0xffffdeec
10016520:	4c957f2d 	.word	0x4c957f2d
10016524:	5851f42d 	.word	0x5851f42d

10016528 <_sbrk_r>:
10016528:	2300      	movs	r3, #0
1001652a:	b570      	push	{r4, r5, r6, lr}
1001652c:	4c06      	ldr	r4, [pc, #24]	; (10016548 <_sbrk_r+0x20>)
1001652e:	0005      	movs	r5, r0
10016530:	0008      	movs	r0, r1
10016532:	6023      	str	r3, [r4, #0]
10016534:	f7f1 ff62 	bl	100083fc <_sbrk>
10016538:	1c43      	adds	r3, r0, #1
1001653a:	d103      	bne.n	10016544 <_sbrk_r+0x1c>
1001653c:	6823      	ldr	r3, [r4, #0]
1001653e:	2b00      	cmp	r3, #0
10016540:	d000      	beq.n	10016544 <_sbrk_r+0x1c>
10016542:	602b      	str	r3, [r5, #0]
10016544:	bd70      	pop	{r4, r5, r6, pc}
10016546:	46c0      	nop			; (mov r8, r8)
10016548:	1001b5c0 	.word	0x1001b5c0

1001654c <setbuf>:
1001654c:	424a      	negs	r2, r1
1001654e:	414a      	adcs	r2, r1
10016550:	2380      	movs	r3, #128	; 0x80
10016552:	b510      	push	{r4, lr}
10016554:	0052      	lsls	r2, r2, #1
10016556:	00db      	lsls	r3, r3, #3
10016558:	f000 f802 	bl	10016560 <setvbuf>
1001655c:	bd10      	pop	{r4, pc}
	...

10016560 <setvbuf>:
10016560:	b5f0      	push	{r4, r5, r6, r7, lr}
10016562:	001d      	movs	r5, r3
10016564:	4b51      	ldr	r3, [pc, #324]	; (100166ac <setvbuf+0x14c>)
10016566:	b085      	sub	sp, #20
10016568:	681e      	ldr	r6, [r3, #0]
1001656a:	0004      	movs	r4, r0
1001656c:	000f      	movs	r7, r1
1001656e:	9200      	str	r2, [sp, #0]
10016570:	2e00      	cmp	r6, #0
10016572:	d005      	beq.n	10016580 <setvbuf+0x20>
10016574:	69b3      	ldr	r3, [r6, #24]
10016576:	2b00      	cmp	r3, #0
10016578:	d102      	bne.n	10016580 <setvbuf+0x20>
1001657a:	0030      	movs	r0, r6
1001657c:	f000 fa62 	bl	10016a44 <__sinit>
10016580:	4b4b      	ldr	r3, [pc, #300]	; (100166b0 <setvbuf+0x150>)
10016582:	429c      	cmp	r4, r3
10016584:	d101      	bne.n	1001658a <setvbuf+0x2a>
10016586:	6874      	ldr	r4, [r6, #4]
10016588:	e008      	b.n	1001659c <setvbuf+0x3c>
1001658a:	4b4a      	ldr	r3, [pc, #296]	; (100166b4 <setvbuf+0x154>)
1001658c:	429c      	cmp	r4, r3
1001658e:	d101      	bne.n	10016594 <setvbuf+0x34>
10016590:	68b4      	ldr	r4, [r6, #8]
10016592:	e003      	b.n	1001659c <setvbuf+0x3c>
10016594:	4b48      	ldr	r3, [pc, #288]	; (100166b8 <setvbuf+0x158>)
10016596:	429c      	cmp	r4, r3
10016598:	d100      	bne.n	1001659c <setvbuf+0x3c>
1001659a:	68f4      	ldr	r4, [r6, #12]
1001659c:	9b00      	ldr	r3, [sp, #0]
1001659e:	2b02      	cmp	r3, #2
100165a0:	d005      	beq.n	100165ae <setvbuf+0x4e>
100165a2:	2b01      	cmp	r3, #1
100165a4:	d900      	bls.n	100165a8 <setvbuf+0x48>
100165a6:	e07c      	b.n	100166a2 <setvbuf+0x142>
100165a8:	2d00      	cmp	r5, #0
100165aa:	da00      	bge.n	100165ae <setvbuf+0x4e>
100165ac:	e079      	b.n	100166a2 <setvbuf+0x142>
100165ae:	0021      	movs	r1, r4
100165b0:	0030      	movs	r0, r6
100165b2:	f000 f9d9 	bl	10016968 <_fflush_r>
100165b6:	6b61      	ldr	r1, [r4, #52]	; 0x34
100165b8:	2900      	cmp	r1, #0
100165ba:	d008      	beq.n	100165ce <setvbuf+0x6e>
100165bc:	0023      	movs	r3, r4
100165be:	3344      	adds	r3, #68	; 0x44
100165c0:	4299      	cmp	r1, r3
100165c2:	d002      	beq.n	100165ca <setvbuf+0x6a>
100165c4:	0030      	movs	r0, r6
100165c6:	f7ff fe3d 	bl	10016244 <_free_r>
100165ca:	2300      	movs	r3, #0
100165cc:	6363      	str	r3, [r4, #52]	; 0x34
100165ce:	2300      	movs	r3, #0
100165d0:	61a3      	str	r3, [r4, #24]
100165d2:	6063      	str	r3, [r4, #4]
100165d4:	89a3      	ldrh	r3, [r4, #12]
100165d6:	061b      	lsls	r3, r3, #24
100165d8:	d503      	bpl.n	100165e2 <setvbuf+0x82>
100165da:	6921      	ldr	r1, [r4, #16]
100165dc:	0030      	movs	r0, r6
100165de:	f7ff fe31 	bl	10016244 <_free_r>
100165e2:	89a2      	ldrh	r2, [r4, #12]
100165e4:	4b35      	ldr	r3, [pc, #212]	; (100166bc <setvbuf+0x15c>)
100165e6:	4013      	ands	r3, r2
100165e8:	81a3      	strh	r3, [r4, #12]
100165ea:	9b00      	ldr	r3, [sp, #0]
100165ec:	2b02      	cmp	r3, #2
100165ee:	d021      	beq.n	10016634 <setvbuf+0xd4>
100165f0:	ab03      	add	r3, sp, #12
100165f2:	aa02      	add	r2, sp, #8
100165f4:	0021      	movs	r1, r4
100165f6:	0030      	movs	r0, r6
100165f8:	f000 fab8 	bl	10016b6c <__swhatbuf_r>
100165fc:	89a3      	ldrh	r3, [r4, #12]
100165fe:	4318      	orrs	r0, r3
10016600:	81a0      	strh	r0, [r4, #12]
10016602:	2d00      	cmp	r5, #0
10016604:	d101      	bne.n	1001660a <setvbuf+0xaa>
10016606:	9d02      	ldr	r5, [sp, #8]
10016608:	e001      	b.n	1001660e <setvbuf+0xae>
1001660a:	2f00      	cmp	r7, #0
1001660c:	d125      	bne.n	1001665a <setvbuf+0xfa>
1001660e:	0028      	movs	r0, r5
10016610:	f7ff fdee 	bl	100161f0 <malloc>
10016614:	9501      	str	r5, [sp, #4]
10016616:	1e07      	subs	r7, r0, #0
10016618:	d11a      	bne.n	10016650 <setvbuf+0xf0>
1001661a:	9b02      	ldr	r3, [sp, #8]
1001661c:	9301      	str	r3, [sp, #4]
1001661e:	42ab      	cmp	r3, r5
10016620:	d102      	bne.n	10016628 <setvbuf+0xc8>
10016622:	2001      	movs	r0, #1
10016624:	4240      	negs	r0, r0
10016626:	e006      	b.n	10016636 <setvbuf+0xd6>
10016628:	9801      	ldr	r0, [sp, #4]
1001662a:	f7ff fde1 	bl	100161f0 <malloc>
1001662e:	1e07      	subs	r7, r0, #0
10016630:	d10e      	bne.n	10016650 <setvbuf+0xf0>
10016632:	e7f6      	b.n	10016622 <setvbuf+0xc2>
10016634:	2000      	movs	r0, #0
10016636:	2202      	movs	r2, #2
10016638:	89a3      	ldrh	r3, [r4, #12]
1001663a:	4313      	orrs	r3, r2
1001663c:	81a3      	strh	r3, [r4, #12]
1001663e:	2300      	movs	r3, #0
10016640:	60a3      	str	r3, [r4, #8]
10016642:	0023      	movs	r3, r4
10016644:	3347      	adds	r3, #71	; 0x47
10016646:	6023      	str	r3, [r4, #0]
10016648:	6123      	str	r3, [r4, #16]
1001664a:	2301      	movs	r3, #1
1001664c:	6163      	str	r3, [r4, #20]
1001664e:	e02a      	b.n	100166a6 <setvbuf+0x146>
10016650:	2280      	movs	r2, #128	; 0x80
10016652:	89a3      	ldrh	r3, [r4, #12]
10016654:	9d01      	ldr	r5, [sp, #4]
10016656:	4313      	orrs	r3, r2
10016658:	81a3      	strh	r3, [r4, #12]
1001665a:	69b3      	ldr	r3, [r6, #24]
1001665c:	2b00      	cmp	r3, #0
1001665e:	d102      	bne.n	10016666 <setvbuf+0x106>
10016660:	0030      	movs	r0, r6
10016662:	f000 f9ef 	bl	10016a44 <__sinit>
10016666:	9b00      	ldr	r3, [sp, #0]
10016668:	2b01      	cmp	r3, #1
1001666a:	d103      	bne.n	10016674 <setvbuf+0x114>
1001666c:	89a3      	ldrh	r3, [r4, #12]
1001666e:	9a00      	ldr	r2, [sp, #0]
10016670:	431a      	orrs	r2, r3
10016672:	81a2      	strh	r2, [r4, #12]
10016674:	2308      	movs	r3, #8
10016676:	89a2      	ldrh	r2, [r4, #12]
10016678:	6027      	str	r7, [r4, #0]
1001667a:	4013      	ands	r3, r2
1001667c:	6127      	str	r7, [r4, #16]
1001667e:	6165      	str	r5, [r4, #20]
10016680:	1e18      	subs	r0, r3, #0
10016682:	d00c      	beq.n	1001669e <setvbuf+0x13e>
10016684:	2301      	movs	r3, #1
10016686:	401a      	ands	r2, r3
10016688:	2300      	movs	r3, #0
1001668a:	1e10      	subs	r0, r2, #0
1001668c:	4298      	cmp	r0, r3
1001668e:	d004      	beq.n	1001669a <setvbuf+0x13a>
10016690:	426d      	negs	r5, r5
10016692:	60a3      	str	r3, [r4, #8]
10016694:	61a5      	str	r5, [r4, #24]
10016696:	0018      	movs	r0, r3
10016698:	e005      	b.n	100166a6 <setvbuf+0x146>
1001669a:	60a5      	str	r5, [r4, #8]
1001669c:	e003      	b.n	100166a6 <setvbuf+0x146>
1001669e:	60a3      	str	r3, [r4, #8]
100166a0:	e001      	b.n	100166a6 <setvbuf+0x146>
100166a2:	2001      	movs	r0, #1
100166a4:	4240      	negs	r0, r0
100166a6:	b005      	add	sp, #20
100166a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100166aa:	46c0      	nop			; (mov r8, r8)
100166ac:	100186c8 	.word	0x100186c8
100166b0:	100185a8 	.word	0x100185a8
100166b4:	100185c8 	.word	0x100185c8
100166b8:	100185e8 	.word	0x100185e8
100166bc:	fffff35c 	.word	0xfffff35c

100166c0 <__swbuf_r>:
100166c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100166c2:	0005      	movs	r5, r0
100166c4:	000f      	movs	r7, r1
100166c6:	0014      	movs	r4, r2
100166c8:	2800      	cmp	r0, #0
100166ca:	d004      	beq.n	100166d6 <__swbuf_r+0x16>
100166cc:	6983      	ldr	r3, [r0, #24]
100166ce:	2b00      	cmp	r3, #0
100166d0:	d101      	bne.n	100166d6 <__swbuf_r+0x16>
100166d2:	f000 f9b7 	bl	10016a44 <__sinit>
100166d6:	4b23      	ldr	r3, [pc, #140]	; (10016764 <__swbuf_r+0xa4>)
100166d8:	429c      	cmp	r4, r3
100166da:	d101      	bne.n	100166e0 <__swbuf_r+0x20>
100166dc:	686c      	ldr	r4, [r5, #4]
100166de:	e008      	b.n	100166f2 <__swbuf_r+0x32>
100166e0:	4b21      	ldr	r3, [pc, #132]	; (10016768 <__swbuf_r+0xa8>)
100166e2:	429c      	cmp	r4, r3
100166e4:	d101      	bne.n	100166ea <__swbuf_r+0x2a>
100166e6:	68ac      	ldr	r4, [r5, #8]
100166e8:	e003      	b.n	100166f2 <__swbuf_r+0x32>
100166ea:	4b20      	ldr	r3, [pc, #128]	; (1001676c <__swbuf_r+0xac>)
100166ec:	429c      	cmp	r4, r3
100166ee:	d100      	bne.n	100166f2 <__swbuf_r+0x32>
100166f0:	68ec      	ldr	r4, [r5, #12]
100166f2:	69a3      	ldr	r3, [r4, #24]
100166f4:	60a3      	str	r3, [r4, #8]
100166f6:	89a3      	ldrh	r3, [r4, #12]
100166f8:	071b      	lsls	r3, r3, #28
100166fa:	d50a      	bpl.n	10016712 <__swbuf_r+0x52>
100166fc:	6923      	ldr	r3, [r4, #16]
100166fe:	2b00      	cmp	r3, #0
10016700:	d007      	beq.n	10016712 <__swbuf_r+0x52>
10016702:	6823      	ldr	r3, [r4, #0]
10016704:	6922      	ldr	r2, [r4, #16]
10016706:	b2fe      	uxtb	r6, r7
10016708:	1a98      	subs	r0, r3, r2
1001670a:	6963      	ldr	r3, [r4, #20]
1001670c:	4298      	cmp	r0, r3
1001670e:	db0f      	blt.n	10016730 <__swbuf_r+0x70>
10016710:	e008      	b.n	10016724 <__swbuf_r+0x64>
10016712:	0021      	movs	r1, r4
10016714:	0028      	movs	r0, r5
10016716:	f000 f82b 	bl	10016770 <__swsetup_r>
1001671a:	2800      	cmp	r0, #0
1001671c:	d0f1      	beq.n	10016702 <__swbuf_r+0x42>
1001671e:	2001      	movs	r0, #1
10016720:	4240      	negs	r0, r0
10016722:	e01d      	b.n	10016760 <__swbuf_r+0xa0>
10016724:	0021      	movs	r1, r4
10016726:	0028      	movs	r0, r5
10016728:	f000 f91e 	bl	10016968 <_fflush_r>
1001672c:	2800      	cmp	r0, #0
1001672e:	d1f6      	bne.n	1001671e <__swbuf_r+0x5e>
10016730:	68a3      	ldr	r3, [r4, #8]
10016732:	3001      	adds	r0, #1
10016734:	3b01      	subs	r3, #1
10016736:	60a3      	str	r3, [r4, #8]
10016738:	6823      	ldr	r3, [r4, #0]
1001673a:	1c5a      	adds	r2, r3, #1
1001673c:	6022      	str	r2, [r4, #0]
1001673e:	701f      	strb	r7, [r3, #0]
10016740:	6963      	ldr	r3, [r4, #20]
10016742:	4298      	cmp	r0, r3
10016744:	d005      	beq.n	10016752 <__swbuf_r+0x92>
10016746:	89a3      	ldrh	r3, [r4, #12]
10016748:	0030      	movs	r0, r6
1001674a:	07db      	lsls	r3, r3, #31
1001674c:	d508      	bpl.n	10016760 <__swbuf_r+0xa0>
1001674e:	2e0a      	cmp	r6, #10
10016750:	d106      	bne.n	10016760 <__swbuf_r+0xa0>
10016752:	0021      	movs	r1, r4
10016754:	0028      	movs	r0, r5
10016756:	f000 f907 	bl	10016968 <_fflush_r>
1001675a:	2800      	cmp	r0, #0
1001675c:	d1df      	bne.n	1001671e <__swbuf_r+0x5e>
1001675e:	0030      	movs	r0, r6
10016760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016762:	46c0      	nop			; (mov r8, r8)
10016764:	100185a8 	.word	0x100185a8
10016768:	100185c8 	.word	0x100185c8
1001676c:	100185e8 	.word	0x100185e8

10016770 <__swsetup_r>:
10016770:	4b36      	ldr	r3, [pc, #216]	; (1001684c <__swsetup_r+0xdc>)
10016772:	b570      	push	{r4, r5, r6, lr}
10016774:	681d      	ldr	r5, [r3, #0]
10016776:	0006      	movs	r6, r0
10016778:	000c      	movs	r4, r1
1001677a:	2d00      	cmp	r5, #0
1001677c:	d005      	beq.n	1001678a <__swsetup_r+0x1a>
1001677e:	69ab      	ldr	r3, [r5, #24]
10016780:	2b00      	cmp	r3, #0
10016782:	d102      	bne.n	1001678a <__swsetup_r+0x1a>
10016784:	0028      	movs	r0, r5
10016786:	f000 f95d 	bl	10016a44 <__sinit>
1001678a:	4b31      	ldr	r3, [pc, #196]	; (10016850 <__swsetup_r+0xe0>)
1001678c:	429c      	cmp	r4, r3
1001678e:	d101      	bne.n	10016794 <__swsetup_r+0x24>
10016790:	686c      	ldr	r4, [r5, #4]
10016792:	e008      	b.n	100167a6 <__swsetup_r+0x36>
10016794:	4b2f      	ldr	r3, [pc, #188]	; (10016854 <__swsetup_r+0xe4>)
10016796:	429c      	cmp	r4, r3
10016798:	d101      	bne.n	1001679e <__swsetup_r+0x2e>
1001679a:	68ac      	ldr	r4, [r5, #8]
1001679c:	e003      	b.n	100167a6 <__swsetup_r+0x36>
1001679e:	4b2e      	ldr	r3, [pc, #184]	; (10016858 <__swsetup_r+0xe8>)
100167a0:	429c      	cmp	r4, r3
100167a2:	d100      	bne.n	100167a6 <__swsetup_r+0x36>
100167a4:	68ec      	ldr	r4, [r5, #12]
100167a6:	220c      	movs	r2, #12
100167a8:	5ea3      	ldrsh	r3, [r4, r2]
100167aa:	b29a      	uxth	r2, r3
100167ac:	0711      	lsls	r1, r2, #28
100167ae:	d423      	bmi.n	100167f8 <__swsetup_r+0x88>
100167b0:	06d1      	lsls	r1, r2, #27
100167b2:	d407      	bmi.n	100167c4 <__swsetup_r+0x54>
100167b4:	2209      	movs	r2, #9
100167b6:	2001      	movs	r0, #1
100167b8:	6032      	str	r2, [r6, #0]
100167ba:	3237      	adds	r2, #55	; 0x37
100167bc:	4313      	orrs	r3, r2
100167be:	81a3      	strh	r3, [r4, #12]
100167c0:	4240      	negs	r0, r0
100167c2:	e042      	b.n	1001684a <__swsetup_r+0xda>
100167c4:	0753      	lsls	r3, r2, #29
100167c6:	d513      	bpl.n	100167f0 <__swsetup_r+0x80>
100167c8:	6b61      	ldr	r1, [r4, #52]	; 0x34
100167ca:	2900      	cmp	r1, #0
100167cc:	d008      	beq.n	100167e0 <__swsetup_r+0x70>
100167ce:	0023      	movs	r3, r4
100167d0:	3344      	adds	r3, #68	; 0x44
100167d2:	4299      	cmp	r1, r3
100167d4:	d002      	beq.n	100167dc <__swsetup_r+0x6c>
100167d6:	0030      	movs	r0, r6
100167d8:	f7ff fd34 	bl	10016244 <_free_r>
100167dc:	2300      	movs	r3, #0
100167de:	6363      	str	r3, [r4, #52]	; 0x34
100167e0:	2224      	movs	r2, #36	; 0x24
100167e2:	89a3      	ldrh	r3, [r4, #12]
100167e4:	4393      	bics	r3, r2
100167e6:	81a3      	strh	r3, [r4, #12]
100167e8:	2300      	movs	r3, #0
100167ea:	6063      	str	r3, [r4, #4]
100167ec:	6923      	ldr	r3, [r4, #16]
100167ee:	6023      	str	r3, [r4, #0]
100167f0:	2208      	movs	r2, #8
100167f2:	89a3      	ldrh	r3, [r4, #12]
100167f4:	4313      	orrs	r3, r2
100167f6:	81a3      	strh	r3, [r4, #12]
100167f8:	6923      	ldr	r3, [r4, #16]
100167fa:	2b00      	cmp	r3, #0
100167fc:	d10b      	bne.n	10016816 <__swsetup_r+0xa6>
100167fe:	23a0      	movs	r3, #160	; 0xa0
10016800:	89a2      	ldrh	r2, [r4, #12]
10016802:	009b      	lsls	r3, r3, #2
10016804:	4013      	ands	r3, r2
10016806:	2280      	movs	r2, #128	; 0x80
10016808:	0092      	lsls	r2, r2, #2
1001680a:	4293      	cmp	r3, r2
1001680c:	d003      	beq.n	10016816 <__swsetup_r+0xa6>
1001680e:	0021      	movs	r1, r4
10016810:	0030      	movs	r0, r6
10016812:	f000 f9d1 	bl	10016bb8 <__smakebuf_r>
10016816:	2301      	movs	r3, #1
10016818:	89a2      	ldrh	r2, [r4, #12]
1001681a:	4013      	ands	r3, r2
1001681c:	d005      	beq.n	1001682a <__swsetup_r+0xba>
1001681e:	2300      	movs	r3, #0
10016820:	60a3      	str	r3, [r4, #8]
10016822:	6963      	ldr	r3, [r4, #20]
10016824:	425b      	negs	r3, r3
10016826:	61a3      	str	r3, [r4, #24]
10016828:	e003      	b.n	10016832 <__swsetup_r+0xc2>
1001682a:	0792      	lsls	r2, r2, #30
1001682c:	d400      	bmi.n	10016830 <__swsetup_r+0xc0>
1001682e:	6963      	ldr	r3, [r4, #20]
10016830:	60a3      	str	r3, [r4, #8]
10016832:	2000      	movs	r0, #0
10016834:	6923      	ldr	r3, [r4, #16]
10016836:	4283      	cmp	r3, r0
10016838:	d107      	bne.n	1001684a <__swsetup_r+0xda>
1001683a:	220c      	movs	r2, #12
1001683c:	5ea3      	ldrsh	r3, [r4, r2]
1001683e:	061a      	lsls	r2, r3, #24
10016840:	d503      	bpl.n	1001684a <__swsetup_r+0xda>
10016842:	2240      	movs	r2, #64	; 0x40
10016844:	4313      	orrs	r3, r2
10016846:	81a3      	strh	r3, [r4, #12]
10016848:	3801      	subs	r0, #1
1001684a:	bd70      	pop	{r4, r5, r6, pc}
1001684c:	100186c8 	.word	0x100186c8
10016850:	100185a8 	.word	0x100185a8
10016854:	100185c8 	.word	0x100185c8
10016858:	100185e8 	.word	0x100185e8

1001685c <__sflush_r>:
1001685c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001685e:	898a      	ldrh	r2, [r1, #12]
10016860:	0005      	movs	r5, r0
10016862:	000c      	movs	r4, r1
10016864:	0713      	lsls	r3, r2, #28
10016866:	d45a      	bmi.n	1001691e <__sflush_r+0xc2>
10016868:	684b      	ldr	r3, [r1, #4]
1001686a:	2b00      	cmp	r3, #0
1001686c:	dc02      	bgt.n	10016874 <__sflush_r+0x18>
1001686e:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10016870:	2b00      	cmp	r3, #0
10016872:	dd19      	ble.n	100168a8 <__sflush_r+0x4c>
10016874:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10016876:	2f00      	cmp	r7, #0
10016878:	d016      	beq.n	100168a8 <__sflush_r+0x4c>
1001687a:	2300      	movs	r3, #0
1001687c:	682e      	ldr	r6, [r5, #0]
1001687e:	602b      	str	r3, [r5, #0]
10016880:	2380      	movs	r3, #128	; 0x80
10016882:	015b      	lsls	r3, r3, #5
10016884:	401a      	ands	r2, r3
10016886:	d001      	beq.n	1001688c <__sflush_r+0x30>
10016888:	6d60      	ldr	r0, [r4, #84]	; 0x54
1001688a:	e014      	b.n	100168b6 <__sflush_r+0x5a>
1001688c:	2301      	movs	r3, #1
1001688e:	6a21      	ldr	r1, [r4, #32]
10016890:	0028      	movs	r0, r5
10016892:	47b8      	blx	r7
10016894:	1c43      	adds	r3, r0, #1
10016896:	d10e      	bne.n	100168b6 <__sflush_r+0x5a>
10016898:	682b      	ldr	r3, [r5, #0]
1001689a:	2b00      	cmp	r3, #0
1001689c:	d00b      	beq.n	100168b6 <__sflush_r+0x5a>
1001689e:	2b1d      	cmp	r3, #29
100168a0:	d001      	beq.n	100168a6 <__sflush_r+0x4a>
100168a2:	2b16      	cmp	r3, #22
100168a4:	d102      	bne.n	100168ac <__sflush_r+0x50>
100168a6:	602e      	str	r6, [r5, #0]
100168a8:	2000      	movs	r0, #0
100168aa:	e05a      	b.n	10016962 <__sflush_r+0x106>
100168ac:	2240      	movs	r2, #64	; 0x40
100168ae:	89a3      	ldrh	r3, [r4, #12]
100168b0:	4313      	orrs	r3, r2
100168b2:	81a3      	strh	r3, [r4, #12]
100168b4:	e055      	b.n	10016962 <__sflush_r+0x106>
100168b6:	89a3      	ldrh	r3, [r4, #12]
100168b8:	075b      	lsls	r3, r3, #29
100168ba:	d506      	bpl.n	100168ca <__sflush_r+0x6e>
100168bc:	6863      	ldr	r3, [r4, #4]
100168be:	1ac0      	subs	r0, r0, r3
100168c0:	6b63      	ldr	r3, [r4, #52]	; 0x34
100168c2:	2b00      	cmp	r3, #0
100168c4:	d001      	beq.n	100168ca <__sflush_r+0x6e>
100168c6:	6c23      	ldr	r3, [r4, #64]	; 0x40
100168c8:	1ac0      	subs	r0, r0, r3
100168ca:	2300      	movs	r3, #0
100168cc:	0002      	movs	r2, r0
100168ce:	6a21      	ldr	r1, [r4, #32]
100168d0:	0028      	movs	r0, r5
100168d2:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100168d4:	47b8      	blx	r7
100168d6:	89a3      	ldrh	r3, [r4, #12]
100168d8:	1c42      	adds	r2, r0, #1
100168da:	d106      	bne.n	100168ea <__sflush_r+0x8e>
100168dc:	6829      	ldr	r1, [r5, #0]
100168de:	291d      	cmp	r1, #29
100168e0:	d83a      	bhi.n	10016958 <__sflush_r+0xfc>
100168e2:	4a20      	ldr	r2, [pc, #128]	; (10016964 <__sflush_r+0x108>)
100168e4:	40ca      	lsrs	r2, r1
100168e6:	07d2      	lsls	r2, r2, #31
100168e8:	d536      	bpl.n	10016958 <__sflush_r+0xfc>
100168ea:	2200      	movs	r2, #0
100168ec:	6062      	str	r2, [r4, #4]
100168ee:	6922      	ldr	r2, [r4, #16]
100168f0:	6022      	str	r2, [r4, #0]
100168f2:	04db      	lsls	r3, r3, #19
100168f4:	d505      	bpl.n	10016902 <__sflush_r+0xa6>
100168f6:	1c43      	adds	r3, r0, #1
100168f8:	d102      	bne.n	10016900 <__sflush_r+0xa4>
100168fa:	682b      	ldr	r3, [r5, #0]
100168fc:	2b00      	cmp	r3, #0
100168fe:	d100      	bne.n	10016902 <__sflush_r+0xa6>
10016900:	6560      	str	r0, [r4, #84]	; 0x54
10016902:	6b61      	ldr	r1, [r4, #52]	; 0x34
10016904:	602e      	str	r6, [r5, #0]
10016906:	2900      	cmp	r1, #0
10016908:	d0ce      	beq.n	100168a8 <__sflush_r+0x4c>
1001690a:	0023      	movs	r3, r4
1001690c:	3344      	adds	r3, #68	; 0x44
1001690e:	4299      	cmp	r1, r3
10016910:	d002      	beq.n	10016918 <__sflush_r+0xbc>
10016912:	0028      	movs	r0, r5
10016914:	f7ff fc96 	bl	10016244 <_free_r>
10016918:	2000      	movs	r0, #0
1001691a:	6360      	str	r0, [r4, #52]	; 0x34
1001691c:	e021      	b.n	10016962 <__sflush_r+0x106>
1001691e:	690f      	ldr	r7, [r1, #16]
10016920:	2f00      	cmp	r7, #0
10016922:	d0c1      	beq.n	100168a8 <__sflush_r+0x4c>
10016924:	680b      	ldr	r3, [r1, #0]
10016926:	600f      	str	r7, [r1, #0]
10016928:	1bdb      	subs	r3, r3, r7
1001692a:	9301      	str	r3, [sp, #4]
1001692c:	2300      	movs	r3, #0
1001692e:	0792      	lsls	r2, r2, #30
10016930:	d100      	bne.n	10016934 <__sflush_r+0xd8>
10016932:	694b      	ldr	r3, [r1, #20]
10016934:	60a3      	str	r3, [r4, #8]
10016936:	e003      	b.n	10016940 <__sflush_r+0xe4>
10016938:	9b01      	ldr	r3, [sp, #4]
1001693a:	183f      	adds	r7, r7, r0
1001693c:	1a1b      	subs	r3, r3, r0
1001693e:	9301      	str	r3, [sp, #4]
10016940:	9b01      	ldr	r3, [sp, #4]
10016942:	2b00      	cmp	r3, #0
10016944:	ddb0      	ble.n	100168a8 <__sflush_r+0x4c>
10016946:	9b01      	ldr	r3, [sp, #4]
10016948:	003a      	movs	r2, r7
1001694a:	6a21      	ldr	r1, [r4, #32]
1001694c:	0028      	movs	r0, r5
1001694e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10016950:	47b0      	blx	r6
10016952:	2800      	cmp	r0, #0
10016954:	dcf0      	bgt.n	10016938 <__sflush_r+0xdc>
10016956:	89a3      	ldrh	r3, [r4, #12]
10016958:	2240      	movs	r2, #64	; 0x40
1001695a:	2001      	movs	r0, #1
1001695c:	4313      	orrs	r3, r2
1001695e:	81a3      	strh	r3, [r4, #12]
10016960:	4240      	negs	r0, r0
10016962:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10016964:	20400001 	.word	0x20400001

10016968 <_fflush_r>:
10016968:	690b      	ldr	r3, [r1, #16]
1001696a:	b570      	push	{r4, r5, r6, lr}
1001696c:	0005      	movs	r5, r0
1001696e:	000c      	movs	r4, r1
10016970:	2b00      	cmp	r3, #0
10016972:	d101      	bne.n	10016978 <_fflush_r+0x10>
10016974:	2000      	movs	r0, #0
10016976:	e01c      	b.n	100169b2 <_fflush_r+0x4a>
10016978:	2800      	cmp	r0, #0
1001697a:	d004      	beq.n	10016986 <_fflush_r+0x1e>
1001697c:	6983      	ldr	r3, [r0, #24]
1001697e:	2b00      	cmp	r3, #0
10016980:	d101      	bne.n	10016986 <_fflush_r+0x1e>
10016982:	f000 f85f 	bl	10016a44 <__sinit>
10016986:	4b0b      	ldr	r3, [pc, #44]	; (100169b4 <_fflush_r+0x4c>)
10016988:	429c      	cmp	r4, r3
1001698a:	d101      	bne.n	10016990 <_fflush_r+0x28>
1001698c:	686c      	ldr	r4, [r5, #4]
1001698e:	e008      	b.n	100169a2 <_fflush_r+0x3a>
10016990:	4b09      	ldr	r3, [pc, #36]	; (100169b8 <_fflush_r+0x50>)
10016992:	429c      	cmp	r4, r3
10016994:	d101      	bne.n	1001699a <_fflush_r+0x32>
10016996:	68ac      	ldr	r4, [r5, #8]
10016998:	e003      	b.n	100169a2 <_fflush_r+0x3a>
1001699a:	4b08      	ldr	r3, [pc, #32]	; (100169bc <_fflush_r+0x54>)
1001699c:	429c      	cmp	r4, r3
1001699e:	d100      	bne.n	100169a2 <_fflush_r+0x3a>
100169a0:	68ec      	ldr	r4, [r5, #12]
100169a2:	220c      	movs	r2, #12
100169a4:	5ea3      	ldrsh	r3, [r4, r2]
100169a6:	2b00      	cmp	r3, #0
100169a8:	d0e4      	beq.n	10016974 <_fflush_r+0xc>
100169aa:	0021      	movs	r1, r4
100169ac:	0028      	movs	r0, r5
100169ae:	f7ff ff55 	bl	1001685c <__sflush_r>
100169b2:	bd70      	pop	{r4, r5, r6, pc}
100169b4:	100185a8 	.word	0x100185a8
100169b8:	100185c8 	.word	0x100185c8
100169bc:	100185e8 	.word	0x100185e8

100169c0 <_cleanup_r>:
100169c0:	b510      	push	{r4, lr}
100169c2:	4902      	ldr	r1, [pc, #8]	; (100169cc <_cleanup_r+0xc>)
100169c4:	f000 f8b0 	bl	10016b28 <_fwalk_reent>
100169c8:	bd10      	pop	{r4, pc}
100169ca:	46c0      	nop			; (mov r8, r8)
100169cc:	10016969 	.word	0x10016969

100169d0 <std.isra.0>:
100169d0:	2300      	movs	r3, #0
100169d2:	b510      	push	{r4, lr}
100169d4:	0004      	movs	r4, r0
100169d6:	6003      	str	r3, [r0, #0]
100169d8:	6043      	str	r3, [r0, #4]
100169da:	6083      	str	r3, [r0, #8]
100169dc:	8181      	strh	r1, [r0, #12]
100169de:	6643      	str	r3, [r0, #100]	; 0x64
100169e0:	81c2      	strh	r2, [r0, #14]
100169e2:	6103      	str	r3, [r0, #16]
100169e4:	6143      	str	r3, [r0, #20]
100169e6:	6183      	str	r3, [r0, #24]
100169e8:	0019      	movs	r1, r3
100169ea:	2208      	movs	r2, #8
100169ec:	305c      	adds	r0, #92	; 0x5c
100169ee:	f7ff fc21 	bl	10016234 <memset>
100169f2:	4b05      	ldr	r3, [pc, #20]	; (10016a08 <std.isra.0+0x38>)
100169f4:	6224      	str	r4, [r4, #32]
100169f6:	6263      	str	r3, [r4, #36]	; 0x24
100169f8:	4b04      	ldr	r3, [pc, #16]	; (10016a0c <std.isra.0+0x3c>)
100169fa:	62a3      	str	r3, [r4, #40]	; 0x28
100169fc:	4b04      	ldr	r3, [pc, #16]	; (10016a10 <std.isra.0+0x40>)
100169fe:	62e3      	str	r3, [r4, #44]	; 0x2c
10016a00:	4b04      	ldr	r3, [pc, #16]	; (10016a14 <std.isra.0+0x44>)
10016a02:	6323      	str	r3, [r4, #48]	; 0x30
10016a04:	bd10      	pop	{r4, pc}
10016a06:	46c0      	nop			; (mov r8, r8)
10016a08:	10017249 	.word	0x10017249
10016a0c:	10017271 	.word	0x10017271
10016a10:	100172a9 	.word	0x100172a9
10016a14:	100172d5 	.word	0x100172d5

10016a18 <__sfmoreglue>:
10016a18:	b570      	push	{r4, r5, r6, lr}
10016a1a:	2568      	movs	r5, #104	; 0x68
10016a1c:	1e4b      	subs	r3, r1, #1
10016a1e:	435d      	muls	r5, r3
10016a20:	000e      	movs	r6, r1
10016a22:	0029      	movs	r1, r5
10016a24:	3174      	adds	r1, #116	; 0x74
10016a26:	f7ff fc53 	bl	100162d0 <_malloc_r>
10016a2a:	1e04      	subs	r4, r0, #0
10016a2c:	d008      	beq.n	10016a40 <__sfmoreglue+0x28>
10016a2e:	2100      	movs	r1, #0
10016a30:	002a      	movs	r2, r5
10016a32:	6001      	str	r1, [r0, #0]
10016a34:	6046      	str	r6, [r0, #4]
10016a36:	300c      	adds	r0, #12
10016a38:	60a0      	str	r0, [r4, #8]
10016a3a:	3268      	adds	r2, #104	; 0x68
10016a3c:	f7ff fbfa 	bl	10016234 <memset>
10016a40:	0020      	movs	r0, r4
10016a42:	bd70      	pop	{r4, r5, r6, pc}

10016a44 <__sinit>:
10016a44:	6983      	ldr	r3, [r0, #24]
10016a46:	b513      	push	{r0, r1, r4, lr}
10016a48:	0004      	movs	r4, r0
10016a4a:	2b00      	cmp	r3, #0
10016a4c:	d128      	bne.n	10016aa0 <__sinit+0x5c>
10016a4e:	6483      	str	r3, [r0, #72]	; 0x48
10016a50:	64c3      	str	r3, [r0, #76]	; 0x4c
10016a52:	6503      	str	r3, [r0, #80]	; 0x50
10016a54:	4b13      	ldr	r3, [pc, #76]	; (10016aa4 <__sinit+0x60>)
10016a56:	4a14      	ldr	r2, [pc, #80]	; (10016aa8 <__sinit+0x64>)
10016a58:	681b      	ldr	r3, [r3, #0]
10016a5a:	6282      	str	r2, [r0, #40]	; 0x28
10016a5c:	9301      	str	r3, [sp, #4]
10016a5e:	4298      	cmp	r0, r3
10016a60:	d101      	bne.n	10016a66 <__sinit+0x22>
10016a62:	2301      	movs	r3, #1
10016a64:	6183      	str	r3, [r0, #24]
10016a66:	0020      	movs	r0, r4
10016a68:	f000 f820 	bl	10016aac <__sfp>
10016a6c:	6060      	str	r0, [r4, #4]
10016a6e:	0020      	movs	r0, r4
10016a70:	f000 f81c 	bl	10016aac <__sfp>
10016a74:	60a0      	str	r0, [r4, #8]
10016a76:	0020      	movs	r0, r4
10016a78:	f000 f818 	bl	10016aac <__sfp>
10016a7c:	2200      	movs	r2, #0
10016a7e:	60e0      	str	r0, [r4, #12]
10016a80:	2104      	movs	r1, #4
10016a82:	6860      	ldr	r0, [r4, #4]
10016a84:	f7ff ffa4 	bl	100169d0 <std.isra.0>
10016a88:	2201      	movs	r2, #1
10016a8a:	2109      	movs	r1, #9
10016a8c:	68a0      	ldr	r0, [r4, #8]
10016a8e:	f7ff ff9f 	bl	100169d0 <std.isra.0>
10016a92:	2202      	movs	r2, #2
10016a94:	2112      	movs	r1, #18
10016a96:	68e0      	ldr	r0, [r4, #12]
10016a98:	f7ff ff9a 	bl	100169d0 <std.isra.0>
10016a9c:	2301      	movs	r3, #1
10016a9e:	61a3      	str	r3, [r4, #24]
10016aa0:	bd13      	pop	{r0, r1, r4, pc}
10016aa2:	46c0      	nop			; (mov r8, r8)
10016aa4:	100185a4 	.word	0x100185a4
10016aa8:	100169c1 	.word	0x100169c1

10016aac <__sfp>:
10016aac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016aae:	4b1d      	ldr	r3, [pc, #116]	; (10016b24 <__sfp+0x78>)
10016ab0:	0006      	movs	r6, r0
10016ab2:	681d      	ldr	r5, [r3, #0]
10016ab4:	69ab      	ldr	r3, [r5, #24]
10016ab6:	2b00      	cmp	r3, #0
10016ab8:	d102      	bne.n	10016ac0 <__sfp+0x14>
10016aba:	0028      	movs	r0, r5
10016abc:	f7ff ffc2 	bl	10016a44 <__sinit>
10016ac0:	3548      	adds	r5, #72	; 0x48
10016ac2:	68ac      	ldr	r4, [r5, #8]
10016ac4:	686b      	ldr	r3, [r5, #4]
10016ac6:	3b01      	subs	r3, #1
10016ac8:	d405      	bmi.n	10016ad6 <__sfp+0x2a>
10016aca:	220c      	movs	r2, #12
10016acc:	5ea7      	ldrsh	r7, [r4, r2]
10016ace:	2f00      	cmp	r7, #0
10016ad0:	d010      	beq.n	10016af4 <__sfp+0x48>
10016ad2:	3468      	adds	r4, #104	; 0x68
10016ad4:	e7f7      	b.n	10016ac6 <__sfp+0x1a>
10016ad6:	682b      	ldr	r3, [r5, #0]
10016ad8:	2b00      	cmp	r3, #0
10016ada:	d001      	beq.n	10016ae0 <__sfp+0x34>
10016adc:	682d      	ldr	r5, [r5, #0]
10016ade:	e7f0      	b.n	10016ac2 <__sfp+0x16>
10016ae0:	2104      	movs	r1, #4
10016ae2:	0030      	movs	r0, r6
10016ae4:	f7ff ff98 	bl	10016a18 <__sfmoreglue>
10016ae8:	6028      	str	r0, [r5, #0]
10016aea:	2800      	cmp	r0, #0
10016aec:	d1f6      	bne.n	10016adc <__sfp+0x30>
10016aee:	230c      	movs	r3, #12
10016af0:	6033      	str	r3, [r6, #0]
10016af2:	e016      	b.n	10016b22 <__sfp+0x76>
10016af4:	2301      	movs	r3, #1
10016af6:	0020      	movs	r0, r4
10016af8:	425b      	negs	r3, r3
10016afa:	81e3      	strh	r3, [r4, #14]
10016afc:	3302      	adds	r3, #2
10016afe:	81a3      	strh	r3, [r4, #12]
10016b00:	6667      	str	r7, [r4, #100]	; 0x64
10016b02:	6027      	str	r7, [r4, #0]
10016b04:	60a7      	str	r7, [r4, #8]
10016b06:	6067      	str	r7, [r4, #4]
10016b08:	6127      	str	r7, [r4, #16]
10016b0a:	6167      	str	r7, [r4, #20]
10016b0c:	61a7      	str	r7, [r4, #24]
10016b0e:	305c      	adds	r0, #92	; 0x5c
10016b10:	2208      	movs	r2, #8
10016b12:	0039      	movs	r1, r7
10016b14:	f7ff fb8e 	bl	10016234 <memset>
10016b18:	0020      	movs	r0, r4
10016b1a:	6367      	str	r7, [r4, #52]	; 0x34
10016b1c:	63a7      	str	r7, [r4, #56]	; 0x38
10016b1e:	64a7      	str	r7, [r4, #72]	; 0x48
10016b20:	64e7      	str	r7, [r4, #76]	; 0x4c
10016b22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10016b24:	100185a4 	.word	0x100185a4

10016b28 <_fwalk_reent>:
10016b28:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016b2a:	0004      	movs	r4, r0
10016b2c:	0007      	movs	r7, r0
10016b2e:	2600      	movs	r6, #0
10016b30:	9101      	str	r1, [sp, #4]
10016b32:	3448      	adds	r4, #72	; 0x48
10016b34:	2c00      	cmp	r4, #0
10016b36:	d016      	beq.n	10016b66 <_fwalk_reent+0x3e>
10016b38:	6863      	ldr	r3, [r4, #4]
10016b3a:	68a5      	ldr	r5, [r4, #8]
10016b3c:	9300      	str	r3, [sp, #0]
10016b3e:	9b00      	ldr	r3, [sp, #0]
10016b40:	3b01      	subs	r3, #1
10016b42:	9300      	str	r3, [sp, #0]
10016b44:	d40d      	bmi.n	10016b62 <_fwalk_reent+0x3a>
10016b46:	89ab      	ldrh	r3, [r5, #12]
10016b48:	2b01      	cmp	r3, #1
10016b4a:	d908      	bls.n	10016b5e <_fwalk_reent+0x36>
10016b4c:	220e      	movs	r2, #14
10016b4e:	5eab      	ldrsh	r3, [r5, r2]
10016b50:	3301      	adds	r3, #1
10016b52:	d004      	beq.n	10016b5e <_fwalk_reent+0x36>
10016b54:	0029      	movs	r1, r5
10016b56:	0038      	movs	r0, r7
10016b58:	9b01      	ldr	r3, [sp, #4]
10016b5a:	4798      	blx	r3
10016b5c:	4306      	orrs	r6, r0
10016b5e:	3568      	adds	r5, #104	; 0x68
10016b60:	e7ed      	b.n	10016b3e <_fwalk_reent+0x16>
10016b62:	6824      	ldr	r4, [r4, #0]
10016b64:	e7e6      	b.n	10016b34 <_fwalk_reent+0xc>
10016b66:	0030      	movs	r0, r6
10016b68:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016b6c <__swhatbuf_r>:
10016b6c:	b570      	push	{r4, r5, r6, lr}
10016b6e:	000e      	movs	r6, r1
10016b70:	001d      	movs	r5, r3
10016b72:	230e      	movs	r3, #14
10016b74:	5ec9      	ldrsh	r1, [r1, r3]
10016b76:	b090      	sub	sp, #64	; 0x40
10016b78:	0014      	movs	r4, r2
10016b7a:	2900      	cmp	r1, #0
10016b7c:	da06      	bge.n	10016b8c <__swhatbuf_r+0x20>
10016b7e:	2300      	movs	r3, #0
10016b80:	602b      	str	r3, [r5, #0]
10016b82:	89b3      	ldrh	r3, [r6, #12]
10016b84:	061b      	lsls	r3, r3, #24
10016b86:	d50f      	bpl.n	10016ba8 <__swhatbuf_r+0x3c>
10016b88:	2340      	movs	r3, #64	; 0x40
10016b8a:	e00f      	b.n	10016bac <__swhatbuf_r+0x40>
10016b8c:	aa01      	add	r2, sp, #4
10016b8e:	f000 fbcd 	bl	1001732c <_fstat_r>
10016b92:	2800      	cmp	r0, #0
10016b94:	dbf3      	blt.n	10016b7e <__swhatbuf_r+0x12>
10016b96:	23f0      	movs	r3, #240	; 0xf0
10016b98:	9a02      	ldr	r2, [sp, #8]
10016b9a:	021b      	lsls	r3, r3, #8
10016b9c:	4013      	ands	r3, r2
10016b9e:	4a05      	ldr	r2, [pc, #20]	; (10016bb4 <__swhatbuf_r+0x48>)
10016ba0:	189b      	adds	r3, r3, r2
10016ba2:	425a      	negs	r2, r3
10016ba4:	4153      	adcs	r3, r2
10016ba6:	602b      	str	r3, [r5, #0]
10016ba8:	2380      	movs	r3, #128	; 0x80
10016baa:	00db      	lsls	r3, r3, #3
10016bac:	2000      	movs	r0, #0
10016bae:	6023      	str	r3, [r4, #0]
10016bb0:	b010      	add	sp, #64	; 0x40
10016bb2:	bd70      	pop	{r4, r5, r6, pc}
10016bb4:	ffffe000 	.word	0xffffe000

10016bb8 <__smakebuf_r>:
10016bb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016bba:	2602      	movs	r6, #2
10016bbc:	898b      	ldrh	r3, [r1, #12]
10016bbe:	0005      	movs	r5, r0
10016bc0:	000c      	movs	r4, r1
10016bc2:	4233      	tst	r3, r6
10016bc4:	d110      	bne.n	10016be8 <__smakebuf_r+0x30>
10016bc6:	ab01      	add	r3, sp, #4
10016bc8:	466a      	mov	r2, sp
10016bca:	f7ff ffcf 	bl	10016b6c <__swhatbuf_r>
10016bce:	9900      	ldr	r1, [sp, #0]
10016bd0:	0007      	movs	r7, r0
10016bd2:	0028      	movs	r0, r5
10016bd4:	f7ff fb7c 	bl	100162d0 <_malloc_r>
10016bd8:	2800      	cmp	r0, #0
10016bda:	d10c      	bne.n	10016bf6 <__smakebuf_r+0x3e>
10016bdc:	220c      	movs	r2, #12
10016bde:	5ea3      	ldrsh	r3, [r4, r2]
10016be0:	059a      	lsls	r2, r3, #22
10016be2:	d423      	bmi.n	10016c2c <__smakebuf_r+0x74>
10016be4:	4333      	orrs	r3, r6
10016be6:	81a3      	strh	r3, [r4, #12]
10016be8:	0023      	movs	r3, r4
10016bea:	3347      	adds	r3, #71	; 0x47
10016bec:	6023      	str	r3, [r4, #0]
10016bee:	6123      	str	r3, [r4, #16]
10016bf0:	2301      	movs	r3, #1
10016bf2:	6163      	str	r3, [r4, #20]
10016bf4:	e01a      	b.n	10016c2c <__smakebuf_r+0x74>
10016bf6:	2280      	movs	r2, #128	; 0x80
10016bf8:	4b0d      	ldr	r3, [pc, #52]	; (10016c30 <__smakebuf_r+0x78>)
10016bfa:	62ab      	str	r3, [r5, #40]	; 0x28
10016bfc:	89a3      	ldrh	r3, [r4, #12]
10016bfe:	6020      	str	r0, [r4, #0]
10016c00:	4313      	orrs	r3, r2
10016c02:	81a3      	strh	r3, [r4, #12]
10016c04:	9b00      	ldr	r3, [sp, #0]
10016c06:	6120      	str	r0, [r4, #16]
10016c08:	6163      	str	r3, [r4, #20]
10016c0a:	9b01      	ldr	r3, [sp, #4]
10016c0c:	2b00      	cmp	r3, #0
10016c0e:	d00a      	beq.n	10016c26 <__smakebuf_r+0x6e>
10016c10:	230e      	movs	r3, #14
10016c12:	5ee1      	ldrsh	r1, [r4, r3]
10016c14:	0028      	movs	r0, r5
10016c16:	f000 fb9b 	bl	10017350 <_isatty_r>
10016c1a:	2800      	cmp	r0, #0
10016c1c:	d003      	beq.n	10016c26 <__smakebuf_r+0x6e>
10016c1e:	2201      	movs	r2, #1
10016c20:	89a3      	ldrh	r3, [r4, #12]
10016c22:	4313      	orrs	r3, r2
10016c24:	81a3      	strh	r3, [r4, #12]
10016c26:	89a3      	ldrh	r3, [r4, #12]
10016c28:	431f      	orrs	r7, r3
10016c2a:	81a7      	strh	r7, [r4, #12]
10016c2c:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10016c2e:	46c0      	nop			; (mov r8, r8)
10016c30:	100169c1 	.word	0x100169c1

10016c34 <__sfputc_r>:
10016c34:	6893      	ldr	r3, [r2, #8]
10016c36:	b510      	push	{r4, lr}
10016c38:	3b01      	subs	r3, #1
10016c3a:	6093      	str	r3, [r2, #8]
10016c3c:	2b00      	cmp	r3, #0
10016c3e:	da05      	bge.n	10016c4c <__sfputc_r+0x18>
10016c40:	6994      	ldr	r4, [r2, #24]
10016c42:	42a3      	cmp	r3, r4
10016c44:	db08      	blt.n	10016c58 <__sfputc_r+0x24>
10016c46:	b2cb      	uxtb	r3, r1
10016c48:	2b0a      	cmp	r3, #10
10016c4a:	d005      	beq.n	10016c58 <__sfputc_r+0x24>
10016c4c:	6813      	ldr	r3, [r2, #0]
10016c4e:	1c58      	adds	r0, r3, #1
10016c50:	6010      	str	r0, [r2, #0]
10016c52:	7019      	strb	r1, [r3, #0]
10016c54:	b2c8      	uxtb	r0, r1
10016c56:	e001      	b.n	10016c5c <__sfputc_r+0x28>
10016c58:	f7ff fd32 	bl	100166c0 <__swbuf_r>
10016c5c:	bd10      	pop	{r4, pc}

10016c5e <__sfputs_r>:
10016c5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016c60:	0006      	movs	r6, r0
10016c62:	000f      	movs	r7, r1
10016c64:	0014      	movs	r4, r2
10016c66:	18d5      	adds	r5, r2, r3
10016c68:	42ac      	cmp	r4, r5
10016c6a:	d008      	beq.n	10016c7e <__sfputs_r+0x20>
10016c6c:	7821      	ldrb	r1, [r4, #0]
10016c6e:	003a      	movs	r2, r7
10016c70:	0030      	movs	r0, r6
10016c72:	f7ff ffdf 	bl	10016c34 <__sfputc_r>
10016c76:	3401      	adds	r4, #1
10016c78:	1c43      	adds	r3, r0, #1
10016c7a:	d1f5      	bne.n	10016c68 <__sfputs_r+0xa>
10016c7c:	e000      	b.n	10016c80 <__sfputs_r+0x22>
10016c7e:	2000      	movs	r0, #0
10016c80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10016c84 <_vfiprintf_r>:
10016c84:	b5f0      	push	{r4, r5, r6, r7, lr}
10016c86:	b09f      	sub	sp, #124	; 0x7c
10016c88:	0006      	movs	r6, r0
10016c8a:	000f      	movs	r7, r1
10016c8c:	9202      	str	r2, [sp, #8]
10016c8e:	9305      	str	r3, [sp, #20]
10016c90:	2800      	cmp	r0, #0
10016c92:	d004      	beq.n	10016c9e <_vfiprintf_r+0x1a>
10016c94:	6983      	ldr	r3, [r0, #24]
10016c96:	2b00      	cmp	r3, #0
10016c98:	d101      	bne.n	10016c9e <_vfiprintf_r+0x1a>
10016c9a:	f7ff fed3 	bl	10016a44 <__sinit>
10016c9e:	4b7f      	ldr	r3, [pc, #508]	; (10016e9c <_vfiprintf_r+0x218>)
10016ca0:	429f      	cmp	r7, r3
10016ca2:	d101      	bne.n	10016ca8 <_vfiprintf_r+0x24>
10016ca4:	6877      	ldr	r7, [r6, #4]
10016ca6:	e008      	b.n	10016cba <_vfiprintf_r+0x36>
10016ca8:	4b7d      	ldr	r3, [pc, #500]	; (10016ea0 <_vfiprintf_r+0x21c>)
10016caa:	429f      	cmp	r7, r3
10016cac:	d101      	bne.n	10016cb2 <_vfiprintf_r+0x2e>
10016cae:	68b7      	ldr	r7, [r6, #8]
10016cb0:	e003      	b.n	10016cba <_vfiprintf_r+0x36>
10016cb2:	4b7c      	ldr	r3, [pc, #496]	; (10016ea4 <_vfiprintf_r+0x220>)
10016cb4:	429f      	cmp	r7, r3
10016cb6:	d100      	bne.n	10016cba <_vfiprintf_r+0x36>
10016cb8:	68f7      	ldr	r7, [r6, #12]
10016cba:	89bb      	ldrh	r3, [r7, #12]
10016cbc:	071b      	lsls	r3, r3, #28
10016cbe:	d50a      	bpl.n	10016cd6 <_vfiprintf_r+0x52>
10016cc0:	693b      	ldr	r3, [r7, #16]
10016cc2:	2b00      	cmp	r3, #0
10016cc4:	d007      	beq.n	10016cd6 <_vfiprintf_r+0x52>
10016cc6:	2300      	movs	r3, #0
10016cc8:	ad06      	add	r5, sp, #24
10016cca:	616b      	str	r3, [r5, #20]
10016ccc:	3320      	adds	r3, #32
10016cce:	766b      	strb	r3, [r5, #25]
10016cd0:	3310      	adds	r3, #16
10016cd2:	76ab      	strb	r3, [r5, #26]
10016cd4:	e03d      	b.n	10016d52 <_vfiprintf_r+0xce>
10016cd6:	0039      	movs	r1, r7
10016cd8:	0030      	movs	r0, r6
10016cda:	f7ff fd49 	bl	10016770 <__swsetup_r>
10016cde:	2800      	cmp	r0, #0
10016ce0:	d0f1      	beq.n	10016cc6 <_vfiprintf_r+0x42>
10016ce2:	2001      	movs	r0, #1
10016ce4:	4240      	negs	r0, r0
10016ce6:	e0d6      	b.n	10016e96 <_vfiprintf_r+0x212>
10016ce8:	9a05      	ldr	r2, [sp, #20]
10016cea:	1d11      	adds	r1, r2, #4
10016cec:	6812      	ldr	r2, [r2, #0]
10016cee:	9105      	str	r1, [sp, #20]
10016cf0:	2a00      	cmp	r2, #0
10016cf2:	da00      	bge.n	10016cf6 <_vfiprintf_r+0x72>
10016cf4:	e07f      	b.n	10016df6 <_vfiprintf_r+0x172>
10016cf6:	9209      	str	r2, [sp, #36]	; 0x24
10016cf8:	3401      	adds	r4, #1
10016cfa:	7823      	ldrb	r3, [r4, #0]
10016cfc:	2b2e      	cmp	r3, #46	; 0x2e
10016cfe:	d100      	bne.n	10016d02 <_vfiprintf_r+0x7e>
10016d00:	e08d      	b.n	10016e1e <_vfiprintf_r+0x19a>
10016d02:	7821      	ldrb	r1, [r4, #0]
10016d04:	2203      	movs	r2, #3
10016d06:	4868      	ldr	r0, [pc, #416]	; (10016ea8 <_vfiprintf_r+0x224>)
10016d08:	f000 fb48 	bl	1001739c <memchr>
10016d0c:	2800      	cmp	r0, #0
10016d0e:	d007      	beq.n	10016d20 <_vfiprintf_r+0x9c>
10016d10:	4b65      	ldr	r3, [pc, #404]	; (10016ea8 <_vfiprintf_r+0x224>)
10016d12:	682a      	ldr	r2, [r5, #0]
10016d14:	1ac0      	subs	r0, r0, r3
10016d16:	2340      	movs	r3, #64	; 0x40
10016d18:	4083      	lsls	r3, r0
10016d1a:	4313      	orrs	r3, r2
10016d1c:	602b      	str	r3, [r5, #0]
10016d1e:	3401      	adds	r4, #1
10016d20:	7821      	ldrb	r1, [r4, #0]
10016d22:	1c63      	adds	r3, r4, #1
10016d24:	2206      	movs	r2, #6
10016d26:	4861      	ldr	r0, [pc, #388]	; (10016eac <_vfiprintf_r+0x228>)
10016d28:	9302      	str	r3, [sp, #8]
10016d2a:	7629      	strb	r1, [r5, #24]
10016d2c:	f000 fb36 	bl	1001739c <memchr>
10016d30:	2800      	cmp	r0, #0
10016d32:	d100      	bne.n	10016d36 <_vfiprintf_r+0xb2>
10016d34:	e09d      	b.n	10016e72 <_vfiprintf_r+0x1ee>
10016d36:	4b5e      	ldr	r3, [pc, #376]	; (10016eb0 <_vfiprintf_r+0x22c>)
10016d38:	2b00      	cmp	r3, #0
10016d3a:	d000      	beq.n	10016d3e <_vfiprintf_r+0xba>
10016d3c:	e090      	b.n	10016e60 <_vfiprintf_r+0x1dc>
10016d3e:	2207      	movs	r2, #7
10016d40:	9b05      	ldr	r3, [sp, #20]
10016d42:	3307      	adds	r3, #7
10016d44:	4393      	bics	r3, r2
10016d46:	3308      	adds	r3, #8
10016d48:	9305      	str	r3, [sp, #20]
10016d4a:	696b      	ldr	r3, [r5, #20]
10016d4c:	9a03      	ldr	r2, [sp, #12]
10016d4e:	189b      	adds	r3, r3, r2
10016d50:	616b      	str	r3, [r5, #20]
10016d52:	9c02      	ldr	r4, [sp, #8]
10016d54:	7823      	ldrb	r3, [r4, #0]
10016d56:	2b00      	cmp	r3, #0
10016d58:	d104      	bne.n	10016d64 <_vfiprintf_r+0xe0>
10016d5a:	9b02      	ldr	r3, [sp, #8]
10016d5c:	1ae3      	subs	r3, r4, r3
10016d5e:	9304      	str	r3, [sp, #16]
10016d60:	d012      	beq.n	10016d88 <_vfiprintf_r+0x104>
10016d62:	e003      	b.n	10016d6c <_vfiprintf_r+0xe8>
10016d64:	2b25      	cmp	r3, #37	; 0x25
10016d66:	d0f8      	beq.n	10016d5a <_vfiprintf_r+0xd6>
10016d68:	3401      	adds	r4, #1
10016d6a:	e7f3      	b.n	10016d54 <_vfiprintf_r+0xd0>
10016d6c:	9b04      	ldr	r3, [sp, #16]
10016d6e:	9a02      	ldr	r2, [sp, #8]
10016d70:	0039      	movs	r1, r7
10016d72:	0030      	movs	r0, r6
10016d74:	f7ff ff73 	bl	10016c5e <__sfputs_r>
10016d78:	1c43      	adds	r3, r0, #1
10016d7a:	d100      	bne.n	10016d7e <_vfiprintf_r+0xfa>
10016d7c:	e086      	b.n	10016e8c <_vfiprintf_r+0x208>
10016d7e:	696a      	ldr	r2, [r5, #20]
10016d80:	9b04      	ldr	r3, [sp, #16]
10016d82:	4694      	mov	ip, r2
10016d84:	4463      	add	r3, ip
10016d86:	616b      	str	r3, [r5, #20]
10016d88:	7823      	ldrb	r3, [r4, #0]
10016d8a:	2b00      	cmp	r3, #0
10016d8c:	d07e      	beq.n	10016e8c <_vfiprintf_r+0x208>
10016d8e:	2201      	movs	r2, #1
10016d90:	2300      	movs	r3, #0
10016d92:	4252      	negs	r2, r2
10016d94:	606a      	str	r2, [r5, #4]
10016d96:	a902      	add	r1, sp, #8
10016d98:	3254      	adds	r2, #84	; 0x54
10016d9a:	1852      	adds	r2, r2, r1
10016d9c:	3401      	adds	r4, #1
10016d9e:	602b      	str	r3, [r5, #0]
10016da0:	60eb      	str	r3, [r5, #12]
10016da2:	60ab      	str	r3, [r5, #8]
10016da4:	7013      	strb	r3, [r2, #0]
10016da6:	65ab      	str	r3, [r5, #88]	; 0x58
10016da8:	7821      	ldrb	r1, [r4, #0]
10016daa:	2205      	movs	r2, #5
10016dac:	4841      	ldr	r0, [pc, #260]	; (10016eb4 <_vfiprintf_r+0x230>)
10016dae:	f000 faf5 	bl	1001739c <memchr>
10016db2:	2800      	cmp	r0, #0
10016db4:	d008      	beq.n	10016dc8 <_vfiprintf_r+0x144>
10016db6:	4b3f      	ldr	r3, [pc, #252]	; (10016eb4 <_vfiprintf_r+0x230>)
10016db8:	682a      	ldr	r2, [r5, #0]
10016dba:	1ac0      	subs	r0, r0, r3
10016dbc:	2301      	movs	r3, #1
10016dbe:	4083      	lsls	r3, r0
10016dc0:	4313      	orrs	r3, r2
10016dc2:	602b      	str	r3, [r5, #0]
10016dc4:	3401      	adds	r4, #1
10016dc6:	e7ef      	b.n	10016da8 <_vfiprintf_r+0x124>
10016dc8:	682b      	ldr	r3, [r5, #0]
10016dca:	06da      	lsls	r2, r3, #27
10016dcc:	d504      	bpl.n	10016dd8 <_vfiprintf_r+0x154>
10016dce:	2253      	movs	r2, #83	; 0x53
10016dd0:	2120      	movs	r1, #32
10016dd2:	a802      	add	r0, sp, #8
10016dd4:	1812      	adds	r2, r2, r0
10016dd6:	7011      	strb	r1, [r2, #0]
10016dd8:	071a      	lsls	r2, r3, #28
10016dda:	d504      	bpl.n	10016de6 <_vfiprintf_r+0x162>
10016ddc:	2253      	movs	r2, #83	; 0x53
10016dde:	212b      	movs	r1, #43	; 0x2b
10016de0:	a802      	add	r0, sp, #8
10016de2:	1812      	adds	r2, r2, r0
10016de4:	7011      	strb	r1, [r2, #0]
10016de6:	7822      	ldrb	r2, [r4, #0]
10016de8:	2a2a      	cmp	r2, #42	; 0x2a
10016dea:	d100      	bne.n	10016dee <_vfiprintf_r+0x16a>
10016dec:	e77c      	b.n	10016ce8 <_vfiprintf_r+0x64>
10016dee:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016df0:	2000      	movs	r0, #0
10016df2:	210a      	movs	r1, #10
10016df4:	e005      	b.n	10016e02 <_vfiprintf_r+0x17e>
10016df6:	4252      	negs	r2, r2
10016df8:	60ea      	str	r2, [r5, #12]
10016dfa:	2202      	movs	r2, #2
10016dfc:	4313      	orrs	r3, r2
10016dfe:	602b      	str	r3, [r5, #0]
10016e00:	e77a      	b.n	10016cf8 <_vfiprintf_r+0x74>
10016e02:	7822      	ldrb	r2, [r4, #0]
10016e04:	3a30      	subs	r2, #48	; 0x30
10016e06:	2a09      	cmp	r2, #9
10016e08:	d804      	bhi.n	10016e14 <_vfiprintf_r+0x190>
10016e0a:	434b      	muls	r3, r1
10016e0c:	3401      	adds	r4, #1
10016e0e:	189b      	adds	r3, r3, r2
10016e10:	2001      	movs	r0, #1
10016e12:	e7f6      	b.n	10016e02 <_vfiprintf_r+0x17e>
10016e14:	2800      	cmp	r0, #0
10016e16:	d100      	bne.n	10016e1a <_vfiprintf_r+0x196>
10016e18:	e76f      	b.n	10016cfa <_vfiprintf_r+0x76>
10016e1a:	9309      	str	r3, [sp, #36]	; 0x24
10016e1c:	e76d      	b.n	10016cfa <_vfiprintf_r+0x76>
10016e1e:	7863      	ldrb	r3, [r4, #1]
10016e20:	2b2a      	cmp	r3, #42	; 0x2a
10016e22:	d10a      	bne.n	10016e3a <_vfiprintf_r+0x1b6>
10016e24:	9b05      	ldr	r3, [sp, #20]
10016e26:	3402      	adds	r4, #2
10016e28:	1d1a      	adds	r2, r3, #4
10016e2a:	681b      	ldr	r3, [r3, #0]
10016e2c:	9205      	str	r2, [sp, #20]
10016e2e:	2b00      	cmp	r3, #0
10016e30:	da01      	bge.n	10016e36 <_vfiprintf_r+0x1b2>
10016e32:	2301      	movs	r3, #1
10016e34:	425b      	negs	r3, r3
10016e36:	9307      	str	r3, [sp, #28]
10016e38:	e763      	b.n	10016d02 <_vfiprintf_r+0x7e>
10016e3a:	2300      	movs	r3, #0
10016e3c:	200a      	movs	r0, #10
10016e3e:	001a      	movs	r2, r3
10016e40:	3401      	adds	r4, #1
10016e42:	606b      	str	r3, [r5, #4]
10016e44:	7821      	ldrb	r1, [r4, #0]
10016e46:	3930      	subs	r1, #48	; 0x30
10016e48:	2909      	cmp	r1, #9
10016e4a:	d804      	bhi.n	10016e56 <_vfiprintf_r+0x1d2>
10016e4c:	4342      	muls	r2, r0
10016e4e:	3401      	adds	r4, #1
10016e50:	1852      	adds	r2, r2, r1
10016e52:	2301      	movs	r3, #1
10016e54:	e7f6      	b.n	10016e44 <_vfiprintf_r+0x1c0>
10016e56:	2b00      	cmp	r3, #0
10016e58:	d100      	bne.n	10016e5c <_vfiprintf_r+0x1d8>
10016e5a:	e752      	b.n	10016d02 <_vfiprintf_r+0x7e>
10016e5c:	9207      	str	r2, [sp, #28]
10016e5e:	e750      	b.n	10016d02 <_vfiprintf_r+0x7e>
10016e60:	ab05      	add	r3, sp, #20
10016e62:	9300      	str	r3, [sp, #0]
10016e64:	003a      	movs	r2, r7
10016e66:	4b14      	ldr	r3, [pc, #80]	; (10016eb8 <_vfiprintf_r+0x234>)
10016e68:	0029      	movs	r1, r5
10016e6a:	0030      	movs	r0, r6
10016e6c:	e000      	b.n	10016e70 <_vfiprintf_r+0x1ec>
10016e6e:	bf00      	nop
10016e70:	e007      	b.n	10016e82 <_vfiprintf_r+0x1fe>
10016e72:	ab05      	add	r3, sp, #20
10016e74:	9300      	str	r3, [sp, #0]
10016e76:	003a      	movs	r2, r7
10016e78:	4b0f      	ldr	r3, [pc, #60]	; (10016eb8 <_vfiprintf_r+0x234>)
10016e7a:	0029      	movs	r1, r5
10016e7c:	0030      	movs	r0, r6
10016e7e:	f000 f88b 	bl	10016f98 <_printf_i>
10016e82:	9003      	str	r0, [sp, #12]
10016e84:	9b03      	ldr	r3, [sp, #12]
10016e86:	3301      	adds	r3, #1
10016e88:	d000      	beq.n	10016e8c <_vfiprintf_r+0x208>
10016e8a:	e75e      	b.n	10016d4a <_vfiprintf_r+0xc6>
10016e8c:	89bb      	ldrh	r3, [r7, #12]
10016e8e:	065b      	lsls	r3, r3, #25
10016e90:	d500      	bpl.n	10016e94 <_vfiprintf_r+0x210>
10016e92:	e726      	b.n	10016ce2 <_vfiprintf_r+0x5e>
10016e94:	980b      	ldr	r0, [sp, #44]	; 0x2c
10016e96:	b01f      	add	sp, #124	; 0x7c
10016e98:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016e9a:	46c0      	nop			; (mov r8, r8)
10016e9c:	100185a8 	.word	0x100185a8
10016ea0:	100185c8 	.word	0x100185c8
10016ea4:	100185e8 	.word	0x100185e8
10016ea8:	1001860e 	.word	0x1001860e
10016eac:	10018612 	.word	0x10018612
10016eb0:	00000000 	.word	0x00000000
10016eb4:	10018608 	.word	0x10018608
10016eb8:	10016c5f 	.word	0x10016c5f

10016ebc <_printf_common>:
10016ebc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016ebe:	0017      	movs	r7, r2
10016ec0:	9301      	str	r3, [sp, #4]
10016ec2:	688a      	ldr	r2, [r1, #8]
10016ec4:	690b      	ldr	r3, [r1, #16]
10016ec6:	9000      	str	r0, [sp, #0]
10016ec8:	000c      	movs	r4, r1
10016eca:	4293      	cmp	r3, r2
10016ecc:	da00      	bge.n	10016ed0 <_printf_common+0x14>
10016ece:	0013      	movs	r3, r2
10016ed0:	0022      	movs	r2, r4
10016ed2:	603b      	str	r3, [r7, #0]
10016ed4:	3243      	adds	r2, #67	; 0x43
10016ed6:	7812      	ldrb	r2, [r2, #0]
10016ed8:	2a00      	cmp	r2, #0
10016eda:	d001      	beq.n	10016ee0 <_printf_common+0x24>
10016edc:	3301      	adds	r3, #1
10016ede:	603b      	str	r3, [r7, #0]
10016ee0:	6823      	ldr	r3, [r4, #0]
10016ee2:	069b      	lsls	r3, r3, #26
10016ee4:	d502      	bpl.n	10016eec <_printf_common+0x30>
10016ee6:	683b      	ldr	r3, [r7, #0]
10016ee8:	3302      	adds	r3, #2
10016eea:	603b      	str	r3, [r7, #0]
10016eec:	2506      	movs	r5, #6
10016eee:	6823      	ldr	r3, [r4, #0]
10016ef0:	401d      	ands	r5, r3
10016ef2:	d01e      	beq.n	10016f32 <_printf_common+0x76>
10016ef4:	0023      	movs	r3, r4
10016ef6:	3343      	adds	r3, #67	; 0x43
10016ef8:	781b      	ldrb	r3, [r3, #0]
10016efa:	1e5a      	subs	r2, r3, #1
10016efc:	4193      	sbcs	r3, r2
10016efe:	6822      	ldr	r2, [r4, #0]
10016f00:	0692      	lsls	r2, r2, #26
10016f02:	d51c      	bpl.n	10016f3e <_printf_common+0x82>
10016f04:	2030      	movs	r0, #48	; 0x30
10016f06:	18e1      	adds	r1, r4, r3
10016f08:	3143      	adds	r1, #67	; 0x43
10016f0a:	7008      	strb	r0, [r1, #0]
10016f0c:	0021      	movs	r1, r4
10016f0e:	1c5a      	adds	r2, r3, #1
10016f10:	3145      	adds	r1, #69	; 0x45
10016f12:	7809      	ldrb	r1, [r1, #0]
10016f14:	18a2      	adds	r2, r4, r2
10016f16:	3243      	adds	r2, #67	; 0x43
10016f18:	3302      	adds	r3, #2
10016f1a:	7011      	strb	r1, [r2, #0]
10016f1c:	e00f      	b.n	10016f3e <_printf_common+0x82>
10016f1e:	0022      	movs	r2, r4
10016f20:	2301      	movs	r3, #1
10016f22:	3219      	adds	r2, #25
10016f24:	9901      	ldr	r1, [sp, #4]
10016f26:	9800      	ldr	r0, [sp, #0]
10016f28:	9e08      	ldr	r6, [sp, #32]
10016f2a:	47b0      	blx	r6
10016f2c:	1c43      	adds	r3, r0, #1
10016f2e:	d00e      	beq.n	10016f4e <_printf_common+0x92>
10016f30:	3501      	adds	r5, #1
10016f32:	68e3      	ldr	r3, [r4, #12]
10016f34:	683a      	ldr	r2, [r7, #0]
10016f36:	1a9b      	subs	r3, r3, r2
10016f38:	429d      	cmp	r5, r3
10016f3a:	dbf0      	blt.n	10016f1e <_printf_common+0x62>
10016f3c:	e7da      	b.n	10016ef4 <_printf_common+0x38>
10016f3e:	0022      	movs	r2, r4
10016f40:	9901      	ldr	r1, [sp, #4]
10016f42:	3243      	adds	r2, #67	; 0x43
10016f44:	9800      	ldr	r0, [sp, #0]
10016f46:	9d08      	ldr	r5, [sp, #32]
10016f48:	47a8      	blx	r5
10016f4a:	1c43      	adds	r3, r0, #1
10016f4c:	d102      	bne.n	10016f54 <_printf_common+0x98>
10016f4e:	2001      	movs	r0, #1
10016f50:	4240      	negs	r0, r0
10016f52:	e020      	b.n	10016f96 <_printf_common+0xda>
10016f54:	2306      	movs	r3, #6
10016f56:	6820      	ldr	r0, [r4, #0]
10016f58:	68e1      	ldr	r1, [r4, #12]
10016f5a:	683a      	ldr	r2, [r7, #0]
10016f5c:	4003      	ands	r3, r0
10016f5e:	2500      	movs	r5, #0
10016f60:	2b04      	cmp	r3, #4
10016f62:	d103      	bne.n	10016f6c <_printf_common+0xb0>
10016f64:	1a8d      	subs	r5, r1, r2
10016f66:	43eb      	mvns	r3, r5
10016f68:	17db      	asrs	r3, r3, #31
10016f6a:	401d      	ands	r5, r3
10016f6c:	68a3      	ldr	r3, [r4, #8]
10016f6e:	6922      	ldr	r2, [r4, #16]
10016f70:	4293      	cmp	r3, r2
10016f72:	dd01      	ble.n	10016f78 <_printf_common+0xbc>
10016f74:	1a9b      	subs	r3, r3, r2
10016f76:	18ed      	adds	r5, r5, r3
10016f78:	2700      	movs	r7, #0
10016f7a:	42bd      	cmp	r5, r7
10016f7c:	d00a      	beq.n	10016f94 <_printf_common+0xd8>
10016f7e:	0022      	movs	r2, r4
10016f80:	2301      	movs	r3, #1
10016f82:	321a      	adds	r2, #26
10016f84:	9901      	ldr	r1, [sp, #4]
10016f86:	9800      	ldr	r0, [sp, #0]
10016f88:	9e08      	ldr	r6, [sp, #32]
10016f8a:	47b0      	blx	r6
10016f8c:	1c43      	adds	r3, r0, #1
10016f8e:	d0de      	beq.n	10016f4e <_printf_common+0x92>
10016f90:	3701      	adds	r7, #1
10016f92:	e7f2      	b.n	10016f7a <_printf_common+0xbe>
10016f94:	2000      	movs	r0, #0
10016f96:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10016f98 <_printf_i>:
10016f98:	b5f0      	push	{r4, r5, r6, r7, lr}
10016f9a:	b08b      	sub	sp, #44	; 0x2c
10016f9c:	9206      	str	r2, [sp, #24]
10016f9e:	000a      	movs	r2, r1
10016fa0:	3243      	adds	r2, #67	; 0x43
10016fa2:	9307      	str	r3, [sp, #28]
10016fa4:	9005      	str	r0, [sp, #20]
10016fa6:	9204      	str	r2, [sp, #16]
10016fa8:	7e0a      	ldrb	r2, [r1, #24]
10016faa:	000c      	movs	r4, r1
10016fac:	9b10      	ldr	r3, [sp, #64]	; 0x40
10016fae:	2a6e      	cmp	r2, #110	; 0x6e
10016fb0:	d100      	bne.n	10016fb4 <_printf_i+0x1c>
10016fb2:	e0ab      	b.n	1001710c <_printf_i+0x174>
10016fb4:	d811      	bhi.n	10016fda <_printf_i+0x42>
10016fb6:	2a63      	cmp	r2, #99	; 0x63
10016fb8:	d022      	beq.n	10017000 <_printf_i+0x68>
10016fba:	d809      	bhi.n	10016fd0 <_printf_i+0x38>
10016fbc:	2a00      	cmp	r2, #0
10016fbe:	d100      	bne.n	10016fc2 <_printf_i+0x2a>
10016fc0:	e0b5      	b.n	1001712e <_printf_i+0x196>
10016fc2:	2a58      	cmp	r2, #88	; 0x58
10016fc4:	d000      	beq.n	10016fc8 <_printf_i+0x30>
10016fc6:	e0c5      	b.n	10017154 <_printf_i+0x1bc>
10016fc8:	3145      	adds	r1, #69	; 0x45
10016fca:	700a      	strb	r2, [r1, #0]
10016fcc:	4a81      	ldr	r2, [pc, #516]	; (100171d4 <_printf_i+0x23c>)
10016fce:	e04f      	b.n	10017070 <_printf_i+0xd8>
10016fd0:	2a64      	cmp	r2, #100	; 0x64
10016fd2:	d01d      	beq.n	10017010 <_printf_i+0x78>
10016fd4:	2a69      	cmp	r2, #105	; 0x69
10016fd6:	d01b      	beq.n	10017010 <_printf_i+0x78>
10016fd8:	e0bc      	b.n	10017154 <_printf_i+0x1bc>
10016fda:	2a73      	cmp	r2, #115	; 0x73
10016fdc:	d100      	bne.n	10016fe0 <_printf_i+0x48>
10016fde:	e0aa      	b.n	10017136 <_printf_i+0x19e>
10016fe0:	d809      	bhi.n	10016ff6 <_printf_i+0x5e>
10016fe2:	2a6f      	cmp	r2, #111	; 0x6f
10016fe4:	d029      	beq.n	1001703a <_printf_i+0xa2>
10016fe6:	2a70      	cmp	r2, #112	; 0x70
10016fe8:	d000      	beq.n	10016fec <_printf_i+0x54>
10016fea:	e0b3      	b.n	10017154 <_printf_i+0x1bc>
10016fec:	2220      	movs	r2, #32
10016fee:	6809      	ldr	r1, [r1, #0]
10016ff0:	430a      	orrs	r2, r1
10016ff2:	6022      	str	r2, [r4, #0]
10016ff4:	e037      	b.n	10017066 <_printf_i+0xce>
10016ff6:	2a75      	cmp	r2, #117	; 0x75
10016ff8:	d01f      	beq.n	1001703a <_printf_i+0xa2>
10016ffa:	2a78      	cmp	r2, #120	; 0x78
10016ffc:	d033      	beq.n	10017066 <_printf_i+0xce>
10016ffe:	e0a9      	b.n	10017154 <_printf_i+0x1bc>
10017000:	000e      	movs	r6, r1
10017002:	681a      	ldr	r2, [r3, #0]
10017004:	3642      	adds	r6, #66	; 0x42
10017006:	1d11      	adds	r1, r2, #4
10017008:	6019      	str	r1, [r3, #0]
1001700a:	6813      	ldr	r3, [r2, #0]
1001700c:	7033      	strb	r3, [r6, #0]
1001700e:	e0a4      	b.n	1001715a <_printf_i+0x1c2>
10017010:	6821      	ldr	r1, [r4, #0]
10017012:	681a      	ldr	r2, [r3, #0]
10017014:	0608      	lsls	r0, r1, #24
10017016:	d406      	bmi.n	10017026 <_printf_i+0x8e>
10017018:	0649      	lsls	r1, r1, #25
1001701a:	d504      	bpl.n	10017026 <_printf_i+0x8e>
1001701c:	1d11      	adds	r1, r2, #4
1001701e:	6019      	str	r1, [r3, #0]
10017020:	2300      	movs	r3, #0
10017022:	5ed5      	ldrsh	r5, [r2, r3]
10017024:	e002      	b.n	1001702c <_printf_i+0x94>
10017026:	1d11      	adds	r1, r2, #4
10017028:	6019      	str	r1, [r3, #0]
1001702a:	6815      	ldr	r5, [r2, #0]
1001702c:	2d00      	cmp	r5, #0
1001702e:	da3b      	bge.n	100170a8 <_printf_i+0x110>
10017030:	232d      	movs	r3, #45	; 0x2d
10017032:	9a04      	ldr	r2, [sp, #16]
10017034:	426d      	negs	r5, r5
10017036:	7013      	strb	r3, [r2, #0]
10017038:	e036      	b.n	100170a8 <_printf_i+0x110>
1001703a:	6821      	ldr	r1, [r4, #0]
1001703c:	681a      	ldr	r2, [r3, #0]
1001703e:	0608      	lsls	r0, r1, #24
10017040:	d406      	bmi.n	10017050 <_printf_i+0xb8>
10017042:	0649      	lsls	r1, r1, #25
10017044:	d504      	bpl.n	10017050 <_printf_i+0xb8>
10017046:	6815      	ldr	r5, [r2, #0]
10017048:	1d11      	adds	r1, r2, #4
1001704a:	6019      	str	r1, [r3, #0]
1001704c:	b2ad      	uxth	r5, r5
1001704e:	e002      	b.n	10017056 <_printf_i+0xbe>
10017050:	1d11      	adds	r1, r2, #4
10017052:	6019      	str	r1, [r3, #0]
10017054:	6815      	ldr	r5, [r2, #0]
10017056:	4b5f      	ldr	r3, [pc, #380]	; (100171d4 <_printf_i+0x23c>)
10017058:	7e22      	ldrb	r2, [r4, #24]
1001705a:	9303      	str	r3, [sp, #12]
1001705c:	2708      	movs	r7, #8
1001705e:	2a6f      	cmp	r2, #111	; 0x6f
10017060:	d01d      	beq.n	1001709e <_printf_i+0x106>
10017062:	270a      	movs	r7, #10
10017064:	e01b      	b.n	1001709e <_printf_i+0x106>
10017066:	0022      	movs	r2, r4
10017068:	2178      	movs	r1, #120	; 0x78
1001706a:	3245      	adds	r2, #69	; 0x45
1001706c:	7011      	strb	r1, [r2, #0]
1001706e:	4a5a      	ldr	r2, [pc, #360]	; (100171d8 <_printf_i+0x240>)
10017070:	6819      	ldr	r1, [r3, #0]
10017072:	9203      	str	r2, [sp, #12]
10017074:	1d08      	adds	r0, r1, #4
10017076:	6822      	ldr	r2, [r4, #0]
10017078:	6018      	str	r0, [r3, #0]
1001707a:	680d      	ldr	r5, [r1, #0]
1001707c:	0610      	lsls	r0, r2, #24
1001707e:	d402      	bmi.n	10017086 <_printf_i+0xee>
10017080:	0650      	lsls	r0, r2, #25
10017082:	d500      	bpl.n	10017086 <_printf_i+0xee>
10017084:	b2ad      	uxth	r5, r5
10017086:	07d3      	lsls	r3, r2, #31
10017088:	d502      	bpl.n	10017090 <_printf_i+0xf8>
1001708a:	2320      	movs	r3, #32
1001708c:	431a      	orrs	r2, r3
1001708e:	6022      	str	r2, [r4, #0]
10017090:	2710      	movs	r7, #16
10017092:	2d00      	cmp	r5, #0
10017094:	d103      	bne.n	1001709e <_printf_i+0x106>
10017096:	2320      	movs	r3, #32
10017098:	6822      	ldr	r2, [r4, #0]
1001709a:	439a      	bics	r2, r3
1001709c:	6022      	str	r2, [r4, #0]
1001709e:	0023      	movs	r3, r4
100170a0:	2200      	movs	r2, #0
100170a2:	3343      	adds	r3, #67	; 0x43
100170a4:	701a      	strb	r2, [r3, #0]
100170a6:	e002      	b.n	100170ae <_printf_i+0x116>
100170a8:	270a      	movs	r7, #10
100170aa:	4b4a      	ldr	r3, [pc, #296]	; (100171d4 <_printf_i+0x23c>)
100170ac:	9303      	str	r3, [sp, #12]
100170ae:	6863      	ldr	r3, [r4, #4]
100170b0:	60a3      	str	r3, [r4, #8]
100170b2:	2b00      	cmp	r3, #0
100170b4:	db09      	blt.n	100170ca <_printf_i+0x132>
100170b6:	2204      	movs	r2, #4
100170b8:	6821      	ldr	r1, [r4, #0]
100170ba:	4391      	bics	r1, r2
100170bc:	6021      	str	r1, [r4, #0]
100170be:	2d00      	cmp	r5, #0
100170c0:	d105      	bne.n	100170ce <_printf_i+0x136>
100170c2:	9e04      	ldr	r6, [sp, #16]
100170c4:	2b00      	cmp	r3, #0
100170c6:	d011      	beq.n	100170ec <_printf_i+0x154>
100170c8:	e07b      	b.n	100171c2 <_printf_i+0x22a>
100170ca:	2d00      	cmp	r5, #0
100170cc:	d079      	beq.n	100171c2 <_printf_i+0x22a>
100170ce:	9e04      	ldr	r6, [sp, #16]
100170d0:	0028      	movs	r0, r5
100170d2:	0039      	movs	r1, r7
100170d4:	f7fc f910 	bl	100132f8 <__aeabi_uidivmod>
100170d8:	9b03      	ldr	r3, [sp, #12]
100170da:	3e01      	subs	r6, #1
100170dc:	5c5b      	ldrb	r3, [r3, r1]
100170de:	0028      	movs	r0, r5
100170e0:	7033      	strb	r3, [r6, #0]
100170e2:	0039      	movs	r1, r7
100170e4:	f7fc f882 	bl	100131ec <__aeabi_uidiv>
100170e8:	1e05      	subs	r5, r0, #0
100170ea:	d1f1      	bne.n	100170d0 <_printf_i+0x138>
100170ec:	2f08      	cmp	r7, #8
100170ee:	d109      	bne.n	10017104 <_printf_i+0x16c>
100170f0:	6823      	ldr	r3, [r4, #0]
100170f2:	07db      	lsls	r3, r3, #31
100170f4:	d506      	bpl.n	10017104 <_printf_i+0x16c>
100170f6:	6863      	ldr	r3, [r4, #4]
100170f8:	6922      	ldr	r2, [r4, #16]
100170fa:	4293      	cmp	r3, r2
100170fc:	dc02      	bgt.n	10017104 <_printf_i+0x16c>
100170fe:	2330      	movs	r3, #48	; 0x30
10017100:	3e01      	subs	r6, #1
10017102:	7033      	strb	r3, [r6, #0]
10017104:	9b04      	ldr	r3, [sp, #16]
10017106:	1b9b      	subs	r3, r3, r6
10017108:	6123      	str	r3, [r4, #16]
1001710a:	e02b      	b.n	10017164 <_printf_i+0x1cc>
1001710c:	6809      	ldr	r1, [r1, #0]
1001710e:	681a      	ldr	r2, [r3, #0]
10017110:	0608      	lsls	r0, r1, #24
10017112:	d407      	bmi.n	10017124 <_printf_i+0x18c>
10017114:	0649      	lsls	r1, r1, #25
10017116:	d505      	bpl.n	10017124 <_printf_i+0x18c>
10017118:	1d11      	adds	r1, r2, #4
1001711a:	6019      	str	r1, [r3, #0]
1001711c:	6813      	ldr	r3, [r2, #0]
1001711e:	8aa2      	ldrh	r2, [r4, #20]
10017120:	801a      	strh	r2, [r3, #0]
10017122:	e004      	b.n	1001712e <_printf_i+0x196>
10017124:	1d11      	adds	r1, r2, #4
10017126:	6019      	str	r1, [r3, #0]
10017128:	6813      	ldr	r3, [r2, #0]
1001712a:	6962      	ldr	r2, [r4, #20]
1001712c:	601a      	str	r2, [r3, #0]
1001712e:	2300      	movs	r3, #0
10017130:	9e04      	ldr	r6, [sp, #16]
10017132:	6123      	str	r3, [r4, #16]
10017134:	e016      	b.n	10017164 <_printf_i+0x1cc>
10017136:	681a      	ldr	r2, [r3, #0]
10017138:	1d11      	adds	r1, r2, #4
1001713a:	6019      	str	r1, [r3, #0]
1001713c:	6816      	ldr	r6, [r2, #0]
1001713e:	2100      	movs	r1, #0
10017140:	6862      	ldr	r2, [r4, #4]
10017142:	0030      	movs	r0, r6
10017144:	f000 f92a 	bl	1001739c <memchr>
10017148:	2800      	cmp	r0, #0
1001714a:	d001      	beq.n	10017150 <_printf_i+0x1b8>
1001714c:	1b80      	subs	r0, r0, r6
1001714e:	6060      	str	r0, [r4, #4]
10017150:	6863      	ldr	r3, [r4, #4]
10017152:	e003      	b.n	1001715c <_printf_i+0x1c4>
10017154:	0026      	movs	r6, r4
10017156:	3642      	adds	r6, #66	; 0x42
10017158:	7032      	strb	r2, [r6, #0]
1001715a:	2301      	movs	r3, #1
1001715c:	6123      	str	r3, [r4, #16]
1001715e:	2300      	movs	r3, #0
10017160:	9a04      	ldr	r2, [sp, #16]
10017162:	7013      	strb	r3, [r2, #0]
10017164:	9b07      	ldr	r3, [sp, #28]
10017166:	aa09      	add	r2, sp, #36	; 0x24
10017168:	9300      	str	r3, [sp, #0]
1001716a:	0021      	movs	r1, r4
1001716c:	9b06      	ldr	r3, [sp, #24]
1001716e:	9805      	ldr	r0, [sp, #20]
10017170:	f7ff fea4 	bl	10016ebc <_printf_common>
10017174:	1c43      	adds	r3, r0, #1
10017176:	d102      	bne.n	1001717e <_printf_i+0x1e6>
10017178:	2001      	movs	r0, #1
1001717a:	4240      	negs	r0, r0
1001717c:	e027      	b.n	100171ce <_printf_i+0x236>
1001717e:	6923      	ldr	r3, [r4, #16]
10017180:	0032      	movs	r2, r6
10017182:	9906      	ldr	r1, [sp, #24]
10017184:	9805      	ldr	r0, [sp, #20]
10017186:	9d07      	ldr	r5, [sp, #28]
10017188:	47a8      	blx	r5
1001718a:	1c43      	adds	r3, r0, #1
1001718c:	d0f4      	beq.n	10017178 <_printf_i+0x1e0>
1001718e:	6823      	ldr	r3, [r4, #0]
10017190:	2500      	movs	r5, #0
10017192:	079b      	lsls	r3, r3, #30
10017194:	d40f      	bmi.n	100171b6 <_printf_i+0x21e>
10017196:	9b09      	ldr	r3, [sp, #36]	; 0x24
10017198:	68e0      	ldr	r0, [r4, #12]
1001719a:	4298      	cmp	r0, r3
1001719c:	da17      	bge.n	100171ce <_printf_i+0x236>
1001719e:	0018      	movs	r0, r3
100171a0:	e015      	b.n	100171ce <_printf_i+0x236>
100171a2:	0022      	movs	r2, r4
100171a4:	2301      	movs	r3, #1
100171a6:	3219      	adds	r2, #25
100171a8:	9906      	ldr	r1, [sp, #24]
100171aa:	9805      	ldr	r0, [sp, #20]
100171ac:	9e07      	ldr	r6, [sp, #28]
100171ae:	47b0      	blx	r6
100171b0:	1c43      	adds	r3, r0, #1
100171b2:	d0e1      	beq.n	10017178 <_printf_i+0x1e0>
100171b4:	3501      	adds	r5, #1
100171b6:	68e3      	ldr	r3, [r4, #12]
100171b8:	9a09      	ldr	r2, [sp, #36]	; 0x24
100171ba:	1a9b      	subs	r3, r3, r2
100171bc:	429d      	cmp	r5, r3
100171be:	dbf0      	blt.n	100171a2 <_printf_i+0x20a>
100171c0:	e7e9      	b.n	10017196 <_printf_i+0x1fe>
100171c2:	0026      	movs	r6, r4
100171c4:	9b03      	ldr	r3, [sp, #12]
100171c6:	3642      	adds	r6, #66	; 0x42
100171c8:	781b      	ldrb	r3, [r3, #0]
100171ca:	7033      	strb	r3, [r6, #0]
100171cc:	e78e      	b.n	100170ec <_printf_i+0x154>
100171ce:	b00b      	add	sp, #44	; 0x2c
100171d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100171d2:	46c0      	nop			; (mov r8, r8)
100171d4:	10018619 	.word	0x10018619
100171d8:	1001862a 	.word	0x1001862a

100171dc <_putc_r>:
100171dc:	b570      	push	{r4, r5, r6, lr}
100171de:	0006      	movs	r6, r0
100171e0:	000d      	movs	r5, r1
100171e2:	0014      	movs	r4, r2
100171e4:	2800      	cmp	r0, #0
100171e6:	d004      	beq.n	100171f2 <_putc_r+0x16>
100171e8:	6983      	ldr	r3, [r0, #24]
100171ea:	2b00      	cmp	r3, #0
100171ec:	d101      	bne.n	100171f2 <_putc_r+0x16>
100171ee:	f7ff fc29 	bl	10016a44 <__sinit>
100171f2:	4b12      	ldr	r3, [pc, #72]	; (1001723c <_putc_r+0x60>)
100171f4:	429c      	cmp	r4, r3
100171f6:	d101      	bne.n	100171fc <_putc_r+0x20>
100171f8:	6874      	ldr	r4, [r6, #4]
100171fa:	e008      	b.n	1001720e <_putc_r+0x32>
100171fc:	4b10      	ldr	r3, [pc, #64]	; (10017240 <_putc_r+0x64>)
100171fe:	429c      	cmp	r4, r3
10017200:	d101      	bne.n	10017206 <_putc_r+0x2a>
10017202:	68b4      	ldr	r4, [r6, #8]
10017204:	e003      	b.n	1001720e <_putc_r+0x32>
10017206:	4b0f      	ldr	r3, [pc, #60]	; (10017244 <_putc_r+0x68>)
10017208:	429c      	cmp	r4, r3
1001720a:	d100      	bne.n	1001720e <_putc_r+0x32>
1001720c:	68f4      	ldr	r4, [r6, #12]
1001720e:	68a3      	ldr	r3, [r4, #8]
10017210:	3b01      	subs	r3, #1
10017212:	60a3      	str	r3, [r4, #8]
10017214:	2b00      	cmp	r3, #0
10017216:	da05      	bge.n	10017224 <_putc_r+0x48>
10017218:	69a2      	ldr	r2, [r4, #24]
1001721a:	4293      	cmp	r3, r2
1001721c:	db08      	blt.n	10017230 <_putc_r+0x54>
1001721e:	b2eb      	uxtb	r3, r5
10017220:	2b0a      	cmp	r3, #10
10017222:	d005      	beq.n	10017230 <_putc_r+0x54>
10017224:	6823      	ldr	r3, [r4, #0]
10017226:	b2e8      	uxtb	r0, r5
10017228:	1c5a      	adds	r2, r3, #1
1001722a:	6022      	str	r2, [r4, #0]
1001722c:	701d      	strb	r5, [r3, #0]
1001722e:	e004      	b.n	1001723a <_putc_r+0x5e>
10017230:	0022      	movs	r2, r4
10017232:	0029      	movs	r1, r5
10017234:	0030      	movs	r0, r6
10017236:	f7ff fa43 	bl	100166c0 <__swbuf_r>
1001723a:	bd70      	pop	{r4, r5, r6, pc}
1001723c:	100185a8 	.word	0x100185a8
10017240:	100185c8 	.word	0x100185c8
10017244:	100185e8 	.word	0x100185e8

10017248 <__sread>:
10017248:	b570      	push	{r4, r5, r6, lr}
1001724a:	000c      	movs	r4, r1
1001724c:	250e      	movs	r5, #14
1001724e:	5f49      	ldrsh	r1, [r1, r5]
10017250:	f000 f8b0 	bl	100173b4 <_read_r>
10017254:	2800      	cmp	r0, #0
10017256:	db03      	blt.n	10017260 <__sread+0x18>
10017258:	6d63      	ldr	r3, [r4, #84]	; 0x54
1001725a:	181b      	adds	r3, r3, r0
1001725c:	6563      	str	r3, [r4, #84]	; 0x54
1001725e:	e003      	b.n	10017268 <__sread+0x20>
10017260:	89a2      	ldrh	r2, [r4, #12]
10017262:	4b02      	ldr	r3, [pc, #8]	; (1001726c <__sread+0x24>)
10017264:	4013      	ands	r3, r2
10017266:	81a3      	strh	r3, [r4, #12]
10017268:	bd70      	pop	{r4, r5, r6, pc}
1001726a:	46c0      	nop			; (mov r8, r8)
1001726c:	ffffefff 	.word	0xffffefff

10017270 <__swrite>:
10017270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10017272:	001f      	movs	r7, r3
10017274:	898b      	ldrh	r3, [r1, #12]
10017276:	0005      	movs	r5, r0
10017278:	000c      	movs	r4, r1
1001727a:	0016      	movs	r6, r2
1001727c:	05db      	lsls	r3, r3, #23
1001727e:	d505      	bpl.n	1001728c <__swrite+0x1c>
10017280:	230e      	movs	r3, #14
10017282:	5ec9      	ldrsh	r1, [r1, r3]
10017284:	2200      	movs	r2, #0
10017286:	2302      	movs	r3, #2
10017288:	f000 f874 	bl	10017374 <_lseek_r>
1001728c:	89a2      	ldrh	r2, [r4, #12]
1001728e:	4b05      	ldr	r3, [pc, #20]	; (100172a4 <__swrite+0x34>)
10017290:	0028      	movs	r0, r5
10017292:	4013      	ands	r3, r2
10017294:	81a3      	strh	r3, [r4, #12]
10017296:	0032      	movs	r2, r6
10017298:	230e      	movs	r3, #14
1001729a:	5ee1      	ldrsh	r1, [r4, r3]
1001729c:	003b      	movs	r3, r7
1001729e:	f000 f81f 	bl	100172e0 <_write_r>
100172a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100172a4:	ffffefff 	.word	0xffffefff

100172a8 <__sseek>:
100172a8:	b570      	push	{r4, r5, r6, lr}
100172aa:	000c      	movs	r4, r1
100172ac:	250e      	movs	r5, #14
100172ae:	5f49      	ldrsh	r1, [r1, r5]
100172b0:	f000 f860 	bl	10017374 <_lseek_r>
100172b4:	89a3      	ldrh	r3, [r4, #12]
100172b6:	1c42      	adds	r2, r0, #1
100172b8:	d103      	bne.n	100172c2 <__sseek+0x1a>
100172ba:	4a05      	ldr	r2, [pc, #20]	; (100172d0 <__sseek+0x28>)
100172bc:	4013      	ands	r3, r2
100172be:	81a3      	strh	r3, [r4, #12]
100172c0:	e004      	b.n	100172cc <__sseek+0x24>
100172c2:	2280      	movs	r2, #128	; 0x80
100172c4:	0152      	lsls	r2, r2, #5
100172c6:	4313      	orrs	r3, r2
100172c8:	81a3      	strh	r3, [r4, #12]
100172ca:	6560      	str	r0, [r4, #84]	; 0x54
100172cc:	bd70      	pop	{r4, r5, r6, pc}
100172ce:	46c0      	nop			; (mov r8, r8)
100172d0:	ffffefff 	.word	0xffffefff

100172d4 <__sclose>:
100172d4:	b510      	push	{r4, lr}
100172d6:	230e      	movs	r3, #14
100172d8:	5ec9      	ldrsh	r1, [r1, r3]
100172da:	f000 f815 	bl	10017308 <_close_r>
100172de:	bd10      	pop	{r4, pc}

100172e0 <_write_r>:
100172e0:	b570      	push	{r4, r5, r6, lr}
100172e2:	0005      	movs	r5, r0
100172e4:	0008      	movs	r0, r1
100172e6:	0011      	movs	r1, r2
100172e8:	2200      	movs	r2, #0
100172ea:	4c06      	ldr	r4, [pc, #24]	; (10017304 <_write_r+0x24>)
100172ec:	6022      	str	r2, [r4, #0]
100172ee:	001a      	movs	r2, r3
100172f0:	f7f5 fb98 	bl	1000ca24 <_write>
100172f4:	1c43      	adds	r3, r0, #1
100172f6:	d103      	bne.n	10017300 <_write_r+0x20>
100172f8:	6823      	ldr	r3, [r4, #0]
100172fa:	2b00      	cmp	r3, #0
100172fc:	d000      	beq.n	10017300 <_write_r+0x20>
100172fe:	602b      	str	r3, [r5, #0]
10017300:	bd70      	pop	{r4, r5, r6, pc}
10017302:	46c0      	nop			; (mov r8, r8)
10017304:	1001b5c0 	.word	0x1001b5c0

10017308 <_close_r>:
10017308:	2300      	movs	r3, #0
1001730a:	b570      	push	{r4, r5, r6, lr}
1001730c:	4c06      	ldr	r4, [pc, #24]	; (10017328 <_close_r+0x20>)
1001730e:	0005      	movs	r5, r0
10017310:	0008      	movs	r0, r1
10017312:	6023      	str	r3, [r4, #0]
10017314:	f7f1 f884 	bl	10008420 <_close>
10017318:	1c43      	adds	r3, r0, #1
1001731a:	d103      	bne.n	10017324 <_close_r+0x1c>
1001731c:	6823      	ldr	r3, [r4, #0]
1001731e:	2b00      	cmp	r3, #0
10017320:	d000      	beq.n	10017324 <_close_r+0x1c>
10017322:	602b      	str	r3, [r5, #0]
10017324:	bd70      	pop	{r4, r5, r6, pc}
10017326:	46c0      	nop			; (mov r8, r8)
10017328:	1001b5c0 	.word	0x1001b5c0

1001732c <_fstat_r>:
1001732c:	2300      	movs	r3, #0
1001732e:	b570      	push	{r4, r5, r6, lr}
10017330:	4c06      	ldr	r4, [pc, #24]	; (1001734c <_fstat_r+0x20>)
10017332:	0005      	movs	r5, r0
10017334:	0008      	movs	r0, r1
10017336:	0011      	movs	r1, r2
10017338:	6023      	str	r3, [r4, #0]
1001733a:	f7f1 f875 	bl	10008428 <_fstat>
1001733e:	1c43      	adds	r3, r0, #1
10017340:	d103      	bne.n	1001734a <_fstat_r+0x1e>
10017342:	6823      	ldr	r3, [r4, #0]
10017344:	2b00      	cmp	r3, #0
10017346:	d000      	beq.n	1001734a <_fstat_r+0x1e>
10017348:	602b      	str	r3, [r5, #0]
1001734a:	bd70      	pop	{r4, r5, r6, pc}
1001734c:	1001b5c0 	.word	0x1001b5c0

10017350 <_isatty_r>:
10017350:	2300      	movs	r3, #0
10017352:	b570      	push	{r4, r5, r6, lr}
10017354:	4c06      	ldr	r4, [pc, #24]	; (10017370 <_isatty_r+0x20>)
10017356:	0005      	movs	r5, r0
10017358:	0008      	movs	r0, r1
1001735a:	6023      	str	r3, [r4, #0]
1001735c:	f7f1 f86a 	bl	10008434 <_isatty>
10017360:	1c43      	adds	r3, r0, #1
10017362:	d103      	bne.n	1001736c <_isatty_r+0x1c>
10017364:	6823      	ldr	r3, [r4, #0]
10017366:	2b00      	cmp	r3, #0
10017368:	d000      	beq.n	1001736c <_isatty_r+0x1c>
1001736a:	602b      	str	r3, [r5, #0]
1001736c:	bd70      	pop	{r4, r5, r6, pc}
1001736e:	46c0      	nop			; (mov r8, r8)
10017370:	1001b5c0 	.word	0x1001b5c0

10017374 <_lseek_r>:
10017374:	b570      	push	{r4, r5, r6, lr}
10017376:	0005      	movs	r5, r0
10017378:	0008      	movs	r0, r1
1001737a:	0011      	movs	r1, r2
1001737c:	2200      	movs	r2, #0
1001737e:	4c06      	ldr	r4, [pc, #24]	; (10017398 <_lseek_r+0x24>)
10017380:	6022      	str	r2, [r4, #0]
10017382:	001a      	movs	r2, r3
10017384:	f7f1 f858 	bl	10008438 <_lseek>
10017388:	1c43      	adds	r3, r0, #1
1001738a:	d103      	bne.n	10017394 <_lseek_r+0x20>
1001738c:	6823      	ldr	r3, [r4, #0]
1001738e:	2b00      	cmp	r3, #0
10017390:	d000      	beq.n	10017394 <_lseek_r+0x20>
10017392:	602b      	str	r3, [r5, #0]
10017394:	bd70      	pop	{r4, r5, r6, pc}
10017396:	46c0      	nop			; (mov r8, r8)
10017398:	1001b5c0 	.word	0x1001b5c0

1001739c <memchr>:
1001739c:	b2c9      	uxtb	r1, r1
1001739e:	1882      	adds	r2, r0, r2
100173a0:	4290      	cmp	r0, r2
100173a2:	d004      	beq.n	100173ae <memchr+0x12>
100173a4:	7803      	ldrb	r3, [r0, #0]
100173a6:	428b      	cmp	r3, r1
100173a8:	d002      	beq.n	100173b0 <memchr+0x14>
100173aa:	3001      	adds	r0, #1
100173ac:	e7f8      	b.n	100173a0 <memchr+0x4>
100173ae:	2000      	movs	r0, #0
100173b0:	4770      	bx	lr
	...

100173b4 <_read_r>:
100173b4:	b570      	push	{r4, r5, r6, lr}
100173b6:	0005      	movs	r5, r0
100173b8:	0008      	movs	r0, r1
100173ba:	0011      	movs	r1, r2
100173bc:	2200      	movs	r2, #0
100173be:	4c06      	ldr	r4, [pc, #24]	; (100173d8 <_read_r+0x24>)
100173c0:	6022      	str	r2, [r4, #0]
100173c2:	001a      	movs	r2, r3
100173c4:	f7f5 fb0e 	bl	1000c9e4 <_read>
100173c8:	1c43      	adds	r3, r0, #1
100173ca:	d103      	bne.n	100173d4 <_read_r+0x20>
100173cc:	6823      	ldr	r3, [r4, #0]
100173ce:	2b00      	cmp	r3, #0
100173d0:	d000      	beq.n	100173d4 <_read_r+0x20>
100173d2:	602b      	str	r3, [r5, #0]
100173d4:	bd70      	pop	{r4, r5, r6, pc}
100173d6:	46c0      	nop			; (mov r8, r8)
100173d8:	1001b5c0 	.word	0x1001b5c0
100173dc:	10008b70 	.word	0x10008b70
100173e0:	10008b76 	.word	0x10008b76
100173e4:	10008b76 	.word	0x10008b76
100173e8:	10008b70 	.word	0x10008b70
100173ec:	10008b76 	.word	0x10008b76
100173f0:	10008b76 	.word	0x10008b76
100173f4:	10008b76 	.word	0x10008b76
100173f8:	10008b76 	.word	0x10008b76
100173fc:	10008b76 	.word	0x10008b76
10017400:	10008b76 	.word	0x10008b76
10017404:	10008b76 	.word	0x10008b76
10017408:	10008b76 	.word	0x10008b76
1001740c:	10008b76 	.word	0x10008b76
10017410:	10008b76 	.word	0x10008b76
10017414:	10008b76 	.word	0x10008b76
10017418:	10008b76 	.word	0x10008b76
1001741c:	10008b76 	.word	0x10008b76
10017420:	10008b76 	.word	0x10008b76
10017424:	10008b76 	.word	0x10008b76
10017428:	10008b76 	.word	0x10008b76
1001742c:	10008b70 	.word	0x10008b70
10017430:	10008b70 	.word	0x10008b70
10017434:	10008b76 	.word	0x10008b76
10017438:	10008b76 	.word	0x10008b76
1001743c:	10008b76 	.word	0x10008b76
10017440:	10008b76 	.word	0x10008b76
10017444:	10008b76 	.word	0x10008b76
10017448:	10008b76 	.word	0x10008b76
1001744c:	10008b76 	.word	0x10008b76
10017450:	10008b76 	.word	0x10008b76
10017454:	10008b76 	.word	0x10008b76
10017458:	10008b76 	.word	0x10008b76
1001745c:	10008b76 	.word	0x10008b76
10017460:	10008b76 	.word	0x10008b76
10017464:	10008b76 	.word	0x10008b76
10017468:	10008b76 	.word	0x10008b76
1001746c:	10008b70 	.word	0x10008b70
10017470:	10008b76 	.word	0x10008b76
10017474:	10008b76 	.word	0x10008b76
10017478:	10008b76 	.word	0x10008b76
1001747c:	10008b76 	.word	0x10008b76
10017480:	10008b76 	.word	0x10008b76
10017484:	10008b76 	.word	0x10008b76
10017488:	10008b76 	.word	0x10008b76
1001748c:	10008b76 	.word	0x10008b76
10017490:	10008b76 	.word	0x10008b76
10017494:	10008b76 	.word	0x10008b76
10017498:	10008b76 	.word	0x10008b76
1001749c:	10008b76 	.word	0x10008b76
100174a0:	10008b76 	.word	0x10008b76
100174a4:	10008b76 	.word	0x10008b76
100174a8:	10008b76 	.word	0x10008b76
100174ac:	10008b76 	.word	0x10008b76
100174b0:	10008b76 	.word	0x10008b76
100174b4:	10008b70 	.word	0x10008b70
100174b8:	10008b76 	.word	0x10008b76
100174bc:	10008b76 	.word	0x10008b76
100174c0:	10008b70 	.word	0x10008b70
100174c4:	736d735b 	.word	0x736d735b
100174c8:	656c625f 	.word	0x656c625f
100174cc:	776f705f 	.word	0x776f705f
100174d0:	645f7265 	.word	0x645f7265
100174d4:	5d6e776f 	.word	0x5d6e776f
100174d8:	00000000 	.word	0x00000000
100174dc:	736d735b 	.word	0x736d735b
100174e0:	656c625f 	.word	0x656c625f
100174e4:	6961705f 	.word	0x6961705f
100174e8:	5f646572 	.word	0x5f646572
100174ec:	005d6e66 	.word	0x005d6e66
100174f0:	0000000d 	.word	0x0000000d
100174f4:	736d735b 	.word	0x736d735b
100174f8:	656c625f 	.word	0x656c625f
100174fc:	7664615f 	.word	0x7664615f
10017500:	69747265 	.word	0x69747265
10017504:	095d6573 	.word	0x095d6573
10017508:	76644109 	.word	0x76644109
1001750c:	69747265 	.word	0x69747265
10017510:	656d6573 	.word	0x656d6573
10017514:	6420746e 	.word	0x6420746e
10017518:	20617461 	.word	0x20617461
1001751c:	20746573 	.word	0x20746573
10017520:	6c696166 	.word	0x6c696166
10017524:	00216465 	.word	0x00216465
10017528:	736d735b 	.word	0x736d735b
1001752c:	7265735f 	.word	0x7265735f
10017530:	65636976 	.word	0x65636976
10017534:	7664615f 	.word	0x7664615f
10017538:	69747265 	.word	0x69747265
1001753c:	095d6573 	.word	0x095d6573
10017540:	20454c42 	.word	0x20454c42
10017544:	65766461 	.word	0x65766461
10017548:	73697472 	.word	0x73697472
1001754c:	6e656d65 	.word	0x6e656d65
10017550:	74732074 	.word	0x74732074
10017554:	20747261 	.word	0x20747261
10017558:	6c696166 	.word	0x6c696166
1001755c:	203a6465 	.word	0x203a6465
10017560:	73616572 	.word	0x73616572
10017564:	30206e6f 	.word	0x30206e6f
10017568:	00782578 	.word	0x00782578
1001756c:	3a505350 	.word	0x3a505350
10017570:	25783020 	.word	0x25783020
10017574:	202c786c 	.word	0x202c786c
10017578:	3a50534d 	.word	0x3a50534d
1001757c:	25783020 	.word	0x25783020
10017580:	0000786c 	.word	0x0000786c
10017584:	49544f4e 	.word	0x49544f4e
10017588:	41434946 	.word	0x41434946
1001758c:	4e4f4954 	.word	0x4e4f4954
10017590:	52524520 	.word	0x52524520
10017594:	2121524f 	.word	0x2121524f
10017598:	00000000 	.word	0x00000000

1001759c <sms_ble_gap_cb>:
	...
100175a8:	10008a01 00000000 10008a25 10008b21     ........%...!...
	...
100175c0:	10008a51 10008921 00000000 00000000     Q...!...........
	...

100175e8 <sms_ble_gatt_server_cb>:
100175e8:	10008925 10008941 00000000 00000000     %...A...........
	...
10017610:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10017620:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10017630:	656c6968 74657320 676e6974 20707520     hile setting up 
10017640:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10017650:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10017660:	6c626f72 77206d65 656c6968 74657320     roblem while set
10017670:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10017680:	65737520 75622072 6e6f7474 00000000      user button....
10017690:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
100176a0:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
100176b0:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
100176c0:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100176d0:	5d736563 72655309 65636976 65642073     ces].Services de
100176e0:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100176f0:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
10017700:	206d656c 6c696877 65732065 6e697474     lem while settin
10017710:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
10017720:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10017730:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10017740:	7320656c 69747465 7520676e 4d492070     le setting up IM
10017750:	52442055 70205944 00006e69 736d735b     U DRDY pin..[sms
10017760:	75706d5f 6665645f 5f656e69 76726573     _mpu_define_serv
10017770:	73656369 6553095d 63697672 64207365     ices].Services d
10017780:	6e696665 20676e69 6c696166 202c6465     efining failed, 
10017790:	73616572 30206e6f 00782578 736d735b     reason 0x%x.[sms
100177a0:	6572705f 72757373 74735f65 75747261     _pressure_startu
100177b0:	09095d70 69614609 2064656c 72206f74     p]...Failed to r
100177c0:	74657365 65727020 72757373 65642065     eset pressure de
100177d0:	65636976 00000000 736d735b 6572705f     vice....[sms_pre
100177e0:	72757373 74735f65 75747261 09095d70     ssure_startup]..
100177f0:	69614609 2064656c 69206f74 6974696e     .Failed to initi
10017800:	7a696c61 72702065 75737365 64206572     alize pressure d
10017810:	63697665 00000065 736d735b 6572705f     evice...[sms_pre
10017820:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10017830:	65636976 53095d73 69767265 20736563     vices].Services 
10017840:	69666564 676e696e 69616620 2c64656c     defining failed,
10017850:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10017860:	736d735b 6e65735f 73726f73 6977735f     [sms_sensors_swi
10017870:	5d686374 6f430909 6e646c75 73207427     tch]..Couldn't s
10017880:	74726174 554d4920 00000000 736d735b     tart IMU....[sms
10017890:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
100178a0:	43090909 646c756f 2074276e 72617473     ...Couldn't star
100178b0:	72702074 75737365 73206572 6f736e65     t pressure senso
100178c0:	00000072 736d735b 6e65735f 73726f73     r...[sms_sensors
100178d0:	6977735f 5d686374 4d530909 6f772053     _switch]..SMS wo
100178e0:	6e696b72 6f6d2067 203a6564 00006425     rking mode: %d..
100178f0:	1000ba04 1000ba12 1000ba20 1000ba2e     ........ .......
10017900:	1000ba3c 1000ba4a 1000ba58 1000ba68     <...J...X...h...
10017910:	1000ba78 1000ba88 1000ba98 1000baa8     x...............
10017920:	1000bab8 1000bac8 1000bad8 1000bae8     ................
10017930:	1000baf8 1000bb08 1000bb18 1000bb28     ............(...
10017940:	1000bb38 1000bb48 1000bb58 1000bb68     8...H...X...h...
10017950:	1000bb78 1000bb88 1000bb98 1000bba8     x...............
10017960:	1000bbb6 1000bbc4 1000bbd2 1000bbe0     ................
10017970:	1000bbee 1000bbfc 1000bc0a 1000bc18     ................
10017980:	1000bc28 1000bc38 1000bc48 1000bc58     (...8...H...X...
10017990:	1000bc68 1000bc78 1000bc88 1000bc98     h...x...........
100179a0:	1000bca8 1000bcb8 1000bcc8 1000bcd8     ................
100179b0:	1000bce8 1000bcf8 1000bd08 1000bd18     ................
100179c0:	1000bd26 1000bd34 1000bd60 1000bd6e     &...4...`...n...
100179d0:	1000bd7c 1000bd8a 1000bd98 1000bda6     |...............
100179e0:	1000bdb4 1000bdc2 1000bdd0 1000bdde     ................
100179f0:	1000bdec 1000bdfa 1000be08 1000be16     ................
10017a00:	1000be24 1000be32 1000be40 1000be4e     $...2...@...N...
10017a10:	1000be5c 1000be6a 1000be78 1000be86     \...j...x.......
10017a20:	1000be94 1000bea2 1000beb0 1000bebe     ................
10017a30:	1000becc 1000beda 1000bee8 1000bef6     ................
10017a40:	1000bf04 1000bf12 1000bf20 1000bf2e     ........ .......
10017a50:	1000bf3c 1000bf4a 1000bf58 1000bf66     <...J...X...f...
10017a60:	1000bf74 1000bf82 1000bf90 1000bf9e     t...............
10017a70:	1000bfac 1000bfba 1000bfc8 1000bfd6     ................
10017a80:	1000bfe4 1000bff2 1000c000 1000c00e     ................
10017a90:	1000c01c 1000c02a 1000c038 1000c046     ....*...8...F...
10017aa0:	1000c0e0 1000c108 1000c130 1000c158     ........0...X...
10017ab0:	1000c398 1000c188 1000c1a0 1000c218     ................
10017ac0:	1000c230 1000c1b8 1000c1d0 1000c1e8     0...............
10017ad0:	1000c200 1000c248 1000c50c 1000c50c     ....H...........
10017ae0:	1000c50c 1000c50c 1000c50c 1000c50c     ................
10017af0:	1000c50c 1000c50c 1000c2f0 1000c308     ................
10017b00:	1000c320 1000c3ae 1000c278 1000c50c      .......x.......
10017b10:	1000c50c 1000c50c 1000c50c 1000c50c     ................
10017b20:	1000c50c 1000c338 1000c350 1000c368     ....8...P...h...
10017b30:	1000c380 1000c50c 1000c4c4 1000c4dc     ................
10017b40:	1000c50c 1000c50c 1000c3da 1000c3f0     ................
10017b50:	1000c406 1000c41c 1000c50c 1000c50c     ................
10017b60:	1000c50c 1000c50c 1000c50c 1000c50c     ................
10017b70:	1000c50c 1000c50c 1000c0cc 1000c0f4     ................
10017b80:	1000c11c 1000c144 1000c170 1000c260     ....D...p...`...
10017b90:	1000c290 1000c2a8 1000c2c0 1000c2d8     ................
10017ba0:	1000c3c4 1000c432 1000c4ac 1000c4f4     ....2...........
10017bb0:	1000cb5c 1000cb5e 1000cb44 1000cb44     \...^...D...D...
10017bc0:	1000cb44 1000cb5c 1000cb44 1000cb44     D...\...D...D...
10017bd0:	1000d3a2 1000d416 1000d38a 1000d41c     ................
10017be0:	1000d390 1000d396 1000d39c 1000da3c     ............<...
10017bf0:	1000da3c 1000da3c 1000da3c 1000da3c     <...<...<...<...
10017c00:	1000da3c 1000da3c 1000da3c 1000da3c     <...<...<...<...
10017c10:	1000da3c 1000da3c 1000da3c 1000da3c     <...<...<...<...
10017c20:	1000da3c 1000da3c 1000da3c 1000da3c     <...<...<...<...
10017c30:	1000da3c 1000da3c 1000da5a 1000da5a     <...<...Z...Z...
10017c40:	1000da5a 1000da5a 1000da5a 1000da5a     Z...Z...Z...Z...
10017c50:	1000da5a 1000da5a 1000da5a 1000da5a     Z...Z...Z...Z...
10017c60:	1000da7c 1000da7c 1000da7c 1000da7c     |...|...|...|...
10017c70:	1000da7c 1000da7c 1000da7c 1000da7c     |...|...|...|...
10017c80:	1000da7c 1000da7c 1000da9e 1000da9e     |...|...........
10017c90:	1000da9e 1000da9e 1000da9e 1000da9e     ................
10017ca0:	1000dab8 1000dab8 1000dab8 1000dab8     ................
10017cb0:	1000dab8 1000dab8 1000dab8 1000dab8     ................
10017cc0:	1000dab8 1000dad2 1000dad2 1000daf4     ................
10017cd0:	1000daf4 1000db0e 1000daf4 34333231     ............1234
10017ce0:	00003635 efcdab00 00efcdab              56..........

10017cec <ble_mgr_gatt_server_handle>:
	...
10017d04:	1000ca79 1000cadd 1000ca7d 00000000     y.......}.......
10017d14:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10017d24:	00000000 65766441 73697472 20676e69     ....Advertising 
10017d34:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10017d44:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10017d54:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10017d64:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10017d74:	69766544 64206563 6f637369 63656e6e     Device disconnec
10017d84:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10017d94:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10017da4:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017db4:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017dc4:	6c706d6f 64657465 63757320 73736563     ompleted success
10017dd4:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10017de4:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10017df4:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017e04:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10017e14:	7320666f 206e6163 69766564 72206563     of scan device r
10017e24:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10017e34:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10017e44:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10017e54:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10017e64:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10017e74:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10017e84:	46207473 656c6961 00000064 72696150     st Failed...Pair
10017e94:	20676e69 636f7270 72756465 6f632065     ing procedure co
10017ea4:	656c706d 20646574 63637573 66737365     mpleted successf
10017eb4:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
10017ec4:	6e206563 6620746f 646e756f 206f7420     ce not found to 
10017ed4:	726f7473 68742065 61702065 6e697269     store the pairin
10017ee4:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
10017ef4:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017f04:	76616c53 65532065 69727563 52207974     Slave Security R
10017f14:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017f24:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10017f34:	71655220 74736575 41202d20 65687475      Request - Authe
10017f44:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10017f54:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10017f64:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10017f74:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10017f84:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10017f94:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
10017fa4:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
10017fb4:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
10017fc4:	206e6f28 6568746f 65442072 65636976     (on other Device
10017fd4:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
10017fe4:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
10017ff4:	74616546 20657275 20746f4e 70707573     Feature Not supp
10018004:	6574726f 00000064 65746e45 20646572     orted...Entered 
10018014:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10018024:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10018034:	7020666f 20726565 69766564 69206563     of peer device i
10018044:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10018054:	00000000 61656c50 75206573 6961706e     ....Please unpai
10018064:	68742072 65642065 65636976 6f726620     r the device fro
10018074:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10018084:	656c6962 65732029 6e697474 6d207367     bile) settings m
10018094:	20756e65 20646e61 72617473 61702074     enu and start pa
100180a4:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100180b4:	69747079 52206e6f 65757165 52207473     yption Request R
100180c4:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
100180d4:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
100180e4:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
100180f4:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10018104:	09095d74 61656c50 63206573 6b636568     t]..Please check
10018114:	65687420 776f7020 61207265 6320646e      the power and c
10018124:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10018134:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10018144:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10018154:	6e206563 20656d61 20746573 6c696166     ce name set fail
10018164:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
10018174:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
10018184:	73736572 74656720 69616620 0064656c     ress get failed.
10018194:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100181a4:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100181b4:	20656369 666e6f63 72756769 6f697461     ice configuratio
100181c4:	6166206e 64656c69 00000000 656c625b     n failed....[ble
100181d4:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100181e4:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100181f4:	72646441 20737365 6c696166 00006465     Address failed..
10018204:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10018214:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10018224:	65732065 69727563 72207974 65757165     e security reque
10018234:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10018244:	65746365 6f742064 65657020 65642072     ected to peer de
10018254:	65636976 74697720 64612068 73657264     vice with addres
10018264:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10018274:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10018284:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10018294:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100182a4:	61522067 6d6f646e 64646120 73736572     g Random address
100182b4:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
100182c4:	626d756e 6f207265 6f632066 63656e6e     number of connec
100182d4:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
100182e4:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
100182f4:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10018304:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10018314:	53202d20 75746174 25203a73 00000064      - Status: %d...
10018324:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10018334:	73697472 6e656d65 61642074 73206174     rtisement data s
10018344:	66207465 656c6961 00000064              et failed...

10018350 <ble_mgr_gap_handle>:
10018350:	1000ca75 1000cc59 1000ca8d 1000cab5     u...Y...........
10018360:	00000000 1000d705 1000cb0d 1000ca89     ................
10018370:	1000cdf9 1000ccd9 1000cff9 1000ce11     ................
10018380:	1000d149 1000d28d 1000cb95 1000d941     I...........A...
	...
1001839c:	3a505350 25783020 202c786c 3a50534d     PSP: 0x%lx, MSP:
100183ac:	25783020 202c786c 544e4f43 3a4c4f52      0x%lx, CONTROL:
100183bc:	25783020 0000786c 306e7442 746e6920      0x%lx..Btn0 int
100183cc:	202e2e2e 00000000 316e7442 746e6920     ... ....Btn1 int
100183dc:	202e2e2e 00000000 20504147 656d6974     ... ....GAP time
100183ec:	0074756f 6e657645 65672074 69742074     out.Event get ti
100183fc:	756f656d 00000074 20454c42 6f727265     meout...BLE erro
1001840c:	636f2072 72727563 41006465 6c656d74     r occurred.Atmel
1001841c:	726f4320 04022e70                                 Corp.

10018422 <CSWTCH.45>:
10018422:	00100402                                         ...

10018425 <CSWTCH.47>:
10018425:	03010300 03030303 03030303 02020303              ...............

10018434 <client_conf_uuid>:
10018434:	29042902                                         .)

10018436 <presentation_format_uuid>:
10018436:	29012904                                         .)

10018438 <user_desc_uuid>:
10018438:	29032901                                         .)

1001843a <server_conf_uuid>:
1001843a:	29002903                                         .)

1001843c <extended_props_uuid>:
1001843c:	28022900                                         .)

1001843e <include_uuid>:
1001843e:	28032802                                         .(

10018440 <char_uuid>:
10018440:	00002803 00776f70 74727173 00000066     .(..pow.sqrtf...

10018450 <TWO52>:
10018450:	00000000 43300000 00000000 c3300000     ......0C......0.
10018460:	10013aca 100139ee 10013aac 10013a84     .:...9...:...:..
10018470:	10013aac 10013a78 10013aac 10013a84     .:..x:...:...:..
10018480:	100139ee 100139ee 10013a78 10013a84     .9...9..x:...:..
10018490:	10013b30 10013b30 10013b30 10013ab2     0;..0;..0;...:..
100184a0:	100139ee 100139ee 10013a98 10013a82     .9...9...:...:..
100184b0:	10013a98 10013a78 10013a98 10013a82     .:..x:...:...:..
100184c0:	100139ee 100139ee 10013a78 10013a82     .9...9..x:...:..
100184d0:	10013b30 10013b30 10013b30 10013b3c     0;..0;..0;..<;..
100184e0:	10013e28 10013d86 10013d86 10013d84     (>...=...=...=..
100184f0:	10013e1a 10013e1a 10013e10 10013d84     .>...>...>...=..
10018500:	10013e1a 10013e10 10013e1a 10013d84     .>...>...>...=..
10018510:	10013e20 10013e20 10013e20 10013eaa      >.. >.. >...>..
10018520:	10014c08 10014ad6 10014bdc 10014acc     .L...J...K...J..
10018530:	10014bdc 10014be6 10014bdc 10014acc     .K...K...K...J..
10018540:	10014ad6 10014ad6 10014be6 10014acc     .J...J...K...J..
10018550:	10014ac2 10014ac2 10014ac2 10014e38     .J...J...J..8N..
10018560:	10015450 10015310 10015310 1001530e     PT...S...S...S..
10018570:	10015428 10015428 1001541a 1001530e     (T..(T...T...S..
10018580:	10015428 1001541a 10015428 1001530e     (T...T..(T...S..
10018590:	10015430 10015430 10015430 10015630     0T..0T..0T..0V..
100185a0:	00000043                                C...

100185a4 <_global_impure_ptr>:
100185a4:	10018668                                h...

100185a8 <__sf_fake_stdin>:
	...

100185c8 <__sf_fake_stdout>:
	...

100185e8 <__sf_fake_stderr>:
	...
10018608:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10018618:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10018628:	31300046 35343332 39383736 64636261     F.0123456789abcd
10018638:	00006665                                ef..

1001863c <_init>:
1001863c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001863e:	46c0      	nop			; (mov r8, r8)
10018640:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018642:	bc08      	pop	{r3}
10018644:	469e      	mov	lr, r3
10018646:	4770      	bx	lr

10018648 <__init_array_start>:
10018648:	100080b1 	.word	0x100080b1

1001864c <_fini>:
1001864c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001864e:	46c0      	nop			; (mov r8, r8)
10018650:	bcf8      	pop	{r3, r4, r5, r6, r7}
10018652:	bc08      	pop	{r3}
10018654:	469e      	mov	lr, r3
10018656:	4770      	bx	lr

10018658 <__fini_array_start>:
10018658:	10008089 	.word	0x10008089
