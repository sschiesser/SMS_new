
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000cf90  10008000  10008000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     0000006c  10014f90  10014f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002de8  10014ffc  10014ffc  00014ffc  2**2
                  ALLOC
  3 .stack        00001804  10017de4  10017de4  00014ffc  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  00014ffc  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00015024  2**0
                  CONTENTS, READONLY
  6 .debug_info   00036b12  00000000  00000000  000150d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00004101  00000000  00000000  0004bbea  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000070c7  00000000  00000000  0004fceb  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 000009c0  00000000  00000000  00056db2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009a0  00000000  00000000  00057772  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00024165  00000000  00000000  00058112  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0001135b  00000000  00000000  0007c277  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0013f762  00000000  00000000  0008d5d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  0000230c  00000000  00000000  001ccd34  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	10014f90 	.word	0x10014f90
10008068:	10014f90 	.word	0x10014f90
1000806c:	10014ffc 	.word	0x10014ffc
10008070:	10017de4 	.word	0x10017de4
10008074:	10014ffc 	.word	0x10014ffc
10008078:	10014f94 	.word	0x10014f94
1000807c:	10015000 	.word	0x10015000
10008080:	1001222d 	.word	0x1001222d
10008084:	1000d959 	.word	0x1000d959

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	10014ffc 	.word	0x10014ffc
100080a8:	00000000 	.word	0x00000000
100080ac:	10014f90 	.word	0x10014f90

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10015000 	.word	0x10015000
100080dc:	10014f90 	.word	0x10014f90
100080e0:	10014f90 	.word	0x10014f90
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10015018 	.word	0x10015018

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10015018 	.word	0x10015018

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10015018 	.word	0x10015018

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b2b      	ldr	r3, [pc, #172]	; (10008210 <aon_sleep_timer_init+0xb4>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a28      	ldr	r2, [pc, #160]	; (10008210 <aon_sleep_timer_init+0xb4>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a24      	ldr	r2, [pc, #144]	; (10008210 <aon_sleep_timer_init+0xb4>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b23      	ldr	r3, [pc, #140]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d21      	ldr	r5, [pc, #132]	; (10008214 <aon_sleep_timer_init+0xb8>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b10      	ldr	r3, [pc, #64]	; (10008214 <aon_sleep_timer_init+0xb8>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0d      	ldr	r3, [pc, #52]	; (10008214 <aon_sleep_timer_init+0xb8>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d109      	bne.n	10008202 <aon_sleep_timer_init+0xa6>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4909      	ldr	r1, [pc, #36]	; (10008214 <aon_sleep_timer_init+0xb8>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
100081fc:	2200      	movs	r2, #0
100081fe:	4b05      	ldr	r3, [pc, #20]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008200:	601a      	str	r2, [r3, #0]
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
10008202:	4905      	ldr	r1, [pc, #20]	; (10008218 <aon_sleep_timer_init+0xbc>)
10008204:	202b      	movs	r0, #43	; 0x2b
10008206:	4b05      	ldr	r3, [pc, #20]	; (1000821c <aon_sleep_timer_init+0xc0>)
10008208:	4798      	blx	r3
}
1000820a:	b003      	add	sp, #12
1000820c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000820e:	46c0      	nop			; (mov r8, r8)
10008210:	4000e000 	.word	0x4000e000
10008214:	4000d000 	.word	0x4000d000
10008218:	10008129 	.word	0x10008129
1000821c:	1000b1c5 	.word	0x1000b1c5

10008220 <sms_ble_pair_request_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
10008220:	b510      	push	{r4, lr}
10008222:	b082      	sub	sp, #8
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
10008224:	480a      	ldr	r0, [pc, #40]	; (10008250 <sms_ble_pair_request_fn+0x30>)
10008226:	4b0b      	ldr	r3, [pc, #44]	; (10008254 <sms_ble_pair_request_fn+0x34>)
10008228:	4798      	blx	r3
1000822a:	4b0b      	ldr	r3, [pc, #44]	; (10008258 <sms_ble_pair_request_fn+0x38>)
1000822c:	7819      	ldrb	r1, [r3, #0]
1000822e:	b2c9      	uxtb	r1, r1
10008230:	4b0a      	ldr	r3, [pc, #40]	; (1000825c <sms_ble_pair_request_fn+0x3c>)
10008232:	781a      	ldrb	r2, [r3, #0]
10008234:	b2d2      	uxtb	r2, r2
10008236:	4b0a      	ldr	r3, [pc, #40]	; (10008260 <sms_ble_pair_request_fn+0x40>)
10008238:	781b      	ldrb	r3, [r3, #0]
1000823a:	b2db      	uxtb	r3, r3
1000823c:	4809      	ldr	r0, [pc, #36]	; (10008264 <sms_ble_pair_request_fn+0x44>)
1000823e:	7800      	ldrb	r0, [r0, #0]
10008240:	9000      	str	r0, [sp, #0]
10008242:	4809      	ldr	r0, [pc, #36]	; (10008268 <sms_ble_pair_request_fn+0x48>)
10008244:	4c09      	ldr	r4, [pc, #36]	; (1000826c <sms_ble_pair_request_fn+0x4c>)
10008246:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008248:	2000      	movs	r0, #0
1000824a:	b002      	add	sp, #8
1000824c:	bd10      	pop	{r4, pc}
1000824e:	46c0      	nop			; (mov r8, r8)
10008250:	10013464 	.word	0x10013464
10008254:	100123d9 	.word	0x100123d9
10008258:	10016acc 	.word	0x10016acc
1000825c:	10016b76 	.word	0x10016b76
10008260:	10016ac4 	.word	0x10016ac4
10008264:	10016b77 	.word	0x10016b77
10008268:	10013468 	.word	0x10013468
1000826c:	100122b9 	.word	0x100122b9

10008270 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008270:	b510      	push	{r4, lr}
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
    //button_current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
10008272:	2001      	movs	r0, #1
10008274:	4b0c      	ldr	r3, [pc, #48]	; (100082a8 <sms_ble_notification_confirmed_fn+0x38>)
10008276:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008278:	2200      	movs	r2, #0
1000827a:	4b0c      	ldr	r3, [pc, #48]	; (100082ac <sms_ble_notification_confirmed_fn+0x3c>)
1000827c:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
1000827e:	3222      	adds	r2, #34	; 0x22
10008280:	4b0b      	ldr	r3, [pc, #44]	; (100082b0 <sms_ble_notification_confirmed_fn+0x40>)
10008282:	701a      	strb	r2, [r3, #0]
    //sms_sensors_toggle_interrupt(SMS_EXT_INT_ENABLE);
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
10008284:	480b      	ldr	r0, [pc, #44]	; (100082b4 <sms_ble_notification_confirmed_fn+0x44>)
10008286:	4b0c      	ldr	r3, [pc, #48]	; (100082b8 <sms_ble_notification_confirmed_fn+0x48>)
10008288:	4798      	blx	r3
1000828a:	4c0c      	ldr	r4, [pc, #48]	; (100082bc <sms_ble_notification_confirmed_fn+0x4c>)
1000828c:	7821      	ldrb	r1, [r4, #0]
1000828e:	b2c9      	uxtb	r1, r1
10008290:	480b      	ldr	r0, [pc, #44]	; (100082c0 <sms_ble_notification_confirmed_fn+0x50>)
10008292:	4b0c      	ldr	r3, [pc, #48]	; (100082c4 <sms_ble_notification_confirmed_fn+0x54>)
10008294:	4798      	blx	r3
    if(timer1_current_mode == TIMER1_MODE_NONE) {
10008296:	7823      	ldrb	r3, [r4, #0]
10008298:	2b00      	cmp	r3, #0
1000829a:	d102      	bne.n	100082a2 <sms_ble_notification_confirmed_fn+0x32>
        ulp_ready = true;
1000829c:	2201      	movs	r2, #1
1000829e:	4b0a      	ldr	r3, [pc, #40]	; (100082c8 <sms_ble_notification_confirmed_fn+0x58>)
100082a0:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
100082a2:	2000      	movs	r0, #0
100082a4:	bd10      	pop	{r4, pc}
100082a6:	46c0      	nop			; (mov r8, r8)
100082a8:	1000941d 	.word	0x1000941d
100082ac:	10016b77 	.word	0x10016b77
100082b0:	10016b76 	.word	0x10016b76
100082b4:	10013464 	.word	0x10013464
100082b8:	100123d9 	.word	0x100123d9
100082bc:	10016ac4 	.word	0x10016ac4
100082c0:	100134b8 	.word	0x100134b8
100082c4:	100122b9 	.word	0x100122b9
100082c8:	10016ace 	.word	0x10016ace

100082cc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100082cc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100082ce:	2001      	movs	r0, #1
100082d0:	4b0b      	ldr	r3, [pc, #44]	; (10008300 <sms_ble_indication_confirmed_fn+0x34>)
100082d2:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100082d4:	2200      	movs	r2, #0
100082d6:	4b0b      	ldr	r3, [pc, #44]	; (10008304 <sms_ble_indication_confirmed_fn+0x38>)
100082d8:	701a      	strb	r2, [r3, #0]
    ble_current_state = BLE_STATE_PAIRED;
100082da:	3222      	adds	r2, #34	; 0x22
100082dc:	4b0a      	ldr	r3, [pc, #40]	; (10008308 <sms_ble_indication_confirmed_fn+0x3c>)
100082de:	701a      	strb	r2, [r3, #0]
    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100082e0:	2100      	movs	r1, #0
100082e2:	2000      	movs	r0, #0
100082e4:	4b09      	ldr	r3, [pc, #36]	; (1000830c <sms_ble_indication_confirmed_fn+0x40>)
100082e6:	4798      	blx	r3
    sms_sensors_toggle_interrupt(SMS_EXT_INT_ENABLE);
100082e8:	2000      	movs	r0, #0
100082ea:	4b09      	ldr	r3, [pc, #36]	; (10008310 <sms_ble_indication_confirmed_fn+0x44>)
100082ec:	4798      	blx	r3
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100082ee:	4b09      	ldr	r3, [pc, #36]	; (10008314 <sms_ble_indication_confirmed_fn+0x48>)
100082f0:	781b      	ldrb	r3, [r3, #0]
100082f2:	2b00      	cmp	r3, #0
100082f4:	d102      	bne.n	100082fc <sms_ble_indication_confirmed_fn+0x30>
        ulp_ready = true;
100082f6:	2201      	movs	r2, #1
100082f8:	4b07      	ldr	r3, [pc, #28]	; (10008318 <sms_ble_indication_confirmed_fn+0x4c>)
100082fa:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100082fc:	2000      	movs	r0, #0
100082fe:	bd10      	pop	{r4, pc}
10008300:	1000941d 	.word	0x1000941d
10008304:	10016b77 	.word	0x10016b77
10008308:	10016b76 	.word	0x10016b76
1000830c:	10008af9 	.word	0x10008af9
10008310:	1000d8fd 	.word	0x1000d8fd
10008314:	10016ac4 	.word	0x10016ac4
10008318:	10016ace 	.word	0x10016ace

1000831c <sms_ble_startup>:
#include <stdio.h>
//#include <stdlib.h>
#include "sms_peripheral1.h"

void sms_ble_startup(void)
{
1000831c:	b510      	push	{r4, lr}
    sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
1000831e:	2101      	movs	r1, #1
10008320:	2001      	movs	r0, #1
10008322:	4b04      	ldr	r3, [pc, #16]	; (10008334 <sms_ble_startup+0x18>)
10008324:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_LED_STARTUP;
10008326:	2202      	movs	r2, #2
10008328:	4b03      	ldr	r3, [pc, #12]	; (10008338 <sms_ble_startup+0x1c>)
1000832a:	701a      	strb	r2, [r3, #0]
    sms_led_blink_start(SMS_LED_0_PIN);
1000832c:	2016      	movs	r0, #22
1000832e:	4b03      	ldr	r3, [pc, #12]	; (1000833c <sms_ble_startup+0x20>)
10008330:	4798      	blx	r3
}
10008332:	bd10      	pop	{r4, pc}
10008334:	10008af9 	.word	0x10008af9
10008338:	10016b77 	.word	0x10016b77
1000833c:	10008d39 	.word	0x10008d39

10008340 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008340:	b510      	push	{r4, lr}
    sms_monitor_states("[sms_ble_power_down]");
10008342:	482c      	ldr	r0, [pc, #176]	; (100083f4 <sms_ble_power_down+0xb4>)
10008344:	4b2c      	ldr	r3, [pc, #176]	; (100083f8 <sms_ble_power_down+0xb8>)
10008346:	4798      	blx	r3
    ulp_ready = true;
10008348:	2201      	movs	r2, #1
1000834a:	4b2c      	ldr	r3, [pc, #176]	; (100083fc <sms_ble_power_down+0xbc>)
1000834c:	701a      	strb	r2, [r3, #0]
    if(ble_current_state == BLE_STATE_POWEROFF) {
1000834e:	4b2c      	ldr	r3, [pc, #176]	; (10008400 <sms_ble_power_down+0xc0>)
10008350:	781b      	ldrb	r3, [r3, #0]
10008352:	2b00      	cmp	r3, #0
10008354:	d102      	bne.n	1000835c <sms_ble_power_down+0x1c>
        /* If already power off state, then go back sleeping */
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        release_sleep_lock();
10008356:	4b2b      	ldr	r3, [pc, #172]	; (10008404 <sms_ble_power_down+0xc4>)
10008358:	4798      	blx	r3
1000835a:	e049      	b.n	100083f0 <sms_ble_power_down+0xb0>
    }
    else {
        /* Disable button interrupts */
        sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);        
1000835c:	2101      	movs	r1, #1
1000835e:	2001      	movs	r0, #1
10008360:	4b29      	ldr	r3, [pc, #164]	; (10008408 <sms_ble_power_down+0xc8>)
10008362:	4798      	blx	r3
        /* Disconnect if necessary from BLE network */
        switch(ble_current_state) {
10008364:	4b26      	ldr	r3, [pc, #152]	; (10008400 <sms_ble_power_down+0xc0>)
10008366:	781b      	ldrb	r3, [r3, #0]
10008368:	b2db      	uxtb	r3, r3
1000836a:	2b21      	cmp	r3, #33	; 0x21
1000836c:	d02c      	beq.n	100083c8 <sms_ble_power_down+0x88>
1000836e:	d802      	bhi.n	10008376 <sms_ble_power_down+0x36>
10008370:	2b20      	cmp	r3, #32
10008372:	d005      	beq.n	10008380 <sms_ble_power_down+0x40>
10008374:	e033      	b.n	100083de <sms_ble_power_down+0x9e>
10008376:	2b22      	cmp	r3, #34	; 0x22
10008378:	d017      	beq.n	100083aa <sms_ble_power_down+0x6a>
1000837a:	2b23      	cmp	r3, #35	; 0x23
1000837c:	d01b      	beq.n	100083b6 <sms_ble_power_down+0x76>
1000837e:	e02e      	b.n	100083de <sms_ble_power_down+0x9e>
            case BLE_STATE_ADVERTISING:
            DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
10008380:	4822      	ldr	r0, [pc, #136]	; (1000840c <sms_ble_power_down+0xcc>)
10008382:	4b23      	ldr	r3, [pc, #140]	; (10008410 <sms_ble_power_down+0xd0>)
10008384:	4798      	blx	r3
10008386:	4823      	ldr	r0, [pc, #140]	; (10008414 <sms_ble_power_down+0xd4>)
10008388:	4b23      	ldr	r3, [pc, #140]	; (10008418 <sms_ble_power_down+0xd8>)
1000838a:	4798      	blx	r3
            if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
1000838c:	4b23      	ldr	r3, [pc, #140]	; (1000841c <sms_ble_power_down+0xdc>)
1000838e:	4798      	blx	r3
10008390:	2800      	cmp	r0, #0
10008392:	d003      	beq.n	1000839c <sms_ble_power_down+0x5c>
                DBG_LOG_CONT_DEV("failed!!!");
10008394:	4822      	ldr	r0, [pc, #136]	; (10008420 <sms_ble_power_down+0xe0>)
10008396:	4b20      	ldr	r3, [pc, #128]	; (10008418 <sms_ble_power_down+0xd8>)
10008398:	4798      	blx	r3
1000839a:	e020      	b.n	100083de <sms_ble_power_down+0x9e>
                //#pragma TBD: manage adv_stop failure
            }
            else {
                DBG_LOG_CONT_DEV("done!");
1000839c:	4821      	ldr	r0, [pc, #132]	; (10008424 <sms_ble_power_down+0xe4>)
1000839e:	4b1e      	ldr	r3, [pc, #120]	; (10008418 <sms_ble_power_down+0xd8>)
100083a0:	4798      	blx	r3
                ble_current_state = BLE_STATE_DISCONNECTED;
100083a2:	2211      	movs	r2, #17
100083a4:	4b16      	ldr	r3, [pc, #88]	; (10008400 <sms_ble_power_down+0xc0>)
100083a6:	701a      	strb	r2, [r3, #0]
100083a8:	e019      	b.n	100083de <sms_ble_power_down+0x9e>
            }
            break;
            
            case BLE_STATE_PAIRED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
100083aa:	4818      	ldr	r0, [pc, #96]	; (1000840c <sms_ble_power_down+0xcc>)
100083ac:	4b18      	ldr	r3, [pc, #96]	; (10008410 <sms_ble_power_down+0xd0>)
100083ae:	4798      	blx	r3
100083b0:	481d      	ldr	r0, [pc, #116]	; (10008428 <sms_ble_power_down+0xe8>)
100083b2:	4b19      	ldr	r3, [pc, #100]	; (10008418 <sms_ble_power_down+0xd8>)
100083b4:	4798      	blx	r3
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
100083b6:	4815      	ldr	r0, [pc, #84]	; (1000840c <sms_ble_power_down+0xcc>)
100083b8:	4b15      	ldr	r3, [pc, #84]	; (10008410 <sms_ble_power_down+0xd0>)
100083ba:	4798      	blx	r3
100083bc:	481b      	ldr	r0, [pc, #108]	; (1000842c <sms_ble_power_down+0xec>)
100083be:	4b16      	ldr	r3, [pc, #88]	; (10008418 <sms_ble_power_down+0xd8>)
100083c0:	4798      	blx	r3
            sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
100083c2:	2001      	movs	r0, #1
100083c4:	4b1a      	ldr	r3, [pc, #104]	; (10008430 <sms_ble_power_down+0xf0>)
100083c6:	4798      	blx	r3
            //#pragma TBD: switch-off sensors to save current
            //sms_sensors_switch(false);
            
            case BLE_STATE_CONNECTED:
            DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
100083c8:	4810      	ldr	r0, [pc, #64]	; (1000840c <sms_ble_power_down+0xcc>)
100083ca:	4b11      	ldr	r3, [pc, #68]	; (10008410 <sms_ble_power_down+0xd0>)
100083cc:	4798      	blx	r3
100083ce:	4819      	ldr	r0, [pc, #100]	; (10008434 <sms_ble_power_down+0xf4>)
100083d0:	4b11      	ldr	r3, [pc, #68]	; (10008418 <sms_ble_power_down+0xd8>)
100083d2:	4798      	blx	r3
            at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
100083d4:	4b18      	ldr	r3, [pc, #96]	; (10008438 <sms_ble_power_down+0xf8>)
100083d6:	8818      	ldrh	r0, [r3, #0]
100083d8:	2113      	movs	r1, #19
100083da:	4b18      	ldr	r3, [pc, #96]	; (1000843c <sms_ble_power_down+0xfc>)
100083dc:	4798      	blx	r3
            
            default:
            break;
        }
        
        ble_current_state = BLE_STATE_DISCONNECTED;
100083de:	2211      	movs	r2, #17
100083e0:	4b07      	ldr	r3, [pc, #28]	; (10008400 <sms_ble_power_down+0xc0>)
100083e2:	701a      	strb	r2, [r3, #0]
        timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100083e4:	3a0e      	subs	r2, #14
100083e6:	4b16      	ldr	r3, [pc, #88]	; (10008440 <sms_ble_power_down+0x100>)
100083e8:	701a      	strb	r2, [r3, #0]
        sms_led_blink_start(SMS_LED_0_PIN);
100083ea:	2016      	movs	r0, #22
100083ec:	4b15      	ldr	r3, [pc, #84]	; (10008444 <sms_ble_power_down+0x104>)
100083ee:	4798      	blx	r3
    }
}
100083f0:	bd10      	pop	{r4, pc}
100083f2:	46c0      	nop			; (mov r8, r8)
100083f4:	100134d0 	.word	0x100134d0
100083f8:	1000d861 	.word	0x1000d861
100083fc:	10016ace 	.word	0x10016ace
10008400:	10016b76 	.word	0x10016b76
10008404:	1000d58d 	.word	0x1000d58d
10008408:	10008af9 	.word	0x10008af9
1000840c:	10013464 	.word	0x10013464
10008410:	100123d9 	.word	0x100123d9
10008414:	100134e8 	.word	0x100134e8
10008418:	100122b9 	.word	0x100122b9
1000841c:	1000ea3d 	.word	0x1000ea3d
10008420:	1001353c 	.word	0x1001353c
10008424:	10013548 	.word	0x10013548
10008428:	10013550 	.word	0x10013550
1000842c:	100135a8 	.word	0x100135a8
10008430:	1000d8fd 	.word	0x1000d8fd
10008434:	100135d4 	.word	0x100135d4
10008438:	10016b20 	.word	0x10016b20
1000843c:	1000ea69 	.word	0x1000ea69
10008440:	10016b77 	.word	0x10016b77
10008444:	10008d39 	.word	0x10008d39

10008448 <sms_ble_adv_report_fn>:
    return AT_BLE_FAILURE;
}

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
10008448:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_current_state = BLE_STATE_DISCONNECTED;
1000844a:	2211      	movs	r2, #17
1000844c:	4b05      	ldr	r3, [pc, #20]	; (10008464 <sms_ble_adv_report_fn+0x1c>)
1000844e:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10008450:	4805      	ldr	r0, [pc, #20]	; (10008468 <sms_ble_adv_report_fn+0x20>)
10008452:	4b06      	ldr	r3, [pc, #24]	; (1000846c <sms_ble_adv_report_fn+0x24>)
10008454:	4798      	blx	r3
10008456:	4806      	ldr	r0, [pc, #24]	; (10008470 <sms_ble_adv_report_fn+0x28>)
10008458:	4b06      	ldr	r3, [pc, #24]	; (10008474 <sms_ble_adv_report_fn+0x2c>)
1000845a:	4798      	blx	r3
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
1000845c:	4b06      	ldr	r3, [pc, #24]	; (10008478 <sms_ble_adv_report_fn+0x30>)
1000845e:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
10008460:	2000      	movs	r0, #0
10008462:	bd10      	pop	{r4, pc}
10008464:	10016b76 	.word	0x10016b76
10008468:	10013464 	.word	0x10013464
1000846c:	100123d9 	.word	0x100123d9
10008470:	1001360c 	.word	0x1001360c
10008474:	100122b9 	.word	0x100122b9
10008478:	10008341 	.word	0x10008341

1000847c <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
1000847c:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_ADVERTISING) {
1000847e:	4b0a      	ldr	r3, [pc, #40]	; (100084a8 <sms_ble_connected_fn+0x2c>)
10008480:	781b      	ldrb	r3, [r3, #0]
10008482:	2b20      	cmp	r3, #32
10008484:	d10c      	bne.n	100084a0 <sms_ble_connected_fn+0x24>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
10008486:	8902      	ldrh	r2, [r0, #8]
10008488:	4b08      	ldr	r3, [pc, #32]	; (100084ac <sms_ble_connected_fn+0x30>)
1000848a:	801a      	strh	r2, [r3, #0]
        ble_current_state = BLE_STATE_CONNECTED;
1000848c:	2221      	movs	r2, #33	; 0x21
1000848e:	4b06      	ldr	r3, [pc, #24]	; (100084a8 <sms_ble_connected_fn+0x2c>)
10008490:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10008492:	4807      	ldr	r0, [pc, #28]	; (100084b0 <sms_ble_connected_fn+0x34>)
10008494:	4b07      	ldr	r3, [pc, #28]	; (100084b4 <sms_ble_connected_fn+0x38>)
10008496:	4798      	blx	r3
10008498:	4807      	ldr	r0, [pc, #28]	; (100084b8 <sms_ble_connected_fn+0x3c>)
1000849a:	4b08      	ldr	r3, [pc, #32]	; (100084bc <sms_ble_connected_fn+0x40>)
1000849c:	4798      	blx	r3
1000849e:	e001      	b.n	100084a4 <sms_ble_connected_fn+0x28>
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}            
    }
    else {
        sms_ble_power_down();
100084a0:	4b07      	ldr	r3, [pc, #28]	; (100084c0 <sms_ble_connected_fn+0x44>)
100084a2:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
100084a4:	2000      	movs	r0, #0
100084a6:	bd10      	pop	{r4, pc}
100084a8:	10016b76 	.word	0x10016b76
100084ac:	10016b74 	.word	0x10016b74
100084b0:	10013464 	.word	0x10013464
100084b4:	100123d9 	.word	0x100123d9
100084b8:	10013640 	.word	0x10013640
100084bc:	100122b9 	.word	0x100122b9
100084c0:	10008341 	.word	0x10008341

100084c4 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
100084c4:	b510      	push	{r4, lr}
    if(ble_current_state == BLE_STATE_CONNECTED) {
100084c6:	4b0b      	ldr	r3, [pc, #44]	; (100084f4 <sms_ble_paired_fn+0x30>)
100084c8:	781b      	ldrb	r3, [r3, #0]
100084ca:	2b21      	cmp	r3, #33	; 0x21
100084cc:	d10d      	bne.n	100084ea <sms_ble_paired_fn+0x26>
        ble_current_state = BLE_STATE_PAIRED;
100084ce:	2222      	movs	r2, #34	; 0x22
100084d0:	4b08      	ldr	r3, [pc, #32]	; (100084f4 <sms_ble_paired_fn+0x30>)
100084d2:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_states("[sms_ble_paired_fn]");
100084d4:	4808      	ldr	r0, [pc, #32]	; (100084f8 <sms_ble_paired_fn+0x34>)
100084d6:	4b09      	ldr	r3, [pc, #36]	; (100084fc <sms_ble_paired_fn+0x38>)
100084d8:	4798      	blx	r3
        //DBG_LOG_DEV("[sms_ble_paired_fn]\t\tDevices paired... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true); // ! Release sleep lock & enable buttons interrupt after reset done!
100084da:	2001      	movs	r0, #1
100084dc:	4b08      	ldr	r3, [pc, #32]	; (10008500 <sms_ble_paired_fn+0x3c>)
100084de:	4798      	blx	r3
        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100084e0:	2100      	movs	r1, #0
100084e2:	2000      	movs	r0, #0
100084e4:	4b07      	ldr	r3, [pc, #28]	; (10008504 <sms_ble_paired_fn+0x40>)
100084e6:	4798      	blx	r3
100084e8:	e001      	b.n	100084ee <sms_ble_paired_fn+0x2a>
    }
    else {
        sms_ble_power_down();
100084ea:	4b07      	ldr	r3, [pc, #28]	; (10008508 <sms_ble_paired_fn+0x44>)
100084ec:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
100084ee:	2000      	movs	r0, #0
100084f0:	bd10      	pop	{r4, pc}
100084f2:	46c0      	nop			; (mov r8, r8)
100084f4:	10016b76 	.word	0x10016b76
100084f8:	10013670 	.word	0x10013670
100084fc:	1000d861 	.word	0x1000d861
10008500:	1000d8c5 	.word	0x1000d8c5
10008504:	10008af9 	.word	0x10008af9
10008508:	10008341 	.word	0x10008341

1000850c <sms_ble_advertise>:
        sms_led_blink_start(SMS_LED_0_PIN);
    }
}

at_ble_status_t sms_ble_advertise(void)
{
1000850c:	b510      	push	{r4, lr}
1000850e:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_FAILURE;
    ble_current_state = BLE_STATE_ADVERTISING;
10008510:	2220      	movs	r2, #32
10008512:	4b17      	ldr	r3, [pc, #92]	; (10008570 <sms_ble_advertise+0x64>)
10008514:	701a      	strb	r2, [r3, #0]

    /* Set the advertisement data */
    if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
10008516:	4b17      	ldr	r3, [pc, #92]	; (10008574 <sms_ble_advertise+0x68>)
10008518:	4798      	blx	r3
1000851a:	1e04      	subs	r4, r0, #0
1000851c:	d007      	beq.n	1000852e <sms_ble_advertise+0x22>
        DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
1000851e:	4816      	ldr	r0, [pc, #88]	; (10008578 <sms_ble_advertise+0x6c>)
10008520:	4b16      	ldr	r3, [pc, #88]	; (1000857c <sms_ble_advertise+0x70>)
10008522:	4798      	blx	r3
10008524:	4816      	ldr	r0, [pc, #88]	; (10008580 <sms_ble_advertise+0x74>)
10008526:	4b17      	ldr	r3, [pc, #92]	; (10008584 <sms_ble_advertise+0x78>)
10008528:	4798      	blx	r3
        return status;
1000852a:	0020      	movs	r0, r4
1000852c:	e01e      	b.n	1000856c <sms_ble_advertise+0x60>
    }

    /* Start of advertisement */
    if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
1000852e:	2300      	movs	r3, #0
10008530:	9302      	str	r3, [sp, #8]
10008532:	4b15      	ldr	r3, [pc, #84]	; (10008588 <sms_ble_advertise+0x7c>)
10008534:	9301      	str	r3, [sp, #4]
10008536:	23c8      	movs	r3, #200	; 0xc8
10008538:	00db      	lsls	r3, r3, #3
1000853a:	9300      	str	r3, [sp, #0]
1000853c:	2300      	movs	r3, #0
1000853e:	2200      	movs	r2, #0
10008540:	2101      	movs	r1, #1
10008542:	2000      	movs	r0, #0
10008544:	4c11      	ldr	r4, [pc, #68]	; (1000858c <sms_ble_advertise+0x80>)
10008546:	47a0      	blx	r4
10008548:	1e04      	subs	r4, r0, #0
1000854a:	d107      	bne.n	1000855c <sms_ble_advertise+0x50>
    {
        DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
1000854c:	480a      	ldr	r0, [pc, #40]	; (10008578 <sms_ble_advertise+0x6c>)
1000854e:	4b0b      	ldr	r3, [pc, #44]	; (1000857c <sms_ble_advertise+0x70>)
10008550:	4798      	blx	r3
10008552:	480f      	ldr	r0, [pc, #60]	; (10008590 <sms_ble_advertise+0x84>)
10008554:	4b0b      	ldr	r3, [pc, #44]	; (10008584 <sms_ble_advertise+0x78>)
10008556:	4798      	blx	r3
        return AT_BLE_SUCCESS;
10008558:	2000      	movs	r0, #0
1000855a:	e007      	b.n	1000856c <sms_ble_advertise+0x60>
    } 
    else {
        DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
1000855c:	4806      	ldr	r0, [pc, #24]	; (10008578 <sms_ble_advertise+0x6c>)
1000855e:	4b07      	ldr	r3, [pc, #28]	; (1000857c <sms_ble_advertise+0x70>)
10008560:	4798      	blx	r3
10008562:	0021      	movs	r1, r4
10008564:	480b      	ldr	r0, [pc, #44]	; (10008594 <sms_ble_advertise+0x88>)
10008566:	4b07      	ldr	r3, [pc, #28]	; (10008584 <sms_ble_advertise+0x78>)
10008568:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000856a:	20e2      	movs	r0, #226	; 0xe2
}
1000856c:	b004      	add	sp, #16
1000856e:	bd10      	pop	{r4, pc}
10008570:	10016b76 	.word	0x10016b76
10008574:	1000cbc9 	.word	0x1000cbc9
10008578:	10013464 	.word	0x10013464
1000857c:	100123d9 	.word	0x100123d9
10008580:	10013684 	.word	0x10013684
10008584:	100122b9 	.word	0x100122b9
10008588:	0000028f 	.word	0x0000028f
1000858c:	1000e901 	.word	0x1000e901
10008590:	100136b8 	.word	0x100136b8
10008594:	100136e8 	.word	0x100136e8

10008598 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008598:	b530      	push	{r4, r5, lr}
1000859a:	b083      	sub	sp, #12
1000859c:	0005      	movs	r5, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_current_state == BLE_STATE_PAIRED) {
1000859e:	4b1a      	ldr	r3, [pc, #104]	; (10008608 <sms_ble_disconnected_fn+0x70>)
100085a0:	781b      	ldrb	r3, [r3, #0]
100085a2:	2b22      	cmp	r3, #34	; 0x22
100085a4:	d105      	bne.n	100085b2 <sms_ble_disconnected_fn+0x1a>
        sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
100085a6:	2001      	movs	r0, #1
100085a8:	4b18      	ldr	r3, [pc, #96]	; (1000860c <sms_ble_disconnected_fn+0x74>)
100085aa:	4798      	blx	r3
        sms_sensors_switch(false);
100085ac:	2000      	movs	r0, #0
100085ae:	4b18      	ldr	r3, [pc, #96]	; (10008610 <sms_ble_disconnected_fn+0x78>)
100085b0:	4798      	blx	r3
    }
    ble_current_state = BLE_STATE_DISCONNECTED;
100085b2:	4c15      	ldr	r4, [pc, #84]	; (10008608 <sms_ble_disconnected_fn+0x70>)
100085b4:	2311      	movs	r3, #17
100085b6:	7023      	strb	r3, [r4, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
100085b8:	4816      	ldr	r0, [pc, #88]	; (10008614 <sms_ble_disconnected_fn+0x7c>)
100085ba:	4b17      	ldr	r3, [pc, #92]	; (10008618 <sms_ble_disconnected_fn+0x80>)
100085bc:	4798      	blx	r3
100085be:	4b17      	ldr	r3, [pc, #92]	; (1000861c <sms_ble_disconnected_fn+0x84>)
100085c0:	7819      	ldrb	r1, [r3, #0]
100085c2:	b2c9      	uxtb	r1, r1
100085c4:	7822      	ldrb	r2, [r4, #0]
100085c6:	b2d2      	uxtb	r2, r2
100085c8:	4b15      	ldr	r3, [pc, #84]	; (10008620 <sms_ble_disconnected_fn+0x88>)
100085ca:	781b      	ldrb	r3, [r3, #0]
100085cc:	b2db      	uxtb	r3, r3
100085ce:	4815      	ldr	r0, [pc, #84]	; (10008624 <sms_ble_disconnected_fn+0x8c>)
100085d0:	7800      	ldrb	r0, [r0, #0]
100085d2:	9000      	str	r0, [sp, #0]
100085d4:	4814      	ldr	r0, [pc, #80]	; (10008628 <sms_ble_disconnected_fn+0x90>)
100085d6:	4c15      	ldr	r4, [pc, #84]	; (1000862c <sms_ble_disconnected_fn+0x94>)
100085d8:	47a0      	blx	r4
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
100085da:	78ab      	ldrb	r3, [r5, #2]
100085dc:	2b1a      	cmp	r3, #26
100085de:	d00b      	beq.n	100085f8 <sms_ble_disconnected_fn+0x60>
100085e0:	b2da      	uxtb	r2, r3
100085e2:	2a1a      	cmp	r2, #26
100085e4:	d804      	bhi.n	100085f0 <sms_ble_disconnected_fn+0x58>
100085e6:	2b05      	cmp	r3, #5
100085e8:	d006      	beq.n	100085f8 <sms_ble_disconnected_fn+0x60>
100085ea:	2b08      	cmp	r3, #8
100085ec:	d107      	bne.n	100085fe <sms_ble_disconnected_fn+0x66>
100085ee:	e003      	b.n	100085f8 <sms_ble_disconnected_fn+0x60>
100085f0:	2b29      	cmp	r3, #41	; 0x29
100085f2:	d001      	beq.n	100085f8 <sms_ble_disconnected_fn+0x60>
100085f4:	2b3b      	cmp	r3, #59	; 0x3b
100085f6:	d102      	bne.n	100085fe <sms_ble_disconnected_fn+0x66>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
100085f8:	4b0d      	ldr	r3, [pc, #52]	; (10008630 <sms_ble_disconnected_fn+0x98>)
100085fa:	4798      	blx	r3
        break;
100085fc:	e001      	b.n	10008602 <sms_ble_disconnected_fn+0x6a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
100085fe:	4b0d      	ldr	r3, [pc, #52]	; (10008634 <sms_ble_disconnected_fn+0x9c>)
10008600:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
10008602:	2000      	movs	r0, #0
10008604:	b003      	add	sp, #12
10008606:	bd30      	pop	{r4, r5, pc}
10008608:	10016b76 	.word	0x10016b76
1000860c:	1000d8fd 	.word	0x1000d8fd
10008610:	1000d8c5 	.word	0x1000d8c5
10008614:	10013464 	.word	0x10013464
10008618:	100123d9 	.word	0x100123d9
1000861c:	10016acc 	.word	0x10016acc
10008620:	10016ac4 	.word	0x10016ac4
10008624:	10016b77 	.word	0x10016b77
10008628:	1001372c 	.word	0x1001372c
1000862c:	100122b9 	.word	0x100122b9
10008630:	1000850d 	.word	0x1000850d
10008634:	10008341 	.word	0x10008341

10008638 <sms_ble_send_characteristic>:
    NULL, //ble_characteristic_write_cmd_cmp
    NULL //ble_read_authorize_request_handler
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008638:	b570      	push	{r4, r5, r6, lr}
1000863a:	b084      	sub	sp, #16
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    ble_current_state = BLE_STATE_INDICATING;
1000863c:	2223      	movs	r2, #35	; 0x23
1000863e:	4b3b      	ldr	r3, [pc, #236]	; (1000872c <sms_ble_send_characteristic+0xf4>)
10008640:	701a      	strb	r2, [r3, #0]

    
    sms_ble_send_cnt++;
10008642:	4a3b      	ldr	r2, [pc, #236]	; (10008730 <sms_ble_send_characteristic+0xf8>)
10008644:	8813      	ldrh	r3, [r2, #0]
10008646:	3301      	adds	r3, #1
10008648:	8013      	strh	r3, [r2, #0]
    
    switch(ch) {
1000864a:	2801      	cmp	r0, #1
1000864c:	d017      	beq.n	1000867e <sms_ble_send_characteristic+0x46>
1000864e:	2800      	cmp	r0, #0
10008650:	d002      	beq.n	10008658 <sms_ble_send_characteristic+0x20>
10008652:	2802      	cmp	r0, #2
10008654:	d027      	beq.n	100086a6 <sms_ble_send_characteristic+0x6e>
10008656:	e042      	b.n	100086de <sms_ble_send_characteristic+0xa6>
        case BLE_CHAR_BUTTON0:
        sms_button_char_value[btn0_instance.id] = ((sms_button_char_value[btn0_instance.id] >= 0x7f) ? 0 : (sms_button_char_value[btn0_instance.id] + 1));
10008658:	4b36      	ldr	r3, [pc, #216]	; (10008734 <sms_ble_send_characteristic+0xfc>)
1000865a:	781b      	ldrb	r3, [r3, #0]
1000865c:	0059      	lsls	r1, r3, #1
1000865e:	4a36      	ldr	r2, [pc, #216]	; (10008738 <sms_ble_send_characteristic+0x100>)
10008660:	5a89      	ldrh	r1, [r1, r2]
10008662:	2200      	movs	r2, #0
10008664:	297e      	cmp	r1, #126	; 0x7e
10008666:	d801      	bhi.n	1000866c <sms_ble_send_characteristic+0x34>
10008668:	3101      	adds	r1, #1
1000866a:	b28a      	uxth	r2, r1
1000866c:	005b      	lsls	r3, r3, #1
1000866e:	4932      	ldr	r1, [pc, #200]	; (10008738 <sms_ble_send_characteristic+0x100>)
10008670:	525a      	strh	r2, [r3, r1]
        send_val[0] = sms_button_char_value[btn0_instance.id];
10008672:	ab01      	add	r3, sp, #4
10008674:	701a      	strb	r2, [r3, #0]
        val_handle = sms_button_service_handler.serv_chars.char_val_handle;
10008676:	4b31      	ldr	r3, [pc, #196]	; (1000873c <sms_ble_send_characteristic+0x104>)
10008678:	8a9d      	ldrh	r5, [r3, #20]
        length = 1;
1000867a:	2201      	movs	r2, #1
        break;
1000867c:	e031      	b.n	100086e2 <sms_ble_send_characteristic+0xaa>
        
        case BLE_CHAR_BUTTON1:
        sms_button_char_value[btn1_instance.id] = ((sms_button_char_value[btn1_instance.id] >= 0xff) ? 0 : (sms_button_char_value[btn1_instance.id] + 1));
1000867e:	4b30      	ldr	r3, [pc, #192]	; (10008740 <sms_ble_send_characteristic+0x108>)
10008680:	781a      	ldrb	r2, [r3, #0]
10008682:	0051      	lsls	r1, r2, #1
10008684:	4b2c      	ldr	r3, [pc, #176]	; (10008738 <sms_ble_send_characteristic+0x100>)
10008686:	5ac9      	ldrh	r1, [r1, r3]
10008688:	2300      	movs	r3, #0
1000868a:	29fe      	cmp	r1, #254	; 0xfe
1000868c:	d801      	bhi.n	10008692 <sms_ble_send_characteristic+0x5a>
1000868e:	3101      	adds	r1, #1
10008690:	b28b      	uxth	r3, r1
10008692:	0052      	lsls	r2, r2, #1
10008694:	4928      	ldr	r1, [pc, #160]	; (10008738 <sms_ble_send_characteristic+0x100>)
10008696:	5253      	strh	r3, [r2, r1]
        send_val[0] = sms_button_char_value[btn1_instance.id] + 0x80;
10008698:	3b80      	subs	r3, #128	; 0x80
1000869a:	aa01      	add	r2, sp, #4
1000869c:	7013      	strb	r3, [r2, #0]
        val_handle = sms_button_service_handler.serv_chars.char_val_handle;
1000869e:	4b27      	ldr	r3, [pc, #156]	; (1000873c <sms_ble_send_characteristic+0x104>)
100086a0:	8a9d      	ldrh	r5, [r3, #20]
        length = 1;
100086a2:	2201      	movs	r2, #1
        break;
100086a4:	e01d      	b.n	100086e2 <sms_ble_send_characteristic+0xaa>
        
        case BLE_CHAR_PRESSURE:
        send_val[0] = (uint8_t)(ms58_device.temperature & 0xff);
100086a6:	4927      	ldr	r1, [pc, #156]	; (10008744 <sms_ble_send_characteristic+0x10c>)
100086a8:	6a0a      	ldr	r2, [r1, #32]
100086aa:	ab01      	add	r3, sp, #4
100086ac:	701a      	strb	r2, [r3, #0]
        send_val[1] = (uint8_t)((ms58_device.temperature >> 8) & 0xff);
100086ae:	6a0a      	ldr	r2, [r1, #32]
100086b0:	1212      	asrs	r2, r2, #8
100086b2:	705a      	strb	r2, [r3, #1]
        send_val[2] = (uint8_t)((ms58_device.temperature >> 16) & 0xff);
100086b4:	6a0a      	ldr	r2, [r1, #32]
100086b6:	1412      	asrs	r2, r2, #16
100086b8:	709a      	strb	r2, [r3, #2]
        send_val[3] = (uint8_t)((ms58_device.temperature >> 24) & 0xff);
100086ba:	6a0a      	ldr	r2, [r1, #32]
100086bc:	1612      	asrs	r2, r2, #24
100086be:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)(ms58_device.pressure & 0xff);
100086c0:	69ca      	ldr	r2, [r1, #28]
100086c2:	711a      	strb	r2, [r3, #4]
        send_val[5] = (uint8_t)((ms58_device.pressure >> 8) & 0xff);
100086c4:	69ca      	ldr	r2, [r1, #28]
100086c6:	1212      	asrs	r2, r2, #8
100086c8:	715a      	strb	r2, [r3, #5]
        send_val[6] = (uint8_t)((ms58_device.pressure >> 16) & 0xff);
100086ca:	69ca      	ldr	r2, [r1, #28]
100086cc:	1412      	asrs	r2, r2, #16
100086ce:	719a      	strb	r2, [r3, #6]
        send_val[7] = (uint8_t)((ms58_device.pressure >> 24) & 0xff);
100086d0:	69ca      	ldr	r2, [r1, #28]
100086d2:	1612      	asrs	r2, r2, #24
100086d4:	71da      	strb	r2, [r3, #7]
        val_handle = sms_pressure_service_handler.serv_chars.char_val_handle;
100086d6:	4b1c      	ldr	r3, [pc, #112]	; (10008748 <sms_ble_send_characteristic+0x110>)
100086d8:	8a9d      	ldrh	r5, [r3, #20]
        length = 8;
100086da:	2208      	movs	r2, #8
        break;
100086dc:	e001      	b.n	100086e2 <sms_ble_send_characteristic+0xaa>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
100086de:	2200      	movs	r2, #0
};

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
100086e0:	2500      	movs	r5, #0
        
        case BLE_CHAR_IMU:
        break;
    }
    
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
100086e2:	b292      	uxth	r2, r2
100086e4:	a901      	add	r1, sp, #4
100086e6:	0028      	movs	r0, r5
100086e8:	4b18      	ldr	r3, [pc, #96]	; (1000874c <sms_ble_send_characteristic+0x114>)
100086ea:	4798      	blx	r3
100086ec:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
100086ee:	d11a      	bne.n	10008726 <sms_ble_send_characteristic+0xee>
        //for(uint8_t i = 0; i < AT_BLE_UUID_128_LEN; i++) {
        //DBG_LOG_CONT_DEV("%02x", sms_button_service_handler.serv_uuid.uuid[(i)]);
        //}
        //DBG_LOG_DEV("- char value handle: 0x%04x\r\n- char value: 0x%02x", sms_button_service_handler.serv_chars.char_val_handle, send_val);
        
        printf("\r\ncnt: %d", sms_ble_send_cnt);
100086f0:	4b0f      	ldr	r3, [pc, #60]	; (10008730 <sms_ble_send_characteristic+0xf8>)
100086f2:	8819      	ldrh	r1, [r3, #0]
100086f4:	4816      	ldr	r0, [pc, #88]	; (10008750 <sms_ble_send_characteristic+0x118>)
100086f6:	4b17      	ldr	r3, [pc, #92]	; (10008754 <sms_ble_send_characteristic+0x11c>)
100086f8:	4798      	blx	r3
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
100086fa:	2101      	movs	r1, #1
100086fc:	2002      	movs	r0, #2
100086fe:	4e16      	ldr	r6, [pc, #88]	; (10008758 <sms_ble_send_characteristic+0x120>)
10008700:	47b0      	blx	r6
#   if SMS_SENDING_WITH_ACK == true
        sms_ble_ind_retry = 0;
        status = at_ble_indication_send(sms_connection_handle, val_handle);
#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
10008702:	4b16      	ldr	r3, [pc, #88]	; (1000875c <sms_ble_send_characteristic+0x124>)
10008704:	8818      	ldrh	r0, [r3, #0]
10008706:	0029      	movs	r1, r5
10008708:	4b15      	ldr	r3, [pc, #84]	; (10008760 <sms_ble_send_characteristic+0x128>)
1000870a:	4798      	blx	r3
1000870c:	0004      	movs	r4, r0
#   endif
        gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000870e:	2100      	movs	r1, #0
10008710:	2002      	movs	r0, #2
10008712:	47b0      	blx	r6
        //register int n41 asm("sp");
        //register int n42 asm("lr");
        //register int n43 asm("r15");
        //printf("\r\n\@ sending: sp 0x%x, lr 0x%x", n41, n42);
        
        if(status == AT_BLE_SUCCESS) {
10008714:	2c00      	cmp	r4, #0
10008716:	d106      	bne.n	10008726 <sms_ble_send_characteristic+0xee>
            timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
10008718:	2201      	movs	r2, #1
1000871a:	4b12      	ldr	r3, [pc, #72]	; (10008764 <sms_ble_send_characteristic+0x12c>)
1000871c:	701a      	strb	r2, [r3, #0]
            sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000871e:	2164      	movs	r1, #100	; 0x64
10008720:	2001      	movs	r0, #1
10008722:	4b11      	ldr	r3, [pc, #68]	; (10008768 <sms_ble_send_characteristic+0x130>)
10008724:	4798      	blx	r3
        else {
            //#pragma TBD: handle sending error...
        }
    }
    return status;
}
10008726:	0020      	movs	r0, r4
10008728:	b004      	add	sp, #16
1000872a:	bd70      	pop	{r4, r5, r6, pc}
1000872c:	10016b76 	.word	0x10016b76
10008730:	10016be4 	.word	0x10016be4
10008734:	10016ac0 	.word	0x10016ac0
10008738:	10016ac8 	.word	0x10016ac8
1000873c:	10016ad0 	.word	0x10016ad0
10008740:	10016b24 	.word	0x10016b24
10008744:	10016b48 	.word	0x10016b48
10008748:	10016b94 	.word	0x10016b94
1000874c:	1000f1e5 	.word	0x1000f1e5
10008750:	10013780 	.word	0x10013780
10008754:	100122b9 	.word	0x100122b9
10008758:	1000a259 	.word	0x1000a259
1000875c:	10016b20 	.word	0x10016b20
10008760:	1000f385 	.word	0x1000f385
10008764:	10016b77 	.word	0x10016b77
10008768:	100093bd 	.word	0x100093bd

1000876c <sms_ble_primary_service_define>:


at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
1000876c:	b510      	push	{r4, lr}
1000876e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10008770:	0001      	movs	r1, r0
10008772:	3112      	adds	r1, #18
10008774:	2301      	movs	r3, #1
10008776:	9301      	str	r3, [sp, #4]
10008778:	0003      	movs	r3, r0
1000877a:	3314      	adds	r3, #20
1000877c:	9300      	str	r3, [sp, #0]
1000877e:	2300      	movs	r3, #0
10008780:	2200      	movs	r2, #0
10008782:	4c02      	ldr	r4, [pc, #8]	; (1000878c <sms_ble_primary_service_define+0x20>)
10008784:	47a0      	blx	r4
10008786:	b002      	add	sp, #8
10008788:	bd10      	pop	{r4, pc}
1000878a:	46c0      	nop			; (mov r8, r8)
1000878c:	1000f1c5 	.word	0x1000f1c5

10008790 <sms_button_bt0_callback>:
        gpio_disable_callback(btn1_instance.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008790:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_0_PIN);
    sms_current_interrupt.source = INT_BTN0;
10008792:	2201      	movs	r2, #1
10008794:	4b04      	ldr	r3, [pc, #16]	; (100087a8 <sms_button_bt0_callback+0x18>)
10008796:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn0_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008798:	4b04      	ldr	r3, [pc, #16]	; (100087ac <sms_button_bt0_callback+0x1c>)
1000879a:	7858      	ldrb	r0, [r3, #1]
1000879c:	2300      	movs	r3, #0
1000879e:	2200      	movs	r2, #0
100087a0:	2102      	movs	r1, #2
100087a2:	4c03      	ldr	r4, [pc, #12]	; (100087b0 <sms_button_bt0_callback+0x20>)
100087a4:	47a0      	blx	r4
}
100087a6:	bd10      	pop	{r4, pc}
100087a8:	10016b70 	.word	0x10016b70
100087ac:	10016ac0 	.word	0x10016ac0
100087b0:	1000d2c1 	.word	0x1000d2c1

100087b4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
100087b4:	b510      	push	{r4, lr}
    //gpio_disable_callback(SMS_BTN_1_PIN);
    sms_current_interrupt.source = INT_BTN1;
100087b6:	2202      	movs	r2, #2
100087b8:	4b04      	ldr	r3, [pc, #16]	; (100087cc <sms_button_bt1_callback+0x18>)
100087ba:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
100087bc:	4b04      	ldr	r3, [pc, #16]	; (100087d0 <sms_button_bt1_callback+0x1c>)
100087be:	7858      	ldrb	r0, [r3, #1]
100087c0:	2300      	movs	r3, #0
100087c2:	2200      	movs	r2, #0
100087c4:	2102      	movs	r1, #2
100087c6:	4c03      	ldr	r4, [pc, #12]	; (100087d4 <sms_button_bt1_callback+0x20>)
100087c8:	47a0      	blx	r4
}
100087ca:	bd10      	pop	{r4, pc}
100087cc:	10016b70 	.word	0x10016b70
100087d0:	10016b24 	.word	0x10016b24
100087d4:	1000d2c1 	.word	0x1000d2c1

100087d8 <sms_button_configure_gpio>:
/* Callback functions --> doing things                                  */
/************************************************************************/

/* Initialize gpio for button inputs */
void sms_button_configure_gpio(void)
{
100087d8:	b510      	push	{r4, lr}
100087da:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
100087dc:	ac01      	add	r4, sp, #4
100087de:	0020      	movs	r0, r4
100087e0:	4b20      	ldr	r3, [pc, #128]	; (10008864 <sms_button_configure_gpio+0x8c>)
100087e2:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
100087e4:	2300      	movs	r3, #0
100087e6:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
100087e8:	3302      	adds	r3, #2
100087ea:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
100087ec:	3b01      	subs	r3, #1
100087ee:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn0_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
100087f0:	4b1d      	ldr	r3, [pc, #116]	; (10008868 <sms_button_configure_gpio+0x90>)
100087f2:	7858      	ldrb	r0, [r3, #1]
100087f4:	0021      	movs	r1, r4
100087f6:	4b1d      	ldr	r3, [pc, #116]	; (1000886c <sms_button_configure_gpio+0x94>)
100087f8:	4798      	blx	r3
100087fa:	2800      	cmp	r0, #0
100087fc:	d005      	beq.n	1000880a <sms_button_configure_gpio+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
100087fe:	481c      	ldr	r0, [pc, #112]	; (10008870 <sms_button_configure_gpio+0x98>)
10008800:	4b1c      	ldr	r3, [pc, #112]	; (10008874 <sms_button_configure_gpio+0x9c>)
10008802:	4798      	blx	r3
10008804:	481c      	ldr	r0, [pc, #112]	; (10008878 <sms_button_configure_gpio+0xa0>)
10008806:	4b1d      	ldr	r3, [pc, #116]	; (1000887c <sms_button_configure_gpio+0xa4>)
10008808:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
1000880a:	ac01      	add	r4, sp, #4
1000880c:	0020      	movs	r0, r4
1000880e:	4b15      	ldr	r3, [pc, #84]	; (10008864 <sms_button_configure_gpio+0x8c>)
10008810:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008812:	2300      	movs	r3, #0
10008814:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008816:	3302      	adds	r3, #2
10008818:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
1000881a:	3b01      	subs	r3, #1
1000881c:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(btn1_instance.gpio_pin, &config_gpio_pin) != STATUS_OK) {
1000881e:	4b18      	ldr	r3, [pc, #96]	; (10008880 <sms_button_configure_gpio+0xa8>)
10008820:	7858      	ldrb	r0, [r3, #1]
10008822:	0021      	movs	r1, r4
10008824:	4b11      	ldr	r3, [pc, #68]	; (1000886c <sms_button_configure_gpio+0x94>)
10008826:	4798      	blx	r3
10008828:	2800      	cmp	r0, #0
1000882a:	d005      	beq.n	10008838 <sms_button_configure_gpio+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
1000882c:	4810      	ldr	r0, [pc, #64]	; (10008870 <sms_button_configure_gpio+0x98>)
1000882e:	4b11      	ldr	r3, [pc, #68]	; (10008874 <sms_button_configure_gpio+0x9c>)
10008830:	4798      	blx	r3
10008832:	4814      	ldr	r0, [pc, #80]	; (10008884 <sms_button_configure_gpio+0xac>)
10008834:	4b11      	ldr	r3, [pc, #68]	; (1000887c <sms_button_configure_gpio+0xa4>)
10008836:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008838:	ac01      	add	r4, sp, #4
1000883a:	0020      	movs	r0, r4
1000883c:	4b09      	ldr	r3, [pc, #36]	; (10008864 <sms_button_configure_gpio+0x8c>)
1000883e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008840:	2300      	movs	r3, #0
10008842:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008844:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008846:	0021      	movs	r1, r4
10008848:	2017      	movs	r0, #23
1000884a:	4b08      	ldr	r3, [pc, #32]	; (1000886c <sms_button_configure_gpio+0x94>)
1000884c:	4798      	blx	r3
1000884e:	2800      	cmp	r0, #0
10008850:	d005      	beq.n	1000885e <sms_button_configure_gpio+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008852:	4807      	ldr	r0, [pc, #28]	; (10008870 <sms_button_configure_gpio+0x98>)
10008854:	4b07      	ldr	r3, [pc, #28]	; (10008874 <sms_button_configure_gpio+0x9c>)
10008856:	4798      	blx	r3
10008858:	480b      	ldr	r0, [pc, #44]	; (10008888 <sms_button_configure_gpio+0xb0>)
1000885a:	4b08      	ldr	r3, [pc, #32]	; (1000887c <sms_button_configure_gpio+0xa4>)
1000885c:	4798      	blx	r3
    }
}
1000885e:	b002      	add	sp, #8
10008860:	bd10      	pop	{r4, pc}
10008862:	46c0      	nop			; (mov r8, r8)
10008864:	10009ff1 	.word	0x10009ff1
10008868:	10016ac0 	.word	0x10016ac0
1000886c:	1000a001 	.word	0x1000a001
10008870:	10013464 	.word	0x10013464
10008874:	100123d9 	.word	0x100123d9
10008878:	10013800 	.word	0x10013800
1000887c:	100122b9 	.word	0x100122b9
10008880:	10016b24 	.word	0x10016b24
10008884:	10013838 	.word	0x10013838
10008888:	10013870 	.word	0x10013870

1000888c <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
1000888c:	b510      	push	{r4, lr}
    /* Button0 callback */
    gpio_register_callback(btn0_instance.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
1000888e:	4b06      	ldr	r3, [pc, #24]	; (100088a8 <sms_button_register_callbacks+0x1c>)
10008890:	7858      	ldrb	r0, [r3, #1]
10008892:	2202      	movs	r2, #2
10008894:	4905      	ldr	r1, [pc, #20]	; (100088ac <sms_button_register_callbacks+0x20>)
10008896:	4c06      	ldr	r4, [pc, #24]	; (100088b0 <sms_button_register_callbacks+0x24>)
10008898:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(btn1_instance.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
1000889a:	4b06      	ldr	r3, [pc, #24]	; (100088b4 <sms_button_register_callbacks+0x28>)
1000889c:	7858      	ldrb	r0, [r3, #1]
1000889e:	2202      	movs	r2, #2
100088a0:	4905      	ldr	r1, [pc, #20]	; (100088b8 <sms_button_register_callbacks+0x2c>)
100088a2:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
100088a4:	bd10      	pop	{r4, pc}
100088a6:	46c0      	nop			; (mov r8, r8)
100088a8:	10016ac0 	.word	0x10016ac0
100088ac:	10008791 	.word	0x10008791
100088b0:	1000a431 	.word	0x1000a431
100088b4:	10016b24 	.word	0x10016b24
100088b8:	100087b5 	.word	0x100087b5

100088bc <sms_button_get_state>:
    gpio_disable_callback(SMS_BTN_1_PIN);
}

/* Get current buttons state */
sms_button_state_t sms_button_get_state(void)
{
100088bc:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
100088be:	201f      	movs	r0, #31
100088c0:	4d0c      	ldr	r5, [pc, #48]	; (100088f4 <sms_button_get_state+0x38>)
100088c2:	47a8      	blx	r5
100088c4:	0004      	movs	r4, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
100088c6:	201d      	movs	r0, #29
100088c8:	47a8      	blx	r5
100088ca:	0005      	movs	r5, r0
100088cc:	0006      	movs	r6, r0
    DBG_LOG("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
100088ce:	480a      	ldr	r0, [pc, #40]	; (100088f8 <sms_button_get_state+0x3c>)
100088d0:	4b0a      	ldr	r3, [pc, #40]	; (100088fc <sms_button_get_state+0x40>)
100088d2:	4798      	blx	r3
100088d4:	0022      	movs	r2, r4
100088d6:	0029      	movs	r1, r5
100088d8:	4809      	ldr	r0, [pc, #36]	; (10008900 <sms_button_get_state+0x44>)
100088da:	4b0a      	ldr	r3, [pc, #40]	; (10008904 <sms_button_get_state+0x48>)
100088dc:	4798      	blx	r3
    if(b0 && b1) return BUTTON_STATE_BOTH;
100088de:	2c00      	cmp	r4, #0
100088e0:	d004      	beq.n	100088ec <sms_button_get_state+0x30>
100088e2:	2003      	movs	r0, #3
100088e4:	2d00      	cmp	r5, #0
100088e6:	d104      	bne.n	100088f2 <sms_button_get_state+0x36>
    else if(b0 && !b1) return BUTTON_STATE_B0;
100088e8:	3802      	subs	r0, #2
100088ea:	e002      	b.n	100088f2 <sms_button_get_state+0x36>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
100088ec:	1e70      	subs	r0, r6, #1
100088ee:	4186      	sbcs	r6, r0
100088f0:	0070      	lsls	r0, r6, #1
}
100088f2:	bd70      	pop	{r4, r5, r6, pc}
100088f4:	1000a1b9 	.word	0x1000a1b9
100088f8:	10013464 	.word	0x10013464
100088fc:	100123d9 	.word	0x100123d9
10008900:	100138b8 	.word	0x100138b8
10008904:	100122b9 	.word	0x100122b9

10008908 <sms_button_fn>:
/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
/* BUTTON_0 */
int sms_button_fn(enum sms_btn_ids btn)
{
10008908:	b570      	push	{r4, r5, r6, lr}
1000890a:	0005      	movs	r5, r0
    button_previous_state = button_current_state;
1000890c:	4c65      	ldr	r4, [pc, #404]	; (10008aa4 <sms_button_fn+0x19c>)
1000890e:	7823      	ldrb	r3, [r4, #0]
10008910:	b2db      	uxtb	r3, r3
10008912:	4a65      	ldr	r2, [pc, #404]	; (10008aa8 <sms_button_fn+0x1a0>)
10008914:	7013      	strb	r3, [r2, #0]
    button_current_state = sms_button_get_state();
10008916:	4b65      	ldr	r3, [pc, #404]	; (10008aac <sms_button_fn+0x1a4>)
10008918:	4798      	blx	r3
1000891a:	7020      	strb	r0, [r4, #0]
    
    if(btn == SMS_BTN_0) sms_monitor_states("[sms_button_fn]-0");
1000891c:	2d00      	cmp	r5, #0
1000891e:	d103      	bne.n	10008928 <sms_button_fn+0x20>
10008920:	4863      	ldr	r0, [pc, #396]	; (10008ab0 <sms_button_fn+0x1a8>)
10008922:	4b64      	ldr	r3, [pc, #400]	; (10008ab4 <sms_button_fn+0x1ac>)
10008924:	4798      	blx	r3
10008926:	e005      	b.n	10008934 <sms_button_fn+0x2c>
    else if(btn == SMS_BTN_1) sms_monitor_states("[sms_button_fn]-1");
10008928:	2d01      	cmp	r5, #1
1000892a:	d000      	beq.n	1000892e <sms_button_fn+0x26>
1000892c:	e0ac      	b.n	10008a88 <sms_button_fn+0x180>
1000892e:	4862      	ldr	r0, [pc, #392]	; (10008ab8 <sms_button_fn+0x1b0>)
10008930:	4b60      	ldr	r3, [pc, #384]	; (10008ab4 <sms_button_fn+0x1ac>)
10008932:	4798      	blx	r3
    else return -1;
    
    switch(button_current_state) {
10008934:	4b5b      	ldr	r3, [pc, #364]	; (10008aa4 <sms_button_fn+0x19c>)
10008936:	781b      	ldrb	r3, [r3, #0]
10008938:	b2db      	uxtb	r3, r3
1000893a:	2b01      	cmp	r3, #1
1000893c:	d007      	beq.n	1000894e <sms_button_fn+0x46>
1000893e:	2b00      	cmp	r3, #0
10008940:	d100      	bne.n	10008944 <sms_button_fn+0x3c>
10008942:	e09c      	b.n	10008a7e <sms_button_fn+0x176>
10008944:	2b02      	cmp	r3, #2
10008946:	d043      	beq.n	100089d0 <sms_button_fn+0xc8>
10008948:	2b03      	cmp	r3, #3
1000894a:	d079      	beq.n	10008a40 <sms_button_fn+0x138>
1000894c:	e09f      	b.n	10008a8e <sms_button_fn+0x186>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_current_state) {
1000894e:	4b5b      	ldr	r3, [pc, #364]	; (10008abc <sms_button_fn+0x1b4>)
10008950:	781b      	ldrb	r3, [r3, #0]
10008952:	b2db      	uxtb	r3, r3
10008954:	2b22      	cmp	r3, #34	; 0x22
10008956:	d012      	beq.n	1000897e <sms_button_fn+0x76>
10008958:	2b23      	cmp	r3, #35	; 0x23
1000895a:	d027      	beq.n	100089ac <sms_button_fn+0xa4>
1000895c:	2b00      	cmp	r3, #0
1000895e:	d12e      	bne.n	100089be <sms_button_fn+0xb6>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10008960:	2201      	movs	r2, #1
10008962:	4b57      	ldr	r3, [pc, #348]	; (10008ac0 <sms_button_fn+0x1b8>)
10008964:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008966:	2300      	movs	r3, #0
10008968:	4a56      	ldr	r2, [pc, #344]	; (10008ac4 <sms_button_fn+0x1bc>)
1000896a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
1000896c:	4a56      	ldr	r2, [pc, #344]	; (10008ac8 <sms_button_fn+0x1c0>)
1000896e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10008970:	2200      	movs	r2, #0
10008972:	21fa      	movs	r1, #250	; 0xfa
10008974:	2001      	movs	r0, #1
10008976:	4b55      	ldr	r3, [pc, #340]	; (10008acc <sms_button_fn+0x1c4>)
10008978:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
1000897a:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
1000897c:	e091      	b.n	10008aa2 <sms_button_fn+0x19a>
            
            case BLE_STATE_PAIRED:
            timer1_current_mode = TIMER1_MODE_NONE;
1000897e:	2300      	movs	r3, #0
10008980:	4a4f      	ldr	r2, [pc, #316]	; (10008ac0 <sms_button_fn+0x1b8>)
10008982:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008984:	4a4f      	ldr	r2, [pc, #316]	; (10008ac4 <sms_button_fn+0x1bc>)
10008986:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
10008988:	4b51      	ldr	r3, [pc, #324]	; (10008ad0 <sms_button_fn+0x1c8>)
1000898a:	781b      	ldrb	r3, [r3, #0]
1000898c:	42ab      	cmp	r3, r5
1000898e:	d104      	bne.n	1000899a <sms_button_fn+0x92>
10008990:	2000      	movs	r0, #0
10008992:	4b50      	ldr	r3, [pc, #320]	; (10008ad4 <sms_button_fn+0x1cc>)
10008994:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008996:	2000      	movs	r0, #0
10008998:	e083      	b.n	10008aa2 <sms_button_fn+0x19a>
            case BLE_STATE_PAIRED:
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
1000899a:	4b4f      	ldr	r3, [pc, #316]	; (10008ad8 <sms_button_fn+0x1d0>)
1000899c:	781b      	ldrb	r3, [r3, #0]
1000899e:	42ab      	cmp	r3, r5
100089a0:	d177      	bne.n	10008a92 <sms_button_fn+0x18a>
100089a2:	2001      	movs	r0, #1
100089a4:	4b4b      	ldr	r3, [pc, #300]	; (10008ad4 <sms_button_fn+0x1cc>)
100089a6:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100089a8:	2000      	movs	r0, #0
100089aa:	e07a      	b.n	10008aa2 <sms_button_fn+0x19a>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
100089ac:	484b      	ldr	r0, [pc, #300]	; (10008adc <sms_button_fn+0x1d4>)
100089ae:	4b4c      	ldr	r3, [pc, #304]	; (10008ae0 <sms_button_fn+0x1d8>)
100089b0:	4798      	blx	r3
100089b2:	484c      	ldr	r0, [pc, #304]	; (10008ae4 <sms_button_fn+0x1dc>)
100089b4:	4b4c      	ldr	r3, [pc, #304]	; (10008ae8 <sms_button_fn+0x1e0>)
100089b6:	4798      	blx	r3
            return -1;
100089b8:	2001      	movs	r0, #1
100089ba:	4240      	negs	r0, r0
100089bc:	e071      	b.n	10008aa2 <sms_button_fn+0x19a>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
100089be:	4847      	ldr	r0, [pc, #284]	; (10008adc <sms_button_fn+0x1d4>)
100089c0:	4b47      	ldr	r3, [pc, #284]	; (10008ae0 <sms_button_fn+0x1d8>)
100089c2:	4798      	blx	r3
100089c4:	4849      	ldr	r0, [pc, #292]	; (10008aec <sms_button_fn+0x1e4>)
100089c6:	4b48      	ldr	r3, [pc, #288]	; (10008ae8 <sms_button_fn+0x1e0>)
100089c8:	4798      	blx	r3
            return -1;
100089ca:	2001      	movs	r0, #1
100089cc:	4240      	negs	r0, r0
100089ce:	e068      	b.n	10008aa2 <sms_button_fn+0x19a>
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_current_state) {
100089d0:	4b3a      	ldr	r3, [pc, #232]	; (10008abc <sms_button_fn+0x1b4>)
100089d2:	781b      	ldrb	r3, [r3, #0]
100089d4:	b2db      	uxtb	r3, r3
100089d6:	2b22      	cmp	r3, #34	; 0x22
100089d8:	d012      	beq.n	10008a00 <sms_button_fn+0xf8>
100089da:	2b23      	cmp	r3, #35	; 0x23
100089dc:	d027      	beq.n	10008a2e <sms_button_fn+0x126>
100089de:	2b00      	cmp	r3, #0
100089e0:	d15a      	bne.n	10008a98 <sms_button_fn+0x190>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
100089e2:	2201      	movs	r2, #1
100089e4:	4b36      	ldr	r3, [pc, #216]	; (10008ac0 <sms_button_fn+0x1b8>)
100089e6:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
100089e8:	2300      	movs	r3, #0
100089ea:	4a36      	ldr	r2, [pc, #216]	; (10008ac4 <sms_button_fn+0x1bc>)
100089ec:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
100089ee:	4a36      	ldr	r2, [pc, #216]	; (10008ac8 <sms_button_fn+0x1c0>)
100089f0:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
100089f2:	2200      	movs	r2, #0
100089f4:	21fa      	movs	r1, #250	; 0xfa
100089f6:	2001      	movs	r0, #1
100089f8:	4b34      	ldr	r3, [pc, #208]	; (10008acc <sms_button_fn+0x1c4>)
100089fa:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
100089fc:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
100089fe:	e050      	b.n	10008aa2 <sms_button_fn+0x19a>
            
            case BLE_STATE_PAIRED:
            timer1_current_mode = TIMER1_MODE_NONE;
10008a00:	2300      	movs	r3, #0
10008a02:	4a2f      	ldr	r2, [pc, #188]	; (10008ac0 <sms_button_fn+0x1b8>)
10008a04:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008a06:	4a2f      	ldr	r2, [pc, #188]	; (10008ac4 <sms_button_fn+0x1bc>)
10008a08:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
10008a0a:	4b31      	ldr	r3, [pc, #196]	; (10008ad0 <sms_button_fn+0x1c8>)
10008a0c:	781b      	ldrb	r3, [r3, #0]
10008a0e:	42ab      	cmp	r3, r5
10008a10:	d104      	bne.n	10008a1c <sms_button_fn+0x114>
10008a12:	2000      	movs	r0, #0
10008a14:	4b2f      	ldr	r3, [pc, #188]	; (10008ad4 <sms_button_fn+0x1cc>)
10008a16:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a18:	2000      	movs	r0, #0
10008a1a:	e042      	b.n	10008aa2 <sms_button_fn+0x19a>
            case BLE_STATE_PAIRED:
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
10008a1c:	4b2e      	ldr	r3, [pc, #184]	; (10008ad8 <sms_button_fn+0x1d0>)
10008a1e:	781b      	ldrb	r3, [r3, #0]
10008a20:	42ab      	cmp	r3, r5
10008a22:	d13c      	bne.n	10008a9e <sms_button_fn+0x196>
10008a24:	2001      	movs	r0, #1
10008a26:	4b2b      	ldr	r3, [pc, #172]	; (10008ad4 <sms_button_fn+0x1cc>)
10008a28:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a2a:	2000      	movs	r0, #0
10008a2c:	e039      	b.n	10008aa2 <sms_button_fn+0x19a>
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
            else return -1;
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
10008a2e:	482b      	ldr	r0, [pc, #172]	; (10008adc <sms_button_fn+0x1d4>)
10008a30:	4b2b      	ldr	r3, [pc, #172]	; (10008ae0 <sms_button_fn+0x1d8>)
10008a32:	4798      	blx	r3
10008a34:	482b      	ldr	r0, [pc, #172]	; (10008ae4 <sms_button_fn+0x1dc>)
10008a36:	4b2c      	ldr	r3, [pc, #176]	; (10008ae8 <sms_button_fn+0x1e0>)
10008a38:	4798      	blx	r3
            return -1;
10008a3a:	2001      	movs	r0, #1
10008a3c:	4240      	negs	r0, r0
10008a3e:	e030      	b.n	10008aa2 <sms_button_fn+0x19a>
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_current_state == BLE_STATE_POWEROFF) {
10008a40:	4b1e      	ldr	r3, [pc, #120]	; (10008abc <sms_button_fn+0x1b4>)
10008a42:	781b      	ldrb	r3, [r3, #0]
10008a44:	2b00      	cmp	r3, #0
10008a46:	d108      	bne.n	10008a5a <sms_button_fn+0x152>
            timer1_current_mode = TIMER1_MODE_NONE;
10008a48:	4a1d      	ldr	r2, [pc, #116]	; (10008ac0 <sms_button_fn+0x1b8>)
10008a4a:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008a4c:	4a1d      	ldr	r2, [pc, #116]	; (10008ac4 <sms_button_fn+0x1bc>)
10008a4e:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
10008a50:	2201      	movs	r2, #1
10008a52:	4b27      	ldr	r3, [pc, #156]	; (10008af0 <sms_button_fn+0x1e8>)
10008a54:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a56:	2000      	movs	r0, #0
10008a58:	e023      	b.n	10008aa2 <sms_button_fn+0x19a>
            ulp_ready = true;
            //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
            //release_sleep_lock();
        }
        else {
            sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
10008a5a:	2001      	movs	r0, #1
10008a5c:	4b25      	ldr	r3, [pc, #148]	; (10008af4 <sms_button_fn+0x1ec>)
10008a5e:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10008a60:	2203      	movs	r2, #3
10008a62:	4b17      	ldr	r3, [pc, #92]	; (10008ac0 <sms_button_fn+0x1b8>)
10008a64:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008a66:	2300      	movs	r3, #0
10008a68:	4a16      	ldr	r2, [pc, #88]	; (10008ac4 <sms_button_fn+0x1bc>)
10008a6a:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008a6c:	4a16      	ldr	r2, [pc, #88]	; (10008ac8 <sms_button_fn+0x1c0>)
10008a6e:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10008a70:	2200      	movs	r2, #0
10008a72:	21fa      	movs	r1, #250	; 0xfa
10008a74:	2001      	movs	r0, #1
10008a76:	4b15      	ldr	r3, [pc, #84]	; (10008acc <sms_button_fn+0x1c4>)
10008a78:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a7a:	2000      	movs	r0, #0
10008a7c:	e011      	b.n	10008aa2 <sms_button_fn+0x19a>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
10008a7e:	2201      	movs	r2, #1
10008a80:	4b1b      	ldr	r3, [pc, #108]	; (10008af0 <sms_button_fn+0x1e8>)
10008a82:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a84:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008a86:	e00c      	b.n	10008aa2 <sms_button_fn+0x19a>
    button_previous_state = button_current_state;
    button_current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_states("[sms_button_fn]-1");
    else return -1;
10008a88:	2001      	movs	r0, #1
10008a8a:	4240      	negs	r0, r0
10008a8c:	e009      	b.n	10008aa2 <sms_button_fn+0x19a>
        ulp_ready = true;
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008a8e:	2000      	movs	r0, #0
10008a90:	e007      	b.n	10008aa2 <sms_button_fn+0x19a>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
            else return -1;
10008a92:	2001      	movs	r0, #1
10008a94:	4240      	negs	r0, r0
10008a96:	e004      	b.n	10008aa2 <sms_button_fn+0x19a>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            return -1;
10008a98:	2001      	movs	r0, #1
10008a9a:	4240      	negs	r0, r0
10008a9c:	e001      	b.n	10008aa2 <sms_button_fn+0x19a>
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            if(btn == btn0_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON0);
            else if(btn == btn1_instance.id) sms_ble_send_characteristic(BLE_CHAR_BUTTON1);
            else return -1;
10008a9e:	2001      	movs	r0, #1
10008aa0:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
10008aa2:	bd70      	pop	{r4, r5, r6, pc}
10008aa4:	10016acc 	.word	0x10016acc
10008aa8:	10016b84 	.word	0x10016b84
10008aac:	100088bd 	.word	0x100088bd
10008ab0:	100138e4 	.word	0x100138e4
10008ab4:	1000d861 	.word	0x1000d861
10008ab8:	100138f8 	.word	0x100138f8
10008abc:	10016b76 	.word	0x10016b76
10008ac0:	10016ac4 	.word	0x10016ac4
10008ac4:	10016b77 	.word	0x10016b77
10008ac8:	10016be6 	.word	0x10016be6
10008acc:	100093bd 	.word	0x100093bd
10008ad0:	10016ac0 	.word	0x10016ac0
10008ad4:	10008639 	.word	0x10008639
10008ad8:	10016b24 	.word	0x10016b24
10008adc:	10013464 	.word	0x10013464
10008ae0:	100123d9 	.word	0x100123d9
10008ae4:	1001390c 	.word	0x1001390c
10008ae8:	100122b9 	.word	0x100122b9
10008aec:	10013930 	.word	0x10013930
10008af0:	10016ace 	.word	0x10016ace
10008af4:	1000d8fd 	.word	0x1000d8fd

10008af8 <sms_button_toggle_interrupt>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_interrupt(enum sms_btn_int_toggle en0, enum sms_btn_int_toggle en1)
{
10008af8:	b510      	push	{r4, lr}
10008afa:	000c      	movs	r4, r1
    if(en0 == BTN_INT_ENABLE) {
10008afc:	2800      	cmp	r0, #0
10008afe:	d104      	bne.n	10008b0a <sms_button_toggle_interrupt+0x12>
        gpio_enable_callback(btn0_instance.gpio_pin);
10008b00:	4b0c      	ldr	r3, [pc, #48]	; (10008b34 <sms_button_toggle_interrupt+0x3c>)
10008b02:	7858      	ldrb	r0, [r3, #1]
10008b04:	4b0c      	ldr	r3, [pc, #48]	; (10008b38 <sms_button_toggle_interrupt+0x40>)
10008b06:	4798      	blx	r3
10008b08:	e005      	b.n	10008b16 <sms_button_toggle_interrupt+0x1e>
    }
    else if(en0 == BTN_INT_DISABLE) {
10008b0a:	2801      	cmp	r0, #1
10008b0c:	d103      	bne.n	10008b16 <sms_button_toggle_interrupt+0x1e>
        gpio_disable_callback(btn0_instance.gpio_pin);
10008b0e:	4b09      	ldr	r3, [pc, #36]	; (10008b34 <sms_button_toggle_interrupt+0x3c>)
10008b10:	7858      	ldrb	r0, [r3, #1]
10008b12:	4b0a      	ldr	r3, [pc, #40]	; (10008b3c <sms_button_toggle_interrupt+0x44>)
10008b14:	4798      	blx	r3
    }
    
    if(en1 == BTN_INT_ENABLE) {
10008b16:	2c00      	cmp	r4, #0
10008b18:	d104      	bne.n	10008b24 <sms_button_toggle_interrupt+0x2c>
        gpio_enable_callback(btn1_instance.gpio_pin);
10008b1a:	4b09      	ldr	r3, [pc, #36]	; (10008b40 <sms_button_toggle_interrupt+0x48>)
10008b1c:	7858      	ldrb	r0, [r3, #1]
10008b1e:	4b06      	ldr	r3, [pc, #24]	; (10008b38 <sms_button_toggle_interrupt+0x40>)
10008b20:	4798      	blx	r3
10008b22:	e005      	b.n	10008b30 <sms_button_toggle_interrupt+0x38>
    }
    else if(en1 == BTN_INT_DISABLE) {
10008b24:	2c01      	cmp	r4, #1
10008b26:	d103      	bne.n	10008b30 <sms_button_toggle_interrupt+0x38>
        gpio_disable_callback(btn1_instance.gpio_pin);
10008b28:	4b05      	ldr	r3, [pc, #20]	; (10008b40 <sms_button_toggle_interrupt+0x48>)
10008b2a:	7858      	ldrb	r0, [r3, #1]
10008b2c:	4b03      	ldr	r3, [pc, #12]	; (10008b3c <sms_button_toggle_interrupt+0x44>)
10008b2e:	4798      	blx	r3
    }
}
10008b30:	bd10      	pop	{r4, pc}
10008b32:	46c0      	nop			; (mov r8, r8)
10008b34:	10016ac0 	.word	0x10016ac0
10008b38:	1000a501 	.word	0x1000a501
10008b3c:	1000a55d 	.word	0x1000a55d
10008b40:	10016b24 	.word	0x10016b24

10008b44 <sms_button_service_init>:
    }
}

/* Initialize BLE service for buttons */
void sms_button_service_init(gatt_service_handler_t *sms_button_serv, uint16_t *sms_button_value)
{
10008b44:	b510      	push	{r4, lr}
10008b46:	b082      	sub	sp, #8
    uint8_t init_value = 0;
    //DBG_LOG_DEV("[sms_button_service_init]\tInitializing SMS button service");
    //SMS button service characteristic
    sms_button_serv->serv_handle = 0;
10008b48:	2300      	movs	r3, #0
10008b4a:	2100      	movs	r1, #0
10008b4c:	8243      	strh	r3, [r0, #18]
    sms_button_serv->serv_uuid.type = AT_BLE_UUID_128;
10008b4e:	2202      	movs	r2, #2
10008b50:	7002      	strb	r2, [r0, #0]
    sms_button_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_BTN_SERVICE_UUID_1) & 0xFF);
10008b52:	2200      	movs	r2, #0
10008b54:	7041      	strb	r1, [r0, #1]
    sms_button_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_BTN_SERVICE_UUID_1 >> 8) & 0xFF);
10008b56:	7082      	strb	r2, [r0, #2]
    sms_button_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_BTN_SERVICE_UUID_1 >> 16) & 0xFF);
10008b58:	2457      	movs	r4, #87	; 0x57
10008b5a:	70c4      	strb	r4, [r0, #3]
    sms_button_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_BTN_SERVICE_UUID_1 >> 24) & 0xFF);
10008b5c:	3c3b      	subs	r4, #59	; 0x3b
10008b5e:	7104      	strb	r4, [r0, #4]
    sms_button_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_BTN_SERVICE_UUID_2) & 0xFF);
10008b60:	7142      	strb	r2, [r0, #5]
    sms_button_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_BTN_SERVICE_UUID_2 >> 8) & 0xFF);
10008b62:	7182      	strb	r2, [r0, #6]
    sms_button_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_BTN_SERVICE_UUID_2 >> 16) & 0xFF);
10008b64:	34a2      	adds	r4, #162	; 0xa2
10008b66:	71c4      	strb	r4, [r0, #7]
    sms_button_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_BTN_SERVICE_UUID_2 >> 24) & 0xFF);
10008b68:	3c64      	subs	r4, #100	; 0x64
10008b6a:	7204      	strb	r4, [r0, #8]
    sms_button_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_BTN_SERVICE_UUID_3) & 0xFF);
10008b6c:	7242      	strb	r2, [r0, #9]
    sms_button_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_BTN_SERVICE_UUID_3 >> 8) & 0xFF);
10008b6e:	7282      	strb	r2, [r0, #10]
    sms_button_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_BTN_SERVICE_UUID_3 >> 16) & 0xFF);
10008b70:	3c2a      	subs	r4, #42	; 0x2a
10008b72:	72c4      	strb	r4, [r0, #11]
    sms_button_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_BTN_SERVICE_UUID_3 >> 24) & 0xFF);
10008b74:	3420      	adds	r4, #32
10008b76:	7304      	strb	r4, [r0, #12]
    sms_button_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_BTN_SERVICE_UUID_4) & 0xFF);
10008b78:	7342      	strb	r2, [r0, #13]
    sms_button_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_BTN_SERVICE_UUID_4 >> 8) & 0xFF);
10008b7a:	7382      	strb	r2, [r0, #14]
    sms_button_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_BTN_SERVICE_UUID_4 >> 16) & 0xFF);
10008b7c:	22bb      	movs	r2, #187	; 0xbb
10008b7e:	73c2      	strb	r2, [r0, #15]
    sms_button_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_BTN_SERVICE_UUID_4 >> 24) & 0xFF);
10008b80:	7402      	strb	r2, [r0, #16]
    
#   if SMS_SENDING_WITH_ACK == true
    sms_button_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); /* Properties */
#   else
    sms_button_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
10008b82:	3aa9      	subs	r2, #169	; 0xa9
10008b84:	8502      	strh	r2, [r0, #40]	; 0x28
#   endif
    sms_button_serv->serv_chars.init_value = &init_value;             /* value */
10008b86:	466a      	mov	r2, sp
10008b88:	3207      	adds	r2, #7
10008b8a:	62c2      	str	r2, [r0, #44]	; 0x2c
    sms_button_serv->serv_chars.value_init_len = (sizeof(uint8_t));
10008b8c:	2201      	movs	r2, #1
10008b8e:	8602      	strh	r2, [r0, #48]	; 0x30
    sms_button_serv->serv_chars.value_max_len = (sizeof(uint8_t));
10008b90:	8642      	strh	r2, [r0, #50]	; 0x32
    sms_button_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
10008b92:	3c3f      	subs	r4, #63	; 0x3f
10008b94:	3233      	adds	r2, #51	; 0x33
10008b96:	5484      	strb	r4, [r0, r2]
    sms_button_serv->serv_chars.user_desc = NULL;           /* user defined name */
10008b98:	6383      	str	r3, [r0, #56]	; 0x38
    sms_button_serv->serv_chars.user_desc_len = 0;
10008b9a:	8783      	strh	r3, [r0, #60]	; 0x3c
    sms_button_serv->serv_chars.user_desc_max_len = 0;
10008b9c:	87c3      	strh	r3, [r0, #62]	; 0x3e
    sms_button_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
10008b9e:	3210      	adds	r2, #16
10008ba0:	5481      	strb	r1, [r0, r2]
    sms_button_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
10008ba2:	3201      	adds	r2, #1
10008ba4:	5481      	strb	r1, [r0, r2]
    sms_button_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
10008ba6:	3201      	adds	r2, #1
10008ba8:	5481      	strb	r1, [r0, r2]
    sms_button_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
10008baa:	3202      	adds	r2, #2
10008bac:	5283      	strh	r3, [r0, r2]
    sms_button_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
10008bae:	3202      	adds	r2, #2
10008bb0:	5283      	strh	r3, [r0, r2]
    sms_button_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
10008bb2:	3202      	adds	r2, #2
10008bb4:	5283      	strh	r3, [r0, r2]
    
    sms_button_serv->serv_chars.presentation_format = NULL;       /* presentation format */
10008bb6:	6403      	str	r3, [r0, #64]	; 0x40
10008bb8:	b002      	add	sp, #8
10008bba:	bd10      	pop	{r4, pc}

10008bbc <sms_button_define_services>:
    send_plf_int_msg_ind(btn1_instance.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008bbc:	b510      	push	{r4, lr}
10008bbe:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint16_t init_value = 0;
10008bc0:	466b      	mov	r3, sp
10008bc2:	1d99      	adds	r1, r3, #6
10008bc4:	2300      	movs	r3, #0
10008bc6:	800b      	strh	r3, [r1, #0]
    sms_button_service_init(&sms_button_service_handler, &init_value);
10008bc8:	4c0d      	ldr	r4, [pc, #52]	; (10008c00 <sms_button_define_services+0x44>)
10008bca:	0020      	movs	r0, r4
10008bcc:	4b0d      	ldr	r3, [pc, #52]	; (10008c04 <sms_button_define_services+0x48>)
10008bce:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&sms_button_service_handler)) != AT_BLE_SUCCESS) {
10008bd0:	0020      	movs	r0, r4
10008bd2:	4b0d      	ldr	r3, [pc, #52]	; (10008c08 <sms_button_define_services+0x4c>)
10008bd4:	4798      	blx	r3
10008bd6:	1e04      	subs	r4, r0, #0
10008bd8:	d007      	beq.n	10008bea <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008bda:	480c      	ldr	r0, [pc, #48]	; (10008c0c <sms_button_define_services+0x50>)
10008bdc:	4b0c      	ldr	r3, [pc, #48]	; (10008c10 <sms_button_define_services+0x54>)
10008bde:	4798      	blx	r3
10008be0:	0021      	movs	r1, r4
10008be2:	480c      	ldr	r0, [pc, #48]	; (10008c14 <sms_button_define_services+0x58>)
10008be4:	4b0c      	ldr	r3, [pc, #48]	; (10008c18 <sms_button_define_services+0x5c>)
10008be6:	4798      	blx	r3
10008be8:	e007      	b.n	10008bfa <sms_button_define_services+0x3e>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", sms_button_service_handler.serv_handle);
10008bea:	4808      	ldr	r0, [pc, #32]	; (10008c0c <sms_button_define_services+0x50>)
10008bec:	4b08      	ldr	r3, [pc, #32]	; (10008c10 <sms_button_define_services+0x54>)
10008bee:	4798      	blx	r3
10008bf0:	4b03      	ldr	r3, [pc, #12]	; (10008c00 <sms_button_define_services+0x44>)
10008bf2:	8a59      	ldrh	r1, [r3, #18]
10008bf4:	4809      	ldr	r0, [pc, #36]	; (10008c1c <sms_button_define_services+0x60>)
10008bf6:	4b08      	ldr	r3, [pc, #32]	; (10008c18 <sms_button_define_services+0x5c>)
10008bf8:	4798      	blx	r3
    }
}
10008bfa:	b002      	add	sp, #8
10008bfc:	bd10      	pop	{r4, pc}
10008bfe:	46c0      	nop			; (mov r8, r8)
10008c00:	10016ad0 	.word	0x10016ad0
10008c04:	10008b45 	.word	0x10008b45
10008c08:	1000876d 	.word	0x1000876d
10008c0c:	10013464 	.word	0x10013464
10008c10:	100123d9 	.word	0x100123d9
10008c14:	10013958 	.word	0x10013958
10008c18:	100122b9 	.word	0x100122b9
10008c1c:	1001399c 	.word	0x1001399c

10008c20 <sms_imu_configure_gpio>:
//
///* Configure GPIO for IMU
//* - set aon pin for IMU data ready interrupt
//*/
void sms_imu_configure_gpio(void)
{
10008c20:	b510      	push	{r4, lr}
10008c22:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008c24:	ac01      	add	r4, sp, #4
10008c26:	0020      	movs	r0, r4
10008c28:	4b15      	ldr	r3, [pc, #84]	; (10008c80 <sms_imu_configure_gpio+0x60>)
10008c2a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008c2c:	2300      	movs	r3, #0
10008c2e:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008c30:	3302      	adds	r3, #2
10008c32:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008c34:	3b01      	subs	r3, #1
10008c36:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_IMU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10008c38:	0021      	movs	r1, r4
10008c3a:	201e      	movs	r0, #30
10008c3c:	4b11      	ldr	r3, [pc, #68]	; (10008c84 <sms_imu_configure_gpio+0x64>)
10008c3e:	4798      	blx	r3
10008c40:	2800      	cmp	r0, #0
10008c42:	d005      	beq.n	10008c50 <sms_imu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10008c44:	4810      	ldr	r0, [pc, #64]	; (10008c88 <sms_imu_configure_gpio+0x68>)
10008c46:	4b11      	ldr	r3, [pc, #68]	; (10008c8c <sms_imu_configure_gpio+0x6c>)
10008c48:	4798      	blx	r3
10008c4a:	4811      	ldr	r0, [pc, #68]	; (10008c90 <sms_imu_configure_gpio+0x70>)
10008c4c:	4b11      	ldr	r3, [pc, #68]	; (10008c94 <sms_imu_configure_gpio+0x74>)
10008c4e:	4798      	blx	r3
    }

    /* Pin output to supply IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10008c50:	ac01      	add	r4, sp, #4
10008c52:	0020      	movs	r0, r4
10008c54:	4b0a      	ldr	r3, [pc, #40]	; (10008c80 <sms_imu_configure_gpio+0x60>)
10008c56:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008c58:	2301      	movs	r3, #1
10008c5a:	7023      	strb	r3, [r4, #0]
    if(!gpio_pin_set_config(SMS_IMU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
10008c5c:	0021      	movs	r1, r4
10008c5e:	2006      	movs	r0, #6
10008c60:	4b08      	ldr	r3, [pc, #32]	; (10008c84 <sms_imu_configure_gpio+0x64>)
10008c62:	4798      	blx	r3
10008c64:	2800      	cmp	r0, #0
10008c66:	d105      	bne.n	10008c74 <sms_imu_configure_gpio+0x54>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU VCC pin");
10008c68:	4807      	ldr	r0, [pc, #28]	; (10008c88 <sms_imu_configure_gpio+0x68>)
10008c6a:	4b08      	ldr	r3, [pc, #32]	; (10008c8c <sms_imu_configure_gpio+0x6c>)
10008c6c:	4798      	blx	r3
10008c6e:	480a      	ldr	r0, [pc, #40]	; (10008c98 <sms_imu_configure_gpio+0x78>)
10008c70:	4b08      	ldr	r3, [pc, #32]	; (10008c94 <sms_imu_configure_gpio+0x74>)
10008c72:	4798      	blx	r3
    }
    gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
10008c74:	2100      	movs	r1, #0
10008c76:	2006      	movs	r0, #6
10008c78:	4b08      	ldr	r3, [pc, #32]	; (10008c9c <sms_imu_configure_gpio+0x7c>)
10008c7a:	4798      	blx	r3
}
10008c7c:	b002      	add	sp, #8
10008c7e:	bd10      	pop	{r4, pc}
10008c80:	10009ff1 	.word	0x10009ff1
10008c84:	1000a001 	.word	0x1000a001
10008c88:	10013464 	.word	0x10013464
10008c8c:	100123d9 	.word	0x100123d9
10008c90:	100139e4 	.word	0x100139e4
10008c94:	100122b9 	.word	0x100122b9
10008c98:	10013a24 	.word	0x10013a24
10008c9c:	1000a259 	.word	0x1000a259

10008ca0 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10008ca0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10008ca2:	2100      	movs	r1, #0
10008ca4:	4b01      	ldr	r3, [pc, #4]	; (10008cac <sms_led_switch_on+0xc>)
10008ca6:	4798      	blx	r3
}
10008ca8:	bd10      	pop	{r4, pc}
10008caa:	46c0      	nop			; (mov r8, r8)
10008cac:	1000a259 	.word	0x1000a259

10008cb0 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10008cb0:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10008cb2:	2101      	movs	r1, #1
10008cb4:	4b01      	ldr	r3, [pc, #4]	; (10008cbc <sms_led_switch_off+0xc>)
10008cb6:	4798      	blx	r3
}
10008cb8:	bd10      	pop	{r4, pc}
10008cba:	46c0      	nop			; (mov r8, r8)
10008cbc:	1000a259 	.word	0x1000a259

10008cc0 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10008cc0:	b510      	push	{r4, lr}
10008cc2:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10008cc4:	ac01      	add	r4, sp, #4
10008cc6:	0020      	movs	r0, r4
10008cc8:	4b0a      	ldr	r3, [pc, #40]	; (10008cf4 <sms_led_gpio_init+0x34>)
10008cca:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008ccc:	2301      	movs	r3, #1
10008cce:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008cd0:	0021      	movs	r1, r4
10008cd2:	2016      	movs	r0, #22
10008cd4:	4b08      	ldr	r3, [pc, #32]	; (10008cf8 <sms_led_gpio_init+0x38>)
10008cd6:	4798      	blx	r3
10008cd8:	2800      	cmp	r0, #0
10008cda:	d005      	beq.n	10008ce8 <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10008cdc:	4807      	ldr	r0, [pc, #28]	; (10008cfc <sms_led_gpio_init+0x3c>)
10008cde:	4b08      	ldr	r3, [pc, #32]	; (10008d00 <sms_led_gpio_init+0x40>)
10008ce0:	4798      	blx	r3
10008ce2:	4808      	ldr	r0, [pc, #32]	; (10008d04 <sms_led_gpio_init+0x44>)
10008ce4:	4b08      	ldr	r3, [pc, #32]	; (10008d08 <sms_led_gpio_init+0x48>)
10008ce6:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10008ce8:	2016      	movs	r0, #22
10008cea:	4b08      	ldr	r3, [pc, #32]	; (10008d0c <sms_led_gpio_init+0x4c>)
10008cec:	4798      	blx	r3
}
10008cee:	b002      	add	sp, #8
10008cf0:	bd10      	pop	{r4, pc}
10008cf2:	46c0      	nop			; (mov r8, r8)
10008cf4:	10009ff1 	.word	0x10009ff1
10008cf8:	1000a001 	.word	0x1000a001
10008cfc:	10013464 	.word	0x10013464
10008d00:	100123d9 	.word	0x100123d9
10008d04:	10013a64 	.word	0x10013a64
10008d08:	100122b9 	.word	0x100122b9
10008d0c:	10008cb1 	.word	0x10008cb1

10008d10 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
10008d10:	b510      	push	{r4, lr}
10008d12:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
10008d14:	4b05      	ldr	r3, [pc, #20]	; (10008d2c <sms_led_toggle+0x1c>)
10008d16:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10008d18:	2800      	cmp	r0, #0
10008d1a:	d103      	bne.n	10008d24 <sms_led_toggle+0x14>
10008d1c:	0020      	movs	r0, r4
10008d1e:	4b04      	ldr	r3, [pc, #16]	; (10008d30 <sms_led_toggle+0x20>)
10008d20:	4798      	blx	r3
10008d22:	e002      	b.n	10008d2a <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
10008d24:	0020      	movs	r0, r4
10008d26:	4b03      	ldr	r3, [pc, #12]	; (10008d34 <sms_led_toggle+0x24>)
10008d28:	4798      	blx	r3
}
10008d2a:	bd10      	pop	{r4, pc}
10008d2c:	1000a209 	.word	0x1000a209
10008d30:	10008cb1 	.word	0x10008cb1
10008d34:	10008ca1 	.word	0x10008ca1

10008d38 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10008d38:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10008d3a:	4b0c      	ldr	r3, [pc, #48]	; (10008d6c <sms_led_blink_start+0x34>)
10008d3c:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10008d3e:	2200      	movs	r2, #0
10008d40:	4b0b      	ldr	r3, [pc, #44]	; (10008d70 <sms_led_blink_start+0x38>)
10008d42:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10008d44:	4b0b      	ldr	r3, [pc, #44]	; (10008d74 <sms_led_blink_start+0x3c>)
10008d46:	781b      	ldrb	r3, [r3, #0]
10008d48:	b2db      	uxtb	r3, r3
10008d4a:	2b02      	cmp	r3, #2
10008d4c:	d002      	beq.n	10008d54 <sms_led_blink_start+0x1c>
10008d4e:	2b03      	cmp	r3, #3
10008d50:	d002      	beq.n	10008d58 <sms_led_blink_start+0x20>
10008d52:	e004      	b.n	10008d5e <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10008d54:	2164      	movs	r1, #100	; 0x64
10008d56:	e003      	b.n	10008d60 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10008d58:	21c8      	movs	r1, #200	; 0xc8
10008d5a:	0049      	lsls	r1, r1, #1
        break;
10008d5c:	e000      	b.n	10008d60 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10008d5e:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10008d60:	2201      	movs	r2, #1
10008d62:	2001      	movs	r0, #1
10008d64:	4b04      	ldr	r3, [pc, #16]	; (10008d78 <sms_led_blink_start+0x40>)
10008d66:	4798      	blx	r3
}
10008d68:	bd10      	pop	{r4, pc}
10008d6a:	46c0      	nop			; (mov r8, r8)
10008d6c:	10008ca1 	.word	0x10008ca1
10008d70:	10016bec 	.word	0x10016bec
10008d74:	10016b77 	.word	0x10016b77
10008d78:	100093bd 	.word	0x100093bd

10008d7c <sms_pressure_ms58_reset>:
    return STATUS_ERR_IO;
}


void sms_pressure_ms58_reset(void)
{
10008d7c:	b510      	push	{r4, lr}
10008d7e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10008d80:	4a05      	ldr	r2, [pc, #20]	; (10008d98 <sms_pressure_ms58_reset+0x1c>)
10008d82:	231e      	movs	r3, #30
10008d84:	7013      	strb	r3, [r2, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10008d86:	3b1d      	subs	r3, #29
10008d88:	9300      	str	r3, [sp, #0]
10008d8a:	4b04      	ldr	r3, [pc, #16]	; (10008d9c <sms_pressure_ms58_reset+0x20>)
10008d8c:	4904      	ldr	r1, [pc, #16]	; (10008da0 <sms_pressure_ms58_reset+0x24>)
10008d8e:	4805      	ldr	r0, [pc, #20]	; (10008da4 <sms_pressure_ms58_reset+0x28>)
10008d90:	4c05      	ldr	r4, [pc, #20]	; (10008da8 <sms_pressure_ms58_reset+0x2c>)
10008d92:	47a0      	blx	r4
}
10008d94:	b002      	add	sp, #8
10008d96:	bd10      	pop	{r4, pc}
10008d98:	10016b38 	.word	0x10016b38
10008d9c:	10016b28 	.word	0x10016b28
10008da0:	10016b78 	.word	0x10016b78
10008da4:	10016b7c 	.word	0x10016b7c
10008da8:	1000929d 	.word	0x1000929d

10008dac <sms_pressure_startup>:
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}


void sms_pressure_startup(void)
{
10008dac:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10008dae:	480d      	ldr	r0, [pc, #52]	; (10008de4 <sms_pressure_startup+0x38>)
10008db0:	4b0d      	ldr	r3, [pc, #52]	; (10008de8 <sms_pressure_startup+0x3c>)
10008db2:	4798      	blx	r3
10008db4:	480d      	ldr	r0, [pc, #52]	; (10008dec <sms_pressure_startup+0x40>)
10008db6:	4b0e      	ldr	r3, [pc, #56]	; (10008df0 <sms_pressure_startup+0x44>)
10008db8:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
10008dba:	2101      	movs	r1, #1
10008dbc:	2001      	movs	r0, #1
10008dbe:	4b0d      	ldr	r3, [pc, #52]	; (10008df4 <sms_pressure_startup+0x48>)
10008dc0:	4798      	blx	r3
    ms58_device.current_state = MS58_STATE_RESETTING;
10008dc2:	4b0d      	ldr	r3, [pc, #52]	; (10008df8 <sms_pressure_startup+0x4c>)
10008dc4:	2101      	movs	r1, #1
10008dc6:	2225      	movs	r2, #37	; 0x25
10008dc8:	5499      	strb	r1, [r3, r2]
    ms58_device.reset_done = false;
10008dca:	2200      	movs	r2, #0
10008dcc:	705a      	strb	r2, [r3, #1]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
10008dce:	4b0b      	ldr	r3, [pc, #44]	; (10008dfc <sms_pressure_startup+0x50>)
10008dd0:	4798      	blx	r3
    timer1_current_mode = TIMER1_MODE_MS58_RESET;
10008dd2:	2202      	movs	r2, #2
10008dd4:	4b0a      	ldr	r3, [pc, #40]	; (10008e00 <sms_pressure_startup+0x54>)
10008dd6:	701a      	strb	r2, [r3, #0]
    //ulp_ready = false;
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
10008dd8:	2200      	movs	r2, #0
10008dda:	2103      	movs	r1, #3
10008ddc:	2001      	movs	r0, #1
10008dde:	4b09      	ldr	r3, [pc, #36]	; (10008e04 <sms_pressure_startup+0x58>)
10008de0:	4798      	blx	r3
}
10008de2:	bd10      	pop	{r4, pc}
10008de4:	10013464 	.word	0x10013464
10008de8:	100123d9 	.word	0x100123d9
10008dec:	10013ad8 	.word	0x10013ad8
10008df0:	100122b9 	.word	0x100122b9
10008df4:	10008af9 	.word	0x10008af9
10008df8:	10016b48 	.word	0x10016b48
10008dfc:	10008d7d 	.word	0x10008d7d
10008e00:	10016ac4 	.word	0x10016ac4
10008e04:	100093bd 	.word	0x100093bd

10008e08 <sms_pressure_ms58_read_prom>:
    spi_wdata[0] = MS58_RESET;
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10008e08:	b5f0      	push	{r4, r5, r6, r7, lr}
10008e0a:	4657      	mov	r7, sl
10008e0c:	b480      	push	{r7}
10008e0e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10008e10:	4d37      	ldr	r5, [pc, #220]	; (10008ef0 <sms_pressure_ms58_read_prom+0xe8>)
10008e12:	23a2      	movs	r3, #162	; 0xa2
10008e14:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
10008e16:	2300      	movs	r3, #0
10008e18:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
10008e1a:	70ab      	strb	r3, [r5, #2]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008e1c:	4c35      	ldr	r4, [pc, #212]	; (10008ef4 <sms_pressure_ms58_read_prom+0xec>)
10008e1e:	3303      	adds	r3, #3
10008e20:	469a      	mov	sl, r3
10008e22:	9300      	str	r3, [sp, #0]
10008e24:	0023      	movs	r3, r4
10008e26:	002a      	movs	r2, r5
10008e28:	4933      	ldr	r1, [pc, #204]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008e2a:	4834      	ldr	r0, [pc, #208]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008e2c:	4f34      	ldr	r7, [pc, #208]	; (10008f00 <sms_pressure_ms58_read_prom+0xf8>)
10008e2e:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008e30:	7863      	ldrb	r3, [r4, #1]
10008e32:	021b      	lsls	r3, r3, #8
10008e34:	78a2      	ldrb	r2, [r4, #2]
10008e36:	4313      	orrs	r3, r2
10008e38:	4e32      	ldr	r6, [pc, #200]	; (10008f04 <sms_pressure_ms58_read_prom+0xfc>)
10008e3a:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10008e3c:	23a4      	movs	r3, #164	; 0xa4
10008e3e:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008e40:	4653      	mov	r3, sl
10008e42:	9300      	str	r3, [sp, #0]
10008e44:	0023      	movs	r3, r4
10008e46:	002a      	movs	r2, r5
10008e48:	492b      	ldr	r1, [pc, #172]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008e4a:	482c      	ldr	r0, [pc, #176]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008e4c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008e4e:	7863      	ldrb	r3, [r4, #1]
10008e50:	021b      	lsls	r3, r3, #8
10008e52:	78a2      	ldrb	r2, [r4, #2]
10008e54:	4313      	orrs	r3, r2
10008e56:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10008e58:	23a6      	movs	r3, #166	; 0xa6
10008e5a:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008e5c:	4653      	mov	r3, sl
10008e5e:	9300      	str	r3, [sp, #0]
10008e60:	0023      	movs	r3, r4
10008e62:	002a      	movs	r2, r5
10008e64:	4924      	ldr	r1, [pc, #144]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008e66:	4825      	ldr	r0, [pc, #148]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008e68:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008e6a:	7863      	ldrb	r3, [r4, #1]
10008e6c:	021b      	lsls	r3, r3, #8
10008e6e:	78a2      	ldrb	r2, [r4, #2]
10008e70:	4313      	orrs	r3, r2
10008e72:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10008e74:	23a8      	movs	r3, #168	; 0xa8
10008e76:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008e78:	4653      	mov	r3, sl
10008e7a:	9300      	str	r3, [sp, #0]
10008e7c:	0023      	movs	r3, r4
10008e7e:	002a      	movs	r2, r5
10008e80:	491d      	ldr	r1, [pc, #116]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008e82:	481e      	ldr	r0, [pc, #120]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008e84:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008e86:	7863      	ldrb	r3, [r4, #1]
10008e88:	021b      	lsls	r3, r3, #8
10008e8a:	78a2      	ldrb	r2, [r4, #2]
10008e8c:	4313      	orrs	r3, r2
10008e8e:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10008e90:	23aa      	movs	r3, #170	; 0xaa
10008e92:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008e94:	4653      	mov	r3, sl
10008e96:	9300      	str	r3, [sp, #0]
10008e98:	0023      	movs	r3, r4
10008e9a:	002a      	movs	r2, r5
10008e9c:	4916      	ldr	r1, [pc, #88]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008e9e:	4817      	ldr	r0, [pc, #92]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008ea0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008ea2:	7863      	ldrb	r3, [r4, #1]
10008ea4:	021b      	lsls	r3, r3, #8
10008ea6:	78a2      	ldrb	r2, [r4, #2]
10008ea8:	4313      	orrs	r3, r2
10008eaa:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10008eac:	23ac      	movs	r3, #172	; 0xac
10008eae:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008eb0:	4653      	mov	r3, sl
10008eb2:	9300      	str	r3, [sp, #0]
10008eb4:	0023      	movs	r3, r4
10008eb6:	002a      	movs	r2, r5
10008eb8:	490f      	ldr	r1, [pc, #60]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008eba:	4810      	ldr	r0, [pc, #64]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008ebc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008ebe:	7863      	ldrb	r3, [r4, #1]
10008ec0:	021b      	lsls	r3, r3, #8
10008ec2:	78a2      	ldrb	r2, [r4, #2]
10008ec4:	4313      	orrs	r3, r2
10008ec6:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10008ec8:	23ae      	movs	r3, #174	; 0xae
10008eca:	702b      	strb	r3, [r5, #0]
    spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10008ecc:	4653      	mov	r3, sl
10008ece:	9300      	str	r3, [sp, #0]
10008ed0:	0023      	movs	r3, r4
10008ed2:	002a      	movs	r2, r5
10008ed4:	4908      	ldr	r1, [pc, #32]	; (10008ef8 <sms_pressure_ms58_read_prom+0xf0>)
10008ed6:	4809      	ldr	r0, [pc, #36]	; (10008efc <sms_pressure_ms58_read_prom+0xf4>)
10008ed8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    ms58_device.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10008eda:	7863      	ldrb	r3, [r4, #1]
10008edc:	021b      	lsls	r3, r3, #8
10008ede:	78a2      	ldrb	r2, [r4, #2]
10008ee0:	4313      	orrs	r3, r2
10008ee2:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
10008ee4:	2000      	movs	r0, #0
10008ee6:	b002      	add	sp, #8
10008ee8:	bc04      	pop	{r2}
10008eea:	4692      	mov	sl, r2
10008eec:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008eee:	46c0      	nop			; (mov r8, r8)
10008ef0:	10016b38 	.word	0x10016b38
10008ef4:	10016b28 	.word	0x10016b28
10008ef8:	10016b78 	.word	0x10016b78
10008efc:	10016b7c 	.word	0x10016b7c
10008f00:	1000929d 	.word	0x1000929d
10008f04:	10016b48 	.word	0x10016b48

10008f08 <sms_pressure_init>:
    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
}


enum status_code sms_pressure_init(void)
{
10008f08:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
10008f0a:	4b06      	ldr	r3, [pc, #24]	; (10008f24 <sms_pressure_init+0x1c>)
10008f0c:	4798      	blx	r3
10008f0e:	2800      	cmp	r0, #0
10008f10:	d106      	bne.n	10008f20 <sms_pressure_init+0x18>
        ms58_device.init_ok = true;
10008f12:	4b05      	ldr	r3, [pc, #20]	; (10008f28 <sms_pressure_init+0x20>)
10008f14:	2201      	movs	r2, #1
10008f16:	709a      	strb	r2, [r3, #2]
        ms58_device.current_state = MS58_STATE_READY;
10008f18:	2102      	movs	r1, #2
10008f1a:	3224      	adds	r2, #36	; 0x24
10008f1c:	5499      	strb	r1, [r3, r2]
        /* Enable buttons again */
        //sms_button_toggle_interrupts(SMS_EXT_INT_ENABLE);
        return STATUS_OK;
10008f1e:	e000      	b.n	10008f22 <sms_pressure_init+0x1a>
    }
    return STATUS_ERR_IO;
10008f20:	2010      	movs	r0, #16
}
10008f22:	bd10      	pop	{r4, pc}
10008f24:	10008e09 	.word	0x10008e09
10008f28:	10016b48 	.word	0x10016b48

10008f2c <sms_pressure_ms58_read_data>:
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}

enum status_code sms_pressure_ms58_read_data(void)
{
10008f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
10008f2e:	464f      	mov	r7, r9
10008f30:	4646      	mov	r6, r8
10008f32:	b4c0      	push	{r6, r7}
10008f34:	b083      	sub	sp, #12
    switch(ms58_device.current_state) {
10008f36:	2325      	movs	r3, #37	; 0x25
10008f38:	4a2c      	ldr	r2, [pc, #176]	; (10008fec <sms_pressure_ms58_read_data+0xc0>)
10008f3a:	5cd3      	ldrb	r3, [r2, r3]
10008f3c:	b2db      	uxtb	r3, r3
10008f3e:	2b03      	cmp	r3, #3
10008f40:	d002      	beq.n	10008f48 <sms_pressure_ms58_read_data+0x1c>
10008f42:	2b04      	cmp	r3, #4
10008f44:	d025      	beq.n	10008f92 <sms_pressure_ms58_read_data+0x66>
10008f46:	e04b      	b.n	10008fe0 <sms_pressure_ms58_read_data+0xb4>
        case MS58_STATE_CONV_PRESSURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC pressure values...");
        spi_wdata[0] = MS58_ADC_READ;
10008f48:	4c29      	ldr	r4, [pc, #164]	; (10008ff0 <sms_pressure_ms58_read_data+0xc4>)
10008f4a:	2300      	movs	r3, #0
10008f4c:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
10008f4e:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
10008f50:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
10008f52:	70e3      	strb	r3, [r4, #3]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
10008f54:	4d27      	ldr	r5, [pc, #156]	; (10008ff4 <sms_pressure_ms58_read_data+0xc8>)
10008f56:	2704      	movs	r7, #4
10008f58:	9700      	str	r7, [sp, #0]
10008f5a:	002b      	movs	r3, r5
10008f5c:	0022      	movs	r2, r4
10008f5e:	4926      	ldr	r1, [pc, #152]	; (10008ff8 <sms_pressure_ms58_read_data+0xcc>)
10008f60:	4826      	ldr	r0, [pc, #152]	; (10008ffc <sms_pressure_ms58_read_data+0xd0>)
10008f62:	4e27      	ldr	r6, [pc, #156]	; (10009000 <sms_pressure_ms58_read_data+0xd4>)
10008f64:	46b1      	mov	r9, r6
10008f66:	47b0      	blx	r6
        ms58_device.adc_values[MS58_TYPE_PRESS] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
10008f68:	786b      	ldrb	r3, [r5, #1]
10008f6a:	041a      	lsls	r2, r3, #16
10008f6c:	78ab      	ldrb	r3, [r5, #2]
10008f6e:	021b      	lsls	r3, r3, #8
10008f70:	4313      	orrs	r3, r2
10008f72:	78ea      	ldrb	r2, [r5, #3]
10008f74:	4313      	orrs	r3, r2
10008f76:	4e1d      	ldr	r6, [pc, #116]	; (10008fec <sms_pressure_ms58_read_data+0xc0>)
10008f78:	6173      	str	r3, [r6, #20]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D1 -> %ld", ms58_device.adc_values[MS58_TYPE_PRESS]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D2 conversion");
        spi_wdata[0] = MS58_CONV_D2_512;
10008f7a:	2352      	movs	r3, #82	; 0x52
10008f7c:	7023      	strb	r3, [r4, #0]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10008f7e:	3b51      	subs	r3, #81	; 0x51
10008f80:	9300      	str	r3, [sp, #0]
10008f82:	002b      	movs	r3, r5
10008f84:	0022      	movs	r2, r4
10008f86:	491c      	ldr	r1, [pc, #112]	; (10008ff8 <sms_pressure_ms58_read_data+0xcc>)
10008f88:	481c      	ldr	r0, [pc, #112]	; (10008ffc <sms_pressure_ms58_read_data+0xd0>)
10008f8a:	47c8      	blx	r9
        ms58_device.current_state = MS58_STATE_CONV_TEMPERATURE;
10008f8c:	2325      	movs	r3, #37	; 0x25
10008f8e:	54f7      	strb	r7, [r6, r3]
        break;
10008f90:	e026      	b.n	10008fe0 <sms_pressure_ms58_read_data+0xb4>
        
        case MS58_STATE_CONV_TEMPERATURE:
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] reading ADC temperature values...");
        spi_wdata[0] = MS58_ADC_READ;
10008f92:	4c17      	ldr	r4, [pc, #92]	; (10008ff0 <sms_pressure_ms58_read_data+0xc4>)
10008f94:	2300      	movs	r3, #0
10008f96:	7023      	strb	r3, [r4, #0]
        spi_wdata[1] = MS58_ADC_READ;
10008f98:	7063      	strb	r3, [r4, #1]
        spi_wdata[2] = MS58_ADC_READ;
10008f9a:	70a3      	strb	r3, [r4, #2]
        spi_wdata[3] = MS58_ADC_READ;
10008f9c:	70e3      	strb	r3, [r4, #3]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 4);
10008f9e:	4d15      	ldr	r5, [pc, #84]	; (10008ff4 <sms_pressure_ms58_read_data+0xc8>)
10008fa0:	3304      	adds	r3, #4
10008fa2:	9300      	str	r3, [sp, #0]
10008fa4:	002b      	movs	r3, r5
10008fa6:	0022      	movs	r2, r4
10008fa8:	4913      	ldr	r1, [pc, #76]	; (10008ff8 <sms_pressure_ms58_read_data+0xcc>)
10008faa:	4814      	ldr	r0, [pc, #80]	; (10008ffc <sms_pressure_ms58_read_data+0xd0>)
10008fac:	4e14      	ldr	r6, [pc, #80]	; (10009000 <sms_pressure_ms58_read_data+0xd4>)
10008fae:	46b0      	mov	r8, r6
10008fb0:	47b0      	blx	r6
        ms58_device.adc_values[MS58_TYPE_TEMP] = ((spi_rdata[1] << 16) | (spi_rdata[2] << 8) | (spi_rdata[3]));
10008fb2:	786b      	ldrb	r3, [r5, #1]
10008fb4:	041a      	lsls	r2, r3, #16
10008fb6:	78ab      	ldrb	r3, [r5, #2]
10008fb8:	021b      	lsls	r3, r3, #8
10008fba:	4313      	orrs	r3, r2
10008fbc:	78ea      	ldrb	r2, [r5, #3]
10008fbe:	4313      	orrs	r3, r2
10008fc0:	4e0a      	ldr	r6, [pc, #40]	; (10008fec <sms_pressure_ms58_read_data+0xc0>)
10008fc2:	61b3      	str	r3, [r6, #24]
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] D2 -> %ld", ms58_device.adc_values[MS58_TYPE_TEMP]);
        
        //DBG_LOG_DEV("[sms_pressure_ms58_read_data] starting D1 conversion");
        spi_wdata[0] = MS58_CONV_D1_512;
10008fc4:	2342      	movs	r3, #66	; 0x42
10008fc6:	7023      	strb	r3, [r4, #0]
        spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10008fc8:	2701      	movs	r7, #1
10008fca:	9700      	str	r7, [sp, #0]
10008fcc:	002b      	movs	r3, r5
10008fce:	0022      	movs	r2, r4
10008fd0:	4909      	ldr	r1, [pc, #36]	; (10008ff8 <sms_pressure_ms58_read_data+0xcc>)
10008fd2:	480a      	ldr	r0, [pc, #40]	; (10008ffc <sms_pressure_ms58_read_data+0xd0>)
10008fd4:	47c0      	blx	r8
        ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
10008fd6:	2203      	movs	r2, #3
10008fd8:	2325      	movs	r3, #37	; 0x25
10008fda:	54f2      	strb	r2, [r6, r3]
        ms58_device.data_complete = true;
10008fdc:	3b01      	subs	r3, #1
10008fde:	54f7      	strb	r7, [r6, r3]
        case MS58_STATE_NONE:
        default:
        break;
    }
    return STATUS_OK;
}
10008fe0:	2000      	movs	r0, #0
10008fe2:	b003      	add	sp, #12
10008fe4:	bc0c      	pop	{r2, r3}
10008fe6:	4690      	mov	r8, r2
10008fe8:	4699      	mov	r9, r3
10008fea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008fec:	10016b48 	.word	0x10016b48
10008ff0:	10016b38 	.word	0x10016b38
10008ff4:	10016b28 	.word	0x10016b28
10008ff8:	10016b78 	.word	0x10016b78
10008ffc:	10016b7c 	.word	0x10016b7c
10009000:	1000929d 	.word	0x1000929d

10009004 <sms_pressure_ms58_calculate>:

void sms_pressure_ms58_calculate(void)
{
10009004:	b5f0      	push	{r4, r5, r6, r7, lr}
10009006:	465f      	mov	r7, fp
10009008:	4656      	mov	r6, sl
1000900a:	464d      	mov	r5, r9
1000900c:	b4e0      	push	{r5, r6, r7}
1000900e:	b082      	sub	sp, #8
    /***************************
    * Temperature calculation *
    ***************************/
    /* dT = D2 - Tref = D2 - C5*2^8 */
    /* tv1: 33464 * 2^8 = 8566784 */
    tv1 = ((int64_t)(ms58_device.prom_values[5]) << 8);
10009010:	4d2b      	ldr	r5, [pc, #172]	; (100090c0 <sms_pressure_ms58_calculate+0xbc>)
10009012:	89ec      	ldrh	r4, [r5, #14]
    /* deltaT: 8569150 - 8566784 = 2366 */
    deltaT = (int32_t)((int64_t)ms58_device.adc_values[MS58_TYPE_TEMP] - tv1);
10009014:	69ab      	ldr	r3, [r5, #24]

    /* TEMP = 20°C + dT*TEMPSENS = 2000 + dT * C6/2^23 */
    /* tv1: 28312 * 2366 = 66986192 */
    tv1 = ((int64_t)ms58_device.prom_values[6] * (int64_t)deltaT);
10009016:	8a28      	ldrh	r0, [r5, #16]
10009018:	b280      	uxth	r0, r0
1000901a:	0224      	lsls	r4, r4, #8
1000901c:	1b1c      	subs	r4, r3, r4
1000901e:	17e3      	asrs	r3, r4, #31
10009020:	001f      	movs	r7, r3
    /* tv2: 66986192 / 2^23 = 7(.985376358) */
    tv2 = (tv1 >> 23);
    /* temp: 7 + 2000 = 2007 */
    ms58_device.temperature = (int32_t)(tv2 + 2000);
10009022:	4a28      	ldr	r2, [pc, #160]	; (100090c4 <sms_pressure_ms58_calculate+0xc0>)
10009024:	4691      	mov	r9, r2
10009026:	0022      	movs	r2, r4
10009028:	2100      	movs	r1, #0
1000902a:	47c8      	blx	r9
1000902c:	0249      	lsls	r1, r1, #9
1000902e:	0dc0      	lsrs	r0, r0, #23
10009030:	4308      	orrs	r0, r1
10009032:	23fa      	movs	r3, #250	; 0xfa
10009034:	00db      	lsls	r3, r3, #3
10009036:	469c      	mov	ip, r3
10009038:	4460      	add	r0, ip
1000903a:	6228      	str	r0, [r5, #32]
    /************************
    * Pressure calculation *
    ************************/
    /* OFF = OFFt1 + TCO*dT = C2*2^16 + (C4*dT)/2^7 */
    /* tv1: 36924 * 2^16 = 2419851264 */
    tv1 = ((int64_t)(ms58_device.prom_values[2]) << 16);
1000903c:	892e      	ldrh	r6, [r5, #8]
1000903e:	b2b6      	uxth	r6, r6
    /* tv2: 23282 * 2366 = 55085212 */
    tv2 = ((int64_t)ms58_device.prom_values[4] * (int64_t)deltaT);
10009040:	89a8      	ldrh	r0, [r5, #12]
10009042:	b280      	uxth	r0, r0
    /* tv3: 55085212 / 2^7 = 430353(.21875) */
    tv3 = (tv2 >> 7);
    /* offset: 2419851264 + 430353 = 2420281617 */
    offset = (tv1 + tv3);
10009044:	0022      	movs	r2, r4
10009046:	9701      	str	r7, [sp, #4]
10009048:	003b      	movs	r3, r7
1000904a:	2100      	movs	r1, #0
1000904c:	47c8      	blx	r9
1000904e:	064f      	lsls	r7, r1, #25
10009050:	09c2      	lsrs	r2, r0, #7
10009052:	433a      	orrs	r2, r7
10009054:	11cb      	asrs	r3, r1, #7
10009056:	2100      	movs	r1, #0
10009058:	0430      	lsls	r0, r6, #16
1000905a:	1812      	adds	r2, r2, r0
1000905c:	414b      	adcs	r3, r1
1000905e:	0016      	movs	r6, r2
10009060:	001f      	movs	r7, r3

    /* SENS = SENSt1 + TCS*dT = C1*2^15 + (C3*dT)/2^8 */
    /* tv1: 40127 * 2^15 = 1314881536 */
    tv1 = ((int64_t)(ms58_device.prom_values[1]) << 15);
10009062:	88eb      	ldrh	r3, [r5, #6]
10009064:	b29a      	uxth	r2, r3
10009066:	4692      	mov	sl, r2
    /* tv2: 23317 * 2366 = 55168022 */
    tv2 = ((int64_t)ms58_device.prom_values[3] * (int64_t)deltaT);
10009068:	8968      	ldrh	r0, [r5, #10]
1000906a:	b280      	uxth	r0, r0
    /* sensitivity: 1314881536 + 215500 = 1315097036 */
    sensitivity = (tv1 + tv3);

    /* P = D1*SENS - OFF = (D1*SENS/2^21 - OFF)/2^15 */
    /* tv1: (9085466 * 1315097036) / 2^21 = 5697378829(.612148284) */
    tv1 = (((int64_t)ms58_device.adc_values[MS58_TYPE_PRESS] * sensitivity) >> 21);
1000906c:	696a      	ldr	r2, [r5, #20]
1000906e:	4693      	mov	fp, r2
10009070:	0022      	movs	r2, r4
10009072:	9b01      	ldr	r3, [sp, #4]
10009074:	2100      	movs	r1, #0
10009076:	47c8      	blx	r9
10009078:	060c      	lsls	r4, r1, #24
1000907a:	0a02      	lsrs	r2, r0, #8
1000907c:	4322      	orrs	r2, r4
1000907e:	120b      	asrs	r3, r1, #8
10009080:	2100      	movs	r1, #0
10009082:	4654      	mov	r4, sl
10009084:	03e0      	lsls	r0, r4, #15
10009086:	1880      	adds	r0, r0, r2
10009088:	4159      	adcs	r1, r3
1000908a:	465a      	mov	r2, fp
1000908c:	2300      	movs	r3, #0
1000908e:	47c8      	blx	r9
    /* tv2: 5697378829 - 2420281617 = 3277097212 */
    tv2 = tv1 - offset;
    /* press: 3277097212 / 2^15 = 100009(.070190) */
    ms58_device.pressure = (int32_t)(tv2 >> 15);
10009090:	02cc      	lsls	r4, r1, #11
10009092:	0d42      	lsrs	r2, r0, #21
10009094:	4322      	orrs	r2, r4
10009096:	154b      	asrs	r3, r1, #21
10009098:	1b92      	subs	r2, r2, r6
1000909a:	41bb      	sbcs	r3, r7
1000909c:	045b      	lsls	r3, r3, #17
1000909e:	0bd2      	lsrs	r2, r2, #15
100090a0:	431a      	orrs	r2, r3
100090a2:	61ea      	str	r2, [r5, #28]

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", ms58_device.temperature, ms58_device.pressure);
100090a4:	4808      	ldr	r0, [pc, #32]	; (100090c8 <sms_pressure_ms58_calculate+0xc4>)
100090a6:	4b09      	ldr	r3, [pc, #36]	; (100090cc <sms_pressure_ms58_calculate+0xc8>)
100090a8:	4798      	blx	r3
100090aa:	6a29      	ldr	r1, [r5, #32]
100090ac:	69ea      	ldr	r2, [r5, #28]
100090ae:	4808      	ldr	r0, [pc, #32]	; (100090d0 <sms_pressure_ms58_calculate+0xcc>)
100090b0:	4b08      	ldr	r3, [pc, #32]	; (100090d4 <sms_pressure_ms58_calculate+0xd0>)
100090b2:	4798      	blx	r3
}
100090b4:	b002      	add	sp, #8
100090b6:	bc1c      	pop	{r2, r3, r4}
100090b8:	4691      	mov	r9, r2
100090ba:	469a      	mov	sl, r3
100090bc:	46a3      	mov	fp, r4
100090be:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090c0:	10016b48 	.word	0x10016b48
100090c4:	1001124d 	.word	0x1001124d
100090c8:	10013464 	.word	0x10013464
100090cc:	100123d9 	.word	0x100123d9
100090d0:	10013b0c 	.word	0x10013b0c
100090d4:	100122b9 	.word	0x100122b9

100090d8 <sms_pressure_poll_data>:

    return STATUS_OK;
}

void sms_pressure_poll_data(void)
{
100090d8:	b510      	push	{r4, lr}
    static uint32_t temp = 0x12345678;
    static uint32_t press = 0xfedcba98;
    if(ble_current_state == BLE_STATE_PAIRED) {
100090da:	4b11      	ldr	r3, [pc, #68]	; (10009120 <sms_pressure_poll_data+0x48>)
100090dc:	781b      	ldrb	r3, [r3, #0]
100090de:	2b22      	cmp	r3, #34	; 0x22
100090e0:	d11d      	bne.n	1000911e <sms_pressure_poll_data+0x46>
        DBG_LOG_DEV("[sms_pressure_poll_data]\tStarting data polling");
100090e2:	4810      	ldr	r0, [pc, #64]	; (10009124 <sms_pressure_poll_data+0x4c>)
100090e4:	4b10      	ldr	r3, [pc, #64]	; (10009128 <sms_pressure_poll_data+0x50>)
100090e6:	4798      	blx	r3
100090e8:	4810      	ldr	r0, [pc, #64]	; (1000912c <sms_pressure_poll_data+0x54>)
100090ea:	4b11      	ldr	r3, [pc, #68]	; (10009130 <sms_pressure_poll_data+0x58>)
100090ec:	4798      	blx	r3
        if(sms_pressure_ms58_read_data() != STATUS_OK) {
100090ee:	4b11      	ldr	r3, [pc, #68]	; (10009134 <sms_pressure_poll_data+0x5c>)
100090f0:	4798      	blx	r3
100090f2:	2800      	cmp	r0, #0
100090f4:	d006      	beq.n	10009104 <sms_pressure_poll_data+0x2c>
            DBG_LOG_DEV("[sms_pressure_ms58_poll_data] problem reading ms58 data");
100090f6:	480b      	ldr	r0, [pc, #44]	; (10009124 <sms_pressure_poll_data+0x4c>)
100090f8:	4b0b      	ldr	r3, [pc, #44]	; (10009128 <sms_pressure_poll_data+0x50>)
100090fa:	4798      	blx	r3
100090fc:	480e      	ldr	r0, [pc, #56]	; (10009138 <sms_pressure_poll_data+0x60>)
100090fe:	4b0c      	ldr	r3, [pc, #48]	; (10009130 <sms_pressure_poll_data+0x58>)
10009100:	4798      	blx	r3
10009102:	e00c      	b.n	1000911e <sms_pressure_poll_data+0x46>
        }
        else {
            ////DBG_LOG_DEV("[sms_pressure_poll_data]\tDone");
            if(ms58_device.data_complete) {
10009104:	2324      	movs	r3, #36	; 0x24
10009106:	4a0d      	ldr	r2, [pc, #52]	; (1000913c <sms_pressure_poll_data+0x64>)
10009108:	5cd3      	ldrb	r3, [r2, r3]
1000910a:	2b00      	cmp	r3, #0
1000910c:	d007      	beq.n	1000911e <sms_pressure_poll_data+0x46>
                ms58_device.data_complete = false;
1000910e:	2100      	movs	r1, #0
10009110:	2324      	movs	r3, #36	; 0x24
10009112:	54d1      	strb	r1, [r2, r3]
                sms_pressure_ms58_calculate();
10009114:	4b0a      	ldr	r3, [pc, #40]	; (10009140 <sms_pressure_poll_data+0x68>)
10009116:	4798      	blx	r3
                //ms58_device.temperature = ( (ms58_device.temperature >= (int32_t)0xffffffff) ? (ms58_device.temperature = 0) : (ms58_device.temperature + 1) );
                //ms58_device.pressure = ( (ms58_device.pressure < 0) ? (ms58_device.pressure = 0xffffffff) : (ms58_device.pressure - 1) );
                sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
10009118:	2002      	movs	r0, #2
1000911a:	4b0a      	ldr	r3, [pc, #40]	; (10009144 <sms_pressure_poll_data+0x6c>)
1000911c:	4798      	blx	r3
        }
    }
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
    }        
}
1000911e:	bd10      	pop	{r4, pc}
10009120:	10016b76 	.word	0x10016b76
10009124:	10013464 	.word	0x10013464
10009128:	100123d9 	.word	0x100123d9
1000912c:	10013b4c 	.word	0x10013b4c
10009130:	100122b9 	.word	0x100122b9
10009134:	10008f2d 	.word	0x10008f2d
10009138:	10013b7c 	.word	0x10013b7c
1000913c:	10016b48 	.word	0x10016b48
10009140:	10009005 	.word	0x10009005
10009144:	10008639 	.word	0x10008639

10009148 <sms_pressure_service_init>:
    }
}


void sms_pressure_service_init(gatt_service_handler_t *sms_pressure_serv, uint8_t *sms_pressure_value)
{
10009148:	b082      	sub	sp, #8
    uint8_t init_value = 0;
    //SMS button service characteristic
    sms_pressure_serv->serv_handle = 1;
1000914a:	2301      	movs	r3, #1
1000914c:	8243      	strh	r3, [r0, #18]
    sms_pressure_serv->serv_uuid.type = AT_BLE_UUID_128;
1000914e:	3301      	adds	r3, #1
10009150:	7003      	strb	r3, [r0, #0]
    sms_pressure_serv->serv_uuid.uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10009152:	2300      	movs	r3, #0
10009154:	7043      	strb	r3, [r0, #1]
    sms_pressure_serv->serv_uuid.uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10009156:	7083      	strb	r3, [r0, #2]
    sms_pressure_serv->serv_uuid.uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10009158:	2257      	movs	r2, #87	; 0x57
1000915a:	70c2      	strb	r2, [r0, #3]
    sms_pressure_serv->serv_uuid.uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
1000915c:	3a3b      	subs	r2, #59	; 0x3b
1000915e:	7102      	strb	r2, [r0, #4]
    sms_pressure_serv->serv_uuid.uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2) & 0xFF);
10009160:	7143      	strb	r3, [r0, #5]
    sms_pressure_serv->serv_uuid.uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10009162:	7183      	strb	r3, [r0, #6]
    sms_pressure_serv->serv_uuid.uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10009164:	32a2      	adds	r2, #162	; 0xa2
10009166:	71c2      	strb	r2, [r0, #7]
    sms_pressure_serv->serv_uuid.uuid[7] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10009168:	3a64      	subs	r2, #100	; 0x64
1000916a:	7202      	strb	r2, [r0, #8]
    sms_pressure_serv->serv_uuid.uuid[8] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
1000916c:	7243      	strb	r3, [r0, #9]
    sms_pressure_serv->serv_uuid.uuid[9] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 8) & 0xFF);
1000916e:	7283      	strb	r3, [r0, #10]
    sms_pressure_serv->serv_uuid.uuid[10] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 16) & 0xFF);
10009170:	3a2a      	subs	r2, #42	; 0x2a
10009172:	72c2      	strb	r2, [r0, #11]
    sms_pressure_serv->serv_uuid.uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3 >> 24) & 0xFF);
10009174:	3220      	adds	r2, #32
10009176:	7302      	strb	r2, [r0, #12]
    sms_pressure_serv->serv_uuid.uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
10009178:	7343      	strb	r3, [r0, #13]
    sms_pressure_serv->serv_uuid.uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
1000917a:	7383      	strb	r3, [r0, #14]
    sms_pressure_serv->serv_uuid.uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
1000917c:	329e      	adds	r2, #158	; 0x9e
1000917e:	73c2      	strb	r2, [r0, #15]
    sms_pressure_serv->serv_uuid.uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
10009180:	7402      	strb	r2, [r0, #16]
    
#   if SMS_SENDING_WITH_ACK == true
    sms_pressure_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); /* Properties */
#   else
    sms_pressure_serv->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); /* Properties */
10009182:	3adc      	subs	r2, #220	; 0xdc
10009184:	8502      	strh	r2, [r0, #40]	; 0x28
#   endif
    sms_pressure_serv->serv_chars.init_value = &init_value;             /* value */
10009186:	466a      	mov	r2, sp
10009188:	3207      	adds	r2, #7
1000918a:	62c2      	str	r2, [r0, #44]	; 0x2c
    sms_pressure_serv->serv_chars.value_init_len = 8 * sizeof(uint8_t);
1000918c:	2208      	movs	r2, #8
1000918e:	8602      	strh	r2, [r0, #48]	; 0x30
    sms_pressure_serv->serv_chars.value_max_len = 8 * sizeof(uint8_t);
10009190:	8642      	strh	r2, [r0, #50]	; 0x32
    sms_pressure_serv->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR);   /* permissions */
10009192:	2111      	movs	r1, #17
10009194:	322c      	adds	r2, #44	; 0x2c
10009196:	5481      	strb	r1, [r0, r2]
    sms_pressure_serv->serv_chars.user_desc = NULL;           /* user defined name */
10009198:	6383      	str	r3, [r0, #56]	; 0x38
    sms_pressure_serv->serv_chars.user_desc_len = 0;
1000919a:	2200      	movs	r2, #0
1000919c:	8783      	strh	r3, [r0, #60]	; 0x3c
    sms_pressure_serv->serv_chars.user_desc_max_len = 0;
1000919e:	87c3      	strh	r3, [r0, #62]	; 0x3e
    sms_pressure_serv->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS;             /*user description permissions*/
100091a0:	3133      	adds	r1, #51	; 0x33
100091a2:	5442      	strb	r2, [r0, r1]
    sms_pressure_serv->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*client config permissions*/
100091a4:	3101      	adds	r1, #1
100091a6:	5442      	strb	r2, [r0, r1]
    sms_pressure_serv->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS;         /*server config permissions*/
100091a8:	3101      	adds	r1, #1
100091aa:	5442      	strb	r2, [r0, r1]
    sms_pressure_serv->serv_chars.user_desc_handle = 0;             /*user description handles*/
100091ac:	2248      	movs	r2, #72	; 0x48
100091ae:	5283      	strh	r3, [r0, r2]
    sms_pressure_serv->serv_chars.client_config_handle = 0;         /*client config handles*/
100091b0:	3202      	adds	r2, #2
100091b2:	5283      	strh	r3, [r0, r2]
    sms_pressure_serv->serv_chars.server_config_handle = 0;         /*server config handles*/
100091b4:	3202      	adds	r2, #2
100091b6:	5283      	strh	r3, [r0, r2]
    
    sms_pressure_serv->serv_chars.presentation_format = NULL;       /* presentation format */
100091b8:	6403      	str	r3, [r0, #64]	; 0x40
100091ba:	b002      	add	sp, #8
100091bc:	4770      	bx	lr
100091be:	46c0      	nop			; (mov r8, r8)

100091c0 <sms_pressure_define_services>:
    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", ms58_device.temperature, ms58_device.pressure);
}


void sms_pressure_define_services(void)
{
100091c0:	b510      	push	{r4, lr}
100091c2:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100091c4:	466b      	mov	r3, sp
100091c6:	1dd9      	adds	r1, r3, #7
100091c8:	2300      	movs	r3, #0
100091ca:	700b      	strb	r3, [r1, #0]
    sms_pressure_service_init(&sms_pressure_service_handler, &init_value);
100091cc:	4c0d      	ldr	r4, [pc, #52]	; (10009204 <sms_pressure_define_services+0x44>)
100091ce:	0020      	movs	r0, r4
100091d0:	4b0d      	ldr	r3, [pc, #52]	; (10009208 <sms_pressure_define_services+0x48>)
100091d2:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&sms_pressure_service_handler)) != AT_BLE_SUCCESS) {
100091d4:	0020      	movs	r0, r4
100091d6:	4b0d      	ldr	r3, [pc, #52]	; (1000920c <sms_pressure_define_services+0x4c>)
100091d8:	4798      	blx	r3
100091da:	1e04      	subs	r4, r0, #0
100091dc:	d007      	beq.n	100091ee <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
100091de:	480c      	ldr	r0, [pc, #48]	; (10009210 <sms_pressure_define_services+0x50>)
100091e0:	4b0c      	ldr	r3, [pc, #48]	; (10009214 <sms_pressure_define_services+0x54>)
100091e2:	4798      	blx	r3
100091e4:	0021      	movs	r1, r4
100091e6:	480c      	ldr	r0, [pc, #48]	; (10009218 <sms_pressure_define_services+0x58>)
100091e8:	4b0c      	ldr	r3, [pc, #48]	; (1000921c <sms_pressure_define_services+0x5c>)
100091ea:	4798      	blx	r3
100091ec:	e007      	b.n	100091fe <sms_pressure_define_services+0x3e>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", sms_pressure_service_handler.serv_handle);
100091ee:	4808      	ldr	r0, [pc, #32]	; (10009210 <sms_pressure_define_services+0x50>)
100091f0:	4b08      	ldr	r3, [pc, #32]	; (10009214 <sms_pressure_define_services+0x54>)
100091f2:	4798      	blx	r3
100091f4:	4b03      	ldr	r3, [pc, #12]	; (10009204 <sms_pressure_define_services+0x44>)
100091f6:	8a59      	ldrh	r1, [r3, #18]
100091f8:	4809      	ldr	r0, [pc, #36]	; (10009220 <sms_pressure_define_services+0x60>)
100091fa:	4b08      	ldr	r3, [pc, #32]	; (1000921c <sms_pressure_define_services+0x5c>)
100091fc:	4798      	blx	r3
    }
}
100091fe:	b002      	add	sp, #8
10009200:	bd10      	pop	{r4, pc}
10009202:	46c0      	nop			; (mov r8, r8)
10009204:	10016b94 	.word	0x10016b94
10009208:	10009149 	.word	0x10009149
1000920c:	1000876d 	.word	0x1000876d
10009210:	10013464 	.word	0x10013464
10009214:	100123d9 	.word	0x100123d9
10009218:	10013bb4 	.word	0x10013bb4
1000921c:	100122b9 	.word	0x100122b9
10009220:	10013bfc 	.word	0x10013bfc

10009224 <spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void spi_master_configure(void)
{
10009224:	b530      	push	{r4, r5, lr}
10009226:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009228:	ac01      	add	r4, sp, #4
1000922a:	0020      	movs	r0, r4
1000922c:	4b13      	ldr	r3, [pc, #76]	; (1000927c <spi_master_configure+0x58>)
1000922e:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009230:	2310      	movs	r3, #16
10009232:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009234:	0021      	movs	r1, r4
10009236:	4812      	ldr	r0, [pc, #72]	; (10009280 <spi_master_configure+0x5c>)
10009238:	4b12      	ldr	r3, [pc, #72]	; (10009284 <spi_master_configure+0x60>)
1000923a:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000923c:	ac02      	add	r4, sp, #8
1000923e:	0020      	movs	r0, r4
10009240:	4b11      	ldr	r3, [pc, #68]	; (10009288 <spi_master_configure+0x64>)
10009242:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009244:	2368      	movs	r3, #104	; 0x68
10009246:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009248:	2300      	movs	r3, #0
1000924a:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000924c:	3311      	adds	r3, #17
1000924e:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009250:	3b0d      	subs	r3, #13
10009252:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009254:	2213      	movs	r2, #19
10009256:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009258:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000925a:	3a14      	subs	r2, #20
1000925c:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000925e:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009260:	3213      	adds	r2, #19
10009262:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009264:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009266:	4d09      	ldr	r5, [pc, #36]	; (1000928c <spi_master_configure+0x68>)
10009268:	0022      	movs	r2, r4
1000926a:	4909      	ldr	r1, [pc, #36]	; (10009290 <spi_master_configure+0x6c>)
1000926c:	0028      	movs	r0, r5
1000926e:	4b09      	ldr	r3, [pc, #36]	; (10009294 <spi_master_configure+0x70>)
10009270:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009272:	0028      	movs	r0, r5
10009274:	4b08      	ldr	r3, [pc, #32]	; (10009298 <spi_master_configure+0x74>)
10009276:	4798      	blx	r3
}
10009278:	b00d      	add	sp, #52	; 0x34
1000927a:	bd30      	pop	{r4, r5, pc}
1000927c:	1000999d 	.word	0x1000999d
10009280:	10016b78 	.word	0x10016b78
10009284:	100099d5 	.word	0x100099d5
10009288:	100099a9 	.word	0x100099a9
1000928c:	10016b7c 	.word	0x10016b7c
10009290:	40007000 	.word	0x40007000
10009294:	10009aa5 	.word	0x10009aa5
10009298:	10009a15 	.word	0x10009a15

1000929c <spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000929c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000929e:	b083      	sub	sp, #12
100092a0:	0004      	movs	r4, r0
100092a2:	000d      	movs	r5, r1
100092a4:	9200      	str	r2, [sp, #0]
100092a6:	9301      	str	r3, [sp, #4]
100092a8:	ab08      	add	r3, sp, #32
100092aa:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
100092ac:	2201      	movs	r2, #1
100092ae:	4f08      	ldr	r7, [pc, #32]	; (100092d0 <spi_master_transceive+0x34>)
100092b0:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
100092b2:	0033      	movs	r3, r6
100092b4:	9a01      	ldr	r2, [sp, #4]
100092b6:	9900      	ldr	r1, [sp, #0]
100092b8:	0020      	movs	r0, r4
100092ba:	4e06      	ldr	r6, [pc, #24]	; (100092d4 <spi_master_transceive+0x38>)
100092bc:	47b0      	blx	r6
100092be:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
100092c0:	2200      	movs	r2, #0
100092c2:	0029      	movs	r1, r5
100092c4:	0020      	movs	r0, r4
100092c6:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
100092c8:	0030      	movs	r0, r6
100092ca:	b003      	add	sp, #12
100092cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100092ce:	46c0      	nop			; (mov r8, r8)
100092d0:	10009c8d 	.word	0x10009c8d
100092d4:	10009c09 	.word	0x10009c09

100092d8 <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
100092d8:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_AON_TIMER;
100092da:	2204      	movs	r2, #4
100092dc:	4b04      	ldr	r3, [pc, #16]	; (100092f0 <sms_timer_aon_callback+0x18>)
100092de:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
100092e0:	2300      	movs	r3, #0
100092e2:	2200      	movs	r2, #0
100092e4:	2103      	movs	r1, #3
100092e6:	2042      	movs	r0, #66	; 0x42
100092e8:	4c02      	ldr	r4, [pc, #8]	; (100092f4 <sms_timer_aon_callback+0x1c>)
100092ea:	47a0      	blx	r4
}
100092ec:	bd10      	pop	{r4, pc}
100092ee:	46c0      	nop			; (mov r8, r8)
100092f0:	10016b70 	.word	0x10016b70
100092f4:	1000d2c1 	.word	0x1000d2c1

100092f8 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
100092f8:	b530      	push	{r4, r5, lr}
100092fa:	b083      	sub	sp, #12
100092fc:	0004      	movs	r4, r0
100092fe:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009300:	4668      	mov	r0, sp
10009302:	4b05      	ldr	r3, [pc, #20]	; (10009318 <sms_timer_aon_init+0x20>)
10009304:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009306:	466b      	mov	r3, sp
10009308:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
1000930a:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000930c:	4668      	mov	r0, sp
1000930e:	4b03      	ldr	r3, [pc, #12]	; (1000931c <sms_timer_aon_init+0x24>)
10009310:	4798      	blx	r3
}
10009312:	b003      	add	sp, #12
10009314:	bd30      	pop	{r4, r5, pc}
10009316:	46c0      	nop			; (mov r8, r8)
10009318:	100080e9 	.word	0x100080e9
1000931c:	1000815d 	.word	0x1000815d

10009320 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009320:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009322:	4b01      	ldr	r3, [pc, #4]	; (10009328 <sms_timer_aon_disable+0x8>)
10009324:	4798      	blx	r3
}
10009326:	bd10      	pop	{r4, pc}
10009328:	100080f9 	.word	0x100080f9

1000932c <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000932c:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000932e:	4804      	ldr	r0, [pc, #16]	; (10009340 <sms_timer_aon_register_callback+0x14>)
10009330:	4b04      	ldr	r3, [pc, #16]	; (10009344 <sms_timer_aon_register_callback+0x18>)
10009332:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009334:	2280      	movs	r2, #128	; 0x80
10009336:	0512      	lsls	r2, r2, #20
10009338:	4b03      	ldr	r3, [pc, #12]	; (10009348 <sms_timer_aon_register_callback+0x1c>)
1000933a:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000933c:	bd10      	pop	{r4, pc}
1000933e:	46c0      	nop			; (mov r8, r8)
10009340:	100092d9 	.word	0x100092d9
10009344:	10008145 	.word	0x10008145
10009348:	e000e100 	.word	0xe000e100

1000934c <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000934c:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000934e:	4b04      	ldr	r3, [pc, #16]	; (10009360 <sms_timer_aon_unregister_callback+0x14>)
10009350:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009352:	2180      	movs	r1, #128	; 0x80
10009354:	0509      	lsls	r1, r1, #20
10009356:	2380      	movs	r3, #128	; 0x80
10009358:	4a02      	ldr	r2, [pc, #8]	; (10009364 <sms_timer_aon_unregister_callback+0x18>)
1000935a:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000935c:	bd10      	pop	{r4, pc}
1000935e:	46c0      	nop			; (mov r8, r8)
10009360:	10008151 	.word	0x10008151
10009364:	e000e100 	.word	0xe000e100

10009368 <sms_dualtimer_init>:


/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009368:	b510      	push	{r4, lr}
1000936a:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000936c:	ac01      	add	r4, sp, #4
1000936e:	0020      	movs	r0, r4
10009370:	4b08      	ldr	r3, [pc, #32]	; (10009394 <sms_dualtimer_init+0x2c>)
10009372:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009374:	4a08      	ldr	r2, [pc, #32]	; (10009398 <sms_dualtimer_init+0x30>)
10009376:	60a2      	str	r2, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009378:	2300      	movs	r3, #0
1000937a:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_S;
1000937c:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000937e:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009380:	0020      	movs	r0, r4
10009382:	4b06      	ldr	r3, [pc, #24]	; (1000939c <sms_dualtimer_init+0x34>)
10009384:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009386:	2000      	movs	r0, #0
10009388:	4c05      	ldr	r4, [pc, #20]	; (100093a0 <sms_dualtimer_init+0x38>)
1000938a:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000938c:	2001      	movs	r0, #1
1000938e:	47a0      	blx	r4
}
10009390:	b008      	add	sp, #32
10009392:	bd10      	pop	{r4, pc}
10009394:	10009cf1 	.word	0x10009cf1
10009398:	018cba80 	.word	0x018cba80
1000939c:	10009d85 	.word	0x10009d85
100093a0:	10009d61 	.word	0x10009d61

100093a4 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
100093a4:	b510      	push	{r4, lr}
100093a6:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
100093a8:	4b02      	ldr	r3, [pc, #8]	; (100093b4 <sms_dualtimer_register_callback+0x10>)
100093aa:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
100093ac:	0020      	movs	r0, r4
100093ae:	4b02      	ldr	r3, [pc, #8]	; (100093b8 <sms_dualtimer_register_callback+0x14>)
100093b0:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
100093b2:	bd10      	pop	{r4, pc}
100093b4:	10009e89 	.word	0x10009e89
100093b8:	10009d61 	.word	0x10009d61

100093bc <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
100093bc:	b510      	push	{r4, lr}
100093be:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
100093c0:	2801      	cmp	r0, #1
100093c2:	d006      	beq.n	100093d2 <sms_dualtimer_start+0x16>
100093c4:	2800      	cmp	r0, #0
100093c6:	d002      	beq.n	100093ce <sms_dualtimer_start+0x12>
100093c8:	2802      	cmp	r0, #2
100093ca:	d004      	beq.n	100093d6 <sms_dualtimer_start+0x1a>
100093cc:	e005      	b.n	100093da <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
100093ce:	221a      	movs	r2, #26
100093d0:	e004      	b.n	100093dc <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
100093d2:	4a0c      	ldr	r2, [pc, #48]	; (10009404 <sms_dualtimer_start+0x48>)
        break;
100093d4:	e002      	b.n	100093dc <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
100093d6:	4a0c      	ldr	r2, [pc, #48]	; (10009408 <sms_dualtimer_start+0x4c>)
        break;
100093d8:	e000      	b.n	100093dc <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
100093da:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
100093dc:	2900      	cmp	r1, #0
100093de:	d101      	bne.n	100093e4 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
100093e0:	21fa      	movs	r1, #250	; 0xfa
100093e2:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
100093e4:	2000      	movs	r0, #0
100093e6:	4b09      	ldr	r3, [pc, #36]	; (1000940c <sms_dualtimer_start+0x50>)
100093e8:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
100093ea:	434a      	muls	r2, r1
100093ec:	2100      	movs	r1, #0
100093ee:	0020      	movs	r0, r4
100093f0:	4b07      	ldr	r3, [pc, #28]	; (10009410 <sms_dualtimer_start+0x54>)
100093f2:	4798      	blx	r3
    dualtimer_enable(tmr);
100093f4:	0020      	movs	r0, r4
100093f6:	4b07      	ldr	r3, [pc, #28]	; (10009414 <sms_dualtimer_start+0x58>)
100093f8:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
100093fa:	2280      	movs	r2, #128	; 0x80
100093fc:	01d2      	lsls	r2, r2, #7
100093fe:	4b06      	ldr	r3, [pc, #24]	; (10009418 <sms_dualtimer_start+0x5c>)
10009400:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
10009402:	bd10      	pop	{r4, pc}
10009404:	00006590 	.word	0x00006590
10009408:	018cba80 	.word	0x018cba80
1000940c:	10016ace 	.word	0x10016ace
10009410:	10009d15 	.word	0x10009d15
10009414:	10009d3d 	.word	0x10009d3d
10009418:	e000e100 	.word	0xe000e100

1000941c <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000941c:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000941e:	4b01      	ldr	r3, [pc, #4]	; (10009424 <sms_dualtimer_stop+0x8>)
10009420:	4798      	blx	r3
}
10009422:	bd10      	pop	{r4, pc}
10009424:	10009d61 	.word	0x10009d61

10009428 <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
10009428:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER1;
1000942a:	2205      	movs	r2, #5
1000942c:	4b04      	ldr	r3, [pc, #16]	; (10009440 <sms_dualtimer1_cb+0x18>)
1000942e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009430:	2300      	movs	r3, #0
10009432:	2200      	movs	r2, #0
10009434:	2101      	movs	r1, #1
10009436:	2040      	movs	r0, #64	; 0x40
10009438:	4c02      	ldr	r4, [pc, #8]	; (10009444 <sms_dualtimer1_cb+0x1c>)
1000943a:	47a0      	blx	r4
}
1000943c:	bd10      	pop	{r4, pc}
1000943e:	46c0      	nop			; (mov r8, r8)
10009440:	10016b70 	.word	0x10016b70
10009444:	1000d2c1 	.word	0x1000d2c1

10009448 <sms_dualtimer2_cb>:

void sms_dualtimer2_cb(void)
{
10009448:	b510      	push	{r4, lr}
    sms_current_interrupt.source = INT_DUALTIMER2;
1000944a:	2206      	movs	r2, #6
1000944c:	4b04      	ldr	r3, [pc, #16]	; (10009460 <sms_dualtimer2_cb+0x18>)
1000944e:	701a      	strb	r2, [r3, #0]
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
10009450:	2300      	movs	r3, #0
10009452:	2200      	movs	r2, #0
10009454:	2101      	movs	r1, #1
10009456:	2041      	movs	r0, #65	; 0x41
10009458:	4c02      	ldr	r4, [pc, #8]	; (10009464 <sms_dualtimer2_cb+0x1c>)
1000945a:	47a0      	blx	r4
}
1000945c:	bd10      	pop	{r4, pc}
1000945e:	46c0      	nop			; (mov r8, r8)
10009460:	10016b70 	.word	0x10016b70
10009464:	1000d2c1 	.word	0x1000d2c1

10009468 <sms_dualtimer1_fn>:


void sms_dualtimer1_fn(void)
{
10009468:	b570      	push	{r4, r5, r6, lr}
    sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
1000946a:	2101      	movs	r1, #1
1000946c:	2001      	movs	r0, #1
1000946e:	4bc8      	ldr	r3, [pc, #800]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009470:	4798      	blx	r3
    switch(timer1_current_mode) {
10009472:	4bc8      	ldr	r3, [pc, #800]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009474:	781b      	ldrb	r3, [r3, #0]
10009476:	b2db      	uxtb	r3, r3
10009478:	2b02      	cmp	r3, #2
1000947a:	d006      	beq.n	1000948a <sms_dualtimer1_fn+0x22>
1000947c:	2b03      	cmp	r3, #3
1000947e:	d100      	bne.n	10009482 <sms_dualtimer1_fn+0x1a>
10009480:	e138      	b.n	100096f4 <sms_dualtimer1_fn+0x28c>
10009482:	2b01      	cmp	r3, #1
10009484:	d000      	beq.n	10009488 <sms_dualtimer1_fn+0x20>
10009486:	e176      	b.n	10009776 <sms_dualtimer1_fn+0x30e>
10009488:	e054      	b.n	10009534 <sms_dualtimer1_fn+0xcc>
        /* Timer1 mode = MS58_RESET */
        case TIMER1_MODE_MS58_RESET:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000948a:	2200      	movs	r2, #0
1000948c:	4bc1      	ldr	r3, [pc, #772]	; (10009794 <sms_dualtimer1_fn+0x32c>)
1000948e:	701a      	strb	r2, [r3, #0]
            ms58_device.reset_done = true;
10009490:	4bc1      	ldr	r3, [pc, #772]	; (10009798 <sms_dualtimer1_fn+0x330>)
10009492:	2101      	movs	r1, #1
10009494:	7059      	strb	r1, [r3, #1]
            ms58_device.init_retry = 0;
10009496:	3125      	adds	r1, #37	; 0x25
10009498:	545a      	strb	r2, [r3, r1]
            if(sms_pressure_init() != STATUS_OK) {
1000949a:	4bc0      	ldr	r3, [pc, #768]	; (1000979c <sms_dualtimer1_fn+0x334>)
1000949c:	4798      	blx	r3
1000949e:	2800      	cmp	r0, #0
100094a0:	d031      	beq.n	10009506 <sms_dualtimer1_fn+0x9e>
                DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to init ms58 device");
100094a2:	48bf      	ldr	r0, [pc, #764]	; (100097a0 <sms_dualtimer1_fn+0x338>)
100094a4:	4bbf      	ldr	r3, [pc, #764]	; (100097a4 <sms_dualtimer1_fn+0x33c>)
100094a6:	4798      	blx	r3
100094a8:	48bf      	ldr	r0, [pc, #764]	; (100097a8 <sms_dualtimer1_fn+0x340>)
100094aa:	4bc0      	ldr	r3, [pc, #768]	; (100097ac <sms_dualtimer1_fn+0x344>)
100094ac:	4798      	blx	r3
                ms58_device.init_retry++;
100094ae:	49ba      	ldr	r1, [pc, #744]	; (10009798 <sms_dualtimer1_fn+0x330>)
100094b0:	2226      	movs	r2, #38	; 0x26
100094b2:	5c8b      	ldrb	r3, [r1, r2]
100094b4:	3301      	adds	r3, #1
100094b6:	b2db      	uxtb	r3, r3
100094b8:	548b      	strb	r3, [r1, r2]
                if(ms58_device.init_retry >= MS58_INIT_RETRY_MAX) {
100094ba:	5c8b      	ldrb	r3, [r1, r2]
100094bc:	b2db      	uxtb	r3, r3
100094be:	2b03      	cmp	r3, #3
100094c0:	d918      	bls.n	100094f4 <sms_dualtimer1_fn+0x8c>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\tFailed to initialize pressure sensor. Working mode = BUTTON_SOLO");
100094c2:	48b7      	ldr	r0, [pc, #732]	; (100097a0 <sms_dualtimer1_fn+0x338>)
100094c4:	4bb7      	ldr	r3, [pc, #732]	; (100097a4 <sms_dualtimer1_fn+0x33c>)
100094c6:	4798      	blx	r3
100094c8:	48b9      	ldr	r0, [pc, #740]	; (100097b0 <sms_dualtimer1_fn+0x348>)
100094ca:	4bb8      	ldr	r3, [pc, #736]	; (100097ac <sms_dualtimer1_fn+0x344>)
100094cc:	4798      	blx	r3
                    ms58_device.current_state = MS58_STATE_NONE;
100094ce:	2100      	movs	r1, #0
100094d0:	2325      	movs	r3, #37	; 0x25
100094d2:	4ab1      	ldr	r2, [pc, #708]	; (10009798 <sms_dualtimer1_fn+0x330>)
100094d4:	54d1      	strb	r1, [r2, r3]
                    sms_working_mode = SMS_MODE_BUTTON_SOLO;
100094d6:	2201      	movs	r2, #1
100094d8:	4bb6      	ldr	r3, [pc, #728]	; (100097b4 <sms_dualtimer1_fn+0x34c>)
100094da:	701a      	strb	r2, [r3, #0]
                    // Init IMU device...
                    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100094dc:	2000      	movs	r0, #0
100094de:	4bac      	ldr	r3, [pc, #688]	; (10009790 <sms_dualtimer1_fn+0x328>)
100094e0:	4798      	blx	r3
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
100094e2:	4bb5      	ldr	r3, [pc, #724]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100094e4:	781b      	ldrb	r3, [r3, #0]
100094e6:	2b00      	cmp	r3, #0
100094e8:	d000      	beq.n	100094ec <sms_dualtimer1_fn+0x84>
100094ea:	e14f      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        //release_sleep_lock();
                        ulp_ready = true;
100094ec:	2201      	movs	r2, #1
100094ee:	4bb3      	ldr	r3, [pc, #716]	; (100097bc <sms_dualtimer1_fn+0x354>)
100094f0:	701a      	strb	r2, [r3, #0]
100094f2:	e14b      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    }                        
                }
                else {
                    timer1_current_mode = TIMER1_MODE_MS58_RESET;
100094f4:	2202      	movs	r2, #2
100094f6:	4ba7      	ldr	r3, [pc, #668]	; (10009794 <sms_dualtimer1_fn+0x32c>)
100094f8:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, MS58_RESET_WAIT_MS, DUALTIMER_TIMER1);
100094fa:	2200      	movs	r2, #0
100094fc:	2103      	movs	r1, #3
100094fe:	2001      	movs	r0, #1
10009500:	4baf      	ldr	r3, [pc, #700]	; (100097c0 <sms_dualtimer1_fn+0x358>)
10009502:	4798      	blx	r3
10009504:	e142      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                }
            }
            else {
                ms58_device.current_state = MS58_STATE_READY;
10009506:	2102      	movs	r1, #2
10009508:	2325      	movs	r3, #37	; 0x25
1000950a:	4aa3      	ldr	r2, [pc, #652]	; (10009798 <sms_dualtimer1_fn+0x330>)
1000950c:	54d1      	strb	r1, [r2, r3]
                sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000950e:	2205      	movs	r2, #5
10009510:	4ba8      	ldr	r3, [pc, #672]	; (100097b4 <sms_dualtimer1_fn+0x34c>)
10009512:	701a      	strb	r2, [r3, #0]
                //DBG_LOG_DEV("[sms_dualtimer1_fn]\tPressure sensor initialized. Working mode = BUTTON_PRESSURE");
                sms_sensors_toggle_interrupt(SMS_EXT_INT_ENABLE);
10009514:	2000      	movs	r0, #0
10009516:	4bab      	ldr	r3, [pc, #684]	; (100097c4 <sms_dualtimer1_fn+0x35c>)
10009518:	4798      	blx	r3
                // Init IMU device...
                sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
1000951a:	2100      	movs	r1, #0
1000951c:	2000      	movs	r0, #0
1000951e:	4b9c      	ldr	r3, [pc, #624]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009520:	4798      	blx	r3
                if(timer2_current_mode == TIMER2_MODE_NONE) {
10009522:	4ba5      	ldr	r3, [pc, #660]	; (100097b8 <sms_dualtimer1_fn+0x350>)
10009524:	781b      	ldrb	r3, [r3, #0]
10009526:	2b00      	cmp	r3, #0
10009528:	d000      	beq.n	1000952c <sms_dualtimer1_fn+0xc4>
1000952a:	e12f      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    //release_sleep_lock();
                    ulp_ready = true;
1000952c:	2201      	movs	r2, #1
1000952e:	4ba3      	ldr	r3, [pc, #652]	; (100097bc <sms_dualtimer1_fn+0x354>)
10009530:	701a      	strb	r2, [r3, #0]
10009532:	e12b      	b.n	1000978c <sms_dualtimer1_fn+0x324>
        }
        
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
10009534:	2200      	movs	r2, #0
10009536:	4b97      	ldr	r3, [pc, #604]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009538:	701a      	strb	r2, [r3, #0]
            button_previous_state = button_current_state;
1000953a:	4da3      	ldr	r5, [pc, #652]	; (100097c8 <sms_dualtimer1_fn+0x360>)
1000953c:	782b      	ldrb	r3, [r5, #0]
1000953e:	b2db      	uxtb	r3, r3
10009540:	4ca2      	ldr	r4, [pc, #648]	; (100097cc <sms_dualtimer1_fn+0x364>)
10009542:	7023      	strb	r3, [r4, #0]
            button_current_state = sms_button_get_state();
10009544:	4ba2      	ldr	r3, [pc, #648]	; (100097d0 <sms_dualtimer1_fn+0x368>)
10009546:	4798      	blx	r3
10009548:	7028      	strb	r0, [r5, #0]
            sms_monitor_states("[sms_dualtimer1_fn]");
1000954a:	48a2      	ldr	r0, [pc, #648]	; (100097d4 <sms_dualtimer1_fn+0x36c>)
1000954c:	4ba2      	ldr	r3, [pc, #648]	; (100097d8 <sms_dualtimer1_fn+0x370>)
1000954e:	4798      	blx	r3
            
            switch(button_previous_state) {
10009550:	7823      	ldrb	r3, [r4, #0]
10009552:	b2db      	uxtb	r3, r3
10009554:	2b01      	cmp	r3, #1
10009556:	d002      	beq.n	1000955e <sms_dualtimer1_fn+0xf6>
10009558:	2b02      	cmp	r3, #2
1000955a:	d061      	beq.n	10009620 <sms_dualtimer1_fn+0x1b8>
1000955c:	e0be      	b.n	100096dc <sms_dualtimer1_fn+0x274>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_current_state) {
1000955e:	4b9a      	ldr	r3, [pc, #616]	; (100097c8 <sms_dualtimer1_fn+0x360>)
10009560:	781b      	ldrb	r3, [r3, #0]
10009562:	b2db      	uxtb	r3, r3
10009564:	2b01      	cmp	r3, #1
10009566:	d002      	beq.n	1000956e <sms_dualtimer1_fn+0x106>
10009568:	2b02      	cmp	r3, #2
1000956a:	d02b      	beq.n	100095c4 <sms_dualtimer1_fn+0x15c>
1000956c:	e04b      	b.n	10009606 <sms_dualtimer1_fn+0x19e>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000956e:	4b9b      	ldr	r3, [pc, #620]	; (100097dc <sms_dualtimer1_fn+0x374>)
10009570:	781b      	ldrb	r3, [r3, #0]
10009572:	2b00      	cmp	r3, #0
10009574:	d119      	bne.n	100095aa <sms_dualtimer1_fn+0x142>
                        sms_btn_cnt++;
10009576:	4a9a      	ldr	r2, [pc, #616]	; (100097e0 <sms_dualtimer1_fn+0x378>)
10009578:	7813      	ldrb	r3, [r2, #0]
1000957a:	3301      	adds	r3, #1
1000957c:	b2db      	uxtb	r3, r3
1000957e:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
10009580:	2b0f      	cmp	r3, #15
10009582:	d905      	bls.n	10009590 <sms_dualtimer1_fn+0x128>
                            timer1_current_mode = TIMER1_MODE_NONE;
10009584:	2200      	movs	r2, #0
10009586:	4b83      	ldr	r3, [pc, #524]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009588:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000958a:	4b96      	ldr	r3, [pc, #600]	; (100097e4 <sms_dualtimer1_fn+0x37c>)
1000958c:	4798      	blx	r3
1000958e:	e0fd      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        }
                        else {
                            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009590:	2100      	movs	r1, #0
10009592:	2000      	movs	r0, #0
10009594:	4b7e      	ldr	r3, [pc, #504]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009596:	4798      	blx	r3
                            timer1_current_mode = TIMER1_MODE_STARTUP;
10009598:	2201      	movs	r2, #1
1000959a:	4b7e      	ldr	r3, [pc, #504]	; (10009794 <sms_dualtimer1_fn+0x32c>)
1000959c:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000959e:	2200      	movs	r2, #0
100095a0:	21fa      	movs	r1, #250	; 0xfa
100095a2:	2001      	movs	r0, #1
100095a4:	4b86      	ldr	r3, [pc, #536]	; (100097c0 <sms_dualtimer1_fn+0x358>)
100095a6:	4798      	blx	r3
100095a8:	e0f0      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        }
                    }
                    else {
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100095aa:	2100      	movs	r1, #0
100095ac:	2000      	movs	r0, #0
100095ae:	4b78      	ldr	r3, [pc, #480]	; (10009790 <sms_dualtimer1_fn+0x328>)
100095b0:	4798      	blx	r3
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
100095b2:	4b81      	ldr	r3, [pc, #516]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100095b4:	781b      	ldrb	r3, [r3, #0]
100095b6:	2b00      	cmp	r3, #0
100095b8:	d000      	beq.n	100095bc <sms_dualtimer1_fn+0x154>
100095ba:	e0e7      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                            //release_sleep_lock();
                            ulp_ready = true;
100095bc:	2201      	movs	r2, #1
100095be:	4b7f      	ldr	r3, [pc, #508]	; (100097bc <sms_dualtimer1_fn+0x354>)
100095c0:	701a      	strb	r2, [r3, #0]
100095c2:	e0e3      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
100095c4:	4b85      	ldr	r3, [pc, #532]	; (100097dc <sms_dualtimer1_fn+0x374>)
100095c6:	781b      	ldrb	r3, [r3, #0]
100095c8:	2b00      	cmp	r3, #0
100095ca:	d10f      	bne.n	100095ec <sms_dualtimer1_fn+0x184>
                        sms_btn_cnt = 0;
100095cc:	2200      	movs	r2, #0
100095ce:	4b84      	ldr	r3, [pc, #528]	; (100097e0 <sms_dualtimer1_fn+0x378>)
100095d0:	701a      	strb	r2, [r3, #0]
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100095d2:	2100      	movs	r1, #0
100095d4:	2000      	movs	r0, #0
100095d6:	4b6e      	ldr	r3, [pc, #440]	; (10009790 <sms_dualtimer1_fn+0x328>)
100095d8:	4798      	blx	r3
                        timer1_current_mode = TIMER1_MODE_STARTUP;
100095da:	2201      	movs	r2, #1
100095dc:	4b6d      	ldr	r3, [pc, #436]	; (10009794 <sms_dualtimer1_fn+0x32c>)
100095de:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
100095e0:	2200      	movs	r2, #0
100095e2:	2164      	movs	r1, #100	; 0x64
100095e4:	2001      	movs	r0, #1
100095e6:	4b76      	ldr	r3, [pc, #472]	; (100097c0 <sms_dualtimer1_fn+0x358>)
100095e8:	4798      	blx	r3
100095ea:	e0cf      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    }
                    else {
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100095ec:	2100      	movs	r1, #0
100095ee:	2000      	movs	r0, #0
100095f0:	4b67      	ldr	r3, [pc, #412]	; (10009790 <sms_dualtimer1_fn+0x328>)
100095f2:	4798      	blx	r3
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
100095f4:	4b70      	ldr	r3, [pc, #448]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100095f6:	781b      	ldrb	r3, [r3, #0]
100095f8:	2b00      	cmp	r3, #0
100095fa:	d000      	beq.n	100095fe <sms_dualtimer1_fn+0x196>
100095fc:	e0c6      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                            //release_sleep_lock();
                            ulp_ready = true;
100095fe:	2201      	movs	r2, #1
10009600:	4b6e      	ldr	r3, [pc, #440]	; (100097bc <sms_dualtimer1_fn+0x354>)
10009602:	701a      	strb	r2, [r3, #0]
10009604:	e0c2      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009606:	2100      	movs	r1, #0
10009608:	2000      	movs	r0, #0
1000960a:	4b61      	ldr	r3, [pc, #388]	; (10009790 <sms_dualtimer1_fn+0x328>)
1000960c:	4798      	blx	r3
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000960e:	4b6a      	ldr	r3, [pc, #424]	; (100097b8 <sms_dualtimer1_fn+0x350>)
10009610:	781b      	ldrb	r3, [r3, #0]
10009612:	2b00      	cmp	r3, #0
10009614:	d000      	beq.n	10009618 <sms_dualtimer1_fn+0x1b0>
10009616:	e0b9      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        //release_sleep_lock();
                        ulp_ready = true;
10009618:	2201      	movs	r2, #1
1000961a:	4b68      	ldr	r3, [pc, #416]	; (100097bc <sms_dualtimer1_fn+0x354>)
1000961c:	701a      	strb	r2, [r3, #0]
1000961e:	e0b5      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_current_state) {
10009620:	4b69      	ldr	r3, [pc, #420]	; (100097c8 <sms_dualtimer1_fn+0x360>)
10009622:	781b      	ldrb	r3, [r3, #0]
10009624:	b2db      	uxtb	r3, r3
10009626:	2b01      	cmp	r3, #1
10009628:	d02c      	beq.n	10009684 <sms_dualtimer1_fn+0x21c>
1000962a:	2b02      	cmp	r3, #2
1000962c:	d14a      	bne.n	100096c4 <sms_dualtimer1_fn+0x25c>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
1000962e:	4b6b      	ldr	r3, [pc, #428]	; (100097dc <sms_dualtimer1_fn+0x374>)
10009630:	781b      	ldrb	r3, [r3, #0]
10009632:	2b00      	cmp	r3, #0
10009634:	d119      	bne.n	1000966a <sms_dualtimer1_fn+0x202>
                        sms_btn_cnt++;
10009636:	4a6a      	ldr	r2, [pc, #424]	; (100097e0 <sms_dualtimer1_fn+0x378>)
10009638:	7813      	ldrb	r3, [r2, #0]
1000963a:	3301      	adds	r3, #1
1000963c:	b2db      	uxtb	r3, r3
1000963e:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
10009640:	2b0f      	cmp	r3, #15
10009642:	d905      	bls.n	10009650 <sms_dualtimer1_fn+0x1e8>
                            timer1_current_mode = TIMER1_MODE_NONE;
10009644:	2200      	movs	r2, #0
10009646:	4b53      	ldr	r3, [pc, #332]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009648:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000964a:	4b66      	ldr	r3, [pc, #408]	; (100097e4 <sms_dualtimer1_fn+0x37c>)
1000964c:	4798      	blx	r3
1000964e:	e09d      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        }
                        else {
                            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009650:	2100      	movs	r1, #0
10009652:	2000      	movs	r0, #0
10009654:	4b4e      	ldr	r3, [pc, #312]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009656:	4798      	blx	r3
                            timer1_current_mode = TIMER1_MODE_STARTUP;
10009658:	2201      	movs	r2, #1
1000965a:	4b4e      	ldr	r3, [pc, #312]	; (10009794 <sms_dualtimer1_fn+0x32c>)
1000965c:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000965e:	2200      	movs	r2, #0
10009660:	21fa      	movs	r1, #250	; 0xfa
10009662:	2001      	movs	r0, #1
10009664:	4b56      	ldr	r3, [pc, #344]	; (100097c0 <sms_dualtimer1_fn+0x358>)
10009666:	4798      	blx	r3
10009668:	e090      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                        }
                    }
                    else {
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
1000966a:	2100      	movs	r1, #0
1000966c:	2000      	movs	r0, #0
1000966e:	4b48      	ldr	r3, [pc, #288]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009670:	4798      	blx	r3
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
10009672:	4b51      	ldr	r3, [pc, #324]	; (100097b8 <sms_dualtimer1_fn+0x350>)
10009674:	781b      	ldrb	r3, [r3, #0]
10009676:	2b00      	cmp	r3, #0
10009678:	d000      	beq.n	1000967c <sms_dualtimer1_fn+0x214>
1000967a:	e087      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                            //release_sleep_lock();
                            ulp_ready = true;
1000967c:	2201      	movs	r2, #1
1000967e:	4b4f      	ldr	r3, [pc, #316]	; (100097bc <sms_dualtimer1_fn+0x354>)
10009680:	701a      	strb	r2, [r3, #0]
10009682:	e083      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_current_state == BLE_STATE_POWEROFF) {
10009684:	4b55      	ldr	r3, [pc, #340]	; (100097dc <sms_dualtimer1_fn+0x374>)
10009686:	781b      	ldrb	r3, [r3, #0]
10009688:	2b00      	cmp	r3, #0
1000968a:	d10f      	bne.n	100096ac <sms_dualtimer1_fn+0x244>
                        sms_btn_cnt = 0;
1000968c:	2200      	movs	r2, #0
1000968e:	4b54      	ldr	r3, [pc, #336]	; (100097e0 <sms_dualtimer1_fn+0x378>)
10009690:	701a      	strb	r2, [r3, #0]
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009692:	2100      	movs	r1, #0
10009694:	2000      	movs	r0, #0
10009696:	4b3e      	ldr	r3, [pc, #248]	; (10009790 <sms_dualtimer1_fn+0x328>)
10009698:	4798      	blx	r3
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000969a:	2201      	movs	r2, #1
1000969c:	4b3d      	ldr	r3, [pc, #244]	; (10009794 <sms_dualtimer1_fn+0x32c>)
1000969e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
100096a0:	2200      	movs	r2, #0
100096a2:	2164      	movs	r1, #100	; 0x64
100096a4:	2001      	movs	r0, #1
100096a6:	4b46      	ldr	r3, [pc, #280]	; (100097c0 <sms_dualtimer1_fn+0x358>)
100096a8:	4798      	blx	r3
100096aa:	e06f      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    }
                    else {
                        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100096ac:	2100      	movs	r1, #0
100096ae:	2000      	movs	r0, #0
100096b0:	4b37      	ldr	r3, [pc, #220]	; (10009790 <sms_dualtimer1_fn+0x328>)
100096b2:	4798      	blx	r3
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
100096b4:	4b40      	ldr	r3, [pc, #256]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100096b6:	781b      	ldrb	r3, [r3, #0]
100096b8:	2b00      	cmp	r3, #0
100096ba:	d167      	bne.n	1000978c <sms_dualtimer1_fn+0x324>
                            //release_sleep_lock();
                            ulp_ready = true;
100096bc:	2201      	movs	r2, #1
100096be:	4b3f      	ldr	r3, [pc, #252]	; (100097bc <sms_dualtimer1_fn+0x354>)
100096c0:	701a      	strb	r2, [r3, #0]
100096c2:	e063      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100096c4:	2100      	movs	r1, #0
100096c6:	2000      	movs	r0, #0
100096c8:	4b31      	ldr	r3, [pc, #196]	; (10009790 <sms_dualtimer1_fn+0x328>)
100096ca:	4798      	blx	r3
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
100096cc:	4b3a      	ldr	r3, [pc, #232]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100096ce:	781b      	ldrb	r3, [r3, #0]
100096d0:	2b00      	cmp	r3, #0
100096d2:	d15b      	bne.n	1000978c <sms_dualtimer1_fn+0x324>
                        //release_sleep_lock();
                        ulp_ready = true;
100096d4:	2201      	movs	r2, #1
100096d6:	4b39      	ldr	r3, [pc, #228]	; (100097bc <sms_dualtimer1_fn+0x354>)
100096d8:	701a      	strb	r2, [r3, #0]
100096da:	e057      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100096dc:	2100      	movs	r1, #0
100096de:	2000      	movs	r0, #0
100096e0:	4b2b      	ldr	r3, [pc, #172]	; (10009790 <sms_dualtimer1_fn+0x328>)
100096e2:	4798      	blx	r3
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
100096e4:	4b34      	ldr	r3, [pc, #208]	; (100097b8 <sms_dualtimer1_fn+0x350>)
100096e6:	781b      	ldrb	r3, [r3, #0]
100096e8:	2b00      	cmp	r3, #0
100096ea:	d14f      	bne.n	1000978c <sms_dualtimer1_fn+0x324>
                        //release_sleep_lock();
                        ulp_ready = true;
100096ec:	2201      	movs	r2, #1
100096ee:	4b33      	ldr	r3, [pc, #204]	; (100097bc <sms_dualtimer1_fn+0x354>)
100096f0:	701a      	strb	r2, [r3, #0]
100096f2:	e04b      	b.n	1000978c <sms_dualtimer1_fn+0x324>
        }
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
100096f4:	2200      	movs	r2, #0
100096f6:	4b27      	ldr	r3, [pc, #156]	; (10009794 <sms_dualtimer1_fn+0x32c>)
100096f8:	701a      	strb	r2, [r3, #0]
            button_previous_state = button_current_state;
100096fa:	4d33      	ldr	r5, [pc, #204]	; (100097c8 <sms_dualtimer1_fn+0x360>)
100096fc:	782b      	ldrb	r3, [r5, #0]
100096fe:	b2db      	uxtb	r3, r3
10009700:	4c32      	ldr	r4, [pc, #200]	; (100097cc <sms_dualtimer1_fn+0x364>)
10009702:	7023      	strb	r3, [r4, #0]
            button_current_state = sms_button_get_state();
10009704:	4b32      	ldr	r3, [pc, #200]	; (100097d0 <sms_dualtimer1_fn+0x368>)
10009706:	4798      	blx	r3
10009708:	7028      	strb	r0, [r5, #0]
            sms_monitor_states("[sms_dualtimer1_fn]");
1000970a:	4832      	ldr	r0, [pc, #200]	; (100097d4 <sms_dualtimer1_fn+0x36c>)
1000970c:	4b32      	ldr	r3, [pc, #200]	; (100097d8 <sms_dualtimer1_fn+0x370>)
1000970e:	4798      	blx	r3
            
            if((button_previous_state == BUTTON_STATE_BOTH) && (button_current_state == BUTTON_STATE_BOTH)) {
10009710:	7823      	ldrb	r3, [r4, #0]
10009712:	2b03      	cmp	r3, #3
10009714:	d11d      	bne.n	10009752 <sms_dualtimer1_fn+0x2ea>
10009716:	4b2c      	ldr	r3, [pc, #176]	; (100097c8 <sms_dualtimer1_fn+0x360>)
10009718:	781b      	ldrb	r3, [r3, #0]
1000971a:	2b03      	cmp	r3, #3
1000971c:	d119      	bne.n	10009752 <sms_dualtimer1_fn+0x2ea>
                sms_btn_cnt++;
1000971e:	4a30      	ldr	r2, [pc, #192]	; (100097e0 <sms_dualtimer1_fn+0x378>)
10009720:	7813      	ldrb	r3, [r2, #0]
10009722:	3301      	adds	r3, #1
10009724:	b2db      	uxtb	r3, r3
10009726:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
10009728:	2b09      	cmp	r3, #9
1000972a:	d902      	bls.n	10009732 <sms_dualtimer1_fn+0x2ca>
                    sms_ble_power_down();
1000972c:	4b2e      	ldr	r3, [pc, #184]	; (100097e8 <sms_dualtimer1_fn+0x380>)
1000972e:	4798      	blx	r3
10009730:	e02c      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                }
                else {
                    sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
10009732:	2001      	movs	r0, #1
10009734:	4b23      	ldr	r3, [pc, #140]	; (100097c4 <sms_dualtimer1_fn+0x35c>)
10009736:	4798      	blx	r3
                    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009738:	2100      	movs	r1, #0
1000973a:	2000      	movs	r0, #0
1000973c:	4b14      	ldr	r3, [pc, #80]	; (10009790 <sms_dualtimer1_fn+0x328>)
1000973e:	4798      	blx	r3
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10009740:	2203      	movs	r2, #3
10009742:	4b14      	ldr	r3, [pc, #80]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009744:	701a      	strb	r2, [r3, #0]
                    //ulp_ready = false;
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10009746:	2200      	movs	r2, #0
10009748:	21fa      	movs	r1, #250	; 0xfa
1000974a:	2001      	movs	r0, #1
1000974c:	4b1c      	ldr	r3, [pc, #112]	; (100097c0 <sms_dualtimer1_fn+0x358>)
1000974e:	4798      	blx	r3
10009750:	e01c      	b.n	1000978c <sms_dualtimer1_fn+0x324>
                }
            }
            else {
                sms_sensors_toggle_interrupt(SMS_EXT_INT_ENABLE);
10009752:	2000      	movs	r0, #0
10009754:	4b1b      	ldr	r3, [pc, #108]	; (100097c4 <sms_dualtimer1_fn+0x35c>)
10009756:	4798      	blx	r3
                sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009758:	2100      	movs	r1, #0
1000975a:	2000      	movs	r0, #0
1000975c:	4b0c      	ldr	r3, [pc, #48]	; (10009790 <sms_dualtimer1_fn+0x328>)
1000975e:	4798      	blx	r3
                timer1_current_mode = TIMER1_MODE_NONE;
10009760:	2200      	movs	r2, #0
10009762:	4b0c      	ldr	r3, [pc, #48]	; (10009794 <sms_dualtimer1_fn+0x32c>)
10009764:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
10009766:	4b14      	ldr	r3, [pc, #80]	; (100097b8 <sms_dualtimer1_fn+0x350>)
10009768:	781b      	ldrb	r3, [r3, #0]
1000976a:	2b00      	cmp	r3, #0
1000976c:	d10e      	bne.n	1000978c <sms_dualtimer1_fn+0x324>
                    //release_sleep_lock();
                    ulp_ready = true;
1000976e:	3201      	adds	r2, #1
10009770:	4b12      	ldr	r3, [pc, #72]	; (100097bc <sms_dualtimer1_fn+0x354>)
10009772:	701a      	strb	r2, [r3, #0]
10009774:	e00a      	b.n	1000978c <sms_dualtimer1_fn+0x324>
            break; // Timer1 mode = SHUTDOWN
        }
        
        case TIMER1_MODE_NONE:
        default:
        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009776:	2100      	movs	r1, #0
10009778:	2000      	movs	r0, #0
1000977a:	4b05      	ldr	r3, [pc, #20]	; (10009790 <sms_dualtimer1_fn+0x328>)
1000977c:	4798      	blx	r3
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000977e:	4b0e      	ldr	r3, [pc, #56]	; (100097b8 <sms_dualtimer1_fn+0x350>)
10009780:	781b      	ldrb	r3, [r3, #0]
10009782:	2b00      	cmp	r3, #0
10009784:	d102      	bne.n	1000978c <sms_dualtimer1_fn+0x324>
            //release_sleep_lock();
            ulp_ready = true;
10009786:	2201      	movs	r2, #1
10009788:	4b0c      	ldr	r3, [pc, #48]	; (100097bc <sms_dualtimer1_fn+0x354>)
1000978a:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000978c:	bd70      	pop	{r4, r5, r6, pc}
1000978e:	46c0      	nop			; (mov r8, r8)
10009790:	10008af9 	.word	0x10008af9
10009794:	10016ac4 	.word	0x10016ac4
10009798:	10016b48 	.word	0x10016b48
1000979c:	10008f09 	.word	0x10008f09
100097a0:	10013464 	.word	0x10013464
100097a4:	100123d9 	.word	0x100123d9
100097a8:	10013c60 	.word	0x10013c60
100097ac:	100122b9 	.word	0x100122b9
100097b0:	10013c90 	.word	0x10013c90
100097b4:	10016acd 	.word	0x10016acd
100097b8:	10016b77 	.word	0x10016b77
100097bc:	10016ace 	.word	0x10016ace
100097c0:	100093bd 	.word	0x100093bd
100097c4:	1000d8fd 	.word	0x1000d8fd
100097c8:	10016acc 	.word	0x10016acc
100097cc:	10016b84 	.word	0x10016b84
100097d0:	100088bd 	.word	0x100088bd
100097d4:	10013ce8 	.word	0x10013ce8
100097d8:	1000d861 	.word	0x1000d861
100097dc:	10016b76 	.word	0x10016b76
100097e0:	10016be6 	.word	0x10016be6
100097e4:	1000831d 	.word	0x1000831d
100097e8:	10008341 	.word	0x10008341

100097ec <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
100097ec:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
    switch(timer2_current_mode) {
100097ee:	4b53      	ldr	r3, [pc, #332]	; (1000993c <sms_dualtimer2_fn+0x150>)
100097f0:	781b      	ldrb	r3, [r3, #0]
100097f2:	b2db      	uxtb	r3, r3
100097f4:	2b05      	cmp	r3, #5
100097f6:	d900      	bls.n	100097fa <sms_dualtimer2_fn+0xe>
100097f8:	e09f      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
100097fa:	009b      	lsls	r3, r3, #2
100097fc:	4a50      	ldr	r2, [pc, #320]	; (10009940 <sms_dualtimer2_fn+0x154>)
100097fe:	58d3      	ldr	r3, [r2, r3]
10009800:	469f      	mov	pc, r3
        case TIMER2_MODE_INDICATION_TOUT:
        sms_monitor_states("[sms_dualtimer2_fn]\t\t");
10009802:	4850      	ldr	r0, [pc, #320]	; (10009944 <sms_dualtimer2_fn+0x158>)
10009804:	4b50      	ldr	r3, [pc, #320]	; (10009948 <sms_dualtimer2_fn+0x15c>)
10009806:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
10009808:	2200      	movs	r2, #0
1000980a:	4b4c      	ldr	r3, [pc, #304]	; (1000993c <sms_dualtimer2_fn+0x150>)
1000980c:	701a      	strb	r2, [r3, #0]
        if(ble_current_state == BLE_STATE_PAIRED) {
1000980e:	4b4f      	ldr	r3, [pc, #316]	; (1000994c <sms_dualtimer2_fn+0x160>)
10009810:	781b      	ldrb	r3, [r3, #0]
10009812:	2b22      	cmp	r3, #34	; 0x22
10009814:	d10c      	bne.n	10009830 <sms_dualtimer2_fn+0x44>
            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009816:	2100      	movs	r1, #0
10009818:	2000      	movs	r0, #0
1000981a:	4b4d      	ldr	r3, [pc, #308]	; (10009950 <sms_dualtimer2_fn+0x164>)
1000981c:	4798      	blx	r3
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000981e:	4b4d      	ldr	r3, [pc, #308]	; (10009954 <sms_dualtimer2_fn+0x168>)
10009820:	781b      	ldrb	r3, [r3, #0]
10009822:	2b00      	cmp	r3, #0
10009824:	d000      	beq.n	10009828 <sms_dualtimer2_fn+0x3c>
10009826:	e088      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
                //release_sleep_lock();
                ulp_ready = true;
10009828:	2201      	movs	r2, #1
1000982a:	4b4b      	ldr	r3, [pc, #300]	; (10009958 <sms_dualtimer2_fn+0x16c>)
1000982c:	701a      	strb	r2, [r3, #0]
1000982e:	e084      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
            }                
        }
        else {
            sms_ble_ind_retry++;
10009830:	4b4a      	ldr	r3, [pc, #296]	; (1000995c <sms_dualtimer2_fn+0x170>)
10009832:	7819      	ldrb	r1, [r3, #0]
10009834:	3101      	adds	r1, #1
10009836:	b2c9      	uxtb	r1, r1
10009838:	7019      	strb	r1, [r3, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000983a:	2902      	cmp	r1, #2
1000983c:	d910      	bls.n	10009860 <sms_dualtimer2_fn+0x74>
                DBG_LOG_CONT_DEV(" ...giving up!");
1000983e:	4848      	ldr	r0, [pc, #288]	; (10009960 <sms_dualtimer2_fn+0x174>)
10009840:	4b48      	ldr	r3, [pc, #288]	; (10009964 <sms_dualtimer2_fn+0x178>)
10009842:	4798      	blx	r3
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
10009844:	2200      	movs	r2, #0
10009846:	4b3d      	ldr	r3, [pc, #244]	; (1000993c <sms_dualtimer2_fn+0x150>)
10009848:	701a      	strb	r2, [r3, #0]
                ble_current_state = BLE_STATE_PAIRED;
1000984a:	3222      	adds	r2, #34	; 0x22
1000984c:	4b3f      	ldr	r3, [pc, #252]	; (1000994c <sms_dualtimer2_fn+0x160>)
1000984e:	701a      	strb	r2, [r3, #0]
                sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009850:	2100      	movs	r1, #0
10009852:	2000      	movs	r0, #0
10009854:	4b3e      	ldr	r3, [pc, #248]	; (10009950 <sms_dualtimer2_fn+0x164>)
10009856:	4798      	blx	r3
                sms_sensors_toggle_interrupt(SMS_EXT_INT_ENABLE);
10009858:	2000      	movs	r0, #0
1000985a:	4b43      	ldr	r3, [pc, #268]	; (10009968 <sms_dualtimer2_fn+0x17c>)
1000985c:	4798      	blx	r3
1000985e:	e06c      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
10009860:	4842      	ldr	r0, [pc, #264]	; (1000996c <sms_dualtimer2_fn+0x180>)
10009862:	4b40      	ldr	r3, [pc, #256]	; (10009964 <sms_dualtimer2_fn+0x178>)
10009864:	4798      	blx	r3
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
10009866:	2201      	movs	r2, #1
10009868:	4b34      	ldr	r3, [pc, #208]	; (1000993c <sms_dualtimer2_fn+0x150>)
1000986a:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000986c:	2164      	movs	r1, #100	; 0x64
1000986e:	2001      	movs	r0, #1
10009870:	4b3f      	ldr	r3, [pc, #252]	; (10009970 <sms_dualtimer2_fn+0x184>)
10009872:	4798      	blx	r3
                sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009874:	2100      	movs	r1, #0
10009876:	2000      	movs	r0, #0
10009878:	4b35      	ldr	r3, [pc, #212]	; (10009950 <sms_dualtimer2_fn+0x164>)
1000987a:	4798      	blx	r3
1000987c:	e05d      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
            }
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
1000987e:	483d      	ldr	r0, [pc, #244]	; (10009974 <sms_dualtimer2_fn+0x188>)
10009880:	4b3d      	ldr	r3, [pc, #244]	; (10009978 <sms_dualtimer2_fn+0x18c>)
10009882:	4798      	blx	r3
10009884:	483d      	ldr	r0, [pc, #244]	; (1000997c <sms_dualtimer2_fn+0x190>)
10009886:	4b37      	ldr	r3, [pc, #220]	; (10009964 <sms_dualtimer2_fn+0x178>)
10009888:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
1000988a:	2200      	movs	r2, #0
1000988c:	4b2b      	ldr	r3, [pc, #172]	; (1000993c <sms_dualtimer2_fn+0x150>)
1000988e:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
10009890:	4a3b      	ldr	r2, [pc, #236]	; (10009980 <sms_dualtimer2_fn+0x194>)
10009892:	7813      	ldrb	r3, [r2, #0]
10009894:	3301      	adds	r3, #1
10009896:	b2db      	uxtb	r3, r3
10009898:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000989a:	7813      	ldrb	r3, [r2, #0]
1000989c:	b2db      	uxtb	r3, r3
1000989e:	2b07      	cmp	r3, #7
100098a0:	d909      	bls.n	100098b6 <sms_dualtimer2_fn+0xca>
            sms_led_switch_off(SMS_LED_0_PIN);
100098a2:	2016      	movs	r0, #22
100098a4:	4b37      	ldr	r3, [pc, #220]	; (10009984 <sms_dualtimer2_fn+0x198>)
100098a6:	4798      	blx	r3
            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
100098a8:	2100      	movs	r1, #0
100098aa:	2000      	movs	r0, #0
100098ac:	4b28      	ldr	r3, [pc, #160]	; (10009950 <sms_dualtimer2_fn+0x164>)
100098ae:	4798      	blx	r3
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
100098b0:	4b35      	ldr	r3, [pc, #212]	; (10009988 <sms_dualtimer2_fn+0x19c>)
100098b2:	4798      	blx	r3
100098b4:	e041      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
100098b6:	2016      	movs	r0, #22
100098b8:	4b34      	ldr	r3, [pc, #208]	; (1000998c <sms_dualtimer2_fn+0x1a0>)
100098ba:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
100098bc:	2202      	movs	r2, #2
100098be:	4b1f      	ldr	r3, [pc, #124]	; (1000993c <sms_dualtimer2_fn+0x150>)
100098c0:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
100098c2:	3a01      	subs	r2, #1
100098c4:	2164      	movs	r1, #100	; 0x64
100098c6:	2001      	movs	r0, #1
100098c8:	4b29      	ldr	r3, [pc, #164]	; (10009970 <sms_dualtimer2_fn+0x184>)
100098ca:	4798      	blx	r3
100098cc:	e035      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
100098ce:	4829      	ldr	r0, [pc, #164]	; (10009974 <sms_dualtimer2_fn+0x188>)
100098d0:	4b29      	ldr	r3, [pc, #164]	; (10009978 <sms_dualtimer2_fn+0x18c>)
100098d2:	4798      	blx	r3
100098d4:	482e      	ldr	r0, [pc, #184]	; (10009990 <sms_dualtimer2_fn+0x1a4>)
100098d6:	4b23      	ldr	r3, [pc, #140]	; (10009964 <sms_dualtimer2_fn+0x178>)
100098d8:	4798      	blx	r3
        timer2_current_mode = TIMER2_MODE_NONE;
100098da:	2200      	movs	r2, #0
100098dc:	4b17      	ldr	r3, [pc, #92]	; (1000993c <sms_dualtimer2_fn+0x150>)
100098de:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
100098e0:	4a27      	ldr	r2, [pc, #156]	; (10009980 <sms_dualtimer2_fn+0x194>)
100098e2:	7813      	ldrb	r3, [r2, #0]
100098e4:	3301      	adds	r3, #1
100098e6:	b2db      	uxtb	r3, r3
100098e8:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
100098ea:	7813      	ldrb	r3, [r2, #0]
100098ec:	b2db      	uxtb	r3, r3
100098ee:	2b03      	cmp	r3, #3
100098f0:	d912      	bls.n	10009918 <sms_dualtimer2_fn+0x12c>
            sms_led_switch_off(SMS_LED_0_PIN);
100098f2:	2016      	movs	r0, #22
100098f4:	4b23      	ldr	r3, [pc, #140]	; (10009984 <sms_dualtimer2_fn+0x198>)
100098f6:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
100098f8:	481e      	ldr	r0, [pc, #120]	; (10009974 <sms_dualtimer2_fn+0x188>)
100098fa:	4b1f      	ldr	r3, [pc, #124]	; (10009978 <sms_dualtimer2_fn+0x18c>)
100098fc:	4798      	blx	r3
100098fe:	4825      	ldr	r0, [pc, #148]	; (10009994 <sms_dualtimer2_fn+0x1a8>)
10009900:	4b18      	ldr	r3, [pc, #96]	; (10009964 <sms_dualtimer2_fn+0x178>)
10009902:	4798      	blx	r3
            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009904:	2100      	movs	r1, #0
10009906:	2000      	movs	r0, #0
10009908:	4b11      	ldr	r3, [pc, #68]	; (10009950 <sms_dualtimer2_fn+0x164>)
1000990a:	4798      	blx	r3
            sms_init_variables();
1000990c:	4b22      	ldr	r3, [pc, #136]	; (10009998 <sms_dualtimer2_fn+0x1ac>)
1000990e:	4798      	blx	r3
            ulp_ready = true;
10009910:	2201      	movs	r2, #1
10009912:	4b11      	ldr	r3, [pc, #68]	; (10009958 <sms_dualtimer2_fn+0x16c>)
10009914:	701a      	strb	r2, [r3, #0]
10009916:	e010      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
10009918:	2016      	movs	r0, #22
1000991a:	4b1c      	ldr	r3, [pc, #112]	; (1000998c <sms_dualtimer2_fn+0x1a0>)
1000991c:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000991e:	2203      	movs	r2, #3
10009920:	4b06      	ldr	r3, [pc, #24]	; (1000993c <sms_dualtimer2_fn+0x150>)
10009922:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
10009924:	3a02      	subs	r2, #2
10009926:	21c8      	movs	r1, #200	; 0xc8
10009928:	0049      	lsls	r1, r1, #1
1000992a:	2001      	movs	r0, #1
1000992c:	4b10      	ldr	r3, [pc, #64]	; (10009970 <sms_dualtimer2_fn+0x184>)
1000992e:	4798      	blx	r3
10009930:	e003      	b.n	1000993a <sms_dualtimer2_fn+0x14e>
        break;
        
        case TIMER2_MODE_LED_ADVERTISING:
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
10009932:	2100      	movs	r1, #0
10009934:	2000      	movs	r0, #0
10009936:	4b06      	ldr	r3, [pc, #24]	; (10009950 <sms_dualtimer2_fn+0x164>)
10009938:	4798      	blx	r3
        break;
    }
1000993a:	bd10      	pop	{r4, pc}
1000993c:	10016b77 	.word	0x10016b77
10009940:	10013c48 	.word	0x10013c48
10009944:	10013cfc 	.word	0x10013cfc
10009948:	1000d861 	.word	0x1000d861
1000994c:	10016b76 	.word	0x10016b76
10009950:	10008af9 	.word	0x10008af9
10009954:	10016ac4 	.word	0x10016ac4
10009958:	10016ace 	.word	0x10016ace
1000995c:	10016b73 	.word	0x10016b73
10009960:	10013d14 	.word	0x10013d14
10009964:	100122b9 	.word	0x100122b9
10009968:	1000d8fd 	.word	0x1000d8fd
1000996c:	10013d24 	.word	0x10013d24
10009970:	100093bd 	.word	0x100093bd
10009974:	10013464 	.word	0x10013464
10009978:	100123d9 	.word	0x100123d9
1000997c:	10013d40 	.word	0x10013d40
10009980:	10016bec 	.word	0x10016bec
10009984:	10008cb1 	.word	0x10008cb1
10009988:	1000850d 	.word	0x1000850d
1000998c:	10008d11 	.word	0x10008d11
10009990:	10013d6c 	.word	0x10013d6c
10009994:	10013d98 	.word	0x10013d98
10009998:	1000d75d 	.word	0x1000d75d

1000999c <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000999c:	230c      	movs	r3, #12
1000999e:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
100099a0:	2300      	movs	r3, #0
100099a2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
100099a4:	7083      	strb	r3, [r0, #2]
}
100099a6:	4770      	bx	lr

100099a8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
100099a8:	2301      	movs	r3, #1
100099aa:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
100099ac:	2300      	movs	r3, #0
100099ae:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
100099b0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
100099b2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
100099b4:	3381      	adds	r3, #129	; 0x81
100099b6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
100099b8:	3b77      	subs	r3, #119	; 0x77
100099ba:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
100099bc:	3301      	adds	r3, #1
100099be:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
100099c0:	3301      	adds	r3, #1
100099c2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
100099c4:	3301      	adds	r3, #1
100099c6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
100099c8:	3b0b      	subs	r3, #11
100099ca:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
100099cc:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
100099ce:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
100099d0:	6243      	str	r3, [r0, #36]	; 0x24
};
100099d2:	4770      	bx	lr

100099d4 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
100099d4:	b530      	push	{r4, r5, lr}
100099d6:	b083      	sub	sp, #12
100099d8:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
100099da:	780b      	ldrb	r3, [r1, #0]
100099dc:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
100099de:	784b      	ldrb	r3, [r1, #1]
100099e0:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
100099e2:	788b      	ldrb	r3, [r1, #2]
100099e4:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
100099e6:	ad01      	add	r5, sp, #4
100099e8:	0028      	movs	r0, r5
100099ea:	4b07      	ldr	r3, [pc, #28]	; (10009a08 <spi_attach_slave+0x34>)
100099ec:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
100099ee:	2301      	movs	r3, #1
100099f0:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
100099f2:	7820      	ldrb	r0, [r4, #0]
100099f4:	0029      	movs	r1, r5
100099f6:	4b05      	ldr	r3, [pc, #20]	; (10009a0c <spi_attach_slave+0x38>)
100099f8:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
100099fa:	7820      	ldrb	r0, [r4, #0]
100099fc:	2101      	movs	r1, #1
100099fe:	4b04      	ldr	r3, [pc, #16]	; (10009a10 <spi_attach_slave+0x3c>)
10009a00:	4798      	blx	r3
}
10009a02:	b003      	add	sp, #12
10009a04:	bd30      	pop	{r4, r5, pc}
10009a06:	46c0      	nop			; (mov r8, r8)
10009a08:	10009ff1 	.word	0x10009ff1
10009a0c:	1000a001 	.word	0x1000a001
10009a10:	1000a259 	.word	0x1000a259

10009a14 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
10009a14:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
10009a16:	2201      	movs	r2, #1
10009a18:	761a      	strb	r2, [r3, #24]
}
10009a1a:	4770      	bx	lr

10009a1c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
10009a1c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009a1e:	2300      	movs	r3, #0
10009a20:	6802      	ldr	r2, [r0, #0]
10009a22:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009a24:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
10009a26:	4a0d      	ldr	r2, [pc, #52]	; (10009a5c <spi_disable+0x40>)
10009a28:	4293      	cmp	r3, r2
10009a2a:	d109      	bne.n	10009a40 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
10009a2c:	2041      	movs	r0, #65	; 0x41
10009a2e:	4c0c      	ldr	r4, [pc, #48]	; (10009a60 <spi_disable+0x44>)
10009a30:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
10009a32:	2026      	movs	r0, #38	; 0x26
10009a34:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
10009a36:	2038      	movs	r0, #56	; 0x38
10009a38:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
10009a3a:	2001      	movs	r0, #1
10009a3c:	47a0      	blx	r4
10009a3e:	e00b      	b.n	10009a58 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
10009a40:	4a08      	ldr	r2, [pc, #32]	; (10009a64 <spi_disable+0x48>)
10009a42:	4293      	cmp	r3, r2
10009a44:	d108      	bne.n	10009a58 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
10009a46:	2042      	movs	r0, #66	; 0x42
10009a48:	4c05      	ldr	r4, [pc, #20]	; (10009a60 <spi_disable+0x44>)
10009a4a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
10009a4c:	2027      	movs	r0, #39	; 0x27
10009a4e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
10009a50:	2039      	movs	r0, #57	; 0x39
10009a52:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
10009a54:	2002      	movs	r0, #2
10009a56:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
10009a58:	bd10      	pop	{r4, pc}
10009a5a:	46c0      	nop			; (mov r8, r8)
10009a5c:	40006000 	.word	0x40006000
10009a60:	1000a9f1 	.word	0x1000a9f1
10009a64:	40007000 	.word	0x40007000

10009a68 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
10009a68:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
10009a6a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
10009a6c:	4b09      	ldr	r3, [pc, #36]	; (10009a94 <spi_reset+0x2c>)
10009a6e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
10009a70:	4b09      	ldr	r3, [pc, #36]	; (10009a98 <spi_reset+0x30>)
10009a72:	429c      	cmp	r4, r3
10009a74:	d105      	bne.n	10009a82 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
10009a76:	2001      	movs	r0, #1
10009a78:	4c08      	ldr	r4, [pc, #32]	; (10009a9c <spi_reset+0x34>)
10009a7a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
10009a7c:	2038      	movs	r0, #56	; 0x38
10009a7e:	47a0      	blx	r4
10009a80:	e007      	b.n	10009a92 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
10009a82:	4b07      	ldr	r3, [pc, #28]	; (10009aa0 <spi_reset+0x38>)
10009a84:	429c      	cmp	r4, r3
10009a86:	d104      	bne.n	10009a92 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
10009a88:	2002      	movs	r0, #2
10009a8a:	4c04      	ldr	r4, [pc, #16]	; (10009a9c <spi_reset+0x34>)
10009a8c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
10009a8e:	2039      	movs	r0, #57	; 0x39
10009a90:	47a0      	blx	r4
	}
}
10009a92:	bd10      	pop	{r4, pc}
10009a94:	10009a1d 	.word	0x10009a1d
10009a98:	40006000 	.word	0x40006000
10009a9c:	1000ad5d 	.word	0x1000ad5d
10009aa0:	40007000 	.word	0x40007000

10009aa4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
10009aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
10009aa6:	465f      	mov	r7, fp
10009aa8:	4646      	mov	r6, r8
10009aaa:	b4c0      	push	{r6, r7}
10009aac:	b083      	sub	sp, #12
10009aae:	0006      	movs	r6, r0
10009ab0:	4688      	mov	r8, r1
10009ab2:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
10009ab4:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
10009ab6:	7e0b      	ldrb	r3, [r1, #24]
10009ab8:	07db      	lsls	r3, r3, #31
10009aba:	d501      	bpl.n	10009ac0 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
10009abc:	2300      	movs	r3, #0
10009abe:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
10009ac0:	0030      	movs	r0, r6
10009ac2:	4b4a      	ldr	r3, [pc, #296]	; (10009bec <spi_init+0x148>)
10009ac4:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
10009ac6:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
10009ac8:	4a49      	ldr	r2, [pc, #292]	; (10009bf0 <spi_init+0x14c>)
10009aca:	4293      	cmp	r3, r2
10009acc:	d109      	bne.n	10009ae2 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
10009ace:	2041      	movs	r0, #65	; 0x41
10009ad0:	4c48      	ldr	r4, [pc, #288]	; (10009bf4 <spi_init+0x150>)
10009ad2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
10009ad4:	2026      	movs	r0, #38	; 0x26
10009ad6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
10009ad8:	2038      	movs	r0, #56	; 0x38
10009ada:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
10009adc:	2001      	movs	r0, #1
10009ade:	47a0      	blx	r4
10009ae0:	e00b      	b.n	10009afa <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
10009ae2:	4a45      	ldr	r2, [pc, #276]	; (10009bf8 <spi_init+0x154>)
10009ae4:	4293      	cmp	r3, r2
10009ae6:	d108      	bne.n	10009afa <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
10009ae8:	2042      	movs	r0, #66	; 0x42
10009aea:	4c42      	ldr	r4, [pc, #264]	; (10009bf4 <spi_init+0x150>)
10009aec:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
10009aee:	2027      	movs	r0, #39	; 0x27
10009af0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
10009af2:	2039      	movs	r0, #57	; 0x39
10009af4:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
10009af6:	2002      	movs	r0, #2
10009af8:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
10009afa:	a801      	add	r0, sp, #4
10009afc:	4b3f      	ldr	r3, [pc, #252]	; (10009bfc <spi_init+0x158>)
10009afe:	4798      	blx	r3
10009b00:	002c      	movs	r4, r5
10009b02:	3408      	adds	r4, #8
10009b04:	2318      	movs	r3, #24
10009b06:	469b      	mov	fp, r3
10009b08:	44ab      	add	fp, r5
10009b0a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
10009b0c:	6820      	ldr	r0, [r4, #0]
10009b0e:	1c43      	adds	r3, r0, #1
10009b10:	d011      	beq.n	10009b36 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
10009b12:	782b      	ldrb	r3, [r5, #0]
10009b14:	2b01      	cmp	r3, #1
10009b16:	d102      	bne.n	10009b1e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
10009b18:	466a      	mov	r2, sp
10009b1a:	7113      	strb	r3, [r2, #4]
10009b1c:	e003      	b.n	10009b26 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
10009b1e:	2b00      	cmp	r3, #0
10009b20:	d101      	bne.n	10009b26 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
10009b22:	466a      	mov	r2, sp
10009b24:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
10009b26:	b2c0      	uxtb	r0, r0
10009b28:	a901      	add	r1, sp, #4
10009b2a:	4b35      	ldr	r3, [pc, #212]	; (10009c00 <spi_init+0x15c>)
10009b2c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
10009b2e:	8a39      	ldrh	r1, [r7, #16]
10009b30:	7838      	ldrb	r0, [r7, #0]
10009b32:	4b34      	ldr	r3, [pc, #208]	; (10009c04 <spi_init+0x160>)
10009b34:	4798      	blx	r3
10009b36:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
10009b38:	455c      	cmp	r4, fp
10009b3a:	d1e6      	bne.n	10009b0a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10009b3c:	78eb      	ldrb	r3, [r5, #3]
10009b3e:	4642      	mov	r2, r8
10009b40:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
10009b42:	782b      	ldrb	r3, [r5, #0]
10009b44:	2b01      	cmp	r3, #1
10009b46:	d100      	bne.n	10009b4a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
10009b48:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
10009b4a:	782b      	ldrb	r3, [r5, #0]
10009b4c:	2b00      	cmp	r3, #0
10009b4e:	d101      	bne.n	10009b54 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
10009b50:	4642      	mov	r2, r8
10009b52:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
10009b54:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
10009b56:	782a      	ldrb	r2, [r5, #0]
10009b58:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
10009b5a:	782a      	ldrb	r2, [r5, #0]
10009b5c:	2a01      	cmp	r2, #1
10009b5e:	d101      	bne.n	10009b64 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
10009b60:	792a      	ldrb	r2, [r5, #4]
10009b62:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
10009b64:	786a      	ldrb	r2, [r5, #1]
10009b66:	2a04      	cmp	r2, #4
10009b68:	d104      	bne.n	10009b74 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
10009b6a:	2124      	movs	r1, #36	; 0x24
10009b6c:	5c58      	ldrb	r0, [r3, r1]
10009b6e:	4302      	orrs	r2, r0
10009b70:	545a      	strb	r2, [r3, r1]
10009b72:	e004      	b.n	10009b7e <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
10009b74:	2124      	movs	r1, #36	; 0x24
10009b76:	5c5a      	ldrb	r2, [r3, r1]
10009b78:	2004      	movs	r0, #4
10009b7a:	4382      	bics	r2, r0
10009b7c:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
10009b7e:	78aa      	ldrb	r2, [r5, #2]
10009b80:	2a01      	cmp	r2, #1
10009b82:	d01a      	beq.n	10009bba <spi_init+0x116>
10009b84:	2a00      	cmp	r2, #0
10009b86:	d004      	beq.n	10009b92 <spi_init+0xee>
10009b88:	2a02      	cmp	r2, #2
10009b8a:	d00c      	beq.n	10009ba6 <spi_init+0x102>
10009b8c:	2a03      	cmp	r2, #3
10009b8e:	d01e      	beq.n	10009bce <spi_init+0x12a>
10009b90:	e026      	b.n	10009be0 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009b92:	2224      	movs	r2, #36	; 0x24
10009b94:	5c99      	ldrb	r1, [r3, r2]
10009b96:	2002      	movs	r0, #2
10009b98:	4381      	bics	r1, r0
10009b9a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009b9c:	5c99      	ldrb	r1, [r3, r2]
10009b9e:	3801      	subs	r0, #1
10009ba0:	4381      	bics	r1, r0
10009ba2:	5499      	strb	r1, [r3, r2]
10009ba4:	e01c      	b.n	10009be0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009ba6:	2224      	movs	r2, #36	; 0x24
10009ba8:	5c98      	ldrb	r0, [r3, r2]
10009baa:	2102      	movs	r1, #2
10009bac:	4301      	orrs	r1, r0
10009bae:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
10009bb0:	5c99      	ldrb	r1, [r3, r2]
10009bb2:	2001      	movs	r0, #1
10009bb4:	4381      	bics	r1, r0
10009bb6:	5499      	strb	r1, [r3, r2]
10009bb8:	e012      	b.n	10009be0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
10009bba:	2224      	movs	r2, #36	; 0x24
10009bbc:	5c99      	ldrb	r1, [r3, r2]
10009bbe:	2002      	movs	r0, #2
10009bc0:	4381      	bics	r1, r0
10009bc2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009bc4:	5c98      	ldrb	r0, [r3, r2]
10009bc6:	2101      	movs	r1, #1
10009bc8:	4301      	orrs	r1, r0
10009bca:	5499      	strb	r1, [r3, r2]
10009bcc:	e008      	b.n	10009be0 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
10009bce:	2224      	movs	r2, #36	; 0x24
10009bd0:	5c98      	ldrb	r0, [r3, r2]
10009bd2:	2102      	movs	r1, #2
10009bd4:	4301      	orrs	r1, r0
10009bd6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
10009bd8:	5c98      	ldrb	r0, [r3, r2]
10009bda:	2101      	movs	r1, #1
10009bdc:	4301      	orrs	r1, r0
10009bde:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
10009be0:	2000      	movs	r0, #0
10009be2:	b003      	add	sp, #12
10009be4:	bc0c      	pop	{r2, r3}
10009be6:	4690      	mov	r8, r2
10009be8:	469b      	mov	fp, r3
10009bea:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009bec:	10009a69 	.word	0x10009a69
10009bf0:	40006000 	.word	0x40006000
10009bf4:	1000a695 	.word	0x1000a695
10009bf8:	40007000 	.word	0x40007000
10009bfc:	10009ff1 	.word	0x10009ff1
10009c00:	1000a001 	.word	0x1000a001
10009c04:	1000a2e5 	.word	0x1000a2e5

10009c08 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
10009c08:	b5f0      	push	{r4, r5, r6, r7, lr}
10009c0a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
10009c0c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
10009c0e:	2600      	movs	r6, #0
10009c10:	466d      	mov	r5, sp
10009c12:	71ee      	strb	r6, [r5, #7]
10009c14:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
10009c16:	2c00      	cmp	r4, #0
10009c18:	d034      	beq.n	10009c84 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
10009c1a:	2900      	cmp	r1, #0
10009c1c:	d104      	bne.n	10009c28 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
10009c1e:	0029      	movs	r1, r5
10009c20:	7980      	ldrb	r0, [r0, #6]
10009c22:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
10009c24:	2701      	movs	r7, #1
10009c26:	e00b      	b.n	10009c40 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
10009c28:	2a00      	cmp	r2, #0
10009c2a:	d005      	beq.n	10009c38 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
10009c2c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
10009c2e:	2b00      	cmp	r3, #0
10009c30:	d029      	beq.n	10009c86 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
10009c32:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009c34:	2700      	movs	r7, #0
10009c36:	e003      	b.n	10009c40 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
10009c38:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
10009c3a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
10009c3c:	466a      	mov	r2, sp
10009c3e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
10009c40:	2528      	movs	r5, #40	; 0x28
10009c42:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
10009c44:	07c0      	lsls	r0, r0, #31
10009c46:	d4fc      	bmi.n	10009c42 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
10009c48:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
10009c4a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
10009c4c:	2b00      	cmp	r3, #0
10009c4e:	d014      	beq.n	10009c7a <spi_transceive_buffer_wait+0x72>
10009c50:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
10009c52:	4278      	negs	r0, r7
10009c54:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
10009c56:	4270      	negs	r0, r6
10009c58:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
10009c5a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
10009c5c:	07c0      	lsls	r0, r0, #31
10009c5e:	d5fc      	bpl.n	10009c5a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
10009c60:	7808      	ldrb	r0, [r1, #0]
10009c62:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
10009c64:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
10009c66:	07c0      	lsls	r0, r0, #31
10009c68:	d5fc      	bpl.n	10009c64 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
10009c6a:	7920      	ldrb	r0, [r4, #4]
10009c6c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
10009c6e:	3501      	adds	r5, #1
10009c70:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
10009c72:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
10009c74:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
10009c76:	42ab      	cmp	r3, r5
10009c78:	d1ef      	bne.n	10009c5a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
10009c7a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
10009c7c:	06db      	lsls	r3, r3, #27
10009c7e:	d5fc      	bpl.n	10009c7a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
10009c80:	2000      	movs	r0, #0
10009c82:	e000      	b.n	10009c86 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
10009c84:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
10009c86:	b003      	add	sp, #12
10009c88:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c8a:	46c0      	nop			; (mov r8, r8)

10009c8c <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
10009c8c:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
10009c8e:	7808      	ldrb	r0, [r1, #0]
	if(select) {
10009c90:	2a00      	cmp	r2, #0
10009c92:	d003      	beq.n	10009c9c <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
10009c94:	2100      	movs	r1, #0
10009c96:	4b04      	ldr	r3, [pc, #16]	; (10009ca8 <spi_select_slave+0x1c>)
10009c98:	4798      	blx	r3
10009c9a:	e002      	b.n	10009ca2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
10009c9c:	2101      	movs	r1, #1
10009c9e:	4b02      	ldr	r3, [pc, #8]	; (10009ca8 <spi_select_slave+0x1c>)
10009ca0:	4798      	blx	r3
	}

	return STATUS_OK;
}
10009ca2:	2000      	movs	r0, #0
10009ca4:	bd10      	pop	{r4, pc}
10009ca6:	46c0      	nop			; (mov r8, r8)
10009ca8:	1000a259 	.word	0x1000a259

10009cac <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
10009cac:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
10009cae:	4b0d      	ldr	r3, [pc, #52]	; (10009ce4 <dualtimer_isr_handler+0x38>)
10009cb0:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
10009cb2:	2b00      	cmp	r3, #0
10009cb4:	d007      	beq.n	10009cc6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
10009cb6:	2201      	movs	r2, #1
10009cb8:	4b0a      	ldr	r3, [pc, #40]	; (10009ce4 <dualtimer_isr_handler+0x38>)
10009cba:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
10009cbc:	4b0a      	ldr	r3, [pc, #40]	; (10009ce8 <dualtimer_isr_handler+0x3c>)
10009cbe:	681b      	ldr	r3, [r3, #0]
10009cc0:	2b00      	cmp	r3, #0
10009cc2:	d000      	beq.n	10009cc6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
10009cc4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
10009cc6:	2334      	movs	r3, #52	; 0x34
10009cc8:	4a06      	ldr	r2, [pc, #24]	; (10009ce4 <dualtimer_isr_handler+0x38>)
10009cca:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
10009ccc:	2b00      	cmp	r3, #0
10009cce:	d007      	beq.n	10009ce0 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
10009cd0:	2101      	movs	r1, #1
10009cd2:	232c      	movs	r3, #44	; 0x2c
10009cd4:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
10009cd6:	4b05      	ldr	r3, [pc, #20]	; (10009cec <dualtimer_isr_handler+0x40>)
10009cd8:	681b      	ldr	r3, [r3, #0]
10009cda:	2b00      	cmp	r3, #0
10009cdc:	d000      	beq.n	10009ce0 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
10009cde:	4798      	blx	r3
	}
}
10009ce0:	bd10      	pop	{r4, pc}
10009ce2:	46c0      	nop			; (mov r8, r8)
10009ce4:	40001000 	.word	0x40001000
10009ce8:	1001501c 	.word	0x1001501c
10009cec:	10015020 	.word	0x10015020

10009cf0 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
10009cf0:	2301      	movs	r3, #1
10009cf2:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
10009cf4:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
10009cf6:	2202      	movs	r2, #2
10009cf8:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
10009cfa:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10009cfc:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
10009cfe:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009d00:	2200      	movs	r2, #0
10009d02:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
10009d04:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
10009d06:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
10009d08:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
10009d0a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
10009d0c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
10009d0e:	7602      	strb	r2, [r0, #24]
}
10009d10:	4770      	bx	lr
10009d12:	46c0      	nop			; (mov r8, r8)

10009d14 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
10009d14:	2800      	cmp	r0, #0
10009d16:	d107      	bne.n	10009d28 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10009d18:	2900      	cmp	r1, #0
10009d1a:	d102      	bne.n	10009d22 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
10009d1c:	4b06      	ldr	r3, [pc, #24]	; (10009d38 <dualtimer_set_counter+0x24>)
10009d1e:	601a      	str	r2, [r3, #0]
10009d20:	e009      	b.n	10009d36 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
10009d22:	4b05      	ldr	r3, [pc, #20]	; (10009d38 <dualtimer_set_counter+0x24>)
10009d24:	619a      	str	r2, [r3, #24]
10009d26:	e006      	b.n	10009d36 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
10009d28:	2900      	cmp	r1, #0
10009d2a:	d102      	bne.n	10009d32 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
10009d2c:	4b02      	ldr	r3, [pc, #8]	; (10009d38 <dualtimer_set_counter+0x24>)
10009d2e:	621a      	str	r2, [r3, #32]
10009d30:	e001      	b.n	10009d36 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
10009d32:	4b01      	ldr	r3, [pc, #4]	; (10009d38 <dualtimer_set_counter+0x24>)
10009d34:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
10009d36:	4770      	bx	lr
10009d38:	40001000 	.word	0x40001000

10009d3c <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10009d3c:	2800      	cmp	r0, #0
10009d3e:	d105      	bne.n	10009d4c <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10009d40:	4a06      	ldr	r2, [pc, #24]	; (10009d5c <dualtimer_enable+0x20>)
10009d42:	7a11      	ldrb	r1, [r2, #8]
10009d44:	2380      	movs	r3, #128	; 0x80
10009d46:	430b      	orrs	r3, r1
10009d48:	7213      	strb	r3, [r2, #8]
10009d4a:	e005      	b.n	10009d58 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10009d4c:	4903      	ldr	r1, [pc, #12]	; (10009d5c <dualtimer_enable+0x20>)
10009d4e:	2228      	movs	r2, #40	; 0x28
10009d50:	5c88      	ldrb	r0, [r1, r2]
10009d52:	2380      	movs	r3, #128	; 0x80
10009d54:	4303      	orrs	r3, r0
10009d56:	548b      	strb	r3, [r1, r2]
	}
}
10009d58:	4770      	bx	lr
10009d5a:	46c0      	nop			; (mov r8, r8)
10009d5c:	40001000 	.word	0x40001000

10009d60 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
10009d60:	2800      	cmp	r0, #0
10009d62:	d105      	bne.n	10009d70 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
10009d64:	4a06      	ldr	r2, [pc, #24]	; (10009d80 <dualtimer_disable+0x20>)
10009d66:	7a11      	ldrb	r1, [r2, #8]
10009d68:	237f      	movs	r3, #127	; 0x7f
10009d6a:	400b      	ands	r3, r1
10009d6c:	7213      	strb	r3, [r2, #8]
10009d6e:	e005      	b.n	10009d7c <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
10009d70:	4903      	ldr	r1, [pc, #12]	; (10009d80 <dualtimer_disable+0x20>)
10009d72:	2228      	movs	r2, #40	; 0x28
10009d74:	5c88      	ldrb	r0, [r1, r2]
10009d76:	237f      	movs	r3, #127	; 0x7f
10009d78:	4003      	ands	r3, r0
10009d7a:	548b      	strb	r3, [r1, r2]
	}
}
10009d7c:	4770      	bx	lr
10009d7e:	46c0      	nop			; (mov r8, r8)
10009d80:	40001000 	.word	0x40001000

10009d84 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
10009d84:	b570      	push	{r4, r5, r6, lr}
10009d86:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
10009d88:	2004      	movs	r0, #4
10009d8a:	4b39      	ldr	r3, [pc, #228]	; (10009e70 <dualtimer_init+0xec>)
10009d8c:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
10009d8e:	7823      	ldrb	r3, [r4, #0]
10009d90:	2b00      	cmp	r3, #0
10009d92:	d102      	bne.n	10009d9a <dualtimer_init+0x16>
10009d94:	7b23      	ldrb	r3, [r4, #12]
10009d96:	2b00      	cmp	r3, #0
10009d98:	d065      	beq.n	10009e66 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
10009d9a:	4936      	ldr	r1, [pc, #216]	; (10009e74 <dualtimer_init+0xf0>)
10009d9c:	68ca      	ldr	r2, [r1, #12]
10009d9e:	2320      	movs	r3, #32
10009da0:	4313      	orrs	r3, r2
10009da2:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
10009da4:	7e22      	ldrb	r2, [r4, #24]
10009da6:	698b      	ldr	r3, [r1, #24]
10009da8:	2003      	movs	r0, #3
10009daa:	4002      	ands	r2, r0
10009dac:	0112      	lsls	r2, r2, #4
10009dae:	302d      	adds	r0, #45	; 0x2d
10009db0:	4383      	bics	r3, r0
10009db2:	4313      	orrs	r3, r2
10009db4:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
10009db6:	7823      	ldrb	r3, [r4, #0]
10009db8:	2b00      	cmp	r3, #0
10009dba:	d026      	beq.n	10009e0a <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009dbc:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
10009dbe:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009dc0:	2b00      	cmp	r3, #0
10009dc2:	d003      	beq.n	10009dcc <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
10009dc4:	3b02      	subs	r3, #2
10009dc6:	425d      	negs	r5, r3
10009dc8:	415d      	adcs	r5, r3
10009dca:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
10009dcc:	78a2      	ldrb	r2, [r4, #2]
10009dce:	0052      	lsls	r2, r2, #1
10009dd0:	2502      	movs	r5, #2
10009dd2:	402a      	ands	r2, r5
10009dd4:	78e3      	ldrb	r3, [r4, #3]
10009dd6:	009b      	lsls	r3, r3, #2
10009dd8:	350a      	adds	r5, #10
10009dda:	402b      	ands	r3, r5
10009ddc:	431a      	orrs	r2, r3
10009dde:	0015      	movs	r5, r2
10009de0:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
10009de2:	7923      	ldrb	r3, [r4, #4]
10009de4:	2b00      	cmp	r3, #0
10009de6:	d001      	beq.n	10009dec <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
10009de8:	2320      	movs	r3, #32
10009dea:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
10009dec:	4b22      	ldr	r3, [pc, #136]	; (10009e78 <dualtimer_init+0xf4>)
10009dee:	68a2      	ldr	r2, [r4, #8]
10009df0:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
10009df2:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
10009df4:	491f      	ldr	r1, [pc, #124]	; (10009e74 <dualtimer_init+0xf0>)
10009df6:	22c4      	movs	r2, #196	; 0xc4
10009df8:	0052      	lsls	r2, r2, #1
10009dfa:	5c88      	ldrb	r0, [r1, r2]
10009dfc:	2301      	movs	r3, #1
10009dfe:	4303      	orrs	r3, r0
10009e00:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
10009e02:	2000      	movs	r0, #0
10009e04:	4b1d      	ldr	r3, [pc, #116]	; (10009e7c <dualtimer_init+0xf8>)
10009e06:	4798      	blx	r3
10009e08:	e000      	b.n	10009e0c <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
10009e0a:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
10009e0c:	7b23      	ldrb	r3, [r4, #12]
10009e0e:	2b00      	cmp	r3, #0
10009e10:	d029      	beq.n	10009e66 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
10009e12:	7b63      	ldrb	r3, [r4, #13]
10009e14:	2b00      	cmp	r3, #0
10009e16:	d005      	beq.n	10009e24 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
10009e18:	2b01      	cmp	r3, #1
10009e1a:	d005      	beq.n	10009e28 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
10009e1c:	2b02      	cmp	r3, #2
10009e1e:	d104      	bne.n	10009e2a <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
10009e20:	2540      	movs	r5, #64	; 0x40
10009e22:	e002      	b.n	10009e2a <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
10009e24:	2501      	movs	r5, #1
10009e26:	e000      	b.n	10009e2a <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
10009e28:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
10009e2a:	7ba3      	ldrb	r3, [r4, #14]
10009e2c:	005b      	lsls	r3, r3, #1
10009e2e:	2102      	movs	r1, #2
10009e30:	4019      	ands	r1, r3
10009e32:	7be2      	ldrb	r2, [r4, #15]
10009e34:	0092      	lsls	r2, r2, #2
10009e36:	230c      	movs	r3, #12
10009e38:	4013      	ands	r3, r2
10009e3a:	430b      	orrs	r3, r1
10009e3c:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
10009e3e:	7c23      	ldrb	r3, [r4, #16]
10009e40:	2b00      	cmp	r3, #0
10009e42:	d001      	beq.n	10009e48 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
10009e44:	2320      	movs	r3, #32
10009e46:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
10009e48:	6962      	ldr	r2, [r4, #20]
10009e4a:	4b0b      	ldr	r3, [pc, #44]	; (10009e78 <dualtimer_init+0xf4>)
10009e4c:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
10009e4e:	2228      	movs	r2, #40	; 0x28
10009e50:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
10009e52:	4908      	ldr	r1, [pc, #32]	; (10009e74 <dualtimer_init+0xf0>)
10009e54:	3261      	adds	r2, #97	; 0x61
10009e56:	32ff      	adds	r2, #255	; 0xff
10009e58:	5c88      	ldrb	r0, [r1, r2]
10009e5a:	2302      	movs	r3, #2
10009e5c:	4303      	orrs	r3, r0
10009e5e:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
10009e60:	2001      	movs	r0, #1
10009e62:	4b06      	ldr	r3, [pc, #24]	; (10009e7c <dualtimer_init+0xf8>)
10009e64:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
10009e66:	4906      	ldr	r1, [pc, #24]	; (10009e80 <dualtimer_init+0xfc>)
10009e68:	201e      	movs	r0, #30
10009e6a:	4b06      	ldr	r3, [pc, #24]	; (10009e84 <dualtimer_init+0x100>)
10009e6c:	4798      	blx	r3
}
10009e6e:	bd70      	pop	{r4, r5, r6, pc}
10009e70:	1000ad5d 	.word	0x1000ad5d
10009e74:	4000b000 	.word	0x4000b000
10009e78:	40001000 	.word	0x40001000
10009e7c:	10009d3d 	.word	0x10009d3d
10009e80:	10009cad 	.word	0x10009cad
10009e84:	1000b1c5 	.word	0x1000b1c5

10009e88 <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
10009e88:	2800      	cmp	r0, #0
10009e8a:	d102      	bne.n	10009e92 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
10009e8c:	4b02      	ldr	r3, [pc, #8]	; (10009e98 <dualtimer_register_callback+0x10>)
10009e8e:	6019      	str	r1, [r3, #0]
10009e90:	e001      	b.n	10009e96 <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
10009e92:	4b02      	ldr	r3, [pc, #8]	; (10009e9c <dualtimer_register_callback+0x14>)
10009e94:	6019      	str	r1, [r3, #0]
	}
}
10009e96:	4770      	bx	lr
10009e98:	1001501c 	.word	0x1001501c
10009e9c:	10015020 	.word	0x10015020

10009ea0 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
10009ea0:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
10009ea2:	4b16      	ldr	r3, [pc, #88]	; (10009efc <gpio_port0_isr_handler+0x5c>)
10009ea4:	681d      	ldr	r5, [r3, #0]
10009ea6:	8f29      	ldrh	r1, [r5, #56]	; 0x38
10009ea8:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
10009eaa:	07cb      	lsls	r3, r1, #31
10009eac:	d407      	bmi.n	10009ebe <gpio_port0_isr_handler+0x1e>
10009eae:	2301      	movs	r3, #1
10009eb0:	2401      	movs	r4, #1
10009eb2:	0018      	movs	r0, r3
10009eb4:	0022      	movs	r2, r4
10009eb6:	409a      	lsls	r2, r3
10009eb8:	4211      	tst	r1, r2
10009eba:	d014      	beq.n	10009ee6 <gpio_port0_isr_handler+0x46>
10009ebc:	e001      	b.n	10009ec2 <gpio_port0_isr_handler+0x22>
10009ebe:	2201      	movs	r2, #1
10009ec0:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
10009ec2:	b292      	uxth	r2, r2
10009ec4:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10009ec6:	2346      	movs	r3, #70	; 0x46
10009ec8:	4a0c      	ldr	r2, [pc, #48]	; (10009efc <gpio_port0_isr_handler+0x5c>)
10009eca:	5ad3      	ldrh	r3, [r2, r3]
10009ecc:	4103      	asrs	r3, r0
10009ece:	07db      	lsls	r3, r3, #31
10009ed0:	d50c      	bpl.n	10009eec <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
10009ed2:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
10009ed4:	5ad3      	ldrh	r3, [r2, r3]
10009ed6:	4103      	asrs	r3, r0
10009ed8:	07db      	lsls	r3, r3, #31
10009eda:	d507      	bpl.n	10009eec <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
10009edc:	0080      	lsls	r0, r0, #2
10009ede:	1810      	adds	r0, r2, r0
10009ee0:	6843      	ldr	r3, [r0, #4]
10009ee2:	4798      	blx	r3
10009ee4:	e002      	b.n	10009eec <gpio_port0_isr_handler+0x4c>
10009ee6:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10009ee8:	2b10      	cmp	r3, #16
10009eea:	d1e2      	bne.n	10009eb2 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
10009eec:	2180      	movs	r1, #128	; 0x80
10009eee:	0409      	lsls	r1, r1, #16
10009ef0:	23c0      	movs	r3, #192	; 0xc0
10009ef2:	005b      	lsls	r3, r3, #1
10009ef4:	4a02      	ldr	r2, [pc, #8]	; (10009f00 <gpio_port0_isr_handler+0x60>)
10009ef6:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
10009ef8:	bd70      	pop	{r4, r5, r6, pc}
10009efa:	46c0      	nop			; (mov r8, r8)
10009efc:	10016bf0 	.word	0x10016bf0
10009f00:	e000e100 	.word	0xe000e100

10009f04 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
10009f04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
10009f06:	4b18      	ldr	r3, [pc, #96]	; (10009f68 <gpio_port1_isr_handler+0x64>)
10009f08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
10009f0a:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
10009f0c:	b2b6      	uxth	r6, r6
10009f0e:	0037      	movs	r7, r6
10009f10:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10009f12:	0b76      	lsrs	r6, r6, #13
10009f14:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10009f16:	4d14      	ldr	r5, [pc, #80]	; (10009f68 <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
10009f18:	2e00      	cmp	r6, #0
10009f1a:	d001      	beq.n	10009f20 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
10009f1c:	4b13      	ldr	r3, [pc, #76]	; (10009f6c <gpio_port1_isr_handler+0x68>)
10009f1e:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
10009f20:	0022      	movs	r2, r4
10009f22:	2301      	movs	r3, #1
10009f24:	40a3      	lsls	r3, r4
10009f26:	421f      	tst	r7, r3
10009f28:	d013      	beq.n	10009f52 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
10009f2a:	b29b      	uxth	r3, r3
10009f2c:	6ca9      	ldr	r1, [r5, #72]	; 0x48
10009f2e:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10009f30:	238e      	movs	r3, #142	; 0x8e
10009f32:	5aeb      	ldrh	r3, [r5, r3]
10009f34:	4123      	asrs	r3, r4
10009f36:	07db      	lsls	r3, r3, #31
10009f38:	d50b      	bpl.n	10009f52 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
10009f3a:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
10009f3c:	490a      	ldr	r1, [pc, #40]	; (10009f68 <gpio_port1_isr_handler+0x64>)
10009f3e:	5acb      	ldrh	r3, [r1, r3]
10009f40:	4123      	asrs	r3, r4
10009f42:	07db      	lsls	r3, r3, #31
10009f44:	d505      	bpl.n	10009f52 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
10009f46:	3212      	adds	r2, #18
10009f48:	0092      	lsls	r2, r2, #2
10009f4a:	188a      	adds	r2, r1, r2
10009f4c:	6853      	ldr	r3, [r2, #4]
10009f4e:	4798      	blx	r3
				break;
10009f50:	e002      	b.n	10009f58 <gpio_port1_isr_handler+0x54>
10009f52:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
10009f54:	2c10      	cmp	r4, #16
10009f56:	d1df      	bne.n	10009f18 <gpio_port1_isr_handler+0x14>
10009f58:	2180      	movs	r1, #128	; 0x80
10009f5a:	0449      	lsls	r1, r1, #17
10009f5c:	23c0      	movs	r3, #192	; 0xc0
10009f5e:	005b      	lsls	r3, r3, #1
10009f60:	4a03      	ldr	r2, [pc, #12]	; (10009f70 <gpio_port1_isr_handler+0x6c>)
10009f62:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
10009f64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10009f66:	46c0      	nop			; (mov r8, r8)
10009f68:	10016bf0 	.word	0x10016bf0
10009f6c:	0001bc51 	.word	0x0001bc51
10009f70:	e000e100 	.word	0xe000e100

10009f74 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
10009f74:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
10009f76:	2390      	movs	r3, #144	; 0x90
10009f78:	4a1b      	ldr	r2, [pc, #108]	; (10009fe8 <gpio_port2_isr_handler+0x74>)
10009f7a:	58d2      	ldr	r2, [r2, r3]
10009f7c:	8f13      	ldrh	r3, [r2, #56]	; 0x38
10009f7e:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
10009f80:	04d9      	lsls	r1, r3, #19
10009f82:	d414      	bmi.n	10009fae <gpio_port2_isr_handler+0x3a>
10009f84:	0499      	lsls	r1, r3, #18
10009f86:	d40a      	bmi.n	10009f9e <gpio_port2_isr_handler+0x2a>
10009f88:	0459      	lsls	r1, r3, #17
10009f8a:	d40c      	bmi.n	10009fa6 <gpio_port2_isr_handler+0x32>
10009f8c:	0bdb      	lsrs	r3, r3, #15
10009f8e:	03db      	lsls	r3, r3, #15
10009f90:	b29b      	uxth	r3, r3
10009f92:	2b00      	cmp	r3, #0
10009f94:	d020      	beq.n	10009fd8 <gpio_port2_isr_handler+0x64>
10009f96:	2380      	movs	r3, #128	; 0x80
10009f98:	021b      	lsls	r3, r3, #8
10009f9a:	210f      	movs	r1, #15
10009f9c:	e00a      	b.n	10009fb4 <gpio_port2_isr_handler+0x40>
10009f9e:	2380      	movs	r3, #128	; 0x80
10009fa0:	019b      	lsls	r3, r3, #6
10009fa2:	210d      	movs	r1, #13
10009fa4:	e006      	b.n	10009fb4 <gpio_port2_isr_handler+0x40>
10009fa6:	2380      	movs	r3, #128	; 0x80
10009fa8:	01db      	lsls	r3, r3, #7
10009faa:	210e      	movs	r1, #14
10009fac:	e002      	b.n	10009fb4 <gpio_port2_isr_handler+0x40>
10009fae:	2380      	movs	r3, #128	; 0x80
10009fb0:	015b      	lsls	r3, r3, #5
10009fb2:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
10009fb4:	b29b      	uxth	r3, r3
10009fb6:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10009fb8:	23d6      	movs	r3, #214	; 0xd6
10009fba:	4a0b      	ldr	r2, [pc, #44]	; (10009fe8 <gpio_port2_isr_handler+0x74>)
10009fbc:	5ad3      	ldrh	r3, [r2, r3]
10009fbe:	410b      	asrs	r3, r1
10009fc0:	07db      	lsls	r3, r3, #31
10009fc2:	d509      	bpl.n	10009fd8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
10009fc4:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
10009fc6:	5ad3      	ldrh	r3, [r2, r3]
10009fc8:	410b      	asrs	r3, r1
10009fca:	07db      	lsls	r3, r3, #31
10009fcc:	d504      	bpl.n	10009fd8 <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
10009fce:	3124      	adds	r1, #36	; 0x24
10009fd0:	0089      	lsls	r1, r1, #2
10009fd2:	1851      	adds	r1, r2, r1
10009fd4:	684b      	ldr	r3, [r1, #4]
10009fd6:	4798      	blx	r3
10009fd8:	2180      	movs	r1, #128	; 0x80
10009fda:	0489      	lsls	r1, r1, #18
10009fdc:	23c0      	movs	r3, #192	; 0xc0
10009fde:	005b      	lsls	r3, r3, #1
10009fe0:	4a02      	ldr	r2, [pc, #8]	; (10009fec <gpio_port2_isr_handler+0x78>)
10009fe2:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
10009fe4:	bd10      	pop	{r4, pc}
10009fe6:	46c0      	nop			; (mov r8, r8)
10009fe8:	10016bf0 	.word	0x10016bf0
10009fec:	e000e100 	.word	0xe000e100

10009ff0 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
10009ff0:	2300      	movs	r3, #0
10009ff2:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
10009ff4:	2201      	movs	r2, #1
10009ff6:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
10009ff8:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
10009ffa:	70c3      	strb	r3, [r0, #3]
}
10009ffc:	4770      	bx	lr
10009ffe:	46c0      	nop			; (mov r8, r8)

1000a000 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a000:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a002:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a004:	2801      	cmp	r0, #1
1000a006:	d800      	bhi.n	1000a00a <gpio_pin_set_config+0xa>
1000a008:	e0c8      	b.n	1000a19c <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a00a:	2807      	cmp	r0, #7
1000a00c:	d809      	bhi.n	1000a022 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a00e:	4d64      	ldr	r5, [pc, #400]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a010:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a012:	3b10      	subs	r3, #16
1000a014:	4003      	ands	r3, r0
1000a016:	009b      	lsls	r3, r3, #2
1000a018:	2407      	movs	r4, #7
1000a01a:	409c      	lsls	r4, r3
1000a01c:	43a2      	bics	r2, r4
1000a01e:	646a      	str	r2, [r5, #68]	; 0x44
1000a020:	e029      	b.n	1000a076 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a022:	280f      	cmp	r0, #15
1000a024:	d809      	bhi.n	1000a03a <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a026:	4d5e      	ldr	r5, [pc, #376]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a028:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a02a:	2307      	movs	r3, #7
1000a02c:	4003      	ands	r3, r0
1000a02e:	009b      	lsls	r3, r3, #2
1000a030:	2407      	movs	r4, #7
1000a032:	409c      	lsls	r4, r3
1000a034:	43a2      	bics	r2, r4
1000a036:	64aa      	str	r2, [r5, #72]	; 0x48
1000a038:	e01d      	b.n	1000a076 <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a03a:	2817      	cmp	r0, #23
1000a03c:	d809      	bhi.n	1000a052 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a03e:	4d58      	ldr	r5, [pc, #352]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a040:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a042:	2307      	movs	r3, #7
1000a044:	4003      	ands	r3, r0
1000a046:	009b      	lsls	r3, r3, #2
1000a048:	2407      	movs	r4, #7
1000a04a:	409c      	lsls	r4, r3
1000a04c:	43a2      	bics	r2, r4
1000a04e:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a050:	e011      	b.n	1000a076 <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a052:	0003      	movs	r3, r0
1000a054:	3b2c      	subs	r3, #44	; 0x2c
1000a056:	2b03      	cmp	r3, #3
1000a058:	d80d      	bhi.n	1000a076 <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a05a:	4d52      	ldr	r5, [pc, #328]	; (1000a1a4 <gpio_pin_set_config+0x1a4>)
1000a05c:	2482      	movs	r4, #130	; 0x82
1000a05e:	00e4      	lsls	r4, r4, #3
1000a060:	5d2a      	ldrb	r2, [r5, r4]
1000a062:	0712      	lsls	r2, r2, #28
1000a064:	2601      	movs	r6, #1
1000a066:	409e      	lsls	r6, r3
1000a068:	0f12      	lsrs	r2, r2, #28
1000a06a:	5d2b      	ldrb	r3, [r5, r4]
1000a06c:	43b2      	bics	r2, r6
1000a06e:	260f      	movs	r6, #15
1000a070:	43b3      	bics	r3, r6
1000a072:	4313      	orrs	r3, r2
1000a074:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000a076:	0003      	movs	r3, r0
1000a078:	3b1d      	subs	r3, #29
1000a07a:	2b02      	cmp	r3, #2
1000a07c:	d829      	bhi.n	1000a0d2 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000a07e:	784b      	ldrb	r3, [r1, #1]
1000a080:	2b01      	cmp	r3, #1
1000a082:	d108      	bne.n	1000a096 <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000a084:	4d47      	ldr	r5, [pc, #284]	; (1000a1a4 <gpio_pin_set_config+0x1a4>)
1000a086:	7d2b      	ldrb	r3, [r5, #20]
1000a088:	241f      	movs	r4, #31
1000a08a:	1a24      	subs	r4, r4, r0
1000a08c:	2201      	movs	r2, #1
1000a08e:	40a2      	lsls	r2, r4
1000a090:	4393      	bics	r3, r2
1000a092:	752b      	strb	r3, [r5, #20]
1000a094:	e008      	b.n	1000a0a8 <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000a096:	4c43      	ldr	r4, [pc, #268]	; (1000a1a4 <gpio_pin_set_config+0x1a4>)
1000a098:	7d25      	ldrb	r5, [r4, #20]
1000a09a:	221f      	movs	r2, #31
1000a09c:	1a12      	subs	r2, r2, r0
1000a09e:	2301      	movs	r3, #1
1000a0a0:	4093      	lsls	r3, r2
1000a0a2:	432b      	orrs	r3, r5
1000a0a4:	b2db      	uxtb	r3, r3
1000a0a6:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000a0a8:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a0aa:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000a0ac:	2a00      	cmp	r2, #0
1000a0ae:	d075      	beq.n	1000a19c <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000a0b0:	493c      	ldr	r1, [pc, #240]	; (1000a1a4 <gpio_pin_set_config+0x1a4>)
1000a0b2:	880c      	ldrh	r4, [r1, #0]
1000a0b4:	221f      	movs	r2, #31
1000a0b6:	1a10      	subs	r0, r2, r0
1000a0b8:	0080      	lsls	r0, r0, #2
1000a0ba:	3301      	adds	r3, #1
1000a0bc:	4083      	lsls	r3, r0
1000a0be:	4323      	orrs	r3, r4
1000a0c0:	b29b      	uxth	r3, r3
1000a0c2:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000a0c4:	4a38      	ldr	r2, [pc, #224]	; (1000a1a8 <gpio_pin_set_config+0x1a8>)
1000a0c6:	7811      	ldrb	r1, [r2, #0]
1000a0c8:	2302      	movs	r3, #2
1000a0ca:	430b      	orrs	r3, r1
1000a0cc:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a0ce:	2300      	movs	r3, #0
1000a0d0:	e064      	b.n	1000a19c <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000a0d2:	780a      	ldrb	r2, [r1, #0]
1000a0d4:	2a00      	cmp	r2, #0
1000a0d6:	d140      	bne.n	1000a15a <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000a0d8:	280f      	cmp	r0, #15
1000a0da:	d808      	bhi.n	1000a0ee <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000a0dc:	2301      	movs	r3, #1
1000a0de:	4083      	lsls	r3, r0
1000a0e0:	b29b      	uxth	r3, r3
1000a0e2:	4a32      	ldr	r2, [pc, #200]	; (1000a1ac <gpio_pin_set_config+0x1ac>)
1000a0e4:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a0e6:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000a0e8:	281f      	cmp	r0, #31
1000a0ea:	d857      	bhi.n	1000a19c <gpio_pin_set_config+0x19c>
1000a0ec:	e012      	b.n	1000a114 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000a0ee:	281f      	cmp	r0, #31
1000a0f0:	d807      	bhi.n	1000a102 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a0f2:	220f      	movs	r2, #15
1000a0f4:	4002      	ands	r2, r0
1000a0f6:	2301      	movs	r3, #1
1000a0f8:	4093      	lsls	r3, r2
1000a0fa:	b29b      	uxth	r3, r3
1000a0fc:	4a2c      	ldr	r2, [pc, #176]	; (1000a1b0 <gpio_pin_set_config+0x1b0>)
1000a0fe:	8293      	strh	r3, [r2, #20]
1000a100:	e008      	b.n	1000a114 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000a102:	230f      	movs	r3, #15
1000a104:	4018      	ands	r0, r3
1000a106:	3b0e      	subs	r3, #14
1000a108:	4083      	lsls	r3, r0
1000a10a:	b29b      	uxth	r3, r3
1000a10c:	4a29      	ldr	r2, [pc, #164]	; (1000a1b4 <gpio_pin_set_config+0x1b4>)
1000a10e:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a110:	2300      	movs	r3, #0
1000a112:	e043      	b.n	1000a19c <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000a114:	784b      	ldrb	r3, [r1, #1]
1000a116:	2b01      	cmp	r3, #1
1000a118:	d00c      	beq.n	1000a134 <gpio_pin_set_config+0x134>
1000a11a:	2b00      	cmp	r3, #0
1000a11c:	d002      	beq.n	1000a124 <gpio_pin_set_config+0x124>
1000a11e:	2b02      	cmp	r3, #2
1000a120:	d010      	beq.n	1000a144 <gpio_pin_set_config+0x144>
1000a122:	e03a      	b.n	1000a19a <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000a124:	491e      	ldr	r1, [pc, #120]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a126:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000a128:	2301      	movs	r3, #1
1000a12a:	4083      	lsls	r3, r0
1000a12c:	4313      	orrs	r3, r2
1000a12e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a130:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000a132:	e033      	b.n	1000a19c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a134:	491a      	ldr	r1, [pc, #104]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a136:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000a138:	2201      	movs	r2, #1
1000a13a:	4082      	lsls	r2, r0
1000a13c:	4393      	bics	r3, r2
1000a13e:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a140:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a142:	e02b      	b.n	1000a19c <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000a144:	4b16      	ldr	r3, [pc, #88]	; (1000a1a0 <gpio_pin_set_config+0x1a0>)
1000a146:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000a148:	2201      	movs	r2, #1
1000a14a:	4082      	lsls	r2, r0
1000a14c:	4311      	orrs	r1, r2
1000a14e:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000a150:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000a152:	4391      	bics	r1, r2
1000a154:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a156:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000a158:	e020      	b.n	1000a19c <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a15a:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000a15c:	2a01      	cmp	r2, #1
1000a15e:	d11d      	bne.n	1000a19c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000a160:	280f      	cmp	r0, #15
1000a162:	d806      	bhi.n	1000a172 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000a164:	3301      	adds	r3, #1
1000a166:	4083      	lsls	r3, r0
1000a168:	b29b      	uxth	r3, r3
1000a16a:	4a10      	ldr	r2, [pc, #64]	; (1000a1ac <gpio_pin_set_config+0x1ac>)
1000a16c:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a16e:	2300      	movs	r3, #0
1000a170:	e014      	b.n	1000a19c <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000a172:	281f      	cmp	r0, #31
1000a174:	d808      	bhi.n	1000a188 <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a176:	230f      	movs	r3, #15
1000a178:	4018      	ands	r0, r3
1000a17a:	3b0e      	subs	r3, #14
1000a17c:	4083      	lsls	r3, r0
1000a17e:	b29b      	uxth	r3, r3
1000a180:	4a0b      	ldr	r2, [pc, #44]	; (1000a1b0 <gpio_pin_set_config+0x1b0>)
1000a182:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a184:	2300      	movs	r3, #0
1000a186:	e009      	b.n	1000a19c <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000a188:	230f      	movs	r3, #15
1000a18a:	4018      	ands	r0, r3
1000a18c:	3b0e      	subs	r3, #14
1000a18e:	4083      	lsls	r3, r0
1000a190:	b29b      	uxth	r3, r3
1000a192:	4a08      	ldr	r2, [pc, #32]	; (1000a1b4 <gpio_pin_set_config+0x1b4>)
1000a194:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000a196:	2300      	movs	r3, #0
1000a198:	e000      	b.n	1000a19c <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000a19a:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000a19c:	0018      	movs	r0, r3
1000a19e:	bd70      	pop	{r4, r5, r6, pc}
1000a1a0:	4000b000 	.word	0x4000b000
1000a1a4:	4000f000 	.word	0x4000f000
1000a1a8:	4000e000 	.word	0x4000e000
1000a1ac:	40010000 	.word	0x40010000
1000a1b0:	40011000 	.word	0x40011000
1000a1b4:	40013000 	.word	0x40013000

1000a1b8 <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000a1b8:	280f      	cmp	r0, #15
1000a1ba:	d806      	bhi.n	1000a1ca <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000a1bc:	4b0f      	ldr	r3, [pc, #60]	; (1000a1fc <gpio_pin_get_input_level+0x44>)
1000a1be:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000a1c0:	2301      	movs	r3, #1
1000a1c2:	4083      	lsls	r3, r0
1000a1c4:	0018      	movs	r0, r3
1000a1c6:	4008      	ands	r0, r1
1000a1c8:	e014      	b.n	1000a1f4 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000a1ca:	281f      	cmp	r0, #31
1000a1cc:	d809      	bhi.n	1000a1e2 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000a1ce:	4b0c      	ldr	r3, [pc, #48]	; (1000a200 <gpio_pin_get_input_level+0x48>)
1000a1d0:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000a1d2:	230f      	movs	r3, #15
1000a1d4:	4003      	ands	r3, r0
1000a1d6:	001a      	movs	r2, r3
1000a1d8:	2301      	movs	r3, #1
1000a1da:	4093      	lsls	r3, r2
1000a1dc:	0018      	movs	r0, r3
1000a1de:	4008      	ands	r0, r1
1000a1e0:	e008      	b.n	1000a1f4 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000a1e2:	4b08      	ldr	r3, [pc, #32]	; (1000a204 <gpio_pin_get_input_level+0x4c>)
1000a1e4:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000a1e6:	230f      	movs	r3, #15
1000a1e8:	4003      	ands	r3, r0
1000a1ea:	001a      	movs	r2, r3
1000a1ec:	2301      	movs	r3, #1
1000a1ee:	4093      	lsls	r3, r2
1000a1f0:	0018      	movs	r0, r3
1000a1f2:	4008      	ands	r0, r1
	}

	return regval;
1000a1f4:	1e43      	subs	r3, r0, #1
1000a1f6:	4198      	sbcs	r0, r3
1000a1f8:	b2c0      	uxtb	r0, r0
}
1000a1fa:	4770      	bx	lr
1000a1fc:	40010000 	.word	0x40010000
1000a200:	40011000 	.word	0x40011000
1000a204:	40013000 	.word	0x40013000

1000a208 <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000a208:	280f      	cmp	r0, #15
1000a20a:	d806      	bhi.n	1000a21a <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000a20c:	4b0f      	ldr	r3, [pc, #60]	; (1000a24c <gpio_pin_get_output_level+0x44>)
1000a20e:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000a210:	2301      	movs	r3, #1
1000a212:	4083      	lsls	r3, r0
1000a214:	0018      	movs	r0, r3
1000a216:	4008      	ands	r0, r1
1000a218:	e014      	b.n	1000a244 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000a21a:	281f      	cmp	r0, #31
1000a21c:	d809      	bhi.n	1000a232 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000a21e:	4b0c      	ldr	r3, [pc, #48]	; (1000a250 <gpio_pin_get_output_level+0x48>)
1000a220:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000a222:	230f      	movs	r3, #15
1000a224:	4003      	ands	r3, r0
1000a226:	001a      	movs	r2, r3
1000a228:	2301      	movs	r3, #1
1000a22a:	4093      	lsls	r3, r2
1000a22c:	0018      	movs	r0, r3
1000a22e:	4008      	ands	r0, r1
1000a230:	e008      	b.n	1000a244 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000a232:	4b08      	ldr	r3, [pc, #32]	; (1000a254 <gpio_pin_get_output_level+0x4c>)
1000a234:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000a236:	230f      	movs	r3, #15
1000a238:	4003      	ands	r3, r0
1000a23a:	001a      	movs	r2, r3
1000a23c:	2301      	movs	r3, #1
1000a23e:	4093      	lsls	r3, r2
1000a240:	0018      	movs	r0, r3
1000a242:	4008      	ands	r0, r1
	}

	return regval;
1000a244:	1e43      	subs	r3, r0, #1
1000a246:	4198      	sbcs	r0, r3
1000a248:	b2c0      	uxtb	r0, r0
}
1000a24a:	4770      	bx	lr
1000a24c:	40010000 	.word	0x40010000
1000a250:	40011000 	.word	0x40011000
1000a254:	40013000 	.word	0x40013000

1000a258 <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000a258:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000a25a:	280f      	cmp	r0, #15
1000a25c:	d810      	bhi.n	1000a280 <gpio_pin_set_output_level+0x28>
		if(level) {
1000a25e:	2900      	cmp	r1, #0
1000a260:	d007      	beq.n	1000a272 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000a262:	4a1d      	ldr	r2, [pc, #116]	; (1000a2d8 <gpio_pin_set_output_level+0x80>)
1000a264:	8891      	ldrh	r1, [r2, #4]
1000a266:	2301      	movs	r3, #1
1000a268:	4083      	lsls	r3, r0
1000a26a:	430b      	orrs	r3, r1
1000a26c:	b29b      	uxth	r3, r3
1000a26e:	8093      	strh	r3, [r2, #4]
1000a270:	e031      	b.n	1000a2d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000a272:	4919      	ldr	r1, [pc, #100]	; (1000a2d8 <gpio_pin_set_output_level+0x80>)
1000a274:	888b      	ldrh	r3, [r1, #4]
1000a276:	2201      	movs	r2, #1
1000a278:	4082      	lsls	r2, r0
1000a27a:	4393      	bics	r3, r2
1000a27c:	808b      	strh	r3, [r1, #4]
1000a27e:	e02a      	b.n	1000a2d6 <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000a280:	281f      	cmp	r0, #31
1000a282:	d814      	bhi.n	1000a2ae <gpio_pin_set_output_level+0x56>
		if(level) {
1000a284:	2900      	cmp	r1, #0
1000a286:	d009      	beq.n	1000a29c <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a288:	4914      	ldr	r1, [pc, #80]	; (1000a2dc <gpio_pin_set_output_level+0x84>)
1000a28a:	888c      	ldrh	r4, [r1, #4]
1000a28c:	220f      	movs	r2, #15
1000a28e:	4010      	ands	r0, r2
1000a290:	2301      	movs	r3, #1
1000a292:	4083      	lsls	r3, r0
1000a294:	4323      	orrs	r3, r4
1000a296:	b29b      	uxth	r3, r3
1000a298:	808b      	strh	r3, [r1, #4]
1000a29a:	e01c      	b.n	1000a2d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a29c:	490f      	ldr	r1, [pc, #60]	; (1000a2dc <gpio_pin_set_output_level+0x84>)
1000a29e:	888b      	ldrh	r3, [r1, #4]
1000a2a0:	220f      	movs	r2, #15
1000a2a2:	4010      	ands	r0, r2
1000a2a4:	3a0e      	subs	r2, #14
1000a2a6:	4082      	lsls	r2, r0
1000a2a8:	4393      	bics	r3, r2
1000a2aa:	808b      	strh	r3, [r1, #4]
1000a2ac:	e013      	b.n	1000a2d6 <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000a2ae:	2900      	cmp	r1, #0
1000a2b0:	d009      	beq.n	1000a2c6 <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000a2b2:	490b      	ldr	r1, [pc, #44]	; (1000a2e0 <gpio_pin_set_output_level+0x88>)
1000a2b4:	888c      	ldrh	r4, [r1, #4]
1000a2b6:	220f      	movs	r2, #15
1000a2b8:	4010      	ands	r0, r2
1000a2ba:	2301      	movs	r3, #1
1000a2bc:	4083      	lsls	r3, r0
1000a2be:	4323      	orrs	r3, r4
1000a2c0:	b29b      	uxth	r3, r3
1000a2c2:	808b      	strh	r3, [r1, #4]
1000a2c4:	e007      	b.n	1000a2d6 <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000a2c6:	4906      	ldr	r1, [pc, #24]	; (1000a2e0 <gpio_pin_set_output_level+0x88>)
1000a2c8:	888b      	ldrh	r3, [r1, #4]
1000a2ca:	220f      	movs	r2, #15
1000a2cc:	4010      	ands	r0, r2
1000a2ce:	3a0e      	subs	r2, #14
1000a2d0:	4082      	lsls	r2, r0
1000a2d2:	4393      	bics	r3, r2
1000a2d4:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000a2d6:	bd10      	pop	{r4, pc}
1000a2d8:	40010000 	.word	0x40010000
1000a2dc:	40011000 	.word	0x40011000
1000a2e0:	40013000 	.word	0x40013000

1000a2e4 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000a2e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000a2e6:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000a2e8:	23ff      	movs	r3, #255	; 0xff
1000a2ea:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000a2ec:	2807      	cmp	r0, #7
1000a2ee:	d833      	bhi.n	1000a358 <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a2f0:	4a4e      	ldr	r2, [pc, #312]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a2f2:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a2f4:	3bf8      	subs	r3, #248	; 0xf8
1000a2f6:	4003      	ands	r3, r0
1000a2f8:	009b      	lsls	r3, r3, #2
1000a2fa:	2607      	movs	r6, #7
1000a2fc:	409e      	lsls	r6, r3
1000a2fe:	43b4      	bics	r4, r6
1000a300:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a302:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000a304:	000e      	movs	r6, r1
1000a306:	409e      	lsls	r6, r3
1000a308:	0033      	movs	r3, r6
1000a30a:	4323      	orrs	r3, r4
1000a30c:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000a30e:	2901      	cmp	r1, #1
1000a310:	d000      	beq.n	1000a314 <gpio_pinmux_cofiguration+0x30>
1000a312:	e08a      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000a314:	2803      	cmp	r0, #3
1000a316:	d80f      	bhi.n	1000a338 <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a318:	0011      	movs	r1, r2
1000a31a:	22d0      	movs	r2, #208	; 0xd0
1000a31c:	0052      	lsls	r2, r2, #1
1000a31e:	588c      	ldr	r4, [r1, r2]
1000a320:	2303      	movs	r3, #3
1000a322:	4018      	ands	r0, r3
1000a324:	00c0      	lsls	r0, r0, #3
1000a326:	333c      	adds	r3, #60	; 0x3c
1000a328:	4083      	lsls	r3, r0
1000a32a:	439c      	bics	r4, r3
1000a32c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a32e:	588b      	ldr	r3, [r1, r2]
1000a330:	4085      	lsls	r5, r0
1000a332:	431d      	orrs	r5, r3
1000a334:	508d      	str	r5, [r1, r2]
1000a336:	e078      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a338:	493c      	ldr	r1, [pc, #240]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a33a:	22d2      	movs	r2, #210	; 0xd2
1000a33c:	0052      	lsls	r2, r2, #1
1000a33e:	588c      	ldr	r4, [r1, r2]
1000a340:	2303      	movs	r3, #3
1000a342:	4018      	ands	r0, r3
1000a344:	00c0      	lsls	r0, r0, #3
1000a346:	333c      	adds	r3, #60	; 0x3c
1000a348:	4083      	lsls	r3, r0
1000a34a:	439c      	bics	r4, r3
1000a34c:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a34e:	588b      	ldr	r3, [r1, r2]
1000a350:	4085      	lsls	r5, r0
1000a352:	431d      	orrs	r5, r3
1000a354:	508d      	str	r5, [r1, r2]
1000a356:	e068      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000a358:	280f      	cmp	r0, #15
1000a35a:	d832      	bhi.n	1000a3c2 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a35c:	4a33      	ldr	r2, [pc, #204]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a35e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a360:	2307      	movs	r3, #7
1000a362:	4003      	ands	r3, r0
1000a364:	009b      	lsls	r3, r3, #2
1000a366:	2607      	movs	r6, #7
1000a368:	409e      	lsls	r6, r3
1000a36a:	43b4      	bics	r4, r6
1000a36c:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a36e:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000a370:	000e      	movs	r6, r1
1000a372:	409e      	lsls	r6, r3
1000a374:	0033      	movs	r3, r6
1000a376:	4323      	orrs	r3, r4
1000a378:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000a37a:	2901      	cmp	r1, #1
1000a37c:	d155      	bne.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000a37e:	280b      	cmp	r0, #11
1000a380:	d80f      	bhi.n	1000a3a2 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a382:	0011      	movs	r1, r2
1000a384:	22d4      	movs	r2, #212	; 0xd4
1000a386:	0052      	lsls	r2, r2, #1
1000a388:	588c      	ldr	r4, [r1, r2]
1000a38a:	2303      	movs	r3, #3
1000a38c:	4018      	ands	r0, r3
1000a38e:	00c0      	lsls	r0, r0, #3
1000a390:	333c      	adds	r3, #60	; 0x3c
1000a392:	4083      	lsls	r3, r0
1000a394:	439c      	bics	r4, r3
1000a396:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a398:	588b      	ldr	r3, [r1, r2]
1000a39a:	4085      	lsls	r5, r0
1000a39c:	431d      	orrs	r5, r3
1000a39e:	508d      	str	r5, [r1, r2]
1000a3a0:	e043      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a3a2:	4922      	ldr	r1, [pc, #136]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a3a4:	22d6      	movs	r2, #214	; 0xd6
1000a3a6:	0052      	lsls	r2, r2, #1
1000a3a8:	588c      	ldr	r4, [r1, r2]
1000a3aa:	2303      	movs	r3, #3
1000a3ac:	4018      	ands	r0, r3
1000a3ae:	00c0      	lsls	r0, r0, #3
1000a3b0:	333c      	adds	r3, #60	; 0x3c
1000a3b2:	4083      	lsls	r3, r0
1000a3b4:	439c      	bics	r4, r3
1000a3b6:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a3b8:	588b      	ldr	r3, [r1, r2]
1000a3ba:	4085      	lsls	r5, r0
1000a3bc:	431d      	orrs	r5, r3
1000a3be:	508d      	str	r5, [r1, r2]
1000a3c0:	e033      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000a3c2:	2817      	cmp	r0, #23
1000a3c4:	d831      	bhi.n	1000a42a <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a3c6:	4a19      	ldr	r2, [pc, #100]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a3c8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a3ca:	2307      	movs	r3, #7
1000a3cc:	4003      	ands	r3, r0
1000a3ce:	009b      	lsls	r3, r3, #2
1000a3d0:	2607      	movs	r6, #7
1000a3d2:	409e      	lsls	r6, r3
1000a3d4:	43b4      	bics	r4, r6
1000a3d6:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000a3d8:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000a3da:	000e      	movs	r6, r1
1000a3dc:	409e      	lsls	r6, r3
1000a3de:	0033      	movs	r3, r6
1000a3e0:	4323      	orrs	r3, r4
1000a3e2:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000a3e4:	2901      	cmp	r1, #1
1000a3e6:	d120      	bne.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000a3e8:	2813      	cmp	r0, #19
1000a3ea:	d80f      	bhi.n	1000a40c <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a3ec:	0011      	movs	r1, r2
1000a3ee:	22d8      	movs	r2, #216	; 0xd8
1000a3f0:	0052      	lsls	r2, r2, #1
1000a3f2:	588c      	ldr	r4, [r1, r2]
1000a3f4:	2303      	movs	r3, #3
1000a3f6:	4018      	ands	r0, r3
1000a3f8:	00c0      	lsls	r0, r0, #3
1000a3fa:	333c      	adds	r3, #60	; 0x3c
1000a3fc:	4083      	lsls	r3, r0
1000a3fe:	439c      	bics	r4, r3
1000a400:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a402:	588b      	ldr	r3, [r1, r2]
1000a404:	4085      	lsls	r5, r0
1000a406:	431d      	orrs	r5, r3
1000a408:	508d      	str	r5, [r1, r2]
1000a40a:	e00e      	b.n	1000a42a <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000a40c:	4a07      	ldr	r2, [pc, #28]	; (1000a42c <gpio_pinmux_cofiguration+0x148>)
1000a40e:	23da      	movs	r3, #218	; 0xda
1000a410:	005b      	lsls	r3, r3, #1
1000a412:	58d1      	ldr	r1, [r2, r3]
1000a414:	2403      	movs	r4, #3
1000a416:	4020      	ands	r0, r4
1000a418:	00c0      	lsls	r0, r0, #3
1000a41a:	343c      	adds	r4, #60	; 0x3c
1000a41c:	4084      	lsls	r4, r0
1000a41e:	43a1      	bics	r1, r4
1000a420:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000a422:	58d1      	ldr	r1, [r2, r3]
1000a424:	4085      	lsls	r5, r0
1000a426:	430d      	orrs	r5, r1
1000a428:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000a42a:	bd70      	pop	{r4, r5, r6, pc}
1000a42c:	4000b000 	.word	0x4000b000

1000a430 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000a430:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a432:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a434:	280f      	cmp	r0, #15
1000a436:	d904      	bls.n	1000a442 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a438:	241f      	movs	r4, #31
1000a43a:	4284      	cmp	r4, r0
1000a43c:	415b      	adcs	r3, r3
1000a43e:	3c1d      	subs	r4, #29
1000a440:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000a442:	2a01      	cmp	r2, #1
1000a444:	d016      	beq.n	1000a474 <gpio_register_callback+0x44>
1000a446:	2a00      	cmp	r2, #0
1000a448:	d004      	beq.n	1000a454 <gpio_register_callback+0x24>
1000a44a:	2a02      	cmp	r2, #2
1000a44c:	d022      	beq.n	1000a494 <gpio_register_callback+0x64>
1000a44e:	2a03      	cmp	r2, #3
1000a450:	d030      	beq.n	1000a4b4 <gpio_register_callback+0x84>
1000a452:	e03e      	b.n	1000a4d2 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a454:	4e29      	ldr	r6, [pc, #164]	; (1000a4fc <gpio_register_callback+0xcc>)
1000a456:	00dc      	lsls	r4, r3, #3
1000a458:	18e2      	adds	r2, r4, r3
1000a45a:	00d2      	lsls	r2, r2, #3
1000a45c:	5997      	ldr	r7, [r2, r6]
1000a45e:	250f      	movs	r5, #15
1000a460:	4005      	ands	r5, r0
1000a462:	2201      	movs	r2, #1
1000a464:	40aa      	lsls	r2, r5
1000a466:	b292      	uxth	r2, r2
1000a468:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000a46a:	18e4      	adds	r4, r4, r3
1000a46c:	00e4      	lsls	r4, r4, #3
1000a46e:	59a4      	ldr	r4, [r4, r6]
1000a470:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000a472:	e02e      	b.n	1000a4d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000a474:	4e21      	ldr	r6, [pc, #132]	; (1000a4fc <gpio_register_callback+0xcc>)
1000a476:	00dc      	lsls	r4, r3, #3
1000a478:	18e2      	adds	r2, r4, r3
1000a47a:	00d2      	lsls	r2, r2, #3
1000a47c:	5997      	ldr	r7, [r2, r6]
1000a47e:	250f      	movs	r5, #15
1000a480:	4005      	ands	r5, r0
1000a482:	2201      	movs	r2, #1
1000a484:	40aa      	lsls	r2, r5
1000a486:	b292      	uxth	r2, r2
1000a488:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a48a:	18e4      	adds	r4, r4, r3
1000a48c:	00e4      	lsls	r4, r4, #3
1000a48e:	59a4      	ldr	r4, [r4, r6]
1000a490:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a492:	e01e      	b.n	1000a4d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a494:	4e19      	ldr	r6, [pc, #100]	; (1000a4fc <gpio_register_callback+0xcc>)
1000a496:	00dc      	lsls	r4, r3, #3
1000a498:	18e2      	adds	r2, r4, r3
1000a49a:	00d2      	lsls	r2, r2, #3
1000a49c:	5997      	ldr	r7, [r2, r6]
1000a49e:	250f      	movs	r5, #15
1000a4a0:	4005      	ands	r5, r0
1000a4a2:	2201      	movs	r2, #1
1000a4a4:	40aa      	lsls	r2, r5
1000a4a6:	b292      	uxth	r2, r2
1000a4a8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000a4aa:	18e4      	adds	r4, r4, r3
1000a4ac:	00e4      	lsls	r4, r4, #3
1000a4ae:	59a4      	ldr	r4, [r4, r6]
1000a4b0:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000a4b2:	e00e      	b.n	1000a4d2 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000a4b4:	4e11      	ldr	r6, [pc, #68]	; (1000a4fc <gpio_register_callback+0xcc>)
1000a4b6:	00dc      	lsls	r4, r3, #3
1000a4b8:	18e2      	adds	r2, r4, r3
1000a4ba:	00d2      	lsls	r2, r2, #3
1000a4bc:	5997      	ldr	r7, [r2, r6]
1000a4be:	250f      	movs	r5, #15
1000a4c0:	4005      	ands	r5, r0
1000a4c2:	2201      	movs	r2, #1
1000a4c4:	40aa      	lsls	r2, r5
1000a4c6:	b292      	uxth	r2, r2
1000a4c8:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000a4ca:	18e4      	adds	r4, r4, r3
1000a4cc:	00e4      	lsls	r4, r4, #3
1000a4ce:	59a4      	ldr	r4, [r4, r6]
1000a4d0:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000a4d2:	220f      	movs	r2, #15
1000a4d4:	4010      	ands	r0, r2
1000a4d6:	4c09      	ldr	r4, [pc, #36]	; (1000a4fc <gpio_register_callback+0xcc>)
1000a4d8:	00dd      	lsls	r5, r3, #3
1000a4da:	18ea      	adds	r2, r5, r3
1000a4dc:	0052      	lsls	r2, r2, #1
1000a4de:	1812      	adds	r2, r2, r0
1000a4e0:	0092      	lsls	r2, r2, #2
1000a4e2:	18a2      	adds	r2, r4, r2
1000a4e4:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000a4e6:	18ea      	adds	r2, r5, r3
1000a4e8:	00d2      	lsls	r2, r2, #3
1000a4ea:	18a2      	adds	r2, r4, r2
1000a4ec:	3244      	adds	r2, #68	; 0x44
1000a4ee:	2101      	movs	r1, #1
1000a4f0:	4081      	lsls	r1, r0
1000a4f2:	8813      	ldrh	r3, [r2, #0]
1000a4f4:	430b      	orrs	r3, r1
1000a4f6:	8013      	strh	r3, [r2, #0]
}
1000a4f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a4fa:	46c0      	nop			; (mov r8, r8)
1000a4fc:	10016bf0 	.word	0x10016bf0

1000a500 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000a500:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a502:	280f      	cmp	r0, #15
1000a504:	d805      	bhi.n	1000a512 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a506:	2280      	movs	r2, #128	; 0x80
1000a508:	0412      	lsls	r2, r2, #16
1000a50a:	4b12      	ldr	r3, [pc, #72]	; (1000a554 <gpio_enable_callback+0x54>)
1000a50c:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000a50e:	2200      	movs	r2, #0
1000a510:	e00c      	b.n	1000a52c <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000a512:	281f      	cmp	r0, #31
1000a514:	d805      	bhi.n	1000a522 <gpio_enable_callback+0x22>
1000a516:	2280      	movs	r2, #128	; 0x80
1000a518:	0452      	lsls	r2, r2, #17
1000a51a:	4b0e      	ldr	r3, [pc, #56]	; (1000a554 <gpio_enable_callback+0x54>)
1000a51c:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000a51e:	2201      	movs	r2, #1
1000a520:	e004      	b.n	1000a52c <gpio_enable_callback+0x2c>
1000a522:	2280      	movs	r2, #128	; 0x80
1000a524:	0492      	lsls	r2, r2, #18
1000a526:	4b0b      	ldr	r3, [pc, #44]	; (1000a554 <gpio_enable_callback+0x54>)
1000a528:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000a52a:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000a52c:	230f      	movs	r3, #15
1000a52e:	4018      	ands	r0, r3
1000a530:	2101      	movs	r1, #1
1000a532:	4081      	lsls	r1, r0
1000a534:	4c08      	ldr	r4, [pc, #32]	; (1000a558 <gpio_enable_callback+0x58>)
1000a536:	00d5      	lsls	r5, r2, #3
1000a538:	18ab      	adds	r3, r5, r2
1000a53a:	00db      	lsls	r3, r3, #3
1000a53c:	18e3      	adds	r3, r4, r3
1000a53e:	3346      	adds	r3, #70	; 0x46
1000a540:	8818      	ldrh	r0, [r3, #0]
1000a542:	4308      	orrs	r0, r1
1000a544:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000a546:	18aa      	adds	r2, r5, r2
1000a548:	00d2      	lsls	r2, r2, #3
1000a54a:	5913      	ldr	r3, [r2, r4]
1000a54c:	b289      	uxth	r1, r1
1000a54e:	8419      	strh	r1, [r3, #32]
}
1000a550:	bd30      	pop	{r4, r5, pc}
1000a552:	46c0      	nop			; (mov r8, r8)
1000a554:	e000e100 	.word	0xe000e100
1000a558:	10016bf0 	.word	0x10016bf0

1000a55c <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000a55c:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000a55e:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000a560:	280f      	cmp	r0, #15
1000a562:	d904      	bls.n	1000a56e <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000a564:	221f      	movs	r2, #31
1000a566:	4282      	cmp	r2, r0
1000a568:	415b      	adcs	r3, r3
1000a56a:	3a1d      	subs	r2, #29
1000a56c:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000a56e:	220f      	movs	r2, #15
1000a570:	4010      	ands	r0, r2
1000a572:	2101      	movs	r1, #1
1000a574:	4081      	lsls	r1, r0
1000a576:	4c07      	ldr	r4, [pc, #28]	; (1000a594 <gpio_disable_callback+0x38>)
1000a578:	00dd      	lsls	r5, r3, #3
1000a57a:	18ea      	adds	r2, r5, r3
1000a57c:	00d2      	lsls	r2, r2, #3
1000a57e:	18a2      	adds	r2, r4, r2
1000a580:	3246      	adds	r2, #70	; 0x46
1000a582:	8810      	ldrh	r0, [r2, #0]
1000a584:	4388      	bics	r0, r1
1000a586:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000a588:	18eb      	adds	r3, r5, r3
1000a58a:	00db      	lsls	r3, r3, #3
1000a58c:	591b      	ldr	r3, [r3, r4]
1000a58e:	b289      	uxth	r1, r1
1000a590:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000a592:	bd30      	pop	{r4, r5, pc}
1000a594:	10016bf0 	.word	0x10016bf0

1000a598 <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000a598:	b510      	push	{r4, lr}
1000a59a:	4a11      	ldr	r2, [pc, #68]	; (1000a5e0 <gpio_init+0x48>)
1000a59c:	0010      	movs	r0, r2
1000a59e:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000a5a0:	2100      	movs	r1, #0
1000a5a2:	e007      	b.n	1000a5b4 <gpio_init+0x1c>
1000a5a4:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000a5a6:	4293      	cmp	r3, r2
1000a5a8:	d1fc      	bne.n	1000a5a4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000a5aa:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000a5ac:	8011      	strh	r1, [r2, #0]
1000a5ae:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000a5b0:	4282      	cmp	r2, r0
1000a5b2:	d002      	beq.n	1000a5ba <gpio_init+0x22>
1000a5b4:	0013      	movs	r3, r2
1000a5b6:	3b40      	subs	r3, #64	; 0x40
1000a5b8:	e7f4      	b.n	1000a5a4 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000a5ba:	4b0a      	ldr	r3, [pc, #40]	; (1000a5e4 <gpio_init+0x4c>)
1000a5bc:	4a0a      	ldr	r2, [pc, #40]	; (1000a5e8 <gpio_init+0x50>)
1000a5be:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000a5c0:	4a0a      	ldr	r2, [pc, #40]	; (1000a5ec <gpio_init+0x54>)
1000a5c2:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000a5c4:	490a      	ldr	r1, [pc, #40]	; (1000a5f0 <gpio_init+0x58>)
1000a5c6:	2290      	movs	r2, #144	; 0x90
1000a5c8:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000a5ca:	490a      	ldr	r1, [pc, #40]	; (1000a5f4 <gpio_init+0x5c>)
1000a5cc:	2027      	movs	r0, #39	; 0x27
1000a5ce:	4c0a      	ldr	r4, [pc, #40]	; (1000a5f8 <gpio_init+0x60>)
1000a5d0:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000a5d2:	490a      	ldr	r1, [pc, #40]	; (1000a5fc <gpio_init+0x64>)
1000a5d4:	2028      	movs	r0, #40	; 0x28
1000a5d6:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000a5d8:	4909      	ldr	r1, [pc, #36]	; (1000a600 <gpio_init+0x68>)
1000a5da:	2029      	movs	r0, #41	; 0x29
1000a5dc:	47a0      	blx	r4
}
1000a5de:	bd10      	pop	{r4, pc}
1000a5e0:	10016c34 	.word	0x10016c34
1000a5e4:	10016bf0 	.word	0x10016bf0
1000a5e8:	40010000 	.word	0x40010000
1000a5ec:	40011000 	.word	0x40011000
1000a5f0:	40013000 	.word	0x40013000
1000a5f4:	10009ea1 	.word	0x10009ea1
1000a5f8:	1000b1c5 	.word	0x1000b1c5
1000a5fc:	10009f05 	.word	0x10009f05
1000a600:	10009f75 	.word	0x10009f75

1000a604 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000a604:	2801      	cmp	r0, #1
1000a606:	d00d      	beq.n	1000a624 <system_clock_config+0x20>
1000a608:	2800      	cmp	r0, #0
1000a60a:	d002      	beq.n	1000a612 <system_clock_config+0xe>
1000a60c:	2802      	cmp	r0, #2
1000a60e:	d01c      	beq.n	1000a64a <system_clock_config+0x46>
1000a610:	e02e      	b.n	1000a670 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a612:	4a18      	ldr	r2, [pc, #96]	; (1000a674 <system_clock_config+0x70>)
1000a614:	6990      	ldr	r0, [r2, #24]
1000a616:	230c      	movs	r3, #12
1000a618:	4303      	orrs	r3, r0
1000a61a:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000a61c:	4a16      	ldr	r2, [pc, #88]	; (1000a678 <system_clock_config+0x74>)
1000a61e:	4b17      	ldr	r3, [pc, #92]	; (1000a67c <system_clock_config+0x78>)
1000a620:	601a      	str	r2, [r3, #0]
			break;
1000a622:	e01a      	b.n	1000a65a <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a624:	4b13      	ldr	r3, [pc, #76]	; (1000a674 <system_clock_config+0x70>)
1000a626:	6998      	ldr	r0, [r3, #24]
1000a628:	2208      	movs	r2, #8
1000a62a:	4302      	orrs	r2, r0
1000a62c:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a62e:	699a      	ldr	r2, [r3, #24]
1000a630:	2004      	movs	r0, #4
1000a632:	4382      	bics	r2, r0
1000a634:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000a636:	4a12      	ldr	r2, [pc, #72]	; (1000a680 <system_clock_config+0x7c>)
1000a638:	6853      	ldr	r3, [r2, #4]
1000a63a:	2080      	movs	r0, #128	; 0x80
1000a63c:	0300      	lsls	r0, r0, #12
1000a63e:	4303      	orrs	r3, r0
1000a640:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000a642:	4a10      	ldr	r2, [pc, #64]	; (1000a684 <system_clock_config+0x80>)
1000a644:	4b0d      	ldr	r3, [pc, #52]	; (1000a67c <system_clock_config+0x78>)
1000a646:	601a      	str	r2, [r3, #0]
			break;
1000a648:	e007      	b.n	1000a65a <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a64a:	4a0a      	ldr	r2, [pc, #40]	; (1000a674 <system_clock_config+0x70>)
1000a64c:	6993      	ldr	r3, [r2, #24]
1000a64e:	200c      	movs	r0, #12
1000a650:	4383      	bics	r3, r0
1000a652:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000a654:	4a08      	ldr	r2, [pc, #32]	; (1000a678 <system_clock_config+0x74>)
1000a656:	4b09      	ldr	r3, [pc, #36]	; (1000a67c <system_clock_config+0x78>)
1000a658:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000a65a:	4b06      	ldr	r3, [pc, #24]	; (1000a674 <system_clock_config+0x70>)
1000a65c:	699a      	ldr	r2, [r3, #24]
1000a65e:	2003      	movs	r0, #3
1000a660:	4382      	bics	r2, r0
1000a662:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000a664:	699a      	ldr	r2, [r3, #24]
1000a666:	4001      	ands	r1, r0
1000a668:	4311      	orrs	r1, r2
1000a66a:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000a66c:	2000      	movs	r0, #0
1000a66e:	e000      	b.n	1000a672 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000a670:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000a672:	4770      	bx	lr
1000a674:	4000b000 	.word	0x4000b000
1000a678:	018cba80 	.word	0x018cba80
1000a67c:	10016cc8 	.word	0x10016cc8
1000a680:	4000f000 	.word	0x4000f000
1000a684:	001e8480 	.word	0x001e8480

1000a688 <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000a688:	4b01      	ldr	r3, [pc, #4]	; (1000a690 <system_clock_get_value+0x8>)
1000a68a:	6818      	ldr	r0, [r3, #0]
}
1000a68c:	4770      	bx	lr
1000a68e:	46c0      	nop			; (mov r8, r8)
1000a690:	10016cc8 	.word	0x10016cc8

1000a694 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000a694:	b500      	push	{lr}
	switch (peripheral) {
1000a696:	2835      	cmp	r0, #53	; 0x35
1000a698:	d900      	bls.n	1000a69c <system_clock_peripheral_enable+0x8>
1000a69a:	e1a2      	b.n	1000a9e2 <system_clock_peripheral_enable+0x34e>
1000a69c:	0080      	lsls	r0, r0, #2
1000a69e:	4bd2      	ldr	r3, [pc, #840]	; (1000a9e8 <system_clock_peripheral_enable+0x354>)
1000a6a0:	581b      	ldr	r3, [r3, r0]
1000a6a2:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6a4:	4ad1      	ldr	r2, [pc, #836]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6a6:	68d1      	ldr	r1, [r2, #12]
1000a6a8:	2302      	movs	r3, #2
1000a6aa:	430b      	orrs	r3, r1
1000a6ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6ae:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000a6b0:	e198      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6b2:	4ace      	ldr	r2, [pc, #824]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6b4:	68d1      	ldr	r1, [r2, #12]
1000a6b6:	2304      	movs	r3, #4
1000a6b8:	430b      	orrs	r3, r1
1000a6ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000a6be:	e191      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6c0:	4aca      	ldr	r2, [pc, #808]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6c2:	68d1      	ldr	r1, [r2, #12]
1000a6c4:	2308      	movs	r3, #8
1000a6c6:	430b      	orrs	r3, r1
1000a6c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000a6cc:	e18a      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6ce:	4ac7      	ldr	r2, [pc, #796]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6d0:	68d1      	ldr	r1, [r2, #12]
1000a6d2:	2310      	movs	r3, #16
1000a6d4:	430b      	orrs	r3, r1
1000a6d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000a6da:	e183      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6dc:	4ac3      	ldr	r2, [pc, #780]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6de:	68d1      	ldr	r1, [r2, #12]
1000a6e0:	2320      	movs	r3, #32
1000a6e2:	430b      	orrs	r3, r1
1000a6e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000a6e8:	e17c      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6ea:	4ac0      	ldr	r2, [pc, #768]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6ec:	68d1      	ldr	r1, [r2, #12]
1000a6ee:	2380      	movs	r3, #128	; 0x80
1000a6f0:	430b      	orrs	r3, r1
1000a6f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a6f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000a6f6:	e175      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a6f8:	4abc      	ldr	r2, [pc, #752]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a6fa:	68d3      	ldr	r3, [r2, #12]
1000a6fc:	2180      	movs	r1, #128	; 0x80
1000a6fe:	0049      	lsls	r1, r1, #1
1000a700:	430b      	orrs	r3, r1
1000a702:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a704:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000a706:	e16d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a708:	4ab8      	ldr	r2, [pc, #736]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a70a:	68d3      	ldr	r3, [r2, #12]
1000a70c:	2180      	movs	r1, #128	; 0x80
1000a70e:	0109      	lsls	r1, r1, #4
1000a710:	430b      	orrs	r3, r1
1000a712:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a714:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000a716:	e165      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a718:	4ab4      	ldr	r2, [pc, #720]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a71a:	68d3      	ldr	r3, [r2, #12]
1000a71c:	2180      	movs	r1, #128	; 0x80
1000a71e:	0149      	lsls	r1, r1, #5
1000a720:	430b      	orrs	r3, r1
1000a722:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000a726:	e15d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a728:	4ab0      	ldr	r2, [pc, #704]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a72a:	68d3      	ldr	r3, [r2, #12]
1000a72c:	2180      	movs	r1, #128	; 0x80
1000a72e:	0189      	lsls	r1, r1, #6
1000a730:	430b      	orrs	r3, r1
1000a732:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a734:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000a736:	e155      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a738:	4aac      	ldr	r2, [pc, #688]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a73a:	68d3      	ldr	r3, [r2, #12]
1000a73c:	2180      	movs	r1, #128	; 0x80
1000a73e:	01c9      	lsls	r1, r1, #7
1000a740:	430b      	orrs	r3, r1
1000a742:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a744:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000a746:	e14d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a748:	4aa8      	ldr	r2, [pc, #672]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a74a:	68d3      	ldr	r3, [r2, #12]
1000a74c:	2180      	movs	r1, #128	; 0x80
1000a74e:	0209      	lsls	r1, r1, #8
1000a750:	430b      	orrs	r3, r1
1000a752:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a754:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000a756:	e145      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a758:	4aa4      	ldr	r2, [pc, #656]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a75a:	68d3      	ldr	r3, [r2, #12]
1000a75c:	2180      	movs	r1, #128	; 0x80
1000a75e:	0249      	lsls	r1, r1, #9
1000a760:	430b      	orrs	r3, r1
1000a762:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a764:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000a766:	e13d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a768:	4aa0      	ldr	r2, [pc, #640]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a76a:	68d3      	ldr	r3, [r2, #12]
1000a76c:	2180      	movs	r1, #128	; 0x80
1000a76e:	0289      	lsls	r1, r1, #10
1000a770:	430b      	orrs	r3, r1
1000a772:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a774:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000a776:	e135      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a778:	4a9c      	ldr	r2, [pc, #624]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a77a:	68d3      	ldr	r3, [r2, #12]
1000a77c:	2180      	movs	r1, #128	; 0x80
1000a77e:	02c9      	lsls	r1, r1, #11
1000a780:	430b      	orrs	r3, r1
1000a782:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a784:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000a786:	e12d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a788:	4a98      	ldr	r2, [pc, #608]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a78a:	68d3      	ldr	r3, [r2, #12]
1000a78c:	2180      	movs	r1, #128	; 0x80
1000a78e:	0309      	lsls	r1, r1, #12
1000a790:	430b      	orrs	r3, r1
1000a792:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a794:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000a796:	e125      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a798:	4a94      	ldr	r2, [pc, #592]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a79a:	68d3      	ldr	r3, [r2, #12]
1000a79c:	2180      	movs	r1, #128	; 0x80
1000a79e:	0349      	lsls	r1, r1, #13
1000a7a0:	430b      	orrs	r3, r1
1000a7a2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000a7a6:	e11d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7a8:	4a90      	ldr	r2, [pc, #576]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7aa:	68d3      	ldr	r3, [r2, #12]
1000a7ac:	2180      	movs	r1, #128	; 0x80
1000a7ae:	0389      	lsls	r1, r1, #14
1000a7b0:	430b      	orrs	r3, r1
1000a7b2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000a7b6:	e115      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7b8:	4a8c      	ldr	r2, [pc, #560]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7ba:	68d3      	ldr	r3, [r2, #12]
1000a7bc:	2180      	movs	r1, #128	; 0x80
1000a7be:	03c9      	lsls	r1, r1, #15
1000a7c0:	430b      	orrs	r3, r1
1000a7c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000a7c6:	e10d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7c8:	4a88      	ldr	r2, [pc, #544]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7ca:	68d3      	ldr	r3, [r2, #12]
1000a7cc:	2180      	movs	r1, #128	; 0x80
1000a7ce:	0409      	lsls	r1, r1, #16
1000a7d0:	430b      	orrs	r3, r1
1000a7d2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000a7d6:	e105      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7d8:	4a84      	ldr	r2, [pc, #528]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7da:	68d3      	ldr	r3, [r2, #12]
1000a7dc:	2180      	movs	r1, #128	; 0x80
1000a7de:	0449      	lsls	r1, r1, #17
1000a7e0:	430b      	orrs	r3, r1
1000a7e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000a7e6:	e0fd      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7e8:	4a80      	ldr	r2, [pc, #512]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7ea:	68d3      	ldr	r3, [r2, #12]
1000a7ec:	2180      	movs	r1, #128	; 0x80
1000a7ee:	0489      	lsls	r1, r1, #18
1000a7f0:	430b      	orrs	r3, r1
1000a7f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a7f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000a7f6:	e0f5      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a7f8:	4a7c      	ldr	r2, [pc, #496]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a7fa:	68d3      	ldr	r3, [r2, #12]
1000a7fc:	2180      	movs	r1, #128	; 0x80
1000a7fe:	04c9      	lsls	r1, r1, #19
1000a800:	430b      	orrs	r3, r1
1000a802:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a804:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000a806:	e0ed      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a808:	4a78      	ldr	r2, [pc, #480]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a80a:	68d3      	ldr	r3, [r2, #12]
1000a80c:	2180      	movs	r1, #128	; 0x80
1000a80e:	0509      	lsls	r1, r1, #20
1000a810:	430b      	orrs	r3, r1
1000a812:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a814:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000a816:	e0e5      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a818:	4a74      	ldr	r2, [pc, #464]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a81a:	68d3      	ldr	r3, [r2, #12]
1000a81c:	2180      	movs	r1, #128	; 0x80
1000a81e:	0549      	lsls	r1, r1, #21
1000a820:	430b      	orrs	r3, r1
1000a822:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a824:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000a826:	e0dd      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a828:	4a70      	ldr	r2, [pc, #448]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a82a:	68d3      	ldr	r3, [r2, #12]
1000a82c:	2180      	movs	r1, #128	; 0x80
1000a82e:	0589      	lsls	r1, r1, #22
1000a830:	430b      	orrs	r3, r1
1000a832:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a834:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000a836:	e0d5      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000a838:	4a6c      	ldr	r2, [pc, #432]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a83a:	68d3      	ldr	r3, [r2, #12]
1000a83c:	2180      	movs	r1, #128	; 0x80
1000a83e:	05c9      	lsls	r1, r1, #23
1000a840:	430b      	orrs	r3, r1
1000a842:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a844:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000a846:	e0cd      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a848:	4a68      	ldr	r2, [pc, #416]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a84a:	6911      	ldr	r1, [r2, #16]
1000a84c:	2301      	movs	r3, #1
1000a84e:	430b      	orrs	r3, r1
1000a850:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a852:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000a854:	e0c6      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a856:	4a65      	ldr	r2, [pc, #404]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a858:	6911      	ldr	r1, [r2, #16]
1000a85a:	2302      	movs	r3, #2
1000a85c:	430b      	orrs	r3, r1
1000a85e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a860:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000a862:	e0bf      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a864:	4a61      	ldr	r2, [pc, #388]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a866:	6911      	ldr	r1, [r2, #16]
1000a868:	2304      	movs	r3, #4
1000a86a:	430b      	orrs	r3, r1
1000a86c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a86e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000a870:	e0b8      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a872:	4a5e      	ldr	r2, [pc, #376]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a874:	6911      	ldr	r1, [r2, #16]
1000a876:	2308      	movs	r3, #8
1000a878:	430b      	orrs	r3, r1
1000a87a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a87c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000a87e:	e0b1      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a880:	4a5a      	ldr	r2, [pc, #360]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a882:	6911      	ldr	r1, [r2, #16]
1000a884:	2310      	movs	r3, #16
1000a886:	430b      	orrs	r3, r1
1000a888:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a88a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000a88c:	e0aa      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a88e:	4a57      	ldr	r2, [pc, #348]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a890:	6911      	ldr	r1, [r2, #16]
1000a892:	2320      	movs	r3, #32
1000a894:	430b      	orrs	r3, r1
1000a896:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a898:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000a89a:	e0a3      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a89c:	4a53      	ldr	r2, [pc, #332]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a89e:	6911      	ldr	r1, [r2, #16]
1000a8a0:	2340      	movs	r3, #64	; 0x40
1000a8a2:	430b      	orrs	r3, r1
1000a8a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000a8a8:	e09c      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8aa:	4a50      	ldr	r2, [pc, #320]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8ac:	6911      	ldr	r1, [r2, #16]
1000a8ae:	2380      	movs	r3, #128	; 0x80
1000a8b0:	430b      	orrs	r3, r1
1000a8b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000a8b6:	e095      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8b8:	4a4c      	ldr	r2, [pc, #304]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8ba:	6913      	ldr	r3, [r2, #16]
1000a8bc:	2180      	movs	r1, #128	; 0x80
1000a8be:	0049      	lsls	r1, r1, #1
1000a8c0:	430b      	orrs	r3, r1
1000a8c2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000a8c6:	e08d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8c8:	4a48      	ldr	r2, [pc, #288]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8ca:	6913      	ldr	r3, [r2, #16]
1000a8cc:	2180      	movs	r1, #128	; 0x80
1000a8ce:	0089      	lsls	r1, r1, #2
1000a8d0:	430b      	orrs	r3, r1
1000a8d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000a8d6:	e085      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8d8:	4a44      	ldr	r2, [pc, #272]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8da:	6913      	ldr	r3, [r2, #16]
1000a8dc:	2180      	movs	r1, #128	; 0x80
1000a8de:	00c9      	lsls	r1, r1, #3
1000a8e0:	430b      	orrs	r3, r1
1000a8e2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000a8e6:	e07d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8e8:	4a40      	ldr	r2, [pc, #256]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8ea:	6913      	ldr	r3, [r2, #16]
1000a8ec:	2180      	movs	r1, #128	; 0x80
1000a8ee:	0109      	lsls	r1, r1, #4
1000a8f0:	430b      	orrs	r3, r1
1000a8f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a8f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000a8f6:	e075      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a8f8:	4a3c      	ldr	r2, [pc, #240]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a8fa:	6913      	ldr	r3, [r2, #16]
1000a8fc:	2180      	movs	r1, #128	; 0x80
1000a8fe:	0149      	lsls	r1, r1, #5
1000a900:	430b      	orrs	r3, r1
1000a902:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a904:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000a906:	e06d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a908:	4a38      	ldr	r2, [pc, #224]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a90a:	6913      	ldr	r3, [r2, #16]
1000a90c:	2180      	movs	r1, #128	; 0x80
1000a90e:	0189      	lsls	r1, r1, #6
1000a910:	430b      	orrs	r3, r1
1000a912:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a914:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000a916:	e065      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a918:	4a34      	ldr	r2, [pc, #208]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a91a:	6913      	ldr	r3, [r2, #16]
1000a91c:	2180      	movs	r1, #128	; 0x80
1000a91e:	01c9      	lsls	r1, r1, #7
1000a920:	430b      	orrs	r3, r1
1000a922:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a924:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000a926:	e05d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a928:	4a30      	ldr	r2, [pc, #192]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a92a:	6913      	ldr	r3, [r2, #16]
1000a92c:	2180      	movs	r1, #128	; 0x80
1000a92e:	0209      	lsls	r1, r1, #8
1000a930:	430b      	orrs	r3, r1
1000a932:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a934:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000a936:	e055      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a938:	4a2c      	ldr	r2, [pc, #176]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a93a:	6913      	ldr	r3, [r2, #16]
1000a93c:	2180      	movs	r1, #128	; 0x80
1000a93e:	0249      	lsls	r1, r1, #9
1000a940:	430b      	orrs	r3, r1
1000a942:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a944:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000a946:	e04d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a948:	4a28      	ldr	r2, [pc, #160]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a94a:	6913      	ldr	r3, [r2, #16]
1000a94c:	2180      	movs	r1, #128	; 0x80
1000a94e:	0289      	lsls	r1, r1, #10
1000a950:	430b      	orrs	r3, r1
1000a952:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a954:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000a956:	e045      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a958:	4a24      	ldr	r2, [pc, #144]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a95a:	6913      	ldr	r3, [r2, #16]
1000a95c:	2180      	movs	r1, #128	; 0x80
1000a95e:	02c9      	lsls	r1, r1, #11
1000a960:	430b      	orrs	r3, r1
1000a962:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a964:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000a966:	e03d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a968:	4a20      	ldr	r2, [pc, #128]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a96a:	6913      	ldr	r3, [r2, #16]
1000a96c:	2180      	movs	r1, #128	; 0x80
1000a96e:	0309      	lsls	r1, r1, #12
1000a970:	430b      	orrs	r3, r1
1000a972:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a974:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000a976:	e035      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a978:	4a1c      	ldr	r2, [pc, #112]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a97a:	6913      	ldr	r3, [r2, #16]
1000a97c:	2180      	movs	r1, #128	; 0x80
1000a97e:	0349      	lsls	r1, r1, #13
1000a980:	430b      	orrs	r3, r1
1000a982:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a984:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000a986:	e02d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a988:	4a18      	ldr	r2, [pc, #96]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a98a:	6913      	ldr	r3, [r2, #16]
1000a98c:	2180      	movs	r1, #128	; 0x80
1000a98e:	0389      	lsls	r1, r1, #14
1000a990:	430b      	orrs	r3, r1
1000a992:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a994:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000a996:	e025      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a998:	4a14      	ldr	r2, [pc, #80]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a99a:	6913      	ldr	r3, [r2, #16]
1000a99c:	2180      	movs	r1, #128	; 0x80
1000a99e:	03c9      	lsls	r1, r1, #15
1000a9a0:	430b      	orrs	r3, r1
1000a9a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000a9a6:	e01d      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000a9a8:	4a10      	ldr	r2, [pc, #64]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a9aa:	6913      	ldr	r3, [r2, #16]
1000a9ac:	2180      	movs	r1, #128	; 0x80
1000a9ae:	0409      	lsls	r1, r1, #16
1000a9b0:	430b      	orrs	r3, r1
1000a9b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000a9b6:	e015      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a9b8:	4a0c      	ldr	r2, [pc, #48]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a9ba:	7d11      	ldrb	r1, [r2, #20]
1000a9bc:	2301      	movs	r3, #1
1000a9be:	430b      	orrs	r3, r1
1000a9c0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000a9c4:	e00e      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a9c6:	4a09      	ldr	r2, [pc, #36]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a9c8:	7d11      	ldrb	r1, [r2, #20]
1000a9ca:	2302      	movs	r3, #2
1000a9cc:	430b      	orrs	r3, r1
1000a9ce:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000a9d2:	e007      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000a9d4:	4a05      	ldr	r2, [pc, #20]	; (1000a9ec <system_clock_peripheral_enable+0x358>)
1000a9d6:	7d11      	ldrb	r1, [r2, #20]
1000a9d8:	2304      	movs	r3, #4
1000a9da:	430b      	orrs	r3, r1
1000a9dc:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000a9de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000a9e0:	e000      	b.n	1000a9e4 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000a9e2:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000a9e4:	bd00      	pop	{pc}
1000a9e6:	46c0      	nop			; (mov r8, r8)
1000a9e8:	10013dc0 	.word	0x10013dc0
1000a9ec:	4000b000 	.word	0x4000b000

1000a9f0 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000a9f0:	b500      	push	{lr}
	switch (peripheral) {
1000a9f2:	2835      	cmp	r0, #53	; 0x35
1000a9f4:	d900      	bls.n	1000a9f8 <system_clock_peripheral_disable+0x8>
1000a9f6:	e17d      	b.n	1000acf4 <system_clock_peripheral_disable+0x304>
1000a9f8:	0080      	lsls	r0, r0, #2
1000a9fa:	4bbf      	ldr	r3, [pc, #764]	; (1000acf8 <system_clock_peripheral_disable+0x308>)
1000a9fc:	581b      	ldr	r3, [r3, r0]
1000a9fe:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa00:	4abe      	ldr	r2, [pc, #760]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa02:	68d3      	ldr	r3, [r2, #12]
1000aa04:	2102      	movs	r1, #2
1000aa06:	438b      	bics	r3, r1
1000aa08:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa0a:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000aa0c:	e173      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa0e:	4abb      	ldr	r2, [pc, #748]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa10:	68d3      	ldr	r3, [r2, #12]
1000aa12:	2104      	movs	r1, #4
1000aa14:	438b      	bics	r3, r1
1000aa16:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa18:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000aa1a:	e16c      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa1c:	4ab7      	ldr	r2, [pc, #732]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa1e:	68d3      	ldr	r3, [r2, #12]
1000aa20:	2108      	movs	r1, #8
1000aa22:	438b      	bics	r3, r1
1000aa24:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa26:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000aa28:	e165      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa2a:	4ab4      	ldr	r2, [pc, #720]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa2c:	68d3      	ldr	r3, [r2, #12]
1000aa2e:	2110      	movs	r1, #16
1000aa30:	438b      	bics	r3, r1
1000aa32:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa34:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000aa36:	e15e      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa38:	4ab0      	ldr	r2, [pc, #704]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa3a:	68d3      	ldr	r3, [r2, #12]
1000aa3c:	2120      	movs	r1, #32
1000aa3e:	438b      	bics	r3, r1
1000aa40:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa42:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000aa44:	e157      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa46:	4aad      	ldr	r2, [pc, #692]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa48:	68d3      	ldr	r3, [r2, #12]
1000aa4a:	2180      	movs	r1, #128	; 0x80
1000aa4c:	438b      	bics	r3, r1
1000aa4e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa50:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000aa52:	e150      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa54:	4aa9      	ldr	r2, [pc, #676]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa56:	68d1      	ldr	r1, [r2, #12]
1000aa58:	4ba9      	ldr	r3, [pc, #676]	; (1000ad00 <system_clock_peripheral_disable+0x310>)
1000aa5a:	400b      	ands	r3, r1
1000aa5c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa5e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000aa60:	e149      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa62:	4aa6      	ldr	r2, [pc, #664]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa64:	68d1      	ldr	r1, [r2, #12]
1000aa66:	4ba7      	ldr	r3, [pc, #668]	; (1000ad04 <system_clock_peripheral_disable+0x314>)
1000aa68:	400b      	ands	r3, r1
1000aa6a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa6c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000aa6e:	e142      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa70:	4aa2      	ldr	r2, [pc, #648]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa72:	68d1      	ldr	r1, [r2, #12]
1000aa74:	4ba4      	ldr	r3, [pc, #656]	; (1000ad08 <system_clock_peripheral_disable+0x318>)
1000aa76:	400b      	ands	r3, r1
1000aa78:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa7a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000aa7c:	e13b      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa7e:	4a9f      	ldr	r2, [pc, #636]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa80:	68d1      	ldr	r1, [r2, #12]
1000aa82:	4ba2      	ldr	r3, [pc, #648]	; (1000ad0c <system_clock_peripheral_disable+0x31c>)
1000aa84:	400b      	ands	r3, r1
1000aa86:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa88:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000aa8a:	e134      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa8c:	4a9b      	ldr	r2, [pc, #620]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa8e:	68d1      	ldr	r1, [r2, #12]
1000aa90:	4b9f      	ldr	r3, [pc, #636]	; (1000ad10 <system_clock_peripheral_disable+0x320>)
1000aa92:	400b      	ands	r3, r1
1000aa94:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aa96:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000aa98:	e12d      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aa9a:	4a98      	ldr	r2, [pc, #608]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aa9c:	68d1      	ldr	r1, [r2, #12]
1000aa9e:	4b9d      	ldr	r3, [pc, #628]	; (1000ad14 <system_clock_peripheral_disable+0x324>)
1000aaa0:	400b      	ands	r3, r1
1000aaa2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaa4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000aaa6:	e126      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aaa8:	4a94      	ldr	r2, [pc, #592]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aaaa:	68d1      	ldr	r1, [r2, #12]
1000aaac:	4b9a      	ldr	r3, [pc, #616]	; (1000ad18 <system_clock_peripheral_disable+0x328>)
1000aaae:	400b      	ands	r3, r1
1000aab0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aab2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000aab4:	e11f      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aab6:	4a91      	ldr	r2, [pc, #580]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aab8:	68d1      	ldr	r1, [r2, #12]
1000aaba:	4b98      	ldr	r3, [pc, #608]	; (1000ad1c <system_clock_peripheral_disable+0x32c>)
1000aabc:	400b      	ands	r3, r1
1000aabe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aac0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000aac2:	e118      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aac4:	4a8d      	ldr	r2, [pc, #564]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aac6:	68d1      	ldr	r1, [r2, #12]
1000aac8:	4b95      	ldr	r3, [pc, #596]	; (1000ad20 <system_clock_peripheral_disable+0x330>)
1000aaca:	400b      	ands	r3, r1
1000aacc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aace:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000aad0:	e111      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aad2:	4a8a      	ldr	r2, [pc, #552]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aad4:	68d1      	ldr	r1, [r2, #12]
1000aad6:	4b93      	ldr	r3, [pc, #588]	; (1000ad24 <system_clock_peripheral_disable+0x334>)
1000aad8:	400b      	ands	r3, r1
1000aada:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aadc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000aade:	e10a      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aae0:	4a86      	ldr	r2, [pc, #536]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aae2:	68d1      	ldr	r1, [r2, #12]
1000aae4:	4b90      	ldr	r3, [pc, #576]	; (1000ad28 <system_clock_peripheral_disable+0x338>)
1000aae6:	400b      	ands	r3, r1
1000aae8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000aaec:	e103      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aaee:	4a83      	ldr	r2, [pc, #524]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aaf0:	68d1      	ldr	r1, [r2, #12]
1000aaf2:	4b8e      	ldr	r3, [pc, #568]	; (1000ad2c <system_clock_peripheral_disable+0x33c>)
1000aaf4:	400b      	ands	r3, r1
1000aaf6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aaf8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000aafa:	e0fc      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000aafc:	4a7f      	ldr	r2, [pc, #508]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aafe:	68d1      	ldr	r1, [r2, #12]
1000ab00:	4b8b      	ldr	r3, [pc, #556]	; (1000ad30 <system_clock_peripheral_disable+0x340>)
1000ab02:	400b      	ands	r3, r1
1000ab04:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab06:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000ab08:	e0f5      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab0a:	4a7c      	ldr	r2, [pc, #496]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab0c:	68d1      	ldr	r1, [r2, #12]
1000ab0e:	4b89      	ldr	r3, [pc, #548]	; (1000ad34 <system_clock_peripheral_disable+0x344>)
1000ab10:	400b      	ands	r3, r1
1000ab12:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab14:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000ab16:	e0ee      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab18:	4a78      	ldr	r2, [pc, #480]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab1a:	68d1      	ldr	r1, [r2, #12]
1000ab1c:	4b86      	ldr	r3, [pc, #536]	; (1000ad38 <system_clock_peripheral_disable+0x348>)
1000ab1e:	400b      	ands	r3, r1
1000ab20:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab22:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000ab24:	e0e7      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab26:	4a75      	ldr	r2, [pc, #468]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab28:	68d1      	ldr	r1, [r2, #12]
1000ab2a:	4b84      	ldr	r3, [pc, #528]	; (1000ad3c <system_clock_peripheral_disable+0x34c>)
1000ab2c:	400b      	ands	r3, r1
1000ab2e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab30:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000ab32:	e0e0      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab34:	4a71      	ldr	r2, [pc, #452]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab36:	68d1      	ldr	r1, [r2, #12]
1000ab38:	4b81      	ldr	r3, [pc, #516]	; (1000ad40 <system_clock_peripheral_disable+0x350>)
1000ab3a:	400b      	ands	r3, r1
1000ab3c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab3e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000ab40:	e0d9      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab42:	4a6e      	ldr	r2, [pc, #440]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab44:	68d1      	ldr	r1, [r2, #12]
1000ab46:	4b7f      	ldr	r3, [pc, #508]	; (1000ad44 <system_clock_peripheral_disable+0x354>)
1000ab48:	400b      	ands	r3, r1
1000ab4a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab4c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000ab4e:	e0d2      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab50:	4a6a      	ldr	r2, [pc, #424]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab52:	68d1      	ldr	r1, [r2, #12]
1000ab54:	4b7c      	ldr	r3, [pc, #496]	; (1000ad48 <system_clock_peripheral_disable+0x358>)
1000ab56:	400b      	ands	r3, r1
1000ab58:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab5a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000ab5c:	e0cb      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab5e:	4a67      	ldr	r2, [pc, #412]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab60:	68d1      	ldr	r1, [r2, #12]
1000ab62:	4b7a      	ldr	r3, [pc, #488]	; (1000ad4c <system_clock_peripheral_disable+0x35c>)
1000ab64:	400b      	ands	r3, r1
1000ab66:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab68:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000ab6a:	e0c4      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000ab6c:	4a63      	ldr	r2, [pc, #396]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab6e:	68d1      	ldr	r1, [r2, #12]
1000ab70:	4b77      	ldr	r3, [pc, #476]	; (1000ad50 <system_clock_peripheral_disable+0x360>)
1000ab72:	400b      	ands	r3, r1
1000ab74:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab76:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000ab78:	e0bd      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab7a:	4a60      	ldr	r2, [pc, #384]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab7c:	6913      	ldr	r3, [r2, #16]
1000ab7e:	2101      	movs	r1, #1
1000ab80:	438b      	bics	r3, r1
1000ab82:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab84:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000ab86:	e0b6      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab88:	4a5c      	ldr	r2, [pc, #368]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab8a:	6913      	ldr	r3, [r2, #16]
1000ab8c:	2102      	movs	r1, #2
1000ab8e:	438b      	bics	r3, r1
1000ab90:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ab92:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000ab94:	e0af      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ab96:	4a59      	ldr	r2, [pc, #356]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ab98:	6913      	ldr	r3, [r2, #16]
1000ab9a:	2104      	movs	r1, #4
1000ab9c:	438b      	bics	r3, r1
1000ab9e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aba0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000aba2:	e0a8      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aba4:	4a55      	ldr	r2, [pc, #340]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aba6:	6913      	ldr	r3, [r2, #16]
1000aba8:	2108      	movs	r1, #8
1000abaa:	438b      	bics	r3, r1
1000abac:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000abb0:	e0a1      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abb2:	4a52      	ldr	r2, [pc, #328]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abb4:	6913      	ldr	r3, [r2, #16]
1000abb6:	2110      	movs	r1, #16
1000abb8:	438b      	bics	r3, r1
1000abba:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abbc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000abbe:	e09a      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abc0:	4a4e      	ldr	r2, [pc, #312]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abc2:	6913      	ldr	r3, [r2, #16]
1000abc4:	2120      	movs	r1, #32
1000abc6:	438b      	bics	r3, r1
1000abc8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000abcc:	e093      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abce:	4a4b      	ldr	r2, [pc, #300]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abd0:	6913      	ldr	r3, [r2, #16]
1000abd2:	2140      	movs	r1, #64	; 0x40
1000abd4:	438b      	bics	r3, r1
1000abd6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abd8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000abda:	e08c      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abdc:	4a47      	ldr	r2, [pc, #284]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abde:	6913      	ldr	r3, [r2, #16]
1000abe0:	2180      	movs	r1, #128	; 0x80
1000abe2:	438b      	bics	r3, r1
1000abe4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abe6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000abe8:	e085      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abea:	4a44      	ldr	r2, [pc, #272]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abec:	6911      	ldr	r1, [r2, #16]
1000abee:	4b44      	ldr	r3, [pc, #272]	; (1000ad00 <system_clock_peripheral_disable+0x310>)
1000abf0:	400b      	ands	r3, r1
1000abf2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000abf4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000abf6:	e07e      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000abf8:	4a40      	ldr	r2, [pc, #256]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000abfa:	6911      	ldr	r1, [r2, #16]
1000abfc:	4b55      	ldr	r3, [pc, #340]	; (1000ad54 <system_clock_peripheral_disable+0x364>)
1000abfe:	400b      	ands	r3, r1
1000ac00:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac02:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000ac04:	e077      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac06:	4a3d      	ldr	r2, [pc, #244]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac08:	6911      	ldr	r1, [r2, #16]
1000ac0a:	4b53      	ldr	r3, [pc, #332]	; (1000ad58 <system_clock_peripheral_disable+0x368>)
1000ac0c:	400b      	ands	r3, r1
1000ac0e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac10:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000ac12:	e070      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac14:	4a39      	ldr	r2, [pc, #228]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac16:	6911      	ldr	r1, [r2, #16]
1000ac18:	4b3a      	ldr	r3, [pc, #232]	; (1000ad04 <system_clock_peripheral_disable+0x314>)
1000ac1a:	400b      	ands	r3, r1
1000ac1c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac1e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000ac20:	e069      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac22:	4a36      	ldr	r2, [pc, #216]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac24:	6911      	ldr	r1, [r2, #16]
1000ac26:	4b38      	ldr	r3, [pc, #224]	; (1000ad08 <system_clock_peripheral_disable+0x318>)
1000ac28:	400b      	ands	r3, r1
1000ac2a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac2c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000ac2e:	e062      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac30:	4a32      	ldr	r2, [pc, #200]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac32:	6911      	ldr	r1, [r2, #16]
1000ac34:	4b35      	ldr	r3, [pc, #212]	; (1000ad0c <system_clock_peripheral_disable+0x31c>)
1000ac36:	400b      	ands	r3, r1
1000ac38:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac3a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000ac3c:	e05b      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac3e:	4a2f      	ldr	r2, [pc, #188]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac40:	6911      	ldr	r1, [r2, #16]
1000ac42:	4b33      	ldr	r3, [pc, #204]	; (1000ad10 <system_clock_peripheral_disable+0x320>)
1000ac44:	400b      	ands	r3, r1
1000ac46:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac48:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000ac4a:	e054      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac4c:	4a2b      	ldr	r2, [pc, #172]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac4e:	6911      	ldr	r1, [r2, #16]
1000ac50:	4b30      	ldr	r3, [pc, #192]	; (1000ad14 <system_clock_peripheral_disable+0x324>)
1000ac52:	400b      	ands	r3, r1
1000ac54:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac56:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000ac58:	e04d      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac5a:	4a28      	ldr	r2, [pc, #160]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac5c:	6911      	ldr	r1, [r2, #16]
1000ac5e:	4b2e      	ldr	r3, [pc, #184]	; (1000ad18 <system_clock_peripheral_disable+0x328>)
1000ac60:	400b      	ands	r3, r1
1000ac62:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac64:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000ac66:	e046      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac68:	4a24      	ldr	r2, [pc, #144]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac6a:	6911      	ldr	r1, [r2, #16]
1000ac6c:	4b2b      	ldr	r3, [pc, #172]	; (1000ad1c <system_clock_peripheral_disable+0x32c>)
1000ac6e:	400b      	ands	r3, r1
1000ac70:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac72:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000ac74:	e03f      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac76:	4a21      	ldr	r2, [pc, #132]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac78:	6911      	ldr	r1, [r2, #16]
1000ac7a:	4b29      	ldr	r3, [pc, #164]	; (1000ad20 <system_clock_peripheral_disable+0x330>)
1000ac7c:	400b      	ands	r3, r1
1000ac7e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac80:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000ac82:	e038      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac84:	4a1d      	ldr	r2, [pc, #116]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac86:	6911      	ldr	r1, [r2, #16]
1000ac88:	4b26      	ldr	r3, [pc, #152]	; (1000ad24 <system_clock_peripheral_disable+0x334>)
1000ac8a:	400b      	ands	r3, r1
1000ac8c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac8e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000ac90:	e031      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000ac92:	4a1a      	ldr	r2, [pc, #104]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ac94:	6911      	ldr	r1, [r2, #16]
1000ac96:	4b24      	ldr	r3, [pc, #144]	; (1000ad28 <system_clock_peripheral_disable+0x338>)
1000ac98:	400b      	ands	r3, r1
1000ac9a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ac9c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000ac9e:	e02a      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000aca0:	4a16      	ldr	r2, [pc, #88]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000aca2:	6911      	ldr	r1, [r2, #16]
1000aca4:	4b21      	ldr	r3, [pc, #132]	; (1000ad2c <system_clock_peripheral_disable+0x33c>)
1000aca6:	400b      	ands	r3, r1
1000aca8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acaa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000acac:	e023      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000acae:	4a13      	ldr	r2, [pc, #76]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000acb0:	6911      	ldr	r1, [r2, #16]
1000acb2:	4b1f      	ldr	r3, [pc, #124]	; (1000ad30 <system_clock_peripheral_disable+0x340>)
1000acb4:	400b      	ands	r3, r1
1000acb6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acb8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000acba:	e01c      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000acbc:	4a0f      	ldr	r2, [pc, #60]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000acbe:	6911      	ldr	r1, [r2, #16]
1000acc0:	4b1c      	ldr	r3, [pc, #112]	; (1000ad34 <system_clock_peripheral_disable+0x344>)
1000acc2:	400b      	ands	r3, r1
1000acc4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acc6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000acc8:	e015      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000acca:	4a0c      	ldr	r2, [pc, #48]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000accc:	7d13      	ldrb	r3, [r2, #20]
1000acce:	2101      	movs	r1, #1
1000acd0:	438b      	bics	r3, r1
1000acd2:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acd4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000acd6:	e00e      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000acd8:	4a08      	ldr	r2, [pc, #32]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000acda:	7d13      	ldrb	r3, [r2, #20]
1000acdc:	2102      	movs	r1, #2
1000acde:	438b      	bics	r3, r1
1000ace0:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ace2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000ace4:	e007      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000ace6:	4a05      	ldr	r2, [pc, #20]	; (1000acfc <system_clock_peripheral_disable+0x30c>)
1000ace8:	7d13      	ldrb	r3, [r2, #20]
1000acea:	2104      	movs	r1, #4
1000acec:	438b      	bics	r3, r1
1000acee:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000acf0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000acf2:	e000      	b.n	1000acf6 <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000acf4:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000acf6:	bd00      	pop	{pc}
1000acf8:	10013e98 	.word	0x10013e98
1000acfc:	4000b000 	.word	0x4000b000
1000ad00:	fffffeff 	.word	0xfffffeff
1000ad04:	fffff7ff 	.word	0xfffff7ff
1000ad08:	ffffefff 	.word	0xffffefff
1000ad0c:	ffffdfff 	.word	0xffffdfff
1000ad10:	ffffbfff 	.word	0xffffbfff
1000ad14:	ffff7fff 	.word	0xffff7fff
1000ad18:	fffeffff 	.word	0xfffeffff
1000ad1c:	fffdffff 	.word	0xfffdffff
1000ad20:	fffbffff 	.word	0xfffbffff
1000ad24:	fff7ffff 	.word	0xfff7ffff
1000ad28:	ffefffff 	.word	0xffefffff
1000ad2c:	ffdfffff 	.word	0xffdfffff
1000ad30:	ffbfffff 	.word	0xffbfffff
1000ad34:	ff7fffff 	.word	0xff7fffff
1000ad38:	feffffff 	.word	0xfeffffff
1000ad3c:	fdffffff 	.word	0xfdffffff
1000ad40:	fbffffff 	.word	0xfbffffff
1000ad44:	f7ffffff 	.word	0xf7ffffff
1000ad48:	efffffff 	.word	0xefffffff
1000ad4c:	dfffffff 	.word	0xdfffffff
1000ad50:	bfffffff 	.word	0xbfffffff
1000ad54:	fffffdff 	.word	0xfffffdff
1000ad58:	fffffbff 	.word	0xfffffbff

1000ad5c <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000ad5c:	b500      	push	{lr}
	switch (peripheral) {
1000ad5e:	2843      	cmp	r0, #67	; 0x43
1000ad60:	d900      	bls.n	1000ad64 <system_peripheral_reset+0x8>
1000ad62:	e223      	b.n	1000b1ac <system_peripheral_reset+0x450>
1000ad64:	0080      	lsls	r0, r0, #2
1000ad66:	4be0      	ldr	r3, [pc, #896]	; (1000b0e8 <system_peripheral_reset+0x38c>)
1000ad68:	581b      	ldr	r3, [r3, r0]
1000ad6a:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad6c:	4bdf      	ldr	r3, [pc, #892]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ad6e:	6859      	ldr	r1, [r3, #4]
1000ad70:	2202      	movs	r2, #2
1000ad72:	4391      	bics	r1, r2
1000ad74:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad76:	6859      	ldr	r1, [r3, #4]
1000ad78:	430a      	orrs	r2, r1
1000ad7a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad7c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000ad7e:	e216      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad80:	4bda      	ldr	r3, [pc, #872]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ad82:	6859      	ldr	r1, [r3, #4]
1000ad84:	2204      	movs	r2, #4
1000ad86:	4391      	bics	r1, r2
1000ad88:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad8a:	6859      	ldr	r1, [r3, #4]
1000ad8c:	430a      	orrs	r2, r1
1000ad8e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ad90:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000ad92:	e20c      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ad94:	4bd5      	ldr	r3, [pc, #852]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ad96:	6859      	ldr	r1, [r3, #4]
1000ad98:	2208      	movs	r2, #8
1000ad9a:	4391      	bics	r1, r2
1000ad9c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ad9e:	6859      	ldr	r1, [r3, #4]
1000ada0:	430a      	orrs	r2, r1
1000ada2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ada4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000ada6:	e202      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ada8:	4bd0      	ldr	r3, [pc, #832]	; (1000b0ec <system_peripheral_reset+0x390>)
1000adaa:	6859      	ldr	r1, [r3, #4]
1000adac:	2210      	movs	r2, #16
1000adae:	4391      	bics	r1, r2
1000adb0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adb2:	6859      	ldr	r1, [r3, #4]
1000adb4:	430a      	orrs	r2, r1
1000adb6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adb8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000adba:	e1f8      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000adbc:	4bcb      	ldr	r3, [pc, #812]	; (1000b0ec <system_peripheral_reset+0x390>)
1000adbe:	6859      	ldr	r1, [r3, #4]
1000adc0:	2220      	movs	r2, #32
1000adc2:	4391      	bics	r1, r2
1000adc4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adc6:	6859      	ldr	r1, [r3, #4]
1000adc8:	430a      	orrs	r2, r1
1000adca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adcc:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000adce:	e1ee      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000add0:	4bc6      	ldr	r3, [pc, #792]	; (1000b0ec <system_peripheral_reset+0x390>)
1000add2:	6859      	ldr	r1, [r3, #4]
1000add4:	2240      	movs	r2, #64	; 0x40
1000add6:	4391      	bics	r1, r2
1000add8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adda:	6859      	ldr	r1, [r3, #4]
1000addc:	430a      	orrs	r2, r1
1000adde:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ade0:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000ade2:	e1e4      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ade4:	4bc1      	ldr	r3, [pc, #772]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ade6:	6859      	ldr	r1, [r3, #4]
1000ade8:	2280      	movs	r2, #128	; 0x80
1000adea:	4391      	bics	r1, r2
1000adec:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000adee:	6859      	ldr	r1, [r3, #4]
1000adf0:	430a      	orrs	r2, r1
1000adf2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000adf4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000adf6:	e1da      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000adf8:	4bbc      	ldr	r3, [pc, #752]	; (1000b0ec <system_peripheral_reset+0x390>)
1000adfa:	6859      	ldr	r1, [r3, #4]
1000adfc:	4abc      	ldr	r2, [pc, #752]	; (1000b0f0 <system_peripheral_reset+0x394>)
1000adfe:	400a      	ands	r2, r1
1000ae00:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae02:	685a      	ldr	r2, [r3, #4]
1000ae04:	2180      	movs	r1, #128	; 0x80
1000ae06:	0049      	lsls	r1, r1, #1
1000ae08:	430a      	orrs	r2, r1
1000ae0a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae0c:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000ae0e:	e1ce      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae10:	4bb6      	ldr	r3, [pc, #728]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae12:	6859      	ldr	r1, [r3, #4]
1000ae14:	4ab7      	ldr	r2, [pc, #732]	; (1000b0f4 <system_peripheral_reset+0x398>)
1000ae16:	400a      	ands	r2, r1
1000ae18:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae1a:	685a      	ldr	r2, [r3, #4]
1000ae1c:	2180      	movs	r1, #128	; 0x80
1000ae1e:	0089      	lsls	r1, r1, #2
1000ae20:	430a      	orrs	r2, r1
1000ae22:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae24:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000ae26:	e1c2      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae28:	4bb0      	ldr	r3, [pc, #704]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae2a:	6859      	ldr	r1, [r3, #4]
1000ae2c:	4ab2      	ldr	r2, [pc, #712]	; (1000b0f8 <system_peripheral_reset+0x39c>)
1000ae2e:	400a      	ands	r2, r1
1000ae30:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae32:	685a      	ldr	r2, [r3, #4]
1000ae34:	2180      	movs	r1, #128	; 0x80
1000ae36:	00c9      	lsls	r1, r1, #3
1000ae38:	430a      	orrs	r2, r1
1000ae3a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae3c:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000ae3e:	e1b6      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae40:	4baa      	ldr	r3, [pc, #680]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae42:	6859      	ldr	r1, [r3, #4]
1000ae44:	4aad      	ldr	r2, [pc, #692]	; (1000b0fc <system_peripheral_reset+0x3a0>)
1000ae46:	400a      	ands	r2, r1
1000ae48:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae4a:	685a      	ldr	r2, [r3, #4]
1000ae4c:	2180      	movs	r1, #128	; 0x80
1000ae4e:	0109      	lsls	r1, r1, #4
1000ae50:	430a      	orrs	r2, r1
1000ae52:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae54:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000ae56:	e1aa      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae58:	4ba4      	ldr	r3, [pc, #656]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae5a:	6859      	ldr	r1, [r3, #4]
1000ae5c:	4aa8      	ldr	r2, [pc, #672]	; (1000b100 <system_peripheral_reset+0x3a4>)
1000ae5e:	400a      	ands	r2, r1
1000ae60:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae62:	685a      	ldr	r2, [r3, #4]
1000ae64:	2180      	movs	r1, #128	; 0x80
1000ae66:	0149      	lsls	r1, r1, #5
1000ae68:	430a      	orrs	r2, r1
1000ae6a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae6c:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000ae6e:	e19e      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae70:	4b9e      	ldr	r3, [pc, #632]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae72:	6859      	ldr	r1, [r3, #4]
1000ae74:	4aa3      	ldr	r2, [pc, #652]	; (1000b104 <system_peripheral_reset+0x3a8>)
1000ae76:	400a      	ands	r2, r1
1000ae78:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae7a:	685a      	ldr	r2, [r3, #4]
1000ae7c:	2180      	movs	r1, #128	; 0x80
1000ae7e:	0189      	lsls	r1, r1, #6
1000ae80:	430a      	orrs	r2, r1
1000ae82:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae84:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000ae86:	e192      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ae88:	4b98      	ldr	r3, [pc, #608]	; (1000b0ec <system_peripheral_reset+0x390>)
1000ae8a:	6859      	ldr	r1, [r3, #4]
1000ae8c:	4a9e      	ldr	r2, [pc, #632]	; (1000b108 <system_peripheral_reset+0x3ac>)
1000ae8e:	400a      	ands	r2, r1
1000ae90:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ae92:	685a      	ldr	r2, [r3, #4]
1000ae94:	2180      	movs	r1, #128	; 0x80
1000ae96:	01c9      	lsls	r1, r1, #7
1000ae98:	430a      	orrs	r2, r1
1000ae9a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ae9c:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000ae9e:	e186      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aea0:	4b92      	ldr	r3, [pc, #584]	; (1000b0ec <system_peripheral_reset+0x390>)
1000aea2:	6859      	ldr	r1, [r3, #4]
1000aea4:	4a99      	ldr	r2, [pc, #612]	; (1000b10c <system_peripheral_reset+0x3b0>)
1000aea6:	400a      	ands	r2, r1
1000aea8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aeaa:	685a      	ldr	r2, [r3, #4]
1000aeac:	2180      	movs	r1, #128	; 0x80
1000aeae:	0209      	lsls	r1, r1, #8
1000aeb0:	430a      	orrs	r2, r1
1000aeb2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aeb4:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000aeb6:	e17a      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aeb8:	4b8c      	ldr	r3, [pc, #560]	; (1000b0ec <system_peripheral_reset+0x390>)
1000aeba:	6859      	ldr	r1, [r3, #4]
1000aebc:	4a94      	ldr	r2, [pc, #592]	; (1000b110 <system_peripheral_reset+0x3b4>)
1000aebe:	400a      	ands	r2, r1
1000aec0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aec2:	685a      	ldr	r2, [r3, #4]
1000aec4:	2180      	movs	r1, #128	; 0x80
1000aec6:	0249      	lsls	r1, r1, #9
1000aec8:	430a      	orrs	r2, r1
1000aeca:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aecc:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000aece:	e16e      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aed0:	4b86      	ldr	r3, [pc, #536]	; (1000b0ec <system_peripheral_reset+0x390>)
1000aed2:	6859      	ldr	r1, [r3, #4]
1000aed4:	4a8f      	ldr	r2, [pc, #572]	; (1000b114 <system_peripheral_reset+0x3b8>)
1000aed6:	400a      	ands	r2, r1
1000aed8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aeda:	685a      	ldr	r2, [r3, #4]
1000aedc:	2180      	movs	r1, #128	; 0x80
1000aede:	0289      	lsls	r1, r1, #10
1000aee0:	430a      	orrs	r2, r1
1000aee2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aee4:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000aee6:	e162      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aee8:	4b80      	ldr	r3, [pc, #512]	; (1000b0ec <system_peripheral_reset+0x390>)
1000aeea:	6859      	ldr	r1, [r3, #4]
1000aeec:	4a8a      	ldr	r2, [pc, #552]	; (1000b118 <system_peripheral_reset+0x3bc>)
1000aeee:	400a      	ands	r2, r1
1000aef0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000aef2:	685a      	ldr	r2, [r3, #4]
1000aef4:	2180      	movs	r1, #128	; 0x80
1000aef6:	02c9      	lsls	r1, r1, #11
1000aef8:	430a      	orrs	r2, r1
1000aefa:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000aefc:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000aefe:	e156      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af00:	4b7a      	ldr	r3, [pc, #488]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af02:	6859      	ldr	r1, [r3, #4]
1000af04:	4a85      	ldr	r2, [pc, #532]	; (1000b11c <system_peripheral_reset+0x3c0>)
1000af06:	400a      	ands	r2, r1
1000af08:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af0a:	685a      	ldr	r2, [r3, #4]
1000af0c:	2180      	movs	r1, #128	; 0x80
1000af0e:	0309      	lsls	r1, r1, #12
1000af10:	430a      	orrs	r2, r1
1000af12:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af14:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000af16:	e14a      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af18:	4b74      	ldr	r3, [pc, #464]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af1a:	6859      	ldr	r1, [r3, #4]
1000af1c:	4a80      	ldr	r2, [pc, #512]	; (1000b120 <system_peripheral_reset+0x3c4>)
1000af1e:	400a      	ands	r2, r1
1000af20:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af22:	685a      	ldr	r2, [r3, #4]
1000af24:	2180      	movs	r1, #128	; 0x80
1000af26:	0349      	lsls	r1, r1, #13
1000af28:	430a      	orrs	r2, r1
1000af2a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af2c:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000af2e:	e13e      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af30:	4b6e      	ldr	r3, [pc, #440]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af32:	6859      	ldr	r1, [r3, #4]
1000af34:	4a7b      	ldr	r2, [pc, #492]	; (1000b124 <system_peripheral_reset+0x3c8>)
1000af36:	400a      	ands	r2, r1
1000af38:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af3a:	685a      	ldr	r2, [r3, #4]
1000af3c:	2180      	movs	r1, #128	; 0x80
1000af3e:	0389      	lsls	r1, r1, #14
1000af40:	430a      	orrs	r2, r1
1000af42:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af44:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000af46:	e132      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af48:	4b68      	ldr	r3, [pc, #416]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af4a:	6859      	ldr	r1, [r3, #4]
1000af4c:	4a76      	ldr	r2, [pc, #472]	; (1000b128 <system_peripheral_reset+0x3cc>)
1000af4e:	400a      	ands	r2, r1
1000af50:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af52:	685a      	ldr	r2, [r3, #4]
1000af54:	2180      	movs	r1, #128	; 0x80
1000af56:	03c9      	lsls	r1, r1, #15
1000af58:	430a      	orrs	r2, r1
1000af5a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af5c:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000af5e:	e126      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af60:	4b62      	ldr	r3, [pc, #392]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af62:	6859      	ldr	r1, [r3, #4]
1000af64:	4a71      	ldr	r2, [pc, #452]	; (1000b12c <system_peripheral_reset+0x3d0>)
1000af66:	400a      	ands	r2, r1
1000af68:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af6a:	685a      	ldr	r2, [r3, #4]
1000af6c:	2180      	movs	r1, #128	; 0x80
1000af6e:	0409      	lsls	r1, r1, #16
1000af70:	430a      	orrs	r2, r1
1000af72:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af74:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000af76:	e11a      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af78:	4b5c      	ldr	r3, [pc, #368]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af7a:	6859      	ldr	r1, [r3, #4]
1000af7c:	4a6c      	ldr	r2, [pc, #432]	; (1000b130 <system_peripheral_reset+0x3d4>)
1000af7e:	400a      	ands	r2, r1
1000af80:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af82:	685a      	ldr	r2, [r3, #4]
1000af84:	2180      	movs	r1, #128	; 0x80
1000af86:	0449      	lsls	r1, r1, #17
1000af88:	430a      	orrs	r2, r1
1000af8a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000af8c:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000af8e:	e10e      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000af90:	4b56      	ldr	r3, [pc, #344]	; (1000b0ec <system_peripheral_reset+0x390>)
1000af92:	6859      	ldr	r1, [r3, #4]
1000af94:	4a67      	ldr	r2, [pc, #412]	; (1000b134 <system_peripheral_reset+0x3d8>)
1000af96:	400a      	ands	r2, r1
1000af98:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000af9a:	685a      	ldr	r2, [r3, #4]
1000af9c:	2180      	movs	r1, #128	; 0x80
1000af9e:	0489      	lsls	r1, r1, #18
1000afa0:	430a      	orrs	r2, r1
1000afa2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afa4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000afa6:	e102      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000afa8:	4b50      	ldr	r3, [pc, #320]	; (1000b0ec <system_peripheral_reset+0x390>)
1000afaa:	6859      	ldr	r1, [r3, #4]
1000afac:	4a62      	ldr	r2, [pc, #392]	; (1000b138 <system_peripheral_reset+0x3dc>)
1000afae:	400a      	ands	r2, r1
1000afb0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000afb2:	685a      	ldr	r2, [r3, #4]
1000afb4:	2180      	movs	r1, #128	; 0x80
1000afb6:	04c9      	lsls	r1, r1, #19
1000afb8:	430a      	orrs	r2, r1
1000afba:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afbc:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000afbe:	e0f6      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000afc0:	4b4a      	ldr	r3, [pc, #296]	; (1000b0ec <system_peripheral_reset+0x390>)
1000afc2:	6859      	ldr	r1, [r3, #4]
1000afc4:	4a5d      	ldr	r2, [pc, #372]	; (1000b13c <system_peripheral_reset+0x3e0>)
1000afc6:	400a      	ands	r2, r1
1000afc8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000afca:	685a      	ldr	r2, [r3, #4]
1000afcc:	2180      	movs	r1, #128	; 0x80
1000afce:	0509      	lsls	r1, r1, #20
1000afd0:	430a      	orrs	r2, r1
1000afd2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afd4:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000afd6:	e0ea      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000afd8:	4b44      	ldr	r3, [pc, #272]	; (1000b0ec <system_peripheral_reset+0x390>)
1000afda:	6859      	ldr	r1, [r3, #4]
1000afdc:	4a58      	ldr	r2, [pc, #352]	; (1000b140 <system_peripheral_reset+0x3e4>)
1000afde:	400a      	ands	r2, r1
1000afe0:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000afe2:	685a      	ldr	r2, [r3, #4]
1000afe4:	2180      	movs	r1, #128	; 0x80
1000afe6:	0549      	lsls	r1, r1, #21
1000afe8:	430a      	orrs	r2, r1
1000afea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000afec:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000afee:	e0de      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000aff0:	4b3e      	ldr	r3, [pc, #248]	; (1000b0ec <system_peripheral_reset+0x390>)
1000aff2:	6859      	ldr	r1, [r3, #4]
1000aff4:	4a53      	ldr	r2, [pc, #332]	; (1000b144 <system_peripheral_reset+0x3e8>)
1000aff6:	400a      	ands	r2, r1
1000aff8:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000affa:	685a      	ldr	r2, [r3, #4]
1000affc:	2180      	movs	r1, #128	; 0x80
1000affe:	0589      	lsls	r1, r1, #22
1000b000:	430a      	orrs	r2, r1
1000b002:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b004:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b006:	e0d2      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b008:	4b38      	ldr	r3, [pc, #224]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b00a:	6859      	ldr	r1, [r3, #4]
1000b00c:	4a4e      	ldr	r2, [pc, #312]	; (1000b148 <system_peripheral_reset+0x3ec>)
1000b00e:	400a      	ands	r2, r1
1000b010:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b012:	685a      	ldr	r2, [r3, #4]
1000b014:	2180      	movs	r1, #128	; 0x80
1000b016:	05c9      	lsls	r1, r1, #23
1000b018:	430a      	orrs	r2, r1
1000b01a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b01c:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b01e:	e0c6      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b020:	4a32      	ldr	r2, [pc, #200]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b022:	6853      	ldr	r3, [r2, #4]
1000b024:	005b      	lsls	r3, r3, #1
1000b026:	085b      	lsrs	r3, r3, #1
1000b028:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b02a:	6853      	ldr	r3, [r2, #4]
1000b02c:	2180      	movs	r1, #128	; 0x80
1000b02e:	0609      	lsls	r1, r1, #24
1000b030:	430b      	orrs	r3, r1
1000b032:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b034:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b036:	e0ba      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b038:	4b2c      	ldr	r3, [pc, #176]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b03a:	891a      	ldrh	r2, [r3, #8]
1000b03c:	2101      	movs	r1, #1
1000b03e:	438a      	bics	r2, r1
1000b040:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b042:	8919      	ldrh	r1, [r3, #8]
1000b044:	2201      	movs	r2, #1
1000b046:	430a      	orrs	r2, r1
1000b048:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b04a:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b04c:	e0af      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b04e:	4b27      	ldr	r3, [pc, #156]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b050:	891a      	ldrh	r2, [r3, #8]
1000b052:	2102      	movs	r1, #2
1000b054:	438a      	bics	r2, r1
1000b056:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b058:	8919      	ldrh	r1, [r3, #8]
1000b05a:	2202      	movs	r2, #2
1000b05c:	430a      	orrs	r2, r1
1000b05e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b060:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b062:	e0a4      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b064:	4b21      	ldr	r3, [pc, #132]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b066:	891a      	ldrh	r2, [r3, #8]
1000b068:	2104      	movs	r1, #4
1000b06a:	438a      	bics	r2, r1
1000b06c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b06e:	8919      	ldrh	r1, [r3, #8]
1000b070:	2204      	movs	r2, #4
1000b072:	430a      	orrs	r2, r1
1000b074:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b076:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000b078:	e099      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b07a:	4b1c      	ldr	r3, [pc, #112]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b07c:	891a      	ldrh	r2, [r3, #8]
1000b07e:	2108      	movs	r1, #8
1000b080:	438a      	bics	r2, r1
1000b082:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b084:	8919      	ldrh	r1, [r3, #8]
1000b086:	2208      	movs	r2, #8
1000b088:	430a      	orrs	r2, r1
1000b08a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b08c:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000b08e:	e08e      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b090:	4b16      	ldr	r3, [pc, #88]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b092:	891a      	ldrh	r2, [r3, #8]
1000b094:	2110      	movs	r1, #16
1000b096:	438a      	bics	r2, r1
1000b098:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b09a:	8919      	ldrh	r1, [r3, #8]
1000b09c:	2210      	movs	r2, #16
1000b09e:	430a      	orrs	r2, r1
1000b0a0:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a2:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000b0a4:	e083      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b0a6:	4b11      	ldr	r3, [pc, #68]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b0a8:	891a      	ldrh	r2, [r3, #8]
1000b0aa:	2120      	movs	r1, #32
1000b0ac:	438a      	bics	r2, r1
1000b0ae:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b0b0:	8919      	ldrh	r1, [r3, #8]
1000b0b2:	2220      	movs	r2, #32
1000b0b4:	430a      	orrs	r2, r1
1000b0b6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0b8:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000b0ba:	e078      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b0bc:	4b0b      	ldr	r3, [pc, #44]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b0be:	891a      	ldrh	r2, [r3, #8]
1000b0c0:	2140      	movs	r1, #64	; 0x40
1000b0c2:	438a      	bics	r2, r1
1000b0c4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b0c6:	8919      	ldrh	r1, [r3, #8]
1000b0c8:	2240      	movs	r2, #64	; 0x40
1000b0ca:	430a      	orrs	r2, r1
1000b0cc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0ce:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000b0d0:	e06d      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b0d2:	4b06      	ldr	r3, [pc, #24]	; (1000b0ec <system_peripheral_reset+0x390>)
1000b0d4:	891a      	ldrh	r2, [r3, #8]
1000b0d6:	2180      	movs	r1, #128	; 0x80
1000b0d8:	438a      	bics	r2, r1
1000b0da:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b0dc:	8919      	ldrh	r1, [r3, #8]
1000b0de:	2280      	movs	r2, #128	; 0x80
1000b0e0:	430a      	orrs	r2, r1
1000b0e2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000b0e6:	e062      	b.n	1000b1ae <system_peripheral_reset+0x452>
1000b0e8:	10013f70 	.word	0x10013f70
1000b0ec:	4000b000 	.word	0x4000b000
1000b0f0:	fffffeff 	.word	0xfffffeff
1000b0f4:	fffffdff 	.word	0xfffffdff
1000b0f8:	fffffbff 	.word	0xfffffbff
1000b0fc:	fffff7ff 	.word	0xfffff7ff
1000b100:	ffffefff 	.word	0xffffefff
1000b104:	ffffdfff 	.word	0xffffdfff
1000b108:	ffffbfff 	.word	0xffffbfff
1000b10c:	ffff7fff 	.word	0xffff7fff
1000b110:	fffeffff 	.word	0xfffeffff
1000b114:	fffdffff 	.word	0xfffdffff
1000b118:	fffbffff 	.word	0xfffbffff
1000b11c:	fff7ffff 	.word	0xfff7ffff
1000b120:	ffefffff 	.word	0xffefffff
1000b124:	ffdfffff 	.word	0xffdfffff
1000b128:	ffbfffff 	.word	0xffbfffff
1000b12c:	ff7fffff 	.word	0xff7fffff
1000b130:	feffffff 	.word	0xfeffffff
1000b134:	fdffffff 	.word	0xfdffffff
1000b138:	fbffffff 	.word	0xfbffffff
1000b13c:	f7ffffff 	.word	0xf7ffffff
1000b140:	efffffff 	.word	0xefffffff
1000b144:	dfffffff 	.word	0xdfffffff
1000b148:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b14c:	4b18      	ldr	r3, [pc, #96]	; (1000b1b0 <system_peripheral_reset+0x454>)
1000b14e:	8919      	ldrh	r1, [r3, #8]
1000b150:	4a18      	ldr	r2, [pc, #96]	; (1000b1b4 <system_peripheral_reset+0x458>)
1000b152:	400a      	ands	r2, r1
1000b154:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b156:	8919      	ldrh	r1, [r3, #8]
1000b158:	2280      	movs	r2, #128	; 0x80
1000b15a:	0052      	lsls	r2, r2, #1
1000b15c:	430a      	orrs	r2, r1
1000b15e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b160:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000b162:	e024      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b164:	4b12      	ldr	r3, [pc, #72]	; (1000b1b0 <system_peripheral_reset+0x454>)
1000b166:	8919      	ldrh	r1, [r3, #8]
1000b168:	4a13      	ldr	r2, [pc, #76]	; (1000b1b8 <system_peripheral_reset+0x45c>)
1000b16a:	400a      	ands	r2, r1
1000b16c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b16e:	8919      	ldrh	r1, [r3, #8]
1000b170:	2280      	movs	r2, #128	; 0x80
1000b172:	0092      	lsls	r2, r2, #2
1000b174:	430a      	orrs	r2, r1
1000b176:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b178:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b17a:	e018      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b17c:	4b0c      	ldr	r3, [pc, #48]	; (1000b1b0 <system_peripheral_reset+0x454>)
1000b17e:	8919      	ldrh	r1, [r3, #8]
1000b180:	4a0e      	ldr	r2, [pc, #56]	; (1000b1bc <system_peripheral_reset+0x460>)
1000b182:	400a      	ands	r2, r1
1000b184:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b186:	8919      	ldrh	r1, [r3, #8]
1000b188:	2280      	movs	r2, #128	; 0x80
1000b18a:	00d2      	lsls	r2, r2, #3
1000b18c:	430a      	orrs	r2, r1
1000b18e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b190:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000b192:	e00c      	b.n	1000b1ae <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b194:	4b06      	ldr	r3, [pc, #24]	; (1000b1b0 <system_peripheral_reset+0x454>)
1000b196:	8919      	ldrh	r1, [r3, #8]
1000b198:	4a09      	ldr	r2, [pc, #36]	; (1000b1c0 <system_peripheral_reset+0x464>)
1000b19a:	400a      	ands	r2, r1
1000b19c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b19e:	8919      	ldrh	r1, [r3, #8]
1000b1a0:	2280      	movs	r2, #128	; 0x80
1000b1a2:	0112      	lsls	r2, r2, #4
1000b1a4:	430a      	orrs	r2, r1
1000b1a6:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a8:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000b1aa:	e000      	b.n	1000b1ae <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b1ac:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b1ae:	bd00      	pop	{pc}
1000b1b0:	4000b000 	.word	0x4000b000
1000b1b4:	fffffeff 	.word	0xfffffeff
1000b1b8:	fffffdff 	.word	0xfffffdff
1000b1bc:	fffffbff 	.word	0xfffffbff
1000b1c0:	fffff7ff 	.word	0xfffff7ff

1000b1c4 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000b1c4:	2380      	movs	r3, #128	; 0x80
1000b1c6:	04db      	lsls	r3, r3, #19
1000b1c8:	469c      	mov	ip, r3
1000b1ca:	4460      	add	r0, ip
1000b1cc:	0080      	lsls	r0, r0, #2
1000b1ce:	6001      	str	r1, [r0, #0]
}
1000b1d0:	4770      	bx	lr
1000b1d2:	46c0      	nop			; (mov r8, r8)

1000b1d4 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000b1d4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b1d6:	4b20      	ldr	r3, [pc, #128]	; (1000b258 <uart_rx0_isr_handler+0x84>)
1000b1d8:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b1da:	6823      	ldr	r3, [r4, #0]
1000b1dc:	7d1d      	ldrb	r5, [r3, #20]
1000b1de:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b1e0:	066a      	lsls	r2, r5, #25
1000b1e2:	d513      	bpl.n	1000b20c <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b1e4:	211e      	movs	r1, #30
1000b1e6:	2222      	movs	r2, #34	; 0x22
1000b1e8:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b1ea:	7e1a      	ldrb	r2, [r3, #24]
1000b1ec:	3123      	adds	r1, #35	; 0x23
1000b1ee:	438a      	bics	r2, r1
1000b1f0:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b1f2:	2321      	movs	r3, #33	; 0x21
1000b1f4:	5ce3      	ldrb	r3, [r4, r3]
1000b1f6:	071b      	lsls	r3, r3, #28
1000b1f8:	d506      	bpl.n	1000b208 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b1fa:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b1fc:	5ce3      	ldrb	r3, [r4, r3]
1000b1fe:	071b      	lsls	r3, r3, #28
1000b200:	d502      	bpl.n	1000b208 <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b202:	0020      	movs	r0, r4
1000b204:	6923      	ldr	r3, [r4, #16]
1000b206:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b208:	6823      	ldr	r3, [r4, #0]
1000b20a:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b20c:	07eb      	lsls	r3, r5, #31
1000b20e:	d522      	bpl.n	1000b256 <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b210:	6823      	ldr	r3, [r4, #0]
1000b212:	7c1b      	ldrb	r3, [r3, #16]
1000b214:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b216:	6962      	ldr	r2, [r4, #20]
1000b218:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b21a:	6963      	ldr	r3, [r4, #20]
1000b21c:	3301      	adds	r3, #1
1000b21e:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b220:	8ba3      	ldrh	r3, [r4, #28]
1000b222:	3b01      	subs	r3, #1
1000b224:	b29b      	uxth	r3, r3
1000b226:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b228:	8ba3      	ldrh	r3, [r4, #28]
1000b22a:	b29b      	uxth	r3, r3
1000b22c:	2b00      	cmp	r3, #0
1000b22e:	d112      	bne.n	1000b256 <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b230:	3321      	adds	r3, #33	; 0x21
1000b232:	5ce3      	ldrb	r3, [r4, r3]
1000b234:	075b      	lsls	r3, r3, #29
1000b236:	d50e      	bpl.n	1000b256 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b238:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b23a:	5ce3      	ldrb	r3, [r4, r3]
1000b23c:	075b      	lsls	r3, r3, #29
1000b23e:	d50a      	bpl.n	1000b256 <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b240:	2200      	movs	r2, #0
1000b242:	2322      	movs	r3, #34	; 0x22
1000b244:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b246:	6822      	ldr	r2, [r4, #0]
1000b248:	7e13      	ldrb	r3, [r2, #24]
1000b24a:	2101      	movs	r1, #1
1000b24c:	438b      	bics	r3, r1
1000b24e:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b250:	68e3      	ldr	r3, [r4, #12]
1000b252:	0020      	movs	r0, r4
1000b254:	4798      	blx	r3
			}
		}
	}
}
1000b256:	bd70      	pop	{r4, r5, r6, pc}
1000b258:	10016ccc 	.word	0x10016ccc

1000b25c <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000b25c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000b25e:	4b21      	ldr	r3, [pc, #132]	; (1000b2e4 <uart_tx0_isr_handler+0x88>)
1000b260:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b262:	6823      	ldr	r3, [r4, #0]
1000b264:	791d      	ldrb	r5, [r3, #4]
1000b266:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b268:	07ea      	lsls	r2, r5, #31
1000b26a:	d517      	bpl.n	1000b29c <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b26c:	69a2      	ldr	r2, [r4, #24]
1000b26e:	7811      	ldrb	r1, [r2, #0]
1000b270:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b272:	3201      	adds	r2, #1
1000b274:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b276:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b278:	8be3      	ldrh	r3, [r4, #30]
1000b27a:	3b01      	subs	r3, #1
1000b27c:	b29b      	uxth	r3, r3
1000b27e:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b280:	8be3      	ldrh	r3, [r4, #30]
1000b282:	b29b      	uxth	r3, r3
1000b284:	2b00      	cmp	r3, #0
1000b286:	d109      	bne.n	1000b29c <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b288:	6822      	ldr	r2, [r4, #0]
1000b28a:	7a13      	ldrb	r3, [r2, #8]
1000b28c:	2101      	movs	r1, #1
1000b28e:	438b      	bics	r3, r1
1000b290:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b292:	6822      	ldr	r2, [r4, #0]
1000b294:	7a11      	ldrb	r1, [r2, #8]
1000b296:	2310      	movs	r3, #16
1000b298:	430b      	orrs	r3, r1
1000b29a:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b29c:	06eb      	lsls	r3, r5, #27
1000b29e:	d512      	bpl.n	1000b2c6 <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b2a0:	2321      	movs	r3, #33	; 0x21
1000b2a2:	5ce3      	ldrb	r3, [r4, r3]
1000b2a4:	07db      	lsls	r3, r3, #31
1000b2a6:	d50e      	bpl.n	1000b2c6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b2a8:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b2aa:	5ce3      	ldrb	r3, [r4, r3]
1000b2ac:	07db      	lsls	r3, r3, #31
1000b2ae:	d50a      	bpl.n	1000b2c6 <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b2b0:	2200      	movs	r2, #0
1000b2b2:	2322      	movs	r3, #34	; 0x22
1000b2b4:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b2b6:	6822      	ldr	r2, [r4, #0]
1000b2b8:	7a13      	ldrb	r3, [r2, #8]
1000b2ba:	2110      	movs	r1, #16
1000b2bc:	438b      	bics	r3, r1
1000b2be:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b2c0:	0020      	movs	r0, r4
1000b2c2:	6863      	ldr	r3, [r4, #4]
1000b2c4:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b2c6:	06ab      	lsls	r3, r5, #26
1000b2c8:	d50a      	bpl.n	1000b2e0 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b2ca:	2321      	movs	r3, #33	; 0x21
1000b2cc:	5ce3      	ldrb	r3, [r4, r3]
1000b2ce:	079b      	lsls	r3, r3, #30
1000b2d0:	d506      	bpl.n	1000b2e0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b2d2:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b2d4:	5ce3      	ldrb	r3, [r4, r3]
1000b2d6:	079b      	lsls	r3, r3, #30
1000b2d8:	d502      	bpl.n	1000b2e0 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b2da:	68a3      	ldr	r3, [r4, #8]
1000b2dc:	0020      	movs	r0, r4
1000b2de:	4798      	blx	r3
		}

	}
}
1000b2e0:	bd70      	pop	{r4, r5, r6, pc}
1000b2e2:	46c0      	nop			; (mov r8, r8)
1000b2e4:	10016ccc 	.word	0x10016ccc

1000b2e8 <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000b2e8:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b2ea:	4b20      	ldr	r3, [pc, #128]	; (1000b36c <uart_rx1_isr_handler+0x84>)
1000b2ec:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000b2ee:	6823      	ldr	r3, [r4, #0]
1000b2f0:	7d1d      	ldrb	r5, [r3, #20]
1000b2f2:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000b2f4:	066a      	lsls	r2, r5, #25
1000b2f6:	d513      	bpl.n	1000b320 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000b2f8:	211e      	movs	r1, #30
1000b2fa:	2222      	movs	r2, #34	; 0x22
1000b2fc:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000b2fe:	7e1a      	ldrb	r2, [r3, #24]
1000b300:	3123      	adds	r1, #35	; 0x23
1000b302:	438a      	bics	r2, r1
1000b304:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b306:	2321      	movs	r3, #33	; 0x21
1000b308:	5ce3      	ldrb	r3, [r4, r3]
1000b30a:	071b      	lsls	r3, r3, #28
1000b30c:	d506      	bpl.n	1000b31c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000b30e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000b310:	5ce3      	ldrb	r3, [r4, r3]
1000b312:	071b      	lsls	r3, r3, #28
1000b314:	d502      	bpl.n	1000b31c <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000b316:	0020      	movs	r0, r4
1000b318:	6923      	ldr	r3, [r4, #16]
1000b31a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000b31c:	6823      	ldr	r3, [r4, #0]
1000b31e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b320:	07eb      	lsls	r3, r5, #31
1000b322:	d522      	bpl.n	1000b36a <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000b324:	6823      	ldr	r3, [r4, #0]
1000b326:	7c1b      	ldrb	r3, [r3, #16]
1000b328:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000b32a:	6962      	ldr	r2, [r4, #20]
1000b32c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000b32e:	6963      	ldr	r3, [r4, #20]
1000b330:	3301      	adds	r3, #1
1000b332:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000b334:	8ba3      	ldrh	r3, [r4, #28]
1000b336:	3b01      	subs	r3, #1
1000b338:	b29b      	uxth	r3, r3
1000b33a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000b33c:	8ba3      	ldrh	r3, [r4, #28]
1000b33e:	b29b      	uxth	r3, r3
1000b340:	2b00      	cmp	r3, #0
1000b342:	d112      	bne.n	1000b36a <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b344:	3321      	adds	r3, #33	; 0x21
1000b346:	5ce3      	ldrb	r3, [r4, r3]
1000b348:	075b      	lsls	r3, r3, #29
1000b34a:	d50e      	bpl.n	1000b36a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000b34c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000b34e:	5ce3      	ldrb	r3, [r4, r3]
1000b350:	075b      	lsls	r3, r3, #29
1000b352:	d50a      	bpl.n	1000b36a <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000b354:	2200      	movs	r2, #0
1000b356:	2322      	movs	r3, #34	; 0x22
1000b358:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000b35a:	6822      	ldr	r2, [r4, #0]
1000b35c:	7e13      	ldrb	r3, [r2, #24]
1000b35e:	2101      	movs	r1, #1
1000b360:	438b      	bics	r3, r1
1000b362:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000b364:	68e3      	ldr	r3, [r4, #12]
1000b366:	0020      	movs	r0, r4
1000b368:	4798      	blx	r3
			}
		}
	}
}
1000b36a:	bd70      	pop	{r4, r5, r6, pc}
1000b36c:	10016ccc 	.word	0x10016ccc

1000b370 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000b370:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000b372:	4b21      	ldr	r3, [pc, #132]	; (1000b3f8 <uart_tx1_isr_handler+0x88>)
1000b374:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000b376:	6823      	ldr	r3, [r4, #0]
1000b378:	791d      	ldrb	r5, [r3, #4]
1000b37a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000b37c:	07ea      	lsls	r2, r5, #31
1000b37e:	d517      	bpl.n	1000b3b0 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000b380:	69a2      	ldr	r2, [r4, #24]
1000b382:	7811      	ldrb	r1, [r2, #0]
1000b384:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000b386:	3201      	adds	r2, #1
1000b388:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000b38a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000b38c:	8be3      	ldrh	r3, [r4, #30]
1000b38e:	3b01      	subs	r3, #1
1000b390:	b29b      	uxth	r3, r3
1000b392:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000b394:	8be3      	ldrh	r3, [r4, #30]
1000b396:	b29b      	uxth	r3, r3
1000b398:	2b00      	cmp	r3, #0
1000b39a:	d109      	bne.n	1000b3b0 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b39c:	6822      	ldr	r2, [r4, #0]
1000b39e:	7a13      	ldrb	r3, [r2, #8]
1000b3a0:	2101      	movs	r1, #1
1000b3a2:	438b      	bics	r3, r1
1000b3a4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000b3a6:	6822      	ldr	r2, [r4, #0]
1000b3a8:	7a11      	ldrb	r1, [r2, #8]
1000b3aa:	2310      	movs	r3, #16
1000b3ac:	430b      	orrs	r3, r1
1000b3ae:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000b3b0:	06eb      	lsls	r3, r5, #27
1000b3b2:	d512      	bpl.n	1000b3da <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b3b4:	2321      	movs	r3, #33	; 0x21
1000b3b6:	5ce3      	ldrb	r3, [r4, r3]
1000b3b8:	07db      	lsls	r3, r3, #31
1000b3ba:	d50e      	bpl.n	1000b3da <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000b3bc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000b3be:	5ce3      	ldrb	r3, [r4, r3]
1000b3c0:	07db      	lsls	r3, r3, #31
1000b3c2:	d50a      	bpl.n	1000b3da <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000b3c4:	2200      	movs	r2, #0
1000b3c6:	2322      	movs	r3, #34	; 0x22
1000b3c8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000b3ca:	6822      	ldr	r2, [r4, #0]
1000b3cc:	7a13      	ldrb	r3, [r2, #8]
1000b3ce:	2110      	movs	r1, #16
1000b3d0:	438b      	bics	r3, r1
1000b3d2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000b3d4:	0020      	movs	r0, r4
1000b3d6:	6863      	ldr	r3, [r4, #4]
1000b3d8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000b3da:	06ab      	lsls	r3, r5, #26
1000b3dc:	d50a      	bpl.n	1000b3f4 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b3de:	2321      	movs	r3, #33	; 0x21
1000b3e0:	5ce3      	ldrb	r3, [r4, r3]
1000b3e2:	079b      	lsls	r3, r3, #30
1000b3e4:	d506      	bpl.n	1000b3f4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000b3e6:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000b3e8:	5ce3      	ldrb	r3, [r4, r3]
1000b3ea:	079b      	lsls	r3, r3, #30
1000b3ec:	d502      	bpl.n	1000b3f4 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000b3ee:	68a3      	ldr	r3, [r4, #8]
1000b3f0:	0020      	movs	r0, r4
1000b3f2:	4798      	blx	r3
		}

	}
}
1000b3f4:	bd70      	pop	{r4, r5, r6, pc}
1000b3f6:	46c0      	nop			; (mov r8, r8)
1000b3f8:	10016ccc 	.word	0x10016ccc

1000b3fc <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000b3fc:	23e1      	movs	r3, #225	; 0xe1
1000b3fe:	025b      	lsls	r3, r3, #9
1000b400:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000b402:	2300      	movs	r3, #0
1000b404:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000b406:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000b408:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000b40a:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000b40c:	3302      	adds	r3, #2
1000b40e:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000b410:	2203      	movs	r2, #3
1000b412:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000b414:	3201      	adds	r2, #1
1000b416:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000b418:	3201      	adds	r2, #1
1000b41a:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000b41c:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000b41e:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000b420:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000b422:	6243      	str	r3, [r0, #36]	; 0x24
}
1000b424:	4770      	bx	lr
1000b426:	46c0      	nop			; (mov r8, r8)

1000b428 <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b42a:	464f      	mov	r7, r9
1000b42c:	4646      	mov	r6, r8
1000b42e:	b4c0      	push	{r6, r7}
1000b430:	0005      	movs	r5, r0
1000b432:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000b434:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000b436:	2300      	movs	r3, #0
1000b438:	6043      	str	r3, [r0, #4]
1000b43a:	6083      	str	r3, [r0, #8]
1000b43c:	60c3      	str	r3, [r0, #12]
1000b43e:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000b440:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000b442:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000b444:	2200      	movs	r2, #0
1000b446:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000b448:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000b44a:	3320      	adds	r3, #32
1000b44c:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000b44e:	3301      	adds	r3, #1
1000b450:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000b452:	3301      	adds	r3, #1
1000b454:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000b456:	4b55      	ldr	r3, [pc, #340]	; (1000b5ac <uart_init+0x184>)
1000b458:	4299      	cmp	r1, r3
1000b45a:	d118      	bne.n	1000b48e <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000b45c:	2009      	movs	r0, #9
1000b45e:	4c54      	ldr	r4, [pc, #336]	; (1000b5b0 <uart_init+0x188>)
1000b460:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000b462:	200a      	movs	r0, #10
1000b464:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000b466:	2009      	movs	r0, #9
1000b468:	4c52      	ldr	r4, [pc, #328]	; (1000b5b4 <uart_init+0x18c>)
1000b46a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000b46c:	200a      	movs	r0, #10
1000b46e:	47a0      	blx	r4
		_uart_instances[0] = module;
1000b470:	4b51      	ldr	r3, [pc, #324]	; (1000b5b8 <uart_init+0x190>)
1000b472:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000b474:	4951      	ldr	r1, [pc, #324]	; (1000b5bc <uart_init+0x194>)
1000b476:	2010      	movs	r0, #16
1000b478:	4c51      	ldr	r4, [pc, #324]	; (1000b5c0 <uart_init+0x198>)
1000b47a:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000b47c:	4951      	ldr	r1, [pc, #324]	; (1000b5c4 <uart_init+0x19c>)
1000b47e:	2011      	movs	r0, #17
1000b480:	47a0      	blx	r4
1000b482:	4b51      	ldr	r3, [pc, #324]	; (1000b5c8 <uart_init+0x1a0>)
1000b484:	2201      	movs	r2, #1
1000b486:	601a      	str	r2, [r3, #0]
1000b488:	3201      	adds	r2, #1
1000b48a:	601a      	str	r2, [r3, #0]
1000b48c:	e01a      	b.n	1000b4c4 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000b48e:	4b4f      	ldr	r3, [pc, #316]	; (1000b5cc <uart_init+0x1a4>)
1000b490:	4299      	cmp	r1, r3
1000b492:	d117      	bne.n	1000b4c4 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000b494:	200b      	movs	r0, #11
1000b496:	4c46      	ldr	r4, [pc, #280]	; (1000b5b0 <uart_init+0x188>)
1000b498:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000b49a:	200c      	movs	r0, #12
1000b49c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000b49e:	200b      	movs	r0, #11
1000b4a0:	4c44      	ldr	r4, [pc, #272]	; (1000b5b4 <uart_init+0x18c>)
1000b4a2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000b4a4:	200c      	movs	r0, #12
1000b4a6:	47a0      	blx	r4
		_uart_instances[1] = module;
1000b4a8:	4b43      	ldr	r3, [pc, #268]	; (1000b5b8 <uart_init+0x190>)
1000b4aa:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000b4ac:	4948      	ldr	r1, [pc, #288]	; (1000b5d0 <uart_init+0x1a8>)
1000b4ae:	2012      	movs	r0, #18
1000b4b0:	4c43      	ldr	r4, [pc, #268]	; (1000b5c0 <uart_init+0x198>)
1000b4b2:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000b4b4:	4947      	ldr	r1, [pc, #284]	; (1000b5d4 <uart_init+0x1ac>)
1000b4b6:	2013      	movs	r0, #19
1000b4b8:	47a0      	blx	r4
1000b4ba:	4b43      	ldr	r3, [pc, #268]	; (1000b5c8 <uart_init+0x1a0>)
1000b4bc:	2204      	movs	r2, #4
1000b4be:	601a      	str	r2, [r3, #0]
1000b4c0:	3204      	adds	r2, #4
1000b4c2:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b4c4:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000b4c6:	2204      	movs	r2, #4
1000b4c8:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000b4ca:	2b00      	cmp	r3, #0
1000b4cc:	d152      	bne.n	1000b574 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000b4ce:	3302      	adds	r3, #2
1000b4d0:	4698      	mov	r8, r3
1000b4d2:	e04f      	b.n	1000b574 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b4d4:	8a31      	ldrh	r1, [r6, #16]
1000b4d6:	ce01      	ldmia	r6!, {r0}
1000b4d8:	b2c0      	uxtb	r0, r0
1000b4da:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000b4dc:	3401      	adds	r4, #1
1000b4de:	b2e4      	uxtb	r4, r4
1000b4e0:	4544      	cmp	r4, r8
1000b4e2:	d3f7      	bcc.n	1000b4d4 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b4e4:	682b      	ldr	r3, [r5, #0]
1000b4e6:	7d1a      	ldrb	r2, [r3, #20]
1000b4e8:	07d2      	lsls	r2, r2, #31
1000b4ea:	d504      	bpl.n	1000b4f6 <uart_init+0xce>
1000b4ec:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000b4ee:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000b4f0:	7d1a      	ldrb	r2, [r3, #20]
1000b4f2:	420a      	tst	r2, r1
1000b4f4:	d1fb      	bne.n	1000b4ee <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000b4f6:	2100      	movs	r1, #0
1000b4f8:	2220      	movs	r2, #32
1000b4fa:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000b4fc:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000b4fe:	1e59      	subs	r1, r3, #1
1000b500:	418b      	sbcs	r3, r1
1000b502:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000b504:	793b      	ldrb	r3, [r7, #4]
1000b506:	797a      	ldrb	r2, [r7, #5]
1000b508:	4313      	orrs	r3, r2
1000b50a:	430b      	orrs	r3, r1
	switch(config->parity) {
1000b50c:	79ba      	ldrb	r2, [r7, #6]
1000b50e:	2a02      	cmp	r2, #2
1000b510:	d00d      	beq.n	1000b52e <uart_init+0x106>
1000b512:	b2d1      	uxtb	r1, r2
1000b514:	2902      	cmp	r1, #2
1000b516:	d802      	bhi.n	1000b51e <uart_init+0xf6>
1000b518:	2a01      	cmp	r2, #1
1000b51a:	d005      	beq.n	1000b528 <uart_init+0x100>
1000b51c:	e00f      	b.n	1000b53e <uart_init+0x116>
1000b51e:	2a03      	cmp	r2, #3
1000b520:	d008      	beq.n	1000b534 <uart_init+0x10c>
1000b522:	2a04      	cmp	r2, #4
1000b524:	d009      	beq.n	1000b53a <uart_init+0x112>
1000b526:	e00a      	b.n	1000b53e <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000b528:	2202      	movs	r2, #2
1000b52a:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000b52c:	e007      	b.n	1000b53e <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000b52e:	2206      	movs	r2, #6
1000b530:	4313      	orrs	r3, r2
			break;
1000b532:	e004      	b.n	1000b53e <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000b534:	220a      	movs	r2, #10
1000b536:	4313      	orrs	r3, r2
			break;
1000b538:	e001      	b.n	1000b53e <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000b53a:	220e      	movs	r2, #14
1000b53c:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000b53e:	2220      	movs	r2, #32
1000b540:	6829      	ldr	r1, [r5, #0]
1000b542:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000b544:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000b546:	4b24      	ldr	r3, [pc, #144]	; (1000b5d8 <uart_init+0x1b0>)
1000b548:	4798      	blx	r3
1000b54a:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000b54c:	0031      	movs	r1, r6
1000b54e:	4b23      	ldr	r3, [pc, #140]	; (1000b5dc <uart_init+0x1b4>)
1000b550:	4798      	blx	r3
1000b552:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000b554:	0400      	lsls	r0, r0, #16
1000b556:	0c00      	lsrs	r0, r0, #16
1000b558:	4370      	muls	r0, r6
1000b55a:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b55c:	0931      	lsrs	r1, r6, #4
1000b55e:	4288      	cmp	r0, r1
1000b560:	d906      	bls.n	1000b570 <uart_init+0x148>
1000b562:	2300      	movs	r3, #0
		i++;
1000b564:	3301      	adds	r3, #1
1000b566:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000b568:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000b56a:	4288      	cmp	r0, r1
1000b56c:	d8fa      	bhi.n	1000b564 <uart_init+0x13c>
1000b56e:	e007      	b.n	1000b580 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000b570:	2300      	movs	r3, #0
1000b572:	e005      	b.n	1000b580 <uart_init+0x158>
1000b574:	003e      	movs	r6, r7
1000b576:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000b578:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000b57a:	4b19      	ldr	r3, [pc, #100]	; (1000b5e0 <uart_init+0x1b8>)
1000b57c:	4699      	mov	r9, r3
1000b57e:	e7a9      	b.n	1000b4d4 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000b580:	2100      	movs	r1, #0
1000b582:	2028      	movs	r0, #40	; 0x28
1000b584:	682c      	ldr	r4, [r5, #0]
1000b586:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000b588:	3301      	adds	r3, #1
1000b58a:	071b      	lsls	r3, r3, #28
1000b58c:	0f5b      	lsrs	r3, r3, #29
1000b58e:	00d2      	lsls	r2, r2, #3
1000b590:	4313      	orrs	r3, r2
1000b592:	b29b      	uxth	r3, r3
1000b594:	682a      	ldr	r2, [r5, #0]
1000b596:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000b598:	682b      	ldr	r3, [r5, #0]
1000b59a:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000b59c:	682b      	ldr	r3, [r5, #0]
1000b59e:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000b5a0:	2000      	movs	r0, #0
1000b5a2:	bc0c      	pop	{r2, r3}
1000b5a4:	4690      	mov	r8, r2
1000b5a6:	4699      	mov	r9, r3
1000b5a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b5aa:	46c0      	nop			; (mov r8, r8)
1000b5ac:	40004000 	.word	0x40004000
1000b5b0:	1000ad5d 	.word	0x1000ad5d
1000b5b4:	1000a695 	.word	0x1000a695
1000b5b8:	10016ccc 	.word	0x10016ccc
1000b5bc:	1000b1d5 	.word	0x1000b1d5
1000b5c0:	1000b1c5 	.word	0x1000b1c5
1000b5c4:	1000b25d 	.word	0x1000b25d
1000b5c8:	e000e100 	.word	0xe000e100
1000b5cc:	40005000 	.word	0x40005000
1000b5d0:	1000b2e9 	.word	0x1000b2e9
1000b5d4:	1000b371 	.word	0x1000b371
1000b5d8:	1000a689 	.word	0x1000a689
1000b5dc:	10011135 	.word	0x10011135
1000b5e0:	1000a2e5 	.word	0x1000a2e5

1000b5e4 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000b5e4:	6802      	ldr	r2, [r0, #0]
1000b5e6:	2001      	movs	r0, #1
1000b5e8:	7913      	ldrb	r3, [r2, #4]
1000b5ea:	4203      	tst	r3, r0
1000b5ec:	d0fc      	beq.n	1000b5e8 <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000b5ee:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000b5f0:	2000      	movs	r0, #0
1000b5f2:	4770      	bx	lr

1000b5f4 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000b5f4:	6802      	ldr	r2, [r0, #0]
1000b5f6:	2001      	movs	r0, #1
1000b5f8:	7d13      	ldrb	r3, [r2, #20]
1000b5fa:	4203      	tst	r3, r0
1000b5fc:	d0fc      	beq.n	1000b5f8 <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000b5fe:	7c13      	ldrb	r3, [r2, #16]
1000b600:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000b602:	2000      	movs	r0, #0
1000b604:	4770      	bx	lr
1000b606:	46c0      	nop			; (mov r8, r8)

1000b608 <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000b608:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000b60a:	2a00      	cmp	r2, #0
1000b60c:	d00d      	beq.n	1000b62a <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000b60e:	330b      	adds	r3, #11
1000b610:	5cc3      	ldrb	r3, [r0, r3]
1000b612:	b2db      	uxtb	r3, r3
1000b614:	2b05      	cmp	r3, #5
1000b616:	d008      	beq.n	1000b62a <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000b618:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000b61a:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000b61c:	2205      	movs	r2, #5
1000b61e:	2322      	movs	r3, #34	; 0x22
1000b620:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000b622:	6803      	ldr	r3, [r0, #0]
1000b624:	3a04      	subs	r2, #4
1000b626:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000b628:	2300      	movs	r3, #0
}
1000b62a:	0018      	movs	r0, r3
1000b62c:	4770      	bx	lr
1000b62e:	46c0      	nop			; (mov r8, r8)

1000b630 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000b630:	0093      	lsls	r3, r2, #2
1000b632:	18c3      	adds	r3, r0, r3
1000b634:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000b636:	2120      	movs	r1, #32
1000b638:	2301      	movs	r3, #1
1000b63a:	4093      	lsls	r3, r2
1000b63c:	5c42      	ldrb	r2, [r0, r1]
1000b63e:	4313      	orrs	r3, r2
1000b640:	5443      	strb	r3, [r0, r1]
}
1000b642:	4770      	bx	lr

1000b644 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b644:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000b646:	2221      	movs	r2, #33	; 0x21
1000b648:	2301      	movs	r3, #1
1000b64a:	408b      	lsls	r3, r1
1000b64c:	5c84      	ldrb	r4, [r0, r2]
1000b64e:	4323      	orrs	r3, r4
1000b650:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000b652:	2901      	cmp	r1, #1
1000b654:	d104      	bne.n	1000b660 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b656:	6802      	ldr	r2, [r0, #0]
1000b658:	7a11      	ldrb	r1, [r2, #8]
1000b65a:	2320      	movs	r3, #32
1000b65c:	430b      	orrs	r3, r1
1000b65e:	7213      	strb	r3, [r2, #8]
	}
}
1000b660:	bd10      	pop	{r4, pc}
1000b662:	46c0      	nop			; (mov r8, r8)

1000b664 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000b664:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000b666:	2201      	movs	r2, #1
1000b668:	408a      	lsls	r2, r1
1000b66a:	2421      	movs	r4, #33	; 0x21
1000b66c:	5d03      	ldrb	r3, [r0, r4]
1000b66e:	4393      	bics	r3, r2
1000b670:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000b672:	2901      	cmp	r1, #1
1000b674:	d104      	bne.n	1000b680 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000b676:	6802      	ldr	r2, [r0, #0]
1000b678:	7a13      	ldrb	r3, [r2, #8]
1000b67a:	311f      	adds	r1, #31
1000b67c:	438b      	bics	r3, r1
1000b67e:	7213      	strb	r3, [r2, #8]
	}

}
1000b680:	bd10      	pop	{r4, pc}
1000b682:	46c0      	nop			; (mov r8, r8)

1000b684 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000b684:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b686:	4647      	mov	r7, r8
1000b688:	b480      	push	{r7}
1000b68a:	000c      	movs	r4, r1
1000b68c:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000b68e:	2800      	cmp	r0, #0
1000b690:	d10d      	bne.n	1000b6ae <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000b692:	2a00      	cmp	r2, #0
1000b694:	dd0e      	ble.n	1000b6b4 <_read+0x30>
1000b696:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000b698:	4e08      	ldr	r6, [pc, #32]	; (1000b6bc <_read+0x38>)
1000b69a:	4d09      	ldr	r5, [pc, #36]	; (1000b6c0 <_read+0x3c>)
1000b69c:	6830      	ldr	r0, [r6, #0]
1000b69e:	0021      	movs	r1, r4
1000b6a0:	682b      	ldr	r3, [r5, #0]
1000b6a2:	4798      	blx	r3
		ptr++;
1000b6a4:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000b6a6:	42a7      	cmp	r7, r4
1000b6a8:	d1f8      	bne.n	1000b69c <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000b6aa:	4640      	mov	r0, r8
1000b6ac:	e003      	b.n	1000b6b6 <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000b6ae:	2001      	movs	r0, #1
1000b6b0:	4240      	negs	r0, r0
1000b6b2:	e000      	b.n	1000b6b6 <_read+0x32>
	}

	for (; len > 0; --len) {
1000b6b4:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000b6b6:	bc04      	pop	{r2}
1000b6b8:	4690      	mov	r8, r2
1000b6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b6bc:	10016cdc 	.word	0x10016cdc
1000b6c0:	10016cd4 	.word	0x10016cd4

1000b6c4 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000b6c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000b6c6:	4647      	mov	r7, r8
1000b6c8:	b480      	push	{r7}
1000b6ca:	000e      	movs	r6, r1
1000b6cc:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000b6ce:	3801      	subs	r0, #1
1000b6d0:	2802      	cmp	r0, #2
1000b6d2:	d811      	bhi.n	1000b6f8 <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000b6d4:	2a00      	cmp	r2, #0
1000b6d6:	d012      	beq.n	1000b6fe <_write+0x3a>
1000b6d8:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000b6da:	4b0c      	ldr	r3, [pc, #48]	; (1000b70c <_write+0x48>)
1000b6dc:	4698      	mov	r8, r3
1000b6de:	4f0c      	ldr	r7, [pc, #48]	; (1000b710 <_write+0x4c>)
1000b6e0:	4643      	mov	r3, r8
1000b6e2:	6818      	ldr	r0, [r3, #0]
1000b6e4:	5d31      	ldrb	r1, [r6, r4]
1000b6e6:	683b      	ldr	r3, [r7, #0]
1000b6e8:	4798      	blx	r3
1000b6ea:	2800      	cmp	r0, #0
1000b6ec:	db09      	blt.n	1000b702 <_write+0x3e>
			return -1;
		}
		++nChars;
1000b6ee:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000b6f0:	42a5      	cmp	r5, r4
1000b6f2:	d1f5      	bne.n	1000b6e0 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000b6f4:	0020      	movs	r0, r4
1000b6f6:	e006      	b.n	1000b706 <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000b6f8:	2001      	movs	r0, #1
1000b6fa:	4240      	negs	r0, r0
1000b6fc:	e003      	b.n	1000b706 <_write+0x42>
	}

	for (; len != 0; --len) {
1000b6fe:	2000      	movs	r0, #0
1000b700:	e001      	b.n	1000b706 <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000b702:	2001      	movs	r0, #1
1000b704:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000b706:	bc04      	pop	{r2}
1000b708:	4690      	mov	r8, r2
1000b70a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000b70c:	10016cdc 	.word	0x10016cdc
1000b710:	10016cd8 	.word	0x10016cd8

1000b714 <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
1000b714:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
1000b716:	4a06      	ldr	r2, [pc, #24]	; (1000b730 <_sbrk+0x1c>)
1000b718:	6812      	ldr	r2, [r2, #0]
1000b71a:	2a00      	cmp	r2, #0
1000b71c:	d102      	bne.n	1000b724 <_sbrk+0x10>
		heap = (unsigned char *)&_end;
1000b71e:	4905      	ldr	r1, [pc, #20]	; (1000b734 <_sbrk+0x20>)
1000b720:	4a03      	ldr	r2, [pc, #12]	; (1000b730 <_sbrk+0x1c>)
1000b722:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000b724:	4a02      	ldr	r2, [pc, #8]	; (1000b730 <_sbrk+0x1c>)
1000b726:	6810      	ldr	r0, [r2, #0]

	heap += incr;
1000b728:	18c3      	adds	r3, r0, r3
1000b72a:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
1000b72c:	4770      	bx	lr
1000b72e:	46c0      	nop			; (mov r8, r8)
1000b730:	10015024 	.word	0x10015024
1000b734:	100195e8 	.word	0x100195e8

1000b738 <_close>:
}

extern int _close(int file)
{
	return -1;
}
1000b738:	2001      	movs	r0, #1
1000b73a:	4240      	negs	r0, r0
1000b73c:	4770      	bx	lr
1000b73e:	46c0      	nop			; (mov r8, r8)

1000b740 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
1000b740:	2380      	movs	r3, #128	; 0x80
1000b742:	019b      	lsls	r3, r3, #6
1000b744:	604b      	str	r3, [r1, #4]

	return 0;
}
1000b746:	2000      	movs	r0, #0
1000b748:	4770      	bx	lr
1000b74a:	46c0      	nop			; (mov r8, r8)

1000b74c <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
1000b74c:	2001      	movs	r0, #1
1000b74e:	4770      	bx	lr

1000b750 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
1000b750:	2000      	movs	r0, #0
1000b752:	4770      	bx	lr

1000b754 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000b754:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000b756:	4804      	ldr	r0, [pc, #16]	; (1000b768 <ble_undefined_event_handler+0x14>)
1000b758:	4b04      	ldr	r3, [pc, #16]	; (1000b76c <ble_undefined_event_handler+0x18>)
1000b75a:	4798      	blx	r3
1000b75c:	4804      	ldr	r0, [pc, #16]	; (1000b770 <ble_undefined_event_handler+0x1c>)
1000b75e:	4b05      	ldr	r3, [pc, #20]	; (1000b774 <ble_undefined_event_handler+0x20>)
1000b760:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000b762:	2000      	movs	r0, #0
1000b764:	bd10      	pop	{r4, pc}
1000b766:	46c0      	nop			; (mov r8, r8)
1000b768:	10013464 	.word	0x10013464
1000b76c:	100123d9 	.word	0x100123d9
1000b770:	100141e4 	.word	0x100141e4
1000b774:	100122b9 	.word	0x100122b9

1000b778 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000b778:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000b77a:	7800      	ldrb	r0, [r0, #0]
1000b77c:	2800      	cmp	r0, #0
1000b77e:	d006      	beq.n	1000b78e <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000b780:	4803      	ldr	r0, [pc, #12]	; (1000b790 <ble_scan_report_handler+0x18>)
1000b782:	4b04      	ldr	r3, [pc, #16]	; (1000b794 <ble_scan_report_handler+0x1c>)
1000b784:	4798      	blx	r3
1000b786:	4804      	ldr	r0, [pc, #16]	; (1000b798 <ble_scan_report_handler+0x20>)
1000b788:	4b04      	ldr	r3, [pc, #16]	; (1000b79c <ble_scan_report_handler+0x24>)
1000b78a:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000b78c:	20e2      	movs	r0, #226	; 0xe2
}
1000b78e:	bd10      	pop	{r4, pc}
1000b790:	10013464 	.word	0x10013464
1000b794:	100123d9 	.word	0x100123d9
1000b798:	10014200 	.word	0x10014200
1000b79c:	100122b9 	.word	0x100122b9

1000b7a0 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000b7a0:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000b7a2:	7800      	ldrb	r0, [r0, #0]
1000b7a4:	2800      	cmp	r0, #0
1000b7a6:	d006      	beq.n	1000b7b6 <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000b7a8:	4803      	ldr	r0, [pc, #12]	; (1000b7b8 <ble_adv_report_handler+0x18>)
1000b7aa:	4b04      	ldr	r3, [pc, #16]	; (1000b7bc <ble_adv_report_handler+0x1c>)
1000b7ac:	4798      	blx	r3
1000b7ae:	4804      	ldr	r0, [pc, #16]	; (1000b7c0 <ble_adv_report_handler+0x20>)
1000b7b0:	4b04      	ldr	r3, [pc, #16]	; (1000b7c4 <ble_adv_report_handler+0x24>)
1000b7b2:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000b7b4:	20e2      	movs	r0, #226	; 0xe2
}
1000b7b6:	bd10      	pop	{r4, pc}
1000b7b8:	10013464 	.word	0x10013464
1000b7bc:	100123d9 	.word	0x100123d9
1000b7c0:	10014214 	.word	0x10014214
1000b7c4:	100122b9 	.word	0x100122b9

1000b7c8 <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000b7c8:	b510      	push	{r4, lr}
1000b7ca:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000b7cc:	4804      	ldr	r0, [pc, #16]	; (1000b7e0 <ble_mtu_changed_indication_handler+0x18>)
1000b7ce:	4b05      	ldr	r3, [pc, #20]	; (1000b7e4 <ble_mtu_changed_indication_handler+0x1c>)
1000b7d0:	4798      	blx	r3
1000b7d2:	8862      	ldrh	r2, [r4, #2]
1000b7d4:	8821      	ldrh	r1, [r4, #0]
1000b7d6:	4804      	ldr	r0, [pc, #16]	; (1000b7e8 <ble_mtu_changed_indication_handler+0x20>)
1000b7d8:	4b04      	ldr	r3, [pc, #16]	; (1000b7ec <ble_mtu_changed_indication_handler+0x24>)
1000b7da:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000b7dc:	2000      	movs	r0, #0
1000b7de:	bd10      	pop	{r4, pc}
1000b7e0:	10013464 	.word	0x10013464
1000b7e4:	100123d9 	.word	0x100123d9
1000b7e8:	10014228 	.word	0x10014228
1000b7ec:	100122b9 	.word	0x100122b9

1000b7f0 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000b7f0:	b570      	push	{r4, r5, r6, lr}
1000b7f2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b7f4:	78c5      	ldrb	r5, [r0, #3]
1000b7f6:	2d00      	cmp	r5, #0
1000b7f8:	d108      	bne.n	1000b80c <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000b7fa:	480a      	ldr	r0, [pc, #40]	; (1000b824 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000b7fc:	4b0a      	ldr	r3, [pc, #40]	; (1000b828 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000b7fe:	4798      	blx	r3
1000b800:	78a2      	ldrb	r2, [r4, #2]
1000b802:	8821      	ldrh	r1, [r4, #0]
1000b804:	4809      	ldr	r0, [pc, #36]	; (1000b82c <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000b806:	4b0a      	ldr	r3, [pc, #40]	; (1000b830 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000b808:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000b80a:	e008      	b.n	1000b81e <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000b80c:	4805      	ldr	r0, [pc, #20]	; (1000b824 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000b80e:	4b06      	ldr	r3, [pc, #24]	; (1000b828 <ble_mtu_changed_cmd_complete_handler+0x38>)
1000b810:	4798      	blx	r3
1000b812:	78a2      	ldrb	r2, [r4, #2]
1000b814:	8821      	ldrh	r1, [r4, #0]
1000b816:	4807      	ldr	r0, [pc, #28]	; (1000b834 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000b818:	4b05      	ldr	r3, [pc, #20]	; (1000b830 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000b81a:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b81c:	25e2      	movs	r5, #226	; 0xe2
}
1000b81e:	0028      	movs	r0, r5
1000b820:	bd70      	pop	{r4, r5, r6, pc}
1000b822:	46c0      	nop			; (mov r8, r8)
1000b824:	10013464 	.word	0x10013464
1000b828:	100123d9 	.word	0x100123d9
1000b82c:	10014260 	.word	0x10014260
1000b830:	100122b9 	.word	0x100122b9
1000b834:	10014290 	.word	0x10014290

1000b838 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000b838:	b570      	push	{r4, r5, r6, lr}
1000b83a:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000b83c:	78c5      	ldrb	r5, [r0, #3]
1000b83e:	2d00      	cmp	r5, #0
1000b840:	d108      	bne.n	1000b854 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000b842:	480a      	ldr	r0, [pc, #40]	; (1000b86c <ble_characteristic_write_cmd_complete_handler+0x34>)
1000b844:	4b0a      	ldr	r3, [pc, #40]	; (1000b870 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000b846:	4798      	blx	r3
1000b848:	78a2      	ldrb	r2, [r4, #2]
1000b84a:	8821      	ldrh	r1, [r4, #0]
1000b84c:	4809      	ldr	r0, [pc, #36]	; (1000b874 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000b84e:	4b0a      	ldr	r3, [pc, #40]	; (1000b878 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000b850:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000b852:	e008      	b.n	1000b866 <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000b854:	4805      	ldr	r0, [pc, #20]	; (1000b86c <ble_characteristic_write_cmd_complete_handler+0x34>)
1000b856:	4b06      	ldr	r3, [pc, #24]	; (1000b870 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000b858:	4798      	blx	r3
1000b85a:	78a2      	ldrb	r2, [r4, #2]
1000b85c:	8821      	ldrh	r1, [r4, #0]
1000b85e:	4807      	ldr	r0, [pc, #28]	; (1000b87c <ble_characteristic_write_cmd_complete_handler+0x44>)
1000b860:	4b05      	ldr	r3, [pc, #20]	; (1000b878 <ble_characteristic_write_cmd_complete_handler+0x40>)
1000b862:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000b864:	25e2      	movs	r5, #226	; 0xe2
}
1000b866:	0028      	movs	r0, r5
1000b868:	bd70      	pop	{r4, r5, r6, pc}
1000b86a:	46c0      	nop			; (mov r8, r8)
1000b86c:	10013464 	.word	0x10013464
1000b870:	100123d9 	.word	0x100123d9
1000b874:	100142c8 	.word	0x100142c8
1000b878:	100122b9 	.word	0x100122b9
1000b87c:	10014304 	.word	0x10014304

1000b880 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000b880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b882:	0006      	movs	r6, r0
1000b884:	4c1d      	ldr	r4, [pc, #116]	; (1000b8fc <ble_disconnected_state_handler+0x7c>)
1000b886:	239b      	movs	r3, #155	; 0x9b
1000b888:	009b      	lsls	r3, r3, #2
1000b88a:	18e7      	adds	r7, r4, r3
1000b88c:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b88e:	0023      	movs	r3, r4
1000b890:	3b56      	subs	r3, #86	; 0x56
1000b892:	881a      	ldrh	r2, [r3, #0]
1000b894:	8833      	ldrh	r3, [r6, #0]
1000b896:	429a      	cmp	r2, r3
1000b898:	d122      	bne.n	1000b8e0 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b89a:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000b89c:	2b05      	cmp	r3, #5
1000b89e:	d001      	beq.n	1000b8a4 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000b8a0:	2b08      	cmp	r3, #8
1000b8a2:	d102      	bne.n	1000b8aa <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000b8a4:	2301      	movs	r3, #1
1000b8a6:	702b      	strb	r3, [r5, #0]
1000b8a8:	e01a      	b.n	1000b8e0 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000b8aa:	2b07      	cmp	r3, #7
1000b8ac:	d80f      	bhi.n	1000b8ce <ble_disconnected_state_handler+0x4e>
1000b8ae:	009b      	lsls	r3, r3, #2
1000b8b0:	4a13      	ldr	r2, [pc, #76]	; (1000b900 <ble_disconnected_state_handler+0x80>)
1000b8b2:	58d3      	ldr	r3, [r2, r3]
1000b8b4:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b8b6:	2300      	movs	r3, #0
1000b8b8:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000b8ba:	4b12      	ldr	r3, [pc, #72]	; (1000b904 <ble_disconnected_state_handler+0x84>)
1000b8bc:	781b      	ldrb	r3, [r3, #0]
1000b8be:	2b00      	cmp	r3, #0
1000b8c0:	d00e      	beq.n	1000b8e0 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000b8c2:	4a10      	ldr	r2, [pc, #64]	; (1000b904 <ble_disconnected_state_handler+0x84>)
1000b8c4:	7813      	ldrb	r3, [r2, #0]
1000b8c6:	3b01      	subs	r3, #1
1000b8c8:	b2db      	uxtb	r3, r3
1000b8ca:	7013      	strb	r3, [r2, #0]
1000b8cc:	e008      	b.n	1000b8e0 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000b8ce:	480e      	ldr	r0, [pc, #56]	; (1000b908 <ble_disconnected_state_handler+0x88>)
1000b8d0:	4b0e      	ldr	r3, [pc, #56]	; (1000b90c <ble_disconnected_state_handler+0x8c>)
1000b8d2:	4798      	blx	r3
1000b8d4:	7829      	ldrb	r1, [r5, #0]
1000b8d6:	480e      	ldr	r0, [pc, #56]	; (1000b910 <ble_disconnected_state_handler+0x90>)
1000b8d8:	4b0e      	ldr	r3, [pc, #56]	; (1000b914 <ble_disconnected_state_handler+0x94>)
1000b8da:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000b8dc:	2300      	movs	r3, #0
1000b8de:	702b      	strb	r3, [r5, #0]
1000b8e0:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b8e2:	42bc      	cmp	r4, r7
1000b8e4:	d1d2      	bne.n	1000b88c <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000b8e6:	4808      	ldr	r0, [pc, #32]	; (1000b908 <ble_disconnected_state_handler+0x88>)
1000b8e8:	4b08      	ldr	r3, [pc, #32]	; (1000b90c <ble_disconnected_state_handler+0x8c>)
1000b8ea:	4798      	blx	r3
1000b8ec:	8832      	ldrh	r2, [r6, #0]
1000b8ee:	78b1      	ldrb	r1, [r6, #2]
1000b8f0:	4809      	ldr	r0, [pc, #36]	; (1000b918 <ble_disconnected_state_handler+0x98>)
1000b8f2:	4b08      	ldr	r3, [pc, #32]	; (1000b914 <ble_disconnected_state_handler+0x94>)
1000b8f4:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000b8f6:	2000      	movs	r0, #0
1000b8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b8fa:	46c0      	nop			; (mov r8, r8)
1000b8fc:	10016d56 	.word	0x10016d56
1000b900:	10014080 	.word	0x10014080
1000b904:	10016f64 	.word	0x10016f64
1000b908:	10013464 	.word	0x10013464
1000b90c:	100123d9 	.word	0x100123d9
1000b910:	10014340 	.word	0x10014340
1000b914:	100122b9 	.word	0x100122b9
1000b918:	10014358 	.word	0x10014358

1000b91c <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000b91c:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000b91e:	4804      	ldr	r0, [pc, #16]	; (1000b930 <ble_conn_param_update+0x14>)
1000b920:	4b04      	ldr	r3, [pc, #16]	; (1000b934 <ble_conn_param_update+0x18>)
1000b922:	4798      	blx	r3
1000b924:	4804      	ldr	r0, [pc, #16]	; (1000b938 <ble_conn_param_update+0x1c>)
1000b926:	4b05      	ldr	r3, [pc, #20]	; (1000b93c <ble_conn_param_update+0x20>)
1000b928:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000b92a:	2000      	movs	r0, #0
1000b92c:	bd10      	pop	{r4, pc}
1000b92e:	46c0      	nop			; (mov r8, r8)
1000b930:	10013464 	.word	0x10013464
1000b934:	100123d9 	.word	0x100123d9
1000b938:	10014388 	.word	0x10014388
1000b93c:	100122b9 	.word	0x100122b9

1000b940 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000b940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000b942:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b944:	8801      	ldrh	r1, [r0, #0]
1000b946:	4b28      	ldr	r3, [pc, #160]	; (1000b9e8 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b948:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000b94a:	891a      	ldrh	r2, [r3, #8]
1000b94c:	428a      	cmp	r2, r1
1000b94e:	d104      	bne.n	1000b95a <ble_encryption_status_change_handler+0x1a>
1000b950:	001a      	movs	r2, r3
1000b952:	325e      	adds	r2, #94	; 0x5e
1000b954:	7812      	ldrb	r2, [r2, #0]
1000b956:	2a06      	cmp	r2, #6
1000b958:	d02e      	beq.n	1000b9b8 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000b95a:	3401      	adds	r4, #1
1000b95c:	b2e4      	uxtb	r4, r4
1000b95e:	337c      	adds	r3, #124	; 0x7c
1000b960:	2c05      	cmp	r4, #5
1000b962:	d1f2      	bne.n	1000b94a <ble_encryption_status_change_handler+0xa>
1000b964:	e039      	b.n	1000b9da <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000b966:	4920      	ldr	r1, [pc, #128]	; (1000b9e8 <ble_encryption_status_change_handler+0xa8>)
1000b968:	0163      	lsls	r3, r4, #5
1000b96a:	1b1a      	subs	r2, r3, r4
1000b96c:	0092      	lsls	r2, r2, #2
1000b96e:	188a      	adds	r2, r1, r2
1000b970:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000b972:	0014      	movs	r4, r2
1000b974:	345e      	adds	r4, #94	; 0x5e
1000b976:	2307      	movs	r3, #7
1000b978:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000b97a:	481c      	ldr	r0, [pc, #112]	; (1000b9ec <ble_encryption_status_change_handler+0xac>)
1000b97c:	4b1c      	ldr	r3, [pc, #112]	; (1000b9f0 <ble_encryption_status_change_handler+0xb0>)
1000b97e:	4798      	blx	r3
1000b980:	481c      	ldr	r0, [pc, #112]	; (1000b9f4 <ble_encryption_status_change_handler+0xb4>)
1000b982:	4b1d      	ldr	r3, [pc, #116]	; (1000b9f8 <ble_encryption_status_change_handler+0xb8>)
1000b984:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000b986:	25e2      	movs	r5, #226	; 0xe2
1000b988:	e02b      	b.n	1000b9e2 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000b98a:	4818      	ldr	r0, [pc, #96]	; (1000b9ec <ble_encryption_status_change_handler+0xac>)
1000b98c:	4b18      	ldr	r3, [pc, #96]	; (1000b9f0 <ble_encryption_status_change_handler+0xb0>)
1000b98e:	4798      	blx	r3
1000b990:	481a      	ldr	r0, [pc, #104]	; (1000b9fc <ble_encryption_status_change_handler+0xbc>)
1000b992:	4b19      	ldr	r3, [pc, #100]	; (1000b9f8 <ble_encryption_status_change_handler+0xb8>)
1000b994:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000b996:	4914      	ldr	r1, [pc, #80]	; (1000b9e8 <ble_encryption_status_change_handler+0xa8>)
1000b998:	0163      	lsls	r3, r4, #5
1000b99a:	1b1a      	subs	r2, r3, r4
1000b99c:	0092      	lsls	r2, r2, #2
1000b99e:	188a      	adds	r2, r1, r2
1000b9a0:	0010      	movs	r0, r2
1000b9a2:	305e      	adds	r0, #94	; 0x5e
1000b9a4:	2708      	movs	r7, #8
1000b9a6:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000b9a8:	78f0      	ldrb	r0, [r6, #3]
1000b9aa:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000b9ac:	78b2      	ldrb	r2, [r6, #2]
1000b9ae:	1b1c      	subs	r4, r3, r4
1000b9b0:	00a4      	lsls	r4, r4, #2
1000b9b2:	190c      	adds	r4, r1, r4
1000b9b4:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000b9b6:	e014      	b.n	1000b9e2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b9b8:	78b5      	ldrb	r5, [r6, #2]
1000b9ba:	2d00      	cmp	r5, #0
1000b9bc:	d0e5      	beq.n	1000b98a <ble_encryption_status_change_handler+0x4a>
1000b9be:	e7d2      	b.n	1000b966 <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000b9c0:	4e0a      	ldr	r6, [pc, #40]	; (1000b9ec <ble_encryption_status_change_handler+0xac>)
1000b9c2:	0030      	movs	r0, r6
1000b9c4:	4d0a      	ldr	r5, [pc, #40]	; (1000b9f0 <ble_encryption_status_change_handler+0xb0>)
1000b9c6:	47a8      	blx	r5
1000b9c8:	480c      	ldr	r0, [pc, #48]	; (1000b9fc <ble_encryption_status_change_handler+0xbc>)
1000b9ca:	4c0b      	ldr	r4, [pc, #44]	; (1000b9f8 <ble_encryption_status_change_handler+0xb8>)
1000b9cc:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000b9ce:	0030      	movs	r0, r6
1000b9d0:	47a8      	blx	r5
1000b9d2:	480b      	ldr	r0, [pc, #44]	; (1000ba00 <ble_encryption_status_change_handler+0xc0>)
1000b9d4:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000b9d6:	25e2      	movs	r5, #226	; 0xe2
1000b9d8:	e003      	b.n	1000b9e2 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000b9da:	78b5      	ldrb	r5, [r6, #2]
1000b9dc:	2d00      	cmp	r5, #0
1000b9de:	d1c2      	bne.n	1000b966 <ble_encryption_status_change_handler+0x26>
1000b9e0:	e7ee      	b.n	1000b9c0 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000b9e2:	0028      	movs	r0, r5
1000b9e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000b9e6:	46c0      	nop			; (mov r8, r8)
1000b9e8:	10016cf8 	.word	0x10016cf8
1000b9ec:	10013464 	.word	0x10013464
1000b9f0:	100123d9 	.word	0x100123d9
1000b9f4:	100143a4 	.word	0x100143a4
1000b9f8:	100122b9 	.word	0x100122b9
1000b9fc:	100143b8 	.word	0x100143b8
1000ba00:	100143dc 	.word	0x100143dc

1000ba04 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000ba04:	b530      	push	{r4, r5, lr}
1000ba06:	b085      	sub	sp, #20
1000ba08:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000ba0a:	4b1f      	ldr	r3, [pc, #124]	; (1000ba88 <ble_scan_info_handler+0x84>)
1000ba0c:	781b      	ldrb	r3, [r3, #0]
1000ba0e:	b2db      	uxtb	r3, r3
1000ba10:	2b13      	cmp	r3, #19
1000ba12:	d824      	bhi.n	1000ba5e <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000ba14:	4d1c      	ldr	r5, [pc, #112]	; (1000ba88 <ble_scan_info_handler+0x84>)
1000ba16:	782b      	ldrb	r3, [r5, #0]
1000ba18:	b2db      	uxtb	r3, r3
1000ba1a:	0098      	lsls	r0, r3, #2
1000ba1c:	18c0      	adds	r0, r0, r3
1000ba1e:	00c0      	lsls	r0, r0, #3
1000ba20:	18c3      	adds	r3, r0, r3
1000ba22:	481a      	ldr	r0, [pc, #104]	; (1000ba8c <ble_scan_info_handler+0x88>)
1000ba24:	1818      	adds	r0, r3, r0
1000ba26:	2229      	movs	r2, #41	; 0x29
1000ba28:	0021      	movs	r1, r4
1000ba2a:	4b19      	ldr	r3, [pc, #100]	; (1000ba90 <ble_scan_info_handler+0x8c>)
1000ba2c:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000ba2e:	4819      	ldr	r0, [pc, #100]	; (1000ba94 <ble_scan_info_handler+0x90>)
1000ba30:	4b19      	ldr	r3, [pc, #100]	; (1000ba98 <ble_scan_info_handler+0x94>)
1000ba32:	4798      	blx	r3
1000ba34:	7829      	ldrb	r1, [r5, #0]
1000ba36:	b2c9      	uxtb	r1, r1
1000ba38:	79a3      	ldrb	r3, [r4, #6]
1000ba3a:	79e2      	ldrb	r2, [r4, #7]
1000ba3c:	78a0      	ldrb	r0, [r4, #2]
1000ba3e:	9003      	str	r0, [sp, #12]
1000ba40:	78e0      	ldrb	r0, [r4, #3]
1000ba42:	9002      	str	r0, [sp, #8]
1000ba44:	7920      	ldrb	r0, [r4, #4]
1000ba46:	9001      	str	r0, [sp, #4]
1000ba48:	7960      	ldrb	r0, [r4, #5]
1000ba4a:	9000      	str	r0, [sp, #0]
1000ba4c:	4813      	ldr	r0, [pc, #76]	; (1000ba9c <ble_scan_info_handler+0x98>)
1000ba4e:	4c14      	ldr	r4, [pc, #80]	; (1000baa0 <ble_scan_info_handler+0x9c>)
1000ba50:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000ba52:	782b      	ldrb	r3, [r5, #0]
1000ba54:	3301      	adds	r3, #1
1000ba56:	b2db      	uxtb	r3, r3
1000ba58:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000ba5a:	2300      	movs	r3, #0
1000ba5c:	e011      	b.n	1000ba82 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000ba5e:	480d      	ldr	r0, [pc, #52]	; (1000ba94 <ble_scan_info_handler+0x90>)
1000ba60:	4b0d      	ldr	r3, [pc, #52]	; (1000ba98 <ble_scan_info_handler+0x94>)
1000ba62:	4798      	blx	r3
1000ba64:	480f      	ldr	r0, [pc, #60]	; (1000baa4 <ble_scan_info_handler+0xa0>)
1000ba66:	4b0e      	ldr	r3, [pc, #56]	; (1000baa0 <ble_scan_info_handler+0x9c>)
1000ba68:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000ba6a:	4b0f      	ldr	r3, [pc, #60]	; (1000baa8 <ble_scan_info_handler+0xa4>)
1000ba6c:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000ba6e:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000ba70:	2800      	cmp	r0, #0
1000ba72:	d006      	beq.n	1000ba82 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000ba74:	4807      	ldr	r0, [pc, #28]	; (1000ba94 <ble_scan_info_handler+0x90>)
1000ba76:	4b08      	ldr	r3, [pc, #32]	; (1000ba98 <ble_scan_info_handler+0x94>)
1000ba78:	4798      	blx	r3
1000ba7a:	480c      	ldr	r0, [pc, #48]	; (1000baac <ble_scan_info_handler+0xa8>)
1000ba7c:	4b08      	ldr	r3, [pc, #32]	; (1000baa0 <ble_scan_info_handler+0x9c>)
1000ba7e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000ba80:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000ba82:	0018      	movs	r0, r3
1000ba84:	b005      	add	sp, #20
1000ba86:	bd30      	pop	{r4, r5, pc}
1000ba88:	1001590c 	.word	0x1001590c
1000ba8c:	10016fdc 	.word	0x10016fdc
1000ba90:	10012297 	.word	0x10012297
1000ba94:	10013464 	.word	0x10013464
1000ba98:	100123d9 	.word	0x100123d9
1000ba9c:	10014404 	.word	0x10014404
1000baa0:	100122b9 	.word	0x100122b9
1000baa4:	10014440 	.word	0x10014440
1000baa8:	1000ea49 	.word	0x1000ea49
1000baac:	10014478 	.word	0x10014478

1000bab0 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000bab0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bab2:	465f      	mov	r7, fp
1000bab4:	4656      	mov	r6, sl
1000bab6:	464d      	mov	r5, r9
1000bab8:	4644      	mov	r4, r8
1000baba:	b4f0      	push	{r4, r5, r6, r7}
1000babc:	b083      	sub	sp, #12
1000babe:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bac0:	8841      	ldrh	r1, [r0, #2]
1000bac2:	4b59      	ldr	r3, [pc, #356]	; (1000bc28 <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bac4:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000bac6:	891a      	ldrh	r2, [r3, #8]
1000bac8:	428a      	cmp	r2, r1
1000baca:	d105      	bne.n	1000bad8 <ble_pair_done_handler+0x28>
1000bacc:	001a      	movs	r2, r3
1000bace:	325e      	adds	r2, #94	; 0x5e
1000bad0:	7812      	ldrb	r2, [r2, #0]
1000bad2:	2a03      	cmp	r2, #3
1000bad4:	d100      	bne.n	1000bad8 <ble_pair_done_handler+0x28>
1000bad6:	e09a      	b.n	1000bc0e <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bad8:	3401      	adds	r4, #1
1000bada:	b2e4      	uxtb	r4, r4
1000badc:	337c      	adds	r3, #124	; 0x7c
1000bade:	2c05      	cmp	r4, #5
1000bae0:	d1f1      	bne.n	1000bac6 <ble_pair_done_handler+0x16>
1000bae2:	e057      	b.n	1000bb94 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000bae4:	7821      	ldrb	r1, [r4, #0]
1000bae6:	0030      	movs	r0, r6
1000bae8:	47b8      	blx	r7
1000baea:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000baec:	454c      	cmp	r4, r9
1000baee:	d1f9      	bne.n	1000bae4 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000baf0:	484e      	ldr	r0, [pc, #312]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000baf2:	4b4f      	ldr	r3, [pc, #316]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000baf4:	4798      	blx	r3
1000baf6:	484f      	ldr	r0, [pc, #316]	; (1000bc34 <ble_pair_done_handler+0x184>)
1000baf8:	4b4f      	ldr	r3, [pc, #316]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bafa:	4798      	blx	r3
1000bafc:	002e      	movs	r6, r5
1000bafe:	3622      	adds	r6, #34	; 0x22
1000bb00:	002c      	movs	r4, r5
1000bb02:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000bb04:	4f4c      	ldr	r7, [pc, #304]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb06:	7831      	ldrb	r1, [r6, #0]
1000bb08:	484c      	ldr	r0, [pc, #304]	; (1000bc3c <ble_pair_done_handler+0x18c>)
1000bb0a:	47b8      	blx	r7
1000bb0c:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000bb0e:	42a6      	cmp	r6, r4
1000bb10:	d1f9      	bne.n	1000bb06 <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000bb12:	4846      	ldr	r0, [pc, #280]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bb14:	4b46      	ldr	r3, [pc, #280]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000bb16:	4798      	blx	r3
1000bb18:	4849      	ldr	r0, [pc, #292]	; (1000bc40 <ble_pair_done_handler+0x190>)
1000bb1a:	4b47      	ldr	r3, [pc, #284]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb1c:	4798      	blx	r3
1000bb1e:	3542      	adds	r5, #66	; 0x42
1000bb20:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000bb22:	4e46      	ldr	r6, [pc, #280]	; (1000bc3c <ble_pair_done_handler+0x18c>)
1000bb24:	4d44      	ldr	r5, [pc, #272]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb26:	7821      	ldrb	r1, [r4, #0]
1000bb28:	0030      	movs	r0, r6
1000bb2a:	47a8      	blx	r5
1000bb2c:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000bb2e:	42bc      	cmp	r4, r7
1000bb30:	d1f9      	bne.n	1000bb26 <ble_pair_done_handler+0x76>
1000bb32:	e071      	b.n	1000bc18 <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000bb34:	0163      	lsls	r3, r4, #5
1000bb36:	1b1c      	subs	r4, r3, r4
1000bb38:	00a4      	lsls	r4, r4, #2
1000bb3a:	4b3b      	ldr	r3, [pc, #236]	; (1000bc28 <ble_pair_done_handler+0x178>)
1000bb3c:	191c      	adds	r4, r3, r4
1000bb3e:	345e      	adds	r4, #94	; 0x5e
1000bb40:	7823      	ldrb	r3, [r4, #0]
1000bb42:	2b01      	cmp	r3, #1
1000bb44:	d915      	bls.n	1000bb72 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000bb46:	4839      	ldr	r0, [pc, #228]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bb48:	4b39      	ldr	r3, [pc, #228]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000bb4a:	4798      	blx	r3
1000bb4c:	483d      	ldr	r0, [pc, #244]	; (1000bc44 <ble_pair_done_handler+0x194>)
1000bb4e:	4b3a      	ldr	r3, [pc, #232]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb50:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000bb52:	8868      	ldrh	r0, [r5, #2]
1000bb54:	2113      	movs	r1, #19
1000bb56:	4b3c      	ldr	r3, [pc, #240]	; (1000bc48 <ble_pair_done_handler+0x198>)
1000bb58:	4798      	blx	r3
1000bb5a:	9001      	str	r0, [sp, #4]
1000bb5c:	2800      	cmp	r0, #0
1000bb5e:	d05b      	beq.n	1000bc18 <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000bb60:	4832      	ldr	r0, [pc, #200]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bb62:	4b33      	ldr	r3, [pc, #204]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000bb64:	4798      	blx	r3
1000bb66:	4839      	ldr	r0, [pc, #228]	; (1000bc4c <ble_pair_done_handler+0x19c>)
1000bb68:	4b33      	ldr	r3, [pc, #204]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb6a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000bb6c:	23e2      	movs	r3, #226	; 0xe2
1000bb6e:	9301      	str	r3, [sp, #4]
1000bb70:	e052      	b.n	1000bc18 <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000bb72:	2300      	movs	r3, #0
1000bb74:	9301      	str	r3, [sp, #4]
1000bb76:	e04f      	b.n	1000bc18 <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bb78:	4e2c      	ldr	r6, [pc, #176]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bb7a:	0030      	movs	r0, r6
1000bb7c:	4d2c      	ldr	r5, [pc, #176]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000bb7e:	47a8      	blx	r5
1000bb80:	4833      	ldr	r0, [pc, #204]	; (1000bc50 <ble_pair_done_handler+0x1a0>)
1000bb82:	4c2d      	ldr	r4, [pc, #180]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bb84:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000bb86:	0030      	movs	r0, r6
1000bb88:	47a8      	blx	r5
1000bb8a:	4832      	ldr	r0, [pc, #200]	; (1000bc54 <ble_pair_done_handler+0x1a4>)
1000bb8c:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000bb8e:	23e2      	movs	r3, #226	; 0xe2
1000bb90:	9301      	str	r3, [sp, #4]
1000bb92:	e041      	b.n	1000bc18 <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bb94:	792b      	ldrb	r3, [r5, #4]
1000bb96:	2b00      	cmp	r3, #0
1000bb98:	d1cc      	bne.n	1000bb34 <ble_pair_done_handler+0x84>
1000bb9a:	e7ed      	b.n	1000bb78 <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000bb9c:	4823      	ldr	r0, [pc, #140]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bb9e:	4b24      	ldr	r3, [pc, #144]	; (1000bc30 <ble_pair_done_handler+0x180>)
1000bba0:	469b      	mov	fp, r3
1000bba2:	4798      	blx	r3
1000bba4:	482a      	ldr	r0, [pc, #168]	; (1000bc50 <ble_pair_done_handler+0x1a0>)
1000bba6:	4b24      	ldr	r3, [pc, #144]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bba8:	469a      	mov	sl, r3
1000bbaa:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000bbac:	782a      	ldrb	r2, [r5, #0]
1000bbae:	4b1e      	ldr	r3, [pc, #120]	; (1000bc28 <ble_pair_done_handler+0x178>)
1000bbb0:	4698      	mov	r8, r3
1000bbb2:	0167      	lsls	r7, r4, #5
1000bbb4:	1b3b      	subs	r3, r7, r4
1000bbb6:	009b      	lsls	r3, r3, #2
1000bbb8:	4443      	add	r3, r8
1000bbba:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000bbbc:	792a      	ldrb	r2, [r5, #4]
1000bbbe:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000bbc0:	335e      	adds	r3, #94	; 0x5e
1000bbc2:	2205      	movs	r2, #5
1000bbc4:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000bbc6:	1b38      	subs	r0, r7, r4
1000bbc8:	0080      	lsls	r0, r0, #2
1000bbca:	4440      	add	r0, r8
1000bbcc:	3036      	adds	r0, #54	; 0x36
1000bbce:	320b      	adds	r2, #11
1000bbd0:	0029      	movs	r1, r5
1000bbd2:	3122      	adds	r1, #34	; 0x22
1000bbd4:	4b20      	ldr	r3, [pc, #128]	; (1000bc58 <ble_pair_done_handler+0x1a8>)
1000bbd6:	4699      	mov	r9, r3
1000bbd8:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000bbda:	1b38      	subs	r0, r7, r4
1000bbdc:	0080      	lsls	r0, r0, #2
1000bbde:	4440      	add	r0, r8
1000bbe0:	3046      	adds	r0, #70	; 0x46
1000bbe2:	2217      	movs	r2, #23
1000bbe4:	0029      	movs	r1, r5
1000bbe6:	3132      	adds	r1, #50	; 0x32
1000bbe8:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000bbea:	1b38      	subs	r0, r7, r4
1000bbec:	0080      	lsls	r0, r0, #2
1000bbee:	4440      	add	r0, r8
1000bbf0:	301a      	adds	r0, #26
1000bbf2:	1dac      	adds	r4, r5, #6
1000bbf4:	221c      	movs	r2, #28
1000bbf6:	0021      	movs	r1, r4
1000bbf8:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000bbfa:	480c      	ldr	r0, [pc, #48]	; (1000bc2c <ble_pair_done_handler+0x17c>)
1000bbfc:	47d8      	blx	fp
1000bbfe:	4817      	ldr	r0, [pc, #92]	; (1000bc5c <ble_pair_done_handler+0x1ac>)
1000bc00:	47d0      	blx	sl
1000bc02:	2316      	movs	r3, #22
1000bc04:	4699      	mov	r9, r3
1000bc06:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000bc08:	4e0c      	ldr	r6, [pc, #48]	; (1000bc3c <ble_pair_done_handler+0x18c>)
1000bc0a:	4f0b      	ldr	r7, [pc, #44]	; (1000bc38 <ble_pair_done_handler+0x188>)
1000bc0c:	e76a      	b.n	1000bae4 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000bc0e:	792b      	ldrb	r3, [r5, #4]
1000bc10:	9301      	str	r3, [sp, #4]
1000bc12:	2b00      	cmp	r3, #0
1000bc14:	d0c2      	beq.n	1000bb9c <ble_pair_done_handler+0xec>
1000bc16:	e78d      	b.n	1000bb34 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000bc18:	9801      	ldr	r0, [sp, #4]
1000bc1a:	b003      	add	sp, #12
1000bc1c:	bc3c      	pop	{r2, r3, r4, r5}
1000bc1e:	4690      	mov	r8, r2
1000bc20:	4699      	mov	r9, r3
1000bc22:	46a2      	mov	sl, r4
1000bc24:	46ab      	mov	fp, r5
1000bc26:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bc28:	10016cf8 	.word	0x10016cf8
1000bc2c:	10013464 	.word	0x10013464
1000bc30:	100123d9 	.word	0x100123d9
1000bc34:	1001449c 	.word	0x1001449c
1000bc38:	100122b9 	.word	0x100122b9
1000bc3c:	10014490 	.word	0x10014490
1000bc40:	100144a4 	.word	0x100144a4
1000bc44:	100144ac 	.word	0x100144ac
1000bc48:	1000ea69 	.word	0x1000ea69
1000bc4c:	100144cc 	.word	0x100144cc
1000bc50:	100144e8 	.word	0x100144e8
1000bc54:	10014514 	.word	0x10014514
1000bc58:	10012297 	.word	0x10012297
1000bc5c:	10014544 	.word	0x10014544

1000bc60 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000bc60:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000bc62:	8800      	ldrh	r0, [r0, #0]
1000bc64:	2378      	movs	r3, #120	; 0x78
1000bc66:	2201      	movs	r2, #1
1000bc68:	2101      	movs	r1, #1
1000bc6a:	4c02      	ldr	r4, [pc, #8]	; (1000bc74 <ble_conn_param_update_req+0x14>)
1000bc6c:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000bc6e:	2000      	movs	r0, #0
1000bc70:	bd10      	pop	{r4, pc}
1000bc72:	46c0      	nop			; (mov r8, r8)
1000bc74:	1000ea89 	.word	0x1000ea89

1000bc78 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000bc78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bc7a:	4657      	mov	r7, sl
1000bc7c:	464e      	mov	r6, r9
1000bc7e:	4645      	mov	r5, r8
1000bc80:	b4e0      	push	{r5, r6, r7}
1000bc82:	b084      	sub	sp, #16
1000bc84:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000bc86:	2209      	movs	r2, #9
1000bc88:	2100      	movs	r1, #0
1000bc8a:	a801      	add	r0, sp, #4
1000bc8c:	4b6a      	ldr	r3, [pc, #424]	; (1000be38 <ble_slave_security_request_handler+0x1c0>)
1000bc8e:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bc90:	8825      	ldrh	r5, [r4, #0]
1000bc92:	496a      	ldr	r1, [pc, #424]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bc94:	000a      	movs	r2, r1
1000bc96:	2300      	movs	r3, #0
1000bc98:	8910      	ldrh	r0, [r2, #8]
1000bc9a:	42a8      	cmp	r0, r5
1000bc9c:	d116      	bne.n	1000bccc <ble_slave_security_request_handler+0x54>
1000bc9e:	0010      	movs	r0, r2
1000bca0:	305e      	adds	r0, #94	; 0x5e
1000bca2:	7800      	ldrb	r0, [r0, #0]
1000bca4:	2802      	cmp	r0, #2
1000bca6:	d111      	bne.n	1000bccc <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000bca8:	4864      	ldr	r0, [pc, #400]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bcaa:	015a      	lsls	r2, r3, #5
1000bcac:	1ad6      	subs	r6, r2, r3
1000bcae:	00b6      	lsls	r6, r6, #2
1000bcb0:	1986      	adds	r6, r0, r6
1000bcb2:	365e      	adds	r6, #94	; 0x5e
1000bcb4:	2206      	movs	r2, #6
1000bcb6:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000bcb8:	32f9      	adds	r2, #249	; 0xf9
1000bcba:	4013      	ands	r3, r2
1000bcbc:	015a      	lsls	r2, r3, #5
1000bcbe:	1ad2      	subs	r2, r2, r3
1000bcc0:	0092      	lsls	r2, r2, #2
1000bcc2:	1882      	adds	r2, r0, r2
1000bcc4:	7d12      	ldrb	r2, [r2, #20]
1000bcc6:	07d0      	lsls	r0, r2, #31
1000bcc8:	d405      	bmi.n	1000bcd6 <ble_slave_security_request_handler+0x5e>
1000bcca:	e01b      	b.n	1000bd04 <ble_slave_security_request_handler+0x8c>
1000bccc:	3301      	adds	r3, #1
1000bcce:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bcd0:	2b05      	cmp	r3, #5
1000bcd2:	d1e1      	bne.n	1000bc98 <ble_slave_security_request_handler+0x20>
1000bcd4:	e01e      	b.n	1000bd14 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000bcd6:	78e0      	ldrb	r0, [r4, #3]
1000bcd8:	2800      	cmp	r0, #0
1000bcda:	d013      	beq.n	1000bd04 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000bcdc:	0159      	lsls	r1, r3, #5
1000bcde:	1ac9      	subs	r1, r1, r3
1000bce0:	008b      	lsls	r3, r1, #2
1000bce2:	4956      	ldr	r1, [pc, #344]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bce4:	18c9      	adds	r1, r1, r3
1000bce6:	311a      	adds	r1, #26
1000bce8:	8820      	ldrh	r0, [r4, #0]
1000bcea:	4b55      	ldr	r3, [pc, #340]	; (1000be40 <ble_slave_security_request_handler+0x1c8>)
1000bcec:	4798      	blx	r3
1000bcee:	2800      	cmp	r0, #0
1000bcf0:	d100      	bne.n	1000bcf4 <ble_slave_security_request_handler+0x7c>
1000bcf2:	e09b      	b.n	1000be2c <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000bcf4:	4853      	ldr	r0, [pc, #332]	; (1000be44 <ble_slave_security_request_handler+0x1cc>)
1000bcf6:	4b54      	ldr	r3, [pc, #336]	; (1000be48 <ble_slave_security_request_handler+0x1d0>)
1000bcf8:	4798      	blx	r3
1000bcfa:	4854      	ldr	r0, [pc, #336]	; (1000be4c <ble_slave_security_request_handler+0x1d4>)
1000bcfc:	4b54      	ldr	r3, [pc, #336]	; (1000be50 <ble_slave_security_request_handler+0x1d8>)
1000bcfe:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000bd00:	20e2      	movs	r0, #226	; 0xe2
1000bd02:	e093      	b.n	1000be2c <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000bd04:	015a      	lsls	r2, r3, #5
1000bd06:	1ad3      	subs	r3, r2, r3
1000bd08:	009b      	lsls	r3, r3, #2
1000bd0a:	4a4c      	ldr	r2, [pc, #304]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bd0c:	18d3      	adds	r3, r2, r3
1000bd0e:	335e      	adds	r3, #94	; 0x5e
1000bd10:	2202      	movs	r2, #2
1000bd12:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bd14:	8825      	ldrh	r5, [r4, #0]
1000bd16:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd18:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000bd1a:	0016      	movs	r6, r2
1000bd1c:	8908      	ldrh	r0, [r1, #8]
1000bd1e:	42a8      	cmp	r0, r5
1000bd20:	d10d      	bne.n	1000bd3e <ble_slave_security_request_handler+0xc6>
1000bd22:	0008      	movs	r0, r1
1000bd24:	305e      	adds	r0, #94	; 0x5e
1000bd26:	7800      	ldrb	r0, [r0, #0]
1000bd28:	2802      	cmp	r0, #2
1000bd2a:	d108      	bne.n	1000bd3e <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000bd2c:	0152      	lsls	r2, r2, #5
1000bd2e:	1b92      	subs	r2, r2, r6
1000bd30:	0096      	lsls	r6, r2, #2
1000bd32:	4a42      	ldr	r2, [pc, #264]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bd34:	1992      	adds	r2, r2, r6
1000bd36:	325e      	adds	r2, #94	; 0x5e
1000bd38:	2103      	movs	r1, #3
1000bd3a:	7011      	strb	r1, [r2, #0]
			break;
1000bd3c:	e005      	b.n	1000bd4a <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000bd3e:	3301      	adds	r3, #1
1000bd40:	b2db      	uxtb	r3, r3
1000bd42:	3201      	adds	r2, #1
1000bd44:	317c      	adds	r1, #124	; 0x7c
1000bd46:	2b05      	cmp	r3, #5
1000bd48:	d1e7      	bne.n	1000bd1a <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000bd4a:	aa01      	add	r2, sp, #4
1000bd4c:	78e1      	ldrb	r1, [r4, #3]
1000bd4e:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000bd50:	2101      	movs	r1, #1
1000bd52:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000bd54:	3103      	adds	r1, #3
1000bd56:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000bd58:	001f      	movs	r7, r3
1000bd5a:	015a      	lsls	r2, r3, #5
1000bd5c:	1ad2      	subs	r2, r2, r3
1000bd5e:	0092      	lsls	r2, r2, #2
1000bd60:	4936      	ldr	r1, [pc, #216]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bd62:	5c52      	ldrb	r2, [r2, r1]
1000bd64:	2a02      	cmp	r2, #2
1000bd66:	d104      	bne.n	1000bd72 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bd68:	aa01      	add	r2, sp, #4
1000bd6a:	2103      	movs	r1, #3
1000bd6c:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bd6e:	71d1      	strb	r1, [r2, #7]
1000bd70:	e003      	b.n	1000bd7a <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000bd72:	aa01      	add	r2, sp, #4
1000bd74:	2101      	movs	r1, #1
1000bd76:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000bd78:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000bd7a:	aa01      	add	r2, sp, #4
1000bd7c:	2110      	movs	r1, #16
1000bd7e:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000bd80:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000bd82:	017a      	lsls	r2, r7, #5
1000bd84:	1bd2      	subs	r2, r2, r7
1000bd86:	0092      	lsls	r2, r2, #2
1000bd88:	492c      	ldr	r1, [pc, #176]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bd8a:	188a      	adds	r2, r1, r2
1000bd8c:	7e12      	ldrb	r2, [r2, #24]
1000bd8e:	2a40      	cmp	r2, #64	; 0x40
1000bd90:	d134      	bne.n	1000bdfc <ble_slave_security_request_handler+0x184>
1000bd92:	015a      	lsls	r2, r3, #5
1000bd94:	1ad3      	subs	r3, r2, r3
1000bd96:	009b      	lsls	r3, r3, #2
1000bd98:	469a      	mov	sl, r3
1000bd9a:	001e      	movs	r6, r3
1000bd9c:	3660      	adds	r6, #96	; 0x60
1000bd9e:	1876      	adds	r6, r6, r1
1000bda0:	4655      	mov	r5, sl
1000bda2:	3568      	adds	r5, #104	; 0x68
1000bda4:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bda6:	4b2b      	ldr	r3, [pc, #172]	; (1000be54 <ble_slave_security_request_handler+0x1dc>)
1000bda8:	4699      	mov	r9, r3
1000bdaa:	230f      	movs	r3, #15
1000bdac:	4698      	mov	r8, r3
1000bdae:	47c8      	blx	r9
1000bdb0:	4643      	mov	r3, r8
1000bdb2:	4018      	ands	r0, r3
1000bdb4:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000bdb6:	47c8      	blx	r9
1000bdb8:	4643      	mov	r3, r8
1000bdba:	4018      	ands	r0, r3
1000bdbc:	74b0      	strb	r0, [r6, #18]
1000bdbe:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000bdc0:	42ae      	cmp	r6, r5
1000bdc2:	d1f4      	bne.n	1000bdae <ble_slave_security_request_handler+0x136>
1000bdc4:	4656      	mov	r6, sl
1000bdc6:	3670      	adds	r6, #112	; 0x70
1000bdc8:	4a1c      	ldr	r2, [pc, #112]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bdca:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bdcc:	4b21      	ldr	r3, [pc, #132]	; (1000be54 <ble_slave_security_request_handler+0x1dc>)
1000bdce:	4699      	mov	r9, r3
1000bdd0:	230f      	movs	r3, #15
1000bdd2:	4698      	mov	r8, r3
1000bdd4:	47c8      	blx	r9
1000bdd6:	4643      	mov	r3, r8
1000bdd8:	4018      	ands	r0, r3
1000bdda:	7028      	strb	r0, [r5, #0]
1000bddc:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bdde:	42b5      	cmp	r5, r6
1000bde0:	d1f8      	bne.n	1000bdd4 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bde2:	4b1c      	ldr	r3, [pc, #112]	; (1000be54 <ble_slave_security_request_handler+0x1dc>)
1000bde4:	4798      	blx	r3
1000bde6:	017b      	lsls	r3, r7, #5
1000bde8:	1bdb      	subs	r3, r3, r7
1000bdea:	009b      	lsls	r3, r3, #2
1000bdec:	4a13      	ldr	r2, [pc, #76]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000bdee:	18d3      	adds	r3, r2, r3
1000bdf0:	001a      	movs	r2, r3
1000bdf2:	3270      	adds	r2, #112	; 0x70
1000bdf4:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000bdf6:	337a      	adds	r3, #122	; 0x7a
1000bdf8:	2210      	movs	r2, #16
1000bdfa:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000bdfc:	017a      	lsls	r2, r7, #5
1000bdfe:	1bd7      	subs	r7, r2, r7
1000be00:	00bf      	lsls	r7, r7, #2
1000be02:	3760      	adds	r7, #96	; 0x60
1000be04:	4a0d      	ldr	r2, [pc, #52]	; (1000be3c <ble_slave_security_request_handler+0x1c4>)
1000be06:	18ba      	adds	r2, r7, r2
1000be08:	8820      	ldrh	r0, [r4, #0]
1000be0a:	2300      	movs	r3, #0
1000be0c:	a901      	add	r1, sp, #4
1000be0e:	4c12      	ldr	r4, [pc, #72]	; (1000be58 <ble_slave_security_request_handler+0x1e0>)
1000be10:	47a0      	blx	r4
1000be12:	2800      	cmp	r0, #0
1000be14:	d00a      	beq.n	1000be2c <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000be16:	ab01      	add	r3, sp, #4
1000be18:	2200      	movs	r2, #0
1000be1a:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000be1c:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000be1e:	4809      	ldr	r0, [pc, #36]	; (1000be44 <ble_slave_security_request_handler+0x1cc>)
1000be20:	4b09      	ldr	r3, [pc, #36]	; (1000be48 <ble_slave_security_request_handler+0x1d0>)
1000be22:	4798      	blx	r3
1000be24:	480d      	ldr	r0, [pc, #52]	; (1000be5c <ble_slave_security_request_handler+0x1e4>)
1000be26:	4b0a      	ldr	r3, [pc, #40]	; (1000be50 <ble_slave_security_request_handler+0x1d8>)
1000be28:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000be2a:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000be2c:	b004      	add	sp, #16
1000be2e:	bc1c      	pop	{r2, r3, r4}
1000be30:	4690      	mov	r8, r2
1000be32:	4699      	mov	r9, r3
1000be34:	46a2      	mov	sl, r4
1000be36:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000be38:	100122a9 	.word	0x100122a9
1000be3c:	10016cf8 	.word	0x10016cf8
1000be40:	1000f64d 	.word	0x1000f64d
1000be44:	10013464 	.word	0x10013464
1000be48:	100123d9 	.word	0x100123d9
1000be4c:	1001454c 	.word	0x1001454c
1000be50:	100122b9 	.word	0x100122b9
1000be54:	100123ed 	.word	0x100123ed
1000be58:	1000f461 	.word	0x1000f461
1000be5c:	10014564 	.word	0x10014564

1000be60 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000be60:	b5f0      	push	{r4, r5, r6, r7, lr}
1000be62:	465f      	mov	r7, fp
1000be64:	4656      	mov	r6, sl
1000be66:	464d      	mov	r5, r9
1000be68:	4644      	mov	r4, r8
1000be6a:	b4f0      	push	{r4, r5, r6, r7}
1000be6c:	b085      	sub	sp, #20
1000be6e:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000be70:	8804      	ldrh	r4, [r0, #0]
1000be72:	4a54      	ldr	r2, [pc, #336]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000be74:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be76:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000be78:	8910      	ldrh	r0, [r2, #8]
1000be7a:	42a0      	cmp	r0, r4
1000be7c:	d10d      	bne.n	1000be9a <ble_pair_request_handler+0x3a>
1000be7e:	0010      	movs	r0, r2
1000be80:	305e      	adds	r0, #94	; 0x5e
1000be82:	7800      	ldrb	r0, [r0, #0]
1000be84:	2802      	cmp	r0, #2
1000be86:	d108      	bne.n	1000be9a <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000be88:	014a      	lsls	r2, r1, #5
1000be8a:	1a52      	subs	r2, r2, r1
1000be8c:	0095      	lsls	r5, r2, #2
1000be8e:	4a4d      	ldr	r2, [pc, #308]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000be90:	1952      	adds	r2, r2, r5
1000be92:	325e      	adds	r2, #94	; 0x5e
1000be94:	2103      	movs	r1, #3
1000be96:	7011      	strb	r1, [r2, #0]
			break;
1000be98:	e005      	b.n	1000bea6 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000be9a:	3301      	adds	r3, #1
1000be9c:	b2db      	uxtb	r3, r3
1000be9e:	3101      	adds	r1, #1
1000bea0:	327c      	adds	r2, #124	; 0x7c
1000bea2:	2b05      	cmp	r3, #5
1000bea4:	d1e8      	bne.n	1000be78 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000bea6:	aa01      	add	r2, sp, #4
1000bea8:	2100      	movs	r1, #0
1000beaa:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000beac:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000beae:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000beb0:	2003      	movs	r0, #3
1000beb2:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000beb4:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000beb6:	001e      	movs	r6, r3
1000beb8:	015a      	lsls	r2, r3, #5
1000beba:	1ad2      	subs	r2, r2, r3
1000bebc:	0092      	lsls	r2, r2, #2
1000bebe:	4941      	ldr	r1, [pc, #260]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000bec0:	5c52      	ldrb	r2, [r2, r1]
1000bec2:	2a02      	cmp	r2, #2
1000bec4:	d104      	bne.n	1000bed0 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000bec6:	aa01      	add	r2, sp, #4
1000bec8:	2103      	movs	r1, #3
1000beca:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000becc:	71d1      	strb	r1, [r2, #7]
1000bece:	e003      	b.n	1000bed8 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000bed0:	aa01      	add	r2, sp, #4
1000bed2:	2101      	movs	r1, #1
1000bed4:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000bed6:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000bed8:	aa01      	add	r2, sp, #4
1000beda:	2110      	movs	r1, #16
1000bedc:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000bede:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000bee0:	0172      	lsls	r2, r6, #5
1000bee2:	1b92      	subs	r2, r2, r6
1000bee4:	0092      	lsls	r2, r2, #2
1000bee6:	4937      	ldr	r1, [pc, #220]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000bee8:	188a      	adds	r2, r1, r2
1000beea:	7e12      	ldrb	r2, [r2, #24]
1000beec:	2a40      	cmp	r2, #64	; 0x40
1000beee:	d142      	bne.n	1000bf76 <ble_pair_request_handler+0x116>
1000bef0:	015f      	lsls	r7, r3, #5
1000bef2:	1afb      	subs	r3, r7, r3
1000bef4:	009b      	lsls	r3, r3, #2
1000bef6:	469b      	mov	fp, r3
1000bef8:	001c      	movs	r4, r3
1000befa:	3460      	adds	r4, #96	; 0x60
1000befc:	1864      	adds	r4, r4, r1
1000befe:	465d      	mov	r5, fp
1000bf00:	3568      	adds	r5, #104	; 0x68
1000bf02:	186d      	adds	r5, r5, r1
1000bf04:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bf06:	4b30      	ldr	r3, [pc, #192]	; (1000bfc8 <ble_pair_request_handler+0x168>)
1000bf08:	469a      	mov	sl, r3
1000bf0a:	230f      	movs	r3, #15
1000bf0c:	4699      	mov	r9, r3
1000bf0e:	47d0      	blx	sl
1000bf10:	464b      	mov	r3, r9
1000bf12:	4018      	ands	r0, r3
1000bf14:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000bf16:	47d0      	blx	sl
1000bf18:	464b      	mov	r3, r9
1000bf1a:	4018      	ands	r0, r3
1000bf1c:	74b8      	strb	r0, [r7, #18]
1000bf1e:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000bf20:	42af      	cmp	r7, r5
1000bf22:	d1f4      	bne.n	1000bf0e <ble_pair_request_handler+0xae>
1000bf24:	465b      	mov	r3, fp
1000bf26:	3370      	adds	r3, #112	; 0x70
1000bf28:	4f26      	ldr	r7, [pc, #152]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000bf2a:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000bf2c:	4b26      	ldr	r3, [pc, #152]	; (1000bfc8 <ble_pair_request_handler+0x168>)
1000bf2e:	469a      	mov	sl, r3
1000bf30:	230f      	movs	r3, #15
1000bf32:	4699      	mov	r9, r3
1000bf34:	47d0      	blx	sl
1000bf36:	464b      	mov	r3, r9
1000bf38:	4018      	ands	r0, r3
1000bf3a:	7028      	strb	r0, [r5, #0]
1000bf3c:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000bf3e:	42bd      	cmp	r5, r7
1000bf40:	d1f8      	bne.n	1000bf34 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000bf42:	4822      	ldr	r0, [pc, #136]	; (1000bfcc <ble_pair_request_handler+0x16c>)
1000bf44:	4b22      	ldr	r3, [pc, #136]	; (1000bfd0 <ble_pair_request_handler+0x170>)
1000bf46:	4798      	blx	r3
1000bf48:	4822      	ldr	r0, [pc, #136]	; (1000bfd4 <ble_pair_request_handler+0x174>)
1000bf4a:	4b23      	ldr	r3, [pc, #140]	; (1000bfd8 <ble_pair_request_handler+0x178>)
1000bf4c:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000bf4e:	4d22      	ldr	r5, [pc, #136]	; (1000bfd8 <ble_pair_request_handler+0x178>)
1000bf50:	7821      	ldrb	r1, [r4, #0]
1000bf52:	4822      	ldr	r0, [pc, #136]	; (1000bfdc <ble_pair_request_handler+0x17c>)
1000bf54:	47a8      	blx	r5
1000bf56:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000bf58:	42bc      	cmp	r4, r7
1000bf5a:	d1f9      	bne.n	1000bf50 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000bf5c:	4b1a      	ldr	r3, [pc, #104]	; (1000bfc8 <ble_pair_request_handler+0x168>)
1000bf5e:	4798      	blx	r3
1000bf60:	0173      	lsls	r3, r6, #5
1000bf62:	1b9b      	subs	r3, r3, r6
1000bf64:	009b      	lsls	r3, r3, #2
1000bf66:	4a17      	ldr	r2, [pc, #92]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000bf68:	18d3      	adds	r3, r2, r3
1000bf6a:	001a      	movs	r2, r3
1000bf6c:	3270      	adds	r2, #112	; 0x70
1000bf6e:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000bf70:	337a      	adds	r3, #122	; 0x7a
1000bf72:	2210      	movs	r2, #16
1000bf74:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000bf76:	4815      	ldr	r0, [pc, #84]	; (1000bfcc <ble_pair_request_handler+0x16c>)
1000bf78:	4b15      	ldr	r3, [pc, #84]	; (1000bfd0 <ble_pair_request_handler+0x170>)
1000bf7a:	4798      	blx	r3
1000bf7c:	4818      	ldr	r0, [pc, #96]	; (1000bfe0 <ble_pair_request_handler+0x180>)
1000bf7e:	4b16      	ldr	r3, [pc, #88]	; (1000bfd8 <ble_pair_request_handler+0x178>)
1000bf80:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000bf82:	0173      	lsls	r3, r6, #5
1000bf84:	1b9b      	subs	r3, r3, r6
1000bf86:	009b      	lsls	r3, r3, #2
1000bf88:	3360      	adds	r3, #96	; 0x60
1000bf8a:	4a0e      	ldr	r2, [pc, #56]	; (1000bfc4 <ble_pair_request_handler+0x164>)
1000bf8c:	189a      	adds	r2, r3, r2
1000bf8e:	4643      	mov	r3, r8
1000bf90:	8818      	ldrh	r0, [r3, #0]
1000bf92:	2300      	movs	r3, #0
1000bf94:	a901      	add	r1, sp, #4
1000bf96:	4c13      	ldr	r4, [pc, #76]	; (1000bfe4 <ble_pair_request_handler+0x184>)
1000bf98:	47a0      	blx	r4
1000bf9a:	2800      	cmp	r0, #0
1000bf9c:	d00a      	beq.n	1000bfb4 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000bf9e:	ab01      	add	r3, sp, #4
1000bfa0:	2200      	movs	r2, #0
1000bfa2:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000bfa4:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000bfa6:	4809      	ldr	r0, [pc, #36]	; (1000bfcc <ble_pair_request_handler+0x16c>)
1000bfa8:	4b09      	ldr	r3, [pc, #36]	; (1000bfd0 <ble_pair_request_handler+0x170>)
1000bfaa:	4798      	blx	r3
1000bfac:	480e      	ldr	r0, [pc, #56]	; (1000bfe8 <ble_pair_request_handler+0x188>)
1000bfae:	4b0a      	ldr	r3, [pc, #40]	; (1000bfd8 <ble_pair_request_handler+0x178>)
1000bfb0:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000bfb2:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000bfb4:	b005      	add	sp, #20
1000bfb6:	bc3c      	pop	{r2, r3, r4, r5}
1000bfb8:	4690      	mov	r8, r2
1000bfba:	4699      	mov	r9, r3
1000bfbc:	46a2      	mov	sl, r4
1000bfbe:	46ab      	mov	fp, r5
1000bfc0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000bfc2:	46c0      	nop			; (mov r8, r8)
1000bfc4:	10016cf8 	.word	0x10016cf8
1000bfc8:	100123ed 	.word	0x100123ed
1000bfcc:	10013464 	.word	0x10013464
1000bfd0:	100123d9 	.word	0x100123d9
1000bfd4:	10014590 	.word	0x10014590
1000bfd8:	100122b9 	.word	0x100122b9
1000bfdc:	100145a0 	.word	0x100145a0
1000bfe0:	100145a8 	.word	0x100145a8
1000bfe4:	1000f461 	.word	0x1000f461
1000bfe8:	100145c4 	.word	0x100145c4

1000bfec <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000bfec:	b5f0      	push	{r4, r5, r6, r7, lr}
1000bfee:	b085      	sub	sp, #20
1000bff0:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000bff2:	2206      	movs	r2, #6
1000bff4:	493d      	ldr	r1, [pc, #244]	; (1000c0ec <ble_pair_key_request_handler+0x100>)
1000bff6:	a802      	add	r0, sp, #8
1000bff8:	4e3d      	ldr	r6, [pc, #244]	; (1000c0f0 <ble_pair_key_request_handler+0x104>)
1000bffa:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000bffc:	ac01      	add	r4, sp, #4
1000bffe:	2204      	movs	r2, #4
1000c000:	0029      	movs	r1, r5
1000c002:	0020      	movs	r0, r4
1000c004:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c006:	78e3      	ldrb	r3, [r4, #3]
1000c008:	2b00      	cmp	r3, #0
1000c00a:	d162      	bne.n	1000c0d2 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c00c:	4839      	ldr	r0, [pc, #228]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c00e:	4b3a      	ldr	r3, [pc, #232]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c010:	4798      	blx	r3
1000c012:	483a      	ldr	r0, [pc, #232]	; (1000c0fc <ble_pair_key_request_handler+0x110>)
1000c014:	4b3a      	ldr	r3, [pc, #232]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c016:	4798      	blx	r3
1000c018:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c01a:	4c3a      	ldr	r4, [pc, #232]	; (1000c104 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c01c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c01e:	201e      	movs	r0, #30
1000c020:	47a0      	blx	r4
1000c022:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c024:	2b00      	cmp	r3, #0
1000c026:	d11a      	bne.n	1000c05e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c028:	4f32      	ldr	r7, [pc, #200]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c02a:	0038      	movs	r0, r7
1000c02c:	4e32      	ldr	r6, [pc, #200]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c02e:	47b0      	blx	r6
1000c030:	4835      	ldr	r0, [pc, #212]	; (1000c108 <ble_pair_key_request_handler+0x11c>)
1000c032:	4c33      	ldr	r4, [pc, #204]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c034:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c036:	0038      	movs	r0, r7
1000c038:	47b0      	blx	r6
1000c03a:	4834      	ldr	r0, [pc, #208]	; (1000c10c <ble_pair_key_request_handler+0x120>)
1000c03c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c03e:	8828      	ldrh	r0, [r5, #0]
1000c040:	2113      	movs	r1, #19
1000c042:	4b33      	ldr	r3, [pc, #204]	; (1000c110 <ble_pair_key_request_handler+0x124>)
1000c044:	4798      	blx	r3
1000c046:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c048:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c04a:	2b00      	cmp	r3, #0
1000c04c:	d04c      	beq.n	1000c0e8 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c04e:	4829      	ldr	r0, [pc, #164]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c050:	4b29      	ldr	r3, [pc, #164]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c052:	4798      	blx	r3
1000c054:	482f      	ldr	r0, [pc, #188]	; (1000c114 <ble_pair_key_request_handler+0x128>)
1000c056:	4b2a      	ldr	r3, [pc, #168]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c058:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c05a:	20e2      	movs	r0, #226	; 0xe2
1000c05c:	e044      	b.n	1000c0e8 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c05e:	001a      	movs	r2, r3
1000c060:	3a30      	subs	r2, #48	; 0x30
1000c062:	2a09      	cmp	r2, #9
1000c064:	d8db      	bhi.n	1000c01e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c066:	aa02      	add	r2, sp, #8
1000c068:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c06a:	4038      	ands	r0, r7
1000c06c:	4b2a      	ldr	r3, [pc, #168]	; (1000c118 <ble_pair_key_request_handler+0x12c>)
1000c06e:	4798      	blx	r3
1000c070:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c072:	2e06      	cmp	r6, #6
1000c074:	d026      	beq.n	1000c0c4 <ble_pair_key_request_handler+0xd8>
1000c076:	e7d2      	b.n	1000c01e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c078:	481e      	ldr	r0, [pc, #120]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c07a:	4b1f      	ldr	r3, [pc, #124]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c07c:	4798      	blx	r3
1000c07e:	4827      	ldr	r0, [pc, #156]	; (1000c11c <ble_pair_key_request_handler+0x130>)
1000c080:	4b1f      	ldr	r3, [pc, #124]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c082:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c084:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c086:	4e24      	ldr	r6, [pc, #144]	; (1000c118 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c088:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c08a:	5ce0      	ldrb	r0, [r4, r3]
1000c08c:	47b0      	blx	r6
1000c08e:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c090:	2c06      	cmp	r4, #6
1000c092:	d1f9      	bne.n	1000c088 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c094:	ab01      	add	r3, sp, #4
1000c096:	7899      	ldrb	r1, [r3, #2]
1000c098:	8828      	ldrh	r0, [r5, #0]
1000c09a:	aa02      	add	r2, sp, #8
1000c09c:	4b20      	ldr	r3, [pc, #128]	; (1000c120 <ble_pair_key_request_handler+0x134>)
1000c09e:	4798      	blx	r3
1000c0a0:	2800      	cmp	r0, #0
1000c0a2:	d021      	beq.n	1000c0e8 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c0a4:	4813      	ldr	r0, [pc, #76]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c0a6:	4b14      	ldr	r3, [pc, #80]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c0a8:	4798      	blx	r3
1000c0aa:	481e      	ldr	r0, [pc, #120]	; (1000c124 <ble_pair_key_request_handler+0x138>)
1000c0ac:	4b14      	ldr	r3, [pc, #80]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c0ae:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c0b0:	2000      	movs	r0, #0
1000c0b2:	e019      	b.n	1000c0e8 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c0b4:	480f      	ldr	r0, [pc, #60]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c0b6:	4b10      	ldr	r3, [pc, #64]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c0b8:	4798      	blx	r3
1000c0ba:	481b      	ldr	r0, [pc, #108]	; (1000c128 <ble_pair_key_request_handler+0x13c>)
1000c0bc:	4b10      	ldr	r3, [pc, #64]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c0be:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c0c0:	2000      	movs	r0, #0
1000c0c2:	e011      	b.n	1000c0e8 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c0c4:	480b      	ldr	r0, [pc, #44]	; (1000c0f4 <ble_pair_key_request_handler+0x108>)
1000c0c6:	4b0c      	ldr	r3, [pc, #48]	; (1000c0f8 <ble_pair_key_request_handler+0x10c>)
1000c0c8:	4798      	blx	r3
1000c0ca:	4818      	ldr	r0, [pc, #96]	; (1000c12c <ble_pair_key_request_handler+0x140>)
1000c0cc:	4b0c      	ldr	r3, [pc, #48]	; (1000c100 <ble_pair_key_request_handler+0x114>)
1000c0ce:	4798      	blx	r3
1000c0d0:	e7d8      	b.n	1000c084 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c0d2:	ab01      	add	r3, sp, #4
1000c0d4:	885a      	ldrh	r2, [r3, #2]
1000c0d6:	2380      	movs	r3, #128	; 0x80
1000c0d8:	005b      	lsls	r3, r3, #1
1000c0da:	429a      	cmp	r2, r3
1000c0dc:	d0cc      	beq.n	1000c078 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c0de:	ab01      	add	r3, sp, #4
1000c0e0:	789b      	ldrb	r3, [r3, #2]
1000c0e2:	2b01      	cmp	r3, #1
1000c0e4:	d0e6      	beq.n	1000c0b4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c0e6:	2000      	movs	r0, #0
}
1000c0e8:	b005      	add	sp, #20
1000c0ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0ec:	100141ac 	.word	0x100141ac
1000c0f0:	10012297 	.word	0x10012297
1000c0f4:	10013464 	.word	0x10013464
1000c0f8:	100123d9 	.word	0x100123d9
1000c0fc:	100145ec 	.word	0x100145ec
1000c100:	100122b9 	.word	0x100122b9
1000c104:	1000ce15 	.word	0x1000ce15
1000c108:	10014614 	.word	0x10014614
1000c10c:	10014620 	.word	0x10014620
1000c110:	1000ea69 	.word	0x1000ea69
1000c114:	100144cc 	.word	0x100144cc
1000c118:	100122ed 	.word	0x100122ed
1000c11c:	10014634 	.word	0x10014634
1000c120:	1000f591 	.word	0x1000f591
1000c124:	1001466c 	.word	0x1001466c
1000c128:	10014684 	.word	0x10014684
1000c12c:	100146a0 	.word	0x100146a0

1000c130 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c130:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c132:	465f      	mov	r7, fp
1000c134:	4656      	mov	r6, sl
1000c136:	464d      	mov	r5, r9
1000c138:	b4e0      	push	{r5, r6, r7}
1000c13a:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c13c:	8800      	ldrh	r0, [r0, #0]
1000c13e:	4b49      	ldr	r3, [pc, #292]	; (1000c264 <ble_encryption_request_handler+0x134>)
1000c140:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c142:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c144:	8919      	ldrh	r1, [r3, #8]
1000c146:	4281      	cmp	r1, r0
1000c148:	d137      	bne.n	1000c1ba <ble_encryption_request_handler+0x8a>
1000c14a:	0019      	movs	r1, r3
1000c14c:	315e      	adds	r1, #94	; 0x5e
1000c14e:	7809      	ldrb	r1, [r1, #0]
1000c150:	2901      	cmp	r1, #1
1000c152:	d932      	bls.n	1000c1ba <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c154:	4f43      	ldr	r7, [pc, #268]	; (1000c264 <ble_encryption_request_handler+0x134>)
1000c156:	0153      	lsls	r3, r2, #5
1000c158:	1a9d      	subs	r5, r3, r2
1000c15a:	00ad      	lsls	r5, r5, #2
1000c15c:	197d      	adds	r5, r7, r5
1000c15e:	355e      	adds	r5, #94	; 0x5e
1000c160:	2306      	movs	r3, #6
1000c162:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000c164:	4840      	ldr	r0, [pc, #256]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c166:	4b41      	ldr	r3, [pc, #260]	; (1000c26c <ble_encryption_request_handler+0x13c>)
1000c168:	469a      	mov	sl, r3
1000c16a:	4798      	blx	r3
1000c16c:	8831      	ldrh	r1, [r6, #0]
1000c16e:	4840      	ldr	r0, [pc, #256]	; (1000c270 <ble_encryption_request_handler+0x140>)
1000c170:	4b40      	ldr	r3, [pc, #256]	; (1000c274 <ble_encryption_request_handler+0x144>)
1000c172:	4699      	mov	r9, r3
1000c174:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000c176:	483c      	ldr	r0, [pc, #240]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c178:	47d0      	blx	sl
1000c17a:	0163      	lsls	r3, r4, #5
1000c17c:	1b1b      	subs	r3, r3, r4
1000c17e:	009b      	lsls	r3, r3, #2
1000c180:	18ff      	adds	r7, r7, r3
1000c182:	2370      	movs	r3, #112	; 0x70
1000c184:	469b      	mov	fp, r3
1000c186:	44bb      	add	fp, r7
1000c188:	465b      	mov	r3, fp
1000c18a:	8819      	ldrh	r1, [r3, #0]
1000c18c:	483a      	ldr	r0, [pc, #232]	; (1000c278 <ble_encryption_request_handler+0x148>)
1000c18e:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000c190:	4835      	ldr	r0, [pc, #212]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c192:	47d0      	blx	sl
1000c194:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000c196:	4839      	ldr	r0, [pc, #228]	; (1000c27c <ble_encryption_request_handler+0x14c>)
1000c198:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000c19a:	4833      	ldr	r0, [pc, #204]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c19c:	47d0      	blx	sl
1000c19e:	8871      	ldrh	r1, [r6, #2]
1000c1a0:	4837      	ldr	r0, [pc, #220]	; (1000c280 <ble_encryption_request_handler+0x150>)
1000c1a2:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000c1a4:	4830      	ldr	r0, [pc, #192]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c1a6:	47d0      	blx	sl
1000c1a8:	0021      	movs	r1, r4
1000c1aa:	4836      	ldr	r0, [pc, #216]	; (1000c284 <ble_encryption_request_handler+0x154>)
1000c1ac:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c1ae:	465b      	mov	r3, fp
1000c1b0:	881a      	ldrh	r2, [r3, #0]
1000c1b2:	8873      	ldrh	r3, [r6, #2]
1000c1b4:	429a      	cmp	r2, r3
1000c1b6:	d12a      	bne.n	1000c20e <ble_encryption_request_handler+0xde>
1000c1b8:	e006      	b.n	1000c1c8 <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c1ba:	3401      	adds	r4, #1
1000c1bc:	b2e4      	uxtb	r4, r4
1000c1be:	3201      	adds	r2, #1
1000c1c0:	337c      	adds	r3, #124	; 0x7c
1000c1c2:	2c05      	cmp	r4, #5
1000c1c4:	d1be      	bne.n	1000c144 <ble_encryption_request_handler+0x14>
1000c1c6:	e022      	b.n	1000c20e <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c1c8:	0161      	lsls	r1, r4, #5
1000c1ca:	1b09      	subs	r1, r1, r4
1000c1cc:	0089      	lsls	r1, r1, #2
1000c1ce:	4b25      	ldr	r3, [pc, #148]	; (1000c264 <ble_encryption_request_handler+0x134>)
1000c1d0:	1859      	adds	r1, r3, r1
1000c1d2:	3172      	adds	r1, #114	; 0x72
1000c1d4:	1d30      	adds	r0, r6, #4
1000c1d6:	2208      	movs	r2, #8
1000c1d8:	4b2b      	ldr	r3, [pc, #172]	; (1000c288 <ble_encryption_request_handler+0x158>)
1000c1da:	4798      	blx	r3
1000c1dc:	2800      	cmp	r0, #0
1000c1de:	d116      	bne.n	1000c20e <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000c1e0:	4821      	ldr	r0, [pc, #132]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c1e2:	4b22      	ldr	r3, [pc, #136]	; (1000c26c <ble_encryption_request_handler+0x13c>)
1000c1e4:	4798      	blx	r3
1000c1e6:	4829      	ldr	r0, [pc, #164]	; (1000c28c <ble_encryption_request_handler+0x15c>)
1000c1e8:	4b22      	ldr	r3, [pc, #136]	; (1000c274 <ble_encryption_request_handler+0x144>)
1000c1ea:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c1ec:	0162      	lsls	r2, r4, #5
1000c1ee:	1b13      	subs	r3, r2, r4
1000c1f0:	009b      	lsls	r3, r3, #2
1000c1f2:	3360      	adds	r3, #96	; 0x60
1000c1f4:	491b      	ldr	r1, [pc, #108]	; (1000c264 <ble_encryption_request_handler+0x134>)
1000c1f6:	185b      	adds	r3, r3, r1
1000c1f8:	1b12      	subs	r2, r2, r4
1000c1fa:	0092      	lsls	r2, r2, #2
1000c1fc:	188a      	adds	r2, r1, r2
1000c1fe:	7d11      	ldrb	r1, [r2, #20]
1000c200:	8830      	ldrh	r0, [r6, #0]
1000c202:	2201      	movs	r2, #1
1000c204:	4c22      	ldr	r4, [pc, #136]	; (1000c290 <ble_encryption_request_handler+0x160>)
1000c206:	47a0      	blx	r4
1000c208:	1e04      	subs	r4, r0, #0
1000c20a:	d01e      	beq.n	1000c24a <ble_encryption_request_handler+0x11a>
1000c20c:	e015      	b.n	1000c23a <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c20e:	4f16      	ldr	r7, [pc, #88]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c210:	0038      	movs	r0, r7
1000c212:	4e16      	ldr	r6, [pc, #88]	; (1000c26c <ble_encryption_request_handler+0x13c>)
1000c214:	47b0      	blx	r6
1000c216:	481f      	ldr	r0, [pc, #124]	; (1000c294 <ble_encryption_request_handler+0x164>)
1000c218:	4d16      	ldr	r5, [pc, #88]	; (1000c274 <ble_encryption_request_handler+0x144>)
1000c21a:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c21c:	0038      	movs	r0, r7
1000c21e:	47b0      	blx	r6
1000c220:	481d      	ldr	r0, [pc, #116]	; (1000c298 <ble_encryption_request_handler+0x168>)
1000c222:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c224:	0163      	lsls	r3, r4, #5
1000c226:	1b1c      	subs	r4, r3, r4
1000c228:	00a4      	lsls	r4, r4, #2
1000c22a:	4b0e      	ldr	r3, [pc, #56]	; (1000c264 <ble_encryption_request_handler+0x134>)
1000c22c:	191c      	adds	r4, r3, r4
1000c22e:	8920      	ldrh	r0, [r4, #8]
1000c230:	2105      	movs	r1, #5
1000c232:	4b1a      	ldr	r3, [pc, #104]	; (1000c29c <ble_encryption_request_handler+0x16c>)
1000c234:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c236:	24e2      	movs	r4, #226	; 0xe2
1000c238:	e00d      	b.n	1000c256 <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000c23a:	480b      	ldr	r0, [pc, #44]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c23c:	4b0b      	ldr	r3, [pc, #44]	; (1000c26c <ble_encryption_request_handler+0x13c>)
1000c23e:	4798      	blx	r3
1000c240:	4817      	ldr	r0, [pc, #92]	; (1000c2a0 <ble_encryption_request_handler+0x170>)
1000c242:	4b0c      	ldr	r3, [pc, #48]	; (1000c274 <ble_encryption_request_handler+0x144>)
1000c244:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000c246:	2400      	movs	r4, #0
1000c248:	e005      	b.n	1000c256 <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000c24a:	4807      	ldr	r0, [pc, #28]	; (1000c268 <ble_encryption_request_handler+0x138>)
1000c24c:	4b07      	ldr	r3, [pc, #28]	; (1000c26c <ble_encryption_request_handler+0x13c>)
1000c24e:	4798      	blx	r3
1000c250:	4814      	ldr	r0, [pc, #80]	; (1000c2a4 <ble_encryption_request_handler+0x174>)
1000c252:	4b08      	ldr	r3, [pc, #32]	; (1000c274 <ble_encryption_request_handler+0x144>)
1000c254:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000c256:	0020      	movs	r0, r4
1000c258:	bc1c      	pop	{r2, r3, r4}
1000c25a:	4691      	mov	r9, r2
1000c25c:	469a      	mov	sl, r3
1000c25e:	46a3      	mov	fp, r4
1000c260:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c262:	46c0      	nop			; (mov r8, r8)
1000c264:	10016cf8 	.word	0x10016cf8
1000c268:	10013464 	.word	0x10013464
1000c26c:	100123d9 	.word	0x100123d9
1000c270:	100146b4 	.word	0x100146b4
1000c274:	100122b9 	.word	0x100122b9
1000c278:	100146e0 	.word	0x100146e0
1000c27c:	100146f4 	.word	0x100146f4
1000c280:	10014708 	.word	0x10014708
1000c284:	10014718 	.word	0x10014718
1000c288:	10012279 	.word	0x10012279
1000c28c:	10014728 	.word	0x10014728
1000c290:	1000f6c5 	.word	0x1000f6c5
1000c294:	1001473c 	.word	0x1001473c
1000c298:	10014774 	.word	0x10014774
1000c29c:	1000ea69 	.word	0x1000ea69
1000c2a0:	100147cc 	.word	0x100147cc
1000c2a4:	100147ec 	.word	0x100147ec

1000c2a8 <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000c2a8:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000c2aa:	2a00      	cmp	r2, #0
1000c2ac:	d047      	beq.n	1000c33e <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000c2ae:	2906      	cmp	r1, #6
1000c2b0:	d847      	bhi.n	1000c342 <ble_mgr_events_callback_handler+0x9a>
1000c2b2:	0089      	lsls	r1, r1, #2
1000c2b4:	4b28      	ldr	r3, [pc, #160]	; (1000c358 <ble_mgr_events_callback_handler+0xb0>)
1000c2b6:	585b      	ldr	r3, [r3, r1]
1000c2b8:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000c2ba:	4b28      	ldr	r3, [pc, #160]	; (1000c35c <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000c2bc:	2405      	movs	r4, #5
1000c2be:	e00a      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000c2c0:	4b27      	ldr	r3, [pc, #156]	; (1000c360 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000c2c2:	2401      	movs	r4, #1
			}
			break;
1000c2c4:	e007      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000c2c6:	4b27      	ldr	r3, [pc, #156]	; (1000c364 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000c2c8:	2405      	movs	r4, #5
			}
			break;
1000c2ca:	e004      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000c2cc:	4b26      	ldr	r3, [pc, #152]	; (1000c368 <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000c2ce:	2401      	movs	r4, #1
			}
			break;
1000c2d0:	e001      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000c2d2:	4b26      	ldr	r3, [pc, #152]	; (1000c36c <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000c2d4:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000c2d6:	2800      	cmp	r0, #0
1000c2d8:	d116      	bne.n	1000c308 <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c2da:	6819      	ldr	r1, [r3, #0]
1000c2dc:	2900      	cmp	r1, #0
1000c2de:	d10b      	bne.n	1000c2f8 <ble_mgr_events_callback_handler+0x50>
1000c2e0:	e006      	b.n	1000c2f0 <ble_mgr_events_callback_handler+0x48>
1000c2e2:	001d      	movs	r5, r3
1000c2e4:	3304      	adds	r3, #4
1000c2e6:	1f18      	subs	r0, r3, #4
1000c2e8:	6800      	ldr	r0, [r0, #0]
1000c2ea:	2800      	cmp	r0, #0
1000c2ec:	d106      	bne.n	1000c2fc <ble_mgr_events_callback_handler+0x54>
1000c2ee:	e000      	b.n	1000c2f2 <ble_mgr_events_callback_handler+0x4a>
1000c2f0:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000c2f2:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000c2f4:	2101      	movs	r1, #1
						break;
1000c2f6:	e02c      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
1000c2f8:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000c2fa:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c2fc:	3101      	adds	r1, #1
1000c2fe:	b2c9      	uxtb	r1, r1
1000c300:	42a1      	cmp	r1, r4
1000c302:	d3ee      	bcc.n	1000c2e2 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c304:	2100      	movs	r1, #0
1000c306:	e024      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
1000c308:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000c30a:	2801      	cmp	r0, #1
1000c30c:	d121      	bne.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c30e:	6819      	ldr	r1, [r3, #0]
1000c310:	428a      	cmp	r2, r1
1000c312:	d10c      	bne.n	1000c32e <ble_mgr_events_callback_handler+0x86>
1000c314:	e006      	b.n	1000c324 <ble_mgr_events_callback_handler+0x7c>
1000c316:	001d      	movs	r5, r3
1000c318:	3304      	adds	r3, #4
1000c31a:	1f18      	subs	r0, r3, #4
1000c31c:	6800      	ldr	r0, [r0, #0]
1000c31e:	4282      	cmp	r2, r0
1000c320:	d107      	bne.n	1000c332 <ble_mgr_events_callback_handler+0x8a>
1000c322:	e000      	b.n	1000c326 <ble_mgr_events_callback_handler+0x7e>
1000c324:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000c326:	2300      	movs	r3, #0
1000c328:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000c32a:	2101      	movs	r1, #1
						break;
1000c32c:	e011      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
1000c32e:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000c330:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000c332:	3101      	adds	r1, #1
1000c334:	b2c9      	uxtb	r1, r1
1000c336:	42a1      	cmp	r1, r4
1000c338:	d3ed      	bcc.n	1000c316 <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000c33a:	2100      	movs	r1, #0
1000c33c:	e009      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000c33e:	2100      	movs	r1, #0
1000c340:	e007      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000c342:	2100      	movs	r1, #0
1000c344:	e005      	b.n	1000c352 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000c346:	4b0a      	ldr	r3, [pc, #40]	; (1000c370 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000c348:	2405      	movs	r4, #5
1000c34a:	e7c4      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000c34c:	4b09      	ldr	r3, [pc, #36]	; (1000c374 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000c34e:	2401      	movs	r4, #1
1000c350:	e7c1      	b.n	1000c2d6 <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000c352:	0008      	movs	r0, r1
1000c354:	bd30      	pop	{r4, r5, pc}
1000c356:	46c0      	nop			; (mov r8, r8)
1000c358:	100140a0 	.word	0x100140a0
1000c35c:	10016ce4 	.word	0x10016ce4
1000c360:	10016ce0 	.word	0x10016ce0
1000c364:	10016f68 	.word	0x10016f68
1000c368:	1001751c 	.word	0x1001751c
1000c36c:	10016f7c 	.word	0x10016f7c
1000c370:	10016f90 	.word	0x10016f90
1000c374:	10016fd8 	.word	0x10016fd8

1000c378 <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000c378:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c37a:	465f      	mov	r7, fp
1000c37c:	4656      	mov	r6, sl
1000c37e:	464d      	mov	r5, r9
1000c380:	4644      	mov	r4, r8
1000c382:	b4f0      	push	{r4, r5, r6, r7}
1000c384:	b091      	sub	sp, #68	; 0x44
1000c386:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000c388:	2400      	movs	r4, #0
1000c38a:	4b7e      	ldr	r3, [pc, #504]	; (1000c584 <ble_device_init+0x20c>)
1000c38c:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c38e:	2207      	movs	r2, #7
1000c390:	2100      	movs	r1, #0
1000c392:	487d      	ldr	r0, [pc, #500]	; (1000c588 <ble_device_init+0x210>)
1000c394:	4e7d      	ldr	r6, [pc, #500]	; (1000c58c <ble_device_init+0x214>)
1000c396:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000c398:	2212      	movs	r2, #18
1000c39a:	2100      	movs	r1, #0
1000c39c:	487c      	ldr	r0, [pc, #496]	; (1000c590 <ble_device_init+0x218>)
1000c39e:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000c3a0:	4a7c      	ldr	r2, [pc, #496]	; (1000c594 <ble_device_init+0x21c>)
1000c3a2:	2100      	movs	r1, #0
1000c3a4:	487c      	ldr	r0, [pc, #496]	; (1000c598 <ble_device_init+0x220>)
1000c3a6:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000c3a8:	4b7c      	ldr	r3, [pc, #496]	; (1000c59c <ble_device_init+0x224>)
1000c3aa:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000c3ac:	22cd      	movs	r2, #205	; 0xcd
1000c3ae:	0092      	lsls	r2, r2, #2
1000c3b0:	2100      	movs	r1, #0
1000c3b2:	487b      	ldr	r0, [pc, #492]	; (1000c5a0 <ble_device_init+0x228>)
1000c3b4:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000c3b6:	4b7b      	ldr	r3, [pc, #492]	; (1000c5a4 <ble_device_init+0x22c>)
1000c3b8:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000c3ba:	2283      	movs	r2, #131	; 0x83
1000c3bc:	0092      	lsls	r2, r2, #2
1000c3be:	2100      	movs	r1, #0
1000c3c0:	4879      	ldr	r0, [pc, #484]	; (1000c5a8 <ble_device_init+0x230>)
1000c3c2:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000c3c4:	4b79      	ldr	r3, [pc, #484]	; (1000c5ac <ble_device_init+0x234>)
1000c3c6:	469b      	mov	fp, r3
1000c3c8:	2380      	movs	r3, #128	; 0x80
1000c3ca:	00db      	lsls	r3, r3, #3
1000c3cc:	469a      	mov	sl, r3
1000c3ce:	001a      	movs	r2, r3
1000c3d0:	2100      	movs	r1, #0
1000c3d2:	4658      	mov	r0, fp
1000c3d4:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000c3d6:	4b76      	ldr	r3, [pc, #472]	; (1000c5b0 <ble_device_init+0x238>)
1000c3d8:	4699      	mov	r9, r3
1000c3da:	2380      	movs	r3, #128	; 0x80
1000c3dc:	015b      	lsls	r3, r3, #5
1000c3de:	4698      	mov	r8, r3
1000c3e0:	001a      	movs	r2, r3
1000c3e2:	2100      	movs	r1, #0
1000c3e4:	4648      	mov	r0, r9
1000c3e6:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000c3e8:	4f72      	ldr	r7, [pc, #456]	; (1000c5b4 <ble_device_init+0x23c>)
1000c3ea:	221c      	movs	r2, #28
1000c3ec:	2100      	movs	r1, #0
1000c3ee:	0038      	movs	r0, r7
1000c3f0:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000c3f2:	465b      	mov	r3, fp
1000c3f4:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000c3f6:	4653      	mov	r3, sl
1000c3f8:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000c3fa:	464b      	mov	r3, r9
1000c3fc:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000c3fe:	4643      	mov	r3, r8
1000c400:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000c402:	4b6d      	ldr	r3, [pc, #436]	; (1000c5b8 <ble_device_init+0x240>)
1000c404:	601c      	str	r4, [r3, #0]
1000c406:	605c      	str	r4, [r3, #4]
1000c408:	609c      	str	r4, [r3, #8]
1000c40a:	60dc      	str	r4, [r3, #12]
1000c40c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000c40e:	4b6b      	ldr	r3, [pc, #428]	; (1000c5bc <ble_device_init+0x244>)
1000c410:	601c      	str	r4, [r3, #0]
1000c412:	605c      	str	r4, [r3, #4]
1000c414:	609c      	str	r4, [r3, #8]
1000c416:	60dc      	str	r4, [r3, #12]
1000c418:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000c41a:	4b69      	ldr	r3, [pc, #420]	; (1000c5c0 <ble_device_init+0x248>)
1000c41c:	601c      	str	r4, [r3, #0]
1000c41e:	605c      	str	r4, [r3, #4]
1000c420:	609c      	str	r4, [r3, #8]
1000c422:	60dc      	str	r4, [r3, #12]
1000c424:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000c426:	4b67      	ldr	r3, [pc, #412]	; (1000c5c4 <ble_device_init+0x24c>)
1000c428:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000c42a:	4b67      	ldr	r3, [pc, #412]	; (1000c5c8 <ble_device_init+0x250>)
1000c42c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000c42e:	4b67      	ldr	r3, [pc, #412]	; (1000c5cc <ble_device_init+0x254>)
1000c430:	601c      	str	r4, [r3, #0]
1000c432:	605c      	str	r4, [r3, #4]
1000c434:	609c      	str	r4, [r3, #8]
1000c436:	60dc      	str	r4, [r3, #12]
1000c438:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000c43a:	4b65      	ldr	r3, [pc, #404]	; (1000c5d0 <ble_device_init+0x258>)
1000c43c:	601c      	str	r4, [r3, #0]
1000c43e:	4c65      	ldr	r4, [pc, #404]	; (1000c5d4 <ble_device_init+0x25c>)
1000c440:	239b      	movs	r3, #155	; 0x9b
1000c442:	009b      	lsls	r3, r3, #2
1000c444:	4698      	mov	r8, r3
1000c446:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c448:	4f50      	ldr	r7, [pc, #320]	; (1000c58c <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c44a:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000c44c:	227c      	movs	r2, #124	; 0x7c
1000c44e:	2100      	movs	r1, #0
1000c450:	0020      	movs	r0, r4
1000c452:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c454:	0023      	movs	r3, r4
1000c456:	335e      	adds	r3, #94	; 0x5e
1000c458:	2200      	movs	r2, #0
1000c45a:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000c45c:	7626      	strb	r6, [r4, #24]
1000c45e:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c460:	45a0      	cmp	r8, r4
1000c462:	d1f3      	bne.n	1000c44c <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000c464:	4b5c      	ldr	r3, [pc, #368]	; (1000c5d8 <ble_device_init+0x260>)
1000c466:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000c468:	4c52      	ldr	r4, [pc, #328]	; (1000c5b4 <ble_device_init+0x23c>)
1000c46a:	4b4a      	ldr	r3, [pc, #296]	; (1000c594 <ble_device_init+0x21c>)
1000c46c:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000c46e:	4b4a      	ldr	r3, [pc, #296]	; (1000c598 <ble_device_init+0x220>)
1000c470:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG("[ble_init]\t\t\tInitializing SAMB11");
1000c472:	485a      	ldr	r0, [pc, #360]	; (1000c5dc <ble_device_init+0x264>)
1000c474:	4b5a      	ldr	r3, [pc, #360]	; (1000c5e0 <ble_device_init+0x268>)
1000c476:	4798      	blx	r3
1000c478:	485a      	ldr	r0, [pc, #360]	; (1000c5e4 <ble_device_init+0x26c>)
1000c47a:	4b5b      	ldr	r3, [pc, #364]	; (1000c5e8 <ble_device_init+0x270>)
1000c47c:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000c47e:	0020      	movs	r0, r4
1000c480:	4b5a      	ldr	r3, [pc, #360]	; (1000c5ec <ble_device_init+0x274>)
1000c482:	4798      	blx	r3
1000c484:	2800      	cmp	r0, #0
1000c486:	d00b      	beq.n	1000c4a0 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000c488:	4e54      	ldr	r6, [pc, #336]	; (1000c5dc <ble_device_init+0x264>)
1000c48a:	0030      	movs	r0, r6
1000c48c:	4d54      	ldr	r5, [pc, #336]	; (1000c5e0 <ble_device_init+0x268>)
1000c48e:	47a8      	blx	r5
1000c490:	4857      	ldr	r0, [pc, #348]	; (1000c5f0 <ble_device_init+0x278>)
1000c492:	4c55      	ldr	r4, [pc, #340]	; (1000c5e8 <ble_device_init+0x270>)
1000c494:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000c496:	0030      	movs	r0, r6
1000c498:	47a8      	blx	r5
1000c49a:	4856      	ldr	r0, [pc, #344]	; (1000c5f4 <ble_device_init+0x27c>)
1000c49c:	47a0      	blx	r4
1000c49e:	e7fe      	b.n	1000c49e <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000c4a0:	4a55      	ldr	r2, [pc, #340]	; (1000c5f8 <ble_device_init+0x280>)
1000c4a2:	2100      	movs	r1, #0
1000c4a4:	2000      	movs	r0, #0
1000c4a6:	4c55      	ldr	r4, [pc, #340]	; (1000c5fc <ble_device_init+0x284>)
1000c4a8:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000c4aa:	4a55      	ldr	r2, [pc, #340]	; (1000c600 <ble_device_init+0x288>)
1000c4ac:	2102      	movs	r1, #2
1000c4ae:	2000      	movs	r0, #0
1000c4b0:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000c4b2:	2109      	movs	r1, #9
1000c4b4:	4853      	ldr	r0, [pc, #332]	; (1000c604 <ble_device_init+0x28c>)
1000c4b6:	4b54      	ldr	r3, [pc, #336]	; (1000c608 <ble_device_init+0x290>)
1000c4b8:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000c4ba:	2800      	cmp	r0, #0
1000c4bc:	d005      	beq.n	1000c4ca <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000c4be:	4847      	ldr	r0, [pc, #284]	; (1000c5dc <ble_device_init+0x264>)
1000c4c0:	4b47      	ldr	r3, [pc, #284]	; (1000c5e0 <ble_device_init+0x268>)
1000c4c2:	4798      	blx	r3
1000c4c4:	4851      	ldr	r0, [pc, #324]	; (1000c60c <ble_device_init+0x294>)
1000c4c6:	4b48      	ldr	r3, [pc, #288]	; (1000c5e8 <ble_device_init+0x270>)
1000c4c8:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000c4ca:	2207      	movs	r2, #7
1000c4cc:	4950      	ldr	r1, [pc, #320]	; (1000c610 <ble_device_init+0x298>)
1000c4ce:	3108      	adds	r1, #8
1000c4d0:	a804      	add	r0, sp, #16
1000c4d2:	4b50      	ldr	r3, [pc, #320]	; (1000c614 <ble_device_init+0x29c>)
1000c4d4:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000c4d6:	2226      	movs	r2, #38	; 0x26
1000c4d8:	2100      	movs	r1, #0
1000c4da:	a806      	add	r0, sp, #24
1000c4dc:	4b2b      	ldr	r3, [pc, #172]	; (1000c58c <ble_device_init+0x214>)
1000c4de:	4798      	blx	r3
	
	if (addr == NULL)
1000c4e0:	2d00      	cmp	r5, #0
1000c4e2:	d10c      	bne.n	1000c4fe <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c4e4:	a804      	add	r0, sp, #16
1000c4e6:	4b4c      	ldr	r3, [pc, #304]	; (1000c618 <ble_device_init+0x2a0>)
1000c4e8:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c4ea:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000c4ec:	2800      	cmp	r0, #0
1000c4ee:	d006      	beq.n	1000c4fe <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000c4f0:	483a      	ldr	r0, [pc, #232]	; (1000c5dc <ble_device_init+0x264>)
1000c4f2:	4b3b      	ldr	r3, [pc, #236]	; (1000c5e0 <ble_device_init+0x268>)
1000c4f4:	4798      	blx	r3
1000c4f6:	4849      	ldr	r0, [pc, #292]	; (1000c61c <ble_device_init+0x2a4>)
1000c4f8:	4b3b      	ldr	r3, [pc, #236]	; (1000c5e8 <ble_device_init+0x270>)
1000c4fa:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000c4fc:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000c4fe:	4837      	ldr	r0, [pc, #220]	; (1000c5dc <ble_device_init+0x264>)
1000c500:	4b37      	ldr	r3, [pc, #220]	; (1000c5e0 <ble_device_init+0x268>)
1000c502:	4798      	blx	r3
1000c504:	792b      	ldrb	r3, [r5, #4]
1000c506:	796a      	ldrb	r2, [r5, #5]
1000c508:	79a9      	ldrb	r1, [r5, #6]
1000c50a:	7828      	ldrb	r0, [r5, #0]
1000c50c:	9003      	str	r0, [sp, #12]
1000c50e:	7868      	ldrb	r0, [r5, #1]
1000c510:	9002      	str	r0, [sp, #8]
1000c512:	78a8      	ldrb	r0, [r5, #2]
1000c514:	9001      	str	r0, [sp, #4]
1000c516:	78e8      	ldrb	r0, [r5, #3]
1000c518:	9000      	str	r0, [sp, #0]
1000c51a:	4841      	ldr	r0, [pc, #260]	; (1000c620 <ble_device_init+0x2a8>)
1000c51c:	4c32      	ldr	r4, [pc, #200]	; (1000c5e8 <ble_device_init+0x270>)
1000c51e:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000c520:	ac06      	add	r4, sp, #24
1000c522:	230a      	movs	r3, #10
1000c524:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000c526:	4b3f      	ldr	r3, [pc, #252]	; (1000c624 <ble_device_init+0x2ac>)
1000c528:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000c52a:	2207      	movs	r2, #7
1000c52c:	0029      	movs	r1, r5
1000c52e:	a807      	add	r0, sp, #28
1000c530:	4b38      	ldr	r3, [pc, #224]	; (1000c614 <ble_device_init+0x29c>)
1000c532:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000c534:	2300      	movs	r3, #0
1000c536:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000c538:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000c53a:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000c53c:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000c53e:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c540:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000c542:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000c544:	2380      	movs	r3, #128	; 0x80
1000c546:	009b      	lsls	r3, r3, #2
1000c548:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000c54a:	0020      	movs	r0, r4
1000c54c:	4b36      	ldr	r3, [pc, #216]	; (1000c628 <ble_device_init+0x2b0>)
1000c54e:	4798      	blx	r3
1000c550:	2800      	cmp	r0, #0
1000c552:	d005      	beq.n	1000c560 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000c554:	4821      	ldr	r0, [pc, #132]	; (1000c5dc <ble_device_init+0x264>)
1000c556:	4b22      	ldr	r3, [pc, #136]	; (1000c5e0 <ble_device_init+0x268>)
1000c558:	4798      	blx	r3
1000c55a:	4834      	ldr	r0, [pc, #208]	; (1000c62c <ble_device_init+0x2b4>)
1000c55c:	4b22      	ldr	r3, [pc, #136]	; (1000c5e8 <ble_device_init+0x270>)
1000c55e:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000c560:	0028      	movs	r0, r5
1000c562:	4b33      	ldr	r3, [pc, #204]	; (1000c630 <ble_device_init+0x2b8>)
1000c564:	4798      	blx	r3
1000c566:	2800      	cmp	r0, #0
1000c568:	d005      	beq.n	1000c576 <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000c56a:	481c      	ldr	r0, [pc, #112]	; (1000c5dc <ble_device_init+0x264>)
1000c56c:	4b1c      	ldr	r3, [pc, #112]	; (1000c5e0 <ble_device_init+0x268>)
1000c56e:	4798      	blx	r3
1000c570:	4830      	ldr	r0, [pc, #192]	; (1000c634 <ble_device_init+0x2bc>)
1000c572:	4b1d      	ldr	r3, [pc, #116]	; (1000c5e8 <ble_device_init+0x270>)
1000c574:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000c576:	b011      	add	sp, #68	; 0x44
1000c578:	bc3c      	pop	{r2, r3, r4, r5}
1000c57a:	4690      	mov	r8, r2
1000c57c:	4699      	mov	r9, r3
1000c57e:	46a2      	mov	sl, r4
1000c580:	46ab      	mov	fp, r5
1000c582:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c584:	10015908 	.word	0x10015908
1000c588:	10015910 	.word	0x10015910
1000c58c:	100122a9 	.word	0x100122a9
1000c590:	10016fa4 	.word	0x10016fa4
1000c594:	000004e2 	.word	0x000004e2
1000c598:	10015428 	.word	0x10015428
1000c59c:	1001590c 	.word	0x1001590c
1000c5a0:	10016fdc 	.word	0x10016fdc
1000c5a4:	10016fd4 	.word	0x10016fd4
1000c5a8:	10017310 	.word	0x10017310
1000c5ac:	10015028 	.word	0x10015028
1000c5b0:	10015918 	.word	0x10015918
1000c5b4:	10016fb8 	.word	0x10016fb8
1000c5b8:	10016f7c 	.word	0x10016f7c
1000c5bc:	10016f90 	.word	0x10016f90
1000c5c0:	10016ce4 	.word	0x10016ce4
1000c5c4:	10016fd8 	.word	0x10016fd8
1000c5c8:	10016ce0 	.word	0x10016ce0
1000c5cc:	10016f68 	.word	0x10016f68
1000c5d0:	1001751c 	.word	0x1001751c
1000c5d4:	10016cf8 	.word	0x10016cf8
1000c5d8:	10016f64 	.word	0x10016f64
1000c5dc:	10013464 	.word	0x10013464
1000c5e0:	100123d9 	.word	0x100123d9
1000c5e4:	10014808 	.word	0x10014808
1000c5e8:	100122b9 	.word	0x100122b9
1000c5ec:	1000e675 	.word	0x1000e675
1000c5f0:	1001482c 	.word	0x1001482c
1000c5f4:	10014858 	.word	0x10014858
1000c5f8:	10014c08 	.word	0x10014c08
1000c5fc:	1000c2a9 	.word	0x1000c2a9
1000c600:	100141bc 	.word	0x100141bc
1000c604:	100148a0 	.word	0x100148a0
1000c608:	1000e58d 	.word	0x1000e58d
1000c60c:	100148ac 	.word	0x100148ac
1000c610:	100141ac 	.word	0x100141ac
1000c614:	10012297 	.word	0x10012297
1000c618:	1000e5c1 	.word	0x1000e5c1
1000c61c:	100148c4 	.word	0x100148c4
1000c620:	100148f0 	.word	0x100148f0
1000c624:	00003a98 	.word	0x00003a98
1000c628:	1000e5e5 	.word	0x1000e5e5
1000c62c:	10014940 	.word	0x10014940
1000c630:	1000e829 	.word	0x1000e829
1000c634:	1001497c 	.word	0x1001497c

1000c638 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000c638:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000c63a:	2200      	movs	r2, #0
1000c63c:	2100      	movs	r1, #0
1000c63e:	4b0a      	ldr	r3, [pc, #40]	; (1000c668 <ble_send_slave_sec_request+0x30>)
1000c640:	4798      	blx	r3
1000c642:	1e04      	subs	r4, r0, #0
1000c644:	d106      	bne.n	1000c654 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000c646:	4809      	ldr	r0, [pc, #36]	; (1000c66c <ble_send_slave_sec_request+0x34>)
1000c648:	4b09      	ldr	r3, [pc, #36]	; (1000c670 <ble_send_slave_sec_request+0x38>)
1000c64a:	4798      	blx	r3
1000c64c:	4809      	ldr	r0, [pc, #36]	; (1000c674 <ble_send_slave_sec_request+0x3c>)
1000c64e:	4b0a      	ldr	r3, [pc, #40]	; (1000c678 <ble_send_slave_sec_request+0x40>)
1000c650:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000c652:	e006      	b.n	1000c662 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000c654:	4805      	ldr	r0, [pc, #20]	; (1000c66c <ble_send_slave_sec_request+0x34>)
1000c656:	4b06      	ldr	r3, [pc, #24]	; (1000c670 <ble_send_slave_sec_request+0x38>)
1000c658:	4798      	blx	r3
1000c65a:	4808      	ldr	r0, [pc, #32]	; (1000c67c <ble_send_slave_sec_request+0x44>)
1000c65c:	4b06      	ldr	r3, [pc, #24]	; (1000c678 <ble_send_slave_sec_request+0x40>)
1000c65e:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000c660:	24e2      	movs	r4, #226	; 0xe2
}
1000c662:	0020      	movs	r0, r4
1000c664:	bd10      	pop	{r4, pc}
1000c666:	46c0      	nop			; (mov r8, r8)
1000c668:	1000f60d 	.word	0x1000f60d
1000c66c:	10013464 	.word	0x10013464
1000c670:	100123d9 	.word	0x100123d9
1000c674:	100149cc 	.word	0x100149cc
1000c678:	100122b9 	.word	0x100122b9
1000c67c:	100149f0 	.word	0x100149f0

1000c680 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c680:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c682:	465f      	mov	r7, fp
1000c684:	464e      	mov	r6, r9
1000c686:	4645      	mov	r5, r8
1000c688:	b4e0      	push	{r5, r6, r7}
1000c68a:	b09a      	sub	sp, #104	; 0x68
1000c68c:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000c68e:	7a86      	ldrb	r6, [r0, #10]
1000c690:	2e00      	cmp	r6, #0
1000c692:	d000      	beq.n	1000c696 <ble_connected_state_handler+0x16>
1000c694:	e0cc      	b.n	1000c830 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000c696:	4878      	ldr	r0, [pc, #480]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c698:	4f78      	ldr	r7, [pc, #480]	; (1000c87c <ble_connected_state_handler+0x1fc>)
1000c69a:	47b8      	blx	r7
1000c69c:	792b      	ldrb	r3, [r5, #4]
1000c69e:	796a      	ldrb	r2, [r5, #5]
1000c6a0:	79a9      	ldrb	r1, [r5, #6]
1000c6a2:	7868      	ldrb	r0, [r5, #1]
1000c6a4:	9002      	str	r0, [sp, #8]
1000c6a6:	78a8      	ldrb	r0, [r5, #2]
1000c6a8:	9001      	str	r0, [sp, #4]
1000c6aa:	78e8      	ldrb	r0, [r5, #3]
1000c6ac:	9000      	str	r0, [sp, #0]
1000c6ae:	4874      	ldr	r0, [pc, #464]	; (1000c880 <ble_connected_state_handler+0x200>)
1000c6b0:	4c74      	ldr	r4, [pc, #464]	; (1000c884 <ble_connected_state_handler+0x204>)
1000c6b2:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000c6b4:	4870      	ldr	r0, [pc, #448]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c6b6:	47b8      	blx	r7
1000c6b8:	8929      	ldrh	r1, [r5, #8]
1000c6ba:	4873      	ldr	r0, [pc, #460]	; (1000c888 <ble_connected_state_handler+0x208>)
1000c6bc:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000c6be:	2212      	movs	r2, #18
1000c6c0:	0029      	movs	r1, r5
1000c6c2:	4872      	ldr	r0, [pc, #456]	; (1000c88c <ble_connected_state_handler+0x20c>)
1000c6c4:	4b72      	ldr	r3, [pc, #456]	; (1000c890 <ble_connected_state_handler+0x210>)
1000c6c6:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c6c8:	9504      	str	r5, [sp, #16]
1000c6ca:	2207      	movs	r2, #7
1000c6cc:	0029      	movs	r1, r5
1000c6ce:	4871      	ldr	r0, [pc, #452]	; (1000c894 <ble_connected_state_handler+0x214>)
1000c6d0:	4b71      	ldr	r3, [pc, #452]	; (1000c898 <ble_connected_state_handler+0x218>)
1000c6d2:	4798      	blx	r3
1000c6d4:	2800      	cmp	r0, #0
1000c6d6:	d100      	bne.n	1000c6da <ble_connected_state_handler+0x5a>
1000c6d8:	e0b3      	b.n	1000c842 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000c6da:	782b      	ldrb	r3, [r5, #0]
1000c6dc:	2b02      	cmp	r3, #2
1000c6de:	d000      	beq.n	1000c6e2 <ble_connected_state_handler+0x62>
1000c6e0:	e0af      	b.n	1000c842 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000c6e2:	2250      	movs	r2, #80	; 0x50
1000c6e4:	2100      	movs	r1, #0
1000c6e6:	a806      	add	r0, sp, #24
1000c6e8:	4b6c      	ldr	r3, [pc, #432]	; (1000c89c <ble_connected_state_handler+0x21c>)
1000c6ea:	4798      	blx	r3
1000c6ec:	4f6c      	ldr	r7, [pc, #432]	; (1000c8a0 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000c6ee:	2300      	movs	r3, #0
1000c6f0:	e00b      	b.n	1000c70a <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c6f2:	1c59      	adds	r1, r3, #1
1000c6f4:	7814      	ldrb	r4, [r2, #0]
1000c6f6:	a806      	add	r0, sp, #24
1000c6f8:	54c4      	strb	r4, [r0, r3]
1000c6fa:	3201      	adds	r2, #1
1000c6fc:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000c6fe:	42b3      	cmp	r3, r6
1000c700:	d1f7      	bne.n	1000c6f2 <ble_connected_state_handler+0x72>
1000c702:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000c704:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000c706:	2b50      	cmp	r3, #80	; 0x50
1000c708:	d004      	beq.n	1000c714 <ble_connected_state_handler+0x94>
1000c70a:	001e      	movs	r6, r3
1000c70c:	3610      	adds	r6, #16
1000c70e:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000c710:	003a      	movs	r2, r7
1000c712:	e7ee      	b.n	1000c6f2 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000c714:	aa06      	add	r2, sp, #24
1000c716:	0029      	movs	r1, r5
1000c718:	2005      	movs	r0, #5
1000c71a:	4b62      	ldr	r3, [pc, #392]	; (1000c8a4 <ble_connected_state_handler+0x224>)
1000c71c:	4798      	blx	r3
1000c71e:	1e06      	subs	r6, r0, #0
1000c720:	d106      	bne.n	1000c730 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000c722:	4855      	ldr	r0, [pc, #340]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c724:	4b55      	ldr	r3, [pc, #340]	; (1000c87c <ble_connected_state_handler+0x1fc>)
1000c726:	4798      	blx	r3
1000c728:	485f      	ldr	r0, [pc, #380]	; (1000c8a8 <ble_connected_state_handler+0x228>)
1000c72a:	4b56      	ldr	r3, [pc, #344]	; (1000c884 <ble_connected_state_handler+0x204>)
1000c72c:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000c72e:	e09c      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000c730:	4851      	ldr	r0, [pc, #324]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c732:	4b52      	ldr	r3, [pc, #328]	; (1000c87c <ble_connected_state_handler+0x1fc>)
1000c734:	4798      	blx	r3
1000c736:	485d      	ldr	r0, [pc, #372]	; (1000c8ac <ble_connected_state_handler+0x22c>)
1000c738:	4b52      	ldr	r3, [pc, #328]	; (1000c884 <ble_connected_state_handler+0x204>)
1000c73a:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000c73c:	26e2      	movs	r6, #226	; 0xe2
1000c73e:	e094      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
1000c740:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c742:	9405      	str	r4, [sp, #20]
1000c744:	2207      	movs	r2, #7
1000c746:	9904      	ldr	r1, [sp, #16]
1000c748:	4648      	mov	r0, r9
1000c74a:	47d8      	blx	fp
1000c74c:	2800      	cmp	r0, #0
1000c74e:	d109      	bne.n	1000c764 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c750:	9a05      	ldr	r2, [sp, #20]
1000c752:	0153      	lsls	r3, r2, #5
1000c754:	1a9b      	subs	r3, r3, r2
1000c756:	009a      	lsls	r2, r3, #2
1000c758:	4b55      	ldr	r3, [pc, #340]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c75a:	189b      	adds	r3, r3, r2
1000c75c:	335e      	adds	r3, #94	; 0x5e
1000c75e:	2202      	movs	r2, #2
1000c760:	701a      	strb	r2, [r3, #0]
1000c762:	e02b      	b.n	1000c7bc <ble_connected_state_handler+0x13c>
1000c764:	3401      	adds	r4, #1
1000c766:	237c      	movs	r3, #124	; 0x7c
1000c768:	469c      	mov	ip, r3
1000c76a:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c76c:	2c05      	cmp	r4, #5
1000c76e:	d1e7      	bne.n	1000c740 <ble_connected_state_handler+0xc0>
1000c770:	e072      	b.n	1000c858 <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c772:	001c      	movs	r4, r3
1000c774:	7811      	ldrb	r1, [r2, #0]
1000c776:	2900      	cmp	r1, #0
1000c778:	d11a      	bne.n	1000c7b0 <ble_connected_state_handler+0x130>
1000c77a:	e001      	b.n	1000c780 <ble_connected_state_handler+0x100>
1000c77c:	2400      	movs	r4, #0
1000c77e:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000c780:	0163      	lsls	r3, r4, #5
1000c782:	4699      	mov	r9, r3
1000c784:	1b18      	subs	r0, r3, r4
1000c786:	0080      	lsls	r0, r0, #2
1000c788:	4b49      	ldr	r3, [pc, #292]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c78a:	4698      	mov	r8, r3
1000c78c:	4440      	add	r0, r8
1000c78e:	2212      	movs	r2, #18
1000c790:	0029      	movs	r1, r5
1000c792:	4b3f      	ldr	r3, [pc, #252]	; (1000c890 <ble_connected_state_handler+0x210>)
1000c794:	4798      	blx	r3
						ble_device_count++;
1000c796:	4a47      	ldr	r2, [pc, #284]	; (1000c8b4 <ble_connected_state_handler+0x234>)
1000c798:	7813      	ldrb	r3, [r2, #0]
1000c79a:	3301      	adds	r3, #1
1000c79c:	b2db      	uxtb	r3, r3
1000c79e:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c7a0:	464b      	mov	r3, r9
1000c7a2:	1b1b      	subs	r3, r3, r4
1000c7a4:	009b      	lsls	r3, r3, #2
1000c7a6:	4443      	add	r3, r8
1000c7a8:	335e      	adds	r3, #94	; 0x5e
1000c7aa:	2202      	movs	r2, #2
1000c7ac:	701a      	strb	r2, [r3, #0]
						break;
1000c7ae:	e005      	b.n	1000c7bc <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7b0:	1c79      	adds	r1, r7, #1
1000c7b2:	b2cf      	uxtb	r7, r1
1000c7b4:	3301      	adds	r3, #1
1000c7b6:	327c      	adds	r2, #124	; 0x7c
1000c7b8:	2f05      	cmp	r7, #5
1000c7ba:	d1da      	bne.n	1000c772 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c7bc:	2207      	movs	r2, #7
1000c7be:	0029      	movs	r1, r5
1000c7c0:	4834      	ldr	r0, [pc, #208]	; (1000c894 <ble_connected_state_handler+0x214>)
1000c7c2:	4b35      	ldr	r3, [pc, #212]	; (1000c898 <ble_connected_state_handler+0x218>)
1000c7c4:	4798      	blx	r3
1000c7c6:	2800      	cmp	r0, #0
1000c7c8:	d10c      	bne.n	1000c7e4 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000c7ca:	017b      	lsls	r3, r7, #5
1000c7cc:	1bdb      	subs	r3, r3, r7
1000c7ce:	009b      	lsls	r3, r3, #2
1000c7d0:	4a37      	ldr	r2, [pc, #220]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c7d2:	18d3      	adds	r3, r2, r3
1000c7d4:	2205      	movs	r2, #5
1000c7d6:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c7d8:	3202      	adds	r2, #2
1000c7da:	2100      	movs	r1, #0
1000c7dc:	482d      	ldr	r0, [pc, #180]	; (1000c894 <ble_connected_state_handler+0x214>)
1000c7de:	4b2f      	ldr	r3, [pc, #188]	; (1000c89c <ble_connected_state_handler+0x21c>)
1000c7e0:	4798      	blx	r3
1000c7e2:	e042      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c7e4:	4b32      	ldr	r3, [pc, #200]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c7e6:	4698      	mov	r8, r3
1000c7e8:	017c      	lsls	r4, r7, #5
1000c7ea:	1be3      	subs	r3, r4, r7
1000c7ec:	009b      	lsls	r3, r3, #2
1000c7ee:	4443      	add	r3, r8
1000c7f0:	220a      	movs	r2, #10
1000c7f2:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000c7f4:	3a03      	subs	r2, #3
1000c7f6:	2100      	movs	r1, #0
1000c7f8:	4826      	ldr	r0, [pc, #152]	; (1000c894 <ble_connected_state_handler+0x214>)
1000c7fa:	4b28      	ldr	r3, [pc, #160]	; (1000c89c <ble_connected_state_handler+0x21c>)
1000c7fc:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c7fe:	1be4      	subs	r4, r4, r7
1000c800:	00a4      	lsls	r4, r4, #2
1000c802:	4444      	add	r4, r8
1000c804:	7ca3      	ldrb	r3, [r4, #18]
1000c806:	2b0a      	cmp	r3, #10
1000c808:	d12f      	bne.n	1000c86a <ble_connected_state_handler+0x1ea>
1000c80a:	e00d      	b.n	1000c828 <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000c80c:	481a      	ldr	r0, [pc, #104]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c80e:	4b1b      	ldr	r3, [pc, #108]	; (1000c87c <ble_connected_state_handler+0x1fc>)
1000c810:	4798      	blx	r3
1000c812:	4b28      	ldr	r3, [pc, #160]	; (1000c8b4 <ble_connected_state_handler+0x234>)
1000c814:	7819      	ldrb	r1, [r3, #0]
1000c816:	b2c9      	uxtb	r1, r1
1000c818:	4827      	ldr	r0, [pc, #156]	; (1000c8b8 <ble_connected_state_handler+0x238>)
1000c81a:	4b1a      	ldr	r3, [pc, #104]	; (1000c884 <ble_connected_state_handler+0x204>)
1000c81c:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000c81e:	8928      	ldrh	r0, [r5, #8]
1000c820:	2113      	movs	r1, #19
1000c822:	4b26      	ldr	r3, [pc, #152]	; (1000c8bc <ble_connected_state_handler+0x23c>)
1000c824:	4798      	blx	r3
1000c826:	e020      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000c828:	8928      	ldrh	r0, [r5, #8]
1000c82a:	4b25      	ldr	r3, [pc, #148]	; (1000c8c0 <ble_connected_state_handler+0x240>)
1000c82c:	4798      	blx	r3
1000c82e:	e01c      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000c830:	4811      	ldr	r0, [pc, #68]	; (1000c878 <ble_connected_state_handler+0x1f8>)
1000c832:	4b12      	ldr	r3, [pc, #72]	; (1000c87c <ble_connected_state_handler+0x1fc>)
1000c834:	4798      	blx	r3
1000c836:	7aa9      	ldrb	r1, [r5, #10]
1000c838:	4822      	ldr	r0, [pc, #136]	; (1000c8c4 <ble_connected_state_handler+0x244>)
1000c83a:	4b12      	ldr	r3, [pc, #72]	; (1000c884 <ble_connected_state_handler+0x204>)
1000c83c:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000c83e:	2600      	movs	r6, #0
1000c840:	e013      	b.n	1000c86a <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000c842:	4b1c      	ldr	r3, [pc, #112]	; (1000c8b4 <ble_connected_state_handler+0x234>)
1000c844:	781b      	ldrb	r3, [r3, #0]
1000c846:	b2db      	uxtb	r3, r3
1000c848:	2b04      	cmp	r3, #4
1000c84a:	d8df      	bhi.n	1000c80c <ble_connected_state_handler+0x18c>
1000c84c:	4b18      	ldr	r3, [pc, #96]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c84e:	4699      	mov	r9, r3
1000c850:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000c852:	4b11      	ldr	r3, [pc, #68]	; (1000c898 <ble_connected_state_handler+0x218>)
1000c854:	469b      	mov	fp, r3
1000c856:	e773      	b.n	1000c740 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c858:	235e      	movs	r3, #94	; 0x5e
1000c85a:	4a15      	ldr	r2, [pc, #84]	; (1000c8b0 <ble_connected_state_handler+0x230>)
1000c85c:	5cd3      	ldrb	r3, [r2, r3]
1000c85e:	2b00      	cmp	r3, #0
1000c860:	d08c      	beq.n	1000c77c <ble_connected_state_handler+0xfc>
1000c862:	4a19      	ldr	r2, [pc, #100]	; (1000c8c8 <ble_connected_state_handler+0x248>)
1000c864:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c866:	2701      	movs	r7, #1
1000c868:	e783      	b.n	1000c772 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000c86a:	0030      	movs	r0, r6
1000c86c:	b01a      	add	sp, #104	; 0x68
1000c86e:	bc1c      	pop	{r2, r3, r4}
1000c870:	4690      	mov	r8, r2
1000c872:	4699      	mov	r9, r3
1000c874:	46a3      	mov	fp, r4
1000c876:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c878:	10013464 	.word	0x10013464
1000c87c:	100123d9 	.word	0x100123d9
1000c880:	10014a10 	.word	0x10014a10
1000c884:	100122b9 	.word	0x100122b9
1000c888:	10014a54 	.word	0x10014a54
1000c88c:	10016fa4 	.word	0x10016fa4
1000c890:	10012297 	.word	0x10012297
1000c894:	10015910 	.word	0x10015910
1000c898:	10012279 	.word	0x10012279
1000c89c:	100122a9 	.word	0x100122a9
1000c8a0:	10016d3e 	.word	0x10016d3e
1000c8a4:	1000ea95 	.word	0x1000ea95
1000c8a8:	10014a6c 	.word	0x10014a6c
1000c8ac:	10014a90 	.word	0x10014a90
1000c8b0:	10016cf8 	.word	0x10016cf8
1000c8b4:	10016f64 	.word	0x10016f64
1000c8b8:	10014ab4 	.word	0x10014ab4
1000c8bc:	1000ea69 	.word	0x1000ea69
1000c8c0:	1000c639 	.word	0x1000c639
1000c8c4:	10014af0 	.word	0x10014af0
1000c8c8:	10016dd2 	.word	0x10016dd2

1000c8cc <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000c8cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c8ce:	4647      	mov	r7, r8
1000c8d0:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000c8d2:	7803      	ldrb	r3, [r0, #0]
1000c8d4:	2b00      	cmp	r3, #0
1000c8d6:	d152      	bne.n	1000c97e <ble_resolv_rand_addr_handler+0xb2>
1000c8d8:	4d3e      	ldr	r5, [pc, #248]	; (1000c9d4 <ble_resolv_rand_addr_handler+0x108>)
1000c8da:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000c8dc:	1c46      	adds	r6, r0, #1
1000c8de:	4f3e      	ldr	r7, [pc, #248]	; (1000c9d8 <ble_resolv_rand_addr_handler+0x10c>)
1000c8e0:	2210      	movs	r2, #16
1000c8e2:	0029      	movs	r1, r5
1000c8e4:	0030      	movs	r0, r6
1000c8e6:	47b8      	blx	r7
1000c8e8:	2800      	cmp	r0, #0
1000c8ea:	d031      	beq.n	1000c950 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c8ec:	3401      	adds	r4, #1
1000c8ee:	b2e4      	uxtb	r4, r4
1000c8f0:	357c      	adds	r5, #124	; 0x7c
1000c8f2:	2c05      	cmp	r4, #5
1000c8f4:	d1f4      	bne.n	1000c8e0 <ble_resolv_rand_addr_handler+0x14>
1000c8f6:	e042      	b.n	1000c97e <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c8f8:	001d      	movs	r5, r3
1000c8fa:	7811      	ldrb	r1, [r2, #0]
1000c8fc:	2900      	cmp	r1, #0
1000c8fe:	d11b      	bne.n	1000c938 <ble_resolv_rand_addr_handler+0x6c>
1000c900:	e001      	b.n	1000c906 <ble_resolv_rand_addr_handler+0x3a>
1000c902:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c904:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c906:	4b35      	ldr	r3, [pc, #212]	; (1000c9dc <ble_resolv_rand_addr_handler+0x110>)
1000c908:	4698      	mov	r8, r3
1000c90a:	016e      	lsls	r6, r5, #5
1000c90c:	1b77      	subs	r7, r6, r5
1000c90e:	00bf      	lsls	r7, r7, #2
1000c910:	4447      	add	r7, r8
1000c912:	2212      	movs	r2, #18
1000c914:	4932      	ldr	r1, [pc, #200]	; (1000c9e0 <ble_resolv_rand_addr_handler+0x114>)
1000c916:	0038      	movs	r0, r7
1000c918:	4b32      	ldr	r3, [pc, #200]	; (1000c9e4 <ble_resolv_rand_addr_handler+0x118>)
1000c91a:	4798      	blx	r3
				ble_device_count++;
1000c91c:	4a32      	ldr	r2, [pc, #200]	; (1000c9e8 <ble_resolv_rand_addr_handler+0x11c>)
1000c91e:	7813      	ldrb	r3, [r2, #0]
1000c920:	3301      	adds	r3, #1
1000c922:	b2db      	uxtb	r3, r3
1000c924:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c926:	375e      	adds	r7, #94	; 0x5e
1000c928:	2302      	movs	r3, #2
1000c92a:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c92c:	1b75      	subs	r5, r6, r5
1000c92e:	00ad      	lsls	r5, r5, #2
1000c930:	4445      	add	r5, r8
1000c932:	3308      	adds	r3, #8
1000c934:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000c936:	e031      	b.n	1000c99c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c938:	3401      	adds	r4, #1
1000c93a:	b2e4      	uxtb	r4, r4
1000c93c:	3301      	adds	r3, #1
1000c93e:	327c      	adds	r2, #124	; 0x7c
1000c940:	2c05      	cmp	r4, #5
1000c942:	d1d9      	bne.n	1000c8f8 <ble_resolv_rand_addr_handler+0x2c>
1000c944:	e03a      	b.n	1000c9bc <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000c946:	4b26      	ldr	r3, [pc, #152]	; (1000c9e0 <ble_resolv_rand_addr_handler+0x114>)
1000c948:	8918      	ldrh	r0, [r3, #8]
1000c94a:	4b28      	ldr	r3, [pc, #160]	; (1000c9ec <ble_resolv_rand_addr_handler+0x120>)
1000c94c:	4798      	blx	r3
1000c94e:	e03c      	b.n	1000c9ca <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000c950:	4827      	ldr	r0, [pc, #156]	; (1000c9f0 <ble_resolv_rand_addr_handler+0x124>)
1000c952:	4b28      	ldr	r3, [pc, #160]	; (1000c9f4 <ble_resolv_rand_addr_handler+0x128>)
1000c954:	4798      	blx	r3
1000c956:	4828      	ldr	r0, [pc, #160]	; (1000c9f8 <ble_resolv_rand_addr_handler+0x12c>)
1000c958:	4b28      	ldr	r3, [pc, #160]	; (1000c9fc <ble_resolv_rand_addr_handler+0x130>)
1000c95a:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c95c:	481f      	ldr	r0, [pc, #124]	; (1000c9dc <ble_resolv_rand_addr_handler+0x110>)
1000c95e:	0163      	lsls	r3, r4, #5
1000c960:	1b1a      	subs	r2, r3, r4
1000c962:	0092      	lsls	r2, r2, #2
1000c964:	1882      	adds	r2, r0, r2
1000c966:	0011      	movs	r1, r2
1000c968:	315e      	adds	r1, #94	; 0x5e
1000c96a:	2502      	movs	r5, #2
1000c96c:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000c96e:	210a      	movs	r1, #10
1000c970:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000c972:	0010      	movs	r0, r2
1000c974:	2212      	movs	r2, #18
1000c976:	491a      	ldr	r1, [pc, #104]	; (1000c9e0 <ble_resolv_rand_addr_handler+0x114>)
1000c978:	4b1a      	ldr	r3, [pc, #104]	; (1000c9e4 <ble_resolv_rand_addr_handler+0x118>)
1000c97a:	4798      	blx	r3
1000c97c:	e00e      	b.n	1000c99c <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000c97e:	481c      	ldr	r0, [pc, #112]	; (1000c9f0 <ble_resolv_rand_addr_handler+0x124>)
1000c980:	4b1c      	ldr	r3, [pc, #112]	; (1000c9f4 <ble_resolv_rand_addr_handler+0x128>)
1000c982:	4798      	blx	r3
1000c984:	481e      	ldr	r0, [pc, #120]	; (1000ca00 <ble_resolv_rand_addr_handler+0x134>)
1000c986:	4b1d      	ldr	r3, [pc, #116]	; (1000c9fc <ble_resolv_rand_addr_handler+0x130>)
1000c988:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000c98a:	235e      	movs	r3, #94	; 0x5e
1000c98c:	4a13      	ldr	r2, [pc, #76]	; (1000c9dc <ble_resolv_rand_addr_handler+0x110>)
1000c98e:	5cd3      	ldrb	r3, [r2, r3]
1000c990:	2b00      	cmp	r3, #0
1000c992:	d0b6      	beq.n	1000c902 <ble_resolv_rand_addr_handler+0x36>
1000c994:	4a1b      	ldr	r2, [pc, #108]	; (1000ca04 <ble_resolv_rand_addr_handler+0x138>)
1000c996:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c998:	2401      	movs	r4, #1
1000c99a:	e7ad      	b.n	1000c8f8 <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000c99c:	4814      	ldr	r0, [pc, #80]	; (1000c9f0 <ble_resolv_rand_addr_handler+0x124>)
1000c99e:	4b15      	ldr	r3, [pc, #84]	; (1000c9f4 <ble_resolv_rand_addr_handler+0x128>)
1000c9a0:	4798      	blx	r3
1000c9a2:	0021      	movs	r1, r4
1000c9a4:	4818      	ldr	r0, [pc, #96]	; (1000ca08 <ble_resolv_rand_addr_handler+0x13c>)
1000c9a6:	4b15      	ldr	r3, [pc, #84]	; (1000c9fc <ble_resolv_rand_addr_handler+0x130>)
1000c9a8:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000c9aa:	0163      	lsls	r3, r4, #5
1000c9ac:	1b1c      	subs	r4, r3, r4
1000c9ae:	00a4      	lsls	r4, r4, #2
1000c9b0:	4b0a      	ldr	r3, [pc, #40]	; (1000c9dc <ble_resolv_rand_addr_handler+0x110>)
1000c9b2:	191c      	adds	r4, r3, r4
1000c9b4:	7ca3      	ldrb	r3, [r4, #18]
1000c9b6:	2b0a      	cmp	r3, #10
1000c9b8:	d107      	bne.n	1000c9ca <ble_resolv_rand_addr_handler+0xfe>
1000c9ba:	e7c4      	b.n	1000c946 <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000c9bc:	480c      	ldr	r0, [pc, #48]	; (1000c9f0 <ble_resolv_rand_addr_handler+0x124>)
1000c9be:	4b0d      	ldr	r3, [pc, #52]	; (1000c9f4 <ble_resolv_rand_addr_handler+0x128>)
1000c9c0:	4798      	blx	r3
1000c9c2:	2105      	movs	r1, #5
1000c9c4:	4810      	ldr	r0, [pc, #64]	; (1000ca08 <ble_resolv_rand_addr_handler+0x13c>)
1000c9c6:	4b0d      	ldr	r3, [pc, #52]	; (1000c9fc <ble_resolv_rand_addr_handler+0x130>)
1000c9c8:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000c9ca:	2000      	movs	r0, #0
1000c9cc:	bc04      	pop	{r2}
1000c9ce:	4690      	mov	r8, r2
1000c9d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c9d2:	46c0      	nop			; (mov r8, r8)
1000c9d4:	10016d3e 	.word	0x10016d3e
1000c9d8:	10012279 	.word	0x10012279
1000c9dc:	10016cf8 	.word	0x10016cf8
1000c9e0:	10016fa4 	.word	0x10016fa4
1000c9e4:	10012297 	.word	0x10012297
1000c9e8:	10016f64 	.word	0x10016f64
1000c9ec:	1000c639 	.word	0x1000c639
1000c9f0:	10013464 	.word	0x10013464
1000c9f4:	100123d9 	.word	0x100123d9
1000c9f8:	10014b18 	.word	0x10014b18
1000c9fc:	100122b9 	.word	0x100122b9
1000ca00:	10014b30 	.word	0x10014b30
1000ca04:	10016dd2 	.word	0x10016dd2
1000ca08:	10014b4c 	.word	0x10014b4c

1000ca0c <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000ca0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ca0e:	0004      	movs	r4, r0
1000ca10:	000d      	movs	r5, r1
	DBG_LOG_DEV("BLE-Event:%d", events);
1000ca12:	4848      	ldr	r0, [pc, #288]	; (1000cb34 <ble_event_manager+0x128>)
1000ca14:	4b48      	ldr	r3, [pc, #288]	; (1000cb38 <ble_event_manager+0x12c>)
1000ca16:	4798      	blx	r3
1000ca18:	0021      	movs	r1, r4
1000ca1a:	4848      	ldr	r0, [pc, #288]	; (1000cb3c <ble_event_manager+0x130>)
1000ca1c:	4b48      	ldr	r3, [pc, #288]	; (1000cb40 <ble_event_manager+0x134>)
1000ca1e:	4798      	blx	r3
	switch(events)
1000ca20:	2c3b      	cmp	r4, #59	; 0x3b
1000ca22:	d879      	bhi.n	1000cb18 <ble_event_manager+0x10c>
1000ca24:	00a3      	lsls	r3, r4, #2
1000ca26:	4a47      	ldr	r2, [pc, #284]	; (1000cb44 <ble_event_manager+0x138>)
1000ca28:	58d3      	ldr	r3, [r2, r3]
1000ca2a:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca2c:	00a4      	lsls	r4, r4, #2
1000ca2e:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000ca30:	4f45      	ldr	r7, [pc, #276]	; (1000cb48 <ble_event_manager+0x13c>)
1000ca32:	59bb      	ldr	r3, [r7, r6]
1000ca34:	2b00      	cmp	r3, #0
1000ca36:	d004      	beq.n	1000ca42 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca38:	591b      	ldr	r3, [r3, r4]
1000ca3a:	2b00      	cmp	r3, #0
1000ca3c:	d001      	beq.n	1000ca42 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000ca3e:	0028      	movs	r0, r5
1000ca40:	4798      	blx	r3
1000ca42:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000ca44:	2e14      	cmp	r6, #20
1000ca46:	d1f4      	bne.n	1000ca32 <ble_event_manager+0x26>
1000ca48:	e072      	b.n	1000cb30 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca4a:	3c13      	subs	r4, #19
1000ca4c:	b2e4      	uxtb	r4, r4
1000ca4e:	00a4      	lsls	r4, r4, #2
1000ca50:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000ca52:	4f3e      	ldr	r7, [pc, #248]	; (1000cb4c <ble_event_manager+0x140>)
1000ca54:	59bb      	ldr	r3, [r7, r6]
1000ca56:	2b00      	cmp	r3, #0
1000ca58:	d004      	beq.n	1000ca64 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca5a:	591b      	ldr	r3, [r3, r4]
1000ca5c:	2b00      	cmp	r3, #0
1000ca5e:	d001      	beq.n	1000ca64 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000ca60:	0028      	movs	r0, r5
1000ca62:	4798      	blx	r3
1000ca64:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000ca66:	2e14      	cmp	r6, #20
1000ca68:	d1f4      	bne.n	1000ca54 <ble_event_manager+0x48>
1000ca6a:	e061      	b.n	1000cb30 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000ca6c:	3c1d      	subs	r4, #29
1000ca6e:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000ca70:	4830      	ldr	r0, [pc, #192]	; (1000cb34 <ble_event_manager+0x128>)
1000ca72:	4b31      	ldr	r3, [pc, #196]	; (1000cb38 <ble_event_manager+0x12c>)
1000ca74:	4798      	blx	r3
1000ca76:	0021      	movs	r1, r4
1000ca78:	4835      	ldr	r0, [pc, #212]	; (1000cb50 <ble_event_manager+0x144>)
1000ca7a:	4b31      	ldr	r3, [pc, #196]	; (1000cb40 <ble_event_manager+0x134>)
1000ca7c:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca7e:	00a4      	lsls	r4, r4, #2
1000ca80:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000ca82:	4f34      	ldr	r7, [pc, #208]	; (1000cb54 <ble_event_manager+0x148>)
1000ca84:	59bb      	ldr	r3, [r7, r6]
1000ca86:	2b00      	cmp	r3, #0
1000ca88:	d004      	beq.n	1000ca94 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000ca8a:	591b      	ldr	r3, [r3, r4]
1000ca8c:	2b00      	cmp	r3, #0
1000ca8e:	d001      	beq.n	1000ca94 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000ca90:	0028      	movs	r0, r5
1000ca92:	4798      	blx	r3
1000ca94:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000ca96:	2e14      	cmp	r6, #20
1000ca98:	d1f4      	bne.n	1000ca84 <ble_event_manager+0x78>
1000ca9a:	e049      	b.n	1000cb30 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000ca9c:	3c27      	subs	r4, #39	; 0x27
1000ca9e:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000caa0:	4b2d      	ldr	r3, [pc, #180]	; (1000cb58 <ble_event_manager+0x14c>)
1000caa2:	681b      	ldr	r3, [r3, #0]
1000caa4:	2b00      	cmp	r3, #0
1000caa6:	d043      	beq.n	1000cb30 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000caa8:	00a4      	lsls	r4, r4, #2
1000caaa:	58e3      	ldr	r3, [r4, r3]
1000caac:	2b00      	cmp	r3, #0
1000caae:	d03f      	beq.n	1000cb30 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000cab0:	0028      	movs	r0, r5
1000cab2:	4798      	blx	r3
1000cab4:	e03c      	b.n	1000cb30 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000cab6:	3c2d      	subs	r4, #45	; 0x2d
1000cab8:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000caba:	4b28      	ldr	r3, [pc, #160]	; (1000cb5c <ble_event_manager+0x150>)
1000cabc:	681b      	ldr	r3, [r3, #0]
1000cabe:	2b00      	cmp	r3, #0
1000cac0:	d036      	beq.n	1000cb30 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000cac2:	00a4      	lsls	r4, r4, #2
1000cac4:	58e3      	ldr	r3, [r4, r3]
1000cac6:	2b00      	cmp	r3, #0
1000cac8:	d032      	beq.n	1000cb30 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000caca:	0028      	movs	r0, r5
1000cacc:	4798      	blx	r3
1000cace:	e02f      	b.n	1000cb30 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000cad0:	3c36      	subs	r4, #54	; 0x36
1000cad2:	b2e4      	uxtb	r4, r4
1000cad4:	00a4      	lsls	r4, r4, #2
1000cad6:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000cad8:	4f21      	ldr	r7, [pc, #132]	; (1000cb60 <ble_event_manager+0x154>)
1000cada:	59bb      	ldr	r3, [r7, r6]
1000cadc:	2b00      	cmp	r3, #0
1000cade:	d004      	beq.n	1000caea <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000cae0:	591b      	ldr	r3, [r3, r4]
1000cae2:	2b00      	cmp	r3, #0
1000cae4:	d001      	beq.n	1000caea <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000cae6:	0028      	movs	r0, r5
1000cae8:	4798      	blx	r3
1000caea:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000caec:	2e14      	cmp	r6, #20
1000caee:	d1f4      	bne.n	1000cada <ble_event_manager+0xce>
1000caf0:	e01e      	b.n	1000cb30 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000caf2:	3c38      	subs	r4, #56	; 0x38
1000caf4:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000caf6:	4b1b      	ldr	r3, [pc, #108]	; (1000cb64 <ble_event_manager+0x158>)
1000caf8:	681b      	ldr	r3, [r3, #0]
1000cafa:	2b00      	cmp	r3, #0
1000cafc:	d018      	beq.n	1000cb30 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000cafe:	00a4      	lsls	r4, r4, #2
1000cb00:	58e3      	ldr	r3, [r4, r3]
1000cb02:	2b00      	cmp	r3, #0
1000cb04:	d014      	beq.n	1000cb30 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000cb06:	0028      	movs	r0, r5
1000cb08:	4798      	blx	r3
1000cb0a:	e011      	b.n	1000cb30 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000cb0c:	4b16      	ldr	r3, [pc, #88]	; (1000cb68 <ble_event_manager+0x15c>)
1000cb0e:	681b      	ldr	r3, [r3, #0]
1000cb10:	2b00      	cmp	r3, #0
1000cb12:	d00d      	beq.n	1000cb30 <ble_event_manager+0x124>
			ble_user_event_cb();
1000cb14:	4798      	blx	r3
1000cb16:	e00b      	b.n	1000cb30 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000cb18:	4e06      	ldr	r6, [pc, #24]	; (1000cb34 <ble_event_manager+0x128>)
1000cb1a:	0030      	movs	r0, r6
1000cb1c:	4d06      	ldr	r5, [pc, #24]	; (1000cb38 <ble_event_manager+0x12c>)
1000cb1e:	47a8      	blx	r5
1000cb20:	0021      	movs	r1, r4
1000cb22:	4812      	ldr	r0, [pc, #72]	; (1000cb6c <ble_event_manager+0x160>)
1000cb24:	4b06      	ldr	r3, [pc, #24]	; (1000cb40 <ble_event_manager+0x134>)
1000cb26:	4798      	blx	r3
		DBG_LOG("\r\n");
1000cb28:	0030      	movs	r0, r6
1000cb2a:	47a8      	blx	r5
1000cb2c:	0030      	movs	r0, r6
1000cb2e:	47a8      	blx	r5
	}
	break;		
	}
}
1000cb30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000cb32:	46c0      	nop			; (mov r8, r8)
1000cb34:	10013464 	.word	0x10013464
1000cb38:	100123d9 	.word	0x100123d9
1000cb3c:	10014b5c 	.word	0x10014b5c
1000cb40:	100122b9 	.word	0x100122b9
1000cb44:	100140bc 	.word	0x100140bc
1000cb48:	10016f7c 	.word	0x10016f7c
1000cb4c:	10016f90 	.word	0x10016f90
1000cb50:	10014b6c 	.word	0x10014b6c
1000cb54:	10016ce4 	.word	0x10016ce4
1000cb58:	10016fd8 	.word	0x10016fd8
1000cb5c:	10016ce0 	.word	0x10016ce0
1000cb60:	10016f68 	.word	0x10016f68
1000cb64:	1001751c 	.word	0x1001751c
1000cb68:	10015908 	.word	0x10015908
1000cb6c:	10014b84 	.word	0x10014b84

1000cb70 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000cb70:	b570      	push	{r4, r5, r6, lr}
1000cb72:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000cb74:	4b0d      	ldr	r3, [pc, #52]	; (1000cbac <ble_event_task+0x3c>)
1000cb76:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000cb78:	2b01      	cmp	r3, #1
1000cb7a:	d101      	bne.n	1000cb80 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000cb7c:	4b0c      	ldr	r3, [pc, #48]	; (1000cbb0 <ble_event_task+0x40>)
1000cb7e:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000cb80:	0022      	movs	r2, r4
1000cb82:	490c      	ldr	r1, [pc, #48]	; (1000cbb4 <ble_event_task+0x44>)
1000cb84:	480c      	ldr	r0, [pc, #48]	; (1000cbb8 <ble_event_task+0x48>)
1000cb86:	4b0d      	ldr	r3, [pc, #52]	; (1000cbbc <ble_event_task+0x4c>)
1000cb88:	4798      	blx	r3
1000cb8a:	0004      	movs	r4, r0
1000cb8c:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000cb8e:	4b07      	ldr	r3, [pc, #28]	; (1000cbac <ble_event_task+0x3c>)
1000cb90:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000cb92:	2b01      	cmp	r3, #1
1000cb94:	d101      	bne.n	1000cb9a <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000cb96:	4b0a      	ldr	r3, [pc, #40]	; (1000cbc0 <ble_event_task+0x50>)
1000cb98:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000cb9a:	2d00      	cmp	r5, #0
1000cb9c:	d104      	bne.n	1000cba8 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000cb9e:	4b06      	ldr	r3, [pc, #24]	; (1000cbb8 <ble_event_task+0x48>)
1000cba0:	7818      	ldrb	r0, [r3, #0]
1000cba2:	4904      	ldr	r1, [pc, #16]	; (1000cbb4 <ble_event_task+0x44>)
1000cba4:	4b07      	ldr	r3, [pc, #28]	; (1000cbc4 <ble_event_task+0x54>)
1000cba6:	4798      	blx	r3
    }
    
    return status;
}
1000cba8:	0020      	movs	r0, r4
1000cbaa:	bd70      	pop	{r4, r5, r6, pc}
1000cbac:	10015917 	.word	0x10015917
1000cbb0:	1000d58d 	.word	0x1000d58d
1000cbb4:	10017310 	.word	0x10017310
1000cbb8:	10016fd4 	.word	0x10016fd4
1000cbbc:	1000de1d 	.word	0x1000de1d
1000cbc0:	1000d565 	.word	0x1000d565
1000cbc4:	1000ca0d 	.word	0x1000ca0d

1000cbc8 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000cbc8:	b530      	push	{r4, r5, lr}
1000cbca:	b091      	sub	sp, #68	; 0x44
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000cbcc:	ac08      	add	r4, sp, #32
1000cbce:	2203      	movs	r2, #3
1000cbd0:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000cbd2:	2302      	movs	r3, #2
1000cbd4:	70a3      	strb	r3, [r4, #2]
1000cbd6:	3316      	adds	r3, #22
1000cbd8:	70e3      	strb	r3, [r4, #3]
1000cbda:	7122      	strb	r2, [r4, #4]
1000cbdc:	7163      	strb	r3, [r4, #5]
1000cbde:	3201      	adds	r2, #1
1000cbe0:	71a2      	strb	r2, [r4, #6]
1000cbe2:	71e3      	strb	r3, [r4, #7]
1000cbe4:	320b      	adds	r2, #11
1000cbe6:	7222      	strb	r2, [r4, #8]
1000cbe8:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000cbea:	2509      	movs	r5, #9
1000cbec:	7025      	strb	r5, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000cbee:	3b0e      	subs	r3, #14
1000cbf0:	72a3      	strb	r3, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000cbf2:	72e5      	strb	r5, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000cbf4:	aa0b      	add	r2, sp, #44	; 0x2c
1000cbf6:	4b16      	ldr	r3, [pc, #88]	; (1000cc50 <ble_advertisement_data_set+0x88>)
1000cbf8:	cb03      	ldmia	r3!, {r0, r1}
1000cbfa:	c203      	stmia	r2!, {r0, r1}
1000cbfc:	781b      	ldrb	r3, [r3, #0]
1000cbfe:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000cc00:	2300      	movs	r3, #0
1000cc02:	466a      	mov	r2, sp
1000cc04:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000cc06:	3315      	adds	r3, #21
1000cc08:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000cc0a:	4812      	ldr	r0, [pc, #72]	; (1000cc54 <ble_advertisement_data_set+0x8c>)
1000cc0c:	4b12      	ldr	r3, [pc, #72]	; (1000cc58 <ble_advertisement_data_set+0x90>)
1000cc0e:	4798      	blx	r3
1000cc10:	4812      	ldr	r0, [pc, #72]	; (1000cc5c <ble_advertisement_data_set+0x94>)
1000cc12:	4b13      	ldr	r3, [pc, #76]	; (1000cc60 <ble_advertisement_data_set+0x98>)
1000cc14:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000cc16:	466b      	mov	r3, sp
1000cc18:	701d      	strb	r5, [r3, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000cc1a:	23ff      	movs	r3, #255	; 0xff
1000cc1c:	466a      	mov	r2, sp
1000cc1e:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000cc20:	2208      	movs	r2, #8
1000cc22:	4910      	ldr	r1, [pc, #64]	; (1000cc64 <ble_advertisement_data_set+0x9c>)
1000cc24:	466b      	mov	r3, sp
1000cc26:	1c98      	adds	r0, r3, #2
1000cc28:	4b0f      	ldr	r3, [pc, #60]	; (1000cc68 <ble_advertisement_data_set+0xa0>)
1000cc2a:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000cc2c:	230a      	movs	r3, #10
1000cc2e:	466a      	mov	r2, sp
1000cc30:	2115      	movs	r1, #21
1000cc32:	0020      	movs	r0, r4
1000cc34:	4c0d      	ldr	r4, [pc, #52]	; (1000cc6c <ble_advertisement_data_set+0xa4>)
1000cc36:	47a0      	blx	r4
1000cc38:	2800      	cmp	r0, #0
1000cc3a:	d005      	beq.n	1000cc48 <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000cc3c:	4805      	ldr	r0, [pc, #20]	; (1000cc54 <ble_advertisement_data_set+0x8c>)
1000cc3e:	4b06      	ldr	r3, [pc, #24]	; (1000cc58 <ble_advertisement_data_set+0x90>)
1000cc40:	4798      	blx	r3
1000cc42:	480b      	ldr	r0, [pc, #44]	; (1000cc70 <ble_advertisement_data_set+0xa8>)
1000cc44:	4b06      	ldr	r3, [pc, #24]	; (1000cc60 <ble_advertisement_data_set+0x98>)
1000cc46:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000cc48:	2000      	movs	r0, #0
1000cc4a:	b011      	add	sp, #68	; 0x44
1000cc4c:	bd30      	pop	{r4, r5, pc}
1000cc4e:	46c0      	nop			; (mov r8, r8)
1000cc50:	100148a0 	.word	0x100148a0
1000cc54:	10013464 	.word	0x10013464
1000cc58:	100123d9 	.word	0x100123d9
1000cc5c:	10014ba4 	.word	0x10014ba4
1000cc60:	100122b9 	.word	0x100122b9
1000cc64:	10014bd8 	.word	0x10014bd8
1000cc68:	10012297 	.word	0x10012297
1000cc6c:	1000e87d 	.word	0x1000e87d
1000cc70:	10014be4 	.word	0x10014be4

1000cc74 <register_ble_user_event_cb>:

/** @brief function to register callback to be called when AT_BLE_PLATFORM_EVENT event triggered from stack */
void register_ble_user_event_cb(ble_user_event_callback_t cb_fn)
{
	ble_user_event_cb = cb_fn;
1000cc74:	4b01      	ldr	r3, [pc, #4]	; (1000cc7c <register_ble_user_event_cb+0x8>)
1000cc76:	6018      	str	r0, [r3, #0]
}
1000cc78:	4770      	bx	lr
1000cc7a:	46c0      	nop			; (mov r8, r8)
1000cc7c:	10015908 	.word	0x10015908

1000cc80 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000cc80:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000cc82:	4b0e      	ldr	r3, [pc, #56]	; (1000ccbc <uart_read_complete_callback+0x3c>)
1000cc84:	781b      	ldrb	r3, [r3, #0]
1000cc86:	2b01      	cmp	r3, #1
1000cc88:	d10b      	bne.n	1000cca2 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000cc8a:	2202      	movs	r2, #2
1000cc8c:	4b0b      	ldr	r3, [pc, #44]	; (1000ccbc <uart_read_complete_callback+0x3c>)
1000cc8e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000cc90:	4b0b      	ldr	r3, [pc, #44]	; (1000ccc0 <uart_read_complete_callback+0x40>)
1000cc92:	681b      	ldr	r3, [r3, #0]
1000cc94:	2b00      	cmp	r3, #0
1000cc96:	d110      	bne.n	1000ccba <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000cc98:	2102      	movs	r1, #2
1000cc9a:	480a      	ldr	r0, [pc, #40]	; (1000ccc4 <uart_read_complete_callback+0x44>)
1000cc9c:	4b0a      	ldr	r3, [pc, #40]	; (1000ccc8 <uart_read_complete_callback+0x48>)
1000cc9e:	4798      	blx	r3
1000cca0:	e00b      	b.n	1000ccba <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000cca2:	4b07      	ldr	r3, [pc, #28]	; (1000ccc0 <uart_read_complete_callback+0x40>)
1000cca4:	681b      	ldr	r3, [r3, #0]
1000cca6:	2b00      	cmp	r3, #0
1000cca8:	d007      	beq.n	1000ccba <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000ccaa:	4c08      	ldr	r4, [pc, #32]	; (1000cccc <uart_read_complete_callback+0x4c>)
1000ccac:	7820      	ldrb	r0, [r4, #0]
1000ccae:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ccb0:	2201      	movs	r2, #1
1000ccb2:	0021      	movs	r1, r4
1000ccb4:	4803      	ldr	r0, [pc, #12]	; (1000ccc4 <uart_read_complete_callback+0x44>)
1000ccb6:	4b06      	ldr	r3, [pc, #24]	; (1000ccd0 <uart_read_complete_callback+0x50>)
1000ccb8:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000ccba:	bd10      	pop	{r4, pc}
1000ccbc:	1001691c 	.word	0x1001691c
1000ccc0:	10016924 	.word	0x10016924
1000ccc4:	10017520 	.word	0x10017520
1000ccc8:	1000b665 	.word	0x1000b665
1000cccc:	10016920 	.word	0x10016920
1000ccd0:	1000b609 	.word	0x1000b609

1000ccd4 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000ccd4:	b570      	push	{r4, r5, r6, lr}
1000ccd6:	0006      	movs	r6, r0
1000ccd8:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000ccda:	4c03      	ldr	r4, [pc, #12]	; (1000cce8 <usart_serial_getchar+0x14>)
1000ccdc:	0029      	movs	r1, r5
1000ccde:	0030      	movs	r0, r6
1000cce0:	47a0      	blx	r4
1000cce2:	2800      	cmp	r0, #0
1000cce4:	d1fa      	bne.n	1000ccdc <usart_serial_getchar+0x8>
}
1000cce6:	bd70      	pop	{r4, r5, r6, pc}
1000cce8:	1000b5f5 	.word	0x1000b5f5

1000ccec <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000ccec:	b570      	push	{r4, r5, r6, lr}
1000ccee:	0006      	movs	r6, r0
1000ccf0:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000ccf2:	4c03      	ldr	r4, [pc, #12]	; (1000cd00 <usart_serial_putchar+0x14>)
1000ccf4:	0029      	movs	r1, r5
1000ccf6:	0030      	movs	r0, r6
1000ccf8:	47a0      	blx	r4
1000ccfa:	2800      	cmp	r0, #0
1000ccfc:	d1fa      	bne.n	1000ccf4 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000ccfe:	bd70      	pop	{r4, r5, r6, pc}
1000cd00:	1000b5e5 	.word	0x1000b5e5

1000cd04 <serial_console_init>:

void serial_console_init(void)
{
1000cd04:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000cd06:	2100      	movs	r1, #0
1000cd08:	2000      	movs	r0, #0
1000cd0a:	4b19      	ldr	r3, [pc, #100]	; (1000cd70 <serial_console_init+0x6c>)
1000cd0c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000cd0e:	4c19      	ldr	r4, [pc, #100]	; (1000cd74 <serial_console_init+0x70>)
1000cd10:	0020      	movs	r0, r4
1000cd12:	4b19      	ldr	r3, [pc, #100]	; (1000cd78 <serial_console_init+0x74>)
1000cd14:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000cd16:	23e1      	movs	r3, #225	; 0xe1
1000cd18:	025b      	lsls	r3, r3, #9
1000cd1a:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000cd1c:	2302      	movs	r3, #2
1000cd1e:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000cd20:	2203      	movs	r2, #3
1000cd22:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000cd24:	3201      	adds	r2, #1
1000cd26:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000cd28:	3201      	adds	r2, #1
1000cd2a:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000cd2c:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000cd2e:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000cd30:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000cd32:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000cd34:	4d11      	ldr	r5, [pc, #68]	; (1000cd7c <serial_console_init+0x78>)
1000cd36:	4b12      	ldr	r3, [pc, #72]	; (1000cd80 <serial_console_init+0x7c>)
1000cd38:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000cd3a:	4a12      	ldr	r2, [pc, #72]	; (1000cd84 <serial_console_init+0x80>)
1000cd3c:	4b12      	ldr	r3, [pc, #72]	; (1000cd88 <serial_console_init+0x84>)
1000cd3e:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000cd40:	4a12      	ldr	r2, [pc, #72]	; (1000cd8c <serial_console_init+0x88>)
1000cd42:	4b13      	ldr	r3, [pc, #76]	; (1000cd90 <serial_console_init+0x8c>)
1000cd44:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000cd46:	0022      	movs	r2, r4
1000cd48:	4912      	ldr	r1, [pc, #72]	; (1000cd94 <serial_console_init+0x90>)
1000cd4a:	0028      	movs	r0, r5
1000cd4c:	4b12      	ldr	r3, [pc, #72]	; (1000cd98 <serial_console_init+0x94>)
1000cd4e:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000cd50:	4e12      	ldr	r6, [pc, #72]	; (1000cd9c <serial_console_init+0x98>)
1000cd52:	6833      	ldr	r3, [r6, #0]
1000cd54:	6898      	ldr	r0, [r3, #8]
1000cd56:	2100      	movs	r1, #0
1000cd58:	4c11      	ldr	r4, [pc, #68]	; (1000cda0 <serial_console_init+0x9c>)
1000cd5a:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000cd5c:	6833      	ldr	r3, [r6, #0]
1000cd5e:	6858      	ldr	r0, [r3, #4]
1000cd60:	2100      	movs	r1, #0
1000cd62:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000cd64:	2202      	movs	r2, #2
1000cd66:	490f      	ldr	r1, [pc, #60]	; (1000cda4 <serial_console_init+0xa0>)
1000cd68:	0028      	movs	r0, r5
1000cd6a:	4b0f      	ldr	r3, [pc, #60]	; (1000cda8 <serial_console_init+0xa4>)
1000cd6c:	4798      	blx	r3
}
1000cd6e:	bd70      	pop	{r4, r5, r6, pc}
1000cd70:	1000a605 	.word	0x1000a605
1000cd74:	10017544 	.word	0x10017544
1000cd78:	1000b3fd 	.word	0x1000b3fd
1000cd7c:	10017520 	.word	0x10017520
1000cd80:	10016cdc 	.word	0x10016cdc
1000cd84:	1000cced 	.word	0x1000cced
1000cd88:	10016cd8 	.word	0x10016cd8
1000cd8c:	1000ccd5 	.word	0x1000ccd5
1000cd90:	10016cd4 	.word	0x10016cd4
1000cd94:	40004000 	.word	0x40004000
1000cd98:	1000b429 	.word	0x1000b429
1000cd9c:	10014ff8 	.word	0x10014ff8
1000cda0:	10012465 	.word	0x10012465
1000cda4:	1000cc81 	.word	0x1000cc81
1000cda8:	1000b631 	.word	0x1000b631

1000cdac <_time_start>:

void _time_start(unsigned int sec)
{
1000cdac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdae:	b083      	sub	sp, #12
1000cdb0:	0005      	movs	r5, r0
	system_clock_get_value();
1000cdb2:	4c0d      	ldr	r4, [pc, #52]	; (1000cde8 <_time_start+0x3c>)
1000cdb4:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000cdb6:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000cdb8:	4f0c      	ldr	r7, [pc, #48]	; (1000cdec <_time_start+0x40>)
1000cdba:	47b8      	blx	r7
1000cdbc:	4e0c      	ldr	r6, [pc, #48]	; (1000cdf0 <_time_start+0x44>)
1000cdbe:	4a0d      	ldr	r2, [pc, #52]	; (1000cdf4 <_time_start+0x48>)
1000cdc0:	4b0d      	ldr	r3, [pc, #52]	; (1000cdf8 <_time_start+0x4c>)
1000cdc2:	47b0      	blx	r6
1000cdc4:	9000      	str	r0, [sp, #0]
1000cdc6:	9101      	str	r1, [sp, #4]
1000cdc8:	20fa      	movs	r0, #250	; 0xfa
1000cdca:	0080      	lsls	r0, r0, #2
1000cdcc:	4368      	muls	r0, r5
1000cdce:	47b8      	blx	r7
1000cdd0:	0002      	movs	r2, r0
1000cdd2:	000b      	movs	r3, r1
1000cdd4:	9800      	ldr	r0, [sp, #0]
1000cdd6:	9901      	ldr	r1, [sp, #4]
1000cdd8:	47b0      	blx	r6
1000cdda:	4b08      	ldr	r3, [pc, #32]	; (1000cdfc <_time_start+0x50>)
1000cddc:	4798      	blx	r3
1000cdde:	4b08      	ldr	r3, [pc, #32]	; (1000ce00 <_time_start+0x54>)
1000cde0:	6018      	str	r0, [r3, #0]
}
1000cde2:	b003      	add	sp, #12
1000cde4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cde6:	46c0      	nop			; (mov r8, r8)
1000cde8:	1000a689 	.word	0x1000a689
1000cdec:	10011ee9 	.word	0x10011ee9
1000cdf0:	100112e1 	.word	0x100112e1
1000cdf4:	19feaec7 	.word	0x19feaec7
1000cdf8:	3f09d8ef 	.word	0x3f09d8ef
1000cdfc:	100112a5 	.word	0x100112a5
1000ce00:	10016918 	.word	0x10016918

1000ce04 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000ce04:	4b02      	ldr	r3, [pc, #8]	; (1000ce10 <_time_done+0xc>)
1000ce06:	681a      	ldr	r2, [r3, #0]
1000ce08:	1e50      	subs	r0, r2, #1
1000ce0a:	6018      	str	r0, [r3, #0]
}
1000ce0c:	4770      	bx	lr
1000ce0e:	46c0      	nop			; (mov r8, r8)
1000ce10:	10016918 	.word	0x10016918

1000ce14 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000ce14:	b570      	push	{r4, r5, r6, lr}
1000ce16:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000ce18:	2201      	movs	r2, #1
1000ce1a:	4b11      	ldr	r3, [pc, #68]	; (1000ce60 <getchar_b11_timeout+0x4c>)
1000ce1c:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000ce1e:	4b11      	ldr	r3, [pc, #68]	; (1000ce64 <getchar_b11_timeout+0x50>)
1000ce20:	681b      	ldr	r3, [r3, #0]
1000ce22:	2b00      	cmp	r3, #0
1000ce24:	d103      	bne.n	1000ce2e <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000ce26:	2102      	movs	r1, #2
1000ce28:	480f      	ldr	r0, [pc, #60]	; (1000ce68 <getchar_b11_timeout+0x54>)
1000ce2a:	4b10      	ldr	r3, [pc, #64]	; (1000ce6c <getchar_b11_timeout+0x58>)
1000ce2c:	4798      	blx	r3

	_time_start(sec);
1000ce2e:	0020      	movs	r0, r4
1000ce30:	4b0f      	ldr	r3, [pc, #60]	; (1000ce70 <getchar_b11_timeout+0x5c>)
1000ce32:	4798      	blx	r3
	
	string_input[0] = 0;
1000ce34:	490f      	ldr	r1, [pc, #60]	; (1000ce74 <getchar_b11_timeout+0x60>)
1000ce36:	2300      	movs	r3, #0
1000ce38:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000ce3a:	2201      	movs	r2, #1
1000ce3c:	480a      	ldr	r0, [pc, #40]	; (1000ce68 <getchar_b11_timeout+0x54>)
1000ce3e:	4b0e      	ldr	r3, [pc, #56]	; (1000ce78 <getchar_b11_timeout+0x64>)
1000ce40:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000ce42:	4c07      	ldr	r4, [pc, #28]	; (1000ce60 <getchar_b11_timeout+0x4c>)
1000ce44:	4d0d      	ldr	r5, [pc, #52]	; (1000ce7c <getchar_b11_timeout+0x68>)
1000ce46:	7823      	ldrb	r3, [r4, #0]
1000ce48:	2b02      	cmp	r3, #2
1000ce4a:	d002      	beq.n	1000ce52 <getchar_b11_timeout+0x3e>
1000ce4c:	47a8      	blx	r5
1000ce4e:	2800      	cmp	r0, #0
1000ce50:	d1f9      	bne.n	1000ce46 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000ce52:	2200      	movs	r2, #0
1000ce54:	4b02      	ldr	r3, [pc, #8]	; (1000ce60 <getchar_b11_timeout+0x4c>)
1000ce56:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000ce58:	4b06      	ldr	r3, [pc, #24]	; (1000ce74 <getchar_b11_timeout+0x60>)
1000ce5a:	7818      	ldrb	r0, [r3, #0]
}
1000ce5c:	bd70      	pop	{r4, r5, r6, pc}
1000ce5e:	46c0      	nop			; (mov r8, r8)
1000ce60:	1001691c 	.word	0x1001691c
1000ce64:	10016924 	.word	0x10016924
1000ce68:	10017520 	.word	0x10017520
1000ce6c:	1000b645 	.word	0x1000b645
1000ce70:	1000cdad 	.word	0x1000cdad
1000ce74:	10016920 	.word	0x10016920
1000ce78:	1000b609 	.word	0x1000b609
1000ce7c:	1000ce05 	.word	0x1000ce05

1000ce80 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000ce80:	4b02      	ldr	r3, [pc, #8]	; (1000ce8c <platform_event_free+0xc>)
1000ce82:	681a      	ldr	r2, [r3, #0]
1000ce84:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000ce86:	6018      	str	r0, [r3, #0]
}
1000ce88:	4770      	bx	lr
1000ce8a:	46c0      	nop			; (mov r8, r8)
1000ce8c:	1001692c 	.word	0x1001692c

1000ce90 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000ce90:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000ce92:	4b0b      	ldr	r3, [pc, #44]	; (1000cec0 <platform_event_post+0x30>)
1000ce94:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000ce96:	2c00      	cmp	r4, #0
1000ce98:	d011      	beq.n	1000cebe <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000ce9a:	6825      	ldr	r5, [r4, #0]
1000ce9c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000ce9e:	2300      	movs	r3, #0
1000cea0:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000cea2:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000cea4:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000cea6:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000cea8:	4b06      	ldr	r3, [pc, #24]	; (1000cec4 <platform_event_post+0x34>)
1000ceaa:	681a      	ldr	r2, [r3, #0]
1000ceac:	2a00      	cmp	r2, #0
1000ceae:	d102      	bne.n	1000ceb6 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000ceb0:	601c      	str	r4, [r3, #0]
1000ceb2:	e004      	b.n	1000cebe <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000ceb4:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000ceb6:	6813      	ldr	r3, [r2, #0]
1000ceb8:	2b00      	cmp	r3, #0
1000ceba:	d1fb      	bne.n	1000ceb4 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000cebc:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000cebe:	bd30      	pop	{r4, r5, pc}
1000cec0:	1001692c 	.word	0x1001692c
1000cec4:	10016928 	.word	0x10016928

1000cec8 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000cec8:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000ceca:	2300      	movs	r3, #0
1000cecc:	4a06      	ldr	r2, [pc, #24]	; (1000cee8 <platform_event_init+0x20>)
1000cece:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000ced0:	4a06      	ldr	r2, [pc, #24]	; (1000ceec <platform_event_init+0x24>)
1000ced2:	6013      	str	r3, [r2, #0]
1000ced4:	4c06      	ldr	r4, [pc, #24]	; (1000cef0 <platform_event_init+0x28>)
1000ced6:	0026      	movs	r6, r4
1000ced8:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000ceda:	4d06      	ldr	r5, [pc, #24]	; (1000cef4 <platform_event_init+0x2c>)
1000cedc:	0020      	movs	r0, r4
1000cede:	47a8      	blx	r5
1000cee0:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000cee2:	42b4      	cmp	r4, r6
1000cee4:	d1fa      	bne.n	1000cedc <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000cee6:	bd70      	pop	{r4, r5, r6, pc}
1000cee8:	1001692c 	.word	0x1001692c
1000ceec:	10016928 	.word	0x10016928
1000cef0:	10016930 	.word	0x10016930
1000cef4:	1000ce81 	.word	0x1000ce81

1000cef8 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000cef8:	b570      	push	{r4, r5, r6, lr}
1000cefa:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000cefc:	4b13      	ldr	r3, [pc, #76]	; (1000cf4c <at_ke_msg_send+0x54>)
1000cefe:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000cf00:	4b13      	ldr	r3, [pc, #76]	; (1000cf50 <at_ke_msg_send+0x58>)
1000cf02:	681b      	ldr	r3, [r3, #0]
1000cf04:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000cf06:	2c0c      	cmp	r4, #12
1000cf08:	d01f      	beq.n	1000cf4a <at_ke_msg_send+0x52>
1000cf0a:	3c0c      	subs	r4, #12
1000cf0c:	88e3      	ldrh	r3, [r4, #6]
1000cf0e:	2b05      	cmp	r3, #5
1000cf10:	d01b      	beq.n	1000cf4a <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000cf12:	07eb      	lsls	r3, r5, #31
1000cf14:	d414      	bmi.n	1000cf40 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000cf16:	4b0f      	ldr	r3, [pc, #60]	; (1000cf54 <at_ke_msg_send+0x5c>)
1000cf18:	681b      	ldr	r3, [r3, #0]
1000cf1a:	2002      	movs	r0, #2
1000cf1c:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000cf1e:	4b0e      	ldr	r3, [pc, #56]	; (1000cf58 <at_ke_msg_send+0x60>)
1000cf20:	681b      	ldr	r3, [r3, #0]
1000cf22:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000cf24:	4c0d      	ldr	r4, [pc, #52]	; (1000cf5c <at_ke_msg_send+0x64>)
1000cf26:	2003      	movs	r0, #3
1000cf28:	6823      	ldr	r3, [r4, #0]
1000cf2a:	4798      	blx	r3
1000cf2c:	2800      	cmp	r0, #0
1000cf2e:	d1fa      	bne.n	1000cf26 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000cf30:	4b0b      	ldr	r3, [pc, #44]	; (1000cf60 <at_ke_msg_send+0x68>)
1000cf32:	681b      	ldr	r3, [r3, #0]
1000cf34:	3002      	adds	r0, #2
1000cf36:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000cf38:	2201      	movs	r2, #1
1000cf3a:	4b0a      	ldr	r3, [pc, #40]	; (1000cf64 <at_ke_msg_send+0x6c>)
1000cf3c:	601a      	str	r2, [r3, #0]
1000cf3e:	e004      	b.n	1000cf4a <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000cf40:	4b09      	ldr	r3, [pc, #36]	; (1000cf68 <at_ke_msg_send+0x70>)
1000cf42:	6818      	ldr	r0, [r3, #0]
1000cf44:	4b09      	ldr	r3, [pc, #36]	; (1000cf6c <at_ke_msg_send+0x74>)
1000cf46:	681b      	ldr	r3, [r3, #0]
1000cf48:	4798      	blx	r3
		}
	}
}
1000cf4a:	bd70      	pop	{r4, r5, r6, pc}
1000cf4c:	4000b1ec 	.word	0x4000b1ec
1000cf50:	100169d8 	.word	0x100169d8
1000cf54:	100169d0 	.word	0x100169d0
1000cf58:	100169e4 	.word	0x100169e4
1000cf5c:	100169bc 	.word	0x100169bc
1000cf60:	100169c4 	.word	0x100169c4
1000cf64:	4000b020 	.word	0x4000b020
1000cf68:	100169c8 	.word	0x100169c8
1000cf6c:	100169b8 	.word	0x100169b8

1000cf70 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000cf70:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000cf72:	4b06      	ldr	r3, [pc, #24]	; (1000cf8c <samb11_plf_resume_callback+0x1c>)
1000cf74:	4a06      	ldr	r2, [pc, #24]	; (1000cf90 <samb11_plf_resume_callback+0x20>)
1000cf76:	6819      	ldr	r1, [r3, #0]
1000cf78:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000cf7a:	685a      	ldr	r2, [r3, #4]
1000cf7c:	4b05      	ldr	r3, [pc, #20]	; (1000cf94 <samb11_plf_resume_callback+0x24>)
1000cf7e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000cf80:	4b05      	ldr	r3, [pc, #20]	; (1000cf98 <samb11_plf_resume_callback+0x28>)
1000cf82:	681b      	ldr	r3, [r3, #0]
1000cf84:	2b00      	cmp	r3, #0
1000cf86:	d000      	beq.n	1000cf8a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000cf88:	4798      	blx	r3
	}
}
1000cf8a:	bd10      	pop	{r4, pc}
1000cf8c:	1001756c 	.word	0x1001756c
1000cf90:	4000b00c 	.word	0x4000b00c
1000cf94:	4000b010 	.word	0x4000b010
1000cf98:	10017848 	.word	0x10017848

1000cf9c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000cf9c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000cf9e:	2232      	movs	r2, #50	; 0x32
1000cfa0:	2100      	movs	r1, #0
1000cfa2:	480d      	ldr	r0, [pc, #52]	; (1000cfd8 <init_port_list+0x3c>)
1000cfa4:	4b0d      	ldr	r3, [pc, #52]	; (1000cfdc <init_port_list+0x40>)
1000cfa6:	4798      	blx	r3
1000cfa8:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cfaa:	480b      	ldr	r0, [pc, #44]	; (1000cfd8 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000cfac:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000cfae:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000cfb0:	004a      	lsls	r2, r1, #1
1000cfb2:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000cfb4:	1882      	adds	r2, r0, r2
1000cfb6:	7853      	ldrb	r3, [r2, #1]
1000cfb8:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000cfba:	b2db      	uxtb	r3, r3
1000cfbc:	43a3      	bics	r3, r4
1000cfbe:	7053      	strb	r3, [r2, #1]
1000cfc0:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000cfc2:	2919      	cmp	r1, #25
1000cfc4:	d1f4      	bne.n	1000cfb0 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000cfc6:	4b04      	ldr	r3, [pc, #16]	; (1000cfd8 <init_port_list+0x3c>)
1000cfc8:	785a      	ldrb	r2, [r3, #1]
1000cfca:	3918      	subs	r1, #24
1000cfcc:	438a      	bics	r2, r1
1000cfce:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000cfd0:	78da      	ldrb	r2, [r3, #3]
1000cfd2:	438a      	bics	r2, r1
1000cfd4:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000cfd6:	bd70      	pop	{r4, r5, r6, pc}
1000cfd8:	10017588 	.word	0x10017588
1000cfdc:	100122a9 	.word	0x100122a9

1000cfe0 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000cfe0:	4a06      	ldr	r2, [pc, #24]	; (1000cffc <init_clock+0x1c>)
1000cfe2:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000cfe4:	4b06      	ldr	r3, [pc, #24]	; (1000d000 <init_clock+0x20>)
1000cfe6:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000cfe8:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000cfea:	4a06      	ldr	r2, [pc, #24]	; (1000d004 <init_clock+0x24>)
1000cfec:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000cfee:	4906      	ldr	r1, [pc, #24]	; (1000d008 <init_clock+0x28>)
1000cff0:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000cff2:	4b06      	ldr	r3, [pc, #24]	; (1000d00c <init_clock+0x2c>)
1000cff4:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000cff6:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000cff8:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000cffa:	4770      	bx	lr
1000cffc:	4000b00c 	.word	0x4000b00c
1000d000:	fffe0fd3 	.word	0xfffe0fd3
1000d004:	1001756c 	.word	0x1001756c
1000d008:	4000b010 	.word	0x4000b010
1000d00c:	ffffe7c0 	.word	0xffffe7c0

1000d010 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d010:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d012:	4657      	mov	r7, sl
1000d014:	464e      	mov	r6, r9
1000d016:	4645      	mov	r5, r8
1000d018:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d01a:	4b4f      	ldr	r3, [pc, #316]	; (1000d158 <platform_driver_init+0x148>)
1000d01c:	781b      	ldrb	r3, [r3, #0]
1000d01e:	2b00      	cmp	r3, #0
1000d020:	d004      	beq.n	1000d02c <platform_driver_init+0x1c>
1000d022:	4b4d      	ldr	r3, [pc, #308]	; (1000d158 <platform_driver_init+0x148>)
1000d024:	781b      	ldrb	r3, [r3, #0]
1000d026:	2b01      	cmp	r3, #1
1000d028:	d100      	bne.n	1000d02c <platform_driver_init+0x1c>
1000d02a:	e08c      	b.n	1000d146 <platform_driver_init+0x136>
		init_port_list();
1000d02c:	4b4b      	ldr	r3, [pc, #300]	; (1000d15c <platform_driver_init+0x14c>)
1000d02e:	4798      	blx	r3
		init_clock();
1000d030:	4b4b      	ldr	r3, [pc, #300]	; (1000d160 <platform_driver_init+0x150>)
1000d032:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d034:	2300      	movs	r3, #0
1000d036:	4698      	mov	r8, r3
1000d038:	4b4a      	ldr	r3, [pc, #296]	; (1000d164 <platform_driver_init+0x154>)
1000d03a:	4642      	mov	r2, r8
1000d03c:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d03e:	4c4a      	ldr	r4, [pc, #296]	; (1000d168 <platform_driver_init+0x158>)
1000d040:	2380      	movs	r3, #128	; 0x80
1000d042:	2280      	movs	r2, #128	; 0x80
1000d044:	0412      	lsls	r2, r2, #16
1000d046:	4692      	mov	sl, r2
1000d048:	50e2      	str	r2, [r4, r3]
1000d04a:	2280      	movs	r2, #128	; 0x80
1000d04c:	0452      	lsls	r2, r2, #17
1000d04e:	4691      	mov	r9, r2
1000d050:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d052:	4d46      	ldr	r5, [pc, #280]	; (1000d16c <platform_driver_init+0x15c>)
1000d054:	4b46      	ldr	r3, [pc, #280]	; (1000d170 <platform_driver_init+0x160>)
1000d056:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d058:	4b46      	ldr	r3, [pc, #280]	; (1000d174 <platform_driver_init+0x164>)
1000d05a:	4a47      	ldr	r2, [pc, #284]	; (1000d178 <platform_driver_init+0x168>)
1000d05c:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d05e:	4947      	ldr	r1, [pc, #284]	; (1000d17c <platform_driver_init+0x16c>)
1000d060:	4a47      	ldr	r2, [pc, #284]	; (1000d180 <platform_driver_init+0x170>)
1000d062:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d064:	4a47      	ldr	r2, [pc, #284]	; (1000d184 <platform_driver_init+0x174>)
1000d066:	6811      	ldr	r1, [r2, #0]
1000d068:	4a47      	ldr	r2, [pc, #284]	; (1000d188 <platform_driver_init+0x178>)
1000d06a:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d06c:	4a47      	ldr	r2, [pc, #284]	; (1000d18c <platform_driver_init+0x17c>)
1000d06e:	6811      	ldr	r1, [r2, #0]
1000d070:	4a47      	ldr	r2, [pc, #284]	; (1000d190 <platform_driver_init+0x180>)
1000d072:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d074:	4947      	ldr	r1, [pc, #284]	; (1000d194 <platform_driver_init+0x184>)
1000d076:	4a48      	ldr	r2, [pc, #288]	; (1000d198 <platform_driver_init+0x188>)
1000d078:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d07a:	4948      	ldr	r1, [pc, #288]	; (1000d19c <platform_driver_init+0x18c>)
1000d07c:	4a48      	ldr	r2, [pc, #288]	; (1000d1a0 <platform_driver_init+0x190>)
1000d07e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d080:	4f48      	ldr	r7, [pc, #288]	; (1000d1a4 <platform_driver_init+0x194>)
1000d082:	4a49      	ldr	r2, [pc, #292]	; (1000d1a8 <platform_driver_init+0x198>)
1000d084:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d086:	4949      	ldr	r1, [pc, #292]	; (1000d1ac <platform_driver_init+0x19c>)
1000d088:	4a49      	ldr	r2, [pc, #292]	; (1000d1b0 <platform_driver_init+0x1a0>)
1000d08a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d08c:	4949      	ldr	r1, [pc, #292]	; (1000d1b4 <platform_driver_init+0x1a4>)
1000d08e:	4a4a      	ldr	r2, [pc, #296]	; (1000d1b8 <platform_driver_init+0x1a8>)
1000d090:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d092:	4e4a      	ldr	r6, [pc, #296]	; (1000d1bc <platform_driver_init+0x1ac>)
1000d094:	4a4a      	ldr	r2, [pc, #296]	; (1000d1c0 <platform_driver_init+0x1b0>)
1000d096:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d098:	494a      	ldr	r1, [pc, #296]	; (1000d1c4 <platform_driver_init+0x1b4>)
1000d09a:	4a4b      	ldr	r2, [pc, #300]	; (1000d1c8 <platform_driver_init+0x1b8>)
1000d09c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d09e:	494b      	ldr	r1, [pc, #300]	; (1000d1cc <platform_driver_init+0x1bc>)
1000d0a0:	4a4b      	ldr	r2, [pc, #300]	; (1000d1d0 <platform_driver_init+0x1c0>)
1000d0a2:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d0a4:	494b      	ldr	r1, [pc, #300]	; (1000d1d4 <platform_driver_init+0x1c4>)
1000d0a6:	4a4c      	ldr	r2, [pc, #304]	; (1000d1d8 <platform_driver_init+0x1c8>)
1000d0a8:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d0aa:	494c      	ldr	r1, [pc, #304]	; (1000d1dc <platform_driver_init+0x1cc>)
1000d0ac:	4a4c      	ldr	r2, [pc, #304]	; (1000d1e0 <platform_driver_init+0x1d0>)
1000d0ae:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d0b0:	494c      	ldr	r1, [pc, #304]	; (1000d1e4 <platform_driver_init+0x1d4>)
1000d0b2:	4a4d      	ldr	r2, [pc, #308]	; (1000d1e8 <platform_driver_init+0x1d8>)
1000d0b4:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d0b6:	2028      	movs	r0, #40	; 0x28
1000d0b8:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d0ba:	494c      	ldr	r1, [pc, #304]	; (1000d1ec <platform_driver_init+0x1dc>)
1000d0bc:	2028      	movs	r0, #40	; 0x28
1000d0be:	682b      	ldr	r3, [r5, #0]
1000d0c0:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d0c2:	682b      	ldr	r3, [r5, #0]
1000d0c4:	494a      	ldr	r1, [pc, #296]	; (1000d1f0 <platform_driver_init+0x1e0>)
1000d0c6:	2027      	movs	r0, #39	; 0x27
1000d0c8:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d0ca:	4b4a      	ldr	r3, [pc, #296]	; (1000d1f4 <platform_driver_init+0x1e4>)
1000d0cc:	681a      	ldr	r2, [r3, #0]
1000d0ce:	4b4a      	ldr	r3, [pc, #296]	; (1000d1f8 <platform_driver_init+0x1e8>)
1000d0d0:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d0d2:	4a4a      	ldr	r2, [pc, #296]	; (1000d1fc <platform_driver_init+0x1ec>)
1000d0d4:	4b4a      	ldr	r3, [pc, #296]	; (1000d200 <platform_driver_init+0x1f0>)
1000d0d6:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d0d8:	4a4a      	ldr	r2, [pc, #296]	; (1000d204 <platform_driver_init+0x1f4>)
1000d0da:	4b4b      	ldr	r3, [pc, #300]	; (1000d208 <platform_driver_init+0x1f8>)
1000d0dc:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d0de:	4a4b      	ldr	r2, [pc, #300]	; (1000d20c <platform_driver_init+0x1fc>)
1000d0e0:	4b4b      	ldr	r3, [pc, #300]	; (1000d210 <platform_driver_init+0x200>)
1000d0e2:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d0e4:	4a4b      	ldr	r2, [pc, #300]	; (1000d214 <platform_driver_init+0x204>)
1000d0e6:	4b4c      	ldr	r3, [pc, #304]	; (1000d218 <platform_driver_init+0x208>)
1000d0e8:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d0ea:	4a4c      	ldr	r2, [pc, #304]	; (1000d21c <platform_driver_init+0x20c>)
1000d0ec:	4b4c      	ldr	r3, [pc, #304]	; (1000d220 <platform_driver_init+0x210>)
1000d0ee:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d0f0:	4a4c      	ldr	r2, [pc, #304]	; (1000d224 <platform_driver_init+0x214>)
1000d0f2:	4b4d      	ldr	r3, [pc, #308]	; (1000d228 <platform_driver_init+0x218>)
1000d0f4:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d0f6:	4a4d      	ldr	r2, [pc, #308]	; (1000d22c <platform_driver_init+0x21c>)
1000d0f8:	4b4d      	ldr	r3, [pc, #308]	; (1000d230 <platform_driver_init+0x220>)
1000d0fa:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d0fc:	22a0      	movs	r2, #160	; 0xa0
1000d0fe:	0092      	lsls	r2, r2, #2
1000d100:	2100      	movs	r1, #0
1000d102:	484c      	ldr	r0, [pc, #304]	; (1000d234 <platform_driver_init+0x224>)
1000d104:	4b4c      	ldr	r3, [pc, #304]	; (1000d238 <platform_driver_init+0x228>)
1000d106:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d108:	2280      	movs	r2, #128	; 0x80
1000d10a:	0092      	lsls	r2, r2, #2
1000d10c:	4b4b      	ldr	r3, [pc, #300]	; (1000d23c <platform_driver_init+0x22c>)
1000d10e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d110:	4b4b      	ldr	r3, [pc, #300]	; (1000d240 <platform_driver_init+0x230>)
1000d112:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d114:	4653      	mov	r3, sl
1000d116:	6023      	str	r3, [r4, #0]
1000d118:	464b      	mov	r3, r9
1000d11a:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d11c:	4b49      	ldr	r3, [pc, #292]	; (1000d244 <platform_driver_init+0x234>)
1000d11e:	4642      	mov	r2, r8
1000d120:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d122:	683b      	ldr	r3, [r7, #0]
1000d124:	4a48      	ldr	r2, [pc, #288]	; (1000d248 <platform_driver_init+0x238>)
1000d126:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d128:	6833      	ldr	r3, [r6, #0]
1000d12a:	4a48      	ldr	r2, [pc, #288]	; (1000d24c <platform_driver_init+0x23c>)
1000d12c:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d12e:	2000      	movs	r0, #0
1000d130:	4c47      	ldr	r4, [pc, #284]	; (1000d250 <platform_driver_init+0x240>)
1000d132:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d134:	2001      	movs	r0, #1
1000d136:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d138:	2002      	movs	r0, #2
1000d13a:	47a0      	blx	r4
		platform_initialized = 1;
1000d13c:	2201      	movs	r2, #1
1000d13e:	4b06      	ldr	r3, [pc, #24]	; (1000d158 <platform_driver_init+0x148>)
1000d140:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d142:	2000      	movs	r0, #0
1000d144:	e003      	b.n	1000d14e <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d146:	2201      	movs	r2, #1
1000d148:	4b03      	ldr	r3, [pc, #12]	; (1000d158 <platform_driver_init+0x148>)
1000d14a:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d14c:	2001      	movs	r0, #1
	}
	return status;
}
1000d14e:	bc1c      	pop	{r2, r3, r4}
1000d150:	4690      	mov	r8, r2
1000d152:	4699      	mov	r9, r3
1000d154:	46a2      	mov	sl, r4
1000d156:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d158:	100169c0 	.word	0x100169c0
1000d15c:	1000cf9d 	.word	0x1000cf9d
1000d160:	1000cfe1 	.word	0x1000cfe1
1000d164:	100169e0 	.word	0x100169e0
1000d168:	e000e100 	.word	0xe000e100
1000d16c:	1001783c 	.word	0x1001783c
1000d170:	000007d7 	.word	0x000007d7
1000d174:	000007bd 	.word	0x000007bd
1000d178:	10017578 	.word	0x10017578
1000d17c:	0001bc51 	.word	0x0001bc51
1000d180:	10017840 	.word	0x10017840
1000d184:	100400bc 	.word	0x100400bc
1000d188:	100169b0 	.word	0x100169b0
1000d18c:	100400b8 	.word	0x100400b8
1000d190:	100169ac 	.word	0x100169ac
1000d194:	0001b99f 	.word	0x0001b99f
1000d198:	10017574 	.word	0x10017574
1000d19c:	0001b9db 	.word	0x0001b9db
1000d1a0:	10017580 	.word	0x10017580
1000d1a4:	10017850 	.word	0x10017850
1000d1a8:	1004003c 	.word	0x1004003c
1000d1ac:	10041fc0 	.word	0x10041fc0
1000d1b0:	10017584 	.word	0x10017584
1000d1b4:	10041fc4 	.word	0x10041fc4
1000d1b8:	1001784c 	.word	0x1001784c
1000d1bc:	10017844 	.word	0x10017844
1000d1c0:	10041fd4 	.word	0x10041fd4
1000d1c4:	10041fd8 	.word	0x10041fd8
1000d1c8:	1001757c 	.word	0x1001757c
1000d1cc:	0001cbe9 	.word	0x0001cbe9
1000d1d0:	100169d0 	.word	0x100169d0
1000d1d4:	0001cd8f 	.word	0x0001cd8f
1000d1d8:	100169c4 	.word	0x100169c4
1000d1dc:	0001cea3 	.word	0x0001cea3
1000d1e0:	100169e4 	.word	0x100169e4
1000d1e4:	0001cbcf 	.word	0x0001cbcf
1000d1e8:	100169bc 	.word	0x100169bc
1000d1ec:	1000d699 	.word	0x1000d699
1000d1f0:	1000d62d 	.word	0x1000d62d
1000d1f4:	100400e4 	.word	0x100400e4
1000d1f8:	100169d8 	.word	0x100169d8
1000d1fc:	00019fe9 	.word	0x00019fe9
1000d200:	100169e8 	.word	0x100169e8
1000d204:	0001dbdd 	.word	0x0001dbdd
1000d208:	100169b8 	.word	0x100169b8
1000d20c:	0001dc5b 	.word	0x0001dc5b
1000d210:	100169cc 	.word	0x100169cc
1000d214:	100405ec 	.word	0x100405ec
1000d218:	100169c8 	.word	0x100169c8
1000d21c:	0001d5e3 	.word	0x0001d5e3
1000d220:	100169d4 	.word	0x100169d4
1000d224:	10040c20 	.word	0x10040c20
1000d228:	100169ec 	.word	0x100169ec
1000d22c:	00019f09 	.word	0x00019f09
1000d230:	100169a8 	.word	0x100169a8
1000d234:	100175bc 	.word	0x100175bc
1000d238:	100122a9 	.word	0x100122a9
1000d23c:	10017854 	.word	0x10017854
1000d240:	1000cec9 	.word	0x1000cec9
1000d244:	10017848 	.word	0x10017848
1000d248:	1000cf71 	.word	0x1000cf71
1000d24c:	1000d6f5 	.word	0x1000d6f5
1000d250:	1000d6dd 	.word	0x1000d6dd

1000d254 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d254:	4b04      	ldr	r3, [pc, #16]	; (1000d268 <platform_register_ble_msg_handler+0x14>)
1000d256:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d258:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d25a:	2a01      	cmp	r2, #1
1000d25c:	d102      	bne.n	1000d264 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d25e:	4b03      	ldr	r3, [pc, #12]	; (1000d26c <platform_register_ble_msg_handler+0x18>)
1000d260:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d262:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d264:	0018      	movs	r0, r3
1000d266:	4770      	bx	lr
1000d268:	100169c0 	.word	0x100169c0
1000d26c:	100169e0 	.word	0x100169e0

1000d270 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d270:	b570      	push	{r4, r5, r6, lr}
1000d272:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d274:	4b0e      	ldr	r3, [pc, #56]	; (1000d2b0 <platform_interface_send+0x40>)
1000d276:	681b      	ldr	r3, [r3, #0]
1000d278:	2b00      	cmp	r3, #0
1000d27a:	d002      	beq.n	1000d282 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d27c:	8840      	ldrh	r0, [r0, #2]
1000d27e:	4798      	blx	r3
1000d280:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d282:	88e3      	ldrh	r3, [r4, #6]
1000d284:	88a2      	ldrh	r2, [r4, #4]
1000d286:	8861      	ldrh	r1, [r4, #2]
1000d288:	8820      	ldrh	r0, [r4, #0]
1000d28a:	4d0a      	ldr	r5, [pc, #40]	; (1000d2b4 <platform_interface_send+0x44>)
1000d28c:	682d      	ldr	r5, [r5, #0]
1000d28e:	47a8      	blx	r5
1000d290:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d292:	88e2      	ldrh	r2, [r4, #6]
1000d294:	2a00      	cmp	r2, #0
1000d296:	d102      	bne.n	1000d29e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d298:	4b07      	ldr	r3, [pc, #28]	; (1000d2b8 <platform_interface_send+0x48>)
1000d29a:	4798      	blx	r3
1000d29c:	e006      	b.n	1000d2ac <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d29e:	0021      	movs	r1, r4
1000d2a0:	3108      	adds	r1, #8
1000d2a2:	4b06      	ldr	r3, [pc, #24]	; (1000d2bc <platform_interface_send+0x4c>)
1000d2a4:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d2a6:	0028      	movs	r0, r5
1000d2a8:	4b03      	ldr	r3, [pc, #12]	; (1000d2b8 <platform_interface_send+0x48>)
1000d2aa:	4798      	blx	r3
	}
}
1000d2ac:	bd70      	pop	{r4, r5, r6, pc}
1000d2ae:	46c0      	nop			; (mov r8, r8)
1000d2b0:	100169b0 	.word	0x100169b0
1000d2b4:	100169e8 	.word	0x100169e8
1000d2b8:	1000cef9 	.word	0x1000cef9
1000d2bc:	10012297 	.word	0x10012297

1000d2c0 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d2c0:	b570      	push	{r4, r5, r6, lr}
1000d2c2:	0015      	movs	r5, r2
1000d2c4:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d2c6:	020a      	lsls	r2, r1, #8
1000d2c8:	4302      	orrs	r2, r0
1000d2ca:	4b0a      	ldr	r3, [pc, #40]	; (1000d2f4 <send_plf_int_msg_ind+0x34>)
1000d2cc:	681e      	ldr	r6, [r3, #0]
1000d2ce:	0023      	movs	r3, r4
1000d2d0:	2105      	movs	r1, #5
1000d2d2:	20a0      	movs	r0, #160	; 0xa0
1000d2d4:	00c0      	lsls	r0, r0, #3
1000d2d6:	47b0      	blx	r6
1000d2d8:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d2da:	d00a      	beq.n	1000d2f2 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d2dc:	2c00      	cmp	r4, #0
1000d2de:	d005      	beq.n	1000d2ec <send_plf_int_msg_ind+0x2c>
1000d2e0:	2d00      	cmp	r5, #0
1000d2e2:	d003      	beq.n	1000d2ec <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d2e4:	0022      	movs	r2, r4
1000d2e6:	0029      	movs	r1, r5
1000d2e8:	4b03      	ldr	r3, [pc, #12]	; (1000d2f8 <send_plf_int_msg_ind+0x38>)
1000d2ea:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d2ec:	0030      	movs	r0, r6
1000d2ee:	4b03      	ldr	r3, [pc, #12]	; (1000d2fc <send_plf_int_msg_ind+0x3c>)
1000d2f0:	4798      	blx	r3
	}
}
1000d2f2:	bd70      	pop	{r4, r5, r6, pc}
1000d2f4:	100169e8 	.word	0x100169e8
1000d2f8:	10012297 	.word	0x10012297
1000d2fc:	1000cef9 	.word	0x1000cef9

1000d300 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d300:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d302:	465f      	mov	r7, fp
1000d304:	4656      	mov	r6, sl
1000d306:	464d      	mov	r5, r9
1000d308:	4644      	mov	r4, r8
1000d30a:	b4f0      	push	{r4, r5, r6, r7}
1000d30c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d30e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d310:	2300      	movs	r3, #0
1000d312:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d314:	1ce3      	adds	r3, r4, #3
1000d316:	d81c      	bhi.n	1000d352 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d318:	220d      	movs	r2, #13
1000d31a:	2100      	movs	r1, #0
1000d31c:	a802      	add	r0, sp, #8
1000d31e:	4b82      	ldr	r3, [pc, #520]	; (1000d528 <platform_event_wait+0x228>)
1000d320:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d322:	2333      	movs	r3, #51	; 0x33
1000d324:	aa02      	add	r2, sp, #8
1000d326:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d328:	3b30      	subs	r3, #48	; 0x30
1000d32a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d32c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d32e:	3302      	adds	r3, #2
1000d330:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d332:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d334:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d336:	0a23      	lsrs	r3, r4, #8
1000d338:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d33a:	0c23      	lsrs	r3, r4, #16
1000d33c:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d33e:	0e24      	lsrs	r4, r4, #24
1000d340:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d342:	2301      	movs	r3, #1
1000d344:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d346:	210d      	movs	r1, #13
1000d348:	0010      	movs	r0, r2
1000d34a:	4b78      	ldr	r3, [pc, #480]	; (1000d52c <platform_event_wait+0x22c>)
1000d34c:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d34e:	2301      	movs	r3, #1
1000d350:	4699      	mov	r9, r3
1000d352:	2400      	movs	r4, #0
1000d354:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d356:	4f76      	ldr	r7, [pc, #472]	; (1000d530 <platform_event_wait+0x230>)
1000d358:	4e76      	ldr	r6, [pc, #472]	; (1000d534 <platform_event_wait+0x234>)
1000d35a:	4977      	ldr	r1, [pc, #476]	; (1000d538 <platform_event_wait+0x238>)
1000d35c:	6838      	ldr	r0, [r7, #0]
1000d35e:	6833      	ldr	r3, [r6, #0]
1000d360:	4798      	blx	r3
1000d362:	2800      	cmp	r0, #0
1000d364:	d000      	beq.n	1000d368 <platform_event_wait+0x68>
1000d366:	e088      	b.n	1000d47a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d368:	4b73      	ldr	r3, [pc, #460]	; (1000d538 <platform_event_wait+0x238>)
1000d36a:	681c      	ldr	r4, [r3, #0]
1000d36c:	88a3      	ldrh	r3, [r4, #4]
1000d36e:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d370:	23cd      	movs	r3, #205	; 0xcd
1000d372:	009b      	lsls	r3, r3, #2
1000d374:	459a      	cmp	sl, r3
1000d376:	d100      	bne.n	1000d37a <platform_event_wait+0x7a>
1000d378:	e0c7      	b.n	1000d50a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000d37a:	8923      	ldrh	r3, [r4, #8]
1000d37c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000d37e:	8963      	ldrh	r3, [r4, #10]
1000d380:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000d382:	464b      	mov	r3, r9
1000d384:	2b00      	cmp	r3, #0
1000d386:	d011      	beq.n	1000d3ac <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000d388:	220d      	movs	r2, #13
1000d38a:	2100      	movs	r1, #0
1000d38c:	a802      	add	r0, sp, #8
1000d38e:	4b66      	ldr	r3, [pc, #408]	; (1000d528 <platform_event_wait+0x228>)
1000d390:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d392:	2333      	movs	r3, #51	; 0x33
1000d394:	aa02      	add	r2, sp, #8
1000d396:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d398:	3b30      	subs	r3, #48	; 0x30
1000d39a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d39c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d39e:	3302      	adds	r3, #2
1000d3a0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d3a2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000d3a4:	210d      	movs	r1, #13
1000d3a6:	0010      	movs	r0, r2
1000d3a8:	4b60      	ldr	r3, [pc, #384]	; (1000d52c <platform_event_wait+0x22c>)
1000d3aa:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000d3ac:	23a0      	movs	r3, #160	; 0xa0
1000d3ae:	00db      	lsls	r3, r3, #3
1000d3b0:	459a      	cmp	sl, r3
1000d3b2:	d121      	bne.n	1000d3f8 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000d3b4:	4b61      	ldr	r3, [pc, #388]	; (1000d53c <platform_event_wait+0x23c>)
1000d3b6:	881b      	ldrh	r3, [r3, #0]
1000d3b8:	4443      	add	r3, r8
1000d3ba:	22a0      	movs	r2, #160	; 0xa0
1000d3bc:	0092      	lsls	r2, r2, #2
1000d3be:	4293      	cmp	r3, r2
1000d3c0:	dd02      	ble.n	1000d3c8 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d3c2:	3a80      	subs	r2, #128	; 0x80
1000d3c4:	4b5d      	ldr	r3, [pc, #372]	; (1000d53c <platform_event_wait+0x23c>)
1000d3c6:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000d3c8:	4b5c      	ldr	r3, [pc, #368]	; (1000d53c <platform_event_wait+0x23c>)
1000d3ca:	469a      	mov	sl, r3
1000d3cc:	881d      	ldrh	r5, [r3, #0]
1000d3ce:	4b5c      	ldr	r3, [pc, #368]	; (1000d540 <platform_event_wait+0x240>)
1000d3d0:	18ed      	adds	r5, r5, r3
1000d3d2:	0021      	movs	r1, r4
1000d3d4:	310c      	adds	r1, #12
1000d3d6:	4642      	mov	r2, r8
1000d3d8:	0028      	movs	r0, r5
1000d3da:	4b5a      	ldr	r3, [pc, #360]	; (1000d544 <platform_event_wait+0x244>)
1000d3dc:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000d3de:	4642      	mov	r2, r8
1000d3e0:	0029      	movs	r1, r5
1000d3e2:	4658      	mov	r0, fp
1000d3e4:	4b58      	ldr	r3, [pc, #352]	; (1000d548 <platform_event_wait+0x248>)
1000d3e6:	4798      	blx	r3
				plf_event_buff_index += len;
1000d3e8:	4653      	mov	r3, sl
1000d3ea:	881b      	ldrh	r3, [r3, #0]
1000d3ec:	4443      	add	r3, r8
1000d3ee:	4652      	mov	r2, sl
1000d3f0:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d3f2:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000d3f4:	2502      	movs	r5, #2
1000d3f6:	e03a      	b.n	1000d46e <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d3f8:	4b54      	ldr	r3, [pc, #336]	; (1000d54c <platform_event_wait+0x24c>)
1000d3fa:	681b      	ldr	r3, [r3, #0]
1000d3fc:	2b00      	cmp	r3, #0
1000d3fe:	d032      	beq.n	1000d466 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000d400:	4b4d      	ldr	r3, [pc, #308]	; (1000d538 <platform_event_wait+0x238>)
1000d402:	681a      	ldr	r2, [r3, #0]
1000d404:	8893      	ldrh	r3, [r2, #4]
1000d406:	21cd      	movs	r1, #205	; 0xcd
1000d408:	0089      	lsls	r1, r1, #2
1000d40a:	428b      	cmp	r3, r1
1000d40c:	d104      	bne.n	1000d418 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000d40e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000d410:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000d412:	2b00      	cmp	r3, #0
1000d414:	d02b      	beq.n	1000d46e <platform_event_wait+0x16e>
1000d416:	e028      	b.n	1000d46a <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000d418:	4c4d      	ldr	r4, [pc, #308]	; (1000d550 <platform_event_wait+0x250>)
1000d41a:	4d49      	ldr	r5, [pc, #292]	; (1000d540 <platform_event_wait+0x240>)
1000d41c:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000d41e:	702b      	strb	r3, [r5, #0]
1000d420:	0a1b      	lsrs	r3, r3, #8
1000d422:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000d424:	8910      	ldrh	r0, [r2, #8]
1000d426:	4b4b      	ldr	r3, [pc, #300]	; (1000d554 <platform_event_wait+0x254>)
1000d428:	681b      	ldr	r3, [r3, #0]
1000d42a:	4798      	blx	r3
1000d42c:	7128      	strb	r0, [r5, #4]
1000d42e:	0a00      	lsrs	r0, r0, #8
1000d430:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000d432:	6820      	ldr	r0, [r4, #0]
1000d434:	4b40      	ldr	r3, [pc, #256]	; (1000d538 <platform_event_wait+0x238>)
1000d436:	681a      	ldr	r2, [r3, #0]
1000d438:	88d2      	ldrh	r2, [r2, #6]
1000d43a:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000d43c:	681d      	ldr	r5, [r3, #0]
1000d43e:	896b      	ldrh	r3, [r5, #10]
1000d440:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000d442:	3008      	adds	r0, #8
1000d444:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000d446:	896a      	ldrh	r2, [r5, #10]
1000d448:	2a00      	cmp	r2, #0
1000d44a:	d003      	beq.n	1000d454 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000d44c:	0029      	movs	r1, r5
1000d44e:	310c      	adds	r1, #12
1000d450:	4b3c      	ldr	r3, [pc, #240]	; (1000d544 <platform_event_wait+0x244>)
1000d452:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000d454:	8969      	ldrh	r1, [r5, #10]
1000d456:	3108      	adds	r1, #8
1000d458:	4b3c      	ldr	r3, [pc, #240]	; (1000d54c <platform_event_wait+0x24c>)
1000d45a:	681b      	ldr	r3, [r3, #0]
1000d45c:	4838      	ldr	r0, [pc, #224]	; (1000d540 <platform_event_wait+0x240>)
1000d45e:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d460:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000d462:	2503      	movs	r5, #3
1000d464:	e003      	b.n	1000d46e <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d466:	2400      	movs	r4, #0
1000d468:	e001      	b.n	1000d46e <platform_event_wait+0x16e>
1000d46a:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000d46c:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000d46e:	4b32      	ldr	r3, [pc, #200]	; (1000d538 <platform_event_wait+0x238>)
1000d470:	6818      	ldr	r0, [r3, #0]
1000d472:	4b39      	ldr	r3, [pc, #228]	; (1000d558 <platform_event_wait+0x258>)
1000d474:	681b      	ldr	r3, [r3, #0]
1000d476:	4798      	blx	r3
1000d478:	e000      	b.n	1000d47c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000d47a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000d47c:	2c00      	cmp	r4, #0
1000d47e:	d000      	beq.n	1000d482 <platform_event_wait+0x182>
1000d480:	e76b      	b.n	1000d35a <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000d482:	464b      	mov	r3, r9
1000d484:	2b00      	cmp	r3, #0
1000d486:	d046      	beq.n	1000d516 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000d488:	4b29      	ldr	r3, [pc, #164]	; (1000d530 <platform_event_wait+0x230>)
1000d48a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000d48c:	2e00      	cmp	r6, #0
1000d48e:	d104      	bne.n	1000d49a <platform_event_wait+0x19a>
1000d490:	2300      	movs	r3, #0
1000d492:	6a1c      	ldr	r4, [r3, #32]
1000d494:	2c00      	cmp	r4, #0
1000d496:	d131      	bne.n	1000d4fc <platform_event_wait+0x1fc>
1000d498:	e03d      	b.n	1000d516 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000d49a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000d49c:	2314      	movs	r3, #20
1000d49e:	469c      	mov	ip, r3
1000d4a0:	44b4      	add	ip, r6
1000d4a2:	4663      	mov	r3, ip
1000d4a4:	4660      	mov	r0, ip
1000d4a6:	9300      	str	r3, [sp, #0]
1000d4a8:	4b2c      	ldr	r3, [pc, #176]	; (1000d55c <platform_event_wait+0x25c>)
1000d4aa:	681b      	ldr	r3, [r3, #0]
1000d4ac:	4798      	blx	r3
	while(NULL != current)
1000d4ae:	2c00      	cmp	r4, #0
1000d4b0:	d01f      	beq.n	1000d4f2 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000d4b2:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d4b4:	23cd      	movs	r3, #205	; 0xcd
1000d4b6:	009b      	lsls	r3, r3, #2
1000d4b8:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000d4ba:	4b27      	ldr	r3, [pc, #156]	; (1000d558 <platform_event_wait+0x258>)
1000d4bc:	469a      	mov	sl, r3
1000d4be:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000d4c0:	6803      	ldr	r3, [r0, #0]
1000d4c2:	889b      	ldrh	r3, [r3, #4]
1000d4c4:	4543      	cmp	r3, r8
1000d4c6:	d110      	bne.n	1000d4ea <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000d4c8:	2f00      	cmp	r7, #0
1000d4ca:	d006      	beq.n	1000d4da <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000d4cc:	6883      	ldr	r3, [r0, #8]
1000d4ce:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000d4d0:	4653      	mov	r3, sl
1000d4d2:	681b      	ldr	r3, [r3, #0]
1000d4d4:	4798      	blx	r3
				current = prev->pstrNext;
1000d4d6:	68b8      	ldr	r0, [r7, #8]
1000d4d8:	e009      	b.n	1000d4ee <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000d4da:	6883      	ldr	r3, [r0, #8]
1000d4dc:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000d4de:	4b1e      	ldr	r3, [pc, #120]	; (1000d558 <platform_event_wait+0x258>)
1000d4e0:	681b      	ldr	r3, [r3, #0]
1000d4e2:	9301      	str	r3, [sp, #4]
1000d4e4:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000d4e6:	6a30      	ldr	r0, [r6, #32]
1000d4e8:	e001      	b.n	1000d4ee <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000d4ea:	0007      	movs	r7, r0
1000d4ec:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000d4ee:	2800      	cmp	r0, #0
1000d4f0:	d1e6      	bne.n	1000d4c0 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000d4f2:	4b1b      	ldr	r3, [pc, #108]	; (1000d560 <platform_event_wait+0x260>)
1000d4f4:	681b      	ldr	r3, [r3, #0]
1000d4f6:	9800      	ldr	r0, [sp, #0]
1000d4f8:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000d4fa:	e00c      	b.n	1000d516 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000d4fc:	2314      	movs	r3, #20
1000d4fe:	9300      	str	r3, [sp, #0]
1000d500:	4b16      	ldr	r3, [pc, #88]	; (1000d55c <platform_event_wait+0x25c>)
1000d502:	681b      	ldr	r3, [r3, #0]
1000d504:	2014      	movs	r0, #20
1000d506:	4798      	blx	r3
1000d508:	e7d3      	b.n	1000d4b2 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d50a:	4b10      	ldr	r3, [pc, #64]	; (1000d54c <platform_event_wait+0x24c>)
1000d50c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000d50e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000d510:	2b00      	cmp	r3, #0
1000d512:	d0ac      	beq.n	1000d46e <platform_event_wait+0x16e>
1000d514:	e77b      	b.n	1000d40e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000d516:	0028      	movs	r0, r5
1000d518:	b007      	add	sp, #28
1000d51a:	bc3c      	pop	{r2, r3, r4, r5}
1000d51c:	4690      	mov	r8, r2
1000d51e:	4699      	mov	r9, r3
1000d520:	46a2      	mov	sl, r4
1000d522:	46ab      	mov	fp, r5
1000d524:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d526:	46c0      	nop			; (mov r8, r8)
1000d528:	100122a9 	.word	0x100122a9
1000d52c:	1000d271 	.word	0x1000d271
1000d530:	100169ec 	.word	0x100169ec
1000d534:	100169d4 	.word	0x100169d4
1000d538:	100169b4 	.word	0x100169b4
1000d53c:	10017854 	.word	0x10017854
1000d540:	100175bc 	.word	0x100175bc
1000d544:	10012297 	.word	0x10012297
1000d548:	1000ce91 	.word	0x1000ce91
1000d54c:	100169e0 	.word	0x100169e0
1000d550:	100169dc 	.word	0x100169dc
1000d554:	100169ac 	.word	0x100169ac
1000d558:	100169a8 	.word	0x100169a8
1000d55c:	100169cc 	.word	0x100169cc
1000d560:	100169b8 	.word	0x100169b8

1000d564 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000d564:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000d566:	4b03      	ldr	r3, [pc, #12]	; (1000d574 <acquire_sleep_lock+0x10>)
1000d568:	681b      	ldr	r3, [r3, #0]
1000d56a:	2080      	movs	r0, #128	; 0x80
1000d56c:	0200      	lsls	r0, r0, #8
1000d56e:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000d570:	2008      	movs	r0, #8
1000d572:	bd10      	pop	{r4, pc}
1000d574:	10017574 	.word	0x10017574

1000d578 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000d578:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d57a:	4b03      	ldr	r3, [pc, #12]	; (1000d588 <release_message_lock+0x10>)
1000d57c:	681b      	ldr	r3, [r3, #0]
1000d57e:	2080      	movs	r0, #128	; 0x80
1000d580:	01c0      	lsls	r0, r0, #7
1000d582:	4798      	blx	r3
	return status;
}
1000d584:	2000      	movs	r0, #0
1000d586:	bd10      	pop	{r4, pc}
1000d588:	10017580 	.word	0x10017580

1000d58c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000d58c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000d58e:	4c05      	ldr	r4, [pc, #20]	; (1000d5a4 <release_sleep_lock+0x18>)
1000d590:	2080      	movs	r0, #128	; 0x80
1000d592:	01c0      	lsls	r0, r0, #7
1000d594:	6823      	ldr	r3, [r4, #0]
1000d596:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000d598:	6823      	ldr	r3, [r4, #0]
1000d59a:	2080      	movs	r0, #128	; 0x80
1000d59c:	0200      	lsls	r0, r0, #8
1000d59e:	4798      	blx	r3
	return status;
}
1000d5a0:	2000      	movs	r0, #0
1000d5a2:	bd10      	pop	{r4, pc}
1000d5a4:	10017580 	.word	0x10017580

1000d5a8 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000d5a8:	2800      	cmp	r0, #0
1000d5aa:	d003      	beq.n	1000d5b4 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000d5ac:	4b02      	ldr	r3, [pc, #8]	; (1000d5b8 <register_resume_callback+0x10>)
1000d5ae:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000d5b0:	2000      	movs	r0, #0
1000d5b2:	e000      	b.n	1000d5b6 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000d5b4:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000d5b6:	4770      	bx	lr
1000d5b8:	10017848 	.word	0x10017848

1000d5bc <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000d5bc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000d5be:	4a18      	ldr	r2, [pc, #96]	; (1000d620 <gpio1_combined_isr_handler+0x64>)
1000d5c0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d5c2:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d5c4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d5c6:	2180      	movs	r1, #128	; 0x80
1000d5c8:	0209      	lsls	r1, r1, #8
1000d5ca:	4301      	orrs	r1, r0
1000d5cc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d5ce:	0010      	movs	r0, r2
1000d5d0:	4d14      	ldr	r5, [pc, #80]	; (1000d624 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d5d2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d5d4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d5d6:	05db      	lsls	r3, r3, #23
1000d5d8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d5da:	d011      	beq.n	1000d600 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000d5dc:	b2db      	uxtb	r3, r3
1000d5de:	4259      	negs	r1, r3
1000d5e0:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000d5e2:	2b01      	cmp	r3, #1
1000d5e4:	d006      	beq.n	1000d5f4 <gpio1_combined_isr_handler+0x38>
1000d5e6:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000d5e8:	085b      	lsrs	r3, r3, #1
				index++;
1000d5ea:	3101      	adds	r1, #1
1000d5ec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000d5ee:	2b01      	cmp	r3, #1
1000d5f0:	d1fa      	bne.n	1000d5e8 <gpio1_combined_isr_handler+0x2c>
1000d5f2:	e000      	b.n	1000d5f6 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d5f4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d5f6:	0023      	movs	r3, r4
1000d5f8:	408b      	lsls	r3, r1
1000d5fa:	b29b      	uxth	r3, r3
1000d5fc:	8703      	strh	r3, [r0, #56]	; 0x38
1000d5fe:	e003      	b.n	1000d608 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d600:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d602:	432b      	orrs	r3, r5
1000d604:	b29b      	uxth	r3, r3
1000d606:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000d608:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d60a:	05db      	lsls	r3, r3, #23
1000d60c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d60e:	d1e2      	bne.n	1000d5d6 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000d610:	2180      	movs	r1, #128	; 0x80
1000d612:	0049      	lsls	r1, r1, #1
1000d614:	3381      	adds	r3, #129	; 0x81
1000d616:	33ff      	adds	r3, #255	; 0xff
1000d618:	4a03      	ldr	r2, [pc, #12]	; (1000d628 <gpio1_combined_isr_handler+0x6c>)
1000d61a:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000d61c:	bd30      	pop	{r4, r5, pc}
1000d61e:	46c0      	nop			; (mov r8, r8)
1000d620:	40011000 	.word	0x40011000
1000d624:	ffff8000 	.word	0xffff8000
1000d628:	e000e100 	.word	0xe000e100

1000d62c <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000d62c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000d62e:	4a17      	ldr	r2, [pc, #92]	; (1000d68c <gpio0_combined_isr_handler+0x60>)
1000d630:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d632:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000d634:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000d636:	2180      	movs	r1, #128	; 0x80
1000d638:	0209      	lsls	r1, r1, #8
1000d63a:	4301      	orrs	r1, r0
1000d63c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d63e:	0010      	movs	r0, r2
1000d640:	4d13      	ldr	r5, [pc, #76]	; (1000d690 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d642:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d644:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d646:	05db      	lsls	r3, r3, #23
1000d648:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000d64a:	d011      	beq.n	1000d670 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000d64c:	b2db      	uxtb	r3, r3
1000d64e:	4259      	negs	r1, r3
1000d650:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000d652:	2b01      	cmp	r3, #1
1000d654:	d006      	beq.n	1000d664 <gpio0_combined_isr_handler+0x38>
1000d656:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000d658:	085b      	lsrs	r3, r3, #1
				index++;
1000d65a:	3101      	adds	r1, #1
1000d65c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000d65e:	2b01      	cmp	r3, #1
1000d660:	d1fa      	bne.n	1000d658 <gpio0_combined_isr_handler+0x2c>
1000d662:	e000      	b.n	1000d666 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000d664:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000d666:	0023      	movs	r3, r4
1000d668:	408b      	lsls	r3, r1
1000d66a:	b29b      	uxth	r3, r3
1000d66c:	8703      	strh	r3, [r0, #56]	; 0x38
1000d66e:	e003      	b.n	1000d678 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000d670:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000d672:	432b      	orrs	r3, r5
1000d674:	b29b      	uxth	r3, r3
1000d676:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000d678:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000d67a:	05db      	lsls	r3, r3, #23
1000d67c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000d67e:	d1e2      	bne.n	1000d646 <gpio0_combined_isr_handler+0x1a>
1000d680:	2180      	movs	r1, #128	; 0x80
1000d682:	3381      	adds	r3, #129	; 0x81
1000d684:	33ff      	adds	r3, #255	; 0xff
1000d686:	4a03      	ldr	r2, [pc, #12]	; (1000d694 <gpio0_combined_isr_handler+0x68>)
1000d688:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000d68a:	bd30      	pop	{r4, r5, pc}
1000d68c:	40010000 	.word	0x40010000
1000d690:	ffff8000 	.word	0xffff8000
1000d694:	e000e100 	.word	0xe000e100

1000d698 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000d698:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000d69a:	4b0c      	ldr	r3, [pc, #48]	; (1000d6cc <PORT1_COMB_Handler+0x34>)
1000d69c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000d69e:	0b5b      	lsrs	r3, r3, #13
1000d6a0:	d010      	beq.n	1000d6c4 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000d6a2:	4b0b      	ldr	r3, [pc, #44]	; (1000d6d0 <PORT1_COMB_Handler+0x38>)
1000d6a4:	681b      	ldr	r3, [r3, #0]
1000d6a6:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000d6a8:	4a08      	ldr	r2, [pc, #32]	; (1000d6cc <PORT1_COMB_Handler+0x34>)
1000d6aa:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000d6ac:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000d6ae:	0b5b      	lsrs	r3, r3, #13
1000d6b0:	035b      	lsls	r3, r3, #13
1000d6b2:	430b      	orrs	r3, r1
1000d6b4:	8713      	strh	r3, [r2, #56]	; 0x38
1000d6b6:	2180      	movs	r1, #128	; 0x80
1000d6b8:	0049      	lsls	r1, r1, #1
1000d6ba:	23c0      	movs	r3, #192	; 0xc0
1000d6bc:	005b      	lsls	r3, r3, #1
1000d6be:	4a05      	ldr	r2, [pc, #20]	; (1000d6d4 <PORT1_COMB_Handler+0x3c>)
1000d6c0:	50d1      	str	r1, [r2, r3]
1000d6c2:	e001      	b.n	1000d6c8 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000d6c4:	4b04      	ldr	r3, [pc, #16]	; (1000d6d8 <PORT1_COMB_Handler+0x40>)
1000d6c6:	4798      	blx	r3
	}
}
1000d6c8:	bd10      	pop	{r4, pc}
1000d6ca:	46c0      	nop			; (mov r8, r8)
1000d6cc:	40011000 	.word	0x40011000
1000d6d0:	10017840 	.word	0x10017840
1000d6d4:	e000e100 	.word	0xe000e100
1000d6d8:	1000d5bd 	.word	0x1000d5bd

1000d6dc <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000d6dc:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000d6de:	2802      	cmp	r0, #2
1000d6e0:	d804      	bhi.n	1000d6ec <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000d6e2:	0080      	lsls	r0, r0, #2
1000d6e4:	2200      	movs	r2, #0
1000d6e6:	4b02      	ldr	r3, [pc, #8]	; (1000d6f0 <wakeup_int_unregister_callback+0x14>)
1000d6e8:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000d6ea:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000d6ec:	0018      	movs	r0, r3
1000d6ee:	4770      	bx	lr
1000d6f0:	10017858 	.word	0x10017858

1000d6f4 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000d6f4:	b510      	push	{r4, lr}
1000d6f6:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000d6f8:	7803      	ldrb	r3, [r0, #0]
1000d6fa:	2b01      	cmp	r3, #1
1000d6fc:	d108      	bne.n	1000d710 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000d6fe:	4b11      	ldr	r3, [pc, #68]	; (1000d744 <wakeup_active_event_callback+0x50>)
1000d700:	681b      	ldr	r3, [r3, #0]
1000d702:	2b00      	cmp	r3, #0
1000d704:	d000      	beq.n	1000d708 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000d706:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000d708:	23ff      	movs	r3, #255	; 0xff
1000d70a:	6822      	ldr	r2, [r4, #0]
1000d70c:	439a      	bics	r2, r3
1000d70e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000d710:	7863      	ldrb	r3, [r4, #1]
1000d712:	2b01      	cmp	r3, #1
1000d714:	d108      	bne.n	1000d728 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000d716:	4b0b      	ldr	r3, [pc, #44]	; (1000d744 <wakeup_active_event_callback+0x50>)
1000d718:	685b      	ldr	r3, [r3, #4]
1000d71a:	2b00      	cmp	r3, #0
1000d71c:	d000      	beq.n	1000d720 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000d71e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000d720:	4b09      	ldr	r3, [pc, #36]	; (1000d748 <wakeup_active_event_callback+0x54>)
1000d722:	6822      	ldr	r2, [r4, #0]
1000d724:	4013      	ands	r3, r2
1000d726:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000d728:	78a3      	ldrb	r3, [r4, #2]
1000d72a:	2b01      	cmp	r3, #1
1000d72c:	d108      	bne.n	1000d740 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000d72e:	4b05      	ldr	r3, [pc, #20]	; (1000d744 <wakeup_active_event_callback+0x50>)
1000d730:	689b      	ldr	r3, [r3, #8]
1000d732:	2b00      	cmp	r3, #0
1000d734:	d000      	beq.n	1000d738 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000d736:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000d738:	4b04      	ldr	r3, [pc, #16]	; (1000d74c <wakeup_active_event_callback+0x58>)
1000d73a:	6822      	ldr	r2, [r4, #0]
1000d73c:	4013      	ands	r3, r2
1000d73e:	6023      	str	r3, [r4, #0]
	}
}
1000d740:	bd10      	pop	{r4, pc}
1000d742:	46c0      	nop			; (mov r8, r8)
1000d744:	10017858 	.word	0x10017858
1000d748:	ffff00ff 	.word	0xffff00ff
1000d74c:	ff00ffff 	.word	0xff00ffff

1000d750 <sms_plf_event_cb>:
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

static void sms_plf_event_cb(void)
{
    sms_current_interrupt.int_on = true;
1000d750:	2201      	movs	r2, #1
1000d752:	4b01      	ldr	r3, [pc, #4]	; (1000d758 <sms_plf_event_cb+0x8>)
1000d754:	705a      	strb	r2, [r3, #1]
}
1000d756:	4770      	bx	lr
1000d758:	10016b70 	.word	0x10016b70

1000d75c <sms_init_variables>:
 */
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000d75c:	b510      	push	{r4, lr}
    ble_current_state = BLE_STATE_POWEROFF;
1000d75e:	2300      	movs	r3, #0
1000d760:	4a11      	ldr	r2, [pc, #68]	; (1000d7a8 <sms_init_variables+0x4c>)
1000d762:	7013      	strb	r3, [r2, #0]
    button_current_state = BUTTON_STATE_NONE;
1000d764:	4a11      	ldr	r2, [pc, #68]	; (1000d7ac <sms_init_variables+0x50>)
1000d766:	7013      	strb	r3, [r2, #0]
    ms58_device.current_state = MS58_STATE_NONE;
1000d768:	2225      	movs	r2, #37	; 0x25
1000d76a:	4911      	ldr	r1, [pc, #68]	; (1000d7b0 <sms_init_variables+0x54>)
1000d76c:	548b      	strb	r3, [r1, r2]
    timer1_current_mode = TIMER1_MODE_NONE;
1000d76e:	4a11      	ldr	r2, [pc, #68]	; (1000d7b4 <sms_init_variables+0x58>)
1000d770:	7013      	strb	r3, [r2, #0]
    timer2_current_mode = TIMER2_MODE_NONE;
1000d772:	4a11      	ldr	r2, [pc, #68]	; (1000d7b8 <sms_init_variables+0x5c>)
1000d774:	7013      	strb	r3, [r2, #0]
    sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000d776:	2001      	movs	r0, #1
1000d778:	4a10      	ldr	r2, [pc, #64]	; (1000d7bc <sms_init_variables+0x60>)
1000d77a:	7010      	strb	r0, [r2, #0]
    
    sms_button_char_value[SMS_BTN_0] = 0;
1000d77c:	4910      	ldr	r1, [pc, #64]	; (1000d7c0 <sms_init_variables+0x64>)
1000d77e:	2200      	movs	r2, #0
1000d780:	800b      	strh	r3, [r1, #0]
    sms_button_char_value[SMS_BTN_1] = 0;
1000d782:	804b      	strh	r3, [r1, #2]
    //dbg_pin = PIN_LP_GPIO_2;
    
    ulp_ready = false;
1000d784:	490f      	ldr	r1, [pc, #60]	; (1000d7c4 <sms_init_variables+0x68>)
1000d786:	700a      	strb	r2, [r1, #0]
    
    btn0_instance.id = SMS_BTN_0;
1000d788:	490f      	ldr	r1, [pc, #60]	; (1000d7c8 <sms_init_variables+0x6c>)
1000d78a:	700a      	strb	r2, [r1, #0]
    btn0_instance.gpio_pin = SMS_BTN_0_PIN;
1000d78c:	241f      	movs	r4, #31
1000d78e:	704c      	strb	r4, [r1, #1]
    btn0_instance.int_active = BTN_INT_ENABLE;
1000d790:	708a      	strb	r2, [r1, #2]
    btn0_instance.char_value = 0;
1000d792:	70ca      	strb	r2, [r1, #3]
    
    btn1_instance.id = SMS_BTN_1;
1000d794:	490d      	ldr	r1, [pc, #52]	; (1000d7cc <sms_init_variables+0x70>)
1000d796:	7008      	strb	r0, [r1, #0]
    btn1_instance.gpio_pin = SMS_BTN_1_PIN;
1000d798:	301c      	adds	r0, #28
1000d79a:	7048      	strb	r0, [r1, #1]
    btn1_instance.int_active = BTN_INT_ENABLE;
1000d79c:	708a      	strb	r2, [r1, #2]
    btn1_instance.char_value = 0;
1000d79e:	70ca      	strb	r2, [r1, #3]
    
    sms_ble_send_cnt = 0;
1000d7a0:	4a0b      	ldr	r2, [pc, #44]	; (1000d7d0 <sms_init_variables+0x74>)
1000d7a2:	8013      	strh	r3, [r2, #0]
}
1000d7a4:	bd10      	pop	{r4, pc}
1000d7a6:	46c0      	nop			; (mov r8, r8)
1000d7a8:	10016b76 	.word	0x10016b76
1000d7ac:	10016acc 	.word	0x10016acc
1000d7b0:	10016b48 	.word	0x10016b48
1000d7b4:	10016ac4 	.word	0x10016ac4
1000d7b8:	10016b77 	.word	0x10016b77
1000d7bc:	10016acd 	.word	0x10016acd
1000d7c0:	10016ac8 	.word	0x10016ac8
1000d7c4:	10016ace 	.word	0x10016ace
1000d7c8:	10016ac0 	.word	0x10016ac0
1000d7cc:	10016b24 	.word	0x10016b24
1000d7d0:	10016be4 	.word	0x10016be4

1000d7d4 <sms_set_monitor_pin>:

void sms_set_monitor_pin(void)
{
1000d7d4:	b510      	push	{r4, lr}
1000d7d6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
1000d7d8:	ac01      	add	r4, sp, #4
1000d7da:	0020      	movs	r0, r4
1000d7dc:	4b0a      	ldr	r3, [pc, #40]	; (1000d808 <sms_set_monitor_pin+0x34>)
1000d7de:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
1000d7e0:	2301      	movs	r3, #1
1000d7e2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
1000d7e4:	0021      	movs	r1, r4
1000d7e6:	2002      	movs	r0, #2
1000d7e8:	4b08      	ldr	r3, [pc, #32]	; (1000d80c <sms_set_monitor_pin+0x38>)
1000d7ea:	4798      	blx	r3
1000d7ec:	2800      	cmp	r0, #0
1000d7ee:	d005      	beq.n	1000d7fc <sms_set_monitor_pin+0x28>
        DBG_LOG("Problem while setting gpio pin");
1000d7f0:	4807      	ldr	r0, [pc, #28]	; (1000d810 <sms_set_monitor_pin+0x3c>)
1000d7f2:	4b08      	ldr	r3, [pc, #32]	; (1000d814 <sms_set_monitor_pin+0x40>)
1000d7f4:	4798      	blx	r3
1000d7f6:	4808      	ldr	r0, [pc, #32]	; (1000d818 <sms_set_monitor_pin+0x44>)
1000d7f8:	4b08      	ldr	r3, [pc, #32]	; (1000d81c <sms_set_monitor_pin+0x48>)
1000d7fa:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000d7fc:	2100      	movs	r1, #0
1000d7fe:	2002      	movs	r0, #2
1000d800:	4b07      	ldr	r3, [pc, #28]	; (1000d820 <sms_set_monitor_pin+0x4c>)
1000d802:	4798      	blx	r3
}
1000d804:	b002      	add	sp, #8
1000d806:	bd10      	pop	{r4, pc}
1000d808:	10009ff1 	.word	0x10009ff1
1000d80c:	1000a001 	.word	0x1000a001
1000d810:	10013464 	.word	0x10013464
1000d814:	100123d9 	.word	0x100123d9
1000d818:	10014c70 	.word	0x10014c70
1000d81c:	100122b9 	.word	0x100122b9
1000d820:	1000a259 	.word	0x1000a259

1000d824 <resume_cb>:
        sensors_active = false;
    }
}

static void resume_cb(void)
{
1000d824:	b510      	push	{r4, lr}
    init_port_list(); // re-initialize all ports
1000d826:	4b07      	ldr	r3, [pc, #28]	; (1000d844 <resume_cb+0x20>)
1000d828:	4798      	blx	r3
    serial_console_init(); // GPIO (UART) for the console
1000d82a:	4b07      	ldr	r3, [pc, #28]	; (1000d848 <resume_cb+0x24>)
1000d82c:	4798      	blx	r3
    sms_dualtimer_init();
1000d82e:	4b07      	ldr	r3, [pc, #28]	; (1000d84c <resume_cb+0x28>)
1000d830:	4798      	blx	r3
    sms_button_configure_gpio(); // GPIO (AO_0 & AO_1) for the buttons
1000d832:	4b07      	ldr	r3, [pc, #28]	; (1000d850 <resume_cb+0x2c>)
1000d834:	4798      	blx	r3
    sms_led_gpio_init();
1000d836:	4b07      	ldr	r3, [pc, #28]	; (1000d854 <resume_cb+0x30>)
1000d838:	4798      	blx	r3
    spi_master_configure();
1000d83a:	4b07      	ldr	r3, [pc, #28]	; (1000d858 <resume_cb+0x34>)
1000d83c:	4798      	blx	r3
    sms_set_monitor_pin();
1000d83e:	4b07      	ldr	r3, [pc, #28]	; (1000d85c <resume_cb+0x38>)
1000d840:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000d842:	bd10      	pop	{r4, pc}
1000d844:	1000cf9d 	.word	0x1000cf9d
1000d848:	1000cd05 	.word	0x1000cd05
1000d84c:	10009369 	.word	0x10009369
1000d850:	100087d9 	.word	0x100087d9
1000d854:	10008cc1 	.word	0x10008cc1
1000d858:	10009225 	.word	0x10009225
1000d85c:	1000d7d5 	.word	0x1000d7d5

1000d860 <sms_monitor_states>:
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
}

void sms_monitor_states(const char *label)
{
1000d860:	b570      	push	{r4, r5, r6, lr}
1000d862:	b084      	sub	sp, #16
1000d864:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_previous_state, button_current_state, ble_current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
1000d866:	480d      	ldr	r0, [pc, #52]	; (1000d89c <sms_monitor_states+0x3c>)
1000d868:	4b0d      	ldr	r3, [pc, #52]	; (1000d8a0 <sms_monitor_states+0x40>)
1000d86a:	4798      	blx	r3
1000d86c:	4b0d      	ldr	r3, [pc, #52]	; (1000d8a4 <sms_monitor_states+0x44>)
1000d86e:	781a      	ldrb	r2, [r3, #0]
1000d870:	b2d2      	uxtb	r2, r2
1000d872:	4b0d      	ldr	r3, [pc, #52]	; (1000d8a8 <sms_monitor_states+0x48>)
1000d874:	781b      	ldrb	r3, [r3, #0]
1000d876:	b2db      	uxtb	r3, r3
1000d878:	490c      	ldr	r1, [pc, #48]	; (1000d8ac <sms_monitor_states+0x4c>)
1000d87a:	7809      	ldrb	r1, [r1, #0]
1000d87c:	480c      	ldr	r0, [pc, #48]	; (1000d8b0 <sms_monitor_states+0x50>)
1000d87e:	7800      	ldrb	r0, [r0, #0]
1000d880:	4d0c      	ldr	r5, [pc, #48]	; (1000d8b4 <sms_monitor_states+0x54>)
1000d882:	782d      	ldrb	r5, [r5, #0]
1000d884:	4e0c      	ldr	r6, [pc, #48]	; (1000d8b8 <sms_monitor_states+0x58>)
1000d886:	7836      	ldrb	r6, [r6, #0]
1000d888:	9603      	str	r6, [sp, #12]
1000d88a:	9502      	str	r5, [sp, #8]
1000d88c:	9001      	str	r0, [sp, #4]
1000d88e:	9100      	str	r1, [sp, #0]
1000d890:	0021      	movs	r1, r4
1000d892:	480a      	ldr	r0, [pc, #40]	; (1000d8bc <sms_monitor_states+0x5c>)
1000d894:	4c0a      	ldr	r4, [pc, #40]	; (1000d8c0 <sms_monitor_states+0x60>)
1000d896:	47a0      	blx	r4
}
1000d898:	b004      	add	sp, #16
1000d89a:	bd70      	pop	{r4, r5, r6, pc}
1000d89c:	10013464 	.word	0x10013464
1000d8a0:	100123d9 	.word	0x100123d9
1000d8a4:	10016b84 	.word	0x10016b84
1000d8a8:	10016acc 	.word	0x10016acc
1000d8ac:	10016b76 	.word	0x10016b76
1000d8b0:	10016ac4 	.word	0x10016ac4
1000d8b4:	10016b77 	.word	0x10016b77
1000d8b8:	10016acd 	.word	0x10016acd
1000d8bc:	10014c90 	.word	0x10014c90
1000d8c0:	100122b9 	.word	0x100122b9

1000d8c4 <sms_sensors_switch>:

void sms_sensors_switch(bool en)
{
1000d8c4:	b510      	push	{r4, lr}
    if(en) {
1000d8c6:	2800      	cmp	r0, #0
1000d8c8:	d009      	beq.n	1000d8de <sms_sensors_switch+0x1a>
        /* IMU */
        //sms_imu_startup();
        /* Pressure */
        ms58_device.current_state = MS58_STATE_RESETTING;
1000d8ca:	4b09      	ldr	r3, [pc, #36]	; (1000d8f0 <sms_sensors_switch+0x2c>)
1000d8cc:	2101      	movs	r1, #1
1000d8ce:	2225      	movs	r2, #37	; 0x25
1000d8d0:	5499      	strb	r1, [r3, r2]
        ms58_device.reset_done = false;
1000d8d2:	2200      	movs	r2, #0
1000d8d4:	705a      	strb	r2, [r3, #1]
        ms58_device.init_ok = false;
1000d8d6:	709a      	strb	r2, [r3, #2]
        sms_pressure_startup();
1000d8d8:	4b06      	ldr	r3, [pc, #24]	; (1000d8f4 <sms_sensors_switch+0x30>)
1000d8da:	4798      	blx	r3
1000d8dc:	e006      	b.n	1000d8ec <sms_sensors_switch+0x28>
    }
    else {
        /* IMU */
        gpio_pin_set_output_level(SMS_IMU_VCC_PIN, false);
1000d8de:	2100      	movs	r1, #0
1000d8e0:	2006      	movs	r0, #6
1000d8e2:	4c05      	ldr	r4, [pc, #20]	; (1000d8f8 <sms_sensors_switch+0x34>)
1000d8e4:	47a0      	blx	r4
        /* Pressure */
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
1000d8e6:	2100      	movs	r1, #0
1000d8e8:	2007      	movs	r0, #7
1000d8ea:	47a0      	blx	r4
    }
}
1000d8ec:	bd10      	pop	{r4, pc}
1000d8ee:	46c0      	nop			; (mov r8, r8)
1000d8f0:	10016b48 	.word	0x10016b48
1000d8f4:	10008dad 	.word	0x10008dad
1000d8f8:	1000a259 	.word	0x1000a259

1000d8fc <sms_sensors_toggle_interrupt>:

void sms_sensors_toggle_interrupt(enum sms_ext_interrupt_toggle toggle)
{
1000d8fc:	b510      	push	{r4, lr}
    if(toggle == SMS_EXT_INT_ENABLE) {
1000d8fe:	2800      	cmp	r0, #0
1000d900:	d10d      	bne.n	1000d91e <sms_sensors_toggle_interrupt+0x22>
        /* Pressure --> AON_SLEEP_TIMER
         * Note: Since there is no direct mechanism to simply enable and disable
         *       the AON sleep timer interruption, we have to initialize it each
         *       time (and it starts running) and register the corresponding
         *       callback (and it enables the interrupt) */
        ms58_device.current_state = MS58_STATE_CONV_PRESSURE;
1000d902:	2103      	movs	r1, #3
1000d904:	2325      	movs	r3, #37	; 0x25
1000d906:	4a0d      	ldr	r2, [pc, #52]	; (1000d93c <sms_sensors_toggle_interrupt+0x40>)
1000d908:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000d90a:	2100      	movs	r1, #0
1000d90c:	480c      	ldr	r0, [pc, #48]	; (1000d940 <sms_sensors_toggle_interrupt+0x44>)
1000d90e:	4b0d      	ldr	r3, [pc, #52]	; (1000d944 <sms_sensors_toggle_interrupt+0x48>)
1000d910:	4798      	blx	r3
        sms_timer_aon_register_callback();
1000d912:	4b0d      	ldr	r3, [pc, #52]	; (1000d948 <sms_sensors_toggle_interrupt+0x4c>)
1000d914:	4798      	blx	r3
        sensors_active = true;
1000d916:	2201      	movs	r2, #1
1000d918:	4b0c      	ldr	r3, [pc, #48]	; (1000d94c <sms_sensors_toggle_interrupt+0x50>)
1000d91a:	701a      	strb	r2, [r3, #0]
1000d91c:	e00c      	b.n	1000d938 <sms_sensors_toggle_interrupt+0x3c>
    }
    else if(toggle == SMS_EXT_INT_DISABLE) {
1000d91e:	2801      	cmp	r0, #1
1000d920:	d10a      	bne.n	1000d938 <sms_sensors_toggle_interrupt+0x3c>
        /* IMU --> IMU_DRDY */
        //gpio_disable_callback(SMS_IMU_DRDY_PIN);
        /* Pressure --> AON_SLEEP_TIMER
         * Note: Because of AON timer specific mechanisms (see above), the timer
         *       gets disabled and the corresponding callback unregistered */
        ms58_device.current_state = MS58_STATE_READY;
1000d922:	2102      	movs	r1, #2
1000d924:	2325      	movs	r3, #37	; 0x25
1000d926:	4a05      	ldr	r2, [pc, #20]	; (1000d93c <sms_sensors_toggle_interrupt+0x40>)
1000d928:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
1000d92a:	4b09      	ldr	r3, [pc, #36]	; (1000d950 <sms_sensors_toggle_interrupt+0x54>)
1000d92c:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
1000d92e:	4b09      	ldr	r3, [pc, #36]	; (1000d954 <sms_sensors_toggle_interrupt+0x58>)
1000d930:	4798      	blx	r3
        sensors_active = false;
1000d932:	2200      	movs	r2, #0
1000d934:	4b05      	ldr	r3, [pc, #20]	; (1000d94c <sms_sensors_toggle_interrupt+0x50>)
1000d936:	701a      	strb	r2, [r3, #0]
    }
}
1000d938:	bd10      	pop	{r4, pc}
1000d93a:	46c0      	nop			; (mov r8, r8)
1000d93c:	10016b48 	.word	0x10016b48
1000d940:	00000cc6 	.word	0x00000cc6
1000d944:	100092f9 	.word	0x100092f9
1000d948:	1000932d 	.word	0x1000932d
1000d94c:	10016b72 	.word	0x10016b72
1000d950:	10009321 	.word	0x10009321
1000d954:	1000934d 	.word	0x1000934d

1000d958 <main>:
    sms_current_interrupt.int_on = true;
}


int main(void)
{
1000d958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    /* Define current BLE state
     * ------------------------ */
    ble_current_state = BLE_STATE_STARTING;
1000d95a:	2210      	movs	r2, #16
1000d95c:	4ba9      	ldr	r3, [pc, #676]	; (1000dc04 <main+0x2ac>)
1000d95e:	701a      	strb	r2, [r3, #0]
    
    
    /* Initialize platform
     * ------------------- */
	platform_driver_init();
1000d960:	4ba9      	ldr	r3, [pc, #676]	; (1000dc08 <main+0x2b0>)
1000d962:	4798      	blx	r3
	gpio_init(); // GPIO
1000d964:	4ba9      	ldr	r3, [pc, #676]	; (1000dc0c <main+0x2b4>)
1000d966:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000d968:	4ba9      	ldr	r3, [pc, #676]	; (1000dc10 <main+0x2b8>)
1000d96a:	4798      	blx	r3
    
    /* Disable ULP
     * ----------- */
	acquire_sleep_lock();
1000d96c:	4ba9      	ldr	r3, [pc, #676]	; (1000dc14 <main+0x2bc>)
1000d96e:	4798      	blx	r3
    

    /* Initialize SMS flags
     * -------------------- */
    sms_init_variables();
1000d970:	4ba9      	ldr	r3, [pc, #676]	; (1000dc18 <main+0x2c0>)
1000d972:	4798      	blx	r3
    
    
    /* Initialize hardware components
     * ------------------------------ */
    // Dualtimer
    sms_dualtimer_init();
1000d974:	4ba9      	ldr	r3, [pc, #676]	; (1000dc1c <main+0x2c4>)
1000d976:	4798      	blx	r3
	
	// Buttons
    sms_button_configure_gpio();
1000d978:	4ba9      	ldr	r3, [pc, #676]	; (1000dc20 <main+0x2c8>)
1000d97a:	4798      	blx	r3
    
    // LED
    sms_led_gpio_init();
1000d97c:	4ba9      	ldr	r3, [pc, #676]	; (1000dc24 <main+0x2cc>)
1000d97e:	4798      	blx	r3
    
    // I2C
    
    // SPI
    spi_master_configure();
1000d980:	4ba9      	ldr	r3, [pc, #676]	; (1000dc28 <main+0x2d0>)
1000d982:	4798      	blx	r3
    
    // IMU
    sms_imu_configure_gpio();
1000d984:	4ba9      	ldr	r3, [pc, #676]	; (1000dc2c <main+0x2d4>)
1000d986:	4798      	blx	r3
    
    // MS58
    ms58_device.current_state = MS58_STATE_NONE;
1000d988:	2100      	movs	r1, #0
1000d98a:	2325      	movs	r3, #37	; 0x25
1000d98c:	4aa8      	ldr	r2, [pc, #672]	; (1000dc30 <main+0x2d8>)
1000d98e:	54d1      	strb	r1, [r2, r3]
    //ms58_device.reset_done = false;
    //ms58_device.init_ok = false;
    
    sms_set_monitor_pin();
1000d990:	4ba8      	ldr	r3, [pc, #672]	; (1000dc34 <main+0x2dc>)
1000d992:	4798      	blx	r3
    
    /* Initialize the BLE module
     * ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address 
1000d994:	2000      	movs	r0, #0
1000d996:	4ba8      	ldr	r3, [pc, #672]	; (1000dc38 <main+0x2e0>)
1000d998:	4798      	blx	r3
	
    
    /* Define BLE services
     * ------------------- */
    sms_button_define_services();
1000d99a:	4ba8      	ldr	r3, [pc, #672]	; (1000dc3c <main+0x2e4>)
1000d99c:	4798      	blx	r3
    sms_pressure_define_services();
1000d99e:	4ba8      	ldr	r3, [pc, #672]	; (1000dc40 <main+0x2e8>)
1000d9a0:	4798      	blx	r3
    
    
    /* Register callbacks
     * ------------------ */
    // Recovering from ULP
    register_resume_callback(resume_cb); // register resume callback
1000d9a2:	48a8      	ldr	r0, [pc, #672]	; (1000dc44 <main+0x2ec>)
1000d9a4:	4ba8      	ldr	r3, [pc, #672]	; (1000dc48 <main+0x2f0>)
1000d9a6:	4798      	blx	r3

    // Dualtimer (AON timer enables on registration... so do it later)    
    sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000d9a8:	49a8      	ldr	r1, [pc, #672]	; (1000dc4c <main+0x2f4>)
1000d9aa:	2000      	movs	r0, #0
1000d9ac:	4ca8      	ldr	r4, [pc, #672]	; (1000dc50 <main+0x2f8>)
1000d9ae:	47a0      	blx	r4
    sms_dualtimer_register_callback(DUALTIMER_TIMER2, sms_dualtimer2_cb); // LED blinking timer
1000d9b0:	49a8      	ldr	r1, [pc, #672]	; (1000dc54 <main+0x2fc>)
1000d9b2:	2001      	movs	r0, #1
1000d9b4:	47a0      	blx	r4

    // Buttons
    sms_button_register_callbacks();
1000d9b6:	4ba8      	ldr	r3, [pc, #672]	; (1000dc58 <main+0x300>)
1000d9b8:	4798      	blx	r3

    // BLE
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000d9ba:	4aa8      	ldr	r2, [pc, #672]	; (1000dc5c <main+0x304>)
1000d9bc:	2100      	movs	r1, #0
1000d9be:	2000      	movs	r0, #0
1000d9c0:	4ca7      	ldr	r4, [pc, #668]	; (1000dc60 <main+0x308>)
1000d9c2:	47a0      	blx	r4
    ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000d9c4:	4aa7      	ldr	r2, [pc, #668]	; (1000dc64 <main+0x30c>)
1000d9c6:	2102      	movs	r1, #2
1000d9c8:	2000      	movs	r0, #0
1000d9ca:	47a0      	blx	r4
    register_ble_user_event_cb(sms_plf_event_cb);
1000d9cc:	48a6      	ldr	r0, [pc, #664]	; (1000dc68 <main+0x310>)
1000d9ce:	4ba7      	ldr	r3, [pc, #668]	; (1000dc6c <main+0x314>)
1000d9d0:	4798      	blx	r3

    //ble_set_ulp_mode(BLE_ULP_MODE_SET);
    
    /* Enable buttons interrupts
     * ------------------------- */
    sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
1000d9d2:	2100      	movs	r1, #0
1000d9d4:	2000      	movs	r0, #0
1000d9d6:	4ba6      	ldr	r3, [pc, #664]	; (1000dc70 <main+0x318>)
1000d9d8:	4798      	blx	r3
    //register int n22 asm("lr");
    //register int n23 asm("r15");
    //DBG_LOG("at post-init: sp 0x%x, lr 0x%x", n21, n22);
    /* Goto sleep
     * ---------- */
    sms_ble_power_down();
1000d9da:	4ba6      	ldr	r3, [pc, #664]	; (1000dc74 <main+0x31c>)
1000d9dc:	4798      	blx	r3

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000d9de:	4da6      	ldr	r5, [pc, #664]	; (1000dc78 <main+0x320>)
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000d9e0:	4ca6      	ldr	r4, [pc, #664]	; (1000dc7c <main+0x324>)
        {
            if(ulp_active) {
1000d9e2:	4ea7      	ldr	r6, [pc, #668]	; (1000dc80 <main+0x328>)

    
	while(true)
	{
		/* BLE Event task */
		ble_event_task(BLE_EVENT_TIMEOUT);
1000d9e4:	2001      	movs	r0, #1
1000d9e6:	4240      	negs	r0, r0
1000d9e8:	47a8      	blx	r5
		
		/* Write application task */
        if(sms_current_interrupt.int_on)
1000d9ea:	7863      	ldrb	r3, [r4, #1]
1000d9ec:	2b00      	cmp	r3, #0
1000d9ee:	d100      	bne.n	1000d9f2 <main+0x9a>
1000d9f0:	e0f7      	b.n	1000dbe2 <main+0x28a>
        {
            if(ulp_active) {
1000d9f2:	7833      	ldrb	r3, [r6, #0]
1000d9f4:	2b00      	cmp	r3, #0
1000d9f6:	d009      	beq.n	1000da0c <main+0xb4>
                DBG_LOG_DEV("[main]\t\t\t\tWaking up...");
1000d9f8:	48a2      	ldr	r0, [pc, #648]	; (1000dc84 <main+0x32c>)
1000d9fa:	4ba3      	ldr	r3, [pc, #652]	; (1000dc88 <main+0x330>)
1000d9fc:	4798      	blx	r3
1000d9fe:	48a3      	ldr	r0, [pc, #652]	; (1000dc8c <main+0x334>)
1000da00:	4fa3      	ldr	r7, [pc, #652]	; (1000dc90 <main+0x338>)
1000da02:	47b8      	blx	r7
                acquire_sleep_lock();
1000da04:	4b83      	ldr	r3, [pc, #524]	; (1000dc14 <main+0x2bc>)
1000da06:	4798      	blx	r3
                DBG_LOG_CONT_DEV(" done!");
1000da08:	48a2      	ldr	r0, [pc, #648]	; (1000dc94 <main+0x33c>)
1000da0a:	47b8      	blx	r7
            }                
            //ulp_ready = false;
            DBG_LOG_DEV("[main]\t\t\t\tDisabling button int...");
1000da0c:	489d      	ldr	r0, [pc, #628]	; (1000dc84 <main+0x32c>)
1000da0e:	4b9e      	ldr	r3, [pc, #632]	; (1000dc88 <main+0x330>)
1000da10:	4798      	blx	r3
1000da12:	48a1      	ldr	r0, [pc, #644]	; (1000dc98 <main+0x340>)
1000da14:	4f9e      	ldr	r7, [pc, #632]	; (1000dc90 <main+0x338>)
1000da16:	47b8      	blx	r7
            sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
1000da18:	2101      	movs	r1, #1
1000da1a:	2001      	movs	r0, #1
1000da1c:	4b94      	ldr	r3, [pc, #592]	; (1000dc70 <main+0x318>)
1000da1e:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000da20:	489c      	ldr	r0, [pc, #624]	; (1000dc94 <main+0x33c>)
1000da22:	47b8      	blx	r7
            //psp = __get_PSP();
            //msp = __get_MSP();
            //printf("\r\n\@ main: psp 0x%lx, msp 0x%lx", psp, msp);
            switch(sms_current_interrupt.source)
1000da24:	4b95      	ldr	r3, [pc, #596]	; (1000dc7c <main+0x324>)
1000da26:	781b      	ldrb	r3, [r3, #0]
1000da28:	b2db      	uxtb	r3, r3
1000da2a:	2b06      	cmp	r3, #6
1000da2c:	d900      	bls.n	1000da30 <main+0xd8>
1000da2e:	e0c2      	b.n	1000dbb6 <main+0x25e>
1000da30:	009b      	lsls	r3, r3, #2
1000da32:	4a9a      	ldr	r2, [pc, #616]	; (1000dc9c <main+0x344>)
1000da34:	58d3      	ldr	r3, [r2, r3]
1000da36:	469f      	mov	pc, r3
            {
                case INT_NONE:
                //sms_monitor_states("NONE");
                DBG_LOG_DEV("\n\r...NO SOURCE!!");
1000da38:	4892      	ldr	r0, [pc, #584]	; (1000dc84 <main+0x32c>)
1000da3a:	4b93      	ldr	r3, [pc, #588]	; (1000dc88 <main+0x330>)
1000da3c:	4798      	blx	r3
1000da3e:	4898      	ldr	r0, [pc, #608]	; (1000dca0 <main+0x348>)
1000da40:	4b93      	ldr	r3, [pc, #588]	; (1000dc90 <main+0x338>)
1000da42:	4798      	blx	r3
                //if(ulp_ready) {
                    //DBG_LOG_DEV("[main]\t\t\tULP...");
                    //release_sleep_lock();
                //}
                //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
                break;
1000da44:	e0bd      	b.n	1000dbc2 <main+0x26a>
                
                case INT_BTN0:
                //sms_monitor_states("INT_BTN0");
                DBG_LOG_DEV("\n\r...BTN0");
1000da46:	488f      	ldr	r0, [pc, #572]	; (1000dc84 <main+0x32c>)
1000da48:	4b8f      	ldr	r3, [pc, #572]	; (1000dc88 <main+0x330>)
1000da4a:	4798      	blx	r3
1000da4c:	4895      	ldr	r0, [pc, #596]	; (1000dca4 <main+0x34c>)
1000da4e:	4b90      	ldr	r3, [pc, #576]	; (1000dc90 <main+0x338>)
1000da50:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_IMU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000da52:	4b95      	ldr	r3, [pc, #596]	; (1000dca8 <main+0x350>)
1000da54:	781b      	ldrb	r3, [r3, #0]
1000da56:	2b04      	cmp	r3, #4
1000da58:	d00c      	beq.n	1000da74 <main+0x11c>
1000da5a:	4b93      	ldr	r3, [pc, #588]	; (1000dca8 <main+0x350>)
1000da5c:	781b      	ldrb	r3, [r3, #0]
1000da5e:	2b07      	cmp	r3, #7
1000da60:	d008      	beq.n	1000da74 <main+0x11c>
1000da62:	4b91      	ldr	r3, [pc, #580]	; (1000dca8 <main+0x350>)
1000da64:	781b      	ldrb	r3, [r3, #0]
1000da66:	2b01      	cmp	r3, #1
1000da68:	d004      	beq.n	1000da74 <main+0x11c>
1000da6a:	4b8f      	ldr	r3, [pc, #572]	; (1000dca8 <main+0x350>)
1000da6c:	781b      	ldrb	r3, [r3, #0]
1000da6e:	2b05      	cmp	r3, #5
1000da70:	d000      	beq.n	1000da74 <main+0x11c>
1000da72:	e0a6      	b.n	1000dbc2 <main+0x26a>
                        //DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
                        //sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    //}                        
                    //sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_0) < 0) {
1000da74:	2000      	movs	r0, #0
1000da76:	4b8d      	ldr	r3, [pc, #564]	; (1000dcac <main+0x354>)
1000da78:	4798      	blx	r3
1000da7a:	2800      	cmp	r0, #0
1000da7c:	db00      	blt.n	1000da80 <main+0x128>
1000da7e:	e0a0      	b.n	1000dbc2 <main+0x26a>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000da80:	4880      	ldr	r0, [pc, #512]	; (1000dc84 <main+0x32c>)
1000da82:	4b81      	ldr	r3, [pc, #516]	; (1000dc88 <main+0x330>)
1000da84:	4798      	blx	r3
1000da86:	488a      	ldr	r0, [pc, #552]	; (1000dcb0 <main+0x358>)
1000da88:	4b81      	ldr	r3, [pc, #516]	; (1000dc90 <main+0x338>)
1000da8a:	4798      	blx	r3
1000da8c:	e099      	b.n	1000dbc2 <main+0x26a>
                }                    
                break;
                
                case INT_BTN1:
                //sms_monitor_states("INT_BTN1");
                DBG_LOG_DEV("\n\r...BTN1");
1000da8e:	487d      	ldr	r0, [pc, #500]	; (1000dc84 <main+0x32c>)
1000da90:	4b7d      	ldr	r3, [pc, #500]	; (1000dc88 <main+0x330>)
1000da92:	4798      	blx	r3
1000da94:	4887      	ldr	r0, [pc, #540]	; (1000dcb4 <main+0x35c>)
1000da96:	4b7e      	ldr	r3, [pc, #504]	; (1000dc90 <main+0x338>)
1000da98:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_IMU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_BUTTON_SOLO) || (sms_working_mode == SMS_MODE_BUTTON_PRESSURE)) {
1000da9a:	4b83      	ldr	r3, [pc, #524]	; (1000dca8 <main+0x350>)
1000da9c:	781b      	ldrb	r3, [r3, #0]
1000da9e:	2b04      	cmp	r3, #4
1000daa0:	d00c      	beq.n	1000dabc <main+0x164>
1000daa2:	4b81      	ldr	r3, [pc, #516]	; (1000dca8 <main+0x350>)
1000daa4:	781b      	ldrb	r3, [r3, #0]
1000daa6:	2b07      	cmp	r3, #7
1000daa8:	d008      	beq.n	1000dabc <main+0x164>
1000daaa:	4b7f      	ldr	r3, [pc, #508]	; (1000dca8 <main+0x350>)
1000daac:	781b      	ldrb	r3, [r3, #0]
1000daae:	2b01      	cmp	r3, #1
1000dab0:	d004      	beq.n	1000dabc <main+0x164>
1000dab2:	4b7d      	ldr	r3, [pc, #500]	; (1000dca8 <main+0x350>)
1000dab4:	781b      	ldrb	r3, [r3, #0]
1000dab6:	2b05      	cmp	r3, #5
1000dab8:	d000      	beq.n	1000dabc <main+0x164>
1000daba:	e082      	b.n	1000dbc2 <main+0x26a>
                    //if(ble_current_state == BLE_STATE_PAIRED)
                    if(sensors_active) {
1000dabc:	4b7e      	ldr	r3, [pc, #504]	; (1000dcb8 <main+0x360>)
1000dabe:	781b      	ldrb	r3, [r3, #0]
1000dac0:	2b00      	cmp	r3, #0
1000dac2:	d00a      	beq.n	1000dada <main+0x182>
                        DBG_LOG_DEV("[main]\t\t\t\tDisabling sensor int...");
1000dac4:	486f      	ldr	r0, [pc, #444]	; (1000dc84 <main+0x32c>)
1000dac6:	4b70      	ldr	r3, [pc, #448]	; (1000dc88 <main+0x330>)
1000dac8:	4798      	blx	r3
1000daca:	487c      	ldr	r0, [pc, #496]	; (1000dcbc <main+0x364>)
1000dacc:	4f70      	ldr	r7, [pc, #448]	; (1000dc90 <main+0x338>)
1000dace:	47b8      	blx	r7
                        sms_sensors_toggle_interrupt(SMS_EXT_INT_DISABLE);
1000dad0:	2001      	movs	r0, #1
1000dad2:	4b7b      	ldr	r3, [pc, #492]	; (1000dcc0 <main+0x368>)
1000dad4:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000dad6:	486f      	ldr	r0, [pc, #444]	; (1000dc94 <main+0x33c>)
1000dad8:	47b8      	blx	r7
                    }                        
                    //sms_button_toggle_interrupt(BTN_INT_DISABLE, BTN_INT_DISABLE);
                    if(sms_button_fn(SMS_BTN_1) < 0) {
1000dada:	2001      	movs	r0, #1
1000dadc:	4b73      	ldr	r3, [pc, #460]	; (1000dcac <main+0x354>)
1000dade:	4798      	blx	r3
1000dae0:	2800      	cmp	r0, #0
1000dae2:	da6e      	bge.n	1000dbc2 <main+0x26a>
                        DBG_LOG("[main]\t\t\t\tError in sms_button_fn()!");
1000dae4:	4867      	ldr	r0, [pc, #412]	; (1000dc84 <main+0x32c>)
1000dae6:	4b68      	ldr	r3, [pc, #416]	; (1000dc88 <main+0x330>)
1000dae8:	4798      	blx	r3
1000daea:	4871      	ldr	r0, [pc, #452]	; (1000dcb0 <main+0x358>)
1000daec:	4b68      	ldr	r3, [pc, #416]	; (1000dc90 <main+0x338>)
1000daee:	4798      	blx	r3
1000daf0:	e067      	b.n	1000dbc2 <main+0x26a>
                }                    
                break;
                
                case INT_IMU_DRDY:
                //sms_monitor_states("INT_IMU_DRDY");
                DBG_LOG_DEV("\n\r...IMU_DRDY");
1000daf2:	4864      	ldr	r0, [pc, #400]	; (1000dc84 <main+0x32c>)
1000daf4:	4b64      	ldr	r3, [pc, #400]	; (1000dc88 <main+0x330>)
1000daf6:	4798      	blx	r3
1000daf8:	4872      	ldr	r0, [pc, #456]	; (1000dcc4 <main+0x36c>)
1000dafa:	4b65      	ldr	r3, [pc, #404]	; (1000dc90 <main+0x338>)
1000dafc:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_IMU) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_IMU_SOLO) || (sms_working_mode == SMS_MODE_IMU_PRESSURE)) {
1000dafe:	4b6a      	ldr	r3, [pc, #424]	; (1000dca8 <main+0x350>)
1000db00:	781b      	ldrb	r3, [r3, #0]
1000db02:	2b04      	cmp	r3, #4
1000db04:	d05d      	beq.n	1000dbc2 <main+0x26a>
1000db06:	4b68      	ldr	r3, [pc, #416]	; (1000dca8 <main+0x350>)
1000db08:	781b      	ldrb	r3, [r3, #0]
1000db0a:	2b07      	cmp	r3, #7
1000db0c:	d059      	beq.n	1000dbc2 <main+0x26a>
1000db0e:	4b66      	ldr	r3, [pc, #408]	; (1000dca8 <main+0x350>)
1000db10:	781b      	ldrb	r3, [r3, #0]
1000db12:	2b02      	cmp	r3, #2
1000db14:	d055      	beq.n	1000dbc2 <main+0x26a>
1000db16:	4b64      	ldr	r3, [pc, #400]	; (1000dca8 <main+0x350>)
1000db18:	781b      	ldrb	r3, [r3, #0]
1000db1a:	e052      	b.n	1000dbc2 <main+0x26a>
                }                    
                break;
                
                case INT_AON_TIMER:
                //sms_monitor_states("INT_AON_TIMER");
                DBG_LOG_DEV("\n\r...AON_TIMER");
1000db1c:	4859      	ldr	r0, [pc, #356]	; (1000dc84 <main+0x32c>)
1000db1e:	4b5a      	ldr	r3, [pc, #360]	; (1000dc88 <main+0x330>)
1000db20:	4798      	blx	r3
1000db22:	4869      	ldr	r0, [pc, #420]	; (1000dcc8 <main+0x370>)
1000db24:	4b5a      	ldr	r3, [pc, #360]	; (1000dc90 <main+0x338>)
1000db26:	4798      	blx	r3
                if((sms_working_mode == SMS_MODE_BUTTON_PRESSURE) || (sms_working_mode == SMS_MODE_COMPLETE) || (sms_working_mode == SMS_MODE_PRESSURE_SOLO) || (sms_working_mode == SMS_MODE_IMU_PRESSURE)) {
1000db28:	4b5f      	ldr	r3, [pc, #380]	; (1000dca8 <main+0x350>)
1000db2a:	781b      	ldrb	r3, [r3, #0]
1000db2c:	2b05      	cmp	r3, #5
1000db2e:	d00b      	beq.n	1000db48 <main+0x1f0>
1000db30:	4b5d      	ldr	r3, [pc, #372]	; (1000dca8 <main+0x350>)
1000db32:	781b      	ldrb	r3, [r3, #0]
1000db34:	2b07      	cmp	r3, #7
1000db36:	d007      	beq.n	1000db48 <main+0x1f0>
1000db38:	4b5b      	ldr	r3, [pc, #364]	; (1000dca8 <main+0x350>)
1000db3a:	781b      	ldrb	r3, [r3, #0]
1000db3c:	2b03      	cmp	r3, #3
1000db3e:	d003      	beq.n	1000db48 <main+0x1f0>
1000db40:	4b59      	ldr	r3, [pc, #356]	; (1000dca8 <main+0x350>)
1000db42:	781b      	ldrb	r3, [r3, #0]
1000db44:	2b06      	cmp	r3, #6
1000db46:	d13c      	bne.n	1000dbc2 <main+0x26a>
                    if(ble_current_state == BLE_STATE_PAIRED) {
1000db48:	4b2e      	ldr	r3, [pc, #184]	; (1000dc04 <main+0x2ac>)
1000db4a:	781b      	ldrb	r3, [r3, #0]
1000db4c:	2b22      	cmp	r3, #34	; 0x22
1000db4e:	d10a      	bne.n	1000db66 <main+0x20e>
                        //DBG_LOG_DEV("[main]\t\t\tDisabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXT_INT_DISABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                        DBG_LOG_DEV("[main]\t\t\t\tPolling pressure data...");
1000db50:	484c      	ldr	r0, [pc, #304]	; (1000dc84 <main+0x32c>)
1000db52:	4b4d      	ldr	r3, [pc, #308]	; (1000dc88 <main+0x330>)
1000db54:	4798      	blx	r3
1000db56:	485d      	ldr	r0, [pc, #372]	; (1000dccc <main+0x374>)
1000db58:	4f4d      	ldr	r7, [pc, #308]	; (1000dc90 <main+0x338>)
1000db5a:	47b8      	blx	r7
                        sms_pressure_poll_data();
1000db5c:	4b5c      	ldr	r3, [pc, #368]	; (1000dcd0 <main+0x378>)
1000db5e:	4798      	blx	r3
                        DBG_LOG_CONT_DEV(" done!");
1000db60:	484c      	ldr	r0, [pc, #304]	; (1000dc94 <main+0x33c>)
1000db62:	47b8      	blx	r7
1000db64:	e02d      	b.n	1000dbc2 <main+0x26a>
                        //DBG_LOG_DEV("[main]\t\t\tEnabling button int...");
                        //sms_button_toggle_interrupt(SMS_EXT_INT_ENABLE);
                        //DBG_LOG_CONT_DEV(" done!");
                    }
                    else if(ble_current_state == BLE_STATE_INDICATING) {
1000db66:	4b27      	ldr	r3, [pc, #156]	; (1000dc04 <main+0x2ac>)
1000db68:	781b      	ldrb	r3, [r3, #0]
1000db6a:	2b23      	cmp	r3, #35	; 0x23
1000db6c:	d106      	bne.n	1000db7c <main+0x224>
                        DBG_LOG_DEV("[main]\t\t\t\tAON timer ready while indicating... skipping");
1000db6e:	4845      	ldr	r0, [pc, #276]	; (1000dc84 <main+0x32c>)
1000db70:	4b45      	ldr	r3, [pc, #276]	; (1000dc88 <main+0x330>)
1000db72:	4798      	blx	r3
1000db74:	4857      	ldr	r0, [pc, #348]	; (1000dcd4 <main+0x37c>)
1000db76:	4b46      	ldr	r3, [pc, #280]	; (1000dc90 <main+0x338>)
1000db78:	4798      	blx	r3
1000db7a:	e022      	b.n	1000dbc2 <main+0x26a>
                    }
                    else {
                        sms_timer_aon_disable();
1000db7c:	4b56      	ldr	r3, [pc, #344]	; (1000dcd8 <main+0x380>)
1000db7e:	4798      	blx	r3
                        sms_ble_power_down();
1000db80:	4b3c      	ldr	r3, [pc, #240]	; (1000dc74 <main+0x31c>)
1000db82:	4798      	blx	r3
1000db84:	e01d      	b.n	1000dbc2 <main+0x26a>
                }                    
                break;
                
                case INT_DUALTIMER1:
                //sms_monitor_states("INT_DUALTIMER1");
                DBG_LOG_DEV("\n\r...DUALTIMER1");
1000db86:	483f      	ldr	r0, [pc, #252]	; (1000dc84 <main+0x32c>)
1000db88:	4b3f      	ldr	r3, [pc, #252]	; (1000dc88 <main+0x330>)
1000db8a:	4798      	blx	r3
1000db8c:	4853      	ldr	r0, [pc, #332]	; (1000dcdc <main+0x384>)
1000db8e:	4b40      	ldr	r3, [pc, #256]	; (1000dc90 <main+0x338>)
1000db90:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER1);
1000db92:	2000      	movs	r0, #0
1000db94:	4b52      	ldr	r3, [pc, #328]	; (1000dce0 <main+0x388>)
1000db96:	4798      	blx	r3
                sms_dualtimer1_fn();
1000db98:	4b52      	ldr	r3, [pc, #328]	; (1000dce4 <main+0x38c>)
1000db9a:	4798      	blx	r3
                break;
1000db9c:	e011      	b.n	1000dbc2 <main+0x26a>
                
                case INT_DUALTIMER2:
                //sms_monitor_states("INT_DUALTIMER2");
                DBG_LOG_DEV("\n\r...DUALTIMER2");
1000db9e:	4839      	ldr	r0, [pc, #228]	; (1000dc84 <main+0x32c>)
1000dba0:	4b39      	ldr	r3, [pc, #228]	; (1000dc88 <main+0x330>)
1000dba2:	4798      	blx	r3
1000dba4:	4850      	ldr	r0, [pc, #320]	; (1000dce8 <main+0x390>)
1000dba6:	4b3a      	ldr	r3, [pc, #232]	; (1000dc90 <main+0x338>)
1000dba8:	4798      	blx	r3
                sms_dualtimer_stop(DUALTIMER_TIMER2);
1000dbaa:	2001      	movs	r0, #1
1000dbac:	4b4c      	ldr	r3, [pc, #304]	; (1000dce0 <main+0x388>)
1000dbae:	4798      	blx	r3
                sms_dualtimer2_fn();
1000dbb0:	4b4e      	ldr	r3, [pc, #312]	; (1000dcec <main+0x394>)
1000dbb2:	4798      	blx	r3
                break;
1000dbb4:	e005      	b.n	1000dbc2 <main+0x26a>
                
                default:
                DBG_LOG_DEV("\n\r...??");
1000dbb6:	4833      	ldr	r0, [pc, #204]	; (1000dc84 <main+0x32c>)
1000dbb8:	4b33      	ldr	r3, [pc, #204]	; (1000dc88 <main+0x330>)
1000dbba:	4798      	blx	r3
1000dbbc:	484c      	ldr	r0, [pc, #304]	; (1000dcf0 <main+0x398>)
1000dbbe:	4b34      	ldr	r3, [pc, #208]	; (1000dc90 <main+0x338>)
1000dbc0:	4798      	blx	r3
                //sms_monitor_states("ERROR!!");
                break;
            }
            
            DBG_LOG_DEV("[main]\t\t\t\tEnabling button int...");
1000dbc2:	4830      	ldr	r0, [pc, #192]	; (1000dc84 <main+0x32c>)
1000dbc4:	4b30      	ldr	r3, [pc, #192]	; (1000dc88 <main+0x330>)
1000dbc6:	4798      	blx	r3
1000dbc8:	484a      	ldr	r0, [pc, #296]	; (1000dcf4 <main+0x39c>)
1000dbca:	4f31      	ldr	r7, [pc, #196]	; (1000dc90 <main+0x338>)
1000dbcc:	47b8      	blx	r7
            sms_button_toggle_interrupt(BTN_INT_ENABLE, BTN_INT_ENABLE);
1000dbce:	2100      	movs	r1, #0
1000dbd0:	2000      	movs	r0, #0
1000dbd2:	4b27      	ldr	r3, [pc, #156]	; (1000dc70 <main+0x318>)
1000dbd4:	4798      	blx	r3
            DBG_LOG_CONT_DEV(" done!");
1000dbd6:	482f      	ldr	r0, [pc, #188]	; (1000dc94 <main+0x33c>)
1000dbd8:	47b8      	blx	r7
            sms_current_interrupt.int_on = false;
1000dbda:	4b28      	ldr	r3, [pc, #160]	; (1000dc7c <main+0x324>)
1000dbdc:	2200      	movs	r2, #0
1000dbde:	705a      	strb	r2, [r3, #1]
            sms_current_interrupt.source = INT_NONE;
1000dbe0:	701a      	strb	r2, [r3, #0]
        }
        
        
        if(ulp_ready) {
1000dbe2:	4b45      	ldr	r3, [pc, #276]	; (1000dcf8 <main+0x3a0>)
1000dbe4:	781b      	ldrb	r3, [r3, #0]
1000dbe6:	2b00      	cmp	r3, #0
1000dbe8:	d008      	beq.n	1000dbfc <main+0x2a4>
            DBG_LOG_DEV("[main]\t\t\t\tULP...");
1000dbea:	4826      	ldr	r0, [pc, #152]	; (1000dc84 <main+0x32c>)
1000dbec:	4b26      	ldr	r3, [pc, #152]	; (1000dc88 <main+0x330>)
1000dbee:	4798      	blx	r3
1000dbf0:	4842      	ldr	r0, [pc, #264]	; (1000dcfc <main+0x3a4>)
1000dbf2:	4f27      	ldr	r7, [pc, #156]	; (1000dc90 <main+0x338>)
1000dbf4:	47b8      	blx	r7
            //ulp_active = true;
            //release_sleep_lock()
            DBG_LOG_CONT_DEV(" !!");
1000dbf6:	4842      	ldr	r0, [pc, #264]	; (1000dd00 <main+0x3a8>)
1000dbf8:	47b8      	blx	r7
1000dbfa:	e6f3      	b.n	1000d9e4 <main+0x8c>
        }            
        else {
            ulp_active = false;
1000dbfc:	2200      	movs	r2, #0
1000dbfe:	4b20      	ldr	r3, [pc, #128]	; (1000dc80 <main+0x328>)
1000dc00:	701a      	strb	r2, [r3, #0]
1000dc02:	e6ef      	b.n	1000d9e4 <main+0x8c>
1000dc04:	10016b76 	.word	0x10016b76
1000dc08:	1000d011 	.word	0x1000d011
1000dc0c:	1000a599 	.word	0x1000a599
1000dc10:	1000cd05 	.word	0x1000cd05
1000dc14:	1000d565 	.word	0x1000d565
1000dc18:	1000d75d 	.word	0x1000d75d
1000dc1c:	10009369 	.word	0x10009369
1000dc20:	100087d9 	.word	0x100087d9
1000dc24:	10008cc1 	.word	0x10008cc1
1000dc28:	10009225 	.word	0x10009225
1000dc2c:	10008c21 	.word	0x10008c21
1000dc30:	10016b48 	.word	0x10016b48
1000dc34:	1000d7d5 	.word	0x1000d7d5
1000dc38:	1000c379 	.word	0x1000c379
1000dc3c:	10008bbd 	.word	0x10008bbd
1000dc40:	100091c1 	.word	0x100091c1
1000dc44:	1000d825 	.word	0x1000d825
1000dc48:	1000d5a9 	.word	0x1000d5a9
1000dc4c:	10009429 	.word	0x10009429
1000dc50:	100093a5 	.word	0x100093a5
1000dc54:	10009449 	.word	0x10009449
1000dc58:	1000888d 	.word	0x1000888d
1000dc5c:	1001378c 	.word	0x1001378c
1000dc60:	1000c2a9 	.word	0x1000c2a9
1000dc64:	100137d8 	.word	0x100137d8
1000dc68:	1000d751 	.word	0x1000d751
1000dc6c:	1000cc75 	.word	0x1000cc75
1000dc70:	10008af9 	.word	0x10008af9
1000dc74:	10008341 	.word	0x10008341
1000dc78:	1000cb71 	.word	0x1000cb71
1000dc7c:	10016b70 	.word	0x10016b70
1000dc80:	10016b7b 	.word	0x10016b7b
1000dc84:	10013464 	.word	0x10013464
1000dc88:	100123d9 	.word	0x100123d9
1000dc8c:	10014cd0 	.word	0x10014cd0
1000dc90:	100122b9 	.word	0x100122b9
1000dc94:	10014ce8 	.word	0x10014ce8
1000dc98:	10014cf0 	.word	0x10014cf0
1000dc9c:	10014c54 	.word	0x10014c54
1000dca0:	10014d14 	.word	0x10014d14
1000dca4:	10014d28 	.word	0x10014d28
1000dca8:	10016acd 	.word	0x10016acd
1000dcac:	10008909 	.word	0x10008909
1000dcb0:	10014d34 	.word	0x10014d34
1000dcb4:	10014d58 	.word	0x10014d58
1000dcb8:	10016b72 	.word	0x10016b72
1000dcbc:	10014d64 	.word	0x10014d64
1000dcc0:	1000d8fd 	.word	0x1000d8fd
1000dcc4:	10014d88 	.word	0x10014d88
1000dcc8:	10014d98 	.word	0x10014d98
1000dccc:	10014da8 	.word	0x10014da8
1000dcd0:	100090d9 	.word	0x100090d9
1000dcd4:	10014dcc 	.word	0x10014dcc
1000dcd8:	10009321 	.word	0x10009321
1000dcdc:	10014e04 	.word	0x10014e04
1000dce0:	1000941d 	.word	0x1000941d
1000dce4:	10009469 	.word	0x10009469
1000dce8:	10014e14 	.word	0x10014e14
1000dcec:	100097ed 	.word	0x100097ed
1000dcf0:	10014e24 	.word	0x10014e24
1000dcf4:	10014e2c 	.word	0x10014e2c
1000dcf8:	10016ace 	.word	0x10016ace
1000dcfc:	10014e50 	.word	0x10014e50
1000dd00:	10014e64 	.word	0x10014e64

1000dd04 <internal_event_post>:
1000dd04:	b570      	push	{r4, r5, r6, lr}
1000dd06:	4d12      	ldr	r5, [pc, #72]	; (1000dd50 <internal_event_post+0x4c>)
1000dd08:	682c      	ldr	r4, [r5, #0]
1000dd0a:	2c00      	cmp	r4, #0
1000dd0c:	d014      	beq.n	1000dd38 <internal_event_post+0x34>
1000dd0e:	6826      	ldr	r6, [r4, #0]
1000dd10:	60e2      	str	r2, [r4, #12]
1000dd12:	602e      	str	r6, [r5, #0]
1000dd14:	2500      	movs	r5, #0
1000dd16:	4a0f      	ldr	r2, [pc, #60]	; (1000dd54 <internal_event_post+0x50>)
1000dd18:	8123      	strh	r3, [r4, #8]
1000dd1a:	6813      	ldr	r3, [r2, #0]
1000dd1c:	6025      	str	r5, [r4, #0]
1000dd1e:	80a0      	strh	r0, [r4, #4]
1000dd20:	80e1      	strh	r1, [r4, #6]
1000dd22:	42ab      	cmp	r3, r5
1000dd24:	d101      	bne.n	1000dd2a <internal_event_post+0x26>
1000dd26:	6014      	str	r4, [r2, #0]
1000dd28:	e011      	b.n	1000dd4e <internal_event_post+0x4a>
1000dd2a:	681a      	ldr	r2, [r3, #0]
1000dd2c:	2a00      	cmp	r2, #0
1000dd2e:	d001      	beq.n	1000dd34 <internal_event_post+0x30>
1000dd30:	1c13      	adds	r3, r2, #0
1000dd32:	e7fa      	b.n	1000dd2a <internal_event_post+0x26>
1000dd34:	601c      	str	r4, [r3, #0]
1000dd36:	e00a      	b.n	1000dd4e <internal_event_post+0x4a>
1000dd38:	b2c4      	uxtb	r4, r0
1000dd3a:	2c00      	cmp	r4, #0
1000dd3c:	d107      	bne.n	1000dd4e <internal_event_post+0x4a>
1000dd3e:	4c06      	ldr	r4, [pc, #24]	; (1000dd58 <internal_event_post+0x54>)
1000dd40:	60e2      	str	r2, [r4, #12]
1000dd42:	2201      	movs	r2, #1
1000dd44:	8123      	strh	r3, [r4, #8]
1000dd46:	4b05      	ldr	r3, [pc, #20]	; (1000dd5c <internal_event_post+0x58>)
1000dd48:	80a0      	strh	r0, [r4, #4]
1000dd4a:	80e1      	strh	r1, [r4, #6]
1000dd4c:	701a      	strb	r2, [r3, #0]
1000dd4e:	bd70      	pop	{r4, r5, r6, pc}
1000dd50:	10016a08 	.word	0x10016a08
1000dd54:	10016a04 	.word	0x10016a04
1000dd58:	100169f0 	.word	0x100169f0
1000dd5c:	10016a00 	.word	0x10016a00

1000dd60 <internal_event_init>:
1000dd60:	b510      	push	{r4, lr}
1000dd62:	4b08      	ldr	r3, [pc, #32]	; (1000dd84 <internal_event_init+0x24>)
1000dd64:	0900      	lsrs	r0, r0, #4
1000dd66:	0100      	lsls	r0, r0, #4
1000dd68:	681a      	ldr	r2, [r3, #0]
1000dd6a:	1808      	adds	r0, r1, r0
1000dd6c:	4281      	cmp	r1, r0
1000dd6e:	d003      	beq.n	1000dd78 <internal_event_init+0x18>
1000dd70:	600a      	str	r2, [r1, #0]
1000dd72:	1c0a      	adds	r2, r1, #0
1000dd74:	3110      	adds	r1, #16
1000dd76:	e7f9      	b.n	1000dd6c <internal_event_init+0xc>
1000dd78:	601a      	str	r2, [r3, #0]
1000dd7a:	2200      	movs	r2, #0
1000dd7c:	4b02      	ldr	r3, [pc, #8]	; (1000dd88 <internal_event_init+0x28>)
1000dd7e:	601a      	str	r2, [r3, #0]
1000dd80:	bd10      	pop	{r4, pc}
1000dd82:	46c0      	nop			; (mov r8, r8)
1000dd84:	10016a08 	.word	0x10016a08
1000dd88:	10016a04 	.word	0x10016a04

1000dd8c <special_events_handler>:
1000dd8c:	b538      	push	{r3, r4, r5, lr}
1000dd8e:	4c1b      	ldr	r4, [pc, #108]	; (1000ddfc <special_events_handler+0x70>)
1000dd90:	1c03      	adds	r3, r0, #0
1000dd92:	8825      	ldrh	r5, [r4, #0]
1000dd94:	1c08      	adds	r0, r1, #0
1000dd96:	1c21      	adds	r1, r4, #0
1000dd98:	429d      	cmp	r5, r3
1000dd9a:	d107      	bne.n	1000ddac <special_events_handler+0x20>
1000dd9c:	88a5      	ldrh	r5, [r4, #4]
1000dd9e:	4285      	cmp	r5, r0
1000dda0:	d104      	bne.n	1000ddac <special_events_handler+0x20>
1000dda2:	2301      	movs	r3, #1
1000dda4:	425b      	negs	r3, r3
1000dda6:	8023      	strh	r3, [r4, #0]
1000dda8:	60a2      	str	r2, [r4, #8]
1000ddaa:	e009      	b.n	1000ddc0 <special_events_handler+0x34>
1000ddac:	884c      	ldrh	r4, [r1, #2]
1000ddae:	429c      	cmp	r4, r3
1000ddb0:	d10a      	bne.n	1000ddc8 <special_events_handler+0x3c>
1000ddb2:	888c      	ldrh	r4, [r1, #4]
1000ddb4:	4284      	cmp	r4, r0
1000ddb6:	d107      	bne.n	1000ddc8 <special_events_handler+0x3c>
1000ddb8:	2301      	movs	r3, #1
1000ddba:	425b      	negs	r3, r3
1000ddbc:	804b      	strh	r3, [r1, #2]
1000ddbe:	608a      	str	r2, [r1, #8]
1000ddc0:	4b0f      	ldr	r3, [pc, #60]	; (1000de00 <special_events_handler+0x74>)
1000ddc2:	4798      	blx	r3
1000ddc4:	2001      	movs	r0, #1
1000ddc6:	e017      	b.n	1000ddf8 <special_events_handler+0x6c>
1000ddc8:	490e      	ldr	r1, [pc, #56]	; (1000de04 <special_events_handler+0x78>)
1000ddca:	428b      	cmp	r3, r1
1000ddcc:	d00e      	beq.n	1000ddec <special_events_handler+0x60>
1000ddce:	490e      	ldr	r1, [pc, #56]	; (1000de08 <special_events_handler+0x7c>)
1000ddd0:	428b      	cmp	r3, r1
1000ddd2:	d007      	beq.n	1000dde4 <special_events_handler+0x58>
1000ddd4:	490d      	ldr	r1, [pc, #52]	; (1000de0c <special_events_handler+0x80>)
1000ddd6:	2000      	movs	r0, #0
1000ddd8:	428b      	cmp	r3, r1
1000ddda:	d10d      	bne.n	1000ddf8 <special_events_handler+0x6c>
1000dddc:	1c10      	adds	r0, r2, #0
1000ddde:	4b0c      	ldr	r3, [pc, #48]	; (1000de10 <special_events_handler+0x84>)
1000dde0:	4798      	blx	r3
1000dde2:	e7ef      	b.n	1000ddc4 <special_events_handler+0x38>
1000dde4:	1c11      	adds	r1, r2, #0
1000dde6:	4b0b      	ldr	r3, [pc, #44]	; (1000de14 <special_events_handler+0x88>)
1000dde8:	2200      	movs	r2, #0
1000ddea:	e002      	b.n	1000ddf2 <special_events_handler+0x66>
1000ddec:	1c11      	adds	r1, r2, #0
1000ddee:	2200      	movs	r2, #0
1000ddf0:	4b09      	ldr	r3, [pc, #36]	; (1000de18 <special_events_handler+0x8c>)
1000ddf2:	4798      	blx	r3
1000ddf4:	4243      	negs	r3, r0
1000ddf6:	4158      	adcs	r0, r3
1000ddf8:	bd38      	pop	{r3, r4, r5, pc}
1000ddfa:	46c0      	nop			; (mov r8, r8)
1000ddfc:	10017864 	.word	0x10017864
1000de00:	1000f7e9 	.word	0x1000f7e9
1000de04:	00000e13 	.word	0x00000e13
1000de08:	00000e15 	.word	0x00000e15
1000de0c:	00000e01 	.word	0x00000e01
1000de10:	1000fb59 	.word	0x1000fb59
1000de14:	1000fd19 	.word	0x1000fd19
1000de18:	1000fdf1 	.word	0x1000fdf1

1000de1c <at_ble_event_get>:
1000de1c:	2300      	movs	r3, #0
1000de1e:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de20:	b087      	sub	sp, #28
1000de22:	9204      	str	r2, [sp, #16]
1000de24:	7003      	strb	r3, [r0, #0]
1000de26:	9b04      	ldr	r3, [sp, #16]
1000de28:	9003      	str	r0, [sp, #12]
1000de2a:	3b01      	subs	r3, #1
1000de2c:	1c0d      	adds	r5, r1, #0
1000de2e:	9305      	str	r3, [sp, #20]
1000de30:	3303      	adds	r3, #3
1000de32:	d802      	bhi.n	1000de3a <at_ble_event_get+0x1e>
1000de34:	9804      	ldr	r0, [sp, #16]
1000de36:	4bae      	ldr	r3, [pc, #696]	; (1000e0f0 <at_ble_event_get+0x2d4>)
1000de38:	4798      	blx	r3
1000de3a:	9b05      	ldr	r3, [sp, #20]
1000de3c:	4cad      	ldr	r4, [pc, #692]	; (1000e0f4 <at_ble_event_get+0x2d8>)
1000de3e:	3303      	adds	r3, #3
1000de40:	d902      	bls.n	1000de48 <at_ble_event_get+0x2c>
1000de42:	2300      	movs	r3, #0
1000de44:	9302      	str	r3, [sp, #8]
1000de46:	e015      	b.n	1000de74 <at_ble_event_get+0x58>
1000de48:	2300      	movs	r3, #0
1000de4a:	9302      	str	r3, [sp, #8]
1000de4c:	6823      	ldr	r3, [r4, #0]
1000de4e:	2b00      	cmp	r3, #0
1000de50:	d113      	bne.n	1000de7a <at_ble_event_get+0x5e>
1000de52:	9b02      	ldr	r3, [sp, #8]
1000de54:	2bd0      	cmp	r3, #208	; 0xd0
1000de56:	d100      	bne.n	1000de5a <at_ble_event_get+0x3e>
1000de58:	e2da      	b.n	1000e410 <at_ble_event_get+0x5f4>
1000de5a:	9804      	ldr	r0, [sp, #16]
1000de5c:	4ba6      	ldr	r3, [pc, #664]	; (1000e0f8 <at_ble_event_get+0x2dc>)
1000de5e:	4798      	blx	r3
1000de60:	9002      	str	r0, [sp, #8]
1000de62:	2802      	cmp	r0, #2
1000de64:	d1f2      	bne.n	1000de4c <at_ble_event_get+0x30>
1000de66:	e03f      	b.n	1000dee8 <at_ble_event_get+0xcc>
1000de68:	9804      	ldr	r0, [sp, #16]
1000de6a:	4ba3      	ldr	r3, [pc, #652]	; (1000e0f8 <at_ble_event_get+0x2dc>)
1000de6c:	4798      	blx	r3
1000de6e:	9002      	str	r0, [sp, #8]
1000de70:	2802      	cmp	r0, #2
1000de72:	d039      	beq.n	1000dee8 <at_ble_event_get+0xcc>
1000de74:	6823      	ldr	r3, [r4, #0]
1000de76:	2b00      	cmp	r3, #0
1000de78:	d0f6      	beq.n	1000de68 <at_ble_event_get+0x4c>
1000de7a:	9b02      	ldr	r3, [sp, #8]
1000de7c:	2bd0      	cmp	r3, #208	; 0xd0
1000de7e:	d100      	bne.n	1000de82 <at_ble_event_get+0x66>
1000de80:	e2c6      	b.n	1000e410 <at_ble_event_get+0x5f4>
1000de82:	9b02      	ldr	r3, [sp, #8]
1000de84:	3b03      	subs	r3, #3
1000de86:	1e5a      	subs	r2, r3, #1
1000de88:	4193      	sbcs	r3, r2
1000de8a:	9a02      	ldr	r2, [sp, #8]
1000de8c:	425b      	negs	r3, r3
1000de8e:	401a      	ands	r2, r3
1000de90:	6823      	ldr	r3, [r4, #0]
1000de92:	9202      	str	r2, [sp, #8]
1000de94:	2b00      	cmp	r3, #0
1000de96:	d100      	bne.n	1000de9a <at_ble_event_get+0x7e>
1000de98:	e2c2      	b.n	1000e420 <at_ble_event_get+0x604>
1000de9a:	681a      	ldr	r2, [r3, #0]
1000de9c:	68de      	ldr	r6, [r3, #12]
1000de9e:	6022      	str	r2, [r4, #0]
1000dea0:	88da      	ldrh	r2, [r3, #6]
1000dea2:	9201      	str	r2, [sp, #4]
1000dea4:	4a95      	ldr	r2, [pc, #596]	; (1000e0fc <at_ble_event_get+0x2e0>)
1000dea6:	889c      	ldrh	r4, [r3, #4]
1000dea8:	6811      	ldr	r1, [r2, #0]
1000deaa:	6013      	str	r3, [r2, #0]
1000deac:	6019      	str	r1, [r3, #0]
1000deae:	4b94      	ldr	r3, [pc, #592]	; (1000e100 <at_ble_event_get+0x2e4>)
1000deb0:	781b      	ldrb	r3, [r3, #0]
1000deb2:	2b01      	cmp	r3, #1
1000deb4:	d10f      	bne.n	1000ded6 <at_ble_event_get+0xba>
1000deb6:	4b93      	ldr	r3, [pc, #588]	; (1000e104 <at_ble_event_get+0x2e8>)
1000deb8:	4a92      	ldr	r2, [pc, #584]	; (1000e104 <at_ble_event_get+0x2e8>)
1000deba:	8898      	ldrh	r0, [r3, #4]
1000debc:	88d9      	ldrh	r1, [r3, #6]
1000debe:	68d2      	ldr	r2, [r2, #12]
1000dec0:	891b      	ldrh	r3, [r3, #8]
1000dec2:	4f91      	ldr	r7, [pc, #580]	; (1000e108 <at_ble_event_get+0x2ec>)
1000dec4:	47b8      	blx	r7
1000dec6:	2210      	movs	r2, #16
1000dec8:	4b90      	ldr	r3, [pc, #576]	; (1000e10c <at_ble_event_get+0x2f0>)
1000deca:	488e      	ldr	r0, [pc, #568]	; (1000e104 <at_ble_event_get+0x2e8>)
1000decc:	2100      	movs	r1, #0
1000dece:	4798      	blx	r3
1000ded0:	2300      	movs	r3, #0
1000ded2:	4a8b      	ldr	r2, [pc, #556]	; (1000e100 <at_ble_event_get+0x2e4>)
1000ded4:	7013      	strb	r3, [r2, #0]
1000ded6:	9b02      	ldr	r3, [sp, #8]
1000ded8:	2b00      	cmp	r3, #0
1000deda:	d114      	bne.n	1000df06 <at_ble_event_get+0xea>
1000dedc:	4b8c      	ldr	r3, [pc, #560]	; (1000e110 <at_ble_event_get+0x2f4>)
1000dede:	429c      	cmp	r4, r3
1000dee0:	d009      	beq.n	1000def6 <at_ble_event_get+0xda>
1000dee2:	4b8c      	ldr	r3, [pc, #560]	; (1000e114 <at_ble_event_get+0x2f8>)
1000dee4:	429c      	cmp	r4, r3
1000dee6:	d127      	bne.n	1000df38 <at_ble_event_get+0x11c>
1000dee8:	233a      	movs	r3, #58	; 0x3a
1000deea:	9a03      	ldr	r2, [sp, #12]
1000deec:	7013      	strb	r3, [r2, #0]
1000deee:	2300      	movs	r3, #0
1000def0:	9302      	str	r3, [sp, #8]
1000def2:	1c1d      	adds	r5, r3, #0
1000def4:	e007      	b.n	1000df06 <at_ble_event_get+0xea>
1000def6:	9b01      	ldr	r3, [sp, #4]
1000def8:	42a3      	cmp	r3, r4
1000defa:	d000      	beq.n	1000defe <at_ble_event_get+0xe2>
1000defc:	e28a      	b.n	1000e414 <at_ble_event_get+0x5f8>
1000defe:	2338      	movs	r3, #56	; 0x38
1000df00:	9a03      	ldr	r2, [sp, #12]
1000df02:	7013      	strb	r3, [r2, #0]
1000df04:	602e      	str	r6, [r5, #0]
1000df06:	9b03      	ldr	r3, [sp, #12]
1000df08:	781b      	ldrb	r3, [r3, #0]
1000df0a:	2b3b      	cmp	r3, #59	; 0x3b
1000df0c:	d101      	bne.n	1000df12 <at_ble_event_get+0xf6>
1000df0e:	4b82      	ldr	r3, [pc, #520]	; (1000e118 <at_ble_event_get+0x2fc>)
1000df10:	4798      	blx	r3
1000df12:	9b03      	ldr	r3, [sp, #12]
1000df14:	781b      	ldrb	r3, [r3, #0]
1000df16:	2b3b      	cmp	r3, #59	; 0x3b
1000df18:	d003      	beq.n	1000df22 <at_ble_event_get+0x106>
1000df1a:	9b05      	ldr	r3, [sp, #20]
1000df1c:	3303      	adds	r3, #3
1000df1e:	d904      	bls.n	1000df2a <at_ble_event_get+0x10e>
1000df20:	e283      	b.n	1000e42a <at_ble_event_get+0x60e>
1000df22:	9b02      	ldr	r3, [sp, #8]
1000df24:	2b00      	cmp	r3, #0
1000df26:	d088      	beq.n	1000de3a <at_ble_event_get+0x1e>
1000df28:	e7f7      	b.n	1000df1a <at_ble_event_get+0xfe>
1000df2a:	9b02      	ldr	r3, [sp, #8]
1000df2c:	2bd0      	cmp	r3, #208	; 0xd0
1000df2e:	d100      	bne.n	1000df32 <at_ble_event_get+0x116>
1000df30:	e27b      	b.n	1000e42a <at_ble_event_get+0x60e>
1000df32:	4b7a      	ldr	r3, [pc, #488]	; (1000e11c <at_ble_event_get+0x300>)
1000df34:	4798      	blx	r3
1000df36:	e278      	b.n	1000e42a <at_ble_event_get+0x60e>
1000df38:	9b01      	ldr	r3, [sp, #4]
1000df3a:	2bbb      	cmp	r3, #187	; 0xbb
1000df3c:	d125      	bne.n	1000df8a <at_ble_event_get+0x16e>
1000df3e:	2cbb      	cmp	r4, #187	; 0xbb
1000df40:	d123      	bne.n	1000df8a <at_ble_event_get+0x16e>
1000df42:	466b      	mov	r3, sp
1000df44:	891b      	ldrh	r3, [r3, #8]
1000df46:	80ab      	strh	r3, [r5, #4]
1000df48:	78b3      	ldrb	r3, [r6, #2]
1000df4a:	7872      	ldrb	r2, [r6, #1]
1000df4c:	78f0      	ldrb	r0, [r6, #3]
1000df4e:	021b      	lsls	r3, r3, #8
1000df50:	4313      	orrs	r3, r2
1000df52:	7971      	ldrb	r1, [r6, #5]
1000df54:	7932      	ldrb	r2, [r6, #4]
1000df56:	70a8      	strb	r0, [r5, #2]
1000df58:	4871      	ldr	r0, [pc, #452]	; (1000e120 <at_ble_event_get+0x304>)
1000df5a:	802b      	strh	r3, [r5, #0]
1000df5c:	4283      	cmp	r3, r0
1000df5e:	d806      	bhi.n	1000df6e <at_ble_event_get+0x152>
1000df60:	4a70      	ldr	r2, [pc, #448]	; (1000e124 <at_ble_event_get+0x308>)
1000df62:	4293      	cmp	r3, r2
1000df64:	d20b      	bcs.n	1000df7e <at_ble_event_get+0x162>
1000df66:	4a70      	ldr	r2, [pc, #448]	; (1000e128 <at_ble_event_get+0x30c>)
1000df68:	4293      	cmp	r3, r2
1000df6a:	d008      	beq.n	1000df7e <at_ble_event_get+0x162>
1000df6c:	e009      	b.n	1000df82 <at_ble_event_get+0x166>
1000df6e:	486f      	ldr	r0, [pc, #444]	; (1000e12c <at_ble_event_get+0x310>)
1000df70:	4283      	cmp	r3, r0
1000df72:	d106      	bne.n	1000df82 <at_ble_event_get+0x166>
1000df74:	020b      	lsls	r3, r1, #8
1000df76:	4313      	orrs	r3, r2
1000df78:	80ab      	strh	r3, [r5, #4]
1000df7a:	2337      	movs	r3, #55	; 0x37
1000df7c:	e002      	b.n	1000df84 <at_ble_event_get+0x168>
1000df7e:	2336      	movs	r3, #54	; 0x36
1000df80:	e000      	b.n	1000df84 <at_ble_event_get+0x168>
1000df82:	2300      	movs	r3, #0
1000df84:	9a03      	ldr	r2, [sp, #12]
1000df86:	7013      	strb	r3, [r2, #0]
1000df88:	e7bd      	b.n	1000df06 <at_ble_event_get+0xea>
1000df8a:	4b69      	ldr	r3, [pc, #420]	; (1000e130 <at_ble_event_get+0x314>)
1000df8c:	429c      	cmp	r4, r3
1000df8e:	d100      	bne.n	1000df92 <at_ble_event_get+0x176>
1000df90:	e144      	b.n	1000e21c <at_ble_event_get+0x400>
1000df92:	d865      	bhi.n	1000e060 <at_ble_event_get+0x244>
1000df94:	4b67      	ldr	r3, [pc, #412]	; (1000e134 <at_ble_event_get+0x318>)
1000df96:	429c      	cmp	r4, r3
1000df98:	d100      	bne.n	1000df9c <at_ble_event_get+0x180>
1000df9a:	e1d5      	b.n	1000e348 <at_ble_event_get+0x52c>
1000df9c:	d82f      	bhi.n	1000dffe <at_ble_event_get+0x1e2>
1000df9e:	4b66      	ldr	r3, [pc, #408]	; (1000e138 <at_ble_event_get+0x31c>)
1000dfa0:	429c      	cmp	r4, r3
1000dfa2:	d100      	bne.n	1000dfa6 <at_ble_event_get+0x18a>
1000dfa4:	e1e0      	b.n	1000e368 <at_ble_event_get+0x54c>
1000dfa6:	d813      	bhi.n	1000dfd0 <at_ble_event_get+0x1b4>
1000dfa8:	4b64      	ldr	r3, [pc, #400]	; (1000e13c <at_ble_event_get+0x320>)
1000dfaa:	429c      	cmp	r4, r3
1000dfac:	d100      	bne.n	1000dfb0 <at_ble_event_get+0x194>
1000dfae:	e1a3      	b.n	1000e2f8 <at_ble_event_get+0x4dc>
1000dfb0:	d804      	bhi.n	1000dfbc <at_ble_event_get+0x1a0>
1000dfb2:	2638      	movs	r6, #56	; 0x38
1000dfb4:	42b4      	cmp	r4, r6
1000dfb6:	d100      	bne.n	1000dfba <at_ble_event_get+0x19e>
1000dfb8:	e225      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000dfba:	e117      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000dfbc:	4b60      	ldr	r3, [pc, #384]	; (1000e140 <at_ble_event_get+0x324>)
1000dfbe:	429c      	cmp	r4, r3
1000dfc0:	d100      	bne.n	1000dfc4 <at_ble_event_get+0x1a8>
1000dfc2:	e19f      	b.n	1000e304 <at_ble_event_get+0x4e8>
1000dfc4:	33fe      	adds	r3, #254	; 0xfe
1000dfc6:	33ff      	adds	r3, #255	; 0xff
1000dfc8:	429c      	cmp	r4, r3
1000dfca:	d100      	bne.n	1000dfce <at_ble_event_get+0x1b2>
1000dfcc:	e1d3      	b.n	1000e376 <at_ble_event_get+0x55a>
1000dfce:	e10d      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000dfd0:	4b5c      	ldr	r3, [pc, #368]	; (1000e144 <at_ble_event_get+0x328>)
1000dfd2:	429c      	cmp	r4, r3
1000dfd4:	d100      	bne.n	1000dfd8 <at_ble_event_get+0x1bc>
1000dfd6:	e1a9      	b.n	1000e32c <at_ble_event_get+0x510>
1000dfd8:	d808      	bhi.n	1000dfec <at_ble_event_get+0x1d0>
1000dfda:	4b5b      	ldr	r3, [pc, #364]	; (1000e148 <at_ble_event_get+0x32c>)
1000dfdc:	429c      	cmp	r4, r3
1000dfde:	d100      	bne.n	1000dfe2 <at_ble_event_get+0x1c6>
1000dfe0:	e196      	b.n	1000e310 <at_ble_event_get+0x4f4>
1000dfe2:	4b5a      	ldr	r3, [pc, #360]	; (1000e14c <at_ble_event_get+0x330>)
1000dfe4:	429c      	cmp	r4, r3
1000dfe6:	d100      	bne.n	1000dfea <at_ble_event_get+0x1ce>
1000dfe8:	e199      	b.n	1000e31e <at_ble_event_get+0x502>
1000dfea:	e0ff      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000dfec:	4b58      	ldr	r3, [pc, #352]	; (1000e150 <at_ble_event_get+0x334>)
1000dfee:	429c      	cmp	r4, r3
1000dff0:	d100      	bne.n	1000dff4 <at_ble_event_get+0x1d8>
1000dff2:	e1a2      	b.n	1000e33a <at_ble_event_get+0x51e>
1000dff4:	4b57      	ldr	r3, [pc, #348]	; (1000e154 <at_ble_event_get+0x338>)
1000dff6:	429c      	cmp	r4, r3
1000dff8:	d100      	bne.n	1000dffc <at_ble_event_get+0x1e0>
1000dffa:	e1d4      	b.n	1000e3a6 <at_ble_event_get+0x58a>
1000dffc:	e0f6      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000dffe:	4b56      	ldr	r3, [pc, #344]	; (1000e158 <at_ble_event_get+0x33c>)
1000e000:	429c      	cmp	r4, r3
1000e002:	d100      	bne.n	1000e006 <at_ble_event_get+0x1ea>
1000e004:	e1c8      	b.n	1000e398 <at_ble_event_get+0x57c>
1000e006:	d812      	bhi.n	1000e02e <at_ble_event_get+0x212>
1000e008:	4b54      	ldr	r3, [pc, #336]	; (1000e15c <at_ble_event_get+0x340>)
1000e00a:	429c      	cmp	r4, r3
1000e00c:	d100      	bne.n	1000e010 <at_ble_event_get+0x1f4>
1000e00e:	e1d1      	b.n	1000e3b4 <at_ble_event_get+0x598>
1000e010:	d804      	bhi.n	1000e01c <at_ble_event_get+0x200>
1000e012:	4b53      	ldr	r3, [pc, #332]	; (1000e160 <at_ble_event_get+0x344>)
1000e014:	429c      	cmp	r4, r3
1000e016:	d100      	bne.n	1000e01a <at_ble_event_get+0x1fe>
1000e018:	e19b      	b.n	1000e352 <at_ble_event_get+0x536>
1000e01a:	e0e7      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e01c:	4b51      	ldr	r3, [pc, #324]	; (1000e164 <at_ble_event_get+0x348>)
1000e01e:	429c      	cmp	r4, r3
1000e020:	d100      	bne.n	1000e024 <at_ble_event_get+0x208>
1000e022:	e1ad      	b.n	1000e380 <at_ble_event_get+0x564>
1000e024:	4b50      	ldr	r3, [pc, #320]	; (1000e168 <at_ble_event_get+0x34c>)
1000e026:	429c      	cmp	r4, r3
1000e028:	d100      	bne.n	1000e02c <at_ble_event_get+0x210>
1000e02a:	e1b0      	b.n	1000e38e <at_ble_event_get+0x572>
1000e02c:	e0de      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e02e:	4b4f      	ldr	r3, [pc, #316]	; (1000e16c <at_ble_event_get+0x350>)
1000e030:	429c      	cmp	r4, r3
1000e032:	d100      	bne.n	1000e036 <at_ble_event_get+0x21a>
1000e034:	e0e0      	b.n	1000e1f8 <at_ble_event_get+0x3dc>
1000e036:	d809      	bhi.n	1000e04c <at_ble_event_get+0x230>
1000e038:	3b08      	subs	r3, #8
1000e03a:	429c      	cmp	r4, r3
1000e03c:	d100      	bne.n	1000e040 <at_ble_event_get+0x224>
1000e03e:	e0d7      	b.n	1000e1f0 <at_ble_event_get+0x3d4>
1000e040:	4b4b      	ldr	r3, [pc, #300]	; (1000e170 <at_ble_event_get+0x354>)
1000e042:	2639      	movs	r6, #57	; 0x39
1000e044:	429c      	cmp	r4, r3
1000e046:	d100      	bne.n	1000e04a <at_ble_event_get+0x22e>
1000e048:	e1dd      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e04a:	e0cf      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e04c:	23d1      	movs	r3, #209	; 0xd1
1000e04e:	011b      	lsls	r3, r3, #4
1000e050:	429c      	cmp	r4, r3
1000e052:	d100      	bne.n	1000e056 <at_ble_event_get+0x23a>
1000e054:	e0d6      	b.n	1000e204 <at_ble_event_get+0x3e8>
1000e056:	4b47      	ldr	r3, [pc, #284]	; (1000e174 <at_ble_event_get+0x358>)
1000e058:	429c      	cmp	r4, r3
1000e05a:	d100      	bne.n	1000e05e <at_ble_event_get+0x242>
1000e05c:	e0d8      	b.n	1000e210 <at_ble_event_get+0x3f4>
1000e05e:	e0c5      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e060:	4b45      	ldr	r3, [pc, #276]	; (1000e178 <at_ble_event_get+0x35c>)
1000e062:	429c      	cmp	r4, r3
1000e064:	d100      	bne.n	1000e068 <at_ble_event_get+0x24c>
1000e066:	e117      	b.n	1000e298 <at_ble_event_get+0x47c>
1000e068:	d82e      	bhi.n	1000e0c8 <at_ble_event_get+0x2ac>
1000e06a:	4b44      	ldr	r3, [pc, #272]	; (1000e17c <at_ble_event_get+0x360>)
1000e06c:	429c      	cmp	r4, r3
1000e06e:	d100      	bne.n	1000e072 <at_ble_event_get+0x256>
1000e070:	e13d      	b.n	1000e2ee <at_ble_event_get+0x4d2>
1000e072:	d812      	bhi.n	1000e09a <at_ble_event_get+0x27e>
1000e074:	4b42      	ldr	r3, [pc, #264]	; (1000e180 <at_ble_event_get+0x364>)
1000e076:	429c      	cmp	r4, r3
1000e078:	d100      	bne.n	1000e07c <at_ble_event_get+0x260>
1000e07a:	e0e8      	b.n	1000e24e <at_ble_event_get+0x432>
1000e07c:	d804      	bhi.n	1000e088 <at_ble_event_get+0x26c>
1000e07e:	3b03      	subs	r3, #3
1000e080:	429c      	cmp	r4, r3
1000e082:	d100      	bne.n	1000e086 <at_ble_event_get+0x26a>
1000e084:	e0d0      	b.n	1000e228 <at_ble_event_get+0x40c>
1000e086:	e0b1      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e088:	4b3e      	ldr	r3, [pc, #248]	; (1000e184 <at_ble_event_get+0x368>)
1000e08a:	429c      	cmp	r4, r3
1000e08c:	d100      	bne.n	1000e090 <at_ble_event_get+0x274>
1000e08e:	e0d0      	b.n	1000e232 <at_ble_event_get+0x416>
1000e090:	4b3d      	ldr	r3, [pc, #244]	; (1000e188 <at_ble_event_get+0x36c>)
1000e092:	429c      	cmp	r4, r3
1000e094:	d100      	bne.n	1000e098 <at_ble_event_get+0x27c>
1000e096:	e0f9      	b.n	1000e28c <at_ble_event_get+0x470>
1000e098:	e0a8      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e09a:	4b3c      	ldr	r3, [pc, #240]	; (1000e18c <at_ble_event_get+0x370>)
1000e09c:	429c      	cmp	r4, r3
1000e09e:	d100      	bne.n	1000e0a2 <at_ble_event_get+0x286>
1000e0a0:	e0db      	b.n	1000e25a <at_ble_event_get+0x43e>
1000e0a2:	d808      	bhi.n	1000e0b6 <at_ble_event_get+0x29a>
1000e0a4:	4b3a      	ldr	r3, [pc, #232]	; (1000e190 <at_ble_event_get+0x374>)
1000e0a6:	429c      	cmp	r4, r3
1000e0a8:	d100      	bne.n	1000e0ac <at_ble_event_get+0x290>
1000e0aa:	e11b      	b.n	1000e2e4 <at_ble_event_get+0x4c8>
1000e0ac:	4b39      	ldr	r3, [pc, #228]	; (1000e194 <at_ble_event_get+0x378>)
1000e0ae:	429c      	cmp	r4, r3
1000e0b0:	d100      	bne.n	1000e0b4 <at_ble_event_get+0x298>
1000e0b2:	e0d8      	b.n	1000e266 <at_ble_event_get+0x44a>
1000e0b4:	e09a      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e0b6:	4b38      	ldr	r3, [pc, #224]	; (1000e198 <at_ble_event_get+0x37c>)
1000e0b8:	429c      	cmp	r4, r3
1000e0ba:	d100      	bne.n	1000e0be <at_ble_event_get+0x2a2>
1000e0bc:	e0d8      	b.n	1000e270 <at_ble_event_get+0x454>
1000e0be:	4b37      	ldr	r3, [pc, #220]	; (1000e19c <at_ble_event_get+0x380>)
1000e0c0:	429c      	cmp	r4, r3
1000e0c2:	d100      	bne.n	1000e0c6 <at_ble_event_get+0x2aa>
1000e0c4:	e0db      	b.n	1000e27e <at_ble_event_get+0x462>
1000e0c6:	e091      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e0c8:	4b35      	ldr	r3, [pc, #212]	; (1000e1a0 <at_ble_event_get+0x384>)
1000e0ca:	429c      	cmp	r4, r3
1000e0cc:	d100      	bne.n	1000e0d0 <at_ble_event_get+0x2b4>
1000e0ce:	e0f7      	b.n	1000e2c0 <at_ble_event_get+0x4a4>
1000e0d0:	d876      	bhi.n	1000e1c0 <at_ble_event_get+0x3a4>
1000e0d2:	4b34      	ldr	r3, [pc, #208]	; (1000e1a4 <at_ble_event_get+0x388>)
1000e0d4:	429c      	cmp	r4, r3
1000e0d6:	d100      	bne.n	1000e0da <at_ble_event_get+0x2be>
1000e0d8:	e0f8      	b.n	1000e2cc <at_ble_event_get+0x4b0>
1000e0da:	d869      	bhi.n	1000e1b0 <at_ble_event_get+0x394>
1000e0dc:	4b32      	ldr	r3, [pc, #200]	; (1000e1a8 <at_ble_event_get+0x38c>)
1000e0de:	429c      	cmp	r4, r3
1000e0e0:	d100      	bne.n	1000e0e4 <at_ble_event_get+0x2c8>
1000e0e2:	e0e0      	b.n	1000e2a6 <at_ble_event_get+0x48a>
1000e0e4:	4b31      	ldr	r3, [pc, #196]	; (1000e1ac <at_ble_event_get+0x390>)
1000e0e6:	429c      	cmp	r4, r3
1000e0e8:	d100      	bne.n	1000e0ec <at_ble_event_get+0x2d0>
1000e0ea:	e0a9      	b.n	1000e240 <at_ble_event_get+0x424>
1000e0ec:	e07e      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e0ee:	46c0      	nop			; (mov r8, r8)
1000e0f0:	1000f821 	.word	0x1000f821
1000e0f4:	10016a04 	.word	0x10016a04
1000e0f8:	1000d301 	.word	0x1000d301
1000e0fc:	10016a08 	.word	0x10016a08
1000e100:	10016a00 	.word	0x10016a00
1000e104:	100169f0 	.word	0x100169f0
1000e108:	1000dd05 	.word	0x1000dd05
1000e10c:	100122a9 	.word	0x100122a9
1000e110:	0000ffff 	.word	0x0000ffff
1000e114:	0000fffe 	.word	0x0000fffe
1000e118:	1000d579 	.word	0x1000d579
1000e11c:	1000f823 	.word	0x1000f823
1000e120:	0000201e 	.word	0x0000201e
1000e124:	0000201d 	.word	0x0000201d
1000e128:	00000c03 	.word	0x00000c03
1000e12c:	0000201f 	.word	0x0000201f
1000e130:	00000d1c 	.word	0x00000d1c
1000e134:	00000c0c 	.word	0x00000c0c
1000e138:	00000c02 	.word	0x00000c02
1000e13c:	00000a02 	.word	0x00000a02
1000e140:	00000a03 	.word	0x00000a03
1000e144:	00000c06 	.word	0x00000c06
1000e148:	00000c04 	.word	0x00000c04
1000e14c:	00000c05 	.word	0x00000c05
1000e150:	00000c07 	.word	0x00000c07
1000e154:	00000c09 	.word	0x00000c09
1000e158:	00000c17 	.word	0x00000c17
1000e15c:	00000c12 	.word	0x00000c12
1000e160:	00000c0d 	.word	0x00000c0d
1000e164:	00000c13 	.word	0x00000c13
1000e168:	00000c15 	.word	0x00000c15
1000e16c:	00000d08 	.word	0x00000d08
1000e170:	00000d01 	.word	0x00000d01
1000e174:	00000d15 	.word	0x00000d15
1000e178:	00000e1b 	.word	0x00000e1b
1000e17c:	00000e0f 	.word	0x00000e0f
1000e180:	00000e03 	.word	0x00000e03
1000e184:	00000e06 	.word	0x00000e06
1000e188:	00000e0a 	.word	0x00000e0a
1000e18c:	00000e15 	.word	0x00000e15
1000e190:	00000e11 	.word	0x00000e11
1000e194:	00000e13 	.word	0x00000e13
1000e198:	00000e17 	.word	0x00000e17
1000e19c:	00000e19 	.word	0x00000e19
1000e1a0:	00000e27 	.word	0x00000e27
1000e1a4:	00000e21 	.word	0x00000e21
1000e1a8:	00000e1c 	.word	0x00000e1c
1000e1ac:	00000e1d 	.word	0x00000e1d
1000e1b0:	4b9f      	ldr	r3, [pc, #636]	; (1000e430 <at_ble_event_get+0x614>)
1000e1b2:	429c      	cmp	r4, r3
1000e1b4:	d07e      	beq.n	1000e2b4 <at_ble_event_get+0x498>
1000e1b6:	4b9f      	ldr	r3, [pc, #636]	; (1000e434 <at_ble_event_get+0x618>)
1000e1b8:	429c      	cmp	r4, r3
1000e1ba:	d100      	bne.n	1000e1be <at_ble_event_get+0x3a2>
1000e1bc:	e08c      	b.n	1000e2d8 <at_ble_event_get+0x4bc>
1000e1be:	e015      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e1c0:	4b9d      	ldr	r3, [pc, #628]	; (1000e438 <at_ble_event_get+0x61c>)
1000e1c2:	429c      	cmp	r4, r3
1000e1c4:	d100      	bne.n	1000e1c8 <at_ble_event_get+0x3ac>
1000e1c6:	e10a      	b.n	1000e3de <at_ble_event_get+0x5c2>
1000e1c8:	d808      	bhi.n	1000e1dc <at_ble_event_get+0x3c0>
1000e1ca:	4b9c      	ldr	r3, [pc, #624]	; (1000e43c <at_ble_event_get+0x620>)
1000e1cc:	429c      	cmp	r4, r3
1000e1ce:	d100      	bne.n	1000e1d2 <at_ble_event_get+0x3b6>
1000e1d0:	e0f7      	b.n	1000e3c2 <at_ble_event_get+0x5a6>
1000e1d2:	4b9b      	ldr	r3, [pc, #620]	; (1000e440 <at_ble_event_get+0x624>)
1000e1d4:	429c      	cmp	r4, r3
1000e1d6:	d100      	bne.n	1000e1da <at_ble_event_get+0x3be>
1000e1d8:	e0fa      	b.n	1000e3d0 <at_ble_event_get+0x5b4>
1000e1da:	e007      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e1dc:	4b99      	ldr	r3, [pc, #612]	; (1000e444 <at_ble_event_get+0x628>)
1000e1de:	429c      	cmp	r4, r3
1000e1e0:	d100      	bne.n	1000e1e4 <at_ble_event_get+0x3c8>
1000e1e2:	e103      	b.n	1000e3ec <at_ble_event_get+0x5d0>
1000e1e4:	4b98      	ldr	r3, [pc, #608]	; (1000e448 <at_ble_event_get+0x62c>)
1000e1e6:	429c      	cmp	r4, r3
1000e1e8:	d100      	bne.n	1000e1ec <at_ble_event_get+0x3d0>
1000e1ea:	e106      	b.n	1000e3fa <at_ble_event_get+0x5de>
1000e1ec:	2600      	movs	r6, #0
1000e1ee:	e10a      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e1f0:	1c30      	adds	r0, r6, #0
1000e1f2:	1c29      	adds	r1, r5, #0
1000e1f4:	4b95      	ldr	r3, [pc, #596]	; (1000e44c <at_ble_event_get+0x630>)
1000e1f6:	e014      	b.n	1000e222 <at_ble_event_get+0x406>
1000e1f8:	1c30      	adds	r0, r6, #0
1000e1fa:	1c29      	adds	r1, r5, #0
1000e1fc:	4b94      	ldr	r3, [pc, #592]	; (1000e450 <at_ble_event_get+0x634>)
1000e1fe:	4798      	blx	r3
1000e200:	2604      	movs	r6, #4
1000e202:	e100      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e204:	1c30      	adds	r0, r6, #0
1000e206:	1c29      	adds	r1, r5, #0
1000e208:	4b92      	ldr	r3, [pc, #584]	; (1000e454 <at_ble_event_get+0x638>)
1000e20a:	4798      	blx	r3
1000e20c:	2601      	movs	r6, #1
1000e20e:	e0fa      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e210:	1c30      	adds	r0, r6, #0
1000e212:	1c29      	adds	r1, r5, #0
1000e214:	4b90      	ldr	r3, [pc, #576]	; (1000e458 <at_ble_event_get+0x63c>)
1000e216:	4798      	blx	r3
1000e218:	260f      	movs	r6, #15
1000e21a:	e0f4      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e21c:	1c30      	adds	r0, r6, #0
1000e21e:	1c29      	adds	r1, r5, #0
1000e220:	4b8e      	ldr	r3, [pc, #568]	; (1000e45c <at_ble_event_get+0x640>)
1000e222:	4798      	blx	r3
1000e224:	1c06      	adds	r6, r0, #0
1000e226:	e0ee      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e228:	9801      	ldr	r0, [sp, #4]
1000e22a:	1c31      	adds	r1, r6, #0
1000e22c:	1c2a      	adds	r2, r5, #0
1000e22e:	4b8c      	ldr	r3, [pc, #560]	; (1000e460 <at_ble_event_get+0x644>)
1000e230:	e017      	b.n	1000e262 <at_ble_event_get+0x446>
1000e232:	1c31      	adds	r1, r6, #0
1000e234:	9801      	ldr	r0, [sp, #4]
1000e236:	1c2a      	adds	r2, r5, #0
1000e238:	4b8a      	ldr	r3, [pc, #552]	; (1000e464 <at_ble_event_get+0x648>)
1000e23a:	4798      	blx	r3
1000e23c:	2611      	movs	r6, #17
1000e23e:	e0e2      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e240:	1c31      	adds	r1, r6, #0
1000e242:	9801      	ldr	r0, [sp, #4]
1000e244:	1c2a      	adds	r2, r5, #0
1000e246:	4b88      	ldr	r3, [pc, #544]	; (1000e468 <at_ble_event_get+0x64c>)
1000e248:	4798      	blx	r3
1000e24a:	2612      	movs	r6, #18
1000e24c:	e0db      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e24e:	1c30      	adds	r0, r6, #0
1000e250:	1c29      	adds	r1, r5, #0
1000e252:	4b86      	ldr	r3, [pc, #536]	; (1000e46c <at_ble_event_get+0x650>)
1000e254:	4798      	blx	r3
1000e256:	2606      	movs	r6, #6
1000e258:	e0d5      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e25a:	1c31      	adds	r1, r6, #0
1000e25c:	1c2a      	adds	r2, r5, #0
1000e25e:	9801      	ldr	r0, [sp, #4]
1000e260:	4b83      	ldr	r3, [pc, #524]	; (1000e470 <at_ble_event_get+0x654>)
1000e262:	4798      	blx	r3
1000e264:	e7de      	b.n	1000e224 <at_ble_event_get+0x408>
1000e266:	9801      	ldr	r0, [sp, #4]
1000e268:	1c31      	adds	r1, r6, #0
1000e26a:	1c2a      	adds	r2, r5, #0
1000e26c:	4b81      	ldr	r3, [pc, #516]	; (1000e474 <at_ble_event_get+0x658>)
1000e26e:	e7f8      	b.n	1000e262 <at_ble_event_get+0x446>
1000e270:	1c31      	adds	r1, r6, #0
1000e272:	9801      	ldr	r0, [sp, #4]
1000e274:	1c2a      	adds	r2, r5, #0
1000e276:	4b80      	ldr	r3, [pc, #512]	; (1000e478 <at_ble_event_get+0x65c>)
1000e278:	4798      	blx	r3
1000e27a:	260d      	movs	r6, #13
1000e27c:	e0c3      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e27e:	1c31      	adds	r1, r6, #0
1000e280:	9801      	ldr	r0, [sp, #4]
1000e282:	1c2a      	adds	r2, r5, #0
1000e284:	4b7d      	ldr	r3, [pc, #500]	; (1000e47c <at_ble_event_get+0x660>)
1000e286:	4798      	blx	r3
1000e288:	260e      	movs	r6, #14
1000e28a:	e0bc      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e28c:	9801      	ldr	r0, [sp, #4]
1000e28e:	1c31      	adds	r1, r6, #0
1000e290:	1c2a      	adds	r2, r5, #0
1000e292:	4b7b      	ldr	r3, [pc, #492]	; (1000e480 <at_ble_event_get+0x664>)
1000e294:	4798      	blx	r3
1000e296:	e084      	b.n	1000e3a2 <at_ble_event_get+0x586>
1000e298:	1c31      	adds	r1, r6, #0
1000e29a:	9801      	ldr	r0, [sp, #4]
1000e29c:	1c2a      	adds	r2, r5, #0
1000e29e:	4b79      	ldr	r3, [pc, #484]	; (1000e484 <at_ble_event_get+0x668>)
1000e2a0:	4798      	blx	r3
1000e2a2:	260b      	movs	r6, #11
1000e2a4:	e0af      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2a6:	1c31      	adds	r1, r6, #0
1000e2a8:	9801      	ldr	r0, [sp, #4]
1000e2aa:	1c2a      	adds	r2, r5, #0
1000e2ac:	4b76      	ldr	r3, [pc, #472]	; (1000e488 <at_ble_event_get+0x66c>)
1000e2ae:	4798      	blx	r3
1000e2b0:	2610      	movs	r6, #16
1000e2b2:	e0a8      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2b4:	1c30      	adds	r0, r6, #0
1000e2b6:	1c29      	adds	r1, r5, #0
1000e2b8:	4b74      	ldr	r3, [pc, #464]	; (1000e48c <at_ble_event_get+0x670>)
1000e2ba:	4798      	blx	r3
1000e2bc:	2628      	movs	r6, #40	; 0x28
1000e2be:	e0a2      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2c0:	1c30      	adds	r0, r6, #0
1000e2c2:	1c29      	adds	r1, r5, #0
1000e2c4:	4b72      	ldr	r3, [pc, #456]	; (1000e490 <at_ble_event_get+0x674>)
1000e2c6:	4798      	blx	r3
1000e2c8:	2629      	movs	r6, #41	; 0x29
1000e2ca:	e09c      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2cc:	1c30      	adds	r0, r6, #0
1000e2ce:	1c29      	adds	r1, r5, #0
1000e2d0:	4b70      	ldr	r3, [pc, #448]	; (1000e494 <at_ble_event_get+0x678>)
1000e2d2:	4798      	blx	r3
1000e2d4:	2627      	movs	r6, #39	; 0x27
1000e2d6:	e096      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2d8:	1c30      	adds	r0, r6, #0
1000e2da:	1c29      	adds	r1, r5, #0
1000e2dc:	4b6e      	ldr	r3, [pc, #440]	; (1000e498 <at_ble_event_get+0x67c>)
1000e2de:	4798      	blx	r3
1000e2e0:	262a      	movs	r6, #42	; 0x2a
1000e2e2:	e090      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e2e4:	9801      	ldr	r0, [sp, #4]
1000e2e6:	1c31      	adds	r1, r6, #0
1000e2e8:	1c2a      	adds	r2, r5, #0
1000e2ea:	4b6c      	ldr	r3, [pc, #432]	; (1000e49c <at_ble_event_get+0x680>)
1000e2ec:	e7b9      	b.n	1000e262 <at_ble_event_get+0x446>
1000e2ee:	9801      	ldr	r0, [sp, #4]
1000e2f0:	1c31      	adds	r1, r6, #0
1000e2f2:	1c2a      	adds	r2, r5, #0
1000e2f4:	4b6a      	ldr	r3, [pc, #424]	; (1000e4a0 <at_ble_event_get+0x684>)
1000e2f6:	e7b4      	b.n	1000e262 <at_ble_event_get+0x446>
1000e2f8:	1c30      	adds	r0, r6, #0
1000e2fa:	1c29      	adds	r1, r5, #0
1000e2fc:	4b69      	ldr	r3, [pc, #420]	; (1000e4a4 <at_ble_event_get+0x688>)
1000e2fe:	4798      	blx	r3
1000e300:	262b      	movs	r6, #43	; 0x2b
1000e302:	e080      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e304:	1c30      	adds	r0, r6, #0
1000e306:	1c29      	adds	r1, r5, #0
1000e308:	4b67      	ldr	r3, [pc, #412]	; (1000e4a8 <at_ble_event_get+0x68c>)
1000e30a:	4798      	blx	r3
1000e30c:	262c      	movs	r6, #44	; 0x2c
1000e30e:	e07a      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e310:	1c31      	adds	r1, r6, #0
1000e312:	9801      	ldr	r0, [sp, #4]
1000e314:	1c2a      	adds	r2, r5, #0
1000e316:	4b65      	ldr	r3, [pc, #404]	; (1000e4ac <at_ble_event_get+0x690>)
1000e318:	4798      	blx	r3
1000e31a:	2613      	movs	r6, #19
1000e31c:	e073      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e31e:	1c31      	adds	r1, r6, #0
1000e320:	9801      	ldr	r0, [sp, #4]
1000e322:	1c2a      	adds	r2, r5, #0
1000e324:	4b62      	ldr	r3, [pc, #392]	; (1000e4b0 <at_ble_event_get+0x694>)
1000e326:	4798      	blx	r3
1000e328:	2614      	movs	r6, #20
1000e32a:	e06c      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e32c:	1c31      	adds	r1, r6, #0
1000e32e:	9801      	ldr	r0, [sp, #4]
1000e330:	1c2a      	adds	r2, r5, #0
1000e332:	4b60      	ldr	r3, [pc, #384]	; (1000e4b4 <at_ble_event_get+0x698>)
1000e334:	4798      	blx	r3
1000e336:	2615      	movs	r6, #21
1000e338:	e065      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e33a:	1c31      	adds	r1, r6, #0
1000e33c:	9801      	ldr	r0, [sp, #4]
1000e33e:	1c2a      	adds	r2, r5, #0
1000e340:	4b5d      	ldr	r3, [pc, #372]	; (1000e4b8 <at_ble_event_get+0x69c>)
1000e342:	4798      	blx	r3
1000e344:	2616      	movs	r6, #22
1000e346:	e05e      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e348:	9801      	ldr	r0, [sp, #4]
1000e34a:	1c31      	adds	r1, r6, #0
1000e34c:	1c2a      	adds	r2, r5, #0
1000e34e:	4b5b      	ldr	r3, [pc, #364]	; (1000e4bc <at_ble_event_get+0x6a0>)
1000e350:	e787      	b.n	1000e262 <at_ble_event_get+0x446>
1000e352:	1c31      	adds	r1, r6, #0
1000e354:	9801      	ldr	r0, [sp, #4]
1000e356:	1c2a      	adds	r2, r5, #0
1000e358:	4b58      	ldr	r3, [pc, #352]	; (1000e4bc <at_ble_event_get+0x6a0>)
1000e35a:	4798      	blx	r3
1000e35c:	88a9      	ldrh	r1, [r5, #4]
1000e35e:	1c06      	adds	r6, r0, #0
1000e360:	4b57      	ldr	r3, [pc, #348]	; (1000e4c0 <at_ble_event_get+0x6a4>)
1000e362:	8828      	ldrh	r0, [r5, #0]
1000e364:	4798      	blx	r3
1000e366:	e04e      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e368:	1c31      	adds	r1, r6, #0
1000e36a:	9801      	ldr	r0, [sp, #4]
1000e36c:	1c2a      	adds	r2, r5, #0
1000e36e:	4b55      	ldr	r3, [pc, #340]	; (1000e4c4 <at_ble_event_get+0x6a8>)
1000e370:	4798      	blx	r3
1000e372:	2623      	movs	r6, #35	; 0x23
1000e374:	e047      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e376:	9801      	ldr	r0, [sp, #4]
1000e378:	1c31      	adds	r1, r6, #0
1000e37a:	1c2a      	adds	r2, r5, #0
1000e37c:	4b52      	ldr	r3, [pc, #328]	; (1000e4c8 <at_ble_event_get+0x6ac>)
1000e37e:	e770      	b.n	1000e262 <at_ble_event_get+0x446>
1000e380:	9b01      	ldr	r3, [sp, #4]
1000e382:	1c30      	adds	r0, r6, #0
1000e384:	0a1f      	lsrs	r7, r3, #8
1000e386:	802f      	strh	r7, [r5, #0]
1000e388:	1c29      	adds	r1, r5, #0
1000e38a:	4b50      	ldr	r3, [pc, #320]	; (1000e4cc <at_ble_event_get+0x6b0>)
1000e38c:	e749      	b.n	1000e222 <at_ble_event_get+0x406>
1000e38e:	9801      	ldr	r0, [sp, #4]
1000e390:	1c31      	adds	r1, r6, #0
1000e392:	1c2a      	adds	r2, r5, #0
1000e394:	4b4e      	ldr	r3, [pc, #312]	; (1000e4d0 <at_ble_event_get+0x6b4>)
1000e396:	e764      	b.n	1000e262 <at_ble_event_get+0x446>
1000e398:	1c30      	adds	r0, r6, #0
1000e39a:	1c29      	adds	r1, r5, #0
1000e39c:	9a01      	ldr	r2, [sp, #4]
1000e39e:	4b4d      	ldr	r3, [pc, #308]	; (1000e4d4 <at_ble_event_get+0x6b8>)
1000e3a0:	4798      	blx	r3
1000e3a2:	263b      	movs	r6, #59	; 0x3b
1000e3a4:	e02f      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3a6:	1c31      	adds	r1, r6, #0
1000e3a8:	9801      	ldr	r0, [sp, #4]
1000e3aa:	1c2a      	adds	r2, r5, #0
1000e3ac:	4b4a      	ldr	r3, [pc, #296]	; (1000e4d8 <at_ble_event_get+0x6bc>)
1000e3ae:	4798      	blx	r3
1000e3b0:	2618      	movs	r6, #24
1000e3b2:	e028      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3b4:	1c31      	adds	r1, r6, #0
1000e3b6:	9801      	ldr	r0, [sp, #4]
1000e3b8:	1c2a      	adds	r2, r5, #0
1000e3ba:	4b48      	ldr	r3, [pc, #288]	; (1000e4dc <at_ble_event_get+0x6c0>)
1000e3bc:	4798      	blx	r3
1000e3be:	2620      	movs	r6, #32
1000e3c0:	e021      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3c2:	1c31      	adds	r1, r6, #0
1000e3c4:	9801      	ldr	r0, [sp, #4]
1000e3c6:	1c2a      	adds	r2, r5, #0
1000e3c8:	4b45      	ldr	r3, [pc, #276]	; (1000e4e0 <at_ble_event_get+0x6c4>)
1000e3ca:	4798      	blx	r3
1000e3cc:	2633      	movs	r6, #51	; 0x33
1000e3ce:	e01a      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3d0:	1c31      	adds	r1, r6, #0
1000e3d2:	9801      	ldr	r0, [sp, #4]
1000e3d4:	1c2a      	adds	r2, r5, #0
1000e3d6:	4b43      	ldr	r3, [pc, #268]	; (1000e4e4 <at_ble_event_get+0x6c8>)
1000e3d8:	4798      	blx	r3
1000e3da:	2630      	movs	r6, #48	; 0x30
1000e3dc:	e013      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3de:	1c31      	adds	r1, r6, #0
1000e3e0:	9801      	ldr	r0, [sp, #4]
1000e3e2:	1c2a      	adds	r2, r5, #0
1000e3e4:	4b40      	ldr	r3, [pc, #256]	; (1000e4e8 <at_ble_event_get+0x6cc>)
1000e3e6:	4798      	blx	r3
1000e3e8:	2634      	movs	r6, #52	; 0x34
1000e3ea:	e00c      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3ec:	1c31      	adds	r1, r6, #0
1000e3ee:	9801      	ldr	r0, [sp, #4]
1000e3f0:	1c2a      	adds	r2, r5, #0
1000e3f2:	4b3e      	ldr	r3, [pc, #248]	; (1000e4ec <at_ble_event_get+0x6d0>)
1000e3f4:	4798      	blx	r3
1000e3f6:	2635      	movs	r6, #53	; 0x35
1000e3f8:	e005      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e3fa:	1c31      	adds	r1, r6, #0
1000e3fc:	9801      	ldr	r0, [sp, #4]
1000e3fe:	1c2a      	adds	r2, r5, #0
1000e400:	4b3b      	ldr	r3, [pc, #236]	; (1000e4f0 <at_ble_event_get+0x6d4>)
1000e402:	4798      	blx	r3
1000e404:	2632      	movs	r6, #50	; 0x32
1000e406:	9b03      	ldr	r3, [sp, #12]
1000e408:	701e      	strb	r6, [r3, #0]
1000e40a:	2300      	movs	r3, #0
1000e40c:	9302      	str	r3, [sp, #8]
1000e40e:	e57a      	b.n	1000df06 <at_ble_event_get+0xea>
1000e410:	23d0      	movs	r3, #208	; 0xd0
1000e412:	e7fb      	b.n	1000e40c <at_ble_event_get+0x5f0>
1000e414:	9b01      	ldr	r3, [sp, #4]
1000e416:	9e02      	ldr	r6, [sp, #8]
1000e418:	2bbb      	cmp	r3, #187	; 0xbb
1000e41a:	d000      	beq.n	1000e41e <at_ble_event_get+0x602>
1000e41c:	e6e6      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e41e:	e7f2      	b.n	1000e406 <at_ble_event_get+0x5ea>
1000e420:	9b02      	ldr	r3, [sp, #8]
1000e422:	2b00      	cmp	r3, #0
1000e424:	d000      	beq.n	1000e428 <at_ble_event_get+0x60c>
1000e426:	e56e      	b.n	1000df06 <at_ble_event_get+0xea>
1000e428:	e6e0      	b.n	1000e1ec <at_ble_event_get+0x3d0>
1000e42a:	9802      	ldr	r0, [sp, #8]
1000e42c:	b007      	add	sp, #28
1000e42e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e430:	00000e22 	.word	0x00000e22
1000e434:	00000e25 	.word	0x00000e25
1000e438:	00001b05 	.word	0x00001b05
1000e43c:	00001b01 	.word	0x00001b01
1000e440:	00001b03 	.word	0x00001b03
1000e444:	00001b06 	.word	0x00001b06
1000e448:	00001b08 	.word	0x00001b08
1000e44c:	1001064d 	.word	0x1001064d
1000e450:	10010631 	.word	0x10010631
1000e454:	100108cd 	.word	0x100108cd
1000e458:	100109bd 	.word	0x100109bd
1000e45c:	100109e1 	.word	0x100109e1
1000e460:	1000f9c5 	.word	0x1000f9c5
1000e464:	10010245 	.word	0x10010245
1000e468:	100102c1 	.word	0x100102c1
1000e46c:	1000fc7d 	.word	0x1000fc7d
1000e470:	1000fd19 	.word	0x1000fd19
1000e474:	1000fdf1 	.word	0x1000fdf1
1000e478:	10010079 	.word	0x10010079
1000e47c:	10010119 	.word	0x10010119
1000e480:	100101d1 	.word	0x100101d1
1000e484:	100101f9 	.word	0x100101f9
1000e488:	1001020f 	.word	0x1001020f
1000e48c:	100102d9 	.word	0x100102d9
1000e490:	10010307 	.word	0x10010307
1000e494:	1001031d 	.word	0x1001031d
1000e498:	10010347 	.word	0x10010347
1000e49c:	10010175 	.word	0x10010175
1000e4a0:	1001019f 	.word	0x1001019f
1000e4a4:	1000f405 	.word	0x1000f405
1000e4a8:	1000f431 	.word	0x1000f431
1000e4ac:	10010c01 	.word	0x10010c01
1000e4b0:	10010c3d 	.word	0x10010c3d
1000e4b4:	10010c85 	.word	0x10010c85
1000e4b8:	10010cc9 	.word	0x10010cc9
1000e4bc:	10010cfd 	.word	0x10010cfd
1000e4c0:	10010bc1 	.word	0x10010bc1
1000e4c4:	10010dc9 	.word	0x10010dc9
1000e4c8:	10010d51 	.word	0x10010d51
1000e4cc:	1000f2e9 	.word	0x1000f2e9
1000e4d0:	1000f355 	.word	0x1000f355
1000e4d4:	1000f319 	.word	0x1000f319
1000e4d8:	10010dd9 	.word	0x10010dd9
1000e4dc:	10010e19 	.word	0x10010e19
1000e4e0:	100110e1 	.word	0x100110e1
1000e4e4:	100110eb 	.word	0x100110eb
1000e4e8:	100110f1 	.word	0x100110f1
1000e4ec:	100110f7 	.word	0x100110f7
1000e4f0:	10011103 	.word	0x10011103

1000e4f4 <internal_event_flush>:
1000e4f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e4f6:	490e      	ldr	r1, [pc, #56]	; (1000e530 <internal_event_flush+0x3c>)
1000e4f8:	2400      	movs	r4, #0
1000e4fa:	680b      	ldr	r3, [r1, #0]
1000e4fc:	1c0f      	adds	r7, r1, #0
1000e4fe:	1c1e      	adds	r6, r3, #0
1000e500:	4a0c      	ldr	r2, [pc, #48]	; (1000e534 <internal_event_flush+0x40>)
1000e502:	6815      	ldr	r5, [r2, #0]
1000e504:	9201      	str	r2, [sp, #4]
1000e506:	2b00      	cmp	r3, #0
1000e508:	d00e      	beq.n	1000e528 <internal_event_flush+0x34>
1000e50a:	889a      	ldrh	r2, [r3, #4]
1000e50c:	6819      	ldr	r1, [r3, #0]
1000e50e:	4282      	cmp	r2, r0
1000e510:	d107      	bne.n	1000e522 <internal_event_flush+0x2e>
1000e512:	2c00      	cmp	r4, #0
1000e514:	d001      	beq.n	1000e51a <internal_event_flush+0x26>
1000e516:	6021      	str	r1, [r4, #0]
1000e518:	e000      	b.n	1000e51c <internal_event_flush+0x28>
1000e51a:	1c0e      	adds	r6, r1, #0
1000e51c:	601d      	str	r5, [r3, #0]
1000e51e:	1c1d      	adds	r5, r3, #0
1000e520:	1c23      	adds	r3, r4, #0
1000e522:	1c1c      	adds	r4, r3, #0
1000e524:	1c0b      	adds	r3, r1, #0
1000e526:	e7ee      	b.n	1000e506 <internal_event_flush+0x12>
1000e528:	9b01      	ldr	r3, [sp, #4]
1000e52a:	603e      	str	r6, [r7, #0]
1000e52c:	601d      	str	r5, [r3, #0]
1000e52e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e530:	10016a04 	.word	0x10016a04
1000e534:	10016a08 	.word	0x10016a08

1000e538 <internal_conn_flush>:
1000e538:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000e53a:	4a12      	ldr	r2, [pc, #72]	; (1000e584 <internal_conn_flush+0x4c>)
1000e53c:	9000      	str	r0, [sp, #0]
1000e53e:	6813      	ldr	r3, [r2, #0]
1000e540:	4811      	ldr	r0, [pc, #68]	; (1000e588 <internal_conn_flush+0x50>)
1000e542:	1c1f      	adds	r7, r3, #0
1000e544:	2100      	movs	r1, #0
1000e546:	4684      	mov	ip, r0
1000e548:	6804      	ldr	r4, [r0, #0]
1000e54a:	9201      	str	r2, [sp, #4]
1000e54c:	2b00      	cmp	r3, #0
1000e54e:	d014      	beq.n	1000e57a <internal_conn_flush+0x42>
1000e550:	88d8      	ldrh	r0, [r3, #6]
1000e552:	9a00      	ldr	r2, [sp, #0]
1000e554:	681d      	ldr	r5, [r3, #0]
1000e556:	0a06      	lsrs	r6, r0, #8
1000e558:	4296      	cmp	r6, r2
1000e55a:	d10b      	bne.n	1000e574 <internal_conn_flush+0x3c>
1000e55c:	26fd      	movs	r6, #253	; 0xfd
1000e55e:	4006      	ands	r6, r0
1000e560:	2e0c      	cmp	r6, #12
1000e562:	d107      	bne.n	1000e574 <internal_conn_flush+0x3c>
1000e564:	2900      	cmp	r1, #0
1000e566:	d001      	beq.n	1000e56c <internal_conn_flush+0x34>
1000e568:	600d      	str	r5, [r1, #0]
1000e56a:	e000      	b.n	1000e56e <internal_conn_flush+0x36>
1000e56c:	1c2f      	adds	r7, r5, #0
1000e56e:	601c      	str	r4, [r3, #0]
1000e570:	1c1c      	adds	r4, r3, #0
1000e572:	1c0b      	adds	r3, r1, #0
1000e574:	1c19      	adds	r1, r3, #0
1000e576:	1c2b      	adds	r3, r5, #0
1000e578:	e7e8      	b.n	1000e54c <internal_conn_flush+0x14>
1000e57a:	9b01      	ldr	r3, [sp, #4]
1000e57c:	601f      	str	r7, [r3, #0]
1000e57e:	4663      	mov	r3, ip
1000e580:	601c      	str	r4, [r3, #0]
1000e582:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000e584:	10016a04 	.word	0x10016a04
1000e588:	10016a08 	.word	0x10016a08

1000e58c <at_ble_device_name_set>:
1000e58c:	b530      	push	{r4, r5, lr}
1000e58e:	23cf      	movs	r3, #207	; 0xcf
1000e590:	2800      	cmp	r0, #0
1000e592:	d010      	beq.n	1000e5b6 <at_ble_device_name_set+0x2a>
1000e594:	1e4a      	subs	r2, r1, #1
1000e596:	2a1f      	cmp	r2, #31
1000e598:	d80d      	bhi.n	1000e5b6 <at_ble_device_name_set+0x2a>
1000e59a:	4a08      	ldr	r2, [pc, #32]	; (1000e5bc <at_ble_device_name_set+0x30>)
1000e59c:	1c13      	adds	r3, r2, #0
1000e59e:	33aa      	adds	r3, #170	; 0xaa
1000e5a0:	8019      	strh	r1, [r3, #0]
1000e5a2:	2300      	movs	r3, #0
1000e5a4:	1c1c      	adds	r4, r3, #0
1000e5a6:	5cc5      	ldrb	r5, [r0, r3]
1000e5a8:	34ac      	adds	r4, #172	; 0xac
1000e5aa:	3301      	adds	r3, #1
1000e5ac:	5515      	strb	r5, [r2, r4]
1000e5ae:	b2dc      	uxtb	r4, r3
1000e5b0:	428c      	cmp	r4, r1
1000e5b2:	d3f7      	bcc.n	1000e5a4 <at_ble_device_name_set+0x18>
1000e5b4:	2300      	movs	r3, #0
1000e5b6:	1c18      	adds	r0, r3, #0
1000e5b8:	bd30      	pop	{r4, r5, pc}
1000e5ba:	46c0      	nop			; (mov r8, r8)
1000e5bc:	10017902 	.word	0x10017902

1000e5c0 <at_ble_addr_get>:
1000e5c0:	b510      	push	{r4, lr}
1000e5c2:	1c04      	adds	r4, r0, #0
1000e5c4:	20cf      	movs	r0, #207	; 0xcf
1000e5c6:	2c00      	cmp	r4, #0
1000e5c8:	d006      	beq.n	1000e5d8 <at_ble_addr_get+0x18>
1000e5ca:	4b04      	ldr	r3, [pc, #16]	; (1000e5dc <at_ble_addr_get+0x1c>)
1000e5cc:	38ce      	subs	r0, #206	; 0xce
1000e5ce:	1c21      	adds	r1, r4, #0
1000e5d0:	4798      	blx	r3
1000e5d2:	4b03      	ldr	r3, [pc, #12]	; (1000e5e0 <at_ble_addr_get+0x20>)
1000e5d4:	791b      	ldrb	r3, [r3, #4]
1000e5d6:	7023      	strb	r3, [r4, #0]
1000e5d8:	bd10      	pop	{r4, pc}
1000e5da:	46c0      	nop			; (mov r8, r8)
1000e5dc:	100104e1 	.word	0x100104e1
1000e5e0:	10017902 	.word	0x10017902

1000e5e4 <at_ble_set_dev_config>:
1000e5e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e5e6:	7906      	ldrb	r6, [r0, #4]
1000e5e8:	b089      	sub	sp, #36	; 0x24
1000e5ea:	25cf      	movs	r5, #207	; 0xcf
1000e5ec:	2e03      	cmp	r6, #3
1000e5ee:	d838      	bhi.n	1000e662 <at_ble_set_dev_config+0x7e>
1000e5f0:	7803      	ldrb	r3, [r0, #0]
1000e5f2:	3511      	adds	r5, #17
1000e5f4:	2b0f      	cmp	r3, #15
1000e5f6:	d834      	bhi.n	1000e662 <at_ble_set_dev_config+0x7e>
1000e5f8:	2380      	movs	r3, #128	; 0x80
1000e5fa:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000e5fc:	3d11      	subs	r5, #17
1000e5fe:	009b      	lsls	r3, r3, #2
1000e600:	429f      	cmp	r7, r3
1000e602:	d82e      	bhi.n	1000e662 <at_ble_set_dev_config+0x7e>
1000e604:	7fc5      	ldrb	r5, [r0, #31]
1000e606:	7f83      	ldrb	r3, [r0, #30]
1000e608:	01ad      	lsls	r5, r5, #6
1000e60a:	015b      	lsls	r3, r3, #5
1000e60c:	431d      	orrs	r5, r3
1000e60e:	7ec3      	ldrb	r3, [r0, #27]
1000e610:	431d      	orrs	r5, r3
1000e612:	7f43      	ldrb	r3, [r0, #29]
1000e614:	011b      	lsls	r3, r3, #4
1000e616:	431d      	orrs	r5, r3
1000e618:	7f03      	ldrb	r3, [r0, #28]
1000e61a:	009b      	lsls	r3, r3, #2
1000e61c:	431d      	orrs	r5, r3
1000e61e:	4b12      	ldr	r3, [pc, #72]	; (1000e668 <at_ble_set_dev_config+0x84>)
1000e620:	b2ed      	uxtb	r5, r5
1000e622:	711e      	strb	r6, [r3, #4]
1000e624:	7903      	ldrb	r3, [r0, #4]
1000e626:	3b02      	subs	r3, #2
1000e628:	2b01      	cmp	r3, #1
1000e62a:	d801      	bhi.n	1000e630 <at_ble_set_dev_config+0x4c>
1000e62c:	2302      	movs	r3, #2
1000e62e:	7103      	strb	r3, [r0, #4]
1000e630:	1c04      	adds	r4, r0, #0
1000e632:	1c23      	adds	r3, r4, #0
1000e634:	330b      	adds	r3, #11
1000e636:	8861      	ldrh	r1, [r4, #2]
1000e638:	9307      	str	r3, [sp, #28]
1000e63a:	7923      	ldrb	r3, [r4, #4]
1000e63c:	7800      	ldrb	r0, [r0, #0]
1000e63e:	9300      	str	r3, [sp, #0]
1000e640:	9501      	str	r5, [sp, #4]
1000e642:	8c25      	ldrh	r5, [r4, #32]
1000e644:	1d62      	adds	r2, r4, #5
1000e646:	9502      	str	r5, [sp, #8]
1000e648:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000e64a:	9b07      	ldr	r3, [sp, #28]
1000e64c:	9503      	str	r5, [sp, #12]
1000e64e:	9704      	str	r7, [sp, #16]
1000e650:	4d06      	ldr	r5, [pc, #24]	; (1000e66c <at_ble_set_dev_config+0x88>)
1000e652:	47a8      	blx	r5
1000e654:	7126      	strb	r6, [r4, #4]
1000e656:	1c05      	adds	r5, r0, #0
1000e658:	1c21      	adds	r1, r4, #0
1000e65a:	4803      	ldr	r0, [pc, #12]	; (1000e668 <at_ble_set_dev_config+0x84>)
1000e65c:	2226      	movs	r2, #38	; 0x26
1000e65e:	4b04      	ldr	r3, [pc, #16]	; (1000e670 <at_ble_set_dev_config+0x8c>)
1000e660:	4798      	blx	r3
1000e662:	1c28      	adds	r0, r5, #0
1000e664:	b009      	add	sp, #36	; 0x24
1000e666:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e668:	10017902 	.word	0x10017902
1000e66c:	100103d9 	.word	0x100103d9
1000e670:	10012297 	.word	0x10012297

1000e674 <at_ble_init>:
1000e674:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e676:	b087      	sub	sp, #28
1000e678:	af03      	add	r7, sp, #12
1000e67a:	4954      	ldr	r1, [pc, #336]	; (1000e7cc <at_ble_init+0x158>)
1000e67c:	220b      	movs	r2, #11
1000e67e:	4b54      	ldr	r3, [pc, #336]	; (1000e7d0 <at_ble_init+0x15c>)
1000e680:	1c04      	adds	r4, r0, #0
1000e682:	1c38      	adds	r0, r7, #0
1000e684:	4798      	blx	r3
1000e686:	2205      	movs	r2, #5
1000e688:	4b52      	ldr	r3, [pc, #328]	; (1000e7d4 <at_ble_init+0x160>)
1000e68a:	2640      	movs	r6, #64	; 0x40
1000e68c:	801a      	strh	r2, [r3, #0]
1000e68e:	2300      	movs	r3, #0
1000e690:	4a51      	ldr	r2, [pc, #324]	; (1000e7d8 <at_ble_init+0x164>)
1000e692:	6013      	str	r3, [r2, #0]
1000e694:	4a51      	ldr	r2, [pc, #324]	; (1000e7dc <at_ble_init+0x168>)
1000e696:	7013      	strb	r3, [r2, #0]
1000e698:	4a51      	ldr	r2, [pc, #324]	; (1000e7e0 <at_ble_init+0x16c>)
1000e69a:	7013      	strb	r3, [r2, #0]
1000e69c:	4b51      	ldr	r3, [pc, #324]	; (1000e7e4 <at_ble_init+0x170>)
1000e69e:	4798      	blx	r3
1000e6a0:	4b51      	ldr	r3, [pc, #324]	; (1000e7e8 <at_ble_init+0x174>)
1000e6a2:	4798      	blx	r3
1000e6a4:	4b51      	ldr	r3, [pc, #324]	; (1000e7ec <at_ble_init+0x178>)
1000e6a6:	4798      	blx	r3
1000e6a8:	4b51      	ldr	r3, [pc, #324]	; (1000e7f0 <at_ble_init+0x17c>)
1000e6aa:	4798      	blx	r3
1000e6ac:	2c00      	cmp	r4, #0
1000e6ae:	d100      	bne.n	1000e6b2 <at_ble_init+0x3e>
1000e6b0:	e089      	b.n	1000e7c6 <at_ble_init+0x152>
1000e6b2:	68a3      	ldr	r3, [r4, #8]
1000e6b4:	2b00      	cmp	r3, #0
1000e6b6:	d100      	bne.n	1000e6ba <at_ble_init+0x46>
1000e6b8:	e085      	b.n	1000e7c6 <at_ble_init+0x152>
1000e6ba:	6923      	ldr	r3, [r4, #16]
1000e6bc:	2b00      	cmp	r3, #0
1000e6be:	d100      	bne.n	1000e6c2 <at_ble_init+0x4e>
1000e6c0:	e081      	b.n	1000e7c6 <at_ble_init+0x152>
1000e6c2:	6820      	ldr	r0, [r4, #0]
1000e6c4:	2800      	cmp	r0, #0
1000e6c6:	d102      	bne.n	1000e6ce <at_ble_init+0x5a>
1000e6c8:	6863      	ldr	r3, [r4, #4]
1000e6ca:	2b00      	cmp	r3, #0
1000e6cc:	d17b      	bne.n	1000e7c6 <at_ble_init+0x152>
1000e6ce:	4b49      	ldr	r3, [pc, #292]	; (1000e7f4 <at_ble_init+0x180>)
1000e6d0:	6861      	ldr	r1, [r4, #4]
1000e6d2:	4798      	blx	r3
1000e6d4:	4b48      	ldr	r3, [pc, #288]	; (1000e7f8 <at_ble_init+0x184>)
1000e6d6:	4798      	blx	r3
1000e6d8:	2801      	cmp	r0, #1
1000e6da:	d901      	bls.n	1000e6e0 <at_ble_init+0x6c>
1000e6dc:	26e2      	movs	r6, #226	; 0xe2
1000e6de:	e072      	b.n	1000e7c6 <at_ble_init+0x152>
1000e6e0:	4846      	ldr	r0, [pc, #280]	; (1000e7fc <at_ble_init+0x188>)
1000e6e2:	4b47      	ldr	r3, [pc, #284]	; (1000e800 <at_ble_init+0x18c>)
1000e6e4:	4798      	blx	r3
1000e6e6:	2800      	cmp	r0, #0
1000e6e8:	d1f8      	bne.n	1000e6dc <at_ble_init+0x68>
1000e6ea:	1c20      	adds	r0, r4, #0
1000e6ec:	4b45      	ldr	r3, [pc, #276]	; (1000e804 <at_ble_init+0x190>)
1000e6ee:	4798      	blx	r3
1000e6f0:	68e0      	ldr	r0, [r4, #12]
1000e6f2:	68a1      	ldr	r1, [r4, #8]
1000e6f4:	4b44      	ldr	r3, [pc, #272]	; (1000e808 <at_ble_init+0x194>)
1000e6f6:	4798      	blx	r3
1000e6f8:	466b      	mov	r3, sp
1000e6fa:	2201      	movs	r2, #1
1000e6fc:	1cdc      	adds	r4, r3, #3
1000e6fe:	1c20      	adds	r0, r4, #0
1000e700:	a901      	add	r1, sp, #4
1000e702:	4252      	negs	r2, r2
1000e704:	4b41      	ldr	r3, [pc, #260]	; (1000e80c <at_ble_init+0x198>)
1000e706:	4798      	blx	r3
1000e708:	2800      	cmp	r0, #0
1000e70a:	d102      	bne.n	1000e712 <at_ble_init+0x9e>
1000e70c:	7823      	ldrb	r3, [r4, #0]
1000e70e:	2b39      	cmp	r3, #57	; 0x39
1000e710:	d1f2      	bne.n	1000e6f8 <at_ble_init+0x84>
1000e712:	4b3f      	ldr	r3, [pc, #252]	; (1000e810 <at_ble_init+0x19c>)
1000e714:	4798      	blx	r3
1000e716:	1e06      	subs	r6, r0, #0
1000e718:	d155      	bne.n	1000e7c6 <at_ble_init+0x152>
1000e71a:	1c03      	adds	r3, r0, #0
1000e71c:	2101      	movs	r1, #1
1000e71e:	4a3d      	ldr	r2, [pc, #244]	; (1000e814 <at_ble_init+0x1a0>)
1000e720:	4249      	negs	r1, r1
1000e722:	189a      	adds	r2, r3, r2
1000e724:	3312      	adds	r3, #18
1000e726:	8151      	strh	r1, [r2, #10]
1000e728:	2b90      	cmp	r3, #144	; 0x90
1000e72a:	d1f7      	bne.n	1000e71c <at_ble_init+0xa8>
1000e72c:	4c3a      	ldr	r4, [pc, #232]	; (1000e818 <at_ble_init+0x1a4>)
1000e72e:	3b81      	subs	r3, #129	; 0x81
1000e730:	7023      	strb	r3, [r4, #0]
1000e732:	4b3a      	ldr	r3, [pc, #232]	; (1000e81c <at_ble_init+0x1a8>)
1000e734:	4a3a      	ldr	r2, [pc, #232]	; (1000e820 <at_ble_init+0x1ac>)
1000e736:	8063      	strh	r3, [r4, #2]
1000e738:	2300      	movs	r3, #0
1000e73a:	7123      	strb	r3, [r4, #4]
1000e73c:	3301      	adds	r3, #1
1000e73e:	1e58      	subs	r0, r3, #1
1000e740:	0119      	lsls	r1, r3, #4
1000e742:	4301      	orrs	r1, r0
1000e744:	3302      	adds	r3, #2
1000e746:	7011      	strb	r1, [r2, #0]
1000e748:	3201      	adds	r2, #1
1000e74a:	2b21      	cmp	r3, #33	; 0x21
1000e74c:	d1f7      	bne.n	1000e73e <at_ble_init+0xca>
1000e74e:	33e0      	adds	r3, #224	; 0xe0
1000e750:	33ff      	adds	r3, #255	; 0xff
1000e752:	84a3      	strh	r3, [r4, #36]	; 0x24
1000e754:	1c23      	adds	r3, r4, #0
1000e756:	2500      	movs	r5, #0
1000e758:	3373      	adds	r3, #115	; 0x73
1000e75a:	701d      	strb	r5, [r3, #0]
1000e75c:	1c23      	adds	r3, r4, #0
1000e75e:	3372      	adds	r3, #114	; 0x72
1000e760:	701d      	strb	r5, [r3, #0]
1000e762:	1c23      	adds	r3, r4, #0
1000e764:	3376      	adds	r3, #118	; 0x76
1000e766:	701d      	strb	r5, [r3, #0]
1000e768:	1c23      	adds	r3, r4, #0
1000e76a:	33cc      	adds	r3, #204	; 0xcc
1000e76c:	801d      	strh	r5, [r3, #0]
1000e76e:	1c22      	adds	r2, r4, #0
1000e770:	23a0      	movs	r3, #160	; 0xa0
1000e772:	32d0      	adds	r2, #208	; 0xd0
1000e774:	005b      	lsls	r3, r3, #1
1000e776:	8013      	strh	r3, [r2, #0]
1000e778:	1c22      	adds	r2, r4, #0
1000e77a:	32ce      	adds	r2, #206	; 0xce
1000e77c:	8013      	strh	r3, [r2, #0]
1000e77e:	1c23      	adds	r3, r4, #0
1000e780:	33d2      	adds	r3, #210	; 0xd2
1000e782:	801d      	strh	r5, [r3, #0]
1000e784:	22fa      	movs	r2, #250	; 0xfa
1000e786:	1c23      	adds	r3, r4, #0
1000e788:	0052      	lsls	r2, r2, #1
1000e78a:	33d4      	adds	r3, #212	; 0xd4
1000e78c:	801a      	strh	r2, [r3, #0]
1000e78e:	1c23      	adds	r3, r4, #0
1000e790:	33d6      	adds	r3, #214	; 0xd6
1000e792:	701d      	strb	r5, [r3, #0]
1000e794:	1c20      	adds	r0, r4, #0
1000e796:	4b23      	ldr	r3, [pc, #140]	; (1000e824 <at_ble_init+0x1b0>)
1000e798:	76e5      	strb	r5, [r4, #27]
1000e79a:	7725      	strb	r5, [r4, #28]
1000e79c:	7765      	strb	r5, [r4, #29]
1000e79e:	77a5      	strb	r5, [r4, #30]
1000e7a0:	77e5      	strb	r5, [r4, #31]
1000e7a2:	8425      	strh	r5, [r4, #32]
1000e7a4:	8465      	strh	r5, [r4, #34]	; 0x22
1000e7a6:	4798      	blx	r3
1000e7a8:	1c23      	adds	r3, r4, #0
1000e7aa:	2207      	movs	r2, #7
1000e7ac:	3374      	adds	r3, #116	; 0x74
1000e7ae:	701a      	strb	r2, [r3, #0]
1000e7b0:	1c23      	adds	r3, r4, #0
1000e7b2:	3204      	adds	r2, #4
1000e7b4:	33aa      	adds	r3, #170	; 0xaa
1000e7b6:	801a      	strh	r2, [r3, #0]
1000e7b8:	1c2b      	adds	r3, r5, #0
1000e7ba:	5d7a      	ldrb	r2, [r7, r5]
1000e7bc:	33ac      	adds	r3, #172	; 0xac
1000e7be:	3501      	adds	r5, #1
1000e7c0:	54e2      	strb	r2, [r4, r3]
1000e7c2:	2d0b      	cmp	r5, #11
1000e7c4:	d1f8      	bne.n	1000e7b8 <at_ble_init+0x144>
1000e7c6:	1c30      	adds	r0, r6, #0
1000e7c8:	b007      	add	sp, #28
1000e7ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e7cc:	10014e68 	.word	0x10014e68
1000e7d0:	10012297 	.word	0x10012297
1000e7d4:	10017870 	.word	0x10017870
1000e7d8:	10016ab4 	.word	0x10016ab4
1000e7dc:	10016a14 	.word	0x10016a14
1000e7e0:	10014f90 	.word	0x10014f90
1000e7e4:	10010e29 	.word	0x10010e29
1000e7e8:	1000eae5 	.word	0x1000eae5
1000e7ec:	1000f145 	.word	0x1000f145
1000e7f0:	1000f3f9 	.word	0x1000f3f9
1000e7f4:	1000f181 	.word	0x1000f181
1000e7f8:	1000d011 	.word	0x1000d011
1000e7fc:	1000f6f9 	.word	0x1000f6f9
1000e800:	1000d255 	.word	0x1000d255
1000e804:	1000f7a1 	.word	0x1000f7a1
1000e808:	1000dd61 	.word	0x1000dd61
1000e80c:	1000de1d 	.word	0x1000de1d
1000e810:	10010369 	.word	0x10010369
1000e814:	10017872 	.word	0x10017872
1000e818:	10017902 	.word	0x10017902
1000e81c:	00003a98 	.word	0x00003a98
1000e820:	1001790d 	.word	0x1001790d
1000e824:	1000e5e5 	.word	0x1000e5e5

1000e828 <at_ble_addr_set>:
1000e828:	b538      	push	{r3, r4, r5, lr}
1000e82a:	1c45      	adds	r5, r0, #1
1000e82c:	1c03      	adds	r3, r0, #0
1000e82e:	20cf      	movs	r0, #207	; 0xcf
1000e830:	2d00      	cmp	r5, #0
1000e832:	d018      	beq.n	1000e866 <at_ble_addr_set+0x3e>
1000e834:	781a      	ldrb	r2, [r3, #0]
1000e836:	2a03      	cmp	r2, #3
1000e838:	d815      	bhi.n	1000e866 <at_ble_addr_set+0x3e>
1000e83a:	2a01      	cmp	r2, #1
1000e83c:	d102      	bne.n	1000e844 <at_ble_addr_set+0x1c>
1000e83e:	785a      	ldrb	r2, [r3, #1]
1000e840:	2a00      	cmp	r2, #0
1000e842:	d010      	beq.n	1000e866 <at_ble_addr_set+0x3e>
1000e844:	1c1c      	adds	r4, r3, #0
1000e846:	1c29      	adds	r1, r5, #0
1000e848:	2206      	movs	r2, #6
1000e84a:	4b07      	ldr	r3, [pc, #28]	; (1000e868 <at_ble_addr_set+0x40>)
1000e84c:	4807      	ldr	r0, [pc, #28]	; (1000e86c <at_ble_addr_set+0x44>)
1000e84e:	4798      	blx	r3
1000e850:	7823      	ldrb	r3, [r4, #0]
1000e852:	4807      	ldr	r0, [pc, #28]	; (1000e870 <at_ble_addr_set+0x48>)
1000e854:	7103      	strb	r3, [r0, #4]
1000e856:	4b07      	ldr	r3, [pc, #28]	; (1000e874 <at_ble_addr_set+0x4c>)
1000e858:	4798      	blx	r3
1000e85a:	7823      	ldrb	r3, [r4, #0]
1000e85c:	2b00      	cmp	r3, #0
1000e85e:	d102      	bne.n	1000e866 <at_ble_addr_set+0x3e>
1000e860:	1c28      	adds	r0, r5, #0
1000e862:	4b05      	ldr	r3, [pc, #20]	; (1000e878 <at_ble_addr_set+0x50>)
1000e864:	4798      	blx	r3
1000e866:	bd38      	pop	{r3, r4, r5, pc}
1000e868:	10012297 	.word	0x10012297
1000e86c:	10017907 	.word	0x10017907
1000e870:	10017902 	.word	0x10017902
1000e874:	1000e5e5 	.word	0x1000e5e5
1000e878:	1000f825 	.word	0x1000f825

1000e87c <at_ble_adv_data_set>:
1000e87c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000e87e:	4684      	mov	ip, r0
1000e880:	1c0f      	adds	r7, r1, #0
1000e882:	1c16      	adds	r6, r2, #0
1000e884:	1c1c      	adds	r4, r3, #0
1000e886:	2800      	cmp	r0, #0
1000e888:	d102      	bne.n	1000e890 <at_ble_adv_data_set+0x14>
1000e88a:	20e2      	movs	r0, #226	; 0xe2
1000e88c:	2a00      	cmp	r2, #0
1000e88e:	d02b      	beq.n	1000e8e8 <at_ble_adv_data_set+0x6c>
1000e890:	20cf      	movs	r0, #207	; 0xcf
1000e892:	2f1f      	cmp	r7, #31
1000e894:	d828      	bhi.n	1000e8e8 <at_ble_adv_data_set+0x6c>
1000e896:	2c1f      	cmp	r4, #31
1000e898:	d826      	bhi.n	1000e8e8 <at_ble_adv_data_set+0x6c>
1000e89a:	4663      	mov	r3, ip
1000e89c:	2b00      	cmp	r3, #0
1000e89e:	d00e      	beq.n	1000e8be <at_ble_adv_data_set+0x42>
1000e8a0:	4812      	ldr	r0, [pc, #72]	; (1000e8ec <at_ble_adv_data_set+0x70>)
1000e8a2:	4d13      	ldr	r5, [pc, #76]	; (1000e8f0 <at_ble_adv_data_set+0x74>)
1000e8a4:	2f00      	cmp	r7, #0
1000e8a6:	d104      	bne.n	1000e8b2 <at_ble_adv_data_set+0x36>
1000e8a8:	1c39      	adds	r1, r7, #0
1000e8aa:	221f      	movs	r2, #31
1000e8ac:	4b11      	ldr	r3, [pc, #68]	; (1000e8f4 <at_ble_adv_data_set+0x78>)
1000e8ae:	4798      	blx	r3
1000e8b0:	e003      	b.n	1000e8ba <at_ble_adv_data_set+0x3e>
1000e8b2:	4661      	mov	r1, ip
1000e8b4:	1c3a      	adds	r2, r7, #0
1000e8b6:	4b10      	ldr	r3, [pc, #64]	; (1000e8f8 <at_ble_adv_data_set+0x7c>)
1000e8b8:	4798      	blx	r3
1000e8ba:	3572      	adds	r5, #114	; 0x72
1000e8bc:	702f      	strb	r7, [r5, #0]
1000e8be:	1e30      	subs	r0, r6, #0
1000e8c0:	d012      	beq.n	1000e8e8 <at_ble_adv_data_set+0x6c>
1000e8c2:	4d0b      	ldr	r5, [pc, #44]	; (1000e8f0 <at_ble_adv_data_set+0x74>)
1000e8c4:	480d      	ldr	r0, [pc, #52]	; (1000e8fc <at_ble_adv_data_set+0x80>)
1000e8c6:	2c00      	cmp	r4, #0
1000e8c8:	d107      	bne.n	1000e8da <at_ble_adv_data_set+0x5e>
1000e8ca:	1c21      	adds	r1, r4, #0
1000e8cc:	221f      	movs	r2, #31
1000e8ce:	4b09      	ldr	r3, [pc, #36]	; (1000e8f4 <at_ble_adv_data_set+0x78>)
1000e8d0:	3573      	adds	r5, #115	; 0x73
1000e8d2:	4798      	blx	r3
1000e8d4:	702c      	strb	r4, [r5, #0]
1000e8d6:	1c20      	adds	r0, r4, #0
1000e8d8:	e006      	b.n	1000e8e8 <at_ble_adv_data_set+0x6c>
1000e8da:	1c31      	adds	r1, r6, #0
1000e8dc:	1c22      	adds	r2, r4, #0
1000e8de:	4b06      	ldr	r3, [pc, #24]	; (1000e8f8 <at_ble_adv_data_set+0x7c>)
1000e8e0:	4798      	blx	r3
1000e8e2:	2000      	movs	r0, #0
1000e8e4:	3573      	adds	r5, #115	; 0x73
1000e8e6:	702c      	strb	r4, [r5, #0]
1000e8e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000e8ea:	46c0      	nop			; (mov r8, r8)
1000e8ec:	10017936 	.word	0x10017936
1000e8f0:	10017902 	.word	0x10017902
1000e8f4:	100122a9 	.word	0x100122a9
1000e8f8:	10012297 	.word	0x10012297
1000e8fc:	10017955 	.word	0x10017955

1000e900 <at_ble_adv_start>:
1000e900:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e902:	b091      	sub	sp, #68	; 0x44
1000e904:	1c1f      	adds	r7, r3, #0
1000e906:	ab16      	add	r3, sp, #88	; 0x58
1000e908:	881d      	ldrh	r5, [r3, #0]
1000e90a:	ab17      	add	r3, sp, #92	; 0x5c
1000e90c:	881b      	ldrh	r3, [r3, #0]
1000e90e:	910d      	str	r1, [sp, #52]	; 0x34
1000e910:	930e      	str	r3, [sp, #56]	; 0x38
1000e912:	ab18      	add	r3, sp, #96	; 0x60
1000e914:	781b      	ldrb	r3, [r3, #0]
1000e916:	1c04      	adds	r4, r0, #0
1000e918:	930f      	str	r3, [sp, #60]	; 0x3c
1000e91a:	4b42      	ldr	r3, [pc, #264]	; (1000ea24 <at_ble_adv_start+0x124>)
1000e91c:	1c16      	adds	r6, r2, #0
1000e91e:	3373      	adds	r3, #115	; 0x73
1000e920:	781b      	ldrb	r3, [r3, #0]
1000e922:	20cf      	movs	r0, #207	; 0xcf
1000e924:	930c      	str	r3, [sp, #48]	; 0x30
1000e926:	2c01      	cmp	r4, #1
1000e928:	d103      	bne.n	1000e932 <at_ble_adv_start+0x32>
1000e92a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000e92c:	2b00      	cmp	r3, #0
1000e92e:	d176      	bne.n	1000ea1e <at_ble_adv_start+0x11e>
1000e930:	e024      	b.n	1000e97c <at_ble_adv_start+0x7c>
1000e932:	2c04      	cmp	r4, #4
1000e934:	d873      	bhi.n	1000ea1e <at_ble_adv_start+0x11e>
1000e936:	2380      	movs	r3, #128	; 0x80
1000e938:	01db      	lsls	r3, r3, #7
1000e93a:	429d      	cmp	r5, r3
1000e93c:	d86f      	bhi.n	1000ea1e <at_ble_adv_start+0x11e>
1000e93e:	2c00      	cmp	r4, #0
1000e940:	d102      	bne.n	1000e948 <at_ble_adv_start+0x48>
1000e942:	2d1f      	cmp	r5, #31
1000e944:	d96b      	bls.n	1000ea1e <at_ble_adv_start+0x11e>
1000e946:	e003      	b.n	1000e950 <at_ble_adv_start+0x50>
1000e948:	2d9f      	cmp	r5, #159	; 0x9f
1000e94a:	d801      	bhi.n	1000e950 <at_ble_adv_start+0x50>
1000e94c:	2c01      	cmp	r4, #1
1000e94e:	d166      	bne.n	1000ea1e <at_ble_adv_start+0x11e>
1000e950:	2f00      	cmp	r7, #0
1000e952:	d009      	beq.n	1000e968 <at_ble_adv_start+0x68>
1000e954:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000e956:	20cf      	movs	r0, #207	; 0xcf
1000e958:	3b01      	subs	r3, #1
1000e95a:	2b01      	cmp	r3, #1
1000e95c:	d95f      	bls.n	1000ea1e <at_ble_adv_start+0x11e>
1000e95e:	2c01      	cmp	r4, #1
1000e960:	d102      	bne.n	1000e968 <at_ble_adv_start+0x68>
1000e962:	2d00      	cmp	r5, #0
1000e964:	d100      	bne.n	1000e968 <at_ble_adv_start+0x68>
1000e966:	3520      	adds	r5, #32
1000e968:	4b2f      	ldr	r3, [pc, #188]	; (1000ea28 <at_ble_adv_start+0x128>)
1000e96a:	4798      	blx	r3
1000e96c:	1c01      	adds	r1, r0, #0
1000e96e:	2e00      	cmp	r6, #0
1000e970:	d043      	beq.n	1000e9fa <at_ble_adv_start+0xfa>
1000e972:	7833      	ldrb	r3, [r6, #0]
1000e974:	1e60      	subs	r0, r4, #1
1000e976:	2b00      	cmp	r3, #0
1000e978:	d109      	bne.n	1000e98e <at_ble_adv_start+0x8e>
1000e97a:	e03b      	b.n	1000e9f4 <at_ble_adv_start+0xf4>
1000e97c:	2380      	movs	r3, #128	; 0x80
1000e97e:	01db      	lsls	r3, r3, #7
1000e980:	429d      	cmp	r5, r3
1000e982:	d84c      	bhi.n	1000ea1e <at_ble_adv_start+0x11e>
1000e984:	2e00      	cmp	r6, #0
1000e986:	d04a      	beq.n	1000ea1e <at_ble_adv_start+0x11e>
1000e988:	2f00      	cmp	r7, #0
1000e98a:	d1e3      	bne.n	1000e954 <at_ble_adv_start+0x54>
1000e98c:	e02b      	b.n	1000e9e6 <at_ble_adv_start+0xe6>
1000e98e:	2301      	movs	r3, #1
1000e990:	2803      	cmp	r0, #3
1000e992:	d93a      	bls.n	1000ea0a <at_ble_adv_start+0x10a>
1000e994:	200d      	movs	r0, #13
1000e996:	1c72      	adds	r2, r6, #1
1000e998:	e002      	b.n	1000e9a0 <at_ble_adv_start+0xa0>
1000e99a:	200e      	movs	r0, #14
1000e99c:	1e32      	subs	r2, r6, #0
1000e99e:	d1fa      	bne.n	1000e996 <at_ble_adv_start+0x96>
1000e9a0:	4c20      	ldr	r4, [pc, #128]	; (1000ea24 <at_ble_adv_start+0x124>)
1000e9a2:	3474      	adds	r4, #116	; 0x74
1000e9a4:	7826      	ldrb	r6, [r4, #0]
1000e9a6:	2407      	movs	r4, #7
1000e9a8:	2e00      	cmp	r6, #0
1000e9aa:	d000      	beq.n	1000e9ae <at_ble_adv_start+0xae>
1000e9ac:	1c34      	adds	r4, r6, #0
1000e9ae:	9200      	str	r2, [sp, #0]
1000e9b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000e9b2:	9403      	str	r4, [sp, #12]
1000e9b4:	9204      	str	r2, [sp, #16]
1000e9b6:	4a1b      	ldr	r2, [pc, #108]	; (1000ea24 <at_ble_adv_start+0x124>)
1000e9b8:	9501      	str	r5, [sp, #4]
1000e9ba:	9502      	str	r5, [sp, #8]
1000e9bc:	9705      	str	r7, [sp, #20]
1000e9be:	3272      	adds	r2, #114	; 0x72
1000e9c0:	7812      	ldrb	r2, [r2, #0]
1000e9c2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000e9c4:	9206      	str	r2, [sp, #24]
1000e9c6:	4a19      	ldr	r2, [pc, #100]	; (1000ea2c <at_ble_adv_start+0x12c>)
1000e9c8:	9207      	str	r2, [sp, #28]
1000e9ca:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000e9cc:	9208      	str	r2, [sp, #32]
1000e9ce:	4a18      	ldr	r2, [pc, #96]	; (1000ea30 <at_ble_adv_start+0x130>)
1000e9d0:	9209      	str	r2, [sp, #36]	; 0x24
1000e9d2:	2264      	movs	r2, #100	; 0x64
1000e9d4:	4362      	muls	r2, r4
1000e9d6:	b292      	uxth	r2, r2
1000e9d8:	920a      	str	r2, [sp, #40]	; 0x28
1000e9da:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000e9dc:	4c15      	ldr	r4, [pc, #84]	; (1000ea34 <at_ble_adv_start+0x134>)
1000e9de:	920b      	str	r2, [sp, #44]	; 0x2c
1000e9e0:	4a15      	ldr	r2, [pc, #84]	; (1000ea38 <at_ble_adv_start+0x138>)
1000e9e2:	47a0      	blx	r4
1000e9e4:	e01b      	b.n	1000ea1e <at_ble_adv_start+0x11e>
1000e9e6:	2d00      	cmp	r5, #0
1000e9e8:	d1be      	bne.n	1000e968 <at_ble_adv_start+0x68>
1000e9ea:	4b0f      	ldr	r3, [pc, #60]	; (1000ea28 <at_ble_adv_start+0x128>)
1000e9ec:	4798      	blx	r3
1000e9ee:	2520      	movs	r5, #32
1000e9f0:	1c01      	adds	r1, r0, #0
1000e9f2:	e7be      	b.n	1000e972 <at_ble_adv_start+0x72>
1000e9f4:	2803      	cmp	r0, #3
1000e9f6:	d8cd      	bhi.n	1000e994 <at_ble_adv_start+0x94>
1000e9f8:	e006      	b.n	1000ea08 <at_ble_adv_start+0x108>
1000e9fa:	1e60      	subs	r0, r4, #1
1000e9fc:	2803      	cmp	r0, #3
1000e9fe:	d903      	bls.n	1000ea08 <at_ble_adv_start+0x108>
1000ea00:	1c33      	adds	r3, r6, #0
1000ea02:	200d      	movs	r0, #13
1000ea04:	1c32      	adds	r2, r6, #0
1000ea06:	e7cb      	b.n	1000e9a0 <at_ble_adv_start+0xa0>
1000ea08:	2300      	movs	r3, #0
1000ea0a:	f002 fb7f 	bl	1001110c <__gnu_thumb1_case_sqi>
1000ea0e:	06c6      	.short	0x06c6
1000ea10:	0204      	.short	0x0204
1000ea12:	200f      	movs	r0, #15
1000ea14:	e7c2      	b.n	1000e99c <at_ble_adv_start+0x9c>
1000ea16:	2200      	movs	r2, #0
1000ea18:	920c      	str	r2, [sp, #48]	; 0x30
1000ea1a:	200c      	movs	r0, #12
1000ea1c:	e7be      	b.n	1000e99c <at_ble_adv_start+0x9c>
1000ea1e:	b011      	add	sp, #68	; 0x44
1000ea20:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ea22:	46c0      	nop			; (mov r8, r8)
1000ea24:	10017902 	.word	0x10017902
1000ea28:	100108b5 	.word	0x100108b5
1000ea2c:	10017936 	.word	0x10017936
1000ea30:	10017955 	.word	0x10017955
1000ea34:	10010795 	.word	0x10010795
1000ea38:	00003a98 	.word	0x00003a98

1000ea3c <at_ble_adv_stop>:
1000ea3c:	b508      	push	{r3, lr}
1000ea3e:	4b01      	ldr	r3, [pc, #4]	; (1000ea44 <at_ble_adv_stop+0x8>)
1000ea40:	4798      	blx	r3
1000ea42:	bd08      	pop	{r3, pc}
1000ea44:	100105c1 	.word	0x100105c1

1000ea48 <at_ble_scan_stop>:
1000ea48:	b510      	push	{r4, lr}
1000ea4a:	4b05      	ldr	r3, [pc, #20]	; (1000ea60 <at_ble_scan_stop+0x18>)
1000ea4c:	4798      	blx	r3
1000ea4e:	1e04      	subs	r4, r0, #0
1000ea50:	d103      	bne.n	1000ea5a <at_ble_scan_stop+0x12>
1000ea52:	20d1      	movs	r0, #209	; 0xd1
1000ea54:	4b03      	ldr	r3, [pc, #12]	; (1000ea64 <at_ble_scan_stop+0x1c>)
1000ea56:	0100      	lsls	r0, r0, #4
1000ea58:	4798      	blx	r3
1000ea5a:	1c20      	adds	r0, r4, #0
1000ea5c:	bd10      	pop	{r4, pc}
1000ea5e:	46c0      	nop			; (mov r8, r8)
1000ea60:	100105c1 	.word	0x100105c1
1000ea64:	1000e4f5 	.word	0x1000e4f5

1000ea68 <at_ble_disconnect>:
1000ea68:	b538      	push	{r3, r4, r5, lr}
1000ea6a:	1c04      	adds	r4, r0, #0
1000ea6c:	4b04      	ldr	r3, [pc, #16]	; (1000ea80 <at_ble_disconnect+0x18>)
1000ea6e:	1c08      	adds	r0, r1, #0
1000ea70:	1c21      	adds	r1, r4, #0
1000ea72:	4798      	blx	r3
1000ea74:	1c05      	adds	r5, r0, #0
1000ea76:	4b03      	ldr	r3, [pc, #12]	; (1000ea84 <at_ble_disconnect+0x1c>)
1000ea78:	1c20      	adds	r0, r4, #0
1000ea7a:	4798      	blx	r3
1000ea7c:	1c28      	adds	r0, r5, #0
1000ea7e:	bd38      	pop	{r3, r4, r5, pc}
1000ea80:	1000fc39 	.word	0x1000fc39
1000ea84:	1000e539 	.word	0x1000e539

1000ea88 <at_ble_conn_update_reply>:
1000ea88:	b510      	push	{r4, lr}
1000ea8a:	4c01      	ldr	r4, [pc, #4]	; (1000ea90 <at_ble_conn_update_reply+0x8>)
1000ea8c:	47a0      	blx	r4
1000ea8e:	bd10      	pop	{r4, pc}
1000ea90:	10010129 	.word	0x10010129

1000ea94 <at_ble_random_address_resolve>:
1000ea94:	b510      	push	{r4, lr}
1000ea96:	23cf      	movs	r3, #207	; 0xcf
1000ea98:	2800      	cmp	r0, #0
1000ea9a:	d00a      	beq.n	1000eab2 <at_ble_random_address_resolve+0x1e>
1000ea9c:	2900      	cmp	r1, #0
1000ea9e:	d008      	beq.n	1000eab2 <at_ble_random_address_resolve+0x1e>
1000eaa0:	2a00      	cmp	r2, #0
1000eaa2:	d006      	beq.n	1000eab2 <at_ble_random_address_resolve+0x1e>
1000eaa4:	780c      	ldrb	r4, [r1, #0]
1000eaa6:	2c02      	cmp	r4, #2
1000eaa8:	d103      	bne.n	1000eab2 <at_ble_random_address_resolve+0x1e>
1000eaaa:	4b03      	ldr	r3, [pc, #12]	; (1000eab8 <at_ble_random_address_resolve+0x24>)
1000eaac:	3101      	adds	r1, #1
1000eaae:	4798      	blx	r3
1000eab0:	2300      	movs	r3, #0
1000eab2:	1c18      	adds	r0, r3, #0
1000eab4:	bd10      	pop	{r4, pc}
1000eab6:	46c0      	nop			; (mov r8, r8)
1000eab8:	10010955 	.word	0x10010955

1000eabc <at_ble_uuid_type2len>:
1000eabc:	23cf      	movs	r3, #207	; 0xcf
1000eabe:	2802      	cmp	r0, #2
1000eac0:	d801      	bhi.n	1000eac6 <at_ble_uuid_type2len+0xa>
1000eac2:	4b02      	ldr	r3, [pc, #8]	; (1000eacc <at_ble_uuid_type2len+0x10>)
1000eac4:	5c1b      	ldrb	r3, [r3, r0]
1000eac6:	1c18      	adds	r0, r3, #0
1000eac8:	4770      	bx	lr
1000eaca:	46c0      	nop			; (mov r8, r8)
1000eacc:	10014e73 	.word	0x10014e73

1000ead0 <at_ble_uuid_len2type>:
1000ead0:	1e83      	subs	r3, r0, #2
1000ead2:	b2db      	uxtb	r3, r3
1000ead4:	2003      	movs	r0, #3
1000ead6:	2b0e      	cmp	r3, #14
1000ead8:	d801      	bhi.n	1000eade <at_ble_uuid_len2type+0xe>
1000eada:	4a01      	ldr	r2, [pc, #4]	; (1000eae0 <at_ble_uuid_len2type+0x10>)
1000eadc:	5cd0      	ldrb	r0, [r2, r3]
1000eade:	4770      	bx	lr
1000eae0:	10014e76 	.word	0x10014e76

1000eae4 <init_gatt_client_module>:
1000eae4:	2200      	movs	r2, #0
1000eae6:	4b01      	ldr	r3, [pc, #4]	; (1000eaec <init_gatt_client_module+0x8>)
1000eae8:	801a      	strh	r2, [r3, #0]
1000eaea:	4770      	bx	lr
1000eaec:	10016a0c 	.word	0x10016a0c

1000eaf0 <db_searchATT>:
1000eaf0:	b570      	push	{r4, r5, r6, lr}
1000eaf2:	1c05      	adds	r5, r0, #0
1000eaf4:	2400      	movs	r4, #0
1000eaf6:	4b0c      	ldr	r3, [pc, #48]	; (1000eb28 <db_searchATT+0x38>)
1000eaf8:	6819      	ldr	r1, [r3, #0]
1000eafa:	4b0c      	ldr	r3, [pc, #48]	; (1000eb2c <db_searchATT+0x3c>)
1000eafc:	681e      	ldr	r6, [r3, #0]
1000eafe:	428c      	cmp	r4, r1
1000eb00:	dc10      	bgt.n	1000eb24 <db_searchATT+0x34>
1000eb02:	200c      	movs	r0, #12
1000eb04:	1863      	adds	r3, r4, r1
1000eb06:	0fda      	lsrs	r2, r3, #31
1000eb08:	18d3      	adds	r3, r2, r3
1000eb0a:	1c02      	adds	r2, r0, #0
1000eb0c:	105b      	asrs	r3, r3, #1
1000eb0e:	435a      	muls	r2, r3
1000eb10:	18b0      	adds	r0, r6, r2
1000eb12:	8802      	ldrh	r2, [r0, #0]
1000eb14:	42aa      	cmp	r2, r5
1000eb16:	d201      	bcs.n	1000eb1c <db_searchATT+0x2c>
1000eb18:	1e59      	subs	r1, r3, #1
1000eb1a:	e7f0      	b.n	1000eafe <db_searchATT+0xe>
1000eb1c:	42aa      	cmp	r2, r5
1000eb1e:	d902      	bls.n	1000eb26 <db_searchATT+0x36>
1000eb20:	1c5c      	adds	r4, r3, #1
1000eb22:	e7ec      	b.n	1000eafe <db_searchATT+0xe>
1000eb24:	2000      	movs	r0, #0
1000eb26:	bd70      	pop	{r4, r5, r6, pc}
1000eb28:	10016a20 	.word	0x10016a20
1000eb2c:	10016a18 	.word	0x10016a18

1000eb30 <att_permissions>:
1000eb30:	b530      	push	{r4, r5, lr}
1000eb32:	2403      	movs	r4, #3
1000eb34:	1c05      	adds	r5, r0, #0
1000eb36:	2301      	movs	r3, #1
1000eb38:	4025      	ands	r5, r4
1000eb3a:	42a5      	cmp	r5, r4
1000eb3c:	d009      	beq.n	1000eb52 <att_permissions+0x22>
1000eb3e:	1c23      	adds	r3, r4, #0
1000eb40:	1924      	adds	r4, r4, r4
1000eb42:	4220      	tst	r0, r4
1000eb44:	d105      	bne.n	1000eb52 <att_permissions+0x22>
1000eb46:	3b02      	subs	r3, #2
1000eb48:	4218      	tst	r0, r3
1000eb4a:	d102      	bne.n	1000eb52 <att_permissions+0x22>
1000eb4c:	1e4b      	subs	r3, r1, #1
1000eb4e:	4199      	sbcs	r1, r3
1000eb50:	b28b      	uxth	r3, r1
1000eb52:	2130      	movs	r1, #48	; 0x30
1000eb54:	4001      	ands	r1, r0
1000eb56:	2930      	cmp	r1, #48	; 0x30
1000eb58:	d007      	beq.n	1000eb6a <att_permissions+0x3a>
1000eb5a:	0641      	lsls	r1, r0, #25
1000eb5c:	d401      	bmi.n	1000eb62 <att_permissions+0x32>
1000eb5e:	0681      	lsls	r1, r0, #26
1000eb60:	d501      	bpl.n	1000eb66 <att_permissions+0x36>
1000eb62:	4807      	ldr	r0, [pc, #28]	; (1000eb80 <att_permissions+0x50>)
1000eb64:	e009      	b.n	1000eb7a <att_permissions+0x4a>
1000eb66:	06c1      	lsls	r1, r0, #27
1000eb68:	d501      	bpl.n	1000eb6e <att_permissions+0x3e>
1000eb6a:	4806      	ldr	r0, [pc, #24]	; (1000eb84 <att_permissions+0x54>)
1000eb6c:	e005      	b.n	1000eb7a <att_permissions+0x4a>
1000eb6e:	2a00      	cmp	r2, #0
1000eb70:	d001      	beq.n	1000eb76 <att_permissions+0x46>
1000eb72:	2204      	movs	r2, #4
1000eb74:	4313      	orrs	r3, r2
1000eb76:	2080      	movs	r0, #128	; 0x80
1000eb78:	0180      	lsls	r0, r0, #6
1000eb7a:	4318      	orrs	r0, r3
1000eb7c:	bd30      	pop	{r4, r5, pc}
1000eb7e:	46c0      	nop			; (mov r8, r8)
1000eb80:	0000200c 	.word	0x0000200c
1000eb84:	00002004 	.word	0x00002004

1000eb88 <char_permissions>:
1000eb88:	b530      	push	{r4, r5, lr}
1000eb8a:	2300      	movs	r3, #0
1000eb8c:	0784      	lsls	r4, r0, #30
1000eb8e:	d503      	bpl.n	1000eb98 <char_permissions+0x10>
1000eb90:	3301      	adds	r3, #1
1000eb92:	4219      	tst	r1, r3
1000eb94:	d100      	bne.n	1000eb98 <char_permissions+0x10>
1000eb96:	3302      	adds	r3, #2
1000eb98:	0704      	lsls	r4, r0, #28
1000eb9a:	d508      	bpl.n	1000ebae <char_permissions+0x26>
1000eb9c:	06cc      	lsls	r4, r1, #27
1000eb9e:	d501      	bpl.n	1000eba4 <char_permissions+0x1c>
1000eba0:	2404      	movs	r4, #4
1000eba2:	e000      	b.n	1000eba6 <char_permissions+0x1e>
1000eba4:	240c      	movs	r4, #12
1000eba6:	4323      	orrs	r3, r4
1000eba8:	2480      	movs	r4, #128	; 0x80
1000ebaa:	01a4      	lsls	r4, r4, #6
1000ebac:	4323      	orrs	r3, r4
1000ebae:	0684      	lsls	r4, r0, #26
1000ebb0:	d506      	bpl.n	1000ebc0 <char_permissions+0x38>
1000ebb2:	2406      	movs	r4, #6
1000ebb4:	4221      	tst	r1, r4
1000ebb6:	d101      	bne.n	1000ebbc <char_permissions+0x34>
1000ebb8:	340a      	adds	r4, #10
1000ebba:	e000      	b.n	1000ebbe <char_permissions+0x36>
1000ebbc:	2430      	movs	r4, #48	; 0x30
1000ebbe:	4323      	orrs	r3, r4
1000ebc0:	06c4      	lsls	r4, r0, #27
1000ebc2:	d506      	bpl.n	1000ebd2 <char_permissions+0x4a>
1000ebc4:	2406      	movs	r4, #6
1000ebc6:	4221      	tst	r1, r4
1000ebc8:	d101      	bne.n	1000ebce <char_permissions+0x46>
1000ebca:	343a      	adds	r4, #58	; 0x3a
1000ebcc:	e000      	b.n	1000ebd0 <char_permissions+0x48>
1000ebce:	24c0      	movs	r4, #192	; 0xc0
1000ebd0:	4323      	orrs	r3, r4
1000ebd2:	2480      	movs	r4, #128	; 0x80
1000ebd4:	0064      	lsls	r4, r4, #1
1000ebd6:	4220      	tst	r0, r4
1000ebd8:	d000      	beq.n	1000ebdc <char_permissions+0x54>
1000ebda:	4323      	orrs	r3, r4
1000ebdc:	07c4      	lsls	r4, r0, #31
1000ebde:	d502      	bpl.n	1000ebe6 <char_permissions+0x5e>
1000ebe0:	2480      	movs	r4, #128	; 0x80
1000ebe2:	00a4      	lsls	r4, r4, #2
1000ebe4:	4323      	orrs	r3, r4
1000ebe6:	2404      	movs	r4, #4
1000ebe8:	4220      	tst	r0, r4
1000ebea:	d006      	beq.n	1000ebfa <char_permissions+0x72>
1000ebec:	06cd      	lsls	r5, r1, #27
1000ebee:	d400      	bmi.n	1000ebf2 <char_permissions+0x6a>
1000ebf0:	240c      	movs	r4, #12
1000ebf2:	4323      	orrs	r3, r4
1000ebf4:	2480      	movs	r4, #128	; 0x80
1000ebf6:	0124      	lsls	r4, r4, #4
1000ebf8:	4323      	orrs	r3, r4
1000ebfa:	0644      	lsls	r4, r0, #25
1000ebfc:	d501      	bpl.n	1000ec02 <char_permissions+0x7a>
1000ebfe:	4c08      	ldr	r4, [pc, #32]	; (1000ec20 <char_permissions+0x98>)
1000ec00:	4323      	orrs	r3, r4
1000ec02:	0600      	lsls	r0, r0, #24
1000ec04:	d507      	bpl.n	1000ec16 <char_permissions+0x8e>
1000ec06:	2004      	movs	r0, #4
1000ec08:	06c9      	lsls	r1, r1, #27
1000ec0a:	d400      	bmi.n	1000ec0e <char_permissions+0x86>
1000ec0c:	200c      	movs	r0, #12
1000ec0e:	4303      	orrs	r3, r0
1000ec10:	2084      	movs	r0, #132	; 0x84
1000ec12:	0180      	lsls	r0, r0, #6
1000ec14:	4303      	orrs	r3, r0
1000ec16:	0390      	lsls	r0, r2, #14
1000ec18:	4303      	orrs	r3, r0
1000ec1a:	b298      	uxth	r0, r3
1000ec1c:	bd30      	pop	{r4, r5, pc}
1000ec1e:	46c0      	nop			; (mov r8, r8)
1000ec20:	00001004 	.word	0x00001004

1000ec24 <presentation_format_define>:
1000ec24:	b507      	push	{r0, r1, r2, lr}
1000ec26:	466a      	mov	r2, sp
1000ec28:	780b      	ldrb	r3, [r1, #0]
1000ec2a:	7013      	strb	r3, [r2, #0]
1000ec2c:	784b      	ldrb	r3, [r1, #1]
1000ec2e:	7053      	strb	r3, [r2, #1]
1000ec30:	884b      	ldrh	r3, [r1, #2]
1000ec32:	7093      	strb	r3, [r2, #2]
1000ec34:	0a1b      	lsrs	r3, r3, #8
1000ec36:	70d3      	strb	r3, [r2, #3]
1000ec38:	790b      	ldrb	r3, [r1, #4]
1000ec3a:	7113      	strb	r3, [r2, #4]
1000ec3c:	88cb      	ldrh	r3, [r1, #6]
1000ec3e:	2107      	movs	r1, #7
1000ec40:	7153      	strb	r3, [r2, #5]
1000ec42:	0a1b      	lsrs	r3, r3, #8
1000ec44:	7193      	strb	r3, [r2, #6]
1000ec46:	4b01      	ldr	r3, [pc, #4]	; (1000ec4c <presentation_format_define+0x28>)
1000ec48:	4798      	blx	r3
1000ec4a:	bd0e      	pop	{r1, r2, r3, pc}
1000ec4c:	10010fb9 	.word	0x10010fb9

1000ec50 <db_addATT>:
1000ec50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ec52:	4c29      	ldr	r4, [pc, #164]	; (1000ecf8 <db_addATT+0xa8>)
1000ec54:	1c1d      	adds	r5, r3, #0
1000ec56:	6823      	ldr	r3, [r4, #0]
1000ec58:	9001      	str	r0, [sp, #4]
1000ec5a:	26d3      	movs	r6, #211	; 0xd3
1000ec5c:	2b00      	cmp	r3, #0
1000ec5e:	d048      	beq.n	1000ecf2 <db_addATT+0xa2>
1000ec60:	1c1e      	adds	r6, r3, #0
1000ec62:	3e0c      	subs	r6, #12
1000ec64:	6026      	str	r6, [r4, #0]
1000ec66:	2900      	cmp	r1, #0
1000ec68:	d005      	beq.n	1000ec76 <db_addATT+0x26>
1000ec6a:	4f24      	ldr	r7, [pc, #144]	; (1000ecfc <db_addATT+0xac>)
1000ec6c:	46bc      	mov	ip, r7
1000ec6e:	4660      	mov	r0, ip
1000ec70:	683f      	ldr	r7, [r7, #0]
1000ec72:	18bf      	adds	r7, r7, r2
1000ec74:	6007      	str	r7, [r0, #0]
1000ec76:	4821      	ldr	r0, [pc, #132]	; (1000ecfc <db_addATT+0xac>)
1000ec78:	6807      	ldr	r7, [r0, #0]
1000ec7a:	4684      	mov	ip, r0
1000ec7c:	42be      	cmp	r6, r7
1000ec7e:	d932      	bls.n	1000ece6 <db_addATT+0x96>
1000ec80:	4668      	mov	r0, sp
1000ec82:	8880      	ldrh	r0, [r0, #4]
1000ec84:	3b0c      	subs	r3, #12
1000ec86:	8018      	strh	r0, [r3, #0]
1000ec88:	6823      	ldr	r3, [r4, #0]
1000ec8a:	2900      	cmp	r1, #0
1000ec8c:	d009      	beq.n	1000eca2 <db_addATT+0x52>
1000ec8e:	2a00      	cmp	r2, #0
1000ec90:	d007      	beq.n	1000eca2 <db_addATT+0x52>
1000ec92:	4660      	mov	r0, ip
1000ec94:	6800      	ldr	r0, [r0, #0]
1000ec96:	809a      	strh	r2, [r3, #4]
1000ec98:	1a80      	subs	r0, r0, r2
1000ec9a:	6098      	str	r0, [r3, #8]
1000ec9c:	4b18      	ldr	r3, [pc, #96]	; (1000ed00 <db_addATT+0xb0>)
1000ec9e:	4798      	blx	r3
1000eca0:	e002      	b.n	1000eca8 <db_addATT+0x58>
1000eca2:	2100      	movs	r1, #0
1000eca4:	809a      	strh	r2, [r3, #4]
1000eca6:	6099      	str	r1, [r3, #8]
1000eca8:	2300      	movs	r3, #0
1000ecaa:	6822      	ldr	r2, [r4, #0]
1000ecac:	7093      	strb	r3, [r2, #2]
1000ecae:	3303      	adds	r3, #3
1000ecb0:	402b      	ands	r3, r5
1000ecb2:	2b03      	cmp	r3, #3
1000ecb4:	d001      	beq.n	1000ecba <db_addATT+0x6a>
1000ecb6:	076b      	lsls	r3, r5, #29
1000ecb8:	d504      	bpl.n	1000ecc4 <db_addATT+0x74>
1000ecba:	2101      	movs	r1, #1
1000ecbc:	6822      	ldr	r2, [r4, #0]
1000ecbe:	7893      	ldrb	r3, [r2, #2]
1000ecc0:	430b      	orrs	r3, r1
1000ecc2:	7093      	strb	r3, [r2, #2]
1000ecc4:	2330      	movs	r3, #48	; 0x30
1000ecc6:	402b      	ands	r3, r5
1000ecc8:	2b30      	cmp	r3, #48	; 0x30
1000ecca:	d001      	beq.n	1000ecd0 <db_addATT+0x80>
1000eccc:	066b      	lsls	r3, r5, #25
1000ecce:	d504      	bpl.n	1000ecda <db_addATT+0x8a>
1000ecd0:	2102      	movs	r1, #2
1000ecd2:	6822      	ldr	r2, [r4, #0]
1000ecd4:	7893      	ldrb	r3, [r2, #2]
1000ecd6:	430b      	orrs	r3, r1
1000ecd8:	7093      	strb	r3, [r2, #2]
1000ecda:	4a0a      	ldr	r2, [pc, #40]	; (1000ed04 <db_addATT+0xb4>)
1000ecdc:	2600      	movs	r6, #0
1000ecde:	6813      	ldr	r3, [r2, #0]
1000ece0:	3301      	adds	r3, #1
1000ece2:	6013      	str	r3, [r2, #0]
1000ece4:	e005      	b.n	1000ecf2 <db_addATT+0xa2>
1000ece6:	6023      	str	r3, [r4, #0]
1000ece8:	2611      	movs	r6, #17
1000ecea:	2900      	cmp	r1, #0
1000ecec:	d001      	beq.n	1000ecf2 <db_addATT+0xa2>
1000ecee:	1aba      	subs	r2, r7, r2
1000ecf0:	6002      	str	r2, [r0, #0]
1000ecf2:	1c30      	adds	r0, r6, #0
1000ecf4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ecf6:	46c0      	nop			; (mov r8, r8)
1000ecf8:	10016a18 	.word	0x10016a18
1000ecfc:	10016a1c 	.word	0x10016a1c
1000ed00:	10012297 	.word	0x10012297
1000ed04:	10016a20 	.word	0x10016a20

1000ed08 <user_description_define>:
1000ed08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ed0a:	1c05      	adds	r5, r0, #0
1000ed0c:	20cf      	movs	r0, #207	; 0xcf
1000ed0e:	2a00      	cmp	r2, #0
1000ed10:	d01c      	beq.n	1000ed4c <user_description_define+0x44>
1000ed12:	1c14      	adds	r4, r2, #0
1000ed14:	2203      	movs	r2, #3
1000ed16:	1c1e      	adds	r6, r3, #0
1000ed18:	400a      	ands	r2, r1
1000ed1a:	1c0b      	adds	r3, r1, #0
1000ed1c:	3a03      	subs	r2, #3
1000ed1e:	4251      	negs	r1, r2
1000ed20:	4151      	adcs	r1, r2
1000ed22:	075a      	lsls	r2, r3, #29
1000ed24:	0fd2      	lsrs	r2, r2, #31
1000ed26:	430a      	orrs	r2, r1
1000ed28:	03d2      	lsls	r2, r2, #15
1000ed2a:	4f09      	ldr	r7, [pc, #36]	; (1000ed50 <user_description_define+0x48>)
1000ed2c:	1c28      	adds	r0, r5, #0
1000ed2e:	2a00      	cmp	r2, #0
1000ed30:	d003      	beq.n	1000ed3a <user_description_define+0x32>
1000ed32:	1c21      	adds	r1, r4, #0
1000ed34:	1c32      	adds	r2, r6, #0
1000ed36:	47b8      	blx	r7
1000ed38:	e008      	b.n	1000ed4c <user_description_define+0x44>
1000ed3a:	1c11      	adds	r1, r2, #0
1000ed3c:	47b8      	blx	r7
1000ed3e:	2800      	cmp	r0, #0
1000ed40:	d104      	bne.n	1000ed4c <user_description_define+0x44>
1000ed42:	1c28      	adds	r0, r5, #0
1000ed44:	1c31      	adds	r1, r6, #0
1000ed46:	1c22      	adds	r2, r4, #0
1000ed48:	4b02      	ldr	r3, [pc, #8]	; (1000ed54 <user_description_define+0x4c>)
1000ed4a:	4798      	blx	r3
1000ed4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ed4e:	46c0      	nop			; (mov r8, r8)
1000ed50:	1000ec51 	.word	0x1000ec51
1000ed54:	10010fb9 	.word	0x10010fb9

1000ed58 <at_ble_read_authorize_reply.part.1>:
1000ed58:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000ed5a:	4b09      	ldr	r3, [pc, #36]	; (1000ed80 <at_ble_read_authorize_reply.part.1+0x28>)
1000ed5c:	1c05      	adds	r5, r0, #0
1000ed5e:	1c08      	adds	r0, r1, #0
1000ed60:	1c0c      	adds	r4, r1, #0
1000ed62:	4798      	blx	r3
1000ed64:	2800      	cmp	r0, #0
1000ed66:	d009      	beq.n	1000ed7c <at_ble_read_authorize_reply.part.1+0x24>
1000ed68:	6882      	ldr	r2, [r0, #8]
1000ed6a:	2a00      	cmp	r2, #0
1000ed6c:	d006      	beq.n	1000ed7c <at_ble_read_authorize_reply.part.1+0x24>
1000ed6e:	8883      	ldrh	r3, [r0, #4]
1000ed70:	1c29      	adds	r1, r5, #0
1000ed72:	9200      	str	r2, [sp, #0]
1000ed74:	1c20      	adds	r0, r4, #0
1000ed76:	2200      	movs	r2, #0
1000ed78:	4c02      	ldr	r4, [pc, #8]	; (1000ed84 <at_ble_read_authorize_reply.part.1+0x2c>)
1000ed7a:	47a0      	blx	r4
1000ed7c:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000ed7e:	46c0      	nop			; (mov r8, r8)
1000ed80:	1000eaf1 	.word	0x1000eaf1
1000ed84:	10010a51 	.word	0x10010a51

1000ed88 <internal_at_ble_service_define>:
1000ed88:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed8a:	b08b      	sub	sp, #44	; 0x2c
1000ed8c:	9306      	str	r3, [sp, #24]
1000ed8e:	ab10      	add	r3, sp, #64	; 0x40
1000ed90:	9202      	str	r2, [sp, #8]
1000ed92:	cb04      	ldmia	r3!, {r2}
1000ed94:	1c05      	adds	r5, r0, #0
1000ed96:	881b      	ldrh	r3, [r3, #0]
1000ed98:	9105      	str	r1, [sp, #20]
1000ed9a:	9303      	str	r3, [sp, #12]
1000ed9c:	ab12      	add	r3, sp, #72	; 0x48
1000ed9e:	781b      	ldrb	r3, [r3, #0]
1000eda0:	20cf      	movs	r0, #207	; 0xcf
1000eda2:	9304      	str	r3, [sp, #16]
1000eda4:	2d00      	cmp	r5, #0
1000eda6:	d100      	bne.n	1000edaa <internal_at_ble_service_define+0x22>
1000eda8:	e1ca      	b.n	1000f140 <internal_at_ble_service_define+0x3b8>
1000edaa:	2900      	cmp	r1, #0
1000edac:	d100      	bne.n	1000edb0 <internal_at_ble_service_define+0x28>
1000edae:	e1c7      	b.n	1000f140 <internal_at_ble_service_define+0x3b8>
1000edb0:	2a00      	cmp	r2, #0
1000edb2:	d100      	bne.n	1000edb6 <internal_at_ble_service_define+0x2e>
1000edb4:	e1c4      	b.n	1000f140 <internal_at_ble_service_define+0x3b8>
1000edb6:	9b03      	ldr	r3, [sp, #12]
1000edb8:	2b00      	cmp	r3, #0
1000edba:	d100      	bne.n	1000edbe <internal_at_ble_service_define+0x36>
1000edbc:	e1c0      	b.n	1000f140 <internal_at_ble_service_define+0x3b8>
1000edbe:	4bc9      	ldr	r3, [pc, #804]	; (1000f0e4 <internal_at_ble_service_define+0x35c>)
1000edc0:	3004      	adds	r0, #4
1000edc2:	681e      	ldr	r6, [r3, #0]
1000edc4:	2e00      	cmp	r6, #0
1000edc6:	d100      	bne.n	1000edca <internal_at_ble_service_define+0x42>
1000edc8:	e1ba      	b.n	1000f140 <internal_at_ble_service_define+0x3b8>
1000edca:	2400      	movs	r4, #0
1000edcc:	4bc6      	ldr	r3, [pc, #792]	; (1000f0e8 <internal_at_ble_service_define+0x360>)
1000edce:	8034      	strh	r4, [r6, #0]
1000edd0:	881b      	ldrh	r3, [r3, #0]
1000edd2:	1db7      	adds	r7, r6, #6
1000edd4:	1c21      	adds	r1, r4, #0
1000edd6:	2210      	movs	r2, #16
1000edd8:	8073      	strh	r3, [r6, #2]
1000edda:	1c38      	adds	r0, r7, #0
1000eddc:	4bc3      	ldr	r3, [pc, #780]	; (1000f0ec <internal_at_ble_service_define+0x364>)
1000edde:	4798      	blx	r3
1000ede0:	7828      	ldrb	r0, [r5, #0]
1000ede2:	4bc3      	ldr	r3, [pc, #780]	; (1000f0f0 <internal_at_ble_service_define+0x368>)
1000ede4:	4798      	blx	r3
1000ede6:	1c69      	adds	r1, r5, #1
1000ede8:	1c02      	adds	r2, r0, #0
1000edea:	4bc2      	ldr	r3, [pc, #776]	; (1000f0f4 <internal_at_ble_service_define+0x36c>)
1000edec:	1c38      	adds	r0, r7, #0
1000edee:	4798      	blx	r3
1000edf0:	2204      	movs	r2, #4
1000edf2:	782b      	ldrb	r3, [r5, #0]
1000edf4:	9d02      	ldr	r5, [sp, #8]
1000edf6:	011b      	lsls	r3, r3, #4
1000edf8:	4313      	orrs	r3, r2
1000edfa:	9a04      	ldr	r2, [sp, #16]
1000edfc:	7174      	strb	r4, [r6, #5]
1000edfe:	0192      	lsls	r2, r2, #6
1000ee00:	4313      	orrs	r3, r2
1000ee02:	7133      	strb	r3, [r6, #4]
1000ee04:	2316      	movs	r3, #22
1000ee06:	9a06      	ldr	r2, [sp, #24]
1000ee08:	3512      	adds	r5, #18
1000ee0a:	4353      	muls	r3, r2
1000ee0c:	9a02      	ldr	r2, [sp, #8]
1000ee0e:	3312      	adds	r3, #18
1000ee10:	18d7      	adds	r7, r2, r3
1000ee12:	42bd      	cmp	r5, r7
1000ee14:	d00f      	beq.n	1000ee36 <internal_at_ble_service_define+0xae>
1000ee16:	4bb8      	ldr	r3, [pc, #736]	; (1000f0f8 <internal_at_ble_service_define+0x370>)
1000ee18:	8829      	ldrh	r1, [r5, #0]
1000ee1a:	9300      	str	r3, [sp, #0]
1000ee1c:	230e      	movs	r3, #14
1000ee1e:	aa06      	add	r2, sp, #24
1000ee20:	189b      	adds	r3, r3, r2
1000ee22:	9301      	str	r3, [sp, #4]
1000ee24:	4cb5      	ldr	r4, [pc, #724]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000ee26:	1c30      	adds	r0, r6, #0
1000ee28:	2201      	movs	r2, #1
1000ee2a:	2302      	movs	r3, #2
1000ee2c:	47a0      	blx	r4
1000ee2e:	3516      	adds	r5, #22
1000ee30:	1e04      	subs	r4, r0, #0
1000ee32:	d0ee      	beq.n	1000ee12 <internal_at_ble_service_define+0x8a>
1000ee34:	e183      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000ee36:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000ee38:	2300      	movs	r3, #0
1000ee3a:	3714      	adds	r7, #20
1000ee3c:	1c3d      	adds	r5, r7, #0
1000ee3e:	9302      	str	r3, [sp, #8]
1000ee40:	9b02      	ldr	r3, [sp, #8]
1000ee42:	9a03      	ldr	r2, [sp, #12]
1000ee44:	4293      	cmp	r3, r2
1000ee46:	db00      	blt.n	1000ee4a <internal_at_ble_service_define+0xc2>
1000ee48:	e0bf      	b.n	1000efca <internal_at_ble_service_define+0x242>
1000ee4a:	4bad      	ldr	r3, [pc, #692]	; (1000f100 <internal_at_ble_service_define+0x378>)
1000ee4c:	aa06      	add	r2, sp, #24
1000ee4e:	9300      	str	r3, [sp, #0]
1000ee50:	230e      	movs	r3, #14
1000ee52:	189b      	adds	r3, r3, r2
1000ee54:	9301      	str	r3, [sp, #4]
1000ee56:	4ca9      	ldr	r4, [pc, #676]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000ee58:	1c30      	adds	r0, r6, #0
1000ee5a:	2104      	movs	r1, #4
1000ee5c:	2201      	movs	r2, #1
1000ee5e:	2302      	movs	r3, #2
1000ee60:	47a0      	blx	r4
1000ee62:	1e04      	subs	r4, r0, #0
1000ee64:	d000      	beq.n	1000ee68 <internal_at_ble_service_define+0xe0>
1000ee66:	e16a      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000ee68:	1c2b      	adds	r3, r5, #0
1000ee6a:	3b12      	subs	r3, #18
1000ee6c:	7b2c      	ldrb	r4, [r5, #12]
1000ee6e:	781b      	ldrb	r3, [r3, #0]
1000ee70:	1c21      	adds	r1, r4, #0
1000ee72:	1c1a      	adds	r2, r3, #0
1000ee74:	9304      	str	r3, [sp, #16]
1000ee76:	8828      	ldrh	r0, [r5, #0]
1000ee78:	4ba2      	ldr	r3, [pc, #648]	; (1000f104 <internal_at_ble_service_define+0x37c>)
1000ee7a:	4798      	blx	r3
1000ee7c:	2303      	movs	r3, #3
1000ee7e:	4023      	ands	r3, r4
1000ee80:	3b03      	subs	r3, #3
1000ee82:	4259      	negs	r1, r3
1000ee84:	4159      	adcs	r1, r3
1000ee86:	2301      	movs	r3, #1
1000ee88:	08a4      	lsrs	r4, r4, #2
1000ee8a:	401c      	ands	r4, r3
1000ee8c:	430c      	orrs	r4, r1
1000ee8e:	896b      	ldrh	r3, [r5, #10]
1000ee90:	03e4      	lsls	r4, r4, #15
1000ee92:	431c      	orrs	r4, r3
1000ee94:	9007      	str	r0, [sp, #28]
1000ee96:	4b96      	ldr	r3, [pc, #600]	; (1000f0f0 <internal_at_ble_service_define+0x368>)
1000ee98:	9804      	ldr	r0, [sp, #16]
1000ee9a:	4798      	blx	r3
1000ee9c:	1c2a      	adds	r2, r5, #0
1000ee9e:	3a11      	subs	r2, #17
1000eea0:	9200      	str	r2, [sp, #0]
1000eea2:	3a03      	subs	r2, #3
1000eea4:	1c03      	adds	r3, r0, #0
1000eea6:	9201      	str	r2, [sp, #4]
1000eea8:	1c21      	adds	r1, r4, #0
1000eeaa:	1c30      	adds	r0, r6, #0
1000eeac:	4c93      	ldr	r4, [pc, #588]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000eeae:	9a07      	ldr	r2, [sp, #28]
1000eeb0:	47a0      	blx	r4
1000eeb2:	1e04      	subs	r4, r0, #0
1000eeb4:	d000      	beq.n	1000eeb8 <internal_at_ble_service_define+0x130>
1000eeb6:	e142      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000eeb8:	22c0      	movs	r2, #192	; 0xc0
1000eeba:	882b      	ldrh	r3, [r5, #0]
1000eebc:	0052      	lsls	r2, r2, #1
1000eebe:	4213      	tst	r3, r2
1000eec0:	d104      	bne.n	1000eecc <internal_at_ble_service_define+0x144>
1000eec2:	8aab      	ldrh	r3, [r5, #20]
1000eec4:	9304      	str	r3, [sp, #16]
1000eec6:	2b00      	cmp	r3, #0
1000eec8:	d116      	bne.n	1000eef8 <internal_at_ble_service_define+0x170>
1000eeca:	e03a      	b.n	1000ef42 <internal_at_ble_service_define+0x1ba>
1000eecc:	2201      	movs	r2, #1
1000eece:	09d9      	lsrs	r1, r3, #7
1000eed0:	4011      	ands	r1, r2
1000eed2:	05db      	lsls	r3, r3, #23
1000eed4:	d501      	bpl.n	1000eeda <internal_at_ble_service_define+0x152>
1000eed6:	2302      	movs	r3, #2
1000eed8:	4319      	orrs	r1, r3
1000eeda:	4b8b      	ldr	r3, [pc, #556]	; (1000f108 <internal_at_ble_service_define+0x380>)
1000eedc:	aa06      	add	r2, sp, #24
1000eede:	9300      	str	r3, [sp, #0]
1000eee0:	230e      	movs	r3, #14
1000eee2:	189b      	adds	r3, r3, r2
1000eee4:	9301      	str	r3, [sp, #4]
1000eee6:	4c85      	ldr	r4, [pc, #532]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000eee8:	0209      	lsls	r1, r1, #8
1000eeea:	1c30      	adds	r0, r6, #0
1000eeec:	2201      	movs	r2, #1
1000eeee:	2302      	movs	r3, #2
1000eef0:	47a0      	blx	r4
1000eef2:	1e04      	subs	r4, r0, #0
1000eef4:	d0e5      	beq.n	1000eec2 <internal_at_ble_service_define+0x13a>
1000eef6:	e122      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000eef8:	2380      	movs	r3, #128	; 0x80
1000eefa:	882a      	ldrh	r2, [r5, #0]
1000eefc:	7f2c      	ldrb	r4, [r5, #28]
1000eefe:	005b      	lsls	r3, r3, #1
1000ef00:	401a      	ands	r2, r3
1000ef02:	1c20      	adds	r0, r4, #0
1000ef04:	2101      	movs	r1, #1
1000ef06:	2a00      	cmp	r2, #0
1000ef08:	d000      	beq.n	1000ef0c <internal_at_ble_service_define+0x184>
1000ef0a:	1c0a      	adds	r2, r1, #0
1000ef0c:	4b7f      	ldr	r3, [pc, #508]	; (1000f10c <internal_at_ble_service_define+0x384>)
1000ef0e:	4798      	blx	r3
1000ef10:	2203      	movs	r2, #3
1000ef12:	4022      	ands	r2, r4
1000ef14:	3a03      	subs	r2, #3
1000ef16:	4251      	negs	r1, r2
1000ef18:	4151      	adcs	r1, r2
1000ef1a:	4b7d      	ldr	r3, [pc, #500]	; (1000f110 <internal_at_ble_service_define+0x388>)
1000ef1c:	1c0a      	adds	r2, r1, #0
1000ef1e:	9300      	str	r3, [sp, #0]
1000ef20:	1c2b      	adds	r3, r5, #0
1000ef22:	0764      	lsls	r4, r4, #29
1000ef24:	0fe4      	lsrs	r4, r4, #31
1000ef26:	4322      	orrs	r2, r4
1000ef28:	03d2      	lsls	r2, r2, #15
1000ef2a:	4310      	orrs	r0, r2
1000ef2c:	3320      	adds	r3, #32
1000ef2e:	b282      	uxth	r2, r0
1000ef30:	9301      	str	r3, [sp, #4]
1000ef32:	4c72      	ldr	r4, [pc, #456]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000ef34:	1c30      	adds	r0, r6, #0
1000ef36:	9904      	ldr	r1, [sp, #16]
1000ef38:	2302      	movs	r3, #2
1000ef3a:	47a0      	blx	r4
1000ef3c:	1e04      	subs	r4, r0, #0
1000ef3e:	d000      	beq.n	1000ef42 <internal_at_ble_service_define+0x1ba>
1000ef40:	e0fd      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000ef42:	2101      	movs	r1, #1
1000ef44:	882b      	ldrh	r3, [r5, #0]
1000ef46:	420b      	tst	r3, r1
1000ef48:	d011      	beq.n	1000ef6e <internal_at_ble_service_define+0x1e6>
1000ef4a:	7fa8      	ldrb	r0, [r5, #30]
1000ef4c:	4b6f      	ldr	r3, [pc, #444]	; (1000f10c <internal_at_ble_service_define+0x384>)
1000ef4e:	2200      	movs	r2, #0
1000ef50:	4798      	blx	r3
1000ef52:	4b70      	ldr	r3, [pc, #448]	; (1000f114 <internal_at_ble_service_define+0x38c>)
1000ef54:	1c02      	adds	r2, r0, #0
1000ef56:	9300      	str	r3, [sp, #0]
1000ef58:	1c2b      	adds	r3, r5, #0
1000ef5a:	3324      	adds	r3, #36	; 0x24
1000ef5c:	9301      	str	r3, [sp, #4]
1000ef5e:	4c67      	ldr	r4, [pc, #412]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000ef60:	1c30      	adds	r0, r6, #0
1000ef62:	496d      	ldr	r1, [pc, #436]	; (1000f118 <internal_at_ble_service_define+0x390>)
1000ef64:	2302      	movs	r3, #2
1000ef66:	47a0      	blx	r4
1000ef68:	1e04      	subs	r4, r0, #0
1000ef6a:	d000      	beq.n	1000ef6e <internal_at_ble_service_define+0x1e6>
1000ef6c:	e0e7      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000ef6e:	2330      	movs	r3, #48	; 0x30
1000ef70:	882a      	ldrh	r2, [r5, #0]
1000ef72:	421a      	tst	r2, r3
1000ef74:	d012      	beq.n	1000ef9c <internal_at_ble_service_define+0x214>
1000ef76:	2101      	movs	r1, #1
1000ef78:	7f68      	ldrb	r0, [r5, #29]
1000ef7a:	1c0a      	adds	r2, r1, #0
1000ef7c:	4b63      	ldr	r3, [pc, #396]	; (1000f10c <internal_at_ble_service_define+0x384>)
1000ef7e:	4798      	blx	r3
1000ef80:	4b66      	ldr	r3, [pc, #408]	; (1000f11c <internal_at_ble_service_define+0x394>)
1000ef82:	1c02      	adds	r2, r0, #0
1000ef84:	9300      	str	r3, [sp, #0]
1000ef86:	1c2b      	adds	r3, r5, #0
1000ef88:	3322      	adds	r3, #34	; 0x22
1000ef8a:	9301      	str	r3, [sp, #4]
1000ef8c:	4c5b      	ldr	r4, [pc, #364]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000ef8e:	1c30      	adds	r0, r6, #0
1000ef90:	4961      	ldr	r1, [pc, #388]	; (1000f118 <internal_at_ble_service_define+0x390>)
1000ef92:	2302      	movs	r3, #2
1000ef94:	47a0      	blx	r4
1000ef96:	1e04      	subs	r4, r0, #0
1000ef98:	d000      	beq.n	1000ef9c <internal_at_ble_service_define+0x214>
1000ef9a:	e0d0      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000ef9c:	69ab      	ldr	r3, [r5, #24]
1000ef9e:	2b00      	cmp	r3, #0
1000efa0:	d00e      	beq.n	1000efc0 <internal_at_ble_service_define+0x238>
1000efa2:	4b5f      	ldr	r3, [pc, #380]	; (1000f120 <internal_at_ble_service_define+0x398>)
1000efa4:	aa06      	add	r2, sp, #24
1000efa6:	9300      	str	r3, [sp, #0]
1000efa8:	230e      	movs	r3, #14
1000efaa:	189b      	adds	r3, r3, r2
1000efac:	9301      	str	r3, [sp, #4]
1000efae:	4c53      	ldr	r4, [pc, #332]	; (1000f0fc <internal_at_ble_service_define+0x374>)
1000efb0:	1c30      	adds	r0, r6, #0
1000efb2:	2107      	movs	r1, #7
1000efb4:	2201      	movs	r2, #1
1000efb6:	2302      	movs	r3, #2
1000efb8:	47a0      	blx	r4
1000efba:	1e04      	subs	r4, r0, #0
1000efbc:	d000      	beq.n	1000efc0 <internal_at_ble_service_define+0x238>
1000efbe:	e0be      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000efc0:	9b02      	ldr	r3, [sp, #8]
1000efc2:	353c      	adds	r5, #60	; 0x3c
1000efc4:	3301      	adds	r3, #1
1000efc6:	9302      	str	r3, [sp, #8]
1000efc8:	e73a      	b.n	1000ee40 <internal_at_ble_service_define+0xb8>
1000efca:	1c30      	adds	r0, r6, #0
1000efcc:	4b55      	ldr	r3, [pc, #340]	; (1000f124 <internal_at_ble_service_define+0x39c>)
1000efce:	4798      	blx	r3
1000efd0:	1e04      	subs	r4, r0, #0
1000efd2:	d000      	beq.n	1000efd6 <internal_at_ble_service_define+0x24e>
1000efd4:	e0b3      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000efd6:	8833      	ldrh	r3, [r6, #0]
1000efd8:	9a05      	ldr	r2, [sp, #20]
1000efda:	8013      	strh	r3, [r2, #0]
1000efdc:	8836      	ldrh	r6, [r6, #0]
1000efde:	9b06      	ldr	r3, [sp, #24]
1000efe0:	9a03      	ldr	r2, [sp, #12]
1000efe2:	18f6      	adds	r6, r6, r3
1000efe4:	b2b3      	uxth	r3, r6
1000efe6:	9302      	str	r3, [sp, #8]
1000efe8:	233c      	movs	r3, #60	; 0x3c
1000efea:	4353      	muls	r3, r2
1000efec:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000efee:	3314      	adds	r3, #20
1000eff0:	18d3      	adds	r3, r2, r3
1000eff2:	9304      	str	r3, [sp, #16]
1000eff4:	9b04      	ldr	r3, [sp, #16]
1000eff6:	429f      	cmp	r7, r3
1000eff8:	d100      	bne.n	1000effc <internal_at_ble_service_define+0x274>
1000effa:	e0a0      	b.n	1000f13e <internal_at_ble_service_define+0x3b6>
1000effc:	9b02      	ldr	r3, [sp, #8]
1000effe:	1c9d      	adds	r5, r3, #2
1000f000:	1c3b      	adds	r3, r7, #0
1000f002:	b2ad      	uxth	r5, r5
1000f004:	3b14      	subs	r3, #20
1000f006:	801d      	strh	r5, [r3, #0]
1000f008:	9303      	str	r3, [sp, #12]
1000f00a:	893b      	ldrh	r3, [r7, #8]
1000f00c:	2b00      	cmp	r3, #0
1000f00e:	d108      	bne.n	1000f022 <internal_at_ble_service_define+0x29a>
1000f010:	23c0      	movs	r3, #192	; 0xc0
1000f012:	883a      	ldrh	r2, [r7, #0]
1000f014:	005b      	lsls	r3, r3, #1
1000f016:	421a      	tst	r2, r3
1000f018:	d026      	beq.n	1000f068 <internal_at_ble_service_define+0x2e0>
1000f01a:	9e02      	ldr	r6, [sp, #8]
1000f01c:	3603      	adds	r6, #3
1000f01e:	b2b5      	uxth	r5, r6
1000f020:	e022      	b.n	1000f068 <internal_at_ble_service_define+0x2e0>
1000f022:	2103      	movs	r1, #3
1000f024:	7b3b      	ldrb	r3, [r7, #12]
1000f026:	4019      	ands	r1, r3
1000f028:	3903      	subs	r1, #3
1000f02a:	424a      	negs	r2, r1
1000f02c:	414a      	adcs	r2, r1
1000f02e:	0759      	lsls	r1, r3, #29
1000f030:	0fc9      	lsrs	r1, r1, #31
1000f032:	4311      	orrs	r1, r2
1000f034:	03c9      	lsls	r1, r1, #15
1000f036:	897a      	ldrh	r2, [r7, #10]
1000f038:	2900      	cmp	r1, #0
1000f03a:	d007      	beq.n	1000f04c <internal_at_ble_service_define+0x2c4>
1000f03c:	6879      	ldr	r1, [r7, #4]
1000f03e:	2900      	cmp	r1, #0
1000f040:	d100      	bne.n	1000f044 <internal_at_ble_service_define+0x2bc>
1000f042:	4939      	ldr	r1, [pc, #228]	; (1000f128 <internal_at_ble_service_define+0x3a0>)
1000f044:	1c28      	adds	r0, r5, #0
1000f046:	4e39      	ldr	r6, [pc, #228]	; (1000f12c <internal_at_ble_service_define+0x3a4>)
1000f048:	47b0      	blx	r6
1000f04a:	e00a      	b.n	1000f062 <internal_at_ble_service_define+0x2da>
1000f04c:	1c28      	adds	r0, r5, #0
1000f04e:	4e37      	ldr	r6, [pc, #220]	; (1000f12c <internal_at_ble_service_define+0x3a4>)
1000f050:	47b0      	blx	r6
1000f052:	2800      	cmp	r0, #0
1000f054:	d172      	bne.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f056:	9b03      	ldr	r3, [sp, #12]
1000f058:	8939      	ldrh	r1, [r7, #8]
1000f05a:	8818      	ldrh	r0, [r3, #0]
1000f05c:	687a      	ldr	r2, [r7, #4]
1000f05e:	4b34      	ldr	r3, [pc, #208]	; (1000f130 <internal_at_ble_service_define+0x3a8>)
1000f060:	4798      	blx	r3
1000f062:	2800      	cmp	r0, #0
1000f064:	d0d4      	beq.n	1000f010 <internal_at_ble_service_define+0x288>
1000f066:	e069      	b.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f068:	8abb      	ldrh	r3, [r7, #20]
1000f06a:	2b00      	cmp	r3, #0
1000f06c:	d00a      	beq.n	1000f084 <internal_at_ble_service_define+0x2fc>
1000f06e:	3501      	adds	r5, #1
1000f070:	b2ad      	uxth	r5, r5
1000f072:	843d      	strh	r5, [r7, #32]
1000f074:	7f39      	ldrb	r1, [r7, #28]
1000f076:	8afb      	ldrh	r3, [r7, #22]
1000f078:	1c28      	adds	r0, r5, #0
1000f07a:	693a      	ldr	r2, [r7, #16]
1000f07c:	4e2d      	ldr	r6, [pc, #180]	; (1000f134 <internal_at_ble_service_define+0x3ac>)
1000f07e:	47b0      	blx	r6
1000f080:	2800      	cmp	r0, #0
1000f082:	d15b      	bne.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f084:	883b      	ldrh	r3, [r7, #0]
1000f086:	07db      	lsls	r3, r3, #31
1000f088:	d50d      	bpl.n	1000f0a6 <internal_at_ble_service_define+0x31e>
1000f08a:	2200      	movs	r2, #0
1000f08c:	3501      	adds	r5, #1
1000f08e:	b2ad      	uxth	r5, r5
1000f090:	a909      	add	r1, sp, #36	; 0x24
1000f092:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f094:	7fbb      	ldrb	r3, [r7, #30]
1000f096:	1c28      	adds	r0, r5, #0
1000f098:	700a      	strb	r2, [r1, #0]
1000f09a:	704a      	strb	r2, [r1, #1]
1000f09c:	4e23      	ldr	r6, [pc, #140]	; (1000f12c <internal_at_ble_service_define+0x3a4>)
1000f09e:	3202      	adds	r2, #2
1000f0a0:	47b0      	blx	r6
1000f0a2:	2800      	cmp	r0, #0
1000f0a4:	d14a      	bne.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f0a6:	2330      	movs	r3, #48	; 0x30
1000f0a8:	883a      	ldrh	r2, [r7, #0]
1000f0aa:	421a      	tst	r2, r3
1000f0ac:	d00d      	beq.n	1000f0ca <internal_at_ble_service_define+0x342>
1000f0ae:	2200      	movs	r2, #0
1000f0b0:	3501      	adds	r5, #1
1000f0b2:	b2ad      	uxth	r5, r5
1000f0b4:	a909      	add	r1, sp, #36	; 0x24
1000f0b6:	847d      	strh	r5, [r7, #34]	; 0x22
1000f0b8:	7f7b      	ldrb	r3, [r7, #29]
1000f0ba:	1c28      	adds	r0, r5, #0
1000f0bc:	700a      	strb	r2, [r1, #0]
1000f0be:	704a      	strb	r2, [r1, #1]
1000f0c0:	4e1a      	ldr	r6, [pc, #104]	; (1000f12c <internal_at_ble_service_define+0x3a4>)
1000f0c2:	3202      	adds	r2, #2
1000f0c4:	47b0      	blx	r6
1000f0c6:	2800      	cmp	r0, #0
1000f0c8:	d138      	bne.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f0ca:	69b9      	ldr	r1, [r7, #24]
1000f0cc:	2900      	cmp	r1, #0
1000f0ce:	d006      	beq.n	1000f0de <internal_at_ble_service_define+0x356>
1000f0d0:	3501      	adds	r5, #1
1000f0d2:	b2ad      	uxth	r5, r5
1000f0d4:	1c28      	adds	r0, r5, #0
1000f0d6:	4b18      	ldr	r3, [pc, #96]	; (1000f138 <internal_at_ble_service_define+0x3b0>)
1000f0d8:	4798      	blx	r3
1000f0da:	2800      	cmp	r0, #0
1000f0dc:	d12e      	bne.n	1000f13c <internal_at_ble_service_define+0x3b4>
1000f0de:	373c      	adds	r7, #60	; 0x3c
1000f0e0:	9502      	str	r5, [sp, #8]
1000f0e2:	e787      	b.n	1000eff4 <internal_at_ble_service_define+0x26c>
1000f0e4:	10016a28 	.word	0x10016a28
1000f0e8:	10017870 	.word	0x10017870
1000f0ec:	100122a9 	.word	0x100122a9
1000f0f0:	1000eabd 	.word	0x1000eabd
1000f0f4:	10012297 	.word	0x10012297
1000f0f8:	10014e8f 	.word	0x10014e8f
1000f0fc:	10010f49 	.word	0x10010f49
1000f100:	10014e91 	.word	0x10014e91
1000f104:	1000eb89 	.word	0x1000eb89
1000f108:	10014e8d 	.word	0x10014e8d
1000f10c:	1000eb31 	.word	0x1000eb31
1000f110:	10014e89 	.word	0x10014e89
1000f114:	10014e8b 	.word	0x10014e8b
1000f118:	00008002 	.word	0x00008002
1000f11c:	10014e85 	.word	0x10014e85
1000f120:	10014e87 	.word	0x10014e87
1000f124:	10010e3d 	.word	0x10010e3d
1000f128:	10016a14 	.word	0x10016a14
1000f12c:	1000ec51 	.word	0x1000ec51
1000f130:	10010fb9 	.word	0x10010fb9
1000f134:	1000ed09 	.word	0x1000ed09
1000f138:	1000ec25 	.word	0x1000ec25
1000f13c:	1c04      	adds	r4, r0, #0
1000f13e:	1c20      	adds	r0, r4, #0
1000f140:	b00b      	add	sp, #44	; 0x2c
1000f142:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f144 <initi_gatt_server_module>:
1000f144:	2300      	movs	r3, #0
1000f146:	4a07      	ldr	r2, [pc, #28]	; (1000f164 <initi_gatt_server_module+0x20>)
1000f148:	7013      	strb	r3, [r2, #0]
1000f14a:	4a07      	ldr	r2, [pc, #28]	; (1000f168 <initi_gatt_server_module+0x24>)
1000f14c:	6013      	str	r3, [r2, #0]
1000f14e:	4a07      	ldr	r2, [pc, #28]	; (1000f16c <initi_gatt_server_module+0x28>)
1000f150:	6013      	str	r3, [r2, #0]
1000f152:	4a07      	ldr	r2, [pc, #28]	; (1000f170 <initi_gatt_server_module+0x2c>)
1000f154:	6013      	str	r3, [r2, #0]
1000f156:	4a07      	ldr	r2, [pc, #28]	; (1000f174 <initi_gatt_server_module+0x30>)
1000f158:	6013      	str	r3, [r2, #0]
1000f15a:	4a07      	ldr	r2, [pc, #28]	; (1000f178 <initi_gatt_server_module+0x34>)
1000f15c:	6013      	str	r3, [r2, #0]
1000f15e:	4a07      	ldr	r2, [pc, #28]	; (1000f17c <initi_gatt_server_module+0x38>)
1000f160:	6013      	str	r3, [r2, #0]
1000f162:	4770      	bx	lr
1000f164:	10016a14 	.word	0x10016a14
1000f168:	10016a24 	.word	0x10016a24
1000f16c:	10016a20 	.word	0x10016a20
1000f170:	10016a10 	.word	0x10016a10
1000f174:	10016a1c 	.word	0x10016a1c
1000f178:	10016a18 	.word	0x10016a18
1000f17c:	10016a28 	.word	0x10016a28

1000f180 <db_init>:
1000f180:	4b0a      	ldr	r3, [pc, #40]	; (1000f1ac <db_init+0x2c>)
1000f182:	4a0b      	ldr	r2, [pc, #44]	; (1000f1b0 <db_init+0x30>)
1000f184:	6018      	str	r0, [r3, #0]
1000f186:	084b      	lsrs	r3, r1, #1
1000f188:	6013      	str	r3, [r2, #0]
1000f18a:	4a0a      	ldr	r2, [pc, #40]	; (1000f1b4 <db_init+0x34>)
1000f18c:	18c3      	adds	r3, r0, r3
1000f18e:	6013      	str	r3, [r2, #0]
1000f190:	4a09      	ldr	r2, [pc, #36]	; (1000f1b8 <db_init+0x38>)
1000f192:	1841      	adds	r1, r0, r1
1000f194:	6013      	str	r3, [r2, #0]
1000f196:	2303      	movs	r3, #3
1000f198:	2200      	movs	r2, #0
1000f19a:	3103      	adds	r1, #3
1000f19c:	4399      	bics	r1, r3
1000f19e:	4b07      	ldr	r3, [pc, #28]	; (1000f1bc <db_init+0x3c>)
1000f1a0:	3904      	subs	r1, #4
1000f1a2:	6019      	str	r1, [r3, #0]
1000f1a4:	4b06      	ldr	r3, [pc, #24]	; (1000f1c0 <db_init+0x40>)
1000f1a6:	601a      	str	r2, [r3, #0]
1000f1a8:	4770      	bx	lr
1000f1aa:	46c0      	nop			; (mov r8, r8)
1000f1ac:	10016a28 	.word	0x10016a28
1000f1b0:	10016a24 	.word	0x10016a24
1000f1b4:	10016a10 	.word	0x10016a10
1000f1b8:	10016a1c 	.word	0x10016a1c
1000f1bc:	10016a18 	.word	0x10016a18
1000f1c0:	10016a20 	.word	0x10016a20

1000f1c4 <at_ble_primary_service_define>:
1000f1c4:	b530      	push	{r4, r5, lr}
1000f1c6:	b085      	sub	sp, #20
1000f1c8:	ac08      	add	r4, sp, #32
1000f1ca:	cc20      	ldmia	r4!, {r5}
1000f1cc:	8824      	ldrh	r4, [r4, #0]
1000f1ce:	9500      	str	r5, [sp, #0]
1000f1d0:	9401      	str	r4, [sp, #4]
1000f1d2:	2401      	movs	r4, #1
1000f1d4:	9402      	str	r4, [sp, #8]
1000f1d6:	4c02      	ldr	r4, [pc, #8]	; (1000f1e0 <at_ble_primary_service_define+0x1c>)
1000f1d8:	47a0      	blx	r4
1000f1da:	b005      	add	sp, #20
1000f1dc:	bd30      	pop	{r4, r5, pc}
1000f1de:	46c0      	nop			; (mov r8, r8)
1000f1e0:	1000ed89 	.word	0x1000ed89

1000f1e4 <at_ble_characteristic_value_set>:
1000f1e4:	b570      	push	{r4, r5, r6, lr}
1000f1e6:	4b0b      	ldr	r3, [pc, #44]	; (1000f214 <at_ble_characteristic_value_set+0x30>)
1000f1e8:	1c06      	adds	r6, r0, #0
1000f1ea:	1c0c      	adds	r4, r1, #0
1000f1ec:	1c15      	adds	r5, r2, #0
1000f1ee:	4798      	blx	r3
1000f1f0:	2800      	cmp	r0, #0
1000f1f2:	d008      	beq.n	1000f206 <at_ble_characteristic_value_set+0x22>
1000f1f4:	6880      	ldr	r0, [r0, #8]
1000f1f6:	2800      	cmp	r0, #0
1000f1f8:	d005      	beq.n	1000f206 <at_ble_characteristic_value_set+0x22>
1000f1fa:	1c21      	adds	r1, r4, #0
1000f1fc:	1c2a      	adds	r2, r5, #0
1000f1fe:	4b06      	ldr	r3, [pc, #24]	; (1000f218 <at_ble_characteristic_value_set+0x34>)
1000f200:	4798      	blx	r3
1000f202:	2000      	movs	r0, #0
1000f204:	e004      	b.n	1000f210 <at_ble_characteristic_value_set+0x2c>
1000f206:	1c30      	adds	r0, r6, #0
1000f208:	1c29      	adds	r1, r5, #0
1000f20a:	1c22      	adds	r2, r4, #0
1000f20c:	4b03      	ldr	r3, [pc, #12]	; (1000f21c <at_ble_characteristic_value_set+0x38>)
1000f20e:	4798      	blx	r3
1000f210:	bd70      	pop	{r4, r5, r6, pc}
1000f212:	46c0      	nop			; (mov r8, r8)
1000f214:	1000eaf1 	.word	0x1000eaf1
1000f218:	10012297 	.word	0x10012297
1000f21c:	10010fb9 	.word	0x10010fb9

1000f220 <at_ble_characteristic_value_get>:
1000f220:	b570      	push	{r4, r5, r6, lr}
1000f222:	4b0c      	ldr	r3, [pc, #48]	; (1000f254 <at_ble_characteristic_value_get+0x34>)
1000f224:	1c06      	adds	r6, r0, #0
1000f226:	1c0c      	adds	r4, r1, #0
1000f228:	1c15      	adds	r5, r2, #0
1000f22a:	4798      	blx	r3
1000f22c:	2800      	cmp	r0, #0
1000f22e:	d00b      	beq.n	1000f248 <at_ble_characteristic_value_get+0x28>
1000f230:	6883      	ldr	r3, [r0, #8]
1000f232:	2b00      	cmp	r3, #0
1000f234:	d008      	beq.n	1000f248 <at_ble_characteristic_value_get+0x28>
1000f236:	8883      	ldrh	r3, [r0, #4]
1000f238:	802b      	strh	r3, [r5, #0]
1000f23a:	8882      	ldrh	r2, [r0, #4]
1000f23c:	6881      	ldr	r1, [r0, #8]
1000f23e:	4b06      	ldr	r3, [pc, #24]	; (1000f258 <at_ble_characteristic_value_get+0x38>)
1000f240:	1c20      	adds	r0, r4, #0
1000f242:	4798      	blx	r3
1000f244:	2000      	movs	r0, #0
1000f246:	e004      	b.n	1000f252 <at_ble_characteristic_value_get+0x32>
1000f248:	1c30      	adds	r0, r6, #0
1000f24a:	1c29      	adds	r1, r5, #0
1000f24c:	1c22      	adds	r2, r4, #0
1000f24e:	4b03      	ldr	r3, [pc, #12]	; (1000f25c <at_ble_characteristic_value_get+0x3c>)
1000f250:	4798      	blx	r3
1000f252:	bd70      	pop	{r4, r5, r6, pc}
1000f254:	1000eaf1 	.word	0x1000eaf1
1000f258:	10012297 	.word	0x10012297
1000f25c:	10011045 	.word	0x10011045

1000f260 <at_ble_write_authorize_reply>:
1000f260:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f262:	b085      	sub	sp, #20
1000f264:	1c04      	adds	r4, r0, #0
1000f266:	9101      	str	r1, [sp, #4]
1000f268:	2900      	cmp	r1, #0
1000f26a:	d128      	bne.n	1000f2be <at_ble_write_authorize_reply+0x5e>
1000f26c:	8843      	ldrh	r3, [r0, #2]
1000f26e:	1c27      	adds	r7, r4, #0
1000f270:	9300      	str	r3, [sp, #0]
1000f272:	1c18      	adds	r0, r3, #0
1000f274:	4b16      	ldr	r3, [pc, #88]	; (1000f2d0 <at_ble_write_authorize_reply+0x70>)
1000f276:	4798      	blx	r3
1000f278:	3708      	adds	r7, #8
1000f27a:	2800      	cmp	r0, #0
1000f27c:	d009      	beq.n	1000f292 <at_ble_write_authorize_reply+0x32>
1000f27e:	6880      	ldr	r0, [r0, #8]
1000f280:	2800      	cmp	r0, #0
1000f282:	d006      	beq.n	1000f292 <at_ble_write_authorize_reply+0x32>
1000f284:	88a3      	ldrh	r3, [r4, #4]
1000f286:	88e2      	ldrh	r2, [r4, #6]
1000f288:	18c0      	adds	r0, r0, r3
1000f28a:	1c39      	adds	r1, r7, #0
1000f28c:	4b11      	ldr	r3, [pc, #68]	; (1000f2d4 <at_ble_write_authorize_reply+0x74>)
1000f28e:	4798      	blx	r3
1000f290:	e015      	b.n	1000f2be <at_ble_write_authorize_reply+0x5e>
1000f292:	ab02      	add	r3, sp, #8
1000f294:	1d9e      	adds	r6, r3, #6
1000f296:	2300      	movs	r3, #0
1000f298:	4d0f      	ldr	r5, [pc, #60]	; (1000f2d8 <at_ble_write_authorize_reply+0x78>)
1000f29a:	8033      	strh	r3, [r6, #0]
1000f29c:	6829      	ldr	r1, [r5, #0]
1000f29e:	1c32      	adds	r2, r6, #0
1000f2a0:	4b0e      	ldr	r3, [pc, #56]	; (1000f2dc <at_ble_write_authorize_reply+0x7c>)
1000f2a2:	9800      	ldr	r0, [sp, #0]
1000f2a4:	4798      	blx	r3
1000f2a6:	682b      	ldr	r3, [r5, #0]
1000f2a8:	88a0      	ldrh	r0, [r4, #4]
1000f2aa:	88e2      	ldrh	r2, [r4, #6]
1000f2ac:	1818      	adds	r0, r3, r0
1000f2ae:	1c39      	adds	r1, r7, #0
1000f2b0:	4b08      	ldr	r3, [pc, #32]	; (1000f2d4 <at_ble_write_authorize_reply+0x74>)
1000f2b2:	4798      	blx	r3
1000f2b4:	8860      	ldrh	r0, [r4, #2]
1000f2b6:	8832      	ldrh	r2, [r6, #0]
1000f2b8:	6829      	ldr	r1, [r5, #0]
1000f2ba:	4b09      	ldr	r3, [pc, #36]	; (1000f2e0 <at_ble_write_authorize_reply+0x80>)
1000f2bc:	4798      	blx	r3
1000f2be:	8860      	ldrh	r0, [r4, #2]
1000f2c0:	8821      	ldrh	r1, [r4, #0]
1000f2c2:	9a01      	ldr	r2, [sp, #4]
1000f2c4:	4b07      	ldr	r3, [pc, #28]	; (1000f2e4 <at_ble_write_authorize_reply+0x84>)
1000f2c6:	4798      	blx	r3
1000f2c8:	2000      	movs	r0, #0
1000f2ca:	b005      	add	sp, #20
1000f2cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f2ce:	46c0      	nop			; (mov r8, r8)
1000f2d0:	1000eaf1 	.word	0x1000eaf1
1000f2d4:	10012297 	.word	0x10012297
1000f2d8:	10014f94 	.word	0x10014f94
1000f2dc:	1000f221 	.word	0x1000f221
1000f2e0:	1000f1e5 	.word	0x1000f1e5
1000f2e4:	10010abd 	.word	0x10010abd

1000f2e8 <gatts_handle_read_req>:
1000f2e8:	b538      	push	{r3, r4, r5, lr}
1000f2ea:	1c0c      	adds	r4, r1, #0
1000f2ec:	4b07      	ldr	r3, [pc, #28]	; (1000f30c <gatts_handle_read_req+0x24>)
1000f2ee:	4798      	blx	r3
1000f2f0:	8865      	ldrh	r5, [r4, #2]
1000f2f2:	4b07      	ldr	r3, [pc, #28]	; (1000f310 <gatts_handle_read_req+0x28>)
1000f2f4:	1c28      	adds	r0, r5, #0
1000f2f6:	4798      	blx	r3
1000f2f8:	7883      	ldrb	r3, [r0, #2]
1000f2fa:	2026      	movs	r0, #38	; 0x26
1000f2fc:	07db      	lsls	r3, r3, #31
1000f2fe:	d404      	bmi.n	1000f30a <gatts_handle_read_req+0x22>
1000f300:	8820      	ldrh	r0, [r4, #0]
1000f302:	1c29      	adds	r1, r5, #0
1000f304:	4b03      	ldr	r3, [pc, #12]	; (1000f314 <gatts_handle_read_req+0x2c>)
1000f306:	4798      	blx	r3
1000f308:	203b      	movs	r0, #59	; 0x3b
1000f30a:	bd38      	pop	{r3, r4, r5, pc}
1000f30c:	10010a01 	.word	0x10010a01
1000f310:	1000eaf1 	.word	0x1000eaf1
1000f314:	1000ed59 	.word	0x1000ed59

1000f318 <gatts_handle_att_info_req>:
1000f318:	b538      	push	{r3, r4, r5, lr}
1000f31a:	1c0d      	adds	r5, r1, #0
1000f31c:	4b0a      	ldr	r3, [pc, #40]	; (1000f348 <gatts_handle_att_info_req+0x30>)
1000f31e:	1c14      	adds	r4, r2, #0
1000f320:	4798      	blx	r3
1000f322:	882d      	ldrh	r5, [r5, #0]
1000f324:	4b09      	ldr	r3, [pc, #36]	; (1000f34c <gatts_handle_att_info_req+0x34>)
1000f326:	1c28      	adds	r0, r5, #0
1000f328:	4798      	blx	r3
1000f32a:	0a22      	lsrs	r2, r4, #8
1000f32c:	1c03      	adds	r3, r0, #0
1000f32e:	4c08      	ldr	r4, [pc, #32]	; (1000f350 <gatts_handle_att_info_req+0x38>)
1000f330:	b291      	uxth	r1, r2
1000f332:	2800      	cmp	r0, #0
1000f334:	d003      	beq.n	1000f33e <gatts_handle_att_info_req+0x26>
1000f336:	8882      	ldrh	r2, [r0, #4]
1000f338:	2300      	movs	r3, #0
1000f33a:	1c28      	adds	r0, r5, #0
1000f33c:	e001      	b.n	1000f342 <gatts_handle_att_info_req+0x2a>
1000f33e:	1c28      	adds	r0, r5, #0
1000f340:	2201      	movs	r2, #1
1000f342:	47a0      	blx	r4
1000f344:	203b      	movs	r0, #59	; 0x3b
1000f346:	bd38      	pop	{r3, r4, r5, pc}
1000f348:	10010a45 	.word	0x10010a45
1000f34c:	1000eaf1 	.word	0x1000eaf1
1000f350:	10010b01 	.word	0x10010b01

1000f354 <gatts_handle_write_req>:
1000f354:	b510      	push	{r4, lr}
1000f356:	1c14      	adds	r4, r2, #0
1000f358:	4b07      	ldr	r3, [pc, #28]	; (1000f378 <gatts_handle_write_req+0x24>)
1000f35a:	4798      	blx	r3
1000f35c:	4b07      	ldr	r3, [pc, #28]	; (1000f37c <gatts_handle_write_req+0x28>)
1000f35e:	8860      	ldrh	r0, [r4, #2]
1000f360:	4798      	blx	r3
1000f362:	2302      	movs	r3, #2
1000f364:	7881      	ldrb	r1, [r0, #2]
1000f366:	2022      	movs	r0, #34	; 0x22
1000f368:	4019      	ands	r1, r3
1000f36a:	d103      	bne.n	1000f374 <gatts_handle_write_req+0x20>
1000f36c:	1c20      	adds	r0, r4, #0
1000f36e:	4b04      	ldr	r3, [pc, #16]	; (1000f380 <gatts_handle_write_req+0x2c>)
1000f370:	4798      	blx	r3
1000f372:	201f      	movs	r0, #31
1000f374:	bd10      	pop	{r4, pc}
1000f376:	46c0      	nop			; (mov r8, r8)
1000f378:	10010a0d 	.word	0x10010a0d
1000f37c:	1000eaf1 	.word	0x1000eaf1
1000f380:	1000f261 	.word	0x1000f261

1000f384 <at_ble_notification_send>:
1000f384:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f386:	4d17      	ldr	r5, [pc, #92]	; (1000f3e4 <at_ble_notification_send+0x60>)
1000f388:	4c17      	ldr	r4, [pc, #92]	; (1000f3e8 <at_ble_notification_send+0x64>)
1000f38a:	682a      	ldr	r2, [r5, #0]
1000f38c:	44a5      	add	sp, r4
1000f38e:	23d2      	movs	r3, #210	; 0xd2
1000f390:	2a04      	cmp	r2, #4
1000f392:	d822      	bhi.n	1000f3da <at_ble_notification_send+0x56>
1000f394:	1c06      	adds	r6, r0, #0
1000f396:	4b15      	ldr	r3, [pc, #84]	; (1000f3ec <at_ble_notification_send+0x68>)
1000f398:	1c08      	adds	r0, r1, #0
1000f39a:	1c0c      	adds	r4, r1, #0
1000f39c:	4798      	blx	r3
1000f39e:	2800      	cmp	r0, #0
1000f3a0:	d008      	beq.n	1000f3b4 <at_ble_notification_send+0x30>
1000f3a2:	6883      	ldr	r3, [r0, #8]
1000f3a4:	2b00      	cmp	r3, #0
1000f3a6:	d005      	beq.n	1000f3b4 <at_ble_notification_send+0x30>
1000f3a8:	8882      	ldrh	r2, [r0, #4]
1000f3aa:	1c21      	adds	r1, r4, #0
1000f3ac:	9200      	str	r2, [sp, #0]
1000f3ae:	2012      	movs	r0, #18
1000f3b0:	1c32      	adds	r2, r6, #0
1000f3b2:	e00c      	b.n	1000f3ce <at_ble_notification_send+0x4a>
1000f3b4:	270e      	movs	r7, #14
1000f3b6:	446f      	add	r7, sp
1000f3b8:	1c39      	adds	r1, r7, #0
1000f3ba:	aa04      	add	r2, sp, #16
1000f3bc:	4b0c      	ldr	r3, [pc, #48]	; (1000f3f0 <at_ble_notification_send+0x6c>)
1000f3be:	1c20      	adds	r0, r4, #0
1000f3c0:	4798      	blx	r3
1000f3c2:	2012      	movs	r0, #18
1000f3c4:	1c21      	adds	r1, r4, #0
1000f3c6:	1c32      	adds	r2, r6, #0
1000f3c8:	883b      	ldrh	r3, [r7, #0]
1000f3ca:	9300      	str	r3, [sp, #0]
1000f3cc:	ab04      	add	r3, sp, #16
1000f3ce:	4c09      	ldr	r4, [pc, #36]	; (1000f3f4 <at_ble_notification_send+0x70>)
1000f3d0:	47a0      	blx	r4
1000f3d2:	682b      	ldr	r3, [r5, #0]
1000f3d4:	3301      	adds	r3, #1
1000f3d6:	602b      	str	r3, [r5, #0]
1000f3d8:	2300      	movs	r3, #0
1000f3da:	1c18      	adds	r0, r3, #0
1000f3dc:	2385      	movs	r3, #133	; 0x85
1000f3de:	009b      	lsls	r3, r3, #2
1000f3e0:	449d      	add	sp, r3
1000f3e2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f3e4:	10016ab4 	.word	0x10016ab4
1000f3e8:	fffffdec 	.word	0xfffffdec
1000f3ec:	1000eaf1 	.word	0x1000eaf1
1000f3f0:	10011045 	.word	0x10011045
1000f3f4:	10010b49 	.word	0x10010b49

1000f3f8 <init_l2cc_task_module>:
1000f3f8:	220a      	movs	r2, #10
1000f3fa:	4b01      	ldr	r3, [pc, #4]	; (1000f400 <init_l2cc_task_module+0x8>)
1000f3fc:	701a      	strb	r2, [r3, #0]
1000f3fe:	4770      	bx	lr
1000f400:	10014f90 	.word	0x10014f90

1000f404 <l2cc_data_send_rsp_handler>:
1000f404:	b510      	push	{r4, lr}
1000f406:	7802      	ldrb	r2, [r0, #0]
1000f408:	700a      	strb	r2, [r1, #0]
1000f40a:	7883      	ldrb	r3, [r0, #2]
1000f40c:	7844      	ldrb	r4, [r0, #1]
1000f40e:	021b      	lsls	r3, r3, #8
1000f410:	4323      	orrs	r3, r4
1000f412:	804b      	strh	r3, [r1, #2]
1000f414:	7903      	ldrb	r3, [r0, #4]
1000f416:	78c0      	ldrb	r0, [r0, #3]
1000f418:	021b      	lsls	r3, r3, #8
1000f41a:	4303      	orrs	r3, r0
1000f41c:	808b      	strh	r3, [r1, #4]
1000f41e:	2a00      	cmp	r2, #0
1000f420:	d103      	bne.n	1000f42a <l2cc_data_send_rsp_handler+0x26>
1000f422:	4a02      	ldr	r2, [pc, #8]	; (1000f42c <l2cc_data_send_rsp_handler+0x28>)
1000f424:	7813      	ldrb	r3, [r2, #0]
1000f426:	3301      	adds	r3, #1
1000f428:	7013      	strb	r3, [r2, #0]
1000f42a:	bd10      	pop	{r4, pc}
1000f42c:	10014f90 	.word	0x10014f90

1000f430 <l2cc_data_received_handler>:
1000f430:	b508      	push	{r3, lr}
1000f432:	1c03      	adds	r3, r0, #0
1000f434:	7842      	ldrb	r2, [r0, #1]
1000f436:	7800      	ldrb	r0, [r0, #0]
1000f438:	0212      	lsls	r2, r2, #8
1000f43a:	4302      	orrs	r2, r0
1000f43c:	800a      	strh	r2, [r1, #0]
1000f43e:	78da      	ldrb	r2, [r3, #3]
1000f440:	7898      	ldrb	r0, [r3, #2]
1000f442:	0212      	lsls	r2, r2, #8
1000f444:	4302      	orrs	r2, r0
1000f446:	804a      	strh	r2, [r1, #2]
1000f448:	795a      	ldrb	r2, [r3, #5]
1000f44a:	7918      	ldrb	r0, [r3, #4]
1000f44c:	0212      	lsls	r2, r2, #8
1000f44e:	4302      	orrs	r2, r0
1000f450:	808a      	strh	r2, [r1, #4]
1000f452:	1d88      	adds	r0, r1, #6
1000f454:	1d99      	adds	r1, r3, #6
1000f456:	4b01      	ldr	r3, [pc, #4]	; (1000f45c <l2cc_data_received_handler+0x2c>)
1000f458:	4798      	blx	r3
1000f45a:	bd08      	pop	{r3, pc}
1000f45c:	10012297 	.word	0x10012297

1000f460 <at_ble_authenticate>:
1000f460:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f462:	1c0c      	adds	r4, r1, #0
1000f464:	211f      	movs	r1, #31
1000f466:	b08b      	sub	sp, #44	; 0x2c
1000f468:	9307      	str	r3, [sp, #28]
1000f46a:	ab02      	add	r3, sp, #8
1000f46c:	18c9      	adds	r1, r1, r3
1000f46e:	230f      	movs	r3, #15
1000f470:	700b      	strb	r3, [r1, #0]
1000f472:	4b40      	ldr	r3, [pc, #256]	; (1000f574 <at_ble_authenticate+0x114>)
1000f474:	1c05      	adds	r5, r0, #0
1000f476:	1c16      	adds	r6, r2, #0
1000f478:	4798      	blx	r3
1000f47a:	1c07      	adds	r7, r0, #0
1000f47c:	2001      	movs	r0, #1
1000f47e:	2f07      	cmp	r7, #7
1000f480:	d875      	bhi.n	1000f56e <at_ble_authenticate+0x10e>
1000f482:	2c00      	cmp	r4, #0
1000f484:	d113      	bne.n	1000f4ae <at_ble_authenticate+0x4e>
1000f486:	2312      	movs	r3, #18
1000f488:	435f      	muls	r7, r3
1000f48a:	4b3b      	ldr	r3, [pc, #236]	; (1000f578 <at_ble_authenticate+0x118>)
1000f48c:	5cfb      	ldrb	r3, [r7, r3]
1000f48e:	4283      	cmp	r3, r0
1000f490:	d001      	beq.n	1000f496 <at_ble_authenticate+0x36>
1000f492:	20cf      	movs	r0, #207	; 0xcf
1000f494:	e06b      	b.n	1000f56e <at_ble_authenticate+0x10e>
1000f496:	9504      	str	r5, [sp, #16]
1000f498:	9400      	str	r4, [sp, #0]
1000f49a:	9401      	str	r4, [sp, #4]
1000f49c:	9402      	str	r4, [sp, #8]
1000f49e:	9403      	str	r4, [sp, #12]
1000f4a0:	1c20      	adds	r0, r4, #0
1000f4a2:	1c21      	adds	r1, r4, #0
1000f4a4:	1c22      	adds	r2, r4, #0
1000f4a6:	1c23      	adds	r3, r4, #0
1000f4a8:	4d34      	ldr	r5, [pc, #208]	; (1000f57c <at_ble_authenticate+0x11c>)
1000f4aa:	47a8      	blx	r5
1000f4ac:	e05e      	b.n	1000f56c <at_ble_authenticate+0x10c>
1000f4ae:	7922      	ldrb	r2, [r4, #4]
1000f4b0:	2a06      	cmp	r2, #6
1000f4b2:	d9ee      	bls.n	1000f492 <at_ble_authenticate+0x32>
1000f4b4:	7963      	ldrb	r3, [r4, #5]
1000f4b6:	2b10      	cmp	r3, #16
1000f4b8:	d8eb      	bhi.n	1000f492 <at_ble_authenticate+0x32>
1000f4ba:	429a      	cmp	r2, r3
1000f4bc:	d8e9      	bhi.n	1000f492 <at_ble_authenticate+0x32>
1000f4be:	7a23      	ldrb	r3, [r4, #8]
1000f4c0:	2b04      	cmp	r3, #4
1000f4c2:	d8e6      	bhi.n	1000f492 <at_ble_authenticate+0x32>
1000f4c4:	79a3      	ldrb	r3, [r4, #6]
1000f4c6:	2b07      	cmp	r3, #7
1000f4c8:	d8e3      	bhi.n	1000f492 <at_ble_authenticate+0x32>
1000f4ca:	79e3      	ldrb	r3, [r4, #7]
1000f4cc:	2b07      	cmp	r3, #7
1000f4ce:	d8e0      	bhi.n	1000f492 <at_ble_authenticate+0x32>
1000f4d0:	78a3      	ldrb	r3, [r4, #2]
1000f4d2:	2b00      	cmp	r3, #0
1000f4d4:	d006      	beq.n	1000f4e4 <at_ble_authenticate+0x84>
1000f4d6:	2e00      	cmp	r6, #0
1000f4d8:	d0db      	beq.n	1000f492 <at_ble_authenticate+0x32>
1000f4da:	4829      	ldr	r0, [pc, #164]	; (1000f580 <at_ble_authenticate+0x120>)
1000f4dc:	1c31      	adds	r1, r6, #0
1000f4de:	221c      	movs	r2, #28
1000f4e0:	4b28      	ldr	r3, [pc, #160]	; (1000f584 <at_ble_authenticate+0x124>)
1000f4e2:	4798      	blx	r3
1000f4e4:	9b07      	ldr	r3, [sp, #28]
1000f4e6:	2b00      	cmp	r3, #0
1000f4e8:	d005      	beq.n	1000f4f6 <at_ble_authenticate+0x96>
1000f4ea:	4827      	ldr	r0, [pc, #156]	; (1000f588 <at_ble_authenticate+0x128>)
1000f4ec:	1c19      	adds	r1, r3, #0
1000f4ee:	309a      	adds	r0, #154	; 0x9a
1000f4f0:	2210      	movs	r2, #16
1000f4f2:	4b24      	ldr	r3, [pc, #144]	; (1000f584 <at_ble_authenticate+0x124>)
1000f4f4:	4798      	blx	r3
1000f4f6:	7863      	ldrb	r3, [r4, #1]
1000f4f8:	78a2      	ldrb	r2, [r4, #2]
1000f4fa:	009b      	lsls	r3, r3, #2
1000f4fc:	4313      	orrs	r3, r2
1000f4fe:	2212      	movs	r2, #18
1000f500:	4357      	muls	r7, r2
1000f502:	4a1d      	ldr	r2, [pc, #116]	; (1000f578 <at_ble_authenticate+0x118>)
1000f504:	b2db      	uxtb	r3, r3
1000f506:	5cba      	ldrb	r2, [r7, r2]
1000f508:	2a00      	cmp	r2, #0
1000f50a:	d116      	bne.n	1000f53a <at_ble_authenticate+0xda>
1000f50c:	79a0      	ldrb	r0, [r4, #6]
1000f50e:	0742      	lsls	r2, r0, #29
1000f510:	d502      	bpl.n	1000f518 <at_ble_authenticate+0xb8>
1000f512:	9a07      	ldr	r2, [sp, #28]
1000f514:	2a00      	cmp	r2, #0
1000f516:	d0bc      	beq.n	1000f492 <at_ble_authenticate+0x32>
1000f518:	07c2      	lsls	r2, r0, #31
1000f51a:	d501      	bpl.n	1000f520 <at_ble_authenticate+0xc0>
1000f51c:	2e00      	cmp	r6, #0
1000f51e:	d0b8      	beq.n	1000f492 <at_ble_authenticate+0x32>
1000f520:	7966      	ldrb	r6, [r4, #5]
1000f522:	7821      	ldrb	r1, [r4, #0]
1000f524:	78e2      	ldrb	r2, [r4, #3]
1000f526:	9600      	str	r6, [sp, #0]
1000f528:	9001      	str	r0, [sp, #4]
1000f52a:	79e0      	ldrb	r0, [r4, #7]
1000f52c:	9002      	str	r0, [sp, #8]
1000f52e:	7a20      	ldrb	r0, [r4, #8]
1000f530:	4c16      	ldr	r4, [pc, #88]	; (1000f58c <at_ble_authenticate+0x12c>)
1000f532:	9003      	str	r0, [sp, #12]
1000f534:	1c28      	adds	r0, r5, #0
1000f536:	47a0      	blx	r4
1000f538:	e018      	b.n	1000f56c <at_ble_authenticate+0x10c>
1000f53a:	2a01      	cmp	r2, #1
1000f53c:	d1a9      	bne.n	1000f492 <at_ble_authenticate+0x32>
1000f53e:	79e0      	ldrb	r0, [r4, #7]
1000f540:	0742      	lsls	r2, r0, #29
1000f542:	d502      	bpl.n	1000f54a <at_ble_authenticate+0xea>
1000f544:	9a07      	ldr	r2, [sp, #28]
1000f546:	2a00      	cmp	r2, #0
1000f548:	d0a3      	beq.n	1000f492 <at_ble_authenticate+0x32>
1000f54a:	07c2      	lsls	r2, r0, #31
1000f54c:	d501      	bpl.n	1000f552 <at_ble_authenticate+0xf2>
1000f54e:	2e00      	cmp	r6, #0
1000f550:	d09f      	beq.n	1000f492 <at_ble_authenticate+0x32>
1000f552:	7966      	ldrb	r6, [r4, #5]
1000f554:	7821      	ldrb	r1, [r4, #0]
1000f556:	78e2      	ldrb	r2, [r4, #3]
1000f558:	9600      	str	r6, [sp, #0]
1000f55a:	79a6      	ldrb	r6, [r4, #6]
1000f55c:	9002      	str	r0, [sp, #8]
1000f55e:	9601      	str	r6, [sp, #4]
1000f560:	7a20      	ldrb	r0, [r4, #8]
1000f562:	9504      	str	r5, [sp, #16]
1000f564:	9003      	str	r0, [sp, #12]
1000f566:	4c05      	ldr	r4, [pc, #20]	; (1000f57c <at_ble_authenticate+0x11c>)
1000f568:	2001      	movs	r0, #1
1000f56a:	47a0      	blx	r4
1000f56c:	2000      	movs	r0, #0
1000f56e:	b00b      	add	sp, #44	; 0x2c
1000f570:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f572:	46c0      	nop			; (mov r8, r8)
1000f574:	1000f961 	.word	0x1000f961
1000f578:	10017872 	.word	0x10017872
1000f57c:	1000fed1 	.word	0x1000fed1
1000f580:	10017980 	.word	0x10017980
1000f584:	10012297 	.word	0x10012297
1000f588:	10017902 	.word	0x10017902
1000f58c:	1000fcb1 	.word	0x1000fcb1

1000f590 <at_ble_pair_key_reply>:
1000f590:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f592:	b085      	sub	sp, #20
1000f594:	1c05      	adds	r5, r0, #0
1000f596:	1c0c      	adds	r4, r1, #0
1000f598:	1c16      	adds	r6, r2, #0
1000f59a:	2100      	movs	r1, #0
1000f59c:	4668      	mov	r0, sp
1000f59e:	2210      	movs	r2, #16
1000f5a0:	4b18      	ldr	r3, [pc, #96]	; (1000f604 <at_ble_pair_key_reply+0x74>)
1000f5a2:	4798      	blx	r3
1000f5a4:	2101      	movs	r1, #1
1000f5a6:	2e00      	cmp	r6, #0
1000f5a8:	d101      	bne.n	1000f5ae <at_ble_pair_key_reply+0x1e>
1000f5aa:	1c31      	adds	r1, r6, #0
1000f5ac:	466e      	mov	r6, sp
1000f5ae:	2c00      	cmp	r4, #0
1000f5b0:	d116      	bne.n	1000f5e0 <at_ble_pair_key_reply+0x50>
1000f5b2:	2701      	movs	r7, #1
1000f5b4:	1c23      	adds	r3, r4, #0
1000f5b6:	1d70      	adds	r0, r6, #5
1000f5b8:	3e01      	subs	r6, #1
1000f5ba:	7802      	ldrb	r2, [r0, #0]
1000f5bc:	3801      	subs	r0, #1
1000f5be:	3a30      	subs	r2, #48	; 0x30
1000f5c0:	437a      	muls	r2, r7
1000f5c2:	189b      	adds	r3, r3, r2
1000f5c4:	220a      	movs	r2, #10
1000f5c6:	4357      	muls	r7, r2
1000f5c8:	42b0      	cmp	r0, r6
1000f5ca:	d1f6      	bne.n	1000f5ba <at_ble_pair_key_reply+0x2a>
1000f5cc:	466a      	mov	r2, sp
1000f5ce:	4668      	mov	r0, sp
1000f5d0:	7013      	strb	r3, [r2, #0]
1000f5d2:	0a1a      	lsrs	r2, r3, #8
1000f5d4:	7042      	strb	r2, [r0, #1]
1000f5d6:	0c1a      	lsrs	r2, r3, #16
1000f5d8:	0e1b      	lsrs	r3, r3, #24
1000f5da:	7082      	strb	r2, [r0, #2]
1000f5dc:	70c3      	strb	r3, [r0, #3]
1000f5de:	e009      	b.n	1000f5f4 <at_ble_pair_key_reply+0x64>
1000f5e0:	20cf      	movs	r0, #207	; 0xcf
1000f5e2:	2c01      	cmp	r4, #1
1000f5e4:	d10c      	bne.n	1000f600 <at_ble_pair_key_reply+0x70>
1000f5e6:	2300      	movs	r3, #0
1000f5e8:	4668      	mov	r0, sp
1000f5ea:	5cf2      	ldrb	r2, [r6, r3]
1000f5ec:	54c2      	strb	r2, [r0, r3]
1000f5ee:	3301      	adds	r3, #1
1000f5f0:	2b10      	cmp	r3, #16
1000f5f2:	d1f9      	bne.n	1000f5e8 <at_ble_pair_key_reply+0x58>
1000f5f4:	2004      	movs	r0, #4
1000f5f6:	466a      	mov	r2, sp
1000f5f8:	1c2b      	adds	r3, r5, #0
1000f5fa:	4c03      	ldr	r4, [pc, #12]	; (1000f608 <at_ble_pair_key_reply+0x78>)
1000f5fc:	47a0      	blx	r4
1000f5fe:	2000      	movs	r0, #0
1000f600:	b005      	add	sp, #20
1000f602:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f604:	100122a9 	.word	0x100122a9
1000f608:	1000ff4d 	.word	0x1000ff4d

1000f60c <at_ble_send_slave_sec_request>:
1000f60c:	b570      	push	{r4, r5, r6, lr}
1000f60e:	4b0c      	ldr	r3, [pc, #48]	; (1000f640 <at_ble_send_slave_sec_request+0x34>)
1000f610:	1c0e      	adds	r6, r1, #0
1000f612:	2100      	movs	r1, #0
1000f614:	1c05      	adds	r5, r0, #0
1000f616:	1c14      	adds	r4, r2, #0
1000f618:	4798      	blx	r3
1000f61a:	2301      	movs	r3, #1
1000f61c:	2807      	cmp	r0, #7
1000f61e:	d80d      	bhi.n	1000f63c <at_ble_send_slave_sec_request+0x30>
1000f620:	3311      	adds	r3, #17
1000f622:	4358      	muls	r0, r3
1000f624:	4b07      	ldr	r3, [pc, #28]	; (1000f644 <at_ble_send_slave_sec_request+0x38>)
1000f626:	5cc2      	ldrb	r2, [r0, r3]
1000f628:	23e0      	movs	r3, #224	; 0xe0
1000f62a:	2a01      	cmp	r2, #1
1000f62c:	d106      	bne.n	1000f63c <at_ble_send_slave_sec_request+0x30>
1000f62e:	00b1      	lsls	r1, r6, #2
1000f630:	430c      	orrs	r4, r1
1000f632:	4b05      	ldr	r3, [pc, #20]	; (1000f648 <at_ble_send_slave_sec_request+0x3c>)
1000f634:	b2e1      	uxtb	r1, r4
1000f636:	1c28      	adds	r0, r5, #0
1000f638:	4798      	blx	r3
1000f63a:	2300      	movs	r3, #0
1000f63c:	1c18      	adds	r0, r3, #0
1000f63e:	bd70      	pop	{r4, r5, r6, pc}
1000f640:	1000f961 	.word	0x1000f961
1000f644:	10017872 	.word	0x10017872
1000f648:	1000ff9d 	.word	0x1000ff9d

1000f64c <at_ble_encryption_start>:
1000f64c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f64e:	23cf      	movs	r3, #207	; 0xcf
1000f650:	2900      	cmp	r1, #0
1000f652:	d02b      	beq.n	1000f6ac <at_ble_encryption_start+0x60>
1000f654:	2a05      	cmp	r2, #5
1000f656:	d829      	bhi.n	1000f6ac <at_ble_encryption_start+0x60>
1000f658:	2701      	movs	r7, #1
1000f65a:	1c3d      	adds	r5, r7, #0
1000f65c:	2433      	movs	r4, #51	; 0x33
1000f65e:	4095      	lsls	r5, r2
1000f660:	4225      	tst	r5, r4
1000f662:	d023      	beq.n	1000f6ac <at_ble_encryption_start+0x60>
1000f664:	7e8c      	ldrb	r4, [r1, #26]
1000f666:	3c07      	subs	r4, #7
1000f668:	2c09      	cmp	r4, #9
1000f66a:	d81f      	bhi.n	1000f6ac <at_ble_encryption_start+0x60>
1000f66c:	4b10      	ldr	r3, [pc, #64]	; (1000f6b0 <at_ble_encryption_start+0x64>)
1000f66e:	1c0c      	adds	r4, r1, #0
1000f670:	2100      	movs	r1, #0
1000f672:	1c15      	adds	r5, r2, #0
1000f674:	1c06      	adds	r6, r0, #0
1000f676:	4798      	blx	r3
1000f678:	1c3b      	adds	r3, r7, #0
1000f67a:	2807      	cmp	r0, #7
1000f67c:	d816      	bhi.n	1000f6ac <at_ble_encryption_start+0x60>
1000f67e:	2312      	movs	r3, #18
1000f680:	4358      	muls	r0, r3
1000f682:	4b0c      	ldr	r3, [pc, #48]	; (1000f6b4 <at_ble_encryption_start+0x68>)
1000f684:	5cc7      	ldrb	r7, [r0, r3]
1000f686:	23e0      	movs	r3, #224	; 0xe0
1000f688:	2f00      	cmp	r7, #0
1000f68a:	d10f      	bne.n	1000f6ac <at_ble_encryption_start+0x60>
1000f68c:	1c21      	adds	r1, r4, #0
1000f68e:	221c      	movs	r2, #28
1000f690:	4b09      	ldr	r3, [pc, #36]	; (1000f6b8 <at_ble_encryption_start+0x6c>)
1000f692:	480a      	ldr	r0, [pc, #40]	; (1000f6bc <at_ble_encryption_start+0x70>)
1000f694:	4798      	blx	r3
1000f696:	1c23      	adds	r3, r4, #0
1000f698:	7ea1      	ldrb	r1, [r4, #26]
1000f69a:	8a22      	ldrh	r2, [r4, #16]
1000f69c:	3312      	adds	r3, #18
1000f69e:	9100      	str	r1, [sp, #0]
1000f6a0:	9501      	str	r5, [sp, #4]
1000f6a2:	1c21      	adds	r1, r4, #0
1000f6a4:	1c30      	adds	r0, r6, #0
1000f6a6:	4c06      	ldr	r4, [pc, #24]	; (1000f6c0 <at_ble_encryption_start+0x74>)
1000f6a8:	47a0      	blx	r4
1000f6aa:	1c3b      	adds	r3, r7, #0
1000f6ac:	1c18      	adds	r0, r3, #0
1000f6ae:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f6b0:	1000f961 	.word	0x1000f961
1000f6b4:	10017872 	.word	0x10017872
1000f6b8:	10012297 	.word	0x10012297
1000f6bc:	10017980 	.word	0x10017980
1000f6c0:	1000ffdd 	.word	0x1000ffdd

1000f6c4 <at_ble_encryption_request_reply>:
1000f6c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000f6c6:	24cf      	movs	r4, #207	; 0xcf
1000f6c8:	2b00      	cmp	r3, #0
1000f6ca:	d011      	beq.n	1000f6f0 <at_ble_encryption_request_reply+0x2c>
1000f6cc:	2a00      	cmp	r2, #0
1000f6ce:	d00a      	beq.n	1000f6e6 <at_ble_encryption_request_reply+0x22>
1000f6d0:	2905      	cmp	r1, #5
1000f6d2:	d80d      	bhi.n	1000f6f0 <at_ble_encryption_request_reply+0x2c>
1000f6d4:	2501      	movs	r5, #1
1000f6d6:	2633      	movs	r6, #51	; 0x33
1000f6d8:	408d      	lsls	r5, r1
1000f6da:	4235      	tst	r5, r6
1000f6dc:	d008      	beq.n	1000f6f0 <at_ble_encryption_request_reply+0x2c>
1000f6de:	7e9d      	ldrb	r5, [r3, #26]
1000f6e0:	3d07      	subs	r5, #7
1000f6e2:	2d09      	cmp	r5, #9
1000f6e4:	d804      	bhi.n	1000f6f0 <at_ble_encryption_request_reply+0x2c>
1000f6e6:	7e9c      	ldrb	r4, [r3, #26]
1000f6e8:	9400      	str	r4, [sp, #0]
1000f6ea:	4c02      	ldr	r4, [pc, #8]	; (1000f6f4 <at_ble_encryption_request_reply+0x30>)
1000f6ec:	47a0      	blx	r4
1000f6ee:	2400      	movs	r4, #0
1000f6f0:	1c20      	adds	r0, r4, #0
1000f6f2:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000f6f4:	10010099 	.word	0x10010099

1000f6f8 <rx_callback>:
1000f6f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f6fa:	8883      	ldrh	r3, [r0, #4]
1000f6fc:	1c01      	adds	r1, r0, #0
1000f6fe:	9301      	str	r3, [sp, #4]
1000f700:	88c5      	ldrh	r5, [r0, #6]
1000f702:	8806      	ldrh	r6, [r0, #0]
1000f704:	2d00      	cmp	r5, #0
1000f706:	d10f      	bne.n	1000f728 <rx_callback+0x30>
1000f708:	1c19      	adds	r1, r3, #0
1000f70a:	1c30      	adds	r0, r6, #0
1000f70c:	4b19      	ldr	r3, [pc, #100]	; (1000f774 <rx_callback+0x7c>)
1000f70e:	1c2a      	adds	r2, r5, #0
1000f710:	4798      	blx	r3
1000f712:	1e03      	subs	r3, r0, #0
1000f714:	d105      	bne.n	1000f722 <rx_callback+0x2a>
1000f716:	1c30      	adds	r0, r6, #0
1000f718:	9901      	ldr	r1, [sp, #4]
1000f71a:	1c1a      	adds	r2, r3, #0
1000f71c:	4c16      	ldr	r4, [pc, #88]	; (1000f778 <rx_callback+0x80>)
1000f71e:	47a0      	blx	r4
1000f720:	e027      	b.n	1000f772 <rx_callback+0x7a>
1000f722:	4b16      	ldr	r3, [pc, #88]	; (1000f77c <rx_callback+0x84>)
1000f724:	4798      	blx	r3
1000f726:	e024      	b.n	1000f772 <rx_callback+0x7a>
1000f728:	4c15      	ldr	r4, [pc, #84]	; (1000f780 <rx_callback+0x88>)
1000f72a:	4a16      	ldr	r2, [pc, #88]	; (1000f784 <rx_callback+0x8c>)
1000f72c:	6823      	ldr	r3, [r4, #0]
1000f72e:	6812      	ldr	r2, [r2, #0]
1000f730:	18eb      	adds	r3, r5, r3
1000f732:	4293      	cmp	r3, r2
1000f734:	d901      	bls.n	1000f73a <rx_callback+0x42>
1000f736:	2300      	movs	r3, #0
1000f738:	6023      	str	r3, [r4, #0]
1000f73a:	4f13      	ldr	r7, [pc, #76]	; (1000f788 <rx_callback+0x90>)
1000f73c:	6822      	ldr	r2, [r4, #0]
1000f73e:	683b      	ldr	r3, [r7, #0]
1000f740:	3108      	adds	r1, #8
1000f742:	1898      	adds	r0, r3, r2
1000f744:	1c2a      	adds	r2, r5, #0
1000f746:	4b11      	ldr	r3, [pc, #68]	; (1000f78c <rx_callback+0x94>)
1000f748:	4798      	blx	r3
1000f74a:	683b      	ldr	r3, [r7, #0]
1000f74c:	6822      	ldr	r2, [r4, #0]
1000f74e:	1c30      	adds	r0, r6, #0
1000f750:	189a      	adds	r2, r3, r2
1000f752:	9901      	ldr	r1, [sp, #4]
1000f754:	4b07      	ldr	r3, [pc, #28]	; (1000f774 <rx_callback+0x7c>)
1000f756:	4798      	blx	r3
1000f758:	2800      	cmp	r0, #0
1000f75a:	d1e2      	bne.n	1000f722 <rx_callback+0x2a>
1000f75c:	6823      	ldr	r3, [r4, #0]
1000f75e:	683a      	ldr	r2, [r7, #0]
1000f760:	1c30      	adds	r0, r6, #0
1000f762:	18d2      	adds	r2, r2, r3
1000f764:	9901      	ldr	r1, [sp, #4]
1000f766:	1c2b      	adds	r3, r5, #0
1000f768:	4e03      	ldr	r6, [pc, #12]	; (1000f778 <rx_callback+0x80>)
1000f76a:	47b0      	blx	r6
1000f76c:	6823      	ldr	r3, [r4, #0]
1000f76e:	18ed      	adds	r5, r5, r3
1000f770:	6025      	str	r5, [r4, #0]
1000f772:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000f774:	1000dd8d 	.word	0x1000dd8d
1000f778:	1000dd05 	.word	0x1000dd05
1000f77c:	1000d579 	.word	0x1000d579
1000f780:	100179dc 	.word	0x100179dc
1000f784:	10016a30 	.word	0x10016a30
1000f788:	10016a2c 	.word	0x10016a2c
1000f78c:	10012297 	.word	0x10012297

1000f790 <interface_send>:
1000f790:	b508      	push	{r3, lr}
1000f792:	4b02      	ldr	r3, [pc, #8]	; (1000f79c <interface_send+0xc>)
1000f794:	4798      	blx	r3
1000f796:	2000      	movs	r0, #0
1000f798:	bd08      	pop	{r3, pc}
1000f79a:	46c0      	nop			; (mov r8, r8)
1000f79c:	1000d271 	.word	0x1000d271

1000f7a0 <interface_init>:
1000f7a0:	2280      	movs	r2, #128	; 0x80
1000f7a2:	b510      	push	{r4, lr}
1000f7a4:	2100      	movs	r1, #0
1000f7a6:	1c04      	adds	r4, r0, #0
1000f7a8:	0092      	lsls	r2, r2, #2
1000f7aa:	4b08      	ldr	r3, [pc, #32]	; (1000f7cc <interface_init+0x2c>)
1000f7ac:	4808      	ldr	r0, [pc, #32]	; (1000f7d0 <interface_init+0x30>)
1000f7ae:	4798      	blx	r3
1000f7b0:	2200      	movs	r2, #0
1000f7b2:	4b08      	ldr	r3, [pc, #32]	; (1000f7d4 <interface_init+0x34>)
1000f7b4:	601a      	str	r2, [r3, #0]
1000f7b6:	4a08      	ldr	r2, [pc, #32]	; (1000f7d8 <interface_init+0x38>)
1000f7b8:	4b08      	ldr	r3, [pc, #32]	; (1000f7dc <interface_init+0x3c>)
1000f7ba:	601a      	str	r2, [r3, #0]
1000f7bc:	4b08      	ldr	r3, [pc, #32]	; (1000f7e0 <interface_init+0x40>)
1000f7be:	6922      	ldr	r2, [r4, #16]
1000f7c0:	601a      	str	r2, [r3, #0]
1000f7c2:	6962      	ldr	r2, [r4, #20]
1000f7c4:	4b07      	ldr	r3, [pc, #28]	; (1000f7e4 <interface_init+0x44>)
1000f7c6:	601a      	str	r2, [r3, #0]
1000f7c8:	bd10      	pop	{r4, pc}
1000f7ca:	46c0      	nop			; (mov r8, r8)
1000f7cc:	100122a9 	.word	0x100122a9
1000f7d0:	10017be0 	.word	0x10017be0
1000f7d4:	100179dc 	.word	0x100179dc
1000f7d8:	100179e0 	.word	0x100179e0
1000f7dc:	10014f94 	.word	0x10014f94
1000f7e0:	10016a2c 	.word	0x10016a2c
1000f7e4:	10016a30 	.word	0x10016a30

1000f7e8 <platform_cmd_cmpl_signal>:
1000f7e8:	2201      	movs	r2, #1
1000f7ea:	4b01      	ldr	r3, [pc, #4]	; (1000f7f0 <platform_cmd_cmpl_signal+0x8>)
1000f7ec:	601a      	str	r2, [r3, #0]
1000f7ee:	4770      	bx	lr
1000f7f0:	10016a34 	.word	0x10016a34

1000f7f4 <platform_cmd_cmpl_wait>:
1000f7f4:	b510      	push	{r4, lr}
1000f7f6:	1c04      	adds	r4, r0, #0
1000f7f8:	4b07      	ldr	r3, [pc, #28]	; (1000f818 <platform_cmd_cmpl_wait+0x24>)
1000f7fa:	681a      	ldr	r2, [r3, #0]
1000f7fc:	2a01      	cmp	r2, #1
1000f7fe:	d003      	beq.n	1000f808 <platform_cmd_cmpl_wait+0x14>
1000f800:	4b06      	ldr	r3, [pc, #24]	; (1000f81c <platform_cmd_cmpl_wait+0x28>)
1000f802:	2000      	movs	r0, #0
1000f804:	4798      	blx	r3
1000f806:	e7f7      	b.n	1000f7f8 <platform_cmd_cmpl_wait+0x4>
1000f808:	6819      	ldr	r1, [r3, #0]
1000f80a:	2901      	cmp	r1, #1
1000f80c:	d102      	bne.n	1000f814 <platform_cmd_cmpl_wait+0x20>
1000f80e:	2200      	movs	r2, #0
1000f810:	601a      	str	r2, [r3, #0]
1000f812:	e000      	b.n	1000f816 <platform_cmd_cmpl_wait+0x22>
1000f814:	7022      	strb	r2, [r4, #0]
1000f816:	bd10      	pop	{r4, pc}
1000f818:	10016a34 	.word	0x10016a34
1000f81c:	1000d301 	.word	0x1000d301

1000f820 <start_timer>:
1000f820:	4770      	bx	lr

1000f822 <stop_timer>:
1000f822:	4770      	bx	lr

1000f824 <dbg_le_set_bd_addr_req_handler>:
1000f824:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f826:	466b      	mov	r3, sp
1000f828:	1dde      	adds	r6, r3, #7
1000f82a:	2300      	movs	r3, #0
1000f82c:	7033      	strb	r3, [r6, #0]
1000f82e:	230f      	movs	r3, #15
1000f830:	4c13      	ldr	r4, [pc, #76]	; (1000f880 <dbg_le_set_bd_addr_req_handler+0x5c>)
1000f832:	2703      	movs	r7, #3
1000f834:	7023      	strb	r3, [r4, #0]
1000f836:	2300      	movs	r3, #0
1000f838:	70e3      	strb	r3, [r4, #3]
1000f83a:	4b12      	ldr	r3, [pc, #72]	; (1000f884 <dbg_le_set_bd_addr_req_handler+0x60>)
1000f83c:	1c01      	adds	r1, r0, #0
1000f83e:	881a      	ldrh	r2, [r3, #0]
1000f840:	881b      	ldrh	r3, [r3, #0]
1000f842:	7122      	strb	r2, [r4, #4]
1000f844:	0a1b      	lsrs	r3, r3, #8
1000f846:	2206      	movs	r2, #6
1000f848:	7163      	strb	r3, [r4, #5]
1000f84a:	480f      	ldr	r0, [pc, #60]	; (1000f888 <dbg_le_set_bd_addr_req_handler+0x64>)
1000f84c:	4b0f      	ldr	r3, [pc, #60]	; (1000f88c <dbg_le_set_bd_addr_req_handler+0x68>)
1000f84e:	7067      	strb	r7, [r4, #1]
1000f850:	70a7      	strb	r7, [r4, #2]
1000f852:	4798      	blx	r3
1000f854:	4d0e      	ldr	r5, [pc, #56]	; (1000f890 <dbg_le_set_bd_addr_req_handler+0x6c>)
1000f856:	4b0f      	ldr	r3, [pc, #60]	; (1000f894 <dbg_le_set_bd_addr_req_handler+0x70>)
1000f858:	210e      	movs	r1, #14
1000f85a:	802b      	strh	r3, [r5, #0]
1000f85c:	2306      	movs	r3, #6
1000f85e:	71a3      	strb	r3, [r4, #6]
1000f860:	2300      	movs	r3, #0
1000f862:	1c20      	adds	r0, r4, #0
1000f864:	71e3      	strb	r3, [r4, #7]
1000f866:	4b0c      	ldr	r3, [pc, #48]	; (1000f898 <dbg_le_set_bd_addr_req_handler+0x74>)
1000f868:	80af      	strh	r7, [r5, #4]
1000f86a:	4798      	blx	r3
1000f86c:	1c30      	adds	r0, r6, #0
1000f86e:	4b0b      	ldr	r3, [pc, #44]	; (1000f89c <dbg_le_set_bd_addr_req_handler+0x78>)
1000f870:	4798      	blx	r3
1000f872:	7833      	ldrb	r3, [r6, #0]
1000f874:	20e2      	movs	r0, #226	; 0xe2
1000f876:	2b00      	cmp	r3, #0
1000f878:	d101      	bne.n	1000f87e <dbg_le_set_bd_addr_req_handler+0x5a>
1000f87a:	68ab      	ldr	r3, [r5, #8]
1000f87c:	7818      	ldrb	r0, [r3, #0]
1000f87e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f880:	10017be0 	.word	0x10017be0
1000f884:	10017870 	.word	0x10017870
1000f888:	10017be8 	.word	0x10017be8
1000f88c:	10012297 	.word	0x10012297
1000f890:	10017864 	.word	0x10017864
1000f894:	00000329 	.word	0x00000329
1000f898:	1000f791 	.word	0x1000f791
1000f89c:	1000f7f5 	.word	0x1000f7f5

1000f8a0 <gapc_get_dev_info_cfm.constprop.1>:
1000f8a0:	b538      	push	{r3, r4, r5, lr}
1000f8a2:	230b      	movs	r3, #11
1000f8a4:	4c27      	ldr	r4, [pc, #156]	; (1000f944 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000f8a6:	7023      	strb	r3, [r4, #0]
1000f8a8:	3303      	adds	r3, #3
1000f8aa:	7063      	strb	r3, [r4, #1]
1000f8ac:	3329      	adds	r3, #41	; 0x29
1000f8ae:	70a3      	strb	r3, [r4, #2]
1000f8b0:	4b25      	ldr	r3, [pc, #148]	; (1000f948 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000f8b2:	70e1      	strb	r1, [r4, #3]
1000f8b4:	881a      	ldrh	r2, [r3, #0]
1000f8b6:	881b      	ldrh	r3, [r3, #0]
1000f8b8:	7122      	strb	r2, [r4, #4]
1000f8ba:	0a1b      	lsrs	r3, r3, #8
1000f8bc:	7163      	strb	r3, [r4, #5]
1000f8be:	2300      	movs	r3, #0
1000f8c0:	7220      	strb	r0, [r4, #8]
1000f8c2:	7263      	strb	r3, [r4, #9]
1000f8c4:	2801      	cmp	r0, #1
1000f8c6:	d02b      	beq.n	1000f920 <gapc_get_dev_info_cfm.constprop.1+0x80>
1000f8c8:	4298      	cmp	r0, r3
1000f8ca:	d01b      	beq.n	1000f904 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000f8cc:	2802      	cmp	r0, #2
1000f8ce:	d12f      	bne.n	1000f930 <gapc_get_dev_info_cfm.constprop.1+0x90>
1000f8d0:	4b1e      	ldr	r3, [pc, #120]	; (1000f94c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f8d2:	2112      	movs	r1, #18
1000f8d4:	1c1a      	adds	r2, r3, #0
1000f8d6:	32ce      	adds	r2, #206	; 0xce
1000f8d8:	8812      	ldrh	r2, [r2, #0]
1000f8da:	72a2      	strb	r2, [r4, #10]
1000f8dc:	0a12      	lsrs	r2, r2, #8
1000f8de:	72e2      	strb	r2, [r4, #11]
1000f8e0:	1c1a      	adds	r2, r3, #0
1000f8e2:	32d0      	adds	r2, #208	; 0xd0
1000f8e4:	8812      	ldrh	r2, [r2, #0]
1000f8e6:	7322      	strb	r2, [r4, #12]
1000f8e8:	0a12      	lsrs	r2, r2, #8
1000f8ea:	7362      	strb	r2, [r4, #13]
1000f8ec:	1c1a      	adds	r2, r3, #0
1000f8ee:	32d2      	adds	r2, #210	; 0xd2
1000f8f0:	8812      	ldrh	r2, [r2, #0]
1000f8f2:	33d4      	adds	r3, #212	; 0xd4
1000f8f4:	73a2      	strb	r2, [r4, #14]
1000f8f6:	0a12      	lsrs	r2, r2, #8
1000f8f8:	73e2      	strb	r2, [r4, #15]
1000f8fa:	881b      	ldrh	r3, [r3, #0]
1000f8fc:	7423      	strb	r3, [r4, #16]
1000f8fe:	0a1b      	lsrs	r3, r3, #8
1000f900:	7463      	strb	r3, [r4, #17]
1000f902:	e016      	b.n	1000f932 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f904:	4b11      	ldr	r3, [pc, #68]	; (1000f94c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f906:	4912      	ldr	r1, [pc, #72]	; (1000f950 <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000f908:	33aa      	adds	r3, #170	; 0xaa
1000f90a:	881d      	ldrh	r5, [r3, #0]
1000f90c:	4811      	ldr	r0, [pc, #68]	; (1000f954 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000f90e:	0a2b      	lsrs	r3, r5, #8
1000f910:	72a5      	strb	r5, [r4, #10]
1000f912:	72e3      	strb	r3, [r4, #11]
1000f914:	1c2a      	adds	r2, r5, #0
1000f916:	4b10      	ldr	r3, [pc, #64]	; (1000f958 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000f918:	350c      	adds	r5, #12
1000f91a:	4798      	blx	r3
1000f91c:	b2a9      	uxth	r1, r5
1000f91e:	e008      	b.n	1000f932 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f920:	4b0a      	ldr	r3, [pc, #40]	; (1000f94c <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000f922:	210c      	movs	r1, #12
1000f924:	33cc      	adds	r3, #204	; 0xcc
1000f926:	881b      	ldrh	r3, [r3, #0]
1000f928:	72a3      	strb	r3, [r4, #10]
1000f92a:	0a1b      	lsrs	r3, r3, #8
1000f92c:	72e3      	strb	r3, [r4, #11]
1000f92e:	e000      	b.n	1000f932 <gapc_get_dev_info_cfm.constprop.1+0x92>
1000f930:	210a      	movs	r1, #10
1000f932:	1c0b      	adds	r3, r1, #0
1000f934:	3b08      	subs	r3, #8
1000f936:	71a3      	strb	r3, [r4, #6]
1000f938:	121b      	asrs	r3, r3, #8
1000f93a:	71e3      	strb	r3, [r4, #7]
1000f93c:	1c20      	adds	r0, r4, #0
1000f93e:	4b07      	ldr	r3, [pc, #28]	; (1000f95c <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000f940:	4798      	blx	r3
1000f942:	bd38      	pop	{r3, r4, r5, pc}
1000f944:	10017be0 	.word	0x10017be0
1000f948:	10017870 	.word	0x10017870
1000f94c:	10017902 	.word	0x10017902
1000f950:	100179ae 	.word	0x100179ae
1000f954:	10017bec 	.word	0x10017bec
1000f958:	10012297 	.word	0x10012297
1000f95c:	1000f791 	.word	0x1000f791

1000f960 <check_ConnData_idx_role>:
1000f960:	4b0c      	ldr	r3, [pc, #48]	; (1000f994 <check_ConnData_idx_role+0x34>)
1000f962:	b570      	push	{r4, r5, r6, lr}
1000f964:	1c04      	adds	r4, r0, #0
1000f966:	2008      	movs	r0, #8
1000f968:	429c      	cmp	r4, r3
1000f96a:	d011      	beq.n	1000f990 <check_ConnData_idx_role+0x30>
1000f96c:	2300      	movs	r3, #0
1000f96e:	2212      	movs	r2, #18
1000f970:	435a      	muls	r2, r3
1000f972:	4d09      	ldr	r5, [pc, #36]	; (1000f998 <check_ConnData_idx_role+0x38>)
1000f974:	b2d8      	uxtb	r0, r3
1000f976:	1956      	adds	r6, r2, r5
1000f978:	8976      	ldrh	r6, [r6, #10]
1000f97a:	42a6      	cmp	r6, r4
1000f97c:	d104      	bne.n	1000f988 <check_ConnData_idx_role+0x28>
1000f97e:	2900      	cmp	r1, #0
1000f980:	d006      	beq.n	1000f990 <check_ConnData_idx_role+0x30>
1000f982:	5d53      	ldrb	r3, [r2, r5]
1000f984:	700b      	strb	r3, [r1, #0]
1000f986:	e003      	b.n	1000f990 <check_ConnData_idx_role+0x30>
1000f988:	3301      	adds	r3, #1
1000f98a:	2b08      	cmp	r3, #8
1000f98c:	d1ef      	bne.n	1000f96e <check_ConnData_idx_role+0xe>
1000f98e:	1c18      	adds	r0, r3, #0
1000f990:	bd70      	pop	{r4, r5, r6, pc}
1000f992:	46c0      	nop			; (mov r8, r8)
1000f994:	0000ffff 	.word	0x0000ffff
1000f998:	10017872 	.word	0x10017872

1000f99c <check_ConnData_emptyEntry>:
1000f99c:	2300      	movs	r3, #0
1000f99e:	2212      	movs	r2, #18
1000f9a0:	435a      	muls	r2, r3
1000f9a2:	4906      	ldr	r1, [pc, #24]	; (1000f9bc <check_ConnData_emptyEntry+0x20>)
1000f9a4:	b2d8      	uxtb	r0, r3
1000f9a6:	1852      	adds	r2, r2, r1
1000f9a8:	8951      	ldrh	r1, [r2, #10]
1000f9aa:	4a05      	ldr	r2, [pc, #20]	; (1000f9c0 <check_ConnData_emptyEntry+0x24>)
1000f9ac:	4291      	cmp	r1, r2
1000f9ae:	d003      	beq.n	1000f9b8 <check_ConnData_emptyEntry+0x1c>
1000f9b0:	3301      	adds	r3, #1
1000f9b2:	2b08      	cmp	r3, #8
1000f9b4:	d1f3      	bne.n	1000f99e <check_ConnData_emptyEntry+0x2>
1000f9b6:	1c18      	adds	r0, r3, #0
1000f9b8:	4770      	bx	lr
1000f9ba:	46c0      	nop			; (mov r8, r8)
1000f9bc:	10017872 	.word	0x10017872
1000f9c0:	0000ffff 	.word	0x0000ffff

1000f9c4 <gapc_cmp_evt>:
1000f9c4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f9c6:	780b      	ldrb	r3, [r1, #0]
1000f9c8:	1c05      	adds	r5, r0, #0
1000f9ca:	1e58      	subs	r0, r3, #1
1000f9cc:	784e      	ldrb	r6, [r1, #1]
1000f9ce:	280f      	cmp	r0, #15
1000f9d0:	d85a      	bhi.n	1000fa88 <gapc_cmp_evt+0xc4>
1000f9d2:	1c14      	adds	r4, r2, #0
1000f9d4:	f001 fba4 	bl	10011120 <__gnu_thumb1_case_uqi>
1000f9d8:	5858440a 	.word	0x5858440a
1000f9dc:	4b584444 	.word	0x4b584444
1000f9e0:	0825122d 	.word	0x0825122d
1000f9e4:	3e395858 	.word	0x3e395858
1000f9e8:	203b      	movs	r0, #59	; 0x3b
1000f9ea:	e04e      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000f9ec:	203b      	movs	r0, #59	; 0x3b
1000f9ee:	2e00      	cmp	r6, #0
1000f9f0:	d04b      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000f9f2:	0a2d      	lsrs	r5, r5, #8
1000f9f4:	8015      	strh	r5, [r2, #0]
1000f9f6:	7096      	strb	r6, [r2, #2]
1000f9f8:	3835      	subs	r0, #53	; 0x35
1000f9fa:	e046      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000f9fc:	466b      	mov	r3, sp
1000f9fe:	1ddf      	adds	r7, r3, #7
1000fa00:	2301      	movs	r3, #1
1000fa02:	0a2d      	lsrs	r5, r5, #8
1000fa04:	703b      	strb	r3, [r7, #0]
1000fa06:	1c28      	adds	r0, r5, #0
1000fa08:	1c39      	adds	r1, r7, #0
1000fa0a:	4b20      	ldr	r3, [pc, #128]	; (1000fa8c <gapc_cmp_evt+0xc8>)
1000fa0c:	4798      	blx	r3
1000fa0e:	2807      	cmp	r0, #7
1000fa10:	d803      	bhi.n	1000fa1a <gapc_cmp_evt+0x56>
1000fa12:	783b      	ldrb	r3, [r7, #0]
1000fa14:	203b      	movs	r0, #59	; 0x3b
1000fa16:	2b00      	cmp	r3, #0
1000fa18:	d037      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa1a:	8065      	strh	r5, [r4, #2]
1000fa1c:	7126      	strb	r6, [r4, #4]
1000fa1e:	2009      	movs	r0, #9
1000fa20:	e033      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa22:	203b      	movs	r0, #59	; 0x3b
1000fa24:	2e00      	cmp	r6, #0
1000fa26:	d030      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa28:	0a2d      	lsrs	r5, r5, #8
1000fa2a:	8015      	strh	r5, [r2, #0]
1000fa2c:	7096      	strb	r6, [r2, #2]
1000fa2e:	382d      	subs	r0, #45	; 0x2d
1000fa30:	e02b      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa32:	203b      	movs	r0, #59	; 0x3b
1000fa34:	2e00      	cmp	r6, #0
1000fa36:	d028      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa38:	2300      	movs	r3, #0
1000fa3a:	0a2d      	lsrs	r5, r5, #8
1000fa3c:	8015      	strh	r5, [r2, #0]
1000fa3e:	7096      	strb	r6, [r2, #2]
1000fa40:	8093      	strh	r3, [r2, #4]
1000fa42:	80d3      	strh	r3, [r2, #6]
1000fa44:	8113      	strh	r3, [r2, #8]
1000fa46:	3834      	subs	r0, #52	; 0x34
1000fa48:	e01f      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa4a:	203b      	movs	r0, #59	; 0x3b
1000fa4c:	2e00      	cmp	r6, #0
1000fa4e:	d01c      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa50:	7216      	strb	r6, [r2, #8]
1000fa52:	e003      	b.n	1000fa5c <gapc_cmp_evt+0x98>
1000fa54:	203b      	movs	r0, #59	; 0x3b
1000fa56:	2e00      	cmp	r6, #0
1000fa58:	d017      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa5a:	7116      	strb	r6, [r2, #4]
1000fa5c:	3812      	subs	r0, #18
1000fa5e:	e014      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa60:	203b      	movs	r0, #59	; 0x3b
1000fa62:	2e00      	cmp	r6, #0
1000fa64:	d011      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa66:	7093      	strb	r3, [r2, #2]
1000fa68:	70d6      	strb	r6, [r2, #3]
1000fa6a:	382a      	subs	r0, #42	; 0x2a
1000fa6c:	e00d      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa6e:	203b      	movs	r0, #59	; 0x3b
1000fa70:	2e00      	cmp	r6, #0
1000fa72:	d00a      	beq.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa74:	0a2d      	lsrs	r5, r5, #8
1000fa76:	7016      	strb	r6, [r2, #0]
1000fa78:	8055      	strh	r5, [r2, #2]
1000fa7a:	1d10      	adds	r0, r2, #4
1000fa7c:	2100      	movs	r1, #0
1000fa7e:	2205      	movs	r2, #5
1000fa80:	4b03      	ldr	r3, [pc, #12]	; (1000fa90 <gapc_cmp_evt+0xcc>)
1000fa82:	4798      	blx	r3
1000fa84:	2012      	movs	r0, #18
1000fa86:	e000      	b.n	1000fa8a <gapc_cmp_evt+0xc6>
1000fa88:	2000      	movs	r0, #0
1000fa8a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fa8c:	1000f961 	.word	0x1000f961
1000fa90:	100122a9 	.word	0x100122a9

1000fa94 <gapc_connection_cfm_handler>:
1000fa94:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa96:	b085      	sub	sp, #20
1000fa98:	1c1d      	adds	r5, r3, #0
1000fa9a:	ab0a      	add	r3, sp, #40	; 0x28
1000fa9c:	781b      	ldrb	r3, [r3, #0]
1000fa9e:	9201      	str	r2, [sp, #4]
1000faa0:	9302      	str	r3, [sp, #8]
1000faa2:	ab0b      	add	r3, sp, #44	; 0x2c
1000faa4:	781b      	ldrb	r3, [r3, #0]
1000faa6:	1c07      	adds	r7, r0, #0
1000faa8:	9303      	str	r3, [sp, #12]
1000faaa:	ab0c      	add	r3, sp, #48	; 0x30
1000faac:	881a      	ldrh	r2, [r3, #0]
1000faae:	2302      	movs	r3, #2
1000fab0:	1c0e      	adds	r6, r1, #0
1000fab2:	4c23      	ldr	r4, [pc, #140]	; (1000fb40 <gapc_connection_cfm_handler+0xac>)
1000fab4:	1c39      	adds	r1, r7, #0
1000fab6:	7023      	strb	r3, [r4, #0]
1000fab8:	330c      	adds	r3, #12
1000faba:	7063      	strb	r3, [r4, #1]
1000fabc:	70a3      	strb	r3, [r4, #2]
1000fabe:	4b21      	ldr	r3, [pc, #132]	; (1000fb44 <gapc_connection_cfm_handler+0xb0>)
1000fac0:	70e2      	strb	r2, [r4, #3]
1000fac2:	881a      	ldrh	r2, [r3, #0]
1000fac4:	881b      	ldrh	r3, [r3, #0]
1000fac6:	7122      	strb	r2, [r4, #4]
1000fac8:	0a1b      	lsrs	r3, r3, #8
1000faca:	4f1f      	ldr	r7, [pc, #124]	; (1000fb48 <gapc_connection_cfm_handler+0xb4>)
1000facc:	2210      	movs	r2, #16
1000face:	481f      	ldr	r0, [pc, #124]	; (1000fb4c <gapc_connection_cfm_handler+0xb8>)
1000fad0:	7163      	strb	r3, [r4, #5]
1000fad2:	47b8      	blx	r7
1000fad4:	0a33      	lsrs	r3, r6, #8
1000fad6:	7626      	strb	r6, [r4, #24]
1000fad8:	7663      	strb	r3, [r4, #25]
1000fada:	9901      	ldr	r1, [sp, #4]
1000fadc:	0c33      	lsrs	r3, r6, #16
1000fade:	2210      	movs	r2, #16
1000fae0:	0e36      	lsrs	r6, r6, #24
1000fae2:	481b      	ldr	r0, [pc, #108]	; (1000fb50 <gapc_connection_cfm_handler+0xbc>)
1000fae4:	76a3      	strb	r3, [r4, #26]
1000fae6:	76e6      	strb	r6, [r4, #27]
1000fae8:	47b8      	blx	r7
1000faea:	1c23      	adds	r3, r4, #0
1000faec:	332c      	adds	r3, #44	; 0x2c
1000faee:	701d      	strb	r5, [r3, #0]
1000faf0:	1c23      	adds	r3, r4, #0
1000faf2:	0a2a      	lsrs	r2, r5, #8
1000faf4:	332d      	adds	r3, #45	; 0x2d
1000faf6:	701a      	strb	r2, [r3, #0]
1000faf8:	1c23      	adds	r3, r4, #0
1000fafa:	0c2a      	lsrs	r2, r5, #16
1000fafc:	332e      	adds	r3, #46	; 0x2e
1000fafe:	701a      	strb	r2, [r3, #0]
1000fb00:	1c23      	adds	r3, r4, #0
1000fb02:	0e2d      	lsrs	r5, r5, #24
1000fb04:	332f      	adds	r3, #47	; 0x2f
1000fb06:	466a      	mov	r2, sp
1000fb08:	701d      	strb	r5, [r3, #0]
1000fb0a:	1c23      	adds	r3, r4, #0
1000fb0c:	7a12      	ldrb	r2, [r2, #8]
1000fb0e:	3330      	adds	r3, #48	; 0x30
1000fb10:	701a      	strb	r2, [r3, #0]
1000fb12:	1c23      	adds	r3, r4, #0
1000fb14:	2500      	movs	r5, #0
1000fb16:	3331      	adds	r3, #49	; 0x31
1000fb18:	466a      	mov	r2, sp
1000fb1a:	701d      	strb	r5, [r3, #0]
1000fb1c:	1c23      	adds	r3, r4, #0
1000fb1e:	7b12      	ldrb	r2, [r2, #12]
1000fb20:	3332      	adds	r3, #50	; 0x32
1000fb22:	701a      	strb	r2, [r3, #0]
1000fb24:	1c23      	adds	r3, r4, #0
1000fb26:	3333      	adds	r3, #51	; 0x33
1000fb28:	701d      	strb	r5, [r3, #0]
1000fb2a:	232c      	movs	r3, #44	; 0x2c
1000fb2c:	1c20      	adds	r0, r4, #0
1000fb2e:	71a3      	strb	r3, [r4, #6]
1000fb30:	2134      	movs	r1, #52	; 0x34
1000fb32:	4b08      	ldr	r3, [pc, #32]	; (1000fb54 <gapc_connection_cfm_handler+0xc0>)
1000fb34:	71e5      	strb	r5, [r4, #7]
1000fb36:	4798      	blx	r3
1000fb38:	1c28      	adds	r0, r5, #0
1000fb3a:	b005      	add	sp, #20
1000fb3c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb3e:	46c0      	nop			; (mov r8, r8)
1000fb40:	10017be0 	.word	0x10017be0
1000fb44:	10017870 	.word	0x10017870
1000fb48:	10012297 	.word	0x10012297
1000fb4c:	10017be8 	.word	0x10017be8
1000fb50:	10017bfc 	.word	0x10017bfc
1000fb54:	1000f791 	.word	0x1000f791

1000fb58 <gapc_con_req_ind>:
1000fb58:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb5a:	7845      	ldrb	r5, [r0, #1]
1000fb5c:	7803      	ldrb	r3, [r0, #0]
1000fb5e:	4c30      	ldr	r4, [pc, #192]	; (1000fc20 <gapc_con_req_ind+0xc8>)
1000fb60:	022d      	lsls	r5, r5, #8
1000fb62:	431d      	orrs	r5, r3
1000fb64:	85a5      	strh	r5, [r4, #44]	; 0x2c
1000fb66:	78c3      	ldrb	r3, [r0, #3]
1000fb68:	7882      	ldrb	r2, [r0, #2]
1000fb6a:	b08b      	sub	sp, #44	; 0x2c
1000fb6c:	021b      	lsls	r3, r3, #8
1000fb6e:	431a      	orrs	r2, r3
1000fb70:	466b      	mov	r3, sp
1000fb72:	9205      	str	r2, [sp, #20]
1000fb74:	8a9b      	ldrh	r3, [r3, #20]
1000fb76:	2120      	movs	r1, #32
1000fb78:	85e3      	strh	r3, [r4, #46]	; 0x2e
1000fb7a:	7943      	ldrb	r3, [r0, #5]
1000fb7c:	7902      	ldrb	r2, [r0, #4]
1000fb7e:	021b      	lsls	r3, r3, #8
1000fb80:	431a      	orrs	r2, r3
1000fb82:	466b      	mov	r3, sp
1000fb84:	9206      	str	r2, [sp, #24]
1000fb86:	8b1b      	ldrh	r3, [r3, #24]
1000fb88:	1c06      	adds	r6, r0, #0
1000fb8a:	8623      	strh	r3, [r4, #48]	; 0x30
1000fb8c:	79c3      	ldrb	r3, [r0, #7]
1000fb8e:	7982      	ldrb	r2, [r0, #6]
1000fb90:	021b      	lsls	r3, r3, #8
1000fb92:	431a      	orrs	r2, r3
1000fb94:	466b      	mov	r3, sp
1000fb96:	9207      	str	r2, [sp, #28]
1000fb98:	466a      	mov	r2, sp
1000fb9a:	8b9b      	ldrh	r3, [r3, #28]
1000fb9c:	1852      	adds	r2, r2, r1
1000fb9e:	8663      	strh	r3, [r4, #50]	; 0x32
1000fba0:	7a43      	ldrb	r3, [r0, #9]
1000fba2:	1c01      	adds	r1, r0, #0
1000fba4:	9308      	str	r3, [sp, #32]
1000fba6:	1c23      	adds	r3, r4, #0
1000fba8:	7812      	ldrb	r2, [r2, #0]
1000fbaa:	3377      	adds	r3, #119	; 0x77
1000fbac:	3478      	adds	r4, #120	; 0x78
1000fbae:	701a      	strb	r2, [r3, #0]
1000fbb0:	310a      	adds	r1, #10
1000fbb2:	2206      	movs	r2, #6
1000fbb4:	4b1b      	ldr	r3, [pc, #108]	; (1000fc24 <gapc_con_req_ind+0xcc>)
1000fbb6:	1c20      	adds	r0, r4, #0
1000fbb8:	4798      	blx	r3
1000fbba:	7c33      	ldrb	r3, [r6, #16]
1000fbbc:	9309      	str	r3, [sp, #36]	; 0x24
1000fbbe:	4b1a      	ldr	r3, [pc, #104]	; (1000fc28 <gapc_con_req_ind+0xd0>)
1000fbc0:	4798      	blx	r3
1000fbc2:	4e1a      	ldr	r6, [pc, #104]	; (1000fc2c <gapc_con_req_ind+0xd4>)
1000fbc4:	1e07      	subs	r7, r0, #0
1000fbc6:	2f07      	cmp	r7, #7
1000fbc8:	d81b      	bhi.n	1000fc02 <gapc_con_req_ind+0xaa>
1000fbca:	2312      	movs	r3, #18
1000fbcc:	4343      	muls	r3, r0
1000fbce:	18f0      	adds	r0, r6, r3
1000fbd0:	8145      	strh	r5, [r0, #10]
1000fbd2:	4669      	mov	r1, sp
1000fbd4:	2524      	movs	r5, #36	; 0x24
1000fbd6:	1949      	adds	r1, r1, r5
1000fbd8:	7809      	ldrb	r1, [r1, #0]
1000fbda:	2206      	movs	r2, #6
1000fbdc:	54f1      	strb	r1, [r6, r3]
1000fbde:	2120      	movs	r1, #32
1000fbe0:	466b      	mov	r3, sp
1000fbe2:	185b      	adds	r3, r3, r1
1000fbe4:	781b      	ldrb	r3, [r3, #0]
1000fbe6:	1c21      	adds	r1, r4, #0
1000fbe8:	7043      	strb	r3, [r0, #1]
1000fbea:	466b      	mov	r3, sp
1000fbec:	8a9b      	ldrh	r3, [r3, #20]
1000fbee:	3002      	adds	r0, #2
1000fbf0:	8143      	strh	r3, [r0, #10]
1000fbf2:	466b      	mov	r3, sp
1000fbf4:	8b1b      	ldrh	r3, [r3, #24]
1000fbf6:	8183      	strh	r3, [r0, #12]
1000fbf8:	466b      	mov	r3, sp
1000fbfa:	8b9b      	ldrh	r3, [r3, #28]
1000fbfc:	81c3      	strh	r3, [r0, #14]
1000fbfe:	4b09      	ldr	r3, [pc, #36]	; (1000fc24 <gapc_con_req_ind+0xcc>)
1000fc00:	4798      	blx	r3
1000fc02:	2112      	movs	r1, #18
1000fc04:	2300      	movs	r3, #0
1000fc06:	434f      	muls	r7, r1
1000fc08:	9300      	str	r3, [sp, #0]
1000fc0a:	9301      	str	r3, [sp, #4]
1000fc0c:	19f6      	adds	r6, r6, r7
1000fc0e:	8971      	ldrh	r1, [r6, #10]
1000fc10:	4a07      	ldr	r2, [pc, #28]	; (1000fc30 <gapc_con_req_ind+0xd8>)
1000fc12:	9102      	str	r1, [sp, #8]
1000fc14:	1c10      	adds	r0, r2, #0
1000fc16:	1c19      	adds	r1, r3, #0
1000fc18:	4c06      	ldr	r4, [pc, #24]	; (1000fc34 <gapc_con_req_ind+0xdc>)
1000fc1a:	47a0      	blx	r4
1000fc1c:	b00b      	add	sp, #44	; 0x2c
1000fc1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc20:	10017902 	.word	0x10017902
1000fc24:	10012297 	.word	0x10012297
1000fc28:	1000f99d 	.word	0x1000f99d
1000fc2c:	10017872 	.word	0x10017872
1000fc30:	10016a38 	.word	0x10016a38
1000fc34:	1000fa95 	.word	0x1000fa95

1000fc38 <gapc_disconnect_cmd_handler>:
1000fc38:	2204      	movs	r2, #4
1000fc3a:	b510      	push	{r4, lr}
1000fc3c:	4b0c      	ldr	r3, [pc, #48]	; (1000fc70 <gapc_disconnect_cmd_handler+0x38>)
1000fc3e:	2400      	movs	r4, #0
1000fc40:	701a      	strb	r2, [r3, #0]
1000fc42:	320a      	adds	r2, #10
1000fc44:	705a      	strb	r2, [r3, #1]
1000fc46:	709a      	strb	r2, [r3, #2]
1000fc48:	4a0a      	ldr	r2, [pc, #40]	; (1000fc74 <gapc_disconnect_cmd_handler+0x3c>)
1000fc4a:	70d9      	strb	r1, [r3, #3]
1000fc4c:	8811      	ldrh	r1, [r2, #0]
1000fc4e:	8812      	ldrh	r2, [r2, #0]
1000fc50:	7119      	strb	r1, [r3, #4]
1000fc52:	0a12      	lsrs	r2, r2, #8
1000fc54:	715a      	strb	r2, [r3, #5]
1000fc56:	2201      	movs	r2, #1
1000fc58:	721a      	strb	r2, [r3, #8]
1000fc5a:	1892      	adds	r2, r2, r2
1000fc5c:	7258      	strb	r0, [r3, #9]
1000fc5e:	719a      	strb	r2, [r3, #6]
1000fc60:	71dc      	strb	r4, [r3, #7]
1000fc62:	1c18      	adds	r0, r3, #0
1000fc64:	210a      	movs	r1, #10
1000fc66:	4b04      	ldr	r3, [pc, #16]	; (1000fc78 <gapc_disconnect_cmd_handler+0x40>)
1000fc68:	4798      	blx	r3
1000fc6a:	1c20      	adds	r0, r4, #0
1000fc6c:	bd10      	pop	{r4, pc}
1000fc6e:	46c0      	nop			; (mov r8, r8)
1000fc70:	10017be0 	.word	0x10017be0
1000fc74:	10017870 	.word	0x10017870
1000fc78:	1000f791 	.word	0x1000f791

1000fc7c <gapc_disconnect_ind>:
1000fc7c:	1c02      	adds	r2, r0, #0
1000fc7e:	b508      	push	{r3, lr}
1000fc80:	7843      	ldrb	r3, [r0, #1]
1000fc82:	7800      	ldrb	r0, [r0, #0]
1000fc84:	021b      	lsls	r3, r3, #8
1000fc86:	4318      	orrs	r0, r3
1000fc88:	8008      	strh	r0, [r1, #0]
1000fc8a:	7893      	ldrb	r3, [r2, #2]
1000fc8c:	708b      	strb	r3, [r1, #2]
1000fc8e:	2100      	movs	r1, #0
1000fc90:	4b05      	ldr	r3, [pc, #20]	; (1000fca8 <gapc_disconnect_ind+0x2c>)
1000fc92:	4798      	blx	r3
1000fc94:	2807      	cmp	r0, #7
1000fc96:	d806      	bhi.n	1000fca6 <gapc_disconnect_ind+0x2a>
1000fc98:	2312      	movs	r3, #18
1000fc9a:	4358      	muls	r0, r3
1000fc9c:	4b03      	ldr	r3, [pc, #12]	; (1000fcac <gapc_disconnect_ind+0x30>)
1000fc9e:	1818      	adds	r0, r3, r0
1000fca0:	2301      	movs	r3, #1
1000fca2:	425b      	negs	r3, r3
1000fca4:	8143      	strh	r3, [r0, #10]
1000fca6:	bd08      	pop	{r3, pc}
1000fca8:	1000f961 	.word	0x1000f961
1000fcac:	10017872 	.word	0x10017872

1000fcb0 <gapc_bond_cmd_handler>:
1000fcb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fcb2:	9300      	str	r3, [sp, #0]
1000fcb4:	2312      	movs	r3, #18
1000fcb6:	1c04      	adds	r4, r0, #0
1000fcb8:	a808      	add	r0, sp, #32
1000fcba:	7807      	ldrb	r7, [r0, #0]
1000fcbc:	a809      	add	r0, sp, #36	; 0x24
1000fcbe:	7806      	ldrb	r6, [r0, #0]
1000fcc0:	a80a      	add	r0, sp, #40	; 0x28
1000fcc2:	7805      	ldrb	r5, [r0, #0]
1000fcc4:	a80b      	add	r0, sp, #44	; 0x2c
1000fcc6:	7800      	ldrb	r0, [r0, #0]
1000fcc8:	9001      	str	r0, [sp, #4]
1000fcca:	4810      	ldr	r0, [pc, #64]	; (1000fd0c <gapc_bond_cmd_handler+0x5c>)
1000fccc:	7003      	strb	r3, [r0, #0]
1000fcce:	230e      	movs	r3, #14
1000fcd0:	70c4      	strb	r4, [r0, #3]
1000fcd2:	4c0f      	ldr	r4, [pc, #60]	; (1000fd10 <gapc_bond_cmd_handler+0x60>)
1000fcd4:	7043      	strb	r3, [r0, #1]
1000fcd6:	7083      	strb	r3, [r0, #2]
1000fcd8:	8823      	ldrh	r3, [r4, #0]
1000fcda:	8824      	ldrh	r4, [r4, #0]
1000fcdc:	7103      	strb	r3, [r0, #4]
1000fcde:	466b      	mov	r3, sp
1000fce0:	781b      	ldrb	r3, [r3, #0]
1000fce2:	0a24      	lsrs	r4, r4, #8
1000fce4:	72c3      	strb	r3, [r0, #11]
1000fce6:	466b      	mov	r3, sp
1000fce8:	791b      	ldrb	r3, [r3, #4]
1000fcea:	7144      	strb	r4, [r0, #5]
1000fcec:	73c3      	strb	r3, [r0, #15]
1000fcee:	2308      	movs	r3, #8
1000fcf0:	7183      	strb	r3, [r0, #6]
1000fcf2:	2300      	movs	r3, #0
1000fcf4:	240a      	movs	r4, #10
1000fcf6:	7241      	strb	r1, [r0, #9]
1000fcf8:	71c3      	strb	r3, [r0, #7]
1000fcfa:	2110      	movs	r1, #16
1000fcfc:	4b05      	ldr	r3, [pc, #20]	; (1000fd14 <gapc_bond_cmd_handler+0x64>)
1000fcfe:	7307      	strb	r7, [r0, #12]
1000fd00:	7346      	strb	r6, [r0, #13]
1000fd02:	7385      	strb	r5, [r0, #14]
1000fd04:	7204      	strb	r4, [r0, #8]
1000fd06:	7282      	strb	r2, [r0, #10]
1000fd08:	4798      	blx	r3
1000fd0a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fd0c:	10017be0 	.word	0x10017be0
1000fd10:	10017870 	.word	0x10017870
1000fd14:	1000f791 	.word	0x1000f791

1000fd18 <gapc_bond_ind>:
1000fd18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000fd1a:	780e      	ldrb	r6, [r1, #0]
1000fd1c:	1c03      	adds	r3, r0, #0
1000fd1e:	1eb0      	subs	r0, r6, #2
1000fd20:	2805      	cmp	r0, #5
1000fd22:	d85d      	bhi.n	1000fde0 <gapc_bond_ind+0xc8>
1000fd24:	1c15      	adds	r5, r2, #0
1000fd26:	1c0c      	adds	r4, r1, #0
1000fd28:	f001 f9fa 	bl	10011120 <__gnu_thumb1_case_uqi>
1000fd2c:	2f5a030d 	.word	0x2f5a030d
1000fd30:	4740      	.short	0x4740
1000fd32:	2009      	movs	r0, #9
1000fd34:	2a00      	cmp	r2, #0
1000fd36:	d054      	beq.n	1000fde2 <gapc_bond_ind+0xca>
1000fd38:	0a1b      	lsrs	r3, r3, #8
1000fd3a:	8053      	strh	r3, [r2, #2]
1000fd3c:	788b      	ldrb	r3, [r1, #2]
1000fd3e:	4829      	ldr	r0, [pc, #164]	; (1000fde4 <gapc_bond_ind+0xcc>)
1000fd40:	7113      	strb	r3, [r2, #4]
1000fd42:	2100      	movs	r1, #0
1000fd44:	e01c      	b.n	1000fd80 <gapc_bond_ind+0x68>
1000fd46:	2009      	movs	r0, #9
1000fd48:	2a00      	cmp	r2, #0
1000fd4a:	d04a      	beq.n	1000fde2 <gapc_bond_ind+0xca>
1000fd4c:	4c25      	ldr	r4, [pc, #148]	; (1000fde4 <gapc_bond_ind+0xcc>)
1000fd4e:	0a1b      	lsrs	r3, r3, #8
1000fd50:	8053      	strh	r3, [r2, #2]
1000fd52:	788b      	ldrb	r3, [r1, #2]
1000fd54:	2700      	movs	r7, #0
1000fd56:	1c10      	adds	r0, r2, #0
1000fd58:	1c21      	adds	r1, r4, #0
1000fd5a:	7013      	strb	r3, [r2, #0]
1000fd5c:	4e22      	ldr	r6, [pc, #136]	; (1000fde8 <gapc_bond_ind+0xd0>)
1000fd5e:	7117      	strb	r7, [r2, #4]
1000fd60:	312e      	adds	r1, #46	; 0x2e
1000fd62:	2217      	movs	r2, #23
1000fd64:	3032      	adds	r0, #50	; 0x32
1000fd66:	47b0      	blx	r6
1000fd68:	1c28      	adds	r0, r5, #0
1000fd6a:	1c21      	adds	r1, r4, #0
1000fd6c:	2210      	movs	r2, #16
1000fd6e:	311e      	adds	r1, #30
1000fd70:	3022      	adds	r0, #34	; 0x22
1000fd72:	47b0      	blx	r6
1000fd74:	1ca1      	adds	r1, r4, #2
1000fd76:	1da8      	adds	r0, r5, #6
1000fd78:	221c      	movs	r2, #28
1000fd7a:	47b0      	blx	r6
1000fd7c:	1c20      	adds	r0, r4, #0
1000fd7e:	1c39      	adds	r1, r7, #0
1000fd80:	2246      	movs	r2, #70	; 0x46
1000fd82:	4b1a      	ldr	r3, [pc, #104]	; (1000fdec <gapc_bond_ind+0xd4>)
1000fd84:	4798      	blx	r3
1000fd86:	2009      	movs	r0, #9
1000fd88:	e02b      	b.n	1000fde2 <gapc_bond_ind+0xca>
1000fd8a:	4d16      	ldr	r5, [pc, #88]	; (1000fde4 <gapc_bond_ind+0xcc>)
1000fd8c:	3102      	adds	r1, #2
1000fd8e:	1c28      	adds	r0, r5, #0
1000fd90:	2210      	movs	r2, #16
1000fd92:	4e15      	ldr	r6, [pc, #84]	; (1000fde8 <gapc_bond_ind+0xd0>)
1000fd94:	302e      	adds	r0, #46	; 0x2e
1000fd96:	47b0      	blx	r6
1000fd98:	1c28      	adds	r0, r5, #0
1000fd9a:	1c21      	adds	r1, r4, #0
1000fd9c:	303f      	adds	r0, #63	; 0x3f
1000fd9e:	3112      	adds	r1, #18
1000fda0:	2206      	movs	r2, #6
1000fda2:	47b0      	blx	r6
1000fda4:	7e23      	ldrb	r3, [r4, #24]
1000fda6:	353e      	adds	r5, #62	; 0x3e
1000fda8:	702b      	strb	r3, [r5, #0]
1000fdaa:	e019      	b.n	1000fde0 <gapc_bond_ind+0xc8>
1000fdac:	480d      	ldr	r0, [pc, #52]	; (1000fde4 <gapc_bond_ind+0xcc>)
1000fdae:	3102      	adds	r1, #2
1000fdb0:	2210      	movs	r2, #16
1000fdb2:	4b0d      	ldr	r3, [pc, #52]	; (1000fde8 <gapc_bond_ind+0xd0>)
1000fdb4:	301e      	adds	r0, #30
1000fdb6:	4798      	blx	r3
1000fdb8:	e012      	b.n	1000fde0 <gapc_bond_ind+0xc8>
1000fdba:	4d0a      	ldr	r5, [pc, #40]	; (1000fde4 <gapc_bond_ind+0xcc>)
1000fdbc:	3102      	adds	r1, #2
1000fdbe:	2210      	movs	r2, #16
1000fdc0:	4e09      	ldr	r6, [pc, #36]	; (1000fde8 <gapc_bond_ind+0xd0>)
1000fdc2:	1ca8      	adds	r0, r5, #2
1000fdc4:	47b0      	blx	r6
1000fdc6:	1c28      	adds	r0, r5, #0
1000fdc8:	1c21      	adds	r1, r4, #0
1000fdca:	7ce3      	ldrb	r3, [r4, #19]
1000fdcc:	7ca2      	ldrb	r2, [r4, #18]
1000fdce:	021b      	lsls	r3, r3, #8
1000fdd0:	4313      	orrs	r3, r2
1000fdd2:	3014      	adds	r0, #20
1000fdd4:	3114      	adds	r1, #20
1000fdd6:	2208      	movs	r2, #8
1000fdd8:	826b      	strh	r3, [r5, #18]
1000fdda:	47b0      	blx	r6
1000fddc:	7f23      	ldrb	r3, [r4, #28]
1000fdde:	772b      	strb	r3, [r5, #28]
1000fde0:	2000      	movs	r0, #0
1000fde2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000fde4:	10016a68 	.word	0x10016a68
1000fde8:	10012297 	.word	0x10012297
1000fdec:	100122a9 	.word	0x100122a9

1000fdf0 <gapc_bond_req_ind>:
1000fdf0:	b570      	push	{r4, r5, r6, lr}
1000fdf2:	780c      	ldrb	r4, [r1, #0]
1000fdf4:	1c03      	adds	r3, r0, #0
1000fdf6:	7849      	ldrb	r1, [r1, #1]
1000fdf8:	2c07      	cmp	r4, #7
1000fdfa:	d85c      	bhi.n	1000feb6 <gapc_bond_req_ind+0xc6>
1000fdfc:	1c20      	adds	r0, r4, #0
1000fdfe:	f001 f98f 	bl	10011120 <__gnu_thumb1_case_uqi>
1000fe02:	5a04      	.short	0x5a04
1000fe04:	5a0b5a5a 	.word	0x5a0b5a5a
1000fe08:	1f1f      	.short	0x1f1f
1000fe0a:	200a      	movs	r0, #10
1000fe0c:	2a00      	cmp	r2, #0
1000fe0e:	d053      	beq.n	1000feb8 <gapc_bond_req_ind+0xc8>
1000fe10:	0a1b      	lsrs	r3, r3, #8
1000fe12:	8013      	strh	r3, [r2, #0]
1000fe14:	7091      	strb	r1, [r2, #2]
1000fe16:	e04f      	b.n	1000feb8 <gapc_bond_req_ind+0xc8>
1000fe18:	2a00      	cmp	r2, #0
1000fe1a:	d00b      	beq.n	1000fe34 <gapc_bond_req_ind+0x44>
1000fe1c:	0a1b      	lsrs	r3, r3, #8
1000fe1e:	8013      	strh	r3, [r2, #0]
1000fe20:	2900      	cmp	r1, #0
1000fe22:	d102      	bne.n	1000fe2a <gapc_bond_req_ind+0x3a>
1000fe24:	2301      	movs	r3, #1
1000fe26:	7093      	strb	r3, [r2, #2]
1000fe28:	e004      	b.n	1000fe34 <gapc_bond_req_ind+0x44>
1000fe2a:	2300      	movs	r3, #0
1000fe2c:	7093      	strb	r3, [r2, #2]
1000fe2e:	2902      	cmp	r1, #2
1000fe30:	d102      	bne.n	1000fe38 <gapc_bond_req_ind+0x48>
1000fe32:	70d3      	strb	r3, [r2, #3]
1000fe34:	200c      	movs	r0, #12
1000fe36:	e03f      	b.n	1000feb8 <gapc_bond_req_ind+0xc8>
1000fe38:	2901      	cmp	r1, #1
1000fe3a:	d1fb      	bne.n	1000fe34 <gapc_bond_req_ind+0x44>
1000fe3c:	70d1      	strb	r1, [r2, #3]
1000fe3e:	e7f9      	b.n	1000fe34 <gapc_bond_req_ind+0x44>
1000fe40:	2214      	movs	r2, #20
1000fe42:	481e      	ldr	r0, [pc, #120]	; (1000febc <gapc_bond_req_ind+0xcc>)
1000fe44:	0a1b      	lsrs	r3, r3, #8
1000fe46:	70c3      	strb	r3, [r0, #3]
1000fe48:	4b1d      	ldr	r3, [pc, #116]	; (1000fec0 <gapc_bond_req_ind+0xd0>)
1000fe4a:	7002      	strb	r2, [r0, #0]
1000fe4c:	3a06      	subs	r2, #6
1000fe4e:	7042      	strb	r2, [r0, #1]
1000fe50:	7082      	strb	r2, [r0, #2]
1000fe52:	881a      	ldrh	r2, [r3, #0]
1000fe54:	881b      	ldrh	r3, [r3, #0]
1000fe56:	4e1b      	ldr	r6, [pc, #108]	; (1000fec4 <gapc_bond_req_ind+0xd4>)
1000fe58:	0a1b      	lsrs	r3, r3, #8
1000fe5a:	7143      	strb	r3, [r0, #5]
1000fe5c:	2301      	movs	r3, #1
1000fe5e:	7102      	strb	r2, [r0, #4]
1000fe60:	7204      	strb	r4, [r0, #8]
1000fe62:	7243      	strb	r3, [r0, #9]
1000fe64:	1c05      	adds	r5, r0, #0
1000fe66:	1c31      	adds	r1, r6, #0
1000fe68:	300a      	adds	r0, #10
1000fe6a:	2c07      	cmp	r4, #7
1000fe6c:	d116      	bne.n	1000fe9c <gapc_bond_req_ind+0xac>
1000fe6e:	317e      	adds	r1, #126	; 0x7e
1000fe70:	2210      	movs	r2, #16
1000fe72:	4c15      	ldr	r4, [pc, #84]	; (1000fec8 <gapc_bond_req_ind+0xd8>)
1000fe74:	47a0      	blx	r4
1000fe76:	1c33      	adds	r3, r6, #0
1000fe78:	1c31      	adds	r1, r6, #0
1000fe7a:	1c28      	adds	r0, r5, #0
1000fe7c:	338e      	adds	r3, #142	; 0x8e
1000fe7e:	881b      	ldrh	r3, [r3, #0]
1000fe80:	3190      	adds	r1, #144	; 0x90
1000fe82:	76ab      	strb	r3, [r5, #26]
1000fe84:	2208      	movs	r2, #8
1000fe86:	0a1b      	lsrs	r3, r3, #8
1000fe88:	301c      	adds	r0, #28
1000fe8a:	76eb      	strb	r3, [r5, #27]
1000fe8c:	47a0      	blx	r4
1000fe8e:	1c31      	adds	r1, r6, #0
1000fe90:	3198      	adds	r1, #152	; 0x98
1000fe92:	780a      	ldrb	r2, [r1, #0]
1000fe94:	1d6b      	adds	r3, r5, #5
1000fe96:	77da      	strb	r2, [r3, #31]
1000fe98:	2125      	movs	r1, #37	; 0x25
1000fe9a:	e004      	b.n	1000fea6 <gapc_bond_req_ind+0xb6>
1000fe9c:	319a      	adds	r1, #154	; 0x9a
1000fe9e:	2210      	movs	r2, #16
1000fea0:	4b09      	ldr	r3, [pc, #36]	; (1000fec8 <gapc_bond_req_ind+0xd8>)
1000fea2:	4798      	blx	r3
1000fea4:	211a      	movs	r1, #26
1000fea6:	1c0b      	adds	r3, r1, #0
1000fea8:	2400      	movs	r4, #0
1000feaa:	3b08      	subs	r3, #8
1000feac:	71ab      	strb	r3, [r5, #6]
1000feae:	1c28      	adds	r0, r5, #0
1000feb0:	4b06      	ldr	r3, [pc, #24]	; (1000fecc <gapc_bond_req_ind+0xdc>)
1000feb2:	71ec      	strb	r4, [r5, #7]
1000feb4:	4798      	blx	r3
1000feb6:	2000      	movs	r0, #0
1000feb8:	bd70      	pop	{r4, r5, r6, pc}
1000feba:	46c0      	nop			; (mov r8, r8)
1000febc:	10017be0 	.word	0x10017be0
1000fec0:	10017870 	.word	0x10017870
1000fec4:	10017902 	.word	0x10017902
1000fec8:	10012297 	.word	0x10012297
1000fecc:	1000f791 	.word	0x1000f791

1000fed0 <gapc_bond_cfm_handler_pair_resp>:
1000fed0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fed2:	b085      	sub	sp, #20
1000fed4:	1c07      	adds	r7, r0, #0
1000fed6:	a80a      	add	r0, sp, #40	; 0x28
1000fed8:	7806      	ldrb	r6, [r0, #0]
1000feda:	a80b      	add	r0, sp, #44	; 0x2c
1000fedc:	7805      	ldrb	r5, [r0, #0]
1000fede:	a80c      	add	r0, sp, #48	; 0x30
1000fee0:	7800      	ldrb	r0, [r0, #0]
1000fee2:	2414      	movs	r4, #20
1000fee4:	9002      	str	r0, [sp, #8]
1000fee6:	a80d      	add	r0, sp, #52	; 0x34
1000fee8:	7800      	ldrb	r0, [r0, #0]
1000feea:	9301      	str	r3, [sp, #4]
1000feec:	9003      	str	r0, [sp, #12]
1000feee:	a80e      	add	r0, sp, #56	; 0x38
1000fef0:	8800      	ldrh	r0, [r0, #0]
1000fef2:	4684      	mov	ip, r0
1000fef4:	4812      	ldr	r0, [pc, #72]	; (1000ff40 <gapc_bond_cfm_handler_pair_resp+0x70>)
1000fef6:	7004      	strb	r4, [r0, #0]
1000fef8:	3c06      	subs	r4, #6
1000fefa:	7044      	strb	r4, [r0, #1]
1000fefc:	7084      	strb	r4, [r0, #2]
1000fefe:	4664      	mov	r4, ip
1000ff00:	70c4      	strb	r4, [r0, #3]
1000ff02:	4c10      	ldr	r4, [pc, #64]	; (1000ff44 <gapc_bond_cfm_handler_pair_resp+0x74>)
1000ff04:	7247      	strb	r7, [r0, #9]
1000ff06:	8823      	ldrh	r3, [r4, #0]
1000ff08:	8824      	ldrh	r4, [r4, #0]
1000ff0a:	7103      	strb	r3, [r0, #4]
1000ff0c:	466b      	mov	r3, sp
1000ff0e:	791b      	ldrb	r3, [r3, #4]
1000ff10:	0a24      	lsrs	r4, r4, #8
1000ff12:	7303      	strb	r3, [r0, #12]
1000ff14:	466b      	mov	r3, sp
1000ff16:	7a1b      	ldrb	r3, [r3, #8]
1000ff18:	7144      	strb	r4, [r0, #5]
1000ff1a:	73c3      	strb	r3, [r0, #15]
1000ff1c:	466b      	mov	r3, sp
1000ff1e:	7b1b      	ldrb	r3, [r3, #12]
1000ff20:	2401      	movs	r4, #1
1000ff22:	7403      	strb	r3, [r0, #16]
1000ff24:	2309      	movs	r3, #9
1000ff26:	7183      	strb	r3, [r0, #6]
1000ff28:	2300      	movs	r3, #0
1000ff2a:	7204      	strb	r4, [r0, #8]
1000ff2c:	7281      	strb	r1, [r0, #10]
1000ff2e:	72c2      	strb	r2, [r0, #11]
1000ff30:	7346      	strb	r6, [r0, #13]
1000ff32:	7385      	strb	r5, [r0, #14]
1000ff34:	71c3      	strb	r3, [r0, #7]
1000ff36:	2111      	movs	r1, #17
1000ff38:	4b03      	ldr	r3, [pc, #12]	; (1000ff48 <gapc_bond_cfm_handler_pair_resp+0x78>)
1000ff3a:	4798      	blx	r3
1000ff3c:	b005      	add	sp, #20
1000ff3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ff40:	10017be0 	.word	0x10017be0
1000ff44:	10017870 	.word	0x10017870
1000ff48:	1000f791 	.word	0x1000f791

1000ff4c <gapc_bond_cfm_handler_key_exch>:
1000ff4c:	b538      	push	{r3, r4, r5, lr}
1000ff4e:	2514      	movs	r5, #20
1000ff50:	4c0d      	ldr	r4, [pc, #52]	; (1000ff88 <gapc_bond_cfm_handler_key_exch+0x3c>)
1000ff52:	70e3      	strb	r3, [r4, #3]
1000ff54:	4b0d      	ldr	r3, [pc, #52]	; (1000ff8c <gapc_bond_cfm_handler_key_exch+0x40>)
1000ff56:	7025      	strb	r5, [r4, #0]
1000ff58:	3d06      	subs	r5, #6
1000ff5a:	7065      	strb	r5, [r4, #1]
1000ff5c:	70a5      	strb	r5, [r4, #2]
1000ff5e:	881d      	ldrh	r5, [r3, #0]
1000ff60:	881b      	ldrh	r3, [r3, #0]
1000ff62:	7220      	strb	r0, [r4, #8]
1000ff64:	0a1b      	lsrs	r3, r3, #8
1000ff66:	7163      	strb	r3, [r4, #5]
1000ff68:	7261      	strb	r1, [r4, #9]
1000ff6a:	4b09      	ldr	r3, [pc, #36]	; (1000ff90 <gapc_bond_cfm_handler_key_exch+0x44>)
1000ff6c:	1c11      	adds	r1, r2, #0
1000ff6e:	4809      	ldr	r0, [pc, #36]	; (1000ff94 <gapc_bond_cfm_handler_key_exch+0x48>)
1000ff70:	2210      	movs	r2, #16
1000ff72:	7125      	strb	r5, [r4, #4]
1000ff74:	4798      	blx	r3
1000ff76:	2312      	movs	r3, #18
1000ff78:	71a3      	strb	r3, [r4, #6]
1000ff7a:	2300      	movs	r3, #0
1000ff7c:	1c20      	adds	r0, r4, #0
1000ff7e:	71e3      	strb	r3, [r4, #7]
1000ff80:	211a      	movs	r1, #26
1000ff82:	4b05      	ldr	r3, [pc, #20]	; (1000ff98 <gapc_bond_cfm_handler_key_exch+0x4c>)
1000ff84:	4798      	blx	r3
1000ff86:	bd38      	pop	{r3, r4, r5, pc}
1000ff88:	10017be0 	.word	0x10017be0
1000ff8c:	10017870 	.word	0x10017870
1000ff90:	10012297 	.word	0x10012297
1000ff94:	10017bea 	.word	0x10017bea
1000ff98:	1000f791 	.word	0x1000f791

1000ff9c <gapc_security_cmd_handler>:
1000ff9c:	221a      	movs	r2, #26
1000ff9e:	b508      	push	{r3, lr}
1000ffa0:	4b0b      	ldr	r3, [pc, #44]	; (1000ffd0 <gapc_security_cmd_handler+0x34>)
1000ffa2:	701a      	strb	r2, [r3, #0]
1000ffa4:	3a0c      	subs	r2, #12
1000ffa6:	705a      	strb	r2, [r3, #1]
1000ffa8:	709a      	strb	r2, [r3, #2]
1000ffaa:	4a0a      	ldr	r2, [pc, #40]	; (1000ffd4 <gapc_security_cmd_handler+0x38>)
1000ffac:	70d8      	strb	r0, [r3, #3]
1000ffae:	8810      	ldrh	r0, [r2, #0]
1000ffb0:	8812      	ldrh	r2, [r2, #0]
1000ffb2:	7118      	strb	r0, [r3, #4]
1000ffb4:	0a12      	lsrs	r2, r2, #8
1000ffb6:	715a      	strb	r2, [r3, #5]
1000ffb8:	220c      	movs	r2, #12
1000ffba:	721a      	strb	r2, [r3, #8]
1000ffbc:	3a0a      	subs	r2, #10
1000ffbe:	719a      	strb	r2, [r3, #6]
1000ffc0:	2200      	movs	r2, #0
1000ffc2:	7259      	strb	r1, [r3, #9]
1000ffc4:	71da      	strb	r2, [r3, #7]
1000ffc6:	1c18      	adds	r0, r3, #0
1000ffc8:	210a      	movs	r1, #10
1000ffca:	4b03      	ldr	r3, [pc, #12]	; (1000ffd8 <gapc_security_cmd_handler+0x3c>)
1000ffcc:	4798      	blx	r3
1000ffce:	bd08      	pop	{r3, pc}
1000ffd0:	10017be0 	.word	0x10017be0
1000ffd4:	10017870 	.word	0x10017870
1000ffd8:	1000f791 	.word	0x1000f791

1000ffdc <gapc_encrypt_cmd_handler>:
1000ffdc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffde:	2500      	movs	r5, #0
1000ffe0:	b089      	sub	sp, #36	; 0x24
1000ffe2:	9306      	str	r3, [sp, #24]
1000ffe4:	ab0e      	add	r3, sp, #56	; 0x38
1000ffe6:	781b      	ldrb	r3, [r3, #0]
1000ffe8:	1c17      	adds	r7, r2, #0
1000ffea:	9307      	str	r3, [sp, #28]
1000ffec:	ab0f      	add	r3, sp, #60	; 0x3c
1000ffee:	781b      	ldrb	r3, [r3, #0]
1000fff0:	4a19      	ldr	r2, [pc, #100]	; (10010058 <gapc_encrypt_cmd_handler+0x7c>)
1000fff2:	1c06      	adds	r6, r0, #0
1000fff4:	9105      	str	r1, [sp, #20]
1000fff6:	9300      	str	r3, [sp, #0]
1000fff8:	9002      	str	r0, [sp, #8]
1000fffa:	1c29      	adds	r1, r5, #0
1000fffc:	1c2b      	adds	r3, r5, #0
1000fffe:	9501      	str	r5, [sp, #4]
10010000:	1c10      	adds	r0, r2, #0
10010002:	4c16      	ldr	r4, [pc, #88]	; (1001005c <gapc_encrypt_cmd_handler+0x80>)
10010004:	47a0      	blx	r4
10010006:	2316      	movs	r3, #22
10010008:	4c15      	ldr	r4, [pc, #84]	; (10010060 <gapc_encrypt_cmd_handler+0x84>)
1001000a:	9905      	ldr	r1, [sp, #20]
1001000c:	7023      	strb	r3, [r4, #0]
1001000e:	3b08      	subs	r3, #8
10010010:	7063      	strb	r3, [r4, #1]
10010012:	70a3      	strb	r3, [r4, #2]
10010014:	4b13      	ldr	r3, [pc, #76]	; (10010064 <gapc_encrypt_cmd_handler+0x88>)
10010016:	70e6      	strb	r6, [r4, #3]
10010018:	881a      	ldrh	r2, [r3, #0]
1001001a:	881b      	ldrh	r3, [r3, #0]
1001001c:	7122      	strb	r2, [r4, #4]
1001001e:	0a1b      	lsrs	r3, r3, #8
10010020:	7163      	strb	r3, [r4, #5]
10010022:	230b      	movs	r3, #11
10010024:	4e10      	ldr	r6, [pc, #64]	; (10010068 <gapc_encrypt_cmd_handler+0x8c>)
10010026:	2210      	movs	r2, #16
10010028:	4810      	ldr	r0, [pc, #64]	; (1001006c <gapc_encrypt_cmd_handler+0x90>)
1001002a:	7223      	strb	r3, [r4, #8]
1001002c:	7265      	strb	r5, [r4, #9]
1001002e:	47b0      	blx	r6
10010030:	0a3b      	lsrs	r3, r7, #8
10010032:	9906      	ldr	r1, [sp, #24]
10010034:	2208      	movs	r2, #8
10010036:	480e      	ldr	r0, [pc, #56]	; (10010070 <gapc_encrypt_cmd_handler+0x94>)
10010038:	76e3      	strb	r3, [r4, #27]
1001003a:	76a7      	strb	r7, [r4, #26]
1001003c:	47b0      	blx	r6
1001003e:	466a      	mov	r2, sp
10010040:	7f12      	ldrb	r2, [r2, #28]
10010042:	1d63      	adds	r3, r4, #5
10010044:	77da      	strb	r2, [r3, #31]
10010046:	231d      	movs	r3, #29
10010048:	1c20      	adds	r0, r4, #0
1001004a:	71a3      	strb	r3, [r4, #6]
1001004c:	2125      	movs	r1, #37	; 0x25
1001004e:	4b09      	ldr	r3, [pc, #36]	; (10010074 <gapc_encrypt_cmd_handler+0x98>)
10010050:	71e5      	strb	r5, [r4, #7]
10010052:	4798      	blx	r3
10010054:	b009      	add	sp, #36	; 0x24
10010056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010058:	10016a48 	.word	0x10016a48
1001005c:	1000fa95 	.word	0x1000fa95
10010060:	10017be0 	.word	0x10017be0
10010064:	10017870 	.word	0x10017870
10010068:	10012297 	.word	0x10012297
1001006c:	10017bea 	.word	0x10017bea
10010070:	10017bfc 	.word	0x10017bfc
10010074:	1000f791 	.word	0x1000f791

10010078 <gapc_encrypt_req_ind>:
10010078:	b508      	push	{r3, lr}
1001007a:	0a00      	lsrs	r0, r0, #8
1001007c:	8010      	strh	r0, [r2, #0]
1001007e:	784b      	ldrb	r3, [r1, #1]
10010080:	7808      	ldrb	r0, [r1, #0]
10010082:	021b      	lsls	r3, r3, #8
10010084:	4303      	orrs	r3, r0
10010086:	8053      	strh	r3, [r2, #2]
10010088:	1d10      	adds	r0, r2, #4
1001008a:	3102      	adds	r1, #2
1001008c:	2208      	movs	r2, #8
1001008e:	4b01      	ldr	r3, [pc, #4]	; (10010094 <gapc_encrypt_req_ind+0x1c>)
10010090:	4798      	blx	r3
10010092:	bd08      	pop	{r3, pc}
10010094:	10012297 	.word	0x10012297

10010098 <gapc_encrypt_cfm_handler>:
10010098:	b5f0      	push	{r4, r5, r6, r7, lr}
1001009a:	2500      	movs	r5, #0
1001009c:	b087      	sub	sp, #28
1001009e:	9304      	str	r3, [sp, #16]
100100a0:	ab0c      	add	r3, sp, #48	; 0x30
100100a2:	781b      	ldrb	r3, [r3, #0]
100100a4:	1c17      	adds	r7, r2, #0
100100a6:	4a15      	ldr	r2, [pc, #84]	; (100100fc <gapc_encrypt_cfm_handler+0x64>)
100100a8:	1c06      	adds	r6, r0, #0
100100aa:	9305      	str	r3, [sp, #20]
100100ac:	9100      	str	r1, [sp, #0]
100100ae:	9002      	str	r0, [sp, #8]
100100b0:	1c29      	adds	r1, r5, #0
100100b2:	1c2b      	adds	r3, r5, #0
100100b4:	9501      	str	r5, [sp, #4]
100100b6:	1c10      	adds	r0, r2, #0
100100b8:	4c11      	ldr	r4, [pc, #68]	; (10010100 <gapc_encrypt_cfm_handler+0x68>)
100100ba:	47a0      	blx	r4
100100bc:	2318      	movs	r3, #24
100100be:	4c11      	ldr	r4, [pc, #68]	; (10010104 <gapc_encrypt_cfm_handler+0x6c>)
100100c0:	9904      	ldr	r1, [sp, #16]
100100c2:	7023      	strb	r3, [r4, #0]
100100c4:	3b0a      	subs	r3, #10
100100c6:	7063      	strb	r3, [r4, #1]
100100c8:	70a3      	strb	r3, [r4, #2]
100100ca:	4b0f      	ldr	r3, [pc, #60]	; (10010108 <gapc_encrypt_cfm_handler+0x70>)
100100cc:	480f      	ldr	r0, [pc, #60]	; (1001010c <gapc_encrypt_cfm_handler+0x74>)
100100ce:	881a      	ldrh	r2, [r3, #0]
100100d0:	881b      	ldrh	r3, [r3, #0]
100100d2:	7122      	strb	r2, [r4, #4]
100100d4:	0a1b      	lsrs	r3, r3, #8
100100d6:	7163      	strb	r3, [r4, #5]
100100d8:	2210      	movs	r2, #16
100100da:	4b0d      	ldr	r3, [pc, #52]	; (10010110 <gapc_encrypt_cfm_handler+0x78>)
100100dc:	70e6      	strb	r6, [r4, #3]
100100de:	7227      	strb	r7, [r4, #8]
100100e0:	4798      	blx	r3
100100e2:	466b      	mov	r3, sp
100100e4:	7d1b      	ldrb	r3, [r3, #20]
100100e6:	1c20      	adds	r0, r4, #0
100100e8:	7663      	strb	r3, [r4, #25]
100100ea:	2312      	movs	r3, #18
100100ec:	211a      	movs	r1, #26
100100ee:	71a3      	strb	r3, [r4, #6]
100100f0:	4b08      	ldr	r3, [pc, #32]	; (10010114 <gapc_encrypt_cfm_handler+0x7c>)
100100f2:	71e5      	strb	r5, [r4, #7]
100100f4:	4798      	blx	r3
100100f6:	b007      	add	sp, #28
100100f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100100fa:	46c0      	nop			; (mov r8, r8)
100100fc:	10016a58 	.word	0x10016a58
10010100:	1000fa95 	.word	0x1000fa95
10010104:	10017be0 	.word	0x10017be0
10010108:	10017870 	.word	0x10017870
1001010c:	10017be9 	.word	0x10017be9
10010110:	10012297 	.word	0x10012297
10010114:	1000f791 	.word	0x1000f791

10010118 <gapc_encrypt_ind>:
10010118:	780b      	ldrb	r3, [r1, #0]
1001011a:	0a00      	lsrs	r0, r0, #8
1001011c:	70d3      	strb	r3, [r2, #3]
1001011e:	2300      	movs	r3, #0
10010120:	8010      	strh	r0, [r2, #0]
10010122:	7093      	strb	r3, [r2, #2]
10010124:	4770      	bx	lr
	...

10010128 <gapc_param_update_cfm_handler>:
10010128:	b538      	push	{r3, r4, r5, lr}
1001012a:	2410      	movs	r4, #16
1001012c:	1c05      	adds	r5, r0, #0
1001012e:	480e      	ldr	r0, [pc, #56]	; (10010168 <gapc_param_update_cfm_handler+0x40>)
10010130:	7004      	strb	r4, [r0, #0]
10010132:	3c02      	subs	r4, #2
10010134:	7044      	strb	r4, [r0, #1]
10010136:	7084      	strb	r4, [r0, #2]
10010138:	4c0c      	ldr	r4, [pc, #48]	; (1001016c <gapc_param_update_cfm_handler+0x44>)
1001013a:	70c5      	strb	r5, [r0, #3]
1001013c:	8825      	ldrh	r5, [r4, #0]
1001013e:	8824      	ldrh	r4, [r4, #0]
10010140:	72c3      	strb	r3, [r0, #11]
10010142:	0a1b      	lsrs	r3, r3, #8
10010144:	0a24      	lsrs	r4, r4, #8
10010146:	7303      	strb	r3, [r0, #12]
10010148:	2305      	movs	r3, #5
1001014a:	7144      	strb	r4, [r0, #5]
1001014c:	2400      	movs	r4, #0
1001014e:	7201      	strb	r1, [r0, #8]
10010150:	7242      	strb	r2, [r0, #9]
10010152:	7183      	strb	r3, [r0, #6]
10010154:	0a12      	lsrs	r2, r2, #8
10010156:	210d      	movs	r1, #13
10010158:	4b05      	ldr	r3, [pc, #20]	; (10010170 <gapc_param_update_cfm_handler+0x48>)
1001015a:	7105      	strb	r5, [r0, #4]
1001015c:	7282      	strb	r2, [r0, #10]
1001015e:	71c4      	strb	r4, [r0, #7]
10010160:	4798      	blx	r3
10010162:	1c20      	adds	r0, r4, #0
10010164:	bd38      	pop	{r3, r4, r5, pc}
10010166:	46c0      	nop			; (mov r8, r8)
10010168:	10017be0 	.word	0x10017be0
1001016c:	10017870 	.word	0x10017870
10010170:	1000f791 	.word	0x1000f791

10010174 <gapc_param_updated_ind>:
10010174:	2300      	movs	r3, #0
10010176:	0a00      	lsrs	r0, r0, #8
10010178:	8010      	strh	r0, [r2, #0]
1001017a:	7093      	strb	r3, [r2, #2]
1001017c:	784b      	ldrb	r3, [r1, #1]
1001017e:	7808      	ldrb	r0, [r1, #0]
10010180:	021b      	lsls	r3, r3, #8
10010182:	4303      	orrs	r3, r0
10010184:	8093      	strh	r3, [r2, #4]
10010186:	78cb      	ldrb	r3, [r1, #3]
10010188:	7888      	ldrb	r0, [r1, #2]
1001018a:	021b      	lsls	r3, r3, #8
1001018c:	4303      	orrs	r3, r0
1001018e:	80d3      	strh	r3, [r2, #6]
10010190:	794b      	ldrb	r3, [r1, #5]
10010192:	7909      	ldrb	r1, [r1, #4]
10010194:	021b      	lsls	r3, r3, #8
10010196:	430b      	orrs	r3, r1
10010198:	2007      	movs	r0, #7
1001019a:	8113      	strh	r3, [r2, #8]
1001019c:	4770      	bx	lr

1001019e <gapc_param_updated_req_ind>:
1001019e:	0a00      	lsrs	r0, r0, #8
100101a0:	8010      	strh	r0, [r2, #0]
100101a2:	784b      	ldrb	r3, [r1, #1]
100101a4:	7808      	ldrb	r0, [r1, #0]
100101a6:	021b      	lsls	r3, r3, #8
100101a8:	4303      	orrs	r3, r0
100101aa:	8053      	strh	r3, [r2, #2]
100101ac:	78cb      	ldrb	r3, [r1, #3]
100101ae:	7888      	ldrb	r0, [r1, #2]
100101b0:	021b      	lsls	r3, r3, #8
100101b2:	4303      	orrs	r3, r0
100101b4:	8093      	strh	r3, [r2, #4]
100101b6:	794b      	ldrb	r3, [r1, #5]
100101b8:	7908      	ldrb	r0, [r1, #4]
100101ba:	021b      	lsls	r3, r3, #8
100101bc:	4303      	orrs	r3, r0
100101be:	80d3      	strh	r3, [r2, #6]
100101c0:	79cb      	ldrb	r3, [r1, #7]
100101c2:	7989      	ldrb	r1, [r1, #6]
100101c4:	021b      	lsls	r3, r3, #8
100101c6:	430b      	orrs	r3, r1
100101c8:	2008      	movs	r0, #8
100101ca:	8113      	strh	r3, [r2, #8]
100101cc:	4770      	bx	lr
	...

100101d0 <gapc_dev_info_req_ind_handler>:
100101d0:	b508      	push	{r3, lr}
100101d2:	1c0b      	adds	r3, r1, #0
100101d4:	0a01      	lsrs	r1, r0, #8
100101d6:	8011      	strh	r1, [r2, #0]
100101d8:	7818      	ldrb	r0, [r3, #0]
100101da:	7090      	strb	r0, [r2, #2]
100101dc:	2800      	cmp	r0, #0
100101de:	d104      	bne.n	100101ea <gapc_dev_info_req_ind_handler+0x1a>
100101e0:	4b03      	ldr	r3, [pc, #12]	; (100101f0 <gapc_dev_info_req_ind_handler+0x20>)
100101e2:	33aa      	adds	r3, #170	; 0xaa
100101e4:	881b      	ldrh	r3, [r3, #0]
100101e6:	2b00      	cmp	r3, #0
100101e8:	d001      	beq.n	100101ee <gapc_dev_info_req_ind_handler+0x1e>
100101ea:	4b02      	ldr	r3, [pc, #8]	; (100101f4 <gapc_dev_info_req_ind_handler+0x24>)
100101ec:	4798      	blx	r3
100101ee:	bd08      	pop	{r3, pc}
100101f0:	10017902 	.word	0x10017902
100101f4:	1000f8a1 	.word	0x1000f8a1

100101f8 <gapc_sec_req_ind>:
100101f8:	0a00      	lsrs	r0, r0, #8
100101fa:	8010      	strh	r0, [r2, #0]
100101fc:	7809      	ldrb	r1, [r1, #0]
100101fe:	2301      	movs	r3, #1
10010200:	1c08      	adds	r0, r1, #0
10010202:	0889      	lsrs	r1, r1, #2
10010204:	4018      	ands	r0, r3
10010206:	400b      	ands	r3, r1
10010208:	70d0      	strb	r0, [r2, #3]
1001020a:	7113      	strb	r3, [r2, #4]
1001020c:	4770      	bx	lr

1001020e <gapc_sign_counter_ind_handler>:
1001020e:	0a00      	lsrs	r0, r0, #8
10010210:	8010      	strh	r0, [r2, #0]
10010212:	784b      	ldrb	r3, [r1, #1]
10010214:	0218      	lsls	r0, r3, #8
10010216:	788b      	ldrb	r3, [r1, #2]
10010218:	041b      	lsls	r3, r3, #16
1001021a:	4303      	orrs	r3, r0
1001021c:	7808      	ldrb	r0, [r1, #0]
1001021e:	4303      	orrs	r3, r0
10010220:	78c8      	ldrb	r0, [r1, #3]
10010222:	0600      	lsls	r0, r0, #24
10010224:	4303      	orrs	r3, r0
10010226:	6053      	str	r3, [r2, #4]
10010228:	794b      	ldrb	r3, [r1, #5]
1001022a:	0218      	lsls	r0, r3, #8
1001022c:	798b      	ldrb	r3, [r1, #6]
1001022e:	041b      	lsls	r3, r3, #16
10010230:	4303      	orrs	r3, r0
10010232:	7908      	ldrb	r0, [r1, #4]
10010234:	79c9      	ldrb	r1, [r1, #7]
10010236:	4303      	orrs	r3, r0
10010238:	0609      	lsls	r1, r1, #24
1001023a:	430b      	orrs	r3, r1
1001023c:	2000      	movs	r0, #0
1001023e:	6093      	str	r3, [r2, #8]
10010240:	4770      	bx	lr
	...

10010244 <gapc_peer_att_info_ind_handler>:
10010244:	b510      	push	{r4, lr}
10010246:	0a00      	lsrs	r0, r0, #8
10010248:	8010      	strh	r0, [r2, #0]
1001024a:	7808      	ldrb	r0, [r1, #0]
1001024c:	7090      	strb	r0, [r2, #2]
1001024e:	788b      	ldrb	r3, [r1, #2]
10010250:	784c      	ldrb	r4, [r1, #1]
10010252:	021b      	lsls	r3, r3, #8
10010254:	4323      	orrs	r3, r4
10010256:	8093      	strh	r3, [r2, #4]
10010258:	2801      	cmp	r0, #1
1001025a:	d027      	beq.n	100102ac <gapc_peer_att_info_ind_handler+0x68>
1001025c:	2800      	cmp	r0, #0
1001025e:	d017      	beq.n	10010290 <gapc_peer_att_info_ind_handler+0x4c>
10010260:	2802      	cmp	r0, #2
10010262:	d12a      	bne.n	100102ba <gapc_peer_att_info_ind_handler+0x76>
10010264:	790b      	ldrb	r3, [r1, #4]
10010266:	78c8      	ldrb	r0, [r1, #3]
10010268:	021b      	lsls	r3, r3, #8
1001026a:	4303      	orrs	r3, r0
1001026c:	8113      	strh	r3, [r2, #8]
1001026e:	798b      	ldrb	r3, [r1, #6]
10010270:	7948      	ldrb	r0, [r1, #5]
10010272:	021b      	lsls	r3, r3, #8
10010274:	4303      	orrs	r3, r0
10010276:	80d3      	strh	r3, [r2, #6]
10010278:	7a0b      	ldrb	r3, [r1, #8]
1001027a:	79c8      	ldrb	r0, [r1, #7]
1001027c:	021b      	lsls	r3, r3, #8
1001027e:	4303      	orrs	r3, r0
10010280:	8193      	strh	r3, [r2, #12]
10010282:	7a8b      	ldrb	r3, [r1, #10]
10010284:	7a49      	ldrb	r1, [r1, #9]
10010286:	021b      	lsls	r3, r3, #8
10010288:	430b      	orrs	r3, r1
1001028a:	8153      	strh	r3, [r2, #10]
1001028c:	2306      	movs	r3, #6
1001028e:	e013      	b.n	100102b8 <gapc_peer_att_info_ind_handler+0x74>
10010290:	1c14      	adds	r4, r2, #0
10010292:	1c20      	adds	r0, r4, #0
10010294:	790a      	ldrb	r2, [r1, #4]
10010296:	78cb      	ldrb	r3, [r1, #3]
10010298:	0212      	lsls	r2, r2, #8
1001029a:	431a      	orrs	r2, r3
1001029c:	80e2      	strh	r2, [r4, #6]
1001029e:	4b07      	ldr	r3, [pc, #28]	; (100102bc <gapc_peer_att_info_ind_handler+0x78>)
100102a0:	3008      	adds	r0, #8
100102a2:	3105      	adds	r1, #5
100102a4:	4798      	blx	r3
100102a6:	2302      	movs	r3, #2
100102a8:	70a3      	strb	r3, [r4, #2]
100102aa:	e006      	b.n	100102ba <gapc_peer_att_info_ind_handler+0x76>
100102ac:	790b      	ldrb	r3, [r1, #4]
100102ae:	78c9      	ldrb	r1, [r1, #3]
100102b0:	021b      	lsls	r3, r3, #8
100102b2:	430b      	orrs	r3, r1
100102b4:	80d3      	strh	r3, [r2, #6]
100102b6:	2305      	movs	r3, #5
100102b8:	7093      	strb	r3, [r2, #2]
100102ba:	bd10      	pop	{r4, pc}
100102bc:	10012297 	.word	0x10012297

100102c0 <gapc_con_channel_map_ind_handler>:
100102c0:	b508      	push	{r3, lr}
100102c2:	2300      	movs	r3, #0
100102c4:	0a00      	lsrs	r0, r0, #8
100102c6:	7013      	strb	r3, [r2, #0]
100102c8:	8050      	strh	r0, [r2, #2]
100102ca:	4b02      	ldr	r3, [pc, #8]	; (100102d4 <gapc_con_channel_map_ind_handler+0x14>)
100102cc:	1d10      	adds	r0, r2, #4
100102ce:	2205      	movs	r2, #5
100102d0:	4798      	blx	r3
100102d2:	bd08      	pop	{r3, pc}
100102d4:	10012297 	.word	0x10012297

100102d8 <gapc_lecb_connected>:
100102d8:	7843      	ldrb	r3, [r0, #1]
100102da:	7802      	ldrb	r2, [r0, #0]
100102dc:	021b      	lsls	r3, r3, #8
100102de:	4313      	orrs	r3, r2
100102e0:	800b      	strh	r3, [r1, #0]
100102e2:	78c3      	ldrb	r3, [r0, #3]
100102e4:	7882      	ldrb	r2, [r0, #2]
100102e6:	021b      	lsls	r3, r3, #8
100102e8:	4313      	orrs	r3, r2
100102ea:	804b      	strh	r3, [r1, #2]
100102ec:	7943      	ldrb	r3, [r0, #5]
100102ee:	7902      	ldrb	r2, [r0, #4]
100102f0:	021b      	lsls	r3, r3, #8
100102f2:	4313      	orrs	r3, r2
100102f4:	808b      	strh	r3, [r1, #4]
100102f6:	79c3      	ldrb	r3, [r0, #7]
100102f8:	7982      	ldrb	r2, [r0, #6]
100102fa:	021b      	lsls	r3, r3, #8
100102fc:	4313      	orrs	r3, r2
100102fe:	80cb      	strh	r3, [r1, #6]
10010300:	2300      	movs	r3, #0
10010302:	720b      	strb	r3, [r1, #8]
10010304:	4770      	bx	lr

10010306 <gapc_lecb_disconnected>:
10010306:	7843      	ldrb	r3, [r0, #1]
10010308:	7802      	ldrb	r2, [r0, #0]
1001030a:	021b      	lsls	r3, r3, #8
1001030c:	4313      	orrs	r3, r2
1001030e:	800b      	strh	r3, [r1, #0]
10010310:	78c3      	ldrb	r3, [r0, #3]
10010312:	7882      	ldrb	r2, [r0, #2]
10010314:	021b      	lsls	r3, r3, #8
10010316:	4313      	orrs	r3, r2
10010318:	804b      	strh	r3, [r1, #2]
1001031a:	4770      	bx	lr

1001031c <gapc_lecb_connect_req_ind>:
1001031c:	7843      	ldrb	r3, [r0, #1]
1001031e:	7802      	ldrb	r2, [r0, #0]
10010320:	021b      	lsls	r3, r3, #8
10010322:	4313      	orrs	r3, r2
10010324:	800b      	strh	r3, [r1, #0]
10010326:	78c3      	ldrb	r3, [r0, #3]
10010328:	7882      	ldrb	r2, [r0, #2]
1001032a:	021b      	lsls	r3, r3, #8
1001032c:	4313      	orrs	r3, r2
1001032e:	804b      	strh	r3, [r1, #2]
10010330:	7943      	ldrb	r3, [r0, #5]
10010332:	7902      	ldrb	r2, [r0, #4]
10010334:	021b      	lsls	r3, r3, #8
10010336:	4313      	orrs	r3, r2
10010338:	808b      	strh	r3, [r1, #4]
1001033a:	79c3      	ldrb	r3, [r0, #7]
1001033c:	7982      	ldrb	r2, [r0, #6]
1001033e:	021b      	lsls	r3, r3, #8
10010340:	4313      	orrs	r3, r2
10010342:	80cb      	strh	r3, [r1, #6]
10010344:	4770      	bx	lr

10010346 <gapc_lecb_add_credit_resp_handler>:
10010346:	7843      	ldrb	r3, [r0, #1]
10010348:	7802      	ldrb	r2, [r0, #0]
1001034a:	021b      	lsls	r3, r3, #8
1001034c:	4313      	orrs	r3, r2
1001034e:	800b      	strh	r3, [r1, #0]
10010350:	78c3      	ldrb	r3, [r0, #3]
10010352:	7882      	ldrb	r2, [r0, #2]
10010354:	021b      	lsls	r3, r3, #8
10010356:	4313      	orrs	r3, r2
10010358:	804b      	strh	r3, [r1, #2]
1001035a:	7943      	ldrb	r3, [r0, #5]
1001035c:	7902      	ldrb	r2, [r0, #4]
1001035e:	021b      	lsls	r3, r3, #8
10010360:	4313      	orrs	r3, r2
10010362:	808b      	strh	r3, [r1, #4]
10010364:	4770      	bx	lr
	...

10010368 <gapm_reset_req_handler>:
10010368:	b573      	push	{r0, r1, r4, r5, r6, lr}
1001036a:	466b      	mov	r3, sp
1001036c:	4915      	ldr	r1, [pc, #84]	; (100103c4 <gapm_reset_req_handler+0x5c>)
1001036e:	4816      	ldr	r0, [pc, #88]	; (100103c8 <gapm_reset_req_handler+0x60>)
10010370:	880c      	ldrh	r4, [r1, #0]
10010372:	8809      	ldrh	r1, [r1, #0]
10010374:	1ddd      	adds	r5, r3, #7
10010376:	0a09      	lsrs	r1, r1, #8
10010378:	2300      	movs	r3, #0
1001037a:	2202      	movs	r2, #2
1001037c:	7141      	strb	r1, [r0, #5]
1001037e:	26d0      	movs	r6, #208	; 0xd0
10010380:	2101      	movs	r1, #1
10010382:	7104      	strb	r4, [r0, #4]
10010384:	4c11      	ldr	r4, [pc, #68]	; (100103cc <gapm_reset_req_handler+0x64>)
10010386:	702b      	strb	r3, [r5, #0]
10010388:	7002      	strb	r2, [r0, #0]
1001038a:	70c3      	strb	r3, [r0, #3]
1001038c:	320b      	adds	r2, #11
1001038e:	7201      	strb	r1, [r0, #8]
10010390:	7181      	strb	r1, [r0, #6]
10010392:	71c3      	strb	r3, [r0, #7]
10010394:	3108      	adds	r1, #8
10010396:	4b0e      	ldr	r3, [pc, #56]	; (100103d0 <gapm_reset_req_handler+0x68>)
10010398:	0136      	lsls	r6, r6, #4
1001039a:	7042      	strb	r2, [r0, #1]
1001039c:	7082      	strb	r2, [r0, #2]
1001039e:	80a2      	strh	r2, [r4, #4]
100103a0:	8026      	strh	r6, [r4, #0]
100103a2:	4798      	blx	r3
100103a4:	1c28      	adds	r0, r5, #0
100103a6:	4b0b      	ldr	r3, [pc, #44]	; (100103d4 <gapm_reset_req_handler+0x6c>)
100103a8:	4798      	blx	r3
100103aa:	782b      	ldrb	r3, [r5, #0]
100103ac:	20e2      	movs	r0, #226	; 0xe2
100103ae:	2b00      	cmp	r3, #0
100103b0:	d106      	bne.n	100103c0 <gapm_reset_req_handler+0x58>
100103b2:	68a3      	ldr	r3, [r4, #8]
100103b4:	20e2      	movs	r0, #226	; 0xe2
100103b6:	781a      	ldrb	r2, [r3, #0]
100103b8:	785b      	ldrb	r3, [r3, #1]
100103ba:	2a01      	cmp	r2, #1
100103bc:	d100      	bne.n	100103c0 <gapm_reset_req_handler+0x58>
100103be:	1c18      	adds	r0, r3, #0
100103c0:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
100103c2:	46c0      	nop			; (mov r8, r8)
100103c4:	10017870 	.word	0x10017870
100103c8:	10017be0 	.word	0x10017be0
100103cc:	10017864 	.word	0x10017864
100103d0:	1000f791 	.word	0x1000f791
100103d4:	1000f7f5 	.word	0x1000f7f5

100103d8 <gapm_set_dev_config_cmd_handler>:
100103d8:	b5f0      	push	{r4, r5, r6, r7, lr}
100103da:	b089      	sub	sp, #36	; 0x24
100103dc:	9303      	str	r3, [sp, #12]
100103de:	ab0e      	add	r3, sp, #56	; 0x38
100103e0:	781b      	ldrb	r3, [r3, #0]
100103e2:	4c37      	ldr	r4, [pc, #220]	; (100104c0 <gapm_set_dev_config_cmd_handler+0xe8>)
100103e4:	9304      	str	r3, [sp, #16]
100103e6:	ab0f      	add	r3, sp, #60	; 0x3c
100103e8:	781b      	ldrb	r3, [r3, #0]
100103ea:	270d      	movs	r7, #13
100103ec:	9305      	str	r3, [sp, #20]
100103ee:	ab10      	add	r3, sp, #64	; 0x40
100103f0:	881b      	ldrh	r3, [r3, #0]
100103f2:	72a1      	strb	r1, [r4, #10]
100103f4:	9300      	str	r3, [sp, #0]
100103f6:	ab11      	add	r3, sp, #68	; 0x44
100103f8:	881b      	ldrh	r3, [r3, #0]
100103fa:	0a09      	lsrs	r1, r1, #8
100103fc:	9301      	str	r3, [sp, #4]
100103fe:	ab12      	add	r3, sp, #72	; 0x48
10010400:	881b      	ldrh	r3, [r3, #0]
10010402:	7260      	strb	r0, [r4, #9]
10010404:	9302      	str	r3, [sp, #8]
10010406:	ab06      	add	r3, sp, #24
10010408:	1dde      	adds	r6, r3, #7
1001040a:	2300      	movs	r3, #0
1001040c:	7033      	strb	r3, [r6, #0]
1001040e:	2304      	movs	r3, #4
10010410:	7023      	strb	r3, [r4, #0]
10010412:	2300      	movs	r3, #0
10010414:	70e3      	strb	r3, [r4, #3]
10010416:	4b2b      	ldr	r3, [pc, #172]	; (100104c4 <gapm_set_dev_config_cmd_handler+0xec>)
10010418:	72e1      	strb	r1, [r4, #11]
1001041a:	881d      	ldrh	r5, [r3, #0]
1001041c:	881b      	ldrh	r3, [r3, #0]
1001041e:	1c11      	adds	r1, r2, #0
10010420:	0a1b      	lsrs	r3, r3, #8
10010422:	7163      	strb	r3, [r4, #5]
10010424:	2303      	movs	r3, #3
10010426:	7125      	strb	r5, [r4, #4]
10010428:	2206      	movs	r2, #6
1001042a:	4d27      	ldr	r5, [pc, #156]	; (100104c8 <gapm_set_dev_config_cmd_handler+0xf0>)
1001042c:	4827      	ldr	r0, [pc, #156]	; (100104cc <gapm_set_dev_config_cmd_handler+0xf4>)
1001042e:	7223      	strb	r3, [r4, #8]
10010430:	7067      	strb	r7, [r4, #1]
10010432:	70a7      	strb	r7, [r4, #2]
10010434:	47a8      	blx	r5
10010436:	9903      	ldr	r1, [sp, #12]
10010438:	2210      	movs	r2, #16
1001043a:	4825      	ldr	r0, [pc, #148]	; (100104d0 <gapm_set_dev_config_cmd_handler+0xf8>)
1001043c:	47a8      	blx	r5
1001043e:	466a      	mov	r2, sp
10010440:	7c12      	ldrb	r2, [r2, #16]
10010442:	1ce3      	adds	r3, r4, #3
10010444:	77da      	strb	r2, [r3, #31]
10010446:	466a      	mov	r2, sp
10010448:	7d12      	ldrb	r2, [r2, #20]
1001044a:	1d23      	adds	r3, r4, #4
1001044c:	77da      	strb	r2, [r3, #31]
1001044e:	466a      	mov	r2, sp
10010450:	7812      	ldrb	r2, [r2, #0]
10010452:	1d63      	adds	r3, r4, #5
10010454:	77da      	strb	r2, [r3, #31]
10010456:	9b00      	ldr	r3, [sp, #0]
10010458:	1da2      	adds	r2, r4, #6
1001045a:	0a1b      	lsrs	r3, r3, #8
1001045c:	77d3      	strb	r3, [r2, #31]
1001045e:	466a      	mov	r2, sp
10010460:	7912      	ldrb	r2, [r2, #4]
10010462:	1de3      	adds	r3, r4, #7
10010464:	77da      	strb	r2, [r3, #31]
10010466:	1c22      	adds	r2, r4, #0
10010468:	9b01      	ldr	r3, [sp, #4]
1001046a:	3208      	adds	r2, #8
1001046c:	0a1b      	lsrs	r3, r3, #8
1001046e:	77d3      	strb	r3, [r2, #31]
10010470:	466a      	mov	r2, sp
10010472:	1c23      	adds	r3, r4, #0
10010474:	7a12      	ldrb	r2, [r2, #8]
10010476:	3328      	adds	r3, #40	; 0x28
10010478:	701a      	strb	r2, [r3, #0]
1001047a:	1c22      	adds	r2, r4, #0
1001047c:	9b02      	ldr	r3, [sp, #8]
1001047e:	3229      	adds	r2, #41	; 0x29
10010480:	0a1b      	lsrs	r3, r3, #8
10010482:	7013      	strb	r3, [r2, #0]
10010484:	23d0      	movs	r3, #208	; 0xd0
10010486:	4d13      	ldr	r5, [pc, #76]	; (100104d4 <gapm_set_dev_config_cmd_handler+0xfc>)
10010488:	011b      	lsls	r3, r3, #4
1001048a:	802b      	strh	r3, [r5, #0]
1001048c:	2322      	movs	r3, #34	; 0x22
1001048e:	71a3      	strb	r3, [r4, #6]
10010490:	2300      	movs	r3, #0
10010492:	212a      	movs	r1, #42	; 0x2a
10010494:	71e3      	strb	r3, [r4, #7]
10010496:	1c20      	adds	r0, r4, #0
10010498:	4b0f      	ldr	r3, [pc, #60]	; (100104d8 <gapm_set_dev_config_cmd_handler+0x100>)
1001049a:	80af      	strh	r7, [r5, #4]
1001049c:	4798      	blx	r3
1001049e:	1c30      	adds	r0, r6, #0
100104a0:	4b0e      	ldr	r3, [pc, #56]	; (100104dc <gapm_set_dev_config_cmd_handler+0x104>)
100104a2:	4798      	blx	r3
100104a4:	7833      	ldrb	r3, [r6, #0]
100104a6:	20e2      	movs	r0, #226	; 0xe2
100104a8:	2b00      	cmp	r3, #0
100104aa:	d106      	bne.n	100104ba <gapm_set_dev_config_cmd_handler+0xe2>
100104ac:	68ab      	ldr	r3, [r5, #8]
100104ae:	20e2      	movs	r0, #226	; 0xe2
100104b0:	781a      	ldrb	r2, [r3, #0]
100104b2:	785b      	ldrb	r3, [r3, #1]
100104b4:	2a03      	cmp	r2, #3
100104b6:	d100      	bne.n	100104ba <gapm_set_dev_config_cmd_handler+0xe2>
100104b8:	1c18      	adds	r0, r3, #0
100104ba:	b009      	add	sp, #36	; 0x24
100104bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100104be:	46c0      	nop			; (mov r8, r8)
100104c0:	10017be0 	.word	0x10017be0
100104c4:	10017870 	.word	0x10017870
100104c8:	10012297 	.word	0x10012297
100104cc:	10017bec 	.word	0x10017bec
100104d0:	10017bf2 	.word	0x10017bf2
100104d4:	10017864 	.word	0x10017864
100104d8:	1000f791 	.word	0x1000f791
100104dc:	1000f7f5 	.word	0x1000f7f5

100104e0 <gapm_get_dev_config_cmd_handler>:
100104e0:	4684      	mov	ip, r0
100104e2:	4663      	mov	r3, ip
100104e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100104e6:	b085      	sub	sp, #20
100104e8:	9100      	str	r1, [sp, #0]
100104ea:	20cf      	movs	r0, #207	; 0xcf
100104ec:	2b01      	cmp	r3, #1
100104ee:	d854      	bhi.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
100104f0:	2900      	cmp	r1, #0
100104f2:	d052      	beq.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
100104f4:	2200      	movs	r2, #0
100104f6:	492a      	ldr	r1, [pc, #168]	; (100105a0 <gapm_get_dev_config_cmd_handler+0xc0>)
100104f8:	ab02      	add	r3, sp, #8
100104fa:	880c      	ldrh	r4, [r1, #0]
100104fc:	8809      	ldrh	r1, [r1, #0]
100104fe:	1d9f      	adds	r7, r3, #6
10010500:	719a      	strb	r2, [r3, #6]
10010502:	4b28      	ldr	r3, [pc, #160]	; (100105a4 <gapm_get_dev_config_cmd_handler+0xc4>)
10010504:	0a09      	lsrs	r1, r1, #8
10010506:	250d      	movs	r5, #13
10010508:	2606      	movs	r6, #6
1001050a:	7159      	strb	r1, [r3, #5]
1001050c:	4661      	mov	r1, ip
1001050e:	701e      	strb	r6, [r3, #0]
10010510:	705d      	strb	r5, [r3, #1]
10010512:	709d      	strb	r5, [r3, #2]
10010514:	70da      	strb	r2, [r3, #3]
10010516:	711c      	strb	r4, [r3, #4]
10010518:	2901      	cmp	r1, #1
1001051a:	d13e      	bne.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
1001051c:	21d0      	movs	r1, #208	; 0xd0
1001051e:	4c22      	ldr	r4, [pc, #136]	; (100105a8 <gapm_get_dev_config_cmd_handler+0xc8>)
10010520:	0109      	lsls	r1, r1, #4
10010522:	8061      	strh	r1, [r4, #2]
10010524:	4921      	ldr	r1, [pc, #132]	; (100105ac <gapm_get_dev_config_cmd_handler+0xcc>)
10010526:	71da      	strb	r2, [r3, #7]
10010528:	8021      	strh	r1, [r4, #0]
1001052a:	4661      	mov	r1, ip
1001052c:	721e      	strb	r6, [r3, #8]
1001052e:	7199      	strb	r1, [r3, #6]
10010530:	1c18      	adds	r0, r3, #0
10010532:	2109      	movs	r1, #9
10010534:	4b1e      	ldr	r3, [pc, #120]	; (100105b0 <gapm_get_dev_config_cmd_handler+0xd0>)
10010536:	80a5      	strh	r5, [r4, #4]
10010538:	4798      	blx	r3
1001053a:	1c38      	adds	r0, r7, #0
1001053c:	4b1d      	ldr	r3, [pc, #116]	; (100105b4 <gapm_get_dev_config_cmd_handler+0xd4>)
1001053e:	4798      	blx	r3
10010540:	783b      	ldrb	r3, [r7, #0]
10010542:	20e2      	movs	r0, #226	; 0xe2
10010544:	9301      	str	r3, [sp, #4]
10010546:	2b00      	cmp	r3, #0
10010548:	d127      	bne.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
1001054a:	8821      	ldrh	r1, [r4, #0]
1001054c:	4a1a      	ldr	r2, [pc, #104]	; (100105b8 <gapm_get_dev_config_cmd_handler+0xd8>)
1001054e:	68a7      	ldr	r7, [r4, #8]
10010550:	3b01      	subs	r3, #1
10010552:	4291      	cmp	r1, r2
10010554:	d001      	beq.n	1001055a <gapm_get_dev_config_cmd_handler+0x7a>
10010556:	8023      	strh	r3, [r4, #0]
10010558:	e01a      	b.n	10010590 <gapm_get_dev_config_cmd_handler+0xb0>
1001055a:	8063      	strh	r3, [r4, #2]
1001055c:	9b00      	ldr	r3, [sp, #0]
1001055e:	1c39      	adds	r1, r7, #0
10010560:	1c58      	adds	r0, r3, #1
10010562:	1c32      	adds	r2, r6, #0
10010564:	4b15      	ldr	r3, [pc, #84]	; (100105bc <gapm_get_dev_config_cmd_handler+0xdc>)
10010566:	4798      	blx	r3
10010568:	79bb      	ldrb	r3, [r7, #6]
1001056a:	9a00      	ldr	r2, [sp, #0]
1001056c:	7013      	strb	r3, [r2, #0]
1001056e:	23d0      	movs	r3, #208	; 0xd0
10010570:	011b      	lsls	r3, r3, #4
10010572:	8023      	strh	r3, [r4, #0]
10010574:	ab02      	add	r3, sp, #8
10010576:	80a5      	strh	r5, [r4, #4]
10010578:	1ddd      	adds	r5, r3, #7
1001057a:	466b      	mov	r3, sp
1001057c:	791b      	ldrb	r3, [r3, #4]
1001057e:	1c28      	adds	r0, r5, #0
10010580:	702b      	strb	r3, [r5, #0]
10010582:	4b0c      	ldr	r3, [pc, #48]	; (100105b4 <gapm_get_dev_config_cmd_handler+0xd4>)
10010584:	4798      	blx	r3
10010586:	782b      	ldrb	r3, [r5, #0]
10010588:	20d0      	movs	r0, #208	; 0xd0
1001058a:	2b00      	cmp	r3, #0
1001058c:	d105      	bne.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
1001058e:	68a7      	ldr	r7, [r4, #8]
10010590:	783b      	ldrb	r3, [r7, #0]
10010592:	7878      	ldrb	r0, [r7, #1]
10010594:	2b06      	cmp	r3, #6
10010596:	d000      	beq.n	1001059a <gapm_get_dev_config_cmd_handler+0xba>
10010598:	20e2      	movs	r0, #226	; 0xe2
1001059a:	b005      	add	sp, #20
1001059c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001059e:	46c0      	nop			; (mov r8, r8)
100105a0:	10017870 	.word	0x10017870
100105a4:	10017be0 	.word	0x10017be0
100105a8:	10017864 	.word	0x10017864
100105ac:	00000d08 	.word	0x00000d08
100105b0:	1000f791 	.word	0x1000f791
100105b4:	1000f7f5 	.word	0x1000f7f5
100105b8:	0000ffff 	.word	0x0000ffff
100105bc:	10012297 	.word	0x10012297

100105c0 <gapm_cancel_cmd_handler>:
100105c0:	b537      	push	{r0, r1, r2, r4, r5, lr}
100105c2:	4916      	ldr	r1, [pc, #88]	; (1001061c <gapm_cancel_cmd_handler+0x5c>)
100105c4:	4816      	ldr	r0, [pc, #88]	; (10010620 <gapm_cancel_cmd_handler+0x60>)
100105c6:	880c      	ldrh	r4, [r1, #0]
100105c8:	8809      	ldrh	r1, [r1, #0]
100105ca:	466b      	mov	r3, sp
100105cc:	0a09      	lsrs	r1, r1, #8
100105ce:	7141      	strb	r1, [r0, #5]
100105d0:	2102      	movs	r1, #2
100105d2:	2203      	movs	r2, #3
100105d4:	7201      	strb	r1, [r0, #8]
100105d6:	21d0      	movs	r1, #208	; 0xd0
100105d8:	1ddd      	adds	r5, r3, #7
100105da:	2300      	movs	r3, #0
100105dc:	7104      	strb	r4, [r0, #4]
100105de:	4c11      	ldr	r4, [pc, #68]	; (10010624 <gapm_cancel_cmd_handler+0x64>)
100105e0:	7002      	strb	r2, [r0, #0]
100105e2:	0109      	lsls	r1, r1, #4
100105e4:	320a      	adds	r2, #10
100105e6:	702b      	strb	r3, [r5, #0]
100105e8:	7042      	strb	r2, [r0, #1]
100105ea:	7082      	strb	r2, [r0, #2]
100105ec:	70c3      	strb	r3, [r0, #3]
100105ee:	8021      	strh	r1, [r4, #0]
100105f0:	80a2      	strh	r2, [r4, #4]
100105f2:	71c3      	strb	r3, [r0, #7]
100105f4:	3a0c      	subs	r2, #12
100105f6:	2109      	movs	r1, #9
100105f8:	4b0b      	ldr	r3, [pc, #44]	; (10010628 <gapm_cancel_cmd_handler+0x68>)
100105fa:	7182      	strb	r2, [r0, #6]
100105fc:	4798      	blx	r3
100105fe:	1c28      	adds	r0, r5, #0
10010600:	4b0a      	ldr	r3, [pc, #40]	; (1001062c <gapm_cancel_cmd_handler+0x6c>)
10010602:	4798      	blx	r3
10010604:	7828      	ldrb	r0, [r5, #0]
10010606:	2800      	cmp	r0, #0
10010608:	d001      	beq.n	1001060e <gapm_cancel_cmd_handler+0x4e>
1001060a:	20e2      	movs	r0, #226	; 0xe2
1001060c:	e004      	b.n	10010618 <gapm_cancel_cmd_handler+0x58>
1001060e:	68a3      	ldr	r3, [r4, #8]
10010610:	785b      	ldrb	r3, [r3, #1]
10010612:	2b44      	cmp	r3, #68	; 0x44
10010614:	d000      	beq.n	10010618 <gapm_cancel_cmd_handler+0x58>
10010616:	1c18      	adds	r0, r3, #0
10010618:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1001061a:	46c0      	nop			; (mov r8, r8)
1001061c:	10017870 	.word	0x10017870
10010620:	10017be0 	.word	0x10017be0
10010624:	10017864 	.word	0x10017864
10010628:	1000f791 	.word	0x1000f791
1001062c:	1000f7f5 	.word	0x1000f7f5

10010630 <gapm_dev_bdaddr_ind_handler>:
10010630:	b538      	push	{r3, r4, r5, lr}
10010632:	1c05      	adds	r5, r0, #0
10010634:	1c0c      	adds	r4, r1, #0
10010636:	1c48      	adds	r0, r1, #1
10010638:	2206      	movs	r2, #6
1001063a:	1c29      	adds	r1, r5, #0
1001063c:	4b02      	ldr	r3, [pc, #8]	; (10010648 <gapm_dev_bdaddr_ind_handler+0x18>)
1001063e:	4798      	blx	r3
10010640:	79ab      	ldrb	r3, [r5, #6]
10010642:	2000      	movs	r0, #0
10010644:	7023      	strb	r3, [r4, #0]
10010646:	bd38      	pop	{r3, r4, r5, pc}
10010648:	10012297 	.word	0x10012297

1001064c <gapm_cmp_evt>:
1001064c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001064e:	7803      	ldrb	r3, [r0, #0]
10010650:	7845      	ldrb	r5, [r0, #1]
10010652:	3b0c      	subs	r3, #12
10010654:	1e18      	subs	r0, r3, #0
10010656:	280b      	cmp	r0, #11
10010658:	d900      	bls.n	1001065c <gapm_cmp_evt+0x10>
1001065a:	e08d      	b.n	10010778 <gapm_cmp_evt+0x12c>
1001065c:	1c0c      	adds	r4, r1, #0
1001065e:	f000 fd5f 	bl	10011120 <__gnu_thumb1_case_uqi>
10010662:	1952      	.short	0x1952
10010664:	068b1919 	.word	0x068b1919
10010668:	8b595906 	.word	0x8b595906
1001066c:	0d8b      	.short	0x0d8b
1001066e:	2300      	movs	r3, #0
10010670:	2d45      	cmp	r5, #69	; 0x45
10010672:	d000      	beq.n	10010676 <gapm_cmp_evt+0x2a>
10010674:	1c2b      	adds	r3, r5, #0
10010676:	7023      	strb	r3, [r4, #0]
10010678:	2002      	movs	r0, #2
1001067a:	e07e      	b.n	1001077a <gapm_cmp_evt+0x12e>
1001067c:	203b      	movs	r0, #59	; 0x3b
1001067e:	2d00      	cmp	r5, #0
10010680:	d100      	bne.n	10010684 <gapm_cmp_evt+0x38>
10010682:	e07a      	b.n	1001077a <gapm_cmp_evt+0x12e>
10010684:	700d      	strb	r5, [r1, #0]
10010686:	1c48      	adds	r0, r1, #1
10010688:	2210      	movs	r2, #16
1001068a:	2100      	movs	r1, #0
1001068c:	4b3b      	ldr	r3, [pc, #236]	; (1001077c <gapm_cmp_evt+0x130>)
1001068e:	4798      	blx	r3
10010690:	200f      	movs	r0, #15
10010692:	e072      	b.n	1001077a <gapm_cmp_evt+0x12e>
10010694:	2d00      	cmp	r5, #0
10010696:	d134      	bne.n	10010702 <gapm_cmp_evt+0xb6>
10010698:	4b39      	ldr	r3, [pc, #228]	; (10010780 <gapm_cmp_evt+0x134>)
1001069a:	4798      	blx	r3
1001069c:	1e43      	subs	r3, r0, #1
1001069e:	b2db      	uxtb	r3, r3
100106a0:	1c28      	adds	r0, r5, #0
100106a2:	2b06      	cmp	r3, #6
100106a4:	d869      	bhi.n	1001077a <gapm_cmp_evt+0x12e>
100106a6:	466b      	mov	r3, sp
100106a8:	4e36      	ldr	r6, [pc, #216]	; (10010784 <gapm_cmp_evt+0x138>)
100106aa:	1dd9      	adds	r1, r3, #7
100106ac:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
100106ae:	4b36      	ldr	r3, [pc, #216]	; (10010788 <gapm_cmp_evt+0x13c>)
100106b0:	4798      	blx	r3
100106b2:	2312      	movs	r3, #18
100106b4:	4358      	muls	r0, r3
100106b6:	4935      	ldr	r1, [pc, #212]	; (1001078c <gapm_cmp_evt+0x140>)
100106b8:	1809      	adds	r1, r1, r0
100106ba:	1c0b      	adds	r3, r1, #0
100106bc:	894a      	ldrh	r2, [r1, #10]
100106be:	3308      	adds	r3, #8
100106c0:	8122      	strh	r2, [r4, #8]
100106c2:	784f      	ldrb	r7, [r1, #1]
100106c4:	72a5      	strb	r5, [r4, #10]
100106c6:	7027      	strb	r7, [r4, #0]
100106c8:	898a      	ldrh	r2, [r1, #12]
100106ca:	1c60      	adds	r0, r4, #1
100106cc:	81a2      	strh	r2, [r4, #12]
100106ce:	88db      	ldrh	r3, [r3, #6]
100106d0:	3102      	adds	r1, #2
100106d2:	81e3      	strh	r3, [r4, #14]
100106d4:	89cb      	ldrh	r3, [r1, #14]
100106d6:	2206      	movs	r2, #6
100106d8:	8223      	strh	r3, [r4, #16]
100106da:	4b2d      	ldr	r3, [pc, #180]	; (10010790 <gapm_cmp_evt+0x144>)
100106dc:	4798      	blx	r3
100106de:	2f00      	cmp	r7, #0
100106e0:	d00a      	beq.n	100106f8 <gapm_cmp_evt+0xac>
100106e2:	79a3      	ldrb	r3, [r4, #6]
100106e4:	223f      	movs	r2, #63	; 0x3f
100106e6:	1c19      	adds	r1, r3, #0
100106e8:	3501      	adds	r5, #1
100106ea:	4391      	bics	r1, r2
100106ec:	29c0      	cmp	r1, #192	; 0xc0
100106ee:	d003      	beq.n	100106f8 <gapm_cmp_evt+0xac>
100106f0:	065b      	lsls	r3, r3, #25
100106f2:	0fdb      	lsrs	r3, r3, #31
100106f4:	3502      	adds	r5, #2
100106f6:	1aed      	subs	r5, r5, r3
100106f8:	2301      	movs	r3, #1
100106fa:	425b      	negs	r3, r3
100106fc:	7025      	strb	r5, [r4, #0]
100106fe:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010700:	e038      	b.n	10010774 <gapm_cmp_evt+0x128>
10010702:	700d      	strb	r5, [r1, #0]
10010704:	e004      	b.n	10010710 <gapm_cmp_evt+0xc4>
10010706:	2300      	movs	r3, #0
10010708:	2d45      	cmp	r5, #69	; 0x45
1001070a:	d000      	beq.n	1001070e <gapm_cmp_evt+0xc2>
1001070c:	1c2b      	adds	r3, r5, #0
1001070e:	7023      	strb	r3, [r4, #0]
10010710:	2003      	movs	r0, #3
10010712:	e032      	b.n	1001077a <gapm_cmp_evt+0x12e>
10010714:	4e1b      	ldr	r6, [pc, #108]	; (10010784 <gapm_cmp_evt+0x138>)
10010716:	2100      	movs	r1, #0
10010718:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
1001071a:	4b1b      	ldr	r3, [pc, #108]	; (10010788 <gapm_cmp_evt+0x13c>)
1001071c:	4798      	blx	r3
1001071e:	2807      	cmp	r0, #7
10010720:	d818      	bhi.n	10010754 <gapm_cmp_evt+0x108>
10010722:	2301      	movs	r3, #1
10010724:	425b      	negs	r3, r3
10010726:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010728:	3313      	adds	r3, #19
1001072a:	4358      	muls	r0, r3
1001072c:	4917      	ldr	r1, [pc, #92]	; (1001078c <gapm_cmp_evt+0x140>)
1001072e:	1809      	adds	r1, r1, r0
10010730:	1c0b      	adds	r3, r1, #0
10010732:	894a      	ldrh	r2, [r1, #10]
10010734:	3308      	adds	r3, #8
10010736:	8122      	strh	r2, [r4, #8]
10010738:	784a      	ldrb	r2, [r1, #1]
1001073a:	72a5      	strb	r5, [r4, #10]
1001073c:	7022      	strb	r2, [r4, #0]
1001073e:	898a      	ldrh	r2, [r1, #12]
10010740:	1c60      	adds	r0, r4, #1
10010742:	81a2      	strh	r2, [r4, #12]
10010744:	88db      	ldrh	r3, [r3, #6]
10010746:	3102      	adds	r1, #2
10010748:	81e3      	strh	r3, [r4, #14]
1001074a:	89cb      	ldrh	r3, [r1, #14]
1001074c:	2206      	movs	r2, #6
1001074e:	8223      	strh	r3, [r4, #16]
10010750:	4b0f      	ldr	r3, [pc, #60]	; (10010790 <gapm_cmp_evt+0x144>)
10010752:	4798      	blx	r3
10010754:	2200      	movs	r2, #0
10010756:	7823      	ldrb	r3, [r4, #0]
10010758:	4293      	cmp	r3, r2
1001075a:	d00a      	beq.n	10010772 <gapm_cmp_evt+0x126>
1001075c:	79a3      	ldrb	r3, [r4, #6]
1001075e:	323f      	adds	r2, #63	; 0x3f
10010760:	1c19      	adds	r1, r3, #0
10010762:	4391      	bics	r1, r2
10010764:	3a3e      	subs	r2, #62	; 0x3e
10010766:	29c0      	cmp	r1, #192	; 0xc0
10010768:	d003      	beq.n	10010772 <gapm_cmp_evt+0x126>
1001076a:	065b      	lsls	r3, r3, #25
1001076c:	0fdb      	lsrs	r3, r3, #31
1001076e:	3202      	adds	r2, #2
10010770:	1ad2      	subs	r2, r2, r3
10010772:	7022      	strb	r2, [r4, #0]
10010774:	2005      	movs	r0, #5
10010776:	e000      	b.n	1001077a <gapm_cmp_evt+0x12e>
10010778:	2000      	movs	r0, #0
1001077a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001077c:	100122a9 	.word	0x100122a9
10010780:	1000f99d 	.word	0x1000f99d
10010784:	10017902 	.word	0x10017902
10010788:	1000f961 	.word	0x1000f961
1001078c:	10017872 	.word	0x10017872
10010790:	10012297 	.word	0x10012297

10010794 <gapm_start_adv_cmd_handler>:
10010794:	b5f0      	push	{r4, r5, r6, r7, lr}
10010796:	b089      	sub	sp, #36	; 0x24
10010798:	9303      	str	r3, [sp, #12]
1001079a:	ab0e      	add	r3, sp, #56	; 0x38
1001079c:	9102      	str	r1, [sp, #8]
1001079e:	cb02      	ldmia	r3!, {r1}
100107a0:	aa08      	add	r2, sp, #32
100107a2:	881b      	ldrh	r3, [r3, #0]
100107a4:	4e3c      	ldr	r6, [pc, #240]	; (10010898 <gapm_start_adv_cmd_handler+0x104>)
100107a6:	9300      	str	r3, [sp, #0]
100107a8:	ab10      	add	r3, sp, #64	; 0x40
100107aa:	881b      	ldrh	r3, [r3, #0]
100107ac:	240d      	movs	r4, #13
100107ae:	469c      	mov	ip, r3
100107b0:	ab11      	add	r3, sp, #68	; 0x44
100107b2:	781b      	ldrb	r3, [r3, #0]
100107b4:	9304      	str	r3, [sp, #16]
100107b6:	ab12      	add	r3, sp, #72	; 0x48
100107b8:	781b      	ldrb	r3, [r3, #0]
100107ba:	9305      	str	r3, [sp, #20]
100107bc:	ab13      	add	r3, sp, #76	; 0x4c
100107be:	781b      	ldrb	r3, [r3, #0]
100107c0:	9306      	str	r3, [sp, #24]
100107c2:	ab14      	add	r3, sp, #80	; 0x50
100107c4:	781b      	ldrb	r3, [r3, #0]
100107c6:	9301      	str	r3, [sp, #4]
100107c8:	2319      	movs	r3, #25
100107ca:	189b      	adds	r3, r3, r2
100107cc:	7fdd      	ldrb	r5, [r3, #31]
100107ce:	ab18      	add	r3, sp, #96	; 0x60
100107d0:	881f      	ldrh	r7, [r3, #0]
100107d2:	ab19      	add	r3, sp, #100	; 0x64
100107d4:	781b      	ldrb	r3, [r3, #0]
100107d6:	8832      	ldrh	r2, [r6, #0]
100107d8:	9307      	str	r3, [sp, #28]
100107da:	4b30      	ldr	r3, [pc, #192]	; (1001089c <gapm_start_adv_cmd_handler+0x108>)
100107dc:	8836      	ldrh	r6, [r6, #0]
100107de:	711a      	strb	r2, [r3, #4]
100107e0:	466a      	mov	r2, sp
100107e2:	7a12      	ldrb	r2, [r2, #8]
100107e4:	701c      	strb	r4, [r3, #0]
100107e6:	705c      	strb	r4, [r3, #1]
100107e8:	709c      	strb	r4, [r3, #2]
100107ea:	725a      	strb	r2, [r3, #9]
100107ec:	2400      	movs	r4, #0
100107ee:	466a      	mov	r2, sp
100107f0:	0a36      	lsrs	r6, r6, #8
100107f2:	70dc      	strb	r4, [r3, #3]
100107f4:	7218      	strb	r0, [r3, #8]
100107f6:	729c      	strb	r4, [r3, #10]
100107f8:	715e      	strb	r6, [r3, #5]
100107fa:	72dc      	strb	r4, [r3, #11]
100107fc:	7812      	ldrb	r2, [r2, #0]
100107fe:	380e      	subs	r0, #14
10010800:	731a      	strb	r2, [r3, #12]
10010802:	9a00      	ldr	r2, [sp, #0]
10010804:	0a14      	lsrs	r4, r2, #8
10010806:	4662      	mov	r2, ip
10010808:	739a      	strb	r2, [r3, #14]
1001080a:	4662      	mov	r2, ip
1001080c:	735c      	strb	r4, [r3, #13]
1001080e:	0a14      	lsrs	r4, r2, #8
10010810:	466a      	mov	r2, sp
10010812:	7c12      	ldrb	r2, [r2, #16]
10010814:	73dc      	strb	r4, [r3, #15]
10010816:	741a      	strb	r2, [r3, #16]
10010818:	1c1c      	adds	r4, r3, #0
1001081a:	2801      	cmp	r0, #1
1001081c:	d809      	bhi.n	10010832 <gapm_start_adv_cmd_handler+0x9e>
1001081e:	2900      	cmp	r1, #0
10010820:	d003      	beq.n	1001082a <gapm_start_adv_cmd_handler+0x96>
10010822:	481f      	ldr	r0, [pc, #124]	; (100108a0 <gapm_start_adv_cmd_handler+0x10c>)
10010824:	2206      	movs	r2, #6
10010826:	4b1f      	ldr	r3, [pc, #124]	; (100108a4 <gapm_start_adv_cmd_handler+0x110>)
10010828:	4798      	blx	r3
1001082a:	466b      	mov	r3, sp
1001082c:	7b1b      	ldrb	r3, [r3, #12]
1001082e:	75e3      	strb	r3, [r4, #23]
10010830:	e014      	b.n	1001085c <gapm_start_adv_cmd_handler+0xc8>
10010832:	466b      	mov	r3, sp
10010834:	7d1b      	ldrb	r3, [r3, #20]
10010836:	9915      	ldr	r1, [sp, #84]	; 0x54
10010838:	7463      	strb	r3, [r4, #17]
1001083a:	466b      	mov	r3, sp
1001083c:	7e1b      	ldrb	r3, [r3, #24]
1001083e:	9a01      	ldr	r2, [sp, #4]
10010840:	74a3      	strb	r3, [r4, #18]
10010842:	466b      	mov	r3, sp
10010844:	791b      	ldrb	r3, [r3, #4]
10010846:	4818      	ldr	r0, [pc, #96]	; (100108a8 <gapm_start_adv_cmd_handler+0x114>)
10010848:	4e16      	ldr	r6, [pc, #88]	; (100108a4 <gapm_start_adv_cmd_handler+0x110>)
1001084a:	74e3      	strb	r3, [r4, #19]
1001084c:	47b0      	blx	r6
1001084e:	1c23      	adds	r3, r4, #0
10010850:	4816      	ldr	r0, [pc, #88]	; (100108ac <gapm_start_adv_cmd_handler+0x118>)
10010852:	3330      	adds	r3, #48	; 0x30
10010854:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010856:	1c2a      	adds	r2, r5, #0
10010858:	701d      	strb	r5, [r3, #0]
1001085a:	47b0      	blx	r6
1001085c:	1c22      	adds	r2, r4, #0
1001085e:	23a5      	movs	r3, #165	; 0xa5
10010860:	3250      	adds	r2, #80	; 0x50
10010862:	7013      	strb	r3, [r2, #0]
10010864:	1c22      	adds	r2, r4, #0
10010866:	3251      	adds	r2, #81	; 0x51
10010868:	7013      	strb	r3, [r2, #0]
1001086a:	1c23      	adds	r3, r4, #0
1001086c:	1c22      	adds	r2, r4, #0
1001086e:	3352      	adds	r3, #82	; 0x52
10010870:	701f      	strb	r7, [r3, #0]
10010872:	3253      	adds	r2, #83	; 0x53
10010874:	0a3b      	lsrs	r3, r7, #8
10010876:	7013      	strb	r3, [r2, #0]
10010878:	466a      	mov	r2, sp
1001087a:	1c23      	adds	r3, r4, #0
1001087c:	7f12      	ldrb	r2, [r2, #28]
1001087e:	3354      	adds	r3, #84	; 0x54
10010880:	701a      	strb	r2, [r3, #0]
10010882:	234d      	movs	r3, #77	; 0x4d
10010884:	2500      	movs	r5, #0
10010886:	71a3      	strb	r3, [r4, #6]
10010888:	1c20      	adds	r0, r4, #0
1001088a:	2155      	movs	r1, #85	; 0x55
1001088c:	4b08      	ldr	r3, [pc, #32]	; (100108b0 <gapm_start_adv_cmd_handler+0x11c>)
1001088e:	71e5      	strb	r5, [r4, #7]
10010890:	4798      	blx	r3
10010892:	1c28      	adds	r0, r5, #0
10010894:	b009      	add	sp, #36	; 0x24
10010896:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010898:	10017870 	.word	0x10017870
1001089c:	10017be0 	.word	0x10017be0
100108a0:	10017bf1 	.word	0x10017bf1
100108a4:	10012297 	.word	0x10012297
100108a8:	10017bf4 	.word	0x10017bf4
100108ac:	10017c11 	.word	0x10017c11
100108b0:	1000f791 	.word	0x1000f791

100108b4 <get_gap_local_addr_type>:
100108b4:	4b04      	ldr	r3, [pc, #16]	; (100108c8 <get_gap_local_addr_type+0x14>)
100108b6:	2001      	movs	r0, #1
100108b8:	791b      	ldrb	r3, [r3, #4]
100108ba:	2b02      	cmp	r3, #2
100108bc:	d003      	beq.n	100108c6 <get_gap_local_addr_type+0x12>
100108be:	3b03      	subs	r3, #3
100108c0:	4258      	negs	r0, r3
100108c2:	4158      	adcs	r0, r3
100108c4:	0040      	lsls	r0, r0, #1
100108c6:	4770      	bx	lr
100108c8:	10017902 	.word	0x10017902

100108cc <gapm_adv_report_evt_handler>:
100108cc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100108ce:	7843      	ldrb	r3, [r0, #1]
100108d0:	1c05      	adds	r5, r0, #0
100108d2:	9301      	str	r3, [sp, #4]
100108d4:	466b      	mov	r3, sp
100108d6:	1c0c      	adds	r4, r1, #0
100108d8:	791b      	ldrb	r3, [r3, #4]
100108da:	7806      	ldrb	r6, [r0, #0]
100108dc:	2206      	movs	r2, #6
100108de:	704b      	strb	r3, [r1, #1]
100108e0:	1c88      	adds	r0, r1, #2
100108e2:	4f1b      	ldr	r7, [pc, #108]	; (10010950 <gapm_adv_report_evt_handler+0x84>)
100108e4:	1ca9      	adds	r1, r5, #2
100108e6:	47b8      	blx	r7
100108e8:	1c20      	adds	r0, r4, #0
100108ea:	1c29      	adds	r1, r5, #0
100108ec:	7a2a      	ldrb	r2, [r5, #8]
100108ee:	3008      	adds	r0, #8
100108f0:	77c2      	strb	r2, [r0, #31]
100108f2:	3109      	adds	r1, #9
100108f4:	3528      	adds	r5, #40	; 0x28
100108f6:	47b8      	blx	r7
100108f8:	782b      	ldrb	r3, [r5, #0]
100108fa:	b25a      	sxtb	r2, r3
100108fc:	2a00      	cmp	r2, #0
100108fe:	da01      	bge.n	10010904 <gapm_adv_report_evt_handler+0x38>
10010900:	3301      	adds	r3, #1
10010902:	b2db      	uxtb	r3, r3
10010904:	1c22      	adds	r2, r4, #0
10010906:	3228      	adds	r2, #40	; 0x28
10010908:	7013      	strb	r3, [r2, #0]
1001090a:	2200      	movs	r2, #0
1001090c:	9b01      	ldr	r3, [sp, #4]
1001090e:	4293      	cmp	r3, r2
10010910:	d00a      	beq.n	10010928 <gapm_adv_report_evt_handler+0x5c>
10010912:	79e3      	ldrb	r3, [r4, #7]
10010914:	323f      	adds	r2, #63	; 0x3f
10010916:	1c19      	adds	r1, r3, #0
10010918:	4391      	bics	r1, r2
1001091a:	3a3e      	subs	r2, #62	; 0x3e
1001091c:	29c0      	cmp	r1, #192	; 0xc0
1001091e:	d003      	beq.n	10010928 <gapm_adv_report_evt_handler+0x5c>
10010920:	065b      	lsls	r3, r3, #25
10010922:	0fdb      	lsrs	r3, r3, #31
10010924:	3202      	adds	r2, #2
10010926:	1ad2      	subs	r2, r2, r3
10010928:	7062      	strb	r2, [r4, #1]
1001092a:	2e04      	cmp	r6, #4
1001092c:	d80f      	bhi.n	1001094e <gapm_adv_report_evt_handler+0x82>
1001092e:	1c30      	adds	r0, r6, #0
10010930:	f000 fbf6 	bl	10011120 <__gnu_thumb1_case_uqi>
10010934:	09070503 	.word	0x09070503
10010938:	0b          	.byte	0x0b
10010939:	00          	.byte	0x00
1001093a:	2300      	movs	r3, #0
1001093c:	e006      	b.n	1001094c <gapm_adv_report_evt_handler+0x80>
1001093e:	2301      	movs	r3, #1
10010940:	e004      	b.n	1001094c <gapm_adv_report_evt_handler+0x80>
10010942:	2302      	movs	r3, #2
10010944:	e002      	b.n	1001094c <gapm_adv_report_evt_handler+0x80>
10010946:	2303      	movs	r3, #3
10010948:	e000      	b.n	1001094c <gapm_adv_report_evt_handler+0x80>
1001094a:	2305      	movs	r3, #5
1001094c:	7023      	strb	r3, [r4, #0]
1001094e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010950:	10012297 	.word	0x10012297

10010954 <gapm_resolv_addr_cmd_handler>:
10010954:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010956:	2314      	movs	r3, #20
10010958:	4c12      	ldr	r4, [pc, #72]	; (100109a4 <gapm_resolv_addr_cmd_handler+0x50>)
1001095a:	1c17      	adds	r7, r2, #0
1001095c:	7023      	strb	r3, [r4, #0]
1001095e:	3b07      	subs	r3, #7
10010960:	7063      	strb	r3, [r4, #1]
10010962:	70a3      	strb	r3, [r4, #2]
10010964:	2300      	movs	r3, #0
10010966:	70e3      	strb	r3, [r4, #3]
10010968:	4b0f      	ldr	r3, [pc, #60]	; (100109a8 <gapm_resolv_addr_cmd_handler+0x54>)
1001096a:	1c05      	adds	r5, r0, #0
1001096c:	881a      	ldrh	r2, [r3, #0]
1001096e:	881b      	ldrh	r3, [r3, #0]
10010970:	4e0e      	ldr	r6, [pc, #56]	; (100109ac <gapm_resolv_addr_cmd_handler+0x58>)
10010972:	0a1b      	lsrs	r3, r3, #8
10010974:	7163      	strb	r3, [r4, #5]
10010976:	2317      	movs	r3, #23
10010978:	012d      	lsls	r5, r5, #4
1001097a:	7122      	strb	r2, [r4, #4]
1001097c:	7260      	strb	r0, [r4, #9]
1001097e:	2206      	movs	r2, #6
10010980:	480b      	ldr	r0, [pc, #44]	; (100109b0 <gapm_resolv_addr_cmd_handler+0x5c>)
10010982:	7223      	strb	r3, [r4, #8]
10010984:	47b0      	blx	r6
10010986:	1c39      	adds	r1, r7, #0
10010988:	1c2a      	adds	r2, r5, #0
1001098a:	480a      	ldr	r0, [pc, #40]	; (100109b4 <gapm_resolv_addr_cmd_handler+0x60>)
1001098c:	47b0      	blx	r6
1001098e:	1c29      	adds	r1, r5, #0
10010990:	3110      	adds	r1, #16
10010992:	1c0b      	adds	r3, r1, #0
10010994:	3b08      	subs	r3, #8
10010996:	71a3      	strb	r3, [r4, #6]
10010998:	121b      	asrs	r3, r3, #8
1001099a:	71e3      	strb	r3, [r4, #7]
1001099c:	1c20      	adds	r0, r4, #0
1001099e:	4b06      	ldr	r3, [pc, #24]	; (100109b8 <gapm_resolv_addr_cmd_handler+0x64>)
100109a0:	4798      	blx	r3
100109a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100109a4:	10017be0 	.word	0x10017be0
100109a8:	10017870 	.word	0x10017870
100109ac:	10012297 	.word	0x10012297
100109b0:	10017bea 	.word	0x10017bea
100109b4:	10017bf0 	.word	0x10017bf0
100109b8:	1000f791 	.word	0x1000f791

100109bc <gapm_addr_solved_ind_handler>:
100109bc:	b570      	push	{r4, r5, r6, lr}
100109be:	1c04      	adds	r4, r0, #0
100109c0:	1c08      	adds	r0, r1, #0
100109c2:	1c0d      	adds	r5, r1, #0
100109c4:	4e05      	ldr	r6, [pc, #20]	; (100109dc <gapm_addr_solved_ind_handler+0x20>)
100109c6:	1c21      	adds	r1, r4, #0
100109c8:	2206      	movs	r2, #6
100109ca:	3011      	adds	r0, #17
100109cc:	47b0      	blx	r6
100109ce:	1c68      	adds	r0, r5, #1
100109d0:	1da1      	adds	r1, r4, #6
100109d2:	2210      	movs	r2, #16
100109d4:	47b0      	blx	r6
100109d6:	2300      	movs	r3, #0
100109d8:	702b      	strb	r3, [r5, #0]
100109da:	bd70      	pop	{r4, r5, r6, pc}
100109dc:	10012297 	.word	0x10012297

100109e0 <gapm_profile_added_ind_handler>:
100109e0:	b510      	push	{r4, lr}
100109e2:	7843      	ldrb	r3, [r0, #1]
100109e4:	7902      	ldrb	r2, [r0, #4]
100109e6:	7944      	ldrb	r4, [r0, #5]
100109e8:	7800      	ldrb	r0, [r0, #0]
100109ea:	021b      	lsls	r3, r3, #8
100109ec:	4303      	orrs	r3, r0
100109ee:	2b1b      	cmp	r3, #27
100109f0:	d104      	bne.n	100109fc <gapm_profile_added_ind_handler+0x1c>
100109f2:	2300      	movs	r3, #0
100109f4:	700b      	strb	r3, [r1, #0]
100109f6:	0223      	lsls	r3, r4, #8
100109f8:	4313      	orrs	r3, r2
100109fa:	804b      	strh	r3, [r1, #2]
100109fc:	203b      	movs	r0, #59	; 0x3b
100109fe:	bd10      	pop	{r4, pc}

10010a00 <gattc_read_req_ind_parser>:
10010a00:	7843      	ldrb	r3, [r0, #1]
10010a02:	7802      	ldrb	r2, [r0, #0]
10010a04:	021b      	lsls	r3, r3, #8
10010a06:	4313      	orrs	r3, r2
10010a08:	804b      	strh	r3, [r1, #2]
10010a0a:	4770      	bx	lr

10010a0c <gattc_write_req_ind_parser>:
10010a0c:	b508      	push	{r3, lr}
10010a0e:	1c13      	adds	r3, r2, #0
10010a10:	0a00      	lsrs	r0, r0, #8
10010a12:	8010      	strh	r0, [r2, #0]
10010a14:	784a      	ldrb	r2, [r1, #1]
10010a16:	7808      	ldrb	r0, [r1, #0]
10010a18:	0212      	lsls	r2, r2, #8
10010a1a:	4302      	orrs	r2, r0
10010a1c:	805a      	strh	r2, [r3, #2]
10010a1e:	78ca      	ldrb	r2, [r1, #3]
10010a20:	7888      	ldrb	r0, [r1, #2]
10010a22:	0212      	lsls	r2, r2, #8
10010a24:	4302      	orrs	r2, r0
10010a26:	809a      	strh	r2, [r3, #4]
10010a28:	794a      	ldrb	r2, [r1, #5]
10010a2a:	7908      	ldrb	r0, [r1, #4]
10010a2c:	0212      	lsls	r2, r2, #8
10010a2e:	4302      	orrs	r2, r0
10010a30:	80da      	strh	r2, [r3, #6]
10010a32:	3308      	adds	r3, #8
10010a34:	1c18      	adds	r0, r3, #0
10010a36:	3106      	adds	r1, #6
10010a38:	4b01      	ldr	r3, [pc, #4]	; (10010a40 <gattc_write_req_ind_parser+0x34>)
10010a3a:	4798      	blx	r3
10010a3c:	bd08      	pop	{r3, pc}
10010a3e:	46c0      	nop			; (mov r8, r8)
10010a40:	10012297 	.word	0x10012297

10010a44 <gattc_att_info_req_parser>:
10010a44:	7843      	ldrb	r3, [r0, #1]
10010a46:	7802      	ldrb	r2, [r0, #0]
10010a48:	021b      	lsls	r3, r3, #8
10010a4a:	4313      	orrs	r3, r2
10010a4c:	800b      	strh	r3, [r1, #0]
10010a4e:	4770      	bx	lr

10010a50 <gattc_read_cfm>:
10010a50:	b538      	push	{r3, r4, r5, lr}
10010a52:	2514      	movs	r5, #20
10010a54:	1c1c      	adds	r4, r3, #0
10010a56:	4b14      	ldr	r3, [pc, #80]	; (10010aa8 <gattc_read_cfm+0x58>)
10010a58:	70d9      	strb	r1, [r3, #3]
10010a5a:	4914      	ldr	r1, [pc, #80]	; (10010aac <gattc_read_cfm+0x5c>)
10010a5c:	701d      	strb	r5, [r3, #0]
10010a5e:	3d08      	subs	r5, #8
10010a60:	705d      	strb	r5, [r3, #1]
10010a62:	709d      	strb	r5, [r3, #2]
10010a64:	880d      	ldrh	r5, [r1, #0]
10010a66:	8809      	ldrh	r1, [r1, #0]
10010a68:	7218      	strb	r0, [r3, #8]
10010a6a:	0a09      	lsrs	r1, r1, #8
10010a6c:	7159      	strb	r1, [r3, #5]
10010a6e:	0a00      	lsrs	r0, r0, #8
10010a70:	0a21      	lsrs	r1, r4, #8
10010a72:	711d      	strb	r5, [r3, #4]
10010a74:	7258      	strb	r0, [r3, #9]
10010a76:	729c      	strb	r4, [r3, #10]
10010a78:	72d9      	strb	r1, [r3, #11]
10010a7a:	731a      	strb	r2, [r3, #12]
10010a7c:	1c1d      	adds	r5, r3, #0
10010a7e:	2c00      	cmp	r4, #0
10010a80:	d007      	beq.n	10010a92 <gattc_read_cfm+0x42>
10010a82:	9904      	ldr	r1, [sp, #16]
10010a84:	1c22      	adds	r2, r4, #0
10010a86:	480a      	ldr	r0, [pc, #40]	; (10010ab0 <gattc_read_cfm+0x60>)
10010a88:	4b0a      	ldr	r3, [pc, #40]	; (10010ab4 <gattc_read_cfm+0x64>)
10010a8a:	340d      	adds	r4, #13
10010a8c:	4798      	blx	r3
10010a8e:	b2a1      	uxth	r1, r4
10010a90:	e001      	b.n	10010a96 <gattc_read_cfm+0x46>
10010a92:	210e      	movs	r1, #14
10010a94:	735c      	strb	r4, [r3, #13]
10010a96:	1c0b      	adds	r3, r1, #0
10010a98:	3b08      	subs	r3, #8
10010a9a:	71ab      	strb	r3, [r5, #6]
10010a9c:	121b      	asrs	r3, r3, #8
10010a9e:	71eb      	strb	r3, [r5, #7]
10010aa0:	1c28      	adds	r0, r5, #0
10010aa2:	4b05      	ldr	r3, [pc, #20]	; (10010ab8 <gattc_read_cfm+0x68>)
10010aa4:	4798      	blx	r3
10010aa6:	bd38      	pop	{r3, r4, r5, pc}
10010aa8:	10017be0 	.word	0x10017be0
10010aac:	10017870 	.word	0x10017870
10010ab0:	10017bed 	.word	0x10017bed
10010ab4:	10012297 	.word	0x10012297
10010ab8:	1000f791 	.word	0x1000f791

10010abc <gattc_write_cfm>:
10010abc:	4b0d      	ldr	r3, [pc, #52]	; (10010af4 <gattc_write_cfm+0x38>)
10010abe:	b510      	push	{r4, lr}
10010ac0:	729a      	strb	r2, [r3, #10]
10010ac2:	2203      	movs	r2, #3
10010ac4:	2416      	movs	r4, #22
10010ac6:	719a      	strb	r2, [r3, #6]
10010ac8:	2200      	movs	r2, #0
10010aca:	70d9      	strb	r1, [r3, #3]
10010acc:	490a      	ldr	r1, [pc, #40]	; (10010af8 <gattc_write_cfm+0x3c>)
10010ace:	701c      	strb	r4, [r3, #0]
10010ad0:	3c0a      	subs	r4, #10
10010ad2:	705c      	strb	r4, [r3, #1]
10010ad4:	709c      	strb	r4, [r3, #2]
10010ad6:	880c      	ldrh	r4, [r1, #0]
10010ad8:	8809      	ldrh	r1, [r1, #0]
10010ada:	7218      	strb	r0, [r3, #8]
10010adc:	0a09      	lsrs	r1, r1, #8
10010ade:	0a00      	lsrs	r0, r0, #8
10010ae0:	711c      	strb	r4, [r3, #4]
10010ae2:	7159      	strb	r1, [r3, #5]
10010ae4:	7258      	strb	r0, [r3, #9]
10010ae6:	71da      	strb	r2, [r3, #7]
10010ae8:	1c18      	adds	r0, r3, #0
10010aea:	210b      	movs	r1, #11
10010aec:	4b03      	ldr	r3, [pc, #12]	; (10010afc <gattc_write_cfm+0x40>)
10010aee:	4798      	blx	r3
10010af0:	bd10      	pop	{r4, pc}
10010af2:	46c0      	nop			; (mov r8, r8)
10010af4:	10017be0 	.word	0x10017be0
10010af8:	10017870 	.word	0x10017870
10010afc:	1000f791 	.word	0x1000f791

10010b00 <gattc_att_info_cfm>:
10010b00:	b538      	push	{r3, r4, r5, lr}
10010b02:	4c0e      	ldr	r4, [pc, #56]	; (10010b3c <gattc_att_info_cfm+0x3c>)
10010b04:	2518      	movs	r5, #24
10010b06:	7323      	strb	r3, [r4, #12]
10010b08:	2305      	movs	r3, #5
10010b0a:	71a3      	strb	r3, [r4, #6]
10010b0c:	2300      	movs	r3, #0
10010b0e:	70e1      	strb	r1, [r4, #3]
10010b10:	490b      	ldr	r1, [pc, #44]	; (10010b40 <gattc_att_info_cfm+0x40>)
10010b12:	7025      	strb	r5, [r4, #0]
10010b14:	3d0c      	subs	r5, #12
10010b16:	7065      	strb	r5, [r4, #1]
10010b18:	70a5      	strb	r5, [r4, #2]
10010b1a:	880d      	ldrh	r5, [r1, #0]
10010b1c:	8809      	ldrh	r1, [r1, #0]
10010b1e:	7220      	strb	r0, [r4, #8]
10010b20:	0a09      	lsrs	r1, r1, #8
10010b22:	0a00      	lsrs	r0, r0, #8
10010b24:	7161      	strb	r1, [r4, #5]
10010b26:	7260      	strb	r0, [r4, #9]
10010b28:	72a2      	strb	r2, [r4, #10]
10010b2a:	71e3      	strb	r3, [r4, #7]
10010b2c:	0a12      	lsrs	r2, r2, #8
10010b2e:	1c20      	adds	r0, r4, #0
10010b30:	210d      	movs	r1, #13
10010b32:	4b04      	ldr	r3, [pc, #16]	; (10010b44 <gattc_att_info_cfm+0x44>)
10010b34:	7125      	strb	r5, [r4, #4]
10010b36:	72e2      	strb	r2, [r4, #11]
10010b38:	4798      	blx	r3
10010b3a:	bd38      	pop	{r3, r4, r5, pc}
10010b3c:	10017be0 	.word	0x10017be0
10010b40:	10017870 	.word	0x10017870
10010b44:	1000f791 	.word	0x1000f791

10010b48 <gattc_send_evt_cmd_handler>:
10010b48:	b570      	push	{r4, r5, r6, lr}
10010b4a:	2610      	movs	r6, #16
10010b4c:	ac04      	add	r4, sp, #16
10010b4e:	8825      	ldrh	r5, [r4, #0]
10010b50:	4c15      	ldr	r4, [pc, #84]	; (10010ba8 <gattc_send_evt_cmd_handler+0x60>)
10010b52:	70e2      	strb	r2, [r4, #3]
10010b54:	4a15      	ldr	r2, [pc, #84]	; (10010bac <gattc_send_evt_cmd_handler+0x64>)
10010b56:	7026      	strb	r6, [r4, #0]
10010b58:	3e04      	subs	r6, #4
10010b5a:	7066      	strb	r6, [r4, #1]
10010b5c:	70a6      	strb	r6, [r4, #2]
10010b5e:	8816      	ldrh	r6, [r2, #0]
10010b60:	8812      	ldrh	r2, [r2, #0]
10010b62:	7220      	strb	r0, [r4, #8]
10010b64:	0a12      	lsrs	r2, r2, #8
10010b66:	7162      	strb	r2, [r4, #5]
10010b68:	4a11      	ldr	r2, [pc, #68]	; (10010bb0 <gattc_send_evt_cmd_handler+0x68>)
10010b6a:	7321      	strb	r1, [r4, #12]
10010b6c:	8812      	ldrh	r2, [r2, #0]
10010b6e:	73a5      	strb	r5, [r4, #14]
10010b70:	3201      	adds	r2, #1
10010b72:	7262      	strb	r2, [r4, #9]
10010b74:	1212      	asrs	r2, r2, #8
10010b76:	72a2      	strb	r2, [r4, #10]
10010b78:	2200      	movs	r2, #0
10010b7a:	72e2      	strb	r2, [r4, #11]
10010b7c:	0a0a      	lsrs	r2, r1, #8
10010b7e:	7362      	strb	r2, [r4, #13]
10010b80:	0a2a      	lsrs	r2, r5, #8
10010b82:	73e2      	strb	r2, [r4, #15]
10010b84:	1c19      	adds	r1, r3, #0
10010b86:	1c2a      	adds	r2, r5, #0
10010b88:	4b0a      	ldr	r3, [pc, #40]	; (10010bb4 <gattc_send_evt_cmd_handler+0x6c>)
10010b8a:	3510      	adds	r5, #16
10010b8c:	480a      	ldr	r0, [pc, #40]	; (10010bb8 <gattc_send_evt_cmd_handler+0x70>)
10010b8e:	7126      	strb	r6, [r4, #4]
10010b90:	4798      	blx	r3
10010b92:	b2a9      	uxth	r1, r5
10010b94:	1c0b      	adds	r3, r1, #0
10010b96:	3b08      	subs	r3, #8
10010b98:	71a3      	strb	r3, [r4, #6]
10010b9a:	121b      	asrs	r3, r3, #8
10010b9c:	71e3      	strb	r3, [r4, #7]
10010b9e:	1c20      	adds	r0, r4, #0
10010ba0:	4b06      	ldr	r3, [pc, #24]	; (10010bbc <gattc_send_evt_cmd_handler+0x74>)
10010ba2:	4798      	blx	r3
10010ba4:	bd70      	pop	{r4, r5, r6, pc}
10010ba6:	46c0      	nop			; (mov r8, r8)
10010ba8:	10017be0 	.word	0x10017be0
10010bac:	10017870 	.word	0x10017870
10010bb0:	10016ab0 	.word	0x10016ab0
10010bb4:	10012297 	.word	0x10012297
10010bb8:	10017bf0 	.word	0x10017bf0
10010bbc:	1000f791 	.word	0x1000f791

10010bc0 <gattc_event_cfm_handler>:
10010bc0:	220e      	movs	r2, #14
10010bc2:	b508      	push	{r3, lr}
10010bc4:	4b0b      	ldr	r3, [pc, #44]	; (10010bf4 <gattc_event_cfm_handler+0x34>)
10010bc6:	701a      	strb	r2, [r3, #0]
10010bc8:	3a02      	subs	r2, #2
10010bca:	705a      	strb	r2, [r3, #1]
10010bcc:	709a      	strb	r2, [r3, #2]
10010bce:	4a0a      	ldr	r2, [pc, #40]	; (10010bf8 <gattc_event_cfm_handler+0x38>)
10010bd0:	70d8      	strb	r0, [r3, #3]
10010bd2:	8810      	ldrh	r0, [r2, #0]
10010bd4:	8812      	ldrh	r2, [r2, #0]
10010bd6:	7219      	strb	r1, [r3, #8]
10010bd8:	0a12      	lsrs	r2, r2, #8
10010bda:	715a      	strb	r2, [r3, #5]
10010bdc:	2202      	movs	r2, #2
10010bde:	719a      	strb	r2, [r3, #6]
10010be0:	2200      	movs	r2, #0
10010be2:	0a09      	lsrs	r1, r1, #8
10010be4:	7118      	strb	r0, [r3, #4]
10010be6:	7259      	strb	r1, [r3, #9]
10010be8:	71da      	strb	r2, [r3, #7]
10010bea:	1c18      	adds	r0, r3, #0
10010bec:	210a      	movs	r1, #10
10010bee:	4b03      	ldr	r3, [pc, #12]	; (10010bfc <gattc_event_cfm_handler+0x3c>)
10010bf0:	4798      	blx	r3
10010bf2:	bd08      	pop	{r3, pc}
10010bf4:	10017be0 	.word	0x10017be0
10010bf8:	10017870 	.word	0x10017870
10010bfc:	1000f791 	.word	0x1000f791

10010c00 <gattc_disc_svc_ind_parser>:
10010c00:	b570      	push	{r4, r5, r6, lr}
10010c02:	1c15      	adds	r5, r2, #0
10010c04:	0a00      	lsrs	r0, r0, #8
10010c06:	8010      	strh	r0, [r2, #0]
10010c08:	784b      	ldrb	r3, [r1, #1]
10010c0a:	780a      	ldrb	r2, [r1, #0]
10010c0c:	021b      	lsls	r3, r3, #8
10010c0e:	4313      	orrs	r3, r2
10010c10:	806b      	strh	r3, [r5, #2]
10010c12:	78cb      	ldrb	r3, [r1, #3]
10010c14:	788a      	ldrb	r2, [r1, #2]
10010c16:	021b      	lsls	r3, r3, #8
10010c18:	4313      	orrs	r3, r2
10010c1a:	80ab      	strh	r3, [r5, #4]
10010c1c:	790e      	ldrb	r6, [r1, #4]
10010c1e:	4b05      	ldr	r3, [pc, #20]	; (10010c34 <gattc_disc_svc_ind_parser+0x34>)
10010c20:	1c30      	adds	r0, r6, #0
10010c22:	1c0c      	adds	r4, r1, #0
10010c24:	4798      	blx	r3
10010c26:	1c32      	adds	r2, r6, #0
10010c28:	71a8      	strb	r0, [r5, #6]
10010c2a:	1d61      	adds	r1, r4, #5
10010c2c:	1de8      	adds	r0, r5, #7
10010c2e:	4b02      	ldr	r3, [pc, #8]	; (10010c38 <gattc_disc_svc_ind_parser+0x38>)
10010c30:	4798      	blx	r3
10010c32:	bd70      	pop	{r4, r5, r6, pc}
10010c34:	1000ead1 	.word	0x1000ead1
10010c38:	10012297 	.word	0x10012297

10010c3c <gattc_disc_svc_incl_ind_parser>:
10010c3c:	b570      	push	{r4, r5, r6, lr}
10010c3e:	1c15      	adds	r5, r2, #0
10010c40:	0a00      	lsrs	r0, r0, #8
10010c42:	8010      	strh	r0, [r2, #0]
10010c44:	784b      	ldrb	r3, [r1, #1]
10010c46:	780a      	ldrb	r2, [r1, #0]
10010c48:	021b      	lsls	r3, r3, #8
10010c4a:	4313      	orrs	r3, r2
10010c4c:	806b      	strh	r3, [r5, #2]
10010c4e:	78cb      	ldrb	r3, [r1, #3]
10010c50:	788a      	ldrb	r2, [r1, #2]
10010c52:	021b      	lsls	r3, r3, #8
10010c54:	4313      	orrs	r3, r2
10010c56:	80ab      	strh	r3, [r5, #4]
10010c58:	794b      	ldrb	r3, [r1, #5]
10010c5a:	790a      	ldrb	r2, [r1, #4]
10010c5c:	021b      	lsls	r3, r3, #8
10010c5e:	4313      	orrs	r3, r2
10010c60:	80eb      	strh	r3, [r5, #6]
10010c62:	798e      	ldrb	r6, [r1, #6]
10010c64:	4b05      	ldr	r3, [pc, #20]	; (10010c7c <gattc_disc_svc_incl_ind_parser+0x40>)
10010c66:	1c30      	adds	r0, r6, #0
10010c68:	1c0c      	adds	r4, r1, #0
10010c6a:	4798      	blx	r3
10010c6c:	7228      	strb	r0, [r5, #8]
10010c6e:	1c28      	adds	r0, r5, #0
10010c70:	1c32      	adds	r2, r6, #0
10010c72:	1de1      	adds	r1, r4, #7
10010c74:	4b02      	ldr	r3, [pc, #8]	; (10010c80 <gattc_disc_svc_incl_ind_parser+0x44>)
10010c76:	3009      	adds	r0, #9
10010c78:	4798      	blx	r3
10010c7a:	bd70      	pop	{r4, r5, r6, pc}
10010c7c:	1000ead1 	.word	0x1000ead1
10010c80:	10012297 	.word	0x10012297

10010c84 <gattc_disc_char_ind_parser>:
10010c84:	b570      	push	{r4, r5, r6, lr}
10010c86:	1c15      	adds	r5, r2, #0
10010c88:	0a00      	lsrs	r0, r0, #8
10010c8a:	8010      	strh	r0, [r2, #0]
10010c8c:	784b      	ldrb	r3, [r1, #1]
10010c8e:	780a      	ldrb	r2, [r1, #0]
10010c90:	021b      	lsls	r3, r3, #8
10010c92:	4313      	orrs	r3, r2
10010c94:	806b      	strh	r3, [r5, #2]
10010c96:	78cb      	ldrb	r3, [r1, #3]
10010c98:	788a      	ldrb	r2, [r1, #2]
10010c9a:	021b      	lsls	r3, r3, #8
10010c9c:	4313      	orrs	r3, r2
10010c9e:	80ab      	strh	r3, [r5, #4]
10010ca0:	790b      	ldrb	r3, [r1, #4]
10010ca2:	1c0c      	adds	r4, r1, #0
10010ca4:	71ab      	strb	r3, [r5, #6]
10010ca6:	794e      	ldrb	r6, [r1, #5]
10010ca8:	4b05      	ldr	r3, [pc, #20]	; (10010cc0 <gattc_disc_char_ind_parser+0x3c>)
10010caa:	1c30      	adds	r0, r6, #0
10010cac:	4798      	blx	r3
10010cae:	71e8      	strb	r0, [r5, #7]
10010cb0:	1c28      	adds	r0, r5, #0
10010cb2:	1c32      	adds	r2, r6, #0
10010cb4:	1da1      	adds	r1, r4, #6
10010cb6:	4b03      	ldr	r3, [pc, #12]	; (10010cc4 <gattc_disc_char_ind_parser+0x40>)
10010cb8:	3008      	adds	r0, #8
10010cba:	4798      	blx	r3
10010cbc:	bd70      	pop	{r4, r5, r6, pc}
10010cbe:	46c0      	nop			; (mov r8, r8)
10010cc0:	1000ead1 	.word	0x1000ead1
10010cc4:	10012297 	.word	0x10012297

10010cc8 <gattc_disc_char_desc_ind_parser>:
10010cc8:	b570      	push	{r4, r5, r6, lr}
10010cca:	1c15      	adds	r5, r2, #0
10010ccc:	0a00      	lsrs	r0, r0, #8
10010cce:	8010      	strh	r0, [r2, #0]
10010cd0:	784b      	ldrb	r3, [r1, #1]
10010cd2:	780a      	ldrb	r2, [r1, #0]
10010cd4:	021b      	lsls	r3, r3, #8
10010cd6:	4313      	orrs	r3, r2
10010cd8:	806b      	strh	r3, [r5, #2]
10010cda:	788e      	ldrb	r6, [r1, #2]
10010cdc:	4b05      	ldr	r3, [pc, #20]	; (10010cf4 <gattc_disc_char_desc_ind_parser+0x2c>)
10010cde:	1c30      	adds	r0, r6, #0
10010ce0:	1c0c      	adds	r4, r1, #0
10010ce2:	4798      	blx	r3
10010ce4:	1c32      	adds	r2, r6, #0
10010ce6:	7128      	strb	r0, [r5, #4]
10010ce8:	1ce1      	adds	r1, r4, #3
10010cea:	1d68      	adds	r0, r5, #5
10010cec:	4b02      	ldr	r3, [pc, #8]	; (10010cf8 <gattc_disc_char_desc_ind_parser+0x30>)
10010cee:	4798      	blx	r3
10010cf0:	bd70      	pop	{r4, r5, r6, pc}
10010cf2:	46c0      	nop			; (mov r8, r8)
10010cf4:	1000ead1 	.word	0x1000ead1
10010cf8:	10012297 	.word	0x10012297

10010cfc <gattc_event_ind_and_notification_parser>:
10010cfc:	b510      	push	{r4, lr}
10010cfe:	780c      	ldrb	r4, [r1, #0]
10010d00:	1c13      	adds	r3, r2, #0
10010d02:	2c12      	cmp	r4, #18
10010d04:	d10e      	bne.n	10010d24 <gattc_event_ind_and_notification_parser+0x28>
10010d06:	0a00      	lsrs	r0, r0, #8
10010d08:	8010      	strh	r0, [r2, #0]
10010d0a:	788a      	ldrb	r2, [r1, #2]
10010d0c:	709a      	strb	r2, [r3, #2]
10010d0e:	7948      	ldrb	r0, [r1, #5]
10010d10:	790c      	ldrb	r4, [r1, #4]
10010d12:	0200      	lsls	r0, r0, #8
10010d14:	4320      	orrs	r0, r4
10010d16:	8098      	strh	r0, [r3, #4]
10010d18:	3106      	adds	r1, #6
10010d1a:	1d98      	adds	r0, r3, #6
10010d1c:	4b0b      	ldr	r3, [pc, #44]	; (10010d4c <gattc_event_ind_and_notification_parser+0x50>)
10010d1e:	4798      	blx	r3
10010d20:	221b      	movs	r2, #27
10010d22:	e010      	b.n	10010d46 <gattc_event_ind_and_notification_parser+0x4a>
10010d24:	2200      	movs	r2, #0
10010d26:	2c13      	cmp	r4, #19
10010d28:	d10d      	bne.n	10010d46 <gattc_event_ind_and_notification_parser+0x4a>
10010d2a:	0a00      	lsrs	r0, r0, #8
10010d2c:	8018      	strh	r0, [r3, #0]
10010d2e:	788a      	ldrb	r2, [r1, #2]
10010d30:	709a      	strb	r2, [r3, #2]
10010d32:	7908      	ldrb	r0, [r1, #4]
10010d34:	78cc      	ldrb	r4, [r1, #3]
10010d36:	0200      	lsls	r0, r0, #8
10010d38:	4320      	orrs	r0, r4
10010d3a:	8098      	strh	r0, [r3, #4]
10010d3c:	3106      	adds	r1, #6
10010d3e:	1d98      	adds	r0, r3, #6
10010d40:	4b02      	ldr	r3, [pc, #8]	; (10010d4c <gattc_event_ind_and_notification_parser+0x50>)
10010d42:	4798      	blx	r3
10010d44:	221c      	movs	r2, #28
10010d46:	1c10      	adds	r0, r2, #0
10010d48:	bd10      	pop	{r4, pc}
10010d4a:	46c0      	nop			; (mov r8, r8)
10010d4c:	10012297 	.word	0x10012297

10010d50 <gattc_complete_evt_handler>:
10010d50:	b500      	push	{lr}
10010d52:	0a00      	lsrs	r0, r0, #8
10010d54:	8010      	strh	r0, [r2, #0]
10010d56:	7808      	ldrb	r0, [r1, #0]
10010d58:	7090      	strb	r0, [r2, #2]
10010d5a:	784b      	ldrb	r3, [r1, #1]
10010d5c:	3801      	subs	r0, #1
10010d5e:	70d3      	strb	r3, [r2, #3]
10010d60:	2813      	cmp	r0, #19
10010d62:	d82c      	bhi.n	10010dbe <gattc_complete_evt_handler+0x6e>
10010d64:	f000 f9dc 	bl	10011120 <__gnu_thumb1_case_uqi>
10010d68:	0a0a0a0c 	.word	0x0a0a0a0c
10010d6c:	210a0a0a 	.word	0x210a0a0a
10010d70:	111f2121 	.word	0x111f2121
10010d74:	2b111111 	.word	0x2b111111
10010d78:	2919132b 	.word	0x2919132b
10010d7c:	2017      	movs	r0, #23
10010d7e:	e01f      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010d80:	2024      	movs	r0, #36	; 0x24
10010d82:	2b00      	cmp	r3, #0
10010d84:	d11c      	bne.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010d86:	3017      	adds	r0, #23
10010d88:	e01a      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010d8a:	2025      	movs	r0, #37	; 0x25
10010d8c:	e018      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010d8e:	4a0d      	ldr	r2, [pc, #52]	; (10010dc4 <gattc_complete_evt_handler+0x74>)
10010d90:	201d      	movs	r0, #29
10010d92:	6813      	ldr	r3, [r2, #0]
10010d94:	3b01      	subs	r3, #1
10010d96:	6013      	str	r3, [r2, #0]
10010d98:	e012      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010d9a:	4a0a      	ldr	r2, [pc, #40]	; (10010dc4 <gattc_complete_evt_handler+0x74>)
10010d9c:	201e      	movs	r0, #30
10010d9e:	6813      	ldr	r3, [r2, #0]
10010da0:	3b01      	subs	r3, #1
10010da2:	6013      	str	r3, [r2, #0]
10010da4:	e00c      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010da6:	2019      	movs	r0, #25
10010da8:	e00a      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010daa:	203b      	movs	r0, #59	; 0x3b
10010dac:	2b00      	cmp	r3, #0
10010dae:	d007      	beq.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010db0:	2182      	movs	r1, #130	; 0x82
10010db2:	0089      	lsls	r1, r1, #2
10010db4:	5453      	strb	r3, [r2, r1]
10010db6:	3823      	subs	r0, #35	; 0x23
10010db8:	e002      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010dba:	2021      	movs	r0, #33	; 0x21
10010dbc:	e000      	b.n	10010dc0 <gattc_complete_evt_handler+0x70>
10010dbe:	2000      	movs	r0, #0
10010dc0:	bd00      	pop	{pc}
10010dc2:	46c0      	nop			; (mov r8, r8)
10010dc4:	10016ab4 	.word	0x10016ab4

10010dc8 <gattc_event_mtu_changed_ind_parser>:
10010dc8:	0a00      	lsrs	r0, r0, #8
10010dca:	8010      	strh	r0, [r2, #0]
10010dcc:	784b      	ldrb	r3, [r1, #1]
10010dce:	7809      	ldrb	r1, [r1, #0]
10010dd0:	021b      	lsls	r3, r3, #8
10010dd2:	430b      	orrs	r3, r1
10010dd4:	8053      	strh	r3, [r2, #2]
10010dd6:	4770      	bx	lr

10010dd8 <gattc_read_ind_parser>:
10010dd8:	0a00      	lsrs	r0, r0, #8
10010dda:	b508      	push	{r3, lr}
10010ddc:	8010      	strh	r0, [r2, #0]
10010dde:	1c13      	adds	r3, r2, #0
10010de0:	2282      	movs	r2, #130	; 0x82
10010de2:	2000      	movs	r0, #0
10010de4:	0092      	lsls	r2, r2, #2
10010de6:	5498      	strb	r0, [r3, r2]
10010de8:	784a      	ldrb	r2, [r1, #1]
10010dea:	7808      	ldrb	r0, [r1, #0]
10010dec:	0212      	lsls	r2, r2, #8
10010dee:	4302      	orrs	r2, r0
10010df0:	805a      	strh	r2, [r3, #2]
10010df2:	78ca      	ldrb	r2, [r1, #3]
10010df4:	7888      	ldrb	r0, [r1, #2]
10010df6:	0212      	lsls	r2, r2, #8
10010df8:	4302      	orrs	r2, r0
10010dfa:	80da      	strh	r2, [r3, #6]
10010dfc:	794a      	ldrb	r2, [r1, #5]
10010dfe:	7908      	ldrb	r0, [r1, #4]
10010e00:	0212      	lsls	r2, r2, #8
10010e02:	4302      	orrs	r2, r0
10010e04:	809a      	strh	r2, [r3, #4]
10010e06:	3308      	adds	r3, #8
10010e08:	1c18      	adds	r0, r3, #0
10010e0a:	3106      	adds	r1, #6
10010e0c:	4b01      	ldr	r3, [pc, #4]	; (10010e14 <gattc_read_ind_parser+0x3c>)
10010e0e:	4798      	blx	r3
10010e10:	bd08      	pop	{r3, pc}
10010e12:	46c0      	nop			; (mov r8, r8)
10010e14:	10012297 	.word	0x10012297

10010e18 <gattc_svc_changed_cfg_ind_parser>:
10010e18:	0a00      	lsrs	r0, r0, #8
10010e1a:	8010      	strh	r0, [r2, #0]
10010e1c:	784b      	ldrb	r3, [r1, #1]
10010e1e:	7809      	ldrb	r1, [r1, #0]
10010e20:	021b      	lsls	r3, r3, #8
10010e22:	430b      	orrs	r3, r1
10010e24:	8053      	strh	r3, [r2, #2]
10010e26:	4770      	bx	lr

10010e28 <init_gattc_task_module>:
10010e28:	2300      	movs	r3, #0
10010e2a:	4a02      	ldr	r2, [pc, #8]	; (10010e34 <init_gattc_task_module+0xc>)
10010e2c:	8013      	strh	r3, [r2, #0]
10010e2e:	4a02      	ldr	r2, [pc, #8]	; (10010e38 <init_gattc_task_module+0x10>)
10010e30:	8013      	strh	r3, [r2, #0]
10010e32:	4770      	bx	lr
10010e34:	10016aae 	.word	0x10016aae
10010e38:	10016ab0 	.word	0x10016ab0

10010e3c <gattm_add_svc_req_handler>:
10010e3c:	2200      	movs	r2, #0
10010e3e:	210b      	movs	r1, #11
10010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e42:	1c04      	adds	r4, r0, #0
10010e44:	7943      	ldrb	r3, [r0, #5]
10010e46:	b085      	sub	sp, #20
10010e48:	9301      	str	r3, [sp, #4]
10010e4a:	ab02      	add	r3, sp, #8
10010e4c:	71da      	strb	r2, [r3, #7]
10010e4e:	4b37      	ldr	r3, [pc, #220]	; (10010f2c <gattm_add_svc_req_handler+0xf0>)
10010e50:	7059      	strb	r1, [r3, #1]
10010e52:	7099      	strb	r1, [r3, #2]
10010e54:	4936      	ldr	r1, [pc, #216]	; (10010f30 <gattm_add_svc_req_handler+0xf4>)
10010e56:	701a      	strb	r2, [r3, #0]
10010e58:	8808      	ldrh	r0, [r1, #0]
10010e5a:	8809      	ldrh	r1, [r1, #0]
10010e5c:	70da      	strb	r2, [r3, #3]
10010e5e:	0a09      	lsrs	r1, r1, #8
10010e60:	7118      	strb	r0, [r3, #4]
10010e62:	7159      	strb	r1, [r3, #5]
10010e64:	8821      	ldrh	r1, [r4, #0]
10010e66:	7219      	strb	r1, [r3, #8]
10010e68:	8821      	ldrh	r1, [r4, #0]
10010e6a:	0a09      	lsrs	r1, r1, #8
10010e6c:	7259      	strb	r1, [r3, #9]
10010e6e:	8861      	ldrh	r1, [r4, #2]
10010e70:	7299      	strb	r1, [r3, #10]
10010e72:	8861      	ldrh	r1, [r4, #2]
10010e74:	0a09      	lsrs	r1, r1, #8
10010e76:	72d9      	strb	r1, [r3, #11]
10010e78:	7921      	ldrb	r1, [r4, #4]
10010e7a:	7319      	strb	r1, [r3, #12]
10010e7c:	4669      	mov	r1, sp
10010e7e:	7909      	ldrb	r1, [r1, #4]
10010e80:	7359      	strb	r1, [r3, #13]
10010e82:	18a1      	adds	r1, r4, r2
10010e84:	7988      	ldrb	r0, [r1, #6]
10010e86:	1899      	adds	r1, r3, r2
10010e88:	3201      	adds	r2, #1
10010e8a:	7388      	strb	r0, [r1, #14]
10010e8c:	2a10      	cmp	r2, #16
10010e8e:	d1f8      	bne.n	10010e82 <gattm_add_svc_req_handler+0x46>
10010e90:	1c27      	adds	r7, r4, #0
10010e92:	2300      	movs	r3, #0
10010e94:	251e      	movs	r5, #30
10010e96:	3716      	adds	r7, #22
10010e98:	9300      	str	r3, [sp, #0]
10010e9a:	9b00      	ldr	r3, [sp, #0]
10010e9c:	9a01      	ldr	r2, [sp, #4]
10010e9e:	4e23      	ldr	r6, [pc, #140]	; (10010f2c <gattm_add_svc_req_handler+0xf0>)
10010ea0:	4293      	cmp	r3, r2
10010ea2:	da21      	bge.n	10010ee8 <gattm_add_svc_req_handler+0xac>
10010ea4:	1c39      	adds	r1, r7, #0
10010ea6:	1970      	adds	r0, r6, r5
10010ea8:	2210      	movs	r2, #16
10010eaa:	4b22      	ldr	r3, [pc, #136]	; (10010f34 <gattm_add_svc_req_handler+0xf8>)
10010eac:	4798      	blx	r3
10010eae:	1c2b      	adds	r3, r5, #0
10010eb0:	8a3a      	ldrh	r2, [r7, #16]
10010eb2:	3310      	adds	r3, #16
10010eb4:	b29b      	uxth	r3, r3
10010eb6:	54f2      	strb	r2, [r6, r3]
10010eb8:	1c2b      	adds	r3, r5, #0
10010eba:	8a3a      	ldrh	r2, [r7, #16]
10010ebc:	3311      	adds	r3, #17
10010ebe:	b29b      	uxth	r3, r3
10010ec0:	0a12      	lsrs	r2, r2, #8
10010ec2:	54f2      	strb	r2, [r6, r3]
10010ec4:	1c2a      	adds	r2, r5, #0
10010ec6:	1c2b      	adds	r3, r5, #0
10010ec8:	8a79      	ldrh	r1, [r7, #18]
10010eca:	3212      	adds	r2, #18
10010ecc:	b292      	uxth	r2, r2
10010ece:	54b1      	strb	r1, [r6, r2]
10010ed0:	8a7a      	ldrh	r2, [r7, #18]
10010ed2:	3313      	adds	r3, #19
10010ed4:	b29b      	uxth	r3, r3
10010ed6:	0a12      	lsrs	r2, r2, #8
10010ed8:	54f2      	strb	r2, [r6, r3]
10010eda:	9b00      	ldr	r3, [sp, #0]
10010edc:	3514      	adds	r5, #20
10010ede:	3301      	adds	r3, #1
10010ee0:	b2ad      	uxth	r5, r5
10010ee2:	9300      	str	r3, [sp, #0]
10010ee4:	3714      	adds	r7, #20
10010ee6:	e7d8      	b.n	10010e9a <gattm_add_svc_req_handler+0x5e>
10010ee8:	2114      	movs	r1, #20
10010eea:	4d13      	ldr	r5, [pc, #76]	; (10010f38 <gattm_add_svc_req_handler+0xfc>)
10010eec:	4b13      	ldr	r3, [pc, #76]	; (10010f3c <gattm_add_svc_req_handler+0x100>)
10010eee:	4351      	muls	r1, r2
10010ef0:	802b      	strh	r3, [r5, #0]
10010ef2:	230b      	movs	r3, #11
10010ef4:	311e      	adds	r1, #30
10010ef6:	80ab      	strh	r3, [r5, #4]
10010ef8:	1c0b      	adds	r3, r1, #0
10010efa:	3b08      	subs	r3, #8
10010efc:	71b3      	strb	r3, [r6, #6]
10010efe:	121b      	asrs	r3, r3, #8
10010f00:	71f3      	strb	r3, [r6, #7]
10010f02:	1c30      	adds	r0, r6, #0
10010f04:	4b0e      	ldr	r3, [pc, #56]	; (10010f40 <gattm_add_svc_req_handler+0x104>)
10010f06:	4798      	blx	r3
10010f08:	ab02      	add	r3, sp, #8
10010f0a:	1dde      	adds	r6, r3, #7
10010f0c:	1c30      	adds	r0, r6, #0
10010f0e:	4b0d      	ldr	r3, [pc, #52]	; (10010f44 <gattm_add_svc_req_handler+0x108>)
10010f10:	4798      	blx	r3
10010f12:	7833      	ldrb	r3, [r6, #0]
10010f14:	20e2      	movs	r0, #226	; 0xe2
10010f16:	2b00      	cmp	r3, #0
10010f18:	d106      	bne.n	10010f28 <gattm_add_svc_req_handler+0xec>
10010f1a:	68aa      	ldr	r2, [r5, #8]
10010f1c:	7853      	ldrb	r3, [r2, #1]
10010f1e:	7811      	ldrb	r1, [r2, #0]
10010f20:	021b      	lsls	r3, r3, #8
10010f22:	430b      	orrs	r3, r1
10010f24:	8023      	strh	r3, [r4, #0]
10010f26:	7890      	ldrb	r0, [r2, #2]
10010f28:	b005      	add	sp, #20
10010f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f2c:	10017be0 	.word	0x10017be0
10010f30:	10017870 	.word	0x10017870
10010f34:	10012297 	.word	0x10012297
10010f38:	10017864 	.word	0x10017864
10010f3c:	00000b01 	.word	0x00000b01
10010f40:	1000f791 	.word	0x1000f791
10010f44:	1000f7f5 	.word	0x1000f7f5

10010f48 <gattm_add_attribute_req_handler>:
10010f48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010f4a:	1c1f      	adds	r7, r3, #0
10010f4c:	4b16      	ldr	r3, [pc, #88]	; (10010fa8 <gattm_add_attribute_req_handler+0x60>)
10010f4e:	9100      	str	r1, [sp, #0]
10010f50:	9201      	str	r2, [sp, #4]
10010f52:	1c05      	adds	r5, r0, #0
10010f54:	7946      	ldrb	r6, [r0, #5]
10010f56:	6818      	ldr	r0, [r3, #0]
10010f58:	2114      	movs	r1, #20
10010f5a:	4b14      	ldr	r3, [pc, #80]	; (10010fac <gattm_add_attribute_req_handler+0x64>)
10010f5c:	382a      	subs	r0, #42	; 0x2a
10010f5e:	4798      	blx	r3
10010f60:	2311      	movs	r3, #17
10010f62:	4286      	cmp	r6, r0
10010f64:	d21e      	bcs.n	10010fa4 <gattm_add_attribute_req_handler+0x5c>
10010f66:	2414      	movs	r4, #20
10010f68:	4366      	muls	r6, r4
10010f6a:	19a8      	adds	r0, r5, r6
10010f6c:	2100      	movs	r1, #0
10010f6e:	2210      	movs	r2, #16
10010f70:	4b0f      	ldr	r3, [pc, #60]	; (10010fb0 <gattm_add_attribute_req_handler+0x68>)
10010f72:	3016      	adds	r0, #22
10010f74:	4798      	blx	r3
10010f76:	7968      	ldrb	r0, [r5, #5]
10010f78:	1c3a      	adds	r2, r7, #0
10010f7a:	4360      	muls	r0, r4
10010f7c:	1828      	adds	r0, r5, r0
10010f7e:	4b0d      	ldr	r3, [pc, #52]	; (10010fb4 <gattm_add_attribute_req_handler+0x6c>)
10010f80:	3016      	adds	r0, #22
10010f82:	9908      	ldr	r1, [sp, #32]
10010f84:	4798      	blx	r3
10010f86:	466a      	mov	r2, sp
10010f88:	796b      	ldrb	r3, [r5, #5]
10010f8a:	8812      	ldrh	r2, [r2, #0]
10010f8c:	435c      	muls	r4, r3
10010f8e:	192c      	adds	r4, r5, r4
10010f90:	8522      	strh	r2, [r4, #40]	; 0x28
10010f92:	466a      	mov	r2, sp
10010f94:	8892      	ldrh	r2, [r2, #4]
10010f96:	84e2      	strh	r2, [r4, #38]	; 0x26
10010f98:	9a09      	ldr	r2, [sp, #36]	; 0x24
10010f9a:	8013      	strh	r3, [r2, #0]
10010f9c:	796b      	ldrb	r3, [r5, #5]
10010f9e:	3301      	adds	r3, #1
10010fa0:	716b      	strb	r3, [r5, #5]
10010fa2:	2300      	movs	r3, #0
10010fa4:	1c18      	adds	r0, r3, #0
10010fa6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010fa8:	10016a24 	.word	0x10016a24
10010fac:	10011135 	.word	0x10011135
10010fb0:	100122a9 	.word	0x100122a9
10010fb4:	10012297 	.word	0x10012297

10010fb8 <gattm_att_set_value_req_handler>:
10010fb8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010fba:	466b      	mov	r3, sp
10010fbc:	1dde      	adds	r6, r3, #7
10010fbe:	2300      	movs	r3, #0
10010fc0:	1c0d      	adds	r5, r1, #0
10010fc2:	210c      	movs	r1, #12
10010fc4:	270b      	movs	r7, #11
10010fc6:	4c17      	ldr	r4, [pc, #92]	; (10011024 <gattm_att_set_value_req_handler+0x6c>)
10010fc8:	7033      	strb	r3, [r6, #0]
10010fca:	70e3      	strb	r3, [r4, #3]
10010fcc:	4b16      	ldr	r3, [pc, #88]	; (10011028 <gattm_att_set_value_req_handler+0x70>)
10010fce:	7021      	strb	r1, [r4, #0]
10010fd0:	8819      	ldrh	r1, [r3, #0]
10010fd2:	881b      	ldrh	r3, [r3, #0]
10010fd4:	7220      	strb	r0, [r4, #8]
10010fd6:	0a1b      	lsrs	r3, r3, #8
10010fd8:	7163      	strb	r3, [r4, #5]
10010fda:	0a00      	lsrs	r0, r0, #8
10010fdc:	0a2b      	lsrs	r3, r5, #8
10010fde:	7121      	strb	r1, [r4, #4]
10010fe0:	7260      	strb	r0, [r4, #9]
10010fe2:	1c11      	adds	r1, r2, #0
10010fe4:	72a5      	strb	r5, [r4, #10]
10010fe6:	1c2a      	adds	r2, r5, #0
10010fe8:	72e3      	strb	r3, [r4, #11]
10010fea:	350c      	adds	r5, #12
10010fec:	4b0f      	ldr	r3, [pc, #60]	; (1001102c <gattm_att_set_value_req_handler+0x74>)
10010fee:	4810      	ldr	r0, [pc, #64]	; (10011030 <gattm_att_set_value_req_handler+0x78>)
10010ff0:	7067      	strb	r7, [r4, #1]
10010ff2:	70a7      	strb	r7, [r4, #2]
10010ff4:	4798      	blx	r3
10010ff6:	b2a9      	uxth	r1, r5
10010ff8:	4b0e      	ldr	r3, [pc, #56]	; (10011034 <gattm_att_set_value_req_handler+0x7c>)
10010ffa:	4d0f      	ldr	r5, [pc, #60]	; (10011038 <gattm_att_set_value_req_handler+0x80>)
10010ffc:	1c20      	adds	r0, r4, #0
10010ffe:	802b      	strh	r3, [r5, #0]
10011000:	1c0b      	adds	r3, r1, #0
10011002:	3b08      	subs	r3, #8
10011004:	71a3      	strb	r3, [r4, #6]
10011006:	121b      	asrs	r3, r3, #8
10011008:	71e3      	strb	r3, [r4, #7]
1001100a:	4b0c      	ldr	r3, [pc, #48]	; (1001103c <gattm_att_set_value_req_handler+0x84>)
1001100c:	80af      	strh	r7, [r5, #4]
1001100e:	4798      	blx	r3
10011010:	1c30      	adds	r0, r6, #0
10011012:	4b0b      	ldr	r3, [pc, #44]	; (10011040 <gattm_att_set_value_req_handler+0x88>)
10011014:	4798      	blx	r3
10011016:	7833      	ldrb	r3, [r6, #0]
10011018:	20e2      	movs	r0, #226	; 0xe2
1001101a:	2b00      	cmp	r3, #0
1001101c:	d101      	bne.n	10011022 <gattm_att_set_value_req_handler+0x6a>
1001101e:	68ab      	ldr	r3, [r5, #8]
10011020:	7898      	ldrb	r0, [r3, #2]
10011022:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011024:	10017be0 	.word	0x10017be0
10011028:	10017870 	.word	0x10017870
1001102c:	10012297 	.word	0x10012297
10011030:	10017bec 	.word	0x10017bec
10011034:	00000b0d 	.word	0x00000b0d
10011038:	10017864 	.word	0x10017864
1001103c:	1000f791 	.word	0x1000f791
10011040:	1000f7f5 	.word	0x1000f7f5

10011044 <gattm_att_get_value_req_handler>:
10011044:	b5f0      	push	{r4, r5, r6, r7, lr}
10011046:	b085      	sub	sp, #20
10011048:	9201      	str	r2, [sp, #4]
1001104a:	220a      	movs	r2, #10
1001104c:	1c04      	adds	r4, r0, #0
1001104e:	481d      	ldr	r0, [pc, #116]	; (100110c4 <gattm_att_get_value_req_handler+0x80>)
10011050:	ab02      	add	r3, sp, #8
10011052:	1dde      	adds	r6, r3, #7
10011054:	7002      	strb	r2, [r0, #0]
10011056:	2300      	movs	r3, #0
10011058:	220b      	movs	r2, #11
1001105a:	4d1b      	ldr	r5, [pc, #108]	; (100110c8 <gattm_att_get_value_req_handler+0x84>)
1001105c:	1c0f      	adds	r7, r1, #0
1001105e:	8829      	ldrh	r1, [r5, #0]
10011060:	882d      	ldrh	r5, [r5, #0]
10011062:	7101      	strb	r1, [r0, #4]
10011064:	0a2d      	lsrs	r5, r5, #8
10011066:	7145      	strb	r5, [r0, #5]
10011068:	0a25      	lsrs	r5, r4, #8
1001106a:	7245      	strb	r5, [r0, #9]
1001106c:	4917      	ldr	r1, [pc, #92]	; (100110cc <gattm_att_get_value_req_handler+0x88>)
1001106e:	4d18      	ldr	r5, [pc, #96]	; (100110d0 <gattm_att_get_value_req_handler+0x8c>)
10011070:	7033      	strb	r3, [r6, #0]
10011072:	7042      	strb	r2, [r0, #1]
10011074:	7082      	strb	r2, [r0, #2]
10011076:	70c3      	strb	r3, [r0, #3]
10011078:	8029      	strh	r1, [r5, #0]
1001107a:	80aa      	strh	r2, [r5, #4]
1001107c:	71c3      	strb	r3, [r0, #7]
1001107e:	3a09      	subs	r2, #9
10011080:	210a      	movs	r1, #10
10011082:	4b14      	ldr	r3, [pc, #80]	; (100110d4 <gattm_att_get_value_req_handler+0x90>)
10011084:	7182      	strb	r2, [r0, #6]
10011086:	7204      	strb	r4, [r0, #8]
10011088:	4798      	blx	r3
1001108a:	1c30      	adds	r0, r6, #0
1001108c:	4b12      	ldr	r3, [pc, #72]	; (100110d8 <gattm_att_get_value_req_handler+0x94>)
1001108e:	4798      	blx	r3
10011090:	7833      	ldrb	r3, [r6, #0]
10011092:	20e2      	movs	r0, #226	; 0xe2
10011094:	2b00      	cmp	r3, #0
10011096:	d112      	bne.n	100110be <gattm_att_get_value_req_handler+0x7a>
10011098:	68a9      	ldr	r1, [r5, #8]
1001109a:	9801      	ldr	r0, [sp, #4]
1001109c:	784d      	ldrb	r5, [r1, #1]
1001109e:	780b      	ldrb	r3, [r1, #0]
100110a0:	78ca      	ldrb	r2, [r1, #3]
100110a2:	022d      	lsls	r5, r5, #8
100110a4:	431d      	orrs	r5, r3
100110a6:	788b      	ldrb	r3, [r1, #2]
100110a8:	0212      	lsls	r2, r2, #8
100110aa:	431a      	orrs	r2, r3
100110ac:	803a      	strh	r2, [r7, #0]
100110ae:	790e      	ldrb	r6, [r1, #4]
100110b0:	4b0a      	ldr	r3, [pc, #40]	; (100110dc <gattm_att_get_value_req_handler+0x98>)
100110b2:	3105      	adds	r1, #5
100110b4:	4798      	blx	r3
100110b6:	20e2      	movs	r0, #226	; 0xe2
100110b8:	42ac      	cmp	r4, r5
100110ba:	d100      	bne.n	100110be <gattm_att_get_value_req_handler+0x7a>
100110bc:	1c30      	adds	r0, r6, #0
100110be:	b005      	add	sp, #20
100110c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100110c2:	46c0      	nop			; (mov r8, r8)
100110c4:	10017be0 	.word	0x10017be0
100110c8:	10017870 	.word	0x10017870
100110cc:	00000b0b 	.word	0x00000b0b
100110d0:	10017864 	.word	0x10017864
100110d4:	1000f791 	.word	0x1000f791
100110d8:	1000f7f5 	.word	0x1000f7f5
100110dc:	10012297 	.word	0x10012297

100110e0 <htpt_enable_rsp_handler>:
100110e0:	780b      	ldrb	r3, [r1, #0]
100110e2:	7013      	strb	r3, [r2, #0]
100110e4:	784b      	ldrb	r3, [r1, #1]
100110e6:	7053      	strb	r3, [r2, #1]
100110e8:	4770      	bx	lr

100110ea <htpt_temp_send_rsp_handler>:
100110ea:	780b      	ldrb	r3, [r1, #0]
100110ec:	7013      	strb	r3, [r2, #0]
100110ee:	4770      	bx	lr

100110f0 <htpt_meas_intv_upd_rsp_handler>:
100110f0:	780b      	ldrb	r3, [r1, #0]
100110f2:	7013      	strb	r3, [r2, #0]
100110f4:	4770      	bx	lr

100110f6 <htpt_meas_intv_chg_req_ind_handler>:
100110f6:	78cb      	ldrb	r3, [r1, #3]
100110f8:	7889      	ldrb	r1, [r1, #2]
100110fa:	021b      	lsls	r3, r3, #8
100110fc:	430b      	orrs	r3, r1
100110fe:	8013      	strh	r3, [r2, #0]
10011100:	4770      	bx	lr

10011102 <htpt_cfg_indntf_ind_handler>:
10011102:	780b      	ldrb	r3, [r1, #0]
10011104:	7013      	strb	r3, [r2, #0]
10011106:	784b      	ldrb	r3, [r1, #1]
10011108:	7053      	strb	r3, [r2, #1]
1001110a:	4770      	bx	lr

1001110c <__gnu_thumb1_case_sqi>:
1001110c:	b402      	push	{r1}
1001110e:	4671      	mov	r1, lr
10011110:	0849      	lsrs	r1, r1, #1
10011112:	0049      	lsls	r1, r1, #1
10011114:	5609      	ldrsb	r1, [r1, r0]
10011116:	0049      	lsls	r1, r1, #1
10011118:	448e      	add	lr, r1
1001111a:	bc02      	pop	{r1}
1001111c:	4770      	bx	lr
1001111e:	46c0      	nop			; (mov r8, r8)

10011120 <__gnu_thumb1_case_uqi>:
10011120:	b402      	push	{r1}
10011122:	4671      	mov	r1, lr
10011124:	0849      	lsrs	r1, r1, #1
10011126:	0049      	lsls	r1, r1, #1
10011128:	5c09      	ldrb	r1, [r1, r0]
1001112a:	0049      	lsls	r1, r1, #1
1001112c:	448e      	add	lr, r1
1001112e:	bc02      	pop	{r1}
10011130:	4770      	bx	lr
10011132:	46c0      	nop			; (mov r8, r8)

10011134 <__aeabi_uidiv>:
10011134:	2200      	movs	r2, #0
10011136:	0843      	lsrs	r3, r0, #1
10011138:	428b      	cmp	r3, r1
1001113a:	d374      	bcc.n	10011226 <__aeabi_uidiv+0xf2>
1001113c:	0903      	lsrs	r3, r0, #4
1001113e:	428b      	cmp	r3, r1
10011140:	d35f      	bcc.n	10011202 <__aeabi_uidiv+0xce>
10011142:	0a03      	lsrs	r3, r0, #8
10011144:	428b      	cmp	r3, r1
10011146:	d344      	bcc.n	100111d2 <__aeabi_uidiv+0x9e>
10011148:	0b03      	lsrs	r3, r0, #12
1001114a:	428b      	cmp	r3, r1
1001114c:	d328      	bcc.n	100111a0 <__aeabi_uidiv+0x6c>
1001114e:	0c03      	lsrs	r3, r0, #16
10011150:	428b      	cmp	r3, r1
10011152:	d30d      	bcc.n	10011170 <__aeabi_uidiv+0x3c>
10011154:	22ff      	movs	r2, #255	; 0xff
10011156:	0209      	lsls	r1, r1, #8
10011158:	ba12      	rev	r2, r2
1001115a:	0c03      	lsrs	r3, r0, #16
1001115c:	428b      	cmp	r3, r1
1001115e:	d302      	bcc.n	10011166 <__aeabi_uidiv+0x32>
10011160:	1212      	asrs	r2, r2, #8
10011162:	0209      	lsls	r1, r1, #8
10011164:	d065      	beq.n	10011232 <__aeabi_uidiv+0xfe>
10011166:	0b03      	lsrs	r3, r0, #12
10011168:	428b      	cmp	r3, r1
1001116a:	d319      	bcc.n	100111a0 <__aeabi_uidiv+0x6c>
1001116c:	e000      	b.n	10011170 <__aeabi_uidiv+0x3c>
1001116e:	0a09      	lsrs	r1, r1, #8
10011170:	0bc3      	lsrs	r3, r0, #15
10011172:	428b      	cmp	r3, r1
10011174:	d301      	bcc.n	1001117a <__aeabi_uidiv+0x46>
10011176:	03cb      	lsls	r3, r1, #15
10011178:	1ac0      	subs	r0, r0, r3
1001117a:	4152      	adcs	r2, r2
1001117c:	0b83      	lsrs	r3, r0, #14
1001117e:	428b      	cmp	r3, r1
10011180:	d301      	bcc.n	10011186 <__aeabi_uidiv+0x52>
10011182:	038b      	lsls	r3, r1, #14
10011184:	1ac0      	subs	r0, r0, r3
10011186:	4152      	adcs	r2, r2
10011188:	0b43      	lsrs	r3, r0, #13
1001118a:	428b      	cmp	r3, r1
1001118c:	d301      	bcc.n	10011192 <__aeabi_uidiv+0x5e>
1001118e:	034b      	lsls	r3, r1, #13
10011190:	1ac0      	subs	r0, r0, r3
10011192:	4152      	adcs	r2, r2
10011194:	0b03      	lsrs	r3, r0, #12
10011196:	428b      	cmp	r3, r1
10011198:	d301      	bcc.n	1001119e <__aeabi_uidiv+0x6a>
1001119a:	030b      	lsls	r3, r1, #12
1001119c:	1ac0      	subs	r0, r0, r3
1001119e:	4152      	adcs	r2, r2
100111a0:	0ac3      	lsrs	r3, r0, #11
100111a2:	428b      	cmp	r3, r1
100111a4:	d301      	bcc.n	100111aa <__aeabi_uidiv+0x76>
100111a6:	02cb      	lsls	r3, r1, #11
100111a8:	1ac0      	subs	r0, r0, r3
100111aa:	4152      	adcs	r2, r2
100111ac:	0a83      	lsrs	r3, r0, #10
100111ae:	428b      	cmp	r3, r1
100111b0:	d301      	bcc.n	100111b6 <__aeabi_uidiv+0x82>
100111b2:	028b      	lsls	r3, r1, #10
100111b4:	1ac0      	subs	r0, r0, r3
100111b6:	4152      	adcs	r2, r2
100111b8:	0a43      	lsrs	r3, r0, #9
100111ba:	428b      	cmp	r3, r1
100111bc:	d301      	bcc.n	100111c2 <__aeabi_uidiv+0x8e>
100111be:	024b      	lsls	r3, r1, #9
100111c0:	1ac0      	subs	r0, r0, r3
100111c2:	4152      	adcs	r2, r2
100111c4:	0a03      	lsrs	r3, r0, #8
100111c6:	428b      	cmp	r3, r1
100111c8:	d301      	bcc.n	100111ce <__aeabi_uidiv+0x9a>
100111ca:	020b      	lsls	r3, r1, #8
100111cc:	1ac0      	subs	r0, r0, r3
100111ce:	4152      	adcs	r2, r2
100111d0:	d2cd      	bcs.n	1001116e <__aeabi_uidiv+0x3a>
100111d2:	09c3      	lsrs	r3, r0, #7
100111d4:	428b      	cmp	r3, r1
100111d6:	d301      	bcc.n	100111dc <__aeabi_uidiv+0xa8>
100111d8:	01cb      	lsls	r3, r1, #7
100111da:	1ac0      	subs	r0, r0, r3
100111dc:	4152      	adcs	r2, r2
100111de:	0983      	lsrs	r3, r0, #6
100111e0:	428b      	cmp	r3, r1
100111e2:	d301      	bcc.n	100111e8 <__aeabi_uidiv+0xb4>
100111e4:	018b      	lsls	r3, r1, #6
100111e6:	1ac0      	subs	r0, r0, r3
100111e8:	4152      	adcs	r2, r2
100111ea:	0943      	lsrs	r3, r0, #5
100111ec:	428b      	cmp	r3, r1
100111ee:	d301      	bcc.n	100111f4 <__aeabi_uidiv+0xc0>
100111f0:	014b      	lsls	r3, r1, #5
100111f2:	1ac0      	subs	r0, r0, r3
100111f4:	4152      	adcs	r2, r2
100111f6:	0903      	lsrs	r3, r0, #4
100111f8:	428b      	cmp	r3, r1
100111fa:	d301      	bcc.n	10011200 <__aeabi_uidiv+0xcc>
100111fc:	010b      	lsls	r3, r1, #4
100111fe:	1ac0      	subs	r0, r0, r3
10011200:	4152      	adcs	r2, r2
10011202:	08c3      	lsrs	r3, r0, #3
10011204:	428b      	cmp	r3, r1
10011206:	d301      	bcc.n	1001120c <__aeabi_uidiv+0xd8>
10011208:	00cb      	lsls	r3, r1, #3
1001120a:	1ac0      	subs	r0, r0, r3
1001120c:	4152      	adcs	r2, r2
1001120e:	0883      	lsrs	r3, r0, #2
10011210:	428b      	cmp	r3, r1
10011212:	d301      	bcc.n	10011218 <__aeabi_uidiv+0xe4>
10011214:	008b      	lsls	r3, r1, #2
10011216:	1ac0      	subs	r0, r0, r3
10011218:	4152      	adcs	r2, r2
1001121a:	0843      	lsrs	r3, r0, #1
1001121c:	428b      	cmp	r3, r1
1001121e:	d301      	bcc.n	10011224 <__aeabi_uidiv+0xf0>
10011220:	004b      	lsls	r3, r1, #1
10011222:	1ac0      	subs	r0, r0, r3
10011224:	4152      	adcs	r2, r2
10011226:	1a41      	subs	r1, r0, r1
10011228:	d200      	bcs.n	1001122c <__aeabi_uidiv+0xf8>
1001122a:	4601      	mov	r1, r0
1001122c:	4152      	adcs	r2, r2
1001122e:	4610      	mov	r0, r2
10011230:	4770      	bx	lr
10011232:	e7ff      	b.n	10011234 <__aeabi_uidiv+0x100>
10011234:	b501      	push	{r0, lr}
10011236:	2000      	movs	r0, #0
10011238:	f000 f806 	bl	10011248 <__aeabi_idiv0>
1001123c:	bd02      	pop	{r1, pc}
1001123e:	46c0      	nop			; (mov r8, r8)

10011240 <__aeabi_uidivmod>:
10011240:	2900      	cmp	r1, #0
10011242:	d0f7      	beq.n	10011234 <__aeabi_uidiv+0x100>
10011244:	e776      	b.n	10011134 <__aeabi_uidiv>
10011246:	4770      	bx	lr

10011248 <__aeabi_idiv0>:
10011248:	4770      	bx	lr
1001124a:	46c0      	nop			; (mov r8, r8)

1001124c <__aeabi_lmul>:
1001124c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001124e:	464f      	mov	r7, r9
10011250:	4646      	mov	r6, r8
10011252:	b4c0      	push	{r6, r7}
10011254:	0416      	lsls	r6, r2, #16
10011256:	0c36      	lsrs	r6, r6, #16
10011258:	4699      	mov	r9, r3
1001125a:	0033      	movs	r3, r6
1001125c:	0405      	lsls	r5, r0, #16
1001125e:	0c2c      	lsrs	r4, r5, #16
10011260:	0c07      	lsrs	r7, r0, #16
10011262:	0c15      	lsrs	r5, r2, #16
10011264:	4363      	muls	r3, r4
10011266:	437e      	muls	r6, r7
10011268:	436f      	muls	r7, r5
1001126a:	4365      	muls	r5, r4
1001126c:	0c1c      	lsrs	r4, r3, #16
1001126e:	19ad      	adds	r5, r5, r6
10011270:	1964      	adds	r4, r4, r5
10011272:	469c      	mov	ip, r3
10011274:	42a6      	cmp	r6, r4
10011276:	d903      	bls.n	10011280 <__aeabi_lmul+0x34>
10011278:	2380      	movs	r3, #128	; 0x80
1001127a:	025b      	lsls	r3, r3, #9
1001127c:	4698      	mov	r8, r3
1001127e:	4447      	add	r7, r8
10011280:	4663      	mov	r3, ip
10011282:	0c25      	lsrs	r5, r4, #16
10011284:	19ef      	adds	r7, r5, r7
10011286:	041d      	lsls	r5, r3, #16
10011288:	464b      	mov	r3, r9
1001128a:	434a      	muls	r2, r1
1001128c:	4343      	muls	r3, r0
1001128e:	0c2d      	lsrs	r5, r5, #16
10011290:	0424      	lsls	r4, r4, #16
10011292:	1964      	adds	r4, r4, r5
10011294:	1899      	adds	r1, r3, r2
10011296:	19c9      	adds	r1, r1, r7
10011298:	0020      	movs	r0, r4
1001129a:	bc0c      	pop	{r2, r3}
1001129c:	4690      	mov	r8, r2
1001129e:	4699      	mov	r9, r3
100112a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100112a2:	46c0      	nop			; (mov r8, r8)

100112a4 <__aeabi_d2uiz>:
100112a4:	b570      	push	{r4, r5, r6, lr}
100112a6:	2200      	movs	r2, #0
100112a8:	4b0c      	ldr	r3, [pc, #48]	; (100112dc <__aeabi_d2uiz+0x38>)
100112aa:	0004      	movs	r4, r0
100112ac:	000d      	movs	r5, r1
100112ae:	f000 fe87 	bl	10011fc0 <__aeabi_dcmpge>
100112b2:	2800      	cmp	r0, #0
100112b4:	d104      	bne.n	100112c0 <__aeabi_d2uiz+0x1c>
100112b6:	0020      	movs	r0, r4
100112b8:	0029      	movs	r1, r5
100112ba:	f000 fddf 	bl	10011e7c <__aeabi_d2iz>
100112be:	bd70      	pop	{r4, r5, r6, pc}
100112c0:	4b06      	ldr	r3, [pc, #24]	; (100112dc <__aeabi_d2uiz+0x38>)
100112c2:	2200      	movs	r2, #0
100112c4:	0020      	movs	r0, r4
100112c6:	0029      	movs	r1, r5
100112c8:	f000 fa84 	bl	100117d4 <__aeabi_dsub>
100112cc:	f000 fdd6 	bl	10011e7c <__aeabi_d2iz>
100112d0:	2380      	movs	r3, #128	; 0x80
100112d2:	061b      	lsls	r3, r3, #24
100112d4:	469c      	mov	ip, r3
100112d6:	4460      	add	r0, ip
100112d8:	e7f1      	b.n	100112be <__aeabi_d2uiz+0x1a>
100112da:	46c0      	nop			; (mov r8, r8)
100112dc:	41e00000 	.word	0x41e00000

100112e0 <__aeabi_dmul>:
100112e0:	b5f0      	push	{r4, r5, r6, r7, lr}
100112e2:	465f      	mov	r7, fp
100112e4:	4656      	mov	r6, sl
100112e6:	464d      	mov	r5, r9
100112e8:	4644      	mov	r4, r8
100112ea:	b4f0      	push	{r4, r5, r6, r7}
100112ec:	030d      	lsls	r5, r1, #12
100112ee:	4699      	mov	r9, r3
100112f0:	004e      	lsls	r6, r1, #1
100112f2:	0b2b      	lsrs	r3, r5, #12
100112f4:	b087      	sub	sp, #28
100112f6:	0007      	movs	r7, r0
100112f8:	4692      	mov	sl, r2
100112fa:	4680      	mov	r8, r0
100112fc:	469b      	mov	fp, r3
100112fe:	0d76      	lsrs	r6, r6, #21
10011300:	0fcc      	lsrs	r4, r1, #31
10011302:	2e00      	cmp	r6, #0
10011304:	d069      	beq.n	100113da <__aeabi_dmul+0xfa>
10011306:	4b6d      	ldr	r3, [pc, #436]	; (100114bc <__aeabi_dmul+0x1dc>)
10011308:	429e      	cmp	r6, r3
1001130a:	d035      	beq.n	10011378 <__aeabi_dmul+0x98>
1001130c:	465b      	mov	r3, fp
1001130e:	2280      	movs	r2, #128	; 0x80
10011310:	00dd      	lsls	r5, r3, #3
10011312:	0412      	lsls	r2, r2, #16
10011314:	0f43      	lsrs	r3, r0, #29
10011316:	4313      	orrs	r3, r2
10011318:	432b      	orrs	r3, r5
1001131a:	469b      	mov	fp, r3
1001131c:	00c3      	lsls	r3, r0, #3
1001131e:	4698      	mov	r8, r3
10011320:	4b67      	ldr	r3, [pc, #412]	; (100114c0 <__aeabi_dmul+0x1e0>)
10011322:	2700      	movs	r7, #0
10011324:	469c      	mov	ip, r3
10011326:	2300      	movs	r3, #0
10011328:	4466      	add	r6, ip
1001132a:	9301      	str	r3, [sp, #4]
1001132c:	464a      	mov	r2, r9
1001132e:	0315      	lsls	r5, r2, #12
10011330:	0050      	lsls	r0, r2, #1
10011332:	0fd2      	lsrs	r2, r2, #31
10011334:	4653      	mov	r3, sl
10011336:	0b2d      	lsrs	r5, r5, #12
10011338:	0d40      	lsrs	r0, r0, #21
1001133a:	4691      	mov	r9, r2
1001133c:	d100      	bne.n	10011340 <__aeabi_dmul+0x60>
1001133e:	e076      	b.n	1001142e <__aeabi_dmul+0x14e>
10011340:	4a5e      	ldr	r2, [pc, #376]	; (100114bc <__aeabi_dmul+0x1dc>)
10011342:	4290      	cmp	r0, r2
10011344:	d06c      	beq.n	10011420 <__aeabi_dmul+0x140>
10011346:	2280      	movs	r2, #128	; 0x80
10011348:	0f5b      	lsrs	r3, r3, #29
1001134a:	0412      	lsls	r2, r2, #16
1001134c:	4313      	orrs	r3, r2
1001134e:	4a5c      	ldr	r2, [pc, #368]	; (100114c0 <__aeabi_dmul+0x1e0>)
10011350:	00ed      	lsls	r5, r5, #3
10011352:	4694      	mov	ip, r2
10011354:	431d      	orrs	r5, r3
10011356:	4653      	mov	r3, sl
10011358:	2200      	movs	r2, #0
1001135a:	00db      	lsls	r3, r3, #3
1001135c:	4460      	add	r0, ip
1001135e:	4649      	mov	r1, r9
10011360:	1836      	adds	r6, r6, r0
10011362:	1c70      	adds	r0, r6, #1
10011364:	4061      	eors	r1, r4
10011366:	9002      	str	r0, [sp, #8]
10011368:	4317      	orrs	r7, r2
1001136a:	2f0f      	cmp	r7, #15
1001136c:	d900      	bls.n	10011370 <__aeabi_dmul+0x90>
1001136e:	e0af      	b.n	100114d0 <__aeabi_dmul+0x1f0>
10011370:	4854      	ldr	r0, [pc, #336]	; (100114c4 <__aeabi_dmul+0x1e4>)
10011372:	00bf      	lsls	r7, r7, #2
10011374:	59c7      	ldr	r7, [r0, r7]
10011376:	46bf      	mov	pc, r7
10011378:	465b      	mov	r3, fp
1001137a:	431f      	orrs	r7, r3
1001137c:	d000      	beq.n	10011380 <__aeabi_dmul+0xa0>
1001137e:	e088      	b.n	10011492 <__aeabi_dmul+0x1b2>
10011380:	2300      	movs	r3, #0
10011382:	469b      	mov	fp, r3
10011384:	4698      	mov	r8, r3
10011386:	3302      	adds	r3, #2
10011388:	2708      	movs	r7, #8
1001138a:	9301      	str	r3, [sp, #4]
1001138c:	e7ce      	b.n	1001132c <__aeabi_dmul+0x4c>
1001138e:	4649      	mov	r1, r9
10011390:	2a02      	cmp	r2, #2
10011392:	d06a      	beq.n	1001146a <__aeabi_dmul+0x18a>
10011394:	2a03      	cmp	r2, #3
10011396:	d100      	bne.n	1001139a <__aeabi_dmul+0xba>
10011398:	e209      	b.n	100117ae <__aeabi_dmul+0x4ce>
1001139a:	2a01      	cmp	r2, #1
1001139c:	d000      	beq.n	100113a0 <__aeabi_dmul+0xc0>
1001139e:	e1bb      	b.n	10011718 <__aeabi_dmul+0x438>
100113a0:	4011      	ands	r1, r2
100113a2:	2200      	movs	r2, #0
100113a4:	2300      	movs	r3, #0
100113a6:	2500      	movs	r5, #0
100113a8:	4690      	mov	r8, r2
100113aa:	b2cc      	uxtb	r4, r1
100113ac:	2100      	movs	r1, #0
100113ae:	032d      	lsls	r5, r5, #12
100113b0:	0d0a      	lsrs	r2, r1, #20
100113b2:	0512      	lsls	r2, r2, #20
100113b4:	0b2d      	lsrs	r5, r5, #12
100113b6:	4315      	orrs	r5, r2
100113b8:	4a43      	ldr	r2, [pc, #268]	; (100114c8 <__aeabi_dmul+0x1e8>)
100113ba:	051b      	lsls	r3, r3, #20
100113bc:	4015      	ands	r5, r2
100113be:	431d      	orrs	r5, r3
100113c0:	006d      	lsls	r5, r5, #1
100113c2:	07e4      	lsls	r4, r4, #31
100113c4:	086d      	lsrs	r5, r5, #1
100113c6:	4325      	orrs	r5, r4
100113c8:	4640      	mov	r0, r8
100113ca:	0029      	movs	r1, r5
100113cc:	b007      	add	sp, #28
100113ce:	bc3c      	pop	{r2, r3, r4, r5}
100113d0:	4690      	mov	r8, r2
100113d2:	4699      	mov	r9, r3
100113d4:	46a2      	mov	sl, r4
100113d6:	46ab      	mov	fp, r5
100113d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100113da:	4303      	orrs	r3, r0
100113dc:	d052      	beq.n	10011484 <__aeabi_dmul+0x1a4>
100113de:	465b      	mov	r3, fp
100113e0:	2b00      	cmp	r3, #0
100113e2:	d100      	bne.n	100113e6 <__aeabi_dmul+0x106>
100113e4:	e18a      	b.n	100116fc <__aeabi_dmul+0x41c>
100113e6:	4658      	mov	r0, fp
100113e8:	f000 fdf4 	bl	10011fd4 <__clzsi2>
100113ec:	0003      	movs	r3, r0
100113ee:	3b0b      	subs	r3, #11
100113f0:	2b1c      	cmp	r3, #28
100113f2:	dd00      	ble.n	100113f6 <__aeabi_dmul+0x116>
100113f4:	e17b      	b.n	100116ee <__aeabi_dmul+0x40e>
100113f6:	221d      	movs	r2, #29
100113f8:	1ad3      	subs	r3, r2, r3
100113fa:	003a      	movs	r2, r7
100113fc:	0001      	movs	r1, r0
100113fe:	465d      	mov	r5, fp
10011400:	40da      	lsrs	r2, r3
10011402:	3908      	subs	r1, #8
10011404:	408d      	lsls	r5, r1
10011406:	0013      	movs	r3, r2
10011408:	408f      	lsls	r7, r1
1001140a:	432b      	orrs	r3, r5
1001140c:	469b      	mov	fp, r3
1001140e:	46b8      	mov	r8, r7
10011410:	4b2e      	ldr	r3, [pc, #184]	; (100114cc <__aeabi_dmul+0x1ec>)
10011412:	2700      	movs	r7, #0
10011414:	469c      	mov	ip, r3
10011416:	2300      	movs	r3, #0
10011418:	4460      	add	r0, ip
1001141a:	4246      	negs	r6, r0
1001141c:	9301      	str	r3, [sp, #4]
1001141e:	e785      	b.n	1001132c <__aeabi_dmul+0x4c>
10011420:	4652      	mov	r2, sl
10011422:	432a      	orrs	r2, r5
10011424:	d12c      	bne.n	10011480 <__aeabi_dmul+0x1a0>
10011426:	2500      	movs	r5, #0
10011428:	2300      	movs	r3, #0
1001142a:	2202      	movs	r2, #2
1001142c:	e797      	b.n	1001135e <__aeabi_dmul+0x7e>
1001142e:	4652      	mov	r2, sl
10011430:	432a      	orrs	r2, r5
10011432:	d021      	beq.n	10011478 <__aeabi_dmul+0x198>
10011434:	2d00      	cmp	r5, #0
10011436:	d100      	bne.n	1001143a <__aeabi_dmul+0x15a>
10011438:	e154      	b.n	100116e4 <__aeabi_dmul+0x404>
1001143a:	0028      	movs	r0, r5
1001143c:	f000 fdca 	bl	10011fd4 <__clzsi2>
10011440:	0003      	movs	r3, r0
10011442:	3b0b      	subs	r3, #11
10011444:	2b1c      	cmp	r3, #28
10011446:	dd00      	ble.n	1001144a <__aeabi_dmul+0x16a>
10011448:	e146      	b.n	100116d8 <__aeabi_dmul+0x3f8>
1001144a:	211d      	movs	r1, #29
1001144c:	1acb      	subs	r3, r1, r3
1001144e:	4651      	mov	r1, sl
10011450:	0002      	movs	r2, r0
10011452:	40d9      	lsrs	r1, r3
10011454:	4653      	mov	r3, sl
10011456:	3a08      	subs	r2, #8
10011458:	4095      	lsls	r5, r2
1001145a:	4093      	lsls	r3, r2
1001145c:	430d      	orrs	r5, r1
1001145e:	4a1b      	ldr	r2, [pc, #108]	; (100114cc <__aeabi_dmul+0x1ec>)
10011460:	4694      	mov	ip, r2
10011462:	4460      	add	r0, ip
10011464:	4240      	negs	r0, r0
10011466:	2200      	movs	r2, #0
10011468:	e779      	b.n	1001135e <__aeabi_dmul+0x7e>
1001146a:	2401      	movs	r4, #1
1001146c:	2200      	movs	r2, #0
1001146e:	400c      	ands	r4, r1
10011470:	4b12      	ldr	r3, [pc, #72]	; (100114bc <__aeabi_dmul+0x1dc>)
10011472:	2500      	movs	r5, #0
10011474:	4690      	mov	r8, r2
10011476:	e799      	b.n	100113ac <__aeabi_dmul+0xcc>
10011478:	2500      	movs	r5, #0
1001147a:	2300      	movs	r3, #0
1001147c:	2201      	movs	r2, #1
1001147e:	e76e      	b.n	1001135e <__aeabi_dmul+0x7e>
10011480:	2203      	movs	r2, #3
10011482:	e76c      	b.n	1001135e <__aeabi_dmul+0x7e>
10011484:	2300      	movs	r3, #0
10011486:	469b      	mov	fp, r3
10011488:	4698      	mov	r8, r3
1001148a:	3301      	adds	r3, #1
1001148c:	2704      	movs	r7, #4
1001148e:	9301      	str	r3, [sp, #4]
10011490:	e74c      	b.n	1001132c <__aeabi_dmul+0x4c>
10011492:	2303      	movs	r3, #3
10011494:	270c      	movs	r7, #12
10011496:	9301      	str	r3, [sp, #4]
10011498:	e748      	b.n	1001132c <__aeabi_dmul+0x4c>
1001149a:	2300      	movs	r3, #0
1001149c:	2580      	movs	r5, #128	; 0x80
1001149e:	4698      	mov	r8, r3
100114a0:	2400      	movs	r4, #0
100114a2:	032d      	lsls	r5, r5, #12
100114a4:	4b05      	ldr	r3, [pc, #20]	; (100114bc <__aeabi_dmul+0x1dc>)
100114a6:	e781      	b.n	100113ac <__aeabi_dmul+0xcc>
100114a8:	465d      	mov	r5, fp
100114aa:	4643      	mov	r3, r8
100114ac:	9a01      	ldr	r2, [sp, #4]
100114ae:	e76f      	b.n	10011390 <__aeabi_dmul+0xb0>
100114b0:	465d      	mov	r5, fp
100114b2:	4643      	mov	r3, r8
100114b4:	0021      	movs	r1, r4
100114b6:	9a01      	ldr	r2, [sp, #4]
100114b8:	e76a      	b.n	10011390 <__aeabi_dmul+0xb0>
100114ba:	46c0      	nop			; (mov r8, r8)
100114bc:	000007ff 	.word	0x000007ff
100114c0:	fffffc01 	.word	0xfffffc01
100114c4:	10014e94 	.word	0x10014e94
100114c8:	800fffff 	.word	0x800fffff
100114cc:	000003f3 	.word	0x000003f3
100114d0:	4642      	mov	r2, r8
100114d2:	0c12      	lsrs	r2, r2, #16
100114d4:	4691      	mov	r9, r2
100114d6:	0c1a      	lsrs	r2, r3, #16
100114d8:	4694      	mov	ip, r2
100114da:	4642      	mov	r2, r8
100114dc:	0417      	lsls	r7, r2, #16
100114de:	464a      	mov	r2, r9
100114e0:	041b      	lsls	r3, r3, #16
100114e2:	0c1b      	lsrs	r3, r3, #16
100114e4:	435a      	muls	r2, r3
100114e6:	4660      	mov	r0, ip
100114e8:	4690      	mov	r8, r2
100114ea:	464a      	mov	r2, r9
100114ec:	4342      	muls	r2, r0
100114ee:	0010      	movs	r0, r2
100114f0:	9203      	str	r2, [sp, #12]
100114f2:	4662      	mov	r2, ip
100114f4:	001c      	movs	r4, r3
100114f6:	0c3f      	lsrs	r7, r7, #16
100114f8:	437a      	muls	r2, r7
100114fa:	437c      	muls	r4, r7
100114fc:	4442      	add	r2, r8
100114fe:	9201      	str	r2, [sp, #4]
10011500:	0c22      	lsrs	r2, r4, #16
10011502:	4692      	mov	sl, r2
10011504:	9a01      	ldr	r2, [sp, #4]
10011506:	4452      	add	r2, sl
10011508:	4590      	cmp	r8, r2
1001150a:	d906      	bls.n	1001151a <__aeabi_dmul+0x23a>
1001150c:	4682      	mov	sl, r0
1001150e:	2080      	movs	r0, #128	; 0x80
10011510:	0240      	lsls	r0, r0, #9
10011512:	4680      	mov	r8, r0
10011514:	44c2      	add	sl, r8
10011516:	4650      	mov	r0, sl
10011518:	9003      	str	r0, [sp, #12]
1001151a:	0c10      	lsrs	r0, r2, #16
1001151c:	9004      	str	r0, [sp, #16]
1001151e:	4648      	mov	r0, r9
10011520:	0424      	lsls	r4, r4, #16
10011522:	0c24      	lsrs	r4, r4, #16
10011524:	0412      	lsls	r2, r2, #16
10011526:	1912      	adds	r2, r2, r4
10011528:	9205      	str	r2, [sp, #20]
1001152a:	0c2a      	lsrs	r2, r5, #16
1001152c:	042d      	lsls	r5, r5, #16
1001152e:	0c2d      	lsrs	r5, r5, #16
10011530:	4368      	muls	r0, r5
10011532:	002c      	movs	r4, r5
10011534:	4682      	mov	sl, r0
10011536:	4648      	mov	r0, r9
10011538:	437c      	muls	r4, r7
1001153a:	4350      	muls	r0, r2
1001153c:	4681      	mov	r9, r0
1001153e:	0c20      	lsrs	r0, r4, #16
10011540:	4680      	mov	r8, r0
10011542:	4357      	muls	r7, r2
10011544:	4457      	add	r7, sl
10011546:	4447      	add	r7, r8
10011548:	45ba      	cmp	sl, r7
1001154a:	d903      	bls.n	10011554 <__aeabi_dmul+0x274>
1001154c:	2080      	movs	r0, #128	; 0x80
1001154e:	0240      	lsls	r0, r0, #9
10011550:	4680      	mov	r8, r0
10011552:	44c1      	add	r9, r8
10011554:	0c38      	lsrs	r0, r7, #16
10011556:	043f      	lsls	r7, r7, #16
10011558:	46b8      	mov	r8, r7
1001155a:	4448      	add	r0, r9
1001155c:	0424      	lsls	r4, r4, #16
1001155e:	0c24      	lsrs	r4, r4, #16
10011560:	9001      	str	r0, [sp, #4]
10011562:	9804      	ldr	r0, [sp, #16]
10011564:	44a0      	add	r8, r4
10011566:	4440      	add	r0, r8
10011568:	9004      	str	r0, [sp, #16]
1001156a:	4658      	mov	r0, fp
1001156c:	0c00      	lsrs	r0, r0, #16
1001156e:	4681      	mov	r9, r0
10011570:	4658      	mov	r0, fp
10011572:	0404      	lsls	r4, r0, #16
10011574:	0c20      	lsrs	r0, r4, #16
10011576:	4682      	mov	sl, r0
10011578:	0007      	movs	r7, r0
1001157a:	4648      	mov	r0, r9
1001157c:	435f      	muls	r7, r3
1001157e:	464c      	mov	r4, r9
10011580:	4343      	muls	r3, r0
10011582:	4660      	mov	r0, ip
10011584:	4360      	muls	r0, r4
10011586:	4664      	mov	r4, ip
10011588:	4683      	mov	fp, r0
1001158a:	4650      	mov	r0, sl
1001158c:	4344      	muls	r4, r0
1001158e:	0c38      	lsrs	r0, r7, #16
10011590:	4684      	mov	ip, r0
10011592:	18e4      	adds	r4, r4, r3
10011594:	4464      	add	r4, ip
10011596:	42a3      	cmp	r3, r4
10011598:	d903      	bls.n	100115a2 <__aeabi_dmul+0x2c2>
1001159a:	2380      	movs	r3, #128	; 0x80
1001159c:	025b      	lsls	r3, r3, #9
1001159e:	469c      	mov	ip, r3
100115a0:	44e3      	add	fp, ip
100115a2:	4648      	mov	r0, r9
100115a4:	043f      	lsls	r7, r7, #16
100115a6:	0c23      	lsrs	r3, r4, #16
100115a8:	0c3f      	lsrs	r7, r7, #16
100115aa:	0424      	lsls	r4, r4, #16
100115ac:	19e4      	adds	r4, r4, r7
100115ae:	4657      	mov	r7, sl
100115b0:	4368      	muls	r0, r5
100115b2:	436f      	muls	r7, r5
100115b4:	4684      	mov	ip, r0
100115b6:	464d      	mov	r5, r9
100115b8:	4650      	mov	r0, sl
100115ba:	4355      	muls	r5, r2
100115bc:	4342      	muls	r2, r0
100115be:	0c38      	lsrs	r0, r7, #16
100115c0:	4681      	mov	r9, r0
100115c2:	4462      	add	r2, ip
100115c4:	444a      	add	r2, r9
100115c6:	445b      	add	r3, fp
100115c8:	4594      	cmp	ip, r2
100115ca:	d903      	bls.n	100115d4 <__aeabi_dmul+0x2f4>
100115cc:	2080      	movs	r0, #128	; 0x80
100115ce:	0240      	lsls	r0, r0, #9
100115d0:	4684      	mov	ip, r0
100115d2:	4465      	add	r5, ip
100115d4:	9803      	ldr	r0, [sp, #12]
100115d6:	043f      	lsls	r7, r7, #16
100115d8:	4683      	mov	fp, r0
100115da:	9804      	ldr	r0, [sp, #16]
100115dc:	0c3f      	lsrs	r7, r7, #16
100115de:	4684      	mov	ip, r0
100115e0:	44e3      	add	fp, ip
100115e2:	45c3      	cmp	fp, r8
100115e4:	4180      	sbcs	r0, r0
100115e6:	4240      	negs	r0, r0
100115e8:	4682      	mov	sl, r0
100115ea:	0410      	lsls	r0, r2, #16
100115ec:	4684      	mov	ip, r0
100115ee:	9801      	ldr	r0, [sp, #4]
100115f0:	4467      	add	r7, ip
100115f2:	4684      	mov	ip, r0
100115f4:	4467      	add	r7, ip
100115f6:	44a3      	add	fp, r4
100115f8:	46bc      	mov	ip, r7
100115fa:	45a3      	cmp	fp, r4
100115fc:	41a4      	sbcs	r4, r4
100115fe:	4699      	mov	r9, r3
10011600:	44d4      	add	ip, sl
10011602:	4264      	negs	r4, r4
10011604:	4287      	cmp	r7, r0
10011606:	41bf      	sbcs	r7, r7
10011608:	45d4      	cmp	ip, sl
1001160a:	4180      	sbcs	r0, r0
1001160c:	44e1      	add	r9, ip
1001160e:	46a0      	mov	r8, r4
10011610:	4599      	cmp	r9, r3
10011612:	419b      	sbcs	r3, r3
10011614:	427f      	negs	r7, r7
10011616:	4240      	negs	r0, r0
10011618:	44c8      	add	r8, r9
1001161a:	4307      	orrs	r7, r0
1001161c:	0c12      	lsrs	r2, r2, #16
1001161e:	18ba      	adds	r2, r7, r2
10011620:	45a0      	cmp	r8, r4
10011622:	41a4      	sbcs	r4, r4
10011624:	425f      	negs	r7, r3
10011626:	003b      	movs	r3, r7
10011628:	4264      	negs	r4, r4
1001162a:	4323      	orrs	r3, r4
1001162c:	18d7      	adds	r7, r2, r3
1001162e:	4643      	mov	r3, r8
10011630:	197d      	adds	r5, r7, r5
10011632:	0ddb      	lsrs	r3, r3, #23
10011634:	026d      	lsls	r5, r5, #9
10011636:	431d      	orrs	r5, r3
10011638:	465b      	mov	r3, fp
1001163a:	025a      	lsls	r2, r3, #9
1001163c:	9b05      	ldr	r3, [sp, #20]
1001163e:	431a      	orrs	r2, r3
10011640:	1e53      	subs	r3, r2, #1
10011642:	419a      	sbcs	r2, r3
10011644:	465b      	mov	r3, fp
10011646:	0ddb      	lsrs	r3, r3, #23
10011648:	431a      	orrs	r2, r3
1001164a:	4643      	mov	r3, r8
1001164c:	025b      	lsls	r3, r3, #9
1001164e:	4313      	orrs	r3, r2
10011650:	01ea      	lsls	r2, r5, #7
10011652:	d507      	bpl.n	10011664 <__aeabi_dmul+0x384>
10011654:	2201      	movs	r2, #1
10011656:	085c      	lsrs	r4, r3, #1
10011658:	4013      	ands	r3, r2
1001165a:	4323      	orrs	r3, r4
1001165c:	07ea      	lsls	r2, r5, #31
1001165e:	9e02      	ldr	r6, [sp, #8]
10011660:	4313      	orrs	r3, r2
10011662:	086d      	lsrs	r5, r5, #1
10011664:	4a57      	ldr	r2, [pc, #348]	; (100117c4 <__aeabi_dmul+0x4e4>)
10011666:	18b2      	adds	r2, r6, r2
10011668:	2a00      	cmp	r2, #0
1001166a:	dd4b      	ble.n	10011704 <__aeabi_dmul+0x424>
1001166c:	0758      	lsls	r0, r3, #29
1001166e:	d009      	beq.n	10011684 <__aeabi_dmul+0x3a4>
10011670:	200f      	movs	r0, #15
10011672:	4018      	ands	r0, r3
10011674:	2804      	cmp	r0, #4
10011676:	d005      	beq.n	10011684 <__aeabi_dmul+0x3a4>
10011678:	1d18      	adds	r0, r3, #4
1001167a:	4298      	cmp	r0, r3
1001167c:	419b      	sbcs	r3, r3
1001167e:	425b      	negs	r3, r3
10011680:	18ed      	adds	r5, r5, r3
10011682:	0003      	movs	r3, r0
10011684:	01e8      	lsls	r0, r5, #7
10011686:	d504      	bpl.n	10011692 <__aeabi_dmul+0x3b2>
10011688:	4a4f      	ldr	r2, [pc, #316]	; (100117c8 <__aeabi_dmul+0x4e8>)
1001168a:	4015      	ands	r5, r2
1001168c:	2280      	movs	r2, #128	; 0x80
1001168e:	00d2      	lsls	r2, r2, #3
10011690:	18b2      	adds	r2, r6, r2
10011692:	484e      	ldr	r0, [pc, #312]	; (100117cc <__aeabi_dmul+0x4ec>)
10011694:	4282      	cmp	r2, r0
10011696:	dd00      	ble.n	1001169a <__aeabi_dmul+0x3ba>
10011698:	e6e7      	b.n	1001146a <__aeabi_dmul+0x18a>
1001169a:	2401      	movs	r4, #1
1001169c:	08db      	lsrs	r3, r3, #3
1001169e:	0768      	lsls	r0, r5, #29
100116a0:	4318      	orrs	r0, r3
100116a2:	026d      	lsls	r5, r5, #9
100116a4:	0553      	lsls	r3, r2, #21
100116a6:	4680      	mov	r8, r0
100116a8:	0b2d      	lsrs	r5, r5, #12
100116aa:	0d5b      	lsrs	r3, r3, #21
100116ac:	400c      	ands	r4, r1
100116ae:	e67d      	b.n	100113ac <__aeabi_dmul+0xcc>
100116b0:	2280      	movs	r2, #128	; 0x80
100116b2:	4659      	mov	r1, fp
100116b4:	0312      	lsls	r2, r2, #12
100116b6:	4211      	tst	r1, r2
100116b8:	d008      	beq.n	100116cc <__aeabi_dmul+0x3ec>
100116ba:	4215      	tst	r5, r2
100116bc:	d106      	bne.n	100116cc <__aeabi_dmul+0x3ec>
100116be:	4315      	orrs	r5, r2
100116c0:	032d      	lsls	r5, r5, #12
100116c2:	4698      	mov	r8, r3
100116c4:	0b2d      	lsrs	r5, r5, #12
100116c6:	464c      	mov	r4, r9
100116c8:	4b41      	ldr	r3, [pc, #260]	; (100117d0 <__aeabi_dmul+0x4f0>)
100116ca:	e66f      	b.n	100113ac <__aeabi_dmul+0xcc>
100116cc:	465d      	mov	r5, fp
100116ce:	4315      	orrs	r5, r2
100116d0:	032d      	lsls	r5, r5, #12
100116d2:	0b2d      	lsrs	r5, r5, #12
100116d4:	4b3e      	ldr	r3, [pc, #248]	; (100117d0 <__aeabi_dmul+0x4f0>)
100116d6:	e669      	b.n	100113ac <__aeabi_dmul+0xcc>
100116d8:	0003      	movs	r3, r0
100116da:	4655      	mov	r5, sl
100116dc:	3b28      	subs	r3, #40	; 0x28
100116de:	409d      	lsls	r5, r3
100116e0:	2300      	movs	r3, #0
100116e2:	e6bc      	b.n	1001145e <__aeabi_dmul+0x17e>
100116e4:	4650      	mov	r0, sl
100116e6:	f000 fc75 	bl	10011fd4 <__clzsi2>
100116ea:	3020      	adds	r0, #32
100116ec:	e6a8      	b.n	10011440 <__aeabi_dmul+0x160>
100116ee:	0003      	movs	r3, r0
100116f0:	3b28      	subs	r3, #40	; 0x28
100116f2:	409f      	lsls	r7, r3
100116f4:	2300      	movs	r3, #0
100116f6:	46bb      	mov	fp, r7
100116f8:	4698      	mov	r8, r3
100116fa:	e689      	b.n	10011410 <__aeabi_dmul+0x130>
100116fc:	f000 fc6a 	bl	10011fd4 <__clzsi2>
10011700:	3020      	adds	r0, #32
10011702:	e673      	b.n	100113ec <__aeabi_dmul+0x10c>
10011704:	2401      	movs	r4, #1
10011706:	1aa6      	subs	r6, r4, r2
10011708:	2e38      	cmp	r6, #56	; 0x38
1001170a:	dd07      	ble.n	1001171c <__aeabi_dmul+0x43c>
1001170c:	2200      	movs	r2, #0
1001170e:	400c      	ands	r4, r1
10011710:	2300      	movs	r3, #0
10011712:	2500      	movs	r5, #0
10011714:	4690      	mov	r8, r2
10011716:	e649      	b.n	100113ac <__aeabi_dmul+0xcc>
10011718:	9e02      	ldr	r6, [sp, #8]
1001171a:	e7a3      	b.n	10011664 <__aeabi_dmul+0x384>
1001171c:	2e1f      	cmp	r6, #31
1001171e:	dc20      	bgt.n	10011762 <__aeabi_dmul+0x482>
10011720:	2220      	movs	r2, #32
10011722:	002c      	movs	r4, r5
10011724:	0018      	movs	r0, r3
10011726:	1b92      	subs	r2, r2, r6
10011728:	40f0      	lsrs	r0, r6
1001172a:	4094      	lsls	r4, r2
1001172c:	4093      	lsls	r3, r2
1001172e:	4304      	orrs	r4, r0
10011730:	1e58      	subs	r0, r3, #1
10011732:	4183      	sbcs	r3, r0
10011734:	431c      	orrs	r4, r3
10011736:	40f5      	lsrs	r5, r6
10011738:	0763      	lsls	r3, r4, #29
1001173a:	d009      	beq.n	10011750 <__aeabi_dmul+0x470>
1001173c:	230f      	movs	r3, #15
1001173e:	4023      	ands	r3, r4
10011740:	2b04      	cmp	r3, #4
10011742:	d005      	beq.n	10011750 <__aeabi_dmul+0x470>
10011744:	0023      	movs	r3, r4
10011746:	1d1c      	adds	r4, r3, #4
10011748:	429c      	cmp	r4, r3
1001174a:	4192      	sbcs	r2, r2
1001174c:	4252      	negs	r2, r2
1001174e:	18ad      	adds	r5, r5, r2
10011750:	022b      	lsls	r3, r5, #8
10011752:	d51f      	bpl.n	10011794 <__aeabi_dmul+0x4b4>
10011754:	2401      	movs	r4, #1
10011756:	2200      	movs	r2, #0
10011758:	400c      	ands	r4, r1
1001175a:	2301      	movs	r3, #1
1001175c:	2500      	movs	r5, #0
1001175e:	4690      	mov	r8, r2
10011760:	e624      	b.n	100113ac <__aeabi_dmul+0xcc>
10011762:	201f      	movs	r0, #31
10011764:	002c      	movs	r4, r5
10011766:	4240      	negs	r0, r0
10011768:	1a82      	subs	r2, r0, r2
1001176a:	40d4      	lsrs	r4, r2
1001176c:	2e20      	cmp	r6, #32
1001176e:	d01c      	beq.n	100117aa <__aeabi_dmul+0x4ca>
10011770:	2240      	movs	r2, #64	; 0x40
10011772:	1b96      	subs	r6, r2, r6
10011774:	40b5      	lsls	r5, r6
10011776:	432b      	orrs	r3, r5
10011778:	1e58      	subs	r0, r3, #1
1001177a:	4183      	sbcs	r3, r0
1001177c:	2007      	movs	r0, #7
1001177e:	4323      	orrs	r3, r4
10011780:	4018      	ands	r0, r3
10011782:	2500      	movs	r5, #0
10011784:	2800      	cmp	r0, #0
10011786:	d009      	beq.n	1001179c <__aeabi_dmul+0x4bc>
10011788:	220f      	movs	r2, #15
1001178a:	2500      	movs	r5, #0
1001178c:	401a      	ands	r2, r3
1001178e:	001c      	movs	r4, r3
10011790:	2a04      	cmp	r2, #4
10011792:	d1d8      	bne.n	10011746 <__aeabi_dmul+0x466>
10011794:	0023      	movs	r3, r4
10011796:	0768      	lsls	r0, r5, #29
10011798:	026d      	lsls	r5, r5, #9
1001179a:	0b2d      	lsrs	r5, r5, #12
1001179c:	2401      	movs	r4, #1
1001179e:	08db      	lsrs	r3, r3, #3
100117a0:	4303      	orrs	r3, r0
100117a2:	4698      	mov	r8, r3
100117a4:	400c      	ands	r4, r1
100117a6:	2300      	movs	r3, #0
100117a8:	e600      	b.n	100113ac <__aeabi_dmul+0xcc>
100117aa:	2500      	movs	r5, #0
100117ac:	e7e3      	b.n	10011776 <__aeabi_dmul+0x496>
100117ae:	2280      	movs	r2, #128	; 0x80
100117b0:	2401      	movs	r4, #1
100117b2:	0312      	lsls	r2, r2, #12
100117b4:	4315      	orrs	r5, r2
100117b6:	032d      	lsls	r5, r5, #12
100117b8:	4698      	mov	r8, r3
100117ba:	0b2d      	lsrs	r5, r5, #12
100117bc:	400c      	ands	r4, r1
100117be:	4b04      	ldr	r3, [pc, #16]	; (100117d0 <__aeabi_dmul+0x4f0>)
100117c0:	e5f4      	b.n	100113ac <__aeabi_dmul+0xcc>
100117c2:	46c0      	nop			; (mov r8, r8)
100117c4:	000003ff 	.word	0x000003ff
100117c8:	feffffff 	.word	0xfeffffff
100117cc:	000007fe 	.word	0x000007fe
100117d0:	000007ff 	.word	0x000007ff

100117d4 <__aeabi_dsub>:
100117d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100117d6:	4657      	mov	r7, sl
100117d8:	464e      	mov	r6, r9
100117da:	4645      	mov	r5, r8
100117dc:	b4e0      	push	{r5, r6, r7}
100117de:	000e      	movs	r6, r1
100117e0:	0011      	movs	r1, r2
100117e2:	0ff2      	lsrs	r2, r6, #31
100117e4:	4692      	mov	sl, r2
100117e6:	00c5      	lsls	r5, r0, #3
100117e8:	0f42      	lsrs	r2, r0, #29
100117ea:	0318      	lsls	r0, r3, #12
100117ec:	0337      	lsls	r7, r6, #12
100117ee:	0074      	lsls	r4, r6, #1
100117f0:	0a40      	lsrs	r0, r0, #9
100117f2:	0f4e      	lsrs	r6, r1, #29
100117f4:	0a7f      	lsrs	r7, r7, #9
100117f6:	4330      	orrs	r0, r6
100117f8:	4ecf      	ldr	r6, [pc, #828]	; (10011b38 <__aeabi_dsub+0x364>)
100117fa:	4317      	orrs	r7, r2
100117fc:	005a      	lsls	r2, r3, #1
100117fe:	0d64      	lsrs	r4, r4, #21
10011800:	0d52      	lsrs	r2, r2, #21
10011802:	0fdb      	lsrs	r3, r3, #31
10011804:	00c9      	lsls	r1, r1, #3
10011806:	42b2      	cmp	r2, r6
10011808:	d100      	bne.n	1001180c <__aeabi_dsub+0x38>
1001180a:	e0e5      	b.n	100119d8 <__aeabi_dsub+0x204>
1001180c:	2601      	movs	r6, #1
1001180e:	4073      	eors	r3, r6
10011810:	1aa6      	subs	r6, r4, r2
10011812:	46b4      	mov	ip, r6
10011814:	4553      	cmp	r3, sl
10011816:	d100      	bne.n	1001181a <__aeabi_dsub+0x46>
10011818:	e0af      	b.n	1001197a <__aeabi_dsub+0x1a6>
1001181a:	2e00      	cmp	r6, #0
1001181c:	dc00      	bgt.n	10011820 <__aeabi_dsub+0x4c>
1001181e:	e10d      	b.n	10011a3c <__aeabi_dsub+0x268>
10011820:	2a00      	cmp	r2, #0
10011822:	d13a      	bne.n	1001189a <__aeabi_dsub+0xc6>
10011824:	0003      	movs	r3, r0
10011826:	430b      	orrs	r3, r1
10011828:	d000      	beq.n	1001182c <__aeabi_dsub+0x58>
1001182a:	e0e4      	b.n	100119f6 <__aeabi_dsub+0x222>
1001182c:	076b      	lsls	r3, r5, #29
1001182e:	d009      	beq.n	10011844 <__aeabi_dsub+0x70>
10011830:	230f      	movs	r3, #15
10011832:	402b      	ands	r3, r5
10011834:	2b04      	cmp	r3, #4
10011836:	d005      	beq.n	10011844 <__aeabi_dsub+0x70>
10011838:	1d2b      	adds	r3, r5, #4
1001183a:	42ab      	cmp	r3, r5
1001183c:	41ad      	sbcs	r5, r5
1001183e:	426d      	negs	r5, r5
10011840:	197f      	adds	r7, r7, r5
10011842:	001d      	movs	r5, r3
10011844:	023b      	lsls	r3, r7, #8
10011846:	d400      	bmi.n	1001184a <__aeabi_dsub+0x76>
10011848:	e088      	b.n	1001195c <__aeabi_dsub+0x188>
1001184a:	4bbb      	ldr	r3, [pc, #748]	; (10011b38 <__aeabi_dsub+0x364>)
1001184c:	3401      	adds	r4, #1
1001184e:	429c      	cmp	r4, r3
10011850:	d100      	bne.n	10011854 <__aeabi_dsub+0x80>
10011852:	e110      	b.n	10011a76 <__aeabi_dsub+0x2a2>
10011854:	003a      	movs	r2, r7
10011856:	4bb9      	ldr	r3, [pc, #740]	; (10011b3c <__aeabi_dsub+0x368>)
10011858:	4651      	mov	r1, sl
1001185a:	401a      	ands	r2, r3
1001185c:	2301      	movs	r3, #1
1001185e:	0750      	lsls	r0, r2, #29
10011860:	08ed      	lsrs	r5, r5, #3
10011862:	0252      	lsls	r2, r2, #9
10011864:	0564      	lsls	r4, r4, #21
10011866:	4305      	orrs	r5, r0
10011868:	0b12      	lsrs	r2, r2, #12
1001186a:	0d64      	lsrs	r4, r4, #21
1001186c:	400b      	ands	r3, r1
1001186e:	2100      	movs	r1, #0
10011870:	0028      	movs	r0, r5
10011872:	0312      	lsls	r2, r2, #12
10011874:	0d0d      	lsrs	r5, r1, #20
10011876:	0b12      	lsrs	r2, r2, #12
10011878:	0564      	lsls	r4, r4, #21
1001187a:	052d      	lsls	r5, r5, #20
1001187c:	4315      	orrs	r5, r2
1001187e:	0862      	lsrs	r2, r4, #1
10011880:	4caf      	ldr	r4, [pc, #700]	; (10011b40 <__aeabi_dsub+0x36c>)
10011882:	07db      	lsls	r3, r3, #31
10011884:	402c      	ands	r4, r5
10011886:	4314      	orrs	r4, r2
10011888:	0064      	lsls	r4, r4, #1
1001188a:	0864      	lsrs	r4, r4, #1
1001188c:	431c      	orrs	r4, r3
1001188e:	0021      	movs	r1, r4
10011890:	bc1c      	pop	{r2, r3, r4}
10011892:	4690      	mov	r8, r2
10011894:	4699      	mov	r9, r3
10011896:	46a2      	mov	sl, r4
10011898:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001189a:	4ba7      	ldr	r3, [pc, #668]	; (10011b38 <__aeabi_dsub+0x364>)
1001189c:	429c      	cmp	r4, r3
1001189e:	d0c5      	beq.n	1001182c <__aeabi_dsub+0x58>
100118a0:	2380      	movs	r3, #128	; 0x80
100118a2:	041b      	lsls	r3, r3, #16
100118a4:	4318      	orrs	r0, r3
100118a6:	4663      	mov	r3, ip
100118a8:	2b38      	cmp	r3, #56	; 0x38
100118aa:	dd00      	ble.n	100118ae <__aeabi_dsub+0xda>
100118ac:	e0fd      	b.n	10011aaa <__aeabi_dsub+0x2d6>
100118ae:	2b1f      	cmp	r3, #31
100118b0:	dd00      	ble.n	100118b4 <__aeabi_dsub+0xe0>
100118b2:	e130      	b.n	10011b16 <__aeabi_dsub+0x342>
100118b4:	4662      	mov	r2, ip
100118b6:	2320      	movs	r3, #32
100118b8:	1a9b      	subs	r3, r3, r2
100118ba:	0002      	movs	r2, r0
100118bc:	409a      	lsls	r2, r3
100118be:	4666      	mov	r6, ip
100118c0:	4690      	mov	r8, r2
100118c2:	000a      	movs	r2, r1
100118c4:	4099      	lsls	r1, r3
100118c6:	40f2      	lsrs	r2, r6
100118c8:	4646      	mov	r6, r8
100118ca:	1e4b      	subs	r3, r1, #1
100118cc:	4199      	sbcs	r1, r3
100118ce:	4332      	orrs	r2, r6
100118d0:	4311      	orrs	r1, r2
100118d2:	4663      	mov	r3, ip
100118d4:	0002      	movs	r2, r0
100118d6:	40da      	lsrs	r2, r3
100118d8:	1a69      	subs	r1, r5, r1
100118da:	428d      	cmp	r5, r1
100118dc:	419b      	sbcs	r3, r3
100118de:	000d      	movs	r5, r1
100118e0:	1aba      	subs	r2, r7, r2
100118e2:	425b      	negs	r3, r3
100118e4:	1ad7      	subs	r7, r2, r3
100118e6:	023b      	lsls	r3, r7, #8
100118e8:	d535      	bpl.n	10011956 <__aeabi_dsub+0x182>
100118ea:	027a      	lsls	r2, r7, #9
100118ec:	0a53      	lsrs	r3, r2, #9
100118ee:	4698      	mov	r8, r3
100118f0:	4643      	mov	r3, r8
100118f2:	2b00      	cmp	r3, #0
100118f4:	d100      	bne.n	100118f8 <__aeabi_dsub+0x124>
100118f6:	e0c4      	b.n	10011a82 <__aeabi_dsub+0x2ae>
100118f8:	4640      	mov	r0, r8
100118fa:	f000 fb6b 	bl	10011fd4 <__clzsi2>
100118fe:	0003      	movs	r3, r0
10011900:	3b08      	subs	r3, #8
10011902:	2b1f      	cmp	r3, #31
10011904:	dd00      	ble.n	10011908 <__aeabi_dsub+0x134>
10011906:	e0c5      	b.n	10011a94 <__aeabi_dsub+0x2c0>
10011908:	2220      	movs	r2, #32
1001190a:	0029      	movs	r1, r5
1001190c:	1ad2      	subs	r2, r2, r3
1001190e:	4647      	mov	r7, r8
10011910:	40d1      	lsrs	r1, r2
10011912:	409f      	lsls	r7, r3
10011914:	000a      	movs	r2, r1
10011916:	409d      	lsls	r5, r3
10011918:	433a      	orrs	r2, r7
1001191a:	429c      	cmp	r4, r3
1001191c:	dd00      	ble.n	10011920 <__aeabi_dsub+0x14c>
1001191e:	e0c0      	b.n	10011aa2 <__aeabi_dsub+0x2ce>
10011920:	1b1c      	subs	r4, r3, r4
10011922:	1c63      	adds	r3, r4, #1
10011924:	2b1f      	cmp	r3, #31
10011926:	dd00      	ble.n	1001192a <__aeabi_dsub+0x156>
10011928:	e0e4      	b.n	10011af4 <__aeabi_dsub+0x320>
1001192a:	2120      	movs	r1, #32
1001192c:	0014      	movs	r4, r2
1001192e:	0028      	movs	r0, r5
10011930:	1ac9      	subs	r1, r1, r3
10011932:	40d8      	lsrs	r0, r3
10011934:	408c      	lsls	r4, r1
10011936:	408d      	lsls	r5, r1
10011938:	4304      	orrs	r4, r0
1001193a:	40da      	lsrs	r2, r3
1001193c:	1e68      	subs	r0, r5, #1
1001193e:	4185      	sbcs	r5, r0
10011940:	0017      	movs	r7, r2
10011942:	4325      	orrs	r5, r4
10011944:	2400      	movs	r4, #0
10011946:	e771      	b.n	1001182c <__aeabi_dsub+0x58>
10011948:	4642      	mov	r2, r8
1001194a:	4663      	mov	r3, ip
1001194c:	431a      	orrs	r2, r3
1001194e:	d100      	bne.n	10011952 <__aeabi_dsub+0x17e>
10011950:	e24c      	b.n	10011dec <__aeabi_dsub+0x618>
10011952:	4667      	mov	r7, ip
10011954:	4645      	mov	r5, r8
10011956:	076b      	lsls	r3, r5, #29
10011958:	d000      	beq.n	1001195c <__aeabi_dsub+0x188>
1001195a:	e769      	b.n	10011830 <__aeabi_dsub+0x5c>
1001195c:	2301      	movs	r3, #1
1001195e:	4651      	mov	r1, sl
10011960:	0778      	lsls	r0, r7, #29
10011962:	08ed      	lsrs	r5, r5, #3
10011964:	08fa      	lsrs	r2, r7, #3
10011966:	400b      	ands	r3, r1
10011968:	4305      	orrs	r5, r0
1001196a:	4973      	ldr	r1, [pc, #460]	; (10011b38 <__aeabi_dsub+0x364>)
1001196c:	428c      	cmp	r4, r1
1001196e:	d038      	beq.n	100119e2 <__aeabi_dsub+0x20e>
10011970:	0312      	lsls	r2, r2, #12
10011972:	0564      	lsls	r4, r4, #21
10011974:	0b12      	lsrs	r2, r2, #12
10011976:	0d64      	lsrs	r4, r4, #21
10011978:	e779      	b.n	1001186e <__aeabi_dsub+0x9a>
1001197a:	2e00      	cmp	r6, #0
1001197c:	dc00      	bgt.n	10011980 <__aeabi_dsub+0x1ac>
1001197e:	e09a      	b.n	10011ab6 <__aeabi_dsub+0x2e2>
10011980:	2a00      	cmp	r2, #0
10011982:	d047      	beq.n	10011a14 <__aeabi_dsub+0x240>
10011984:	4a6c      	ldr	r2, [pc, #432]	; (10011b38 <__aeabi_dsub+0x364>)
10011986:	4294      	cmp	r4, r2
10011988:	d100      	bne.n	1001198c <__aeabi_dsub+0x1b8>
1001198a:	e74f      	b.n	1001182c <__aeabi_dsub+0x58>
1001198c:	2280      	movs	r2, #128	; 0x80
1001198e:	0412      	lsls	r2, r2, #16
10011990:	4310      	orrs	r0, r2
10011992:	4662      	mov	r2, ip
10011994:	2a38      	cmp	r2, #56	; 0x38
10011996:	dc00      	bgt.n	1001199a <__aeabi_dsub+0x1c6>
10011998:	e108      	b.n	10011bac <__aeabi_dsub+0x3d8>
1001199a:	4301      	orrs	r1, r0
1001199c:	1e48      	subs	r0, r1, #1
1001199e:	4181      	sbcs	r1, r0
100119a0:	2200      	movs	r2, #0
100119a2:	b2c9      	uxtb	r1, r1
100119a4:	1949      	adds	r1, r1, r5
100119a6:	19d2      	adds	r2, r2, r7
100119a8:	42a9      	cmp	r1, r5
100119aa:	41bf      	sbcs	r7, r7
100119ac:	000d      	movs	r5, r1
100119ae:	427f      	negs	r7, r7
100119b0:	18bf      	adds	r7, r7, r2
100119b2:	023a      	lsls	r2, r7, #8
100119b4:	d400      	bmi.n	100119b8 <__aeabi_dsub+0x1e4>
100119b6:	e142      	b.n	10011c3e <__aeabi_dsub+0x46a>
100119b8:	4a5f      	ldr	r2, [pc, #380]	; (10011b38 <__aeabi_dsub+0x364>)
100119ba:	3401      	adds	r4, #1
100119bc:	4294      	cmp	r4, r2
100119be:	d100      	bne.n	100119c2 <__aeabi_dsub+0x1ee>
100119c0:	e14e      	b.n	10011c60 <__aeabi_dsub+0x48c>
100119c2:	2001      	movs	r0, #1
100119c4:	4a5d      	ldr	r2, [pc, #372]	; (10011b3c <__aeabi_dsub+0x368>)
100119c6:	0869      	lsrs	r1, r5, #1
100119c8:	403a      	ands	r2, r7
100119ca:	4028      	ands	r0, r5
100119cc:	4308      	orrs	r0, r1
100119ce:	07d5      	lsls	r5, r2, #31
100119d0:	4305      	orrs	r5, r0
100119d2:	0857      	lsrs	r7, r2, #1
100119d4:	469a      	mov	sl, r3
100119d6:	e729      	b.n	1001182c <__aeabi_dsub+0x58>
100119d8:	0006      	movs	r6, r0
100119da:	430e      	orrs	r6, r1
100119dc:	d000      	beq.n	100119e0 <__aeabi_dsub+0x20c>
100119de:	e717      	b.n	10011810 <__aeabi_dsub+0x3c>
100119e0:	e714      	b.n	1001180c <__aeabi_dsub+0x38>
100119e2:	0029      	movs	r1, r5
100119e4:	4311      	orrs	r1, r2
100119e6:	d100      	bne.n	100119ea <__aeabi_dsub+0x216>
100119e8:	e1f9      	b.n	10011dde <__aeabi_dsub+0x60a>
100119ea:	2180      	movs	r1, #128	; 0x80
100119ec:	0309      	lsls	r1, r1, #12
100119ee:	430a      	orrs	r2, r1
100119f0:	0312      	lsls	r2, r2, #12
100119f2:	0b12      	lsrs	r2, r2, #12
100119f4:	e73b      	b.n	1001186e <__aeabi_dsub+0x9a>
100119f6:	2301      	movs	r3, #1
100119f8:	425b      	negs	r3, r3
100119fa:	4698      	mov	r8, r3
100119fc:	44c4      	add	ip, r8
100119fe:	4663      	mov	r3, ip
10011a00:	2b00      	cmp	r3, #0
10011a02:	d172      	bne.n	10011aea <__aeabi_dsub+0x316>
10011a04:	1a69      	subs	r1, r5, r1
10011a06:	428d      	cmp	r5, r1
10011a08:	419b      	sbcs	r3, r3
10011a0a:	1a3f      	subs	r7, r7, r0
10011a0c:	425b      	negs	r3, r3
10011a0e:	1aff      	subs	r7, r7, r3
10011a10:	000d      	movs	r5, r1
10011a12:	e768      	b.n	100118e6 <__aeabi_dsub+0x112>
10011a14:	0002      	movs	r2, r0
10011a16:	430a      	orrs	r2, r1
10011a18:	d100      	bne.n	10011a1c <__aeabi_dsub+0x248>
10011a1a:	e707      	b.n	1001182c <__aeabi_dsub+0x58>
10011a1c:	2201      	movs	r2, #1
10011a1e:	4252      	negs	r2, r2
10011a20:	4690      	mov	r8, r2
10011a22:	44c4      	add	ip, r8
10011a24:	4662      	mov	r2, ip
10011a26:	2a00      	cmp	r2, #0
10011a28:	d000      	beq.n	10011a2c <__aeabi_dsub+0x258>
10011a2a:	e0e6      	b.n	10011bfa <__aeabi_dsub+0x426>
10011a2c:	1869      	adds	r1, r5, r1
10011a2e:	42a9      	cmp	r1, r5
10011a30:	41b6      	sbcs	r6, r6
10011a32:	183f      	adds	r7, r7, r0
10011a34:	4276      	negs	r6, r6
10011a36:	19f7      	adds	r7, r6, r7
10011a38:	000d      	movs	r5, r1
10011a3a:	e7ba      	b.n	100119b2 <__aeabi_dsub+0x1de>
10011a3c:	2e00      	cmp	r6, #0
10011a3e:	d000      	beq.n	10011a42 <__aeabi_dsub+0x26e>
10011a40:	e080      	b.n	10011b44 <__aeabi_dsub+0x370>
10011a42:	1c62      	adds	r2, r4, #1
10011a44:	0552      	lsls	r2, r2, #21
10011a46:	0d52      	lsrs	r2, r2, #21
10011a48:	2a01      	cmp	r2, #1
10011a4a:	dc00      	bgt.n	10011a4e <__aeabi_dsub+0x27a>
10011a4c:	e0f9      	b.n	10011c42 <__aeabi_dsub+0x46e>
10011a4e:	1a6a      	subs	r2, r5, r1
10011a50:	4691      	mov	r9, r2
10011a52:	454d      	cmp	r5, r9
10011a54:	41b6      	sbcs	r6, r6
10011a56:	1a3a      	subs	r2, r7, r0
10011a58:	4276      	negs	r6, r6
10011a5a:	1b92      	subs	r2, r2, r6
10011a5c:	4690      	mov	r8, r2
10011a5e:	0212      	lsls	r2, r2, #8
10011a60:	d400      	bmi.n	10011a64 <__aeabi_dsub+0x290>
10011a62:	e099      	b.n	10011b98 <__aeabi_dsub+0x3c4>
10011a64:	1b4d      	subs	r5, r1, r5
10011a66:	42a9      	cmp	r1, r5
10011a68:	4189      	sbcs	r1, r1
10011a6a:	1bc7      	subs	r7, r0, r7
10011a6c:	4249      	negs	r1, r1
10011a6e:	1a7a      	subs	r2, r7, r1
10011a70:	4690      	mov	r8, r2
10011a72:	469a      	mov	sl, r3
10011a74:	e73c      	b.n	100118f0 <__aeabi_dsub+0x11c>
10011a76:	4652      	mov	r2, sl
10011a78:	2301      	movs	r3, #1
10011a7a:	2500      	movs	r5, #0
10011a7c:	4013      	ands	r3, r2
10011a7e:	2200      	movs	r2, #0
10011a80:	e6f5      	b.n	1001186e <__aeabi_dsub+0x9a>
10011a82:	0028      	movs	r0, r5
10011a84:	f000 faa6 	bl	10011fd4 <__clzsi2>
10011a88:	3020      	adds	r0, #32
10011a8a:	0003      	movs	r3, r0
10011a8c:	3b08      	subs	r3, #8
10011a8e:	2b1f      	cmp	r3, #31
10011a90:	dc00      	bgt.n	10011a94 <__aeabi_dsub+0x2c0>
10011a92:	e739      	b.n	10011908 <__aeabi_dsub+0x134>
10011a94:	002a      	movs	r2, r5
10011a96:	3828      	subs	r0, #40	; 0x28
10011a98:	4082      	lsls	r2, r0
10011a9a:	2500      	movs	r5, #0
10011a9c:	429c      	cmp	r4, r3
10011a9e:	dc00      	bgt.n	10011aa2 <__aeabi_dsub+0x2ce>
10011aa0:	e73e      	b.n	10011920 <__aeabi_dsub+0x14c>
10011aa2:	4f26      	ldr	r7, [pc, #152]	; (10011b3c <__aeabi_dsub+0x368>)
10011aa4:	1ae4      	subs	r4, r4, r3
10011aa6:	4017      	ands	r7, r2
10011aa8:	e6c0      	b.n	1001182c <__aeabi_dsub+0x58>
10011aaa:	4301      	orrs	r1, r0
10011aac:	1e48      	subs	r0, r1, #1
10011aae:	4181      	sbcs	r1, r0
10011ab0:	2200      	movs	r2, #0
10011ab2:	b2c9      	uxtb	r1, r1
10011ab4:	e710      	b.n	100118d8 <__aeabi_dsub+0x104>
10011ab6:	2e00      	cmp	r6, #0
10011ab8:	d000      	beq.n	10011abc <__aeabi_dsub+0x2e8>
10011aba:	e0f1      	b.n	10011ca0 <__aeabi_dsub+0x4cc>
10011abc:	1c62      	adds	r2, r4, #1
10011abe:	4694      	mov	ip, r2
10011ac0:	0552      	lsls	r2, r2, #21
10011ac2:	0d52      	lsrs	r2, r2, #21
10011ac4:	2a01      	cmp	r2, #1
10011ac6:	dc00      	bgt.n	10011aca <__aeabi_dsub+0x2f6>
10011ac8:	e0a0      	b.n	10011c0c <__aeabi_dsub+0x438>
10011aca:	4a1b      	ldr	r2, [pc, #108]	; (10011b38 <__aeabi_dsub+0x364>)
10011acc:	4594      	cmp	ip, r2
10011ace:	d100      	bne.n	10011ad2 <__aeabi_dsub+0x2fe>
10011ad0:	e0c5      	b.n	10011c5e <__aeabi_dsub+0x48a>
10011ad2:	1869      	adds	r1, r5, r1
10011ad4:	42a9      	cmp	r1, r5
10011ad6:	4192      	sbcs	r2, r2
10011ad8:	183f      	adds	r7, r7, r0
10011ada:	4252      	negs	r2, r2
10011adc:	19d2      	adds	r2, r2, r7
10011ade:	0849      	lsrs	r1, r1, #1
10011ae0:	07d5      	lsls	r5, r2, #31
10011ae2:	430d      	orrs	r5, r1
10011ae4:	0857      	lsrs	r7, r2, #1
10011ae6:	4664      	mov	r4, ip
10011ae8:	e6a0      	b.n	1001182c <__aeabi_dsub+0x58>
10011aea:	4b13      	ldr	r3, [pc, #76]	; (10011b38 <__aeabi_dsub+0x364>)
10011aec:	429c      	cmp	r4, r3
10011aee:	d000      	beq.n	10011af2 <__aeabi_dsub+0x31e>
10011af0:	e6d9      	b.n	100118a6 <__aeabi_dsub+0xd2>
10011af2:	e69b      	b.n	1001182c <__aeabi_dsub+0x58>
10011af4:	0011      	movs	r1, r2
10011af6:	3c1f      	subs	r4, #31
10011af8:	40e1      	lsrs	r1, r4
10011afa:	000c      	movs	r4, r1
10011afc:	2b20      	cmp	r3, #32
10011afe:	d100      	bne.n	10011b02 <__aeabi_dsub+0x32e>
10011b00:	e080      	b.n	10011c04 <__aeabi_dsub+0x430>
10011b02:	2140      	movs	r1, #64	; 0x40
10011b04:	1acb      	subs	r3, r1, r3
10011b06:	409a      	lsls	r2, r3
10011b08:	4315      	orrs	r5, r2
10011b0a:	1e6a      	subs	r2, r5, #1
10011b0c:	4195      	sbcs	r5, r2
10011b0e:	2700      	movs	r7, #0
10011b10:	4325      	orrs	r5, r4
10011b12:	2400      	movs	r4, #0
10011b14:	e71f      	b.n	10011956 <__aeabi_dsub+0x182>
10011b16:	4663      	mov	r3, ip
10011b18:	0002      	movs	r2, r0
10011b1a:	3b20      	subs	r3, #32
10011b1c:	40da      	lsrs	r2, r3
10011b1e:	4663      	mov	r3, ip
10011b20:	2b20      	cmp	r3, #32
10011b22:	d071      	beq.n	10011c08 <__aeabi_dsub+0x434>
10011b24:	2340      	movs	r3, #64	; 0x40
10011b26:	4666      	mov	r6, ip
10011b28:	1b9b      	subs	r3, r3, r6
10011b2a:	4098      	lsls	r0, r3
10011b2c:	4301      	orrs	r1, r0
10011b2e:	1e48      	subs	r0, r1, #1
10011b30:	4181      	sbcs	r1, r0
10011b32:	4311      	orrs	r1, r2
10011b34:	2200      	movs	r2, #0
10011b36:	e6cf      	b.n	100118d8 <__aeabi_dsub+0x104>
10011b38:	000007ff 	.word	0x000007ff
10011b3c:	ff7fffff 	.word	0xff7fffff
10011b40:	800fffff 	.word	0x800fffff
10011b44:	2c00      	cmp	r4, #0
10011b46:	d048      	beq.n	10011bda <__aeabi_dsub+0x406>
10011b48:	4cca      	ldr	r4, [pc, #808]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011b4a:	42a2      	cmp	r2, r4
10011b4c:	d100      	bne.n	10011b50 <__aeabi_dsub+0x37c>
10011b4e:	e0a2      	b.n	10011c96 <__aeabi_dsub+0x4c2>
10011b50:	4274      	negs	r4, r6
10011b52:	46a1      	mov	r9, r4
10011b54:	2480      	movs	r4, #128	; 0x80
10011b56:	0424      	lsls	r4, r4, #16
10011b58:	4327      	orrs	r7, r4
10011b5a:	464c      	mov	r4, r9
10011b5c:	2c38      	cmp	r4, #56	; 0x38
10011b5e:	dd00      	ble.n	10011b62 <__aeabi_dsub+0x38e>
10011b60:	e0db      	b.n	10011d1a <__aeabi_dsub+0x546>
10011b62:	2c1f      	cmp	r4, #31
10011b64:	dd00      	ble.n	10011b68 <__aeabi_dsub+0x394>
10011b66:	e144      	b.n	10011df2 <__aeabi_dsub+0x61e>
10011b68:	464e      	mov	r6, r9
10011b6a:	2420      	movs	r4, #32
10011b6c:	1ba4      	subs	r4, r4, r6
10011b6e:	003e      	movs	r6, r7
10011b70:	40a6      	lsls	r6, r4
10011b72:	46a2      	mov	sl, r4
10011b74:	46b0      	mov	r8, r6
10011b76:	464c      	mov	r4, r9
10011b78:	002e      	movs	r6, r5
10011b7a:	40e6      	lsrs	r6, r4
10011b7c:	46b4      	mov	ip, r6
10011b7e:	4646      	mov	r6, r8
10011b80:	4664      	mov	r4, ip
10011b82:	4326      	orrs	r6, r4
10011b84:	4654      	mov	r4, sl
10011b86:	40a5      	lsls	r5, r4
10011b88:	1e6c      	subs	r4, r5, #1
10011b8a:	41a5      	sbcs	r5, r4
10011b8c:	0034      	movs	r4, r6
10011b8e:	432c      	orrs	r4, r5
10011b90:	464d      	mov	r5, r9
10011b92:	40ef      	lsrs	r7, r5
10011b94:	1b0d      	subs	r5, r1, r4
10011b96:	e028      	b.n	10011bea <__aeabi_dsub+0x416>
10011b98:	464a      	mov	r2, r9
10011b9a:	4643      	mov	r3, r8
10011b9c:	464d      	mov	r5, r9
10011b9e:	431a      	orrs	r2, r3
10011ba0:	d000      	beq.n	10011ba4 <__aeabi_dsub+0x3d0>
10011ba2:	e6a5      	b.n	100118f0 <__aeabi_dsub+0x11c>
10011ba4:	2300      	movs	r3, #0
10011ba6:	2400      	movs	r4, #0
10011ba8:	2500      	movs	r5, #0
10011baa:	e6de      	b.n	1001196a <__aeabi_dsub+0x196>
10011bac:	2a1f      	cmp	r2, #31
10011bae:	dc5a      	bgt.n	10011c66 <__aeabi_dsub+0x492>
10011bb0:	4666      	mov	r6, ip
10011bb2:	2220      	movs	r2, #32
10011bb4:	1b92      	subs	r2, r2, r6
10011bb6:	0006      	movs	r6, r0
10011bb8:	4096      	lsls	r6, r2
10011bba:	4691      	mov	r9, r2
10011bbc:	46b0      	mov	r8, r6
10011bbe:	4662      	mov	r2, ip
10011bc0:	000e      	movs	r6, r1
10011bc2:	40d6      	lsrs	r6, r2
10011bc4:	4642      	mov	r2, r8
10011bc6:	4316      	orrs	r6, r2
10011bc8:	464a      	mov	r2, r9
10011bca:	4091      	lsls	r1, r2
10011bcc:	1e4a      	subs	r2, r1, #1
10011bce:	4191      	sbcs	r1, r2
10011bd0:	0002      	movs	r2, r0
10011bd2:	4660      	mov	r0, ip
10011bd4:	4331      	orrs	r1, r6
10011bd6:	40c2      	lsrs	r2, r0
10011bd8:	e6e4      	b.n	100119a4 <__aeabi_dsub+0x1d0>
10011bda:	003c      	movs	r4, r7
10011bdc:	432c      	orrs	r4, r5
10011bde:	d05a      	beq.n	10011c96 <__aeabi_dsub+0x4c2>
10011be0:	43f4      	mvns	r4, r6
10011be2:	46a1      	mov	r9, r4
10011be4:	2c00      	cmp	r4, #0
10011be6:	d152      	bne.n	10011c8e <__aeabi_dsub+0x4ba>
10011be8:	1b4d      	subs	r5, r1, r5
10011bea:	42a9      	cmp	r1, r5
10011bec:	4189      	sbcs	r1, r1
10011bee:	1bc7      	subs	r7, r0, r7
10011bf0:	4249      	negs	r1, r1
10011bf2:	1a7f      	subs	r7, r7, r1
10011bf4:	0014      	movs	r4, r2
10011bf6:	469a      	mov	sl, r3
10011bf8:	e675      	b.n	100118e6 <__aeabi_dsub+0x112>
10011bfa:	4a9e      	ldr	r2, [pc, #632]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011bfc:	4294      	cmp	r4, r2
10011bfe:	d000      	beq.n	10011c02 <__aeabi_dsub+0x42e>
10011c00:	e6c7      	b.n	10011992 <__aeabi_dsub+0x1be>
10011c02:	e613      	b.n	1001182c <__aeabi_dsub+0x58>
10011c04:	2200      	movs	r2, #0
10011c06:	e77f      	b.n	10011b08 <__aeabi_dsub+0x334>
10011c08:	2000      	movs	r0, #0
10011c0a:	e78f      	b.n	10011b2c <__aeabi_dsub+0x358>
10011c0c:	2c00      	cmp	r4, #0
10011c0e:	d000      	beq.n	10011c12 <__aeabi_dsub+0x43e>
10011c10:	e0c8      	b.n	10011da4 <__aeabi_dsub+0x5d0>
10011c12:	003b      	movs	r3, r7
10011c14:	432b      	orrs	r3, r5
10011c16:	d100      	bne.n	10011c1a <__aeabi_dsub+0x446>
10011c18:	e10f      	b.n	10011e3a <__aeabi_dsub+0x666>
10011c1a:	0003      	movs	r3, r0
10011c1c:	430b      	orrs	r3, r1
10011c1e:	d100      	bne.n	10011c22 <__aeabi_dsub+0x44e>
10011c20:	e604      	b.n	1001182c <__aeabi_dsub+0x58>
10011c22:	1869      	adds	r1, r5, r1
10011c24:	42a9      	cmp	r1, r5
10011c26:	419b      	sbcs	r3, r3
10011c28:	183f      	adds	r7, r7, r0
10011c2a:	425b      	negs	r3, r3
10011c2c:	19df      	adds	r7, r3, r7
10011c2e:	023b      	lsls	r3, r7, #8
10011c30:	d400      	bmi.n	10011c34 <__aeabi_dsub+0x460>
10011c32:	e11a      	b.n	10011e6a <__aeabi_dsub+0x696>
10011c34:	4b90      	ldr	r3, [pc, #576]	; (10011e78 <__aeabi_dsub+0x6a4>)
10011c36:	000d      	movs	r5, r1
10011c38:	401f      	ands	r7, r3
10011c3a:	4664      	mov	r4, ip
10011c3c:	e5f6      	b.n	1001182c <__aeabi_dsub+0x58>
10011c3e:	469a      	mov	sl, r3
10011c40:	e689      	b.n	10011956 <__aeabi_dsub+0x182>
10011c42:	003a      	movs	r2, r7
10011c44:	432a      	orrs	r2, r5
10011c46:	2c00      	cmp	r4, #0
10011c48:	d15c      	bne.n	10011d04 <__aeabi_dsub+0x530>
10011c4a:	2a00      	cmp	r2, #0
10011c4c:	d175      	bne.n	10011d3a <__aeabi_dsub+0x566>
10011c4e:	0002      	movs	r2, r0
10011c50:	430a      	orrs	r2, r1
10011c52:	d100      	bne.n	10011c56 <__aeabi_dsub+0x482>
10011c54:	e0ca      	b.n	10011dec <__aeabi_dsub+0x618>
10011c56:	0007      	movs	r7, r0
10011c58:	000d      	movs	r5, r1
10011c5a:	469a      	mov	sl, r3
10011c5c:	e5e6      	b.n	1001182c <__aeabi_dsub+0x58>
10011c5e:	4664      	mov	r4, ip
10011c60:	2200      	movs	r2, #0
10011c62:	2500      	movs	r5, #0
10011c64:	e681      	b.n	1001196a <__aeabi_dsub+0x196>
10011c66:	4662      	mov	r2, ip
10011c68:	0006      	movs	r6, r0
10011c6a:	3a20      	subs	r2, #32
10011c6c:	40d6      	lsrs	r6, r2
10011c6e:	4662      	mov	r2, ip
10011c70:	46b0      	mov	r8, r6
10011c72:	2a20      	cmp	r2, #32
10011c74:	d100      	bne.n	10011c78 <__aeabi_dsub+0x4a4>
10011c76:	e0b7      	b.n	10011de8 <__aeabi_dsub+0x614>
10011c78:	2240      	movs	r2, #64	; 0x40
10011c7a:	4666      	mov	r6, ip
10011c7c:	1b92      	subs	r2, r2, r6
10011c7e:	4090      	lsls	r0, r2
10011c80:	4301      	orrs	r1, r0
10011c82:	4642      	mov	r2, r8
10011c84:	1e48      	subs	r0, r1, #1
10011c86:	4181      	sbcs	r1, r0
10011c88:	4311      	orrs	r1, r2
10011c8a:	2200      	movs	r2, #0
10011c8c:	e68a      	b.n	100119a4 <__aeabi_dsub+0x1d0>
10011c8e:	4c79      	ldr	r4, [pc, #484]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011c90:	42a2      	cmp	r2, r4
10011c92:	d000      	beq.n	10011c96 <__aeabi_dsub+0x4c2>
10011c94:	e761      	b.n	10011b5a <__aeabi_dsub+0x386>
10011c96:	0007      	movs	r7, r0
10011c98:	000d      	movs	r5, r1
10011c9a:	0014      	movs	r4, r2
10011c9c:	469a      	mov	sl, r3
10011c9e:	e5c5      	b.n	1001182c <__aeabi_dsub+0x58>
10011ca0:	2c00      	cmp	r4, #0
10011ca2:	d141      	bne.n	10011d28 <__aeabi_dsub+0x554>
10011ca4:	003c      	movs	r4, r7
10011ca6:	432c      	orrs	r4, r5
10011ca8:	d078      	beq.n	10011d9c <__aeabi_dsub+0x5c8>
10011caa:	43f4      	mvns	r4, r6
10011cac:	46a1      	mov	r9, r4
10011cae:	2c00      	cmp	r4, #0
10011cb0:	d020      	beq.n	10011cf4 <__aeabi_dsub+0x520>
10011cb2:	4c70      	ldr	r4, [pc, #448]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011cb4:	42a2      	cmp	r2, r4
10011cb6:	d071      	beq.n	10011d9c <__aeabi_dsub+0x5c8>
10011cb8:	464c      	mov	r4, r9
10011cba:	2c38      	cmp	r4, #56	; 0x38
10011cbc:	dd00      	ble.n	10011cc0 <__aeabi_dsub+0x4ec>
10011cbe:	e0b2      	b.n	10011e26 <__aeabi_dsub+0x652>
10011cc0:	2c1f      	cmp	r4, #31
10011cc2:	dd00      	ble.n	10011cc6 <__aeabi_dsub+0x4f2>
10011cc4:	e0bc      	b.n	10011e40 <__aeabi_dsub+0x66c>
10011cc6:	2620      	movs	r6, #32
10011cc8:	1b34      	subs	r4, r6, r4
10011cca:	46a2      	mov	sl, r4
10011ccc:	003c      	movs	r4, r7
10011cce:	4656      	mov	r6, sl
10011cd0:	40b4      	lsls	r4, r6
10011cd2:	464e      	mov	r6, r9
10011cd4:	46a0      	mov	r8, r4
10011cd6:	002c      	movs	r4, r5
10011cd8:	40f4      	lsrs	r4, r6
10011cda:	46a4      	mov	ip, r4
10011cdc:	4644      	mov	r4, r8
10011cde:	4666      	mov	r6, ip
10011ce0:	4334      	orrs	r4, r6
10011ce2:	46a4      	mov	ip, r4
10011ce4:	4654      	mov	r4, sl
10011ce6:	40a5      	lsls	r5, r4
10011ce8:	4664      	mov	r4, ip
10011cea:	1e6e      	subs	r6, r5, #1
10011cec:	41b5      	sbcs	r5, r6
10011cee:	4325      	orrs	r5, r4
10011cf0:	464c      	mov	r4, r9
10011cf2:	40e7      	lsrs	r7, r4
10011cf4:	186d      	adds	r5, r5, r1
10011cf6:	428d      	cmp	r5, r1
10011cf8:	4189      	sbcs	r1, r1
10011cfa:	183f      	adds	r7, r7, r0
10011cfc:	4249      	negs	r1, r1
10011cfe:	19cf      	adds	r7, r1, r7
10011d00:	0014      	movs	r4, r2
10011d02:	e656      	b.n	100119b2 <__aeabi_dsub+0x1de>
10011d04:	2a00      	cmp	r2, #0
10011d06:	d12f      	bne.n	10011d68 <__aeabi_dsub+0x594>
10011d08:	0002      	movs	r2, r0
10011d0a:	430a      	orrs	r2, r1
10011d0c:	d100      	bne.n	10011d10 <__aeabi_dsub+0x53c>
10011d0e:	e084      	b.n	10011e1a <__aeabi_dsub+0x646>
10011d10:	0007      	movs	r7, r0
10011d12:	000d      	movs	r5, r1
10011d14:	469a      	mov	sl, r3
10011d16:	4c57      	ldr	r4, [pc, #348]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011d18:	e588      	b.n	1001182c <__aeabi_dsub+0x58>
10011d1a:	433d      	orrs	r5, r7
10011d1c:	1e6f      	subs	r7, r5, #1
10011d1e:	41bd      	sbcs	r5, r7
10011d20:	b2ec      	uxtb	r4, r5
10011d22:	2700      	movs	r7, #0
10011d24:	1b0d      	subs	r5, r1, r4
10011d26:	e760      	b.n	10011bea <__aeabi_dsub+0x416>
10011d28:	4c52      	ldr	r4, [pc, #328]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011d2a:	42a2      	cmp	r2, r4
10011d2c:	d036      	beq.n	10011d9c <__aeabi_dsub+0x5c8>
10011d2e:	4274      	negs	r4, r6
10011d30:	2680      	movs	r6, #128	; 0x80
10011d32:	0436      	lsls	r6, r6, #16
10011d34:	46a1      	mov	r9, r4
10011d36:	4337      	orrs	r7, r6
10011d38:	e7be      	b.n	10011cb8 <__aeabi_dsub+0x4e4>
10011d3a:	0002      	movs	r2, r0
10011d3c:	430a      	orrs	r2, r1
10011d3e:	d100      	bne.n	10011d42 <__aeabi_dsub+0x56e>
10011d40:	e574      	b.n	1001182c <__aeabi_dsub+0x58>
10011d42:	1a6a      	subs	r2, r5, r1
10011d44:	4690      	mov	r8, r2
10011d46:	4545      	cmp	r5, r8
10011d48:	41b6      	sbcs	r6, r6
10011d4a:	1a3a      	subs	r2, r7, r0
10011d4c:	4276      	negs	r6, r6
10011d4e:	1b92      	subs	r2, r2, r6
10011d50:	4694      	mov	ip, r2
10011d52:	0212      	lsls	r2, r2, #8
10011d54:	d400      	bmi.n	10011d58 <__aeabi_dsub+0x584>
10011d56:	e5f7      	b.n	10011948 <__aeabi_dsub+0x174>
10011d58:	1b4d      	subs	r5, r1, r5
10011d5a:	42a9      	cmp	r1, r5
10011d5c:	4189      	sbcs	r1, r1
10011d5e:	1bc7      	subs	r7, r0, r7
10011d60:	4249      	negs	r1, r1
10011d62:	1a7f      	subs	r7, r7, r1
10011d64:	469a      	mov	sl, r3
10011d66:	e561      	b.n	1001182c <__aeabi_dsub+0x58>
10011d68:	0002      	movs	r2, r0
10011d6a:	430a      	orrs	r2, r1
10011d6c:	d03a      	beq.n	10011de4 <__aeabi_dsub+0x610>
10011d6e:	08ed      	lsrs	r5, r5, #3
10011d70:	077c      	lsls	r4, r7, #29
10011d72:	432c      	orrs	r4, r5
10011d74:	2580      	movs	r5, #128	; 0x80
10011d76:	08fa      	lsrs	r2, r7, #3
10011d78:	032d      	lsls	r5, r5, #12
10011d7a:	422a      	tst	r2, r5
10011d7c:	d008      	beq.n	10011d90 <__aeabi_dsub+0x5bc>
10011d7e:	08c7      	lsrs	r7, r0, #3
10011d80:	422f      	tst	r7, r5
10011d82:	d105      	bne.n	10011d90 <__aeabi_dsub+0x5bc>
10011d84:	0745      	lsls	r5, r0, #29
10011d86:	002c      	movs	r4, r5
10011d88:	003a      	movs	r2, r7
10011d8a:	469a      	mov	sl, r3
10011d8c:	08c9      	lsrs	r1, r1, #3
10011d8e:	430c      	orrs	r4, r1
10011d90:	0f67      	lsrs	r7, r4, #29
10011d92:	00d2      	lsls	r2, r2, #3
10011d94:	00e5      	lsls	r5, r4, #3
10011d96:	4317      	orrs	r7, r2
10011d98:	4c36      	ldr	r4, [pc, #216]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011d9a:	e547      	b.n	1001182c <__aeabi_dsub+0x58>
10011d9c:	0007      	movs	r7, r0
10011d9e:	000d      	movs	r5, r1
10011da0:	0014      	movs	r4, r2
10011da2:	e543      	b.n	1001182c <__aeabi_dsub+0x58>
10011da4:	003a      	movs	r2, r7
10011da6:	432a      	orrs	r2, r5
10011da8:	d043      	beq.n	10011e32 <__aeabi_dsub+0x65e>
10011daa:	0002      	movs	r2, r0
10011dac:	430a      	orrs	r2, r1
10011dae:	d019      	beq.n	10011de4 <__aeabi_dsub+0x610>
10011db0:	08ed      	lsrs	r5, r5, #3
10011db2:	077c      	lsls	r4, r7, #29
10011db4:	432c      	orrs	r4, r5
10011db6:	2580      	movs	r5, #128	; 0x80
10011db8:	08fa      	lsrs	r2, r7, #3
10011dba:	032d      	lsls	r5, r5, #12
10011dbc:	422a      	tst	r2, r5
10011dbe:	d007      	beq.n	10011dd0 <__aeabi_dsub+0x5fc>
10011dc0:	08c6      	lsrs	r6, r0, #3
10011dc2:	422e      	tst	r6, r5
10011dc4:	d104      	bne.n	10011dd0 <__aeabi_dsub+0x5fc>
10011dc6:	0747      	lsls	r7, r0, #29
10011dc8:	003c      	movs	r4, r7
10011dca:	0032      	movs	r2, r6
10011dcc:	08c9      	lsrs	r1, r1, #3
10011dce:	430c      	orrs	r4, r1
10011dd0:	00d7      	lsls	r7, r2, #3
10011dd2:	0f62      	lsrs	r2, r4, #29
10011dd4:	00e5      	lsls	r5, r4, #3
10011dd6:	4317      	orrs	r7, r2
10011dd8:	469a      	mov	sl, r3
10011dda:	4c26      	ldr	r4, [pc, #152]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011ddc:	e526      	b.n	1001182c <__aeabi_dsub+0x58>
10011dde:	2200      	movs	r2, #0
10011de0:	2500      	movs	r5, #0
10011de2:	e544      	b.n	1001186e <__aeabi_dsub+0x9a>
10011de4:	4c23      	ldr	r4, [pc, #140]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011de6:	e521      	b.n	1001182c <__aeabi_dsub+0x58>
10011de8:	2000      	movs	r0, #0
10011dea:	e749      	b.n	10011c80 <__aeabi_dsub+0x4ac>
10011dec:	2300      	movs	r3, #0
10011dee:	2500      	movs	r5, #0
10011df0:	e5bb      	b.n	1001196a <__aeabi_dsub+0x196>
10011df2:	464c      	mov	r4, r9
10011df4:	003e      	movs	r6, r7
10011df6:	3c20      	subs	r4, #32
10011df8:	40e6      	lsrs	r6, r4
10011dfa:	464c      	mov	r4, r9
10011dfc:	46b4      	mov	ip, r6
10011dfe:	2c20      	cmp	r4, #32
10011e00:	d031      	beq.n	10011e66 <__aeabi_dsub+0x692>
10011e02:	2440      	movs	r4, #64	; 0x40
10011e04:	464e      	mov	r6, r9
10011e06:	1ba6      	subs	r6, r4, r6
10011e08:	40b7      	lsls	r7, r6
10011e0a:	433d      	orrs	r5, r7
10011e0c:	1e6c      	subs	r4, r5, #1
10011e0e:	41a5      	sbcs	r5, r4
10011e10:	4664      	mov	r4, ip
10011e12:	432c      	orrs	r4, r5
10011e14:	2700      	movs	r7, #0
10011e16:	1b0d      	subs	r5, r1, r4
10011e18:	e6e7      	b.n	10011bea <__aeabi_dsub+0x416>
10011e1a:	2280      	movs	r2, #128	; 0x80
10011e1c:	2300      	movs	r3, #0
10011e1e:	0312      	lsls	r2, r2, #12
10011e20:	4c14      	ldr	r4, [pc, #80]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011e22:	2500      	movs	r5, #0
10011e24:	e5a1      	b.n	1001196a <__aeabi_dsub+0x196>
10011e26:	433d      	orrs	r5, r7
10011e28:	1e6f      	subs	r7, r5, #1
10011e2a:	41bd      	sbcs	r5, r7
10011e2c:	2700      	movs	r7, #0
10011e2e:	b2ed      	uxtb	r5, r5
10011e30:	e760      	b.n	10011cf4 <__aeabi_dsub+0x520>
10011e32:	0007      	movs	r7, r0
10011e34:	000d      	movs	r5, r1
10011e36:	4c0f      	ldr	r4, [pc, #60]	; (10011e74 <__aeabi_dsub+0x6a0>)
10011e38:	e4f8      	b.n	1001182c <__aeabi_dsub+0x58>
10011e3a:	0007      	movs	r7, r0
10011e3c:	000d      	movs	r5, r1
10011e3e:	e4f5      	b.n	1001182c <__aeabi_dsub+0x58>
10011e40:	464e      	mov	r6, r9
10011e42:	003c      	movs	r4, r7
10011e44:	3e20      	subs	r6, #32
10011e46:	40f4      	lsrs	r4, r6
10011e48:	46a0      	mov	r8, r4
10011e4a:	464c      	mov	r4, r9
10011e4c:	2c20      	cmp	r4, #32
10011e4e:	d00e      	beq.n	10011e6e <__aeabi_dsub+0x69a>
10011e50:	2440      	movs	r4, #64	; 0x40
10011e52:	464e      	mov	r6, r9
10011e54:	1ba4      	subs	r4, r4, r6
10011e56:	40a7      	lsls	r7, r4
10011e58:	433d      	orrs	r5, r7
10011e5a:	1e6f      	subs	r7, r5, #1
10011e5c:	41bd      	sbcs	r5, r7
10011e5e:	4644      	mov	r4, r8
10011e60:	2700      	movs	r7, #0
10011e62:	4325      	orrs	r5, r4
10011e64:	e746      	b.n	10011cf4 <__aeabi_dsub+0x520>
10011e66:	2700      	movs	r7, #0
10011e68:	e7cf      	b.n	10011e0a <__aeabi_dsub+0x636>
10011e6a:	000d      	movs	r5, r1
10011e6c:	e573      	b.n	10011956 <__aeabi_dsub+0x182>
10011e6e:	2700      	movs	r7, #0
10011e70:	e7f2      	b.n	10011e58 <__aeabi_dsub+0x684>
10011e72:	46c0      	nop			; (mov r8, r8)
10011e74:	000007ff 	.word	0x000007ff
10011e78:	ff7fffff 	.word	0xff7fffff

10011e7c <__aeabi_d2iz>:
10011e7c:	030b      	lsls	r3, r1, #12
10011e7e:	b530      	push	{r4, r5, lr}
10011e80:	4d13      	ldr	r5, [pc, #76]	; (10011ed0 <__aeabi_d2iz+0x54>)
10011e82:	0b1a      	lsrs	r2, r3, #12
10011e84:	004b      	lsls	r3, r1, #1
10011e86:	0d5b      	lsrs	r3, r3, #21
10011e88:	0fc9      	lsrs	r1, r1, #31
10011e8a:	2400      	movs	r4, #0
10011e8c:	42ab      	cmp	r3, r5
10011e8e:	dd11      	ble.n	10011eb4 <__aeabi_d2iz+0x38>
10011e90:	4c10      	ldr	r4, [pc, #64]	; (10011ed4 <__aeabi_d2iz+0x58>)
10011e92:	42a3      	cmp	r3, r4
10011e94:	dc10      	bgt.n	10011eb8 <__aeabi_d2iz+0x3c>
10011e96:	2480      	movs	r4, #128	; 0x80
10011e98:	0364      	lsls	r4, r4, #13
10011e9a:	4322      	orrs	r2, r4
10011e9c:	4c0e      	ldr	r4, [pc, #56]	; (10011ed8 <__aeabi_d2iz+0x5c>)
10011e9e:	1ae4      	subs	r4, r4, r3
10011ea0:	2c1f      	cmp	r4, #31
10011ea2:	dd0c      	ble.n	10011ebe <__aeabi_d2iz+0x42>
10011ea4:	480d      	ldr	r0, [pc, #52]	; (10011edc <__aeabi_d2iz+0x60>)
10011ea6:	1ac3      	subs	r3, r0, r3
10011ea8:	40da      	lsrs	r2, r3
10011eaa:	0013      	movs	r3, r2
10011eac:	425c      	negs	r4, r3
10011eae:	2900      	cmp	r1, #0
10011eb0:	d100      	bne.n	10011eb4 <__aeabi_d2iz+0x38>
10011eb2:	001c      	movs	r4, r3
10011eb4:	0020      	movs	r0, r4
10011eb6:	bd30      	pop	{r4, r5, pc}
10011eb8:	4b09      	ldr	r3, [pc, #36]	; (10011ee0 <__aeabi_d2iz+0x64>)
10011eba:	18cc      	adds	r4, r1, r3
10011ebc:	e7fa      	b.n	10011eb4 <__aeabi_d2iz+0x38>
10011ebe:	40e0      	lsrs	r0, r4
10011ec0:	4c08      	ldr	r4, [pc, #32]	; (10011ee4 <__aeabi_d2iz+0x68>)
10011ec2:	46a4      	mov	ip, r4
10011ec4:	4463      	add	r3, ip
10011ec6:	409a      	lsls	r2, r3
10011ec8:	0013      	movs	r3, r2
10011eca:	4303      	orrs	r3, r0
10011ecc:	e7ee      	b.n	10011eac <__aeabi_d2iz+0x30>
10011ece:	46c0      	nop			; (mov r8, r8)
10011ed0:	000003fe 	.word	0x000003fe
10011ed4:	0000041d 	.word	0x0000041d
10011ed8:	00000433 	.word	0x00000433
10011edc:	00000413 	.word	0x00000413
10011ee0:	7fffffff 	.word	0x7fffffff
10011ee4:	fffffbed 	.word	0xfffffbed

10011ee8 <__aeabi_ui2d>:
10011ee8:	b570      	push	{r4, r5, r6, lr}
10011eea:	1e05      	subs	r5, r0, #0
10011eec:	d028      	beq.n	10011f40 <__aeabi_ui2d+0x58>
10011eee:	f000 f871 	bl	10011fd4 <__clzsi2>
10011ef2:	4b15      	ldr	r3, [pc, #84]	; (10011f48 <__aeabi_ui2d+0x60>)
10011ef4:	4a15      	ldr	r2, [pc, #84]	; (10011f4c <__aeabi_ui2d+0x64>)
10011ef6:	1a1b      	subs	r3, r3, r0
10011ef8:	1ad2      	subs	r2, r2, r3
10011efa:	2a1f      	cmp	r2, #31
10011efc:	dd16      	ble.n	10011f2c <__aeabi_ui2d+0x44>
10011efe:	002c      	movs	r4, r5
10011f00:	4a13      	ldr	r2, [pc, #76]	; (10011f50 <__aeabi_ui2d+0x68>)
10011f02:	2500      	movs	r5, #0
10011f04:	1ad2      	subs	r2, r2, r3
10011f06:	4094      	lsls	r4, r2
10011f08:	055a      	lsls	r2, r3, #21
10011f0a:	0324      	lsls	r4, r4, #12
10011f0c:	0b24      	lsrs	r4, r4, #12
10011f0e:	0d52      	lsrs	r2, r2, #21
10011f10:	2100      	movs	r1, #0
10011f12:	0324      	lsls	r4, r4, #12
10011f14:	0d0b      	lsrs	r3, r1, #20
10011f16:	0b24      	lsrs	r4, r4, #12
10011f18:	051b      	lsls	r3, r3, #20
10011f1a:	4323      	orrs	r3, r4
10011f1c:	4c0d      	ldr	r4, [pc, #52]	; (10011f54 <__aeabi_ui2d+0x6c>)
10011f1e:	0512      	lsls	r2, r2, #20
10011f20:	4023      	ands	r3, r4
10011f22:	4313      	orrs	r3, r2
10011f24:	005b      	lsls	r3, r3, #1
10011f26:	0028      	movs	r0, r5
10011f28:	0859      	lsrs	r1, r3, #1
10011f2a:	bd70      	pop	{r4, r5, r6, pc}
10011f2c:	210b      	movs	r1, #11
10011f2e:	002c      	movs	r4, r5
10011f30:	1a08      	subs	r0, r1, r0
10011f32:	40c4      	lsrs	r4, r0
10011f34:	4095      	lsls	r5, r2
10011f36:	0324      	lsls	r4, r4, #12
10011f38:	055a      	lsls	r2, r3, #21
10011f3a:	0b24      	lsrs	r4, r4, #12
10011f3c:	0d52      	lsrs	r2, r2, #21
10011f3e:	e7e7      	b.n	10011f10 <__aeabi_ui2d+0x28>
10011f40:	2200      	movs	r2, #0
10011f42:	2400      	movs	r4, #0
10011f44:	e7e4      	b.n	10011f10 <__aeabi_ui2d+0x28>
10011f46:	46c0      	nop			; (mov r8, r8)
10011f48:	0000041e 	.word	0x0000041e
10011f4c:	00000433 	.word	0x00000433
10011f50:	00000413 	.word	0x00000413
10011f54:	800fffff 	.word	0x800fffff

10011f58 <__aeabi_cdrcmple>:
10011f58:	4684      	mov	ip, r0
10011f5a:	1c10      	adds	r0, r2, #0
10011f5c:	4662      	mov	r2, ip
10011f5e:	468c      	mov	ip, r1
10011f60:	1c19      	adds	r1, r3, #0
10011f62:	4663      	mov	r3, ip
10011f64:	e000      	b.n	10011f68 <__aeabi_cdcmpeq>
10011f66:	46c0      	nop			; (mov r8, r8)

10011f68 <__aeabi_cdcmpeq>:
10011f68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10011f6a:	f000 f8f5 	bl	10012158 <__ledf2>
10011f6e:	2800      	cmp	r0, #0
10011f70:	d401      	bmi.n	10011f76 <__aeabi_cdcmpeq+0xe>
10011f72:	2100      	movs	r1, #0
10011f74:	42c8      	cmn	r0, r1
10011f76:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10011f78 <__aeabi_dcmpeq>:
10011f78:	b510      	push	{r4, lr}
10011f7a:	f000 f849 	bl	10012010 <__eqdf2>
10011f7e:	4240      	negs	r0, r0
10011f80:	3001      	adds	r0, #1
10011f82:	bd10      	pop	{r4, pc}

10011f84 <__aeabi_dcmplt>:
10011f84:	b510      	push	{r4, lr}
10011f86:	f000 f8e7 	bl	10012158 <__ledf2>
10011f8a:	2800      	cmp	r0, #0
10011f8c:	db01      	blt.n	10011f92 <__aeabi_dcmplt+0xe>
10011f8e:	2000      	movs	r0, #0
10011f90:	bd10      	pop	{r4, pc}
10011f92:	2001      	movs	r0, #1
10011f94:	bd10      	pop	{r4, pc}
10011f96:	46c0      	nop			; (mov r8, r8)

10011f98 <__aeabi_dcmple>:
10011f98:	b510      	push	{r4, lr}
10011f9a:	f000 f8dd 	bl	10012158 <__ledf2>
10011f9e:	2800      	cmp	r0, #0
10011fa0:	dd01      	ble.n	10011fa6 <__aeabi_dcmple+0xe>
10011fa2:	2000      	movs	r0, #0
10011fa4:	bd10      	pop	{r4, pc}
10011fa6:	2001      	movs	r0, #1
10011fa8:	bd10      	pop	{r4, pc}
10011faa:	46c0      	nop			; (mov r8, r8)

10011fac <__aeabi_dcmpgt>:
10011fac:	b510      	push	{r4, lr}
10011fae:	f000 f86f 	bl	10012090 <__gedf2>
10011fb2:	2800      	cmp	r0, #0
10011fb4:	dc01      	bgt.n	10011fba <__aeabi_dcmpgt+0xe>
10011fb6:	2000      	movs	r0, #0
10011fb8:	bd10      	pop	{r4, pc}
10011fba:	2001      	movs	r0, #1
10011fbc:	bd10      	pop	{r4, pc}
10011fbe:	46c0      	nop			; (mov r8, r8)

10011fc0 <__aeabi_dcmpge>:
10011fc0:	b510      	push	{r4, lr}
10011fc2:	f000 f865 	bl	10012090 <__gedf2>
10011fc6:	2800      	cmp	r0, #0
10011fc8:	da01      	bge.n	10011fce <__aeabi_dcmpge+0xe>
10011fca:	2000      	movs	r0, #0
10011fcc:	bd10      	pop	{r4, pc}
10011fce:	2001      	movs	r0, #1
10011fd0:	bd10      	pop	{r4, pc}
10011fd2:	46c0      	nop			; (mov r8, r8)

10011fd4 <__clzsi2>:
10011fd4:	211c      	movs	r1, #28
10011fd6:	2301      	movs	r3, #1
10011fd8:	041b      	lsls	r3, r3, #16
10011fda:	4298      	cmp	r0, r3
10011fdc:	d301      	bcc.n	10011fe2 <__clzsi2+0xe>
10011fde:	0c00      	lsrs	r0, r0, #16
10011fe0:	3910      	subs	r1, #16
10011fe2:	0a1b      	lsrs	r3, r3, #8
10011fe4:	4298      	cmp	r0, r3
10011fe6:	d301      	bcc.n	10011fec <__clzsi2+0x18>
10011fe8:	0a00      	lsrs	r0, r0, #8
10011fea:	3908      	subs	r1, #8
10011fec:	091b      	lsrs	r3, r3, #4
10011fee:	4298      	cmp	r0, r3
10011ff0:	d301      	bcc.n	10011ff6 <__clzsi2+0x22>
10011ff2:	0900      	lsrs	r0, r0, #4
10011ff4:	3904      	subs	r1, #4
10011ff6:	a202      	add	r2, pc, #8	; (adr r2, 10012000 <__clzsi2+0x2c>)
10011ff8:	5c10      	ldrb	r0, [r2, r0]
10011ffa:	1840      	adds	r0, r0, r1
10011ffc:	4770      	bx	lr
10011ffe:	46c0      	nop			; (mov r8, r8)
10012000:	02020304 	.word	0x02020304
10012004:	01010101 	.word	0x01010101
	...

10012010 <__eqdf2>:
10012010:	b5f0      	push	{r4, r5, r6, r7, lr}
10012012:	465f      	mov	r7, fp
10012014:	4656      	mov	r6, sl
10012016:	464d      	mov	r5, r9
10012018:	4644      	mov	r4, r8
1001201a:	b4f0      	push	{r4, r5, r6, r7}
1001201c:	031f      	lsls	r7, r3, #12
1001201e:	005c      	lsls	r4, r3, #1
10012020:	0fdb      	lsrs	r3, r3, #31
10012022:	469a      	mov	sl, r3
10012024:	4b19      	ldr	r3, [pc, #100]	; (1001208c <__eqdf2+0x7c>)
10012026:	030e      	lsls	r6, r1, #12
10012028:	004d      	lsls	r5, r1, #1
1001202a:	0fc9      	lsrs	r1, r1, #31
1001202c:	4680      	mov	r8, r0
1001202e:	0b36      	lsrs	r6, r6, #12
10012030:	0d6d      	lsrs	r5, r5, #21
10012032:	468b      	mov	fp, r1
10012034:	4691      	mov	r9, r2
10012036:	0b3f      	lsrs	r7, r7, #12
10012038:	0d64      	lsrs	r4, r4, #21
1001203a:	429d      	cmp	r5, r3
1001203c:	d019      	beq.n	10012072 <__eqdf2+0x62>
1001203e:	4b13      	ldr	r3, [pc, #76]	; (1001208c <__eqdf2+0x7c>)
10012040:	429c      	cmp	r4, r3
10012042:	d01b      	beq.n	1001207c <__eqdf2+0x6c>
10012044:	2301      	movs	r3, #1
10012046:	42a5      	cmp	r5, r4
10012048:	d006      	beq.n	10012058 <__eqdf2+0x48>
1001204a:	0018      	movs	r0, r3
1001204c:	bc3c      	pop	{r2, r3, r4, r5}
1001204e:	4690      	mov	r8, r2
10012050:	4699      	mov	r9, r3
10012052:	46a2      	mov	sl, r4
10012054:	46ab      	mov	fp, r5
10012056:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012058:	42be      	cmp	r6, r7
1001205a:	d1f6      	bne.n	1001204a <__eqdf2+0x3a>
1001205c:	45c8      	cmp	r8, r9
1001205e:	d1f4      	bne.n	1001204a <__eqdf2+0x3a>
10012060:	45d3      	cmp	fp, sl
10012062:	d010      	beq.n	10012086 <__eqdf2+0x76>
10012064:	2d00      	cmp	r5, #0
10012066:	d1f0      	bne.n	1001204a <__eqdf2+0x3a>
10012068:	4330      	orrs	r0, r6
1001206a:	0003      	movs	r3, r0
1001206c:	1e5a      	subs	r2, r3, #1
1001206e:	4193      	sbcs	r3, r2
10012070:	e7eb      	b.n	1001204a <__eqdf2+0x3a>
10012072:	0031      	movs	r1, r6
10012074:	2301      	movs	r3, #1
10012076:	4301      	orrs	r1, r0
10012078:	d1e7      	bne.n	1001204a <__eqdf2+0x3a>
1001207a:	e7e0      	b.n	1001203e <__eqdf2+0x2e>
1001207c:	433a      	orrs	r2, r7
1001207e:	2301      	movs	r3, #1
10012080:	2a00      	cmp	r2, #0
10012082:	d1e2      	bne.n	1001204a <__eqdf2+0x3a>
10012084:	e7de      	b.n	10012044 <__eqdf2+0x34>
10012086:	2300      	movs	r3, #0
10012088:	e7df      	b.n	1001204a <__eqdf2+0x3a>
1001208a:	46c0      	nop			; (mov r8, r8)
1001208c:	000007ff 	.word	0x000007ff

10012090 <__gedf2>:
10012090:	b5f0      	push	{r4, r5, r6, r7, lr}
10012092:	465f      	mov	r7, fp
10012094:	4644      	mov	r4, r8
10012096:	4656      	mov	r6, sl
10012098:	464d      	mov	r5, r9
1001209a:	b4f0      	push	{r4, r5, r6, r7}
1001209c:	031f      	lsls	r7, r3, #12
1001209e:	0b3c      	lsrs	r4, r7, #12
100120a0:	4f2c      	ldr	r7, [pc, #176]	; (10012154 <__gedf2+0xc4>)
100120a2:	030e      	lsls	r6, r1, #12
100120a4:	004d      	lsls	r5, r1, #1
100120a6:	46a3      	mov	fp, r4
100120a8:	005c      	lsls	r4, r3, #1
100120aa:	4684      	mov	ip, r0
100120ac:	0b36      	lsrs	r6, r6, #12
100120ae:	0d6d      	lsrs	r5, r5, #21
100120b0:	0fc9      	lsrs	r1, r1, #31
100120b2:	4690      	mov	r8, r2
100120b4:	0d64      	lsrs	r4, r4, #21
100120b6:	0fdb      	lsrs	r3, r3, #31
100120b8:	42bd      	cmp	r5, r7
100120ba:	d02b      	beq.n	10012114 <__gedf2+0x84>
100120bc:	4f25      	ldr	r7, [pc, #148]	; (10012154 <__gedf2+0xc4>)
100120be:	42bc      	cmp	r4, r7
100120c0:	d02e      	beq.n	10012120 <__gedf2+0x90>
100120c2:	2d00      	cmp	r5, #0
100120c4:	d10e      	bne.n	100120e4 <__gedf2+0x54>
100120c6:	4330      	orrs	r0, r6
100120c8:	0007      	movs	r7, r0
100120ca:	4681      	mov	r9, r0
100120cc:	4278      	negs	r0, r7
100120ce:	4178      	adcs	r0, r7
100120d0:	2c00      	cmp	r4, #0
100120d2:	d117      	bne.n	10012104 <__gedf2+0x74>
100120d4:	465f      	mov	r7, fp
100120d6:	433a      	orrs	r2, r7
100120d8:	d114      	bne.n	10012104 <__gedf2+0x74>
100120da:	464b      	mov	r3, r9
100120dc:	2000      	movs	r0, #0
100120de:	2b00      	cmp	r3, #0
100120e0:	d00a      	beq.n	100120f8 <__gedf2+0x68>
100120e2:	e006      	b.n	100120f2 <__gedf2+0x62>
100120e4:	2c00      	cmp	r4, #0
100120e6:	d102      	bne.n	100120ee <__gedf2+0x5e>
100120e8:	4658      	mov	r0, fp
100120ea:	4302      	orrs	r2, r0
100120ec:	d001      	beq.n	100120f2 <__gedf2+0x62>
100120ee:	4299      	cmp	r1, r3
100120f0:	d01a      	beq.n	10012128 <__gedf2+0x98>
100120f2:	2301      	movs	r3, #1
100120f4:	4248      	negs	r0, r1
100120f6:	4318      	orrs	r0, r3
100120f8:	bc3c      	pop	{r2, r3, r4, r5}
100120fa:	4690      	mov	r8, r2
100120fc:	4699      	mov	r9, r3
100120fe:	46a2      	mov	sl, r4
10012100:	46ab      	mov	fp, r5
10012102:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012104:	2800      	cmp	r0, #0
10012106:	d0f2      	beq.n	100120ee <__gedf2+0x5e>
10012108:	4258      	negs	r0, r3
1001210a:	4158      	adcs	r0, r3
1001210c:	2201      	movs	r2, #1
1001210e:	4240      	negs	r0, r0
10012110:	4310      	orrs	r0, r2
10012112:	e7f1      	b.n	100120f8 <__gedf2+0x68>
10012114:	0037      	movs	r7, r6
10012116:	4307      	orrs	r7, r0
10012118:	d0d0      	beq.n	100120bc <__gedf2+0x2c>
1001211a:	2002      	movs	r0, #2
1001211c:	4240      	negs	r0, r0
1001211e:	e7eb      	b.n	100120f8 <__gedf2+0x68>
10012120:	465f      	mov	r7, fp
10012122:	4317      	orrs	r7, r2
10012124:	d0cd      	beq.n	100120c2 <__gedf2+0x32>
10012126:	e7f8      	b.n	1001211a <__gedf2+0x8a>
10012128:	42a5      	cmp	r5, r4
1001212a:	dce2      	bgt.n	100120f2 <__gedf2+0x62>
1001212c:	db05      	blt.n	1001213a <__gedf2+0xaa>
1001212e:	455e      	cmp	r6, fp
10012130:	d8df      	bhi.n	100120f2 <__gedf2+0x62>
10012132:	d008      	beq.n	10012146 <__gedf2+0xb6>
10012134:	2000      	movs	r0, #0
10012136:	455e      	cmp	r6, fp
10012138:	d2de      	bcs.n	100120f8 <__gedf2+0x68>
1001213a:	4248      	negs	r0, r1
1001213c:	4148      	adcs	r0, r1
1001213e:	2301      	movs	r3, #1
10012140:	4240      	negs	r0, r0
10012142:	4318      	orrs	r0, r3
10012144:	e7d8      	b.n	100120f8 <__gedf2+0x68>
10012146:	45c4      	cmp	ip, r8
10012148:	d8d3      	bhi.n	100120f2 <__gedf2+0x62>
1001214a:	2000      	movs	r0, #0
1001214c:	45c4      	cmp	ip, r8
1001214e:	d3f4      	bcc.n	1001213a <__gedf2+0xaa>
10012150:	e7d2      	b.n	100120f8 <__gedf2+0x68>
10012152:	46c0      	nop			; (mov r8, r8)
10012154:	000007ff 	.word	0x000007ff

10012158 <__ledf2>:
10012158:	b5f0      	push	{r4, r5, r6, r7, lr}
1001215a:	465f      	mov	r7, fp
1001215c:	464d      	mov	r5, r9
1001215e:	4644      	mov	r4, r8
10012160:	4656      	mov	r6, sl
10012162:	b4f0      	push	{r4, r5, r6, r7}
10012164:	031c      	lsls	r4, r3, #12
10012166:	0b24      	lsrs	r4, r4, #12
10012168:	46a4      	mov	ip, r4
1001216a:	4c2f      	ldr	r4, [pc, #188]	; (10012228 <__ledf2+0xd0>)
1001216c:	030f      	lsls	r7, r1, #12
1001216e:	004d      	lsls	r5, r1, #1
10012170:	005e      	lsls	r6, r3, #1
10012172:	0fc9      	lsrs	r1, r1, #31
10012174:	4680      	mov	r8, r0
10012176:	0b3f      	lsrs	r7, r7, #12
10012178:	0d6d      	lsrs	r5, r5, #21
1001217a:	468b      	mov	fp, r1
1001217c:	4691      	mov	r9, r2
1001217e:	0d76      	lsrs	r6, r6, #21
10012180:	0fdb      	lsrs	r3, r3, #31
10012182:	42a5      	cmp	r5, r4
10012184:	d020      	beq.n	100121c8 <__ledf2+0x70>
10012186:	4c28      	ldr	r4, [pc, #160]	; (10012228 <__ledf2+0xd0>)
10012188:	42a6      	cmp	r6, r4
1001218a:	d022      	beq.n	100121d2 <__ledf2+0x7a>
1001218c:	2d00      	cmp	r5, #0
1001218e:	d112      	bne.n	100121b6 <__ledf2+0x5e>
10012190:	4338      	orrs	r0, r7
10012192:	4244      	negs	r4, r0
10012194:	4144      	adcs	r4, r0
10012196:	2e00      	cmp	r6, #0
10012198:	d020      	beq.n	100121dc <__ledf2+0x84>
1001219a:	2c00      	cmp	r4, #0
1001219c:	d00d      	beq.n	100121ba <__ledf2+0x62>
1001219e:	425c      	negs	r4, r3
100121a0:	4163      	adcs	r3, r4
100121a2:	2401      	movs	r4, #1
100121a4:	425b      	negs	r3, r3
100121a6:	431c      	orrs	r4, r3
100121a8:	0020      	movs	r0, r4
100121aa:	bc3c      	pop	{r2, r3, r4, r5}
100121ac:	4690      	mov	r8, r2
100121ae:	4699      	mov	r9, r3
100121b0:	46a2      	mov	sl, r4
100121b2:	46ab      	mov	fp, r5
100121b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100121b6:	2e00      	cmp	r6, #0
100121b8:	d017      	beq.n	100121ea <__ledf2+0x92>
100121ba:	455b      	cmp	r3, fp
100121bc:	d019      	beq.n	100121f2 <__ledf2+0x9a>
100121be:	465b      	mov	r3, fp
100121c0:	425c      	negs	r4, r3
100121c2:	2301      	movs	r3, #1
100121c4:	431c      	orrs	r4, r3
100121c6:	e7ef      	b.n	100121a8 <__ledf2+0x50>
100121c8:	0039      	movs	r1, r7
100121ca:	2402      	movs	r4, #2
100121cc:	4301      	orrs	r1, r0
100121ce:	d1eb      	bne.n	100121a8 <__ledf2+0x50>
100121d0:	e7d9      	b.n	10012186 <__ledf2+0x2e>
100121d2:	4661      	mov	r1, ip
100121d4:	2402      	movs	r4, #2
100121d6:	4311      	orrs	r1, r2
100121d8:	d1e6      	bne.n	100121a8 <__ledf2+0x50>
100121da:	e7d7      	b.n	1001218c <__ledf2+0x34>
100121dc:	4661      	mov	r1, ip
100121de:	430a      	orrs	r2, r1
100121e0:	d1db      	bne.n	1001219a <__ledf2+0x42>
100121e2:	2400      	movs	r4, #0
100121e4:	2800      	cmp	r0, #0
100121e6:	d0df      	beq.n	100121a8 <__ledf2+0x50>
100121e8:	e7e9      	b.n	100121be <__ledf2+0x66>
100121ea:	4661      	mov	r1, ip
100121ec:	430a      	orrs	r2, r1
100121ee:	d1e4      	bne.n	100121ba <__ledf2+0x62>
100121f0:	e7e5      	b.n	100121be <__ledf2+0x66>
100121f2:	42b5      	cmp	r5, r6
100121f4:	dd03      	ble.n	100121fe <__ledf2+0xa6>
100121f6:	2201      	movs	r2, #1
100121f8:	425c      	negs	r4, r3
100121fa:	4314      	orrs	r4, r2
100121fc:	e7d4      	b.n	100121a8 <__ledf2+0x50>
100121fe:	42b5      	cmp	r5, r6
10012200:	dbcd      	blt.n	1001219e <__ledf2+0x46>
10012202:	4567      	cmp	r7, ip
10012204:	d8db      	bhi.n	100121be <__ledf2+0x66>
10012206:	d009      	beq.n	1001221c <__ledf2+0xc4>
10012208:	2400      	movs	r4, #0
1001220a:	4567      	cmp	r7, ip
1001220c:	d2cc      	bcs.n	100121a8 <__ledf2+0x50>
1001220e:	4659      	mov	r1, fp
10012210:	424c      	negs	r4, r1
10012212:	4161      	adcs	r1, r4
10012214:	2401      	movs	r4, #1
10012216:	4249      	negs	r1, r1
10012218:	430c      	orrs	r4, r1
1001221a:	e7c5      	b.n	100121a8 <__ledf2+0x50>
1001221c:	45c8      	cmp	r8, r9
1001221e:	d8ce      	bhi.n	100121be <__ledf2+0x66>
10012220:	2400      	movs	r4, #0
10012222:	45c8      	cmp	r8, r9
10012224:	d3f3      	bcc.n	1001220e <__ledf2+0xb6>
10012226:	e7bf      	b.n	100121a8 <__ledf2+0x50>
10012228:	000007ff 	.word	0x000007ff

1001222c <__libc_init_array>:
1001222c:	4b0e      	ldr	r3, [pc, #56]	; (10012268 <__libc_init_array+0x3c>)
1001222e:	b570      	push	{r4, r5, r6, lr}
10012230:	2500      	movs	r5, #0
10012232:	001e      	movs	r6, r3
10012234:	4c0d      	ldr	r4, [pc, #52]	; (1001226c <__libc_init_array+0x40>)
10012236:	1ae4      	subs	r4, r4, r3
10012238:	10a4      	asrs	r4, r4, #2
1001223a:	42a5      	cmp	r5, r4
1001223c:	d004      	beq.n	10012248 <__libc_init_array+0x1c>
1001223e:	00ab      	lsls	r3, r5, #2
10012240:	58f3      	ldr	r3, [r6, r3]
10012242:	4798      	blx	r3
10012244:	3501      	adds	r5, #1
10012246:	e7f8      	b.n	1001223a <__libc_init_array+0xe>
10012248:	f002 fe92 	bl	10014f70 <_init>
1001224c:	4b08      	ldr	r3, [pc, #32]	; (10012270 <__libc_init_array+0x44>)
1001224e:	2500      	movs	r5, #0
10012250:	001e      	movs	r6, r3
10012252:	4c08      	ldr	r4, [pc, #32]	; (10012274 <__libc_init_array+0x48>)
10012254:	1ae4      	subs	r4, r4, r3
10012256:	10a4      	asrs	r4, r4, #2
10012258:	42a5      	cmp	r5, r4
1001225a:	d004      	beq.n	10012266 <__libc_init_array+0x3a>
1001225c:	00ab      	lsls	r3, r5, #2
1001225e:	58f3      	ldr	r3, [r6, r3]
10012260:	4798      	blx	r3
10012262:	3501      	adds	r5, #1
10012264:	e7f8      	b.n	10012258 <__libc_init_array+0x2c>
10012266:	bd70      	pop	{r4, r5, r6, pc}
10012268:	10014f7c 	.word	0x10014f7c
1001226c:	10014f7c 	.word	0x10014f7c
10012270:	10014f7c 	.word	0x10014f7c
10012274:	10014f80 	.word	0x10014f80

10012278 <memcmp>:
10012278:	b530      	push	{r4, r5, lr}
1001227a:	2400      	movs	r4, #0
1001227c:	42a2      	cmp	r2, r4
1001227e:	d008      	beq.n	10012292 <memcmp+0x1a>
10012280:	5d03      	ldrb	r3, [r0, r4]
10012282:	1c65      	adds	r5, r4, #1
10012284:	5d0c      	ldrb	r4, [r1, r4]
10012286:	42a3      	cmp	r3, r4
10012288:	d001      	beq.n	1001228e <memcmp+0x16>
1001228a:	1b18      	subs	r0, r3, r4
1001228c:	e002      	b.n	10012294 <memcmp+0x1c>
1001228e:	002c      	movs	r4, r5
10012290:	e7f4      	b.n	1001227c <memcmp+0x4>
10012292:	2000      	movs	r0, #0
10012294:	bd30      	pop	{r4, r5, pc}

10012296 <memcpy>:
10012296:	2300      	movs	r3, #0
10012298:	b510      	push	{r4, lr}
1001229a:	429a      	cmp	r2, r3
1001229c:	d003      	beq.n	100122a6 <memcpy+0x10>
1001229e:	5ccc      	ldrb	r4, [r1, r3]
100122a0:	54c4      	strb	r4, [r0, r3]
100122a2:	3301      	adds	r3, #1
100122a4:	e7f9      	b.n	1001229a <memcpy+0x4>
100122a6:	bd10      	pop	{r4, pc}

100122a8 <memset>:
100122a8:	0003      	movs	r3, r0
100122aa:	1882      	adds	r2, r0, r2
100122ac:	4293      	cmp	r3, r2
100122ae:	d002      	beq.n	100122b6 <memset+0xe>
100122b0:	7019      	strb	r1, [r3, #0]
100122b2:	3301      	adds	r3, #1
100122b4:	e7fa      	b.n	100122ac <memset+0x4>
100122b6:	4770      	bx	lr

100122b8 <iprintf>:
100122b8:	b40f      	push	{r0, r1, r2, r3}
100122ba:	4b0b      	ldr	r3, [pc, #44]	; (100122e8 <iprintf+0x30>)
100122bc:	b513      	push	{r0, r1, r4, lr}
100122be:	681c      	ldr	r4, [r3, #0]
100122c0:	2c00      	cmp	r4, #0
100122c2:	d005      	beq.n	100122d0 <iprintf+0x18>
100122c4:	69a3      	ldr	r3, [r4, #24]
100122c6:	2b00      	cmp	r3, #0
100122c8:	d102      	bne.n	100122d0 <iprintf+0x18>
100122ca:	0020      	movs	r0, r4
100122cc:	f000 fb46 	bl	1001295c <__sinit>
100122d0:	ab05      	add	r3, sp, #20
100122d2:	9a04      	ldr	r2, [sp, #16]
100122d4:	68a1      	ldr	r1, [r4, #8]
100122d6:	0020      	movs	r0, r4
100122d8:	9301      	str	r3, [sp, #4]
100122da:	f000 fd05 	bl	10012ce8 <_vfiprintf_r>
100122de:	bc16      	pop	{r1, r2, r4}
100122e0:	bc08      	pop	{r3}
100122e2:	b004      	add	sp, #16
100122e4:	4718      	bx	r3
100122e6:	46c0      	nop			; (mov r8, r8)
100122e8:	10014ff8 	.word	0x10014ff8

100122ec <putchar>:
100122ec:	4b08      	ldr	r3, [pc, #32]	; (10012310 <putchar+0x24>)
100122ee:	b570      	push	{r4, r5, r6, lr}
100122f0:	681c      	ldr	r4, [r3, #0]
100122f2:	0005      	movs	r5, r0
100122f4:	2c00      	cmp	r4, #0
100122f6:	d005      	beq.n	10012304 <putchar+0x18>
100122f8:	69a3      	ldr	r3, [r4, #24]
100122fa:	2b00      	cmp	r3, #0
100122fc:	d102      	bne.n	10012304 <putchar+0x18>
100122fe:	0020      	movs	r0, r4
10012300:	f000 fb2c 	bl	1001295c <__sinit>
10012304:	0029      	movs	r1, r5
10012306:	68a2      	ldr	r2, [r4, #8]
10012308:	0020      	movs	r0, r4
1001230a:	f000 ff99 	bl	10013240 <_putc_r>
1001230e:	bd70      	pop	{r4, r5, r6, pc}
10012310:	10014ff8 	.word	0x10014ff8

10012314 <_puts_r>:
10012314:	b570      	push	{r4, r5, r6, lr}
10012316:	0005      	movs	r5, r0
10012318:	000e      	movs	r6, r1
1001231a:	2800      	cmp	r0, #0
1001231c:	d004      	beq.n	10012328 <_puts_r+0x14>
1001231e:	6983      	ldr	r3, [r0, #24]
10012320:	2b00      	cmp	r3, #0
10012322:	d101      	bne.n	10012328 <_puts_r+0x14>
10012324:	f000 fb1a 	bl	1001295c <__sinit>
10012328:	69ab      	ldr	r3, [r5, #24]
1001232a:	68ac      	ldr	r4, [r5, #8]
1001232c:	2b00      	cmp	r3, #0
1001232e:	d102      	bne.n	10012336 <_puts_r+0x22>
10012330:	0028      	movs	r0, r5
10012332:	f000 fb13 	bl	1001295c <__sinit>
10012336:	4b25      	ldr	r3, [pc, #148]	; (100123cc <_puts_r+0xb8>)
10012338:	429c      	cmp	r4, r3
1001233a:	d101      	bne.n	10012340 <_puts_r+0x2c>
1001233c:	686c      	ldr	r4, [r5, #4]
1001233e:	e008      	b.n	10012352 <_puts_r+0x3e>
10012340:	4b23      	ldr	r3, [pc, #140]	; (100123d0 <_puts_r+0xbc>)
10012342:	429c      	cmp	r4, r3
10012344:	d101      	bne.n	1001234a <_puts_r+0x36>
10012346:	68ac      	ldr	r4, [r5, #8]
10012348:	e003      	b.n	10012352 <_puts_r+0x3e>
1001234a:	4b22      	ldr	r3, [pc, #136]	; (100123d4 <_puts_r+0xc0>)
1001234c:	429c      	cmp	r4, r3
1001234e:	d100      	bne.n	10012352 <_puts_r+0x3e>
10012350:	68ec      	ldr	r4, [r5, #12]
10012352:	89a3      	ldrh	r3, [r4, #12]
10012354:	071b      	lsls	r3, r3, #28
10012356:	d502      	bpl.n	1001235e <_puts_r+0x4a>
10012358:	6923      	ldr	r3, [r4, #16]
1001235a:	2b00      	cmp	r3, #0
1001235c:	d111      	bne.n	10012382 <_puts_r+0x6e>
1001235e:	0021      	movs	r1, r4
10012360:	0028      	movs	r0, r5
10012362:	f000 f991 	bl	10012688 <__swsetup_r>
10012366:	2800      	cmp	r0, #0
10012368:	d00b      	beq.n	10012382 <_puts_r+0x6e>
1001236a:	2001      	movs	r0, #1
1001236c:	4240      	negs	r0, r0
1001236e:	e02b      	b.n	100123c8 <_puts_r+0xb4>
10012370:	3b01      	subs	r3, #1
10012372:	3601      	adds	r6, #1
10012374:	60a3      	str	r3, [r4, #8]
10012376:	2b00      	cmp	r3, #0
10012378:	db08      	blt.n	1001238c <_puts_r+0x78>
1001237a:	6823      	ldr	r3, [r4, #0]
1001237c:	1c5a      	adds	r2, r3, #1
1001237e:	6022      	str	r2, [r4, #0]
10012380:	7019      	strb	r1, [r3, #0]
10012382:	7831      	ldrb	r1, [r6, #0]
10012384:	68a3      	ldr	r3, [r4, #8]
10012386:	2900      	cmp	r1, #0
10012388:	d1f2      	bne.n	10012370 <_puts_r+0x5c>
1001238a:	e00b      	b.n	100123a4 <_puts_r+0x90>
1001238c:	69a2      	ldr	r2, [r4, #24]
1001238e:	4293      	cmp	r3, r2
10012390:	db01      	blt.n	10012396 <_puts_r+0x82>
10012392:	290a      	cmp	r1, #10
10012394:	d1f1      	bne.n	1001237a <_puts_r+0x66>
10012396:	0022      	movs	r2, r4
10012398:	0028      	movs	r0, r5
1001239a:	f000 f91d 	bl	100125d8 <__swbuf_r>
1001239e:	1c43      	adds	r3, r0, #1
100123a0:	d1ef      	bne.n	10012382 <_puts_r+0x6e>
100123a2:	e7e2      	b.n	1001236a <_puts_r+0x56>
100123a4:	3b01      	subs	r3, #1
100123a6:	60a3      	str	r3, [r4, #8]
100123a8:	2b00      	cmp	r3, #0
100123aa:	da08      	bge.n	100123be <_puts_r+0xaa>
100123ac:	0022      	movs	r2, r4
100123ae:	310a      	adds	r1, #10
100123b0:	0028      	movs	r0, r5
100123b2:	f000 f911 	bl	100125d8 <__swbuf_r>
100123b6:	1c43      	adds	r3, r0, #1
100123b8:	d0d7      	beq.n	1001236a <_puts_r+0x56>
100123ba:	200a      	movs	r0, #10
100123bc:	e004      	b.n	100123c8 <_puts_r+0xb4>
100123be:	200a      	movs	r0, #10
100123c0:	6823      	ldr	r3, [r4, #0]
100123c2:	1c5a      	adds	r2, r3, #1
100123c4:	6022      	str	r2, [r4, #0]
100123c6:	7018      	strb	r0, [r3, #0]
100123c8:	bd70      	pop	{r4, r5, r6, pc}
100123ca:	46c0      	nop			; (mov r8, r8)
100123cc:	10014edc 	.word	0x10014edc
100123d0:	10014efc 	.word	0x10014efc
100123d4:	10014f1c 	.word	0x10014f1c

100123d8 <puts>:
100123d8:	b510      	push	{r4, lr}
100123da:	4b03      	ldr	r3, [pc, #12]	; (100123e8 <puts+0x10>)
100123dc:	0001      	movs	r1, r0
100123de:	6818      	ldr	r0, [r3, #0]
100123e0:	f7ff ff98 	bl	10012314 <_puts_r>
100123e4:	bd10      	pop	{r4, pc}
100123e6:	46c0      	nop			; (mov r8, r8)
100123e8:	10014ff8 	.word	0x10014ff8

100123ec <rand>:
100123ec:	4b15      	ldr	r3, [pc, #84]	; (10012444 <rand+0x58>)
100123ee:	b510      	push	{r4, lr}
100123f0:	681c      	ldr	r4, [r3, #0]
100123f2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100123f4:	2b00      	cmp	r3, #0
100123f6:	d115      	bne.n	10012424 <rand+0x38>
100123f8:	2018      	movs	r0, #24
100123fa:	f000 fba7 	bl	10012b4c <malloc>
100123fe:	4b12      	ldr	r3, [pc, #72]	; (10012448 <rand+0x5c>)
10012400:	63a0      	str	r0, [r4, #56]	; 0x38
10012402:	8003      	strh	r3, [r0, #0]
10012404:	4b11      	ldr	r3, [pc, #68]	; (1001244c <rand+0x60>)
10012406:	2201      	movs	r2, #1
10012408:	8043      	strh	r3, [r0, #2]
1001240a:	4b11      	ldr	r3, [pc, #68]	; (10012450 <rand+0x64>)
1001240c:	8083      	strh	r3, [r0, #4]
1001240e:	4b11      	ldr	r3, [pc, #68]	; (10012454 <rand+0x68>)
10012410:	80c3      	strh	r3, [r0, #6]
10012412:	4b11      	ldr	r3, [pc, #68]	; (10012458 <rand+0x6c>)
10012414:	8103      	strh	r3, [r0, #8]
10012416:	2305      	movs	r3, #5
10012418:	8143      	strh	r3, [r0, #10]
1001241a:	3306      	adds	r3, #6
1001241c:	8183      	strh	r3, [r0, #12]
1001241e:	2300      	movs	r3, #0
10012420:	6102      	str	r2, [r0, #16]
10012422:	6143      	str	r3, [r0, #20]
10012424:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10012426:	4a0d      	ldr	r2, [pc, #52]	; (1001245c <rand+0x70>)
10012428:	6920      	ldr	r0, [r4, #16]
1001242a:	6961      	ldr	r1, [r4, #20]
1001242c:	4b0c      	ldr	r3, [pc, #48]	; (10012460 <rand+0x74>)
1001242e:	f7fe ff0d 	bl	1001124c <__aeabi_lmul>
10012432:	2201      	movs	r2, #1
10012434:	2300      	movs	r3, #0
10012436:	1880      	adds	r0, r0, r2
10012438:	4159      	adcs	r1, r3
1001243a:	6120      	str	r0, [r4, #16]
1001243c:	6161      	str	r1, [r4, #20]
1001243e:	0048      	lsls	r0, r1, #1
10012440:	0840      	lsrs	r0, r0, #1
10012442:	bd10      	pop	{r4, pc}
10012444:	10014ff8 	.word	0x10014ff8
10012448:	0000330e 	.word	0x0000330e
1001244c:	ffffabcd 	.word	0xffffabcd
10012450:	00001234 	.word	0x00001234
10012454:	ffffe66d 	.word	0xffffe66d
10012458:	ffffdeec 	.word	0xffffdeec
1001245c:	4c957f2d 	.word	0x4c957f2d
10012460:	5851f42d 	.word	0x5851f42d

10012464 <setbuf>:
10012464:	424a      	negs	r2, r1
10012466:	414a      	adcs	r2, r1
10012468:	2380      	movs	r3, #128	; 0x80
1001246a:	b510      	push	{r4, lr}
1001246c:	0052      	lsls	r2, r2, #1
1001246e:	00db      	lsls	r3, r3, #3
10012470:	f000 f802 	bl	10012478 <setvbuf>
10012474:	bd10      	pop	{r4, pc}
	...

10012478 <setvbuf>:
10012478:	b5f0      	push	{r4, r5, r6, r7, lr}
1001247a:	001d      	movs	r5, r3
1001247c:	4b51      	ldr	r3, [pc, #324]	; (100125c4 <setvbuf+0x14c>)
1001247e:	b085      	sub	sp, #20
10012480:	681e      	ldr	r6, [r3, #0]
10012482:	0004      	movs	r4, r0
10012484:	000f      	movs	r7, r1
10012486:	9200      	str	r2, [sp, #0]
10012488:	2e00      	cmp	r6, #0
1001248a:	d005      	beq.n	10012498 <setvbuf+0x20>
1001248c:	69b3      	ldr	r3, [r6, #24]
1001248e:	2b00      	cmp	r3, #0
10012490:	d102      	bne.n	10012498 <setvbuf+0x20>
10012492:	0030      	movs	r0, r6
10012494:	f000 fa62 	bl	1001295c <__sinit>
10012498:	4b4b      	ldr	r3, [pc, #300]	; (100125c8 <setvbuf+0x150>)
1001249a:	429c      	cmp	r4, r3
1001249c:	d101      	bne.n	100124a2 <setvbuf+0x2a>
1001249e:	6874      	ldr	r4, [r6, #4]
100124a0:	e008      	b.n	100124b4 <setvbuf+0x3c>
100124a2:	4b4a      	ldr	r3, [pc, #296]	; (100125cc <setvbuf+0x154>)
100124a4:	429c      	cmp	r4, r3
100124a6:	d101      	bne.n	100124ac <setvbuf+0x34>
100124a8:	68b4      	ldr	r4, [r6, #8]
100124aa:	e003      	b.n	100124b4 <setvbuf+0x3c>
100124ac:	4b48      	ldr	r3, [pc, #288]	; (100125d0 <setvbuf+0x158>)
100124ae:	429c      	cmp	r4, r3
100124b0:	d100      	bne.n	100124b4 <setvbuf+0x3c>
100124b2:	68f4      	ldr	r4, [r6, #12]
100124b4:	9b00      	ldr	r3, [sp, #0]
100124b6:	2b02      	cmp	r3, #2
100124b8:	d005      	beq.n	100124c6 <setvbuf+0x4e>
100124ba:	2b01      	cmp	r3, #1
100124bc:	d900      	bls.n	100124c0 <setvbuf+0x48>
100124be:	e07c      	b.n	100125ba <setvbuf+0x142>
100124c0:	2d00      	cmp	r5, #0
100124c2:	da00      	bge.n	100124c6 <setvbuf+0x4e>
100124c4:	e079      	b.n	100125ba <setvbuf+0x142>
100124c6:	0021      	movs	r1, r4
100124c8:	0030      	movs	r0, r6
100124ca:	f000 f9d9 	bl	10012880 <_fflush_r>
100124ce:	6b61      	ldr	r1, [r4, #52]	; 0x34
100124d0:	2900      	cmp	r1, #0
100124d2:	d008      	beq.n	100124e6 <setvbuf+0x6e>
100124d4:	0023      	movs	r3, r4
100124d6:	3344      	adds	r3, #68	; 0x44
100124d8:	4299      	cmp	r1, r3
100124da:	d002      	beq.n	100124e2 <setvbuf+0x6a>
100124dc:	0030      	movs	r0, r6
100124de:	f000 fb3f 	bl	10012b60 <_free_r>
100124e2:	2300      	movs	r3, #0
100124e4:	6363      	str	r3, [r4, #52]	; 0x34
100124e6:	2300      	movs	r3, #0
100124e8:	61a3      	str	r3, [r4, #24]
100124ea:	6063      	str	r3, [r4, #4]
100124ec:	89a3      	ldrh	r3, [r4, #12]
100124ee:	061b      	lsls	r3, r3, #24
100124f0:	d503      	bpl.n	100124fa <setvbuf+0x82>
100124f2:	6921      	ldr	r1, [r4, #16]
100124f4:	0030      	movs	r0, r6
100124f6:	f000 fb33 	bl	10012b60 <_free_r>
100124fa:	89a2      	ldrh	r2, [r4, #12]
100124fc:	4b35      	ldr	r3, [pc, #212]	; (100125d4 <setvbuf+0x15c>)
100124fe:	4013      	ands	r3, r2
10012500:	81a3      	strh	r3, [r4, #12]
10012502:	9b00      	ldr	r3, [sp, #0]
10012504:	2b02      	cmp	r3, #2
10012506:	d021      	beq.n	1001254c <setvbuf+0xd4>
10012508:	ab03      	add	r3, sp, #12
1001250a:	aa02      	add	r2, sp, #8
1001250c:	0021      	movs	r1, r4
1001250e:	0030      	movs	r0, r6
10012510:	f000 fab8 	bl	10012a84 <__swhatbuf_r>
10012514:	89a3      	ldrh	r3, [r4, #12]
10012516:	4318      	orrs	r0, r3
10012518:	81a0      	strh	r0, [r4, #12]
1001251a:	2d00      	cmp	r5, #0
1001251c:	d101      	bne.n	10012522 <setvbuf+0xaa>
1001251e:	9d02      	ldr	r5, [sp, #8]
10012520:	e001      	b.n	10012526 <setvbuf+0xae>
10012522:	2f00      	cmp	r7, #0
10012524:	d125      	bne.n	10012572 <setvbuf+0xfa>
10012526:	0028      	movs	r0, r5
10012528:	f000 fb10 	bl	10012b4c <malloc>
1001252c:	9501      	str	r5, [sp, #4]
1001252e:	1e07      	subs	r7, r0, #0
10012530:	d11a      	bne.n	10012568 <setvbuf+0xf0>
10012532:	9b02      	ldr	r3, [sp, #8]
10012534:	9301      	str	r3, [sp, #4]
10012536:	42ab      	cmp	r3, r5
10012538:	d102      	bne.n	10012540 <setvbuf+0xc8>
1001253a:	2001      	movs	r0, #1
1001253c:	4240      	negs	r0, r0
1001253e:	e006      	b.n	1001254e <setvbuf+0xd6>
10012540:	9801      	ldr	r0, [sp, #4]
10012542:	f000 fb03 	bl	10012b4c <malloc>
10012546:	1e07      	subs	r7, r0, #0
10012548:	d10e      	bne.n	10012568 <setvbuf+0xf0>
1001254a:	e7f6      	b.n	1001253a <setvbuf+0xc2>
1001254c:	2000      	movs	r0, #0
1001254e:	2202      	movs	r2, #2
10012550:	89a3      	ldrh	r3, [r4, #12]
10012552:	4313      	orrs	r3, r2
10012554:	81a3      	strh	r3, [r4, #12]
10012556:	2300      	movs	r3, #0
10012558:	60a3      	str	r3, [r4, #8]
1001255a:	0023      	movs	r3, r4
1001255c:	3347      	adds	r3, #71	; 0x47
1001255e:	6023      	str	r3, [r4, #0]
10012560:	6123      	str	r3, [r4, #16]
10012562:	2301      	movs	r3, #1
10012564:	6163      	str	r3, [r4, #20]
10012566:	e02a      	b.n	100125be <setvbuf+0x146>
10012568:	2280      	movs	r2, #128	; 0x80
1001256a:	89a3      	ldrh	r3, [r4, #12]
1001256c:	9d01      	ldr	r5, [sp, #4]
1001256e:	4313      	orrs	r3, r2
10012570:	81a3      	strh	r3, [r4, #12]
10012572:	69b3      	ldr	r3, [r6, #24]
10012574:	2b00      	cmp	r3, #0
10012576:	d102      	bne.n	1001257e <setvbuf+0x106>
10012578:	0030      	movs	r0, r6
1001257a:	f000 f9ef 	bl	1001295c <__sinit>
1001257e:	9b00      	ldr	r3, [sp, #0]
10012580:	2b01      	cmp	r3, #1
10012582:	d103      	bne.n	1001258c <setvbuf+0x114>
10012584:	89a3      	ldrh	r3, [r4, #12]
10012586:	9a00      	ldr	r2, [sp, #0]
10012588:	431a      	orrs	r2, r3
1001258a:	81a2      	strh	r2, [r4, #12]
1001258c:	2308      	movs	r3, #8
1001258e:	89a2      	ldrh	r2, [r4, #12]
10012590:	6027      	str	r7, [r4, #0]
10012592:	4013      	ands	r3, r2
10012594:	6127      	str	r7, [r4, #16]
10012596:	6165      	str	r5, [r4, #20]
10012598:	1e18      	subs	r0, r3, #0
1001259a:	d00c      	beq.n	100125b6 <setvbuf+0x13e>
1001259c:	2301      	movs	r3, #1
1001259e:	401a      	ands	r2, r3
100125a0:	2300      	movs	r3, #0
100125a2:	1e10      	subs	r0, r2, #0
100125a4:	4298      	cmp	r0, r3
100125a6:	d004      	beq.n	100125b2 <setvbuf+0x13a>
100125a8:	426d      	negs	r5, r5
100125aa:	60a3      	str	r3, [r4, #8]
100125ac:	61a5      	str	r5, [r4, #24]
100125ae:	0018      	movs	r0, r3
100125b0:	e005      	b.n	100125be <setvbuf+0x146>
100125b2:	60a5      	str	r5, [r4, #8]
100125b4:	e003      	b.n	100125be <setvbuf+0x146>
100125b6:	60a3      	str	r3, [r4, #8]
100125b8:	e001      	b.n	100125be <setvbuf+0x146>
100125ba:	2001      	movs	r0, #1
100125bc:	4240      	negs	r0, r0
100125be:	b005      	add	sp, #20
100125c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100125c2:	46c0      	nop			; (mov r8, r8)
100125c4:	10014ff8 	.word	0x10014ff8
100125c8:	10014edc 	.word	0x10014edc
100125cc:	10014efc 	.word	0x10014efc
100125d0:	10014f1c 	.word	0x10014f1c
100125d4:	fffff35c 	.word	0xfffff35c

100125d8 <__swbuf_r>:
100125d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100125da:	0005      	movs	r5, r0
100125dc:	000f      	movs	r7, r1
100125de:	0014      	movs	r4, r2
100125e0:	2800      	cmp	r0, #0
100125e2:	d004      	beq.n	100125ee <__swbuf_r+0x16>
100125e4:	6983      	ldr	r3, [r0, #24]
100125e6:	2b00      	cmp	r3, #0
100125e8:	d101      	bne.n	100125ee <__swbuf_r+0x16>
100125ea:	f000 f9b7 	bl	1001295c <__sinit>
100125ee:	4b23      	ldr	r3, [pc, #140]	; (1001267c <__swbuf_r+0xa4>)
100125f0:	429c      	cmp	r4, r3
100125f2:	d101      	bne.n	100125f8 <__swbuf_r+0x20>
100125f4:	686c      	ldr	r4, [r5, #4]
100125f6:	e008      	b.n	1001260a <__swbuf_r+0x32>
100125f8:	4b21      	ldr	r3, [pc, #132]	; (10012680 <__swbuf_r+0xa8>)
100125fa:	429c      	cmp	r4, r3
100125fc:	d101      	bne.n	10012602 <__swbuf_r+0x2a>
100125fe:	68ac      	ldr	r4, [r5, #8]
10012600:	e003      	b.n	1001260a <__swbuf_r+0x32>
10012602:	4b20      	ldr	r3, [pc, #128]	; (10012684 <__swbuf_r+0xac>)
10012604:	429c      	cmp	r4, r3
10012606:	d100      	bne.n	1001260a <__swbuf_r+0x32>
10012608:	68ec      	ldr	r4, [r5, #12]
1001260a:	69a3      	ldr	r3, [r4, #24]
1001260c:	60a3      	str	r3, [r4, #8]
1001260e:	89a3      	ldrh	r3, [r4, #12]
10012610:	071b      	lsls	r3, r3, #28
10012612:	d50a      	bpl.n	1001262a <__swbuf_r+0x52>
10012614:	6923      	ldr	r3, [r4, #16]
10012616:	2b00      	cmp	r3, #0
10012618:	d007      	beq.n	1001262a <__swbuf_r+0x52>
1001261a:	6823      	ldr	r3, [r4, #0]
1001261c:	6922      	ldr	r2, [r4, #16]
1001261e:	b2fe      	uxtb	r6, r7
10012620:	1a98      	subs	r0, r3, r2
10012622:	6963      	ldr	r3, [r4, #20]
10012624:	4298      	cmp	r0, r3
10012626:	db0f      	blt.n	10012648 <__swbuf_r+0x70>
10012628:	e008      	b.n	1001263c <__swbuf_r+0x64>
1001262a:	0021      	movs	r1, r4
1001262c:	0028      	movs	r0, r5
1001262e:	f000 f82b 	bl	10012688 <__swsetup_r>
10012632:	2800      	cmp	r0, #0
10012634:	d0f1      	beq.n	1001261a <__swbuf_r+0x42>
10012636:	2001      	movs	r0, #1
10012638:	4240      	negs	r0, r0
1001263a:	e01d      	b.n	10012678 <__swbuf_r+0xa0>
1001263c:	0021      	movs	r1, r4
1001263e:	0028      	movs	r0, r5
10012640:	f000 f91e 	bl	10012880 <_fflush_r>
10012644:	2800      	cmp	r0, #0
10012646:	d1f6      	bne.n	10012636 <__swbuf_r+0x5e>
10012648:	68a3      	ldr	r3, [r4, #8]
1001264a:	3001      	adds	r0, #1
1001264c:	3b01      	subs	r3, #1
1001264e:	60a3      	str	r3, [r4, #8]
10012650:	6823      	ldr	r3, [r4, #0]
10012652:	1c5a      	adds	r2, r3, #1
10012654:	6022      	str	r2, [r4, #0]
10012656:	701f      	strb	r7, [r3, #0]
10012658:	6963      	ldr	r3, [r4, #20]
1001265a:	4298      	cmp	r0, r3
1001265c:	d005      	beq.n	1001266a <__swbuf_r+0x92>
1001265e:	89a3      	ldrh	r3, [r4, #12]
10012660:	0030      	movs	r0, r6
10012662:	07db      	lsls	r3, r3, #31
10012664:	d508      	bpl.n	10012678 <__swbuf_r+0xa0>
10012666:	2e0a      	cmp	r6, #10
10012668:	d106      	bne.n	10012678 <__swbuf_r+0xa0>
1001266a:	0021      	movs	r1, r4
1001266c:	0028      	movs	r0, r5
1001266e:	f000 f907 	bl	10012880 <_fflush_r>
10012672:	2800      	cmp	r0, #0
10012674:	d1df      	bne.n	10012636 <__swbuf_r+0x5e>
10012676:	0030      	movs	r0, r6
10012678:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001267a:	46c0      	nop			; (mov r8, r8)
1001267c:	10014edc 	.word	0x10014edc
10012680:	10014efc 	.word	0x10014efc
10012684:	10014f1c 	.word	0x10014f1c

10012688 <__swsetup_r>:
10012688:	4b36      	ldr	r3, [pc, #216]	; (10012764 <__swsetup_r+0xdc>)
1001268a:	b570      	push	{r4, r5, r6, lr}
1001268c:	681d      	ldr	r5, [r3, #0]
1001268e:	0006      	movs	r6, r0
10012690:	000c      	movs	r4, r1
10012692:	2d00      	cmp	r5, #0
10012694:	d005      	beq.n	100126a2 <__swsetup_r+0x1a>
10012696:	69ab      	ldr	r3, [r5, #24]
10012698:	2b00      	cmp	r3, #0
1001269a:	d102      	bne.n	100126a2 <__swsetup_r+0x1a>
1001269c:	0028      	movs	r0, r5
1001269e:	f000 f95d 	bl	1001295c <__sinit>
100126a2:	4b31      	ldr	r3, [pc, #196]	; (10012768 <__swsetup_r+0xe0>)
100126a4:	429c      	cmp	r4, r3
100126a6:	d101      	bne.n	100126ac <__swsetup_r+0x24>
100126a8:	686c      	ldr	r4, [r5, #4]
100126aa:	e008      	b.n	100126be <__swsetup_r+0x36>
100126ac:	4b2f      	ldr	r3, [pc, #188]	; (1001276c <__swsetup_r+0xe4>)
100126ae:	429c      	cmp	r4, r3
100126b0:	d101      	bne.n	100126b6 <__swsetup_r+0x2e>
100126b2:	68ac      	ldr	r4, [r5, #8]
100126b4:	e003      	b.n	100126be <__swsetup_r+0x36>
100126b6:	4b2e      	ldr	r3, [pc, #184]	; (10012770 <__swsetup_r+0xe8>)
100126b8:	429c      	cmp	r4, r3
100126ba:	d100      	bne.n	100126be <__swsetup_r+0x36>
100126bc:	68ec      	ldr	r4, [r5, #12]
100126be:	220c      	movs	r2, #12
100126c0:	5ea3      	ldrsh	r3, [r4, r2]
100126c2:	b29a      	uxth	r2, r3
100126c4:	0711      	lsls	r1, r2, #28
100126c6:	d423      	bmi.n	10012710 <__swsetup_r+0x88>
100126c8:	06d1      	lsls	r1, r2, #27
100126ca:	d407      	bmi.n	100126dc <__swsetup_r+0x54>
100126cc:	2209      	movs	r2, #9
100126ce:	2001      	movs	r0, #1
100126d0:	6032      	str	r2, [r6, #0]
100126d2:	3237      	adds	r2, #55	; 0x37
100126d4:	4313      	orrs	r3, r2
100126d6:	81a3      	strh	r3, [r4, #12]
100126d8:	4240      	negs	r0, r0
100126da:	e042      	b.n	10012762 <__swsetup_r+0xda>
100126dc:	0753      	lsls	r3, r2, #29
100126de:	d513      	bpl.n	10012708 <__swsetup_r+0x80>
100126e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
100126e2:	2900      	cmp	r1, #0
100126e4:	d008      	beq.n	100126f8 <__swsetup_r+0x70>
100126e6:	0023      	movs	r3, r4
100126e8:	3344      	adds	r3, #68	; 0x44
100126ea:	4299      	cmp	r1, r3
100126ec:	d002      	beq.n	100126f4 <__swsetup_r+0x6c>
100126ee:	0030      	movs	r0, r6
100126f0:	f000 fa36 	bl	10012b60 <_free_r>
100126f4:	2300      	movs	r3, #0
100126f6:	6363      	str	r3, [r4, #52]	; 0x34
100126f8:	2224      	movs	r2, #36	; 0x24
100126fa:	89a3      	ldrh	r3, [r4, #12]
100126fc:	4393      	bics	r3, r2
100126fe:	81a3      	strh	r3, [r4, #12]
10012700:	2300      	movs	r3, #0
10012702:	6063      	str	r3, [r4, #4]
10012704:	6923      	ldr	r3, [r4, #16]
10012706:	6023      	str	r3, [r4, #0]
10012708:	2208      	movs	r2, #8
1001270a:	89a3      	ldrh	r3, [r4, #12]
1001270c:	4313      	orrs	r3, r2
1001270e:	81a3      	strh	r3, [r4, #12]
10012710:	6923      	ldr	r3, [r4, #16]
10012712:	2b00      	cmp	r3, #0
10012714:	d10b      	bne.n	1001272e <__swsetup_r+0xa6>
10012716:	23a0      	movs	r3, #160	; 0xa0
10012718:	89a2      	ldrh	r2, [r4, #12]
1001271a:	009b      	lsls	r3, r3, #2
1001271c:	4013      	ands	r3, r2
1001271e:	2280      	movs	r2, #128	; 0x80
10012720:	0092      	lsls	r2, r2, #2
10012722:	4293      	cmp	r3, r2
10012724:	d003      	beq.n	1001272e <__swsetup_r+0xa6>
10012726:	0021      	movs	r1, r4
10012728:	0030      	movs	r0, r6
1001272a:	f000 f9d1 	bl	10012ad0 <__smakebuf_r>
1001272e:	2301      	movs	r3, #1
10012730:	89a2      	ldrh	r2, [r4, #12]
10012732:	4013      	ands	r3, r2
10012734:	d005      	beq.n	10012742 <__swsetup_r+0xba>
10012736:	2300      	movs	r3, #0
10012738:	60a3      	str	r3, [r4, #8]
1001273a:	6963      	ldr	r3, [r4, #20]
1001273c:	425b      	negs	r3, r3
1001273e:	61a3      	str	r3, [r4, #24]
10012740:	e003      	b.n	1001274a <__swsetup_r+0xc2>
10012742:	0792      	lsls	r2, r2, #30
10012744:	d400      	bmi.n	10012748 <__swsetup_r+0xc0>
10012746:	6963      	ldr	r3, [r4, #20]
10012748:	60a3      	str	r3, [r4, #8]
1001274a:	2000      	movs	r0, #0
1001274c:	6923      	ldr	r3, [r4, #16]
1001274e:	4283      	cmp	r3, r0
10012750:	d107      	bne.n	10012762 <__swsetup_r+0xda>
10012752:	220c      	movs	r2, #12
10012754:	5ea3      	ldrsh	r3, [r4, r2]
10012756:	061a      	lsls	r2, r3, #24
10012758:	d503      	bpl.n	10012762 <__swsetup_r+0xda>
1001275a:	2240      	movs	r2, #64	; 0x40
1001275c:	4313      	orrs	r3, r2
1001275e:	81a3      	strh	r3, [r4, #12]
10012760:	3801      	subs	r0, #1
10012762:	bd70      	pop	{r4, r5, r6, pc}
10012764:	10014ff8 	.word	0x10014ff8
10012768:	10014edc 	.word	0x10014edc
1001276c:	10014efc 	.word	0x10014efc
10012770:	10014f1c 	.word	0x10014f1c

10012774 <__sflush_r>:
10012774:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012776:	898a      	ldrh	r2, [r1, #12]
10012778:	0005      	movs	r5, r0
1001277a:	000c      	movs	r4, r1
1001277c:	0713      	lsls	r3, r2, #28
1001277e:	d45a      	bmi.n	10012836 <__sflush_r+0xc2>
10012780:	684b      	ldr	r3, [r1, #4]
10012782:	2b00      	cmp	r3, #0
10012784:	dc02      	bgt.n	1001278c <__sflush_r+0x18>
10012786:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10012788:	2b00      	cmp	r3, #0
1001278a:	dd19      	ble.n	100127c0 <__sflush_r+0x4c>
1001278c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
1001278e:	2f00      	cmp	r7, #0
10012790:	d016      	beq.n	100127c0 <__sflush_r+0x4c>
10012792:	2300      	movs	r3, #0
10012794:	682e      	ldr	r6, [r5, #0]
10012796:	602b      	str	r3, [r5, #0]
10012798:	2380      	movs	r3, #128	; 0x80
1001279a:	015b      	lsls	r3, r3, #5
1001279c:	401a      	ands	r2, r3
1001279e:	d001      	beq.n	100127a4 <__sflush_r+0x30>
100127a0:	6d60      	ldr	r0, [r4, #84]	; 0x54
100127a2:	e014      	b.n	100127ce <__sflush_r+0x5a>
100127a4:	2301      	movs	r3, #1
100127a6:	6a21      	ldr	r1, [r4, #32]
100127a8:	0028      	movs	r0, r5
100127aa:	47b8      	blx	r7
100127ac:	1c43      	adds	r3, r0, #1
100127ae:	d10e      	bne.n	100127ce <__sflush_r+0x5a>
100127b0:	682b      	ldr	r3, [r5, #0]
100127b2:	2b00      	cmp	r3, #0
100127b4:	d00b      	beq.n	100127ce <__sflush_r+0x5a>
100127b6:	2b1d      	cmp	r3, #29
100127b8:	d001      	beq.n	100127be <__sflush_r+0x4a>
100127ba:	2b16      	cmp	r3, #22
100127bc:	d102      	bne.n	100127c4 <__sflush_r+0x50>
100127be:	602e      	str	r6, [r5, #0]
100127c0:	2000      	movs	r0, #0
100127c2:	e05a      	b.n	1001287a <__sflush_r+0x106>
100127c4:	2240      	movs	r2, #64	; 0x40
100127c6:	89a3      	ldrh	r3, [r4, #12]
100127c8:	4313      	orrs	r3, r2
100127ca:	81a3      	strh	r3, [r4, #12]
100127cc:	e055      	b.n	1001287a <__sflush_r+0x106>
100127ce:	89a3      	ldrh	r3, [r4, #12]
100127d0:	075b      	lsls	r3, r3, #29
100127d2:	d506      	bpl.n	100127e2 <__sflush_r+0x6e>
100127d4:	6863      	ldr	r3, [r4, #4]
100127d6:	1ac0      	subs	r0, r0, r3
100127d8:	6b63      	ldr	r3, [r4, #52]	; 0x34
100127da:	2b00      	cmp	r3, #0
100127dc:	d001      	beq.n	100127e2 <__sflush_r+0x6e>
100127de:	6c23      	ldr	r3, [r4, #64]	; 0x40
100127e0:	1ac0      	subs	r0, r0, r3
100127e2:	2300      	movs	r3, #0
100127e4:	0002      	movs	r2, r0
100127e6:	6a21      	ldr	r1, [r4, #32]
100127e8:	0028      	movs	r0, r5
100127ea:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
100127ec:	47b8      	blx	r7
100127ee:	89a3      	ldrh	r3, [r4, #12]
100127f0:	1c42      	adds	r2, r0, #1
100127f2:	d106      	bne.n	10012802 <__sflush_r+0x8e>
100127f4:	6829      	ldr	r1, [r5, #0]
100127f6:	291d      	cmp	r1, #29
100127f8:	d83a      	bhi.n	10012870 <__sflush_r+0xfc>
100127fa:	4a20      	ldr	r2, [pc, #128]	; (1001287c <__sflush_r+0x108>)
100127fc:	40ca      	lsrs	r2, r1
100127fe:	07d2      	lsls	r2, r2, #31
10012800:	d536      	bpl.n	10012870 <__sflush_r+0xfc>
10012802:	2200      	movs	r2, #0
10012804:	6062      	str	r2, [r4, #4]
10012806:	6922      	ldr	r2, [r4, #16]
10012808:	6022      	str	r2, [r4, #0]
1001280a:	04db      	lsls	r3, r3, #19
1001280c:	d505      	bpl.n	1001281a <__sflush_r+0xa6>
1001280e:	1c43      	adds	r3, r0, #1
10012810:	d102      	bne.n	10012818 <__sflush_r+0xa4>
10012812:	682b      	ldr	r3, [r5, #0]
10012814:	2b00      	cmp	r3, #0
10012816:	d100      	bne.n	1001281a <__sflush_r+0xa6>
10012818:	6560      	str	r0, [r4, #84]	; 0x54
1001281a:	6b61      	ldr	r1, [r4, #52]	; 0x34
1001281c:	602e      	str	r6, [r5, #0]
1001281e:	2900      	cmp	r1, #0
10012820:	d0ce      	beq.n	100127c0 <__sflush_r+0x4c>
10012822:	0023      	movs	r3, r4
10012824:	3344      	adds	r3, #68	; 0x44
10012826:	4299      	cmp	r1, r3
10012828:	d002      	beq.n	10012830 <__sflush_r+0xbc>
1001282a:	0028      	movs	r0, r5
1001282c:	f000 f998 	bl	10012b60 <_free_r>
10012830:	2000      	movs	r0, #0
10012832:	6360      	str	r0, [r4, #52]	; 0x34
10012834:	e021      	b.n	1001287a <__sflush_r+0x106>
10012836:	690f      	ldr	r7, [r1, #16]
10012838:	2f00      	cmp	r7, #0
1001283a:	d0c1      	beq.n	100127c0 <__sflush_r+0x4c>
1001283c:	680b      	ldr	r3, [r1, #0]
1001283e:	600f      	str	r7, [r1, #0]
10012840:	1bdb      	subs	r3, r3, r7
10012842:	9301      	str	r3, [sp, #4]
10012844:	2300      	movs	r3, #0
10012846:	0792      	lsls	r2, r2, #30
10012848:	d100      	bne.n	1001284c <__sflush_r+0xd8>
1001284a:	694b      	ldr	r3, [r1, #20]
1001284c:	60a3      	str	r3, [r4, #8]
1001284e:	e003      	b.n	10012858 <__sflush_r+0xe4>
10012850:	9b01      	ldr	r3, [sp, #4]
10012852:	183f      	adds	r7, r7, r0
10012854:	1a1b      	subs	r3, r3, r0
10012856:	9301      	str	r3, [sp, #4]
10012858:	9b01      	ldr	r3, [sp, #4]
1001285a:	2b00      	cmp	r3, #0
1001285c:	ddb0      	ble.n	100127c0 <__sflush_r+0x4c>
1001285e:	9b01      	ldr	r3, [sp, #4]
10012860:	003a      	movs	r2, r7
10012862:	6a21      	ldr	r1, [r4, #32]
10012864:	0028      	movs	r0, r5
10012866:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10012868:	47b0      	blx	r6
1001286a:	2800      	cmp	r0, #0
1001286c:	dcf0      	bgt.n	10012850 <__sflush_r+0xdc>
1001286e:	89a3      	ldrh	r3, [r4, #12]
10012870:	2240      	movs	r2, #64	; 0x40
10012872:	2001      	movs	r0, #1
10012874:	4313      	orrs	r3, r2
10012876:	81a3      	strh	r3, [r4, #12]
10012878:	4240      	negs	r0, r0
1001287a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1001287c:	20400001 	.word	0x20400001

10012880 <_fflush_r>:
10012880:	690b      	ldr	r3, [r1, #16]
10012882:	b570      	push	{r4, r5, r6, lr}
10012884:	0005      	movs	r5, r0
10012886:	000c      	movs	r4, r1
10012888:	2b00      	cmp	r3, #0
1001288a:	d101      	bne.n	10012890 <_fflush_r+0x10>
1001288c:	2000      	movs	r0, #0
1001288e:	e01c      	b.n	100128ca <_fflush_r+0x4a>
10012890:	2800      	cmp	r0, #0
10012892:	d004      	beq.n	1001289e <_fflush_r+0x1e>
10012894:	6983      	ldr	r3, [r0, #24]
10012896:	2b00      	cmp	r3, #0
10012898:	d101      	bne.n	1001289e <_fflush_r+0x1e>
1001289a:	f000 f85f 	bl	1001295c <__sinit>
1001289e:	4b0b      	ldr	r3, [pc, #44]	; (100128cc <_fflush_r+0x4c>)
100128a0:	429c      	cmp	r4, r3
100128a2:	d101      	bne.n	100128a8 <_fflush_r+0x28>
100128a4:	686c      	ldr	r4, [r5, #4]
100128a6:	e008      	b.n	100128ba <_fflush_r+0x3a>
100128a8:	4b09      	ldr	r3, [pc, #36]	; (100128d0 <_fflush_r+0x50>)
100128aa:	429c      	cmp	r4, r3
100128ac:	d101      	bne.n	100128b2 <_fflush_r+0x32>
100128ae:	68ac      	ldr	r4, [r5, #8]
100128b0:	e003      	b.n	100128ba <_fflush_r+0x3a>
100128b2:	4b08      	ldr	r3, [pc, #32]	; (100128d4 <_fflush_r+0x54>)
100128b4:	429c      	cmp	r4, r3
100128b6:	d100      	bne.n	100128ba <_fflush_r+0x3a>
100128b8:	68ec      	ldr	r4, [r5, #12]
100128ba:	220c      	movs	r2, #12
100128bc:	5ea3      	ldrsh	r3, [r4, r2]
100128be:	2b00      	cmp	r3, #0
100128c0:	d0e4      	beq.n	1001288c <_fflush_r+0xc>
100128c2:	0021      	movs	r1, r4
100128c4:	0028      	movs	r0, r5
100128c6:	f7ff ff55 	bl	10012774 <__sflush_r>
100128ca:	bd70      	pop	{r4, r5, r6, pc}
100128cc:	10014edc 	.word	0x10014edc
100128d0:	10014efc 	.word	0x10014efc
100128d4:	10014f1c 	.word	0x10014f1c

100128d8 <_cleanup_r>:
100128d8:	b510      	push	{r4, lr}
100128da:	4902      	ldr	r1, [pc, #8]	; (100128e4 <_cleanup_r+0xc>)
100128dc:	f000 f8b0 	bl	10012a40 <_fwalk_reent>
100128e0:	bd10      	pop	{r4, pc}
100128e2:	46c0      	nop			; (mov r8, r8)
100128e4:	10012881 	.word	0x10012881

100128e8 <std.isra.0>:
100128e8:	2300      	movs	r3, #0
100128ea:	b510      	push	{r4, lr}
100128ec:	0004      	movs	r4, r0
100128ee:	6003      	str	r3, [r0, #0]
100128f0:	6043      	str	r3, [r0, #4]
100128f2:	6083      	str	r3, [r0, #8]
100128f4:	8181      	strh	r1, [r0, #12]
100128f6:	6643      	str	r3, [r0, #100]	; 0x64
100128f8:	81c2      	strh	r2, [r0, #14]
100128fa:	6103      	str	r3, [r0, #16]
100128fc:	6143      	str	r3, [r0, #20]
100128fe:	6183      	str	r3, [r0, #24]
10012900:	0019      	movs	r1, r3
10012902:	2208      	movs	r2, #8
10012904:	305c      	adds	r0, #92	; 0x5c
10012906:	f7ff fccf 	bl	100122a8 <memset>
1001290a:	4b05      	ldr	r3, [pc, #20]	; (10012920 <std.isra.0+0x38>)
1001290c:	6224      	str	r4, [r4, #32]
1001290e:	6263      	str	r3, [r4, #36]	; 0x24
10012910:	4b04      	ldr	r3, [pc, #16]	; (10012924 <std.isra.0+0x3c>)
10012912:	62a3      	str	r3, [r4, #40]	; 0x28
10012914:	4b04      	ldr	r3, [pc, #16]	; (10012928 <std.isra.0+0x40>)
10012916:	62e3      	str	r3, [r4, #44]	; 0x2c
10012918:	4b04      	ldr	r3, [pc, #16]	; (1001292c <std.isra.0+0x44>)
1001291a:	6323      	str	r3, [r4, #48]	; 0x30
1001291c:	bd10      	pop	{r4, pc}
1001291e:	46c0      	nop			; (mov r8, r8)
10012920:	100132d1 	.word	0x100132d1
10012924:	100132f9 	.word	0x100132f9
10012928:	10013331 	.word	0x10013331
1001292c:	1001335d 	.word	0x1001335d

10012930 <__sfmoreglue>:
10012930:	b570      	push	{r4, r5, r6, lr}
10012932:	2568      	movs	r5, #104	; 0x68
10012934:	1e4b      	subs	r3, r1, #1
10012936:	435d      	muls	r5, r3
10012938:	000e      	movs	r6, r1
1001293a:	0029      	movs	r1, r5
1001293c:	3174      	adds	r1, #116	; 0x74
1001293e:	f000 f955 	bl	10012bec <_malloc_r>
10012942:	1e04      	subs	r4, r0, #0
10012944:	d008      	beq.n	10012958 <__sfmoreglue+0x28>
10012946:	2100      	movs	r1, #0
10012948:	002a      	movs	r2, r5
1001294a:	6001      	str	r1, [r0, #0]
1001294c:	6046      	str	r6, [r0, #4]
1001294e:	300c      	adds	r0, #12
10012950:	60a0      	str	r0, [r4, #8]
10012952:	3268      	adds	r2, #104	; 0x68
10012954:	f7ff fca8 	bl	100122a8 <memset>
10012958:	0020      	movs	r0, r4
1001295a:	bd70      	pop	{r4, r5, r6, pc}

1001295c <__sinit>:
1001295c:	6983      	ldr	r3, [r0, #24]
1001295e:	b513      	push	{r0, r1, r4, lr}
10012960:	0004      	movs	r4, r0
10012962:	2b00      	cmp	r3, #0
10012964:	d128      	bne.n	100129b8 <__sinit+0x5c>
10012966:	6483      	str	r3, [r0, #72]	; 0x48
10012968:	64c3      	str	r3, [r0, #76]	; 0x4c
1001296a:	6503      	str	r3, [r0, #80]	; 0x50
1001296c:	4b13      	ldr	r3, [pc, #76]	; (100129bc <__sinit+0x60>)
1001296e:	4a14      	ldr	r2, [pc, #80]	; (100129c0 <__sinit+0x64>)
10012970:	681b      	ldr	r3, [r3, #0]
10012972:	6282      	str	r2, [r0, #40]	; 0x28
10012974:	9301      	str	r3, [sp, #4]
10012976:	4298      	cmp	r0, r3
10012978:	d101      	bne.n	1001297e <__sinit+0x22>
1001297a:	2301      	movs	r3, #1
1001297c:	6183      	str	r3, [r0, #24]
1001297e:	0020      	movs	r0, r4
10012980:	f000 f820 	bl	100129c4 <__sfp>
10012984:	6060      	str	r0, [r4, #4]
10012986:	0020      	movs	r0, r4
10012988:	f000 f81c 	bl	100129c4 <__sfp>
1001298c:	60a0      	str	r0, [r4, #8]
1001298e:	0020      	movs	r0, r4
10012990:	f000 f818 	bl	100129c4 <__sfp>
10012994:	2200      	movs	r2, #0
10012996:	60e0      	str	r0, [r4, #12]
10012998:	2104      	movs	r1, #4
1001299a:	6860      	ldr	r0, [r4, #4]
1001299c:	f7ff ffa4 	bl	100128e8 <std.isra.0>
100129a0:	2201      	movs	r2, #1
100129a2:	2109      	movs	r1, #9
100129a4:	68a0      	ldr	r0, [r4, #8]
100129a6:	f7ff ff9f 	bl	100128e8 <std.isra.0>
100129aa:	2202      	movs	r2, #2
100129ac:	2112      	movs	r1, #18
100129ae:	68e0      	ldr	r0, [r4, #12]
100129b0:	f7ff ff9a 	bl	100128e8 <std.isra.0>
100129b4:	2301      	movs	r3, #1
100129b6:	61a3      	str	r3, [r4, #24]
100129b8:	bd13      	pop	{r0, r1, r4, pc}
100129ba:	46c0      	nop			; (mov r8, r8)
100129bc:	10014ed8 	.word	0x10014ed8
100129c0:	100128d9 	.word	0x100128d9

100129c4 <__sfp>:
100129c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100129c6:	4b1d      	ldr	r3, [pc, #116]	; (10012a3c <__sfp+0x78>)
100129c8:	0006      	movs	r6, r0
100129ca:	681d      	ldr	r5, [r3, #0]
100129cc:	69ab      	ldr	r3, [r5, #24]
100129ce:	2b00      	cmp	r3, #0
100129d0:	d102      	bne.n	100129d8 <__sfp+0x14>
100129d2:	0028      	movs	r0, r5
100129d4:	f7ff ffc2 	bl	1001295c <__sinit>
100129d8:	3548      	adds	r5, #72	; 0x48
100129da:	68ac      	ldr	r4, [r5, #8]
100129dc:	686b      	ldr	r3, [r5, #4]
100129de:	3b01      	subs	r3, #1
100129e0:	d405      	bmi.n	100129ee <__sfp+0x2a>
100129e2:	220c      	movs	r2, #12
100129e4:	5ea7      	ldrsh	r7, [r4, r2]
100129e6:	2f00      	cmp	r7, #0
100129e8:	d010      	beq.n	10012a0c <__sfp+0x48>
100129ea:	3468      	adds	r4, #104	; 0x68
100129ec:	e7f7      	b.n	100129de <__sfp+0x1a>
100129ee:	682b      	ldr	r3, [r5, #0]
100129f0:	2b00      	cmp	r3, #0
100129f2:	d001      	beq.n	100129f8 <__sfp+0x34>
100129f4:	682d      	ldr	r5, [r5, #0]
100129f6:	e7f0      	b.n	100129da <__sfp+0x16>
100129f8:	2104      	movs	r1, #4
100129fa:	0030      	movs	r0, r6
100129fc:	f7ff ff98 	bl	10012930 <__sfmoreglue>
10012a00:	6028      	str	r0, [r5, #0]
10012a02:	2800      	cmp	r0, #0
10012a04:	d1f6      	bne.n	100129f4 <__sfp+0x30>
10012a06:	230c      	movs	r3, #12
10012a08:	6033      	str	r3, [r6, #0]
10012a0a:	e016      	b.n	10012a3a <__sfp+0x76>
10012a0c:	2301      	movs	r3, #1
10012a0e:	0020      	movs	r0, r4
10012a10:	425b      	negs	r3, r3
10012a12:	81e3      	strh	r3, [r4, #14]
10012a14:	3302      	adds	r3, #2
10012a16:	81a3      	strh	r3, [r4, #12]
10012a18:	6667      	str	r7, [r4, #100]	; 0x64
10012a1a:	6027      	str	r7, [r4, #0]
10012a1c:	60a7      	str	r7, [r4, #8]
10012a1e:	6067      	str	r7, [r4, #4]
10012a20:	6127      	str	r7, [r4, #16]
10012a22:	6167      	str	r7, [r4, #20]
10012a24:	61a7      	str	r7, [r4, #24]
10012a26:	305c      	adds	r0, #92	; 0x5c
10012a28:	2208      	movs	r2, #8
10012a2a:	0039      	movs	r1, r7
10012a2c:	f7ff fc3c 	bl	100122a8 <memset>
10012a30:	0020      	movs	r0, r4
10012a32:	6367      	str	r7, [r4, #52]	; 0x34
10012a34:	63a7      	str	r7, [r4, #56]	; 0x38
10012a36:	64a7      	str	r7, [r4, #72]	; 0x48
10012a38:	64e7      	str	r7, [r4, #76]	; 0x4c
10012a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10012a3c:	10014ed8 	.word	0x10014ed8

10012a40 <_fwalk_reent>:
10012a40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012a42:	0004      	movs	r4, r0
10012a44:	0007      	movs	r7, r0
10012a46:	2600      	movs	r6, #0
10012a48:	9101      	str	r1, [sp, #4]
10012a4a:	3448      	adds	r4, #72	; 0x48
10012a4c:	2c00      	cmp	r4, #0
10012a4e:	d016      	beq.n	10012a7e <_fwalk_reent+0x3e>
10012a50:	6863      	ldr	r3, [r4, #4]
10012a52:	68a5      	ldr	r5, [r4, #8]
10012a54:	9300      	str	r3, [sp, #0]
10012a56:	9b00      	ldr	r3, [sp, #0]
10012a58:	3b01      	subs	r3, #1
10012a5a:	9300      	str	r3, [sp, #0]
10012a5c:	d40d      	bmi.n	10012a7a <_fwalk_reent+0x3a>
10012a5e:	89ab      	ldrh	r3, [r5, #12]
10012a60:	2b01      	cmp	r3, #1
10012a62:	d908      	bls.n	10012a76 <_fwalk_reent+0x36>
10012a64:	220e      	movs	r2, #14
10012a66:	5eab      	ldrsh	r3, [r5, r2]
10012a68:	3301      	adds	r3, #1
10012a6a:	d004      	beq.n	10012a76 <_fwalk_reent+0x36>
10012a6c:	0029      	movs	r1, r5
10012a6e:	0038      	movs	r0, r7
10012a70:	9b01      	ldr	r3, [sp, #4]
10012a72:	4798      	blx	r3
10012a74:	4306      	orrs	r6, r0
10012a76:	3568      	adds	r5, #104	; 0x68
10012a78:	e7ed      	b.n	10012a56 <_fwalk_reent+0x16>
10012a7a:	6824      	ldr	r4, [r4, #0]
10012a7c:	e7e6      	b.n	10012a4c <_fwalk_reent+0xc>
10012a7e:	0030      	movs	r0, r6
10012a80:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10012a84 <__swhatbuf_r>:
10012a84:	b570      	push	{r4, r5, r6, lr}
10012a86:	000e      	movs	r6, r1
10012a88:	001d      	movs	r5, r3
10012a8a:	230e      	movs	r3, #14
10012a8c:	5ec9      	ldrsh	r1, [r1, r3]
10012a8e:	b090      	sub	sp, #64	; 0x40
10012a90:	0014      	movs	r4, r2
10012a92:	2900      	cmp	r1, #0
10012a94:	da06      	bge.n	10012aa4 <__swhatbuf_r+0x20>
10012a96:	2300      	movs	r3, #0
10012a98:	602b      	str	r3, [r5, #0]
10012a9a:	89b3      	ldrh	r3, [r6, #12]
10012a9c:	061b      	lsls	r3, r3, #24
10012a9e:	d50f      	bpl.n	10012ac0 <__swhatbuf_r+0x3c>
10012aa0:	2340      	movs	r3, #64	; 0x40
10012aa2:	e00f      	b.n	10012ac4 <__swhatbuf_r+0x40>
10012aa4:	aa01      	add	r2, sp, #4
10012aa6:	f000 fc85 	bl	100133b4 <_fstat_r>
10012aaa:	2800      	cmp	r0, #0
10012aac:	dbf3      	blt.n	10012a96 <__swhatbuf_r+0x12>
10012aae:	23f0      	movs	r3, #240	; 0xf0
10012ab0:	9a02      	ldr	r2, [sp, #8]
10012ab2:	021b      	lsls	r3, r3, #8
10012ab4:	4013      	ands	r3, r2
10012ab6:	4a05      	ldr	r2, [pc, #20]	; (10012acc <__swhatbuf_r+0x48>)
10012ab8:	189b      	adds	r3, r3, r2
10012aba:	425a      	negs	r2, r3
10012abc:	4153      	adcs	r3, r2
10012abe:	602b      	str	r3, [r5, #0]
10012ac0:	2380      	movs	r3, #128	; 0x80
10012ac2:	00db      	lsls	r3, r3, #3
10012ac4:	2000      	movs	r0, #0
10012ac6:	6023      	str	r3, [r4, #0]
10012ac8:	b010      	add	sp, #64	; 0x40
10012aca:	bd70      	pop	{r4, r5, r6, pc}
10012acc:	ffffe000 	.word	0xffffe000

10012ad0 <__smakebuf_r>:
10012ad0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012ad2:	2602      	movs	r6, #2
10012ad4:	898b      	ldrh	r3, [r1, #12]
10012ad6:	0005      	movs	r5, r0
10012ad8:	000c      	movs	r4, r1
10012ada:	4233      	tst	r3, r6
10012adc:	d110      	bne.n	10012b00 <__smakebuf_r+0x30>
10012ade:	ab01      	add	r3, sp, #4
10012ae0:	466a      	mov	r2, sp
10012ae2:	f7ff ffcf 	bl	10012a84 <__swhatbuf_r>
10012ae6:	9900      	ldr	r1, [sp, #0]
10012ae8:	0007      	movs	r7, r0
10012aea:	0028      	movs	r0, r5
10012aec:	f000 f87e 	bl	10012bec <_malloc_r>
10012af0:	2800      	cmp	r0, #0
10012af2:	d10c      	bne.n	10012b0e <__smakebuf_r+0x3e>
10012af4:	220c      	movs	r2, #12
10012af6:	5ea3      	ldrsh	r3, [r4, r2]
10012af8:	059a      	lsls	r2, r3, #22
10012afa:	d423      	bmi.n	10012b44 <__smakebuf_r+0x74>
10012afc:	4333      	orrs	r3, r6
10012afe:	81a3      	strh	r3, [r4, #12]
10012b00:	0023      	movs	r3, r4
10012b02:	3347      	adds	r3, #71	; 0x47
10012b04:	6023      	str	r3, [r4, #0]
10012b06:	6123      	str	r3, [r4, #16]
10012b08:	2301      	movs	r3, #1
10012b0a:	6163      	str	r3, [r4, #20]
10012b0c:	e01a      	b.n	10012b44 <__smakebuf_r+0x74>
10012b0e:	2280      	movs	r2, #128	; 0x80
10012b10:	4b0d      	ldr	r3, [pc, #52]	; (10012b48 <__smakebuf_r+0x78>)
10012b12:	62ab      	str	r3, [r5, #40]	; 0x28
10012b14:	89a3      	ldrh	r3, [r4, #12]
10012b16:	6020      	str	r0, [r4, #0]
10012b18:	4313      	orrs	r3, r2
10012b1a:	81a3      	strh	r3, [r4, #12]
10012b1c:	9b00      	ldr	r3, [sp, #0]
10012b1e:	6120      	str	r0, [r4, #16]
10012b20:	6163      	str	r3, [r4, #20]
10012b22:	9b01      	ldr	r3, [sp, #4]
10012b24:	2b00      	cmp	r3, #0
10012b26:	d00a      	beq.n	10012b3e <__smakebuf_r+0x6e>
10012b28:	230e      	movs	r3, #14
10012b2a:	5ee1      	ldrsh	r1, [r4, r3]
10012b2c:	0028      	movs	r0, r5
10012b2e:	f000 fc53 	bl	100133d8 <_isatty_r>
10012b32:	2800      	cmp	r0, #0
10012b34:	d003      	beq.n	10012b3e <__smakebuf_r+0x6e>
10012b36:	2201      	movs	r2, #1
10012b38:	89a3      	ldrh	r3, [r4, #12]
10012b3a:	4313      	orrs	r3, r2
10012b3c:	81a3      	strh	r3, [r4, #12]
10012b3e:	89a3      	ldrh	r3, [r4, #12]
10012b40:	431f      	orrs	r7, r3
10012b42:	81a7      	strh	r7, [r4, #12]
10012b44:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10012b46:	46c0      	nop			; (mov r8, r8)
10012b48:	100128d9 	.word	0x100128d9

10012b4c <malloc>:
10012b4c:	b510      	push	{r4, lr}
10012b4e:	4b03      	ldr	r3, [pc, #12]	; (10012b5c <malloc+0x10>)
10012b50:	0001      	movs	r1, r0
10012b52:	6818      	ldr	r0, [r3, #0]
10012b54:	f000 f84a 	bl	10012bec <_malloc_r>
10012b58:	bd10      	pop	{r4, pc}
10012b5a:	46c0      	nop			; (mov r8, r8)
10012b5c:	10014ff8 	.word	0x10014ff8

10012b60 <_free_r>:
10012b60:	b530      	push	{r4, r5, lr}
10012b62:	2900      	cmp	r1, #0
10012b64:	d03e      	beq.n	10012be4 <_free_r+0x84>
10012b66:	3904      	subs	r1, #4
10012b68:	680b      	ldr	r3, [r1, #0]
10012b6a:	2b00      	cmp	r3, #0
10012b6c:	da00      	bge.n	10012b70 <_free_r+0x10>
10012b6e:	18c9      	adds	r1, r1, r3
10012b70:	4a1d      	ldr	r2, [pc, #116]	; (10012be8 <_free_r+0x88>)
10012b72:	6813      	ldr	r3, [r2, #0]
10012b74:	0014      	movs	r4, r2
10012b76:	2b00      	cmp	r3, #0
10012b78:	d102      	bne.n	10012b80 <_free_r+0x20>
10012b7a:	604b      	str	r3, [r1, #4]
10012b7c:	6011      	str	r1, [r2, #0]
10012b7e:	e031      	b.n	10012be4 <_free_r+0x84>
10012b80:	428b      	cmp	r3, r1
10012b82:	d90d      	bls.n	10012ba0 <_free_r+0x40>
10012b84:	680a      	ldr	r2, [r1, #0]
10012b86:	1888      	adds	r0, r1, r2
10012b88:	4283      	cmp	r3, r0
10012b8a:	d103      	bne.n	10012b94 <_free_r+0x34>
10012b8c:	6818      	ldr	r0, [r3, #0]
10012b8e:	685b      	ldr	r3, [r3, #4]
10012b90:	1882      	adds	r2, r0, r2
10012b92:	600a      	str	r2, [r1, #0]
10012b94:	604b      	str	r3, [r1, #4]
10012b96:	6021      	str	r1, [r4, #0]
10012b98:	e024      	b.n	10012be4 <_free_r+0x84>
10012b9a:	428a      	cmp	r2, r1
10012b9c:	d803      	bhi.n	10012ba6 <_free_r+0x46>
10012b9e:	0013      	movs	r3, r2
10012ba0:	685a      	ldr	r2, [r3, #4]
10012ba2:	2a00      	cmp	r2, #0
10012ba4:	d1f9      	bne.n	10012b9a <_free_r+0x3a>
10012ba6:	681d      	ldr	r5, [r3, #0]
10012ba8:	195c      	adds	r4, r3, r5
10012baa:	428c      	cmp	r4, r1
10012bac:	d10b      	bne.n	10012bc6 <_free_r+0x66>
10012bae:	6809      	ldr	r1, [r1, #0]
10012bb0:	1869      	adds	r1, r5, r1
10012bb2:	1858      	adds	r0, r3, r1
10012bb4:	6019      	str	r1, [r3, #0]
10012bb6:	4282      	cmp	r2, r0
10012bb8:	d114      	bne.n	10012be4 <_free_r+0x84>
10012bba:	6810      	ldr	r0, [r2, #0]
10012bbc:	6852      	ldr	r2, [r2, #4]
10012bbe:	1841      	adds	r1, r0, r1
10012bc0:	6019      	str	r1, [r3, #0]
10012bc2:	605a      	str	r2, [r3, #4]
10012bc4:	e00e      	b.n	10012be4 <_free_r+0x84>
10012bc6:	428c      	cmp	r4, r1
10012bc8:	d902      	bls.n	10012bd0 <_free_r+0x70>
10012bca:	230c      	movs	r3, #12
10012bcc:	6003      	str	r3, [r0, #0]
10012bce:	e009      	b.n	10012be4 <_free_r+0x84>
10012bd0:	6808      	ldr	r0, [r1, #0]
10012bd2:	180c      	adds	r4, r1, r0
10012bd4:	42a2      	cmp	r2, r4
10012bd6:	d103      	bne.n	10012be0 <_free_r+0x80>
10012bd8:	6814      	ldr	r4, [r2, #0]
10012bda:	6852      	ldr	r2, [r2, #4]
10012bdc:	1820      	adds	r0, r4, r0
10012bde:	6008      	str	r0, [r1, #0]
10012be0:	604a      	str	r2, [r1, #4]
10012be2:	6059      	str	r1, [r3, #4]
10012be4:	bd30      	pop	{r4, r5, pc}
10012be6:	46c0      	nop			; (mov r8, r8)
10012be8:	10016abc 	.word	0x10016abc

10012bec <_malloc_r>:
10012bec:	2303      	movs	r3, #3
10012bee:	b570      	push	{r4, r5, r6, lr}
10012bf0:	1ccd      	adds	r5, r1, #3
10012bf2:	439d      	bics	r5, r3
10012bf4:	3508      	adds	r5, #8
10012bf6:	0006      	movs	r6, r0
10012bf8:	2d0c      	cmp	r5, #12
10012bfa:	d201      	bcs.n	10012c00 <_malloc_r+0x14>
10012bfc:	250c      	movs	r5, #12
10012bfe:	e005      	b.n	10012c0c <_malloc_r+0x20>
10012c00:	2d00      	cmp	r5, #0
10012c02:	da03      	bge.n	10012c0c <_malloc_r+0x20>
10012c04:	230c      	movs	r3, #12
10012c06:	2000      	movs	r0, #0
10012c08:	6033      	str	r3, [r6, #0]
10012c0a:	e040      	b.n	10012c8e <_malloc_r+0xa2>
10012c0c:	42a9      	cmp	r1, r5
10012c0e:	d8f9      	bhi.n	10012c04 <_malloc_r+0x18>
10012c10:	4b1f      	ldr	r3, [pc, #124]	; (10012c90 <_malloc_r+0xa4>)
10012c12:	681c      	ldr	r4, [r3, #0]
10012c14:	001a      	movs	r2, r3
10012c16:	0021      	movs	r1, r4
10012c18:	2900      	cmp	r1, #0
10012c1a:	d013      	beq.n	10012c44 <_malloc_r+0x58>
10012c1c:	680b      	ldr	r3, [r1, #0]
10012c1e:	1b5b      	subs	r3, r3, r5
10012c20:	d40d      	bmi.n	10012c3e <_malloc_r+0x52>
10012c22:	2b0b      	cmp	r3, #11
10012c24:	d902      	bls.n	10012c2c <_malloc_r+0x40>
10012c26:	600b      	str	r3, [r1, #0]
10012c28:	18cc      	adds	r4, r1, r3
10012c2a:	e01e      	b.n	10012c6a <_malloc_r+0x7e>
10012c2c:	428c      	cmp	r4, r1
10012c2e:	d102      	bne.n	10012c36 <_malloc_r+0x4a>
10012c30:	6863      	ldr	r3, [r4, #4]
10012c32:	6013      	str	r3, [r2, #0]
10012c34:	e01a      	b.n	10012c6c <_malloc_r+0x80>
10012c36:	684b      	ldr	r3, [r1, #4]
10012c38:	6063      	str	r3, [r4, #4]
10012c3a:	000c      	movs	r4, r1
10012c3c:	e016      	b.n	10012c6c <_malloc_r+0x80>
10012c3e:	000c      	movs	r4, r1
10012c40:	6849      	ldr	r1, [r1, #4]
10012c42:	e7e9      	b.n	10012c18 <_malloc_r+0x2c>
10012c44:	4c13      	ldr	r4, [pc, #76]	; (10012c94 <_malloc_r+0xa8>)
10012c46:	6823      	ldr	r3, [r4, #0]
10012c48:	2b00      	cmp	r3, #0
10012c4a:	d103      	bne.n	10012c54 <_malloc_r+0x68>
10012c4c:	0030      	movs	r0, r6
10012c4e:	f000 fb2d 	bl	100132ac <_sbrk_r>
10012c52:	6020      	str	r0, [r4, #0]
10012c54:	0029      	movs	r1, r5
10012c56:	0030      	movs	r0, r6
10012c58:	f000 fb28 	bl	100132ac <_sbrk_r>
10012c5c:	1c43      	adds	r3, r0, #1
10012c5e:	d0d1      	beq.n	10012c04 <_malloc_r+0x18>
10012c60:	2303      	movs	r3, #3
10012c62:	1cc4      	adds	r4, r0, #3
10012c64:	439c      	bics	r4, r3
10012c66:	42a0      	cmp	r0, r4
10012c68:	d10a      	bne.n	10012c80 <_malloc_r+0x94>
10012c6a:	6025      	str	r5, [r4, #0]
10012c6c:	0020      	movs	r0, r4
10012c6e:	2207      	movs	r2, #7
10012c70:	300b      	adds	r0, #11
10012c72:	1d23      	adds	r3, r4, #4
10012c74:	4390      	bics	r0, r2
10012c76:	1ac3      	subs	r3, r0, r3
10012c78:	d009      	beq.n	10012c8e <_malloc_r+0xa2>
10012c7a:	425a      	negs	r2, r3
10012c7c:	50e2      	str	r2, [r4, r3]
10012c7e:	e006      	b.n	10012c8e <_malloc_r+0xa2>
10012c80:	1a21      	subs	r1, r4, r0
10012c82:	0030      	movs	r0, r6
10012c84:	f000 fb12 	bl	100132ac <_sbrk_r>
10012c88:	1c43      	adds	r3, r0, #1
10012c8a:	d1ee      	bne.n	10012c6a <_malloc_r+0x7e>
10012c8c:	e7ba      	b.n	10012c04 <_malloc_r+0x18>
10012c8e:	bd70      	pop	{r4, r5, r6, pc}
10012c90:	10016abc 	.word	0x10016abc
10012c94:	10016ab8 	.word	0x10016ab8

10012c98 <__sfputc_r>:
10012c98:	6893      	ldr	r3, [r2, #8]
10012c9a:	b510      	push	{r4, lr}
10012c9c:	3b01      	subs	r3, #1
10012c9e:	6093      	str	r3, [r2, #8]
10012ca0:	2b00      	cmp	r3, #0
10012ca2:	da05      	bge.n	10012cb0 <__sfputc_r+0x18>
10012ca4:	6994      	ldr	r4, [r2, #24]
10012ca6:	42a3      	cmp	r3, r4
10012ca8:	db08      	blt.n	10012cbc <__sfputc_r+0x24>
10012caa:	b2cb      	uxtb	r3, r1
10012cac:	2b0a      	cmp	r3, #10
10012cae:	d005      	beq.n	10012cbc <__sfputc_r+0x24>
10012cb0:	6813      	ldr	r3, [r2, #0]
10012cb2:	1c58      	adds	r0, r3, #1
10012cb4:	6010      	str	r0, [r2, #0]
10012cb6:	7019      	strb	r1, [r3, #0]
10012cb8:	b2c8      	uxtb	r0, r1
10012cba:	e001      	b.n	10012cc0 <__sfputc_r+0x28>
10012cbc:	f7ff fc8c 	bl	100125d8 <__swbuf_r>
10012cc0:	bd10      	pop	{r4, pc}

10012cc2 <__sfputs_r>:
10012cc2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10012cc4:	0006      	movs	r6, r0
10012cc6:	000f      	movs	r7, r1
10012cc8:	0014      	movs	r4, r2
10012cca:	18d5      	adds	r5, r2, r3
10012ccc:	42ac      	cmp	r4, r5
10012cce:	d008      	beq.n	10012ce2 <__sfputs_r+0x20>
10012cd0:	7821      	ldrb	r1, [r4, #0]
10012cd2:	003a      	movs	r2, r7
10012cd4:	0030      	movs	r0, r6
10012cd6:	f7ff ffdf 	bl	10012c98 <__sfputc_r>
10012cda:	3401      	adds	r4, #1
10012cdc:	1c43      	adds	r3, r0, #1
10012cde:	d1f5      	bne.n	10012ccc <__sfputs_r+0xa>
10012ce0:	e000      	b.n	10012ce4 <__sfputs_r+0x22>
10012ce2:	2000      	movs	r0, #0
10012ce4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

10012ce8 <_vfiprintf_r>:
10012ce8:	b5f0      	push	{r4, r5, r6, r7, lr}
10012cea:	b09f      	sub	sp, #124	; 0x7c
10012cec:	0006      	movs	r6, r0
10012cee:	000f      	movs	r7, r1
10012cf0:	9202      	str	r2, [sp, #8]
10012cf2:	9305      	str	r3, [sp, #20]
10012cf4:	2800      	cmp	r0, #0
10012cf6:	d004      	beq.n	10012d02 <_vfiprintf_r+0x1a>
10012cf8:	6983      	ldr	r3, [r0, #24]
10012cfa:	2b00      	cmp	r3, #0
10012cfc:	d101      	bne.n	10012d02 <_vfiprintf_r+0x1a>
10012cfe:	f7ff fe2d 	bl	1001295c <__sinit>
10012d02:	4b7f      	ldr	r3, [pc, #508]	; (10012f00 <_vfiprintf_r+0x218>)
10012d04:	429f      	cmp	r7, r3
10012d06:	d101      	bne.n	10012d0c <_vfiprintf_r+0x24>
10012d08:	6877      	ldr	r7, [r6, #4]
10012d0a:	e008      	b.n	10012d1e <_vfiprintf_r+0x36>
10012d0c:	4b7d      	ldr	r3, [pc, #500]	; (10012f04 <_vfiprintf_r+0x21c>)
10012d0e:	429f      	cmp	r7, r3
10012d10:	d101      	bne.n	10012d16 <_vfiprintf_r+0x2e>
10012d12:	68b7      	ldr	r7, [r6, #8]
10012d14:	e003      	b.n	10012d1e <_vfiprintf_r+0x36>
10012d16:	4b7c      	ldr	r3, [pc, #496]	; (10012f08 <_vfiprintf_r+0x220>)
10012d18:	429f      	cmp	r7, r3
10012d1a:	d100      	bne.n	10012d1e <_vfiprintf_r+0x36>
10012d1c:	68f7      	ldr	r7, [r6, #12]
10012d1e:	89bb      	ldrh	r3, [r7, #12]
10012d20:	071b      	lsls	r3, r3, #28
10012d22:	d50a      	bpl.n	10012d3a <_vfiprintf_r+0x52>
10012d24:	693b      	ldr	r3, [r7, #16]
10012d26:	2b00      	cmp	r3, #0
10012d28:	d007      	beq.n	10012d3a <_vfiprintf_r+0x52>
10012d2a:	2300      	movs	r3, #0
10012d2c:	ad06      	add	r5, sp, #24
10012d2e:	616b      	str	r3, [r5, #20]
10012d30:	3320      	adds	r3, #32
10012d32:	766b      	strb	r3, [r5, #25]
10012d34:	3310      	adds	r3, #16
10012d36:	76ab      	strb	r3, [r5, #26]
10012d38:	e03d      	b.n	10012db6 <_vfiprintf_r+0xce>
10012d3a:	0039      	movs	r1, r7
10012d3c:	0030      	movs	r0, r6
10012d3e:	f7ff fca3 	bl	10012688 <__swsetup_r>
10012d42:	2800      	cmp	r0, #0
10012d44:	d0f1      	beq.n	10012d2a <_vfiprintf_r+0x42>
10012d46:	2001      	movs	r0, #1
10012d48:	4240      	negs	r0, r0
10012d4a:	e0d6      	b.n	10012efa <_vfiprintf_r+0x212>
10012d4c:	9a05      	ldr	r2, [sp, #20]
10012d4e:	1d11      	adds	r1, r2, #4
10012d50:	6812      	ldr	r2, [r2, #0]
10012d52:	9105      	str	r1, [sp, #20]
10012d54:	2a00      	cmp	r2, #0
10012d56:	da00      	bge.n	10012d5a <_vfiprintf_r+0x72>
10012d58:	e07f      	b.n	10012e5a <_vfiprintf_r+0x172>
10012d5a:	9209      	str	r2, [sp, #36]	; 0x24
10012d5c:	3401      	adds	r4, #1
10012d5e:	7823      	ldrb	r3, [r4, #0]
10012d60:	2b2e      	cmp	r3, #46	; 0x2e
10012d62:	d100      	bne.n	10012d66 <_vfiprintf_r+0x7e>
10012d64:	e08d      	b.n	10012e82 <_vfiprintf_r+0x19a>
10012d66:	7821      	ldrb	r1, [r4, #0]
10012d68:	2203      	movs	r2, #3
10012d6a:	4868      	ldr	r0, [pc, #416]	; (10012f0c <_vfiprintf_r+0x224>)
10012d6c:	f000 fb5a 	bl	10013424 <memchr>
10012d70:	2800      	cmp	r0, #0
10012d72:	d007      	beq.n	10012d84 <_vfiprintf_r+0x9c>
10012d74:	4b65      	ldr	r3, [pc, #404]	; (10012f0c <_vfiprintf_r+0x224>)
10012d76:	682a      	ldr	r2, [r5, #0]
10012d78:	1ac0      	subs	r0, r0, r3
10012d7a:	2340      	movs	r3, #64	; 0x40
10012d7c:	4083      	lsls	r3, r0
10012d7e:	4313      	orrs	r3, r2
10012d80:	602b      	str	r3, [r5, #0]
10012d82:	3401      	adds	r4, #1
10012d84:	7821      	ldrb	r1, [r4, #0]
10012d86:	1c63      	adds	r3, r4, #1
10012d88:	2206      	movs	r2, #6
10012d8a:	4861      	ldr	r0, [pc, #388]	; (10012f10 <_vfiprintf_r+0x228>)
10012d8c:	9302      	str	r3, [sp, #8]
10012d8e:	7629      	strb	r1, [r5, #24]
10012d90:	f000 fb48 	bl	10013424 <memchr>
10012d94:	2800      	cmp	r0, #0
10012d96:	d100      	bne.n	10012d9a <_vfiprintf_r+0xb2>
10012d98:	e09d      	b.n	10012ed6 <_vfiprintf_r+0x1ee>
10012d9a:	4b5e      	ldr	r3, [pc, #376]	; (10012f14 <_vfiprintf_r+0x22c>)
10012d9c:	2b00      	cmp	r3, #0
10012d9e:	d000      	beq.n	10012da2 <_vfiprintf_r+0xba>
10012da0:	e090      	b.n	10012ec4 <_vfiprintf_r+0x1dc>
10012da2:	2207      	movs	r2, #7
10012da4:	9b05      	ldr	r3, [sp, #20]
10012da6:	3307      	adds	r3, #7
10012da8:	4393      	bics	r3, r2
10012daa:	3308      	adds	r3, #8
10012dac:	9305      	str	r3, [sp, #20]
10012dae:	696b      	ldr	r3, [r5, #20]
10012db0:	9a03      	ldr	r2, [sp, #12]
10012db2:	189b      	adds	r3, r3, r2
10012db4:	616b      	str	r3, [r5, #20]
10012db6:	9c02      	ldr	r4, [sp, #8]
10012db8:	7823      	ldrb	r3, [r4, #0]
10012dba:	2b00      	cmp	r3, #0
10012dbc:	d104      	bne.n	10012dc8 <_vfiprintf_r+0xe0>
10012dbe:	9b02      	ldr	r3, [sp, #8]
10012dc0:	1ae3      	subs	r3, r4, r3
10012dc2:	9304      	str	r3, [sp, #16]
10012dc4:	d012      	beq.n	10012dec <_vfiprintf_r+0x104>
10012dc6:	e003      	b.n	10012dd0 <_vfiprintf_r+0xe8>
10012dc8:	2b25      	cmp	r3, #37	; 0x25
10012dca:	d0f8      	beq.n	10012dbe <_vfiprintf_r+0xd6>
10012dcc:	3401      	adds	r4, #1
10012dce:	e7f3      	b.n	10012db8 <_vfiprintf_r+0xd0>
10012dd0:	9b04      	ldr	r3, [sp, #16]
10012dd2:	9a02      	ldr	r2, [sp, #8]
10012dd4:	0039      	movs	r1, r7
10012dd6:	0030      	movs	r0, r6
10012dd8:	f7ff ff73 	bl	10012cc2 <__sfputs_r>
10012ddc:	1c43      	adds	r3, r0, #1
10012dde:	d100      	bne.n	10012de2 <_vfiprintf_r+0xfa>
10012de0:	e086      	b.n	10012ef0 <_vfiprintf_r+0x208>
10012de2:	696a      	ldr	r2, [r5, #20]
10012de4:	9b04      	ldr	r3, [sp, #16]
10012de6:	4694      	mov	ip, r2
10012de8:	4463      	add	r3, ip
10012dea:	616b      	str	r3, [r5, #20]
10012dec:	7823      	ldrb	r3, [r4, #0]
10012dee:	2b00      	cmp	r3, #0
10012df0:	d07e      	beq.n	10012ef0 <_vfiprintf_r+0x208>
10012df2:	2201      	movs	r2, #1
10012df4:	2300      	movs	r3, #0
10012df6:	4252      	negs	r2, r2
10012df8:	606a      	str	r2, [r5, #4]
10012dfa:	a902      	add	r1, sp, #8
10012dfc:	3254      	adds	r2, #84	; 0x54
10012dfe:	1852      	adds	r2, r2, r1
10012e00:	3401      	adds	r4, #1
10012e02:	602b      	str	r3, [r5, #0]
10012e04:	60eb      	str	r3, [r5, #12]
10012e06:	60ab      	str	r3, [r5, #8]
10012e08:	7013      	strb	r3, [r2, #0]
10012e0a:	65ab      	str	r3, [r5, #88]	; 0x58
10012e0c:	7821      	ldrb	r1, [r4, #0]
10012e0e:	2205      	movs	r2, #5
10012e10:	4841      	ldr	r0, [pc, #260]	; (10012f18 <_vfiprintf_r+0x230>)
10012e12:	f000 fb07 	bl	10013424 <memchr>
10012e16:	2800      	cmp	r0, #0
10012e18:	d008      	beq.n	10012e2c <_vfiprintf_r+0x144>
10012e1a:	4b3f      	ldr	r3, [pc, #252]	; (10012f18 <_vfiprintf_r+0x230>)
10012e1c:	682a      	ldr	r2, [r5, #0]
10012e1e:	1ac0      	subs	r0, r0, r3
10012e20:	2301      	movs	r3, #1
10012e22:	4083      	lsls	r3, r0
10012e24:	4313      	orrs	r3, r2
10012e26:	602b      	str	r3, [r5, #0]
10012e28:	3401      	adds	r4, #1
10012e2a:	e7ef      	b.n	10012e0c <_vfiprintf_r+0x124>
10012e2c:	682b      	ldr	r3, [r5, #0]
10012e2e:	06da      	lsls	r2, r3, #27
10012e30:	d504      	bpl.n	10012e3c <_vfiprintf_r+0x154>
10012e32:	2253      	movs	r2, #83	; 0x53
10012e34:	2120      	movs	r1, #32
10012e36:	a802      	add	r0, sp, #8
10012e38:	1812      	adds	r2, r2, r0
10012e3a:	7011      	strb	r1, [r2, #0]
10012e3c:	071a      	lsls	r2, r3, #28
10012e3e:	d504      	bpl.n	10012e4a <_vfiprintf_r+0x162>
10012e40:	2253      	movs	r2, #83	; 0x53
10012e42:	212b      	movs	r1, #43	; 0x2b
10012e44:	a802      	add	r0, sp, #8
10012e46:	1812      	adds	r2, r2, r0
10012e48:	7011      	strb	r1, [r2, #0]
10012e4a:	7822      	ldrb	r2, [r4, #0]
10012e4c:	2a2a      	cmp	r2, #42	; 0x2a
10012e4e:	d100      	bne.n	10012e52 <_vfiprintf_r+0x16a>
10012e50:	e77c      	b.n	10012d4c <_vfiprintf_r+0x64>
10012e52:	9b09      	ldr	r3, [sp, #36]	; 0x24
10012e54:	2000      	movs	r0, #0
10012e56:	210a      	movs	r1, #10
10012e58:	e005      	b.n	10012e66 <_vfiprintf_r+0x17e>
10012e5a:	4252      	negs	r2, r2
10012e5c:	60ea      	str	r2, [r5, #12]
10012e5e:	2202      	movs	r2, #2
10012e60:	4313      	orrs	r3, r2
10012e62:	602b      	str	r3, [r5, #0]
10012e64:	e77a      	b.n	10012d5c <_vfiprintf_r+0x74>
10012e66:	7822      	ldrb	r2, [r4, #0]
10012e68:	3a30      	subs	r2, #48	; 0x30
10012e6a:	2a09      	cmp	r2, #9
10012e6c:	d804      	bhi.n	10012e78 <_vfiprintf_r+0x190>
10012e6e:	434b      	muls	r3, r1
10012e70:	3401      	adds	r4, #1
10012e72:	189b      	adds	r3, r3, r2
10012e74:	2001      	movs	r0, #1
10012e76:	e7f6      	b.n	10012e66 <_vfiprintf_r+0x17e>
10012e78:	2800      	cmp	r0, #0
10012e7a:	d100      	bne.n	10012e7e <_vfiprintf_r+0x196>
10012e7c:	e76f      	b.n	10012d5e <_vfiprintf_r+0x76>
10012e7e:	9309      	str	r3, [sp, #36]	; 0x24
10012e80:	e76d      	b.n	10012d5e <_vfiprintf_r+0x76>
10012e82:	7863      	ldrb	r3, [r4, #1]
10012e84:	2b2a      	cmp	r3, #42	; 0x2a
10012e86:	d10a      	bne.n	10012e9e <_vfiprintf_r+0x1b6>
10012e88:	9b05      	ldr	r3, [sp, #20]
10012e8a:	3402      	adds	r4, #2
10012e8c:	1d1a      	adds	r2, r3, #4
10012e8e:	681b      	ldr	r3, [r3, #0]
10012e90:	9205      	str	r2, [sp, #20]
10012e92:	2b00      	cmp	r3, #0
10012e94:	da01      	bge.n	10012e9a <_vfiprintf_r+0x1b2>
10012e96:	2301      	movs	r3, #1
10012e98:	425b      	negs	r3, r3
10012e9a:	9307      	str	r3, [sp, #28]
10012e9c:	e763      	b.n	10012d66 <_vfiprintf_r+0x7e>
10012e9e:	2300      	movs	r3, #0
10012ea0:	200a      	movs	r0, #10
10012ea2:	001a      	movs	r2, r3
10012ea4:	3401      	adds	r4, #1
10012ea6:	606b      	str	r3, [r5, #4]
10012ea8:	7821      	ldrb	r1, [r4, #0]
10012eaa:	3930      	subs	r1, #48	; 0x30
10012eac:	2909      	cmp	r1, #9
10012eae:	d804      	bhi.n	10012eba <_vfiprintf_r+0x1d2>
10012eb0:	4342      	muls	r2, r0
10012eb2:	3401      	adds	r4, #1
10012eb4:	1852      	adds	r2, r2, r1
10012eb6:	2301      	movs	r3, #1
10012eb8:	e7f6      	b.n	10012ea8 <_vfiprintf_r+0x1c0>
10012eba:	2b00      	cmp	r3, #0
10012ebc:	d100      	bne.n	10012ec0 <_vfiprintf_r+0x1d8>
10012ebe:	e752      	b.n	10012d66 <_vfiprintf_r+0x7e>
10012ec0:	9207      	str	r2, [sp, #28]
10012ec2:	e750      	b.n	10012d66 <_vfiprintf_r+0x7e>
10012ec4:	ab05      	add	r3, sp, #20
10012ec6:	9300      	str	r3, [sp, #0]
10012ec8:	003a      	movs	r2, r7
10012eca:	4b14      	ldr	r3, [pc, #80]	; (10012f1c <_vfiprintf_r+0x234>)
10012ecc:	0029      	movs	r1, r5
10012ece:	0030      	movs	r0, r6
10012ed0:	e000      	b.n	10012ed4 <_vfiprintf_r+0x1ec>
10012ed2:	bf00      	nop
10012ed4:	e007      	b.n	10012ee6 <_vfiprintf_r+0x1fe>
10012ed6:	ab05      	add	r3, sp, #20
10012ed8:	9300      	str	r3, [sp, #0]
10012eda:	003a      	movs	r2, r7
10012edc:	4b0f      	ldr	r3, [pc, #60]	; (10012f1c <_vfiprintf_r+0x234>)
10012ede:	0029      	movs	r1, r5
10012ee0:	0030      	movs	r0, r6
10012ee2:	f000 f88b 	bl	10012ffc <_printf_i>
10012ee6:	9003      	str	r0, [sp, #12]
10012ee8:	9b03      	ldr	r3, [sp, #12]
10012eea:	3301      	adds	r3, #1
10012eec:	d000      	beq.n	10012ef0 <_vfiprintf_r+0x208>
10012eee:	e75e      	b.n	10012dae <_vfiprintf_r+0xc6>
10012ef0:	89bb      	ldrh	r3, [r7, #12]
10012ef2:	065b      	lsls	r3, r3, #25
10012ef4:	d500      	bpl.n	10012ef8 <_vfiprintf_r+0x210>
10012ef6:	e726      	b.n	10012d46 <_vfiprintf_r+0x5e>
10012ef8:	980b      	ldr	r0, [sp, #44]	; 0x2c
10012efa:	b01f      	add	sp, #124	; 0x7c
10012efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012efe:	46c0      	nop			; (mov r8, r8)
10012f00:	10014edc 	.word	0x10014edc
10012f04:	10014efc 	.word	0x10014efc
10012f08:	10014f1c 	.word	0x10014f1c
10012f0c:	10014f42 	.word	0x10014f42
10012f10:	10014f46 	.word	0x10014f46
10012f14:	00000000 	.word	0x00000000
10012f18:	10014f3c 	.word	0x10014f3c
10012f1c:	10012cc3 	.word	0x10012cc3

10012f20 <_printf_common>:
10012f20:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10012f22:	0017      	movs	r7, r2
10012f24:	9301      	str	r3, [sp, #4]
10012f26:	688a      	ldr	r2, [r1, #8]
10012f28:	690b      	ldr	r3, [r1, #16]
10012f2a:	9000      	str	r0, [sp, #0]
10012f2c:	000c      	movs	r4, r1
10012f2e:	4293      	cmp	r3, r2
10012f30:	da00      	bge.n	10012f34 <_printf_common+0x14>
10012f32:	0013      	movs	r3, r2
10012f34:	0022      	movs	r2, r4
10012f36:	603b      	str	r3, [r7, #0]
10012f38:	3243      	adds	r2, #67	; 0x43
10012f3a:	7812      	ldrb	r2, [r2, #0]
10012f3c:	2a00      	cmp	r2, #0
10012f3e:	d001      	beq.n	10012f44 <_printf_common+0x24>
10012f40:	3301      	adds	r3, #1
10012f42:	603b      	str	r3, [r7, #0]
10012f44:	6823      	ldr	r3, [r4, #0]
10012f46:	069b      	lsls	r3, r3, #26
10012f48:	d502      	bpl.n	10012f50 <_printf_common+0x30>
10012f4a:	683b      	ldr	r3, [r7, #0]
10012f4c:	3302      	adds	r3, #2
10012f4e:	603b      	str	r3, [r7, #0]
10012f50:	2506      	movs	r5, #6
10012f52:	6823      	ldr	r3, [r4, #0]
10012f54:	401d      	ands	r5, r3
10012f56:	d01e      	beq.n	10012f96 <_printf_common+0x76>
10012f58:	0023      	movs	r3, r4
10012f5a:	3343      	adds	r3, #67	; 0x43
10012f5c:	781b      	ldrb	r3, [r3, #0]
10012f5e:	1e5a      	subs	r2, r3, #1
10012f60:	4193      	sbcs	r3, r2
10012f62:	6822      	ldr	r2, [r4, #0]
10012f64:	0692      	lsls	r2, r2, #26
10012f66:	d51c      	bpl.n	10012fa2 <_printf_common+0x82>
10012f68:	2030      	movs	r0, #48	; 0x30
10012f6a:	18e1      	adds	r1, r4, r3
10012f6c:	3143      	adds	r1, #67	; 0x43
10012f6e:	7008      	strb	r0, [r1, #0]
10012f70:	0021      	movs	r1, r4
10012f72:	1c5a      	adds	r2, r3, #1
10012f74:	3145      	adds	r1, #69	; 0x45
10012f76:	7809      	ldrb	r1, [r1, #0]
10012f78:	18a2      	adds	r2, r4, r2
10012f7a:	3243      	adds	r2, #67	; 0x43
10012f7c:	3302      	adds	r3, #2
10012f7e:	7011      	strb	r1, [r2, #0]
10012f80:	e00f      	b.n	10012fa2 <_printf_common+0x82>
10012f82:	0022      	movs	r2, r4
10012f84:	2301      	movs	r3, #1
10012f86:	3219      	adds	r2, #25
10012f88:	9901      	ldr	r1, [sp, #4]
10012f8a:	9800      	ldr	r0, [sp, #0]
10012f8c:	9e08      	ldr	r6, [sp, #32]
10012f8e:	47b0      	blx	r6
10012f90:	1c43      	adds	r3, r0, #1
10012f92:	d00e      	beq.n	10012fb2 <_printf_common+0x92>
10012f94:	3501      	adds	r5, #1
10012f96:	68e3      	ldr	r3, [r4, #12]
10012f98:	683a      	ldr	r2, [r7, #0]
10012f9a:	1a9b      	subs	r3, r3, r2
10012f9c:	429d      	cmp	r5, r3
10012f9e:	dbf0      	blt.n	10012f82 <_printf_common+0x62>
10012fa0:	e7da      	b.n	10012f58 <_printf_common+0x38>
10012fa2:	0022      	movs	r2, r4
10012fa4:	9901      	ldr	r1, [sp, #4]
10012fa6:	3243      	adds	r2, #67	; 0x43
10012fa8:	9800      	ldr	r0, [sp, #0]
10012faa:	9d08      	ldr	r5, [sp, #32]
10012fac:	47a8      	blx	r5
10012fae:	1c43      	adds	r3, r0, #1
10012fb0:	d102      	bne.n	10012fb8 <_printf_common+0x98>
10012fb2:	2001      	movs	r0, #1
10012fb4:	4240      	negs	r0, r0
10012fb6:	e020      	b.n	10012ffa <_printf_common+0xda>
10012fb8:	2306      	movs	r3, #6
10012fba:	6820      	ldr	r0, [r4, #0]
10012fbc:	68e1      	ldr	r1, [r4, #12]
10012fbe:	683a      	ldr	r2, [r7, #0]
10012fc0:	4003      	ands	r3, r0
10012fc2:	2500      	movs	r5, #0
10012fc4:	2b04      	cmp	r3, #4
10012fc6:	d103      	bne.n	10012fd0 <_printf_common+0xb0>
10012fc8:	1a8d      	subs	r5, r1, r2
10012fca:	43eb      	mvns	r3, r5
10012fcc:	17db      	asrs	r3, r3, #31
10012fce:	401d      	ands	r5, r3
10012fd0:	68a3      	ldr	r3, [r4, #8]
10012fd2:	6922      	ldr	r2, [r4, #16]
10012fd4:	4293      	cmp	r3, r2
10012fd6:	dd01      	ble.n	10012fdc <_printf_common+0xbc>
10012fd8:	1a9b      	subs	r3, r3, r2
10012fda:	18ed      	adds	r5, r5, r3
10012fdc:	2700      	movs	r7, #0
10012fde:	42bd      	cmp	r5, r7
10012fe0:	d00a      	beq.n	10012ff8 <_printf_common+0xd8>
10012fe2:	0022      	movs	r2, r4
10012fe4:	2301      	movs	r3, #1
10012fe6:	321a      	adds	r2, #26
10012fe8:	9901      	ldr	r1, [sp, #4]
10012fea:	9800      	ldr	r0, [sp, #0]
10012fec:	9e08      	ldr	r6, [sp, #32]
10012fee:	47b0      	blx	r6
10012ff0:	1c43      	adds	r3, r0, #1
10012ff2:	d0de      	beq.n	10012fb2 <_printf_common+0x92>
10012ff4:	3701      	adds	r7, #1
10012ff6:	e7f2      	b.n	10012fde <_printf_common+0xbe>
10012ff8:	2000      	movs	r0, #0
10012ffa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10012ffc <_printf_i>:
10012ffc:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ffe:	b08b      	sub	sp, #44	; 0x2c
10013000:	9206      	str	r2, [sp, #24]
10013002:	000a      	movs	r2, r1
10013004:	3243      	adds	r2, #67	; 0x43
10013006:	9307      	str	r3, [sp, #28]
10013008:	9005      	str	r0, [sp, #20]
1001300a:	9204      	str	r2, [sp, #16]
1001300c:	7e0a      	ldrb	r2, [r1, #24]
1001300e:	000c      	movs	r4, r1
10013010:	9b10      	ldr	r3, [sp, #64]	; 0x40
10013012:	2a6e      	cmp	r2, #110	; 0x6e
10013014:	d100      	bne.n	10013018 <_printf_i+0x1c>
10013016:	e0ab      	b.n	10013170 <_printf_i+0x174>
10013018:	d811      	bhi.n	1001303e <_printf_i+0x42>
1001301a:	2a63      	cmp	r2, #99	; 0x63
1001301c:	d022      	beq.n	10013064 <_printf_i+0x68>
1001301e:	d809      	bhi.n	10013034 <_printf_i+0x38>
10013020:	2a00      	cmp	r2, #0
10013022:	d100      	bne.n	10013026 <_printf_i+0x2a>
10013024:	e0b5      	b.n	10013192 <_printf_i+0x196>
10013026:	2a58      	cmp	r2, #88	; 0x58
10013028:	d000      	beq.n	1001302c <_printf_i+0x30>
1001302a:	e0c5      	b.n	100131b8 <_printf_i+0x1bc>
1001302c:	3145      	adds	r1, #69	; 0x45
1001302e:	700a      	strb	r2, [r1, #0]
10013030:	4a81      	ldr	r2, [pc, #516]	; (10013238 <_printf_i+0x23c>)
10013032:	e04f      	b.n	100130d4 <_printf_i+0xd8>
10013034:	2a64      	cmp	r2, #100	; 0x64
10013036:	d01d      	beq.n	10013074 <_printf_i+0x78>
10013038:	2a69      	cmp	r2, #105	; 0x69
1001303a:	d01b      	beq.n	10013074 <_printf_i+0x78>
1001303c:	e0bc      	b.n	100131b8 <_printf_i+0x1bc>
1001303e:	2a73      	cmp	r2, #115	; 0x73
10013040:	d100      	bne.n	10013044 <_printf_i+0x48>
10013042:	e0aa      	b.n	1001319a <_printf_i+0x19e>
10013044:	d809      	bhi.n	1001305a <_printf_i+0x5e>
10013046:	2a6f      	cmp	r2, #111	; 0x6f
10013048:	d029      	beq.n	1001309e <_printf_i+0xa2>
1001304a:	2a70      	cmp	r2, #112	; 0x70
1001304c:	d000      	beq.n	10013050 <_printf_i+0x54>
1001304e:	e0b3      	b.n	100131b8 <_printf_i+0x1bc>
10013050:	2220      	movs	r2, #32
10013052:	6809      	ldr	r1, [r1, #0]
10013054:	430a      	orrs	r2, r1
10013056:	6022      	str	r2, [r4, #0]
10013058:	e037      	b.n	100130ca <_printf_i+0xce>
1001305a:	2a75      	cmp	r2, #117	; 0x75
1001305c:	d01f      	beq.n	1001309e <_printf_i+0xa2>
1001305e:	2a78      	cmp	r2, #120	; 0x78
10013060:	d033      	beq.n	100130ca <_printf_i+0xce>
10013062:	e0a9      	b.n	100131b8 <_printf_i+0x1bc>
10013064:	000e      	movs	r6, r1
10013066:	681a      	ldr	r2, [r3, #0]
10013068:	3642      	adds	r6, #66	; 0x42
1001306a:	1d11      	adds	r1, r2, #4
1001306c:	6019      	str	r1, [r3, #0]
1001306e:	6813      	ldr	r3, [r2, #0]
10013070:	7033      	strb	r3, [r6, #0]
10013072:	e0a4      	b.n	100131be <_printf_i+0x1c2>
10013074:	6821      	ldr	r1, [r4, #0]
10013076:	681a      	ldr	r2, [r3, #0]
10013078:	0608      	lsls	r0, r1, #24
1001307a:	d406      	bmi.n	1001308a <_printf_i+0x8e>
1001307c:	0649      	lsls	r1, r1, #25
1001307e:	d504      	bpl.n	1001308a <_printf_i+0x8e>
10013080:	1d11      	adds	r1, r2, #4
10013082:	6019      	str	r1, [r3, #0]
10013084:	2300      	movs	r3, #0
10013086:	5ed5      	ldrsh	r5, [r2, r3]
10013088:	e002      	b.n	10013090 <_printf_i+0x94>
1001308a:	1d11      	adds	r1, r2, #4
1001308c:	6019      	str	r1, [r3, #0]
1001308e:	6815      	ldr	r5, [r2, #0]
10013090:	2d00      	cmp	r5, #0
10013092:	da3b      	bge.n	1001310c <_printf_i+0x110>
10013094:	232d      	movs	r3, #45	; 0x2d
10013096:	9a04      	ldr	r2, [sp, #16]
10013098:	426d      	negs	r5, r5
1001309a:	7013      	strb	r3, [r2, #0]
1001309c:	e036      	b.n	1001310c <_printf_i+0x110>
1001309e:	6821      	ldr	r1, [r4, #0]
100130a0:	681a      	ldr	r2, [r3, #0]
100130a2:	0608      	lsls	r0, r1, #24
100130a4:	d406      	bmi.n	100130b4 <_printf_i+0xb8>
100130a6:	0649      	lsls	r1, r1, #25
100130a8:	d504      	bpl.n	100130b4 <_printf_i+0xb8>
100130aa:	6815      	ldr	r5, [r2, #0]
100130ac:	1d11      	adds	r1, r2, #4
100130ae:	6019      	str	r1, [r3, #0]
100130b0:	b2ad      	uxth	r5, r5
100130b2:	e002      	b.n	100130ba <_printf_i+0xbe>
100130b4:	1d11      	adds	r1, r2, #4
100130b6:	6019      	str	r1, [r3, #0]
100130b8:	6815      	ldr	r5, [r2, #0]
100130ba:	4b5f      	ldr	r3, [pc, #380]	; (10013238 <_printf_i+0x23c>)
100130bc:	7e22      	ldrb	r2, [r4, #24]
100130be:	9303      	str	r3, [sp, #12]
100130c0:	2708      	movs	r7, #8
100130c2:	2a6f      	cmp	r2, #111	; 0x6f
100130c4:	d01d      	beq.n	10013102 <_printf_i+0x106>
100130c6:	270a      	movs	r7, #10
100130c8:	e01b      	b.n	10013102 <_printf_i+0x106>
100130ca:	0022      	movs	r2, r4
100130cc:	2178      	movs	r1, #120	; 0x78
100130ce:	3245      	adds	r2, #69	; 0x45
100130d0:	7011      	strb	r1, [r2, #0]
100130d2:	4a5a      	ldr	r2, [pc, #360]	; (1001323c <_printf_i+0x240>)
100130d4:	6819      	ldr	r1, [r3, #0]
100130d6:	9203      	str	r2, [sp, #12]
100130d8:	1d08      	adds	r0, r1, #4
100130da:	6822      	ldr	r2, [r4, #0]
100130dc:	6018      	str	r0, [r3, #0]
100130de:	680d      	ldr	r5, [r1, #0]
100130e0:	0610      	lsls	r0, r2, #24
100130e2:	d402      	bmi.n	100130ea <_printf_i+0xee>
100130e4:	0650      	lsls	r0, r2, #25
100130e6:	d500      	bpl.n	100130ea <_printf_i+0xee>
100130e8:	b2ad      	uxth	r5, r5
100130ea:	07d3      	lsls	r3, r2, #31
100130ec:	d502      	bpl.n	100130f4 <_printf_i+0xf8>
100130ee:	2320      	movs	r3, #32
100130f0:	431a      	orrs	r2, r3
100130f2:	6022      	str	r2, [r4, #0]
100130f4:	2710      	movs	r7, #16
100130f6:	2d00      	cmp	r5, #0
100130f8:	d103      	bne.n	10013102 <_printf_i+0x106>
100130fa:	2320      	movs	r3, #32
100130fc:	6822      	ldr	r2, [r4, #0]
100130fe:	439a      	bics	r2, r3
10013100:	6022      	str	r2, [r4, #0]
10013102:	0023      	movs	r3, r4
10013104:	2200      	movs	r2, #0
10013106:	3343      	adds	r3, #67	; 0x43
10013108:	701a      	strb	r2, [r3, #0]
1001310a:	e002      	b.n	10013112 <_printf_i+0x116>
1001310c:	270a      	movs	r7, #10
1001310e:	4b4a      	ldr	r3, [pc, #296]	; (10013238 <_printf_i+0x23c>)
10013110:	9303      	str	r3, [sp, #12]
10013112:	6863      	ldr	r3, [r4, #4]
10013114:	60a3      	str	r3, [r4, #8]
10013116:	2b00      	cmp	r3, #0
10013118:	db09      	blt.n	1001312e <_printf_i+0x132>
1001311a:	2204      	movs	r2, #4
1001311c:	6821      	ldr	r1, [r4, #0]
1001311e:	4391      	bics	r1, r2
10013120:	6021      	str	r1, [r4, #0]
10013122:	2d00      	cmp	r5, #0
10013124:	d105      	bne.n	10013132 <_printf_i+0x136>
10013126:	9e04      	ldr	r6, [sp, #16]
10013128:	2b00      	cmp	r3, #0
1001312a:	d011      	beq.n	10013150 <_printf_i+0x154>
1001312c:	e07b      	b.n	10013226 <_printf_i+0x22a>
1001312e:	2d00      	cmp	r5, #0
10013130:	d079      	beq.n	10013226 <_printf_i+0x22a>
10013132:	9e04      	ldr	r6, [sp, #16]
10013134:	0028      	movs	r0, r5
10013136:	0039      	movs	r1, r7
10013138:	f7fe f882 	bl	10011240 <__aeabi_uidivmod>
1001313c:	9b03      	ldr	r3, [sp, #12]
1001313e:	3e01      	subs	r6, #1
10013140:	5c5b      	ldrb	r3, [r3, r1]
10013142:	0028      	movs	r0, r5
10013144:	7033      	strb	r3, [r6, #0]
10013146:	0039      	movs	r1, r7
10013148:	f7fd fff4 	bl	10011134 <__aeabi_uidiv>
1001314c:	1e05      	subs	r5, r0, #0
1001314e:	d1f1      	bne.n	10013134 <_printf_i+0x138>
10013150:	2f08      	cmp	r7, #8
10013152:	d109      	bne.n	10013168 <_printf_i+0x16c>
10013154:	6823      	ldr	r3, [r4, #0]
10013156:	07db      	lsls	r3, r3, #31
10013158:	d506      	bpl.n	10013168 <_printf_i+0x16c>
1001315a:	6863      	ldr	r3, [r4, #4]
1001315c:	6922      	ldr	r2, [r4, #16]
1001315e:	4293      	cmp	r3, r2
10013160:	dc02      	bgt.n	10013168 <_printf_i+0x16c>
10013162:	2330      	movs	r3, #48	; 0x30
10013164:	3e01      	subs	r6, #1
10013166:	7033      	strb	r3, [r6, #0]
10013168:	9b04      	ldr	r3, [sp, #16]
1001316a:	1b9b      	subs	r3, r3, r6
1001316c:	6123      	str	r3, [r4, #16]
1001316e:	e02b      	b.n	100131c8 <_printf_i+0x1cc>
10013170:	6809      	ldr	r1, [r1, #0]
10013172:	681a      	ldr	r2, [r3, #0]
10013174:	0608      	lsls	r0, r1, #24
10013176:	d407      	bmi.n	10013188 <_printf_i+0x18c>
10013178:	0649      	lsls	r1, r1, #25
1001317a:	d505      	bpl.n	10013188 <_printf_i+0x18c>
1001317c:	1d11      	adds	r1, r2, #4
1001317e:	6019      	str	r1, [r3, #0]
10013180:	6813      	ldr	r3, [r2, #0]
10013182:	8aa2      	ldrh	r2, [r4, #20]
10013184:	801a      	strh	r2, [r3, #0]
10013186:	e004      	b.n	10013192 <_printf_i+0x196>
10013188:	1d11      	adds	r1, r2, #4
1001318a:	6019      	str	r1, [r3, #0]
1001318c:	6813      	ldr	r3, [r2, #0]
1001318e:	6962      	ldr	r2, [r4, #20]
10013190:	601a      	str	r2, [r3, #0]
10013192:	2300      	movs	r3, #0
10013194:	9e04      	ldr	r6, [sp, #16]
10013196:	6123      	str	r3, [r4, #16]
10013198:	e016      	b.n	100131c8 <_printf_i+0x1cc>
1001319a:	681a      	ldr	r2, [r3, #0]
1001319c:	1d11      	adds	r1, r2, #4
1001319e:	6019      	str	r1, [r3, #0]
100131a0:	6816      	ldr	r6, [r2, #0]
100131a2:	2100      	movs	r1, #0
100131a4:	6862      	ldr	r2, [r4, #4]
100131a6:	0030      	movs	r0, r6
100131a8:	f000 f93c 	bl	10013424 <memchr>
100131ac:	2800      	cmp	r0, #0
100131ae:	d001      	beq.n	100131b4 <_printf_i+0x1b8>
100131b0:	1b80      	subs	r0, r0, r6
100131b2:	6060      	str	r0, [r4, #4]
100131b4:	6863      	ldr	r3, [r4, #4]
100131b6:	e003      	b.n	100131c0 <_printf_i+0x1c4>
100131b8:	0026      	movs	r6, r4
100131ba:	3642      	adds	r6, #66	; 0x42
100131bc:	7032      	strb	r2, [r6, #0]
100131be:	2301      	movs	r3, #1
100131c0:	6123      	str	r3, [r4, #16]
100131c2:	2300      	movs	r3, #0
100131c4:	9a04      	ldr	r2, [sp, #16]
100131c6:	7013      	strb	r3, [r2, #0]
100131c8:	9b07      	ldr	r3, [sp, #28]
100131ca:	aa09      	add	r2, sp, #36	; 0x24
100131cc:	9300      	str	r3, [sp, #0]
100131ce:	0021      	movs	r1, r4
100131d0:	9b06      	ldr	r3, [sp, #24]
100131d2:	9805      	ldr	r0, [sp, #20]
100131d4:	f7ff fea4 	bl	10012f20 <_printf_common>
100131d8:	1c43      	adds	r3, r0, #1
100131da:	d102      	bne.n	100131e2 <_printf_i+0x1e6>
100131dc:	2001      	movs	r0, #1
100131de:	4240      	negs	r0, r0
100131e0:	e027      	b.n	10013232 <_printf_i+0x236>
100131e2:	6923      	ldr	r3, [r4, #16]
100131e4:	0032      	movs	r2, r6
100131e6:	9906      	ldr	r1, [sp, #24]
100131e8:	9805      	ldr	r0, [sp, #20]
100131ea:	9d07      	ldr	r5, [sp, #28]
100131ec:	47a8      	blx	r5
100131ee:	1c43      	adds	r3, r0, #1
100131f0:	d0f4      	beq.n	100131dc <_printf_i+0x1e0>
100131f2:	6823      	ldr	r3, [r4, #0]
100131f4:	2500      	movs	r5, #0
100131f6:	079b      	lsls	r3, r3, #30
100131f8:	d40f      	bmi.n	1001321a <_printf_i+0x21e>
100131fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
100131fc:	68e0      	ldr	r0, [r4, #12]
100131fe:	4298      	cmp	r0, r3
10013200:	da17      	bge.n	10013232 <_printf_i+0x236>
10013202:	0018      	movs	r0, r3
10013204:	e015      	b.n	10013232 <_printf_i+0x236>
10013206:	0022      	movs	r2, r4
10013208:	2301      	movs	r3, #1
1001320a:	3219      	adds	r2, #25
1001320c:	9906      	ldr	r1, [sp, #24]
1001320e:	9805      	ldr	r0, [sp, #20]
10013210:	9e07      	ldr	r6, [sp, #28]
10013212:	47b0      	blx	r6
10013214:	1c43      	adds	r3, r0, #1
10013216:	d0e1      	beq.n	100131dc <_printf_i+0x1e0>
10013218:	3501      	adds	r5, #1
1001321a:	68e3      	ldr	r3, [r4, #12]
1001321c:	9a09      	ldr	r2, [sp, #36]	; 0x24
1001321e:	1a9b      	subs	r3, r3, r2
10013220:	429d      	cmp	r5, r3
10013222:	dbf0      	blt.n	10013206 <_printf_i+0x20a>
10013224:	e7e9      	b.n	100131fa <_printf_i+0x1fe>
10013226:	0026      	movs	r6, r4
10013228:	9b03      	ldr	r3, [sp, #12]
1001322a:	3642      	adds	r6, #66	; 0x42
1001322c:	781b      	ldrb	r3, [r3, #0]
1001322e:	7033      	strb	r3, [r6, #0]
10013230:	e78e      	b.n	10013150 <_printf_i+0x154>
10013232:	b00b      	add	sp, #44	; 0x2c
10013234:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013236:	46c0      	nop			; (mov r8, r8)
10013238:	10014f4d 	.word	0x10014f4d
1001323c:	10014f5e 	.word	0x10014f5e

10013240 <_putc_r>:
10013240:	b570      	push	{r4, r5, r6, lr}
10013242:	0006      	movs	r6, r0
10013244:	000d      	movs	r5, r1
10013246:	0014      	movs	r4, r2
10013248:	2800      	cmp	r0, #0
1001324a:	d004      	beq.n	10013256 <_putc_r+0x16>
1001324c:	6983      	ldr	r3, [r0, #24]
1001324e:	2b00      	cmp	r3, #0
10013250:	d101      	bne.n	10013256 <_putc_r+0x16>
10013252:	f7ff fb83 	bl	1001295c <__sinit>
10013256:	4b12      	ldr	r3, [pc, #72]	; (100132a0 <_putc_r+0x60>)
10013258:	429c      	cmp	r4, r3
1001325a:	d101      	bne.n	10013260 <_putc_r+0x20>
1001325c:	6874      	ldr	r4, [r6, #4]
1001325e:	e008      	b.n	10013272 <_putc_r+0x32>
10013260:	4b10      	ldr	r3, [pc, #64]	; (100132a4 <_putc_r+0x64>)
10013262:	429c      	cmp	r4, r3
10013264:	d101      	bne.n	1001326a <_putc_r+0x2a>
10013266:	68b4      	ldr	r4, [r6, #8]
10013268:	e003      	b.n	10013272 <_putc_r+0x32>
1001326a:	4b0f      	ldr	r3, [pc, #60]	; (100132a8 <_putc_r+0x68>)
1001326c:	429c      	cmp	r4, r3
1001326e:	d100      	bne.n	10013272 <_putc_r+0x32>
10013270:	68f4      	ldr	r4, [r6, #12]
10013272:	68a3      	ldr	r3, [r4, #8]
10013274:	3b01      	subs	r3, #1
10013276:	60a3      	str	r3, [r4, #8]
10013278:	2b00      	cmp	r3, #0
1001327a:	da05      	bge.n	10013288 <_putc_r+0x48>
1001327c:	69a2      	ldr	r2, [r4, #24]
1001327e:	4293      	cmp	r3, r2
10013280:	db08      	blt.n	10013294 <_putc_r+0x54>
10013282:	b2eb      	uxtb	r3, r5
10013284:	2b0a      	cmp	r3, #10
10013286:	d005      	beq.n	10013294 <_putc_r+0x54>
10013288:	6823      	ldr	r3, [r4, #0]
1001328a:	b2e8      	uxtb	r0, r5
1001328c:	1c5a      	adds	r2, r3, #1
1001328e:	6022      	str	r2, [r4, #0]
10013290:	701d      	strb	r5, [r3, #0]
10013292:	e004      	b.n	1001329e <_putc_r+0x5e>
10013294:	0022      	movs	r2, r4
10013296:	0029      	movs	r1, r5
10013298:	0030      	movs	r0, r6
1001329a:	f7ff f99d 	bl	100125d8 <__swbuf_r>
1001329e:	bd70      	pop	{r4, r5, r6, pc}
100132a0:	10014edc 	.word	0x10014edc
100132a4:	10014efc 	.word	0x10014efc
100132a8:	10014f1c 	.word	0x10014f1c

100132ac <_sbrk_r>:
100132ac:	2300      	movs	r3, #0
100132ae:	b570      	push	{r4, r5, r6, lr}
100132b0:	4c06      	ldr	r4, [pc, #24]	; (100132cc <_sbrk_r+0x20>)
100132b2:	0005      	movs	r5, r0
100132b4:	0008      	movs	r0, r1
100132b6:	6023      	str	r3, [r4, #0]
100132b8:	f7f8 fa2c 	bl	1000b714 <_sbrk>
100132bc:	1c43      	adds	r3, r0, #1
100132be:	d103      	bne.n	100132c8 <_sbrk_r+0x1c>
100132c0:	6823      	ldr	r3, [r4, #0]
100132c2:	2b00      	cmp	r3, #0
100132c4:	d000      	beq.n	100132c8 <_sbrk_r+0x1c>
100132c6:	602b      	str	r3, [r5, #0]
100132c8:	bd70      	pop	{r4, r5, r6, pc}
100132ca:	46c0      	nop			; (mov r8, r8)
100132cc:	10017de0 	.word	0x10017de0

100132d0 <__sread>:
100132d0:	b570      	push	{r4, r5, r6, lr}
100132d2:	000c      	movs	r4, r1
100132d4:	250e      	movs	r5, #14
100132d6:	5f49      	ldrsh	r1, [r1, r5]
100132d8:	f000 f8b0 	bl	1001343c <_read_r>
100132dc:	2800      	cmp	r0, #0
100132de:	db03      	blt.n	100132e8 <__sread+0x18>
100132e0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100132e2:	181b      	adds	r3, r3, r0
100132e4:	6563      	str	r3, [r4, #84]	; 0x54
100132e6:	e003      	b.n	100132f0 <__sread+0x20>
100132e8:	89a2      	ldrh	r2, [r4, #12]
100132ea:	4b02      	ldr	r3, [pc, #8]	; (100132f4 <__sread+0x24>)
100132ec:	4013      	ands	r3, r2
100132ee:	81a3      	strh	r3, [r4, #12]
100132f0:	bd70      	pop	{r4, r5, r6, pc}
100132f2:	46c0      	nop			; (mov r8, r8)
100132f4:	ffffefff 	.word	0xffffefff

100132f8 <__swrite>:
100132f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100132fa:	001f      	movs	r7, r3
100132fc:	898b      	ldrh	r3, [r1, #12]
100132fe:	0005      	movs	r5, r0
10013300:	000c      	movs	r4, r1
10013302:	0016      	movs	r6, r2
10013304:	05db      	lsls	r3, r3, #23
10013306:	d505      	bpl.n	10013314 <__swrite+0x1c>
10013308:	230e      	movs	r3, #14
1001330a:	5ec9      	ldrsh	r1, [r1, r3]
1001330c:	2200      	movs	r2, #0
1001330e:	2302      	movs	r3, #2
10013310:	f000 f874 	bl	100133fc <_lseek_r>
10013314:	89a2      	ldrh	r2, [r4, #12]
10013316:	4b05      	ldr	r3, [pc, #20]	; (1001332c <__swrite+0x34>)
10013318:	0028      	movs	r0, r5
1001331a:	4013      	ands	r3, r2
1001331c:	81a3      	strh	r3, [r4, #12]
1001331e:	0032      	movs	r2, r6
10013320:	230e      	movs	r3, #14
10013322:	5ee1      	ldrsh	r1, [r4, r3]
10013324:	003b      	movs	r3, r7
10013326:	f000 f81f 	bl	10013368 <_write_r>
1001332a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001332c:	ffffefff 	.word	0xffffefff

10013330 <__sseek>:
10013330:	b570      	push	{r4, r5, r6, lr}
10013332:	000c      	movs	r4, r1
10013334:	250e      	movs	r5, #14
10013336:	5f49      	ldrsh	r1, [r1, r5]
10013338:	f000 f860 	bl	100133fc <_lseek_r>
1001333c:	89a3      	ldrh	r3, [r4, #12]
1001333e:	1c42      	adds	r2, r0, #1
10013340:	d103      	bne.n	1001334a <__sseek+0x1a>
10013342:	4a05      	ldr	r2, [pc, #20]	; (10013358 <__sseek+0x28>)
10013344:	4013      	ands	r3, r2
10013346:	81a3      	strh	r3, [r4, #12]
10013348:	e004      	b.n	10013354 <__sseek+0x24>
1001334a:	2280      	movs	r2, #128	; 0x80
1001334c:	0152      	lsls	r2, r2, #5
1001334e:	4313      	orrs	r3, r2
10013350:	81a3      	strh	r3, [r4, #12]
10013352:	6560      	str	r0, [r4, #84]	; 0x54
10013354:	bd70      	pop	{r4, r5, r6, pc}
10013356:	46c0      	nop			; (mov r8, r8)
10013358:	ffffefff 	.word	0xffffefff

1001335c <__sclose>:
1001335c:	b510      	push	{r4, lr}
1001335e:	230e      	movs	r3, #14
10013360:	5ec9      	ldrsh	r1, [r1, r3]
10013362:	f000 f815 	bl	10013390 <_close_r>
10013366:	bd10      	pop	{r4, pc}

10013368 <_write_r>:
10013368:	b570      	push	{r4, r5, r6, lr}
1001336a:	0005      	movs	r5, r0
1001336c:	0008      	movs	r0, r1
1001336e:	0011      	movs	r1, r2
10013370:	2200      	movs	r2, #0
10013372:	4c06      	ldr	r4, [pc, #24]	; (1001338c <_write_r+0x24>)
10013374:	6022      	str	r2, [r4, #0]
10013376:	001a      	movs	r2, r3
10013378:	f7f8 f9a4 	bl	1000b6c4 <_write>
1001337c:	1c43      	adds	r3, r0, #1
1001337e:	d103      	bne.n	10013388 <_write_r+0x20>
10013380:	6823      	ldr	r3, [r4, #0]
10013382:	2b00      	cmp	r3, #0
10013384:	d000      	beq.n	10013388 <_write_r+0x20>
10013386:	602b      	str	r3, [r5, #0]
10013388:	bd70      	pop	{r4, r5, r6, pc}
1001338a:	46c0      	nop			; (mov r8, r8)
1001338c:	10017de0 	.word	0x10017de0

10013390 <_close_r>:
10013390:	2300      	movs	r3, #0
10013392:	b570      	push	{r4, r5, r6, lr}
10013394:	4c06      	ldr	r4, [pc, #24]	; (100133b0 <_close_r+0x20>)
10013396:	0005      	movs	r5, r0
10013398:	0008      	movs	r0, r1
1001339a:	6023      	str	r3, [r4, #0]
1001339c:	f7f8 f9cc 	bl	1000b738 <_close>
100133a0:	1c43      	adds	r3, r0, #1
100133a2:	d103      	bne.n	100133ac <_close_r+0x1c>
100133a4:	6823      	ldr	r3, [r4, #0]
100133a6:	2b00      	cmp	r3, #0
100133a8:	d000      	beq.n	100133ac <_close_r+0x1c>
100133aa:	602b      	str	r3, [r5, #0]
100133ac:	bd70      	pop	{r4, r5, r6, pc}
100133ae:	46c0      	nop			; (mov r8, r8)
100133b0:	10017de0 	.word	0x10017de0

100133b4 <_fstat_r>:
100133b4:	2300      	movs	r3, #0
100133b6:	b570      	push	{r4, r5, r6, lr}
100133b8:	4c06      	ldr	r4, [pc, #24]	; (100133d4 <_fstat_r+0x20>)
100133ba:	0005      	movs	r5, r0
100133bc:	0008      	movs	r0, r1
100133be:	0011      	movs	r1, r2
100133c0:	6023      	str	r3, [r4, #0]
100133c2:	f7f8 f9bd 	bl	1000b740 <_fstat>
100133c6:	1c43      	adds	r3, r0, #1
100133c8:	d103      	bne.n	100133d2 <_fstat_r+0x1e>
100133ca:	6823      	ldr	r3, [r4, #0]
100133cc:	2b00      	cmp	r3, #0
100133ce:	d000      	beq.n	100133d2 <_fstat_r+0x1e>
100133d0:	602b      	str	r3, [r5, #0]
100133d2:	bd70      	pop	{r4, r5, r6, pc}
100133d4:	10017de0 	.word	0x10017de0

100133d8 <_isatty_r>:
100133d8:	2300      	movs	r3, #0
100133da:	b570      	push	{r4, r5, r6, lr}
100133dc:	4c06      	ldr	r4, [pc, #24]	; (100133f8 <_isatty_r+0x20>)
100133de:	0005      	movs	r5, r0
100133e0:	0008      	movs	r0, r1
100133e2:	6023      	str	r3, [r4, #0]
100133e4:	f7f8 f9b2 	bl	1000b74c <_isatty>
100133e8:	1c43      	adds	r3, r0, #1
100133ea:	d103      	bne.n	100133f4 <_isatty_r+0x1c>
100133ec:	6823      	ldr	r3, [r4, #0]
100133ee:	2b00      	cmp	r3, #0
100133f0:	d000      	beq.n	100133f4 <_isatty_r+0x1c>
100133f2:	602b      	str	r3, [r5, #0]
100133f4:	bd70      	pop	{r4, r5, r6, pc}
100133f6:	46c0      	nop			; (mov r8, r8)
100133f8:	10017de0 	.word	0x10017de0

100133fc <_lseek_r>:
100133fc:	b570      	push	{r4, r5, r6, lr}
100133fe:	0005      	movs	r5, r0
10013400:	0008      	movs	r0, r1
10013402:	0011      	movs	r1, r2
10013404:	2200      	movs	r2, #0
10013406:	4c06      	ldr	r4, [pc, #24]	; (10013420 <_lseek_r+0x24>)
10013408:	6022      	str	r2, [r4, #0]
1001340a:	001a      	movs	r2, r3
1001340c:	f7f8 f9a0 	bl	1000b750 <_lseek>
10013410:	1c43      	adds	r3, r0, #1
10013412:	d103      	bne.n	1001341c <_lseek_r+0x20>
10013414:	6823      	ldr	r3, [r4, #0]
10013416:	2b00      	cmp	r3, #0
10013418:	d000      	beq.n	1001341c <_lseek_r+0x20>
1001341a:	602b      	str	r3, [r5, #0]
1001341c:	bd70      	pop	{r4, r5, r6, pc}
1001341e:	46c0      	nop			; (mov r8, r8)
10013420:	10017de0 	.word	0x10017de0

10013424 <memchr>:
10013424:	b2c9      	uxtb	r1, r1
10013426:	1882      	adds	r2, r0, r2
10013428:	4290      	cmp	r0, r2
1001342a:	d004      	beq.n	10013436 <memchr+0x12>
1001342c:	7803      	ldrb	r3, [r0, #0]
1001342e:	428b      	cmp	r3, r1
10013430:	d002      	beq.n	10013438 <memchr+0x14>
10013432:	3001      	adds	r0, #1
10013434:	e7f8      	b.n	10013428 <memchr+0x4>
10013436:	2000      	movs	r0, #0
10013438:	4770      	bx	lr
	...

1001343c <_read_r>:
1001343c:	b570      	push	{r4, r5, r6, lr}
1001343e:	0005      	movs	r5, r0
10013440:	0008      	movs	r0, r1
10013442:	0011      	movs	r1, r2
10013444:	2200      	movs	r2, #0
10013446:	4c06      	ldr	r4, [pc, #24]	; (10013460 <_read_r+0x24>)
10013448:	6022      	str	r2, [r4, #0]
1001344a:	001a      	movs	r2, r3
1001344c:	f7f8 f91a 	bl	1000b684 <_read>
10013450:	1c43      	adds	r3, r0, #1
10013452:	d103      	bne.n	1001345c <_read_r+0x20>
10013454:	6823      	ldr	r3, [r4, #0]
10013456:	2b00      	cmp	r3, #0
10013458:	d000      	beq.n	1001345c <_read_r+0x20>
1001345a:	602b      	str	r3, [r5, #0]
1001345c:	bd70      	pop	{r4, r5, r6, pc}
1001345e:	46c0      	nop			; (mov r8, r8)
10013460:	10017de0 	.word	0x10017de0
10013464:	0000000d 	.word	0x0000000d
10013468:	736d735b 	.word	0x736d735b
1001346c:	656c625f 	.word	0x656c625f
10013470:	6961705f 	.word	0x6961705f
10013474:	65725f72 	.word	0x65725f72
10013478:	73657571 	.word	0x73657571
1001347c:	6e665f74 	.word	0x6e665f74
10013480:	6150095d 	.word	0x6150095d
10013484:	6e697269 	.word	0x6e697269
10013488:	65722067 	.word	0x65722067
1001348c:	73657571 	.word	0x73657571
10013490:	2e2e2e74 	.word	0x2e2e2e74
10013494:	656e4220 	.word	0x656e4220
10013498:	64252077 	.word	0x64252077
1001349c:	4c42202c 	.word	0x4c42202c
100134a0:	78302045 	.word	0x78302045
100134a4:	78323025 	.word	0x78323025
100134a8:	3154202c 	.word	0x3154202c
100134ac:	2c642520 	.word	0x2c642520
100134b0:	20325420 	.word	0x20325420
100134b4:	00006425 	.word	0x00006425
100134b8:	656d6954 	.word	0x656d6954
100134bc:	63203172 	.word	0x63203172
100134c0:	65727275 	.word	0x65727275
100134c4:	6d20746e 	.word	0x6d20746e
100134c8:	3a65646f 	.word	0x3a65646f
100134cc:	00642520 	.word	0x00642520
100134d0:	736d735b 	.word	0x736d735b
100134d4:	656c625f 	.word	0x656c625f
100134d8:	776f705f 	.word	0x776f705f
100134dc:	645f7265 	.word	0x645f7265
100134e0:	5d6e776f 	.word	0x5d6e776f
100134e4:	00000000 	.word	0x00000000
100134e8:	736d735b 	.word	0x736d735b
100134ec:	656c625f 	.word	0x656c625f
100134f0:	776f705f 	.word	0x776f705f
100134f4:	645f7265 	.word	0x645f7265
100134f8:	5d6e776f 	.word	0x5d6e776f
100134fc:	6f745309 	.word	0x6f745309
10013500:	6e697070 	.word	0x6e697070
10013504:	6f632067 	.word	0x6f632067
10013508:	6e616d6d 	.word	0x6e616d6d
1001350c:	65722064 	.word	0x65722064
10013510:	76696563 	.word	0x76696563
10013514:	64206465 	.word	0x64206465
10013518:	6e697275 	.word	0x6e697275
1001351c:	64612067 	.word	0x64612067
10013520:	74726576 	.word	0x74726576
10013524:	6d657369 	.word	0x6d657369
10013528:	2e746e65 	.word	0x2e746e65
1001352c:	6f745320 	.word	0x6f745320
10013530:	6e697070 	.word	0x6e697070
10013534:	2e2e2e67 	.word	0x2e2e2e67
10013538:	00000020 	.word	0x00000020
1001353c:	6c696166 	.word	0x6c696166
10013540:	21216465 	.word	0x21216465
10013544:	00000021 	.word	0x00000021
10013548:	656e6f64 	.word	0x656e6f64
1001354c:	00000021 	.word	0x00000021
10013550:	736d735b 	.word	0x736d735b
10013554:	656c625f 	.word	0x656c625f
10013558:	776f705f 	.word	0x776f705f
1001355c:	645f7265 	.word	0x645f7265
10013560:	5d6e776f 	.word	0x5d6e776f
10013564:	65440909 	.word	0x65440909
10013568:	65636976 	.word	0x65636976
1001356c:	69617020 	.word	0x69617020
10013570:	2e646572 	.word	0x2e646572
10013574:	64202e2e 	.word	0x64202e2e
10013578:	62617369 	.word	0x62617369
1001357c:	676e696c 	.word	0x676e696c
10013580:	746e6920 	.word	0x746e6920
10013584:	75727265 	.word	0x75727265
10013588:	20737470 	.word	0x20737470
1001358c:	77732026 	.word	0x77732026
10013590:	68637469 	.word	0x68637469
10013594:	20676e69 	.word	0x20676e69
10013598:	6e776f64 	.word	0x6e776f64
1001359c:	6e657320 	.word	0x6e657320
100135a0:	73726f73 	.word	0x73726f73
100135a4:	00000000 	.word	0x00000000
100135a8:	736d735b 	.word	0x736d735b
100135ac:	656c625f 	.word	0x656c625f
100135b0:	776f705f 	.word	0x776f705f
100135b4:	645f7265 	.word	0x645f7265
100135b8:	5d6e776f 	.word	0x5d6e776f
100135bc:	75430909 	.word	0x75430909
100135c0:	6e657272 	.word	0x6e657272
100135c4:	20796c74 	.word	0x20796c74
100135c8:	69646e69 	.word	0x69646e69
100135cc:	69746163 	.word	0x69746163
100135d0:	0000676e 	.word	0x0000676e
100135d4:	736d735b 	.word	0x736d735b
100135d8:	656c625f 	.word	0x656c625f
100135dc:	776f705f 	.word	0x776f705f
100135e0:	645f7265 	.word	0x645f7265
100135e4:	5d6e776f 	.word	0x5d6e776f
100135e8:	65440909 	.word	0x65440909
100135ec:	65636976 	.word	0x65636976
100135f0:	6e6f6320 	.word	0x6e6f6320
100135f4:	7463656e 	.word	0x7463656e
100135f8:	2e2e6465 	.word	0x2e2e6465
100135fc:	6964202e 	.word	0x6964202e
10013600:	6e6f6373 	.word	0x6e6f6373
10013604:	7463656e 	.word	0x7463656e
10013608:	00676e69 	.word	0x00676e69
1001360c:	736d735b 	.word	0x736d735b
10013610:	656c625f 	.word	0x656c625f
10013614:	7664615f 	.word	0x7664615f
10013618:	7065725f 	.word	0x7065725f
1001361c:	5f74726f 	.word	0x5f74726f
10013620:	095d6e66 	.word	0x095d6e66
10013624:	65766441 	.word	0x65766441
10013628:	73697472 	.word	0x73697472
1001362c:	6e656d65 	.word	0x6e656d65
10013630:	69742074 	.word	0x69742074
10013634:	756f656d 	.word	0x756f656d
10013638:	2e2e2e74 	.word	0x2e2e2e74
1001363c:	00000000 	.word	0x00000000
10013640:	736d735b 	.word	0x736d735b
10013644:	656c625f 	.word	0x656c625f
10013648:	6e6f635f 	.word	0x6e6f635f
1001364c:	7463656e 	.word	0x7463656e
10013650:	665f6465 	.word	0x665f6465
10013654:	09095d6e 	.word	0x09095d6e
10013658:	69766544 	.word	0x69766544
1001365c:	20736563 	.word	0x20736563
10013660:	6e6e6f63 	.word	0x6e6e6f63
10013664:	65746365 	.word	0x65746365
10013668:	2e2e2e64 	.word	0x2e2e2e64
1001366c:	00000000 	.word	0x00000000
10013670:	736d735b 	.word	0x736d735b
10013674:	656c625f 	.word	0x656c625f
10013678:	6961705f 	.word	0x6961705f
1001367c:	5f646572 	.word	0x5f646572
10013680:	005d6e66 	.word	0x005d6e66
10013684:	736d735b 	.word	0x736d735b
10013688:	656c625f 	.word	0x656c625f
1001368c:	7664615f 	.word	0x7664615f
10013690:	69747265 	.word	0x69747265
10013694:	095d6573 	.word	0x095d6573
10013698:	65766441 	.word	0x65766441
1001369c:	73697472 	.word	0x73697472
100136a0:	6e656d65 	.word	0x6e656d65
100136a4:	61642074 	.word	0x61642074
100136a8:	73206174 	.word	0x73206174
100136ac:	66207465 	.word	0x66207465
100136b0:	656c6961 	.word	0x656c6961
100136b4:	00002164 	.word	0x00002164
100136b8:	736d735b 	.word	0x736d735b
100136bc:	656c625f 	.word	0x656c625f
100136c0:	7664615f 	.word	0x7664615f
100136c4:	69747265 	.word	0x69747265
100136c8:	095d6573 	.word	0x095d6573
100136cc:	454c4209 	.word	0x454c4209
100136d0:	61745320 	.word	0x61745320
100136d4:	64657472 	.word	0x64657472
100136d8:	76644120 	.word	0x76644120
100136dc:	69747265 	.word	0x69747265
100136e0:	656d6573 	.word	0x656d6573
100136e4:	0000746e 	.word	0x0000746e
100136e8:	736d735b 	.word	0x736d735b
100136ec:	7265735f 	.word	0x7265735f
100136f0:	65636976 	.word	0x65636976
100136f4:	7664615f 	.word	0x7664615f
100136f8:	69747265 	.word	0x69747265
100136fc:	095d6573 	.word	0x095d6573
10013700:	20454c42 	.word	0x20454c42
10013704:	65766441 	.word	0x65766441
10013708:	73697472 	.word	0x73697472
1001370c:	6e656d65 	.word	0x6e656d65
10013710:	74732074 	.word	0x74732074
10013714:	20747261 	.word	0x20747261
10013718:	6c696166 	.word	0x6c696166
1001371c:	203a6465 	.word	0x203a6465
10013720:	73616572 	.word	0x73616572
10013724:	30206e6f 	.word	0x30206e6f
10013728:	00782578 	.word	0x00782578
1001372c:	736d735b 	.word	0x736d735b
10013730:	656c625f 	.word	0x656c625f
10013734:	7369645f 	.word	0x7369645f
10013738:	6e6e6f63 	.word	0x6e6e6f63
1001373c:	65746365 	.word	0x65746365
10013740:	6e665f64 	.word	0x6e665f64
10013744:	6550095d 	.word	0x6550095d
10013748:	64207265 	.word	0x64207265
1001374c:	6f637369 	.word	0x6f637369
10013750:	63656e6e 	.word	0x63656e6e
10013754:	2e646574 	.word	0x2e646574
10013758:	42202e2e 	.word	0x42202e2e
1001375c:	2077656e 	.word	0x2077656e
10013760:	202c6425 	.word	0x202c6425
10013764:	20454c42 	.word	0x20454c42
10013768:	30257830 	.word	0x30257830
1001376c:	202c7832 	.word	0x202c7832
10013770:	25203154 	.word	0x25203154
10013774:	54202c64 	.word	0x54202c64
10013778:	64252032 	.word	0x64252032
1001377c:	00000000 	.word	0x00000000
10013780:	6e630a0d 	.word	0x6e630a0d
10013784:	25203a74 	.word	0x25203a74
10013788:	00000064 	.word	0x00000064

1001378c <sms_ble_gap_cb>:
	...
10013798:	10008449 00000000 1000847d 10008599     I.......}.......
	...
100137b0:	100084c5 10008221 00000000 00000000     ....!...........
	...

100137d8 <sms_ble_gatt_server_cb>:
100137d8:	10008271 100082cd 00000000 00000000     q...............
	...
10013800:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10013810:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10013820:	656c6968 74657320 676e6974 20707520     hile setting up 
10013830:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10013840:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10013850:	6c626f72 77206d65 656c6968 74657320     roblem while set
10013860:	676e6974 20707520 74747562 00316e6f     ting up button1.
10013870:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10013880:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10013890:	656c6968 74657320 676e6974 20707520     hile setting up 
100138a0:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
100138b0:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
100138c0:	5f6e6f74 5f746567 74617473 09095d65     ton_get_state]..
100138d0:	74747542 73206e6f 65746174 6425203a     Button state: %d
100138e0:	00642520 736d735b 7475625f 5f6e6f74      %d.[sms_button_
100138f0:	2d5d6e66 00000030 736d735b 7475625f     fn]-0...[sms_but
10013900:	5f6e6f74 2d5d6e66 00000031 736d735b     ton_fn]-1...[sms
10013910:	7475625f 5f6e6f74 095d6e66 6c697453     _button_fn].Stil
10013920:	6e69206c 61636964 676e6974 002e2e2e     l indicating....
10013930:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10013940:	6f4e0909 73752074 73206465 65746174     ..Not used state
10013950:	2e2e2e73 00000000 736d735b 7475625f     s.......[sms_but
10013960:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
10013970:	5d736563 72655309 65636976 65642073     ces].Services de
10013980:	696e6966 6620676e 656c6961 72202c64     fining failed, r
10013990:	6f736165 7830206e 00007825 736d735b     eason 0x%x..[sms
100139a0:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
100139b0:	69767265 5d736563 72655309 65636976     ervices].Service
100139c0:	65642073 656e6966 53202c64 6220534d     s defined, SMS b
100139d0:	6f747475 6168206e 656c646e 6425203a     utton handle: %d
100139e0:	00000000 736d735b 756d695f 6e6f635f     ....[sms_imu_con
100139f0:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10013a00:	6d656c62 69687720 7320656c 69747465     blem while setti
10013a10:	7520676e 4d492070 52442055 70205944     ng up IMU DRDY p
10013a20:	00006e69 736d735b 756d695f 6e6f635f     in..[sms_imu_con
10013a30:	75676966 675f6572 5d6f6970 6f725009     figure_gpio].Pro
10013a40:	6d656c62 69687720 7320656c 69747465     blem while setti
10013a50:	7520676e 4d492070 43562055 69702043     ng up IMU VCC pi
10013a60:	0000006e 736d735b 64656c5f 6970675f     n...[sms_led_gpi
10013a70:	6e695f6f 095d7469 626f7270 206d656c     o_init].problem 
10013a80:	6c696877 65732065 6e697474 70752067     while setting up
10013a90:	64656c20 00000030 736d735b 6572705f      led0...[sms_pre
10013aa0:	72757373 6f635f65 6769666e 5f657275     ssure_configure_
10013ab0:	6f697067 7270095d 656c626f 6877206d     gpio].problem wh
10013ac0:	20656c69 74746573 20676e69 56207075     ile setting up V
10013ad0:	70206363 00006e69 736d735b 6572705f     cc pin..[sms_pre
10013ae0:	72757373 74735f65 75747261 09095d70     ssure_startup]..
10013af0:	72617453 676e6974 65727020 72757373     Starting pressur
10013b00:	65732065 726f736e 00000000 736d735b     e sensor....[sms
10013b10:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
10013b20:	75636c61 6574616c 6574205d 7265706d     alculate] temper
10013b30:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
10013b40:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
10013b50:	6572705f 72757373 6f705f65 645f6c6c     _pressure_poll_d
10013b60:	5d617461 61745309 6e697472 61642067     ata].Starting da
10013b70:	70206174 696c6c6f 0000676e 736d735b     ta polling..[sms
10013b80:	6572705f 72757373 736d5f65 705f3835     _pressure_ms58_p
10013b90:	5f6c6c6f 61746164 7270205d 656c626f     oll_data] proble
10013ba0:	6572206d 6e696461 736d2067 64203835     m reading ms58 d
10013bb0:	00617461 736d735b 6572705f 72757373     ata.[sms_pressur
10013bc0:	65645f65 656e6966 7265735f 65636976     e_define_service
10013bd0:	53095d73 69767265 20736563 69666564     s].Services defi
10013be0:	676e696e 69616620 2c64656c 61657220     ning failed, rea
10013bf0:	206e6f73 78257830 00000000 736d735b     son 0x%x....[sms
10013c00:	6572705f 72757373 65645f65 656e6966     _pressure_define
10013c10:	7265735f 65636976 53095d73 69767265     _services].Servi
10013c20:	20736563 69666564 2c64656e 534d5320     ces defined, SMS
10013c30:	65727020 72757373 61682065 656c646e      pressure handle
10013c40:	6425203a 00000000 10009932 10009802     : %d....2.......
10013c50:	1000987e 100098ce 10009932 10009932     ~.......2...2...
10013c60:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10013c70:	095d6e66 6c696146 74206465 6e69206f     fn].Failed to in
10013c80:	6d207469 20383573 69766564 00006563     it ms58 device..
10013c90:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10013ca0:	095d6e66 6c696146 74206465 6e69206f     fn].Failed to in
10013cb0:	61697469 657a696c 65727020 72757373     itialize pressur
10013cc0:	65732065 726f736e 6f57202e 6e696b72     e sensor. Workin
10013cd0:	6f6d2067 3d206564 54554220 5f4e4f54     g mode = BUTTON_
10013ce0:	4f4c4f53 00000000 736d735b 6175645f     SOLO....[sms_dua
10013cf0:	6d69746c 5f317265 005d6e66 736d735b     ltimer1_fn].[sms
10013d00:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10013d10:	00000009 2e2e2e20 69766967 7520676e     .... ...giving u
10013d20:	00002170 2e2e2e20 74696177 2e676e69     p!.. ...waiting.
10013d30:	63202e2e 746e756f 203a7265 00006425     .. counter: %d..
10013d40:	736d735b 6175645f 6d69746c 5f327265     [sms_dualtimer2_
10013d50:	095d6e66 696c4209 6e696b6e 74732067     fn]..Blinking st
10013d60:	75747261 2e2e2e70 00000000 736d735b     artup.......[sms
10013d70:	6175645f 6d69746c 5f327265 095d6e66     _dualtimer2_fn].
10013d80:	696c4209 6e696b6e 68732067 6f647475     .Blinking shutdo
10013d90:	2e2e6e77 0000002e 736d735b 6175645f     wn......[sms_dua
10013da0:	6d69746c 5f327265 095d6e66 776f5009     ltimer2_fn]..Pow
10013db0:	6e697265 666f2067 2e2e2e66 00000000     ering off.......
10013dc0:	1000a6a4 1000a6b2 1000a6c0 1000a6ce     ................
10013dd0:	1000a6dc 1000a6ea 1000a6f8 1000a708     ................
10013de0:	1000a718 1000a728 1000a738 1000a748     ....(...8...H...
10013df0:	1000a758 1000a768 1000a778 1000a788     X...h...x.......
10013e00:	1000a798 1000a7a8 1000a7b8 1000a7c8     ................
10013e10:	1000a7d8 1000a7e8 1000a7f8 1000a808     ................
10013e20:	1000a818 1000a828 1000a838 1000a848     ....(...8...H...
10013e30:	1000a856 1000a864 1000a872 1000a880     V...d...r.......
10013e40:	1000a88e 1000a89c 1000a8aa 1000a8b8     ................
10013e50:	1000a8c8 1000a8d8 1000a8e8 1000a8f8     ................
10013e60:	1000a908 1000a918 1000a928 1000a938     ........(...8...
10013e70:	1000a948 1000a958 1000a968 1000a978     H...X...h...x...
10013e80:	1000a988 1000a998 1000a9a8 1000a9b8     ................
10013e90:	1000a9c6 1000a9d4 1000aa00 1000aa0e     ................
10013ea0:	1000aa1c 1000aa2a 1000aa38 1000aa46     ....*...8...F...
10013eb0:	1000aa54 1000aa62 1000aa70 1000aa7e     T...b...p...~...
10013ec0:	1000aa8c 1000aa9a 1000aaa8 1000aab6     ................
10013ed0:	1000aac4 1000aad2 1000aae0 1000aaee     ................
10013ee0:	1000aafc 1000ab0a 1000ab18 1000ab26     ............&...
10013ef0:	1000ab34 1000ab42 1000ab50 1000ab5e     4...B...P...^...
10013f00:	1000ab6c 1000ab7a 1000ab88 1000ab96     l...z...........
10013f10:	1000aba4 1000abb2 1000abc0 1000abce     ................
10013f20:	1000abdc 1000abea 1000abf8 1000ac06     ................
10013f30:	1000ac14 1000ac22 1000ac30 1000ac3e     ...."...0...>...
10013f40:	1000ac4c 1000ac5a 1000ac68 1000ac76     L...Z...h...v...
10013f50:	1000ac84 1000ac92 1000aca0 1000acae     ................
10013f60:	1000acbc 1000acca 1000acd8 1000ace6     ................
10013f70:	1000ad80 1000ada8 1000add0 1000adf8     ................
10013f80:	1000b038 1000ae28 1000ae40 1000aeb8     8...(...@.......
10013f90:	1000aed0 1000ae58 1000ae70 1000ae88     ....X...p.......
10013fa0:	1000aea0 1000aee8 1000b1ac 1000b1ac     ................
10013fb0:	1000b1ac 1000b1ac 1000b1ac 1000b1ac     ................
10013fc0:	1000b1ac 1000b1ac 1000af90 1000afa8     ................
10013fd0:	1000afc0 1000b04e 1000af18 1000b1ac     ....N...........
10013fe0:	1000b1ac 1000b1ac 1000b1ac 1000b1ac     ................
10013ff0:	1000b1ac 1000afd8 1000aff0 1000b008     ................
10014000:	1000b020 1000b1ac 1000b164 1000b17c      .......d...|...
10014010:	1000b1ac 1000b1ac 1000b07a 1000b090     ........z.......
10014020:	1000b0a6 1000b0bc 1000b1ac 1000b1ac     ................
10014030:	1000b1ac 1000b1ac 1000b1ac 1000b1ac     ................
10014040:	1000b1ac 1000b1ac 1000ad6c 1000ad94     ........l.......
10014050:	1000adbc 1000ade4 1000ae10 1000af00     ................
10014060:	1000af30 1000af48 1000af60 1000af78     0...H...`...x...
10014070:	1000b064 1000b0d2 1000b14c 1000b194     d.......L.......
10014080:	1000b8ce 1000b8e0 1000b8b6 1000b8b6     ................
10014090:	1000b8b6 1000b8ce 1000b8b6 1000b8b6     ................
100140a0:	1000c2d2 1000c346 1000c2ba 1000c34c     ....F.......L...
100140b0:	1000c2c0 1000c2c6 1000c2cc 1000ca2c     ............,...
100140c0:	1000ca2c 1000ca2c 1000ca2c 1000ca2c     ,...,...,...,...
100140d0:	1000ca2c 1000ca2c 1000ca2c 1000ca2c     ,...,...,...,...
100140e0:	1000ca2c 1000ca2c 1000ca2c 1000ca2c     ,...,...,...,...
100140f0:	1000ca2c 1000ca2c 1000ca2c 1000ca2c     ,...,...,...,...
10014100:	1000ca2c 1000ca2c 1000ca4a 1000ca4a     ,...,...J...J...
10014110:	1000ca4a 1000ca4a 1000ca4a 1000ca4a     J...J...J...J...
10014120:	1000ca4a 1000ca4a 1000ca4a 1000ca4a     J...J...J...J...
10014130:	1000ca6c 1000ca6c 1000ca6c 1000ca6c     l...l...l...l...
10014140:	1000ca6c 1000ca6c 1000ca6c 1000ca6c     l...l...l...l...
10014150:	1000ca6c 1000ca6c 1000ca9c 1000ca9c     l...l...........
10014160:	1000ca9c 1000ca9c 1000ca9c 1000ca9c     ................
10014170:	1000cab6 1000cab6 1000cab6 1000cab6     ................
10014180:	1000cab6 1000cab6 1000cab6 1000cab6     ................
10014190:	1000cab6 1000cad0 1000cad0 1000caf2     ................
100141a0:	1000caf2 1000cb0c 1000caf2 34333231     ............1234
100141b0:	00003635 efcdab00 00efcdab              56..........

100141bc <ble_mgr_gatt_server_handle>:
	...
100141d4:	1000b7c9 1000b7f1 1000b839 00000000     ........9.......
100141e4:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100141f4:	65636552 64657669 00000000 6e616353     Received....Scan
10014204:	676e696e 61662020 64656c69 00000000     ning  failed....
10014214:	65766441 73697472 20676e69 6c696166     Advertising fail
10014224:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10014234:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10014244:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10014254:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10014264:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10014274:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10014284:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10014294:	6e616843 46206567 656c6961 43202c64     Change Failed, C
100142a4:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
100142b4:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
100142c4:	00000064 72616843 69725720 43206574     d...Char Write C
100142d4:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100142e4:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100142f4:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
10014304:	72616843 69725720 43206574 4620646d     Char Write Cmd F
10014314:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
10014324:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10014334:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10014344:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10014354:	00000000 69766544 64206563 6f637369     ....Device disco
10014364:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10014374:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10014384:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10014394:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
100143a4:	72636e45 69747079 66206e6f 656c6961     Encryption faile
100143b4:	00000064 72636e45 69747079 63206e6f     d...Encryption c
100143c4:	6c706d6f 64657465 63757320 73736563     ompleted success
100143d4:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100143e4:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100143f4:	74707972 206e6f69 6f666e69 00000000     ryption info....
10014404:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
10014414:	64612064 73657264 255b2073 20205d64     d address [%d]  
10014424:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10014434:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10014444:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10014454:	206e6163 69766564 72206563 68636165     can device reach
10014464:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10014474:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10014484:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10014494:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
100144a4:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
100144b4:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
100144c4:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100144d4:	52207463 65757165 46207473 656c6961     ct Request Faile
100144e4:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100144f4:	72756465 6f632065 656c706d 20646574     edure completed 
10014504:	63637573 66737365 796c6c75 00000000     successfully....
10014514:	20454c42 69766544 6e206563 6620746f     BLE Device not f
10014524:	646e756f 206f7420 726f7473 68742065     ound to store th
10014534:	61702065 6e697269 6e692067 00006f66     e pairing info..
10014544:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10014554:	4e206e6f 7320746f 74726174 00006465     on Not started..
10014564:	76616c53 65532065 69727563 52207974     Slave Security R
10014574:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10014584:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10014594:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
100145a4:	00205832 646e6553 20676e69 72696170     2X .Sending pair
100145b4:	20676e69 70736572 65736e6f 00000000     ing response....
100145c4:	72696150 71655220 74736575 41202d20     Pair Request - A
100145d4:	65687475 6369746e 6f697461 6146206e     uthentication Fa
100145e4:	64656c69 00000000 65746e45 68742072     iled....Enter th
100145f4:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10014604:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10014614:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10014624:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10014634:	61656c50 45206573 7265746e 65687420     Please Enter the
10014644:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10014654:	65646f63 206e6f28 6568746f 65442072     code(on other De
10014664:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10014674:	70657220 6620796c 656c6961 00000064      reply failed...
10014684:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10014694:	70707573 6574726f 00000064 65746e45     supported...Ente
100146a4:	20646572 73736150 646f632d 00003a65     red Pass-code:..
100146b4:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
100146c4:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
100146d4:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
100146e4:	76656420 20656369 76696465 00782520      device ediv %x.
100146f4:	72656570 76656420 20656369 76696465     peer device ediv
10014704:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10014714:	00782520 20656854 65646e69 73692078      %x.The index is
10014724:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10014734:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10014744:	6f666e69 74616d72 206e6f69 7020666f     information of p
10014754:	20726565 69766564 69206563 6f6e2073     eer device is no
10014764:	76612074 616c6961 2e656c62 00000000     t available.....
10014774:	61656c50 75206573 6961706e 68742072     Please unpair th
10014784:	65642065 65636976 6f726620 6570206d     e device from pe
10014794:	64207265 63697665 6f6d2865 656c6962     er device(mobile
100147a4:	65732029 6e697474 6d207367 20756e65     ) settings menu 
100147b4:	20646e61 72617473 61702074 6e697269     and start pairin
100147c4:	67612067 006e6961 72636e45 69747079     g again.Encrypti
100147d4:	52206e6f 65757165 52207473 796c7065     on Request Reply
100147e4:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
100147f4:	52206e6f 65757165 52207473 796c7065     on Request Reply
10014804:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10014814:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10014824:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10014834:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10014844:	7a696c61 6f697461 6166206e 64656c69     alization failed
10014854:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10014864:	61656c50 63206573 6b636568 65687420     Please check the
10014874:	776f7020 61207265 6320646e 656e6e6f      power and conne
10014884:	6f697463 202f206e 64726168 65726177     ction / hardware
10014894:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
100148a4:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
100148b4:	20656d61 20746573 6c696166 00006465     ame set failed..
100148c4:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100148d4:	5d676966 44420909 64646120 73736572     fig]..BD address
100148e4:	74656720 69616620 0064656c 656c625b      get failed.[ble
100148f4:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10014904:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10014914:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10014924:	25583230 2c583230 64644120 73736572     02X%02X, Address
10014934:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10014944:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10014954:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10014964:	666e6f63 72756769 6f697461 6166206e     configuration fa
10014974:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10014984:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10014994:	454c4220 76654420 20656369 72646441      BLE Device Addr
100149a4:	20737365 6c696166 00006465 6e616353     ess failed..Scan
100149b4:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
100149c4:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
100149d4:	69727563 72207974 65757165 73207473     curity request s
100149e4:	65636375 75667373 0000006c 76616c53     uccessful...Slav
100149f4:	65732065 69727563 72207974 65757165     e security reque
10014a04:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10014a14:	65746365 6f742064 65657020 65642072     ected to peer de
10014a24:	65636976 74697720 64612068 73657264     vice with addres
10014a34:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10014a44:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10014a54:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10014a64:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10014a74:	61522067 6d6f646e 64646120 73736572     g Random address
10014a84:	63757320 73736563 00002a2a 6f736552      success**..Reso
10014a94:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10014aa4:	73736572 69616620 2a64656c 0000002a     ress failed**...
10014ab4:	2078614d 626d756e 6f207265 6f632066     Max number of co
10014ac4:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10014ad4:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10014ae4:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10014af4:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10014b04:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10014b14:	00000064 23232323 23232323 65442323     d...##########De
10014b24:	65636976 756f4620 0000646e 23232323     vice Found..####
10014b34:	23232323 65442323 65636976 746f4e20     ######Device Not
10014b44:	756f4620 0000646e 69766544 69206563      Found..Device i
10014b54:	253a7864 00000064 2d454c42 6e657645     dx:%d...BLE-Even
10014b64:	64253a74 00000000 54544147 7265535f     t:%d....GATT_Ser
10014b74:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10014b84:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10014b94:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10014ba4:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10014bb4:	756e614d 74636166 72657275 65707320     Manufacturer spe
10014bc4:	69666963 61642063 65206174 6c62616e     cific data enabl
10014bd4:	00006465 5a2d571c 50532dbe 00000000     ed...W-Z.-SP....
10014be4:	20454c42 65766441 73697472 6e656d65     BLE Advertisemen
10014bf4:	61642074 73206174 66207465 656c6961     t data set faile
10014c04:	00000064                                d...

10014c08 <ble_mgr_gap_handle>:
10014c08:	1000b755 1000ba05 1000b779 1000b7a1     U.......y.......
10014c18:	00000000 1000c681 1000b881 1000b91d     ................
10014c28:	1000bc61 1000bab1 1000be61 1000bc79     a.......a...y...
10014c38:	1000bfed 1000c131 1000b941 1000c8cd     ....1...A.......
	...
10014c54:	1000da38 1000da46 1000da8e 1000daf2     8...F...........
10014c64:	1000db1c 1000db86 1000db9e 626f7250     ............Prob
10014c74:	206d656c 6c696877 65732065 6e697474     lem while settin
10014c84:	70672067 70206f69 00006e69 2e2e7325     g gpio pin..%s..
10014c94:	4209092e 6572702d 64252076 2d42202c     ...B-prev %d, B-
10014ca4:	20727563 202c6425 20454c42 30257830     cur %d, BLE 0x%0
10014cb4:	202c7832 25203154 54202c64 64252032     2x, T1 %d, T2 %d
10014cc4:	4d53202c 64252053 00000000 69616d5b     , SMS %d....[mai
10014cd4:	09095d6e 61570909 676e696b 2e707520     n]....Waking up.
10014ce4:	00002e2e 6e6f6420 00002165 69616d5b     .... done!..[mai
10014cf4:	09095d6e 69440909 6c626173 20676e69     n]....Disabling 
10014d04:	74747562 69206e6f 2e2e746e 0000002e     button int......
10014d14:	2e2e0d0a 204f4e2e 52554f53 21214543     .....NO SOURCE!!
10014d24:	00000000 2e2e0d0a 4e54422e 00000030     .........BTN0...
10014d34:	69616d5b 09095d6e 72450909 20726f72     [main]....Error 
10014d44:	73206e69 625f736d 6f747475 6e665f6e     in sms_button_fn
10014d54:	00212928 2e2e0d0a 4e54422e 00000031     ()!......BTN1...
10014d64:	69616d5b 09095d6e 69440909 6c626173     [main]....Disabl
10014d74:	20676e69 736e6573 6920726f 2e2e746e     ing sensor int..
10014d84:	0000002e 2e2e0d0a 554d492e 4452445f     .........IMU_DRD
10014d94:	00000059 2e2e0d0a 4e4f412e 4d49545f     Y........AON_TIM
10014da4:	00005245 69616d5b 09095d6e 6f500909     ER..[main]....Po
10014db4:	6e696c6c 72702067 75737365 64206572     lling pressure d
10014dc4:	2e617461 00002e2e 69616d5b 09095d6e     ata.....[main]..
10014dd4:	4f410909 6974204e 2072656d 64616572     ..AON timer read
10014de4:	68772079 20656c69 69646e69 69746163     y while indicati
10014df4:	2e2e676e 6b73202e 69707069 0000676e     ng... skipping..
10014e04:	2e2e0d0a 4155442e 4d49544c 00315245     .....DUALTIMER1.
10014e14:	2e2e0d0a 4155442e 4d49544c 00325245     .....DUALTIMER2.
10014e24:	2e2e0d0a 003f3f2e 69616d5b 09095d6e     .....??.[main]..
10014e34:	6e450909 696c6261 6220676e 6f747475     ..Enabling butto
10014e44:	6e69206e 2e2e2e74 00000000 69616d5b     n int.......[mai
10014e54:	09095d6e 4c550909 2e2e2e50 00000000     n]....ULP.......
10014e64:	00212120 656d7441 6f43206c 022e7072               !!.Atmel Corp.

10014e73 <CSWTCH.45>:
10014e73:	00100402                                         ...

10014e76 <CSWTCH.47>:
10014e76:	03010300 03030303 03030303 02020303              ...............

10014e85 <client_conf_uuid>:
10014e85:	29042902                                         .)

10014e87 <presentation_format_uuid>:
10014e87:	29012904                                         .)

10014e89 <user_desc_uuid>:
10014e89:	29032901                                         .)

10014e8b <server_conf_uuid>:
10014e8b:	29002903                                         .)

10014e8d <extended_props_uuid>:
10014e8d:	28022900                                         .)

10014e8f <include_uuid>:
10014e8f:	28032802                                         .(

10014e91 <char_uuid>:
10014e91:	d0002803 90100114 90100113 8e100113     .(..............
10014ea1:	a8100113 a8100114 9a100114 8e100114     ................
10014eb1:	a8100113 9a100114 a8100114 8e100114     ................
10014ec1:	b0100113 b0100114 b0100114 b0100114     ................
10014ed1:	43100116 98000000                                ...C...

10014ed8 <_global_impure_ptr>:
10014ed8:	10014f98                                .O..

10014edc <__sf_fake_stdin>:
	...

10014efc <__sf_fake_stdout>:
	...

10014f1c <__sf_fake_stderr>:
	...
10014f3c:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
10014f4c:	32313000 36353433 41393837 45444342     .0123456789ABCDE
10014f5c:	31300046 35343332 39383736 64636261     F.0123456789abcd
10014f6c:	00006665                                ef..

10014f70 <_init>:
10014f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014f72:	46c0      	nop			; (mov r8, r8)
10014f74:	bcf8      	pop	{r3, r4, r5, r6, r7}
10014f76:	bc08      	pop	{r3}
10014f78:	469e      	mov	lr, r3
10014f7a:	4770      	bx	lr

10014f7c <__init_array_start>:
10014f7c:	100080b1 	.word	0x100080b1

10014f80 <_fini>:
10014f80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10014f82:	46c0      	nop			; (mov r8, r8)
10014f84:	bcf8      	pop	{r3, r4, r5, r6, r7}
10014f86:	bc08      	pop	{r3}
10014f88:	469e      	mov	lr, r3
10014f8a:	4770      	bx	lr

10014f8c <__fini_array_start>:
10014f8c:	10008089 	.word	0x10008089
