
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000103fc  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  100183fc  100183fc  000183fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002ef8  1001846c  1001846c  0001846c  2**2
                  ALLOC
  3 .stack        00000804  1001b364  1001b364  0001846c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001846c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00018494  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004bb4c  00000000  00000000  00018548  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00005339  00000000  00000000  00064094  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a11d  00000000  00000000  000693cd  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b80  00000000  00000000  000734ea  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b40  00000000  00000000  0007406a  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c338  00000000  00000000  00074baa  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00016131  00000000  00000000  00080ee2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0014172f  00000000  00000000  00097013  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002c80  00000000  00000000  001d8744  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100183fc 	.word	0x100183fc
10008068:	100183fc 	.word	0x100183fc
1000806c:	1001846c 	.word	0x1001846c
10008070:	1001b364 	.word	0x1001b364
10008074:	1001846c 	.word	0x1001846c
10008078:	10018400 	.word	0x10018400
1000807c:	10018470 	.word	0x10018470
10008080:	1001569d 	.word	0x1001569d
10008084:	1000e139 	.word	0x1000e139

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001846c 	.word	0x1001846c
100080a8:	00000000 	.word	0x00000000
100080ac:	100183fc 	.word	0x100183fc

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10018470 	.word	0x10018470
100080dc:	100183fc 	.word	0x100183fc
100080e0:	100183fc 	.word	0x100183fc
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10018488 	.word	0x10018488

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10018488 	.word	0x10018488

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10018488 	.word	0x10018488

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000bb59 	.word	0x1000bb59

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b6f1 	.word	0x1000b6f1
10008388:	40003400 	.word	0x40003400
1000838c:	1000ac79 	.word	0x1000ac79

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	1001848c 	.word	0x1001848c
1000841c:	1001bb68 	.word	0x1001bb68

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
1000843c:	b510      	push	{r4, lr}
	at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
	DBG_LOG_DEV("[sms_ble_pair_request_fn]\t\tPairing request...");
1000843e:	4804      	ldr	r0, [pc, #16]	; (10008450 <sms_ble_pair_request_fn+0x14>)
10008440:	4b04      	ldr	r3, [pc, #16]	; (10008454 <sms_ble_pair_request_fn+0x18>)
10008442:	4798      	blx	r3
10008444:	4804      	ldr	r0, [pc, #16]	; (10008458 <sms_ble_pair_request_fn+0x1c>)
10008446:	4b05      	ldr	r3, [pc, #20]	; (1000845c <sms_ble_pair_request_fn+0x20>)
10008448:	4798      	blx	r3
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
	return AT_BLE_SUCCESS;
}
1000844a:	2000      	movs	r0, #0
1000844c:	bd10      	pop	{r4, pc}
1000844e:	46c0      	nop			; (mov r8, r8)
10008450:	100168d4 	.word	0x100168d4
10008454:	10015995 	.word	0x10015995
10008458:	100168d8 	.word	0x100168d8
1000845c:	10015875 	.word	0x10015875

10008460 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008460:	b510      	push	{r4, lr}
	//DBG_LOG_CONT(" done!");
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
	
	at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008462:	4c0d      	ldr	r4, [pc, #52]	; (10008498 <sms_ble_notification_confirmed_fn+0x38>)
10008464:	7863      	ldrb	r3, [r4, #1]
10008466:	3b01      	subs	r3, #1
10008468:	b2db      	uxtb	r3, r3
1000846a:	7063      	strb	r3, [r4, #1]
	//DBG_LOG("T/O: OFF");
	sms_ble_timeout = BLE_APP_TIMEOUT_OFF;
1000846c:	2201      	movs	r2, #1
1000846e:	4252      	negs	r2, r2
10008470:	4b0a      	ldr	r3, [pc, #40]	; (1000849c <sms_ble_notification_confirmed_fn+0x3c>)
10008472:	601a      	str	r2, [r3, #0]
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
10008474:	2001      	movs	r0, #1
10008476:	4b0a      	ldr	r3, [pc, #40]	; (100084a0 <sms_ble_notification_confirmed_fn+0x40>)
10008478:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
1000847a:	2200      	movs	r2, #0
1000847c:	4b09      	ldr	r3, [pc, #36]	; (100084a4 <sms_ble_notification_confirmed_fn+0x44>)
1000847e:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
10008480:	2322      	movs	r3, #34	; 0x22
10008482:	7023      	strb	r3, [r4, #0]
	//DBG_LOG_CONT_DEV(" done!");

	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	//DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
	if(timer1_current_mode == TIMER1_MODE_NONE) {
10008484:	4b08      	ldr	r3, [pc, #32]	; (100084a8 <sms_ble_notification_confirmed_fn+0x48>)
10008486:	781b      	ldrb	r3, [r3, #0]
10008488:	2b00      	cmp	r3, #0
1000848a:	d102      	bne.n	10008492 <sms_ble_notification_confirmed_fn+0x32>
		ulp_ready = true;
1000848c:	3201      	adds	r2, #1
1000848e:	4b07      	ldr	r3, [pc, #28]	; (100084ac <sms_ble_notification_confirmed_fn+0x4c>)
10008490:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
10008492:	2000      	movs	r0, #0
10008494:	bd10      	pop	{r4, pc}
10008496:	46c0      	nop			; (mov r8, r8)
10008498:	10019f3c 	.word	0x10019f3c
1000849c:	10019f34 	.word	0x10019f34
100084a0:	1000a2fd 	.word	0x1000a2fd
100084a4:	1001a067 	.word	0x1001a067
100084a8:	10019f30 	.word	0x10019f30
100084ac:	10019f39 	.word	0x10019f39

100084b0 <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084b0:	b510      	push	{r4, lr}
	
	at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
	//button_instance.current_state = sms_button_get_state();
	//DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
	sms_dualtimer_stop(DUALTIMER_TIMER2);
100084b2:	2001      	movs	r0, #1
100084b4:	4b08      	ldr	r3, [pc, #32]	; (100084d8 <sms_ble_indication_confirmed_fn+0x28>)
100084b6:	4798      	blx	r3
	timer2_current_mode = TIMER2_MODE_NONE;
100084b8:	2200      	movs	r2, #0
100084ba:	4b08      	ldr	r3, [pc, #32]	; (100084dc <sms_ble_indication_confirmed_fn+0x2c>)
100084bc:	701a      	strb	r2, [r3, #0]
	ble_instance.current_state = BLE_STATE_PAIRED;
100084be:	3222      	adds	r2, #34	; 0x22
100084c0:	4b07      	ldr	r3, [pc, #28]	; (100084e0 <sms_ble_indication_confirmed_fn+0x30>)
100084c2:	701a      	strb	r2, [r3, #0]
	//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
	//sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
	
	//gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
	
	if(timer1_current_mode == TIMER1_MODE_NONE) {
100084c4:	4b07      	ldr	r3, [pc, #28]	; (100084e4 <sms_ble_indication_confirmed_fn+0x34>)
100084c6:	781b      	ldrb	r3, [r3, #0]
100084c8:	2b00      	cmp	r3, #0
100084ca:	d102      	bne.n	100084d2 <sms_ble_indication_confirmed_fn+0x22>
		ulp_ready = true;
100084cc:	3a21      	subs	r2, #33	; 0x21
100084ce:	4b06      	ldr	r3, [pc, #24]	; (100084e8 <sms_ble_indication_confirmed_fn+0x38>)
100084d0:	701a      	strb	r2, [r3, #0]
	}
	return AT_BLE_SUCCESS;
}
100084d2:	2000      	movs	r0, #0
100084d4:	bd10      	pop	{r4, pc}
100084d6:	46c0      	nop			; (mov r8, r8)
100084d8:	1000a2fd 	.word	0x1000a2fd
100084dc:	1001a067 	.word	0x1001a067
100084e0:	10019f3c 	.word	0x10019f3c
100084e4:	10019f30 	.word	0x10019f30
100084e8:	10019f39 	.word	0x10019f39

100084ec <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
	ble_instance.current_state = BLE_STATE_POWEROFF;
100084ec:	4b04      	ldr	r3, [pc, #16]	; (10008500 <sms_ble_init_variables+0x14>)
100084ee:	2200      	movs	r2, #0
100084f0:	701a      	strb	r2, [r3, #0]
	ble_instance.conn_handle = 0xffff;
100084f2:	2101      	movs	r1, #1
100084f4:	4249      	negs	r1, r1
100084f6:	8059      	strh	r1, [r3, #2]
	ble_instance.ind_retries = 0;
100084f8:	711a      	strb	r2, [r3, #4]
	ble_instance.sending_queue = 0;
100084fa:	705a      	strb	r2, [r3, #1]
	ble_instance.send_cnt = 0;
100084fc:	80da      	strh	r2, [r3, #6]
}
100084fe:	4770      	bx	lr
10008500:	10019f3c 	.word	0x10019f3c

10008504 <sms_ble_power_down>:
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
	return 0;
}

void sms_ble_power_down(void)
{
10008504:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008506:	482c      	ldr	r0, [pc, #176]	; (100085b8 <sms_ble_power_down+0xb4>)
10008508:	4b2c      	ldr	r3, [pc, #176]	; (100085bc <sms_ble_power_down+0xb8>)
1000850a:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000850c:	4b2c      	ldr	r3, [pc, #176]	; (100085c0 <sms_ble_power_down+0xbc>)
1000850e:	781b      	ldrb	r3, [r3, #0]
10008510:	2b00      	cmp	r3, #0
10008512:	d105      	bne.n	10008520 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008514:	2201      	movs	r2, #1
10008516:	4b2b      	ldr	r3, [pc, #172]	; (100085c4 <sms_ble_power_down+0xc0>)
10008518:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
1000851a:	4b2b      	ldr	r3, [pc, #172]	; (100085c8 <sms_ble_power_down+0xc4>)
1000851c:	4798      	blx	r3
1000851e:	e049      	b.n	100085b4 <sms_ble_power_down+0xb0>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008520:	4b27      	ldr	r3, [pc, #156]	; (100085c0 <sms_ble_power_down+0xbc>)
10008522:	781b      	ldrb	r3, [r3, #0]
10008524:	b2db      	uxtb	r3, r3
10008526:	2b21      	cmp	r3, #33	; 0x21
10008528:	d030      	beq.n	1000858c <sms_ble_power_down+0x88>
1000852a:	d802      	bhi.n	10008532 <sms_ble_power_down+0x2e>
1000852c:	2b20      	cmp	r3, #32
1000852e:	d005      	beq.n	1000853c <sms_ble_power_down+0x38>
10008530:	e037      	b.n	100085a2 <sms_ble_power_down+0x9e>
10008532:	2b22      	cmp	r3, #34	; 0x22
10008534:	d017      	beq.n	10008566 <sms_ble_power_down+0x62>
10008536:	2b23      	cmp	r3, #35	; 0x23
10008538:	d01b      	beq.n	10008572 <sms_ble_power_down+0x6e>
1000853a:	e032      	b.n	100085a2 <sms_ble_power_down+0x9e>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
1000853c:	4823      	ldr	r0, [pc, #140]	; (100085cc <sms_ble_power_down+0xc8>)
1000853e:	4b24      	ldr	r3, [pc, #144]	; (100085d0 <sms_ble_power_down+0xcc>)
10008540:	4798      	blx	r3
10008542:	4824      	ldr	r0, [pc, #144]	; (100085d4 <sms_ble_power_down+0xd0>)
10008544:	4b24      	ldr	r3, [pc, #144]	; (100085d8 <sms_ble_power_down+0xd4>)
10008546:	4798      	blx	r3
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008548:	4b24      	ldr	r3, [pc, #144]	; (100085dc <sms_ble_power_down+0xd8>)
1000854a:	4798      	blx	r3
1000854c:	2800      	cmp	r0, #0
1000854e:	d003      	beq.n	10008558 <sms_ble_power_down+0x54>
				DBG_LOG_CONT_DEV("failed!!!");
10008550:	4823      	ldr	r0, [pc, #140]	; (100085e0 <sms_ble_power_down+0xdc>)
10008552:	4b21      	ldr	r3, [pc, #132]	; (100085d8 <sms_ble_power_down+0xd4>)
10008554:	4798      	blx	r3
10008556:	e024      	b.n	100085a2 <sms_ble_power_down+0x9e>
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
10008558:	4822      	ldr	r0, [pc, #136]	; (100085e4 <sms_ble_power_down+0xe0>)
1000855a:	4b1f      	ldr	r3, [pc, #124]	; (100085d8 <sms_ble_power_down+0xd4>)
1000855c:	4798      	blx	r3
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000855e:	2211      	movs	r2, #17
10008560:	4b17      	ldr	r3, [pc, #92]	; (100085c0 <sms_ble_power_down+0xbc>)
10008562:	701a      	strb	r2, [r3, #0]
10008564:	e01d      	b.n	100085a2 <sms_ble_power_down+0x9e>
			}
			break;
			
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
10008566:	4819      	ldr	r0, [pc, #100]	; (100085cc <sms_ble_power_down+0xc8>)
10008568:	4b19      	ldr	r3, [pc, #100]	; (100085d0 <sms_ble_power_down+0xcc>)
1000856a:	4798      	blx	r3
1000856c:	481e      	ldr	r0, [pc, #120]	; (100085e8 <sms_ble_power_down+0xe4>)
1000856e:	4b1a      	ldr	r3, [pc, #104]	; (100085d8 <sms_ble_power_down+0xd4>)
10008570:	4798      	blx	r3
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
10008572:	4816      	ldr	r0, [pc, #88]	; (100085cc <sms_ble_power_down+0xc8>)
10008574:	4b16      	ldr	r3, [pc, #88]	; (100085d0 <sms_ble_power_down+0xcc>)
10008576:	4798      	blx	r3
10008578:	481c      	ldr	r0, [pc, #112]	; (100085ec <sms_ble_power_down+0xe8>)
1000857a:	4b17      	ldr	r3, [pc, #92]	; (100085d8 <sms_ble_power_down+0xd4>)
1000857c:	4798      	blx	r3
			pressure_device.state = PRESSURE_STATE_OFF;
1000857e:	2100      	movs	r1, #0
10008580:	232b      	movs	r3, #43	; 0x2b
10008582:	4a1b      	ldr	r2, [pc, #108]	; (100085f0 <sms_ble_power_down+0xec>)
10008584:	54d1      	strb	r1, [r2, r3]
			sms_sensors_enable_callback(false, false);
10008586:	2000      	movs	r0, #0
10008588:	4b1a      	ldr	r3, [pc, #104]	; (100085f4 <sms_ble_power_down+0xf0>)
1000858a:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
1000858c:	480f      	ldr	r0, [pc, #60]	; (100085cc <sms_ble_power_down+0xc8>)
1000858e:	4b10      	ldr	r3, [pc, #64]	; (100085d0 <sms_ble_power_down+0xcc>)
10008590:	4798      	blx	r3
10008592:	4819      	ldr	r0, [pc, #100]	; (100085f8 <sms_ble_power_down+0xf4>)
10008594:	4b10      	ldr	r3, [pc, #64]	; (100085d8 <sms_ble_power_down+0xd4>)
10008596:	4798      	blx	r3
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008598:	4b18      	ldr	r3, [pc, #96]	; (100085fc <sms_ble_power_down+0xf8>)
1000859a:	8818      	ldrh	r0, [r3, #0]
1000859c:	2113      	movs	r1, #19
1000859e:	4b18      	ldr	r3, [pc, #96]	; (10008600 <sms_ble_power_down+0xfc>)
100085a0:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085a2:	2211      	movs	r2, #17
100085a4:	4b06      	ldr	r3, [pc, #24]	; (100085c0 <sms_ble_power_down+0xbc>)
100085a6:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
100085a8:	3a0e      	subs	r2, #14
100085aa:	4b16      	ldr	r3, [pc, #88]	; (10008604 <sms_ble_power_down+0x100>)
100085ac:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0);
100085ae:	2016      	movs	r0, #22
100085b0:	4b15      	ldr	r3, [pc, #84]	; (10008608 <sms_ble_power_down+0x104>)
100085b2:	4798      	blx	r3
	}
}
100085b4:	bd10      	pop	{r4, pc}
100085b6:	46c0      	nop			; (mov r8, r8)
100085b8:	10016908 	.word	0x10016908
100085bc:	10008f31 	.word	0x10008f31
100085c0:	10019f3c 	.word	0x10019f3c
100085c4:	10019f39 	.word	0x10019f39
100085c8:	1000ded5 	.word	0x1000ded5
100085cc:	100168d4 	.word	0x100168d4
100085d0:	10015995 	.word	0x10015995
100085d4:	10016920 	.word	0x10016920
100085d8:	10015875 	.word	0x10015875
100085dc:	1000f0e9 	.word	0x1000f0e9
100085e0:	10016974 	.word	0x10016974
100085e4:	10016980 	.word	0x10016980
100085e8:	10016988 	.word	0x10016988
100085ec:	100169e0 	.word	0x100169e0
100085f0:	10019fcc 	.word	0x10019fcc
100085f4:	10009f79 	.word	0x10009f79
100085f8:	10016a0c 	.word	0x10016a0c
100085fc:	10019f44 	.word	0x10019f44
10008600:	1000f115 	.word	0x1000f115
10008604:	1001a067 	.word	0x1001a067
10008608:	10009cbd 	.word	0x10009cbd

1000860c <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
1000860c:	b510      	push	{r4, lr}
	at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
1000860e:	2211      	movs	r2, #17
10008610:	4b05      	ldr	r3, [pc, #20]	; (10008628 <sms_ble_adv_report_fn+0x1c>)
10008612:	701a      	strb	r2, [r3, #0]
	DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
10008614:	4805      	ldr	r0, [pc, #20]	; (1000862c <sms_ble_adv_report_fn+0x20>)
10008616:	4b06      	ldr	r3, [pc, #24]	; (10008630 <sms_ble_adv_report_fn+0x24>)
10008618:	4798      	blx	r3
1000861a:	4806      	ldr	r0, [pc, #24]	; (10008634 <sms_ble_adv_report_fn+0x28>)
1000861c:	4b06      	ldr	r3, [pc, #24]	; (10008638 <sms_ble_adv_report_fn+0x2c>)
1000861e:	4798      	blx	r3
	//DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
	sms_ble_power_down();
10008620:	4b06      	ldr	r3, [pc, #24]	; (1000863c <sms_ble_adv_report_fn+0x30>)
10008622:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
10008624:	2000      	movs	r0, #0
10008626:	bd10      	pop	{r4, pc}
10008628:	10019f3c 	.word	0x10019f3c
1000862c:	100168d4 	.word	0x100168d4
10008630:	10015995 	.word	0x10015995
10008634:	10016a44 	.word	0x10016a44
10008638:	10015875 	.word	0x10015875
1000863c:	10008505 	.word	0x10008505

10008640 <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
10008640:	b570      	push	{r4, r5, r6, lr}
	if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
10008642:	4b11      	ldr	r3, [pc, #68]	; (10008688 <sms_ble_connected_fn+0x48>)
10008644:	781b      	ldrb	r3, [r3, #0]
10008646:	2b20      	cmp	r3, #32
10008648:	d114      	bne.n	10008674 <sms_ble_connected_fn+0x34>
		at_ble_connected_t *connected = (at_ble_connected_t *)params;
		ble_instance.conn_handle = connected->handle;
1000864a:	4b0f      	ldr	r3, [pc, #60]	; (10008688 <sms_ble_connected_fn+0x48>)
1000864c:	8902      	ldrh	r2, [r0, #8]
1000864e:	805a      	strh	r2, [r3, #2]
		ble_instance.current_state = BLE_STATE_CONNECTED;
10008650:	2221      	movs	r2, #33	; 0x21
10008652:	701a      	strb	r2, [r3, #0]
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
10008654:	4e0d      	ldr	r6, [pc, #52]	; (1000868c <sms_ble_connected_fn+0x4c>)
10008656:	0030      	movs	r0, r6
10008658:	4d0d      	ldr	r5, [pc, #52]	; (10008690 <sms_ble_connected_fn+0x50>)
1000865a:	47a8      	blx	r5
1000865c:	480d      	ldr	r0, [pc, #52]	; (10008694 <sms_ble_connected_fn+0x54>)
1000865e:	4c0e      	ldr	r4, [pc, #56]	; (10008698 <sms_ble_connected_fn+0x58>)
10008660:	47a0      	blx	r4
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
		//for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
		//DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
		//}
		DBG_LOG_DEV("BLE T/O: 5000 ms");
10008662:	0030      	movs	r0, r6
10008664:	47a8      	blx	r5
10008666:	480d      	ldr	r0, [pc, #52]	; (1000869c <sms_ble_connected_fn+0x5c>)
10008668:	47a0      	blx	r4
		sms_ble_timeout = BLE_APP_TIMEOUT_PAIR;
1000866a:	22fa      	movs	r2, #250	; 0xfa
1000866c:	0052      	lsls	r2, r2, #1
1000866e:	4b0c      	ldr	r3, [pc, #48]	; (100086a0 <sms_ble_connected_fn+0x60>)
10008670:	601a      	str	r2, [r3, #0]
10008672:	e007      	b.n	10008684 <sms_ble_connected_fn+0x44>
	}
	else {
		DBG_LOG_DEV("[sms_ble_connected_fn]\t\tWrong BLE state... shutting down");
10008674:	4805      	ldr	r0, [pc, #20]	; (1000868c <sms_ble_connected_fn+0x4c>)
10008676:	4b06      	ldr	r3, [pc, #24]	; (10008690 <sms_ble_connected_fn+0x50>)
10008678:	4798      	blx	r3
1000867a:	480a      	ldr	r0, [pc, #40]	; (100086a4 <sms_ble_connected_fn+0x64>)
1000867c:	4b06      	ldr	r3, [pc, #24]	; (10008698 <sms_ble_connected_fn+0x58>)
1000867e:	4798      	blx	r3
		sms_ble_power_down();
10008680:	4b09      	ldr	r3, [pc, #36]	; (100086a8 <sms_ble_connected_fn+0x68>)
10008682:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
10008684:	2000      	movs	r0, #0
10008686:	bd70      	pop	{r4, r5, r6, pc}
10008688:	10019f3c 	.word	0x10019f3c
1000868c:	100168d4 	.word	0x100168d4
10008690:	10015995 	.word	0x10015995
10008694:	10016a78 	.word	0x10016a78
10008698:	10015875 	.word	0x10015875
1000869c:	10016aa8 	.word	0x10016aa8
100086a0:	10019f34 	.word	0x10019f34
100086a4:	10016abc 	.word	0x10016abc
100086a8:	10008505 	.word	0x10008505

100086ac <sms_ble_paired_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
100086ac:	b510      	push	{r4, lr}
	if(ble_instance.current_state == BLE_STATE_CONNECTED) {
100086ae:	4b0b      	ldr	r3, [pc, #44]	; (100086dc <sms_ble_paired_fn+0x30>)
100086b0:	781b      	ldrb	r3, [r3, #0]
100086b2:	2b21      	cmp	r3, #33	; 0x21
100086b4:	d10e      	bne.n	100086d4 <sms_ble_paired_fn+0x28>
		ble_instance.current_state = BLE_STATE_PAIRED;
100086b6:	2222      	movs	r2, #34	; 0x22
100086b8:	4b08      	ldr	r3, [pc, #32]	; (100086dc <sms_ble_paired_fn+0x30>)
100086ba:	701a      	strb	r2, [r3, #0]
		at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
		sms_monitor_get_states("[sms_ble_paired_fn]");
100086bc:	4808      	ldr	r0, [pc, #32]	; (100086e0 <sms_ble_paired_fn+0x34>)
100086be:	4b09      	ldr	r3, [pc, #36]	; (100086e4 <sms_ble_paired_fn+0x38>)
100086c0:	4798      	blx	r3
		//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
		
		sms_sensors_switch(true, true);
100086c2:	2101      	movs	r1, #1
100086c4:	2001      	movs	r0, #1
100086c6:	4b08      	ldr	r3, [pc, #32]	; (100086e8 <sms_ble_paired_fn+0x3c>)
100086c8:	4798      	blx	r3
		
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		//DBG_LOG("T/O: OFF");
		sms_ble_timeout = BLE_APP_TIMEOUT_OFF;
100086ca:	2201      	movs	r2, #1
100086cc:	4252      	negs	r2, r2
100086ce:	4b07      	ldr	r3, [pc, #28]	; (100086ec <sms_ble_paired_fn+0x40>)
100086d0:	601a      	str	r2, [r3, #0]
100086d2:	e001      	b.n	100086d8 <sms_ble_paired_fn+0x2c>
	}
	else {
		sms_ble_power_down();
100086d4:	4b06      	ldr	r3, [pc, #24]	; (100086f0 <sms_ble_paired_fn+0x44>)
100086d6:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
100086d8:	2000      	movs	r0, #0
100086da:	bd10      	pop	{r4, pc}
100086dc:	10019f3c 	.word	0x10019f3c
100086e0:	10016af8 	.word	0x10016af8
100086e4:	10008f31 	.word	0x10008f31
100086e8:	10009fd5 	.word	0x10009fd5
100086ec:	10019f34 	.word	0x10019f34
100086f0:	10008505 	.word	0x10008505

100086f4 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
100086f4:	b510      	push	{r4, lr}
100086f6:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
100086f8:	2220      	movs	r2, #32
100086fa:	4b17      	ldr	r3, [pc, #92]	; (10008758 <sms_ble_advertise+0x64>)
100086fc:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
100086fe:	4b17      	ldr	r3, [pc, #92]	; (1000875c <sms_ble_advertise+0x68>)
10008700:	4798      	blx	r3
10008702:	1e04      	subs	r4, r0, #0
10008704:	d007      	beq.n	10008716 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\t\tAdvertisement data set failed!");
10008706:	4816      	ldr	r0, [pc, #88]	; (10008760 <sms_ble_advertise+0x6c>)
10008708:	4b16      	ldr	r3, [pc, #88]	; (10008764 <sms_ble_advertise+0x70>)
1000870a:	4798      	blx	r3
1000870c:	4816      	ldr	r0, [pc, #88]	; (10008768 <sms_ble_advertise+0x74>)
1000870e:	4b17      	ldr	r3, [pc, #92]	; (1000876c <sms_ble_advertise+0x78>)
10008710:	4798      	blx	r3
		return status;
10008712:	0020      	movs	r0, r4
10008714:	e01e      	b.n	10008754 <sms_ble_advertise+0x60>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, BLE_ADV_INTERVAL, BLE_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
10008716:	2300      	movs	r3, #0
10008718:	9302      	str	r3, [sp, #8]
1000871a:	333c      	adds	r3, #60	; 0x3c
1000871c:	9301      	str	r3, [sp, #4]
1000871e:	23c8      	movs	r3, #200	; 0xc8
10008720:	00db      	lsls	r3, r3, #3
10008722:	9300      	str	r3, [sp, #0]
10008724:	2300      	movs	r3, #0
10008726:	2200      	movs	r2, #0
10008728:	2101      	movs	r1, #1
1000872a:	2000      	movs	r0, #0
1000872c:	4c10      	ldr	r4, [pc, #64]	; (10008770 <sms_ble_advertise+0x7c>)
1000872e:	47a0      	blx	r4
10008730:	1e04      	subs	r4, r0, #0
10008732:	d107      	bne.n	10008744 <sms_ble_advertise+0x50>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE started advertisement");
10008734:	480a      	ldr	r0, [pc, #40]	; (10008760 <sms_ble_advertise+0x6c>)
10008736:	4b0b      	ldr	r3, [pc, #44]	; (10008764 <sms_ble_advertise+0x70>)
10008738:	4798      	blx	r3
1000873a:	480e      	ldr	r0, [pc, #56]	; (10008774 <sms_ble_advertise+0x80>)
1000873c:	4b0b      	ldr	r3, [pc, #44]	; (1000876c <sms_ble_advertise+0x78>)
1000873e:	4798      	blx	r3
		return AT_BLE_SUCCESS;
10008740:	2000      	movs	r0, #0
10008742:	e007      	b.n	10008754 <sms_ble_advertise+0x60>
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE advertisement start failed: reason 0x%x", status);
10008744:	4806      	ldr	r0, [pc, #24]	; (10008760 <sms_ble_advertise+0x6c>)
10008746:	4b07      	ldr	r3, [pc, #28]	; (10008764 <sms_ble_advertise+0x70>)
10008748:	4798      	blx	r3
1000874a:	0021      	movs	r1, r4
1000874c:	480a      	ldr	r0, [pc, #40]	; (10008778 <sms_ble_advertise+0x84>)
1000874e:	4b07      	ldr	r3, [pc, #28]	; (1000876c <sms_ble_advertise+0x78>)
10008750:	4798      	blx	r3
		return status;
10008752:	0020      	movs	r0, r4
	}
	return AT_BLE_FAILURE;
}
10008754:	b004      	add	sp, #16
10008756:	bd10      	pop	{r4, pc}
10008758:	10019f3c 	.word	0x10019f3c
1000875c:	1000d51d 	.word	0x1000d51d
10008760:	100168d4 	.word	0x100168d4
10008764:	10015995 	.word	0x10015995
10008768:	10016b0c 	.word	0x10016b0c
1000876c:	10015875 	.word	0x10015875
10008770:	1000efad 	.word	0x1000efad
10008774:	10016b40 	.word	0x10016b40
10008778:	10016b70 	.word	0x10016b70

1000877c <sms_ble_disconnected_fn>:
	return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
1000877c:	b530      	push	{r4, r5, lr}
1000877e:	b083      	sub	sp, #12
10008780:	0005      	movs	r5, r0
	at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
	if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008782:	4b1c      	ldr	r3, [pc, #112]	; (100087f4 <sms_ble_disconnected_fn+0x78>)
10008784:	781b      	ldrb	r3, [r3, #0]
10008786:	2b22      	cmp	r3, #34	; 0x22
10008788:	d10a      	bne.n	100087a0 <sms_ble_disconnected_fn+0x24>
		pressure_device.state = PRESSURE_STATE_OFF;
1000878a:	2100      	movs	r1, #0
1000878c:	3309      	adds	r3, #9
1000878e:	4a1a      	ldr	r2, [pc, #104]	; (100087f8 <sms_ble_disconnected_fn+0x7c>)
10008790:	54d1      	strb	r1, [r2, r3]
		sms_sensors_enable_callback(false, false);
10008792:	2000      	movs	r0, #0
10008794:	4b19      	ldr	r3, [pc, #100]	; (100087fc <sms_ble_disconnected_fn+0x80>)
10008796:	4798      	blx	r3
		sms_sensors_switch(false, false);
10008798:	2100      	movs	r1, #0
1000879a:	2000      	movs	r0, #0
1000879c:	4b18      	ldr	r3, [pc, #96]	; (10008800 <sms_ble_disconnected_fn+0x84>)
1000879e:	4798      	blx	r3
	}
	ble_instance.current_state = BLE_STATE_DISCONNECTED;
100087a0:	4c14      	ldr	r4, [pc, #80]	; (100087f4 <sms_ble_disconnected_fn+0x78>)
100087a2:	2311      	movs	r3, #17
100087a4:	7023      	strb	r3, [r4, #0]
	DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
100087a6:	4817      	ldr	r0, [pc, #92]	; (10008804 <sms_ble_disconnected_fn+0x88>)
100087a8:	4b17      	ldr	r3, [pc, #92]	; (10008808 <sms_ble_disconnected_fn+0x8c>)
100087aa:	4798      	blx	r3
100087ac:	7822      	ldrb	r2, [r4, #0]
100087ae:	b2d2      	uxtb	r2, r2
100087b0:	4b16      	ldr	r3, [pc, #88]	; (1000880c <sms_ble_disconnected_fn+0x90>)
100087b2:	781b      	ldrb	r3, [r3, #0]
100087b4:	b2db      	uxtb	r3, r3
100087b6:	4916      	ldr	r1, [pc, #88]	; (10008810 <sms_ble_disconnected_fn+0x94>)
100087b8:	7808      	ldrb	r0, [r1, #0]
100087ba:	4916      	ldr	r1, [pc, #88]	; (10008814 <sms_ble_disconnected_fn+0x98>)
100087bc:	7b49      	ldrb	r1, [r1, #13]
100087be:	9000      	str	r0, [sp, #0]
100087c0:	4815      	ldr	r0, [pc, #84]	; (10008818 <sms_ble_disconnected_fn+0x9c>)
100087c2:	4c16      	ldr	r4, [pc, #88]	; (1000881c <sms_ble_disconnected_fn+0xa0>)
100087c4:	47a0      	blx	r4
	//DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
	switch(disconnect->reason) {
100087c6:	78ab      	ldrb	r3, [r5, #2]
100087c8:	2b1a      	cmp	r3, #26
100087ca:	d00b      	beq.n	100087e4 <sms_ble_disconnected_fn+0x68>
100087cc:	b2da      	uxtb	r2, r3
100087ce:	2a1a      	cmp	r2, #26
100087d0:	d804      	bhi.n	100087dc <sms_ble_disconnected_fn+0x60>
100087d2:	2b05      	cmp	r3, #5
100087d4:	d006      	beq.n	100087e4 <sms_ble_disconnected_fn+0x68>
100087d6:	2b08      	cmp	r3, #8
100087d8:	d107      	bne.n	100087ea <sms_ble_disconnected_fn+0x6e>
100087da:	e003      	b.n	100087e4 <sms_ble_disconnected_fn+0x68>
100087dc:	2b29      	cmp	r3, #41	; 0x29
100087de:	d001      	beq.n	100087e4 <sms_ble_disconnected_fn+0x68>
100087e0:	2b3b      	cmp	r3, #59	; 0x3b
100087e2:	d102      	bne.n	100087ea <sms_ble_disconnected_fn+0x6e>
		case AT_BLE_AUTH_FAILURE: //0x05
		case AT_BLE_SUPERVISION_TIMEOUT: //0x08
		case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
		case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
		case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
		sms_ble_advertise();
100087e4:	4b0e      	ldr	r3, [pc, #56]	; (10008820 <sms_ble_disconnected_fn+0xa4>)
100087e6:	4798      	blx	r3
		break;
100087e8:	e001      	b.n	100087ee <sms_ble_disconnected_fn+0x72>
		case AT_BLE_TERMINATED_BY_USER: // 0x13
		case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
		case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
		case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
		default:
		sms_ble_power_down();
100087ea:	4b0e      	ldr	r3, [pc, #56]	; (10008824 <sms_ble_disconnected_fn+0xa8>)
100087ec:	4798      	blx	r3
		break;
	}
	
	return AT_BLE_SUCCESS;
}
100087ee:	2000      	movs	r0, #0
100087f0:	b003      	add	sp, #12
100087f2:	bd30      	pop	{r4, r5, pc}
100087f4:	10019f3c 	.word	0x10019f3c
100087f8:	10019fcc 	.word	0x10019fcc
100087fc:	10009f79 	.word	0x10009f79
10008800:	10009fd5 	.word	0x10009fd5
10008804:	100168d4 	.word	0x100168d4
10008808:	10015995 	.word	0x10015995
1000880c:	10019f30 	.word	0x10019f30
10008810:	1001a067 	.word	0x1001a067
10008814:	10019f48 	.word	0x10019f48
10008818:	10016bb4 	.word	0x10016bb4
1000881c:	10015875 	.word	0x10015875
10008820:	100086f5 	.word	0x100086f5
10008824:	10008505 	.word	0x10008505

10008828 <sms_ble_startup>:
	ble_instance.sending_queue = 0;
	ble_instance.send_cnt = 0;
}

int sms_ble_startup(void)
{
10008828:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
1000882a:	480b      	ldr	r0, [pc, #44]	; (10008858 <sms_ble_startup+0x30>)
1000882c:	4b0b      	ldr	r3, [pc, #44]	; (1000885c <sms_ble_startup+0x34>)
1000882e:	4798      	blx	r3
10008830:	480b      	ldr	r0, [pc, #44]	; (10008860 <sms_ble_startup+0x38>)
10008832:	4b0c      	ldr	r3, [pc, #48]	; (10008864 <sms_ble_startup+0x3c>)
10008834:	4798      	blx	r3
10008836:	240a      	movs	r4, #10
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
10008838:	4e0b      	ldr	r6, [pc, #44]	; (10008868 <sms_ble_startup+0x40>)
		delay_ms(SMS_BLINK_STARTUP_MS);
1000883a:	4d0c      	ldr	r5, [pc, #48]	; (1000886c <sms_ble_startup+0x44>)

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
		sms_led_toggle(SMS_LED_0);
1000883c:	2016      	movs	r0, #22
1000883e:	47b0      	blx	r6
		delay_ms(SMS_BLINK_STARTUP_MS);
10008840:	2064      	movs	r0, #100	; 0x64
10008842:	47a8      	blx	r5
10008844:	3c01      	subs	r4, #1
10008846:	b2e4      	uxtb	r4, r4
}

int sms_ble_startup(void)
{
	DBG_LOG_DEV("[sms_ble_startup]\t\tStarting up...");
	for(uint8_t i = 0; i < SMS_BLINK_STARTUP_CNT; i++) {
10008848:	2c00      	cmp	r4, #0
1000884a:	d1f7      	bne.n	1000883c <sms_ble_startup+0x14>
		sms_led_toggle(SMS_LED_0);
		delay_ms(SMS_BLINK_STARTUP_MS);
	}
	if(sms_ble_advertise() != AT_BLE_SUCCESS) return -1;
1000884c:	4b08      	ldr	r3, [pc, #32]	; (10008870 <sms_ble_startup+0x48>)
1000884e:	4798      	blx	r3
10008850:	1e43      	subs	r3, r0, #1
10008852:	4198      	sbcs	r0, r3
10008854:	4240      	negs	r0, r0
	return 0;
}
10008856:	bd70      	pop	{r4, r5, r6, pc}
10008858:	100168d4 	.word	0x100168d4
1000885c:	10015995 	.word	0x10015995
10008860:	10016c08 	.word	0x10016c08
10008864:	10015875 	.word	0x10015875
10008868:	10009c95 	.word	0x10009c95
1000886c:	1000a309 	.word	0x1000a309
10008870:	100086f5 	.word	0x100086f5

10008874 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
10008874:	b570      	push	{r4, r5, r6, lr}
10008876:	b084      	sub	sp, #16
	uint8_t send_val[BLE_CHAR_SIZE_MAX];
	uint32_t int_val;
	//ble_current_state = BLE_STATE_INDICATING;

	
	switch(ch) {
10008878:	2801      	cmp	r0, #1
1000887a:	d02e      	beq.n	100088da <sms_ble_send_characteristic+0x66>
1000887c:	2800      	cmp	r0, #0
1000887e:	d002      	beq.n	10008886 <sms_ble_send_characteristic+0x12>
10008880:	2802      	cmp	r0, #2
10008882:	d040      	beq.n	10008906 <sms_ble_send_characteristic+0x92>
10008884:	e07a      	b.n	1000897c <sms_ble_send_characteristic+0x108>
		case BLE_CHAR_BTN:
		send_val[0] = 0x00;
10008886:	2300      	movs	r3, #0
10008888:	466a      	mov	r2, sp
1000888a:	7013      	strb	r3, [r2, #0]
		if(button_instance.btn0.new_char) {
1000888c:	4b50      	ldr	r3, [pc, #320]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
1000888e:	791b      	ldrb	r3, [r3, #4]
10008890:	2b00      	cmp	r3, #0
10008892:	d00a      	beq.n	100088aa <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
10008894:	4b4e      	ldr	r3, [pc, #312]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
10008896:	795a      	ldrb	r2, [r3, #5]
10008898:	2300      	movs	r3, #0
1000889a:	2a7e      	cmp	r2, #126	; 0x7e
1000889c:	d801      	bhi.n	100088a2 <sms_ble_send_characteristic+0x2e>
1000889e:	3201      	adds	r2, #1
100088a0:	b2d3      	uxtb	r3, r2
100088a2:	4a4b      	ldr	r2, [pc, #300]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
100088a4:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
100088a6:	466a      	mov	r2, sp
100088a8:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
100088aa:	4b49      	ldr	r3, [pc, #292]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
100088ac:	7a9b      	ldrb	r3, [r3, #10]
100088ae:	2b00      	cmp	r3, #0
100088b0:	d00f      	beq.n	100088d2 <sms_ble_send_characteristic+0x5e>
			button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
100088b2:	4b47      	ldr	r3, [pc, #284]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
100088b4:	7adb      	ldrb	r3, [r3, #11]
100088b6:	2bff      	cmp	r3, #255	; 0xff
100088b8:	d002      	beq.n	100088c0 <sms_ble_send_characteristic+0x4c>
100088ba:	3301      	adds	r3, #1
100088bc:	b2db      	uxtb	r3, r3
100088be:	e000      	b.n	100088c2 <sms_ble_send_characteristic+0x4e>
100088c0:	2300      	movs	r3, #0
100088c2:	4a43      	ldr	r2, [pc, #268]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
100088c4:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
100088c6:	3b80      	subs	r3, #128	; 0x80
100088c8:	466a      	mov	r2, sp
100088ca:	7812      	ldrb	r2, [r2, #0]
100088cc:	4313      	orrs	r3, r2
100088ce:	466a      	mov	r2, sp
100088d0:	7013      	strb	r3, [r2, #0]
		}
		val_handle = button_instance.service_handler.serv_chars.char_val_handle;
100088d2:	4b3f      	ldr	r3, [pc, #252]	; (100089d0 <sms_ble_send_characteristic+0x15c>)
100088d4:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
		length = BLE_CHAR_SIZE_BUTTON;
100088d6:	2201      	movs	r2, #1
		break;
100088d8:	e052      	b.n	10008980 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_PRESS:
		send_val[0] = (uint8_t)((pressure_device.output.temperature >>24) & 0xff);
100088da:	4a3e      	ldr	r2, [pc, #248]	; (100089d4 <sms_ble_send_characteristic+0x160>)
100088dc:	6a53      	ldr	r3, [r2, #36]	; 0x24
100088de:	1619      	asrs	r1, r3, #24
100088e0:	4668      	mov	r0, sp
100088e2:	7001      	strb	r1, [r0, #0]
		send_val[1] = (uint8_t)((pressure_device.output.temperature >> 16) & 0xff);
100088e4:	1419      	asrs	r1, r3, #16
100088e6:	7041      	strb	r1, [r0, #1]
		send_val[2] = (uint8_t)((pressure_device.output.temperature >> 8) & 0xff);
100088e8:	1219      	asrs	r1, r3, #8
100088ea:	7081      	strb	r1, [r0, #2]
		send_val[3] = (uint8_t)((pressure_device.output.temperature) & 0xff);
100088ec:	70c3      	strb	r3, [r0, #3]
		send_val[4] = (uint8_t)((pressure_device.output.pressure >> 24) & 0xff);
100088ee:	6a13      	ldr	r3, [r2, #32]
100088f0:	1619      	asrs	r1, r3, #24
100088f2:	7101      	strb	r1, [r0, #4]
		send_val[5] = (uint8_t)((pressure_device.output.pressure >> 16) & 0xff);
100088f4:	1419      	asrs	r1, r3, #16
100088f6:	7141      	strb	r1, [r0, #5]
		send_val[6] = (uint8_t)((pressure_device.output.pressure >> 8) & 0xff);
100088f8:	1219      	asrs	r1, r3, #8
100088fa:	7181      	strb	r1, [r0, #6]
		send_val[7] = (uint8_t)((pressure_device.output.pressure) & 0xff);
100088fc:	71c3      	strb	r3, [r0, #7]
		val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
100088fe:	2340      	movs	r3, #64	; 0x40
10008900:	5ad5      	ldrh	r5, [r2, r3]
		length = BLE_CHAR_SIZE_PRESSURE;
10008902:	2208      	movs	r2, #8
		break;
10008904:	e03c      	b.n	10008980 <sms_ble_send_characteristic+0x10c>
		
		case BLE_CHAR_MPU:
		int_val = (uint32_t)(imu_device.output.q[0] * 1000000);
10008906:	4c34      	ldr	r4, [pc, #208]	; (100089d8 <sms_ble_send_characteristic+0x164>)
10008908:	4e34      	ldr	r6, [pc, #208]	; (100089dc <sms_ble_send_characteristic+0x168>)
1000890a:	4935      	ldr	r1, [pc, #212]	; (100089e0 <sms_ble_send_characteristic+0x16c>)
1000890c:	6ea0      	ldr	r0, [r4, #104]	; 0x68
1000890e:	47b0      	blx	r6
10008910:	4d34      	ldr	r5, [pc, #208]	; (100089e4 <sms_ble_send_characteristic+0x170>)
10008912:	47a8      	blx	r5
		//DBG_LOG("q1: %ld ", calc_val);
		send_val[0] = (uint8_t)(int_val & 0xff);
10008914:	466b      	mov	r3, sp
10008916:	7018      	strb	r0, [r3, #0]
		send_val[1] = (uint8_t)((int_val >> 8) & 0xff);
10008918:	0a03      	lsrs	r3, r0, #8
1000891a:	466a      	mov	r2, sp
1000891c:	7053      	strb	r3, [r2, #1]
		send_val[2] = (uint8_t)((int_val >> 16) & 0xff);
1000891e:	0c03      	lsrs	r3, r0, #16
10008920:	7093      	strb	r3, [r2, #2]
		send_val[3] = (uint8_t)((int_val >> 24) & 0xff);
10008922:	0e00      	lsrs	r0, r0, #24
10008924:	70d0      	strb	r0, [r2, #3]
		int_val = (uint32_t)(imu_device.output.q[1] * 1000000);
10008926:	492e      	ldr	r1, [pc, #184]	; (100089e0 <sms_ble_send_characteristic+0x16c>)
10008928:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
1000892a:	47b0      	blx	r6
1000892c:	47a8      	blx	r5
		//DBG_LOG_CONT("q2: %ld ", calc_val);
		send_val[4] = (uint8_t)(int_val & 0xff);
1000892e:	466b      	mov	r3, sp
10008930:	7118      	strb	r0, [r3, #4]
		send_val[5] = (uint8_t)((int_val >> 8) & 0xff);
10008932:	0a03      	lsrs	r3, r0, #8
10008934:	466a      	mov	r2, sp
10008936:	7153      	strb	r3, [r2, #5]
		send_val[6] = (uint8_t)((int_val >> 16) & 0xff);
10008938:	0c03      	lsrs	r3, r0, #16
1000893a:	7193      	strb	r3, [r2, #6]
		send_val[7] = (uint8_t)((int_val >> 24) & 0xff);
1000893c:	0e00      	lsrs	r0, r0, #24
1000893e:	71d0      	strb	r0, [r2, #7]
		int_val = (uint32_t)(imu_device.output.q[2] * 1000000);
10008940:	4927      	ldr	r1, [pc, #156]	; (100089e0 <sms_ble_send_characteristic+0x16c>)
10008942:	6f20      	ldr	r0, [r4, #112]	; 0x70
10008944:	47b0      	blx	r6
10008946:	47a8      	blx	r5
		//DBG_LOG_CONT("q3: %ld ", calc_val);
		send_val[8] = (uint8_t)(int_val & 0xff);
10008948:	466b      	mov	r3, sp
1000894a:	7218      	strb	r0, [r3, #8]
		send_val[9] = (uint8_t)((int_val >> 8) & 0xff);
1000894c:	0a03      	lsrs	r3, r0, #8
1000894e:	466a      	mov	r2, sp
10008950:	7253      	strb	r3, [r2, #9]
		send_val[10] = (uint8_t)((int_val >> 16) & 0xff);
10008952:	0c03      	lsrs	r3, r0, #16
10008954:	7293      	strb	r3, [r2, #10]
		send_val[11] = (uint8_t)((int_val >> 24) & 0xff);
10008956:	0e00      	lsrs	r0, r0, #24
10008958:	72d0      	strb	r0, [r2, #11]
		int_val = (uint32_t)(imu_device.output.q[3] * 1000000);
1000895a:	4921      	ldr	r1, [pc, #132]	; (100089e0 <sms_ble_send_characteristic+0x16c>)
1000895c:	6f60      	ldr	r0, [r4, #116]	; 0x74
1000895e:	47b0      	blx	r6
10008960:	47a8      	blx	r5
		//DBG_LOG_CONT("q4: %ld ", calc_val);
		send_val[12] = (uint8_t)(int_val & 0xff);
10008962:	466b      	mov	r3, sp
10008964:	7318      	strb	r0, [r3, #12]
		send_val[13] = (uint8_t)((int_val >> 8) & 0xff);
10008966:	0a03      	lsrs	r3, r0, #8
10008968:	466a      	mov	r2, sp
1000896a:	7353      	strb	r3, [r2, #13]
		send_val[14] = (uint8_t)((int_val >> 16) & 0xff);
1000896c:	0c03      	lsrs	r3, r0, #16
1000896e:	7393      	strb	r3, [r2, #14]
		send_val[15] = (uint8_t)((int_val >> 24) & 0xff);
10008970:	0e00      	lsrs	r0, r0, #24
10008972:	73d0      	strb	r0, [r2, #15]
		val_handle = imu_device.service_handler.serv_chars.char_val_handle;
10008974:	239c      	movs	r3, #156	; 0x9c
10008976:	5ae5      	ldrh	r5, [r4, r3]
		length = BLE_CHAR_SIZE_MPU;
10008978:	2210      	movs	r2, #16
		

		break;
1000897a:	e001      	b.n	10008980 <sms_ble_send_characteristic+0x10c>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
	uint8_t length = 0;
1000897c:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
	at_ble_status_t status = AT_BLE_SUCCESS;
	at_ble_handle_t val_handle = 0;
1000897e:	2500      	movs	r5, #0
	
	//DBG_LOG("Sending: ");
	//for(int i = 0; i < length; i += 4) {
	//DBG_LOG_CONT("0x%02x%02x%02x%02x ", send_val[i], send_val[i+1], send_val[i+2], send_val[i+3]);
	//}
	status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
10008980:	b292      	uxth	r2, r2
10008982:	4669      	mov	r1, sp
10008984:	0028      	movs	r0, r5
10008986:	4b18      	ldr	r3, [pc, #96]	; (100089e8 <sms_ble_send_characteristic+0x174>)
10008988:	4798      	blx	r3
1000898a:	1e04      	subs	r4, r0, #0
	if(status == AT_BLE_SUCCESS) {
1000898c:	d116      	bne.n	100089bc <sms_ble_send_characteristic+0x148>
		//#   if SMS_SENDING_WITH_ACK == true
		//sms_ble_ind_retry = 0;
		//status = at_ble_indication_send(sms_connection_handle, val_handle);
		//#   else
		status = at_ble_notification_send(sms_connection_handle, val_handle);
1000898e:	4b17      	ldr	r3, [pc, #92]	; (100089ec <sms_ble_send_characteristic+0x178>)
10008990:	8818      	ldrh	r0, [r3, #0]
10008992:	0029      	movs	r1, r5
10008994:	4b16      	ldr	r3, [pc, #88]	; (100089f0 <sms_ble_send_characteristic+0x17c>)
10008996:	4798      	blx	r3
10008998:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
1000899a:	d10b      	bne.n	100089b4 <sms_ble_send_characteristic+0x140>
			ble_instance.sending_queue++;
1000899c:	4a15      	ldr	r2, [pc, #84]	; (100089f4 <sms_ble_send_characteristic+0x180>)
1000899e:	7853      	ldrb	r3, [r2, #1]
100089a0:	3301      	adds	r3, #1
100089a2:	b2db      	uxtb	r3, r3
100089a4:	7053      	strb	r3, [r2, #1]
			ble_instance.send_cnt++;
100089a6:	88d3      	ldrh	r3, [r2, #6]
100089a8:	3301      	adds	r3, #1
100089aa:	80d3      	strh	r3, [r2, #6]
			//DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
			//DBG_LOG("T/O: 20ms");
			sms_ble_timeout = BLE_APP_TIMEOUT_NOTIFY;
100089ac:	2202      	movs	r2, #2
100089ae:	4b12      	ldr	r3, [pc, #72]	; (100089f8 <sms_ble_send_characteristic+0x184>)
100089b0:	601a      	str	r2, [r3, #0]
100089b2:	e009      	b.n	100089c8 <sms_ble_send_characteristic+0x154>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
100089b4:	4811      	ldr	r0, [pc, #68]	; (100089fc <sms_ble_send_characteristic+0x188>)
100089b6:	4b12      	ldr	r3, [pc, #72]	; (10008a00 <sms_ble_send_characteristic+0x18c>)
100089b8:	4798      	blx	r3
100089ba:	e005      	b.n	100089c8 <sms_ble_send_characteristic+0x154>
		//DBG_LOG_DEV(" NOT gone? ");
		//#pragma TBD: handle sending error...
		//}
	}
	else {
		DBG_LOG_DEV(" NOT set? ");
100089bc:	4811      	ldr	r0, [pc, #68]	; (10008a04 <sms_ble_send_characteristic+0x190>)
100089be:	4b12      	ldr	r3, [pc, #72]	; (10008a08 <sms_ble_send_characteristic+0x194>)
100089c0:	4798      	blx	r3
100089c2:	4812      	ldr	r0, [pc, #72]	; (10008a0c <sms_ble_send_characteristic+0x198>)
100089c4:	4b0e      	ldr	r3, [pc, #56]	; (10008a00 <sms_ble_send_characteristic+0x18c>)
100089c6:	4798      	blx	r3
	}
	return status;
}
100089c8:	0020      	movs	r0, r4
100089ca:	b004      	add	sp, #16
100089cc:	bd70      	pop	{r4, r5, r6, pc}
100089ce:	46c0      	nop			; (mov r8, r8)
100089d0:	10019f48 	.word	0x10019f48
100089d4:	10019fcc 	.word	0x10019fcc
100089d8:	1001a080 	.word	0x1001a080
100089dc:	10013235 	.word	0x10013235
100089e0:	49742400 	.word	0x49742400
100089e4:	10012e35 	.word	0x10012e35
100089e8:	1000f891 	.word	0x1000f891
100089ec:	10019f44 	.word	0x10019f44
100089f0:	1000fa31 	.word	0x1000fa31
100089f4:	10019f3c 	.word	0x10019f3c
100089f8:	10019f34 	.word	0x10019f34
100089fc:	10016c2c 	.word	0x10016c2c
10008a00:	10015875 	.word	0x10015875
10008a04:	100168d4 	.word	0x100168d4
10008a08:	10015995 	.word	0x10015995
10008a0c:	10016c44 	.word	0x10016c44

10008a10 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008a10:	b510      	push	{r4, lr}
10008a12:	b082      	sub	sp, #8
	//DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
10008a14:	0001      	movs	r1, r0
10008a16:	3112      	adds	r1, #18
10008a18:	2301      	movs	r3, #1
10008a1a:	9301      	str	r3, [sp, #4]
10008a1c:	0003      	movs	r3, r0
10008a1e:	3314      	adds	r3, #20
10008a20:	9300      	str	r3, [sp, #0]
10008a22:	2300      	movs	r3, #0
10008a24:	2200      	movs	r2, #0
10008a26:	4c02      	ldr	r4, [pc, #8]	; (10008a30 <sms_ble_primary_service_define+0x20>)
10008a28:	47a0      	blx	r4
}
10008a2a:	b002      	add	sp, #8
10008a2c:	bd10      	pop	{r4, pc}
10008a2e:	46c0      	nop			; (mov r8, r8)
10008a30:	1000f871 	.word	0x1000f871

10008a34 <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
10008a34:	b5f0      	push	{r4, r5, r6, r7, lr}
10008a36:	464f      	mov	r7, r9
10008a38:	4646      	mov	r6, r8
10008a3a:	b4c0      	push	{r6, r7}
10008a3c:	b083      	sub	sp, #12
10008a3e:	4694      	mov	ip, r2
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
10008a40:	2801      	cmp	r0, #1
10008a42:	d010      	beq.n	10008a66 <sms_ble_service_init+0x32>
10008a44:	2800      	cmp	r0, #0
10008a46:	d002      	beq.n	10008a4e <sms_ble_service_init+0x1a>
10008a48:	2802      	cmp	r0, #2
10008a4a:	d019      	beq.n	10008a80 <sms_ble_service_init+0x4c>
10008a4c:	e025      	b.n	10008a9a <sms_ble_service_init+0x66>
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
10008a4e:	23bb      	movs	r3, #187	; 0xbb
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
10008a50:	2450      	movs	r4, #80	; 0x50
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
10008a52:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
10008a54:	26be      	movs	r6, #190	; 0xbe
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
10008a56:	275a      	movs	r7, #90	; 0x5a
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
10008a58:	2057      	movs	r0, #87	; 0x57
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
		uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
10008a5a:	221c      	movs	r2, #28
10008a5c:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
10008a5e:	3a1b      	subs	r2, #27
10008a60:	9201      	str	r2, [sp, #4]
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
	uint8_t char_size = 0;
	switch(type) {
		case BLE_SERV_BUTTON:
		handle = 1;
10008a62:	4691      	mov	r9, r2
10008a64:	e023      	b.n	10008aae <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
10008a66:	23ee      	movs	r3, #238	; 0xee
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
10008a68:	2450      	movs	r4, #80	; 0x50
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
10008a6a:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
10008a6c:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
10008a6e:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
10008a70:	2057      	movs	r0, #87	; 0x57
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
		uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
10008a72:	221c      	movs	r2, #28
10008a74:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
10008a76:	3a14      	subs	r2, #20
10008a78:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
		char_size = 1;
		break;
		
		case BLE_SERV_PRESSURE:
		handle = 2;
10008a7a:	3a06      	subs	r2, #6
10008a7c:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
10008a7e:	e016      	b.n	10008aae <sms_ble_service_init+0x7a>
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
		uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
10008a80:	2311      	movs	r3, #17
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
		uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
10008a82:	2450      	movs	r4, #80	; 0x50
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
		uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
10008a84:	2553      	movs	r5, #83	; 0x53
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
		uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
10008a86:	26be      	movs	r6, #190	; 0xbe
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
		uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
10008a88:	275a      	movs	r7, #90	; 0x5a
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
		uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
10008a8a:	2057      	movs	r0, #87	; 0x57
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
		uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
10008a8c:	221c      	movs	r2, #28
10008a8e:	4690      	mov	r8, r2
		uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
10008a90:	3a08      	subs	r2, #8
10008a92:	9201      	str	r2, [sp, #4]
		uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
		char_size = 8;
		break;
		
		case BLE_SERV_MPU:
		handle = 3;
10008a94:	3a11      	subs	r2, #17
10008a96:	4691      	mov	r9, r2
		uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
		uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
		uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
		uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
		char_size = 20;
		break;
10008a98:	e009      	b.n	10008aae <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
	uint8_t uuid[16] = {0};
10008a9a:	2300      	movs	r3, #0
10008a9c:	2400      	movs	r4, #0
10008a9e:	2500      	movs	r5, #0
10008aa0:	2600      	movs	r6, #0
10008aa2:	2700      	movs	r7, #0
10008aa4:	2000      	movs	r0, #0
10008aa6:	2200      	movs	r2, #0
10008aa8:	4690      	mov	r8, r2
	uint8_t char_size = 0;
10008aaa:	9201      	str	r2, [sp, #4]
	return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
	at_ble_handle_t handle = 0;
10008aac:	4691      	mov	r9, r2
		
		default:
		break;
	}
	//SMS button service characteristic
	service->serv_handle = handle;
10008aae:	464a      	mov	r2, r9
10008ab0:	824a      	strh	r2, [r1, #18]
	service->serv_uuid.type = AT_BLE_UUID_128;
10008ab2:	2202      	movs	r2, #2
10008ab4:	700a      	strb	r2, [r1, #0]
	service->serv_uuid.uuid[0] = uuid[0];
10008ab6:	4642      	mov	r2, r8
10008ab8:	704a      	strb	r2, [r1, #1]
	service->serv_uuid.uuid[1] = uuid[1];
10008aba:	7088      	strb	r0, [r1, #2]
	service->serv_uuid.uuid[2] = uuid[2];
10008abc:	70cf      	strb	r7, [r1, #3]
	service->serv_uuid.uuid[3] = uuid[3];
10008abe:	710e      	strb	r6, [r1, #4]
	service->serv_uuid.uuid[4] = uuid[4];
10008ac0:	714d      	strb	r5, [r1, #5]
	service->serv_uuid.uuid[5] = uuid[5];
10008ac2:	718c      	strb	r4, [r1, #6]
	service->serv_uuid.uuid[6] = uuid[6];
10008ac4:	71cb      	strb	r3, [r1, #7]
	service->serv_uuid.uuid[7] = uuid[7];
10008ac6:	720b      	strb	r3, [r1, #8]
	service->serv_uuid.uuid[8] = uuid[8];
10008ac8:	2300      	movs	r3, #0
10008aca:	724b      	strb	r3, [r1, #9]
	service->serv_uuid.uuid[9] = uuid[9];
10008acc:	728b      	strb	r3, [r1, #10]
	service->serv_uuid.uuid[10] = uuid[10];
10008ace:	72cb      	strb	r3, [r1, #11]
	service->serv_uuid.uuid[11] = uuid[11];
10008ad0:	730b      	strb	r3, [r1, #12]
	service->serv_uuid.uuid[12] = uuid[12];
10008ad2:	734b      	strb	r3, [r1, #13]
	service->serv_uuid.uuid[13] = uuid[13];
10008ad4:	738b      	strb	r3, [r1, #14]
	service->serv_uuid.uuid[14] = uuid[14];
10008ad6:	73cb      	strb	r3, [r1, #15]
	service->serv_uuid.uuid[15] = uuid[15];
10008ad8:	740b      	strb	r3, [r1, #16]
	
	#   if SMS_SENDING_WITH_ACK == true
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
	#   else
	service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008ada:	2412      	movs	r4, #18
10008adc:	850c      	strh	r4, [r1, #40]	; 0x28
	#   endif
	service->serv_chars.init_value = value; // value
10008ade:	4662      	mov	r2, ip
10008ae0:	62ca      	str	r2, [r1, #44]	; 0x2c
	service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008ae2:	466a      	mov	r2, sp
10008ae4:	8892      	ldrh	r2, [r2, #4]
10008ae6:	860a      	strh	r2, [r1, #48]	; 0x30
	service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008ae8:	864a      	strh	r2, [r1, #50]	; 0x32
	service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008aea:	2011      	movs	r0, #17
10008aec:	2234      	movs	r2, #52	; 0x34
10008aee:	5488      	strb	r0, [r1, r2]
	service->serv_chars.user_desc = NULL; //user defined name
10008af0:	638b      	str	r3, [r1, #56]	; 0x38
	service->serv_chars.user_desc_len = 0;
10008af2:	2200      	movs	r2, #0
10008af4:	878b      	strh	r3, [r1, #60]	; 0x3c
	service->serv_chars.user_desc_max_len = 0;
10008af6:	87cb      	strh	r3, [r1, #62]	; 0x3e
	service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008af8:	3033      	adds	r0, #51	; 0x33
10008afa:	540a      	strb	r2, [r1, r0]
	service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008afc:	3001      	adds	r0, #1
10008afe:	540a      	strb	r2, [r1, r0]
	service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008b00:	3001      	adds	r0, #1
10008b02:	540a      	strb	r2, [r1, r0]
	service->serv_chars.user_desc_handle = 0; // user description handles
10008b04:	2248      	movs	r2, #72	; 0x48
10008b06:	528b      	strh	r3, [r1, r2]
	service->serv_chars.client_config_handle = 0; // client config handles
10008b08:	3202      	adds	r2, #2
10008b0a:	528b      	strh	r3, [r1, r2]
	service->serv_chars.server_config_handle = 0; // server config handles
10008b0c:	3202      	adds	r2, #2
10008b0e:	528b      	strh	r3, [r1, r2]
	
	service->serv_chars.presentation_format = NULL; //presentation format
10008b10:	640b      	str	r3, [r1, #64]	; 0x40
10008b12:	b003      	add	sp, #12
10008b14:	bc0c      	pop	{r2, r3}
10008b16:	4690      	mov	r8, r2
10008b18:	4699      	mov	r9, r3
10008b1a:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008b1c <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008b1c:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008b1e:	4b05      	ldr	r3, [pc, #20]	; (10008b34 <sms_button_bt0_callback+0x18>)
10008b20:	2201      	movs	r2, #1
10008b22:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008b24:	7858      	ldrb	r0, [r3, #1]
10008b26:	2300      	movs	r3, #0
10008b28:	2200      	movs	r2, #0
10008b2a:	2102      	movs	r1, #2
10008b2c:	4c02      	ldr	r4, [pc, #8]	; (10008b38 <sms_button_bt0_callback+0x1c>)
10008b2e:	47a0      	blx	r4
}
10008b30:	bd10      	pop	{r4, pc}
10008b32:	46c0      	nop			; (mov r8, r8)
10008b34:	10019f48 	.word	0x10019f48
10008b38:	1000dc09 	.word	0x1000dc09

10008b3c <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008b3c:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008b3e:	4b05      	ldr	r3, [pc, #20]	; (10008b54 <sms_button_bt1_callback+0x18>)
10008b40:	2201      	movs	r2, #1
10008b42:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008b44:	79d8      	ldrb	r0, [r3, #7]
10008b46:	2300      	movs	r3, #0
10008b48:	2200      	movs	r2, #0
10008b4a:	2102      	movs	r1, #2
10008b4c:	4c02      	ldr	r4, [pc, #8]	; (10008b58 <sms_button_bt1_callback+0x1c>)
10008b4e:	47a0      	blx	r4
}
10008b50:	bd10      	pop	{r4, pc}
10008b52:	46c0      	nop			; (mov r8, r8)
10008b54:	10019f48 	.word	0x10019f48
10008b58:	1000dc09 	.word	0x1000dc09

10008b5c <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008b5c:	4b08      	ldr	r3, [pc, #32]	; (10008b80 <sms_button_init_variables+0x24>)
10008b5e:	2200      	movs	r2, #0
10008b60:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008b62:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008b64:	211f      	movs	r1, #31
10008b66:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008b68:	391e      	subs	r1, #30
10008b6a:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008b6c:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008b6e:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008b70:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008b72:	201d      	movs	r0, #29
10008b74:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008b76:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008b78:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008b7a:	72da      	strb	r2, [r3, #11]
}
10008b7c:	4770      	bx	lr
10008b7e:	46c0      	nop			; (mov r8, r8)
10008b80:	10019f48 	.word	0x10019f48

10008b84 <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008b84:	b510      	push	{r4, lr}
10008b86:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b88:	ac01      	add	r4, sp, #4
10008b8a:	0020      	movs	r0, r4
10008b8c:	4b20      	ldr	r3, [pc, #128]	; (10008c10 <sms_button_gpio_init+0x8c>)
10008b8e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b90:	2300      	movs	r3, #0
10008b92:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b94:	3302      	adds	r3, #2
10008b96:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b98:	3b01      	subs	r3, #1
10008b9a:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b9c:	4b1d      	ldr	r3, [pc, #116]	; (10008c14 <sms_button_gpio_init+0x90>)
10008b9e:	7858      	ldrb	r0, [r3, #1]
10008ba0:	0021      	movs	r1, r4
10008ba2:	4b1d      	ldr	r3, [pc, #116]	; (10008c18 <sms_button_gpio_init+0x94>)
10008ba4:	4798      	blx	r3
10008ba6:	2800      	cmp	r0, #0
10008ba8:	d005      	beq.n	10008bb6 <sms_button_gpio_init+0x32>
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
10008baa:	481c      	ldr	r0, [pc, #112]	; (10008c1c <sms_button_gpio_init+0x98>)
10008bac:	4b1c      	ldr	r3, [pc, #112]	; (10008c20 <sms_button_gpio_init+0x9c>)
10008bae:	4798      	blx	r3
10008bb0:	481c      	ldr	r0, [pc, #112]	; (10008c24 <sms_button_gpio_init+0xa0>)
10008bb2:	4b1d      	ldr	r3, [pc, #116]	; (10008c28 <sms_button_gpio_init+0xa4>)
10008bb4:	4798      	blx	r3
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008bb6:	ac01      	add	r4, sp, #4
10008bb8:	0020      	movs	r0, r4
10008bba:	4b15      	ldr	r3, [pc, #84]	; (10008c10 <sms_button_gpio_init+0x8c>)
10008bbc:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008bbe:	2300      	movs	r3, #0
10008bc0:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008bc2:	3302      	adds	r3, #2
10008bc4:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008bc6:	3b01      	subs	r3, #1
10008bc8:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008bca:	4b12      	ldr	r3, [pc, #72]	; (10008c14 <sms_button_gpio_init+0x90>)
10008bcc:	79d8      	ldrb	r0, [r3, #7]
10008bce:	0021      	movs	r1, r4
10008bd0:	4b11      	ldr	r3, [pc, #68]	; (10008c18 <sms_button_gpio_init+0x94>)
10008bd2:	4798      	blx	r3
10008bd4:	2800      	cmp	r0, #0
10008bd6:	d005      	beq.n	10008be4 <sms_button_gpio_init+0x60>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008bd8:	4810      	ldr	r0, [pc, #64]	; (10008c1c <sms_button_gpio_init+0x98>)
10008bda:	4b11      	ldr	r3, [pc, #68]	; (10008c20 <sms_button_gpio_init+0x9c>)
10008bdc:	4798      	blx	r3
10008bde:	4813      	ldr	r0, [pc, #76]	; (10008c2c <sms_button_gpio_init+0xa8>)
10008be0:	4b11      	ldr	r3, [pc, #68]	; (10008c28 <sms_button_gpio_init+0xa4>)
10008be2:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008be4:	ac01      	add	r4, sp, #4
10008be6:	0020      	movs	r0, r4
10008be8:	4b09      	ldr	r3, [pc, #36]	; (10008c10 <sms_button_gpio_init+0x8c>)
10008bea:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008bec:	2300      	movs	r3, #0
10008bee:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008bf0:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008bf2:	0021      	movs	r1, r4
10008bf4:	2017      	movs	r0, #23
10008bf6:	4b08      	ldr	r3, [pc, #32]	; (10008c18 <sms_button_gpio_init+0x94>)
10008bf8:	4798      	blx	r3
10008bfa:	2800      	cmp	r0, #0
10008bfc:	d005      	beq.n	10008c0a <sms_button_gpio_init+0x86>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008bfe:	4807      	ldr	r0, [pc, #28]	; (10008c1c <sms_button_gpio_init+0x98>)
10008c00:	4b07      	ldr	r3, [pc, #28]	; (10008c20 <sms_button_gpio_init+0x9c>)
10008c02:	4798      	blx	r3
10008c04:	480a      	ldr	r0, [pc, #40]	; (10008c30 <sms_button_gpio_init+0xac>)
10008c06:	4b08      	ldr	r3, [pc, #32]	; (10008c28 <sms_button_gpio_init+0xa4>)
10008c08:	4798      	blx	r3
    }
}
10008c0a:	b002      	add	sp, #8
10008c0c:	bd10      	pop	{r4, pc}
10008c0e:	46c0      	nop			; (mov r8, r8)
10008c10:	1000a985 	.word	0x1000a985
10008c14:	10019f48 	.word	0x10019f48
10008c18:	1000a995 	.word	0x1000a995
10008c1c:	100168d4 	.word	0x100168d4
10008c20:	10015995 	.word	0x10015995
10008c24:	10016cc4 	.word	0x10016cc4
10008c28:	10015875 	.word	0x10015875
10008c2c:	10016cfc 	.word	0x10016cfc
10008c30:	10016d34 	.word	0x10016d34

10008c34 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008c34:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008c36:	4d05      	ldr	r5, [pc, #20]	; (10008c4c <sms_button_register_callbacks+0x18>)
10008c38:	7868      	ldrb	r0, [r5, #1]
10008c3a:	2202      	movs	r2, #2
10008c3c:	4904      	ldr	r1, [pc, #16]	; (10008c50 <sms_button_register_callbacks+0x1c>)
10008c3e:	4c05      	ldr	r4, [pc, #20]	; (10008c54 <sms_button_register_callbacks+0x20>)
10008c40:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008c42:	79e8      	ldrb	r0, [r5, #7]
10008c44:	2202      	movs	r2, #2
10008c46:	4904      	ldr	r1, [pc, #16]	; (10008c58 <sms_button_register_callbacks+0x24>)
10008c48:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008c4a:	bd70      	pop	{r4, r5, r6, pc}
10008c4c:	10019f48 	.word	0x10019f48
10008c50:	10008b1d 	.word	0x10008b1d
10008c54:	1000adc5 	.word	0x1000adc5
10008c58:	10008b3d 	.word	0x10008b3d

10008c5c <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008c5c:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008c5e:	201f      	movs	r0, #31
10008c60:	4c08      	ldr	r4, [pc, #32]	; (10008c84 <sms_button_get_state+0x28>)
10008c62:	47a0      	blx	r4
10008c64:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008c66:	201d      	movs	r0, #29
10008c68:	47a0      	blx	r4
    //DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008c6a:	2d00      	cmp	r5, #0
10008c6c:	d004      	beq.n	10008c78 <sms_button_get_state+0x1c>
10008c6e:	2303      	movs	r3, #3
10008c70:	2800      	cmp	r0, #0
10008c72:	d104      	bne.n	10008c7e <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008c74:	3b02      	subs	r3, #2
10008c76:	e002      	b.n	10008c7e <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008c78:	1e43      	subs	r3, r0, #1
10008c7a:	4198      	sbcs	r0, r3
10008c7c:	0043      	lsls	r3, r0, #1
}
10008c7e:	0018      	movs	r0, r3
10008c80:	bd70      	pop	{r4, r5, r6, pc}
10008c82:	46c0      	nop			; (mov r8, r8)
10008c84:	1000ab4d 	.word	0x1000ab4d

10008c88 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008c88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10008c8a:	0005      	movs	r5, r0
	bool wait_success = true;
    button_instance.previous_state = button_instance.current_state;
10008c8c:	4c49      	ldr	r4, [pc, #292]	; (10008db4 <sms_button_fn+0x12c>)
10008c8e:	7b63      	ldrb	r3, [r4, #13]
10008c90:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008c92:	4b49      	ldr	r3, [pc, #292]	; (10008db8 <sms_button_fn+0x130>)
10008c94:	4798      	blx	r3
10008c96:	7360      	strb	r0, [r4, #13]
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008c98:	2d00      	cmp	r5, #0
10008c9a:	d103      	bne.n	10008ca4 <sms_button_fn+0x1c>
10008c9c:	4847      	ldr	r0, [pc, #284]	; (10008dbc <sms_button_fn+0x134>)
10008c9e:	4b48      	ldr	r3, [pc, #288]	; (10008dc0 <sms_button_fn+0x138>)
10008ca0:	4798      	blx	r3
10008ca2:	e004      	b.n	10008cae <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008ca4:	2d01      	cmp	r5, #1
10008ca6:	d16e      	bne.n	10008d86 <sms_button_fn+0xfe>
10008ca8:	4846      	ldr	r0, [pc, #280]	; (10008dc4 <sms_button_fn+0x13c>)
10008caa:	4b45      	ldr	r3, [pc, #276]	; (10008dc0 <sms_button_fn+0x138>)
10008cac:	4798      	blx	r3
    else return -1;
#endif
    
    switch(button_instance.current_state) {
10008cae:	4b41      	ldr	r3, [pc, #260]	; (10008db4 <sms_button_fn+0x12c>)
10008cb0:	7b5b      	ldrb	r3, [r3, #13]
10008cb2:	b2da      	uxtb	r2, r3
10008cb4:	2a02      	cmp	r2, #2
10008cb6:	d802      	bhi.n	10008cbe <sms_button_fn+0x36>
10008cb8:	2b00      	cmp	r3, #0
10008cba:	d059      	beq.n	10008d70 <sms_button_fn+0xe8>
10008cbc:	e002      	b.n	10008cc4 <sms_button_fn+0x3c>
10008cbe:	2b03      	cmp	r3, #3
10008cc0:	d02f      	beq.n	10008d22 <sms_button_fn+0x9a>
10008cc2:	e063      	b.n	10008d8c <sms_button_fn+0x104>
        // --- current state ---
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008cc4:	4b40      	ldr	r3, [pc, #256]	; (10008dc8 <sms_button_fn+0x140>)
10008cc6:	781b      	ldrb	r3, [r3, #0]
10008cc8:	b2db      	uxtb	r3, r3
10008cca:	2b00      	cmp	r3, #0
10008ccc:	d003      	beq.n	10008cd6 <sms_button_fn+0x4e>
10008cce:	3b22      	subs	r3, #34	; 0x22
10008cd0:	2b01      	cmp	r3, #1
10008cd2:	d81d      	bhi.n	10008d10 <sms_button_fn+0x88>
10008cd4:	e017      	b.n	10008d06 <sms_button_fn+0x7e>
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
10008cd6:	483d      	ldr	r0, [pc, #244]	; (10008dcc <sms_button_fn+0x144>)
10008cd8:	4b3d      	ldr	r3, [pc, #244]	; (10008dd0 <sms_button_fn+0x148>)
10008cda:	4798      	blx	r3
10008cdc:	483d      	ldr	r0, [pc, #244]	; (10008dd4 <sms_button_fn+0x14c>)
10008cde:	4b3e      	ldr	r3, [pc, #248]	; (10008dd8 <sms_button_fn+0x150>)
10008ce0:	4798      	blx	r3
10008ce2:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008ce4:	4f3d      	ldr	r7, [pc, #244]	; (10008ddc <sms_button_fn+0x154>)
				if(sms_button_get_state() != button_instance.current_state) {
10008ce6:	4e34      	ldr	r6, [pc, #208]	; (10008db8 <sms_button_fn+0x130>)
10008ce8:	4d32      	ldr	r5, [pc, #200]	; (10008db4 <sms_button_fn+0x12c>)
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008cea:	20fa      	movs	r0, #250	; 0xfa
10008cec:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008cee:	47b0      	blx	r6
10008cf0:	7b6b      	ldrb	r3, [r5, #13]
10008cf2:	4283      	cmp	r3, r0
10008cf4:	d14c      	bne.n	10008d90 <sms_button_fn+0x108>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
10008cf6:	483a      	ldr	r0, [pc, #232]	; (10008de0 <sms_button_fn+0x158>)
10008cf8:	4b37      	ldr	r3, [pc, #220]	; (10008dd8 <sms_button_fn+0x150>)
10008cfa:	4798      	blx	r3
10008cfc:	3c01      	subs	r4, #1
10008cfe:	b2e4      	uxtb	r4, r4
        case BUTTON_STATE_B0:
		case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
            case BLE_STATE_POWEROFF: // start-up command?
			DBG_LOG_DEV("[sms_button_fn]\t\t\tWaking up ");
			for(uint8_t i = 0; i < 12; i++) {
10008d00:	2c00      	cmp	r4, #0
10008d02:	d1f2      	bne.n	10008cea <sms_button_fn+0x62>
10008d04:	e048      	b.n	10008d98 <sms_button_fn+0x110>
			}
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008d06:	2000      	movs	r0, #0
10008d08:	4b36      	ldr	r3, [pc, #216]	; (10008de4 <sms_button_fn+0x15c>)
10008d0a:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d0c:	2000      	movs	r0, #0
            break;
            
            case BLE_STATE_PAIRED:
            case BLE_STATE_INDICATING:
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008d0e:	e050      	b.n	10008db2 <sms_button_fn+0x12a>
            
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
10008d10:	482e      	ldr	r0, [pc, #184]	; (10008dcc <sms_button_fn+0x144>)
10008d12:	4b2f      	ldr	r3, [pc, #188]	; (10008dd0 <sms_button_fn+0x148>)
10008d14:	4798      	blx	r3
10008d16:	4834      	ldr	r0, [pc, #208]	; (10008de8 <sms_button_fn+0x160>)
10008d18:	4b2f      	ldr	r3, [pc, #188]	; (10008dd8 <sms_button_fn+0x150>)
10008d1a:	4798      	blx	r3
            return -1;
10008d1c:	2001      	movs	r0, #1
10008d1e:	4240      	negs	r0, r0
10008d20:	e047      	b.n	10008db2 <sms_button_fn+0x12a>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008d22:	4b29      	ldr	r3, [pc, #164]	; (10008dc8 <sms_button_fn+0x140>)
10008d24:	781b      	ldrb	r3, [r3, #0]
10008d26:	2b00      	cmp	r3, #0
10008d28:	d10a      	bne.n	10008d40 <sms_button_fn+0xb8>
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
10008d2a:	4828      	ldr	r0, [pc, #160]	; (10008dcc <sms_button_fn+0x144>)
10008d2c:	4b28      	ldr	r3, [pc, #160]	; (10008dd0 <sms_button_fn+0x148>)
10008d2e:	4798      	blx	r3
10008d30:	482e      	ldr	r0, [pc, #184]	; (10008dec <sms_button_fn+0x164>)
10008d32:	4b29      	ldr	r3, [pc, #164]	; (10008dd8 <sms_button_fn+0x150>)
10008d34:	4798      	blx	r3
            ulp_ready = true;
10008d36:	2201      	movs	r2, #1
10008d38:	4b2d      	ldr	r3, [pc, #180]	; (10008df0 <sms_button_fn+0x168>)
10008d3a:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d3c:	2000      	movs	r0, #0
10008d3e:	e038      	b.n	10008db2 <sms_button_fn+0x12a>
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
10008d40:	4822      	ldr	r0, [pc, #136]	; (10008dcc <sms_button_fn+0x144>)
10008d42:	4b23      	ldr	r3, [pc, #140]	; (10008dd0 <sms_button_fn+0x148>)
10008d44:	4798      	blx	r3
10008d46:	482b      	ldr	r0, [pc, #172]	; (10008df4 <sms_button_fn+0x16c>)
10008d48:	4b23      	ldr	r3, [pc, #140]	; (10008dd8 <sms_button_fn+0x150>)
10008d4a:	4798      	blx	r3
10008d4c:	240c      	movs	r4, #12
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008d4e:	4f23      	ldr	r7, [pc, #140]	; (10008ddc <sms_button_fn+0x154>)
				if(sms_button_get_state() != button_instance.current_state) {
10008d50:	4e19      	ldr	r6, [pc, #100]	; (10008db8 <sms_button_fn+0x130>)
10008d52:	4d18      	ldr	r5, [pc, #96]	; (10008db4 <sms_button_fn+0x12c>)
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
				delay_ms(250);
10008d54:	20fa      	movs	r0, #250	; 0xfa
10008d56:	47b8      	blx	r7
				if(sms_button_get_state() != button_instance.current_state) {
10008d58:	47b0      	blx	r6
10008d5a:	7b6b      	ldrb	r3, [r5, #13]
10008d5c:	4283      	cmp	r3, r0
10008d5e:	d119      	bne.n	10008d94 <sms_button_fn+0x10c>
					wait_success = false;
					break;
				}
				DBG_LOG_CONT_DEV(". ");
10008d60:	481f      	ldr	r0, [pc, #124]	; (10008de0 <sms_button_fn+0x158>)
10008d62:	4b1d      	ldr	r3, [pc, #116]	; (10008dd8 <sms_button_fn+0x150>)
10008d64:	4798      	blx	r3
10008d66:	3c01      	subs	r4, #1
10008d68:	b2e4      	uxtb	r4, r4
			DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used state...");
            ulp_ready = true;
        }
        else {
			DBG_LOG_DEV("[sms_button_fn]\t\t\tShutting down ");
			for(uint8_t i = 0; i < 12; i++) {
10008d6a:	2c00      	cmp	r4, #0
10008d6c:	d1f2      	bne.n	10008d54 <sms_button_fn+0xcc>
10008d6e:	e019      	b.n	10008da4 <sms_button_fn+0x11c>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
10008d70:	4816      	ldr	r0, [pc, #88]	; (10008dcc <sms_button_fn+0x144>)
10008d72:	4b17      	ldr	r3, [pc, #92]	; (10008dd0 <sms_button_fn+0x148>)
10008d74:	4798      	blx	r3
10008d76:	4820      	ldr	r0, [pc, #128]	; (10008df8 <sms_button_fn+0x170>)
10008d78:	4b17      	ldr	r3, [pc, #92]	; (10008dd8 <sms_button_fn+0x150>)
10008d7a:	4798      	blx	r3
        ulp_ready = true;
10008d7c:	2201      	movs	r2, #1
10008d7e:	4b1c      	ldr	r3, [pc, #112]	; (10008df0 <sms_button_fn+0x168>)
10008d80:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d82:	2000      	movs	r0, #0
        case BUTTON_STATE_NONE:
		DBG_LOG_DEV("[sms_button_fn]\t\t\tNone");
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008d84:	e015      	b.n	10008db2 <sms_button_fn+0x12a>
    button_instance.current_state = sms_button_get_state();
    
#if defined(DEBUG)
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008d86:	2001      	movs	r0, #1
10008d88:	4240      	negs	r0, r0
10008d8a:	e012      	b.n	10008db2 <sms_button_fn+0x12a>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008d8c:	2000      	movs	r0, #0
10008d8e:	e010      	b.n	10008db2 <sms_button_fn+0x12a>
10008d90:	2000      	movs	r0, #0
10008d92:	e00e      	b.n	10008db2 <sms_button_fn+0x12a>
10008d94:	2000      	movs	r0, #0
10008d96:	e00c      	b.n	10008db2 <sms_button_fn+0x12a>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				if(sms_ble_startup()) return -1;
10008d98:	4b18      	ldr	r3, [pc, #96]	; (10008dfc <sms_button_fn+0x174>)
10008d9a:	4798      	blx	r3
10008d9c:	1e43      	subs	r3, r0, #1
10008d9e:	4198      	sbcs	r0, r3
10008da0:	4240      	negs	r0, r0
10008da2:	e006      	b.n	10008db2 <sms_button_fn+0x12a>
					break;
				}
				DBG_LOG_CONT_DEV(". ");
			}
			if(wait_success) {
				DBG_LOG_DEV("Shut down now!");
10008da4:	4809      	ldr	r0, [pc, #36]	; (10008dcc <sms_button_fn+0x144>)
10008da6:	4b0a      	ldr	r3, [pc, #40]	; (10008dd0 <sms_button_fn+0x148>)
10008da8:	4798      	blx	r3
10008daa:	4815      	ldr	r0, [pc, #84]	; (10008e00 <sms_button_fn+0x178>)
10008dac:	4b0a      	ldr	r3, [pc, #40]	; (10008dd8 <sms_button_fn+0x150>)
10008dae:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008db0:	2000      	movs	r0, #0
}
10008db2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008db4:	10019f48 	.word	0x10019f48
10008db8:	10008c5d 	.word	0x10008c5d
10008dbc:	10016d7c 	.word	0x10016d7c
10008dc0:	10008f31 	.word	0x10008f31
10008dc4:	10016d90 	.word	0x10016d90
10008dc8:	10019f3c 	.word	0x10019f3c
10008dcc:	100168d4 	.word	0x100168d4
10008dd0:	10015995 	.word	0x10015995
10008dd4:	10016da4 	.word	0x10016da4
10008dd8:	10015875 	.word	0x10015875
10008ddc:	1000a309 	.word	0x1000a309
10008de0:	10016dc4 	.word	0x10016dc4
10008de4:	10008875 	.word	0x10008875
10008de8:	10016dc8 	.word	0x10016dc8
10008dec:	10016df0 	.word	0x10016df0
10008df0:	10019f39 	.word	0x10019f39
10008df4:	10016e14 	.word	0x10016e14
10008df8:	10016e38 	.word	0x10016e38
10008dfc:	10008829 	.word	0x10008829
10008e00:	10016e50 	.word	0x10016e50

10008e04 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008e04:	b510      	push	{r4, lr}
10008e06:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008e08:	2800      	cmp	r0, #0
10008e0a:	d104      	bne.n	10008e16 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008e0c:	4b0c      	ldr	r3, [pc, #48]	; (10008e40 <sms_button_toggle_callback+0x3c>)
10008e0e:	7858      	ldrb	r0, [r3, #1]
10008e10:	4b0c      	ldr	r3, [pc, #48]	; (10008e44 <sms_button_toggle_callback+0x40>)
10008e12:	4798      	blx	r3
10008e14:	e005      	b.n	10008e22 <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008e16:	2801      	cmp	r0, #1
10008e18:	d103      	bne.n	10008e22 <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008e1a:	4b09      	ldr	r3, [pc, #36]	; (10008e40 <sms_button_toggle_callback+0x3c>)
10008e1c:	7858      	ldrb	r0, [r3, #1]
10008e1e:	4b0a      	ldr	r3, [pc, #40]	; (10008e48 <sms_button_toggle_callback+0x44>)
10008e20:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008e22:	2c00      	cmp	r4, #0
10008e24:	d104      	bne.n	10008e30 <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008e26:	4b06      	ldr	r3, [pc, #24]	; (10008e40 <sms_button_toggle_callback+0x3c>)
10008e28:	79d8      	ldrb	r0, [r3, #7]
10008e2a:	4b06      	ldr	r3, [pc, #24]	; (10008e44 <sms_button_toggle_callback+0x40>)
10008e2c:	4798      	blx	r3
10008e2e:	e005      	b.n	10008e3c <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008e30:	2c01      	cmp	r4, #1
10008e32:	d103      	bne.n	10008e3c <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008e34:	4b02      	ldr	r3, [pc, #8]	; (10008e40 <sms_button_toggle_callback+0x3c>)
10008e36:	79d8      	ldrb	r0, [r3, #7]
10008e38:	4b03      	ldr	r3, [pc, #12]	; (10008e48 <sms_button_toggle_callback+0x44>)
10008e3a:	4798      	blx	r3
    }
}
10008e3c:	bd10      	pop	{r4, pc}
10008e3e:	46c0      	nop			; (mov r8, r8)
10008e40:	10019f48 	.word	0x10019f48
10008e44:	1000ae95 	.word	0x1000ae95
10008e48:	1000aef1 	.word	0x1000aef1

10008e4c <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008e4c:	b510      	push	{r4, lr}
10008e4e:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008e50:	466b      	mov	r3, sp
10008e52:	1dda      	adds	r2, r3, #7
10008e54:	2300      	movs	r3, #0
10008e56:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008e58:	4c0d      	ldr	r4, [pc, #52]	; (10008e90 <sms_button_define_services+0x44>)
10008e5a:	0021      	movs	r1, r4
10008e5c:	2000      	movs	r0, #0
10008e5e:	4b0d      	ldr	r3, [pc, #52]	; (10008e94 <sms_button_define_services+0x48>)
10008e60:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008e62:	0020      	movs	r0, r4
10008e64:	4b0c      	ldr	r3, [pc, #48]	; (10008e98 <sms_button_define_services+0x4c>)
10008e66:	4798      	blx	r3
10008e68:	1e04      	subs	r4, r0, #0
10008e6a:	d007      	beq.n	10008e7c <sms_button_define_services+0x30>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008e6c:	480b      	ldr	r0, [pc, #44]	; (10008e9c <sms_button_define_services+0x50>)
10008e6e:	4b0c      	ldr	r3, [pc, #48]	; (10008ea0 <sms_button_define_services+0x54>)
10008e70:	4798      	blx	r3
10008e72:	0021      	movs	r1, r4
10008e74:	480b      	ldr	r0, [pc, #44]	; (10008ea4 <sms_button_define_services+0x58>)
10008e76:	4b0c      	ldr	r3, [pc, #48]	; (10008ea8 <sms_button_define_services+0x5c>)
10008e78:	4798      	blx	r3
10008e7a:	e007      	b.n	10008e8c <sms_button_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
10008e7c:	4807      	ldr	r0, [pc, #28]	; (10008e9c <sms_button_define_services+0x50>)
10008e7e:	4b08      	ldr	r3, [pc, #32]	; (10008ea0 <sms_button_define_services+0x54>)
10008e80:	4798      	blx	r3
10008e82:	4b0a      	ldr	r3, [pc, #40]	; (10008eac <sms_button_define_services+0x60>)
10008e84:	8c59      	ldrh	r1, [r3, #34]	; 0x22
10008e86:	480a      	ldr	r0, [pc, #40]	; (10008eb0 <sms_button_define_services+0x64>)
10008e88:	4b07      	ldr	r3, [pc, #28]	; (10008ea8 <sms_button_define_services+0x5c>)
10008e8a:	4798      	blx	r3
    }
10008e8c:	b002      	add	sp, #8
10008e8e:	bd10      	pop	{r4, pc}
10008e90:	10019f58 	.word	0x10019f58
10008e94:	10008a35 	.word	0x10008a35
10008e98:	10008a11 	.word	0x10008a11
10008e9c:	100168d4 	.word	0x100168d4
10008ea0:	10015995 	.word	0x10015995
10008ea4:	10016e60 	.word	0x10016e60
10008ea8:	10015875 	.word	0x10015875
10008eac:	10019f48 	.word	0x10019f48
10008eb0:	10016ea4 	.word	0x10016ea4

10008eb4 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008eb4:	b510      	push	{r4, lr}
10008eb6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008eb8:	ac01      	add	r4, sp, #4
10008eba:	0020      	movs	r0, r4
10008ebc:	4b15      	ldr	r3, [pc, #84]	; (10008f14 <sms_monitor_configure_gpio+0x60>)
10008ebe:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008ec0:	2301      	movs	r3, #1
10008ec2:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008ec4:	0021      	movs	r1, r4
10008ec6:	200e      	movs	r0, #14
10008ec8:	4b13      	ldr	r3, [pc, #76]	; (10008f18 <sms_monitor_configure_gpio+0x64>)
10008eca:	4798      	blx	r3
10008ecc:	2800      	cmp	r0, #0
10008ece:	d005      	beq.n	10008edc <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008ed0:	4812      	ldr	r0, [pc, #72]	; (10008f1c <sms_monitor_configure_gpio+0x68>)
10008ed2:	4b13      	ldr	r3, [pc, #76]	; (10008f20 <sms_monitor_configure_gpio+0x6c>)
10008ed4:	4798      	blx	r3
10008ed6:	4813      	ldr	r0, [pc, #76]	; (10008f24 <sms_monitor_configure_gpio+0x70>)
10008ed8:	4b13      	ldr	r3, [pc, #76]	; (10008f28 <sms_monitor_configure_gpio+0x74>)
10008eda:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008edc:	2100      	movs	r1, #0
10008ede:	200e      	movs	r0, #14
10008ee0:	4b12      	ldr	r3, [pc, #72]	; (10008f2c <sms_monitor_configure_gpio+0x78>)
10008ee2:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008ee4:	ac01      	add	r4, sp, #4
10008ee6:	0020      	movs	r0, r4
10008ee8:	4b0a      	ldr	r3, [pc, #40]	; (10008f14 <sms_monitor_configure_gpio+0x60>)
10008eea:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008eec:	2301      	movs	r3, #1
10008eee:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008ef0:	0021      	movs	r1, r4
10008ef2:	200f      	movs	r0, #15
10008ef4:	4b08      	ldr	r3, [pc, #32]	; (10008f18 <sms_monitor_configure_gpio+0x64>)
10008ef6:	4798      	blx	r3
10008ef8:	2800      	cmp	r0, #0
10008efa:	d005      	beq.n	10008f08 <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008efc:	4807      	ldr	r0, [pc, #28]	; (10008f1c <sms_monitor_configure_gpio+0x68>)
10008efe:	4b08      	ldr	r3, [pc, #32]	; (10008f20 <sms_monitor_configure_gpio+0x6c>)
10008f00:	4798      	blx	r3
10008f02:	4808      	ldr	r0, [pc, #32]	; (10008f24 <sms_monitor_configure_gpio+0x70>)
10008f04:	4b08      	ldr	r3, [pc, #32]	; (10008f28 <sms_monitor_configure_gpio+0x74>)
10008f06:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008f08:	2100      	movs	r1, #0
10008f0a:	200f      	movs	r0, #15
10008f0c:	4b07      	ldr	r3, [pc, #28]	; (10008f2c <sms_monitor_configure_gpio+0x78>)
10008f0e:	4798      	blx	r3
}
10008f10:	b002      	add	sp, #8
10008f12:	bd10      	pop	{r4, pc}
10008f14:	1000a985 	.word	0x1000a985
10008f18:	1000a995 	.word	0x1000a995
10008f1c:	100168d4 	.word	0x100168d4
10008f20:	10015995 	.word	0x10015995
10008f24:	10016eec 	.word	0x10016eec
10008f28:	10015875 	.word	0x10015875
10008f2c:	1000abed 	.word	0x1000abed

10008f30 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
10008f30:	b570      	push	{r4, r5, r6, lr}
10008f32:	b084      	sub	sp, #16
10008f34:	0004      	movs	r4, r0
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008f36:	480c      	ldr	r0, [pc, #48]	; (10008f68 <sms_monitor_get_states+0x38>)
10008f38:	4b0c      	ldr	r3, [pc, #48]	; (10008f6c <sms_monitor_get_states+0x3c>)
10008f3a:	4798      	blx	r3
10008f3c:	4b0c      	ldr	r3, [pc, #48]	; (10008f70 <sms_monitor_get_states+0x40>)
10008f3e:	7819      	ldrb	r1, [r3, #0]
10008f40:	4b0c      	ldr	r3, [pc, #48]	; (10008f74 <sms_monitor_get_states+0x44>)
10008f42:	7818      	ldrb	r0, [r3, #0]
10008f44:	4b0c      	ldr	r3, [pc, #48]	; (10008f78 <sms_monitor_get_states+0x48>)
10008f46:	781d      	ldrb	r5, [r3, #0]
10008f48:	4b0c      	ldr	r3, [pc, #48]	; (10008f7c <sms_monitor_get_states+0x4c>)
10008f4a:	781e      	ldrb	r6, [r3, #0]
10008f4c:	4a0c      	ldr	r2, [pc, #48]	; (10008f80 <sms_monitor_get_states+0x50>)
10008f4e:	7b53      	ldrb	r3, [r2, #13]
10008f50:	7b12      	ldrb	r2, [r2, #12]
10008f52:	9603      	str	r6, [sp, #12]
10008f54:	9502      	str	r5, [sp, #8]
10008f56:	9001      	str	r0, [sp, #4]
10008f58:	9100      	str	r1, [sp, #0]
10008f5a:	0021      	movs	r1, r4
10008f5c:	4809      	ldr	r0, [pc, #36]	; (10008f84 <sms_monitor_get_states+0x54>)
10008f5e:	4c0a      	ldr	r4, [pc, #40]	; (10008f88 <sms_monitor_get_states+0x58>)
10008f60:	47a0      	blx	r4
}
10008f62:	b004      	add	sp, #16
10008f64:	bd70      	pop	{r4, r5, r6, pc}
10008f66:	46c0      	nop			; (mov r8, r8)
10008f68:	100168d4 	.word	0x100168d4
10008f6c:	10015995 	.word	0x10015995
10008f70:	10019f3c 	.word	0x10019f3c
10008f74:	10019f30 	.word	0x10019f30
10008f78:	1001a067 	.word	0x1001a067
10008f7c:	10019f38 	.word	0x10019f38
10008f80:	10019f48 	.word	0x10019f48
10008f84:	10016f0c 	.word	0x10016f0c
10008f88:	10015875 	.word	0x10015875

10008f8c <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008f8c:	b530      	push	{r4, r5, lr}
10008f8e:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008f90:	2010      	movs	r0, #16
10008f92:	4c14      	ldr	r4, [pc, #80]	; (10008fe4 <sms_i2c_master_configure+0x58>)
10008f94:	47a0      	blx	r4
10008f96:	4b14      	ldr	r3, [pc, #80]	; (10008fe8 <sms_i2c_master_configure+0x5c>)
10008f98:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008f9a:	2010      	movs	r0, #16
10008f9c:	47a0      	blx	r4
10008f9e:	4b13      	ldr	r3, [pc, #76]	; (10008fec <sms_i2c_master_configure+0x60>)
10008fa0:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008fa2:	ac01      	add	r4, sp, #4
10008fa4:	0020      	movs	r0, r4
10008fa6:	4b12      	ldr	r3, [pc, #72]	; (10008ff0 <sms_i2c_master_configure+0x64>)
10008fa8:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008faa:	2303      	movs	r3, #3
10008fac:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008fae:	331b      	adds	r3, #27
10008fb0:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008fb2:	3b16      	subs	r3, #22
10008fb4:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008fb6:	3301      	adds	r3, #1
10008fb8:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008fba:	3b07      	subs	r3, #7
10008fbc:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008fbe:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008fc0:	4d0c      	ldr	r5, [pc, #48]	; (10008ff4 <sms_i2c_master_configure+0x68>)
10008fc2:	4c0d      	ldr	r4, [pc, #52]	; (10008ff8 <sms_i2c_master_configure+0x6c>)
10008fc4:	aa01      	add	r2, sp, #4
10008fc6:	490d      	ldr	r1, [pc, #52]	; (10008ffc <sms_i2c_master_configure+0x70>)
10008fc8:	0028      	movs	r0, r5
10008fca:	47a0      	blx	r4
10008fcc:	2800      	cmp	r0, #0
10008fce:	d1f9      	bne.n	10008fc4 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008fd0:	4b08      	ldr	r3, [pc, #32]	; (10008ff4 <sms_i2c_master_configure+0x68>)
10008fd2:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008fd4:	2128      	movs	r1, #40	; 0x28
10008fd6:	5c53      	ldrb	r3, [r2, r1]
10008fd8:	07db      	lsls	r3, r3, #31
10008fda:	d4fc      	bmi.n	10008fd6 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008fdc:	2301      	movs	r3, #1
10008fde:	7513      	strb	r3, [r2, #20]
}
10008fe0:	b007      	add	sp, #28
10008fe2:	bd30      	pop	{r4, r5, pc}
10008fe4:	100156e9 	.word	0x100156e9
10008fe8:	1001a06c 	.word	0x1001a06c
10008fec:	1001a050 	.word	0x1001a050
10008ff0:	10008305 	.word	0x10008305
10008ff4:	1001a05c 	.word	0x1001a05c
10008ff8:	1000831d 	.word	0x1000831d
10008ffc:	40003000 	.word	0x40003000

10009000 <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10009000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009002:	4c12      	ldr	r4, [pc, #72]	; (1000904c <sms_i2c_master_write+0x4c>)
10009004:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10009006:	1c50      	adds	r0, r2, #1
10009008:	b2c0      	uxtb	r0, r0
1000900a:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
1000900c:	6860      	ldr	r0, [r4, #4]
1000900e:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10009010:	2a00      	cmp	r2, #0
10009012:	d00e      	beq.n	10009032 <sms_i2c_master_write+0x32>
10009014:	2000      	movs	r0, #0
10009016:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10009018:	5c18      	ldrb	r0, [r3, r0]
1000901a:	6865      	ldr	r5, [r4, #4]
1000901c:	5468      	strb	r0, [r5, r1]
1000901e:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009020:	b2c9      	uxtb	r1, r1
10009022:	428a      	cmp	r2, r1
10009024:	d8f7      	bhi.n	10009016 <sms_i2c_master_write+0x16>
10009026:	e004      	b.n	10009032 <sms_i2c_master_write+0x32>
10009028:	3c01      	subs	r4, #1
1000902a:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
1000902c:	2c00      	cmp	r4, #0
1000902e:	d104      	bne.n	1000903a <sms_i2c_master_write+0x3a>
10009030:	e009      	b.n	10009046 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10009032:	4c07      	ldr	r4, [pc, #28]	; (10009050 <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10009034:	4e05      	ldr	r6, [pc, #20]	; (1000904c <sms_i2c_master_write+0x4c>)
10009036:	4d07      	ldr	r5, [pc, #28]	; (10009054 <sms_i2c_master_write+0x54>)
10009038:	4f07      	ldr	r7, [pc, #28]	; (10009058 <sms_i2c_master_write+0x58>)
1000903a:	0031      	movs	r1, r6
1000903c:	0028      	movs	r0, r5
1000903e:	47b8      	blx	r7
10009040:	2800      	cmp	r0, #0
10009042:	d1f1      	bne.n	10009028 <sms_i2c_master_write+0x28>
10009044:	e001      	b.n	1000904a <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10009046:	2001      	movs	r0, #1
10009048:	4240      	negs	r0, r0
        }
    }
    return 0;
}
1000904a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000904c:	1001a06c 	.word	0x1001a06c
10009050:	000003e9 	.word	0x000003e9
10009054:	1001a05c 	.word	0x1001a05c
10009058:	100083b5 	.word	0x100083b5

1000905c <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
1000905c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000905e:	4647      	mov	r7, r8
10009060:	b480      	push	{r7}
10009062:	0017      	movs	r7, r2
10009064:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10009066:	b280      	uxth	r0, r0
10009068:	4b1d      	ldr	r3, [pc, #116]	; (100090e0 <sms_i2c_master_read+0x84>)
1000906a:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
1000906c:	2201      	movs	r2, #1
1000906e:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10009070:	685b      	ldr	r3, [r3, #4]
10009072:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10009074:	4b1b      	ldr	r3, [pc, #108]	; (100090e4 <sms_i2c_master_read+0x88>)
10009076:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10009078:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000907a:	4c1b      	ldr	r4, [pc, #108]	; (100090e8 <sms_i2c_master_read+0x8c>)
1000907c:	4e18      	ldr	r6, [pc, #96]	; (100090e0 <sms_i2c_master_read+0x84>)
1000907e:	4d1b      	ldr	r5, [pc, #108]	; (100090ec <sms_i2c_master_read+0x90>)
10009080:	e003      	b.n	1000908a <sms_i2c_master_read+0x2e>
10009082:	3c01      	subs	r4, #1
10009084:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10009086:	2c00      	cmp	r4, #0
10009088:	d01f      	beq.n	100090ca <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
1000908a:	0031      	movs	r1, r6
1000908c:	4818      	ldr	r0, [pc, #96]	; (100090f0 <sms_i2c_master_read+0x94>)
1000908e:	47a8      	blx	r5
10009090:	2800      	cmp	r0, #0
10009092:	d1f6      	bne.n	10009082 <sms_i2c_master_read+0x26>
10009094:	4e14      	ldr	r6, [pc, #80]	; (100090e8 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10009096:	4d13      	ldr	r5, [pc, #76]	; (100090e4 <sms_i2c_master_read+0x88>)
10009098:	4c16      	ldr	r4, [pc, #88]	; (100090f4 <sms_i2c_master_read+0x98>)
1000909a:	e003      	b.n	100090a4 <sms_i2c_master_read+0x48>
1000909c:	3e01      	subs	r6, #1
1000909e:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
100090a0:	2e00      	cmp	r6, #0
100090a2:	d015      	beq.n	100090d0 <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
100090a4:	0029      	movs	r1, r5
100090a6:	4812      	ldr	r0, [pc, #72]	; (100090f0 <sms_i2c_master_read+0x94>)
100090a8:	47a0      	blx	r4
100090aa:	2800      	cmp	r0, #0
100090ac:	d1f6      	bne.n	1000909c <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100090ae:	2f00      	cmp	r7, #0
100090b0:	d011      	beq.n	100090d6 <sms_i2c_master_read+0x7a>
100090b2:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
100090b4:	490b      	ldr	r1, [pc, #44]	; (100090e4 <sms_i2c_master_read+0x88>)
100090b6:	684a      	ldr	r2, [r1, #4]
100090b8:	5cd2      	ldrb	r2, [r2, r3]
100090ba:	4640      	mov	r0, r8
100090bc:	54c2      	strb	r2, [r0, r3]
100090be:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
100090c0:	b2da      	uxtb	r2, r3
100090c2:	4297      	cmp	r7, r2
100090c4:	d8f7      	bhi.n	100090b6 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100090c6:	2000      	movs	r0, #0
100090c8:	e006      	b.n	100090d8 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100090ca:	2001      	movs	r0, #1
100090cc:	4240      	negs	r0, r0
100090ce:	e003      	b.n	100090d8 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
100090d0:	2001      	movs	r0, #1
100090d2:	4240      	negs	r0, r0
100090d4:	e000      	b.n	100090d8 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
100090d6:	2000      	movs	r0, #0
100090d8:	bc04      	pop	{r2}
100090da:	4690      	mov	r8, r2
100090dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100090de:	46c0      	nop			; (mov r8, r8)
100090e0:	1001a06c 	.word	0x1001a06c
100090e4:	1001a050 	.word	0x1001a050
100090e8:	000003e9 	.word	0x000003e9
100090ec:	100083d9 	.word	0x100083d9
100090f0:	1001a05c 	.word	0x1001a05c
100090f4:	10008391 	.word	0x10008391

100090f8 <sms_imu_interrupt_callback>:
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
	imu_device.interrupt.enabled = false;
}
/* IMU DRDY callback function */
void sms_imu_interrupt_callback(void)
{
100090f8:	b510      	push	{r4, lr}
	if(imu_device.interrupt.enabled) {
100090fa:	2384      	movs	r3, #132	; 0x84
100090fc:	4a06      	ldr	r2, [pc, #24]	; (10009118 <sms_imu_interrupt_callback+0x20>)
100090fe:	5cd3      	ldrb	r3, [r2, r3]
10009100:	2b00      	cmp	r3, #0
10009102:	d008      	beq.n	10009116 <sms_imu_interrupt_callback+0x1e>
		imu_device.interrupt.new_gyro = true;
10009104:	2101      	movs	r1, #1
10009106:	2385      	movs	r3, #133	; 0x85
10009108:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
1000910a:	2300      	movs	r3, #0
1000910c:	2200      	movs	r2, #0
1000910e:	3101      	adds	r1, #1
10009110:	201e      	movs	r0, #30
10009112:	4c02      	ldr	r4, [pc, #8]	; (1000911c <sms_imu_interrupt_callback+0x24>)
10009114:	47a0      	blx	r4
	}
}
10009116:	bd10      	pop	{r4, pc}
10009118:	1001a080 	.word	0x1001a080
1000911c:	1000dc09 	.word	0x1000dc09

10009120 <sms_imu_configure_gpio>:
#include "mpu9250.h"

/* Board setup functions... */
/* GPIO settings */
void sms_imu_configure_gpio(void)
{
10009120:	b510      	push	{r4, lr}
10009122:	b082      	sub	sp, #8
	struct gpio_config config_gpio_pin;

	/* Data ready interrupt from IMU */
	gpio_get_config_defaults(&config_gpio_pin);
10009124:	ac01      	add	r4, sp, #4
10009126:	0020      	movs	r0, r4
10009128:	4b0a      	ldr	r3, [pc, #40]	; (10009154 <sms_imu_configure_gpio+0x34>)
1000912a:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
1000912c:	2300      	movs	r3, #0
1000912e:	7023      	strb	r3, [r4, #0]
	config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10009130:	3302      	adds	r3, #2
10009132:	7063      	strb	r3, [r4, #1]
	config_gpio_pin.aon_wakeup = true;
10009134:	3b01      	subs	r3, #1
10009136:	70e3      	strb	r3, [r4, #3]
	if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10009138:	0021      	movs	r1, r4
1000913a:	201e      	movs	r0, #30
1000913c:	4b06      	ldr	r3, [pc, #24]	; (10009158 <sms_imu_configure_gpio+0x38>)
1000913e:	4798      	blx	r3
10009140:	2800      	cmp	r0, #0
10009142:	d005      	beq.n	10009150 <sms_imu_configure_gpio+0x30>
		DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009144:	4805      	ldr	r0, [pc, #20]	; (1000915c <sms_imu_configure_gpio+0x3c>)
10009146:	4b06      	ldr	r3, [pc, #24]	; (10009160 <sms_imu_configure_gpio+0x40>)
10009148:	4798      	blx	r3
1000914a:	4806      	ldr	r0, [pc, #24]	; (10009164 <sms_imu_configure_gpio+0x44>)
1000914c:	4b06      	ldr	r3, [pc, #24]	; (10009168 <sms_imu_configure_gpio+0x48>)
1000914e:	4798      	blx	r3
	//config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
	//if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
	//DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
	//}
	//gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
10009150:	b002      	add	sp, #8
10009152:	bd10      	pop	{r4, pc}
10009154:	1000a985 	.word	0x1000a985
10009158:	1000a995 	.word	0x1000a995
1000915c:	100168d4 	.word	0x100168d4
10009160:	10015995 	.word	0x10015995
10009164:	10016f4c 	.word	0x10016f4c
10009168:	10015875 	.word	0x10015875

1000916c <sms_imu_register_callbacks>:
/* Register IMU DRDY interrupt callback */
void sms_imu_register_callbacks(void)
{
1000916c:	b510      	push	{r4, lr}
	/* MPU-9250 interrupt callback */
	gpio_register_callback(SMS_MPU_DRDY_PIN, sms_imu_interrupt_callback, GPIO_CALLBACK_RISING);
1000916e:	2202      	movs	r2, #2
10009170:	4902      	ldr	r1, [pc, #8]	; (1000917c <sms_imu_register_callbacks+0x10>)
10009172:	201e      	movs	r0, #30
10009174:	4b02      	ldr	r3, [pc, #8]	; (10009180 <sms_imu_register_callbacks+0x14>)
10009176:	4798      	blx	r3
}
10009178:	bd10      	pop	{r4, pc}
1000917a:	46c0      	nop			; (mov r8, r8)
1000917c:	100090f9 	.word	0x100090f9
10009180:	1000adc5 	.word	0x1000adc5

10009184 <sms_imu_enable_callback>:
{
	gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}
/* Enable IMU DRDY interrupt callback */
void sms_imu_enable_callback(void)
{
10009184:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009186:	201e      	movs	r0, #30
10009188:	4b03      	ldr	r3, [pc, #12]	; (10009198 <sms_imu_enable_callback+0x14>)
1000918a:	4798      	blx	r3
	imu_device.interrupt.enabled = true;
1000918c:	2101      	movs	r1, #1
1000918e:	2384      	movs	r3, #132	; 0x84
10009190:	4a02      	ldr	r2, [pc, #8]	; (1000919c <sms_imu_enable_callback+0x18>)
10009192:	54d1      	strb	r1, [r2, r3]
}
10009194:	bd10      	pop	{r4, pc}
10009196:	46c0      	nop			; (mov r8, r8)
10009198:	1000ae95 	.word	0x1000ae95
1000919c:	1001a080 	.word	0x1001a080

100091a0 <sms_imu_disable_callback>:
/* Disable IMU DRDY interrupt callback */
void sms_imu_disable_callback(void)
{
100091a0:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
100091a2:	201e      	movs	r0, #30
100091a4:	4b03      	ldr	r3, [pc, #12]	; (100091b4 <sms_imu_disable_callback+0x14>)
100091a6:	4798      	blx	r3
	imu_device.interrupt.enabled = false;
100091a8:	2100      	movs	r1, #0
100091aa:	2384      	movs	r3, #132	; 0x84
100091ac:	4a02      	ldr	r2, [pc, #8]	; (100091b8 <sms_imu_disable_callback+0x18>)
100091ae:	54d1      	strb	r1, [r2, r3]
}
100091b0:	bd10      	pop	{r4, pc}
100091b2:	46c0      	nop			; (mov r8, r8)
100091b4:	1000aef1 	.word	0x1000aef1
100091b8:	1001a080 	.word	0x1001a080

100091bc <sms_imu_define_services>:
	}

}
/* BLE service definition */
void sms_imu_define_services(void)
{
100091bc:	b510      	push	{r4, lr}
100091be:	b082      	sub	sp, #8
	at_ble_status_t status;
	uint8_t init_value = 0;
100091c0:	466b      	mov	r3, sp
100091c2:	1dda      	adds	r2, r3, #7
100091c4:	2300      	movs	r3, #0
100091c6:	7013      	strb	r3, [r2, #0]
	sms_ble_service_init(BLE_SERV_MPU, &imu_device.service_handler, &init_value);
100091c8:	4c0e      	ldr	r4, [pc, #56]	; (10009204 <sms_imu_define_services+0x48>)
100091ca:	0021      	movs	r1, r4
100091cc:	2002      	movs	r0, #2
100091ce:	4b0e      	ldr	r3, [pc, #56]	; (10009208 <sms_imu_define_services+0x4c>)
100091d0:	4798      	blx	r3
	if((status = sms_ble_primary_service_define(&imu_device.service_handler)) != AT_BLE_SUCCESS) {
100091d2:	0020      	movs	r0, r4
100091d4:	4b0d      	ldr	r3, [pc, #52]	; (1000920c <sms_imu_define_services+0x50>)
100091d6:	4798      	blx	r3
100091d8:	1e04      	subs	r4, r0, #0
100091da:	d007      	beq.n	100091ec <sms_imu_define_services+0x30>
		DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
100091dc:	480c      	ldr	r0, [pc, #48]	; (10009210 <sms_imu_define_services+0x54>)
100091de:	4b0d      	ldr	r3, [pc, #52]	; (10009214 <sms_imu_define_services+0x58>)
100091e0:	4798      	blx	r3
100091e2:	0021      	movs	r1, r4
100091e4:	480c      	ldr	r0, [pc, #48]	; (10009218 <sms_imu_define_services+0x5c>)
100091e6:	4b0d      	ldr	r3, [pc, #52]	; (1000921c <sms_imu_define_services+0x60>)
100091e8:	4798      	blx	r3
100091ea:	e008      	b.n	100091fe <sms_imu_define_services+0x42>
	}
	else {
		DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", imu_device.service_handler.serv_handle);
100091ec:	4808      	ldr	r0, [pc, #32]	; (10009210 <sms_imu_define_services+0x54>)
100091ee:	4b09      	ldr	r3, [pc, #36]	; (10009214 <sms_imu_define_services+0x58>)
100091f0:	4798      	blx	r3
100091f2:	239a      	movs	r3, #154	; 0x9a
100091f4:	4a0a      	ldr	r2, [pc, #40]	; (10009220 <sms_imu_define_services+0x64>)
100091f6:	5ad1      	ldrh	r1, [r2, r3]
100091f8:	480a      	ldr	r0, [pc, #40]	; (10009224 <sms_imu_define_services+0x68>)
100091fa:	4b08      	ldr	r3, [pc, #32]	; (1000921c <sms_imu_define_services+0x60>)
100091fc:	4798      	blx	r3
	}
}
100091fe:	b002      	add	sp, #8
10009200:	bd10      	pop	{r4, pc}
10009202:	46c0      	nop			; (mov r8, r8)
10009204:	1001a108 	.word	0x1001a108
10009208:	10008a35 	.word	0x10008a35
1000920c:	10008a11 	.word	0x10008a11
10009210:	100168d4 	.word	0x100168d4
10009214:	10015995 	.word	0x10015995
10009218:	10016f8c 	.word	0x10016f8c
1000921c:	10015875 	.word	0x10015875
10009220:	1001a080 	.word	0x1001a080
10009224:	10016fcc 	.word	0x10016fcc

10009228 <sms_imu_init_variables>:

/* Initialization functions... */
/* Variables */
void sms_imu_init_variables(void)
{
	imu_device.config.a_scale = AFS_2G;
10009228:	4b03      	ldr	r3, [pc, #12]	; (10009238 <sms_imu_init_variables+0x10>)
1000922a:	2200      	movs	r2, #0
1000922c:	701a      	strb	r2, [r3, #0]
	imu_device.config.g_scale = GFS_250DPS;
1000922e:	705a      	strb	r2, [r3, #1]
	imu_device.config.ahrs = false;
10009230:	2150      	movs	r1, #80	; 0x50
10009232:	545a      	strb	r2, [r3, r1]
	imu_device.config.init_ok = false;
10009234:	711a      	strb	r2, [r3, #4]
}
10009236:	4770      	bx	lr
10009238:	1001a080 	.word	0x1001a080

1000923c <writeByte>:
}


/* I2C abstractions to simplify the code */
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
1000923c:	b510      	push	{r4, lr}
1000923e:	b082      	sub	sp, #8
10009240:	466b      	mov	r3, sp
10009242:	3307      	adds	r3, #7
10009244:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009246:	2201      	movs	r2, #1
10009248:	4c01      	ldr	r4, [pc, #4]	; (10009250 <writeByte+0x14>)
1000924a:	47a0      	blx	r4
}
1000924c:	b002      	add	sp, #8
1000924e:	bd10      	pop	{r4, pc}
10009250:	10009001 	.word	0x10009001

10009254 <sms_imu_mpu_calibrate>:
	}
	return retVal;
}
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
10009254:	b5f0      	push	{r4, r5, r6, r7, lr}
10009256:	465f      	mov	r7, fp
10009258:	4656      	mov	r6, sl
1000925a:	464d      	mov	r5, r9
1000925c:	4644      	mov	r4, r8
1000925e:	b4f0      	push	{r4, r5, r6, r7}
10009260:	b08f      	sub	sp, #60	; 0x3c
10009262:	9003      	str	r0, [sp, #12]
10009264:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009266:	2280      	movs	r2, #128	; 0x80
10009268:	216b      	movs	r1, #107	; 0x6b
1000926a:	2069      	movs	r0, #105	; 0x69
1000926c:	4ccd      	ldr	r4, [pc, #820]	; (100095a4 <sms_imu_mpu_calibrate+0x350>)
1000926e:	47a0      	blx	r4
	delay_ms(100);
10009270:	2064      	movs	r0, #100	; 0x64
10009272:	4dcd      	ldr	r5, [pc, #820]	; (100095a8 <sms_imu_mpu_calibrate+0x354>)
10009274:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009276:	2201      	movs	r2, #1
10009278:	216b      	movs	r1, #107	; 0x6b
1000927a:	2069      	movs	r0, #105	; 0x69
1000927c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
1000927e:	2200      	movs	r2, #0
10009280:	216c      	movs	r1, #108	; 0x6c
10009282:	2069      	movs	r0, #105	; 0x69
10009284:	47a0      	blx	r4
	delay_ms(200);
10009286:	20c8      	movs	r0, #200	; 0xc8
10009288:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
1000928a:	2200      	movs	r2, #0
1000928c:	2138      	movs	r1, #56	; 0x38
1000928e:	2069      	movs	r0, #105	; 0x69
10009290:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
10009292:	2200      	movs	r2, #0
10009294:	2123      	movs	r1, #35	; 0x23
10009296:	2069      	movs	r0, #105	; 0x69
10009298:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
1000929a:	2200      	movs	r2, #0
1000929c:	216b      	movs	r1, #107	; 0x6b
1000929e:	2069      	movs	r0, #105	; 0x69
100092a0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
100092a2:	2200      	movs	r2, #0
100092a4:	2124      	movs	r1, #36	; 0x24
100092a6:	2069      	movs	r0, #105	; 0x69
100092a8:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
100092aa:	2200      	movs	r2, #0
100092ac:	216a      	movs	r1, #106	; 0x6a
100092ae:	2069      	movs	r0, #105	; 0x69
100092b0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
100092b2:	220c      	movs	r2, #12
100092b4:	216a      	movs	r1, #106	; 0x6a
100092b6:	2069      	movs	r0, #105	; 0x69
100092b8:	47a0      	blx	r4
	delay_ms(15);
100092ba:	200f      	movs	r0, #15
100092bc:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
100092be:	2201      	movs	r2, #1
100092c0:	211a      	movs	r1, #26
100092c2:	2069      	movs	r0, #105	; 0x69
100092c4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
100092c6:	2200      	movs	r2, #0
100092c8:	2119      	movs	r1, #25
100092ca:	2069      	movs	r0, #105	; 0x69
100092cc:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
100092ce:	2200      	movs	r2, #0
100092d0:	211b      	movs	r1, #27
100092d2:	2069      	movs	r0, #105	; 0x69
100092d4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
100092d6:	2200      	movs	r2, #0
100092d8:	211c      	movs	r1, #28
100092da:	2069      	movs	r0, #105	; 0x69
100092dc:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
100092de:	2240      	movs	r2, #64	; 0x40
100092e0:	216a      	movs	r1, #106	; 0x6a
100092e2:	2069      	movs	r0, #105	; 0x69
100092e4:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
100092e6:	2278      	movs	r2, #120	; 0x78
100092e8:	2123      	movs	r1, #35	; 0x23
100092ea:	2069      	movs	r0, #105	; 0x69
100092ec:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
100092ee:	2028      	movs	r0, #40	; 0x28
100092f0:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
100092f2:	2200      	movs	r2, #0
100092f4:	2123      	movs	r1, #35	; 0x23
100092f6:	2069      	movs	r0, #105	; 0x69
100092f8:	47a0      	blx	r4
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100092fa:	ac0b      	add	r4, sp, #44	; 0x2c
100092fc:	0023      	movs	r3, r4
100092fe:	2202      	movs	r2, #2
10009300:	2172      	movs	r1, #114	; 0x72
10009302:	2069      	movs	r0, #105	; 0x69
10009304:	4da9      	ldr	r5, [pc, #676]	; (100095ac <sms_imu_mpu_calibrate+0x358>)
10009306:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
10009308:	7820      	ldrb	r0, [r4, #0]
1000930a:	0200      	lsls	r0, r0, #8
1000930c:	7863      	ldrb	r3, [r4, #1]
1000930e:	4318      	orrs	r0, r3
10009310:	210c      	movs	r1, #12
10009312:	4ba7      	ldr	r3, [pc, #668]	; (100095b0 <sms_imu_mpu_calibrate+0x35c>)
10009314:	4798      	blx	r3
10009316:	b283      	uxth	r3, r0
10009318:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
1000931a:	2b00      	cmp	r3, #0
1000931c:	d042      	beq.n	100093a4 <sms_imu_mpu_calibrate+0x150>
1000931e:	2300      	movs	r3, #0
10009320:	4698      	mov	r8, r3
10009322:	2700      	movs	r7, #0
10009324:	469b      	mov	fp, r3
10009326:	469a      	mov	sl, r3
10009328:	4699      	mov	r9, r3
1000932a:	2500      	movs	r5, #0
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000932c:	ac0b      	add	r4, sp, #44	; 0x2c
1000932e:	9301      	str	r3, [sp, #4]
10009330:	0023      	movs	r3, r4
10009332:	220c      	movs	r2, #12
10009334:	2174      	movs	r1, #116	; 0x74
10009336:	2069      	movs	r0, #105	; 0x69
10009338:	4e9c      	ldr	r6, [pc, #624]	; (100095ac <sms_imu_mpu_calibrate+0x358>)
1000933a:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
1000933c:	7823      	ldrb	r3, [r4, #0]
1000933e:	021b      	lsls	r3, r3, #8
10009340:	7862      	ldrb	r2, [r4, #1]
10009342:	4313      	orrs	r3, r2
10009344:	b21b      	sxth	r3, r3
10009346:	9a01      	ldr	r2, [sp, #4]
10009348:	4694      	mov	ip, r2
1000934a:	449c      	add	ip, r3
1000934c:	4663      	mov	r3, ip
1000934e:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
10009350:	78a3      	ldrb	r3, [r4, #2]
10009352:	021b      	lsls	r3, r3, #8
10009354:	78e2      	ldrb	r2, [r4, #3]
10009356:	4313      	orrs	r3, r2
10009358:	b21b      	sxth	r3, r3
1000935a:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
1000935c:	7923      	ldrb	r3, [r4, #4]
1000935e:	021b      	lsls	r3, r3, #8
10009360:	7962      	ldrb	r2, [r4, #5]
10009362:	4313      	orrs	r3, r2
10009364:	b21b      	sxth	r3, r3
10009366:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009368:	79a3      	ldrb	r3, [r4, #6]
1000936a:	021b      	lsls	r3, r3, #8
1000936c:	79e2      	ldrb	r2, [r4, #7]
1000936e:	4313      	orrs	r3, r2
10009370:	b21b      	sxth	r3, r3
10009372:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009374:	7a23      	ldrb	r3, [r4, #8]
10009376:	021b      	lsls	r3, r3, #8
10009378:	7a62      	ldrb	r2, [r4, #9]
1000937a:	4313      	orrs	r3, r2
1000937c:	b21b      	sxth	r3, r3
1000937e:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
10009380:	7aa3      	ldrb	r3, [r4, #10]
10009382:	021b      	lsls	r3, r3, #8
10009384:	7ae2      	ldrb	r2, [r4, #11]
10009386:	4313      	orrs	r3, r2
10009388:	b21b      	sxth	r3, r3
1000938a:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
1000938c:	3501      	adds	r5, #1
1000938e:	b2ad      	uxth	r5, r5
10009390:	9b02      	ldr	r3, [sp, #8]
10009392:	42ab      	cmp	r3, r5
10009394:	d1cc      	bne.n	10009330 <sms_imu_mpu_calibrate+0xdc>
10009396:	4653      	mov	r3, sl
10009398:	46ba      	mov	sl, r7
1000939a:	465a      	mov	r2, fp
1000939c:	46e3      	mov	fp, ip
1000939e:	0016      	movs	r6, r2
100093a0:	001f      	movs	r7, r3
100093a2:	e006      	b.n	100093b2 <sms_imu_mpu_calibrate+0x15e>
/* Calculate biases for gyro and accel and write them into MPU registers */
void sms_imu_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
100093a4:	2300      	movs	r3, #0
100093a6:	4698      	mov	r8, r3
100093a8:	2700      	movs	r7, #0
100093aa:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
100093ac:	469b      	mov	fp, r3
100093ae:	469a      	mov	sl, r3
100093b0:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
100093b2:	4c80      	ldr	r4, [pc, #512]	; (100095b4 <sms_imu_mpu_calibrate+0x360>)
100093b4:	9902      	ldr	r1, [sp, #8]
100093b6:	4658      	mov	r0, fp
100093b8:	47a0      	blx	r4
100093ba:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
100093bc:	9b02      	ldr	r3, [sp, #8]
100093be:	469b      	mov	fp, r3
100093c0:	0019      	movs	r1, r3
100093c2:	4650      	mov	r0, sl
100093c4:	47a0      	blx	r4
100093c6:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
100093c8:	4659      	mov	r1, fp
100093ca:	4648      	mov	r0, r9
100093cc:	47a0      	blx	r4
100093ce:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
100093d0:	4659      	mov	r1, fp
100093d2:	4640      	mov	r0, r8
100093d4:	47a0      	blx	r4
100093d6:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
100093d8:	4659      	mov	r1, fp
100093da:	0038      	movs	r0, r7
100093dc:	47a0      	blx	r4
100093de:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
100093e0:	4659      	mov	r1, fp
100093e2:	0030      	movs	r0, r6
100093e4:	47a0      	blx	r4
100093e6:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
100093e8:	464b      	mov	r3, r9
100093ea:	2b00      	cmp	r3, #0
100093ec:	dd03      	ble.n	100093f6 <sms_imu_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
100093ee:	4b72      	ldr	r3, [pc, #456]	; (100095b8 <sms_imu_mpu_calibrate+0x364>)
100093f0:	469c      	mov	ip, r3
100093f2:	44e1      	add	r9, ip
100093f4:	e003      	b.n	100093fe <sms_imu_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
100093f6:	2380      	movs	r3, #128	; 0x80
100093f8:	01db      	lsls	r3, r3, #7
100093fa:	469c      	mov	ip, r3
100093fc:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
100093fe:	9b01      	ldr	r3, [sp, #4]
10009400:	4259      	negs	r1, r3
10009402:	17ca      	asrs	r2, r1, #31
10009404:	2303      	movs	r3, #3
10009406:	401a      	ands	r2, r3
10009408:	1852      	adds	r2, r2, r1
1000940a:	1091      	asrs	r1, r2, #2
1000940c:	1292      	asrs	r2, r2, #10
1000940e:	b2d2      	uxtb	r2, r2
10009410:	ac0b      	add	r4, sp, #44	; 0x2c
10009412:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
10009414:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
10009416:	9902      	ldr	r1, [sp, #8]
10009418:	4248      	negs	r0, r1
1000941a:	17c1      	asrs	r1, r0, #31
1000941c:	4019      	ands	r1, r3
1000941e:	1809      	adds	r1, r1, r0
10009420:	1088      	asrs	r0, r1, #2
10009422:	1289      	asrs	r1, r1, #10
10009424:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
10009426:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
10009428:	9e04      	ldr	r6, [sp, #16]
1000942a:	4271      	negs	r1, r6
1000942c:	17c8      	asrs	r0, r1, #31
1000942e:	4003      	ands	r3, r0
10009430:	185b      	adds	r3, r3, r1
10009432:	1099      	asrs	r1, r3, #2
10009434:	129b      	asrs	r3, r3, #10
10009436:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
10009438:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
1000943a:	2113      	movs	r1, #19
1000943c:	2069      	movs	r0, #105	; 0x69
1000943e:	4e59      	ldr	r6, [pc, #356]	; (100095a4 <sms_imu_mpu_calibrate+0x350>)
10009440:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
10009442:	7862      	ldrb	r2, [r4, #1]
10009444:	2114      	movs	r1, #20
10009446:	2069      	movs	r0, #105	; 0x69
10009448:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
1000944a:	78a2      	ldrb	r2, [r4, #2]
1000944c:	2115      	movs	r1, #21
1000944e:	2069      	movs	r0, #105	; 0x69
10009450:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
10009452:	78e2      	ldrb	r2, [r4, #3]
10009454:	2116      	movs	r1, #22
10009456:	2069      	movs	r0, #105	; 0x69
10009458:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
1000945a:	7922      	ldrb	r2, [r4, #4]
1000945c:	2117      	movs	r1, #23
1000945e:	2069      	movs	r0, #105	; 0x69
10009460:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
10009462:	7962      	ldrb	r2, [r4, #5]
10009464:	2118      	movs	r1, #24
10009466:	2069      	movs	r0, #105	; 0x69
10009468:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
1000946a:	4f54      	ldr	r7, [pc, #336]	; (100095bc <sms_imu_mpu_calibrate+0x368>)
1000946c:	9801      	ldr	r0, [sp, #4]
1000946e:	47b8      	blx	r7
10009470:	4e53      	ldr	r6, [pc, #332]	; (100095c0 <sms_imu_mpu_calibrate+0x36c>)
10009472:	4954      	ldr	r1, [pc, #336]	; (100095c4 <sms_imu_mpu_calibrate+0x370>)
10009474:	47b0      	blx	r6
10009476:	9b03      	ldr	r3, [sp, #12]
10009478:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
1000947a:	9802      	ldr	r0, [sp, #8]
1000947c:	47b8      	blx	r7
1000947e:	4951      	ldr	r1, [pc, #324]	; (100095c4 <sms_imu_mpu_calibrate+0x370>)
10009480:	47b0      	blx	r6
10009482:	9b03      	ldr	r3, [sp, #12]
10009484:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009486:	9804      	ldr	r0, [sp, #16]
10009488:	47b8      	blx	r7
1000948a:	494e      	ldr	r1, [pc, #312]	; (100095c4 <sms_imu_mpu_calibrate+0x370>)
1000948c:	47b0      	blx	r6
1000948e:	9b03      	ldr	r3, [sp, #12]
10009490:	6098      	str	r0, [r3, #8]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009492:	0023      	movs	r3, r4
10009494:	2202      	movs	r2, #2
10009496:	2177      	movs	r1, #119	; 0x77
10009498:	2069      	movs	r0, #105	; 0x69
1000949a:	4e44      	ldr	r6, [pc, #272]	; (100095ac <sms_imu_mpu_calibrate+0x358>)
1000949c:	46b0      	mov	r8, r6
1000949e:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100094a0:	7827      	ldrb	r7, [r4, #0]
100094a2:	023f      	lsls	r7, r7, #8
100094a4:	7863      	ldrb	r3, [r4, #1]
100094a6:	431f      	orrs	r7, r3
100094a8:	9708      	str	r7, [sp, #32]
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100094aa:	0023      	movs	r3, r4
100094ac:	2202      	movs	r2, #2
100094ae:	217a      	movs	r1, #122	; 0x7a
100094b0:	2069      	movs	r0, #105	; 0x69
100094b2:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100094b4:	7826      	ldrb	r6, [r4, #0]
100094b6:	0236      	lsls	r6, r6, #8
100094b8:	7863      	ldrb	r3, [r4, #1]
100094ba:	431e      	orrs	r6, r3
100094bc:	9609      	str	r6, [sp, #36]	; 0x24
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100094be:	0023      	movs	r3, r4
100094c0:	2202      	movs	r2, #2
100094c2:	217d      	movs	r1, #125	; 0x7d
100094c4:	2069      	movs	r0, #105	; 0x69
100094c6:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
100094c8:	7823      	ldrb	r3, [r4, #0]
100094ca:	021b      	lsls	r3, r3, #8
100094cc:	7861      	ldrb	r1, [r4, #1]
100094ce:	4319      	orrs	r1, r3
100094d0:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
100094d2:	ab07      	add	r3, sp, #28
100094d4:	2200      	movs	r2, #0
100094d6:	701a      	strb	r2, [r3, #0]
100094d8:	705a      	strb	r2, [r3, #1]
100094da:	709a      	strb	r2, [r3, #2]
100094dc:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
100094de:	2401      	movs	r4, #1
100094e0:	009a      	lsls	r2, r3, #2
100094e2:	a808      	add	r0, sp, #32
100094e4:	5812      	ldr	r2, [r2, r0]
100094e6:	4222      	tst	r2, r4
100094e8:	d001      	beq.n	100094ee <sms_imu_mpu_calibrate+0x29a>
100094ea:	aa07      	add	r2, sp, #28
100094ec:	549c      	strb	r4, [r3, r2]
100094ee:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
100094f0:	2b03      	cmp	r3, #3
100094f2:	d1f5      	bne.n	100094e0 <sms_imu_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
100094f4:	17ea      	asrs	r2, r5, #31
100094f6:	3304      	adds	r3, #4
100094f8:	401a      	ands	r2, r3
100094fa:	1952      	adds	r2, r2, r5
100094fc:	10d2      	asrs	r2, r2, #3
100094fe:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
10009500:	4652      	mov	r2, sl
10009502:	17d0      	asrs	r0, r2, #31
10009504:	4018      	ands	r0, r3
10009506:	4450      	add	r0, sl
10009508:	10c0      	asrs	r0, r0, #3
1000950a:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
1000950c:	464a      	mov	r2, r9
1000950e:	17d2      	asrs	r2, r2, #31
10009510:	4013      	ands	r3, r2
10009512:	444b      	add	r3, r9
10009514:	10da      	asrs	r2, r3, #3
10009516:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
10009518:	123a      	asrs	r2, r7, #8
1000951a:	b2d2      	uxtb	r2, r2
1000951c:	ac0b      	add	r4, sp, #44	; 0x2c
1000951e:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009520:	a907      	add	r1, sp, #28
10009522:	7808      	ldrb	r0, [r1, #0]
10009524:	4307      	orrs	r7, r0
10009526:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
10009528:	1230      	asrs	r0, r6, #8
1000952a:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
1000952c:	7848      	ldrb	r0, [r1, #1]
1000952e:	4306      	orrs	r6, r0
10009530:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
10009532:	1218      	asrs	r0, r3, #8
10009534:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
10009536:	7889      	ldrb	r1, [r1, #2]
10009538:	430b      	orrs	r3, r1
1000953a:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
1000953c:	2177      	movs	r1, #119	; 0x77
1000953e:	2069      	movs	r0, #105	; 0x69
10009540:	4e18      	ldr	r6, [pc, #96]	; (100095a4 <sms_imu_mpu_calibrate+0x350>)
10009542:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009544:	7862      	ldrb	r2, [r4, #1]
10009546:	2178      	movs	r1, #120	; 0x78
10009548:	2069      	movs	r0, #105	; 0x69
1000954a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
1000954c:	78a2      	ldrb	r2, [r4, #2]
1000954e:	217a      	movs	r1, #122	; 0x7a
10009550:	2069      	movs	r0, #105	; 0x69
10009552:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009554:	78e2      	ldrb	r2, [r4, #3]
10009556:	217b      	movs	r1, #123	; 0x7b
10009558:	2069      	movs	r0, #105	; 0x69
1000955a:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
1000955c:	7922      	ldrb	r2, [r4, #4]
1000955e:	217d      	movs	r1, #125	; 0x7d
10009560:	2069      	movs	r0, #105	; 0x69
10009562:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009564:	7962      	ldrb	r2, [r4, #5]
10009566:	217e      	movs	r1, #126	; 0x7e
10009568:	2069      	movs	r0, #105	; 0x69
1000956a:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
1000956c:	4e13      	ldr	r6, [pc, #76]	; (100095bc <sms_imu_mpu_calibrate+0x368>)
1000956e:	0028      	movs	r0, r5
10009570:	47b0      	blx	r6
10009572:	4c15      	ldr	r4, [pc, #84]	; (100095c8 <sms_imu_mpu_calibrate+0x374>)
10009574:	21e2      	movs	r1, #226	; 0xe2
10009576:	0589      	lsls	r1, r1, #22
10009578:	47a0      	blx	r4
1000957a:	9d05      	ldr	r5, [sp, #20]
1000957c:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
1000957e:	4650      	mov	r0, sl
10009580:	47b0      	blx	r6
10009582:	21e2      	movs	r1, #226	; 0xe2
10009584:	0589      	lsls	r1, r1, #22
10009586:	47a0      	blx	r4
10009588:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
1000958a:	4648      	mov	r0, r9
1000958c:	47b0      	blx	r6
1000958e:	21e2      	movs	r1, #226	; 0xe2
10009590:	0589      	lsls	r1, r1, #22
10009592:	47a0      	blx	r4
10009594:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009596:	b00f      	add	sp, #60	; 0x3c
10009598:	bc3c      	pop	{r2, r3, r4, r5}
1000959a:	4690      	mov	r8, r2
1000959c:	4699      	mov	r9, r3
1000959e:	46a2      	mov	sl, r4
100095a0:	46ab      	mov	fp, r5
100095a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100095a4:	1000923d 	.word	0x1000923d
100095a8:	1000a309 	.word	0x1000a309
100095ac:	1000905d 	.word	0x1000905d
100095b0:	10012a01 	.word	0x10012a01
100095b4:	10012b15 	.word	0x10012b15
100095b8:	ffffc000 	.word	0xffffc000
100095bc:	100137ad 	.word	0x100137ad
100095c0:	10012ea1 	.word	0x10012ea1
100095c4:	43030000 	.word	0x43030000
100095c8:	10013235 	.word	0x10013235

100095cc <sms_imu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}
/* Compass */
void sms_imu_comp_initialize(float *destination)
{
100095cc:	b5f0      	push	{r4, r5, r6, r7, lr}
100095ce:	465f      	mov	r7, fp
100095d0:	4656      	mov	r6, sl
100095d2:	464d      	mov	r5, r9
100095d4:	4644      	mov	r4, r8
100095d6:	b4f0      	push	{r4, r5, r6, r7}
100095d8:	b083      	sub	sp, #12
100095da:	4680      	mov	r8, r0
	imu_device.config.m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
100095dc:	4c36      	ldr	r4, [pc, #216]	; (100096b8 <sms_imu_comp_initialize+0xec>)
100095de:	2301      	movs	r3, #1
100095e0:	70a3      	strb	r3, [r4, #2]
	imu_device.config.m_mode = MODE_CONT1;	// CONT1 (2) for 8 Hz, CONT2 (6) for 100 Hz continuous magnetometer data read
100095e2:	3301      	adds	r3, #1
100095e4:	70e3      	strb	r3, [r4, #3]

	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */
	imu_device.config.mag_bias[0] = 470.0;
100095e6:	4b35      	ldr	r3, [pc, #212]	; (100096bc <sms_imu_comp_initialize+0xf0>)
100095e8:	63a3      	str	r3, [r4, #56]	; 0x38
	imu_device.config.mag_bias[1] = 120.0;
100095ea:	4b35      	ldr	r3, [pc, #212]	; (100096c0 <sms_imu_comp_initialize+0xf4>)
100095ec:	63e3      	str	r3, [r4, #60]	; 0x3c
	imu_device.config.mag_bias[2] = 125.0;
100095ee:	4b35      	ldr	r3, [pc, #212]	; (100096c4 <sms_imu_comp_initialize+0xf8>)
100095f0:	6423      	str	r3, [r4, #64]	; 0x40
	/* !!! SET MAGNETOMETER BIAS VALUES !!! SHOULD BE CALCULATED AUTOMATICALLY !!! */

	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
100095f2:	2200      	movs	r2, #0
100095f4:	210a      	movs	r1, #10
100095f6:	200c      	movs	r0, #12
100095f8:	4e33      	ldr	r6, [pc, #204]	; (100096c8 <sms_imu_comp_initialize+0xfc>)
100095fa:	47b0      	blx	r6
	delay_ms(10);
100095fc:	200a      	movs	r0, #10
100095fe:	4b33      	ldr	r3, [pc, #204]	; (100096cc <sms_imu_comp_initialize+0x100>)
10009600:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
10009602:	220f      	movs	r2, #15
10009604:	210a      	movs	r1, #10
10009606:	200c      	movs	r0, #12
10009608:	47b0      	blx	r6
	delay_ms(10);
1000960a:	200a      	movs	r0, #10
1000960c:	4b2f      	ldr	r3, [pc, #188]	; (100096cc <sms_imu_comp_initialize+0x100>)
1000960e:	4798      	blx	r3
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009610:	af01      	add	r7, sp, #4
10009612:	003b      	movs	r3, r7
10009614:	2203      	movs	r2, #3
10009616:	2110      	movs	r1, #16
10009618:	200c      	movs	r0, #12
1000961a:	4d2d      	ldr	r5, [pc, #180]	; (100096d0 <sms_imu_comp_initialize+0x104>)
1000961c:	47a8      	blx	r5
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
1000961e:	7838      	ldrb	r0, [r7, #0]
10009620:	3880      	subs	r0, #128	; 0x80
10009622:	4b2c      	ldr	r3, [pc, #176]	; (100096d4 <sms_imu_comp_initialize+0x108>)
10009624:	469b      	mov	fp, r3
10009626:	4798      	blx	r3
10009628:	4b2b      	ldr	r3, [pc, #172]	; (100096d8 <sms_imu_comp_initialize+0x10c>)
1000962a:	469a      	mov	sl, r3
1000962c:	4798      	blx	r3
1000962e:	2200      	movs	r2, #0
10009630:	4b2a      	ldr	r3, [pc, #168]	; (100096dc <sms_imu_comp_initialize+0x110>)
10009632:	4d2b      	ldr	r5, [pc, #172]	; (100096e0 <sms_imu_comp_initialize+0x114>)
10009634:	47a8      	blx	r5
10009636:	2200      	movs	r2, #0
10009638:	4b2a      	ldr	r3, [pc, #168]	; (100096e4 <sms_imu_comp_initialize+0x118>)
1000963a:	4d2b      	ldr	r5, [pc, #172]	; (100096e8 <sms_imu_comp_initialize+0x11c>)
1000963c:	47a8      	blx	r5
1000963e:	4b2b      	ldr	r3, [pc, #172]	; (100096ec <sms_imu_comp_initialize+0x120>)
10009640:	4699      	mov	r9, r3
10009642:	4798      	blx	r3
10009644:	4643      	mov	r3, r8
10009646:	6018      	str	r0, [r3, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
10009648:	7878      	ldrb	r0, [r7, #1]
1000964a:	3880      	subs	r0, #128	; 0x80
1000964c:	47d8      	blx	fp
1000964e:	47d0      	blx	sl
10009650:	2200      	movs	r2, #0
10009652:	4b22      	ldr	r3, [pc, #136]	; (100096dc <sms_imu_comp_initialize+0x110>)
10009654:	4d22      	ldr	r5, [pc, #136]	; (100096e0 <sms_imu_comp_initialize+0x114>)
10009656:	47a8      	blx	r5
10009658:	2200      	movs	r2, #0
1000965a:	4b22      	ldr	r3, [pc, #136]	; (100096e4 <sms_imu_comp_initialize+0x118>)
1000965c:	4d22      	ldr	r5, [pc, #136]	; (100096e8 <sms_imu_comp_initialize+0x11c>)
1000965e:	47a8      	blx	r5
10009660:	47c8      	blx	r9
10009662:	4643      	mov	r3, r8
10009664:	6058      	str	r0, [r3, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009666:	78b8      	ldrb	r0, [r7, #2]
10009668:	3880      	subs	r0, #128	; 0x80
1000966a:	47d8      	blx	fp
1000966c:	47d0      	blx	sl
1000966e:	2200      	movs	r2, #0
10009670:	4b1a      	ldr	r3, [pc, #104]	; (100096dc <sms_imu_comp_initialize+0x110>)
10009672:	4d1b      	ldr	r5, [pc, #108]	; (100096e0 <sms_imu_comp_initialize+0x114>)
10009674:	47a8      	blx	r5
10009676:	2200      	movs	r2, #0
10009678:	4b1a      	ldr	r3, [pc, #104]	; (100096e4 <sms_imu_comp_initialize+0x118>)
1000967a:	4d1b      	ldr	r5, [pc, #108]	; (100096e8 <sms_imu_comp_initialize+0x11c>)
1000967c:	47a8      	blx	r5
1000967e:	47c8      	blx	r9
10009680:	4643      	mov	r3, r8
10009682:	6098      	str	r0, [r3, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009684:	2200      	movs	r2, #0
10009686:	210a      	movs	r1, #10
10009688:	200c      	movs	r0, #12
1000968a:	47b0      	blx	r6
	delay_ms(10);
1000968c:	200a      	movs	r0, #10
1000968e:	4b0f      	ldr	r3, [pc, #60]	; (100096cc <sms_imu_comp_initialize+0x100>)
10009690:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, imu_device.config.m_scale << 4 | imu_device.config.m_mode); // Set magnetometer data resolution and sample ODR
10009692:	78a2      	ldrb	r2, [r4, #2]
10009694:	0112      	lsls	r2, r2, #4
10009696:	78e3      	ldrb	r3, [r4, #3]
10009698:	431a      	orrs	r2, r3
1000969a:	b2d2      	uxtb	r2, r2
1000969c:	210a      	movs	r1, #10
1000969e:	200c      	movs	r0, #12
100096a0:	47b0      	blx	r6
	delay_ms(10);
100096a2:	200a      	movs	r0, #10
100096a4:	4b09      	ldr	r3, [pc, #36]	; (100096cc <sms_imu_comp_initialize+0x100>)
100096a6:	4798      	blx	r3
}
100096a8:	b003      	add	sp, #12
100096aa:	bc3c      	pop	{r2, r3, r4, r5}
100096ac:	4690      	mov	r8, r2
100096ae:	4699      	mov	r9, r3
100096b0:	46a2      	mov	sl, r4
100096b2:	46ab      	mov	fp, r5
100096b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100096b6:	46c0      	nop			; (mov r8, r8)
100096b8:	1001a080 	.word	0x1001a080
100096bc:	43eb0000 	.word	0x43eb0000
100096c0:	42f00000 	.word	0x42f00000
100096c4:	42fa0000 	.word	0x42fa0000
100096c8:	1000923d 	.word	0x1000923d
100096cc:	1000a309 	.word	0x1000a309
100096d0:	1000905d 	.word	0x1000905d
100096d4:	100137ad 	.word	0x100137ad
100096d8:	10015495 	.word	0x10015495
100096dc:	3f700000 	.word	0x3f700000
100096e0:	10014759 	.word	0x10014759
100096e4:	3ff00000 	.word	0x3ff00000
100096e8:	100138b9 	.word	0x100138b9
100096ec:	1001553d 	.word	0x1001553d

100096f0 <readByte>:
void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}
uint8_t readByte(uint8_t address, uint8_t subAddress)
{
100096f0:	b530      	push	{r4, r5, lr}
100096f2:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
100096f4:	ac01      	add	r4, sp, #4
100096f6:	0023      	movs	r3, r4
100096f8:	2201      	movs	r2, #1
100096fa:	4d02      	ldr	r5, [pc, #8]	; (10009704 <readByte+0x14>)
100096fc:	47a8      	blx	r5
	return data[0];
100096fe:	7820      	ldrb	r0, [r4, #0]
}
10009700:	b003      	add	sp, #12
10009702:	bd30      	pop	{r4, r5, pc}
10009704:	1000905d 	.word	0x1000905d

10009708 <sms_imu_comp_check>:
	}
	return retVal;
}
/* Check if the compass responds */
int sms_imu_comp_check(void)
{
10009708:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
1000970a:	2100      	movs	r1, #0
1000970c:	200c      	movs	r0, #12
1000970e:	4b03      	ldr	r3, [pc, #12]	; (1000971c <sms_imu_comp_check+0x14>)
10009710:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009712:	3848      	subs	r0, #72	; 0x48
10009714:	1e43      	subs	r3, r0, #1
10009716:	4198      	sbcs	r0, r3
10009718:	4240      	negs	r0, r0
}
1000971a:	bd10      	pop	{r4, pc}
1000971c:	100096f1 	.word	0x100096f1

10009720 <sms_imu_mpu_initialize>:
	imu_device.config.ahrs = false;
	imu_device.config.init_ok = false;
}
/* MPU */
void sms_imu_mpu_initialize(void)
{
10009720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
10009722:	2200      	movs	r2, #0
10009724:	216b      	movs	r1, #107	; 0x6b
10009726:	2069      	movs	r0, #105	; 0x69
10009728:	4c21      	ldr	r4, [pc, #132]	; (100097b0 <sms_imu_mpu_initialize+0x90>)
1000972a:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
1000972c:	2064      	movs	r0, #100	; 0x64
1000972e:	4d21      	ldr	r5, [pc, #132]	; (100097b4 <sms_imu_mpu_initialize+0x94>)
10009730:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
10009732:	2201      	movs	r2, #1
10009734:	216b      	movs	r1, #107	; 0x6b
10009736:	2069      	movs	r0, #105	; 0x69
10009738:	47a0      	blx	r4
	delay_ms(200);
1000973a:	20c8      	movs	r0, #200	; 0xc8
1000973c:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	 //writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x05);		// gyro bandwidth = 10 Hz, delay = 17.85 ms -> max rate = 56 Hz
1000973e:	2205      	movs	r2, #5
10009740:	211a      	movs	r1, #26
10009742:	2069      	movs	r0, #105	; 0x69
10009744:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	//writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x0A);  	// Use a 90 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x63);  	// Use a 10 Hz rate; a rate consistent with the filter update rate
10009746:	2263      	movs	r2, #99	; 0x63
10009748:	2119      	movs	r1, #25
1000974a:	2069      	movs	r0, #105	; 0x69
1000974c:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
1000974e:	211b      	movs	r1, #27
10009750:	2069      	movs	r0, #105	; 0x69
10009752:	4e19      	ldr	r6, [pc, #100]	; (100097b8 <sms_imu_mpu_initialize+0x98>)
10009754:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (imu_device.config.g_scale << 3); // Set full scale range for the gyro
10009756:	4f19      	ldr	r7, [pc, #100]	; (100097bc <sms_imu_mpu_initialize+0x9c>)
10009758:	787a      	ldrb	r2, [r7, #1]
1000975a:	00d2      	lsls	r2, r2, #3
1000975c:	231a      	movs	r3, #26
1000975e:	4398      	bics	r0, r3
10009760:	4302      	orrs	r2, r0
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
10009762:	b2d2      	uxtb	r2, r2
10009764:	211b      	movs	r1, #27
10009766:	2069      	movs	r0, #105	; 0x69
10009768:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
1000976a:	211c      	movs	r1, #28
1000976c:	2069      	movs	r0, #105	; 0x69
1000976e:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (imu_device.config.a_scale << 3); // Set full scale range for the accelerometer
10009770:	783a      	ldrb	r2, [r7, #0]
10009772:	00d2      	lsls	r2, r2, #3
10009774:	2318      	movs	r3, #24
10009776:	4398      	bics	r0, r3
10009778:	4302      	orrs	r2, r0
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
1000977a:	b2d2      	uxtb	r2, r2
1000977c:	211c      	movs	r1, #28
1000977e:	2069      	movs	r0, #105	; 0x69
10009780:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009782:	211d      	movs	r1, #29
10009784:	2069      	movs	r0, #105	; 0x69
10009786:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009788:	23f0      	movs	r3, #240	; 0xf0
1000978a:	0002      	movs	r2, r0
1000978c:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz, delay 11.8 ms
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
1000978e:	3bed      	subs	r3, #237	; 0xed
10009790:	431a      	orrs	r2, r3
10009792:	211d      	movs	r1, #29
10009794:	2069      	movs	r0, #105	; 0x69
10009796:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, send 50 us interrupt pulses,
	// clear on ANY read, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x12);
10009798:	2212      	movs	r2, #18
1000979a:	2137      	movs	r1, #55	; 0x37
1000979c:	2069      	movs	r0, #105	; 0x69
1000979e:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
100097a0:	2201      	movs	r2, #1
100097a2:	2138      	movs	r1, #56	; 0x38
100097a4:	2069      	movs	r0, #105	; 0x69
100097a6:	47a0      	blx	r4
	delay_ms(100);
100097a8:	2064      	movs	r0, #100	; 0x64
100097aa:	47a8      	blx	r5
}
100097ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100097ae:	46c0      	nop			; (mov r8, r8)
100097b0:	1000923d 	.word	0x1000923d
100097b4:	1000a309 	.word	0x1000a309
100097b8:	100096f1 	.word	0x100096f1
100097bc:	1001a080 	.word	0x1001a080

100097c0 <sms_imu_selftest>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
/* Self-test */
void sms_imu_selftest(float *destination)
{
100097c0:	b5f0      	push	{r4, r5, r6, r7, lr}
100097c2:	465f      	mov	r7, fp
100097c4:	4656      	mov	r6, sl
100097c6:	464d      	mov	r5, r9
100097c8:	4644      	mov	r4, r8
100097ca:	b4f0      	push	{r4, r5, r6, r7}
100097cc:	b09d      	sub	sp, #116	; 0x74
100097ce:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
100097d0:	2206      	movs	r2, #6
100097d2:	2100      	movs	r1, #0
100097d4:	a81a      	add	r0, sp, #104	; 0x68
100097d6:	4ce0      	ldr	r4, [pc, #896]	; (10009b58 <sms_imu_selftest+0x398>)
100097d8:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
100097da:	220c      	movs	r2, #12
100097dc:	2100      	movs	r1, #0
100097de:	a817      	add	r0, sp, #92	; 0x5c
100097e0:	47a0      	blx	r4
100097e2:	220c      	movs	r2, #12
100097e4:	2100      	movs	r1, #0
100097e6:	a814      	add	r0, sp, #80	; 0x50
100097e8:	47a0      	blx	r4
100097ea:	220c      	movs	r2, #12
100097ec:	2100      	movs	r1, #0
100097ee:	a811      	add	r0, sp, #68	; 0x44
100097f0:	47a0      	blx	r4
100097f2:	220c      	movs	r2, #12
100097f4:	2100      	movs	r1, #0
100097f6:	a80e      	add	r0, sp, #56	; 0x38
100097f8:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
100097fa:	2200      	movs	r2, #0
100097fc:	2119      	movs	r1, #25
100097fe:	2069      	movs	r0, #105	; 0x69
10009800:	4cd6      	ldr	r4, [pc, #856]	; (10009b5c <sms_imu_selftest+0x39c>)
10009802:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009804:	2202      	movs	r2, #2
10009806:	211a      	movs	r1, #26
10009808:	2069      	movs	r0, #105	; 0x69
1000980a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000980c:	2200      	movs	r2, #0
1000980e:	211b      	movs	r1, #27
10009810:	2069      	movs	r0, #105	; 0x69
10009812:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
10009814:	2202      	movs	r2, #2
10009816:	211d      	movs	r1, #29
10009818:	2069      	movs	r0, #105	; 0x69
1000981a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
1000981c:	2200      	movs	r2, #0
1000981e:	211c      	movs	r1, #28
10009820:	2069      	movs	r0, #105	; 0x69
10009822:	47a0      	blx	r4
10009824:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009826:	ac1a      	add	r4, sp, #104	; 0x68
10009828:	4ecd      	ldr	r6, [pc, #820]	; (10009b60 <sms_imu_selftest+0x3a0>)
1000982a:	0023      	movs	r3, r4
1000982c:	2206      	movs	r2, #6
1000982e:	213b      	movs	r1, #59	; 0x3b
10009830:	2069      	movs	r0, #105	; 0x69
10009832:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009834:	7823      	ldrb	r3, [r4, #0]
10009836:	021b      	lsls	r3, r3, #8
10009838:	7862      	ldrb	r2, [r4, #1]
1000983a:	4313      	orrs	r3, r2
1000983c:	b21b      	sxth	r3, r3
1000983e:	9a14      	ldr	r2, [sp, #80]	; 0x50
10009840:	4694      	mov	ip, r2
10009842:	4463      	add	r3, ip
10009844:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
10009846:	78a3      	ldrb	r3, [r4, #2]
10009848:	021b      	lsls	r3, r3, #8
1000984a:	78e2      	ldrb	r2, [r4, #3]
1000984c:	4313      	orrs	r3, r2
1000984e:	b21b      	sxth	r3, r3
10009850:	9a15      	ldr	r2, [sp, #84]	; 0x54
10009852:	9200      	str	r2, [sp, #0]
10009854:	4694      	mov	ip, r2
10009856:	4463      	add	r3, ip
10009858:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000985a:	7923      	ldrb	r3, [r4, #4]
1000985c:	021b      	lsls	r3, r3, #8
1000985e:	7962      	ldrb	r2, [r4, #5]
10009860:	4313      	orrs	r3, r2
10009862:	b21b      	sxth	r3, r3
10009864:	9a16      	ldr	r2, [sp, #88]	; 0x58
10009866:	9200      	str	r2, [sp, #0]
10009868:	4694      	mov	ip, r2
1000986a:	4463      	add	r3, ip
1000986c:	9316      	str	r3, [sp, #88]	; 0x58
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000986e:	0023      	movs	r3, r4
10009870:	2206      	movs	r2, #6
10009872:	2143      	movs	r1, #67	; 0x43
10009874:	2069      	movs	r0, #105	; 0x69
10009876:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009878:	7823      	ldrb	r3, [r4, #0]
1000987a:	021b      	lsls	r3, r3, #8
1000987c:	7862      	ldrb	r2, [r4, #1]
1000987e:	4313      	orrs	r3, r2
10009880:	b21b      	sxth	r3, r3
10009882:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009884:	4694      	mov	ip, r2
10009886:	4463      	add	r3, ip
10009888:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000988a:	78a3      	ldrb	r3, [r4, #2]
1000988c:	021b      	lsls	r3, r3, #8
1000988e:	78e2      	ldrb	r2, [r4, #3]
10009890:	4313      	orrs	r3, r2
10009892:	b21b      	sxth	r3, r3
10009894:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009896:	9200      	str	r2, [sp, #0]
10009898:	4694      	mov	ip, r2
1000989a:	4463      	add	r3, ip
1000989c:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000989e:	7923      	ldrb	r3, [r4, #4]
100098a0:	021b      	lsls	r3, r3, #8
100098a2:	7962      	ldrb	r2, [r4, #5]
100098a4:	4313      	orrs	r3, r2
100098a6:	b21b      	sxth	r3, r3
100098a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
100098aa:	9200      	str	r2, [sp, #0]
100098ac:	4694      	mov	ip, r2
100098ae:	4463      	add	r3, ip
100098b0:	9319      	str	r3, [sp, #100]	; 0x64
100098b2:	3d01      	subs	r5, #1
100098b4:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
100098b6:	2d00      	cmp	r5, #0
100098b8:	d1b7      	bne.n	1000982a <sms_imu_selftest+0x6a>
100098ba:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
100098bc:	4ea9      	ldr	r6, [pc, #676]	; (10009b64 <sms_imu_selftest+0x3a4>)
100098be:	ad14      	add	r5, sp, #80	; 0x50
100098c0:	21c8      	movs	r1, #200	; 0xc8
100098c2:	5960      	ldr	r0, [r4, r5]
100098c4:	47b0      	blx	r6
100098c6:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
100098c8:	ad17      	add	r5, sp, #92	; 0x5c
100098ca:	21c8      	movs	r1, #200	; 0xc8
100098cc:	5960      	ldr	r0, [r4, r5]
100098ce:	47b0      	blx	r6
100098d0:	5160      	str	r0, [r4, r5]
100098d2:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
100098d4:	2c0c      	cmp	r4, #12
100098d6:	d1f2      	bne.n	100098be <sms_imu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
100098d8:	22e0      	movs	r2, #224	; 0xe0
100098da:	211c      	movs	r1, #28
100098dc:	2069      	movs	r0, #105	; 0x69
100098de:	4c9f      	ldr	r4, [pc, #636]	; (10009b5c <sms_imu_selftest+0x39c>)
100098e0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
100098e2:	22e0      	movs	r2, #224	; 0xe0
100098e4:	211c      	movs	r1, #28
100098e6:	2069      	movs	r0, #105	; 0x69
100098e8:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100098ea:	2019      	movs	r0, #25
100098ec:	4b9e      	ldr	r3, [pc, #632]	; (10009b68 <sms_imu_selftest+0x3a8>)
100098ee:	4798      	blx	r3
100098f0:	25c8      	movs	r5, #200	; 0xc8
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100098f2:	ac1a      	add	r4, sp, #104	; 0x68
100098f4:	4e9a      	ldr	r6, [pc, #616]	; (10009b60 <sms_imu_selftest+0x3a0>)
100098f6:	0023      	movs	r3, r4
100098f8:	2206      	movs	r2, #6
100098fa:	213b      	movs	r1, #59	; 0x3b
100098fc:	2069      	movs	r0, #105	; 0x69
100098fe:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009900:	7823      	ldrb	r3, [r4, #0]
10009902:	021b      	lsls	r3, r3, #8
10009904:	7862      	ldrb	r2, [r4, #1]
10009906:	4313      	orrs	r3, r2
10009908:	b21b      	sxth	r3, r3
1000990a:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000990c:	4694      	mov	ip, r2
1000990e:	4463      	add	r3, ip
10009910:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009912:	78a3      	ldrb	r3, [r4, #2]
10009914:	021b      	lsls	r3, r3, #8
10009916:	78e2      	ldrb	r2, [r4, #3]
10009918:	4313      	orrs	r3, r2
1000991a:	b21b      	sxth	r3, r3
1000991c:	9a12      	ldr	r2, [sp, #72]	; 0x48
1000991e:	9200      	str	r2, [sp, #0]
10009920:	4694      	mov	ip, r2
10009922:	4463      	add	r3, ip
10009924:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
10009926:	7923      	ldrb	r3, [r4, #4]
10009928:	021b      	lsls	r3, r3, #8
1000992a:	7962      	ldrb	r2, [r4, #5]
1000992c:	4313      	orrs	r3, r2
1000992e:	b21b      	sxth	r3, r3
10009930:	9a13      	ldr	r2, [sp, #76]	; 0x4c
10009932:	9200      	str	r2, [sp, #0]
10009934:	4694      	mov	ip, r2
10009936:	4463      	add	r3, ip
10009938:	9313      	str	r3, [sp, #76]	; 0x4c
	sms_i2c_master_read(address, subAddress, 1, data);
	return data[0];
}
void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000993a:	0023      	movs	r3, r4
1000993c:	2206      	movs	r2, #6
1000993e:	2143      	movs	r1, #67	; 0x43
10009940:	2069      	movs	r0, #105	; 0x69
10009942:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009944:	7823      	ldrb	r3, [r4, #0]
10009946:	021b      	lsls	r3, r3, #8
10009948:	7862      	ldrb	r2, [r4, #1]
1000994a:	4313      	orrs	r3, r2
1000994c:	b21b      	sxth	r3, r3
1000994e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10009950:	4694      	mov	ip, r2
10009952:	4463      	add	r3, ip
10009954:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
10009956:	78a3      	ldrb	r3, [r4, #2]
10009958:	021b      	lsls	r3, r3, #8
1000995a:	78e2      	ldrb	r2, [r4, #3]
1000995c:	4313      	orrs	r3, r2
1000995e:	b21b      	sxth	r3, r3
10009960:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
10009962:	9200      	str	r2, [sp, #0]
10009964:	4694      	mov	ip, r2
10009966:	4463      	add	r3, ip
10009968:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
1000996a:	7923      	ldrb	r3, [r4, #4]
1000996c:	021b      	lsls	r3, r3, #8
1000996e:	7962      	ldrb	r2, [r4, #5]
10009970:	4313      	orrs	r3, r2
10009972:	b21b      	sxth	r3, r3
10009974:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009976:	9200      	str	r2, [sp, #0]
10009978:	4694      	mov	ip, r2
1000997a:	4463      	add	r3, ip
1000997c:	9310      	str	r3, [sp, #64]	; 0x40
1000997e:	3d01      	subs	r5, #1
10009980:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009982:	2d00      	cmp	r5, #0
10009984:	d1b7      	bne.n	100098f6 <sms_imu_selftest+0x136>
10009986:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009988:	4e76      	ldr	r6, [pc, #472]	; (10009b64 <sms_imu_selftest+0x3a4>)
1000998a:	ad11      	add	r5, sp, #68	; 0x44
1000998c:	21c8      	movs	r1, #200	; 0xc8
1000998e:	5960      	ldr	r0, [r4, r5]
10009990:	47b0      	blx	r6
10009992:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009994:	ad0e      	add	r5, sp, #56	; 0x38
10009996:	21c8      	movs	r1, #200	; 0xc8
10009998:	5960      	ldr	r0, [r4, r5]
1000999a:	47b0      	blx	r6
1000999c:	5160      	str	r0, [r4, r5]
1000999e:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
100099a0:	2c0c      	cmp	r4, #12
100099a2:	d1f2      	bne.n	1000998a <sms_imu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
100099a4:	2200      	movs	r2, #0
100099a6:	211c      	movs	r1, #28
100099a8:	2069      	movs	r0, #105	; 0x69
100099aa:	4c6c      	ldr	r4, [pc, #432]	; (10009b5c <sms_imu_selftest+0x39c>)
100099ac:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
100099ae:	2200      	movs	r2, #0
100099b0:	211b      	movs	r1, #27
100099b2:	2069      	movs	r0, #105	; 0x69
100099b4:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
100099b6:	2019      	movs	r0, #25
100099b8:	4b6b      	ldr	r3, [pc, #428]	; (10009b68 <sms_imu_selftest+0x3a8>)
100099ba:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
100099bc:	210d      	movs	r1, #13
100099be:	2069      	movs	r0, #105	; 0x69
100099c0:	4d6a      	ldr	r5, [pc, #424]	; (10009b6c <sms_imu_selftest+0x3ac>)
100099c2:	47a8      	blx	r5
100099c4:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
100099c6:	210e      	movs	r1, #14
100099c8:	2069      	movs	r0, #105	; 0x69
100099ca:	47a8      	blx	r5
100099cc:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
100099ce:	210f      	movs	r1, #15
100099d0:	2069      	movs	r0, #105	; 0x69
100099d2:	47a8      	blx	r5
100099d4:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
100099d6:	2100      	movs	r1, #0
100099d8:	2069      	movs	r0, #105	; 0x69
100099da:	47a8      	blx	r5
100099dc:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
100099de:	2101      	movs	r1, #1
100099e0:	2069      	movs	r0, #105	; 0x69
100099e2:	47a8      	blx	r5
100099e4:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
100099e6:	2102      	movs	r1, #2
100099e8:	2069      	movs	r0, #105	; 0x69
100099ea:	47a8      	blx	r5
100099ec:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
100099ee:	4b60      	ldr	r3, [pc, #384]	; (10009b70 <sms_imu_selftest+0x3b0>)
100099f0:	469a      	mov	sl, r3
100099f2:	0020      	movs	r0, r4
100099f4:	4798      	blx	r3
100099f6:	4b5f      	ldr	r3, [pc, #380]	; (10009b74 <sms_imu_selftest+0x3b4>)
100099f8:	4699      	mov	r9, r3
100099fa:	4798      	blx	r3
100099fc:	4e5e      	ldr	r6, [pc, #376]	; (10009b78 <sms_imu_selftest+0x3b8>)
100099fe:	2200      	movs	r2, #0
10009a00:	4b5e      	ldr	r3, [pc, #376]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a02:	47b0      	blx	r6
10009a04:	0002      	movs	r2, r0
10009a06:	000b      	movs	r3, r1
10009a08:	485d      	ldr	r0, [pc, #372]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a0a:	495e      	ldr	r1, [pc, #376]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a0c:	4f5e      	ldr	r7, [pc, #376]	; (10009b88 <sms_imu_selftest+0x3c8>)
10009a0e:	47b8      	blx	r7
10009a10:	4d5e      	ldr	r5, [pc, #376]	; (10009b8c <sms_imu_selftest+0x3cc>)
10009a12:	2200      	movs	r2, #0
10009a14:	4b5e      	ldr	r3, [pc, #376]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a16:	47a8      	blx	r5
10009a18:	4c5e      	ldr	r4, [pc, #376]	; (10009b94 <sms_imu_selftest+0x3d4>)
10009a1a:	47a0      	blx	r4
10009a1c:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
10009a1e:	9800      	ldr	r0, [sp, #0]
10009a20:	47d0      	blx	sl
10009a22:	47c8      	blx	r9
10009a24:	2200      	movs	r2, #0
10009a26:	4b55      	ldr	r3, [pc, #340]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a28:	47b0      	blx	r6
10009a2a:	0002      	movs	r2, r0
10009a2c:	000b      	movs	r3, r1
10009a2e:	4854      	ldr	r0, [pc, #336]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a30:	4954      	ldr	r1, [pc, #336]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a32:	47b8      	blx	r7
10009a34:	2200      	movs	r2, #0
10009a36:	4b56      	ldr	r3, [pc, #344]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a38:	47a8      	blx	r5
10009a3a:	47a0      	blx	r4
10009a3c:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
10009a3e:	9804      	ldr	r0, [sp, #16]
10009a40:	47d0      	blx	sl
10009a42:	47c8      	blx	r9
10009a44:	2200      	movs	r2, #0
10009a46:	4b4d      	ldr	r3, [pc, #308]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a48:	47b0      	blx	r6
10009a4a:	0002      	movs	r2, r0
10009a4c:	000b      	movs	r3, r1
10009a4e:	484c      	ldr	r0, [pc, #304]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a50:	494c      	ldr	r1, [pc, #304]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a52:	47b8      	blx	r7
10009a54:	2200      	movs	r2, #0
10009a56:	4b4e      	ldr	r3, [pc, #312]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a58:	47a8      	blx	r5
10009a5a:	47a0      	blx	r4
10009a5c:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
10009a5e:	9805      	ldr	r0, [sp, #20]
10009a60:	47d0      	blx	sl
10009a62:	47c8      	blx	r9
10009a64:	2200      	movs	r2, #0
10009a66:	4b45      	ldr	r3, [pc, #276]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a68:	47b0      	blx	r6
10009a6a:	0002      	movs	r2, r0
10009a6c:	000b      	movs	r3, r1
10009a6e:	4844      	ldr	r0, [pc, #272]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a70:	4944      	ldr	r1, [pc, #272]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a72:	47b8      	blx	r7
10009a74:	2200      	movs	r2, #0
10009a76:	4b46      	ldr	r3, [pc, #280]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a78:	47a8      	blx	r5
10009a7a:	47a0      	blx	r4
10009a7c:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
10009a7e:	9806      	ldr	r0, [sp, #24]
10009a80:	47d0      	blx	sl
10009a82:	47c8      	blx	r9
10009a84:	2200      	movs	r2, #0
10009a86:	4b3d      	ldr	r3, [pc, #244]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009a88:	47b0      	blx	r6
10009a8a:	0002      	movs	r2, r0
10009a8c:	000b      	movs	r3, r1
10009a8e:	483c      	ldr	r0, [pc, #240]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009a90:	493c      	ldr	r1, [pc, #240]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009a92:	47b8      	blx	r7
10009a94:	2200      	movs	r2, #0
10009a96:	4b3e      	ldr	r3, [pc, #248]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009a98:	47a8      	blx	r5
10009a9a:	47a0      	blx	r4
10009a9c:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
10009a9e:	9807      	ldr	r0, [sp, #28]
10009aa0:	47d0      	blx	sl
10009aa2:	47c8      	blx	r9
10009aa4:	2200      	movs	r2, #0
10009aa6:	4b35      	ldr	r3, [pc, #212]	; (10009b7c <sms_imu_selftest+0x3bc>)
10009aa8:	47b0      	blx	r6
10009aaa:	0002      	movs	r2, r0
10009aac:	000b      	movs	r3, r1
10009aae:	4834      	ldr	r0, [pc, #208]	; (10009b80 <sms_imu_selftest+0x3c0>)
10009ab0:	4934      	ldr	r1, [pc, #208]	; (10009b84 <sms_imu_selftest+0x3c4>)
10009ab2:	47b8      	blx	r7
10009ab4:	2200      	movs	r2, #0
10009ab6:	4b36      	ldr	r3, [pc, #216]	; (10009b90 <sms_imu_selftest+0x3d0>)
10009ab8:	47a8      	blx	r5
10009aba:	47a0      	blx	r4
10009abc:	900d      	str	r0, [sp, #52]	; 0x34
10009abe:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009ac0:	4b35      	ldr	r3, [pc, #212]	; (10009b98 <sms_imu_selftest+0x3d8>)
10009ac2:	4699      	mov	r9, r3
10009ac4:	4d2b      	ldr	r5, [pc, #172]	; (10009b74 <sms_imu_selftest+0x3b4>)
10009ac6:	4b31      	ldr	r3, [pc, #196]	; (10009b8c <sms_imu_selftest+0x3cc>)
10009ac8:	4698      	mov	r8, r3
10009aca:	4b34      	ldr	r3, [pc, #208]	; (10009b9c <sms_imu_selftest+0x3dc>)
10009acc:	469a      	mov	sl, r3
10009ace:	4f2a      	ldr	r7, [pc, #168]	; (10009b78 <sms_imu_selftest+0x3b8>)
10009ad0:	4e30      	ldr	r6, [pc, #192]	; (10009b94 <sms_imu_selftest+0x3d4>)
10009ad2:	ab11      	add	r3, sp, #68	; 0x44
10009ad4:	58e3      	ldr	r3, [r4, r3]
10009ad6:	aa14      	add	r2, sp, #80	; 0x50
10009ad8:	58a0      	ldr	r0, [r4, r2]
10009ada:	1a18      	subs	r0, r3, r0
10009adc:	47c8      	blx	r9
10009ade:	47a8      	blx	r5
10009ae0:	2200      	movs	r2, #0
10009ae2:	4b2f      	ldr	r3, [pc, #188]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009ae4:	47c0      	blx	r8
10009ae6:	9000      	str	r0, [sp, #0]
10009ae8:	9101      	str	r1, [sp, #4]
10009aea:	ab08      	add	r3, sp, #32
10009aec:	58e0      	ldr	r0, [r4, r3]
10009aee:	47a8      	blx	r5
10009af0:	0002      	movs	r2, r0
10009af2:	000b      	movs	r3, r1
10009af4:	9800      	ldr	r0, [sp, #0]
10009af6:	9901      	ldr	r1, [sp, #4]
10009af8:	47d0      	blx	sl
10009afa:	2200      	movs	r2, #0
10009afc:	4b28      	ldr	r3, [pc, #160]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009afe:	47b8      	blx	r7
10009b00:	47b0      	blx	r6
10009b02:	9b03      	ldr	r3, [sp, #12]
10009b04:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009b06:	469b      	mov	fp, r3
10009b08:	44a3      	add	fp, r4
10009b0a:	ab0e      	add	r3, sp, #56	; 0x38
10009b0c:	58e3      	ldr	r3, [r4, r3]
10009b0e:	aa17      	add	r2, sp, #92	; 0x5c
10009b10:	58a0      	ldr	r0, [r4, r2]
10009b12:	1a18      	subs	r0, r3, r0
10009b14:	47c8      	blx	r9
10009b16:	47a8      	blx	r5
10009b18:	2200      	movs	r2, #0
10009b1a:	4b21      	ldr	r3, [pc, #132]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009b1c:	47c0      	blx	r8
10009b1e:	9000      	str	r0, [sp, #0]
10009b20:	9101      	str	r1, [sp, #4]
10009b22:	0023      	movs	r3, r4
10009b24:	aa08      	add	r2, sp, #32
10009b26:	4694      	mov	ip, r2
10009b28:	4463      	add	r3, ip
10009b2a:	68d8      	ldr	r0, [r3, #12]
10009b2c:	47a8      	blx	r5
10009b2e:	0002      	movs	r2, r0
10009b30:	000b      	movs	r3, r1
10009b32:	9800      	ldr	r0, [sp, #0]
10009b34:	9901      	ldr	r1, [sp, #4]
10009b36:	47d0      	blx	sl
10009b38:	2200      	movs	r2, #0
10009b3a:	4b19      	ldr	r3, [pc, #100]	; (10009ba0 <sms_imu_selftest+0x3e0>)
10009b3c:	47b8      	blx	r7
10009b3e:	47b0      	blx	r6
10009b40:	465b      	mov	r3, fp
10009b42:	60d8      	str	r0, [r3, #12]
10009b44:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
10009b46:	2c0c      	cmp	r4, #12
10009b48:	d1c3      	bne.n	10009ad2 <sms_imu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
10009b4a:	b01d      	add	sp, #116	; 0x74
10009b4c:	bc3c      	pop	{r2, r3, r4, r5}
10009b4e:	4690      	mov	r8, r2
10009b50:	4699      	mov	r9, r3
10009b52:	46a2      	mov	sl, r4
10009b54:	46ab      	mov	fp, r5
10009b56:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009b58:	1001572d 	.word	0x1001572d
10009b5c:	1000923d 	.word	0x1000923d
10009b60:	1000905d 	.word	0x1000905d
10009b64:	10012b15 	.word	0x10012b15
10009b68:	1000a309 	.word	0x1000a309
10009b6c:	100096f1 	.word	0x100096f1
10009b70:	1001383d 	.word	0x1001383d
10009b74:	10015495 	.word	0x10015495
10009b78:	10014c4d 	.word	0x10014c4d
10009b7c:	3ff00000 	.word	0x3ff00000
10009b80:	c28f5c29 	.word	0xc28f5c29
10009b84:	3ff028f5 	.word	0x3ff028f5
10009b88:	100117b9 	.word	0x100117b9
10009b8c:	10014759 	.word	0x10014759
10009b90:	40a47800 	.word	0x40a47800
10009b94:	1001553d 	.word	0x1001553d
10009b98:	100137ad 	.word	0x100137ad
10009b9c:	10013f11 	.word	0x10013f11
10009ba0:	40590000 	.word	0x40590000

10009ba4 <sms_imu_mpu_check>:
	return 0;
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
10009ba4:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
10009ba6:	2175      	movs	r1, #117	; 0x75
10009ba8:	2069      	movs	r0, #105	; 0x69
10009baa:	4b06      	ldr	r3, [pc, #24]	; (10009bc4 <sms_imu_mpu_check+0x20>)
10009bac:	4798      	blx	r3
	if(c == 0x71) {
10009bae:	2871      	cmp	r0, #113	; 0x71
10009bb0:	d104      	bne.n	10009bbc <sms_imu_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_imu_selftest(imu_device.config.self_test);
10009bb2:	4805      	ldr	r0, [pc, #20]	; (10009bc8 <sms_imu_mpu_check+0x24>)
10009bb4:	4b05      	ldr	r3, [pc, #20]	; (10009bcc <sms_imu_mpu_check+0x28>)
10009bb6:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
10009bb8:	2000      	movs	r0, #0
10009bba:	e001      	b.n	10009bc0 <sms_imu_mpu_check+0x1c>
}

/* Sensor setup functions... */
/* Check if MPU responds and make a self test */
int sms_imu_mpu_check(void) {
	int retVal = -1;
10009bbc:	2001      	movs	r0, #1
10009bbe:	4240      	negs	r0, r0
		sms_imu_selftest(imu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009bc0:	bd10      	pop	{r4, pc}
10009bc2:	46c0      	nop			; (mov r8, r8)
10009bc4:	100096f1 	.word	0x100096f1
10009bc8:	1001a088 	.word	0x1001a088
10009bcc:	100097c1 	.word	0x100097c1

10009bd0 <sms_imu_startup>:
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}
/* Startup function */
int sms_imu_startup(void)
{
10009bd0:	b510      	push	{r4, lr}
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009bd2:	4b0d      	ldr	r3, [pc, #52]	; (10009c08 <sms_imu_startup+0x38>)
10009bd4:	4798      	blx	r3
10009bd6:	2800      	cmp	r0, #0
10009bd8:	d10e      	bne.n	10009bf8 <sms_imu_startup+0x28>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
10009bda:	490c      	ldr	r1, [pc, #48]	; (10009c0c <sms_imu_startup+0x3c>)
10009bdc:	0008      	movs	r0, r1
10009bde:	380c      	subs	r0, #12
10009be0:	4b0b      	ldr	r3, [pc, #44]	; (10009c10 <sms_imu_startup+0x40>)
10009be2:	4798      	blx	r3
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
10009be4:	4b0b      	ldr	r3, [pc, #44]	; (10009c14 <sms_imu_startup+0x44>)
10009be6:	4798      	blx	r3
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009be8:	4b0b      	ldr	r3, [pc, #44]	; (10009c18 <sms_imu_startup+0x48>)
10009bea:	4798      	blx	r3
10009bec:	1e04      	subs	r4, r0, #0
10009bee:	d106      	bne.n	10009bfe <sms_imu_startup+0x2e>
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
10009bf0:	480a      	ldr	r0, [pc, #40]	; (10009c1c <sms_imu_startup+0x4c>)
10009bf2:	4b0b      	ldr	r3, [pc, #44]	; (10009c20 <sms_imu_startup+0x50>)
10009bf4:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
10009bf6:	e004      	b.n	10009c02 <sms_imu_startup+0x32>
}
/* Startup function */
int sms_imu_startup(void)
{
	/* MPU */
	if(sms_imu_mpu_check()) return -1;
10009bf8:	2401      	movs	r4, #1
10009bfa:	4264      	negs	r4, r4
10009bfc:	e001      	b.n	10009c02 <sms_imu_startup+0x32>
	sms_imu_mpu_calibrate(imu_device.config.gyro_bias, imu_device.config.accel_bias);
	//DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(imu_device.config.gyro_bias[0] * 10000), (uint32_t)(imu_device.config.gyro_bias[1] * 10000), (uint32_t)(imu_device.config.gyro_bias[2] * 10000), (uint32_t)(imu_device.config.accel_bias[0] * 10000), (uint32_t)(imu_device.config.accel_bias[1] * 10000), (uint32_t)(imu_device.config.accel_bias[2] * 10000));
	sms_imu_mpu_initialize();
	
	/* Compass */
	if(sms_imu_comp_check()) return -1;
10009bfe:	2401      	movs	r4, #1
10009c00:	4264      	negs	r4, r4
	sms_imu_comp_initialize(imu_device.config.mag_calibration);
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	return 0;
}
10009c02:	0020      	movs	r0, r4
10009c04:	bd10      	pop	{r4, pc}
10009c06:	46c0      	nop			; (mov r8, r8)
10009c08:	10009ba5 	.word	0x10009ba5
10009c0c:	1001a0ac 	.word	0x1001a0ac
10009c10:	10009255 	.word	0x10009255
10009c14:	10009721 	.word	0x10009721
10009c18:	10009709 	.word	0x10009709
10009c1c:	1001a0c4 	.word	0x1001a0c4
10009c20:	100095cd 	.word	0x100095cd

10009c24 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0);
}


void sms_led_switch_on(enum sms_leds led)
{
10009c24:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009c26:	2100      	movs	r1, #0
10009c28:	4b01      	ldr	r3, [pc, #4]	; (10009c30 <sms_led_switch_on+0xc>)
10009c2a:	4798      	blx	r3
}
10009c2c:	bd10      	pop	{r4, pc}
10009c2e:	46c0      	nop			; (mov r8, r8)
10009c30:	1000abed 	.word	0x1000abed

10009c34 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009c34:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009c36:	2101      	movs	r1, #1
10009c38:	4b01      	ldr	r3, [pc, #4]	; (10009c40 <sms_led_switch_off+0xc>)
10009c3a:	4798      	blx	r3
}
10009c3c:	bd10      	pop	{r4, pc}
10009c3e:	46c0      	nop			; (mov r8, r8)
10009c40:	1000abed 	.word	0x1000abed

10009c44 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009c44:	b510      	push	{r4, lr}
10009c46:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009c48:	ac01      	add	r4, sp, #4
10009c4a:	0020      	movs	r0, r4
10009c4c:	4b0a      	ldr	r3, [pc, #40]	; (10009c78 <sms_led_gpio_init+0x34>)
10009c4e:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009c50:	2301      	movs	r3, #1
10009c52:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0, &config_gpio_pin) != STATUS_OK) {
10009c54:	0021      	movs	r1, r4
10009c56:	2016      	movs	r0, #22
10009c58:	4b08      	ldr	r3, [pc, #32]	; (10009c7c <sms_led_gpio_init+0x38>)
10009c5a:	4798      	blx	r3
10009c5c:	2800      	cmp	r0, #0
10009c5e:	d005      	beq.n	10009c6c <sms_led_gpio_init+0x28>
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
10009c60:	4807      	ldr	r0, [pc, #28]	; (10009c80 <sms_led_gpio_init+0x3c>)
10009c62:	4b08      	ldr	r3, [pc, #32]	; (10009c84 <sms_led_gpio_init+0x40>)
10009c64:	4798      	blx	r3
10009c66:	4808      	ldr	r0, [pc, #32]	; (10009c88 <sms_led_gpio_init+0x44>)
10009c68:	4b08      	ldr	r3, [pc, #32]	; (10009c8c <sms_led_gpio_init+0x48>)
10009c6a:	4798      	blx	r3
    }
    sms_led_switch_off(SMS_LED_0);
10009c6c:	2016      	movs	r0, #22
10009c6e:	4b08      	ldr	r3, [pc, #32]	; (10009c90 <sms_led_gpio_init+0x4c>)
10009c70:	4798      	blx	r3
}
10009c72:	b002      	add	sp, #8
10009c74:	bd10      	pop	{r4, pc}
10009c76:	46c0      	nop			; (mov r8, r8)
10009c78:	1000a985 	.word	0x1000a985
10009c7c:	1000a995 	.word	0x1000a995
10009c80:	100168d4 	.word	0x100168d4
10009c84:	10015995 	.word	0x10015995
10009c88:	1001700c 	.word	0x1001700c
10009c8c:	10015875 	.word	0x10015875
10009c90:	10009c35 	.word	0x10009c35

10009c94 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
10009c94:	b510      	push	{r4, lr}
10009c96:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
10009c98:	4b05      	ldr	r3, [pc, #20]	; (10009cb0 <sms_led_toggle+0x1c>)
10009c9a:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10009c9c:	2800      	cmp	r0, #0
10009c9e:	d103      	bne.n	10009ca8 <sms_led_toggle+0x14>
10009ca0:	0020      	movs	r0, r4
10009ca2:	4b04      	ldr	r3, [pc, #16]	; (10009cb4 <sms_led_toggle+0x20>)
10009ca4:	4798      	blx	r3
10009ca6:	e002      	b.n	10009cae <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
10009ca8:	0020      	movs	r0, r4
10009caa:	4b03      	ldr	r3, [pc, #12]	; (10009cb8 <sms_led_toggle+0x24>)
10009cac:	4798      	blx	r3
}
10009cae:	bd10      	pop	{r4, pc}
10009cb0:	1000ab9d 	.word	0x1000ab9d
10009cb4:	10009c35 	.word	0x10009c35
10009cb8:	10009c25 	.word	0x10009c25

10009cbc <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009cbc:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009cbe:	4b0c      	ldr	r3, [pc, #48]	; (10009cf0 <sms_led_blink_start+0x34>)
10009cc0:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10009cc2:	2200      	movs	r2, #0
10009cc4:	4b0b      	ldr	r3, [pc, #44]	; (10009cf4 <sms_led_blink_start+0x38>)
10009cc6:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009cc8:	4b0b      	ldr	r3, [pc, #44]	; (10009cf8 <sms_led_blink_start+0x3c>)
10009cca:	781b      	ldrb	r3, [r3, #0]
10009ccc:	b2db      	uxtb	r3, r3
10009cce:	2b02      	cmp	r3, #2
10009cd0:	d002      	beq.n	10009cd8 <sms_led_blink_start+0x1c>
10009cd2:	2b03      	cmp	r3, #3
10009cd4:	d002      	beq.n	10009cdc <sms_led_blink_start+0x20>
10009cd6:	e004      	b.n	10009ce2 <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009cd8:	2164      	movs	r1, #100	; 0x64
10009cda:	e003      	b.n	10009ce4 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10009cdc:	21c8      	movs	r1, #200	; 0xc8
10009cde:	0049      	lsls	r1, r1, #1
        break;
10009ce0:	e000      	b.n	10009ce4 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10009ce2:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009ce4:	2201      	movs	r2, #1
10009ce6:	2001      	movs	r0, #1
10009ce8:	4b04      	ldr	r3, [pc, #16]	; (10009cfc <sms_led_blink_start+0x40>)
10009cea:	4798      	blx	r3
}
10009cec:	bd10      	pop	{r4, pc}
10009cee:	46c0      	nop			; (mov r8, r8)
10009cf0:	10009c25 	.word	0x10009c25
10009cf4:	1001a16c 	.word	0x1001a16c
10009cf8:	1001a067 	.word	0x1001a067
10009cfc:	1000a29d 	.word	0x1000a29d

10009d00 <sms_pressure_init_variables>:
#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	//pressure_device.hal.current_state = MS58_STATE_NONE;
	pressure_device.state = PRESSURE_STATE_OFF;
10009d00:	4b05      	ldr	r3, [pc, #20]	; (10009d18 <sms_pressure_init_variables+0x18>)
10009d02:	2200      	movs	r2, #0
10009d04:	212b      	movs	r1, #43	; 0x2b
10009d06:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.rts = false;
10009d08:	3901      	subs	r1, #1
10009d0a:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.enabled = false;
10009d0c:	3902      	subs	r1, #2
10009d0e:	545a      	strb	r2, [r3, r1]
	pressure_device.interrupt.new_value = false;
10009d10:	3101      	adds	r1, #1
10009d12:	545a      	strb	r2, [r3, r1]
}
10009d14:	4770      	bx	lr
10009d16:	46c0      	nop			; (mov r8, r8)
10009d18:	10019fcc 	.word	0x10019fcc

10009d1c <sms_pressure_ms58_reset>:
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
}

enum status_code sms_pressure_ms58_reset(void)
{
10009d1c:	b510      	push	{r4, lr}
10009d1e:	b082      	sub	sp, #8
	enum status_code status;
    spi_wdata[0] = MS58_RESET;
10009d20:	4a08      	ldr	r2, [pc, #32]	; (10009d44 <sms_pressure_ms58_reset+0x28>)
10009d22:	231e      	movs	r3, #30
10009d24:	7013      	strb	r3, [r2, #0]
    if((status = sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1)) != STATUS_OK) return status;
10009d26:	3b1d      	subs	r3, #29
10009d28:	9300      	str	r3, [sp, #0]
10009d2a:	4b07      	ldr	r3, [pc, #28]	; (10009d48 <sms_pressure_ms58_reset+0x2c>)
10009d2c:	4907      	ldr	r1, [pc, #28]	; (10009d4c <sms_pressure_ms58_reset+0x30>)
10009d2e:	4808      	ldr	r0, [pc, #32]	; (10009d50 <sms_pressure_ms58_reset+0x34>)
10009d30:	4c08      	ldr	r4, [pc, #32]	; (10009d54 <sms_pressure_ms58_reset+0x38>)
10009d32:	47a0      	blx	r4
10009d34:	1e04      	subs	r4, r0, #0
10009d36:	d102      	bne.n	10009d3e <sms_pressure_ms58_reset+0x22>
	
	delay_ms(SMS_PRESSURE_RESET_MS);
10009d38:	2003      	movs	r0, #3
10009d3a:	4b07      	ldr	r3, [pc, #28]	; (10009d58 <sms_pressure_ms58_reset+0x3c>)
10009d3c:	4798      	blx	r3
	return STATUS_OK;
}
10009d3e:	0020      	movs	r0, r4
10009d40:	b002      	add	sp, #8
10009d42:	bd10      	pop	{r4, pc}
10009d44:	10019fbc 	.word	0x10019fbc
10009d48:	10019fa8 	.word	0x10019fa8
10009d4c:	1001a068 	.word	0x1001a068
10009d50:	1001a074 	.word	0x1001a074
10009d54:	1000a181 	.word	0x1000a181
10009d58:	1000a309 	.word	0x1000a309

10009d5c <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

int sms_pressure_ms58_read_prom(void)
{
10009d5c:	b510      	push	{r4, lr}
10009d5e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009d60:	4a4c      	ldr	r2, [pc, #304]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009d62:	23a2      	movs	r3, #162	; 0xa2
10009d64:	7013      	strb	r3, [r2, #0]
    spi_wdata[1] = 0x00;
10009d66:	2300      	movs	r3, #0
10009d68:	7053      	strb	r3, [r2, #1]
    spi_wdata[2] = 0x00;
10009d6a:	7093      	strb	r3, [r2, #2]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009d6c:	3303      	adds	r3, #3
10009d6e:	9300      	str	r3, [sp, #0]
10009d70:	4b49      	ldr	r3, [pc, #292]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009d72:	494a      	ldr	r1, [pc, #296]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009d74:	484a      	ldr	r0, [pc, #296]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009d76:	4c4b      	ldr	r4, [pc, #300]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009d78:	47a0      	blx	r4
10009d7a:	2800      	cmp	r0, #0
10009d7c:	d173      	bne.n	10009e66 <sms_pressure_ms58_read_prom+0x10a>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009d7e:	4b46      	ldr	r3, [pc, #280]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009d80:	785a      	ldrb	r2, [r3, #1]
10009d82:	0212      	lsls	r2, r2, #8
10009d84:	7899      	ldrb	r1, [r3, #2]
10009d86:	430a      	orrs	r2, r1
10009d88:	4947      	ldr	r1, [pc, #284]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009d8a:	80ca      	strh	r2, [r1, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009d8c:	4a41      	ldr	r2, [pc, #260]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009d8e:	21a4      	movs	r1, #164	; 0xa4
10009d90:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009d92:	39a1      	subs	r1, #161	; 0xa1
10009d94:	9100      	str	r1, [sp, #0]
10009d96:	4941      	ldr	r1, [pc, #260]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009d98:	4841      	ldr	r0, [pc, #260]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009d9a:	4c42      	ldr	r4, [pc, #264]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009d9c:	47a0      	blx	r4
10009d9e:	2800      	cmp	r0, #0
10009da0:	d164      	bne.n	10009e6c <sms_pressure_ms58_read_prom+0x110>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009da2:	4b3d      	ldr	r3, [pc, #244]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009da4:	785a      	ldrb	r2, [r3, #1]
10009da6:	0212      	lsls	r2, r2, #8
10009da8:	7899      	ldrb	r1, [r3, #2]
10009daa:	430a      	orrs	r2, r1
10009dac:	493e      	ldr	r1, [pc, #248]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009dae:	810a      	strh	r2, [r1, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009db0:	4a38      	ldr	r2, [pc, #224]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009db2:	21a6      	movs	r1, #166	; 0xa6
10009db4:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009db6:	39a3      	subs	r1, #163	; 0xa3
10009db8:	9100      	str	r1, [sp, #0]
10009dba:	4938      	ldr	r1, [pc, #224]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009dbc:	4838      	ldr	r0, [pc, #224]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009dbe:	4c39      	ldr	r4, [pc, #228]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009dc0:	47a0      	blx	r4
10009dc2:	2800      	cmp	r0, #0
10009dc4:	d155      	bne.n	10009e72 <sms_pressure_ms58_read_prom+0x116>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009dc6:	4b34      	ldr	r3, [pc, #208]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009dc8:	785a      	ldrb	r2, [r3, #1]
10009dca:	0212      	lsls	r2, r2, #8
10009dcc:	7899      	ldrb	r1, [r3, #2]
10009dce:	430a      	orrs	r2, r1
10009dd0:	4935      	ldr	r1, [pc, #212]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009dd2:	814a      	strh	r2, [r1, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009dd4:	4a2f      	ldr	r2, [pc, #188]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009dd6:	21a8      	movs	r1, #168	; 0xa8
10009dd8:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009dda:	39a5      	subs	r1, #165	; 0xa5
10009ddc:	9100      	str	r1, [sp, #0]
10009dde:	492f      	ldr	r1, [pc, #188]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009de0:	482f      	ldr	r0, [pc, #188]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009de2:	4c30      	ldr	r4, [pc, #192]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009de4:	47a0      	blx	r4
10009de6:	2800      	cmp	r0, #0
10009de8:	d146      	bne.n	10009e78 <sms_pressure_ms58_read_prom+0x11c>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009dea:	4b2b      	ldr	r3, [pc, #172]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009dec:	785a      	ldrb	r2, [r3, #1]
10009dee:	0212      	lsls	r2, r2, #8
10009df0:	7899      	ldrb	r1, [r3, #2]
10009df2:	430a      	orrs	r2, r1
10009df4:	492c      	ldr	r1, [pc, #176]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009df6:	818a      	strh	r2, [r1, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009df8:	4a26      	ldr	r2, [pc, #152]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009dfa:	21aa      	movs	r1, #170	; 0xaa
10009dfc:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009dfe:	39a7      	subs	r1, #167	; 0xa7
10009e00:	9100      	str	r1, [sp, #0]
10009e02:	4926      	ldr	r1, [pc, #152]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009e04:	4826      	ldr	r0, [pc, #152]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009e06:	4c27      	ldr	r4, [pc, #156]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009e08:	47a0      	blx	r4
10009e0a:	2800      	cmp	r0, #0
10009e0c:	d137      	bne.n	10009e7e <sms_pressure_ms58_read_prom+0x122>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e0e:	4b22      	ldr	r3, [pc, #136]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009e10:	785a      	ldrb	r2, [r3, #1]
10009e12:	0212      	lsls	r2, r2, #8
10009e14:	7899      	ldrb	r1, [r3, #2]
10009e16:	430a      	orrs	r2, r1
10009e18:	4923      	ldr	r1, [pc, #140]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009e1a:	81ca      	strh	r2, [r1, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009e1c:	4a1d      	ldr	r2, [pc, #116]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009e1e:	21ac      	movs	r1, #172	; 0xac
10009e20:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e22:	39a9      	subs	r1, #169	; 0xa9
10009e24:	9100      	str	r1, [sp, #0]
10009e26:	491d      	ldr	r1, [pc, #116]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009e28:	481d      	ldr	r0, [pc, #116]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009e2a:	4c1e      	ldr	r4, [pc, #120]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009e2c:	47a0      	blx	r4
10009e2e:	2800      	cmp	r0, #0
10009e30:	d128      	bne.n	10009e84 <sms_pressure_ms58_read_prom+0x128>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e32:	4b19      	ldr	r3, [pc, #100]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009e34:	785a      	ldrb	r2, [r3, #1]
10009e36:	0212      	lsls	r2, r2, #8
10009e38:	7899      	ldrb	r1, [r3, #2]
10009e3a:	430a      	orrs	r2, r1
10009e3c:	491a      	ldr	r1, [pc, #104]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009e3e:	820a      	strh	r2, [r1, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009e40:	4a14      	ldr	r2, [pc, #80]	; (10009e94 <sms_pressure_ms58_read_prom+0x138>)
10009e42:	21ae      	movs	r1, #174	; 0xae
10009e44:	7011      	strb	r1, [r2, #0]
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e46:	39ab      	subs	r1, #171	; 0xab
10009e48:	9100      	str	r1, [sp, #0]
10009e4a:	4914      	ldr	r1, [pc, #80]	; (10009e9c <sms_pressure_ms58_read_prom+0x140>)
10009e4c:	4814      	ldr	r0, [pc, #80]	; (10009ea0 <sms_pressure_ms58_read_prom+0x144>)
10009e4e:	4c15      	ldr	r4, [pc, #84]	; (10009ea4 <sms_pressure_ms58_read_prom+0x148>)
10009e50:	47a0      	blx	r4
10009e52:	2800      	cmp	r0, #0
10009e54:	d119      	bne.n	10009e8a <sms_pressure_ms58_read_prom+0x12e>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009e56:	4a10      	ldr	r2, [pc, #64]	; (10009e98 <sms_pressure_ms58_read_prom+0x13c>)
10009e58:	7853      	ldrb	r3, [r2, #1]
10009e5a:	021b      	lsls	r3, r3, #8
10009e5c:	7892      	ldrb	r2, [r2, #2]
10009e5e:	4313      	orrs	r3, r2
10009e60:	4a11      	ldr	r2, [pc, #68]	; (10009ea8 <sms_pressure_ms58_read_prom+0x14c>)
10009e62:	8253      	strh	r3, [r2, #18]
    //DBG_LOG_CONT_DEV("done! Results:");
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
10009e64:	e013      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
{
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
    spi_wdata[1] = 0x00;
    spi_wdata[2] = 0x00;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e66:	2001      	movs	r0, #1
10009e68:	4240      	negs	r0, r0
10009e6a:	e010      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_2;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e6c:	2001      	movs	r0, #1
10009e6e:	4240      	negs	r0, r0
10009e70:	e00d      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_3;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e72:	2001      	movs	r0, #1
10009e74:	4240      	negs	r0, r0
10009e76:	e00a      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_4;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e78:	2001      	movs	r0, #1
10009e7a:	4240      	negs	r0, r0
10009e7c:	e007      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_5;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e7e:	2001      	movs	r0, #1
10009e80:	4240      	negs	r0, r0
10009e82:	e004      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_6;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e84:	2001      	movs	r0, #1
10009e86:	4240      	negs	r0, r0
10009e88:	e001      	b.n	10009e8e <sms_pressure_ms58_read_prom+0x132>
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.output.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);

    spi_wdata[0] = MS58_PROM_READ_7;
    if(sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3) != STATUS_OK) return -1;
10009e8a:	2001      	movs	r0, #1
10009e8c:	4240      	negs	r0, r0
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return 0;
}
10009e8e:	b002      	add	sp, #8
10009e90:	bd10      	pop	{r4, pc}
10009e92:	46c0      	nop			; (mov r8, r8)
10009e94:	10019fbc 	.word	0x10019fbc
10009e98:	10019fa8 	.word	0x10019fa8
10009e9c:	1001a068 	.word	0x1001a068
10009ea0:	1001a074 	.word	0x1001a074
10009ea4:	1000a181 	.word	0x1000a181
10009ea8:	10019fcc 	.word	0x10019fcc

10009eac <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

int sms_pressure_startup(void)
{
10009eac:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
10009eae:	4810      	ldr	r0, [pc, #64]	; (10009ef0 <sms_pressure_startup+0x44>)
10009eb0:	4b10      	ldr	r3, [pc, #64]	; (10009ef4 <sms_pressure_startup+0x48>)
10009eb2:	4798      	blx	r3
10009eb4:	4810      	ldr	r0, [pc, #64]	; (10009ef8 <sms_pressure_startup+0x4c>)
10009eb6:	4b11      	ldr	r3, [pc, #68]	; (10009efc <sms_pressure_startup+0x50>)
10009eb8:	4798      	blx	r3
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    //sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    //pressure_device.hal.current_state = MS58_STATE_RESETTING;
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
10009eba:	4b11      	ldr	r3, [pc, #68]	; (10009f00 <sms_pressure_startup+0x54>)
10009ebc:	4798      	blx	r3
10009ebe:	2800      	cmp	r0, #0
10009ec0:	d008      	beq.n	10009ed4 <sms_pressure_startup+0x28>
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
10009ec2:	480b      	ldr	r0, [pc, #44]	; (10009ef0 <sms_pressure_startup+0x44>)
10009ec4:	4b0b      	ldr	r3, [pc, #44]	; (10009ef4 <sms_pressure_startup+0x48>)
10009ec6:	4798      	blx	r3
10009ec8:	480e      	ldr	r0, [pc, #56]	; (10009f04 <sms_pressure_startup+0x58>)
10009eca:	4b0c      	ldr	r3, [pc, #48]	; (10009efc <sms_pressure_startup+0x50>)
10009ecc:	4798      	blx	r3
		return -1;
10009ece:	2001      	movs	r0, #1
10009ed0:	4240      	negs	r0, r0
10009ed2:	e00b      	b.n	10009eec <sms_pressure_startup+0x40>
}

int sms_pressure_init(void)
{
    /* Read the PROM values */
    return sms_pressure_ms58_read_prom();
10009ed4:	4b0c      	ldr	r3, [pc, #48]	; (10009f08 <sms_pressure_startup+0x5c>)
10009ed6:	4798      	blx	r3
    /* Write the reset command to MS58 */
    if(sms_pressure_ms58_reset() != STATUS_OK) {
		DBG_LOG("[sms_pressure_startup]\t\t\tFailed to reset pressure device");
		return -1;
	}	
    if(sms_pressure_init() != STATUS_OK) {
10009ed8:	2800      	cmp	r0, #0
10009eda:	d007      	beq.n	10009eec <sms_pressure_startup+0x40>
        DBG_LOG("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
10009edc:	4804      	ldr	r0, [pc, #16]	; (10009ef0 <sms_pressure_startup+0x44>)
10009ede:	4b05      	ldr	r3, [pc, #20]	; (10009ef4 <sms_pressure_startup+0x48>)
10009ee0:	4798      	blx	r3
10009ee2:	480a      	ldr	r0, [pc, #40]	; (10009f0c <sms_pressure_startup+0x60>)
10009ee4:	4b05      	ldr	r3, [pc, #20]	; (10009efc <sms_pressure_startup+0x50>)
10009ee6:	4798      	blx	r3
        return -1;
10009ee8:	2001      	movs	r0, #1
10009eea:	4240      	negs	r0, r0
    }
	return 0;
}
10009eec:	bd10      	pop	{r4, pc}
10009eee:	46c0      	nop			; (mov r8, r8)
10009ef0:	100168d4 	.word	0x100168d4
10009ef4:	10015995 	.word	0x10015995
10009ef8:	10017080 	.word	0x10017080
10009efc:	10015875 	.word	0x10015875
10009f00:	10009d1d 	.word	0x10009d1d
10009f04:	100170b4 	.word	0x100170b4
10009f08:	10009d5d 	.word	0x10009d5d
10009f0c:	100170f0 	.word	0x100170f0

10009f10 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.output.temperature, pressure_device.output.pressure);
}

void sms_pressure_define_services(void)
{
10009f10:	b510      	push	{r4, lr}
10009f12:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009f14:	466b      	mov	r3, sp
10009f16:	1dda      	adds	r2, r3, #7
10009f18:	2300      	movs	r3, #0
10009f1a:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009f1c:	4c0d      	ldr	r4, [pc, #52]	; (10009f54 <sms_pressure_define_services+0x44>)
10009f1e:	0021      	movs	r1, r4
10009f20:	2001      	movs	r0, #1
10009f22:	4b0d      	ldr	r3, [pc, #52]	; (10009f58 <sms_pressure_define_services+0x48>)
10009f24:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009f26:	0020      	movs	r0, r4
10009f28:	4b0c      	ldr	r3, [pc, #48]	; (10009f5c <sms_pressure_define_services+0x4c>)
10009f2a:	4798      	blx	r3
10009f2c:	1e04      	subs	r4, r0, #0
10009f2e:	d007      	beq.n	10009f40 <sms_pressure_define_services+0x30>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009f30:	480b      	ldr	r0, [pc, #44]	; (10009f60 <sms_pressure_define_services+0x50>)
10009f32:	4b0c      	ldr	r3, [pc, #48]	; (10009f64 <sms_pressure_define_services+0x54>)
10009f34:	4798      	blx	r3
10009f36:	0021      	movs	r1, r4
10009f38:	480b      	ldr	r0, [pc, #44]	; (10009f68 <sms_pressure_define_services+0x58>)
10009f3a:	4b0c      	ldr	r3, [pc, #48]	; (10009f6c <sms_pressure_define_services+0x5c>)
10009f3c:	4798      	blx	r3
10009f3e:	e007      	b.n	10009f50 <sms_pressure_define_services+0x40>
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
10009f40:	4807      	ldr	r0, [pc, #28]	; (10009f60 <sms_pressure_define_services+0x50>)
10009f42:	4b08      	ldr	r3, [pc, #32]	; (10009f64 <sms_pressure_define_services+0x54>)
10009f44:	4798      	blx	r3
10009f46:	4b0a      	ldr	r3, [pc, #40]	; (10009f70 <sms_pressure_define_services+0x60>)
10009f48:	8fd9      	ldrh	r1, [r3, #62]	; 0x3e
10009f4a:	480a      	ldr	r0, [pc, #40]	; (10009f74 <sms_pressure_define_services+0x64>)
10009f4c:	4b07      	ldr	r3, [pc, #28]	; (10009f6c <sms_pressure_define_services+0x5c>)
10009f4e:	4798      	blx	r3
    }
10009f50:	b002      	add	sp, #8
10009f52:	bd10      	pop	{r4, pc}
10009f54:	10019ff8 	.word	0x10019ff8
10009f58:	10008a35 	.word	0x10008a35
10009f5c:	10008a11 	.word	0x10008a11
10009f60:	100168d4 	.word	0x100168d4
10009f64:	10015995 	.word	0x10015995
10009f68:	10017170 	.word	0x10017170
10009f6c:	10015875 	.word	0x10015875
10009f70:	10019fcc 	.word	0x10019fcc
10009f74:	100171b8 	.word	0x100171b8

10009f78 <sms_sensors_enable_callback>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_enable_callback(bool imu_cb, bool press_cb) {
10009f78:	b510      	push	{r4, lr}
10009f7a:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(imu_cb) {
10009f7c:	2800      	cmp	r0, #0
10009f7e:	d006      	beq.n	10009f8e <sms_sensors_enable_callback+0x16>
        imu_device.state = IMU_STATE_ON;
10009f80:	2102      	movs	r1, #2
10009f82:	2387      	movs	r3, #135	; 0x87
10009f84:	4a0d      	ldr	r2, [pc, #52]	; (10009fbc <sms_sensors_enable_callback+0x44>)
10009f86:	54d1      	strb	r1, [r2, r3]
        sms_imu_enable_callback();
10009f88:	4b0d      	ldr	r3, [pc, #52]	; (10009fc0 <sms_sensors_enable_callback+0x48>)
10009f8a:	4798      	blx	r3
10009f8c:	e005      	b.n	10009f9a <sms_sensors_enable_callback+0x22>
    }
    else {
        imu_device.state = IMU_STATE_OFF;
10009f8e:	2100      	movs	r1, #0
10009f90:	2387      	movs	r3, #135	; 0x87
10009f92:	4a0a      	ldr	r2, [pc, #40]	; (10009fbc <sms_sensors_enable_callback+0x44>)
10009f94:	54d1      	strb	r1, [r2, r3]
        sms_imu_disable_callback();
10009f96:	4b0b      	ldr	r3, [pc, #44]	; (10009fc4 <sms_sensors_enable_callback+0x4c>)
10009f98:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_cb) {
10009f9a:	2c00      	cmp	r4, #0
10009f9c:	d006      	beq.n	10009fac <sms_sensors_enable_callback+0x34>
        pressure_device.state = PRESSURE_STATE_ON;
10009f9e:	2102      	movs	r1, #2
10009fa0:	232b      	movs	r3, #43	; 0x2b
10009fa2:	4a09      	ldr	r2, [pc, #36]	; (10009fc8 <sms_sensors_enable_callback+0x50>)
10009fa4:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_register_callback();
10009fa6:	4b09      	ldr	r3, [pc, #36]	; (10009fcc <sms_sensors_enable_callback+0x54>)
10009fa8:	4798      	blx	r3
10009faa:	e005      	b.n	10009fb8 <sms_sensors_enable_callback+0x40>
    }
    else {
		pressure_device.state = PRESSURE_STATE_OFF;
10009fac:	2100      	movs	r1, #0
10009fae:	232b      	movs	r3, #43	; 0x2b
10009fb0:	4a05      	ldr	r2, [pc, #20]	; (10009fc8 <sms_sensors_enable_callback+0x50>)
10009fb2:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_unregister_callback();
10009fb4:	4b06      	ldr	r3, [pc, #24]	; (10009fd0 <sms_sensors_enable_callback+0x58>)
10009fb6:	4798      	blx	r3
    }
}
10009fb8:	bd10      	pop	{r4, pc}
10009fba:	46c0      	nop			; (mov r8, r8)
10009fbc:	1001a080 	.word	0x1001a080
10009fc0:	10009185 	.word	0x10009185
10009fc4:	100091a1 	.word	0x100091a1
10009fc8:	10019fcc 	.word	0x10019fcc
10009fcc:	1000a215 	.word	0x1000a215
10009fd0:	1000a235 	.word	0x1000a235

10009fd4 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009fd4:	b510      	push	{r4, lr}
10009fd6:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009fd8:	2800      	cmp	r0, #0
10009fda:	d017      	beq.n	1000a00c <sms_sensors_switch+0x38>
        if(sms_imu_startup()) {
10009fdc:	4b3a      	ldr	r3, [pc, #232]	; (1000a0c8 <sms_sensors_switch+0xf4>)
10009fde:	4798      	blx	r3
10009fe0:	2800      	cmp	r0, #0
10009fe2:	d00c      	beq.n	10009ffe <sms_sensors_switch+0x2a>
	        DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't start IMU");
10009fe4:	4839      	ldr	r0, [pc, #228]	; (1000a0cc <sms_sensors_switch+0xf8>)
10009fe6:	4b3a      	ldr	r3, [pc, #232]	; (1000a0d0 <sms_sensors_switch+0xfc>)
10009fe8:	4798      	blx	r3
10009fea:	483a      	ldr	r0, [pc, #232]	; (1000a0d4 <sms_sensors_switch+0x100>)
10009fec:	4b3a      	ldr	r3, [pc, #232]	; (1000a0d8 <sms_sensors_switch+0x104>)
10009fee:	4798      	blx	r3
			dualtimer_disable(DUALTIMER_TIMER1);
10009ff0:	2000      	movs	r0, #0
10009ff2:	4b3a      	ldr	r3, [pc, #232]	; (1000a0dc <sms_sensors_switch+0x108>)
10009ff4:	4798      	blx	r3
			imu_device.config.init_ok = false;
10009ff6:	2200      	movs	r2, #0
10009ff8:	4b39      	ldr	r3, [pc, #228]	; (1000a0e0 <sms_sensors_switch+0x10c>)
10009ffa:	711a      	strb	r2, [r3, #4]
10009ffc:	e00c      	b.n	1000a018 <sms_sensors_switch+0x44>
        }
        else {
			dualtimer_enable(DUALTIMER_TIMER1);
10009ffe:	2000      	movs	r0, #0
1000a000:	4b38      	ldr	r3, [pc, #224]	; (1000a0e4 <sms_sensors_switch+0x110>)
1000a002:	4798      	blx	r3
	        imu_device.config.init_ok = true;
1000a004:	2201      	movs	r2, #1
1000a006:	4b36      	ldr	r3, [pc, #216]	; (1000a0e0 <sms_sensors_switch+0x10c>)
1000a008:	711a      	strb	r2, [r3, #4]
1000a00a:	e005      	b.n	1000a018 <sms_sensors_switch+0x44>
        }
    }
    else {
		dualtimer_disable(DUALTIMER_TIMER1);
1000a00c:	2000      	movs	r0, #0
1000a00e:	4b33      	ldr	r3, [pc, #204]	; (1000a0dc <sms_sensors_switch+0x108>)
1000a010:	4798      	blx	r3
		imu_device.config.init_ok = false;
1000a012:	2200      	movs	r2, #0
1000a014:	4b32      	ldr	r3, [pc, #200]	; (1000a0e0 <sms_sensors_switch+0x10c>)
1000a016:	711a      	strb	r2, [r3, #4]
		// switch off VCC pin to save current...
    }
    
    /* Pressure */
    if(press_en) {                
1000a018:	2c00      	cmp	r4, #0
1000a01a:	d01b      	beq.n	1000a054 <sms_sensors_switch+0x80>
        if(sms_pressure_startup()) {
1000a01c:	4b32      	ldr	r3, [pc, #200]	; (1000a0e8 <sms_sensors_switch+0x114>)
1000a01e:	4798      	blx	r3
1000a020:	2800      	cmp	r0, #0
1000a022:	d00b      	beq.n	1000a03c <sms_sensors_switch+0x68>
			DBG_LOG("[sms_sensors_switch]\t\t\tCouldn't start pressure sensor");
1000a024:	4829      	ldr	r0, [pc, #164]	; (1000a0cc <sms_sensors_switch+0xf8>)
1000a026:	4b2a      	ldr	r3, [pc, #168]	; (1000a0d0 <sms_sensors_switch+0xfc>)
1000a028:	4798      	blx	r3
1000a02a:	4830      	ldr	r0, [pc, #192]	; (1000a0ec <sms_sensors_switch+0x118>)
1000a02c:	4b2a      	ldr	r3, [pc, #168]	; (1000a0d8 <sms_sensors_switch+0x104>)
1000a02e:	4798      	blx	r3
			sms_timer_aon_disable();
1000a030:	4b2f      	ldr	r3, [pc, #188]	; (1000a0f0 <sms_sensors_switch+0x11c>)
1000a032:	4798      	blx	r3
			pressure_device.config.init_ok = false;
1000a034:	2200      	movs	r2, #0
1000a036:	4b2f      	ldr	r3, [pc, #188]	; (1000a0f4 <sms_sensors_switch+0x120>)
1000a038:	701a      	strb	r2, [r3, #0]
1000a03a:	e03e      	b.n	1000a0ba <sms_sensors_switch+0xe6>
		}
		else {
			sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
1000a03c:	2100      	movs	r1, #0
1000a03e:	2064      	movs	r0, #100	; 0x64
1000a040:	4b2d      	ldr	r3, [pc, #180]	; (1000a0f8 <sms_sensors_switch+0x124>)
1000a042:	4798      	blx	r3
			pressure_device.config.init_ok = true;
1000a044:	2201      	movs	r2, #1
1000a046:	4b2b      	ldr	r3, [pc, #172]	; (1000a0f4 <sms_sensors_switch+0x120>)
1000a048:	701a      	strb	r2, [r3, #0]
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if(imu_device.config.init_ok && pressure_device.config.init_ok) {
1000a04a:	4b25      	ldr	r3, [pc, #148]	; (1000a0e0 <sms_sensors_switch+0x10c>)
1000a04c:	791b      	ldrb	r3, [r3, #4]
1000a04e:	2b00      	cmp	r3, #0
1000a050:	d012      	beq.n	1000a078 <sms_sensors_switch+0xa4>
1000a052:	e005      	b.n	1000a060 <sms_sensors_switch+0x8c>
			sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
			pressure_device.config.init_ok = true;
		}
    }
    else {
		sms_timer_aon_disable();
1000a054:	4b26      	ldr	r3, [pc, #152]	; (1000a0f0 <sms_sensors_switch+0x11c>)
1000a056:	4798      	blx	r3
		pressure_device.config.init_ok = false;
1000a058:	2200      	movs	r2, #0
1000a05a:	4b26      	ldr	r3, [pc, #152]	; (1000a0f4 <sms_sensors_switch+0x120>)
1000a05c:	701a      	strb	r2, [r3, #0]
1000a05e:	e02c      	b.n	1000a0ba <sms_sensors_switch+0xe6>
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if(imu_device.config.init_ok && pressure_device.config.init_ok) {
		sms_working_mode = SMS_MODE_COMPLETE;
1000a060:	2207      	movs	r2, #7
1000a062:	4b26      	ldr	r3, [pc, #152]	; (1000a0fc <sms_sensors_switch+0x128>)
1000a064:	701a      	strb	r2, [r3, #0]
		sms_sensors_enable_callback(true, true);
1000a066:	2101      	movs	r1, #1
1000a068:	2001      	movs	r0, #1
1000a06a:	4b25      	ldr	r3, [pc, #148]	; (1000a100 <sms_sensors_switch+0x12c>)
1000a06c:	4798      	blx	r3
1000a06e:	e012      	b.n	1000a096 <sms_sensors_switch+0xc2>
	}
	else if(imu_device.config.init_ok) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
		sms_sensors_enable_callback(true, false);
	}
	else if(pressure_device.config.init_ok) {
1000a070:	4b20      	ldr	r3, [pc, #128]	; (1000a0f4 <sms_sensors_switch+0x120>)
1000a072:	781b      	ldrb	r3, [r3, #0]
1000a074:	2b00      	cmp	r3, #0
1000a076:	d007      	beq.n	1000a088 <sms_sensors_switch+0xb4>
		sms_working_mode = SMS_MODE_BUTTON_PRESSURE;
1000a078:	2205      	movs	r2, #5
1000a07a:	4b20      	ldr	r3, [pc, #128]	; (1000a0fc <sms_sensors_switch+0x128>)
1000a07c:	701a      	strb	r2, [r3, #0]
		sms_sensors_enable_callback(false, true);
1000a07e:	2101      	movs	r1, #1
1000a080:	2000      	movs	r0, #0
1000a082:	4b1f      	ldr	r3, [pc, #124]	; (1000a100 <sms_sensors_switch+0x12c>)
1000a084:	4798      	blx	r3
1000a086:	e006      	b.n	1000a096 <sms_sensors_switch+0xc2>
	}
	else {
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000a088:	2201      	movs	r2, #1
1000a08a:	4b1c      	ldr	r3, [pc, #112]	; (1000a0fc <sms_sensors_switch+0x128>)
1000a08c:	701a      	strb	r2, [r3, #0]
		sms_sensors_enable_callback(false, false);
1000a08e:	2100      	movs	r1, #0
1000a090:	2000      	movs	r0, #0
1000a092:	4b1b      	ldr	r3, [pc, #108]	; (1000a100 <sms_sensors_switch+0x12c>)
1000a094:	4798      	blx	r3
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\t\tSMS working mode: %d", sms_working_mode);
1000a096:	480d      	ldr	r0, [pc, #52]	; (1000a0cc <sms_sensors_switch+0xf8>)
1000a098:	4b0d      	ldr	r3, [pc, #52]	; (1000a0d0 <sms_sensors_switch+0xfc>)
1000a09a:	4798      	blx	r3
1000a09c:	4b17      	ldr	r3, [pc, #92]	; (1000a0fc <sms_sensors_switch+0x128>)
1000a09e:	7819      	ldrb	r1, [r3, #0]
1000a0a0:	b2c9      	uxtb	r1, r1
1000a0a2:	4818      	ldr	r0, [pc, #96]	; (1000a104 <sms_sensors_switch+0x130>)
1000a0a4:	4b0c      	ldr	r3, [pc, #48]	; (1000a0d8 <sms_sensors_switch+0x104>)
1000a0a6:	4798      	blx	r3
}
1000a0a8:	e00c      	b.n	1000a0c4 <sms_sensors_switch+0xf0>
	if(imu_device.config.init_ok && pressure_device.config.init_ok) {
		sms_working_mode = SMS_MODE_COMPLETE;
		sms_sensors_enable_callback(true, true);
	}
	else if(imu_device.config.init_ok) {
		sms_working_mode = SMS_MODE_BUTTON_IMU;
1000a0aa:	2204      	movs	r2, #4
1000a0ac:	4b13      	ldr	r3, [pc, #76]	; (1000a0fc <sms_sensors_switch+0x128>)
1000a0ae:	701a      	strb	r2, [r3, #0]
		sms_sensors_enable_callback(true, false);
1000a0b0:	2100      	movs	r1, #0
1000a0b2:	2001      	movs	r0, #1
1000a0b4:	4b12      	ldr	r3, [pc, #72]	; (1000a100 <sms_sensors_switch+0x12c>)
1000a0b6:	4798      	blx	r3
1000a0b8:	e7ed      	b.n	1000a096 <sms_sensors_switch+0xc2>
		pressure_device.config.init_ok = false;
		// switch off VCC pin to save current...
    }
	
	/* Set up SMS working mode & callbacks */
	if(imu_device.config.init_ok && pressure_device.config.init_ok) {
1000a0ba:	4b09      	ldr	r3, [pc, #36]	; (1000a0e0 <sms_sensors_switch+0x10c>)
1000a0bc:	791b      	ldrb	r3, [r3, #4]
1000a0be:	2b00      	cmp	r3, #0
1000a0c0:	d1f3      	bne.n	1000a0aa <sms_sensors_switch+0xd6>
1000a0c2:	e7d5      	b.n	1000a070 <sms_sensors_switch+0x9c>
		sms_working_mode = SMS_MODE_BUTTON_SOLO;
		sms_sensors_enable_callback(false, false);
	}
	
	DBG_LOG_DEV("[sms_sensors_switch]\t\t\tSMS working mode: %d", sms_working_mode);
}
1000a0c4:	bd10      	pop	{r4, pc}
1000a0c6:	46c0      	nop			; (mov r8, r8)
1000a0c8:	10009bd1 	.word	0x10009bd1
1000a0cc:	100168d4 	.word	0x100168d4
1000a0d0:	10015995 	.word	0x10015995
1000a0d4:	10017204 	.word	0x10017204
1000a0d8:	10015875 	.word	0x10015875
1000a0dc:	1000a70d 	.word	0x1000a70d
1000a0e0:	1001a080 	.word	0x1001a080
1000a0e4:	1000a6e9 	.word	0x1000a6e9
1000a0e8:	10009ead 	.word	0x10009ead
1000a0ec:	10017230 	.word	0x10017230
1000a0f0:	1000a209 	.word	0x1000a209
1000a0f4:	10019fcc 	.word	0x10019fcc
1000a0f8:	1000a1dd 	.word	0x1000a1dd
1000a0fc:	10019f38 	.word	0x10019f38
1000a100:	10009f79 	.word	0x10009f79
1000a104:	10017268 	.word	0x10017268

1000a108 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
1000a108:	b530      	push	{r4, r5, lr}
1000a10a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
1000a10c:	ac01      	add	r4, sp, #4
1000a10e:	0020      	movs	r0, r4
1000a110:	4b13      	ldr	r3, [pc, #76]	; (1000a160 <sms_spi_master_configure+0x58>)
1000a112:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
1000a114:	2310      	movs	r3, #16
1000a116:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
1000a118:	0021      	movs	r1, r4
1000a11a:	4812      	ldr	r0, [pc, #72]	; (1000a164 <sms_spi_master_configure+0x5c>)
1000a11c:	4b12      	ldr	r3, [pc, #72]	; (1000a168 <sms_spi_master_configure+0x60>)
1000a11e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
1000a120:	ac02      	add	r4, sp, #8
1000a122:	0020      	movs	r0, r4
1000a124:	4b11      	ldr	r3, [pc, #68]	; (1000a16c <sms_spi_master_configure+0x64>)
1000a126:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
1000a128:	2368      	movs	r3, #104	; 0x68
1000a12a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
1000a12c:	2300      	movs	r3, #0
1000a12e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
1000a130:	3311      	adds	r3, #17
1000a132:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
1000a134:	3b0d      	subs	r3, #13
1000a136:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
1000a138:	2213      	movs	r2, #19
1000a13a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
1000a13c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
1000a13e:	3a14      	subs	r2, #20
1000a140:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
1000a142:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
1000a144:	3213      	adds	r2, #19
1000a146:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
1000a148:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
1000a14a:	4d09      	ldr	r5, [pc, #36]	; (1000a170 <sms_spi_master_configure+0x68>)
1000a14c:	0022      	movs	r2, r4
1000a14e:	4909      	ldr	r1, [pc, #36]	; (1000a174 <sms_spi_master_configure+0x6c>)
1000a150:	0028      	movs	r0, r5
1000a152:	4b09      	ldr	r3, [pc, #36]	; (1000a178 <sms_spi_master_configure+0x70>)
1000a154:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
1000a156:	0028      	movs	r0, r5
1000a158:	4b08      	ldr	r3, [pc, #32]	; (1000a17c <sms_spi_master_configure+0x74>)
1000a15a:	4798      	blx	r3
}
1000a15c:	b00d      	add	sp, #52	; 0x34
1000a15e:	bd30      	pop	{r4, r5, pc}
1000a160:	1000a335 	.word	0x1000a335
1000a164:	1001a068 	.word	0x1001a068
1000a168:	1000a36d 	.word	0x1000a36d
1000a16c:	1000a341 	.word	0x1000a341
1000a170:	1001a074 	.word	0x1001a074
1000a174:	40007000 	.word	0x40007000
1000a178:	1000a43d 	.word	0x1000a43d
1000a17c:	1000a3ad 	.word	0x1000a3ad

1000a180 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
1000a180:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a182:	b083      	sub	sp, #12
1000a184:	0004      	movs	r4, r0
1000a186:	000d      	movs	r5, r1
1000a188:	9200      	str	r2, [sp, #0]
1000a18a:	9301      	str	r3, [sp, #4]
1000a18c:	ab08      	add	r3, sp, #32
1000a18e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
1000a190:	2201      	movs	r2, #1
1000a192:	4f08      	ldr	r7, [pc, #32]	; (1000a1b4 <sms_spi_master_transceive+0x34>)
1000a194:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
1000a196:	0033      	movs	r3, r6
1000a198:	9a01      	ldr	r2, [sp, #4]
1000a19a:	9900      	ldr	r1, [sp, #0]
1000a19c:	0020      	movs	r0, r4
1000a19e:	4e06      	ldr	r6, [pc, #24]	; (1000a1b8 <sms_spi_master_transceive+0x38>)
1000a1a0:	47b0      	blx	r6
1000a1a2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
1000a1a4:	2200      	movs	r2, #0
1000a1a6:	0029      	movs	r1, r5
1000a1a8:	0020      	movs	r0, r4
1000a1aa:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
1000a1ac:	0030      	movs	r0, r6
1000a1ae:	b003      	add	sp, #12
1000a1b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a1b2:	46c0      	nop			; (mov r8, r8)
1000a1b4:	1000a625 	.word	0x1000a625
1000a1b8:	1000a5a1 	.word	0x1000a5a1

1000a1bc <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
1000a1bc:	b510      	push	{r4, lr}
    //if(pressure_device.int_enabled) {
		pressure_device.interrupt.new_value = true;
1000a1be:	2101      	movs	r1, #1
1000a1c0:	2329      	movs	r3, #41	; 0x29
1000a1c2:	4a04      	ldr	r2, [pc, #16]	; (1000a1d4 <sms_timer_aon_callback+0x18>)
1000a1c4:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
1000a1c6:	2300      	movs	r3, #0
1000a1c8:	2200      	movs	r2, #0
1000a1ca:	3102      	adds	r1, #2
1000a1cc:	2042      	movs	r0, #66	; 0x42
1000a1ce:	4c02      	ldr	r4, [pc, #8]	; (1000a1d8 <sms_timer_aon_callback+0x1c>)
1000a1d0:	47a0      	blx	r4
	//}
}
1000a1d2:	bd10      	pop	{r4, pc}
1000a1d4:	10019fcc 	.word	0x10019fcc
1000a1d8:	1000dc09 	.word	0x1000dc09

1000a1dc <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt_ms, enum aon_sleep_timer_mode cnt_mode)
{
1000a1dc:	b530      	push	{r4, r5, lr}
1000a1de:	b083      	sub	sp, #12
1000a1e0:	0004      	movs	r4, r0
1000a1e2:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
1000a1e4:	4668      	mov	r0, sp
1000a1e6:	4b06      	ldr	r3, [pc, #24]	; (1000a200 <sms_timer_aon_init+0x24>)
1000a1e8:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
1000a1ea:	466b      	mov	r3, sp
1000a1ec:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt_ms * SMS_TIMER_AON_LOAD_1MS;
1000a1ee:	0163      	lsls	r3, r4, #5
1000a1f0:	191c      	adds	r4, r3, r4
1000a1f2:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
1000a1f4:	4668      	mov	r0, sp
1000a1f6:	4b03      	ldr	r3, [pc, #12]	; (1000a204 <sms_timer_aon_init+0x28>)
1000a1f8:	4798      	blx	r3
}
1000a1fa:	b003      	add	sp, #12
1000a1fc:	bd30      	pop	{r4, r5, pc}
1000a1fe:	46c0      	nop			; (mov r8, r8)
1000a200:	100080e9 	.word	0x100080e9
1000a204:	1000815d 	.word	0x1000815d

1000a208 <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
1000a208:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
1000a20a:	4b01      	ldr	r3, [pc, #4]	; (1000a210 <sms_timer_aon_disable+0x8>)
1000a20c:	4798      	blx	r3
}
1000a20e:	bd10      	pop	{r4, pc}
1000a210:	100080f9 	.word	0x100080f9

1000a214 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
1000a214:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
1000a216:	4804      	ldr	r0, [pc, #16]	; (1000a228 <sms_timer_aon_register_callback+0x14>)
1000a218:	4b04      	ldr	r3, [pc, #16]	; (1000a22c <sms_timer_aon_register_callback+0x18>)
1000a21a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a21c:	2280      	movs	r2, #128	; 0x80
1000a21e:	0512      	lsls	r2, r2, #20
1000a220:	4b03      	ldr	r3, [pc, #12]	; (1000a230 <sms_timer_aon_register_callback+0x1c>)
1000a222:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a224:	bd10      	pop	{r4, pc}
1000a226:	46c0      	nop			; (mov r8, r8)
1000a228:	1000a1bd 	.word	0x1000a1bd
1000a22c:	10008145 	.word	0x10008145
1000a230:	e000e100 	.word	0xe000e100

1000a234 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
1000a234:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
1000a236:	4b04      	ldr	r3, [pc, #16]	; (1000a248 <sms_timer_aon_unregister_callback+0x14>)
1000a238:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a23a:	2180      	movs	r1, #128	; 0x80
1000a23c:	0509      	lsls	r1, r1, #20
1000a23e:	2380      	movs	r3, #128	; 0x80
1000a240:	4a02      	ldr	r2, [pc, #8]	; (1000a24c <sms_timer_aon_unregister_callback+0x18>)
1000a242:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
1000a244:	bd10      	pop	{r4, pc}
1000a246:	46c0      	nop			; (mov r8, r8)
1000a248:	10008151 	.word	0x10008151
1000a24c:	e000e100 	.word	0xe000e100

1000a250 <sms_dualtimer_init>:
//{
//}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
1000a250:	b510      	push	{r4, lr}
1000a252:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
1000a254:	ac01      	add	r4, sp, #4
1000a256:	0020      	movs	r0, r4
1000a258:	4b0c      	ldr	r3, [pc, #48]	; (1000a28c <sms_dualtimer_init+0x3c>)
1000a25a:	4798      	blx	r3

	/* Dualtimer1 used for background us counting without interrupts
	 * (similar to the millis() or micros() functions in Arduino) */
    //config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_US;
	config_dualtimer.timer1.load_value = 0xFFFFFFFF;
1000a25c:	2301      	movs	r3, #1
1000a25e:	425b      	negs	r3, r3
1000a260:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_FREE_RUNNING_MODE;
1000a262:	3302      	adds	r3, #2
1000a264:	7063      	strb	r3, [r4, #1]
	//config_dualtimer.timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
	//config_dualtimer.timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
	config_dualtimer.timer1.interrup_enable = false;
1000a266:	2200      	movs	r2, #0
1000a268:	7122      	strb	r2, [r4, #4]
	/* Dualtimer1 used first as a blocking ms delay
	 * (could be changed after device startup and initialization) */
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
1000a26a:	4909      	ldr	r1, [pc, #36]	; (1000a290 <sms_dualtimer_init+0x40>)
1000a26c:	6161      	str	r1, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
1000a26e:	7362      	strb	r2, [r4, #13]
	config_dualtimer.timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a270:	73e2      	strb	r2, [r4, #15]
	config_dualtimer.timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a272:	73a3      	strb	r3, [r4, #14]
	config_dualtimer.timer2.interrup_enable = true;
1000a274:	7423      	strb	r3, [r4, #16]

    dualtimer_init(&config_dualtimer);
1000a276:	0020      	movs	r0, r4
1000a278:	4b06      	ldr	r3, [pc, #24]	; (1000a294 <sms_dualtimer_init+0x44>)
1000a27a:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
1000a27c:	2000      	movs	r0, #0
1000a27e:	4c06      	ldr	r4, [pc, #24]	; (1000a298 <sms_dualtimer_init+0x48>)
1000a280:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
1000a282:	2001      	movs	r0, #1
1000a284:	47a0      	blx	r4
}
1000a286:	b008      	add	sp, #32
1000a288:	bd10      	pop	{r4, pc}
1000a28a:	46c0      	nop			; (mov r8, r8)
1000a28c:	1000a689 	.word	0x1000a689
1000a290:	00006590 	.word	0x00006590
1000a294:	1000a731 	.word	0x1000a731
1000a298:	1000a70d 	.word	0x1000a70d

1000a29c <sms_dualtimer_start>:
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
1000a29c:	b510      	push	{r4, lr}
1000a29e:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
1000a2a0:	2801      	cmp	r0, #1
1000a2a2:	d006      	beq.n	1000a2b2 <sms_dualtimer_start+0x16>
1000a2a4:	2800      	cmp	r0, #0
1000a2a6:	d002      	beq.n	1000a2ae <sms_dualtimer_start+0x12>
1000a2a8:	2802      	cmp	r0, #2
1000a2aa:	d004      	beq.n	1000a2b6 <sms_dualtimer_start+0x1a>
1000a2ac:	e005      	b.n	1000a2ba <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
1000a2ae:	221a      	movs	r2, #26
1000a2b0:	e004      	b.n	1000a2bc <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
1000a2b2:	4a0c      	ldr	r2, [pc, #48]	; (1000a2e4 <sms_dualtimer_start+0x48>)
        break;
1000a2b4:	e002      	b.n	1000a2bc <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
1000a2b6:	4a0c      	ldr	r2, [pc, #48]	; (1000a2e8 <sms_dualtimer_start+0x4c>)
        break;
1000a2b8:	e000      	b.n	1000a2bc <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
1000a2ba:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
1000a2bc:	2900      	cmp	r1, #0
1000a2be:	d100      	bne.n	1000a2c2 <sms_dualtimer_start+0x26>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1");
        delay = 1;
1000a2c0:	3101      	adds	r1, #1
    }
    
    ulp_ready = false;
1000a2c2:	2000      	movs	r0, #0
1000a2c4:	4b09      	ldr	r3, [pc, #36]	; (1000a2ec <sms_dualtimer_start+0x50>)
1000a2c6:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
1000a2c8:	434a      	muls	r2, r1
1000a2ca:	2100      	movs	r1, #0
1000a2cc:	0020      	movs	r0, r4
1000a2ce:	4b08      	ldr	r3, [pc, #32]	; (1000a2f0 <sms_dualtimer_start+0x54>)
1000a2d0:	4798      	blx	r3
    dualtimer_enable(tmr);
1000a2d2:	0020      	movs	r0, r4
1000a2d4:	4b07      	ldr	r3, [pc, #28]	; (1000a2f4 <sms_dualtimer_start+0x58>)
1000a2d6:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000a2d8:	2280      	movs	r2, #128	; 0x80
1000a2da:	01d2      	lsls	r2, r2, #7
1000a2dc:	4b06      	ldr	r3, [pc, #24]	; (1000a2f8 <sms_dualtimer_start+0x5c>)
1000a2de:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a2e0:	bd10      	pop	{r4, pc}
1000a2e2:	46c0      	nop			; (mov r8, r8)
1000a2e4:	00006590 	.word	0x00006590
1000a2e8:	018cba80 	.word	0x018cba80
1000a2ec:	10019f39 	.word	0x10019f39
1000a2f0:	1000a6c1 	.word	0x1000a6c1
1000a2f4:	1000a6e9 	.word	0x1000a6e9
1000a2f8:	e000e100 	.word	0xe000e100

1000a2fc <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a2fc:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a2fe:	4b01      	ldr	r3, [pc, #4]	; (1000a304 <sms_dualtimer_stop+0x8>)
1000a300:	4798      	blx	r3
}
1000a302:	bd10      	pop	{r4, pc}
1000a304:	1000a70d 	.word	0x1000a70d

1000a308 <delay_ms>:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}

void delay_ms(uint32_t delay) {
1000a308:	b510      	push	{r4, lr}
1000a30a:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a30c:	2201      	movs	r2, #1
1000a30e:	2001      	movs	r0, #1
1000a310:	4b05      	ldr	r3, [pc, #20]	; (1000a328 <delay_ms+0x20>)
1000a312:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000a314:	4c05      	ldr	r4, [pc, #20]	; (1000a32c <delay_ms+0x24>)
1000a316:	2001      	movs	r0, #1
1000a318:	47a0      	blx	r4
1000a31a:	2800      	cmp	r0, #0
1000a31c:	d1fb      	bne.n	1000a316 <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a31e:	3001      	adds	r0, #1
1000a320:	4b03      	ldr	r3, [pc, #12]	; (1000a330 <delay_ms+0x28>)
1000a322:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000a324:	bd10      	pop	{r4, pc}
1000a326:	46c0      	nop			; (mov r8, r8)
1000a328:	1000a29d 	.word	0x1000a29d
1000a32c:	1000a6ad 	.word	0x1000a6ad
1000a330:	1000a70d 	.word	0x1000a70d

1000a334 <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a334:	230c      	movs	r3, #12
1000a336:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a338:	2300      	movs	r3, #0
1000a33a:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a33c:	7083      	strb	r3, [r0, #2]
}
1000a33e:	4770      	bx	lr

1000a340 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a340:	2301      	movs	r3, #1
1000a342:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a344:	2300      	movs	r3, #0
1000a346:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a348:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a34a:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a34c:	3381      	adds	r3, #129	; 0x81
1000a34e:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a350:	3b77      	subs	r3, #119	; 0x77
1000a352:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a354:	3301      	adds	r3, #1
1000a356:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a358:	3301      	adds	r3, #1
1000a35a:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a35c:	3301      	adds	r3, #1
1000a35e:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a360:	3b0b      	subs	r3, #11
1000a362:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a364:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a366:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a368:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a36a:	4770      	bx	lr

1000a36c <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a36c:	b530      	push	{r4, r5, lr}
1000a36e:	b083      	sub	sp, #12
1000a370:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a372:	780b      	ldrb	r3, [r1, #0]
1000a374:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a376:	784b      	ldrb	r3, [r1, #1]
1000a378:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a37a:	788b      	ldrb	r3, [r1, #2]
1000a37c:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a37e:	ad01      	add	r5, sp, #4
1000a380:	0028      	movs	r0, r5
1000a382:	4b07      	ldr	r3, [pc, #28]	; (1000a3a0 <spi_attach_slave+0x34>)
1000a384:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a386:	2301      	movs	r3, #1
1000a388:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a38a:	7820      	ldrb	r0, [r4, #0]
1000a38c:	0029      	movs	r1, r5
1000a38e:	4b05      	ldr	r3, [pc, #20]	; (1000a3a4 <spi_attach_slave+0x38>)
1000a390:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a392:	7820      	ldrb	r0, [r4, #0]
1000a394:	2101      	movs	r1, #1
1000a396:	4b04      	ldr	r3, [pc, #16]	; (1000a3a8 <spi_attach_slave+0x3c>)
1000a398:	4798      	blx	r3
}
1000a39a:	b003      	add	sp, #12
1000a39c:	bd30      	pop	{r4, r5, pc}
1000a39e:	46c0      	nop			; (mov r8, r8)
1000a3a0:	1000a985 	.word	0x1000a985
1000a3a4:	1000a995 	.word	0x1000a995
1000a3a8:	1000abed 	.word	0x1000abed

1000a3ac <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a3ac:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a3ae:	2201      	movs	r2, #1
1000a3b0:	761a      	strb	r2, [r3, #24]
}
1000a3b2:	4770      	bx	lr

1000a3b4 <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a3b4:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a3b6:	2300      	movs	r3, #0
1000a3b8:	6802      	ldr	r2, [r0, #0]
1000a3ba:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a3bc:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a3be:	4a0d      	ldr	r2, [pc, #52]	; (1000a3f4 <spi_disable+0x40>)
1000a3c0:	4293      	cmp	r3, r2
1000a3c2:	d109      	bne.n	1000a3d8 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a3c4:	2041      	movs	r0, #65	; 0x41
1000a3c6:	4c0c      	ldr	r4, [pc, #48]	; (1000a3f8 <spi_disable+0x44>)
1000a3c8:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a3ca:	2026      	movs	r0, #38	; 0x26
1000a3cc:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a3ce:	2038      	movs	r0, #56	; 0x38
1000a3d0:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a3d2:	2001      	movs	r0, #1
1000a3d4:	47a0      	blx	r4
1000a3d6:	e00b      	b.n	1000a3f0 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a3d8:	4a08      	ldr	r2, [pc, #32]	; (1000a3fc <spi_disable+0x48>)
1000a3da:	4293      	cmp	r3, r2
1000a3dc:	d108      	bne.n	1000a3f0 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a3de:	2042      	movs	r0, #66	; 0x42
1000a3e0:	4c05      	ldr	r4, [pc, #20]	; (1000a3f8 <spi_disable+0x44>)
1000a3e2:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a3e4:	2027      	movs	r0, #39	; 0x27
1000a3e6:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a3e8:	2039      	movs	r0, #57	; 0x39
1000a3ea:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a3ec:	2002      	movs	r0, #2
1000a3ee:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a3f0:	bd10      	pop	{r4, pc}
1000a3f2:	46c0      	nop			; (mov r8, r8)
1000a3f4:	40006000 	.word	0x40006000
1000a3f8:	1000b385 	.word	0x1000b385
1000a3fc:	40007000 	.word	0x40007000

1000a400 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a400:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a402:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a404:	4b09      	ldr	r3, [pc, #36]	; (1000a42c <spi_reset+0x2c>)
1000a406:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a408:	4b09      	ldr	r3, [pc, #36]	; (1000a430 <spi_reset+0x30>)
1000a40a:	429c      	cmp	r4, r3
1000a40c:	d105      	bne.n	1000a41a <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a40e:	2001      	movs	r0, #1
1000a410:	4c08      	ldr	r4, [pc, #32]	; (1000a434 <spi_reset+0x34>)
1000a412:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a414:	2038      	movs	r0, #56	; 0x38
1000a416:	47a0      	blx	r4
1000a418:	e007      	b.n	1000a42a <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a41a:	4b07      	ldr	r3, [pc, #28]	; (1000a438 <spi_reset+0x38>)
1000a41c:	429c      	cmp	r4, r3
1000a41e:	d104      	bne.n	1000a42a <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a420:	2002      	movs	r0, #2
1000a422:	4c04      	ldr	r4, [pc, #16]	; (1000a434 <spi_reset+0x34>)
1000a424:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a426:	2039      	movs	r0, #57	; 0x39
1000a428:	47a0      	blx	r4
	}
}
1000a42a:	bd10      	pop	{r4, pc}
1000a42c:	1000a3b5 	.word	0x1000a3b5
1000a430:	40006000 	.word	0x40006000
1000a434:	1000b6f1 	.word	0x1000b6f1
1000a438:	40007000 	.word	0x40007000

1000a43c <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a43e:	465f      	mov	r7, fp
1000a440:	4646      	mov	r6, r8
1000a442:	b4c0      	push	{r6, r7}
1000a444:	b083      	sub	sp, #12
1000a446:	0006      	movs	r6, r0
1000a448:	4688      	mov	r8, r1
1000a44a:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a44c:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a44e:	7e0b      	ldrb	r3, [r1, #24]
1000a450:	07db      	lsls	r3, r3, #31
1000a452:	d501      	bpl.n	1000a458 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a454:	2300      	movs	r3, #0
1000a456:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a458:	0030      	movs	r0, r6
1000a45a:	4b4a      	ldr	r3, [pc, #296]	; (1000a584 <spi_init+0x148>)
1000a45c:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a45e:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a460:	4a49      	ldr	r2, [pc, #292]	; (1000a588 <spi_init+0x14c>)
1000a462:	4293      	cmp	r3, r2
1000a464:	d109      	bne.n	1000a47a <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a466:	2041      	movs	r0, #65	; 0x41
1000a468:	4c48      	ldr	r4, [pc, #288]	; (1000a58c <spi_init+0x150>)
1000a46a:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a46c:	2026      	movs	r0, #38	; 0x26
1000a46e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a470:	2038      	movs	r0, #56	; 0x38
1000a472:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a474:	2001      	movs	r0, #1
1000a476:	47a0      	blx	r4
1000a478:	e00b      	b.n	1000a492 <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a47a:	4a45      	ldr	r2, [pc, #276]	; (1000a590 <spi_init+0x154>)
1000a47c:	4293      	cmp	r3, r2
1000a47e:	d108      	bne.n	1000a492 <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a480:	2042      	movs	r0, #66	; 0x42
1000a482:	4c42      	ldr	r4, [pc, #264]	; (1000a58c <spi_init+0x150>)
1000a484:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a486:	2027      	movs	r0, #39	; 0x27
1000a488:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a48a:	2039      	movs	r0, #57	; 0x39
1000a48c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a48e:	2002      	movs	r0, #2
1000a490:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a492:	a801      	add	r0, sp, #4
1000a494:	4b3f      	ldr	r3, [pc, #252]	; (1000a594 <spi_init+0x158>)
1000a496:	4798      	blx	r3
1000a498:	002c      	movs	r4, r5
1000a49a:	3408      	adds	r4, #8
1000a49c:	2318      	movs	r3, #24
1000a49e:	469b      	mov	fp, r3
1000a4a0:	44ab      	add	fp, r5
1000a4a2:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a4a4:	6820      	ldr	r0, [r4, #0]
1000a4a6:	1c43      	adds	r3, r0, #1
1000a4a8:	d011      	beq.n	1000a4ce <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a4aa:	782b      	ldrb	r3, [r5, #0]
1000a4ac:	2b01      	cmp	r3, #1
1000a4ae:	d102      	bne.n	1000a4b6 <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a4b0:	466a      	mov	r2, sp
1000a4b2:	7113      	strb	r3, [r2, #4]
1000a4b4:	e003      	b.n	1000a4be <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a4b6:	2b00      	cmp	r3, #0
1000a4b8:	d101      	bne.n	1000a4be <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a4ba:	466a      	mov	r2, sp
1000a4bc:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a4be:	b2c0      	uxtb	r0, r0
1000a4c0:	a901      	add	r1, sp, #4
1000a4c2:	4b35      	ldr	r3, [pc, #212]	; (1000a598 <spi_init+0x15c>)
1000a4c4:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a4c6:	8a39      	ldrh	r1, [r7, #16]
1000a4c8:	7838      	ldrb	r0, [r7, #0]
1000a4ca:	4b34      	ldr	r3, [pc, #208]	; (1000a59c <spi_init+0x160>)
1000a4cc:	4798      	blx	r3
1000a4ce:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a4d0:	455c      	cmp	r4, fp
1000a4d2:	d1e6      	bne.n	1000a4a2 <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a4d4:	78eb      	ldrb	r3, [r5, #3]
1000a4d6:	4642      	mov	r2, r8
1000a4d8:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a4da:	782b      	ldrb	r3, [r5, #0]
1000a4dc:	2b01      	cmp	r3, #1
1000a4de:	d100      	bne.n	1000a4e2 <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a4e0:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a4e2:	782b      	ldrb	r3, [r5, #0]
1000a4e4:	2b00      	cmp	r3, #0
1000a4e6:	d101      	bne.n	1000a4ec <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a4e8:	4642      	mov	r2, r8
1000a4ea:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a4ec:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a4ee:	782a      	ldrb	r2, [r5, #0]
1000a4f0:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a4f2:	782a      	ldrb	r2, [r5, #0]
1000a4f4:	2a01      	cmp	r2, #1
1000a4f6:	d101      	bne.n	1000a4fc <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a4f8:	792a      	ldrb	r2, [r5, #4]
1000a4fa:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a4fc:	786a      	ldrb	r2, [r5, #1]
1000a4fe:	2a04      	cmp	r2, #4
1000a500:	d104      	bne.n	1000a50c <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a502:	2124      	movs	r1, #36	; 0x24
1000a504:	5c58      	ldrb	r0, [r3, r1]
1000a506:	4302      	orrs	r2, r0
1000a508:	545a      	strb	r2, [r3, r1]
1000a50a:	e004      	b.n	1000a516 <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a50c:	2124      	movs	r1, #36	; 0x24
1000a50e:	5c5a      	ldrb	r2, [r3, r1]
1000a510:	2004      	movs	r0, #4
1000a512:	4382      	bics	r2, r0
1000a514:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a516:	78aa      	ldrb	r2, [r5, #2]
1000a518:	2a01      	cmp	r2, #1
1000a51a:	d01a      	beq.n	1000a552 <spi_init+0x116>
1000a51c:	2a00      	cmp	r2, #0
1000a51e:	d004      	beq.n	1000a52a <spi_init+0xee>
1000a520:	2a02      	cmp	r2, #2
1000a522:	d00c      	beq.n	1000a53e <spi_init+0x102>
1000a524:	2a03      	cmp	r2, #3
1000a526:	d01e      	beq.n	1000a566 <spi_init+0x12a>
1000a528:	e026      	b.n	1000a578 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a52a:	2224      	movs	r2, #36	; 0x24
1000a52c:	5c99      	ldrb	r1, [r3, r2]
1000a52e:	2002      	movs	r0, #2
1000a530:	4381      	bics	r1, r0
1000a532:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a534:	5c99      	ldrb	r1, [r3, r2]
1000a536:	3801      	subs	r0, #1
1000a538:	4381      	bics	r1, r0
1000a53a:	5499      	strb	r1, [r3, r2]
1000a53c:	e01c      	b.n	1000a578 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a53e:	2224      	movs	r2, #36	; 0x24
1000a540:	5c98      	ldrb	r0, [r3, r2]
1000a542:	2102      	movs	r1, #2
1000a544:	4301      	orrs	r1, r0
1000a546:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a548:	5c99      	ldrb	r1, [r3, r2]
1000a54a:	2001      	movs	r0, #1
1000a54c:	4381      	bics	r1, r0
1000a54e:	5499      	strb	r1, [r3, r2]
1000a550:	e012      	b.n	1000a578 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a552:	2224      	movs	r2, #36	; 0x24
1000a554:	5c99      	ldrb	r1, [r3, r2]
1000a556:	2002      	movs	r0, #2
1000a558:	4381      	bics	r1, r0
1000a55a:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a55c:	5c98      	ldrb	r0, [r3, r2]
1000a55e:	2101      	movs	r1, #1
1000a560:	4301      	orrs	r1, r0
1000a562:	5499      	strb	r1, [r3, r2]
1000a564:	e008      	b.n	1000a578 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a566:	2224      	movs	r2, #36	; 0x24
1000a568:	5c98      	ldrb	r0, [r3, r2]
1000a56a:	2102      	movs	r1, #2
1000a56c:	4301      	orrs	r1, r0
1000a56e:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a570:	5c98      	ldrb	r0, [r3, r2]
1000a572:	2101      	movs	r1, #1
1000a574:	4301      	orrs	r1, r0
1000a576:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a578:	2000      	movs	r0, #0
1000a57a:	b003      	add	sp, #12
1000a57c:	bc0c      	pop	{r2, r3}
1000a57e:	4690      	mov	r8, r2
1000a580:	469b      	mov	fp, r3
1000a582:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a584:	1000a401 	.word	0x1000a401
1000a588:	40006000 	.word	0x40006000
1000a58c:	1000b029 	.word	0x1000b029
1000a590:	40007000 	.word	0x40007000
1000a594:	1000a985 	.word	0x1000a985
1000a598:	1000a995 	.word	0x1000a995
1000a59c:	1000ac79 	.word	0x1000ac79

1000a5a0 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a5a2:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a5a4:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a5a6:	2600      	movs	r6, #0
1000a5a8:	466d      	mov	r5, sp
1000a5aa:	71ee      	strb	r6, [r5, #7]
1000a5ac:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a5ae:	2c00      	cmp	r4, #0
1000a5b0:	d034      	beq.n	1000a61c <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a5b2:	2900      	cmp	r1, #0
1000a5b4:	d104      	bne.n	1000a5c0 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a5b6:	0029      	movs	r1, r5
1000a5b8:	7980      	ldrb	r0, [r0, #6]
1000a5ba:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a5bc:	2701      	movs	r7, #1
1000a5be:	e00b      	b.n	1000a5d8 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a5c0:	2a00      	cmp	r2, #0
1000a5c2:	d005      	beq.n	1000a5d0 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a5c4:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a5c6:	2b00      	cmp	r3, #0
1000a5c8:	d029      	beq.n	1000a61e <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a5ca:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a5cc:	2700      	movs	r7, #0
1000a5ce:	e003      	b.n	1000a5d8 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a5d0:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a5d2:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a5d4:	466a      	mov	r2, sp
1000a5d6:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a5d8:	2528      	movs	r5, #40	; 0x28
1000a5da:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a5dc:	07c0      	lsls	r0, r0, #31
1000a5de:	d4fc      	bmi.n	1000a5da <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a5e0:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a5e2:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a5e4:	2b00      	cmp	r3, #0
1000a5e6:	d014      	beq.n	1000a612 <spi_transceive_buffer_wait+0x72>
1000a5e8:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a5ea:	4278      	negs	r0, r7
1000a5ec:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a5ee:	4270      	negs	r0, r6
1000a5f0:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a5f2:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a5f4:	07c0      	lsls	r0, r0, #31
1000a5f6:	d5fc      	bpl.n	1000a5f2 <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a5f8:	7808      	ldrb	r0, [r1, #0]
1000a5fa:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a5fc:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a5fe:	07c0      	lsls	r0, r0, #31
1000a600:	d5fc      	bpl.n	1000a5fc <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a602:	7920      	ldrb	r0, [r4, #4]
1000a604:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a606:	3501      	adds	r5, #1
1000a608:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a60a:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a60c:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a60e:	42ab      	cmp	r3, r5
1000a610:	d1ef      	bne.n	1000a5f2 <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a612:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a614:	06db      	lsls	r3, r3, #27
1000a616:	d5fc      	bpl.n	1000a612 <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a618:	2000      	movs	r0, #0
1000a61a:	e000      	b.n	1000a61e <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a61c:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a61e:	b003      	add	sp, #12
1000a620:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a622:	46c0      	nop			; (mov r8, r8)

1000a624 <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a624:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a626:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a628:	2a00      	cmp	r2, #0
1000a62a:	d003      	beq.n	1000a634 <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a62c:	2100      	movs	r1, #0
1000a62e:	4b04      	ldr	r3, [pc, #16]	; (1000a640 <spi_select_slave+0x1c>)
1000a630:	4798      	blx	r3
1000a632:	e002      	b.n	1000a63a <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a634:	2101      	movs	r1, #1
1000a636:	4b02      	ldr	r3, [pc, #8]	; (1000a640 <spi_select_slave+0x1c>)
1000a638:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a63a:	2000      	movs	r0, #0
1000a63c:	bd10      	pop	{r4, pc}
1000a63e:	46c0      	nop			; (mov r8, r8)
1000a640:	1000abed 	.word	0x1000abed

1000a644 <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a644:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a646:	4b0d      	ldr	r3, [pc, #52]	; (1000a67c <dualtimer_isr_handler+0x38>)
1000a648:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a64a:	2b00      	cmp	r3, #0
1000a64c:	d007      	beq.n	1000a65e <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a64e:	2201      	movs	r2, #1
1000a650:	4b0a      	ldr	r3, [pc, #40]	; (1000a67c <dualtimer_isr_handler+0x38>)
1000a652:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a654:	4b0a      	ldr	r3, [pc, #40]	; (1000a680 <dualtimer_isr_handler+0x3c>)
1000a656:	681b      	ldr	r3, [r3, #0]
1000a658:	2b00      	cmp	r3, #0
1000a65a:	d000      	beq.n	1000a65e <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a65c:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a65e:	2334      	movs	r3, #52	; 0x34
1000a660:	4a06      	ldr	r2, [pc, #24]	; (1000a67c <dualtimer_isr_handler+0x38>)
1000a662:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a664:	2b00      	cmp	r3, #0
1000a666:	d007      	beq.n	1000a678 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a668:	2101      	movs	r1, #1
1000a66a:	232c      	movs	r3, #44	; 0x2c
1000a66c:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a66e:	4b05      	ldr	r3, [pc, #20]	; (1000a684 <dualtimer_isr_handler+0x40>)
1000a670:	681b      	ldr	r3, [r3, #0]
1000a672:	2b00      	cmp	r3, #0
1000a674:	d000      	beq.n	1000a678 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a676:	4798      	blx	r3
	}
}
1000a678:	bd10      	pop	{r4, pc}
1000a67a:	46c0      	nop			; (mov r8, r8)
1000a67c:	40001000 	.word	0x40001000
1000a680:	10018490 	.word	0x10018490
1000a684:	10018494 	.word	0x10018494

1000a688 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a688:	2301      	movs	r3, #1
1000a68a:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a68c:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a68e:	2202      	movs	r2, #2
1000a690:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a692:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a694:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a696:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a698:	2200      	movs	r2, #0
1000a69a:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a69c:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a69e:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a6a0:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a6a2:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a6a4:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a6a6:	7602      	strb	r2, [r0, #24]
}
1000a6a8:	4770      	bx	lr
1000a6aa:	46c0      	nop			; (mov r8, r8)

1000a6ac <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a6ac:	2800      	cmp	r0, #0
1000a6ae:	d102      	bne.n	1000a6b6 <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a6b0:	4b02      	ldr	r3, [pc, #8]	; (1000a6bc <dualtimer_get_value+0x10>)
1000a6b2:	6858      	ldr	r0, [r3, #4]
1000a6b4:	e001      	b.n	1000a6ba <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a6b6:	4b01      	ldr	r3, [pc, #4]	; (1000a6bc <dualtimer_get_value+0x10>)
1000a6b8:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a6ba:	4770      	bx	lr
1000a6bc:	40001000 	.word	0x40001000

1000a6c0 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a6c0:	2800      	cmp	r0, #0
1000a6c2:	d107      	bne.n	1000a6d4 <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a6c4:	2900      	cmp	r1, #0
1000a6c6:	d102      	bne.n	1000a6ce <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a6c8:	4b06      	ldr	r3, [pc, #24]	; (1000a6e4 <dualtimer_set_counter+0x24>)
1000a6ca:	601a      	str	r2, [r3, #0]
1000a6cc:	e009      	b.n	1000a6e2 <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a6ce:	4b05      	ldr	r3, [pc, #20]	; (1000a6e4 <dualtimer_set_counter+0x24>)
1000a6d0:	619a      	str	r2, [r3, #24]
1000a6d2:	e006      	b.n	1000a6e2 <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a6d4:	2900      	cmp	r1, #0
1000a6d6:	d102      	bne.n	1000a6de <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a6d8:	4b02      	ldr	r3, [pc, #8]	; (1000a6e4 <dualtimer_set_counter+0x24>)
1000a6da:	621a      	str	r2, [r3, #32]
1000a6dc:	e001      	b.n	1000a6e2 <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a6de:	4b01      	ldr	r3, [pc, #4]	; (1000a6e4 <dualtimer_set_counter+0x24>)
1000a6e0:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a6e2:	4770      	bx	lr
1000a6e4:	40001000 	.word	0x40001000

1000a6e8 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a6e8:	2800      	cmp	r0, #0
1000a6ea:	d105      	bne.n	1000a6f8 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a6ec:	4a06      	ldr	r2, [pc, #24]	; (1000a708 <dualtimer_enable+0x20>)
1000a6ee:	7a11      	ldrb	r1, [r2, #8]
1000a6f0:	2380      	movs	r3, #128	; 0x80
1000a6f2:	430b      	orrs	r3, r1
1000a6f4:	7213      	strb	r3, [r2, #8]
1000a6f6:	e005      	b.n	1000a704 <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a6f8:	4903      	ldr	r1, [pc, #12]	; (1000a708 <dualtimer_enable+0x20>)
1000a6fa:	2228      	movs	r2, #40	; 0x28
1000a6fc:	5c88      	ldrb	r0, [r1, r2]
1000a6fe:	2380      	movs	r3, #128	; 0x80
1000a700:	4303      	orrs	r3, r0
1000a702:	548b      	strb	r3, [r1, r2]
	}
}
1000a704:	4770      	bx	lr
1000a706:	46c0      	nop			; (mov r8, r8)
1000a708:	40001000 	.word	0x40001000

1000a70c <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a70c:	2800      	cmp	r0, #0
1000a70e:	d105      	bne.n	1000a71c <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a710:	4a06      	ldr	r2, [pc, #24]	; (1000a72c <dualtimer_disable+0x20>)
1000a712:	7a11      	ldrb	r1, [r2, #8]
1000a714:	237f      	movs	r3, #127	; 0x7f
1000a716:	400b      	ands	r3, r1
1000a718:	7213      	strb	r3, [r2, #8]
1000a71a:	e005      	b.n	1000a728 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a71c:	4903      	ldr	r1, [pc, #12]	; (1000a72c <dualtimer_disable+0x20>)
1000a71e:	2228      	movs	r2, #40	; 0x28
1000a720:	5c88      	ldrb	r0, [r1, r2]
1000a722:	237f      	movs	r3, #127	; 0x7f
1000a724:	4003      	ands	r3, r0
1000a726:	548b      	strb	r3, [r1, r2]
	}
}
1000a728:	4770      	bx	lr
1000a72a:	46c0      	nop			; (mov r8, r8)
1000a72c:	40001000 	.word	0x40001000

1000a730 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a730:	b570      	push	{r4, r5, r6, lr}
1000a732:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a734:	2004      	movs	r0, #4
1000a736:	4b39      	ldr	r3, [pc, #228]	; (1000a81c <dualtimer_init+0xec>)
1000a738:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a73a:	7823      	ldrb	r3, [r4, #0]
1000a73c:	2b00      	cmp	r3, #0
1000a73e:	d102      	bne.n	1000a746 <dualtimer_init+0x16>
1000a740:	7b23      	ldrb	r3, [r4, #12]
1000a742:	2b00      	cmp	r3, #0
1000a744:	d065      	beq.n	1000a812 <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a746:	4936      	ldr	r1, [pc, #216]	; (1000a820 <dualtimer_init+0xf0>)
1000a748:	68ca      	ldr	r2, [r1, #12]
1000a74a:	2320      	movs	r3, #32
1000a74c:	4313      	orrs	r3, r2
1000a74e:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a750:	7e22      	ldrb	r2, [r4, #24]
1000a752:	698b      	ldr	r3, [r1, #24]
1000a754:	2003      	movs	r0, #3
1000a756:	4002      	ands	r2, r0
1000a758:	0112      	lsls	r2, r2, #4
1000a75a:	302d      	adds	r0, #45	; 0x2d
1000a75c:	4383      	bics	r3, r0
1000a75e:	4313      	orrs	r3, r2
1000a760:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a762:	7823      	ldrb	r3, [r4, #0]
1000a764:	2b00      	cmp	r3, #0
1000a766:	d026      	beq.n	1000a7b6 <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a768:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a76a:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a76c:	2b00      	cmp	r3, #0
1000a76e:	d003      	beq.n	1000a778 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a770:	3b02      	subs	r3, #2
1000a772:	425d      	negs	r5, r3
1000a774:	415d      	adcs	r5, r3
1000a776:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a778:	78a2      	ldrb	r2, [r4, #2]
1000a77a:	0052      	lsls	r2, r2, #1
1000a77c:	2502      	movs	r5, #2
1000a77e:	402a      	ands	r2, r5
1000a780:	78e3      	ldrb	r3, [r4, #3]
1000a782:	009b      	lsls	r3, r3, #2
1000a784:	350a      	adds	r5, #10
1000a786:	402b      	ands	r3, r5
1000a788:	431a      	orrs	r2, r3
1000a78a:	0015      	movs	r5, r2
1000a78c:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a78e:	7923      	ldrb	r3, [r4, #4]
1000a790:	2b00      	cmp	r3, #0
1000a792:	d001      	beq.n	1000a798 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a794:	2320      	movs	r3, #32
1000a796:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a798:	4b22      	ldr	r3, [pc, #136]	; (1000a824 <dualtimer_init+0xf4>)
1000a79a:	68a2      	ldr	r2, [r4, #8]
1000a79c:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a79e:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a7a0:	491f      	ldr	r1, [pc, #124]	; (1000a820 <dualtimer_init+0xf0>)
1000a7a2:	22c4      	movs	r2, #196	; 0xc4
1000a7a4:	0052      	lsls	r2, r2, #1
1000a7a6:	5c88      	ldrb	r0, [r1, r2]
1000a7a8:	2301      	movs	r3, #1
1000a7aa:	4303      	orrs	r3, r0
1000a7ac:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a7ae:	2000      	movs	r0, #0
1000a7b0:	4b1d      	ldr	r3, [pc, #116]	; (1000a828 <dualtimer_init+0xf8>)
1000a7b2:	4798      	blx	r3
1000a7b4:	e000      	b.n	1000a7b8 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a7b6:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a7b8:	7b23      	ldrb	r3, [r4, #12]
1000a7ba:	2b00      	cmp	r3, #0
1000a7bc:	d029      	beq.n	1000a812 <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7be:	7b63      	ldrb	r3, [r4, #13]
1000a7c0:	2b00      	cmp	r3, #0
1000a7c2:	d005      	beq.n	1000a7d0 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a7c4:	2b01      	cmp	r3, #1
1000a7c6:	d005      	beq.n	1000a7d4 <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a7c8:	2b02      	cmp	r3, #2
1000a7ca:	d104      	bne.n	1000a7d6 <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a7cc:	2540      	movs	r5, #64	; 0x40
1000a7ce:	e002      	b.n	1000a7d6 <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a7d0:	2501      	movs	r5, #1
1000a7d2:	e000      	b.n	1000a7d6 <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a7d4:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a7d6:	7ba3      	ldrb	r3, [r4, #14]
1000a7d8:	005b      	lsls	r3, r3, #1
1000a7da:	2102      	movs	r1, #2
1000a7dc:	4019      	ands	r1, r3
1000a7de:	7be2      	ldrb	r2, [r4, #15]
1000a7e0:	0092      	lsls	r2, r2, #2
1000a7e2:	230c      	movs	r3, #12
1000a7e4:	4013      	ands	r3, r2
1000a7e6:	430b      	orrs	r3, r1
1000a7e8:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a7ea:	7c23      	ldrb	r3, [r4, #16]
1000a7ec:	2b00      	cmp	r3, #0
1000a7ee:	d001      	beq.n	1000a7f4 <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a7f0:	2320      	movs	r3, #32
1000a7f2:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a7f4:	6962      	ldr	r2, [r4, #20]
1000a7f6:	4b0b      	ldr	r3, [pc, #44]	; (1000a824 <dualtimer_init+0xf4>)
1000a7f8:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a7fa:	2228      	movs	r2, #40	; 0x28
1000a7fc:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a7fe:	4908      	ldr	r1, [pc, #32]	; (1000a820 <dualtimer_init+0xf0>)
1000a800:	3261      	adds	r2, #97	; 0x61
1000a802:	32ff      	adds	r2, #255	; 0xff
1000a804:	5c88      	ldrb	r0, [r1, r2]
1000a806:	2302      	movs	r3, #2
1000a808:	4303      	orrs	r3, r0
1000a80a:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a80c:	2001      	movs	r0, #1
1000a80e:	4b06      	ldr	r3, [pc, #24]	; (1000a828 <dualtimer_init+0xf8>)
1000a810:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a812:	4906      	ldr	r1, [pc, #24]	; (1000a82c <dualtimer_init+0xfc>)
1000a814:	201e      	movs	r0, #30
1000a816:	4b06      	ldr	r3, [pc, #24]	; (1000a830 <dualtimer_init+0x100>)
1000a818:	4798      	blx	r3
}
1000a81a:	bd70      	pop	{r4, r5, r6, pc}
1000a81c:	1000b6f1 	.word	0x1000b6f1
1000a820:	4000b000 	.word	0x4000b000
1000a824:	40001000 	.word	0x40001000
1000a828:	1000a6e9 	.word	0x1000a6e9
1000a82c:	1000a645 	.word	0x1000a645
1000a830:	1000bb59 	.word	0x1000bb59

1000a834 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a834:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a836:	4b16      	ldr	r3, [pc, #88]	; (1000a890 <gpio_port0_isr_handler+0x5c>)
1000a838:	681d      	ldr	r5, [r3, #0]
1000a83a:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a83c:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a83e:	07cb      	lsls	r3, r1, #31
1000a840:	d407      	bmi.n	1000a852 <gpio_port0_isr_handler+0x1e>
1000a842:	2301      	movs	r3, #1
1000a844:	2401      	movs	r4, #1
1000a846:	0018      	movs	r0, r3
1000a848:	0022      	movs	r2, r4
1000a84a:	409a      	lsls	r2, r3
1000a84c:	4211      	tst	r1, r2
1000a84e:	d014      	beq.n	1000a87a <gpio_port0_isr_handler+0x46>
1000a850:	e001      	b.n	1000a856 <gpio_port0_isr_handler+0x22>
1000a852:	2201      	movs	r2, #1
1000a854:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a856:	b292      	uxth	r2, r2
1000a858:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a85a:	2346      	movs	r3, #70	; 0x46
1000a85c:	4a0c      	ldr	r2, [pc, #48]	; (1000a890 <gpio_port0_isr_handler+0x5c>)
1000a85e:	5ad3      	ldrh	r3, [r2, r3]
1000a860:	4103      	asrs	r3, r0
1000a862:	07db      	lsls	r3, r3, #31
1000a864:	d50c      	bpl.n	1000a880 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a866:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a868:	5ad3      	ldrh	r3, [r2, r3]
1000a86a:	4103      	asrs	r3, r0
1000a86c:	07db      	lsls	r3, r3, #31
1000a86e:	d507      	bpl.n	1000a880 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a870:	0080      	lsls	r0, r0, #2
1000a872:	1810      	adds	r0, r2, r0
1000a874:	6843      	ldr	r3, [r0, #4]
1000a876:	4798      	blx	r3
1000a878:	e002      	b.n	1000a880 <gpio_port0_isr_handler+0x4c>
1000a87a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a87c:	2b10      	cmp	r3, #16
1000a87e:	d1e2      	bne.n	1000a846 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a880:	2180      	movs	r1, #128	; 0x80
1000a882:	0409      	lsls	r1, r1, #16
1000a884:	23c0      	movs	r3, #192	; 0xc0
1000a886:	005b      	lsls	r3, r3, #1
1000a888:	4a02      	ldr	r2, [pc, #8]	; (1000a894 <gpio_port0_isr_handler+0x60>)
1000a88a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a88c:	bd70      	pop	{r4, r5, r6, pc}
1000a88e:	46c0      	nop			; (mov r8, r8)
1000a890:	1001a170 	.word	0x1001a170
1000a894:	e000e100 	.word	0xe000e100

1000a898 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a898:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a89a:	4b18      	ldr	r3, [pc, #96]	; (1000a8fc <gpio_port1_isr_handler+0x64>)
1000a89c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a89e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a8a0:	b2b6      	uxth	r6, r6
1000a8a2:	0037      	movs	r7, r6
1000a8a4:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a8a6:	0b76      	lsrs	r6, r6, #13
1000a8a8:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8aa:	4d14      	ldr	r5, [pc, #80]	; (1000a8fc <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a8ac:	2e00      	cmp	r6, #0
1000a8ae:	d001      	beq.n	1000a8b4 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a8b0:	4b13      	ldr	r3, [pc, #76]	; (1000a900 <gpio_port1_isr_handler+0x68>)
1000a8b2:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a8b4:	0022      	movs	r2, r4
1000a8b6:	2301      	movs	r3, #1
1000a8b8:	40a3      	lsls	r3, r4
1000a8ba:	421f      	tst	r7, r3
1000a8bc:	d013      	beq.n	1000a8e6 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8be:	b29b      	uxth	r3, r3
1000a8c0:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a8c2:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a8c4:	238e      	movs	r3, #142	; 0x8e
1000a8c6:	5aeb      	ldrh	r3, [r5, r3]
1000a8c8:	4123      	asrs	r3, r4
1000a8ca:	07db      	lsls	r3, r3, #31
1000a8cc:	d50b      	bpl.n	1000a8e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a8ce:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a8d0:	490a      	ldr	r1, [pc, #40]	; (1000a8fc <gpio_port1_isr_handler+0x64>)
1000a8d2:	5acb      	ldrh	r3, [r1, r3]
1000a8d4:	4123      	asrs	r3, r4
1000a8d6:	07db      	lsls	r3, r3, #31
1000a8d8:	d505      	bpl.n	1000a8e6 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a8da:	3212      	adds	r2, #18
1000a8dc:	0092      	lsls	r2, r2, #2
1000a8de:	188a      	adds	r2, r1, r2
1000a8e0:	6853      	ldr	r3, [r2, #4]
1000a8e2:	4798      	blx	r3
				break;
1000a8e4:	e002      	b.n	1000a8ec <gpio_port1_isr_handler+0x54>
1000a8e6:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a8e8:	2c10      	cmp	r4, #16
1000a8ea:	d1df      	bne.n	1000a8ac <gpio_port1_isr_handler+0x14>
1000a8ec:	2180      	movs	r1, #128	; 0x80
1000a8ee:	0449      	lsls	r1, r1, #17
1000a8f0:	23c0      	movs	r3, #192	; 0xc0
1000a8f2:	005b      	lsls	r3, r3, #1
1000a8f4:	4a03      	ldr	r2, [pc, #12]	; (1000a904 <gpio_port1_isr_handler+0x6c>)
1000a8f6:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a8f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a8fa:	46c0      	nop			; (mov r8, r8)
1000a8fc:	1001a170 	.word	0x1001a170
1000a900:	0001bc51 	.word	0x0001bc51
1000a904:	e000e100 	.word	0xe000e100

1000a908 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a908:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a90a:	2390      	movs	r3, #144	; 0x90
1000a90c:	4a1b      	ldr	r2, [pc, #108]	; (1000a97c <gpio_port2_isr_handler+0x74>)
1000a90e:	58d2      	ldr	r2, [r2, r3]
1000a910:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a912:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a914:	04d9      	lsls	r1, r3, #19
1000a916:	d414      	bmi.n	1000a942 <gpio_port2_isr_handler+0x3a>
1000a918:	0499      	lsls	r1, r3, #18
1000a91a:	d40a      	bmi.n	1000a932 <gpio_port2_isr_handler+0x2a>
1000a91c:	0459      	lsls	r1, r3, #17
1000a91e:	d40c      	bmi.n	1000a93a <gpio_port2_isr_handler+0x32>
1000a920:	0bdb      	lsrs	r3, r3, #15
1000a922:	03db      	lsls	r3, r3, #15
1000a924:	b29b      	uxth	r3, r3
1000a926:	2b00      	cmp	r3, #0
1000a928:	d020      	beq.n	1000a96c <gpio_port2_isr_handler+0x64>
1000a92a:	2380      	movs	r3, #128	; 0x80
1000a92c:	021b      	lsls	r3, r3, #8
1000a92e:	210f      	movs	r1, #15
1000a930:	e00a      	b.n	1000a948 <gpio_port2_isr_handler+0x40>
1000a932:	2380      	movs	r3, #128	; 0x80
1000a934:	019b      	lsls	r3, r3, #6
1000a936:	210d      	movs	r1, #13
1000a938:	e006      	b.n	1000a948 <gpio_port2_isr_handler+0x40>
1000a93a:	2380      	movs	r3, #128	; 0x80
1000a93c:	01db      	lsls	r3, r3, #7
1000a93e:	210e      	movs	r1, #14
1000a940:	e002      	b.n	1000a948 <gpio_port2_isr_handler+0x40>
1000a942:	2380      	movs	r3, #128	; 0x80
1000a944:	015b      	lsls	r3, r3, #5
1000a946:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a948:	b29b      	uxth	r3, r3
1000a94a:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a94c:	23d6      	movs	r3, #214	; 0xd6
1000a94e:	4a0b      	ldr	r2, [pc, #44]	; (1000a97c <gpio_port2_isr_handler+0x74>)
1000a950:	5ad3      	ldrh	r3, [r2, r3]
1000a952:	410b      	asrs	r3, r1
1000a954:	07db      	lsls	r3, r3, #31
1000a956:	d509      	bpl.n	1000a96c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a958:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a95a:	5ad3      	ldrh	r3, [r2, r3]
1000a95c:	410b      	asrs	r3, r1
1000a95e:	07db      	lsls	r3, r3, #31
1000a960:	d504      	bpl.n	1000a96c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000a962:	3124      	adds	r1, #36	; 0x24
1000a964:	0089      	lsls	r1, r1, #2
1000a966:	1851      	adds	r1, r2, r1
1000a968:	684b      	ldr	r3, [r1, #4]
1000a96a:	4798      	blx	r3
1000a96c:	2180      	movs	r1, #128	; 0x80
1000a96e:	0489      	lsls	r1, r1, #18
1000a970:	23c0      	movs	r3, #192	; 0xc0
1000a972:	005b      	lsls	r3, r3, #1
1000a974:	4a02      	ldr	r2, [pc, #8]	; (1000a980 <gpio_port2_isr_handler+0x78>)
1000a976:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000a978:	bd10      	pop	{r4, pc}
1000a97a:	46c0      	nop			; (mov r8, r8)
1000a97c:	1001a170 	.word	0x1001a170
1000a980:	e000e100 	.word	0xe000e100

1000a984 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000a984:	2300      	movs	r3, #0
1000a986:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000a988:	2201      	movs	r2, #1
1000a98a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000a98c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000a98e:	70c3      	strb	r3, [r0, #3]
}
1000a990:	4770      	bx	lr
1000a992:	46c0      	nop			; (mov r8, r8)

1000a994 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000a994:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000a996:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000a998:	2801      	cmp	r0, #1
1000a99a:	d800      	bhi.n	1000a99e <gpio_pin_set_config+0xa>
1000a99c:	e0c8      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000a99e:	2807      	cmp	r0, #7
1000a9a0:	d809      	bhi.n	1000a9b6 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a9a2:	4d64      	ldr	r5, [pc, #400]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000a9a4:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000a9a6:	3b10      	subs	r3, #16
1000a9a8:	4003      	ands	r3, r0
1000a9aa:	009b      	lsls	r3, r3, #2
1000a9ac:	2407      	movs	r4, #7
1000a9ae:	409c      	lsls	r4, r3
1000a9b0:	43a2      	bics	r2, r4
1000a9b2:	646a      	str	r2, [r5, #68]	; 0x44
1000a9b4:	e029      	b.n	1000aa0a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000a9b6:	280f      	cmp	r0, #15
1000a9b8:	d809      	bhi.n	1000a9ce <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a9ba:	4d5e      	ldr	r5, [pc, #376]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000a9bc:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000a9be:	2307      	movs	r3, #7
1000a9c0:	4003      	ands	r3, r0
1000a9c2:	009b      	lsls	r3, r3, #2
1000a9c4:	2407      	movs	r4, #7
1000a9c6:	409c      	lsls	r4, r3
1000a9c8:	43a2      	bics	r2, r4
1000a9ca:	64aa      	str	r2, [r5, #72]	; 0x48
1000a9cc:	e01d      	b.n	1000aa0a <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000a9ce:	2817      	cmp	r0, #23
1000a9d0:	d809      	bhi.n	1000a9e6 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000a9d2:	4d58      	ldr	r5, [pc, #352]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000a9d4:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000a9d6:	2307      	movs	r3, #7
1000a9d8:	4003      	ands	r3, r0
1000a9da:	009b      	lsls	r3, r3, #2
1000a9dc:	2407      	movs	r4, #7
1000a9de:	409c      	lsls	r4, r3
1000a9e0:	43a2      	bics	r2, r4
1000a9e2:	64ea      	str	r2, [r5, #76]	; 0x4c
1000a9e4:	e011      	b.n	1000aa0a <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000a9e6:	0003      	movs	r3, r0
1000a9e8:	3b2c      	subs	r3, #44	; 0x2c
1000a9ea:	2b03      	cmp	r3, #3
1000a9ec:	d80d      	bhi.n	1000aa0a <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000a9ee:	4d52      	ldr	r5, [pc, #328]	; (1000ab38 <gpio_pin_set_config+0x1a4>)
1000a9f0:	2482      	movs	r4, #130	; 0x82
1000a9f2:	00e4      	lsls	r4, r4, #3
1000a9f4:	5d2a      	ldrb	r2, [r5, r4]
1000a9f6:	0712      	lsls	r2, r2, #28
1000a9f8:	2601      	movs	r6, #1
1000a9fa:	409e      	lsls	r6, r3
1000a9fc:	0f12      	lsrs	r2, r2, #28
1000a9fe:	5d2b      	ldrb	r3, [r5, r4]
1000aa00:	43b2      	bics	r2, r6
1000aa02:	260f      	movs	r6, #15
1000aa04:	43b3      	bics	r3, r6
1000aa06:	4313      	orrs	r3, r2
1000aa08:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000aa0a:	0003      	movs	r3, r0
1000aa0c:	3b1d      	subs	r3, #29
1000aa0e:	2b02      	cmp	r3, #2
1000aa10:	d829      	bhi.n	1000aa66 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000aa12:	784b      	ldrb	r3, [r1, #1]
1000aa14:	2b01      	cmp	r3, #1
1000aa16:	d108      	bne.n	1000aa2a <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000aa18:	4d47      	ldr	r5, [pc, #284]	; (1000ab38 <gpio_pin_set_config+0x1a4>)
1000aa1a:	7d2b      	ldrb	r3, [r5, #20]
1000aa1c:	241f      	movs	r4, #31
1000aa1e:	1a24      	subs	r4, r4, r0
1000aa20:	2201      	movs	r2, #1
1000aa22:	40a2      	lsls	r2, r4
1000aa24:	4393      	bics	r3, r2
1000aa26:	752b      	strb	r3, [r5, #20]
1000aa28:	e008      	b.n	1000aa3c <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000aa2a:	4c43      	ldr	r4, [pc, #268]	; (1000ab38 <gpio_pin_set_config+0x1a4>)
1000aa2c:	7d25      	ldrb	r5, [r4, #20]
1000aa2e:	221f      	movs	r2, #31
1000aa30:	1a12      	subs	r2, r2, r0
1000aa32:	2301      	movs	r3, #1
1000aa34:	4093      	lsls	r3, r2
1000aa36:	432b      	orrs	r3, r5
1000aa38:	b2db      	uxtb	r3, r3
1000aa3a:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000aa3c:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa3e:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000aa40:	2a00      	cmp	r2, #0
1000aa42:	d075      	beq.n	1000ab30 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000aa44:	493c      	ldr	r1, [pc, #240]	; (1000ab38 <gpio_pin_set_config+0x1a4>)
1000aa46:	880c      	ldrh	r4, [r1, #0]
1000aa48:	221f      	movs	r2, #31
1000aa4a:	1a10      	subs	r0, r2, r0
1000aa4c:	0080      	lsls	r0, r0, #2
1000aa4e:	3301      	adds	r3, #1
1000aa50:	4083      	lsls	r3, r0
1000aa52:	4323      	orrs	r3, r4
1000aa54:	b29b      	uxth	r3, r3
1000aa56:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000aa58:	4a38      	ldr	r2, [pc, #224]	; (1000ab3c <gpio_pin_set_config+0x1a8>)
1000aa5a:	7811      	ldrb	r1, [r2, #0]
1000aa5c:	2302      	movs	r3, #2
1000aa5e:	430b      	orrs	r3, r1
1000aa60:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa62:	2300      	movs	r3, #0
1000aa64:	e064      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000aa66:	780a      	ldrb	r2, [r1, #0]
1000aa68:	2a00      	cmp	r2, #0
1000aa6a:	d140      	bne.n	1000aaee <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000aa6c:	280f      	cmp	r0, #15
1000aa6e:	d808      	bhi.n	1000aa82 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000aa70:	2301      	movs	r3, #1
1000aa72:	4083      	lsls	r3, r0
1000aa74:	b29b      	uxth	r3, r3
1000aa76:	4a32      	ldr	r2, [pc, #200]	; (1000ab40 <gpio_pin_set_config+0x1ac>)
1000aa78:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aa7a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000aa7c:	281f      	cmp	r0, #31
1000aa7e:	d857      	bhi.n	1000ab30 <gpio_pin_set_config+0x19c>
1000aa80:	e012      	b.n	1000aaa8 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000aa82:	281f      	cmp	r0, #31
1000aa84:	d807      	bhi.n	1000aa96 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aa86:	220f      	movs	r2, #15
1000aa88:	4002      	ands	r2, r0
1000aa8a:	2301      	movs	r3, #1
1000aa8c:	4093      	lsls	r3, r2
1000aa8e:	b29b      	uxth	r3, r3
1000aa90:	4a2c      	ldr	r2, [pc, #176]	; (1000ab44 <gpio_pin_set_config+0x1b0>)
1000aa92:	8293      	strh	r3, [r2, #20]
1000aa94:	e008      	b.n	1000aaa8 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000aa96:	230f      	movs	r3, #15
1000aa98:	4018      	ands	r0, r3
1000aa9a:	3b0e      	subs	r3, #14
1000aa9c:	4083      	lsls	r3, r0
1000aa9e:	b29b      	uxth	r3, r3
1000aaa0:	4a29      	ldr	r2, [pc, #164]	; (1000ab48 <gpio_pin_set_config+0x1b4>)
1000aaa2:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aaa4:	2300      	movs	r3, #0
1000aaa6:	e043      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000aaa8:	784b      	ldrb	r3, [r1, #1]
1000aaaa:	2b01      	cmp	r3, #1
1000aaac:	d00c      	beq.n	1000aac8 <gpio_pin_set_config+0x134>
1000aaae:	2b00      	cmp	r3, #0
1000aab0:	d002      	beq.n	1000aab8 <gpio_pin_set_config+0x124>
1000aab2:	2b02      	cmp	r3, #2
1000aab4:	d010      	beq.n	1000aad8 <gpio_pin_set_config+0x144>
1000aab6:	e03a      	b.n	1000ab2e <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000aab8:	491e      	ldr	r1, [pc, #120]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000aaba:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000aabc:	2301      	movs	r3, #1
1000aabe:	4083      	lsls	r3, r0
1000aac0:	4313      	orrs	r3, r2
1000aac2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aac4:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000aac6:	e033      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000aac8:	491a      	ldr	r1, [pc, #104]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000aaca:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000aacc:	2201      	movs	r2, #1
1000aace:	4082      	lsls	r2, r0
1000aad0:	4393      	bics	r3, r2
1000aad2:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aad4:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000aad6:	e02b      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000aad8:	4b16      	ldr	r3, [pc, #88]	; (1000ab34 <gpio_pin_set_config+0x1a0>)
1000aada:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000aadc:	2201      	movs	r2, #1
1000aade:	4082      	lsls	r2, r0
1000aae0:	4311      	orrs	r1, r2
1000aae2:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000aae4:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000aae6:	4391      	bics	r1, r2
1000aae8:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aaea:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000aaec:	e020      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aaee:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000aaf0:	2a01      	cmp	r2, #1
1000aaf2:	d11d      	bne.n	1000ab30 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000aaf4:	280f      	cmp	r0, #15
1000aaf6:	d806      	bhi.n	1000ab06 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000aaf8:	3301      	adds	r3, #1
1000aafa:	4083      	lsls	r3, r0
1000aafc:	b29b      	uxth	r3, r3
1000aafe:	4a10      	ldr	r2, [pc, #64]	; (1000ab40 <gpio_pin_set_config+0x1ac>)
1000ab00:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab02:	2300      	movs	r3, #0
1000ab04:	e014      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000ab06:	281f      	cmp	r0, #31
1000ab08:	d808      	bhi.n	1000ab1c <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000ab0a:	230f      	movs	r3, #15
1000ab0c:	4018      	ands	r0, r3
1000ab0e:	3b0e      	subs	r3, #14
1000ab10:	4083      	lsls	r3, r0
1000ab12:	b29b      	uxth	r3, r3
1000ab14:	4a0b      	ldr	r2, [pc, #44]	; (1000ab44 <gpio_pin_set_config+0x1b0>)
1000ab16:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab18:	2300      	movs	r3, #0
1000ab1a:	e009      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000ab1c:	230f      	movs	r3, #15
1000ab1e:	4018      	ands	r0, r3
1000ab20:	3b0e      	subs	r3, #14
1000ab22:	4083      	lsls	r3, r0
1000ab24:	b29b      	uxth	r3, r3
1000ab26:	4a08      	ldr	r2, [pc, #32]	; (1000ab48 <gpio_pin_set_config+0x1b4>)
1000ab28:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab2a:	2300      	movs	r3, #0
1000ab2c:	e000      	b.n	1000ab30 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000ab2e:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000ab30:	0018      	movs	r0, r3
1000ab32:	bd70      	pop	{r4, r5, r6, pc}
1000ab34:	4000b000 	.word	0x4000b000
1000ab38:	4000f000 	.word	0x4000f000
1000ab3c:	4000e000 	.word	0x4000e000
1000ab40:	40010000 	.word	0x40010000
1000ab44:	40011000 	.word	0x40011000
1000ab48:	40013000 	.word	0x40013000

1000ab4c <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ab4c:	280f      	cmp	r0, #15
1000ab4e:	d806      	bhi.n	1000ab5e <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000ab50:	4b0f      	ldr	r3, [pc, #60]	; (1000ab90 <gpio_pin_get_input_level+0x44>)
1000ab52:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000ab54:	2301      	movs	r3, #1
1000ab56:	4083      	lsls	r3, r0
1000ab58:	0018      	movs	r0, r3
1000ab5a:	4008      	ands	r0, r1
1000ab5c:	e014      	b.n	1000ab88 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000ab5e:	281f      	cmp	r0, #31
1000ab60:	d809      	bhi.n	1000ab76 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000ab62:	4b0c      	ldr	r3, [pc, #48]	; (1000ab94 <gpio_pin_get_input_level+0x48>)
1000ab64:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ab66:	230f      	movs	r3, #15
1000ab68:	4003      	ands	r3, r0
1000ab6a:	001a      	movs	r2, r3
1000ab6c:	2301      	movs	r3, #1
1000ab6e:	4093      	lsls	r3, r2
1000ab70:	0018      	movs	r0, r3
1000ab72:	4008      	ands	r0, r1
1000ab74:	e008      	b.n	1000ab88 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000ab76:	4b08      	ldr	r3, [pc, #32]	; (1000ab98 <gpio_pin_get_input_level+0x4c>)
1000ab78:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ab7a:	230f      	movs	r3, #15
1000ab7c:	4003      	ands	r3, r0
1000ab7e:	001a      	movs	r2, r3
1000ab80:	2301      	movs	r3, #1
1000ab82:	4093      	lsls	r3, r2
1000ab84:	0018      	movs	r0, r3
1000ab86:	4008      	ands	r0, r1
	}

	return regval;
1000ab88:	1e43      	subs	r3, r0, #1
1000ab8a:	4198      	sbcs	r0, r3
1000ab8c:	b2c0      	uxtb	r0, r0
}
1000ab8e:	4770      	bx	lr
1000ab90:	40010000 	.word	0x40010000
1000ab94:	40011000 	.word	0x40011000
1000ab98:	40013000 	.word	0x40013000

1000ab9c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ab9c:	280f      	cmp	r0, #15
1000ab9e:	d806      	bhi.n	1000abae <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000aba0:	4b0f      	ldr	r3, [pc, #60]	; (1000abe0 <gpio_pin_get_output_level+0x44>)
1000aba2:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000aba4:	2301      	movs	r3, #1
1000aba6:	4083      	lsls	r3, r0
1000aba8:	0018      	movs	r0, r3
1000abaa:	4008      	ands	r0, r1
1000abac:	e014      	b.n	1000abd8 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000abae:	281f      	cmp	r0, #31
1000abb0:	d809      	bhi.n	1000abc6 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000abb2:	4b0c      	ldr	r3, [pc, #48]	; (1000abe4 <gpio_pin_get_output_level+0x48>)
1000abb4:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000abb6:	230f      	movs	r3, #15
1000abb8:	4003      	ands	r3, r0
1000abba:	001a      	movs	r2, r3
1000abbc:	2301      	movs	r3, #1
1000abbe:	4093      	lsls	r3, r2
1000abc0:	0018      	movs	r0, r3
1000abc2:	4008      	ands	r0, r1
1000abc4:	e008      	b.n	1000abd8 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000abc6:	4b08      	ldr	r3, [pc, #32]	; (1000abe8 <gpio_pin_get_output_level+0x4c>)
1000abc8:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000abca:	230f      	movs	r3, #15
1000abcc:	4003      	ands	r3, r0
1000abce:	001a      	movs	r2, r3
1000abd0:	2301      	movs	r3, #1
1000abd2:	4093      	lsls	r3, r2
1000abd4:	0018      	movs	r0, r3
1000abd6:	4008      	ands	r0, r1
	}

	return regval;
1000abd8:	1e43      	subs	r3, r0, #1
1000abda:	4198      	sbcs	r0, r3
1000abdc:	b2c0      	uxtb	r0, r0
}
1000abde:	4770      	bx	lr
1000abe0:	40010000 	.word	0x40010000
1000abe4:	40011000 	.word	0x40011000
1000abe8:	40013000 	.word	0x40013000

1000abec <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000abec:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000abee:	280f      	cmp	r0, #15
1000abf0:	d810      	bhi.n	1000ac14 <gpio_pin_set_output_level+0x28>
		if(level) {
1000abf2:	2900      	cmp	r1, #0
1000abf4:	d007      	beq.n	1000ac06 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000abf6:	4a1d      	ldr	r2, [pc, #116]	; (1000ac6c <gpio_pin_set_output_level+0x80>)
1000abf8:	8891      	ldrh	r1, [r2, #4]
1000abfa:	2301      	movs	r3, #1
1000abfc:	4083      	lsls	r3, r0
1000abfe:	430b      	orrs	r3, r1
1000ac00:	b29b      	uxth	r3, r3
1000ac02:	8093      	strh	r3, [r2, #4]
1000ac04:	e031      	b.n	1000ac6a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000ac06:	4919      	ldr	r1, [pc, #100]	; (1000ac6c <gpio_pin_set_output_level+0x80>)
1000ac08:	888b      	ldrh	r3, [r1, #4]
1000ac0a:	2201      	movs	r2, #1
1000ac0c:	4082      	lsls	r2, r0
1000ac0e:	4393      	bics	r3, r2
1000ac10:	808b      	strh	r3, [r1, #4]
1000ac12:	e02a      	b.n	1000ac6a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000ac14:	281f      	cmp	r0, #31
1000ac16:	d814      	bhi.n	1000ac42 <gpio_pin_set_output_level+0x56>
		if(level) {
1000ac18:	2900      	cmp	r1, #0
1000ac1a:	d009      	beq.n	1000ac30 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ac1c:	4914      	ldr	r1, [pc, #80]	; (1000ac70 <gpio_pin_set_output_level+0x84>)
1000ac1e:	888c      	ldrh	r4, [r1, #4]
1000ac20:	220f      	movs	r2, #15
1000ac22:	4010      	ands	r0, r2
1000ac24:	2301      	movs	r3, #1
1000ac26:	4083      	lsls	r3, r0
1000ac28:	4323      	orrs	r3, r4
1000ac2a:	b29b      	uxth	r3, r3
1000ac2c:	808b      	strh	r3, [r1, #4]
1000ac2e:	e01c      	b.n	1000ac6a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ac30:	490f      	ldr	r1, [pc, #60]	; (1000ac70 <gpio_pin_set_output_level+0x84>)
1000ac32:	888b      	ldrh	r3, [r1, #4]
1000ac34:	220f      	movs	r2, #15
1000ac36:	4010      	ands	r0, r2
1000ac38:	3a0e      	subs	r2, #14
1000ac3a:	4082      	lsls	r2, r0
1000ac3c:	4393      	bics	r3, r2
1000ac3e:	808b      	strh	r3, [r1, #4]
1000ac40:	e013      	b.n	1000ac6a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000ac42:	2900      	cmp	r1, #0
1000ac44:	d009      	beq.n	1000ac5a <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ac46:	490b      	ldr	r1, [pc, #44]	; (1000ac74 <gpio_pin_set_output_level+0x88>)
1000ac48:	888c      	ldrh	r4, [r1, #4]
1000ac4a:	220f      	movs	r2, #15
1000ac4c:	4010      	ands	r0, r2
1000ac4e:	2301      	movs	r3, #1
1000ac50:	4083      	lsls	r3, r0
1000ac52:	4323      	orrs	r3, r4
1000ac54:	b29b      	uxth	r3, r3
1000ac56:	808b      	strh	r3, [r1, #4]
1000ac58:	e007      	b.n	1000ac6a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000ac5a:	4906      	ldr	r1, [pc, #24]	; (1000ac74 <gpio_pin_set_output_level+0x88>)
1000ac5c:	888b      	ldrh	r3, [r1, #4]
1000ac5e:	220f      	movs	r2, #15
1000ac60:	4010      	ands	r0, r2
1000ac62:	3a0e      	subs	r2, #14
1000ac64:	4082      	lsls	r2, r0
1000ac66:	4393      	bics	r3, r2
1000ac68:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000ac6a:	bd10      	pop	{r4, pc}
1000ac6c:	40010000 	.word	0x40010000
1000ac70:	40011000 	.word	0x40011000
1000ac74:	40013000 	.word	0x40013000

1000ac78 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000ac78:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000ac7a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000ac7c:	23ff      	movs	r3, #255	; 0xff
1000ac7e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000ac80:	2807      	cmp	r0, #7
1000ac82:	d833      	bhi.n	1000acec <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ac84:	4a4e      	ldr	r2, [pc, #312]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000ac86:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ac88:	3bf8      	subs	r3, #248	; 0xf8
1000ac8a:	4003      	ands	r3, r0
1000ac8c:	009b      	lsls	r3, r3, #2
1000ac8e:	2607      	movs	r6, #7
1000ac90:	409e      	lsls	r6, r3
1000ac92:	43b4      	bics	r4, r6
1000ac94:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ac96:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ac98:	000e      	movs	r6, r1
1000ac9a:	409e      	lsls	r6, r3
1000ac9c:	0033      	movs	r3, r6
1000ac9e:	4323      	orrs	r3, r4
1000aca0:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000aca2:	2901      	cmp	r1, #1
1000aca4:	d000      	beq.n	1000aca8 <gpio_pinmux_cofiguration+0x30>
1000aca6:	e08a      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000aca8:	2803      	cmp	r0, #3
1000acaa:	d80f      	bhi.n	1000accc <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000acac:	0011      	movs	r1, r2
1000acae:	22d0      	movs	r2, #208	; 0xd0
1000acb0:	0052      	lsls	r2, r2, #1
1000acb2:	588c      	ldr	r4, [r1, r2]
1000acb4:	2303      	movs	r3, #3
1000acb6:	4018      	ands	r0, r3
1000acb8:	00c0      	lsls	r0, r0, #3
1000acba:	333c      	adds	r3, #60	; 0x3c
1000acbc:	4083      	lsls	r3, r0
1000acbe:	439c      	bics	r4, r3
1000acc0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000acc2:	588b      	ldr	r3, [r1, r2]
1000acc4:	4085      	lsls	r5, r0
1000acc6:	431d      	orrs	r5, r3
1000acc8:	508d      	str	r5, [r1, r2]
1000acca:	e078      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000accc:	493c      	ldr	r1, [pc, #240]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000acce:	22d2      	movs	r2, #210	; 0xd2
1000acd0:	0052      	lsls	r2, r2, #1
1000acd2:	588c      	ldr	r4, [r1, r2]
1000acd4:	2303      	movs	r3, #3
1000acd6:	4018      	ands	r0, r3
1000acd8:	00c0      	lsls	r0, r0, #3
1000acda:	333c      	adds	r3, #60	; 0x3c
1000acdc:	4083      	lsls	r3, r0
1000acde:	439c      	bics	r4, r3
1000ace0:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ace2:	588b      	ldr	r3, [r1, r2]
1000ace4:	4085      	lsls	r5, r0
1000ace6:	431d      	orrs	r5, r3
1000ace8:	508d      	str	r5, [r1, r2]
1000acea:	e068      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000acec:	280f      	cmp	r0, #15
1000acee:	d832      	bhi.n	1000ad56 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000acf0:	4a33      	ldr	r2, [pc, #204]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000acf2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000acf4:	2307      	movs	r3, #7
1000acf6:	4003      	ands	r3, r0
1000acf8:	009b      	lsls	r3, r3, #2
1000acfa:	2607      	movs	r6, #7
1000acfc:	409e      	lsls	r6, r3
1000acfe:	43b4      	bics	r4, r6
1000ad00:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ad02:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ad04:	000e      	movs	r6, r1
1000ad06:	409e      	lsls	r6, r3
1000ad08:	0033      	movs	r3, r6
1000ad0a:	4323      	orrs	r3, r4
1000ad0c:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000ad0e:	2901      	cmp	r1, #1
1000ad10:	d155      	bne.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000ad12:	280b      	cmp	r0, #11
1000ad14:	d80f      	bhi.n	1000ad36 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad16:	0011      	movs	r1, r2
1000ad18:	22d4      	movs	r2, #212	; 0xd4
1000ad1a:	0052      	lsls	r2, r2, #1
1000ad1c:	588c      	ldr	r4, [r1, r2]
1000ad1e:	2303      	movs	r3, #3
1000ad20:	4018      	ands	r0, r3
1000ad22:	00c0      	lsls	r0, r0, #3
1000ad24:	333c      	adds	r3, #60	; 0x3c
1000ad26:	4083      	lsls	r3, r0
1000ad28:	439c      	bics	r4, r3
1000ad2a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad2c:	588b      	ldr	r3, [r1, r2]
1000ad2e:	4085      	lsls	r5, r0
1000ad30:	431d      	orrs	r5, r3
1000ad32:	508d      	str	r5, [r1, r2]
1000ad34:	e043      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad36:	4922      	ldr	r1, [pc, #136]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000ad38:	22d6      	movs	r2, #214	; 0xd6
1000ad3a:	0052      	lsls	r2, r2, #1
1000ad3c:	588c      	ldr	r4, [r1, r2]
1000ad3e:	2303      	movs	r3, #3
1000ad40:	4018      	ands	r0, r3
1000ad42:	00c0      	lsls	r0, r0, #3
1000ad44:	333c      	adds	r3, #60	; 0x3c
1000ad46:	4083      	lsls	r3, r0
1000ad48:	439c      	bics	r4, r3
1000ad4a:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad4c:	588b      	ldr	r3, [r1, r2]
1000ad4e:	4085      	lsls	r5, r0
1000ad50:	431d      	orrs	r5, r3
1000ad52:	508d      	str	r5, [r1, r2]
1000ad54:	e033      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000ad56:	2817      	cmp	r0, #23
1000ad58:	d831      	bhi.n	1000adbe <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ad5a:	4a19      	ldr	r2, [pc, #100]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000ad5c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ad5e:	2307      	movs	r3, #7
1000ad60:	4003      	ands	r3, r0
1000ad62:	009b      	lsls	r3, r3, #2
1000ad64:	2607      	movs	r6, #7
1000ad66:	409e      	lsls	r6, r3
1000ad68:	43b4      	bics	r4, r6
1000ad6a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ad6c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ad6e:	000e      	movs	r6, r1
1000ad70:	409e      	lsls	r6, r3
1000ad72:	0033      	movs	r3, r6
1000ad74:	4323      	orrs	r3, r4
1000ad76:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000ad78:	2901      	cmp	r1, #1
1000ad7a:	d120      	bne.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000ad7c:	2813      	cmp	r0, #19
1000ad7e:	d80f      	bhi.n	1000ada0 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad80:	0011      	movs	r1, r2
1000ad82:	22d8      	movs	r2, #216	; 0xd8
1000ad84:	0052      	lsls	r2, r2, #1
1000ad86:	588c      	ldr	r4, [r1, r2]
1000ad88:	2303      	movs	r3, #3
1000ad8a:	4018      	ands	r0, r3
1000ad8c:	00c0      	lsls	r0, r0, #3
1000ad8e:	333c      	adds	r3, #60	; 0x3c
1000ad90:	4083      	lsls	r3, r0
1000ad92:	439c      	bics	r4, r3
1000ad94:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad96:	588b      	ldr	r3, [r1, r2]
1000ad98:	4085      	lsls	r5, r0
1000ad9a:	431d      	orrs	r5, r3
1000ad9c:	508d      	str	r5, [r1, r2]
1000ad9e:	e00e      	b.n	1000adbe <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ada0:	4a07      	ldr	r2, [pc, #28]	; (1000adc0 <gpio_pinmux_cofiguration+0x148>)
1000ada2:	23da      	movs	r3, #218	; 0xda
1000ada4:	005b      	lsls	r3, r3, #1
1000ada6:	58d1      	ldr	r1, [r2, r3]
1000ada8:	2403      	movs	r4, #3
1000adaa:	4020      	ands	r0, r4
1000adac:	00c0      	lsls	r0, r0, #3
1000adae:	343c      	adds	r4, #60	; 0x3c
1000adb0:	4084      	lsls	r4, r0
1000adb2:	43a1      	bics	r1, r4
1000adb4:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000adb6:	58d1      	ldr	r1, [r2, r3]
1000adb8:	4085      	lsls	r5, r0
1000adba:	430d      	orrs	r5, r1
1000adbc:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000adbe:	bd70      	pop	{r4, r5, r6, pc}
1000adc0:	4000b000 	.word	0x4000b000

1000adc4 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000adc4:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000adc6:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000adc8:	280f      	cmp	r0, #15
1000adca:	d904      	bls.n	1000add6 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000adcc:	241f      	movs	r4, #31
1000adce:	4284      	cmp	r4, r0
1000add0:	415b      	adcs	r3, r3
1000add2:	3c1d      	subs	r4, #29
1000add4:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000add6:	2a01      	cmp	r2, #1
1000add8:	d016      	beq.n	1000ae08 <gpio_register_callback+0x44>
1000adda:	2a00      	cmp	r2, #0
1000addc:	d004      	beq.n	1000ade8 <gpio_register_callback+0x24>
1000adde:	2a02      	cmp	r2, #2
1000ade0:	d022      	beq.n	1000ae28 <gpio_register_callback+0x64>
1000ade2:	2a03      	cmp	r2, #3
1000ade4:	d030      	beq.n	1000ae48 <gpio_register_callback+0x84>
1000ade6:	e03e      	b.n	1000ae66 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ade8:	4e29      	ldr	r6, [pc, #164]	; (1000ae90 <gpio_register_callback+0xcc>)
1000adea:	00dc      	lsls	r4, r3, #3
1000adec:	18e2      	adds	r2, r4, r3
1000adee:	00d2      	lsls	r2, r2, #3
1000adf0:	5997      	ldr	r7, [r2, r6]
1000adf2:	250f      	movs	r5, #15
1000adf4:	4005      	ands	r5, r0
1000adf6:	2201      	movs	r2, #1
1000adf8:	40aa      	lsls	r2, r5
1000adfa:	b292      	uxth	r2, r2
1000adfc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000adfe:	18e4      	adds	r4, r4, r3
1000ae00:	00e4      	lsls	r4, r4, #3
1000ae02:	59a4      	ldr	r4, [r4, r6]
1000ae04:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000ae06:	e02e      	b.n	1000ae66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ae08:	4e21      	ldr	r6, [pc, #132]	; (1000ae90 <gpio_register_callback+0xcc>)
1000ae0a:	00dc      	lsls	r4, r3, #3
1000ae0c:	18e2      	adds	r2, r4, r3
1000ae0e:	00d2      	lsls	r2, r2, #3
1000ae10:	5997      	ldr	r7, [r2, r6]
1000ae12:	250f      	movs	r5, #15
1000ae14:	4005      	ands	r5, r0
1000ae16:	2201      	movs	r2, #1
1000ae18:	40aa      	lsls	r2, r5
1000ae1a:	b292      	uxth	r2, r2
1000ae1c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ae1e:	18e4      	adds	r4, r4, r3
1000ae20:	00e4      	lsls	r4, r4, #3
1000ae22:	59a4      	ldr	r4, [r4, r6]
1000ae24:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ae26:	e01e      	b.n	1000ae66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ae28:	4e19      	ldr	r6, [pc, #100]	; (1000ae90 <gpio_register_callback+0xcc>)
1000ae2a:	00dc      	lsls	r4, r3, #3
1000ae2c:	18e2      	adds	r2, r4, r3
1000ae2e:	00d2      	lsls	r2, r2, #3
1000ae30:	5997      	ldr	r7, [r2, r6]
1000ae32:	250f      	movs	r5, #15
1000ae34:	4005      	ands	r5, r0
1000ae36:	2201      	movs	r2, #1
1000ae38:	40aa      	lsls	r2, r5
1000ae3a:	b292      	uxth	r2, r2
1000ae3c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000ae3e:	18e4      	adds	r4, r4, r3
1000ae40:	00e4      	lsls	r4, r4, #3
1000ae42:	59a4      	ldr	r4, [r4, r6]
1000ae44:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000ae46:	e00e      	b.n	1000ae66 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000ae48:	4e11      	ldr	r6, [pc, #68]	; (1000ae90 <gpio_register_callback+0xcc>)
1000ae4a:	00dc      	lsls	r4, r3, #3
1000ae4c:	18e2      	adds	r2, r4, r3
1000ae4e:	00d2      	lsls	r2, r2, #3
1000ae50:	5997      	ldr	r7, [r2, r6]
1000ae52:	250f      	movs	r5, #15
1000ae54:	4005      	ands	r5, r0
1000ae56:	2201      	movs	r2, #1
1000ae58:	40aa      	lsls	r2, r5
1000ae5a:	b292      	uxth	r2, r2
1000ae5c:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000ae5e:	18e4      	adds	r4, r4, r3
1000ae60:	00e4      	lsls	r4, r4, #3
1000ae62:	59a4      	ldr	r4, [r4, r6]
1000ae64:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000ae66:	220f      	movs	r2, #15
1000ae68:	4010      	ands	r0, r2
1000ae6a:	4c09      	ldr	r4, [pc, #36]	; (1000ae90 <gpio_register_callback+0xcc>)
1000ae6c:	00dd      	lsls	r5, r3, #3
1000ae6e:	18ea      	adds	r2, r5, r3
1000ae70:	0052      	lsls	r2, r2, #1
1000ae72:	1812      	adds	r2, r2, r0
1000ae74:	0092      	lsls	r2, r2, #2
1000ae76:	18a2      	adds	r2, r4, r2
1000ae78:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000ae7a:	18ea      	adds	r2, r5, r3
1000ae7c:	00d2      	lsls	r2, r2, #3
1000ae7e:	18a2      	adds	r2, r4, r2
1000ae80:	3244      	adds	r2, #68	; 0x44
1000ae82:	2101      	movs	r1, #1
1000ae84:	4081      	lsls	r1, r0
1000ae86:	8813      	ldrh	r3, [r2, #0]
1000ae88:	430b      	orrs	r3, r1
1000ae8a:	8013      	strh	r3, [r2, #0]
}
1000ae8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ae8e:	46c0      	nop			; (mov r8, r8)
1000ae90:	1001a170 	.word	0x1001a170

1000ae94 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000ae94:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ae96:	280f      	cmp	r0, #15
1000ae98:	d805      	bhi.n	1000aea6 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000ae9a:	2280      	movs	r2, #128	; 0x80
1000ae9c:	0412      	lsls	r2, r2, #16
1000ae9e:	4b12      	ldr	r3, [pc, #72]	; (1000aee8 <gpio_enable_callback+0x54>)
1000aea0:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000aea2:	2200      	movs	r2, #0
1000aea4:	e00c      	b.n	1000aec0 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000aea6:	281f      	cmp	r0, #31
1000aea8:	d805      	bhi.n	1000aeb6 <gpio_enable_callback+0x22>
1000aeaa:	2280      	movs	r2, #128	; 0x80
1000aeac:	0452      	lsls	r2, r2, #17
1000aeae:	4b0e      	ldr	r3, [pc, #56]	; (1000aee8 <gpio_enable_callback+0x54>)
1000aeb0:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000aeb2:	2201      	movs	r2, #1
1000aeb4:	e004      	b.n	1000aec0 <gpio_enable_callback+0x2c>
1000aeb6:	2280      	movs	r2, #128	; 0x80
1000aeb8:	0492      	lsls	r2, r2, #18
1000aeba:	4b0b      	ldr	r3, [pc, #44]	; (1000aee8 <gpio_enable_callback+0x54>)
1000aebc:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000aebe:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000aec0:	230f      	movs	r3, #15
1000aec2:	4018      	ands	r0, r3
1000aec4:	2101      	movs	r1, #1
1000aec6:	4081      	lsls	r1, r0
1000aec8:	4c08      	ldr	r4, [pc, #32]	; (1000aeec <gpio_enable_callback+0x58>)
1000aeca:	00d5      	lsls	r5, r2, #3
1000aecc:	18ab      	adds	r3, r5, r2
1000aece:	00db      	lsls	r3, r3, #3
1000aed0:	18e3      	adds	r3, r4, r3
1000aed2:	3346      	adds	r3, #70	; 0x46
1000aed4:	8818      	ldrh	r0, [r3, #0]
1000aed6:	4308      	orrs	r0, r1
1000aed8:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000aeda:	18aa      	adds	r2, r5, r2
1000aedc:	00d2      	lsls	r2, r2, #3
1000aede:	5913      	ldr	r3, [r2, r4]
1000aee0:	b289      	uxth	r1, r1
1000aee2:	8419      	strh	r1, [r3, #32]
}
1000aee4:	bd30      	pop	{r4, r5, pc}
1000aee6:	46c0      	nop			; (mov r8, r8)
1000aee8:	e000e100 	.word	0xe000e100
1000aeec:	1001a170 	.word	0x1001a170

1000aef0 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000aef0:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000aef2:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000aef4:	280f      	cmp	r0, #15
1000aef6:	d904      	bls.n	1000af02 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000aef8:	221f      	movs	r2, #31
1000aefa:	4282      	cmp	r2, r0
1000aefc:	415b      	adcs	r3, r3
1000aefe:	3a1d      	subs	r2, #29
1000af00:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000af02:	220f      	movs	r2, #15
1000af04:	4010      	ands	r0, r2
1000af06:	2101      	movs	r1, #1
1000af08:	4081      	lsls	r1, r0
1000af0a:	4c07      	ldr	r4, [pc, #28]	; (1000af28 <gpio_disable_callback+0x38>)
1000af0c:	00dd      	lsls	r5, r3, #3
1000af0e:	18ea      	adds	r2, r5, r3
1000af10:	00d2      	lsls	r2, r2, #3
1000af12:	18a2      	adds	r2, r4, r2
1000af14:	3246      	adds	r2, #70	; 0x46
1000af16:	8810      	ldrh	r0, [r2, #0]
1000af18:	4388      	bics	r0, r1
1000af1a:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000af1c:	18eb      	adds	r3, r5, r3
1000af1e:	00db      	lsls	r3, r3, #3
1000af20:	591b      	ldr	r3, [r3, r4]
1000af22:	b289      	uxth	r1, r1
1000af24:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000af26:	bd30      	pop	{r4, r5, pc}
1000af28:	1001a170 	.word	0x1001a170

1000af2c <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000af2c:	b510      	push	{r4, lr}
1000af2e:	4a11      	ldr	r2, [pc, #68]	; (1000af74 <gpio_init+0x48>)
1000af30:	0010      	movs	r0, r2
1000af32:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000af34:	2100      	movs	r1, #0
1000af36:	e007      	b.n	1000af48 <gpio_init+0x1c>
1000af38:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000af3a:	4293      	cmp	r3, r2
1000af3c:	d1fc      	bne.n	1000af38 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000af3e:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000af40:	8011      	strh	r1, [r2, #0]
1000af42:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000af44:	4282      	cmp	r2, r0
1000af46:	d002      	beq.n	1000af4e <gpio_init+0x22>
1000af48:	0013      	movs	r3, r2
1000af4a:	3b40      	subs	r3, #64	; 0x40
1000af4c:	e7f4      	b.n	1000af38 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000af4e:	4b0a      	ldr	r3, [pc, #40]	; (1000af78 <gpio_init+0x4c>)
1000af50:	4a0a      	ldr	r2, [pc, #40]	; (1000af7c <gpio_init+0x50>)
1000af52:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000af54:	4a0a      	ldr	r2, [pc, #40]	; (1000af80 <gpio_init+0x54>)
1000af56:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000af58:	490a      	ldr	r1, [pc, #40]	; (1000af84 <gpio_init+0x58>)
1000af5a:	2290      	movs	r2, #144	; 0x90
1000af5c:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000af5e:	490a      	ldr	r1, [pc, #40]	; (1000af88 <gpio_init+0x5c>)
1000af60:	2027      	movs	r0, #39	; 0x27
1000af62:	4c0a      	ldr	r4, [pc, #40]	; (1000af8c <gpio_init+0x60>)
1000af64:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000af66:	490a      	ldr	r1, [pc, #40]	; (1000af90 <gpio_init+0x64>)
1000af68:	2028      	movs	r0, #40	; 0x28
1000af6a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000af6c:	4909      	ldr	r1, [pc, #36]	; (1000af94 <gpio_init+0x68>)
1000af6e:	2029      	movs	r0, #41	; 0x29
1000af70:	47a0      	blx	r4
}
1000af72:	bd10      	pop	{r4, pc}
1000af74:	1001a1b4 	.word	0x1001a1b4
1000af78:	1001a170 	.word	0x1001a170
1000af7c:	40010000 	.word	0x40010000
1000af80:	40011000 	.word	0x40011000
1000af84:	40013000 	.word	0x40013000
1000af88:	1000a835 	.word	0x1000a835
1000af8c:	1000bb59 	.word	0x1000bb59
1000af90:	1000a899 	.word	0x1000a899
1000af94:	1000a909 	.word	0x1000a909

1000af98 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000af98:	2801      	cmp	r0, #1
1000af9a:	d00d      	beq.n	1000afb8 <system_clock_config+0x20>
1000af9c:	2800      	cmp	r0, #0
1000af9e:	d002      	beq.n	1000afa6 <system_clock_config+0xe>
1000afa0:	2802      	cmp	r0, #2
1000afa2:	d01c      	beq.n	1000afde <system_clock_config+0x46>
1000afa4:	e02e      	b.n	1000b004 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000afa6:	4a18      	ldr	r2, [pc, #96]	; (1000b008 <system_clock_config+0x70>)
1000afa8:	6990      	ldr	r0, [r2, #24]
1000afaa:	230c      	movs	r3, #12
1000afac:	4303      	orrs	r3, r0
1000afae:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000afb0:	4a16      	ldr	r2, [pc, #88]	; (1000b00c <system_clock_config+0x74>)
1000afb2:	4b17      	ldr	r3, [pc, #92]	; (1000b010 <system_clock_config+0x78>)
1000afb4:	601a      	str	r2, [r3, #0]
			break;
1000afb6:	e01a      	b.n	1000afee <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000afb8:	4b13      	ldr	r3, [pc, #76]	; (1000b008 <system_clock_config+0x70>)
1000afba:	6998      	ldr	r0, [r3, #24]
1000afbc:	2208      	movs	r2, #8
1000afbe:	4302      	orrs	r2, r0
1000afc0:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000afc2:	699a      	ldr	r2, [r3, #24]
1000afc4:	2004      	movs	r0, #4
1000afc6:	4382      	bics	r2, r0
1000afc8:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000afca:	4a12      	ldr	r2, [pc, #72]	; (1000b014 <system_clock_config+0x7c>)
1000afcc:	6853      	ldr	r3, [r2, #4]
1000afce:	2080      	movs	r0, #128	; 0x80
1000afd0:	0300      	lsls	r0, r0, #12
1000afd2:	4303      	orrs	r3, r0
1000afd4:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000afd6:	4a10      	ldr	r2, [pc, #64]	; (1000b018 <system_clock_config+0x80>)
1000afd8:	4b0d      	ldr	r3, [pc, #52]	; (1000b010 <system_clock_config+0x78>)
1000afda:	601a      	str	r2, [r3, #0]
			break;
1000afdc:	e007      	b.n	1000afee <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000afde:	4a0a      	ldr	r2, [pc, #40]	; (1000b008 <system_clock_config+0x70>)
1000afe0:	6993      	ldr	r3, [r2, #24]
1000afe2:	200c      	movs	r0, #12
1000afe4:	4383      	bics	r3, r0
1000afe6:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000afe8:	4a08      	ldr	r2, [pc, #32]	; (1000b00c <system_clock_config+0x74>)
1000afea:	4b09      	ldr	r3, [pc, #36]	; (1000b010 <system_clock_config+0x78>)
1000afec:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000afee:	4b06      	ldr	r3, [pc, #24]	; (1000b008 <system_clock_config+0x70>)
1000aff0:	699a      	ldr	r2, [r3, #24]
1000aff2:	2003      	movs	r0, #3
1000aff4:	4382      	bics	r2, r0
1000aff6:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000aff8:	699a      	ldr	r2, [r3, #24]
1000affa:	4001      	ands	r1, r0
1000affc:	4311      	orrs	r1, r2
1000affe:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b000:	2000      	movs	r0, #0
1000b002:	e000      	b.n	1000b006 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b004:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b006:	4770      	bx	lr
1000b008:	4000b000 	.word	0x4000b000
1000b00c:	018cba80 	.word	0x018cba80
1000b010:	1001a248 	.word	0x1001a248
1000b014:	4000f000 	.word	0x4000f000
1000b018:	001e8480 	.word	0x001e8480

1000b01c <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b01c:	4b01      	ldr	r3, [pc, #4]	; (1000b024 <system_clock_get_value+0x8>)
1000b01e:	6818      	ldr	r0, [r3, #0]
}
1000b020:	4770      	bx	lr
1000b022:	46c0      	nop			; (mov r8, r8)
1000b024:	1001a248 	.word	0x1001a248

1000b028 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b028:	b500      	push	{lr}
	switch (peripheral) {
1000b02a:	2835      	cmp	r0, #53	; 0x35
1000b02c:	d900      	bls.n	1000b030 <system_clock_peripheral_enable+0x8>
1000b02e:	e1a2      	b.n	1000b376 <system_clock_peripheral_enable+0x34e>
1000b030:	0080      	lsls	r0, r0, #2
1000b032:	4bd2      	ldr	r3, [pc, #840]	; (1000b37c <system_clock_peripheral_enable+0x354>)
1000b034:	581b      	ldr	r3, [r3, r0]
1000b036:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b038:	4ad1      	ldr	r2, [pc, #836]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b03a:	68d1      	ldr	r1, [r2, #12]
1000b03c:	2302      	movs	r3, #2
1000b03e:	430b      	orrs	r3, r1
1000b040:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b042:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b044:	e198      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b046:	4ace      	ldr	r2, [pc, #824]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b048:	68d1      	ldr	r1, [r2, #12]
1000b04a:	2304      	movs	r3, #4
1000b04c:	430b      	orrs	r3, r1
1000b04e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b050:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b052:	e191      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b054:	4aca      	ldr	r2, [pc, #808]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b056:	68d1      	ldr	r1, [r2, #12]
1000b058:	2308      	movs	r3, #8
1000b05a:	430b      	orrs	r3, r1
1000b05c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b05e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b060:	e18a      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b062:	4ac7      	ldr	r2, [pc, #796]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b064:	68d1      	ldr	r1, [r2, #12]
1000b066:	2310      	movs	r3, #16
1000b068:	430b      	orrs	r3, r1
1000b06a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b06c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b06e:	e183      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b070:	4ac3      	ldr	r2, [pc, #780]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b072:	68d1      	ldr	r1, [r2, #12]
1000b074:	2320      	movs	r3, #32
1000b076:	430b      	orrs	r3, r1
1000b078:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b07a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b07c:	e17c      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b07e:	4ac0      	ldr	r2, [pc, #768]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b080:	68d1      	ldr	r1, [r2, #12]
1000b082:	2380      	movs	r3, #128	; 0x80
1000b084:	430b      	orrs	r3, r1
1000b086:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b088:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b08a:	e175      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b08c:	4abc      	ldr	r2, [pc, #752]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b08e:	68d3      	ldr	r3, [r2, #12]
1000b090:	2180      	movs	r1, #128	; 0x80
1000b092:	0049      	lsls	r1, r1, #1
1000b094:	430b      	orrs	r3, r1
1000b096:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b098:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b09a:	e16d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b09c:	4ab8      	ldr	r2, [pc, #736]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b09e:	68d3      	ldr	r3, [r2, #12]
1000b0a0:	2180      	movs	r1, #128	; 0x80
1000b0a2:	0109      	lsls	r1, r1, #4
1000b0a4:	430b      	orrs	r3, r1
1000b0a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b0aa:	e165      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ac:	4ab4      	ldr	r2, [pc, #720]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0ae:	68d3      	ldr	r3, [r2, #12]
1000b0b0:	2180      	movs	r1, #128	; 0x80
1000b0b2:	0149      	lsls	r1, r1, #5
1000b0b4:	430b      	orrs	r3, r1
1000b0b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b0ba:	e15d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0bc:	4ab0      	ldr	r2, [pc, #704]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0be:	68d3      	ldr	r3, [r2, #12]
1000b0c0:	2180      	movs	r1, #128	; 0x80
1000b0c2:	0189      	lsls	r1, r1, #6
1000b0c4:	430b      	orrs	r3, r1
1000b0c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b0ca:	e155      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0cc:	4aac      	ldr	r2, [pc, #688]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0ce:	68d3      	ldr	r3, [r2, #12]
1000b0d0:	2180      	movs	r1, #128	; 0x80
1000b0d2:	01c9      	lsls	r1, r1, #7
1000b0d4:	430b      	orrs	r3, r1
1000b0d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b0da:	e14d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0dc:	4aa8      	ldr	r2, [pc, #672]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0de:	68d3      	ldr	r3, [r2, #12]
1000b0e0:	2180      	movs	r1, #128	; 0x80
1000b0e2:	0209      	lsls	r1, r1, #8
1000b0e4:	430b      	orrs	r3, r1
1000b0e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b0ea:	e145      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0ec:	4aa4      	ldr	r2, [pc, #656]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0ee:	68d3      	ldr	r3, [r2, #12]
1000b0f0:	2180      	movs	r1, #128	; 0x80
1000b0f2:	0249      	lsls	r1, r1, #9
1000b0f4:	430b      	orrs	r3, r1
1000b0f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b0fa:	e13d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0fc:	4aa0      	ldr	r2, [pc, #640]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b0fe:	68d3      	ldr	r3, [r2, #12]
1000b100:	2180      	movs	r1, #128	; 0x80
1000b102:	0289      	lsls	r1, r1, #10
1000b104:	430b      	orrs	r3, r1
1000b106:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b108:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b10a:	e135      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b10c:	4a9c      	ldr	r2, [pc, #624]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b10e:	68d3      	ldr	r3, [r2, #12]
1000b110:	2180      	movs	r1, #128	; 0x80
1000b112:	02c9      	lsls	r1, r1, #11
1000b114:	430b      	orrs	r3, r1
1000b116:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b118:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b11a:	e12d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b11c:	4a98      	ldr	r2, [pc, #608]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b11e:	68d3      	ldr	r3, [r2, #12]
1000b120:	2180      	movs	r1, #128	; 0x80
1000b122:	0309      	lsls	r1, r1, #12
1000b124:	430b      	orrs	r3, r1
1000b126:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b128:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b12a:	e125      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b12c:	4a94      	ldr	r2, [pc, #592]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b12e:	68d3      	ldr	r3, [r2, #12]
1000b130:	2180      	movs	r1, #128	; 0x80
1000b132:	0349      	lsls	r1, r1, #13
1000b134:	430b      	orrs	r3, r1
1000b136:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b13a:	e11d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b13c:	4a90      	ldr	r2, [pc, #576]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b13e:	68d3      	ldr	r3, [r2, #12]
1000b140:	2180      	movs	r1, #128	; 0x80
1000b142:	0389      	lsls	r1, r1, #14
1000b144:	430b      	orrs	r3, r1
1000b146:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b148:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b14a:	e115      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b14c:	4a8c      	ldr	r2, [pc, #560]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b14e:	68d3      	ldr	r3, [r2, #12]
1000b150:	2180      	movs	r1, #128	; 0x80
1000b152:	03c9      	lsls	r1, r1, #15
1000b154:	430b      	orrs	r3, r1
1000b156:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b158:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b15a:	e10d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b15c:	4a88      	ldr	r2, [pc, #544]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b15e:	68d3      	ldr	r3, [r2, #12]
1000b160:	2180      	movs	r1, #128	; 0x80
1000b162:	0409      	lsls	r1, r1, #16
1000b164:	430b      	orrs	r3, r1
1000b166:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b168:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b16a:	e105      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b16c:	4a84      	ldr	r2, [pc, #528]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b16e:	68d3      	ldr	r3, [r2, #12]
1000b170:	2180      	movs	r1, #128	; 0x80
1000b172:	0449      	lsls	r1, r1, #17
1000b174:	430b      	orrs	r3, r1
1000b176:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b178:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b17a:	e0fd      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b17c:	4a80      	ldr	r2, [pc, #512]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b17e:	68d3      	ldr	r3, [r2, #12]
1000b180:	2180      	movs	r1, #128	; 0x80
1000b182:	0489      	lsls	r1, r1, #18
1000b184:	430b      	orrs	r3, r1
1000b186:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b188:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b18a:	e0f5      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b18c:	4a7c      	ldr	r2, [pc, #496]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b18e:	68d3      	ldr	r3, [r2, #12]
1000b190:	2180      	movs	r1, #128	; 0x80
1000b192:	04c9      	lsls	r1, r1, #19
1000b194:	430b      	orrs	r3, r1
1000b196:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b198:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b19a:	e0ed      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b19c:	4a78      	ldr	r2, [pc, #480]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b19e:	68d3      	ldr	r3, [r2, #12]
1000b1a0:	2180      	movs	r1, #128	; 0x80
1000b1a2:	0509      	lsls	r1, r1, #20
1000b1a4:	430b      	orrs	r3, r1
1000b1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b1aa:	e0e5      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1ac:	4a74      	ldr	r2, [pc, #464]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1ae:	68d3      	ldr	r3, [r2, #12]
1000b1b0:	2180      	movs	r1, #128	; 0x80
1000b1b2:	0549      	lsls	r1, r1, #21
1000b1b4:	430b      	orrs	r3, r1
1000b1b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b1ba:	e0dd      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1bc:	4a70      	ldr	r2, [pc, #448]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1be:	68d3      	ldr	r3, [r2, #12]
1000b1c0:	2180      	movs	r1, #128	; 0x80
1000b1c2:	0589      	lsls	r1, r1, #22
1000b1c4:	430b      	orrs	r3, r1
1000b1c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b1ca:	e0d5      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1cc:	4a6c      	ldr	r2, [pc, #432]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1ce:	68d3      	ldr	r3, [r2, #12]
1000b1d0:	2180      	movs	r1, #128	; 0x80
1000b1d2:	05c9      	lsls	r1, r1, #23
1000b1d4:	430b      	orrs	r3, r1
1000b1d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b1da:	e0cd      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1dc:	4a68      	ldr	r2, [pc, #416]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1de:	6911      	ldr	r1, [r2, #16]
1000b1e0:	2301      	movs	r3, #1
1000b1e2:	430b      	orrs	r3, r1
1000b1e4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b1e8:	e0c6      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1ea:	4a65      	ldr	r2, [pc, #404]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1ec:	6911      	ldr	r1, [r2, #16]
1000b1ee:	2302      	movs	r3, #2
1000b1f0:	430b      	orrs	r3, r1
1000b1f2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b1f6:	e0bf      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b1f8:	4a61      	ldr	r2, [pc, #388]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b1fa:	6911      	ldr	r1, [r2, #16]
1000b1fc:	2304      	movs	r3, #4
1000b1fe:	430b      	orrs	r3, r1
1000b200:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b202:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b204:	e0b8      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b206:	4a5e      	ldr	r2, [pc, #376]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b208:	6911      	ldr	r1, [r2, #16]
1000b20a:	2308      	movs	r3, #8
1000b20c:	430b      	orrs	r3, r1
1000b20e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b210:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b212:	e0b1      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b214:	4a5a      	ldr	r2, [pc, #360]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b216:	6911      	ldr	r1, [r2, #16]
1000b218:	2310      	movs	r3, #16
1000b21a:	430b      	orrs	r3, r1
1000b21c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b21e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b220:	e0aa      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b222:	4a57      	ldr	r2, [pc, #348]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b224:	6911      	ldr	r1, [r2, #16]
1000b226:	2320      	movs	r3, #32
1000b228:	430b      	orrs	r3, r1
1000b22a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b22c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b22e:	e0a3      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b230:	4a53      	ldr	r2, [pc, #332]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b232:	6911      	ldr	r1, [r2, #16]
1000b234:	2340      	movs	r3, #64	; 0x40
1000b236:	430b      	orrs	r3, r1
1000b238:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b23a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b23c:	e09c      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b23e:	4a50      	ldr	r2, [pc, #320]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b240:	6911      	ldr	r1, [r2, #16]
1000b242:	2380      	movs	r3, #128	; 0x80
1000b244:	430b      	orrs	r3, r1
1000b246:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b248:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b24a:	e095      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b24c:	4a4c      	ldr	r2, [pc, #304]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b24e:	6913      	ldr	r3, [r2, #16]
1000b250:	2180      	movs	r1, #128	; 0x80
1000b252:	0049      	lsls	r1, r1, #1
1000b254:	430b      	orrs	r3, r1
1000b256:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b258:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b25a:	e08d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b25c:	4a48      	ldr	r2, [pc, #288]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b25e:	6913      	ldr	r3, [r2, #16]
1000b260:	2180      	movs	r1, #128	; 0x80
1000b262:	0089      	lsls	r1, r1, #2
1000b264:	430b      	orrs	r3, r1
1000b266:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b26a:	e085      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b26c:	4a44      	ldr	r2, [pc, #272]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b26e:	6913      	ldr	r3, [r2, #16]
1000b270:	2180      	movs	r1, #128	; 0x80
1000b272:	00c9      	lsls	r1, r1, #3
1000b274:	430b      	orrs	r3, r1
1000b276:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b27a:	e07d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b27c:	4a40      	ldr	r2, [pc, #256]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b27e:	6913      	ldr	r3, [r2, #16]
1000b280:	2180      	movs	r1, #128	; 0x80
1000b282:	0109      	lsls	r1, r1, #4
1000b284:	430b      	orrs	r3, r1
1000b286:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b288:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b28a:	e075      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b28c:	4a3c      	ldr	r2, [pc, #240]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b28e:	6913      	ldr	r3, [r2, #16]
1000b290:	2180      	movs	r1, #128	; 0x80
1000b292:	0149      	lsls	r1, r1, #5
1000b294:	430b      	orrs	r3, r1
1000b296:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b298:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b29a:	e06d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b29c:	4a38      	ldr	r2, [pc, #224]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b29e:	6913      	ldr	r3, [r2, #16]
1000b2a0:	2180      	movs	r1, #128	; 0x80
1000b2a2:	0189      	lsls	r1, r1, #6
1000b2a4:	430b      	orrs	r3, r1
1000b2a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b2aa:	e065      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2ac:	4a34      	ldr	r2, [pc, #208]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2ae:	6913      	ldr	r3, [r2, #16]
1000b2b0:	2180      	movs	r1, #128	; 0x80
1000b2b2:	01c9      	lsls	r1, r1, #7
1000b2b4:	430b      	orrs	r3, r1
1000b2b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b2ba:	e05d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2bc:	4a30      	ldr	r2, [pc, #192]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2be:	6913      	ldr	r3, [r2, #16]
1000b2c0:	2180      	movs	r1, #128	; 0x80
1000b2c2:	0209      	lsls	r1, r1, #8
1000b2c4:	430b      	orrs	r3, r1
1000b2c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b2ca:	e055      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2cc:	4a2c      	ldr	r2, [pc, #176]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2ce:	6913      	ldr	r3, [r2, #16]
1000b2d0:	2180      	movs	r1, #128	; 0x80
1000b2d2:	0249      	lsls	r1, r1, #9
1000b2d4:	430b      	orrs	r3, r1
1000b2d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b2da:	e04d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2dc:	4a28      	ldr	r2, [pc, #160]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2de:	6913      	ldr	r3, [r2, #16]
1000b2e0:	2180      	movs	r1, #128	; 0x80
1000b2e2:	0289      	lsls	r1, r1, #10
1000b2e4:	430b      	orrs	r3, r1
1000b2e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b2ea:	e045      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2ec:	4a24      	ldr	r2, [pc, #144]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2ee:	6913      	ldr	r3, [r2, #16]
1000b2f0:	2180      	movs	r1, #128	; 0x80
1000b2f2:	02c9      	lsls	r1, r1, #11
1000b2f4:	430b      	orrs	r3, r1
1000b2f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b2fa:	e03d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2fc:	4a20      	ldr	r2, [pc, #128]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b2fe:	6913      	ldr	r3, [r2, #16]
1000b300:	2180      	movs	r1, #128	; 0x80
1000b302:	0309      	lsls	r1, r1, #12
1000b304:	430b      	orrs	r3, r1
1000b306:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b308:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b30a:	e035      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b30c:	4a1c      	ldr	r2, [pc, #112]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b30e:	6913      	ldr	r3, [r2, #16]
1000b310:	2180      	movs	r1, #128	; 0x80
1000b312:	0349      	lsls	r1, r1, #13
1000b314:	430b      	orrs	r3, r1
1000b316:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b318:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b31a:	e02d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b31c:	4a18      	ldr	r2, [pc, #96]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b31e:	6913      	ldr	r3, [r2, #16]
1000b320:	2180      	movs	r1, #128	; 0x80
1000b322:	0389      	lsls	r1, r1, #14
1000b324:	430b      	orrs	r3, r1
1000b326:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b328:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b32a:	e025      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b32c:	4a14      	ldr	r2, [pc, #80]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b32e:	6913      	ldr	r3, [r2, #16]
1000b330:	2180      	movs	r1, #128	; 0x80
1000b332:	03c9      	lsls	r1, r1, #15
1000b334:	430b      	orrs	r3, r1
1000b336:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b338:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b33a:	e01d      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b33c:	4a10      	ldr	r2, [pc, #64]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b33e:	6913      	ldr	r3, [r2, #16]
1000b340:	2180      	movs	r1, #128	; 0x80
1000b342:	0409      	lsls	r1, r1, #16
1000b344:	430b      	orrs	r3, r1
1000b346:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b348:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b34a:	e015      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b34c:	4a0c      	ldr	r2, [pc, #48]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b34e:	7d11      	ldrb	r1, [r2, #20]
1000b350:	2301      	movs	r3, #1
1000b352:	430b      	orrs	r3, r1
1000b354:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b356:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b358:	e00e      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b35a:	4a09      	ldr	r2, [pc, #36]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b35c:	7d11      	ldrb	r1, [r2, #20]
1000b35e:	2302      	movs	r3, #2
1000b360:	430b      	orrs	r3, r1
1000b362:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b364:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b366:	e007      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b368:	4a05      	ldr	r2, [pc, #20]	; (1000b380 <system_clock_peripheral_enable+0x358>)
1000b36a:	7d11      	ldrb	r1, [r2, #20]
1000b36c:	2304      	movs	r3, #4
1000b36e:	430b      	orrs	r3, r1
1000b370:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b372:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b374:	e000      	b.n	1000b378 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b376:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b378:	bd00      	pop	{pc}
1000b37a:	46c0      	nop			; (mov r8, r8)
1000b37c:	10017294 	.word	0x10017294
1000b380:	4000b000 	.word	0x4000b000

1000b384 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b384:	b500      	push	{lr}
	switch (peripheral) {
1000b386:	2835      	cmp	r0, #53	; 0x35
1000b388:	d900      	bls.n	1000b38c <system_clock_peripheral_disable+0x8>
1000b38a:	e17d      	b.n	1000b688 <system_clock_peripheral_disable+0x304>
1000b38c:	0080      	lsls	r0, r0, #2
1000b38e:	4bbf      	ldr	r3, [pc, #764]	; (1000b68c <system_clock_peripheral_disable+0x308>)
1000b390:	581b      	ldr	r3, [r3, r0]
1000b392:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b394:	4abe      	ldr	r2, [pc, #760]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b396:	68d3      	ldr	r3, [r2, #12]
1000b398:	2102      	movs	r1, #2
1000b39a:	438b      	bics	r3, r1
1000b39c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b39e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b3a0:	e173      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3a2:	4abb      	ldr	r2, [pc, #748]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3a4:	68d3      	ldr	r3, [r2, #12]
1000b3a6:	2104      	movs	r1, #4
1000b3a8:	438b      	bics	r3, r1
1000b3aa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ac:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b3ae:	e16c      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3b0:	4ab7      	ldr	r2, [pc, #732]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3b2:	68d3      	ldr	r3, [r2, #12]
1000b3b4:	2108      	movs	r1, #8
1000b3b6:	438b      	bics	r3, r1
1000b3b8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3ba:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b3bc:	e165      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3be:	4ab4      	ldr	r2, [pc, #720]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3c0:	68d3      	ldr	r3, [r2, #12]
1000b3c2:	2110      	movs	r1, #16
1000b3c4:	438b      	bics	r3, r1
1000b3c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b3ca:	e15e      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3cc:	4ab0      	ldr	r2, [pc, #704]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3ce:	68d3      	ldr	r3, [r2, #12]
1000b3d0:	2120      	movs	r1, #32
1000b3d2:	438b      	bics	r3, r1
1000b3d4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b3d8:	e157      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3da:	4aad      	ldr	r2, [pc, #692]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3dc:	68d3      	ldr	r3, [r2, #12]
1000b3de:	2180      	movs	r1, #128	; 0x80
1000b3e0:	438b      	bics	r3, r1
1000b3e2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b3e6:	e150      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3e8:	4aa9      	ldr	r2, [pc, #676]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3ea:	68d1      	ldr	r1, [r2, #12]
1000b3ec:	4ba9      	ldr	r3, [pc, #676]	; (1000b694 <system_clock_peripheral_disable+0x310>)
1000b3ee:	400b      	ands	r3, r1
1000b3f0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b3f4:	e149      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b3f6:	4aa6      	ldr	r2, [pc, #664]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b3f8:	68d1      	ldr	r1, [r2, #12]
1000b3fa:	4ba7      	ldr	r3, [pc, #668]	; (1000b698 <system_clock_peripheral_disable+0x314>)
1000b3fc:	400b      	ands	r3, r1
1000b3fe:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b400:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b402:	e142      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b404:	4aa2      	ldr	r2, [pc, #648]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b406:	68d1      	ldr	r1, [r2, #12]
1000b408:	4ba4      	ldr	r3, [pc, #656]	; (1000b69c <system_clock_peripheral_disable+0x318>)
1000b40a:	400b      	ands	r3, r1
1000b40c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b40e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b410:	e13b      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b412:	4a9f      	ldr	r2, [pc, #636]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b414:	68d1      	ldr	r1, [r2, #12]
1000b416:	4ba2      	ldr	r3, [pc, #648]	; (1000b6a0 <system_clock_peripheral_disable+0x31c>)
1000b418:	400b      	ands	r3, r1
1000b41a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b41c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b41e:	e134      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b420:	4a9b      	ldr	r2, [pc, #620]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b422:	68d1      	ldr	r1, [r2, #12]
1000b424:	4b9f      	ldr	r3, [pc, #636]	; (1000b6a4 <system_clock_peripheral_disable+0x320>)
1000b426:	400b      	ands	r3, r1
1000b428:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b42a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b42c:	e12d      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b42e:	4a98      	ldr	r2, [pc, #608]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b430:	68d1      	ldr	r1, [r2, #12]
1000b432:	4b9d      	ldr	r3, [pc, #628]	; (1000b6a8 <system_clock_peripheral_disable+0x324>)
1000b434:	400b      	ands	r3, r1
1000b436:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b438:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b43a:	e126      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b43c:	4a94      	ldr	r2, [pc, #592]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b43e:	68d1      	ldr	r1, [r2, #12]
1000b440:	4b9a      	ldr	r3, [pc, #616]	; (1000b6ac <system_clock_peripheral_disable+0x328>)
1000b442:	400b      	ands	r3, r1
1000b444:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b446:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b448:	e11f      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b44a:	4a91      	ldr	r2, [pc, #580]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b44c:	68d1      	ldr	r1, [r2, #12]
1000b44e:	4b98      	ldr	r3, [pc, #608]	; (1000b6b0 <system_clock_peripheral_disable+0x32c>)
1000b450:	400b      	ands	r3, r1
1000b452:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b454:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b456:	e118      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b458:	4a8d      	ldr	r2, [pc, #564]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b45a:	68d1      	ldr	r1, [r2, #12]
1000b45c:	4b95      	ldr	r3, [pc, #596]	; (1000b6b4 <system_clock_peripheral_disable+0x330>)
1000b45e:	400b      	ands	r3, r1
1000b460:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b462:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b464:	e111      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b466:	4a8a      	ldr	r2, [pc, #552]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b468:	68d1      	ldr	r1, [r2, #12]
1000b46a:	4b93      	ldr	r3, [pc, #588]	; (1000b6b8 <system_clock_peripheral_disable+0x334>)
1000b46c:	400b      	ands	r3, r1
1000b46e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b470:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b472:	e10a      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b474:	4a86      	ldr	r2, [pc, #536]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b476:	68d1      	ldr	r1, [r2, #12]
1000b478:	4b90      	ldr	r3, [pc, #576]	; (1000b6bc <system_clock_peripheral_disable+0x338>)
1000b47a:	400b      	ands	r3, r1
1000b47c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b47e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b480:	e103      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b482:	4a83      	ldr	r2, [pc, #524]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b484:	68d1      	ldr	r1, [r2, #12]
1000b486:	4b8e      	ldr	r3, [pc, #568]	; (1000b6c0 <system_clock_peripheral_disable+0x33c>)
1000b488:	400b      	ands	r3, r1
1000b48a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b48c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b48e:	e0fc      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b490:	4a7f      	ldr	r2, [pc, #508]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b492:	68d1      	ldr	r1, [r2, #12]
1000b494:	4b8b      	ldr	r3, [pc, #556]	; (1000b6c4 <system_clock_peripheral_disable+0x340>)
1000b496:	400b      	ands	r3, r1
1000b498:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b49a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b49c:	e0f5      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b49e:	4a7c      	ldr	r2, [pc, #496]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4a0:	68d1      	ldr	r1, [r2, #12]
1000b4a2:	4b89      	ldr	r3, [pc, #548]	; (1000b6c8 <system_clock_peripheral_disable+0x344>)
1000b4a4:	400b      	ands	r3, r1
1000b4a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b4aa:	e0ee      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4ac:	4a78      	ldr	r2, [pc, #480]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4ae:	68d1      	ldr	r1, [r2, #12]
1000b4b0:	4b86      	ldr	r3, [pc, #536]	; (1000b6cc <system_clock_peripheral_disable+0x348>)
1000b4b2:	400b      	ands	r3, r1
1000b4b4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4b6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b4b8:	e0e7      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4ba:	4a75      	ldr	r2, [pc, #468]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4bc:	68d1      	ldr	r1, [r2, #12]
1000b4be:	4b84      	ldr	r3, [pc, #528]	; (1000b6d0 <system_clock_peripheral_disable+0x34c>)
1000b4c0:	400b      	ands	r3, r1
1000b4c2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4c4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b4c6:	e0e0      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4c8:	4a71      	ldr	r2, [pc, #452]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4ca:	68d1      	ldr	r1, [r2, #12]
1000b4cc:	4b81      	ldr	r3, [pc, #516]	; (1000b6d4 <system_clock_peripheral_disable+0x350>)
1000b4ce:	400b      	ands	r3, r1
1000b4d0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b4d4:	e0d9      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4d6:	4a6e      	ldr	r2, [pc, #440]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4d8:	68d1      	ldr	r1, [r2, #12]
1000b4da:	4b7f      	ldr	r3, [pc, #508]	; (1000b6d8 <system_clock_peripheral_disable+0x354>)
1000b4dc:	400b      	ands	r3, r1
1000b4de:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b4e2:	e0d2      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4e4:	4a6a      	ldr	r2, [pc, #424]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4e6:	68d1      	ldr	r1, [r2, #12]
1000b4e8:	4b7c      	ldr	r3, [pc, #496]	; (1000b6dc <system_clock_peripheral_disable+0x358>)
1000b4ea:	400b      	ands	r3, r1
1000b4ec:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ee:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b4f0:	e0cb      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4f2:	4a67      	ldr	r2, [pc, #412]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b4f4:	68d1      	ldr	r1, [r2, #12]
1000b4f6:	4b7a      	ldr	r3, [pc, #488]	; (1000b6e0 <system_clock_peripheral_disable+0x35c>)
1000b4f8:	400b      	ands	r3, r1
1000b4fa:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4fc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b4fe:	e0c4      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b500:	4a63      	ldr	r2, [pc, #396]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b502:	68d1      	ldr	r1, [r2, #12]
1000b504:	4b77      	ldr	r3, [pc, #476]	; (1000b6e4 <system_clock_peripheral_disable+0x360>)
1000b506:	400b      	ands	r3, r1
1000b508:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b50a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b50c:	e0bd      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b50e:	4a60      	ldr	r2, [pc, #384]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b510:	6913      	ldr	r3, [r2, #16]
1000b512:	2101      	movs	r1, #1
1000b514:	438b      	bics	r3, r1
1000b516:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b518:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b51a:	e0b6      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b51c:	4a5c      	ldr	r2, [pc, #368]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b51e:	6913      	ldr	r3, [r2, #16]
1000b520:	2102      	movs	r1, #2
1000b522:	438b      	bics	r3, r1
1000b524:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b526:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b528:	e0af      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b52a:	4a59      	ldr	r2, [pc, #356]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b52c:	6913      	ldr	r3, [r2, #16]
1000b52e:	2104      	movs	r1, #4
1000b530:	438b      	bics	r3, r1
1000b532:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b534:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b536:	e0a8      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b538:	4a55      	ldr	r2, [pc, #340]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b53a:	6913      	ldr	r3, [r2, #16]
1000b53c:	2108      	movs	r1, #8
1000b53e:	438b      	bics	r3, r1
1000b540:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b542:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b544:	e0a1      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b546:	4a52      	ldr	r2, [pc, #328]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b548:	6913      	ldr	r3, [r2, #16]
1000b54a:	2110      	movs	r1, #16
1000b54c:	438b      	bics	r3, r1
1000b54e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b550:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b552:	e09a      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b554:	4a4e      	ldr	r2, [pc, #312]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b556:	6913      	ldr	r3, [r2, #16]
1000b558:	2120      	movs	r1, #32
1000b55a:	438b      	bics	r3, r1
1000b55c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b55e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b560:	e093      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b562:	4a4b      	ldr	r2, [pc, #300]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b564:	6913      	ldr	r3, [r2, #16]
1000b566:	2140      	movs	r1, #64	; 0x40
1000b568:	438b      	bics	r3, r1
1000b56a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b56c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b56e:	e08c      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b570:	4a47      	ldr	r2, [pc, #284]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b572:	6913      	ldr	r3, [r2, #16]
1000b574:	2180      	movs	r1, #128	; 0x80
1000b576:	438b      	bics	r3, r1
1000b578:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b57a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b57c:	e085      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b57e:	4a44      	ldr	r2, [pc, #272]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b580:	6911      	ldr	r1, [r2, #16]
1000b582:	4b44      	ldr	r3, [pc, #272]	; (1000b694 <system_clock_peripheral_disable+0x310>)
1000b584:	400b      	ands	r3, r1
1000b586:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b588:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b58a:	e07e      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b58c:	4a40      	ldr	r2, [pc, #256]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b58e:	6911      	ldr	r1, [r2, #16]
1000b590:	4b55      	ldr	r3, [pc, #340]	; (1000b6e8 <system_clock_peripheral_disable+0x364>)
1000b592:	400b      	ands	r3, r1
1000b594:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b596:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b598:	e077      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b59a:	4a3d      	ldr	r2, [pc, #244]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b59c:	6911      	ldr	r1, [r2, #16]
1000b59e:	4b53      	ldr	r3, [pc, #332]	; (1000b6ec <system_clock_peripheral_disable+0x368>)
1000b5a0:	400b      	ands	r3, r1
1000b5a2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5a4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b5a6:	e070      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5a8:	4a39      	ldr	r2, [pc, #228]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5aa:	6911      	ldr	r1, [r2, #16]
1000b5ac:	4b3a      	ldr	r3, [pc, #232]	; (1000b698 <system_clock_peripheral_disable+0x314>)
1000b5ae:	400b      	ands	r3, r1
1000b5b0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5b2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b5b4:	e069      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5b6:	4a36      	ldr	r2, [pc, #216]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5b8:	6911      	ldr	r1, [r2, #16]
1000b5ba:	4b38      	ldr	r3, [pc, #224]	; (1000b69c <system_clock_peripheral_disable+0x318>)
1000b5bc:	400b      	ands	r3, r1
1000b5be:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5c0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b5c2:	e062      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5c4:	4a32      	ldr	r2, [pc, #200]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5c6:	6911      	ldr	r1, [r2, #16]
1000b5c8:	4b35      	ldr	r3, [pc, #212]	; (1000b6a0 <system_clock_peripheral_disable+0x31c>)
1000b5ca:	400b      	ands	r3, r1
1000b5cc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5ce:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b5d0:	e05b      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5d2:	4a2f      	ldr	r2, [pc, #188]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5d4:	6911      	ldr	r1, [r2, #16]
1000b5d6:	4b33      	ldr	r3, [pc, #204]	; (1000b6a4 <system_clock_peripheral_disable+0x320>)
1000b5d8:	400b      	ands	r3, r1
1000b5da:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5dc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b5de:	e054      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5e0:	4a2b      	ldr	r2, [pc, #172]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5e2:	6911      	ldr	r1, [r2, #16]
1000b5e4:	4b30      	ldr	r3, [pc, #192]	; (1000b6a8 <system_clock_peripheral_disable+0x324>)
1000b5e6:	400b      	ands	r3, r1
1000b5e8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5ea:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b5ec:	e04d      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5ee:	4a28      	ldr	r2, [pc, #160]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5f0:	6911      	ldr	r1, [r2, #16]
1000b5f2:	4b2e      	ldr	r3, [pc, #184]	; (1000b6ac <system_clock_peripheral_disable+0x328>)
1000b5f4:	400b      	ands	r3, r1
1000b5f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b5fa:	e046      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5fc:	4a24      	ldr	r2, [pc, #144]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b5fe:	6911      	ldr	r1, [r2, #16]
1000b600:	4b2b      	ldr	r3, [pc, #172]	; (1000b6b0 <system_clock_peripheral_disable+0x32c>)
1000b602:	400b      	ands	r3, r1
1000b604:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b606:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b608:	e03f      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b60a:	4a21      	ldr	r2, [pc, #132]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b60c:	6911      	ldr	r1, [r2, #16]
1000b60e:	4b29      	ldr	r3, [pc, #164]	; (1000b6b4 <system_clock_peripheral_disable+0x330>)
1000b610:	400b      	ands	r3, r1
1000b612:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b614:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b616:	e038      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b618:	4a1d      	ldr	r2, [pc, #116]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b61a:	6911      	ldr	r1, [r2, #16]
1000b61c:	4b26      	ldr	r3, [pc, #152]	; (1000b6b8 <system_clock_peripheral_disable+0x334>)
1000b61e:	400b      	ands	r3, r1
1000b620:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b622:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b624:	e031      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b626:	4a1a      	ldr	r2, [pc, #104]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b628:	6911      	ldr	r1, [r2, #16]
1000b62a:	4b24      	ldr	r3, [pc, #144]	; (1000b6bc <system_clock_peripheral_disable+0x338>)
1000b62c:	400b      	ands	r3, r1
1000b62e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b630:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b632:	e02a      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b634:	4a16      	ldr	r2, [pc, #88]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b636:	6911      	ldr	r1, [r2, #16]
1000b638:	4b21      	ldr	r3, [pc, #132]	; (1000b6c0 <system_clock_peripheral_disable+0x33c>)
1000b63a:	400b      	ands	r3, r1
1000b63c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b63e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b640:	e023      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b642:	4a13      	ldr	r2, [pc, #76]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b644:	6911      	ldr	r1, [r2, #16]
1000b646:	4b1f      	ldr	r3, [pc, #124]	; (1000b6c4 <system_clock_peripheral_disable+0x340>)
1000b648:	400b      	ands	r3, r1
1000b64a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b64c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b64e:	e01c      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b650:	4a0f      	ldr	r2, [pc, #60]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b652:	6911      	ldr	r1, [r2, #16]
1000b654:	4b1c      	ldr	r3, [pc, #112]	; (1000b6c8 <system_clock_peripheral_disable+0x344>)
1000b656:	400b      	ands	r3, r1
1000b658:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b65a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b65c:	e015      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b65e:	4a0c      	ldr	r2, [pc, #48]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b660:	7d13      	ldrb	r3, [r2, #20]
1000b662:	2101      	movs	r1, #1
1000b664:	438b      	bics	r3, r1
1000b666:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b668:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b66a:	e00e      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b66c:	4a08      	ldr	r2, [pc, #32]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b66e:	7d13      	ldrb	r3, [r2, #20]
1000b670:	2102      	movs	r1, #2
1000b672:	438b      	bics	r3, r1
1000b674:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b676:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b678:	e007      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b67a:	4a05      	ldr	r2, [pc, #20]	; (1000b690 <system_clock_peripheral_disable+0x30c>)
1000b67c:	7d13      	ldrb	r3, [r2, #20]
1000b67e:	2104      	movs	r1, #4
1000b680:	438b      	bics	r3, r1
1000b682:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b684:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b686:	e000      	b.n	1000b68a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b688:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b68a:	bd00      	pop	{pc}
1000b68c:	1001736c 	.word	0x1001736c
1000b690:	4000b000 	.word	0x4000b000
1000b694:	fffffeff 	.word	0xfffffeff
1000b698:	fffff7ff 	.word	0xfffff7ff
1000b69c:	ffffefff 	.word	0xffffefff
1000b6a0:	ffffdfff 	.word	0xffffdfff
1000b6a4:	ffffbfff 	.word	0xffffbfff
1000b6a8:	ffff7fff 	.word	0xffff7fff
1000b6ac:	fffeffff 	.word	0xfffeffff
1000b6b0:	fffdffff 	.word	0xfffdffff
1000b6b4:	fffbffff 	.word	0xfffbffff
1000b6b8:	fff7ffff 	.word	0xfff7ffff
1000b6bc:	ffefffff 	.word	0xffefffff
1000b6c0:	ffdfffff 	.word	0xffdfffff
1000b6c4:	ffbfffff 	.word	0xffbfffff
1000b6c8:	ff7fffff 	.word	0xff7fffff
1000b6cc:	feffffff 	.word	0xfeffffff
1000b6d0:	fdffffff 	.word	0xfdffffff
1000b6d4:	fbffffff 	.word	0xfbffffff
1000b6d8:	f7ffffff 	.word	0xf7ffffff
1000b6dc:	efffffff 	.word	0xefffffff
1000b6e0:	dfffffff 	.word	0xdfffffff
1000b6e4:	bfffffff 	.word	0xbfffffff
1000b6e8:	fffffdff 	.word	0xfffffdff
1000b6ec:	fffffbff 	.word	0xfffffbff

1000b6f0 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b6f0:	b500      	push	{lr}
	switch (peripheral) {
1000b6f2:	2843      	cmp	r0, #67	; 0x43
1000b6f4:	d900      	bls.n	1000b6f8 <system_peripheral_reset+0x8>
1000b6f6:	e223      	b.n	1000bb40 <system_peripheral_reset+0x450>
1000b6f8:	0080      	lsls	r0, r0, #2
1000b6fa:	4be0      	ldr	r3, [pc, #896]	; (1000ba7c <system_peripheral_reset+0x38c>)
1000b6fc:	581b      	ldr	r3, [r3, r0]
1000b6fe:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b700:	4bdf      	ldr	r3, [pc, #892]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b702:	6859      	ldr	r1, [r3, #4]
1000b704:	2202      	movs	r2, #2
1000b706:	4391      	bics	r1, r2
1000b708:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b70a:	6859      	ldr	r1, [r3, #4]
1000b70c:	430a      	orrs	r2, r1
1000b70e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b710:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b712:	e216      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b714:	4bda      	ldr	r3, [pc, #872]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b716:	6859      	ldr	r1, [r3, #4]
1000b718:	2204      	movs	r2, #4
1000b71a:	4391      	bics	r1, r2
1000b71c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b71e:	6859      	ldr	r1, [r3, #4]
1000b720:	430a      	orrs	r2, r1
1000b722:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b724:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b726:	e20c      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b728:	4bd5      	ldr	r3, [pc, #852]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b72a:	6859      	ldr	r1, [r3, #4]
1000b72c:	2208      	movs	r2, #8
1000b72e:	4391      	bics	r1, r2
1000b730:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b732:	6859      	ldr	r1, [r3, #4]
1000b734:	430a      	orrs	r2, r1
1000b736:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b738:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b73a:	e202      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b73c:	4bd0      	ldr	r3, [pc, #832]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b73e:	6859      	ldr	r1, [r3, #4]
1000b740:	2210      	movs	r2, #16
1000b742:	4391      	bics	r1, r2
1000b744:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b746:	6859      	ldr	r1, [r3, #4]
1000b748:	430a      	orrs	r2, r1
1000b74a:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b74c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b74e:	e1f8      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b750:	4bcb      	ldr	r3, [pc, #812]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b752:	6859      	ldr	r1, [r3, #4]
1000b754:	2220      	movs	r2, #32
1000b756:	4391      	bics	r1, r2
1000b758:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b75a:	6859      	ldr	r1, [r3, #4]
1000b75c:	430a      	orrs	r2, r1
1000b75e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b760:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b762:	e1ee      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b764:	4bc6      	ldr	r3, [pc, #792]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b766:	6859      	ldr	r1, [r3, #4]
1000b768:	2240      	movs	r2, #64	; 0x40
1000b76a:	4391      	bics	r1, r2
1000b76c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b76e:	6859      	ldr	r1, [r3, #4]
1000b770:	430a      	orrs	r2, r1
1000b772:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b774:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b776:	e1e4      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b778:	4bc1      	ldr	r3, [pc, #772]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b77a:	6859      	ldr	r1, [r3, #4]
1000b77c:	2280      	movs	r2, #128	; 0x80
1000b77e:	4391      	bics	r1, r2
1000b780:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b782:	6859      	ldr	r1, [r3, #4]
1000b784:	430a      	orrs	r2, r1
1000b786:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b788:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b78a:	e1da      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b78c:	4bbc      	ldr	r3, [pc, #752]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b78e:	6859      	ldr	r1, [r3, #4]
1000b790:	4abc      	ldr	r2, [pc, #752]	; (1000ba84 <system_peripheral_reset+0x394>)
1000b792:	400a      	ands	r2, r1
1000b794:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b796:	685a      	ldr	r2, [r3, #4]
1000b798:	2180      	movs	r1, #128	; 0x80
1000b79a:	0049      	lsls	r1, r1, #1
1000b79c:	430a      	orrs	r2, r1
1000b79e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7a0:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b7a2:	e1ce      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7a4:	4bb6      	ldr	r3, [pc, #728]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b7a6:	6859      	ldr	r1, [r3, #4]
1000b7a8:	4ab7      	ldr	r2, [pc, #732]	; (1000ba88 <system_peripheral_reset+0x398>)
1000b7aa:	400a      	ands	r2, r1
1000b7ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7ae:	685a      	ldr	r2, [r3, #4]
1000b7b0:	2180      	movs	r1, #128	; 0x80
1000b7b2:	0089      	lsls	r1, r1, #2
1000b7b4:	430a      	orrs	r2, r1
1000b7b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b8:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b7ba:	e1c2      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7bc:	4bb0      	ldr	r3, [pc, #704]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b7be:	6859      	ldr	r1, [r3, #4]
1000b7c0:	4ab2      	ldr	r2, [pc, #712]	; (1000ba8c <system_peripheral_reset+0x39c>)
1000b7c2:	400a      	ands	r2, r1
1000b7c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7c6:	685a      	ldr	r2, [r3, #4]
1000b7c8:	2180      	movs	r1, #128	; 0x80
1000b7ca:	00c9      	lsls	r1, r1, #3
1000b7cc:	430a      	orrs	r2, r1
1000b7ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7d0:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b7d2:	e1b6      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7d4:	4baa      	ldr	r3, [pc, #680]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b7d6:	6859      	ldr	r1, [r3, #4]
1000b7d8:	4aad      	ldr	r2, [pc, #692]	; (1000ba90 <system_peripheral_reset+0x3a0>)
1000b7da:	400a      	ands	r2, r1
1000b7dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7de:	685a      	ldr	r2, [r3, #4]
1000b7e0:	2180      	movs	r1, #128	; 0x80
1000b7e2:	0109      	lsls	r1, r1, #4
1000b7e4:	430a      	orrs	r2, r1
1000b7e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7e8:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b7ea:	e1aa      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7ec:	4ba4      	ldr	r3, [pc, #656]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b7ee:	6859      	ldr	r1, [r3, #4]
1000b7f0:	4aa8      	ldr	r2, [pc, #672]	; (1000ba94 <system_peripheral_reset+0x3a4>)
1000b7f2:	400a      	ands	r2, r1
1000b7f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7f6:	685a      	ldr	r2, [r3, #4]
1000b7f8:	2180      	movs	r1, #128	; 0x80
1000b7fa:	0149      	lsls	r1, r1, #5
1000b7fc:	430a      	orrs	r2, r1
1000b7fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b800:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b802:	e19e      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b804:	4b9e      	ldr	r3, [pc, #632]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b806:	6859      	ldr	r1, [r3, #4]
1000b808:	4aa3      	ldr	r2, [pc, #652]	; (1000ba98 <system_peripheral_reset+0x3a8>)
1000b80a:	400a      	ands	r2, r1
1000b80c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b80e:	685a      	ldr	r2, [r3, #4]
1000b810:	2180      	movs	r1, #128	; 0x80
1000b812:	0189      	lsls	r1, r1, #6
1000b814:	430a      	orrs	r2, r1
1000b816:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b818:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b81a:	e192      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b81c:	4b98      	ldr	r3, [pc, #608]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b81e:	6859      	ldr	r1, [r3, #4]
1000b820:	4a9e      	ldr	r2, [pc, #632]	; (1000ba9c <system_peripheral_reset+0x3ac>)
1000b822:	400a      	ands	r2, r1
1000b824:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b826:	685a      	ldr	r2, [r3, #4]
1000b828:	2180      	movs	r1, #128	; 0x80
1000b82a:	01c9      	lsls	r1, r1, #7
1000b82c:	430a      	orrs	r2, r1
1000b82e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b830:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b832:	e186      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b834:	4b92      	ldr	r3, [pc, #584]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b836:	6859      	ldr	r1, [r3, #4]
1000b838:	4a99      	ldr	r2, [pc, #612]	; (1000baa0 <system_peripheral_reset+0x3b0>)
1000b83a:	400a      	ands	r2, r1
1000b83c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b83e:	685a      	ldr	r2, [r3, #4]
1000b840:	2180      	movs	r1, #128	; 0x80
1000b842:	0209      	lsls	r1, r1, #8
1000b844:	430a      	orrs	r2, r1
1000b846:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b848:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b84a:	e17a      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b84c:	4b8c      	ldr	r3, [pc, #560]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b84e:	6859      	ldr	r1, [r3, #4]
1000b850:	4a94      	ldr	r2, [pc, #592]	; (1000baa4 <system_peripheral_reset+0x3b4>)
1000b852:	400a      	ands	r2, r1
1000b854:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b856:	685a      	ldr	r2, [r3, #4]
1000b858:	2180      	movs	r1, #128	; 0x80
1000b85a:	0249      	lsls	r1, r1, #9
1000b85c:	430a      	orrs	r2, r1
1000b85e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b860:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b862:	e16e      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b864:	4b86      	ldr	r3, [pc, #536]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b866:	6859      	ldr	r1, [r3, #4]
1000b868:	4a8f      	ldr	r2, [pc, #572]	; (1000baa8 <system_peripheral_reset+0x3b8>)
1000b86a:	400a      	ands	r2, r1
1000b86c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b86e:	685a      	ldr	r2, [r3, #4]
1000b870:	2180      	movs	r1, #128	; 0x80
1000b872:	0289      	lsls	r1, r1, #10
1000b874:	430a      	orrs	r2, r1
1000b876:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b878:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b87a:	e162      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b87c:	4b80      	ldr	r3, [pc, #512]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b87e:	6859      	ldr	r1, [r3, #4]
1000b880:	4a8a      	ldr	r2, [pc, #552]	; (1000baac <system_peripheral_reset+0x3bc>)
1000b882:	400a      	ands	r2, r1
1000b884:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b886:	685a      	ldr	r2, [r3, #4]
1000b888:	2180      	movs	r1, #128	; 0x80
1000b88a:	02c9      	lsls	r1, r1, #11
1000b88c:	430a      	orrs	r2, r1
1000b88e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b890:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b892:	e156      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b894:	4b7a      	ldr	r3, [pc, #488]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b896:	6859      	ldr	r1, [r3, #4]
1000b898:	4a85      	ldr	r2, [pc, #532]	; (1000bab0 <system_peripheral_reset+0x3c0>)
1000b89a:	400a      	ands	r2, r1
1000b89c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b89e:	685a      	ldr	r2, [r3, #4]
1000b8a0:	2180      	movs	r1, #128	; 0x80
1000b8a2:	0309      	lsls	r1, r1, #12
1000b8a4:	430a      	orrs	r2, r1
1000b8a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8a8:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b8aa:	e14a      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8ac:	4b74      	ldr	r3, [pc, #464]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b8ae:	6859      	ldr	r1, [r3, #4]
1000b8b0:	4a80      	ldr	r2, [pc, #512]	; (1000bab4 <system_peripheral_reset+0x3c4>)
1000b8b2:	400a      	ands	r2, r1
1000b8b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8b6:	685a      	ldr	r2, [r3, #4]
1000b8b8:	2180      	movs	r1, #128	; 0x80
1000b8ba:	0349      	lsls	r1, r1, #13
1000b8bc:	430a      	orrs	r2, r1
1000b8be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8c0:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b8c2:	e13e      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8c4:	4b6e      	ldr	r3, [pc, #440]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b8c6:	6859      	ldr	r1, [r3, #4]
1000b8c8:	4a7b      	ldr	r2, [pc, #492]	; (1000bab8 <system_peripheral_reset+0x3c8>)
1000b8ca:	400a      	ands	r2, r1
1000b8cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8ce:	685a      	ldr	r2, [r3, #4]
1000b8d0:	2180      	movs	r1, #128	; 0x80
1000b8d2:	0389      	lsls	r1, r1, #14
1000b8d4:	430a      	orrs	r2, r1
1000b8d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8d8:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b8da:	e132      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8dc:	4b68      	ldr	r3, [pc, #416]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b8de:	6859      	ldr	r1, [r3, #4]
1000b8e0:	4a76      	ldr	r2, [pc, #472]	; (1000babc <system_peripheral_reset+0x3cc>)
1000b8e2:	400a      	ands	r2, r1
1000b8e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8e6:	685a      	ldr	r2, [r3, #4]
1000b8e8:	2180      	movs	r1, #128	; 0x80
1000b8ea:	03c9      	lsls	r1, r1, #15
1000b8ec:	430a      	orrs	r2, r1
1000b8ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8f0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b8f2:	e126      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8f4:	4b62      	ldr	r3, [pc, #392]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b8f6:	6859      	ldr	r1, [r3, #4]
1000b8f8:	4a71      	ldr	r2, [pc, #452]	; (1000bac0 <system_peripheral_reset+0x3d0>)
1000b8fa:	400a      	ands	r2, r1
1000b8fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8fe:	685a      	ldr	r2, [r3, #4]
1000b900:	2180      	movs	r1, #128	; 0x80
1000b902:	0409      	lsls	r1, r1, #16
1000b904:	430a      	orrs	r2, r1
1000b906:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b908:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b90a:	e11a      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b90c:	4b5c      	ldr	r3, [pc, #368]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b90e:	6859      	ldr	r1, [r3, #4]
1000b910:	4a6c      	ldr	r2, [pc, #432]	; (1000bac4 <system_peripheral_reset+0x3d4>)
1000b912:	400a      	ands	r2, r1
1000b914:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b916:	685a      	ldr	r2, [r3, #4]
1000b918:	2180      	movs	r1, #128	; 0x80
1000b91a:	0449      	lsls	r1, r1, #17
1000b91c:	430a      	orrs	r2, r1
1000b91e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b920:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b922:	e10e      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b924:	4b56      	ldr	r3, [pc, #344]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b926:	6859      	ldr	r1, [r3, #4]
1000b928:	4a67      	ldr	r2, [pc, #412]	; (1000bac8 <system_peripheral_reset+0x3d8>)
1000b92a:	400a      	ands	r2, r1
1000b92c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b92e:	685a      	ldr	r2, [r3, #4]
1000b930:	2180      	movs	r1, #128	; 0x80
1000b932:	0489      	lsls	r1, r1, #18
1000b934:	430a      	orrs	r2, r1
1000b936:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b938:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b93a:	e102      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b93c:	4b50      	ldr	r3, [pc, #320]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b93e:	6859      	ldr	r1, [r3, #4]
1000b940:	4a62      	ldr	r2, [pc, #392]	; (1000bacc <system_peripheral_reset+0x3dc>)
1000b942:	400a      	ands	r2, r1
1000b944:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b946:	685a      	ldr	r2, [r3, #4]
1000b948:	2180      	movs	r1, #128	; 0x80
1000b94a:	04c9      	lsls	r1, r1, #19
1000b94c:	430a      	orrs	r2, r1
1000b94e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b950:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b952:	e0f6      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b954:	4b4a      	ldr	r3, [pc, #296]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b956:	6859      	ldr	r1, [r3, #4]
1000b958:	4a5d      	ldr	r2, [pc, #372]	; (1000bad0 <system_peripheral_reset+0x3e0>)
1000b95a:	400a      	ands	r2, r1
1000b95c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b95e:	685a      	ldr	r2, [r3, #4]
1000b960:	2180      	movs	r1, #128	; 0x80
1000b962:	0509      	lsls	r1, r1, #20
1000b964:	430a      	orrs	r2, r1
1000b966:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b968:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000b96a:	e0ea      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b96c:	4b44      	ldr	r3, [pc, #272]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b96e:	6859      	ldr	r1, [r3, #4]
1000b970:	4a58      	ldr	r2, [pc, #352]	; (1000bad4 <system_peripheral_reset+0x3e4>)
1000b972:	400a      	ands	r2, r1
1000b974:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b976:	685a      	ldr	r2, [r3, #4]
1000b978:	2180      	movs	r1, #128	; 0x80
1000b97a:	0549      	lsls	r1, r1, #21
1000b97c:	430a      	orrs	r2, r1
1000b97e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b980:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000b982:	e0de      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b984:	4b3e      	ldr	r3, [pc, #248]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b986:	6859      	ldr	r1, [r3, #4]
1000b988:	4a53      	ldr	r2, [pc, #332]	; (1000bad8 <system_peripheral_reset+0x3e8>)
1000b98a:	400a      	ands	r2, r1
1000b98c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b98e:	685a      	ldr	r2, [r3, #4]
1000b990:	2180      	movs	r1, #128	; 0x80
1000b992:	0589      	lsls	r1, r1, #22
1000b994:	430a      	orrs	r2, r1
1000b996:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b998:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000b99a:	e0d2      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b99c:	4b38      	ldr	r3, [pc, #224]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b99e:	6859      	ldr	r1, [r3, #4]
1000b9a0:	4a4e      	ldr	r2, [pc, #312]	; (1000badc <system_peripheral_reset+0x3ec>)
1000b9a2:	400a      	ands	r2, r1
1000b9a4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9a6:	685a      	ldr	r2, [r3, #4]
1000b9a8:	2180      	movs	r1, #128	; 0x80
1000b9aa:	05c9      	lsls	r1, r1, #23
1000b9ac:	430a      	orrs	r2, r1
1000b9ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9b0:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000b9b2:	e0c6      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9b4:	4a32      	ldr	r2, [pc, #200]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b9b6:	6853      	ldr	r3, [r2, #4]
1000b9b8:	005b      	lsls	r3, r3, #1
1000b9ba:	085b      	lsrs	r3, r3, #1
1000b9bc:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9be:	6853      	ldr	r3, [r2, #4]
1000b9c0:	2180      	movs	r1, #128	; 0x80
1000b9c2:	0609      	lsls	r1, r1, #24
1000b9c4:	430b      	orrs	r3, r1
1000b9c6:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9c8:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000b9ca:	e0ba      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b9cc:	4b2c      	ldr	r3, [pc, #176]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b9ce:	891a      	ldrh	r2, [r3, #8]
1000b9d0:	2101      	movs	r1, #1
1000b9d2:	438a      	bics	r2, r1
1000b9d4:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b9d6:	8919      	ldrh	r1, [r3, #8]
1000b9d8:	2201      	movs	r2, #1
1000b9da:	430a      	orrs	r2, r1
1000b9dc:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9de:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000b9e0:	e0af      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b9e2:	4b27      	ldr	r3, [pc, #156]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b9e4:	891a      	ldrh	r2, [r3, #8]
1000b9e6:	2102      	movs	r1, #2
1000b9e8:	438a      	bics	r2, r1
1000b9ea:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000b9ec:	8919      	ldrh	r1, [r3, #8]
1000b9ee:	2202      	movs	r2, #2
1000b9f0:	430a      	orrs	r2, r1
1000b9f2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9f4:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000b9f6:	e0a4      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000b9f8:	4b21      	ldr	r3, [pc, #132]	; (1000ba80 <system_peripheral_reset+0x390>)
1000b9fa:	891a      	ldrh	r2, [r3, #8]
1000b9fc:	2104      	movs	r1, #4
1000b9fe:	438a      	bics	r2, r1
1000ba00:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba02:	8919      	ldrh	r1, [r3, #8]
1000ba04:	2204      	movs	r2, #4
1000ba06:	430a      	orrs	r2, r1
1000ba08:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba0a:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000ba0c:	e099      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba0e:	4b1c      	ldr	r3, [pc, #112]	; (1000ba80 <system_peripheral_reset+0x390>)
1000ba10:	891a      	ldrh	r2, [r3, #8]
1000ba12:	2108      	movs	r1, #8
1000ba14:	438a      	bics	r2, r1
1000ba16:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba18:	8919      	ldrh	r1, [r3, #8]
1000ba1a:	2208      	movs	r2, #8
1000ba1c:	430a      	orrs	r2, r1
1000ba1e:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba20:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000ba22:	e08e      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba24:	4b16      	ldr	r3, [pc, #88]	; (1000ba80 <system_peripheral_reset+0x390>)
1000ba26:	891a      	ldrh	r2, [r3, #8]
1000ba28:	2110      	movs	r1, #16
1000ba2a:	438a      	bics	r2, r1
1000ba2c:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba2e:	8919      	ldrh	r1, [r3, #8]
1000ba30:	2210      	movs	r2, #16
1000ba32:	430a      	orrs	r2, r1
1000ba34:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba36:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000ba38:	e083      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba3a:	4b11      	ldr	r3, [pc, #68]	; (1000ba80 <system_peripheral_reset+0x390>)
1000ba3c:	891a      	ldrh	r2, [r3, #8]
1000ba3e:	2120      	movs	r1, #32
1000ba40:	438a      	bics	r2, r1
1000ba42:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba44:	8919      	ldrh	r1, [r3, #8]
1000ba46:	2220      	movs	r2, #32
1000ba48:	430a      	orrs	r2, r1
1000ba4a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba4c:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000ba4e:	e078      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba50:	4b0b      	ldr	r3, [pc, #44]	; (1000ba80 <system_peripheral_reset+0x390>)
1000ba52:	891a      	ldrh	r2, [r3, #8]
1000ba54:	2140      	movs	r1, #64	; 0x40
1000ba56:	438a      	bics	r2, r1
1000ba58:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba5a:	8919      	ldrh	r1, [r3, #8]
1000ba5c:	2240      	movs	r2, #64	; 0x40
1000ba5e:	430a      	orrs	r2, r1
1000ba60:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba62:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000ba64:	e06d      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba66:	4b06      	ldr	r3, [pc, #24]	; (1000ba80 <system_peripheral_reset+0x390>)
1000ba68:	891a      	ldrh	r2, [r3, #8]
1000ba6a:	2180      	movs	r1, #128	; 0x80
1000ba6c:	438a      	bics	r2, r1
1000ba6e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba70:	8919      	ldrh	r1, [r3, #8]
1000ba72:	2280      	movs	r2, #128	; 0x80
1000ba74:	430a      	orrs	r2, r1
1000ba76:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba78:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000ba7a:	e062      	b.n	1000bb42 <system_peripheral_reset+0x452>
1000ba7c:	10017444 	.word	0x10017444
1000ba80:	4000b000 	.word	0x4000b000
1000ba84:	fffffeff 	.word	0xfffffeff
1000ba88:	fffffdff 	.word	0xfffffdff
1000ba8c:	fffffbff 	.word	0xfffffbff
1000ba90:	fffff7ff 	.word	0xfffff7ff
1000ba94:	ffffefff 	.word	0xffffefff
1000ba98:	ffffdfff 	.word	0xffffdfff
1000ba9c:	ffffbfff 	.word	0xffffbfff
1000baa0:	ffff7fff 	.word	0xffff7fff
1000baa4:	fffeffff 	.word	0xfffeffff
1000baa8:	fffdffff 	.word	0xfffdffff
1000baac:	fffbffff 	.word	0xfffbffff
1000bab0:	fff7ffff 	.word	0xfff7ffff
1000bab4:	ffefffff 	.word	0xffefffff
1000bab8:	ffdfffff 	.word	0xffdfffff
1000babc:	ffbfffff 	.word	0xffbfffff
1000bac0:	ff7fffff 	.word	0xff7fffff
1000bac4:	feffffff 	.word	0xfeffffff
1000bac8:	fdffffff 	.word	0xfdffffff
1000bacc:	fbffffff 	.word	0xfbffffff
1000bad0:	f7ffffff 	.word	0xf7ffffff
1000bad4:	efffffff 	.word	0xefffffff
1000bad8:	dfffffff 	.word	0xdfffffff
1000badc:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bae0:	4b18      	ldr	r3, [pc, #96]	; (1000bb44 <system_peripheral_reset+0x454>)
1000bae2:	8919      	ldrh	r1, [r3, #8]
1000bae4:	4a18      	ldr	r2, [pc, #96]	; (1000bb48 <system_peripheral_reset+0x458>)
1000bae6:	400a      	ands	r2, r1
1000bae8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000baea:	8919      	ldrh	r1, [r3, #8]
1000baec:	2280      	movs	r2, #128	; 0x80
1000baee:	0052      	lsls	r2, r2, #1
1000baf0:	430a      	orrs	r2, r1
1000baf2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baf4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000baf6:	e024      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000baf8:	4b12      	ldr	r3, [pc, #72]	; (1000bb44 <system_peripheral_reset+0x454>)
1000bafa:	8919      	ldrh	r1, [r3, #8]
1000bafc:	4a13      	ldr	r2, [pc, #76]	; (1000bb4c <system_peripheral_reset+0x45c>)
1000bafe:	400a      	ands	r2, r1
1000bb00:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb02:	8919      	ldrh	r1, [r3, #8]
1000bb04:	2280      	movs	r2, #128	; 0x80
1000bb06:	0092      	lsls	r2, r2, #2
1000bb08:	430a      	orrs	r2, r1
1000bb0a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb0c:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bb0e:	e018      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb10:	4b0c      	ldr	r3, [pc, #48]	; (1000bb44 <system_peripheral_reset+0x454>)
1000bb12:	8919      	ldrh	r1, [r3, #8]
1000bb14:	4a0e      	ldr	r2, [pc, #56]	; (1000bb50 <system_peripheral_reset+0x460>)
1000bb16:	400a      	ands	r2, r1
1000bb18:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb1a:	8919      	ldrh	r1, [r3, #8]
1000bb1c:	2280      	movs	r2, #128	; 0x80
1000bb1e:	00d2      	lsls	r2, r2, #3
1000bb20:	430a      	orrs	r2, r1
1000bb22:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb24:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bb26:	e00c      	b.n	1000bb42 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb28:	4b06      	ldr	r3, [pc, #24]	; (1000bb44 <system_peripheral_reset+0x454>)
1000bb2a:	8919      	ldrh	r1, [r3, #8]
1000bb2c:	4a09      	ldr	r2, [pc, #36]	; (1000bb54 <system_peripheral_reset+0x464>)
1000bb2e:	400a      	ands	r2, r1
1000bb30:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb32:	8919      	ldrh	r1, [r3, #8]
1000bb34:	2280      	movs	r2, #128	; 0x80
1000bb36:	0112      	lsls	r2, r2, #4
1000bb38:	430a      	orrs	r2, r1
1000bb3a:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb3c:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000bb3e:	e000      	b.n	1000bb42 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bb40:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bb42:	bd00      	pop	{pc}
1000bb44:	4000b000 	.word	0x4000b000
1000bb48:	fffffeff 	.word	0xfffffeff
1000bb4c:	fffffdff 	.word	0xfffffdff
1000bb50:	fffffbff 	.word	0xfffffbff
1000bb54:	fffff7ff 	.word	0xfffff7ff

1000bb58 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000bb58:	2380      	movs	r3, #128	; 0x80
1000bb5a:	04db      	lsls	r3, r3, #19
1000bb5c:	469c      	mov	ip, r3
1000bb5e:	4460      	add	r0, ip
1000bb60:	0080      	lsls	r0, r0, #2
1000bb62:	6001      	str	r1, [r0, #0]
}
1000bb64:	4770      	bx	lr
1000bb66:	46c0      	nop			; (mov r8, r8)

1000bb68 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000bb68:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bb6a:	4b20      	ldr	r3, [pc, #128]	; (1000bbec <uart_rx0_isr_handler+0x84>)
1000bb6c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bb6e:	6823      	ldr	r3, [r4, #0]
1000bb70:	7d1d      	ldrb	r5, [r3, #20]
1000bb72:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bb74:	066a      	lsls	r2, r5, #25
1000bb76:	d513      	bpl.n	1000bba0 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bb78:	211e      	movs	r1, #30
1000bb7a:	2222      	movs	r2, #34	; 0x22
1000bb7c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bb7e:	7e1a      	ldrb	r2, [r3, #24]
1000bb80:	3123      	adds	r1, #35	; 0x23
1000bb82:	438a      	bics	r2, r1
1000bb84:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bb86:	2321      	movs	r3, #33	; 0x21
1000bb88:	5ce3      	ldrb	r3, [r4, r3]
1000bb8a:	071b      	lsls	r3, r3, #28
1000bb8c:	d506      	bpl.n	1000bb9c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bb8e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bb90:	5ce3      	ldrb	r3, [r4, r3]
1000bb92:	071b      	lsls	r3, r3, #28
1000bb94:	d502      	bpl.n	1000bb9c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bb96:	0020      	movs	r0, r4
1000bb98:	6923      	ldr	r3, [r4, #16]
1000bb9a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bb9c:	6823      	ldr	r3, [r4, #0]
1000bb9e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bba0:	07eb      	lsls	r3, r5, #31
1000bba2:	d522      	bpl.n	1000bbea <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bba4:	6823      	ldr	r3, [r4, #0]
1000bba6:	7c1b      	ldrb	r3, [r3, #16]
1000bba8:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bbaa:	6962      	ldr	r2, [r4, #20]
1000bbac:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bbae:	6963      	ldr	r3, [r4, #20]
1000bbb0:	3301      	adds	r3, #1
1000bbb2:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bbb4:	8ba3      	ldrh	r3, [r4, #28]
1000bbb6:	3b01      	subs	r3, #1
1000bbb8:	b29b      	uxth	r3, r3
1000bbba:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bbbc:	8ba3      	ldrh	r3, [r4, #28]
1000bbbe:	b29b      	uxth	r3, r3
1000bbc0:	2b00      	cmp	r3, #0
1000bbc2:	d112      	bne.n	1000bbea <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bbc4:	3321      	adds	r3, #33	; 0x21
1000bbc6:	5ce3      	ldrb	r3, [r4, r3]
1000bbc8:	075b      	lsls	r3, r3, #29
1000bbca:	d50e      	bpl.n	1000bbea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bbcc:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bbce:	5ce3      	ldrb	r3, [r4, r3]
1000bbd0:	075b      	lsls	r3, r3, #29
1000bbd2:	d50a      	bpl.n	1000bbea <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bbd4:	2200      	movs	r2, #0
1000bbd6:	2322      	movs	r3, #34	; 0x22
1000bbd8:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bbda:	6822      	ldr	r2, [r4, #0]
1000bbdc:	7e13      	ldrb	r3, [r2, #24]
1000bbde:	2101      	movs	r1, #1
1000bbe0:	438b      	bics	r3, r1
1000bbe2:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bbe4:	68e3      	ldr	r3, [r4, #12]
1000bbe6:	0020      	movs	r0, r4
1000bbe8:	4798      	blx	r3
			}
		}
	}
}
1000bbea:	bd70      	pop	{r4, r5, r6, pc}
1000bbec:	1001a24c 	.word	0x1001a24c

1000bbf0 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000bbf0:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bbf2:	4b21      	ldr	r3, [pc, #132]	; (1000bc78 <uart_tx0_isr_handler+0x88>)
1000bbf4:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bbf6:	6823      	ldr	r3, [r4, #0]
1000bbf8:	791d      	ldrb	r5, [r3, #4]
1000bbfa:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bbfc:	07ea      	lsls	r2, r5, #31
1000bbfe:	d517      	bpl.n	1000bc30 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bc00:	69a2      	ldr	r2, [r4, #24]
1000bc02:	7811      	ldrb	r1, [r2, #0]
1000bc04:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bc06:	3201      	adds	r2, #1
1000bc08:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bc0a:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bc0c:	8be3      	ldrh	r3, [r4, #30]
1000bc0e:	3b01      	subs	r3, #1
1000bc10:	b29b      	uxth	r3, r3
1000bc12:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bc14:	8be3      	ldrh	r3, [r4, #30]
1000bc16:	b29b      	uxth	r3, r3
1000bc18:	2b00      	cmp	r3, #0
1000bc1a:	d109      	bne.n	1000bc30 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc1c:	6822      	ldr	r2, [r4, #0]
1000bc1e:	7a13      	ldrb	r3, [r2, #8]
1000bc20:	2101      	movs	r1, #1
1000bc22:	438b      	bics	r3, r1
1000bc24:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bc26:	6822      	ldr	r2, [r4, #0]
1000bc28:	7a11      	ldrb	r1, [r2, #8]
1000bc2a:	2310      	movs	r3, #16
1000bc2c:	430b      	orrs	r3, r1
1000bc2e:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bc30:	06eb      	lsls	r3, r5, #27
1000bc32:	d512      	bpl.n	1000bc5a <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc34:	2321      	movs	r3, #33	; 0x21
1000bc36:	5ce3      	ldrb	r3, [r4, r3]
1000bc38:	07db      	lsls	r3, r3, #31
1000bc3a:	d50e      	bpl.n	1000bc5a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bc3c:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bc3e:	5ce3      	ldrb	r3, [r4, r3]
1000bc40:	07db      	lsls	r3, r3, #31
1000bc42:	d50a      	bpl.n	1000bc5a <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bc44:	2200      	movs	r2, #0
1000bc46:	2322      	movs	r3, #34	; 0x22
1000bc48:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bc4a:	6822      	ldr	r2, [r4, #0]
1000bc4c:	7a13      	ldrb	r3, [r2, #8]
1000bc4e:	2110      	movs	r1, #16
1000bc50:	438b      	bics	r3, r1
1000bc52:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bc54:	0020      	movs	r0, r4
1000bc56:	6863      	ldr	r3, [r4, #4]
1000bc58:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bc5a:	06ab      	lsls	r3, r5, #26
1000bc5c:	d50a      	bpl.n	1000bc74 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bc5e:	2321      	movs	r3, #33	; 0x21
1000bc60:	5ce3      	ldrb	r3, [r4, r3]
1000bc62:	079b      	lsls	r3, r3, #30
1000bc64:	d506      	bpl.n	1000bc74 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bc66:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bc68:	5ce3      	ldrb	r3, [r4, r3]
1000bc6a:	079b      	lsls	r3, r3, #30
1000bc6c:	d502      	bpl.n	1000bc74 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bc6e:	68a3      	ldr	r3, [r4, #8]
1000bc70:	0020      	movs	r0, r4
1000bc72:	4798      	blx	r3
		}

	}
}
1000bc74:	bd70      	pop	{r4, r5, r6, pc}
1000bc76:	46c0      	nop			; (mov r8, r8)
1000bc78:	1001a24c 	.word	0x1001a24c

1000bc7c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000bc7c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bc7e:	4b20      	ldr	r3, [pc, #128]	; (1000bd00 <uart_rx1_isr_handler+0x84>)
1000bc80:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bc82:	6823      	ldr	r3, [r4, #0]
1000bc84:	7d1d      	ldrb	r5, [r3, #20]
1000bc86:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bc88:	066a      	lsls	r2, r5, #25
1000bc8a:	d513      	bpl.n	1000bcb4 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bc8c:	211e      	movs	r1, #30
1000bc8e:	2222      	movs	r2, #34	; 0x22
1000bc90:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bc92:	7e1a      	ldrb	r2, [r3, #24]
1000bc94:	3123      	adds	r1, #35	; 0x23
1000bc96:	438a      	bics	r2, r1
1000bc98:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bc9a:	2321      	movs	r3, #33	; 0x21
1000bc9c:	5ce3      	ldrb	r3, [r4, r3]
1000bc9e:	071b      	lsls	r3, r3, #28
1000bca0:	d506      	bpl.n	1000bcb0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bca2:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bca4:	5ce3      	ldrb	r3, [r4, r3]
1000bca6:	071b      	lsls	r3, r3, #28
1000bca8:	d502      	bpl.n	1000bcb0 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bcaa:	0020      	movs	r0, r4
1000bcac:	6923      	ldr	r3, [r4, #16]
1000bcae:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bcb0:	6823      	ldr	r3, [r4, #0]
1000bcb2:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bcb4:	07eb      	lsls	r3, r5, #31
1000bcb6:	d522      	bpl.n	1000bcfe <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bcb8:	6823      	ldr	r3, [r4, #0]
1000bcba:	7c1b      	ldrb	r3, [r3, #16]
1000bcbc:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bcbe:	6962      	ldr	r2, [r4, #20]
1000bcc0:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bcc2:	6963      	ldr	r3, [r4, #20]
1000bcc4:	3301      	adds	r3, #1
1000bcc6:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bcc8:	8ba3      	ldrh	r3, [r4, #28]
1000bcca:	3b01      	subs	r3, #1
1000bccc:	b29b      	uxth	r3, r3
1000bcce:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bcd0:	8ba3      	ldrh	r3, [r4, #28]
1000bcd2:	b29b      	uxth	r3, r3
1000bcd4:	2b00      	cmp	r3, #0
1000bcd6:	d112      	bne.n	1000bcfe <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bcd8:	3321      	adds	r3, #33	; 0x21
1000bcda:	5ce3      	ldrb	r3, [r4, r3]
1000bcdc:	075b      	lsls	r3, r3, #29
1000bcde:	d50e      	bpl.n	1000bcfe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bce0:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bce2:	5ce3      	ldrb	r3, [r4, r3]
1000bce4:	075b      	lsls	r3, r3, #29
1000bce6:	d50a      	bpl.n	1000bcfe <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bce8:	2200      	movs	r2, #0
1000bcea:	2322      	movs	r3, #34	; 0x22
1000bcec:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bcee:	6822      	ldr	r2, [r4, #0]
1000bcf0:	7e13      	ldrb	r3, [r2, #24]
1000bcf2:	2101      	movs	r1, #1
1000bcf4:	438b      	bics	r3, r1
1000bcf6:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bcf8:	68e3      	ldr	r3, [r4, #12]
1000bcfa:	0020      	movs	r0, r4
1000bcfc:	4798      	blx	r3
			}
		}
	}
}
1000bcfe:	bd70      	pop	{r4, r5, r6, pc}
1000bd00:	1001a24c 	.word	0x1001a24c

1000bd04 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bd04:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bd06:	4b21      	ldr	r3, [pc, #132]	; (1000bd8c <uart_tx1_isr_handler+0x88>)
1000bd08:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bd0a:	6823      	ldr	r3, [r4, #0]
1000bd0c:	791d      	ldrb	r5, [r3, #4]
1000bd0e:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bd10:	07ea      	lsls	r2, r5, #31
1000bd12:	d517      	bpl.n	1000bd44 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bd14:	69a2      	ldr	r2, [r4, #24]
1000bd16:	7811      	ldrb	r1, [r2, #0]
1000bd18:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bd1a:	3201      	adds	r2, #1
1000bd1c:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bd1e:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bd20:	8be3      	ldrh	r3, [r4, #30]
1000bd22:	3b01      	subs	r3, #1
1000bd24:	b29b      	uxth	r3, r3
1000bd26:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bd28:	8be3      	ldrh	r3, [r4, #30]
1000bd2a:	b29b      	uxth	r3, r3
1000bd2c:	2b00      	cmp	r3, #0
1000bd2e:	d109      	bne.n	1000bd44 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bd30:	6822      	ldr	r2, [r4, #0]
1000bd32:	7a13      	ldrb	r3, [r2, #8]
1000bd34:	2101      	movs	r1, #1
1000bd36:	438b      	bics	r3, r1
1000bd38:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bd3a:	6822      	ldr	r2, [r4, #0]
1000bd3c:	7a11      	ldrb	r1, [r2, #8]
1000bd3e:	2310      	movs	r3, #16
1000bd40:	430b      	orrs	r3, r1
1000bd42:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bd44:	06eb      	lsls	r3, r5, #27
1000bd46:	d512      	bpl.n	1000bd6e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bd48:	2321      	movs	r3, #33	; 0x21
1000bd4a:	5ce3      	ldrb	r3, [r4, r3]
1000bd4c:	07db      	lsls	r3, r3, #31
1000bd4e:	d50e      	bpl.n	1000bd6e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bd50:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bd52:	5ce3      	ldrb	r3, [r4, r3]
1000bd54:	07db      	lsls	r3, r3, #31
1000bd56:	d50a      	bpl.n	1000bd6e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bd58:	2200      	movs	r2, #0
1000bd5a:	2322      	movs	r3, #34	; 0x22
1000bd5c:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bd5e:	6822      	ldr	r2, [r4, #0]
1000bd60:	7a13      	ldrb	r3, [r2, #8]
1000bd62:	2110      	movs	r1, #16
1000bd64:	438b      	bics	r3, r1
1000bd66:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bd68:	0020      	movs	r0, r4
1000bd6a:	6863      	ldr	r3, [r4, #4]
1000bd6c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bd6e:	06ab      	lsls	r3, r5, #26
1000bd70:	d50a      	bpl.n	1000bd88 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bd72:	2321      	movs	r3, #33	; 0x21
1000bd74:	5ce3      	ldrb	r3, [r4, r3]
1000bd76:	079b      	lsls	r3, r3, #30
1000bd78:	d506      	bpl.n	1000bd88 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bd7a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bd7c:	5ce3      	ldrb	r3, [r4, r3]
1000bd7e:	079b      	lsls	r3, r3, #30
1000bd80:	d502      	bpl.n	1000bd88 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bd82:	68a3      	ldr	r3, [r4, #8]
1000bd84:	0020      	movs	r0, r4
1000bd86:	4798      	blx	r3
		}

	}
}
1000bd88:	bd70      	pop	{r4, r5, r6, pc}
1000bd8a:	46c0      	nop			; (mov r8, r8)
1000bd8c:	1001a24c 	.word	0x1001a24c

1000bd90 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000bd90:	23e1      	movs	r3, #225	; 0xe1
1000bd92:	025b      	lsls	r3, r3, #9
1000bd94:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000bd96:	2300      	movs	r3, #0
1000bd98:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000bd9a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000bd9c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000bd9e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000bda0:	3302      	adds	r3, #2
1000bda2:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000bda4:	2203      	movs	r2, #3
1000bda6:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000bda8:	3201      	adds	r2, #1
1000bdaa:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000bdac:	3201      	adds	r2, #1
1000bdae:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000bdb0:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000bdb2:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000bdb4:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000bdb6:	6243      	str	r3, [r0, #36]	; 0x24
}
1000bdb8:	4770      	bx	lr
1000bdba:	46c0      	nop			; (mov r8, r8)

1000bdbc <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bdbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000bdbe:	464f      	mov	r7, r9
1000bdc0:	4646      	mov	r6, r8
1000bdc2:	b4c0      	push	{r6, r7}
1000bdc4:	0005      	movs	r5, r0
1000bdc6:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000bdc8:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000bdca:	2300      	movs	r3, #0
1000bdcc:	6043      	str	r3, [r0, #4]
1000bdce:	6083      	str	r3, [r0, #8]
1000bdd0:	60c3      	str	r3, [r0, #12]
1000bdd2:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000bdd4:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000bdd6:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000bdd8:	2200      	movs	r2, #0
1000bdda:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000bddc:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000bdde:	3320      	adds	r3, #32
1000bde0:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000bde2:	3301      	adds	r3, #1
1000bde4:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000bde6:	3301      	adds	r3, #1
1000bde8:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000bdea:	4b55      	ldr	r3, [pc, #340]	; (1000bf40 <uart_init+0x184>)
1000bdec:	4299      	cmp	r1, r3
1000bdee:	d118      	bne.n	1000be22 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000bdf0:	2009      	movs	r0, #9
1000bdf2:	4c54      	ldr	r4, [pc, #336]	; (1000bf44 <uart_init+0x188>)
1000bdf4:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000bdf6:	200a      	movs	r0, #10
1000bdf8:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000bdfa:	2009      	movs	r0, #9
1000bdfc:	4c52      	ldr	r4, [pc, #328]	; (1000bf48 <uart_init+0x18c>)
1000bdfe:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000be00:	200a      	movs	r0, #10
1000be02:	47a0      	blx	r4
		_uart_instances[0] = module;
1000be04:	4b51      	ldr	r3, [pc, #324]	; (1000bf4c <uart_init+0x190>)
1000be06:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000be08:	4951      	ldr	r1, [pc, #324]	; (1000bf50 <uart_init+0x194>)
1000be0a:	2010      	movs	r0, #16
1000be0c:	4c51      	ldr	r4, [pc, #324]	; (1000bf54 <uart_init+0x198>)
1000be0e:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000be10:	4951      	ldr	r1, [pc, #324]	; (1000bf58 <uart_init+0x19c>)
1000be12:	2011      	movs	r0, #17
1000be14:	47a0      	blx	r4
1000be16:	4b51      	ldr	r3, [pc, #324]	; (1000bf5c <uart_init+0x1a0>)
1000be18:	2201      	movs	r2, #1
1000be1a:	601a      	str	r2, [r3, #0]
1000be1c:	3201      	adds	r2, #1
1000be1e:	601a      	str	r2, [r3, #0]
1000be20:	e01a      	b.n	1000be58 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000be22:	4b4f      	ldr	r3, [pc, #316]	; (1000bf60 <uart_init+0x1a4>)
1000be24:	4299      	cmp	r1, r3
1000be26:	d117      	bne.n	1000be58 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000be28:	200b      	movs	r0, #11
1000be2a:	4c46      	ldr	r4, [pc, #280]	; (1000bf44 <uart_init+0x188>)
1000be2c:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000be2e:	200c      	movs	r0, #12
1000be30:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000be32:	200b      	movs	r0, #11
1000be34:	4c44      	ldr	r4, [pc, #272]	; (1000bf48 <uart_init+0x18c>)
1000be36:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000be38:	200c      	movs	r0, #12
1000be3a:	47a0      	blx	r4
		_uart_instances[1] = module;
1000be3c:	4b43      	ldr	r3, [pc, #268]	; (1000bf4c <uart_init+0x190>)
1000be3e:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000be40:	4948      	ldr	r1, [pc, #288]	; (1000bf64 <uart_init+0x1a8>)
1000be42:	2012      	movs	r0, #18
1000be44:	4c43      	ldr	r4, [pc, #268]	; (1000bf54 <uart_init+0x198>)
1000be46:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000be48:	4947      	ldr	r1, [pc, #284]	; (1000bf68 <uart_init+0x1ac>)
1000be4a:	2013      	movs	r0, #19
1000be4c:	47a0      	blx	r4
1000be4e:	4b43      	ldr	r3, [pc, #268]	; (1000bf5c <uart_init+0x1a0>)
1000be50:	2204      	movs	r2, #4
1000be52:	601a      	str	r2, [r3, #0]
1000be54:	3204      	adds	r2, #4
1000be56:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000be58:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000be5a:	2204      	movs	r2, #4
1000be5c:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000be5e:	2b00      	cmp	r3, #0
1000be60:	d152      	bne.n	1000bf08 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000be62:	3302      	adds	r3, #2
1000be64:	4698      	mov	r8, r3
1000be66:	e04f      	b.n	1000bf08 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000be68:	8a31      	ldrh	r1, [r6, #16]
1000be6a:	ce01      	ldmia	r6!, {r0}
1000be6c:	b2c0      	uxtb	r0, r0
1000be6e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000be70:	3401      	adds	r4, #1
1000be72:	b2e4      	uxtb	r4, r4
1000be74:	4544      	cmp	r4, r8
1000be76:	d3f7      	bcc.n	1000be68 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000be78:	682b      	ldr	r3, [r5, #0]
1000be7a:	7d1a      	ldrb	r2, [r3, #20]
1000be7c:	07d2      	lsls	r2, r2, #31
1000be7e:	d504      	bpl.n	1000be8a <uart_init+0xce>
1000be80:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000be82:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000be84:	7d1a      	ldrb	r2, [r3, #20]
1000be86:	420a      	tst	r2, r1
1000be88:	d1fb      	bne.n	1000be82 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000be8a:	2100      	movs	r1, #0
1000be8c:	2220      	movs	r2, #32
1000be8e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000be90:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000be92:	1e59      	subs	r1, r3, #1
1000be94:	418b      	sbcs	r3, r1
1000be96:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000be98:	793b      	ldrb	r3, [r7, #4]
1000be9a:	797a      	ldrb	r2, [r7, #5]
1000be9c:	4313      	orrs	r3, r2
1000be9e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bea0:	79ba      	ldrb	r2, [r7, #6]
1000bea2:	2a02      	cmp	r2, #2
1000bea4:	d00d      	beq.n	1000bec2 <uart_init+0x106>
1000bea6:	b2d1      	uxtb	r1, r2
1000bea8:	2902      	cmp	r1, #2
1000beaa:	d802      	bhi.n	1000beb2 <uart_init+0xf6>
1000beac:	2a01      	cmp	r2, #1
1000beae:	d005      	beq.n	1000bebc <uart_init+0x100>
1000beb0:	e00f      	b.n	1000bed2 <uart_init+0x116>
1000beb2:	2a03      	cmp	r2, #3
1000beb4:	d008      	beq.n	1000bec8 <uart_init+0x10c>
1000beb6:	2a04      	cmp	r2, #4
1000beb8:	d009      	beq.n	1000bece <uart_init+0x112>
1000beba:	e00a      	b.n	1000bed2 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bebc:	2202      	movs	r2, #2
1000bebe:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000bec0:	e007      	b.n	1000bed2 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000bec2:	2206      	movs	r2, #6
1000bec4:	4313      	orrs	r3, r2
			break;
1000bec6:	e004      	b.n	1000bed2 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bec8:	220a      	movs	r2, #10
1000beca:	4313      	orrs	r3, r2
			break;
1000becc:	e001      	b.n	1000bed2 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bece:	220e      	movs	r2, #14
1000bed0:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000bed2:	2220      	movs	r2, #32
1000bed4:	6829      	ldr	r1, [r5, #0]
1000bed6:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000bed8:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000beda:	4b24      	ldr	r3, [pc, #144]	; (1000bf6c <uart_init+0x1b0>)
1000bedc:	4798      	blx	r3
1000bede:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000bee0:	0031      	movs	r1, r6
1000bee2:	4b23      	ldr	r3, [pc, #140]	; (1000bf70 <uart_init+0x1b4>)
1000bee4:	4798      	blx	r3
1000bee6:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000bee8:	0400      	lsls	r0, r0, #16
1000beea:	0c00      	lsrs	r0, r0, #16
1000beec:	4370      	muls	r0, r6
1000beee:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bef0:	0931      	lsrs	r1, r6, #4
1000bef2:	4288      	cmp	r0, r1
1000bef4:	d906      	bls.n	1000bf04 <uart_init+0x148>
1000bef6:	2300      	movs	r3, #0
		i++;
1000bef8:	3301      	adds	r3, #1
1000befa:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000befc:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000befe:	4288      	cmp	r0, r1
1000bf00:	d8fa      	bhi.n	1000bef8 <uart_init+0x13c>
1000bf02:	e007      	b.n	1000bf14 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000bf04:	2300      	movs	r3, #0
1000bf06:	e005      	b.n	1000bf14 <uart_init+0x158>
1000bf08:	003e      	movs	r6, r7
1000bf0a:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bf0c:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bf0e:	4b19      	ldr	r3, [pc, #100]	; (1000bf74 <uart_init+0x1b8>)
1000bf10:	4699      	mov	r9, r3
1000bf12:	e7a9      	b.n	1000be68 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000bf14:	2100      	movs	r1, #0
1000bf16:	2028      	movs	r0, #40	; 0x28
1000bf18:	682c      	ldr	r4, [r5, #0]
1000bf1a:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000bf1c:	3301      	adds	r3, #1
1000bf1e:	071b      	lsls	r3, r3, #28
1000bf20:	0f5b      	lsrs	r3, r3, #29
1000bf22:	00d2      	lsls	r2, r2, #3
1000bf24:	4313      	orrs	r3, r2
1000bf26:	b29b      	uxth	r3, r3
1000bf28:	682a      	ldr	r2, [r5, #0]
1000bf2a:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bf2c:	682b      	ldr	r3, [r5, #0]
1000bf2e:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bf30:	682b      	ldr	r3, [r5, #0]
1000bf32:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000bf34:	2000      	movs	r0, #0
1000bf36:	bc0c      	pop	{r2, r3}
1000bf38:	4690      	mov	r8, r2
1000bf3a:	4699      	mov	r9, r3
1000bf3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bf3e:	46c0      	nop			; (mov r8, r8)
1000bf40:	40004000 	.word	0x40004000
1000bf44:	1000b6f1 	.word	0x1000b6f1
1000bf48:	1000b029 	.word	0x1000b029
1000bf4c:	1001a24c 	.word	0x1001a24c
1000bf50:	1000bb69 	.word	0x1000bb69
1000bf54:	1000bb59 	.word	0x1000bb59
1000bf58:	1000bbf1 	.word	0x1000bbf1
1000bf5c:	e000e100 	.word	0xe000e100
1000bf60:	40005000 	.word	0x40005000
1000bf64:	1000bc7d 	.word	0x1000bc7d
1000bf68:	1000bd05 	.word	0x1000bd05
1000bf6c:	1000b01d 	.word	0x1000b01d
1000bf70:	10012a01 	.word	0x10012a01
1000bf74:	1000ac79 	.word	0x1000ac79

1000bf78 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000bf78:	6802      	ldr	r2, [r0, #0]
1000bf7a:	2001      	movs	r0, #1
1000bf7c:	7913      	ldrb	r3, [r2, #4]
1000bf7e:	4203      	tst	r3, r0
1000bf80:	d0fc      	beq.n	1000bf7c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000bf82:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000bf84:	2000      	movs	r0, #0
1000bf86:	4770      	bx	lr

1000bf88 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000bf88:	6802      	ldr	r2, [r0, #0]
1000bf8a:	2001      	movs	r0, #1
1000bf8c:	7d13      	ldrb	r3, [r2, #20]
1000bf8e:	4203      	tst	r3, r0
1000bf90:	d0fc      	beq.n	1000bf8c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000bf92:	7c13      	ldrb	r3, [r2, #16]
1000bf94:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000bf96:	2000      	movs	r0, #0
1000bf98:	4770      	bx	lr
1000bf9a:	46c0      	nop			; (mov r8, r8)

1000bf9c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000bf9c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000bf9e:	2a00      	cmp	r2, #0
1000bfa0:	d00d      	beq.n	1000bfbe <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000bfa2:	330b      	adds	r3, #11
1000bfa4:	5cc3      	ldrb	r3, [r0, r3]
1000bfa6:	b2db      	uxtb	r3, r3
1000bfa8:	2b05      	cmp	r3, #5
1000bfaa:	d008      	beq.n	1000bfbe <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000bfac:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000bfae:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000bfb0:	2205      	movs	r2, #5
1000bfb2:	2322      	movs	r3, #34	; 0x22
1000bfb4:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000bfb6:	6803      	ldr	r3, [r0, #0]
1000bfb8:	3a04      	subs	r2, #4
1000bfba:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000bfbc:	2300      	movs	r3, #0
}
1000bfbe:	0018      	movs	r0, r3
1000bfc0:	4770      	bx	lr
1000bfc2:	46c0      	nop			; (mov r8, r8)

1000bfc4 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000bfc4:	0093      	lsls	r3, r2, #2
1000bfc6:	18c3      	adds	r3, r0, r3
1000bfc8:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000bfca:	2120      	movs	r1, #32
1000bfcc:	2301      	movs	r3, #1
1000bfce:	4093      	lsls	r3, r2
1000bfd0:	5c42      	ldrb	r2, [r0, r1]
1000bfd2:	4313      	orrs	r3, r2
1000bfd4:	5443      	strb	r3, [r0, r1]
}
1000bfd6:	4770      	bx	lr

1000bfd8 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bfd8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000bfda:	2221      	movs	r2, #33	; 0x21
1000bfdc:	2301      	movs	r3, #1
1000bfde:	408b      	lsls	r3, r1
1000bfe0:	5c84      	ldrb	r4, [r0, r2]
1000bfe2:	4323      	orrs	r3, r4
1000bfe4:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000bfe6:	2901      	cmp	r1, #1
1000bfe8:	d104      	bne.n	1000bff4 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000bfea:	6802      	ldr	r2, [r0, #0]
1000bfec:	7a11      	ldrb	r1, [r2, #8]
1000bfee:	2320      	movs	r3, #32
1000bff0:	430b      	orrs	r3, r1
1000bff2:	7213      	strb	r3, [r2, #8]
	}
}
1000bff4:	bd10      	pop	{r4, pc}
1000bff6:	46c0      	nop			; (mov r8, r8)

1000bff8 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000bff8:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000bffa:	2201      	movs	r2, #1
1000bffc:	408a      	lsls	r2, r1
1000bffe:	2421      	movs	r4, #33	; 0x21
1000c000:	5d03      	ldrb	r3, [r0, r4]
1000c002:	4393      	bics	r3, r2
1000c004:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c006:	2901      	cmp	r1, #1
1000c008:	d104      	bne.n	1000c014 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c00a:	6802      	ldr	r2, [r0, #0]
1000c00c:	7a13      	ldrb	r3, [r2, #8]
1000c00e:	311f      	adds	r1, #31
1000c010:	438b      	bics	r3, r1
1000c012:	7213      	strb	r3, [r2, #8]
	}

}
1000c014:	bd10      	pop	{r4, pc}
1000c016:	46c0      	nop			; (mov r8, r8)

1000c018 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c018:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c01a:	4647      	mov	r7, r8
1000c01c:	b480      	push	{r7}
1000c01e:	000c      	movs	r4, r1
1000c020:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c022:	2800      	cmp	r0, #0
1000c024:	d10d      	bne.n	1000c042 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c026:	2a00      	cmp	r2, #0
1000c028:	dd0e      	ble.n	1000c048 <_read+0x30>
1000c02a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c02c:	4e08      	ldr	r6, [pc, #32]	; (1000c050 <_read+0x38>)
1000c02e:	4d09      	ldr	r5, [pc, #36]	; (1000c054 <_read+0x3c>)
1000c030:	6830      	ldr	r0, [r6, #0]
1000c032:	0021      	movs	r1, r4
1000c034:	682b      	ldr	r3, [r5, #0]
1000c036:	4798      	blx	r3
		ptr++;
1000c038:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c03a:	42a7      	cmp	r7, r4
1000c03c:	d1f8      	bne.n	1000c030 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c03e:	4640      	mov	r0, r8
1000c040:	e003      	b.n	1000c04a <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c042:	2001      	movs	r0, #1
1000c044:	4240      	negs	r0, r0
1000c046:	e000      	b.n	1000c04a <_read+0x32>
	}

	for (; len > 0; --len) {
1000c048:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c04a:	bc04      	pop	{r2}
1000c04c:	4690      	mov	r8, r2
1000c04e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c050:	1001a25c 	.word	0x1001a25c
1000c054:	1001a254 	.word	0x1001a254

1000c058 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c058:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c05a:	4647      	mov	r7, r8
1000c05c:	b480      	push	{r7}
1000c05e:	000e      	movs	r6, r1
1000c060:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c062:	3801      	subs	r0, #1
1000c064:	2802      	cmp	r0, #2
1000c066:	d811      	bhi.n	1000c08c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c068:	2a00      	cmp	r2, #0
1000c06a:	d012      	beq.n	1000c092 <_write+0x3a>
1000c06c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c06e:	4b0c      	ldr	r3, [pc, #48]	; (1000c0a0 <_write+0x48>)
1000c070:	4698      	mov	r8, r3
1000c072:	4f0c      	ldr	r7, [pc, #48]	; (1000c0a4 <_write+0x4c>)
1000c074:	4643      	mov	r3, r8
1000c076:	6818      	ldr	r0, [r3, #0]
1000c078:	5d31      	ldrb	r1, [r6, r4]
1000c07a:	683b      	ldr	r3, [r7, #0]
1000c07c:	4798      	blx	r3
1000c07e:	2800      	cmp	r0, #0
1000c080:	db09      	blt.n	1000c096 <_write+0x3e>
			return -1;
		}
		++nChars;
1000c082:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c084:	42a5      	cmp	r5, r4
1000c086:	d1f5      	bne.n	1000c074 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c088:	0020      	movs	r0, r4
1000c08a:	e006      	b.n	1000c09a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c08c:	2001      	movs	r0, #1
1000c08e:	4240      	negs	r0, r0
1000c090:	e003      	b.n	1000c09a <_write+0x42>
	}

	for (; len != 0; --len) {
1000c092:	2000      	movs	r0, #0
1000c094:	e001      	b.n	1000c09a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c096:	2001      	movs	r0, #1
1000c098:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c09a:	bc04      	pop	{r2}
1000c09c:	4690      	mov	r8, r2
1000c09e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0a0:	1001a25c 	.word	0x1001a25c
1000c0a4:	1001a258 	.word	0x1001a258

1000c0a8 <ble_undefined_event_handler>:
	}
	return status;
}

at_ble_status_t ble_undefined_event_handler(void *params)
{
1000c0a8:	b510      	push	{r4, lr}
	DBG_LOG_DEV("Undefined Event Received");
1000c0aa:	4804      	ldr	r0, [pc, #16]	; (1000c0bc <ble_undefined_event_handler+0x14>)
1000c0ac:	4b04      	ldr	r3, [pc, #16]	; (1000c0c0 <ble_undefined_event_handler+0x18>)
1000c0ae:	4798      	blx	r3
1000c0b0:	4804      	ldr	r0, [pc, #16]	; (1000c0c4 <ble_undefined_event_handler+0x1c>)
1000c0b2:	4b05      	ldr	r3, [pc, #20]	; (1000c0c8 <ble_undefined_event_handler+0x20>)
1000c0b4:	4798      	blx	r3
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c0b6:	2000      	movs	r0, #0
1000c0b8:	bd10      	pop	{r4, pc}
1000c0ba:	46c0      	nop			; (mov r8, r8)
1000c0bc:	100168d4 	.word	0x100168d4
1000c0c0:	10015995 	.word	0x10015995
1000c0c4:	100176b8 	.word	0x100176b8
1000c0c8:	10015875 	.word	0x10015875

1000c0cc <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c0cc:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c0ce:	7800      	ldrb	r0, [r0, #0]
1000c0d0:	2800      	cmp	r0, #0
1000c0d2:	d006      	beq.n	1000c0e2 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c0d4:	4803      	ldr	r0, [pc, #12]	; (1000c0e4 <ble_scan_report_handler+0x18>)
1000c0d6:	4b04      	ldr	r3, [pc, #16]	; (1000c0e8 <ble_scan_report_handler+0x1c>)
1000c0d8:	4798      	blx	r3
1000c0da:	4804      	ldr	r0, [pc, #16]	; (1000c0ec <ble_scan_report_handler+0x20>)
1000c0dc:	4b04      	ldr	r3, [pc, #16]	; (1000c0f0 <ble_scan_report_handler+0x24>)
1000c0de:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c0e0:	20e2      	movs	r0, #226	; 0xe2
}
1000c0e2:	bd10      	pop	{r4, pc}
1000c0e4:	100168d4 	.word	0x100168d4
1000c0e8:	10015995 	.word	0x10015995
1000c0ec:	100176d4 	.word	0x100176d4
1000c0f0:	10015875 	.word	0x10015875

1000c0f4 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c0f4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c0f6:	7800      	ldrb	r0, [r0, #0]
1000c0f8:	2800      	cmp	r0, #0
1000c0fa:	d006      	beq.n	1000c10a <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c0fc:	4803      	ldr	r0, [pc, #12]	; (1000c10c <ble_adv_report_handler+0x18>)
1000c0fe:	4b04      	ldr	r3, [pc, #16]	; (1000c110 <ble_adv_report_handler+0x1c>)
1000c100:	4798      	blx	r3
1000c102:	4804      	ldr	r0, [pc, #16]	; (1000c114 <ble_adv_report_handler+0x20>)
1000c104:	4b04      	ldr	r3, [pc, #16]	; (1000c118 <ble_adv_report_handler+0x24>)
1000c106:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c108:	20e2      	movs	r0, #226	; 0xe2
}
1000c10a:	bd10      	pop	{r4, pc}
1000c10c:	100168d4 	.word	0x100168d4
1000c110:	10015995 	.word	0x10015995
1000c114:	100176e8 	.word	0x100176e8
1000c118:	10015875 	.word	0x10015875

1000c11c <ble_mtu_changed_indication_handler>:
	return AT_BLE_SUCCESS;
	
}

at_ble_status_t ble_mtu_changed_indication_handler(void *params)
{
1000c11c:	b510      	push	{r4, lr}
1000c11e:	0004      	movs	r4, r0
	at_ble_mtu_changed_ind_t *mtu_changed_ind;
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
1000c120:	4804      	ldr	r0, [pc, #16]	; (1000c134 <ble_mtu_changed_indication_handler+0x18>)
1000c122:	4b05      	ldr	r3, [pc, #20]	; (1000c138 <ble_mtu_changed_indication_handler+0x1c>)
1000c124:	4798      	blx	r3
1000c126:	8862      	ldrh	r2, [r4, #2]
1000c128:	8821      	ldrh	r1, [r4, #0]
1000c12a:	4804      	ldr	r0, [pc, #16]	; (1000c13c <ble_mtu_changed_indication_handler+0x20>)
1000c12c:	4b04      	ldr	r3, [pc, #16]	; (1000c140 <ble_mtu_changed_indication_handler+0x24>)
1000c12e:	4798      	blx	r3
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c130:	2000      	movs	r0, #0
1000c132:	bd10      	pop	{r4, pc}
1000c134:	100168d4 	.word	0x100168d4
1000c138:	10015995 	.word	0x10015995
1000c13c:	100176fc 	.word	0x100176fc
1000c140:	10015875 	.word	0x10015875

1000c144 <ble_mtu_changed_cmd_complete_handler>:

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c144:	b570      	push	{r4, r5, r6, lr}
1000c146:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c148:	78c5      	ldrb	r5, [r0, #3]
1000c14a:	2d00      	cmp	r5, #0
1000c14c:	d108      	bne.n	1000c160 <ble_mtu_changed_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("MTU Changed, Connection Handle:%d, Operation:%d", 
1000c14e:	480a      	ldr	r0, [pc, #40]	; (1000c178 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c150:	4b0a      	ldr	r3, [pc, #40]	; (1000c17c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c152:	4798      	blx	r3
1000c154:	78a2      	ldrb	r2, [r4, #2]
1000c156:	8821      	ldrh	r1, [r4, #0]
1000c158:	4809      	ldr	r0, [pc, #36]	; (1000c180 <ble_mtu_changed_cmd_complete_handler+0x3c>)
1000c15a:	4b0a      	ldr	r3, [pc, #40]	; (1000c184 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c15c:	4798      	blx	r3
		cmd_complete_event->conn_handle, 
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c15e:	e008      	b.n	1000c172 <ble_mtu_changed_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c160:	4805      	ldr	r0, [pc, #20]	; (1000c178 <ble_mtu_changed_cmd_complete_handler+0x34>)
1000c162:	4b06      	ldr	r3, [pc, #24]	; (1000c17c <ble_mtu_changed_cmd_complete_handler+0x38>)
1000c164:	4798      	blx	r3
1000c166:	78a2      	ldrb	r2, [r4, #2]
1000c168:	8821      	ldrh	r1, [r4, #0]
1000c16a:	4807      	ldr	r0, [pc, #28]	; (1000c188 <ble_mtu_changed_cmd_complete_handler+0x44>)
1000c16c:	4b05      	ldr	r3, [pc, #20]	; (1000c184 <ble_mtu_changed_cmd_complete_handler+0x40>)
1000c16e:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c170:	25e2      	movs	r5, #226	; 0xe2
}
1000c172:	0028      	movs	r0, r5
1000c174:	bd70      	pop	{r4, r5, r6, pc}
1000c176:	46c0      	nop			; (mov r8, r8)
1000c178:	100168d4 	.word	0x100168d4
1000c17c:	10015995 	.word	0x10015995
1000c180:	10017734 	.word	0x10017734
1000c184:	10015875 	.word	0x10015875
1000c188:	10017764 	.word	0x10017764

1000c18c <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
1000c18c:	b570      	push	{r4, r5, r6, lr}
1000c18e:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c190:	78c5      	ldrb	r5, [r0, #3]
1000c192:	2d00      	cmp	r5, #0
1000c194:	d108      	bne.n	1000c1a8 <ble_characteristic_write_cmd_complete_handler+0x1c>
	{
		DBG_LOG_DEV("Char Write Cmd Complete, Connection Handle:%d, Operation:%d",
1000c196:	480a      	ldr	r0, [pc, #40]	; (1000c1c0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c198:	4b0a      	ldr	r3, [pc, #40]	; (1000c1c4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c19a:	4798      	blx	r3
1000c19c:	78a2      	ldrb	r2, [r4, #2]
1000c19e:	8821      	ldrh	r1, [r4, #0]
1000c1a0:	4809      	ldr	r0, [pc, #36]	; (1000c1c8 <ble_characteristic_write_cmd_complete_handler+0x3c>)
1000c1a2:	4b0a      	ldr	r3, [pc, #40]	; (1000c1cc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c1a4:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
1000c1a6:	e008      	b.n	1000c1ba <ble_characteristic_write_cmd_complete_handler+0x2e>
	}
	else
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
1000c1a8:	4805      	ldr	r0, [pc, #20]	; (1000c1c0 <ble_characteristic_write_cmd_complete_handler+0x34>)
1000c1aa:	4b06      	ldr	r3, [pc, #24]	; (1000c1c4 <ble_characteristic_write_cmd_complete_handler+0x38>)
1000c1ac:	4798      	blx	r3
1000c1ae:	78a2      	ldrb	r2, [r4, #2]
1000c1b0:	8821      	ldrh	r1, [r4, #0]
1000c1b2:	4807      	ldr	r0, [pc, #28]	; (1000c1d0 <ble_characteristic_write_cmd_complete_handler+0x44>)
1000c1b4:	4b05      	ldr	r3, [pc, #20]	; (1000c1cc <ble_characteristic_write_cmd_complete_handler+0x40>)
1000c1b6:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c1b8:	25e2      	movs	r5, #226	; 0xe2
}
1000c1ba:	0028      	movs	r0, r5
1000c1bc:	bd70      	pop	{r4, r5, r6, pc}
1000c1be:	46c0      	nop			; (mov r8, r8)
1000c1c0:	100168d4 	.word	0x100168d4
1000c1c4:	10015995 	.word	0x10015995
1000c1c8:	1001779c 	.word	0x1001779c
1000c1cc:	10015875 	.word	0x10015875
1000c1d0:	100177d8 	.word	0x100177d8

1000c1d4 <ble_disconnected_state_handler>:

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c1d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c1d6:	0006      	movs	r6, r0
1000c1d8:	4c1d      	ldr	r4, [pc, #116]	; (1000c250 <ble_disconnected_state_handler+0x7c>)
1000c1da:	239b      	movs	r3, #155	; 0x9b
1000c1dc:	009b      	lsls	r3, r3, #2
1000c1de:	18e7      	adds	r7, r4, r3
1000c1e0:	0025      	movs	r5, r4
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c1e2:	0023      	movs	r3, r4
1000c1e4:	3b56      	subs	r3, #86	; 0x56
1000c1e6:	881a      	ldrh	r2, [r3, #0]
1000c1e8:	8833      	ldrh	r3, [r6, #0]
1000c1ea:	429a      	cmp	r2, r3
1000c1ec:	d122      	bne.n	1000c234 <ble_disconnected_state_handler+0x60>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c1ee:	7823      	ldrb	r3, [r4, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c1f0:	2b05      	cmp	r3, #5
1000c1f2:	d001      	beq.n	1000c1f8 <ble_disconnected_state_handler+0x24>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c1f4:	2b08      	cmp	r3, #8
1000c1f6:	d102      	bne.n	1000c1fe <ble_disconnected_state_handler+0x2a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c1f8:	2301      	movs	r3, #1
1000c1fa:	702b      	strb	r3, [r5, #0]
1000c1fc:	e01a      	b.n	1000c234 <ble_disconnected_state_handler+0x60>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c1fe:	2b07      	cmp	r3, #7
1000c200:	d80f      	bhi.n	1000c222 <ble_disconnected_state_handler+0x4e>
1000c202:	009b      	lsls	r3, r3, #2
1000c204:	4a13      	ldr	r2, [pc, #76]	; (1000c254 <ble_disconnected_state_handler+0x80>)
1000c206:	58d3      	ldr	r3, [r2, r3]
1000c208:	469f      	mov	pc, r3
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c20a:	2300      	movs	r3, #0
1000c20c:	7023      	strb	r3, [r4, #0]
					if (ble_device_count > 0)
1000c20e:	4b12      	ldr	r3, [pc, #72]	; (1000c258 <ble_disconnected_state_handler+0x84>)
1000c210:	781b      	ldrb	r3, [r3, #0]
1000c212:	2b00      	cmp	r3, #0
1000c214:	d00e      	beq.n	1000c234 <ble_disconnected_state_handler+0x60>
					{
						ble_device_count--;
1000c216:	4a10      	ldr	r2, [pc, #64]	; (1000c258 <ble_disconnected_state_handler+0x84>)
1000c218:	7813      	ldrb	r3, [r2, #0]
1000c21a:	3b01      	subs	r3, #1
1000c21c:	b2db      	uxtb	r3, r3
1000c21e:	7013      	strb	r3, [r2, #0]
1000c220:	e008      	b.n	1000c234 <ble_disconnected_state_handler+0x60>
				
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
1000c222:	480e      	ldr	r0, [pc, #56]	; (1000c25c <ble_disconnected_state_handler+0x88>)
1000c224:	4b0e      	ldr	r3, [pc, #56]	; (1000c260 <ble_disconnected_state_handler+0x8c>)
1000c226:	4798      	blx	r3
1000c228:	7829      	ldrb	r1, [r5, #0]
1000c22a:	480e      	ldr	r0, [pc, #56]	; (1000c264 <ble_disconnected_state_handler+0x90>)
1000c22c:	4b0e      	ldr	r3, [pc, #56]	; (1000c268 <ble_disconnected_state_handler+0x94>)
1000c22e:	4798      	blx	r3
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c230:	2300      	movs	r3, #0
1000c232:	702b      	strb	r3, [r5, #0]
1000c234:	347c      	adds	r4, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c236:	42bc      	cmp	r4, r7
1000c238:	d1d2      	bne.n	1000c1e0 <ble_disconnected_state_handler+0xc>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c23a:	4808      	ldr	r0, [pc, #32]	; (1000c25c <ble_disconnected_state_handler+0x88>)
1000c23c:	4b08      	ldr	r3, [pc, #32]	; (1000c260 <ble_disconnected_state_handler+0x8c>)
1000c23e:	4798      	blx	r3
1000c240:	8832      	ldrh	r2, [r6, #0]
1000c242:	78b1      	ldrb	r1, [r6, #2]
1000c244:	4809      	ldr	r0, [pc, #36]	; (1000c26c <ble_disconnected_state_handler+0x98>)
1000c246:	4b08      	ldr	r3, [pc, #32]	; (1000c268 <ble_disconnected_state_handler+0x94>)
1000c248:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c24a:	2000      	movs	r0, #0
1000c24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c24e:	46c0      	nop			; (mov r8, r8)
1000c250:	1001a2d6 	.word	0x1001a2d6
1000c254:	10017554 	.word	0x10017554
1000c258:	1001a4e4 	.word	0x1001a4e4
1000c25c:	100168d4 	.word	0x100168d4
1000c260:	10015995 	.word	0x10015995
1000c264:	10017814 	.word	0x10017814
1000c268:	10015875 	.word	0x10015875
1000c26c:	1001782c 	.word	0x1001782c

1000c270 <ble_conn_param_update>:

/** @brief connection update parameter function */
at_ble_status_t ble_conn_param_update(void *params)
{
1000c270:	b510      	push	{r4, lr}
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
1000c272:	4804      	ldr	r0, [pc, #16]	; (1000c284 <ble_conn_param_update+0x14>)
1000c274:	4b04      	ldr	r3, [pc, #16]	; (1000c288 <ble_conn_param_update+0x18>)
1000c276:	4798      	blx	r3
1000c278:	4804      	ldr	r0, [pc, #16]	; (1000c28c <ble_conn_param_update+0x1c>)
1000c27a:	4b05      	ldr	r3, [pc, #20]	; (1000c290 <ble_conn_param_update+0x20>)
1000c27c:	4798      	blx	r3
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c27e:	2000      	movs	r0, #0
1000c280:	bd10      	pop	{r4, pc}
1000c282:	46c0      	nop			; (mov r8, r8)
1000c284:	100168d4 	.word	0x100168d4
1000c288:	10015995 	.word	0x10015995
1000c28c:	1001785c 	.word	0x1001785c
1000c290:	10015875 	.word	0x10015875

1000c294 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c294:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c296:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c298:	8801      	ldrh	r1, [r0, #0]
1000c29a:	4b28      	ldr	r3, [pc, #160]	; (1000c33c <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c29c:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c29e:	891a      	ldrh	r2, [r3, #8]
1000c2a0:	428a      	cmp	r2, r1
1000c2a2:	d104      	bne.n	1000c2ae <ble_encryption_status_change_handler+0x1a>
1000c2a4:	001a      	movs	r2, r3
1000c2a6:	325e      	adds	r2, #94	; 0x5e
1000c2a8:	7812      	ldrb	r2, [r2, #0]
1000c2aa:	2a06      	cmp	r2, #6
1000c2ac:	d02e      	beq.n	1000c30c <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c2ae:	3401      	adds	r4, #1
1000c2b0:	b2e4      	uxtb	r4, r4
1000c2b2:	337c      	adds	r3, #124	; 0x7c
1000c2b4:	2c05      	cmp	r4, #5
1000c2b6:	d1f2      	bne.n	1000c29e <ble_encryption_status_change_handler+0xa>
1000c2b8:	e039      	b.n	1000c32e <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c2ba:	4920      	ldr	r1, [pc, #128]	; (1000c33c <ble_encryption_status_change_handler+0xa8>)
1000c2bc:	0163      	lsls	r3, r4, #5
1000c2be:	1b1a      	subs	r2, r3, r4
1000c2c0:	0092      	lsls	r2, r2, #2
1000c2c2:	188a      	adds	r2, r1, r2
1000c2c4:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c2c6:	0014      	movs	r4, r2
1000c2c8:	345e      	adds	r4, #94	; 0x5e
1000c2ca:	2307      	movs	r3, #7
1000c2cc:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c2ce:	481c      	ldr	r0, [pc, #112]	; (1000c340 <ble_encryption_status_change_handler+0xac>)
1000c2d0:	4b1c      	ldr	r3, [pc, #112]	; (1000c344 <ble_encryption_status_change_handler+0xb0>)
1000c2d2:	4798      	blx	r3
1000c2d4:	481c      	ldr	r0, [pc, #112]	; (1000c348 <ble_encryption_status_change_handler+0xb4>)
1000c2d6:	4b1d      	ldr	r3, [pc, #116]	; (1000c34c <ble_encryption_status_change_handler+0xb8>)
1000c2d8:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c2da:	25e2      	movs	r5, #226	; 0xe2
1000c2dc:	e02b      	b.n	1000c336 <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c2de:	4818      	ldr	r0, [pc, #96]	; (1000c340 <ble_encryption_status_change_handler+0xac>)
1000c2e0:	4b18      	ldr	r3, [pc, #96]	; (1000c344 <ble_encryption_status_change_handler+0xb0>)
1000c2e2:	4798      	blx	r3
1000c2e4:	481a      	ldr	r0, [pc, #104]	; (1000c350 <ble_encryption_status_change_handler+0xbc>)
1000c2e6:	4b19      	ldr	r3, [pc, #100]	; (1000c34c <ble_encryption_status_change_handler+0xb8>)
1000c2e8:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c2ea:	4914      	ldr	r1, [pc, #80]	; (1000c33c <ble_encryption_status_change_handler+0xa8>)
1000c2ec:	0163      	lsls	r3, r4, #5
1000c2ee:	1b1a      	subs	r2, r3, r4
1000c2f0:	0092      	lsls	r2, r2, #2
1000c2f2:	188a      	adds	r2, r1, r2
1000c2f4:	0010      	movs	r0, r2
1000c2f6:	305e      	adds	r0, #94	; 0x5e
1000c2f8:	2708      	movs	r7, #8
1000c2fa:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c2fc:	78f0      	ldrb	r0, [r6, #3]
1000c2fe:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c300:	78b2      	ldrb	r2, [r6, #2]
1000c302:	1b1c      	subs	r4, r3, r4
1000c304:	00a4      	lsls	r4, r4, #2
1000c306:	190c      	adds	r4, r1, r4
1000c308:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c30a:	e014      	b.n	1000c336 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c30c:	78b5      	ldrb	r5, [r6, #2]
1000c30e:	2d00      	cmp	r5, #0
1000c310:	d0e5      	beq.n	1000c2de <ble_encryption_status_change_handler+0x4a>
1000c312:	e7d2      	b.n	1000c2ba <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c314:	4e0a      	ldr	r6, [pc, #40]	; (1000c340 <ble_encryption_status_change_handler+0xac>)
1000c316:	0030      	movs	r0, r6
1000c318:	4d0a      	ldr	r5, [pc, #40]	; (1000c344 <ble_encryption_status_change_handler+0xb0>)
1000c31a:	47a8      	blx	r5
1000c31c:	480c      	ldr	r0, [pc, #48]	; (1000c350 <ble_encryption_status_change_handler+0xbc>)
1000c31e:	4c0b      	ldr	r4, [pc, #44]	; (1000c34c <ble_encryption_status_change_handler+0xb8>)
1000c320:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c322:	0030      	movs	r0, r6
1000c324:	47a8      	blx	r5
1000c326:	480b      	ldr	r0, [pc, #44]	; (1000c354 <ble_encryption_status_change_handler+0xc0>)
1000c328:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c32a:	25e2      	movs	r5, #226	; 0xe2
1000c32c:	e003      	b.n	1000c336 <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c32e:	78b5      	ldrb	r5, [r6, #2]
1000c330:	2d00      	cmp	r5, #0
1000c332:	d1c2      	bne.n	1000c2ba <ble_encryption_status_change_handler+0x26>
1000c334:	e7ee      	b.n	1000c314 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c336:	0028      	movs	r0, r5
1000c338:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c33a:	46c0      	nop			; (mov r8, r8)
1000c33c:	1001a278 	.word	0x1001a278
1000c340:	100168d4 	.word	0x100168d4
1000c344:	10015995 	.word	0x10015995
1000c348:	10017878 	.word	0x10017878
1000c34c:	10015875 	.word	0x10015875
1000c350:	1001788c 	.word	0x1001788c
1000c354:	100178b0 	.word	0x100178b0

1000c358 <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c358:	b530      	push	{r4, r5, lr}
1000c35a:	b085      	sub	sp, #20
1000c35c:	0004      	movs	r4, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c35e:	4b1f      	ldr	r3, [pc, #124]	; (1000c3dc <ble_scan_info_handler+0x84>)
1000c360:	781b      	ldrb	r3, [r3, #0]
1000c362:	b2db      	uxtb	r3, r3
1000c364:	2b13      	cmp	r3, #19
1000c366:	d824      	bhi.n	1000c3b2 <ble_scan_info_handler+0x5a>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c368:	4d1c      	ldr	r5, [pc, #112]	; (1000c3dc <ble_scan_info_handler+0x84>)
1000c36a:	782b      	ldrb	r3, [r5, #0]
1000c36c:	b2db      	uxtb	r3, r3
1000c36e:	0098      	lsls	r0, r3, #2
1000c370:	18c0      	adds	r0, r0, r3
1000c372:	00c0      	lsls	r0, r0, #3
1000c374:	18c3      	adds	r3, r0, r3
1000c376:	481a      	ldr	r0, [pc, #104]	; (1000c3e0 <ble_scan_info_handler+0x88>)
1000c378:	1818      	adds	r0, r3, r0
1000c37a:	2229      	movs	r2, #41	; 0x29
1000c37c:	0021      	movs	r1, r4
1000c37e:	4b19      	ldr	r3, [pc, #100]	; (1000c3e4 <ble_scan_info_handler+0x8c>)
1000c380:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c382:	4819      	ldr	r0, [pc, #100]	; (1000c3e8 <ble_scan_info_handler+0x90>)
1000c384:	4b19      	ldr	r3, [pc, #100]	; (1000c3ec <ble_scan_info_handler+0x94>)
1000c386:	4798      	blx	r3
1000c388:	7829      	ldrb	r1, [r5, #0]
1000c38a:	b2c9      	uxtb	r1, r1
1000c38c:	79a3      	ldrb	r3, [r4, #6]
1000c38e:	79e2      	ldrb	r2, [r4, #7]
1000c390:	78a0      	ldrb	r0, [r4, #2]
1000c392:	9003      	str	r0, [sp, #12]
1000c394:	78e0      	ldrb	r0, [r4, #3]
1000c396:	9002      	str	r0, [sp, #8]
1000c398:	7920      	ldrb	r0, [r4, #4]
1000c39a:	9001      	str	r0, [sp, #4]
1000c39c:	7960      	ldrb	r0, [r4, #5]
1000c39e:	9000      	str	r0, [sp, #0]
1000c3a0:	4813      	ldr	r0, [pc, #76]	; (1000c3f0 <ble_scan_info_handler+0x98>)
1000c3a2:	4c14      	ldr	r4, [pc, #80]	; (1000c3f4 <ble_scan_info_handler+0x9c>)
1000c3a4:	47a0      	blx	r4
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c3a6:	782b      	ldrb	r3, [r5, #0]
1000c3a8:	3301      	adds	r3, #1
1000c3aa:	b2db      	uxtb	r3, r3
1000c3ac:	702b      	strb	r3, [r5, #0]
		return AT_BLE_SUCCESS;
1000c3ae:	2300      	movs	r3, #0
1000c3b0:	e011      	b.n	1000c3d6 <ble_scan_info_handler+0x7e>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c3b2:	480d      	ldr	r0, [pc, #52]	; (1000c3e8 <ble_scan_info_handler+0x90>)
1000c3b4:	4b0d      	ldr	r3, [pc, #52]	; (1000c3ec <ble_scan_info_handler+0x94>)
1000c3b6:	4798      	blx	r3
1000c3b8:	480f      	ldr	r0, [pc, #60]	; (1000c3f8 <ble_scan_info_handler+0xa0>)
1000c3ba:	4b0e      	ldr	r3, [pc, #56]	; (1000c3f4 <ble_scan_info_handler+0x9c>)
1000c3bc:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c3be:	4b0f      	ldr	r3, [pc, #60]	; (1000c3fc <ble_scan_info_handler+0xa4>)
1000c3c0:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c3c2:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c3c4:	2800      	cmp	r0, #0
1000c3c6:	d006      	beq.n	1000c3d6 <ble_scan_info_handler+0x7e>
		{
			DBG_LOG("Failed to stop scanning");
1000c3c8:	4807      	ldr	r0, [pc, #28]	; (1000c3e8 <ble_scan_info_handler+0x90>)
1000c3ca:	4b08      	ldr	r3, [pc, #32]	; (1000c3ec <ble_scan_info_handler+0x94>)
1000c3cc:	4798      	blx	r3
1000c3ce:	480c      	ldr	r0, [pc, #48]	; (1000c400 <ble_scan_info_handler+0xa8>)
1000c3d0:	4b08      	ldr	r3, [pc, #32]	; (1000c3f4 <ble_scan_info_handler+0x9c>)
1000c3d2:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c3d4:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c3d6:	0018      	movs	r0, r3
1000c3d8:	b005      	add	sp, #20
1000c3da:	bd30      	pop	{r4, r5, pc}
1000c3dc:	10018d7c 	.word	0x10018d7c
1000c3e0:	1001a55c 	.word	0x1001a55c
1000c3e4:	1001571b 	.word	0x1001571b
1000c3e8:	100168d4 	.word	0x100168d4
1000c3ec:	10015995 	.word	0x10015995
1000c3f0:	100178d8 	.word	0x100178d8
1000c3f4:	10015875 	.word	0x10015875
1000c3f8:	10017914 	.word	0x10017914
1000c3fc:	1000f0f5 	.word	0x1000f0f5
1000c400:	1001794c 	.word	0x1001794c

1000c404 <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c404:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c406:	465f      	mov	r7, fp
1000c408:	4656      	mov	r6, sl
1000c40a:	464d      	mov	r5, r9
1000c40c:	4644      	mov	r4, r8
1000c40e:	b4f0      	push	{r4, r5, r6, r7}
1000c410:	b083      	sub	sp, #12
1000c412:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c414:	8841      	ldrh	r1, [r0, #2]
1000c416:	4b59      	ldr	r3, [pc, #356]	; (1000c57c <ble_pair_done_handler+0x178>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c418:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c41a:	891a      	ldrh	r2, [r3, #8]
1000c41c:	428a      	cmp	r2, r1
1000c41e:	d105      	bne.n	1000c42c <ble_pair_done_handler+0x28>
1000c420:	001a      	movs	r2, r3
1000c422:	325e      	adds	r2, #94	; 0x5e
1000c424:	7812      	ldrb	r2, [r2, #0]
1000c426:	2a03      	cmp	r2, #3
1000c428:	d100      	bne.n	1000c42c <ble_pair_done_handler+0x28>
1000c42a:	e09a      	b.n	1000c562 <ble_pair_done_handler+0x15e>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c42c:	3401      	adds	r4, #1
1000c42e:	b2e4      	uxtb	r4, r4
1000c430:	337c      	adds	r3, #124	; 0x7c
1000c432:	2c05      	cmp	r4, #5
1000c434:	d1f1      	bne.n	1000c41a <ble_pair_done_handler+0x16>
1000c436:	e057      	b.n	1000c4e8 <ble_pair_done_handler+0xe4>
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c438:	7821      	ldrb	r1, [r4, #0]
1000c43a:	0030      	movs	r0, r6
1000c43c:	47b8      	blx	r7
1000c43e:	3401      	adds	r4, #1
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
			
			DBG_LOG_DEV("LTK: ");
			for (idx = 0; idx < 16; idx++)
1000c440:	454c      	cmp	r4, r9
1000c442:	d1f9      	bne.n	1000c438 <ble_pair_done_handler+0x34>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
1000c444:	484e      	ldr	r0, [pc, #312]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c446:	4b4f      	ldr	r3, [pc, #316]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c448:	4798      	blx	r3
1000c44a:	484f      	ldr	r0, [pc, #316]	; (1000c588 <ble_pair_done_handler+0x184>)
1000c44c:	4b4f      	ldr	r3, [pc, #316]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c44e:	4798      	blx	r3
1000c450:	002e      	movs	r6, r5
1000c452:	3622      	adds	r6, #34	; 0x22
1000c454:	002c      	movs	r4, r5
1000c456:	3432      	adds	r4, #50	; 0x32
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
1000c458:	4f4c      	ldr	r7, [pc, #304]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c45a:	7831      	ldrb	r1, [r6, #0]
1000c45c:	484c      	ldr	r0, [pc, #304]	; (1000c590 <ble_pair_done_handler+0x18c>)
1000c45e:	47b8      	blx	r7
1000c460:	3601      	adds	r6, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
				
			}
			DBG_LOG_DEV("CSRK: ");
			for (idx = 0; idx < 16; idx++)
1000c462:	42a6      	cmp	r6, r4
1000c464:	d1f9      	bne.n	1000c45a <ble_pair_done_handler+0x56>
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
1000c466:	4846      	ldr	r0, [pc, #280]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c468:	4b46      	ldr	r3, [pc, #280]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c46a:	4798      	blx	r3
1000c46c:	4849      	ldr	r0, [pc, #292]	; (1000c594 <ble_pair_done_handler+0x190>)
1000c46e:	4b47      	ldr	r3, [pc, #284]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c470:	4798      	blx	r3
1000c472:	3542      	adds	r5, #66	; 0x42
1000c474:	002f      	movs	r7, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_irk.key[idx]);
1000c476:	4e46      	ldr	r6, [pc, #280]	; (1000c590 <ble_pair_done_handler+0x18c>)
1000c478:	4d44      	ldr	r5, [pc, #272]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c47a:	7821      	ldrb	r1, [r4, #0]
1000c47c:	0030      	movs	r0, r6
1000c47e:	47a8      	blx	r5
1000c480:	3401      	adds	r4, #1
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_csrk.key[idx]);
				
			}
			DBG_LOG_DEV("IRK:");
			for (idx = 0; idx < 16; idx++)
1000c482:	42bc      	cmp	r4, r7
1000c484:	d1f9      	bne.n	1000c47a <ble_pair_done_handler+0x76>
1000c486:	e071      	b.n	1000c56c <ble_pair_done_handler+0x168>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c488:	0163      	lsls	r3, r4, #5
1000c48a:	1b1c      	subs	r4, r3, r4
1000c48c:	00a4      	lsls	r4, r4, #2
1000c48e:	4b3b      	ldr	r3, [pc, #236]	; (1000c57c <ble_pair_done_handler+0x178>)
1000c490:	191c      	adds	r4, r3, r4
1000c492:	345e      	adds	r4, #94	; 0x5e
1000c494:	7823      	ldrb	r3, [r4, #0]
1000c496:	2b01      	cmp	r3, #1
1000c498:	d915      	bls.n	1000c4c6 <ble_pair_done_handler+0xc2>
			DBG_LOG("Pairing failed...Disconnecting");
1000c49a:	4839      	ldr	r0, [pc, #228]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c49c:	4b39      	ldr	r3, [pc, #228]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c49e:	4798      	blx	r3
1000c4a0:	483d      	ldr	r0, [pc, #244]	; (1000c598 <ble_pair_done_handler+0x194>)
1000c4a2:	4b3a      	ldr	r3, [pc, #232]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c4a4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c4a6:	8868      	ldrh	r0, [r5, #2]
1000c4a8:	2113      	movs	r1, #19
1000c4aa:	4b3c      	ldr	r3, [pc, #240]	; (1000c59c <ble_pair_done_handler+0x198>)
1000c4ac:	4798      	blx	r3
1000c4ae:	9001      	str	r0, [sp, #4]
1000c4b0:	2800      	cmp	r0, #0
1000c4b2:	d05b      	beq.n	1000c56c <ble_pair_done_handler+0x168>
			{
				DBG_LOG("Disconnect Request Failed");
1000c4b4:	4832      	ldr	r0, [pc, #200]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c4b6:	4b33      	ldr	r3, [pc, #204]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c4b8:	4798      	blx	r3
1000c4ba:	4839      	ldr	r0, [pc, #228]	; (1000c5a0 <ble_pair_done_handler+0x19c>)
1000c4bc:	4b33      	ldr	r3, [pc, #204]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c4be:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c4c0:	23e2      	movs	r3, #226	; 0xe2
1000c4c2:	9301      	str	r3, [sp, #4]
1000c4c4:	e052      	b.n	1000c56c <ble_pair_done_handler+0x168>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c4c6:	2300      	movs	r3, #0
1000c4c8:	9301      	str	r3, [sp, #4]
1000c4ca:	e04f      	b.n	1000c56c <ble_pair_done_handler+0x168>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c4cc:	4e2c      	ldr	r6, [pc, #176]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c4ce:	0030      	movs	r0, r6
1000c4d0:	4d2c      	ldr	r5, [pc, #176]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c4d2:	47a8      	blx	r5
1000c4d4:	4833      	ldr	r0, [pc, #204]	; (1000c5a4 <ble_pair_done_handler+0x1a0>)
1000c4d6:	4c2d      	ldr	r4, [pc, #180]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c4d8:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c4da:	0030      	movs	r0, r6
1000c4dc:	47a8      	blx	r5
1000c4de:	4832      	ldr	r0, [pc, #200]	; (1000c5a8 <ble_pair_done_handler+0x1a4>)
1000c4e0:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c4e2:	23e2      	movs	r3, #226	; 0xe2
1000c4e4:	9301      	str	r3, [sp, #4]
1000c4e6:	e041      	b.n	1000c56c <ble_pair_done_handler+0x168>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c4e8:	792b      	ldrb	r3, [r5, #4]
1000c4ea:	2b00      	cmp	r3, #0
1000c4ec:	d1cc      	bne.n	1000c488 <ble_pair_done_handler+0x84>
1000c4ee:	e7ed      	b.n	1000c4cc <ble_pair_done_handler+0xc8>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c4f0:	4823      	ldr	r0, [pc, #140]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c4f2:	4b24      	ldr	r3, [pc, #144]	; (1000c584 <ble_pair_done_handler+0x180>)
1000c4f4:	469b      	mov	fp, r3
1000c4f6:	4798      	blx	r3
1000c4f8:	482a      	ldr	r0, [pc, #168]	; (1000c5a4 <ble_pair_done_handler+0x1a0>)
1000c4fa:	4b24      	ldr	r3, [pc, #144]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c4fc:	469a      	mov	sl, r3
1000c4fe:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c500:	782a      	ldrb	r2, [r5, #0]
1000c502:	4b1e      	ldr	r3, [pc, #120]	; (1000c57c <ble_pair_done_handler+0x178>)
1000c504:	4698      	mov	r8, r3
1000c506:	0167      	lsls	r7, r4, #5
1000c508:	1b3b      	subs	r3, r7, r4
1000c50a:	009b      	lsls	r3, r3, #2
1000c50c:	4443      	add	r3, r8
1000c50e:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c510:	792a      	ldrb	r2, [r5, #4]
1000c512:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c514:	335e      	adds	r3, #94	; 0x5e
1000c516:	2205      	movs	r2, #5
1000c518:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c51a:	1b38      	subs	r0, r7, r4
1000c51c:	0080      	lsls	r0, r0, #2
1000c51e:	4440      	add	r0, r8
1000c520:	3036      	adds	r0, #54	; 0x36
1000c522:	320b      	adds	r2, #11
1000c524:	0029      	movs	r1, r5
1000c526:	3122      	adds	r1, #34	; 0x22
1000c528:	4b20      	ldr	r3, [pc, #128]	; (1000c5ac <ble_pair_done_handler+0x1a8>)
1000c52a:	4699      	mov	r9, r3
1000c52c:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c52e:	1b38      	subs	r0, r7, r4
1000c530:	0080      	lsls	r0, r0, #2
1000c532:	4440      	add	r0, r8
1000c534:	3046      	adds	r0, #70	; 0x46
1000c536:	2217      	movs	r2, #23
1000c538:	0029      	movs	r1, r5
1000c53a:	3132      	adds	r1, #50	; 0x32
1000c53c:	47c8      	blx	r9
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c53e:	1b38      	subs	r0, r7, r4
1000c540:	0080      	lsls	r0, r0, #2
1000c542:	4440      	add	r0, r8
1000c544:	301a      	adds	r0, #26
1000c546:	1dac      	adds	r4, r5, #6
1000c548:	221c      	movs	r2, #28
1000c54a:	0021      	movs	r1, r4
1000c54c:	47c8      	blx	r9
			
			DBG_LOG_DEV("LTK: ");
1000c54e:	480c      	ldr	r0, [pc, #48]	; (1000c580 <ble_pair_done_handler+0x17c>)
1000c550:	47d8      	blx	fp
1000c552:	4817      	ldr	r0, [pc, #92]	; (1000c5b0 <ble_pair_done_handler+0x1ac>)
1000c554:	47d0      	blx	sl
1000c556:	2316      	movs	r3, #22
1000c558:	4699      	mov	r9, r3
1000c55a:	44a9      	add	r9, r5
			for (idx = 0; idx < 16; idx++)
			{
				DBG_LOG_CONT_DEV("0x%02X, ", pairing_params->peer_ltk.key[idx]);
1000c55c:	4e0c      	ldr	r6, [pc, #48]	; (1000c590 <ble_pair_done_handler+0x18c>)
1000c55e:	4f0b      	ldr	r7, [pc, #44]	; (1000c58c <ble_pair_done_handler+0x188>)
1000c560:	e76a      	b.n	1000c438 <ble_pair_done_handler+0x34>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c562:	792b      	ldrb	r3, [r5, #4]
1000c564:	9301      	str	r3, [sp, #4]
1000c566:	2b00      	cmp	r3, #0
1000c568:	d0c2      	beq.n	1000c4f0 <ble_pair_done_handler+0xec>
1000c56a:	e78d      	b.n	1000c488 <ble_pair_done_handler+0x84>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c56c:	9801      	ldr	r0, [sp, #4]
1000c56e:	b003      	add	sp, #12
1000c570:	bc3c      	pop	{r2, r3, r4, r5}
1000c572:	4690      	mov	r8, r2
1000c574:	4699      	mov	r9, r3
1000c576:	46a2      	mov	sl, r4
1000c578:	46ab      	mov	fp, r5
1000c57a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c57c:	1001a278 	.word	0x1001a278
1000c580:	100168d4 	.word	0x100168d4
1000c584:	10015995 	.word	0x10015995
1000c588:	10017970 	.word	0x10017970
1000c58c:	10015875 	.word	0x10015875
1000c590:	10017964 	.word	0x10017964
1000c594:	10017978 	.word	0x10017978
1000c598:	10017980 	.word	0x10017980
1000c59c:	1000f115 	.word	0x1000f115
1000c5a0:	100179a0 	.word	0x100179a0
1000c5a4:	100179bc 	.word	0x100179bc
1000c5a8:	100179e8 	.word	0x100179e8
1000c5ac:	1001571b 	.word	0x1001571b
1000c5b0:	10017a18 	.word	0x10017a18

1000c5b4 <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c5b4:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c5b6:	8800      	ldrh	r0, [r0, #0]
1000c5b8:	2378      	movs	r3, #120	; 0x78
1000c5ba:	2201      	movs	r2, #1
1000c5bc:	2101      	movs	r1, #1
1000c5be:	4c02      	ldr	r4, [pc, #8]	; (1000c5c8 <ble_conn_param_update_req+0x14>)
1000c5c0:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c5c2:	2000      	movs	r0, #0
1000c5c4:	bd10      	pop	{r4, pc}
1000c5c6:	46c0      	nop			; (mov r8, r8)
1000c5c8:	1000f135 	.word	0x1000f135

1000c5cc <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c5ce:	4657      	mov	r7, sl
1000c5d0:	464e      	mov	r6, r9
1000c5d2:	4645      	mov	r5, r8
1000c5d4:	b4e0      	push	{r5, r6, r7}
1000c5d6:	b084      	sub	sp, #16
1000c5d8:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c5da:	2209      	movs	r2, #9
1000c5dc:	2100      	movs	r1, #0
1000c5de:	a801      	add	r0, sp, #4
1000c5e0:	4b6a      	ldr	r3, [pc, #424]	; (1000c78c <ble_slave_security_request_handler+0x1c0>)
1000c5e2:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c5e4:	8825      	ldrh	r5, [r4, #0]
1000c5e6:	496a      	ldr	r1, [pc, #424]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c5e8:	000a      	movs	r2, r1
1000c5ea:	2300      	movs	r3, #0
1000c5ec:	8910      	ldrh	r0, [r2, #8]
1000c5ee:	42a8      	cmp	r0, r5
1000c5f0:	d116      	bne.n	1000c620 <ble_slave_security_request_handler+0x54>
1000c5f2:	0010      	movs	r0, r2
1000c5f4:	305e      	adds	r0, #94	; 0x5e
1000c5f6:	7800      	ldrb	r0, [r0, #0]
1000c5f8:	2802      	cmp	r0, #2
1000c5fa:	d111      	bne.n	1000c620 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c5fc:	4864      	ldr	r0, [pc, #400]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c5fe:	015a      	lsls	r2, r3, #5
1000c600:	1ad6      	subs	r6, r2, r3
1000c602:	00b6      	lsls	r6, r6, #2
1000c604:	1986      	adds	r6, r0, r6
1000c606:	365e      	adds	r6, #94	; 0x5e
1000c608:	2206      	movs	r2, #6
1000c60a:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c60c:	32f9      	adds	r2, #249	; 0xf9
1000c60e:	4013      	ands	r3, r2
1000c610:	015a      	lsls	r2, r3, #5
1000c612:	1ad2      	subs	r2, r2, r3
1000c614:	0092      	lsls	r2, r2, #2
1000c616:	1882      	adds	r2, r0, r2
1000c618:	7d12      	ldrb	r2, [r2, #20]
1000c61a:	07d0      	lsls	r0, r2, #31
1000c61c:	d405      	bmi.n	1000c62a <ble_slave_security_request_handler+0x5e>
1000c61e:	e01b      	b.n	1000c658 <ble_slave_security_request_handler+0x8c>
1000c620:	3301      	adds	r3, #1
1000c622:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c624:	2b05      	cmp	r3, #5
1000c626:	d1e1      	bne.n	1000c5ec <ble_slave_security_request_handler+0x20>
1000c628:	e01e      	b.n	1000c668 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c62a:	78e0      	ldrb	r0, [r4, #3]
1000c62c:	2800      	cmp	r0, #0
1000c62e:	d013      	beq.n	1000c658 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c630:	0159      	lsls	r1, r3, #5
1000c632:	1ac9      	subs	r1, r1, r3
1000c634:	008b      	lsls	r3, r1, #2
1000c636:	4956      	ldr	r1, [pc, #344]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c638:	18c9      	adds	r1, r1, r3
1000c63a:	311a      	adds	r1, #26
1000c63c:	8820      	ldrh	r0, [r4, #0]
1000c63e:	4b55      	ldr	r3, [pc, #340]	; (1000c794 <ble_slave_security_request_handler+0x1c8>)
1000c640:	4798      	blx	r3
1000c642:	2800      	cmp	r0, #0
1000c644:	d100      	bne.n	1000c648 <ble_slave_security_request_handler+0x7c>
1000c646:	e09b      	b.n	1000c780 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c648:	4853      	ldr	r0, [pc, #332]	; (1000c798 <ble_slave_security_request_handler+0x1cc>)
1000c64a:	4b54      	ldr	r3, [pc, #336]	; (1000c79c <ble_slave_security_request_handler+0x1d0>)
1000c64c:	4798      	blx	r3
1000c64e:	4854      	ldr	r0, [pc, #336]	; (1000c7a0 <ble_slave_security_request_handler+0x1d4>)
1000c650:	4b54      	ldr	r3, [pc, #336]	; (1000c7a4 <ble_slave_security_request_handler+0x1d8>)
1000c652:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c654:	20e2      	movs	r0, #226	; 0xe2
1000c656:	e093      	b.n	1000c780 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c658:	015a      	lsls	r2, r3, #5
1000c65a:	1ad3      	subs	r3, r2, r3
1000c65c:	009b      	lsls	r3, r3, #2
1000c65e:	4a4c      	ldr	r2, [pc, #304]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c660:	18d3      	adds	r3, r2, r3
1000c662:	335e      	adds	r3, #94	; 0x5e
1000c664:	2202      	movs	r2, #2
1000c666:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c668:	8825      	ldrh	r5, [r4, #0]
1000c66a:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c66c:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c66e:	0016      	movs	r6, r2
1000c670:	8908      	ldrh	r0, [r1, #8]
1000c672:	42a8      	cmp	r0, r5
1000c674:	d10d      	bne.n	1000c692 <ble_slave_security_request_handler+0xc6>
1000c676:	0008      	movs	r0, r1
1000c678:	305e      	adds	r0, #94	; 0x5e
1000c67a:	7800      	ldrb	r0, [r0, #0]
1000c67c:	2802      	cmp	r0, #2
1000c67e:	d108      	bne.n	1000c692 <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c680:	0152      	lsls	r2, r2, #5
1000c682:	1b92      	subs	r2, r2, r6
1000c684:	0096      	lsls	r6, r2, #2
1000c686:	4a42      	ldr	r2, [pc, #264]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c688:	1992      	adds	r2, r2, r6
1000c68a:	325e      	adds	r2, #94	; 0x5e
1000c68c:	2103      	movs	r1, #3
1000c68e:	7011      	strb	r1, [r2, #0]
			break;
1000c690:	e005      	b.n	1000c69e <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c692:	3301      	adds	r3, #1
1000c694:	b2db      	uxtb	r3, r3
1000c696:	3201      	adds	r2, #1
1000c698:	317c      	adds	r1, #124	; 0x7c
1000c69a:	2b05      	cmp	r3, #5
1000c69c:	d1e7      	bne.n	1000c66e <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c69e:	aa01      	add	r2, sp, #4
1000c6a0:	78e1      	ldrb	r1, [r4, #3]
1000c6a2:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c6a4:	2101      	movs	r1, #1
1000c6a6:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c6a8:	3103      	adds	r1, #3
1000c6aa:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c6ac:	001f      	movs	r7, r3
1000c6ae:	015a      	lsls	r2, r3, #5
1000c6b0:	1ad2      	subs	r2, r2, r3
1000c6b2:	0092      	lsls	r2, r2, #2
1000c6b4:	4936      	ldr	r1, [pc, #216]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c6b6:	5c52      	ldrb	r2, [r2, r1]
1000c6b8:	2a02      	cmp	r2, #2
1000c6ba:	d104      	bne.n	1000c6c6 <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c6bc:	aa01      	add	r2, sp, #4
1000c6be:	2103      	movs	r1, #3
1000c6c0:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c6c2:	71d1      	strb	r1, [r2, #7]
1000c6c4:	e003      	b.n	1000c6ce <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c6c6:	aa01      	add	r2, sp, #4
1000c6c8:	2101      	movs	r1, #1
1000c6ca:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c6cc:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c6ce:	aa01      	add	r2, sp, #4
1000c6d0:	2110      	movs	r1, #16
1000c6d2:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c6d4:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c6d6:	017a      	lsls	r2, r7, #5
1000c6d8:	1bd2      	subs	r2, r2, r7
1000c6da:	0092      	lsls	r2, r2, #2
1000c6dc:	492c      	ldr	r1, [pc, #176]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c6de:	188a      	adds	r2, r1, r2
1000c6e0:	7e12      	ldrb	r2, [r2, #24]
1000c6e2:	2a40      	cmp	r2, #64	; 0x40
1000c6e4:	d134      	bne.n	1000c750 <ble_slave_security_request_handler+0x184>
1000c6e6:	015a      	lsls	r2, r3, #5
1000c6e8:	1ad3      	subs	r3, r2, r3
1000c6ea:	009b      	lsls	r3, r3, #2
1000c6ec:	469a      	mov	sl, r3
1000c6ee:	001e      	movs	r6, r3
1000c6f0:	3660      	adds	r6, #96	; 0x60
1000c6f2:	1876      	adds	r6, r6, r1
1000c6f4:	4655      	mov	r5, sl
1000c6f6:	3568      	adds	r5, #104	; 0x68
1000c6f8:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c6fa:	4b2b      	ldr	r3, [pc, #172]	; (1000c7a8 <ble_slave_security_request_handler+0x1dc>)
1000c6fc:	4699      	mov	r9, r3
1000c6fe:	230f      	movs	r3, #15
1000c700:	4698      	mov	r8, r3
1000c702:	47c8      	blx	r9
1000c704:	4643      	mov	r3, r8
1000c706:	4018      	ands	r0, r3
1000c708:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c70a:	47c8      	blx	r9
1000c70c:	4643      	mov	r3, r8
1000c70e:	4018      	ands	r0, r3
1000c710:	74b0      	strb	r0, [r6, #18]
1000c712:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c714:	42ae      	cmp	r6, r5
1000c716:	d1f4      	bne.n	1000c702 <ble_slave_security_request_handler+0x136>
1000c718:	4656      	mov	r6, sl
1000c71a:	3670      	adds	r6, #112	; 0x70
1000c71c:	4a1c      	ldr	r2, [pc, #112]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c71e:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c720:	4b21      	ldr	r3, [pc, #132]	; (1000c7a8 <ble_slave_security_request_handler+0x1dc>)
1000c722:	4699      	mov	r9, r3
1000c724:	230f      	movs	r3, #15
1000c726:	4698      	mov	r8, r3
1000c728:	47c8      	blx	r9
1000c72a:	4643      	mov	r3, r8
1000c72c:	4018      	ands	r0, r3
1000c72e:	7028      	strb	r0, [r5, #0]
1000c730:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c732:	42b5      	cmp	r5, r6
1000c734:	d1f8      	bne.n	1000c728 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c736:	4b1c      	ldr	r3, [pc, #112]	; (1000c7a8 <ble_slave_security_request_handler+0x1dc>)
1000c738:	4798      	blx	r3
1000c73a:	017b      	lsls	r3, r7, #5
1000c73c:	1bdb      	subs	r3, r3, r7
1000c73e:	009b      	lsls	r3, r3, #2
1000c740:	4a13      	ldr	r2, [pc, #76]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c742:	18d3      	adds	r3, r2, r3
1000c744:	001a      	movs	r2, r3
1000c746:	3270      	adds	r2, #112	; 0x70
1000c748:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c74a:	337a      	adds	r3, #122	; 0x7a
1000c74c:	2210      	movs	r2, #16
1000c74e:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c750:	017a      	lsls	r2, r7, #5
1000c752:	1bd7      	subs	r7, r2, r7
1000c754:	00bf      	lsls	r7, r7, #2
1000c756:	3760      	adds	r7, #96	; 0x60
1000c758:	4a0d      	ldr	r2, [pc, #52]	; (1000c790 <ble_slave_security_request_handler+0x1c4>)
1000c75a:	18ba      	adds	r2, r7, r2
1000c75c:	8820      	ldrh	r0, [r4, #0]
1000c75e:	2300      	movs	r3, #0
1000c760:	a901      	add	r1, sp, #4
1000c762:	4c12      	ldr	r4, [pc, #72]	; (1000c7ac <ble_slave_security_request_handler+0x1e0>)
1000c764:	47a0      	blx	r4
1000c766:	2800      	cmp	r0, #0
1000c768:	d00a      	beq.n	1000c780 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c76a:	ab01      	add	r3, sp, #4
1000c76c:	2200      	movs	r2, #0
1000c76e:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c770:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c772:	4809      	ldr	r0, [pc, #36]	; (1000c798 <ble_slave_security_request_handler+0x1cc>)
1000c774:	4b09      	ldr	r3, [pc, #36]	; (1000c79c <ble_slave_security_request_handler+0x1d0>)
1000c776:	4798      	blx	r3
1000c778:	480d      	ldr	r0, [pc, #52]	; (1000c7b0 <ble_slave_security_request_handler+0x1e4>)
1000c77a:	4b0a      	ldr	r3, [pc, #40]	; (1000c7a4 <ble_slave_security_request_handler+0x1d8>)
1000c77c:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c77e:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c780:	b004      	add	sp, #16
1000c782:	bc1c      	pop	{r2, r3, r4}
1000c784:	4690      	mov	r8, r2
1000c786:	4699      	mov	r9, r3
1000c788:	46a2      	mov	sl, r4
1000c78a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c78c:	1001572d 	.word	0x1001572d
1000c790:	1001a278 	.word	0x1001a278
1000c794:	1000fcf9 	.word	0x1000fcf9
1000c798:	100168d4 	.word	0x100168d4
1000c79c:	10015995 	.word	0x10015995
1000c7a0:	10017a20 	.word	0x10017a20
1000c7a4:	10015875 	.word	0x10015875
1000c7a8:	100159a9 	.word	0x100159a9
1000c7ac:	1000fb0d 	.word	0x1000fb0d
1000c7b0:	10017a38 	.word	0x10017a38

1000c7b4 <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c7b4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c7b6:	465f      	mov	r7, fp
1000c7b8:	4656      	mov	r6, sl
1000c7ba:	464d      	mov	r5, r9
1000c7bc:	4644      	mov	r4, r8
1000c7be:	b4f0      	push	{r4, r5, r6, r7}
1000c7c0:	b085      	sub	sp, #20
1000c7c2:	4680      	mov	r8, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c7c4:	8804      	ldrh	r4, [r0, #0]
1000c7c6:	4a54      	ldr	r2, [pc, #336]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c7c8:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7ca:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c7cc:	8910      	ldrh	r0, [r2, #8]
1000c7ce:	42a0      	cmp	r0, r4
1000c7d0:	d10d      	bne.n	1000c7ee <ble_pair_request_handler+0x3a>
1000c7d2:	0010      	movs	r0, r2
1000c7d4:	305e      	adds	r0, #94	; 0x5e
1000c7d6:	7800      	ldrb	r0, [r0, #0]
1000c7d8:	2802      	cmp	r0, #2
1000c7da:	d108      	bne.n	1000c7ee <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c7dc:	014a      	lsls	r2, r1, #5
1000c7de:	1a52      	subs	r2, r2, r1
1000c7e0:	0095      	lsls	r5, r2, #2
1000c7e2:	4a4d      	ldr	r2, [pc, #308]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c7e4:	1952      	adds	r2, r2, r5
1000c7e6:	325e      	adds	r2, #94	; 0x5e
1000c7e8:	2103      	movs	r1, #3
1000c7ea:	7011      	strb	r1, [r2, #0]
			break;
1000c7ec:	e005      	b.n	1000c7fa <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c7ee:	3301      	adds	r3, #1
1000c7f0:	b2db      	uxtb	r3, r3
1000c7f2:	3101      	adds	r1, #1
1000c7f4:	327c      	adds	r2, #124	; 0x7c
1000c7f6:	2b05      	cmp	r3, #5
1000c7f8:	d1e8      	bne.n	1000c7cc <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c7fa:	aa01      	add	r2, sp, #4
1000c7fc:	2100      	movs	r1, #0
1000c7fe:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c800:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c802:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c804:	2003      	movs	r0, #3
1000c806:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c808:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c80a:	001e      	movs	r6, r3
1000c80c:	015a      	lsls	r2, r3, #5
1000c80e:	1ad2      	subs	r2, r2, r3
1000c810:	0092      	lsls	r2, r2, #2
1000c812:	4941      	ldr	r1, [pc, #260]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c814:	5c52      	ldrb	r2, [r2, r1]
1000c816:	2a02      	cmp	r2, #2
1000c818:	d104      	bne.n	1000c824 <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c81a:	aa01      	add	r2, sp, #4
1000c81c:	2103      	movs	r1, #3
1000c81e:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c820:	71d1      	strb	r1, [r2, #7]
1000c822:	e003      	b.n	1000c82c <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c824:	aa01      	add	r2, sp, #4
1000c826:	2101      	movs	r1, #1
1000c828:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c82a:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c82c:	aa01      	add	r2, sp, #4
1000c82e:	2110      	movs	r1, #16
1000c830:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c832:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c834:	0172      	lsls	r2, r6, #5
1000c836:	1b92      	subs	r2, r2, r6
1000c838:	0092      	lsls	r2, r2, #2
1000c83a:	4937      	ldr	r1, [pc, #220]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c83c:	188a      	adds	r2, r1, r2
1000c83e:	7e12      	ldrb	r2, [r2, #24]
1000c840:	2a40      	cmp	r2, #64	; 0x40
1000c842:	d142      	bne.n	1000c8ca <ble_pair_request_handler+0x116>
1000c844:	015f      	lsls	r7, r3, #5
1000c846:	1afb      	subs	r3, r7, r3
1000c848:	009b      	lsls	r3, r3, #2
1000c84a:	469b      	mov	fp, r3
1000c84c:	001c      	movs	r4, r3
1000c84e:	3460      	adds	r4, #96	; 0x60
1000c850:	1864      	adds	r4, r4, r1
1000c852:	465d      	mov	r5, fp
1000c854:	3568      	adds	r5, #104	; 0x68
1000c856:	186d      	adds	r5, r5, r1
1000c858:	0027      	movs	r7, r4
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c85a:	4b30      	ldr	r3, [pc, #192]	; (1000c91c <ble_pair_request_handler+0x168>)
1000c85c:	469a      	mov	sl, r3
1000c85e:	230f      	movs	r3, #15
1000c860:	4699      	mov	r9, r3
1000c862:	47d0      	blx	sl
1000c864:	464b      	mov	r3, r9
1000c866:	4018      	ands	r0, r3
1000c868:	7038      	strb	r0, [r7, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c86a:	47d0      	blx	sl
1000c86c:	464b      	mov	r3, r9
1000c86e:	4018      	ands	r0, r3
1000c870:	74b8      	strb	r0, [r7, #18]
1000c872:	3701      	adds	r7, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c874:	42af      	cmp	r7, r5
1000c876:	d1f4      	bne.n	1000c862 <ble_pair_request_handler+0xae>
1000c878:	465b      	mov	r3, fp
1000c87a:	3370      	adds	r3, #112	; 0x70
1000c87c:	4f26      	ldr	r7, [pc, #152]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c87e:	19df      	adds	r7, r3, r7
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c880:	4b26      	ldr	r3, [pc, #152]	; (1000c91c <ble_pair_request_handler+0x168>)
1000c882:	469a      	mov	sl, r3
1000c884:	230f      	movs	r3, #15
1000c886:	4699      	mov	r9, r3
1000c888:	47d0      	blx	sl
1000c88a:	464b      	mov	r3, r9
1000c88c:	4018      	ands	r0, r3
1000c88e:	7028      	strb	r0, [r5, #0]
1000c890:	3501      	adds	r5, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c892:	42bd      	cmp	r5, r7
1000c894:	d1f8      	bne.n	1000c888 <ble_pair_request_handler+0xd4>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
1000c896:	4822      	ldr	r0, [pc, #136]	; (1000c920 <ble_pair_request_handler+0x16c>)
1000c898:	4b22      	ldr	r3, [pc, #136]	; (1000c924 <ble_pair_request_handler+0x170>)
1000c89a:	4798      	blx	r3
1000c89c:	4822      	ldr	r0, [pc, #136]	; (1000c928 <ble_pair_request_handler+0x174>)
1000c89e:	4b23      	ldr	r3, [pc, #140]	; (1000c92c <ble_pair_request_handler+0x178>)
1000c8a0:	4798      	blx	r3
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
1000c8a2:	4d22      	ldr	r5, [pc, #136]	; (1000c92c <ble_pair_request_handler+0x178>)
1000c8a4:	7821      	ldrb	r1, [r4, #0]
1000c8a6:	4822      	ldr	r0, [pc, #136]	; (1000c930 <ble_pair_request_handler+0x17c>)
1000c8a8:	47a8      	blx	r5
1000c8aa:	3401      	adds	r4, #1
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		DBG_LOG_DEV("Generated LTK: ");
		for (i = 0; i < 16; i++)
1000c8ac:	42bc      	cmp	r4, r7
1000c8ae:	d1f9      	bne.n	1000c8a4 <ble_pair_request_handler+0xf0>
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c8b0:	4b1a      	ldr	r3, [pc, #104]	; (1000c91c <ble_pair_request_handler+0x168>)
1000c8b2:	4798      	blx	r3
1000c8b4:	0173      	lsls	r3, r6, #5
1000c8b6:	1b9b      	subs	r3, r3, r6
1000c8b8:	009b      	lsls	r3, r3, #2
1000c8ba:	4a17      	ldr	r2, [pc, #92]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c8bc:	18d3      	adds	r3, r2, r3
1000c8be:	001a      	movs	r2, r3
1000c8c0:	3270      	adds	r2, #112	; 0x70
1000c8c2:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c8c4:	337a      	adds	r3, #122	; 0x7a
1000c8c6:	2210      	movs	r2, #16
1000c8c8:	701a      	strb	r2, [r3, #0]
		/* Bonding information already exists */
		
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");
1000c8ca:	4815      	ldr	r0, [pc, #84]	; (1000c920 <ble_pair_request_handler+0x16c>)
1000c8cc:	4b15      	ldr	r3, [pc, #84]	; (1000c924 <ble_pair_request_handler+0x170>)
1000c8ce:	4798      	blx	r3
1000c8d0:	4818      	ldr	r0, [pc, #96]	; (1000c934 <ble_pair_request_handler+0x180>)
1000c8d2:	4b16      	ldr	r3, [pc, #88]	; (1000c92c <ble_pair_request_handler+0x178>)
1000c8d4:	4798      	blx	r3

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c8d6:	0173      	lsls	r3, r6, #5
1000c8d8:	1b9b      	subs	r3, r3, r6
1000c8da:	009b      	lsls	r3, r3, #2
1000c8dc:	3360      	adds	r3, #96	; 0x60
1000c8de:	4a0e      	ldr	r2, [pc, #56]	; (1000c918 <ble_pair_request_handler+0x164>)
1000c8e0:	189a      	adds	r2, r3, r2
1000c8e2:	4643      	mov	r3, r8
1000c8e4:	8818      	ldrh	r0, [r3, #0]
1000c8e6:	2300      	movs	r3, #0
1000c8e8:	a901      	add	r1, sp, #4
1000c8ea:	4c13      	ldr	r4, [pc, #76]	; (1000c938 <ble_pair_request_handler+0x184>)
1000c8ec:	47a0      	blx	r4
1000c8ee:	2800      	cmp	r0, #0
1000c8f0:	d00a      	beq.n	1000c908 <ble_pair_request_handler+0x154>
	{
		features.bond = false;
1000c8f2:	ab01      	add	r3, sp, #4
1000c8f4:	2200      	movs	r2, #0
1000c8f6:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c8f8:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c8fa:	4809      	ldr	r0, [pc, #36]	; (1000c920 <ble_pair_request_handler+0x16c>)
1000c8fc:	4b09      	ldr	r3, [pc, #36]	; (1000c924 <ble_pair_request_handler+0x170>)
1000c8fe:	4798      	blx	r3
1000c900:	480e      	ldr	r0, [pc, #56]	; (1000c93c <ble_pair_request_handler+0x188>)
1000c902:	4b0a      	ldr	r3, [pc, #40]	; (1000c92c <ble_pair_request_handler+0x178>)
1000c904:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c906:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c908:	b005      	add	sp, #20
1000c90a:	bc3c      	pop	{r2, r3, r4, r5}
1000c90c:	4690      	mov	r8, r2
1000c90e:	4699      	mov	r9, r3
1000c910:	46a2      	mov	sl, r4
1000c912:	46ab      	mov	fp, r5
1000c914:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c916:	46c0      	nop			; (mov r8, r8)
1000c918:	1001a278 	.word	0x1001a278
1000c91c:	100159a9 	.word	0x100159a9
1000c920:	100168d4 	.word	0x100168d4
1000c924:	10015995 	.word	0x10015995
1000c928:	10017a64 	.word	0x10017a64
1000c92c:	10015875 	.word	0x10015875
1000c930:	10017a74 	.word	0x10017a74
1000c934:	10017a7c 	.word	0x10017a7c
1000c938:	1000fb0d 	.word	0x1000fb0d
1000c93c:	10017a98 	.word	0x10017a98

1000c940 <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c940:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c942:	b085      	sub	sp, #20
1000c944:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c946:	2206      	movs	r2, #6
1000c948:	493d      	ldr	r1, [pc, #244]	; (1000ca40 <ble_pair_key_request_handler+0x100>)
1000c94a:	a802      	add	r0, sp, #8
1000c94c:	4e3d      	ldr	r6, [pc, #244]	; (1000ca44 <ble_pair_key_request_handler+0x104>)
1000c94e:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c950:	ac01      	add	r4, sp, #4
1000c952:	2204      	movs	r2, #4
1000c954:	0029      	movs	r1, r5
1000c956:	0020      	movs	r0, r4
1000c958:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c95a:	78e3      	ldrb	r3, [r4, #3]
1000c95c:	2b00      	cmp	r3, #0
1000c95e:	d162      	bne.n	1000ca26 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c960:	4839      	ldr	r0, [pc, #228]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000c962:	4b3a      	ldr	r3, [pc, #232]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000c964:	4798      	blx	r3
1000c966:	483a      	ldr	r0, [pc, #232]	; (1000ca50 <ble_pair_key_request_handler+0x110>)
1000c968:	4b3a      	ldr	r3, [pc, #232]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000c96a:	4798      	blx	r3
1000c96c:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c96e:	4c3a      	ldr	r4, [pc, #232]	; (1000ca58 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c970:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c972:	201e      	movs	r0, #30
1000c974:	47a0      	blx	r4
1000c976:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c978:	2b00      	cmp	r3, #0
1000c97a:	d11a      	bne.n	1000c9b2 <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c97c:	4f32      	ldr	r7, [pc, #200]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000c97e:	0038      	movs	r0, r7
1000c980:	4e32      	ldr	r6, [pc, #200]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000c982:	47b0      	blx	r6
1000c984:	4835      	ldr	r0, [pc, #212]	; (1000ca5c <ble_pair_key_request_handler+0x11c>)
1000c986:	4c33      	ldr	r4, [pc, #204]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000c988:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c98a:	0038      	movs	r0, r7
1000c98c:	47b0      	blx	r6
1000c98e:	4834      	ldr	r0, [pc, #208]	; (1000ca60 <ble_pair_key_request_handler+0x120>)
1000c990:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c992:	8828      	ldrh	r0, [r5, #0]
1000c994:	2113      	movs	r1, #19
1000c996:	4b33      	ldr	r3, [pc, #204]	; (1000ca64 <ble_pair_key_request_handler+0x124>)
1000c998:	4798      	blx	r3
1000c99a:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c99c:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c99e:	2b00      	cmp	r3, #0
1000c9a0:	d04c      	beq.n	1000ca3c <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c9a2:	4829      	ldr	r0, [pc, #164]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000c9a4:	4b29      	ldr	r3, [pc, #164]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000c9a6:	4798      	blx	r3
1000c9a8:	482f      	ldr	r0, [pc, #188]	; (1000ca68 <ble_pair_key_request_handler+0x128>)
1000c9aa:	4b2a      	ldr	r3, [pc, #168]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000c9ac:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c9ae:	20e2      	movs	r0, #226	; 0xe2
1000c9b0:	e044      	b.n	1000ca3c <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c9b2:	001a      	movs	r2, r3
1000c9b4:	3a30      	subs	r2, #48	; 0x30
1000c9b6:	2a09      	cmp	r2, #9
1000c9b8:	d8db      	bhi.n	1000c972 <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c9ba:	aa02      	add	r2, sp, #8
1000c9bc:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c9be:	4038      	ands	r0, r7
1000c9c0:	4b2a      	ldr	r3, [pc, #168]	; (1000ca6c <ble_pair_key_request_handler+0x12c>)
1000c9c2:	4798      	blx	r3
1000c9c4:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c9c6:	2e06      	cmp	r6, #6
1000c9c8:	d026      	beq.n	1000ca18 <ble_pair_key_request_handler+0xd8>
1000c9ca:	e7d2      	b.n	1000c972 <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c9cc:	481e      	ldr	r0, [pc, #120]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000c9ce:	4b1f      	ldr	r3, [pc, #124]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000c9d0:	4798      	blx	r3
1000c9d2:	4827      	ldr	r0, [pc, #156]	; (1000ca70 <ble_pair_key_request_handler+0x130>)
1000c9d4:	4b1f      	ldr	r3, [pc, #124]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000c9d6:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c9d8:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c9da:	4e24      	ldr	r6, [pc, #144]	; (1000ca6c <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c9dc:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c9de:	5ce0      	ldrb	r0, [r4, r3]
1000c9e0:	47b0      	blx	r6
1000c9e2:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c9e4:	2c06      	cmp	r4, #6
1000c9e6:	d1f9      	bne.n	1000c9dc <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c9e8:	ab01      	add	r3, sp, #4
1000c9ea:	7899      	ldrb	r1, [r3, #2]
1000c9ec:	8828      	ldrh	r0, [r5, #0]
1000c9ee:	aa02      	add	r2, sp, #8
1000c9f0:	4b20      	ldr	r3, [pc, #128]	; (1000ca74 <ble_pair_key_request_handler+0x134>)
1000c9f2:	4798      	blx	r3
1000c9f4:	2800      	cmp	r0, #0
1000c9f6:	d021      	beq.n	1000ca3c <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c9f8:	4813      	ldr	r0, [pc, #76]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000c9fa:	4b14      	ldr	r3, [pc, #80]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000c9fc:	4798      	blx	r3
1000c9fe:	481e      	ldr	r0, [pc, #120]	; (1000ca78 <ble_pair_key_request_handler+0x138>)
1000ca00:	4b14      	ldr	r3, [pc, #80]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000ca02:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ca04:	2000      	movs	r0, #0
1000ca06:	e019      	b.n	1000ca3c <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000ca08:	480f      	ldr	r0, [pc, #60]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000ca0a:	4b10      	ldr	r3, [pc, #64]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000ca0c:	4798      	blx	r3
1000ca0e:	481b      	ldr	r0, [pc, #108]	; (1000ca7c <ble_pair_key_request_handler+0x13c>)
1000ca10:	4b10      	ldr	r3, [pc, #64]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000ca12:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000ca14:	2000      	movs	r0, #0
1000ca16:	e011      	b.n	1000ca3c <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000ca18:	480b      	ldr	r0, [pc, #44]	; (1000ca48 <ble_pair_key_request_handler+0x108>)
1000ca1a:	4b0c      	ldr	r3, [pc, #48]	; (1000ca4c <ble_pair_key_request_handler+0x10c>)
1000ca1c:	4798      	blx	r3
1000ca1e:	4818      	ldr	r0, [pc, #96]	; (1000ca80 <ble_pair_key_request_handler+0x140>)
1000ca20:	4b0c      	ldr	r3, [pc, #48]	; (1000ca54 <ble_pair_key_request_handler+0x114>)
1000ca22:	4798      	blx	r3
1000ca24:	e7d8      	b.n	1000c9d8 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000ca26:	ab01      	add	r3, sp, #4
1000ca28:	885a      	ldrh	r2, [r3, #2]
1000ca2a:	2380      	movs	r3, #128	; 0x80
1000ca2c:	005b      	lsls	r3, r3, #1
1000ca2e:	429a      	cmp	r2, r3
1000ca30:	d0cc      	beq.n	1000c9cc <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000ca32:	ab01      	add	r3, sp, #4
1000ca34:	789b      	ldrb	r3, [r3, #2]
1000ca36:	2b01      	cmp	r3, #1
1000ca38:	d0e6      	beq.n	1000ca08 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000ca3a:	2000      	movs	r0, #0
}
1000ca3c:	b005      	add	sp, #20
1000ca3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ca40:	10017680 	.word	0x10017680
1000ca44:	1001571b 	.word	0x1001571b
1000ca48:	100168d4 	.word	0x100168d4
1000ca4c:	10015995 	.word	0x10015995
1000ca50:	10017ac0 	.word	0x10017ac0
1000ca54:	10015875 	.word	0x10015875
1000ca58:	1000d75d 	.word	0x1000d75d
1000ca5c:	10017ae8 	.word	0x10017ae8
1000ca60:	10017af4 	.word	0x10017af4
1000ca64:	1000f115 	.word	0x1000f115
1000ca68:	100179a0 	.word	0x100179a0
1000ca6c:	100158a9 	.word	0x100158a9
1000ca70:	10017b08 	.word	0x10017b08
1000ca74:	1000fc3d 	.word	0x1000fc3d
1000ca78:	10017b40 	.word	0x10017b40
1000ca7c:	10017b58 	.word	0x10017b58
1000ca80:	10017b74 	.word	0x10017b74

1000ca84 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000ca84:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ca86:	465f      	mov	r7, fp
1000ca88:	4656      	mov	r6, sl
1000ca8a:	464d      	mov	r5, r9
1000ca8c:	b4e0      	push	{r5, r6, r7}
1000ca8e:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000ca90:	8800      	ldrh	r0, [r0, #0]
1000ca92:	4b49      	ldr	r3, [pc, #292]	; (1000cbb8 <ble_encryption_request_handler+0x134>)
1000ca94:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ca96:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000ca98:	8919      	ldrh	r1, [r3, #8]
1000ca9a:	4281      	cmp	r1, r0
1000ca9c:	d137      	bne.n	1000cb0e <ble_encryption_request_handler+0x8a>
1000ca9e:	0019      	movs	r1, r3
1000caa0:	315e      	adds	r1, #94	; 0x5e
1000caa2:	7809      	ldrb	r1, [r1, #0]
1000caa4:	2901      	cmp	r1, #1
1000caa6:	d932      	bls.n	1000cb0e <ble_encryption_request_handler+0x8a>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000caa8:	4f43      	ldr	r7, [pc, #268]	; (1000cbb8 <ble_encryption_request_handler+0x134>)
1000caaa:	0153      	lsls	r3, r2, #5
1000caac:	1a9d      	subs	r5, r3, r2
1000caae:	00ad      	lsls	r5, r5, #2
1000cab0:	197d      	adds	r5, r7, r5
1000cab2:	355e      	adds	r5, #94	; 0x5e
1000cab4:	2306      	movs	r3, #6
1000cab6:	702b      	strb	r3, [r5, #0]
			DBG_LOG_DEV("ENC-Req: Conn Handle Device Found:hdl:%d", enc_req->handle);
1000cab8:	4840      	ldr	r0, [pc, #256]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000caba:	4b41      	ldr	r3, [pc, #260]	; (1000cbc0 <ble_encryption_request_handler+0x13c>)
1000cabc:	469a      	mov	sl, r3
1000cabe:	4798      	blx	r3
1000cac0:	8831      	ldrh	r1, [r6, #0]
1000cac2:	4840      	ldr	r0, [pc, #256]	; (1000cbc4 <ble_encryption_request_handler+0x140>)
1000cac4:	4b40      	ldr	r3, [pc, #256]	; (1000cbc8 <ble_encryption_request_handler+0x144>)
1000cac6:	4699      	mov	r9, r3
1000cac8:	4798      	blx	r3
		}
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
1000caca:	483c      	ldr	r0, [pc, #240]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cacc:	47d0      	blx	sl
1000cace:	0163      	lsls	r3, r4, #5
1000cad0:	1b1b      	subs	r3, r3, r4
1000cad2:	009b      	lsls	r3, r3, #2
1000cad4:	18ff      	adds	r7, r7, r3
1000cad6:	2370      	movs	r3, #112	; 0x70
1000cad8:	469b      	mov	fp, r3
1000cada:	44bb      	add	fp, r7
1000cadc:	465b      	mov	r3, fp
1000cade:	8819      	ldrh	r1, [r3, #0]
1000cae0:	483a      	ldr	r0, [pc, #232]	; (1000cbcc <ble_encryption_request_handler+0x148>)
1000cae2:	47c8      	blx	r9
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
1000cae4:	4835      	ldr	r0, [pc, #212]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cae6:	47d0      	blx	sl
1000cae8:	8d79      	ldrh	r1, [r7, #42]	; 0x2a
1000caea:	4839      	ldr	r0, [pc, #228]	; (1000cbd0 <ble_encryption_request_handler+0x14c>)
1000caec:	47c8      	blx	r9
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
1000caee:	4833      	ldr	r0, [pc, #204]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000caf0:	47d0      	blx	sl
1000caf2:	8871      	ldrh	r1, [r6, #2]
1000caf4:	4837      	ldr	r0, [pc, #220]	; (1000cbd4 <ble_encryption_request_handler+0x150>)
1000caf6:	47c8      	blx	r9
		DBG_LOG_DEV("The index is %d",idx);
1000caf8:	4830      	ldr	r0, [pc, #192]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cafa:	47d0      	blx	sl
1000cafc:	0021      	movs	r1, r4
1000cafe:	4836      	ldr	r0, [pc, #216]	; (1000cbd8 <ble_encryption_request_handler+0x154>)
1000cb00:	47c8      	blx	r9
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000cb02:	465b      	mov	r3, fp
1000cb04:	881a      	ldrh	r2, [r3, #0]
1000cb06:	8873      	ldrh	r3, [r6, #2]
1000cb08:	429a      	cmp	r2, r3
1000cb0a:	d12a      	bne.n	1000cb62 <ble_encryption_request_handler+0xde>
1000cb0c:	e006      	b.n	1000cb1c <ble_encryption_request_handler+0x98>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cb0e:	3401      	adds	r4, #1
1000cb10:	b2e4      	uxtb	r4, r4
1000cb12:	3201      	adds	r2, #1
1000cb14:	337c      	adds	r3, #124	; 0x7c
1000cb16:	2c05      	cmp	r4, #5
1000cb18:	d1be      	bne.n	1000ca98 <ble_encryption_request_handler+0x14>
1000cb1a:	e022      	b.n	1000cb62 <ble_encryption_request_handler+0xde>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000cb1c:	0161      	lsls	r1, r4, #5
1000cb1e:	1b09      	subs	r1, r1, r4
1000cb20:	0089      	lsls	r1, r1, #2
1000cb22:	4b25      	ldr	r3, [pc, #148]	; (1000cbb8 <ble_encryption_request_handler+0x134>)
1000cb24:	1859      	adds	r1, r3, r1
1000cb26:	3172      	adds	r1, #114	; 0x72
1000cb28:	1d30      	adds	r0, r6, #4
1000cb2a:	2208      	movs	r2, #8
1000cb2c:	4b2b      	ldr	r3, [pc, #172]	; (1000cbdc <ble_encryption_request_handler+0x158>)
1000cb2e:	4798      	blx	r3
1000cb30:	2800      	cmp	r0, #0
1000cb32:	d116      	bne.n	1000cb62 <ble_encryption_request_handler+0xde>
		{
			key_found = true;
			DBG_LOG_DEV("ENC-Req: Key Found");
1000cb34:	4821      	ldr	r0, [pc, #132]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cb36:	4b22      	ldr	r3, [pc, #136]	; (1000cbc0 <ble_encryption_request_handler+0x13c>)
1000cb38:	4798      	blx	r3
1000cb3a:	4829      	ldr	r0, [pc, #164]	; (1000cbe0 <ble_encryption_request_handler+0x15c>)
1000cb3c:	4b22      	ldr	r3, [pc, #136]	; (1000cbc8 <ble_encryption_request_handler+0x144>)
1000cb3e:	4798      	blx	r3
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
		return AT_BLE_FAILURE;
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000cb40:	0162      	lsls	r2, r4, #5
1000cb42:	1b13      	subs	r3, r2, r4
1000cb44:	009b      	lsls	r3, r3, #2
1000cb46:	3360      	adds	r3, #96	; 0x60
1000cb48:	491b      	ldr	r1, [pc, #108]	; (1000cbb8 <ble_encryption_request_handler+0x134>)
1000cb4a:	185b      	adds	r3, r3, r1
1000cb4c:	1b12      	subs	r2, r2, r4
1000cb4e:	0092      	lsls	r2, r2, #2
1000cb50:	188a      	adds	r2, r1, r2
1000cb52:	7d11      	ldrb	r1, [r2, #20]
1000cb54:	8830      	ldrh	r0, [r6, #0]
1000cb56:	2201      	movs	r2, #1
1000cb58:	4c22      	ldr	r4, [pc, #136]	; (1000cbe4 <ble_encryption_request_handler+0x160>)
1000cb5a:	47a0      	blx	r4
1000cb5c:	1e04      	subs	r4, r0, #0
1000cb5e:	d01e      	beq.n	1000cb9e <ble_encryption_request_handler+0x11a>
1000cb60:	e015      	b.n	1000cb8e <ble_encryption_request_handler+0x10a>
	}
	
	
    if(key_found == false)
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000cb62:	4f16      	ldr	r7, [pc, #88]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cb64:	0038      	movs	r0, r7
1000cb66:	4e16      	ldr	r6, [pc, #88]	; (1000cbc0 <ble_encryption_request_handler+0x13c>)
1000cb68:	47b0      	blx	r6
1000cb6a:	481f      	ldr	r0, [pc, #124]	; (1000cbe8 <ble_encryption_request_handler+0x164>)
1000cb6c:	4d16      	ldr	r5, [pc, #88]	; (1000cbc8 <ble_encryption_request_handler+0x144>)
1000cb6e:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000cb70:	0038      	movs	r0, r7
1000cb72:	47b0      	blx	r6
1000cb74:	481d      	ldr	r0, [pc, #116]	; (1000cbec <ble_encryption_request_handler+0x168>)
1000cb76:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000cb78:	0163      	lsls	r3, r4, #5
1000cb7a:	1b1c      	subs	r4, r3, r4
1000cb7c:	00a4      	lsls	r4, r4, #2
1000cb7e:	4b0e      	ldr	r3, [pc, #56]	; (1000cbb8 <ble_encryption_request_handler+0x134>)
1000cb80:	191c      	adds	r4, r3, r4
1000cb82:	8920      	ldrh	r0, [r4, #8]
1000cb84:	2105      	movs	r1, #5
1000cb86:	4b1a      	ldr	r3, [pc, #104]	; (1000cbf0 <ble_encryption_request_handler+0x16c>)
1000cb88:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000cb8a:	24e2      	movs	r4, #226	; 0xe2
1000cb8c:	e00d      	b.n	1000cbaa <ble_encryption_request_handler+0x126>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
	{
		DBG_LOG("Encryption Request Reply Failed");
1000cb8e:	480b      	ldr	r0, [pc, #44]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cb90:	4b0b      	ldr	r3, [pc, #44]	; (1000cbc0 <ble_encryption_request_handler+0x13c>)
1000cb92:	4798      	blx	r3
1000cb94:	4817      	ldr	r0, [pc, #92]	; (1000cbf4 <ble_encryption_request_handler+0x170>)
1000cb96:	4b0c      	ldr	r3, [pc, #48]	; (1000cbc8 <ble_encryption_request_handler+0x144>)
1000cb98:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000cb9a:	2400      	movs	r4, #0
1000cb9c:	e005      	b.n	1000cbaa <ble_encryption_request_handler+0x126>
	{
		DBG_LOG("Encryption Request Reply Failed");
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
1000cb9e:	4807      	ldr	r0, [pc, #28]	; (1000cbbc <ble_encryption_request_handler+0x138>)
1000cba0:	4b07      	ldr	r3, [pc, #28]	; (1000cbc0 <ble_encryption_request_handler+0x13c>)
1000cba2:	4798      	blx	r3
1000cba4:	4814      	ldr	r0, [pc, #80]	; (1000cbf8 <ble_encryption_request_handler+0x174>)
1000cba6:	4b08      	ldr	r3, [pc, #32]	; (1000cbc8 <ble_encryption_request_handler+0x144>)
1000cba8:	4798      	blx	r3
	}
	return AT_BLE_SUCCESS;
}
1000cbaa:	0020      	movs	r0, r4
1000cbac:	bc1c      	pop	{r2, r3, r4}
1000cbae:	4691      	mov	r9, r2
1000cbb0:	469a      	mov	sl, r3
1000cbb2:	46a3      	mov	fp, r4
1000cbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cbb6:	46c0      	nop			; (mov r8, r8)
1000cbb8:	1001a278 	.word	0x1001a278
1000cbbc:	100168d4 	.word	0x100168d4
1000cbc0:	10015995 	.word	0x10015995
1000cbc4:	10017b88 	.word	0x10017b88
1000cbc8:	10015875 	.word	0x10015875
1000cbcc:	10017bb4 	.word	0x10017bb4
1000cbd0:	10017bc8 	.word	0x10017bc8
1000cbd4:	10017bdc 	.word	0x10017bdc
1000cbd8:	10017bec 	.word	0x10017bec
1000cbdc:	100156fd 	.word	0x100156fd
1000cbe0:	10017bfc 	.word	0x10017bfc
1000cbe4:	1000fd71 	.word	0x1000fd71
1000cbe8:	10017c10 	.word	0x10017c10
1000cbec:	10017c48 	.word	0x10017c48
1000cbf0:	1000f115 	.word	0x1000f115
1000cbf4:	10017ca0 	.word	0x10017ca0
1000cbf8:	10017cc0 	.word	0x10017cc0

1000cbfc <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000cbfc:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000cbfe:	2a00      	cmp	r2, #0
1000cc00:	d047      	beq.n	1000cc92 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000cc02:	2906      	cmp	r1, #6
1000cc04:	d847      	bhi.n	1000cc96 <ble_mgr_events_callback_handler+0x9a>
1000cc06:	0089      	lsls	r1, r1, #2
1000cc08:	4b28      	ldr	r3, [pc, #160]	; (1000ccac <ble_mgr_events_callback_handler+0xb0>)
1000cc0a:	585b      	ldr	r3, [r3, r1]
1000cc0c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000cc0e:	4b28      	ldr	r3, [pc, #160]	; (1000ccb0 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000cc10:	2405      	movs	r4, #5
1000cc12:	e00a      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000cc14:	4b27      	ldr	r3, [pc, #156]	; (1000ccb4 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000cc16:	2401      	movs	r4, #1
			}
			break;
1000cc18:	e007      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000cc1a:	4b27      	ldr	r3, [pc, #156]	; (1000ccb8 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000cc1c:	2405      	movs	r4, #5
			}
			break;
1000cc1e:	e004      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000cc20:	4b26      	ldr	r3, [pc, #152]	; (1000ccbc <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000cc22:	2401      	movs	r4, #1
			}
			break;
1000cc24:	e001      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000cc26:	4b26      	ldr	r3, [pc, #152]	; (1000ccc0 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000cc28:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000cc2a:	2800      	cmp	r0, #0
1000cc2c:	d116      	bne.n	1000cc5c <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cc2e:	6819      	ldr	r1, [r3, #0]
1000cc30:	2900      	cmp	r1, #0
1000cc32:	d10b      	bne.n	1000cc4c <ble_mgr_events_callback_handler+0x50>
1000cc34:	e006      	b.n	1000cc44 <ble_mgr_events_callback_handler+0x48>
1000cc36:	001d      	movs	r5, r3
1000cc38:	3304      	adds	r3, #4
1000cc3a:	1f18      	subs	r0, r3, #4
1000cc3c:	6800      	ldr	r0, [r0, #0]
1000cc3e:	2800      	cmp	r0, #0
1000cc40:	d106      	bne.n	1000cc50 <ble_mgr_events_callback_handler+0x54>
1000cc42:	e000      	b.n	1000cc46 <ble_mgr_events_callback_handler+0x4a>
1000cc44:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000cc46:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000cc48:	2101      	movs	r1, #1
						break;
1000cc4a:	e02c      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
1000cc4c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000cc4e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cc50:	3101      	adds	r1, #1
1000cc52:	b2c9      	uxtb	r1, r1
1000cc54:	42a1      	cmp	r1, r4
1000cc56:	d3ee      	bcc.n	1000cc36 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cc58:	2100      	movs	r1, #0
1000cc5a:	e024      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
1000cc5c:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000cc5e:	2801      	cmp	r0, #1
1000cc60:	d121      	bne.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cc62:	6819      	ldr	r1, [r3, #0]
1000cc64:	428a      	cmp	r2, r1
1000cc66:	d10c      	bne.n	1000cc82 <ble_mgr_events_callback_handler+0x86>
1000cc68:	e006      	b.n	1000cc78 <ble_mgr_events_callback_handler+0x7c>
1000cc6a:	001d      	movs	r5, r3
1000cc6c:	3304      	adds	r3, #4
1000cc6e:	1f18      	subs	r0, r3, #4
1000cc70:	6800      	ldr	r0, [r0, #0]
1000cc72:	4282      	cmp	r2, r0
1000cc74:	d107      	bne.n	1000cc86 <ble_mgr_events_callback_handler+0x8a>
1000cc76:	e000      	b.n	1000cc7a <ble_mgr_events_callback_handler+0x7e>
1000cc78:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000cc7a:	2300      	movs	r3, #0
1000cc7c:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000cc7e:	2101      	movs	r1, #1
						break;
1000cc80:	e011      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
1000cc82:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cc84:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cc86:	3101      	adds	r1, #1
1000cc88:	b2c9      	uxtb	r1, r1
1000cc8a:	42a1      	cmp	r1, r4
1000cc8c:	d3ed      	bcc.n	1000cc6a <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cc8e:	2100      	movs	r1, #0
1000cc90:	e009      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000cc92:	2100      	movs	r1, #0
1000cc94:	e007      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000cc96:	2100      	movs	r1, #0
1000cc98:	e005      	b.n	1000cca6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000cc9a:	4b0a      	ldr	r3, [pc, #40]	; (1000ccc4 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000cc9c:	2405      	movs	r4, #5
1000cc9e:	e7c4      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000cca0:	4b09      	ldr	r3, [pc, #36]	; (1000ccc8 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000cca2:	2401      	movs	r4, #1
1000cca4:	e7c1      	b.n	1000cc2a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000cca6:	0008      	movs	r0, r1
1000cca8:	bd30      	pop	{r4, r5, pc}
1000ccaa:	46c0      	nop			; (mov r8, r8)
1000ccac:	10017574 	.word	0x10017574
1000ccb0:	1001a264 	.word	0x1001a264
1000ccb4:	1001a260 	.word	0x1001a260
1000ccb8:	1001a4e8 	.word	0x1001a4e8
1000ccbc:	1001aa9c 	.word	0x1001aa9c
1000ccc0:	1001a4fc 	.word	0x1001a4fc
1000ccc4:	1001a510 	.word	0x1001a510
1000ccc8:	1001a558 	.word	0x1001a558

1000cccc <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000cccc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ccce:	465f      	mov	r7, fp
1000ccd0:	4656      	mov	r6, sl
1000ccd2:	464d      	mov	r5, r9
1000ccd4:	4644      	mov	r4, r8
1000ccd6:	b4f0      	push	{r4, r5, r6, r7}
1000ccd8:	b091      	sub	sp, #68	; 0x44
1000ccda:	0005      	movs	r5, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000ccdc:	2400      	movs	r4, #0
1000ccde:	4b7e      	ldr	r3, [pc, #504]	; (1000ced8 <ble_device_init+0x20c>)
1000cce0:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cce2:	2207      	movs	r2, #7
1000cce4:	2100      	movs	r1, #0
1000cce6:	487d      	ldr	r0, [pc, #500]	; (1000cedc <ble_device_init+0x210>)
1000cce8:	4e7d      	ldr	r6, [pc, #500]	; (1000cee0 <ble_device_init+0x214>)
1000ccea:	47b0      	blx	r6
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000ccec:	2212      	movs	r2, #18
1000ccee:	2100      	movs	r1, #0
1000ccf0:	487c      	ldr	r0, [pc, #496]	; (1000cee4 <ble_device_init+0x218>)
1000ccf2:	47b0      	blx	r6
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000ccf4:	4a7c      	ldr	r2, [pc, #496]	; (1000cee8 <ble_device_init+0x21c>)
1000ccf6:	2100      	movs	r1, #0
1000ccf8:	487c      	ldr	r0, [pc, #496]	; (1000ceec <ble_device_init+0x220>)
1000ccfa:	47b0      	blx	r6
#endif

	scan_response_count = 0;
1000ccfc:	4b7c      	ldr	r3, [pc, #496]	; (1000cef0 <ble_device_init+0x224>)
1000ccfe:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000cd00:	22cd      	movs	r2, #205	; 0xcd
1000cd02:	0092      	lsls	r2, r2, #2
1000cd04:	2100      	movs	r1, #0
1000cd06:	487b      	ldr	r0, [pc, #492]	; (1000cef4 <ble_device_init+0x228>)
1000cd08:	47b0      	blx	r6

	event = AT_BLE_UNDEFINED_EVENT;
1000cd0a:	4b7b      	ldr	r3, [pc, #492]	; (1000cef8 <ble_device_init+0x22c>)
1000cd0c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cd0e:	2283      	movs	r2, #131	; 0x83
1000cd10:	0092      	lsls	r2, r2, #2
1000cd12:	2100      	movs	r1, #0
1000cd14:	4879      	ldr	r0, [pc, #484]	; (1000cefc <ble_device_init+0x230>)
1000cd16:	47b0      	blx	r6
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000cd18:	4b79      	ldr	r3, [pc, #484]	; (1000cf00 <ble_device_init+0x234>)
1000cd1a:	469b      	mov	fp, r3
1000cd1c:	2380      	movs	r3, #128	; 0x80
1000cd1e:	00db      	lsls	r3, r3, #3
1000cd20:	469a      	mov	sl, r3
1000cd22:	001a      	movs	r2, r3
1000cd24:	2100      	movs	r1, #0
1000cd26:	4658      	mov	r0, fp
1000cd28:	47b0      	blx	r6
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cd2a:	4b76      	ldr	r3, [pc, #472]	; (1000cf04 <ble_device_init+0x238>)
1000cd2c:	4699      	mov	r9, r3
1000cd2e:	2380      	movs	r3, #128	; 0x80
1000cd30:	015b      	lsls	r3, r3, #5
1000cd32:	4698      	mov	r8, r3
1000cd34:	001a      	movs	r2, r3
1000cd36:	2100      	movs	r1, #0
1000cd38:	4648      	mov	r0, r9
1000cd3a:	47b0      	blx	r6

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cd3c:	4f72      	ldr	r7, [pc, #456]	; (1000cf08 <ble_device_init+0x23c>)
1000cd3e:	221c      	movs	r2, #28
1000cd40:	2100      	movs	r1, #0
1000cd42:	0038      	movs	r0, r7
1000cd44:	47b0      	blx	r6

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cd46:	465b      	mov	r3, fp
1000cd48:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cd4a:	4653      	mov	r3, sl
1000cd4c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cd4e:	464b      	mov	r3, r9
1000cd50:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cd52:	4643      	mov	r3, r8
1000cd54:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cd56:	4b6d      	ldr	r3, [pc, #436]	; (1000cf0c <ble_device_init+0x240>)
1000cd58:	601c      	str	r4, [r3, #0]
1000cd5a:	605c      	str	r4, [r3, #4]
1000cd5c:	609c      	str	r4, [r3, #8]
1000cd5e:	60dc      	str	r4, [r3, #12]
1000cd60:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cd62:	4b6b      	ldr	r3, [pc, #428]	; (1000cf10 <ble_device_init+0x244>)
1000cd64:	601c      	str	r4, [r3, #0]
1000cd66:	605c      	str	r4, [r3, #4]
1000cd68:	609c      	str	r4, [r3, #8]
1000cd6a:	60dc      	str	r4, [r3, #12]
1000cd6c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cd6e:	4b69      	ldr	r3, [pc, #420]	; (1000cf14 <ble_device_init+0x248>)
1000cd70:	601c      	str	r4, [r3, #0]
1000cd72:	605c      	str	r4, [r3, #4]
1000cd74:	609c      	str	r4, [r3, #8]
1000cd76:	60dc      	str	r4, [r3, #12]
1000cd78:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000cd7a:	4b67      	ldr	r3, [pc, #412]	; (1000cf18 <ble_device_init+0x24c>)
1000cd7c:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000cd7e:	4b67      	ldr	r3, [pc, #412]	; (1000cf1c <ble_device_init+0x250>)
1000cd80:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000cd82:	4b67      	ldr	r3, [pc, #412]	; (1000cf20 <ble_device_init+0x254>)
1000cd84:	601c      	str	r4, [r3, #0]
1000cd86:	605c      	str	r4, [r3, #4]
1000cd88:	609c      	str	r4, [r3, #8]
1000cd8a:	60dc      	str	r4, [r3, #12]
1000cd8c:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000cd8e:	4b65      	ldr	r3, [pc, #404]	; (1000cf24 <ble_device_init+0x258>)
1000cd90:	601c      	str	r4, [r3, #0]
1000cd92:	4c65      	ldr	r4, [pc, #404]	; (1000cf28 <ble_device_init+0x25c>)
1000cd94:	239b      	movs	r3, #155	; 0x9b
1000cd96:	009b      	lsls	r3, r3, #2
1000cd98:	4698      	mov	r8, r3
1000cd9a:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cd9c:	4f50      	ldr	r7, [pc, #320]	; (1000cee0 <ble_device_init+0x214>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cd9e:	2640      	movs	r6, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cda0:	227c      	movs	r2, #124	; 0x7c
1000cda2:	2100      	movs	r1, #0
1000cda4:	0020      	movs	r0, r4
1000cda6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cda8:	0023      	movs	r3, r4
1000cdaa:	335e      	adds	r3, #94	; 0x5e
1000cdac:	2200      	movs	r2, #0
1000cdae:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cdb0:	7626      	strb	r6, [r4, #24]
1000cdb2:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cdb4:	45a0      	cmp	r8, r4
1000cdb6:	d1f3      	bne.n	1000cda0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cdb8:	4b5c      	ldr	r3, [pc, #368]	; (1000cf2c <ble_device_init+0x260>)
1000cdba:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000cdbc:	4c52      	ldr	r4, [pc, #328]	; (1000cf08 <ble_device_init+0x23c>)
1000cdbe:	4b4a      	ldr	r3, [pc, #296]	; (1000cee8 <ble_device_init+0x21c>)
1000cdc0:	6063      	str	r3, [r4, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000cdc2:	4b4a      	ldr	r3, [pc, #296]	; (1000ceec <ble_device_init+0x220>)
1000cdc4:	6023      	str	r3, [r4, #0]

/* Initialize the BLE */
static void ble_init(at_ble_init_config_t * args)
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
1000cdc6:	485a      	ldr	r0, [pc, #360]	; (1000cf30 <ble_device_init+0x264>)
1000cdc8:	4b5a      	ldr	r3, [pc, #360]	; (1000cf34 <ble_device_init+0x268>)
1000cdca:	4798      	blx	r3
1000cdcc:	485a      	ldr	r0, [pc, #360]	; (1000cf38 <ble_device_init+0x26c>)
1000cdce:	4b5b      	ldr	r3, [pc, #364]	; (1000cf3c <ble_device_init+0x270>)
1000cdd0:	4798      	blx	r3
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000cdd2:	0020      	movs	r0, r4
1000cdd4:	4b5a      	ldr	r3, [pc, #360]	; (1000cf40 <ble_device_init+0x274>)
1000cdd6:	4798      	blx	r3
1000cdd8:	2800      	cmp	r0, #0
1000cdda:	d00b      	beq.n	1000cdf4 <ble_device_init+0x128>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000cddc:	4e54      	ldr	r6, [pc, #336]	; (1000cf30 <ble_device_init+0x264>)
1000cdde:	0030      	movs	r0, r6
1000cde0:	4d54      	ldr	r5, [pc, #336]	; (1000cf34 <ble_device_init+0x268>)
1000cde2:	47a8      	blx	r5
1000cde4:	4857      	ldr	r0, [pc, #348]	; (1000cf44 <ble_device_init+0x278>)
1000cde6:	4c55      	ldr	r4, [pc, #340]	; (1000cf3c <ble_device_init+0x270>)
1000cde8:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000cdea:	0030      	movs	r0, r6
1000cdec:	47a8      	blx	r5
1000cdee:	4856      	ldr	r0, [pc, #344]	; (1000cf48 <ble_device_init+0x27c>)
1000cdf0:	47a0      	blx	r4
1000cdf2:	e7fe      	b.n	1000cdf2 <ble_device_init+0x126>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000cdf4:	4a55      	ldr	r2, [pc, #340]	; (1000cf4c <ble_device_init+0x280>)
1000cdf6:	2100      	movs	r1, #0
1000cdf8:	2000      	movs	r0, #0
1000cdfa:	4c55      	ldr	r4, [pc, #340]	; (1000cf50 <ble_device_init+0x284>)
1000cdfc:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000cdfe:	4a55      	ldr	r2, [pc, #340]	; (1000cf54 <ble_device_init+0x288>)
1000ce00:	2102      	movs	r1, #2
1000ce02:	2000      	movs	r0, #0
1000ce04:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000ce06:	2109      	movs	r1, #9
1000ce08:	4853      	ldr	r0, [pc, #332]	; (1000cf58 <ble_device_init+0x28c>)
1000ce0a:	4b54      	ldr	r3, [pc, #336]	; (1000cf5c <ble_device_init+0x290>)
1000ce0c:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000ce0e:	2800      	cmp	r0, #0
1000ce10:	d005      	beq.n	1000ce1e <ble_device_init+0x152>
	{
		DBG_LOG("Device name set failed");
1000ce12:	4847      	ldr	r0, [pc, #284]	; (1000cf30 <ble_device_init+0x264>)
1000ce14:	4b47      	ldr	r3, [pc, #284]	; (1000cf34 <ble_device_init+0x268>)
1000ce16:	4798      	blx	r3
1000ce18:	4851      	ldr	r0, [pc, #324]	; (1000cf60 <ble_device_init+0x294>)
1000ce1a:	4b48      	ldr	r3, [pc, #288]	; (1000cf3c <ble_device_init+0x270>)
1000ce1c:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000ce1e:	2207      	movs	r2, #7
1000ce20:	4950      	ldr	r1, [pc, #320]	; (1000cf64 <ble_device_init+0x298>)
1000ce22:	3108      	adds	r1, #8
1000ce24:	a804      	add	r0, sp, #16
1000ce26:	4b50      	ldr	r3, [pc, #320]	; (1000cf68 <ble_device_init+0x29c>)
1000ce28:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000ce2a:	2226      	movs	r2, #38	; 0x26
1000ce2c:	2100      	movs	r1, #0
1000ce2e:	a806      	add	r0, sp, #24
1000ce30:	4b2b      	ldr	r3, [pc, #172]	; (1000cee0 <ble_device_init+0x214>)
1000ce32:	4798      	blx	r3
	
	if (addr == NULL)
1000ce34:	2d00      	cmp	r5, #0
1000ce36:	d10c      	bne.n	1000ce52 <ble_device_init+0x186>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ce38:	a804      	add	r0, sp, #16
1000ce3a:	4b4c      	ldr	r3, [pc, #304]	; (1000cf6c <ble_device_init+0x2a0>)
1000ce3c:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ce3e:	ad04      	add	r5, sp, #16
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000ce40:	2800      	cmp	r0, #0
1000ce42:	d006      	beq.n	1000ce52 <ble_device_init+0x186>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000ce44:	483a      	ldr	r0, [pc, #232]	; (1000cf30 <ble_device_init+0x264>)
1000ce46:	4b3b      	ldr	r3, [pc, #236]	; (1000cf34 <ble_device_init+0x268>)
1000ce48:	4798      	blx	r3
1000ce4a:	4849      	ldr	r0, [pc, #292]	; (1000cf70 <ble_device_init+0x2a4>)
1000ce4c:	4b3b      	ldr	r3, [pc, #236]	; (1000cf3c <ble_device_init+0x270>)
1000ce4e:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000ce50:	ad04      	add	r5, sp, #16
	}
	
	DBG_LOG_DEV("[ble_set_dev_config]\t\tBD Address:0x%02X%02X%02X%02X%02X%02X, Address Type:%d",
1000ce52:	4837      	ldr	r0, [pc, #220]	; (1000cf30 <ble_device_init+0x264>)
1000ce54:	4b37      	ldr	r3, [pc, #220]	; (1000cf34 <ble_device_init+0x268>)
1000ce56:	4798      	blx	r3
1000ce58:	792b      	ldrb	r3, [r5, #4]
1000ce5a:	796a      	ldrb	r2, [r5, #5]
1000ce5c:	79a9      	ldrb	r1, [r5, #6]
1000ce5e:	7828      	ldrb	r0, [r5, #0]
1000ce60:	9003      	str	r0, [sp, #12]
1000ce62:	7868      	ldrb	r0, [r5, #1]
1000ce64:	9002      	str	r0, [sp, #8]
1000ce66:	78a8      	ldrb	r0, [r5, #2]
1000ce68:	9001      	str	r0, [sp, #4]
1000ce6a:	78e8      	ldrb	r0, [r5, #3]
1000ce6c:	9000      	str	r0, [sp, #0]
1000ce6e:	4841      	ldr	r0, [pc, #260]	; (1000cf74 <ble_device_init+0x2a8>)
1000ce70:	4c32      	ldr	r4, [pc, #200]	; (1000cf3c <ble_device_init+0x270>)
1000ce72:	47a0      	blx	r4
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000ce74:	ac06      	add	r4, sp, #24
1000ce76:	230a      	movs	r3, #10
1000ce78:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000ce7a:	4b3f      	ldr	r3, [pc, #252]	; (1000cf78 <ble_device_init+0x2ac>)
1000ce7c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000ce7e:	2207      	movs	r2, #7
1000ce80:	0029      	movs	r1, r5
1000ce82:	a807      	add	r0, sp, #28
1000ce84:	4b38      	ldr	r3, [pc, #224]	; (1000cf68 <ble_device_init+0x29c>)
1000ce86:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000ce88:	2300      	movs	r3, #0
1000ce8a:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000ce8c:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000ce8e:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000ce90:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000ce92:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ce94:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ce96:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000ce98:	2380      	movs	r3, #128	; 0x80
1000ce9a:	009b      	lsls	r3, r3, #2
1000ce9c:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000ce9e:	0020      	movs	r0, r4
1000cea0:	4b36      	ldr	r3, [pc, #216]	; (1000cf7c <ble_device_init+0x2b0>)
1000cea2:	4798      	blx	r3
1000cea4:	2800      	cmp	r0, #0
1000cea6:	d005      	beq.n	1000ceb4 <ble_device_init+0x1e8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000cea8:	4821      	ldr	r0, [pc, #132]	; (1000cf30 <ble_device_init+0x264>)
1000ceaa:	4b22      	ldr	r3, [pc, #136]	; (1000cf34 <ble_device_init+0x268>)
1000ceac:	4798      	blx	r3
1000ceae:	4834      	ldr	r0, [pc, #208]	; (1000cf80 <ble_device_init+0x2b4>)
1000ceb0:	4b22      	ldr	r3, [pc, #136]	; (1000cf3c <ble_device_init+0x270>)
1000ceb2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000ceb4:	0028      	movs	r0, r5
1000ceb6:	4b33      	ldr	r3, [pc, #204]	; (1000cf84 <ble_device_init+0x2b8>)
1000ceb8:	4798      	blx	r3
1000ceba:	2800      	cmp	r0, #0
1000cebc:	d005      	beq.n	1000ceca <ble_device_init+0x1fe>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000cebe:	481c      	ldr	r0, [pc, #112]	; (1000cf30 <ble_device_init+0x264>)
1000cec0:	4b1c      	ldr	r3, [pc, #112]	; (1000cf34 <ble_device_init+0x268>)
1000cec2:	4798      	blx	r3
1000cec4:	4830      	ldr	r0, [pc, #192]	; (1000cf88 <ble_device_init+0x2bc>)
1000cec6:	4b1d      	ldr	r3, [pc, #116]	; (1000cf3c <ble_device_init+0x270>)
1000cec8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000ceca:	b011      	add	sp, #68	; 0x44
1000cecc:	bc3c      	pop	{r2, r3, r4, r5}
1000cece:	4690      	mov	r8, r2
1000ced0:	4699      	mov	r9, r3
1000ced2:	46a2      	mov	sl, r4
1000ced4:	46ab      	mov	fp, r5
1000ced6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ced8:	10018d78 	.word	0x10018d78
1000cedc:	10018d80 	.word	0x10018d80
1000cee0:	1001572d 	.word	0x1001572d
1000cee4:	1001a524 	.word	0x1001a524
1000cee8:	000004e2 	.word	0x000004e2
1000ceec:	10018898 	.word	0x10018898
1000cef0:	10018d7c 	.word	0x10018d7c
1000cef4:	1001a55c 	.word	0x1001a55c
1000cef8:	1001a554 	.word	0x1001a554
1000cefc:	1001a890 	.word	0x1001a890
1000cf00:	10018498 	.word	0x10018498
1000cf04:	10018d88 	.word	0x10018d88
1000cf08:	1001a538 	.word	0x1001a538
1000cf0c:	1001a4fc 	.word	0x1001a4fc
1000cf10:	1001a510 	.word	0x1001a510
1000cf14:	1001a264 	.word	0x1001a264
1000cf18:	1001a558 	.word	0x1001a558
1000cf1c:	1001a260 	.word	0x1001a260
1000cf20:	1001a4e8 	.word	0x1001a4e8
1000cf24:	1001aa9c 	.word	0x1001aa9c
1000cf28:	1001a278 	.word	0x1001a278
1000cf2c:	1001a4e4 	.word	0x1001a4e4
1000cf30:	100168d4 	.word	0x100168d4
1000cf34:	10015995 	.word	0x10015995
1000cf38:	10017cdc 	.word	0x10017cdc
1000cf3c:	10015875 	.word	0x10015875
1000cf40:	1000ed21 	.word	0x1000ed21
1000cf44:	10017d00 	.word	0x10017d00
1000cf48:	10017d2c 	.word	0x10017d2c
1000cf4c:	100180d8 	.word	0x100180d8
1000cf50:	1000cbfd 	.word	0x1000cbfd
1000cf54:	10017690 	.word	0x10017690
1000cf58:	10017d74 	.word	0x10017d74
1000cf5c:	1000ec39 	.word	0x1000ec39
1000cf60:	10017d80 	.word	0x10017d80
1000cf64:	10017680 	.word	0x10017680
1000cf68:	1001571b 	.word	0x1001571b
1000cf6c:	1000ec6d 	.word	0x1000ec6d
1000cf70:	10017d98 	.word	0x10017d98
1000cf74:	10017dc4 	.word	0x10017dc4
1000cf78:	00003a98 	.word	0x00003a98
1000cf7c:	1000ec91 	.word	0x1000ec91
1000cf80:	10017e14 	.word	0x10017e14
1000cf84:	1000eed5 	.word	0x1000eed5
1000cf88:	10017e50 	.word	0x10017e50

1000cf8c <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cf8c:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cf8e:	2200      	movs	r2, #0
1000cf90:	2100      	movs	r1, #0
1000cf92:	4b0a      	ldr	r3, [pc, #40]	; (1000cfbc <ble_send_slave_sec_request+0x30>)
1000cf94:	4798      	blx	r3
1000cf96:	1e04      	subs	r4, r0, #0
1000cf98:	d106      	bne.n	1000cfa8 <ble_send_slave_sec_request+0x1c>
		{
			DBG_LOG_DEV("Slave security request successful");
1000cf9a:	4809      	ldr	r0, [pc, #36]	; (1000cfc0 <ble_send_slave_sec_request+0x34>)
1000cf9c:	4b09      	ldr	r3, [pc, #36]	; (1000cfc4 <ble_send_slave_sec_request+0x38>)
1000cf9e:	4798      	blx	r3
1000cfa0:	4809      	ldr	r0, [pc, #36]	; (1000cfc8 <ble_send_slave_sec_request+0x3c>)
1000cfa2:	4b0a      	ldr	r3, [pc, #40]	; (1000cfcc <ble_send_slave_sec_request+0x40>)
1000cfa4:	4798      	blx	r3
			return AT_BLE_SUCCESS;
1000cfa6:	e006      	b.n	1000cfb6 <ble_send_slave_sec_request+0x2a>
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000cfa8:	4805      	ldr	r0, [pc, #20]	; (1000cfc0 <ble_send_slave_sec_request+0x34>)
1000cfaa:	4b06      	ldr	r3, [pc, #24]	; (1000cfc4 <ble_send_slave_sec_request+0x38>)
1000cfac:	4798      	blx	r3
1000cfae:	4808      	ldr	r0, [pc, #32]	; (1000cfd0 <ble_send_slave_sec_request+0x44>)
1000cfb0:	4b06      	ldr	r3, [pc, #24]	; (1000cfcc <ble_send_slave_sec_request+0x40>)
1000cfb2:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cfb4:	24e2      	movs	r4, #226	; 0xe2
}
1000cfb6:	0020      	movs	r0, r4
1000cfb8:	bd10      	pop	{r4, pc}
1000cfba:	46c0      	nop			; (mov r8, r8)
1000cfbc:	1000fcb9 	.word	0x1000fcb9
1000cfc0:	100168d4 	.word	0x100168d4
1000cfc4:	10015995 	.word	0x10015995
1000cfc8:	10017ea0 	.word	0x10017ea0
1000cfcc:	10015875 	.word	0x10015875
1000cfd0:	10017ec4 	.word	0x10017ec4

1000cfd4 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cfd4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cfd6:	465f      	mov	r7, fp
1000cfd8:	464e      	mov	r6, r9
1000cfda:	4645      	mov	r5, r8
1000cfdc:	b4e0      	push	{r5, r6, r7}
1000cfde:	b09a      	sub	sp, #104	; 0x68
1000cfe0:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000cfe2:	7a86      	ldrb	r6, [r0, #10]
1000cfe4:	2e00      	cmp	r6, #0
1000cfe6:	d000      	beq.n	1000cfea <ble_connected_state_handler+0x16>
1000cfe8:	e0cc      	b.n	1000d184 <ble_connected_state_handler+0x1b0>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000cfea:	4878      	ldr	r0, [pc, #480]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000cfec:	4f78      	ldr	r7, [pc, #480]	; (1000d1d0 <ble_connected_state_handler+0x1fc>)
1000cfee:	47b8      	blx	r7
1000cff0:	792b      	ldrb	r3, [r5, #4]
1000cff2:	796a      	ldrb	r2, [r5, #5]
1000cff4:	79a9      	ldrb	r1, [r5, #6]
1000cff6:	7868      	ldrb	r0, [r5, #1]
1000cff8:	9002      	str	r0, [sp, #8]
1000cffa:	78a8      	ldrb	r0, [r5, #2]
1000cffc:	9001      	str	r0, [sp, #4]
1000cffe:	78e8      	ldrb	r0, [r5, #3]
1000d000:	9000      	str	r0, [sp, #0]
1000d002:	4874      	ldr	r0, [pc, #464]	; (1000d1d4 <ble_connected_state_handler+0x200>)
1000d004:	4c74      	ldr	r4, [pc, #464]	; (1000d1d8 <ble_connected_state_handler+0x204>)
1000d006:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000d008:	4870      	ldr	r0, [pc, #448]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000d00a:	47b8      	blx	r7
1000d00c:	8929      	ldrh	r1, [r5, #8]
1000d00e:	4873      	ldr	r0, [pc, #460]	; (1000d1dc <ble_connected_state_handler+0x208>)
1000d010:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000d012:	2212      	movs	r2, #18
1000d014:	0029      	movs	r1, r5
1000d016:	4872      	ldr	r0, [pc, #456]	; (1000d1e0 <ble_connected_state_handler+0x20c>)
1000d018:	4b72      	ldr	r3, [pc, #456]	; (1000d1e4 <ble_connected_state_handler+0x210>)
1000d01a:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d01c:	9504      	str	r5, [sp, #16]
1000d01e:	2207      	movs	r2, #7
1000d020:	0029      	movs	r1, r5
1000d022:	4871      	ldr	r0, [pc, #452]	; (1000d1e8 <ble_connected_state_handler+0x214>)
1000d024:	4b71      	ldr	r3, [pc, #452]	; (1000d1ec <ble_connected_state_handler+0x218>)
1000d026:	4798      	blx	r3
1000d028:	2800      	cmp	r0, #0
1000d02a:	d100      	bne.n	1000d02e <ble_connected_state_handler+0x5a>
1000d02c:	e0b3      	b.n	1000d196 <ble_connected_state_handler+0x1c2>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000d02e:	782b      	ldrb	r3, [r5, #0]
1000d030:	2b02      	cmp	r3, #2
1000d032:	d000      	beq.n	1000d036 <ble_connected_state_handler+0x62>
1000d034:	e0af      	b.n	1000d196 <ble_connected_state_handler+0x1c2>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000d036:	2250      	movs	r2, #80	; 0x50
1000d038:	2100      	movs	r1, #0
1000d03a:	a806      	add	r0, sp, #24
1000d03c:	4b6c      	ldr	r3, [pc, #432]	; (1000d1f0 <ble_connected_state_handler+0x21c>)
1000d03e:	4798      	blx	r3
1000d040:	4f6c      	ldr	r7, [pc, #432]	; (1000d1f4 <ble_connected_state_handler+0x220>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000d042:	2300      	movs	r3, #0
1000d044:	e00b      	b.n	1000d05e <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d046:	1c59      	adds	r1, r3, #1
1000d048:	7814      	ldrb	r4, [r2, #0]
1000d04a:	a806      	add	r0, sp, #24
1000d04c:	54c4      	strb	r4, [r0, r3]
1000d04e:	3201      	adds	r2, #1
1000d050:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000d052:	42b3      	cmp	r3, r6
1000d054:	d1f7      	bne.n	1000d046 <ble_connected_state_handler+0x72>
1000d056:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000d058:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000d05a:	2b50      	cmp	r3, #80	; 0x50
1000d05c:	d004      	beq.n	1000d068 <ble_connected_state_handler+0x94>
1000d05e:	001e      	movs	r6, r3
1000d060:	3610      	adds	r6, #16
1000d062:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000d064:	003a      	movs	r2, r7
1000d066:	e7ee      	b.n	1000d046 <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000d068:	aa06      	add	r2, sp, #24
1000d06a:	0029      	movs	r1, r5
1000d06c:	2005      	movs	r0, #5
1000d06e:	4b62      	ldr	r3, [pc, #392]	; (1000d1f8 <ble_connected_state_handler+0x224>)
1000d070:	4798      	blx	r3
1000d072:	1e06      	subs	r6, r0, #0
1000d074:	d106      	bne.n	1000d084 <ble_connected_state_handler+0xb0>
					{
						DBG_LOG_DEV("Resolving Random address success**");
1000d076:	4855      	ldr	r0, [pc, #340]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000d078:	4b55      	ldr	r3, [pc, #340]	; (1000d1d0 <ble_connected_state_handler+0x1fc>)
1000d07a:	4798      	blx	r3
1000d07c:	485f      	ldr	r0, [pc, #380]	; (1000d1fc <ble_connected_state_handler+0x228>)
1000d07e:	4b56      	ldr	r3, [pc, #344]	; (1000d1d8 <ble_connected_state_handler+0x204>)
1000d080:	4798      	blx	r3
						return AT_BLE_SUCCESS;
1000d082:	e09c      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000d084:	4851      	ldr	r0, [pc, #324]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000d086:	4b52      	ldr	r3, [pc, #328]	; (1000d1d0 <ble_connected_state_handler+0x1fc>)
1000d088:	4798      	blx	r3
1000d08a:	485d      	ldr	r0, [pc, #372]	; (1000d200 <ble_connected_state_handler+0x22c>)
1000d08c:	4b52      	ldr	r3, [pc, #328]	; (1000d1d8 <ble_connected_state_handler+0x204>)
1000d08e:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000d090:	26e2      	movs	r6, #226	; 0xe2
1000d092:	e094      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
1000d094:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d096:	9405      	str	r4, [sp, #20]
1000d098:	2207      	movs	r2, #7
1000d09a:	9904      	ldr	r1, [sp, #16]
1000d09c:	4648      	mov	r0, r9
1000d09e:	47d8      	blx	fp
1000d0a0:	2800      	cmp	r0, #0
1000d0a2:	d109      	bne.n	1000d0b8 <ble_connected_state_handler+0xe4>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d0a4:	9a05      	ldr	r2, [sp, #20]
1000d0a6:	0153      	lsls	r3, r2, #5
1000d0a8:	1a9b      	subs	r3, r3, r2
1000d0aa:	009a      	lsls	r2, r3, #2
1000d0ac:	4b55      	ldr	r3, [pc, #340]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d0ae:	189b      	adds	r3, r3, r2
1000d0b0:	335e      	adds	r3, #94	; 0x5e
1000d0b2:	2202      	movs	r2, #2
1000d0b4:	701a      	strb	r2, [r3, #0]
1000d0b6:	e02b      	b.n	1000d110 <ble_connected_state_handler+0x13c>
1000d0b8:	3401      	adds	r4, #1
1000d0ba:	237c      	movs	r3, #124	; 0x7c
1000d0bc:	469c      	mov	ip, r3
1000d0be:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d0c0:	2c05      	cmp	r4, #5
1000d0c2:	d1e7      	bne.n	1000d094 <ble_connected_state_handler+0xc0>
1000d0c4:	e072      	b.n	1000d1ac <ble_connected_state_handler+0x1d8>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d0c6:	001c      	movs	r4, r3
1000d0c8:	7811      	ldrb	r1, [r2, #0]
1000d0ca:	2900      	cmp	r1, #0
1000d0cc:	d11a      	bne.n	1000d104 <ble_connected_state_handler+0x130>
1000d0ce:	e001      	b.n	1000d0d4 <ble_connected_state_handler+0x100>
1000d0d0:	2400      	movs	r4, #0
1000d0d2:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000d0d4:	0163      	lsls	r3, r4, #5
1000d0d6:	4699      	mov	r9, r3
1000d0d8:	1b18      	subs	r0, r3, r4
1000d0da:	0080      	lsls	r0, r0, #2
1000d0dc:	4b49      	ldr	r3, [pc, #292]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d0de:	4698      	mov	r8, r3
1000d0e0:	4440      	add	r0, r8
1000d0e2:	2212      	movs	r2, #18
1000d0e4:	0029      	movs	r1, r5
1000d0e6:	4b3f      	ldr	r3, [pc, #252]	; (1000d1e4 <ble_connected_state_handler+0x210>)
1000d0e8:	4798      	blx	r3
						ble_device_count++;
1000d0ea:	4a47      	ldr	r2, [pc, #284]	; (1000d208 <ble_connected_state_handler+0x234>)
1000d0ec:	7813      	ldrb	r3, [r2, #0]
1000d0ee:	3301      	adds	r3, #1
1000d0f0:	b2db      	uxtb	r3, r3
1000d0f2:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d0f4:	464b      	mov	r3, r9
1000d0f6:	1b1b      	subs	r3, r3, r4
1000d0f8:	009b      	lsls	r3, r3, #2
1000d0fa:	4443      	add	r3, r8
1000d0fc:	335e      	adds	r3, #94	; 0x5e
1000d0fe:	2202      	movs	r2, #2
1000d100:	701a      	strb	r2, [r3, #0]
						break;
1000d102:	e005      	b.n	1000d110 <ble_connected_state_handler+0x13c>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d104:	1c79      	adds	r1, r7, #1
1000d106:	b2cf      	uxtb	r7, r1
1000d108:	3301      	adds	r3, #1
1000d10a:	327c      	adds	r2, #124	; 0x7c
1000d10c:	2f05      	cmp	r7, #5
1000d10e:	d1da      	bne.n	1000d0c6 <ble_connected_state_handler+0xf2>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d110:	2207      	movs	r2, #7
1000d112:	0029      	movs	r1, r5
1000d114:	4834      	ldr	r0, [pc, #208]	; (1000d1e8 <ble_connected_state_handler+0x214>)
1000d116:	4b35      	ldr	r3, [pc, #212]	; (1000d1ec <ble_connected_state_handler+0x218>)
1000d118:	4798      	blx	r3
1000d11a:	2800      	cmp	r0, #0
1000d11c:	d10c      	bne.n	1000d138 <ble_connected_state_handler+0x164>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000d11e:	017b      	lsls	r3, r7, #5
1000d120:	1bdb      	subs	r3, r3, r7
1000d122:	009b      	lsls	r3, r3, #2
1000d124:	4a37      	ldr	r2, [pc, #220]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d126:	18d3      	adds	r3, r2, r3
1000d128:	2205      	movs	r2, #5
1000d12a:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d12c:	3202      	adds	r2, #2
1000d12e:	2100      	movs	r1, #0
1000d130:	482d      	ldr	r0, [pc, #180]	; (1000d1e8 <ble_connected_state_handler+0x214>)
1000d132:	4b2f      	ldr	r3, [pc, #188]	; (1000d1f0 <ble_connected_state_handler+0x21c>)
1000d134:	4798      	blx	r3
1000d136:	e042      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d138:	4b32      	ldr	r3, [pc, #200]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d13a:	4698      	mov	r8, r3
1000d13c:	017c      	lsls	r4, r7, #5
1000d13e:	1be3      	subs	r3, r4, r7
1000d140:	009b      	lsls	r3, r3, #2
1000d142:	4443      	add	r3, r8
1000d144:	220a      	movs	r2, #10
1000d146:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000d148:	3a03      	subs	r2, #3
1000d14a:	2100      	movs	r1, #0
1000d14c:	4826      	ldr	r0, [pc, #152]	; (1000d1e8 <ble_connected_state_handler+0x214>)
1000d14e:	4b28      	ldr	r3, [pc, #160]	; (1000d1f0 <ble_connected_state_handler+0x21c>)
1000d150:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d152:	1be4      	subs	r4, r4, r7
1000d154:	00a4      	lsls	r4, r4, #2
1000d156:	4444      	add	r4, r8
1000d158:	7ca3      	ldrb	r3, [r4, #18]
1000d15a:	2b0a      	cmp	r3, #10
1000d15c:	d12f      	bne.n	1000d1be <ble_connected_state_handler+0x1ea>
1000d15e:	e00d      	b.n	1000d17c <ble_connected_state_handler+0x1a8>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000d160:	481a      	ldr	r0, [pc, #104]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000d162:	4b1b      	ldr	r3, [pc, #108]	; (1000d1d0 <ble_connected_state_handler+0x1fc>)
1000d164:	4798      	blx	r3
1000d166:	4b28      	ldr	r3, [pc, #160]	; (1000d208 <ble_connected_state_handler+0x234>)
1000d168:	7819      	ldrb	r1, [r3, #0]
1000d16a:	b2c9      	uxtb	r1, r1
1000d16c:	4827      	ldr	r0, [pc, #156]	; (1000d20c <ble_connected_state_handler+0x238>)
1000d16e:	4b1a      	ldr	r3, [pc, #104]	; (1000d1d8 <ble_connected_state_handler+0x204>)
1000d170:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000d172:	8928      	ldrh	r0, [r5, #8]
1000d174:	2113      	movs	r1, #19
1000d176:	4b26      	ldr	r3, [pc, #152]	; (1000d210 <ble_connected_state_handler+0x23c>)
1000d178:	4798      	blx	r3
1000d17a:	e020      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000d17c:	8928      	ldrh	r0, [r5, #8]
1000d17e:	4b25      	ldr	r3, [pc, #148]	; (1000d214 <ble_connected_state_handler+0x240>)
1000d180:	4798      	blx	r3
1000d182:	e01c      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000d184:	4811      	ldr	r0, [pc, #68]	; (1000d1cc <ble_connected_state_handler+0x1f8>)
1000d186:	4b12      	ldr	r3, [pc, #72]	; (1000d1d0 <ble_connected_state_handler+0x1fc>)
1000d188:	4798      	blx	r3
1000d18a:	7aa9      	ldrb	r1, [r5, #10]
1000d18c:	4822      	ldr	r0, [pc, #136]	; (1000d218 <ble_connected_state_handler+0x244>)
1000d18e:	4b12      	ldr	r3, [pc, #72]	; (1000d1d8 <ble_connected_state_handler+0x204>)
1000d190:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000d192:	2600      	movs	r6, #0
1000d194:	e013      	b.n	1000d1be <ble_connected_state_handler+0x1ea>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000d196:	4b1c      	ldr	r3, [pc, #112]	; (1000d208 <ble_connected_state_handler+0x234>)
1000d198:	781b      	ldrb	r3, [r3, #0]
1000d19a:	b2db      	uxtb	r3, r3
1000d19c:	2b04      	cmp	r3, #4
1000d19e:	d8df      	bhi.n	1000d160 <ble_connected_state_handler+0x18c>
1000d1a0:	4b18      	ldr	r3, [pc, #96]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d1a2:	4699      	mov	r9, r3
1000d1a4:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000d1a6:	4b11      	ldr	r3, [pc, #68]	; (1000d1ec <ble_connected_state_handler+0x218>)
1000d1a8:	469b      	mov	fp, r3
1000d1aa:	e773      	b.n	1000d094 <ble_connected_state_handler+0xc0>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d1ac:	235e      	movs	r3, #94	; 0x5e
1000d1ae:	4a15      	ldr	r2, [pc, #84]	; (1000d204 <ble_connected_state_handler+0x230>)
1000d1b0:	5cd3      	ldrb	r3, [r2, r3]
1000d1b2:	2b00      	cmp	r3, #0
1000d1b4:	d08c      	beq.n	1000d0d0 <ble_connected_state_handler+0xfc>
1000d1b6:	4a19      	ldr	r2, [pc, #100]	; (1000d21c <ble_connected_state_handler+0x248>)
1000d1b8:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d1ba:	2701      	movs	r7, #1
1000d1bc:	e783      	b.n	1000d0c6 <ble_connected_state_handler+0xf2>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000d1be:	0030      	movs	r0, r6
1000d1c0:	b01a      	add	sp, #104	; 0x68
1000d1c2:	bc1c      	pop	{r2, r3, r4}
1000d1c4:	4690      	mov	r8, r2
1000d1c6:	4699      	mov	r9, r3
1000d1c8:	46a3      	mov	fp, r4
1000d1ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d1cc:	100168d4 	.word	0x100168d4
1000d1d0:	10015995 	.word	0x10015995
1000d1d4:	10017ee4 	.word	0x10017ee4
1000d1d8:	10015875 	.word	0x10015875
1000d1dc:	10017f28 	.word	0x10017f28
1000d1e0:	1001a524 	.word	0x1001a524
1000d1e4:	1001571b 	.word	0x1001571b
1000d1e8:	10018d80 	.word	0x10018d80
1000d1ec:	100156fd 	.word	0x100156fd
1000d1f0:	1001572d 	.word	0x1001572d
1000d1f4:	1001a2be 	.word	0x1001a2be
1000d1f8:	1000f141 	.word	0x1000f141
1000d1fc:	10017f40 	.word	0x10017f40
1000d200:	10017f64 	.word	0x10017f64
1000d204:	1001a278 	.word	0x1001a278
1000d208:	1001a4e4 	.word	0x1001a4e4
1000d20c:	10017f88 	.word	0x10017f88
1000d210:	1000f115 	.word	0x1000f115
1000d214:	1000cf8d 	.word	0x1000cf8d
1000d218:	10017fc4 	.word	0x10017fc4
1000d21c:	1001a352 	.word	0x1001a352

1000d220 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d220:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d222:	4647      	mov	r7, r8
1000d224:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d226:	7803      	ldrb	r3, [r0, #0]
1000d228:	2b00      	cmp	r3, #0
1000d22a:	d152      	bne.n	1000d2d2 <ble_resolv_rand_addr_handler+0xb2>
1000d22c:	4d3e      	ldr	r5, [pc, #248]	; (1000d328 <ble_resolv_rand_addr_handler+0x108>)
1000d22e:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d230:	1c46      	adds	r6, r0, #1
1000d232:	4f3e      	ldr	r7, [pc, #248]	; (1000d32c <ble_resolv_rand_addr_handler+0x10c>)
1000d234:	2210      	movs	r2, #16
1000d236:	0029      	movs	r1, r5
1000d238:	0030      	movs	r0, r6
1000d23a:	47b8      	blx	r7
1000d23c:	2800      	cmp	r0, #0
1000d23e:	d031      	beq.n	1000d2a4 <ble_resolv_rand_addr_handler+0x84>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d240:	3401      	adds	r4, #1
1000d242:	b2e4      	uxtb	r4, r4
1000d244:	357c      	adds	r5, #124	; 0x7c
1000d246:	2c05      	cmp	r4, #5
1000d248:	d1f4      	bne.n	1000d234 <ble_resolv_rand_addr_handler+0x14>
1000d24a:	e042      	b.n	1000d2d2 <ble_resolv_rand_addr_handler+0xb2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d24c:	001d      	movs	r5, r3
1000d24e:	7811      	ldrb	r1, [r2, #0]
1000d250:	2900      	cmp	r1, #0
1000d252:	d11b      	bne.n	1000d28c <ble_resolv_rand_addr_handler+0x6c>
1000d254:	e001      	b.n	1000d25a <ble_resolv_rand_addr_handler+0x3a>
1000d256:	2500      	movs	r5, #0
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d258:	2400      	movs	r4, #0
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d25a:	4b35      	ldr	r3, [pc, #212]	; (1000d330 <ble_resolv_rand_addr_handler+0x110>)
1000d25c:	4698      	mov	r8, r3
1000d25e:	016e      	lsls	r6, r5, #5
1000d260:	1b77      	subs	r7, r6, r5
1000d262:	00bf      	lsls	r7, r7, #2
1000d264:	4447      	add	r7, r8
1000d266:	2212      	movs	r2, #18
1000d268:	4932      	ldr	r1, [pc, #200]	; (1000d334 <ble_resolv_rand_addr_handler+0x114>)
1000d26a:	0038      	movs	r0, r7
1000d26c:	4b32      	ldr	r3, [pc, #200]	; (1000d338 <ble_resolv_rand_addr_handler+0x118>)
1000d26e:	4798      	blx	r3
				ble_device_count++;
1000d270:	4a32      	ldr	r2, [pc, #200]	; (1000d33c <ble_resolv_rand_addr_handler+0x11c>)
1000d272:	7813      	ldrb	r3, [r2, #0]
1000d274:	3301      	adds	r3, #1
1000d276:	b2db      	uxtb	r3, r3
1000d278:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d27a:	375e      	adds	r7, #94	; 0x5e
1000d27c:	2302      	movs	r3, #2
1000d27e:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d280:	1b75      	subs	r5, r6, r5
1000d282:	00ad      	lsls	r5, r5, #2
1000d284:	4445      	add	r5, r8
1000d286:	3308      	adds	r3, #8
1000d288:	74ab      	strb	r3, [r5, #18]
				peripheral_device_added = true;
				break;
1000d28a:	e031      	b.n	1000d2f0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d28c:	3401      	adds	r4, #1
1000d28e:	b2e4      	uxtb	r4, r4
1000d290:	3301      	adds	r3, #1
1000d292:	327c      	adds	r2, #124	; 0x7c
1000d294:	2c05      	cmp	r4, #5
1000d296:	d1d9      	bne.n	1000d24c <ble_resolv_rand_addr_handler+0x2c>
1000d298:	e03a      	b.n	1000d310 <ble_resolv_rand_addr_handler+0xf0>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d29a:	4b26      	ldr	r3, [pc, #152]	; (1000d334 <ble_resolv_rand_addr_handler+0x114>)
1000d29c:	8918      	ldrh	r0, [r3, #8]
1000d29e:	4b28      	ldr	r3, [pc, #160]	; (1000d340 <ble_resolv_rand_addr_handler+0x120>)
1000d2a0:	4798      	blx	r3
1000d2a2:	e03c      	b.n	1000d31e <ble_resolv_rand_addr_handler+0xfe>
		
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
1000d2a4:	4827      	ldr	r0, [pc, #156]	; (1000d344 <ble_resolv_rand_addr_handler+0x124>)
1000d2a6:	4b28      	ldr	r3, [pc, #160]	; (1000d348 <ble_resolv_rand_addr_handler+0x128>)
1000d2a8:	4798      	blx	r3
1000d2aa:	4828      	ldr	r0, [pc, #160]	; (1000d34c <ble_resolv_rand_addr_handler+0x12c>)
1000d2ac:	4b28      	ldr	r3, [pc, #160]	; (1000d350 <ble_resolv_rand_addr_handler+0x130>)
1000d2ae:	4798      	blx	r3
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d2b0:	481f      	ldr	r0, [pc, #124]	; (1000d330 <ble_resolv_rand_addr_handler+0x110>)
1000d2b2:	0163      	lsls	r3, r4, #5
1000d2b4:	1b1a      	subs	r2, r3, r4
1000d2b6:	0092      	lsls	r2, r2, #2
1000d2b8:	1882      	adds	r2, r0, r2
1000d2ba:	0011      	movs	r1, r2
1000d2bc:	315e      	adds	r1, #94	; 0x5e
1000d2be:	2502      	movs	r5, #2
1000d2c0:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d2c2:	210a      	movs	r1, #10
1000d2c4:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d2c6:	0010      	movs	r0, r2
1000d2c8:	2212      	movs	r2, #18
1000d2ca:	491a      	ldr	r1, [pc, #104]	; (1000d334 <ble_resolv_rand_addr_handler+0x114>)
1000d2cc:	4b1a      	ldr	r3, [pc, #104]	; (1000d338 <ble_resolv_rand_addr_handler+0x118>)
1000d2ce:	4798      	blx	r3
1000d2d0:	e00e      	b.n	1000d2f0 <ble_resolv_rand_addr_handler+0xd0>
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
1000d2d2:	481c      	ldr	r0, [pc, #112]	; (1000d344 <ble_resolv_rand_addr_handler+0x124>)
1000d2d4:	4b1c      	ldr	r3, [pc, #112]	; (1000d348 <ble_resolv_rand_addr_handler+0x128>)
1000d2d6:	4798      	blx	r3
1000d2d8:	481e      	ldr	r0, [pc, #120]	; (1000d354 <ble_resolv_rand_addr_handler+0x134>)
1000d2da:	4b1d      	ldr	r3, [pc, #116]	; (1000d350 <ble_resolv_rand_addr_handler+0x130>)
1000d2dc:	4798      	blx	r3
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d2de:	235e      	movs	r3, #94	; 0x5e
1000d2e0:	4a13      	ldr	r2, [pc, #76]	; (1000d330 <ble_resolv_rand_addr_handler+0x110>)
1000d2e2:	5cd3      	ldrb	r3, [r2, r3]
1000d2e4:	2b00      	cmp	r3, #0
1000d2e6:	d0b6      	beq.n	1000d256 <ble_resolv_rand_addr_handler+0x36>
1000d2e8:	4a1b      	ldr	r2, [pc, #108]	; (1000d358 <ble_resolv_rand_addr_handler+0x138>)
1000d2ea:	2301      	movs	r3, #1
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d2ec:	2401      	movs	r4, #1
1000d2ee:	e7ad      	b.n	1000d24c <ble_resolv_rand_addr_handler+0x2c>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d2f0:	4814      	ldr	r0, [pc, #80]	; (1000d344 <ble_resolv_rand_addr_handler+0x124>)
1000d2f2:	4b15      	ldr	r3, [pc, #84]	; (1000d348 <ble_resolv_rand_addr_handler+0x128>)
1000d2f4:	4798      	blx	r3
1000d2f6:	0021      	movs	r1, r4
1000d2f8:	4818      	ldr	r0, [pc, #96]	; (1000d35c <ble_resolv_rand_addr_handler+0x13c>)
1000d2fa:	4b15      	ldr	r3, [pc, #84]	; (1000d350 <ble_resolv_rand_addr_handler+0x130>)
1000d2fc:	4798      	blx	r3
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d2fe:	0163      	lsls	r3, r4, #5
1000d300:	1b1c      	subs	r4, r3, r4
1000d302:	00a4      	lsls	r4, r4, #2
1000d304:	4b0a      	ldr	r3, [pc, #40]	; (1000d330 <ble_resolv_rand_addr_handler+0x110>)
1000d306:	191c      	adds	r4, r3, r4
1000d308:	7ca3      	ldrb	r3, [r4, #18]
1000d30a:	2b0a      	cmp	r3, #10
1000d30c:	d107      	bne.n	1000d31e <ble_resolv_rand_addr_handler+0xfe>
1000d30e:	e7c4      	b.n	1000d29a <ble_resolv_rand_addr_handler+0x7a>
				peripheral_device_added = true;
				break;
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
1000d310:	480c      	ldr	r0, [pc, #48]	; (1000d344 <ble_resolv_rand_addr_handler+0x124>)
1000d312:	4b0d      	ldr	r3, [pc, #52]	; (1000d348 <ble_resolv_rand_addr_handler+0x128>)
1000d314:	4798      	blx	r3
1000d316:	2105      	movs	r1, #5
1000d318:	4810      	ldr	r0, [pc, #64]	; (1000d35c <ble_resolv_rand_addr_handler+0x13c>)
1000d31a:	4b0d      	ldr	r3, [pc, #52]	; (1000d350 <ble_resolv_rand_addr_handler+0x130>)
1000d31c:	4798      	blx	r3
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d31e:	2000      	movs	r0, #0
1000d320:	bc04      	pop	{r2}
1000d322:	4690      	mov	r8, r2
1000d324:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d326:	46c0      	nop			; (mov r8, r8)
1000d328:	1001a2be 	.word	0x1001a2be
1000d32c:	100156fd 	.word	0x100156fd
1000d330:	1001a278 	.word	0x1001a278
1000d334:	1001a524 	.word	0x1001a524
1000d338:	1001571b 	.word	0x1001571b
1000d33c:	1001a4e4 	.word	0x1001a4e4
1000d340:	1000cf8d 	.word	0x1000cf8d
1000d344:	100168d4 	.word	0x100168d4
1000d348:	10015995 	.word	0x10015995
1000d34c:	10017fec 	.word	0x10017fec
1000d350:	10015875 	.word	0x10015875
1000d354:	10018004 	.word	0x10018004
1000d358:	1001a352 	.word	0x1001a352
1000d35c:	10018020 	.word	0x10018020

1000d360 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d360:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d362:	0004      	movs	r4, r0
1000d364:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
1000d366:	4848      	ldr	r0, [pc, #288]	; (1000d488 <ble_event_manager+0x128>)
1000d368:	4b48      	ldr	r3, [pc, #288]	; (1000d48c <ble_event_manager+0x12c>)
1000d36a:	4798      	blx	r3
1000d36c:	0021      	movs	r1, r4
1000d36e:	4848      	ldr	r0, [pc, #288]	; (1000d490 <ble_event_manager+0x130>)
1000d370:	4b48      	ldr	r3, [pc, #288]	; (1000d494 <ble_event_manager+0x134>)
1000d372:	4798      	blx	r3
	switch(events)
1000d374:	2c3b      	cmp	r4, #59	; 0x3b
1000d376:	d879      	bhi.n	1000d46c <ble_event_manager+0x10c>
1000d378:	00a3      	lsls	r3, r4, #2
1000d37a:	4a47      	ldr	r2, [pc, #284]	; (1000d498 <ble_event_manager+0x138>)
1000d37c:	58d3      	ldr	r3, [r2, r3]
1000d37e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d380:	00a4      	lsls	r4, r4, #2
1000d382:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d384:	4f45      	ldr	r7, [pc, #276]	; (1000d49c <ble_event_manager+0x13c>)
1000d386:	59bb      	ldr	r3, [r7, r6]
1000d388:	2b00      	cmp	r3, #0
1000d38a:	d004      	beq.n	1000d396 <ble_event_manager+0x36>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d38c:	591b      	ldr	r3, [r3, r4]
1000d38e:	2b00      	cmp	r3, #0
1000d390:	d001      	beq.n	1000d396 <ble_event_manager+0x36>
				{
					event_cb_fn[events](event_params);		
1000d392:	0028      	movs	r0, r5
1000d394:	4798      	blx	r3
1000d396:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d398:	2e14      	cmp	r6, #20
1000d39a:	d1f4      	bne.n	1000d386 <ble_event_manager+0x26>
1000d39c:	e072      	b.n	1000d484 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d39e:	3c13      	subs	r4, #19
1000d3a0:	b2e4      	uxtb	r4, r4
1000d3a2:	00a4      	lsls	r4, r4, #2
1000d3a4:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d3a6:	4f3e      	ldr	r7, [pc, #248]	; (1000d4a0 <ble_event_manager+0x140>)
1000d3a8:	59bb      	ldr	r3, [r7, r6]
1000d3aa:	2b00      	cmp	r3, #0
1000d3ac:	d004      	beq.n	1000d3b8 <ble_event_manager+0x58>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3ae:	591b      	ldr	r3, [r3, r4]
1000d3b0:	2b00      	cmp	r3, #0
1000d3b2:	d001      	beq.n	1000d3b8 <ble_event_manager+0x58>
				{
					event_cb_fn[events](event_params);
1000d3b4:	0028      	movs	r0, r5
1000d3b6:	4798      	blx	r3
1000d3b8:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d3ba:	2e14      	cmp	r6, #20
1000d3bc:	d1f4      	bne.n	1000d3a8 <ble_event_manager+0x48>
1000d3be:	e061      	b.n	1000d484 <ble_event_manager+0x124>
	case AT_BLE_MTU_CHANGED_CMD_COMPLETE:
	case AT_BLE_CHARACTERISTIC_WRITE_CMD_CMP:
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
1000d3c0:	3c1d      	subs	r4, #29
1000d3c2:	b2e4      	uxtb	r4, r4
		DBG_LOG_DEV("GATT_Server Event:%d", events);
1000d3c4:	4830      	ldr	r0, [pc, #192]	; (1000d488 <ble_event_manager+0x128>)
1000d3c6:	4b31      	ldr	r3, [pc, #196]	; (1000d48c <ble_event_manager+0x12c>)
1000d3c8:	4798      	blx	r3
1000d3ca:	0021      	movs	r1, r4
1000d3cc:	4835      	ldr	r0, [pc, #212]	; (1000d4a4 <ble_event_manager+0x144>)
1000d3ce:	4b31      	ldr	r3, [pc, #196]	; (1000d494 <ble_event_manager+0x134>)
1000d3d0:	4798      	blx	r3
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3d2:	00a4      	lsls	r4, r4, #2
1000d3d4:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d3d6:	4f34      	ldr	r7, [pc, #208]	; (1000d4a8 <ble_event_manager+0x148>)
1000d3d8:	59bb      	ldr	r3, [r7, r6]
1000d3da:	2b00      	cmp	r3, #0
1000d3dc:	d004      	beq.n	1000d3e8 <ble_event_manager+0x88>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3de:	591b      	ldr	r3, [r3, r4]
1000d3e0:	2b00      	cmp	r3, #0
1000d3e2:	d001      	beq.n	1000d3e8 <ble_event_manager+0x88>
				{
					event_cb_fn[events](event_params);
1000d3e4:	0028      	movs	r0, r5
1000d3e6:	4798      	blx	r3
1000d3e8:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d3ea:	2e14      	cmp	r6, #20
1000d3ec:	d1f4      	bne.n	1000d3d8 <ble_event_manager+0x78>
1000d3ee:	e049      	b.n	1000d484 <ble_event_manager+0x124>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d3f0:	3c27      	subs	r4, #39	; 0x27
1000d3f2:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d3f4:	4b2d      	ldr	r3, [pc, #180]	; (1000d4ac <ble_event_manager+0x14c>)
1000d3f6:	681b      	ldr	r3, [r3, #0]
1000d3f8:	2b00      	cmp	r3, #0
1000d3fa:	d043      	beq.n	1000d484 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d3fc:	00a4      	lsls	r4, r4, #2
1000d3fe:	58e3      	ldr	r3, [r4, r3]
1000d400:	2b00      	cmp	r3, #0
1000d402:	d03f      	beq.n	1000d484 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d404:	0028      	movs	r0, r5
1000d406:	4798      	blx	r3
1000d408:	e03c      	b.n	1000d484 <ble_event_manager+0x124>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d40a:	3c2d      	subs	r4, #45	; 0x2d
1000d40c:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d40e:	4b28      	ldr	r3, [pc, #160]	; (1000d4b0 <ble_event_manager+0x150>)
1000d410:	681b      	ldr	r3, [r3, #0]
1000d412:	2b00      	cmp	r3, #0
1000d414:	d036      	beq.n	1000d484 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d416:	00a4      	lsls	r4, r4, #2
1000d418:	58e3      	ldr	r3, [r4, r3]
1000d41a:	2b00      	cmp	r3, #0
1000d41c:	d032      	beq.n	1000d484 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d41e:	0028      	movs	r0, r5
1000d420:	4798      	blx	r3
1000d422:	e02f      	b.n	1000d484 <ble_event_manager+0x124>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d424:	3c36      	subs	r4, #54	; 0x36
1000d426:	b2e4      	uxtb	r4, r4
1000d428:	00a4      	lsls	r4, r4, #2
1000d42a:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d42c:	4f21      	ldr	r7, [pc, #132]	; (1000d4b4 <ble_event_manager+0x154>)
1000d42e:	59bb      	ldr	r3, [r7, r6]
1000d430:	2b00      	cmp	r3, #0
1000d432:	d004      	beq.n	1000d43e <ble_event_manager+0xde>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d434:	591b      	ldr	r3, [r3, r4]
1000d436:	2b00      	cmp	r3, #0
1000d438:	d001      	beq.n	1000d43e <ble_event_manager+0xde>
				{
					event_cb_fn[events](event_params);
1000d43a:	0028      	movs	r0, r5
1000d43c:	4798      	blx	r3
1000d43e:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d440:	2e14      	cmp	r6, #20
1000d442:	d1f4      	bne.n	1000d42e <ble_event_manager+0xce>
1000d444:	e01e      	b.n	1000d484 <ble_event_manager+0x124>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d446:	3c38      	subs	r4, #56	; 0x38
1000d448:	b2e4      	uxtb	r4, r4
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d44a:	4b1b      	ldr	r3, [pc, #108]	; (1000d4b8 <ble_event_manager+0x158>)
1000d44c:	681b      	ldr	r3, [r3, #0]
1000d44e:	2b00      	cmp	r3, #0
1000d450:	d018      	beq.n	1000d484 <ble_event_manager+0x124>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d452:	00a4      	lsls	r4, r4, #2
1000d454:	58e3      	ldr	r3, [r4, r3]
1000d456:	2b00      	cmp	r3, #0
1000d458:	d014      	beq.n	1000d484 <ble_event_manager+0x124>
				{
					event_cb_fn[events](event_params);
1000d45a:	0028      	movs	r0, r5
1000d45c:	4798      	blx	r3
1000d45e:	e011      	b.n	1000d484 <ble_event_manager+0x124>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d460:	4b16      	ldr	r3, [pc, #88]	; (1000d4bc <ble_event_manager+0x15c>)
1000d462:	681b      	ldr	r3, [r3, #0]
1000d464:	2b00      	cmp	r3, #0
1000d466:	d00d      	beq.n	1000d484 <ble_event_manager+0x124>
			ble_user_event_cb();
1000d468:	4798      	blx	r3
1000d46a:	e00b      	b.n	1000d484 <ble_event_manager+0x124>
	}
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
1000d46c:	4e06      	ldr	r6, [pc, #24]	; (1000d488 <ble_event_manager+0x128>)
1000d46e:	0030      	movs	r0, r6
1000d470:	4d06      	ldr	r5, [pc, #24]	; (1000d48c <ble_event_manager+0x12c>)
1000d472:	47a8      	blx	r5
1000d474:	0021      	movs	r1, r4
1000d476:	4812      	ldr	r0, [pc, #72]	; (1000d4c0 <ble_event_manager+0x160>)
1000d478:	4b06      	ldr	r3, [pc, #24]	; (1000d494 <ble_event_manager+0x134>)
1000d47a:	4798      	blx	r3
		DBG_LOG("\r\n");
1000d47c:	0030      	movs	r0, r6
1000d47e:	47a8      	blx	r5
1000d480:	0030      	movs	r0, r6
1000d482:	47a8      	blx	r5
	}
	break;		
	}
}
1000d484:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d486:	46c0      	nop			; (mov r8, r8)
1000d488:	100168d4 	.word	0x100168d4
1000d48c:	10015995 	.word	0x10015995
1000d490:	10018030 	.word	0x10018030
1000d494:	10015875 	.word	0x10015875
1000d498:	10017590 	.word	0x10017590
1000d49c:	1001a4fc 	.word	0x1001a4fc
1000d4a0:	1001a510 	.word	0x1001a510
1000d4a4:	10018040 	.word	0x10018040
1000d4a8:	1001a264 	.word	0x1001a264
1000d4ac:	1001a558 	.word	0x1001a558
1000d4b0:	1001a260 	.word	0x1001a260
1000d4b4:	1001a4e8 	.word	0x1001a4e8
1000d4b8:	1001aa9c 	.word	0x1001aa9c
1000d4bc:	10018d78 	.word	0x10018d78
1000d4c0:	10018058 	.word	0x10018058

1000d4c4 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000d4c4:	b570      	push	{r4, r5, r6, lr}
1000d4c6:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d4c8:	4b0d      	ldr	r3, [pc, #52]	; (1000d500 <ble_event_task+0x3c>)
1000d4ca:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d4cc:	2b01      	cmp	r3, #1
1000d4ce:	d101      	bne.n	1000d4d4 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000d4d0:	4b0c      	ldr	r3, [pc, #48]	; (1000d504 <ble_event_task+0x40>)
1000d4d2:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000d4d4:	0022      	movs	r2, r4
1000d4d6:	490c      	ldr	r1, [pc, #48]	; (1000d508 <ble_event_task+0x44>)
1000d4d8:	480c      	ldr	r0, [pc, #48]	; (1000d50c <ble_event_task+0x48>)
1000d4da:	4b0d      	ldr	r3, [pc, #52]	; (1000d510 <ble_event_task+0x4c>)
1000d4dc:	4798      	blx	r3
1000d4de:	0004      	movs	r4, r0
1000d4e0:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d4e2:	4b07      	ldr	r3, [pc, #28]	; (1000d500 <ble_event_task+0x3c>)
1000d4e4:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d4e6:	2b01      	cmp	r3, #1
1000d4e8:	d101      	bne.n	1000d4ee <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000d4ea:	4b0a      	ldr	r3, [pc, #40]	; (1000d514 <ble_event_task+0x50>)
1000d4ec:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000d4ee:	2d00      	cmp	r5, #0
1000d4f0:	d104      	bne.n	1000d4fc <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000d4f2:	4b06      	ldr	r3, [pc, #24]	; (1000d50c <ble_event_task+0x48>)
1000d4f4:	7818      	ldrb	r0, [r3, #0]
1000d4f6:	4904      	ldr	r1, [pc, #16]	; (1000d508 <ble_event_task+0x44>)
1000d4f8:	4b07      	ldr	r3, [pc, #28]	; (1000d518 <ble_event_task+0x54>)
1000d4fa:	4798      	blx	r3
    }
    
    return status;
}
1000d4fc:	0020      	movs	r0, r4
1000d4fe:	bd70      	pop	{r4, r5, r6, pc}
1000d500:	10018d87 	.word	0x10018d87
1000d504:	1000ded5 	.word	0x1000ded5
1000d508:	1001a890 	.word	0x1001a890
1000d50c:	1001a554 	.word	0x1001a554
1000d510:	1000e4c9 	.word	0x1000e4c9
1000d514:	1000dead 	.word	0x1000dead
1000d518:	1000d361 	.word	0x1000d361

1000d51c <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d51c:	b510      	push	{r4, lr}
1000d51e:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d520:	ac08      	add	r4, sp, #32
1000d522:	2203      	movs	r2, #3
1000d524:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d526:	2302      	movs	r3, #2
1000d528:	70a3      	strb	r3, [r4, #2]
1000d52a:	3316      	adds	r3, #22
1000d52c:	70e3      	strb	r3, [r4, #3]
1000d52e:	7122      	strb	r2, [r4, #4]
1000d530:	7163      	strb	r3, [r4, #5]
1000d532:	3201      	adds	r2, #1
1000d534:	71a2      	strb	r2, [r4, #6]
1000d536:	71e3      	strb	r3, [r4, #7]
1000d538:	320b      	adds	r2, #11
1000d53a:	7222      	strb	r2, [r4, #8]
1000d53c:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d53e:	3b0f      	subs	r3, #15
1000d540:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d542:	3a05      	subs	r2, #5
1000d544:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d546:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d548:	aa0b      	add	r2, sp, #44	; 0x2c
1000d54a:	4b16      	ldr	r3, [pc, #88]	; (1000d5a4 <ble_advertisement_data_set+0x88>)
1000d54c:	cb03      	ldmia	r3!, {r0, r1}
1000d54e:	c203      	stmia	r2!, {r0, r1}
1000d550:	781b      	ldrb	r3, [r3, #0]
1000d552:	7013      	strb	r3, [r2, #0]
	#endif
	#if ((BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_SERVICE_SOLTN_128BIT_UUID_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_SERVICE_128BIT_UUID_LENGTH))) {
		uint8_t length_field_ind;
		uint8_t scan_resp_element_len;
		scn_resp[scan_resp_data_element.len] = scan_resp_data_element.len;
1000d554:	2300      	movs	r3, #0
1000d556:	466a      	mov	r2, sp
1000d558:	7013      	strb	r3, [r2, #0]
		length_field_ind = scan_resp_data_element.len;
		scan_resp_data_element.len++;
		scn_resp[scan_resp_data_element.len++] = LIST_128BIT_SERV_SOLICITATION_UUIDS;
1000d55a:	3315      	adds	r3, #21
1000d55c:	7053      	strb	r3, [r2, #1]
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	#if BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_ENABLE
    DBG_LOG_DEV("[ble_manager]\t\t\tManufacturer specific data enabled");
1000d55e:	4812      	ldr	r0, [pc, #72]	; (1000d5a8 <ble_advertisement_data_set+0x8c>)
1000d560:	4b12      	ldr	r3, [pc, #72]	; (1000d5ac <ble_advertisement_data_set+0x90>)
1000d562:	4798      	blx	r3
1000d564:	4812      	ldr	r0, [pc, #72]	; (1000d5b0 <ble_advertisement_data_set+0x94>)
1000d566:	4b13      	ldr	r3, [pc, #76]	; (1000d5b4 <ble_advertisement_data_set+0x98>)
1000d568:	4798      	blx	r3
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d56a:	2307      	movs	r3, #7
1000d56c:	466a      	mov	r2, sp
1000d56e:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d570:	33f8      	adds	r3, #248	; 0xf8
1000d572:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d574:	2206      	movs	r2, #6
1000d576:	4910      	ldr	r1, [pc, #64]	; (1000d5b8 <ble_advertisement_data_set+0x9c>)
1000d578:	466b      	mov	r3, sp
1000d57a:	1c98      	adds	r0, r3, #2
1000d57c:	4b0f      	ldr	r3, [pc, #60]	; (1000d5bc <ble_advertisement_data_set+0xa0>)
1000d57e:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d580:	2308      	movs	r3, #8
1000d582:	466a      	mov	r2, sp
1000d584:	2115      	movs	r1, #21
1000d586:	0020      	movs	r0, r4
1000d588:	4c0d      	ldr	r4, [pc, #52]	; (1000d5c0 <ble_advertisement_data_set+0xa4>)
1000d58a:	47a0      	blx	r4
1000d58c:	2800      	cmp	r0, #0
1000d58e:	d005      	beq.n	1000d59c <ble_advertisement_data_set+0x80>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d590:	4805      	ldr	r0, [pc, #20]	; (1000d5a8 <ble_advertisement_data_set+0x8c>)
1000d592:	4b06      	ldr	r3, [pc, #24]	; (1000d5ac <ble_advertisement_data_set+0x90>)
1000d594:	4798      	blx	r3
1000d596:	480b      	ldr	r0, [pc, #44]	; (1000d5c4 <ble_advertisement_data_set+0xa8>)
1000d598:	4b06      	ldr	r3, [pc, #24]	; (1000d5b4 <ble_advertisement_data_set+0x98>)
1000d59a:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d59c:	2000      	movs	r0, #0
1000d59e:	b010      	add	sp, #64	; 0x40
1000d5a0:	bd10      	pop	{r4, pc}
1000d5a2:	46c0      	nop			; (mov r8, r8)
1000d5a4:	10017d74 	.word	0x10017d74
1000d5a8:	100168d4 	.word	0x100168d4
1000d5ac:	10015995 	.word	0x10015995
1000d5b0:	10018078 	.word	0x10018078
1000d5b4:	10015875 	.word	0x10015875
1000d5b8:	100180ac 	.word	0x100180ac
1000d5bc:	1001571b 	.word	0x1001571b
1000d5c0:	1000ef29 	.word	0x1000ef29
1000d5c4:	100180b4 	.word	0x100180b4

1000d5c8 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d5c8:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d5ca:	4b0e      	ldr	r3, [pc, #56]	; (1000d604 <uart_read_complete_callback+0x3c>)
1000d5cc:	781b      	ldrb	r3, [r3, #0]
1000d5ce:	2b01      	cmp	r3, #1
1000d5d0:	d10b      	bne.n	1000d5ea <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d5d2:	2202      	movs	r2, #2
1000d5d4:	4b0b      	ldr	r3, [pc, #44]	; (1000d604 <uart_read_complete_callback+0x3c>)
1000d5d6:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d5d8:	4b0b      	ldr	r3, [pc, #44]	; (1000d608 <uart_read_complete_callback+0x40>)
1000d5da:	681b      	ldr	r3, [r3, #0]
1000d5dc:	2b00      	cmp	r3, #0
1000d5de:	d110      	bne.n	1000d602 <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d5e0:	2102      	movs	r1, #2
1000d5e2:	480a      	ldr	r0, [pc, #40]	; (1000d60c <uart_read_complete_callback+0x44>)
1000d5e4:	4b0a      	ldr	r3, [pc, #40]	; (1000d610 <uart_read_complete_callback+0x48>)
1000d5e6:	4798      	blx	r3
1000d5e8:	e00b      	b.n	1000d602 <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d5ea:	4b07      	ldr	r3, [pc, #28]	; (1000d608 <uart_read_complete_callback+0x40>)
1000d5ec:	681b      	ldr	r3, [r3, #0]
1000d5ee:	2b00      	cmp	r3, #0
1000d5f0:	d007      	beq.n	1000d602 <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d5f2:	4c08      	ldr	r4, [pc, #32]	; (1000d614 <uart_read_complete_callback+0x4c>)
1000d5f4:	7820      	ldrb	r0, [r4, #0]
1000d5f6:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d5f8:	2201      	movs	r2, #1
1000d5fa:	0021      	movs	r1, r4
1000d5fc:	4803      	ldr	r0, [pc, #12]	; (1000d60c <uart_read_complete_callback+0x44>)
1000d5fe:	4b06      	ldr	r3, [pc, #24]	; (1000d618 <uart_read_complete_callback+0x50>)
1000d600:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d602:	bd10      	pop	{r4, pc}
1000d604:	10019d8c 	.word	0x10019d8c
1000d608:	10019d94 	.word	0x10019d94
1000d60c:	1001aaa0 	.word	0x1001aaa0
1000d610:	1000bff9 	.word	0x1000bff9
1000d614:	10019d90 	.word	0x10019d90
1000d618:	1000bf9d 	.word	0x1000bf9d

1000d61c <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d61c:	b570      	push	{r4, r5, r6, lr}
1000d61e:	0006      	movs	r6, r0
1000d620:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d622:	4c03      	ldr	r4, [pc, #12]	; (1000d630 <usart_serial_getchar+0x14>)
1000d624:	0029      	movs	r1, r5
1000d626:	0030      	movs	r0, r6
1000d628:	47a0      	blx	r4
1000d62a:	2800      	cmp	r0, #0
1000d62c:	d1fa      	bne.n	1000d624 <usart_serial_getchar+0x8>
}
1000d62e:	bd70      	pop	{r4, r5, r6, pc}
1000d630:	1000bf89 	.word	0x1000bf89

1000d634 <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d634:	b570      	push	{r4, r5, r6, lr}
1000d636:	0006      	movs	r6, r0
1000d638:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d63a:	4c03      	ldr	r4, [pc, #12]	; (1000d648 <usart_serial_putchar+0x14>)
1000d63c:	0029      	movs	r1, r5
1000d63e:	0030      	movs	r0, r6
1000d640:	47a0      	blx	r4
1000d642:	2800      	cmp	r0, #0
1000d644:	d1fa      	bne.n	1000d63c <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d646:	bd70      	pop	{r4, r5, r6, pc}
1000d648:	1000bf79 	.word	0x1000bf79

1000d64c <serial_console_init>:

void serial_console_init(void)
{
1000d64c:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d64e:	2100      	movs	r1, #0
1000d650:	2000      	movs	r0, #0
1000d652:	4b19      	ldr	r3, [pc, #100]	; (1000d6b8 <serial_console_init+0x6c>)
1000d654:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d656:	4c19      	ldr	r4, [pc, #100]	; (1000d6bc <serial_console_init+0x70>)
1000d658:	0020      	movs	r0, r4
1000d65a:	4b19      	ldr	r3, [pc, #100]	; (1000d6c0 <serial_console_init+0x74>)
1000d65c:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d65e:	23e1      	movs	r3, #225	; 0xe1
1000d660:	025b      	lsls	r3, r3, #9
1000d662:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d664:	2302      	movs	r3, #2
1000d666:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d668:	2203      	movs	r2, #3
1000d66a:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d66c:	3201      	adds	r2, #1
1000d66e:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d670:	3201      	adds	r2, #1
1000d672:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d674:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d676:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d678:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d67a:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d67c:	4d11      	ldr	r5, [pc, #68]	; (1000d6c4 <serial_console_init+0x78>)
1000d67e:	4b12      	ldr	r3, [pc, #72]	; (1000d6c8 <serial_console_init+0x7c>)
1000d680:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d682:	4a12      	ldr	r2, [pc, #72]	; (1000d6cc <serial_console_init+0x80>)
1000d684:	4b12      	ldr	r3, [pc, #72]	; (1000d6d0 <serial_console_init+0x84>)
1000d686:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d688:	4a12      	ldr	r2, [pc, #72]	; (1000d6d4 <serial_console_init+0x88>)
1000d68a:	4b13      	ldr	r3, [pc, #76]	; (1000d6d8 <serial_console_init+0x8c>)
1000d68c:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d68e:	0022      	movs	r2, r4
1000d690:	4912      	ldr	r1, [pc, #72]	; (1000d6dc <serial_console_init+0x90>)
1000d692:	0028      	movs	r0, r5
1000d694:	4b12      	ldr	r3, [pc, #72]	; (1000d6e0 <serial_console_init+0x94>)
1000d696:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d698:	4e12      	ldr	r6, [pc, #72]	; (1000d6e4 <serial_console_init+0x98>)
1000d69a:	6833      	ldr	r3, [r6, #0]
1000d69c:	6898      	ldr	r0, [r3, #8]
1000d69e:	2100      	movs	r1, #0
1000d6a0:	4c11      	ldr	r4, [pc, #68]	; (1000d6e8 <serial_console_init+0x9c>)
1000d6a2:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d6a4:	6833      	ldr	r3, [r6, #0]
1000d6a6:	6858      	ldr	r0, [r3, #4]
1000d6a8:	2100      	movs	r1, #0
1000d6aa:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d6ac:	2202      	movs	r2, #2
1000d6ae:	490f      	ldr	r1, [pc, #60]	; (1000d6ec <serial_console_init+0xa0>)
1000d6b0:	0028      	movs	r0, r5
1000d6b2:	4b0f      	ldr	r3, [pc, #60]	; (1000d6f0 <serial_console_init+0xa4>)
1000d6b4:	4798      	blx	r3
}
1000d6b6:	bd70      	pop	{r4, r5, r6, pc}
1000d6b8:	1000af99 	.word	0x1000af99
1000d6bc:	1001aac4 	.word	0x1001aac4
1000d6c0:	1000bd91 	.word	0x1000bd91
1000d6c4:	1001aaa0 	.word	0x1001aaa0
1000d6c8:	1001a25c 	.word	0x1001a25c
1000d6cc:	1000d635 	.word	0x1000d635
1000d6d0:	1001a258 	.word	0x1001a258
1000d6d4:	1000d61d 	.word	0x1000d61d
1000d6d8:	1001a254 	.word	0x1001a254
1000d6dc:	40004000 	.word	0x40004000
1000d6e0:	1000bdbd 	.word	0x1000bdbd
1000d6e4:	10018468 	.word	0x10018468
1000d6e8:	10015a45 	.word	0x10015a45
1000d6ec:	1000d5c9 	.word	0x1000d5c9
1000d6f0:	1000bfc5 	.word	0x1000bfc5

1000d6f4 <_time_start>:

void _time_start(unsigned int sec)
{
1000d6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6f6:	b083      	sub	sp, #12
1000d6f8:	0005      	movs	r5, r0
	system_clock_get_value();
1000d6fa:	4c0d      	ldr	r4, [pc, #52]	; (1000d730 <_time_start+0x3c>)
1000d6fc:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d6fe:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d700:	4f0c      	ldr	r7, [pc, #48]	; (1000d734 <_time_start+0x40>)
1000d702:	47b8      	blx	r7
1000d704:	4e0c      	ldr	r6, [pc, #48]	; (1000d738 <_time_start+0x44>)
1000d706:	4a0d      	ldr	r2, [pc, #52]	; (1000d73c <_time_start+0x48>)
1000d708:	4b0d      	ldr	r3, [pc, #52]	; (1000d740 <_time_start+0x4c>)
1000d70a:	47b0      	blx	r6
1000d70c:	9000      	str	r0, [sp, #0]
1000d70e:	9101      	str	r1, [sp, #4]
1000d710:	20fa      	movs	r0, #250	; 0xfa
1000d712:	0080      	lsls	r0, r0, #2
1000d714:	4368      	muls	r0, r5
1000d716:	47b8      	blx	r7
1000d718:	0002      	movs	r2, r0
1000d71a:	000b      	movs	r3, r1
1000d71c:	9800      	ldr	r0, [sp, #0]
1000d71e:	9901      	ldr	r1, [sp, #4]
1000d720:	47b0      	blx	r6
1000d722:	4b08      	ldr	r3, [pc, #32]	; (1000d744 <_time_start+0x50>)
1000d724:	4798      	blx	r3
1000d726:	4b08      	ldr	r3, [pc, #32]	; (1000d748 <_time_start+0x54>)
1000d728:	6018      	str	r0, [r3, #0]
}
1000d72a:	b003      	add	sp, #12
1000d72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d72e:	46c0      	nop			; (mov r8, r8)
1000d730:	1000b01d 	.word	0x1000b01d
1000d734:	10015425 	.word	0x10015425
1000d738:	10014759 	.word	0x10014759
1000d73c:	19feaec7 	.word	0x19feaec7
1000d740:	3f09d8ef 	.word	0x3f09d8ef
1000d744:	10012e65 	.word	0x10012e65
1000d748:	10019d88 	.word	0x10019d88

1000d74c <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d74c:	4b02      	ldr	r3, [pc, #8]	; (1000d758 <_time_done+0xc>)
1000d74e:	681a      	ldr	r2, [r3, #0]
1000d750:	1e50      	subs	r0, r2, #1
1000d752:	6018      	str	r0, [r3, #0]
}
1000d754:	4770      	bx	lr
1000d756:	46c0      	nop			; (mov r8, r8)
1000d758:	10019d88 	.word	0x10019d88

1000d75c <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d75c:	b570      	push	{r4, r5, r6, lr}
1000d75e:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d760:	2201      	movs	r2, #1
1000d762:	4b11      	ldr	r3, [pc, #68]	; (1000d7a8 <getchar_b11_timeout+0x4c>)
1000d764:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d766:	4b11      	ldr	r3, [pc, #68]	; (1000d7ac <getchar_b11_timeout+0x50>)
1000d768:	681b      	ldr	r3, [r3, #0]
1000d76a:	2b00      	cmp	r3, #0
1000d76c:	d103      	bne.n	1000d776 <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d76e:	2102      	movs	r1, #2
1000d770:	480f      	ldr	r0, [pc, #60]	; (1000d7b0 <getchar_b11_timeout+0x54>)
1000d772:	4b10      	ldr	r3, [pc, #64]	; (1000d7b4 <getchar_b11_timeout+0x58>)
1000d774:	4798      	blx	r3

	_time_start(sec);
1000d776:	0020      	movs	r0, r4
1000d778:	4b0f      	ldr	r3, [pc, #60]	; (1000d7b8 <getchar_b11_timeout+0x5c>)
1000d77a:	4798      	blx	r3
	
	string_input[0] = 0;
1000d77c:	490f      	ldr	r1, [pc, #60]	; (1000d7bc <getchar_b11_timeout+0x60>)
1000d77e:	2300      	movs	r3, #0
1000d780:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d782:	2201      	movs	r2, #1
1000d784:	480a      	ldr	r0, [pc, #40]	; (1000d7b0 <getchar_b11_timeout+0x54>)
1000d786:	4b0e      	ldr	r3, [pc, #56]	; (1000d7c0 <getchar_b11_timeout+0x64>)
1000d788:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d78a:	4c07      	ldr	r4, [pc, #28]	; (1000d7a8 <getchar_b11_timeout+0x4c>)
1000d78c:	4d0d      	ldr	r5, [pc, #52]	; (1000d7c4 <getchar_b11_timeout+0x68>)
1000d78e:	7823      	ldrb	r3, [r4, #0]
1000d790:	2b02      	cmp	r3, #2
1000d792:	d002      	beq.n	1000d79a <getchar_b11_timeout+0x3e>
1000d794:	47a8      	blx	r5
1000d796:	2800      	cmp	r0, #0
1000d798:	d1f9      	bne.n	1000d78e <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d79a:	2200      	movs	r2, #0
1000d79c:	4b02      	ldr	r3, [pc, #8]	; (1000d7a8 <getchar_b11_timeout+0x4c>)
1000d79e:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d7a0:	4b06      	ldr	r3, [pc, #24]	; (1000d7bc <getchar_b11_timeout+0x60>)
1000d7a2:	7818      	ldrb	r0, [r3, #0]
}
1000d7a4:	bd70      	pop	{r4, r5, r6, pc}
1000d7a6:	46c0      	nop			; (mov r8, r8)
1000d7a8:	10019d8c 	.word	0x10019d8c
1000d7ac:	10019d94 	.word	0x10019d94
1000d7b0:	1001aaa0 	.word	0x1001aaa0
1000d7b4:	1000bfd9 	.word	0x1000bfd9
1000d7b8:	1000d6f5 	.word	0x1000d6f5
1000d7bc:	10019d90 	.word	0x10019d90
1000d7c0:	1000bf9d 	.word	0x1000bf9d
1000d7c4:	1000d74d 	.word	0x1000d74d

1000d7c8 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d7c8:	4b02      	ldr	r3, [pc, #8]	; (1000d7d4 <platform_event_free+0xc>)
1000d7ca:	681a      	ldr	r2, [r3, #0]
1000d7cc:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d7ce:	6018      	str	r0, [r3, #0]
}
1000d7d0:	4770      	bx	lr
1000d7d2:	46c0      	nop			; (mov r8, r8)
1000d7d4:	10019d9c 	.word	0x10019d9c

1000d7d8 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d7d8:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d7da:	4b0b      	ldr	r3, [pc, #44]	; (1000d808 <platform_event_post+0x30>)
1000d7dc:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d7de:	2c00      	cmp	r4, #0
1000d7e0:	d011      	beq.n	1000d806 <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d7e2:	6825      	ldr	r5, [r4, #0]
1000d7e4:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d7e6:	2300      	movs	r3, #0
1000d7e8:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d7ea:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d7ec:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d7ee:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d7f0:	4b06      	ldr	r3, [pc, #24]	; (1000d80c <platform_event_post+0x34>)
1000d7f2:	681a      	ldr	r2, [r3, #0]
1000d7f4:	2a00      	cmp	r2, #0
1000d7f6:	d102      	bne.n	1000d7fe <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d7f8:	601c      	str	r4, [r3, #0]
1000d7fa:	e004      	b.n	1000d806 <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d7fc:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d7fe:	6813      	ldr	r3, [r2, #0]
1000d800:	2b00      	cmp	r3, #0
1000d802:	d1fb      	bne.n	1000d7fc <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d804:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d806:	bd30      	pop	{r4, r5, pc}
1000d808:	10019d9c 	.word	0x10019d9c
1000d80c:	10019d98 	.word	0x10019d98

1000d810 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d810:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d812:	2300      	movs	r3, #0
1000d814:	4a06      	ldr	r2, [pc, #24]	; (1000d830 <platform_event_init+0x20>)
1000d816:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d818:	4a06      	ldr	r2, [pc, #24]	; (1000d834 <platform_event_init+0x24>)
1000d81a:	6013      	str	r3, [r2, #0]
1000d81c:	4c06      	ldr	r4, [pc, #24]	; (1000d838 <platform_event_init+0x28>)
1000d81e:	0026      	movs	r6, r4
1000d820:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d822:	4d06      	ldr	r5, [pc, #24]	; (1000d83c <platform_event_init+0x2c>)
1000d824:	0020      	movs	r0, r4
1000d826:	47a8      	blx	r5
1000d828:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d82a:	42b4      	cmp	r4, r6
1000d82c:	d1fa      	bne.n	1000d824 <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d82e:	bd70      	pop	{r4, r5, r6, pc}
1000d830:	10019d9c 	.word	0x10019d9c
1000d834:	10019d98 	.word	0x10019d98
1000d838:	10019da0 	.word	0x10019da0
1000d83c:	1000d7c9 	.word	0x1000d7c9

1000d840 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d840:	b570      	push	{r4, r5, r6, lr}
1000d842:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d844:	4b13      	ldr	r3, [pc, #76]	; (1000d894 <at_ke_msg_send+0x54>)
1000d846:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d848:	4b13      	ldr	r3, [pc, #76]	; (1000d898 <at_ke_msg_send+0x58>)
1000d84a:	681b      	ldr	r3, [r3, #0]
1000d84c:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d84e:	2c0c      	cmp	r4, #12
1000d850:	d01f      	beq.n	1000d892 <at_ke_msg_send+0x52>
1000d852:	3c0c      	subs	r4, #12
1000d854:	88e3      	ldrh	r3, [r4, #6]
1000d856:	2b05      	cmp	r3, #5
1000d858:	d01b      	beq.n	1000d892 <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d85a:	07eb      	lsls	r3, r5, #31
1000d85c:	d414      	bmi.n	1000d888 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d85e:	4b0f      	ldr	r3, [pc, #60]	; (1000d89c <at_ke_msg_send+0x5c>)
1000d860:	681b      	ldr	r3, [r3, #0]
1000d862:	2002      	movs	r0, #2
1000d864:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d866:	4b0e      	ldr	r3, [pc, #56]	; (1000d8a0 <at_ke_msg_send+0x60>)
1000d868:	681b      	ldr	r3, [r3, #0]
1000d86a:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d86c:	4c0d      	ldr	r4, [pc, #52]	; (1000d8a4 <at_ke_msg_send+0x64>)
1000d86e:	2003      	movs	r0, #3
1000d870:	6823      	ldr	r3, [r4, #0]
1000d872:	4798      	blx	r3
1000d874:	2800      	cmp	r0, #0
1000d876:	d1fa      	bne.n	1000d86e <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d878:	4b0b      	ldr	r3, [pc, #44]	; (1000d8a8 <at_ke_msg_send+0x68>)
1000d87a:	681b      	ldr	r3, [r3, #0]
1000d87c:	3002      	adds	r0, #2
1000d87e:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d880:	2201      	movs	r2, #1
1000d882:	4b0a      	ldr	r3, [pc, #40]	; (1000d8ac <at_ke_msg_send+0x6c>)
1000d884:	601a      	str	r2, [r3, #0]
1000d886:	e004      	b.n	1000d892 <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d888:	4b09      	ldr	r3, [pc, #36]	; (1000d8b0 <at_ke_msg_send+0x70>)
1000d88a:	6818      	ldr	r0, [r3, #0]
1000d88c:	4b09      	ldr	r3, [pc, #36]	; (1000d8b4 <at_ke_msg_send+0x74>)
1000d88e:	681b      	ldr	r3, [r3, #0]
1000d890:	4798      	blx	r3
		}
	}
}
1000d892:	bd70      	pop	{r4, r5, r6, pc}
1000d894:	4000b1ec 	.word	0x4000b1ec
1000d898:	10019e48 	.word	0x10019e48
1000d89c:	10019e40 	.word	0x10019e40
1000d8a0:	10019e54 	.word	0x10019e54
1000d8a4:	10019e28 	.word	0x10019e28
1000d8a8:	10019e30 	.word	0x10019e30
1000d8ac:	4000b020 	.word	0x4000b020
1000d8b0:	10019e34 	.word	0x10019e34
1000d8b4:	10019e24 	.word	0x10019e24

1000d8b8 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d8b8:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d8ba:	4b06      	ldr	r3, [pc, #24]	; (1000d8d4 <samb11_plf_resume_callback+0x1c>)
1000d8bc:	4a06      	ldr	r2, [pc, #24]	; (1000d8d8 <samb11_plf_resume_callback+0x20>)
1000d8be:	6819      	ldr	r1, [r3, #0]
1000d8c0:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d8c2:	685a      	ldr	r2, [r3, #4]
1000d8c4:	4b05      	ldr	r3, [pc, #20]	; (1000d8dc <samb11_plf_resume_callback+0x24>)
1000d8c6:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d8c8:	4b05      	ldr	r3, [pc, #20]	; (1000d8e0 <samb11_plf_resume_callback+0x28>)
1000d8ca:	681b      	ldr	r3, [r3, #0]
1000d8cc:	2b00      	cmp	r3, #0
1000d8ce:	d000      	beq.n	1000d8d2 <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d8d0:	4798      	blx	r3
	}
}
1000d8d2:	bd10      	pop	{r4, pc}
1000d8d4:	1001aaec 	.word	0x1001aaec
1000d8d8:	4000b00c 	.word	0x4000b00c
1000d8dc:	4000b010 	.word	0x4000b010
1000d8e0:	1001adc8 	.word	0x1001adc8

1000d8e4 <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d8e4:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d8e6:	2232      	movs	r2, #50	; 0x32
1000d8e8:	2100      	movs	r1, #0
1000d8ea:	480d      	ldr	r0, [pc, #52]	; (1000d920 <init_port_list+0x3c>)
1000d8ec:	4b0d      	ldr	r3, [pc, #52]	; (1000d924 <init_port_list+0x40>)
1000d8ee:	4798      	blx	r3
1000d8f0:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d8f2:	480b      	ldr	r0, [pc, #44]	; (1000d920 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d8f4:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d8f6:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d8f8:	004a      	lsls	r2, r1, #1
1000d8fa:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d8fc:	1882      	adds	r2, r0, r2
1000d8fe:	7853      	ldrb	r3, [r2, #1]
1000d900:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d902:	b2db      	uxtb	r3, r3
1000d904:	43a3      	bics	r3, r4
1000d906:	7053      	strb	r3, [r2, #1]
1000d908:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d90a:	2919      	cmp	r1, #25
1000d90c:	d1f4      	bne.n	1000d8f8 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d90e:	4b04      	ldr	r3, [pc, #16]	; (1000d920 <init_port_list+0x3c>)
1000d910:	785a      	ldrb	r2, [r3, #1]
1000d912:	3918      	subs	r1, #24
1000d914:	438a      	bics	r2, r1
1000d916:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d918:	78da      	ldrb	r2, [r3, #3]
1000d91a:	438a      	bics	r2, r1
1000d91c:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d91e:	bd70      	pop	{r4, r5, r6, pc}
1000d920:	1001ab08 	.word	0x1001ab08
1000d924:	1001572d 	.word	0x1001572d

1000d928 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d928:	4a06      	ldr	r2, [pc, #24]	; (1000d944 <init_clock+0x1c>)
1000d92a:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d92c:	4b06      	ldr	r3, [pc, #24]	; (1000d948 <init_clock+0x20>)
1000d92e:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d930:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d932:	4a06      	ldr	r2, [pc, #24]	; (1000d94c <init_clock+0x24>)
1000d934:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d936:	4906      	ldr	r1, [pc, #24]	; (1000d950 <init_clock+0x28>)
1000d938:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d93a:	4b06      	ldr	r3, [pc, #24]	; (1000d954 <init_clock+0x2c>)
1000d93c:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d93e:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d940:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d942:	4770      	bx	lr
1000d944:	4000b00c 	.word	0x4000b00c
1000d948:	fffe0fd3 	.word	0xfffe0fd3
1000d94c:	1001aaec 	.word	0x1001aaec
1000d950:	4000b010 	.word	0x4000b010
1000d954:	ffffe7c0 	.word	0xffffe7c0

1000d958 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d958:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d95a:	4657      	mov	r7, sl
1000d95c:	464e      	mov	r6, r9
1000d95e:	4645      	mov	r5, r8
1000d960:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d962:	4b4f      	ldr	r3, [pc, #316]	; (1000daa0 <platform_driver_init+0x148>)
1000d964:	781b      	ldrb	r3, [r3, #0]
1000d966:	2b00      	cmp	r3, #0
1000d968:	d004      	beq.n	1000d974 <platform_driver_init+0x1c>
1000d96a:	4b4d      	ldr	r3, [pc, #308]	; (1000daa0 <platform_driver_init+0x148>)
1000d96c:	781b      	ldrb	r3, [r3, #0]
1000d96e:	2b01      	cmp	r3, #1
1000d970:	d100      	bne.n	1000d974 <platform_driver_init+0x1c>
1000d972:	e08c      	b.n	1000da8e <platform_driver_init+0x136>
		init_port_list();
1000d974:	4b4b      	ldr	r3, [pc, #300]	; (1000daa4 <platform_driver_init+0x14c>)
1000d976:	4798      	blx	r3
		init_clock();
1000d978:	4b4b      	ldr	r3, [pc, #300]	; (1000daa8 <platform_driver_init+0x150>)
1000d97a:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d97c:	2300      	movs	r3, #0
1000d97e:	4698      	mov	r8, r3
1000d980:	4b4a      	ldr	r3, [pc, #296]	; (1000daac <platform_driver_init+0x154>)
1000d982:	4642      	mov	r2, r8
1000d984:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d986:	4c4a      	ldr	r4, [pc, #296]	; (1000dab0 <platform_driver_init+0x158>)
1000d988:	2380      	movs	r3, #128	; 0x80
1000d98a:	2280      	movs	r2, #128	; 0x80
1000d98c:	0412      	lsls	r2, r2, #16
1000d98e:	4692      	mov	sl, r2
1000d990:	50e2      	str	r2, [r4, r3]
1000d992:	2280      	movs	r2, #128	; 0x80
1000d994:	0452      	lsls	r2, r2, #17
1000d996:	4691      	mov	r9, r2
1000d998:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d99a:	4d46      	ldr	r5, [pc, #280]	; (1000dab4 <platform_driver_init+0x15c>)
1000d99c:	4b46      	ldr	r3, [pc, #280]	; (1000dab8 <platform_driver_init+0x160>)
1000d99e:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d9a0:	4b46      	ldr	r3, [pc, #280]	; (1000dabc <platform_driver_init+0x164>)
1000d9a2:	4a47      	ldr	r2, [pc, #284]	; (1000dac0 <platform_driver_init+0x168>)
1000d9a4:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d9a6:	4947      	ldr	r1, [pc, #284]	; (1000dac4 <platform_driver_init+0x16c>)
1000d9a8:	4a47      	ldr	r2, [pc, #284]	; (1000dac8 <platform_driver_init+0x170>)
1000d9aa:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d9ac:	4a47      	ldr	r2, [pc, #284]	; (1000dacc <platform_driver_init+0x174>)
1000d9ae:	6811      	ldr	r1, [r2, #0]
1000d9b0:	4a47      	ldr	r2, [pc, #284]	; (1000dad0 <platform_driver_init+0x178>)
1000d9b2:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d9b4:	4a47      	ldr	r2, [pc, #284]	; (1000dad4 <platform_driver_init+0x17c>)
1000d9b6:	6811      	ldr	r1, [r2, #0]
1000d9b8:	4a47      	ldr	r2, [pc, #284]	; (1000dad8 <platform_driver_init+0x180>)
1000d9ba:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d9bc:	4947      	ldr	r1, [pc, #284]	; (1000dadc <platform_driver_init+0x184>)
1000d9be:	4a48      	ldr	r2, [pc, #288]	; (1000dae0 <platform_driver_init+0x188>)
1000d9c0:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d9c2:	4948      	ldr	r1, [pc, #288]	; (1000dae4 <platform_driver_init+0x18c>)
1000d9c4:	4a48      	ldr	r2, [pc, #288]	; (1000dae8 <platform_driver_init+0x190>)
1000d9c6:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d9c8:	4f48      	ldr	r7, [pc, #288]	; (1000daec <platform_driver_init+0x194>)
1000d9ca:	4a49      	ldr	r2, [pc, #292]	; (1000daf0 <platform_driver_init+0x198>)
1000d9cc:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d9ce:	4949      	ldr	r1, [pc, #292]	; (1000daf4 <platform_driver_init+0x19c>)
1000d9d0:	4a49      	ldr	r2, [pc, #292]	; (1000daf8 <platform_driver_init+0x1a0>)
1000d9d2:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d9d4:	4949      	ldr	r1, [pc, #292]	; (1000dafc <platform_driver_init+0x1a4>)
1000d9d6:	4a4a      	ldr	r2, [pc, #296]	; (1000db00 <platform_driver_init+0x1a8>)
1000d9d8:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d9da:	4e4a      	ldr	r6, [pc, #296]	; (1000db04 <platform_driver_init+0x1ac>)
1000d9dc:	4a4a      	ldr	r2, [pc, #296]	; (1000db08 <platform_driver_init+0x1b0>)
1000d9de:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d9e0:	494a      	ldr	r1, [pc, #296]	; (1000db0c <platform_driver_init+0x1b4>)
1000d9e2:	4a4b      	ldr	r2, [pc, #300]	; (1000db10 <platform_driver_init+0x1b8>)
1000d9e4:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d9e6:	494b      	ldr	r1, [pc, #300]	; (1000db14 <platform_driver_init+0x1bc>)
1000d9e8:	4a4b      	ldr	r2, [pc, #300]	; (1000db18 <platform_driver_init+0x1c0>)
1000d9ea:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d9ec:	494b      	ldr	r1, [pc, #300]	; (1000db1c <platform_driver_init+0x1c4>)
1000d9ee:	4a4c      	ldr	r2, [pc, #304]	; (1000db20 <platform_driver_init+0x1c8>)
1000d9f0:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d9f2:	494c      	ldr	r1, [pc, #304]	; (1000db24 <platform_driver_init+0x1cc>)
1000d9f4:	4a4c      	ldr	r2, [pc, #304]	; (1000db28 <platform_driver_init+0x1d0>)
1000d9f6:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d9f8:	494c      	ldr	r1, [pc, #304]	; (1000db2c <platform_driver_init+0x1d4>)
1000d9fa:	4a4d      	ldr	r2, [pc, #308]	; (1000db30 <platform_driver_init+0x1d8>)
1000d9fc:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d9fe:	2028      	movs	r0, #40	; 0x28
1000da00:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000da02:	494c      	ldr	r1, [pc, #304]	; (1000db34 <platform_driver_init+0x1dc>)
1000da04:	2028      	movs	r0, #40	; 0x28
1000da06:	682b      	ldr	r3, [r5, #0]
1000da08:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000da0a:	682b      	ldr	r3, [r5, #0]
1000da0c:	494a      	ldr	r1, [pc, #296]	; (1000db38 <platform_driver_init+0x1e0>)
1000da0e:	2027      	movs	r0, #39	; 0x27
1000da10:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000da12:	4b4a      	ldr	r3, [pc, #296]	; (1000db3c <platform_driver_init+0x1e4>)
1000da14:	681a      	ldr	r2, [r3, #0]
1000da16:	4b4a      	ldr	r3, [pc, #296]	; (1000db40 <platform_driver_init+0x1e8>)
1000da18:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000da1a:	4a4a      	ldr	r2, [pc, #296]	; (1000db44 <platform_driver_init+0x1ec>)
1000da1c:	4b4a      	ldr	r3, [pc, #296]	; (1000db48 <platform_driver_init+0x1f0>)
1000da1e:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000da20:	4a4a      	ldr	r2, [pc, #296]	; (1000db4c <platform_driver_init+0x1f4>)
1000da22:	4b4b      	ldr	r3, [pc, #300]	; (1000db50 <platform_driver_init+0x1f8>)
1000da24:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000da26:	4a4b      	ldr	r2, [pc, #300]	; (1000db54 <platform_driver_init+0x1fc>)
1000da28:	4b4b      	ldr	r3, [pc, #300]	; (1000db58 <platform_driver_init+0x200>)
1000da2a:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000da2c:	4a4b      	ldr	r2, [pc, #300]	; (1000db5c <platform_driver_init+0x204>)
1000da2e:	4b4c      	ldr	r3, [pc, #304]	; (1000db60 <platform_driver_init+0x208>)
1000da30:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000da32:	4a4c      	ldr	r2, [pc, #304]	; (1000db64 <platform_driver_init+0x20c>)
1000da34:	4b4c      	ldr	r3, [pc, #304]	; (1000db68 <platform_driver_init+0x210>)
1000da36:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000da38:	4a4c      	ldr	r2, [pc, #304]	; (1000db6c <platform_driver_init+0x214>)
1000da3a:	4b4d      	ldr	r3, [pc, #308]	; (1000db70 <platform_driver_init+0x218>)
1000da3c:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000da3e:	4a4d      	ldr	r2, [pc, #308]	; (1000db74 <platform_driver_init+0x21c>)
1000da40:	4b4d      	ldr	r3, [pc, #308]	; (1000db78 <platform_driver_init+0x220>)
1000da42:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000da44:	22a0      	movs	r2, #160	; 0xa0
1000da46:	0092      	lsls	r2, r2, #2
1000da48:	2100      	movs	r1, #0
1000da4a:	484c      	ldr	r0, [pc, #304]	; (1000db7c <platform_driver_init+0x224>)
1000da4c:	4b4c      	ldr	r3, [pc, #304]	; (1000db80 <platform_driver_init+0x228>)
1000da4e:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000da50:	2280      	movs	r2, #128	; 0x80
1000da52:	0092      	lsls	r2, r2, #2
1000da54:	4b4b      	ldr	r3, [pc, #300]	; (1000db84 <platform_driver_init+0x22c>)
1000da56:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000da58:	4b4b      	ldr	r3, [pc, #300]	; (1000db88 <platform_driver_init+0x230>)
1000da5a:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000da5c:	4653      	mov	r3, sl
1000da5e:	6023      	str	r3, [r4, #0]
1000da60:	464b      	mov	r3, r9
1000da62:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000da64:	4b49      	ldr	r3, [pc, #292]	; (1000db8c <platform_driver_init+0x234>)
1000da66:	4642      	mov	r2, r8
1000da68:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000da6a:	683b      	ldr	r3, [r7, #0]
1000da6c:	4a48      	ldr	r2, [pc, #288]	; (1000db90 <platform_driver_init+0x238>)
1000da6e:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000da70:	6833      	ldr	r3, [r6, #0]
1000da72:	4a48      	ldr	r2, [pc, #288]	; (1000db94 <platform_driver_init+0x23c>)
1000da74:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000da76:	2000      	movs	r0, #0
1000da78:	4c47      	ldr	r4, [pc, #284]	; (1000db98 <platform_driver_init+0x240>)
1000da7a:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000da7c:	2001      	movs	r0, #1
1000da7e:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000da80:	2002      	movs	r0, #2
1000da82:	47a0      	blx	r4
		platform_initialized = 1;
1000da84:	2201      	movs	r2, #1
1000da86:	4b06      	ldr	r3, [pc, #24]	; (1000daa0 <platform_driver_init+0x148>)
1000da88:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000da8a:	2000      	movs	r0, #0
1000da8c:	e003      	b.n	1000da96 <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000da8e:	2201      	movs	r2, #1
1000da90:	4b03      	ldr	r3, [pc, #12]	; (1000daa0 <platform_driver_init+0x148>)
1000da92:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000da94:	2001      	movs	r0, #1
	}
	return status;
}
1000da96:	bc1c      	pop	{r2, r3, r4}
1000da98:	4690      	mov	r8, r2
1000da9a:	4699      	mov	r9, r3
1000da9c:	46a2      	mov	sl, r4
1000da9e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000daa0:	10019e2c 	.word	0x10019e2c
1000daa4:	1000d8e5 	.word	0x1000d8e5
1000daa8:	1000d929 	.word	0x1000d929
1000daac:	10019e4c 	.word	0x10019e4c
1000dab0:	e000e100 	.word	0xe000e100
1000dab4:	1001adbc 	.word	0x1001adbc
1000dab8:	000007d7 	.word	0x000007d7
1000dabc:	000007bd 	.word	0x000007bd
1000dac0:	1001aaf8 	.word	0x1001aaf8
1000dac4:	0001bc51 	.word	0x0001bc51
1000dac8:	1001adc0 	.word	0x1001adc0
1000dacc:	100400bc 	.word	0x100400bc
1000dad0:	10019e20 	.word	0x10019e20
1000dad4:	100400b8 	.word	0x100400b8
1000dad8:	10019e1c 	.word	0x10019e1c
1000dadc:	0001b99f 	.word	0x0001b99f
1000dae0:	1001aaf4 	.word	0x1001aaf4
1000dae4:	0001b9db 	.word	0x0001b9db
1000dae8:	1001ab00 	.word	0x1001ab00
1000daec:	1001add0 	.word	0x1001add0
1000daf0:	1004003c 	.word	0x1004003c
1000daf4:	10041fc0 	.word	0x10041fc0
1000daf8:	1001ab04 	.word	0x1001ab04
1000dafc:	10041fc4 	.word	0x10041fc4
1000db00:	1001adcc 	.word	0x1001adcc
1000db04:	1001adc4 	.word	0x1001adc4
1000db08:	10041fd4 	.word	0x10041fd4
1000db0c:	10041fd8 	.word	0x10041fd8
1000db10:	1001aafc 	.word	0x1001aafc
1000db14:	0001cbe9 	.word	0x0001cbe9
1000db18:	10019e40 	.word	0x10019e40
1000db1c:	0001cd8f 	.word	0x0001cd8f
1000db20:	10019e30 	.word	0x10019e30
1000db24:	0001cea3 	.word	0x0001cea3
1000db28:	10019e54 	.word	0x10019e54
1000db2c:	0001cbcf 	.word	0x0001cbcf
1000db30:	10019e28 	.word	0x10019e28
1000db34:	1000dfe1 	.word	0x1000dfe1
1000db38:	1000df75 	.word	0x1000df75
1000db3c:	100400e4 	.word	0x100400e4
1000db40:	10019e48 	.word	0x10019e48
1000db44:	00019fe9 	.word	0x00019fe9
1000db48:	10019e58 	.word	0x10019e58
1000db4c:	0001dbdd 	.word	0x0001dbdd
1000db50:	10019e24 	.word	0x10019e24
1000db54:	0001dc5b 	.word	0x0001dc5b
1000db58:	10019e38 	.word	0x10019e38
1000db5c:	100405ec 	.word	0x100405ec
1000db60:	10019e34 	.word	0x10019e34
1000db64:	0001d5e3 	.word	0x0001d5e3
1000db68:	10019e44 	.word	0x10019e44
1000db6c:	10040c20 	.word	0x10040c20
1000db70:	10019e5c 	.word	0x10019e5c
1000db74:	00019f09 	.word	0x00019f09
1000db78:	10019e18 	.word	0x10019e18
1000db7c:	1001ab3c 	.word	0x1001ab3c
1000db80:	1001572d 	.word	0x1001572d
1000db84:	1001add4 	.word	0x1001add4
1000db88:	1000d811 	.word	0x1000d811
1000db8c:	1001adc8 	.word	0x1001adc8
1000db90:	1000d8b9 	.word	0x1000d8b9
1000db94:	1000e03d 	.word	0x1000e03d
1000db98:	1000e025 	.word	0x1000e025

1000db9c <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000db9c:	4b04      	ldr	r3, [pc, #16]	; (1000dbb0 <platform_register_ble_msg_handler+0x14>)
1000db9e:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000dba0:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000dba2:	2a01      	cmp	r2, #1
1000dba4:	d102      	bne.n	1000dbac <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000dba6:	4b03      	ldr	r3, [pc, #12]	; (1000dbb4 <platform_register_ble_msg_handler+0x18>)
1000dba8:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000dbaa:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000dbac:	0018      	movs	r0, r3
1000dbae:	4770      	bx	lr
1000dbb0:	10019e2c 	.word	0x10019e2c
1000dbb4:	10019e4c 	.word	0x10019e4c

1000dbb8 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000dbb8:	b570      	push	{r4, r5, r6, lr}
1000dbba:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000dbbc:	4b0e      	ldr	r3, [pc, #56]	; (1000dbf8 <platform_interface_send+0x40>)
1000dbbe:	681b      	ldr	r3, [r3, #0]
1000dbc0:	2b00      	cmp	r3, #0
1000dbc2:	d002      	beq.n	1000dbca <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000dbc4:	8840      	ldrh	r0, [r0, #2]
1000dbc6:	4798      	blx	r3
1000dbc8:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000dbca:	88e3      	ldrh	r3, [r4, #6]
1000dbcc:	88a2      	ldrh	r2, [r4, #4]
1000dbce:	8861      	ldrh	r1, [r4, #2]
1000dbd0:	8820      	ldrh	r0, [r4, #0]
1000dbd2:	4d0a      	ldr	r5, [pc, #40]	; (1000dbfc <platform_interface_send+0x44>)
1000dbd4:	682d      	ldr	r5, [r5, #0]
1000dbd6:	47a8      	blx	r5
1000dbd8:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000dbda:	88e2      	ldrh	r2, [r4, #6]
1000dbdc:	2a00      	cmp	r2, #0
1000dbde:	d102      	bne.n	1000dbe6 <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000dbe0:	4b07      	ldr	r3, [pc, #28]	; (1000dc00 <platform_interface_send+0x48>)
1000dbe2:	4798      	blx	r3
1000dbe4:	e006      	b.n	1000dbf4 <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000dbe6:	0021      	movs	r1, r4
1000dbe8:	3108      	adds	r1, #8
1000dbea:	4b06      	ldr	r3, [pc, #24]	; (1000dc04 <platform_interface_send+0x4c>)
1000dbec:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000dbee:	0028      	movs	r0, r5
1000dbf0:	4b03      	ldr	r3, [pc, #12]	; (1000dc00 <platform_interface_send+0x48>)
1000dbf2:	4798      	blx	r3
	}
}
1000dbf4:	bd70      	pop	{r4, r5, r6, pc}
1000dbf6:	46c0      	nop			; (mov r8, r8)
1000dbf8:	10019e20 	.word	0x10019e20
1000dbfc:	10019e58 	.word	0x10019e58
1000dc00:	1000d841 	.word	0x1000d841
1000dc04:	1001571b 	.word	0x1001571b

1000dc08 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000dc08:	b570      	push	{r4, r5, r6, lr}
1000dc0a:	0015      	movs	r5, r2
1000dc0c:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000dc0e:	020a      	lsls	r2, r1, #8
1000dc10:	4302      	orrs	r2, r0
1000dc12:	4b0a      	ldr	r3, [pc, #40]	; (1000dc3c <send_plf_int_msg_ind+0x34>)
1000dc14:	681e      	ldr	r6, [r3, #0]
1000dc16:	0023      	movs	r3, r4
1000dc18:	2105      	movs	r1, #5
1000dc1a:	20a0      	movs	r0, #160	; 0xa0
1000dc1c:	00c0      	lsls	r0, r0, #3
1000dc1e:	47b0      	blx	r6
1000dc20:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000dc22:	d00a      	beq.n	1000dc3a <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000dc24:	2c00      	cmp	r4, #0
1000dc26:	d005      	beq.n	1000dc34 <send_plf_int_msg_ind+0x2c>
1000dc28:	2d00      	cmp	r5, #0
1000dc2a:	d003      	beq.n	1000dc34 <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000dc2c:	0022      	movs	r2, r4
1000dc2e:	0029      	movs	r1, r5
1000dc30:	4b03      	ldr	r3, [pc, #12]	; (1000dc40 <send_plf_int_msg_ind+0x38>)
1000dc32:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000dc34:	0030      	movs	r0, r6
1000dc36:	4b03      	ldr	r3, [pc, #12]	; (1000dc44 <send_plf_int_msg_ind+0x3c>)
1000dc38:	4798      	blx	r3
	}
}
1000dc3a:	bd70      	pop	{r4, r5, r6, pc}
1000dc3c:	10019e58 	.word	0x10019e58
1000dc40:	1001571b 	.word	0x1001571b
1000dc44:	1000d841 	.word	0x1000d841

1000dc48 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000dc48:	b5f0      	push	{r4, r5, r6, r7, lr}
1000dc4a:	465f      	mov	r7, fp
1000dc4c:	4656      	mov	r6, sl
1000dc4e:	464d      	mov	r5, r9
1000dc50:	4644      	mov	r4, r8
1000dc52:	b4f0      	push	{r4, r5, r6, r7}
1000dc54:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000dc56:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000dc58:	2300      	movs	r3, #0
1000dc5a:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000dc5c:	1ce3      	adds	r3, r4, #3
1000dc5e:	d81c      	bhi.n	1000dc9a <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000dc60:	220d      	movs	r2, #13
1000dc62:	2100      	movs	r1, #0
1000dc64:	a802      	add	r0, sp, #8
1000dc66:	4b82      	ldr	r3, [pc, #520]	; (1000de70 <platform_event_wait+0x228>)
1000dc68:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000dc6a:	2333      	movs	r3, #51	; 0x33
1000dc6c:	aa02      	add	r2, sp, #8
1000dc6e:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dc70:	3b30      	subs	r3, #48	; 0x30
1000dc72:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dc74:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dc76:	3302      	adds	r3, #2
1000dc78:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dc7a:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000dc7c:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000dc7e:	0a23      	lsrs	r3, r4, #8
1000dc80:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000dc82:	0c23      	lsrs	r3, r4, #16
1000dc84:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000dc86:	0e24      	lsrs	r4, r4, #24
1000dc88:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000dc8a:	2301      	movs	r3, #1
1000dc8c:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000dc8e:	210d      	movs	r1, #13
1000dc90:	0010      	movs	r0, r2
1000dc92:	4b78      	ldr	r3, [pc, #480]	; (1000de74 <platform_event_wait+0x22c>)
1000dc94:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000dc96:	2301      	movs	r3, #1
1000dc98:	4699      	mov	r9, r3
1000dc9a:	2400      	movs	r4, #0
1000dc9c:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000dc9e:	4f76      	ldr	r7, [pc, #472]	; (1000de78 <platform_event_wait+0x230>)
1000dca0:	4e76      	ldr	r6, [pc, #472]	; (1000de7c <platform_event_wait+0x234>)
1000dca2:	4977      	ldr	r1, [pc, #476]	; (1000de80 <platform_event_wait+0x238>)
1000dca4:	6838      	ldr	r0, [r7, #0]
1000dca6:	6833      	ldr	r3, [r6, #0]
1000dca8:	4798      	blx	r3
1000dcaa:	2800      	cmp	r0, #0
1000dcac:	d000      	beq.n	1000dcb0 <platform_event_wait+0x68>
1000dcae:	e088      	b.n	1000ddc2 <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000dcb0:	4b73      	ldr	r3, [pc, #460]	; (1000de80 <platform_event_wait+0x238>)
1000dcb2:	681c      	ldr	r4, [r3, #0]
1000dcb4:	88a3      	ldrh	r3, [r4, #4]
1000dcb6:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dcb8:	23cd      	movs	r3, #205	; 0xcd
1000dcba:	009b      	lsls	r3, r3, #2
1000dcbc:	459a      	cmp	sl, r3
1000dcbe:	d100      	bne.n	1000dcc2 <platform_event_wait+0x7a>
1000dcc0:	e0c7      	b.n	1000de52 <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000dcc2:	8923      	ldrh	r3, [r4, #8]
1000dcc4:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000dcc6:	8963      	ldrh	r3, [r4, #10]
1000dcc8:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000dcca:	464b      	mov	r3, r9
1000dccc:	2b00      	cmp	r3, #0
1000dcce:	d011      	beq.n	1000dcf4 <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000dcd0:	220d      	movs	r2, #13
1000dcd2:	2100      	movs	r1, #0
1000dcd4:	a802      	add	r0, sp, #8
1000dcd6:	4b66      	ldr	r3, [pc, #408]	; (1000de70 <platform_event_wait+0x228>)
1000dcd8:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000dcda:	2333      	movs	r3, #51	; 0x33
1000dcdc:	aa02      	add	r2, sp, #8
1000dcde:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000dce0:	3b30      	subs	r3, #48	; 0x30
1000dce2:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000dce4:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000dce6:	3302      	adds	r3, #2
1000dce8:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000dcea:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000dcec:	210d      	movs	r1, #13
1000dcee:	0010      	movs	r0, r2
1000dcf0:	4b60      	ldr	r3, [pc, #384]	; (1000de74 <platform_event_wait+0x22c>)
1000dcf2:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000dcf4:	23a0      	movs	r3, #160	; 0xa0
1000dcf6:	00db      	lsls	r3, r3, #3
1000dcf8:	459a      	cmp	sl, r3
1000dcfa:	d121      	bne.n	1000dd40 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000dcfc:	4b61      	ldr	r3, [pc, #388]	; (1000de84 <platform_event_wait+0x23c>)
1000dcfe:	881b      	ldrh	r3, [r3, #0]
1000dd00:	4443      	add	r3, r8
1000dd02:	22a0      	movs	r2, #160	; 0xa0
1000dd04:	0092      	lsls	r2, r2, #2
1000dd06:	4293      	cmp	r3, r2
1000dd08:	dd02      	ble.n	1000dd10 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000dd0a:	3a80      	subs	r2, #128	; 0x80
1000dd0c:	4b5d      	ldr	r3, [pc, #372]	; (1000de84 <platform_event_wait+0x23c>)
1000dd0e:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000dd10:	4b5c      	ldr	r3, [pc, #368]	; (1000de84 <platform_event_wait+0x23c>)
1000dd12:	469a      	mov	sl, r3
1000dd14:	881d      	ldrh	r5, [r3, #0]
1000dd16:	4b5c      	ldr	r3, [pc, #368]	; (1000de88 <platform_event_wait+0x240>)
1000dd18:	18ed      	adds	r5, r5, r3
1000dd1a:	0021      	movs	r1, r4
1000dd1c:	310c      	adds	r1, #12
1000dd1e:	4642      	mov	r2, r8
1000dd20:	0028      	movs	r0, r5
1000dd22:	4b5a      	ldr	r3, [pc, #360]	; (1000de8c <platform_event_wait+0x244>)
1000dd24:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000dd26:	4642      	mov	r2, r8
1000dd28:	0029      	movs	r1, r5
1000dd2a:	4658      	mov	r0, fp
1000dd2c:	4b58      	ldr	r3, [pc, #352]	; (1000de90 <platform_event_wait+0x248>)
1000dd2e:	4798      	blx	r3
				plf_event_buff_index += len;
1000dd30:	4653      	mov	r3, sl
1000dd32:	881b      	ldrh	r3, [r3, #0]
1000dd34:	4443      	add	r3, r8
1000dd36:	4652      	mov	r2, sl
1000dd38:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dd3a:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000dd3c:	2502      	movs	r5, #2
1000dd3e:	e03a      	b.n	1000ddb6 <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dd40:	4b54      	ldr	r3, [pc, #336]	; (1000de94 <platform_event_wait+0x24c>)
1000dd42:	681b      	ldr	r3, [r3, #0]
1000dd44:	2b00      	cmp	r3, #0
1000dd46:	d032      	beq.n	1000ddae <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000dd48:	4b4d      	ldr	r3, [pc, #308]	; (1000de80 <platform_event_wait+0x238>)
1000dd4a:	681a      	ldr	r2, [r3, #0]
1000dd4c:	8893      	ldrh	r3, [r2, #4]
1000dd4e:	21cd      	movs	r1, #205	; 0xcd
1000dd50:	0089      	lsls	r1, r1, #2
1000dd52:	428b      	cmp	r3, r1
1000dd54:	d104      	bne.n	1000dd60 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000dd56:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000dd58:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000dd5a:	2b00      	cmp	r3, #0
1000dd5c:	d02b      	beq.n	1000ddb6 <platform_event_wait+0x16e>
1000dd5e:	e028      	b.n	1000ddb2 <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000dd60:	4c4d      	ldr	r4, [pc, #308]	; (1000de98 <platform_event_wait+0x250>)
1000dd62:	4d49      	ldr	r5, [pc, #292]	; (1000de88 <platform_event_wait+0x240>)
1000dd64:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000dd66:	702b      	strb	r3, [r5, #0]
1000dd68:	0a1b      	lsrs	r3, r3, #8
1000dd6a:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000dd6c:	8910      	ldrh	r0, [r2, #8]
1000dd6e:	4b4b      	ldr	r3, [pc, #300]	; (1000de9c <platform_event_wait+0x254>)
1000dd70:	681b      	ldr	r3, [r3, #0]
1000dd72:	4798      	blx	r3
1000dd74:	7128      	strb	r0, [r5, #4]
1000dd76:	0a00      	lsrs	r0, r0, #8
1000dd78:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000dd7a:	6820      	ldr	r0, [r4, #0]
1000dd7c:	4b40      	ldr	r3, [pc, #256]	; (1000de80 <platform_event_wait+0x238>)
1000dd7e:	681a      	ldr	r2, [r3, #0]
1000dd80:	88d2      	ldrh	r2, [r2, #6]
1000dd82:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000dd84:	681d      	ldr	r5, [r3, #0]
1000dd86:	896b      	ldrh	r3, [r5, #10]
1000dd88:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000dd8a:	3008      	adds	r0, #8
1000dd8c:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000dd8e:	896a      	ldrh	r2, [r5, #10]
1000dd90:	2a00      	cmp	r2, #0
1000dd92:	d003      	beq.n	1000dd9c <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000dd94:	0029      	movs	r1, r5
1000dd96:	310c      	adds	r1, #12
1000dd98:	4b3c      	ldr	r3, [pc, #240]	; (1000de8c <platform_event_wait+0x244>)
1000dd9a:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000dd9c:	8969      	ldrh	r1, [r5, #10]
1000dd9e:	3108      	adds	r1, #8
1000dda0:	4b3c      	ldr	r3, [pc, #240]	; (1000de94 <platform_event_wait+0x24c>)
1000dda2:	681b      	ldr	r3, [r3, #0]
1000dda4:	4838      	ldr	r0, [pc, #224]	; (1000de88 <platform_event_wait+0x240>)
1000dda6:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000dda8:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000ddaa:	2503      	movs	r5, #3
1000ddac:	e003      	b.n	1000ddb6 <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000ddae:	2400      	movs	r4, #0
1000ddb0:	e001      	b.n	1000ddb6 <platform_event_wait+0x16e>
1000ddb2:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000ddb4:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000ddb6:	4b32      	ldr	r3, [pc, #200]	; (1000de80 <platform_event_wait+0x238>)
1000ddb8:	6818      	ldr	r0, [r3, #0]
1000ddba:	4b39      	ldr	r3, [pc, #228]	; (1000dea0 <platform_event_wait+0x258>)
1000ddbc:	681b      	ldr	r3, [r3, #0]
1000ddbe:	4798      	blx	r3
1000ddc0:	e000      	b.n	1000ddc4 <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000ddc2:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000ddc4:	2c00      	cmp	r4, #0
1000ddc6:	d000      	beq.n	1000ddca <platform_event_wait+0x182>
1000ddc8:	e76b      	b.n	1000dca2 <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000ddca:	464b      	mov	r3, r9
1000ddcc:	2b00      	cmp	r3, #0
1000ddce:	d046      	beq.n	1000de5e <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000ddd0:	4b29      	ldr	r3, [pc, #164]	; (1000de78 <platform_event_wait+0x230>)
1000ddd2:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000ddd4:	2e00      	cmp	r6, #0
1000ddd6:	d104      	bne.n	1000dde2 <platform_event_wait+0x19a>
1000ddd8:	2300      	movs	r3, #0
1000ddda:	6a1c      	ldr	r4, [r3, #32]
1000dddc:	2c00      	cmp	r4, #0
1000ddde:	d131      	bne.n	1000de44 <platform_event_wait+0x1fc>
1000dde0:	e03d      	b.n	1000de5e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000dde2:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000dde4:	2314      	movs	r3, #20
1000dde6:	469c      	mov	ip, r3
1000dde8:	44b4      	add	ip, r6
1000ddea:	4663      	mov	r3, ip
1000ddec:	4660      	mov	r0, ip
1000ddee:	9300      	str	r3, [sp, #0]
1000ddf0:	4b2c      	ldr	r3, [pc, #176]	; (1000dea4 <platform_event_wait+0x25c>)
1000ddf2:	681b      	ldr	r3, [r3, #0]
1000ddf4:	4798      	blx	r3
	while(NULL != current)
1000ddf6:	2c00      	cmp	r4, #0
1000ddf8:	d01f      	beq.n	1000de3a <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000ddfa:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000ddfc:	23cd      	movs	r3, #205	; 0xcd
1000ddfe:	009b      	lsls	r3, r3, #2
1000de00:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000de02:	4b27      	ldr	r3, [pc, #156]	; (1000dea0 <platform_event_wait+0x258>)
1000de04:	469a      	mov	sl, r3
1000de06:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000de08:	6803      	ldr	r3, [r0, #0]
1000de0a:	889b      	ldrh	r3, [r3, #4]
1000de0c:	4543      	cmp	r3, r8
1000de0e:	d110      	bne.n	1000de32 <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000de10:	2f00      	cmp	r7, #0
1000de12:	d006      	beq.n	1000de22 <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000de14:	6883      	ldr	r3, [r0, #8]
1000de16:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000de18:	4653      	mov	r3, sl
1000de1a:	681b      	ldr	r3, [r3, #0]
1000de1c:	4798      	blx	r3
				current = prev->pstrNext;
1000de1e:	68b8      	ldr	r0, [r7, #8]
1000de20:	e009      	b.n	1000de36 <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000de22:	6883      	ldr	r3, [r0, #8]
1000de24:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000de26:	4b1e      	ldr	r3, [pc, #120]	; (1000dea0 <platform_event_wait+0x258>)
1000de28:	681b      	ldr	r3, [r3, #0]
1000de2a:	9301      	str	r3, [sp, #4]
1000de2c:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000de2e:	6a30      	ldr	r0, [r6, #32]
1000de30:	e001      	b.n	1000de36 <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000de32:	0007      	movs	r7, r0
1000de34:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000de36:	2800      	cmp	r0, #0
1000de38:	d1e6      	bne.n	1000de08 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000de3a:	4b1b      	ldr	r3, [pc, #108]	; (1000dea8 <platform_event_wait+0x260>)
1000de3c:	681b      	ldr	r3, [r3, #0]
1000de3e:	9800      	ldr	r0, [sp, #0]
1000de40:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000de42:	e00c      	b.n	1000de5e <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000de44:	2314      	movs	r3, #20
1000de46:	9300      	str	r3, [sp, #0]
1000de48:	4b16      	ldr	r3, [pc, #88]	; (1000dea4 <platform_event_wait+0x25c>)
1000de4a:	681b      	ldr	r3, [r3, #0]
1000de4c:	2014      	movs	r0, #20
1000de4e:	4798      	blx	r3
1000de50:	e7d3      	b.n	1000ddfa <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000de52:	4b10      	ldr	r3, [pc, #64]	; (1000de94 <platform_event_wait+0x24c>)
1000de54:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000de56:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000de58:	2b00      	cmp	r3, #0
1000de5a:	d0ac      	beq.n	1000ddb6 <platform_event_wait+0x16e>
1000de5c:	e77b      	b.n	1000dd56 <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000de5e:	0028      	movs	r0, r5
1000de60:	b007      	add	sp, #28
1000de62:	bc3c      	pop	{r2, r3, r4, r5}
1000de64:	4690      	mov	r8, r2
1000de66:	4699      	mov	r9, r3
1000de68:	46a2      	mov	sl, r4
1000de6a:	46ab      	mov	fp, r5
1000de6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000de6e:	46c0      	nop			; (mov r8, r8)
1000de70:	1001572d 	.word	0x1001572d
1000de74:	1000dbb9 	.word	0x1000dbb9
1000de78:	10019e5c 	.word	0x10019e5c
1000de7c:	10019e44 	.word	0x10019e44
1000de80:	10019e50 	.word	0x10019e50
1000de84:	1001add4 	.word	0x1001add4
1000de88:	1001ab3c 	.word	0x1001ab3c
1000de8c:	1001571b 	.word	0x1001571b
1000de90:	1000d7d9 	.word	0x1000d7d9
1000de94:	10019e4c 	.word	0x10019e4c
1000de98:	10019e3c 	.word	0x10019e3c
1000de9c:	10019e1c 	.word	0x10019e1c
1000dea0:	10019e18 	.word	0x10019e18
1000dea4:	10019e38 	.word	0x10019e38
1000dea8:	10019e24 	.word	0x10019e24

1000deac <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000deac:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000deae:	4b03      	ldr	r3, [pc, #12]	; (1000debc <acquire_sleep_lock+0x10>)
1000deb0:	681b      	ldr	r3, [r3, #0]
1000deb2:	2080      	movs	r0, #128	; 0x80
1000deb4:	0200      	lsls	r0, r0, #8
1000deb6:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000deb8:	2008      	movs	r0, #8
1000deba:	bd10      	pop	{r4, pc}
1000debc:	1001aaf4 	.word	0x1001aaf4

1000dec0 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000dec0:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000dec2:	4b03      	ldr	r3, [pc, #12]	; (1000ded0 <release_message_lock+0x10>)
1000dec4:	681b      	ldr	r3, [r3, #0]
1000dec6:	2080      	movs	r0, #128	; 0x80
1000dec8:	01c0      	lsls	r0, r0, #7
1000deca:	4798      	blx	r3
	return status;
}
1000decc:	2000      	movs	r0, #0
1000dece:	bd10      	pop	{r4, pc}
1000ded0:	1001ab00 	.word	0x1001ab00

1000ded4 <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000ded4:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000ded6:	4c05      	ldr	r4, [pc, #20]	; (1000deec <release_sleep_lock+0x18>)
1000ded8:	2080      	movs	r0, #128	; 0x80
1000deda:	01c0      	lsls	r0, r0, #7
1000dedc:	6823      	ldr	r3, [r4, #0]
1000dede:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000dee0:	6823      	ldr	r3, [r4, #0]
1000dee2:	2080      	movs	r0, #128	; 0x80
1000dee4:	0200      	lsls	r0, r0, #8
1000dee6:	4798      	blx	r3
	return status;
}
1000dee8:	2000      	movs	r0, #0
1000deea:	bd10      	pop	{r4, pc}
1000deec:	1001ab00 	.word	0x1001ab00

1000def0 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000def0:	2800      	cmp	r0, #0
1000def2:	d003      	beq.n	1000defc <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000def4:	4b02      	ldr	r3, [pc, #8]	; (1000df00 <register_resume_callback+0x10>)
1000def6:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000def8:	2000      	movs	r0, #0
1000defa:	e000      	b.n	1000defe <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000defc:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000defe:	4770      	bx	lr
1000df00:	1001adc8 	.word	0x1001adc8

1000df04 <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000df04:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000df06:	4a18      	ldr	r2, [pc, #96]	; (1000df68 <gpio1_combined_isr_handler+0x64>)
1000df08:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000df0a:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000df0c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000df0e:	2180      	movs	r1, #128	; 0x80
1000df10:	0209      	lsls	r1, r1, #8
1000df12:	4301      	orrs	r1, r0
1000df14:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000df16:	0010      	movs	r0, r2
1000df18:	4d14      	ldr	r5, [pc, #80]	; (1000df6c <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000df1a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000df1c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000df1e:	05db      	lsls	r3, r3, #23
1000df20:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000df22:	d011      	beq.n	1000df48 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000df24:	b2db      	uxtb	r3, r3
1000df26:	4259      	negs	r1, r3
1000df28:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000df2a:	2b01      	cmp	r3, #1
1000df2c:	d006      	beq.n	1000df3c <gpio1_combined_isr_handler+0x38>
1000df2e:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000df30:	085b      	lsrs	r3, r3, #1
				index++;
1000df32:	3101      	adds	r1, #1
1000df34:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000df36:	2b01      	cmp	r3, #1
1000df38:	d1fa      	bne.n	1000df30 <gpio1_combined_isr_handler+0x2c>
1000df3a:	e000      	b.n	1000df3e <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000df3c:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000df3e:	0023      	movs	r3, r4
1000df40:	408b      	lsls	r3, r1
1000df42:	b29b      	uxth	r3, r3
1000df44:	8703      	strh	r3, [r0, #56]	; 0x38
1000df46:	e003      	b.n	1000df50 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000df48:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000df4a:	432b      	orrs	r3, r5
1000df4c:	b29b      	uxth	r3, r3
1000df4e:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000df50:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000df52:	05db      	lsls	r3, r3, #23
1000df54:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000df56:	d1e2      	bne.n	1000df1e <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000df58:	2180      	movs	r1, #128	; 0x80
1000df5a:	0049      	lsls	r1, r1, #1
1000df5c:	3381      	adds	r3, #129	; 0x81
1000df5e:	33ff      	adds	r3, #255	; 0xff
1000df60:	4a03      	ldr	r2, [pc, #12]	; (1000df70 <gpio1_combined_isr_handler+0x6c>)
1000df62:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000df64:	bd30      	pop	{r4, r5, pc}
1000df66:	46c0      	nop			; (mov r8, r8)
1000df68:	40011000 	.word	0x40011000
1000df6c:	ffff8000 	.word	0xffff8000
1000df70:	e000e100 	.word	0xe000e100

1000df74 <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000df74:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000df76:	4a17      	ldr	r2, [pc, #92]	; (1000dfd4 <gpio0_combined_isr_handler+0x60>)
1000df78:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000df7a:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000df7c:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000df7e:	2180      	movs	r1, #128	; 0x80
1000df80:	0209      	lsls	r1, r1, #8
1000df82:	4301      	orrs	r1, r0
1000df84:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000df86:	0010      	movs	r0, r2
1000df88:	4d13      	ldr	r5, [pc, #76]	; (1000dfd8 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000df8a:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000df8c:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000df8e:	05db      	lsls	r3, r3, #23
1000df90:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000df92:	d011      	beq.n	1000dfb8 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000df94:	b2db      	uxtb	r3, r3
1000df96:	4259      	negs	r1, r3
1000df98:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000df9a:	2b01      	cmp	r3, #1
1000df9c:	d006      	beq.n	1000dfac <gpio0_combined_isr_handler+0x38>
1000df9e:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000dfa0:	085b      	lsrs	r3, r3, #1
				index++;
1000dfa2:	3101      	adds	r1, #1
1000dfa4:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000dfa6:	2b01      	cmp	r3, #1
1000dfa8:	d1fa      	bne.n	1000dfa0 <gpio0_combined_isr_handler+0x2c>
1000dfaa:	e000      	b.n	1000dfae <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dfac:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dfae:	0023      	movs	r3, r4
1000dfb0:	408b      	lsls	r3, r1
1000dfb2:	b29b      	uxth	r3, r3
1000dfb4:	8703      	strh	r3, [r0, #56]	; 0x38
1000dfb6:	e003      	b.n	1000dfc0 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dfb8:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000dfba:	432b      	orrs	r3, r5
1000dfbc:	b29b      	uxth	r3, r3
1000dfbe:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000dfc0:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dfc2:	05db      	lsls	r3, r3, #23
1000dfc4:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000dfc6:	d1e2      	bne.n	1000df8e <gpio0_combined_isr_handler+0x1a>
1000dfc8:	2180      	movs	r1, #128	; 0x80
1000dfca:	3381      	adds	r3, #129	; 0x81
1000dfcc:	33ff      	adds	r3, #255	; 0xff
1000dfce:	4a03      	ldr	r2, [pc, #12]	; (1000dfdc <gpio0_combined_isr_handler+0x68>)
1000dfd0:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000dfd2:	bd30      	pop	{r4, r5, pc}
1000dfd4:	40010000 	.word	0x40010000
1000dfd8:	ffff8000 	.word	0xffff8000
1000dfdc:	e000e100 	.word	0xe000e100

1000dfe0 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000dfe0:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000dfe2:	4b0c      	ldr	r3, [pc, #48]	; (1000e014 <PORT1_COMB_Handler+0x34>)
1000dfe4:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000dfe6:	0b5b      	lsrs	r3, r3, #13
1000dfe8:	d010      	beq.n	1000e00c <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000dfea:	4b0b      	ldr	r3, [pc, #44]	; (1000e018 <PORT1_COMB_Handler+0x38>)
1000dfec:	681b      	ldr	r3, [r3, #0]
1000dfee:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000dff0:	4a08      	ldr	r2, [pc, #32]	; (1000e014 <PORT1_COMB_Handler+0x34>)
1000dff2:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dff4:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000dff6:	0b5b      	lsrs	r3, r3, #13
1000dff8:	035b      	lsls	r3, r3, #13
1000dffa:	430b      	orrs	r3, r1
1000dffc:	8713      	strh	r3, [r2, #56]	; 0x38
1000dffe:	2180      	movs	r1, #128	; 0x80
1000e000:	0049      	lsls	r1, r1, #1
1000e002:	23c0      	movs	r3, #192	; 0xc0
1000e004:	005b      	lsls	r3, r3, #1
1000e006:	4a05      	ldr	r2, [pc, #20]	; (1000e01c <PORT1_COMB_Handler+0x3c>)
1000e008:	50d1      	str	r1, [r2, r3]
1000e00a:	e001      	b.n	1000e010 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000e00c:	4b04      	ldr	r3, [pc, #16]	; (1000e020 <PORT1_COMB_Handler+0x40>)
1000e00e:	4798      	blx	r3
	}
}
1000e010:	bd10      	pop	{r4, pc}
1000e012:	46c0      	nop			; (mov r8, r8)
1000e014:	40011000 	.word	0x40011000
1000e018:	1001adc0 	.word	0x1001adc0
1000e01c:	e000e100 	.word	0xe000e100
1000e020:	1000df05 	.word	0x1000df05

1000e024 <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000e024:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000e026:	2802      	cmp	r0, #2
1000e028:	d804      	bhi.n	1000e034 <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000e02a:	0080      	lsls	r0, r0, #2
1000e02c:	2200      	movs	r2, #0
1000e02e:	4b02      	ldr	r3, [pc, #8]	; (1000e038 <wakeup_int_unregister_callback+0x14>)
1000e030:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000e032:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000e034:	0018      	movs	r0, r3
1000e036:	4770      	bx	lr
1000e038:	1001add8 	.word	0x1001add8

1000e03c <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000e03c:	b510      	push	{r4, lr}
1000e03e:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000e040:	7803      	ldrb	r3, [r0, #0]
1000e042:	2b01      	cmp	r3, #1
1000e044:	d108      	bne.n	1000e058 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000e046:	4b11      	ldr	r3, [pc, #68]	; (1000e08c <wakeup_active_event_callback+0x50>)
1000e048:	681b      	ldr	r3, [r3, #0]
1000e04a:	2b00      	cmp	r3, #0
1000e04c:	d000      	beq.n	1000e050 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000e04e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000e050:	23ff      	movs	r3, #255	; 0xff
1000e052:	6822      	ldr	r2, [r4, #0]
1000e054:	439a      	bics	r2, r3
1000e056:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000e058:	7863      	ldrb	r3, [r4, #1]
1000e05a:	2b01      	cmp	r3, #1
1000e05c:	d108      	bne.n	1000e070 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000e05e:	4b0b      	ldr	r3, [pc, #44]	; (1000e08c <wakeup_active_event_callback+0x50>)
1000e060:	685b      	ldr	r3, [r3, #4]
1000e062:	2b00      	cmp	r3, #0
1000e064:	d000      	beq.n	1000e068 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000e066:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000e068:	4b09      	ldr	r3, [pc, #36]	; (1000e090 <wakeup_active_event_callback+0x54>)
1000e06a:	6822      	ldr	r2, [r4, #0]
1000e06c:	4013      	ands	r3, r2
1000e06e:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000e070:	78a3      	ldrb	r3, [r4, #2]
1000e072:	2b01      	cmp	r3, #1
1000e074:	d108      	bne.n	1000e088 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000e076:	4b05      	ldr	r3, [pc, #20]	; (1000e08c <wakeup_active_event_callback+0x50>)
1000e078:	689b      	ldr	r3, [r3, #8]
1000e07a:	2b00      	cmp	r3, #0
1000e07c:	d000      	beq.n	1000e080 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000e07e:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000e080:	4b04      	ldr	r3, [pc, #16]	; (1000e094 <wakeup_active_event_callback+0x58>)
1000e082:	6822      	ldr	r2, [r4, #0]
1000e084:	4013      	ands	r3, r2
1000e086:	6023      	str	r3, [r4, #0]
	}
}
1000e088:	bd10      	pop	{r4, pc}
1000e08a:	46c0      	nop			; (mov r8, r8)
1000e08c:	1001add8 	.word	0x1001add8
1000e090:	ffff00ff 	.word	0xffff00ff
1000e094:	ff00ffff 	.word	0xff00ffff

1000e098 <resume_cb>:
	sms_imu_init_variables();
	sms_pressure_init_variables();
}

static void resume_cb(void)
{
1000e098:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000e09a:	4b09      	ldr	r3, [pc, #36]	; (1000e0c0 <resume_cb+0x28>)
1000e09c:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000e09e:	4b09      	ldr	r3, [pc, #36]	; (1000e0c4 <resume_cb+0x2c>)
1000e0a0:	4798      	blx	r3
	sms_dualtimer_init();
1000e0a2:	4b09      	ldr	r3, [pc, #36]	; (1000e0c8 <resume_cb+0x30>)
1000e0a4:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000e0a6:	4b09      	ldr	r3, [pc, #36]	; (1000e0cc <resume_cb+0x34>)
1000e0a8:	4798      	blx	r3
	sms_led_gpio_init();
1000e0aa:	4b09      	ldr	r3, [pc, #36]	; (1000e0d0 <resume_cb+0x38>)
1000e0ac:	4798      	blx	r3
	sms_spi_master_configure();
1000e0ae:	4b09      	ldr	r3, [pc, #36]	; (1000e0d4 <resume_cb+0x3c>)
1000e0b0:	4798      	blx	r3
	sms_i2c_master_configure();
1000e0b2:	4b09      	ldr	r3, [pc, #36]	; (1000e0d8 <resume_cb+0x40>)
1000e0b4:	4798      	blx	r3
	sms_imu_configure_gpio();
1000e0b6:	4b09      	ldr	r3, [pc, #36]	; (1000e0dc <resume_cb+0x44>)
1000e0b8:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000e0ba:	4b09      	ldr	r3, [pc, #36]	; (1000e0e0 <resume_cb+0x48>)
1000e0bc:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000e0be:	bd10      	pop	{r4, pc}
1000e0c0:	1000d8e5 	.word	0x1000d8e5
1000e0c4:	1000d64d 	.word	0x1000d64d
1000e0c8:	1000a251 	.word	0x1000a251
1000e0cc:	10008b85 	.word	0x10008b85
1000e0d0:	10009c45 	.word	0x10009c45
1000e0d4:	1000a109 	.word	0x1000a109
1000e0d8:	10008f8d 	.word	0x10008f8d
1000e0dc:	10009121 	.word	0x10009121
1000e0e0:	10008eb5 	.word	0x10008eb5

1000e0e4 <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000e0e4:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000e0e6:	2300      	movs	r3, #0
1000e0e8:	4a0a      	ldr	r2, [pc, #40]	; (1000e114 <sms_init_variables+0x30>)
1000e0ea:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000e0ec:	4a0a      	ldr	r2, [pc, #40]	; (1000e118 <sms_init_variables+0x34>)
1000e0ee:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000e0f0:	2101      	movs	r1, #1
1000e0f2:	4a0a      	ldr	r2, [pc, #40]	; (1000e11c <sms_init_variables+0x38>)
1000e0f4:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000e0f6:	4a0a      	ldr	r2, [pc, #40]	; (1000e120 <sms_init_variables+0x3c>)
1000e0f8:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_APP_TIMEOUT_OFF;
1000e0fa:	2201      	movs	r2, #1
1000e0fc:	4252      	negs	r2, r2
1000e0fe:	4b09      	ldr	r3, [pc, #36]	; (1000e124 <sms_init_variables+0x40>)
1000e100:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000e102:	4b09      	ldr	r3, [pc, #36]	; (1000e128 <sms_init_variables+0x44>)
1000e104:	4798      	blx	r3
	sms_button_init_variables();
1000e106:	4b09      	ldr	r3, [pc, #36]	; (1000e12c <sms_init_variables+0x48>)
1000e108:	4798      	blx	r3
	sms_imu_init_variables();
1000e10a:	4b09      	ldr	r3, [pc, #36]	; (1000e130 <sms_init_variables+0x4c>)
1000e10c:	4798      	blx	r3
	sms_pressure_init_variables();
1000e10e:	4b09      	ldr	r3, [pc, #36]	; (1000e134 <sms_init_variables+0x50>)
1000e110:	4798      	blx	r3
}
1000e112:	bd10      	pop	{r4, pc}
1000e114:	10019f30 	.word	0x10019f30
1000e118:	1001a067 	.word	0x1001a067
1000e11c:	10019f38 	.word	0x10019f38
1000e120:	10019f39 	.word	0x10019f39
1000e124:	10019f34 	.word	0x10019f34
1000e128:	100084ed 	.word	0x100084ed
1000e12c:	10008b5d 	.word	0x10008b5d
1000e130:	10009229 	.word	0x10009229
1000e134:	10009d01 	.word	0x10009d01

1000e138 <main>:
	sms_monitor_configure_gpio();
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}

int main(void)
{
1000e138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000e13a:	2210      	movs	r2, #16
1000e13c:	4b70      	ldr	r3, [pc, #448]	; (1000e300 <main+0x1c8>)
1000e13e:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000e140:	4b70      	ldr	r3, [pc, #448]	; (1000e304 <main+0x1cc>)
1000e142:	4798      	blx	r3
	gpio_init(); // GPIO
1000e144:	4b70      	ldr	r3, [pc, #448]	; (1000e308 <main+0x1d0>)
1000e146:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000e148:	4b70      	ldr	r3, [pc, #448]	; (1000e30c <main+0x1d4>)
1000e14a:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000e14c:	4b70      	ldr	r3, [pc, #448]	; (1000e310 <main+0x1d8>)
1000e14e:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000e150:	4b70      	ldr	r3, [pc, #448]	; (1000e314 <main+0x1dc>)
1000e152:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000e154:	4b70      	ldr	r3, [pc, #448]	; (1000e318 <main+0x1e0>)
1000e156:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000e158:	4b70      	ldr	r3, [pc, #448]	; (1000e31c <main+0x1e4>)
1000e15a:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000e15c:	4b70      	ldr	r3, [pc, #448]	; (1000e320 <main+0x1e8>)
1000e15e:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000e160:	4b70      	ldr	r3, [pc, #448]	; (1000e324 <main+0x1ec>)
1000e162:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000e164:	4b70      	ldr	r3, [pc, #448]	; (1000e328 <main+0x1f0>)
1000e166:	4798      	blx	r3
	
	// MPU
	sms_imu_configure_gpio();
1000e168:	4b70      	ldr	r3, [pc, #448]	; (1000e32c <main+0x1f4>)
1000e16a:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000e16c:	4b70      	ldr	r3, [pc, #448]	; (1000e330 <main+0x1f8>)
1000e16e:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000e170:	2000      	movs	r0, #0
1000e172:	4b70      	ldr	r3, [pc, #448]	; (1000e334 <main+0x1fc>)
1000e174:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000e176:	4b70      	ldr	r3, [pc, #448]	; (1000e338 <main+0x200>)
1000e178:	4798      	blx	r3
	sms_pressure_define_services();
1000e17a:	4b70      	ldr	r3, [pc, #448]	; (1000e33c <main+0x204>)
1000e17c:	4798      	blx	r3
	sms_imu_define_services();
1000e17e:	4b70      	ldr	r3, [pc, #448]	; (1000e340 <main+0x208>)
1000e180:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000e182:	4870      	ldr	r0, [pc, #448]	; (1000e344 <main+0x20c>)
1000e184:	4b70      	ldr	r3, [pc, #448]	; (1000e348 <main+0x210>)
1000e186:	4798      	blx	r3
	// Dualtimer (AON timer enables on registration... so do it later)
	//sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000e188:	4b70      	ldr	r3, [pc, #448]	; (1000e34c <main+0x214>)
1000e18a:	4798      	blx	r3
	
	// MPU
	sms_imu_register_callbacks();
1000e18c:	4b70      	ldr	r3, [pc, #448]	; (1000e350 <main+0x218>)
1000e18e:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000e190:	4a70      	ldr	r2, [pc, #448]	; (1000e354 <main+0x21c>)
1000e192:	2100      	movs	r1, #0
1000e194:	2000      	movs	r0, #0
1000e196:	4c70      	ldr	r4, [pc, #448]	; (1000e358 <main+0x220>)
1000e198:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000e19a:	4a70      	ldr	r2, [pc, #448]	; (1000e35c <main+0x224>)
1000e19c:	2102      	movs	r1, #2
1000e19e:	2000      	movs	r0, #0
1000e1a0:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000e1a2:	2100      	movs	r1, #0
1000e1a4:	2000      	movs	r0, #0
1000e1a6:	4b6e      	ldr	r3, [pc, #440]	; (1000e360 <main+0x228>)
1000e1a8:	4798      	blx	r3
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000e1aa:	4e6e      	ldr	r6, [pc, #440]	; (1000e364 <main+0x22c>)
1000e1ac:	4c6e      	ldr	r4, [pc, #440]	; (1000e368 <main+0x230>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000e1ae:	4d6f      	ldr	r5, [pc, #444]	; (1000e36c <main+0x234>)
	at_ble_status_t ble_status;
	static uint32_t cnt = 0;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000e1b0:	6830      	ldr	r0, [r6, #0]
1000e1b2:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000e1b4:	2800      	cmp	r0, #0
1000e1b6:	d000      	beq.n	1000e1ba <main+0x82>
1000e1b8:	e089      	b.n	1000e2ce <main+0x196>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000e1ba:	4b6d      	ldr	r3, [pc, #436]	; (1000e370 <main+0x238>)
1000e1bc:	78db      	ldrb	r3, [r3, #3]
1000e1be:	2b00      	cmp	r3, #0
1000e1c0:	d013      	beq.n	1000e1ea <main+0xb2>
				button_instance.btn0.new_int = false;
1000e1c2:	2200      	movs	r2, #0
1000e1c4:	4b6a      	ldr	r3, [pc, #424]	; (1000e370 <main+0x238>)
1000e1c6:	70da      	strb	r2, [r3, #3]
				DBG_LOG("Btn0 int... ");
1000e1c8:	4868      	ldr	r0, [pc, #416]	; (1000e36c <main+0x234>)
1000e1ca:	4b6a      	ldr	r3, [pc, #424]	; (1000e374 <main+0x23c>)
1000e1cc:	4798      	blx	r3
1000e1ce:	486a      	ldr	r0, [pc, #424]	; (1000e378 <main+0x240>)
1000e1d0:	4b6a      	ldr	r3, [pc, #424]	; (1000e37c <main+0x244>)
1000e1d2:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000e1d4:	2000      	movs	r0, #0
1000e1d6:	4b6a      	ldr	r3, [pc, #424]	; (1000e380 <main+0x248>)
1000e1d8:	4798      	blx	r3
1000e1da:	2800      	cmp	r0, #0
1000e1dc:	da05      	bge.n	1000e1ea <main+0xb2>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e1de:	4863      	ldr	r0, [pc, #396]	; (1000e36c <main+0x234>)
1000e1e0:	4b64      	ldr	r3, [pc, #400]	; (1000e374 <main+0x23c>)
1000e1e2:	4798      	blx	r3
1000e1e4:	4867      	ldr	r0, [pc, #412]	; (1000e384 <main+0x24c>)
1000e1e6:	4b65      	ldr	r3, [pc, #404]	; (1000e37c <main+0x244>)
1000e1e8:	4798      	blx	r3
				}
			}
			if(button_instance.btn1.new_int) {
1000e1ea:	4b61      	ldr	r3, [pc, #388]	; (1000e370 <main+0x238>)
1000e1ec:	7a5b      	ldrb	r3, [r3, #9]
1000e1ee:	2b00      	cmp	r3, #0
1000e1f0:	d013      	beq.n	1000e21a <main+0xe2>
				button_instance.btn1.new_int = false;
1000e1f2:	2200      	movs	r2, #0
1000e1f4:	4b5e      	ldr	r3, [pc, #376]	; (1000e370 <main+0x238>)
1000e1f6:	725a      	strb	r2, [r3, #9]
				DBG_LOG("Btn1 int... ");
1000e1f8:	485c      	ldr	r0, [pc, #368]	; (1000e36c <main+0x234>)
1000e1fa:	4b5e      	ldr	r3, [pc, #376]	; (1000e374 <main+0x23c>)
1000e1fc:	4798      	blx	r3
1000e1fe:	4862      	ldr	r0, [pc, #392]	; (1000e388 <main+0x250>)
1000e200:	4b5e      	ldr	r3, [pc, #376]	; (1000e37c <main+0x244>)
1000e202:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000e204:	2001      	movs	r0, #1
1000e206:	4b5e      	ldr	r3, [pc, #376]	; (1000e380 <main+0x248>)
1000e208:	4798      	blx	r3
1000e20a:	2800      	cmp	r0, #0
1000e20c:	da05      	bge.n	1000e21a <main+0xe2>
					DBG_LOG_DEV("Error in sms_button_fn()");
1000e20e:	4857      	ldr	r0, [pc, #348]	; (1000e36c <main+0x234>)
1000e210:	4b58      	ldr	r3, [pc, #352]	; (1000e374 <main+0x23c>)
1000e212:	4798      	blx	r3
1000e214:	485b      	ldr	r0, [pc, #364]	; (1000e384 <main+0x24c>)
1000e216:	4b59      	ldr	r3, [pc, #356]	; (1000e37c <main+0x244>)
1000e218:	4798      	blx	r3
				}
			}
			if(imu_device.interrupt.new_gyro) {
1000e21a:	2385      	movs	r3, #133	; 0x85
1000e21c:	4a5b      	ldr	r2, [pc, #364]	; (1000e38c <main+0x254>)
1000e21e:	5cd3      	ldrb	r3, [r2, r3]
1000e220:	2b00      	cmp	r3, #0
1000e222:	d002      	beq.n	1000e22a <main+0xf2>
				//const uint32_t cnt_max = 23 * SMS_TIMER_AON_LOAD_1MS / SMS_TIMER_AON_LOAD_100US;
				//uint32_t now = aon_sleep_timer_get_current_value()/SMS_TIMER_AON_LOAD_100US;
				//uint32_t delta = ((now < past) ? (past - now) : (cnt_max - now + past));
				//DBG_LOG("past: %lu, now: %lu, delta: %lu", past, now, delta);
				//past = now;
				imu_device.interrupt.new_gyro = false;
1000e224:	2100      	movs	r1, #0
1000e226:	2385      	movs	r3, #133	; 0x85
1000e228:	54d1      	strb	r1, [r2, r3]
				//imu_device.interrupt.rts = true;
				//gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.interrupt.new_value) {
1000e22a:	2329      	movs	r3, #41	; 0x29
1000e22c:	4a58      	ldr	r2, [pc, #352]	; (1000e390 <main+0x258>)
1000e22e:	5cd3      	ldrb	r3, [r2, r3]
1000e230:	2b00      	cmp	r3, #0
1000e232:	d009      	beq.n	1000e248 <main+0x110>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e234:	2101      	movs	r1, #1
1000e236:	200f      	movs	r0, #15
1000e238:	4f56      	ldr	r7, [pc, #344]	; (1000e394 <main+0x25c>)
1000e23a:	47b8      	blx	r7
				//sms_pressure_poll_data();
				pressure_device.interrupt.new_value = false;
1000e23c:	2100      	movs	r1, #0
1000e23e:	2329      	movs	r3, #41	; 0x29
1000e240:	4a53      	ldr	r2, [pc, #332]	; (1000e390 <main+0x258>)
1000e242:	54d1      	strb	r1, [r2, r3]
				//pressure_device.rts = true;
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e244:	200f      	movs	r0, #15
1000e246:	47b8      	blx	r7
			//sms_dualtimer2_fn();
			//timer2_instance.new_int = false;
			//}
			
			/* Sending region */
			if(imu_device.interrupt.rts) {
1000e248:	2386      	movs	r3, #134	; 0x86
1000e24a:	4a50      	ldr	r2, [pc, #320]	; (1000e38c <main+0x254>)
1000e24c:	5cd3      	ldrb	r3, [r2, r3]
1000e24e:	2b00      	cmp	r3, #0
1000e250:	d015      	beq.n	1000e27e <main+0x146>
				//DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e252:	2101      	movs	r1, #1
1000e254:	200f      	movs	r0, #15
1000e256:	4b4f      	ldr	r3, [pc, #316]	; (1000e394 <main+0x25c>)
1000e258:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e25a:	4b29      	ldr	r3, [pc, #164]	; (1000e300 <main+0x1c8>)
1000e25c:	785b      	ldrb	r3, [r3, #1]
1000e25e:	2b00      	cmp	r3, #0
1000e260:	d103      	bne.n	1000e26a <main+0x132>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e262:	2002      	movs	r0, #2
1000e264:	4b4c      	ldr	r3, [pc, #304]	; (1000e398 <main+0x260>)
1000e266:	4798      	blx	r3
1000e268:	e002      	b.n	1000e270 <main+0x138>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e26a:	484c      	ldr	r0, [pc, #304]	; (1000e39c <main+0x264>)
1000e26c:	4b43      	ldr	r3, [pc, #268]	; (1000e37c <main+0x244>)
1000e26e:	4798      	blx	r3
				}
				imu_device.interrupt.rts = false;
1000e270:	2100      	movs	r1, #0
1000e272:	2386      	movs	r3, #134	; 0x86
1000e274:	4a45      	ldr	r2, [pc, #276]	; (1000e38c <main+0x254>)
1000e276:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e278:	200f      	movs	r0, #15
1000e27a:	4b46      	ldr	r3, [pc, #280]	; (1000e394 <main+0x25c>)
1000e27c:	4798      	blx	r3
			}
			if(pressure_device.interrupt.rts) {
1000e27e:	232a      	movs	r3, #42	; 0x2a
1000e280:	4a43      	ldr	r2, [pc, #268]	; (1000e390 <main+0x258>)
1000e282:	5cd3      	ldrb	r3, [r2, r3]
1000e284:	2b00      	cmp	r3, #0
1000e286:	d093      	beq.n	1000e1b0 <main+0x78>
				DBG_LOG("Press sending (%d/%d)... ", imu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e288:	4838      	ldr	r0, [pc, #224]	; (1000e36c <main+0x234>)
1000e28a:	4b3a      	ldr	r3, [pc, #232]	; (1000e374 <main+0x23c>)
1000e28c:	4798      	blx	r3
1000e28e:	2385      	movs	r3, #133	; 0x85
1000e290:	4a3e      	ldr	r2, [pc, #248]	; (1000e38c <main+0x254>)
1000e292:	5cd1      	ldrb	r1, [r2, r3]
1000e294:	b2c9      	uxtb	r1, r1
1000e296:	4f1a      	ldr	r7, [pc, #104]	; (1000e300 <main+0x1c8>)
1000e298:	787a      	ldrb	r2, [r7, #1]
1000e29a:	b2d2      	uxtb	r2, r2
1000e29c:	4840      	ldr	r0, [pc, #256]	; (1000e3a0 <main+0x268>)
1000e29e:	4b37      	ldr	r3, [pc, #220]	; (1000e37c <main+0x244>)
1000e2a0:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e2a2:	2101      	movs	r1, #1
1000e2a4:	200f      	movs	r0, #15
1000e2a6:	4b3b      	ldr	r3, [pc, #236]	; (1000e394 <main+0x25c>)
1000e2a8:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e2aa:	787b      	ldrb	r3, [r7, #1]
1000e2ac:	2b00      	cmp	r3, #0
1000e2ae:	d103      	bne.n	1000e2b8 <main+0x180>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e2b0:	2001      	movs	r0, #1
1000e2b2:	4b39      	ldr	r3, [pc, #228]	; (1000e398 <main+0x260>)
1000e2b4:	4798      	blx	r3
1000e2b6:	e002      	b.n	1000e2be <main+0x186>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e2b8:	4838      	ldr	r0, [pc, #224]	; (1000e39c <main+0x264>)
1000e2ba:	4b30      	ldr	r3, [pc, #192]	; (1000e37c <main+0x244>)
1000e2bc:	4798      	blx	r3
				}
				pressure_device.interrupt.rts = false;
1000e2be:	2100      	movs	r1, #0
1000e2c0:	232a      	movs	r3, #42	; 0x2a
1000e2c2:	4a33      	ldr	r2, [pc, #204]	; (1000e390 <main+0x258>)
1000e2c4:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e2c6:	200f      	movs	r0, #15
1000e2c8:	4b32      	ldr	r3, [pc, #200]	; (1000e394 <main+0x25c>)
1000e2ca:	4798      	blx	r3
1000e2cc:	e770      	b.n	1000e1b0 <main+0x78>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000e2ce:	2845      	cmp	r0, #69	; 0x45
1000e2d0:	d106      	bne.n	1000e2e0 <main+0x1a8>
			DBG_LOG("GAP timeout");
1000e2d2:	4826      	ldr	r0, [pc, #152]	; (1000e36c <main+0x234>)
1000e2d4:	4b27      	ldr	r3, [pc, #156]	; (1000e374 <main+0x23c>)
1000e2d6:	4798      	blx	r3
1000e2d8:	4832      	ldr	r0, [pc, #200]	; (1000e3a4 <main+0x26c>)
1000e2da:	4b28      	ldr	r3, [pc, #160]	; (1000e37c <main+0x244>)
1000e2dc:	4798      	blx	r3
1000e2de:	e767      	b.n	1000e1b0 <main+0x78>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000e2e0:	28d0      	cmp	r0, #208	; 0xd0
1000e2e2:	d106      	bne.n	1000e2f2 <main+0x1ba>
			DBG_LOG("Event get timeout");
1000e2e4:	4821      	ldr	r0, [pc, #132]	; (1000e36c <main+0x234>)
1000e2e6:	4b23      	ldr	r3, [pc, #140]	; (1000e374 <main+0x23c>)
1000e2e8:	4798      	blx	r3
1000e2ea:	482f      	ldr	r0, [pc, #188]	; (1000e3a8 <main+0x270>)
1000e2ec:	4b23      	ldr	r3, [pc, #140]	; (1000e37c <main+0x244>)
1000e2ee:	4798      	blx	r3
1000e2f0:	e75e      	b.n	1000e1b0 <main+0x78>
		}
		else {
			DBG_LOG("BLE error occurred");
1000e2f2:	0028      	movs	r0, r5
1000e2f4:	4b1f      	ldr	r3, [pc, #124]	; (1000e374 <main+0x23c>)
1000e2f6:	4798      	blx	r3
1000e2f8:	482c      	ldr	r0, [pc, #176]	; (1000e3ac <main+0x274>)
1000e2fa:	4b20      	ldr	r3, [pc, #128]	; (1000e37c <main+0x244>)
1000e2fc:	4798      	blx	r3
1000e2fe:	e757      	b.n	1000e1b0 <main+0x78>
1000e300:	10019f3c 	.word	0x10019f3c
1000e304:	1000d959 	.word	0x1000d959
1000e308:	1000af2d 	.word	0x1000af2d
1000e30c:	1000d64d 	.word	0x1000d64d
1000e310:	1000dead 	.word	0x1000dead
1000e314:	1000e0e5 	.word	0x1000e0e5
1000e318:	1000a251 	.word	0x1000a251
1000e31c:	10008b85 	.word	0x10008b85
1000e320:	10009c45 	.word	0x10009c45
1000e324:	10008f8d 	.word	0x10008f8d
1000e328:	1000a109 	.word	0x1000a109
1000e32c:	10009121 	.word	0x10009121
1000e330:	10008eb5 	.word	0x10008eb5
1000e334:	1000cccd 	.word	0x1000cccd
1000e338:	10008e4d 	.word	0x10008e4d
1000e33c:	10009f11 	.word	0x10009f11
1000e340:	100091bd 	.word	0x100091bd
1000e344:	1000e099 	.word	0x1000e099
1000e348:	1000def1 	.word	0x1000def1
1000e34c:	10008c35 	.word	0x10008c35
1000e350:	1000916d 	.word	0x1000916d
1000e354:	10016c50 	.word	0x10016c50
1000e358:	1000cbfd 	.word	0x1000cbfd
1000e35c:	10016c9c 	.word	0x10016c9c
1000e360:	10008e05 	.word	0x10008e05
1000e364:	10019f34 	.word	0x10019f34
1000e368:	1000d4c5 	.word	0x1000d4c5
1000e36c:	100168d4 	.word	0x100168d4
1000e370:	10019f48 	.word	0x10019f48
1000e374:	10015995 	.word	0x10015995
1000e378:	10018124 	.word	0x10018124
1000e37c:	10015875 	.word	0x10015875
1000e380:	10008c89 	.word	0x10008c89
1000e384:	10018134 	.word	0x10018134
1000e388:	10018150 	.word	0x10018150
1000e38c:	1001a080 	.word	0x1001a080
1000e390:	10019fcc 	.word	0x10019fcc
1000e394:	1000abed 	.word	0x1000abed
1000e398:	10008875 	.word	0x10008875
1000e39c:	10018160 	.word	0x10018160
1000e3a0:	1001816c 	.word	0x1001816c
1000e3a4:	10018188 	.word	0x10018188
1000e3a8:	10018194 	.word	0x10018194
1000e3ac:	100181a8 	.word	0x100181a8

1000e3b0 <internal_event_post>:
1000e3b0:	b570      	push	{r4, r5, r6, lr}
1000e3b2:	4d12      	ldr	r5, [pc, #72]	; (1000e3fc <internal_event_post+0x4c>)
1000e3b4:	682c      	ldr	r4, [r5, #0]
1000e3b6:	2c00      	cmp	r4, #0
1000e3b8:	d014      	beq.n	1000e3e4 <internal_event_post+0x34>
1000e3ba:	6826      	ldr	r6, [r4, #0]
1000e3bc:	60e2      	str	r2, [r4, #12]
1000e3be:	602e      	str	r6, [r5, #0]
1000e3c0:	2500      	movs	r5, #0
1000e3c2:	4a0f      	ldr	r2, [pc, #60]	; (1000e400 <internal_event_post+0x50>)
1000e3c4:	8123      	strh	r3, [r4, #8]
1000e3c6:	6813      	ldr	r3, [r2, #0]
1000e3c8:	6025      	str	r5, [r4, #0]
1000e3ca:	80a0      	strh	r0, [r4, #4]
1000e3cc:	80e1      	strh	r1, [r4, #6]
1000e3ce:	42ab      	cmp	r3, r5
1000e3d0:	d101      	bne.n	1000e3d6 <internal_event_post+0x26>
1000e3d2:	6014      	str	r4, [r2, #0]
1000e3d4:	e011      	b.n	1000e3fa <internal_event_post+0x4a>
1000e3d6:	681a      	ldr	r2, [r3, #0]
1000e3d8:	2a00      	cmp	r2, #0
1000e3da:	d001      	beq.n	1000e3e0 <internal_event_post+0x30>
1000e3dc:	1c13      	adds	r3, r2, #0
1000e3de:	e7fa      	b.n	1000e3d6 <internal_event_post+0x26>
1000e3e0:	601c      	str	r4, [r3, #0]
1000e3e2:	e00a      	b.n	1000e3fa <internal_event_post+0x4a>
1000e3e4:	b2c4      	uxtb	r4, r0
1000e3e6:	2c00      	cmp	r4, #0
1000e3e8:	d107      	bne.n	1000e3fa <internal_event_post+0x4a>
1000e3ea:	4c06      	ldr	r4, [pc, #24]	; (1000e404 <internal_event_post+0x54>)
1000e3ec:	60e2      	str	r2, [r4, #12]
1000e3ee:	2201      	movs	r2, #1
1000e3f0:	8123      	strh	r3, [r4, #8]
1000e3f2:	4b05      	ldr	r3, [pc, #20]	; (1000e408 <internal_event_post+0x58>)
1000e3f4:	80a0      	strh	r0, [r4, #4]
1000e3f6:	80e1      	strh	r1, [r4, #6]
1000e3f8:	701a      	strb	r2, [r3, #0]
1000e3fa:	bd70      	pop	{r4, r5, r6, pc}
1000e3fc:	10019e78 	.word	0x10019e78
1000e400:	10019e74 	.word	0x10019e74
1000e404:	10019e60 	.word	0x10019e60
1000e408:	10019e70 	.word	0x10019e70

1000e40c <internal_event_init>:
1000e40c:	b510      	push	{r4, lr}
1000e40e:	4b08      	ldr	r3, [pc, #32]	; (1000e430 <internal_event_init+0x24>)
1000e410:	0900      	lsrs	r0, r0, #4
1000e412:	0100      	lsls	r0, r0, #4
1000e414:	681a      	ldr	r2, [r3, #0]
1000e416:	1808      	adds	r0, r1, r0
1000e418:	4281      	cmp	r1, r0
1000e41a:	d003      	beq.n	1000e424 <internal_event_init+0x18>
1000e41c:	600a      	str	r2, [r1, #0]
1000e41e:	1c0a      	adds	r2, r1, #0
1000e420:	3110      	adds	r1, #16
1000e422:	e7f9      	b.n	1000e418 <internal_event_init+0xc>
1000e424:	601a      	str	r2, [r3, #0]
1000e426:	2200      	movs	r2, #0
1000e428:	4b02      	ldr	r3, [pc, #8]	; (1000e434 <internal_event_init+0x28>)
1000e42a:	601a      	str	r2, [r3, #0]
1000e42c:	bd10      	pop	{r4, pc}
1000e42e:	46c0      	nop			; (mov r8, r8)
1000e430:	10019e78 	.word	0x10019e78
1000e434:	10019e74 	.word	0x10019e74

1000e438 <special_events_handler>:
1000e438:	b538      	push	{r3, r4, r5, lr}
1000e43a:	4c1b      	ldr	r4, [pc, #108]	; (1000e4a8 <special_events_handler+0x70>)
1000e43c:	1c03      	adds	r3, r0, #0
1000e43e:	8825      	ldrh	r5, [r4, #0]
1000e440:	1c08      	adds	r0, r1, #0
1000e442:	1c21      	adds	r1, r4, #0
1000e444:	429d      	cmp	r5, r3
1000e446:	d107      	bne.n	1000e458 <special_events_handler+0x20>
1000e448:	88a5      	ldrh	r5, [r4, #4]
1000e44a:	4285      	cmp	r5, r0
1000e44c:	d104      	bne.n	1000e458 <special_events_handler+0x20>
1000e44e:	2301      	movs	r3, #1
1000e450:	425b      	negs	r3, r3
1000e452:	8023      	strh	r3, [r4, #0]
1000e454:	60a2      	str	r2, [r4, #8]
1000e456:	e009      	b.n	1000e46c <special_events_handler+0x34>
1000e458:	884c      	ldrh	r4, [r1, #2]
1000e45a:	429c      	cmp	r4, r3
1000e45c:	d10a      	bne.n	1000e474 <special_events_handler+0x3c>
1000e45e:	888c      	ldrh	r4, [r1, #4]
1000e460:	4284      	cmp	r4, r0
1000e462:	d107      	bne.n	1000e474 <special_events_handler+0x3c>
1000e464:	2301      	movs	r3, #1
1000e466:	425b      	negs	r3, r3
1000e468:	804b      	strh	r3, [r1, #2]
1000e46a:	608a      	str	r2, [r1, #8]
1000e46c:	4b0f      	ldr	r3, [pc, #60]	; (1000e4ac <special_events_handler+0x74>)
1000e46e:	4798      	blx	r3
1000e470:	2001      	movs	r0, #1
1000e472:	e017      	b.n	1000e4a4 <special_events_handler+0x6c>
1000e474:	490e      	ldr	r1, [pc, #56]	; (1000e4b0 <special_events_handler+0x78>)
1000e476:	428b      	cmp	r3, r1
1000e478:	d00e      	beq.n	1000e498 <special_events_handler+0x60>
1000e47a:	490e      	ldr	r1, [pc, #56]	; (1000e4b4 <special_events_handler+0x7c>)
1000e47c:	428b      	cmp	r3, r1
1000e47e:	d007      	beq.n	1000e490 <special_events_handler+0x58>
1000e480:	490d      	ldr	r1, [pc, #52]	; (1000e4b8 <special_events_handler+0x80>)
1000e482:	2000      	movs	r0, #0
1000e484:	428b      	cmp	r3, r1
1000e486:	d10d      	bne.n	1000e4a4 <special_events_handler+0x6c>
1000e488:	1c10      	adds	r0, r2, #0
1000e48a:	4b0c      	ldr	r3, [pc, #48]	; (1000e4bc <special_events_handler+0x84>)
1000e48c:	4798      	blx	r3
1000e48e:	e7ef      	b.n	1000e470 <special_events_handler+0x38>
1000e490:	1c11      	adds	r1, r2, #0
1000e492:	4b0b      	ldr	r3, [pc, #44]	; (1000e4c0 <special_events_handler+0x88>)
1000e494:	2200      	movs	r2, #0
1000e496:	e002      	b.n	1000e49e <special_events_handler+0x66>
1000e498:	1c11      	adds	r1, r2, #0
1000e49a:	2200      	movs	r2, #0
1000e49c:	4b09      	ldr	r3, [pc, #36]	; (1000e4c4 <special_events_handler+0x8c>)
1000e49e:	4798      	blx	r3
1000e4a0:	4243      	negs	r3, r0
1000e4a2:	4158      	adcs	r0, r3
1000e4a4:	bd38      	pop	{r3, r4, r5, pc}
1000e4a6:	46c0      	nop			; (mov r8, r8)
1000e4a8:	1001ade4 	.word	0x1001ade4
1000e4ac:	1000fe95 	.word	0x1000fe95
1000e4b0:	00000e13 	.word	0x00000e13
1000e4b4:	00000e15 	.word	0x00000e15
1000e4b8:	00000e01 	.word	0x00000e01
1000e4bc:	10010205 	.word	0x10010205
1000e4c0:	100103c5 	.word	0x100103c5
1000e4c4:	1001049d 	.word	0x1001049d

1000e4c8 <at_ble_event_get>:
1000e4c8:	2300      	movs	r3, #0
1000e4ca:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e4cc:	b087      	sub	sp, #28
1000e4ce:	9204      	str	r2, [sp, #16]
1000e4d0:	7003      	strb	r3, [r0, #0]
1000e4d2:	9b04      	ldr	r3, [sp, #16]
1000e4d4:	9003      	str	r0, [sp, #12]
1000e4d6:	3b01      	subs	r3, #1
1000e4d8:	1c0d      	adds	r5, r1, #0
1000e4da:	9305      	str	r3, [sp, #20]
1000e4dc:	3303      	adds	r3, #3
1000e4de:	d802      	bhi.n	1000e4e6 <at_ble_event_get+0x1e>
1000e4e0:	9804      	ldr	r0, [sp, #16]
1000e4e2:	4bae      	ldr	r3, [pc, #696]	; (1000e79c <at_ble_event_get+0x2d4>)
1000e4e4:	4798      	blx	r3
1000e4e6:	9b05      	ldr	r3, [sp, #20]
1000e4e8:	4cad      	ldr	r4, [pc, #692]	; (1000e7a0 <at_ble_event_get+0x2d8>)
1000e4ea:	3303      	adds	r3, #3
1000e4ec:	d902      	bls.n	1000e4f4 <at_ble_event_get+0x2c>
1000e4ee:	2300      	movs	r3, #0
1000e4f0:	9302      	str	r3, [sp, #8]
1000e4f2:	e015      	b.n	1000e520 <at_ble_event_get+0x58>
1000e4f4:	2300      	movs	r3, #0
1000e4f6:	9302      	str	r3, [sp, #8]
1000e4f8:	6823      	ldr	r3, [r4, #0]
1000e4fa:	2b00      	cmp	r3, #0
1000e4fc:	d113      	bne.n	1000e526 <at_ble_event_get+0x5e>
1000e4fe:	9b02      	ldr	r3, [sp, #8]
1000e500:	2bd0      	cmp	r3, #208	; 0xd0
1000e502:	d100      	bne.n	1000e506 <at_ble_event_get+0x3e>
1000e504:	e2da      	b.n	1000eabc <at_ble_event_get+0x5f4>
1000e506:	9804      	ldr	r0, [sp, #16]
1000e508:	4ba6      	ldr	r3, [pc, #664]	; (1000e7a4 <at_ble_event_get+0x2dc>)
1000e50a:	4798      	blx	r3
1000e50c:	9002      	str	r0, [sp, #8]
1000e50e:	2802      	cmp	r0, #2
1000e510:	d1f2      	bne.n	1000e4f8 <at_ble_event_get+0x30>
1000e512:	e03f      	b.n	1000e594 <at_ble_event_get+0xcc>
1000e514:	9804      	ldr	r0, [sp, #16]
1000e516:	4ba3      	ldr	r3, [pc, #652]	; (1000e7a4 <at_ble_event_get+0x2dc>)
1000e518:	4798      	blx	r3
1000e51a:	9002      	str	r0, [sp, #8]
1000e51c:	2802      	cmp	r0, #2
1000e51e:	d039      	beq.n	1000e594 <at_ble_event_get+0xcc>
1000e520:	6823      	ldr	r3, [r4, #0]
1000e522:	2b00      	cmp	r3, #0
1000e524:	d0f6      	beq.n	1000e514 <at_ble_event_get+0x4c>
1000e526:	9b02      	ldr	r3, [sp, #8]
1000e528:	2bd0      	cmp	r3, #208	; 0xd0
1000e52a:	d100      	bne.n	1000e52e <at_ble_event_get+0x66>
1000e52c:	e2c6      	b.n	1000eabc <at_ble_event_get+0x5f4>
1000e52e:	9b02      	ldr	r3, [sp, #8]
1000e530:	3b03      	subs	r3, #3
1000e532:	1e5a      	subs	r2, r3, #1
1000e534:	4193      	sbcs	r3, r2
1000e536:	9a02      	ldr	r2, [sp, #8]
1000e538:	425b      	negs	r3, r3
1000e53a:	401a      	ands	r2, r3
1000e53c:	6823      	ldr	r3, [r4, #0]
1000e53e:	9202      	str	r2, [sp, #8]
1000e540:	2b00      	cmp	r3, #0
1000e542:	d100      	bne.n	1000e546 <at_ble_event_get+0x7e>
1000e544:	e2c2      	b.n	1000eacc <at_ble_event_get+0x604>
1000e546:	681a      	ldr	r2, [r3, #0]
1000e548:	68de      	ldr	r6, [r3, #12]
1000e54a:	6022      	str	r2, [r4, #0]
1000e54c:	88da      	ldrh	r2, [r3, #6]
1000e54e:	9201      	str	r2, [sp, #4]
1000e550:	4a95      	ldr	r2, [pc, #596]	; (1000e7a8 <at_ble_event_get+0x2e0>)
1000e552:	889c      	ldrh	r4, [r3, #4]
1000e554:	6811      	ldr	r1, [r2, #0]
1000e556:	6013      	str	r3, [r2, #0]
1000e558:	6019      	str	r1, [r3, #0]
1000e55a:	4b94      	ldr	r3, [pc, #592]	; (1000e7ac <at_ble_event_get+0x2e4>)
1000e55c:	781b      	ldrb	r3, [r3, #0]
1000e55e:	2b01      	cmp	r3, #1
1000e560:	d10f      	bne.n	1000e582 <at_ble_event_get+0xba>
1000e562:	4b93      	ldr	r3, [pc, #588]	; (1000e7b0 <at_ble_event_get+0x2e8>)
1000e564:	4a92      	ldr	r2, [pc, #584]	; (1000e7b0 <at_ble_event_get+0x2e8>)
1000e566:	8898      	ldrh	r0, [r3, #4]
1000e568:	88d9      	ldrh	r1, [r3, #6]
1000e56a:	68d2      	ldr	r2, [r2, #12]
1000e56c:	891b      	ldrh	r3, [r3, #8]
1000e56e:	4f91      	ldr	r7, [pc, #580]	; (1000e7b4 <at_ble_event_get+0x2ec>)
1000e570:	47b8      	blx	r7
1000e572:	2210      	movs	r2, #16
1000e574:	4b90      	ldr	r3, [pc, #576]	; (1000e7b8 <at_ble_event_get+0x2f0>)
1000e576:	488e      	ldr	r0, [pc, #568]	; (1000e7b0 <at_ble_event_get+0x2e8>)
1000e578:	2100      	movs	r1, #0
1000e57a:	4798      	blx	r3
1000e57c:	2300      	movs	r3, #0
1000e57e:	4a8b      	ldr	r2, [pc, #556]	; (1000e7ac <at_ble_event_get+0x2e4>)
1000e580:	7013      	strb	r3, [r2, #0]
1000e582:	9b02      	ldr	r3, [sp, #8]
1000e584:	2b00      	cmp	r3, #0
1000e586:	d114      	bne.n	1000e5b2 <at_ble_event_get+0xea>
1000e588:	4b8c      	ldr	r3, [pc, #560]	; (1000e7bc <at_ble_event_get+0x2f4>)
1000e58a:	429c      	cmp	r4, r3
1000e58c:	d009      	beq.n	1000e5a2 <at_ble_event_get+0xda>
1000e58e:	4b8c      	ldr	r3, [pc, #560]	; (1000e7c0 <at_ble_event_get+0x2f8>)
1000e590:	429c      	cmp	r4, r3
1000e592:	d127      	bne.n	1000e5e4 <at_ble_event_get+0x11c>
1000e594:	233a      	movs	r3, #58	; 0x3a
1000e596:	9a03      	ldr	r2, [sp, #12]
1000e598:	7013      	strb	r3, [r2, #0]
1000e59a:	2300      	movs	r3, #0
1000e59c:	9302      	str	r3, [sp, #8]
1000e59e:	1c1d      	adds	r5, r3, #0
1000e5a0:	e007      	b.n	1000e5b2 <at_ble_event_get+0xea>
1000e5a2:	9b01      	ldr	r3, [sp, #4]
1000e5a4:	42a3      	cmp	r3, r4
1000e5a6:	d000      	beq.n	1000e5aa <at_ble_event_get+0xe2>
1000e5a8:	e28a      	b.n	1000eac0 <at_ble_event_get+0x5f8>
1000e5aa:	2338      	movs	r3, #56	; 0x38
1000e5ac:	9a03      	ldr	r2, [sp, #12]
1000e5ae:	7013      	strb	r3, [r2, #0]
1000e5b0:	602e      	str	r6, [r5, #0]
1000e5b2:	9b03      	ldr	r3, [sp, #12]
1000e5b4:	781b      	ldrb	r3, [r3, #0]
1000e5b6:	2b3b      	cmp	r3, #59	; 0x3b
1000e5b8:	d101      	bne.n	1000e5be <at_ble_event_get+0xf6>
1000e5ba:	4b82      	ldr	r3, [pc, #520]	; (1000e7c4 <at_ble_event_get+0x2fc>)
1000e5bc:	4798      	blx	r3
1000e5be:	9b03      	ldr	r3, [sp, #12]
1000e5c0:	781b      	ldrb	r3, [r3, #0]
1000e5c2:	2b3b      	cmp	r3, #59	; 0x3b
1000e5c4:	d003      	beq.n	1000e5ce <at_ble_event_get+0x106>
1000e5c6:	9b05      	ldr	r3, [sp, #20]
1000e5c8:	3303      	adds	r3, #3
1000e5ca:	d904      	bls.n	1000e5d6 <at_ble_event_get+0x10e>
1000e5cc:	e283      	b.n	1000ead6 <at_ble_event_get+0x60e>
1000e5ce:	9b02      	ldr	r3, [sp, #8]
1000e5d0:	2b00      	cmp	r3, #0
1000e5d2:	d088      	beq.n	1000e4e6 <at_ble_event_get+0x1e>
1000e5d4:	e7f7      	b.n	1000e5c6 <at_ble_event_get+0xfe>
1000e5d6:	9b02      	ldr	r3, [sp, #8]
1000e5d8:	2bd0      	cmp	r3, #208	; 0xd0
1000e5da:	d100      	bne.n	1000e5de <at_ble_event_get+0x116>
1000e5dc:	e27b      	b.n	1000ead6 <at_ble_event_get+0x60e>
1000e5de:	4b7a      	ldr	r3, [pc, #488]	; (1000e7c8 <at_ble_event_get+0x300>)
1000e5e0:	4798      	blx	r3
1000e5e2:	e278      	b.n	1000ead6 <at_ble_event_get+0x60e>
1000e5e4:	9b01      	ldr	r3, [sp, #4]
1000e5e6:	2bbb      	cmp	r3, #187	; 0xbb
1000e5e8:	d125      	bne.n	1000e636 <at_ble_event_get+0x16e>
1000e5ea:	2cbb      	cmp	r4, #187	; 0xbb
1000e5ec:	d123      	bne.n	1000e636 <at_ble_event_get+0x16e>
1000e5ee:	466b      	mov	r3, sp
1000e5f0:	891b      	ldrh	r3, [r3, #8]
1000e5f2:	80ab      	strh	r3, [r5, #4]
1000e5f4:	78b3      	ldrb	r3, [r6, #2]
1000e5f6:	7872      	ldrb	r2, [r6, #1]
1000e5f8:	78f0      	ldrb	r0, [r6, #3]
1000e5fa:	021b      	lsls	r3, r3, #8
1000e5fc:	4313      	orrs	r3, r2
1000e5fe:	7971      	ldrb	r1, [r6, #5]
1000e600:	7932      	ldrb	r2, [r6, #4]
1000e602:	70a8      	strb	r0, [r5, #2]
1000e604:	4871      	ldr	r0, [pc, #452]	; (1000e7cc <at_ble_event_get+0x304>)
1000e606:	802b      	strh	r3, [r5, #0]
1000e608:	4283      	cmp	r3, r0
1000e60a:	d806      	bhi.n	1000e61a <at_ble_event_get+0x152>
1000e60c:	4a70      	ldr	r2, [pc, #448]	; (1000e7d0 <at_ble_event_get+0x308>)
1000e60e:	4293      	cmp	r3, r2
1000e610:	d20b      	bcs.n	1000e62a <at_ble_event_get+0x162>
1000e612:	4a70      	ldr	r2, [pc, #448]	; (1000e7d4 <at_ble_event_get+0x30c>)
1000e614:	4293      	cmp	r3, r2
1000e616:	d008      	beq.n	1000e62a <at_ble_event_get+0x162>
1000e618:	e009      	b.n	1000e62e <at_ble_event_get+0x166>
1000e61a:	486f      	ldr	r0, [pc, #444]	; (1000e7d8 <at_ble_event_get+0x310>)
1000e61c:	4283      	cmp	r3, r0
1000e61e:	d106      	bne.n	1000e62e <at_ble_event_get+0x166>
1000e620:	020b      	lsls	r3, r1, #8
1000e622:	4313      	orrs	r3, r2
1000e624:	80ab      	strh	r3, [r5, #4]
1000e626:	2337      	movs	r3, #55	; 0x37
1000e628:	e002      	b.n	1000e630 <at_ble_event_get+0x168>
1000e62a:	2336      	movs	r3, #54	; 0x36
1000e62c:	e000      	b.n	1000e630 <at_ble_event_get+0x168>
1000e62e:	2300      	movs	r3, #0
1000e630:	9a03      	ldr	r2, [sp, #12]
1000e632:	7013      	strb	r3, [r2, #0]
1000e634:	e7bd      	b.n	1000e5b2 <at_ble_event_get+0xea>
1000e636:	4b69      	ldr	r3, [pc, #420]	; (1000e7dc <at_ble_event_get+0x314>)
1000e638:	429c      	cmp	r4, r3
1000e63a:	d100      	bne.n	1000e63e <at_ble_event_get+0x176>
1000e63c:	e144      	b.n	1000e8c8 <at_ble_event_get+0x400>
1000e63e:	d865      	bhi.n	1000e70c <at_ble_event_get+0x244>
1000e640:	4b67      	ldr	r3, [pc, #412]	; (1000e7e0 <at_ble_event_get+0x318>)
1000e642:	429c      	cmp	r4, r3
1000e644:	d100      	bne.n	1000e648 <at_ble_event_get+0x180>
1000e646:	e1d5      	b.n	1000e9f4 <at_ble_event_get+0x52c>
1000e648:	d82f      	bhi.n	1000e6aa <at_ble_event_get+0x1e2>
1000e64a:	4b66      	ldr	r3, [pc, #408]	; (1000e7e4 <at_ble_event_get+0x31c>)
1000e64c:	429c      	cmp	r4, r3
1000e64e:	d100      	bne.n	1000e652 <at_ble_event_get+0x18a>
1000e650:	e1e0      	b.n	1000ea14 <at_ble_event_get+0x54c>
1000e652:	d813      	bhi.n	1000e67c <at_ble_event_get+0x1b4>
1000e654:	4b64      	ldr	r3, [pc, #400]	; (1000e7e8 <at_ble_event_get+0x320>)
1000e656:	429c      	cmp	r4, r3
1000e658:	d100      	bne.n	1000e65c <at_ble_event_get+0x194>
1000e65a:	e1a3      	b.n	1000e9a4 <at_ble_event_get+0x4dc>
1000e65c:	d804      	bhi.n	1000e668 <at_ble_event_get+0x1a0>
1000e65e:	2638      	movs	r6, #56	; 0x38
1000e660:	42b4      	cmp	r4, r6
1000e662:	d100      	bne.n	1000e666 <at_ble_event_get+0x19e>
1000e664:	e225      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e666:	e117      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e668:	4b60      	ldr	r3, [pc, #384]	; (1000e7ec <at_ble_event_get+0x324>)
1000e66a:	429c      	cmp	r4, r3
1000e66c:	d100      	bne.n	1000e670 <at_ble_event_get+0x1a8>
1000e66e:	e19f      	b.n	1000e9b0 <at_ble_event_get+0x4e8>
1000e670:	33fe      	adds	r3, #254	; 0xfe
1000e672:	33ff      	adds	r3, #255	; 0xff
1000e674:	429c      	cmp	r4, r3
1000e676:	d100      	bne.n	1000e67a <at_ble_event_get+0x1b2>
1000e678:	e1d3      	b.n	1000ea22 <at_ble_event_get+0x55a>
1000e67a:	e10d      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e67c:	4b5c      	ldr	r3, [pc, #368]	; (1000e7f0 <at_ble_event_get+0x328>)
1000e67e:	429c      	cmp	r4, r3
1000e680:	d100      	bne.n	1000e684 <at_ble_event_get+0x1bc>
1000e682:	e1a9      	b.n	1000e9d8 <at_ble_event_get+0x510>
1000e684:	d808      	bhi.n	1000e698 <at_ble_event_get+0x1d0>
1000e686:	4b5b      	ldr	r3, [pc, #364]	; (1000e7f4 <at_ble_event_get+0x32c>)
1000e688:	429c      	cmp	r4, r3
1000e68a:	d100      	bne.n	1000e68e <at_ble_event_get+0x1c6>
1000e68c:	e196      	b.n	1000e9bc <at_ble_event_get+0x4f4>
1000e68e:	4b5a      	ldr	r3, [pc, #360]	; (1000e7f8 <at_ble_event_get+0x330>)
1000e690:	429c      	cmp	r4, r3
1000e692:	d100      	bne.n	1000e696 <at_ble_event_get+0x1ce>
1000e694:	e199      	b.n	1000e9ca <at_ble_event_get+0x502>
1000e696:	e0ff      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e698:	4b58      	ldr	r3, [pc, #352]	; (1000e7fc <at_ble_event_get+0x334>)
1000e69a:	429c      	cmp	r4, r3
1000e69c:	d100      	bne.n	1000e6a0 <at_ble_event_get+0x1d8>
1000e69e:	e1a2      	b.n	1000e9e6 <at_ble_event_get+0x51e>
1000e6a0:	4b57      	ldr	r3, [pc, #348]	; (1000e800 <at_ble_event_get+0x338>)
1000e6a2:	429c      	cmp	r4, r3
1000e6a4:	d100      	bne.n	1000e6a8 <at_ble_event_get+0x1e0>
1000e6a6:	e1d4      	b.n	1000ea52 <at_ble_event_get+0x58a>
1000e6a8:	e0f6      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e6aa:	4b56      	ldr	r3, [pc, #344]	; (1000e804 <at_ble_event_get+0x33c>)
1000e6ac:	429c      	cmp	r4, r3
1000e6ae:	d100      	bne.n	1000e6b2 <at_ble_event_get+0x1ea>
1000e6b0:	e1c8      	b.n	1000ea44 <at_ble_event_get+0x57c>
1000e6b2:	d812      	bhi.n	1000e6da <at_ble_event_get+0x212>
1000e6b4:	4b54      	ldr	r3, [pc, #336]	; (1000e808 <at_ble_event_get+0x340>)
1000e6b6:	429c      	cmp	r4, r3
1000e6b8:	d100      	bne.n	1000e6bc <at_ble_event_get+0x1f4>
1000e6ba:	e1d1      	b.n	1000ea60 <at_ble_event_get+0x598>
1000e6bc:	d804      	bhi.n	1000e6c8 <at_ble_event_get+0x200>
1000e6be:	4b53      	ldr	r3, [pc, #332]	; (1000e80c <at_ble_event_get+0x344>)
1000e6c0:	429c      	cmp	r4, r3
1000e6c2:	d100      	bne.n	1000e6c6 <at_ble_event_get+0x1fe>
1000e6c4:	e19b      	b.n	1000e9fe <at_ble_event_get+0x536>
1000e6c6:	e0e7      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e6c8:	4b51      	ldr	r3, [pc, #324]	; (1000e810 <at_ble_event_get+0x348>)
1000e6ca:	429c      	cmp	r4, r3
1000e6cc:	d100      	bne.n	1000e6d0 <at_ble_event_get+0x208>
1000e6ce:	e1ad      	b.n	1000ea2c <at_ble_event_get+0x564>
1000e6d0:	4b50      	ldr	r3, [pc, #320]	; (1000e814 <at_ble_event_get+0x34c>)
1000e6d2:	429c      	cmp	r4, r3
1000e6d4:	d100      	bne.n	1000e6d8 <at_ble_event_get+0x210>
1000e6d6:	e1b0      	b.n	1000ea3a <at_ble_event_get+0x572>
1000e6d8:	e0de      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e6da:	4b4f      	ldr	r3, [pc, #316]	; (1000e818 <at_ble_event_get+0x350>)
1000e6dc:	429c      	cmp	r4, r3
1000e6de:	d100      	bne.n	1000e6e2 <at_ble_event_get+0x21a>
1000e6e0:	e0e0      	b.n	1000e8a4 <at_ble_event_get+0x3dc>
1000e6e2:	d809      	bhi.n	1000e6f8 <at_ble_event_get+0x230>
1000e6e4:	3b08      	subs	r3, #8
1000e6e6:	429c      	cmp	r4, r3
1000e6e8:	d100      	bne.n	1000e6ec <at_ble_event_get+0x224>
1000e6ea:	e0d7      	b.n	1000e89c <at_ble_event_get+0x3d4>
1000e6ec:	4b4b      	ldr	r3, [pc, #300]	; (1000e81c <at_ble_event_get+0x354>)
1000e6ee:	2639      	movs	r6, #57	; 0x39
1000e6f0:	429c      	cmp	r4, r3
1000e6f2:	d100      	bne.n	1000e6f6 <at_ble_event_get+0x22e>
1000e6f4:	e1dd      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e6f6:	e0cf      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e6f8:	23d1      	movs	r3, #209	; 0xd1
1000e6fa:	011b      	lsls	r3, r3, #4
1000e6fc:	429c      	cmp	r4, r3
1000e6fe:	d100      	bne.n	1000e702 <at_ble_event_get+0x23a>
1000e700:	e0d6      	b.n	1000e8b0 <at_ble_event_get+0x3e8>
1000e702:	4b47      	ldr	r3, [pc, #284]	; (1000e820 <at_ble_event_get+0x358>)
1000e704:	429c      	cmp	r4, r3
1000e706:	d100      	bne.n	1000e70a <at_ble_event_get+0x242>
1000e708:	e0d8      	b.n	1000e8bc <at_ble_event_get+0x3f4>
1000e70a:	e0c5      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e70c:	4b45      	ldr	r3, [pc, #276]	; (1000e824 <at_ble_event_get+0x35c>)
1000e70e:	429c      	cmp	r4, r3
1000e710:	d100      	bne.n	1000e714 <at_ble_event_get+0x24c>
1000e712:	e117      	b.n	1000e944 <at_ble_event_get+0x47c>
1000e714:	d82e      	bhi.n	1000e774 <at_ble_event_get+0x2ac>
1000e716:	4b44      	ldr	r3, [pc, #272]	; (1000e828 <at_ble_event_get+0x360>)
1000e718:	429c      	cmp	r4, r3
1000e71a:	d100      	bne.n	1000e71e <at_ble_event_get+0x256>
1000e71c:	e13d      	b.n	1000e99a <at_ble_event_get+0x4d2>
1000e71e:	d812      	bhi.n	1000e746 <at_ble_event_get+0x27e>
1000e720:	4b42      	ldr	r3, [pc, #264]	; (1000e82c <at_ble_event_get+0x364>)
1000e722:	429c      	cmp	r4, r3
1000e724:	d100      	bne.n	1000e728 <at_ble_event_get+0x260>
1000e726:	e0e8      	b.n	1000e8fa <at_ble_event_get+0x432>
1000e728:	d804      	bhi.n	1000e734 <at_ble_event_get+0x26c>
1000e72a:	3b03      	subs	r3, #3
1000e72c:	429c      	cmp	r4, r3
1000e72e:	d100      	bne.n	1000e732 <at_ble_event_get+0x26a>
1000e730:	e0d0      	b.n	1000e8d4 <at_ble_event_get+0x40c>
1000e732:	e0b1      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e734:	4b3e      	ldr	r3, [pc, #248]	; (1000e830 <at_ble_event_get+0x368>)
1000e736:	429c      	cmp	r4, r3
1000e738:	d100      	bne.n	1000e73c <at_ble_event_get+0x274>
1000e73a:	e0d0      	b.n	1000e8de <at_ble_event_get+0x416>
1000e73c:	4b3d      	ldr	r3, [pc, #244]	; (1000e834 <at_ble_event_get+0x36c>)
1000e73e:	429c      	cmp	r4, r3
1000e740:	d100      	bne.n	1000e744 <at_ble_event_get+0x27c>
1000e742:	e0f9      	b.n	1000e938 <at_ble_event_get+0x470>
1000e744:	e0a8      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e746:	4b3c      	ldr	r3, [pc, #240]	; (1000e838 <at_ble_event_get+0x370>)
1000e748:	429c      	cmp	r4, r3
1000e74a:	d100      	bne.n	1000e74e <at_ble_event_get+0x286>
1000e74c:	e0db      	b.n	1000e906 <at_ble_event_get+0x43e>
1000e74e:	d808      	bhi.n	1000e762 <at_ble_event_get+0x29a>
1000e750:	4b3a      	ldr	r3, [pc, #232]	; (1000e83c <at_ble_event_get+0x374>)
1000e752:	429c      	cmp	r4, r3
1000e754:	d100      	bne.n	1000e758 <at_ble_event_get+0x290>
1000e756:	e11b      	b.n	1000e990 <at_ble_event_get+0x4c8>
1000e758:	4b39      	ldr	r3, [pc, #228]	; (1000e840 <at_ble_event_get+0x378>)
1000e75a:	429c      	cmp	r4, r3
1000e75c:	d100      	bne.n	1000e760 <at_ble_event_get+0x298>
1000e75e:	e0d8      	b.n	1000e912 <at_ble_event_get+0x44a>
1000e760:	e09a      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e762:	4b38      	ldr	r3, [pc, #224]	; (1000e844 <at_ble_event_get+0x37c>)
1000e764:	429c      	cmp	r4, r3
1000e766:	d100      	bne.n	1000e76a <at_ble_event_get+0x2a2>
1000e768:	e0d8      	b.n	1000e91c <at_ble_event_get+0x454>
1000e76a:	4b37      	ldr	r3, [pc, #220]	; (1000e848 <at_ble_event_get+0x380>)
1000e76c:	429c      	cmp	r4, r3
1000e76e:	d100      	bne.n	1000e772 <at_ble_event_get+0x2aa>
1000e770:	e0db      	b.n	1000e92a <at_ble_event_get+0x462>
1000e772:	e091      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e774:	4b35      	ldr	r3, [pc, #212]	; (1000e84c <at_ble_event_get+0x384>)
1000e776:	429c      	cmp	r4, r3
1000e778:	d100      	bne.n	1000e77c <at_ble_event_get+0x2b4>
1000e77a:	e0f7      	b.n	1000e96c <at_ble_event_get+0x4a4>
1000e77c:	d876      	bhi.n	1000e86c <at_ble_event_get+0x3a4>
1000e77e:	4b34      	ldr	r3, [pc, #208]	; (1000e850 <at_ble_event_get+0x388>)
1000e780:	429c      	cmp	r4, r3
1000e782:	d100      	bne.n	1000e786 <at_ble_event_get+0x2be>
1000e784:	e0f8      	b.n	1000e978 <at_ble_event_get+0x4b0>
1000e786:	d869      	bhi.n	1000e85c <at_ble_event_get+0x394>
1000e788:	4b32      	ldr	r3, [pc, #200]	; (1000e854 <at_ble_event_get+0x38c>)
1000e78a:	429c      	cmp	r4, r3
1000e78c:	d100      	bne.n	1000e790 <at_ble_event_get+0x2c8>
1000e78e:	e0e0      	b.n	1000e952 <at_ble_event_get+0x48a>
1000e790:	4b31      	ldr	r3, [pc, #196]	; (1000e858 <at_ble_event_get+0x390>)
1000e792:	429c      	cmp	r4, r3
1000e794:	d100      	bne.n	1000e798 <at_ble_event_get+0x2d0>
1000e796:	e0a9      	b.n	1000e8ec <at_ble_event_get+0x424>
1000e798:	e07e      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e79a:	46c0      	nop			; (mov r8, r8)
1000e79c:	1000fecd 	.word	0x1000fecd
1000e7a0:	10019e74 	.word	0x10019e74
1000e7a4:	1000dc49 	.word	0x1000dc49
1000e7a8:	10019e78 	.word	0x10019e78
1000e7ac:	10019e70 	.word	0x10019e70
1000e7b0:	10019e60 	.word	0x10019e60
1000e7b4:	1000e3b1 	.word	0x1000e3b1
1000e7b8:	1001572d 	.word	0x1001572d
1000e7bc:	0000ffff 	.word	0x0000ffff
1000e7c0:	0000fffe 	.word	0x0000fffe
1000e7c4:	1000dec1 	.word	0x1000dec1
1000e7c8:	1000fecf 	.word	0x1000fecf
1000e7cc:	0000201e 	.word	0x0000201e
1000e7d0:	0000201d 	.word	0x0000201d
1000e7d4:	00000c03 	.word	0x00000c03
1000e7d8:	0000201f 	.word	0x0000201f
1000e7dc:	00000d1c 	.word	0x00000d1c
1000e7e0:	00000c0c 	.word	0x00000c0c
1000e7e4:	00000c02 	.word	0x00000c02
1000e7e8:	00000a02 	.word	0x00000a02
1000e7ec:	00000a03 	.word	0x00000a03
1000e7f0:	00000c06 	.word	0x00000c06
1000e7f4:	00000c04 	.word	0x00000c04
1000e7f8:	00000c05 	.word	0x00000c05
1000e7fc:	00000c07 	.word	0x00000c07
1000e800:	00000c09 	.word	0x00000c09
1000e804:	00000c17 	.word	0x00000c17
1000e808:	00000c12 	.word	0x00000c12
1000e80c:	00000c0d 	.word	0x00000c0d
1000e810:	00000c13 	.word	0x00000c13
1000e814:	00000c15 	.word	0x00000c15
1000e818:	00000d08 	.word	0x00000d08
1000e81c:	00000d01 	.word	0x00000d01
1000e820:	00000d15 	.word	0x00000d15
1000e824:	00000e1b 	.word	0x00000e1b
1000e828:	00000e0f 	.word	0x00000e0f
1000e82c:	00000e03 	.word	0x00000e03
1000e830:	00000e06 	.word	0x00000e06
1000e834:	00000e0a 	.word	0x00000e0a
1000e838:	00000e15 	.word	0x00000e15
1000e83c:	00000e11 	.word	0x00000e11
1000e840:	00000e13 	.word	0x00000e13
1000e844:	00000e17 	.word	0x00000e17
1000e848:	00000e19 	.word	0x00000e19
1000e84c:	00000e27 	.word	0x00000e27
1000e850:	00000e21 	.word	0x00000e21
1000e854:	00000e1c 	.word	0x00000e1c
1000e858:	00000e1d 	.word	0x00000e1d
1000e85c:	4b9f      	ldr	r3, [pc, #636]	; (1000eadc <at_ble_event_get+0x614>)
1000e85e:	429c      	cmp	r4, r3
1000e860:	d07e      	beq.n	1000e960 <at_ble_event_get+0x498>
1000e862:	4b9f      	ldr	r3, [pc, #636]	; (1000eae0 <at_ble_event_get+0x618>)
1000e864:	429c      	cmp	r4, r3
1000e866:	d100      	bne.n	1000e86a <at_ble_event_get+0x3a2>
1000e868:	e08c      	b.n	1000e984 <at_ble_event_get+0x4bc>
1000e86a:	e015      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e86c:	4b9d      	ldr	r3, [pc, #628]	; (1000eae4 <at_ble_event_get+0x61c>)
1000e86e:	429c      	cmp	r4, r3
1000e870:	d100      	bne.n	1000e874 <at_ble_event_get+0x3ac>
1000e872:	e10a      	b.n	1000ea8a <at_ble_event_get+0x5c2>
1000e874:	d808      	bhi.n	1000e888 <at_ble_event_get+0x3c0>
1000e876:	4b9c      	ldr	r3, [pc, #624]	; (1000eae8 <at_ble_event_get+0x620>)
1000e878:	429c      	cmp	r4, r3
1000e87a:	d100      	bne.n	1000e87e <at_ble_event_get+0x3b6>
1000e87c:	e0f7      	b.n	1000ea6e <at_ble_event_get+0x5a6>
1000e87e:	4b9b      	ldr	r3, [pc, #620]	; (1000eaec <at_ble_event_get+0x624>)
1000e880:	429c      	cmp	r4, r3
1000e882:	d100      	bne.n	1000e886 <at_ble_event_get+0x3be>
1000e884:	e0fa      	b.n	1000ea7c <at_ble_event_get+0x5b4>
1000e886:	e007      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000e888:	4b99      	ldr	r3, [pc, #612]	; (1000eaf0 <at_ble_event_get+0x628>)
1000e88a:	429c      	cmp	r4, r3
1000e88c:	d100      	bne.n	1000e890 <at_ble_event_get+0x3c8>
1000e88e:	e103      	b.n	1000ea98 <at_ble_event_get+0x5d0>
1000e890:	4b98      	ldr	r3, [pc, #608]	; (1000eaf4 <at_ble_event_get+0x62c>)
1000e892:	429c      	cmp	r4, r3
1000e894:	d100      	bne.n	1000e898 <at_ble_event_get+0x3d0>
1000e896:	e106      	b.n	1000eaa6 <at_ble_event_get+0x5de>
1000e898:	2600      	movs	r6, #0
1000e89a:	e10a      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e89c:	1c30      	adds	r0, r6, #0
1000e89e:	1c29      	adds	r1, r5, #0
1000e8a0:	4b95      	ldr	r3, [pc, #596]	; (1000eaf8 <at_ble_event_get+0x630>)
1000e8a2:	e014      	b.n	1000e8ce <at_ble_event_get+0x406>
1000e8a4:	1c30      	adds	r0, r6, #0
1000e8a6:	1c29      	adds	r1, r5, #0
1000e8a8:	4b94      	ldr	r3, [pc, #592]	; (1000eafc <at_ble_event_get+0x634>)
1000e8aa:	4798      	blx	r3
1000e8ac:	2604      	movs	r6, #4
1000e8ae:	e100      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8b0:	1c30      	adds	r0, r6, #0
1000e8b2:	1c29      	adds	r1, r5, #0
1000e8b4:	4b92      	ldr	r3, [pc, #584]	; (1000eb00 <at_ble_event_get+0x638>)
1000e8b6:	4798      	blx	r3
1000e8b8:	2601      	movs	r6, #1
1000e8ba:	e0fa      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8bc:	1c30      	adds	r0, r6, #0
1000e8be:	1c29      	adds	r1, r5, #0
1000e8c0:	4b90      	ldr	r3, [pc, #576]	; (1000eb04 <at_ble_event_get+0x63c>)
1000e8c2:	4798      	blx	r3
1000e8c4:	260f      	movs	r6, #15
1000e8c6:	e0f4      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8c8:	1c30      	adds	r0, r6, #0
1000e8ca:	1c29      	adds	r1, r5, #0
1000e8cc:	4b8e      	ldr	r3, [pc, #568]	; (1000eb08 <at_ble_event_get+0x640>)
1000e8ce:	4798      	blx	r3
1000e8d0:	1c06      	adds	r6, r0, #0
1000e8d2:	e0ee      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8d4:	9801      	ldr	r0, [sp, #4]
1000e8d6:	1c31      	adds	r1, r6, #0
1000e8d8:	1c2a      	adds	r2, r5, #0
1000e8da:	4b8c      	ldr	r3, [pc, #560]	; (1000eb0c <at_ble_event_get+0x644>)
1000e8dc:	e017      	b.n	1000e90e <at_ble_event_get+0x446>
1000e8de:	1c31      	adds	r1, r6, #0
1000e8e0:	9801      	ldr	r0, [sp, #4]
1000e8e2:	1c2a      	adds	r2, r5, #0
1000e8e4:	4b8a      	ldr	r3, [pc, #552]	; (1000eb10 <at_ble_event_get+0x648>)
1000e8e6:	4798      	blx	r3
1000e8e8:	2611      	movs	r6, #17
1000e8ea:	e0e2      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8ec:	1c31      	adds	r1, r6, #0
1000e8ee:	9801      	ldr	r0, [sp, #4]
1000e8f0:	1c2a      	adds	r2, r5, #0
1000e8f2:	4b88      	ldr	r3, [pc, #544]	; (1000eb14 <at_ble_event_get+0x64c>)
1000e8f4:	4798      	blx	r3
1000e8f6:	2612      	movs	r6, #18
1000e8f8:	e0db      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e8fa:	1c30      	adds	r0, r6, #0
1000e8fc:	1c29      	adds	r1, r5, #0
1000e8fe:	4b86      	ldr	r3, [pc, #536]	; (1000eb18 <at_ble_event_get+0x650>)
1000e900:	4798      	blx	r3
1000e902:	2606      	movs	r6, #6
1000e904:	e0d5      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e906:	1c31      	adds	r1, r6, #0
1000e908:	1c2a      	adds	r2, r5, #0
1000e90a:	9801      	ldr	r0, [sp, #4]
1000e90c:	4b83      	ldr	r3, [pc, #524]	; (1000eb1c <at_ble_event_get+0x654>)
1000e90e:	4798      	blx	r3
1000e910:	e7de      	b.n	1000e8d0 <at_ble_event_get+0x408>
1000e912:	9801      	ldr	r0, [sp, #4]
1000e914:	1c31      	adds	r1, r6, #0
1000e916:	1c2a      	adds	r2, r5, #0
1000e918:	4b81      	ldr	r3, [pc, #516]	; (1000eb20 <at_ble_event_get+0x658>)
1000e91a:	e7f8      	b.n	1000e90e <at_ble_event_get+0x446>
1000e91c:	1c31      	adds	r1, r6, #0
1000e91e:	9801      	ldr	r0, [sp, #4]
1000e920:	1c2a      	adds	r2, r5, #0
1000e922:	4b80      	ldr	r3, [pc, #512]	; (1000eb24 <at_ble_event_get+0x65c>)
1000e924:	4798      	blx	r3
1000e926:	260d      	movs	r6, #13
1000e928:	e0c3      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e92a:	1c31      	adds	r1, r6, #0
1000e92c:	9801      	ldr	r0, [sp, #4]
1000e92e:	1c2a      	adds	r2, r5, #0
1000e930:	4b7d      	ldr	r3, [pc, #500]	; (1000eb28 <at_ble_event_get+0x660>)
1000e932:	4798      	blx	r3
1000e934:	260e      	movs	r6, #14
1000e936:	e0bc      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e938:	9801      	ldr	r0, [sp, #4]
1000e93a:	1c31      	adds	r1, r6, #0
1000e93c:	1c2a      	adds	r2, r5, #0
1000e93e:	4b7b      	ldr	r3, [pc, #492]	; (1000eb2c <at_ble_event_get+0x664>)
1000e940:	4798      	blx	r3
1000e942:	e084      	b.n	1000ea4e <at_ble_event_get+0x586>
1000e944:	1c31      	adds	r1, r6, #0
1000e946:	9801      	ldr	r0, [sp, #4]
1000e948:	1c2a      	adds	r2, r5, #0
1000e94a:	4b79      	ldr	r3, [pc, #484]	; (1000eb30 <at_ble_event_get+0x668>)
1000e94c:	4798      	blx	r3
1000e94e:	260b      	movs	r6, #11
1000e950:	e0af      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e952:	1c31      	adds	r1, r6, #0
1000e954:	9801      	ldr	r0, [sp, #4]
1000e956:	1c2a      	adds	r2, r5, #0
1000e958:	4b76      	ldr	r3, [pc, #472]	; (1000eb34 <at_ble_event_get+0x66c>)
1000e95a:	4798      	blx	r3
1000e95c:	2610      	movs	r6, #16
1000e95e:	e0a8      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e960:	1c30      	adds	r0, r6, #0
1000e962:	1c29      	adds	r1, r5, #0
1000e964:	4b74      	ldr	r3, [pc, #464]	; (1000eb38 <at_ble_event_get+0x670>)
1000e966:	4798      	blx	r3
1000e968:	2628      	movs	r6, #40	; 0x28
1000e96a:	e0a2      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e96c:	1c30      	adds	r0, r6, #0
1000e96e:	1c29      	adds	r1, r5, #0
1000e970:	4b72      	ldr	r3, [pc, #456]	; (1000eb3c <at_ble_event_get+0x674>)
1000e972:	4798      	blx	r3
1000e974:	2629      	movs	r6, #41	; 0x29
1000e976:	e09c      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e978:	1c30      	adds	r0, r6, #0
1000e97a:	1c29      	adds	r1, r5, #0
1000e97c:	4b70      	ldr	r3, [pc, #448]	; (1000eb40 <at_ble_event_get+0x678>)
1000e97e:	4798      	blx	r3
1000e980:	2627      	movs	r6, #39	; 0x27
1000e982:	e096      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e984:	1c30      	adds	r0, r6, #0
1000e986:	1c29      	adds	r1, r5, #0
1000e988:	4b6e      	ldr	r3, [pc, #440]	; (1000eb44 <at_ble_event_get+0x67c>)
1000e98a:	4798      	blx	r3
1000e98c:	262a      	movs	r6, #42	; 0x2a
1000e98e:	e090      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e990:	9801      	ldr	r0, [sp, #4]
1000e992:	1c31      	adds	r1, r6, #0
1000e994:	1c2a      	adds	r2, r5, #0
1000e996:	4b6c      	ldr	r3, [pc, #432]	; (1000eb48 <at_ble_event_get+0x680>)
1000e998:	e7b9      	b.n	1000e90e <at_ble_event_get+0x446>
1000e99a:	9801      	ldr	r0, [sp, #4]
1000e99c:	1c31      	adds	r1, r6, #0
1000e99e:	1c2a      	adds	r2, r5, #0
1000e9a0:	4b6a      	ldr	r3, [pc, #424]	; (1000eb4c <at_ble_event_get+0x684>)
1000e9a2:	e7b4      	b.n	1000e90e <at_ble_event_get+0x446>
1000e9a4:	1c30      	adds	r0, r6, #0
1000e9a6:	1c29      	adds	r1, r5, #0
1000e9a8:	4b69      	ldr	r3, [pc, #420]	; (1000eb50 <at_ble_event_get+0x688>)
1000e9aa:	4798      	blx	r3
1000e9ac:	262b      	movs	r6, #43	; 0x2b
1000e9ae:	e080      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9b0:	1c30      	adds	r0, r6, #0
1000e9b2:	1c29      	adds	r1, r5, #0
1000e9b4:	4b67      	ldr	r3, [pc, #412]	; (1000eb54 <at_ble_event_get+0x68c>)
1000e9b6:	4798      	blx	r3
1000e9b8:	262c      	movs	r6, #44	; 0x2c
1000e9ba:	e07a      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9bc:	1c31      	adds	r1, r6, #0
1000e9be:	9801      	ldr	r0, [sp, #4]
1000e9c0:	1c2a      	adds	r2, r5, #0
1000e9c2:	4b65      	ldr	r3, [pc, #404]	; (1000eb58 <at_ble_event_get+0x690>)
1000e9c4:	4798      	blx	r3
1000e9c6:	2613      	movs	r6, #19
1000e9c8:	e073      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9ca:	1c31      	adds	r1, r6, #0
1000e9cc:	9801      	ldr	r0, [sp, #4]
1000e9ce:	1c2a      	adds	r2, r5, #0
1000e9d0:	4b62      	ldr	r3, [pc, #392]	; (1000eb5c <at_ble_event_get+0x694>)
1000e9d2:	4798      	blx	r3
1000e9d4:	2614      	movs	r6, #20
1000e9d6:	e06c      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9d8:	1c31      	adds	r1, r6, #0
1000e9da:	9801      	ldr	r0, [sp, #4]
1000e9dc:	1c2a      	adds	r2, r5, #0
1000e9de:	4b60      	ldr	r3, [pc, #384]	; (1000eb60 <at_ble_event_get+0x698>)
1000e9e0:	4798      	blx	r3
1000e9e2:	2615      	movs	r6, #21
1000e9e4:	e065      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9e6:	1c31      	adds	r1, r6, #0
1000e9e8:	9801      	ldr	r0, [sp, #4]
1000e9ea:	1c2a      	adds	r2, r5, #0
1000e9ec:	4b5d      	ldr	r3, [pc, #372]	; (1000eb64 <at_ble_event_get+0x69c>)
1000e9ee:	4798      	blx	r3
1000e9f0:	2616      	movs	r6, #22
1000e9f2:	e05e      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000e9f4:	9801      	ldr	r0, [sp, #4]
1000e9f6:	1c31      	adds	r1, r6, #0
1000e9f8:	1c2a      	adds	r2, r5, #0
1000e9fa:	4b5b      	ldr	r3, [pc, #364]	; (1000eb68 <at_ble_event_get+0x6a0>)
1000e9fc:	e787      	b.n	1000e90e <at_ble_event_get+0x446>
1000e9fe:	1c31      	adds	r1, r6, #0
1000ea00:	9801      	ldr	r0, [sp, #4]
1000ea02:	1c2a      	adds	r2, r5, #0
1000ea04:	4b58      	ldr	r3, [pc, #352]	; (1000eb68 <at_ble_event_get+0x6a0>)
1000ea06:	4798      	blx	r3
1000ea08:	88a9      	ldrh	r1, [r5, #4]
1000ea0a:	1c06      	adds	r6, r0, #0
1000ea0c:	4b57      	ldr	r3, [pc, #348]	; (1000eb6c <at_ble_event_get+0x6a4>)
1000ea0e:	8828      	ldrh	r0, [r5, #0]
1000ea10:	4798      	blx	r3
1000ea12:	e04e      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea14:	1c31      	adds	r1, r6, #0
1000ea16:	9801      	ldr	r0, [sp, #4]
1000ea18:	1c2a      	adds	r2, r5, #0
1000ea1a:	4b55      	ldr	r3, [pc, #340]	; (1000eb70 <at_ble_event_get+0x6a8>)
1000ea1c:	4798      	blx	r3
1000ea1e:	2623      	movs	r6, #35	; 0x23
1000ea20:	e047      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea22:	9801      	ldr	r0, [sp, #4]
1000ea24:	1c31      	adds	r1, r6, #0
1000ea26:	1c2a      	adds	r2, r5, #0
1000ea28:	4b52      	ldr	r3, [pc, #328]	; (1000eb74 <at_ble_event_get+0x6ac>)
1000ea2a:	e770      	b.n	1000e90e <at_ble_event_get+0x446>
1000ea2c:	9b01      	ldr	r3, [sp, #4]
1000ea2e:	1c30      	adds	r0, r6, #0
1000ea30:	0a1f      	lsrs	r7, r3, #8
1000ea32:	802f      	strh	r7, [r5, #0]
1000ea34:	1c29      	adds	r1, r5, #0
1000ea36:	4b50      	ldr	r3, [pc, #320]	; (1000eb78 <at_ble_event_get+0x6b0>)
1000ea38:	e749      	b.n	1000e8ce <at_ble_event_get+0x406>
1000ea3a:	9801      	ldr	r0, [sp, #4]
1000ea3c:	1c31      	adds	r1, r6, #0
1000ea3e:	1c2a      	adds	r2, r5, #0
1000ea40:	4b4e      	ldr	r3, [pc, #312]	; (1000eb7c <at_ble_event_get+0x6b4>)
1000ea42:	e764      	b.n	1000e90e <at_ble_event_get+0x446>
1000ea44:	1c30      	adds	r0, r6, #0
1000ea46:	1c29      	adds	r1, r5, #0
1000ea48:	9a01      	ldr	r2, [sp, #4]
1000ea4a:	4b4d      	ldr	r3, [pc, #308]	; (1000eb80 <at_ble_event_get+0x6b8>)
1000ea4c:	4798      	blx	r3
1000ea4e:	263b      	movs	r6, #59	; 0x3b
1000ea50:	e02f      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea52:	1c31      	adds	r1, r6, #0
1000ea54:	9801      	ldr	r0, [sp, #4]
1000ea56:	1c2a      	adds	r2, r5, #0
1000ea58:	4b4a      	ldr	r3, [pc, #296]	; (1000eb84 <at_ble_event_get+0x6bc>)
1000ea5a:	4798      	blx	r3
1000ea5c:	2618      	movs	r6, #24
1000ea5e:	e028      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea60:	1c31      	adds	r1, r6, #0
1000ea62:	9801      	ldr	r0, [sp, #4]
1000ea64:	1c2a      	adds	r2, r5, #0
1000ea66:	4b48      	ldr	r3, [pc, #288]	; (1000eb88 <at_ble_event_get+0x6c0>)
1000ea68:	4798      	blx	r3
1000ea6a:	2620      	movs	r6, #32
1000ea6c:	e021      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea6e:	1c31      	adds	r1, r6, #0
1000ea70:	9801      	ldr	r0, [sp, #4]
1000ea72:	1c2a      	adds	r2, r5, #0
1000ea74:	4b45      	ldr	r3, [pc, #276]	; (1000eb8c <at_ble_event_get+0x6c4>)
1000ea76:	4798      	blx	r3
1000ea78:	2633      	movs	r6, #51	; 0x33
1000ea7a:	e01a      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea7c:	1c31      	adds	r1, r6, #0
1000ea7e:	9801      	ldr	r0, [sp, #4]
1000ea80:	1c2a      	adds	r2, r5, #0
1000ea82:	4b43      	ldr	r3, [pc, #268]	; (1000eb90 <at_ble_event_get+0x6c8>)
1000ea84:	4798      	blx	r3
1000ea86:	2630      	movs	r6, #48	; 0x30
1000ea88:	e013      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea8a:	1c31      	adds	r1, r6, #0
1000ea8c:	9801      	ldr	r0, [sp, #4]
1000ea8e:	1c2a      	adds	r2, r5, #0
1000ea90:	4b40      	ldr	r3, [pc, #256]	; (1000eb94 <at_ble_event_get+0x6cc>)
1000ea92:	4798      	blx	r3
1000ea94:	2634      	movs	r6, #52	; 0x34
1000ea96:	e00c      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000ea98:	1c31      	adds	r1, r6, #0
1000ea9a:	9801      	ldr	r0, [sp, #4]
1000ea9c:	1c2a      	adds	r2, r5, #0
1000ea9e:	4b3e      	ldr	r3, [pc, #248]	; (1000eb98 <at_ble_event_get+0x6d0>)
1000eaa0:	4798      	blx	r3
1000eaa2:	2635      	movs	r6, #53	; 0x35
1000eaa4:	e005      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000eaa6:	1c31      	adds	r1, r6, #0
1000eaa8:	9801      	ldr	r0, [sp, #4]
1000eaaa:	1c2a      	adds	r2, r5, #0
1000eaac:	4b3b      	ldr	r3, [pc, #236]	; (1000eb9c <at_ble_event_get+0x6d4>)
1000eaae:	4798      	blx	r3
1000eab0:	2632      	movs	r6, #50	; 0x32
1000eab2:	9b03      	ldr	r3, [sp, #12]
1000eab4:	701e      	strb	r6, [r3, #0]
1000eab6:	2300      	movs	r3, #0
1000eab8:	9302      	str	r3, [sp, #8]
1000eaba:	e57a      	b.n	1000e5b2 <at_ble_event_get+0xea>
1000eabc:	23d0      	movs	r3, #208	; 0xd0
1000eabe:	e7fb      	b.n	1000eab8 <at_ble_event_get+0x5f0>
1000eac0:	9b01      	ldr	r3, [sp, #4]
1000eac2:	9e02      	ldr	r6, [sp, #8]
1000eac4:	2bbb      	cmp	r3, #187	; 0xbb
1000eac6:	d000      	beq.n	1000eaca <at_ble_event_get+0x602>
1000eac8:	e6e6      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000eaca:	e7f2      	b.n	1000eab2 <at_ble_event_get+0x5ea>
1000eacc:	9b02      	ldr	r3, [sp, #8]
1000eace:	2b00      	cmp	r3, #0
1000ead0:	d000      	beq.n	1000ead4 <at_ble_event_get+0x60c>
1000ead2:	e56e      	b.n	1000e5b2 <at_ble_event_get+0xea>
1000ead4:	e6e0      	b.n	1000e898 <at_ble_event_get+0x3d0>
1000ead6:	9802      	ldr	r0, [sp, #8]
1000ead8:	b007      	add	sp, #28
1000eada:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000eadc:	00000e22 	.word	0x00000e22
1000eae0:	00000e25 	.word	0x00000e25
1000eae4:	00001b05 	.word	0x00001b05
1000eae8:	00001b01 	.word	0x00001b01
1000eaec:	00001b03 	.word	0x00001b03
1000eaf0:	00001b06 	.word	0x00001b06
1000eaf4:	00001b08 	.word	0x00001b08
1000eaf8:	10010cf9 	.word	0x10010cf9
1000eafc:	10010cdd 	.word	0x10010cdd
1000eb00:	10010f79 	.word	0x10010f79
1000eb04:	10011069 	.word	0x10011069
1000eb08:	1001108d 	.word	0x1001108d
1000eb0c:	10010071 	.word	0x10010071
1000eb10:	100108f1 	.word	0x100108f1
1000eb14:	1001096d 	.word	0x1001096d
1000eb18:	10010329 	.word	0x10010329
1000eb1c:	100103c5 	.word	0x100103c5
1000eb20:	1001049d 	.word	0x1001049d
1000eb24:	10010725 	.word	0x10010725
1000eb28:	100107c5 	.word	0x100107c5
1000eb2c:	1001087d 	.word	0x1001087d
1000eb30:	100108a5 	.word	0x100108a5
1000eb34:	100108bb 	.word	0x100108bb
1000eb38:	10010985 	.word	0x10010985
1000eb3c:	100109b3 	.word	0x100109b3
1000eb40:	100109c9 	.word	0x100109c9
1000eb44:	100109f3 	.word	0x100109f3
1000eb48:	10010821 	.word	0x10010821
1000eb4c:	1001084b 	.word	0x1001084b
1000eb50:	1000fab1 	.word	0x1000fab1
1000eb54:	1000fadd 	.word	0x1000fadd
1000eb58:	100112ad 	.word	0x100112ad
1000eb5c:	100112e9 	.word	0x100112e9
1000eb60:	10011331 	.word	0x10011331
1000eb64:	10011375 	.word	0x10011375
1000eb68:	100113a9 	.word	0x100113a9
1000eb6c:	1001126d 	.word	0x1001126d
1000eb70:	10011475 	.word	0x10011475
1000eb74:	100113fd 	.word	0x100113fd
1000eb78:	1000f995 	.word	0x1000f995
1000eb7c:	1000fa01 	.word	0x1000fa01
1000eb80:	1000f9c5 	.word	0x1000f9c5
1000eb84:	10011485 	.word	0x10011485
1000eb88:	100114c5 	.word	0x100114c5
1000eb8c:	1001178d 	.word	0x1001178d
1000eb90:	10011797 	.word	0x10011797
1000eb94:	1001179d 	.word	0x1001179d
1000eb98:	100117a3 	.word	0x100117a3
1000eb9c:	100117af 	.word	0x100117af

1000eba0 <internal_event_flush>:
1000eba0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000eba2:	490e      	ldr	r1, [pc, #56]	; (1000ebdc <internal_event_flush+0x3c>)
1000eba4:	2400      	movs	r4, #0
1000eba6:	680b      	ldr	r3, [r1, #0]
1000eba8:	1c0f      	adds	r7, r1, #0
1000ebaa:	1c1e      	adds	r6, r3, #0
1000ebac:	4a0c      	ldr	r2, [pc, #48]	; (1000ebe0 <internal_event_flush+0x40>)
1000ebae:	6815      	ldr	r5, [r2, #0]
1000ebb0:	9201      	str	r2, [sp, #4]
1000ebb2:	2b00      	cmp	r3, #0
1000ebb4:	d00e      	beq.n	1000ebd4 <internal_event_flush+0x34>
1000ebb6:	889a      	ldrh	r2, [r3, #4]
1000ebb8:	6819      	ldr	r1, [r3, #0]
1000ebba:	4282      	cmp	r2, r0
1000ebbc:	d107      	bne.n	1000ebce <internal_event_flush+0x2e>
1000ebbe:	2c00      	cmp	r4, #0
1000ebc0:	d001      	beq.n	1000ebc6 <internal_event_flush+0x26>
1000ebc2:	6021      	str	r1, [r4, #0]
1000ebc4:	e000      	b.n	1000ebc8 <internal_event_flush+0x28>
1000ebc6:	1c0e      	adds	r6, r1, #0
1000ebc8:	601d      	str	r5, [r3, #0]
1000ebca:	1c1d      	adds	r5, r3, #0
1000ebcc:	1c23      	adds	r3, r4, #0
1000ebce:	1c1c      	adds	r4, r3, #0
1000ebd0:	1c0b      	adds	r3, r1, #0
1000ebd2:	e7ee      	b.n	1000ebb2 <internal_event_flush+0x12>
1000ebd4:	9b01      	ldr	r3, [sp, #4]
1000ebd6:	603e      	str	r6, [r7, #0]
1000ebd8:	601d      	str	r5, [r3, #0]
1000ebda:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ebdc:	10019e74 	.word	0x10019e74
1000ebe0:	10019e78 	.word	0x10019e78

1000ebe4 <internal_conn_flush>:
1000ebe4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ebe6:	4a12      	ldr	r2, [pc, #72]	; (1000ec30 <internal_conn_flush+0x4c>)
1000ebe8:	9000      	str	r0, [sp, #0]
1000ebea:	6813      	ldr	r3, [r2, #0]
1000ebec:	4811      	ldr	r0, [pc, #68]	; (1000ec34 <internal_conn_flush+0x50>)
1000ebee:	1c1f      	adds	r7, r3, #0
1000ebf0:	2100      	movs	r1, #0
1000ebf2:	4684      	mov	ip, r0
1000ebf4:	6804      	ldr	r4, [r0, #0]
1000ebf6:	9201      	str	r2, [sp, #4]
1000ebf8:	2b00      	cmp	r3, #0
1000ebfa:	d014      	beq.n	1000ec26 <internal_conn_flush+0x42>
1000ebfc:	88d8      	ldrh	r0, [r3, #6]
1000ebfe:	9a00      	ldr	r2, [sp, #0]
1000ec00:	681d      	ldr	r5, [r3, #0]
1000ec02:	0a06      	lsrs	r6, r0, #8
1000ec04:	4296      	cmp	r6, r2
1000ec06:	d10b      	bne.n	1000ec20 <internal_conn_flush+0x3c>
1000ec08:	26fd      	movs	r6, #253	; 0xfd
1000ec0a:	4006      	ands	r6, r0
1000ec0c:	2e0c      	cmp	r6, #12
1000ec0e:	d107      	bne.n	1000ec20 <internal_conn_flush+0x3c>
1000ec10:	2900      	cmp	r1, #0
1000ec12:	d001      	beq.n	1000ec18 <internal_conn_flush+0x34>
1000ec14:	600d      	str	r5, [r1, #0]
1000ec16:	e000      	b.n	1000ec1a <internal_conn_flush+0x36>
1000ec18:	1c2f      	adds	r7, r5, #0
1000ec1a:	601c      	str	r4, [r3, #0]
1000ec1c:	1c1c      	adds	r4, r3, #0
1000ec1e:	1c0b      	adds	r3, r1, #0
1000ec20:	1c19      	adds	r1, r3, #0
1000ec22:	1c2b      	adds	r3, r5, #0
1000ec24:	e7e8      	b.n	1000ebf8 <internal_conn_flush+0x14>
1000ec26:	9b01      	ldr	r3, [sp, #4]
1000ec28:	601f      	str	r7, [r3, #0]
1000ec2a:	4663      	mov	r3, ip
1000ec2c:	601c      	str	r4, [r3, #0]
1000ec2e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ec30:	10019e74 	.word	0x10019e74
1000ec34:	10019e78 	.word	0x10019e78

1000ec38 <at_ble_device_name_set>:
1000ec38:	b530      	push	{r4, r5, lr}
1000ec3a:	23cf      	movs	r3, #207	; 0xcf
1000ec3c:	2800      	cmp	r0, #0
1000ec3e:	d010      	beq.n	1000ec62 <at_ble_device_name_set+0x2a>
1000ec40:	1e4a      	subs	r2, r1, #1
1000ec42:	2a1f      	cmp	r2, #31
1000ec44:	d80d      	bhi.n	1000ec62 <at_ble_device_name_set+0x2a>
1000ec46:	4a08      	ldr	r2, [pc, #32]	; (1000ec68 <at_ble_device_name_set+0x30>)
1000ec48:	1c13      	adds	r3, r2, #0
1000ec4a:	33aa      	adds	r3, #170	; 0xaa
1000ec4c:	8019      	strh	r1, [r3, #0]
1000ec4e:	2300      	movs	r3, #0
1000ec50:	1c1c      	adds	r4, r3, #0
1000ec52:	5cc5      	ldrb	r5, [r0, r3]
1000ec54:	34ac      	adds	r4, #172	; 0xac
1000ec56:	3301      	adds	r3, #1
1000ec58:	5515      	strb	r5, [r2, r4]
1000ec5a:	b2dc      	uxtb	r4, r3
1000ec5c:	428c      	cmp	r4, r1
1000ec5e:	d3f7      	bcc.n	1000ec50 <at_ble_device_name_set+0x18>
1000ec60:	2300      	movs	r3, #0
1000ec62:	1c18      	adds	r0, r3, #0
1000ec64:	bd30      	pop	{r4, r5, pc}
1000ec66:	46c0      	nop			; (mov r8, r8)
1000ec68:	1001ae82 	.word	0x1001ae82

1000ec6c <at_ble_addr_get>:
1000ec6c:	b510      	push	{r4, lr}
1000ec6e:	1c04      	adds	r4, r0, #0
1000ec70:	20cf      	movs	r0, #207	; 0xcf
1000ec72:	2c00      	cmp	r4, #0
1000ec74:	d006      	beq.n	1000ec84 <at_ble_addr_get+0x18>
1000ec76:	4b04      	ldr	r3, [pc, #16]	; (1000ec88 <at_ble_addr_get+0x1c>)
1000ec78:	38ce      	subs	r0, #206	; 0xce
1000ec7a:	1c21      	adds	r1, r4, #0
1000ec7c:	4798      	blx	r3
1000ec7e:	4b03      	ldr	r3, [pc, #12]	; (1000ec8c <at_ble_addr_get+0x20>)
1000ec80:	791b      	ldrb	r3, [r3, #4]
1000ec82:	7023      	strb	r3, [r4, #0]
1000ec84:	bd10      	pop	{r4, pc}
1000ec86:	46c0      	nop			; (mov r8, r8)
1000ec88:	10010b8d 	.word	0x10010b8d
1000ec8c:	1001ae82 	.word	0x1001ae82

1000ec90 <at_ble_set_dev_config>:
1000ec90:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ec92:	7906      	ldrb	r6, [r0, #4]
1000ec94:	b089      	sub	sp, #36	; 0x24
1000ec96:	25cf      	movs	r5, #207	; 0xcf
1000ec98:	2e03      	cmp	r6, #3
1000ec9a:	d838      	bhi.n	1000ed0e <at_ble_set_dev_config+0x7e>
1000ec9c:	7803      	ldrb	r3, [r0, #0]
1000ec9e:	3511      	adds	r5, #17
1000eca0:	2b0f      	cmp	r3, #15
1000eca2:	d834      	bhi.n	1000ed0e <at_ble_set_dev_config+0x7e>
1000eca4:	2380      	movs	r3, #128	; 0x80
1000eca6:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000eca8:	3d11      	subs	r5, #17
1000ecaa:	009b      	lsls	r3, r3, #2
1000ecac:	429f      	cmp	r7, r3
1000ecae:	d82e      	bhi.n	1000ed0e <at_ble_set_dev_config+0x7e>
1000ecb0:	7fc5      	ldrb	r5, [r0, #31]
1000ecb2:	7f83      	ldrb	r3, [r0, #30]
1000ecb4:	01ad      	lsls	r5, r5, #6
1000ecb6:	015b      	lsls	r3, r3, #5
1000ecb8:	431d      	orrs	r5, r3
1000ecba:	7ec3      	ldrb	r3, [r0, #27]
1000ecbc:	431d      	orrs	r5, r3
1000ecbe:	7f43      	ldrb	r3, [r0, #29]
1000ecc0:	011b      	lsls	r3, r3, #4
1000ecc2:	431d      	orrs	r5, r3
1000ecc4:	7f03      	ldrb	r3, [r0, #28]
1000ecc6:	009b      	lsls	r3, r3, #2
1000ecc8:	431d      	orrs	r5, r3
1000ecca:	4b12      	ldr	r3, [pc, #72]	; (1000ed14 <at_ble_set_dev_config+0x84>)
1000eccc:	b2ed      	uxtb	r5, r5
1000ecce:	711e      	strb	r6, [r3, #4]
1000ecd0:	7903      	ldrb	r3, [r0, #4]
1000ecd2:	3b02      	subs	r3, #2
1000ecd4:	2b01      	cmp	r3, #1
1000ecd6:	d801      	bhi.n	1000ecdc <at_ble_set_dev_config+0x4c>
1000ecd8:	2302      	movs	r3, #2
1000ecda:	7103      	strb	r3, [r0, #4]
1000ecdc:	1c04      	adds	r4, r0, #0
1000ecde:	1c23      	adds	r3, r4, #0
1000ece0:	330b      	adds	r3, #11
1000ece2:	8861      	ldrh	r1, [r4, #2]
1000ece4:	9307      	str	r3, [sp, #28]
1000ece6:	7923      	ldrb	r3, [r4, #4]
1000ece8:	7800      	ldrb	r0, [r0, #0]
1000ecea:	9300      	str	r3, [sp, #0]
1000ecec:	9501      	str	r5, [sp, #4]
1000ecee:	8c25      	ldrh	r5, [r4, #32]
1000ecf0:	1d62      	adds	r2, r4, #5
1000ecf2:	9502      	str	r5, [sp, #8]
1000ecf4:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000ecf6:	9b07      	ldr	r3, [sp, #28]
1000ecf8:	9503      	str	r5, [sp, #12]
1000ecfa:	9704      	str	r7, [sp, #16]
1000ecfc:	4d06      	ldr	r5, [pc, #24]	; (1000ed18 <at_ble_set_dev_config+0x88>)
1000ecfe:	47a8      	blx	r5
1000ed00:	7126      	strb	r6, [r4, #4]
1000ed02:	1c05      	adds	r5, r0, #0
1000ed04:	1c21      	adds	r1, r4, #0
1000ed06:	4803      	ldr	r0, [pc, #12]	; (1000ed14 <at_ble_set_dev_config+0x84>)
1000ed08:	2226      	movs	r2, #38	; 0x26
1000ed0a:	4b04      	ldr	r3, [pc, #16]	; (1000ed1c <at_ble_set_dev_config+0x8c>)
1000ed0c:	4798      	blx	r3
1000ed0e:	1c28      	adds	r0, r5, #0
1000ed10:	b009      	add	sp, #36	; 0x24
1000ed12:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed14:	1001ae82 	.word	0x1001ae82
1000ed18:	10010a85 	.word	0x10010a85
1000ed1c:	1001571b 	.word	0x1001571b

1000ed20 <at_ble_init>:
1000ed20:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ed22:	b087      	sub	sp, #28
1000ed24:	af03      	add	r7, sp, #12
1000ed26:	4954      	ldr	r1, [pc, #336]	; (1000ee78 <at_ble_init+0x158>)
1000ed28:	220b      	movs	r2, #11
1000ed2a:	4b54      	ldr	r3, [pc, #336]	; (1000ee7c <at_ble_init+0x15c>)
1000ed2c:	1c04      	adds	r4, r0, #0
1000ed2e:	1c38      	adds	r0, r7, #0
1000ed30:	4798      	blx	r3
1000ed32:	2205      	movs	r2, #5
1000ed34:	4b52      	ldr	r3, [pc, #328]	; (1000ee80 <at_ble_init+0x160>)
1000ed36:	2640      	movs	r6, #64	; 0x40
1000ed38:	801a      	strh	r2, [r3, #0]
1000ed3a:	2300      	movs	r3, #0
1000ed3c:	4a51      	ldr	r2, [pc, #324]	; (1000ee84 <at_ble_init+0x164>)
1000ed3e:	6013      	str	r3, [r2, #0]
1000ed40:	4a51      	ldr	r2, [pc, #324]	; (1000ee88 <at_ble_init+0x168>)
1000ed42:	7013      	strb	r3, [r2, #0]
1000ed44:	4a51      	ldr	r2, [pc, #324]	; (1000ee8c <at_ble_init+0x16c>)
1000ed46:	7013      	strb	r3, [r2, #0]
1000ed48:	4b51      	ldr	r3, [pc, #324]	; (1000ee90 <at_ble_init+0x170>)
1000ed4a:	4798      	blx	r3
1000ed4c:	4b51      	ldr	r3, [pc, #324]	; (1000ee94 <at_ble_init+0x174>)
1000ed4e:	4798      	blx	r3
1000ed50:	4b51      	ldr	r3, [pc, #324]	; (1000ee98 <at_ble_init+0x178>)
1000ed52:	4798      	blx	r3
1000ed54:	4b51      	ldr	r3, [pc, #324]	; (1000ee9c <at_ble_init+0x17c>)
1000ed56:	4798      	blx	r3
1000ed58:	2c00      	cmp	r4, #0
1000ed5a:	d100      	bne.n	1000ed5e <at_ble_init+0x3e>
1000ed5c:	e089      	b.n	1000ee72 <at_ble_init+0x152>
1000ed5e:	68a3      	ldr	r3, [r4, #8]
1000ed60:	2b00      	cmp	r3, #0
1000ed62:	d100      	bne.n	1000ed66 <at_ble_init+0x46>
1000ed64:	e085      	b.n	1000ee72 <at_ble_init+0x152>
1000ed66:	6923      	ldr	r3, [r4, #16]
1000ed68:	2b00      	cmp	r3, #0
1000ed6a:	d100      	bne.n	1000ed6e <at_ble_init+0x4e>
1000ed6c:	e081      	b.n	1000ee72 <at_ble_init+0x152>
1000ed6e:	6820      	ldr	r0, [r4, #0]
1000ed70:	2800      	cmp	r0, #0
1000ed72:	d102      	bne.n	1000ed7a <at_ble_init+0x5a>
1000ed74:	6863      	ldr	r3, [r4, #4]
1000ed76:	2b00      	cmp	r3, #0
1000ed78:	d17b      	bne.n	1000ee72 <at_ble_init+0x152>
1000ed7a:	4b49      	ldr	r3, [pc, #292]	; (1000eea0 <at_ble_init+0x180>)
1000ed7c:	6861      	ldr	r1, [r4, #4]
1000ed7e:	4798      	blx	r3
1000ed80:	4b48      	ldr	r3, [pc, #288]	; (1000eea4 <at_ble_init+0x184>)
1000ed82:	4798      	blx	r3
1000ed84:	2801      	cmp	r0, #1
1000ed86:	d901      	bls.n	1000ed8c <at_ble_init+0x6c>
1000ed88:	26e2      	movs	r6, #226	; 0xe2
1000ed8a:	e072      	b.n	1000ee72 <at_ble_init+0x152>
1000ed8c:	4846      	ldr	r0, [pc, #280]	; (1000eea8 <at_ble_init+0x188>)
1000ed8e:	4b47      	ldr	r3, [pc, #284]	; (1000eeac <at_ble_init+0x18c>)
1000ed90:	4798      	blx	r3
1000ed92:	2800      	cmp	r0, #0
1000ed94:	d1f8      	bne.n	1000ed88 <at_ble_init+0x68>
1000ed96:	1c20      	adds	r0, r4, #0
1000ed98:	4b45      	ldr	r3, [pc, #276]	; (1000eeb0 <at_ble_init+0x190>)
1000ed9a:	4798      	blx	r3
1000ed9c:	68e0      	ldr	r0, [r4, #12]
1000ed9e:	68a1      	ldr	r1, [r4, #8]
1000eda0:	4b44      	ldr	r3, [pc, #272]	; (1000eeb4 <at_ble_init+0x194>)
1000eda2:	4798      	blx	r3
1000eda4:	466b      	mov	r3, sp
1000eda6:	2201      	movs	r2, #1
1000eda8:	1cdc      	adds	r4, r3, #3
1000edaa:	1c20      	adds	r0, r4, #0
1000edac:	a901      	add	r1, sp, #4
1000edae:	4252      	negs	r2, r2
1000edb0:	4b41      	ldr	r3, [pc, #260]	; (1000eeb8 <at_ble_init+0x198>)
1000edb2:	4798      	blx	r3
1000edb4:	2800      	cmp	r0, #0
1000edb6:	d102      	bne.n	1000edbe <at_ble_init+0x9e>
1000edb8:	7823      	ldrb	r3, [r4, #0]
1000edba:	2b39      	cmp	r3, #57	; 0x39
1000edbc:	d1f2      	bne.n	1000eda4 <at_ble_init+0x84>
1000edbe:	4b3f      	ldr	r3, [pc, #252]	; (1000eebc <at_ble_init+0x19c>)
1000edc0:	4798      	blx	r3
1000edc2:	1e06      	subs	r6, r0, #0
1000edc4:	d155      	bne.n	1000ee72 <at_ble_init+0x152>
1000edc6:	1c03      	adds	r3, r0, #0
1000edc8:	2101      	movs	r1, #1
1000edca:	4a3d      	ldr	r2, [pc, #244]	; (1000eec0 <at_ble_init+0x1a0>)
1000edcc:	4249      	negs	r1, r1
1000edce:	189a      	adds	r2, r3, r2
1000edd0:	3312      	adds	r3, #18
1000edd2:	8151      	strh	r1, [r2, #10]
1000edd4:	2b90      	cmp	r3, #144	; 0x90
1000edd6:	d1f7      	bne.n	1000edc8 <at_ble_init+0xa8>
1000edd8:	4c3a      	ldr	r4, [pc, #232]	; (1000eec4 <at_ble_init+0x1a4>)
1000edda:	3b81      	subs	r3, #129	; 0x81
1000eddc:	7023      	strb	r3, [r4, #0]
1000edde:	4b3a      	ldr	r3, [pc, #232]	; (1000eec8 <at_ble_init+0x1a8>)
1000ede0:	4a3a      	ldr	r2, [pc, #232]	; (1000eecc <at_ble_init+0x1ac>)
1000ede2:	8063      	strh	r3, [r4, #2]
1000ede4:	2300      	movs	r3, #0
1000ede6:	7123      	strb	r3, [r4, #4]
1000ede8:	3301      	adds	r3, #1
1000edea:	1e58      	subs	r0, r3, #1
1000edec:	0119      	lsls	r1, r3, #4
1000edee:	4301      	orrs	r1, r0
1000edf0:	3302      	adds	r3, #2
1000edf2:	7011      	strb	r1, [r2, #0]
1000edf4:	3201      	adds	r2, #1
1000edf6:	2b21      	cmp	r3, #33	; 0x21
1000edf8:	d1f7      	bne.n	1000edea <at_ble_init+0xca>
1000edfa:	33e0      	adds	r3, #224	; 0xe0
1000edfc:	33ff      	adds	r3, #255	; 0xff
1000edfe:	84a3      	strh	r3, [r4, #36]	; 0x24
1000ee00:	1c23      	adds	r3, r4, #0
1000ee02:	2500      	movs	r5, #0
1000ee04:	3373      	adds	r3, #115	; 0x73
1000ee06:	701d      	strb	r5, [r3, #0]
1000ee08:	1c23      	adds	r3, r4, #0
1000ee0a:	3372      	adds	r3, #114	; 0x72
1000ee0c:	701d      	strb	r5, [r3, #0]
1000ee0e:	1c23      	adds	r3, r4, #0
1000ee10:	3376      	adds	r3, #118	; 0x76
1000ee12:	701d      	strb	r5, [r3, #0]
1000ee14:	1c23      	adds	r3, r4, #0
1000ee16:	33cc      	adds	r3, #204	; 0xcc
1000ee18:	801d      	strh	r5, [r3, #0]
1000ee1a:	1c22      	adds	r2, r4, #0
1000ee1c:	23a0      	movs	r3, #160	; 0xa0
1000ee1e:	32d0      	adds	r2, #208	; 0xd0
1000ee20:	005b      	lsls	r3, r3, #1
1000ee22:	8013      	strh	r3, [r2, #0]
1000ee24:	1c22      	adds	r2, r4, #0
1000ee26:	32ce      	adds	r2, #206	; 0xce
1000ee28:	8013      	strh	r3, [r2, #0]
1000ee2a:	1c23      	adds	r3, r4, #0
1000ee2c:	33d2      	adds	r3, #210	; 0xd2
1000ee2e:	801d      	strh	r5, [r3, #0]
1000ee30:	22fa      	movs	r2, #250	; 0xfa
1000ee32:	1c23      	adds	r3, r4, #0
1000ee34:	0052      	lsls	r2, r2, #1
1000ee36:	33d4      	adds	r3, #212	; 0xd4
1000ee38:	801a      	strh	r2, [r3, #0]
1000ee3a:	1c23      	adds	r3, r4, #0
1000ee3c:	33d6      	adds	r3, #214	; 0xd6
1000ee3e:	701d      	strb	r5, [r3, #0]
1000ee40:	1c20      	adds	r0, r4, #0
1000ee42:	4b23      	ldr	r3, [pc, #140]	; (1000eed0 <at_ble_init+0x1b0>)
1000ee44:	76e5      	strb	r5, [r4, #27]
1000ee46:	7725      	strb	r5, [r4, #28]
1000ee48:	7765      	strb	r5, [r4, #29]
1000ee4a:	77a5      	strb	r5, [r4, #30]
1000ee4c:	77e5      	strb	r5, [r4, #31]
1000ee4e:	8425      	strh	r5, [r4, #32]
1000ee50:	8465      	strh	r5, [r4, #34]	; 0x22
1000ee52:	4798      	blx	r3
1000ee54:	1c23      	adds	r3, r4, #0
1000ee56:	2207      	movs	r2, #7
1000ee58:	3374      	adds	r3, #116	; 0x74
1000ee5a:	701a      	strb	r2, [r3, #0]
1000ee5c:	1c23      	adds	r3, r4, #0
1000ee5e:	3204      	adds	r2, #4
1000ee60:	33aa      	adds	r3, #170	; 0xaa
1000ee62:	801a      	strh	r2, [r3, #0]
1000ee64:	1c2b      	adds	r3, r5, #0
1000ee66:	5d7a      	ldrb	r2, [r7, r5]
1000ee68:	33ac      	adds	r3, #172	; 0xac
1000ee6a:	3501      	adds	r5, #1
1000ee6c:	54e2      	strb	r2, [r4, r3]
1000ee6e:	2d0b      	cmp	r5, #11
1000ee70:	d1f8      	bne.n	1000ee64 <at_ble_init+0x144>
1000ee72:	1c30      	adds	r0, r6, #0
1000ee74:	b007      	add	sp, #28
1000ee76:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ee78:	100181bb 	.word	0x100181bb
1000ee7c:	1001571b 	.word	0x1001571b
1000ee80:	1001adf0 	.word	0x1001adf0
1000ee84:	10019f24 	.word	0x10019f24
1000ee88:	10019e84 	.word	0x10019e84
1000ee8c:	100183fc 	.word	0x100183fc
1000ee90:	100114d5 	.word	0x100114d5
1000ee94:	1000f191 	.word	0x1000f191
1000ee98:	1000f7f1 	.word	0x1000f7f1
1000ee9c:	1000faa5 	.word	0x1000faa5
1000eea0:	1000f82d 	.word	0x1000f82d
1000eea4:	1000d959 	.word	0x1000d959
1000eea8:	1000fda5 	.word	0x1000fda5
1000eeac:	1000db9d 	.word	0x1000db9d
1000eeb0:	1000fe4d 	.word	0x1000fe4d
1000eeb4:	1000e40d 	.word	0x1000e40d
1000eeb8:	1000e4c9 	.word	0x1000e4c9
1000eebc:	10010a15 	.word	0x10010a15
1000eec0:	1001adf2 	.word	0x1001adf2
1000eec4:	1001ae82 	.word	0x1001ae82
1000eec8:	00003a98 	.word	0x00003a98
1000eecc:	1001ae8d 	.word	0x1001ae8d
1000eed0:	1000ec91 	.word	0x1000ec91

1000eed4 <at_ble_addr_set>:
1000eed4:	b538      	push	{r3, r4, r5, lr}
1000eed6:	1c45      	adds	r5, r0, #1
1000eed8:	1c03      	adds	r3, r0, #0
1000eeda:	20cf      	movs	r0, #207	; 0xcf
1000eedc:	2d00      	cmp	r5, #0
1000eede:	d018      	beq.n	1000ef12 <at_ble_addr_set+0x3e>
1000eee0:	781a      	ldrb	r2, [r3, #0]
1000eee2:	2a03      	cmp	r2, #3
1000eee4:	d815      	bhi.n	1000ef12 <at_ble_addr_set+0x3e>
1000eee6:	2a01      	cmp	r2, #1
1000eee8:	d102      	bne.n	1000eef0 <at_ble_addr_set+0x1c>
1000eeea:	785a      	ldrb	r2, [r3, #1]
1000eeec:	2a00      	cmp	r2, #0
1000eeee:	d010      	beq.n	1000ef12 <at_ble_addr_set+0x3e>
1000eef0:	1c1c      	adds	r4, r3, #0
1000eef2:	1c29      	adds	r1, r5, #0
1000eef4:	2206      	movs	r2, #6
1000eef6:	4b07      	ldr	r3, [pc, #28]	; (1000ef14 <at_ble_addr_set+0x40>)
1000eef8:	4807      	ldr	r0, [pc, #28]	; (1000ef18 <at_ble_addr_set+0x44>)
1000eefa:	4798      	blx	r3
1000eefc:	7823      	ldrb	r3, [r4, #0]
1000eefe:	4807      	ldr	r0, [pc, #28]	; (1000ef1c <at_ble_addr_set+0x48>)
1000ef00:	7103      	strb	r3, [r0, #4]
1000ef02:	4b07      	ldr	r3, [pc, #28]	; (1000ef20 <at_ble_addr_set+0x4c>)
1000ef04:	4798      	blx	r3
1000ef06:	7823      	ldrb	r3, [r4, #0]
1000ef08:	2b00      	cmp	r3, #0
1000ef0a:	d102      	bne.n	1000ef12 <at_ble_addr_set+0x3e>
1000ef0c:	1c28      	adds	r0, r5, #0
1000ef0e:	4b05      	ldr	r3, [pc, #20]	; (1000ef24 <at_ble_addr_set+0x50>)
1000ef10:	4798      	blx	r3
1000ef12:	bd38      	pop	{r3, r4, r5, pc}
1000ef14:	1001571b 	.word	0x1001571b
1000ef18:	1001ae87 	.word	0x1001ae87
1000ef1c:	1001ae82 	.word	0x1001ae82
1000ef20:	1000ec91 	.word	0x1000ec91
1000ef24:	1000fed1 	.word	0x1000fed1

1000ef28 <at_ble_adv_data_set>:
1000ef28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000ef2a:	4684      	mov	ip, r0
1000ef2c:	1c0f      	adds	r7, r1, #0
1000ef2e:	1c16      	adds	r6, r2, #0
1000ef30:	1c1c      	adds	r4, r3, #0
1000ef32:	2800      	cmp	r0, #0
1000ef34:	d102      	bne.n	1000ef3c <at_ble_adv_data_set+0x14>
1000ef36:	20e2      	movs	r0, #226	; 0xe2
1000ef38:	2a00      	cmp	r2, #0
1000ef3a:	d02b      	beq.n	1000ef94 <at_ble_adv_data_set+0x6c>
1000ef3c:	20cf      	movs	r0, #207	; 0xcf
1000ef3e:	2f1f      	cmp	r7, #31
1000ef40:	d828      	bhi.n	1000ef94 <at_ble_adv_data_set+0x6c>
1000ef42:	2c1f      	cmp	r4, #31
1000ef44:	d826      	bhi.n	1000ef94 <at_ble_adv_data_set+0x6c>
1000ef46:	4663      	mov	r3, ip
1000ef48:	2b00      	cmp	r3, #0
1000ef4a:	d00e      	beq.n	1000ef6a <at_ble_adv_data_set+0x42>
1000ef4c:	4812      	ldr	r0, [pc, #72]	; (1000ef98 <at_ble_adv_data_set+0x70>)
1000ef4e:	4d13      	ldr	r5, [pc, #76]	; (1000ef9c <at_ble_adv_data_set+0x74>)
1000ef50:	2f00      	cmp	r7, #0
1000ef52:	d104      	bne.n	1000ef5e <at_ble_adv_data_set+0x36>
1000ef54:	1c39      	adds	r1, r7, #0
1000ef56:	221f      	movs	r2, #31
1000ef58:	4b11      	ldr	r3, [pc, #68]	; (1000efa0 <at_ble_adv_data_set+0x78>)
1000ef5a:	4798      	blx	r3
1000ef5c:	e003      	b.n	1000ef66 <at_ble_adv_data_set+0x3e>
1000ef5e:	4661      	mov	r1, ip
1000ef60:	1c3a      	adds	r2, r7, #0
1000ef62:	4b10      	ldr	r3, [pc, #64]	; (1000efa4 <at_ble_adv_data_set+0x7c>)
1000ef64:	4798      	blx	r3
1000ef66:	3572      	adds	r5, #114	; 0x72
1000ef68:	702f      	strb	r7, [r5, #0]
1000ef6a:	1e30      	subs	r0, r6, #0
1000ef6c:	d012      	beq.n	1000ef94 <at_ble_adv_data_set+0x6c>
1000ef6e:	4d0b      	ldr	r5, [pc, #44]	; (1000ef9c <at_ble_adv_data_set+0x74>)
1000ef70:	480d      	ldr	r0, [pc, #52]	; (1000efa8 <at_ble_adv_data_set+0x80>)
1000ef72:	2c00      	cmp	r4, #0
1000ef74:	d107      	bne.n	1000ef86 <at_ble_adv_data_set+0x5e>
1000ef76:	1c21      	adds	r1, r4, #0
1000ef78:	221f      	movs	r2, #31
1000ef7a:	4b09      	ldr	r3, [pc, #36]	; (1000efa0 <at_ble_adv_data_set+0x78>)
1000ef7c:	3573      	adds	r5, #115	; 0x73
1000ef7e:	4798      	blx	r3
1000ef80:	702c      	strb	r4, [r5, #0]
1000ef82:	1c20      	adds	r0, r4, #0
1000ef84:	e006      	b.n	1000ef94 <at_ble_adv_data_set+0x6c>
1000ef86:	1c31      	adds	r1, r6, #0
1000ef88:	1c22      	adds	r2, r4, #0
1000ef8a:	4b06      	ldr	r3, [pc, #24]	; (1000efa4 <at_ble_adv_data_set+0x7c>)
1000ef8c:	4798      	blx	r3
1000ef8e:	2000      	movs	r0, #0
1000ef90:	3573      	adds	r5, #115	; 0x73
1000ef92:	702c      	strb	r4, [r5, #0]
1000ef94:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ef96:	46c0      	nop			; (mov r8, r8)
1000ef98:	1001aeb6 	.word	0x1001aeb6
1000ef9c:	1001ae82 	.word	0x1001ae82
1000efa0:	1001572d 	.word	0x1001572d
1000efa4:	1001571b 	.word	0x1001571b
1000efa8:	1001aed5 	.word	0x1001aed5

1000efac <at_ble_adv_start>:
1000efac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000efae:	b091      	sub	sp, #68	; 0x44
1000efb0:	1c1f      	adds	r7, r3, #0
1000efb2:	ab16      	add	r3, sp, #88	; 0x58
1000efb4:	881d      	ldrh	r5, [r3, #0]
1000efb6:	ab17      	add	r3, sp, #92	; 0x5c
1000efb8:	881b      	ldrh	r3, [r3, #0]
1000efba:	910d      	str	r1, [sp, #52]	; 0x34
1000efbc:	930e      	str	r3, [sp, #56]	; 0x38
1000efbe:	ab18      	add	r3, sp, #96	; 0x60
1000efc0:	781b      	ldrb	r3, [r3, #0]
1000efc2:	1c04      	adds	r4, r0, #0
1000efc4:	930f      	str	r3, [sp, #60]	; 0x3c
1000efc6:	4b42      	ldr	r3, [pc, #264]	; (1000f0d0 <at_ble_adv_start+0x124>)
1000efc8:	1c16      	adds	r6, r2, #0
1000efca:	3373      	adds	r3, #115	; 0x73
1000efcc:	781b      	ldrb	r3, [r3, #0]
1000efce:	20cf      	movs	r0, #207	; 0xcf
1000efd0:	930c      	str	r3, [sp, #48]	; 0x30
1000efd2:	2c01      	cmp	r4, #1
1000efd4:	d103      	bne.n	1000efde <at_ble_adv_start+0x32>
1000efd6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000efd8:	2b00      	cmp	r3, #0
1000efda:	d176      	bne.n	1000f0ca <at_ble_adv_start+0x11e>
1000efdc:	e024      	b.n	1000f028 <at_ble_adv_start+0x7c>
1000efde:	2c04      	cmp	r4, #4
1000efe0:	d873      	bhi.n	1000f0ca <at_ble_adv_start+0x11e>
1000efe2:	2380      	movs	r3, #128	; 0x80
1000efe4:	01db      	lsls	r3, r3, #7
1000efe6:	429d      	cmp	r5, r3
1000efe8:	d86f      	bhi.n	1000f0ca <at_ble_adv_start+0x11e>
1000efea:	2c00      	cmp	r4, #0
1000efec:	d102      	bne.n	1000eff4 <at_ble_adv_start+0x48>
1000efee:	2d1f      	cmp	r5, #31
1000eff0:	d96b      	bls.n	1000f0ca <at_ble_adv_start+0x11e>
1000eff2:	e003      	b.n	1000effc <at_ble_adv_start+0x50>
1000eff4:	2d9f      	cmp	r5, #159	; 0x9f
1000eff6:	d801      	bhi.n	1000effc <at_ble_adv_start+0x50>
1000eff8:	2c01      	cmp	r4, #1
1000effa:	d166      	bne.n	1000f0ca <at_ble_adv_start+0x11e>
1000effc:	2f00      	cmp	r7, #0
1000effe:	d009      	beq.n	1000f014 <at_ble_adv_start+0x68>
1000f000:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000f002:	20cf      	movs	r0, #207	; 0xcf
1000f004:	3b01      	subs	r3, #1
1000f006:	2b01      	cmp	r3, #1
1000f008:	d95f      	bls.n	1000f0ca <at_ble_adv_start+0x11e>
1000f00a:	2c01      	cmp	r4, #1
1000f00c:	d102      	bne.n	1000f014 <at_ble_adv_start+0x68>
1000f00e:	2d00      	cmp	r5, #0
1000f010:	d100      	bne.n	1000f014 <at_ble_adv_start+0x68>
1000f012:	3520      	adds	r5, #32
1000f014:	4b2f      	ldr	r3, [pc, #188]	; (1000f0d4 <at_ble_adv_start+0x128>)
1000f016:	4798      	blx	r3
1000f018:	1c01      	adds	r1, r0, #0
1000f01a:	2e00      	cmp	r6, #0
1000f01c:	d043      	beq.n	1000f0a6 <at_ble_adv_start+0xfa>
1000f01e:	7833      	ldrb	r3, [r6, #0]
1000f020:	1e60      	subs	r0, r4, #1
1000f022:	2b00      	cmp	r3, #0
1000f024:	d109      	bne.n	1000f03a <at_ble_adv_start+0x8e>
1000f026:	e03b      	b.n	1000f0a0 <at_ble_adv_start+0xf4>
1000f028:	2380      	movs	r3, #128	; 0x80
1000f02a:	01db      	lsls	r3, r3, #7
1000f02c:	429d      	cmp	r5, r3
1000f02e:	d84c      	bhi.n	1000f0ca <at_ble_adv_start+0x11e>
1000f030:	2e00      	cmp	r6, #0
1000f032:	d04a      	beq.n	1000f0ca <at_ble_adv_start+0x11e>
1000f034:	2f00      	cmp	r7, #0
1000f036:	d1e3      	bne.n	1000f000 <at_ble_adv_start+0x54>
1000f038:	e02b      	b.n	1000f092 <at_ble_adv_start+0xe6>
1000f03a:	2301      	movs	r3, #1
1000f03c:	2803      	cmp	r0, #3
1000f03e:	d93a      	bls.n	1000f0b6 <at_ble_adv_start+0x10a>
1000f040:	200d      	movs	r0, #13
1000f042:	1c72      	adds	r2, r6, #1
1000f044:	e002      	b.n	1000f04c <at_ble_adv_start+0xa0>
1000f046:	200e      	movs	r0, #14
1000f048:	1e32      	subs	r2, r6, #0
1000f04a:	d1fa      	bne.n	1000f042 <at_ble_adv_start+0x96>
1000f04c:	4c20      	ldr	r4, [pc, #128]	; (1000f0d0 <at_ble_adv_start+0x124>)
1000f04e:	3474      	adds	r4, #116	; 0x74
1000f050:	7826      	ldrb	r6, [r4, #0]
1000f052:	2407      	movs	r4, #7
1000f054:	2e00      	cmp	r6, #0
1000f056:	d000      	beq.n	1000f05a <at_ble_adv_start+0xae>
1000f058:	1c34      	adds	r4, r6, #0
1000f05a:	9200      	str	r2, [sp, #0]
1000f05c:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000f05e:	9403      	str	r4, [sp, #12]
1000f060:	9204      	str	r2, [sp, #16]
1000f062:	4a1b      	ldr	r2, [pc, #108]	; (1000f0d0 <at_ble_adv_start+0x124>)
1000f064:	9501      	str	r5, [sp, #4]
1000f066:	9502      	str	r5, [sp, #8]
1000f068:	9705      	str	r7, [sp, #20]
1000f06a:	3272      	adds	r2, #114	; 0x72
1000f06c:	7812      	ldrb	r2, [r2, #0]
1000f06e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000f070:	9206      	str	r2, [sp, #24]
1000f072:	4a19      	ldr	r2, [pc, #100]	; (1000f0d8 <at_ble_adv_start+0x12c>)
1000f074:	9207      	str	r2, [sp, #28]
1000f076:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000f078:	9208      	str	r2, [sp, #32]
1000f07a:	4a18      	ldr	r2, [pc, #96]	; (1000f0dc <at_ble_adv_start+0x130>)
1000f07c:	9209      	str	r2, [sp, #36]	; 0x24
1000f07e:	2264      	movs	r2, #100	; 0x64
1000f080:	4362      	muls	r2, r4
1000f082:	b292      	uxth	r2, r2
1000f084:	920a      	str	r2, [sp, #40]	; 0x28
1000f086:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000f088:	4c15      	ldr	r4, [pc, #84]	; (1000f0e0 <at_ble_adv_start+0x134>)
1000f08a:	920b      	str	r2, [sp, #44]	; 0x2c
1000f08c:	4a15      	ldr	r2, [pc, #84]	; (1000f0e4 <at_ble_adv_start+0x138>)
1000f08e:	47a0      	blx	r4
1000f090:	e01b      	b.n	1000f0ca <at_ble_adv_start+0x11e>
1000f092:	2d00      	cmp	r5, #0
1000f094:	d1be      	bne.n	1000f014 <at_ble_adv_start+0x68>
1000f096:	4b0f      	ldr	r3, [pc, #60]	; (1000f0d4 <at_ble_adv_start+0x128>)
1000f098:	4798      	blx	r3
1000f09a:	2520      	movs	r5, #32
1000f09c:	1c01      	adds	r1, r0, #0
1000f09e:	e7be      	b.n	1000f01e <at_ble_adv_start+0x72>
1000f0a0:	2803      	cmp	r0, #3
1000f0a2:	d8cd      	bhi.n	1000f040 <at_ble_adv_start+0x94>
1000f0a4:	e006      	b.n	1000f0b4 <at_ble_adv_start+0x108>
1000f0a6:	1e60      	subs	r0, r4, #1
1000f0a8:	2803      	cmp	r0, #3
1000f0aa:	d903      	bls.n	1000f0b4 <at_ble_adv_start+0x108>
1000f0ac:	1c33      	adds	r3, r6, #0
1000f0ae:	200d      	movs	r0, #13
1000f0b0:	1c32      	adds	r2, r6, #0
1000f0b2:	e7cb      	b.n	1000f04c <at_ble_adv_start+0xa0>
1000f0b4:	2300      	movs	r3, #0
1000f0b6:	f003 fc8f 	bl	100129d8 <__gnu_thumb1_case_sqi>
1000f0ba:	06c6      	.short	0x06c6
1000f0bc:	0204      	.short	0x0204
1000f0be:	200f      	movs	r0, #15
1000f0c0:	e7c2      	b.n	1000f048 <at_ble_adv_start+0x9c>
1000f0c2:	2200      	movs	r2, #0
1000f0c4:	920c      	str	r2, [sp, #48]	; 0x30
1000f0c6:	200c      	movs	r0, #12
1000f0c8:	e7be      	b.n	1000f048 <at_ble_adv_start+0x9c>
1000f0ca:	b011      	add	sp, #68	; 0x44
1000f0cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f0ce:	46c0      	nop			; (mov r8, r8)
1000f0d0:	1001ae82 	.word	0x1001ae82
1000f0d4:	10010f61 	.word	0x10010f61
1000f0d8:	1001aeb6 	.word	0x1001aeb6
1000f0dc:	1001aed5 	.word	0x1001aed5
1000f0e0:	10010e41 	.word	0x10010e41
1000f0e4:	00003a98 	.word	0x00003a98

1000f0e8 <at_ble_adv_stop>:
1000f0e8:	b508      	push	{r3, lr}
1000f0ea:	4b01      	ldr	r3, [pc, #4]	; (1000f0f0 <at_ble_adv_stop+0x8>)
1000f0ec:	4798      	blx	r3
1000f0ee:	bd08      	pop	{r3, pc}
1000f0f0:	10010c6d 	.word	0x10010c6d

1000f0f4 <at_ble_scan_stop>:
1000f0f4:	b510      	push	{r4, lr}
1000f0f6:	4b05      	ldr	r3, [pc, #20]	; (1000f10c <at_ble_scan_stop+0x18>)
1000f0f8:	4798      	blx	r3
1000f0fa:	1e04      	subs	r4, r0, #0
1000f0fc:	d103      	bne.n	1000f106 <at_ble_scan_stop+0x12>
1000f0fe:	20d1      	movs	r0, #209	; 0xd1
1000f100:	4b03      	ldr	r3, [pc, #12]	; (1000f110 <at_ble_scan_stop+0x1c>)
1000f102:	0100      	lsls	r0, r0, #4
1000f104:	4798      	blx	r3
1000f106:	1c20      	adds	r0, r4, #0
1000f108:	bd10      	pop	{r4, pc}
1000f10a:	46c0      	nop			; (mov r8, r8)
1000f10c:	10010c6d 	.word	0x10010c6d
1000f110:	1000eba1 	.word	0x1000eba1

1000f114 <at_ble_disconnect>:
1000f114:	b538      	push	{r3, r4, r5, lr}
1000f116:	1c04      	adds	r4, r0, #0
1000f118:	4b04      	ldr	r3, [pc, #16]	; (1000f12c <at_ble_disconnect+0x18>)
1000f11a:	1c08      	adds	r0, r1, #0
1000f11c:	1c21      	adds	r1, r4, #0
1000f11e:	4798      	blx	r3
1000f120:	1c05      	adds	r5, r0, #0
1000f122:	4b03      	ldr	r3, [pc, #12]	; (1000f130 <at_ble_disconnect+0x1c>)
1000f124:	1c20      	adds	r0, r4, #0
1000f126:	4798      	blx	r3
1000f128:	1c28      	adds	r0, r5, #0
1000f12a:	bd38      	pop	{r3, r4, r5, pc}
1000f12c:	100102e5 	.word	0x100102e5
1000f130:	1000ebe5 	.word	0x1000ebe5

1000f134 <at_ble_conn_update_reply>:
1000f134:	b510      	push	{r4, lr}
1000f136:	4c01      	ldr	r4, [pc, #4]	; (1000f13c <at_ble_conn_update_reply+0x8>)
1000f138:	47a0      	blx	r4
1000f13a:	bd10      	pop	{r4, pc}
1000f13c:	100107d5 	.word	0x100107d5

1000f140 <at_ble_random_address_resolve>:
1000f140:	b510      	push	{r4, lr}
1000f142:	23cf      	movs	r3, #207	; 0xcf
1000f144:	2800      	cmp	r0, #0
1000f146:	d00a      	beq.n	1000f15e <at_ble_random_address_resolve+0x1e>
1000f148:	2900      	cmp	r1, #0
1000f14a:	d008      	beq.n	1000f15e <at_ble_random_address_resolve+0x1e>
1000f14c:	2a00      	cmp	r2, #0
1000f14e:	d006      	beq.n	1000f15e <at_ble_random_address_resolve+0x1e>
1000f150:	780c      	ldrb	r4, [r1, #0]
1000f152:	2c02      	cmp	r4, #2
1000f154:	d103      	bne.n	1000f15e <at_ble_random_address_resolve+0x1e>
1000f156:	4b03      	ldr	r3, [pc, #12]	; (1000f164 <at_ble_random_address_resolve+0x24>)
1000f158:	3101      	adds	r1, #1
1000f15a:	4798      	blx	r3
1000f15c:	2300      	movs	r3, #0
1000f15e:	1c18      	adds	r0, r3, #0
1000f160:	bd10      	pop	{r4, pc}
1000f162:	46c0      	nop			; (mov r8, r8)
1000f164:	10011001 	.word	0x10011001

1000f168 <at_ble_uuid_type2len>:
1000f168:	23cf      	movs	r3, #207	; 0xcf
1000f16a:	2802      	cmp	r0, #2
1000f16c:	d801      	bhi.n	1000f172 <at_ble_uuid_type2len+0xa>
1000f16e:	4b02      	ldr	r3, [pc, #8]	; (1000f178 <at_ble_uuid_type2len+0x10>)
1000f170:	5c1b      	ldrb	r3, [r3, r0]
1000f172:	1c18      	adds	r0, r3, #0
1000f174:	4770      	bx	lr
1000f176:	46c0      	nop			; (mov r8, r8)
1000f178:	100181c6 	.word	0x100181c6

1000f17c <at_ble_uuid_len2type>:
1000f17c:	1e83      	subs	r3, r0, #2
1000f17e:	b2db      	uxtb	r3, r3
1000f180:	2003      	movs	r0, #3
1000f182:	2b0e      	cmp	r3, #14
1000f184:	d801      	bhi.n	1000f18a <at_ble_uuid_len2type+0xe>
1000f186:	4a01      	ldr	r2, [pc, #4]	; (1000f18c <at_ble_uuid_len2type+0x10>)
1000f188:	5cd0      	ldrb	r0, [r2, r3]
1000f18a:	4770      	bx	lr
1000f18c:	100181c9 	.word	0x100181c9

1000f190 <init_gatt_client_module>:
1000f190:	2200      	movs	r2, #0
1000f192:	4b01      	ldr	r3, [pc, #4]	; (1000f198 <init_gatt_client_module+0x8>)
1000f194:	801a      	strh	r2, [r3, #0]
1000f196:	4770      	bx	lr
1000f198:	10019e7c 	.word	0x10019e7c

1000f19c <db_searchATT>:
1000f19c:	b570      	push	{r4, r5, r6, lr}
1000f19e:	1c05      	adds	r5, r0, #0
1000f1a0:	2400      	movs	r4, #0
1000f1a2:	4b0c      	ldr	r3, [pc, #48]	; (1000f1d4 <db_searchATT+0x38>)
1000f1a4:	6819      	ldr	r1, [r3, #0]
1000f1a6:	4b0c      	ldr	r3, [pc, #48]	; (1000f1d8 <db_searchATT+0x3c>)
1000f1a8:	681e      	ldr	r6, [r3, #0]
1000f1aa:	428c      	cmp	r4, r1
1000f1ac:	dc10      	bgt.n	1000f1d0 <db_searchATT+0x34>
1000f1ae:	200c      	movs	r0, #12
1000f1b0:	1863      	adds	r3, r4, r1
1000f1b2:	0fda      	lsrs	r2, r3, #31
1000f1b4:	18d3      	adds	r3, r2, r3
1000f1b6:	1c02      	adds	r2, r0, #0
1000f1b8:	105b      	asrs	r3, r3, #1
1000f1ba:	435a      	muls	r2, r3
1000f1bc:	18b0      	adds	r0, r6, r2
1000f1be:	8802      	ldrh	r2, [r0, #0]
1000f1c0:	42aa      	cmp	r2, r5
1000f1c2:	d201      	bcs.n	1000f1c8 <db_searchATT+0x2c>
1000f1c4:	1e59      	subs	r1, r3, #1
1000f1c6:	e7f0      	b.n	1000f1aa <db_searchATT+0xe>
1000f1c8:	42aa      	cmp	r2, r5
1000f1ca:	d902      	bls.n	1000f1d2 <db_searchATT+0x36>
1000f1cc:	1c5c      	adds	r4, r3, #1
1000f1ce:	e7ec      	b.n	1000f1aa <db_searchATT+0xe>
1000f1d0:	2000      	movs	r0, #0
1000f1d2:	bd70      	pop	{r4, r5, r6, pc}
1000f1d4:	10019e90 	.word	0x10019e90
1000f1d8:	10019e88 	.word	0x10019e88

1000f1dc <att_permissions>:
1000f1dc:	b530      	push	{r4, r5, lr}
1000f1de:	2403      	movs	r4, #3
1000f1e0:	1c05      	adds	r5, r0, #0
1000f1e2:	2301      	movs	r3, #1
1000f1e4:	4025      	ands	r5, r4
1000f1e6:	42a5      	cmp	r5, r4
1000f1e8:	d009      	beq.n	1000f1fe <att_permissions+0x22>
1000f1ea:	1c23      	adds	r3, r4, #0
1000f1ec:	1924      	adds	r4, r4, r4
1000f1ee:	4220      	tst	r0, r4
1000f1f0:	d105      	bne.n	1000f1fe <att_permissions+0x22>
1000f1f2:	3b02      	subs	r3, #2
1000f1f4:	4218      	tst	r0, r3
1000f1f6:	d102      	bne.n	1000f1fe <att_permissions+0x22>
1000f1f8:	1e4b      	subs	r3, r1, #1
1000f1fa:	4199      	sbcs	r1, r3
1000f1fc:	b28b      	uxth	r3, r1
1000f1fe:	2130      	movs	r1, #48	; 0x30
1000f200:	4001      	ands	r1, r0
1000f202:	2930      	cmp	r1, #48	; 0x30
1000f204:	d007      	beq.n	1000f216 <att_permissions+0x3a>
1000f206:	0641      	lsls	r1, r0, #25
1000f208:	d401      	bmi.n	1000f20e <att_permissions+0x32>
1000f20a:	0681      	lsls	r1, r0, #26
1000f20c:	d501      	bpl.n	1000f212 <att_permissions+0x36>
1000f20e:	4807      	ldr	r0, [pc, #28]	; (1000f22c <att_permissions+0x50>)
1000f210:	e009      	b.n	1000f226 <att_permissions+0x4a>
1000f212:	06c1      	lsls	r1, r0, #27
1000f214:	d501      	bpl.n	1000f21a <att_permissions+0x3e>
1000f216:	4806      	ldr	r0, [pc, #24]	; (1000f230 <att_permissions+0x54>)
1000f218:	e005      	b.n	1000f226 <att_permissions+0x4a>
1000f21a:	2a00      	cmp	r2, #0
1000f21c:	d001      	beq.n	1000f222 <att_permissions+0x46>
1000f21e:	2204      	movs	r2, #4
1000f220:	4313      	orrs	r3, r2
1000f222:	2080      	movs	r0, #128	; 0x80
1000f224:	0180      	lsls	r0, r0, #6
1000f226:	4318      	orrs	r0, r3
1000f228:	bd30      	pop	{r4, r5, pc}
1000f22a:	46c0      	nop			; (mov r8, r8)
1000f22c:	0000200c 	.word	0x0000200c
1000f230:	00002004 	.word	0x00002004

1000f234 <char_permissions>:
1000f234:	b530      	push	{r4, r5, lr}
1000f236:	2300      	movs	r3, #0
1000f238:	0784      	lsls	r4, r0, #30
1000f23a:	d503      	bpl.n	1000f244 <char_permissions+0x10>
1000f23c:	3301      	adds	r3, #1
1000f23e:	4219      	tst	r1, r3
1000f240:	d100      	bne.n	1000f244 <char_permissions+0x10>
1000f242:	3302      	adds	r3, #2
1000f244:	0704      	lsls	r4, r0, #28
1000f246:	d508      	bpl.n	1000f25a <char_permissions+0x26>
1000f248:	06cc      	lsls	r4, r1, #27
1000f24a:	d501      	bpl.n	1000f250 <char_permissions+0x1c>
1000f24c:	2404      	movs	r4, #4
1000f24e:	e000      	b.n	1000f252 <char_permissions+0x1e>
1000f250:	240c      	movs	r4, #12
1000f252:	4323      	orrs	r3, r4
1000f254:	2480      	movs	r4, #128	; 0x80
1000f256:	01a4      	lsls	r4, r4, #6
1000f258:	4323      	orrs	r3, r4
1000f25a:	0684      	lsls	r4, r0, #26
1000f25c:	d506      	bpl.n	1000f26c <char_permissions+0x38>
1000f25e:	2406      	movs	r4, #6
1000f260:	4221      	tst	r1, r4
1000f262:	d101      	bne.n	1000f268 <char_permissions+0x34>
1000f264:	340a      	adds	r4, #10
1000f266:	e000      	b.n	1000f26a <char_permissions+0x36>
1000f268:	2430      	movs	r4, #48	; 0x30
1000f26a:	4323      	orrs	r3, r4
1000f26c:	06c4      	lsls	r4, r0, #27
1000f26e:	d506      	bpl.n	1000f27e <char_permissions+0x4a>
1000f270:	2406      	movs	r4, #6
1000f272:	4221      	tst	r1, r4
1000f274:	d101      	bne.n	1000f27a <char_permissions+0x46>
1000f276:	343a      	adds	r4, #58	; 0x3a
1000f278:	e000      	b.n	1000f27c <char_permissions+0x48>
1000f27a:	24c0      	movs	r4, #192	; 0xc0
1000f27c:	4323      	orrs	r3, r4
1000f27e:	2480      	movs	r4, #128	; 0x80
1000f280:	0064      	lsls	r4, r4, #1
1000f282:	4220      	tst	r0, r4
1000f284:	d000      	beq.n	1000f288 <char_permissions+0x54>
1000f286:	4323      	orrs	r3, r4
1000f288:	07c4      	lsls	r4, r0, #31
1000f28a:	d502      	bpl.n	1000f292 <char_permissions+0x5e>
1000f28c:	2480      	movs	r4, #128	; 0x80
1000f28e:	00a4      	lsls	r4, r4, #2
1000f290:	4323      	orrs	r3, r4
1000f292:	2404      	movs	r4, #4
1000f294:	4220      	tst	r0, r4
1000f296:	d006      	beq.n	1000f2a6 <char_permissions+0x72>
1000f298:	06cd      	lsls	r5, r1, #27
1000f29a:	d400      	bmi.n	1000f29e <char_permissions+0x6a>
1000f29c:	240c      	movs	r4, #12
1000f29e:	4323      	orrs	r3, r4
1000f2a0:	2480      	movs	r4, #128	; 0x80
1000f2a2:	0124      	lsls	r4, r4, #4
1000f2a4:	4323      	orrs	r3, r4
1000f2a6:	0644      	lsls	r4, r0, #25
1000f2a8:	d501      	bpl.n	1000f2ae <char_permissions+0x7a>
1000f2aa:	4c08      	ldr	r4, [pc, #32]	; (1000f2cc <char_permissions+0x98>)
1000f2ac:	4323      	orrs	r3, r4
1000f2ae:	0600      	lsls	r0, r0, #24
1000f2b0:	d507      	bpl.n	1000f2c2 <char_permissions+0x8e>
1000f2b2:	2004      	movs	r0, #4
1000f2b4:	06c9      	lsls	r1, r1, #27
1000f2b6:	d400      	bmi.n	1000f2ba <char_permissions+0x86>
1000f2b8:	200c      	movs	r0, #12
1000f2ba:	4303      	orrs	r3, r0
1000f2bc:	2084      	movs	r0, #132	; 0x84
1000f2be:	0180      	lsls	r0, r0, #6
1000f2c0:	4303      	orrs	r3, r0
1000f2c2:	0390      	lsls	r0, r2, #14
1000f2c4:	4303      	orrs	r3, r0
1000f2c6:	b298      	uxth	r0, r3
1000f2c8:	bd30      	pop	{r4, r5, pc}
1000f2ca:	46c0      	nop			; (mov r8, r8)
1000f2cc:	00001004 	.word	0x00001004

1000f2d0 <presentation_format_define>:
1000f2d0:	b507      	push	{r0, r1, r2, lr}
1000f2d2:	466a      	mov	r2, sp
1000f2d4:	780b      	ldrb	r3, [r1, #0]
1000f2d6:	7013      	strb	r3, [r2, #0]
1000f2d8:	784b      	ldrb	r3, [r1, #1]
1000f2da:	7053      	strb	r3, [r2, #1]
1000f2dc:	884b      	ldrh	r3, [r1, #2]
1000f2de:	7093      	strb	r3, [r2, #2]
1000f2e0:	0a1b      	lsrs	r3, r3, #8
1000f2e2:	70d3      	strb	r3, [r2, #3]
1000f2e4:	790b      	ldrb	r3, [r1, #4]
1000f2e6:	7113      	strb	r3, [r2, #4]
1000f2e8:	88cb      	ldrh	r3, [r1, #6]
1000f2ea:	2107      	movs	r1, #7
1000f2ec:	7153      	strb	r3, [r2, #5]
1000f2ee:	0a1b      	lsrs	r3, r3, #8
1000f2f0:	7193      	strb	r3, [r2, #6]
1000f2f2:	4b01      	ldr	r3, [pc, #4]	; (1000f2f8 <presentation_format_define+0x28>)
1000f2f4:	4798      	blx	r3
1000f2f6:	bd0e      	pop	{r1, r2, r3, pc}
1000f2f8:	10011665 	.word	0x10011665

1000f2fc <db_addATT>:
1000f2fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f2fe:	4c29      	ldr	r4, [pc, #164]	; (1000f3a4 <db_addATT+0xa8>)
1000f300:	1c1d      	adds	r5, r3, #0
1000f302:	6823      	ldr	r3, [r4, #0]
1000f304:	9001      	str	r0, [sp, #4]
1000f306:	26d3      	movs	r6, #211	; 0xd3
1000f308:	2b00      	cmp	r3, #0
1000f30a:	d048      	beq.n	1000f39e <db_addATT+0xa2>
1000f30c:	1c1e      	adds	r6, r3, #0
1000f30e:	3e0c      	subs	r6, #12
1000f310:	6026      	str	r6, [r4, #0]
1000f312:	2900      	cmp	r1, #0
1000f314:	d005      	beq.n	1000f322 <db_addATT+0x26>
1000f316:	4f24      	ldr	r7, [pc, #144]	; (1000f3a8 <db_addATT+0xac>)
1000f318:	46bc      	mov	ip, r7
1000f31a:	4660      	mov	r0, ip
1000f31c:	683f      	ldr	r7, [r7, #0]
1000f31e:	18bf      	adds	r7, r7, r2
1000f320:	6007      	str	r7, [r0, #0]
1000f322:	4821      	ldr	r0, [pc, #132]	; (1000f3a8 <db_addATT+0xac>)
1000f324:	6807      	ldr	r7, [r0, #0]
1000f326:	4684      	mov	ip, r0
1000f328:	42be      	cmp	r6, r7
1000f32a:	d932      	bls.n	1000f392 <db_addATT+0x96>
1000f32c:	4668      	mov	r0, sp
1000f32e:	8880      	ldrh	r0, [r0, #4]
1000f330:	3b0c      	subs	r3, #12
1000f332:	8018      	strh	r0, [r3, #0]
1000f334:	6823      	ldr	r3, [r4, #0]
1000f336:	2900      	cmp	r1, #0
1000f338:	d009      	beq.n	1000f34e <db_addATT+0x52>
1000f33a:	2a00      	cmp	r2, #0
1000f33c:	d007      	beq.n	1000f34e <db_addATT+0x52>
1000f33e:	4660      	mov	r0, ip
1000f340:	6800      	ldr	r0, [r0, #0]
1000f342:	809a      	strh	r2, [r3, #4]
1000f344:	1a80      	subs	r0, r0, r2
1000f346:	6098      	str	r0, [r3, #8]
1000f348:	4b18      	ldr	r3, [pc, #96]	; (1000f3ac <db_addATT+0xb0>)
1000f34a:	4798      	blx	r3
1000f34c:	e002      	b.n	1000f354 <db_addATT+0x58>
1000f34e:	2100      	movs	r1, #0
1000f350:	809a      	strh	r2, [r3, #4]
1000f352:	6099      	str	r1, [r3, #8]
1000f354:	2300      	movs	r3, #0
1000f356:	6822      	ldr	r2, [r4, #0]
1000f358:	7093      	strb	r3, [r2, #2]
1000f35a:	3303      	adds	r3, #3
1000f35c:	402b      	ands	r3, r5
1000f35e:	2b03      	cmp	r3, #3
1000f360:	d001      	beq.n	1000f366 <db_addATT+0x6a>
1000f362:	076b      	lsls	r3, r5, #29
1000f364:	d504      	bpl.n	1000f370 <db_addATT+0x74>
1000f366:	2101      	movs	r1, #1
1000f368:	6822      	ldr	r2, [r4, #0]
1000f36a:	7893      	ldrb	r3, [r2, #2]
1000f36c:	430b      	orrs	r3, r1
1000f36e:	7093      	strb	r3, [r2, #2]
1000f370:	2330      	movs	r3, #48	; 0x30
1000f372:	402b      	ands	r3, r5
1000f374:	2b30      	cmp	r3, #48	; 0x30
1000f376:	d001      	beq.n	1000f37c <db_addATT+0x80>
1000f378:	066b      	lsls	r3, r5, #25
1000f37a:	d504      	bpl.n	1000f386 <db_addATT+0x8a>
1000f37c:	2102      	movs	r1, #2
1000f37e:	6822      	ldr	r2, [r4, #0]
1000f380:	7893      	ldrb	r3, [r2, #2]
1000f382:	430b      	orrs	r3, r1
1000f384:	7093      	strb	r3, [r2, #2]
1000f386:	4a0a      	ldr	r2, [pc, #40]	; (1000f3b0 <db_addATT+0xb4>)
1000f388:	2600      	movs	r6, #0
1000f38a:	6813      	ldr	r3, [r2, #0]
1000f38c:	3301      	adds	r3, #1
1000f38e:	6013      	str	r3, [r2, #0]
1000f390:	e005      	b.n	1000f39e <db_addATT+0xa2>
1000f392:	6023      	str	r3, [r4, #0]
1000f394:	2611      	movs	r6, #17
1000f396:	2900      	cmp	r1, #0
1000f398:	d001      	beq.n	1000f39e <db_addATT+0xa2>
1000f39a:	1aba      	subs	r2, r7, r2
1000f39c:	6002      	str	r2, [r0, #0]
1000f39e:	1c30      	adds	r0, r6, #0
1000f3a0:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f3a2:	46c0      	nop			; (mov r8, r8)
1000f3a4:	10019e88 	.word	0x10019e88
1000f3a8:	10019e8c 	.word	0x10019e8c
1000f3ac:	1001571b 	.word	0x1001571b
1000f3b0:	10019e90 	.word	0x10019e90

1000f3b4 <user_description_define>:
1000f3b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f3b6:	1c05      	adds	r5, r0, #0
1000f3b8:	20cf      	movs	r0, #207	; 0xcf
1000f3ba:	2a00      	cmp	r2, #0
1000f3bc:	d01c      	beq.n	1000f3f8 <user_description_define+0x44>
1000f3be:	1c14      	adds	r4, r2, #0
1000f3c0:	2203      	movs	r2, #3
1000f3c2:	1c1e      	adds	r6, r3, #0
1000f3c4:	400a      	ands	r2, r1
1000f3c6:	1c0b      	adds	r3, r1, #0
1000f3c8:	3a03      	subs	r2, #3
1000f3ca:	4251      	negs	r1, r2
1000f3cc:	4151      	adcs	r1, r2
1000f3ce:	075a      	lsls	r2, r3, #29
1000f3d0:	0fd2      	lsrs	r2, r2, #31
1000f3d2:	430a      	orrs	r2, r1
1000f3d4:	03d2      	lsls	r2, r2, #15
1000f3d6:	4f09      	ldr	r7, [pc, #36]	; (1000f3fc <user_description_define+0x48>)
1000f3d8:	1c28      	adds	r0, r5, #0
1000f3da:	2a00      	cmp	r2, #0
1000f3dc:	d003      	beq.n	1000f3e6 <user_description_define+0x32>
1000f3de:	1c21      	adds	r1, r4, #0
1000f3e0:	1c32      	adds	r2, r6, #0
1000f3e2:	47b8      	blx	r7
1000f3e4:	e008      	b.n	1000f3f8 <user_description_define+0x44>
1000f3e6:	1c11      	adds	r1, r2, #0
1000f3e8:	47b8      	blx	r7
1000f3ea:	2800      	cmp	r0, #0
1000f3ec:	d104      	bne.n	1000f3f8 <user_description_define+0x44>
1000f3ee:	1c28      	adds	r0, r5, #0
1000f3f0:	1c31      	adds	r1, r6, #0
1000f3f2:	1c22      	adds	r2, r4, #0
1000f3f4:	4b02      	ldr	r3, [pc, #8]	; (1000f400 <user_description_define+0x4c>)
1000f3f6:	4798      	blx	r3
1000f3f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f3fa:	46c0      	nop			; (mov r8, r8)
1000f3fc:	1000f2fd 	.word	0x1000f2fd
1000f400:	10011665 	.word	0x10011665

1000f404 <at_ble_read_authorize_reply.part.1>:
1000f404:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f406:	4b09      	ldr	r3, [pc, #36]	; (1000f42c <at_ble_read_authorize_reply.part.1+0x28>)
1000f408:	1c05      	adds	r5, r0, #0
1000f40a:	1c08      	adds	r0, r1, #0
1000f40c:	1c0c      	adds	r4, r1, #0
1000f40e:	4798      	blx	r3
1000f410:	2800      	cmp	r0, #0
1000f412:	d009      	beq.n	1000f428 <at_ble_read_authorize_reply.part.1+0x24>
1000f414:	6882      	ldr	r2, [r0, #8]
1000f416:	2a00      	cmp	r2, #0
1000f418:	d006      	beq.n	1000f428 <at_ble_read_authorize_reply.part.1+0x24>
1000f41a:	8883      	ldrh	r3, [r0, #4]
1000f41c:	1c29      	adds	r1, r5, #0
1000f41e:	9200      	str	r2, [sp, #0]
1000f420:	1c20      	adds	r0, r4, #0
1000f422:	2200      	movs	r2, #0
1000f424:	4c02      	ldr	r4, [pc, #8]	; (1000f430 <at_ble_read_authorize_reply.part.1+0x2c>)
1000f426:	47a0      	blx	r4
1000f428:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f42a:	46c0      	nop			; (mov r8, r8)
1000f42c:	1000f19d 	.word	0x1000f19d
1000f430:	100110fd 	.word	0x100110fd

1000f434 <internal_at_ble_service_define>:
1000f434:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f436:	b08b      	sub	sp, #44	; 0x2c
1000f438:	9306      	str	r3, [sp, #24]
1000f43a:	ab10      	add	r3, sp, #64	; 0x40
1000f43c:	9202      	str	r2, [sp, #8]
1000f43e:	cb04      	ldmia	r3!, {r2}
1000f440:	1c05      	adds	r5, r0, #0
1000f442:	881b      	ldrh	r3, [r3, #0]
1000f444:	9105      	str	r1, [sp, #20]
1000f446:	9303      	str	r3, [sp, #12]
1000f448:	ab12      	add	r3, sp, #72	; 0x48
1000f44a:	781b      	ldrb	r3, [r3, #0]
1000f44c:	20cf      	movs	r0, #207	; 0xcf
1000f44e:	9304      	str	r3, [sp, #16]
1000f450:	2d00      	cmp	r5, #0
1000f452:	d100      	bne.n	1000f456 <internal_at_ble_service_define+0x22>
1000f454:	e1ca      	b.n	1000f7ec <internal_at_ble_service_define+0x3b8>
1000f456:	2900      	cmp	r1, #0
1000f458:	d100      	bne.n	1000f45c <internal_at_ble_service_define+0x28>
1000f45a:	e1c7      	b.n	1000f7ec <internal_at_ble_service_define+0x3b8>
1000f45c:	2a00      	cmp	r2, #0
1000f45e:	d100      	bne.n	1000f462 <internal_at_ble_service_define+0x2e>
1000f460:	e1c4      	b.n	1000f7ec <internal_at_ble_service_define+0x3b8>
1000f462:	9b03      	ldr	r3, [sp, #12]
1000f464:	2b00      	cmp	r3, #0
1000f466:	d100      	bne.n	1000f46a <internal_at_ble_service_define+0x36>
1000f468:	e1c0      	b.n	1000f7ec <internal_at_ble_service_define+0x3b8>
1000f46a:	4bc9      	ldr	r3, [pc, #804]	; (1000f790 <internal_at_ble_service_define+0x35c>)
1000f46c:	3004      	adds	r0, #4
1000f46e:	681e      	ldr	r6, [r3, #0]
1000f470:	2e00      	cmp	r6, #0
1000f472:	d100      	bne.n	1000f476 <internal_at_ble_service_define+0x42>
1000f474:	e1ba      	b.n	1000f7ec <internal_at_ble_service_define+0x3b8>
1000f476:	2400      	movs	r4, #0
1000f478:	4bc6      	ldr	r3, [pc, #792]	; (1000f794 <internal_at_ble_service_define+0x360>)
1000f47a:	8034      	strh	r4, [r6, #0]
1000f47c:	881b      	ldrh	r3, [r3, #0]
1000f47e:	1db7      	adds	r7, r6, #6
1000f480:	1c21      	adds	r1, r4, #0
1000f482:	2210      	movs	r2, #16
1000f484:	8073      	strh	r3, [r6, #2]
1000f486:	1c38      	adds	r0, r7, #0
1000f488:	4bc3      	ldr	r3, [pc, #780]	; (1000f798 <internal_at_ble_service_define+0x364>)
1000f48a:	4798      	blx	r3
1000f48c:	7828      	ldrb	r0, [r5, #0]
1000f48e:	4bc3      	ldr	r3, [pc, #780]	; (1000f79c <internal_at_ble_service_define+0x368>)
1000f490:	4798      	blx	r3
1000f492:	1c69      	adds	r1, r5, #1
1000f494:	1c02      	adds	r2, r0, #0
1000f496:	4bc2      	ldr	r3, [pc, #776]	; (1000f7a0 <internal_at_ble_service_define+0x36c>)
1000f498:	1c38      	adds	r0, r7, #0
1000f49a:	4798      	blx	r3
1000f49c:	2204      	movs	r2, #4
1000f49e:	782b      	ldrb	r3, [r5, #0]
1000f4a0:	9d02      	ldr	r5, [sp, #8]
1000f4a2:	011b      	lsls	r3, r3, #4
1000f4a4:	4313      	orrs	r3, r2
1000f4a6:	9a04      	ldr	r2, [sp, #16]
1000f4a8:	7174      	strb	r4, [r6, #5]
1000f4aa:	0192      	lsls	r2, r2, #6
1000f4ac:	4313      	orrs	r3, r2
1000f4ae:	7133      	strb	r3, [r6, #4]
1000f4b0:	2316      	movs	r3, #22
1000f4b2:	9a06      	ldr	r2, [sp, #24]
1000f4b4:	3512      	adds	r5, #18
1000f4b6:	4353      	muls	r3, r2
1000f4b8:	9a02      	ldr	r2, [sp, #8]
1000f4ba:	3312      	adds	r3, #18
1000f4bc:	18d7      	adds	r7, r2, r3
1000f4be:	42bd      	cmp	r5, r7
1000f4c0:	d00f      	beq.n	1000f4e2 <internal_at_ble_service_define+0xae>
1000f4c2:	4bb8      	ldr	r3, [pc, #736]	; (1000f7a4 <internal_at_ble_service_define+0x370>)
1000f4c4:	8829      	ldrh	r1, [r5, #0]
1000f4c6:	9300      	str	r3, [sp, #0]
1000f4c8:	230e      	movs	r3, #14
1000f4ca:	aa06      	add	r2, sp, #24
1000f4cc:	189b      	adds	r3, r3, r2
1000f4ce:	9301      	str	r3, [sp, #4]
1000f4d0:	4cb5      	ldr	r4, [pc, #724]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f4d2:	1c30      	adds	r0, r6, #0
1000f4d4:	2201      	movs	r2, #1
1000f4d6:	2302      	movs	r3, #2
1000f4d8:	47a0      	blx	r4
1000f4da:	3516      	adds	r5, #22
1000f4dc:	1e04      	subs	r4, r0, #0
1000f4de:	d0ee      	beq.n	1000f4be <internal_at_ble_service_define+0x8a>
1000f4e0:	e183      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f4e2:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f4e4:	2300      	movs	r3, #0
1000f4e6:	3714      	adds	r7, #20
1000f4e8:	1c3d      	adds	r5, r7, #0
1000f4ea:	9302      	str	r3, [sp, #8]
1000f4ec:	9b02      	ldr	r3, [sp, #8]
1000f4ee:	9a03      	ldr	r2, [sp, #12]
1000f4f0:	4293      	cmp	r3, r2
1000f4f2:	db00      	blt.n	1000f4f6 <internal_at_ble_service_define+0xc2>
1000f4f4:	e0bf      	b.n	1000f676 <internal_at_ble_service_define+0x242>
1000f4f6:	4bad      	ldr	r3, [pc, #692]	; (1000f7ac <internal_at_ble_service_define+0x378>)
1000f4f8:	aa06      	add	r2, sp, #24
1000f4fa:	9300      	str	r3, [sp, #0]
1000f4fc:	230e      	movs	r3, #14
1000f4fe:	189b      	adds	r3, r3, r2
1000f500:	9301      	str	r3, [sp, #4]
1000f502:	4ca9      	ldr	r4, [pc, #676]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f504:	1c30      	adds	r0, r6, #0
1000f506:	2104      	movs	r1, #4
1000f508:	2201      	movs	r2, #1
1000f50a:	2302      	movs	r3, #2
1000f50c:	47a0      	blx	r4
1000f50e:	1e04      	subs	r4, r0, #0
1000f510:	d000      	beq.n	1000f514 <internal_at_ble_service_define+0xe0>
1000f512:	e16a      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f514:	1c2b      	adds	r3, r5, #0
1000f516:	3b12      	subs	r3, #18
1000f518:	7b2c      	ldrb	r4, [r5, #12]
1000f51a:	781b      	ldrb	r3, [r3, #0]
1000f51c:	1c21      	adds	r1, r4, #0
1000f51e:	1c1a      	adds	r2, r3, #0
1000f520:	9304      	str	r3, [sp, #16]
1000f522:	8828      	ldrh	r0, [r5, #0]
1000f524:	4ba2      	ldr	r3, [pc, #648]	; (1000f7b0 <internal_at_ble_service_define+0x37c>)
1000f526:	4798      	blx	r3
1000f528:	2303      	movs	r3, #3
1000f52a:	4023      	ands	r3, r4
1000f52c:	3b03      	subs	r3, #3
1000f52e:	4259      	negs	r1, r3
1000f530:	4159      	adcs	r1, r3
1000f532:	2301      	movs	r3, #1
1000f534:	08a4      	lsrs	r4, r4, #2
1000f536:	401c      	ands	r4, r3
1000f538:	430c      	orrs	r4, r1
1000f53a:	896b      	ldrh	r3, [r5, #10]
1000f53c:	03e4      	lsls	r4, r4, #15
1000f53e:	431c      	orrs	r4, r3
1000f540:	9007      	str	r0, [sp, #28]
1000f542:	4b96      	ldr	r3, [pc, #600]	; (1000f79c <internal_at_ble_service_define+0x368>)
1000f544:	9804      	ldr	r0, [sp, #16]
1000f546:	4798      	blx	r3
1000f548:	1c2a      	adds	r2, r5, #0
1000f54a:	3a11      	subs	r2, #17
1000f54c:	9200      	str	r2, [sp, #0]
1000f54e:	3a03      	subs	r2, #3
1000f550:	1c03      	adds	r3, r0, #0
1000f552:	9201      	str	r2, [sp, #4]
1000f554:	1c21      	adds	r1, r4, #0
1000f556:	1c30      	adds	r0, r6, #0
1000f558:	4c93      	ldr	r4, [pc, #588]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f55a:	9a07      	ldr	r2, [sp, #28]
1000f55c:	47a0      	blx	r4
1000f55e:	1e04      	subs	r4, r0, #0
1000f560:	d000      	beq.n	1000f564 <internal_at_ble_service_define+0x130>
1000f562:	e142      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f564:	22c0      	movs	r2, #192	; 0xc0
1000f566:	882b      	ldrh	r3, [r5, #0]
1000f568:	0052      	lsls	r2, r2, #1
1000f56a:	4213      	tst	r3, r2
1000f56c:	d104      	bne.n	1000f578 <internal_at_ble_service_define+0x144>
1000f56e:	8aab      	ldrh	r3, [r5, #20]
1000f570:	9304      	str	r3, [sp, #16]
1000f572:	2b00      	cmp	r3, #0
1000f574:	d116      	bne.n	1000f5a4 <internal_at_ble_service_define+0x170>
1000f576:	e03a      	b.n	1000f5ee <internal_at_ble_service_define+0x1ba>
1000f578:	2201      	movs	r2, #1
1000f57a:	09d9      	lsrs	r1, r3, #7
1000f57c:	4011      	ands	r1, r2
1000f57e:	05db      	lsls	r3, r3, #23
1000f580:	d501      	bpl.n	1000f586 <internal_at_ble_service_define+0x152>
1000f582:	2302      	movs	r3, #2
1000f584:	4319      	orrs	r1, r3
1000f586:	4b8b      	ldr	r3, [pc, #556]	; (1000f7b4 <internal_at_ble_service_define+0x380>)
1000f588:	aa06      	add	r2, sp, #24
1000f58a:	9300      	str	r3, [sp, #0]
1000f58c:	230e      	movs	r3, #14
1000f58e:	189b      	adds	r3, r3, r2
1000f590:	9301      	str	r3, [sp, #4]
1000f592:	4c85      	ldr	r4, [pc, #532]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f594:	0209      	lsls	r1, r1, #8
1000f596:	1c30      	adds	r0, r6, #0
1000f598:	2201      	movs	r2, #1
1000f59a:	2302      	movs	r3, #2
1000f59c:	47a0      	blx	r4
1000f59e:	1e04      	subs	r4, r0, #0
1000f5a0:	d0e5      	beq.n	1000f56e <internal_at_ble_service_define+0x13a>
1000f5a2:	e122      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f5a4:	2380      	movs	r3, #128	; 0x80
1000f5a6:	882a      	ldrh	r2, [r5, #0]
1000f5a8:	7f2c      	ldrb	r4, [r5, #28]
1000f5aa:	005b      	lsls	r3, r3, #1
1000f5ac:	401a      	ands	r2, r3
1000f5ae:	1c20      	adds	r0, r4, #0
1000f5b0:	2101      	movs	r1, #1
1000f5b2:	2a00      	cmp	r2, #0
1000f5b4:	d000      	beq.n	1000f5b8 <internal_at_ble_service_define+0x184>
1000f5b6:	1c0a      	adds	r2, r1, #0
1000f5b8:	4b7f      	ldr	r3, [pc, #508]	; (1000f7b8 <internal_at_ble_service_define+0x384>)
1000f5ba:	4798      	blx	r3
1000f5bc:	2203      	movs	r2, #3
1000f5be:	4022      	ands	r2, r4
1000f5c0:	3a03      	subs	r2, #3
1000f5c2:	4251      	negs	r1, r2
1000f5c4:	4151      	adcs	r1, r2
1000f5c6:	4b7d      	ldr	r3, [pc, #500]	; (1000f7bc <internal_at_ble_service_define+0x388>)
1000f5c8:	1c0a      	adds	r2, r1, #0
1000f5ca:	9300      	str	r3, [sp, #0]
1000f5cc:	1c2b      	adds	r3, r5, #0
1000f5ce:	0764      	lsls	r4, r4, #29
1000f5d0:	0fe4      	lsrs	r4, r4, #31
1000f5d2:	4322      	orrs	r2, r4
1000f5d4:	03d2      	lsls	r2, r2, #15
1000f5d6:	4310      	orrs	r0, r2
1000f5d8:	3320      	adds	r3, #32
1000f5da:	b282      	uxth	r2, r0
1000f5dc:	9301      	str	r3, [sp, #4]
1000f5de:	4c72      	ldr	r4, [pc, #456]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f5e0:	1c30      	adds	r0, r6, #0
1000f5e2:	9904      	ldr	r1, [sp, #16]
1000f5e4:	2302      	movs	r3, #2
1000f5e6:	47a0      	blx	r4
1000f5e8:	1e04      	subs	r4, r0, #0
1000f5ea:	d000      	beq.n	1000f5ee <internal_at_ble_service_define+0x1ba>
1000f5ec:	e0fd      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f5ee:	2101      	movs	r1, #1
1000f5f0:	882b      	ldrh	r3, [r5, #0]
1000f5f2:	420b      	tst	r3, r1
1000f5f4:	d011      	beq.n	1000f61a <internal_at_ble_service_define+0x1e6>
1000f5f6:	7fa8      	ldrb	r0, [r5, #30]
1000f5f8:	4b6f      	ldr	r3, [pc, #444]	; (1000f7b8 <internal_at_ble_service_define+0x384>)
1000f5fa:	2200      	movs	r2, #0
1000f5fc:	4798      	blx	r3
1000f5fe:	4b70      	ldr	r3, [pc, #448]	; (1000f7c0 <internal_at_ble_service_define+0x38c>)
1000f600:	1c02      	adds	r2, r0, #0
1000f602:	9300      	str	r3, [sp, #0]
1000f604:	1c2b      	adds	r3, r5, #0
1000f606:	3324      	adds	r3, #36	; 0x24
1000f608:	9301      	str	r3, [sp, #4]
1000f60a:	4c67      	ldr	r4, [pc, #412]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f60c:	1c30      	adds	r0, r6, #0
1000f60e:	496d      	ldr	r1, [pc, #436]	; (1000f7c4 <internal_at_ble_service_define+0x390>)
1000f610:	2302      	movs	r3, #2
1000f612:	47a0      	blx	r4
1000f614:	1e04      	subs	r4, r0, #0
1000f616:	d000      	beq.n	1000f61a <internal_at_ble_service_define+0x1e6>
1000f618:	e0e7      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f61a:	2330      	movs	r3, #48	; 0x30
1000f61c:	882a      	ldrh	r2, [r5, #0]
1000f61e:	421a      	tst	r2, r3
1000f620:	d012      	beq.n	1000f648 <internal_at_ble_service_define+0x214>
1000f622:	2101      	movs	r1, #1
1000f624:	7f68      	ldrb	r0, [r5, #29]
1000f626:	1c0a      	adds	r2, r1, #0
1000f628:	4b63      	ldr	r3, [pc, #396]	; (1000f7b8 <internal_at_ble_service_define+0x384>)
1000f62a:	4798      	blx	r3
1000f62c:	4b66      	ldr	r3, [pc, #408]	; (1000f7c8 <internal_at_ble_service_define+0x394>)
1000f62e:	1c02      	adds	r2, r0, #0
1000f630:	9300      	str	r3, [sp, #0]
1000f632:	1c2b      	adds	r3, r5, #0
1000f634:	3322      	adds	r3, #34	; 0x22
1000f636:	9301      	str	r3, [sp, #4]
1000f638:	4c5b      	ldr	r4, [pc, #364]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f63a:	1c30      	adds	r0, r6, #0
1000f63c:	4961      	ldr	r1, [pc, #388]	; (1000f7c4 <internal_at_ble_service_define+0x390>)
1000f63e:	2302      	movs	r3, #2
1000f640:	47a0      	blx	r4
1000f642:	1e04      	subs	r4, r0, #0
1000f644:	d000      	beq.n	1000f648 <internal_at_ble_service_define+0x214>
1000f646:	e0d0      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f648:	69ab      	ldr	r3, [r5, #24]
1000f64a:	2b00      	cmp	r3, #0
1000f64c:	d00e      	beq.n	1000f66c <internal_at_ble_service_define+0x238>
1000f64e:	4b5f      	ldr	r3, [pc, #380]	; (1000f7cc <internal_at_ble_service_define+0x398>)
1000f650:	aa06      	add	r2, sp, #24
1000f652:	9300      	str	r3, [sp, #0]
1000f654:	230e      	movs	r3, #14
1000f656:	189b      	adds	r3, r3, r2
1000f658:	9301      	str	r3, [sp, #4]
1000f65a:	4c53      	ldr	r4, [pc, #332]	; (1000f7a8 <internal_at_ble_service_define+0x374>)
1000f65c:	1c30      	adds	r0, r6, #0
1000f65e:	2107      	movs	r1, #7
1000f660:	2201      	movs	r2, #1
1000f662:	2302      	movs	r3, #2
1000f664:	47a0      	blx	r4
1000f666:	1e04      	subs	r4, r0, #0
1000f668:	d000      	beq.n	1000f66c <internal_at_ble_service_define+0x238>
1000f66a:	e0be      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f66c:	9b02      	ldr	r3, [sp, #8]
1000f66e:	353c      	adds	r5, #60	; 0x3c
1000f670:	3301      	adds	r3, #1
1000f672:	9302      	str	r3, [sp, #8]
1000f674:	e73a      	b.n	1000f4ec <internal_at_ble_service_define+0xb8>
1000f676:	1c30      	adds	r0, r6, #0
1000f678:	4b55      	ldr	r3, [pc, #340]	; (1000f7d0 <internal_at_ble_service_define+0x39c>)
1000f67a:	4798      	blx	r3
1000f67c:	1e04      	subs	r4, r0, #0
1000f67e:	d000      	beq.n	1000f682 <internal_at_ble_service_define+0x24e>
1000f680:	e0b3      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f682:	8833      	ldrh	r3, [r6, #0]
1000f684:	9a05      	ldr	r2, [sp, #20]
1000f686:	8013      	strh	r3, [r2, #0]
1000f688:	8836      	ldrh	r6, [r6, #0]
1000f68a:	9b06      	ldr	r3, [sp, #24]
1000f68c:	9a03      	ldr	r2, [sp, #12]
1000f68e:	18f6      	adds	r6, r6, r3
1000f690:	b2b3      	uxth	r3, r6
1000f692:	9302      	str	r3, [sp, #8]
1000f694:	233c      	movs	r3, #60	; 0x3c
1000f696:	4353      	muls	r3, r2
1000f698:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f69a:	3314      	adds	r3, #20
1000f69c:	18d3      	adds	r3, r2, r3
1000f69e:	9304      	str	r3, [sp, #16]
1000f6a0:	9b04      	ldr	r3, [sp, #16]
1000f6a2:	429f      	cmp	r7, r3
1000f6a4:	d100      	bne.n	1000f6a8 <internal_at_ble_service_define+0x274>
1000f6a6:	e0a0      	b.n	1000f7ea <internal_at_ble_service_define+0x3b6>
1000f6a8:	9b02      	ldr	r3, [sp, #8]
1000f6aa:	1c9d      	adds	r5, r3, #2
1000f6ac:	1c3b      	adds	r3, r7, #0
1000f6ae:	b2ad      	uxth	r5, r5
1000f6b0:	3b14      	subs	r3, #20
1000f6b2:	801d      	strh	r5, [r3, #0]
1000f6b4:	9303      	str	r3, [sp, #12]
1000f6b6:	893b      	ldrh	r3, [r7, #8]
1000f6b8:	2b00      	cmp	r3, #0
1000f6ba:	d108      	bne.n	1000f6ce <internal_at_ble_service_define+0x29a>
1000f6bc:	23c0      	movs	r3, #192	; 0xc0
1000f6be:	883a      	ldrh	r2, [r7, #0]
1000f6c0:	005b      	lsls	r3, r3, #1
1000f6c2:	421a      	tst	r2, r3
1000f6c4:	d026      	beq.n	1000f714 <internal_at_ble_service_define+0x2e0>
1000f6c6:	9e02      	ldr	r6, [sp, #8]
1000f6c8:	3603      	adds	r6, #3
1000f6ca:	b2b5      	uxth	r5, r6
1000f6cc:	e022      	b.n	1000f714 <internal_at_ble_service_define+0x2e0>
1000f6ce:	2103      	movs	r1, #3
1000f6d0:	7b3b      	ldrb	r3, [r7, #12]
1000f6d2:	4019      	ands	r1, r3
1000f6d4:	3903      	subs	r1, #3
1000f6d6:	424a      	negs	r2, r1
1000f6d8:	414a      	adcs	r2, r1
1000f6da:	0759      	lsls	r1, r3, #29
1000f6dc:	0fc9      	lsrs	r1, r1, #31
1000f6de:	4311      	orrs	r1, r2
1000f6e0:	03c9      	lsls	r1, r1, #15
1000f6e2:	897a      	ldrh	r2, [r7, #10]
1000f6e4:	2900      	cmp	r1, #0
1000f6e6:	d007      	beq.n	1000f6f8 <internal_at_ble_service_define+0x2c4>
1000f6e8:	6879      	ldr	r1, [r7, #4]
1000f6ea:	2900      	cmp	r1, #0
1000f6ec:	d100      	bne.n	1000f6f0 <internal_at_ble_service_define+0x2bc>
1000f6ee:	4939      	ldr	r1, [pc, #228]	; (1000f7d4 <internal_at_ble_service_define+0x3a0>)
1000f6f0:	1c28      	adds	r0, r5, #0
1000f6f2:	4e39      	ldr	r6, [pc, #228]	; (1000f7d8 <internal_at_ble_service_define+0x3a4>)
1000f6f4:	47b0      	blx	r6
1000f6f6:	e00a      	b.n	1000f70e <internal_at_ble_service_define+0x2da>
1000f6f8:	1c28      	adds	r0, r5, #0
1000f6fa:	4e37      	ldr	r6, [pc, #220]	; (1000f7d8 <internal_at_ble_service_define+0x3a4>)
1000f6fc:	47b0      	blx	r6
1000f6fe:	2800      	cmp	r0, #0
1000f700:	d172      	bne.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f702:	9b03      	ldr	r3, [sp, #12]
1000f704:	8939      	ldrh	r1, [r7, #8]
1000f706:	8818      	ldrh	r0, [r3, #0]
1000f708:	687a      	ldr	r2, [r7, #4]
1000f70a:	4b34      	ldr	r3, [pc, #208]	; (1000f7dc <internal_at_ble_service_define+0x3a8>)
1000f70c:	4798      	blx	r3
1000f70e:	2800      	cmp	r0, #0
1000f710:	d0d4      	beq.n	1000f6bc <internal_at_ble_service_define+0x288>
1000f712:	e069      	b.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f714:	8abb      	ldrh	r3, [r7, #20]
1000f716:	2b00      	cmp	r3, #0
1000f718:	d00a      	beq.n	1000f730 <internal_at_ble_service_define+0x2fc>
1000f71a:	3501      	adds	r5, #1
1000f71c:	b2ad      	uxth	r5, r5
1000f71e:	843d      	strh	r5, [r7, #32]
1000f720:	7f39      	ldrb	r1, [r7, #28]
1000f722:	8afb      	ldrh	r3, [r7, #22]
1000f724:	1c28      	adds	r0, r5, #0
1000f726:	693a      	ldr	r2, [r7, #16]
1000f728:	4e2d      	ldr	r6, [pc, #180]	; (1000f7e0 <internal_at_ble_service_define+0x3ac>)
1000f72a:	47b0      	blx	r6
1000f72c:	2800      	cmp	r0, #0
1000f72e:	d15b      	bne.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f730:	883b      	ldrh	r3, [r7, #0]
1000f732:	07db      	lsls	r3, r3, #31
1000f734:	d50d      	bpl.n	1000f752 <internal_at_ble_service_define+0x31e>
1000f736:	2200      	movs	r2, #0
1000f738:	3501      	adds	r5, #1
1000f73a:	b2ad      	uxth	r5, r5
1000f73c:	a909      	add	r1, sp, #36	; 0x24
1000f73e:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f740:	7fbb      	ldrb	r3, [r7, #30]
1000f742:	1c28      	adds	r0, r5, #0
1000f744:	700a      	strb	r2, [r1, #0]
1000f746:	704a      	strb	r2, [r1, #1]
1000f748:	4e23      	ldr	r6, [pc, #140]	; (1000f7d8 <internal_at_ble_service_define+0x3a4>)
1000f74a:	3202      	adds	r2, #2
1000f74c:	47b0      	blx	r6
1000f74e:	2800      	cmp	r0, #0
1000f750:	d14a      	bne.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f752:	2330      	movs	r3, #48	; 0x30
1000f754:	883a      	ldrh	r2, [r7, #0]
1000f756:	421a      	tst	r2, r3
1000f758:	d00d      	beq.n	1000f776 <internal_at_ble_service_define+0x342>
1000f75a:	2200      	movs	r2, #0
1000f75c:	3501      	adds	r5, #1
1000f75e:	b2ad      	uxth	r5, r5
1000f760:	a909      	add	r1, sp, #36	; 0x24
1000f762:	847d      	strh	r5, [r7, #34]	; 0x22
1000f764:	7f7b      	ldrb	r3, [r7, #29]
1000f766:	1c28      	adds	r0, r5, #0
1000f768:	700a      	strb	r2, [r1, #0]
1000f76a:	704a      	strb	r2, [r1, #1]
1000f76c:	4e1a      	ldr	r6, [pc, #104]	; (1000f7d8 <internal_at_ble_service_define+0x3a4>)
1000f76e:	3202      	adds	r2, #2
1000f770:	47b0      	blx	r6
1000f772:	2800      	cmp	r0, #0
1000f774:	d138      	bne.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f776:	69b9      	ldr	r1, [r7, #24]
1000f778:	2900      	cmp	r1, #0
1000f77a:	d006      	beq.n	1000f78a <internal_at_ble_service_define+0x356>
1000f77c:	3501      	adds	r5, #1
1000f77e:	b2ad      	uxth	r5, r5
1000f780:	1c28      	adds	r0, r5, #0
1000f782:	4b18      	ldr	r3, [pc, #96]	; (1000f7e4 <internal_at_ble_service_define+0x3b0>)
1000f784:	4798      	blx	r3
1000f786:	2800      	cmp	r0, #0
1000f788:	d12e      	bne.n	1000f7e8 <internal_at_ble_service_define+0x3b4>
1000f78a:	373c      	adds	r7, #60	; 0x3c
1000f78c:	9502      	str	r5, [sp, #8]
1000f78e:	e787      	b.n	1000f6a0 <internal_at_ble_service_define+0x26c>
1000f790:	10019e98 	.word	0x10019e98
1000f794:	1001adf0 	.word	0x1001adf0
1000f798:	1001572d 	.word	0x1001572d
1000f79c:	1000f169 	.word	0x1000f169
1000f7a0:	1001571b 	.word	0x1001571b
1000f7a4:	100181e2 	.word	0x100181e2
1000f7a8:	100115f5 	.word	0x100115f5
1000f7ac:	100181e4 	.word	0x100181e4
1000f7b0:	1000f235 	.word	0x1000f235
1000f7b4:	100181e0 	.word	0x100181e0
1000f7b8:	1000f1dd 	.word	0x1000f1dd
1000f7bc:	100181dc 	.word	0x100181dc
1000f7c0:	100181de 	.word	0x100181de
1000f7c4:	00008002 	.word	0x00008002
1000f7c8:	100181d8 	.word	0x100181d8
1000f7cc:	100181da 	.word	0x100181da
1000f7d0:	100114e9 	.word	0x100114e9
1000f7d4:	10019e84 	.word	0x10019e84
1000f7d8:	1000f2fd 	.word	0x1000f2fd
1000f7dc:	10011665 	.word	0x10011665
1000f7e0:	1000f3b5 	.word	0x1000f3b5
1000f7e4:	1000f2d1 	.word	0x1000f2d1
1000f7e8:	1c04      	adds	r4, r0, #0
1000f7ea:	1c20      	adds	r0, r4, #0
1000f7ec:	b00b      	add	sp, #44	; 0x2c
1000f7ee:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f7f0 <initi_gatt_server_module>:
1000f7f0:	2300      	movs	r3, #0
1000f7f2:	4a07      	ldr	r2, [pc, #28]	; (1000f810 <initi_gatt_server_module+0x20>)
1000f7f4:	7013      	strb	r3, [r2, #0]
1000f7f6:	4a07      	ldr	r2, [pc, #28]	; (1000f814 <initi_gatt_server_module+0x24>)
1000f7f8:	6013      	str	r3, [r2, #0]
1000f7fa:	4a07      	ldr	r2, [pc, #28]	; (1000f818 <initi_gatt_server_module+0x28>)
1000f7fc:	6013      	str	r3, [r2, #0]
1000f7fe:	4a07      	ldr	r2, [pc, #28]	; (1000f81c <initi_gatt_server_module+0x2c>)
1000f800:	6013      	str	r3, [r2, #0]
1000f802:	4a07      	ldr	r2, [pc, #28]	; (1000f820 <initi_gatt_server_module+0x30>)
1000f804:	6013      	str	r3, [r2, #0]
1000f806:	4a07      	ldr	r2, [pc, #28]	; (1000f824 <initi_gatt_server_module+0x34>)
1000f808:	6013      	str	r3, [r2, #0]
1000f80a:	4a07      	ldr	r2, [pc, #28]	; (1000f828 <initi_gatt_server_module+0x38>)
1000f80c:	6013      	str	r3, [r2, #0]
1000f80e:	4770      	bx	lr
1000f810:	10019e84 	.word	0x10019e84
1000f814:	10019e94 	.word	0x10019e94
1000f818:	10019e90 	.word	0x10019e90
1000f81c:	10019e80 	.word	0x10019e80
1000f820:	10019e8c 	.word	0x10019e8c
1000f824:	10019e88 	.word	0x10019e88
1000f828:	10019e98 	.word	0x10019e98

1000f82c <db_init>:
1000f82c:	4b0a      	ldr	r3, [pc, #40]	; (1000f858 <db_init+0x2c>)
1000f82e:	4a0b      	ldr	r2, [pc, #44]	; (1000f85c <db_init+0x30>)
1000f830:	6018      	str	r0, [r3, #0]
1000f832:	084b      	lsrs	r3, r1, #1
1000f834:	6013      	str	r3, [r2, #0]
1000f836:	4a0a      	ldr	r2, [pc, #40]	; (1000f860 <db_init+0x34>)
1000f838:	18c3      	adds	r3, r0, r3
1000f83a:	6013      	str	r3, [r2, #0]
1000f83c:	4a09      	ldr	r2, [pc, #36]	; (1000f864 <db_init+0x38>)
1000f83e:	1841      	adds	r1, r0, r1
1000f840:	6013      	str	r3, [r2, #0]
1000f842:	2303      	movs	r3, #3
1000f844:	2200      	movs	r2, #0
1000f846:	3103      	adds	r1, #3
1000f848:	4399      	bics	r1, r3
1000f84a:	4b07      	ldr	r3, [pc, #28]	; (1000f868 <db_init+0x3c>)
1000f84c:	3904      	subs	r1, #4
1000f84e:	6019      	str	r1, [r3, #0]
1000f850:	4b06      	ldr	r3, [pc, #24]	; (1000f86c <db_init+0x40>)
1000f852:	601a      	str	r2, [r3, #0]
1000f854:	4770      	bx	lr
1000f856:	46c0      	nop			; (mov r8, r8)
1000f858:	10019e98 	.word	0x10019e98
1000f85c:	10019e94 	.word	0x10019e94
1000f860:	10019e80 	.word	0x10019e80
1000f864:	10019e8c 	.word	0x10019e8c
1000f868:	10019e88 	.word	0x10019e88
1000f86c:	10019e90 	.word	0x10019e90

1000f870 <at_ble_primary_service_define>:
1000f870:	b530      	push	{r4, r5, lr}
1000f872:	b085      	sub	sp, #20
1000f874:	ac08      	add	r4, sp, #32
1000f876:	cc20      	ldmia	r4!, {r5}
1000f878:	8824      	ldrh	r4, [r4, #0]
1000f87a:	9500      	str	r5, [sp, #0]
1000f87c:	9401      	str	r4, [sp, #4]
1000f87e:	2401      	movs	r4, #1
1000f880:	9402      	str	r4, [sp, #8]
1000f882:	4c02      	ldr	r4, [pc, #8]	; (1000f88c <at_ble_primary_service_define+0x1c>)
1000f884:	47a0      	blx	r4
1000f886:	b005      	add	sp, #20
1000f888:	bd30      	pop	{r4, r5, pc}
1000f88a:	46c0      	nop			; (mov r8, r8)
1000f88c:	1000f435 	.word	0x1000f435

1000f890 <at_ble_characteristic_value_set>:
1000f890:	b570      	push	{r4, r5, r6, lr}
1000f892:	4b0b      	ldr	r3, [pc, #44]	; (1000f8c0 <at_ble_characteristic_value_set+0x30>)
1000f894:	1c06      	adds	r6, r0, #0
1000f896:	1c0c      	adds	r4, r1, #0
1000f898:	1c15      	adds	r5, r2, #0
1000f89a:	4798      	blx	r3
1000f89c:	2800      	cmp	r0, #0
1000f89e:	d008      	beq.n	1000f8b2 <at_ble_characteristic_value_set+0x22>
1000f8a0:	6880      	ldr	r0, [r0, #8]
1000f8a2:	2800      	cmp	r0, #0
1000f8a4:	d005      	beq.n	1000f8b2 <at_ble_characteristic_value_set+0x22>
1000f8a6:	1c21      	adds	r1, r4, #0
1000f8a8:	1c2a      	adds	r2, r5, #0
1000f8aa:	4b06      	ldr	r3, [pc, #24]	; (1000f8c4 <at_ble_characteristic_value_set+0x34>)
1000f8ac:	4798      	blx	r3
1000f8ae:	2000      	movs	r0, #0
1000f8b0:	e004      	b.n	1000f8bc <at_ble_characteristic_value_set+0x2c>
1000f8b2:	1c30      	adds	r0, r6, #0
1000f8b4:	1c29      	adds	r1, r5, #0
1000f8b6:	1c22      	adds	r2, r4, #0
1000f8b8:	4b03      	ldr	r3, [pc, #12]	; (1000f8c8 <at_ble_characteristic_value_set+0x38>)
1000f8ba:	4798      	blx	r3
1000f8bc:	bd70      	pop	{r4, r5, r6, pc}
1000f8be:	46c0      	nop			; (mov r8, r8)
1000f8c0:	1000f19d 	.word	0x1000f19d
1000f8c4:	1001571b 	.word	0x1001571b
1000f8c8:	10011665 	.word	0x10011665

1000f8cc <at_ble_characteristic_value_get>:
1000f8cc:	b570      	push	{r4, r5, r6, lr}
1000f8ce:	4b0c      	ldr	r3, [pc, #48]	; (1000f900 <at_ble_characteristic_value_get+0x34>)
1000f8d0:	1c06      	adds	r6, r0, #0
1000f8d2:	1c0c      	adds	r4, r1, #0
1000f8d4:	1c15      	adds	r5, r2, #0
1000f8d6:	4798      	blx	r3
1000f8d8:	2800      	cmp	r0, #0
1000f8da:	d00b      	beq.n	1000f8f4 <at_ble_characteristic_value_get+0x28>
1000f8dc:	6883      	ldr	r3, [r0, #8]
1000f8de:	2b00      	cmp	r3, #0
1000f8e0:	d008      	beq.n	1000f8f4 <at_ble_characteristic_value_get+0x28>
1000f8e2:	8883      	ldrh	r3, [r0, #4]
1000f8e4:	802b      	strh	r3, [r5, #0]
1000f8e6:	8882      	ldrh	r2, [r0, #4]
1000f8e8:	6881      	ldr	r1, [r0, #8]
1000f8ea:	4b06      	ldr	r3, [pc, #24]	; (1000f904 <at_ble_characteristic_value_get+0x38>)
1000f8ec:	1c20      	adds	r0, r4, #0
1000f8ee:	4798      	blx	r3
1000f8f0:	2000      	movs	r0, #0
1000f8f2:	e004      	b.n	1000f8fe <at_ble_characteristic_value_get+0x32>
1000f8f4:	1c30      	adds	r0, r6, #0
1000f8f6:	1c29      	adds	r1, r5, #0
1000f8f8:	1c22      	adds	r2, r4, #0
1000f8fa:	4b03      	ldr	r3, [pc, #12]	; (1000f908 <at_ble_characteristic_value_get+0x3c>)
1000f8fc:	4798      	blx	r3
1000f8fe:	bd70      	pop	{r4, r5, r6, pc}
1000f900:	1000f19d 	.word	0x1000f19d
1000f904:	1001571b 	.word	0x1001571b
1000f908:	100116f1 	.word	0x100116f1

1000f90c <at_ble_write_authorize_reply>:
1000f90c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f90e:	b085      	sub	sp, #20
1000f910:	1c04      	adds	r4, r0, #0
1000f912:	9101      	str	r1, [sp, #4]
1000f914:	2900      	cmp	r1, #0
1000f916:	d128      	bne.n	1000f96a <at_ble_write_authorize_reply+0x5e>
1000f918:	8843      	ldrh	r3, [r0, #2]
1000f91a:	1c27      	adds	r7, r4, #0
1000f91c:	9300      	str	r3, [sp, #0]
1000f91e:	1c18      	adds	r0, r3, #0
1000f920:	4b16      	ldr	r3, [pc, #88]	; (1000f97c <at_ble_write_authorize_reply+0x70>)
1000f922:	4798      	blx	r3
1000f924:	3708      	adds	r7, #8
1000f926:	2800      	cmp	r0, #0
1000f928:	d009      	beq.n	1000f93e <at_ble_write_authorize_reply+0x32>
1000f92a:	6880      	ldr	r0, [r0, #8]
1000f92c:	2800      	cmp	r0, #0
1000f92e:	d006      	beq.n	1000f93e <at_ble_write_authorize_reply+0x32>
1000f930:	88a3      	ldrh	r3, [r4, #4]
1000f932:	88e2      	ldrh	r2, [r4, #6]
1000f934:	18c0      	adds	r0, r0, r3
1000f936:	1c39      	adds	r1, r7, #0
1000f938:	4b11      	ldr	r3, [pc, #68]	; (1000f980 <at_ble_write_authorize_reply+0x74>)
1000f93a:	4798      	blx	r3
1000f93c:	e015      	b.n	1000f96a <at_ble_write_authorize_reply+0x5e>
1000f93e:	ab02      	add	r3, sp, #8
1000f940:	1d9e      	adds	r6, r3, #6
1000f942:	2300      	movs	r3, #0
1000f944:	4d0f      	ldr	r5, [pc, #60]	; (1000f984 <at_ble_write_authorize_reply+0x78>)
1000f946:	8033      	strh	r3, [r6, #0]
1000f948:	6829      	ldr	r1, [r5, #0]
1000f94a:	1c32      	adds	r2, r6, #0
1000f94c:	4b0e      	ldr	r3, [pc, #56]	; (1000f988 <at_ble_write_authorize_reply+0x7c>)
1000f94e:	9800      	ldr	r0, [sp, #0]
1000f950:	4798      	blx	r3
1000f952:	682b      	ldr	r3, [r5, #0]
1000f954:	88a0      	ldrh	r0, [r4, #4]
1000f956:	88e2      	ldrh	r2, [r4, #6]
1000f958:	1818      	adds	r0, r3, r0
1000f95a:	1c39      	adds	r1, r7, #0
1000f95c:	4b08      	ldr	r3, [pc, #32]	; (1000f980 <at_ble_write_authorize_reply+0x74>)
1000f95e:	4798      	blx	r3
1000f960:	8860      	ldrh	r0, [r4, #2]
1000f962:	8832      	ldrh	r2, [r6, #0]
1000f964:	6829      	ldr	r1, [r5, #0]
1000f966:	4b09      	ldr	r3, [pc, #36]	; (1000f98c <at_ble_write_authorize_reply+0x80>)
1000f968:	4798      	blx	r3
1000f96a:	8860      	ldrh	r0, [r4, #2]
1000f96c:	8821      	ldrh	r1, [r4, #0]
1000f96e:	9a01      	ldr	r2, [sp, #4]
1000f970:	4b07      	ldr	r3, [pc, #28]	; (1000f990 <at_ble_write_authorize_reply+0x84>)
1000f972:	4798      	blx	r3
1000f974:	2000      	movs	r0, #0
1000f976:	b005      	add	sp, #20
1000f978:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f97a:	46c0      	nop			; (mov r8, r8)
1000f97c:	1000f19d 	.word	0x1000f19d
1000f980:	1001571b 	.word	0x1001571b
1000f984:	10018400 	.word	0x10018400
1000f988:	1000f8cd 	.word	0x1000f8cd
1000f98c:	1000f891 	.word	0x1000f891
1000f990:	10011169 	.word	0x10011169

1000f994 <gatts_handle_read_req>:
1000f994:	b538      	push	{r3, r4, r5, lr}
1000f996:	1c0c      	adds	r4, r1, #0
1000f998:	4b07      	ldr	r3, [pc, #28]	; (1000f9b8 <gatts_handle_read_req+0x24>)
1000f99a:	4798      	blx	r3
1000f99c:	8865      	ldrh	r5, [r4, #2]
1000f99e:	4b07      	ldr	r3, [pc, #28]	; (1000f9bc <gatts_handle_read_req+0x28>)
1000f9a0:	1c28      	adds	r0, r5, #0
1000f9a2:	4798      	blx	r3
1000f9a4:	7883      	ldrb	r3, [r0, #2]
1000f9a6:	2026      	movs	r0, #38	; 0x26
1000f9a8:	07db      	lsls	r3, r3, #31
1000f9aa:	d404      	bmi.n	1000f9b6 <gatts_handle_read_req+0x22>
1000f9ac:	8820      	ldrh	r0, [r4, #0]
1000f9ae:	1c29      	adds	r1, r5, #0
1000f9b0:	4b03      	ldr	r3, [pc, #12]	; (1000f9c0 <gatts_handle_read_req+0x2c>)
1000f9b2:	4798      	blx	r3
1000f9b4:	203b      	movs	r0, #59	; 0x3b
1000f9b6:	bd38      	pop	{r3, r4, r5, pc}
1000f9b8:	100110ad 	.word	0x100110ad
1000f9bc:	1000f19d 	.word	0x1000f19d
1000f9c0:	1000f405 	.word	0x1000f405

1000f9c4 <gatts_handle_att_info_req>:
1000f9c4:	b538      	push	{r3, r4, r5, lr}
1000f9c6:	1c0d      	adds	r5, r1, #0
1000f9c8:	4b0a      	ldr	r3, [pc, #40]	; (1000f9f4 <gatts_handle_att_info_req+0x30>)
1000f9ca:	1c14      	adds	r4, r2, #0
1000f9cc:	4798      	blx	r3
1000f9ce:	882d      	ldrh	r5, [r5, #0]
1000f9d0:	4b09      	ldr	r3, [pc, #36]	; (1000f9f8 <gatts_handle_att_info_req+0x34>)
1000f9d2:	1c28      	adds	r0, r5, #0
1000f9d4:	4798      	blx	r3
1000f9d6:	0a22      	lsrs	r2, r4, #8
1000f9d8:	1c03      	adds	r3, r0, #0
1000f9da:	4c08      	ldr	r4, [pc, #32]	; (1000f9fc <gatts_handle_att_info_req+0x38>)
1000f9dc:	b291      	uxth	r1, r2
1000f9de:	2800      	cmp	r0, #0
1000f9e0:	d003      	beq.n	1000f9ea <gatts_handle_att_info_req+0x26>
1000f9e2:	8882      	ldrh	r2, [r0, #4]
1000f9e4:	2300      	movs	r3, #0
1000f9e6:	1c28      	adds	r0, r5, #0
1000f9e8:	e001      	b.n	1000f9ee <gatts_handle_att_info_req+0x2a>
1000f9ea:	1c28      	adds	r0, r5, #0
1000f9ec:	2201      	movs	r2, #1
1000f9ee:	47a0      	blx	r4
1000f9f0:	203b      	movs	r0, #59	; 0x3b
1000f9f2:	bd38      	pop	{r3, r4, r5, pc}
1000f9f4:	100110f1 	.word	0x100110f1
1000f9f8:	1000f19d 	.word	0x1000f19d
1000f9fc:	100111ad 	.word	0x100111ad

1000fa00 <gatts_handle_write_req>:
1000fa00:	b510      	push	{r4, lr}
1000fa02:	1c14      	adds	r4, r2, #0
1000fa04:	4b07      	ldr	r3, [pc, #28]	; (1000fa24 <gatts_handle_write_req+0x24>)
1000fa06:	4798      	blx	r3
1000fa08:	4b07      	ldr	r3, [pc, #28]	; (1000fa28 <gatts_handle_write_req+0x28>)
1000fa0a:	8860      	ldrh	r0, [r4, #2]
1000fa0c:	4798      	blx	r3
1000fa0e:	2302      	movs	r3, #2
1000fa10:	7881      	ldrb	r1, [r0, #2]
1000fa12:	2022      	movs	r0, #34	; 0x22
1000fa14:	4019      	ands	r1, r3
1000fa16:	d103      	bne.n	1000fa20 <gatts_handle_write_req+0x20>
1000fa18:	1c20      	adds	r0, r4, #0
1000fa1a:	4b04      	ldr	r3, [pc, #16]	; (1000fa2c <gatts_handle_write_req+0x2c>)
1000fa1c:	4798      	blx	r3
1000fa1e:	201f      	movs	r0, #31
1000fa20:	bd10      	pop	{r4, pc}
1000fa22:	46c0      	nop			; (mov r8, r8)
1000fa24:	100110b9 	.word	0x100110b9
1000fa28:	1000f19d 	.word	0x1000f19d
1000fa2c:	1000f90d 	.word	0x1000f90d

1000fa30 <at_ble_notification_send>:
1000fa30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fa32:	4d17      	ldr	r5, [pc, #92]	; (1000fa90 <at_ble_notification_send+0x60>)
1000fa34:	4c17      	ldr	r4, [pc, #92]	; (1000fa94 <at_ble_notification_send+0x64>)
1000fa36:	682a      	ldr	r2, [r5, #0]
1000fa38:	44a5      	add	sp, r4
1000fa3a:	23d2      	movs	r3, #210	; 0xd2
1000fa3c:	2a04      	cmp	r2, #4
1000fa3e:	d822      	bhi.n	1000fa86 <at_ble_notification_send+0x56>
1000fa40:	1c06      	adds	r6, r0, #0
1000fa42:	4b15      	ldr	r3, [pc, #84]	; (1000fa98 <at_ble_notification_send+0x68>)
1000fa44:	1c08      	adds	r0, r1, #0
1000fa46:	1c0c      	adds	r4, r1, #0
1000fa48:	4798      	blx	r3
1000fa4a:	2800      	cmp	r0, #0
1000fa4c:	d008      	beq.n	1000fa60 <at_ble_notification_send+0x30>
1000fa4e:	6883      	ldr	r3, [r0, #8]
1000fa50:	2b00      	cmp	r3, #0
1000fa52:	d005      	beq.n	1000fa60 <at_ble_notification_send+0x30>
1000fa54:	8882      	ldrh	r2, [r0, #4]
1000fa56:	1c21      	adds	r1, r4, #0
1000fa58:	9200      	str	r2, [sp, #0]
1000fa5a:	2012      	movs	r0, #18
1000fa5c:	1c32      	adds	r2, r6, #0
1000fa5e:	e00c      	b.n	1000fa7a <at_ble_notification_send+0x4a>
1000fa60:	270e      	movs	r7, #14
1000fa62:	446f      	add	r7, sp
1000fa64:	1c39      	adds	r1, r7, #0
1000fa66:	aa04      	add	r2, sp, #16
1000fa68:	4b0c      	ldr	r3, [pc, #48]	; (1000fa9c <at_ble_notification_send+0x6c>)
1000fa6a:	1c20      	adds	r0, r4, #0
1000fa6c:	4798      	blx	r3
1000fa6e:	2012      	movs	r0, #18
1000fa70:	1c21      	adds	r1, r4, #0
1000fa72:	1c32      	adds	r2, r6, #0
1000fa74:	883b      	ldrh	r3, [r7, #0]
1000fa76:	9300      	str	r3, [sp, #0]
1000fa78:	ab04      	add	r3, sp, #16
1000fa7a:	4c09      	ldr	r4, [pc, #36]	; (1000faa0 <at_ble_notification_send+0x70>)
1000fa7c:	47a0      	blx	r4
1000fa7e:	682b      	ldr	r3, [r5, #0]
1000fa80:	3301      	adds	r3, #1
1000fa82:	602b      	str	r3, [r5, #0]
1000fa84:	2300      	movs	r3, #0
1000fa86:	1c18      	adds	r0, r3, #0
1000fa88:	2385      	movs	r3, #133	; 0x85
1000fa8a:	009b      	lsls	r3, r3, #2
1000fa8c:	449d      	add	sp, r3
1000fa8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fa90:	10019f24 	.word	0x10019f24
1000fa94:	fffffdec 	.word	0xfffffdec
1000fa98:	1000f19d 	.word	0x1000f19d
1000fa9c:	100116f1 	.word	0x100116f1
1000faa0:	100111f5 	.word	0x100111f5

1000faa4 <init_l2cc_task_module>:
1000faa4:	220a      	movs	r2, #10
1000faa6:	4b01      	ldr	r3, [pc, #4]	; (1000faac <init_l2cc_task_module+0x8>)
1000faa8:	701a      	strb	r2, [r3, #0]
1000faaa:	4770      	bx	lr
1000faac:	100183fc 	.word	0x100183fc

1000fab0 <l2cc_data_send_rsp_handler>:
1000fab0:	b510      	push	{r4, lr}
1000fab2:	7802      	ldrb	r2, [r0, #0]
1000fab4:	700a      	strb	r2, [r1, #0]
1000fab6:	7883      	ldrb	r3, [r0, #2]
1000fab8:	7844      	ldrb	r4, [r0, #1]
1000faba:	021b      	lsls	r3, r3, #8
1000fabc:	4323      	orrs	r3, r4
1000fabe:	804b      	strh	r3, [r1, #2]
1000fac0:	7903      	ldrb	r3, [r0, #4]
1000fac2:	78c0      	ldrb	r0, [r0, #3]
1000fac4:	021b      	lsls	r3, r3, #8
1000fac6:	4303      	orrs	r3, r0
1000fac8:	808b      	strh	r3, [r1, #4]
1000faca:	2a00      	cmp	r2, #0
1000facc:	d103      	bne.n	1000fad6 <l2cc_data_send_rsp_handler+0x26>
1000face:	4a02      	ldr	r2, [pc, #8]	; (1000fad8 <l2cc_data_send_rsp_handler+0x28>)
1000fad0:	7813      	ldrb	r3, [r2, #0]
1000fad2:	3301      	adds	r3, #1
1000fad4:	7013      	strb	r3, [r2, #0]
1000fad6:	bd10      	pop	{r4, pc}
1000fad8:	100183fc 	.word	0x100183fc

1000fadc <l2cc_data_received_handler>:
1000fadc:	b508      	push	{r3, lr}
1000fade:	1c03      	adds	r3, r0, #0
1000fae0:	7842      	ldrb	r2, [r0, #1]
1000fae2:	7800      	ldrb	r0, [r0, #0]
1000fae4:	0212      	lsls	r2, r2, #8
1000fae6:	4302      	orrs	r2, r0
1000fae8:	800a      	strh	r2, [r1, #0]
1000faea:	78da      	ldrb	r2, [r3, #3]
1000faec:	7898      	ldrb	r0, [r3, #2]
1000faee:	0212      	lsls	r2, r2, #8
1000faf0:	4302      	orrs	r2, r0
1000faf2:	804a      	strh	r2, [r1, #2]
1000faf4:	795a      	ldrb	r2, [r3, #5]
1000faf6:	7918      	ldrb	r0, [r3, #4]
1000faf8:	0212      	lsls	r2, r2, #8
1000fafa:	4302      	orrs	r2, r0
1000fafc:	808a      	strh	r2, [r1, #4]
1000fafe:	1d88      	adds	r0, r1, #6
1000fb00:	1d99      	adds	r1, r3, #6
1000fb02:	4b01      	ldr	r3, [pc, #4]	; (1000fb08 <l2cc_data_received_handler+0x2c>)
1000fb04:	4798      	blx	r3
1000fb06:	bd08      	pop	{r3, pc}
1000fb08:	1001571b 	.word	0x1001571b

1000fb0c <at_ble_authenticate>:
1000fb0c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fb0e:	1c0c      	adds	r4, r1, #0
1000fb10:	211f      	movs	r1, #31
1000fb12:	b08b      	sub	sp, #44	; 0x2c
1000fb14:	9307      	str	r3, [sp, #28]
1000fb16:	ab02      	add	r3, sp, #8
1000fb18:	18c9      	adds	r1, r1, r3
1000fb1a:	230f      	movs	r3, #15
1000fb1c:	700b      	strb	r3, [r1, #0]
1000fb1e:	4b40      	ldr	r3, [pc, #256]	; (1000fc20 <at_ble_authenticate+0x114>)
1000fb20:	1c05      	adds	r5, r0, #0
1000fb22:	1c16      	adds	r6, r2, #0
1000fb24:	4798      	blx	r3
1000fb26:	1c07      	adds	r7, r0, #0
1000fb28:	2001      	movs	r0, #1
1000fb2a:	2f07      	cmp	r7, #7
1000fb2c:	d875      	bhi.n	1000fc1a <at_ble_authenticate+0x10e>
1000fb2e:	2c00      	cmp	r4, #0
1000fb30:	d113      	bne.n	1000fb5a <at_ble_authenticate+0x4e>
1000fb32:	2312      	movs	r3, #18
1000fb34:	435f      	muls	r7, r3
1000fb36:	4b3b      	ldr	r3, [pc, #236]	; (1000fc24 <at_ble_authenticate+0x118>)
1000fb38:	5cfb      	ldrb	r3, [r7, r3]
1000fb3a:	4283      	cmp	r3, r0
1000fb3c:	d001      	beq.n	1000fb42 <at_ble_authenticate+0x36>
1000fb3e:	20cf      	movs	r0, #207	; 0xcf
1000fb40:	e06b      	b.n	1000fc1a <at_ble_authenticate+0x10e>
1000fb42:	9504      	str	r5, [sp, #16]
1000fb44:	9400      	str	r4, [sp, #0]
1000fb46:	9401      	str	r4, [sp, #4]
1000fb48:	9402      	str	r4, [sp, #8]
1000fb4a:	9403      	str	r4, [sp, #12]
1000fb4c:	1c20      	adds	r0, r4, #0
1000fb4e:	1c21      	adds	r1, r4, #0
1000fb50:	1c22      	adds	r2, r4, #0
1000fb52:	1c23      	adds	r3, r4, #0
1000fb54:	4d34      	ldr	r5, [pc, #208]	; (1000fc28 <at_ble_authenticate+0x11c>)
1000fb56:	47a8      	blx	r5
1000fb58:	e05e      	b.n	1000fc18 <at_ble_authenticate+0x10c>
1000fb5a:	7922      	ldrb	r2, [r4, #4]
1000fb5c:	2a06      	cmp	r2, #6
1000fb5e:	d9ee      	bls.n	1000fb3e <at_ble_authenticate+0x32>
1000fb60:	7963      	ldrb	r3, [r4, #5]
1000fb62:	2b10      	cmp	r3, #16
1000fb64:	d8eb      	bhi.n	1000fb3e <at_ble_authenticate+0x32>
1000fb66:	429a      	cmp	r2, r3
1000fb68:	d8e9      	bhi.n	1000fb3e <at_ble_authenticate+0x32>
1000fb6a:	7a23      	ldrb	r3, [r4, #8]
1000fb6c:	2b04      	cmp	r3, #4
1000fb6e:	d8e6      	bhi.n	1000fb3e <at_ble_authenticate+0x32>
1000fb70:	79a3      	ldrb	r3, [r4, #6]
1000fb72:	2b07      	cmp	r3, #7
1000fb74:	d8e3      	bhi.n	1000fb3e <at_ble_authenticate+0x32>
1000fb76:	79e3      	ldrb	r3, [r4, #7]
1000fb78:	2b07      	cmp	r3, #7
1000fb7a:	d8e0      	bhi.n	1000fb3e <at_ble_authenticate+0x32>
1000fb7c:	78a3      	ldrb	r3, [r4, #2]
1000fb7e:	2b00      	cmp	r3, #0
1000fb80:	d006      	beq.n	1000fb90 <at_ble_authenticate+0x84>
1000fb82:	2e00      	cmp	r6, #0
1000fb84:	d0db      	beq.n	1000fb3e <at_ble_authenticate+0x32>
1000fb86:	4829      	ldr	r0, [pc, #164]	; (1000fc2c <at_ble_authenticate+0x120>)
1000fb88:	1c31      	adds	r1, r6, #0
1000fb8a:	221c      	movs	r2, #28
1000fb8c:	4b28      	ldr	r3, [pc, #160]	; (1000fc30 <at_ble_authenticate+0x124>)
1000fb8e:	4798      	blx	r3
1000fb90:	9b07      	ldr	r3, [sp, #28]
1000fb92:	2b00      	cmp	r3, #0
1000fb94:	d005      	beq.n	1000fba2 <at_ble_authenticate+0x96>
1000fb96:	4827      	ldr	r0, [pc, #156]	; (1000fc34 <at_ble_authenticate+0x128>)
1000fb98:	1c19      	adds	r1, r3, #0
1000fb9a:	309a      	adds	r0, #154	; 0x9a
1000fb9c:	2210      	movs	r2, #16
1000fb9e:	4b24      	ldr	r3, [pc, #144]	; (1000fc30 <at_ble_authenticate+0x124>)
1000fba0:	4798      	blx	r3
1000fba2:	7863      	ldrb	r3, [r4, #1]
1000fba4:	78a2      	ldrb	r2, [r4, #2]
1000fba6:	009b      	lsls	r3, r3, #2
1000fba8:	4313      	orrs	r3, r2
1000fbaa:	2212      	movs	r2, #18
1000fbac:	4357      	muls	r7, r2
1000fbae:	4a1d      	ldr	r2, [pc, #116]	; (1000fc24 <at_ble_authenticate+0x118>)
1000fbb0:	b2db      	uxtb	r3, r3
1000fbb2:	5cba      	ldrb	r2, [r7, r2]
1000fbb4:	2a00      	cmp	r2, #0
1000fbb6:	d116      	bne.n	1000fbe6 <at_ble_authenticate+0xda>
1000fbb8:	79a0      	ldrb	r0, [r4, #6]
1000fbba:	0742      	lsls	r2, r0, #29
1000fbbc:	d502      	bpl.n	1000fbc4 <at_ble_authenticate+0xb8>
1000fbbe:	9a07      	ldr	r2, [sp, #28]
1000fbc0:	2a00      	cmp	r2, #0
1000fbc2:	d0bc      	beq.n	1000fb3e <at_ble_authenticate+0x32>
1000fbc4:	07c2      	lsls	r2, r0, #31
1000fbc6:	d501      	bpl.n	1000fbcc <at_ble_authenticate+0xc0>
1000fbc8:	2e00      	cmp	r6, #0
1000fbca:	d0b8      	beq.n	1000fb3e <at_ble_authenticate+0x32>
1000fbcc:	7966      	ldrb	r6, [r4, #5]
1000fbce:	7821      	ldrb	r1, [r4, #0]
1000fbd0:	78e2      	ldrb	r2, [r4, #3]
1000fbd2:	9600      	str	r6, [sp, #0]
1000fbd4:	9001      	str	r0, [sp, #4]
1000fbd6:	79e0      	ldrb	r0, [r4, #7]
1000fbd8:	9002      	str	r0, [sp, #8]
1000fbda:	7a20      	ldrb	r0, [r4, #8]
1000fbdc:	4c16      	ldr	r4, [pc, #88]	; (1000fc38 <at_ble_authenticate+0x12c>)
1000fbde:	9003      	str	r0, [sp, #12]
1000fbe0:	1c28      	adds	r0, r5, #0
1000fbe2:	47a0      	blx	r4
1000fbe4:	e018      	b.n	1000fc18 <at_ble_authenticate+0x10c>
1000fbe6:	2a01      	cmp	r2, #1
1000fbe8:	d1a9      	bne.n	1000fb3e <at_ble_authenticate+0x32>
1000fbea:	79e0      	ldrb	r0, [r4, #7]
1000fbec:	0742      	lsls	r2, r0, #29
1000fbee:	d502      	bpl.n	1000fbf6 <at_ble_authenticate+0xea>
1000fbf0:	9a07      	ldr	r2, [sp, #28]
1000fbf2:	2a00      	cmp	r2, #0
1000fbf4:	d0a3      	beq.n	1000fb3e <at_ble_authenticate+0x32>
1000fbf6:	07c2      	lsls	r2, r0, #31
1000fbf8:	d501      	bpl.n	1000fbfe <at_ble_authenticate+0xf2>
1000fbfa:	2e00      	cmp	r6, #0
1000fbfc:	d09f      	beq.n	1000fb3e <at_ble_authenticate+0x32>
1000fbfe:	7966      	ldrb	r6, [r4, #5]
1000fc00:	7821      	ldrb	r1, [r4, #0]
1000fc02:	78e2      	ldrb	r2, [r4, #3]
1000fc04:	9600      	str	r6, [sp, #0]
1000fc06:	79a6      	ldrb	r6, [r4, #6]
1000fc08:	9002      	str	r0, [sp, #8]
1000fc0a:	9601      	str	r6, [sp, #4]
1000fc0c:	7a20      	ldrb	r0, [r4, #8]
1000fc0e:	9504      	str	r5, [sp, #16]
1000fc10:	9003      	str	r0, [sp, #12]
1000fc12:	4c05      	ldr	r4, [pc, #20]	; (1000fc28 <at_ble_authenticate+0x11c>)
1000fc14:	2001      	movs	r0, #1
1000fc16:	47a0      	blx	r4
1000fc18:	2000      	movs	r0, #0
1000fc1a:	b00b      	add	sp, #44	; 0x2c
1000fc1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fc1e:	46c0      	nop			; (mov r8, r8)
1000fc20:	1001000d 	.word	0x1001000d
1000fc24:	1001adf2 	.word	0x1001adf2
1000fc28:	1001057d 	.word	0x1001057d
1000fc2c:	1001af00 	.word	0x1001af00
1000fc30:	1001571b 	.word	0x1001571b
1000fc34:	1001ae82 	.word	0x1001ae82
1000fc38:	1001035d 	.word	0x1001035d

1000fc3c <at_ble_pair_key_reply>:
1000fc3c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fc3e:	b085      	sub	sp, #20
1000fc40:	1c05      	adds	r5, r0, #0
1000fc42:	1c0c      	adds	r4, r1, #0
1000fc44:	1c16      	adds	r6, r2, #0
1000fc46:	2100      	movs	r1, #0
1000fc48:	4668      	mov	r0, sp
1000fc4a:	2210      	movs	r2, #16
1000fc4c:	4b18      	ldr	r3, [pc, #96]	; (1000fcb0 <at_ble_pair_key_reply+0x74>)
1000fc4e:	4798      	blx	r3
1000fc50:	2101      	movs	r1, #1
1000fc52:	2e00      	cmp	r6, #0
1000fc54:	d101      	bne.n	1000fc5a <at_ble_pair_key_reply+0x1e>
1000fc56:	1c31      	adds	r1, r6, #0
1000fc58:	466e      	mov	r6, sp
1000fc5a:	2c00      	cmp	r4, #0
1000fc5c:	d116      	bne.n	1000fc8c <at_ble_pair_key_reply+0x50>
1000fc5e:	2701      	movs	r7, #1
1000fc60:	1c23      	adds	r3, r4, #0
1000fc62:	1d70      	adds	r0, r6, #5
1000fc64:	3e01      	subs	r6, #1
1000fc66:	7802      	ldrb	r2, [r0, #0]
1000fc68:	3801      	subs	r0, #1
1000fc6a:	3a30      	subs	r2, #48	; 0x30
1000fc6c:	437a      	muls	r2, r7
1000fc6e:	189b      	adds	r3, r3, r2
1000fc70:	220a      	movs	r2, #10
1000fc72:	4357      	muls	r7, r2
1000fc74:	42b0      	cmp	r0, r6
1000fc76:	d1f6      	bne.n	1000fc66 <at_ble_pair_key_reply+0x2a>
1000fc78:	466a      	mov	r2, sp
1000fc7a:	4668      	mov	r0, sp
1000fc7c:	7013      	strb	r3, [r2, #0]
1000fc7e:	0a1a      	lsrs	r2, r3, #8
1000fc80:	7042      	strb	r2, [r0, #1]
1000fc82:	0c1a      	lsrs	r2, r3, #16
1000fc84:	0e1b      	lsrs	r3, r3, #24
1000fc86:	7082      	strb	r2, [r0, #2]
1000fc88:	70c3      	strb	r3, [r0, #3]
1000fc8a:	e009      	b.n	1000fca0 <at_ble_pair_key_reply+0x64>
1000fc8c:	20cf      	movs	r0, #207	; 0xcf
1000fc8e:	2c01      	cmp	r4, #1
1000fc90:	d10c      	bne.n	1000fcac <at_ble_pair_key_reply+0x70>
1000fc92:	2300      	movs	r3, #0
1000fc94:	4668      	mov	r0, sp
1000fc96:	5cf2      	ldrb	r2, [r6, r3]
1000fc98:	54c2      	strb	r2, [r0, r3]
1000fc9a:	3301      	adds	r3, #1
1000fc9c:	2b10      	cmp	r3, #16
1000fc9e:	d1f9      	bne.n	1000fc94 <at_ble_pair_key_reply+0x58>
1000fca0:	2004      	movs	r0, #4
1000fca2:	466a      	mov	r2, sp
1000fca4:	1c2b      	adds	r3, r5, #0
1000fca6:	4c03      	ldr	r4, [pc, #12]	; (1000fcb4 <at_ble_pair_key_reply+0x78>)
1000fca8:	47a0      	blx	r4
1000fcaa:	2000      	movs	r0, #0
1000fcac:	b005      	add	sp, #20
1000fcae:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fcb0:	1001572d 	.word	0x1001572d
1000fcb4:	100105f9 	.word	0x100105f9

1000fcb8 <at_ble_send_slave_sec_request>:
1000fcb8:	b570      	push	{r4, r5, r6, lr}
1000fcba:	4b0c      	ldr	r3, [pc, #48]	; (1000fcec <at_ble_send_slave_sec_request+0x34>)
1000fcbc:	1c0e      	adds	r6, r1, #0
1000fcbe:	2100      	movs	r1, #0
1000fcc0:	1c05      	adds	r5, r0, #0
1000fcc2:	1c14      	adds	r4, r2, #0
1000fcc4:	4798      	blx	r3
1000fcc6:	2301      	movs	r3, #1
1000fcc8:	2807      	cmp	r0, #7
1000fcca:	d80d      	bhi.n	1000fce8 <at_ble_send_slave_sec_request+0x30>
1000fccc:	3311      	adds	r3, #17
1000fcce:	4358      	muls	r0, r3
1000fcd0:	4b07      	ldr	r3, [pc, #28]	; (1000fcf0 <at_ble_send_slave_sec_request+0x38>)
1000fcd2:	5cc2      	ldrb	r2, [r0, r3]
1000fcd4:	23e0      	movs	r3, #224	; 0xe0
1000fcd6:	2a01      	cmp	r2, #1
1000fcd8:	d106      	bne.n	1000fce8 <at_ble_send_slave_sec_request+0x30>
1000fcda:	00b1      	lsls	r1, r6, #2
1000fcdc:	430c      	orrs	r4, r1
1000fcde:	4b05      	ldr	r3, [pc, #20]	; (1000fcf4 <at_ble_send_slave_sec_request+0x3c>)
1000fce0:	b2e1      	uxtb	r1, r4
1000fce2:	1c28      	adds	r0, r5, #0
1000fce4:	4798      	blx	r3
1000fce6:	2300      	movs	r3, #0
1000fce8:	1c18      	adds	r0, r3, #0
1000fcea:	bd70      	pop	{r4, r5, r6, pc}
1000fcec:	1001000d 	.word	0x1001000d
1000fcf0:	1001adf2 	.word	0x1001adf2
1000fcf4:	10010649 	.word	0x10010649

1000fcf8 <at_ble_encryption_start>:
1000fcf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fcfa:	23cf      	movs	r3, #207	; 0xcf
1000fcfc:	2900      	cmp	r1, #0
1000fcfe:	d02b      	beq.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd00:	2a05      	cmp	r2, #5
1000fd02:	d829      	bhi.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd04:	2701      	movs	r7, #1
1000fd06:	1c3d      	adds	r5, r7, #0
1000fd08:	2433      	movs	r4, #51	; 0x33
1000fd0a:	4095      	lsls	r5, r2
1000fd0c:	4225      	tst	r5, r4
1000fd0e:	d023      	beq.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd10:	7e8c      	ldrb	r4, [r1, #26]
1000fd12:	3c07      	subs	r4, #7
1000fd14:	2c09      	cmp	r4, #9
1000fd16:	d81f      	bhi.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd18:	4b10      	ldr	r3, [pc, #64]	; (1000fd5c <at_ble_encryption_start+0x64>)
1000fd1a:	1c0c      	adds	r4, r1, #0
1000fd1c:	2100      	movs	r1, #0
1000fd1e:	1c15      	adds	r5, r2, #0
1000fd20:	1c06      	adds	r6, r0, #0
1000fd22:	4798      	blx	r3
1000fd24:	1c3b      	adds	r3, r7, #0
1000fd26:	2807      	cmp	r0, #7
1000fd28:	d816      	bhi.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd2a:	2312      	movs	r3, #18
1000fd2c:	4358      	muls	r0, r3
1000fd2e:	4b0c      	ldr	r3, [pc, #48]	; (1000fd60 <at_ble_encryption_start+0x68>)
1000fd30:	5cc7      	ldrb	r7, [r0, r3]
1000fd32:	23e0      	movs	r3, #224	; 0xe0
1000fd34:	2f00      	cmp	r7, #0
1000fd36:	d10f      	bne.n	1000fd58 <at_ble_encryption_start+0x60>
1000fd38:	1c21      	adds	r1, r4, #0
1000fd3a:	221c      	movs	r2, #28
1000fd3c:	4b09      	ldr	r3, [pc, #36]	; (1000fd64 <at_ble_encryption_start+0x6c>)
1000fd3e:	480a      	ldr	r0, [pc, #40]	; (1000fd68 <at_ble_encryption_start+0x70>)
1000fd40:	4798      	blx	r3
1000fd42:	1c23      	adds	r3, r4, #0
1000fd44:	7ea1      	ldrb	r1, [r4, #26]
1000fd46:	8a22      	ldrh	r2, [r4, #16]
1000fd48:	3312      	adds	r3, #18
1000fd4a:	9100      	str	r1, [sp, #0]
1000fd4c:	9501      	str	r5, [sp, #4]
1000fd4e:	1c21      	adds	r1, r4, #0
1000fd50:	1c30      	adds	r0, r6, #0
1000fd52:	4c06      	ldr	r4, [pc, #24]	; (1000fd6c <at_ble_encryption_start+0x74>)
1000fd54:	47a0      	blx	r4
1000fd56:	1c3b      	adds	r3, r7, #0
1000fd58:	1c18      	adds	r0, r3, #0
1000fd5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fd5c:	1001000d 	.word	0x1001000d
1000fd60:	1001adf2 	.word	0x1001adf2
1000fd64:	1001571b 	.word	0x1001571b
1000fd68:	1001af00 	.word	0x1001af00
1000fd6c:	10010689 	.word	0x10010689

1000fd70 <at_ble_encryption_request_reply>:
1000fd70:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fd72:	24cf      	movs	r4, #207	; 0xcf
1000fd74:	2b00      	cmp	r3, #0
1000fd76:	d011      	beq.n	1000fd9c <at_ble_encryption_request_reply+0x2c>
1000fd78:	2a00      	cmp	r2, #0
1000fd7a:	d00a      	beq.n	1000fd92 <at_ble_encryption_request_reply+0x22>
1000fd7c:	2905      	cmp	r1, #5
1000fd7e:	d80d      	bhi.n	1000fd9c <at_ble_encryption_request_reply+0x2c>
1000fd80:	2501      	movs	r5, #1
1000fd82:	2633      	movs	r6, #51	; 0x33
1000fd84:	408d      	lsls	r5, r1
1000fd86:	4235      	tst	r5, r6
1000fd88:	d008      	beq.n	1000fd9c <at_ble_encryption_request_reply+0x2c>
1000fd8a:	7e9d      	ldrb	r5, [r3, #26]
1000fd8c:	3d07      	subs	r5, #7
1000fd8e:	2d09      	cmp	r5, #9
1000fd90:	d804      	bhi.n	1000fd9c <at_ble_encryption_request_reply+0x2c>
1000fd92:	7e9c      	ldrb	r4, [r3, #26]
1000fd94:	9400      	str	r4, [sp, #0]
1000fd96:	4c02      	ldr	r4, [pc, #8]	; (1000fda0 <at_ble_encryption_request_reply+0x30>)
1000fd98:	47a0      	blx	r4
1000fd9a:	2400      	movs	r4, #0
1000fd9c:	1c20      	adds	r0, r4, #0
1000fd9e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fda0:	10010745 	.word	0x10010745

1000fda4 <rx_callback>:
1000fda4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fda6:	8883      	ldrh	r3, [r0, #4]
1000fda8:	1c01      	adds	r1, r0, #0
1000fdaa:	9301      	str	r3, [sp, #4]
1000fdac:	88c5      	ldrh	r5, [r0, #6]
1000fdae:	8806      	ldrh	r6, [r0, #0]
1000fdb0:	2d00      	cmp	r5, #0
1000fdb2:	d10f      	bne.n	1000fdd4 <rx_callback+0x30>
1000fdb4:	1c19      	adds	r1, r3, #0
1000fdb6:	1c30      	adds	r0, r6, #0
1000fdb8:	4b19      	ldr	r3, [pc, #100]	; (1000fe20 <rx_callback+0x7c>)
1000fdba:	1c2a      	adds	r2, r5, #0
1000fdbc:	4798      	blx	r3
1000fdbe:	1e03      	subs	r3, r0, #0
1000fdc0:	d105      	bne.n	1000fdce <rx_callback+0x2a>
1000fdc2:	1c30      	adds	r0, r6, #0
1000fdc4:	9901      	ldr	r1, [sp, #4]
1000fdc6:	1c1a      	adds	r2, r3, #0
1000fdc8:	4c16      	ldr	r4, [pc, #88]	; (1000fe24 <rx_callback+0x80>)
1000fdca:	47a0      	blx	r4
1000fdcc:	e027      	b.n	1000fe1e <rx_callback+0x7a>
1000fdce:	4b16      	ldr	r3, [pc, #88]	; (1000fe28 <rx_callback+0x84>)
1000fdd0:	4798      	blx	r3
1000fdd2:	e024      	b.n	1000fe1e <rx_callback+0x7a>
1000fdd4:	4c15      	ldr	r4, [pc, #84]	; (1000fe2c <rx_callback+0x88>)
1000fdd6:	4a16      	ldr	r2, [pc, #88]	; (1000fe30 <rx_callback+0x8c>)
1000fdd8:	6823      	ldr	r3, [r4, #0]
1000fdda:	6812      	ldr	r2, [r2, #0]
1000fddc:	18eb      	adds	r3, r5, r3
1000fdde:	4293      	cmp	r3, r2
1000fde0:	d901      	bls.n	1000fde6 <rx_callback+0x42>
1000fde2:	2300      	movs	r3, #0
1000fde4:	6023      	str	r3, [r4, #0]
1000fde6:	4f13      	ldr	r7, [pc, #76]	; (1000fe34 <rx_callback+0x90>)
1000fde8:	6822      	ldr	r2, [r4, #0]
1000fdea:	683b      	ldr	r3, [r7, #0]
1000fdec:	3108      	adds	r1, #8
1000fdee:	1898      	adds	r0, r3, r2
1000fdf0:	1c2a      	adds	r2, r5, #0
1000fdf2:	4b11      	ldr	r3, [pc, #68]	; (1000fe38 <rx_callback+0x94>)
1000fdf4:	4798      	blx	r3
1000fdf6:	683b      	ldr	r3, [r7, #0]
1000fdf8:	6822      	ldr	r2, [r4, #0]
1000fdfa:	1c30      	adds	r0, r6, #0
1000fdfc:	189a      	adds	r2, r3, r2
1000fdfe:	9901      	ldr	r1, [sp, #4]
1000fe00:	4b07      	ldr	r3, [pc, #28]	; (1000fe20 <rx_callback+0x7c>)
1000fe02:	4798      	blx	r3
1000fe04:	2800      	cmp	r0, #0
1000fe06:	d1e2      	bne.n	1000fdce <rx_callback+0x2a>
1000fe08:	6823      	ldr	r3, [r4, #0]
1000fe0a:	683a      	ldr	r2, [r7, #0]
1000fe0c:	1c30      	adds	r0, r6, #0
1000fe0e:	18d2      	adds	r2, r2, r3
1000fe10:	9901      	ldr	r1, [sp, #4]
1000fe12:	1c2b      	adds	r3, r5, #0
1000fe14:	4e03      	ldr	r6, [pc, #12]	; (1000fe24 <rx_callback+0x80>)
1000fe16:	47b0      	blx	r6
1000fe18:	6823      	ldr	r3, [r4, #0]
1000fe1a:	18ed      	adds	r5, r5, r3
1000fe1c:	6025      	str	r5, [r4, #0]
1000fe1e:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fe20:	1000e439 	.word	0x1000e439
1000fe24:	1000e3b1 	.word	0x1000e3b1
1000fe28:	1000dec1 	.word	0x1000dec1
1000fe2c:	1001af5c 	.word	0x1001af5c
1000fe30:	10019ea0 	.word	0x10019ea0
1000fe34:	10019e9c 	.word	0x10019e9c
1000fe38:	1001571b 	.word	0x1001571b

1000fe3c <interface_send>:
1000fe3c:	b508      	push	{r3, lr}
1000fe3e:	4b02      	ldr	r3, [pc, #8]	; (1000fe48 <interface_send+0xc>)
1000fe40:	4798      	blx	r3
1000fe42:	2000      	movs	r0, #0
1000fe44:	bd08      	pop	{r3, pc}
1000fe46:	46c0      	nop			; (mov r8, r8)
1000fe48:	1000dbb9 	.word	0x1000dbb9

1000fe4c <interface_init>:
1000fe4c:	2280      	movs	r2, #128	; 0x80
1000fe4e:	b510      	push	{r4, lr}
1000fe50:	2100      	movs	r1, #0
1000fe52:	1c04      	adds	r4, r0, #0
1000fe54:	0092      	lsls	r2, r2, #2
1000fe56:	4b08      	ldr	r3, [pc, #32]	; (1000fe78 <interface_init+0x2c>)
1000fe58:	4808      	ldr	r0, [pc, #32]	; (1000fe7c <interface_init+0x30>)
1000fe5a:	4798      	blx	r3
1000fe5c:	2200      	movs	r2, #0
1000fe5e:	4b08      	ldr	r3, [pc, #32]	; (1000fe80 <interface_init+0x34>)
1000fe60:	601a      	str	r2, [r3, #0]
1000fe62:	4a08      	ldr	r2, [pc, #32]	; (1000fe84 <interface_init+0x38>)
1000fe64:	4b08      	ldr	r3, [pc, #32]	; (1000fe88 <interface_init+0x3c>)
1000fe66:	601a      	str	r2, [r3, #0]
1000fe68:	4b08      	ldr	r3, [pc, #32]	; (1000fe8c <interface_init+0x40>)
1000fe6a:	6922      	ldr	r2, [r4, #16]
1000fe6c:	601a      	str	r2, [r3, #0]
1000fe6e:	6962      	ldr	r2, [r4, #20]
1000fe70:	4b07      	ldr	r3, [pc, #28]	; (1000fe90 <interface_init+0x44>)
1000fe72:	601a      	str	r2, [r3, #0]
1000fe74:	bd10      	pop	{r4, pc}
1000fe76:	46c0      	nop			; (mov r8, r8)
1000fe78:	1001572d 	.word	0x1001572d
1000fe7c:	1001b160 	.word	0x1001b160
1000fe80:	1001af5c 	.word	0x1001af5c
1000fe84:	1001af60 	.word	0x1001af60
1000fe88:	10018400 	.word	0x10018400
1000fe8c:	10019e9c 	.word	0x10019e9c
1000fe90:	10019ea0 	.word	0x10019ea0

1000fe94 <platform_cmd_cmpl_signal>:
1000fe94:	2201      	movs	r2, #1
1000fe96:	4b01      	ldr	r3, [pc, #4]	; (1000fe9c <platform_cmd_cmpl_signal+0x8>)
1000fe98:	601a      	str	r2, [r3, #0]
1000fe9a:	4770      	bx	lr
1000fe9c:	10019ea4 	.word	0x10019ea4

1000fea0 <platform_cmd_cmpl_wait>:
1000fea0:	b510      	push	{r4, lr}
1000fea2:	1c04      	adds	r4, r0, #0
1000fea4:	4b07      	ldr	r3, [pc, #28]	; (1000fec4 <platform_cmd_cmpl_wait+0x24>)
1000fea6:	681a      	ldr	r2, [r3, #0]
1000fea8:	2a01      	cmp	r2, #1
1000feaa:	d003      	beq.n	1000feb4 <platform_cmd_cmpl_wait+0x14>
1000feac:	4b06      	ldr	r3, [pc, #24]	; (1000fec8 <platform_cmd_cmpl_wait+0x28>)
1000feae:	2000      	movs	r0, #0
1000feb0:	4798      	blx	r3
1000feb2:	e7f7      	b.n	1000fea4 <platform_cmd_cmpl_wait+0x4>
1000feb4:	6819      	ldr	r1, [r3, #0]
1000feb6:	2901      	cmp	r1, #1
1000feb8:	d102      	bne.n	1000fec0 <platform_cmd_cmpl_wait+0x20>
1000feba:	2200      	movs	r2, #0
1000febc:	601a      	str	r2, [r3, #0]
1000febe:	e000      	b.n	1000fec2 <platform_cmd_cmpl_wait+0x22>
1000fec0:	7022      	strb	r2, [r4, #0]
1000fec2:	bd10      	pop	{r4, pc}
1000fec4:	10019ea4 	.word	0x10019ea4
1000fec8:	1000dc49 	.word	0x1000dc49

1000fecc <start_timer>:
1000fecc:	4770      	bx	lr

1000fece <stop_timer>:
1000fece:	4770      	bx	lr

1000fed0 <dbg_le_set_bd_addr_req_handler>:
1000fed0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fed2:	466b      	mov	r3, sp
1000fed4:	1dde      	adds	r6, r3, #7
1000fed6:	2300      	movs	r3, #0
1000fed8:	7033      	strb	r3, [r6, #0]
1000feda:	230f      	movs	r3, #15
1000fedc:	4c13      	ldr	r4, [pc, #76]	; (1000ff2c <dbg_le_set_bd_addr_req_handler+0x5c>)
1000fede:	2703      	movs	r7, #3
1000fee0:	7023      	strb	r3, [r4, #0]
1000fee2:	2300      	movs	r3, #0
1000fee4:	70e3      	strb	r3, [r4, #3]
1000fee6:	4b12      	ldr	r3, [pc, #72]	; (1000ff30 <dbg_le_set_bd_addr_req_handler+0x60>)
1000fee8:	1c01      	adds	r1, r0, #0
1000feea:	881a      	ldrh	r2, [r3, #0]
1000feec:	881b      	ldrh	r3, [r3, #0]
1000feee:	7122      	strb	r2, [r4, #4]
1000fef0:	0a1b      	lsrs	r3, r3, #8
1000fef2:	2206      	movs	r2, #6
1000fef4:	7163      	strb	r3, [r4, #5]
1000fef6:	480f      	ldr	r0, [pc, #60]	; (1000ff34 <dbg_le_set_bd_addr_req_handler+0x64>)
1000fef8:	4b0f      	ldr	r3, [pc, #60]	; (1000ff38 <dbg_le_set_bd_addr_req_handler+0x68>)
1000fefa:	7067      	strb	r7, [r4, #1]
1000fefc:	70a7      	strb	r7, [r4, #2]
1000fefe:	4798      	blx	r3
1000ff00:	4d0e      	ldr	r5, [pc, #56]	; (1000ff3c <dbg_le_set_bd_addr_req_handler+0x6c>)
1000ff02:	4b0f      	ldr	r3, [pc, #60]	; (1000ff40 <dbg_le_set_bd_addr_req_handler+0x70>)
1000ff04:	210e      	movs	r1, #14
1000ff06:	802b      	strh	r3, [r5, #0]
1000ff08:	2306      	movs	r3, #6
1000ff0a:	71a3      	strb	r3, [r4, #6]
1000ff0c:	2300      	movs	r3, #0
1000ff0e:	1c20      	adds	r0, r4, #0
1000ff10:	71e3      	strb	r3, [r4, #7]
1000ff12:	4b0c      	ldr	r3, [pc, #48]	; (1000ff44 <dbg_le_set_bd_addr_req_handler+0x74>)
1000ff14:	80af      	strh	r7, [r5, #4]
1000ff16:	4798      	blx	r3
1000ff18:	1c30      	adds	r0, r6, #0
1000ff1a:	4b0b      	ldr	r3, [pc, #44]	; (1000ff48 <dbg_le_set_bd_addr_req_handler+0x78>)
1000ff1c:	4798      	blx	r3
1000ff1e:	7833      	ldrb	r3, [r6, #0]
1000ff20:	20e2      	movs	r0, #226	; 0xe2
1000ff22:	2b00      	cmp	r3, #0
1000ff24:	d101      	bne.n	1000ff2a <dbg_le_set_bd_addr_req_handler+0x5a>
1000ff26:	68ab      	ldr	r3, [r5, #8]
1000ff28:	7818      	ldrb	r0, [r3, #0]
1000ff2a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ff2c:	1001b160 	.word	0x1001b160
1000ff30:	1001adf0 	.word	0x1001adf0
1000ff34:	1001b168 	.word	0x1001b168
1000ff38:	1001571b 	.word	0x1001571b
1000ff3c:	1001ade4 	.word	0x1001ade4
1000ff40:	00000329 	.word	0x00000329
1000ff44:	1000fe3d 	.word	0x1000fe3d
1000ff48:	1000fea1 	.word	0x1000fea1

1000ff4c <gapc_get_dev_info_cfm.constprop.1>:
1000ff4c:	b538      	push	{r3, r4, r5, lr}
1000ff4e:	230b      	movs	r3, #11
1000ff50:	4c27      	ldr	r4, [pc, #156]	; (1000fff0 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000ff52:	7023      	strb	r3, [r4, #0]
1000ff54:	3303      	adds	r3, #3
1000ff56:	7063      	strb	r3, [r4, #1]
1000ff58:	3329      	adds	r3, #41	; 0x29
1000ff5a:	70a3      	strb	r3, [r4, #2]
1000ff5c:	4b25      	ldr	r3, [pc, #148]	; (1000fff4 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000ff5e:	70e1      	strb	r1, [r4, #3]
1000ff60:	881a      	ldrh	r2, [r3, #0]
1000ff62:	881b      	ldrh	r3, [r3, #0]
1000ff64:	7122      	strb	r2, [r4, #4]
1000ff66:	0a1b      	lsrs	r3, r3, #8
1000ff68:	7163      	strb	r3, [r4, #5]
1000ff6a:	2300      	movs	r3, #0
1000ff6c:	7220      	strb	r0, [r4, #8]
1000ff6e:	7263      	strb	r3, [r4, #9]
1000ff70:	2801      	cmp	r0, #1
1000ff72:	d02b      	beq.n	1000ffcc <gapc_get_dev_info_cfm.constprop.1+0x80>
1000ff74:	4298      	cmp	r0, r3
1000ff76:	d01b      	beq.n	1000ffb0 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000ff78:	2802      	cmp	r0, #2
1000ff7a:	d12f      	bne.n	1000ffdc <gapc_get_dev_info_cfm.constprop.1+0x90>
1000ff7c:	4b1e      	ldr	r3, [pc, #120]	; (1000fff8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ff7e:	2112      	movs	r1, #18
1000ff80:	1c1a      	adds	r2, r3, #0
1000ff82:	32ce      	adds	r2, #206	; 0xce
1000ff84:	8812      	ldrh	r2, [r2, #0]
1000ff86:	72a2      	strb	r2, [r4, #10]
1000ff88:	0a12      	lsrs	r2, r2, #8
1000ff8a:	72e2      	strb	r2, [r4, #11]
1000ff8c:	1c1a      	adds	r2, r3, #0
1000ff8e:	32d0      	adds	r2, #208	; 0xd0
1000ff90:	8812      	ldrh	r2, [r2, #0]
1000ff92:	7322      	strb	r2, [r4, #12]
1000ff94:	0a12      	lsrs	r2, r2, #8
1000ff96:	7362      	strb	r2, [r4, #13]
1000ff98:	1c1a      	adds	r2, r3, #0
1000ff9a:	32d2      	adds	r2, #210	; 0xd2
1000ff9c:	8812      	ldrh	r2, [r2, #0]
1000ff9e:	33d4      	adds	r3, #212	; 0xd4
1000ffa0:	73a2      	strb	r2, [r4, #14]
1000ffa2:	0a12      	lsrs	r2, r2, #8
1000ffa4:	73e2      	strb	r2, [r4, #15]
1000ffa6:	881b      	ldrh	r3, [r3, #0]
1000ffa8:	7423      	strb	r3, [r4, #16]
1000ffaa:	0a1b      	lsrs	r3, r3, #8
1000ffac:	7463      	strb	r3, [r4, #17]
1000ffae:	e016      	b.n	1000ffde <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ffb0:	4b11      	ldr	r3, [pc, #68]	; (1000fff8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ffb2:	4912      	ldr	r1, [pc, #72]	; (1000fffc <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000ffb4:	33aa      	adds	r3, #170	; 0xaa
1000ffb6:	881d      	ldrh	r5, [r3, #0]
1000ffb8:	4811      	ldr	r0, [pc, #68]	; (10010000 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000ffba:	0a2b      	lsrs	r3, r5, #8
1000ffbc:	72a5      	strb	r5, [r4, #10]
1000ffbe:	72e3      	strb	r3, [r4, #11]
1000ffc0:	1c2a      	adds	r2, r5, #0
1000ffc2:	4b10      	ldr	r3, [pc, #64]	; (10010004 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000ffc4:	350c      	adds	r5, #12
1000ffc6:	4798      	blx	r3
1000ffc8:	b2a9      	uxth	r1, r5
1000ffca:	e008      	b.n	1000ffde <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ffcc:	4b0a      	ldr	r3, [pc, #40]	; (1000fff8 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000ffce:	210c      	movs	r1, #12
1000ffd0:	33cc      	adds	r3, #204	; 0xcc
1000ffd2:	881b      	ldrh	r3, [r3, #0]
1000ffd4:	72a3      	strb	r3, [r4, #10]
1000ffd6:	0a1b      	lsrs	r3, r3, #8
1000ffd8:	72e3      	strb	r3, [r4, #11]
1000ffda:	e000      	b.n	1000ffde <gapc_get_dev_info_cfm.constprop.1+0x92>
1000ffdc:	210a      	movs	r1, #10
1000ffde:	1c0b      	adds	r3, r1, #0
1000ffe0:	3b08      	subs	r3, #8
1000ffe2:	71a3      	strb	r3, [r4, #6]
1000ffe4:	121b      	asrs	r3, r3, #8
1000ffe6:	71e3      	strb	r3, [r4, #7]
1000ffe8:	1c20      	adds	r0, r4, #0
1000ffea:	4b07      	ldr	r3, [pc, #28]	; (10010008 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000ffec:	4798      	blx	r3
1000ffee:	bd38      	pop	{r3, r4, r5, pc}
1000fff0:	1001b160 	.word	0x1001b160
1000fff4:	1001adf0 	.word	0x1001adf0
1000fff8:	1001ae82 	.word	0x1001ae82
1000fffc:	1001af2e 	.word	0x1001af2e
10010000:	1001b16c 	.word	0x1001b16c
10010004:	1001571b 	.word	0x1001571b
10010008:	1000fe3d 	.word	0x1000fe3d

1001000c <check_ConnData_idx_role>:
1001000c:	4b0c      	ldr	r3, [pc, #48]	; (10010040 <check_ConnData_idx_role+0x34>)
1001000e:	b570      	push	{r4, r5, r6, lr}
10010010:	1c04      	adds	r4, r0, #0
10010012:	2008      	movs	r0, #8
10010014:	429c      	cmp	r4, r3
10010016:	d011      	beq.n	1001003c <check_ConnData_idx_role+0x30>
10010018:	2300      	movs	r3, #0
1001001a:	2212      	movs	r2, #18
1001001c:	435a      	muls	r2, r3
1001001e:	4d09      	ldr	r5, [pc, #36]	; (10010044 <check_ConnData_idx_role+0x38>)
10010020:	b2d8      	uxtb	r0, r3
10010022:	1956      	adds	r6, r2, r5
10010024:	8976      	ldrh	r6, [r6, #10]
10010026:	42a6      	cmp	r6, r4
10010028:	d104      	bne.n	10010034 <check_ConnData_idx_role+0x28>
1001002a:	2900      	cmp	r1, #0
1001002c:	d006      	beq.n	1001003c <check_ConnData_idx_role+0x30>
1001002e:	5d53      	ldrb	r3, [r2, r5]
10010030:	700b      	strb	r3, [r1, #0]
10010032:	e003      	b.n	1001003c <check_ConnData_idx_role+0x30>
10010034:	3301      	adds	r3, #1
10010036:	2b08      	cmp	r3, #8
10010038:	d1ef      	bne.n	1001001a <check_ConnData_idx_role+0xe>
1001003a:	1c18      	adds	r0, r3, #0
1001003c:	bd70      	pop	{r4, r5, r6, pc}
1001003e:	46c0      	nop			; (mov r8, r8)
10010040:	0000ffff 	.word	0x0000ffff
10010044:	1001adf2 	.word	0x1001adf2

10010048 <check_ConnData_emptyEntry>:
10010048:	2300      	movs	r3, #0
1001004a:	2212      	movs	r2, #18
1001004c:	435a      	muls	r2, r3
1001004e:	4906      	ldr	r1, [pc, #24]	; (10010068 <check_ConnData_emptyEntry+0x20>)
10010050:	b2d8      	uxtb	r0, r3
10010052:	1852      	adds	r2, r2, r1
10010054:	8951      	ldrh	r1, [r2, #10]
10010056:	4a05      	ldr	r2, [pc, #20]	; (1001006c <check_ConnData_emptyEntry+0x24>)
10010058:	4291      	cmp	r1, r2
1001005a:	d003      	beq.n	10010064 <check_ConnData_emptyEntry+0x1c>
1001005c:	3301      	adds	r3, #1
1001005e:	2b08      	cmp	r3, #8
10010060:	d1f3      	bne.n	1001004a <check_ConnData_emptyEntry+0x2>
10010062:	1c18      	adds	r0, r3, #0
10010064:	4770      	bx	lr
10010066:	46c0      	nop			; (mov r8, r8)
10010068:	1001adf2 	.word	0x1001adf2
1001006c:	0000ffff 	.word	0x0000ffff

10010070 <gapc_cmp_evt>:
10010070:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010072:	780b      	ldrb	r3, [r1, #0]
10010074:	1c05      	adds	r5, r0, #0
10010076:	1e58      	subs	r0, r3, #1
10010078:	784e      	ldrb	r6, [r1, #1]
1001007a:	280f      	cmp	r0, #15
1001007c:	d85a      	bhi.n	10010134 <gapc_cmp_evt+0xc4>
1001007e:	1c14      	adds	r4, r2, #0
10010080:	f002 fcb4 	bl	100129ec <__gnu_thumb1_case_uqi>
10010084:	5858440a 	.word	0x5858440a
10010088:	4b584444 	.word	0x4b584444
1001008c:	0825122d 	.word	0x0825122d
10010090:	3e395858 	.word	0x3e395858
10010094:	203b      	movs	r0, #59	; 0x3b
10010096:	e04e      	b.n	10010136 <gapc_cmp_evt+0xc6>
10010098:	203b      	movs	r0, #59	; 0x3b
1001009a:	2e00      	cmp	r6, #0
1001009c:	d04b      	beq.n	10010136 <gapc_cmp_evt+0xc6>
1001009e:	0a2d      	lsrs	r5, r5, #8
100100a0:	8015      	strh	r5, [r2, #0]
100100a2:	7096      	strb	r6, [r2, #2]
100100a4:	3835      	subs	r0, #53	; 0x35
100100a6:	e046      	b.n	10010136 <gapc_cmp_evt+0xc6>
100100a8:	466b      	mov	r3, sp
100100aa:	1ddf      	adds	r7, r3, #7
100100ac:	2301      	movs	r3, #1
100100ae:	0a2d      	lsrs	r5, r5, #8
100100b0:	703b      	strb	r3, [r7, #0]
100100b2:	1c28      	adds	r0, r5, #0
100100b4:	1c39      	adds	r1, r7, #0
100100b6:	4b20      	ldr	r3, [pc, #128]	; (10010138 <gapc_cmp_evt+0xc8>)
100100b8:	4798      	blx	r3
100100ba:	2807      	cmp	r0, #7
100100bc:	d803      	bhi.n	100100c6 <gapc_cmp_evt+0x56>
100100be:	783b      	ldrb	r3, [r7, #0]
100100c0:	203b      	movs	r0, #59	; 0x3b
100100c2:	2b00      	cmp	r3, #0
100100c4:	d037      	beq.n	10010136 <gapc_cmp_evt+0xc6>
100100c6:	8065      	strh	r5, [r4, #2]
100100c8:	7126      	strb	r6, [r4, #4]
100100ca:	2009      	movs	r0, #9
100100cc:	e033      	b.n	10010136 <gapc_cmp_evt+0xc6>
100100ce:	203b      	movs	r0, #59	; 0x3b
100100d0:	2e00      	cmp	r6, #0
100100d2:	d030      	beq.n	10010136 <gapc_cmp_evt+0xc6>
100100d4:	0a2d      	lsrs	r5, r5, #8
100100d6:	8015      	strh	r5, [r2, #0]
100100d8:	7096      	strb	r6, [r2, #2]
100100da:	382d      	subs	r0, #45	; 0x2d
100100dc:	e02b      	b.n	10010136 <gapc_cmp_evt+0xc6>
100100de:	203b      	movs	r0, #59	; 0x3b
100100e0:	2e00      	cmp	r6, #0
100100e2:	d028      	beq.n	10010136 <gapc_cmp_evt+0xc6>
100100e4:	2300      	movs	r3, #0
100100e6:	0a2d      	lsrs	r5, r5, #8
100100e8:	8015      	strh	r5, [r2, #0]
100100ea:	7096      	strb	r6, [r2, #2]
100100ec:	8093      	strh	r3, [r2, #4]
100100ee:	80d3      	strh	r3, [r2, #6]
100100f0:	8113      	strh	r3, [r2, #8]
100100f2:	3834      	subs	r0, #52	; 0x34
100100f4:	e01f      	b.n	10010136 <gapc_cmp_evt+0xc6>
100100f6:	203b      	movs	r0, #59	; 0x3b
100100f8:	2e00      	cmp	r6, #0
100100fa:	d01c      	beq.n	10010136 <gapc_cmp_evt+0xc6>
100100fc:	7216      	strb	r6, [r2, #8]
100100fe:	e003      	b.n	10010108 <gapc_cmp_evt+0x98>
10010100:	203b      	movs	r0, #59	; 0x3b
10010102:	2e00      	cmp	r6, #0
10010104:	d017      	beq.n	10010136 <gapc_cmp_evt+0xc6>
10010106:	7116      	strb	r6, [r2, #4]
10010108:	3812      	subs	r0, #18
1001010a:	e014      	b.n	10010136 <gapc_cmp_evt+0xc6>
1001010c:	203b      	movs	r0, #59	; 0x3b
1001010e:	2e00      	cmp	r6, #0
10010110:	d011      	beq.n	10010136 <gapc_cmp_evt+0xc6>
10010112:	7093      	strb	r3, [r2, #2]
10010114:	70d6      	strb	r6, [r2, #3]
10010116:	382a      	subs	r0, #42	; 0x2a
10010118:	e00d      	b.n	10010136 <gapc_cmp_evt+0xc6>
1001011a:	203b      	movs	r0, #59	; 0x3b
1001011c:	2e00      	cmp	r6, #0
1001011e:	d00a      	beq.n	10010136 <gapc_cmp_evt+0xc6>
10010120:	0a2d      	lsrs	r5, r5, #8
10010122:	7016      	strb	r6, [r2, #0]
10010124:	8055      	strh	r5, [r2, #2]
10010126:	1d10      	adds	r0, r2, #4
10010128:	2100      	movs	r1, #0
1001012a:	2205      	movs	r2, #5
1001012c:	4b03      	ldr	r3, [pc, #12]	; (1001013c <gapc_cmp_evt+0xcc>)
1001012e:	4798      	blx	r3
10010130:	2012      	movs	r0, #18
10010132:	e000      	b.n	10010136 <gapc_cmp_evt+0xc6>
10010134:	2000      	movs	r0, #0
10010136:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010138:	1001000d 	.word	0x1001000d
1001013c:	1001572d 	.word	0x1001572d

10010140 <gapc_connection_cfm_handler>:
10010140:	b5f0      	push	{r4, r5, r6, r7, lr}
10010142:	b085      	sub	sp, #20
10010144:	1c1d      	adds	r5, r3, #0
10010146:	ab0a      	add	r3, sp, #40	; 0x28
10010148:	781b      	ldrb	r3, [r3, #0]
1001014a:	9201      	str	r2, [sp, #4]
1001014c:	9302      	str	r3, [sp, #8]
1001014e:	ab0b      	add	r3, sp, #44	; 0x2c
10010150:	781b      	ldrb	r3, [r3, #0]
10010152:	1c07      	adds	r7, r0, #0
10010154:	9303      	str	r3, [sp, #12]
10010156:	ab0c      	add	r3, sp, #48	; 0x30
10010158:	881a      	ldrh	r2, [r3, #0]
1001015a:	2302      	movs	r3, #2
1001015c:	1c0e      	adds	r6, r1, #0
1001015e:	4c23      	ldr	r4, [pc, #140]	; (100101ec <gapc_connection_cfm_handler+0xac>)
10010160:	1c39      	adds	r1, r7, #0
10010162:	7023      	strb	r3, [r4, #0]
10010164:	330c      	adds	r3, #12
10010166:	7063      	strb	r3, [r4, #1]
10010168:	70a3      	strb	r3, [r4, #2]
1001016a:	4b21      	ldr	r3, [pc, #132]	; (100101f0 <gapc_connection_cfm_handler+0xb0>)
1001016c:	70e2      	strb	r2, [r4, #3]
1001016e:	881a      	ldrh	r2, [r3, #0]
10010170:	881b      	ldrh	r3, [r3, #0]
10010172:	7122      	strb	r2, [r4, #4]
10010174:	0a1b      	lsrs	r3, r3, #8
10010176:	4f1f      	ldr	r7, [pc, #124]	; (100101f4 <gapc_connection_cfm_handler+0xb4>)
10010178:	2210      	movs	r2, #16
1001017a:	481f      	ldr	r0, [pc, #124]	; (100101f8 <gapc_connection_cfm_handler+0xb8>)
1001017c:	7163      	strb	r3, [r4, #5]
1001017e:	47b8      	blx	r7
10010180:	0a33      	lsrs	r3, r6, #8
10010182:	7626      	strb	r6, [r4, #24]
10010184:	7663      	strb	r3, [r4, #25]
10010186:	9901      	ldr	r1, [sp, #4]
10010188:	0c33      	lsrs	r3, r6, #16
1001018a:	2210      	movs	r2, #16
1001018c:	0e36      	lsrs	r6, r6, #24
1001018e:	481b      	ldr	r0, [pc, #108]	; (100101fc <gapc_connection_cfm_handler+0xbc>)
10010190:	76a3      	strb	r3, [r4, #26]
10010192:	76e6      	strb	r6, [r4, #27]
10010194:	47b8      	blx	r7
10010196:	1c23      	adds	r3, r4, #0
10010198:	332c      	adds	r3, #44	; 0x2c
1001019a:	701d      	strb	r5, [r3, #0]
1001019c:	1c23      	adds	r3, r4, #0
1001019e:	0a2a      	lsrs	r2, r5, #8
100101a0:	332d      	adds	r3, #45	; 0x2d
100101a2:	701a      	strb	r2, [r3, #0]
100101a4:	1c23      	adds	r3, r4, #0
100101a6:	0c2a      	lsrs	r2, r5, #16
100101a8:	332e      	adds	r3, #46	; 0x2e
100101aa:	701a      	strb	r2, [r3, #0]
100101ac:	1c23      	adds	r3, r4, #0
100101ae:	0e2d      	lsrs	r5, r5, #24
100101b0:	332f      	adds	r3, #47	; 0x2f
100101b2:	466a      	mov	r2, sp
100101b4:	701d      	strb	r5, [r3, #0]
100101b6:	1c23      	adds	r3, r4, #0
100101b8:	7a12      	ldrb	r2, [r2, #8]
100101ba:	3330      	adds	r3, #48	; 0x30
100101bc:	701a      	strb	r2, [r3, #0]
100101be:	1c23      	adds	r3, r4, #0
100101c0:	2500      	movs	r5, #0
100101c2:	3331      	adds	r3, #49	; 0x31
100101c4:	466a      	mov	r2, sp
100101c6:	701d      	strb	r5, [r3, #0]
100101c8:	1c23      	adds	r3, r4, #0
100101ca:	7b12      	ldrb	r2, [r2, #12]
100101cc:	3332      	adds	r3, #50	; 0x32
100101ce:	701a      	strb	r2, [r3, #0]
100101d0:	1c23      	adds	r3, r4, #0
100101d2:	3333      	adds	r3, #51	; 0x33
100101d4:	701d      	strb	r5, [r3, #0]
100101d6:	232c      	movs	r3, #44	; 0x2c
100101d8:	1c20      	adds	r0, r4, #0
100101da:	71a3      	strb	r3, [r4, #6]
100101dc:	2134      	movs	r1, #52	; 0x34
100101de:	4b08      	ldr	r3, [pc, #32]	; (10010200 <gapc_connection_cfm_handler+0xc0>)
100101e0:	71e5      	strb	r5, [r4, #7]
100101e2:	4798      	blx	r3
100101e4:	1c28      	adds	r0, r5, #0
100101e6:	b005      	add	sp, #20
100101e8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100101ea:	46c0      	nop			; (mov r8, r8)
100101ec:	1001b160 	.word	0x1001b160
100101f0:	1001adf0 	.word	0x1001adf0
100101f4:	1001571b 	.word	0x1001571b
100101f8:	1001b168 	.word	0x1001b168
100101fc:	1001b17c 	.word	0x1001b17c
10010200:	1000fe3d 	.word	0x1000fe3d

10010204 <gapc_con_req_ind>:
10010204:	b5f0      	push	{r4, r5, r6, r7, lr}
10010206:	7845      	ldrb	r5, [r0, #1]
10010208:	7803      	ldrb	r3, [r0, #0]
1001020a:	4c30      	ldr	r4, [pc, #192]	; (100102cc <gapc_con_req_ind+0xc8>)
1001020c:	022d      	lsls	r5, r5, #8
1001020e:	431d      	orrs	r5, r3
10010210:	85a5      	strh	r5, [r4, #44]	; 0x2c
10010212:	78c3      	ldrb	r3, [r0, #3]
10010214:	7882      	ldrb	r2, [r0, #2]
10010216:	b08b      	sub	sp, #44	; 0x2c
10010218:	021b      	lsls	r3, r3, #8
1001021a:	431a      	orrs	r2, r3
1001021c:	466b      	mov	r3, sp
1001021e:	9205      	str	r2, [sp, #20]
10010220:	8a9b      	ldrh	r3, [r3, #20]
10010222:	2120      	movs	r1, #32
10010224:	85e3      	strh	r3, [r4, #46]	; 0x2e
10010226:	7943      	ldrb	r3, [r0, #5]
10010228:	7902      	ldrb	r2, [r0, #4]
1001022a:	021b      	lsls	r3, r3, #8
1001022c:	431a      	orrs	r2, r3
1001022e:	466b      	mov	r3, sp
10010230:	9206      	str	r2, [sp, #24]
10010232:	8b1b      	ldrh	r3, [r3, #24]
10010234:	1c06      	adds	r6, r0, #0
10010236:	8623      	strh	r3, [r4, #48]	; 0x30
10010238:	79c3      	ldrb	r3, [r0, #7]
1001023a:	7982      	ldrb	r2, [r0, #6]
1001023c:	021b      	lsls	r3, r3, #8
1001023e:	431a      	orrs	r2, r3
10010240:	466b      	mov	r3, sp
10010242:	9207      	str	r2, [sp, #28]
10010244:	466a      	mov	r2, sp
10010246:	8b9b      	ldrh	r3, [r3, #28]
10010248:	1852      	adds	r2, r2, r1
1001024a:	8663      	strh	r3, [r4, #50]	; 0x32
1001024c:	7a43      	ldrb	r3, [r0, #9]
1001024e:	1c01      	adds	r1, r0, #0
10010250:	9308      	str	r3, [sp, #32]
10010252:	1c23      	adds	r3, r4, #0
10010254:	7812      	ldrb	r2, [r2, #0]
10010256:	3377      	adds	r3, #119	; 0x77
10010258:	3478      	adds	r4, #120	; 0x78
1001025a:	701a      	strb	r2, [r3, #0]
1001025c:	310a      	adds	r1, #10
1001025e:	2206      	movs	r2, #6
10010260:	4b1b      	ldr	r3, [pc, #108]	; (100102d0 <gapc_con_req_ind+0xcc>)
10010262:	1c20      	adds	r0, r4, #0
10010264:	4798      	blx	r3
10010266:	7c33      	ldrb	r3, [r6, #16]
10010268:	9309      	str	r3, [sp, #36]	; 0x24
1001026a:	4b1a      	ldr	r3, [pc, #104]	; (100102d4 <gapc_con_req_ind+0xd0>)
1001026c:	4798      	blx	r3
1001026e:	4e1a      	ldr	r6, [pc, #104]	; (100102d8 <gapc_con_req_ind+0xd4>)
10010270:	1e07      	subs	r7, r0, #0
10010272:	2f07      	cmp	r7, #7
10010274:	d81b      	bhi.n	100102ae <gapc_con_req_ind+0xaa>
10010276:	2312      	movs	r3, #18
10010278:	4343      	muls	r3, r0
1001027a:	18f0      	adds	r0, r6, r3
1001027c:	8145      	strh	r5, [r0, #10]
1001027e:	4669      	mov	r1, sp
10010280:	2524      	movs	r5, #36	; 0x24
10010282:	1949      	adds	r1, r1, r5
10010284:	7809      	ldrb	r1, [r1, #0]
10010286:	2206      	movs	r2, #6
10010288:	54f1      	strb	r1, [r6, r3]
1001028a:	2120      	movs	r1, #32
1001028c:	466b      	mov	r3, sp
1001028e:	185b      	adds	r3, r3, r1
10010290:	781b      	ldrb	r3, [r3, #0]
10010292:	1c21      	adds	r1, r4, #0
10010294:	7043      	strb	r3, [r0, #1]
10010296:	466b      	mov	r3, sp
10010298:	8a9b      	ldrh	r3, [r3, #20]
1001029a:	3002      	adds	r0, #2
1001029c:	8143      	strh	r3, [r0, #10]
1001029e:	466b      	mov	r3, sp
100102a0:	8b1b      	ldrh	r3, [r3, #24]
100102a2:	8183      	strh	r3, [r0, #12]
100102a4:	466b      	mov	r3, sp
100102a6:	8b9b      	ldrh	r3, [r3, #28]
100102a8:	81c3      	strh	r3, [r0, #14]
100102aa:	4b09      	ldr	r3, [pc, #36]	; (100102d0 <gapc_con_req_ind+0xcc>)
100102ac:	4798      	blx	r3
100102ae:	2112      	movs	r1, #18
100102b0:	2300      	movs	r3, #0
100102b2:	434f      	muls	r7, r1
100102b4:	9300      	str	r3, [sp, #0]
100102b6:	9301      	str	r3, [sp, #4]
100102b8:	19f6      	adds	r6, r6, r7
100102ba:	8971      	ldrh	r1, [r6, #10]
100102bc:	4a07      	ldr	r2, [pc, #28]	; (100102dc <gapc_con_req_ind+0xd8>)
100102be:	9102      	str	r1, [sp, #8]
100102c0:	1c10      	adds	r0, r2, #0
100102c2:	1c19      	adds	r1, r3, #0
100102c4:	4c06      	ldr	r4, [pc, #24]	; (100102e0 <gapc_con_req_ind+0xdc>)
100102c6:	47a0      	blx	r4
100102c8:	b00b      	add	sp, #44	; 0x2c
100102ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
100102cc:	1001ae82 	.word	0x1001ae82
100102d0:	1001571b 	.word	0x1001571b
100102d4:	10010049 	.word	0x10010049
100102d8:	1001adf2 	.word	0x1001adf2
100102dc:	10019ea8 	.word	0x10019ea8
100102e0:	10010141 	.word	0x10010141

100102e4 <gapc_disconnect_cmd_handler>:
100102e4:	2204      	movs	r2, #4
100102e6:	b510      	push	{r4, lr}
100102e8:	4b0c      	ldr	r3, [pc, #48]	; (1001031c <gapc_disconnect_cmd_handler+0x38>)
100102ea:	2400      	movs	r4, #0
100102ec:	701a      	strb	r2, [r3, #0]
100102ee:	320a      	adds	r2, #10
100102f0:	705a      	strb	r2, [r3, #1]
100102f2:	709a      	strb	r2, [r3, #2]
100102f4:	4a0a      	ldr	r2, [pc, #40]	; (10010320 <gapc_disconnect_cmd_handler+0x3c>)
100102f6:	70d9      	strb	r1, [r3, #3]
100102f8:	8811      	ldrh	r1, [r2, #0]
100102fa:	8812      	ldrh	r2, [r2, #0]
100102fc:	7119      	strb	r1, [r3, #4]
100102fe:	0a12      	lsrs	r2, r2, #8
10010300:	715a      	strb	r2, [r3, #5]
10010302:	2201      	movs	r2, #1
10010304:	721a      	strb	r2, [r3, #8]
10010306:	1892      	adds	r2, r2, r2
10010308:	7258      	strb	r0, [r3, #9]
1001030a:	719a      	strb	r2, [r3, #6]
1001030c:	71dc      	strb	r4, [r3, #7]
1001030e:	1c18      	adds	r0, r3, #0
10010310:	210a      	movs	r1, #10
10010312:	4b04      	ldr	r3, [pc, #16]	; (10010324 <gapc_disconnect_cmd_handler+0x40>)
10010314:	4798      	blx	r3
10010316:	1c20      	adds	r0, r4, #0
10010318:	bd10      	pop	{r4, pc}
1001031a:	46c0      	nop			; (mov r8, r8)
1001031c:	1001b160 	.word	0x1001b160
10010320:	1001adf0 	.word	0x1001adf0
10010324:	1000fe3d 	.word	0x1000fe3d

10010328 <gapc_disconnect_ind>:
10010328:	1c02      	adds	r2, r0, #0
1001032a:	b508      	push	{r3, lr}
1001032c:	7843      	ldrb	r3, [r0, #1]
1001032e:	7800      	ldrb	r0, [r0, #0]
10010330:	021b      	lsls	r3, r3, #8
10010332:	4318      	orrs	r0, r3
10010334:	8008      	strh	r0, [r1, #0]
10010336:	7893      	ldrb	r3, [r2, #2]
10010338:	708b      	strb	r3, [r1, #2]
1001033a:	2100      	movs	r1, #0
1001033c:	4b05      	ldr	r3, [pc, #20]	; (10010354 <gapc_disconnect_ind+0x2c>)
1001033e:	4798      	blx	r3
10010340:	2807      	cmp	r0, #7
10010342:	d806      	bhi.n	10010352 <gapc_disconnect_ind+0x2a>
10010344:	2312      	movs	r3, #18
10010346:	4358      	muls	r0, r3
10010348:	4b03      	ldr	r3, [pc, #12]	; (10010358 <gapc_disconnect_ind+0x30>)
1001034a:	1818      	adds	r0, r3, r0
1001034c:	2301      	movs	r3, #1
1001034e:	425b      	negs	r3, r3
10010350:	8143      	strh	r3, [r0, #10]
10010352:	bd08      	pop	{r3, pc}
10010354:	1001000d 	.word	0x1001000d
10010358:	1001adf2 	.word	0x1001adf2

1001035c <gapc_bond_cmd_handler>:
1001035c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1001035e:	9300      	str	r3, [sp, #0]
10010360:	2312      	movs	r3, #18
10010362:	1c04      	adds	r4, r0, #0
10010364:	a808      	add	r0, sp, #32
10010366:	7807      	ldrb	r7, [r0, #0]
10010368:	a809      	add	r0, sp, #36	; 0x24
1001036a:	7806      	ldrb	r6, [r0, #0]
1001036c:	a80a      	add	r0, sp, #40	; 0x28
1001036e:	7805      	ldrb	r5, [r0, #0]
10010370:	a80b      	add	r0, sp, #44	; 0x2c
10010372:	7800      	ldrb	r0, [r0, #0]
10010374:	9001      	str	r0, [sp, #4]
10010376:	4810      	ldr	r0, [pc, #64]	; (100103b8 <gapc_bond_cmd_handler+0x5c>)
10010378:	7003      	strb	r3, [r0, #0]
1001037a:	230e      	movs	r3, #14
1001037c:	70c4      	strb	r4, [r0, #3]
1001037e:	4c0f      	ldr	r4, [pc, #60]	; (100103bc <gapc_bond_cmd_handler+0x60>)
10010380:	7043      	strb	r3, [r0, #1]
10010382:	7083      	strb	r3, [r0, #2]
10010384:	8823      	ldrh	r3, [r4, #0]
10010386:	8824      	ldrh	r4, [r4, #0]
10010388:	7103      	strb	r3, [r0, #4]
1001038a:	466b      	mov	r3, sp
1001038c:	781b      	ldrb	r3, [r3, #0]
1001038e:	0a24      	lsrs	r4, r4, #8
10010390:	72c3      	strb	r3, [r0, #11]
10010392:	466b      	mov	r3, sp
10010394:	791b      	ldrb	r3, [r3, #4]
10010396:	7144      	strb	r4, [r0, #5]
10010398:	73c3      	strb	r3, [r0, #15]
1001039a:	2308      	movs	r3, #8
1001039c:	7183      	strb	r3, [r0, #6]
1001039e:	2300      	movs	r3, #0
100103a0:	240a      	movs	r4, #10
100103a2:	7241      	strb	r1, [r0, #9]
100103a4:	71c3      	strb	r3, [r0, #7]
100103a6:	2110      	movs	r1, #16
100103a8:	4b05      	ldr	r3, [pc, #20]	; (100103c0 <gapc_bond_cmd_handler+0x64>)
100103aa:	7307      	strb	r7, [r0, #12]
100103ac:	7346      	strb	r6, [r0, #13]
100103ae:	7385      	strb	r5, [r0, #14]
100103b0:	7204      	strb	r4, [r0, #8]
100103b2:	7282      	strb	r2, [r0, #10]
100103b4:	4798      	blx	r3
100103b6:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
100103b8:	1001b160 	.word	0x1001b160
100103bc:	1001adf0 	.word	0x1001adf0
100103c0:	1000fe3d 	.word	0x1000fe3d

100103c4 <gapc_bond_ind>:
100103c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100103c6:	780e      	ldrb	r6, [r1, #0]
100103c8:	1c03      	adds	r3, r0, #0
100103ca:	1eb0      	subs	r0, r6, #2
100103cc:	2805      	cmp	r0, #5
100103ce:	d85d      	bhi.n	1001048c <gapc_bond_ind+0xc8>
100103d0:	1c15      	adds	r5, r2, #0
100103d2:	1c0c      	adds	r4, r1, #0
100103d4:	f002 fb0a 	bl	100129ec <__gnu_thumb1_case_uqi>
100103d8:	2f5a030d 	.word	0x2f5a030d
100103dc:	4740      	.short	0x4740
100103de:	2009      	movs	r0, #9
100103e0:	2a00      	cmp	r2, #0
100103e2:	d054      	beq.n	1001048e <gapc_bond_ind+0xca>
100103e4:	0a1b      	lsrs	r3, r3, #8
100103e6:	8053      	strh	r3, [r2, #2]
100103e8:	788b      	ldrb	r3, [r1, #2]
100103ea:	4829      	ldr	r0, [pc, #164]	; (10010490 <gapc_bond_ind+0xcc>)
100103ec:	7113      	strb	r3, [r2, #4]
100103ee:	2100      	movs	r1, #0
100103f0:	e01c      	b.n	1001042c <gapc_bond_ind+0x68>
100103f2:	2009      	movs	r0, #9
100103f4:	2a00      	cmp	r2, #0
100103f6:	d04a      	beq.n	1001048e <gapc_bond_ind+0xca>
100103f8:	4c25      	ldr	r4, [pc, #148]	; (10010490 <gapc_bond_ind+0xcc>)
100103fa:	0a1b      	lsrs	r3, r3, #8
100103fc:	8053      	strh	r3, [r2, #2]
100103fe:	788b      	ldrb	r3, [r1, #2]
10010400:	2700      	movs	r7, #0
10010402:	1c10      	adds	r0, r2, #0
10010404:	1c21      	adds	r1, r4, #0
10010406:	7013      	strb	r3, [r2, #0]
10010408:	4e22      	ldr	r6, [pc, #136]	; (10010494 <gapc_bond_ind+0xd0>)
1001040a:	7117      	strb	r7, [r2, #4]
1001040c:	312e      	adds	r1, #46	; 0x2e
1001040e:	2217      	movs	r2, #23
10010410:	3032      	adds	r0, #50	; 0x32
10010412:	47b0      	blx	r6
10010414:	1c28      	adds	r0, r5, #0
10010416:	1c21      	adds	r1, r4, #0
10010418:	2210      	movs	r2, #16
1001041a:	311e      	adds	r1, #30
1001041c:	3022      	adds	r0, #34	; 0x22
1001041e:	47b0      	blx	r6
10010420:	1ca1      	adds	r1, r4, #2
10010422:	1da8      	adds	r0, r5, #6
10010424:	221c      	movs	r2, #28
10010426:	47b0      	blx	r6
10010428:	1c20      	adds	r0, r4, #0
1001042a:	1c39      	adds	r1, r7, #0
1001042c:	2246      	movs	r2, #70	; 0x46
1001042e:	4b1a      	ldr	r3, [pc, #104]	; (10010498 <gapc_bond_ind+0xd4>)
10010430:	4798      	blx	r3
10010432:	2009      	movs	r0, #9
10010434:	e02b      	b.n	1001048e <gapc_bond_ind+0xca>
10010436:	4d16      	ldr	r5, [pc, #88]	; (10010490 <gapc_bond_ind+0xcc>)
10010438:	3102      	adds	r1, #2
1001043a:	1c28      	adds	r0, r5, #0
1001043c:	2210      	movs	r2, #16
1001043e:	4e15      	ldr	r6, [pc, #84]	; (10010494 <gapc_bond_ind+0xd0>)
10010440:	302e      	adds	r0, #46	; 0x2e
10010442:	47b0      	blx	r6
10010444:	1c28      	adds	r0, r5, #0
10010446:	1c21      	adds	r1, r4, #0
10010448:	303f      	adds	r0, #63	; 0x3f
1001044a:	3112      	adds	r1, #18
1001044c:	2206      	movs	r2, #6
1001044e:	47b0      	blx	r6
10010450:	7e23      	ldrb	r3, [r4, #24]
10010452:	353e      	adds	r5, #62	; 0x3e
10010454:	702b      	strb	r3, [r5, #0]
10010456:	e019      	b.n	1001048c <gapc_bond_ind+0xc8>
10010458:	480d      	ldr	r0, [pc, #52]	; (10010490 <gapc_bond_ind+0xcc>)
1001045a:	3102      	adds	r1, #2
1001045c:	2210      	movs	r2, #16
1001045e:	4b0d      	ldr	r3, [pc, #52]	; (10010494 <gapc_bond_ind+0xd0>)
10010460:	301e      	adds	r0, #30
10010462:	4798      	blx	r3
10010464:	e012      	b.n	1001048c <gapc_bond_ind+0xc8>
10010466:	4d0a      	ldr	r5, [pc, #40]	; (10010490 <gapc_bond_ind+0xcc>)
10010468:	3102      	adds	r1, #2
1001046a:	2210      	movs	r2, #16
1001046c:	4e09      	ldr	r6, [pc, #36]	; (10010494 <gapc_bond_ind+0xd0>)
1001046e:	1ca8      	adds	r0, r5, #2
10010470:	47b0      	blx	r6
10010472:	1c28      	adds	r0, r5, #0
10010474:	1c21      	adds	r1, r4, #0
10010476:	7ce3      	ldrb	r3, [r4, #19]
10010478:	7ca2      	ldrb	r2, [r4, #18]
1001047a:	021b      	lsls	r3, r3, #8
1001047c:	4313      	orrs	r3, r2
1001047e:	3014      	adds	r0, #20
10010480:	3114      	adds	r1, #20
10010482:	2208      	movs	r2, #8
10010484:	826b      	strh	r3, [r5, #18]
10010486:	47b0      	blx	r6
10010488:	7f23      	ldrb	r3, [r4, #28]
1001048a:	772b      	strb	r3, [r5, #28]
1001048c:	2000      	movs	r0, #0
1001048e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010490:	10019ed8 	.word	0x10019ed8
10010494:	1001571b 	.word	0x1001571b
10010498:	1001572d 	.word	0x1001572d

1001049c <gapc_bond_req_ind>:
1001049c:	b570      	push	{r4, r5, r6, lr}
1001049e:	780c      	ldrb	r4, [r1, #0]
100104a0:	1c03      	adds	r3, r0, #0
100104a2:	7849      	ldrb	r1, [r1, #1]
100104a4:	2c07      	cmp	r4, #7
100104a6:	d85c      	bhi.n	10010562 <gapc_bond_req_ind+0xc6>
100104a8:	1c20      	adds	r0, r4, #0
100104aa:	f002 fa9f 	bl	100129ec <__gnu_thumb1_case_uqi>
100104ae:	5a04      	.short	0x5a04
100104b0:	5a0b5a5a 	.word	0x5a0b5a5a
100104b4:	1f1f      	.short	0x1f1f
100104b6:	200a      	movs	r0, #10
100104b8:	2a00      	cmp	r2, #0
100104ba:	d053      	beq.n	10010564 <gapc_bond_req_ind+0xc8>
100104bc:	0a1b      	lsrs	r3, r3, #8
100104be:	8013      	strh	r3, [r2, #0]
100104c0:	7091      	strb	r1, [r2, #2]
100104c2:	e04f      	b.n	10010564 <gapc_bond_req_ind+0xc8>
100104c4:	2a00      	cmp	r2, #0
100104c6:	d00b      	beq.n	100104e0 <gapc_bond_req_ind+0x44>
100104c8:	0a1b      	lsrs	r3, r3, #8
100104ca:	8013      	strh	r3, [r2, #0]
100104cc:	2900      	cmp	r1, #0
100104ce:	d102      	bne.n	100104d6 <gapc_bond_req_ind+0x3a>
100104d0:	2301      	movs	r3, #1
100104d2:	7093      	strb	r3, [r2, #2]
100104d4:	e004      	b.n	100104e0 <gapc_bond_req_ind+0x44>
100104d6:	2300      	movs	r3, #0
100104d8:	7093      	strb	r3, [r2, #2]
100104da:	2902      	cmp	r1, #2
100104dc:	d102      	bne.n	100104e4 <gapc_bond_req_ind+0x48>
100104de:	70d3      	strb	r3, [r2, #3]
100104e0:	200c      	movs	r0, #12
100104e2:	e03f      	b.n	10010564 <gapc_bond_req_ind+0xc8>
100104e4:	2901      	cmp	r1, #1
100104e6:	d1fb      	bne.n	100104e0 <gapc_bond_req_ind+0x44>
100104e8:	70d1      	strb	r1, [r2, #3]
100104ea:	e7f9      	b.n	100104e0 <gapc_bond_req_ind+0x44>
100104ec:	2214      	movs	r2, #20
100104ee:	481e      	ldr	r0, [pc, #120]	; (10010568 <gapc_bond_req_ind+0xcc>)
100104f0:	0a1b      	lsrs	r3, r3, #8
100104f2:	70c3      	strb	r3, [r0, #3]
100104f4:	4b1d      	ldr	r3, [pc, #116]	; (1001056c <gapc_bond_req_ind+0xd0>)
100104f6:	7002      	strb	r2, [r0, #0]
100104f8:	3a06      	subs	r2, #6
100104fa:	7042      	strb	r2, [r0, #1]
100104fc:	7082      	strb	r2, [r0, #2]
100104fe:	881a      	ldrh	r2, [r3, #0]
10010500:	881b      	ldrh	r3, [r3, #0]
10010502:	4e1b      	ldr	r6, [pc, #108]	; (10010570 <gapc_bond_req_ind+0xd4>)
10010504:	0a1b      	lsrs	r3, r3, #8
10010506:	7143      	strb	r3, [r0, #5]
10010508:	2301      	movs	r3, #1
1001050a:	7102      	strb	r2, [r0, #4]
1001050c:	7204      	strb	r4, [r0, #8]
1001050e:	7243      	strb	r3, [r0, #9]
10010510:	1c05      	adds	r5, r0, #0
10010512:	1c31      	adds	r1, r6, #0
10010514:	300a      	adds	r0, #10
10010516:	2c07      	cmp	r4, #7
10010518:	d116      	bne.n	10010548 <gapc_bond_req_ind+0xac>
1001051a:	317e      	adds	r1, #126	; 0x7e
1001051c:	2210      	movs	r2, #16
1001051e:	4c15      	ldr	r4, [pc, #84]	; (10010574 <gapc_bond_req_ind+0xd8>)
10010520:	47a0      	blx	r4
10010522:	1c33      	adds	r3, r6, #0
10010524:	1c31      	adds	r1, r6, #0
10010526:	1c28      	adds	r0, r5, #0
10010528:	338e      	adds	r3, #142	; 0x8e
1001052a:	881b      	ldrh	r3, [r3, #0]
1001052c:	3190      	adds	r1, #144	; 0x90
1001052e:	76ab      	strb	r3, [r5, #26]
10010530:	2208      	movs	r2, #8
10010532:	0a1b      	lsrs	r3, r3, #8
10010534:	301c      	adds	r0, #28
10010536:	76eb      	strb	r3, [r5, #27]
10010538:	47a0      	blx	r4
1001053a:	1c31      	adds	r1, r6, #0
1001053c:	3198      	adds	r1, #152	; 0x98
1001053e:	780a      	ldrb	r2, [r1, #0]
10010540:	1d6b      	adds	r3, r5, #5
10010542:	77da      	strb	r2, [r3, #31]
10010544:	2125      	movs	r1, #37	; 0x25
10010546:	e004      	b.n	10010552 <gapc_bond_req_ind+0xb6>
10010548:	319a      	adds	r1, #154	; 0x9a
1001054a:	2210      	movs	r2, #16
1001054c:	4b09      	ldr	r3, [pc, #36]	; (10010574 <gapc_bond_req_ind+0xd8>)
1001054e:	4798      	blx	r3
10010550:	211a      	movs	r1, #26
10010552:	1c0b      	adds	r3, r1, #0
10010554:	2400      	movs	r4, #0
10010556:	3b08      	subs	r3, #8
10010558:	71ab      	strb	r3, [r5, #6]
1001055a:	1c28      	adds	r0, r5, #0
1001055c:	4b06      	ldr	r3, [pc, #24]	; (10010578 <gapc_bond_req_ind+0xdc>)
1001055e:	71ec      	strb	r4, [r5, #7]
10010560:	4798      	blx	r3
10010562:	2000      	movs	r0, #0
10010564:	bd70      	pop	{r4, r5, r6, pc}
10010566:	46c0      	nop			; (mov r8, r8)
10010568:	1001b160 	.word	0x1001b160
1001056c:	1001adf0 	.word	0x1001adf0
10010570:	1001ae82 	.word	0x1001ae82
10010574:	1001571b 	.word	0x1001571b
10010578:	1000fe3d 	.word	0x1000fe3d

1001057c <gapc_bond_cfm_handler_pair_resp>:
1001057c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001057e:	b085      	sub	sp, #20
10010580:	1c07      	adds	r7, r0, #0
10010582:	a80a      	add	r0, sp, #40	; 0x28
10010584:	7806      	ldrb	r6, [r0, #0]
10010586:	a80b      	add	r0, sp, #44	; 0x2c
10010588:	7805      	ldrb	r5, [r0, #0]
1001058a:	a80c      	add	r0, sp, #48	; 0x30
1001058c:	7800      	ldrb	r0, [r0, #0]
1001058e:	2414      	movs	r4, #20
10010590:	9002      	str	r0, [sp, #8]
10010592:	a80d      	add	r0, sp, #52	; 0x34
10010594:	7800      	ldrb	r0, [r0, #0]
10010596:	9301      	str	r3, [sp, #4]
10010598:	9003      	str	r0, [sp, #12]
1001059a:	a80e      	add	r0, sp, #56	; 0x38
1001059c:	8800      	ldrh	r0, [r0, #0]
1001059e:	4684      	mov	ip, r0
100105a0:	4812      	ldr	r0, [pc, #72]	; (100105ec <gapc_bond_cfm_handler_pair_resp+0x70>)
100105a2:	7004      	strb	r4, [r0, #0]
100105a4:	3c06      	subs	r4, #6
100105a6:	7044      	strb	r4, [r0, #1]
100105a8:	7084      	strb	r4, [r0, #2]
100105aa:	4664      	mov	r4, ip
100105ac:	70c4      	strb	r4, [r0, #3]
100105ae:	4c10      	ldr	r4, [pc, #64]	; (100105f0 <gapc_bond_cfm_handler_pair_resp+0x74>)
100105b0:	7247      	strb	r7, [r0, #9]
100105b2:	8823      	ldrh	r3, [r4, #0]
100105b4:	8824      	ldrh	r4, [r4, #0]
100105b6:	7103      	strb	r3, [r0, #4]
100105b8:	466b      	mov	r3, sp
100105ba:	791b      	ldrb	r3, [r3, #4]
100105bc:	0a24      	lsrs	r4, r4, #8
100105be:	7303      	strb	r3, [r0, #12]
100105c0:	466b      	mov	r3, sp
100105c2:	7a1b      	ldrb	r3, [r3, #8]
100105c4:	7144      	strb	r4, [r0, #5]
100105c6:	73c3      	strb	r3, [r0, #15]
100105c8:	466b      	mov	r3, sp
100105ca:	7b1b      	ldrb	r3, [r3, #12]
100105cc:	2401      	movs	r4, #1
100105ce:	7403      	strb	r3, [r0, #16]
100105d0:	2309      	movs	r3, #9
100105d2:	7183      	strb	r3, [r0, #6]
100105d4:	2300      	movs	r3, #0
100105d6:	7204      	strb	r4, [r0, #8]
100105d8:	7281      	strb	r1, [r0, #10]
100105da:	72c2      	strb	r2, [r0, #11]
100105dc:	7346      	strb	r6, [r0, #13]
100105de:	7385      	strb	r5, [r0, #14]
100105e0:	71c3      	strb	r3, [r0, #7]
100105e2:	2111      	movs	r1, #17
100105e4:	4b03      	ldr	r3, [pc, #12]	; (100105f4 <gapc_bond_cfm_handler_pair_resp+0x78>)
100105e6:	4798      	blx	r3
100105e8:	b005      	add	sp, #20
100105ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105ec:	1001b160 	.word	0x1001b160
100105f0:	1001adf0 	.word	0x1001adf0
100105f4:	1000fe3d 	.word	0x1000fe3d

100105f8 <gapc_bond_cfm_handler_key_exch>:
100105f8:	b538      	push	{r3, r4, r5, lr}
100105fa:	2514      	movs	r5, #20
100105fc:	4c0d      	ldr	r4, [pc, #52]	; (10010634 <gapc_bond_cfm_handler_key_exch+0x3c>)
100105fe:	70e3      	strb	r3, [r4, #3]
10010600:	4b0d      	ldr	r3, [pc, #52]	; (10010638 <gapc_bond_cfm_handler_key_exch+0x40>)
10010602:	7025      	strb	r5, [r4, #0]
10010604:	3d06      	subs	r5, #6
10010606:	7065      	strb	r5, [r4, #1]
10010608:	70a5      	strb	r5, [r4, #2]
1001060a:	881d      	ldrh	r5, [r3, #0]
1001060c:	881b      	ldrh	r3, [r3, #0]
1001060e:	7220      	strb	r0, [r4, #8]
10010610:	0a1b      	lsrs	r3, r3, #8
10010612:	7163      	strb	r3, [r4, #5]
10010614:	7261      	strb	r1, [r4, #9]
10010616:	4b09      	ldr	r3, [pc, #36]	; (1001063c <gapc_bond_cfm_handler_key_exch+0x44>)
10010618:	1c11      	adds	r1, r2, #0
1001061a:	4809      	ldr	r0, [pc, #36]	; (10010640 <gapc_bond_cfm_handler_key_exch+0x48>)
1001061c:	2210      	movs	r2, #16
1001061e:	7125      	strb	r5, [r4, #4]
10010620:	4798      	blx	r3
10010622:	2312      	movs	r3, #18
10010624:	71a3      	strb	r3, [r4, #6]
10010626:	2300      	movs	r3, #0
10010628:	1c20      	adds	r0, r4, #0
1001062a:	71e3      	strb	r3, [r4, #7]
1001062c:	211a      	movs	r1, #26
1001062e:	4b05      	ldr	r3, [pc, #20]	; (10010644 <gapc_bond_cfm_handler_key_exch+0x4c>)
10010630:	4798      	blx	r3
10010632:	bd38      	pop	{r3, r4, r5, pc}
10010634:	1001b160 	.word	0x1001b160
10010638:	1001adf0 	.word	0x1001adf0
1001063c:	1001571b 	.word	0x1001571b
10010640:	1001b16a 	.word	0x1001b16a
10010644:	1000fe3d 	.word	0x1000fe3d

10010648 <gapc_security_cmd_handler>:
10010648:	221a      	movs	r2, #26
1001064a:	b508      	push	{r3, lr}
1001064c:	4b0b      	ldr	r3, [pc, #44]	; (1001067c <gapc_security_cmd_handler+0x34>)
1001064e:	701a      	strb	r2, [r3, #0]
10010650:	3a0c      	subs	r2, #12
10010652:	705a      	strb	r2, [r3, #1]
10010654:	709a      	strb	r2, [r3, #2]
10010656:	4a0a      	ldr	r2, [pc, #40]	; (10010680 <gapc_security_cmd_handler+0x38>)
10010658:	70d8      	strb	r0, [r3, #3]
1001065a:	8810      	ldrh	r0, [r2, #0]
1001065c:	8812      	ldrh	r2, [r2, #0]
1001065e:	7118      	strb	r0, [r3, #4]
10010660:	0a12      	lsrs	r2, r2, #8
10010662:	715a      	strb	r2, [r3, #5]
10010664:	220c      	movs	r2, #12
10010666:	721a      	strb	r2, [r3, #8]
10010668:	3a0a      	subs	r2, #10
1001066a:	719a      	strb	r2, [r3, #6]
1001066c:	2200      	movs	r2, #0
1001066e:	7259      	strb	r1, [r3, #9]
10010670:	71da      	strb	r2, [r3, #7]
10010672:	1c18      	adds	r0, r3, #0
10010674:	210a      	movs	r1, #10
10010676:	4b03      	ldr	r3, [pc, #12]	; (10010684 <gapc_security_cmd_handler+0x3c>)
10010678:	4798      	blx	r3
1001067a:	bd08      	pop	{r3, pc}
1001067c:	1001b160 	.word	0x1001b160
10010680:	1001adf0 	.word	0x1001adf0
10010684:	1000fe3d 	.word	0x1000fe3d

10010688 <gapc_encrypt_cmd_handler>:
10010688:	b5f0      	push	{r4, r5, r6, r7, lr}
1001068a:	2500      	movs	r5, #0
1001068c:	b089      	sub	sp, #36	; 0x24
1001068e:	9306      	str	r3, [sp, #24]
10010690:	ab0e      	add	r3, sp, #56	; 0x38
10010692:	781b      	ldrb	r3, [r3, #0]
10010694:	1c17      	adds	r7, r2, #0
10010696:	9307      	str	r3, [sp, #28]
10010698:	ab0f      	add	r3, sp, #60	; 0x3c
1001069a:	781b      	ldrb	r3, [r3, #0]
1001069c:	4a19      	ldr	r2, [pc, #100]	; (10010704 <gapc_encrypt_cmd_handler+0x7c>)
1001069e:	1c06      	adds	r6, r0, #0
100106a0:	9105      	str	r1, [sp, #20]
100106a2:	9300      	str	r3, [sp, #0]
100106a4:	9002      	str	r0, [sp, #8]
100106a6:	1c29      	adds	r1, r5, #0
100106a8:	1c2b      	adds	r3, r5, #0
100106aa:	9501      	str	r5, [sp, #4]
100106ac:	1c10      	adds	r0, r2, #0
100106ae:	4c16      	ldr	r4, [pc, #88]	; (10010708 <gapc_encrypt_cmd_handler+0x80>)
100106b0:	47a0      	blx	r4
100106b2:	2316      	movs	r3, #22
100106b4:	4c15      	ldr	r4, [pc, #84]	; (1001070c <gapc_encrypt_cmd_handler+0x84>)
100106b6:	9905      	ldr	r1, [sp, #20]
100106b8:	7023      	strb	r3, [r4, #0]
100106ba:	3b08      	subs	r3, #8
100106bc:	7063      	strb	r3, [r4, #1]
100106be:	70a3      	strb	r3, [r4, #2]
100106c0:	4b13      	ldr	r3, [pc, #76]	; (10010710 <gapc_encrypt_cmd_handler+0x88>)
100106c2:	70e6      	strb	r6, [r4, #3]
100106c4:	881a      	ldrh	r2, [r3, #0]
100106c6:	881b      	ldrh	r3, [r3, #0]
100106c8:	7122      	strb	r2, [r4, #4]
100106ca:	0a1b      	lsrs	r3, r3, #8
100106cc:	7163      	strb	r3, [r4, #5]
100106ce:	230b      	movs	r3, #11
100106d0:	4e10      	ldr	r6, [pc, #64]	; (10010714 <gapc_encrypt_cmd_handler+0x8c>)
100106d2:	2210      	movs	r2, #16
100106d4:	4810      	ldr	r0, [pc, #64]	; (10010718 <gapc_encrypt_cmd_handler+0x90>)
100106d6:	7223      	strb	r3, [r4, #8]
100106d8:	7265      	strb	r5, [r4, #9]
100106da:	47b0      	blx	r6
100106dc:	0a3b      	lsrs	r3, r7, #8
100106de:	9906      	ldr	r1, [sp, #24]
100106e0:	2208      	movs	r2, #8
100106e2:	480e      	ldr	r0, [pc, #56]	; (1001071c <gapc_encrypt_cmd_handler+0x94>)
100106e4:	76e3      	strb	r3, [r4, #27]
100106e6:	76a7      	strb	r7, [r4, #26]
100106e8:	47b0      	blx	r6
100106ea:	466a      	mov	r2, sp
100106ec:	7f12      	ldrb	r2, [r2, #28]
100106ee:	1d63      	adds	r3, r4, #5
100106f0:	77da      	strb	r2, [r3, #31]
100106f2:	231d      	movs	r3, #29
100106f4:	1c20      	adds	r0, r4, #0
100106f6:	71a3      	strb	r3, [r4, #6]
100106f8:	2125      	movs	r1, #37	; 0x25
100106fa:	4b09      	ldr	r3, [pc, #36]	; (10010720 <gapc_encrypt_cmd_handler+0x98>)
100106fc:	71e5      	strb	r5, [r4, #7]
100106fe:	4798      	blx	r3
10010700:	b009      	add	sp, #36	; 0x24
10010702:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010704:	10019eb8 	.word	0x10019eb8
10010708:	10010141 	.word	0x10010141
1001070c:	1001b160 	.word	0x1001b160
10010710:	1001adf0 	.word	0x1001adf0
10010714:	1001571b 	.word	0x1001571b
10010718:	1001b16a 	.word	0x1001b16a
1001071c:	1001b17c 	.word	0x1001b17c
10010720:	1000fe3d 	.word	0x1000fe3d

10010724 <gapc_encrypt_req_ind>:
10010724:	b508      	push	{r3, lr}
10010726:	0a00      	lsrs	r0, r0, #8
10010728:	8010      	strh	r0, [r2, #0]
1001072a:	784b      	ldrb	r3, [r1, #1]
1001072c:	7808      	ldrb	r0, [r1, #0]
1001072e:	021b      	lsls	r3, r3, #8
10010730:	4303      	orrs	r3, r0
10010732:	8053      	strh	r3, [r2, #2]
10010734:	1d10      	adds	r0, r2, #4
10010736:	3102      	adds	r1, #2
10010738:	2208      	movs	r2, #8
1001073a:	4b01      	ldr	r3, [pc, #4]	; (10010740 <gapc_encrypt_req_ind+0x1c>)
1001073c:	4798      	blx	r3
1001073e:	bd08      	pop	{r3, pc}
10010740:	1001571b 	.word	0x1001571b

10010744 <gapc_encrypt_cfm_handler>:
10010744:	b5f0      	push	{r4, r5, r6, r7, lr}
10010746:	2500      	movs	r5, #0
10010748:	b087      	sub	sp, #28
1001074a:	9304      	str	r3, [sp, #16]
1001074c:	ab0c      	add	r3, sp, #48	; 0x30
1001074e:	781b      	ldrb	r3, [r3, #0]
10010750:	1c17      	adds	r7, r2, #0
10010752:	4a15      	ldr	r2, [pc, #84]	; (100107a8 <gapc_encrypt_cfm_handler+0x64>)
10010754:	1c06      	adds	r6, r0, #0
10010756:	9305      	str	r3, [sp, #20]
10010758:	9100      	str	r1, [sp, #0]
1001075a:	9002      	str	r0, [sp, #8]
1001075c:	1c29      	adds	r1, r5, #0
1001075e:	1c2b      	adds	r3, r5, #0
10010760:	9501      	str	r5, [sp, #4]
10010762:	1c10      	adds	r0, r2, #0
10010764:	4c11      	ldr	r4, [pc, #68]	; (100107ac <gapc_encrypt_cfm_handler+0x68>)
10010766:	47a0      	blx	r4
10010768:	2318      	movs	r3, #24
1001076a:	4c11      	ldr	r4, [pc, #68]	; (100107b0 <gapc_encrypt_cfm_handler+0x6c>)
1001076c:	9904      	ldr	r1, [sp, #16]
1001076e:	7023      	strb	r3, [r4, #0]
10010770:	3b0a      	subs	r3, #10
10010772:	7063      	strb	r3, [r4, #1]
10010774:	70a3      	strb	r3, [r4, #2]
10010776:	4b0f      	ldr	r3, [pc, #60]	; (100107b4 <gapc_encrypt_cfm_handler+0x70>)
10010778:	480f      	ldr	r0, [pc, #60]	; (100107b8 <gapc_encrypt_cfm_handler+0x74>)
1001077a:	881a      	ldrh	r2, [r3, #0]
1001077c:	881b      	ldrh	r3, [r3, #0]
1001077e:	7122      	strb	r2, [r4, #4]
10010780:	0a1b      	lsrs	r3, r3, #8
10010782:	7163      	strb	r3, [r4, #5]
10010784:	2210      	movs	r2, #16
10010786:	4b0d      	ldr	r3, [pc, #52]	; (100107bc <gapc_encrypt_cfm_handler+0x78>)
10010788:	70e6      	strb	r6, [r4, #3]
1001078a:	7227      	strb	r7, [r4, #8]
1001078c:	4798      	blx	r3
1001078e:	466b      	mov	r3, sp
10010790:	7d1b      	ldrb	r3, [r3, #20]
10010792:	1c20      	adds	r0, r4, #0
10010794:	7663      	strb	r3, [r4, #25]
10010796:	2312      	movs	r3, #18
10010798:	211a      	movs	r1, #26
1001079a:	71a3      	strb	r3, [r4, #6]
1001079c:	4b08      	ldr	r3, [pc, #32]	; (100107c0 <gapc_encrypt_cfm_handler+0x7c>)
1001079e:	71e5      	strb	r5, [r4, #7]
100107a0:	4798      	blx	r3
100107a2:	b007      	add	sp, #28
100107a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100107a6:	46c0      	nop			; (mov r8, r8)
100107a8:	10019ec8 	.word	0x10019ec8
100107ac:	10010141 	.word	0x10010141
100107b0:	1001b160 	.word	0x1001b160
100107b4:	1001adf0 	.word	0x1001adf0
100107b8:	1001b169 	.word	0x1001b169
100107bc:	1001571b 	.word	0x1001571b
100107c0:	1000fe3d 	.word	0x1000fe3d

100107c4 <gapc_encrypt_ind>:
100107c4:	780b      	ldrb	r3, [r1, #0]
100107c6:	0a00      	lsrs	r0, r0, #8
100107c8:	70d3      	strb	r3, [r2, #3]
100107ca:	2300      	movs	r3, #0
100107cc:	8010      	strh	r0, [r2, #0]
100107ce:	7093      	strb	r3, [r2, #2]
100107d0:	4770      	bx	lr
	...

100107d4 <gapc_param_update_cfm_handler>:
100107d4:	b538      	push	{r3, r4, r5, lr}
100107d6:	2410      	movs	r4, #16
100107d8:	1c05      	adds	r5, r0, #0
100107da:	480e      	ldr	r0, [pc, #56]	; (10010814 <gapc_param_update_cfm_handler+0x40>)
100107dc:	7004      	strb	r4, [r0, #0]
100107de:	3c02      	subs	r4, #2
100107e0:	7044      	strb	r4, [r0, #1]
100107e2:	7084      	strb	r4, [r0, #2]
100107e4:	4c0c      	ldr	r4, [pc, #48]	; (10010818 <gapc_param_update_cfm_handler+0x44>)
100107e6:	70c5      	strb	r5, [r0, #3]
100107e8:	8825      	ldrh	r5, [r4, #0]
100107ea:	8824      	ldrh	r4, [r4, #0]
100107ec:	72c3      	strb	r3, [r0, #11]
100107ee:	0a1b      	lsrs	r3, r3, #8
100107f0:	0a24      	lsrs	r4, r4, #8
100107f2:	7303      	strb	r3, [r0, #12]
100107f4:	2305      	movs	r3, #5
100107f6:	7144      	strb	r4, [r0, #5]
100107f8:	2400      	movs	r4, #0
100107fa:	7201      	strb	r1, [r0, #8]
100107fc:	7242      	strb	r2, [r0, #9]
100107fe:	7183      	strb	r3, [r0, #6]
10010800:	0a12      	lsrs	r2, r2, #8
10010802:	210d      	movs	r1, #13
10010804:	4b05      	ldr	r3, [pc, #20]	; (1001081c <gapc_param_update_cfm_handler+0x48>)
10010806:	7105      	strb	r5, [r0, #4]
10010808:	7282      	strb	r2, [r0, #10]
1001080a:	71c4      	strb	r4, [r0, #7]
1001080c:	4798      	blx	r3
1001080e:	1c20      	adds	r0, r4, #0
10010810:	bd38      	pop	{r3, r4, r5, pc}
10010812:	46c0      	nop			; (mov r8, r8)
10010814:	1001b160 	.word	0x1001b160
10010818:	1001adf0 	.word	0x1001adf0
1001081c:	1000fe3d 	.word	0x1000fe3d

10010820 <gapc_param_updated_ind>:
10010820:	2300      	movs	r3, #0
10010822:	0a00      	lsrs	r0, r0, #8
10010824:	8010      	strh	r0, [r2, #0]
10010826:	7093      	strb	r3, [r2, #2]
10010828:	784b      	ldrb	r3, [r1, #1]
1001082a:	7808      	ldrb	r0, [r1, #0]
1001082c:	021b      	lsls	r3, r3, #8
1001082e:	4303      	orrs	r3, r0
10010830:	8093      	strh	r3, [r2, #4]
10010832:	78cb      	ldrb	r3, [r1, #3]
10010834:	7888      	ldrb	r0, [r1, #2]
10010836:	021b      	lsls	r3, r3, #8
10010838:	4303      	orrs	r3, r0
1001083a:	80d3      	strh	r3, [r2, #6]
1001083c:	794b      	ldrb	r3, [r1, #5]
1001083e:	7909      	ldrb	r1, [r1, #4]
10010840:	021b      	lsls	r3, r3, #8
10010842:	430b      	orrs	r3, r1
10010844:	2007      	movs	r0, #7
10010846:	8113      	strh	r3, [r2, #8]
10010848:	4770      	bx	lr

1001084a <gapc_param_updated_req_ind>:
1001084a:	0a00      	lsrs	r0, r0, #8
1001084c:	8010      	strh	r0, [r2, #0]
1001084e:	784b      	ldrb	r3, [r1, #1]
10010850:	7808      	ldrb	r0, [r1, #0]
10010852:	021b      	lsls	r3, r3, #8
10010854:	4303      	orrs	r3, r0
10010856:	8053      	strh	r3, [r2, #2]
10010858:	78cb      	ldrb	r3, [r1, #3]
1001085a:	7888      	ldrb	r0, [r1, #2]
1001085c:	021b      	lsls	r3, r3, #8
1001085e:	4303      	orrs	r3, r0
10010860:	8093      	strh	r3, [r2, #4]
10010862:	794b      	ldrb	r3, [r1, #5]
10010864:	7908      	ldrb	r0, [r1, #4]
10010866:	021b      	lsls	r3, r3, #8
10010868:	4303      	orrs	r3, r0
1001086a:	80d3      	strh	r3, [r2, #6]
1001086c:	79cb      	ldrb	r3, [r1, #7]
1001086e:	7989      	ldrb	r1, [r1, #6]
10010870:	021b      	lsls	r3, r3, #8
10010872:	430b      	orrs	r3, r1
10010874:	2008      	movs	r0, #8
10010876:	8113      	strh	r3, [r2, #8]
10010878:	4770      	bx	lr
	...

1001087c <gapc_dev_info_req_ind_handler>:
1001087c:	b508      	push	{r3, lr}
1001087e:	1c0b      	adds	r3, r1, #0
10010880:	0a01      	lsrs	r1, r0, #8
10010882:	8011      	strh	r1, [r2, #0]
10010884:	7818      	ldrb	r0, [r3, #0]
10010886:	7090      	strb	r0, [r2, #2]
10010888:	2800      	cmp	r0, #0
1001088a:	d104      	bne.n	10010896 <gapc_dev_info_req_ind_handler+0x1a>
1001088c:	4b03      	ldr	r3, [pc, #12]	; (1001089c <gapc_dev_info_req_ind_handler+0x20>)
1001088e:	33aa      	adds	r3, #170	; 0xaa
10010890:	881b      	ldrh	r3, [r3, #0]
10010892:	2b00      	cmp	r3, #0
10010894:	d001      	beq.n	1001089a <gapc_dev_info_req_ind_handler+0x1e>
10010896:	4b02      	ldr	r3, [pc, #8]	; (100108a0 <gapc_dev_info_req_ind_handler+0x24>)
10010898:	4798      	blx	r3
1001089a:	bd08      	pop	{r3, pc}
1001089c:	1001ae82 	.word	0x1001ae82
100108a0:	1000ff4d 	.word	0x1000ff4d

100108a4 <gapc_sec_req_ind>:
100108a4:	0a00      	lsrs	r0, r0, #8
100108a6:	8010      	strh	r0, [r2, #0]
100108a8:	7809      	ldrb	r1, [r1, #0]
100108aa:	2301      	movs	r3, #1
100108ac:	1c08      	adds	r0, r1, #0
100108ae:	0889      	lsrs	r1, r1, #2
100108b0:	4018      	ands	r0, r3
100108b2:	400b      	ands	r3, r1
100108b4:	70d0      	strb	r0, [r2, #3]
100108b6:	7113      	strb	r3, [r2, #4]
100108b8:	4770      	bx	lr

100108ba <gapc_sign_counter_ind_handler>:
100108ba:	0a00      	lsrs	r0, r0, #8
100108bc:	8010      	strh	r0, [r2, #0]
100108be:	784b      	ldrb	r3, [r1, #1]
100108c0:	0218      	lsls	r0, r3, #8
100108c2:	788b      	ldrb	r3, [r1, #2]
100108c4:	041b      	lsls	r3, r3, #16
100108c6:	4303      	orrs	r3, r0
100108c8:	7808      	ldrb	r0, [r1, #0]
100108ca:	4303      	orrs	r3, r0
100108cc:	78c8      	ldrb	r0, [r1, #3]
100108ce:	0600      	lsls	r0, r0, #24
100108d0:	4303      	orrs	r3, r0
100108d2:	6053      	str	r3, [r2, #4]
100108d4:	794b      	ldrb	r3, [r1, #5]
100108d6:	0218      	lsls	r0, r3, #8
100108d8:	798b      	ldrb	r3, [r1, #6]
100108da:	041b      	lsls	r3, r3, #16
100108dc:	4303      	orrs	r3, r0
100108de:	7908      	ldrb	r0, [r1, #4]
100108e0:	79c9      	ldrb	r1, [r1, #7]
100108e2:	4303      	orrs	r3, r0
100108e4:	0609      	lsls	r1, r1, #24
100108e6:	430b      	orrs	r3, r1
100108e8:	2000      	movs	r0, #0
100108ea:	6093      	str	r3, [r2, #8]
100108ec:	4770      	bx	lr
	...

100108f0 <gapc_peer_att_info_ind_handler>:
100108f0:	b510      	push	{r4, lr}
100108f2:	0a00      	lsrs	r0, r0, #8
100108f4:	8010      	strh	r0, [r2, #0]
100108f6:	7808      	ldrb	r0, [r1, #0]
100108f8:	7090      	strb	r0, [r2, #2]
100108fa:	788b      	ldrb	r3, [r1, #2]
100108fc:	784c      	ldrb	r4, [r1, #1]
100108fe:	021b      	lsls	r3, r3, #8
10010900:	4323      	orrs	r3, r4
10010902:	8093      	strh	r3, [r2, #4]
10010904:	2801      	cmp	r0, #1
10010906:	d027      	beq.n	10010958 <gapc_peer_att_info_ind_handler+0x68>
10010908:	2800      	cmp	r0, #0
1001090a:	d017      	beq.n	1001093c <gapc_peer_att_info_ind_handler+0x4c>
1001090c:	2802      	cmp	r0, #2
1001090e:	d12a      	bne.n	10010966 <gapc_peer_att_info_ind_handler+0x76>
10010910:	790b      	ldrb	r3, [r1, #4]
10010912:	78c8      	ldrb	r0, [r1, #3]
10010914:	021b      	lsls	r3, r3, #8
10010916:	4303      	orrs	r3, r0
10010918:	8113      	strh	r3, [r2, #8]
1001091a:	798b      	ldrb	r3, [r1, #6]
1001091c:	7948      	ldrb	r0, [r1, #5]
1001091e:	021b      	lsls	r3, r3, #8
10010920:	4303      	orrs	r3, r0
10010922:	80d3      	strh	r3, [r2, #6]
10010924:	7a0b      	ldrb	r3, [r1, #8]
10010926:	79c8      	ldrb	r0, [r1, #7]
10010928:	021b      	lsls	r3, r3, #8
1001092a:	4303      	orrs	r3, r0
1001092c:	8193      	strh	r3, [r2, #12]
1001092e:	7a8b      	ldrb	r3, [r1, #10]
10010930:	7a49      	ldrb	r1, [r1, #9]
10010932:	021b      	lsls	r3, r3, #8
10010934:	430b      	orrs	r3, r1
10010936:	8153      	strh	r3, [r2, #10]
10010938:	2306      	movs	r3, #6
1001093a:	e013      	b.n	10010964 <gapc_peer_att_info_ind_handler+0x74>
1001093c:	1c14      	adds	r4, r2, #0
1001093e:	1c20      	adds	r0, r4, #0
10010940:	790a      	ldrb	r2, [r1, #4]
10010942:	78cb      	ldrb	r3, [r1, #3]
10010944:	0212      	lsls	r2, r2, #8
10010946:	431a      	orrs	r2, r3
10010948:	80e2      	strh	r2, [r4, #6]
1001094a:	4b07      	ldr	r3, [pc, #28]	; (10010968 <gapc_peer_att_info_ind_handler+0x78>)
1001094c:	3008      	adds	r0, #8
1001094e:	3105      	adds	r1, #5
10010950:	4798      	blx	r3
10010952:	2302      	movs	r3, #2
10010954:	70a3      	strb	r3, [r4, #2]
10010956:	e006      	b.n	10010966 <gapc_peer_att_info_ind_handler+0x76>
10010958:	790b      	ldrb	r3, [r1, #4]
1001095a:	78c9      	ldrb	r1, [r1, #3]
1001095c:	021b      	lsls	r3, r3, #8
1001095e:	430b      	orrs	r3, r1
10010960:	80d3      	strh	r3, [r2, #6]
10010962:	2305      	movs	r3, #5
10010964:	7093      	strb	r3, [r2, #2]
10010966:	bd10      	pop	{r4, pc}
10010968:	1001571b 	.word	0x1001571b

1001096c <gapc_con_channel_map_ind_handler>:
1001096c:	b508      	push	{r3, lr}
1001096e:	2300      	movs	r3, #0
10010970:	0a00      	lsrs	r0, r0, #8
10010972:	7013      	strb	r3, [r2, #0]
10010974:	8050      	strh	r0, [r2, #2]
10010976:	4b02      	ldr	r3, [pc, #8]	; (10010980 <gapc_con_channel_map_ind_handler+0x14>)
10010978:	1d10      	adds	r0, r2, #4
1001097a:	2205      	movs	r2, #5
1001097c:	4798      	blx	r3
1001097e:	bd08      	pop	{r3, pc}
10010980:	1001571b 	.word	0x1001571b

10010984 <gapc_lecb_connected>:
10010984:	7843      	ldrb	r3, [r0, #1]
10010986:	7802      	ldrb	r2, [r0, #0]
10010988:	021b      	lsls	r3, r3, #8
1001098a:	4313      	orrs	r3, r2
1001098c:	800b      	strh	r3, [r1, #0]
1001098e:	78c3      	ldrb	r3, [r0, #3]
10010990:	7882      	ldrb	r2, [r0, #2]
10010992:	021b      	lsls	r3, r3, #8
10010994:	4313      	orrs	r3, r2
10010996:	804b      	strh	r3, [r1, #2]
10010998:	7943      	ldrb	r3, [r0, #5]
1001099a:	7902      	ldrb	r2, [r0, #4]
1001099c:	021b      	lsls	r3, r3, #8
1001099e:	4313      	orrs	r3, r2
100109a0:	808b      	strh	r3, [r1, #4]
100109a2:	79c3      	ldrb	r3, [r0, #7]
100109a4:	7982      	ldrb	r2, [r0, #6]
100109a6:	021b      	lsls	r3, r3, #8
100109a8:	4313      	orrs	r3, r2
100109aa:	80cb      	strh	r3, [r1, #6]
100109ac:	2300      	movs	r3, #0
100109ae:	720b      	strb	r3, [r1, #8]
100109b0:	4770      	bx	lr

100109b2 <gapc_lecb_disconnected>:
100109b2:	7843      	ldrb	r3, [r0, #1]
100109b4:	7802      	ldrb	r2, [r0, #0]
100109b6:	021b      	lsls	r3, r3, #8
100109b8:	4313      	orrs	r3, r2
100109ba:	800b      	strh	r3, [r1, #0]
100109bc:	78c3      	ldrb	r3, [r0, #3]
100109be:	7882      	ldrb	r2, [r0, #2]
100109c0:	021b      	lsls	r3, r3, #8
100109c2:	4313      	orrs	r3, r2
100109c4:	804b      	strh	r3, [r1, #2]
100109c6:	4770      	bx	lr

100109c8 <gapc_lecb_connect_req_ind>:
100109c8:	7843      	ldrb	r3, [r0, #1]
100109ca:	7802      	ldrb	r2, [r0, #0]
100109cc:	021b      	lsls	r3, r3, #8
100109ce:	4313      	orrs	r3, r2
100109d0:	800b      	strh	r3, [r1, #0]
100109d2:	78c3      	ldrb	r3, [r0, #3]
100109d4:	7882      	ldrb	r2, [r0, #2]
100109d6:	021b      	lsls	r3, r3, #8
100109d8:	4313      	orrs	r3, r2
100109da:	804b      	strh	r3, [r1, #2]
100109dc:	7943      	ldrb	r3, [r0, #5]
100109de:	7902      	ldrb	r2, [r0, #4]
100109e0:	021b      	lsls	r3, r3, #8
100109e2:	4313      	orrs	r3, r2
100109e4:	808b      	strh	r3, [r1, #4]
100109e6:	79c3      	ldrb	r3, [r0, #7]
100109e8:	7982      	ldrb	r2, [r0, #6]
100109ea:	021b      	lsls	r3, r3, #8
100109ec:	4313      	orrs	r3, r2
100109ee:	80cb      	strh	r3, [r1, #6]
100109f0:	4770      	bx	lr

100109f2 <gapc_lecb_add_credit_resp_handler>:
100109f2:	7843      	ldrb	r3, [r0, #1]
100109f4:	7802      	ldrb	r2, [r0, #0]
100109f6:	021b      	lsls	r3, r3, #8
100109f8:	4313      	orrs	r3, r2
100109fa:	800b      	strh	r3, [r1, #0]
100109fc:	78c3      	ldrb	r3, [r0, #3]
100109fe:	7882      	ldrb	r2, [r0, #2]
10010a00:	021b      	lsls	r3, r3, #8
10010a02:	4313      	orrs	r3, r2
10010a04:	804b      	strh	r3, [r1, #2]
10010a06:	7943      	ldrb	r3, [r0, #5]
10010a08:	7902      	ldrb	r2, [r0, #4]
10010a0a:	021b      	lsls	r3, r3, #8
10010a0c:	4313      	orrs	r3, r2
10010a0e:	808b      	strh	r3, [r1, #4]
10010a10:	4770      	bx	lr
	...

10010a14 <gapm_reset_req_handler>:
10010a14:	b573      	push	{r0, r1, r4, r5, r6, lr}
10010a16:	466b      	mov	r3, sp
10010a18:	4915      	ldr	r1, [pc, #84]	; (10010a70 <gapm_reset_req_handler+0x5c>)
10010a1a:	4816      	ldr	r0, [pc, #88]	; (10010a74 <gapm_reset_req_handler+0x60>)
10010a1c:	880c      	ldrh	r4, [r1, #0]
10010a1e:	8809      	ldrh	r1, [r1, #0]
10010a20:	1ddd      	adds	r5, r3, #7
10010a22:	0a09      	lsrs	r1, r1, #8
10010a24:	2300      	movs	r3, #0
10010a26:	2202      	movs	r2, #2
10010a28:	7141      	strb	r1, [r0, #5]
10010a2a:	26d0      	movs	r6, #208	; 0xd0
10010a2c:	2101      	movs	r1, #1
10010a2e:	7104      	strb	r4, [r0, #4]
10010a30:	4c11      	ldr	r4, [pc, #68]	; (10010a78 <gapm_reset_req_handler+0x64>)
10010a32:	702b      	strb	r3, [r5, #0]
10010a34:	7002      	strb	r2, [r0, #0]
10010a36:	70c3      	strb	r3, [r0, #3]
10010a38:	320b      	adds	r2, #11
10010a3a:	7201      	strb	r1, [r0, #8]
10010a3c:	7181      	strb	r1, [r0, #6]
10010a3e:	71c3      	strb	r3, [r0, #7]
10010a40:	3108      	adds	r1, #8
10010a42:	4b0e      	ldr	r3, [pc, #56]	; (10010a7c <gapm_reset_req_handler+0x68>)
10010a44:	0136      	lsls	r6, r6, #4
10010a46:	7042      	strb	r2, [r0, #1]
10010a48:	7082      	strb	r2, [r0, #2]
10010a4a:	80a2      	strh	r2, [r4, #4]
10010a4c:	8026      	strh	r6, [r4, #0]
10010a4e:	4798      	blx	r3
10010a50:	1c28      	adds	r0, r5, #0
10010a52:	4b0b      	ldr	r3, [pc, #44]	; (10010a80 <gapm_reset_req_handler+0x6c>)
10010a54:	4798      	blx	r3
10010a56:	782b      	ldrb	r3, [r5, #0]
10010a58:	20e2      	movs	r0, #226	; 0xe2
10010a5a:	2b00      	cmp	r3, #0
10010a5c:	d106      	bne.n	10010a6c <gapm_reset_req_handler+0x58>
10010a5e:	68a3      	ldr	r3, [r4, #8]
10010a60:	20e2      	movs	r0, #226	; 0xe2
10010a62:	781a      	ldrb	r2, [r3, #0]
10010a64:	785b      	ldrb	r3, [r3, #1]
10010a66:	2a01      	cmp	r2, #1
10010a68:	d100      	bne.n	10010a6c <gapm_reset_req_handler+0x58>
10010a6a:	1c18      	adds	r0, r3, #0
10010a6c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
10010a6e:	46c0      	nop			; (mov r8, r8)
10010a70:	1001adf0 	.word	0x1001adf0
10010a74:	1001b160 	.word	0x1001b160
10010a78:	1001ade4 	.word	0x1001ade4
10010a7c:	1000fe3d 	.word	0x1000fe3d
10010a80:	1000fea1 	.word	0x1000fea1

10010a84 <gapm_set_dev_config_cmd_handler>:
10010a84:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a86:	b089      	sub	sp, #36	; 0x24
10010a88:	9303      	str	r3, [sp, #12]
10010a8a:	ab0e      	add	r3, sp, #56	; 0x38
10010a8c:	781b      	ldrb	r3, [r3, #0]
10010a8e:	4c37      	ldr	r4, [pc, #220]	; (10010b6c <gapm_set_dev_config_cmd_handler+0xe8>)
10010a90:	9304      	str	r3, [sp, #16]
10010a92:	ab0f      	add	r3, sp, #60	; 0x3c
10010a94:	781b      	ldrb	r3, [r3, #0]
10010a96:	270d      	movs	r7, #13
10010a98:	9305      	str	r3, [sp, #20]
10010a9a:	ab10      	add	r3, sp, #64	; 0x40
10010a9c:	881b      	ldrh	r3, [r3, #0]
10010a9e:	72a1      	strb	r1, [r4, #10]
10010aa0:	9300      	str	r3, [sp, #0]
10010aa2:	ab11      	add	r3, sp, #68	; 0x44
10010aa4:	881b      	ldrh	r3, [r3, #0]
10010aa6:	0a09      	lsrs	r1, r1, #8
10010aa8:	9301      	str	r3, [sp, #4]
10010aaa:	ab12      	add	r3, sp, #72	; 0x48
10010aac:	881b      	ldrh	r3, [r3, #0]
10010aae:	7260      	strb	r0, [r4, #9]
10010ab0:	9302      	str	r3, [sp, #8]
10010ab2:	ab06      	add	r3, sp, #24
10010ab4:	1dde      	adds	r6, r3, #7
10010ab6:	2300      	movs	r3, #0
10010ab8:	7033      	strb	r3, [r6, #0]
10010aba:	2304      	movs	r3, #4
10010abc:	7023      	strb	r3, [r4, #0]
10010abe:	2300      	movs	r3, #0
10010ac0:	70e3      	strb	r3, [r4, #3]
10010ac2:	4b2b      	ldr	r3, [pc, #172]	; (10010b70 <gapm_set_dev_config_cmd_handler+0xec>)
10010ac4:	72e1      	strb	r1, [r4, #11]
10010ac6:	881d      	ldrh	r5, [r3, #0]
10010ac8:	881b      	ldrh	r3, [r3, #0]
10010aca:	1c11      	adds	r1, r2, #0
10010acc:	0a1b      	lsrs	r3, r3, #8
10010ace:	7163      	strb	r3, [r4, #5]
10010ad0:	2303      	movs	r3, #3
10010ad2:	7125      	strb	r5, [r4, #4]
10010ad4:	2206      	movs	r2, #6
10010ad6:	4d27      	ldr	r5, [pc, #156]	; (10010b74 <gapm_set_dev_config_cmd_handler+0xf0>)
10010ad8:	4827      	ldr	r0, [pc, #156]	; (10010b78 <gapm_set_dev_config_cmd_handler+0xf4>)
10010ada:	7223      	strb	r3, [r4, #8]
10010adc:	7067      	strb	r7, [r4, #1]
10010ade:	70a7      	strb	r7, [r4, #2]
10010ae0:	47a8      	blx	r5
10010ae2:	9903      	ldr	r1, [sp, #12]
10010ae4:	2210      	movs	r2, #16
10010ae6:	4825      	ldr	r0, [pc, #148]	; (10010b7c <gapm_set_dev_config_cmd_handler+0xf8>)
10010ae8:	47a8      	blx	r5
10010aea:	466a      	mov	r2, sp
10010aec:	7c12      	ldrb	r2, [r2, #16]
10010aee:	1ce3      	adds	r3, r4, #3
10010af0:	77da      	strb	r2, [r3, #31]
10010af2:	466a      	mov	r2, sp
10010af4:	7d12      	ldrb	r2, [r2, #20]
10010af6:	1d23      	adds	r3, r4, #4
10010af8:	77da      	strb	r2, [r3, #31]
10010afa:	466a      	mov	r2, sp
10010afc:	7812      	ldrb	r2, [r2, #0]
10010afe:	1d63      	adds	r3, r4, #5
10010b00:	77da      	strb	r2, [r3, #31]
10010b02:	9b00      	ldr	r3, [sp, #0]
10010b04:	1da2      	adds	r2, r4, #6
10010b06:	0a1b      	lsrs	r3, r3, #8
10010b08:	77d3      	strb	r3, [r2, #31]
10010b0a:	466a      	mov	r2, sp
10010b0c:	7912      	ldrb	r2, [r2, #4]
10010b0e:	1de3      	adds	r3, r4, #7
10010b10:	77da      	strb	r2, [r3, #31]
10010b12:	1c22      	adds	r2, r4, #0
10010b14:	9b01      	ldr	r3, [sp, #4]
10010b16:	3208      	adds	r2, #8
10010b18:	0a1b      	lsrs	r3, r3, #8
10010b1a:	77d3      	strb	r3, [r2, #31]
10010b1c:	466a      	mov	r2, sp
10010b1e:	1c23      	adds	r3, r4, #0
10010b20:	7a12      	ldrb	r2, [r2, #8]
10010b22:	3328      	adds	r3, #40	; 0x28
10010b24:	701a      	strb	r2, [r3, #0]
10010b26:	1c22      	adds	r2, r4, #0
10010b28:	9b02      	ldr	r3, [sp, #8]
10010b2a:	3229      	adds	r2, #41	; 0x29
10010b2c:	0a1b      	lsrs	r3, r3, #8
10010b2e:	7013      	strb	r3, [r2, #0]
10010b30:	23d0      	movs	r3, #208	; 0xd0
10010b32:	4d13      	ldr	r5, [pc, #76]	; (10010b80 <gapm_set_dev_config_cmd_handler+0xfc>)
10010b34:	011b      	lsls	r3, r3, #4
10010b36:	802b      	strh	r3, [r5, #0]
10010b38:	2322      	movs	r3, #34	; 0x22
10010b3a:	71a3      	strb	r3, [r4, #6]
10010b3c:	2300      	movs	r3, #0
10010b3e:	212a      	movs	r1, #42	; 0x2a
10010b40:	71e3      	strb	r3, [r4, #7]
10010b42:	1c20      	adds	r0, r4, #0
10010b44:	4b0f      	ldr	r3, [pc, #60]	; (10010b84 <gapm_set_dev_config_cmd_handler+0x100>)
10010b46:	80af      	strh	r7, [r5, #4]
10010b48:	4798      	blx	r3
10010b4a:	1c30      	adds	r0, r6, #0
10010b4c:	4b0e      	ldr	r3, [pc, #56]	; (10010b88 <gapm_set_dev_config_cmd_handler+0x104>)
10010b4e:	4798      	blx	r3
10010b50:	7833      	ldrb	r3, [r6, #0]
10010b52:	20e2      	movs	r0, #226	; 0xe2
10010b54:	2b00      	cmp	r3, #0
10010b56:	d106      	bne.n	10010b66 <gapm_set_dev_config_cmd_handler+0xe2>
10010b58:	68ab      	ldr	r3, [r5, #8]
10010b5a:	20e2      	movs	r0, #226	; 0xe2
10010b5c:	781a      	ldrb	r2, [r3, #0]
10010b5e:	785b      	ldrb	r3, [r3, #1]
10010b60:	2a03      	cmp	r2, #3
10010b62:	d100      	bne.n	10010b66 <gapm_set_dev_config_cmd_handler+0xe2>
10010b64:	1c18      	adds	r0, r3, #0
10010b66:	b009      	add	sp, #36	; 0x24
10010b68:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010b6a:	46c0      	nop			; (mov r8, r8)
10010b6c:	1001b160 	.word	0x1001b160
10010b70:	1001adf0 	.word	0x1001adf0
10010b74:	1001571b 	.word	0x1001571b
10010b78:	1001b16c 	.word	0x1001b16c
10010b7c:	1001b172 	.word	0x1001b172
10010b80:	1001ade4 	.word	0x1001ade4
10010b84:	1000fe3d 	.word	0x1000fe3d
10010b88:	1000fea1 	.word	0x1000fea1

10010b8c <gapm_get_dev_config_cmd_handler>:
10010b8c:	4684      	mov	ip, r0
10010b8e:	4663      	mov	r3, ip
10010b90:	b5f0      	push	{r4, r5, r6, r7, lr}
10010b92:	b085      	sub	sp, #20
10010b94:	9100      	str	r1, [sp, #0]
10010b96:	20cf      	movs	r0, #207	; 0xcf
10010b98:	2b01      	cmp	r3, #1
10010b9a:	d854      	bhi.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010b9c:	2900      	cmp	r1, #0
10010b9e:	d052      	beq.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010ba0:	2200      	movs	r2, #0
10010ba2:	492a      	ldr	r1, [pc, #168]	; (10010c4c <gapm_get_dev_config_cmd_handler+0xc0>)
10010ba4:	ab02      	add	r3, sp, #8
10010ba6:	880c      	ldrh	r4, [r1, #0]
10010ba8:	8809      	ldrh	r1, [r1, #0]
10010baa:	1d9f      	adds	r7, r3, #6
10010bac:	719a      	strb	r2, [r3, #6]
10010bae:	4b28      	ldr	r3, [pc, #160]	; (10010c50 <gapm_get_dev_config_cmd_handler+0xc4>)
10010bb0:	0a09      	lsrs	r1, r1, #8
10010bb2:	250d      	movs	r5, #13
10010bb4:	2606      	movs	r6, #6
10010bb6:	7159      	strb	r1, [r3, #5]
10010bb8:	4661      	mov	r1, ip
10010bba:	701e      	strb	r6, [r3, #0]
10010bbc:	705d      	strb	r5, [r3, #1]
10010bbe:	709d      	strb	r5, [r3, #2]
10010bc0:	70da      	strb	r2, [r3, #3]
10010bc2:	711c      	strb	r4, [r3, #4]
10010bc4:	2901      	cmp	r1, #1
10010bc6:	d13e      	bne.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010bc8:	21d0      	movs	r1, #208	; 0xd0
10010bca:	4c22      	ldr	r4, [pc, #136]	; (10010c54 <gapm_get_dev_config_cmd_handler+0xc8>)
10010bcc:	0109      	lsls	r1, r1, #4
10010bce:	8061      	strh	r1, [r4, #2]
10010bd0:	4921      	ldr	r1, [pc, #132]	; (10010c58 <gapm_get_dev_config_cmd_handler+0xcc>)
10010bd2:	71da      	strb	r2, [r3, #7]
10010bd4:	8021      	strh	r1, [r4, #0]
10010bd6:	4661      	mov	r1, ip
10010bd8:	721e      	strb	r6, [r3, #8]
10010bda:	7199      	strb	r1, [r3, #6]
10010bdc:	1c18      	adds	r0, r3, #0
10010bde:	2109      	movs	r1, #9
10010be0:	4b1e      	ldr	r3, [pc, #120]	; (10010c5c <gapm_get_dev_config_cmd_handler+0xd0>)
10010be2:	80a5      	strh	r5, [r4, #4]
10010be4:	4798      	blx	r3
10010be6:	1c38      	adds	r0, r7, #0
10010be8:	4b1d      	ldr	r3, [pc, #116]	; (10010c60 <gapm_get_dev_config_cmd_handler+0xd4>)
10010bea:	4798      	blx	r3
10010bec:	783b      	ldrb	r3, [r7, #0]
10010bee:	20e2      	movs	r0, #226	; 0xe2
10010bf0:	9301      	str	r3, [sp, #4]
10010bf2:	2b00      	cmp	r3, #0
10010bf4:	d127      	bne.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010bf6:	8821      	ldrh	r1, [r4, #0]
10010bf8:	4a1a      	ldr	r2, [pc, #104]	; (10010c64 <gapm_get_dev_config_cmd_handler+0xd8>)
10010bfa:	68a7      	ldr	r7, [r4, #8]
10010bfc:	3b01      	subs	r3, #1
10010bfe:	4291      	cmp	r1, r2
10010c00:	d001      	beq.n	10010c06 <gapm_get_dev_config_cmd_handler+0x7a>
10010c02:	8023      	strh	r3, [r4, #0]
10010c04:	e01a      	b.n	10010c3c <gapm_get_dev_config_cmd_handler+0xb0>
10010c06:	8063      	strh	r3, [r4, #2]
10010c08:	9b00      	ldr	r3, [sp, #0]
10010c0a:	1c39      	adds	r1, r7, #0
10010c0c:	1c58      	adds	r0, r3, #1
10010c0e:	1c32      	adds	r2, r6, #0
10010c10:	4b15      	ldr	r3, [pc, #84]	; (10010c68 <gapm_get_dev_config_cmd_handler+0xdc>)
10010c12:	4798      	blx	r3
10010c14:	79bb      	ldrb	r3, [r7, #6]
10010c16:	9a00      	ldr	r2, [sp, #0]
10010c18:	7013      	strb	r3, [r2, #0]
10010c1a:	23d0      	movs	r3, #208	; 0xd0
10010c1c:	011b      	lsls	r3, r3, #4
10010c1e:	8023      	strh	r3, [r4, #0]
10010c20:	ab02      	add	r3, sp, #8
10010c22:	80a5      	strh	r5, [r4, #4]
10010c24:	1ddd      	adds	r5, r3, #7
10010c26:	466b      	mov	r3, sp
10010c28:	791b      	ldrb	r3, [r3, #4]
10010c2a:	1c28      	adds	r0, r5, #0
10010c2c:	702b      	strb	r3, [r5, #0]
10010c2e:	4b0c      	ldr	r3, [pc, #48]	; (10010c60 <gapm_get_dev_config_cmd_handler+0xd4>)
10010c30:	4798      	blx	r3
10010c32:	782b      	ldrb	r3, [r5, #0]
10010c34:	20d0      	movs	r0, #208	; 0xd0
10010c36:	2b00      	cmp	r3, #0
10010c38:	d105      	bne.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010c3a:	68a7      	ldr	r7, [r4, #8]
10010c3c:	783b      	ldrb	r3, [r7, #0]
10010c3e:	7878      	ldrb	r0, [r7, #1]
10010c40:	2b06      	cmp	r3, #6
10010c42:	d000      	beq.n	10010c46 <gapm_get_dev_config_cmd_handler+0xba>
10010c44:	20e2      	movs	r0, #226	; 0xe2
10010c46:	b005      	add	sp, #20
10010c48:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010c4a:	46c0      	nop			; (mov r8, r8)
10010c4c:	1001adf0 	.word	0x1001adf0
10010c50:	1001b160 	.word	0x1001b160
10010c54:	1001ade4 	.word	0x1001ade4
10010c58:	00000d08 	.word	0x00000d08
10010c5c:	1000fe3d 	.word	0x1000fe3d
10010c60:	1000fea1 	.word	0x1000fea1
10010c64:	0000ffff 	.word	0x0000ffff
10010c68:	1001571b 	.word	0x1001571b

10010c6c <gapm_cancel_cmd_handler>:
10010c6c:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010c6e:	4916      	ldr	r1, [pc, #88]	; (10010cc8 <gapm_cancel_cmd_handler+0x5c>)
10010c70:	4816      	ldr	r0, [pc, #88]	; (10010ccc <gapm_cancel_cmd_handler+0x60>)
10010c72:	880c      	ldrh	r4, [r1, #0]
10010c74:	8809      	ldrh	r1, [r1, #0]
10010c76:	466b      	mov	r3, sp
10010c78:	0a09      	lsrs	r1, r1, #8
10010c7a:	7141      	strb	r1, [r0, #5]
10010c7c:	2102      	movs	r1, #2
10010c7e:	2203      	movs	r2, #3
10010c80:	7201      	strb	r1, [r0, #8]
10010c82:	21d0      	movs	r1, #208	; 0xd0
10010c84:	1ddd      	adds	r5, r3, #7
10010c86:	2300      	movs	r3, #0
10010c88:	7104      	strb	r4, [r0, #4]
10010c8a:	4c11      	ldr	r4, [pc, #68]	; (10010cd0 <gapm_cancel_cmd_handler+0x64>)
10010c8c:	7002      	strb	r2, [r0, #0]
10010c8e:	0109      	lsls	r1, r1, #4
10010c90:	320a      	adds	r2, #10
10010c92:	702b      	strb	r3, [r5, #0]
10010c94:	7042      	strb	r2, [r0, #1]
10010c96:	7082      	strb	r2, [r0, #2]
10010c98:	70c3      	strb	r3, [r0, #3]
10010c9a:	8021      	strh	r1, [r4, #0]
10010c9c:	80a2      	strh	r2, [r4, #4]
10010c9e:	71c3      	strb	r3, [r0, #7]
10010ca0:	3a0c      	subs	r2, #12
10010ca2:	2109      	movs	r1, #9
10010ca4:	4b0b      	ldr	r3, [pc, #44]	; (10010cd4 <gapm_cancel_cmd_handler+0x68>)
10010ca6:	7182      	strb	r2, [r0, #6]
10010ca8:	4798      	blx	r3
10010caa:	1c28      	adds	r0, r5, #0
10010cac:	4b0a      	ldr	r3, [pc, #40]	; (10010cd8 <gapm_cancel_cmd_handler+0x6c>)
10010cae:	4798      	blx	r3
10010cb0:	7828      	ldrb	r0, [r5, #0]
10010cb2:	2800      	cmp	r0, #0
10010cb4:	d001      	beq.n	10010cba <gapm_cancel_cmd_handler+0x4e>
10010cb6:	20e2      	movs	r0, #226	; 0xe2
10010cb8:	e004      	b.n	10010cc4 <gapm_cancel_cmd_handler+0x58>
10010cba:	68a3      	ldr	r3, [r4, #8]
10010cbc:	785b      	ldrb	r3, [r3, #1]
10010cbe:	2b44      	cmp	r3, #68	; 0x44
10010cc0:	d000      	beq.n	10010cc4 <gapm_cancel_cmd_handler+0x58>
10010cc2:	1c18      	adds	r0, r3, #0
10010cc4:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010cc6:	46c0      	nop			; (mov r8, r8)
10010cc8:	1001adf0 	.word	0x1001adf0
10010ccc:	1001b160 	.word	0x1001b160
10010cd0:	1001ade4 	.word	0x1001ade4
10010cd4:	1000fe3d 	.word	0x1000fe3d
10010cd8:	1000fea1 	.word	0x1000fea1

10010cdc <gapm_dev_bdaddr_ind_handler>:
10010cdc:	b538      	push	{r3, r4, r5, lr}
10010cde:	1c05      	adds	r5, r0, #0
10010ce0:	1c0c      	adds	r4, r1, #0
10010ce2:	1c48      	adds	r0, r1, #1
10010ce4:	2206      	movs	r2, #6
10010ce6:	1c29      	adds	r1, r5, #0
10010ce8:	4b02      	ldr	r3, [pc, #8]	; (10010cf4 <gapm_dev_bdaddr_ind_handler+0x18>)
10010cea:	4798      	blx	r3
10010cec:	79ab      	ldrb	r3, [r5, #6]
10010cee:	2000      	movs	r0, #0
10010cf0:	7023      	strb	r3, [r4, #0]
10010cf2:	bd38      	pop	{r3, r4, r5, pc}
10010cf4:	1001571b 	.word	0x1001571b

10010cf8 <gapm_cmp_evt>:
10010cf8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010cfa:	7803      	ldrb	r3, [r0, #0]
10010cfc:	7845      	ldrb	r5, [r0, #1]
10010cfe:	3b0c      	subs	r3, #12
10010d00:	1e18      	subs	r0, r3, #0
10010d02:	280b      	cmp	r0, #11
10010d04:	d900      	bls.n	10010d08 <gapm_cmp_evt+0x10>
10010d06:	e08d      	b.n	10010e24 <gapm_cmp_evt+0x12c>
10010d08:	1c0c      	adds	r4, r1, #0
10010d0a:	f001 fe6f 	bl	100129ec <__gnu_thumb1_case_uqi>
10010d0e:	1952      	.short	0x1952
10010d10:	068b1919 	.word	0x068b1919
10010d14:	8b595906 	.word	0x8b595906
10010d18:	0d8b      	.short	0x0d8b
10010d1a:	2300      	movs	r3, #0
10010d1c:	2d45      	cmp	r5, #69	; 0x45
10010d1e:	d000      	beq.n	10010d22 <gapm_cmp_evt+0x2a>
10010d20:	1c2b      	adds	r3, r5, #0
10010d22:	7023      	strb	r3, [r4, #0]
10010d24:	2002      	movs	r0, #2
10010d26:	e07e      	b.n	10010e26 <gapm_cmp_evt+0x12e>
10010d28:	203b      	movs	r0, #59	; 0x3b
10010d2a:	2d00      	cmp	r5, #0
10010d2c:	d100      	bne.n	10010d30 <gapm_cmp_evt+0x38>
10010d2e:	e07a      	b.n	10010e26 <gapm_cmp_evt+0x12e>
10010d30:	700d      	strb	r5, [r1, #0]
10010d32:	1c48      	adds	r0, r1, #1
10010d34:	2210      	movs	r2, #16
10010d36:	2100      	movs	r1, #0
10010d38:	4b3b      	ldr	r3, [pc, #236]	; (10010e28 <gapm_cmp_evt+0x130>)
10010d3a:	4798      	blx	r3
10010d3c:	200f      	movs	r0, #15
10010d3e:	e072      	b.n	10010e26 <gapm_cmp_evt+0x12e>
10010d40:	2d00      	cmp	r5, #0
10010d42:	d134      	bne.n	10010dae <gapm_cmp_evt+0xb6>
10010d44:	4b39      	ldr	r3, [pc, #228]	; (10010e2c <gapm_cmp_evt+0x134>)
10010d46:	4798      	blx	r3
10010d48:	1e43      	subs	r3, r0, #1
10010d4a:	b2db      	uxtb	r3, r3
10010d4c:	1c28      	adds	r0, r5, #0
10010d4e:	2b06      	cmp	r3, #6
10010d50:	d869      	bhi.n	10010e26 <gapm_cmp_evt+0x12e>
10010d52:	466b      	mov	r3, sp
10010d54:	4e36      	ldr	r6, [pc, #216]	; (10010e30 <gapm_cmp_evt+0x138>)
10010d56:	1dd9      	adds	r1, r3, #7
10010d58:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010d5a:	4b36      	ldr	r3, [pc, #216]	; (10010e34 <gapm_cmp_evt+0x13c>)
10010d5c:	4798      	blx	r3
10010d5e:	2312      	movs	r3, #18
10010d60:	4358      	muls	r0, r3
10010d62:	4935      	ldr	r1, [pc, #212]	; (10010e38 <gapm_cmp_evt+0x140>)
10010d64:	1809      	adds	r1, r1, r0
10010d66:	1c0b      	adds	r3, r1, #0
10010d68:	894a      	ldrh	r2, [r1, #10]
10010d6a:	3308      	adds	r3, #8
10010d6c:	8122      	strh	r2, [r4, #8]
10010d6e:	784f      	ldrb	r7, [r1, #1]
10010d70:	72a5      	strb	r5, [r4, #10]
10010d72:	7027      	strb	r7, [r4, #0]
10010d74:	898a      	ldrh	r2, [r1, #12]
10010d76:	1c60      	adds	r0, r4, #1
10010d78:	81a2      	strh	r2, [r4, #12]
10010d7a:	88db      	ldrh	r3, [r3, #6]
10010d7c:	3102      	adds	r1, #2
10010d7e:	81e3      	strh	r3, [r4, #14]
10010d80:	89cb      	ldrh	r3, [r1, #14]
10010d82:	2206      	movs	r2, #6
10010d84:	8223      	strh	r3, [r4, #16]
10010d86:	4b2d      	ldr	r3, [pc, #180]	; (10010e3c <gapm_cmp_evt+0x144>)
10010d88:	4798      	blx	r3
10010d8a:	2f00      	cmp	r7, #0
10010d8c:	d00a      	beq.n	10010da4 <gapm_cmp_evt+0xac>
10010d8e:	79a3      	ldrb	r3, [r4, #6]
10010d90:	223f      	movs	r2, #63	; 0x3f
10010d92:	1c19      	adds	r1, r3, #0
10010d94:	3501      	adds	r5, #1
10010d96:	4391      	bics	r1, r2
10010d98:	29c0      	cmp	r1, #192	; 0xc0
10010d9a:	d003      	beq.n	10010da4 <gapm_cmp_evt+0xac>
10010d9c:	065b      	lsls	r3, r3, #25
10010d9e:	0fdb      	lsrs	r3, r3, #31
10010da0:	3502      	adds	r5, #2
10010da2:	1aed      	subs	r5, r5, r3
10010da4:	2301      	movs	r3, #1
10010da6:	425b      	negs	r3, r3
10010da8:	7025      	strb	r5, [r4, #0]
10010daa:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010dac:	e038      	b.n	10010e20 <gapm_cmp_evt+0x128>
10010dae:	700d      	strb	r5, [r1, #0]
10010db0:	e004      	b.n	10010dbc <gapm_cmp_evt+0xc4>
10010db2:	2300      	movs	r3, #0
10010db4:	2d45      	cmp	r5, #69	; 0x45
10010db6:	d000      	beq.n	10010dba <gapm_cmp_evt+0xc2>
10010db8:	1c2b      	adds	r3, r5, #0
10010dba:	7023      	strb	r3, [r4, #0]
10010dbc:	2003      	movs	r0, #3
10010dbe:	e032      	b.n	10010e26 <gapm_cmp_evt+0x12e>
10010dc0:	4e1b      	ldr	r6, [pc, #108]	; (10010e30 <gapm_cmp_evt+0x138>)
10010dc2:	2100      	movs	r1, #0
10010dc4:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010dc6:	4b1b      	ldr	r3, [pc, #108]	; (10010e34 <gapm_cmp_evt+0x13c>)
10010dc8:	4798      	blx	r3
10010dca:	2807      	cmp	r0, #7
10010dcc:	d818      	bhi.n	10010e00 <gapm_cmp_evt+0x108>
10010dce:	2301      	movs	r3, #1
10010dd0:	425b      	negs	r3, r3
10010dd2:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010dd4:	3313      	adds	r3, #19
10010dd6:	4358      	muls	r0, r3
10010dd8:	4917      	ldr	r1, [pc, #92]	; (10010e38 <gapm_cmp_evt+0x140>)
10010dda:	1809      	adds	r1, r1, r0
10010ddc:	1c0b      	adds	r3, r1, #0
10010dde:	894a      	ldrh	r2, [r1, #10]
10010de0:	3308      	adds	r3, #8
10010de2:	8122      	strh	r2, [r4, #8]
10010de4:	784a      	ldrb	r2, [r1, #1]
10010de6:	72a5      	strb	r5, [r4, #10]
10010de8:	7022      	strb	r2, [r4, #0]
10010dea:	898a      	ldrh	r2, [r1, #12]
10010dec:	1c60      	adds	r0, r4, #1
10010dee:	81a2      	strh	r2, [r4, #12]
10010df0:	88db      	ldrh	r3, [r3, #6]
10010df2:	3102      	adds	r1, #2
10010df4:	81e3      	strh	r3, [r4, #14]
10010df6:	89cb      	ldrh	r3, [r1, #14]
10010df8:	2206      	movs	r2, #6
10010dfa:	8223      	strh	r3, [r4, #16]
10010dfc:	4b0f      	ldr	r3, [pc, #60]	; (10010e3c <gapm_cmp_evt+0x144>)
10010dfe:	4798      	blx	r3
10010e00:	2200      	movs	r2, #0
10010e02:	7823      	ldrb	r3, [r4, #0]
10010e04:	4293      	cmp	r3, r2
10010e06:	d00a      	beq.n	10010e1e <gapm_cmp_evt+0x126>
10010e08:	79a3      	ldrb	r3, [r4, #6]
10010e0a:	323f      	adds	r2, #63	; 0x3f
10010e0c:	1c19      	adds	r1, r3, #0
10010e0e:	4391      	bics	r1, r2
10010e10:	3a3e      	subs	r2, #62	; 0x3e
10010e12:	29c0      	cmp	r1, #192	; 0xc0
10010e14:	d003      	beq.n	10010e1e <gapm_cmp_evt+0x126>
10010e16:	065b      	lsls	r3, r3, #25
10010e18:	0fdb      	lsrs	r3, r3, #31
10010e1a:	3202      	adds	r2, #2
10010e1c:	1ad2      	subs	r2, r2, r3
10010e1e:	7022      	strb	r2, [r4, #0]
10010e20:	2005      	movs	r0, #5
10010e22:	e000      	b.n	10010e26 <gapm_cmp_evt+0x12e>
10010e24:	2000      	movs	r0, #0
10010e26:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010e28:	1001572d 	.word	0x1001572d
10010e2c:	10010049 	.word	0x10010049
10010e30:	1001ae82 	.word	0x1001ae82
10010e34:	1001000d 	.word	0x1001000d
10010e38:	1001adf2 	.word	0x1001adf2
10010e3c:	1001571b 	.word	0x1001571b

10010e40 <gapm_start_adv_cmd_handler>:
10010e40:	b5f0      	push	{r4, r5, r6, r7, lr}
10010e42:	b089      	sub	sp, #36	; 0x24
10010e44:	9303      	str	r3, [sp, #12]
10010e46:	ab0e      	add	r3, sp, #56	; 0x38
10010e48:	9102      	str	r1, [sp, #8]
10010e4a:	cb02      	ldmia	r3!, {r1}
10010e4c:	aa08      	add	r2, sp, #32
10010e4e:	881b      	ldrh	r3, [r3, #0]
10010e50:	4e3c      	ldr	r6, [pc, #240]	; (10010f44 <gapm_start_adv_cmd_handler+0x104>)
10010e52:	9300      	str	r3, [sp, #0]
10010e54:	ab10      	add	r3, sp, #64	; 0x40
10010e56:	881b      	ldrh	r3, [r3, #0]
10010e58:	240d      	movs	r4, #13
10010e5a:	469c      	mov	ip, r3
10010e5c:	ab11      	add	r3, sp, #68	; 0x44
10010e5e:	781b      	ldrb	r3, [r3, #0]
10010e60:	9304      	str	r3, [sp, #16]
10010e62:	ab12      	add	r3, sp, #72	; 0x48
10010e64:	781b      	ldrb	r3, [r3, #0]
10010e66:	9305      	str	r3, [sp, #20]
10010e68:	ab13      	add	r3, sp, #76	; 0x4c
10010e6a:	781b      	ldrb	r3, [r3, #0]
10010e6c:	9306      	str	r3, [sp, #24]
10010e6e:	ab14      	add	r3, sp, #80	; 0x50
10010e70:	781b      	ldrb	r3, [r3, #0]
10010e72:	9301      	str	r3, [sp, #4]
10010e74:	2319      	movs	r3, #25
10010e76:	189b      	adds	r3, r3, r2
10010e78:	7fdd      	ldrb	r5, [r3, #31]
10010e7a:	ab18      	add	r3, sp, #96	; 0x60
10010e7c:	881f      	ldrh	r7, [r3, #0]
10010e7e:	ab19      	add	r3, sp, #100	; 0x64
10010e80:	781b      	ldrb	r3, [r3, #0]
10010e82:	8832      	ldrh	r2, [r6, #0]
10010e84:	9307      	str	r3, [sp, #28]
10010e86:	4b30      	ldr	r3, [pc, #192]	; (10010f48 <gapm_start_adv_cmd_handler+0x108>)
10010e88:	8836      	ldrh	r6, [r6, #0]
10010e8a:	711a      	strb	r2, [r3, #4]
10010e8c:	466a      	mov	r2, sp
10010e8e:	7a12      	ldrb	r2, [r2, #8]
10010e90:	701c      	strb	r4, [r3, #0]
10010e92:	705c      	strb	r4, [r3, #1]
10010e94:	709c      	strb	r4, [r3, #2]
10010e96:	725a      	strb	r2, [r3, #9]
10010e98:	2400      	movs	r4, #0
10010e9a:	466a      	mov	r2, sp
10010e9c:	0a36      	lsrs	r6, r6, #8
10010e9e:	70dc      	strb	r4, [r3, #3]
10010ea0:	7218      	strb	r0, [r3, #8]
10010ea2:	729c      	strb	r4, [r3, #10]
10010ea4:	715e      	strb	r6, [r3, #5]
10010ea6:	72dc      	strb	r4, [r3, #11]
10010ea8:	7812      	ldrb	r2, [r2, #0]
10010eaa:	380e      	subs	r0, #14
10010eac:	731a      	strb	r2, [r3, #12]
10010eae:	9a00      	ldr	r2, [sp, #0]
10010eb0:	0a14      	lsrs	r4, r2, #8
10010eb2:	4662      	mov	r2, ip
10010eb4:	739a      	strb	r2, [r3, #14]
10010eb6:	4662      	mov	r2, ip
10010eb8:	735c      	strb	r4, [r3, #13]
10010eba:	0a14      	lsrs	r4, r2, #8
10010ebc:	466a      	mov	r2, sp
10010ebe:	7c12      	ldrb	r2, [r2, #16]
10010ec0:	73dc      	strb	r4, [r3, #15]
10010ec2:	741a      	strb	r2, [r3, #16]
10010ec4:	1c1c      	adds	r4, r3, #0
10010ec6:	2801      	cmp	r0, #1
10010ec8:	d809      	bhi.n	10010ede <gapm_start_adv_cmd_handler+0x9e>
10010eca:	2900      	cmp	r1, #0
10010ecc:	d003      	beq.n	10010ed6 <gapm_start_adv_cmd_handler+0x96>
10010ece:	481f      	ldr	r0, [pc, #124]	; (10010f4c <gapm_start_adv_cmd_handler+0x10c>)
10010ed0:	2206      	movs	r2, #6
10010ed2:	4b1f      	ldr	r3, [pc, #124]	; (10010f50 <gapm_start_adv_cmd_handler+0x110>)
10010ed4:	4798      	blx	r3
10010ed6:	466b      	mov	r3, sp
10010ed8:	7b1b      	ldrb	r3, [r3, #12]
10010eda:	75e3      	strb	r3, [r4, #23]
10010edc:	e014      	b.n	10010f08 <gapm_start_adv_cmd_handler+0xc8>
10010ede:	466b      	mov	r3, sp
10010ee0:	7d1b      	ldrb	r3, [r3, #20]
10010ee2:	9915      	ldr	r1, [sp, #84]	; 0x54
10010ee4:	7463      	strb	r3, [r4, #17]
10010ee6:	466b      	mov	r3, sp
10010ee8:	7e1b      	ldrb	r3, [r3, #24]
10010eea:	9a01      	ldr	r2, [sp, #4]
10010eec:	74a3      	strb	r3, [r4, #18]
10010eee:	466b      	mov	r3, sp
10010ef0:	791b      	ldrb	r3, [r3, #4]
10010ef2:	4818      	ldr	r0, [pc, #96]	; (10010f54 <gapm_start_adv_cmd_handler+0x114>)
10010ef4:	4e16      	ldr	r6, [pc, #88]	; (10010f50 <gapm_start_adv_cmd_handler+0x110>)
10010ef6:	74e3      	strb	r3, [r4, #19]
10010ef8:	47b0      	blx	r6
10010efa:	1c23      	adds	r3, r4, #0
10010efc:	4816      	ldr	r0, [pc, #88]	; (10010f58 <gapm_start_adv_cmd_handler+0x118>)
10010efe:	3330      	adds	r3, #48	; 0x30
10010f00:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010f02:	1c2a      	adds	r2, r5, #0
10010f04:	701d      	strb	r5, [r3, #0]
10010f06:	47b0      	blx	r6
10010f08:	1c22      	adds	r2, r4, #0
10010f0a:	23a5      	movs	r3, #165	; 0xa5
10010f0c:	3250      	adds	r2, #80	; 0x50
10010f0e:	7013      	strb	r3, [r2, #0]
10010f10:	1c22      	adds	r2, r4, #0
10010f12:	3251      	adds	r2, #81	; 0x51
10010f14:	7013      	strb	r3, [r2, #0]
10010f16:	1c23      	adds	r3, r4, #0
10010f18:	1c22      	adds	r2, r4, #0
10010f1a:	3352      	adds	r3, #82	; 0x52
10010f1c:	701f      	strb	r7, [r3, #0]
10010f1e:	3253      	adds	r2, #83	; 0x53
10010f20:	0a3b      	lsrs	r3, r7, #8
10010f22:	7013      	strb	r3, [r2, #0]
10010f24:	466a      	mov	r2, sp
10010f26:	1c23      	adds	r3, r4, #0
10010f28:	7f12      	ldrb	r2, [r2, #28]
10010f2a:	3354      	adds	r3, #84	; 0x54
10010f2c:	701a      	strb	r2, [r3, #0]
10010f2e:	234d      	movs	r3, #77	; 0x4d
10010f30:	2500      	movs	r5, #0
10010f32:	71a3      	strb	r3, [r4, #6]
10010f34:	1c20      	adds	r0, r4, #0
10010f36:	2155      	movs	r1, #85	; 0x55
10010f38:	4b08      	ldr	r3, [pc, #32]	; (10010f5c <gapm_start_adv_cmd_handler+0x11c>)
10010f3a:	71e5      	strb	r5, [r4, #7]
10010f3c:	4798      	blx	r3
10010f3e:	1c28      	adds	r0, r5, #0
10010f40:	b009      	add	sp, #36	; 0x24
10010f42:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010f44:	1001adf0 	.word	0x1001adf0
10010f48:	1001b160 	.word	0x1001b160
10010f4c:	1001b171 	.word	0x1001b171
10010f50:	1001571b 	.word	0x1001571b
10010f54:	1001b174 	.word	0x1001b174
10010f58:	1001b191 	.word	0x1001b191
10010f5c:	1000fe3d 	.word	0x1000fe3d

10010f60 <get_gap_local_addr_type>:
10010f60:	4b04      	ldr	r3, [pc, #16]	; (10010f74 <get_gap_local_addr_type+0x14>)
10010f62:	2001      	movs	r0, #1
10010f64:	791b      	ldrb	r3, [r3, #4]
10010f66:	2b02      	cmp	r3, #2
10010f68:	d003      	beq.n	10010f72 <get_gap_local_addr_type+0x12>
10010f6a:	3b03      	subs	r3, #3
10010f6c:	4258      	negs	r0, r3
10010f6e:	4158      	adcs	r0, r3
10010f70:	0040      	lsls	r0, r0, #1
10010f72:	4770      	bx	lr
10010f74:	1001ae82 	.word	0x1001ae82

10010f78 <gapm_adv_report_evt_handler>:
10010f78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010f7a:	7843      	ldrb	r3, [r0, #1]
10010f7c:	1c05      	adds	r5, r0, #0
10010f7e:	9301      	str	r3, [sp, #4]
10010f80:	466b      	mov	r3, sp
10010f82:	1c0c      	adds	r4, r1, #0
10010f84:	791b      	ldrb	r3, [r3, #4]
10010f86:	7806      	ldrb	r6, [r0, #0]
10010f88:	2206      	movs	r2, #6
10010f8a:	704b      	strb	r3, [r1, #1]
10010f8c:	1c88      	adds	r0, r1, #2
10010f8e:	4f1b      	ldr	r7, [pc, #108]	; (10010ffc <gapm_adv_report_evt_handler+0x84>)
10010f90:	1ca9      	adds	r1, r5, #2
10010f92:	47b8      	blx	r7
10010f94:	1c20      	adds	r0, r4, #0
10010f96:	1c29      	adds	r1, r5, #0
10010f98:	7a2a      	ldrb	r2, [r5, #8]
10010f9a:	3008      	adds	r0, #8
10010f9c:	77c2      	strb	r2, [r0, #31]
10010f9e:	3109      	adds	r1, #9
10010fa0:	3528      	adds	r5, #40	; 0x28
10010fa2:	47b8      	blx	r7
10010fa4:	782b      	ldrb	r3, [r5, #0]
10010fa6:	b25a      	sxtb	r2, r3
10010fa8:	2a00      	cmp	r2, #0
10010faa:	da01      	bge.n	10010fb0 <gapm_adv_report_evt_handler+0x38>
10010fac:	3301      	adds	r3, #1
10010fae:	b2db      	uxtb	r3, r3
10010fb0:	1c22      	adds	r2, r4, #0
10010fb2:	3228      	adds	r2, #40	; 0x28
10010fb4:	7013      	strb	r3, [r2, #0]
10010fb6:	2200      	movs	r2, #0
10010fb8:	9b01      	ldr	r3, [sp, #4]
10010fba:	4293      	cmp	r3, r2
10010fbc:	d00a      	beq.n	10010fd4 <gapm_adv_report_evt_handler+0x5c>
10010fbe:	79e3      	ldrb	r3, [r4, #7]
10010fc0:	323f      	adds	r2, #63	; 0x3f
10010fc2:	1c19      	adds	r1, r3, #0
10010fc4:	4391      	bics	r1, r2
10010fc6:	3a3e      	subs	r2, #62	; 0x3e
10010fc8:	29c0      	cmp	r1, #192	; 0xc0
10010fca:	d003      	beq.n	10010fd4 <gapm_adv_report_evt_handler+0x5c>
10010fcc:	065b      	lsls	r3, r3, #25
10010fce:	0fdb      	lsrs	r3, r3, #31
10010fd0:	3202      	adds	r2, #2
10010fd2:	1ad2      	subs	r2, r2, r3
10010fd4:	7062      	strb	r2, [r4, #1]
10010fd6:	2e04      	cmp	r6, #4
10010fd8:	d80f      	bhi.n	10010ffa <gapm_adv_report_evt_handler+0x82>
10010fda:	1c30      	adds	r0, r6, #0
10010fdc:	f001 fd06 	bl	100129ec <__gnu_thumb1_case_uqi>
10010fe0:	09070503 	.word	0x09070503
10010fe4:	0b          	.byte	0x0b
10010fe5:	00          	.byte	0x00
10010fe6:	2300      	movs	r3, #0
10010fe8:	e006      	b.n	10010ff8 <gapm_adv_report_evt_handler+0x80>
10010fea:	2301      	movs	r3, #1
10010fec:	e004      	b.n	10010ff8 <gapm_adv_report_evt_handler+0x80>
10010fee:	2302      	movs	r3, #2
10010ff0:	e002      	b.n	10010ff8 <gapm_adv_report_evt_handler+0x80>
10010ff2:	2303      	movs	r3, #3
10010ff4:	e000      	b.n	10010ff8 <gapm_adv_report_evt_handler+0x80>
10010ff6:	2305      	movs	r3, #5
10010ff8:	7023      	strb	r3, [r4, #0]
10010ffa:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010ffc:	1001571b 	.word	0x1001571b

10011000 <gapm_resolv_addr_cmd_handler>:
10011000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10011002:	2314      	movs	r3, #20
10011004:	4c12      	ldr	r4, [pc, #72]	; (10011050 <gapm_resolv_addr_cmd_handler+0x50>)
10011006:	1c17      	adds	r7, r2, #0
10011008:	7023      	strb	r3, [r4, #0]
1001100a:	3b07      	subs	r3, #7
1001100c:	7063      	strb	r3, [r4, #1]
1001100e:	70a3      	strb	r3, [r4, #2]
10011010:	2300      	movs	r3, #0
10011012:	70e3      	strb	r3, [r4, #3]
10011014:	4b0f      	ldr	r3, [pc, #60]	; (10011054 <gapm_resolv_addr_cmd_handler+0x54>)
10011016:	1c05      	adds	r5, r0, #0
10011018:	881a      	ldrh	r2, [r3, #0]
1001101a:	881b      	ldrh	r3, [r3, #0]
1001101c:	4e0e      	ldr	r6, [pc, #56]	; (10011058 <gapm_resolv_addr_cmd_handler+0x58>)
1001101e:	0a1b      	lsrs	r3, r3, #8
10011020:	7163      	strb	r3, [r4, #5]
10011022:	2317      	movs	r3, #23
10011024:	012d      	lsls	r5, r5, #4
10011026:	7122      	strb	r2, [r4, #4]
10011028:	7260      	strb	r0, [r4, #9]
1001102a:	2206      	movs	r2, #6
1001102c:	480b      	ldr	r0, [pc, #44]	; (1001105c <gapm_resolv_addr_cmd_handler+0x5c>)
1001102e:	7223      	strb	r3, [r4, #8]
10011030:	47b0      	blx	r6
10011032:	1c39      	adds	r1, r7, #0
10011034:	1c2a      	adds	r2, r5, #0
10011036:	480a      	ldr	r0, [pc, #40]	; (10011060 <gapm_resolv_addr_cmd_handler+0x60>)
10011038:	47b0      	blx	r6
1001103a:	1c29      	adds	r1, r5, #0
1001103c:	3110      	adds	r1, #16
1001103e:	1c0b      	adds	r3, r1, #0
10011040:	3b08      	subs	r3, #8
10011042:	71a3      	strb	r3, [r4, #6]
10011044:	121b      	asrs	r3, r3, #8
10011046:	71e3      	strb	r3, [r4, #7]
10011048:	1c20      	adds	r0, r4, #0
1001104a:	4b06      	ldr	r3, [pc, #24]	; (10011064 <gapm_resolv_addr_cmd_handler+0x64>)
1001104c:	4798      	blx	r3
1001104e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10011050:	1001b160 	.word	0x1001b160
10011054:	1001adf0 	.word	0x1001adf0
10011058:	1001571b 	.word	0x1001571b
1001105c:	1001b16a 	.word	0x1001b16a
10011060:	1001b170 	.word	0x1001b170
10011064:	1000fe3d 	.word	0x1000fe3d

10011068 <gapm_addr_solved_ind_handler>:
10011068:	b570      	push	{r4, r5, r6, lr}
1001106a:	1c04      	adds	r4, r0, #0
1001106c:	1c08      	adds	r0, r1, #0
1001106e:	1c0d      	adds	r5, r1, #0
10011070:	4e05      	ldr	r6, [pc, #20]	; (10011088 <gapm_addr_solved_ind_handler+0x20>)
10011072:	1c21      	adds	r1, r4, #0
10011074:	2206      	movs	r2, #6
10011076:	3011      	adds	r0, #17
10011078:	47b0      	blx	r6
1001107a:	1c68      	adds	r0, r5, #1
1001107c:	1da1      	adds	r1, r4, #6
1001107e:	2210      	movs	r2, #16
10011080:	47b0      	blx	r6
10011082:	2300      	movs	r3, #0
10011084:	702b      	strb	r3, [r5, #0]
10011086:	bd70      	pop	{r4, r5, r6, pc}
10011088:	1001571b 	.word	0x1001571b

1001108c <gapm_profile_added_ind_handler>:
1001108c:	b510      	push	{r4, lr}
1001108e:	7843      	ldrb	r3, [r0, #1]
10011090:	7902      	ldrb	r2, [r0, #4]
10011092:	7944      	ldrb	r4, [r0, #5]
10011094:	7800      	ldrb	r0, [r0, #0]
10011096:	021b      	lsls	r3, r3, #8
10011098:	4303      	orrs	r3, r0
1001109a:	2b1b      	cmp	r3, #27
1001109c:	d104      	bne.n	100110a8 <gapm_profile_added_ind_handler+0x1c>
1001109e:	2300      	movs	r3, #0
100110a0:	700b      	strb	r3, [r1, #0]
100110a2:	0223      	lsls	r3, r4, #8
100110a4:	4313      	orrs	r3, r2
100110a6:	804b      	strh	r3, [r1, #2]
100110a8:	203b      	movs	r0, #59	; 0x3b
100110aa:	bd10      	pop	{r4, pc}

100110ac <gattc_read_req_ind_parser>:
100110ac:	7843      	ldrb	r3, [r0, #1]
100110ae:	7802      	ldrb	r2, [r0, #0]
100110b0:	021b      	lsls	r3, r3, #8
100110b2:	4313      	orrs	r3, r2
100110b4:	804b      	strh	r3, [r1, #2]
100110b6:	4770      	bx	lr

100110b8 <gattc_write_req_ind_parser>:
100110b8:	b508      	push	{r3, lr}
100110ba:	1c13      	adds	r3, r2, #0
100110bc:	0a00      	lsrs	r0, r0, #8
100110be:	8010      	strh	r0, [r2, #0]
100110c0:	784a      	ldrb	r2, [r1, #1]
100110c2:	7808      	ldrb	r0, [r1, #0]
100110c4:	0212      	lsls	r2, r2, #8
100110c6:	4302      	orrs	r2, r0
100110c8:	805a      	strh	r2, [r3, #2]
100110ca:	78ca      	ldrb	r2, [r1, #3]
100110cc:	7888      	ldrb	r0, [r1, #2]
100110ce:	0212      	lsls	r2, r2, #8
100110d0:	4302      	orrs	r2, r0
100110d2:	809a      	strh	r2, [r3, #4]
100110d4:	794a      	ldrb	r2, [r1, #5]
100110d6:	7908      	ldrb	r0, [r1, #4]
100110d8:	0212      	lsls	r2, r2, #8
100110da:	4302      	orrs	r2, r0
100110dc:	80da      	strh	r2, [r3, #6]
100110de:	3308      	adds	r3, #8
100110e0:	1c18      	adds	r0, r3, #0
100110e2:	3106      	adds	r1, #6
100110e4:	4b01      	ldr	r3, [pc, #4]	; (100110ec <gattc_write_req_ind_parser+0x34>)
100110e6:	4798      	blx	r3
100110e8:	bd08      	pop	{r3, pc}
100110ea:	46c0      	nop			; (mov r8, r8)
100110ec:	1001571b 	.word	0x1001571b

100110f0 <gattc_att_info_req_parser>:
100110f0:	7843      	ldrb	r3, [r0, #1]
100110f2:	7802      	ldrb	r2, [r0, #0]
100110f4:	021b      	lsls	r3, r3, #8
100110f6:	4313      	orrs	r3, r2
100110f8:	800b      	strh	r3, [r1, #0]
100110fa:	4770      	bx	lr

100110fc <gattc_read_cfm>:
100110fc:	b538      	push	{r3, r4, r5, lr}
100110fe:	2514      	movs	r5, #20
10011100:	1c1c      	adds	r4, r3, #0
10011102:	4b14      	ldr	r3, [pc, #80]	; (10011154 <gattc_read_cfm+0x58>)
10011104:	70d9      	strb	r1, [r3, #3]
10011106:	4914      	ldr	r1, [pc, #80]	; (10011158 <gattc_read_cfm+0x5c>)
10011108:	701d      	strb	r5, [r3, #0]
1001110a:	3d08      	subs	r5, #8
1001110c:	705d      	strb	r5, [r3, #1]
1001110e:	709d      	strb	r5, [r3, #2]
10011110:	880d      	ldrh	r5, [r1, #0]
10011112:	8809      	ldrh	r1, [r1, #0]
10011114:	7218      	strb	r0, [r3, #8]
10011116:	0a09      	lsrs	r1, r1, #8
10011118:	7159      	strb	r1, [r3, #5]
1001111a:	0a00      	lsrs	r0, r0, #8
1001111c:	0a21      	lsrs	r1, r4, #8
1001111e:	711d      	strb	r5, [r3, #4]
10011120:	7258      	strb	r0, [r3, #9]
10011122:	729c      	strb	r4, [r3, #10]
10011124:	72d9      	strb	r1, [r3, #11]
10011126:	731a      	strb	r2, [r3, #12]
10011128:	1c1d      	adds	r5, r3, #0
1001112a:	2c00      	cmp	r4, #0
1001112c:	d007      	beq.n	1001113e <gattc_read_cfm+0x42>
1001112e:	9904      	ldr	r1, [sp, #16]
10011130:	1c22      	adds	r2, r4, #0
10011132:	480a      	ldr	r0, [pc, #40]	; (1001115c <gattc_read_cfm+0x60>)
10011134:	4b0a      	ldr	r3, [pc, #40]	; (10011160 <gattc_read_cfm+0x64>)
10011136:	340d      	adds	r4, #13
10011138:	4798      	blx	r3
1001113a:	b2a1      	uxth	r1, r4
1001113c:	e001      	b.n	10011142 <gattc_read_cfm+0x46>
1001113e:	210e      	movs	r1, #14
10011140:	735c      	strb	r4, [r3, #13]
10011142:	1c0b      	adds	r3, r1, #0
10011144:	3b08      	subs	r3, #8
10011146:	71ab      	strb	r3, [r5, #6]
10011148:	121b      	asrs	r3, r3, #8
1001114a:	71eb      	strb	r3, [r5, #7]
1001114c:	1c28      	adds	r0, r5, #0
1001114e:	4b05      	ldr	r3, [pc, #20]	; (10011164 <gattc_read_cfm+0x68>)
10011150:	4798      	blx	r3
10011152:	bd38      	pop	{r3, r4, r5, pc}
10011154:	1001b160 	.word	0x1001b160
10011158:	1001adf0 	.word	0x1001adf0
1001115c:	1001b16d 	.word	0x1001b16d
10011160:	1001571b 	.word	0x1001571b
10011164:	1000fe3d 	.word	0x1000fe3d

10011168 <gattc_write_cfm>:
10011168:	4b0d      	ldr	r3, [pc, #52]	; (100111a0 <gattc_write_cfm+0x38>)
1001116a:	b510      	push	{r4, lr}
1001116c:	729a      	strb	r2, [r3, #10]
1001116e:	2203      	movs	r2, #3
10011170:	2416      	movs	r4, #22
10011172:	719a      	strb	r2, [r3, #6]
10011174:	2200      	movs	r2, #0
10011176:	70d9      	strb	r1, [r3, #3]
10011178:	490a      	ldr	r1, [pc, #40]	; (100111a4 <gattc_write_cfm+0x3c>)
1001117a:	701c      	strb	r4, [r3, #0]
1001117c:	3c0a      	subs	r4, #10
1001117e:	705c      	strb	r4, [r3, #1]
10011180:	709c      	strb	r4, [r3, #2]
10011182:	880c      	ldrh	r4, [r1, #0]
10011184:	8809      	ldrh	r1, [r1, #0]
10011186:	7218      	strb	r0, [r3, #8]
10011188:	0a09      	lsrs	r1, r1, #8
1001118a:	0a00      	lsrs	r0, r0, #8
1001118c:	711c      	strb	r4, [r3, #4]
1001118e:	7159      	strb	r1, [r3, #5]
10011190:	7258      	strb	r0, [r3, #9]
10011192:	71da      	strb	r2, [r3, #7]
10011194:	1c18      	adds	r0, r3, #0
10011196:	210b      	movs	r1, #11
10011198:	4b03      	ldr	r3, [pc, #12]	; (100111a8 <gattc_write_cfm+0x40>)
1001119a:	4798      	blx	r3
1001119c:	bd10      	pop	{r4, pc}
1001119e:	46c0      	nop			; (mov r8, r8)
100111a0:	1001b160 	.word	0x1001b160
100111a4:	1001adf0 	.word	0x1001adf0
100111a8:	1000fe3d 	.word	0x1000fe3d

100111ac <gattc_att_info_cfm>:
100111ac:	b538      	push	{r3, r4, r5, lr}
100111ae:	4c0e      	ldr	r4, [pc, #56]	; (100111e8 <gattc_att_info_cfm+0x3c>)
100111b0:	2518      	movs	r5, #24
100111b2:	7323      	strb	r3, [r4, #12]
100111b4:	2305      	movs	r3, #5
100111b6:	71a3      	strb	r3, [r4, #6]
100111b8:	2300      	movs	r3, #0
100111ba:	70e1      	strb	r1, [r4, #3]
100111bc:	490b      	ldr	r1, [pc, #44]	; (100111ec <gattc_att_info_cfm+0x40>)
100111be:	7025      	strb	r5, [r4, #0]
100111c0:	3d0c      	subs	r5, #12
100111c2:	7065      	strb	r5, [r4, #1]
100111c4:	70a5      	strb	r5, [r4, #2]
100111c6:	880d      	ldrh	r5, [r1, #0]
100111c8:	8809      	ldrh	r1, [r1, #0]
100111ca:	7220      	strb	r0, [r4, #8]
100111cc:	0a09      	lsrs	r1, r1, #8
100111ce:	0a00      	lsrs	r0, r0, #8
100111d0:	7161      	strb	r1, [r4, #5]
100111d2:	7260      	strb	r0, [r4, #9]
100111d4:	72a2      	strb	r2, [r4, #10]
100111d6:	71e3      	strb	r3, [r4, #7]
100111d8:	0a12      	lsrs	r2, r2, #8
100111da:	1c20      	adds	r0, r4, #0
100111dc:	210d      	movs	r1, #13
100111de:	4b04      	ldr	r3, [pc, #16]	; (100111f0 <gattc_att_info_cfm+0x44>)
100111e0:	7125      	strb	r5, [r4, #4]
100111e2:	72e2      	strb	r2, [r4, #11]
100111e4:	4798      	blx	r3
100111e6:	bd38      	pop	{r3, r4, r5, pc}
100111e8:	1001b160 	.word	0x1001b160
100111ec:	1001adf0 	.word	0x1001adf0
100111f0:	1000fe3d 	.word	0x1000fe3d

100111f4 <gattc_send_evt_cmd_handler>:
100111f4:	b570      	push	{r4, r5, r6, lr}
100111f6:	2610      	movs	r6, #16
100111f8:	ac04      	add	r4, sp, #16
100111fa:	8825      	ldrh	r5, [r4, #0]
100111fc:	4c15      	ldr	r4, [pc, #84]	; (10011254 <gattc_send_evt_cmd_handler+0x60>)
100111fe:	70e2      	strb	r2, [r4, #3]
10011200:	4a15      	ldr	r2, [pc, #84]	; (10011258 <gattc_send_evt_cmd_handler+0x64>)
10011202:	7026      	strb	r6, [r4, #0]
10011204:	3e04      	subs	r6, #4
10011206:	7066      	strb	r6, [r4, #1]
10011208:	70a6      	strb	r6, [r4, #2]
1001120a:	8816      	ldrh	r6, [r2, #0]
1001120c:	8812      	ldrh	r2, [r2, #0]
1001120e:	7220      	strb	r0, [r4, #8]
10011210:	0a12      	lsrs	r2, r2, #8
10011212:	7162      	strb	r2, [r4, #5]
10011214:	4a11      	ldr	r2, [pc, #68]	; (1001125c <gattc_send_evt_cmd_handler+0x68>)
10011216:	7321      	strb	r1, [r4, #12]
10011218:	8812      	ldrh	r2, [r2, #0]
1001121a:	73a5      	strb	r5, [r4, #14]
1001121c:	3201      	adds	r2, #1
1001121e:	7262      	strb	r2, [r4, #9]
10011220:	1212      	asrs	r2, r2, #8
10011222:	72a2      	strb	r2, [r4, #10]
10011224:	2200      	movs	r2, #0
10011226:	72e2      	strb	r2, [r4, #11]
10011228:	0a0a      	lsrs	r2, r1, #8
1001122a:	7362      	strb	r2, [r4, #13]
1001122c:	0a2a      	lsrs	r2, r5, #8
1001122e:	73e2      	strb	r2, [r4, #15]
10011230:	1c19      	adds	r1, r3, #0
10011232:	1c2a      	adds	r2, r5, #0
10011234:	4b0a      	ldr	r3, [pc, #40]	; (10011260 <gattc_send_evt_cmd_handler+0x6c>)
10011236:	3510      	adds	r5, #16
10011238:	480a      	ldr	r0, [pc, #40]	; (10011264 <gattc_send_evt_cmd_handler+0x70>)
1001123a:	7126      	strb	r6, [r4, #4]
1001123c:	4798      	blx	r3
1001123e:	b2a9      	uxth	r1, r5
10011240:	1c0b      	adds	r3, r1, #0
10011242:	3b08      	subs	r3, #8
10011244:	71a3      	strb	r3, [r4, #6]
10011246:	121b      	asrs	r3, r3, #8
10011248:	71e3      	strb	r3, [r4, #7]
1001124a:	1c20      	adds	r0, r4, #0
1001124c:	4b06      	ldr	r3, [pc, #24]	; (10011268 <gattc_send_evt_cmd_handler+0x74>)
1001124e:	4798      	blx	r3
10011250:	bd70      	pop	{r4, r5, r6, pc}
10011252:	46c0      	nop			; (mov r8, r8)
10011254:	1001b160 	.word	0x1001b160
10011258:	1001adf0 	.word	0x1001adf0
1001125c:	10019f20 	.word	0x10019f20
10011260:	1001571b 	.word	0x1001571b
10011264:	1001b170 	.word	0x1001b170
10011268:	1000fe3d 	.word	0x1000fe3d

1001126c <gattc_event_cfm_handler>:
1001126c:	220e      	movs	r2, #14
1001126e:	b508      	push	{r3, lr}
10011270:	4b0b      	ldr	r3, [pc, #44]	; (100112a0 <gattc_event_cfm_handler+0x34>)
10011272:	701a      	strb	r2, [r3, #0]
10011274:	3a02      	subs	r2, #2
10011276:	705a      	strb	r2, [r3, #1]
10011278:	709a      	strb	r2, [r3, #2]
1001127a:	4a0a      	ldr	r2, [pc, #40]	; (100112a4 <gattc_event_cfm_handler+0x38>)
1001127c:	70d8      	strb	r0, [r3, #3]
1001127e:	8810      	ldrh	r0, [r2, #0]
10011280:	8812      	ldrh	r2, [r2, #0]
10011282:	7219      	strb	r1, [r3, #8]
10011284:	0a12      	lsrs	r2, r2, #8
10011286:	715a      	strb	r2, [r3, #5]
10011288:	2202      	movs	r2, #2
1001128a:	719a      	strb	r2, [r3, #6]
1001128c:	2200      	movs	r2, #0
1001128e:	0a09      	lsrs	r1, r1, #8
10011290:	7118      	strb	r0, [r3, #4]
10011292:	7259      	strb	r1, [r3, #9]
10011294:	71da      	strb	r2, [r3, #7]
10011296:	1c18      	adds	r0, r3, #0
10011298:	210a      	movs	r1, #10
1001129a:	4b03      	ldr	r3, [pc, #12]	; (100112a8 <gattc_event_cfm_handler+0x3c>)
1001129c:	4798      	blx	r3
1001129e:	bd08      	pop	{r3, pc}
100112a0:	1001b160 	.word	0x1001b160
100112a4:	1001adf0 	.word	0x1001adf0
100112a8:	1000fe3d 	.word	0x1000fe3d

100112ac <gattc_disc_svc_ind_parser>:
100112ac:	b570      	push	{r4, r5, r6, lr}
100112ae:	1c15      	adds	r5, r2, #0
100112b0:	0a00      	lsrs	r0, r0, #8
100112b2:	8010      	strh	r0, [r2, #0]
100112b4:	784b      	ldrb	r3, [r1, #1]
100112b6:	780a      	ldrb	r2, [r1, #0]
100112b8:	021b      	lsls	r3, r3, #8
100112ba:	4313      	orrs	r3, r2
100112bc:	806b      	strh	r3, [r5, #2]
100112be:	78cb      	ldrb	r3, [r1, #3]
100112c0:	788a      	ldrb	r2, [r1, #2]
100112c2:	021b      	lsls	r3, r3, #8
100112c4:	4313      	orrs	r3, r2
100112c6:	80ab      	strh	r3, [r5, #4]
100112c8:	790e      	ldrb	r6, [r1, #4]
100112ca:	4b05      	ldr	r3, [pc, #20]	; (100112e0 <gattc_disc_svc_ind_parser+0x34>)
100112cc:	1c30      	adds	r0, r6, #0
100112ce:	1c0c      	adds	r4, r1, #0
100112d0:	4798      	blx	r3
100112d2:	1c32      	adds	r2, r6, #0
100112d4:	71a8      	strb	r0, [r5, #6]
100112d6:	1d61      	adds	r1, r4, #5
100112d8:	1de8      	adds	r0, r5, #7
100112da:	4b02      	ldr	r3, [pc, #8]	; (100112e4 <gattc_disc_svc_ind_parser+0x38>)
100112dc:	4798      	blx	r3
100112de:	bd70      	pop	{r4, r5, r6, pc}
100112e0:	1000f17d 	.word	0x1000f17d
100112e4:	1001571b 	.word	0x1001571b

100112e8 <gattc_disc_svc_incl_ind_parser>:
100112e8:	b570      	push	{r4, r5, r6, lr}
100112ea:	1c15      	adds	r5, r2, #0
100112ec:	0a00      	lsrs	r0, r0, #8
100112ee:	8010      	strh	r0, [r2, #0]
100112f0:	784b      	ldrb	r3, [r1, #1]
100112f2:	780a      	ldrb	r2, [r1, #0]
100112f4:	021b      	lsls	r3, r3, #8
100112f6:	4313      	orrs	r3, r2
100112f8:	806b      	strh	r3, [r5, #2]
100112fa:	78cb      	ldrb	r3, [r1, #3]
100112fc:	788a      	ldrb	r2, [r1, #2]
100112fe:	021b      	lsls	r3, r3, #8
10011300:	4313      	orrs	r3, r2
10011302:	80ab      	strh	r3, [r5, #4]
10011304:	794b      	ldrb	r3, [r1, #5]
10011306:	790a      	ldrb	r2, [r1, #4]
10011308:	021b      	lsls	r3, r3, #8
1001130a:	4313      	orrs	r3, r2
1001130c:	80eb      	strh	r3, [r5, #6]
1001130e:	798e      	ldrb	r6, [r1, #6]
10011310:	4b05      	ldr	r3, [pc, #20]	; (10011328 <gattc_disc_svc_incl_ind_parser+0x40>)
10011312:	1c30      	adds	r0, r6, #0
10011314:	1c0c      	adds	r4, r1, #0
10011316:	4798      	blx	r3
10011318:	7228      	strb	r0, [r5, #8]
1001131a:	1c28      	adds	r0, r5, #0
1001131c:	1c32      	adds	r2, r6, #0
1001131e:	1de1      	adds	r1, r4, #7
10011320:	4b02      	ldr	r3, [pc, #8]	; (1001132c <gattc_disc_svc_incl_ind_parser+0x44>)
10011322:	3009      	adds	r0, #9
10011324:	4798      	blx	r3
10011326:	bd70      	pop	{r4, r5, r6, pc}
10011328:	1000f17d 	.word	0x1000f17d
1001132c:	1001571b 	.word	0x1001571b

10011330 <gattc_disc_char_ind_parser>:
10011330:	b570      	push	{r4, r5, r6, lr}
10011332:	1c15      	adds	r5, r2, #0
10011334:	0a00      	lsrs	r0, r0, #8
10011336:	8010      	strh	r0, [r2, #0]
10011338:	784b      	ldrb	r3, [r1, #1]
1001133a:	780a      	ldrb	r2, [r1, #0]
1001133c:	021b      	lsls	r3, r3, #8
1001133e:	4313      	orrs	r3, r2
10011340:	806b      	strh	r3, [r5, #2]
10011342:	78cb      	ldrb	r3, [r1, #3]
10011344:	788a      	ldrb	r2, [r1, #2]
10011346:	021b      	lsls	r3, r3, #8
10011348:	4313      	orrs	r3, r2
1001134a:	80ab      	strh	r3, [r5, #4]
1001134c:	790b      	ldrb	r3, [r1, #4]
1001134e:	1c0c      	adds	r4, r1, #0
10011350:	71ab      	strb	r3, [r5, #6]
10011352:	794e      	ldrb	r6, [r1, #5]
10011354:	4b05      	ldr	r3, [pc, #20]	; (1001136c <gattc_disc_char_ind_parser+0x3c>)
10011356:	1c30      	adds	r0, r6, #0
10011358:	4798      	blx	r3
1001135a:	71e8      	strb	r0, [r5, #7]
1001135c:	1c28      	adds	r0, r5, #0
1001135e:	1c32      	adds	r2, r6, #0
10011360:	1da1      	adds	r1, r4, #6
10011362:	4b03      	ldr	r3, [pc, #12]	; (10011370 <gattc_disc_char_ind_parser+0x40>)
10011364:	3008      	adds	r0, #8
10011366:	4798      	blx	r3
10011368:	bd70      	pop	{r4, r5, r6, pc}
1001136a:	46c0      	nop			; (mov r8, r8)
1001136c:	1000f17d 	.word	0x1000f17d
10011370:	1001571b 	.word	0x1001571b

10011374 <gattc_disc_char_desc_ind_parser>:
10011374:	b570      	push	{r4, r5, r6, lr}
10011376:	1c15      	adds	r5, r2, #0
10011378:	0a00      	lsrs	r0, r0, #8
1001137a:	8010      	strh	r0, [r2, #0]
1001137c:	784b      	ldrb	r3, [r1, #1]
1001137e:	780a      	ldrb	r2, [r1, #0]
10011380:	021b      	lsls	r3, r3, #8
10011382:	4313      	orrs	r3, r2
10011384:	806b      	strh	r3, [r5, #2]
10011386:	788e      	ldrb	r6, [r1, #2]
10011388:	4b05      	ldr	r3, [pc, #20]	; (100113a0 <gattc_disc_char_desc_ind_parser+0x2c>)
1001138a:	1c30      	adds	r0, r6, #0
1001138c:	1c0c      	adds	r4, r1, #0
1001138e:	4798      	blx	r3
10011390:	1c32      	adds	r2, r6, #0
10011392:	7128      	strb	r0, [r5, #4]
10011394:	1ce1      	adds	r1, r4, #3
10011396:	1d68      	adds	r0, r5, #5
10011398:	4b02      	ldr	r3, [pc, #8]	; (100113a4 <gattc_disc_char_desc_ind_parser+0x30>)
1001139a:	4798      	blx	r3
1001139c:	bd70      	pop	{r4, r5, r6, pc}
1001139e:	46c0      	nop			; (mov r8, r8)
100113a0:	1000f17d 	.word	0x1000f17d
100113a4:	1001571b 	.word	0x1001571b

100113a8 <gattc_event_ind_and_notification_parser>:
100113a8:	b510      	push	{r4, lr}
100113aa:	780c      	ldrb	r4, [r1, #0]
100113ac:	1c13      	adds	r3, r2, #0
100113ae:	2c12      	cmp	r4, #18
100113b0:	d10e      	bne.n	100113d0 <gattc_event_ind_and_notification_parser+0x28>
100113b2:	0a00      	lsrs	r0, r0, #8
100113b4:	8010      	strh	r0, [r2, #0]
100113b6:	788a      	ldrb	r2, [r1, #2]
100113b8:	709a      	strb	r2, [r3, #2]
100113ba:	7948      	ldrb	r0, [r1, #5]
100113bc:	790c      	ldrb	r4, [r1, #4]
100113be:	0200      	lsls	r0, r0, #8
100113c0:	4320      	orrs	r0, r4
100113c2:	8098      	strh	r0, [r3, #4]
100113c4:	3106      	adds	r1, #6
100113c6:	1d98      	adds	r0, r3, #6
100113c8:	4b0b      	ldr	r3, [pc, #44]	; (100113f8 <gattc_event_ind_and_notification_parser+0x50>)
100113ca:	4798      	blx	r3
100113cc:	221b      	movs	r2, #27
100113ce:	e010      	b.n	100113f2 <gattc_event_ind_and_notification_parser+0x4a>
100113d0:	2200      	movs	r2, #0
100113d2:	2c13      	cmp	r4, #19
100113d4:	d10d      	bne.n	100113f2 <gattc_event_ind_and_notification_parser+0x4a>
100113d6:	0a00      	lsrs	r0, r0, #8
100113d8:	8018      	strh	r0, [r3, #0]
100113da:	788a      	ldrb	r2, [r1, #2]
100113dc:	709a      	strb	r2, [r3, #2]
100113de:	7908      	ldrb	r0, [r1, #4]
100113e0:	78cc      	ldrb	r4, [r1, #3]
100113e2:	0200      	lsls	r0, r0, #8
100113e4:	4320      	orrs	r0, r4
100113e6:	8098      	strh	r0, [r3, #4]
100113e8:	3106      	adds	r1, #6
100113ea:	1d98      	adds	r0, r3, #6
100113ec:	4b02      	ldr	r3, [pc, #8]	; (100113f8 <gattc_event_ind_and_notification_parser+0x50>)
100113ee:	4798      	blx	r3
100113f0:	221c      	movs	r2, #28
100113f2:	1c10      	adds	r0, r2, #0
100113f4:	bd10      	pop	{r4, pc}
100113f6:	46c0      	nop			; (mov r8, r8)
100113f8:	1001571b 	.word	0x1001571b

100113fc <gattc_complete_evt_handler>:
100113fc:	b500      	push	{lr}
100113fe:	0a00      	lsrs	r0, r0, #8
10011400:	8010      	strh	r0, [r2, #0]
10011402:	7808      	ldrb	r0, [r1, #0]
10011404:	7090      	strb	r0, [r2, #2]
10011406:	784b      	ldrb	r3, [r1, #1]
10011408:	3801      	subs	r0, #1
1001140a:	70d3      	strb	r3, [r2, #3]
1001140c:	2813      	cmp	r0, #19
1001140e:	d82c      	bhi.n	1001146a <gattc_complete_evt_handler+0x6e>
10011410:	f001 faec 	bl	100129ec <__gnu_thumb1_case_uqi>
10011414:	0a0a0a0c 	.word	0x0a0a0a0c
10011418:	210a0a0a 	.word	0x210a0a0a
1001141c:	111f2121 	.word	0x111f2121
10011420:	2b111111 	.word	0x2b111111
10011424:	2919132b 	.word	0x2919132b
10011428:	2017      	movs	r0, #23
1001142a:	e01f      	b.n	1001146c <gattc_complete_evt_handler+0x70>
1001142c:	2024      	movs	r0, #36	; 0x24
1001142e:	2b00      	cmp	r3, #0
10011430:	d11c      	bne.n	1001146c <gattc_complete_evt_handler+0x70>
10011432:	3017      	adds	r0, #23
10011434:	e01a      	b.n	1001146c <gattc_complete_evt_handler+0x70>
10011436:	2025      	movs	r0, #37	; 0x25
10011438:	e018      	b.n	1001146c <gattc_complete_evt_handler+0x70>
1001143a:	4a0d      	ldr	r2, [pc, #52]	; (10011470 <gattc_complete_evt_handler+0x74>)
1001143c:	201d      	movs	r0, #29
1001143e:	6813      	ldr	r3, [r2, #0]
10011440:	3b01      	subs	r3, #1
10011442:	6013      	str	r3, [r2, #0]
10011444:	e012      	b.n	1001146c <gattc_complete_evt_handler+0x70>
10011446:	4a0a      	ldr	r2, [pc, #40]	; (10011470 <gattc_complete_evt_handler+0x74>)
10011448:	201e      	movs	r0, #30
1001144a:	6813      	ldr	r3, [r2, #0]
1001144c:	3b01      	subs	r3, #1
1001144e:	6013      	str	r3, [r2, #0]
10011450:	e00c      	b.n	1001146c <gattc_complete_evt_handler+0x70>
10011452:	2019      	movs	r0, #25
10011454:	e00a      	b.n	1001146c <gattc_complete_evt_handler+0x70>
10011456:	203b      	movs	r0, #59	; 0x3b
10011458:	2b00      	cmp	r3, #0
1001145a:	d007      	beq.n	1001146c <gattc_complete_evt_handler+0x70>
1001145c:	2182      	movs	r1, #130	; 0x82
1001145e:	0089      	lsls	r1, r1, #2
10011460:	5453      	strb	r3, [r2, r1]
10011462:	3823      	subs	r0, #35	; 0x23
10011464:	e002      	b.n	1001146c <gattc_complete_evt_handler+0x70>
10011466:	2021      	movs	r0, #33	; 0x21
10011468:	e000      	b.n	1001146c <gattc_complete_evt_handler+0x70>
1001146a:	2000      	movs	r0, #0
1001146c:	bd00      	pop	{pc}
1001146e:	46c0      	nop			; (mov r8, r8)
10011470:	10019f24 	.word	0x10019f24

10011474 <gattc_event_mtu_changed_ind_parser>:
10011474:	0a00      	lsrs	r0, r0, #8
10011476:	8010      	strh	r0, [r2, #0]
10011478:	784b      	ldrb	r3, [r1, #1]
1001147a:	7809      	ldrb	r1, [r1, #0]
1001147c:	021b      	lsls	r3, r3, #8
1001147e:	430b      	orrs	r3, r1
10011480:	8053      	strh	r3, [r2, #2]
10011482:	4770      	bx	lr

10011484 <gattc_read_ind_parser>:
10011484:	0a00      	lsrs	r0, r0, #8
10011486:	b508      	push	{r3, lr}
10011488:	8010      	strh	r0, [r2, #0]
1001148a:	1c13      	adds	r3, r2, #0
1001148c:	2282      	movs	r2, #130	; 0x82
1001148e:	2000      	movs	r0, #0
10011490:	0092      	lsls	r2, r2, #2
10011492:	5498      	strb	r0, [r3, r2]
10011494:	784a      	ldrb	r2, [r1, #1]
10011496:	7808      	ldrb	r0, [r1, #0]
10011498:	0212      	lsls	r2, r2, #8
1001149a:	4302      	orrs	r2, r0
1001149c:	805a      	strh	r2, [r3, #2]
1001149e:	78ca      	ldrb	r2, [r1, #3]
100114a0:	7888      	ldrb	r0, [r1, #2]
100114a2:	0212      	lsls	r2, r2, #8
100114a4:	4302      	orrs	r2, r0
100114a6:	80da      	strh	r2, [r3, #6]
100114a8:	794a      	ldrb	r2, [r1, #5]
100114aa:	7908      	ldrb	r0, [r1, #4]
100114ac:	0212      	lsls	r2, r2, #8
100114ae:	4302      	orrs	r2, r0
100114b0:	809a      	strh	r2, [r3, #4]
100114b2:	3308      	adds	r3, #8
100114b4:	1c18      	adds	r0, r3, #0
100114b6:	3106      	adds	r1, #6
100114b8:	4b01      	ldr	r3, [pc, #4]	; (100114c0 <gattc_read_ind_parser+0x3c>)
100114ba:	4798      	blx	r3
100114bc:	bd08      	pop	{r3, pc}
100114be:	46c0      	nop			; (mov r8, r8)
100114c0:	1001571b 	.word	0x1001571b

100114c4 <gattc_svc_changed_cfg_ind_parser>:
100114c4:	0a00      	lsrs	r0, r0, #8
100114c6:	8010      	strh	r0, [r2, #0]
100114c8:	784b      	ldrb	r3, [r1, #1]
100114ca:	7809      	ldrb	r1, [r1, #0]
100114cc:	021b      	lsls	r3, r3, #8
100114ce:	430b      	orrs	r3, r1
100114d0:	8053      	strh	r3, [r2, #2]
100114d2:	4770      	bx	lr

100114d4 <init_gattc_task_module>:
100114d4:	2300      	movs	r3, #0
100114d6:	4a02      	ldr	r2, [pc, #8]	; (100114e0 <init_gattc_task_module+0xc>)
100114d8:	8013      	strh	r3, [r2, #0]
100114da:	4a02      	ldr	r2, [pc, #8]	; (100114e4 <init_gattc_task_module+0x10>)
100114dc:	8013      	strh	r3, [r2, #0]
100114de:	4770      	bx	lr
100114e0:	10019f1e 	.word	0x10019f1e
100114e4:	10019f20 	.word	0x10019f20

100114e8 <gattm_add_svc_req_handler>:
100114e8:	2200      	movs	r2, #0
100114ea:	210b      	movs	r1, #11
100114ec:	b5f0      	push	{r4, r5, r6, r7, lr}
100114ee:	1c04      	adds	r4, r0, #0
100114f0:	7943      	ldrb	r3, [r0, #5]
100114f2:	b085      	sub	sp, #20
100114f4:	9301      	str	r3, [sp, #4]
100114f6:	ab02      	add	r3, sp, #8
100114f8:	71da      	strb	r2, [r3, #7]
100114fa:	4b37      	ldr	r3, [pc, #220]	; (100115d8 <gattm_add_svc_req_handler+0xf0>)
100114fc:	7059      	strb	r1, [r3, #1]
100114fe:	7099      	strb	r1, [r3, #2]
10011500:	4936      	ldr	r1, [pc, #216]	; (100115dc <gattm_add_svc_req_handler+0xf4>)
10011502:	701a      	strb	r2, [r3, #0]
10011504:	8808      	ldrh	r0, [r1, #0]
10011506:	8809      	ldrh	r1, [r1, #0]
10011508:	70da      	strb	r2, [r3, #3]
1001150a:	0a09      	lsrs	r1, r1, #8
1001150c:	7118      	strb	r0, [r3, #4]
1001150e:	7159      	strb	r1, [r3, #5]
10011510:	8821      	ldrh	r1, [r4, #0]
10011512:	7219      	strb	r1, [r3, #8]
10011514:	8821      	ldrh	r1, [r4, #0]
10011516:	0a09      	lsrs	r1, r1, #8
10011518:	7259      	strb	r1, [r3, #9]
1001151a:	8861      	ldrh	r1, [r4, #2]
1001151c:	7299      	strb	r1, [r3, #10]
1001151e:	8861      	ldrh	r1, [r4, #2]
10011520:	0a09      	lsrs	r1, r1, #8
10011522:	72d9      	strb	r1, [r3, #11]
10011524:	7921      	ldrb	r1, [r4, #4]
10011526:	7319      	strb	r1, [r3, #12]
10011528:	4669      	mov	r1, sp
1001152a:	7909      	ldrb	r1, [r1, #4]
1001152c:	7359      	strb	r1, [r3, #13]
1001152e:	18a1      	adds	r1, r4, r2
10011530:	7988      	ldrb	r0, [r1, #6]
10011532:	1899      	adds	r1, r3, r2
10011534:	3201      	adds	r2, #1
10011536:	7388      	strb	r0, [r1, #14]
10011538:	2a10      	cmp	r2, #16
1001153a:	d1f8      	bne.n	1001152e <gattm_add_svc_req_handler+0x46>
1001153c:	1c27      	adds	r7, r4, #0
1001153e:	2300      	movs	r3, #0
10011540:	251e      	movs	r5, #30
10011542:	3716      	adds	r7, #22
10011544:	9300      	str	r3, [sp, #0]
10011546:	9b00      	ldr	r3, [sp, #0]
10011548:	9a01      	ldr	r2, [sp, #4]
1001154a:	4e23      	ldr	r6, [pc, #140]	; (100115d8 <gattm_add_svc_req_handler+0xf0>)
1001154c:	4293      	cmp	r3, r2
1001154e:	da21      	bge.n	10011594 <gattm_add_svc_req_handler+0xac>
10011550:	1c39      	adds	r1, r7, #0
10011552:	1970      	adds	r0, r6, r5
10011554:	2210      	movs	r2, #16
10011556:	4b22      	ldr	r3, [pc, #136]	; (100115e0 <gattm_add_svc_req_handler+0xf8>)
10011558:	4798      	blx	r3
1001155a:	1c2b      	adds	r3, r5, #0
1001155c:	8a3a      	ldrh	r2, [r7, #16]
1001155e:	3310      	adds	r3, #16
10011560:	b29b      	uxth	r3, r3
10011562:	54f2      	strb	r2, [r6, r3]
10011564:	1c2b      	adds	r3, r5, #0
10011566:	8a3a      	ldrh	r2, [r7, #16]
10011568:	3311      	adds	r3, #17
1001156a:	b29b      	uxth	r3, r3
1001156c:	0a12      	lsrs	r2, r2, #8
1001156e:	54f2      	strb	r2, [r6, r3]
10011570:	1c2a      	adds	r2, r5, #0
10011572:	1c2b      	adds	r3, r5, #0
10011574:	8a79      	ldrh	r1, [r7, #18]
10011576:	3212      	adds	r2, #18
10011578:	b292      	uxth	r2, r2
1001157a:	54b1      	strb	r1, [r6, r2]
1001157c:	8a7a      	ldrh	r2, [r7, #18]
1001157e:	3313      	adds	r3, #19
10011580:	b29b      	uxth	r3, r3
10011582:	0a12      	lsrs	r2, r2, #8
10011584:	54f2      	strb	r2, [r6, r3]
10011586:	9b00      	ldr	r3, [sp, #0]
10011588:	3514      	adds	r5, #20
1001158a:	3301      	adds	r3, #1
1001158c:	b2ad      	uxth	r5, r5
1001158e:	9300      	str	r3, [sp, #0]
10011590:	3714      	adds	r7, #20
10011592:	e7d8      	b.n	10011546 <gattm_add_svc_req_handler+0x5e>
10011594:	2114      	movs	r1, #20
10011596:	4d13      	ldr	r5, [pc, #76]	; (100115e4 <gattm_add_svc_req_handler+0xfc>)
10011598:	4b13      	ldr	r3, [pc, #76]	; (100115e8 <gattm_add_svc_req_handler+0x100>)
1001159a:	4351      	muls	r1, r2
1001159c:	802b      	strh	r3, [r5, #0]
1001159e:	230b      	movs	r3, #11
100115a0:	311e      	adds	r1, #30
100115a2:	80ab      	strh	r3, [r5, #4]
100115a4:	1c0b      	adds	r3, r1, #0
100115a6:	3b08      	subs	r3, #8
100115a8:	71b3      	strb	r3, [r6, #6]
100115aa:	121b      	asrs	r3, r3, #8
100115ac:	71f3      	strb	r3, [r6, #7]
100115ae:	1c30      	adds	r0, r6, #0
100115b0:	4b0e      	ldr	r3, [pc, #56]	; (100115ec <gattm_add_svc_req_handler+0x104>)
100115b2:	4798      	blx	r3
100115b4:	ab02      	add	r3, sp, #8
100115b6:	1dde      	adds	r6, r3, #7
100115b8:	1c30      	adds	r0, r6, #0
100115ba:	4b0d      	ldr	r3, [pc, #52]	; (100115f0 <gattm_add_svc_req_handler+0x108>)
100115bc:	4798      	blx	r3
100115be:	7833      	ldrb	r3, [r6, #0]
100115c0:	20e2      	movs	r0, #226	; 0xe2
100115c2:	2b00      	cmp	r3, #0
100115c4:	d106      	bne.n	100115d4 <gattm_add_svc_req_handler+0xec>
100115c6:	68aa      	ldr	r2, [r5, #8]
100115c8:	7853      	ldrb	r3, [r2, #1]
100115ca:	7811      	ldrb	r1, [r2, #0]
100115cc:	021b      	lsls	r3, r3, #8
100115ce:	430b      	orrs	r3, r1
100115d0:	8023      	strh	r3, [r4, #0]
100115d2:	7890      	ldrb	r0, [r2, #2]
100115d4:	b005      	add	sp, #20
100115d6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100115d8:	1001b160 	.word	0x1001b160
100115dc:	1001adf0 	.word	0x1001adf0
100115e0:	1001571b 	.word	0x1001571b
100115e4:	1001ade4 	.word	0x1001ade4
100115e8:	00000b01 	.word	0x00000b01
100115ec:	1000fe3d 	.word	0x1000fe3d
100115f0:	1000fea1 	.word	0x1000fea1

100115f4 <gattm_add_attribute_req_handler>:
100115f4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100115f6:	1c1f      	adds	r7, r3, #0
100115f8:	4b16      	ldr	r3, [pc, #88]	; (10011654 <gattm_add_attribute_req_handler+0x60>)
100115fa:	9100      	str	r1, [sp, #0]
100115fc:	9201      	str	r2, [sp, #4]
100115fe:	1c05      	adds	r5, r0, #0
10011600:	7946      	ldrb	r6, [r0, #5]
10011602:	6818      	ldr	r0, [r3, #0]
10011604:	2114      	movs	r1, #20
10011606:	4b14      	ldr	r3, [pc, #80]	; (10011658 <gattm_add_attribute_req_handler+0x64>)
10011608:	382a      	subs	r0, #42	; 0x2a
1001160a:	4798      	blx	r3
1001160c:	2311      	movs	r3, #17
1001160e:	4286      	cmp	r6, r0
10011610:	d21e      	bcs.n	10011650 <gattm_add_attribute_req_handler+0x5c>
10011612:	2414      	movs	r4, #20
10011614:	4366      	muls	r6, r4
10011616:	19a8      	adds	r0, r5, r6
10011618:	2100      	movs	r1, #0
1001161a:	2210      	movs	r2, #16
1001161c:	4b0f      	ldr	r3, [pc, #60]	; (1001165c <gattm_add_attribute_req_handler+0x68>)
1001161e:	3016      	adds	r0, #22
10011620:	4798      	blx	r3
10011622:	7968      	ldrb	r0, [r5, #5]
10011624:	1c3a      	adds	r2, r7, #0
10011626:	4360      	muls	r0, r4
10011628:	1828      	adds	r0, r5, r0
1001162a:	4b0d      	ldr	r3, [pc, #52]	; (10011660 <gattm_add_attribute_req_handler+0x6c>)
1001162c:	3016      	adds	r0, #22
1001162e:	9908      	ldr	r1, [sp, #32]
10011630:	4798      	blx	r3
10011632:	466a      	mov	r2, sp
10011634:	796b      	ldrb	r3, [r5, #5]
10011636:	8812      	ldrh	r2, [r2, #0]
10011638:	435c      	muls	r4, r3
1001163a:	192c      	adds	r4, r5, r4
1001163c:	8522      	strh	r2, [r4, #40]	; 0x28
1001163e:	466a      	mov	r2, sp
10011640:	8892      	ldrh	r2, [r2, #4]
10011642:	84e2      	strh	r2, [r4, #38]	; 0x26
10011644:	9a09      	ldr	r2, [sp, #36]	; 0x24
10011646:	8013      	strh	r3, [r2, #0]
10011648:	796b      	ldrb	r3, [r5, #5]
1001164a:	3301      	adds	r3, #1
1001164c:	716b      	strb	r3, [r5, #5]
1001164e:	2300      	movs	r3, #0
10011650:	1c18      	adds	r0, r3, #0
10011652:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011654:	10019e94 	.word	0x10019e94
10011658:	10012a01 	.word	0x10012a01
1001165c:	1001572d 	.word	0x1001572d
10011660:	1001571b 	.word	0x1001571b

10011664 <gattm_att_set_value_req_handler>:
10011664:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011666:	466b      	mov	r3, sp
10011668:	1dde      	adds	r6, r3, #7
1001166a:	2300      	movs	r3, #0
1001166c:	1c0d      	adds	r5, r1, #0
1001166e:	210c      	movs	r1, #12
10011670:	270b      	movs	r7, #11
10011672:	4c17      	ldr	r4, [pc, #92]	; (100116d0 <gattm_att_set_value_req_handler+0x6c>)
10011674:	7033      	strb	r3, [r6, #0]
10011676:	70e3      	strb	r3, [r4, #3]
10011678:	4b16      	ldr	r3, [pc, #88]	; (100116d4 <gattm_att_set_value_req_handler+0x70>)
1001167a:	7021      	strb	r1, [r4, #0]
1001167c:	8819      	ldrh	r1, [r3, #0]
1001167e:	881b      	ldrh	r3, [r3, #0]
10011680:	7220      	strb	r0, [r4, #8]
10011682:	0a1b      	lsrs	r3, r3, #8
10011684:	7163      	strb	r3, [r4, #5]
10011686:	0a00      	lsrs	r0, r0, #8
10011688:	0a2b      	lsrs	r3, r5, #8
1001168a:	7121      	strb	r1, [r4, #4]
1001168c:	7260      	strb	r0, [r4, #9]
1001168e:	1c11      	adds	r1, r2, #0
10011690:	72a5      	strb	r5, [r4, #10]
10011692:	1c2a      	adds	r2, r5, #0
10011694:	72e3      	strb	r3, [r4, #11]
10011696:	350c      	adds	r5, #12
10011698:	4b0f      	ldr	r3, [pc, #60]	; (100116d8 <gattm_att_set_value_req_handler+0x74>)
1001169a:	4810      	ldr	r0, [pc, #64]	; (100116dc <gattm_att_set_value_req_handler+0x78>)
1001169c:	7067      	strb	r7, [r4, #1]
1001169e:	70a7      	strb	r7, [r4, #2]
100116a0:	4798      	blx	r3
100116a2:	b2a9      	uxth	r1, r5
100116a4:	4b0e      	ldr	r3, [pc, #56]	; (100116e0 <gattm_att_set_value_req_handler+0x7c>)
100116a6:	4d0f      	ldr	r5, [pc, #60]	; (100116e4 <gattm_att_set_value_req_handler+0x80>)
100116a8:	1c20      	adds	r0, r4, #0
100116aa:	802b      	strh	r3, [r5, #0]
100116ac:	1c0b      	adds	r3, r1, #0
100116ae:	3b08      	subs	r3, #8
100116b0:	71a3      	strb	r3, [r4, #6]
100116b2:	121b      	asrs	r3, r3, #8
100116b4:	71e3      	strb	r3, [r4, #7]
100116b6:	4b0c      	ldr	r3, [pc, #48]	; (100116e8 <gattm_att_set_value_req_handler+0x84>)
100116b8:	80af      	strh	r7, [r5, #4]
100116ba:	4798      	blx	r3
100116bc:	1c30      	adds	r0, r6, #0
100116be:	4b0b      	ldr	r3, [pc, #44]	; (100116ec <gattm_att_set_value_req_handler+0x88>)
100116c0:	4798      	blx	r3
100116c2:	7833      	ldrb	r3, [r6, #0]
100116c4:	20e2      	movs	r0, #226	; 0xe2
100116c6:	2b00      	cmp	r3, #0
100116c8:	d101      	bne.n	100116ce <gattm_att_set_value_req_handler+0x6a>
100116ca:	68ab      	ldr	r3, [r5, #8]
100116cc:	7898      	ldrb	r0, [r3, #2]
100116ce:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100116d0:	1001b160 	.word	0x1001b160
100116d4:	1001adf0 	.word	0x1001adf0
100116d8:	1001571b 	.word	0x1001571b
100116dc:	1001b16c 	.word	0x1001b16c
100116e0:	00000b0d 	.word	0x00000b0d
100116e4:	1001ade4 	.word	0x1001ade4
100116e8:	1000fe3d 	.word	0x1000fe3d
100116ec:	1000fea1 	.word	0x1000fea1

100116f0 <gattm_att_get_value_req_handler>:
100116f0:	b5f0      	push	{r4, r5, r6, r7, lr}
100116f2:	b085      	sub	sp, #20
100116f4:	9201      	str	r2, [sp, #4]
100116f6:	220a      	movs	r2, #10
100116f8:	1c04      	adds	r4, r0, #0
100116fa:	481d      	ldr	r0, [pc, #116]	; (10011770 <gattm_att_get_value_req_handler+0x80>)
100116fc:	ab02      	add	r3, sp, #8
100116fe:	1dde      	adds	r6, r3, #7
10011700:	7002      	strb	r2, [r0, #0]
10011702:	2300      	movs	r3, #0
10011704:	220b      	movs	r2, #11
10011706:	4d1b      	ldr	r5, [pc, #108]	; (10011774 <gattm_att_get_value_req_handler+0x84>)
10011708:	1c0f      	adds	r7, r1, #0
1001170a:	8829      	ldrh	r1, [r5, #0]
1001170c:	882d      	ldrh	r5, [r5, #0]
1001170e:	7101      	strb	r1, [r0, #4]
10011710:	0a2d      	lsrs	r5, r5, #8
10011712:	7145      	strb	r5, [r0, #5]
10011714:	0a25      	lsrs	r5, r4, #8
10011716:	7245      	strb	r5, [r0, #9]
10011718:	4917      	ldr	r1, [pc, #92]	; (10011778 <gattm_att_get_value_req_handler+0x88>)
1001171a:	4d18      	ldr	r5, [pc, #96]	; (1001177c <gattm_att_get_value_req_handler+0x8c>)
1001171c:	7033      	strb	r3, [r6, #0]
1001171e:	7042      	strb	r2, [r0, #1]
10011720:	7082      	strb	r2, [r0, #2]
10011722:	70c3      	strb	r3, [r0, #3]
10011724:	8029      	strh	r1, [r5, #0]
10011726:	80aa      	strh	r2, [r5, #4]
10011728:	71c3      	strb	r3, [r0, #7]
1001172a:	3a09      	subs	r2, #9
1001172c:	210a      	movs	r1, #10
1001172e:	4b14      	ldr	r3, [pc, #80]	; (10011780 <gattm_att_get_value_req_handler+0x90>)
10011730:	7182      	strb	r2, [r0, #6]
10011732:	7204      	strb	r4, [r0, #8]
10011734:	4798      	blx	r3
10011736:	1c30      	adds	r0, r6, #0
10011738:	4b12      	ldr	r3, [pc, #72]	; (10011784 <gattm_att_get_value_req_handler+0x94>)
1001173a:	4798      	blx	r3
1001173c:	7833      	ldrb	r3, [r6, #0]
1001173e:	20e2      	movs	r0, #226	; 0xe2
10011740:	2b00      	cmp	r3, #0
10011742:	d112      	bne.n	1001176a <gattm_att_get_value_req_handler+0x7a>
10011744:	68a9      	ldr	r1, [r5, #8]
10011746:	9801      	ldr	r0, [sp, #4]
10011748:	784d      	ldrb	r5, [r1, #1]
1001174a:	780b      	ldrb	r3, [r1, #0]
1001174c:	78ca      	ldrb	r2, [r1, #3]
1001174e:	022d      	lsls	r5, r5, #8
10011750:	431d      	orrs	r5, r3
10011752:	788b      	ldrb	r3, [r1, #2]
10011754:	0212      	lsls	r2, r2, #8
10011756:	431a      	orrs	r2, r3
10011758:	803a      	strh	r2, [r7, #0]
1001175a:	790e      	ldrb	r6, [r1, #4]
1001175c:	4b0a      	ldr	r3, [pc, #40]	; (10011788 <gattm_att_get_value_req_handler+0x98>)
1001175e:	3105      	adds	r1, #5
10011760:	4798      	blx	r3
10011762:	20e2      	movs	r0, #226	; 0xe2
10011764:	42ac      	cmp	r4, r5
10011766:	d100      	bne.n	1001176a <gattm_att_get_value_req_handler+0x7a>
10011768:	1c30      	adds	r0, r6, #0
1001176a:	b005      	add	sp, #20
1001176c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001176e:	46c0      	nop			; (mov r8, r8)
10011770:	1001b160 	.word	0x1001b160
10011774:	1001adf0 	.word	0x1001adf0
10011778:	00000b0b 	.word	0x00000b0b
1001177c:	1001ade4 	.word	0x1001ade4
10011780:	1000fe3d 	.word	0x1000fe3d
10011784:	1000fea1 	.word	0x1000fea1
10011788:	1001571b 	.word	0x1001571b

1001178c <htpt_enable_rsp_handler>:
1001178c:	780b      	ldrb	r3, [r1, #0]
1001178e:	7013      	strb	r3, [r2, #0]
10011790:	784b      	ldrb	r3, [r1, #1]
10011792:	7053      	strb	r3, [r2, #1]
10011794:	4770      	bx	lr

10011796 <htpt_temp_send_rsp_handler>:
10011796:	780b      	ldrb	r3, [r1, #0]
10011798:	7013      	strb	r3, [r2, #0]
1001179a:	4770      	bx	lr

1001179c <htpt_meas_intv_upd_rsp_handler>:
1001179c:	780b      	ldrb	r3, [r1, #0]
1001179e:	7013      	strb	r3, [r2, #0]
100117a0:	4770      	bx	lr

100117a2 <htpt_meas_intv_chg_req_ind_handler>:
100117a2:	78cb      	ldrb	r3, [r1, #3]
100117a4:	7889      	ldrb	r1, [r1, #2]
100117a6:	021b      	lsls	r3, r3, #8
100117a8:	430b      	orrs	r3, r1
100117aa:	8013      	strh	r3, [r2, #0]
100117ac:	4770      	bx	lr

100117ae <htpt_cfg_indntf_ind_handler>:
100117ae:	780b      	ldrb	r3, [r1, #0]
100117b0:	7013      	strb	r3, [r2, #0]
100117b2:	784b      	ldrb	r3, [r1, #1]
100117b4:	7053      	strb	r3, [r2, #1]
100117b6:	4770      	bx	lr

100117b8 <pow>:
100117b8:	b5f0      	push	{r4, r5, r6, r7, lr}
100117ba:	465f      	mov	r7, fp
100117bc:	464d      	mov	r5, r9
100117be:	4656      	mov	r6, sl
100117c0:	4644      	mov	r4, r8
100117c2:	b4f0      	push	{r4, r5, r6, r7}
100117c4:	b091      	sub	sp, #68	; 0x44
100117c6:	001f      	movs	r7, r3
100117c8:	0004      	movs	r4, r0
100117ca:	000d      	movs	r5, r1
100117cc:	0016      	movs	r6, r2
100117ce:	f000 f9af 	bl	10011b30 <__ieee754_pow>
100117d2:	4bcf      	ldr	r3, [pc, #828]	; (10011b10 <pow+0x358>)
100117d4:	9002      	str	r0, [sp, #8]
100117d6:	9103      	str	r1, [sp, #12]
100117d8:	469b      	mov	fp, r3
100117da:	781b      	ldrb	r3, [r3, #0]
100117dc:	b25b      	sxtb	r3, r3
100117de:	4699      	mov	r9, r3
100117e0:	3301      	adds	r3, #1
100117e2:	d04f      	beq.n	10011884 <pow+0xcc>
100117e4:	0032      	movs	r2, r6
100117e6:	003b      	movs	r3, r7
100117e8:	0030      	movs	r0, r6
100117ea:	0039      	movs	r1, r7
100117ec:	f003 fd82 	bl	100152f4 <__aeabi_dcmpun>
100117f0:	9000      	str	r0, [sp, #0]
100117f2:	2800      	cmp	r0, #0
100117f4:	d146      	bne.n	10011884 <pow+0xcc>
100117f6:	0022      	movs	r2, r4
100117f8:	002b      	movs	r3, r5
100117fa:	0020      	movs	r0, r4
100117fc:	0029      	movs	r1, r5
100117fe:	f003 fd79 	bl	100152f4 <__aeabi_dcmpun>
10011802:	2200      	movs	r2, #0
10011804:	4682      	mov	sl, r0
10011806:	2800      	cmp	r0, #0
10011808:	d134      	bne.n	10011874 <pow+0xbc>
1001180a:	2300      	movs	r3, #0
1001180c:	0020      	movs	r0, r4
1001180e:	0029      	movs	r1, r5
10011810:	f001 fa7c 	bl	10012d0c <__aeabi_dcmpeq>
10011814:	2800      	cmp	r0, #0
10011816:	d03a      	beq.n	1001188e <pow+0xd6>
10011818:	2200      	movs	r2, #0
1001181a:	2300      	movs	r3, #0
1001181c:	0030      	movs	r0, r6
1001181e:	0039      	movs	r1, r7
10011820:	f001 fa74 	bl	10012d0c <__aeabi_dcmpeq>
10011824:	9005      	str	r0, [sp, #20]
10011826:	2800      	cmp	r0, #0
10011828:	d100      	bne.n	1001182c <pow+0x74>
1001182a:	e074      	b.n	10011916 <pow+0x15e>
1001182c:	ab06      	add	r3, sp, #24
1001182e:	4698      	mov	r8, r3
10011830:	2301      	movs	r3, #1
10011832:	4642      	mov	r2, r8
10011834:	9306      	str	r3, [sp, #24]
10011836:	4bb7      	ldr	r3, [pc, #732]	; (10011b14 <pow+0x35c>)
10011838:	6053      	str	r3, [r2, #4]
1001183a:	4643      	mov	r3, r8
1001183c:	4652      	mov	r2, sl
1001183e:	609c      	str	r4, [r3, #8]
10011840:	60dd      	str	r5, [r3, #12]
10011842:	621a      	str	r2, [r3, #32]
10011844:	611e      	str	r6, [r3, #16]
10011846:	615f      	str	r7, [r3, #20]
10011848:	4642      	mov	r2, r8
1001184a:	2300      	movs	r3, #0
1001184c:	2400      	movs	r4, #0
1001184e:	6193      	str	r3, [r2, #24]
10011850:	61d4      	str	r4, [r2, #28]
10011852:	464b      	mov	r3, r9
10011854:	2b00      	cmp	r3, #0
10011856:	d100      	bne.n	1001185a <pow+0xa2>
10011858:	e094      	b.n	10011984 <pow+0x1cc>
1001185a:	2300      	movs	r3, #0
1001185c:	4cae      	ldr	r4, [pc, #696]	; (10011b18 <pow+0x360>)
1001185e:	9300      	str	r3, [sp, #0]
10011860:	9401      	str	r4, [sp, #4]
10011862:	9800      	ldr	r0, [sp, #0]
10011864:	9901      	ldr	r1, [sp, #4]
10011866:	b011      	add	sp, #68	; 0x44
10011868:	bc3c      	pop	{r2, r3, r4, r5}
1001186a:	4690      	mov	r8, r2
1001186c:	4699      	mov	r9, r3
1001186e:	46a2      	mov	sl, r4
10011870:	46ab      	mov	fp, r5
10011872:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011874:	2300      	movs	r3, #0
10011876:	0030      	movs	r0, r6
10011878:	0039      	movs	r1, r7
1001187a:	f001 fa47 	bl	10012d0c <__aeabi_dcmpeq>
1001187e:	2800      	cmp	r0, #0
10011880:	d000      	beq.n	10011884 <pow+0xcc>
10011882:	e0eb      	b.n	10011a5c <pow+0x2a4>
10011884:	9b02      	ldr	r3, [sp, #8]
10011886:	9c03      	ldr	r4, [sp, #12]
10011888:	9300      	str	r3, [sp, #0]
1001188a:	9401      	str	r4, [sp, #4]
1001188c:	e7e9      	b.n	10011862 <pow+0xaa>
1001188e:	9802      	ldr	r0, [sp, #8]
10011890:	9903      	ldr	r1, [sp, #12]
10011892:	f000 ff7d 	bl	10012790 <finite>
10011896:	4681      	mov	r9, r0
10011898:	2800      	cmp	r0, #0
1001189a:	d100      	bne.n	1001189e <pow+0xe6>
1001189c:	e086      	b.n	100119ac <pow+0x1f4>
1001189e:	9802      	ldr	r0, [sp, #8]
100118a0:	9903      	ldr	r1, [sp, #12]
100118a2:	2200      	movs	r2, #0
100118a4:	2300      	movs	r3, #0
100118a6:	f001 fa31 	bl	10012d0c <__aeabi_dcmpeq>
100118aa:	2800      	cmp	r0, #0
100118ac:	d0ea      	beq.n	10011884 <pow+0xcc>
100118ae:	0020      	movs	r0, r4
100118b0:	0029      	movs	r1, r5
100118b2:	f000 ff6d 	bl	10012790 <finite>
100118b6:	9a02      	ldr	r2, [sp, #8]
100118b8:	9b03      	ldr	r3, [sp, #12]
100118ba:	9200      	str	r2, [sp, #0]
100118bc:	9301      	str	r3, [sp, #4]
100118be:	2800      	cmp	r0, #0
100118c0:	d0cf      	beq.n	10011862 <pow+0xaa>
100118c2:	0030      	movs	r0, r6
100118c4:	0039      	movs	r1, r7
100118c6:	f000 ff63 	bl	10012790 <finite>
100118ca:	9a02      	ldr	r2, [sp, #8]
100118cc:	9b03      	ldr	r3, [sp, #12]
100118ce:	9200      	str	r2, [sp, #0]
100118d0:	9301      	str	r3, [sp, #4]
100118d2:	2800      	cmp	r0, #0
100118d4:	d0c5      	beq.n	10011862 <pow+0xaa>
100118d6:	ab06      	add	r3, sp, #24
100118d8:	4698      	mov	r8, r3
100118da:	2304      	movs	r3, #4
100118dc:	4642      	mov	r2, r8
100118de:	9306      	str	r3, [sp, #24]
100118e0:	4b8c      	ldr	r3, [pc, #560]	; (10011b14 <pow+0x35c>)
100118e2:	6094      	str	r4, [r2, #8]
100118e4:	60d5      	str	r5, [r2, #12]
100118e6:	6053      	str	r3, [r2, #4]
100118e8:	2300      	movs	r3, #0
100118ea:	2400      	movs	r4, #0
100118ec:	6213      	str	r3, [r2, #32]
100118ee:	2300      	movs	r3, #0
100118f0:	6193      	str	r3, [r2, #24]
100118f2:	61d4      	str	r4, [r2, #28]
100118f4:	465b      	mov	r3, fp
100118f6:	781b      	ldrb	r3, [r3, #0]
100118f8:	6116      	str	r6, [r2, #16]
100118fa:	6157      	str	r7, [r2, #20]
100118fc:	b25b      	sxtb	r3, r3
100118fe:	2b02      	cmp	r3, #2
10011900:	d004      	beq.n	1001190c <pow+0x154>
10011902:	4640      	mov	r0, r8
10011904:	f000 ff4e 	bl	100127a4 <matherr>
10011908:	2800      	cmp	r0, #0
1001190a:	d140      	bne.n	1001198e <pow+0x1d6>
1001190c:	f003 fec0 	bl	10015690 <__errno>
10011910:	2322      	movs	r3, #34	; 0x22
10011912:	6003      	str	r3, [r0, #0]
10011914:	e03b      	b.n	1001198e <pow+0x1d6>
10011916:	0030      	movs	r0, r6
10011918:	0039      	movs	r1, r7
1001191a:	f000 ff39 	bl	10012790 <finite>
1001191e:	9a02      	ldr	r2, [sp, #8]
10011920:	9b03      	ldr	r3, [sp, #12]
10011922:	9200      	str	r2, [sp, #0]
10011924:	9301      	str	r3, [sp, #4]
10011926:	2800      	cmp	r0, #0
10011928:	d09b      	beq.n	10011862 <pow+0xaa>
1001192a:	2200      	movs	r2, #0
1001192c:	2300      	movs	r3, #0
1001192e:	0030      	movs	r0, r6
10011930:	0039      	movs	r1, r7
10011932:	f001 f9f1 	bl	10012d18 <__aeabi_dcmplt>
10011936:	2800      	cmp	r0, #0
10011938:	d100      	bne.n	1001193c <pow+0x184>
1001193a:	e792      	b.n	10011862 <pow+0xaa>
1001193c:	ab06      	add	r3, sp, #24
1001193e:	4698      	mov	r8, r3
10011940:	2301      	movs	r3, #1
10011942:	4642      	mov	r2, r8
10011944:	9306      	str	r3, [sp, #24]
10011946:	4b73      	ldr	r3, [pc, #460]	; (10011b14 <pow+0x35c>)
10011948:	6053      	str	r3, [r2, #4]
1001194a:	4643      	mov	r3, r8
1001194c:	9a05      	ldr	r2, [sp, #20]
1001194e:	609c      	str	r4, [r3, #8]
10011950:	60dd      	str	r5, [r3, #12]
10011952:	621a      	str	r2, [r3, #32]
10011954:	611e      	str	r6, [r3, #16]
10011956:	615f      	str	r7, [r3, #20]
10011958:	465b      	mov	r3, fp
1001195a:	781b      	ldrb	r3, [r3, #0]
1001195c:	b25b      	sxtb	r3, r3
1001195e:	2b00      	cmp	r3, #0
10011960:	d00b      	beq.n	1001197a <pow+0x1c2>
10011962:	2000      	movs	r0, #0
10011964:	4642      	mov	r2, r8
10011966:	496d      	ldr	r1, [pc, #436]	; (10011b1c <pow+0x364>)
10011968:	6190      	str	r0, [r2, #24]
1001196a:	61d1      	str	r1, [r2, #28]
1001196c:	2b02      	cmp	r3, #2
1001196e:	d109      	bne.n	10011984 <pow+0x1cc>
10011970:	f003 fe8e 	bl	10015690 <__errno>
10011974:	2321      	movs	r3, #33	; 0x21
10011976:	6003      	str	r3, [r0, #0]
10011978:	e009      	b.n	1001198e <pow+0x1d6>
1001197a:	4642      	mov	r2, r8
1001197c:	2300      	movs	r3, #0
1001197e:	2400      	movs	r4, #0
10011980:	6193      	str	r3, [r2, #24]
10011982:	61d4      	str	r4, [r2, #28]
10011984:	4640      	mov	r0, r8
10011986:	f000 ff0d 	bl	100127a4 <matherr>
1001198a:	2800      	cmp	r0, #0
1001198c:	d0f0      	beq.n	10011970 <pow+0x1b8>
1001198e:	4643      	mov	r3, r8
10011990:	6a1b      	ldr	r3, [r3, #32]
10011992:	2b00      	cmp	r3, #0
10011994:	d004      	beq.n	100119a0 <pow+0x1e8>
10011996:	f003 fe7b 	bl	10015690 <__errno>
1001199a:	4643      	mov	r3, r8
1001199c:	6a1b      	ldr	r3, [r3, #32]
1001199e:	6003      	str	r3, [r0, #0]
100119a0:	4643      	mov	r3, r8
100119a2:	69dc      	ldr	r4, [r3, #28]
100119a4:	699b      	ldr	r3, [r3, #24]
100119a6:	9300      	str	r3, [sp, #0]
100119a8:	9401      	str	r4, [sp, #4]
100119aa:	e75a      	b.n	10011862 <pow+0xaa>
100119ac:	0020      	movs	r0, r4
100119ae:	0029      	movs	r1, r5
100119b0:	f000 feee 	bl	10012790 <finite>
100119b4:	2800      	cmp	r0, #0
100119b6:	d100      	bne.n	100119ba <pow+0x202>
100119b8:	e771      	b.n	1001189e <pow+0xe6>
100119ba:	0030      	movs	r0, r6
100119bc:	0039      	movs	r1, r7
100119be:	f000 fee7 	bl	10012790 <finite>
100119c2:	2800      	cmp	r0, #0
100119c4:	d100      	bne.n	100119c8 <pow+0x210>
100119c6:	e76a      	b.n	1001189e <pow+0xe6>
100119c8:	9802      	ldr	r0, [sp, #8]
100119ca:	9903      	ldr	r1, [sp, #12]
100119cc:	000b      	movs	r3, r1
100119ce:	0002      	movs	r2, r0
100119d0:	f003 fc90 	bl	100152f4 <__aeabi_dcmpun>
100119d4:	ab06      	add	r3, sp, #24
100119d6:	4698      	mov	r8, r3
100119d8:	2800      	cmp	r0, #0
100119da:	d17a      	bne.n	10011ad2 <pow+0x31a>
100119dc:	2303      	movs	r3, #3
100119de:	4642      	mov	r2, r8
100119e0:	9306      	str	r3, [sp, #24]
100119e2:	4b4c      	ldr	r3, [pc, #304]	; (10011b14 <pow+0x35c>)
100119e4:	6210      	str	r0, [r2, #32]
100119e6:	6053      	str	r3, [r2, #4]
100119e8:	465b      	mov	r3, fp
100119ea:	781b      	ldrb	r3, [r3, #0]
100119ec:	6094      	str	r4, [r2, #8]
100119ee:	60d5      	str	r5, [r2, #12]
100119f0:	b25b      	sxtb	r3, r3
100119f2:	6116      	str	r6, [r2, #16]
100119f4:	6157      	str	r7, [r2, #20]
100119f6:	4699      	mov	r9, r3
100119f8:	2b00      	cmp	r3, #0
100119fa:	d148      	bne.n	10011a8e <pow+0x2d6>
100119fc:	22e0      	movs	r2, #224	; 0xe0
100119fe:	4641      	mov	r1, r8
10011a00:	4b47      	ldr	r3, [pc, #284]	; (10011b20 <pow+0x368>)
10011a02:	0612      	lsls	r2, r2, #24
10011a04:	618a      	str	r2, [r1, #24]
10011a06:	61cb      	str	r3, [r1, #28]
10011a08:	0020      	movs	r0, r4
10011a0a:	2200      	movs	r2, #0
10011a0c:	2300      	movs	r3, #0
10011a0e:	0029      	movs	r1, r5
10011a10:	f001 f982 	bl	10012d18 <__aeabi_dcmplt>
10011a14:	2800      	cmp	r0, #0
10011a16:	d100      	bne.n	10011a1a <pow+0x262>
10011a18:	e773      	b.n	10011902 <pow+0x14a>
10011a1a:	2200      	movs	r2, #0
10011a1c:	4b41      	ldr	r3, [pc, #260]	; (10011b24 <pow+0x36c>)
10011a1e:	0030      	movs	r0, r6
10011a20:	0039      	movs	r1, r7
10011a22:	f002 fe99 	bl	10014758 <__aeabi_dmul>
10011a26:	0004      	movs	r4, r0
10011a28:	000d      	movs	r5, r1
10011a2a:	f000 fec3 	bl	100127b4 <rint>
10011a2e:	0002      	movs	r2, r0
10011a30:	000b      	movs	r3, r1
10011a32:	0020      	movs	r0, r4
10011a34:	0029      	movs	r1, r5
10011a36:	f001 f969 	bl	10012d0c <__aeabi_dcmpeq>
10011a3a:	2800      	cmp	r0, #0
10011a3c:	d105      	bne.n	10011a4a <pow+0x292>
10011a3e:	22e0      	movs	r2, #224	; 0xe0
10011a40:	4b39      	ldr	r3, [pc, #228]	; (10011b28 <pow+0x370>)
10011a42:	0612      	lsls	r2, r2, #24
10011a44:	4641      	mov	r1, r8
10011a46:	618a      	str	r2, [r1, #24]
10011a48:	61cb      	str	r3, [r1, #28]
10011a4a:	465b      	mov	r3, fp
10011a4c:	781b      	ldrb	r3, [r3, #0]
10011a4e:	b25b      	sxtb	r3, r3
10011a50:	4699      	mov	r9, r3
10011a52:	464b      	mov	r3, r9
10011a54:	2b02      	cmp	r3, #2
10011a56:	d000      	beq.n	10011a5a <pow+0x2a2>
10011a58:	e753      	b.n	10011902 <pow+0x14a>
10011a5a:	e757      	b.n	1001190c <pow+0x154>
10011a5c:	ab06      	add	r3, sp, #24
10011a5e:	4698      	mov	r8, r3
10011a60:	2301      	movs	r3, #1
10011a62:	4642      	mov	r2, r8
10011a64:	9306      	str	r3, [sp, #24]
10011a66:	4b2b      	ldr	r3, [pc, #172]	; (10011b14 <pow+0x35c>)
10011a68:	6053      	str	r3, [r2, #4]
10011a6a:	4643      	mov	r3, r8
10011a6c:	609c      	str	r4, [r3, #8]
10011a6e:	60dd      	str	r5, [r3, #12]
10011a70:	2400      	movs	r4, #0
10011a72:	9a00      	ldr	r2, [sp, #0]
10011a74:	4d28      	ldr	r5, [pc, #160]	; (10011b18 <pow+0x360>)
10011a76:	621a      	str	r2, [r3, #32]
10011a78:	611e      	str	r6, [r3, #16]
10011a7a:	615f      	str	r7, [r3, #20]
10011a7c:	619c      	str	r4, [r3, #24]
10011a7e:	61dd      	str	r5, [r3, #28]
10011a80:	464b      	mov	r3, r9
10011a82:	9400      	str	r4, [sp, #0]
10011a84:	9501      	str	r5, [sp, #4]
10011a86:	2b02      	cmp	r3, #2
10011a88:	d000      	beq.n	10011a8c <pow+0x2d4>
10011a8a:	e77b      	b.n	10011984 <pow+0x1cc>
10011a8c:	e6e9      	b.n	10011862 <pow+0xaa>
10011a8e:	2200      	movs	r2, #0
10011a90:	4641      	mov	r1, r8
10011a92:	4b26      	ldr	r3, [pc, #152]	; (10011b2c <pow+0x374>)
10011a94:	0020      	movs	r0, r4
10011a96:	618a      	str	r2, [r1, #24]
10011a98:	61cb      	str	r3, [r1, #28]
10011a9a:	2200      	movs	r2, #0
10011a9c:	2300      	movs	r3, #0
10011a9e:	0029      	movs	r1, r5
10011aa0:	f001 f93a 	bl	10012d18 <__aeabi_dcmplt>
10011aa4:	2800      	cmp	r0, #0
10011aa6:	d0d4      	beq.n	10011a52 <pow+0x29a>
10011aa8:	2200      	movs	r2, #0
10011aaa:	4b1e      	ldr	r3, [pc, #120]	; (10011b24 <pow+0x36c>)
10011aac:	0030      	movs	r0, r6
10011aae:	0039      	movs	r1, r7
10011ab0:	f002 fe52 	bl	10014758 <__aeabi_dmul>
10011ab4:	0004      	movs	r4, r0
10011ab6:	000d      	movs	r5, r1
10011ab8:	f000 fe7c 	bl	100127b4 <rint>
10011abc:	0002      	movs	r2, r0
10011abe:	000b      	movs	r3, r1
10011ac0:	0020      	movs	r0, r4
10011ac2:	0029      	movs	r1, r5
10011ac4:	f001 f922 	bl	10012d0c <__aeabi_dcmpeq>
10011ac8:	2800      	cmp	r0, #0
10011aca:	d1be      	bne.n	10011a4a <pow+0x292>
10011acc:	2200      	movs	r2, #0
10011ace:	4b13      	ldr	r3, [pc, #76]	; (10011b1c <pow+0x364>)
10011ad0:	e7b8      	b.n	10011a44 <pow+0x28c>
10011ad2:	2301      	movs	r3, #1
10011ad4:	4642      	mov	r2, r8
10011ad6:	9306      	str	r3, [sp, #24]
10011ad8:	4b0e      	ldr	r3, [pc, #56]	; (10011b14 <pow+0x35c>)
10011ada:	6053      	str	r3, [r2, #4]
10011adc:	4643      	mov	r3, r8
10011ade:	464a      	mov	r2, r9
10011ae0:	609c      	str	r4, [r3, #8]
10011ae2:	60dd      	str	r5, [r3, #12]
10011ae4:	621a      	str	r2, [r3, #32]
10011ae6:	611e      	str	r6, [r3, #16]
10011ae8:	615f      	str	r7, [r3, #20]
10011aea:	2400      	movs	r4, #0
10011aec:	465b      	mov	r3, fp
10011aee:	571c      	ldrsb	r4, [r3, r4]
10011af0:	2c00      	cmp	r4, #0
10011af2:	d100      	bne.n	10011af6 <pow+0x33e>
10011af4:	e741      	b.n	1001197a <pow+0x1c2>
10011af6:	2300      	movs	r3, #0
10011af8:	2200      	movs	r2, #0
10011afa:	0019      	movs	r1, r3
10011afc:	0010      	movs	r0, r2
10011afe:	f002 fa07 	bl	10013f10 <__aeabi_ddiv>
10011b02:	4643      	mov	r3, r8
10011b04:	6198      	str	r0, [r3, #24]
10011b06:	61d9      	str	r1, [r3, #28]
10011b08:	2c02      	cmp	r4, #2
10011b0a:	d100      	bne.n	10011b0e <pow+0x356>
10011b0c:	e730      	b.n	10011970 <pow+0x1b8>
10011b0e:	e739      	b.n	10011984 <pow+0x1cc>
10011b10:	10018404 	.word	0x10018404
10011b14:	100181e8 	.word	0x100181e8
10011b18:	3ff00000 	.word	0x3ff00000
10011b1c:	fff00000 	.word	0xfff00000
10011b20:	47efffff 	.word	0x47efffff
10011b24:	3fe00000 	.word	0x3fe00000
10011b28:	c7efffff 	.word	0xc7efffff
10011b2c:	7ff00000 	.word	0x7ff00000

10011b30 <__ieee754_pow>:
10011b30:	b5f0      	push	{r4, r5, r6, r7, lr}
10011b32:	4656      	mov	r6, sl
10011b34:	464d      	mov	r5, r9
10011b36:	4644      	mov	r4, r8
10011b38:	465f      	mov	r7, fp
10011b3a:	b4f0      	push	{r4, r5, r6, r7}
10011b3c:	001c      	movs	r4, r3
10011b3e:	0013      	movs	r3, r2
10011b40:	0067      	lsls	r7, r4, #1
10011b42:	b091      	sub	sp, #68	; 0x44
10011b44:	087f      	lsrs	r7, r7, #1
10011b46:	9300      	str	r3, [sp, #0]
10011b48:	9401      	str	r4, [sp, #4]
10011b4a:	0006      	movs	r6, r0
10011b4c:	000d      	movs	r5, r1
10011b4e:	4680      	mov	r8, r0
10011b50:	4689      	mov	r9, r1
10011b52:	46a2      	mov	sl, r4
10011b54:	433b      	orrs	r3, r7
10011b56:	d032      	beq.n	10011bbe <__ieee754_pow+0x8e>
10011b58:	4b6e      	ldr	r3, [pc, #440]	; (10011d14 <__ieee754_pow+0x1e4>)
10011b5a:	006c      	lsls	r4, r5, #1
10011b5c:	0864      	lsrs	r4, r4, #1
10011b5e:	429c      	cmp	r4, r3
10011b60:	dc29      	bgt.n	10011bb6 <__ieee754_pow+0x86>
10011b62:	d026      	beq.n	10011bb2 <__ieee754_pow+0x82>
10011b64:	429f      	cmp	r7, r3
10011b66:	dc26      	bgt.n	10011bb6 <__ieee754_pow+0x86>
10011b68:	4b6a      	ldr	r3, [pc, #424]	; (10011d14 <__ieee754_pow+0x1e4>)
10011b6a:	429f      	cmp	r7, r3
10011b6c:	d100      	bne.n	10011b70 <__ieee754_pow+0x40>
10011b6e:	e089      	b.n	10011c84 <__ieee754_pow+0x154>
10011b70:	2300      	movs	r3, #0
10011b72:	469b      	mov	fp, r3
10011b74:	464b      	mov	r3, r9
10011b76:	2b00      	cmp	r3, #0
10011b78:	da00      	bge.n	10011b7c <__ieee754_pow+0x4c>
10011b7a:	e087      	b.n	10011c8c <__ieee754_pow+0x15c>
10011b7c:	2a00      	cmp	r2, #0
10011b7e:	d12f      	bne.n	10011be0 <__ieee754_pow+0xb0>
10011b80:	4b64      	ldr	r3, [pc, #400]	; (10011d14 <__ieee754_pow+0x1e4>)
10011b82:	429f      	cmp	r7, r3
10011b84:	d100      	bne.n	10011b88 <__ieee754_pow+0x58>
10011b86:	e09f      	b.n	10011cc8 <__ieee754_pow+0x198>
10011b88:	4b63      	ldr	r3, [pc, #396]	; (10011d18 <__ieee754_pow+0x1e8>)
10011b8a:	429f      	cmp	r7, r3
10011b8c:	d05d      	beq.n	10011c4a <__ieee754_pow+0x11a>
10011b8e:	2380      	movs	r3, #128	; 0x80
10011b90:	05db      	lsls	r3, r3, #23
10011b92:	459a      	cmp	sl, r3
10011b94:	d101      	bne.n	10011b9a <__ieee754_pow+0x6a>
10011b96:	f000 fbc1 	bl	1001231c <__ieee754_pow+0x7ec>
10011b9a:	4b60      	ldr	r3, [pc, #384]	; (10011d1c <__ieee754_pow+0x1ec>)
10011b9c:	459a      	cmp	sl, r3
10011b9e:	d11f      	bne.n	10011be0 <__ieee754_pow+0xb0>
10011ba0:	464b      	mov	r3, r9
10011ba2:	2b00      	cmp	r3, #0
10011ba4:	db1c      	blt.n	10011be0 <__ieee754_pow+0xb0>
10011ba6:	0030      	movs	r0, r6
10011ba8:	0029      	movs	r1, r5
10011baa:	f000 fcf7 	bl	1001259c <__ieee754_sqrt>
10011bae:	0006      	movs	r6, r0
10011bb0:	e007      	b.n	10011bc2 <__ieee754_pow+0x92>
10011bb2:	2800      	cmp	r0, #0
10011bb4:	d00d      	beq.n	10011bd2 <__ieee754_pow+0xa2>
10011bb6:	4b5a      	ldr	r3, [pc, #360]	; (10011d20 <__ieee754_pow+0x1f0>)
10011bb8:	18e0      	adds	r0, r4, r3
10011bba:	4330      	orrs	r0, r6
10011bbc:	d10b      	bne.n	10011bd6 <__ieee754_pow+0xa6>
10011bbe:	2600      	movs	r6, #0
10011bc0:	4955      	ldr	r1, [pc, #340]	; (10011d18 <__ieee754_pow+0x1e8>)
10011bc2:	0030      	movs	r0, r6
10011bc4:	b011      	add	sp, #68	; 0x44
10011bc6:	bc3c      	pop	{r2, r3, r4, r5}
10011bc8:	4690      	mov	r8, r2
10011bca:	4699      	mov	r9, r3
10011bcc:	46a2      	mov	sl, r4
10011bce:	46ab      	mov	fp, r5
10011bd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011bd2:	42a7      	cmp	r7, r4
10011bd4:	ddc8      	ble.n	10011b68 <__ieee754_pow+0x38>
10011bd6:	4853      	ldr	r0, [pc, #332]	; (10011d24 <__ieee754_pow+0x1f4>)
10011bd8:	f000 fde6 	bl	100127a8 <nan>
10011bdc:	0006      	movs	r6, r0
10011bde:	e7f0      	b.n	10011bc2 <__ieee754_pow+0x92>
10011be0:	0030      	movs	r0, r6
10011be2:	0029      	movs	r1, r5
10011be4:	f000 fdd0 	bl	10012788 <fabs>
10011be8:	4643      	mov	r3, r8
10011bea:	2b00      	cmp	r3, #0
10011bec:	d01d      	beq.n	10011c2a <__ieee754_pow+0xfa>
10011bee:	0feb      	lsrs	r3, r5, #31
10011bf0:	3b01      	subs	r3, #1
10011bf2:	4698      	mov	r8, r3
10011bf4:	465b      	mov	r3, fp
10011bf6:	4642      	mov	r2, r8
10011bf8:	4313      	orrs	r3, r2
10011bfa:	d079      	beq.n	10011cf0 <__ieee754_pow+0x1c0>
10011bfc:	4b4a      	ldr	r3, [pc, #296]	; (10011d28 <__ieee754_pow+0x1f8>)
10011bfe:	429f      	cmp	r7, r3
10011c00:	dc00      	bgt.n	10011c04 <__ieee754_pow+0xd4>
10011c02:	e09f      	b.n	10011d44 <__ieee754_pow+0x214>
10011c04:	4b49      	ldr	r3, [pc, #292]	; (10011d2c <__ieee754_pow+0x1fc>)
10011c06:	429f      	cmp	r7, r3
10011c08:	dc01      	bgt.n	10011c0e <__ieee754_pow+0xde>
10011c0a:	f000 fbce 	bl	100123aa <__ieee754_pow+0x87a>
10011c0e:	4b48      	ldr	r3, [pc, #288]	; (10011d30 <__ieee754_pow+0x200>)
10011c10:	429c      	cmp	r4, r3
10011c12:	dd79      	ble.n	10011d08 <__ieee754_pow+0x1d8>
10011c14:	4653      	mov	r3, sl
10011c16:	2b00      	cmp	r3, #0
10011c18:	dd79      	ble.n	10011d0e <__ieee754_pow+0x1de>
10011c1a:	4a46      	ldr	r2, [pc, #280]	; (10011d34 <__ieee754_pow+0x204>)
10011c1c:	4b46      	ldr	r3, [pc, #280]	; (10011d38 <__ieee754_pow+0x208>)
10011c1e:	0010      	movs	r0, r2
10011c20:	0019      	movs	r1, r3
10011c22:	f002 fd99 	bl	10014758 <__aeabi_dmul>
10011c26:	0006      	movs	r6, r0
10011c28:	e7cb      	b.n	10011bc2 <__ieee754_pow+0x92>
10011c2a:	2c00      	cmp	r4, #0
10011c2c:	d004      	beq.n	10011c38 <__ieee754_pow+0x108>
10011c2e:	4a3a      	ldr	r2, [pc, #232]	; (10011d18 <__ieee754_pow+0x1e8>)
10011c30:	00ab      	lsls	r3, r5, #2
10011c32:	089b      	lsrs	r3, r3, #2
10011c34:	4293      	cmp	r3, r2
10011c36:	d1da      	bne.n	10011bee <__ieee754_pow+0xbe>
10011c38:	4653      	mov	r3, sl
10011c3a:	2b00      	cmp	r3, #0
10011c3c:	da00      	bge.n	10011c40 <__ieee754_pow+0x110>
10011c3e:	e3ad      	b.n	1001239c <__ieee754_pow+0x86c>
10011c40:	464b      	mov	r3, r9
10011c42:	2b00      	cmp	r3, #0
10011c44:	db0d      	blt.n	10011c62 <__ieee754_pow+0x132>
10011c46:	0006      	movs	r6, r0
10011c48:	e7bb      	b.n	10011bc2 <__ieee754_pow+0x92>
10011c4a:	4653      	mov	r3, sl
10011c4c:	0029      	movs	r1, r5
10011c4e:	2b00      	cmp	r3, #0
10011c50:	dab7      	bge.n	10011bc2 <__ieee754_pow+0x92>
10011c52:	0032      	movs	r2, r6
10011c54:	002b      	movs	r3, r5
10011c56:	2000      	movs	r0, #0
10011c58:	492f      	ldr	r1, [pc, #188]	; (10011d18 <__ieee754_pow+0x1e8>)
10011c5a:	f002 f959 	bl	10013f10 <__aeabi_ddiv>
10011c5e:	0006      	movs	r6, r0
10011c60:	e7af      	b.n	10011bc2 <__ieee754_pow+0x92>
10011c62:	4b2f      	ldr	r3, [pc, #188]	; (10011d20 <__ieee754_pow+0x1f0>)
10011c64:	469c      	mov	ip, r3
10011c66:	465b      	mov	r3, fp
10011c68:	4464      	add	r4, ip
10011c6a:	431c      	orrs	r4, r3
10011c6c:	d101      	bne.n	10011c72 <__ieee754_pow+0x142>
10011c6e:	f000 fc2b 	bl	100124c8 <__ieee754_pow+0x998>
10011c72:	465b      	mov	r3, fp
10011c74:	0006      	movs	r6, r0
10011c76:	2b01      	cmp	r3, #1
10011c78:	d1a3      	bne.n	10011bc2 <__ieee754_pow+0x92>
10011c7a:	2380      	movs	r3, #128	; 0x80
10011c7c:	061b      	lsls	r3, r3, #24
10011c7e:	469c      	mov	ip, r3
10011c80:	4461      	add	r1, ip
10011c82:	e79e      	b.n	10011bc2 <__ieee754_pow+0x92>
10011c84:	2a00      	cmp	r2, #0
10011c86:	d100      	bne.n	10011c8a <__ieee754_pow+0x15a>
10011c88:	e772      	b.n	10011b70 <__ieee754_pow+0x40>
10011c8a:	e794      	b.n	10011bb6 <__ieee754_pow+0x86>
10011c8c:	4b2b      	ldr	r3, [pc, #172]	; (10011d3c <__ieee754_pow+0x20c>)
10011c8e:	429f      	cmp	r7, r3
10011c90:	dc2b      	bgt.n	10011cea <__ieee754_pow+0x1ba>
10011c92:	4b27      	ldr	r3, [pc, #156]	; (10011d30 <__ieee754_pow+0x200>)
10011c94:	429f      	cmp	r7, r3
10011c96:	dc00      	bgt.n	10011c9a <__ieee754_pow+0x16a>
10011c98:	e770      	b.n	10011b7c <__ieee754_pow+0x4c>
10011c9a:	4929      	ldr	r1, [pc, #164]	; (10011d40 <__ieee754_pow+0x210>)
10011c9c:	153b      	asrs	r3, r7, #20
10011c9e:	468c      	mov	ip, r1
10011ca0:	4463      	add	r3, ip
10011ca2:	2b14      	cmp	r3, #20
10011ca4:	dc01      	bgt.n	10011caa <__ieee754_pow+0x17a>
10011ca6:	f000 fbf2 	bl	1001248e <__ieee754_pow+0x95e>
10011caa:	2134      	movs	r1, #52	; 0x34
10011cac:	1acb      	subs	r3, r1, r3
10011cae:	9900      	ldr	r1, [sp, #0]
10011cb0:	40d9      	lsrs	r1, r3
10011cb2:	0008      	movs	r0, r1
10011cb4:	4098      	lsls	r0, r3
10011cb6:	4282      	cmp	r2, r0
10011cb8:	d000      	beq.n	10011cbc <__ieee754_pow+0x18c>
10011cba:	e75f      	b.n	10011b7c <__ieee754_pow+0x4c>
10011cbc:	2301      	movs	r3, #1
10011cbe:	4019      	ands	r1, r3
10011cc0:	3301      	adds	r3, #1
10011cc2:	1a5b      	subs	r3, r3, r1
10011cc4:	469b      	mov	fp, r3
10011cc6:	e759      	b.n	10011b7c <__ieee754_pow+0x4c>
10011cc8:	4b15      	ldr	r3, [pc, #84]	; (10011d20 <__ieee754_pow+0x1f0>)
10011cca:	18e0      	adds	r0, r4, r3
10011ccc:	4306      	orrs	r6, r0
10011cce:	d100      	bne.n	10011cd2 <__ieee754_pow+0x1a2>
10011cd0:	e775      	b.n	10011bbe <__ieee754_pow+0x8e>
10011cd2:	4b17      	ldr	r3, [pc, #92]	; (10011d30 <__ieee754_pow+0x200>)
10011cd4:	429c      	cmp	r4, r3
10011cd6:	dc00      	bgt.n	10011cda <__ieee754_pow+0x1aa>
10011cd8:	e351      	b.n	1001237e <__ieee754_pow+0x84e>
10011cda:	4653      	mov	r3, sl
10011cdc:	2b00      	cmp	r3, #0
10011cde:	db16      	blt.n	10011d0e <__ieee754_pow+0x1de>
10011ce0:	9b00      	ldr	r3, [sp, #0]
10011ce2:	9c01      	ldr	r4, [sp, #4]
10011ce4:	001e      	movs	r6, r3
10011ce6:	0021      	movs	r1, r4
10011ce8:	e76b      	b.n	10011bc2 <__ieee754_pow+0x92>
10011cea:	2302      	movs	r3, #2
10011cec:	469b      	mov	fp, r3
10011cee:	e745      	b.n	10011b7c <__ieee754_pow+0x4c>
10011cf0:	0032      	movs	r2, r6
10011cf2:	002b      	movs	r3, r5
10011cf4:	0030      	movs	r0, r6
10011cf6:	0029      	movs	r1, r5
10011cf8:	f002 ffa8 	bl	10014c4c <__aeabi_dsub>
10011cfc:	0002      	movs	r2, r0
10011cfe:	000b      	movs	r3, r1
10011d00:	f002 f906 	bl	10013f10 <__aeabi_ddiv>
10011d04:	0006      	movs	r6, r0
10011d06:	e75c      	b.n	10011bc2 <__ieee754_pow+0x92>
10011d08:	4653      	mov	r3, sl
10011d0a:	2b00      	cmp	r3, #0
10011d0c:	db85      	blt.n	10011c1a <__ieee754_pow+0xea>
10011d0e:	2600      	movs	r6, #0
10011d10:	2100      	movs	r1, #0
10011d12:	e756      	b.n	10011bc2 <__ieee754_pow+0x92>
10011d14:	7ff00000 	.word	0x7ff00000
10011d18:	3ff00000 	.word	0x3ff00000
10011d1c:	3fe00000 	.word	0x3fe00000
10011d20:	c0100000 	.word	0xc0100000
10011d24:	1001796c 	.word	0x1001796c
10011d28:	41e00000 	.word	0x41e00000
10011d2c:	43f00000 	.word	0x43f00000
10011d30:	3fefffff 	.word	0x3fefffff
10011d34:	8800759c 	.word	0x8800759c
10011d38:	7e37e43c 	.word	0x7e37e43c
10011d3c:	433fffff 	.word	0x433fffff
10011d40:	fffffc01 	.word	0xfffffc01
10011d44:	4be8      	ldr	r3, [pc, #928]	; (100120e8 <__ieee754_pow+0x5b8>)
10011d46:	2200      	movs	r2, #0
10011d48:	429c      	cmp	r4, r3
10011d4a:	dc06      	bgt.n	10011d5a <__ieee754_pow+0x22a>
10011d4c:	2200      	movs	r2, #0
10011d4e:	4be7      	ldr	r3, [pc, #924]	; (100120ec <__ieee754_pow+0x5bc>)
10011d50:	f002 fd02 	bl	10014758 <__aeabi_dmul>
10011d54:	2235      	movs	r2, #53	; 0x35
10011d56:	000c      	movs	r4, r1
10011d58:	4252      	negs	r2, r2
10011d5a:	4de5      	ldr	r5, [pc, #916]	; (100120f0 <__ieee754_pow+0x5c0>)
10011d5c:	1523      	asrs	r3, r4, #20
10011d5e:	46ac      	mov	ip, r5
10011d60:	4463      	add	r3, ip
10011d62:	4699      	mov	r9, r3
10011d64:	0324      	lsls	r4, r4, #12
10011d66:	4de3      	ldr	r5, [pc, #908]	; (100120f4 <__ieee754_pow+0x5c4>)
10011d68:	4be3      	ldr	r3, [pc, #908]	; (100120f8 <__ieee754_pow+0x5c8>)
10011d6a:	0b24      	lsrs	r4, r4, #12
10011d6c:	4491      	add	r9, r2
10011d6e:	4325      	orrs	r5, r4
10011d70:	429c      	cmp	r4, r3
10011d72:	dd09      	ble.n	10011d88 <__ieee754_pow+0x258>
10011d74:	4be1      	ldr	r3, [pc, #900]	; (100120fc <__ieee754_pow+0x5cc>)
10011d76:	429c      	cmp	r4, r3
10011d78:	dc00      	bgt.n	10011d7c <__ieee754_pow+0x24c>
10011d7a:	e3a9      	b.n	100124d0 <__ieee754_pow+0x9a0>
10011d7c:	2301      	movs	r3, #1
10011d7e:	469c      	mov	ip, r3
10011d80:	4bdf      	ldr	r3, [pc, #892]	; (10012100 <__ieee754_pow+0x5d0>)
10011d82:	44e1      	add	r9, ip
10011d84:	469c      	mov	ip, r3
10011d86:	4465      	add	r5, ip
10011d88:	2300      	movs	r3, #0
10011d8a:	2400      	movs	r4, #0
10011d8c:	2200      	movs	r2, #0
10011d8e:	9308      	str	r3, [sp, #32]
10011d90:	9409      	str	r4, [sp, #36]	; 0x24
10011d92:	930c      	str	r3, [sp, #48]	; 0x30
10011d94:	940d      	str	r4, [sp, #52]	; 0x34
10011d96:	2400      	movs	r4, #0
10011d98:	4bd6      	ldr	r3, [pc, #856]	; (100120f4 <__ieee754_pow+0x5c4>)
10011d9a:	9206      	str	r2, [sp, #24]
10011d9c:	9307      	str	r3, [sp, #28]
10011d9e:	9a06      	ldr	r2, [sp, #24]
10011da0:	9b07      	ldr	r3, [sp, #28]
10011da2:	0029      	movs	r1, r5
10011da4:	900a      	str	r0, [sp, #40]	; 0x28
10011da6:	910b      	str	r1, [sp, #44]	; 0x2c
10011da8:	f002 ff50 	bl	10014c4c <__aeabi_dsub>
10011dac:	9a06      	ldr	r2, [sp, #24]
10011dae:	9b07      	ldr	r3, [sp, #28]
10011db0:	0006      	movs	r6, r0
10011db2:	000f      	movs	r7, r1
10011db4:	980a      	ldr	r0, [sp, #40]	; 0x28
10011db6:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011db8:	f001 fd7e 	bl	100138b8 <__aeabi_dadd>
10011dbc:	0002      	movs	r2, r0
10011dbe:	000b      	movs	r3, r1
10011dc0:	2000      	movs	r0, #0
10011dc2:	49cc      	ldr	r1, [pc, #816]	; (100120f4 <__ieee754_pow+0x5c4>)
10011dc4:	f002 f8a4 	bl	10013f10 <__aeabi_ddiv>
10011dc8:	000a      	movs	r2, r1
10011dca:	0001      	movs	r1, r0
10011dcc:	0013      	movs	r3, r2
10011dce:	910e      	str	r1, [sp, #56]	; 0x38
10011dd0:	920f      	str	r2, [sp, #60]	; 0x3c
10011dd2:	0002      	movs	r2, r0
10011dd4:	0039      	movs	r1, r7
10011dd6:	0030      	movs	r0, r6
10011dd8:	f002 fcbe 	bl	10014758 <__aeabi_dmul>
10011ddc:	000a      	movs	r2, r1
10011dde:	0001      	movs	r1, r0
10011de0:	2080      	movs	r0, #128	; 0x80
10011de2:	9104      	str	r1, [sp, #16]
10011de4:	9205      	str	r2, [sp, #20]
10011de6:	0013      	movs	r3, r2
10011de8:	2200      	movs	r2, #0
10011dea:	2180      	movs	r1, #128	; 0x80
10011dec:	0300      	lsls	r0, r0, #12
10011dee:	4684      	mov	ip, r0
10011df0:	9202      	str	r2, [sp, #8]
10011df2:	9303      	str	r3, [sp, #12]
10011df4:	2200      	movs	r2, #0
10011df6:	0589      	lsls	r1, r1, #22
10011df8:	106d      	asrs	r5, r5, #1
10011dfa:	430d      	orrs	r5, r1
10011dfc:	4465      	add	r5, ip
10011dfe:	192b      	adds	r3, r5, r4
10011e00:	9802      	ldr	r0, [sp, #8]
10011e02:	9903      	ldr	r1, [sp, #12]
10011e04:	0014      	movs	r4, r2
10011e06:	001d      	movs	r5, r3
10011e08:	f002 fca6 	bl	10014758 <__aeabi_dmul>
10011e0c:	0002      	movs	r2, r0
10011e0e:	000b      	movs	r3, r1
10011e10:	0030      	movs	r0, r6
10011e12:	0039      	movs	r1, r7
10011e14:	f002 ff1a 	bl	10014c4c <__aeabi_dsub>
10011e18:	9a06      	ldr	r2, [sp, #24]
10011e1a:	9b07      	ldr	r3, [sp, #28]
10011e1c:	0006      	movs	r6, r0
10011e1e:	000f      	movs	r7, r1
10011e20:	0020      	movs	r0, r4
10011e22:	0029      	movs	r1, r5
10011e24:	f002 ff12 	bl	10014c4c <__aeabi_dsub>
10011e28:	0002      	movs	r2, r0
10011e2a:	000b      	movs	r3, r1
10011e2c:	980a      	ldr	r0, [sp, #40]	; 0x28
10011e2e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011e30:	f002 ff0c 	bl	10014c4c <__aeabi_dsub>
10011e34:	9a02      	ldr	r2, [sp, #8]
10011e36:	9b03      	ldr	r3, [sp, #12]
10011e38:	f002 fc8e 	bl	10014758 <__aeabi_dmul>
10011e3c:	0002      	movs	r2, r0
10011e3e:	000b      	movs	r3, r1
10011e40:	0030      	movs	r0, r6
10011e42:	0039      	movs	r1, r7
10011e44:	f002 ff02 	bl	10014c4c <__aeabi_dsub>
10011e48:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011e4a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011e4c:	f002 fc84 	bl	10014758 <__aeabi_dmul>
10011e50:	9d04      	ldr	r5, [sp, #16]
10011e52:	9e05      	ldr	r6, [sp, #20]
10011e54:	9006      	str	r0, [sp, #24]
10011e56:	9107      	str	r1, [sp, #28]
10011e58:	002a      	movs	r2, r5
10011e5a:	0033      	movs	r3, r6
10011e5c:	0028      	movs	r0, r5
10011e5e:	0031      	movs	r1, r6
10011e60:	f002 fc7a 	bl	10014758 <__aeabi_dmul>
10011e64:	0006      	movs	r6, r0
10011e66:	000f      	movs	r7, r1
10011e68:	4aa6      	ldr	r2, [pc, #664]	; (10012104 <__ieee754_pow+0x5d4>)
10011e6a:	4ba7      	ldr	r3, [pc, #668]	; (10012108 <__ieee754_pow+0x5d8>)
10011e6c:	f002 fc74 	bl	10014758 <__aeabi_dmul>
10011e70:	4aa6      	ldr	r2, [pc, #664]	; (1001210c <__ieee754_pow+0x5dc>)
10011e72:	4ba7      	ldr	r3, [pc, #668]	; (10012110 <__ieee754_pow+0x5e0>)
10011e74:	f001 fd20 	bl	100138b8 <__aeabi_dadd>
10011e78:	0032      	movs	r2, r6
10011e7a:	003b      	movs	r3, r7
10011e7c:	f002 fc6c 	bl	10014758 <__aeabi_dmul>
10011e80:	4aa4      	ldr	r2, [pc, #656]	; (10012114 <__ieee754_pow+0x5e4>)
10011e82:	4ba5      	ldr	r3, [pc, #660]	; (10012118 <__ieee754_pow+0x5e8>)
10011e84:	f001 fd18 	bl	100138b8 <__aeabi_dadd>
10011e88:	0032      	movs	r2, r6
10011e8a:	003b      	movs	r3, r7
10011e8c:	f002 fc64 	bl	10014758 <__aeabi_dmul>
10011e90:	4aa2      	ldr	r2, [pc, #648]	; (1001211c <__ieee754_pow+0x5ec>)
10011e92:	4ba3      	ldr	r3, [pc, #652]	; (10012120 <__ieee754_pow+0x5f0>)
10011e94:	f001 fd10 	bl	100138b8 <__aeabi_dadd>
10011e98:	0032      	movs	r2, r6
10011e9a:	003b      	movs	r3, r7
10011e9c:	f002 fc5c 	bl	10014758 <__aeabi_dmul>
10011ea0:	4aa0      	ldr	r2, [pc, #640]	; (10012124 <__ieee754_pow+0x5f4>)
10011ea2:	4ba1      	ldr	r3, [pc, #644]	; (10012128 <__ieee754_pow+0x5f8>)
10011ea4:	f001 fd08 	bl	100138b8 <__aeabi_dadd>
10011ea8:	0032      	movs	r2, r6
10011eaa:	003b      	movs	r3, r7
10011eac:	f002 fc54 	bl	10014758 <__aeabi_dmul>
10011eb0:	4a9e      	ldr	r2, [pc, #632]	; (1001212c <__ieee754_pow+0x5fc>)
10011eb2:	4b9f      	ldr	r3, [pc, #636]	; (10012130 <__ieee754_pow+0x600>)
10011eb4:	f001 fd00 	bl	100138b8 <__aeabi_dadd>
10011eb8:	0032      	movs	r2, r6
10011eba:	0004      	movs	r4, r0
10011ebc:	000d      	movs	r5, r1
10011ebe:	003b      	movs	r3, r7
10011ec0:	0030      	movs	r0, r6
10011ec2:	0039      	movs	r1, r7
10011ec4:	f002 fc48 	bl	10014758 <__aeabi_dmul>
10011ec8:	0002      	movs	r2, r0
10011eca:	000b      	movs	r3, r1
10011ecc:	0020      	movs	r0, r4
10011ece:	0029      	movs	r1, r5
10011ed0:	f002 fc42 	bl	10014758 <__aeabi_dmul>
10011ed4:	9e02      	ldr	r6, [sp, #8]
10011ed6:	9f03      	ldr	r7, [sp, #12]
10011ed8:	0004      	movs	r4, r0
10011eda:	000d      	movs	r5, r1
10011edc:	9804      	ldr	r0, [sp, #16]
10011ede:	9905      	ldr	r1, [sp, #20]
10011ee0:	0032      	movs	r2, r6
10011ee2:	003b      	movs	r3, r7
10011ee4:	f001 fce8 	bl	100138b8 <__aeabi_dadd>
10011ee8:	9a06      	ldr	r2, [sp, #24]
10011eea:	9b07      	ldr	r3, [sp, #28]
10011eec:	f002 fc34 	bl	10014758 <__aeabi_dmul>
10011ef0:	0022      	movs	r2, r4
10011ef2:	002b      	movs	r3, r5
10011ef4:	f001 fce0 	bl	100138b8 <__aeabi_dadd>
10011ef8:	0032      	movs	r2, r6
10011efa:	900a      	str	r0, [sp, #40]	; 0x28
10011efc:	910b      	str	r1, [sp, #44]	; 0x2c
10011efe:	003b      	movs	r3, r7
10011f00:	0030      	movs	r0, r6
10011f02:	0039      	movs	r1, r7
10011f04:	9602      	str	r6, [sp, #8]
10011f06:	9703      	str	r7, [sp, #12]
10011f08:	f002 fc26 	bl	10014758 <__aeabi_dmul>
10011f0c:	2200      	movs	r2, #0
10011f0e:	4b89      	ldr	r3, [pc, #548]	; (10012134 <__ieee754_pow+0x604>)
10011f10:	0004      	movs	r4, r0
10011f12:	000d      	movs	r5, r1
10011f14:	f001 fcd0 	bl	100138b8 <__aeabi_dadd>
10011f18:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011f1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011f1c:	f001 fccc 	bl	100138b8 <__aeabi_dadd>
10011f20:	2600      	movs	r6, #0
10011f22:	000f      	movs	r7, r1
10011f24:	0032      	movs	r2, r6
10011f26:	000b      	movs	r3, r1
10011f28:	9802      	ldr	r0, [sp, #8]
10011f2a:	9903      	ldr	r1, [sp, #12]
10011f2c:	f002 fc14 	bl	10014758 <__aeabi_dmul>
10011f30:	2200      	movs	r2, #0
10011f32:	9002      	str	r0, [sp, #8]
10011f34:	9103      	str	r1, [sp, #12]
10011f36:	4b7f      	ldr	r3, [pc, #508]	; (10012134 <__ieee754_pow+0x604>)
10011f38:	0030      	movs	r0, r6
10011f3a:	0039      	movs	r1, r7
10011f3c:	f002 fe86 	bl	10014c4c <__aeabi_dsub>
10011f40:	0022      	movs	r2, r4
10011f42:	002b      	movs	r3, r5
10011f44:	f002 fe82 	bl	10014c4c <__aeabi_dsub>
10011f48:	0002      	movs	r2, r0
10011f4a:	000b      	movs	r3, r1
10011f4c:	980a      	ldr	r0, [sp, #40]	; 0x28
10011f4e:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011f50:	f002 fe7c 	bl	10014c4c <__aeabi_dsub>
10011f54:	9a04      	ldr	r2, [sp, #16]
10011f56:	9b05      	ldr	r3, [sp, #20]
10011f58:	f002 fbfe 	bl	10014758 <__aeabi_dmul>
10011f5c:	0032      	movs	r2, r6
10011f5e:	0004      	movs	r4, r0
10011f60:	000d      	movs	r5, r1
10011f62:	9806      	ldr	r0, [sp, #24]
10011f64:	9907      	ldr	r1, [sp, #28]
10011f66:	003b      	movs	r3, r7
10011f68:	f002 fbf6 	bl	10014758 <__aeabi_dmul>
10011f6c:	0002      	movs	r2, r0
10011f6e:	000b      	movs	r3, r1
10011f70:	0020      	movs	r0, r4
10011f72:	0029      	movs	r1, r5
10011f74:	f001 fca0 	bl	100138b8 <__aeabi_dadd>
10011f78:	0004      	movs	r4, r0
10011f7a:	000d      	movs	r5, r1
10011f7c:	0002      	movs	r2, r0
10011f7e:	000b      	movs	r3, r1
10011f80:	9802      	ldr	r0, [sp, #8]
10011f82:	9903      	ldr	r1, [sp, #12]
10011f84:	f001 fc98 	bl	100138b8 <__aeabi_dadd>
10011f88:	2600      	movs	r6, #0
10011f8a:	22e0      	movs	r2, #224	; 0xe0
10011f8c:	4b6a      	ldr	r3, [pc, #424]	; (10012138 <__ieee754_pow+0x608>)
10011f8e:	0612      	lsls	r2, r2, #24
10011f90:	0030      	movs	r0, r6
10011f92:	000f      	movs	r7, r1
10011f94:	f002 fbe0 	bl	10014758 <__aeabi_dmul>
10011f98:	9a02      	ldr	r2, [sp, #8]
10011f9a:	9b03      	ldr	r3, [sp, #12]
10011f9c:	9004      	str	r0, [sp, #16]
10011f9e:	9105      	str	r1, [sp, #20]
10011fa0:	0030      	movs	r0, r6
10011fa2:	0039      	movs	r1, r7
10011fa4:	f002 fe52 	bl	10014c4c <__aeabi_dsub>
10011fa8:	0002      	movs	r2, r0
10011faa:	000b      	movs	r3, r1
10011fac:	0020      	movs	r0, r4
10011fae:	0029      	movs	r1, r5
10011fb0:	f002 fe4c 	bl	10014c4c <__aeabi_dsub>
10011fb4:	4a61      	ldr	r2, [pc, #388]	; (1001213c <__ieee754_pow+0x60c>)
10011fb6:	4b60      	ldr	r3, [pc, #384]	; (10012138 <__ieee754_pow+0x608>)
10011fb8:	f002 fbce 	bl	10014758 <__aeabi_dmul>
10011fbc:	4a60      	ldr	r2, [pc, #384]	; (10012140 <__ieee754_pow+0x610>)
10011fbe:	0004      	movs	r4, r0
10011fc0:	000d      	movs	r5, r1
10011fc2:	4b60      	ldr	r3, [pc, #384]	; (10012144 <__ieee754_pow+0x614>)
10011fc4:	0030      	movs	r0, r6
10011fc6:	0039      	movs	r1, r7
10011fc8:	f002 fbc6 	bl	10014758 <__aeabi_dmul>
10011fcc:	0002      	movs	r2, r0
10011fce:	000b      	movs	r3, r1
10011fd0:	0020      	movs	r0, r4
10011fd2:	0029      	movs	r1, r5
10011fd4:	f001 fc70 	bl	100138b8 <__aeabi_dadd>
10011fd8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011fda:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10011fdc:	f001 fc6c 	bl	100138b8 <__aeabi_dadd>
10011fe0:	0006      	movs	r6, r0
10011fe2:	4648      	mov	r0, r9
10011fe4:	000f      	movs	r7, r1
10011fe6:	f003 f9db 	bl	100153a0 <__aeabi_i2d>
10011fea:	0004      	movs	r4, r0
10011fec:	000d      	movs	r5, r1
10011fee:	9804      	ldr	r0, [sp, #16]
10011ff0:	9905      	ldr	r1, [sp, #20]
10011ff2:	0032      	movs	r2, r6
10011ff4:	003b      	movs	r3, r7
10011ff6:	f001 fc5f 	bl	100138b8 <__aeabi_dadd>
10011ffa:	9a08      	ldr	r2, [sp, #32]
10011ffc:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011ffe:	f001 fc5b 	bl	100138b8 <__aeabi_dadd>
10012002:	0022      	movs	r2, r4
10012004:	002b      	movs	r3, r5
10012006:	f001 fc57 	bl	100138b8 <__aeabi_dadd>
1001200a:	2000      	movs	r0, #0
1001200c:	0022      	movs	r2, r4
1001200e:	002b      	movs	r3, r5
10012010:	9002      	str	r0, [sp, #8]
10012012:	9103      	str	r1, [sp, #12]
10012014:	f002 fe1a 	bl	10014c4c <__aeabi_dsub>
10012018:	9a08      	ldr	r2, [sp, #32]
1001201a:	9b09      	ldr	r3, [sp, #36]	; 0x24
1001201c:	f002 fe16 	bl	10014c4c <__aeabi_dsub>
10012020:	9a04      	ldr	r2, [sp, #16]
10012022:	9b05      	ldr	r3, [sp, #20]
10012024:	f002 fe12 	bl	10014c4c <__aeabi_dsub>
10012028:	0002      	movs	r2, r0
1001202a:	000b      	movs	r3, r1
1001202c:	0030      	movs	r0, r6
1001202e:	0039      	movs	r1, r7
10012030:	f002 fe0c 	bl	10014c4c <__aeabi_dsub>
10012034:	9004      	str	r0, [sp, #16]
10012036:	9105      	str	r1, [sp, #20]
10012038:	465b      	mov	r3, fp
1001203a:	4642      	mov	r2, r8
1001203c:	3b01      	subs	r3, #1
1001203e:	4313      	orrs	r3, r2
10012040:	d100      	bne.n	10012044 <__ieee754_pow+0x514>
10012042:	e197      	b.n	10012374 <__ieee754_pow+0x844>
10012044:	2300      	movs	r3, #0
10012046:	4c2b      	ldr	r4, [pc, #172]	; (100120f4 <__ieee754_pow+0x5c4>)
10012048:	9306      	str	r3, [sp, #24]
1001204a:	9407      	str	r4, [sp, #28]
1001204c:	9800      	ldr	r0, [sp, #0]
1001204e:	9901      	ldr	r1, [sp, #4]
10012050:	2600      	movs	r6, #0
10012052:	000b      	movs	r3, r1
10012054:	0032      	movs	r2, r6
10012056:	000f      	movs	r7, r1
10012058:	f002 fdf8 	bl	10014c4c <__aeabi_dsub>
1001205c:	9a02      	ldr	r2, [sp, #8]
1001205e:	9b03      	ldr	r3, [sp, #12]
10012060:	f002 fb7a 	bl	10014758 <__aeabi_dmul>
10012064:	9a00      	ldr	r2, [sp, #0]
10012066:	9b01      	ldr	r3, [sp, #4]
10012068:	0004      	movs	r4, r0
1001206a:	000d      	movs	r5, r1
1001206c:	9804      	ldr	r0, [sp, #16]
1001206e:	9905      	ldr	r1, [sp, #20]
10012070:	f002 fb72 	bl	10014758 <__aeabi_dmul>
10012074:	0002      	movs	r2, r0
10012076:	000b      	movs	r3, r1
10012078:	0020      	movs	r0, r4
1001207a:	0029      	movs	r1, r5
1001207c:	f001 fc1c 	bl	100138b8 <__aeabi_dadd>
10012080:	0004      	movs	r4, r0
10012082:	000d      	movs	r5, r1
10012084:	9802      	ldr	r0, [sp, #8]
10012086:	9903      	ldr	r1, [sp, #12]
10012088:	003b      	movs	r3, r7
1001208a:	0032      	movs	r2, r6
1001208c:	9404      	str	r4, [sp, #16]
1001208e:	9505      	str	r5, [sp, #20]
10012090:	f002 fb62 	bl	10014758 <__aeabi_dmul>
10012094:	9000      	str	r0, [sp, #0]
10012096:	9101      	str	r1, [sp, #4]
10012098:	000b      	movs	r3, r1
1001209a:	0002      	movs	r2, r0
1001209c:	0029      	movs	r1, r5
1001209e:	0020      	movs	r0, r4
100120a0:	f001 fc0a 	bl	100138b8 <__aeabi_dadd>
100120a4:	4b28      	ldr	r3, [pc, #160]	; (10012148 <__ieee754_pow+0x618>)
100120a6:	4681      	mov	r9, r0
100120a8:	1e0f      	subs	r7, r1, #0
100120aa:	468a      	mov	sl, r1
100120ac:	429f      	cmp	r7, r3
100120ae:	dc00      	bgt.n	100120b2 <__ieee754_pow+0x582>
100120b0:	e13c      	b.n	1001232c <__ieee754_pow+0x7fc>
100120b2:	4b26      	ldr	r3, [pc, #152]	; (1001214c <__ieee754_pow+0x61c>)
100120b4:	18cb      	adds	r3, r1, r3
100120b6:	4303      	orrs	r3, r0
100120b8:	d000      	beq.n	100120bc <__ieee754_pow+0x58c>
100120ba:	e1db      	b.n	10012474 <__ieee754_pow+0x944>
100120bc:	9804      	ldr	r0, [sp, #16]
100120be:	9905      	ldr	r1, [sp, #20]
100120c0:	4a23      	ldr	r2, [pc, #140]	; (10012150 <__ieee754_pow+0x620>)
100120c2:	4b24      	ldr	r3, [pc, #144]	; (10012154 <__ieee754_pow+0x624>)
100120c4:	f001 fbf8 	bl	100138b8 <__aeabi_dadd>
100120c8:	9a00      	ldr	r2, [sp, #0]
100120ca:	9b01      	ldr	r3, [sp, #4]
100120cc:	0004      	movs	r4, r0
100120ce:	000d      	movs	r5, r1
100120d0:	4648      	mov	r0, r9
100120d2:	0039      	movs	r1, r7
100120d4:	f002 fdba 	bl	10014c4c <__aeabi_dsub>
100120d8:	0002      	movs	r2, r0
100120da:	000b      	movs	r3, r1
100120dc:	0020      	movs	r0, r4
100120de:	0029      	movs	r1, r5
100120e0:	f000 fe2e 	bl	10012d40 <__aeabi_dcmpgt>
100120e4:	003e      	movs	r6, r7
100120e6:	e037      	b.n	10012158 <__ieee754_pow+0x628>
100120e8:	000fffff 	.word	0x000fffff
100120ec:	43400000 	.word	0x43400000
100120f0:	fffffc01 	.word	0xfffffc01
100120f4:	3ff00000 	.word	0x3ff00000
100120f8:	0003988e 	.word	0x0003988e
100120fc:	000bb679 	.word	0x000bb679
10012100:	fff00000 	.word	0xfff00000
10012104:	4a454eef 	.word	0x4a454eef
10012108:	3fca7e28 	.word	0x3fca7e28
1001210c:	93c9db65 	.word	0x93c9db65
10012110:	3fcd864a 	.word	0x3fcd864a
10012114:	a91d4101 	.word	0xa91d4101
10012118:	3fd17460 	.word	0x3fd17460
1001211c:	518f264d 	.word	0x518f264d
10012120:	3fd55555 	.word	0x3fd55555
10012124:	db6fabff 	.word	0xdb6fabff
10012128:	3fdb6db6 	.word	0x3fdb6db6
1001212c:	33333303 	.word	0x33333303
10012130:	3fe33333 	.word	0x3fe33333
10012134:	40080000 	.word	0x40080000
10012138:	3feec709 	.word	0x3feec709
1001213c:	dc3a03fd 	.word	0xdc3a03fd
10012140:	145b01f5 	.word	0x145b01f5
10012144:	be3e2fe0 	.word	0xbe3e2fe0
10012148:	408fffff 	.word	0x408fffff
1001214c:	bf700000 	.word	0xbf700000
10012150:	652b82fe 	.word	0x652b82fe
10012154:	3c971547 	.word	0x3c971547
10012158:	2800      	cmp	r0, #0
1001215a:	d000      	beq.n	1001215e <__ieee754_pow+0x62e>
1001215c:	e18a      	b.n	10012474 <__ieee754_pow+0x944>
1001215e:	2280      	movs	r2, #128	; 0x80
10012160:	4be7      	ldr	r3, [pc, #924]	; (10012500 <__ieee754_pow+0x9d0>)
10012162:	0352      	lsls	r2, r2, #13
10012164:	469c      	mov	ip, r3
10012166:	0013      	movs	r3, r2
10012168:	1536      	asrs	r6, r6, #20
1001216a:	4466      	add	r6, ip
1001216c:	4133      	asrs	r3, r6
1001216e:	49e5      	ldr	r1, [pc, #916]	; (10012504 <__ieee754_pow+0x9d4>)
10012170:	19db      	adds	r3, r3, r7
10012172:	005e      	lsls	r6, r3, #1
10012174:	001c      	movs	r4, r3
10012176:	031b      	lsls	r3, r3, #12
10012178:	468c      	mov	ip, r1
1001217a:	0b1b      	lsrs	r3, r3, #12
1001217c:	4313      	orrs	r3, r2
1001217e:	2214      	movs	r2, #20
10012180:	0d76      	lsrs	r6, r6, #21
10012182:	4fe1      	ldr	r7, [pc, #900]	; (10012508 <__ieee754_pow+0x9d8>)
10012184:	4466      	add	r6, ip
10012186:	4137      	asrs	r7, r6
10012188:	1b96      	subs	r6, r2, r6
1001218a:	4133      	asrs	r3, r6
1001218c:	4698      	mov	r8, r3
1001218e:	4653      	mov	r3, sl
10012190:	43bc      	bics	r4, r7
10012192:	2000      	movs	r0, #0
10012194:	0021      	movs	r1, r4
10012196:	2b00      	cmp	r3, #0
10012198:	da00      	bge.n	1001219c <__ieee754_pow+0x66c>
1001219a:	e1a9      	b.n	100124f0 <__ieee754_pow+0x9c0>
1001219c:	0002      	movs	r2, r0
1001219e:	000b      	movs	r3, r1
100121a0:	9800      	ldr	r0, [sp, #0]
100121a2:	9901      	ldr	r1, [sp, #4]
100121a4:	f002 fd52 	bl	10014c4c <__aeabi_dsub>
100121a8:	000b      	movs	r3, r1
100121aa:	9000      	str	r0, [sp, #0]
100121ac:	9101      	str	r1, [sp, #4]
100121ae:	0002      	movs	r2, r0
100121b0:	9804      	ldr	r0, [sp, #16]
100121b2:	9905      	ldr	r1, [sp, #20]
100121b4:	f001 fb80 	bl	100138b8 <__aeabi_dadd>
100121b8:	4643      	mov	r3, r8
100121ba:	051b      	lsls	r3, r3, #20
100121bc:	4699      	mov	r9, r3
100121be:	2000      	movs	r0, #0
100121c0:	2200      	movs	r2, #0
100121c2:	4bd2      	ldr	r3, [pc, #840]	; (1001250c <__ieee754_pow+0x9dc>)
100121c4:	0006      	movs	r6, r0
100121c6:	000f      	movs	r7, r1
100121c8:	f002 fac6 	bl	10014758 <__aeabi_dmul>
100121cc:	9a00      	ldr	r2, [sp, #0]
100121ce:	9b01      	ldr	r3, [sp, #4]
100121d0:	9002      	str	r0, [sp, #8]
100121d2:	9103      	str	r1, [sp, #12]
100121d4:	0030      	movs	r0, r6
100121d6:	0039      	movs	r1, r7
100121d8:	f002 fd38 	bl	10014c4c <__aeabi_dsub>
100121dc:	0002      	movs	r2, r0
100121de:	000b      	movs	r3, r1
100121e0:	9804      	ldr	r0, [sp, #16]
100121e2:	9905      	ldr	r1, [sp, #20]
100121e4:	f002 fd32 	bl	10014c4c <__aeabi_dsub>
100121e8:	4ac9      	ldr	r2, [pc, #804]	; (10012510 <__ieee754_pow+0x9e0>)
100121ea:	4bca      	ldr	r3, [pc, #808]	; (10012514 <__ieee754_pow+0x9e4>)
100121ec:	f002 fab4 	bl	10014758 <__aeabi_dmul>
100121f0:	4ac9      	ldr	r2, [pc, #804]	; (10012518 <__ieee754_pow+0x9e8>)
100121f2:	0004      	movs	r4, r0
100121f4:	000d      	movs	r5, r1
100121f6:	4bc9      	ldr	r3, [pc, #804]	; (1001251c <__ieee754_pow+0x9ec>)
100121f8:	0030      	movs	r0, r6
100121fa:	0039      	movs	r1, r7
100121fc:	f002 faac 	bl	10014758 <__aeabi_dmul>
10012200:	0002      	movs	r2, r0
10012202:	000b      	movs	r3, r1
10012204:	0020      	movs	r0, r4
10012206:	0029      	movs	r1, r5
10012208:	f001 fb56 	bl	100138b8 <__aeabi_dadd>
1001220c:	0004      	movs	r4, r0
1001220e:	000d      	movs	r5, r1
10012210:	0002      	movs	r2, r0
10012212:	000b      	movs	r3, r1
10012214:	9802      	ldr	r0, [sp, #8]
10012216:	9903      	ldr	r1, [sp, #12]
10012218:	f001 fb4e 	bl	100138b8 <__aeabi_dadd>
1001221c:	9a02      	ldr	r2, [sp, #8]
1001221e:	9b03      	ldr	r3, [sp, #12]
10012220:	0006      	movs	r6, r0
10012222:	000f      	movs	r7, r1
10012224:	f002 fd12 	bl	10014c4c <__aeabi_dsub>
10012228:	0002      	movs	r2, r0
1001222a:	000b      	movs	r3, r1
1001222c:	0020      	movs	r0, r4
1001222e:	0029      	movs	r1, r5
10012230:	f002 fd0c 	bl	10014c4c <__aeabi_dsub>
10012234:	0032      	movs	r2, r6
10012236:	9000      	str	r0, [sp, #0]
10012238:	9101      	str	r1, [sp, #4]
1001223a:	003b      	movs	r3, r7
1001223c:	0030      	movs	r0, r6
1001223e:	0039      	movs	r1, r7
10012240:	f002 fa8a 	bl	10014758 <__aeabi_dmul>
10012244:	0004      	movs	r4, r0
10012246:	000d      	movs	r5, r1
10012248:	4ab5      	ldr	r2, [pc, #724]	; (10012520 <__ieee754_pow+0x9f0>)
1001224a:	4bb6      	ldr	r3, [pc, #728]	; (10012524 <__ieee754_pow+0x9f4>)
1001224c:	f002 fa84 	bl	10014758 <__aeabi_dmul>
10012250:	4ab5      	ldr	r2, [pc, #724]	; (10012528 <__ieee754_pow+0x9f8>)
10012252:	4bb6      	ldr	r3, [pc, #728]	; (1001252c <__ieee754_pow+0x9fc>)
10012254:	f002 fcfa 	bl	10014c4c <__aeabi_dsub>
10012258:	0022      	movs	r2, r4
1001225a:	002b      	movs	r3, r5
1001225c:	f002 fa7c 	bl	10014758 <__aeabi_dmul>
10012260:	4ab3      	ldr	r2, [pc, #716]	; (10012530 <__ieee754_pow+0xa00>)
10012262:	4bb4      	ldr	r3, [pc, #720]	; (10012534 <__ieee754_pow+0xa04>)
10012264:	f001 fb28 	bl	100138b8 <__aeabi_dadd>
10012268:	0022      	movs	r2, r4
1001226a:	002b      	movs	r3, r5
1001226c:	f002 fa74 	bl	10014758 <__aeabi_dmul>
10012270:	4ab1      	ldr	r2, [pc, #708]	; (10012538 <__ieee754_pow+0xa08>)
10012272:	4bb2      	ldr	r3, [pc, #712]	; (1001253c <__ieee754_pow+0xa0c>)
10012274:	f002 fcea 	bl	10014c4c <__aeabi_dsub>
10012278:	0022      	movs	r2, r4
1001227a:	002b      	movs	r3, r5
1001227c:	f002 fa6c 	bl	10014758 <__aeabi_dmul>
10012280:	4aaf      	ldr	r2, [pc, #700]	; (10012540 <__ieee754_pow+0xa10>)
10012282:	4bb0      	ldr	r3, [pc, #704]	; (10012544 <__ieee754_pow+0xa14>)
10012284:	f001 fb18 	bl	100138b8 <__aeabi_dadd>
10012288:	0022      	movs	r2, r4
1001228a:	002b      	movs	r3, r5
1001228c:	f002 fa64 	bl	10014758 <__aeabi_dmul>
10012290:	0002      	movs	r2, r0
10012292:	000b      	movs	r3, r1
10012294:	0030      	movs	r0, r6
10012296:	0039      	movs	r1, r7
10012298:	f002 fcd8 	bl	10014c4c <__aeabi_dsub>
1001229c:	0004      	movs	r4, r0
1001229e:	000d      	movs	r5, r1
100122a0:	0002      	movs	r2, r0
100122a2:	000b      	movs	r3, r1
100122a4:	0030      	movs	r0, r6
100122a6:	0039      	movs	r1, r7
100122a8:	f002 fa56 	bl	10014758 <__aeabi_dmul>
100122ac:	2380      	movs	r3, #128	; 0x80
100122ae:	9002      	str	r0, [sp, #8]
100122b0:	9103      	str	r1, [sp, #12]
100122b2:	2200      	movs	r2, #0
100122b4:	05db      	lsls	r3, r3, #23
100122b6:	0020      	movs	r0, r4
100122b8:	0029      	movs	r1, r5
100122ba:	f002 fcc7 	bl	10014c4c <__aeabi_dsub>
100122be:	0002      	movs	r2, r0
100122c0:	000b      	movs	r3, r1
100122c2:	9802      	ldr	r0, [sp, #8]
100122c4:	9903      	ldr	r1, [sp, #12]
100122c6:	f001 fe23 	bl	10013f10 <__aeabi_ddiv>
100122ca:	9a00      	ldr	r2, [sp, #0]
100122cc:	9b01      	ldr	r3, [sp, #4]
100122ce:	0004      	movs	r4, r0
100122d0:	000d      	movs	r5, r1
100122d2:	0030      	movs	r0, r6
100122d4:	0039      	movs	r1, r7
100122d6:	f002 fa3f 	bl	10014758 <__aeabi_dmul>
100122da:	9a00      	ldr	r2, [sp, #0]
100122dc:	9b01      	ldr	r3, [sp, #4]
100122de:	f001 faeb 	bl	100138b8 <__aeabi_dadd>
100122e2:	0002      	movs	r2, r0
100122e4:	000b      	movs	r3, r1
100122e6:	0020      	movs	r0, r4
100122e8:	0029      	movs	r1, r5
100122ea:	f002 fcaf 	bl	10014c4c <__aeabi_dsub>
100122ee:	0032      	movs	r2, r6
100122f0:	003b      	movs	r3, r7
100122f2:	f002 fcab 	bl	10014c4c <__aeabi_dsub>
100122f6:	0002      	movs	r2, r0
100122f8:	000b      	movs	r3, r1
100122fa:	2000      	movs	r0, #0
100122fc:	4992      	ldr	r1, [pc, #584]	; (10012548 <__ieee754_pow+0xa18>)
100122fe:	f002 fca5 	bl	10014c4c <__aeabi_dsub>
10012302:	464b      	mov	r3, r9
10012304:	185b      	adds	r3, r3, r1
10012306:	151a      	asrs	r2, r3, #20
10012308:	2a00      	cmp	r2, #0
1001230a:	dc00      	bgt.n	1001230e <__ieee754_pow+0x7de>
1001230c:	e0f4      	b.n	100124f8 <__ieee754_pow+0x9c8>
1001230e:	0019      	movs	r1, r3
10012310:	9a06      	ldr	r2, [sp, #24]
10012312:	9b07      	ldr	r3, [sp, #28]
10012314:	f002 fa20 	bl	10014758 <__aeabi_dmul>
10012318:	0006      	movs	r6, r0
1001231a:	e452      	b.n	10011bc2 <__ieee754_pow+0x92>
1001231c:	0032      	movs	r2, r6
1001231e:	0030      	movs	r0, r6
10012320:	002b      	movs	r3, r5
10012322:	0029      	movs	r1, r5
10012324:	f002 fa18 	bl	10014758 <__aeabi_dmul>
10012328:	0006      	movs	r6, r0
1001232a:	e44a      	b.n	10011bc2 <__ieee754_pow+0x92>
1001232c:	4b87      	ldr	r3, [pc, #540]	; (1001254c <__ieee754_pow+0xa1c>)
1001232e:	004e      	lsls	r6, r1, #1
10012330:	0876      	lsrs	r6, r6, #1
10012332:	429e      	cmp	r6, r3
10012334:	dc00      	bgt.n	10012338 <__ieee754_pow+0x808>
10012336:	e0bf      	b.n	100124b8 <__ieee754_pow+0x988>
10012338:	4b85      	ldr	r3, [pc, #532]	; (10012550 <__ieee754_pow+0xa20>)
1001233a:	18cb      	adds	r3, r1, r3
1001233c:	4303      	orrs	r3, r0
1001233e:	d10c      	bne.n	1001235a <__ieee754_pow+0x82a>
10012340:	9a00      	ldr	r2, [sp, #0]
10012342:	9b01      	ldr	r3, [sp, #4]
10012344:	f002 fc82 	bl	10014c4c <__aeabi_dsub>
10012348:	0002      	movs	r2, r0
1001234a:	000b      	movs	r3, r1
1001234c:	9804      	ldr	r0, [sp, #16]
1001234e:	9905      	ldr	r1, [sp, #20]
10012350:	f000 fcec 	bl	10012d2c <__aeabi_dcmple>
10012354:	2800      	cmp	r0, #0
10012356:	d100      	bne.n	1001235a <__ieee754_pow+0x82a>
10012358:	e701      	b.n	1001215e <__ieee754_pow+0x62e>
1001235a:	9806      	ldr	r0, [sp, #24]
1001235c:	9907      	ldr	r1, [sp, #28]
1001235e:	4a7d      	ldr	r2, [pc, #500]	; (10012554 <__ieee754_pow+0xa24>)
10012360:	4b7d      	ldr	r3, [pc, #500]	; (10012558 <__ieee754_pow+0xa28>)
10012362:	f002 f9f9 	bl	10014758 <__aeabi_dmul>
10012366:	4a7b      	ldr	r2, [pc, #492]	; (10012554 <__ieee754_pow+0xa24>)
10012368:	4b7b      	ldr	r3, [pc, #492]	; (10012558 <__ieee754_pow+0xa28>)
1001236a:	f002 f9f5 	bl	10014758 <__aeabi_dmul>
1001236e:	0006      	movs	r6, r0
10012370:	f7ff fc27 	bl	10011bc2 <__ieee754_pow+0x92>
10012374:	2300      	movs	r3, #0
10012376:	4c79      	ldr	r4, [pc, #484]	; (1001255c <__ieee754_pow+0xa2c>)
10012378:	9306      	str	r3, [sp, #24]
1001237a:	9407      	str	r4, [sp, #28]
1001237c:	e666      	b.n	1001204c <__ieee754_pow+0x51c>
1001237e:	4653      	mov	r3, sl
10012380:	2b00      	cmp	r3, #0
10012382:	db00      	blt.n	10012386 <__ieee754_pow+0x856>
10012384:	e4c3      	b.n	10011d0e <__ieee754_pow+0x1de>
10012386:	9b00      	ldr	r3, [sp, #0]
10012388:	9c01      	ldr	r4, [sp, #4]
1001238a:	2280      	movs	r2, #128	; 0x80
1001238c:	0612      	lsls	r2, r2, #24
1001238e:	001e      	movs	r6, r3
10012390:	4694      	mov	ip, r2
10012392:	0023      	movs	r3, r4
10012394:	4463      	add	r3, ip
10012396:	0019      	movs	r1, r3
10012398:	f7ff fc13 	bl	10011bc2 <__ieee754_pow+0x92>
1001239c:	0002      	movs	r2, r0
1001239e:	000b      	movs	r3, r1
100123a0:	2000      	movs	r0, #0
100123a2:	4969      	ldr	r1, [pc, #420]	; (10012548 <__ieee754_pow+0xa18>)
100123a4:	f001 fdb4 	bl	10013f10 <__aeabi_ddiv>
100123a8:	e44a      	b.n	10011c40 <__ieee754_pow+0x110>
100123aa:	4b6d      	ldr	r3, [pc, #436]	; (10012560 <__ieee754_pow+0xa30>)
100123ac:	429c      	cmp	r4, r3
100123ae:	dc00      	bgt.n	100123b2 <__ieee754_pow+0x882>
100123b0:	e4aa      	b.n	10011d08 <__ieee754_pow+0x1d8>
100123b2:	4b65      	ldr	r3, [pc, #404]	; (10012548 <__ieee754_pow+0xa18>)
100123b4:	429c      	cmp	r4, r3
100123b6:	dd01      	ble.n	100123bc <__ieee754_pow+0x88c>
100123b8:	f7ff fc2c 	bl	10011c14 <__ieee754_pow+0xe4>
100123bc:	2200      	movs	r2, #0
100123be:	4b62      	ldr	r3, [pc, #392]	; (10012548 <__ieee754_pow+0xa18>)
100123c0:	f002 fc44 	bl	10014c4c <__aeabi_dsub>
100123c4:	22c0      	movs	r2, #192	; 0xc0
100123c6:	4b67      	ldr	r3, [pc, #412]	; (10012564 <__ieee754_pow+0xa34>)
100123c8:	05d2      	lsls	r2, r2, #23
100123ca:	0004      	movs	r4, r0
100123cc:	000d      	movs	r5, r1
100123ce:	f002 f9c3 	bl	10014758 <__aeabi_dmul>
100123d2:	4a65      	ldr	r2, [pc, #404]	; (10012568 <__ieee754_pow+0xa38>)
100123d4:	0006      	movs	r6, r0
100123d6:	000f      	movs	r7, r1
100123d8:	4b64      	ldr	r3, [pc, #400]	; (1001256c <__ieee754_pow+0xa3c>)
100123da:	0020      	movs	r0, r4
100123dc:	0029      	movs	r1, r5
100123de:	f002 f9bb 	bl	10014758 <__aeabi_dmul>
100123e2:	2200      	movs	r2, #0
100123e4:	9002      	str	r0, [sp, #8]
100123e6:	9103      	str	r1, [sp, #12]
100123e8:	4b61      	ldr	r3, [pc, #388]	; (10012570 <__ieee754_pow+0xa40>)
100123ea:	0020      	movs	r0, r4
100123ec:	0029      	movs	r1, r5
100123ee:	f002 f9b3 	bl	10014758 <__aeabi_dmul>
100123f2:	0002      	movs	r2, r0
100123f4:	000b      	movs	r3, r1
100123f6:	485f      	ldr	r0, [pc, #380]	; (10012574 <__ieee754_pow+0xa44>)
100123f8:	495f      	ldr	r1, [pc, #380]	; (10012578 <__ieee754_pow+0xa48>)
100123fa:	f002 fc27 	bl	10014c4c <__aeabi_dsub>
100123fe:	0022      	movs	r2, r4
10012400:	002b      	movs	r3, r5
10012402:	f002 f9a9 	bl	10014758 <__aeabi_dmul>
10012406:	0002      	movs	r2, r0
10012408:	000b      	movs	r3, r1
1001240a:	2000      	movs	r0, #0
1001240c:	495b      	ldr	r1, [pc, #364]	; (1001257c <__ieee754_pow+0xa4c>)
1001240e:	f002 fc1d 	bl	10014c4c <__aeabi_dsub>
10012412:	0022      	movs	r2, r4
10012414:	9004      	str	r0, [sp, #16]
10012416:	9105      	str	r1, [sp, #20]
10012418:	002b      	movs	r3, r5
1001241a:	0020      	movs	r0, r4
1001241c:	0029      	movs	r1, r5
1001241e:	f002 f99b 	bl	10014758 <__aeabi_dmul>
10012422:	0002      	movs	r2, r0
10012424:	000b      	movs	r3, r1
10012426:	9804      	ldr	r0, [sp, #16]
10012428:	9905      	ldr	r1, [sp, #20]
1001242a:	f002 f995 	bl	10014758 <__aeabi_dmul>
1001242e:	4a54      	ldr	r2, [pc, #336]	; (10012580 <__ieee754_pow+0xa50>)
10012430:	4b4c      	ldr	r3, [pc, #304]	; (10012564 <__ieee754_pow+0xa34>)
10012432:	f002 f991 	bl	10014758 <__aeabi_dmul>
10012436:	0002      	movs	r2, r0
10012438:	000b      	movs	r3, r1
1001243a:	9802      	ldr	r0, [sp, #8]
1001243c:	9903      	ldr	r1, [sp, #12]
1001243e:	f002 fc05 	bl	10014c4c <__aeabi_dsub>
10012442:	0002      	movs	r2, r0
10012444:	000b      	movs	r3, r1
10012446:	0004      	movs	r4, r0
10012448:	000d      	movs	r5, r1
1001244a:	0030      	movs	r0, r6
1001244c:	0039      	movs	r1, r7
1001244e:	f001 fa33 	bl	100138b8 <__aeabi_dadd>
10012452:	2200      	movs	r2, #0
10012454:	0010      	movs	r0, r2
10012456:	003b      	movs	r3, r7
10012458:	0032      	movs	r2, r6
1001245a:	9002      	str	r0, [sp, #8]
1001245c:	9103      	str	r1, [sp, #12]
1001245e:	f002 fbf5 	bl	10014c4c <__aeabi_dsub>
10012462:	0002      	movs	r2, r0
10012464:	000b      	movs	r3, r1
10012466:	0020      	movs	r0, r4
10012468:	0029      	movs	r1, r5
1001246a:	f002 fbef 	bl	10014c4c <__aeabi_dsub>
1001246e:	9004      	str	r0, [sp, #16]
10012470:	9105      	str	r1, [sp, #20]
10012472:	e5e1      	b.n	10012038 <__ieee754_pow+0x508>
10012474:	4a43      	ldr	r2, [pc, #268]	; (10012584 <__ieee754_pow+0xa54>)
10012476:	4b44      	ldr	r3, [pc, #272]	; (10012588 <__ieee754_pow+0xa58>)
10012478:	9806      	ldr	r0, [sp, #24]
1001247a:	9907      	ldr	r1, [sp, #28]
1001247c:	f002 f96c 	bl	10014758 <__aeabi_dmul>
10012480:	4a40      	ldr	r2, [pc, #256]	; (10012584 <__ieee754_pow+0xa54>)
10012482:	4b41      	ldr	r3, [pc, #260]	; (10012588 <__ieee754_pow+0xa58>)
10012484:	f002 f968 	bl	10014758 <__aeabi_dmul>
10012488:	0006      	movs	r6, r0
1001248a:	f7ff fb9a 	bl	10011bc2 <__ieee754_pow+0x92>
1001248e:	2a00      	cmp	r2, #0
10012490:	d001      	beq.n	10012496 <__ieee754_pow+0x966>
10012492:	f7ff fba5 	bl	10011be0 <__ieee754_pow+0xb0>
10012496:	3214      	adds	r2, #20
10012498:	1ad3      	subs	r3, r2, r3
1001249a:	003a      	movs	r2, r7
1001249c:	411a      	asrs	r2, r3
1001249e:	0011      	movs	r1, r2
100124a0:	4099      	lsls	r1, r3
100124a2:	428f      	cmp	r7, r1
100124a4:	d001      	beq.n	100124aa <__ieee754_pow+0x97a>
100124a6:	f7ff fb6f 	bl	10011b88 <__ieee754_pow+0x58>
100124aa:	2301      	movs	r3, #1
100124ac:	4013      	ands	r3, r2
100124ae:	2202      	movs	r2, #2
100124b0:	1ad3      	subs	r3, r2, r3
100124b2:	469b      	mov	fp, r3
100124b4:	f7ff fb68 	bl	10011b88 <__ieee754_pow+0x58>
100124b8:	4b30      	ldr	r3, [pc, #192]	; (1001257c <__ieee754_pow+0xa4c>)
100124ba:	429e      	cmp	r6, r3
100124bc:	dd00      	ble.n	100124c0 <__ieee754_pow+0x990>
100124be:	e64e      	b.n	1001215e <__ieee754_pow+0x62e>
100124c0:	2300      	movs	r3, #0
100124c2:	4699      	mov	r9, r3
100124c4:	4698      	mov	r8, r3
100124c6:	e67a      	b.n	100121be <__ieee754_pow+0x68e>
100124c8:	0002      	movs	r2, r0
100124ca:	000b      	movs	r3, r1
100124cc:	f7ff fc14 	bl	10011cf8 <__ieee754_pow+0x1c8>
100124d0:	2380      	movs	r3, #128	; 0x80
100124d2:	4c2e      	ldr	r4, [pc, #184]	; (1001258c <__ieee754_pow+0xa5c>)
100124d4:	05db      	lsls	r3, r3, #23
100124d6:	9308      	str	r3, [sp, #32]
100124d8:	9409      	str	r4, [sp, #36]	; 0x24
100124da:	4b2d      	ldr	r3, [pc, #180]	; (10012590 <__ieee754_pow+0xa60>)
100124dc:	4c2d      	ldr	r4, [pc, #180]	; (10012594 <__ieee754_pow+0xa64>)
100124de:	2200      	movs	r2, #0
100124e0:	930c      	str	r3, [sp, #48]	; 0x30
100124e2:	940d      	str	r4, [sp, #52]	; 0x34
100124e4:	2480      	movs	r4, #128	; 0x80
100124e6:	4b2c      	ldr	r3, [pc, #176]	; (10012598 <__ieee754_pow+0xa68>)
100124e8:	02e4      	lsls	r4, r4, #11
100124ea:	9206      	str	r2, [sp, #24]
100124ec:	9307      	str	r3, [sp, #28]
100124ee:	e456      	b.n	10011d9e <__ieee754_pow+0x26e>
100124f0:	4643      	mov	r3, r8
100124f2:	425b      	negs	r3, r3
100124f4:	4698      	mov	r8, r3
100124f6:	e651      	b.n	1001219c <__ieee754_pow+0x66c>
100124f8:	4642      	mov	r2, r8
100124fa:	f000 f9fd 	bl	100128f8 <scalbn>
100124fe:	e707      	b.n	10012310 <__ieee754_pow+0x7e0>
10012500:	fffffc02 	.word	0xfffffc02
10012504:	fffffc01 	.word	0xfffffc01
10012508:	000fffff 	.word	0x000fffff
1001250c:	3fe62e43 	.word	0x3fe62e43
10012510:	fefa39ef 	.word	0xfefa39ef
10012514:	3fe62e42 	.word	0x3fe62e42
10012518:	0ca86c39 	.word	0x0ca86c39
1001251c:	be205c61 	.word	0xbe205c61
10012520:	72bea4d0 	.word	0x72bea4d0
10012524:	3e663769 	.word	0x3e663769
10012528:	c5d26bf1 	.word	0xc5d26bf1
1001252c:	3ebbbd41 	.word	0x3ebbbd41
10012530:	af25de2c 	.word	0xaf25de2c
10012534:	3f11566a 	.word	0x3f11566a
10012538:	16bebd93 	.word	0x16bebd93
1001253c:	3f66c16c 	.word	0x3f66c16c
10012540:	5555553e 	.word	0x5555553e
10012544:	3fc55555 	.word	0x3fc55555
10012548:	3ff00000 	.word	0x3ff00000
1001254c:	4090cbff 	.word	0x4090cbff
10012550:	3f6f3400 	.word	0x3f6f3400
10012554:	c2f8f359 	.word	0xc2f8f359
10012558:	01a56e1f 	.word	0x01a56e1f
1001255c:	bff00000 	.word	0xbff00000
10012560:	3feffffe 	.word	0x3feffffe
10012564:	3ff71547 	.word	0x3ff71547
10012568:	f85ddf44 	.word	0xf85ddf44
1001256c:	3e54ae0b 	.word	0x3e54ae0b
10012570:	3fd00000 	.word	0x3fd00000
10012574:	55555555 	.word	0x55555555
10012578:	3fd55555 	.word	0x3fd55555
1001257c:	3fe00000 	.word	0x3fe00000
10012580:	652b82fe 	.word	0x652b82fe
10012584:	8800759c 	.word	0x8800759c
10012588:	7e37e43c 	.word	0x7e37e43c
1001258c:	3fe2b803 	.word	0x3fe2b803
10012590:	43cfd006 	.word	0x43cfd006
10012594:	3e4cfdeb 	.word	0x3e4cfdeb
10012598:	3ff80000 	.word	0x3ff80000

1001259c <__ieee754_sqrt>:
1001259c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001259e:	4656      	mov	r6, sl
100125a0:	464d      	mov	r5, r9
100125a2:	4644      	mov	r4, r8
100125a4:	465f      	mov	r7, fp
100125a6:	4b75      	ldr	r3, [pc, #468]	; (1001277c <__ieee754_sqrt+0x1e0>)
100125a8:	b4f0      	push	{r4, r5, r6, r7}
100125aa:	000a      	movs	r2, r1
100125ac:	000d      	movs	r5, r1
100125ae:	0019      	movs	r1, r3
100125b0:	b083      	sub	sp, #12
100125b2:	0006      	movs	r6, r0
100125b4:	0004      	movs	r4, r0
100125b6:	4029      	ands	r1, r5
100125b8:	4299      	cmp	r1, r3
100125ba:	d100      	bne.n	100125be <__ieee754_sqrt+0x22>
100125bc:	e0ba      	b.n	10012734 <__ieee754_sqrt+0x198>
100125be:	2d00      	cmp	r5, #0
100125c0:	dc00      	bgt.n	100125c4 <__ieee754_sqrt+0x28>
100125c2:	e094      	b.n	100126ee <__ieee754_sqrt+0x152>
100125c4:	152d      	asrs	r5, r5, #20
100125c6:	d100      	bne.n	100125ca <__ieee754_sqrt+0x2e>
100125c8:	e0a3      	b.n	10012712 <__ieee754_sqrt+0x176>
100125ca:	4b6d      	ldr	r3, [pc, #436]	; (10012780 <__ieee754_sqrt+0x1e4>)
100125cc:	0312      	lsls	r2, r2, #12
100125ce:	469c      	mov	ip, r3
100125d0:	2380      	movs	r3, #128	; 0x80
100125d2:	0b12      	lsrs	r2, r2, #12
100125d4:	035b      	lsls	r3, r3, #13
100125d6:	4465      	add	r5, ip
100125d8:	431a      	orrs	r2, r3
100125da:	07eb      	lsls	r3, r5, #31
100125dc:	d500      	bpl.n	100125e0 <__ieee754_sqrt+0x44>
100125de:	e081      	b.n	100126e4 <__ieee754_sqrt+0x148>
100125e0:	106b      	asrs	r3, r5, #1
100125e2:	4698      	mov	r8, r3
100125e4:	0fe3      	lsrs	r3, r4, #31
100125e6:	189b      	adds	r3, r3, r2
100125e8:	189b      	adds	r3, r3, r2
100125ea:	2280      	movs	r2, #128	; 0x80
100125ec:	2116      	movs	r1, #22
100125ee:	2600      	movs	r6, #0
100125f0:	2700      	movs	r7, #0
100125f2:	0064      	lsls	r4, r4, #1
100125f4:	0392      	lsls	r2, r2, #14
100125f6:	18b8      	adds	r0, r7, r2
100125f8:	4298      	cmp	r0, r3
100125fa:	dc02      	bgt.n	10012602 <__ieee754_sqrt+0x66>
100125fc:	1887      	adds	r7, r0, r2
100125fe:	1a1b      	subs	r3, r3, r0
10012600:	18b6      	adds	r6, r6, r2
10012602:	0fe0      	lsrs	r0, r4, #31
10012604:	005b      	lsls	r3, r3, #1
10012606:	3901      	subs	r1, #1
10012608:	181b      	adds	r3, r3, r0
1001260a:	0064      	lsls	r4, r4, #1
1001260c:	0852      	lsrs	r2, r2, #1
1001260e:	2900      	cmp	r1, #0
10012610:	d1f1      	bne.n	100125f6 <__ieee754_sqrt+0x5a>
10012612:	2200      	movs	r2, #0
10012614:	9201      	str	r2, [sp, #4]
10012616:	4694      	mov	ip, r2
10012618:	2280      	movs	r2, #128	; 0x80
1001261a:	0612      	lsls	r2, r2, #24
1001261c:	2020      	movs	r0, #32
1001261e:	4691      	mov	r9, r2
10012620:	e009      	b.n	10012636 <__ieee754_sqrt+0x9a>
10012622:	429f      	cmp	r7, r3
10012624:	d041      	beq.n	100126aa <__ieee754_sqrt+0x10e>
10012626:	0fe1      	lsrs	r1, r4, #31
10012628:	18c9      	adds	r1, r1, r3
1001262a:	3801      	subs	r0, #1
1001262c:	18cb      	adds	r3, r1, r3
1001262e:	0064      	lsls	r4, r4, #1
10012630:	0852      	lsrs	r2, r2, #1
10012632:	2800      	cmp	r0, #0
10012634:	d01e      	beq.n	10012674 <__ieee754_sqrt+0xd8>
10012636:	4661      	mov	r1, ip
10012638:	1851      	adds	r1, r2, r1
1001263a:	429f      	cmp	r7, r3
1001263c:	daf1      	bge.n	10012622 <__ieee754_sqrt+0x86>
1001263e:	188d      	adds	r5, r1, r2
10012640:	46ac      	mov	ip, r5
10012642:	0fcd      	lsrs	r5, r1, #31
10012644:	07ed      	lsls	r5, r5, #31
10012646:	46ba      	mov	sl, r7
10012648:	454d      	cmp	r5, r9
1001264a:	d039      	beq.n	100126c0 <__ieee754_sqrt+0x124>
1001264c:	1bdb      	subs	r3, r3, r7
1001264e:	428c      	cmp	r4, r1
10012650:	41bf      	sbcs	r7, r7
10012652:	427f      	negs	r7, r7
10012654:	1bdb      	subs	r3, r3, r7
10012656:	1a64      	subs	r4, r4, r1
10012658:	9901      	ldr	r1, [sp, #4]
1001265a:	3801      	subs	r0, #1
1001265c:	468b      	mov	fp, r1
1001265e:	4493      	add	fp, r2
10012660:	4659      	mov	r1, fp
10012662:	9101      	str	r1, [sp, #4]
10012664:	0fe1      	lsrs	r1, r4, #31
10012666:	18c9      	adds	r1, r1, r3
10012668:	4657      	mov	r7, sl
1001266a:	18cb      	adds	r3, r1, r3
1001266c:	0064      	lsls	r4, r4, #1
1001266e:	0852      	lsrs	r2, r2, #1
10012670:	2800      	cmp	r0, #0
10012672:	d1e0      	bne.n	10012636 <__ieee754_sqrt+0x9a>
10012674:	4323      	orrs	r3, r4
10012676:	d12b      	bne.n	100126d0 <__ieee754_sqrt+0x134>
10012678:	9b01      	ldr	r3, [sp, #4]
1001267a:	085b      	lsrs	r3, r3, #1
1001267c:	4941      	ldr	r1, [pc, #260]	; (10012784 <__ieee754_sqrt+0x1e8>)
1001267e:	1072      	asrs	r2, r6, #1
10012680:	468c      	mov	ip, r1
10012682:	4462      	add	r2, ip
10012684:	07f1      	lsls	r1, r6, #31
10012686:	d502      	bpl.n	1001268e <__ieee754_sqrt+0xf2>
10012688:	2180      	movs	r1, #128	; 0x80
1001268a:	0609      	lsls	r1, r1, #24
1001268c:	430b      	orrs	r3, r1
1001268e:	4641      	mov	r1, r8
10012690:	0509      	lsls	r1, r1, #20
10012692:	188d      	adds	r5, r1, r2
10012694:	001e      	movs	r6, r3
10012696:	002f      	movs	r7, r5
10012698:	0030      	movs	r0, r6
1001269a:	0039      	movs	r1, r7
1001269c:	b003      	add	sp, #12
1001269e:	bc3c      	pop	{r2, r3, r4, r5}
100126a0:	4690      	mov	r8, r2
100126a2:	4699      	mov	r9, r3
100126a4:	46a2      	mov	sl, r4
100126a6:	46ab      	mov	fp, r5
100126a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126aa:	42a1      	cmp	r1, r4
100126ac:	d80e      	bhi.n	100126cc <__ieee754_sqrt+0x130>
100126ae:	188d      	adds	r5, r1, r2
100126b0:	46ac      	mov	ip, r5
100126b2:	0fcd      	lsrs	r5, r1, #31
100126b4:	07ed      	lsls	r5, r5, #31
100126b6:	454d      	cmp	r5, r9
100126b8:	d048      	beq.n	1001274c <__ieee754_sqrt+0x1b0>
100126ba:	469a      	mov	sl, r3
100126bc:	2300      	movs	r3, #0
100126be:	e7ca      	b.n	10012656 <__ieee754_sqrt+0xba>
100126c0:	4665      	mov	r5, ip
100126c2:	2d00      	cmp	r5, #0
100126c4:	dbc2      	blt.n	1001264c <__ieee754_sqrt+0xb0>
100126c6:	1c7d      	adds	r5, r7, #1
100126c8:	46aa      	mov	sl, r5
100126ca:	e7bf      	b.n	1001264c <__ieee754_sqrt+0xb0>
100126cc:	003b      	movs	r3, r7
100126ce:	e7aa      	b.n	10012626 <__ieee754_sqrt+0x8a>
100126d0:	9b01      	ldr	r3, [sp, #4]
100126d2:	3301      	adds	r3, #1
100126d4:	d03e      	beq.n	10012754 <__ieee754_sqrt+0x1b8>
100126d6:	9a01      	ldr	r2, [sp, #4]
100126d8:	2301      	movs	r3, #1
100126da:	4694      	mov	ip, r2
100126dc:	4013      	ands	r3, r2
100126de:	4463      	add	r3, ip
100126e0:	085b      	lsrs	r3, r3, #1
100126e2:	e7cb      	b.n	1001267c <__ieee754_sqrt+0xe0>
100126e4:	0fe3      	lsrs	r3, r4, #31
100126e6:	0052      	lsls	r2, r2, #1
100126e8:	189a      	adds	r2, r3, r2
100126ea:	0064      	lsls	r4, r4, #1
100126ec:	e778      	b.n	100125e0 <__ieee754_sqrt+0x44>
100126ee:	006b      	lsls	r3, r5, #1
100126f0:	085b      	lsrs	r3, r3, #1
100126f2:	4303      	orrs	r3, r0
100126f4:	002f      	movs	r7, r5
100126f6:	2b00      	cmp	r3, #0
100126f8:	d0ce      	beq.n	10012698 <__ieee754_sqrt+0xfc>
100126fa:	2500      	movs	r5, #0
100126fc:	2a00      	cmp	r2, #0
100126fe:	d131      	bne.n	10012764 <__ieee754_sqrt+0x1c8>
10012700:	0ae2      	lsrs	r2, r4, #11
10012702:	3d15      	subs	r5, #21
10012704:	0564      	lsls	r4, r4, #21
10012706:	2a00      	cmp	r2, #0
10012708:	d0fa      	beq.n	10012700 <__ieee754_sqrt+0x164>
1001270a:	2380      	movs	r3, #128	; 0x80
1001270c:	035b      	lsls	r3, r3, #13
1001270e:	421a      	tst	r2, r3
10012710:	d123      	bne.n	1001275a <__ieee754_sqrt+0x1be>
10012712:	2080      	movs	r0, #128	; 0x80
10012714:	2300      	movs	r3, #0
10012716:	0340      	lsls	r0, r0, #13
10012718:	e000      	b.n	1001271c <__ieee754_sqrt+0x180>
1001271a:	000b      	movs	r3, r1
1001271c:	0052      	lsls	r2, r2, #1
1001271e:	1c59      	adds	r1, r3, #1
10012720:	4202      	tst	r2, r0
10012722:	d0fa      	beq.n	1001271a <__ieee754_sqrt+0x17e>
10012724:	2020      	movs	r0, #32
10012726:	1a40      	subs	r0, r0, r1
10012728:	1aed      	subs	r5, r5, r3
1001272a:	0023      	movs	r3, r4
1001272c:	40c3      	lsrs	r3, r0
1001272e:	408c      	lsls	r4, r1
10012730:	431a      	orrs	r2, r3
10012732:	e74a      	b.n	100125ca <__ieee754_sqrt+0x2e>
10012734:	0002      	movs	r2, r0
10012736:	002b      	movs	r3, r5
10012738:	0029      	movs	r1, r5
1001273a:	f002 f80d 	bl	10014758 <__aeabi_dmul>
1001273e:	0032      	movs	r2, r6
10012740:	002b      	movs	r3, r5
10012742:	f001 f8b9 	bl	100138b8 <__aeabi_dadd>
10012746:	0006      	movs	r6, r0
10012748:	000f      	movs	r7, r1
1001274a:	e7a5      	b.n	10012698 <__ieee754_sqrt+0xfc>
1001274c:	4665      	mov	r5, ip
1001274e:	2d00      	cmp	r5, #0
10012750:	dab9      	bge.n	100126c6 <__ieee754_sqrt+0x12a>
10012752:	e7b2      	b.n	100126ba <__ieee754_sqrt+0x11e>
10012754:	3601      	adds	r6, #1
10012756:	2300      	movs	r3, #0
10012758:	e790      	b.n	1001267c <__ieee754_sqrt+0xe0>
1001275a:	2301      	movs	r3, #1
1001275c:	2020      	movs	r0, #32
1001275e:	425b      	negs	r3, r3
10012760:	2100      	movs	r1, #0
10012762:	e7e1      	b.n	10012728 <__ieee754_sqrt+0x18c>
10012764:	003b      	movs	r3, r7
10012766:	0002      	movs	r2, r0
10012768:	0039      	movs	r1, r7
1001276a:	f002 fa6f 	bl	10014c4c <__aeabi_dsub>
1001276e:	0002      	movs	r2, r0
10012770:	000b      	movs	r3, r1
10012772:	f001 fbcd 	bl	10013f10 <__aeabi_ddiv>
10012776:	0006      	movs	r6, r0
10012778:	000f      	movs	r7, r1
1001277a:	e78d      	b.n	10012698 <__ieee754_sqrt+0xfc>
1001277c:	7ff00000 	.word	0x7ff00000
10012780:	fffffc01 	.word	0xfffffc01
10012784:	3fe00000 	.word	0x3fe00000

10012788 <fabs>:
10012788:	0049      	lsls	r1, r1, #1
1001278a:	084b      	lsrs	r3, r1, #1
1001278c:	0019      	movs	r1, r3
1001278e:	4770      	bx	lr

10012790 <finite>:
10012790:	4b03      	ldr	r3, [pc, #12]	; (100127a0 <finite+0x10>)
10012792:	0048      	lsls	r0, r1, #1
10012794:	469c      	mov	ip, r3
10012796:	0840      	lsrs	r0, r0, #1
10012798:	4460      	add	r0, ip
1001279a:	0fc0      	lsrs	r0, r0, #31
1001279c:	4770      	bx	lr
1001279e:	46c0      	nop			; (mov r8, r8)
100127a0:	80100000 	.word	0x80100000

100127a4 <matherr>:
100127a4:	2000      	movs	r0, #0
100127a6:	4770      	bx	lr

100127a8 <nan>:
100127a8:	2000      	movs	r0, #0
100127aa:	4901      	ldr	r1, [pc, #4]	; (100127b0 <nan+0x8>)
100127ac:	4770      	bx	lr
100127ae:	46c0      	nop			; (mov r8, r8)
100127b0:	7ff80000 	.word	0x7ff80000

100127b4 <rint>:
100127b4:	b5f0      	push	{r4, r5, r6, r7, lr}
100127b6:	4647      	mov	r7, r8
100127b8:	b480      	push	{r7}
100127ba:	0fcb      	lsrs	r3, r1, #31
100127bc:	4698      	mov	r8, r3
100127be:	4c4a      	ldr	r4, [pc, #296]	; (100128e8 <rint+0x134>)
100127c0:	004b      	lsls	r3, r1, #1
100127c2:	0d5b      	lsrs	r3, r3, #21
100127c4:	191e      	adds	r6, r3, r4
100127c6:	b082      	sub	sp, #8
100127c8:	0007      	movs	r7, r0
100127ca:	000a      	movs	r2, r1
100127cc:	2e13      	cmp	r6, #19
100127ce:	dc35      	bgt.n	1001283c <rint+0x88>
100127d0:	2e00      	cmp	r6, #0
100127d2:	db57      	blt.n	10012884 <rint+0xd0>
100127d4:	4b45      	ldr	r3, [pc, #276]	; (100128ec <rint+0x138>)
100127d6:	0004      	movs	r4, r0
100127d8:	4133      	asrs	r3, r6
100127da:	001f      	movs	r7, r3
100127dc:	400f      	ands	r7, r1
100127de:	4307      	orrs	r7, r0
100127e0:	000d      	movs	r5, r1
100127e2:	2f00      	cmp	r7, #0
100127e4:	d024      	beq.n	10012830 <rint+0x7c>
100127e6:	085b      	lsrs	r3, r3, #1
100127e8:	001c      	movs	r4, r3
100127ea:	400c      	ands	r4, r1
100127ec:	4320      	orrs	r0, r4
100127ee:	2700      	movs	r7, #0
100127f0:	2800      	cmp	r0, #0
100127f2:	d007      	beq.n	10012804 <rint+0x50>
100127f4:	2e13      	cmp	r6, #19
100127f6:	d100      	bne.n	100127fa <rint+0x46>
100127f8:	e072      	b.n	100128e0 <rint+0x12c>
100127fa:	2280      	movs	r2, #128	; 0x80
100127fc:	02d2      	lsls	r2, r2, #11
100127fe:	4132      	asrs	r2, r6
10012800:	4399      	bics	r1, r3
10012802:	430a      	orrs	r2, r1
10012804:	4643      	mov	r3, r8
10012806:	00de      	lsls	r6, r3, #3
10012808:	4b39      	ldr	r3, [pc, #228]	; (100128f0 <rint+0x13c>)
1001280a:	0011      	movs	r1, r2
1001280c:	199e      	adds	r6, r3, r6
1001280e:	6834      	ldr	r4, [r6, #0]
10012810:	6875      	ldr	r5, [r6, #4]
10012812:	0038      	movs	r0, r7
10012814:	0022      	movs	r2, r4
10012816:	002b      	movs	r3, r5
10012818:	f001 f84e 	bl	100138b8 <__aeabi_dadd>
1001281c:	9000      	str	r0, [sp, #0]
1001281e:	9101      	str	r1, [sp, #4]
10012820:	9800      	ldr	r0, [sp, #0]
10012822:	9901      	ldr	r1, [sp, #4]
10012824:	0022      	movs	r2, r4
10012826:	002b      	movs	r3, r5
10012828:	f002 fa10 	bl	10014c4c <__aeabi_dsub>
1001282c:	0004      	movs	r4, r0
1001282e:	000d      	movs	r5, r1
10012830:	0020      	movs	r0, r4
10012832:	0029      	movs	r1, r5
10012834:	b002      	add	sp, #8
10012836:	bc04      	pop	{r2}
10012838:	4690      	mov	r8, r2
1001283a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001283c:	2e33      	cmp	r6, #51	; 0x33
1001283e:	dd0c      	ble.n	1001285a <rint+0xa6>
10012840:	2380      	movs	r3, #128	; 0x80
10012842:	0004      	movs	r4, r0
10012844:	000d      	movs	r5, r1
10012846:	00db      	lsls	r3, r3, #3
10012848:	429e      	cmp	r6, r3
1001284a:	d1f1      	bne.n	10012830 <rint+0x7c>
1001284c:	0002      	movs	r2, r0
1001284e:	000b      	movs	r3, r1
10012850:	f001 f832 	bl	100138b8 <__aeabi_dadd>
10012854:	0004      	movs	r4, r0
10012856:	000d      	movs	r5, r1
10012858:	e7ea      	b.n	10012830 <rint+0x7c>
1001285a:	4c26      	ldr	r4, [pc, #152]	; (100128f4 <rint+0x140>)
1001285c:	000d      	movs	r5, r1
1001285e:	46a4      	mov	ip, r4
10012860:	2401      	movs	r4, #1
10012862:	4463      	add	r3, ip
10012864:	4264      	negs	r4, r4
10012866:	40dc      	lsrs	r4, r3
10012868:	46a4      	mov	ip, r4
1001286a:	4661      	mov	r1, ip
1001286c:	0004      	movs	r4, r0
1001286e:	4201      	tst	r1, r0
10012870:	d0de      	beq.n	10012830 <rint+0x7c>
10012872:	0849      	lsrs	r1, r1, #1
10012874:	4201      	tst	r1, r0
10012876:	d0c5      	beq.n	10012804 <rint+0x50>
10012878:	2780      	movs	r7, #128	; 0x80
1001287a:	05ff      	lsls	r7, r7, #23
1001287c:	411f      	asrs	r7, r3
1001287e:	4388      	bics	r0, r1
10012880:	4307      	orrs	r7, r0
10012882:	e7bf      	b.n	10012804 <rint+0x50>
10012884:	004b      	lsls	r3, r1, #1
10012886:	085b      	lsrs	r3, r3, #1
10012888:	4303      	orrs	r3, r0
1001288a:	0004      	movs	r4, r0
1001288c:	000d      	movs	r5, r1
1001288e:	2b00      	cmp	r3, #0
10012890:	d0ce      	beq.n	10012830 <rint+0x7c>
10012892:	030b      	lsls	r3, r1, #12
10012894:	0b1b      	lsrs	r3, r3, #12
10012896:	4303      	orrs	r3, r0
10012898:	425a      	negs	r2, r3
1001289a:	4313      	orrs	r3, r2
1001289c:	2280      	movs	r2, #128	; 0x80
1001289e:	0b1b      	lsrs	r3, r3, #12
100128a0:	0312      	lsls	r2, r2, #12
100128a2:	4013      	ands	r3, r2
100128a4:	0c4a      	lsrs	r2, r1, #17
100128a6:	0452      	lsls	r2, r2, #17
100128a8:	4313      	orrs	r3, r2
100128aa:	0019      	movs	r1, r3
100128ac:	4643      	mov	r3, r8
100128ae:	4a10      	ldr	r2, [pc, #64]	; (100128f0 <rint+0x13c>)
100128b0:	00db      	lsls	r3, r3, #3
100128b2:	18d3      	adds	r3, r2, r3
100128b4:	681c      	ldr	r4, [r3, #0]
100128b6:	685d      	ldr	r5, [r3, #4]
100128b8:	0022      	movs	r2, r4
100128ba:	002b      	movs	r3, r5
100128bc:	f000 fffc 	bl	100138b8 <__aeabi_dadd>
100128c0:	9000      	str	r0, [sp, #0]
100128c2:	9101      	str	r1, [sp, #4]
100128c4:	9800      	ldr	r0, [sp, #0]
100128c6:	9901      	ldr	r1, [sp, #4]
100128c8:	0022      	movs	r2, r4
100128ca:	002b      	movs	r3, r5
100128cc:	f002 f9be 	bl	10014c4c <__aeabi_dsub>
100128d0:	4642      	mov	r2, r8
100128d2:	004b      	lsls	r3, r1, #1
100128d4:	085b      	lsrs	r3, r3, #1
100128d6:	07d6      	lsls	r6, r2, #31
100128d8:	4333      	orrs	r3, r6
100128da:	0004      	movs	r4, r0
100128dc:	001d      	movs	r5, r3
100128de:	e7a7      	b.n	10012830 <rint+0x7c>
100128e0:	2780      	movs	r7, #128	; 0x80
100128e2:	063f      	lsls	r7, r7, #24
100128e4:	e789      	b.n	100127fa <rint+0x46>
100128e6:	46c0      	nop			; (mov r8, r8)
100128e8:	fffffc01 	.word	0xfffffc01
100128ec:	000fffff 	.word	0x000fffff
100128f0:	100181f0 	.word	0x100181f0
100128f4:	fffffbed 	.word	0xfffffbed

100128f8 <scalbn>:
100128f8:	004b      	lsls	r3, r1, #1
100128fa:	b570      	push	{r4, r5, r6, lr}
100128fc:	0d5b      	lsrs	r3, r3, #21
100128fe:	0014      	movs	r4, r2
10012900:	000a      	movs	r2, r1
10012902:	2b00      	cmp	r3, #0
10012904:	d11a      	bne.n	1001293c <scalbn+0x44>
10012906:	004b      	lsls	r3, r1, #1
10012908:	085b      	lsrs	r3, r3, #1
1001290a:	4303      	orrs	r3, r0
1001290c:	d015      	beq.n	1001293a <scalbn+0x42>
1001290e:	2200      	movs	r2, #0
10012910:	4b22      	ldr	r3, [pc, #136]	; (1001299c <scalbn+0xa4>)
10012912:	f001 ff21 	bl	10014758 <__aeabi_dmul>
10012916:	4b22      	ldr	r3, [pc, #136]	; (100129a0 <scalbn+0xa8>)
10012918:	000a      	movs	r2, r1
1001291a:	429c      	cmp	r4, r3
1001291c:	db22      	blt.n	10012964 <scalbn+0x6c>
1001291e:	004b      	lsls	r3, r1, #1
10012920:	0d5b      	lsrs	r3, r3, #21
10012922:	3b36      	subs	r3, #54	; 0x36
10012924:	4d1f      	ldr	r5, [pc, #124]	; (100129a4 <scalbn+0xac>)
10012926:	18e3      	adds	r3, r4, r3
10012928:	42ab      	cmp	r3, r5
1001292a:	dc20      	bgt.n	1001296e <scalbn+0x76>
1001292c:	2b00      	cmp	r3, #0
1001292e:	dd0d      	ble.n	1001294c <scalbn+0x54>
10012930:	4c1d      	ldr	r4, [pc, #116]	; (100129a8 <scalbn+0xb0>)
10012932:	051b      	lsls	r3, r3, #20
10012934:	4022      	ands	r2, r4
10012936:	431a      	orrs	r2, r3
10012938:	0011      	movs	r1, r2
1001293a:	bd70      	pop	{r4, r5, r6, pc}
1001293c:	4d1b      	ldr	r5, [pc, #108]	; (100129ac <scalbn+0xb4>)
1001293e:	42ab      	cmp	r3, r5
10012940:	d1f0      	bne.n	10012924 <scalbn+0x2c>
10012942:	0002      	movs	r2, r0
10012944:	000b      	movs	r3, r1
10012946:	f000 ffb7 	bl	100138b8 <__aeabi_dadd>
1001294a:	e7f6      	b.n	1001293a <scalbn+0x42>
1001294c:	001d      	movs	r5, r3
1001294e:	3535      	adds	r5, #53	; 0x35
10012950:	da18      	bge.n	10012984 <scalbn+0x8c>
10012952:	4b17      	ldr	r3, [pc, #92]	; (100129b0 <scalbn+0xb8>)
10012954:	0002      	movs	r2, r0
10012956:	429c      	cmp	r4, r3
10012958:	dc0a      	bgt.n	10012970 <scalbn+0x78>
1001295a:	000b      	movs	r3, r1
1001295c:	4815      	ldr	r0, [pc, #84]	; (100129b4 <scalbn+0xbc>)
1001295e:	4916      	ldr	r1, [pc, #88]	; (100129b8 <scalbn+0xc0>)
10012960:	f000 f832 	bl	100129c8 <copysign>
10012964:	4a13      	ldr	r2, [pc, #76]	; (100129b4 <scalbn+0xbc>)
10012966:	4b14      	ldr	r3, [pc, #80]	; (100129b8 <scalbn+0xc0>)
10012968:	f001 fef6 	bl	10014758 <__aeabi_dmul>
1001296c:	e7e5      	b.n	1001293a <scalbn+0x42>
1001296e:	0002      	movs	r2, r0
10012970:	000b      	movs	r3, r1
10012972:	4812      	ldr	r0, [pc, #72]	; (100129bc <scalbn+0xc4>)
10012974:	4912      	ldr	r1, [pc, #72]	; (100129c0 <scalbn+0xc8>)
10012976:	f000 f827 	bl	100129c8 <copysign>
1001297a:	4a10      	ldr	r2, [pc, #64]	; (100129bc <scalbn+0xc4>)
1001297c:	4b10      	ldr	r3, [pc, #64]	; (100129c0 <scalbn+0xc8>)
1001297e:	f001 feeb 	bl	10014758 <__aeabi_dmul>
10012982:	e7da      	b.n	1001293a <scalbn+0x42>
10012984:	4c08      	ldr	r4, [pc, #32]	; (100129a8 <scalbn+0xb0>)
10012986:	3336      	adds	r3, #54	; 0x36
10012988:	4022      	ands	r2, r4
1001298a:	051b      	lsls	r3, r3, #20
1001298c:	4313      	orrs	r3, r2
1001298e:	0019      	movs	r1, r3
10012990:	2200      	movs	r2, #0
10012992:	4b0c      	ldr	r3, [pc, #48]	; (100129c4 <scalbn+0xcc>)
10012994:	f001 fee0 	bl	10014758 <__aeabi_dmul>
10012998:	e7cf      	b.n	1001293a <scalbn+0x42>
1001299a:	46c0      	nop			; (mov r8, r8)
1001299c:	43500000 	.word	0x43500000
100129a0:	ffff3cb0 	.word	0xffff3cb0
100129a4:	000007fe 	.word	0x000007fe
100129a8:	800fffff 	.word	0x800fffff
100129ac:	000007ff 	.word	0x000007ff
100129b0:	0000c350 	.word	0x0000c350
100129b4:	c2f8f359 	.word	0xc2f8f359
100129b8:	01a56e1f 	.word	0x01a56e1f
100129bc:	8800759c 	.word	0x8800759c
100129c0:	7e37e43c 	.word	0x7e37e43c
100129c4:	3c900000 	.word	0x3c900000

100129c8 <copysign>:
100129c8:	b530      	push	{r4, r5, lr}
100129ca:	004a      	lsls	r2, r1, #1
100129cc:	0fdb      	lsrs	r3, r3, #31
100129ce:	07db      	lsls	r3, r3, #31
100129d0:	0852      	lsrs	r2, r2, #1
100129d2:	431a      	orrs	r2, r3
100129d4:	0011      	movs	r1, r2
100129d6:	bd30      	pop	{r4, r5, pc}

100129d8 <__gnu_thumb1_case_sqi>:
100129d8:	b402      	push	{r1}
100129da:	4671      	mov	r1, lr
100129dc:	0849      	lsrs	r1, r1, #1
100129de:	0049      	lsls	r1, r1, #1
100129e0:	5609      	ldrsb	r1, [r1, r0]
100129e2:	0049      	lsls	r1, r1, #1
100129e4:	448e      	add	lr, r1
100129e6:	bc02      	pop	{r1}
100129e8:	4770      	bx	lr
100129ea:	46c0      	nop			; (mov r8, r8)

100129ec <__gnu_thumb1_case_uqi>:
100129ec:	b402      	push	{r1}
100129ee:	4671      	mov	r1, lr
100129f0:	0849      	lsrs	r1, r1, #1
100129f2:	0049      	lsls	r1, r1, #1
100129f4:	5c09      	ldrb	r1, [r1, r0]
100129f6:	0049      	lsls	r1, r1, #1
100129f8:	448e      	add	lr, r1
100129fa:	bc02      	pop	{r1}
100129fc:	4770      	bx	lr
100129fe:	46c0      	nop			; (mov r8, r8)

10012a00 <__aeabi_uidiv>:
10012a00:	2200      	movs	r2, #0
10012a02:	0843      	lsrs	r3, r0, #1
10012a04:	428b      	cmp	r3, r1
10012a06:	d374      	bcc.n	10012af2 <__aeabi_uidiv+0xf2>
10012a08:	0903      	lsrs	r3, r0, #4
10012a0a:	428b      	cmp	r3, r1
10012a0c:	d35f      	bcc.n	10012ace <__aeabi_uidiv+0xce>
10012a0e:	0a03      	lsrs	r3, r0, #8
10012a10:	428b      	cmp	r3, r1
10012a12:	d344      	bcc.n	10012a9e <__aeabi_uidiv+0x9e>
10012a14:	0b03      	lsrs	r3, r0, #12
10012a16:	428b      	cmp	r3, r1
10012a18:	d328      	bcc.n	10012a6c <__aeabi_uidiv+0x6c>
10012a1a:	0c03      	lsrs	r3, r0, #16
10012a1c:	428b      	cmp	r3, r1
10012a1e:	d30d      	bcc.n	10012a3c <__aeabi_uidiv+0x3c>
10012a20:	22ff      	movs	r2, #255	; 0xff
10012a22:	0209      	lsls	r1, r1, #8
10012a24:	ba12      	rev	r2, r2
10012a26:	0c03      	lsrs	r3, r0, #16
10012a28:	428b      	cmp	r3, r1
10012a2a:	d302      	bcc.n	10012a32 <__aeabi_uidiv+0x32>
10012a2c:	1212      	asrs	r2, r2, #8
10012a2e:	0209      	lsls	r1, r1, #8
10012a30:	d065      	beq.n	10012afe <__aeabi_uidiv+0xfe>
10012a32:	0b03      	lsrs	r3, r0, #12
10012a34:	428b      	cmp	r3, r1
10012a36:	d319      	bcc.n	10012a6c <__aeabi_uidiv+0x6c>
10012a38:	e000      	b.n	10012a3c <__aeabi_uidiv+0x3c>
10012a3a:	0a09      	lsrs	r1, r1, #8
10012a3c:	0bc3      	lsrs	r3, r0, #15
10012a3e:	428b      	cmp	r3, r1
10012a40:	d301      	bcc.n	10012a46 <__aeabi_uidiv+0x46>
10012a42:	03cb      	lsls	r3, r1, #15
10012a44:	1ac0      	subs	r0, r0, r3
10012a46:	4152      	adcs	r2, r2
10012a48:	0b83      	lsrs	r3, r0, #14
10012a4a:	428b      	cmp	r3, r1
10012a4c:	d301      	bcc.n	10012a52 <__aeabi_uidiv+0x52>
10012a4e:	038b      	lsls	r3, r1, #14
10012a50:	1ac0      	subs	r0, r0, r3
10012a52:	4152      	adcs	r2, r2
10012a54:	0b43      	lsrs	r3, r0, #13
10012a56:	428b      	cmp	r3, r1
10012a58:	d301      	bcc.n	10012a5e <__aeabi_uidiv+0x5e>
10012a5a:	034b      	lsls	r3, r1, #13
10012a5c:	1ac0      	subs	r0, r0, r3
10012a5e:	4152      	adcs	r2, r2
10012a60:	0b03      	lsrs	r3, r0, #12
10012a62:	428b      	cmp	r3, r1
10012a64:	d301      	bcc.n	10012a6a <__aeabi_uidiv+0x6a>
10012a66:	030b      	lsls	r3, r1, #12
10012a68:	1ac0      	subs	r0, r0, r3
10012a6a:	4152      	adcs	r2, r2
10012a6c:	0ac3      	lsrs	r3, r0, #11
10012a6e:	428b      	cmp	r3, r1
10012a70:	d301      	bcc.n	10012a76 <__aeabi_uidiv+0x76>
10012a72:	02cb      	lsls	r3, r1, #11
10012a74:	1ac0      	subs	r0, r0, r3
10012a76:	4152      	adcs	r2, r2
10012a78:	0a83      	lsrs	r3, r0, #10
10012a7a:	428b      	cmp	r3, r1
10012a7c:	d301      	bcc.n	10012a82 <__aeabi_uidiv+0x82>
10012a7e:	028b      	lsls	r3, r1, #10
10012a80:	1ac0      	subs	r0, r0, r3
10012a82:	4152      	adcs	r2, r2
10012a84:	0a43      	lsrs	r3, r0, #9
10012a86:	428b      	cmp	r3, r1
10012a88:	d301      	bcc.n	10012a8e <__aeabi_uidiv+0x8e>
10012a8a:	024b      	lsls	r3, r1, #9
10012a8c:	1ac0      	subs	r0, r0, r3
10012a8e:	4152      	adcs	r2, r2
10012a90:	0a03      	lsrs	r3, r0, #8
10012a92:	428b      	cmp	r3, r1
10012a94:	d301      	bcc.n	10012a9a <__aeabi_uidiv+0x9a>
10012a96:	020b      	lsls	r3, r1, #8
10012a98:	1ac0      	subs	r0, r0, r3
10012a9a:	4152      	adcs	r2, r2
10012a9c:	d2cd      	bcs.n	10012a3a <__aeabi_uidiv+0x3a>
10012a9e:	09c3      	lsrs	r3, r0, #7
10012aa0:	428b      	cmp	r3, r1
10012aa2:	d301      	bcc.n	10012aa8 <__aeabi_uidiv+0xa8>
10012aa4:	01cb      	lsls	r3, r1, #7
10012aa6:	1ac0      	subs	r0, r0, r3
10012aa8:	4152      	adcs	r2, r2
10012aaa:	0983      	lsrs	r3, r0, #6
10012aac:	428b      	cmp	r3, r1
10012aae:	d301      	bcc.n	10012ab4 <__aeabi_uidiv+0xb4>
10012ab0:	018b      	lsls	r3, r1, #6
10012ab2:	1ac0      	subs	r0, r0, r3
10012ab4:	4152      	adcs	r2, r2
10012ab6:	0943      	lsrs	r3, r0, #5
10012ab8:	428b      	cmp	r3, r1
10012aba:	d301      	bcc.n	10012ac0 <__aeabi_uidiv+0xc0>
10012abc:	014b      	lsls	r3, r1, #5
10012abe:	1ac0      	subs	r0, r0, r3
10012ac0:	4152      	adcs	r2, r2
10012ac2:	0903      	lsrs	r3, r0, #4
10012ac4:	428b      	cmp	r3, r1
10012ac6:	d301      	bcc.n	10012acc <__aeabi_uidiv+0xcc>
10012ac8:	010b      	lsls	r3, r1, #4
10012aca:	1ac0      	subs	r0, r0, r3
10012acc:	4152      	adcs	r2, r2
10012ace:	08c3      	lsrs	r3, r0, #3
10012ad0:	428b      	cmp	r3, r1
10012ad2:	d301      	bcc.n	10012ad8 <__aeabi_uidiv+0xd8>
10012ad4:	00cb      	lsls	r3, r1, #3
10012ad6:	1ac0      	subs	r0, r0, r3
10012ad8:	4152      	adcs	r2, r2
10012ada:	0883      	lsrs	r3, r0, #2
10012adc:	428b      	cmp	r3, r1
10012ade:	d301      	bcc.n	10012ae4 <__aeabi_uidiv+0xe4>
10012ae0:	008b      	lsls	r3, r1, #2
10012ae2:	1ac0      	subs	r0, r0, r3
10012ae4:	4152      	adcs	r2, r2
10012ae6:	0843      	lsrs	r3, r0, #1
10012ae8:	428b      	cmp	r3, r1
10012aea:	d301      	bcc.n	10012af0 <__aeabi_uidiv+0xf0>
10012aec:	004b      	lsls	r3, r1, #1
10012aee:	1ac0      	subs	r0, r0, r3
10012af0:	4152      	adcs	r2, r2
10012af2:	1a41      	subs	r1, r0, r1
10012af4:	d200      	bcs.n	10012af8 <__aeabi_uidiv+0xf8>
10012af6:	4601      	mov	r1, r0
10012af8:	4152      	adcs	r2, r2
10012afa:	4610      	mov	r0, r2
10012afc:	4770      	bx	lr
10012afe:	e7ff      	b.n	10012b00 <__aeabi_uidiv+0x100>
10012b00:	b501      	push	{r0, lr}
10012b02:	2000      	movs	r0, #0
10012b04:	f000 f8f0 	bl	10012ce8 <__aeabi_idiv0>
10012b08:	bd02      	pop	{r1, pc}
10012b0a:	46c0      	nop			; (mov r8, r8)

10012b0c <__aeabi_uidivmod>:
10012b0c:	2900      	cmp	r1, #0
10012b0e:	d0f7      	beq.n	10012b00 <__aeabi_uidiv+0x100>
10012b10:	e776      	b.n	10012a00 <__aeabi_uidiv>
10012b12:	4770      	bx	lr

10012b14 <__aeabi_idiv>:
10012b14:	4603      	mov	r3, r0
10012b16:	430b      	orrs	r3, r1
10012b18:	d47f      	bmi.n	10012c1a <__aeabi_idiv+0x106>
10012b1a:	2200      	movs	r2, #0
10012b1c:	0843      	lsrs	r3, r0, #1
10012b1e:	428b      	cmp	r3, r1
10012b20:	d374      	bcc.n	10012c0c <__aeabi_idiv+0xf8>
10012b22:	0903      	lsrs	r3, r0, #4
10012b24:	428b      	cmp	r3, r1
10012b26:	d35f      	bcc.n	10012be8 <__aeabi_idiv+0xd4>
10012b28:	0a03      	lsrs	r3, r0, #8
10012b2a:	428b      	cmp	r3, r1
10012b2c:	d344      	bcc.n	10012bb8 <__aeabi_idiv+0xa4>
10012b2e:	0b03      	lsrs	r3, r0, #12
10012b30:	428b      	cmp	r3, r1
10012b32:	d328      	bcc.n	10012b86 <__aeabi_idiv+0x72>
10012b34:	0c03      	lsrs	r3, r0, #16
10012b36:	428b      	cmp	r3, r1
10012b38:	d30d      	bcc.n	10012b56 <__aeabi_idiv+0x42>
10012b3a:	22ff      	movs	r2, #255	; 0xff
10012b3c:	0209      	lsls	r1, r1, #8
10012b3e:	ba12      	rev	r2, r2
10012b40:	0c03      	lsrs	r3, r0, #16
10012b42:	428b      	cmp	r3, r1
10012b44:	d302      	bcc.n	10012b4c <__aeabi_idiv+0x38>
10012b46:	1212      	asrs	r2, r2, #8
10012b48:	0209      	lsls	r1, r1, #8
10012b4a:	d065      	beq.n	10012c18 <__aeabi_idiv+0x104>
10012b4c:	0b03      	lsrs	r3, r0, #12
10012b4e:	428b      	cmp	r3, r1
10012b50:	d319      	bcc.n	10012b86 <__aeabi_idiv+0x72>
10012b52:	e000      	b.n	10012b56 <__aeabi_idiv+0x42>
10012b54:	0a09      	lsrs	r1, r1, #8
10012b56:	0bc3      	lsrs	r3, r0, #15
10012b58:	428b      	cmp	r3, r1
10012b5a:	d301      	bcc.n	10012b60 <__aeabi_idiv+0x4c>
10012b5c:	03cb      	lsls	r3, r1, #15
10012b5e:	1ac0      	subs	r0, r0, r3
10012b60:	4152      	adcs	r2, r2
10012b62:	0b83      	lsrs	r3, r0, #14
10012b64:	428b      	cmp	r3, r1
10012b66:	d301      	bcc.n	10012b6c <__aeabi_idiv+0x58>
10012b68:	038b      	lsls	r3, r1, #14
10012b6a:	1ac0      	subs	r0, r0, r3
10012b6c:	4152      	adcs	r2, r2
10012b6e:	0b43      	lsrs	r3, r0, #13
10012b70:	428b      	cmp	r3, r1
10012b72:	d301      	bcc.n	10012b78 <__aeabi_idiv+0x64>
10012b74:	034b      	lsls	r3, r1, #13
10012b76:	1ac0      	subs	r0, r0, r3
10012b78:	4152      	adcs	r2, r2
10012b7a:	0b03      	lsrs	r3, r0, #12
10012b7c:	428b      	cmp	r3, r1
10012b7e:	d301      	bcc.n	10012b84 <__aeabi_idiv+0x70>
10012b80:	030b      	lsls	r3, r1, #12
10012b82:	1ac0      	subs	r0, r0, r3
10012b84:	4152      	adcs	r2, r2
10012b86:	0ac3      	lsrs	r3, r0, #11
10012b88:	428b      	cmp	r3, r1
10012b8a:	d301      	bcc.n	10012b90 <__aeabi_idiv+0x7c>
10012b8c:	02cb      	lsls	r3, r1, #11
10012b8e:	1ac0      	subs	r0, r0, r3
10012b90:	4152      	adcs	r2, r2
10012b92:	0a83      	lsrs	r3, r0, #10
10012b94:	428b      	cmp	r3, r1
10012b96:	d301      	bcc.n	10012b9c <__aeabi_idiv+0x88>
10012b98:	028b      	lsls	r3, r1, #10
10012b9a:	1ac0      	subs	r0, r0, r3
10012b9c:	4152      	adcs	r2, r2
10012b9e:	0a43      	lsrs	r3, r0, #9
10012ba0:	428b      	cmp	r3, r1
10012ba2:	d301      	bcc.n	10012ba8 <__aeabi_idiv+0x94>
10012ba4:	024b      	lsls	r3, r1, #9
10012ba6:	1ac0      	subs	r0, r0, r3
10012ba8:	4152      	adcs	r2, r2
10012baa:	0a03      	lsrs	r3, r0, #8
10012bac:	428b      	cmp	r3, r1
10012bae:	d301      	bcc.n	10012bb4 <__aeabi_idiv+0xa0>
10012bb0:	020b      	lsls	r3, r1, #8
10012bb2:	1ac0      	subs	r0, r0, r3
10012bb4:	4152      	adcs	r2, r2
10012bb6:	d2cd      	bcs.n	10012b54 <__aeabi_idiv+0x40>
10012bb8:	09c3      	lsrs	r3, r0, #7
10012bba:	428b      	cmp	r3, r1
10012bbc:	d301      	bcc.n	10012bc2 <__aeabi_idiv+0xae>
10012bbe:	01cb      	lsls	r3, r1, #7
10012bc0:	1ac0      	subs	r0, r0, r3
10012bc2:	4152      	adcs	r2, r2
10012bc4:	0983      	lsrs	r3, r0, #6
10012bc6:	428b      	cmp	r3, r1
10012bc8:	d301      	bcc.n	10012bce <__aeabi_idiv+0xba>
10012bca:	018b      	lsls	r3, r1, #6
10012bcc:	1ac0      	subs	r0, r0, r3
10012bce:	4152      	adcs	r2, r2
10012bd0:	0943      	lsrs	r3, r0, #5
10012bd2:	428b      	cmp	r3, r1
10012bd4:	d301      	bcc.n	10012bda <__aeabi_idiv+0xc6>
10012bd6:	014b      	lsls	r3, r1, #5
10012bd8:	1ac0      	subs	r0, r0, r3
10012bda:	4152      	adcs	r2, r2
10012bdc:	0903      	lsrs	r3, r0, #4
10012bde:	428b      	cmp	r3, r1
10012be0:	d301      	bcc.n	10012be6 <__aeabi_idiv+0xd2>
10012be2:	010b      	lsls	r3, r1, #4
10012be4:	1ac0      	subs	r0, r0, r3
10012be6:	4152      	adcs	r2, r2
10012be8:	08c3      	lsrs	r3, r0, #3
10012bea:	428b      	cmp	r3, r1
10012bec:	d301      	bcc.n	10012bf2 <__aeabi_idiv+0xde>
10012bee:	00cb      	lsls	r3, r1, #3
10012bf0:	1ac0      	subs	r0, r0, r3
10012bf2:	4152      	adcs	r2, r2
10012bf4:	0883      	lsrs	r3, r0, #2
10012bf6:	428b      	cmp	r3, r1
10012bf8:	d301      	bcc.n	10012bfe <__aeabi_idiv+0xea>
10012bfa:	008b      	lsls	r3, r1, #2
10012bfc:	1ac0      	subs	r0, r0, r3
10012bfe:	4152      	adcs	r2, r2
10012c00:	0843      	lsrs	r3, r0, #1
10012c02:	428b      	cmp	r3, r1
10012c04:	d301      	bcc.n	10012c0a <__aeabi_idiv+0xf6>
10012c06:	004b      	lsls	r3, r1, #1
10012c08:	1ac0      	subs	r0, r0, r3
10012c0a:	4152      	adcs	r2, r2
10012c0c:	1a41      	subs	r1, r0, r1
10012c0e:	d200      	bcs.n	10012c12 <__aeabi_idiv+0xfe>
10012c10:	4601      	mov	r1, r0
10012c12:	4152      	adcs	r2, r2
10012c14:	4610      	mov	r0, r2
10012c16:	4770      	bx	lr
10012c18:	e05d      	b.n	10012cd6 <__aeabi_idiv+0x1c2>
10012c1a:	0fca      	lsrs	r2, r1, #31
10012c1c:	d000      	beq.n	10012c20 <__aeabi_idiv+0x10c>
10012c1e:	4249      	negs	r1, r1
10012c20:	1003      	asrs	r3, r0, #32
10012c22:	d300      	bcc.n	10012c26 <__aeabi_idiv+0x112>
10012c24:	4240      	negs	r0, r0
10012c26:	4053      	eors	r3, r2
10012c28:	2200      	movs	r2, #0
10012c2a:	469c      	mov	ip, r3
10012c2c:	0903      	lsrs	r3, r0, #4
10012c2e:	428b      	cmp	r3, r1
10012c30:	d32d      	bcc.n	10012c8e <__aeabi_idiv+0x17a>
10012c32:	0a03      	lsrs	r3, r0, #8
10012c34:	428b      	cmp	r3, r1
10012c36:	d312      	bcc.n	10012c5e <__aeabi_idiv+0x14a>
10012c38:	22fc      	movs	r2, #252	; 0xfc
10012c3a:	0189      	lsls	r1, r1, #6
10012c3c:	ba12      	rev	r2, r2
10012c3e:	0a03      	lsrs	r3, r0, #8
10012c40:	428b      	cmp	r3, r1
10012c42:	d30c      	bcc.n	10012c5e <__aeabi_idiv+0x14a>
10012c44:	0189      	lsls	r1, r1, #6
10012c46:	1192      	asrs	r2, r2, #6
10012c48:	428b      	cmp	r3, r1
10012c4a:	d308      	bcc.n	10012c5e <__aeabi_idiv+0x14a>
10012c4c:	0189      	lsls	r1, r1, #6
10012c4e:	1192      	asrs	r2, r2, #6
10012c50:	428b      	cmp	r3, r1
10012c52:	d304      	bcc.n	10012c5e <__aeabi_idiv+0x14a>
10012c54:	0189      	lsls	r1, r1, #6
10012c56:	d03a      	beq.n	10012cce <__aeabi_idiv+0x1ba>
10012c58:	1192      	asrs	r2, r2, #6
10012c5a:	e000      	b.n	10012c5e <__aeabi_idiv+0x14a>
10012c5c:	0989      	lsrs	r1, r1, #6
10012c5e:	09c3      	lsrs	r3, r0, #7
10012c60:	428b      	cmp	r3, r1
10012c62:	d301      	bcc.n	10012c68 <__aeabi_idiv+0x154>
10012c64:	01cb      	lsls	r3, r1, #7
10012c66:	1ac0      	subs	r0, r0, r3
10012c68:	4152      	adcs	r2, r2
10012c6a:	0983      	lsrs	r3, r0, #6
10012c6c:	428b      	cmp	r3, r1
10012c6e:	d301      	bcc.n	10012c74 <__aeabi_idiv+0x160>
10012c70:	018b      	lsls	r3, r1, #6
10012c72:	1ac0      	subs	r0, r0, r3
10012c74:	4152      	adcs	r2, r2
10012c76:	0943      	lsrs	r3, r0, #5
10012c78:	428b      	cmp	r3, r1
10012c7a:	d301      	bcc.n	10012c80 <__aeabi_idiv+0x16c>
10012c7c:	014b      	lsls	r3, r1, #5
10012c7e:	1ac0      	subs	r0, r0, r3
10012c80:	4152      	adcs	r2, r2
10012c82:	0903      	lsrs	r3, r0, #4
10012c84:	428b      	cmp	r3, r1
10012c86:	d301      	bcc.n	10012c8c <__aeabi_idiv+0x178>
10012c88:	010b      	lsls	r3, r1, #4
10012c8a:	1ac0      	subs	r0, r0, r3
10012c8c:	4152      	adcs	r2, r2
10012c8e:	08c3      	lsrs	r3, r0, #3
10012c90:	428b      	cmp	r3, r1
10012c92:	d301      	bcc.n	10012c98 <__aeabi_idiv+0x184>
10012c94:	00cb      	lsls	r3, r1, #3
10012c96:	1ac0      	subs	r0, r0, r3
10012c98:	4152      	adcs	r2, r2
10012c9a:	0883      	lsrs	r3, r0, #2
10012c9c:	428b      	cmp	r3, r1
10012c9e:	d301      	bcc.n	10012ca4 <__aeabi_idiv+0x190>
10012ca0:	008b      	lsls	r3, r1, #2
10012ca2:	1ac0      	subs	r0, r0, r3
10012ca4:	4152      	adcs	r2, r2
10012ca6:	d2d9      	bcs.n	10012c5c <__aeabi_idiv+0x148>
10012ca8:	0843      	lsrs	r3, r0, #1
10012caa:	428b      	cmp	r3, r1
10012cac:	d301      	bcc.n	10012cb2 <__aeabi_idiv+0x19e>
10012cae:	004b      	lsls	r3, r1, #1
10012cb0:	1ac0      	subs	r0, r0, r3
10012cb2:	4152      	adcs	r2, r2
10012cb4:	1a41      	subs	r1, r0, r1
10012cb6:	d200      	bcs.n	10012cba <__aeabi_idiv+0x1a6>
10012cb8:	4601      	mov	r1, r0
10012cba:	4663      	mov	r3, ip
10012cbc:	4152      	adcs	r2, r2
10012cbe:	105b      	asrs	r3, r3, #1
10012cc0:	4610      	mov	r0, r2
10012cc2:	d301      	bcc.n	10012cc8 <__aeabi_idiv+0x1b4>
10012cc4:	4240      	negs	r0, r0
10012cc6:	2b00      	cmp	r3, #0
10012cc8:	d500      	bpl.n	10012ccc <__aeabi_idiv+0x1b8>
10012cca:	4249      	negs	r1, r1
10012ccc:	4770      	bx	lr
10012cce:	4663      	mov	r3, ip
10012cd0:	105b      	asrs	r3, r3, #1
10012cd2:	d300      	bcc.n	10012cd6 <__aeabi_idiv+0x1c2>
10012cd4:	4240      	negs	r0, r0
10012cd6:	b501      	push	{r0, lr}
10012cd8:	2000      	movs	r0, #0
10012cda:	f000 f805 	bl	10012ce8 <__aeabi_idiv0>
10012cde:	bd02      	pop	{r1, pc}

10012ce0 <__aeabi_idivmod>:
10012ce0:	2900      	cmp	r1, #0
10012ce2:	d0f8      	beq.n	10012cd6 <__aeabi_idiv+0x1c2>
10012ce4:	e716      	b.n	10012b14 <__aeabi_idiv>
10012ce6:	4770      	bx	lr

10012ce8 <__aeabi_idiv0>:
10012ce8:	4770      	bx	lr
10012cea:	46c0      	nop			; (mov r8, r8)

10012cec <__aeabi_cdrcmple>:
10012cec:	4684      	mov	ip, r0
10012cee:	1c10      	adds	r0, r2, #0
10012cf0:	4662      	mov	r2, ip
10012cf2:	468c      	mov	ip, r1
10012cf4:	1c19      	adds	r1, r3, #0
10012cf6:	4663      	mov	r3, ip
10012cf8:	e000      	b.n	10012cfc <__aeabi_cdcmpeq>
10012cfa:	46c0      	nop			; (mov r8, r8)

10012cfc <__aeabi_cdcmpeq>:
10012cfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012cfe:	f001 fcc1 	bl	10014684 <__ledf2>
10012d02:	2800      	cmp	r0, #0
10012d04:	d401      	bmi.n	10012d0a <__aeabi_cdcmpeq+0xe>
10012d06:	2100      	movs	r1, #0
10012d08:	42c8      	cmn	r0, r1
10012d0a:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012d0c <__aeabi_dcmpeq>:
10012d0c:	b510      	push	{r4, lr}
10012d0e:	f001 fc15 	bl	1001453c <__eqdf2>
10012d12:	4240      	negs	r0, r0
10012d14:	3001      	adds	r0, #1
10012d16:	bd10      	pop	{r4, pc}

10012d18 <__aeabi_dcmplt>:
10012d18:	b510      	push	{r4, lr}
10012d1a:	f001 fcb3 	bl	10014684 <__ledf2>
10012d1e:	2800      	cmp	r0, #0
10012d20:	db01      	blt.n	10012d26 <__aeabi_dcmplt+0xe>
10012d22:	2000      	movs	r0, #0
10012d24:	bd10      	pop	{r4, pc}
10012d26:	2001      	movs	r0, #1
10012d28:	bd10      	pop	{r4, pc}
10012d2a:	46c0      	nop			; (mov r8, r8)

10012d2c <__aeabi_dcmple>:
10012d2c:	b510      	push	{r4, lr}
10012d2e:	f001 fca9 	bl	10014684 <__ledf2>
10012d32:	2800      	cmp	r0, #0
10012d34:	dd01      	ble.n	10012d3a <__aeabi_dcmple+0xe>
10012d36:	2000      	movs	r0, #0
10012d38:	bd10      	pop	{r4, pc}
10012d3a:	2001      	movs	r0, #1
10012d3c:	bd10      	pop	{r4, pc}
10012d3e:	46c0      	nop			; (mov r8, r8)

10012d40 <__aeabi_dcmpgt>:
10012d40:	b510      	push	{r4, lr}
10012d42:	f001 fc3b 	bl	100145bc <__gedf2>
10012d46:	2800      	cmp	r0, #0
10012d48:	dc01      	bgt.n	10012d4e <__aeabi_dcmpgt+0xe>
10012d4a:	2000      	movs	r0, #0
10012d4c:	bd10      	pop	{r4, pc}
10012d4e:	2001      	movs	r0, #1
10012d50:	bd10      	pop	{r4, pc}
10012d52:	46c0      	nop			; (mov r8, r8)

10012d54 <__aeabi_dcmpge>:
10012d54:	b510      	push	{r4, lr}
10012d56:	f001 fc31 	bl	100145bc <__gedf2>
10012d5a:	2800      	cmp	r0, #0
10012d5c:	da01      	bge.n	10012d62 <__aeabi_dcmpge+0xe>
10012d5e:	2000      	movs	r0, #0
10012d60:	bd10      	pop	{r4, pc}
10012d62:	2001      	movs	r0, #1
10012d64:	bd10      	pop	{r4, pc}
10012d66:	46c0      	nop			; (mov r8, r8)

10012d68 <__aeabi_cfrcmple>:
10012d68:	4684      	mov	ip, r0
10012d6a:	1c08      	adds	r0, r1, #0
10012d6c:	4661      	mov	r1, ip
10012d6e:	e7ff      	b.n	10012d70 <__aeabi_cfcmpeq>

10012d70 <__aeabi_cfcmpeq>:
10012d70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012d72:	f000 fa1b 	bl	100131ac <__lesf2>
10012d76:	2800      	cmp	r0, #0
10012d78:	d401      	bmi.n	10012d7e <__aeabi_cfcmpeq+0xe>
10012d7a:	2100      	movs	r1, #0
10012d7c:	42c8      	cmn	r0, r1
10012d7e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012d80 <__aeabi_fcmpeq>:
10012d80:	b510      	push	{r4, lr}
10012d82:	f000 f9a7 	bl	100130d4 <__eqsf2>
10012d86:	4240      	negs	r0, r0
10012d88:	3001      	adds	r0, #1
10012d8a:	bd10      	pop	{r4, pc}

10012d8c <__aeabi_fcmplt>:
10012d8c:	b510      	push	{r4, lr}
10012d8e:	f000 fa0d 	bl	100131ac <__lesf2>
10012d92:	2800      	cmp	r0, #0
10012d94:	db01      	blt.n	10012d9a <__aeabi_fcmplt+0xe>
10012d96:	2000      	movs	r0, #0
10012d98:	bd10      	pop	{r4, pc}
10012d9a:	2001      	movs	r0, #1
10012d9c:	bd10      	pop	{r4, pc}
10012d9e:	46c0      	nop			; (mov r8, r8)

10012da0 <__aeabi_fcmple>:
10012da0:	b510      	push	{r4, lr}
10012da2:	f000 fa03 	bl	100131ac <__lesf2>
10012da6:	2800      	cmp	r0, #0
10012da8:	dd01      	ble.n	10012dae <__aeabi_fcmple+0xe>
10012daa:	2000      	movs	r0, #0
10012dac:	bd10      	pop	{r4, pc}
10012dae:	2001      	movs	r0, #1
10012db0:	bd10      	pop	{r4, pc}
10012db2:	46c0      	nop			; (mov r8, r8)

10012db4 <__aeabi_fcmpgt>:
10012db4:	b510      	push	{r4, lr}
10012db6:	f000 f9b5 	bl	10013124 <__gesf2>
10012dba:	2800      	cmp	r0, #0
10012dbc:	dc01      	bgt.n	10012dc2 <__aeabi_fcmpgt+0xe>
10012dbe:	2000      	movs	r0, #0
10012dc0:	bd10      	pop	{r4, pc}
10012dc2:	2001      	movs	r0, #1
10012dc4:	bd10      	pop	{r4, pc}
10012dc6:	46c0      	nop			; (mov r8, r8)

10012dc8 <__aeabi_fcmpge>:
10012dc8:	b510      	push	{r4, lr}
10012dca:	f000 f9ab 	bl	10013124 <__gesf2>
10012dce:	2800      	cmp	r0, #0
10012dd0:	da01      	bge.n	10012dd6 <__aeabi_fcmpge+0xe>
10012dd2:	2000      	movs	r0, #0
10012dd4:	bd10      	pop	{r4, pc}
10012dd6:	2001      	movs	r0, #1
10012dd8:	bd10      	pop	{r4, pc}
10012dda:	46c0      	nop			; (mov r8, r8)

10012ddc <__aeabi_lmul>:
10012ddc:	b5f0      	push	{r4, r5, r6, r7, lr}
10012dde:	464f      	mov	r7, r9
10012de0:	4646      	mov	r6, r8
10012de2:	b4c0      	push	{r6, r7}
10012de4:	0416      	lsls	r6, r2, #16
10012de6:	0c36      	lsrs	r6, r6, #16
10012de8:	4699      	mov	r9, r3
10012dea:	0033      	movs	r3, r6
10012dec:	0405      	lsls	r5, r0, #16
10012dee:	0c2c      	lsrs	r4, r5, #16
10012df0:	0c07      	lsrs	r7, r0, #16
10012df2:	0c15      	lsrs	r5, r2, #16
10012df4:	4363      	muls	r3, r4
10012df6:	437e      	muls	r6, r7
10012df8:	436f      	muls	r7, r5
10012dfa:	4365      	muls	r5, r4
10012dfc:	0c1c      	lsrs	r4, r3, #16
10012dfe:	19ad      	adds	r5, r5, r6
10012e00:	1964      	adds	r4, r4, r5
10012e02:	469c      	mov	ip, r3
10012e04:	42a6      	cmp	r6, r4
10012e06:	d903      	bls.n	10012e10 <__aeabi_lmul+0x34>
10012e08:	2380      	movs	r3, #128	; 0x80
10012e0a:	025b      	lsls	r3, r3, #9
10012e0c:	4698      	mov	r8, r3
10012e0e:	4447      	add	r7, r8
10012e10:	4663      	mov	r3, ip
10012e12:	0c25      	lsrs	r5, r4, #16
10012e14:	19ef      	adds	r7, r5, r7
10012e16:	041d      	lsls	r5, r3, #16
10012e18:	464b      	mov	r3, r9
10012e1a:	434a      	muls	r2, r1
10012e1c:	4343      	muls	r3, r0
10012e1e:	0c2d      	lsrs	r5, r5, #16
10012e20:	0424      	lsls	r4, r4, #16
10012e22:	1964      	adds	r4, r4, r5
10012e24:	1899      	adds	r1, r3, r2
10012e26:	19c9      	adds	r1, r1, r7
10012e28:	0020      	movs	r0, r4
10012e2a:	bc0c      	pop	{r2, r3}
10012e2c:	4690      	mov	r8, r2
10012e2e:	4699      	mov	r9, r3
10012e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012e32:	46c0      	nop			; (mov r8, r8)

10012e34 <__aeabi_f2uiz>:
10012e34:	219e      	movs	r1, #158	; 0x9e
10012e36:	b510      	push	{r4, lr}
10012e38:	05c9      	lsls	r1, r1, #23
10012e3a:	1c04      	adds	r4, r0, #0
10012e3c:	f7ff ffc4 	bl	10012dc8 <__aeabi_fcmpge>
10012e40:	2800      	cmp	r0, #0
10012e42:	d103      	bne.n	10012e4c <__aeabi_f2uiz+0x18>
10012e44:	1c20      	adds	r0, r4, #0
10012e46:	f000 fc8f 	bl	10013768 <__aeabi_f2iz>
10012e4a:	bd10      	pop	{r4, pc}
10012e4c:	219e      	movs	r1, #158	; 0x9e
10012e4e:	1c20      	adds	r0, r4, #0
10012e50:	05c9      	lsls	r1, r1, #23
10012e52:	f000 fb03 	bl	1001345c <__aeabi_fsub>
10012e56:	f000 fc87 	bl	10013768 <__aeabi_f2iz>
10012e5a:	2380      	movs	r3, #128	; 0x80
10012e5c:	061b      	lsls	r3, r3, #24
10012e5e:	469c      	mov	ip, r3
10012e60:	4460      	add	r0, ip
10012e62:	e7f2      	b.n	10012e4a <__aeabi_f2uiz+0x16>

10012e64 <__aeabi_d2uiz>:
10012e64:	b570      	push	{r4, r5, r6, lr}
10012e66:	2200      	movs	r2, #0
10012e68:	4b0c      	ldr	r3, [pc, #48]	; (10012e9c <__aeabi_d2uiz+0x38>)
10012e6a:	0004      	movs	r4, r0
10012e6c:	000d      	movs	r5, r1
10012e6e:	f7ff ff71 	bl	10012d54 <__aeabi_dcmpge>
10012e72:	2800      	cmp	r0, #0
10012e74:	d104      	bne.n	10012e80 <__aeabi_d2uiz+0x1c>
10012e76:	0020      	movs	r0, r4
10012e78:	0029      	movs	r1, r5
10012e7a:	f002 fa5b 	bl	10015334 <__aeabi_d2iz>
10012e7e:	bd70      	pop	{r4, r5, r6, pc}
10012e80:	4b06      	ldr	r3, [pc, #24]	; (10012e9c <__aeabi_d2uiz+0x38>)
10012e82:	2200      	movs	r2, #0
10012e84:	0020      	movs	r0, r4
10012e86:	0029      	movs	r1, r5
10012e88:	f001 fee0 	bl	10014c4c <__aeabi_dsub>
10012e8c:	f002 fa52 	bl	10015334 <__aeabi_d2iz>
10012e90:	2380      	movs	r3, #128	; 0x80
10012e92:	061b      	lsls	r3, r3, #24
10012e94:	469c      	mov	ip, r3
10012e96:	4460      	add	r0, ip
10012e98:	e7f1      	b.n	10012e7e <__aeabi_d2uiz+0x1a>
10012e9a:	46c0      	nop			; (mov r8, r8)
10012e9c:	41e00000 	.word	0x41e00000

10012ea0 <__aeabi_fdiv>:
10012ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
10012ea2:	4656      	mov	r6, sl
10012ea4:	4644      	mov	r4, r8
10012ea6:	465f      	mov	r7, fp
10012ea8:	464d      	mov	r5, r9
10012eaa:	b4f0      	push	{r4, r5, r6, r7}
10012eac:	0244      	lsls	r4, r0, #9
10012eae:	0046      	lsls	r6, r0, #1
10012eb0:	0fc7      	lsrs	r7, r0, #31
10012eb2:	b083      	sub	sp, #12
10012eb4:	4688      	mov	r8, r1
10012eb6:	0a65      	lsrs	r5, r4, #9
10012eb8:	0e36      	lsrs	r6, r6, #24
10012eba:	46ba      	mov	sl, r7
10012ebc:	d03d      	beq.n	10012f3a <__aeabi_fdiv+0x9a>
10012ebe:	2eff      	cmp	r6, #255	; 0xff
10012ec0:	d022      	beq.n	10012f08 <__aeabi_fdiv+0x68>
10012ec2:	2300      	movs	r3, #0
10012ec4:	00ec      	lsls	r4, r5, #3
10012ec6:	2580      	movs	r5, #128	; 0x80
10012ec8:	4699      	mov	r9, r3
10012eca:	469b      	mov	fp, r3
10012ecc:	04ed      	lsls	r5, r5, #19
10012ece:	4325      	orrs	r5, r4
10012ed0:	3e7f      	subs	r6, #127	; 0x7f
10012ed2:	4643      	mov	r3, r8
10012ed4:	025c      	lsls	r4, r3, #9
10012ed6:	0058      	lsls	r0, r3, #1
10012ed8:	0fdb      	lsrs	r3, r3, #31
10012eda:	0a64      	lsrs	r4, r4, #9
10012edc:	0e00      	lsrs	r0, r0, #24
10012ede:	4698      	mov	r8, r3
10012ee0:	d036      	beq.n	10012f50 <__aeabi_fdiv+0xb0>
10012ee2:	28ff      	cmp	r0, #255	; 0xff
10012ee4:	d030      	beq.n	10012f48 <__aeabi_fdiv+0xa8>
10012ee6:	2380      	movs	r3, #128	; 0x80
10012ee8:	2100      	movs	r1, #0
10012eea:	00e4      	lsls	r4, r4, #3
10012eec:	04db      	lsls	r3, r3, #19
10012eee:	431c      	orrs	r4, r3
10012ef0:	387f      	subs	r0, #127	; 0x7f
10012ef2:	1a30      	subs	r0, r6, r0
10012ef4:	9001      	str	r0, [sp, #4]
10012ef6:	4648      	mov	r0, r9
10012ef8:	4642      	mov	r2, r8
10012efa:	4308      	orrs	r0, r1
10012efc:	4e72      	ldr	r6, [pc, #456]	; (100130c8 <__aeabi_fdiv+0x228>)
10012efe:	0080      	lsls	r0, r0, #2
10012f00:	5830      	ldr	r0, [r6, r0]
10012f02:	407a      	eors	r2, r7
10012f04:	0013      	movs	r3, r2
10012f06:	4687      	mov	pc, r0
10012f08:	2d00      	cmp	r5, #0
10012f0a:	d144      	bne.n	10012f96 <__aeabi_fdiv+0xf6>
10012f0c:	2308      	movs	r3, #8
10012f0e:	4699      	mov	r9, r3
10012f10:	3b06      	subs	r3, #6
10012f12:	469b      	mov	fp, r3
10012f14:	e7dd      	b.n	10012ed2 <__aeabi_fdiv+0x32>
10012f16:	2201      	movs	r2, #1
10012f18:	20ff      	movs	r0, #255	; 0xff
10012f1a:	2400      	movs	r4, #0
10012f1c:	401a      	ands	r2, r3
10012f1e:	0264      	lsls	r4, r4, #9
10012f20:	05c3      	lsls	r3, r0, #23
10012f22:	0a64      	lsrs	r4, r4, #9
10012f24:	07d2      	lsls	r2, r2, #31
10012f26:	431c      	orrs	r4, r3
10012f28:	4314      	orrs	r4, r2
10012f2a:	0020      	movs	r0, r4
10012f2c:	b003      	add	sp, #12
10012f2e:	bc3c      	pop	{r2, r3, r4, r5}
10012f30:	4690      	mov	r8, r2
10012f32:	4699      	mov	r9, r3
10012f34:	46a2      	mov	sl, r4
10012f36:	46ab      	mov	fp, r5
10012f38:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012f3a:	2d00      	cmp	r5, #0
10012f3c:	d120      	bne.n	10012f80 <__aeabi_fdiv+0xe0>
10012f3e:	2304      	movs	r3, #4
10012f40:	4699      	mov	r9, r3
10012f42:	3b03      	subs	r3, #3
10012f44:	469b      	mov	fp, r3
10012f46:	e7c4      	b.n	10012ed2 <__aeabi_fdiv+0x32>
10012f48:	2c00      	cmp	r4, #0
10012f4a:	d117      	bne.n	10012f7c <__aeabi_fdiv+0xdc>
10012f4c:	2102      	movs	r1, #2
10012f4e:	e002      	b.n	10012f56 <__aeabi_fdiv+0xb6>
10012f50:	2c00      	cmp	r4, #0
10012f52:	d10a      	bne.n	10012f6a <__aeabi_fdiv+0xca>
10012f54:	2101      	movs	r1, #1
10012f56:	1a32      	subs	r2, r6, r0
10012f58:	9201      	str	r2, [sp, #4]
10012f5a:	464a      	mov	r2, r9
10012f5c:	4643      	mov	r3, r8
10012f5e:	430a      	orrs	r2, r1
10012f60:	485a      	ldr	r0, [pc, #360]	; (100130cc <__aeabi_fdiv+0x22c>)
10012f62:	0092      	lsls	r2, r2, #2
10012f64:	5882      	ldr	r2, [r0, r2]
10012f66:	407b      	eors	r3, r7
10012f68:	4697      	mov	pc, r2
10012f6a:	0020      	movs	r0, r4
10012f6c:	f002 fb72 	bl	10015654 <__clzsi2>
10012f70:	1f43      	subs	r3, r0, #5
10012f72:	3076      	adds	r0, #118	; 0x76
10012f74:	409c      	lsls	r4, r3
10012f76:	4240      	negs	r0, r0
10012f78:	2100      	movs	r1, #0
10012f7a:	e7ba      	b.n	10012ef2 <__aeabi_fdiv+0x52>
10012f7c:	2103      	movs	r1, #3
10012f7e:	e7b8      	b.n	10012ef2 <__aeabi_fdiv+0x52>
10012f80:	0028      	movs	r0, r5
10012f82:	f002 fb67 	bl	10015654 <__clzsi2>
10012f86:	1f43      	subs	r3, r0, #5
10012f88:	409d      	lsls	r5, r3
10012f8a:	2300      	movs	r3, #0
10012f8c:	3076      	adds	r0, #118	; 0x76
10012f8e:	4246      	negs	r6, r0
10012f90:	4699      	mov	r9, r3
10012f92:	469b      	mov	fp, r3
10012f94:	e79d      	b.n	10012ed2 <__aeabi_fdiv+0x32>
10012f96:	230c      	movs	r3, #12
10012f98:	4699      	mov	r9, r3
10012f9a:	3b09      	subs	r3, #9
10012f9c:	469b      	mov	fp, r3
10012f9e:	e798      	b.n	10012ed2 <__aeabi_fdiv+0x32>
10012fa0:	2480      	movs	r4, #128	; 0x80
10012fa2:	2200      	movs	r2, #0
10012fa4:	03e4      	lsls	r4, r4, #15
10012fa6:	20ff      	movs	r0, #255	; 0xff
10012fa8:	e7b9      	b.n	10012f1e <__aeabi_fdiv+0x7e>
10012faa:	2400      	movs	r4, #0
10012fac:	46c2      	mov	sl, r8
10012fae:	468b      	mov	fp, r1
10012fb0:	465a      	mov	r2, fp
10012fb2:	4653      	mov	r3, sl
10012fb4:	2a02      	cmp	r2, #2
10012fb6:	d0ae      	beq.n	10012f16 <__aeabi_fdiv+0x76>
10012fb8:	2a03      	cmp	r2, #3
10012fba:	d07d      	beq.n	100130b8 <__aeabi_fdiv+0x218>
10012fbc:	2a01      	cmp	r2, #1
10012fbe:	d131      	bne.n	10013024 <__aeabi_fdiv+0x184>
10012fc0:	2201      	movs	r2, #1
10012fc2:	2000      	movs	r0, #0
10012fc4:	401a      	ands	r2, r3
10012fc6:	2400      	movs	r4, #0
10012fc8:	e7a9      	b.n	10012f1e <__aeabi_fdiv+0x7e>
10012fca:	2201      	movs	r2, #1
10012fcc:	1a10      	subs	r0, r2, r0
10012fce:	281b      	cmp	r0, #27
10012fd0:	dd56      	ble.n	10013080 <__aeabi_fdiv+0x1e0>
10012fd2:	401a      	ands	r2, r3
10012fd4:	2000      	movs	r0, #0
10012fd6:	2400      	movs	r4, #0
10012fd8:	e7a1      	b.n	10012f1e <__aeabi_fdiv+0x7e>
10012fda:	2380      	movs	r3, #128	; 0x80
10012fdc:	03db      	lsls	r3, r3, #15
10012fde:	421d      	tst	r5, r3
10012fe0:	d14b      	bne.n	1001307a <__aeabi_fdiv+0x1da>
10012fe2:	2380      	movs	r3, #128	; 0x80
10012fe4:	03db      	lsls	r3, r3, #15
10012fe6:	432b      	orrs	r3, r5
10012fe8:	025c      	lsls	r4, r3, #9
10012fea:	0a64      	lsrs	r4, r4, #9
10012fec:	003a      	movs	r2, r7
10012fee:	20ff      	movs	r0, #255	; 0xff
10012ff0:	e795      	b.n	10012f1e <__aeabi_fdiv+0x7e>
10012ff2:	016d      	lsls	r5, r5, #5
10012ff4:	0160      	lsls	r0, r4, #5
10012ff6:	4285      	cmp	r5, r0
10012ff8:	d230      	bcs.n	1001305c <__aeabi_fdiv+0x1bc>
10012ffa:	9a01      	ldr	r2, [sp, #4]
10012ffc:	2400      	movs	r4, #0
10012ffe:	3a01      	subs	r2, #1
10013000:	9201      	str	r2, [sp, #4]
10013002:	221b      	movs	r2, #27
10013004:	2701      	movs	r7, #1
10013006:	0029      	movs	r1, r5
10013008:	0064      	lsls	r4, r4, #1
1001300a:	006d      	lsls	r5, r5, #1
1001300c:	2900      	cmp	r1, #0
1001300e:	db01      	blt.n	10013014 <__aeabi_fdiv+0x174>
10013010:	42a8      	cmp	r0, r5
10013012:	d801      	bhi.n	10013018 <__aeabi_fdiv+0x178>
10013014:	1a2d      	subs	r5, r5, r0
10013016:	433c      	orrs	r4, r7
10013018:	3a01      	subs	r2, #1
1001301a:	2a00      	cmp	r2, #0
1001301c:	d1f3      	bne.n	10013006 <__aeabi_fdiv+0x166>
1001301e:	1e6a      	subs	r2, r5, #1
10013020:	4195      	sbcs	r5, r2
10013022:	432c      	orrs	r4, r5
10013024:	9801      	ldr	r0, [sp, #4]
10013026:	307f      	adds	r0, #127	; 0x7f
10013028:	2800      	cmp	r0, #0
1001302a:	ddce      	ble.n	10012fca <__aeabi_fdiv+0x12a>
1001302c:	0762      	lsls	r2, r4, #29
1001302e:	d004      	beq.n	1001303a <__aeabi_fdiv+0x19a>
10013030:	220f      	movs	r2, #15
10013032:	4022      	ands	r2, r4
10013034:	2a04      	cmp	r2, #4
10013036:	d000      	beq.n	1001303a <__aeabi_fdiv+0x19a>
10013038:	3404      	adds	r4, #4
1001303a:	0122      	lsls	r2, r4, #4
1001303c:	d503      	bpl.n	10013046 <__aeabi_fdiv+0x1a6>
1001303e:	4a24      	ldr	r2, [pc, #144]	; (100130d0 <__aeabi_fdiv+0x230>)
10013040:	9801      	ldr	r0, [sp, #4]
10013042:	4014      	ands	r4, r2
10013044:	3080      	adds	r0, #128	; 0x80
10013046:	28fe      	cmp	r0, #254	; 0xfe
10013048:	dd00      	ble.n	1001304c <__aeabi_fdiv+0x1ac>
1001304a:	e764      	b.n	10012f16 <__aeabi_fdiv+0x76>
1001304c:	2201      	movs	r2, #1
1001304e:	01a4      	lsls	r4, r4, #6
10013050:	0a64      	lsrs	r4, r4, #9
10013052:	b2c0      	uxtb	r0, r0
10013054:	401a      	ands	r2, r3
10013056:	e762      	b.n	10012f1e <__aeabi_fdiv+0x7e>
10013058:	002c      	movs	r4, r5
1001305a:	e7a9      	b.n	10012fb0 <__aeabi_fdiv+0x110>
1001305c:	1a2d      	subs	r5, r5, r0
1001305e:	221a      	movs	r2, #26
10013060:	2401      	movs	r4, #1
10013062:	e7cf      	b.n	10013004 <__aeabi_fdiv+0x164>
10013064:	026b      	lsls	r3, r5, #9
10013066:	d5bc      	bpl.n	10012fe2 <__aeabi_fdiv+0x142>
10013068:	2400      	movs	r4, #0
1001306a:	2380      	movs	r3, #128	; 0x80
1001306c:	03db      	lsls	r3, r3, #15
1001306e:	431c      	orrs	r4, r3
10013070:	0264      	lsls	r4, r4, #9
10013072:	0a64      	lsrs	r4, r4, #9
10013074:	4642      	mov	r2, r8
10013076:	20ff      	movs	r0, #255	; 0xff
10013078:	e751      	b.n	10012f1e <__aeabi_fdiv+0x7e>
1001307a:	421c      	tst	r4, r3
1001307c:	d1b3      	bne.n	10012fe6 <__aeabi_fdiv+0x146>
1001307e:	e7f4      	b.n	1001306a <__aeabi_fdiv+0x1ca>
10013080:	0021      	movs	r1, r4
10013082:	2220      	movs	r2, #32
10013084:	40c1      	lsrs	r1, r0
10013086:	1a10      	subs	r0, r2, r0
10013088:	4084      	lsls	r4, r0
1001308a:	1e62      	subs	r2, r4, #1
1001308c:	4194      	sbcs	r4, r2
1001308e:	430c      	orrs	r4, r1
10013090:	0762      	lsls	r2, r4, #29
10013092:	d004      	beq.n	1001309e <__aeabi_fdiv+0x1fe>
10013094:	220f      	movs	r2, #15
10013096:	4022      	ands	r2, r4
10013098:	2a04      	cmp	r2, #4
1001309a:	d000      	beq.n	1001309e <__aeabi_fdiv+0x1fe>
1001309c:	3404      	adds	r4, #4
1001309e:	0162      	lsls	r2, r4, #5
100130a0:	d504      	bpl.n	100130ac <__aeabi_fdiv+0x20c>
100130a2:	2201      	movs	r2, #1
100130a4:	2001      	movs	r0, #1
100130a6:	401a      	ands	r2, r3
100130a8:	2400      	movs	r4, #0
100130aa:	e738      	b.n	10012f1e <__aeabi_fdiv+0x7e>
100130ac:	2201      	movs	r2, #1
100130ae:	01a4      	lsls	r4, r4, #6
100130b0:	0a64      	lsrs	r4, r4, #9
100130b2:	401a      	ands	r2, r3
100130b4:	2000      	movs	r0, #0
100130b6:	e732      	b.n	10012f1e <__aeabi_fdiv+0x7e>
100130b8:	2380      	movs	r3, #128	; 0x80
100130ba:	03db      	lsls	r3, r3, #15
100130bc:	431c      	orrs	r4, r3
100130be:	0264      	lsls	r4, r4, #9
100130c0:	0a64      	lsrs	r4, r4, #9
100130c2:	4652      	mov	r2, sl
100130c4:	20ff      	movs	r0, #255	; 0xff
100130c6:	e72a      	b.n	10012f1e <__aeabi_fdiv+0x7e>
100130c8:	10018200 	.word	0x10018200
100130cc:	10018240 	.word	0x10018240
100130d0:	f7ffffff 	.word	0xf7ffffff

100130d4 <__eqsf2>:
100130d4:	0243      	lsls	r3, r0, #9
100130d6:	b570      	push	{r4, r5, r6, lr}
100130d8:	0042      	lsls	r2, r0, #1
100130da:	004c      	lsls	r4, r1, #1
100130dc:	0a5d      	lsrs	r5, r3, #9
100130de:	0fc3      	lsrs	r3, r0, #31
100130e0:	0248      	lsls	r0, r1, #9
100130e2:	0e12      	lsrs	r2, r2, #24
100130e4:	0a46      	lsrs	r6, r0, #9
100130e6:	0e24      	lsrs	r4, r4, #24
100130e8:	0fc9      	lsrs	r1, r1, #31
100130ea:	2aff      	cmp	r2, #255	; 0xff
100130ec:	d00f      	beq.n	1001310e <__eqsf2+0x3a>
100130ee:	2cff      	cmp	r4, #255	; 0xff
100130f0:	d011      	beq.n	10013116 <__eqsf2+0x42>
100130f2:	2001      	movs	r0, #1
100130f4:	42a2      	cmp	r2, r4
100130f6:	d000      	beq.n	100130fa <__eqsf2+0x26>
100130f8:	bd70      	pop	{r4, r5, r6, pc}
100130fa:	42b5      	cmp	r5, r6
100130fc:	d1fc      	bne.n	100130f8 <__eqsf2+0x24>
100130fe:	428b      	cmp	r3, r1
10013100:	d00d      	beq.n	1001311e <__eqsf2+0x4a>
10013102:	2a00      	cmp	r2, #0
10013104:	d1f8      	bne.n	100130f8 <__eqsf2+0x24>
10013106:	0028      	movs	r0, r5
10013108:	1e43      	subs	r3, r0, #1
1001310a:	4198      	sbcs	r0, r3
1001310c:	e7f4      	b.n	100130f8 <__eqsf2+0x24>
1001310e:	2001      	movs	r0, #1
10013110:	2d00      	cmp	r5, #0
10013112:	d1f1      	bne.n	100130f8 <__eqsf2+0x24>
10013114:	e7eb      	b.n	100130ee <__eqsf2+0x1a>
10013116:	2001      	movs	r0, #1
10013118:	2e00      	cmp	r6, #0
1001311a:	d1ed      	bne.n	100130f8 <__eqsf2+0x24>
1001311c:	e7e9      	b.n	100130f2 <__eqsf2+0x1e>
1001311e:	2000      	movs	r0, #0
10013120:	e7ea      	b.n	100130f8 <__eqsf2+0x24>
10013122:	46c0      	nop			; (mov r8, r8)

10013124 <__gesf2>:
10013124:	0243      	lsls	r3, r0, #9
10013126:	b5f0      	push	{r4, r5, r6, r7, lr}
10013128:	0042      	lsls	r2, r0, #1
1001312a:	0a5d      	lsrs	r5, r3, #9
1001312c:	0fc3      	lsrs	r3, r0, #31
1001312e:	0248      	lsls	r0, r1, #9
10013130:	0a44      	lsrs	r4, r0, #9
10013132:	0048      	lsls	r0, r1, #1
10013134:	0e12      	lsrs	r2, r2, #24
10013136:	0e00      	lsrs	r0, r0, #24
10013138:	0fc9      	lsrs	r1, r1, #31
1001313a:	2aff      	cmp	r2, #255	; 0xff
1001313c:	d01f      	beq.n	1001317e <__gesf2+0x5a>
1001313e:	28ff      	cmp	r0, #255	; 0xff
10013140:	d022      	beq.n	10013188 <__gesf2+0x64>
10013142:	2a00      	cmp	r2, #0
10013144:	d109      	bne.n	1001315a <__gesf2+0x36>
10013146:	426e      	negs	r6, r5
10013148:	416e      	adcs	r6, r5
1001314a:	2800      	cmp	r0, #0
1001314c:	d10f      	bne.n	1001316e <__gesf2+0x4a>
1001314e:	2c00      	cmp	r4, #0
10013150:	d10d      	bne.n	1001316e <__gesf2+0x4a>
10013152:	2000      	movs	r0, #0
10013154:	2d00      	cmp	r5, #0
10013156:	d009      	beq.n	1001316c <__gesf2+0x48>
10013158:	e005      	b.n	10013166 <__gesf2+0x42>
1001315a:	2800      	cmp	r0, #0
1001315c:	d101      	bne.n	10013162 <__gesf2+0x3e>
1001315e:	2c00      	cmp	r4, #0
10013160:	d001      	beq.n	10013166 <__gesf2+0x42>
10013162:	428b      	cmp	r3, r1
10013164:	d013      	beq.n	1001318e <__gesf2+0x6a>
10013166:	4258      	negs	r0, r3
10013168:	2301      	movs	r3, #1
1001316a:	4318      	orrs	r0, r3
1001316c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001316e:	2e00      	cmp	r6, #0
10013170:	d0f7      	beq.n	10013162 <__gesf2+0x3e>
10013172:	4248      	negs	r0, r1
10013174:	4141      	adcs	r1, r0
10013176:	2001      	movs	r0, #1
10013178:	4249      	negs	r1, r1
1001317a:	4308      	orrs	r0, r1
1001317c:	e7f6      	b.n	1001316c <__gesf2+0x48>
1001317e:	2d00      	cmp	r5, #0
10013180:	d0dd      	beq.n	1001313e <__gesf2+0x1a>
10013182:	2002      	movs	r0, #2
10013184:	4240      	negs	r0, r0
10013186:	e7f1      	b.n	1001316c <__gesf2+0x48>
10013188:	2c00      	cmp	r4, #0
1001318a:	d0da      	beq.n	10013142 <__gesf2+0x1e>
1001318c:	e7f9      	b.n	10013182 <__gesf2+0x5e>
1001318e:	4282      	cmp	r2, r0
10013190:	dce9      	bgt.n	10013166 <__gesf2+0x42>
10013192:	db04      	blt.n	1001319e <__gesf2+0x7a>
10013194:	42a5      	cmp	r5, r4
10013196:	d8e6      	bhi.n	10013166 <__gesf2+0x42>
10013198:	2000      	movs	r0, #0
1001319a:	42a5      	cmp	r5, r4
1001319c:	d2e6      	bcs.n	1001316c <__gesf2+0x48>
1001319e:	4258      	negs	r0, r3
100131a0:	4143      	adcs	r3, r0
100131a2:	2001      	movs	r0, #1
100131a4:	425b      	negs	r3, r3
100131a6:	4318      	orrs	r0, r3
100131a8:	e7e0      	b.n	1001316c <__gesf2+0x48>
100131aa:	46c0      	nop			; (mov r8, r8)

100131ac <__lesf2>:
100131ac:	0243      	lsls	r3, r0, #9
100131ae:	b5f0      	push	{r4, r5, r6, r7, lr}
100131b0:	0042      	lsls	r2, r0, #1
100131b2:	004c      	lsls	r4, r1, #1
100131b4:	0a5e      	lsrs	r6, r3, #9
100131b6:	0fc3      	lsrs	r3, r0, #31
100131b8:	0248      	lsls	r0, r1, #9
100131ba:	0e12      	lsrs	r2, r2, #24
100131bc:	0a45      	lsrs	r5, r0, #9
100131be:	0e24      	lsrs	r4, r4, #24
100131c0:	0fc9      	lsrs	r1, r1, #31
100131c2:	2aff      	cmp	r2, #255	; 0xff
100131c4:	d017      	beq.n	100131f6 <__lesf2+0x4a>
100131c6:	2cff      	cmp	r4, #255	; 0xff
100131c8:	d019      	beq.n	100131fe <__lesf2+0x52>
100131ca:	2a00      	cmp	r2, #0
100131cc:	d10b      	bne.n	100131e6 <__lesf2+0x3a>
100131ce:	4270      	negs	r0, r6
100131d0:	4170      	adcs	r0, r6
100131d2:	2c00      	cmp	r4, #0
100131d4:	d017      	beq.n	10013206 <__lesf2+0x5a>
100131d6:	2800      	cmp	r0, #0
100131d8:	d007      	beq.n	100131ea <__lesf2+0x3e>
100131da:	4248      	negs	r0, r1
100131dc:	4141      	adcs	r1, r0
100131de:	2001      	movs	r0, #1
100131e0:	4249      	negs	r1, r1
100131e2:	4308      	orrs	r0, r1
100131e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
100131e6:	2c00      	cmp	r4, #0
100131e8:	d013      	beq.n	10013212 <__lesf2+0x66>
100131ea:	428b      	cmp	r3, r1
100131ec:	d014      	beq.n	10013218 <__lesf2+0x6c>
100131ee:	4258      	negs	r0, r3
100131f0:	2301      	movs	r3, #1
100131f2:	4318      	orrs	r0, r3
100131f4:	e7f6      	b.n	100131e4 <__lesf2+0x38>
100131f6:	2002      	movs	r0, #2
100131f8:	2e00      	cmp	r6, #0
100131fa:	d1f3      	bne.n	100131e4 <__lesf2+0x38>
100131fc:	e7e3      	b.n	100131c6 <__lesf2+0x1a>
100131fe:	2002      	movs	r0, #2
10013200:	2d00      	cmp	r5, #0
10013202:	d1ef      	bne.n	100131e4 <__lesf2+0x38>
10013204:	e7e1      	b.n	100131ca <__lesf2+0x1e>
10013206:	2d00      	cmp	r5, #0
10013208:	d1e5      	bne.n	100131d6 <__lesf2+0x2a>
1001320a:	2000      	movs	r0, #0
1001320c:	2e00      	cmp	r6, #0
1001320e:	d0e9      	beq.n	100131e4 <__lesf2+0x38>
10013210:	e7ed      	b.n	100131ee <__lesf2+0x42>
10013212:	2d00      	cmp	r5, #0
10013214:	d1e9      	bne.n	100131ea <__lesf2+0x3e>
10013216:	e7ea      	b.n	100131ee <__lesf2+0x42>
10013218:	42a2      	cmp	r2, r4
1001321a:	dce8      	bgt.n	100131ee <__lesf2+0x42>
1001321c:	db04      	blt.n	10013228 <__lesf2+0x7c>
1001321e:	42ae      	cmp	r6, r5
10013220:	d8e5      	bhi.n	100131ee <__lesf2+0x42>
10013222:	2000      	movs	r0, #0
10013224:	42ae      	cmp	r6, r5
10013226:	d2dd      	bcs.n	100131e4 <__lesf2+0x38>
10013228:	4258      	negs	r0, r3
1001322a:	4143      	adcs	r3, r0
1001322c:	2001      	movs	r0, #1
1001322e:	425b      	negs	r3, r3
10013230:	4318      	orrs	r0, r3
10013232:	e7d7      	b.n	100131e4 <__lesf2+0x38>

10013234 <__aeabi_fmul>:
10013234:	b5f0      	push	{r4, r5, r6, r7, lr}
10013236:	4657      	mov	r7, sl
10013238:	464e      	mov	r6, r9
1001323a:	4645      	mov	r5, r8
1001323c:	0043      	lsls	r3, r0, #1
1001323e:	b4e0      	push	{r5, r6, r7}
10013240:	0246      	lsls	r6, r0, #9
10013242:	4688      	mov	r8, r1
10013244:	0a76      	lsrs	r6, r6, #9
10013246:	0e1f      	lsrs	r7, r3, #24
10013248:	0fc4      	lsrs	r4, r0, #31
1001324a:	2f00      	cmp	r7, #0
1001324c:	d047      	beq.n	100132de <__aeabi_fmul+0xaa>
1001324e:	2fff      	cmp	r7, #255	; 0xff
10013250:	d025      	beq.n	1001329e <__aeabi_fmul+0x6a>
10013252:	2300      	movs	r3, #0
10013254:	2580      	movs	r5, #128	; 0x80
10013256:	469a      	mov	sl, r3
10013258:	4699      	mov	r9, r3
1001325a:	00f6      	lsls	r6, r6, #3
1001325c:	04ed      	lsls	r5, r5, #19
1001325e:	432e      	orrs	r6, r5
10013260:	3f7f      	subs	r7, #127	; 0x7f
10013262:	4643      	mov	r3, r8
10013264:	4642      	mov	r2, r8
10013266:	025d      	lsls	r5, r3, #9
10013268:	0fd2      	lsrs	r2, r2, #31
1001326a:	005b      	lsls	r3, r3, #1
1001326c:	0a6d      	lsrs	r5, r5, #9
1001326e:	0e1b      	lsrs	r3, r3, #24
10013270:	4690      	mov	r8, r2
10013272:	d040      	beq.n	100132f6 <__aeabi_fmul+0xc2>
10013274:	2bff      	cmp	r3, #255	; 0xff
10013276:	d039      	beq.n	100132ec <__aeabi_fmul+0xb8>
10013278:	2280      	movs	r2, #128	; 0x80
1001327a:	2000      	movs	r0, #0
1001327c:	00ed      	lsls	r5, r5, #3
1001327e:	04d2      	lsls	r2, r2, #19
10013280:	4315      	orrs	r5, r2
10013282:	3b7f      	subs	r3, #127	; 0x7f
10013284:	18fb      	adds	r3, r7, r3
10013286:	4642      	mov	r2, r8
10013288:	4657      	mov	r7, sl
1001328a:	1c59      	adds	r1, r3, #1
1001328c:	4062      	eors	r2, r4
1001328e:	468c      	mov	ip, r1
10013290:	4307      	orrs	r7, r0
10013292:	2f0f      	cmp	r7, #15
10013294:	d85c      	bhi.n	10013350 <__aeabi_fmul+0x11c>
10013296:	496f      	ldr	r1, [pc, #444]	; (10013454 <__aeabi_fmul+0x220>)
10013298:	00bf      	lsls	r7, r7, #2
1001329a:	59c9      	ldr	r1, [r1, r7]
1001329c:	468f      	mov	pc, r1
1001329e:	2e00      	cmp	r6, #0
100132a0:	d145      	bne.n	1001332e <__aeabi_fmul+0xfa>
100132a2:	2308      	movs	r3, #8
100132a4:	469a      	mov	sl, r3
100132a6:	3b06      	subs	r3, #6
100132a8:	4699      	mov	r9, r3
100132aa:	e7da      	b.n	10013262 <__aeabi_fmul+0x2e>
100132ac:	4642      	mov	r2, r8
100132ae:	2802      	cmp	r0, #2
100132b0:	d02d      	beq.n	1001330e <__aeabi_fmul+0xda>
100132b2:	2803      	cmp	r0, #3
100132b4:	d100      	bne.n	100132b8 <__aeabi_fmul+0x84>
100132b6:	e0c3      	b.n	10013440 <__aeabi_fmul+0x20c>
100132b8:	2801      	cmp	r0, #1
100132ba:	d000      	beq.n	100132be <__aeabi_fmul+0x8a>
100132bc:	e0a2      	b.n	10013404 <__aeabi_fmul+0x1d0>
100132be:	2500      	movs	r5, #0
100132c0:	2600      	movs	r6, #0
100132c2:	4002      	ands	r2, r0
100132c4:	b2d4      	uxtb	r4, r2
100132c6:	0276      	lsls	r6, r6, #9
100132c8:	05ed      	lsls	r5, r5, #23
100132ca:	0a76      	lsrs	r6, r6, #9
100132cc:	432e      	orrs	r6, r5
100132ce:	07e4      	lsls	r4, r4, #31
100132d0:	4326      	orrs	r6, r4
100132d2:	0030      	movs	r0, r6
100132d4:	bc1c      	pop	{r2, r3, r4}
100132d6:	4690      	mov	r8, r2
100132d8:	4699      	mov	r9, r3
100132da:	46a2      	mov	sl, r4
100132dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
100132de:	2e00      	cmp	r6, #0
100132e0:	d11a      	bne.n	10013318 <__aeabi_fmul+0xe4>
100132e2:	2304      	movs	r3, #4
100132e4:	469a      	mov	sl, r3
100132e6:	3b03      	subs	r3, #3
100132e8:	4699      	mov	r9, r3
100132ea:	e7ba      	b.n	10013262 <__aeabi_fmul+0x2e>
100132ec:	002a      	movs	r2, r5
100132ee:	1e51      	subs	r1, r2, #1
100132f0:	418a      	sbcs	r2, r1
100132f2:	1c90      	adds	r0, r2, #2
100132f4:	e7c6      	b.n	10013284 <__aeabi_fmul+0x50>
100132f6:	2001      	movs	r0, #1
100132f8:	2d00      	cmp	r5, #0
100132fa:	d0c3      	beq.n	10013284 <__aeabi_fmul+0x50>
100132fc:	0028      	movs	r0, r5
100132fe:	f002 f9a9 	bl	10015654 <__clzsi2>
10013302:	1f43      	subs	r3, r0, #5
10013304:	3076      	adds	r0, #118	; 0x76
10013306:	409d      	lsls	r5, r3
10013308:	4243      	negs	r3, r0
1001330a:	2000      	movs	r0, #0
1001330c:	e7ba      	b.n	10013284 <__aeabi_fmul+0x50>
1001330e:	2401      	movs	r4, #1
10013310:	25ff      	movs	r5, #255	; 0xff
10013312:	4014      	ands	r4, r2
10013314:	2600      	movs	r6, #0
10013316:	e7d6      	b.n	100132c6 <__aeabi_fmul+0x92>
10013318:	0030      	movs	r0, r6
1001331a:	f002 f99b 	bl	10015654 <__clzsi2>
1001331e:	1f43      	subs	r3, r0, #5
10013320:	409e      	lsls	r6, r3
10013322:	2300      	movs	r3, #0
10013324:	3076      	adds	r0, #118	; 0x76
10013326:	4247      	negs	r7, r0
10013328:	469a      	mov	sl, r3
1001332a:	4699      	mov	r9, r3
1001332c:	e799      	b.n	10013262 <__aeabi_fmul+0x2e>
1001332e:	230c      	movs	r3, #12
10013330:	469a      	mov	sl, r3
10013332:	3b09      	subs	r3, #9
10013334:	4699      	mov	r9, r3
10013336:	e794      	b.n	10013262 <__aeabi_fmul+0x2e>
10013338:	2680      	movs	r6, #128	; 0x80
1001333a:	2400      	movs	r4, #0
1001333c:	03f6      	lsls	r6, r6, #15
1001333e:	25ff      	movs	r5, #255	; 0xff
10013340:	e7c1      	b.n	100132c6 <__aeabi_fmul+0x92>
10013342:	0035      	movs	r5, r6
10013344:	4648      	mov	r0, r9
10013346:	e7b2      	b.n	100132ae <__aeabi_fmul+0x7a>
10013348:	0035      	movs	r5, r6
1001334a:	0022      	movs	r2, r4
1001334c:	4648      	mov	r0, r9
1001334e:	e7ae      	b.n	100132ae <__aeabi_fmul+0x7a>
10013350:	0429      	lsls	r1, r5, #16
10013352:	0c09      	lsrs	r1, r1, #16
10013354:	0008      	movs	r0, r1
10013356:	0c37      	lsrs	r7, r6, #16
10013358:	0436      	lsls	r6, r6, #16
1001335a:	0c36      	lsrs	r6, r6, #16
1001335c:	0c2c      	lsrs	r4, r5, #16
1001335e:	4379      	muls	r1, r7
10013360:	4370      	muls	r0, r6
10013362:	4367      	muls	r7, r4
10013364:	4374      	muls	r4, r6
10013366:	0c06      	lsrs	r6, r0, #16
10013368:	1864      	adds	r4, r4, r1
1001336a:	1936      	adds	r6, r6, r4
1001336c:	42b1      	cmp	r1, r6
1001336e:	d903      	bls.n	10013378 <__aeabi_fmul+0x144>
10013370:	2180      	movs	r1, #128	; 0x80
10013372:	0249      	lsls	r1, r1, #9
10013374:	4688      	mov	r8, r1
10013376:	4447      	add	r7, r8
10013378:	0400      	lsls	r0, r0, #16
1001337a:	0c00      	lsrs	r0, r0, #16
1001337c:	0431      	lsls	r1, r6, #16
1001337e:	1809      	adds	r1, r1, r0
10013380:	018d      	lsls	r5, r1, #6
10013382:	1e68      	subs	r0, r5, #1
10013384:	4185      	sbcs	r5, r0
10013386:	0e89      	lsrs	r1, r1, #26
10013388:	4329      	orrs	r1, r5
1001338a:	0c35      	lsrs	r5, r6, #16
1001338c:	19ed      	adds	r5, r5, r7
1001338e:	01ad      	lsls	r5, r5, #6
10013390:	430d      	orrs	r5, r1
10013392:	0129      	lsls	r1, r5, #4
10013394:	d504      	bpl.n	100133a0 <__aeabi_fmul+0x16c>
10013396:	2301      	movs	r3, #1
10013398:	0869      	lsrs	r1, r5, #1
1001339a:	401d      	ands	r5, r3
1001339c:	4663      	mov	r3, ip
1001339e:	430d      	orrs	r5, r1
100133a0:	0019      	movs	r1, r3
100133a2:	317f      	adds	r1, #127	; 0x7f
100133a4:	2900      	cmp	r1, #0
100133a6:	dd25      	ble.n	100133f4 <__aeabi_fmul+0x1c0>
100133a8:	0768      	lsls	r0, r5, #29
100133aa:	d004      	beq.n	100133b6 <__aeabi_fmul+0x182>
100133ac:	200f      	movs	r0, #15
100133ae:	4028      	ands	r0, r5
100133b0:	2804      	cmp	r0, #4
100133b2:	d000      	beq.n	100133b6 <__aeabi_fmul+0x182>
100133b4:	3504      	adds	r5, #4
100133b6:	0128      	lsls	r0, r5, #4
100133b8:	d503      	bpl.n	100133c2 <__aeabi_fmul+0x18e>
100133ba:	4927      	ldr	r1, [pc, #156]	; (10013458 <__aeabi_fmul+0x224>)
100133bc:	3380      	adds	r3, #128	; 0x80
100133be:	400d      	ands	r5, r1
100133c0:	0019      	movs	r1, r3
100133c2:	29fe      	cmp	r1, #254	; 0xfe
100133c4:	dca3      	bgt.n	1001330e <__aeabi_fmul+0xda>
100133c6:	2401      	movs	r4, #1
100133c8:	01ad      	lsls	r5, r5, #6
100133ca:	0a6e      	lsrs	r6, r5, #9
100133cc:	4014      	ands	r4, r2
100133ce:	b2cd      	uxtb	r5, r1
100133d0:	e779      	b.n	100132c6 <__aeabi_fmul+0x92>
100133d2:	2080      	movs	r0, #128	; 0x80
100133d4:	03c0      	lsls	r0, r0, #15
100133d6:	4206      	tst	r6, r0
100133d8:	d007      	beq.n	100133ea <__aeabi_fmul+0x1b6>
100133da:	4205      	tst	r5, r0
100133dc:	d105      	bne.n	100133ea <__aeabi_fmul+0x1b6>
100133de:	4328      	orrs	r0, r5
100133e0:	0246      	lsls	r6, r0, #9
100133e2:	0a76      	lsrs	r6, r6, #9
100133e4:	4644      	mov	r4, r8
100133e6:	25ff      	movs	r5, #255	; 0xff
100133e8:	e76d      	b.n	100132c6 <__aeabi_fmul+0x92>
100133ea:	4306      	orrs	r6, r0
100133ec:	0276      	lsls	r6, r6, #9
100133ee:	0a76      	lsrs	r6, r6, #9
100133f0:	25ff      	movs	r5, #255	; 0xff
100133f2:	e768      	b.n	100132c6 <__aeabi_fmul+0x92>
100133f4:	2401      	movs	r4, #1
100133f6:	1a61      	subs	r1, r4, r1
100133f8:	291b      	cmp	r1, #27
100133fa:	dd05      	ble.n	10013408 <__aeabi_fmul+0x1d4>
100133fc:	4014      	ands	r4, r2
100133fe:	2500      	movs	r5, #0
10013400:	2600      	movs	r6, #0
10013402:	e760      	b.n	100132c6 <__aeabi_fmul+0x92>
10013404:	4663      	mov	r3, ip
10013406:	e7cb      	b.n	100133a0 <__aeabi_fmul+0x16c>
10013408:	002e      	movs	r6, r5
1001340a:	2320      	movs	r3, #32
1001340c:	40ce      	lsrs	r6, r1
1001340e:	1a59      	subs	r1, r3, r1
10013410:	408d      	lsls	r5, r1
10013412:	1e6b      	subs	r3, r5, #1
10013414:	419d      	sbcs	r5, r3
10013416:	432e      	orrs	r6, r5
10013418:	0773      	lsls	r3, r6, #29
1001341a:	d004      	beq.n	10013426 <__aeabi_fmul+0x1f2>
1001341c:	230f      	movs	r3, #15
1001341e:	4033      	ands	r3, r6
10013420:	2b04      	cmp	r3, #4
10013422:	d000      	beq.n	10013426 <__aeabi_fmul+0x1f2>
10013424:	3604      	adds	r6, #4
10013426:	0173      	lsls	r3, r6, #5
10013428:	d504      	bpl.n	10013434 <__aeabi_fmul+0x200>
1001342a:	2401      	movs	r4, #1
1001342c:	2501      	movs	r5, #1
1001342e:	4014      	ands	r4, r2
10013430:	2600      	movs	r6, #0
10013432:	e748      	b.n	100132c6 <__aeabi_fmul+0x92>
10013434:	2401      	movs	r4, #1
10013436:	01b6      	lsls	r6, r6, #6
10013438:	0a76      	lsrs	r6, r6, #9
1001343a:	4014      	ands	r4, r2
1001343c:	2500      	movs	r5, #0
1001343e:	e742      	b.n	100132c6 <__aeabi_fmul+0x92>
10013440:	2680      	movs	r6, #128	; 0x80
10013442:	2401      	movs	r4, #1
10013444:	03f6      	lsls	r6, r6, #15
10013446:	432e      	orrs	r6, r5
10013448:	0276      	lsls	r6, r6, #9
1001344a:	0a76      	lsrs	r6, r6, #9
1001344c:	4014      	ands	r4, r2
1001344e:	25ff      	movs	r5, #255	; 0xff
10013450:	e739      	b.n	100132c6 <__aeabi_fmul+0x92>
10013452:	46c0      	nop			; (mov r8, r8)
10013454:	10018280 	.word	0x10018280
10013458:	f7ffffff 	.word	0xf7ffffff

1001345c <__aeabi_fsub>:
1001345c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001345e:	024a      	lsls	r2, r1, #9
10013460:	004e      	lsls	r6, r1, #1
10013462:	0243      	lsls	r3, r0, #9
10013464:	0044      	lsls	r4, r0, #1
10013466:	0e24      	lsrs	r4, r4, #24
10013468:	0fc5      	lsrs	r5, r0, #31
1001346a:	099b      	lsrs	r3, r3, #6
1001346c:	0e36      	lsrs	r6, r6, #24
1001346e:	0fc9      	lsrs	r1, r1, #31
10013470:	0992      	lsrs	r2, r2, #6
10013472:	2eff      	cmp	r6, #255	; 0xff
10013474:	d100      	bne.n	10013478 <__aeabi_fsub+0x1c>
10013476:	e083      	b.n	10013580 <__aeabi_fsub+0x124>
10013478:	2001      	movs	r0, #1
1001347a:	4041      	eors	r1, r0
1001347c:	1ba0      	subs	r0, r4, r6
1001347e:	42a9      	cmp	r1, r5
10013480:	d05c      	beq.n	1001353c <__aeabi_fsub+0xe0>
10013482:	2800      	cmp	r0, #0
10013484:	dc00      	bgt.n	10013488 <__aeabi_fsub+0x2c>
10013486:	e095      	b.n	100135b4 <__aeabi_fsub+0x158>
10013488:	2e00      	cmp	r6, #0
1001348a:	d11c      	bne.n	100134c6 <__aeabi_fsub+0x6a>
1001348c:	2a00      	cmp	r2, #0
1001348e:	d000      	beq.n	10013492 <__aeabi_fsub+0x36>
10013490:	e081      	b.n	10013596 <__aeabi_fsub+0x13a>
10013492:	075a      	lsls	r2, r3, #29
10013494:	d004      	beq.n	100134a0 <__aeabi_fsub+0x44>
10013496:	220f      	movs	r2, #15
10013498:	401a      	ands	r2, r3
1001349a:	2a04      	cmp	r2, #4
1001349c:	d000      	beq.n	100134a0 <__aeabi_fsub+0x44>
1001349e:	3304      	adds	r3, #4
100134a0:	015a      	lsls	r2, r3, #5
100134a2:	d53b      	bpl.n	1001351c <__aeabi_fsub+0xc0>
100134a4:	3401      	adds	r4, #1
100134a6:	2cff      	cmp	r4, #255	; 0xff
100134a8:	d100      	bne.n	100134ac <__aeabi_fsub+0x50>
100134aa:	e091      	b.n	100135d0 <__aeabi_fsub+0x174>
100134ac:	2001      	movs	r0, #1
100134ae:	019b      	lsls	r3, r3, #6
100134b0:	0a5b      	lsrs	r3, r3, #9
100134b2:	b2e4      	uxtb	r4, r4
100134b4:	4005      	ands	r5, r0
100134b6:	025b      	lsls	r3, r3, #9
100134b8:	05e4      	lsls	r4, r4, #23
100134ba:	0a5b      	lsrs	r3, r3, #9
100134bc:	07ed      	lsls	r5, r5, #31
100134be:	4323      	orrs	r3, r4
100134c0:	432b      	orrs	r3, r5
100134c2:	0018      	movs	r0, r3
100134c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
100134c6:	2cff      	cmp	r4, #255	; 0xff
100134c8:	d0e3      	beq.n	10013492 <__aeabi_fsub+0x36>
100134ca:	2180      	movs	r1, #128	; 0x80
100134cc:	04c9      	lsls	r1, r1, #19
100134ce:	430a      	orrs	r2, r1
100134d0:	281b      	cmp	r0, #27
100134d2:	dd00      	ble.n	100134d6 <__aeabi_fsub+0x7a>
100134d4:	e090      	b.n	100135f8 <__aeabi_fsub+0x19c>
100134d6:	0016      	movs	r6, r2
100134d8:	2120      	movs	r1, #32
100134da:	40c6      	lsrs	r6, r0
100134dc:	1a08      	subs	r0, r1, r0
100134de:	4082      	lsls	r2, r0
100134e0:	1e51      	subs	r1, r2, #1
100134e2:	418a      	sbcs	r2, r1
100134e4:	4332      	orrs	r2, r6
100134e6:	1a9b      	subs	r3, r3, r2
100134e8:	015a      	lsls	r2, r3, #5
100134ea:	d515      	bpl.n	10013518 <__aeabi_fsub+0xbc>
100134ec:	019b      	lsls	r3, r3, #6
100134ee:	099e      	lsrs	r6, r3, #6
100134f0:	0030      	movs	r0, r6
100134f2:	f002 f8af 	bl	10015654 <__clzsi2>
100134f6:	3805      	subs	r0, #5
100134f8:	4086      	lsls	r6, r0
100134fa:	4284      	cmp	r4, r0
100134fc:	dc6c      	bgt.n	100135d8 <__aeabi_fsub+0x17c>
100134fe:	1b04      	subs	r4, r0, r4
10013500:	0033      	movs	r3, r6
10013502:	2020      	movs	r0, #32
10013504:	3401      	adds	r4, #1
10013506:	40e3      	lsrs	r3, r4
10013508:	1b04      	subs	r4, r0, r4
1001350a:	40a6      	lsls	r6, r4
1001350c:	1e72      	subs	r2, r6, #1
1001350e:	4196      	sbcs	r6, r2
10013510:	2400      	movs	r4, #0
10013512:	4333      	orrs	r3, r6
10013514:	e7bd      	b.n	10013492 <__aeabi_fsub+0x36>
10013516:	000d      	movs	r5, r1
10013518:	075a      	lsls	r2, r3, #29
1001351a:	d1bc      	bne.n	10013496 <__aeabi_fsub+0x3a>
1001351c:	08df      	lsrs	r7, r3, #3
1001351e:	2301      	movs	r3, #1
10013520:	401d      	ands	r5, r3
10013522:	2cff      	cmp	r4, #255	; 0xff
10013524:	d133      	bne.n	1001358e <__aeabi_fsub+0x132>
10013526:	2f00      	cmp	r7, #0
10013528:	d100      	bne.n	1001352c <__aeabi_fsub+0xd0>
1001352a:	e090      	b.n	1001364e <__aeabi_fsub+0x1f2>
1001352c:	2280      	movs	r2, #128	; 0x80
1001352e:	03d2      	lsls	r2, r2, #15
10013530:	0013      	movs	r3, r2
10013532:	433b      	orrs	r3, r7
10013534:	025b      	lsls	r3, r3, #9
10013536:	0a5b      	lsrs	r3, r3, #9
10013538:	24ff      	movs	r4, #255	; 0xff
1001353a:	e7bc      	b.n	100134b6 <__aeabi_fsub+0x5a>
1001353c:	2800      	cmp	r0, #0
1001353e:	dd4f      	ble.n	100135e0 <__aeabi_fsub+0x184>
10013540:	2e00      	cmp	r6, #0
10013542:	d02e      	beq.n	100135a2 <__aeabi_fsub+0x146>
10013544:	2cff      	cmp	r4, #255	; 0xff
10013546:	d0a4      	beq.n	10013492 <__aeabi_fsub+0x36>
10013548:	2580      	movs	r5, #128	; 0x80
1001354a:	04ed      	lsls	r5, r5, #19
1001354c:	432a      	orrs	r2, r5
1001354e:	281b      	cmp	r0, #27
10013550:	dd00      	ble.n	10013554 <__aeabi_fsub+0xf8>
10013552:	e097      	b.n	10013684 <__aeabi_fsub+0x228>
10013554:	0016      	movs	r6, r2
10013556:	2520      	movs	r5, #32
10013558:	40c6      	lsrs	r6, r0
1001355a:	1a28      	subs	r0, r5, r0
1001355c:	4082      	lsls	r2, r0
1001355e:	1e50      	subs	r0, r2, #1
10013560:	4182      	sbcs	r2, r0
10013562:	4332      	orrs	r2, r6
10013564:	189b      	adds	r3, r3, r2
10013566:	015a      	lsls	r2, r3, #5
10013568:	d5d5      	bpl.n	10013516 <__aeabi_fsub+0xba>
1001356a:	3401      	adds	r4, #1
1001356c:	2cff      	cmp	r4, #255	; 0xff
1001356e:	d06d      	beq.n	1001364c <__aeabi_fsub+0x1f0>
10013570:	2201      	movs	r2, #1
10013572:	487b      	ldr	r0, [pc, #492]	; (10013760 <__aeabi_fsub+0x304>)
10013574:	401a      	ands	r2, r3
10013576:	085b      	lsrs	r3, r3, #1
10013578:	4003      	ands	r3, r0
1001357a:	4313      	orrs	r3, r2
1001357c:	000d      	movs	r5, r1
1001357e:	e788      	b.n	10013492 <__aeabi_fsub+0x36>
10013580:	2a00      	cmp	r2, #0
10013582:	d000      	beq.n	10013586 <__aeabi_fsub+0x12a>
10013584:	e77a      	b.n	1001347c <__aeabi_fsub+0x20>
10013586:	e777      	b.n	10013478 <__aeabi_fsub+0x1c>
10013588:	1e03      	subs	r3, r0, #0
1001358a:	d1c5      	bne.n	10013518 <__aeabi_fsub+0xbc>
1001358c:	2500      	movs	r5, #0
1001358e:	027b      	lsls	r3, r7, #9
10013590:	0a5b      	lsrs	r3, r3, #9
10013592:	b2e4      	uxtb	r4, r4
10013594:	e78f      	b.n	100134b6 <__aeabi_fsub+0x5a>
10013596:	3801      	subs	r0, #1
10013598:	2800      	cmp	r0, #0
1001359a:	d0a4      	beq.n	100134e6 <__aeabi_fsub+0x8a>
1001359c:	2cff      	cmp	r4, #255	; 0xff
1001359e:	d197      	bne.n	100134d0 <__aeabi_fsub+0x74>
100135a0:	e777      	b.n	10013492 <__aeabi_fsub+0x36>
100135a2:	2a00      	cmp	r2, #0
100135a4:	d100      	bne.n	100135a8 <__aeabi_fsub+0x14c>
100135a6:	e774      	b.n	10013492 <__aeabi_fsub+0x36>
100135a8:	3801      	subs	r0, #1
100135aa:	2800      	cmp	r0, #0
100135ac:	d0da      	beq.n	10013564 <__aeabi_fsub+0x108>
100135ae:	2cff      	cmp	r4, #255	; 0xff
100135b0:	d1cd      	bne.n	1001354e <__aeabi_fsub+0xf2>
100135b2:	e76e      	b.n	10013492 <__aeabi_fsub+0x36>
100135b4:	2800      	cmp	r0, #0
100135b6:	d121      	bne.n	100135fc <__aeabi_fsub+0x1a0>
100135b8:	1c60      	adds	r0, r4, #1
100135ba:	b2c0      	uxtb	r0, r0
100135bc:	2801      	cmp	r0, #1
100135be:	dd58      	ble.n	10013672 <__aeabi_fsub+0x216>
100135c0:	2780      	movs	r7, #128	; 0x80
100135c2:	1a9e      	subs	r6, r3, r2
100135c4:	04ff      	lsls	r7, r7, #19
100135c6:	4037      	ands	r7, r6
100135c8:	d02f      	beq.n	1001362a <__aeabi_fsub+0x1ce>
100135ca:	1ad6      	subs	r6, r2, r3
100135cc:	000d      	movs	r5, r1
100135ce:	e78f      	b.n	100134f0 <__aeabi_fsub+0x94>
100135d0:	2301      	movs	r3, #1
100135d2:	401d      	ands	r5, r3
100135d4:	2300      	movs	r3, #0
100135d6:	e76e      	b.n	100134b6 <__aeabi_fsub+0x5a>
100135d8:	4b62      	ldr	r3, [pc, #392]	; (10013764 <__aeabi_fsub+0x308>)
100135da:	1a24      	subs	r4, r4, r0
100135dc:	4033      	ands	r3, r6
100135de:	e758      	b.n	10013492 <__aeabi_fsub+0x36>
100135e0:	2800      	cmp	r0, #0
100135e2:	d151      	bne.n	10013688 <__aeabi_fsub+0x22c>
100135e4:	1c60      	adds	r0, r4, #1
100135e6:	b2c6      	uxtb	r6, r0
100135e8:	2e01      	cmp	r6, #1
100135ea:	dd33      	ble.n	10013654 <__aeabi_fsub+0x1f8>
100135ec:	28ff      	cmp	r0, #255	; 0xff
100135ee:	d02d      	beq.n	1001364c <__aeabi_fsub+0x1f0>
100135f0:	189b      	adds	r3, r3, r2
100135f2:	085b      	lsrs	r3, r3, #1
100135f4:	0004      	movs	r4, r0
100135f6:	e74c      	b.n	10013492 <__aeabi_fsub+0x36>
100135f8:	2201      	movs	r2, #1
100135fa:	e774      	b.n	100134e6 <__aeabi_fsub+0x8a>
100135fc:	2c00      	cmp	r4, #0
100135fe:	d01a      	beq.n	10013636 <__aeabi_fsub+0x1da>
10013600:	2eff      	cmp	r6, #255	; 0xff
10013602:	d01f      	beq.n	10013644 <__aeabi_fsub+0x1e8>
10013604:	2480      	movs	r4, #128	; 0x80
10013606:	04e4      	lsls	r4, r4, #19
10013608:	4240      	negs	r0, r0
1001360a:	4323      	orrs	r3, r4
1001360c:	281b      	cmp	r0, #27
1001360e:	dd00      	ble.n	10013612 <__aeabi_fsub+0x1b6>
10013610:	e096      	b.n	10013740 <__aeabi_fsub+0x2e4>
10013612:	001d      	movs	r5, r3
10013614:	2420      	movs	r4, #32
10013616:	40c5      	lsrs	r5, r0
10013618:	1a20      	subs	r0, r4, r0
1001361a:	4083      	lsls	r3, r0
1001361c:	1e58      	subs	r0, r3, #1
1001361e:	4183      	sbcs	r3, r0
10013620:	432b      	orrs	r3, r5
10013622:	1ad3      	subs	r3, r2, r3
10013624:	0034      	movs	r4, r6
10013626:	000d      	movs	r5, r1
10013628:	e75e      	b.n	100134e8 <__aeabi_fsub+0x8c>
1001362a:	2e00      	cmp	r6, #0
1001362c:	d000      	beq.n	10013630 <__aeabi_fsub+0x1d4>
1001362e:	e75f      	b.n	100134f0 <__aeabi_fsub+0x94>
10013630:	2500      	movs	r5, #0
10013632:	2400      	movs	r4, #0
10013634:	e7ab      	b.n	1001358e <__aeabi_fsub+0x132>
10013636:	2b00      	cmp	r3, #0
10013638:	d044      	beq.n	100136c4 <__aeabi_fsub+0x268>
1001363a:	43c0      	mvns	r0, r0
1001363c:	2800      	cmp	r0, #0
1001363e:	d0f0      	beq.n	10013622 <__aeabi_fsub+0x1c6>
10013640:	2eff      	cmp	r6, #255	; 0xff
10013642:	d1e3      	bne.n	1001360c <__aeabi_fsub+0x1b0>
10013644:	0013      	movs	r3, r2
10013646:	24ff      	movs	r4, #255	; 0xff
10013648:	000d      	movs	r5, r1
1001364a:	e722      	b.n	10013492 <__aeabi_fsub+0x36>
1001364c:	000d      	movs	r5, r1
1001364e:	24ff      	movs	r4, #255	; 0xff
10013650:	2300      	movs	r3, #0
10013652:	e730      	b.n	100134b6 <__aeabi_fsub+0x5a>
10013654:	2c00      	cmp	r4, #0
10013656:	d15d      	bne.n	10013714 <__aeabi_fsub+0x2b8>
10013658:	2b00      	cmp	r3, #0
1001365a:	d07d      	beq.n	10013758 <__aeabi_fsub+0x2fc>
1001365c:	2a00      	cmp	r2, #0
1001365e:	d100      	bne.n	10013662 <__aeabi_fsub+0x206>
10013660:	e717      	b.n	10013492 <__aeabi_fsub+0x36>
10013662:	189b      	adds	r3, r3, r2
10013664:	015a      	lsls	r2, r3, #5
10013666:	d400      	bmi.n	1001366a <__aeabi_fsub+0x20e>
10013668:	e756      	b.n	10013518 <__aeabi_fsub+0xbc>
1001366a:	4a3e      	ldr	r2, [pc, #248]	; (10013764 <__aeabi_fsub+0x308>)
1001366c:	0004      	movs	r4, r0
1001366e:	4013      	ands	r3, r2
10013670:	e70f      	b.n	10013492 <__aeabi_fsub+0x36>
10013672:	2c00      	cmp	r4, #0
10013674:	d11e      	bne.n	100136b4 <__aeabi_fsub+0x258>
10013676:	2b00      	cmp	r3, #0
10013678:	d12f      	bne.n	100136da <__aeabi_fsub+0x27e>
1001367a:	2a00      	cmp	r2, #0
1001367c:	d065      	beq.n	1001374a <__aeabi_fsub+0x2ee>
1001367e:	0013      	movs	r3, r2
10013680:	000d      	movs	r5, r1
10013682:	e706      	b.n	10013492 <__aeabi_fsub+0x36>
10013684:	2201      	movs	r2, #1
10013686:	e76d      	b.n	10013564 <__aeabi_fsub+0x108>
10013688:	2c00      	cmp	r4, #0
1001368a:	d11f      	bne.n	100136cc <__aeabi_fsub+0x270>
1001368c:	2b00      	cmp	r3, #0
1001368e:	d059      	beq.n	10013744 <__aeabi_fsub+0x2e8>
10013690:	43c0      	mvns	r0, r0
10013692:	2800      	cmp	r0, #0
10013694:	d00b      	beq.n	100136ae <__aeabi_fsub+0x252>
10013696:	2eff      	cmp	r6, #255	; 0xff
10013698:	d04f      	beq.n	1001373a <__aeabi_fsub+0x2de>
1001369a:	281b      	cmp	r0, #27
1001369c:	dc5e      	bgt.n	1001375c <__aeabi_fsub+0x300>
1001369e:	001d      	movs	r5, r3
100136a0:	2420      	movs	r4, #32
100136a2:	40c5      	lsrs	r5, r0
100136a4:	1a20      	subs	r0, r4, r0
100136a6:	4083      	lsls	r3, r0
100136a8:	1e58      	subs	r0, r3, #1
100136aa:	4183      	sbcs	r3, r0
100136ac:	432b      	orrs	r3, r5
100136ae:	189b      	adds	r3, r3, r2
100136b0:	0034      	movs	r4, r6
100136b2:	e758      	b.n	10013566 <__aeabi_fsub+0x10a>
100136b4:	2b00      	cmp	r3, #0
100136b6:	d11c      	bne.n	100136f2 <__aeabi_fsub+0x296>
100136b8:	2a00      	cmp	r2, #0
100136ba:	d049      	beq.n	10013750 <__aeabi_fsub+0x2f4>
100136bc:	0013      	movs	r3, r2
100136be:	000d      	movs	r5, r1
100136c0:	24ff      	movs	r4, #255	; 0xff
100136c2:	e6e6      	b.n	10013492 <__aeabi_fsub+0x36>
100136c4:	0013      	movs	r3, r2
100136c6:	0034      	movs	r4, r6
100136c8:	000d      	movs	r5, r1
100136ca:	e6e2      	b.n	10013492 <__aeabi_fsub+0x36>
100136cc:	2eff      	cmp	r6, #255	; 0xff
100136ce:	d034      	beq.n	1001373a <__aeabi_fsub+0x2de>
100136d0:	2480      	movs	r4, #128	; 0x80
100136d2:	04e4      	lsls	r4, r4, #19
100136d4:	4240      	negs	r0, r0
100136d6:	4323      	orrs	r3, r4
100136d8:	e7df      	b.n	1001369a <__aeabi_fsub+0x23e>
100136da:	2a00      	cmp	r2, #0
100136dc:	d100      	bne.n	100136e0 <__aeabi_fsub+0x284>
100136de:	e6d8      	b.n	10013492 <__aeabi_fsub+0x36>
100136e0:	2780      	movs	r7, #128	; 0x80
100136e2:	1a98      	subs	r0, r3, r2
100136e4:	04ff      	lsls	r7, r7, #19
100136e6:	4007      	ands	r7, r0
100136e8:	d100      	bne.n	100136ec <__aeabi_fsub+0x290>
100136ea:	e74d      	b.n	10013588 <__aeabi_fsub+0x12c>
100136ec:	1ad3      	subs	r3, r2, r3
100136ee:	000d      	movs	r5, r1
100136f0:	e6cf      	b.n	10013492 <__aeabi_fsub+0x36>
100136f2:	24ff      	movs	r4, #255	; 0xff
100136f4:	2a00      	cmp	r2, #0
100136f6:	d100      	bne.n	100136fa <__aeabi_fsub+0x29e>
100136f8:	e6cb      	b.n	10013492 <__aeabi_fsub+0x36>
100136fa:	2080      	movs	r0, #128	; 0x80
100136fc:	08db      	lsrs	r3, r3, #3
100136fe:	03c0      	lsls	r0, r0, #15
10013700:	4203      	tst	r3, r0
10013702:	d004      	beq.n	1001370e <__aeabi_fsub+0x2b2>
10013704:	08d2      	lsrs	r2, r2, #3
10013706:	4202      	tst	r2, r0
10013708:	d101      	bne.n	1001370e <__aeabi_fsub+0x2b2>
1001370a:	0013      	movs	r3, r2
1001370c:	000d      	movs	r5, r1
1001370e:	00db      	lsls	r3, r3, #3
10013710:	24ff      	movs	r4, #255	; 0xff
10013712:	e6be      	b.n	10013492 <__aeabi_fsub+0x36>
10013714:	2b00      	cmp	r3, #0
10013716:	d010      	beq.n	1001373a <__aeabi_fsub+0x2de>
10013718:	24ff      	movs	r4, #255	; 0xff
1001371a:	2a00      	cmp	r2, #0
1001371c:	d100      	bne.n	10013720 <__aeabi_fsub+0x2c4>
1001371e:	e6b8      	b.n	10013492 <__aeabi_fsub+0x36>
10013720:	2080      	movs	r0, #128	; 0x80
10013722:	08db      	lsrs	r3, r3, #3
10013724:	03c0      	lsls	r0, r0, #15
10013726:	4203      	tst	r3, r0
10013728:	d003      	beq.n	10013732 <__aeabi_fsub+0x2d6>
1001372a:	08d2      	lsrs	r2, r2, #3
1001372c:	4202      	tst	r2, r0
1001372e:	d100      	bne.n	10013732 <__aeabi_fsub+0x2d6>
10013730:	0013      	movs	r3, r2
10013732:	00db      	lsls	r3, r3, #3
10013734:	000d      	movs	r5, r1
10013736:	24ff      	movs	r4, #255	; 0xff
10013738:	e6ab      	b.n	10013492 <__aeabi_fsub+0x36>
1001373a:	0013      	movs	r3, r2
1001373c:	24ff      	movs	r4, #255	; 0xff
1001373e:	e6a8      	b.n	10013492 <__aeabi_fsub+0x36>
10013740:	2301      	movs	r3, #1
10013742:	e76e      	b.n	10013622 <__aeabi_fsub+0x1c6>
10013744:	0013      	movs	r3, r2
10013746:	0034      	movs	r4, r6
10013748:	e6a3      	b.n	10013492 <__aeabi_fsub+0x36>
1001374a:	2700      	movs	r7, #0
1001374c:	2500      	movs	r5, #0
1001374e:	e71e      	b.n	1001358e <__aeabi_fsub+0x132>
10013750:	2780      	movs	r7, #128	; 0x80
10013752:	2500      	movs	r5, #0
10013754:	03ff      	lsls	r7, r7, #15
10013756:	e6e9      	b.n	1001352c <__aeabi_fsub+0xd0>
10013758:	0013      	movs	r3, r2
1001375a:	e69a      	b.n	10013492 <__aeabi_fsub+0x36>
1001375c:	2301      	movs	r3, #1
1001375e:	e7a6      	b.n	100136ae <__aeabi_fsub+0x252>
10013760:	7dffffff 	.word	0x7dffffff
10013764:	fbffffff 	.word	0xfbffffff

10013768 <__aeabi_f2iz>:
10013768:	0243      	lsls	r3, r0, #9
1001376a:	0a59      	lsrs	r1, r3, #9
1001376c:	0043      	lsls	r3, r0, #1
1001376e:	0fc2      	lsrs	r2, r0, #31
10013770:	0e1b      	lsrs	r3, r3, #24
10013772:	2000      	movs	r0, #0
10013774:	2b7e      	cmp	r3, #126	; 0x7e
10013776:	dd0e      	ble.n	10013796 <__aeabi_f2iz+0x2e>
10013778:	2b9d      	cmp	r3, #157	; 0x9d
1001377a:	dc0d      	bgt.n	10013798 <__aeabi_f2iz+0x30>
1001377c:	2080      	movs	r0, #128	; 0x80
1001377e:	0400      	lsls	r0, r0, #16
10013780:	4301      	orrs	r1, r0
10013782:	2b95      	cmp	r3, #149	; 0x95
10013784:	dc0b      	bgt.n	1001379e <__aeabi_f2iz+0x36>
10013786:	2096      	movs	r0, #150	; 0x96
10013788:	1ac3      	subs	r3, r0, r3
1001378a:	40d9      	lsrs	r1, r3
1001378c:	000b      	movs	r3, r1
1001378e:	4258      	negs	r0, r3
10013790:	2a00      	cmp	r2, #0
10013792:	d100      	bne.n	10013796 <__aeabi_f2iz+0x2e>
10013794:	0018      	movs	r0, r3
10013796:	4770      	bx	lr
10013798:	4b03      	ldr	r3, [pc, #12]	; (100137a8 <__aeabi_f2iz+0x40>)
1001379a:	18d0      	adds	r0, r2, r3
1001379c:	e7fb      	b.n	10013796 <__aeabi_f2iz+0x2e>
1001379e:	3b96      	subs	r3, #150	; 0x96
100137a0:	4099      	lsls	r1, r3
100137a2:	000b      	movs	r3, r1
100137a4:	e7f3      	b.n	1001378e <__aeabi_f2iz+0x26>
100137a6:	46c0      	nop			; (mov r8, r8)
100137a8:	7fffffff 	.word	0x7fffffff

100137ac <__aeabi_i2f>:
100137ac:	b570      	push	{r4, r5, r6, lr}
100137ae:	2800      	cmp	r0, #0
100137b0:	d030      	beq.n	10013814 <__aeabi_i2f+0x68>
100137b2:	17c3      	asrs	r3, r0, #31
100137b4:	18c5      	adds	r5, r0, r3
100137b6:	405d      	eors	r5, r3
100137b8:	0fc4      	lsrs	r4, r0, #31
100137ba:	0028      	movs	r0, r5
100137bc:	f001 ff4a 	bl	10015654 <__clzsi2>
100137c0:	239e      	movs	r3, #158	; 0x9e
100137c2:	1a1b      	subs	r3, r3, r0
100137c4:	2b96      	cmp	r3, #150	; 0x96
100137c6:	dc0d      	bgt.n	100137e4 <__aeabi_i2f+0x38>
100137c8:	2296      	movs	r2, #150	; 0x96
100137ca:	1ad2      	subs	r2, r2, r3
100137cc:	4095      	lsls	r5, r2
100137ce:	026a      	lsls	r2, r5, #9
100137d0:	0a52      	lsrs	r2, r2, #9
100137d2:	b2d8      	uxtb	r0, r3
100137d4:	0252      	lsls	r2, r2, #9
100137d6:	05c0      	lsls	r0, r0, #23
100137d8:	0a52      	lsrs	r2, r2, #9
100137da:	07e4      	lsls	r4, r4, #31
100137dc:	4302      	orrs	r2, r0
100137de:	4322      	orrs	r2, r4
100137e0:	0010      	movs	r0, r2
100137e2:	bd70      	pop	{r4, r5, r6, pc}
100137e4:	2b99      	cmp	r3, #153	; 0x99
100137e6:	dc19      	bgt.n	1001381c <__aeabi_i2f+0x70>
100137e8:	2299      	movs	r2, #153	; 0x99
100137ea:	1ad2      	subs	r2, r2, r3
100137ec:	4095      	lsls	r5, r2
100137ee:	4a12      	ldr	r2, [pc, #72]	; (10013838 <__aeabi_i2f+0x8c>)
100137f0:	402a      	ands	r2, r5
100137f2:	0769      	lsls	r1, r5, #29
100137f4:	d004      	beq.n	10013800 <__aeabi_i2f+0x54>
100137f6:	210f      	movs	r1, #15
100137f8:	400d      	ands	r5, r1
100137fa:	2d04      	cmp	r5, #4
100137fc:	d000      	beq.n	10013800 <__aeabi_i2f+0x54>
100137fe:	3204      	adds	r2, #4
10013800:	0151      	lsls	r1, r2, #5
10013802:	d503      	bpl.n	1001380c <__aeabi_i2f+0x60>
10013804:	4b0c      	ldr	r3, [pc, #48]	; (10013838 <__aeabi_i2f+0x8c>)
10013806:	401a      	ands	r2, r3
10013808:	239f      	movs	r3, #159	; 0x9f
1001380a:	1a1b      	subs	r3, r3, r0
1001380c:	0192      	lsls	r2, r2, #6
1001380e:	0a52      	lsrs	r2, r2, #9
10013810:	b2d8      	uxtb	r0, r3
10013812:	e7df      	b.n	100137d4 <__aeabi_i2f+0x28>
10013814:	2400      	movs	r4, #0
10013816:	2000      	movs	r0, #0
10013818:	2200      	movs	r2, #0
1001381a:	e7db      	b.n	100137d4 <__aeabi_i2f+0x28>
1001381c:	2205      	movs	r2, #5
1001381e:	002e      	movs	r6, r5
10013820:	1a12      	subs	r2, r2, r0
10013822:	21b9      	movs	r1, #185	; 0xb9
10013824:	40d6      	lsrs	r6, r2
10013826:	002a      	movs	r2, r5
10013828:	1ac9      	subs	r1, r1, r3
1001382a:	408a      	lsls	r2, r1
1001382c:	1e55      	subs	r5, r2, #1
1001382e:	41aa      	sbcs	r2, r5
10013830:	0035      	movs	r5, r6
10013832:	4315      	orrs	r5, r2
10013834:	e7db      	b.n	100137ee <__aeabi_i2f+0x42>
10013836:	46c0      	nop			; (mov r8, r8)
10013838:	fbffffff 	.word	0xfbffffff

1001383c <__aeabi_ui2f>:
1001383c:	b570      	push	{r4, r5, r6, lr}
1001383e:	1e04      	subs	r4, r0, #0
10013840:	d028      	beq.n	10013894 <__aeabi_ui2f+0x58>
10013842:	f001 ff07 	bl	10015654 <__clzsi2>
10013846:	239e      	movs	r3, #158	; 0x9e
10013848:	1a1b      	subs	r3, r3, r0
1001384a:	2b96      	cmp	r3, #150	; 0x96
1001384c:	dc0a      	bgt.n	10013864 <__aeabi_ui2f+0x28>
1001384e:	2296      	movs	r2, #150	; 0x96
10013850:	1ad2      	subs	r2, r2, r3
10013852:	4094      	lsls	r4, r2
10013854:	0262      	lsls	r2, r4, #9
10013856:	0a52      	lsrs	r2, r2, #9
10013858:	b2d8      	uxtb	r0, r3
1001385a:	0252      	lsls	r2, r2, #9
1001385c:	0a52      	lsrs	r2, r2, #9
1001385e:	05c0      	lsls	r0, r0, #23
10013860:	4310      	orrs	r0, r2
10013862:	bd70      	pop	{r4, r5, r6, pc}
10013864:	2b99      	cmp	r3, #153	; 0x99
10013866:	dc18      	bgt.n	1001389a <__aeabi_ui2f+0x5e>
10013868:	2299      	movs	r2, #153	; 0x99
1001386a:	1ad2      	subs	r2, r2, r3
1001386c:	4094      	lsls	r4, r2
1001386e:	4a11      	ldr	r2, [pc, #68]	; (100138b4 <__aeabi_ui2f+0x78>)
10013870:	4022      	ands	r2, r4
10013872:	0761      	lsls	r1, r4, #29
10013874:	d004      	beq.n	10013880 <__aeabi_ui2f+0x44>
10013876:	210f      	movs	r1, #15
10013878:	400c      	ands	r4, r1
1001387a:	2c04      	cmp	r4, #4
1001387c:	d000      	beq.n	10013880 <__aeabi_ui2f+0x44>
1001387e:	3204      	adds	r2, #4
10013880:	0151      	lsls	r1, r2, #5
10013882:	d503      	bpl.n	1001388c <__aeabi_ui2f+0x50>
10013884:	4b0b      	ldr	r3, [pc, #44]	; (100138b4 <__aeabi_ui2f+0x78>)
10013886:	401a      	ands	r2, r3
10013888:	239f      	movs	r3, #159	; 0x9f
1001388a:	1a1b      	subs	r3, r3, r0
1001388c:	0192      	lsls	r2, r2, #6
1001388e:	0a52      	lsrs	r2, r2, #9
10013890:	b2d8      	uxtb	r0, r3
10013892:	e7e2      	b.n	1001385a <__aeabi_ui2f+0x1e>
10013894:	2000      	movs	r0, #0
10013896:	2200      	movs	r2, #0
10013898:	e7df      	b.n	1001385a <__aeabi_ui2f+0x1e>
1001389a:	2205      	movs	r2, #5
1001389c:	0025      	movs	r5, r4
1001389e:	1a12      	subs	r2, r2, r0
100138a0:	21b9      	movs	r1, #185	; 0xb9
100138a2:	40d5      	lsrs	r5, r2
100138a4:	0022      	movs	r2, r4
100138a6:	1ac9      	subs	r1, r1, r3
100138a8:	408a      	lsls	r2, r1
100138aa:	1e54      	subs	r4, r2, #1
100138ac:	41a2      	sbcs	r2, r4
100138ae:	002c      	movs	r4, r5
100138b0:	4314      	orrs	r4, r2
100138b2:	e7dc      	b.n	1001386e <__aeabi_ui2f+0x32>
100138b4:	fbffffff 	.word	0xfbffffff

100138b8 <__aeabi_dadd>:
100138b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100138ba:	4656      	mov	r6, sl
100138bc:	465f      	mov	r7, fp
100138be:	464d      	mov	r5, r9
100138c0:	4644      	mov	r4, r8
100138c2:	b4f0      	push	{r4, r5, r6, r7}
100138c4:	000f      	movs	r7, r1
100138c6:	0ffd      	lsrs	r5, r7, #31
100138c8:	46aa      	mov	sl, r5
100138ca:	0309      	lsls	r1, r1, #12
100138cc:	007c      	lsls	r4, r7, #1
100138ce:	002e      	movs	r6, r5
100138d0:	005f      	lsls	r7, r3, #1
100138d2:	0f45      	lsrs	r5, r0, #29
100138d4:	0a49      	lsrs	r1, r1, #9
100138d6:	0d7f      	lsrs	r7, r7, #21
100138d8:	4329      	orrs	r1, r5
100138da:	00c5      	lsls	r5, r0, #3
100138dc:	0318      	lsls	r0, r3, #12
100138de:	46bc      	mov	ip, r7
100138e0:	0a40      	lsrs	r0, r0, #9
100138e2:	0f57      	lsrs	r7, r2, #29
100138e4:	0d64      	lsrs	r4, r4, #21
100138e6:	0fdb      	lsrs	r3, r3, #31
100138e8:	4338      	orrs	r0, r7
100138ea:	00d2      	lsls	r2, r2, #3
100138ec:	459a      	cmp	sl, r3
100138ee:	d100      	bne.n	100138f2 <__aeabi_dadd+0x3a>
100138f0:	e0aa      	b.n	10013a48 <__aeabi_dadd+0x190>
100138f2:	4666      	mov	r6, ip
100138f4:	1ba6      	subs	r6, r4, r6
100138f6:	2e00      	cmp	r6, #0
100138f8:	dc00      	bgt.n	100138fc <__aeabi_dadd+0x44>
100138fa:	e0ff      	b.n	10013afc <__aeabi_dadd+0x244>
100138fc:	4663      	mov	r3, ip
100138fe:	2b00      	cmp	r3, #0
10013900:	d139      	bne.n	10013976 <__aeabi_dadd+0xbe>
10013902:	0003      	movs	r3, r0
10013904:	4313      	orrs	r3, r2
10013906:	d000      	beq.n	1001390a <__aeabi_dadd+0x52>
10013908:	e0d9      	b.n	10013abe <__aeabi_dadd+0x206>
1001390a:	076b      	lsls	r3, r5, #29
1001390c:	d009      	beq.n	10013922 <__aeabi_dadd+0x6a>
1001390e:	230f      	movs	r3, #15
10013910:	402b      	ands	r3, r5
10013912:	2b04      	cmp	r3, #4
10013914:	d005      	beq.n	10013922 <__aeabi_dadd+0x6a>
10013916:	1d2b      	adds	r3, r5, #4
10013918:	42ab      	cmp	r3, r5
1001391a:	41ad      	sbcs	r5, r5
1001391c:	426d      	negs	r5, r5
1001391e:	1949      	adds	r1, r1, r5
10013920:	001d      	movs	r5, r3
10013922:	020b      	lsls	r3, r1, #8
10013924:	d400      	bmi.n	10013928 <__aeabi_dadd+0x70>
10013926:	e082      	b.n	10013a2e <__aeabi_dadd+0x176>
10013928:	4bca      	ldr	r3, [pc, #808]	; (10013c54 <__aeabi_dadd+0x39c>)
1001392a:	3401      	adds	r4, #1
1001392c:	429c      	cmp	r4, r3
1001392e:	d100      	bne.n	10013932 <__aeabi_dadd+0x7a>
10013930:	e0fe      	b.n	10013b30 <__aeabi_dadd+0x278>
10013932:	000a      	movs	r2, r1
10013934:	4656      	mov	r6, sl
10013936:	4bc8      	ldr	r3, [pc, #800]	; (10013c58 <__aeabi_dadd+0x3a0>)
10013938:	08ed      	lsrs	r5, r5, #3
1001393a:	401a      	ands	r2, r3
1001393c:	0750      	lsls	r0, r2, #29
1001393e:	0564      	lsls	r4, r4, #21
10013940:	0252      	lsls	r2, r2, #9
10013942:	4305      	orrs	r5, r0
10013944:	0b12      	lsrs	r2, r2, #12
10013946:	0d64      	lsrs	r4, r4, #21
10013948:	2100      	movs	r1, #0
1001394a:	0312      	lsls	r2, r2, #12
1001394c:	0d0b      	lsrs	r3, r1, #20
1001394e:	051b      	lsls	r3, r3, #20
10013950:	0564      	lsls	r4, r4, #21
10013952:	0b12      	lsrs	r2, r2, #12
10013954:	431a      	orrs	r2, r3
10013956:	0863      	lsrs	r3, r4, #1
10013958:	4cc0      	ldr	r4, [pc, #768]	; (10013c5c <__aeabi_dadd+0x3a4>)
1001395a:	07f6      	lsls	r6, r6, #31
1001395c:	4014      	ands	r4, r2
1001395e:	431c      	orrs	r4, r3
10013960:	0064      	lsls	r4, r4, #1
10013962:	0864      	lsrs	r4, r4, #1
10013964:	4334      	orrs	r4, r6
10013966:	0028      	movs	r0, r5
10013968:	0021      	movs	r1, r4
1001396a:	bc3c      	pop	{r2, r3, r4, r5}
1001396c:	4690      	mov	r8, r2
1001396e:	4699      	mov	r9, r3
10013970:	46a2      	mov	sl, r4
10013972:	46ab      	mov	fp, r5
10013974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013976:	4bb7      	ldr	r3, [pc, #732]	; (10013c54 <__aeabi_dadd+0x39c>)
10013978:	429c      	cmp	r4, r3
1001397a:	d0c6      	beq.n	1001390a <__aeabi_dadd+0x52>
1001397c:	2380      	movs	r3, #128	; 0x80
1001397e:	041b      	lsls	r3, r3, #16
10013980:	4318      	orrs	r0, r3
10013982:	2e38      	cmp	r6, #56	; 0x38
10013984:	dd00      	ble.n	10013988 <__aeabi_dadd+0xd0>
10013986:	e0eb      	b.n	10013b60 <__aeabi_dadd+0x2a8>
10013988:	2e1f      	cmp	r6, #31
1001398a:	dd00      	ble.n	1001398e <__aeabi_dadd+0xd6>
1001398c:	e11e      	b.n	10013bcc <__aeabi_dadd+0x314>
1001398e:	2320      	movs	r3, #32
10013990:	1b9b      	subs	r3, r3, r6
10013992:	469c      	mov	ip, r3
10013994:	0003      	movs	r3, r0
10013996:	4667      	mov	r7, ip
10013998:	40bb      	lsls	r3, r7
1001399a:	4698      	mov	r8, r3
1001399c:	0013      	movs	r3, r2
1001399e:	4647      	mov	r7, r8
100139a0:	40f3      	lsrs	r3, r6
100139a2:	433b      	orrs	r3, r7
100139a4:	4667      	mov	r7, ip
100139a6:	40ba      	lsls	r2, r7
100139a8:	1e57      	subs	r7, r2, #1
100139aa:	41ba      	sbcs	r2, r7
100139ac:	4313      	orrs	r3, r2
100139ae:	0002      	movs	r2, r0
100139b0:	40f2      	lsrs	r2, r6
100139b2:	1aeb      	subs	r3, r5, r3
100139b4:	429d      	cmp	r5, r3
100139b6:	41b6      	sbcs	r6, r6
100139b8:	001d      	movs	r5, r3
100139ba:	1a8a      	subs	r2, r1, r2
100139bc:	4276      	negs	r6, r6
100139be:	1b91      	subs	r1, r2, r6
100139c0:	020b      	lsls	r3, r1, #8
100139c2:	d531      	bpl.n	10013a28 <__aeabi_dadd+0x170>
100139c4:	024a      	lsls	r2, r1, #9
100139c6:	0a56      	lsrs	r6, r2, #9
100139c8:	2e00      	cmp	r6, #0
100139ca:	d100      	bne.n	100139ce <__aeabi_dadd+0x116>
100139cc:	e0b4      	b.n	10013b38 <__aeabi_dadd+0x280>
100139ce:	0030      	movs	r0, r6
100139d0:	f001 fe40 	bl	10015654 <__clzsi2>
100139d4:	0003      	movs	r3, r0
100139d6:	3b08      	subs	r3, #8
100139d8:	2b1f      	cmp	r3, #31
100139da:	dd00      	ble.n	100139de <__aeabi_dadd+0x126>
100139dc:	e0b5      	b.n	10013b4a <__aeabi_dadd+0x292>
100139de:	2220      	movs	r2, #32
100139e0:	0029      	movs	r1, r5
100139e2:	1ad2      	subs	r2, r2, r3
100139e4:	40d1      	lsrs	r1, r2
100139e6:	409e      	lsls	r6, r3
100139e8:	000a      	movs	r2, r1
100139ea:	409d      	lsls	r5, r3
100139ec:	4332      	orrs	r2, r6
100139ee:	429c      	cmp	r4, r3
100139f0:	dd00      	ble.n	100139f4 <__aeabi_dadd+0x13c>
100139f2:	e0b1      	b.n	10013b58 <__aeabi_dadd+0x2a0>
100139f4:	1b1c      	subs	r4, r3, r4
100139f6:	1c63      	adds	r3, r4, #1
100139f8:	2b1f      	cmp	r3, #31
100139fa:	dd00      	ble.n	100139fe <__aeabi_dadd+0x146>
100139fc:	e0d5      	b.n	10013baa <__aeabi_dadd+0x2f2>
100139fe:	2120      	movs	r1, #32
10013a00:	0014      	movs	r4, r2
10013a02:	0028      	movs	r0, r5
10013a04:	1ac9      	subs	r1, r1, r3
10013a06:	408c      	lsls	r4, r1
10013a08:	40d8      	lsrs	r0, r3
10013a0a:	408d      	lsls	r5, r1
10013a0c:	4304      	orrs	r4, r0
10013a0e:	40da      	lsrs	r2, r3
10013a10:	1e68      	subs	r0, r5, #1
10013a12:	4185      	sbcs	r5, r0
10013a14:	0011      	movs	r1, r2
10013a16:	4325      	orrs	r5, r4
10013a18:	2400      	movs	r4, #0
10013a1a:	e776      	b.n	1001390a <__aeabi_dadd+0x52>
10013a1c:	4641      	mov	r1, r8
10013a1e:	4331      	orrs	r1, r6
10013a20:	d100      	bne.n	10013a24 <__aeabi_dadd+0x16c>
10013a22:	e234      	b.n	10013e8e <__aeabi_dadd+0x5d6>
10013a24:	0031      	movs	r1, r6
10013a26:	4645      	mov	r5, r8
10013a28:	076b      	lsls	r3, r5, #29
10013a2a:	d000      	beq.n	10013a2e <__aeabi_dadd+0x176>
10013a2c:	e76f      	b.n	1001390e <__aeabi_dadd+0x56>
10013a2e:	4656      	mov	r6, sl
10013a30:	0748      	lsls	r0, r1, #29
10013a32:	08ed      	lsrs	r5, r5, #3
10013a34:	08c9      	lsrs	r1, r1, #3
10013a36:	4305      	orrs	r5, r0
10013a38:	4b86      	ldr	r3, [pc, #536]	; (10013c54 <__aeabi_dadd+0x39c>)
10013a3a:	429c      	cmp	r4, r3
10013a3c:	d035      	beq.n	10013aaa <__aeabi_dadd+0x1f2>
10013a3e:	030a      	lsls	r2, r1, #12
10013a40:	0564      	lsls	r4, r4, #21
10013a42:	0b12      	lsrs	r2, r2, #12
10013a44:	0d64      	lsrs	r4, r4, #21
10013a46:	e77f      	b.n	10013948 <__aeabi_dadd+0x90>
10013a48:	4663      	mov	r3, ip
10013a4a:	1ae3      	subs	r3, r4, r3
10013a4c:	469b      	mov	fp, r3
10013a4e:	2b00      	cmp	r3, #0
10013a50:	dc00      	bgt.n	10013a54 <__aeabi_dadd+0x19c>
10013a52:	e08b      	b.n	10013b6c <__aeabi_dadd+0x2b4>
10013a54:	4667      	mov	r7, ip
10013a56:	2f00      	cmp	r7, #0
10013a58:	d03c      	beq.n	10013ad4 <__aeabi_dadd+0x21c>
10013a5a:	4f7e      	ldr	r7, [pc, #504]	; (10013c54 <__aeabi_dadd+0x39c>)
10013a5c:	42bc      	cmp	r4, r7
10013a5e:	d100      	bne.n	10013a62 <__aeabi_dadd+0x1aa>
10013a60:	e753      	b.n	1001390a <__aeabi_dadd+0x52>
10013a62:	2780      	movs	r7, #128	; 0x80
10013a64:	043f      	lsls	r7, r7, #16
10013a66:	4338      	orrs	r0, r7
10013a68:	465b      	mov	r3, fp
10013a6a:	2b38      	cmp	r3, #56	; 0x38
10013a6c:	dc00      	bgt.n	10013a70 <__aeabi_dadd+0x1b8>
10013a6e:	e0f7      	b.n	10013c60 <__aeabi_dadd+0x3a8>
10013a70:	4302      	orrs	r2, r0
10013a72:	1e50      	subs	r0, r2, #1
10013a74:	4182      	sbcs	r2, r0
10013a76:	2000      	movs	r0, #0
10013a78:	b2d2      	uxtb	r2, r2
10013a7a:	1953      	adds	r3, r2, r5
10013a7c:	1842      	adds	r2, r0, r1
10013a7e:	42ab      	cmp	r3, r5
10013a80:	4189      	sbcs	r1, r1
10013a82:	001d      	movs	r5, r3
10013a84:	4249      	negs	r1, r1
10013a86:	1889      	adds	r1, r1, r2
10013a88:	020b      	lsls	r3, r1, #8
10013a8a:	d5cd      	bpl.n	10013a28 <__aeabi_dadd+0x170>
10013a8c:	4b71      	ldr	r3, [pc, #452]	; (10013c54 <__aeabi_dadd+0x39c>)
10013a8e:	3401      	adds	r4, #1
10013a90:	429c      	cmp	r4, r3
10013a92:	d100      	bne.n	10013a96 <__aeabi_dadd+0x1de>
10013a94:	e13d      	b.n	10013d12 <__aeabi_dadd+0x45a>
10013a96:	2001      	movs	r0, #1
10013a98:	4a6f      	ldr	r2, [pc, #444]	; (10013c58 <__aeabi_dadd+0x3a0>)
10013a9a:	086b      	lsrs	r3, r5, #1
10013a9c:	400a      	ands	r2, r1
10013a9e:	4028      	ands	r0, r5
10013aa0:	4318      	orrs	r0, r3
10013aa2:	07d5      	lsls	r5, r2, #31
10013aa4:	4305      	orrs	r5, r0
10013aa6:	0851      	lsrs	r1, r2, #1
10013aa8:	e72f      	b.n	1001390a <__aeabi_dadd+0x52>
10013aaa:	002b      	movs	r3, r5
10013aac:	430b      	orrs	r3, r1
10013aae:	d100      	bne.n	10013ab2 <__aeabi_dadd+0x1fa>
10013ab0:	e1cb      	b.n	10013e4a <__aeabi_dadd+0x592>
10013ab2:	2380      	movs	r3, #128	; 0x80
10013ab4:	031b      	lsls	r3, r3, #12
10013ab6:	430b      	orrs	r3, r1
10013ab8:	031a      	lsls	r2, r3, #12
10013aba:	0b12      	lsrs	r2, r2, #12
10013abc:	e744      	b.n	10013948 <__aeabi_dadd+0x90>
10013abe:	3e01      	subs	r6, #1
10013ac0:	2e00      	cmp	r6, #0
10013ac2:	d16d      	bne.n	10013ba0 <__aeabi_dadd+0x2e8>
10013ac4:	1aae      	subs	r6, r5, r2
10013ac6:	42b5      	cmp	r5, r6
10013ac8:	419b      	sbcs	r3, r3
10013aca:	1a09      	subs	r1, r1, r0
10013acc:	425b      	negs	r3, r3
10013ace:	1ac9      	subs	r1, r1, r3
10013ad0:	0035      	movs	r5, r6
10013ad2:	e775      	b.n	100139c0 <__aeabi_dadd+0x108>
10013ad4:	0007      	movs	r7, r0
10013ad6:	4317      	orrs	r7, r2
10013ad8:	d100      	bne.n	10013adc <__aeabi_dadd+0x224>
10013ada:	e716      	b.n	1001390a <__aeabi_dadd+0x52>
10013adc:	2301      	movs	r3, #1
10013ade:	425b      	negs	r3, r3
10013ae0:	469c      	mov	ip, r3
10013ae2:	44e3      	add	fp, ip
10013ae4:	465b      	mov	r3, fp
10013ae6:	2b00      	cmp	r3, #0
10013ae8:	d000      	beq.n	10013aec <__aeabi_dadd+0x234>
10013aea:	e0e0      	b.n	10013cae <__aeabi_dadd+0x3f6>
10013aec:	18aa      	adds	r2, r5, r2
10013aee:	42aa      	cmp	r2, r5
10013af0:	419b      	sbcs	r3, r3
10013af2:	1809      	adds	r1, r1, r0
10013af4:	425b      	negs	r3, r3
10013af6:	1859      	adds	r1, r3, r1
10013af8:	0015      	movs	r5, r2
10013afa:	e7c5      	b.n	10013a88 <__aeabi_dadd+0x1d0>
10013afc:	2e00      	cmp	r6, #0
10013afe:	d175      	bne.n	10013bec <__aeabi_dadd+0x334>
10013b00:	1c66      	adds	r6, r4, #1
10013b02:	0576      	lsls	r6, r6, #21
10013b04:	0d76      	lsrs	r6, r6, #21
10013b06:	2e01      	cmp	r6, #1
10013b08:	dc00      	bgt.n	10013b0c <__aeabi_dadd+0x254>
10013b0a:	e0f3      	b.n	10013cf4 <__aeabi_dadd+0x43c>
10013b0c:	1aae      	subs	r6, r5, r2
10013b0e:	46b0      	mov	r8, r6
10013b10:	4545      	cmp	r5, r8
10013b12:	41bf      	sbcs	r7, r7
10013b14:	1a0e      	subs	r6, r1, r0
10013b16:	427f      	negs	r7, r7
10013b18:	1bf6      	subs	r6, r6, r7
10013b1a:	0237      	lsls	r7, r6, #8
10013b1c:	d400      	bmi.n	10013b20 <__aeabi_dadd+0x268>
10013b1e:	e08f      	b.n	10013c40 <__aeabi_dadd+0x388>
10013b20:	1b55      	subs	r5, r2, r5
10013b22:	42aa      	cmp	r2, r5
10013b24:	41b6      	sbcs	r6, r6
10013b26:	1a41      	subs	r1, r0, r1
10013b28:	4276      	negs	r6, r6
10013b2a:	1b8e      	subs	r6, r1, r6
10013b2c:	469a      	mov	sl, r3
10013b2e:	e74b      	b.n	100139c8 <__aeabi_dadd+0x110>
10013b30:	4656      	mov	r6, sl
10013b32:	2200      	movs	r2, #0
10013b34:	2500      	movs	r5, #0
10013b36:	e707      	b.n	10013948 <__aeabi_dadd+0x90>
10013b38:	0028      	movs	r0, r5
10013b3a:	f001 fd8b 	bl	10015654 <__clzsi2>
10013b3e:	3020      	adds	r0, #32
10013b40:	0003      	movs	r3, r0
10013b42:	3b08      	subs	r3, #8
10013b44:	2b1f      	cmp	r3, #31
10013b46:	dc00      	bgt.n	10013b4a <__aeabi_dadd+0x292>
10013b48:	e749      	b.n	100139de <__aeabi_dadd+0x126>
10013b4a:	002a      	movs	r2, r5
10013b4c:	3828      	subs	r0, #40	; 0x28
10013b4e:	4082      	lsls	r2, r0
10013b50:	2500      	movs	r5, #0
10013b52:	429c      	cmp	r4, r3
10013b54:	dc00      	bgt.n	10013b58 <__aeabi_dadd+0x2a0>
10013b56:	e74d      	b.n	100139f4 <__aeabi_dadd+0x13c>
10013b58:	493f      	ldr	r1, [pc, #252]	; (10013c58 <__aeabi_dadd+0x3a0>)
10013b5a:	1ae4      	subs	r4, r4, r3
10013b5c:	4011      	ands	r1, r2
10013b5e:	e6d4      	b.n	1001390a <__aeabi_dadd+0x52>
10013b60:	4302      	orrs	r2, r0
10013b62:	1e50      	subs	r0, r2, #1
10013b64:	4182      	sbcs	r2, r0
10013b66:	b2d3      	uxtb	r3, r2
10013b68:	2200      	movs	r2, #0
10013b6a:	e722      	b.n	100139b2 <__aeabi_dadd+0xfa>
10013b6c:	2b00      	cmp	r3, #0
10013b6e:	d000      	beq.n	10013b72 <__aeabi_dadd+0x2ba>
10013b70:	e0f3      	b.n	10013d5a <__aeabi_dadd+0x4a2>
10013b72:	1c63      	adds	r3, r4, #1
10013b74:	469c      	mov	ip, r3
10013b76:	055b      	lsls	r3, r3, #21
10013b78:	0d5b      	lsrs	r3, r3, #21
10013b7a:	2b01      	cmp	r3, #1
10013b7c:	dc00      	bgt.n	10013b80 <__aeabi_dadd+0x2c8>
10013b7e:	e09f      	b.n	10013cc0 <__aeabi_dadd+0x408>
10013b80:	4b34      	ldr	r3, [pc, #208]	; (10013c54 <__aeabi_dadd+0x39c>)
10013b82:	459c      	cmp	ip, r3
10013b84:	d100      	bne.n	10013b88 <__aeabi_dadd+0x2d0>
10013b86:	e0c3      	b.n	10013d10 <__aeabi_dadd+0x458>
10013b88:	18aa      	adds	r2, r5, r2
10013b8a:	1809      	adds	r1, r1, r0
10013b8c:	42aa      	cmp	r2, r5
10013b8e:	4180      	sbcs	r0, r0
10013b90:	4240      	negs	r0, r0
10013b92:	1841      	adds	r1, r0, r1
10013b94:	07cd      	lsls	r5, r1, #31
10013b96:	0852      	lsrs	r2, r2, #1
10013b98:	4315      	orrs	r5, r2
10013b9a:	0849      	lsrs	r1, r1, #1
10013b9c:	4664      	mov	r4, ip
10013b9e:	e6b4      	b.n	1001390a <__aeabi_dadd+0x52>
10013ba0:	4b2c      	ldr	r3, [pc, #176]	; (10013c54 <__aeabi_dadd+0x39c>)
10013ba2:	429c      	cmp	r4, r3
10013ba4:	d000      	beq.n	10013ba8 <__aeabi_dadd+0x2f0>
10013ba6:	e6ec      	b.n	10013982 <__aeabi_dadd+0xca>
10013ba8:	e6af      	b.n	1001390a <__aeabi_dadd+0x52>
10013baa:	0011      	movs	r1, r2
10013bac:	3c1f      	subs	r4, #31
10013bae:	40e1      	lsrs	r1, r4
10013bb0:	000c      	movs	r4, r1
10013bb2:	2b20      	cmp	r3, #32
10013bb4:	d100      	bne.n	10013bb8 <__aeabi_dadd+0x300>
10013bb6:	e07f      	b.n	10013cb8 <__aeabi_dadd+0x400>
10013bb8:	2140      	movs	r1, #64	; 0x40
10013bba:	1acb      	subs	r3, r1, r3
10013bbc:	409a      	lsls	r2, r3
10013bbe:	4315      	orrs	r5, r2
10013bc0:	1e6a      	subs	r2, r5, #1
10013bc2:	4195      	sbcs	r5, r2
10013bc4:	2100      	movs	r1, #0
10013bc6:	4325      	orrs	r5, r4
10013bc8:	2400      	movs	r4, #0
10013bca:	e72d      	b.n	10013a28 <__aeabi_dadd+0x170>
10013bcc:	0033      	movs	r3, r6
10013bce:	0007      	movs	r7, r0
10013bd0:	3b20      	subs	r3, #32
10013bd2:	40df      	lsrs	r7, r3
10013bd4:	003b      	movs	r3, r7
10013bd6:	2e20      	cmp	r6, #32
10013bd8:	d070      	beq.n	10013cbc <__aeabi_dadd+0x404>
10013bda:	2740      	movs	r7, #64	; 0x40
10013bdc:	1bbe      	subs	r6, r7, r6
10013bde:	40b0      	lsls	r0, r6
10013be0:	4302      	orrs	r2, r0
10013be2:	1e50      	subs	r0, r2, #1
10013be4:	4182      	sbcs	r2, r0
10013be6:	4313      	orrs	r3, r2
10013be8:	2200      	movs	r2, #0
10013bea:	e6e2      	b.n	100139b2 <__aeabi_dadd+0xfa>
10013bec:	2c00      	cmp	r4, #0
10013bee:	d04f      	beq.n	10013c90 <__aeabi_dadd+0x3d8>
10013bf0:	4c18      	ldr	r4, [pc, #96]	; (10013c54 <__aeabi_dadd+0x39c>)
10013bf2:	45a4      	cmp	ip, r4
10013bf4:	d100      	bne.n	10013bf8 <__aeabi_dadd+0x340>
10013bf6:	e0ab      	b.n	10013d50 <__aeabi_dadd+0x498>
10013bf8:	2480      	movs	r4, #128	; 0x80
10013bfa:	0424      	lsls	r4, r4, #16
10013bfc:	4276      	negs	r6, r6
10013bfe:	4321      	orrs	r1, r4
10013c00:	2e38      	cmp	r6, #56	; 0x38
10013c02:	dd00      	ble.n	10013c06 <__aeabi_dadd+0x34e>
10013c04:	e0df      	b.n	10013dc6 <__aeabi_dadd+0x50e>
10013c06:	2e1f      	cmp	r6, #31
10013c08:	dd00      	ble.n	10013c0c <__aeabi_dadd+0x354>
10013c0a:	e143      	b.n	10013e94 <__aeabi_dadd+0x5dc>
10013c0c:	2720      	movs	r7, #32
10013c0e:	1bbc      	subs	r4, r7, r6
10013c10:	46a1      	mov	r9, r4
10013c12:	000c      	movs	r4, r1
10013c14:	464f      	mov	r7, r9
10013c16:	40bc      	lsls	r4, r7
10013c18:	46a0      	mov	r8, r4
10013c1a:	002c      	movs	r4, r5
10013c1c:	4647      	mov	r7, r8
10013c1e:	40f4      	lsrs	r4, r6
10013c20:	433c      	orrs	r4, r7
10013c22:	464f      	mov	r7, r9
10013c24:	40bd      	lsls	r5, r7
10013c26:	1e6f      	subs	r7, r5, #1
10013c28:	41bd      	sbcs	r5, r7
10013c2a:	40f1      	lsrs	r1, r6
10013c2c:	432c      	orrs	r4, r5
10013c2e:	1b15      	subs	r5, r2, r4
10013c30:	42aa      	cmp	r2, r5
10013c32:	4192      	sbcs	r2, r2
10013c34:	1a41      	subs	r1, r0, r1
10013c36:	4252      	negs	r2, r2
10013c38:	1a89      	subs	r1, r1, r2
10013c3a:	4664      	mov	r4, ip
10013c3c:	469a      	mov	sl, r3
10013c3e:	e6bf      	b.n	100139c0 <__aeabi_dadd+0x108>
10013c40:	4641      	mov	r1, r8
10013c42:	4645      	mov	r5, r8
10013c44:	4331      	orrs	r1, r6
10013c46:	d000      	beq.n	10013c4a <__aeabi_dadd+0x392>
10013c48:	e6be      	b.n	100139c8 <__aeabi_dadd+0x110>
10013c4a:	2600      	movs	r6, #0
10013c4c:	2400      	movs	r4, #0
10013c4e:	2500      	movs	r5, #0
10013c50:	e6f2      	b.n	10013a38 <__aeabi_dadd+0x180>
10013c52:	46c0      	nop			; (mov r8, r8)
10013c54:	000007ff 	.word	0x000007ff
10013c58:	ff7fffff 	.word	0xff7fffff
10013c5c:	800fffff 	.word	0x800fffff
10013c60:	2b1f      	cmp	r3, #31
10013c62:	dc59      	bgt.n	10013d18 <__aeabi_dadd+0x460>
10013c64:	2720      	movs	r7, #32
10013c66:	1aff      	subs	r7, r7, r3
10013c68:	46bc      	mov	ip, r7
10013c6a:	0007      	movs	r7, r0
10013c6c:	4663      	mov	r3, ip
10013c6e:	409f      	lsls	r7, r3
10013c70:	465b      	mov	r3, fp
10013c72:	46b9      	mov	r9, r7
10013c74:	0017      	movs	r7, r2
10013c76:	40df      	lsrs	r7, r3
10013c78:	46b8      	mov	r8, r7
10013c7a:	464f      	mov	r7, r9
10013c7c:	4643      	mov	r3, r8
10013c7e:	431f      	orrs	r7, r3
10013c80:	4663      	mov	r3, ip
10013c82:	409a      	lsls	r2, r3
10013c84:	1e53      	subs	r3, r2, #1
10013c86:	419a      	sbcs	r2, r3
10013c88:	465b      	mov	r3, fp
10013c8a:	433a      	orrs	r2, r7
10013c8c:	40d8      	lsrs	r0, r3
10013c8e:	e6f4      	b.n	10013a7a <__aeabi_dadd+0x1c2>
10013c90:	000c      	movs	r4, r1
10013c92:	432c      	orrs	r4, r5
10013c94:	d05c      	beq.n	10013d50 <__aeabi_dadd+0x498>
10013c96:	43f6      	mvns	r6, r6
10013c98:	2e00      	cmp	r6, #0
10013c9a:	d155      	bne.n	10013d48 <__aeabi_dadd+0x490>
10013c9c:	1b55      	subs	r5, r2, r5
10013c9e:	42aa      	cmp	r2, r5
10013ca0:	41a4      	sbcs	r4, r4
10013ca2:	1a41      	subs	r1, r0, r1
10013ca4:	4264      	negs	r4, r4
10013ca6:	1b09      	subs	r1, r1, r4
10013ca8:	469a      	mov	sl, r3
10013caa:	4664      	mov	r4, ip
10013cac:	e688      	b.n	100139c0 <__aeabi_dadd+0x108>
10013cae:	4f96      	ldr	r7, [pc, #600]	; (10013f08 <__aeabi_dadd+0x650>)
10013cb0:	42bc      	cmp	r4, r7
10013cb2:	d000      	beq.n	10013cb6 <__aeabi_dadd+0x3fe>
10013cb4:	e6d8      	b.n	10013a68 <__aeabi_dadd+0x1b0>
10013cb6:	e628      	b.n	1001390a <__aeabi_dadd+0x52>
10013cb8:	2200      	movs	r2, #0
10013cba:	e780      	b.n	10013bbe <__aeabi_dadd+0x306>
10013cbc:	2000      	movs	r0, #0
10013cbe:	e78f      	b.n	10013be0 <__aeabi_dadd+0x328>
10013cc0:	000b      	movs	r3, r1
10013cc2:	432b      	orrs	r3, r5
10013cc4:	2c00      	cmp	r4, #0
10013cc6:	d000      	beq.n	10013cca <__aeabi_dadd+0x412>
10013cc8:	e0c2      	b.n	10013e50 <__aeabi_dadd+0x598>
10013cca:	2b00      	cmp	r3, #0
10013ccc:	d100      	bne.n	10013cd0 <__aeabi_dadd+0x418>
10013cce:	e101      	b.n	10013ed4 <__aeabi_dadd+0x61c>
10013cd0:	0003      	movs	r3, r0
10013cd2:	4313      	orrs	r3, r2
10013cd4:	d100      	bne.n	10013cd8 <__aeabi_dadd+0x420>
10013cd6:	e618      	b.n	1001390a <__aeabi_dadd+0x52>
10013cd8:	18ab      	adds	r3, r5, r2
10013cda:	42ab      	cmp	r3, r5
10013cdc:	41b6      	sbcs	r6, r6
10013cde:	1809      	adds	r1, r1, r0
10013ce0:	4276      	negs	r6, r6
10013ce2:	1871      	adds	r1, r6, r1
10013ce4:	020a      	lsls	r2, r1, #8
10013ce6:	d400      	bmi.n	10013cea <__aeabi_dadd+0x432>
10013ce8:	e109      	b.n	10013efe <__aeabi_dadd+0x646>
10013cea:	4a88      	ldr	r2, [pc, #544]	; (10013f0c <__aeabi_dadd+0x654>)
10013cec:	001d      	movs	r5, r3
10013cee:	4011      	ands	r1, r2
10013cf0:	4664      	mov	r4, ip
10013cf2:	e60a      	b.n	1001390a <__aeabi_dadd+0x52>
10013cf4:	2c00      	cmp	r4, #0
10013cf6:	d15b      	bne.n	10013db0 <__aeabi_dadd+0x4f8>
10013cf8:	000e      	movs	r6, r1
10013cfa:	432e      	orrs	r6, r5
10013cfc:	d000      	beq.n	10013d00 <__aeabi_dadd+0x448>
10013cfe:	e08a      	b.n	10013e16 <__aeabi_dadd+0x55e>
10013d00:	0001      	movs	r1, r0
10013d02:	4311      	orrs	r1, r2
10013d04:	d100      	bne.n	10013d08 <__aeabi_dadd+0x450>
10013d06:	e0c2      	b.n	10013e8e <__aeabi_dadd+0x5d6>
10013d08:	0001      	movs	r1, r0
10013d0a:	0015      	movs	r5, r2
10013d0c:	469a      	mov	sl, r3
10013d0e:	e5fc      	b.n	1001390a <__aeabi_dadd+0x52>
10013d10:	4664      	mov	r4, ip
10013d12:	2100      	movs	r1, #0
10013d14:	2500      	movs	r5, #0
10013d16:	e68f      	b.n	10013a38 <__aeabi_dadd+0x180>
10013d18:	2320      	movs	r3, #32
10013d1a:	425b      	negs	r3, r3
10013d1c:	469c      	mov	ip, r3
10013d1e:	44dc      	add	ip, fp
10013d20:	4663      	mov	r3, ip
10013d22:	0007      	movs	r7, r0
10013d24:	40df      	lsrs	r7, r3
10013d26:	465b      	mov	r3, fp
10013d28:	46bc      	mov	ip, r7
10013d2a:	2b20      	cmp	r3, #32
10013d2c:	d100      	bne.n	10013d30 <__aeabi_dadd+0x478>
10013d2e:	e0ac      	b.n	10013e8a <__aeabi_dadd+0x5d2>
10013d30:	2340      	movs	r3, #64	; 0x40
10013d32:	465f      	mov	r7, fp
10013d34:	1bdb      	subs	r3, r3, r7
10013d36:	4098      	lsls	r0, r3
10013d38:	4302      	orrs	r2, r0
10013d3a:	1e50      	subs	r0, r2, #1
10013d3c:	4182      	sbcs	r2, r0
10013d3e:	4663      	mov	r3, ip
10013d40:	4313      	orrs	r3, r2
10013d42:	001a      	movs	r2, r3
10013d44:	2000      	movs	r0, #0
10013d46:	e698      	b.n	10013a7a <__aeabi_dadd+0x1c2>
10013d48:	4c6f      	ldr	r4, [pc, #444]	; (10013f08 <__aeabi_dadd+0x650>)
10013d4a:	45a4      	cmp	ip, r4
10013d4c:	d000      	beq.n	10013d50 <__aeabi_dadd+0x498>
10013d4e:	e757      	b.n	10013c00 <__aeabi_dadd+0x348>
10013d50:	0001      	movs	r1, r0
10013d52:	0015      	movs	r5, r2
10013d54:	4664      	mov	r4, ip
10013d56:	469a      	mov	sl, r3
10013d58:	e5d7      	b.n	1001390a <__aeabi_dadd+0x52>
10013d5a:	2c00      	cmp	r4, #0
10013d5c:	d139      	bne.n	10013dd2 <__aeabi_dadd+0x51a>
10013d5e:	000c      	movs	r4, r1
10013d60:	432c      	orrs	r4, r5
10013d62:	d06e      	beq.n	10013e42 <__aeabi_dadd+0x58a>
10013d64:	43db      	mvns	r3, r3
10013d66:	2b00      	cmp	r3, #0
10013d68:	d01a      	beq.n	10013da0 <__aeabi_dadd+0x4e8>
10013d6a:	4c67      	ldr	r4, [pc, #412]	; (10013f08 <__aeabi_dadd+0x650>)
10013d6c:	45a4      	cmp	ip, r4
10013d6e:	d068      	beq.n	10013e42 <__aeabi_dadd+0x58a>
10013d70:	2b38      	cmp	r3, #56	; 0x38
10013d72:	dd00      	ble.n	10013d76 <__aeabi_dadd+0x4be>
10013d74:	e0a4      	b.n	10013ec0 <__aeabi_dadd+0x608>
10013d76:	2b1f      	cmp	r3, #31
10013d78:	dd00      	ble.n	10013d7c <__aeabi_dadd+0x4c4>
10013d7a:	e0ae      	b.n	10013eda <__aeabi_dadd+0x622>
10013d7c:	2420      	movs	r4, #32
10013d7e:	000f      	movs	r7, r1
10013d80:	1ae4      	subs	r4, r4, r3
10013d82:	40a7      	lsls	r7, r4
10013d84:	46b9      	mov	r9, r7
10013d86:	002f      	movs	r7, r5
10013d88:	40df      	lsrs	r7, r3
10013d8a:	46b8      	mov	r8, r7
10013d8c:	46a3      	mov	fp, r4
10013d8e:	464f      	mov	r7, r9
10013d90:	4644      	mov	r4, r8
10013d92:	4327      	orrs	r7, r4
10013d94:	465c      	mov	r4, fp
10013d96:	40a5      	lsls	r5, r4
10013d98:	1e6c      	subs	r4, r5, #1
10013d9a:	41a5      	sbcs	r5, r4
10013d9c:	40d9      	lsrs	r1, r3
10013d9e:	433d      	orrs	r5, r7
10013da0:	18ad      	adds	r5, r5, r2
10013da2:	4295      	cmp	r5, r2
10013da4:	419b      	sbcs	r3, r3
10013da6:	1809      	adds	r1, r1, r0
10013da8:	425b      	negs	r3, r3
10013daa:	1859      	adds	r1, r3, r1
10013dac:	4664      	mov	r4, ip
10013dae:	e66b      	b.n	10013a88 <__aeabi_dadd+0x1d0>
10013db0:	000c      	movs	r4, r1
10013db2:	432c      	orrs	r4, r5
10013db4:	d115      	bne.n	10013de2 <__aeabi_dadd+0x52a>
10013db6:	0001      	movs	r1, r0
10013db8:	4311      	orrs	r1, r2
10013dba:	d07b      	beq.n	10013eb4 <__aeabi_dadd+0x5fc>
10013dbc:	0001      	movs	r1, r0
10013dbe:	0015      	movs	r5, r2
10013dc0:	469a      	mov	sl, r3
10013dc2:	4c51      	ldr	r4, [pc, #324]	; (10013f08 <__aeabi_dadd+0x650>)
10013dc4:	e5a1      	b.n	1001390a <__aeabi_dadd+0x52>
10013dc6:	430d      	orrs	r5, r1
10013dc8:	1e69      	subs	r1, r5, #1
10013dca:	418d      	sbcs	r5, r1
10013dcc:	2100      	movs	r1, #0
10013dce:	b2ec      	uxtb	r4, r5
10013dd0:	e72d      	b.n	10013c2e <__aeabi_dadd+0x376>
10013dd2:	4c4d      	ldr	r4, [pc, #308]	; (10013f08 <__aeabi_dadd+0x650>)
10013dd4:	45a4      	cmp	ip, r4
10013dd6:	d034      	beq.n	10013e42 <__aeabi_dadd+0x58a>
10013dd8:	2480      	movs	r4, #128	; 0x80
10013dda:	0424      	lsls	r4, r4, #16
10013ddc:	425b      	negs	r3, r3
10013dde:	4321      	orrs	r1, r4
10013de0:	e7c6      	b.n	10013d70 <__aeabi_dadd+0x4b8>
10013de2:	0004      	movs	r4, r0
10013de4:	4314      	orrs	r4, r2
10013de6:	d04e      	beq.n	10013e86 <__aeabi_dadd+0x5ce>
10013de8:	08ed      	lsrs	r5, r5, #3
10013dea:	074c      	lsls	r4, r1, #29
10013dec:	432c      	orrs	r4, r5
10013dee:	2580      	movs	r5, #128	; 0x80
10013df0:	08c9      	lsrs	r1, r1, #3
10013df2:	032d      	lsls	r5, r5, #12
10013df4:	4229      	tst	r1, r5
10013df6:	d008      	beq.n	10013e0a <__aeabi_dadd+0x552>
10013df8:	08c6      	lsrs	r6, r0, #3
10013dfa:	422e      	tst	r6, r5
10013dfc:	d105      	bne.n	10013e0a <__aeabi_dadd+0x552>
10013dfe:	08d2      	lsrs	r2, r2, #3
10013e00:	0741      	lsls	r1, r0, #29
10013e02:	4311      	orrs	r1, r2
10013e04:	000c      	movs	r4, r1
10013e06:	469a      	mov	sl, r3
10013e08:	0031      	movs	r1, r6
10013e0a:	0f62      	lsrs	r2, r4, #29
10013e0c:	00c9      	lsls	r1, r1, #3
10013e0e:	00e5      	lsls	r5, r4, #3
10013e10:	4311      	orrs	r1, r2
10013e12:	4c3d      	ldr	r4, [pc, #244]	; (10013f08 <__aeabi_dadd+0x650>)
10013e14:	e579      	b.n	1001390a <__aeabi_dadd+0x52>
10013e16:	0006      	movs	r6, r0
10013e18:	4316      	orrs	r6, r2
10013e1a:	d100      	bne.n	10013e1e <__aeabi_dadd+0x566>
10013e1c:	e575      	b.n	1001390a <__aeabi_dadd+0x52>
10013e1e:	1aae      	subs	r6, r5, r2
10013e20:	46b0      	mov	r8, r6
10013e22:	4545      	cmp	r5, r8
10013e24:	41bf      	sbcs	r7, r7
10013e26:	1a0e      	subs	r6, r1, r0
10013e28:	427f      	negs	r7, r7
10013e2a:	1bf6      	subs	r6, r6, r7
10013e2c:	0237      	lsls	r7, r6, #8
10013e2e:	d400      	bmi.n	10013e32 <__aeabi_dadd+0x57a>
10013e30:	e5f4      	b.n	10013a1c <__aeabi_dadd+0x164>
10013e32:	1b55      	subs	r5, r2, r5
10013e34:	42aa      	cmp	r2, r5
10013e36:	41b6      	sbcs	r6, r6
10013e38:	1a41      	subs	r1, r0, r1
10013e3a:	4276      	negs	r6, r6
10013e3c:	1b89      	subs	r1, r1, r6
10013e3e:	469a      	mov	sl, r3
10013e40:	e563      	b.n	1001390a <__aeabi_dadd+0x52>
10013e42:	0001      	movs	r1, r0
10013e44:	0015      	movs	r5, r2
10013e46:	4664      	mov	r4, ip
10013e48:	e55f      	b.n	1001390a <__aeabi_dadd+0x52>
10013e4a:	2200      	movs	r2, #0
10013e4c:	2500      	movs	r5, #0
10013e4e:	e57b      	b.n	10013948 <__aeabi_dadd+0x90>
10013e50:	2b00      	cmp	r3, #0
10013e52:	d03b      	beq.n	10013ecc <__aeabi_dadd+0x614>
10013e54:	0003      	movs	r3, r0
10013e56:	4313      	orrs	r3, r2
10013e58:	d015      	beq.n	10013e86 <__aeabi_dadd+0x5ce>
10013e5a:	08ed      	lsrs	r5, r5, #3
10013e5c:	074b      	lsls	r3, r1, #29
10013e5e:	432b      	orrs	r3, r5
10013e60:	2580      	movs	r5, #128	; 0x80
10013e62:	08c9      	lsrs	r1, r1, #3
10013e64:	032d      	lsls	r5, r5, #12
10013e66:	4229      	tst	r1, r5
10013e68:	d007      	beq.n	10013e7a <__aeabi_dadd+0x5c2>
10013e6a:	08c4      	lsrs	r4, r0, #3
10013e6c:	422c      	tst	r4, r5
10013e6e:	d104      	bne.n	10013e7a <__aeabi_dadd+0x5c2>
10013e70:	0741      	lsls	r1, r0, #29
10013e72:	000b      	movs	r3, r1
10013e74:	0021      	movs	r1, r4
10013e76:	08d2      	lsrs	r2, r2, #3
10013e78:	4313      	orrs	r3, r2
10013e7a:	00c9      	lsls	r1, r1, #3
10013e7c:	0f5a      	lsrs	r2, r3, #29
10013e7e:	4311      	orrs	r1, r2
10013e80:	00dd      	lsls	r5, r3, #3
10013e82:	4c21      	ldr	r4, [pc, #132]	; (10013f08 <__aeabi_dadd+0x650>)
10013e84:	e541      	b.n	1001390a <__aeabi_dadd+0x52>
10013e86:	4c20      	ldr	r4, [pc, #128]	; (10013f08 <__aeabi_dadd+0x650>)
10013e88:	e53f      	b.n	1001390a <__aeabi_dadd+0x52>
10013e8a:	2000      	movs	r0, #0
10013e8c:	e754      	b.n	10013d38 <__aeabi_dadd+0x480>
10013e8e:	2600      	movs	r6, #0
10013e90:	2500      	movs	r5, #0
10013e92:	e5d1      	b.n	10013a38 <__aeabi_dadd+0x180>
10013e94:	0034      	movs	r4, r6
10013e96:	000f      	movs	r7, r1
10013e98:	3c20      	subs	r4, #32
10013e9a:	40e7      	lsrs	r7, r4
10013e9c:	003c      	movs	r4, r7
10013e9e:	2e20      	cmp	r6, #32
10013ea0:	d02b      	beq.n	10013efa <__aeabi_dadd+0x642>
10013ea2:	2740      	movs	r7, #64	; 0x40
10013ea4:	1bbe      	subs	r6, r7, r6
10013ea6:	40b1      	lsls	r1, r6
10013ea8:	430d      	orrs	r5, r1
10013eaa:	1e69      	subs	r1, r5, #1
10013eac:	418d      	sbcs	r5, r1
10013eae:	2100      	movs	r1, #0
10013eb0:	432c      	orrs	r4, r5
10013eb2:	e6bc      	b.n	10013c2e <__aeabi_dadd+0x376>
10013eb4:	2180      	movs	r1, #128	; 0x80
10013eb6:	2600      	movs	r6, #0
10013eb8:	0309      	lsls	r1, r1, #12
10013eba:	4c13      	ldr	r4, [pc, #76]	; (10013f08 <__aeabi_dadd+0x650>)
10013ebc:	2500      	movs	r5, #0
10013ebe:	e5bb      	b.n	10013a38 <__aeabi_dadd+0x180>
10013ec0:	430d      	orrs	r5, r1
10013ec2:	1e69      	subs	r1, r5, #1
10013ec4:	418d      	sbcs	r5, r1
10013ec6:	2100      	movs	r1, #0
10013ec8:	b2ed      	uxtb	r5, r5
10013eca:	e769      	b.n	10013da0 <__aeabi_dadd+0x4e8>
10013ecc:	0001      	movs	r1, r0
10013ece:	0015      	movs	r5, r2
10013ed0:	4c0d      	ldr	r4, [pc, #52]	; (10013f08 <__aeabi_dadd+0x650>)
10013ed2:	e51a      	b.n	1001390a <__aeabi_dadd+0x52>
10013ed4:	0001      	movs	r1, r0
10013ed6:	0015      	movs	r5, r2
10013ed8:	e517      	b.n	1001390a <__aeabi_dadd+0x52>
10013eda:	001c      	movs	r4, r3
10013edc:	000f      	movs	r7, r1
10013ede:	3c20      	subs	r4, #32
10013ee0:	40e7      	lsrs	r7, r4
10013ee2:	003c      	movs	r4, r7
10013ee4:	2b20      	cmp	r3, #32
10013ee6:	d00c      	beq.n	10013f02 <__aeabi_dadd+0x64a>
10013ee8:	2740      	movs	r7, #64	; 0x40
10013eea:	1afb      	subs	r3, r7, r3
10013eec:	4099      	lsls	r1, r3
10013eee:	430d      	orrs	r5, r1
10013ef0:	1e69      	subs	r1, r5, #1
10013ef2:	418d      	sbcs	r5, r1
10013ef4:	2100      	movs	r1, #0
10013ef6:	4325      	orrs	r5, r4
10013ef8:	e752      	b.n	10013da0 <__aeabi_dadd+0x4e8>
10013efa:	2100      	movs	r1, #0
10013efc:	e7d4      	b.n	10013ea8 <__aeabi_dadd+0x5f0>
10013efe:	001d      	movs	r5, r3
10013f00:	e592      	b.n	10013a28 <__aeabi_dadd+0x170>
10013f02:	2100      	movs	r1, #0
10013f04:	e7f3      	b.n	10013eee <__aeabi_dadd+0x636>
10013f06:	46c0      	nop			; (mov r8, r8)
10013f08:	000007ff 	.word	0x000007ff
10013f0c:	ff7fffff 	.word	0xff7fffff

10013f10 <__aeabi_ddiv>:
10013f10:	b5f0      	push	{r4, r5, r6, r7, lr}
10013f12:	4656      	mov	r6, sl
10013f14:	464d      	mov	r5, r9
10013f16:	4644      	mov	r4, r8
10013f18:	465f      	mov	r7, fp
10013f1a:	b4f0      	push	{r4, r5, r6, r7}
10013f1c:	001d      	movs	r5, r3
10013f1e:	030e      	lsls	r6, r1, #12
10013f20:	004c      	lsls	r4, r1, #1
10013f22:	0fcb      	lsrs	r3, r1, #31
10013f24:	b087      	sub	sp, #28
10013f26:	0007      	movs	r7, r0
10013f28:	4692      	mov	sl, r2
10013f2a:	4681      	mov	r9, r0
10013f2c:	0b36      	lsrs	r6, r6, #12
10013f2e:	0d64      	lsrs	r4, r4, #21
10013f30:	4698      	mov	r8, r3
10013f32:	d06a      	beq.n	1001400a <__aeabi_ddiv+0xfa>
10013f34:	4b6d      	ldr	r3, [pc, #436]	; (100140ec <__aeabi_ddiv+0x1dc>)
10013f36:	429c      	cmp	r4, r3
10013f38:	d035      	beq.n	10013fa6 <__aeabi_ddiv+0x96>
10013f3a:	2280      	movs	r2, #128	; 0x80
10013f3c:	0f43      	lsrs	r3, r0, #29
10013f3e:	0412      	lsls	r2, r2, #16
10013f40:	4313      	orrs	r3, r2
10013f42:	00f6      	lsls	r6, r6, #3
10013f44:	431e      	orrs	r6, r3
10013f46:	00c3      	lsls	r3, r0, #3
10013f48:	4699      	mov	r9, r3
10013f4a:	4b69      	ldr	r3, [pc, #420]	; (100140f0 <__aeabi_ddiv+0x1e0>)
10013f4c:	2700      	movs	r7, #0
10013f4e:	469c      	mov	ip, r3
10013f50:	2300      	movs	r3, #0
10013f52:	4464      	add	r4, ip
10013f54:	9302      	str	r3, [sp, #8]
10013f56:	032b      	lsls	r3, r5, #12
10013f58:	0068      	lsls	r0, r5, #1
10013f5a:	0b1b      	lsrs	r3, r3, #12
10013f5c:	0fed      	lsrs	r5, r5, #31
10013f5e:	4651      	mov	r1, sl
10013f60:	469b      	mov	fp, r3
10013f62:	0d40      	lsrs	r0, r0, #21
10013f64:	9500      	str	r5, [sp, #0]
10013f66:	d100      	bne.n	10013f6a <__aeabi_ddiv+0x5a>
10013f68:	e078      	b.n	1001405c <__aeabi_ddiv+0x14c>
10013f6a:	4b60      	ldr	r3, [pc, #384]	; (100140ec <__aeabi_ddiv+0x1dc>)
10013f6c:	4298      	cmp	r0, r3
10013f6e:	d06c      	beq.n	1001404a <__aeabi_ddiv+0x13a>
10013f70:	465b      	mov	r3, fp
10013f72:	00da      	lsls	r2, r3, #3
10013f74:	0f4b      	lsrs	r3, r1, #29
10013f76:	2180      	movs	r1, #128	; 0x80
10013f78:	0409      	lsls	r1, r1, #16
10013f7a:	430b      	orrs	r3, r1
10013f7c:	4313      	orrs	r3, r2
10013f7e:	469b      	mov	fp, r3
10013f80:	4653      	mov	r3, sl
10013f82:	00d9      	lsls	r1, r3, #3
10013f84:	4b5a      	ldr	r3, [pc, #360]	; (100140f0 <__aeabi_ddiv+0x1e0>)
10013f86:	469c      	mov	ip, r3
10013f88:	2300      	movs	r3, #0
10013f8a:	4460      	add	r0, ip
10013f8c:	4642      	mov	r2, r8
10013f8e:	1a20      	subs	r0, r4, r0
10013f90:	406a      	eors	r2, r5
10013f92:	4692      	mov	sl, r2
10013f94:	9001      	str	r0, [sp, #4]
10013f96:	431f      	orrs	r7, r3
10013f98:	2f0f      	cmp	r7, #15
10013f9a:	d900      	bls.n	10013f9e <__aeabi_ddiv+0x8e>
10013f9c:	e0b0      	b.n	10014100 <__aeabi_ddiv+0x1f0>
10013f9e:	4855      	ldr	r0, [pc, #340]	; (100140f4 <__aeabi_ddiv+0x1e4>)
10013fa0:	00bf      	lsls	r7, r7, #2
10013fa2:	59c0      	ldr	r0, [r0, r7]
10013fa4:	4687      	mov	pc, r0
10013fa6:	4337      	orrs	r7, r6
10013fa8:	d000      	beq.n	10013fac <__aeabi_ddiv+0x9c>
10013faa:	e088      	b.n	100140be <__aeabi_ddiv+0x1ae>
10013fac:	2300      	movs	r3, #0
10013fae:	4699      	mov	r9, r3
10013fb0:	3302      	adds	r3, #2
10013fb2:	2708      	movs	r7, #8
10013fb4:	2600      	movs	r6, #0
10013fb6:	9302      	str	r3, [sp, #8]
10013fb8:	e7cd      	b.n	10013f56 <__aeabi_ddiv+0x46>
10013fba:	4643      	mov	r3, r8
10013fbc:	46b3      	mov	fp, r6
10013fbe:	4649      	mov	r1, r9
10013fc0:	9300      	str	r3, [sp, #0]
10013fc2:	9b02      	ldr	r3, [sp, #8]
10013fc4:	9a00      	ldr	r2, [sp, #0]
10013fc6:	4692      	mov	sl, r2
10013fc8:	2b02      	cmp	r3, #2
10013fca:	d000      	beq.n	10013fce <__aeabi_ddiv+0xbe>
10013fcc:	e1bf      	b.n	1001434e <__aeabi_ddiv+0x43e>
10013fce:	2100      	movs	r1, #0
10013fd0:	4653      	mov	r3, sl
10013fd2:	2201      	movs	r2, #1
10013fd4:	2600      	movs	r6, #0
10013fd6:	4689      	mov	r9, r1
10013fd8:	401a      	ands	r2, r3
10013fda:	4b44      	ldr	r3, [pc, #272]	; (100140ec <__aeabi_ddiv+0x1dc>)
10013fdc:	2100      	movs	r1, #0
10013fde:	0336      	lsls	r6, r6, #12
10013fe0:	0d0c      	lsrs	r4, r1, #20
10013fe2:	0524      	lsls	r4, r4, #20
10013fe4:	0b36      	lsrs	r6, r6, #12
10013fe6:	4326      	orrs	r6, r4
10013fe8:	4c43      	ldr	r4, [pc, #268]	; (100140f8 <__aeabi_ddiv+0x1e8>)
10013fea:	051b      	lsls	r3, r3, #20
10013fec:	4026      	ands	r6, r4
10013fee:	431e      	orrs	r6, r3
10013ff0:	0076      	lsls	r6, r6, #1
10013ff2:	07d2      	lsls	r2, r2, #31
10013ff4:	0876      	lsrs	r6, r6, #1
10013ff6:	4316      	orrs	r6, r2
10013ff8:	4648      	mov	r0, r9
10013ffa:	0031      	movs	r1, r6
10013ffc:	b007      	add	sp, #28
10013ffe:	bc3c      	pop	{r2, r3, r4, r5}
10014000:	4690      	mov	r8, r2
10014002:	4699      	mov	r9, r3
10014004:	46a2      	mov	sl, r4
10014006:	46ab      	mov	fp, r5
10014008:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001400a:	0033      	movs	r3, r6
1001400c:	4303      	orrs	r3, r0
1001400e:	d04f      	beq.n	100140b0 <__aeabi_ddiv+0x1a0>
10014010:	2e00      	cmp	r6, #0
10014012:	d100      	bne.n	10014016 <__aeabi_ddiv+0x106>
10014014:	e1bc      	b.n	10014390 <__aeabi_ddiv+0x480>
10014016:	0030      	movs	r0, r6
10014018:	f001 fb1c 	bl	10015654 <__clzsi2>
1001401c:	0003      	movs	r3, r0
1001401e:	3b0b      	subs	r3, #11
10014020:	2b1c      	cmp	r3, #28
10014022:	dd00      	ble.n	10014026 <__aeabi_ddiv+0x116>
10014024:	e1ad      	b.n	10014382 <__aeabi_ddiv+0x472>
10014026:	221d      	movs	r2, #29
10014028:	0001      	movs	r1, r0
1001402a:	1ad3      	subs	r3, r2, r3
1001402c:	3908      	subs	r1, #8
1001402e:	003a      	movs	r2, r7
10014030:	408f      	lsls	r7, r1
10014032:	408e      	lsls	r6, r1
10014034:	40da      	lsrs	r2, r3
10014036:	46b9      	mov	r9, r7
10014038:	4316      	orrs	r6, r2
1001403a:	4b30      	ldr	r3, [pc, #192]	; (100140fc <__aeabi_ddiv+0x1ec>)
1001403c:	2700      	movs	r7, #0
1001403e:	469c      	mov	ip, r3
10014040:	2300      	movs	r3, #0
10014042:	4460      	add	r0, ip
10014044:	4244      	negs	r4, r0
10014046:	9302      	str	r3, [sp, #8]
10014048:	e785      	b.n	10013f56 <__aeabi_ddiv+0x46>
1001404a:	4653      	mov	r3, sl
1001404c:	465a      	mov	r2, fp
1001404e:	4313      	orrs	r3, r2
10014050:	d12c      	bne.n	100140ac <__aeabi_ddiv+0x19c>
10014052:	2300      	movs	r3, #0
10014054:	2100      	movs	r1, #0
10014056:	469b      	mov	fp, r3
10014058:	3302      	adds	r3, #2
1001405a:	e797      	b.n	10013f8c <__aeabi_ddiv+0x7c>
1001405c:	430b      	orrs	r3, r1
1001405e:	d020      	beq.n	100140a2 <__aeabi_ddiv+0x192>
10014060:	465b      	mov	r3, fp
10014062:	2b00      	cmp	r3, #0
10014064:	d100      	bne.n	10014068 <__aeabi_ddiv+0x158>
10014066:	e19e      	b.n	100143a6 <__aeabi_ddiv+0x496>
10014068:	4658      	mov	r0, fp
1001406a:	f001 faf3 	bl	10015654 <__clzsi2>
1001406e:	0003      	movs	r3, r0
10014070:	3b0b      	subs	r3, #11
10014072:	2b1c      	cmp	r3, #28
10014074:	dd00      	ble.n	10014078 <__aeabi_ddiv+0x168>
10014076:	e18f      	b.n	10014398 <__aeabi_ddiv+0x488>
10014078:	0002      	movs	r2, r0
1001407a:	4659      	mov	r1, fp
1001407c:	3a08      	subs	r2, #8
1001407e:	4091      	lsls	r1, r2
10014080:	468b      	mov	fp, r1
10014082:	211d      	movs	r1, #29
10014084:	1acb      	subs	r3, r1, r3
10014086:	4651      	mov	r1, sl
10014088:	40d9      	lsrs	r1, r3
1001408a:	000b      	movs	r3, r1
1001408c:	4659      	mov	r1, fp
1001408e:	430b      	orrs	r3, r1
10014090:	4651      	mov	r1, sl
10014092:	469b      	mov	fp, r3
10014094:	4091      	lsls	r1, r2
10014096:	4b19      	ldr	r3, [pc, #100]	; (100140fc <__aeabi_ddiv+0x1ec>)
10014098:	469c      	mov	ip, r3
1001409a:	4460      	add	r0, ip
1001409c:	4240      	negs	r0, r0
1001409e:	2300      	movs	r3, #0
100140a0:	e774      	b.n	10013f8c <__aeabi_ddiv+0x7c>
100140a2:	2300      	movs	r3, #0
100140a4:	2100      	movs	r1, #0
100140a6:	469b      	mov	fp, r3
100140a8:	3301      	adds	r3, #1
100140aa:	e76f      	b.n	10013f8c <__aeabi_ddiv+0x7c>
100140ac:	2303      	movs	r3, #3
100140ae:	e76d      	b.n	10013f8c <__aeabi_ddiv+0x7c>
100140b0:	2300      	movs	r3, #0
100140b2:	4699      	mov	r9, r3
100140b4:	3301      	adds	r3, #1
100140b6:	2704      	movs	r7, #4
100140b8:	2600      	movs	r6, #0
100140ba:	9302      	str	r3, [sp, #8]
100140bc:	e74b      	b.n	10013f56 <__aeabi_ddiv+0x46>
100140be:	2303      	movs	r3, #3
100140c0:	270c      	movs	r7, #12
100140c2:	9302      	str	r3, [sp, #8]
100140c4:	e747      	b.n	10013f56 <__aeabi_ddiv+0x46>
100140c6:	2201      	movs	r2, #1
100140c8:	1ad5      	subs	r5, r2, r3
100140ca:	2d38      	cmp	r5, #56	; 0x38
100140cc:	dc00      	bgt.n	100140d0 <__aeabi_ddiv+0x1c0>
100140ce:	e1b0      	b.n	10014432 <__aeabi_ddiv+0x522>
100140d0:	4653      	mov	r3, sl
100140d2:	401a      	ands	r2, r3
100140d4:	2100      	movs	r1, #0
100140d6:	2300      	movs	r3, #0
100140d8:	2600      	movs	r6, #0
100140da:	4689      	mov	r9, r1
100140dc:	e77e      	b.n	10013fdc <__aeabi_ddiv+0xcc>
100140de:	2300      	movs	r3, #0
100140e0:	2680      	movs	r6, #128	; 0x80
100140e2:	4699      	mov	r9, r3
100140e4:	2200      	movs	r2, #0
100140e6:	0336      	lsls	r6, r6, #12
100140e8:	4b00      	ldr	r3, [pc, #0]	; (100140ec <__aeabi_ddiv+0x1dc>)
100140ea:	e777      	b.n	10013fdc <__aeabi_ddiv+0xcc>
100140ec:	000007ff 	.word	0x000007ff
100140f0:	fffffc01 	.word	0xfffffc01
100140f4:	100182c0 	.word	0x100182c0
100140f8:	800fffff 	.word	0x800fffff
100140fc:	000003f3 	.word	0x000003f3
10014100:	455e      	cmp	r6, fp
10014102:	d900      	bls.n	10014106 <__aeabi_ddiv+0x1f6>
10014104:	e172      	b.n	100143ec <__aeabi_ddiv+0x4dc>
10014106:	d100      	bne.n	1001410a <__aeabi_ddiv+0x1fa>
10014108:	e16d      	b.n	100143e6 <__aeabi_ddiv+0x4d6>
1001410a:	9b01      	ldr	r3, [sp, #4]
1001410c:	464d      	mov	r5, r9
1001410e:	3b01      	subs	r3, #1
10014110:	9301      	str	r3, [sp, #4]
10014112:	2300      	movs	r3, #0
10014114:	0034      	movs	r4, r6
10014116:	9302      	str	r3, [sp, #8]
10014118:	465b      	mov	r3, fp
1001411a:	021e      	lsls	r6, r3, #8
1001411c:	0e0b      	lsrs	r3, r1, #24
1001411e:	431e      	orrs	r6, r3
10014120:	020b      	lsls	r3, r1, #8
10014122:	9303      	str	r3, [sp, #12]
10014124:	0c33      	lsrs	r3, r6, #16
10014126:	4699      	mov	r9, r3
10014128:	0433      	lsls	r3, r6, #16
1001412a:	0c1b      	lsrs	r3, r3, #16
1001412c:	4649      	mov	r1, r9
1001412e:	0020      	movs	r0, r4
10014130:	9300      	str	r3, [sp, #0]
10014132:	f7fe fc65 	bl	10012a00 <__aeabi_uidiv>
10014136:	9b00      	ldr	r3, [sp, #0]
10014138:	0037      	movs	r7, r6
1001413a:	4343      	muls	r3, r0
1001413c:	0006      	movs	r6, r0
1001413e:	4649      	mov	r1, r9
10014140:	0020      	movs	r0, r4
10014142:	4698      	mov	r8, r3
10014144:	f7fe fce2 	bl	10012b0c <__aeabi_uidivmod>
10014148:	0c2c      	lsrs	r4, r5, #16
1001414a:	0409      	lsls	r1, r1, #16
1001414c:	430c      	orrs	r4, r1
1001414e:	45a0      	cmp	r8, r4
10014150:	d909      	bls.n	10014166 <__aeabi_ddiv+0x256>
10014152:	19e4      	adds	r4, r4, r7
10014154:	1e73      	subs	r3, r6, #1
10014156:	42a7      	cmp	r7, r4
10014158:	d900      	bls.n	1001415c <__aeabi_ddiv+0x24c>
1001415a:	e15c      	b.n	10014416 <__aeabi_ddiv+0x506>
1001415c:	45a0      	cmp	r8, r4
1001415e:	d800      	bhi.n	10014162 <__aeabi_ddiv+0x252>
10014160:	e159      	b.n	10014416 <__aeabi_ddiv+0x506>
10014162:	3e02      	subs	r6, #2
10014164:	19e4      	adds	r4, r4, r7
10014166:	4643      	mov	r3, r8
10014168:	1ae4      	subs	r4, r4, r3
1001416a:	4649      	mov	r1, r9
1001416c:	0020      	movs	r0, r4
1001416e:	f7fe fc47 	bl	10012a00 <__aeabi_uidiv>
10014172:	0003      	movs	r3, r0
10014174:	9a00      	ldr	r2, [sp, #0]
10014176:	4680      	mov	r8, r0
10014178:	4353      	muls	r3, r2
1001417a:	4649      	mov	r1, r9
1001417c:	0020      	movs	r0, r4
1001417e:	469b      	mov	fp, r3
10014180:	f7fe fcc4 	bl	10012b0c <__aeabi_uidivmod>
10014184:	042a      	lsls	r2, r5, #16
10014186:	0409      	lsls	r1, r1, #16
10014188:	0c12      	lsrs	r2, r2, #16
1001418a:	430a      	orrs	r2, r1
1001418c:	4593      	cmp	fp, r2
1001418e:	d90d      	bls.n	100141ac <__aeabi_ddiv+0x29c>
10014190:	4643      	mov	r3, r8
10014192:	19d2      	adds	r2, r2, r7
10014194:	3b01      	subs	r3, #1
10014196:	4297      	cmp	r7, r2
10014198:	d900      	bls.n	1001419c <__aeabi_ddiv+0x28c>
1001419a:	e13a      	b.n	10014412 <__aeabi_ddiv+0x502>
1001419c:	4593      	cmp	fp, r2
1001419e:	d800      	bhi.n	100141a2 <__aeabi_ddiv+0x292>
100141a0:	e137      	b.n	10014412 <__aeabi_ddiv+0x502>
100141a2:	2302      	movs	r3, #2
100141a4:	425b      	negs	r3, r3
100141a6:	469c      	mov	ip, r3
100141a8:	19d2      	adds	r2, r2, r7
100141aa:	44e0      	add	r8, ip
100141ac:	465b      	mov	r3, fp
100141ae:	1ad2      	subs	r2, r2, r3
100141b0:	4643      	mov	r3, r8
100141b2:	0436      	lsls	r6, r6, #16
100141b4:	4333      	orrs	r3, r6
100141b6:	469b      	mov	fp, r3
100141b8:	9903      	ldr	r1, [sp, #12]
100141ba:	0c18      	lsrs	r0, r3, #16
100141bc:	0c0b      	lsrs	r3, r1, #16
100141be:	001d      	movs	r5, r3
100141c0:	9305      	str	r3, [sp, #20]
100141c2:	0409      	lsls	r1, r1, #16
100141c4:	465b      	mov	r3, fp
100141c6:	0c09      	lsrs	r1, r1, #16
100141c8:	000c      	movs	r4, r1
100141ca:	041b      	lsls	r3, r3, #16
100141cc:	0c1b      	lsrs	r3, r3, #16
100141ce:	4344      	muls	r4, r0
100141d0:	9104      	str	r1, [sp, #16]
100141d2:	4359      	muls	r1, r3
100141d4:	436b      	muls	r3, r5
100141d6:	4368      	muls	r0, r5
100141d8:	191b      	adds	r3, r3, r4
100141da:	0c0d      	lsrs	r5, r1, #16
100141dc:	18eb      	adds	r3, r5, r3
100141de:	429c      	cmp	r4, r3
100141e0:	d903      	bls.n	100141ea <__aeabi_ddiv+0x2da>
100141e2:	2480      	movs	r4, #128	; 0x80
100141e4:	0264      	lsls	r4, r4, #9
100141e6:	46a4      	mov	ip, r4
100141e8:	4460      	add	r0, ip
100141ea:	0c1c      	lsrs	r4, r3, #16
100141ec:	0409      	lsls	r1, r1, #16
100141ee:	041b      	lsls	r3, r3, #16
100141f0:	0c09      	lsrs	r1, r1, #16
100141f2:	1820      	adds	r0, r4, r0
100141f4:	185d      	adds	r5, r3, r1
100141f6:	4282      	cmp	r2, r0
100141f8:	d200      	bcs.n	100141fc <__aeabi_ddiv+0x2ec>
100141fa:	e0de      	b.n	100143ba <__aeabi_ddiv+0x4aa>
100141fc:	d100      	bne.n	10014200 <__aeabi_ddiv+0x2f0>
100141fe:	e0d7      	b.n	100143b0 <__aeabi_ddiv+0x4a0>
10014200:	1a16      	subs	r6, r2, r0
10014202:	9b02      	ldr	r3, [sp, #8]
10014204:	469c      	mov	ip, r3
10014206:	1b5d      	subs	r5, r3, r5
10014208:	45ac      	cmp	ip, r5
1001420a:	419b      	sbcs	r3, r3
1001420c:	425b      	negs	r3, r3
1001420e:	1af6      	subs	r6, r6, r3
10014210:	42b7      	cmp	r7, r6
10014212:	d100      	bne.n	10014216 <__aeabi_ddiv+0x306>
10014214:	e106      	b.n	10014424 <__aeabi_ddiv+0x514>
10014216:	4649      	mov	r1, r9
10014218:	0030      	movs	r0, r6
1001421a:	f7fe fbf1 	bl	10012a00 <__aeabi_uidiv>
1001421e:	9b00      	ldr	r3, [sp, #0]
10014220:	0004      	movs	r4, r0
10014222:	4343      	muls	r3, r0
10014224:	4649      	mov	r1, r9
10014226:	0030      	movs	r0, r6
10014228:	4698      	mov	r8, r3
1001422a:	f7fe fc6f 	bl	10012b0c <__aeabi_uidivmod>
1001422e:	0c2e      	lsrs	r6, r5, #16
10014230:	0409      	lsls	r1, r1, #16
10014232:	430e      	orrs	r6, r1
10014234:	45b0      	cmp	r8, r6
10014236:	d909      	bls.n	1001424c <__aeabi_ddiv+0x33c>
10014238:	19f6      	adds	r6, r6, r7
1001423a:	1e63      	subs	r3, r4, #1
1001423c:	42b7      	cmp	r7, r6
1001423e:	d900      	bls.n	10014242 <__aeabi_ddiv+0x332>
10014240:	e0f3      	b.n	1001442a <__aeabi_ddiv+0x51a>
10014242:	45b0      	cmp	r8, r6
10014244:	d800      	bhi.n	10014248 <__aeabi_ddiv+0x338>
10014246:	e0f0      	b.n	1001442a <__aeabi_ddiv+0x51a>
10014248:	3c02      	subs	r4, #2
1001424a:	19f6      	adds	r6, r6, r7
1001424c:	4643      	mov	r3, r8
1001424e:	1af3      	subs	r3, r6, r3
10014250:	4649      	mov	r1, r9
10014252:	0018      	movs	r0, r3
10014254:	9302      	str	r3, [sp, #8]
10014256:	f7fe fbd3 	bl	10012a00 <__aeabi_uidiv>
1001425a:	9b00      	ldr	r3, [sp, #0]
1001425c:	0006      	movs	r6, r0
1001425e:	4343      	muls	r3, r0
10014260:	4649      	mov	r1, r9
10014262:	9802      	ldr	r0, [sp, #8]
10014264:	4698      	mov	r8, r3
10014266:	f7fe fc51 	bl	10012b0c <__aeabi_uidivmod>
1001426a:	042d      	lsls	r5, r5, #16
1001426c:	0409      	lsls	r1, r1, #16
1001426e:	0c2d      	lsrs	r5, r5, #16
10014270:	430d      	orrs	r5, r1
10014272:	45a8      	cmp	r8, r5
10014274:	d909      	bls.n	1001428a <__aeabi_ddiv+0x37a>
10014276:	19ed      	adds	r5, r5, r7
10014278:	1e73      	subs	r3, r6, #1
1001427a:	42af      	cmp	r7, r5
1001427c:	d900      	bls.n	10014280 <__aeabi_ddiv+0x370>
1001427e:	e0d6      	b.n	1001442e <__aeabi_ddiv+0x51e>
10014280:	45a8      	cmp	r8, r5
10014282:	d800      	bhi.n	10014286 <__aeabi_ddiv+0x376>
10014284:	e0d3      	b.n	1001442e <__aeabi_ddiv+0x51e>
10014286:	3e02      	subs	r6, #2
10014288:	19ed      	adds	r5, r5, r7
1001428a:	0424      	lsls	r4, r4, #16
1001428c:	0021      	movs	r1, r4
1001428e:	4643      	mov	r3, r8
10014290:	4331      	orrs	r1, r6
10014292:	9e04      	ldr	r6, [sp, #16]
10014294:	9a05      	ldr	r2, [sp, #20]
10014296:	0030      	movs	r0, r6
10014298:	1aed      	subs	r5, r5, r3
1001429a:	040b      	lsls	r3, r1, #16
1001429c:	0c0c      	lsrs	r4, r1, #16
1001429e:	0c1b      	lsrs	r3, r3, #16
100142a0:	4358      	muls	r0, r3
100142a2:	4366      	muls	r6, r4
100142a4:	4353      	muls	r3, r2
100142a6:	4354      	muls	r4, r2
100142a8:	199a      	adds	r2, r3, r6
100142aa:	0c03      	lsrs	r3, r0, #16
100142ac:	189b      	adds	r3, r3, r2
100142ae:	429e      	cmp	r6, r3
100142b0:	d903      	bls.n	100142ba <__aeabi_ddiv+0x3aa>
100142b2:	2280      	movs	r2, #128	; 0x80
100142b4:	0252      	lsls	r2, r2, #9
100142b6:	4694      	mov	ip, r2
100142b8:	4464      	add	r4, ip
100142ba:	0c1a      	lsrs	r2, r3, #16
100142bc:	0400      	lsls	r0, r0, #16
100142be:	041b      	lsls	r3, r3, #16
100142c0:	0c00      	lsrs	r0, r0, #16
100142c2:	1914      	adds	r4, r2, r4
100142c4:	181b      	adds	r3, r3, r0
100142c6:	42a5      	cmp	r5, r4
100142c8:	d350      	bcc.n	1001436c <__aeabi_ddiv+0x45c>
100142ca:	d04d      	beq.n	10014368 <__aeabi_ddiv+0x458>
100142cc:	2301      	movs	r3, #1
100142ce:	4319      	orrs	r1, r3
100142d0:	4a96      	ldr	r2, [pc, #600]	; (1001452c <__aeabi_ddiv+0x61c>)
100142d2:	9b01      	ldr	r3, [sp, #4]
100142d4:	4694      	mov	ip, r2
100142d6:	4463      	add	r3, ip
100142d8:	2b00      	cmp	r3, #0
100142da:	dc00      	bgt.n	100142de <__aeabi_ddiv+0x3ce>
100142dc:	e6f3      	b.n	100140c6 <__aeabi_ddiv+0x1b6>
100142de:	074a      	lsls	r2, r1, #29
100142e0:	d009      	beq.n	100142f6 <__aeabi_ddiv+0x3e6>
100142e2:	220f      	movs	r2, #15
100142e4:	400a      	ands	r2, r1
100142e6:	2a04      	cmp	r2, #4
100142e8:	d005      	beq.n	100142f6 <__aeabi_ddiv+0x3e6>
100142ea:	1d0a      	adds	r2, r1, #4
100142ec:	428a      	cmp	r2, r1
100142ee:	4189      	sbcs	r1, r1
100142f0:	4249      	negs	r1, r1
100142f2:	448b      	add	fp, r1
100142f4:	0011      	movs	r1, r2
100142f6:	465a      	mov	r2, fp
100142f8:	01d2      	lsls	r2, r2, #7
100142fa:	d508      	bpl.n	1001430e <__aeabi_ddiv+0x3fe>
100142fc:	465a      	mov	r2, fp
100142fe:	4b8c      	ldr	r3, [pc, #560]	; (10014530 <__aeabi_ddiv+0x620>)
10014300:	401a      	ands	r2, r3
10014302:	4693      	mov	fp, r2
10014304:	2280      	movs	r2, #128	; 0x80
10014306:	00d2      	lsls	r2, r2, #3
10014308:	4694      	mov	ip, r2
1001430a:	9b01      	ldr	r3, [sp, #4]
1001430c:	4463      	add	r3, ip
1001430e:	4a89      	ldr	r2, [pc, #548]	; (10014534 <__aeabi_ddiv+0x624>)
10014310:	4293      	cmp	r3, r2
10014312:	dd00      	ble.n	10014316 <__aeabi_ddiv+0x406>
10014314:	e65b      	b.n	10013fce <__aeabi_ddiv+0xbe>
10014316:	465a      	mov	r2, fp
10014318:	08c9      	lsrs	r1, r1, #3
1001431a:	0750      	lsls	r0, r2, #29
1001431c:	4308      	orrs	r0, r1
1001431e:	0256      	lsls	r6, r2, #9
10014320:	4651      	mov	r1, sl
10014322:	2201      	movs	r2, #1
10014324:	055b      	lsls	r3, r3, #21
10014326:	4681      	mov	r9, r0
10014328:	0b36      	lsrs	r6, r6, #12
1001432a:	0d5b      	lsrs	r3, r3, #21
1001432c:	400a      	ands	r2, r1
1001432e:	e655      	b.n	10013fdc <__aeabi_ddiv+0xcc>
10014330:	2380      	movs	r3, #128	; 0x80
10014332:	031b      	lsls	r3, r3, #12
10014334:	421e      	tst	r6, r3
10014336:	d011      	beq.n	1001435c <__aeabi_ddiv+0x44c>
10014338:	465a      	mov	r2, fp
1001433a:	421a      	tst	r2, r3
1001433c:	d10e      	bne.n	1001435c <__aeabi_ddiv+0x44c>
1001433e:	465e      	mov	r6, fp
10014340:	431e      	orrs	r6, r3
10014342:	0336      	lsls	r6, r6, #12
10014344:	0b36      	lsrs	r6, r6, #12
10014346:	002a      	movs	r2, r5
10014348:	4689      	mov	r9, r1
1001434a:	4b7b      	ldr	r3, [pc, #492]	; (10014538 <__aeabi_ddiv+0x628>)
1001434c:	e646      	b.n	10013fdc <__aeabi_ddiv+0xcc>
1001434e:	2b03      	cmp	r3, #3
10014350:	d100      	bne.n	10014354 <__aeabi_ddiv+0x444>
10014352:	e0e1      	b.n	10014518 <__aeabi_ddiv+0x608>
10014354:	2b01      	cmp	r3, #1
10014356:	d1bb      	bne.n	100142d0 <__aeabi_ddiv+0x3c0>
10014358:	401a      	ands	r2, r3
1001435a:	e6bb      	b.n	100140d4 <__aeabi_ddiv+0x1c4>
1001435c:	431e      	orrs	r6, r3
1001435e:	0336      	lsls	r6, r6, #12
10014360:	0b36      	lsrs	r6, r6, #12
10014362:	4642      	mov	r2, r8
10014364:	4b74      	ldr	r3, [pc, #464]	; (10014538 <__aeabi_ddiv+0x628>)
10014366:	e639      	b.n	10013fdc <__aeabi_ddiv+0xcc>
10014368:	2b00      	cmp	r3, #0
1001436a:	d0b1      	beq.n	100142d0 <__aeabi_ddiv+0x3c0>
1001436c:	197d      	adds	r5, r7, r5
1001436e:	1e4a      	subs	r2, r1, #1
10014370:	42af      	cmp	r7, r5
10014372:	d952      	bls.n	1001441a <__aeabi_ddiv+0x50a>
10014374:	0011      	movs	r1, r2
10014376:	42a5      	cmp	r5, r4
10014378:	d1a8      	bne.n	100142cc <__aeabi_ddiv+0x3bc>
1001437a:	9a03      	ldr	r2, [sp, #12]
1001437c:	429a      	cmp	r2, r3
1001437e:	d1a5      	bne.n	100142cc <__aeabi_ddiv+0x3bc>
10014380:	e7a6      	b.n	100142d0 <__aeabi_ddiv+0x3c0>
10014382:	0003      	movs	r3, r0
10014384:	003e      	movs	r6, r7
10014386:	3b28      	subs	r3, #40	; 0x28
10014388:	409e      	lsls	r6, r3
1001438a:	2300      	movs	r3, #0
1001438c:	4699      	mov	r9, r3
1001438e:	e654      	b.n	1001403a <__aeabi_ddiv+0x12a>
10014390:	f001 f960 	bl	10015654 <__clzsi2>
10014394:	3020      	adds	r0, #32
10014396:	e641      	b.n	1001401c <__aeabi_ddiv+0x10c>
10014398:	0003      	movs	r3, r0
1001439a:	4652      	mov	r2, sl
1001439c:	3b28      	subs	r3, #40	; 0x28
1001439e:	409a      	lsls	r2, r3
100143a0:	2100      	movs	r1, #0
100143a2:	4693      	mov	fp, r2
100143a4:	e677      	b.n	10014096 <__aeabi_ddiv+0x186>
100143a6:	4650      	mov	r0, sl
100143a8:	f001 f954 	bl	10015654 <__clzsi2>
100143ac:	3020      	adds	r0, #32
100143ae:	e65e      	b.n	1001406e <__aeabi_ddiv+0x15e>
100143b0:	9b02      	ldr	r3, [sp, #8]
100143b2:	2600      	movs	r6, #0
100143b4:	42ab      	cmp	r3, r5
100143b6:	d300      	bcc.n	100143ba <__aeabi_ddiv+0x4aa>
100143b8:	e723      	b.n	10014202 <__aeabi_ddiv+0x2f2>
100143ba:	9e03      	ldr	r6, [sp, #12]
100143bc:	9902      	ldr	r1, [sp, #8]
100143be:	46b4      	mov	ip, r6
100143c0:	4461      	add	r1, ip
100143c2:	4688      	mov	r8, r1
100143c4:	45b0      	cmp	r8, r6
100143c6:	41b6      	sbcs	r6, r6
100143c8:	465b      	mov	r3, fp
100143ca:	4276      	negs	r6, r6
100143cc:	19f6      	adds	r6, r6, r7
100143ce:	18b2      	adds	r2, r6, r2
100143d0:	3b01      	subs	r3, #1
100143d2:	9102      	str	r1, [sp, #8]
100143d4:	4297      	cmp	r7, r2
100143d6:	d213      	bcs.n	10014400 <__aeabi_ddiv+0x4f0>
100143d8:	4290      	cmp	r0, r2
100143da:	d84f      	bhi.n	1001447c <__aeabi_ddiv+0x56c>
100143dc:	d100      	bne.n	100143e0 <__aeabi_ddiv+0x4d0>
100143de:	e08e      	b.n	100144fe <__aeabi_ddiv+0x5ee>
100143e0:	1a16      	subs	r6, r2, r0
100143e2:	469b      	mov	fp, r3
100143e4:	e70d      	b.n	10014202 <__aeabi_ddiv+0x2f2>
100143e6:	4589      	cmp	r9, r1
100143e8:	d200      	bcs.n	100143ec <__aeabi_ddiv+0x4dc>
100143ea:	e68e      	b.n	1001410a <__aeabi_ddiv+0x1fa>
100143ec:	0874      	lsrs	r4, r6, #1
100143ee:	464b      	mov	r3, r9
100143f0:	07f6      	lsls	r6, r6, #31
100143f2:	0035      	movs	r5, r6
100143f4:	085b      	lsrs	r3, r3, #1
100143f6:	431d      	orrs	r5, r3
100143f8:	464b      	mov	r3, r9
100143fa:	07db      	lsls	r3, r3, #31
100143fc:	9302      	str	r3, [sp, #8]
100143fe:	e68b      	b.n	10014118 <__aeabi_ddiv+0x208>
10014400:	4297      	cmp	r7, r2
10014402:	d1ed      	bne.n	100143e0 <__aeabi_ddiv+0x4d0>
10014404:	9903      	ldr	r1, [sp, #12]
10014406:	9c02      	ldr	r4, [sp, #8]
10014408:	42a1      	cmp	r1, r4
1001440a:	d9e5      	bls.n	100143d8 <__aeabi_ddiv+0x4c8>
1001440c:	1a3e      	subs	r6, r7, r0
1001440e:	469b      	mov	fp, r3
10014410:	e6f7      	b.n	10014202 <__aeabi_ddiv+0x2f2>
10014412:	4698      	mov	r8, r3
10014414:	e6ca      	b.n	100141ac <__aeabi_ddiv+0x29c>
10014416:	001e      	movs	r6, r3
10014418:	e6a5      	b.n	10014166 <__aeabi_ddiv+0x256>
1001441a:	42ac      	cmp	r4, r5
1001441c:	d83e      	bhi.n	1001449c <__aeabi_ddiv+0x58c>
1001441e:	d074      	beq.n	1001450a <__aeabi_ddiv+0x5fa>
10014420:	0011      	movs	r1, r2
10014422:	e753      	b.n	100142cc <__aeabi_ddiv+0x3bc>
10014424:	2101      	movs	r1, #1
10014426:	4249      	negs	r1, r1
10014428:	e752      	b.n	100142d0 <__aeabi_ddiv+0x3c0>
1001442a:	001c      	movs	r4, r3
1001442c:	e70e      	b.n	1001424c <__aeabi_ddiv+0x33c>
1001442e:	001e      	movs	r6, r3
10014430:	e72b      	b.n	1001428a <__aeabi_ddiv+0x37a>
10014432:	2d1f      	cmp	r5, #31
10014434:	dc3c      	bgt.n	100144b0 <__aeabi_ddiv+0x5a0>
10014436:	2320      	movs	r3, #32
10014438:	000a      	movs	r2, r1
1001443a:	4658      	mov	r0, fp
1001443c:	1b5b      	subs	r3, r3, r5
1001443e:	4098      	lsls	r0, r3
10014440:	40ea      	lsrs	r2, r5
10014442:	4099      	lsls	r1, r3
10014444:	4302      	orrs	r2, r0
10014446:	1e48      	subs	r0, r1, #1
10014448:	4181      	sbcs	r1, r0
1001444a:	465e      	mov	r6, fp
1001444c:	4311      	orrs	r1, r2
1001444e:	40ee      	lsrs	r6, r5
10014450:	074b      	lsls	r3, r1, #29
10014452:	d009      	beq.n	10014468 <__aeabi_ddiv+0x558>
10014454:	230f      	movs	r3, #15
10014456:	400b      	ands	r3, r1
10014458:	2b04      	cmp	r3, #4
1001445a:	d005      	beq.n	10014468 <__aeabi_ddiv+0x558>
1001445c:	000b      	movs	r3, r1
1001445e:	1d19      	adds	r1, r3, #4
10014460:	4299      	cmp	r1, r3
10014462:	419b      	sbcs	r3, r3
10014464:	425b      	negs	r3, r3
10014466:	18f6      	adds	r6, r6, r3
10014468:	0233      	lsls	r3, r6, #8
1001446a:	d53c      	bpl.n	100144e6 <__aeabi_ddiv+0x5d6>
1001446c:	4653      	mov	r3, sl
1001446e:	2201      	movs	r2, #1
10014470:	2100      	movs	r1, #0
10014472:	401a      	ands	r2, r3
10014474:	2600      	movs	r6, #0
10014476:	2301      	movs	r3, #1
10014478:	4689      	mov	r9, r1
1001447a:	e5af      	b.n	10013fdc <__aeabi_ddiv+0xcc>
1001447c:	2302      	movs	r3, #2
1001447e:	425b      	negs	r3, r3
10014480:	469c      	mov	ip, r3
10014482:	9c03      	ldr	r4, [sp, #12]
10014484:	44e3      	add	fp, ip
10014486:	46a4      	mov	ip, r4
10014488:	9b02      	ldr	r3, [sp, #8]
1001448a:	4463      	add	r3, ip
1001448c:	4698      	mov	r8, r3
1001448e:	45a0      	cmp	r8, r4
10014490:	41b6      	sbcs	r6, r6
10014492:	4276      	negs	r6, r6
10014494:	19f6      	adds	r6, r6, r7
10014496:	9302      	str	r3, [sp, #8]
10014498:	18b2      	adds	r2, r6, r2
1001449a:	e6b1      	b.n	10014200 <__aeabi_ddiv+0x2f0>
1001449c:	9803      	ldr	r0, [sp, #12]
1001449e:	1e8a      	subs	r2, r1, #2
100144a0:	0041      	lsls	r1, r0, #1
100144a2:	4281      	cmp	r1, r0
100144a4:	41b6      	sbcs	r6, r6
100144a6:	4276      	negs	r6, r6
100144a8:	19f6      	adds	r6, r6, r7
100144aa:	19ad      	adds	r5, r5, r6
100144ac:	9103      	str	r1, [sp, #12]
100144ae:	e761      	b.n	10014374 <__aeabi_ddiv+0x464>
100144b0:	221f      	movs	r2, #31
100144b2:	4252      	negs	r2, r2
100144b4:	1ad3      	subs	r3, r2, r3
100144b6:	465a      	mov	r2, fp
100144b8:	40da      	lsrs	r2, r3
100144ba:	0013      	movs	r3, r2
100144bc:	2d20      	cmp	r5, #32
100144be:	d029      	beq.n	10014514 <__aeabi_ddiv+0x604>
100144c0:	2240      	movs	r2, #64	; 0x40
100144c2:	4658      	mov	r0, fp
100144c4:	1b55      	subs	r5, r2, r5
100144c6:	40a8      	lsls	r0, r5
100144c8:	4301      	orrs	r1, r0
100144ca:	1e48      	subs	r0, r1, #1
100144cc:	4181      	sbcs	r1, r0
100144ce:	2007      	movs	r0, #7
100144d0:	430b      	orrs	r3, r1
100144d2:	4018      	ands	r0, r3
100144d4:	2600      	movs	r6, #0
100144d6:	2800      	cmp	r0, #0
100144d8:	d009      	beq.n	100144ee <__aeabi_ddiv+0x5de>
100144da:	220f      	movs	r2, #15
100144dc:	2600      	movs	r6, #0
100144de:	401a      	ands	r2, r3
100144e0:	0019      	movs	r1, r3
100144e2:	2a04      	cmp	r2, #4
100144e4:	d1bb      	bne.n	1001445e <__aeabi_ddiv+0x54e>
100144e6:	000b      	movs	r3, r1
100144e8:	0770      	lsls	r0, r6, #29
100144ea:	0276      	lsls	r6, r6, #9
100144ec:	0b36      	lsrs	r6, r6, #12
100144ee:	08db      	lsrs	r3, r3, #3
100144f0:	4303      	orrs	r3, r0
100144f2:	4699      	mov	r9, r3
100144f4:	2201      	movs	r2, #1
100144f6:	4653      	mov	r3, sl
100144f8:	401a      	ands	r2, r3
100144fa:	2300      	movs	r3, #0
100144fc:	e56e      	b.n	10013fdc <__aeabi_ddiv+0xcc>
100144fe:	9902      	ldr	r1, [sp, #8]
10014500:	428d      	cmp	r5, r1
10014502:	d8bb      	bhi.n	1001447c <__aeabi_ddiv+0x56c>
10014504:	469b      	mov	fp, r3
10014506:	2600      	movs	r6, #0
10014508:	e67b      	b.n	10014202 <__aeabi_ddiv+0x2f2>
1001450a:	9803      	ldr	r0, [sp, #12]
1001450c:	4298      	cmp	r0, r3
1001450e:	d3c5      	bcc.n	1001449c <__aeabi_ddiv+0x58c>
10014510:	0011      	movs	r1, r2
10014512:	e732      	b.n	1001437a <__aeabi_ddiv+0x46a>
10014514:	2000      	movs	r0, #0
10014516:	e7d7      	b.n	100144c8 <__aeabi_ddiv+0x5b8>
10014518:	2680      	movs	r6, #128	; 0x80
1001451a:	465b      	mov	r3, fp
1001451c:	0336      	lsls	r6, r6, #12
1001451e:	431e      	orrs	r6, r3
10014520:	0336      	lsls	r6, r6, #12
10014522:	0b36      	lsrs	r6, r6, #12
10014524:	9a00      	ldr	r2, [sp, #0]
10014526:	4689      	mov	r9, r1
10014528:	4b03      	ldr	r3, [pc, #12]	; (10014538 <__aeabi_ddiv+0x628>)
1001452a:	e557      	b.n	10013fdc <__aeabi_ddiv+0xcc>
1001452c:	000003ff 	.word	0x000003ff
10014530:	feffffff 	.word	0xfeffffff
10014534:	000007fe 	.word	0x000007fe
10014538:	000007ff 	.word	0x000007ff

1001453c <__eqdf2>:
1001453c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001453e:	465f      	mov	r7, fp
10014540:	4656      	mov	r6, sl
10014542:	464d      	mov	r5, r9
10014544:	4644      	mov	r4, r8
10014546:	b4f0      	push	{r4, r5, r6, r7}
10014548:	031f      	lsls	r7, r3, #12
1001454a:	005c      	lsls	r4, r3, #1
1001454c:	0fdb      	lsrs	r3, r3, #31
1001454e:	469a      	mov	sl, r3
10014550:	4b19      	ldr	r3, [pc, #100]	; (100145b8 <__eqdf2+0x7c>)
10014552:	030e      	lsls	r6, r1, #12
10014554:	004d      	lsls	r5, r1, #1
10014556:	0fc9      	lsrs	r1, r1, #31
10014558:	4680      	mov	r8, r0
1001455a:	0b36      	lsrs	r6, r6, #12
1001455c:	0d6d      	lsrs	r5, r5, #21
1001455e:	468b      	mov	fp, r1
10014560:	4691      	mov	r9, r2
10014562:	0b3f      	lsrs	r7, r7, #12
10014564:	0d64      	lsrs	r4, r4, #21
10014566:	429d      	cmp	r5, r3
10014568:	d019      	beq.n	1001459e <__eqdf2+0x62>
1001456a:	4b13      	ldr	r3, [pc, #76]	; (100145b8 <__eqdf2+0x7c>)
1001456c:	429c      	cmp	r4, r3
1001456e:	d01b      	beq.n	100145a8 <__eqdf2+0x6c>
10014570:	2301      	movs	r3, #1
10014572:	42a5      	cmp	r5, r4
10014574:	d006      	beq.n	10014584 <__eqdf2+0x48>
10014576:	0018      	movs	r0, r3
10014578:	bc3c      	pop	{r2, r3, r4, r5}
1001457a:	4690      	mov	r8, r2
1001457c:	4699      	mov	r9, r3
1001457e:	46a2      	mov	sl, r4
10014580:	46ab      	mov	fp, r5
10014582:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014584:	42be      	cmp	r6, r7
10014586:	d1f6      	bne.n	10014576 <__eqdf2+0x3a>
10014588:	45c8      	cmp	r8, r9
1001458a:	d1f4      	bne.n	10014576 <__eqdf2+0x3a>
1001458c:	45d3      	cmp	fp, sl
1001458e:	d010      	beq.n	100145b2 <__eqdf2+0x76>
10014590:	2d00      	cmp	r5, #0
10014592:	d1f0      	bne.n	10014576 <__eqdf2+0x3a>
10014594:	4330      	orrs	r0, r6
10014596:	0003      	movs	r3, r0
10014598:	1e5a      	subs	r2, r3, #1
1001459a:	4193      	sbcs	r3, r2
1001459c:	e7eb      	b.n	10014576 <__eqdf2+0x3a>
1001459e:	0031      	movs	r1, r6
100145a0:	2301      	movs	r3, #1
100145a2:	4301      	orrs	r1, r0
100145a4:	d1e7      	bne.n	10014576 <__eqdf2+0x3a>
100145a6:	e7e0      	b.n	1001456a <__eqdf2+0x2e>
100145a8:	433a      	orrs	r2, r7
100145aa:	2301      	movs	r3, #1
100145ac:	2a00      	cmp	r2, #0
100145ae:	d1e2      	bne.n	10014576 <__eqdf2+0x3a>
100145b0:	e7de      	b.n	10014570 <__eqdf2+0x34>
100145b2:	2300      	movs	r3, #0
100145b4:	e7df      	b.n	10014576 <__eqdf2+0x3a>
100145b6:	46c0      	nop			; (mov r8, r8)
100145b8:	000007ff 	.word	0x000007ff

100145bc <__gedf2>:
100145bc:	b5f0      	push	{r4, r5, r6, r7, lr}
100145be:	465f      	mov	r7, fp
100145c0:	4644      	mov	r4, r8
100145c2:	4656      	mov	r6, sl
100145c4:	464d      	mov	r5, r9
100145c6:	b4f0      	push	{r4, r5, r6, r7}
100145c8:	031f      	lsls	r7, r3, #12
100145ca:	0b3c      	lsrs	r4, r7, #12
100145cc:	4f2c      	ldr	r7, [pc, #176]	; (10014680 <__gedf2+0xc4>)
100145ce:	030e      	lsls	r6, r1, #12
100145d0:	004d      	lsls	r5, r1, #1
100145d2:	46a3      	mov	fp, r4
100145d4:	005c      	lsls	r4, r3, #1
100145d6:	4684      	mov	ip, r0
100145d8:	0b36      	lsrs	r6, r6, #12
100145da:	0d6d      	lsrs	r5, r5, #21
100145dc:	0fc9      	lsrs	r1, r1, #31
100145de:	4690      	mov	r8, r2
100145e0:	0d64      	lsrs	r4, r4, #21
100145e2:	0fdb      	lsrs	r3, r3, #31
100145e4:	42bd      	cmp	r5, r7
100145e6:	d02b      	beq.n	10014640 <__gedf2+0x84>
100145e8:	4f25      	ldr	r7, [pc, #148]	; (10014680 <__gedf2+0xc4>)
100145ea:	42bc      	cmp	r4, r7
100145ec:	d02e      	beq.n	1001464c <__gedf2+0x90>
100145ee:	2d00      	cmp	r5, #0
100145f0:	d10e      	bne.n	10014610 <__gedf2+0x54>
100145f2:	4330      	orrs	r0, r6
100145f4:	0007      	movs	r7, r0
100145f6:	4681      	mov	r9, r0
100145f8:	4278      	negs	r0, r7
100145fa:	4178      	adcs	r0, r7
100145fc:	2c00      	cmp	r4, #0
100145fe:	d117      	bne.n	10014630 <__gedf2+0x74>
10014600:	465f      	mov	r7, fp
10014602:	433a      	orrs	r2, r7
10014604:	d114      	bne.n	10014630 <__gedf2+0x74>
10014606:	464b      	mov	r3, r9
10014608:	2000      	movs	r0, #0
1001460a:	2b00      	cmp	r3, #0
1001460c:	d00a      	beq.n	10014624 <__gedf2+0x68>
1001460e:	e006      	b.n	1001461e <__gedf2+0x62>
10014610:	2c00      	cmp	r4, #0
10014612:	d102      	bne.n	1001461a <__gedf2+0x5e>
10014614:	4658      	mov	r0, fp
10014616:	4302      	orrs	r2, r0
10014618:	d001      	beq.n	1001461e <__gedf2+0x62>
1001461a:	4299      	cmp	r1, r3
1001461c:	d01a      	beq.n	10014654 <__gedf2+0x98>
1001461e:	2301      	movs	r3, #1
10014620:	4248      	negs	r0, r1
10014622:	4318      	orrs	r0, r3
10014624:	bc3c      	pop	{r2, r3, r4, r5}
10014626:	4690      	mov	r8, r2
10014628:	4699      	mov	r9, r3
1001462a:	46a2      	mov	sl, r4
1001462c:	46ab      	mov	fp, r5
1001462e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014630:	2800      	cmp	r0, #0
10014632:	d0f2      	beq.n	1001461a <__gedf2+0x5e>
10014634:	4258      	negs	r0, r3
10014636:	4158      	adcs	r0, r3
10014638:	2201      	movs	r2, #1
1001463a:	4240      	negs	r0, r0
1001463c:	4310      	orrs	r0, r2
1001463e:	e7f1      	b.n	10014624 <__gedf2+0x68>
10014640:	0037      	movs	r7, r6
10014642:	4307      	orrs	r7, r0
10014644:	d0d0      	beq.n	100145e8 <__gedf2+0x2c>
10014646:	2002      	movs	r0, #2
10014648:	4240      	negs	r0, r0
1001464a:	e7eb      	b.n	10014624 <__gedf2+0x68>
1001464c:	465f      	mov	r7, fp
1001464e:	4317      	orrs	r7, r2
10014650:	d0cd      	beq.n	100145ee <__gedf2+0x32>
10014652:	e7f8      	b.n	10014646 <__gedf2+0x8a>
10014654:	42a5      	cmp	r5, r4
10014656:	dce2      	bgt.n	1001461e <__gedf2+0x62>
10014658:	db05      	blt.n	10014666 <__gedf2+0xaa>
1001465a:	455e      	cmp	r6, fp
1001465c:	d8df      	bhi.n	1001461e <__gedf2+0x62>
1001465e:	d008      	beq.n	10014672 <__gedf2+0xb6>
10014660:	2000      	movs	r0, #0
10014662:	455e      	cmp	r6, fp
10014664:	d2de      	bcs.n	10014624 <__gedf2+0x68>
10014666:	4248      	negs	r0, r1
10014668:	4148      	adcs	r0, r1
1001466a:	2301      	movs	r3, #1
1001466c:	4240      	negs	r0, r0
1001466e:	4318      	orrs	r0, r3
10014670:	e7d8      	b.n	10014624 <__gedf2+0x68>
10014672:	45c4      	cmp	ip, r8
10014674:	d8d3      	bhi.n	1001461e <__gedf2+0x62>
10014676:	2000      	movs	r0, #0
10014678:	45c4      	cmp	ip, r8
1001467a:	d3f4      	bcc.n	10014666 <__gedf2+0xaa>
1001467c:	e7d2      	b.n	10014624 <__gedf2+0x68>
1001467e:	46c0      	nop			; (mov r8, r8)
10014680:	000007ff 	.word	0x000007ff

10014684 <__ledf2>:
10014684:	b5f0      	push	{r4, r5, r6, r7, lr}
10014686:	465f      	mov	r7, fp
10014688:	464d      	mov	r5, r9
1001468a:	4644      	mov	r4, r8
1001468c:	4656      	mov	r6, sl
1001468e:	b4f0      	push	{r4, r5, r6, r7}
10014690:	031c      	lsls	r4, r3, #12
10014692:	0b24      	lsrs	r4, r4, #12
10014694:	46a4      	mov	ip, r4
10014696:	4c2f      	ldr	r4, [pc, #188]	; (10014754 <__ledf2+0xd0>)
10014698:	030f      	lsls	r7, r1, #12
1001469a:	004d      	lsls	r5, r1, #1
1001469c:	005e      	lsls	r6, r3, #1
1001469e:	0fc9      	lsrs	r1, r1, #31
100146a0:	4680      	mov	r8, r0
100146a2:	0b3f      	lsrs	r7, r7, #12
100146a4:	0d6d      	lsrs	r5, r5, #21
100146a6:	468b      	mov	fp, r1
100146a8:	4691      	mov	r9, r2
100146aa:	0d76      	lsrs	r6, r6, #21
100146ac:	0fdb      	lsrs	r3, r3, #31
100146ae:	42a5      	cmp	r5, r4
100146b0:	d020      	beq.n	100146f4 <__ledf2+0x70>
100146b2:	4c28      	ldr	r4, [pc, #160]	; (10014754 <__ledf2+0xd0>)
100146b4:	42a6      	cmp	r6, r4
100146b6:	d022      	beq.n	100146fe <__ledf2+0x7a>
100146b8:	2d00      	cmp	r5, #0
100146ba:	d112      	bne.n	100146e2 <__ledf2+0x5e>
100146bc:	4338      	orrs	r0, r7
100146be:	4244      	negs	r4, r0
100146c0:	4144      	adcs	r4, r0
100146c2:	2e00      	cmp	r6, #0
100146c4:	d020      	beq.n	10014708 <__ledf2+0x84>
100146c6:	2c00      	cmp	r4, #0
100146c8:	d00d      	beq.n	100146e6 <__ledf2+0x62>
100146ca:	425c      	negs	r4, r3
100146cc:	4163      	adcs	r3, r4
100146ce:	2401      	movs	r4, #1
100146d0:	425b      	negs	r3, r3
100146d2:	431c      	orrs	r4, r3
100146d4:	0020      	movs	r0, r4
100146d6:	bc3c      	pop	{r2, r3, r4, r5}
100146d8:	4690      	mov	r8, r2
100146da:	4699      	mov	r9, r3
100146dc:	46a2      	mov	sl, r4
100146de:	46ab      	mov	fp, r5
100146e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100146e2:	2e00      	cmp	r6, #0
100146e4:	d017      	beq.n	10014716 <__ledf2+0x92>
100146e6:	455b      	cmp	r3, fp
100146e8:	d019      	beq.n	1001471e <__ledf2+0x9a>
100146ea:	465b      	mov	r3, fp
100146ec:	425c      	negs	r4, r3
100146ee:	2301      	movs	r3, #1
100146f0:	431c      	orrs	r4, r3
100146f2:	e7ef      	b.n	100146d4 <__ledf2+0x50>
100146f4:	0039      	movs	r1, r7
100146f6:	2402      	movs	r4, #2
100146f8:	4301      	orrs	r1, r0
100146fa:	d1eb      	bne.n	100146d4 <__ledf2+0x50>
100146fc:	e7d9      	b.n	100146b2 <__ledf2+0x2e>
100146fe:	4661      	mov	r1, ip
10014700:	2402      	movs	r4, #2
10014702:	4311      	orrs	r1, r2
10014704:	d1e6      	bne.n	100146d4 <__ledf2+0x50>
10014706:	e7d7      	b.n	100146b8 <__ledf2+0x34>
10014708:	4661      	mov	r1, ip
1001470a:	430a      	orrs	r2, r1
1001470c:	d1db      	bne.n	100146c6 <__ledf2+0x42>
1001470e:	2400      	movs	r4, #0
10014710:	2800      	cmp	r0, #0
10014712:	d0df      	beq.n	100146d4 <__ledf2+0x50>
10014714:	e7e9      	b.n	100146ea <__ledf2+0x66>
10014716:	4661      	mov	r1, ip
10014718:	430a      	orrs	r2, r1
1001471a:	d1e4      	bne.n	100146e6 <__ledf2+0x62>
1001471c:	e7e5      	b.n	100146ea <__ledf2+0x66>
1001471e:	42b5      	cmp	r5, r6
10014720:	dd03      	ble.n	1001472a <__ledf2+0xa6>
10014722:	2201      	movs	r2, #1
10014724:	425c      	negs	r4, r3
10014726:	4314      	orrs	r4, r2
10014728:	e7d4      	b.n	100146d4 <__ledf2+0x50>
1001472a:	42b5      	cmp	r5, r6
1001472c:	dbcd      	blt.n	100146ca <__ledf2+0x46>
1001472e:	4567      	cmp	r7, ip
10014730:	d8db      	bhi.n	100146ea <__ledf2+0x66>
10014732:	d009      	beq.n	10014748 <__ledf2+0xc4>
10014734:	2400      	movs	r4, #0
10014736:	4567      	cmp	r7, ip
10014738:	d2cc      	bcs.n	100146d4 <__ledf2+0x50>
1001473a:	4659      	mov	r1, fp
1001473c:	424c      	negs	r4, r1
1001473e:	4161      	adcs	r1, r4
10014740:	2401      	movs	r4, #1
10014742:	4249      	negs	r1, r1
10014744:	430c      	orrs	r4, r1
10014746:	e7c5      	b.n	100146d4 <__ledf2+0x50>
10014748:	45c8      	cmp	r8, r9
1001474a:	d8ce      	bhi.n	100146ea <__ledf2+0x66>
1001474c:	2400      	movs	r4, #0
1001474e:	45c8      	cmp	r8, r9
10014750:	d3f3      	bcc.n	1001473a <__ledf2+0xb6>
10014752:	e7bf      	b.n	100146d4 <__ledf2+0x50>
10014754:	000007ff 	.word	0x000007ff

10014758 <__aeabi_dmul>:
10014758:	b5f0      	push	{r4, r5, r6, r7, lr}
1001475a:	465f      	mov	r7, fp
1001475c:	4656      	mov	r6, sl
1001475e:	464d      	mov	r5, r9
10014760:	4644      	mov	r4, r8
10014762:	b4f0      	push	{r4, r5, r6, r7}
10014764:	030d      	lsls	r5, r1, #12
10014766:	4699      	mov	r9, r3
10014768:	004e      	lsls	r6, r1, #1
1001476a:	0b2b      	lsrs	r3, r5, #12
1001476c:	b087      	sub	sp, #28
1001476e:	0007      	movs	r7, r0
10014770:	4692      	mov	sl, r2
10014772:	4680      	mov	r8, r0
10014774:	469b      	mov	fp, r3
10014776:	0d76      	lsrs	r6, r6, #21
10014778:	0fcc      	lsrs	r4, r1, #31
1001477a:	2e00      	cmp	r6, #0
1001477c:	d069      	beq.n	10014852 <__aeabi_dmul+0xfa>
1001477e:	4b6d      	ldr	r3, [pc, #436]	; (10014934 <__aeabi_dmul+0x1dc>)
10014780:	429e      	cmp	r6, r3
10014782:	d035      	beq.n	100147f0 <__aeabi_dmul+0x98>
10014784:	465b      	mov	r3, fp
10014786:	2280      	movs	r2, #128	; 0x80
10014788:	00dd      	lsls	r5, r3, #3
1001478a:	0412      	lsls	r2, r2, #16
1001478c:	0f43      	lsrs	r3, r0, #29
1001478e:	4313      	orrs	r3, r2
10014790:	432b      	orrs	r3, r5
10014792:	469b      	mov	fp, r3
10014794:	00c3      	lsls	r3, r0, #3
10014796:	4698      	mov	r8, r3
10014798:	4b67      	ldr	r3, [pc, #412]	; (10014938 <__aeabi_dmul+0x1e0>)
1001479a:	2700      	movs	r7, #0
1001479c:	469c      	mov	ip, r3
1001479e:	2300      	movs	r3, #0
100147a0:	4466      	add	r6, ip
100147a2:	9301      	str	r3, [sp, #4]
100147a4:	464a      	mov	r2, r9
100147a6:	0315      	lsls	r5, r2, #12
100147a8:	0050      	lsls	r0, r2, #1
100147aa:	0fd2      	lsrs	r2, r2, #31
100147ac:	4653      	mov	r3, sl
100147ae:	0b2d      	lsrs	r5, r5, #12
100147b0:	0d40      	lsrs	r0, r0, #21
100147b2:	4691      	mov	r9, r2
100147b4:	d100      	bne.n	100147b8 <__aeabi_dmul+0x60>
100147b6:	e076      	b.n	100148a6 <__aeabi_dmul+0x14e>
100147b8:	4a5e      	ldr	r2, [pc, #376]	; (10014934 <__aeabi_dmul+0x1dc>)
100147ba:	4290      	cmp	r0, r2
100147bc:	d06c      	beq.n	10014898 <__aeabi_dmul+0x140>
100147be:	2280      	movs	r2, #128	; 0x80
100147c0:	0f5b      	lsrs	r3, r3, #29
100147c2:	0412      	lsls	r2, r2, #16
100147c4:	4313      	orrs	r3, r2
100147c6:	4a5c      	ldr	r2, [pc, #368]	; (10014938 <__aeabi_dmul+0x1e0>)
100147c8:	00ed      	lsls	r5, r5, #3
100147ca:	4694      	mov	ip, r2
100147cc:	431d      	orrs	r5, r3
100147ce:	4653      	mov	r3, sl
100147d0:	2200      	movs	r2, #0
100147d2:	00db      	lsls	r3, r3, #3
100147d4:	4460      	add	r0, ip
100147d6:	4649      	mov	r1, r9
100147d8:	1836      	adds	r6, r6, r0
100147da:	1c70      	adds	r0, r6, #1
100147dc:	4061      	eors	r1, r4
100147de:	9002      	str	r0, [sp, #8]
100147e0:	4317      	orrs	r7, r2
100147e2:	2f0f      	cmp	r7, #15
100147e4:	d900      	bls.n	100147e8 <__aeabi_dmul+0x90>
100147e6:	e0af      	b.n	10014948 <__aeabi_dmul+0x1f0>
100147e8:	4854      	ldr	r0, [pc, #336]	; (1001493c <__aeabi_dmul+0x1e4>)
100147ea:	00bf      	lsls	r7, r7, #2
100147ec:	59c7      	ldr	r7, [r0, r7]
100147ee:	46bf      	mov	pc, r7
100147f0:	465b      	mov	r3, fp
100147f2:	431f      	orrs	r7, r3
100147f4:	d000      	beq.n	100147f8 <__aeabi_dmul+0xa0>
100147f6:	e088      	b.n	1001490a <__aeabi_dmul+0x1b2>
100147f8:	2300      	movs	r3, #0
100147fa:	469b      	mov	fp, r3
100147fc:	4698      	mov	r8, r3
100147fe:	3302      	adds	r3, #2
10014800:	2708      	movs	r7, #8
10014802:	9301      	str	r3, [sp, #4]
10014804:	e7ce      	b.n	100147a4 <__aeabi_dmul+0x4c>
10014806:	4649      	mov	r1, r9
10014808:	2a02      	cmp	r2, #2
1001480a:	d06a      	beq.n	100148e2 <__aeabi_dmul+0x18a>
1001480c:	2a03      	cmp	r2, #3
1001480e:	d100      	bne.n	10014812 <__aeabi_dmul+0xba>
10014810:	e209      	b.n	10014c26 <__aeabi_dmul+0x4ce>
10014812:	2a01      	cmp	r2, #1
10014814:	d000      	beq.n	10014818 <__aeabi_dmul+0xc0>
10014816:	e1bb      	b.n	10014b90 <__aeabi_dmul+0x438>
10014818:	4011      	ands	r1, r2
1001481a:	2200      	movs	r2, #0
1001481c:	2300      	movs	r3, #0
1001481e:	2500      	movs	r5, #0
10014820:	4690      	mov	r8, r2
10014822:	b2cc      	uxtb	r4, r1
10014824:	2100      	movs	r1, #0
10014826:	032d      	lsls	r5, r5, #12
10014828:	0d0a      	lsrs	r2, r1, #20
1001482a:	0512      	lsls	r2, r2, #20
1001482c:	0b2d      	lsrs	r5, r5, #12
1001482e:	4315      	orrs	r5, r2
10014830:	4a43      	ldr	r2, [pc, #268]	; (10014940 <__aeabi_dmul+0x1e8>)
10014832:	051b      	lsls	r3, r3, #20
10014834:	4015      	ands	r5, r2
10014836:	431d      	orrs	r5, r3
10014838:	006d      	lsls	r5, r5, #1
1001483a:	07e4      	lsls	r4, r4, #31
1001483c:	086d      	lsrs	r5, r5, #1
1001483e:	4325      	orrs	r5, r4
10014840:	4640      	mov	r0, r8
10014842:	0029      	movs	r1, r5
10014844:	b007      	add	sp, #28
10014846:	bc3c      	pop	{r2, r3, r4, r5}
10014848:	4690      	mov	r8, r2
1001484a:	4699      	mov	r9, r3
1001484c:	46a2      	mov	sl, r4
1001484e:	46ab      	mov	fp, r5
10014850:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014852:	4303      	orrs	r3, r0
10014854:	d052      	beq.n	100148fc <__aeabi_dmul+0x1a4>
10014856:	465b      	mov	r3, fp
10014858:	2b00      	cmp	r3, #0
1001485a:	d100      	bne.n	1001485e <__aeabi_dmul+0x106>
1001485c:	e18a      	b.n	10014b74 <__aeabi_dmul+0x41c>
1001485e:	4658      	mov	r0, fp
10014860:	f000 fef8 	bl	10015654 <__clzsi2>
10014864:	0003      	movs	r3, r0
10014866:	3b0b      	subs	r3, #11
10014868:	2b1c      	cmp	r3, #28
1001486a:	dd00      	ble.n	1001486e <__aeabi_dmul+0x116>
1001486c:	e17b      	b.n	10014b66 <__aeabi_dmul+0x40e>
1001486e:	221d      	movs	r2, #29
10014870:	1ad3      	subs	r3, r2, r3
10014872:	003a      	movs	r2, r7
10014874:	0001      	movs	r1, r0
10014876:	465d      	mov	r5, fp
10014878:	40da      	lsrs	r2, r3
1001487a:	3908      	subs	r1, #8
1001487c:	408d      	lsls	r5, r1
1001487e:	0013      	movs	r3, r2
10014880:	408f      	lsls	r7, r1
10014882:	432b      	orrs	r3, r5
10014884:	469b      	mov	fp, r3
10014886:	46b8      	mov	r8, r7
10014888:	4b2e      	ldr	r3, [pc, #184]	; (10014944 <__aeabi_dmul+0x1ec>)
1001488a:	2700      	movs	r7, #0
1001488c:	469c      	mov	ip, r3
1001488e:	2300      	movs	r3, #0
10014890:	4460      	add	r0, ip
10014892:	4246      	negs	r6, r0
10014894:	9301      	str	r3, [sp, #4]
10014896:	e785      	b.n	100147a4 <__aeabi_dmul+0x4c>
10014898:	4652      	mov	r2, sl
1001489a:	432a      	orrs	r2, r5
1001489c:	d12c      	bne.n	100148f8 <__aeabi_dmul+0x1a0>
1001489e:	2500      	movs	r5, #0
100148a0:	2300      	movs	r3, #0
100148a2:	2202      	movs	r2, #2
100148a4:	e797      	b.n	100147d6 <__aeabi_dmul+0x7e>
100148a6:	4652      	mov	r2, sl
100148a8:	432a      	orrs	r2, r5
100148aa:	d021      	beq.n	100148f0 <__aeabi_dmul+0x198>
100148ac:	2d00      	cmp	r5, #0
100148ae:	d100      	bne.n	100148b2 <__aeabi_dmul+0x15a>
100148b0:	e154      	b.n	10014b5c <__aeabi_dmul+0x404>
100148b2:	0028      	movs	r0, r5
100148b4:	f000 fece 	bl	10015654 <__clzsi2>
100148b8:	0003      	movs	r3, r0
100148ba:	3b0b      	subs	r3, #11
100148bc:	2b1c      	cmp	r3, #28
100148be:	dd00      	ble.n	100148c2 <__aeabi_dmul+0x16a>
100148c0:	e146      	b.n	10014b50 <__aeabi_dmul+0x3f8>
100148c2:	211d      	movs	r1, #29
100148c4:	1acb      	subs	r3, r1, r3
100148c6:	4651      	mov	r1, sl
100148c8:	0002      	movs	r2, r0
100148ca:	40d9      	lsrs	r1, r3
100148cc:	4653      	mov	r3, sl
100148ce:	3a08      	subs	r2, #8
100148d0:	4095      	lsls	r5, r2
100148d2:	4093      	lsls	r3, r2
100148d4:	430d      	orrs	r5, r1
100148d6:	4a1b      	ldr	r2, [pc, #108]	; (10014944 <__aeabi_dmul+0x1ec>)
100148d8:	4694      	mov	ip, r2
100148da:	4460      	add	r0, ip
100148dc:	4240      	negs	r0, r0
100148de:	2200      	movs	r2, #0
100148e0:	e779      	b.n	100147d6 <__aeabi_dmul+0x7e>
100148e2:	2401      	movs	r4, #1
100148e4:	2200      	movs	r2, #0
100148e6:	400c      	ands	r4, r1
100148e8:	4b12      	ldr	r3, [pc, #72]	; (10014934 <__aeabi_dmul+0x1dc>)
100148ea:	2500      	movs	r5, #0
100148ec:	4690      	mov	r8, r2
100148ee:	e799      	b.n	10014824 <__aeabi_dmul+0xcc>
100148f0:	2500      	movs	r5, #0
100148f2:	2300      	movs	r3, #0
100148f4:	2201      	movs	r2, #1
100148f6:	e76e      	b.n	100147d6 <__aeabi_dmul+0x7e>
100148f8:	2203      	movs	r2, #3
100148fa:	e76c      	b.n	100147d6 <__aeabi_dmul+0x7e>
100148fc:	2300      	movs	r3, #0
100148fe:	469b      	mov	fp, r3
10014900:	4698      	mov	r8, r3
10014902:	3301      	adds	r3, #1
10014904:	2704      	movs	r7, #4
10014906:	9301      	str	r3, [sp, #4]
10014908:	e74c      	b.n	100147a4 <__aeabi_dmul+0x4c>
1001490a:	2303      	movs	r3, #3
1001490c:	270c      	movs	r7, #12
1001490e:	9301      	str	r3, [sp, #4]
10014910:	e748      	b.n	100147a4 <__aeabi_dmul+0x4c>
10014912:	2300      	movs	r3, #0
10014914:	2580      	movs	r5, #128	; 0x80
10014916:	4698      	mov	r8, r3
10014918:	2400      	movs	r4, #0
1001491a:	032d      	lsls	r5, r5, #12
1001491c:	4b05      	ldr	r3, [pc, #20]	; (10014934 <__aeabi_dmul+0x1dc>)
1001491e:	e781      	b.n	10014824 <__aeabi_dmul+0xcc>
10014920:	465d      	mov	r5, fp
10014922:	4643      	mov	r3, r8
10014924:	9a01      	ldr	r2, [sp, #4]
10014926:	e76f      	b.n	10014808 <__aeabi_dmul+0xb0>
10014928:	465d      	mov	r5, fp
1001492a:	4643      	mov	r3, r8
1001492c:	0021      	movs	r1, r4
1001492e:	9a01      	ldr	r2, [sp, #4]
10014930:	e76a      	b.n	10014808 <__aeabi_dmul+0xb0>
10014932:	46c0      	nop			; (mov r8, r8)
10014934:	000007ff 	.word	0x000007ff
10014938:	fffffc01 	.word	0xfffffc01
1001493c:	10018300 	.word	0x10018300
10014940:	800fffff 	.word	0x800fffff
10014944:	000003f3 	.word	0x000003f3
10014948:	4642      	mov	r2, r8
1001494a:	0c12      	lsrs	r2, r2, #16
1001494c:	4691      	mov	r9, r2
1001494e:	0c1a      	lsrs	r2, r3, #16
10014950:	4694      	mov	ip, r2
10014952:	4642      	mov	r2, r8
10014954:	0417      	lsls	r7, r2, #16
10014956:	464a      	mov	r2, r9
10014958:	041b      	lsls	r3, r3, #16
1001495a:	0c1b      	lsrs	r3, r3, #16
1001495c:	435a      	muls	r2, r3
1001495e:	4660      	mov	r0, ip
10014960:	4690      	mov	r8, r2
10014962:	464a      	mov	r2, r9
10014964:	4342      	muls	r2, r0
10014966:	0010      	movs	r0, r2
10014968:	9203      	str	r2, [sp, #12]
1001496a:	4662      	mov	r2, ip
1001496c:	001c      	movs	r4, r3
1001496e:	0c3f      	lsrs	r7, r7, #16
10014970:	437a      	muls	r2, r7
10014972:	437c      	muls	r4, r7
10014974:	4442      	add	r2, r8
10014976:	9201      	str	r2, [sp, #4]
10014978:	0c22      	lsrs	r2, r4, #16
1001497a:	4692      	mov	sl, r2
1001497c:	9a01      	ldr	r2, [sp, #4]
1001497e:	4452      	add	r2, sl
10014980:	4590      	cmp	r8, r2
10014982:	d906      	bls.n	10014992 <__aeabi_dmul+0x23a>
10014984:	4682      	mov	sl, r0
10014986:	2080      	movs	r0, #128	; 0x80
10014988:	0240      	lsls	r0, r0, #9
1001498a:	4680      	mov	r8, r0
1001498c:	44c2      	add	sl, r8
1001498e:	4650      	mov	r0, sl
10014990:	9003      	str	r0, [sp, #12]
10014992:	0c10      	lsrs	r0, r2, #16
10014994:	9004      	str	r0, [sp, #16]
10014996:	4648      	mov	r0, r9
10014998:	0424      	lsls	r4, r4, #16
1001499a:	0c24      	lsrs	r4, r4, #16
1001499c:	0412      	lsls	r2, r2, #16
1001499e:	1912      	adds	r2, r2, r4
100149a0:	9205      	str	r2, [sp, #20]
100149a2:	0c2a      	lsrs	r2, r5, #16
100149a4:	042d      	lsls	r5, r5, #16
100149a6:	0c2d      	lsrs	r5, r5, #16
100149a8:	4368      	muls	r0, r5
100149aa:	002c      	movs	r4, r5
100149ac:	4682      	mov	sl, r0
100149ae:	4648      	mov	r0, r9
100149b0:	437c      	muls	r4, r7
100149b2:	4350      	muls	r0, r2
100149b4:	4681      	mov	r9, r0
100149b6:	0c20      	lsrs	r0, r4, #16
100149b8:	4680      	mov	r8, r0
100149ba:	4357      	muls	r7, r2
100149bc:	4457      	add	r7, sl
100149be:	4447      	add	r7, r8
100149c0:	45ba      	cmp	sl, r7
100149c2:	d903      	bls.n	100149cc <__aeabi_dmul+0x274>
100149c4:	2080      	movs	r0, #128	; 0x80
100149c6:	0240      	lsls	r0, r0, #9
100149c8:	4680      	mov	r8, r0
100149ca:	44c1      	add	r9, r8
100149cc:	0c38      	lsrs	r0, r7, #16
100149ce:	043f      	lsls	r7, r7, #16
100149d0:	46b8      	mov	r8, r7
100149d2:	4448      	add	r0, r9
100149d4:	0424      	lsls	r4, r4, #16
100149d6:	0c24      	lsrs	r4, r4, #16
100149d8:	9001      	str	r0, [sp, #4]
100149da:	9804      	ldr	r0, [sp, #16]
100149dc:	44a0      	add	r8, r4
100149de:	4440      	add	r0, r8
100149e0:	9004      	str	r0, [sp, #16]
100149e2:	4658      	mov	r0, fp
100149e4:	0c00      	lsrs	r0, r0, #16
100149e6:	4681      	mov	r9, r0
100149e8:	4658      	mov	r0, fp
100149ea:	0404      	lsls	r4, r0, #16
100149ec:	0c20      	lsrs	r0, r4, #16
100149ee:	4682      	mov	sl, r0
100149f0:	0007      	movs	r7, r0
100149f2:	4648      	mov	r0, r9
100149f4:	435f      	muls	r7, r3
100149f6:	464c      	mov	r4, r9
100149f8:	4343      	muls	r3, r0
100149fa:	4660      	mov	r0, ip
100149fc:	4360      	muls	r0, r4
100149fe:	4664      	mov	r4, ip
10014a00:	4683      	mov	fp, r0
10014a02:	4650      	mov	r0, sl
10014a04:	4344      	muls	r4, r0
10014a06:	0c38      	lsrs	r0, r7, #16
10014a08:	4684      	mov	ip, r0
10014a0a:	18e4      	adds	r4, r4, r3
10014a0c:	4464      	add	r4, ip
10014a0e:	42a3      	cmp	r3, r4
10014a10:	d903      	bls.n	10014a1a <__aeabi_dmul+0x2c2>
10014a12:	2380      	movs	r3, #128	; 0x80
10014a14:	025b      	lsls	r3, r3, #9
10014a16:	469c      	mov	ip, r3
10014a18:	44e3      	add	fp, ip
10014a1a:	4648      	mov	r0, r9
10014a1c:	043f      	lsls	r7, r7, #16
10014a1e:	0c23      	lsrs	r3, r4, #16
10014a20:	0c3f      	lsrs	r7, r7, #16
10014a22:	0424      	lsls	r4, r4, #16
10014a24:	19e4      	adds	r4, r4, r7
10014a26:	4657      	mov	r7, sl
10014a28:	4368      	muls	r0, r5
10014a2a:	436f      	muls	r7, r5
10014a2c:	4684      	mov	ip, r0
10014a2e:	464d      	mov	r5, r9
10014a30:	4650      	mov	r0, sl
10014a32:	4355      	muls	r5, r2
10014a34:	4342      	muls	r2, r0
10014a36:	0c38      	lsrs	r0, r7, #16
10014a38:	4681      	mov	r9, r0
10014a3a:	4462      	add	r2, ip
10014a3c:	444a      	add	r2, r9
10014a3e:	445b      	add	r3, fp
10014a40:	4594      	cmp	ip, r2
10014a42:	d903      	bls.n	10014a4c <__aeabi_dmul+0x2f4>
10014a44:	2080      	movs	r0, #128	; 0x80
10014a46:	0240      	lsls	r0, r0, #9
10014a48:	4684      	mov	ip, r0
10014a4a:	4465      	add	r5, ip
10014a4c:	9803      	ldr	r0, [sp, #12]
10014a4e:	043f      	lsls	r7, r7, #16
10014a50:	4683      	mov	fp, r0
10014a52:	9804      	ldr	r0, [sp, #16]
10014a54:	0c3f      	lsrs	r7, r7, #16
10014a56:	4684      	mov	ip, r0
10014a58:	44e3      	add	fp, ip
10014a5a:	45c3      	cmp	fp, r8
10014a5c:	4180      	sbcs	r0, r0
10014a5e:	4240      	negs	r0, r0
10014a60:	4682      	mov	sl, r0
10014a62:	0410      	lsls	r0, r2, #16
10014a64:	4684      	mov	ip, r0
10014a66:	9801      	ldr	r0, [sp, #4]
10014a68:	4467      	add	r7, ip
10014a6a:	4684      	mov	ip, r0
10014a6c:	4467      	add	r7, ip
10014a6e:	44a3      	add	fp, r4
10014a70:	46bc      	mov	ip, r7
10014a72:	45a3      	cmp	fp, r4
10014a74:	41a4      	sbcs	r4, r4
10014a76:	4699      	mov	r9, r3
10014a78:	44d4      	add	ip, sl
10014a7a:	4264      	negs	r4, r4
10014a7c:	4287      	cmp	r7, r0
10014a7e:	41bf      	sbcs	r7, r7
10014a80:	45d4      	cmp	ip, sl
10014a82:	4180      	sbcs	r0, r0
10014a84:	44e1      	add	r9, ip
10014a86:	46a0      	mov	r8, r4
10014a88:	4599      	cmp	r9, r3
10014a8a:	419b      	sbcs	r3, r3
10014a8c:	427f      	negs	r7, r7
10014a8e:	4240      	negs	r0, r0
10014a90:	44c8      	add	r8, r9
10014a92:	4307      	orrs	r7, r0
10014a94:	0c12      	lsrs	r2, r2, #16
10014a96:	18ba      	adds	r2, r7, r2
10014a98:	45a0      	cmp	r8, r4
10014a9a:	41a4      	sbcs	r4, r4
10014a9c:	425f      	negs	r7, r3
10014a9e:	003b      	movs	r3, r7
10014aa0:	4264      	negs	r4, r4
10014aa2:	4323      	orrs	r3, r4
10014aa4:	18d7      	adds	r7, r2, r3
10014aa6:	4643      	mov	r3, r8
10014aa8:	197d      	adds	r5, r7, r5
10014aaa:	0ddb      	lsrs	r3, r3, #23
10014aac:	026d      	lsls	r5, r5, #9
10014aae:	431d      	orrs	r5, r3
10014ab0:	465b      	mov	r3, fp
10014ab2:	025a      	lsls	r2, r3, #9
10014ab4:	9b05      	ldr	r3, [sp, #20]
10014ab6:	431a      	orrs	r2, r3
10014ab8:	1e53      	subs	r3, r2, #1
10014aba:	419a      	sbcs	r2, r3
10014abc:	465b      	mov	r3, fp
10014abe:	0ddb      	lsrs	r3, r3, #23
10014ac0:	431a      	orrs	r2, r3
10014ac2:	4643      	mov	r3, r8
10014ac4:	025b      	lsls	r3, r3, #9
10014ac6:	4313      	orrs	r3, r2
10014ac8:	01ea      	lsls	r2, r5, #7
10014aca:	d507      	bpl.n	10014adc <__aeabi_dmul+0x384>
10014acc:	2201      	movs	r2, #1
10014ace:	085c      	lsrs	r4, r3, #1
10014ad0:	4013      	ands	r3, r2
10014ad2:	4323      	orrs	r3, r4
10014ad4:	07ea      	lsls	r2, r5, #31
10014ad6:	9e02      	ldr	r6, [sp, #8]
10014ad8:	4313      	orrs	r3, r2
10014ada:	086d      	lsrs	r5, r5, #1
10014adc:	4a57      	ldr	r2, [pc, #348]	; (10014c3c <__aeabi_dmul+0x4e4>)
10014ade:	18b2      	adds	r2, r6, r2
10014ae0:	2a00      	cmp	r2, #0
10014ae2:	dd4b      	ble.n	10014b7c <__aeabi_dmul+0x424>
10014ae4:	0758      	lsls	r0, r3, #29
10014ae6:	d009      	beq.n	10014afc <__aeabi_dmul+0x3a4>
10014ae8:	200f      	movs	r0, #15
10014aea:	4018      	ands	r0, r3
10014aec:	2804      	cmp	r0, #4
10014aee:	d005      	beq.n	10014afc <__aeabi_dmul+0x3a4>
10014af0:	1d18      	adds	r0, r3, #4
10014af2:	4298      	cmp	r0, r3
10014af4:	419b      	sbcs	r3, r3
10014af6:	425b      	negs	r3, r3
10014af8:	18ed      	adds	r5, r5, r3
10014afa:	0003      	movs	r3, r0
10014afc:	01e8      	lsls	r0, r5, #7
10014afe:	d504      	bpl.n	10014b0a <__aeabi_dmul+0x3b2>
10014b00:	4a4f      	ldr	r2, [pc, #316]	; (10014c40 <__aeabi_dmul+0x4e8>)
10014b02:	4015      	ands	r5, r2
10014b04:	2280      	movs	r2, #128	; 0x80
10014b06:	00d2      	lsls	r2, r2, #3
10014b08:	18b2      	adds	r2, r6, r2
10014b0a:	484e      	ldr	r0, [pc, #312]	; (10014c44 <__aeabi_dmul+0x4ec>)
10014b0c:	4282      	cmp	r2, r0
10014b0e:	dd00      	ble.n	10014b12 <__aeabi_dmul+0x3ba>
10014b10:	e6e7      	b.n	100148e2 <__aeabi_dmul+0x18a>
10014b12:	2401      	movs	r4, #1
10014b14:	08db      	lsrs	r3, r3, #3
10014b16:	0768      	lsls	r0, r5, #29
10014b18:	4318      	orrs	r0, r3
10014b1a:	026d      	lsls	r5, r5, #9
10014b1c:	0553      	lsls	r3, r2, #21
10014b1e:	4680      	mov	r8, r0
10014b20:	0b2d      	lsrs	r5, r5, #12
10014b22:	0d5b      	lsrs	r3, r3, #21
10014b24:	400c      	ands	r4, r1
10014b26:	e67d      	b.n	10014824 <__aeabi_dmul+0xcc>
10014b28:	2280      	movs	r2, #128	; 0x80
10014b2a:	4659      	mov	r1, fp
10014b2c:	0312      	lsls	r2, r2, #12
10014b2e:	4211      	tst	r1, r2
10014b30:	d008      	beq.n	10014b44 <__aeabi_dmul+0x3ec>
10014b32:	4215      	tst	r5, r2
10014b34:	d106      	bne.n	10014b44 <__aeabi_dmul+0x3ec>
10014b36:	4315      	orrs	r5, r2
10014b38:	032d      	lsls	r5, r5, #12
10014b3a:	4698      	mov	r8, r3
10014b3c:	0b2d      	lsrs	r5, r5, #12
10014b3e:	464c      	mov	r4, r9
10014b40:	4b41      	ldr	r3, [pc, #260]	; (10014c48 <__aeabi_dmul+0x4f0>)
10014b42:	e66f      	b.n	10014824 <__aeabi_dmul+0xcc>
10014b44:	465d      	mov	r5, fp
10014b46:	4315      	orrs	r5, r2
10014b48:	032d      	lsls	r5, r5, #12
10014b4a:	0b2d      	lsrs	r5, r5, #12
10014b4c:	4b3e      	ldr	r3, [pc, #248]	; (10014c48 <__aeabi_dmul+0x4f0>)
10014b4e:	e669      	b.n	10014824 <__aeabi_dmul+0xcc>
10014b50:	0003      	movs	r3, r0
10014b52:	4655      	mov	r5, sl
10014b54:	3b28      	subs	r3, #40	; 0x28
10014b56:	409d      	lsls	r5, r3
10014b58:	2300      	movs	r3, #0
10014b5a:	e6bc      	b.n	100148d6 <__aeabi_dmul+0x17e>
10014b5c:	4650      	mov	r0, sl
10014b5e:	f000 fd79 	bl	10015654 <__clzsi2>
10014b62:	3020      	adds	r0, #32
10014b64:	e6a8      	b.n	100148b8 <__aeabi_dmul+0x160>
10014b66:	0003      	movs	r3, r0
10014b68:	3b28      	subs	r3, #40	; 0x28
10014b6a:	409f      	lsls	r7, r3
10014b6c:	2300      	movs	r3, #0
10014b6e:	46bb      	mov	fp, r7
10014b70:	4698      	mov	r8, r3
10014b72:	e689      	b.n	10014888 <__aeabi_dmul+0x130>
10014b74:	f000 fd6e 	bl	10015654 <__clzsi2>
10014b78:	3020      	adds	r0, #32
10014b7a:	e673      	b.n	10014864 <__aeabi_dmul+0x10c>
10014b7c:	2401      	movs	r4, #1
10014b7e:	1aa6      	subs	r6, r4, r2
10014b80:	2e38      	cmp	r6, #56	; 0x38
10014b82:	dd07      	ble.n	10014b94 <__aeabi_dmul+0x43c>
10014b84:	2200      	movs	r2, #0
10014b86:	400c      	ands	r4, r1
10014b88:	2300      	movs	r3, #0
10014b8a:	2500      	movs	r5, #0
10014b8c:	4690      	mov	r8, r2
10014b8e:	e649      	b.n	10014824 <__aeabi_dmul+0xcc>
10014b90:	9e02      	ldr	r6, [sp, #8]
10014b92:	e7a3      	b.n	10014adc <__aeabi_dmul+0x384>
10014b94:	2e1f      	cmp	r6, #31
10014b96:	dc20      	bgt.n	10014bda <__aeabi_dmul+0x482>
10014b98:	2220      	movs	r2, #32
10014b9a:	002c      	movs	r4, r5
10014b9c:	0018      	movs	r0, r3
10014b9e:	1b92      	subs	r2, r2, r6
10014ba0:	40f0      	lsrs	r0, r6
10014ba2:	4094      	lsls	r4, r2
10014ba4:	4093      	lsls	r3, r2
10014ba6:	4304      	orrs	r4, r0
10014ba8:	1e58      	subs	r0, r3, #1
10014baa:	4183      	sbcs	r3, r0
10014bac:	431c      	orrs	r4, r3
10014bae:	40f5      	lsrs	r5, r6
10014bb0:	0763      	lsls	r3, r4, #29
10014bb2:	d009      	beq.n	10014bc8 <__aeabi_dmul+0x470>
10014bb4:	230f      	movs	r3, #15
10014bb6:	4023      	ands	r3, r4
10014bb8:	2b04      	cmp	r3, #4
10014bba:	d005      	beq.n	10014bc8 <__aeabi_dmul+0x470>
10014bbc:	0023      	movs	r3, r4
10014bbe:	1d1c      	adds	r4, r3, #4
10014bc0:	429c      	cmp	r4, r3
10014bc2:	4192      	sbcs	r2, r2
10014bc4:	4252      	negs	r2, r2
10014bc6:	18ad      	adds	r5, r5, r2
10014bc8:	022b      	lsls	r3, r5, #8
10014bca:	d51f      	bpl.n	10014c0c <__aeabi_dmul+0x4b4>
10014bcc:	2401      	movs	r4, #1
10014bce:	2200      	movs	r2, #0
10014bd0:	400c      	ands	r4, r1
10014bd2:	2301      	movs	r3, #1
10014bd4:	2500      	movs	r5, #0
10014bd6:	4690      	mov	r8, r2
10014bd8:	e624      	b.n	10014824 <__aeabi_dmul+0xcc>
10014bda:	201f      	movs	r0, #31
10014bdc:	002c      	movs	r4, r5
10014bde:	4240      	negs	r0, r0
10014be0:	1a82      	subs	r2, r0, r2
10014be2:	40d4      	lsrs	r4, r2
10014be4:	2e20      	cmp	r6, #32
10014be6:	d01c      	beq.n	10014c22 <__aeabi_dmul+0x4ca>
10014be8:	2240      	movs	r2, #64	; 0x40
10014bea:	1b96      	subs	r6, r2, r6
10014bec:	40b5      	lsls	r5, r6
10014bee:	432b      	orrs	r3, r5
10014bf0:	1e58      	subs	r0, r3, #1
10014bf2:	4183      	sbcs	r3, r0
10014bf4:	2007      	movs	r0, #7
10014bf6:	4323      	orrs	r3, r4
10014bf8:	4018      	ands	r0, r3
10014bfa:	2500      	movs	r5, #0
10014bfc:	2800      	cmp	r0, #0
10014bfe:	d009      	beq.n	10014c14 <__aeabi_dmul+0x4bc>
10014c00:	220f      	movs	r2, #15
10014c02:	2500      	movs	r5, #0
10014c04:	401a      	ands	r2, r3
10014c06:	001c      	movs	r4, r3
10014c08:	2a04      	cmp	r2, #4
10014c0a:	d1d8      	bne.n	10014bbe <__aeabi_dmul+0x466>
10014c0c:	0023      	movs	r3, r4
10014c0e:	0768      	lsls	r0, r5, #29
10014c10:	026d      	lsls	r5, r5, #9
10014c12:	0b2d      	lsrs	r5, r5, #12
10014c14:	2401      	movs	r4, #1
10014c16:	08db      	lsrs	r3, r3, #3
10014c18:	4303      	orrs	r3, r0
10014c1a:	4698      	mov	r8, r3
10014c1c:	400c      	ands	r4, r1
10014c1e:	2300      	movs	r3, #0
10014c20:	e600      	b.n	10014824 <__aeabi_dmul+0xcc>
10014c22:	2500      	movs	r5, #0
10014c24:	e7e3      	b.n	10014bee <__aeabi_dmul+0x496>
10014c26:	2280      	movs	r2, #128	; 0x80
10014c28:	2401      	movs	r4, #1
10014c2a:	0312      	lsls	r2, r2, #12
10014c2c:	4315      	orrs	r5, r2
10014c2e:	032d      	lsls	r5, r5, #12
10014c30:	4698      	mov	r8, r3
10014c32:	0b2d      	lsrs	r5, r5, #12
10014c34:	400c      	ands	r4, r1
10014c36:	4b04      	ldr	r3, [pc, #16]	; (10014c48 <__aeabi_dmul+0x4f0>)
10014c38:	e5f4      	b.n	10014824 <__aeabi_dmul+0xcc>
10014c3a:	46c0      	nop			; (mov r8, r8)
10014c3c:	000003ff 	.word	0x000003ff
10014c40:	feffffff 	.word	0xfeffffff
10014c44:	000007fe 	.word	0x000007fe
10014c48:	000007ff 	.word	0x000007ff

10014c4c <__aeabi_dsub>:
10014c4c:	b5f0      	push	{r4, r5, r6, r7, lr}
10014c4e:	4657      	mov	r7, sl
10014c50:	464e      	mov	r6, r9
10014c52:	4645      	mov	r5, r8
10014c54:	b4e0      	push	{r5, r6, r7}
10014c56:	000e      	movs	r6, r1
10014c58:	0011      	movs	r1, r2
10014c5a:	0ff2      	lsrs	r2, r6, #31
10014c5c:	4692      	mov	sl, r2
10014c5e:	00c5      	lsls	r5, r0, #3
10014c60:	0f42      	lsrs	r2, r0, #29
10014c62:	0318      	lsls	r0, r3, #12
10014c64:	0337      	lsls	r7, r6, #12
10014c66:	0074      	lsls	r4, r6, #1
10014c68:	0a40      	lsrs	r0, r0, #9
10014c6a:	0f4e      	lsrs	r6, r1, #29
10014c6c:	0a7f      	lsrs	r7, r7, #9
10014c6e:	4330      	orrs	r0, r6
10014c70:	4ecf      	ldr	r6, [pc, #828]	; (10014fb0 <__aeabi_dsub+0x364>)
10014c72:	4317      	orrs	r7, r2
10014c74:	005a      	lsls	r2, r3, #1
10014c76:	0d64      	lsrs	r4, r4, #21
10014c78:	0d52      	lsrs	r2, r2, #21
10014c7a:	0fdb      	lsrs	r3, r3, #31
10014c7c:	00c9      	lsls	r1, r1, #3
10014c7e:	42b2      	cmp	r2, r6
10014c80:	d100      	bne.n	10014c84 <__aeabi_dsub+0x38>
10014c82:	e0e5      	b.n	10014e50 <__aeabi_dsub+0x204>
10014c84:	2601      	movs	r6, #1
10014c86:	4073      	eors	r3, r6
10014c88:	1aa6      	subs	r6, r4, r2
10014c8a:	46b4      	mov	ip, r6
10014c8c:	4553      	cmp	r3, sl
10014c8e:	d100      	bne.n	10014c92 <__aeabi_dsub+0x46>
10014c90:	e0af      	b.n	10014df2 <__aeabi_dsub+0x1a6>
10014c92:	2e00      	cmp	r6, #0
10014c94:	dc00      	bgt.n	10014c98 <__aeabi_dsub+0x4c>
10014c96:	e10d      	b.n	10014eb4 <__aeabi_dsub+0x268>
10014c98:	2a00      	cmp	r2, #0
10014c9a:	d13a      	bne.n	10014d12 <__aeabi_dsub+0xc6>
10014c9c:	0003      	movs	r3, r0
10014c9e:	430b      	orrs	r3, r1
10014ca0:	d000      	beq.n	10014ca4 <__aeabi_dsub+0x58>
10014ca2:	e0e4      	b.n	10014e6e <__aeabi_dsub+0x222>
10014ca4:	076b      	lsls	r3, r5, #29
10014ca6:	d009      	beq.n	10014cbc <__aeabi_dsub+0x70>
10014ca8:	230f      	movs	r3, #15
10014caa:	402b      	ands	r3, r5
10014cac:	2b04      	cmp	r3, #4
10014cae:	d005      	beq.n	10014cbc <__aeabi_dsub+0x70>
10014cb0:	1d2b      	adds	r3, r5, #4
10014cb2:	42ab      	cmp	r3, r5
10014cb4:	41ad      	sbcs	r5, r5
10014cb6:	426d      	negs	r5, r5
10014cb8:	197f      	adds	r7, r7, r5
10014cba:	001d      	movs	r5, r3
10014cbc:	023b      	lsls	r3, r7, #8
10014cbe:	d400      	bmi.n	10014cc2 <__aeabi_dsub+0x76>
10014cc0:	e088      	b.n	10014dd4 <__aeabi_dsub+0x188>
10014cc2:	4bbb      	ldr	r3, [pc, #748]	; (10014fb0 <__aeabi_dsub+0x364>)
10014cc4:	3401      	adds	r4, #1
10014cc6:	429c      	cmp	r4, r3
10014cc8:	d100      	bne.n	10014ccc <__aeabi_dsub+0x80>
10014cca:	e110      	b.n	10014eee <__aeabi_dsub+0x2a2>
10014ccc:	003a      	movs	r2, r7
10014cce:	4bb9      	ldr	r3, [pc, #740]	; (10014fb4 <__aeabi_dsub+0x368>)
10014cd0:	4651      	mov	r1, sl
10014cd2:	401a      	ands	r2, r3
10014cd4:	2301      	movs	r3, #1
10014cd6:	0750      	lsls	r0, r2, #29
10014cd8:	08ed      	lsrs	r5, r5, #3
10014cda:	0252      	lsls	r2, r2, #9
10014cdc:	0564      	lsls	r4, r4, #21
10014cde:	4305      	orrs	r5, r0
10014ce0:	0b12      	lsrs	r2, r2, #12
10014ce2:	0d64      	lsrs	r4, r4, #21
10014ce4:	400b      	ands	r3, r1
10014ce6:	2100      	movs	r1, #0
10014ce8:	0028      	movs	r0, r5
10014cea:	0312      	lsls	r2, r2, #12
10014cec:	0d0d      	lsrs	r5, r1, #20
10014cee:	0b12      	lsrs	r2, r2, #12
10014cf0:	0564      	lsls	r4, r4, #21
10014cf2:	052d      	lsls	r5, r5, #20
10014cf4:	4315      	orrs	r5, r2
10014cf6:	0862      	lsrs	r2, r4, #1
10014cf8:	4caf      	ldr	r4, [pc, #700]	; (10014fb8 <__aeabi_dsub+0x36c>)
10014cfa:	07db      	lsls	r3, r3, #31
10014cfc:	402c      	ands	r4, r5
10014cfe:	4314      	orrs	r4, r2
10014d00:	0064      	lsls	r4, r4, #1
10014d02:	0864      	lsrs	r4, r4, #1
10014d04:	431c      	orrs	r4, r3
10014d06:	0021      	movs	r1, r4
10014d08:	bc1c      	pop	{r2, r3, r4}
10014d0a:	4690      	mov	r8, r2
10014d0c:	4699      	mov	r9, r3
10014d0e:	46a2      	mov	sl, r4
10014d10:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014d12:	4ba7      	ldr	r3, [pc, #668]	; (10014fb0 <__aeabi_dsub+0x364>)
10014d14:	429c      	cmp	r4, r3
10014d16:	d0c5      	beq.n	10014ca4 <__aeabi_dsub+0x58>
10014d18:	2380      	movs	r3, #128	; 0x80
10014d1a:	041b      	lsls	r3, r3, #16
10014d1c:	4318      	orrs	r0, r3
10014d1e:	4663      	mov	r3, ip
10014d20:	2b38      	cmp	r3, #56	; 0x38
10014d22:	dd00      	ble.n	10014d26 <__aeabi_dsub+0xda>
10014d24:	e0fd      	b.n	10014f22 <__aeabi_dsub+0x2d6>
10014d26:	2b1f      	cmp	r3, #31
10014d28:	dd00      	ble.n	10014d2c <__aeabi_dsub+0xe0>
10014d2a:	e130      	b.n	10014f8e <__aeabi_dsub+0x342>
10014d2c:	4662      	mov	r2, ip
10014d2e:	2320      	movs	r3, #32
10014d30:	1a9b      	subs	r3, r3, r2
10014d32:	0002      	movs	r2, r0
10014d34:	409a      	lsls	r2, r3
10014d36:	4666      	mov	r6, ip
10014d38:	4690      	mov	r8, r2
10014d3a:	000a      	movs	r2, r1
10014d3c:	4099      	lsls	r1, r3
10014d3e:	40f2      	lsrs	r2, r6
10014d40:	4646      	mov	r6, r8
10014d42:	1e4b      	subs	r3, r1, #1
10014d44:	4199      	sbcs	r1, r3
10014d46:	4332      	orrs	r2, r6
10014d48:	4311      	orrs	r1, r2
10014d4a:	4663      	mov	r3, ip
10014d4c:	0002      	movs	r2, r0
10014d4e:	40da      	lsrs	r2, r3
10014d50:	1a69      	subs	r1, r5, r1
10014d52:	428d      	cmp	r5, r1
10014d54:	419b      	sbcs	r3, r3
10014d56:	000d      	movs	r5, r1
10014d58:	1aba      	subs	r2, r7, r2
10014d5a:	425b      	negs	r3, r3
10014d5c:	1ad7      	subs	r7, r2, r3
10014d5e:	023b      	lsls	r3, r7, #8
10014d60:	d535      	bpl.n	10014dce <__aeabi_dsub+0x182>
10014d62:	027a      	lsls	r2, r7, #9
10014d64:	0a53      	lsrs	r3, r2, #9
10014d66:	4698      	mov	r8, r3
10014d68:	4643      	mov	r3, r8
10014d6a:	2b00      	cmp	r3, #0
10014d6c:	d100      	bne.n	10014d70 <__aeabi_dsub+0x124>
10014d6e:	e0c4      	b.n	10014efa <__aeabi_dsub+0x2ae>
10014d70:	4640      	mov	r0, r8
10014d72:	f000 fc6f 	bl	10015654 <__clzsi2>
10014d76:	0003      	movs	r3, r0
10014d78:	3b08      	subs	r3, #8
10014d7a:	2b1f      	cmp	r3, #31
10014d7c:	dd00      	ble.n	10014d80 <__aeabi_dsub+0x134>
10014d7e:	e0c5      	b.n	10014f0c <__aeabi_dsub+0x2c0>
10014d80:	2220      	movs	r2, #32
10014d82:	0029      	movs	r1, r5
10014d84:	1ad2      	subs	r2, r2, r3
10014d86:	4647      	mov	r7, r8
10014d88:	40d1      	lsrs	r1, r2
10014d8a:	409f      	lsls	r7, r3
10014d8c:	000a      	movs	r2, r1
10014d8e:	409d      	lsls	r5, r3
10014d90:	433a      	orrs	r2, r7
10014d92:	429c      	cmp	r4, r3
10014d94:	dd00      	ble.n	10014d98 <__aeabi_dsub+0x14c>
10014d96:	e0c0      	b.n	10014f1a <__aeabi_dsub+0x2ce>
10014d98:	1b1c      	subs	r4, r3, r4
10014d9a:	1c63      	adds	r3, r4, #1
10014d9c:	2b1f      	cmp	r3, #31
10014d9e:	dd00      	ble.n	10014da2 <__aeabi_dsub+0x156>
10014da0:	e0e4      	b.n	10014f6c <__aeabi_dsub+0x320>
10014da2:	2120      	movs	r1, #32
10014da4:	0014      	movs	r4, r2
10014da6:	0028      	movs	r0, r5
10014da8:	1ac9      	subs	r1, r1, r3
10014daa:	40d8      	lsrs	r0, r3
10014dac:	408c      	lsls	r4, r1
10014dae:	408d      	lsls	r5, r1
10014db0:	4304      	orrs	r4, r0
10014db2:	40da      	lsrs	r2, r3
10014db4:	1e68      	subs	r0, r5, #1
10014db6:	4185      	sbcs	r5, r0
10014db8:	0017      	movs	r7, r2
10014dba:	4325      	orrs	r5, r4
10014dbc:	2400      	movs	r4, #0
10014dbe:	e771      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014dc0:	4642      	mov	r2, r8
10014dc2:	4663      	mov	r3, ip
10014dc4:	431a      	orrs	r2, r3
10014dc6:	d100      	bne.n	10014dca <__aeabi_dsub+0x17e>
10014dc8:	e24c      	b.n	10015264 <__aeabi_dsub+0x618>
10014dca:	4667      	mov	r7, ip
10014dcc:	4645      	mov	r5, r8
10014dce:	076b      	lsls	r3, r5, #29
10014dd0:	d000      	beq.n	10014dd4 <__aeabi_dsub+0x188>
10014dd2:	e769      	b.n	10014ca8 <__aeabi_dsub+0x5c>
10014dd4:	2301      	movs	r3, #1
10014dd6:	4651      	mov	r1, sl
10014dd8:	0778      	lsls	r0, r7, #29
10014dda:	08ed      	lsrs	r5, r5, #3
10014ddc:	08fa      	lsrs	r2, r7, #3
10014dde:	400b      	ands	r3, r1
10014de0:	4305      	orrs	r5, r0
10014de2:	4973      	ldr	r1, [pc, #460]	; (10014fb0 <__aeabi_dsub+0x364>)
10014de4:	428c      	cmp	r4, r1
10014de6:	d038      	beq.n	10014e5a <__aeabi_dsub+0x20e>
10014de8:	0312      	lsls	r2, r2, #12
10014dea:	0564      	lsls	r4, r4, #21
10014dec:	0b12      	lsrs	r2, r2, #12
10014dee:	0d64      	lsrs	r4, r4, #21
10014df0:	e779      	b.n	10014ce6 <__aeabi_dsub+0x9a>
10014df2:	2e00      	cmp	r6, #0
10014df4:	dc00      	bgt.n	10014df8 <__aeabi_dsub+0x1ac>
10014df6:	e09a      	b.n	10014f2e <__aeabi_dsub+0x2e2>
10014df8:	2a00      	cmp	r2, #0
10014dfa:	d047      	beq.n	10014e8c <__aeabi_dsub+0x240>
10014dfc:	4a6c      	ldr	r2, [pc, #432]	; (10014fb0 <__aeabi_dsub+0x364>)
10014dfe:	4294      	cmp	r4, r2
10014e00:	d100      	bne.n	10014e04 <__aeabi_dsub+0x1b8>
10014e02:	e74f      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014e04:	2280      	movs	r2, #128	; 0x80
10014e06:	0412      	lsls	r2, r2, #16
10014e08:	4310      	orrs	r0, r2
10014e0a:	4662      	mov	r2, ip
10014e0c:	2a38      	cmp	r2, #56	; 0x38
10014e0e:	dc00      	bgt.n	10014e12 <__aeabi_dsub+0x1c6>
10014e10:	e108      	b.n	10015024 <__aeabi_dsub+0x3d8>
10014e12:	4301      	orrs	r1, r0
10014e14:	1e48      	subs	r0, r1, #1
10014e16:	4181      	sbcs	r1, r0
10014e18:	2200      	movs	r2, #0
10014e1a:	b2c9      	uxtb	r1, r1
10014e1c:	1949      	adds	r1, r1, r5
10014e1e:	19d2      	adds	r2, r2, r7
10014e20:	42a9      	cmp	r1, r5
10014e22:	41bf      	sbcs	r7, r7
10014e24:	000d      	movs	r5, r1
10014e26:	427f      	negs	r7, r7
10014e28:	18bf      	adds	r7, r7, r2
10014e2a:	023a      	lsls	r2, r7, #8
10014e2c:	d400      	bmi.n	10014e30 <__aeabi_dsub+0x1e4>
10014e2e:	e142      	b.n	100150b6 <__aeabi_dsub+0x46a>
10014e30:	4a5f      	ldr	r2, [pc, #380]	; (10014fb0 <__aeabi_dsub+0x364>)
10014e32:	3401      	adds	r4, #1
10014e34:	4294      	cmp	r4, r2
10014e36:	d100      	bne.n	10014e3a <__aeabi_dsub+0x1ee>
10014e38:	e14e      	b.n	100150d8 <__aeabi_dsub+0x48c>
10014e3a:	2001      	movs	r0, #1
10014e3c:	4a5d      	ldr	r2, [pc, #372]	; (10014fb4 <__aeabi_dsub+0x368>)
10014e3e:	0869      	lsrs	r1, r5, #1
10014e40:	403a      	ands	r2, r7
10014e42:	4028      	ands	r0, r5
10014e44:	4308      	orrs	r0, r1
10014e46:	07d5      	lsls	r5, r2, #31
10014e48:	4305      	orrs	r5, r0
10014e4a:	0857      	lsrs	r7, r2, #1
10014e4c:	469a      	mov	sl, r3
10014e4e:	e729      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014e50:	0006      	movs	r6, r0
10014e52:	430e      	orrs	r6, r1
10014e54:	d000      	beq.n	10014e58 <__aeabi_dsub+0x20c>
10014e56:	e717      	b.n	10014c88 <__aeabi_dsub+0x3c>
10014e58:	e714      	b.n	10014c84 <__aeabi_dsub+0x38>
10014e5a:	0029      	movs	r1, r5
10014e5c:	4311      	orrs	r1, r2
10014e5e:	d100      	bne.n	10014e62 <__aeabi_dsub+0x216>
10014e60:	e1f9      	b.n	10015256 <__aeabi_dsub+0x60a>
10014e62:	2180      	movs	r1, #128	; 0x80
10014e64:	0309      	lsls	r1, r1, #12
10014e66:	430a      	orrs	r2, r1
10014e68:	0312      	lsls	r2, r2, #12
10014e6a:	0b12      	lsrs	r2, r2, #12
10014e6c:	e73b      	b.n	10014ce6 <__aeabi_dsub+0x9a>
10014e6e:	2301      	movs	r3, #1
10014e70:	425b      	negs	r3, r3
10014e72:	4698      	mov	r8, r3
10014e74:	44c4      	add	ip, r8
10014e76:	4663      	mov	r3, ip
10014e78:	2b00      	cmp	r3, #0
10014e7a:	d172      	bne.n	10014f62 <__aeabi_dsub+0x316>
10014e7c:	1a69      	subs	r1, r5, r1
10014e7e:	428d      	cmp	r5, r1
10014e80:	419b      	sbcs	r3, r3
10014e82:	1a3f      	subs	r7, r7, r0
10014e84:	425b      	negs	r3, r3
10014e86:	1aff      	subs	r7, r7, r3
10014e88:	000d      	movs	r5, r1
10014e8a:	e768      	b.n	10014d5e <__aeabi_dsub+0x112>
10014e8c:	0002      	movs	r2, r0
10014e8e:	430a      	orrs	r2, r1
10014e90:	d100      	bne.n	10014e94 <__aeabi_dsub+0x248>
10014e92:	e707      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014e94:	2201      	movs	r2, #1
10014e96:	4252      	negs	r2, r2
10014e98:	4690      	mov	r8, r2
10014e9a:	44c4      	add	ip, r8
10014e9c:	4662      	mov	r2, ip
10014e9e:	2a00      	cmp	r2, #0
10014ea0:	d000      	beq.n	10014ea4 <__aeabi_dsub+0x258>
10014ea2:	e0e6      	b.n	10015072 <__aeabi_dsub+0x426>
10014ea4:	1869      	adds	r1, r5, r1
10014ea6:	42a9      	cmp	r1, r5
10014ea8:	41b6      	sbcs	r6, r6
10014eaa:	183f      	adds	r7, r7, r0
10014eac:	4276      	negs	r6, r6
10014eae:	19f7      	adds	r7, r6, r7
10014eb0:	000d      	movs	r5, r1
10014eb2:	e7ba      	b.n	10014e2a <__aeabi_dsub+0x1de>
10014eb4:	2e00      	cmp	r6, #0
10014eb6:	d000      	beq.n	10014eba <__aeabi_dsub+0x26e>
10014eb8:	e080      	b.n	10014fbc <__aeabi_dsub+0x370>
10014eba:	1c62      	adds	r2, r4, #1
10014ebc:	0552      	lsls	r2, r2, #21
10014ebe:	0d52      	lsrs	r2, r2, #21
10014ec0:	2a01      	cmp	r2, #1
10014ec2:	dc00      	bgt.n	10014ec6 <__aeabi_dsub+0x27a>
10014ec4:	e0f9      	b.n	100150ba <__aeabi_dsub+0x46e>
10014ec6:	1a6a      	subs	r2, r5, r1
10014ec8:	4691      	mov	r9, r2
10014eca:	454d      	cmp	r5, r9
10014ecc:	41b6      	sbcs	r6, r6
10014ece:	1a3a      	subs	r2, r7, r0
10014ed0:	4276      	negs	r6, r6
10014ed2:	1b92      	subs	r2, r2, r6
10014ed4:	4690      	mov	r8, r2
10014ed6:	0212      	lsls	r2, r2, #8
10014ed8:	d400      	bmi.n	10014edc <__aeabi_dsub+0x290>
10014eda:	e099      	b.n	10015010 <__aeabi_dsub+0x3c4>
10014edc:	1b4d      	subs	r5, r1, r5
10014ede:	42a9      	cmp	r1, r5
10014ee0:	4189      	sbcs	r1, r1
10014ee2:	1bc7      	subs	r7, r0, r7
10014ee4:	4249      	negs	r1, r1
10014ee6:	1a7a      	subs	r2, r7, r1
10014ee8:	4690      	mov	r8, r2
10014eea:	469a      	mov	sl, r3
10014eec:	e73c      	b.n	10014d68 <__aeabi_dsub+0x11c>
10014eee:	4652      	mov	r2, sl
10014ef0:	2301      	movs	r3, #1
10014ef2:	2500      	movs	r5, #0
10014ef4:	4013      	ands	r3, r2
10014ef6:	2200      	movs	r2, #0
10014ef8:	e6f5      	b.n	10014ce6 <__aeabi_dsub+0x9a>
10014efa:	0028      	movs	r0, r5
10014efc:	f000 fbaa 	bl	10015654 <__clzsi2>
10014f00:	3020      	adds	r0, #32
10014f02:	0003      	movs	r3, r0
10014f04:	3b08      	subs	r3, #8
10014f06:	2b1f      	cmp	r3, #31
10014f08:	dc00      	bgt.n	10014f0c <__aeabi_dsub+0x2c0>
10014f0a:	e739      	b.n	10014d80 <__aeabi_dsub+0x134>
10014f0c:	002a      	movs	r2, r5
10014f0e:	3828      	subs	r0, #40	; 0x28
10014f10:	4082      	lsls	r2, r0
10014f12:	2500      	movs	r5, #0
10014f14:	429c      	cmp	r4, r3
10014f16:	dc00      	bgt.n	10014f1a <__aeabi_dsub+0x2ce>
10014f18:	e73e      	b.n	10014d98 <__aeabi_dsub+0x14c>
10014f1a:	4f26      	ldr	r7, [pc, #152]	; (10014fb4 <__aeabi_dsub+0x368>)
10014f1c:	1ae4      	subs	r4, r4, r3
10014f1e:	4017      	ands	r7, r2
10014f20:	e6c0      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014f22:	4301      	orrs	r1, r0
10014f24:	1e48      	subs	r0, r1, #1
10014f26:	4181      	sbcs	r1, r0
10014f28:	2200      	movs	r2, #0
10014f2a:	b2c9      	uxtb	r1, r1
10014f2c:	e710      	b.n	10014d50 <__aeabi_dsub+0x104>
10014f2e:	2e00      	cmp	r6, #0
10014f30:	d000      	beq.n	10014f34 <__aeabi_dsub+0x2e8>
10014f32:	e0f1      	b.n	10015118 <__aeabi_dsub+0x4cc>
10014f34:	1c62      	adds	r2, r4, #1
10014f36:	4694      	mov	ip, r2
10014f38:	0552      	lsls	r2, r2, #21
10014f3a:	0d52      	lsrs	r2, r2, #21
10014f3c:	2a01      	cmp	r2, #1
10014f3e:	dc00      	bgt.n	10014f42 <__aeabi_dsub+0x2f6>
10014f40:	e0a0      	b.n	10015084 <__aeabi_dsub+0x438>
10014f42:	4a1b      	ldr	r2, [pc, #108]	; (10014fb0 <__aeabi_dsub+0x364>)
10014f44:	4594      	cmp	ip, r2
10014f46:	d100      	bne.n	10014f4a <__aeabi_dsub+0x2fe>
10014f48:	e0c5      	b.n	100150d6 <__aeabi_dsub+0x48a>
10014f4a:	1869      	adds	r1, r5, r1
10014f4c:	42a9      	cmp	r1, r5
10014f4e:	4192      	sbcs	r2, r2
10014f50:	183f      	adds	r7, r7, r0
10014f52:	4252      	negs	r2, r2
10014f54:	19d2      	adds	r2, r2, r7
10014f56:	0849      	lsrs	r1, r1, #1
10014f58:	07d5      	lsls	r5, r2, #31
10014f5a:	430d      	orrs	r5, r1
10014f5c:	0857      	lsrs	r7, r2, #1
10014f5e:	4664      	mov	r4, ip
10014f60:	e6a0      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014f62:	4b13      	ldr	r3, [pc, #76]	; (10014fb0 <__aeabi_dsub+0x364>)
10014f64:	429c      	cmp	r4, r3
10014f66:	d000      	beq.n	10014f6a <__aeabi_dsub+0x31e>
10014f68:	e6d9      	b.n	10014d1e <__aeabi_dsub+0xd2>
10014f6a:	e69b      	b.n	10014ca4 <__aeabi_dsub+0x58>
10014f6c:	0011      	movs	r1, r2
10014f6e:	3c1f      	subs	r4, #31
10014f70:	40e1      	lsrs	r1, r4
10014f72:	000c      	movs	r4, r1
10014f74:	2b20      	cmp	r3, #32
10014f76:	d100      	bne.n	10014f7a <__aeabi_dsub+0x32e>
10014f78:	e080      	b.n	1001507c <__aeabi_dsub+0x430>
10014f7a:	2140      	movs	r1, #64	; 0x40
10014f7c:	1acb      	subs	r3, r1, r3
10014f7e:	409a      	lsls	r2, r3
10014f80:	4315      	orrs	r5, r2
10014f82:	1e6a      	subs	r2, r5, #1
10014f84:	4195      	sbcs	r5, r2
10014f86:	2700      	movs	r7, #0
10014f88:	4325      	orrs	r5, r4
10014f8a:	2400      	movs	r4, #0
10014f8c:	e71f      	b.n	10014dce <__aeabi_dsub+0x182>
10014f8e:	4663      	mov	r3, ip
10014f90:	0002      	movs	r2, r0
10014f92:	3b20      	subs	r3, #32
10014f94:	40da      	lsrs	r2, r3
10014f96:	4663      	mov	r3, ip
10014f98:	2b20      	cmp	r3, #32
10014f9a:	d071      	beq.n	10015080 <__aeabi_dsub+0x434>
10014f9c:	2340      	movs	r3, #64	; 0x40
10014f9e:	4666      	mov	r6, ip
10014fa0:	1b9b      	subs	r3, r3, r6
10014fa2:	4098      	lsls	r0, r3
10014fa4:	4301      	orrs	r1, r0
10014fa6:	1e48      	subs	r0, r1, #1
10014fa8:	4181      	sbcs	r1, r0
10014faa:	4311      	orrs	r1, r2
10014fac:	2200      	movs	r2, #0
10014fae:	e6cf      	b.n	10014d50 <__aeabi_dsub+0x104>
10014fb0:	000007ff 	.word	0x000007ff
10014fb4:	ff7fffff 	.word	0xff7fffff
10014fb8:	800fffff 	.word	0x800fffff
10014fbc:	2c00      	cmp	r4, #0
10014fbe:	d048      	beq.n	10015052 <__aeabi_dsub+0x406>
10014fc0:	4cca      	ldr	r4, [pc, #808]	; (100152ec <__aeabi_dsub+0x6a0>)
10014fc2:	42a2      	cmp	r2, r4
10014fc4:	d100      	bne.n	10014fc8 <__aeabi_dsub+0x37c>
10014fc6:	e0a2      	b.n	1001510e <__aeabi_dsub+0x4c2>
10014fc8:	4274      	negs	r4, r6
10014fca:	46a1      	mov	r9, r4
10014fcc:	2480      	movs	r4, #128	; 0x80
10014fce:	0424      	lsls	r4, r4, #16
10014fd0:	4327      	orrs	r7, r4
10014fd2:	464c      	mov	r4, r9
10014fd4:	2c38      	cmp	r4, #56	; 0x38
10014fd6:	dd00      	ble.n	10014fda <__aeabi_dsub+0x38e>
10014fd8:	e0db      	b.n	10015192 <__aeabi_dsub+0x546>
10014fda:	2c1f      	cmp	r4, #31
10014fdc:	dd00      	ble.n	10014fe0 <__aeabi_dsub+0x394>
10014fde:	e144      	b.n	1001526a <__aeabi_dsub+0x61e>
10014fe0:	464e      	mov	r6, r9
10014fe2:	2420      	movs	r4, #32
10014fe4:	1ba4      	subs	r4, r4, r6
10014fe6:	003e      	movs	r6, r7
10014fe8:	40a6      	lsls	r6, r4
10014fea:	46a2      	mov	sl, r4
10014fec:	46b0      	mov	r8, r6
10014fee:	464c      	mov	r4, r9
10014ff0:	002e      	movs	r6, r5
10014ff2:	40e6      	lsrs	r6, r4
10014ff4:	46b4      	mov	ip, r6
10014ff6:	4646      	mov	r6, r8
10014ff8:	4664      	mov	r4, ip
10014ffa:	4326      	orrs	r6, r4
10014ffc:	4654      	mov	r4, sl
10014ffe:	40a5      	lsls	r5, r4
10015000:	1e6c      	subs	r4, r5, #1
10015002:	41a5      	sbcs	r5, r4
10015004:	0034      	movs	r4, r6
10015006:	432c      	orrs	r4, r5
10015008:	464d      	mov	r5, r9
1001500a:	40ef      	lsrs	r7, r5
1001500c:	1b0d      	subs	r5, r1, r4
1001500e:	e028      	b.n	10015062 <__aeabi_dsub+0x416>
10015010:	464a      	mov	r2, r9
10015012:	4643      	mov	r3, r8
10015014:	464d      	mov	r5, r9
10015016:	431a      	orrs	r2, r3
10015018:	d000      	beq.n	1001501c <__aeabi_dsub+0x3d0>
1001501a:	e6a5      	b.n	10014d68 <__aeabi_dsub+0x11c>
1001501c:	2300      	movs	r3, #0
1001501e:	2400      	movs	r4, #0
10015020:	2500      	movs	r5, #0
10015022:	e6de      	b.n	10014de2 <__aeabi_dsub+0x196>
10015024:	2a1f      	cmp	r2, #31
10015026:	dc5a      	bgt.n	100150de <__aeabi_dsub+0x492>
10015028:	4666      	mov	r6, ip
1001502a:	2220      	movs	r2, #32
1001502c:	1b92      	subs	r2, r2, r6
1001502e:	0006      	movs	r6, r0
10015030:	4096      	lsls	r6, r2
10015032:	4691      	mov	r9, r2
10015034:	46b0      	mov	r8, r6
10015036:	4662      	mov	r2, ip
10015038:	000e      	movs	r6, r1
1001503a:	40d6      	lsrs	r6, r2
1001503c:	4642      	mov	r2, r8
1001503e:	4316      	orrs	r6, r2
10015040:	464a      	mov	r2, r9
10015042:	4091      	lsls	r1, r2
10015044:	1e4a      	subs	r2, r1, #1
10015046:	4191      	sbcs	r1, r2
10015048:	0002      	movs	r2, r0
1001504a:	4660      	mov	r0, ip
1001504c:	4331      	orrs	r1, r6
1001504e:	40c2      	lsrs	r2, r0
10015050:	e6e4      	b.n	10014e1c <__aeabi_dsub+0x1d0>
10015052:	003c      	movs	r4, r7
10015054:	432c      	orrs	r4, r5
10015056:	d05a      	beq.n	1001510e <__aeabi_dsub+0x4c2>
10015058:	43f4      	mvns	r4, r6
1001505a:	46a1      	mov	r9, r4
1001505c:	2c00      	cmp	r4, #0
1001505e:	d152      	bne.n	10015106 <__aeabi_dsub+0x4ba>
10015060:	1b4d      	subs	r5, r1, r5
10015062:	42a9      	cmp	r1, r5
10015064:	4189      	sbcs	r1, r1
10015066:	1bc7      	subs	r7, r0, r7
10015068:	4249      	negs	r1, r1
1001506a:	1a7f      	subs	r7, r7, r1
1001506c:	0014      	movs	r4, r2
1001506e:	469a      	mov	sl, r3
10015070:	e675      	b.n	10014d5e <__aeabi_dsub+0x112>
10015072:	4a9e      	ldr	r2, [pc, #632]	; (100152ec <__aeabi_dsub+0x6a0>)
10015074:	4294      	cmp	r4, r2
10015076:	d000      	beq.n	1001507a <__aeabi_dsub+0x42e>
10015078:	e6c7      	b.n	10014e0a <__aeabi_dsub+0x1be>
1001507a:	e613      	b.n	10014ca4 <__aeabi_dsub+0x58>
1001507c:	2200      	movs	r2, #0
1001507e:	e77f      	b.n	10014f80 <__aeabi_dsub+0x334>
10015080:	2000      	movs	r0, #0
10015082:	e78f      	b.n	10014fa4 <__aeabi_dsub+0x358>
10015084:	2c00      	cmp	r4, #0
10015086:	d000      	beq.n	1001508a <__aeabi_dsub+0x43e>
10015088:	e0c8      	b.n	1001521c <__aeabi_dsub+0x5d0>
1001508a:	003b      	movs	r3, r7
1001508c:	432b      	orrs	r3, r5
1001508e:	d100      	bne.n	10015092 <__aeabi_dsub+0x446>
10015090:	e10f      	b.n	100152b2 <__aeabi_dsub+0x666>
10015092:	0003      	movs	r3, r0
10015094:	430b      	orrs	r3, r1
10015096:	d100      	bne.n	1001509a <__aeabi_dsub+0x44e>
10015098:	e604      	b.n	10014ca4 <__aeabi_dsub+0x58>
1001509a:	1869      	adds	r1, r5, r1
1001509c:	42a9      	cmp	r1, r5
1001509e:	419b      	sbcs	r3, r3
100150a0:	183f      	adds	r7, r7, r0
100150a2:	425b      	negs	r3, r3
100150a4:	19df      	adds	r7, r3, r7
100150a6:	023b      	lsls	r3, r7, #8
100150a8:	d400      	bmi.n	100150ac <__aeabi_dsub+0x460>
100150aa:	e11a      	b.n	100152e2 <__aeabi_dsub+0x696>
100150ac:	4b90      	ldr	r3, [pc, #576]	; (100152f0 <__aeabi_dsub+0x6a4>)
100150ae:	000d      	movs	r5, r1
100150b0:	401f      	ands	r7, r3
100150b2:	4664      	mov	r4, ip
100150b4:	e5f6      	b.n	10014ca4 <__aeabi_dsub+0x58>
100150b6:	469a      	mov	sl, r3
100150b8:	e689      	b.n	10014dce <__aeabi_dsub+0x182>
100150ba:	003a      	movs	r2, r7
100150bc:	432a      	orrs	r2, r5
100150be:	2c00      	cmp	r4, #0
100150c0:	d15c      	bne.n	1001517c <__aeabi_dsub+0x530>
100150c2:	2a00      	cmp	r2, #0
100150c4:	d175      	bne.n	100151b2 <__aeabi_dsub+0x566>
100150c6:	0002      	movs	r2, r0
100150c8:	430a      	orrs	r2, r1
100150ca:	d100      	bne.n	100150ce <__aeabi_dsub+0x482>
100150cc:	e0ca      	b.n	10015264 <__aeabi_dsub+0x618>
100150ce:	0007      	movs	r7, r0
100150d0:	000d      	movs	r5, r1
100150d2:	469a      	mov	sl, r3
100150d4:	e5e6      	b.n	10014ca4 <__aeabi_dsub+0x58>
100150d6:	4664      	mov	r4, ip
100150d8:	2200      	movs	r2, #0
100150da:	2500      	movs	r5, #0
100150dc:	e681      	b.n	10014de2 <__aeabi_dsub+0x196>
100150de:	4662      	mov	r2, ip
100150e0:	0006      	movs	r6, r0
100150e2:	3a20      	subs	r2, #32
100150e4:	40d6      	lsrs	r6, r2
100150e6:	4662      	mov	r2, ip
100150e8:	46b0      	mov	r8, r6
100150ea:	2a20      	cmp	r2, #32
100150ec:	d100      	bne.n	100150f0 <__aeabi_dsub+0x4a4>
100150ee:	e0b7      	b.n	10015260 <__aeabi_dsub+0x614>
100150f0:	2240      	movs	r2, #64	; 0x40
100150f2:	4666      	mov	r6, ip
100150f4:	1b92      	subs	r2, r2, r6
100150f6:	4090      	lsls	r0, r2
100150f8:	4301      	orrs	r1, r0
100150fa:	4642      	mov	r2, r8
100150fc:	1e48      	subs	r0, r1, #1
100150fe:	4181      	sbcs	r1, r0
10015100:	4311      	orrs	r1, r2
10015102:	2200      	movs	r2, #0
10015104:	e68a      	b.n	10014e1c <__aeabi_dsub+0x1d0>
10015106:	4c79      	ldr	r4, [pc, #484]	; (100152ec <__aeabi_dsub+0x6a0>)
10015108:	42a2      	cmp	r2, r4
1001510a:	d000      	beq.n	1001510e <__aeabi_dsub+0x4c2>
1001510c:	e761      	b.n	10014fd2 <__aeabi_dsub+0x386>
1001510e:	0007      	movs	r7, r0
10015110:	000d      	movs	r5, r1
10015112:	0014      	movs	r4, r2
10015114:	469a      	mov	sl, r3
10015116:	e5c5      	b.n	10014ca4 <__aeabi_dsub+0x58>
10015118:	2c00      	cmp	r4, #0
1001511a:	d141      	bne.n	100151a0 <__aeabi_dsub+0x554>
1001511c:	003c      	movs	r4, r7
1001511e:	432c      	orrs	r4, r5
10015120:	d078      	beq.n	10015214 <__aeabi_dsub+0x5c8>
10015122:	43f4      	mvns	r4, r6
10015124:	46a1      	mov	r9, r4
10015126:	2c00      	cmp	r4, #0
10015128:	d020      	beq.n	1001516c <__aeabi_dsub+0x520>
1001512a:	4c70      	ldr	r4, [pc, #448]	; (100152ec <__aeabi_dsub+0x6a0>)
1001512c:	42a2      	cmp	r2, r4
1001512e:	d071      	beq.n	10015214 <__aeabi_dsub+0x5c8>
10015130:	464c      	mov	r4, r9
10015132:	2c38      	cmp	r4, #56	; 0x38
10015134:	dd00      	ble.n	10015138 <__aeabi_dsub+0x4ec>
10015136:	e0b2      	b.n	1001529e <__aeabi_dsub+0x652>
10015138:	2c1f      	cmp	r4, #31
1001513a:	dd00      	ble.n	1001513e <__aeabi_dsub+0x4f2>
1001513c:	e0bc      	b.n	100152b8 <__aeabi_dsub+0x66c>
1001513e:	2620      	movs	r6, #32
10015140:	1b34      	subs	r4, r6, r4
10015142:	46a2      	mov	sl, r4
10015144:	003c      	movs	r4, r7
10015146:	4656      	mov	r6, sl
10015148:	40b4      	lsls	r4, r6
1001514a:	464e      	mov	r6, r9
1001514c:	46a0      	mov	r8, r4
1001514e:	002c      	movs	r4, r5
10015150:	40f4      	lsrs	r4, r6
10015152:	46a4      	mov	ip, r4
10015154:	4644      	mov	r4, r8
10015156:	4666      	mov	r6, ip
10015158:	4334      	orrs	r4, r6
1001515a:	46a4      	mov	ip, r4
1001515c:	4654      	mov	r4, sl
1001515e:	40a5      	lsls	r5, r4
10015160:	4664      	mov	r4, ip
10015162:	1e6e      	subs	r6, r5, #1
10015164:	41b5      	sbcs	r5, r6
10015166:	4325      	orrs	r5, r4
10015168:	464c      	mov	r4, r9
1001516a:	40e7      	lsrs	r7, r4
1001516c:	186d      	adds	r5, r5, r1
1001516e:	428d      	cmp	r5, r1
10015170:	4189      	sbcs	r1, r1
10015172:	183f      	adds	r7, r7, r0
10015174:	4249      	negs	r1, r1
10015176:	19cf      	adds	r7, r1, r7
10015178:	0014      	movs	r4, r2
1001517a:	e656      	b.n	10014e2a <__aeabi_dsub+0x1de>
1001517c:	2a00      	cmp	r2, #0
1001517e:	d12f      	bne.n	100151e0 <__aeabi_dsub+0x594>
10015180:	0002      	movs	r2, r0
10015182:	430a      	orrs	r2, r1
10015184:	d100      	bne.n	10015188 <__aeabi_dsub+0x53c>
10015186:	e084      	b.n	10015292 <__aeabi_dsub+0x646>
10015188:	0007      	movs	r7, r0
1001518a:	000d      	movs	r5, r1
1001518c:	469a      	mov	sl, r3
1001518e:	4c57      	ldr	r4, [pc, #348]	; (100152ec <__aeabi_dsub+0x6a0>)
10015190:	e588      	b.n	10014ca4 <__aeabi_dsub+0x58>
10015192:	433d      	orrs	r5, r7
10015194:	1e6f      	subs	r7, r5, #1
10015196:	41bd      	sbcs	r5, r7
10015198:	b2ec      	uxtb	r4, r5
1001519a:	2700      	movs	r7, #0
1001519c:	1b0d      	subs	r5, r1, r4
1001519e:	e760      	b.n	10015062 <__aeabi_dsub+0x416>
100151a0:	4c52      	ldr	r4, [pc, #328]	; (100152ec <__aeabi_dsub+0x6a0>)
100151a2:	42a2      	cmp	r2, r4
100151a4:	d036      	beq.n	10015214 <__aeabi_dsub+0x5c8>
100151a6:	4274      	negs	r4, r6
100151a8:	2680      	movs	r6, #128	; 0x80
100151aa:	0436      	lsls	r6, r6, #16
100151ac:	46a1      	mov	r9, r4
100151ae:	4337      	orrs	r7, r6
100151b0:	e7be      	b.n	10015130 <__aeabi_dsub+0x4e4>
100151b2:	0002      	movs	r2, r0
100151b4:	430a      	orrs	r2, r1
100151b6:	d100      	bne.n	100151ba <__aeabi_dsub+0x56e>
100151b8:	e574      	b.n	10014ca4 <__aeabi_dsub+0x58>
100151ba:	1a6a      	subs	r2, r5, r1
100151bc:	4690      	mov	r8, r2
100151be:	4545      	cmp	r5, r8
100151c0:	41b6      	sbcs	r6, r6
100151c2:	1a3a      	subs	r2, r7, r0
100151c4:	4276      	negs	r6, r6
100151c6:	1b92      	subs	r2, r2, r6
100151c8:	4694      	mov	ip, r2
100151ca:	0212      	lsls	r2, r2, #8
100151cc:	d400      	bmi.n	100151d0 <__aeabi_dsub+0x584>
100151ce:	e5f7      	b.n	10014dc0 <__aeabi_dsub+0x174>
100151d0:	1b4d      	subs	r5, r1, r5
100151d2:	42a9      	cmp	r1, r5
100151d4:	4189      	sbcs	r1, r1
100151d6:	1bc7      	subs	r7, r0, r7
100151d8:	4249      	negs	r1, r1
100151da:	1a7f      	subs	r7, r7, r1
100151dc:	469a      	mov	sl, r3
100151de:	e561      	b.n	10014ca4 <__aeabi_dsub+0x58>
100151e0:	0002      	movs	r2, r0
100151e2:	430a      	orrs	r2, r1
100151e4:	d03a      	beq.n	1001525c <__aeabi_dsub+0x610>
100151e6:	08ed      	lsrs	r5, r5, #3
100151e8:	077c      	lsls	r4, r7, #29
100151ea:	432c      	orrs	r4, r5
100151ec:	2580      	movs	r5, #128	; 0x80
100151ee:	08fa      	lsrs	r2, r7, #3
100151f0:	032d      	lsls	r5, r5, #12
100151f2:	422a      	tst	r2, r5
100151f4:	d008      	beq.n	10015208 <__aeabi_dsub+0x5bc>
100151f6:	08c7      	lsrs	r7, r0, #3
100151f8:	422f      	tst	r7, r5
100151fa:	d105      	bne.n	10015208 <__aeabi_dsub+0x5bc>
100151fc:	0745      	lsls	r5, r0, #29
100151fe:	002c      	movs	r4, r5
10015200:	003a      	movs	r2, r7
10015202:	469a      	mov	sl, r3
10015204:	08c9      	lsrs	r1, r1, #3
10015206:	430c      	orrs	r4, r1
10015208:	0f67      	lsrs	r7, r4, #29
1001520a:	00d2      	lsls	r2, r2, #3
1001520c:	00e5      	lsls	r5, r4, #3
1001520e:	4317      	orrs	r7, r2
10015210:	4c36      	ldr	r4, [pc, #216]	; (100152ec <__aeabi_dsub+0x6a0>)
10015212:	e547      	b.n	10014ca4 <__aeabi_dsub+0x58>
10015214:	0007      	movs	r7, r0
10015216:	000d      	movs	r5, r1
10015218:	0014      	movs	r4, r2
1001521a:	e543      	b.n	10014ca4 <__aeabi_dsub+0x58>
1001521c:	003a      	movs	r2, r7
1001521e:	432a      	orrs	r2, r5
10015220:	d043      	beq.n	100152aa <__aeabi_dsub+0x65e>
10015222:	0002      	movs	r2, r0
10015224:	430a      	orrs	r2, r1
10015226:	d019      	beq.n	1001525c <__aeabi_dsub+0x610>
10015228:	08ed      	lsrs	r5, r5, #3
1001522a:	077c      	lsls	r4, r7, #29
1001522c:	432c      	orrs	r4, r5
1001522e:	2580      	movs	r5, #128	; 0x80
10015230:	08fa      	lsrs	r2, r7, #3
10015232:	032d      	lsls	r5, r5, #12
10015234:	422a      	tst	r2, r5
10015236:	d007      	beq.n	10015248 <__aeabi_dsub+0x5fc>
10015238:	08c6      	lsrs	r6, r0, #3
1001523a:	422e      	tst	r6, r5
1001523c:	d104      	bne.n	10015248 <__aeabi_dsub+0x5fc>
1001523e:	0747      	lsls	r7, r0, #29
10015240:	003c      	movs	r4, r7
10015242:	0032      	movs	r2, r6
10015244:	08c9      	lsrs	r1, r1, #3
10015246:	430c      	orrs	r4, r1
10015248:	00d7      	lsls	r7, r2, #3
1001524a:	0f62      	lsrs	r2, r4, #29
1001524c:	00e5      	lsls	r5, r4, #3
1001524e:	4317      	orrs	r7, r2
10015250:	469a      	mov	sl, r3
10015252:	4c26      	ldr	r4, [pc, #152]	; (100152ec <__aeabi_dsub+0x6a0>)
10015254:	e526      	b.n	10014ca4 <__aeabi_dsub+0x58>
10015256:	2200      	movs	r2, #0
10015258:	2500      	movs	r5, #0
1001525a:	e544      	b.n	10014ce6 <__aeabi_dsub+0x9a>
1001525c:	4c23      	ldr	r4, [pc, #140]	; (100152ec <__aeabi_dsub+0x6a0>)
1001525e:	e521      	b.n	10014ca4 <__aeabi_dsub+0x58>
10015260:	2000      	movs	r0, #0
10015262:	e749      	b.n	100150f8 <__aeabi_dsub+0x4ac>
10015264:	2300      	movs	r3, #0
10015266:	2500      	movs	r5, #0
10015268:	e5bb      	b.n	10014de2 <__aeabi_dsub+0x196>
1001526a:	464c      	mov	r4, r9
1001526c:	003e      	movs	r6, r7
1001526e:	3c20      	subs	r4, #32
10015270:	40e6      	lsrs	r6, r4
10015272:	464c      	mov	r4, r9
10015274:	46b4      	mov	ip, r6
10015276:	2c20      	cmp	r4, #32
10015278:	d031      	beq.n	100152de <__aeabi_dsub+0x692>
1001527a:	2440      	movs	r4, #64	; 0x40
1001527c:	464e      	mov	r6, r9
1001527e:	1ba6      	subs	r6, r4, r6
10015280:	40b7      	lsls	r7, r6
10015282:	433d      	orrs	r5, r7
10015284:	1e6c      	subs	r4, r5, #1
10015286:	41a5      	sbcs	r5, r4
10015288:	4664      	mov	r4, ip
1001528a:	432c      	orrs	r4, r5
1001528c:	2700      	movs	r7, #0
1001528e:	1b0d      	subs	r5, r1, r4
10015290:	e6e7      	b.n	10015062 <__aeabi_dsub+0x416>
10015292:	2280      	movs	r2, #128	; 0x80
10015294:	2300      	movs	r3, #0
10015296:	0312      	lsls	r2, r2, #12
10015298:	4c14      	ldr	r4, [pc, #80]	; (100152ec <__aeabi_dsub+0x6a0>)
1001529a:	2500      	movs	r5, #0
1001529c:	e5a1      	b.n	10014de2 <__aeabi_dsub+0x196>
1001529e:	433d      	orrs	r5, r7
100152a0:	1e6f      	subs	r7, r5, #1
100152a2:	41bd      	sbcs	r5, r7
100152a4:	2700      	movs	r7, #0
100152a6:	b2ed      	uxtb	r5, r5
100152a8:	e760      	b.n	1001516c <__aeabi_dsub+0x520>
100152aa:	0007      	movs	r7, r0
100152ac:	000d      	movs	r5, r1
100152ae:	4c0f      	ldr	r4, [pc, #60]	; (100152ec <__aeabi_dsub+0x6a0>)
100152b0:	e4f8      	b.n	10014ca4 <__aeabi_dsub+0x58>
100152b2:	0007      	movs	r7, r0
100152b4:	000d      	movs	r5, r1
100152b6:	e4f5      	b.n	10014ca4 <__aeabi_dsub+0x58>
100152b8:	464e      	mov	r6, r9
100152ba:	003c      	movs	r4, r7
100152bc:	3e20      	subs	r6, #32
100152be:	40f4      	lsrs	r4, r6
100152c0:	46a0      	mov	r8, r4
100152c2:	464c      	mov	r4, r9
100152c4:	2c20      	cmp	r4, #32
100152c6:	d00e      	beq.n	100152e6 <__aeabi_dsub+0x69a>
100152c8:	2440      	movs	r4, #64	; 0x40
100152ca:	464e      	mov	r6, r9
100152cc:	1ba4      	subs	r4, r4, r6
100152ce:	40a7      	lsls	r7, r4
100152d0:	433d      	orrs	r5, r7
100152d2:	1e6f      	subs	r7, r5, #1
100152d4:	41bd      	sbcs	r5, r7
100152d6:	4644      	mov	r4, r8
100152d8:	2700      	movs	r7, #0
100152da:	4325      	orrs	r5, r4
100152dc:	e746      	b.n	1001516c <__aeabi_dsub+0x520>
100152de:	2700      	movs	r7, #0
100152e0:	e7cf      	b.n	10015282 <__aeabi_dsub+0x636>
100152e2:	000d      	movs	r5, r1
100152e4:	e573      	b.n	10014dce <__aeabi_dsub+0x182>
100152e6:	2700      	movs	r7, #0
100152e8:	e7f2      	b.n	100152d0 <__aeabi_dsub+0x684>
100152ea:	46c0      	nop			; (mov r8, r8)
100152ec:	000007ff 	.word	0x000007ff
100152f0:	ff7fffff 	.word	0xff7fffff

100152f4 <__aeabi_dcmpun>:
100152f4:	b570      	push	{r4, r5, r6, lr}
100152f6:	4e0e      	ldr	r6, [pc, #56]	; (10015330 <__aeabi_dcmpun+0x3c>)
100152f8:	030c      	lsls	r4, r1, #12
100152fa:	031d      	lsls	r5, r3, #12
100152fc:	0049      	lsls	r1, r1, #1
100152fe:	005b      	lsls	r3, r3, #1
10015300:	0b24      	lsrs	r4, r4, #12
10015302:	0d49      	lsrs	r1, r1, #21
10015304:	0b2d      	lsrs	r5, r5, #12
10015306:	0d5b      	lsrs	r3, r3, #21
10015308:	42b1      	cmp	r1, r6
1001530a:	d004      	beq.n	10015316 <__aeabi_dcmpun+0x22>
1001530c:	4908      	ldr	r1, [pc, #32]	; (10015330 <__aeabi_dcmpun+0x3c>)
1001530e:	2000      	movs	r0, #0
10015310:	428b      	cmp	r3, r1
10015312:	d008      	beq.n	10015326 <__aeabi_dcmpun+0x32>
10015314:	bd70      	pop	{r4, r5, r6, pc}
10015316:	4304      	orrs	r4, r0
10015318:	2001      	movs	r0, #1
1001531a:	2c00      	cmp	r4, #0
1001531c:	d1fa      	bne.n	10015314 <__aeabi_dcmpun+0x20>
1001531e:	4904      	ldr	r1, [pc, #16]	; (10015330 <__aeabi_dcmpun+0x3c>)
10015320:	2000      	movs	r0, #0
10015322:	428b      	cmp	r3, r1
10015324:	d1f6      	bne.n	10015314 <__aeabi_dcmpun+0x20>
10015326:	4315      	orrs	r5, r2
10015328:	0028      	movs	r0, r5
1001532a:	1e45      	subs	r5, r0, #1
1001532c:	41a8      	sbcs	r0, r5
1001532e:	e7f1      	b.n	10015314 <__aeabi_dcmpun+0x20>
10015330:	000007ff 	.word	0x000007ff

10015334 <__aeabi_d2iz>:
10015334:	030b      	lsls	r3, r1, #12
10015336:	b530      	push	{r4, r5, lr}
10015338:	4d13      	ldr	r5, [pc, #76]	; (10015388 <__aeabi_d2iz+0x54>)
1001533a:	0b1a      	lsrs	r2, r3, #12
1001533c:	004b      	lsls	r3, r1, #1
1001533e:	0d5b      	lsrs	r3, r3, #21
10015340:	0fc9      	lsrs	r1, r1, #31
10015342:	2400      	movs	r4, #0
10015344:	42ab      	cmp	r3, r5
10015346:	dd11      	ble.n	1001536c <__aeabi_d2iz+0x38>
10015348:	4c10      	ldr	r4, [pc, #64]	; (1001538c <__aeabi_d2iz+0x58>)
1001534a:	42a3      	cmp	r3, r4
1001534c:	dc10      	bgt.n	10015370 <__aeabi_d2iz+0x3c>
1001534e:	2480      	movs	r4, #128	; 0x80
10015350:	0364      	lsls	r4, r4, #13
10015352:	4322      	orrs	r2, r4
10015354:	4c0e      	ldr	r4, [pc, #56]	; (10015390 <__aeabi_d2iz+0x5c>)
10015356:	1ae4      	subs	r4, r4, r3
10015358:	2c1f      	cmp	r4, #31
1001535a:	dd0c      	ble.n	10015376 <__aeabi_d2iz+0x42>
1001535c:	480d      	ldr	r0, [pc, #52]	; (10015394 <__aeabi_d2iz+0x60>)
1001535e:	1ac3      	subs	r3, r0, r3
10015360:	40da      	lsrs	r2, r3
10015362:	0013      	movs	r3, r2
10015364:	425c      	negs	r4, r3
10015366:	2900      	cmp	r1, #0
10015368:	d100      	bne.n	1001536c <__aeabi_d2iz+0x38>
1001536a:	001c      	movs	r4, r3
1001536c:	0020      	movs	r0, r4
1001536e:	bd30      	pop	{r4, r5, pc}
10015370:	4b09      	ldr	r3, [pc, #36]	; (10015398 <__aeabi_d2iz+0x64>)
10015372:	18cc      	adds	r4, r1, r3
10015374:	e7fa      	b.n	1001536c <__aeabi_d2iz+0x38>
10015376:	40e0      	lsrs	r0, r4
10015378:	4c08      	ldr	r4, [pc, #32]	; (1001539c <__aeabi_d2iz+0x68>)
1001537a:	46a4      	mov	ip, r4
1001537c:	4463      	add	r3, ip
1001537e:	409a      	lsls	r2, r3
10015380:	0013      	movs	r3, r2
10015382:	4303      	orrs	r3, r0
10015384:	e7ee      	b.n	10015364 <__aeabi_d2iz+0x30>
10015386:	46c0      	nop			; (mov r8, r8)
10015388:	000003fe 	.word	0x000003fe
1001538c:	0000041d 	.word	0x0000041d
10015390:	00000433 	.word	0x00000433
10015394:	00000413 	.word	0x00000413
10015398:	7fffffff 	.word	0x7fffffff
1001539c:	fffffbed 	.word	0xfffffbed

100153a0 <__aeabi_i2d>:
100153a0:	b570      	push	{r4, r5, r6, lr}
100153a2:	2800      	cmp	r0, #0
100153a4:	d030      	beq.n	10015408 <__aeabi_i2d+0x68>
100153a6:	17c3      	asrs	r3, r0, #31
100153a8:	18c4      	adds	r4, r0, r3
100153aa:	405c      	eors	r4, r3
100153ac:	0fc5      	lsrs	r5, r0, #31
100153ae:	0020      	movs	r0, r4
100153b0:	f000 f950 	bl	10015654 <__clzsi2>
100153b4:	4b17      	ldr	r3, [pc, #92]	; (10015414 <__aeabi_i2d+0x74>)
100153b6:	4a18      	ldr	r2, [pc, #96]	; (10015418 <__aeabi_i2d+0x78>)
100153b8:	1a1b      	subs	r3, r3, r0
100153ba:	1ad2      	subs	r2, r2, r3
100153bc:	2a1f      	cmp	r2, #31
100153be:	dd18      	ble.n	100153f2 <__aeabi_i2d+0x52>
100153c0:	4a16      	ldr	r2, [pc, #88]	; (1001541c <__aeabi_i2d+0x7c>)
100153c2:	1ad2      	subs	r2, r2, r3
100153c4:	4094      	lsls	r4, r2
100153c6:	2200      	movs	r2, #0
100153c8:	0324      	lsls	r4, r4, #12
100153ca:	055b      	lsls	r3, r3, #21
100153cc:	0b24      	lsrs	r4, r4, #12
100153ce:	0d5b      	lsrs	r3, r3, #21
100153d0:	2100      	movs	r1, #0
100153d2:	0010      	movs	r0, r2
100153d4:	0324      	lsls	r4, r4, #12
100153d6:	0d0a      	lsrs	r2, r1, #20
100153d8:	0512      	lsls	r2, r2, #20
100153da:	0b24      	lsrs	r4, r4, #12
100153dc:	4314      	orrs	r4, r2
100153de:	4a10      	ldr	r2, [pc, #64]	; (10015420 <__aeabi_i2d+0x80>)
100153e0:	051b      	lsls	r3, r3, #20
100153e2:	4014      	ands	r4, r2
100153e4:	431c      	orrs	r4, r3
100153e6:	0064      	lsls	r4, r4, #1
100153e8:	07ed      	lsls	r5, r5, #31
100153ea:	0864      	lsrs	r4, r4, #1
100153ec:	432c      	orrs	r4, r5
100153ee:	0021      	movs	r1, r4
100153f0:	bd70      	pop	{r4, r5, r6, pc}
100153f2:	0021      	movs	r1, r4
100153f4:	4091      	lsls	r1, r2
100153f6:	000a      	movs	r2, r1
100153f8:	210b      	movs	r1, #11
100153fa:	1a08      	subs	r0, r1, r0
100153fc:	40c4      	lsrs	r4, r0
100153fe:	055b      	lsls	r3, r3, #21
10015400:	0324      	lsls	r4, r4, #12
10015402:	0b24      	lsrs	r4, r4, #12
10015404:	0d5b      	lsrs	r3, r3, #21
10015406:	e7e3      	b.n	100153d0 <__aeabi_i2d+0x30>
10015408:	2500      	movs	r5, #0
1001540a:	2300      	movs	r3, #0
1001540c:	2400      	movs	r4, #0
1001540e:	2200      	movs	r2, #0
10015410:	e7de      	b.n	100153d0 <__aeabi_i2d+0x30>
10015412:	46c0      	nop			; (mov r8, r8)
10015414:	0000041e 	.word	0x0000041e
10015418:	00000433 	.word	0x00000433
1001541c:	00000413 	.word	0x00000413
10015420:	800fffff 	.word	0x800fffff

10015424 <__aeabi_ui2d>:
10015424:	b570      	push	{r4, r5, r6, lr}
10015426:	1e05      	subs	r5, r0, #0
10015428:	d028      	beq.n	1001547c <__aeabi_ui2d+0x58>
1001542a:	f000 f913 	bl	10015654 <__clzsi2>
1001542e:	4b15      	ldr	r3, [pc, #84]	; (10015484 <__aeabi_ui2d+0x60>)
10015430:	4a15      	ldr	r2, [pc, #84]	; (10015488 <__aeabi_ui2d+0x64>)
10015432:	1a1b      	subs	r3, r3, r0
10015434:	1ad2      	subs	r2, r2, r3
10015436:	2a1f      	cmp	r2, #31
10015438:	dd16      	ble.n	10015468 <__aeabi_ui2d+0x44>
1001543a:	002c      	movs	r4, r5
1001543c:	4a13      	ldr	r2, [pc, #76]	; (1001548c <__aeabi_ui2d+0x68>)
1001543e:	2500      	movs	r5, #0
10015440:	1ad2      	subs	r2, r2, r3
10015442:	4094      	lsls	r4, r2
10015444:	055a      	lsls	r2, r3, #21
10015446:	0324      	lsls	r4, r4, #12
10015448:	0b24      	lsrs	r4, r4, #12
1001544a:	0d52      	lsrs	r2, r2, #21
1001544c:	2100      	movs	r1, #0
1001544e:	0324      	lsls	r4, r4, #12
10015450:	0d0b      	lsrs	r3, r1, #20
10015452:	0b24      	lsrs	r4, r4, #12
10015454:	051b      	lsls	r3, r3, #20
10015456:	4323      	orrs	r3, r4
10015458:	4c0d      	ldr	r4, [pc, #52]	; (10015490 <__aeabi_ui2d+0x6c>)
1001545a:	0512      	lsls	r2, r2, #20
1001545c:	4023      	ands	r3, r4
1001545e:	4313      	orrs	r3, r2
10015460:	005b      	lsls	r3, r3, #1
10015462:	0028      	movs	r0, r5
10015464:	0859      	lsrs	r1, r3, #1
10015466:	bd70      	pop	{r4, r5, r6, pc}
10015468:	210b      	movs	r1, #11
1001546a:	002c      	movs	r4, r5
1001546c:	1a08      	subs	r0, r1, r0
1001546e:	40c4      	lsrs	r4, r0
10015470:	4095      	lsls	r5, r2
10015472:	0324      	lsls	r4, r4, #12
10015474:	055a      	lsls	r2, r3, #21
10015476:	0b24      	lsrs	r4, r4, #12
10015478:	0d52      	lsrs	r2, r2, #21
1001547a:	e7e7      	b.n	1001544c <__aeabi_ui2d+0x28>
1001547c:	2200      	movs	r2, #0
1001547e:	2400      	movs	r4, #0
10015480:	e7e4      	b.n	1001544c <__aeabi_ui2d+0x28>
10015482:	46c0      	nop			; (mov r8, r8)
10015484:	0000041e 	.word	0x0000041e
10015488:	00000433 	.word	0x00000433
1001548c:	00000413 	.word	0x00000413
10015490:	800fffff 	.word	0x800fffff

10015494 <__aeabi_f2d>:
10015494:	0042      	lsls	r2, r0, #1
10015496:	0e12      	lsrs	r2, r2, #24
10015498:	1c51      	adds	r1, r2, #1
1001549a:	0243      	lsls	r3, r0, #9
1001549c:	b2c9      	uxtb	r1, r1
1001549e:	b570      	push	{r4, r5, r6, lr}
100154a0:	0a5d      	lsrs	r5, r3, #9
100154a2:	0fc4      	lsrs	r4, r0, #31
100154a4:	2901      	cmp	r1, #1
100154a6:	dd15      	ble.n	100154d4 <__aeabi_f2d+0x40>
100154a8:	21e0      	movs	r1, #224	; 0xe0
100154aa:	0089      	lsls	r1, r1, #2
100154ac:	468c      	mov	ip, r1
100154ae:	076d      	lsls	r5, r5, #29
100154b0:	0b1b      	lsrs	r3, r3, #12
100154b2:	4462      	add	r2, ip
100154b4:	2100      	movs	r1, #0
100154b6:	0028      	movs	r0, r5
100154b8:	0d0d      	lsrs	r5, r1, #20
100154ba:	052d      	lsls	r5, r5, #20
100154bc:	432b      	orrs	r3, r5
100154be:	4d1c      	ldr	r5, [pc, #112]	; (10015530 <__aeabi_f2d+0x9c>)
100154c0:	0552      	lsls	r2, r2, #21
100154c2:	402b      	ands	r3, r5
100154c4:	0852      	lsrs	r2, r2, #1
100154c6:	4313      	orrs	r3, r2
100154c8:	005b      	lsls	r3, r3, #1
100154ca:	07e4      	lsls	r4, r4, #31
100154cc:	085b      	lsrs	r3, r3, #1
100154ce:	4323      	orrs	r3, r4
100154d0:	0019      	movs	r1, r3
100154d2:	bd70      	pop	{r4, r5, r6, pc}
100154d4:	2a00      	cmp	r2, #0
100154d6:	d115      	bne.n	10015504 <__aeabi_f2d+0x70>
100154d8:	2d00      	cmp	r5, #0
100154da:	d01f      	beq.n	1001551c <__aeabi_f2d+0x88>
100154dc:	0028      	movs	r0, r5
100154de:	f000 f8b9 	bl	10015654 <__clzsi2>
100154e2:	280a      	cmp	r0, #10
100154e4:	dc1d      	bgt.n	10015522 <__aeabi_f2d+0x8e>
100154e6:	230b      	movs	r3, #11
100154e8:	002a      	movs	r2, r5
100154ea:	1a1b      	subs	r3, r3, r0
100154ec:	40da      	lsrs	r2, r3
100154ee:	0013      	movs	r3, r2
100154f0:	0002      	movs	r2, r0
100154f2:	3215      	adds	r2, #21
100154f4:	4095      	lsls	r5, r2
100154f6:	4a0f      	ldr	r2, [pc, #60]	; (10015534 <__aeabi_f2d+0xa0>)
100154f8:	031b      	lsls	r3, r3, #12
100154fa:	1a12      	subs	r2, r2, r0
100154fc:	0552      	lsls	r2, r2, #21
100154fe:	0b1b      	lsrs	r3, r3, #12
10015500:	0d52      	lsrs	r2, r2, #21
10015502:	e7d7      	b.n	100154b4 <__aeabi_f2d+0x20>
10015504:	2d00      	cmp	r5, #0
10015506:	d006      	beq.n	10015516 <__aeabi_f2d+0x82>
10015508:	2280      	movs	r2, #128	; 0x80
1001550a:	0b1b      	lsrs	r3, r3, #12
1001550c:	0312      	lsls	r2, r2, #12
1001550e:	4313      	orrs	r3, r2
10015510:	076d      	lsls	r5, r5, #29
10015512:	4a09      	ldr	r2, [pc, #36]	; (10015538 <__aeabi_f2d+0xa4>)
10015514:	e7ce      	b.n	100154b4 <__aeabi_f2d+0x20>
10015516:	4a08      	ldr	r2, [pc, #32]	; (10015538 <__aeabi_f2d+0xa4>)
10015518:	2300      	movs	r3, #0
1001551a:	e7cb      	b.n	100154b4 <__aeabi_f2d+0x20>
1001551c:	2200      	movs	r2, #0
1001551e:	2300      	movs	r3, #0
10015520:	e7c8      	b.n	100154b4 <__aeabi_f2d+0x20>
10015522:	0003      	movs	r3, r0
10015524:	3b0b      	subs	r3, #11
10015526:	409d      	lsls	r5, r3
10015528:	002b      	movs	r3, r5
1001552a:	2500      	movs	r5, #0
1001552c:	e7e3      	b.n	100154f6 <__aeabi_f2d+0x62>
1001552e:	46c0      	nop			; (mov r8, r8)
10015530:	800fffff 	.word	0x800fffff
10015534:	00000389 	.word	0x00000389
10015538:	000007ff 	.word	0x000007ff

1001553c <__aeabi_d2f>:
1001553c:	004b      	lsls	r3, r1, #1
1001553e:	b570      	push	{r4, r5, r6, lr}
10015540:	0d5e      	lsrs	r6, r3, #21
10015542:	030c      	lsls	r4, r1, #12
10015544:	1c75      	adds	r5, r6, #1
10015546:	0a64      	lsrs	r4, r4, #9
10015548:	0f42      	lsrs	r2, r0, #29
1001554a:	056d      	lsls	r5, r5, #21
1001554c:	4322      	orrs	r2, r4
1001554e:	0fc9      	lsrs	r1, r1, #31
10015550:	00c4      	lsls	r4, r0, #3
10015552:	0d6d      	lsrs	r5, r5, #21
10015554:	2d01      	cmp	r5, #1
10015556:	dd2a      	ble.n	100155ae <__aeabi_d2f+0x72>
10015558:	4b3b      	ldr	r3, [pc, #236]	; (10015648 <__aeabi_d2f+0x10c>)
1001555a:	18f3      	adds	r3, r6, r3
1001555c:	2bfe      	cmp	r3, #254	; 0xfe
1001555e:	dc1a      	bgt.n	10015596 <__aeabi_d2f+0x5a>
10015560:	2b00      	cmp	r3, #0
10015562:	dd42      	ble.n	100155ea <__aeabi_d2f+0xae>
10015564:	0180      	lsls	r0, r0, #6
10015566:	1e45      	subs	r5, r0, #1
10015568:	41a8      	sbcs	r0, r5
1001556a:	00d2      	lsls	r2, r2, #3
1001556c:	4310      	orrs	r0, r2
1001556e:	0f62      	lsrs	r2, r4, #29
10015570:	4302      	orrs	r2, r0
10015572:	0750      	lsls	r0, r2, #29
10015574:	d004      	beq.n	10015580 <__aeabi_d2f+0x44>
10015576:	200f      	movs	r0, #15
10015578:	4010      	ands	r0, r2
1001557a:	2804      	cmp	r0, #4
1001557c:	d000      	beq.n	10015580 <__aeabi_d2f+0x44>
1001557e:	3204      	adds	r2, #4
10015580:	2080      	movs	r0, #128	; 0x80
10015582:	04c0      	lsls	r0, r0, #19
10015584:	4010      	ands	r0, r2
10015586:	d021      	beq.n	100155cc <__aeabi_d2f+0x90>
10015588:	3301      	adds	r3, #1
1001558a:	2bff      	cmp	r3, #255	; 0xff
1001558c:	d003      	beq.n	10015596 <__aeabi_d2f+0x5a>
1001558e:	0192      	lsls	r2, r2, #6
10015590:	0a52      	lsrs	r2, r2, #9
10015592:	b2db      	uxtb	r3, r3
10015594:	e001      	b.n	1001559a <__aeabi_d2f+0x5e>
10015596:	23ff      	movs	r3, #255	; 0xff
10015598:	2200      	movs	r2, #0
1001559a:	0252      	lsls	r2, r2, #9
1001559c:	0a52      	lsrs	r2, r2, #9
1001559e:	05db      	lsls	r3, r3, #23
100155a0:	4313      	orrs	r3, r2
100155a2:	005b      	lsls	r3, r3, #1
100155a4:	07c9      	lsls	r1, r1, #31
100155a6:	085b      	lsrs	r3, r3, #1
100155a8:	430b      	orrs	r3, r1
100155aa:	0018      	movs	r0, r3
100155ac:	bd70      	pop	{r4, r5, r6, pc}
100155ae:	2e00      	cmp	r6, #0
100155b0:	d007      	beq.n	100155c2 <__aeabi_d2f+0x86>
100155b2:	4314      	orrs	r4, r2
100155b4:	d0ef      	beq.n	10015596 <__aeabi_d2f+0x5a>
100155b6:	2080      	movs	r0, #128	; 0x80
100155b8:	00d2      	lsls	r2, r2, #3
100155ba:	0480      	lsls	r0, r0, #18
100155bc:	4302      	orrs	r2, r0
100155be:	23ff      	movs	r3, #255	; 0xff
100155c0:	e7d7      	b.n	10015572 <__aeabi_d2f+0x36>
100155c2:	4322      	orrs	r2, r4
100155c4:	2300      	movs	r3, #0
100155c6:	2a00      	cmp	r2, #0
100155c8:	d003      	beq.n	100155d2 <__aeabi_d2f+0x96>
100155ca:	2205      	movs	r2, #5
100155cc:	08d2      	lsrs	r2, r2, #3
100155ce:	2bff      	cmp	r3, #255	; 0xff
100155d0:	d003      	beq.n	100155da <__aeabi_d2f+0x9e>
100155d2:	0252      	lsls	r2, r2, #9
100155d4:	0a52      	lsrs	r2, r2, #9
100155d6:	b2db      	uxtb	r3, r3
100155d8:	e7df      	b.n	1001559a <__aeabi_d2f+0x5e>
100155da:	2a00      	cmp	r2, #0
100155dc:	d032      	beq.n	10015644 <__aeabi_d2f+0x108>
100155de:	2080      	movs	r0, #128	; 0x80
100155e0:	03c0      	lsls	r0, r0, #15
100155e2:	4302      	orrs	r2, r0
100155e4:	0252      	lsls	r2, r2, #9
100155e6:	0a52      	lsrs	r2, r2, #9
100155e8:	e7d7      	b.n	1001559a <__aeabi_d2f+0x5e>
100155ea:	0018      	movs	r0, r3
100155ec:	3017      	adds	r0, #23
100155ee:	db14      	blt.n	1001561a <__aeabi_d2f+0xde>
100155f0:	2080      	movs	r0, #128	; 0x80
100155f2:	0400      	lsls	r0, r0, #16
100155f4:	4302      	orrs	r2, r0
100155f6:	201e      	movs	r0, #30
100155f8:	1ac0      	subs	r0, r0, r3
100155fa:	281f      	cmp	r0, #31
100155fc:	dc0f      	bgt.n	1001561e <__aeabi_d2f+0xe2>
100155fe:	0025      	movs	r5, r4
10015600:	4b12      	ldr	r3, [pc, #72]	; (1001564c <__aeabi_d2f+0x110>)
10015602:	18f3      	adds	r3, r6, r3
10015604:	409d      	lsls	r5, r3
10015606:	1e6e      	subs	r6, r5, #1
10015608:	41b5      	sbcs	r5, r6
1001560a:	409a      	lsls	r2, r3
1001560c:	002b      	movs	r3, r5
1001560e:	4313      	orrs	r3, r2
10015610:	0022      	movs	r2, r4
10015612:	40c2      	lsrs	r2, r0
10015614:	431a      	orrs	r2, r3
10015616:	2300      	movs	r3, #0
10015618:	e7ab      	b.n	10015572 <__aeabi_d2f+0x36>
1001561a:	2300      	movs	r3, #0
1001561c:	e7d5      	b.n	100155ca <__aeabi_d2f+0x8e>
1001561e:	2502      	movs	r5, #2
10015620:	426d      	negs	r5, r5
10015622:	1aeb      	subs	r3, r5, r3
10015624:	0015      	movs	r5, r2
10015626:	40dd      	lsrs	r5, r3
10015628:	2820      	cmp	r0, #32
1001562a:	d009      	beq.n	10015640 <__aeabi_d2f+0x104>
1001562c:	4b08      	ldr	r3, [pc, #32]	; (10015650 <__aeabi_d2f+0x114>)
1001562e:	18f3      	adds	r3, r6, r3
10015630:	409a      	lsls	r2, r3
10015632:	4314      	orrs	r4, r2
10015634:	1e62      	subs	r2, r4, #1
10015636:	4194      	sbcs	r4, r2
10015638:	0022      	movs	r2, r4
1001563a:	2300      	movs	r3, #0
1001563c:	432a      	orrs	r2, r5
1001563e:	e798      	b.n	10015572 <__aeabi_d2f+0x36>
10015640:	2200      	movs	r2, #0
10015642:	e7f6      	b.n	10015632 <__aeabi_d2f+0xf6>
10015644:	2200      	movs	r2, #0
10015646:	e7a8      	b.n	1001559a <__aeabi_d2f+0x5e>
10015648:	fffffc80 	.word	0xfffffc80
1001564c:	fffffc82 	.word	0xfffffc82
10015650:	fffffca2 	.word	0xfffffca2

10015654 <__clzsi2>:
10015654:	211c      	movs	r1, #28
10015656:	2301      	movs	r3, #1
10015658:	041b      	lsls	r3, r3, #16
1001565a:	4298      	cmp	r0, r3
1001565c:	d301      	bcc.n	10015662 <__clzsi2+0xe>
1001565e:	0c00      	lsrs	r0, r0, #16
10015660:	3910      	subs	r1, #16
10015662:	0a1b      	lsrs	r3, r3, #8
10015664:	4298      	cmp	r0, r3
10015666:	d301      	bcc.n	1001566c <__clzsi2+0x18>
10015668:	0a00      	lsrs	r0, r0, #8
1001566a:	3908      	subs	r1, #8
1001566c:	091b      	lsrs	r3, r3, #4
1001566e:	4298      	cmp	r0, r3
10015670:	d301      	bcc.n	10015676 <__clzsi2+0x22>
10015672:	0900      	lsrs	r0, r0, #4
10015674:	3904      	subs	r1, #4
10015676:	a202      	add	r2, pc, #8	; (adr r2, 10015680 <__clzsi2+0x2c>)
10015678:	5c10      	ldrb	r0, [r2, r0]
1001567a:	1840      	adds	r0, r0, r1
1001567c:	4770      	bx	lr
1001567e:	46c0      	nop			; (mov r8, r8)
10015680:	02020304 	.word	0x02020304
10015684:	01010101 	.word	0x01010101
	...

10015690 <__errno>:
10015690:	4b01      	ldr	r3, [pc, #4]	; (10015698 <__errno+0x8>)
10015692:	6818      	ldr	r0, [r3, #0]
10015694:	4770      	bx	lr
10015696:	46c0      	nop			; (mov r8, r8)
10015698:	10018468 	.word	0x10018468

1001569c <__libc_init_array>:
1001569c:	4b0e      	ldr	r3, [pc, #56]	; (100156d8 <__libc_init_array+0x3c>)
1001569e:	b570      	push	{r4, r5, r6, lr}
100156a0:	2500      	movs	r5, #0
100156a2:	001e      	movs	r6, r3
100156a4:	4c0d      	ldr	r4, [pc, #52]	; (100156dc <__libc_init_array+0x40>)
100156a6:	1ae4      	subs	r4, r4, r3
100156a8:	10a4      	asrs	r4, r4, #2
100156aa:	42a5      	cmp	r5, r4
100156ac:	d004      	beq.n	100156b8 <__libc_init_array+0x1c>
100156ae:	00ab      	lsls	r3, r5, #2
100156b0:	58f3      	ldr	r3, [r6, r3]
100156b2:	4798      	blx	r3
100156b4:	3501      	adds	r5, #1
100156b6:	e7f8      	b.n	100156aa <__libc_init_array+0xe>
100156b8:	f002 fe90 	bl	100183dc <_init>
100156bc:	4b08      	ldr	r3, [pc, #32]	; (100156e0 <__libc_init_array+0x44>)
100156be:	2500      	movs	r5, #0
100156c0:	001e      	movs	r6, r3
100156c2:	4c08      	ldr	r4, [pc, #32]	; (100156e4 <__libc_init_array+0x48>)
100156c4:	1ae4      	subs	r4, r4, r3
100156c6:	10a4      	asrs	r4, r4, #2
100156c8:	42a5      	cmp	r5, r4
100156ca:	d004      	beq.n	100156d6 <__libc_init_array+0x3a>
100156cc:	00ab      	lsls	r3, r5, #2
100156ce:	58f3      	ldr	r3, [r6, r3]
100156d0:	4798      	blx	r3
100156d2:	3501      	adds	r5, #1
100156d4:	e7f8      	b.n	100156c8 <__libc_init_array+0x2c>
100156d6:	bd70      	pop	{r4, r5, r6, pc}
100156d8:	100183e8 	.word	0x100183e8
100156dc:	100183e8 	.word	0x100183e8
100156e0:	100183e8 	.word	0x100183e8
100156e4:	100183ec 	.word	0x100183ec

100156e8 <malloc>:
100156e8:	b510      	push	{r4, lr}
100156ea:	4b03      	ldr	r3, [pc, #12]	; (100156f8 <malloc+0x10>)
100156ec:	0001      	movs	r1, r0
100156ee:	6818      	ldr	r0, [r3, #0]
100156f0:	f000 f86a 	bl	100157c8 <_malloc_r>
100156f4:	bd10      	pop	{r4, pc}
100156f6:	46c0      	nop			; (mov r8, r8)
100156f8:	10018468 	.word	0x10018468

100156fc <memcmp>:
100156fc:	b530      	push	{r4, r5, lr}
100156fe:	2400      	movs	r4, #0
10015700:	42a2      	cmp	r2, r4
10015702:	d008      	beq.n	10015716 <memcmp+0x1a>
10015704:	5d03      	ldrb	r3, [r0, r4]
10015706:	1c65      	adds	r5, r4, #1
10015708:	5d0c      	ldrb	r4, [r1, r4]
1001570a:	42a3      	cmp	r3, r4
1001570c:	d001      	beq.n	10015712 <memcmp+0x16>
1001570e:	1b18      	subs	r0, r3, r4
10015710:	e002      	b.n	10015718 <memcmp+0x1c>
10015712:	002c      	movs	r4, r5
10015714:	e7f4      	b.n	10015700 <memcmp+0x4>
10015716:	2000      	movs	r0, #0
10015718:	bd30      	pop	{r4, r5, pc}

1001571a <memcpy>:
1001571a:	2300      	movs	r3, #0
1001571c:	b510      	push	{r4, lr}
1001571e:	429a      	cmp	r2, r3
10015720:	d003      	beq.n	1001572a <memcpy+0x10>
10015722:	5ccc      	ldrb	r4, [r1, r3]
10015724:	54c4      	strb	r4, [r0, r3]
10015726:	3301      	adds	r3, #1
10015728:	e7f9      	b.n	1001571e <memcpy+0x4>
1001572a:	bd10      	pop	{r4, pc}

1001572c <memset>:
1001572c:	0003      	movs	r3, r0
1001572e:	1882      	adds	r2, r0, r2
10015730:	4293      	cmp	r3, r2
10015732:	d002      	beq.n	1001573a <memset+0xe>
10015734:	7019      	strb	r1, [r3, #0]
10015736:	3301      	adds	r3, #1
10015738:	e7fa      	b.n	10015730 <memset+0x4>
1001573a:	4770      	bx	lr

1001573c <_free_r>:
1001573c:	b530      	push	{r4, r5, lr}
1001573e:	2900      	cmp	r1, #0
10015740:	d03e      	beq.n	100157c0 <_free_r+0x84>
10015742:	3904      	subs	r1, #4
10015744:	680b      	ldr	r3, [r1, #0]
10015746:	2b00      	cmp	r3, #0
10015748:	da00      	bge.n	1001574c <_free_r+0x10>
1001574a:	18c9      	adds	r1, r1, r3
1001574c:	4a1d      	ldr	r2, [pc, #116]	; (100157c4 <_free_r+0x88>)
1001574e:	6813      	ldr	r3, [r2, #0]
10015750:	0014      	movs	r4, r2
10015752:	2b00      	cmp	r3, #0
10015754:	d102      	bne.n	1001575c <_free_r+0x20>
10015756:	604b      	str	r3, [r1, #4]
10015758:	6011      	str	r1, [r2, #0]
1001575a:	e031      	b.n	100157c0 <_free_r+0x84>
1001575c:	428b      	cmp	r3, r1
1001575e:	d90d      	bls.n	1001577c <_free_r+0x40>
10015760:	680a      	ldr	r2, [r1, #0]
10015762:	1888      	adds	r0, r1, r2
10015764:	4283      	cmp	r3, r0
10015766:	d103      	bne.n	10015770 <_free_r+0x34>
10015768:	6818      	ldr	r0, [r3, #0]
1001576a:	685b      	ldr	r3, [r3, #4]
1001576c:	1882      	adds	r2, r0, r2
1001576e:	600a      	str	r2, [r1, #0]
10015770:	604b      	str	r3, [r1, #4]
10015772:	6021      	str	r1, [r4, #0]
10015774:	e024      	b.n	100157c0 <_free_r+0x84>
10015776:	428a      	cmp	r2, r1
10015778:	d803      	bhi.n	10015782 <_free_r+0x46>
1001577a:	0013      	movs	r3, r2
1001577c:	685a      	ldr	r2, [r3, #4]
1001577e:	2a00      	cmp	r2, #0
10015780:	d1f9      	bne.n	10015776 <_free_r+0x3a>
10015782:	681d      	ldr	r5, [r3, #0]
10015784:	195c      	adds	r4, r3, r5
10015786:	428c      	cmp	r4, r1
10015788:	d10b      	bne.n	100157a2 <_free_r+0x66>
1001578a:	6809      	ldr	r1, [r1, #0]
1001578c:	1869      	adds	r1, r5, r1
1001578e:	1858      	adds	r0, r3, r1
10015790:	6019      	str	r1, [r3, #0]
10015792:	4282      	cmp	r2, r0
10015794:	d114      	bne.n	100157c0 <_free_r+0x84>
10015796:	6810      	ldr	r0, [r2, #0]
10015798:	6852      	ldr	r2, [r2, #4]
1001579a:	1841      	adds	r1, r0, r1
1001579c:	6019      	str	r1, [r3, #0]
1001579e:	605a      	str	r2, [r3, #4]
100157a0:	e00e      	b.n	100157c0 <_free_r+0x84>
100157a2:	428c      	cmp	r4, r1
100157a4:	d902      	bls.n	100157ac <_free_r+0x70>
100157a6:	230c      	movs	r3, #12
100157a8:	6003      	str	r3, [r0, #0]
100157aa:	e009      	b.n	100157c0 <_free_r+0x84>
100157ac:	6808      	ldr	r0, [r1, #0]
100157ae:	180c      	adds	r4, r1, r0
100157b0:	42a2      	cmp	r2, r4
100157b2:	d103      	bne.n	100157bc <_free_r+0x80>
100157b4:	6814      	ldr	r4, [r2, #0]
100157b6:	6852      	ldr	r2, [r2, #4]
100157b8:	1820      	adds	r0, r4, r0
100157ba:	6008      	str	r0, [r1, #0]
100157bc:	604a      	str	r2, [r1, #4]
100157be:	6059      	str	r1, [r3, #4]
100157c0:	bd30      	pop	{r4, r5, pc}
100157c2:	46c0      	nop			; (mov r8, r8)
100157c4:	10019f2c 	.word	0x10019f2c

100157c8 <_malloc_r>:
100157c8:	2303      	movs	r3, #3
100157ca:	b570      	push	{r4, r5, r6, lr}
100157cc:	1ccd      	adds	r5, r1, #3
100157ce:	439d      	bics	r5, r3
100157d0:	3508      	adds	r5, #8
100157d2:	0006      	movs	r6, r0
100157d4:	2d0c      	cmp	r5, #12
100157d6:	d201      	bcs.n	100157dc <_malloc_r+0x14>
100157d8:	250c      	movs	r5, #12
100157da:	e005      	b.n	100157e8 <_malloc_r+0x20>
100157dc:	2d00      	cmp	r5, #0
100157de:	da03      	bge.n	100157e8 <_malloc_r+0x20>
100157e0:	230c      	movs	r3, #12
100157e2:	2000      	movs	r0, #0
100157e4:	6033      	str	r3, [r6, #0]
100157e6:	e040      	b.n	1001586a <_malloc_r+0xa2>
100157e8:	42a9      	cmp	r1, r5
100157ea:	d8f9      	bhi.n	100157e0 <_malloc_r+0x18>
100157ec:	4b1f      	ldr	r3, [pc, #124]	; (1001586c <_malloc_r+0xa4>)
100157ee:	681c      	ldr	r4, [r3, #0]
100157f0:	001a      	movs	r2, r3
100157f2:	0021      	movs	r1, r4
100157f4:	2900      	cmp	r1, #0
100157f6:	d013      	beq.n	10015820 <_malloc_r+0x58>
100157f8:	680b      	ldr	r3, [r1, #0]
100157fa:	1b5b      	subs	r3, r3, r5
100157fc:	d40d      	bmi.n	1001581a <_malloc_r+0x52>
100157fe:	2b0b      	cmp	r3, #11
10015800:	d902      	bls.n	10015808 <_malloc_r+0x40>
10015802:	600b      	str	r3, [r1, #0]
10015804:	18cc      	adds	r4, r1, r3
10015806:	e01e      	b.n	10015846 <_malloc_r+0x7e>
10015808:	428c      	cmp	r4, r1
1001580a:	d102      	bne.n	10015812 <_malloc_r+0x4a>
1001580c:	6863      	ldr	r3, [r4, #4]
1001580e:	6013      	str	r3, [r2, #0]
10015810:	e01a      	b.n	10015848 <_malloc_r+0x80>
10015812:	684b      	ldr	r3, [r1, #4]
10015814:	6063      	str	r3, [r4, #4]
10015816:	000c      	movs	r4, r1
10015818:	e016      	b.n	10015848 <_malloc_r+0x80>
1001581a:	000c      	movs	r4, r1
1001581c:	6849      	ldr	r1, [r1, #4]
1001581e:	e7e9      	b.n	100157f4 <_malloc_r+0x2c>
10015820:	4c13      	ldr	r4, [pc, #76]	; (10015870 <_malloc_r+0xa8>)
10015822:	6823      	ldr	r3, [r4, #0]
10015824:	2b00      	cmp	r3, #0
10015826:	d103      	bne.n	10015830 <_malloc_r+0x68>
10015828:	0030      	movs	r0, r6
1001582a:	f000 f8f9 	bl	10015a20 <_sbrk_r>
1001582e:	6020      	str	r0, [r4, #0]
10015830:	0029      	movs	r1, r5
10015832:	0030      	movs	r0, r6
10015834:	f000 f8f4 	bl	10015a20 <_sbrk_r>
10015838:	1c43      	adds	r3, r0, #1
1001583a:	d0d1      	beq.n	100157e0 <_malloc_r+0x18>
1001583c:	2303      	movs	r3, #3
1001583e:	1cc4      	adds	r4, r0, #3
10015840:	439c      	bics	r4, r3
10015842:	42a0      	cmp	r0, r4
10015844:	d10a      	bne.n	1001585c <_malloc_r+0x94>
10015846:	6025      	str	r5, [r4, #0]
10015848:	0020      	movs	r0, r4
1001584a:	2207      	movs	r2, #7
1001584c:	300b      	adds	r0, #11
1001584e:	1d23      	adds	r3, r4, #4
10015850:	4390      	bics	r0, r2
10015852:	1ac3      	subs	r3, r0, r3
10015854:	d009      	beq.n	1001586a <_malloc_r+0xa2>
10015856:	425a      	negs	r2, r3
10015858:	50e2      	str	r2, [r4, r3]
1001585a:	e006      	b.n	1001586a <_malloc_r+0xa2>
1001585c:	1a21      	subs	r1, r4, r0
1001585e:	0030      	movs	r0, r6
10015860:	f000 f8de 	bl	10015a20 <_sbrk_r>
10015864:	1c43      	adds	r3, r0, #1
10015866:	d1ee      	bne.n	10015846 <_malloc_r+0x7e>
10015868:	e7ba      	b.n	100157e0 <_malloc_r+0x18>
1001586a:	bd70      	pop	{r4, r5, r6, pc}
1001586c:	10019f2c 	.word	0x10019f2c
10015870:	10019f28 	.word	0x10019f28

10015874 <iprintf>:
10015874:	b40f      	push	{r0, r1, r2, r3}
10015876:	4b0b      	ldr	r3, [pc, #44]	; (100158a4 <iprintf+0x30>)
10015878:	b513      	push	{r0, r1, r4, lr}
1001587a:	681c      	ldr	r4, [r3, #0]
1001587c:	2c00      	cmp	r4, #0
1001587e:	d005      	beq.n	1001588c <iprintf+0x18>
10015880:	69a3      	ldr	r3, [r4, #24]
10015882:	2b00      	cmp	r3, #0
10015884:	d102      	bne.n	1001588c <iprintf+0x18>
10015886:	0020      	movs	r0, r4
10015888:	f000 fb58 	bl	10015f3c <__sinit>
1001588c:	ab05      	add	r3, sp, #20
1001588e:	9a04      	ldr	r2, [sp, #16]
10015890:	68a1      	ldr	r1, [r4, #8]
10015892:	0020      	movs	r0, r4
10015894:	9301      	str	r3, [sp, #4]
10015896:	f000 fc71 	bl	1001617c <_vfiprintf_r>
1001589a:	bc16      	pop	{r1, r2, r4}
1001589c:	bc08      	pop	{r3}
1001589e:	b004      	add	sp, #16
100158a0:	4718      	bx	r3
100158a2:	46c0      	nop			; (mov r8, r8)
100158a4:	10018468 	.word	0x10018468

100158a8 <putchar>:
100158a8:	4b08      	ldr	r3, [pc, #32]	; (100158cc <putchar+0x24>)
100158aa:	b570      	push	{r4, r5, r6, lr}
100158ac:	681c      	ldr	r4, [r3, #0]
100158ae:	0005      	movs	r5, r0
100158b0:	2c00      	cmp	r4, #0
100158b2:	d005      	beq.n	100158c0 <putchar+0x18>
100158b4:	69a3      	ldr	r3, [r4, #24]
100158b6:	2b00      	cmp	r3, #0
100158b8:	d102      	bne.n	100158c0 <putchar+0x18>
100158ba:	0020      	movs	r0, r4
100158bc:	f000 fb3e 	bl	10015f3c <__sinit>
100158c0:	0029      	movs	r1, r5
100158c2:	68a2      	ldr	r2, [r4, #8]
100158c4:	0020      	movs	r0, r4
100158c6:	f000 ff05 	bl	100166d4 <_putc_r>
100158ca:	bd70      	pop	{r4, r5, r6, pc}
100158cc:	10018468 	.word	0x10018468

100158d0 <_puts_r>:
100158d0:	b570      	push	{r4, r5, r6, lr}
100158d2:	0005      	movs	r5, r0
100158d4:	000e      	movs	r6, r1
100158d6:	2800      	cmp	r0, #0
100158d8:	d004      	beq.n	100158e4 <_puts_r+0x14>
100158da:	6983      	ldr	r3, [r0, #24]
100158dc:	2b00      	cmp	r3, #0
100158de:	d101      	bne.n	100158e4 <_puts_r+0x14>
100158e0:	f000 fb2c 	bl	10015f3c <__sinit>
100158e4:	69ab      	ldr	r3, [r5, #24]
100158e6:	68ac      	ldr	r4, [r5, #8]
100158e8:	2b00      	cmp	r3, #0
100158ea:	d102      	bne.n	100158f2 <_puts_r+0x22>
100158ec:	0028      	movs	r0, r5
100158ee:	f000 fb25 	bl	10015f3c <__sinit>
100158f2:	4b25      	ldr	r3, [pc, #148]	; (10015988 <_puts_r+0xb8>)
100158f4:	429c      	cmp	r4, r3
100158f6:	d101      	bne.n	100158fc <_puts_r+0x2c>
100158f8:	686c      	ldr	r4, [r5, #4]
100158fa:	e008      	b.n	1001590e <_puts_r+0x3e>
100158fc:	4b23      	ldr	r3, [pc, #140]	; (1001598c <_puts_r+0xbc>)
100158fe:	429c      	cmp	r4, r3
10015900:	d101      	bne.n	10015906 <_puts_r+0x36>
10015902:	68ac      	ldr	r4, [r5, #8]
10015904:	e003      	b.n	1001590e <_puts_r+0x3e>
10015906:	4b22      	ldr	r3, [pc, #136]	; (10015990 <_puts_r+0xc0>)
10015908:	429c      	cmp	r4, r3
1001590a:	d100      	bne.n	1001590e <_puts_r+0x3e>
1001590c:	68ec      	ldr	r4, [r5, #12]
1001590e:	89a3      	ldrh	r3, [r4, #12]
10015910:	071b      	lsls	r3, r3, #28
10015912:	d502      	bpl.n	1001591a <_puts_r+0x4a>
10015914:	6923      	ldr	r3, [r4, #16]
10015916:	2b00      	cmp	r3, #0
10015918:	d111      	bne.n	1001593e <_puts_r+0x6e>
1001591a:	0021      	movs	r1, r4
1001591c:	0028      	movs	r0, r5
1001591e:	f000 f9a3 	bl	10015c68 <__swsetup_r>
10015922:	2800      	cmp	r0, #0
10015924:	d00b      	beq.n	1001593e <_puts_r+0x6e>
10015926:	2001      	movs	r0, #1
10015928:	4240      	negs	r0, r0
1001592a:	e02b      	b.n	10015984 <_puts_r+0xb4>
1001592c:	3b01      	subs	r3, #1
1001592e:	3601      	adds	r6, #1
10015930:	60a3      	str	r3, [r4, #8]
10015932:	2b00      	cmp	r3, #0
10015934:	db08      	blt.n	10015948 <_puts_r+0x78>
10015936:	6823      	ldr	r3, [r4, #0]
10015938:	1c5a      	adds	r2, r3, #1
1001593a:	6022      	str	r2, [r4, #0]
1001593c:	7019      	strb	r1, [r3, #0]
1001593e:	7831      	ldrb	r1, [r6, #0]
10015940:	68a3      	ldr	r3, [r4, #8]
10015942:	2900      	cmp	r1, #0
10015944:	d1f2      	bne.n	1001592c <_puts_r+0x5c>
10015946:	e00b      	b.n	10015960 <_puts_r+0x90>
10015948:	69a2      	ldr	r2, [r4, #24]
1001594a:	4293      	cmp	r3, r2
1001594c:	db01      	blt.n	10015952 <_puts_r+0x82>
1001594e:	290a      	cmp	r1, #10
10015950:	d1f1      	bne.n	10015936 <_puts_r+0x66>
10015952:	0022      	movs	r2, r4
10015954:	0028      	movs	r0, r5
10015956:	f000 f92f 	bl	10015bb8 <__swbuf_r>
1001595a:	1c43      	adds	r3, r0, #1
1001595c:	d1ef      	bne.n	1001593e <_puts_r+0x6e>
1001595e:	e7e2      	b.n	10015926 <_puts_r+0x56>
10015960:	3b01      	subs	r3, #1
10015962:	60a3      	str	r3, [r4, #8]
10015964:	2b00      	cmp	r3, #0
10015966:	da08      	bge.n	1001597a <_puts_r+0xaa>
10015968:	0022      	movs	r2, r4
1001596a:	310a      	adds	r1, #10
1001596c:	0028      	movs	r0, r5
1001596e:	f000 f923 	bl	10015bb8 <__swbuf_r>
10015972:	1c43      	adds	r3, r0, #1
10015974:	d0d7      	beq.n	10015926 <_puts_r+0x56>
10015976:	200a      	movs	r0, #10
10015978:	e004      	b.n	10015984 <_puts_r+0xb4>
1001597a:	200a      	movs	r0, #10
1001597c:	6823      	ldr	r3, [r4, #0]
1001597e:	1c5a      	adds	r2, r3, #1
10015980:	6022      	str	r2, [r4, #0]
10015982:	7018      	strb	r0, [r3, #0]
10015984:	bd70      	pop	{r4, r5, r6, pc}
10015986:	46c0      	nop			; (mov r8, r8)
10015988:	10018348 	.word	0x10018348
1001598c:	10018368 	.word	0x10018368
10015990:	10018388 	.word	0x10018388

10015994 <puts>:
10015994:	b510      	push	{r4, lr}
10015996:	4b03      	ldr	r3, [pc, #12]	; (100159a4 <puts+0x10>)
10015998:	0001      	movs	r1, r0
1001599a:	6818      	ldr	r0, [r3, #0]
1001599c:	f7ff ff98 	bl	100158d0 <_puts_r>
100159a0:	bd10      	pop	{r4, pc}
100159a2:	46c0      	nop			; (mov r8, r8)
100159a4:	10018468 	.word	0x10018468

100159a8 <rand>:
100159a8:	4b15      	ldr	r3, [pc, #84]	; (10015a00 <rand+0x58>)
100159aa:	b510      	push	{r4, lr}
100159ac:	681c      	ldr	r4, [r3, #0]
100159ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
100159b0:	2b00      	cmp	r3, #0
100159b2:	d115      	bne.n	100159e0 <rand+0x38>
100159b4:	2018      	movs	r0, #24
100159b6:	f7ff fe97 	bl	100156e8 <malloc>
100159ba:	4b12      	ldr	r3, [pc, #72]	; (10015a04 <rand+0x5c>)
100159bc:	63a0      	str	r0, [r4, #56]	; 0x38
100159be:	8003      	strh	r3, [r0, #0]
100159c0:	4b11      	ldr	r3, [pc, #68]	; (10015a08 <rand+0x60>)
100159c2:	2201      	movs	r2, #1
100159c4:	8043      	strh	r3, [r0, #2]
100159c6:	4b11      	ldr	r3, [pc, #68]	; (10015a0c <rand+0x64>)
100159c8:	8083      	strh	r3, [r0, #4]
100159ca:	4b11      	ldr	r3, [pc, #68]	; (10015a10 <rand+0x68>)
100159cc:	80c3      	strh	r3, [r0, #6]
100159ce:	4b11      	ldr	r3, [pc, #68]	; (10015a14 <rand+0x6c>)
100159d0:	8103      	strh	r3, [r0, #8]
100159d2:	2305      	movs	r3, #5
100159d4:	8143      	strh	r3, [r0, #10]
100159d6:	3306      	adds	r3, #6
100159d8:	8183      	strh	r3, [r0, #12]
100159da:	2300      	movs	r3, #0
100159dc:	6102      	str	r2, [r0, #16]
100159de:	6143      	str	r3, [r0, #20]
100159e0:	6ba4      	ldr	r4, [r4, #56]	; 0x38
100159e2:	4a0d      	ldr	r2, [pc, #52]	; (10015a18 <rand+0x70>)
100159e4:	6920      	ldr	r0, [r4, #16]
100159e6:	6961      	ldr	r1, [r4, #20]
100159e8:	4b0c      	ldr	r3, [pc, #48]	; (10015a1c <rand+0x74>)
100159ea:	f7fd f9f7 	bl	10012ddc <__aeabi_lmul>
100159ee:	2201      	movs	r2, #1
100159f0:	2300      	movs	r3, #0
100159f2:	1880      	adds	r0, r0, r2
100159f4:	4159      	adcs	r1, r3
100159f6:	6120      	str	r0, [r4, #16]
100159f8:	6161      	str	r1, [r4, #20]
100159fa:	0048      	lsls	r0, r1, #1
100159fc:	0840      	lsrs	r0, r0, #1
100159fe:	bd10      	pop	{r4, pc}
10015a00:	10018468 	.word	0x10018468
10015a04:	0000330e 	.word	0x0000330e
10015a08:	ffffabcd 	.word	0xffffabcd
10015a0c:	00001234 	.word	0x00001234
10015a10:	ffffe66d 	.word	0xffffe66d
10015a14:	ffffdeec 	.word	0xffffdeec
10015a18:	4c957f2d 	.word	0x4c957f2d
10015a1c:	5851f42d 	.word	0x5851f42d

10015a20 <_sbrk_r>:
10015a20:	2300      	movs	r3, #0
10015a22:	b570      	push	{r4, r5, r6, lr}
10015a24:	4c06      	ldr	r4, [pc, #24]	; (10015a40 <_sbrk_r+0x20>)
10015a26:	0005      	movs	r5, r0
10015a28:	0008      	movs	r0, r1
10015a2a:	6023      	str	r3, [r4, #0]
10015a2c:	f7f2 fce6 	bl	100083fc <_sbrk>
10015a30:	1c43      	adds	r3, r0, #1
10015a32:	d103      	bne.n	10015a3c <_sbrk_r+0x1c>
10015a34:	6823      	ldr	r3, [r4, #0]
10015a36:	2b00      	cmp	r3, #0
10015a38:	d000      	beq.n	10015a3c <_sbrk_r+0x1c>
10015a3a:	602b      	str	r3, [r5, #0]
10015a3c:	bd70      	pop	{r4, r5, r6, pc}
10015a3e:	46c0      	nop			; (mov r8, r8)
10015a40:	1001b360 	.word	0x1001b360

10015a44 <setbuf>:
10015a44:	424a      	negs	r2, r1
10015a46:	414a      	adcs	r2, r1
10015a48:	2380      	movs	r3, #128	; 0x80
10015a4a:	b510      	push	{r4, lr}
10015a4c:	0052      	lsls	r2, r2, #1
10015a4e:	00db      	lsls	r3, r3, #3
10015a50:	f000 f802 	bl	10015a58 <setvbuf>
10015a54:	bd10      	pop	{r4, pc}
	...

10015a58 <setvbuf>:
10015a58:	b5f0      	push	{r4, r5, r6, r7, lr}
10015a5a:	001d      	movs	r5, r3
10015a5c:	4b51      	ldr	r3, [pc, #324]	; (10015ba4 <setvbuf+0x14c>)
10015a5e:	b085      	sub	sp, #20
10015a60:	681e      	ldr	r6, [r3, #0]
10015a62:	0004      	movs	r4, r0
10015a64:	000f      	movs	r7, r1
10015a66:	9200      	str	r2, [sp, #0]
10015a68:	2e00      	cmp	r6, #0
10015a6a:	d005      	beq.n	10015a78 <setvbuf+0x20>
10015a6c:	69b3      	ldr	r3, [r6, #24]
10015a6e:	2b00      	cmp	r3, #0
10015a70:	d102      	bne.n	10015a78 <setvbuf+0x20>
10015a72:	0030      	movs	r0, r6
10015a74:	f000 fa62 	bl	10015f3c <__sinit>
10015a78:	4b4b      	ldr	r3, [pc, #300]	; (10015ba8 <setvbuf+0x150>)
10015a7a:	429c      	cmp	r4, r3
10015a7c:	d101      	bne.n	10015a82 <setvbuf+0x2a>
10015a7e:	6874      	ldr	r4, [r6, #4]
10015a80:	e008      	b.n	10015a94 <setvbuf+0x3c>
10015a82:	4b4a      	ldr	r3, [pc, #296]	; (10015bac <setvbuf+0x154>)
10015a84:	429c      	cmp	r4, r3
10015a86:	d101      	bne.n	10015a8c <setvbuf+0x34>
10015a88:	68b4      	ldr	r4, [r6, #8]
10015a8a:	e003      	b.n	10015a94 <setvbuf+0x3c>
10015a8c:	4b48      	ldr	r3, [pc, #288]	; (10015bb0 <setvbuf+0x158>)
10015a8e:	429c      	cmp	r4, r3
10015a90:	d100      	bne.n	10015a94 <setvbuf+0x3c>
10015a92:	68f4      	ldr	r4, [r6, #12]
10015a94:	9b00      	ldr	r3, [sp, #0]
10015a96:	2b02      	cmp	r3, #2
10015a98:	d005      	beq.n	10015aa6 <setvbuf+0x4e>
10015a9a:	2b01      	cmp	r3, #1
10015a9c:	d900      	bls.n	10015aa0 <setvbuf+0x48>
10015a9e:	e07c      	b.n	10015b9a <setvbuf+0x142>
10015aa0:	2d00      	cmp	r5, #0
10015aa2:	da00      	bge.n	10015aa6 <setvbuf+0x4e>
10015aa4:	e079      	b.n	10015b9a <setvbuf+0x142>
10015aa6:	0021      	movs	r1, r4
10015aa8:	0030      	movs	r0, r6
10015aaa:	f000 f9d9 	bl	10015e60 <_fflush_r>
10015aae:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015ab0:	2900      	cmp	r1, #0
10015ab2:	d008      	beq.n	10015ac6 <setvbuf+0x6e>
10015ab4:	0023      	movs	r3, r4
10015ab6:	3344      	adds	r3, #68	; 0x44
10015ab8:	4299      	cmp	r1, r3
10015aba:	d002      	beq.n	10015ac2 <setvbuf+0x6a>
10015abc:	0030      	movs	r0, r6
10015abe:	f7ff fe3d 	bl	1001573c <_free_r>
10015ac2:	2300      	movs	r3, #0
10015ac4:	6363      	str	r3, [r4, #52]	; 0x34
10015ac6:	2300      	movs	r3, #0
10015ac8:	61a3      	str	r3, [r4, #24]
10015aca:	6063      	str	r3, [r4, #4]
10015acc:	89a3      	ldrh	r3, [r4, #12]
10015ace:	061b      	lsls	r3, r3, #24
10015ad0:	d503      	bpl.n	10015ada <setvbuf+0x82>
10015ad2:	6921      	ldr	r1, [r4, #16]
10015ad4:	0030      	movs	r0, r6
10015ad6:	f7ff fe31 	bl	1001573c <_free_r>
10015ada:	89a2      	ldrh	r2, [r4, #12]
10015adc:	4b35      	ldr	r3, [pc, #212]	; (10015bb4 <setvbuf+0x15c>)
10015ade:	4013      	ands	r3, r2
10015ae0:	81a3      	strh	r3, [r4, #12]
10015ae2:	9b00      	ldr	r3, [sp, #0]
10015ae4:	2b02      	cmp	r3, #2
10015ae6:	d021      	beq.n	10015b2c <setvbuf+0xd4>
10015ae8:	ab03      	add	r3, sp, #12
10015aea:	aa02      	add	r2, sp, #8
10015aec:	0021      	movs	r1, r4
10015aee:	0030      	movs	r0, r6
10015af0:	f000 fab8 	bl	10016064 <__swhatbuf_r>
10015af4:	89a3      	ldrh	r3, [r4, #12]
10015af6:	4318      	orrs	r0, r3
10015af8:	81a0      	strh	r0, [r4, #12]
10015afa:	2d00      	cmp	r5, #0
10015afc:	d101      	bne.n	10015b02 <setvbuf+0xaa>
10015afe:	9d02      	ldr	r5, [sp, #8]
10015b00:	e001      	b.n	10015b06 <setvbuf+0xae>
10015b02:	2f00      	cmp	r7, #0
10015b04:	d125      	bne.n	10015b52 <setvbuf+0xfa>
10015b06:	0028      	movs	r0, r5
10015b08:	f7ff fdee 	bl	100156e8 <malloc>
10015b0c:	9501      	str	r5, [sp, #4]
10015b0e:	1e07      	subs	r7, r0, #0
10015b10:	d11a      	bne.n	10015b48 <setvbuf+0xf0>
10015b12:	9b02      	ldr	r3, [sp, #8]
10015b14:	9301      	str	r3, [sp, #4]
10015b16:	42ab      	cmp	r3, r5
10015b18:	d102      	bne.n	10015b20 <setvbuf+0xc8>
10015b1a:	2001      	movs	r0, #1
10015b1c:	4240      	negs	r0, r0
10015b1e:	e006      	b.n	10015b2e <setvbuf+0xd6>
10015b20:	9801      	ldr	r0, [sp, #4]
10015b22:	f7ff fde1 	bl	100156e8 <malloc>
10015b26:	1e07      	subs	r7, r0, #0
10015b28:	d10e      	bne.n	10015b48 <setvbuf+0xf0>
10015b2a:	e7f6      	b.n	10015b1a <setvbuf+0xc2>
10015b2c:	2000      	movs	r0, #0
10015b2e:	2202      	movs	r2, #2
10015b30:	89a3      	ldrh	r3, [r4, #12]
10015b32:	4313      	orrs	r3, r2
10015b34:	81a3      	strh	r3, [r4, #12]
10015b36:	2300      	movs	r3, #0
10015b38:	60a3      	str	r3, [r4, #8]
10015b3a:	0023      	movs	r3, r4
10015b3c:	3347      	adds	r3, #71	; 0x47
10015b3e:	6023      	str	r3, [r4, #0]
10015b40:	6123      	str	r3, [r4, #16]
10015b42:	2301      	movs	r3, #1
10015b44:	6163      	str	r3, [r4, #20]
10015b46:	e02a      	b.n	10015b9e <setvbuf+0x146>
10015b48:	2280      	movs	r2, #128	; 0x80
10015b4a:	89a3      	ldrh	r3, [r4, #12]
10015b4c:	9d01      	ldr	r5, [sp, #4]
10015b4e:	4313      	orrs	r3, r2
10015b50:	81a3      	strh	r3, [r4, #12]
10015b52:	69b3      	ldr	r3, [r6, #24]
10015b54:	2b00      	cmp	r3, #0
10015b56:	d102      	bne.n	10015b5e <setvbuf+0x106>
10015b58:	0030      	movs	r0, r6
10015b5a:	f000 f9ef 	bl	10015f3c <__sinit>
10015b5e:	9b00      	ldr	r3, [sp, #0]
10015b60:	2b01      	cmp	r3, #1
10015b62:	d103      	bne.n	10015b6c <setvbuf+0x114>
10015b64:	89a3      	ldrh	r3, [r4, #12]
10015b66:	9a00      	ldr	r2, [sp, #0]
10015b68:	431a      	orrs	r2, r3
10015b6a:	81a2      	strh	r2, [r4, #12]
10015b6c:	2308      	movs	r3, #8
10015b6e:	89a2      	ldrh	r2, [r4, #12]
10015b70:	6027      	str	r7, [r4, #0]
10015b72:	4013      	ands	r3, r2
10015b74:	6127      	str	r7, [r4, #16]
10015b76:	6165      	str	r5, [r4, #20]
10015b78:	1e18      	subs	r0, r3, #0
10015b7a:	d00c      	beq.n	10015b96 <setvbuf+0x13e>
10015b7c:	2301      	movs	r3, #1
10015b7e:	401a      	ands	r2, r3
10015b80:	2300      	movs	r3, #0
10015b82:	1e10      	subs	r0, r2, #0
10015b84:	4298      	cmp	r0, r3
10015b86:	d004      	beq.n	10015b92 <setvbuf+0x13a>
10015b88:	426d      	negs	r5, r5
10015b8a:	60a3      	str	r3, [r4, #8]
10015b8c:	61a5      	str	r5, [r4, #24]
10015b8e:	0018      	movs	r0, r3
10015b90:	e005      	b.n	10015b9e <setvbuf+0x146>
10015b92:	60a5      	str	r5, [r4, #8]
10015b94:	e003      	b.n	10015b9e <setvbuf+0x146>
10015b96:	60a3      	str	r3, [r4, #8]
10015b98:	e001      	b.n	10015b9e <setvbuf+0x146>
10015b9a:	2001      	movs	r0, #1
10015b9c:	4240      	negs	r0, r0
10015b9e:	b005      	add	sp, #20
10015ba0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015ba2:	46c0      	nop			; (mov r8, r8)
10015ba4:	10018468 	.word	0x10018468
10015ba8:	10018348 	.word	0x10018348
10015bac:	10018368 	.word	0x10018368
10015bb0:	10018388 	.word	0x10018388
10015bb4:	fffff35c 	.word	0xfffff35c

10015bb8 <__swbuf_r>:
10015bb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015bba:	0005      	movs	r5, r0
10015bbc:	000f      	movs	r7, r1
10015bbe:	0014      	movs	r4, r2
10015bc0:	2800      	cmp	r0, #0
10015bc2:	d004      	beq.n	10015bce <__swbuf_r+0x16>
10015bc4:	6983      	ldr	r3, [r0, #24]
10015bc6:	2b00      	cmp	r3, #0
10015bc8:	d101      	bne.n	10015bce <__swbuf_r+0x16>
10015bca:	f000 f9b7 	bl	10015f3c <__sinit>
10015bce:	4b23      	ldr	r3, [pc, #140]	; (10015c5c <__swbuf_r+0xa4>)
10015bd0:	429c      	cmp	r4, r3
10015bd2:	d101      	bne.n	10015bd8 <__swbuf_r+0x20>
10015bd4:	686c      	ldr	r4, [r5, #4]
10015bd6:	e008      	b.n	10015bea <__swbuf_r+0x32>
10015bd8:	4b21      	ldr	r3, [pc, #132]	; (10015c60 <__swbuf_r+0xa8>)
10015bda:	429c      	cmp	r4, r3
10015bdc:	d101      	bne.n	10015be2 <__swbuf_r+0x2a>
10015bde:	68ac      	ldr	r4, [r5, #8]
10015be0:	e003      	b.n	10015bea <__swbuf_r+0x32>
10015be2:	4b20      	ldr	r3, [pc, #128]	; (10015c64 <__swbuf_r+0xac>)
10015be4:	429c      	cmp	r4, r3
10015be6:	d100      	bne.n	10015bea <__swbuf_r+0x32>
10015be8:	68ec      	ldr	r4, [r5, #12]
10015bea:	69a3      	ldr	r3, [r4, #24]
10015bec:	60a3      	str	r3, [r4, #8]
10015bee:	89a3      	ldrh	r3, [r4, #12]
10015bf0:	071b      	lsls	r3, r3, #28
10015bf2:	d50a      	bpl.n	10015c0a <__swbuf_r+0x52>
10015bf4:	6923      	ldr	r3, [r4, #16]
10015bf6:	2b00      	cmp	r3, #0
10015bf8:	d007      	beq.n	10015c0a <__swbuf_r+0x52>
10015bfa:	6823      	ldr	r3, [r4, #0]
10015bfc:	6922      	ldr	r2, [r4, #16]
10015bfe:	b2fe      	uxtb	r6, r7
10015c00:	1a98      	subs	r0, r3, r2
10015c02:	6963      	ldr	r3, [r4, #20]
10015c04:	4298      	cmp	r0, r3
10015c06:	db0f      	blt.n	10015c28 <__swbuf_r+0x70>
10015c08:	e008      	b.n	10015c1c <__swbuf_r+0x64>
10015c0a:	0021      	movs	r1, r4
10015c0c:	0028      	movs	r0, r5
10015c0e:	f000 f82b 	bl	10015c68 <__swsetup_r>
10015c12:	2800      	cmp	r0, #0
10015c14:	d0f1      	beq.n	10015bfa <__swbuf_r+0x42>
10015c16:	2001      	movs	r0, #1
10015c18:	4240      	negs	r0, r0
10015c1a:	e01d      	b.n	10015c58 <__swbuf_r+0xa0>
10015c1c:	0021      	movs	r1, r4
10015c1e:	0028      	movs	r0, r5
10015c20:	f000 f91e 	bl	10015e60 <_fflush_r>
10015c24:	2800      	cmp	r0, #0
10015c26:	d1f6      	bne.n	10015c16 <__swbuf_r+0x5e>
10015c28:	68a3      	ldr	r3, [r4, #8]
10015c2a:	3001      	adds	r0, #1
10015c2c:	3b01      	subs	r3, #1
10015c2e:	60a3      	str	r3, [r4, #8]
10015c30:	6823      	ldr	r3, [r4, #0]
10015c32:	1c5a      	adds	r2, r3, #1
10015c34:	6022      	str	r2, [r4, #0]
10015c36:	701f      	strb	r7, [r3, #0]
10015c38:	6963      	ldr	r3, [r4, #20]
10015c3a:	4298      	cmp	r0, r3
10015c3c:	d005      	beq.n	10015c4a <__swbuf_r+0x92>
10015c3e:	89a3      	ldrh	r3, [r4, #12]
10015c40:	0030      	movs	r0, r6
10015c42:	07db      	lsls	r3, r3, #31
10015c44:	d508      	bpl.n	10015c58 <__swbuf_r+0xa0>
10015c46:	2e0a      	cmp	r6, #10
10015c48:	d106      	bne.n	10015c58 <__swbuf_r+0xa0>
10015c4a:	0021      	movs	r1, r4
10015c4c:	0028      	movs	r0, r5
10015c4e:	f000 f907 	bl	10015e60 <_fflush_r>
10015c52:	2800      	cmp	r0, #0
10015c54:	d1df      	bne.n	10015c16 <__swbuf_r+0x5e>
10015c56:	0030      	movs	r0, r6
10015c58:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015c5a:	46c0      	nop			; (mov r8, r8)
10015c5c:	10018348 	.word	0x10018348
10015c60:	10018368 	.word	0x10018368
10015c64:	10018388 	.word	0x10018388

10015c68 <__swsetup_r>:
10015c68:	4b36      	ldr	r3, [pc, #216]	; (10015d44 <__swsetup_r+0xdc>)
10015c6a:	b570      	push	{r4, r5, r6, lr}
10015c6c:	681d      	ldr	r5, [r3, #0]
10015c6e:	0006      	movs	r6, r0
10015c70:	000c      	movs	r4, r1
10015c72:	2d00      	cmp	r5, #0
10015c74:	d005      	beq.n	10015c82 <__swsetup_r+0x1a>
10015c76:	69ab      	ldr	r3, [r5, #24]
10015c78:	2b00      	cmp	r3, #0
10015c7a:	d102      	bne.n	10015c82 <__swsetup_r+0x1a>
10015c7c:	0028      	movs	r0, r5
10015c7e:	f000 f95d 	bl	10015f3c <__sinit>
10015c82:	4b31      	ldr	r3, [pc, #196]	; (10015d48 <__swsetup_r+0xe0>)
10015c84:	429c      	cmp	r4, r3
10015c86:	d101      	bne.n	10015c8c <__swsetup_r+0x24>
10015c88:	686c      	ldr	r4, [r5, #4]
10015c8a:	e008      	b.n	10015c9e <__swsetup_r+0x36>
10015c8c:	4b2f      	ldr	r3, [pc, #188]	; (10015d4c <__swsetup_r+0xe4>)
10015c8e:	429c      	cmp	r4, r3
10015c90:	d101      	bne.n	10015c96 <__swsetup_r+0x2e>
10015c92:	68ac      	ldr	r4, [r5, #8]
10015c94:	e003      	b.n	10015c9e <__swsetup_r+0x36>
10015c96:	4b2e      	ldr	r3, [pc, #184]	; (10015d50 <__swsetup_r+0xe8>)
10015c98:	429c      	cmp	r4, r3
10015c9a:	d100      	bne.n	10015c9e <__swsetup_r+0x36>
10015c9c:	68ec      	ldr	r4, [r5, #12]
10015c9e:	220c      	movs	r2, #12
10015ca0:	5ea3      	ldrsh	r3, [r4, r2]
10015ca2:	b29a      	uxth	r2, r3
10015ca4:	0711      	lsls	r1, r2, #28
10015ca6:	d423      	bmi.n	10015cf0 <__swsetup_r+0x88>
10015ca8:	06d1      	lsls	r1, r2, #27
10015caa:	d407      	bmi.n	10015cbc <__swsetup_r+0x54>
10015cac:	2209      	movs	r2, #9
10015cae:	2001      	movs	r0, #1
10015cb0:	6032      	str	r2, [r6, #0]
10015cb2:	3237      	adds	r2, #55	; 0x37
10015cb4:	4313      	orrs	r3, r2
10015cb6:	81a3      	strh	r3, [r4, #12]
10015cb8:	4240      	negs	r0, r0
10015cba:	e042      	b.n	10015d42 <__swsetup_r+0xda>
10015cbc:	0753      	lsls	r3, r2, #29
10015cbe:	d513      	bpl.n	10015ce8 <__swsetup_r+0x80>
10015cc0:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015cc2:	2900      	cmp	r1, #0
10015cc4:	d008      	beq.n	10015cd8 <__swsetup_r+0x70>
10015cc6:	0023      	movs	r3, r4
10015cc8:	3344      	adds	r3, #68	; 0x44
10015cca:	4299      	cmp	r1, r3
10015ccc:	d002      	beq.n	10015cd4 <__swsetup_r+0x6c>
10015cce:	0030      	movs	r0, r6
10015cd0:	f7ff fd34 	bl	1001573c <_free_r>
10015cd4:	2300      	movs	r3, #0
10015cd6:	6363      	str	r3, [r4, #52]	; 0x34
10015cd8:	2224      	movs	r2, #36	; 0x24
10015cda:	89a3      	ldrh	r3, [r4, #12]
10015cdc:	4393      	bics	r3, r2
10015cde:	81a3      	strh	r3, [r4, #12]
10015ce0:	2300      	movs	r3, #0
10015ce2:	6063      	str	r3, [r4, #4]
10015ce4:	6923      	ldr	r3, [r4, #16]
10015ce6:	6023      	str	r3, [r4, #0]
10015ce8:	2208      	movs	r2, #8
10015cea:	89a3      	ldrh	r3, [r4, #12]
10015cec:	4313      	orrs	r3, r2
10015cee:	81a3      	strh	r3, [r4, #12]
10015cf0:	6923      	ldr	r3, [r4, #16]
10015cf2:	2b00      	cmp	r3, #0
10015cf4:	d10b      	bne.n	10015d0e <__swsetup_r+0xa6>
10015cf6:	23a0      	movs	r3, #160	; 0xa0
10015cf8:	89a2      	ldrh	r2, [r4, #12]
10015cfa:	009b      	lsls	r3, r3, #2
10015cfc:	4013      	ands	r3, r2
10015cfe:	2280      	movs	r2, #128	; 0x80
10015d00:	0092      	lsls	r2, r2, #2
10015d02:	4293      	cmp	r3, r2
10015d04:	d003      	beq.n	10015d0e <__swsetup_r+0xa6>
10015d06:	0021      	movs	r1, r4
10015d08:	0030      	movs	r0, r6
10015d0a:	f000 f9d1 	bl	100160b0 <__smakebuf_r>
10015d0e:	2301      	movs	r3, #1
10015d10:	89a2      	ldrh	r2, [r4, #12]
10015d12:	4013      	ands	r3, r2
10015d14:	d005      	beq.n	10015d22 <__swsetup_r+0xba>
10015d16:	2300      	movs	r3, #0
10015d18:	60a3      	str	r3, [r4, #8]
10015d1a:	6963      	ldr	r3, [r4, #20]
10015d1c:	425b      	negs	r3, r3
10015d1e:	61a3      	str	r3, [r4, #24]
10015d20:	e003      	b.n	10015d2a <__swsetup_r+0xc2>
10015d22:	0792      	lsls	r2, r2, #30
10015d24:	d400      	bmi.n	10015d28 <__swsetup_r+0xc0>
10015d26:	6963      	ldr	r3, [r4, #20]
10015d28:	60a3      	str	r3, [r4, #8]
10015d2a:	2000      	movs	r0, #0
10015d2c:	6923      	ldr	r3, [r4, #16]
10015d2e:	4283      	cmp	r3, r0
10015d30:	d107      	bne.n	10015d42 <__swsetup_r+0xda>
10015d32:	220c      	movs	r2, #12
10015d34:	5ea3      	ldrsh	r3, [r4, r2]
10015d36:	061a      	lsls	r2, r3, #24
10015d38:	d503      	bpl.n	10015d42 <__swsetup_r+0xda>
10015d3a:	2240      	movs	r2, #64	; 0x40
10015d3c:	4313      	orrs	r3, r2
10015d3e:	81a3      	strh	r3, [r4, #12]
10015d40:	3801      	subs	r0, #1
10015d42:	bd70      	pop	{r4, r5, r6, pc}
10015d44:	10018468 	.word	0x10018468
10015d48:	10018348 	.word	0x10018348
10015d4c:	10018368 	.word	0x10018368
10015d50:	10018388 	.word	0x10018388

10015d54 <__sflush_r>:
10015d54:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015d56:	898a      	ldrh	r2, [r1, #12]
10015d58:	0005      	movs	r5, r0
10015d5a:	000c      	movs	r4, r1
10015d5c:	0713      	lsls	r3, r2, #28
10015d5e:	d45a      	bmi.n	10015e16 <__sflush_r+0xc2>
10015d60:	684b      	ldr	r3, [r1, #4]
10015d62:	2b00      	cmp	r3, #0
10015d64:	dc02      	bgt.n	10015d6c <__sflush_r+0x18>
10015d66:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015d68:	2b00      	cmp	r3, #0
10015d6a:	dd19      	ble.n	10015da0 <__sflush_r+0x4c>
10015d6c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015d6e:	2f00      	cmp	r7, #0
10015d70:	d016      	beq.n	10015da0 <__sflush_r+0x4c>
10015d72:	2300      	movs	r3, #0
10015d74:	682e      	ldr	r6, [r5, #0]
10015d76:	602b      	str	r3, [r5, #0]
10015d78:	2380      	movs	r3, #128	; 0x80
10015d7a:	015b      	lsls	r3, r3, #5
10015d7c:	401a      	ands	r2, r3
10015d7e:	d001      	beq.n	10015d84 <__sflush_r+0x30>
10015d80:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015d82:	e014      	b.n	10015dae <__sflush_r+0x5a>
10015d84:	2301      	movs	r3, #1
10015d86:	6a21      	ldr	r1, [r4, #32]
10015d88:	0028      	movs	r0, r5
10015d8a:	47b8      	blx	r7
10015d8c:	1c43      	adds	r3, r0, #1
10015d8e:	d10e      	bne.n	10015dae <__sflush_r+0x5a>
10015d90:	682b      	ldr	r3, [r5, #0]
10015d92:	2b00      	cmp	r3, #0
10015d94:	d00b      	beq.n	10015dae <__sflush_r+0x5a>
10015d96:	2b1d      	cmp	r3, #29
10015d98:	d001      	beq.n	10015d9e <__sflush_r+0x4a>
10015d9a:	2b16      	cmp	r3, #22
10015d9c:	d102      	bne.n	10015da4 <__sflush_r+0x50>
10015d9e:	602e      	str	r6, [r5, #0]
10015da0:	2000      	movs	r0, #0
10015da2:	e05a      	b.n	10015e5a <__sflush_r+0x106>
10015da4:	2240      	movs	r2, #64	; 0x40
10015da6:	89a3      	ldrh	r3, [r4, #12]
10015da8:	4313      	orrs	r3, r2
10015daa:	81a3      	strh	r3, [r4, #12]
10015dac:	e055      	b.n	10015e5a <__sflush_r+0x106>
10015dae:	89a3      	ldrh	r3, [r4, #12]
10015db0:	075b      	lsls	r3, r3, #29
10015db2:	d506      	bpl.n	10015dc2 <__sflush_r+0x6e>
10015db4:	6863      	ldr	r3, [r4, #4]
10015db6:	1ac0      	subs	r0, r0, r3
10015db8:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015dba:	2b00      	cmp	r3, #0
10015dbc:	d001      	beq.n	10015dc2 <__sflush_r+0x6e>
10015dbe:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015dc0:	1ac0      	subs	r0, r0, r3
10015dc2:	2300      	movs	r3, #0
10015dc4:	0002      	movs	r2, r0
10015dc6:	6a21      	ldr	r1, [r4, #32]
10015dc8:	0028      	movs	r0, r5
10015dca:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015dcc:	47b8      	blx	r7
10015dce:	89a3      	ldrh	r3, [r4, #12]
10015dd0:	1c42      	adds	r2, r0, #1
10015dd2:	d106      	bne.n	10015de2 <__sflush_r+0x8e>
10015dd4:	6829      	ldr	r1, [r5, #0]
10015dd6:	291d      	cmp	r1, #29
10015dd8:	d83a      	bhi.n	10015e50 <__sflush_r+0xfc>
10015dda:	4a20      	ldr	r2, [pc, #128]	; (10015e5c <__sflush_r+0x108>)
10015ddc:	40ca      	lsrs	r2, r1
10015dde:	07d2      	lsls	r2, r2, #31
10015de0:	d536      	bpl.n	10015e50 <__sflush_r+0xfc>
10015de2:	2200      	movs	r2, #0
10015de4:	6062      	str	r2, [r4, #4]
10015de6:	6922      	ldr	r2, [r4, #16]
10015de8:	6022      	str	r2, [r4, #0]
10015dea:	04db      	lsls	r3, r3, #19
10015dec:	d505      	bpl.n	10015dfa <__sflush_r+0xa6>
10015dee:	1c43      	adds	r3, r0, #1
10015df0:	d102      	bne.n	10015df8 <__sflush_r+0xa4>
10015df2:	682b      	ldr	r3, [r5, #0]
10015df4:	2b00      	cmp	r3, #0
10015df6:	d100      	bne.n	10015dfa <__sflush_r+0xa6>
10015df8:	6560      	str	r0, [r4, #84]	; 0x54
10015dfa:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015dfc:	602e      	str	r6, [r5, #0]
10015dfe:	2900      	cmp	r1, #0
10015e00:	d0ce      	beq.n	10015da0 <__sflush_r+0x4c>
10015e02:	0023      	movs	r3, r4
10015e04:	3344      	adds	r3, #68	; 0x44
10015e06:	4299      	cmp	r1, r3
10015e08:	d002      	beq.n	10015e10 <__sflush_r+0xbc>
10015e0a:	0028      	movs	r0, r5
10015e0c:	f7ff fc96 	bl	1001573c <_free_r>
10015e10:	2000      	movs	r0, #0
10015e12:	6360      	str	r0, [r4, #52]	; 0x34
10015e14:	e021      	b.n	10015e5a <__sflush_r+0x106>
10015e16:	690f      	ldr	r7, [r1, #16]
10015e18:	2f00      	cmp	r7, #0
10015e1a:	d0c1      	beq.n	10015da0 <__sflush_r+0x4c>
10015e1c:	680b      	ldr	r3, [r1, #0]
10015e1e:	600f      	str	r7, [r1, #0]
10015e20:	1bdb      	subs	r3, r3, r7
10015e22:	9301      	str	r3, [sp, #4]
10015e24:	2300      	movs	r3, #0
10015e26:	0792      	lsls	r2, r2, #30
10015e28:	d100      	bne.n	10015e2c <__sflush_r+0xd8>
10015e2a:	694b      	ldr	r3, [r1, #20]
10015e2c:	60a3      	str	r3, [r4, #8]
10015e2e:	e003      	b.n	10015e38 <__sflush_r+0xe4>
10015e30:	9b01      	ldr	r3, [sp, #4]
10015e32:	183f      	adds	r7, r7, r0
10015e34:	1a1b      	subs	r3, r3, r0
10015e36:	9301      	str	r3, [sp, #4]
10015e38:	9b01      	ldr	r3, [sp, #4]
10015e3a:	2b00      	cmp	r3, #0
10015e3c:	ddb0      	ble.n	10015da0 <__sflush_r+0x4c>
10015e3e:	9b01      	ldr	r3, [sp, #4]
10015e40:	003a      	movs	r2, r7
10015e42:	6a21      	ldr	r1, [r4, #32]
10015e44:	0028      	movs	r0, r5
10015e46:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015e48:	47b0      	blx	r6
10015e4a:	2800      	cmp	r0, #0
10015e4c:	dcf0      	bgt.n	10015e30 <__sflush_r+0xdc>
10015e4e:	89a3      	ldrh	r3, [r4, #12]
10015e50:	2240      	movs	r2, #64	; 0x40
10015e52:	2001      	movs	r0, #1
10015e54:	4313      	orrs	r3, r2
10015e56:	81a3      	strh	r3, [r4, #12]
10015e58:	4240      	negs	r0, r0
10015e5a:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015e5c:	20400001 	.word	0x20400001

10015e60 <_fflush_r>:
10015e60:	690b      	ldr	r3, [r1, #16]
10015e62:	b570      	push	{r4, r5, r6, lr}
10015e64:	0005      	movs	r5, r0
10015e66:	000c      	movs	r4, r1
10015e68:	2b00      	cmp	r3, #0
10015e6a:	d101      	bne.n	10015e70 <_fflush_r+0x10>
10015e6c:	2000      	movs	r0, #0
10015e6e:	e01c      	b.n	10015eaa <_fflush_r+0x4a>
10015e70:	2800      	cmp	r0, #0
10015e72:	d004      	beq.n	10015e7e <_fflush_r+0x1e>
10015e74:	6983      	ldr	r3, [r0, #24]
10015e76:	2b00      	cmp	r3, #0
10015e78:	d101      	bne.n	10015e7e <_fflush_r+0x1e>
10015e7a:	f000 f85f 	bl	10015f3c <__sinit>
10015e7e:	4b0b      	ldr	r3, [pc, #44]	; (10015eac <_fflush_r+0x4c>)
10015e80:	429c      	cmp	r4, r3
10015e82:	d101      	bne.n	10015e88 <_fflush_r+0x28>
10015e84:	686c      	ldr	r4, [r5, #4]
10015e86:	e008      	b.n	10015e9a <_fflush_r+0x3a>
10015e88:	4b09      	ldr	r3, [pc, #36]	; (10015eb0 <_fflush_r+0x50>)
10015e8a:	429c      	cmp	r4, r3
10015e8c:	d101      	bne.n	10015e92 <_fflush_r+0x32>
10015e8e:	68ac      	ldr	r4, [r5, #8]
10015e90:	e003      	b.n	10015e9a <_fflush_r+0x3a>
10015e92:	4b08      	ldr	r3, [pc, #32]	; (10015eb4 <_fflush_r+0x54>)
10015e94:	429c      	cmp	r4, r3
10015e96:	d100      	bne.n	10015e9a <_fflush_r+0x3a>
10015e98:	68ec      	ldr	r4, [r5, #12]
10015e9a:	220c      	movs	r2, #12
10015e9c:	5ea3      	ldrsh	r3, [r4, r2]
10015e9e:	2b00      	cmp	r3, #0
10015ea0:	d0e4      	beq.n	10015e6c <_fflush_r+0xc>
10015ea2:	0021      	movs	r1, r4
10015ea4:	0028      	movs	r0, r5
10015ea6:	f7ff ff55 	bl	10015d54 <__sflush_r>
10015eaa:	bd70      	pop	{r4, r5, r6, pc}
10015eac:	10018348 	.word	0x10018348
10015eb0:	10018368 	.word	0x10018368
10015eb4:	10018388 	.word	0x10018388

10015eb8 <_cleanup_r>:
10015eb8:	b510      	push	{r4, lr}
10015eba:	4902      	ldr	r1, [pc, #8]	; (10015ec4 <_cleanup_r+0xc>)
10015ebc:	f000 f8b0 	bl	10016020 <_fwalk_reent>
10015ec0:	bd10      	pop	{r4, pc}
10015ec2:	46c0      	nop			; (mov r8, r8)
10015ec4:	10015e61 	.word	0x10015e61

10015ec8 <std.isra.0>:
10015ec8:	2300      	movs	r3, #0
10015eca:	b510      	push	{r4, lr}
10015ecc:	0004      	movs	r4, r0
10015ece:	6003      	str	r3, [r0, #0]
10015ed0:	6043      	str	r3, [r0, #4]
10015ed2:	6083      	str	r3, [r0, #8]
10015ed4:	8181      	strh	r1, [r0, #12]
10015ed6:	6643      	str	r3, [r0, #100]	; 0x64
10015ed8:	81c2      	strh	r2, [r0, #14]
10015eda:	6103      	str	r3, [r0, #16]
10015edc:	6143      	str	r3, [r0, #20]
10015ede:	6183      	str	r3, [r0, #24]
10015ee0:	0019      	movs	r1, r3
10015ee2:	2208      	movs	r2, #8
10015ee4:	305c      	adds	r0, #92	; 0x5c
10015ee6:	f7ff fc21 	bl	1001572c <memset>
10015eea:	4b05      	ldr	r3, [pc, #20]	; (10015f00 <std.isra.0+0x38>)
10015eec:	6224      	str	r4, [r4, #32]
10015eee:	6263      	str	r3, [r4, #36]	; 0x24
10015ef0:	4b04      	ldr	r3, [pc, #16]	; (10015f04 <std.isra.0+0x3c>)
10015ef2:	62a3      	str	r3, [r4, #40]	; 0x28
10015ef4:	4b04      	ldr	r3, [pc, #16]	; (10015f08 <std.isra.0+0x40>)
10015ef6:	62e3      	str	r3, [r4, #44]	; 0x2c
10015ef8:	4b04      	ldr	r3, [pc, #16]	; (10015f0c <std.isra.0+0x44>)
10015efa:	6323      	str	r3, [r4, #48]	; 0x30
10015efc:	bd10      	pop	{r4, pc}
10015efe:	46c0      	nop			; (mov r8, r8)
10015f00:	10016741 	.word	0x10016741
10015f04:	10016769 	.word	0x10016769
10015f08:	100167a1 	.word	0x100167a1
10015f0c:	100167cd 	.word	0x100167cd

10015f10 <__sfmoreglue>:
10015f10:	b570      	push	{r4, r5, r6, lr}
10015f12:	2568      	movs	r5, #104	; 0x68
10015f14:	1e4b      	subs	r3, r1, #1
10015f16:	435d      	muls	r5, r3
10015f18:	000e      	movs	r6, r1
10015f1a:	0029      	movs	r1, r5
10015f1c:	3174      	adds	r1, #116	; 0x74
10015f1e:	f7ff fc53 	bl	100157c8 <_malloc_r>
10015f22:	1e04      	subs	r4, r0, #0
10015f24:	d008      	beq.n	10015f38 <__sfmoreglue+0x28>
10015f26:	2100      	movs	r1, #0
10015f28:	002a      	movs	r2, r5
10015f2a:	6001      	str	r1, [r0, #0]
10015f2c:	6046      	str	r6, [r0, #4]
10015f2e:	300c      	adds	r0, #12
10015f30:	60a0      	str	r0, [r4, #8]
10015f32:	3268      	adds	r2, #104	; 0x68
10015f34:	f7ff fbfa 	bl	1001572c <memset>
10015f38:	0020      	movs	r0, r4
10015f3a:	bd70      	pop	{r4, r5, r6, pc}

10015f3c <__sinit>:
10015f3c:	6983      	ldr	r3, [r0, #24]
10015f3e:	b513      	push	{r0, r1, r4, lr}
10015f40:	0004      	movs	r4, r0
10015f42:	2b00      	cmp	r3, #0
10015f44:	d128      	bne.n	10015f98 <__sinit+0x5c>
10015f46:	6483      	str	r3, [r0, #72]	; 0x48
10015f48:	64c3      	str	r3, [r0, #76]	; 0x4c
10015f4a:	6503      	str	r3, [r0, #80]	; 0x50
10015f4c:	4b13      	ldr	r3, [pc, #76]	; (10015f9c <__sinit+0x60>)
10015f4e:	4a14      	ldr	r2, [pc, #80]	; (10015fa0 <__sinit+0x64>)
10015f50:	681b      	ldr	r3, [r3, #0]
10015f52:	6282      	str	r2, [r0, #40]	; 0x28
10015f54:	9301      	str	r3, [sp, #4]
10015f56:	4298      	cmp	r0, r3
10015f58:	d101      	bne.n	10015f5e <__sinit+0x22>
10015f5a:	2301      	movs	r3, #1
10015f5c:	6183      	str	r3, [r0, #24]
10015f5e:	0020      	movs	r0, r4
10015f60:	f000 f820 	bl	10015fa4 <__sfp>
10015f64:	6060      	str	r0, [r4, #4]
10015f66:	0020      	movs	r0, r4
10015f68:	f000 f81c 	bl	10015fa4 <__sfp>
10015f6c:	60a0      	str	r0, [r4, #8]
10015f6e:	0020      	movs	r0, r4
10015f70:	f000 f818 	bl	10015fa4 <__sfp>
10015f74:	2200      	movs	r2, #0
10015f76:	60e0      	str	r0, [r4, #12]
10015f78:	2104      	movs	r1, #4
10015f7a:	6860      	ldr	r0, [r4, #4]
10015f7c:	f7ff ffa4 	bl	10015ec8 <std.isra.0>
10015f80:	2201      	movs	r2, #1
10015f82:	2109      	movs	r1, #9
10015f84:	68a0      	ldr	r0, [r4, #8]
10015f86:	f7ff ff9f 	bl	10015ec8 <std.isra.0>
10015f8a:	2202      	movs	r2, #2
10015f8c:	2112      	movs	r1, #18
10015f8e:	68e0      	ldr	r0, [r4, #12]
10015f90:	f7ff ff9a 	bl	10015ec8 <std.isra.0>
10015f94:	2301      	movs	r3, #1
10015f96:	61a3      	str	r3, [r4, #24]
10015f98:	bd13      	pop	{r0, r1, r4, pc}
10015f9a:	46c0      	nop			; (mov r8, r8)
10015f9c:	10018344 	.word	0x10018344
10015fa0:	10015eb9 	.word	0x10015eb9

10015fa4 <__sfp>:
10015fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015fa6:	4b1d      	ldr	r3, [pc, #116]	; (1001601c <__sfp+0x78>)
10015fa8:	0006      	movs	r6, r0
10015faa:	681d      	ldr	r5, [r3, #0]
10015fac:	69ab      	ldr	r3, [r5, #24]
10015fae:	2b00      	cmp	r3, #0
10015fb0:	d102      	bne.n	10015fb8 <__sfp+0x14>
10015fb2:	0028      	movs	r0, r5
10015fb4:	f7ff ffc2 	bl	10015f3c <__sinit>
10015fb8:	3548      	adds	r5, #72	; 0x48
10015fba:	68ac      	ldr	r4, [r5, #8]
10015fbc:	686b      	ldr	r3, [r5, #4]
10015fbe:	3b01      	subs	r3, #1
10015fc0:	d405      	bmi.n	10015fce <__sfp+0x2a>
10015fc2:	220c      	movs	r2, #12
10015fc4:	5ea7      	ldrsh	r7, [r4, r2]
10015fc6:	2f00      	cmp	r7, #0
10015fc8:	d010      	beq.n	10015fec <__sfp+0x48>
10015fca:	3468      	adds	r4, #104	; 0x68
10015fcc:	e7f7      	b.n	10015fbe <__sfp+0x1a>
10015fce:	682b      	ldr	r3, [r5, #0]
10015fd0:	2b00      	cmp	r3, #0
10015fd2:	d001      	beq.n	10015fd8 <__sfp+0x34>
10015fd4:	682d      	ldr	r5, [r5, #0]
10015fd6:	e7f0      	b.n	10015fba <__sfp+0x16>
10015fd8:	2104      	movs	r1, #4
10015fda:	0030      	movs	r0, r6
10015fdc:	f7ff ff98 	bl	10015f10 <__sfmoreglue>
10015fe0:	6028      	str	r0, [r5, #0]
10015fe2:	2800      	cmp	r0, #0
10015fe4:	d1f6      	bne.n	10015fd4 <__sfp+0x30>
10015fe6:	230c      	movs	r3, #12
10015fe8:	6033      	str	r3, [r6, #0]
10015fea:	e016      	b.n	1001601a <__sfp+0x76>
10015fec:	2301      	movs	r3, #1
10015fee:	0020      	movs	r0, r4
10015ff0:	425b      	negs	r3, r3
10015ff2:	81e3      	strh	r3, [r4, #14]
10015ff4:	3302      	adds	r3, #2
10015ff6:	81a3      	strh	r3, [r4, #12]
10015ff8:	6667      	str	r7, [r4, #100]	; 0x64
10015ffa:	6027      	str	r7, [r4, #0]
10015ffc:	60a7      	str	r7, [r4, #8]
10015ffe:	6067      	str	r7, [r4, #4]
10016000:	6127      	str	r7, [r4, #16]
10016002:	6167      	str	r7, [r4, #20]
10016004:	61a7      	str	r7, [r4, #24]
10016006:	305c      	adds	r0, #92	; 0x5c
10016008:	2208      	movs	r2, #8
1001600a:	0039      	movs	r1, r7
1001600c:	f7ff fb8e 	bl	1001572c <memset>
10016010:	0020      	movs	r0, r4
10016012:	6367      	str	r7, [r4, #52]	; 0x34
10016014:	63a7      	str	r7, [r4, #56]	; 0x38
10016016:	64a7      	str	r7, [r4, #72]	; 0x48
10016018:	64e7      	str	r7, [r4, #76]	; 0x4c
1001601a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001601c:	10018344 	.word	0x10018344

10016020 <_fwalk_reent>:
10016020:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016022:	0004      	movs	r4, r0
10016024:	0007      	movs	r7, r0
10016026:	2600      	movs	r6, #0
10016028:	9101      	str	r1, [sp, #4]
1001602a:	3448      	adds	r4, #72	; 0x48
1001602c:	2c00      	cmp	r4, #0
1001602e:	d016      	beq.n	1001605e <_fwalk_reent+0x3e>
10016030:	6863      	ldr	r3, [r4, #4]
10016032:	68a5      	ldr	r5, [r4, #8]
10016034:	9300      	str	r3, [sp, #0]
10016036:	9b00      	ldr	r3, [sp, #0]
10016038:	3b01      	subs	r3, #1
1001603a:	9300      	str	r3, [sp, #0]
1001603c:	d40d      	bmi.n	1001605a <_fwalk_reent+0x3a>
1001603e:	89ab      	ldrh	r3, [r5, #12]
10016040:	2b01      	cmp	r3, #1
10016042:	d908      	bls.n	10016056 <_fwalk_reent+0x36>
10016044:	220e      	movs	r2, #14
10016046:	5eab      	ldrsh	r3, [r5, r2]
10016048:	3301      	adds	r3, #1
1001604a:	d004      	beq.n	10016056 <_fwalk_reent+0x36>
1001604c:	0029      	movs	r1, r5
1001604e:	0038      	movs	r0, r7
10016050:	9b01      	ldr	r3, [sp, #4]
10016052:	4798      	blx	r3
10016054:	4306      	orrs	r6, r0
10016056:	3568      	adds	r5, #104	; 0x68
10016058:	e7ed      	b.n	10016036 <_fwalk_reent+0x16>
1001605a:	6824      	ldr	r4, [r4, #0]
1001605c:	e7e6      	b.n	1001602c <_fwalk_reent+0xc>
1001605e:	0030      	movs	r0, r6
10016060:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10016064 <__swhatbuf_r>:
10016064:	b570      	push	{r4, r5, r6, lr}
10016066:	000e      	movs	r6, r1
10016068:	001d      	movs	r5, r3
1001606a:	230e      	movs	r3, #14
1001606c:	5ec9      	ldrsh	r1, [r1, r3]
1001606e:	b090      	sub	sp, #64	; 0x40
10016070:	0014      	movs	r4, r2
10016072:	2900      	cmp	r1, #0
10016074:	da06      	bge.n	10016084 <__swhatbuf_r+0x20>
10016076:	2300      	movs	r3, #0
10016078:	602b      	str	r3, [r5, #0]
1001607a:	89b3      	ldrh	r3, [r6, #12]
1001607c:	061b      	lsls	r3, r3, #24
1001607e:	d50f      	bpl.n	100160a0 <__swhatbuf_r+0x3c>
10016080:	2340      	movs	r3, #64	; 0x40
10016082:	e00f      	b.n	100160a4 <__swhatbuf_r+0x40>
10016084:	aa01      	add	r2, sp, #4
10016086:	f000 fbcd 	bl	10016824 <_fstat_r>
1001608a:	2800      	cmp	r0, #0
1001608c:	dbf3      	blt.n	10016076 <__swhatbuf_r+0x12>
1001608e:	23f0      	movs	r3, #240	; 0xf0
10016090:	9a02      	ldr	r2, [sp, #8]
10016092:	021b      	lsls	r3, r3, #8
10016094:	4013      	ands	r3, r2
10016096:	4a05      	ldr	r2, [pc, #20]	; (100160ac <__swhatbuf_r+0x48>)
10016098:	189b      	adds	r3, r3, r2
1001609a:	425a      	negs	r2, r3
1001609c:	4153      	adcs	r3, r2
1001609e:	602b      	str	r3, [r5, #0]
100160a0:	2380      	movs	r3, #128	; 0x80
100160a2:	00db      	lsls	r3, r3, #3
100160a4:	2000      	movs	r0, #0
100160a6:	6023      	str	r3, [r4, #0]
100160a8:	b010      	add	sp, #64	; 0x40
100160aa:	bd70      	pop	{r4, r5, r6, pc}
100160ac:	ffffe000 	.word	0xffffe000

100160b0 <__smakebuf_r>:
100160b0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100160b2:	2602      	movs	r6, #2
100160b4:	898b      	ldrh	r3, [r1, #12]
100160b6:	0005      	movs	r5, r0
100160b8:	000c      	movs	r4, r1
100160ba:	4233      	tst	r3, r6
100160bc:	d110      	bne.n	100160e0 <__smakebuf_r+0x30>
100160be:	ab01      	add	r3, sp, #4
100160c0:	466a      	mov	r2, sp
100160c2:	f7ff ffcf 	bl	10016064 <__swhatbuf_r>
100160c6:	9900      	ldr	r1, [sp, #0]
100160c8:	0007      	movs	r7, r0
100160ca:	0028      	movs	r0, r5
100160cc:	f7ff fb7c 	bl	100157c8 <_malloc_r>
100160d0:	2800      	cmp	r0, #0
100160d2:	d10c      	bne.n	100160ee <__smakebuf_r+0x3e>
100160d4:	220c      	movs	r2, #12
100160d6:	5ea3      	ldrsh	r3, [r4, r2]
100160d8:	059a      	lsls	r2, r3, #22
100160da:	d423      	bmi.n	10016124 <__smakebuf_r+0x74>
100160dc:	4333      	orrs	r3, r6
100160de:	81a3      	strh	r3, [r4, #12]
100160e0:	0023      	movs	r3, r4
100160e2:	3347      	adds	r3, #71	; 0x47
100160e4:	6023      	str	r3, [r4, #0]
100160e6:	6123      	str	r3, [r4, #16]
100160e8:	2301      	movs	r3, #1
100160ea:	6163      	str	r3, [r4, #20]
100160ec:	e01a      	b.n	10016124 <__smakebuf_r+0x74>
100160ee:	2280      	movs	r2, #128	; 0x80
100160f0:	4b0d      	ldr	r3, [pc, #52]	; (10016128 <__smakebuf_r+0x78>)
100160f2:	62ab      	str	r3, [r5, #40]	; 0x28
100160f4:	89a3      	ldrh	r3, [r4, #12]
100160f6:	6020      	str	r0, [r4, #0]
100160f8:	4313      	orrs	r3, r2
100160fa:	81a3      	strh	r3, [r4, #12]
100160fc:	9b00      	ldr	r3, [sp, #0]
100160fe:	6120      	str	r0, [r4, #16]
10016100:	6163      	str	r3, [r4, #20]
10016102:	9b01      	ldr	r3, [sp, #4]
10016104:	2b00      	cmp	r3, #0
10016106:	d00a      	beq.n	1001611e <__smakebuf_r+0x6e>
10016108:	230e      	movs	r3, #14
1001610a:	5ee1      	ldrsh	r1, [r4, r3]
1001610c:	0028      	movs	r0, r5
1001610e:	f000 fb9b 	bl	10016848 <_isatty_r>
10016112:	2800      	cmp	r0, #0
10016114:	d003      	beq.n	1001611e <__smakebuf_r+0x6e>
10016116:	2201      	movs	r2, #1
10016118:	89a3      	ldrh	r3, [r4, #12]
1001611a:	4313      	orrs	r3, r2
1001611c:	81a3      	strh	r3, [r4, #12]
1001611e:	89a3      	ldrh	r3, [r4, #12]
10016120:	431f      	orrs	r7, r3
10016122:	81a7      	strh	r7, [r4, #12]
10016124:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10016126:	46c0      	nop			; (mov r8, r8)
10016128:	10015eb9 	.word	0x10015eb9

1001612c <__sfputc_r>:
1001612c:	6893      	ldr	r3, [r2, #8]
1001612e:	b510      	push	{r4, lr}
10016130:	3b01      	subs	r3, #1
10016132:	6093      	str	r3, [r2, #8]
10016134:	2b00      	cmp	r3, #0
10016136:	da05      	bge.n	10016144 <__sfputc_r+0x18>
10016138:	6994      	ldr	r4, [r2, #24]
1001613a:	42a3      	cmp	r3, r4
1001613c:	db08      	blt.n	10016150 <__sfputc_r+0x24>
1001613e:	b2cb      	uxtb	r3, r1
10016140:	2b0a      	cmp	r3, #10
10016142:	d005      	beq.n	10016150 <__sfputc_r+0x24>
10016144:	6813      	ldr	r3, [r2, #0]
10016146:	1c58      	adds	r0, r3, #1
10016148:	6010      	str	r0, [r2, #0]
1001614a:	7019      	strb	r1, [r3, #0]
1001614c:	b2c8      	uxtb	r0, r1
1001614e:	e001      	b.n	10016154 <__sfputc_r+0x28>
10016150:	f7ff fd32 	bl	10015bb8 <__swbuf_r>
10016154:	bd10      	pop	{r4, pc}

10016156 <__sfputs_r>:
10016156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10016158:	0006      	movs	r6, r0
1001615a:	000f      	movs	r7, r1
1001615c:	0014      	movs	r4, r2
1001615e:	18d5      	adds	r5, r2, r3
10016160:	42ac      	cmp	r4, r5
10016162:	d008      	beq.n	10016176 <__sfputs_r+0x20>
10016164:	7821      	ldrb	r1, [r4, #0]
10016166:	003a      	movs	r2, r7
10016168:	0030      	movs	r0, r6
1001616a:	f7ff ffdf 	bl	1001612c <__sfputc_r>
1001616e:	3401      	adds	r4, #1
10016170:	1c43      	adds	r3, r0, #1
10016172:	d1f5      	bne.n	10016160 <__sfputs_r+0xa>
10016174:	e000      	b.n	10016178 <__sfputs_r+0x22>
10016176:	2000      	movs	r0, #0
10016178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001617c <_vfiprintf_r>:
1001617c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001617e:	b09f      	sub	sp, #124	; 0x7c
10016180:	0006      	movs	r6, r0
10016182:	000f      	movs	r7, r1
10016184:	9202      	str	r2, [sp, #8]
10016186:	9305      	str	r3, [sp, #20]
10016188:	2800      	cmp	r0, #0
1001618a:	d004      	beq.n	10016196 <_vfiprintf_r+0x1a>
1001618c:	6983      	ldr	r3, [r0, #24]
1001618e:	2b00      	cmp	r3, #0
10016190:	d101      	bne.n	10016196 <_vfiprintf_r+0x1a>
10016192:	f7ff fed3 	bl	10015f3c <__sinit>
10016196:	4b7f      	ldr	r3, [pc, #508]	; (10016394 <_vfiprintf_r+0x218>)
10016198:	429f      	cmp	r7, r3
1001619a:	d101      	bne.n	100161a0 <_vfiprintf_r+0x24>
1001619c:	6877      	ldr	r7, [r6, #4]
1001619e:	e008      	b.n	100161b2 <_vfiprintf_r+0x36>
100161a0:	4b7d      	ldr	r3, [pc, #500]	; (10016398 <_vfiprintf_r+0x21c>)
100161a2:	429f      	cmp	r7, r3
100161a4:	d101      	bne.n	100161aa <_vfiprintf_r+0x2e>
100161a6:	68b7      	ldr	r7, [r6, #8]
100161a8:	e003      	b.n	100161b2 <_vfiprintf_r+0x36>
100161aa:	4b7c      	ldr	r3, [pc, #496]	; (1001639c <_vfiprintf_r+0x220>)
100161ac:	429f      	cmp	r7, r3
100161ae:	d100      	bne.n	100161b2 <_vfiprintf_r+0x36>
100161b0:	68f7      	ldr	r7, [r6, #12]
100161b2:	89bb      	ldrh	r3, [r7, #12]
100161b4:	071b      	lsls	r3, r3, #28
100161b6:	d50a      	bpl.n	100161ce <_vfiprintf_r+0x52>
100161b8:	693b      	ldr	r3, [r7, #16]
100161ba:	2b00      	cmp	r3, #0
100161bc:	d007      	beq.n	100161ce <_vfiprintf_r+0x52>
100161be:	2300      	movs	r3, #0
100161c0:	ad06      	add	r5, sp, #24
100161c2:	616b      	str	r3, [r5, #20]
100161c4:	3320      	adds	r3, #32
100161c6:	766b      	strb	r3, [r5, #25]
100161c8:	3310      	adds	r3, #16
100161ca:	76ab      	strb	r3, [r5, #26]
100161cc:	e03d      	b.n	1001624a <_vfiprintf_r+0xce>
100161ce:	0039      	movs	r1, r7
100161d0:	0030      	movs	r0, r6
100161d2:	f7ff fd49 	bl	10015c68 <__swsetup_r>
100161d6:	2800      	cmp	r0, #0
100161d8:	d0f1      	beq.n	100161be <_vfiprintf_r+0x42>
100161da:	2001      	movs	r0, #1
100161dc:	4240      	negs	r0, r0
100161de:	e0d6      	b.n	1001638e <_vfiprintf_r+0x212>
100161e0:	9a05      	ldr	r2, [sp, #20]
100161e2:	1d11      	adds	r1, r2, #4
100161e4:	6812      	ldr	r2, [r2, #0]
100161e6:	9105      	str	r1, [sp, #20]
100161e8:	2a00      	cmp	r2, #0
100161ea:	da00      	bge.n	100161ee <_vfiprintf_r+0x72>
100161ec:	e07f      	b.n	100162ee <_vfiprintf_r+0x172>
100161ee:	9209      	str	r2, [sp, #36]	; 0x24
100161f0:	3401      	adds	r4, #1
100161f2:	7823      	ldrb	r3, [r4, #0]
100161f4:	2b2e      	cmp	r3, #46	; 0x2e
100161f6:	d100      	bne.n	100161fa <_vfiprintf_r+0x7e>
100161f8:	e08d      	b.n	10016316 <_vfiprintf_r+0x19a>
100161fa:	7821      	ldrb	r1, [r4, #0]
100161fc:	2203      	movs	r2, #3
100161fe:	4868      	ldr	r0, [pc, #416]	; (100163a0 <_vfiprintf_r+0x224>)
10016200:	f000 fb48 	bl	10016894 <memchr>
10016204:	2800      	cmp	r0, #0
10016206:	d007      	beq.n	10016218 <_vfiprintf_r+0x9c>
10016208:	4b65      	ldr	r3, [pc, #404]	; (100163a0 <_vfiprintf_r+0x224>)
1001620a:	682a      	ldr	r2, [r5, #0]
1001620c:	1ac0      	subs	r0, r0, r3
1001620e:	2340      	movs	r3, #64	; 0x40
10016210:	4083      	lsls	r3, r0
10016212:	4313      	orrs	r3, r2
10016214:	602b      	str	r3, [r5, #0]
10016216:	3401      	adds	r4, #1
10016218:	7821      	ldrb	r1, [r4, #0]
1001621a:	1c63      	adds	r3, r4, #1
1001621c:	2206      	movs	r2, #6
1001621e:	4861      	ldr	r0, [pc, #388]	; (100163a4 <_vfiprintf_r+0x228>)
10016220:	9302      	str	r3, [sp, #8]
10016222:	7629      	strb	r1, [r5, #24]
10016224:	f000 fb36 	bl	10016894 <memchr>
10016228:	2800      	cmp	r0, #0
1001622a:	d100      	bne.n	1001622e <_vfiprintf_r+0xb2>
1001622c:	e09d      	b.n	1001636a <_vfiprintf_r+0x1ee>
1001622e:	4b5e      	ldr	r3, [pc, #376]	; (100163a8 <_vfiprintf_r+0x22c>)
10016230:	2b00      	cmp	r3, #0
10016232:	d000      	beq.n	10016236 <_vfiprintf_r+0xba>
10016234:	e090      	b.n	10016358 <_vfiprintf_r+0x1dc>
10016236:	2207      	movs	r2, #7
10016238:	9b05      	ldr	r3, [sp, #20]
1001623a:	3307      	adds	r3, #7
1001623c:	4393      	bics	r3, r2
1001623e:	3308      	adds	r3, #8
10016240:	9305      	str	r3, [sp, #20]
10016242:	696b      	ldr	r3, [r5, #20]
10016244:	9a03      	ldr	r2, [sp, #12]
10016246:	189b      	adds	r3, r3, r2
10016248:	616b      	str	r3, [r5, #20]
1001624a:	9c02      	ldr	r4, [sp, #8]
1001624c:	7823      	ldrb	r3, [r4, #0]
1001624e:	2b00      	cmp	r3, #0
10016250:	d104      	bne.n	1001625c <_vfiprintf_r+0xe0>
10016252:	9b02      	ldr	r3, [sp, #8]
10016254:	1ae3      	subs	r3, r4, r3
10016256:	9304      	str	r3, [sp, #16]
10016258:	d012      	beq.n	10016280 <_vfiprintf_r+0x104>
1001625a:	e003      	b.n	10016264 <_vfiprintf_r+0xe8>
1001625c:	2b25      	cmp	r3, #37	; 0x25
1001625e:	d0f8      	beq.n	10016252 <_vfiprintf_r+0xd6>
10016260:	3401      	adds	r4, #1
10016262:	e7f3      	b.n	1001624c <_vfiprintf_r+0xd0>
10016264:	9b04      	ldr	r3, [sp, #16]
10016266:	9a02      	ldr	r2, [sp, #8]
10016268:	0039      	movs	r1, r7
1001626a:	0030      	movs	r0, r6
1001626c:	f7ff ff73 	bl	10016156 <__sfputs_r>
10016270:	1c43      	adds	r3, r0, #1
10016272:	d100      	bne.n	10016276 <_vfiprintf_r+0xfa>
10016274:	e086      	b.n	10016384 <_vfiprintf_r+0x208>
10016276:	696a      	ldr	r2, [r5, #20]
10016278:	9b04      	ldr	r3, [sp, #16]
1001627a:	4694      	mov	ip, r2
1001627c:	4463      	add	r3, ip
1001627e:	616b      	str	r3, [r5, #20]
10016280:	7823      	ldrb	r3, [r4, #0]
10016282:	2b00      	cmp	r3, #0
10016284:	d07e      	beq.n	10016384 <_vfiprintf_r+0x208>
10016286:	2201      	movs	r2, #1
10016288:	2300      	movs	r3, #0
1001628a:	4252      	negs	r2, r2
1001628c:	606a      	str	r2, [r5, #4]
1001628e:	a902      	add	r1, sp, #8
10016290:	3254      	adds	r2, #84	; 0x54
10016292:	1852      	adds	r2, r2, r1
10016294:	3401      	adds	r4, #1
10016296:	602b      	str	r3, [r5, #0]
10016298:	60eb      	str	r3, [r5, #12]
1001629a:	60ab      	str	r3, [r5, #8]
1001629c:	7013      	strb	r3, [r2, #0]
1001629e:	65ab      	str	r3, [r5, #88]	; 0x58
100162a0:	7821      	ldrb	r1, [r4, #0]
100162a2:	2205      	movs	r2, #5
100162a4:	4841      	ldr	r0, [pc, #260]	; (100163ac <_vfiprintf_r+0x230>)
100162a6:	f000 faf5 	bl	10016894 <memchr>
100162aa:	2800      	cmp	r0, #0
100162ac:	d008      	beq.n	100162c0 <_vfiprintf_r+0x144>
100162ae:	4b3f      	ldr	r3, [pc, #252]	; (100163ac <_vfiprintf_r+0x230>)
100162b0:	682a      	ldr	r2, [r5, #0]
100162b2:	1ac0      	subs	r0, r0, r3
100162b4:	2301      	movs	r3, #1
100162b6:	4083      	lsls	r3, r0
100162b8:	4313      	orrs	r3, r2
100162ba:	602b      	str	r3, [r5, #0]
100162bc:	3401      	adds	r4, #1
100162be:	e7ef      	b.n	100162a0 <_vfiprintf_r+0x124>
100162c0:	682b      	ldr	r3, [r5, #0]
100162c2:	06da      	lsls	r2, r3, #27
100162c4:	d504      	bpl.n	100162d0 <_vfiprintf_r+0x154>
100162c6:	2253      	movs	r2, #83	; 0x53
100162c8:	2120      	movs	r1, #32
100162ca:	a802      	add	r0, sp, #8
100162cc:	1812      	adds	r2, r2, r0
100162ce:	7011      	strb	r1, [r2, #0]
100162d0:	071a      	lsls	r2, r3, #28
100162d2:	d504      	bpl.n	100162de <_vfiprintf_r+0x162>
100162d4:	2253      	movs	r2, #83	; 0x53
100162d6:	212b      	movs	r1, #43	; 0x2b
100162d8:	a802      	add	r0, sp, #8
100162da:	1812      	adds	r2, r2, r0
100162dc:	7011      	strb	r1, [r2, #0]
100162de:	7822      	ldrb	r2, [r4, #0]
100162e0:	2a2a      	cmp	r2, #42	; 0x2a
100162e2:	d100      	bne.n	100162e6 <_vfiprintf_r+0x16a>
100162e4:	e77c      	b.n	100161e0 <_vfiprintf_r+0x64>
100162e6:	9b09      	ldr	r3, [sp, #36]	; 0x24
100162e8:	2000      	movs	r0, #0
100162ea:	210a      	movs	r1, #10
100162ec:	e005      	b.n	100162fa <_vfiprintf_r+0x17e>
100162ee:	4252      	negs	r2, r2
100162f0:	60ea      	str	r2, [r5, #12]
100162f2:	2202      	movs	r2, #2
100162f4:	4313      	orrs	r3, r2
100162f6:	602b      	str	r3, [r5, #0]
100162f8:	e77a      	b.n	100161f0 <_vfiprintf_r+0x74>
100162fa:	7822      	ldrb	r2, [r4, #0]
100162fc:	3a30      	subs	r2, #48	; 0x30
100162fe:	2a09      	cmp	r2, #9
10016300:	d804      	bhi.n	1001630c <_vfiprintf_r+0x190>
10016302:	434b      	muls	r3, r1
10016304:	3401      	adds	r4, #1
10016306:	189b      	adds	r3, r3, r2
10016308:	2001      	movs	r0, #1
1001630a:	e7f6      	b.n	100162fa <_vfiprintf_r+0x17e>
1001630c:	2800      	cmp	r0, #0
1001630e:	d100      	bne.n	10016312 <_vfiprintf_r+0x196>
10016310:	e76f      	b.n	100161f2 <_vfiprintf_r+0x76>
10016312:	9309      	str	r3, [sp, #36]	; 0x24
10016314:	e76d      	b.n	100161f2 <_vfiprintf_r+0x76>
10016316:	7863      	ldrb	r3, [r4, #1]
10016318:	2b2a      	cmp	r3, #42	; 0x2a
1001631a:	d10a      	bne.n	10016332 <_vfiprintf_r+0x1b6>
1001631c:	9b05      	ldr	r3, [sp, #20]
1001631e:	3402      	adds	r4, #2
10016320:	1d1a      	adds	r2, r3, #4
10016322:	681b      	ldr	r3, [r3, #0]
10016324:	9205      	str	r2, [sp, #20]
10016326:	2b00      	cmp	r3, #0
10016328:	da01      	bge.n	1001632e <_vfiprintf_r+0x1b2>
1001632a:	2301      	movs	r3, #1
1001632c:	425b      	negs	r3, r3
1001632e:	9307      	str	r3, [sp, #28]
10016330:	e763      	b.n	100161fa <_vfiprintf_r+0x7e>
10016332:	2300      	movs	r3, #0
10016334:	200a      	movs	r0, #10
10016336:	001a      	movs	r2, r3
10016338:	3401      	adds	r4, #1
1001633a:	606b      	str	r3, [r5, #4]
1001633c:	7821      	ldrb	r1, [r4, #0]
1001633e:	3930      	subs	r1, #48	; 0x30
10016340:	2909      	cmp	r1, #9
10016342:	d804      	bhi.n	1001634e <_vfiprintf_r+0x1d2>
10016344:	4342      	muls	r2, r0
10016346:	3401      	adds	r4, #1
10016348:	1852      	adds	r2, r2, r1
1001634a:	2301      	movs	r3, #1
1001634c:	e7f6      	b.n	1001633c <_vfiprintf_r+0x1c0>
1001634e:	2b00      	cmp	r3, #0
10016350:	d100      	bne.n	10016354 <_vfiprintf_r+0x1d8>
10016352:	e752      	b.n	100161fa <_vfiprintf_r+0x7e>
10016354:	9207      	str	r2, [sp, #28]
10016356:	e750      	b.n	100161fa <_vfiprintf_r+0x7e>
10016358:	ab05      	add	r3, sp, #20
1001635a:	9300      	str	r3, [sp, #0]
1001635c:	003a      	movs	r2, r7
1001635e:	4b14      	ldr	r3, [pc, #80]	; (100163b0 <_vfiprintf_r+0x234>)
10016360:	0029      	movs	r1, r5
10016362:	0030      	movs	r0, r6
10016364:	e000      	b.n	10016368 <_vfiprintf_r+0x1ec>
10016366:	bf00      	nop
10016368:	e007      	b.n	1001637a <_vfiprintf_r+0x1fe>
1001636a:	ab05      	add	r3, sp, #20
1001636c:	9300      	str	r3, [sp, #0]
1001636e:	003a      	movs	r2, r7
10016370:	4b0f      	ldr	r3, [pc, #60]	; (100163b0 <_vfiprintf_r+0x234>)
10016372:	0029      	movs	r1, r5
10016374:	0030      	movs	r0, r6
10016376:	f000 f88b 	bl	10016490 <_printf_i>
1001637a:	9003      	str	r0, [sp, #12]
1001637c:	9b03      	ldr	r3, [sp, #12]
1001637e:	3301      	adds	r3, #1
10016380:	d000      	beq.n	10016384 <_vfiprintf_r+0x208>
10016382:	e75e      	b.n	10016242 <_vfiprintf_r+0xc6>
10016384:	89bb      	ldrh	r3, [r7, #12]
10016386:	065b      	lsls	r3, r3, #25
10016388:	d500      	bpl.n	1001638c <_vfiprintf_r+0x210>
1001638a:	e726      	b.n	100161da <_vfiprintf_r+0x5e>
1001638c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001638e:	b01f      	add	sp, #124	; 0x7c
10016390:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016392:	46c0      	nop			; (mov r8, r8)
10016394:	10018348 	.word	0x10018348
10016398:	10018368 	.word	0x10018368
1001639c:	10018388 	.word	0x10018388
100163a0:	100183ae 	.word	0x100183ae
100163a4:	100183b2 	.word	0x100183b2
100163a8:	00000000 	.word	0x00000000
100163ac:	100183a8 	.word	0x100183a8
100163b0:	10016157 	.word	0x10016157

100163b4 <_printf_common>:
100163b4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100163b6:	0017      	movs	r7, r2
100163b8:	9301      	str	r3, [sp, #4]
100163ba:	688a      	ldr	r2, [r1, #8]
100163bc:	690b      	ldr	r3, [r1, #16]
100163be:	9000      	str	r0, [sp, #0]
100163c0:	000c      	movs	r4, r1
100163c2:	4293      	cmp	r3, r2
100163c4:	da00      	bge.n	100163c8 <_printf_common+0x14>
100163c6:	0013      	movs	r3, r2
100163c8:	0022      	movs	r2, r4
100163ca:	603b      	str	r3, [r7, #0]
100163cc:	3243      	adds	r2, #67	; 0x43
100163ce:	7812      	ldrb	r2, [r2, #0]
100163d0:	2a00      	cmp	r2, #0
100163d2:	d001      	beq.n	100163d8 <_printf_common+0x24>
100163d4:	3301      	adds	r3, #1
100163d6:	603b      	str	r3, [r7, #0]
100163d8:	6823      	ldr	r3, [r4, #0]
100163da:	069b      	lsls	r3, r3, #26
100163dc:	d502      	bpl.n	100163e4 <_printf_common+0x30>
100163de:	683b      	ldr	r3, [r7, #0]
100163e0:	3302      	adds	r3, #2
100163e2:	603b      	str	r3, [r7, #0]
100163e4:	2506      	movs	r5, #6
100163e6:	6823      	ldr	r3, [r4, #0]
100163e8:	401d      	ands	r5, r3
100163ea:	d01e      	beq.n	1001642a <_printf_common+0x76>
100163ec:	0023      	movs	r3, r4
100163ee:	3343      	adds	r3, #67	; 0x43
100163f0:	781b      	ldrb	r3, [r3, #0]
100163f2:	1e5a      	subs	r2, r3, #1
100163f4:	4193      	sbcs	r3, r2
100163f6:	6822      	ldr	r2, [r4, #0]
100163f8:	0692      	lsls	r2, r2, #26
100163fa:	d51c      	bpl.n	10016436 <_printf_common+0x82>
100163fc:	2030      	movs	r0, #48	; 0x30
100163fe:	18e1      	adds	r1, r4, r3
10016400:	3143      	adds	r1, #67	; 0x43
10016402:	7008      	strb	r0, [r1, #0]
10016404:	0021      	movs	r1, r4
10016406:	1c5a      	adds	r2, r3, #1
10016408:	3145      	adds	r1, #69	; 0x45
1001640a:	7809      	ldrb	r1, [r1, #0]
1001640c:	18a2      	adds	r2, r4, r2
1001640e:	3243      	adds	r2, #67	; 0x43
10016410:	3302      	adds	r3, #2
10016412:	7011      	strb	r1, [r2, #0]
10016414:	e00f      	b.n	10016436 <_printf_common+0x82>
10016416:	0022      	movs	r2, r4
10016418:	2301      	movs	r3, #1
1001641a:	3219      	adds	r2, #25
1001641c:	9901      	ldr	r1, [sp, #4]
1001641e:	9800      	ldr	r0, [sp, #0]
10016420:	9e08      	ldr	r6, [sp, #32]
10016422:	47b0      	blx	r6
10016424:	1c43      	adds	r3, r0, #1
10016426:	d00e      	beq.n	10016446 <_printf_common+0x92>
10016428:	3501      	adds	r5, #1
1001642a:	68e3      	ldr	r3, [r4, #12]
1001642c:	683a      	ldr	r2, [r7, #0]
1001642e:	1a9b      	subs	r3, r3, r2
10016430:	429d      	cmp	r5, r3
10016432:	dbf0      	blt.n	10016416 <_printf_common+0x62>
10016434:	e7da      	b.n	100163ec <_printf_common+0x38>
10016436:	0022      	movs	r2, r4
10016438:	9901      	ldr	r1, [sp, #4]
1001643a:	3243      	adds	r2, #67	; 0x43
1001643c:	9800      	ldr	r0, [sp, #0]
1001643e:	9d08      	ldr	r5, [sp, #32]
10016440:	47a8      	blx	r5
10016442:	1c43      	adds	r3, r0, #1
10016444:	d102      	bne.n	1001644c <_printf_common+0x98>
10016446:	2001      	movs	r0, #1
10016448:	4240      	negs	r0, r0
1001644a:	e020      	b.n	1001648e <_printf_common+0xda>
1001644c:	2306      	movs	r3, #6
1001644e:	6820      	ldr	r0, [r4, #0]
10016450:	68e1      	ldr	r1, [r4, #12]
10016452:	683a      	ldr	r2, [r7, #0]
10016454:	4003      	ands	r3, r0
10016456:	2500      	movs	r5, #0
10016458:	2b04      	cmp	r3, #4
1001645a:	d103      	bne.n	10016464 <_printf_common+0xb0>
1001645c:	1a8d      	subs	r5, r1, r2
1001645e:	43eb      	mvns	r3, r5
10016460:	17db      	asrs	r3, r3, #31
10016462:	401d      	ands	r5, r3
10016464:	68a3      	ldr	r3, [r4, #8]
10016466:	6922      	ldr	r2, [r4, #16]
10016468:	4293      	cmp	r3, r2
1001646a:	dd01      	ble.n	10016470 <_printf_common+0xbc>
1001646c:	1a9b      	subs	r3, r3, r2
1001646e:	18ed      	adds	r5, r5, r3
10016470:	2700      	movs	r7, #0
10016472:	42bd      	cmp	r5, r7
10016474:	d00a      	beq.n	1001648c <_printf_common+0xd8>
10016476:	0022      	movs	r2, r4
10016478:	2301      	movs	r3, #1
1001647a:	321a      	adds	r2, #26
1001647c:	9901      	ldr	r1, [sp, #4]
1001647e:	9800      	ldr	r0, [sp, #0]
10016480:	9e08      	ldr	r6, [sp, #32]
10016482:	47b0      	blx	r6
10016484:	1c43      	adds	r3, r0, #1
10016486:	d0de      	beq.n	10016446 <_printf_common+0x92>
10016488:	3701      	adds	r7, #1
1001648a:	e7f2      	b.n	10016472 <_printf_common+0xbe>
1001648c:	2000      	movs	r0, #0
1001648e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10016490 <_printf_i>:
10016490:	b5f0      	push	{r4, r5, r6, r7, lr}
10016492:	b08b      	sub	sp, #44	; 0x2c
10016494:	9206      	str	r2, [sp, #24]
10016496:	000a      	movs	r2, r1
10016498:	3243      	adds	r2, #67	; 0x43
1001649a:	9307      	str	r3, [sp, #28]
1001649c:	9005      	str	r0, [sp, #20]
1001649e:	9204      	str	r2, [sp, #16]
100164a0:	7e0a      	ldrb	r2, [r1, #24]
100164a2:	000c      	movs	r4, r1
100164a4:	9b10      	ldr	r3, [sp, #64]	; 0x40
100164a6:	2a6e      	cmp	r2, #110	; 0x6e
100164a8:	d100      	bne.n	100164ac <_printf_i+0x1c>
100164aa:	e0ab      	b.n	10016604 <_printf_i+0x174>
100164ac:	d811      	bhi.n	100164d2 <_printf_i+0x42>
100164ae:	2a63      	cmp	r2, #99	; 0x63
100164b0:	d022      	beq.n	100164f8 <_printf_i+0x68>
100164b2:	d809      	bhi.n	100164c8 <_printf_i+0x38>
100164b4:	2a00      	cmp	r2, #0
100164b6:	d100      	bne.n	100164ba <_printf_i+0x2a>
100164b8:	e0b5      	b.n	10016626 <_printf_i+0x196>
100164ba:	2a58      	cmp	r2, #88	; 0x58
100164bc:	d000      	beq.n	100164c0 <_printf_i+0x30>
100164be:	e0c5      	b.n	1001664c <_printf_i+0x1bc>
100164c0:	3145      	adds	r1, #69	; 0x45
100164c2:	700a      	strb	r2, [r1, #0]
100164c4:	4a81      	ldr	r2, [pc, #516]	; (100166cc <_printf_i+0x23c>)
100164c6:	e04f      	b.n	10016568 <_printf_i+0xd8>
100164c8:	2a64      	cmp	r2, #100	; 0x64
100164ca:	d01d      	beq.n	10016508 <_printf_i+0x78>
100164cc:	2a69      	cmp	r2, #105	; 0x69
100164ce:	d01b      	beq.n	10016508 <_printf_i+0x78>
100164d0:	e0bc      	b.n	1001664c <_printf_i+0x1bc>
100164d2:	2a73      	cmp	r2, #115	; 0x73
100164d4:	d100      	bne.n	100164d8 <_printf_i+0x48>
100164d6:	e0aa      	b.n	1001662e <_printf_i+0x19e>
100164d8:	d809      	bhi.n	100164ee <_printf_i+0x5e>
100164da:	2a6f      	cmp	r2, #111	; 0x6f
100164dc:	d029      	beq.n	10016532 <_printf_i+0xa2>
100164de:	2a70      	cmp	r2, #112	; 0x70
100164e0:	d000      	beq.n	100164e4 <_printf_i+0x54>
100164e2:	e0b3      	b.n	1001664c <_printf_i+0x1bc>
100164e4:	2220      	movs	r2, #32
100164e6:	6809      	ldr	r1, [r1, #0]
100164e8:	430a      	orrs	r2, r1
100164ea:	6022      	str	r2, [r4, #0]
100164ec:	e037      	b.n	1001655e <_printf_i+0xce>
100164ee:	2a75      	cmp	r2, #117	; 0x75
100164f0:	d01f      	beq.n	10016532 <_printf_i+0xa2>
100164f2:	2a78      	cmp	r2, #120	; 0x78
100164f4:	d033      	beq.n	1001655e <_printf_i+0xce>
100164f6:	e0a9      	b.n	1001664c <_printf_i+0x1bc>
100164f8:	000e      	movs	r6, r1
100164fa:	681a      	ldr	r2, [r3, #0]
100164fc:	3642      	adds	r6, #66	; 0x42
100164fe:	1d11      	adds	r1, r2, #4
10016500:	6019      	str	r1, [r3, #0]
10016502:	6813      	ldr	r3, [r2, #0]
10016504:	7033      	strb	r3, [r6, #0]
10016506:	e0a4      	b.n	10016652 <_printf_i+0x1c2>
10016508:	6821      	ldr	r1, [r4, #0]
1001650a:	681a      	ldr	r2, [r3, #0]
1001650c:	0608      	lsls	r0, r1, #24
1001650e:	d406      	bmi.n	1001651e <_printf_i+0x8e>
10016510:	0649      	lsls	r1, r1, #25
10016512:	d504      	bpl.n	1001651e <_printf_i+0x8e>
10016514:	1d11      	adds	r1, r2, #4
10016516:	6019      	str	r1, [r3, #0]
10016518:	2300      	movs	r3, #0
1001651a:	5ed5      	ldrsh	r5, [r2, r3]
1001651c:	e002      	b.n	10016524 <_printf_i+0x94>
1001651e:	1d11      	adds	r1, r2, #4
10016520:	6019      	str	r1, [r3, #0]
10016522:	6815      	ldr	r5, [r2, #0]
10016524:	2d00      	cmp	r5, #0
10016526:	da3b      	bge.n	100165a0 <_printf_i+0x110>
10016528:	232d      	movs	r3, #45	; 0x2d
1001652a:	9a04      	ldr	r2, [sp, #16]
1001652c:	426d      	negs	r5, r5
1001652e:	7013      	strb	r3, [r2, #0]
10016530:	e036      	b.n	100165a0 <_printf_i+0x110>
10016532:	6821      	ldr	r1, [r4, #0]
10016534:	681a      	ldr	r2, [r3, #0]
10016536:	0608      	lsls	r0, r1, #24
10016538:	d406      	bmi.n	10016548 <_printf_i+0xb8>
1001653a:	0649      	lsls	r1, r1, #25
1001653c:	d504      	bpl.n	10016548 <_printf_i+0xb8>
1001653e:	6815      	ldr	r5, [r2, #0]
10016540:	1d11      	adds	r1, r2, #4
10016542:	6019      	str	r1, [r3, #0]
10016544:	b2ad      	uxth	r5, r5
10016546:	e002      	b.n	1001654e <_printf_i+0xbe>
10016548:	1d11      	adds	r1, r2, #4
1001654a:	6019      	str	r1, [r3, #0]
1001654c:	6815      	ldr	r5, [r2, #0]
1001654e:	4b5f      	ldr	r3, [pc, #380]	; (100166cc <_printf_i+0x23c>)
10016550:	7e22      	ldrb	r2, [r4, #24]
10016552:	9303      	str	r3, [sp, #12]
10016554:	2708      	movs	r7, #8
10016556:	2a6f      	cmp	r2, #111	; 0x6f
10016558:	d01d      	beq.n	10016596 <_printf_i+0x106>
1001655a:	270a      	movs	r7, #10
1001655c:	e01b      	b.n	10016596 <_printf_i+0x106>
1001655e:	0022      	movs	r2, r4
10016560:	2178      	movs	r1, #120	; 0x78
10016562:	3245      	adds	r2, #69	; 0x45
10016564:	7011      	strb	r1, [r2, #0]
10016566:	4a5a      	ldr	r2, [pc, #360]	; (100166d0 <_printf_i+0x240>)
10016568:	6819      	ldr	r1, [r3, #0]
1001656a:	9203      	str	r2, [sp, #12]
1001656c:	1d08      	adds	r0, r1, #4
1001656e:	6822      	ldr	r2, [r4, #0]
10016570:	6018      	str	r0, [r3, #0]
10016572:	680d      	ldr	r5, [r1, #0]
10016574:	0610      	lsls	r0, r2, #24
10016576:	d402      	bmi.n	1001657e <_printf_i+0xee>
10016578:	0650      	lsls	r0, r2, #25
1001657a:	d500      	bpl.n	1001657e <_printf_i+0xee>
1001657c:	b2ad      	uxth	r5, r5
1001657e:	07d3      	lsls	r3, r2, #31
10016580:	d502      	bpl.n	10016588 <_printf_i+0xf8>
10016582:	2320      	movs	r3, #32
10016584:	431a      	orrs	r2, r3
10016586:	6022      	str	r2, [r4, #0]
10016588:	2710      	movs	r7, #16
1001658a:	2d00      	cmp	r5, #0
1001658c:	d103      	bne.n	10016596 <_printf_i+0x106>
1001658e:	2320      	movs	r3, #32
10016590:	6822      	ldr	r2, [r4, #0]
10016592:	439a      	bics	r2, r3
10016594:	6022      	str	r2, [r4, #0]
10016596:	0023      	movs	r3, r4
10016598:	2200      	movs	r2, #0
1001659a:	3343      	adds	r3, #67	; 0x43
1001659c:	701a      	strb	r2, [r3, #0]
1001659e:	e002      	b.n	100165a6 <_printf_i+0x116>
100165a0:	270a      	movs	r7, #10
100165a2:	4b4a      	ldr	r3, [pc, #296]	; (100166cc <_printf_i+0x23c>)
100165a4:	9303      	str	r3, [sp, #12]
100165a6:	6863      	ldr	r3, [r4, #4]
100165a8:	60a3      	str	r3, [r4, #8]
100165aa:	2b00      	cmp	r3, #0
100165ac:	db09      	blt.n	100165c2 <_printf_i+0x132>
100165ae:	2204      	movs	r2, #4
100165b0:	6821      	ldr	r1, [r4, #0]
100165b2:	4391      	bics	r1, r2
100165b4:	6021      	str	r1, [r4, #0]
100165b6:	2d00      	cmp	r5, #0
100165b8:	d105      	bne.n	100165c6 <_printf_i+0x136>
100165ba:	9e04      	ldr	r6, [sp, #16]
100165bc:	2b00      	cmp	r3, #0
100165be:	d011      	beq.n	100165e4 <_printf_i+0x154>
100165c0:	e07b      	b.n	100166ba <_printf_i+0x22a>
100165c2:	2d00      	cmp	r5, #0
100165c4:	d079      	beq.n	100166ba <_printf_i+0x22a>
100165c6:	9e04      	ldr	r6, [sp, #16]
100165c8:	0028      	movs	r0, r5
100165ca:	0039      	movs	r1, r7
100165cc:	f7fc fa9e 	bl	10012b0c <__aeabi_uidivmod>
100165d0:	9b03      	ldr	r3, [sp, #12]
100165d2:	3e01      	subs	r6, #1
100165d4:	5c5b      	ldrb	r3, [r3, r1]
100165d6:	0028      	movs	r0, r5
100165d8:	7033      	strb	r3, [r6, #0]
100165da:	0039      	movs	r1, r7
100165dc:	f7fc fa10 	bl	10012a00 <__aeabi_uidiv>
100165e0:	1e05      	subs	r5, r0, #0
100165e2:	d1f1      	bne.n	100165c8 <_printf_i+0x138>
100165e4:	2f08      	cmp	r7, #8
100165e6:	d109      	bne.n	100165fc <_printf_i+0x16c>
100165e8:	6823      	ldr	r3, [r4, #0]
100165ea:	07db      	lsls	r3, r3, #31
100165ec:	d506      	bpl.n	100165fc <_printf_i+0x16c>
100165ee:	6863      	ldr	r3, [r4, #4]
100165f0:	6922      	ldr	r2, [r4, #16]
100165f2:	4293      	cmp	r3, r2
100165f4:	dc02      	bgt.n	100165fc <_printf_i+0x16c>
100165f6:	2330      	movs	r3, #48	; 0x30
100165f8:	3e01      	subs	r6, #1
100165fa:	7033      	strb	r3, [r6, #0]
100165fc:	9b04      	ldr	r3, [sp, #16]
100165fe:	1b9b      	subs	r3, r3, r6
10016600:	6123      	str	r3, [r4, #16]
10016602:	e02b      	b.n	1001665c <_printf_i+0x1cc>
10016604:	6809      	ldr	r1, [r1, #0]
10016606:	681a      	ldr	r2, [r3, #0]
10016608:	0608      	lsls	r0, r1, #24
1001660a:	d407      	bmi.n	1001661c <_printf_i+0x18c>
1001660c:	0649      	lsls	r1, r1, #25
1001660e:	d505      	bpl.n	1001661c <_printf_i+0x18c>
10016610:	1d11      	adds	r1, r2, #4
10016612:	6019      	str	r1, [r3, #0]
10016614:	6813      	ldr	r3, [r2, #0]
10016616:	8aa2      	ldrh	r2, [r4, #20]
10016618:	801a      	strh	r2, [r3, #0]
1001661a:	e004      	b.n	10016626 <_printf_i+0x196>
1001661c:	1d11      	adds	r1, r2, #4
1001661e:	6019      	str	r1, [r3, #0]
10016620:	6813      	ldr	r3, [r2, #0]
10016622:	6962      	ldr	r2, [r4, #20]
10016624:	601a      	str	r2, [r3, #0]
10016626:	2300      	movs	r3, #0
10016628:	9e04      	ldr	r6, [sp, #16]
1001662a:	6123      	str	r3, [r4, #16]
1001662c:	e016      	b.n	1001665c <_printf_i+0x1cc>
1001662e:	681a      	ldr	r2, [r3, #0]
10016630:	1d11      	adds	r1, r2, #4
10016632:	6019      	str	r1, [r3, #0]
10016634:	6816      	ldr	r6, [r2, #0]
10016636:	2100      	movs	r1, #0
10016638:	6862      	ldr	r2, [r4, #4]
1001663a:	0030      	movs	r0, r6
1001663c:	f000 f92a 	bl	10016894 <memchr>
10016640:	2800      	cmp	r0, #0
10016642:	d001      	beq.n	10016648 <_printf_i+0x1b8>
10016644:	1b80      	subs	r0, r0, r6
10016646:	6060      	str	r0, [r4, #4]
10016648:	6863      	ldr	r3, [r4, #4]
1001664a:	e003      	b.n	10016654 <_printf_i+0x1c4>
1001664c:	0026      	movs	r6, r4
1001664e:	3642      	adds	r6, #66	; 0x42
10016650:	7032      	strb	r2, [r6, #0]
10016652:	2301      	movs	r3, #1
10016654:	6123      	str	r3, [r4, #16]
10016656:	2300      	movs	r3, #0
10016658:	9a04      	ldr	r2, [sp, #16]
1001665a:	7013      	strb	r3, [r2, #0]
1001665c:	9b07      	ldr	r3, [sp, #28]
1001665e:	aa09      	add	r2, sp, #36	; 0x24
10016660:	9300      	str	r3, [sp, #0]
10016662:	0021      	movs	r1, r4
10016664:	9b06      	ldr	r3, [sp, #24]
10016666:	9805      	ldr	r0, [sp, #20]
10016668:	f7ff fea4 	bl	100163b4 <_printf_common>
1001666c:	1c43      	adds	r3, r0, #1
1001666e:	d102      	bne.n	10016676 <_printf_i+0x1e6>
10016670:	2001      	movs	r0, #1
10016672:	4240      	negs	r0, r0
10016674:	e027      	b.n	100166c6 <_printf_i+0x236>
10016676:	6923      	ldr	r3, [r4, #16]
10016678:	0032      	movs	r2, r6
1001667a:	9906      	ldr	r1, [sp, #24]
1001667c:	9805      	ldr	r0, [sp, #20]
1001667e:	9d07      	ldr	r5, [sp, #28]
10016680:	47a8      	blx	r5
10016682:	1c43      	adds	r3, r0, #1
10016684:	d0f4      	beq.n	10016670 <_printf_i+0x1e0>
10016686:	6823      	ldr	r3, [r4, #0]
10016688:	2500      	movs	r5, #0
1001668a:	079b      	lsls	r3, r3, #30
1001668c:	d40f      	bmi.n	100166ae <_printf_i+0x21e>
1001668e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016690:	68e0      	ldr	r0, [r4, #12]
10016692:	4298      	cmp	r0, r3
10016694:	da17      	bge.n	100166c6 <_printf_i+0x236>
10016696:	0018      	movs	r0, r3
10016698:	e015      	b.n	100166c6 <_printf_i+0x236>
1001669a:	0022      	movs	r2, r4
1001669c:	2301      	movs	r3, #1
1001669e:	3219      	adds	r2, #25
100166a0:	9906      	ldr	r1, [sp, #24]
100166a2:	9805      	ldr	r0, [sp, #20]
100166a4:	9e07      	ldr	r6, [sp, #28]
100166a6:	47b0      	blx	r6
100166a8:	1c43      	adds	r3, r0, #1
100166aa:	d0e1      	beq.n	10016670 <_printf_i+0x1e0>
100166ac:	3501      	adds	r5, #1
100166ae:	68e3      	ldr	r3, [r4, #12]
100166b0:	9a09      	ldr	r2, [sp, #36]	; 0x24
100166b2:	1a9b      	subs	r3, r3, r2
100166b4:	429d      	cmp	r5, r3
100166b6:	dbf0      	blt.n	1001669a <_printf_i+0x20a>
100166b8:	e7e9      	b.n	1001668e <_printf_i+0x1fe>
100166ba:	0026      	movs	r6, r4
100166bc:	9b03      	ldr	r3, [sp, #12]
100166be:	3642      	adds	r6, #66	; 0x42
100166c0:	781b      	ldrb	r3, [r3, #0]
100166c2:	7033      	strb	r3, [r6, #0]
100166c4:	e78e      	b.n	100165e4 <_printf_i+0x154>
100166c6:	b00b      	add	sp, #44	; 0x2c
100166c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
100166ca:	46c0      	nop			; (mov r8, r8)
100166cc:	100183b9 	.word	0x100183b9
100166d0:	100183ca 	.word	0x100183ca

100166d4 <_putc_r>:
100166d4:	b570      	push	{r4, r5, r6, lr}
100166d6:	0006      	movs	r6, r0
100166d8:	000d      	movs	r5, r1
100166da:	0014      	movs	r4, r2
100166dc:	2800      	cmp	r0, #0
100166de:	d004      	beq.n	100166ea <_putc_r+0x16>
100166e0:	6983      	ldr	r3, [r0, #24]
100166e2:	2b00      	cmp	r3, #0
100166e4:	d101      	bne.n	100166ea <_putc_r+0x16>
100166e6:	f7ff fc29 	bl	10015f3c <__sinit>
100166ea:	4b12      	ldr	r3, [pc, #72]	; (10016734 <_putc_r+0x60>)
100166ec:	429c      	cmp	r4, r3
100166ee:	d101      	bne.n	100166f4 <_putc_r+0x20>
100166f0:	6874      	ldr	r4, [r6, #4]
100166f2:	e008      	b.n	10016706 <_putc_r+0x32>
100166f4:	4b10      	ldr	r3, [pc, #64]	; (10016738 <_putc_r+0x64>)
100166f6:	429c      	cmp	r4, r3
100166f8:	d101      	bne.n	100166fe <_putc_r+0x2a>
100166fa:	68b4      	ldr	r4, [r6, #8]
100166fc:	e003      	b.n	10016706 <_putc_r+0x32>
100166fe:	4b0f      	ldr	r3, [pc, #60]	; (1001673c <_putc_r+0x68>)
10016700:	429c      	cmp	r4, r3
10016702:	d100      	bne.n	10016706 <_putc_r+0x32>
10016704:	68f4      	ldr	r4, [r6, #12]
10016706:	68a3      	ldr	r3, [r4, #8]
10016708:	3b01      	subs	r3, #1
1001670a:	60a3      	str	r3, [r4, #8]
1001670c:	2b00      	cmp	r3, #0
1001670e:	da05      	bge.n	1001671c <_putc_r+0x48>
10016710:	69a2      	ldr	r2, [r4, #24]
10016712:	4293      	cmp	r3, r2
10016714:	db08      	blt.n	10016728 <_putc_r+0x54>
10016716:	b2eb      	uxtb	r3, r5
10016718:	2b0a      	cmp	r3, #10
1001671a:	d005      	beq.n	10016728 <_putc_r+0x54>
1001671c:	6823      	ldr	r3, [r4, #0]
1001671e:	b2e8      	uxtb	r0, r5
10016720:	1c5a      	adds	r2, r3, #1
10016722:	6022      	str	r2, [r4, #0]
10016724:	701d      	strb	r5, [r3, #0]
10016726:	e004      	b.n	10016732 <_putc_r+0x5e>
10016728:	0022      	movs	r2, r4
1001672a:	0029      	movs	r1, r5
1001672c:	0030      	movs	r0, r6
1001672e:	f7ff fa43 	bl	10015bb8 <__swbuf_r>
10016732:	bd70      	pop	{r4, r5, r6, pc}
10016734:	10018348 	.word	0x10018348
10016738:	10018368 	.word	0x10018368
1001673c:	10018388 	.word	0x10018388

10016740 <__sread>:
10016740:	b570      	push	{r4, r5, r6, lr}
10016742:	000c      	movs	r4, r1
10016744:	250e      	movs	r5, #14
10016746:	5f49      	ldrsh	r1, [r1, r5]
10016748:	f000 f8b0 	bl	100168ac <_read_r>
1001674c:	2800      	cmp	r0, #0
1001674e:	db03      	blt.n	10016758 <__sread+0x18>
10016750:	6d63      	ldr	r3, [r4, #84]	; 0x54
10016752:	181b      	adds	r3, r3, r0
10016754:	6563      	str	r3, [r4, #84]	; 0x54
10016756:	e003      	b.n	10016760 <__sread+0x20>
10016758:	89a2      	ldrh	r2, [r4, #12]
1001675a:	4b02      	ldr	r3, [pc, #8]	; (10016764 <__sread+0x24>)
1001675c:	4013      	ands	r3, r2
1001675e:	81a3      	strh	r3, [r4, #12]
10016760:	bd70      	pop	{r4, r5, r6, pc}
10016762:	46c0      	nop			; (mov r8, r8)
10016764:	ffffefff 	.word	0xffffefff

10016768 <__swrite>:
10016768:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001676a:	001f      	movs	r7, r3
1001676c:	898b      	ldrh	r3, [r1, #12]
1001676e:	0005      	movs	r5, r0
10016770:	000c      	movs	r4, r1
10016772:	0016      	movs	r6, r2
10016774:	05db      	lsls	r3, r3, #23
10016776:	d505      	bpl.n	10016784 <__swrite+0x1c>
10016778:	230e      	movs	r3, #14
1001677a:	5ec9      	ldrsh	r1, [r1, r3]
1001677c:	2200      	movs	r2, #0
1001677e:	2302      	movs	r3, #2
10016780:	f000 f874 	bl	1001686c <_lseek_r>
10016784:	89a2      	ldrh	r2, [r4, #12]
10016786:	4b05      	ldr	r3, [pc, #20]	; (1001679c <__swrite+0x34>)
10016788:	0028      	movs	r0, r5
1001678a:	4013      	ands	r3, r2
1001678c:	81a3      	strh	r3, [r4, #12]
1001678e:	0032      	movs	r2, r6
10016790:	230e      	movs	r3, #14
10016792:	5ee1      	ldrsh	r1, [r4, r3]
10016794:	003b      	movs	r3, r7
10016796:	f000 f81f 	bl	100167d8 <_write_r>
1001679a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001679c:	ffffefff 	.word	0xffffefff

100167a0 <__sseek>:
100167a0:	b570      	push	{r4, r5, r6, lr}
100167a2:	000c      	movs	r4, r1
100167a4:	250e      	movs	r5, #14
100167a6:	5f49      	ldrsh	r1, [r1, r5]
100167a8:	f000 f860 	bl	1001686c <_lseek_r>
100167ac:	89a3      	ldrh	r3, [r4, #12]
100167ae:	1c42      	adds	r2, r0, #1
100167b0:	d103      	bne.n	100167ba <__sseek+0x1a>
100167b2:	4a05      	ldr	r2, [pc, #20]	; (100167c8 <__sseek+0x28>)
100167b4:	4013      	ands	r3, r2
100167b6:	81a3      	strh	r3, [r4, #12]
100167b8:	e004      	b.n	100167c4 <__sseek+0x24>
100167ba:	2280      	movs	r2, #128	; 0x80
100167bc:	0152      	lsls	r2, r2, #5
100167be:	4313      	orrs	r3, r2
100167c0:	81a3      	strh	r3, [r4, #12]
100167c2:	6560      	str	r0, [r4, #84]	; 0x54
100167c4:	bd70      	pop	{r4, r5, r6, pc}
100167c6:	46c0      	nop			; (mov r8, r8)
100167c8:	ffffefff 	.word	0xffffefff

100167cc <__sclose>:
100167cc:	b510      	push	{r4, lr}
100167ce:	230e      	movs	r3, #14
100167d0:	5ec9      	ldrsh	r1, [r1, r3]
100167d2:	f000 f815 	bl	10016800 <_close_r>
100167d6:	bd10      	pop	{r4, pc}

100167d8 <_write_r>:
100167d8:	b570      	push	{r4, r5, r6, lr}
100167da:	0005      	movs	r5, r0
100167dc:	0008      	movs	r0, r1
100167de:	0011      	movs	r1, r2
100167e0:	2200      	movs	r2, #0
100167e2:	4c06      	ldr	r4, [pc, #24]	; (100167fc <_write_r+0x24>)
100167e4:	6022      	str	r2, [r4, #0]
100167e6:	001a      	movs	r2, r3
100167e8:	f7f5 fc36 	bl	1000c058 <_write>
100167ec:	1c43      	adds	r3, r0, #1
100167ee:	d103      	bne.n	100167f8 <_write_r+0x20>
100167f0:	6823      	ldr	r3, [r4, #0]
100167f2:	2b00      	cmp	r3, #0
100167f4:	d000      	beq.n	100167f8 <_write_r+0x20>
100167f6:	602b      	str	r3, [r5, #0]
100167f8:	bd70      	pop	{r4, r5, r6, pc}
100167fa:	46c0      	nop			; (mov r8, r8)
100167fc:	1001b360 	.word	0x1001b360

10016800 <_close_r>:
10016800:	2300      	movs	r3, #0
10016802:	b570      	push	{r4, r5, r6, lr}
10016804:	4c06      	ldr	r4, [pc, #24]	; (10016820 <_close_r+0x20>)
10016806:	0005      	movs	r5, r0
10016808:	0008      	movs	r0, r1
1001680a:	6023      	str	r3, [r4, #0]
1001680c:	f7f1 fe08 	bl	10008420 <_close>
10016810:	1c43      	adds	r3, r0, #1
10016812:	d103      	bne.n	1001681c <_close_r+0x1c>
10016814:	6823      	ldr	r3, [r4, #0]
10016816:	2b00      	cmp	r3, #0
10016818:	d000      	beq.n	1001681c <_close_r+0x1c>
1001681a:	602b      	str	r3, [r5, #0]
1001681c:	bd70      	pop	{r4, r5, r6, pc}
1001681e:	46c0      	nop			; (mov r8, r8)
10016820:	1001b360 	.word	0x1001b360

10016824 <_fstat_r>:
10016824:	2300      	movs	r3, #0
10016826:	b570      	push	{r4, r5, r6, lr}
10016828:	4c06      	ldr	r4, [pc, #24]	; (10016844 <_fstat_r+0x20>)
1001682a:	0005      	movs	r5, r0
1001682c:	0008      	movs	r0, r1
1001682e:	0011      	movs	r1, r2
10016830:	6023      	str	r3, [r4, #0]
10016832:	f7f1 fdf9 	bl	10008428 <_fstat>
10016836:	1c43      	adds	r3, r0, #1
10016838:	d103      	bne.n	10016842 <_fstat_r+0x1e>
1001683a:	6823      	ldr	r3, [r4, #0]
1001683c:	2b00      	cmp	r3, #0
1001683e:	d000      	beq.n	10016842 <_fstat_r+0x1e>
10016840:	602b      	str	r3, [r5, #0]
10016842:	bd70      	pop	{r4, r5, r6, pc}
10016844:	1001b360 	.word	0x1001b360

10016848 <_isatty_r>:
10016848:	2300      	movs	r3, #0
1001684a:	b570      	push	{r4, r5, r6, lr}
1001684c:	4c06      	ldr	r4, [pc, #24]	; (10016868 <_isatty_r+0x20>)
1001684e:	0005      	movs	r5, r0
10016850:	0008      	movs	r0, r1
10016852:	6023      	str	r3, [r4, #0]
10016854:	f7f1 fdee 	bl	10008434 <_isatty>
10016858:	1c43      	adds	r3, r0, #1
1001685a:	d103      	bne.n	10016864 <_isatty_r+0x1c>
1001685c:	6823      	ldr	r3, [r4, #0]
1001685e:	2b00      	cmp	r3, #0
10016860:	d000      	beq.n	10016864 <_isatty_r+0x1c>
10016862:	602b      	str	r3, [r5, #0]
10016864:	bd70      	pop	{r4, r5, r6, pc}
10016866:	46c0      	nop			; (mov r8, r8)
10016868:	1001b360 	.word	0x1001b360

1001686c <_lseek_r>:
1001686c:	b570      	push	{r4, r5, r6, lr}
1001686e:	0005      	movs	r5, r0
10016870:	0008      	movs	r0, r1
10016872:	0011      	movs	r1, r2
10016874:	2200      	movs	r2, #0
10016876:	4c06      	ldr	r4, [pc, #24]	; (10016890 <_lseek_r+0x24>)
10016878:	6022      	str	r2, [r4, #0]
1001687a:	001a      	movs	r2, r3
1001687c:	f7f1 fddc 	bl	10008438 <_lseek>
10016880:	1c43      	adds	r3, r0, #1
10016882:	d103      	bne.n	1001688c <_lseek_r+0x20>
10016884:	6823      	ldr	r3, [r4, #0]
10016886:	2b00      	cmp	r3, #0
10016888:	d000      	beq.n	1001688c <_lseek_r+0x20>
1001688a:	602b      	str	r3, [r5, #0]
1001688c:	bd70      	pop	{r4, r5, r6, pc}
1001688e:	46c0      	nop			; (mov r8, r8)
10016890:	1001b360 	.word	0x1001b360

10016894 <memchr>:
10016894:	b2c9      	uxtb	r1, r1
10016896:	1882      	adds	r2, r0, r2
10016898:	4290      	cmp	r0, r2
1001689a:	d004      	beq.n	100168a6 <memchr+0x12>
1001689c:	7803      	ldrb	r3, [r0, #0]
1001689e:	428b      	cmp	r3, r1
100168a0:	d002      	beq.n	100168a8 <memchr+0x14>
100168a2:	3001      	adds	r0, #1
100168a4:	e7f8      	b.n	10016898 <memchr+0x4>
100168a6:	2000      	movs	r0, #0
100168a8:	4770      	bx	lr
	...

100168ac <_read_r>:
100168ac:	b570      	push	{r4, r5, r6, lr}
100168ae:	0005      	movs	r5, r0
100168b0:	0008      	movs	r0, r1
100168b2:	0011      	movs	r1, r2
100168b4:	2200      	movs	r2, #0
100168b6:	4c06      	ldr	r4, [pc, #24]	; (100168d0 <_read_r+0x24>)
100168b8:	6022      	str	r2, [r4, #0]
100168ba:	001a      	movs	r2, r3
100168bc:	f7f5 fbac 	bl	1000c018 <_read>
100168c0:	1c43      	adds	r3, r0, #1
100168c2:	d103      	bne.n	100168cc <_read_r+0x20>
100168c4:	6823      	ldr	r3, [r4, #0]
100168c6:	2b00      	cmp	r3, #0
100168c8:	d000      	beq.n	100168cc <_read_r+0x20>
100168ca:	602b      	str	r3, [r5, #0]
100168cc:	bd70      	pop	{r4, r5, r6, pc}
100168ce:	46c0      	nop			; (mov r8, r8)
100168d0:	1001b360 	.word	0x1001b360
100168d4:	0000000d 	.word	0x0000000d
100168d8:	736d735b 	.word	0x736d735b
100168dc:	656c625f 	.word	0x656c625f
100168e0:	6961705f 	.word	0x6961705f
100168e4:	65725f72 	.word	0x65725f72
100168e8:	73657571 	.word	0x73657571
100168ec:	6e665f74 	.word	0x6e665f74
100168f0:	5009095d 	.word	0x5009095d
100168f4:	69726961 	.word	0x69726961
100168f8:	7220676e 	.word	0x7220676e
100168fc:	65757165 	.word	0x65757165
10016900:	2e2e7473 	.word	0x2e2e7473
10016904:	0000002e 	.word	0x0000002e
10016908:	736d735b 	.word	0x736d735b
1001690c:	656c625f 	.word	0x656c625f
10016910:	776f705f 	.word	0x776f705f
10016914:	645f7265 	.word	0x645f7265
10016918:	5d6e776f 	.word	0x5d6e776f
1001691c:	00000000 	.word	0x00000000
10016920:	736d735b 	.word	0x736d735b
10016924:	656c625f 	.word	0x656c625f
10016928:	776f705f 	.word	0x776f705f
1001692c:	645f7265 	.word	0x645f7265
10016930:	5d6e776f 	.word	0x5d6e776f
10016934:	6f745309 	.word	0x6f745309
10016938:	6e697070 	.word	0x6e697070
1001693c:	6f632067 	.word	0x6f632067
10016940:	6e616d6d 	.word	0x6e616d6d
10016944:	65722064 	.word	0x65722064
10016948:	76696563 	.word	0x76696563
1001694c:	64206465 	.word	0x64206465
10016950:	6e697275 	.word	0x6e697275
10016954:	64612067 	.word	0x64612067
10016958:	74726576 	.word	0x74726576
1001695c:	6d657369 	.word	0x6d657369
10016960:	2e746e65 	.word	0x2e746e65
10016964:	6f745320 	.word	0x6f745320
10016968:	6e697070 	.word	0x6e697070
1001696c:	2e2e2e67 	.word	0x2e2e2e67
10016970:	00000020 	.word	0x00000020
10016974:	6c696166 	.word	0x6c696166
10016978:	21216465 	.word	0x21216465
1001697c:	00000021 	.word	0x00000021
10016980:	656e6f64 	.word	0x656e6f64
10016984:	00000021 	.word	0x00000021
10016988:	736d735b 	.word	0x736d735b
1001698c:	656c625f 	.word	0x656c625f
10016990:	776f705f 	.word	0x776f705f
10016994:	645f7265 	.word	0x645f7265
10016998:	5d6e776f 	.word	0x5d6e776f
1001699c:	65440909 	.word	0x65440909
100169a0:	65636976 	.word	0x65636976
100169a4:	69617020 	.word	0x69617020
100169a8:	2e646572 	.word	0x2e646572
100169ac:	64202e2e 	.word	0x64202e2e
100169b0:	62617369 	.word	0x62617369
100169b4:	676e696c 	.word	0x676e696c
100169b8:	746e6920 	.word	0x746e6920
100169bc:	75727265 	.word	0x75727265
100169c0:	20737470 	.word	0x20737470
100169c4:	77732026 	.word	0x77732026
100169c8:	68637469 	.word	0x68637469
100169cc:	20676e69 	.word	0x20676e69
100169d0:	6e776f64 	.word	0x6e776f64
100169d4:	6e657320 	.word	0x6e657320
100169d8:	73726f73 	.word	0x73726f73
100169dc:	00000000 	.word	0x00000000
100169e0:	736d735b 	.word	0x736d735b
100169e4:	656c625f 	.word	0x656c625f
100169e8:	776f705f 	.word	0x776f705f
100169ec:	645f7265 	.word	0x645f7265
100169f0:	5d6e776f 	.word	0x5d6e776f
100169f4:	75430909 	.word	0x75430909
100169f8:	6e657272 	.word	0x6e657272
100169fc:	20796c74 	.word	0x20796c74
10016a00:	69646e69 	.word	0x69646e69
10016a04:	69746163 	.word	0x69746163
10016a08:	0000676e 	.word	0x0000676e
10016a0c:	736d735b 	.word	0x736d735b
10016a10:	656c625f 	.word	0x656c625f
10016a14:	776f705f 	.word	0x776f705f
10016a18:	645f7265 	.word	0x645f7265
10016a1c:	5d6e776f 	.word	0x5d6e776f
10016a20:	65440909 	.word	0x65440909
10016a24:	65636976 	.word	0x65636976
10016a28:	6e6f6320 	.word	0x6e6f6320
10016a2c:	7463656e 	.word	0x7463656e
10016a30:	2e2e6465 	.word	0x2e2e6465
10016a34:	6964202e 	.word	0x6964202e
10016a38:	6e6f6373 	.word	0x6e6f6373
10016a3c:	7463656e 	.word	0x7463656e
10016a40:	00676e69 	.word	0x00676e69
10016a44:	736d735b 	.word	0x736d735b
10016a48:	656c625f 	.word	0x656c625f
10016a4c:	7664615f 	.word	0x7664615f
10016a50:	7065725f 	.word	0x7065725f
10016a54:	5f74726f 	.word	0x5f74726f
10016a58:	095d6e66 	.word	0x095d6e66
10016a5c:	65766441 	.word	0x65766441
10016a60:	73697472 	.word	0x73697472
10016a64:	6e656d65 	.word	0x6e656d65
10016a68:	69742074 	.word	0x69742074
10016a6c:	756f656d 	.word	0x756f656d
10016a70:	2e2e2e74 	.word	0x2e2e2e74
10016a74:	00000000 	.word	0x00000000
10016a78:	736d735b 	.word	0x736d735b
10016a7c:	656c625f 	.word	0x656c625f
10016a80:	6e6f635f 	.word	0x6e6f635f
10016a84:	7463656e 	.word	0x7463656e
10016a88:	665f6465 	.word	0x665f6465
10016a8c:	09095d6e 	.word	0x09095d6e
10016a90:	69766544 	.word	0x69766544
10016a94:	20736563 	.word	0x20736563
10016a98:	6e6e6f63 	.word	0x6e6e6f63
10016a9c:	65746365 	.word	0x65746365
10016aa0:	2e2e2e64 	.word	0x2e2e2e64
10016aa4:	00000000 	.word	0x00000000
10016aa8:	20454c42 	.word	0x20454c42
10016aac:	3a4f2f54 	.word	0x3a4f2f54
10016ab0:	30303520 	.word	0x30303520
10016ab4:	736d2030 	.word	0x736d2030
10016ab8:	00000000 	.word	0x00000000
10016abc:	736d735b 	.word	0x736d735b
10016ac0:	656c625f 	.word	0x656c625f
10016ac4:	6e6f635f 	.word	0x6e6f635f
10016ac8:	7463656e 	.word	0x7463656e
10016acc:	665f6465 	.word	0x665f6465
10016ad0:	09095d6e 	.word	0x09095d6e
10016ad4:	6e6f7257 	.word	0x6e6f7257
10016ad8:	4c422067 	.word	0x4c422067
10016adc:	74732045 	.word	0x74732045
10016ae0:	2e657461 	.word	0x2e657461
10016ae4:	73202e2e 	.word	0x73202e2e
10016ae8:	74747568 	.word	0x74747568
10016aec:	20676e69 	.word	0x20676e69
10016af0:	6e776f64 	.word	0x6e776f64
10016af4:	00000000 	.word	0x00000000
10016af8:	736d735b 	.word	0x736d735b
10016afc:	656c625f 	.word	0x656c625f
10016b00:	6961705f 	.word	0x6961705f
10016b04:	5f646572 	.word	0x5f646572
10016b08:	005d6e66 	.word	0x005d6e66
10016b0c:	736d735b 	.word	0x736d735b
10016b10:	656c625f 	.word	0x656c625f
10016b14:	7664615f 	.word	0x7664615f
10016b18:	69747265 	.word	0x69747265
10016b1c:	095d6573 	.word	0x095d6573
10016b20:	76644109 	.word	0x76644109
10016b24:	69747265 	.word	0x69747265
10016b28:	656d6573 	.word	0x656d6573
10016b2c:	6420746e 	.word	0x6420746e
10016b30:	20617461 	.word	0x20617461
10016b34:	20746573 	.word	0x20746573
10016b38:	6c696166 	.word	0x6c696166
10016b3c:	00216465 	.word	0x00216465
10016b40:	736d735b 	.word	0x736d735b
10016b44:	656c625f 	.word	0x656c625f
10016b48:	7664615f 	.word	0x7664615f
10016b4c:	69747265 	.word	0x69747265
10016b50:	095d6573 	.word	0x095d6573
10016b54:	454c4209 	.word	0x454c4209
10016b58:	61747320 	.word	0x61747320
10016b5c:	64657472 	.word	0x64657472
10016b60:	76646120 	.word	0x76646120
10016b64:	69747265 	.word	0x69747265
10016b68:	656d6573 	.word	0x656d6573
10016b6c:	0000746e 	.word	0x0000746e
10016b70:	736d735b 	.word	0x736d735b
10016b74:	7265735f 	.word	0x7265735f
10016b78:	65636976 	.word	0x65636976
10016b7c:	7664615f 	.word	0x7664615f
10016b80:	69747265 	.word	0x69747265
10016b84:	095d6573 	.word	0x095d6573
10016b88:	20454c42 	.word	0x20454c42
10016b8c:	65766461 	.word	0x65766461
10016b90:	73697472 	.word	0x73697472
10016b94:	6e656d65 	.word	0x6e656d65
10016b98:	74732074 	.word	0x74732074
10016b9c:	20747261 	.word	0x20747261
10016ba0:	6c696166 	.word	0x6c696166
10016ba4:	203a6465 	.word	0x203a6465
10016ba8:	73616572 	.word	0x73616572
10016bac:	30206e6f 	.word	0x30206e6f
10016bb0:	00782578 	.word	0x00782578
10016bb4:	736d735b 	.word	0x736d735b
10016bb8:	656c625f 	.word	0x656c625f
10016bbc:	7369645f 	.word	0x7369645f
10016bc0:	6e6e6f63 	.word	0x6e6e6f63
10016bc4:	65746365 	.word	0x65746365
10016bc8:	6e665f64 	.word	0x6e665f64
10016bcc:	6550095d 	.word	0x6550095d
10016bd0:	64207265 	.word	0x64207265
10016bd4:	6f637369 	.word	0x6f637369
10016bd8:	63656e6e 	.word	0x63656e6e
10016bdc:	2e646574 	.word	0x2e646574
10016be0:	42202e2e 	.word	0x42202e2e
10016be4:	2077656e 	.word	0x2077656e
10016be8:	202c6425 	.word	0x202c6425
10016bec:	20454c42 	.word	0x20454c42
10016bf0:	30257830 	.word	0x30257830
10016bf4:	202c7832 	.word	0x202c7832
10016bf8:	25203154 	.word	0x25203154
10016bfc:	54202c64 	.word	0x54202c64
10016c00:	64252032 	.word	0x64252032
10016c04:	00000000 	.word	0x00000000
10016c08:	736d735b 	.word	0x736d735b
10016c0c:	656c625f 	.word	0x656c625f
10016c10:	6174735f 	.word	0x6174735f
10016c14:	70757472 	.word	0x70757472
10016c18:	5309095d 	.word	0x5309095d
10016c1c:	74726174 	.word	0x74726174
10016c20:	20676e69 	.word	0x20676e69
10016c24:	2e2e7075 	.word	0x2e2e7075
10016c28:	0000002e 	.word	0x0000002e
10016c2c:	49544f4e 	.word	0x49544f4e
10016c30:	41434946 	.word	0x41434946
10016c34:	4e4f4954 	.word	0x4e4f4954
10016c38:	52524520 	.word	0x52524520
10016c3c:	2121524f 	.word	0x2121524f
10016c40:	00000000 	.word	0x00000000
10016c44:	544f4e20 	.word	0x544f4e20
10016c48:	74657320 	.word	0x74657320
10016c4c:	0000203f 	.word	0x0000203f

10016c50 <sms_ble_gap_cb>:
	...
10016c5c:	1000860d 00000000 10008641 1000877d     ........A...}...
	...
10016c74:	100086ad 1000843d 00000000 00000000     ....=...........
	...

10016c9c <sms_ble_gatt_server_cb>:
10016c9c:	10008461 100084b1 00000000 00000000     a...............
	...
10016cc4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016cd4:	72756769 70095d65 6c626f72 77206d65     igure].problem w
10016ce4:	656c6968 74657320 676e6974 20707520     hile setting up 
10016cf4:	74747562 00306e6f 736d735b 7475625f     button0.[sms_but
10016d04:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016d14:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016d24:	676e6974 20707520 74747562 00316e6f     ting up button1.
10016d34:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
10016d44:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016d54:	656c6968 74657320 676e6974 20707520     hile setting up 
10016d64:	414c5058 44454e49 65737520 75622072     XPLAINED user bu
10016d74:	6e6f7474 00000000 736d735b 7475625f     tton....[sms_but
10016d84:	5f6e6f74 2d5d6e66 00000030 736d735b     ton_fn]-0...[sms
10016d94:	7475625f 5f6e6f74 2d5d6e66 00000031     _button_fn]-1...
10016da4:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016db4:	61570909 676e696b 20707520 00000000     ..Waking up ....
10016dc4:	0000202e 736d735b 7475625f 5f6e6f74     . ..[sms_button_
10016dd4:	095d6e66 6f4e0909 73752074 73206465     fn]...Not used s
10016de4:	65746174 2e2e2e73 00000000 736d735b     tates.......[sms
10016df4:	7475625f 5f6e6f74 095d6e66 6f4e0909     _button_fn]...No
10016e04:	73752074 73206465 65746174 002e2e2e     t used state....
10016e14:	736d735b 7475625f 5f6e6f74 095d6e66     [sms_button_fn].
10016e24:	68530909 69747475 6420676e 206e776f     ..Shutting down 
10016e34:	00000000 736d735b 7475625f 5f6e6f74     ....[sms_button_
10016e44:	095d6e66 6f4e0909 0000656e 74756853     fn]...None..Shut
10016e54:	776f6420 6f6e206e 00002177 736d735b      down now!..[sms
10016e64:	7475625f 5f6e6f74 69666564 735f656e     _button_define_s
10016e74:	69767265 5d736563 72655309 65636976     ervices].Service
10016e84:	65642073 696e6966 6620676e 656c6961     s defining faile
10016e94:	72202c64 6f736165 7830206e 00007825     d, reason 0x%x..
10016ea4:	736d735b 7475625f 5f6e6f74 69666564     [sms_button_defi
10016eb4:	735f656e 69767265 5d736563 72655309     ne_services].Ser
10016ec4:	65636976 65642073 656e6966 53202c64     vices defined, S
10016ed4:	6220534d 6f747475 6168206e 656c646e     MS button handle
10016ee4:	6425203a 00000000 626f7250 206d656c     : %d....Problem 
10016ef4:	6c696877 65732065 6e697474 70672067     while setting gp
10016f04:	70206f69 00006e69 2e2e7325 4209092e     io pin..%s.....B
10016f14:	6572702d 64252076 2d42202c 20727563     -prev %d, B-cur 
10016f24:	202c6425 20454c42 30257830 202c7832     %d, BLE 0x%02x, 
10016f34:	25203154 54202c64 64252032 4d53202c     T1 %d, T2 %d, SM
10016f44:	64252053 00000000 736d735b 756d695f     S %d....[sms_imu
10016f54:	6e6f635f 75676966 675f6572 5d6f6970     _configure_gpio]
10016f64:	6f725009 6d656c62 69687720 7320656c     .Problem while s
10016f74:	69747465 7520676e 4d492070 52442055     etting up IMU DR
10016f84:	70205944 00006e69 736d735b 75706d5f     DY pin..[sms_mpu
10016f94:	6665645f 5f656e69 76726573 73656369     _define_services
10016fa4:	6553095d 63697672 64207365 6e696665     ].Services defin
10016fb4:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10016fc4:	30206e6f 00782578 736d735b 75706d5f     on 0x%x.[sms_mpu
10016fd4:	6665645f 5f656e69 76726573 73656369     _define_services
10016fe4:	6553095d 63697672 64207365 6e696665     ].Services defin
10016ff4:	202c6465 20534d53 2055504d 646e6168     ed, SMS MPU hand
10017004:	203a656c 00006425 736d735b 64656c5f     le: %d..[sms_led
10017014:	6970675f 6e695f6f 095d7469 626f7270     _gpio_init].prob
10017024:	206d656c 6c696877 65732065 6e697474     lem while settin
10017034:	70752067 64656c20 00000030 736d735b     g up led0...[sms
10017044:	6572705f 72757373 6f635f65 6769666e     _pressure_config
10017054:	5f657275 6f697067 7270095d 656c626f     ure_gpio].proble
10017064:	6877206d 20656c69 74746573 20676e69     m while setting 
10017074:	56207075 70206363 00006e69 736d735b     up Vcc pin..[sms
10017084:	6572705f 72757373 74735f65 75747261     _pressure_startu
10017094:	09095d70 72617453 676e6974 65727020     p]..Starting pre
100170a4:	72757373 65732065 726f736e 00000000     ssure sensor....
100170b4:	736d735b 6572705f 72757373 74735f65     [sms_pressure_st
100170c4:	75747261 09095d70 69614609 2064656c     artup]...Failed 
100170d4:	72206f74 74657365 65727020 72757373     to reset pressur
100170e4:	65642065 65636976 00000000 736d735b     e device....[sms
100170f4:	6572705f 72757373 74735f65 75747261     _pressure_startu
10017104:	09095d70 69614609 2064656c 69206f74     p]...Failed to i
10017114:	6974696e 7a696c61 72702065 75737365     nitialize pressu
10017124:	64206572 63697665 00000065 736d735b     re device...[sms
10017134:	6572705f 72757373 736d5f65 635f3835     _pressure_ms58_c
10017144:	75636c61 6574616c 6574205d 7265706d     alculate] temper
10017154:	72757461 203d2065 20646c25 65727020     ature = %ld  pre
10017164:	72757373 203d2065 00646c25 736d735b     ssure = %ld.[sms
10017174:	6572705f 72757373 65645f65 656e6966     _pressure_define
10017184:	7265735f 65636976 53095d73 69767265     _services].Servi
10017194:	20736563 69666564 676e696e 69616620     ces defining fai
100171a4:	2c64656c 61657220 206e6f73 78257830     led, reason 0x%x
100171b4:	00000000 736d735b 6572705f 72757373     ....[sms_pressur
100171c4:	65645f65 656e6966 7265735f 65636976     e_define_service
100171d4:	53095d73 69767265 20736563 69666564     s].Services defi
100171e4:	2c64656e 534d5320 65727020 72757373     ned, SMS pressur
100171f4:	61682065 656c646e 6425203a 00000000     e handle: %d....
10017204:	736d735b 6e65735f 73726f73 6977735f     [sms_sensors_swi
10017214:	5d686374 43090909 646c756f 2074276e     tch]...Couldn't 
10017224:	72617473 4d492074 00000055 736d735b     start IMU...[sms
10017234:	6e65735f 73726f73 6977735f 5d686374     _sensors_switch]
10017244:	43090909 646c756f 2074276e 72617473     ...Couldn't star
10017254:	72702074 75737365 73206572 6f736e65     t pressure senso
10017264:	00000072 736d735b 6e65735f 73726f73     r...[sms_sensors
10017274:	6977735f 5d686374 53090909 7720534d     _switch]...SMS w
10017284:	696b726f 6d20676e 3a65646f 00642520     orking mode: %d.
10017294:	1000b038 1000b046 1000b054 1000b062     8...F...T...b...
100172a4:	1000b070 1000b07e 1000b08c 1000b09c     p...~...........
100172b4:	1000b0ac 1000b0bc 1000b0cc 1000b0dc     ................
100172c4:	1000b0ec 1000b0fc 1000b10c 1000b11c     ................
100172d4:	1000b12c 1000b13c 1000b14c 1000b15c     ,...<...L...\...
100172e4:	1000b16c 1000b17c 1000b18c 1000b19c     l...|...........
100172f4:	1000b1ac 1000b1bc 1000b1cc 1000b1dc     ................
10017304:	1000b1ea 1000b1f8 1000b206 1000b214     ................
10017314:	1000b222 1000b230 1000b23e 1000b24c     "...0...>...L...
10017324:	1000b25c 1000b26c 1000b27c 1000b28c     \...l...|.......
10017334:	1000b29c 1000b2ac 1000b2bc 1000b2cc     ................
10017344:	1000b2dc 1000b2ec 1000b2fc 1000b30c     ................
10017354:	1000b31c 1000b32c 1000b33c 1000b34c     ....,...<...L...
10017364:	1000b35a 1000b368 1000b394 1000b3a2     Z...h...........
10017374:	1000b3b0 1000b3be 1000b3cc 1000b3da     ................
10017384:	1000b3e8 1000b3f6 1000b404 1000b412     ................
10017394:	1000b420 1000b42e 1000b43c 1000b44a      .......<...J...
100173a4:	1000b458 1000b466 1000b474 1000b482     X...f...t.......
100173b4:	1000b490 1000b49e 1000b4ac 1000b4ba     ................
100173c4:	1000b4c8 1000b4d6 1000b4e4 1000b4f2     ................
100173d4:	1000b500 1000b50e 1000b51c 1000b52a     ............*...
100173e4:	1000b538 1000b546 1000b554 1000b562     8...F...T...b...
100173f4:	1000b570 1000b57e 1000b58c 1000b59a     p...~...........
10017404:	1000b5a8 1000b5b6 1000b5c4 1000b5d2     ................
10017414:	1000b5e0 1000b5ee 1000b5fc 1000b60a     ................
10017424:	1000b618 1000b626 1000b634 1000b642     ....&...4...B...
10017434:	1000b650 1000b65e 1000b66c 1000b67a     P...^...l...z...
10017444:	1000b714 1000b73c 1000b764 1000b78c     ....<...d.......
10017454:	1000b9cc 1000b7bc 1000b7d4 1000b84c     ............L...
10017464:	1000b864 1000b7ec 1000b804 1000b81c     d...............
10017474:	1000b834 1000b87c 1000bb40 1000bb40     4...|...@...@...
10017484:	1000bb40 1000bb40 1000bb40 1000bb40     @...@...@...@...
10017494:	1000bb40 1000bb40 1000b924 1000b93c     @...@...$...<...
100174a4:	1000b954 1000b9e2 1000b8ac 1000bb40     T...........@...
100174b4:	1000bb40 1000bb40 1000bb40 1000bb40     @...@...@...@...
100174c4:	1000bb40 1000b96c 1000b984 1000b99c     @...l...........
100174d4:	1000b9b4 1000bb40 1000baf8 1000bb10     ....@...........
100174e4:	1000bb40 1000bb40 1000ba0e 1000ba24     @...@.......$...
100174f4:	1000ba3a 1000ba50 1000bb40 1000bb40     :...P...@...@...
10017504:	1000bb40 1000bb40 1000bb40 1000bb40     @...@...@...@...
10017514:	1000bb40 1000bb40 1000b700 1000b728     @...@.......(...
10017524:	1000b750 1000b778 1000b7a4 1000b894     P...x...........
10017534:	1000b8c4 1000b8dc 1000b8f4 1000b90c     ................
10017544:	1000b9f8 1000ba66 1000bae0 1000bb28     ....f.......(...
10017554:	1000c222 1000c234 1000c20a 1000c20a     "...4...........
10017564:	1000c20a 1000c222 1000c20a 1000c20a     ...."...........
10017574:	1000cc26 1000cc9a 1000cc0e 1000cca0     &...............
10017584:	1000cc14 1000cc1a 1000cc20 1000d380     ........ .......
10017594:	1000d380 1000d380 1000d380 1000d380     ................
100175a4:	1000d380 1000d380 1000d380 1000d380     ................
100175b4:	1000d380 1000d380 1000d380 1000d380     ................
100175c4:	1000d380 1000d380 1000d380 1000d380     ................
100175d4:	1000d380 1000d380 1000d39e 1000d39e     ................
100175e4:	1000d39e 1000d39e 1000d39e 1000d39e     ................
100175f4:	1000d39e 1000d39e 1000d39e 1000d39e     ................
10017604:	1000d3c0 1000d3c0 1000d3c0 1000d3c0     ................
10017614:	1000d3c0 1000d3c0 1000d3c0 1000d3c0     ................
10017624:	1000d3c0 1000d3c0 1000d3f0 1000d3f0     ................
10017634:	1000d3f0 1000d3f0 1000d3f0 1000d3f0     ................
10017644:	1000d40a 1000d40a 1000d40a 1000d40a     ................
10017654:	1000d40a 1000d40a 1000d40a 1000d40a     ................
10017664:	1000d40a 1000d424 1000d424 1000d446     ....$...$...F...
10017674:	1000d446 1000d460 1000d446 34333231     F...`...F...1234
10017684:	00003635 efcdab00 00efcdab              56..........

10017690 <ble_mgr_gatt_server_handle>:
	...
100176a8:	1000c11d 1000c145 1000c18d 00000000     ....E...........
100176b8:	65646e55 656e6966 76452064 20746e65     Undefined Event 
100176c8:	65636552 64657669 00000000 6e616353     Received....Scan
100176d8:	676e696e 61662020 64656c69 00000000     ning  failed....
100176e8:	65766441 73697472 20676e69 6c696166     Advertising fail
100176f8:	00006465 2d454c42 2055544d 6e616843     ed..BLE-MTU Chan
10017708:	2c646567 6e6f4320 7463656e 206e6f69     ged, Connection 
10017718:	646e6148 203a656c 202c6425 2077654e     Handle: %d, New 
10017728:	756c6156 25203a65 00000064 2055544d     Value: %d...MTU 
10017738:	6e616843 2c646567 6e6f4320 7463656e     Changed, Connect
10017748:	206e6f69 646e6148 253a656c 4f202c64     ion Handle:%d, O
10017758:	61726570 6e6f6974 0064253a 2055544d     peration:%d.MTU 
10017768:	6e616843 46206567 656c6961 43202c64     Change Failed, C
10017778:	656e6e6f 6f697463 6148206e 656c646e     onnection Handle
10017788:	2c64253a 65704f20 69746172 253a6e6f     :%d, Operation:%
10017798:	00000064 72616843 69725720 43206574     d...Char Write C
100177a8:	4320646d 6c706d6f 2c657465 6e6f4320     md Complete, Con
100177b8:	7463656e 206e6f69 646e6148 253a656c     nection Handle:%
100177c8:	4f202c64 61726570 6e6f6974 0064253a     d, Operation:%d.
100177d8:	72616843 69725720 43206574 4620646d     Char Write Cmd F
100177e8:	656c6961 43202c64 656e6e6f 6f697463     ailed, Connectio
100177f8:	6148206e 656c646e 2c64253a 65704f20     n Handle:%d, Ope
10017808:	69746172 253a6e6f 00000064 74617453     ration:%d...Stat
10017818:	6f4e2065 61482074 656c646e 64252064     e Not Handled %d
10017828:	00000000 69766544 64206563 6f637369     ....Device disco
10017838:	63656e6e 20646574 73616552 303a6e6f     nnected Reason:0
10017848:	32302578 61482078 656c646e 2578303d     x%02x Handle=0x%
10017858:	00000078 425f5441 435f454c 5f4e4e4f     x...AT_BLE_CONN_
10017868:	41524150 50555f4d 45544144 00000020     PARAM_UPDATE ...
10017878:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10017888:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10017898:	6c706d6f 64657465 63757320 73736563     ompleted success
100178a8:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
100178b8:	6e206563 6620746f 646e756f 636e6520     ce not found enc
100178c8:	74707972 206e6f69 6f666e69 00000000     ryption info....
100178d8:	6f666e49 7665443a 20656369 6e756f66     Info:Device foun
100178e8:	64612064 73657264 255b2073 20205d64     d address [%d]  
100178f8:	30257830 30255832 30255832 30255832     0x%02X%02X%02X%0
10017908:	30255832 30255832 00205832 6f666e49     2X%02X%02X .Info
10017918:	78616d3a 6d756d69 2e6f6e20 7320666f     :maximum no.of s
10017928:	206e6163 69766564 72206563 68636165     can device reach
10017938:	2e2e6465 6f74532e 6e697070 63532067     ed...Stopping Sc
10017948:	00006e61 6c696146 74206465 7473206f     an..Failed to st
10017958:	7320706f 6e6e6163 00676e69 30257830     op scanning.0x%0
10017968:	202c5832 00000000 4b525343 0000203a     2X, ....CSRK: ..
10017978:	3a4b5249 00000000 72696150 20676e69     IRK:....Pairing 
10017988:	6c696166 2e2e6465 7369442e 6e6e6f63     failed...Disconn
10017998:	69746365 0000676e 63736944 656e6e6f     ecting..Disconne
100179a8:	52207463 65757165 46207473 656c6961     ct Request Faile
100179b8:	00000064 72696150 20676e69 636f7270     d...Pairing proc
100179c8:	72756465 6f632065 656c706d 20646574     edure completed 
100179d8:	63637573 66737365 796c6c75 00000000     successfully....
100179e8:	20454c42 69766544 6e206563 6620746f     BLE Device not f
100179f8:	646e756f 206f7420 726f7473 68742065     ound to store th
10017a08:	61702065 6e697269 6e692067 00006f66     e pairing info..
10017a18:	3a4b544c 00000020 72636e45 69747079     LTK: ...Encrypti
10017a28:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017a38:	76616c53 65532065 69727563 52207974     Slave Security R
10017a48:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017a58:	206e6f69 6c696146 00006465 656e6547     ion Failed..Gene
10017a68:	65746172 544c2064 00203a4b 30257830     rated LTK: .0x%0
10017a78:	00205832 646e6553 20676e69 72696170     2X .Sending pair
10017a88:	20676e69 70736572 65736e6f 00000000     ing response....
10017a98:	72696150 71655220 74736575 41202d20     Pair Request - A
10017aa8:	65687475 6369746e 6f697461 6146206e     uthentication Fa
10017ab8:	64656c69 00000000 65746e45 68742072     iled....Enter th
10017ac8:	61502065 656b7373 2d362879 69676944     e Passkey(6-Digi
10017ad8:	69202974 6554206e 6e696d72 003a6c61     t) in Terminal:.
10017ae8:	206e6950 656d6954 0074756f 63736944     Pin Timeout.Disc
10017af8:	656e6e6f 6e697463 2e2e2067 0000002e     onnecting ......
10017b08:	61656c50 45206573 7265746e 65687420     Please Enter the
10017b18:	6c6f6620 69776f6c 5020676e 2d737361      following Pass-
10017b28:	65646f63 206e6f28 6568746f 65442072     code(on other De
10017b38:	65636976 00003a29 72696150 79656b2d     vice):..Pair-key
10017b48:	70657220 6620796c 656c6961 00000064      reply failed...
10017b58:	20424f4f 74616546 20657275 20746f4e     OOB Feature Not 
10017b68:	70707573 6574726f 00000064 65746e45     supported...Ente
10017b78:	20646572 73736150 646f632d 00003a65     red Pass-code:..
10017b88:	2d434e45 3a716552 6e6f4320 6148206e     ENC-Req: Conn Ha
10017b98:	656c646e 76654420 20656369 6e756f46     ndle Device Foun
10017ba8:	64683a64 64253a6c 00000000 74736f68     d:hdl:%d....host
10017bb8:	76656420 20656369 76696465 00782520      device ediv %x.
10017bc8:	72656570 76656420 20656369 76696465     peer device ediv
10017bd8:	00782520 5f636e65 20716572 76696465      %x.enc_req ediv
10017be8:	00782520 20656854 65646e69 73692078      %x.The index is
10017bf8:	00642520 2d434e45 3a716552 79654b20      %d.ENC-Req: Key
10017c08:	756f4620 0000646e 72696150 20676e69      Found..Pairing 
10017c18:	6f666e69 74616d72 206e6f69 7020666f     information of p
10017c28:	20726565 69766564 69206563 6f6e2073     eer device is no
10017c38:	76612074 616c6961 2e656c62 00000000     t available.....
10017c48:	61656c50 75206573 6961706e 68742072     Please unpair th
10017c58:	65642065 65636976 6f726620 6570206d     e device from pe
10017c68:	64207265 63697665 6f6d2865 656c6962     er device(mobile
10017c78:	65732029 6e697474 6d207367 20756e65     ) settings menu 
10017c88:	20646e61 72617473 61702074 6e697269     and start pairin
10017c98:	67612067 006e6961 72636e45 69747079     g again.Encrypti
10017ca8:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017cb8:	69614620 0064656c 72636e45 69747079      Failed.Encrypti
10017cc8:	52206e6f 65757165 52207473 796c7065     on Request Reply
10017cd8:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017ce8:	696e4909 6c616974 6e697a69 41532067     .Initializing SA
10017cf8:	3131424d 00000000 656c625b 696e695f     MB11....[ble_ini
10017d08:	09095d74 424d4153 49203131 6974696e     t]..SAMB11 Initi
10017d18:	7a696c61 6f697461 6166206e 64656c69     alization failed
10017d28:	00000000 656c625b 696e695f 09095d74     ....[ble_init]..
10017d38:	61656c50 63206573 6b636568 65687420     Please check the
10017d48:	776f7020 61207265 6320646e 656e6e6f      power and conne
10017d58:	6f697463 202f206e 64726168 65726177     ction / hardware
10017d68:	6e6f6320 7463656e 0000726f 52424153      connector..SABR
10017d78:	4d532d65 00000053 69766544 6e206563     e-SMS...Device n
10017d88:	20656d61 20746573 6c696166 00006465     ame set failed..
10017d98:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
10017da8:	5d676966 44420909 64646120 73736572     fig]..BD address
10017db8:	74656720 69616620 0064656c 656c625b      get failed.[ble
10017dc8:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017dd8:	44420909 64644120 73736572 2578303a     ..BD Address:0x%
10017de8:	25583230 25583230 25583230 25583230     02X%02X%02X%02X%
10017df8:	25583230 2c583230 64644120 73736572     02X%02X, Address
10017e08:	70795420 64253a65 00000000 656c625b      Type:%d....[ble
10017e18:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
10017e28:	74655309 454c4220 76654420 20656369     .Set BLE Device 
10017e38:	666e6f63 72756769 6f697461 6166206e     configuration fa
10017e48:	64656c69 00000000 656c625b 7465735f     iled....[ble_set
10017e58:	7665645f 6e6f635f 5d676966 74655309     _dev_config].Set
10017e68:	454c4220 76654420 20656369 72646441      BLE Device Addr
10017e78:	20737365 6c696166 00006465 6e616353     ess failed..Scan
10017e88:	676e696e 502e2e2e 7361656c 61772065     ning...Please wa
10017e98:	2e2e7469 0000002e 76616c53 65732065     it......Slave se
10017ea8:	69727563 72207974 65757165 73207473     curity request s
10017eb8:	65636375 75667373 0000006c 76616c53     uccessful...Slav
10017ec8:	65732065 69727563 72207974 65757165     e security reque
10017ed8:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017ee8:	65746365 6f742064 65657020 65642072     ected to peer de
10017ef8:	65636976 74697720 64612068 73657264     vice with addres
10017f08:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017f18:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017f28:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017f38:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
10017f48:	61522067 6d6f646e 64646120 73736572     g Random address
10017f58:	63757320 73736563 00002a2a 6f736552      success**..Reso
10017f68:	6e69766c 61522067 6d6f646e 64646120     lving Random add
10017f78:	73736572 69616620 2a64656c 0000002a     ress failed**...
10017f88:	2078614d 626d756e 6f207265 6f632066     Max number of co
10017f98:	63656e6e 6e6f6974 61657220 64656863     nnection reached
10017fa8:	6425203a 3d3d3d20 7369443e 6e6e6f63     : %d ===>Disconn
10017fb8:	69746365 2e2e676e 0000002e 69766544     ecting......Devi
10017fc8:	43206563 656e6e6f 6f697463 6146206e     ce Connection Fa
10017fd8:	64656c69 53202d20 75746174 25203a73     iled - Status: %
10017fe8:	00000064 23232323 23232323 65442323     d...##########De
10017ff8:	65636976 756f4620 0000646e 23232323     vice Found..####
10018008:	23232323 65442323 65636976 746f4e20     ######Device Not
10018018:	756f4620 0000646e 69766544 69206563      Found..Device i
10018028:	253a7864 00000064 4c420a0d 76452d45     dx:%d.....BLE-Ev
10018038:	3a746e65 00006425 54544147 7265535f     ent:%d..GATT_Ser
10018048:	20726576 6e657645 64253a74 00000000     ver Event:%d....
10018058:	2d454c42 616e614d 3a726567 6e6b6e55     BLE-Manager:Unkn
10018068:	206e776f 6e657645 78303d74 00005825     own Event=0x%X..
10018078:	656c625b 6e616d5f 72656761 0909095d     [ble_manager]...
10018088:	756e614d 74636166 72657275 65707320     Manufacturer spe
10018098:	69666963 61642063 65206174 6c62616e     cific data enabl
100180a8:	00006465 5a2d571c 00002dbe 20454c42     ed...W-Z.-..BLE 
100180b8:	65766441 73697472 6e656d65 61642074     Advertisement da
100180c8:	73206174 66207465 656c6961 00000064     ta set failed...

100180d8 <ble_mgr_gap_handle>:
100180d8:	1000c0a9 1000c359 1000c0cd 1000c0f5     ....Y...........
100180e8:	00000000 1000cfd5 1000c1d5 1000c271     ............q...
100180f8:	1000c5b5 1000c405 1000c7b5 1000c5cd     ................
10018108:	1000c941 1000ca85 1000c295 1000d221     A...........!...
	...
10018124:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10018134:	6f727245 6e692072 736d7320 7475625f     Error in sms_but
10018144:	5f6e6f74 29286e66 00000000 316e7442     ton_fn()....Btn1
10018154:	746e6920 202e2e2e 00000000 73756c66      int... ....flus
10018164:	676e6968 00000021 73657250 65732073     hing!...Press se
10018174:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10018184:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10018194:	6e657645 65672074 69742074 756f656d     Event get timeou
100181a4:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
100181b4:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
100181c4:	04022e70                                         p.

100181c6 <CSWTCH.45>:
100181c6:	00100402                                         ...

100181c9 <CSWTCH.47>:
100181c9:	03010300 03030303 03030303 02020303              ...............

100181d8 <client_conf_uuid>:
100181d8:	29042902                                         .)

100181da <presentation_format_uuid>:
100181da:	29012904                                         .)

100181dc <user_desc_uuid>:
100181dc:	29032901                                         .)

100181de <server_conf_uuid>:
100181de:	29002903                                         .)

100181e0 <extended_props_uuid>:
100181e0:	28022900                                         .)

100181e2 <include_uuid>:
100181e2:	28032802                                         .(

100181e4 <char_uuid>:
100181e4:	00002803 00776f70 00000000              .(..pow.....

100181f0 <TWO52>:
100181f0:	00000000 43300000 00000000 c3300000     ......0C......0.
10018200:	10012ff2 10012f16 10012fd4 10012fac     ./.../.../.../..
10018210:	10012fd4 10012fa0 10012fd4 10012fac     ./.../.../.../..
10018220:	10012f16 10012f16 10012fa0 10012fac     ./.../.../.../..
10018230:	10013058 10013058 10013058 10012fda     X0..X0..X0.../..
10018240:	10012f16 10012f16 10012fc0 10012faa     ./.../.../.../..
10018250:	10012fc0 10012fa0 10012fc0 10012faa     ./.../.../.../..
10018260:	10012f16 10012f16 10012fa0 10012faa     ./.../.../.../..
10018270:	10013058 10013058 10013058 10013064     X0..X0..X0..d0..
10018280:	10013350 100132ae 100132ae 100132ac     P3...2...2...2..
10018290:	10013342 10013342 10013338 100132ac     B3..B3..83...2..
100182a0:	10013342 10013338 10013342 100132ac     B3..83..B3...2..
100182b0:	10013348 10013348 10013348 100133d2     H3..H3..H3...3..
100182c0:	10014100 10013fce 100140d4 10013fc4     .A...?...@...?..
100182d0:	100140d4 100140de 100140d4 10013fc4     .@...@...@...?..
100182e0:	10013fce 10013fce 100140de 10013fc4     .?...?...@...?..
100182f0:	10013fba 10013fba 10013fba 10014330     .?...?...?..0C..
10018300:	10014948 10014808 10014808 10014806     HI...H...H...H..
10018310:	10014920 10014920 10014912 10014806      I.. I...I...H..
10018320:	10014920 10014912 10014920 10014806      I...I.. I...H..
10018330:	10014928 10014928 10014928 10014b28     (I..(I..(I..(K..
10018340:	00000043                                C...

10018344 <_global_impure_ptr>:
10018344:	10018408                                ....

10018348 <__sf_fake_stdin>:
	...

10018368 <__sf_fake_stdout>:
	...

10018388 <__sf_fake_stderr>:
	...
100183a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100183b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100183c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
100183d8:	00006665                                ef..

100183dc <_init>:
100183dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100183de:	46c0      	nop			; (mov r8, r8)
100183e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100183e2:	bc08      	pop	{r3}
100183e4:	469e      	mov	lr, r3
100183e6:	4770      	bx	lr

100183e8 <__init_array_start>:
100183e8:	100080b1 	.word	0x100080b1

100183ec <_fini>:
100183ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100183ee:	46c0      	nop			; (mov r8, r8)
100183f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100183f2:	bc08      	pop	{r3}
100183f4:	469e      	mov	lr, r3
100183f6:	4770      	bx	lr

100183f8 <__fini_array_start>:
100183f8:	10008089 	.word	0x10008089
