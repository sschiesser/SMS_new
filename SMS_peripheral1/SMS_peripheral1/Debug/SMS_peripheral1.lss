
SMS_peripheral1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000f8fc  10008000  10008000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000070  100178fc  100178fc  000178fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00002f18  1001796c  1001796c  0001796c  2**2
                  ALLOC
  3 .stack        00000804  1001a884  1001a884  0001796c  2**0
                  ALLOC
  4 .ARM.attributes 00000028  00000000  00000000  0001796c  2**0
                  CONTENTS, READONLY
  5 .comment      000000b4  00000000  00000000  00017994  2**0
                  CONTENTS, READONLY
  6 .debug_info   0004b2fd  00000000  00000000  00017a48  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000052c9  00000000  00000000  00062d45  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000a385  00000000  00000000  0006800e  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000b40  00000000  00000000  00072393  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000b00  00000000  00000000  00072ed3  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0000c33e  00000000  00000000  000739d3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00015ffe  00000000  00000000  0007fd11  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    001417d8  00000000  00000000  00095d0f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002b9c  00000000  00000000  001d74e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

10008000 <app_entry>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void app_entry(void)
{
10008000:	b510      	push	{r4, lr}

    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
10008002:	4b18      	ldr	r3, [pc, #96]	; (10008064 <app_entry+0x64>)
10008004:	4a18      	ldr	r2, [pc, #96]	; (10008068 <app_entry+0x68>)
10008006:	429a      	cmp	r2, r3
10008008:	d003      	beq.n	10008012 <app_entry+0x12>
        for (; pDest < &_erelocate;) {
1000800a:	4b18      	ldr	r3, [pc, #96]	; (1000806c <app_entry+0x6c>)
1000800c:	4a15      	ldr	r2, [pc, #84]	; (10008064 <app_entry+0x64>)
1000800e:	429a      	cmp	r2, r3
10008010:	d304      	bcc.n	1000801c <app_entry+0x1c>
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008012:	4b17      	ldr	r3, [pc, #92]	; (10008070 <app_entry+0x70>)
10008014:	4a17      	ldr	r2, [pc, #92]	; (10008074 <app_entry+0x74>)
10008016:	429a      	cmp	r2, r3
10008018:	d310      	bcc.n	1000803c <app_entry+0x3c>
1000801a:	e01e      	b.n	1000805a <app_entry+0x5a>
1000801c:	4b16      	ldr	r3, [pc, #88]	; (10008078 <app_entry+0x78>)
1000801e:	4a13      	ldr	r2, [pc, #76]	; (1000806c <app_entry+0x6c>)
10008020:	3203      	adds	r2, #3
10008022:	1ad2      	subs	r2, r2, r3
10008024:	0892      	lsrs	r2, r2, #2
10008026:	3201      	adds	r2, #1
10008028:	0092      	lsls	r2, r2, #2
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
1000802a:	2300      	movs	r3, #0
            *pDest++ = *pSrc++;
1000802c:	480d      	ldr	r0, [pc, #52]	; (10008064 <app_entry+0x64>)
1000802e:	490e      	ldr	r1, [pc, #56]	; (10008068 <app_entry+0x68>)
10008030:	58cc      	ldr	r4, [r1, r3]
10008032:	50c4      	str	r4, [r0, r3]
10008034:	3304      	adds	r3, #4
    /* Initialize the relocate segment */
    pSrc = &_etext;
    pDest = &_srelocate;

    if (pSrc != pDest) {
        for (; pDest < &_erelocate;) {
10008036:	4293      	cmp	r3, r2
10008038:	d1fa      	bne.n	10008030 <app_entry+0x30>
1000803a:	e7ea      	b.n	10008012 <app_entry+0x12>
1000803c:	4b0f      	ldr	r3, [pc, #60]	; (1000807c <app_entry+0x7c>)
1000803e:	490c      	ldr	r1, [pc, #48]	; (10008070 <app_entry+0x70>)
10008040:	3103      	adds	r1, #3
10008042:	1ac9      	subs	r1, r1, r3
10008044:	0889      	lsrs	r1, r1, #2
10008046:	3101      	adds	r1, #1
10008048:	0089      	lsls	r1, r1, #2
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
1000804a:	2300      	movs	r3, #0
        *pDest++ = 0;
1000804c:	4c09      	ldr	r4, [pc, #36]	; (10008074 <app_entry+0x74>)
1000804e:	2000      	movs	r0, #0
10008050:	191a      	adds	r2, r3, r4
10008052:	6010      	str	r0, [r2, #0]
10008054:	3304      	adds	r3, #4
            *pDest++ = *pSrc++;
        }
    }

    /* Clear the zero segment */
    for (pDest = &_szero; pDest < &_ezero;) {
10008056:	428b      	cmp	r3, r1
10008058:	d1fa      	bne.n	10008050 <app_entry+0x50>
        *pDest++ = 0;
    }

    /* Initialize the C library */
    __libc_init_array();
1000805a:	4b09      	ldr	r3, [pc, #36]	; (10008080 <app_entry+0x80>)
1000805c:	4798      	blx	r3

    /* Branch to main function */
    main();
1000805e:	4b09      	ldr	r3, [pc, #36]	; (10008084 <app_entry+0x84>)
10008060:	4798      	blx	r3

    /* return to BLE OS*/
    return;
}
10008062:	bd10      	pop	{r4, pc}
10008064:	100178fc 	.word	0x100178fc
10008068:	100178fc 	.word	0x100178fc
1000806c:	1001796c 	.word	0x1001796c
10008070:	1001a884 	.word	0x1001a884
10008074:	1001796c 	.word	0x1001796c
10008078:	10017900 	.word	0x10017900
1000807c:	10017970 	.word	0x10017970
10008080:	1001553d 	.word	0x1001553d
10008084:	1000de79 	.word	0x1000de79

10008088 <__do_global_dtors_aux>:
10008088:	b510      	push	{r4, lr}
1000808a:	4c06      	ldr	r4, [pc, #24]	; (100080a4 <__do_global_dtors_aux+0x1c>)
1000808c:	7823      	ldrb	r3, [r4, #0]
1000808e:	2b00      	cmp	r3, #0
10008090:	d107      	bne.n	100080a2 <__do_global_dtors_aux+0x1a>
10008092:	4b05      	ldr	r3, [pc, #20]	; (100080a8 <__do_global_dtors_aux+0x20>)
10008094:	2b00      	cmp	r3, #0
10008096:	d002      	beq.n	1000809e <__do_global_dtors_aux+0x16>
10008098:	4804      	ldr	r0, [pc, #16]	; (100080ac <__do_global_dtors_aux+0x24>)
1000809a:	e000      	b.n	1000809e <__do_global_dtors_aux+0x16>
1000809c:	bf00      	nop
1000809e:	2301      	movs	r3, #1
100080a0:	7023      	strb	r3, [r4, #0]
100080a2:	bd10      	pop	{r4, pc}
100080a4:	1001796c 	.word	0x1001796c
100080a8:	00000000 	.word	0x00000000
100080ac:	100178fc 	.word	0x100178fc

100080b0 <frame_dummy>:
100080b0:	4b08      	ldr	r3, [pc, #32]	; (100080d4 <frame_dummy+0x24>)
100080b2:	b510      	push	{r4, lr}
100080b4:	2b00      	cmp	r3, #0
100080b6:	d003      	beq.n	100080c0 <frame_dummy+0x10>
100080b8:	4907      	ldr	r1, [pc, #28]	; (100080d8 <frame_dummy+0x28>)
100080ba:	4808      	ldr	r0, [pc, #32]	; (100080dc <frame_dummy+0x2c>)
100080bc:	e000      	b.n	100080c0 <frame_dummy+0x10>
100080be:	bf00      	nop
100080c0:	4807      	ldr	r0, [pc, #28]	; (100080e0 <frame_dummy+0x30>)
100080c2:	6803      	ldr	r3, [r0, #0]
100080c4:	2b00      	cmp	r3, #0
100080c6:	d100      	bne.n	100080ca <frame_dummy+0x1a>
100080c8:	bd10      	pop	{r4, pc}
100080ca:	4b06      	ldr	r3, [pc, #24]	; (100080e4 <frame_dummy+0x34>)
100080cc:	2b00      	cmp	r3, #0
100080ce:	d0fb      	beq.n	100080c8 <frame_dummy+0x18>
100080d0:	4798      	blx	r3
100080d2:	e7f9      	b.n	100080c8 <frame_dummy+0x18>
100080d4:	00000000 	.word	0x00000000
100080d8:	10017970 	.word	0x10017970
100080dc:	100178fc 	.word	0x100178fc
100080e0:	100178fc 	.word	0x100178fc
100080e4:	00000000 	.word	0x00000000

100080e8 <aon_sleep_timer_get_config_defaults>:
 * \param[out]  config  Pointer to a AON Sleep Timer module configuration structure to set
 */
void aon_sleep_timer_get_config_defaults(struct aon_sleep_timer_config *config)
{
	/* Default configuration values */
	config->wakeup = AON_SLEEP_TIMER_WAKEUP_ARM;
100080e8:	2301      	movs	r3, #1
100080ea:	7003      	strb	r3, [r0, #0]
	config->mode = AON_SLEEP_TIMER_SINGLE_MODE;
100080ec:	7043      	strb	r3, [r0, #1]
	config->counter = 32000;
100080ee:	23fa      	movs	r3, #250	; 0xfa
100080f0:	01db      	lsls	r3, r3, #7
100080f2:	6043      	str	r3, [r0, #4]
}
100080f4:	4770      	bx	lr
100080f6:	46c0      	nop			; (mov r8, r8)

100080f8 <aon_sleep_timer_disable>:
 */
void aon_sleep_timer_disable(void)
{
	uint32_t regval;

	AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = 0;
100080f8:	4b06      	ldr	r3, [pc, #24]	; (10008114 <aon_sleep_timer_disable+0x1c>)
100080fa:	2200      	movs	r2, #0
100080fc:	605a      	str	r2, [r3, #4]
	regval = AON_SLEEP_TIMER0->CONTROL.reg;
100080fe:	681a      	ldr	r2, [r3, #0]
	regval &= ~AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
	regval &= ~AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
10008100:	2103      	movs	r1, #3
10008102:	438a      	bics	r2, r1
	AON_SLEEP_TIMER0->CONTROL.reg = regval;
10008104:	601a      	str	r2, [r3, #0]

	while (AON_SLEEP_TIMER0->CONTROL.reg & (1 << 14)) {
10008106:	0019      	movs	r1, r3
10008108:	2280      	movs	r2, #128	; 0x80
1000810a:	01d2      	lsls	r2, r2, #7
1000810c:	680b      	ldr	r3, [r1, #0]
1000810e:	4213      	tst	r3, r2
10008110:	d1fc      	bne.n	1000810c <aon_sleep_timer_disable+0x14>
	}
}
10008112:	4770      	bx	lr
10008114:	4000d000 	.word	0x4000d000

10008118 <aon_sleep_timer_clear_interrup>:
 * This flag will be cleared automatically once the IRQ
 * has been seen on the sleep clock.
 */
void aon_sleep_timer_clear_interrup(void)
{
	AON_SLEEP_TIMER0->CONTROL.reg |= AON_SLEEP_TIMER_CONTROL_IRQ_CLEAR;
10008118:	4a02      	ldr	r2, [pc, #8]	; (10008124 <aon_sleep_timer_clear_interrup+0xc>)
1000811a:	6811      	ldr	r1, [r2, #0]
1000811c:	2310      	movs	r3, #16
1000811e:	430b      	orrs	r3, r1
10008120:	6013      	str	r3, [r2, #0]
}
10008122:	4770      	bx	lr
10008124:	4000d000 	.word	0x4000d000

10008128 <aon_sleep_timer_isr_handler>:
 *
 * Timer ISR handler.
 *
 */
static void aon_sleep_timer_isr_handler(void)
{
10008128:	b510      	push	{r4, lr}
	aon_sleep_timer_clear_interrup();
1000812a:	4b04      	ldr	r3, [pc, #16]	; (1000813c <aon_sleep_timer_isr_handler+0x14>)
1000812c:	4798      	blx	r3

	if (aon_sleep_timer_callback) {
1000812e:	4b04      	ldr	r3, [pc, #16]	; (10008140 <aon_sleep_timer_isr_handler+0x18>)
10008130:	681b      	ldr	r3, [r3, #0]
10008132:	2b00      	cmp	r3, #0
10008134:	d000      	beq.n	10008138 <aon_sleep_timer_isr_handler+0x10>
		aon_sleep_timer_callback();
10008136:	4798      	blx	r3
	}
}
10008138:	bd10      	pop	{r4, pc}
1000813a:	46c0      	nop			; (mov r8, r8)
1000813c:	10008119 	.word	0x10008119
10008140:	10017988 	.word	0x10017988

10008144 <aon_sleep_timer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void aon_sleep_timer_register_callback(aon_sleep_timer_callback_t fun)
{
	aon_sleep_timer_callback = fun;
10008144:	4b01      	ldr	r3, [pc, #4]	; (1000814c <aon_sleep_timer_register_callback+0x8>)
10008146:	6018      	str	r0, [r3, #0]
}
10008148:	4770      	bx	lr
1000814a:	46c0      	nop			; (mov r8, r8)
1000814c:	10017988 	.word	0x10017988

10008150 <aon_sleep_timer_unregister_callback>:
 * Unregisters and disable a callback function implemented by the user.
 *
 */
void aon_sleep_timer_unregister_callback(void)
{
	aon_sleep_timer_callback = NULL;
10008150:	2200      	movs	r2, #0
10008152:	4b01      	ldr	r3, [pc, #4]	; (10008158 <aon_sleep_timer_unregister_callback+0x8>)
10008154:	601a      	str	r2, [r3, #0]
}
10008156:	4770      	bx	lr
10008158:	10017988 	.word	0x10017988

1000815c <aon_sleep_timer_init>:
 *
 * \param[in]     config       Pointer to the AON Sleep Timer configuration options struct
 *
 */
void aon_sleep_timer_init(const struct aon_sleep_timer_config *config)
{
1000815c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000815e:	b083      	sub	sp, #12
	uint32_t aon_st_ctrl = 0;

	AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg = AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_RESETVALUE;
10008160:	2200      	movs	r2, #0
10008162:	4b29      	ldr	r3, [pc, #164]	; (10008208 <aon_sleep_timer_init+0xac>)
10008164:	731a      	strb	r2, [r3, #12]
	if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM_BLE) {
10008166:	7803      	ldrb	r3, [r0, #0]
10008168:	2b02      	cmp	r3, #2
1000816a:	d105      	bne.n	10008178 <aon_sleep_timer_init+0x1c>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000816c:	4a26      	ldr	r2, [pc, #152]	; (10008208 <aon_sleep_timer_init+0xac>)
1000816e:	7b11      	ldrb	r1, [r2, #12]
10008170:	3301      	adds	r3, #1
10008172:	430b      	orrs	r3, r1
10008174:	7313      	strb	r3, [r2, #12]
10008176:	e005      	b.n	10008184 <aon_sleep_timer_init+0x28>
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE |
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_BLE_ENABLE;
	} else if (config->wakeup == AON_SLEEP_TIMER_WAKEUP_ARM) {
10008178:	2b01      	cmp	r3, #1
1000817a:	d103      	bne.n	10008184 <aon_sleep_timer_init+0x28>
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
1000817c:	4a22      	ldr	r2, [pc, #136]	; (10008208 <aon_sleep_timer_init+0xac>)
1000817e:	7b11      	ldrb	r1, [r2, #12]
10008180:	430b      	orrs	r3, r1
10008182:	7313      	strb	r3, [r2, #12]
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
10008184:	4b21      	ldr	r3, [pc, #132]	; (1000820c <aon_sleep_timer_init+0xb0>)
10008186:	681a      	ldr	r2, [r3, #0]
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
10008188:	0053      	lsls	r3, r2, #1
1000818a:	d01f      	beq.n	100081cc <aon_sleep_timer_init+0x70>
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
1000818c:	4d1f      	ldr	r5, [pc, #124]	; (1000820c <aon_sleep_timer_init+0xb0>)
1000818e:	2700      	movs	r7, #0

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
10008190:	262c      	movs	r6, #44	; 0x2c
10008192:	36ff      	adds	r6, #255	; 0xff
10008194:	2180      	movs	r1, #128	; 0x80
10008196:	01c9      	lsls	r1, r1, #7
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
10008198:	602f      	str	r7, [r5, #0]

static aon_sleep_timer_callback_t aon_sleep_timer_callback = NULL;

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;
1000819a:	9701      	str	r7, [sp, #4]

	for (i = 0; i < cycles*100; i++) {
1000819c:	9701      	str	r7, [sp, #4]
1000819e:	9b01      	ldr	r3, [sp, #4]
100081a0:	42b3      	cmp	r3, r6
100081a2:	d806      	bhi.n	100081b2 <aon_sleep_timer_init+0x56>
		asm volatile ("nop");
100081a4:	46c0      	nop			; (mov r8, r8)

static void delay_cycle(uint32_t cycles)
{
	volatile uint32_t i = 0;

	for (i = 0; i < cycles*100; i++) {
100081a6:	9b01      	ldr	r3, [sp, #4]
100081a8:	3301      	adds	r3, #1
100081aa:	9301      	str	r3, [sp, #4]
100081ac:	9b01      	ldr	r3, [sp, #4]
100081ae:	42b3      	cmp	r3, r6
100081b0:	d9f8      	bls.n	100081a4 <aon_sleep_timer_init+0x48>
100081b2:	7844      	ldrb	r4, [r0, #1]
100081b4:	000b      	movs	r3, r1
100081b6:	2c00      	cmp	r4, #0
100081b8:	d103      	bne.n	100081c2 <aon_sleep_timer_init+0x66>
100081ba:	2380      	movs	r3, #128	; 0x80
100081bc:	009b      	lsls	r3, r3, #2
100081be:	e000      	b.n	100081c2 <aon_sleep_timer_init+0x66>
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c0:	682a      	ldr	r2, [r5, #0]

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
		AON_SLEEP_TIMER0->CONTROL.reg = 0;
		delay_cycle(3);
		while (aon_st_ctrl & ((config->mode == AON_SLEEP_TIMER_RELOAD_MODE) ?
100081c2:	4213      	tst	r3, r2
100081c4:	d1fc      	bne.n	100081c0 <aon_sleep_timer_init+0x64>
				(1 << 9) : (1 << 14))) {
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
100081c6:	682a      	ldr	r2, [r5, #0]
		AON_PWR_SEQ0->AON_ST_WAKEUP_CTRL.reg |=
				AON_PWR_SEQ_AON_ST_WAKEUP_CTRL_ARM_ENABLE;
	}

	aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	while (aon_st_ctrl & ((1UL << 31) - 1)) {
100081c8:	0053      	lsls	r3, r2, #1
100081ca:	d1e5      	bne.n	10008198 <aon_sleep_timer_init+0x3c>
			aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
		}
		aon_st_ctrl = AON_SLEEP_TIMER0->CONTROL.reg;
	}

	if (config->mode == AON_SLEEP_TIMER_RELOAD_MODE) {
100081cc:	7843      	ldrb	r3, [r0, #1]
100081ce:	2b00      	cmp	r3, #0
100081d0:	d105      	bne.n	100081de <aon_sleep_timer_init+0x82>
		/* Reload counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081d2:	4b0e      	ldr	r3, [pc, #56]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081d4:	6842      	ldr	r2, [r0, #4]
100081d6:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_RELOAD_ENABLE;
100081d8:	2201      	movs	r2, #1
100081da:	601a      	str	r2, [r3, #0]
100081dc:	e004      	b.n	100081e8 <aon_sleep_timer_init+0x8c>
	} else {
		/* Single counter will start here */
		AON_SLEEP_TIMER0->SINGLE_COUNT_DURATION.reg = config->counter;
100081de:	4b0b      	ldr	r3, [pc, #44]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081e0:	6842      	ldr	r2, [r0, #4]
100081e2:	605a      	str	r2, [r3, #4]
		AON_SLEEP_TIMER0->CONTROL.reg = AON_SLEEP_TIMER_CONTROL_SINGLE_COUNT_ENABLE;
100081e4:	2202      	movs	r2, #2
100081e6:	601a      	str	r2, [r3, #0]
	}

	if (config->mode == AON_SLEEP_TIMER_SINGLE_MODE) {
100081e8:	7843      	ldrb	r3, [r0, #1]
100081ea:	2b01      	cmp	r3, #1
100081ec:	d106      	bne.n	100081fc <aon_sleep_timer_init+0xa0>
		while ((AON_SLEEP_TIMER0->CONTROL.reg &
100081ee:	4907      	ldr	r1, [pc, #28]	; (1000820c <aon_sleep_timer_init+0xb0>)
100081f0:	22e0      	movs	r2, #224	; 0xe0
100081f2:	01d2      	lsls	r2, r2, #7
100081f4:	680b      	ldr	r3, [r1, #0]
100081f6:	4013      	ands	r3, r2
100081f8:	4293      	cmp	r3, r2
100081fa:	d1fb      	bne.n	100081f4 <aon_sleep_timer_init+0x98>
				AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk)
				!= AON_SLEEP_TIMER_CONTROL_SLP_TIMER_SINGLE_COUNT_ENABLE_DLY_Msk) {
		}
	}

	system_register_isr(RAM_ISR_TABLE_AON_SLEEP_TIMER_INDEX, (uint32_t)aon_sleep_timer_isr_handler);
100081fc:	4904      	ldr	r1, [pc, #16]	; (10008210 <aon_sleep_timer_init+0xb4>)
100081fe:	202b      	movs	r0, #43	; 0x2b
10008200:	4b04      	ldr	r3, [pc, #16]	; (10008214 <aon_sleep_timer_init+0xb8>)
10008202:	4798      	blx	r3
}
10008204:	b003      	add	sp, #12
10008206:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008208:	4000e000 	.word	0x4000e000
1000820c:	4000d000 	.word	0x4000d000
10008210:	10008129 	.word	0x10008129
10008214:	1000bbf9 	.word	0x1000bbf9

10008218 <_i2c_master_read_packet>:
 *                                      acknowledged the address
 */
static enum status_code _i2c_master_read_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008218:	b5f0      	push	{r4, r5, r6, r7, lr}
1000821a:	4657      	mov	r7, sl
1000821c:	464e      	mov	r6, r9
1000821e:	4645      	mov	r5, r8
10008220:	b4e0      	push	{r5, r6, r7}
10008222:	b082      	sub	sp, #8
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;
10008224:	884d      	ldrh	r5, [r1, #2]

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
10008226:	2317      	movs	r3, #23
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
	uint16_t length = packet->data_length;

	if (length == 0) {
10008228:	2d00      	cmp	r5, #0
1000822a:	d033      	beq.n	10008294 <_i2c_master_read_packet+0x7c>
	Assert(module->hw);
	Assert(config);
	
	uint16_t counter = 0;
	uint32_t status  = 0;
	I2c *const i2c_module    = (module->hw);
1000822c:	6803      	ldr	r3, [r0, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
1000822e:	2428      	movs	r4, #40	; 0x28
10008230:	5d1a      	ldrb	r2, [r3, r4]
10008232:	07d2      	lsls	r2, r2, #31
10008234:	d4fc      	bmi.n	10008230 <_i2c_master_read_packet+0x18>
	}

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
10008236:	2201      	movs	r2, #1
10008238:	2434      	movs	r4, #52	; 0x34
1000823a:	551a      	strb	r2, [r3, r4]

	/* Enable I2C on bus (start condition). */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
1000823c:	3c14      	subs	r4, #20
1000823e:	551a      	strb	r2, [r3, r4]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
10008240:	880a      	ldrh	r2, [r1, #0]
10008242:	0052      	lsls	r2, r2, #1
10008244:	2402      	movs	r4, #2
10008246:	34ff      	adds	r4, #255	; 0xff
10008248:	4322      	orrs	r2, r4
1000824a:	b292      	uxth	r2, r2
1000824c:	801a      	strh	r2, [r3, #0]
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
1000824e:	3cf1      	subs	r4, #241	; 0xf1
		status = i2c_module->TRANSMIT_STATUS.reg;
10008250:	7a1a      	ldrb	r2, [r3, #8]
	/* Address I2C slave in case of Master mode enabled. */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 |
			(packet->address << 1) | I2C_TRANSFER_READ;

	/* Now check whether the core has sent the data out and free the bus. */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
10008252:	4222      	tst	r2, r4
10008254:	d0fc      	beq.n	10008250 <_i2c_master_read_packet+0x38>
10008256:	2200      	movs	r2, #0
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008258:	1e6c      	subs	r4, r5, #1
1000825a:	46a4      	mov	ip, r4
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
1000825c:	2420      	movs	r4, #32
1000825e:	46a1      	mov	r9, r4
10008260:	2400      	movs	r4, #0
10008262:	46a0      	mov	r8, r4
		}

		status = i2c_module->RECEIVE_STATUS.reg;
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008264:	2601      	movs	r6, #1
		status = i2c_module->TRANSMIT_STATUS.reg;
	}

	do {
		/* Send stop condition. */
		if ((!module->no_stop) && (counter == (length - 1))) {
10008266:	7944      	ldrb	r4, [r0, #5]
10008268:	2c00      	cmp	r4, #0
1000826a:	d104      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
1000826c:	4562      	cmp	r2, ip
1000826e:	d102      	bne.n	10008276 <_i2c_master_read_packet+0x5e>
			i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
10008270:	464c      	mov	r4, r9
10008272:	4647      	mov	r7, r8
10008274:	551f      	strb	r7, [r3, r4]
		}

		status = i2c_module->RECEIVE_STATUS.reg;
10008276:	7b1c      	ldrb	r4, [r3, #12]
		if (status & I2C_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY)
10008278:	4234      	tst	r4, r6
1000827a:	d008      	beq.n	1000828e <_i2c_master_read_packet+0x76>
			packet->data[counter++] = i2c_module->RECEIVE_DATA.reg;
1000827c:	1c54      	adds	r4, r2, #1
1000827e:	46a2      	mov	sl, r4
10008280:	791f      	ldrb	r7, [r3, #4]
10008282:	684c      	ldr	r4, [r1, #4]
10008284:	54a7      	strb	r7, [r4, r2]
10008286:	4652      	mov	r2, sl
10008288:	466c      	mov	r4, sp
1000828a:	80e2      	strh	r2, [r4, #6]
1000828c:	88e2      	ldrh	r2, [r4, #6]
	} while (counter < length);
1000828e:	42aa      	cmp	r2, r5
10008290:	d3e9      	bcc.n	10008266 <_i2c_master_read_packet+0x4e>

	return STATUS_OK;
10008292:	2300      	movs	r3, #0
}
10008294:	0018      	movs	r0, r3
10008296:	b002      	add	sp, #8
10008298:	bc1c      	pop	{r2, r3, r4}
1000829a:	4690      	mov	r8, r2
1000829c:	4699      	mov	r9, r3
1000829e:	46a2      	mov	sl, r4
100082a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100082a2:	46c0      	nop			; (mov r8, r8)

100082a4 <_i2c_master_write_packet>:
 * \retval STATUS_OK                    The packet was write successfully
 */
static enum status_code _i2c_master_write_packet(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100082a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100082a6:	4684      	mov	ip, r0
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
100082a8:	6802      	ldr	r2, [r0, #0]
	uint16_t counter = 0;
	uint32_t status  = 0;

	uint16_t length = packet->data_length;
100082aa:	884e      	ldrh	r6, [r1, #2]
100082ac:	2428      	movs	r4, #40	; 0x28
100082ae:	5d13      	ldrb	r3, [r2, r4]
100082b0:	07db      	lsls	r3, r3, #31
100082b2:	d4fc      	bmi.n	100082ae <_i2c_master_write_packet+0xa>

	i2c_wait_for_idle(i2c_module);

	/* Flush the FIFO */
	i2c_module->I2C_FLUSH.reg = 1;
100082b4:	2301      	movs	r3, #1
100082b6:	2434      	movs	r4, #52	; 0x34
100082b8:	5513      	strb	r3, [r2, r4]

	/* Enable I2C on bus (start condition) */
	i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_1;
100082ba:	3c14      	subs	r4, #20
100082bc:	5513      	strb	r3, [r2, r4]

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
100082be:	880b      	ldrh	r3, [r1, #0]
100082c0:	005b      	lsls	r3, r3, #1
100082c2:	34e0      	adds	r4, #224	; 0xe0
100082c4:	4323      	orrs	r3, r4
100082c6:	b29b      	uxth	r3, r3
100082c8:	8013      	strh	r3, [r2, #0]
	Assert(module);
	Assert(module->hw);
	Assert(packet);
	
	I2c *const i2c_module = (module->hw);
	uint16_t counter = 0;
100082ca:	2400      	movs	r4, #0
	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082cc:	2501      	movs	r5, #1

	/* Address I2C slave in case of Master mode enabled */
	i2c_module->TRANSMIT_DATA.reg = I2C_TRANSMIT_DATA_ADDRESS_FLAG_1 | 
			((packet->address) << 1) | I2C_TRANSFER_WRITE;
	do {
		status = i2c_module->TRANSMIT_STATUS.reg;
100082ce:	7a13      	ldrb	r3, [r2, #8]
100082d0:	b2db      	uxtb	r3, r3
		if (status & I2C_TRANSMIT_STATUS_TX_FIFO_NOT_FULL_Msk) {
100082d2:	421d      	tst	r5, r3
100082d4:	d004      	beq.n	100082e0 <_i2c_master_write_packet+0x3c>
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
100082d6:	1c67      	adds	r7, r4, #1
100082d8:	6848      	ldr	r0, [r1, #4]
100082da:	5d04      	ldrb	r4, [r0, r4]
100082dc:	8014      	strh	r4, [r2, #0]
100082de:	b2bc      	uxth	r4, r7
		}
	} while (counter < length); 
100082e0:	42b4      	cmp	r4, r6
100082e2:	d3f4      	bcc.n	100082ce <_i2c_master_write_packet+0x2a>

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082e4:	06db      	lsls	r3, r3, #27
100082e6:	d403      	bmi.n	100082f0 <_i2c_master_write_packet+0x4c>
100082e8:	2110      	movs	r1, #16
			status = i2c_module->TRANSMIT_STATUS.reg;
100082ea:	7a13      	ldrb	r3, [r2, #8]
			i2c_module->TRANSMIT_DATA.reg = packet->data[counter++];
		}
	} while (counter < length); 

	/* Now check whether the core has sent the data out and free the bus */
	while (!(status & I2C_TRANSMIT_STATUS_TX_FIFO_EMPTY)) {
100082ec:	420b      	tst	r3, r1
100082ee:	d0fc      	beq.n	100082ea <_i2c_master_write_packet+0x46>
			status = i2c_module->TRANSMIT_STATUS.reg;
	}

	/* Send stop condition */
	if (!module->no_stop) {
100082f0:	4663      	mov	r3, ip
100082f2:	795b      	ldrb	r3, [r3, #5]
100082f4:	2b00      	cmp	r3, #0
100082f6:	d102      	bne.n	100082fe <_i2c_master_write_packet+0x5a>
		i2c_module->I2C_ONBUS.reg = I2C_ONBUS_ONBUS_ENABLE_0;
100082f8:	2100      	movs	r1, #0
100082fa:	3320      	adds	r3, #32
100082fc:	54d1      	strb	r1, [r2, r3]
	}

	return STATUS_OK;
}
100082fe:	2000      	movs	r0, #0
10008300:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008302:	46c0      	nop			; (mov r8, r8)

10008304 <i2c_master_get_config_defaults>:
		struct i2c_master_config *const config)
{
	/* Sanity check */
	Assert(config);
	
	config->clock_source    = I2C_CLK_INPUT_3;
10008304:	2303      	movs	r3, #3
10008306:	7003      	strb	r3, [r0, #0]
	config->clock_divider   = 0x10;
10008308:	330d      	adds	r3, #13
1000830a:	8043      	strh	r3, [r0, #2]
	config->pin_number_pad0 = PIN_LP_GPIO_8;
1000830c:	3b08      	subs	r3, #8
1000830e:	6043      	str	r3, [r0, #4]
	config->pin_number_pad1 = PIN_LP_GPIO_9;
10008310:	3301      	adds	r3, #1
10008312:	60c3      	str	r3, [r0, #12]
	config->pinmux_sel_pad0 = MUX_LP_GPIO_8_I2C0_SDA;
10008314:	3b07      	subs	r3, #7
10008316:	6083      	str	r3, [r0, #8]
	config->pinmux_sel_pad1 = MUX_LP_GPIO_9_I2C0_SCL;
10008318:	6103      	str	r3, [r0, #16]
}
1000831a:	4770      	bx	lr

1000831c <i2c_master_init>:
 */
enum status_code i2c_master_init(
		struct i2c_master_module *const module,
		I2c *const hw,
		const struct i2c_master_config *const config)
{
1000831c:	b570      	push	{r4, r5, r6, lr}
1000831e:	0004      	movs	r4, r0
10008320:	0015      	movs	r5, r2
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);
	
	module->hw = hw;
10008322:	6001      	str	r1, [r0, #0]

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
10008324:	2800      	cmp	r0, #0
10008326:	d026      	beq.n	10008376 <i2c_master_init+0x5a>
10008328:	2a00      	cmp	r2, #0
1000832a:	d026      	beq.n	1000837a <i2c_master_init+0x5e>
1000832c:	2228      	movs	r2, #40	; 0x28
1000832e:	5c8b      	ldrb	r3, [r1, r2]
10008330:	07db      	lsls	r3, r3, #31
10008332:	d4fc      	bmi.n	1000832e <i2c_master_init+0x12>
 *
 */
static inline void i2c_disable(I2c *const i2c_module)
{
	i2c_wait_for_idle(i2c_module);
	i2c_module->I2C_MODULE_ENABLE.reg = 0;
10008334:	2300      	movs	r3, #0
10008336:	750b      	strb	r3, [r1, #20]
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
10008338:	6823      	ldr	r3, [r4, #0]
1000833a:	4a11      	ldr	r2, [pc, #68]	; (10008380 <i2c_master_init+0x64>)
1000833c:	4293      	cmp	r3, r2
1000833e:	d103      	bne.n	10008348 <i2c_master_init+0x2c>
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
10008340:	2003      	movs	r0, #3
10008342:	4b10      	ldr	r3, [pc, #64]	; (10008384 <i2c_master_init+0x68>)
10008344:	4798      	blx	r3
10008346:	e006      	b.n	10008356 <i2c_master_init+0x3a>
	} else if (module->hw == I2C1) {
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
	} else {
		return STATUS_ERR_INVALID_ARG;
10008348:	2017      	movs	r0, #23
		return STATUS_ERR_INVALID_ARG;

	i2c_disable(module->hw);
	if (module->hw == I2C0) {
		system_peripheral_reset(PERIPHERAL_I2C0_CORE);
	} else if (module->hw == I2C1) {
1000834a:	4a0f      	ldr	r2, [pc, #60]	; (10008388 <i2c_master_init+0x6c>)
1000834c:	4293      	cmp	r3, r2
1000834e:	d115      	bne.n	1000837c <i2c_master_init+0x60>
		system_peripheral_reset(PERIPHERAL_I2C1_CORE);
10008350:	3002      	adds	r0, #2
10008352:	4b0c      	ldr	r3, [pc, #48]	; (10008384 <i2c_master_init+0x68>)
10008354:	4798      	blx	r3
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(config);

	I2c *const i2c_module = (module->hw);
10008356:	6824      	ldr	r4, [r4, #0]

	/* Set the pinmux for this i2c module. */
	gpio_pinmux_cofiguration(config->pin_number_pad0, (uint16_t)(config->pinmux_sel_pad0));
10008358:	8929      	ldrh	r1, [r5, #8]
1000835a:	7928      	ldrb	r0, [r5, #4]
1000835c:	4e0b      	ldr	r6, [pc, #44]	; (1000838c <i2c_master_init+0x70>)
1000835e:	47b0      	blx	r6
	gpio_pinmux_cofiguration(config->pin_number_pad1, (uint16_t)(config->pinmux_sel_pad1));
10008360:	8a29      	ldrh	r1, [r5, #16]
10008362:	7b28      	ldrb	r0, [r5, #12]
10008364:	47b0      	blx	r6
	/* Set clock. */
	i2c_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
10008366:	782b      	ldrb	r3, [r5, #0]
10008368:	7423      	strb	r3, [r4, #16]
	i2c_module->I2C_CLK_DIVIDER.reg = I2C_CLK_DIVIDER_I2C_DIVIDE_RATIO(config->clock_divider);
1000836a:	886b      	ldrh	r3, [r5, #2]
1000836c:	8323      	strh	r3, [r4, #24]
	/* Enable master mode. */
	i2c_module->I2C_MASTER_MODE.reg = I2C_MASTER_MODE_MASTER_ENABLE_1;
1000836e:	2301      	movs	r3, #1
10008370:	7723      	strb	r3, [r4, #28]
#endif

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
10008372:	2000      	movs	r0, #0
10008374:	e002      	b.n	1000837c <i2c_master_init+0x60>
	
	module->hw = hw;

	/* Sanity check arguments. */
	if ((module == NULL) || (config == NULL))
		return STATUS_ERR_INVALID_ARG;
10008376:	2017      	movs	r0, #23
10008378:	e000      	b.n	1000837c <i2c_master_init+0x60>
1000837a:	2017      	movs	r0, #23

	/* Set config and return status. */
	_i2c_master_set_config(module, config);

	return STATUS_OK;
}
1000837c:	bd70      	pop	{r4, r5, r6, pc}
1000837e:	46c0      	nop			; (mov r8, r8)
10008380:	40003000 	.word	0x40003000
10008384:	1000b791 	.word	0x1000b791
10008388:	40003400 	.word	0x40003400
1000838c:	1000ad19 	.word	0x1000ad19

10008390 <i2c_master_read_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_read_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
10008390:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008392:	2800      	cmp	r0, #0
10008394:	d008      	beq.n	100083a8 <i2c_master_read_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
10008396:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
10008398:	2900      	cmp	r1, #0
1000839a:	d006      	beq.n	100083aa <i2c_master_read_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
1000839c:	2300      	movs	r3, #0
1000839e:	7143      	strb	r3, [r0, #5]

	return _i2c_master_read_packet(module, packet);
100083a0:	4b03      	ldr	r3, [pc, #12]	; (100083b0 <i2c_master_read_packet_wait+0x20>)
100083a2:	4798      	blx	r3
100083a4:	0003      	movs	r3, r0
100083a6:	e000      	b.n	100083aa <i2c_master_read_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL))
		return STATUS_ERR_INVALID_ARG;
100083a8:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_read_packet(module, packet);
}
100083aa:	0018      	movs	r0, r3
100083ac:	bd10      	pop	{r4, pc}
100083ae:	46c0      	nop			; (mov r8, r8)
100083b0:	10008219 	.word	0x10008219

100083b4 <i2c_master_write_packet_wait>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083b4:	b510      	push	{r4, lr}
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083b6:	2800      	cmp	r0, #0
100083b8:	d008      	beq.n	100083cc <i2c_master_write_packet_wait+0x18>
		return STATUS_ERR_INVALID_ARG;
100083ba:	2317      	movs	r3, #23
	/* Sanity check arguments. */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
100083bc:	2900      	cmp	r1, #0
100083be:	d006      	beq.n	100083ce <i2c_master_write_packet_wait+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = false;
100083c0:	2300      	movs	r3, #0
100083c2:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083c4:	4b03      	ldr	r3, [pc, #12]	; (100083d4 <i2c_master_write_packet_wait+0x20>)
100083c6:	4798      	blx	r3
100083c8:	0003      	movs	r3, r0
100083ca:	e000      	b.n	100083ce <i2c_master_write_packet_wait+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if ((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083cc:	2317      	movs	r3, #23
#endif

	module->no_stop = false;

	return _i2c_master_write_packet(module, packet);
}
100083ce:	0018      	movs	r0, r3
100083d0:	bd10      	pop	{r4, pc}
100083d2:	46c0      	nop			; (mov r8, r8)
100083d4:	100082a5 	.word	0x100082a5

100083d8 <i2c_master_write_packet_wait_no_stop>:
 * \retval STATUS_BUSY                  If module has a pending request.
 */
enum status_code i2c_master_write_packet_wait_no_stop(
		struct i2c_master_module *const module,
		struct i2c_master_packet *const packet)
{
100083d8:	b510      	push	{r4, lr}
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083da:	2800      	cmp	r0, #0
100083dc:	d008      	beq.n	100083f0 <i2c_master_write_packet_wait_no_stop+0x18>
		return STATUS_ERR_INVALID_ARG;
100083de:	2317      	movs	r3, #23
	/* Sanity check */
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
100083e0:	2900      	cmp	r1, #0
100083e2:	d006      	beq.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	if (module->buffer_remaining > 0) {
		return STATUS_BUSY;
	}
#endif

	module->no_stop = true;
100083e4:	3b16      	subs	r3, #22
100083e6:	7143      	strb	r3, [r0, #5]

	return _i2c_master_write_packet(module, packet);
100083e8:	4b03      	ldr	r3, [pc, #12]	; (100083f8 <i2c_master_write_packet_wait_no_stop+0x20>)
100083ea:	4798      	blx	r3
100083ec:	0003      	movs	r3, r0
100083ee:	e000      	b.n	100083f2 <i2c_master_write_packet_wait_no_stop+0x1a>
	Assert(module);
	Assert(module->hw);
	Assert(packet);

	if((module == NULL) || (packet == NULL)) {
		return STATUS_ERR_INVALID_ARG;
100083f0:	2317      	movs	r3, #23
#endif

	module->no_stop = true;

	return _i2c_master_write_packet(module, packet);
}
100083f2:	0018      	movs	r0, r3
100083f4:	bd10      	pop	{r4, pc}
100083f6:	46c0      	nop			; (mov r8, r8)
100083f8:	100082a5 	.word	0x100082a5

100083fc <_sbrk>:
extern void _exit(int status);
extern void _kill(int pid, int sig);
extern int _getpid(void);

extern caddr_t _sbrk(int incr)
{
100083fc:	0003      	movs	r3, r0
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;

	if (heap == NULL) {
100083fe:	4a06      	ldr	r2, [pc, #24]	; (10008418 <_sbrk+0x1c>)
10008400:	6812      	ldr	r2, [r2, #0]
10008402:	2a00      	cmp	r2, #0
10008404:	d102      	bne.n	1000840c <_sbrk+0x10>
		heap = (unsigned char *)&_end;
10008406:	4905      	ldr	r1, [pc, #20]	; (1000841c <_sbrk+0x20>)
10008408:	4a03      	ldr	r2, [pc, #12]	; (10008418 <_sbrk+0x1c>)
1000840a:	6011      	str	r1, [r2, #0]
	}
	prev_heap = heap;
1000840c:	4a02      	ldr	r2, [pc, #8]	; (10008418 <_sbrk+0x1c>)
1000840e:	6810      	ldr	r0, [r2, #0]

	heap += incr;
10008410:	18c3      	adds	r3, r0, r3
10008412:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap;
}
10008414:	4770      	bx	lr
10008416:	46c0      	nop			; (mov r8, r8)
10008418:	1001798c 	.word	0x1001798c
1000841c:	1001b088 	.word	0x1001b088

10008420 <_close>:
}

extern int _close(int file)
{
	return -1;
}
10008420:	2001      	movs	r0, #1
10008422:	4240      	negs	r0, r0
10008424:	4770      	bx	lr
10008426:	46c0      	nop			; (mov r8, r8)

10008428 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
10008428:	2380      	movs	r3, #128	; 0x80
1000842a:	019b      	lsls	r3, r3, #6
1000842c:	604b      	str	r3, [r1, #4]

	return 0;
}
1000842e:	2000      	movs	r0, #0
10008430:	4770      	bx	lr
10008432:	46c0      	nop			; (mov r8, r8)

10008434 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
10008434:	2001      	movs	r0, #1
10008436:	4770      	bx	lr

10008438 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
10008438:	2000      	movs	r0, #0
1000843a:	4770      	bx	lr

1000843c <sms_ble_pair_request_fn>:

/* AT_BLE_PAIR_REQUEST (#10) */
at_ble_status_t sms_ble_pair_request_fn(void *params)
{
    at_ble_pair_request_t *request = (at_ble_pair_request_t *)params;
    DBG_LOG_DEV("[sms_ble_pair_request_fn]\tPairing request... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
1000843c:	4b03      	ldr	r3, [pc, #12]	; (1000844c <sms_ble_pair_request_fn+0x10>)
1000843e:	781b      	ldrb	r3, [r3, #0]
10008440:	4b03      	ldr	r3, [pc, #12]	; (10008450 <sms_ble_pair_request_fn+0x14>)
10008442:	781b      	ldrb	r3, [r3, #0]
10008444:	4b03      	ldr	r3, [pc, #12]	; (10008454 <sms_ble_pair_request_fn+0x18>)
10008446:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- peer features: 0x%02x", request->handle, request->peer_features);
    return AT_BLE_SUCCESS;
}
10008448:	2000      	movs	r0, #0
1000844a:	4770      	bx	lr
1000844c:	10019500 	.word	0x10019500
10008450:	10019430 	.word	0x10019430
10008454:	1001963f 	.word	0x1001963f

10008458 <sms_ble_notification_confirmed_fn>:

/* AT_BLE_NOTIFICATION_CONFIRMED (#29) */
at_ble_status_t sms_ble_notification_confirmed_fn(void *params)
{
10008458:	b570      	push	{r4, r5, r6, lr}
	DBG_LOG_CONT(" done!");
1000845a:	4811      	ldr	r0, [pc, #68]	; (100084a0 <sms_ble_notification_confirmed_fn+0x48>)
1000845c:	4d11      	ldr	r5, [pc, #68]	; (100084a4 <sms_ble_notification_confirmed_fn+0x4c>)
1000845e:	47a8      	blx	r5
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_HIGH);
    
    at_ble_cmd_complete_event_t *notification_status = (at_ble_cmd_complete_event_t *)params;
	ble_instance.sending_queue--;
10008460:	4c11      	ldr	r4, [pc, #68]	; (100084a8 <sms_ble_notification_confirmed_fn+0x50>)
10008462:	7863      	ldrb	r3, [r4, #1]
10008464:	3b01      	subs	r3, #1
10008466:	b2db      	uxtb	r3, r3
10008468:	7063      	strb	r3, [r4, #1]
	DBG_LOG("T/O: OFF");
1000846a:	4810      	ldr	r0, [pc, #64]	; (100084ac <sms_ble_notification_confirmed_fn+0x54>)
1000846c:	4b10      	ldr	r3, [pc, #64]	; (100084b0 <sms_ble_notification_confirmed_fn+0x58>)
1000846e:	4798      	blx	r3
10008470:	4810      	ldr	r0, [pc, #64]	; (100084b4 <sms_ble_notification_confirmed_fn+0x5c>)
10008472:	47a8      	blx	r5
	sms_ble_timeout = BLE_TIMEOUT_OFF;
10008474:	2201      	movs	r2, #1
10008476:	4252      	negs	r2, r2
10008478:	4b0f      	ldr	r3, [pc, #60]	; (100084b8 <sms_ble_notification_confirmed_fn+0x60>)
1000847a:	601a      	str	r2, [r3, #0]
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_notification_confirmed_fn]\tNotification sent... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- operation: 0x%02x\r\n- status: 0x%02x", notification_status->conn_handle, notification_status->operation, notification_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
1000847c:	2001      	movs	r0, #1
1000847e:	4b0f      	ldr	r3, [pc, #60]	; (100084bc <sms_ble_notification_confirmed_fn+0x64>)
10008480:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
10008482:	2200      	movs	r2, #0
10008484:	4b0e      	ldr	r3, [pc, #56]	; (100084c0 <sms_ble_notification_confirmed_fn+0x68>)
10008486:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
10008488:	2322      	movs	r3, #34	; 0x22
1000848a:	7023      	strb	r3, [r4, #0]
    //DBG_LOG_CONT_DEV(" done!");

    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    //DBG_LOG_DEV("Timer1 current mode: %d", timer1_current_mode);
    if(timer1_current_mode == TIMER1_MODE_NONE) {
1000848c:	4b0d      	ldr	r3, [pc, #52]	; (100084c4 <sms_ble_notification_confirmed_fn+0x6c>)
1000848e:	781b      	ldrb	r3, [r3, #0]
10008490:	2b00      	cmp	r3, #0
10008492:	d102      	bne.n	1000849a <sms_ble_notification_confirmed_fn+0x42>
        ulp_ready = true;
10008494:	3201      	adds	r2, #1
10008496:	4b0c      	ldr	r3, [pc, #48]	; (100084c8 <sms_ble_notification_confirmed_fn+0x70>)
10008498:	701a      	strb	r2, [r3, #0]
    }
    return AT_BLE_SUCCESS;
}
1000849a:	2000      	movs	r0, #0
1000849c:	bd70      	pop	{r4, r5, r6, pc}
1000849e:	46c0      	nop			; (mov r8, r8)
100084a0:	10016774 	.word	0x10016774
100084a4:	10015715 	.word	0x10015715
100084a8:	10019500 	.word	0x10019500
100084ac:	1001677c 	.word	0x1001677c
100084b0:	10015835 	.word	0x10015835
100084b4:	10016780 	.word	0x10016780
100084b8:	100194f8 	.word	0x100194f8
100084bc:	1000a021 	.word	0x1000a021
100084c0:	1001963f 	.word	0x1001963f
100084c4:	10019430 	.word	0x10019430
100084c8:	100194fd 	.word	0x100194fd

100084cc <sms_ble_indication_confirmed_fn>:

/* AT_BLE_INDICATION_CONFIRMED (#30) */
at_ble_status_t sms_ble_indication_confirmed_fn(void *params)
{
100084cc:	b510      	push	{r4, lr}
    
    at_ble_indication_confirmed_t *indication_status = (at_ble_indication_confirmed_t *)params;
    //button_instance.current_state = sms_button_get_state();
    //DBG_LOG_DEV("[sms_ble_indication_confirmed]\tIndication confirmed... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_current_state, timer1_current_mode, timer2_current_mode);
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- char handle: 0x%04x\r\n- status: 0x%02x", indication_status->conn_handle, indication_status->char_handle, indication_status->status);
    sms_dualtimer_stop(DUALTIMER_TIMER2);
100084ce:	2001      	movs	r0, #1
100084d0:	4b08      	ldr	r3, [pc, #32]	; (100084f4 <sms_ble_indication_confirmed_fn+0x28>)
100084d2:	4798      	blx	r3
    timer2_current_mode = TIMER2_MODE_NONE;
100084d4:	2200      	movs	r2, #0
100084d6:	4b08      	ldr	r3, [pc, #32]	; (100084f8 <sms_ble_indication_confirmed_fn+0x2c>)
100084d8:	701a      	strb	r2, [r3, #0]
    ble_instance.current_state = BLE_STATE_PAIRED;
100084da:	3222      	adds	r2, #34	; 0x22
100084dc:	4b07      	ldr	r3, [pc, #28]	; (100084fc <sms_ble_indication_confirmed_fn+0x30>)
100084de:	701a      	strb	r2, [r3, #0]
    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
    //sms_sensors_toggle_interrupt(SMS_EXTINT_ENABLE);
    
    //gpio_pin_set_output_level(dbg_pin, DBG_PIN_LOW);
    
    if(timer1_current_mode == TIMER1_MODE_NONE) {
100084e0:	4b07      	ldr	r3, [pc, #28]	; (10008500 <sms_ble_indication_confirmed_fn+0x34>)
100084e2:	781b      	ldrb	r3, [r3, #0]
100084e4:	2b00      	cmp	r3, #0
100084e6:	d102      	bne.n	100084ee <sms_ble_indication_confirmed_fn+0x22>
        ulp_ready = true;
100084e8:	3a21      	subs	r2, #33	; 0x21
100084ea:	4b06      	ldr	r3, [pc, #24]	; (10008504 <sms_ble_indication_confirmed_fn+0x38>)
100084ec:	701a      	strb	r2, [r3, #0]
    }        
    return AT_BLE_SUCCESS;
}
100084ee:	2000      	movs	r0, #0
100084f0:	bd10      	pop	{r4, pc}
100084f2:	46c0      	nop			; (mov r8, r8)
100084f4:	1000a021 	.word	0x1000a021
100084f8:	1001963f 	.word	0x1001963f
100084fc:	10019500 	.word	0x10019500
10008500:	10019430 	.word	0x10019430
10008504:	100194fd 	.word	0x100194fd

10008508 <sms_ble_init_variables>:


/* Own functions */
void sms_ble_init_variables(void)
{
    ble_instance.current_state = BLE_STATE_POWEROFF;
10008508:	2300      	movs	r3, #0
1000850a:	4a02      	ldr	r2, [pc, #8]	; (10008514 <sms_ble_init_variables+0xc>)
1000850c:	7013      	strb	r3, [r2, #0]
    sms_ble_send_cnt = 0;
1000850e:	4a02      	ldr	r2, [pc, #8]	; (10008518 <sms_ble_init_variables+0x10>)
10008510:	8013      	strh	r3, [r2, #0]
}
10008512:	4770      	bx	lr
10008514:	10019500 	.word	0x10019500
10008518:	10019684 	.word	0x10019684

1000851c <sms_ble_startup>:

void sms_ble_startup(void)
{
1000851c:	b510      	push	{r4, lr}
	//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
	timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000851e:	2202      	movs	r2, #2
10008520:	4b02      	ldr	r3, [pc, #8]	; (1000852c <sms_ble_startup+0x10>)
10008522:	701a      	strb	r2, [r3, #0]
	sms_led_blink_start(SMS_LED_0_PIN);
10008524:	2016      	movs	r0, #22
10008526:	4b02      	ldr	r3, [pc, #8]	; (10008530 <sms_ble_startup+0x14>)
10008528:	4798      	blx	r3
}
1000852a:	bd10      	pop	{r4, pc}
1000852c:	1001963f 	.word	0x1001963f
10008530:	10009ad9 	.word	0x10009ad9

10008534 <sms_ble_power_down>:

void sms_ble_power_down(void)
{
10008534:	b510      	push	{r4, lr}
	sms_monitor_get_states("[sms_ble_power_down]");
10008536:	481b      	ldr	r0, [pc, #108]	; (100085a4 <sms_ble_power_down+0x70>)
10008538:	4b1b      	ldr	r3, [pc, #108]	; (100085a8 <sms_ble_power_down+0x74>)
1000853a:	4798      	blx	r3
	if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000853c:	4b1b      	ldr	r3, [pc, #108]	; (100085ac <sms_ble_power_down+0x78>)
1000853e:	781b      	ldrb	r3, [r3, #0]
10008540:	2b00      	cmp	r3, #0
10008542:	d105      	bne.n	10008550 <sms_ble_power_down+0x1c>
		/* If already power off state, then go back sleeping */
		//sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		ulp_ready = true;
10008544:	2201      	movs	r2, #1
10008546:	4b1a      	ldr	r3, [pc, #104]	; (100085b0 <sms_ble_power_down+0x7c>)
10008548:	701a      	strb	r2, [r3, #0]
		release_sleep_lock();
1000854a:	4b1a      	ldr	r3, [pc, #104]	; (100085b4 <sms_ble_power_down+0x80>)
1000854c:	4798      	blx	r3
1000854e:	e028      	b.n	100085a2 <sms_ble_power_down+0x6e>
	}
	else {
		/* Disable button interrupts */
		//sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
		/* Disconnect if necessary from BLE network */
		switch(ble_instance.current_state) {
10008550:	4b16      	ldr	r3, [pc, #88]	; (100085ac <sms_ble_power_down+0x78>)
10008552:	781b      	ldrb	r3, [r3, #0]
10008554:	b2db      	uxtb	r3, r3
10008556:	2b21      	cmp	r3, #33	; 0x21
10008558:	d015      	beq.n	10008586 <sms_ble_power_down+0x52>
1000855a:	d802      	bhi.n	10008562 <sms_ble_power_down+0x2e>
1000855c:	2b20      	cmp	r3, #32
1000855e:	d003      	beq.n	10008568 <sms_ble_power_down+0x34>
10008560:	e016      	b.n	10008590 <sms_ble_power_down+0x5c>
10008562:	2b23      	cmp	r3, #35	; 0x23
10008564:	d908      	bls.n	10008578 <sms_ble_power_down+0x44>
10008566:	e013      	b.n	10008590 <sms_ble_power_down+0x5c>
			case BLE_STATE_ADVERTISING:
			DBG_LOG_DEV("[sms_ble_power_down]\tStopping command received during advertisement. Stopping... ");
			if(at_ble_adv_stop() != AT_BLE_SUCCESS) {
10008568:	4b13      	ldr	r3, [pc, #76]	; (100085b8 <sms_ble_power_down+0x84>)
1000856a:	4798      	blx	r3
1000856c:	2800      	cmp	r0, #0
1000856e:	d10f      	bne.n	10008590 <sms_ble_power_down+0x5c>
				DBG_LOG_CONT_DEV("failed!!!");
				//#pragma TBD: manage adv_stop failure
			}
			else {
				DBG_LOG_CONT_DEV("done!");
				ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008570:	2211      	movs	r2, #17
10008572:	4b0e      	ldr	r3, [pc, #56]	; (100085ac <sms_ble_power_down+0x78>)
10008574:	701a      	strb	r2, [r3, #0]
10008576:	e00b      	b.n	10008590 <sms_ble_power_down+0x5c>
			case BLE_STATE_PAIRED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice paired... disabling interrupts & switching down sensors");
			
			case BLE_STATE_INDICATING:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tCurrently indicating");
			pressure_device.state = PRESSURE_STATE_OFF;
10008578:	2100      	movs	r1, #0
1000857a:	232b      	movs	r3, #43	; 0x2b
1000857c:	4a0f      	ldr	r2, [pc, #60]	; (100085bc <sms_ble_power_down+0x88>)
1000857e:	54d1      	strb	r1, [r2, r3]
			sms_sensors_interrupt_toggle(false, false);
10008580:	2000      	movs	r0, #0
10008582:	4b0f      	ldr	r3, [pc, #60]	; (100085c0 <sms_ble_power_down+0x8c>)
10008584:	4798      	blx	r3
			//#pragma TBD: switch-off sensors to save current
			//sms_sensors_switch(false);
			
			case BLE_STATE_CONNECTED:
			DBG_LOG_DEV("[sms_ble_power_down]\t\tDevice connected... disconnecting");
			at_ble_disconnect(sms_connection_handle, AT_BLE_TERMINATED_BY_USER);
10008586:	4b0f      	ldr	r3, [pc, #60]	; (100085c4 <sms_ble_power_down+0x90>)
10008588:	8818      	ldrh	r0, [r3, #0]
1000858a:	2113      	movs	r1, #19
1000858c:	4b0e      	ldr	r3, [pc, #56]	; (100085c8 <sms_ble_power_down+0x94>)
1000858e:	4798      	blx	r3
			
			default:
			break;
		}
		
		ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008590:	2211      	movs	r2, #17
10008592:	4b06      	ldr	r3, [pc, #24]	; (100085ac <sms_ble_power_down+0x78>)
10008594:	701a      	strb	r2, [r3, #0]
		timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
10008596:	3a0e      	subs	r2, #14
10008598:	4b0c      	ldr	r3, [pc, #48]	; (100085cc <sms_ble_power_down+0x98>)
1000859a:	701a      	strb	r2, [r3, #0]
		sms_led_blink_start(SMS_LED_0_PIN);
1000859c:	2016      	movs	r0, #22
1000859e:	4b0c      	ldr	r3, [pc, #48]	; (100085d0 <sms_ble_power_down+0x9c>)
100085a0:	4798      	blx	r3
	}
}
100085a2:	bd10      	pop	{r4, pc}
100085a4:	1001678c 	.word	0x1001678c
100085a8:	10008e55 	.word	0x10008e55
100085ac:	10019500 	.word	0x10019500
100085b0:	100194fd 	.word	0x100194fd
100085b4:	1000dc1d 	.word	0x1000dc1d
100085b8:	1000ef89 	.word	0x1000ef89
100085bc:	100195a4 	.word	0x100195a4
100085c0:	10009d59 	.word	0x10009d59
100085c4:	10019502 	.word	0x10019502
100085c8:	1000efb5 	.word	0x1000efb5
100085cc:	1001963f 	.word	0x1001963f
100085d0:	10009ad9 	.word	0x10009ad9

100085d4 <sms_ble_adv_report_fn>:
//#include <stdio.h>
#include "sms_ble.h"

/* AT_BLE_ADV_REPORT (#3) */
at_ble_status_t sms_ble_adv_report_fn(void *params)
{
100085d4:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report = (at_ble_adv_report_t *)params;
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
100085d6:	2211      	movs	r2, #17
100085d8:	4b02      	ldr	r3, [pc, #8]	; (100085e4 <sms_ble_adv_report_fn+0x10>)
100085da:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_adv_report_fn]\tAdvertisement timeout...");
    //DBG_LOG_DEV("- status: 0x%02x", adv_report->status);
    sms_ble_power_down();
100085dc:	4b02      	ldr	r3, [pc, #8]	; (100085e8 <sms_ble_adv_report_fn+0x14>)
100085de:	4798      	blx	r3
    return AT_BLE_SUCCESS;
}
100085e0:	2000      	movs	r0, #0
100085e2:	bd10      	pop	{r4, pc}
100085e4:	10019500 	.word	0x10019500
100085e8:	10008535 	.word	0x10008535

100085ec <sms_ble_connected_fn>:

/* AT_BLE_CONNECTED (#5) */
at_ble_status_t sms_ble_connected_fn(void *params)
{
100085ec:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_ADVERTISING) {
100085ee:	4b0c      	ldr	r3, [pc, #48]	; (10008620 <sms_ble_connected_fn+0x34>)
100085f0:	781b      	ldrb	r3, [r3, #0]
100085f2:	2b20      	cmp	r3, #32
100085f4:	d110      	bne.n	10008618 <sms_ble_connected_fn+0x2c>
        at_ble_connected_t *connected = (at_ble_connected_t *)params;
        sms_ble_conn_handle = connected->handle;
100085f6:	8902      	ldrh	r2, [r0, #8]
100085f8:	4b0a      	ldr	r3, [pc, #40]	; (10008624 <sms_ble_connected_fn+0x38>)
100085fa:	801a      	strh	r2, [r3, #0]
        ble_instance.current_state = BLE_STATE_CONNECTED;
100085fc:	2221      	movs	r2, #33	; 0x21
100085fe:	4b08      	ldr	r3, [pc, #32]	; (10008620 <sms_ble_connected_fn+0x34>)
10008600:	701a      	strb	r2, [r3, #0]
        DBG_LOG_DEV("[sms_ble_connected_fn]\t\tDevices connected...");
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- conn interval: %d\r\n- conn latency: %d\r\n- supervision timeout: %d\r\n- peer address: 0x", connected->handle, connected->conn_params.con_interval, connected->conn_params.con_latency, connected->conn_params.sup_to);
        //for(uint8_t i = 0; i < AT_BLE_ADDR_LEN; i++) {
            //DBG_LOG_CONT_DEV("%02x",connected->peer_addr.addr[AT_BLE_ADDR_LEN - (i+1)]);
        //}
		DBG_LOG("T/O: 5000 ms");
10008602:	4809      	ldr	r0, [pc, #36]	; (10008628 <sms_ble_connected_fn+0x3c>)
10008604:	4b09      	ldr	r3, [pc, #36]	; (1000862c <sms_ble_connected_fn+0x40>)
10008606:	4798      	blx	r3
10008608:	4809      	ldr	r0, [pc, #36]	; (10008630 <sms_ble_connected_fn+0x44>)
1000860a:	4b0a      	ldr	r3, [pc, #40]	; (10008634 <sms_ble_connected_fn+0x48>)
1000860c:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_PAIR;
1000860e:	22fa      	movs	r2, #250	; 0xfa
10008610:	0052      	lsls	r2, r2, #1
10008612:	4b09      	ldr	r3, [pc, #36]	; (10008638 <sms_ble_connected_fn+0x4c>)
10008614:	601a      	str	r2, [r3, #0]
10008616:	e001      	b.n	1000861c <sms_ble_connected_fn+0x30>
    }
    else {
        sms_ble_power_down();
10008618:	4b08      	ldr	r3, [pc, #32]	; (1000863c <sms_ble_connected_fn+0x50>)
1000861a:	4798      	blx	r3
    }    
    return AT_BLE_SUCCESS;
}
1000861c:	2000      	movs	r0, #0
1000861e:	bd10      	pop	{r4, pc}
10008620:	10019500 	.word	0x10019500
10008624:	10019632 	.word	0x10019632
10008628:	1001677c 	.word	0x1001677c
1000862c:	10015835 	.word	0x10015835
10008630:	100167a4 	.word	0x100167a4
10008634:	10015715 	.word	0x10015715
10008638:	100194f8 	.word	0x100194f8
1000863c:	10008535 	.word	0x10008535

10008640 <sms_ble_paired_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_PAIR_DONE (#9) */
at_ble_status_t sms_ble_paired_fn(void *params)
{
10008640:	b510      	push	{r4, lr}
    if(ble_instance.current_state == BLE_STATE_CONNECTED) {
10008642:	4b0e      	ldr	r3, [pc, #56]	; (1000867c <sms_ble_paired_fn+0x3c>)
10008644:	781b      	ldrb	r3, [r3, #0]
10008646:	2b21      	cmp	r3, #33	; 0x21
10008648:	d114      	bne.n	10008674 <sms_ble_paired_fn+0x34>
        ble_instance.current_state = BLE_STATE_PAIRED;
1000864a:	2222      	movs	r2, #34	; 0x22
1000864c:	4b0b      	ldr	r3, [pc, #44]	; (1000867c <sms_ble_paired_fn+0x3c>)
1000864e:	701a      	strb	r2, [r3, #0]
        at_ble_pair_done_t *pair_status = (at_ble_pair_done_t *)params;
        sms_monitor_get_states("[sms_ble_paired_fn]");
10008650:	480b      	ldr	r0, [pc, #44]	; (10008680 <sms_ble_paired_fn+0x40>)
10008652:	4b0c      	ldr	r3, [pc, #48]	; (10008684 <sms_ble_paired_fn+0x44>)
10008654:	4798      	blx	r3
        //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- authorization: 0x%02x\r\n- status: 0x%02x", pair_status->handle, pair_status->auth, pair_status->status);
        sms_sensors_switch(true, true); // ! Release sleep lock & enable buttons interrupt after reset done!
10008656:	2101      	movs	r1, #1
10008658:	2001      	movs	r0, #1
1000865a:	4b0b      	ldr	r3, [pc, #44]	; (10008688 <sms_ble_paired_fn+0x48>)
1000865c:	4798      	blx	r3
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
		DBG_LOG("T/O: OFF");
1000865e:	480b      	ldr	r0, [pc, #44]	; (1000868c <sms_ble_paired_fn+0x4c>)
10008660:	4b0b      	ldr	r3, [pc, #44]	; (10008690 <sms_ble_paired_fn+0x50>)
10008662:	4798      	blx	r3
10008664:	480b      	ldr	r0, [pc, #44]	; (10008694 <sms_ble_paired_fn+0x54>)
10008666:	4b0c      	ldr	r3, [pc, #48]	; (10008698 <sms_ble_paired_fn+0x58>)
10008668:	4798      	blx	r3
		sms_ble_timeout = BLE_TIMEOUT_OFF;
1000866a:	2201      	movs	r2, #1
1000866c:	4252      	negs	r2, r2
1000866e:	4b0b      	ldr	r3, [pc, #44]	; (1000869c <sms_ble_paired_fn+0x5c>)
10008670:	601a      	str	r2, [r3, #0]
10008672:	e001      	b.n	10008678 <sms_ble_paired_fn+0x38>
    }
    else {
        sms_ble_power_down();
10008674:	4b0a      	ldr	r3, [pc, #40]	; (100086a0 <sms_ble_paired_fn+0x60>)
10008676:	4798      	blx	r3
    }        
    return AT_BLE_SUCCESS;
}
10008678:	2000      	movs	r0, #0
1000867a:	bd10      	pop	{r4, pc}
1000867c:	10019500 	.word	0x10019500
10008680:	100167b4 	.word	0x100167b4
10008684:	10008e55 	.word	0x10008e55
10008688:	10009de1 	.word	0x10009de1
1000868c:	1001677c 	.word	0x1001677c
10008690:	10015835 	.word	0x10015835
10008694:	10016780 	.word	0x10016780
10008698:	10015715 	.word	0x10015715
1000869c:	100194f8 	.word	0x100194f8
100086a0:	10008535 	.word	0x10008535

100086a4 <sms_ble_advertise>:
		sms_led_blink_start(SMS_LED_0_PIN);
	}
}

at_ble_status_t sms_ble_advertise(void)
{
100086a4:	b510      	push	{r4, lr}
100086a6:	b084      	sub	sp, #16
	at_ble_status_t status = AT_BLE_FAILURE;
	ble_instance.current_state = BLE_STATE_ADVERTISING;
100086a8:	2220      	movs	r2, #32
100086aa:	4b14      	ldr	r3, [pc, #80]	; (100086fc <sms_ble_advertise+0x58>)
100086ac:	701a      	strb	r2, [r3, #0]

	/* Set the advertisement data */
	if((status = ble_advertisement_data_set()) != AT_BLE_SUCCESS) {
100086ae:	4b14      	ldr	r3, [pc, #80]	; (10008700 <sms_ble_advertise+0x5c>)
100086b0:	4798      	blx	r3
100086b2:	1e04      	subs	r4, r0, #0
100086b4:	d007      	beq.n	100086c6 <sms_ble_advertise+0x22>
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
100086b6:	4813      	ldr	r0, [pc, #76]	; (10008704 <sms_ble_advertise+0x60>)
100086b8:	4b13      	ldr	r3, [pc, #76]	; (10008708 <sms_ble_advertise+0x64>)
100086ba:	4798      	blx	r3
100086bc:	4813      	ldr	r0, [pc, #76]	; (1000870c <sms_ble_advertise+0x68>)
100086be:	4b14      	ldr	r3, [pc, #80]	; (10008710 <sms_ble_advertise+0x6c>)
100086c0:	4798      	blx	r3
		return status;
100086c2:	0020      	movs	r0, r4
100086c4:	e018      	b.n	100086f8 <sms_ble_advertise+0x54>
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086c6:	2300      	movs	r3, #0
100086c8:	9302      	str	r3, [sp, #8]
100086ca:	4b12      	ldr	r3, [pc, #72]	; (10008714 <sms_ble_advertise+0x70>)
100086cc:	9301      	str	r3, [sp, #4]
100086ce:	23c8      	movs	r3, #200	; 0xc8
100086d0:	00db      	lsls	r3, r3, #3
100086d2:	9300      	str	r3, [sp, #0]
100086d4:	2300      	movs	r3, #0
100086d6:	2200      	movs	r2, #0
100086d8:	2101      	movs	r1, #1
100086da:	2000      	movs	r0, #0
100086dc:	4c0e      	ldr	r4, [pc, #56]	; (10008718 <sms_ble_advertise+0x74>)
100086de:	47a0      	blx	r4
100086e0:	0004      	movs	r4, r0
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
100086e2:	2000      	movs	r0, #0
		DBG_LOG("[sms_ble_advertise]\tAdvertisement data set failed!");
		return status;
	}

	/* Start of advertisement */
	if((status = at_ble_adv_start(AT_BLE_ADV_TYPE_UNDIRECTED, AT_BLE_ADV_GEN_DISCOVERABLE, NULL, AT_BLE_ADV_FP_ANY, APP_FAST_ADV, APP_ADV_TIMEOUT, 0)) == AT_BLE_SUCCESS)
100086e4:	2c00      	cmp	r4, #0
100086e6:	d007      	beq.n	100086f8 <sms_ble_advertise+0x54>
	{
		DBG_LOG_DEV("[sms_ble_advertise]\t\tBLE Started Advertisement");
		return AT_BLE_SUCCESS;
	}
	else {
		DBG_LOG("[sms_service_advertise]\tBLE Advertisement start failed: reason 0x%x", status);
100086e8:	4806      	ldr	r0, [pc, #24]	; (10008704 <sms_ble_advertise+0x60>)
100086ea:	4b07      	ldr	r3, [pc, #28]	; (10008708 <sms_ble_advertise+0x64>)
100086ec:	4798      	blx	r3
100086ee:	0021      	movs	r1, r4
100086f0:	480a      	ldr	r0, [pc, #40]	; (1000871c <sms_ble_advertise+0x78>)
100086f2:	4b07      	ldr	r3, [pc, #28]	; (10008710 <sms_ble_advertise+0x6c>)
100086f4:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
100086f6:	20e2      	movs	r0, #226	; 0xe2
}
100086f8:	b004      	add	sp, #16
100086fa:	bd10      	pop	{r4, pc}
100086fc:	10019500 	.word	0x10019500
10008700:	1000d281 	.word	0x1000d281
10008704:	1001677c 	.word	0x1001677c
10008708:	10015835 	.word	0x10015835
1000870c:	100167c8 	.word	0x100167c8
10008710:	10015715 	.word	0x10015715
10008714:	0000028f 	.word	0x0000028f
10008718:	1000ee4d 	.word	0x1000ee4d
1000871c:	100167fc 	.word	0x100167fc

10008720 <sms_ble_disconnected_fn>:
    return AT_BLE_SUCCESS;
}

/* AT_BLE_DISCONNECTED (#6) */
at_ble_status_t sms_ble_disconnected_fn(void *params)
{
10008720:	b510      	push	{r4, lr}
10008722:	0004      	movs	r4, r0
    at_ble_disconnected_t *disconnect = (at_ble_disconnected_t *)params;
    if(ble_instance.current_state == BLE_STATE_PAIRED) {
10008724:	4b16      	ldr	r3, [pc, #88]	; (10008780 <sms_ble_disconnected_fn+0x60>)
10008726:	781b      	ldrb	r3, [r3, #0]
10008728:	2b22      	cmp	r3, #34	; 0x22
1000872a:	d10a      	bne.n	10008742 <sms_ble_disconnected_fn+0x22>
        pressure_device.state = PRESSURE_STATE_OFF;
1000872c:	2100      	movs	r1, #0
1000872e:	3309      	adds	r3, #9
10008730:	4a14      	ldr	r2, [pc, #80]	; (10008784 <sms_ble_disconnected_fn+0x64>)
10008732:	54d1      	strb	r1, [r2, r3]
        sms_sensors_interrupt_toggle(false, false);
10008734:	2000      	movs	r0, #0
10008736:	4b14      	ldr	r3, [pc, #80]	; (10008788 <sms_ble_disconnected_fn+0x68>)
10008738:	4798      	blx	r3
        sms_sensors_switch(false, false);
1000873a:	2100      	movs	r1, #0
1000873c:	2000      	movs	r0, #0
1000873e:	4b13      	ldr	r3, [pc, #76]	; (1000878c <sms_ble_disconnected_fn+0x6c>)
10008740:	4798      	blx	r3
    }
    ble_instance.current_state = BLE_STATE_DISCONNECTED;
10008742:	4b0f      	ldr	r3, [pc, #60]	; (10008780 <sms_ble_disconnected_fn+0x60>)
10008744:	2211      	movs	r2, #17
10008746:	701a      	strb	r2, [r3, #0]
    DBG_LOG_DEV("[sms_ble_disconnected_fn]\tPeer disconnected... Bnew %d, BLE 0x%02x, T1 %d, T2 %d", button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode);
10008748:	781b      	ldrb	r3, [r3, #0]
1000874a:	4b11      	ldr	r3, [pc, #68]	; (10008790 <sms_ble_disconnected_fn+0x70>)
1000874c:	781b      	ldrb	r3, [r3, #0]
1000874e:	4b11      	ldr	r3, [pc, #68]	; (10008794 <sms_ble_disconnected_fn+0x74>)
10008750:	781b      	ldrb	r3, [r3, #0]
    //DBG_LOG_DEV("- conn handle: 0x%04x\r\n- reason: 0x%02x", disconnect->handle, disconnect->reason);
    switch(disconnect->reason) {
10008752:	78a3      	ldrb	r3, [r4, #2]
10008754:	2b1a      	cmp	r3, #26
10008756:	d00b      	beq.n	10008770 <sms_ble_disconnected_fn+0x50>
10008758:	b2da      	uxtb	r2, r3
1000875a:	2a1a      	cmp	r2, #26
1000875c:	d804      	bhi.n	10008768 <sms_ble_disconnected_fn+0x48>
1000875e:	2b05      	cmp	r3, #5
10008760:	d006      	beq.n	10008770 <sms_ble_disconnected_fn+0x50>
10008762:	2b08      	cmp	r3, #8
10008764:	d107      	bne.n	10008776 <sms_ble_disconnected_fn+0x56>
10008766:	e003      	b.n	10008770 <sms_ble_disconnected_fn+0x50>
10008768:	2b29      	cmp	r3, #41	; 0x29
1000876a:	d001      	beq.n	10008770 <sms_ble_disconnected_fn+0x50>
1000876c:	2b3b      	cmp	r3, #59	; 0x3b
1000876e:	d102      	bne.n	10008776 <sms_ble_disconnected_fn+0x56>
        case AT_BLE_AUTH_FAILURE: //0x05
        case AT_BLE_SUPERVISION_TIMEOUT: //0x08
        case AT_BLE_UNSUPPORTED_REMOTE_FEATURE: // 0x1A
        case AT_BLE_PAIRING_WITH_UNIT_KEY_NOT_SUP: // 0x29
        case AT_BLE_UNACCEPTABLE_INTERVAL: // 0x3B
        sms_ble_advertise();
10008770:	4b09      	ldr	r3, [pc, #36]	; (10008798 <sms_ble_disconnected_fn+0x78>)
10008772:	4798      	blx	r3
        break;
10008774:	e001      	b.n	1000877a <sms_ble_disconnected_fn+0x5a>
        case AT_BLE_TERMINATED_BY_USER: // 0x13
        case AT_BLE_REMOTE_DEV_TERM_LOW_RESOURCES: //0x14
        case AT_BLE_REMOTE_DEV_POWER_OFF: //0x15
        case AT_BLE_CON_TERM_BY_LOCAL_HOST: //0x16
        default:
        sms_ble_power_down();
10008776:	4b09      	ldr	r3, [pc, #36]	; (1000879c <sms_ble_disconnected_fn+0x7c>)
10008778:	4798      	blx	r3
        break;
    }
    
    return AT_BLE_SUCCESS;
}
1000877a:	2000      	movs	r0, #0
1000877c:	bd10      	pop	{r4, pc}
1000877e:	46c0      	nop			; (mov r8, r8)
10008780:	10019500 	.word	0x10019500
10008784:	100195a4 	.word	0x100195a4
10008788:	10009d59 	.word	0x10009d59
1000878c:	10009de1 	.word	0x10009de1
10008790:	10019430 	.word	0x10019430
10008794:	1001963f 	.word	0x1001963f
10008798:	100086a5 	.word	0x100086a5
1000879c:	10008535 	.word	0x10008535

100087a0 <sms_ble_send_characteristic>:
	}
	return AT_BLE_FAILURE;
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
100087a0:	b530      	push	{r4, r5, lr}
100087a2:	b087      	sub	sp, #28
    uint8_t char_size = 0;
    uint8_t send_val[BLE_CHAR_SIZE_MAX];
    //ble_current_state = BLE_STATE_INDICATING;

    
    switch(ch) {
100087a4:	2801      	cmp	r0, #1
100087a6:	d02d      	beq.n	10008804 <sms_ble_send_characteristic+0x64>
100087a8:	2800      	cmp	r0, #0
100087aa:	d002      	beq.n	100087b2 <sms_ble_send_characteristic+0x12>
100087ac:	2802      	cmp	r0, #2
100087ae:	d03f      	beq.n	10008830 <sms_ble_send_characteristic+0x90>
100087b0:	e097      	b.n	100088e2 <sms_ble_send_characteristic+0x142>
        case BLE_CHAR_BTN:
		send_val[0] = 0x00;
100087b2:	2200      	movs	r2, #0
100087b4:	ab01      	add	r3, sp, #4
100087b6:	701a      	strb	r2, [r3, #0]
		if(button_instance.btn0.new_char) {
100087b8:	4b60      	ldr	r3, [pc, #384]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087ba:	791b      	ldrb	r3, [r3, #4]
100087bc:	2b00      	cmp	r3, #0
100087be:	d00a      	beq.n	100087d6 <sms_ble_send_characteristic+0x36>
			button_instance.btn0.char_value = ((button_instance.btn0.char_value >= 0x7f) ? 0 : (button_instance.btn0.char_value + 1));
100087c0:	4b5e      	ldr	r3, [pc, #376]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087c2:	795a      	ldrb	r2, [r3, #5]
100087c4:	2300      	movs	r3, #0
100087c6:	2a7e      	cmp	r2, #126	; 0x7e
100087c8:	d801      	bhi.n	100087ce <sms_ble_send_characteristic+0x2e>
100087ca:	3201      	adds	r2, #1
100087cc:	b2d3      	uxtb	r3, r2
100087ce:	4a5b      	ldr	r2, [pc, #364]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087d0:	7153      	strb	r3, [r2, #5]
			send_val[0] |= button_instance.btn0.char_value;
100087d2:	aa01      	add	r2, sp, #4
100087d4:	7013      	strb	r3, [r2, #0]
		}
		if(button_instance.btn1.new_char) {
100087d6:	4b59      	ldr	r3, [pc, #356]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087d8:	7a9b      	ldrb	r3, [r3, #10]
100087da:	2b00      	cmp	r3, #0
100087dc:	d00e      	beq.n	100087fc <sms_ble_send_characteristic+0x5c>
	        button_instance.btn1.char_value = ((button_instance.btn1.char_value >= 0xff) ? 0 : (button_instance.btn1.char_value + 1));
100087de:	4b57      	ldr	r3, [pc, #348]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087e0:	7adb      	ldrb	r3, [r3, #11]
100087e2:	2bff      	cmp	r3, #255	; 0xff
100087e4:	d002      	beq.n	100087ec <sms_ble_send_characteristic+0x4c>
100087e6:	3301      	adds	r3, #1
100087e8:	b2db      	uxtb	r3, r3
100087ea:	e000      	b.n	100087ee <sms_ble_send_characteristic+0x4e>
100087ec:	2300      	movs	r3, #0
100087ee:	4a53      	ldr	r2, [pc, #332]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087f0:	72d3      	strb	r3, [r2, #11]
			send_val[0] |= button_instance.btn1.char_value + 0x80;
100087f2:	aa01      	add	r2, sp, #4
100087f4:	3b80      	subs	r3, #128	; 0x80
100087f6:	7811      	ldrb	r1, [r2, #0]
100087f8:	430b      	orrs	r3, r1
100087fa:	7013      	strb	r3, [r2, #0]
		}
        val_handle = button_instance.service_handler.serv_chars.char_val_handle;
100087fc:	4b4f      	ldr	r3, [pc, #316]	; (1000893c <sms_ble_send_characteristic+0x19c>)
100087fe:	8c9d      	ldrh	r5, [r3, #36]	; 0x24
        length = BLE_CHAR_SIZE_BUTTON;
10008800:	2201      	movs	r2, #1
        break;
10008802:	e070      	b.n	100088e6 <sms_ble_send_characteristic+0x146>
                
        case BLE_CHAR_PRESS:
        send_val[0] = (uint8_t)((pressure_device.hal.temperature >>24) & 0xff);
10008804:	494e      	ldr	r1, [pc, #312]	; (10008940 <sms_ble_send_characteristic+0x1a0>)
10008806:	6a0a      	ldr	r2, [r1, #32]
10008808:	ab01      	add	r3, sp, #4
1000880a:	1610      	asrs	r0, r2, #24
1000880c:	7018      	strb	r0, [r3, #0]
        send_val[1] = (uint8_t)((pressure_device.hal.temperature >> 16) & 0xff);
1000880e:	1410      	asrs	r0, r2, #16
10008810:	7058      	strb	r0, [r3, #1]
        send_val[2] = (uint8_t)((pressure_device.hal.temperature >> 8) & 0xff);
10008812:	1210      	asrs	r0, r2, #8
10008814:	7098      	strb	r0, [r3, #2]
        send_val[3] = (uint8_t)((pressure_device.hal.temperature) & 0xff);
10008816:	70da      	strb	r2, [r3, #3]
        send_val[4] = (uint8_t)((pressure_device.hal.pressure >> 24) & 0xff);
10008818:	69ca      	ldr	r2, [r1, #28]
1000881a:	1610      	asrs	r0, r2, #24
1000881c:	7118      	strb	r0, [r3, #4]
        send_val[5] = (uint8_t)((pressure_device.hal.pressure >> 16) & 0xff);
1000881e:	1410      	asrs	r0, r2, #16
10008820:	7158      	strb	r0, [r3, #5]
        send_val[6] = (uint8_t)((pressure_device.hal.pressure >> 8) & 0xff);
10008822:	1210      	asrs	r0, r2, #8
10008824:	7198      	strb	r0, [r3, #6]
        send_val[7] = (uint8_t)((pressure_device.hal.pressure) & 0xff);
10008826:	71da      	strb	r2, [r3, #7]
        val_handle = pressure_device.service_handler.serv_chars.char_val_handle;
10008828:	2340      	movs	r3, #64	; 0x40
1000882a:	5acd      	ldrh	r5, [r1, r3]
        length = BLE_CHAR_SIZE_PRESSURE;
1000882c:	2208      	movs	r2, #8
        break;
1000882e:	e05a      	b.n	100088e6 <sms_ble_send_characteristic+0x146>
        
        case BLE_CHAR_MPU:
        send_val[0] = (uint8_t)(mpu_device.output.accel[0] & 0xff);
10008830:	4a44      	ldr	r2, [pc, #272]	; (10008944 <sms_ble_send_characteristic+0x1a4>)
10008832:	234e      	movs	r3, #78	; 0x4e
10008834:	5ed1      	ldrsh	r1, [r2, r3]
10008836:	ab01      	add	r3, sp, #4
10008838:	7019      	strb	r1, [r3, #0]
        send_val[1] = (uint8_t)((mpu_device.output.accel[0] >> 8) & 0xff);
1000883a:	1209      	asrs	r1, r1, #8
1000883c:	7059      	strb	r1, [r3, #1]
        send_val[2] = (uint8_t)(mpu_device.output.accel[1] & 0xff);
1000883e:	2150      	movs	r1, #80	; 0x50
10008840:	5e51      	ldrsh	r1, [r2, r1]
10008842:	7099      	strb	r1, [r3, #2]
        send_val[3] = (uint8_t)((mpu_device.output.accel[1] >> 8) & 0xff);
10008844:	1209      	asrs	r1, r1, #8
10008846:	70d9      	strb	r1, [r3, #3]
        send_val[4] = (uint8_t)(mpu_device.output.accel[2] & 0xff);
10008848:	2152      	movs	r1, #82	; 0x52
1000884a:	5e51      	ldrsh	r1, [r2, r1]
1000884c:	7119      	strb	r1, [r3, #4]
        send_val[5] = (uint8_t)((mpu_device.output.accel[2] >> 8) & 0xff);
1000884e:	1209      	asrs	r1, r1, #8
10008850:	7159      	strb	r1, [r3, #5]
        send_val[6] = (uint8_t)(mpu_device.output.gyro[0] & 0xff);
10008852:	2148      	movs	r1, #72	; 0x48
10008854:	5e51      	ldrsh	r1, [r2, r1]
10008856:	7199      	strb	r1, [r3, #6]
        send_val[7] = (uint8_t)((mpu_device.output.gyro[0] >> 8) & 0xff);
10008858:	1209      	asrs	r1, r1, #8
1000885a:	71d9      	strb	r1, [r3, #7]
        send_val[8] = (uint8_t)(mpu_device.output.gyro[1] & 0xff);
1000885c:	214a      	movs	r1, #74	; 0x4a
1000885e:	5e51      	ldrsh	r1, [r2, r1]
10008860:	7219      	strb	r1, [r3, #8]
        send_val[9] = (uint8_t)((mpu_device.output.gyro[1] >> 8) & 0xff);
10008862:	1209      	asrs	r1, r1, #8
10008864:	7259      	strb	r1, [r3, #9]
        send_val[10] = (uint8_t)(mpu_device.output.gyro[2] & 0xff);
10008866:	214c      	movs	r1, #76	; 0x4c
10008868:	5e51      	ldrsh	r1, [r2, r1]
1000886a:	7299      	strb	r1, [r3, #10]
        send_val[11] = (uint8_t)((mpu_device.output.gyro[2] >> 8) & 0xff);
1000886c:	1209      	asrs	r1, r1, #8
1000886e:	72d9      	strb	r1, [r3, #11]
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
10008870:	237c      	movs	r3, #124	; 0x7c
10008872:	5ad5      	ldrh	r5, [r2, r3]
        length = BLE_CHAR_SIZE_MPU_G_A;
        
        if(mpu_device.interrupt.new_compass) {
10008874:	3b1a      	subs	r3, #26
10008876:	5cd3      	ldrb	r3, [r2, r3]
10008878:	2b00      	cmp	r3, #0
1000887a:	d014      	beq.n	100088a6 <sms_ble_send_characteristic+0x106>
            send_val[12] = (uint8_t)(mpu_device.output.compass[0] & 0xff);
1000887c:	2354      	movs	r3, #84	; 0x54
1000887e:	5ed1      	ldrsh	r1, [r2, r3]
10008880:	ab01      	add	r3, sp, #4
10008882:	7319      	strb	r1, [r3, #12]
            send_val[13] = (uint8_t)((mpu_device.output.compass[0] >> 8) & 0xff);
10008884:	1209      	asrs	r1, r1, #8
10008886:	7359      	strb	r1, [r3, #13]
            send_val[14] = (uint8_t)(mpu_device.output.compass[1] & 0xff);
10008888:	2156      	movs	r1, #86	; 0x56
1000888a:	5e51      	ldrsh	r1, [r2, r1]
1000888c:	7399      	strb	r1, [r3, #14]
            send_val[15] = (uint8_t)((mpu_device.output.compass[1] >> 8) & 0xff);
1000888e:	1209      	asrs	r1, r1, #8
10008890:	73d9      	strb	r1, [r3, #15]
            send_val[16] = (uint8_t)(mpu_device.output.compass[2] & 0xff);
10008892:	2158      	movs	r1, #88	; 0x58
10008894:	5e51      	ldrsh	r1, [r2, r1]
10008896:	7419      	strb	r1, [r3, #16]
            send_val[17] = (uint8_t)((mpu_device.output.compass[2] >> 8) & 0xff);
10008898:	1209      	asrs	r1, r1, #8
1000889a:	7459      	strb	r1, [r3, #17]
            length = BLE_CHAR_SIZE_MPU_G_A_C;
            mpu_device.interrupt.new_compass = false;
1000889c:	2100      	movs	r1, #0
1000889e:	2362      	movs	r3, #98	; 0x62
100088a0:	54d1      	strb	r1, [r2, r3]
            send_val[13] = (uint8_t)((mpu_device.output.compass[0] >> 8) & 0xff);
            send_val[14] = (uint8_t)(mpu_device.output.compass[1] & 0xff);
            send_val[15] = (uint8_t)((mpu_device.output.compass[1] >> 8) & 0xff);
            send_val[16] = (uint8_t)(mpu_device.output.compass[2] & 0xff);
            send_val[17] = (uint8_t)((mpu_device.output.compass[2] >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C;
100088a2:	2212      	movs	r2, #18
100088a4:	e008      	b.n	100088b8 <sms_ble_send_characteristic+0x118>
            mpu_device.interrupt.new_compass = false;
        }
        else {
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
100088a6:	ab01      	add	r3, sp, #4
100088a8:	2200      	movs	r2, #0
100088aa:	731a      	strb	r2, [r3, #12]
100088ac:	735a      	strb	r2, [r3, #13]
100088ae:	739a      	strb	r2, [r3, #14]
100088b0:	73da      	strb	r2, [r3, #15]
100088b2:	741a      	strb	r2, [r3, #16]
100088b4:	745a      	strb	r2, [r3, #17]
        send_val[8] = (uint8_t)(mpu_device.output.gyro[1] & 0xff);
        send_val[9] = (uint8_t)((mpu_device.output.gyro[1] >> 8) & 0xff);
        send_val[10] = (uint8_t)(mpu_device.output.gyro[2] & 0xff);
        send_val[11] = (uint8_t)((mpu_device.output.gyro[2] >> 8) & 0xff);
        val_handle = mpu_device.service_handler.serv_chars.char_val_handle;
        length = BLE_CHAR_SIZE_MPU_G_A;
100088b6:	320c      	adds	r2, #12
            for(uint8_t i = 0; i < 6; i++) {
                send_val[12+i] = 0;
            }
        }
        
        if(mpu_device.interrupt.new_temp) {
100088b8:	2363      	movs	r3, #99	; 0x63
100088ba:	4922      	ldr	r1, [pc, #136]	; (10008944 <sms_ble_send_characteristic+0x1a4>)
100088bc:	5ccb      	ldrb	r3, [r1, r3]
100088be:	2b00      	cmp	r3, #0
100088c0:	d00a      	beq.n	100088d8 <sms_ble_send_characteristic+0x138>
            send_val[18] = (uint8_t)(mpu_device.output.temperature & 0xff);
100088c2:	000a      	movs	r2, r1
100088c4:	6dcb      	ldr	r3, [r1, #92]	; 0x5c
100088c6:	a901      	add	r1, sp, #4
100088c8:	748b      	strb	r3, [r1, #18]
            send_val[19] = (uint8_t)((mpu_device.output.temperature >> 8) & 0xff);
100088ca:	121b      	asrs	r3, r3, #8
100088cc:	74cb      	strb	r3, [r1, #19]
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
            mpu_device.interrupt.new_temp = false;
100088ce:	2100      	movs	r1, #0
100088d0:	2363      	movs	r3, #99	; 0x63
100088d2:	54d1      	strb	r1, [r2, r3]
        }
        
        if(mpu_device.interrupt.new_temp) {
            send_val[18] = (uint8_t)(mpu_device.output.temperature & 0xff);
            send_val[19] = (uint8_t)((mpu_device.output.temperature >> 8) & 0xff);
            length = BLE_CHAR_SIZE_MPU_G_A_C_T;
100088d4:	2214      	movs	r2, #20
100088d6:	e006      	b.n	100088e6 <sms_ble_send_characteristic+0x146>
            mpu_device.interrupt.new_temp = false;
        }
        else {
            for(uint8_t i = 0; i < 2; i++) {
                send_val[18+i] = 0;
100088d8:	ab01      	add	r3, sp, #4
100088da:	2100      	movs	r1, #0
100088dc:	7499      	strb	r1, [r3, #18]
100088de:	74d9      	strb	r1, [r3, #19]
100088e0:	e001      	b.n	100088e6 <sms_ble_send_characteristic+0x146>

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
    uint8_t length = 0;
100088e2:	2200      	movs	r2, #0
}

at_ble_status_t sms_ble_send_characteristic(enum sms_ble_char_type ch)
{
    at_ble_status_t status = AT_BLE_SUCCESS;
    at_ble_handle_t val_handle = 0;
100088e4:	2500      	movs	r5, #0
    
    //DBG_LOG_DEV("Sending: ");
    //for(int i = 0; i < 20; i += 2) {
        //DBG_LOG_CONT_DEV("0x%02x%02x ", send_val[i], send_val[i+1]);
    //}
    status = at_ble_characteristic_value_set(val_handle, send_val, (length * sizeof(uint8_t)));
100088e6:	b292      	uxth	r2, r2
100088e8:	a901      	add	r1, sp, #4
100088ea:	0028      	movs	r0, r5
100088ec:	4b16      	ldr	r3, [pc, #88]	; (10008948 <sms_ble_send_characteristic+0x1a8>)
100088ee:	4798      	blx	r3
100088f0:	1e04      	subs	r4, r0, #0
    if(status == AT_BLE_SUCCESS) {
100088f2:	d11f      	bne.n	10008934 <sms_ble_send_characteristic+0x194>
		DBG_LOG_CONT_DEV(" SET! ");
//#   if SMS_SENDING_WITH_ACK == true
        //sms_ble_ind_retry = 0;
        //status = at_ble_indication_send(sms_connection_handle, val_handle);
//#   else
        status = at_ble_notification_send(sms_connection_handle, val_handle);
100088f4:	4b15      	ldr	r3, [pc, #84]	; (1000894c <sms_ble_send_characteristic+0x1ac>)
100088f6:	8818      	ldrh	r0, [r3, #0]
100088f8:	0029      	movs	r1, r5
100088fa:	4b15      	ldr	r3, [pc, #84]	; (10008950 <sms_ble_send_characteristic+0x1b0>)
100088fc:	4798      	blx	r3
100088fe:	1e04      	subs	r4, r0, #0
		if(status == AT_BLE_SUCCESS) {
10008900:	d115      	bne.n	1000892e <sms_ble_send_characteristic+0x18e>
			ble_instance.sending_queue++;
10008902:	4a14      	ldr	r2, [pc, #80]	; (10008954 <sms_ble_send_characteristic+0x1b4>)
10008904:	7853      	ldrb	r3, [r2, #1]
10008906:	3301      	adds	r3, #1
10008908:	b2db      	uxtb	r3, r3
1000890a:	7053      	strb	r3, [r2, #1]
			sms_ble_send_cnt++;
1000890c:	4b12      	ldr	r3, [pc, #72]	; (10008958 <sms_ble_send_characteristic+0x1b8>)
1000890e:	8819      	ldrh	r1, [r3, #0]
10008910:	3101      	adds	r1, #1
10008912:	b289      	uxth	r1, r1
10008914:	8019      	strh	r1, [r3, #0]
			DBG_LOG_CONT(" %d GONE? ", sms_ble_send_cnt);
10008916:	4811      	ldr	r0, [pc, #68]	; (1000895c <sms_ble_send_characteristic+0x1bc>)
10008918:	4d11      	ldr	r5, [pc, #68]	; (10008960 <sms_ble_send_characteristic+0x1c0>)
1000891a:	47a8      	blx	r5
			DBG_LOG("T/O: 20ms");
1000891c:	4811      	ldr	r0, [pc, #68]	; (10008964 <sms_ble_send_characteristic+0x1c4>)
1000891e:	4b12      	ldr	r3, [pc, #72]	; (10008968 <sms_ble_send_characteristic+0x1c8>)
10008920:	4798      	blx	r3
10008922:	4812      	ldr	r0, [pc, #72]	; (1000896c <sms_ble_send_characteristic+0x1cc>)
10008924:	47a8      	blx	r5
			sms_ble_timeout = BLE_TIMEOUT_NOTIFY;
10008926:	2202      	movs	r2, #2
10008928:	4b11      	ldr	r3, [pc, #68]	; (10008970 <sms_ble_send_characteristic+0x1d0>)
1000892a:	601a      	str	r2, [r3, #0]
1000892c:	e002      	b.n	10008934 <sms_ble_send_characteristic+0x194>
		}
		else {
			DBG_LOG_CONT("NOTIFICATION ERROR!!");
1000892e:	4811      	ldr	r0, [pc, #68]	; (10008974 <sms_ble_send_characteristic+0x1d4>)
10008930:	4b0b      	ldr	r3, [pc, #44]	; (10008960 <sms_ble_send_characteristic+0x1c0>)
10008932:	4798      	blx	r3
    }
	else {
		DBG_LOG_DEV(" NOT set? ");
	}
    return status;
}
10008934:	0020      	movs	r0, r4
10008936:	b007      	add	sp, #28
10008938:	bd30      	pop	{r4, r5, pc}
1000893a:	46c0      	nop			; (mov r8, r8)
1000893c:	1001951c 	.word	0x1001951c
10008940:	100195a4 	.word	0x100195a4
10008944:	10019434 	.word	0x10019434
10008948:	1000f731 	.word	0x1000f731
1000894c:	10019502 	.word	0x10019502
10008950:	1000f8d1 	.word	0x1000f8d1
10008954:	10019500 	.word	0x10019500
10008958:	10019684 	.word	0x10019684
1000895c:	10016840 	.word	0x10016840
10008960:	10015715 	.word	0x10015715
10008964:	1001677c 	.word	0x1001677c
10008968:	10015835 	.word	0x10015835
1000896c:	1001684c 	.word	0x1001684c
10008970:	100194f8 	.word	0x100194f8
10008974:	10016858 	.word	0x10016858

10008978 <sms_ble_primary_service_define>:

at_ble_status_t sms_ble_primary_service_define(gatt_service_handler_t *service)
{
10008978:	b510      	push	{r4, lr}
1000897a:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_ble_primary_service_define]\n\r  defining primary service\r\n- uuid: 0x%02x\r\n- handle: 0x%02x\r\n- char uuid: 0x%02x%02x\r\n- char init value: %d", (unsigned int)service->serv_uuid.uuid, service->serv_handle, service->serv_chars.uuid.uuid[1], service->serv_chars.uuid.uuid[0], service->serv_chars.value_init_len);
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
1000897c:	0001      	movs	r1, r0
1000897e:	3112      	adds	r1, #18
10008980:	2301      	movs	r3, #1
10008982:	9301      	str	r3, [sp, #4]
10008984:	0003      	movs	r3, r0
10008986:	3314      	adds	r3, #20
10008988:	9300      	str	r3, [sp, #0]
1000898a:	2300      	movs	r3, #0
1000898c:	2200      	movs	r2, #0
1000898e:	4c02      	ldr	r4, [pc, #8]	; (10008998 <sms_ble_primary_service_define+0x20>)
10008990:	47a0      	blx	r4
}
10008992:	b002      	add	sp, #8
10008994:	bd10      	pop	{r4, pc}
10008996:	46c0      	nop			; (mov r8, r8)
10008998:	1000f711 	.word	0x1000f711

1000899c <sms_ble_service_init>:

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
1000899c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000899e:	464f      	mov	r7, r9
100089a0:	4646      	mov	r6, r8
100089a2:	b4c0      	push	{r6, r7}
100089a4:	b083      	sub	sp, #12
100089a6:	4694      	mov	ip, r2
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
100089a8:	2801      	cmp	r0, #1
100089aa:	d010      	beq.n	100089ce <sms_ble_service_init+0x32>
100089ac:	2800      	cmp	r0, #0
100089ae:	d002      	beq.n	100089b6 <sms_ble_service_init+0x1a>
100089b0:	2802      	cmp	r0, #2
100089b2:	d019      	beq.n	100089e8 <sms_ble_service_init+0x4c>
100089b4:	e025      	b.n	10008a02 <sms_ble_service_init+0x66>
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 8) & 0xFF);
100089b6:	23bb      	movs	r3, #187	; 0xbb
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 16) & 0xFF);
100089b8:	2450      	movs	r4, #80	; 0x50
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_2 >> 24) & 0xFF);
100089ba:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1) & 0xFF);
100089bc:	26be      	movs	r6, #190	; 0xbe
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 8) & 0xFF);
100089be:	275a      	movs	r7, #90	; 0x5a
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 16) & 0xFF);
100089c0:	2057      	movs	r0, #87	; 0x57
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
        uuid[0] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_1 >> 24) & 0xFF);
100089c2:	221c      	movs	r2, #28
100089c4:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
100089c6:	3a1b      	subs	r2, #27
100089c8:	9201      	str	r2, [sp, #4]
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
    uint8_t char_size = 0;
    switch(type) {
        case BLE_SERV_BUTTON:
        handle = 1;
100089ca:	4691      	mov	r9, r2
100089cc:	e023      	b.n	10008a16 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 8) & 0xFF);
100089ce:	23ee      	movs	r3, #238	; 0xee
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 16) & 0xFF);
100089d0:	2450      	movs	r4, #80	; 0x50
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_2 >> 24) & 0xFF);
100089d2:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1) & 0xFF);
100089d4:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 8) & 0xFF);
100089d6:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 16) & 0xFF);
100089d8:	2057      	movs	r0, #87	; 0x57
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
        uuid[0] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_1 >> 24) & 0xFF);
100089da:	221c      	movs	r2, #28
100089dc:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
100089de:	3a14      	subs	r2, #20
100089e0:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_BUTTON_SERVICE_UUID_4) & 0xFF);
        char_size = 1;
        break;
        
        case BLE_SERV_PRESSURE:
        handle = 2;
100089e2:	3a06      	subs	r2, #6
100089e4:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
100089e6:	e016      	b.n	10008a16 <sms_ble_service_init+0x7a>
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
        uuid[6] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 8) & 0xFF);
100089e8:	2311      	movs	r3, #17
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
        uuid[5] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 16) & 0xFF);
100089ea:	2450      	movs	r4, #80	; 0x50
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
        uuid[4] = (uint8_t) ((SMS_MPU_SERVICE_UUID_2 >> 24) & 0xFF);
100089ec:	2553      	movs	r5, #83	; 0x53
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
        uuid[3] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1) & 0xFF);
100089ee:	26be      	movs	r6, #190	; 0xbe
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
        uuid[2] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 8) & 0xFF);
100089f0:	275a      	movs	r7, #90	; 0x5a
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
        uuid[1] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 16) & 0xFF);
100089f2:	2057      	movs	r0, #87	; 0x57
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
        uuid[0] = (uint8_t) ((SMS_MPU_SERVICE_UUID_1 >> 24) & 0xFF);
100089f4:	221c      	movs	r2, #28
100089f6:	4690      	mov	r8, r2
        uuid[11] = (uint8_t) ((SMS_MPU_SERVICE_UUID_3) & 0xFF);
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
100089f8:	3a08      	subs	r2, #8
100089fa:	9201      	str	r2, [sp, #4]
        uuid[15] = (uint8_t) ((SMS_PRESSURE_SERVICE_UUID_4) & 0xFF);
        char_size = 8;
        break;
        
        case BLE_SERV_MPU:
        handle = 3;
100089fc:	3a11      	subs	r2, #17
100089fe:	4691      	mov	r9, r2
        uuid[12] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 24) & 0xFF);
        uuid[13] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 16) & 0xFF);
        uuid[14] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4 >> 8) & 0xFF);
        uuid[15] = (uint8_t) ((SMS_MPU_SERVICE_UUID_4) & 0xFF);
        char_size = 20;
        break;
10008a00:	e009      	b.n	10008a16 <sms_ble_service_init+0x7a>
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
    uint8_t uuid[16] = {0};
10008a02:	2300      	movs	r3, #0
10008a04:	2400      	movs	r4, #0
10008a06:	2500      	movs	r5, #0
10008a08:	2600      	movs	r6, #0
10008a0a:	2700      	movs	r7, #0
10008a0c:	2000      	movs	r0, #0
10008a0e:	2200      	movs	r2, #0
10008a10:	4690      	mov	r8, r2
    uint8_t char_size = 0;
10008a12:	9201      	str	r2, [sp, #4]
    return(at_ble_primary_service_define(&service->serv_uuid, &service->serv_handle, NULL, 0, &service->serv_chars, 1));
}

void sms_ble_service_init(enum sms_ble_serv_type type, gatt_service_handler_t *service, uint8_t *value)
{
    at_ble_handle_t handle = 0;
10008a14:	4691      	mov	r9, r2
        
        default:
        break;
    }
    //SMS button service characteristic
    service->serv_handle = handle;
10008a16:	464a      	mov	r2, r9
10008a18:	824a      	strh	r2, [r1, #18]
    service->serv_uuid.type = AT_BLE_UUID_128;
10008a1a:	2202      	movs	r2, #2
10008a1c:	700a      	strb	r2, [r1, #0]
    service->serv_uuid.uuid[0] = uuid[0];
10008a1e:	4642      	mov	r2, r8
10008a20:	704a      	strb	r2, [r1, #1]
    service->serv_uuid.uuid[1] = uuid[1];
10008a22:	7088      	strb	r0, [r1, #2]
    service->serv_uuid.uuid[2] = uuid[2];
10008a24:	70cf      	strb	r7, [r1, #3]
    service->serv_uuid.uuid[3] = uuid[3];
10008a26:	710e      	strb	r6, [r1, #4]
    service->serv_uuid.uuid[4] = uuid[4];
10008a28:	714d      	strb	r5, [r1, #5]
    service->serv_uuid.uuid[5] = uuid[5];
10008a2a:	718c      	strb	r4, [r1, #6]
    service->serv_uuid.uuid[6] = uuid[6];
10008a2c:	71cb      	strb	r3, [r1, #7]
    service->serv_uuid.uuid[7] = uuid[7];
10008a2e:	720b      	strb	r3, [r1, #8]
    service->serv_uuid.uuid[8] = uuid[8];
10008a30:	2300      	movs	r3, #0
10008a32:	724b      	strb	r3, [r1, #9]
    service->serv_uuid.uuid[9] = uuid[9];
10008a34:	728b      	strb	r3, [r1, #10]
    service->serv_uuid.uuid[10] = uuid[10];
10008a36:	72cb      	strb	r3, [r1, #11]
    service->serv_uuid.uuid[11] = uuid[11];
10008a38:	730b      	strb	r3, [r1, #12]
    service->serv_uuid.uuid[12] = uuid[12];
10008a3a:	734b      	strb	r3, [r1, #13]
    service->serv_uuid.uuid[13] = uuid[13];
10008a3c:	738b      	strb	r3, [r1, #14]
    service->serv_uuid.uuid[14] = uuid[14];
10008a3e:	73cb      	strb	r3, [r1, #15]
    service->serv_uuid.uuid[15] = uuid[15];
10008a40:	740b      	strb	r3, [r1, #16]
    
    #   if SMS_SENDING_WITH_ACK == true
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_INDICATE); // properties
    #   else
    service->serv_chars.properties = (AT_BLE_CHAR_READ | AT_BLE_CHAR_NOTIFY); // properties
10008a42:	2412      	movs	r4, #18
10008a44:	850c      	strh	r4, [r1, #40]	; 0x28
    #   endif
    service->serv_chars.init_value = value; // value
10008a46:	4662      	mov	r2, ip
10008a48:	62ca      	str	r2, [r1, #44]	; 0x2c
    service->serv_chars.value_init_len = char_size * sizeof(uint8_t);
10008a4a:	466a      	mov	r2, sp
10008a4c:	8892      	ldrh	r2, [r2, #4]
10008a4e:	860a      	strh	r2, [r1, #48]	; 0x30
    service->serv_chars.value_max_len = char_size * sizeof(uint8_t);
10008a50:	864a      	strh	r2, [r1, #50]	; 0x32
    service->serv_chars.value_permissions = (AT_BLE_ATTR_READABLE_NO_AUTHN_NO_AUTHR | AT_BLE_ATTR_WRITABLE_NO_AUTHN_NO_AUTHR); // permissions
10008a52:	2011      	movs	r0, #17
10008a54:	2234      	movs	r2, #52	; 0x34
10008a56:	5488      	strb	r0, [r1, r2]
    service->serv_chars.user_desc = NULL; //user defined name
10008a58:	638b      	str	r3, [r1, #56]	; 0x38
    service->serv_chars.user_desc_len = 0;
10008a5a:	2200      	movs	r2, #0
10008a5c:	878b      	strh	r3, [r1, #60]	; 0x3c
    service->serv_chars.user_desc_max_len = 0;
10008a5e:	87cb      	strh	r3, [r1, #62]	; 0x3e
    service->serv_chars.user_desc_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // user description permissions
10008a60:	3033      	adds	r0, #51	; 0x33
10008a62:	540a      	strb	r2, [r1, r0]
    service->serv_chars.client_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // client config permissions
10008a64:	3001      	adds	r0, #1
10008a66:	540a      	strb	r2, [r1, r0]
    service->serv_chars.server_config_permissions = AT_BLE_ATTR_NO_PERMISSIONS; // server config permissions
10008a68:	3001      	adds	r0, #1
10008a6a:	540a      	strb	r2, [r1, r0]
    service->serv_chars.user_desc_handle = 0; // user description handles
10008a6c:	2248      	movs	r2, #72	; 0x48
10008a6e:	528b      	strh	r3, [r1, r2]
    service->serv_chars.client_config_handle = 0; // client config handles
10008a70:	3202      	adds	r2, #2
10008a72:	528b      	strh	r3, [r1, r2]
    service->serv_chars.server_config_handle = 0; // server config handles
10008a74:	3202      	adds	r2, #2
10008a76:	528b      	strh	r3, [r1, r2]
    
    service->serv_chars.presentation_format = NULL; //presentation format
10008a78:	640b      	str	r3, [r1, #64]	; 0x40
10008a7a:	b003      	add	sp, #12
10008a7c:	bc0c      	pop	{r2, r3}
10008a7e:	4690      	mov	r8, r2
10008a80:	4699      	mov	r9, r3
10008a82:	bdf0      	pop	{r4, r5, r6, r7, pc}

10008a84 <sms_button_bt0_callback>:
        gpio_disable_callback(button_instance.btn1.gpio_pin);
    }
}
/* Callbacks --> sending interrupt message to platform */
void sms_button_bt0_callback(void)
{
10008a84:	b510      	push	{r4, lr}
    button_instance.btn0.new_int = true;
10008a86:	4b05      	ldr	r3, [pc, #20]	; (10008a9c <sms_button_bt0_callback+0x18>)
10008a88:	2201      	movs	r2, #1
10008a8a:	70da      	strb	r2, [r3, #3]
    send_plf_int_msg_ind(button_instance.btn0.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008a8c:	7858      	ldrb	r0, [r3, #1]
10008a8e:	2300      	movs	r3, #0
10008a90:	2200      	movs	r2, #0
10008a92:	2102      	movs	r1, #2
10008a94:	4c02      	ldr	r4, [pc, #8]	; (10008aa0 <sms_button_bt0_callback+0x1c>)
10008a96:	47a0      	blx	r4
}
10008a98:	bd10      	pop	{r4, pc}
10008a9a:	46c0      	nop			; (mov r8, r8)
10008a9c:	1001951c 	.word	0x1001951c
10008aa0:	1000d951 	.word	0x1000d951

10008aa4 <sms_button_bt1_callback>:
void sms_button_bt1_callback(void)
{
10008aa4:	b510      	push	{r4, lr}
	button_instance.btn1.new_int = true;
10008aa6:	4b05      	ldr	r3, [pc, #20]	; (10008abc <sms_button_bt1_callback+0x18>)
10008aa8:	2201      	movs	r2, #1
10008aaa:	725a      	strb	r2, [r3, #9]
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
10008aac:	79d8      	ldrb	r0, [r3, #7]
10008aae:	2300      	movs	r3, #0
10008ab0:	2200      	movs	r2, #0
10008ab2:	2102      	movs	r1, #2
10008ab4:	4c02      	ldr	r4, [pc, #8]	; (10008ac0 <sms_button_bt1_callback+0x1c>)
10008ab6:	47a0      	blx	r4
}
10008ab8:	bd10      	pop	{r4, pc}
10008aba:	46c0      	nop			; (mov r8, r8)
10008abc:	1001951c 	.word	0x1001951c
10008ac0:	1000d951 	.word	0x1000d951

10008ac4 <sms_button_init_variables>:
}

/* Initialize all button-related variables */
void sms_button_init_variables(void)
{
	button_instance.current_state = BUTTON_STATE_NONE;
10008ac4:	4b08      	ldr	r3, [pc, #32]	; (10008ae8 <sms_button_init_variables+0x24>)
10008ac6:	2200      	movs	r2, #0
10008ac8:	735a      	strb	r2, [r3, #13]
	button_instance.btn0.id = SMS_BTN_0;
10008aca:	701a      	strb	r2, [r3, #0]
	button_instance.btn0.gpio_pin = SMS_BTN_0_PIN;
10008acc:	211f      	movs	r1, #31
10008ace:	7059      	strb	r1, [r3, #1]
	button_instance.btn0.int_enabled = true;
10008ad0:	391e      	subs	r1, #30
10008ad2:	7099      	strb	r1, [r3, #2]
	button_instance.btn0.new_int = false;
10008ad4:	70da      	strb	r2, [r3, #3]
	button_instance.btn0.char_value = 0;
10008ad6:	715a      	strb	r2, [r3, #5]
	button_instance.btn1.id = SMS_BTN_1;
10008ad8:	7199      	strb	r1, [r3, #6]
	button_instance.btn1.gpio_pin = SMS_BTN_1_PIN;
10008ada:	201d      	movs	r0, #29
10008adc:	71d8      	strb	r0, [r3, #7]
	button_instance.btn1.int_enabled = true;
10008ade:	7219      	strb	r1, [r3, #8]
	button_instance.btn1.new_int = false;
10008ae0:	725a      	strb	r2, [r3, #9]
	button_instance.btn1.char_value = 0;
10008ae2:	72da      	strb	r2, [r3, #11]
}
10008ae4:	4770      	bx	lr
10008ae6:	46c0      	nop			; (mov r8, r8)
10008ae8:	1001951c 	.word	0x1001951c

10008aec <sms_button_gpio_init>:

/* Initialize gpio for button inputs */
void sms_button_gpio_init(void)
{
10008aec:	b5f0      	push	{r4, r5, r6, r7, lr}
10008aee:	4657      	mov	r7, sl
10008af0:	464e      	mov	r6, r9
10008af2:	4645      	mov	r5, r8
10008af4:	b4e0      	push	{r5, r6, r7}
10008af6:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Button0 @ PIN_AO_GPIO_0 */
    gpio_get_config_defaults(&config_gpio_pin);
10008af8:	ac01      	add	r4, sp, #4
10008afa:	0020      	movs	r0, r4
10008afc:	4b1d      	ldr	r3, [pc, #116]	; (10008b74 <sms_button_gpio_init+0x88>)
10008afe:	469a      	mov	sl, r3
10008b00:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b02:	2300      	movs	r3, #0
10008b04:	4699      	mov	r9, r3
10008b06:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b08:	2302      	movs	r3, #2
10008b0a:	4698      	mov	r8, r3
10008b0c:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b0e:	2701      	movs	r7, #1
10008b10:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn0.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b12:	4e19      	ldr	r6, [pc, #100]	; (10008b78 <sms_button_gpio_init+0x8c>)
10008b14:	7870      	ldrb	r0, [r6, #1]
10008b16:	0021      	movs	r1, r4
10008b18:	4d18      	ldr	r5, [pc, #96]	; (10008b7c <sms_button_gpio_init+0x90>)
10008b1a:	47a8      	blx	r5
        DBG_LOG_DEV("[sms_button_configure]\tproblem while setting up button0");
    }
    
    /* Button1 @ PIN_AO_GPIO_2 */
    gpio_get_config_defaults(&config_gpio_pin);
10008b1c:	0020      	movs	r0, r4
10008b1e:	47d0      	blx	sl
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b20:	464b      	mov	r3, r9
10008b22:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
10008b24:	4643      	mov	r3, r8
10008b26:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10008b28:	70e7      	strb	r7, [r4, #3]
    if(gpio_pin_set_config(button_instance.btn1.gpio_pin, &config_gpio_pin) != STATUS_OK) {
10008b2a:	79f0      	ldrb	r0, [r6, #7]
10008b2c:	0021      	movs	r1, r4
10008b2e:	47a8      	blx	r5
10008b30:	2800      	cmp	r0, #0
10008b32:	d005      	beq.n	10008b40 <sms_button_gpio_init+0x54>
        DBG_LOG("[sms_button_configure]\tProblem while setting up button1");
10008b34:	4812      	ldr	r0, [pc, #72]	; (10008b80 <sms_button_gpio_init+0x94>)
10008b36:	4b13      	ldr	r3, [pc, #76]	; (10008b84 <sms_button_gpio_init+0x98>)
10008b38:	4798      	blx	r3
10008b3a:	4813      	ldr	r0, [pc, #76]	; (10008b88 <sms_button_gpio_init+0x9c>)
10008b3c:	4b13      	ldr	r3, [pc, #76]	; (10008b8c <sms_button_gpio_init+0xa0>)
10008b3e:	4798      	blx	r3
    }

    /* Button 0 on SAMB11 XPLAINED */
    gpio_get_config_defaults(&config_gpio_pin);
10008b40:	ac01      	add	r4, sp, #4
10008b42:	0020      	movs	r0, r4
10008b44:	4b0b      	ldr	r3, [pc, #44]	; (10008b74 <sms_button_gpio_init+0x88>)
10008b46:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10008b48:	2300      	movs	r3, #0
10008b4a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_NONE;
10008b4c:	7063      	strb	r3, [r4, #1]
    if(gpio_pin_set_config(BUTTON_0_PIN, &config_gpio_pin) != STATUS_OK) {
10008b4e:	0021      	movs	r1, r4
10008b50:	2017      	movs	r0, #23
10008b52:	4b0a      	ldr	r3, [pc, #40]	; (10008b7c <sms_button_gpio_init+0x90>)
10008b54:	4798      	blx	r3
10008b56:	2800      	cmp	r0, #0
10008b58:	d005      	beq.n	10008b66 <sms_button_gpio_init+0x7a>
        DBG_LOG("[sms_button_configure]\tProblem while setting up XPLAINED user button");
10008b5a:	4809      	ldr	r0, [pc, #36]	; (10008b80 <sms_button_gpio_init+0x94>)
10008b5c:	4b09      	ldr	r3, [pc, #36]	; (10008b84 <sms_button_gpio_init+0x98>)
10008b5e:	4798      	blx	r3
10008b60:	480b      	ldr	r0, [pc, #44]	; (10008b90 <sms_button_gpio_init+0xa4>)
10008b62:	4b0a      	ldr	r3, [pc, #40]	; (10008b8c <sms_button_gpio_init+0xa0>)
10008b64:	4798      	blx	r3
    }
}
10008b66:	b002      	add	sp, #8
10008b68:	bc1c      	pop	{r2, r3, r4}
10008b6a:	4690      	mov	r8, r2
10008b6c:	4699      	mov	r9, r3
10008b6e:	46a2      	mov	sl, r4
10008b70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008b72:	46c0      	nop			; (mov r8, r8)
10008b74:	1000aa25 	.word	0x1000aa25
10008b78:	1001951c 	.word	0x1001951c
10008b7c:	1000aa35 	.word	0x1000aa35
10008b80:	1001677c 	.word	0x1001677c
10008b84:	10015835 	.word	0x10015835
10008b88:	100168e4 	.word	0x100168e4
10008b8c:	10015715 	.word	0x10015715
10008b90:	1001691c 	.word	0x1001691c

10008b94 <sms_button_register_callbacks>:

/* Register button input callbacks */
void sms_button_register_callbacks(void)
{
10008b94:	b570      	push	{r4, r5, r6, lr}
    /* Button0 callback */
    gpio_register_callback(button_instance.btn0.gpio_pin, sms_button_bt0_callback, GPIO_CALLBACK_RISING);
10008b96:	4d05      	ldr	r5, [pc, #20]	; (10008bac <sms_button_register_callbacks+0x18>)
10008b98:	7868      	ldrb	r0, [r5, #1]
10008b9a:	2202      	movs	r2, #2
10008b9c:	4904      	ldr	r1, [pc, #16]	; (10008bb0 <sms_button_register_callbacks+0x1c>)
10008b9e:	4c05      	ldr	r4, [pc, #20]	; (10008bb4 <sms_button_register_callbacks+0x20>)
10008ba0:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_0_PIN);
    
    /* Button1 callback */
    gpio_register_callback(button_instance.btn1.gpio_pin, sms_button_bt1_callback, GPIO_CALLBACK_RISING);
10008ba2:	79e8      	ldrb	r0, [r5, #7]
10008ba4:	2202      	movs	r2, #2
10008ba6:	4904      	ldr	r1, [pc, #16]	; (10008bb8 <sms_button_register_callbacks+0x24>)
10008ba8:	47a0      	blx	r4
    //gpio_enable_callback(SMS_BTN_1_PIN);
    
    /* User button callback */
}
10008baa:	bd70      	pop	{r4, r5, r6, pc}
10008bac:	1001951c 	.word	0x1001951c
10008bb0:	10008a85 	.word	0x10008a85
10008bb4:	1000ae65 	.word	0x1000ae65
10008bb8:	10008aa5 	.word	0x10008aa5

10008bbc <sms_button_get_state>:

/* Get current buttons state */
enum sms_button_state sms_button_get_state(void)
{
10008bbc:	b570      	push	{r4, r5, r6, lr}
    bool b0 = gpio_pin_get_input_level(SMS_BTN_0_PIN);
10008bbe:	201f      	movs	r0, #31
10008bc0:	4c08      	ldr	r4, [pc, #32]	; (10008be4 <sms_button_get_state+0x28>)
10008bc2:	47a0      	blx	r4
10008bc4:	0005      	movs	r5, r0
    bool b1 = gpio_pin_get_input_level(SMS_BTN_1_PIN);
10008bc6:	201d      	movs	r0, #29
10008bc8:	47a0      	blx	r4
    DBG_LOG_DEV("[sms_button_get_state]\t\tButton state: %d %d", b1, b0);
    if(b0 && b1) return BUTTON_STATE_BOTH;
10008bca:	2d00      	cmp	r5, #0
10008bcc:	d004      	beq.n	10008bd8 <sms_button_get_state+0x1c>
10008bce:	2303      	movs	r3, #3
10008bd0:	2800      	cmp	r0, #0
10008bd2:	d104      	bne.n	10008bde <sms_button_get_state+0x22>
    else if(b0 && !b1) return BUTTON_STATE_B0;
10008bd4:	3b02      	subs	r3, #2
10008bd6:	e002      	b.n	10008bde <sms_button_get_state+0x22>
    else if(!b0 && b1) return BUTTON_STATE_B1;
    else return BUTTON_STATE_NONE;
10008bd8:	1e43      	subs	r3, r0, #1
10008bda:	4198      	sbcs	r0, r3
10008bdc:	0043      	lsls	r3, r0, #1
}
10008bde:	0018      	movs	r0, r3
10008be0:	bd70      	pop	{r4, r5, r6, pc}
10008be2:	46c0      	nop			; (mov r8, r8)
10008be4:	1000abed 	.word	0x1000abed

10008be8 <sms_button_fn>:

/************************************************************************/
/* Callback functions --> doing things                                  */
/************************************************************************/
int sms_button_fn(enum sms_btn_ids btn)
{
10008be8:	b570      	push	{r4, r5, r6, lr}
10008bea:	0005      	movs	r5, r0
    button_instance.previous_state = button_instance.current_state;
10008bec:	4c47      	ldr	r4, [pc, #284]	; (10008d0c <sms_button_fn+0x124>)
10008bee:	7b63      	ldrb	r3, [r4, #13]
10008bf0:	7323      	strb	r3, [r4, #12]
    button_instance.current_state = sms_button_get_state();
10008bf2:	4b47      	ldr	r3, [pc, #284]	; (10008d10 <sms_button_fn+0x128>)
10008bf4:	4798      	blx	r3
10008bf6:	7360      	strb	r0, [r4, #13]
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
10008bf8:	2d00      	cmp	r5, #0
10008bfa:	d103      	bne.n	10008c04 <sms_button_fn+0x1c>
10008bfc:	4845      	ldr	r0, [pc, #276]	; (10008d14 <sms_button_fn+0x12c>)
10008bfe:	4b46      	ldr	r3, [pc, #280]	; (10008d18 <sms_button_fn+0x130>)
10008c00:	4798      	blx	r3
10008c02:	e004      	b.n	10008c0e <sms_button_fn+0x26>
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
10008c04:	2d01      	cmp	r5, #1
10008c06:	d175      	bne.n	10008cf4 <sms_button_fn+0x10c>
10008c08:	4844      	ldr	r0, [pc, #272]	; (10008d1c <sms_button_fn+0x134>)
10008c0a:	4b43      	ldr	r3, [pc, #268]	; (10008d18 <sms_button_fn+0x130>)
10008c0c:	4798      	blx	r3
    else return -1;
    
    switch(button_instance.current_state) {
10008c0e:	4b3f      	ldr	r3, [pc, #252]	; (10008d0c <sms_button_fn+0x124>)
10008c10:	7b5b      	ldrb	r3, [r3, #13]
10008c12:	2b01      	cmp	r3, #1
10008c14:	d006      	beq.n	10008c24 <sms_button_fn+0x3c>
10008c16:	2b00      	cmp	r3, #0
10008c18:	d067      	beq.n	10008cea <sms_button_fn+0x102>
10008c1a:	2b02      	cmp	r3, #2
10008c1c:	d024      	beq.n	10008c68 <sms_button_fn+0x80>
10008c1e:	2b03      	cmp	r3, #3
10008c20:	d043      	beq.n	10008caa <sms_button_fn+0xc2>
10008c22:	e06a      	b.n	10008cfa <sms_button_fn+0x112>
        // --- current state ---
        case BUTTON_STATE_B0:
        switch(ble_instance.current_state) {
10008c24:	4b3e      	ldr	r3, [pc, #248]	; (10008d20 <sms_button_fn+0x138>)
10008c26:	781b      	ldrb	r3, [r3, #0]
10008c28:	b2db      	uxtb	r3, r3
10008c2a:	2b00      	cmp	r3, #0
10008c2c:	d003      	beq.n	10008c36 <sms_button_fn+0x4e>
10008c2e:	3b22      	subs	r3, #34	; 0x22
10008c30:	2b01      	cmp	r3, #1
10008c32:	d864      	bhi.n	10008cfe <sms_button_fn+0x116>
10008c34:	e00e      	b.n	10008c54 <sms_button_fn+0x6c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10008c36:	2201      	movs	r2, #1
10008c38:	4b3a      	ldr	r3, [pc, #232]	; (10008d24 <sms_button_fn+0x13c>)
10008c3a:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008c3c:	2300      	movs	r3, #0
10008c3e:	4a3a      	ldr	r2, [pc, #232]	; (10008d28 <sms_button_fn+0x140>)
10008c40:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008c42:	4a3a      	ldr	r2, [pc, #232]	; (10008d2c <sms_button_fn+0x144>)
10008c44:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10008c46:	2200      	movs	r2, #0
10008c48:	21fa      	movs	r1, #250	; 0xfa
10008c4a:	2001      	movs	r0, #1
10008c4c:	4b38      	ldr	r3, [pc, #224]	; (10008d30 <sms_button_fn+0x148>)
10008c4e:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c50:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
10008c52:	e059      	b.n	10008d08 <sms_button_fn+0x120>
            case BLE_STATE_INDICATING:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B0)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
10008c54:	2300      	movs	r3, #0
10008c56:	4a33      	ldr	r2, [pc, #204]	; (10008d24 <sms_button_fn+0x13c>)
10008c58:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008c5a:	4a33      	ldr	r2, [pc, #204]	; (10008d28 <sms_button_fn+0x140>)
10008c5c:	7013      	strb	r3, [r2, #0]
			sms_ble_send_characteristic(BLE_CHAR_BTN);
10008c5e:	2000      	movs	r0, #0
10008c60:	4b34      	ldr	r3, [pc, #208]	; (10008d34 <sms_button_fn+0x14c>)
10008c62:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c64:	2000      	movs	r0, #0
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
			sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008c66:	e04f      	b.n	10008d08 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_B1:
        switch(ble_instance.current_state) {
10008c68:	4b2d      	ldr	r3, [pc, #180]	; (10008d20 <sms_button_fn+0x138>)
10008c6a:	781b      	ldrb	r3, [r3, #0]
10008c6c:	b2db      	uxtb	r3, r3
10008c6e:	2b00      	cmp	r3, #0
10008c70:	d002      	beq.n	10008c78 <sms_button_fn+0x90>
10008c72:	2b22      	cmp	r3, #34	; 0x22
10008c74:	d00f      	beq.n	10008c96 <sms_button_fn+0xae>
10008c76:	e045      	b.n	10008d04 <sms_button_fn+0x11c>
            case BLE_STATE_POWEROFF:
            timer1_current_mode = TIMER1_MODE_STARTUP;
10008c78:	2201      	movs	r2, #1
10008c7a:	4b2a      	ldr	r3, [pc, #168]	; (10008d24 <sms_button_fn+0x13c>)
10008c7c:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008c7e:	2300      	movs	r3, #0
10008c80:	4a29      	ldr	r2, [pc, #164]	; (10008d28 <sms_button_fn+0x140>)
10008c82:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008c84:	4a29      	ldr	r2, [pc, #164]	; (10008d2c <sms_button_fn+0x144>)
10008c86:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
10008c88:	2200      	movs	r2, #0
10008c8a:	21fa      	movs	r1, #250	; 0xfa
10008c8c:	2001      	movs	r0, #1
10008c8e:	4b28      	ldr	r3, [pc, #160]	; (10008d30 <sms_button_fn+0x148>)
10008c90:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008c92:	2000      	movs	r0, #0
            timer1_current_mode = TIMER1_MODE_STARTUP;
            timer2_current_mode = TIMER2_MODE_NONE;
            sms_btn_cnt = 0;
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
            break;
10008c94:	e038      	b.n	10008d08 <sms_button_fn+0x120>
            case BLE_STATE_PAIRED:
            //if(pressure_device.state == PRESSURE_STATE_STDBY) {
                //DBG_LOG_DEV("[sms_button_fn]\t\tStarting sensors (B1)");
                //sms_sensors_interrupt_toggle(false, true);
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
10008c96:	2300      	movs	r3, #0
10008c98:	4a22      	ldr	r2, [pc, #136]	; (10008d24 <sms_button_fn+0x13c>)
10008c9a:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008c9c:	4a22      	ldr	r2, [pc, #136]	; (10008d28 <sms_button_fn+0x140>)
10008c9e:	7013      	strb	r3, [r2, #0]
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
10008ca0:	2000      	movs	r0, #0
10008ca2:	4b24      	ldr	r3, [pc, #144]	; (10008d34 <sms_button_fn+0x14c>)
10008ca4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008ca6:	2000      	movs	r0, #0
            //}
            timer1_current_mode = TIMER1_MODE_NONE;
            timer2_current_mode = TIMER2_MODE_NONE;
            //sms_ble_ind_retry = 0;
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
10008ca8:	e02e      	b.n	10008d08 <sms_button_fn+0x120>
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        break;
        
        // --- current state ---
        case BUTTON_STATE_BOTH:
        if(ble_instance.current_state == BLE_STATE_POWEROFF) {
10008caa:	4b1d      	ldr	r3, [pc, #116]	; (10008d20 <sms_button_fn+0x138>)
10008cac:	781b      	ldrb	r3, [r3, #0]
10008cae:	2b00      	cmp	r3, #0
10008cb0:	d108      	bne.n	10008cc4 <sms_button_fn+0xdc>
            timer1_current_mode = TIMER1_MODE_NONE;
10008cb2:	4a1c      	ldr	r2, [pc, #112]	; (10008d24 <sms_button_fn+0x13c>)
10008cb4:	7013      	strb	r3, [r2, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008cb6:	4a1c      	ldr	r2, [pc, #112]	; (10008d28 <sms_button_fn+0x140>)
10008cb8:	7013      	strb	r3, [r2, #0]
            ulp_ready = true;
10008cba:	2201      	movs	r2, #1
10008cbc:	4b1e      	ldr	r3, [pc, #120]	; (10008d38 <sms_button_fn+0x150>)
10008cbe:	701a      	strb	r2, [r3, #0]
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cc0:	2000      	movs	r0, #0
10008cc2:	e021      	b.n	10008d08 <sms_button_fn+0x120>
                //pressure_device.state = PRESSURE_STATE_STDBY;
            //}
            //else {
                //pressure_device.state = PRESSURE_STATE_OFF;
            //}
            sms_sensors_interrupt_toggle(false, false);
10008cc4:	2100      	movs	r1, #0
10008cc6:	2000      	movs	r0, #0
10008cc8:	4b1c      	ldr	r3, [pc, #112]	; (10008d3c <sms_button_fn+0x154>)
10008cca:	4798      	blx	r3
            timer1_current_mode = TIMER1_MODE_SHUTDOWN;
10008ccc:	2202      	movs	r2, #2
10008cce:	4b15      	ldr	r3, [pc, #84]	; (10008d24 <sms_button_fn+0x13c>)
10008cd0:	701a      	strb	r2, [r3, #0]
            timer2_current_mode = TIMER2_MODE_NONE;
10008cd2:	2300      	movs	r3, #0
10008cd4:	4a14      	ldr	r2, [pc, #80]	; (10008d28 <sms_button_fn+0x140>)
10008cd6:	7013      	strb	r3, [r2, #0]
            sms_btn_cnt = 0;
10008cd8:	4a14      	ldr	r2, [pc, #80]	; (10008d2c <sms_button_fn+0x144>)
10008cda:	7013      	strb	r3, [r2, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
10008cdc:	2200      	movs	r2, #0
10008cde:	21fa      	movs	r1, #250	; 0xfa
10008ce0:	2001      	movs	r0, #1
10008ce2:	4b13      	ldr	r3, [pc, #76]	; (10008d30 <sms_button_fn+0x148>)
10008ce4:	4798      	blx	r3
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008ce6:	2000      	movs	r0, #0
10008ce8:	e00e      	b.n	10008d08 <sms_button_fn+0x120>
        }
        break;
        
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
10008cea:	2201      	movs	r2, #1
10008cec:	4b12      	ldr	r3, [pc, #72]	; (10008d38 <sms_button_fn+0x150>)
10008cee:	701a      	strb	r2, [r3, #0]
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cf0:	2000      	movs	r0, #0
        // --- current state ---
        case BUTTON_STATE_NONE:
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
10008cf2:	e009      	b.n	10008d08 <sms_button_fn+0x120>
    button_instance.previous_state = button_instance.current_state;
    button_instance.current_state = sms_button_get_state();
    
    if(btn == SMS_BTN_0) sms_monitor_get_states("[sms_button_fn]-0");
    else if(btn == SMS_BTN_1) sms_monitor_get_states("[sms_button_fn]-1");
    else return -1;
10008cf4:	2001      	movs	r0, #1
10008cf6:	4240      	negs	r0, r0
10008cf8:	e006      	b.n	10008d08 <sms_button_fn+0x120>
        ulp_ready = true;
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
10008cfa:	2000      	movs	r0, #0
10008cfc:	e004      	b.n	10008d08 <sms_button_fn+0x120>
            case BLE_STATE_DISCONNECTED:
            case BLE_STATE_ADVERTISING:
            case BLE_STATE_CONNECTED:
            default:
            DBG_LOG_DEV("[sms_button_fn]\t\t\tNot used states...");
            return -1;
10008cfe:	2001      	movs	r0, #1
10008d00:	4240      	negs	r0, r0
10008d02:	e001      	b.n	10008d08 <sms_button_fn+0x120>
            sms_ble_send_characteristic(BLE_CHAR_BTN);
            break;
            
            case BLE_STATE_INDICATING:
            DBG_LOG_DEV("[sms_button_fn]\tStill indicating...");
            return -1;
10008d04:	2001      	movs	r0, #1
10008d06:	4240      	negs	r0, r0
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
        //if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
        break;
    }
    return 0;
}
10008d08:	bd70      	pop	{r4, r5, r6, pc}
10008d0a:	46c0      	nop			; (mov r8, r8)
10008d0c:	1001951c 	.word	0x1001951c
10008d10:	10008bbd 	.word	0x10008bbd
10008d14:	10016964 	.word	0x10016964
10008d18:	10008e55 	.word	0x10008e55
10008d1c:	10016978 	.word	0x10016978
10008d20:	10019500 	.word	0x10019500
10008d24:	10019430 	.word	0x10019430
10008d28:	1001963f 	.word	0x1001963f
10008d2c:	10019686 	.word	0x10019686
10008d30:	10009fc1 	.word	0x10009fc1
10008d34:	100087a1 	.word	0x100087a1
10008d38:	100194fd 	.word	0x100194fd
10008d3c:	10009d59 	.word	0x10009d59

10008d40 <sms_button_toggle_callback>:
    else return BUTTON_STATE_NONE;
}

/* En- or disable button interrupts */
void sms_button_toggle_callback(enum sms_btn_int_tog tog0, enum sms_btn_int_tog tog1)
{
10008d40:	b510      	push	{r4, lr}
10008d42:	000c      	movs	r4, r1
    if(tog0 == SMS_BTN_INT_ENABLE) {
10008d44:	2800      	cmp	r0, #0
10008d46:	d104      	bne.n	10008d52 <sms_button_toggle_callback+0x12>
        gpio_enable_callback(button_instance.btn0.gpio_pin);
10008d48:	4b0c      	ldr	r3, [pc, #48]	; (10008d7c <sms_button_toggle_callback+0x3c>)
10008d4a:	7858      	ldrb	r0, [r3, #1]
10008d4c:	4b0c      	ldr	r3, [pc, #48]	; (10008d80 <sms_button_toggle_callback+0x40>)
10008d4e:	4798      	blx	r3
10008d50:	e005      	b.n	10008d5e <sms_button_toggle_callback+0x1e>
    }
    else if(tog0 == SMS_BTN_INT_DISABLE) {
10008d52:	2801      	cmp	r0, #1
10008d54:	d103      	bne.n	10008d5e <sms_button_toggle_callback+0x1e>
        gpio_disable_callback(button_instance.btn0.gpio_pin);
10008d56:	4b09      	ldr	r3, [pc, #36]	; (10008d7c <sms_button_toggle_callback+0x3c>)
10008d58:	7858      	ldrb	r0, [r3, #1]
10008d5a:	4b0a      	ldr	r3, [pc, #40]	; (10008d84 <sms_button_toggle_callback+0x44>)
10008d5c:	4798      	blx	r3
    }
    
    if(tog1 == SMS_BTN_INT_ENABLE) {
10008d5e:	2c00      	cmp	r4, #0
10008d60:	d104      	bne.n	10008d6c <sms_button_toggle_callback+0x2c>
        gpio_enable_callback(button_instance.btn1.gpio_pin);
10008d62:	4b06      	ldr	r3, [pc, #24]	; (10008d7c <sms_button_toggle_callback+0x3c>)
10008d64:	79d8      	ldrb	r0, [r3, #7]
10008d66:	4b06      	ldr	r3, [pc, #24]	; (10008d80 <sms_button_toggle_callback+0x40>)
10008d68:	4798      	blx	r3
10008d6a:	e005      	b.n	10008d78 <sms_button_toggle_callback+0x38>
    }
    else if(tog1 == SMS_BTN_INT_DISABLE) {
10008d6c:	2c01      	cmp	r4, #1
10008d6e:	d103      	bne.n	10008d78 <sms_button_toggle_callback+0x38>
        gpio_disable_callback(button_instance.btn1.gpio_pin);
10008d70:	4b02      	ldr	r3, [pc, #8]	; (10008d7c <sms_button_toggle_callback+0x3c>)
10008d72:	79d8      	ldrb	r0, [r3, #7]
10008d74:	4b03      	ldr	r3, [pc, #12]	; (10008d84 <sms_button_toggle_callback+0x44>)
10008d76:	4798      	blx	r3
    }
}
10008d78:	bd10      	pop	{r4, pc}
10008d7a:	46c0      	nop			; (mov r8, r8)
10008d7c:	1001951c 	.word	0x1001951c
10008d80:	1000af35 	.word	0x1000af35
10008d84:	1000af91 	.word	0x1000af91

10008d88 <sms_button_define_services>:
    send_plf_int_msg_ind(button_instance.btn1.gpio_pin, GPIO_CALLBACK_RISING, NULL, 0);
}

/* Define BLE service for buttons */
void sms_button_define_services(void)
{
10008d88:	b510      	push	{r4, lr}
10008d8a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10008d8c:	466b      	mov	r3, sp
10008d8e:	1dda      	adds	r2, r3, #7
10008d90:	2300      	movs	r3, #0
10008d92:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_BUTTON, &button_instance.service_handler, &init_value);
10008d94:	4c09      	ldr	r4, [pc, #36]	; (10008dbc <sms_button_define_services+0x34>)
10008d96:	0021      	movs	r1, r4
10008d98:	2000      	movs	r0, #0
10008d9a:	4b09      	ldr	r3, [pc, #36]	; (10008dc0 <sms_button_define_services+0x38>)
10008d9c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&button_instance.service_handler)) != AT_BLE_SUCCESS) {
10008d9e:	0020      	movs	r0, r4
10008da0:	4b08      	ldr	r3, [pc, #32]	; (10008dc4 <sms_button_define_services+0x3c>)
10008da2:	4798      	blx	r3
10008da4:	1e04      	subs	r4, r0, #0
10008da6:	d006      	beq.n	10008db6 <sms_button_define_services+0x2e>
        DBG_LOG("[sms_button_define_services]\tServices defining failed, reason 0x%x", status);
10008da8:	4807      	ldr	r0, [pc, #28]	; (10008dc8 <sms_button_define_services+0x40>)
10008daa:	4b08      	ldr	r3, [pc, #32]	; (10008dcc <sms_button_define_services+0x44>)
10008dac:	4798      	blx	r3
10008dae:	0021      	movs	r1, r4
10008db0:	4807      	ldr	r0, [pc, #28]	; (10008dd0 <sms_button_define_services+0x48>)
10008db2:	4b08      	ldr	r3, [pc, #32]	; (10008dd4 <sms_button_define_services+0x4c>)
10008db4:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_button_define_services]\tServices defined, SMS button handle: %d", button_instance.service_handler.serv_handle);
    }
10008db6:	b002      	add	sp, #8
10008db8:	bd10      	pop	{r4, pc}
10008dba:	46c0      	nop			; (mov r8, r8)
10008dbc:	1001952c 	.word	0x1001952c
10008dc0:	1000899d 	.word	0x1000899d
10008dc4:	10008979 	.word	0x10008979
10008dc8:	1001677c 	.word	0x1001677c
10008dcc:	10015835 	.word	0x10015835
10008dd0:	1001698c 	.word	0x1001698c
10008dd4:	10015715 	.word	0x10015715

10008dd8 <sms_monitor_configure_gpio>:

#include "sms_common.h"

/* General functions */
void sms_monitor_configure_gpio(void)
{
10008dd8:	b510      	push	{r4, lr}
10008dda:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;
    gpio_get_config_defaults(&config_gpio_pin);
10008ddc:	ac01      	add	r4, sp, #4
10008dde:	0020      	movs	r0, r4
10008de0:	4b15      	ldr	r3, [pc, #84]	; (10008e38 <sms_monitor_configure_gpio+0x60>)
10008de2:	4798      	blx	r3
    config_gpio_pin.direction  = GPIO_PIN_DIR_OUTPUT;
10008de4:	2301      	movs	r3, #1
10008de6:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(DBG_PIN_1, &config_gpio_pin) != STATUS_OK) {
10008de8:	0021      	movs	r1, r4
10008dea:	200e      	movs	r0, #14
10008dec:	4b13      	ldr	r3, [pc, #76]	; (10008e3c <sms_monitor_configure_gpio+0x64>)
10008dee:	4798      	blx	r3
10008df0:	2800      	cmp	r0, #0
10008df2:	d005      	beq.n	10008e00 <sms_monitor_configure_gpio+0x28>
        DBG_LOG("Problem while setting gpio pin");
10008df4:	4812      	ldr	r0, [pc, #72]	; (10008e40 <sms_monitor_configure_gpio+0x68>)
10008df6:	4b13      	ldr	r3, [pc, #76]	; (10008e44 <sms_monitor_configure_gpio+0x6c>)
10008df8:	4798      	blx	r3
10008dfa:	4813      	ldr	r0, [pc, #76]	; (10008e48 <sms_monitor_configure_gpio+0x70>)
10008dfc:	4b13      	ldr	r3, [pc, #76]	; (10008e4c <sms_monitor_configure_gpio+0x74>)
10008dfe:	4798      	blx	r3
    }
    gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
10008e00:	2100      	movs	r1, #0
10008e02:	200e      	movs	r0, #14
10008e04:	4b12      	ldr	r3, [pc, #72]	; (10008e50 <sms_monitor_configure_gpio+0x78>)
10008e06:	4798      	blx	r3
	
	gpio_get_config_defaults(&config_gpio_pin);
10008e08:	ac01      	add	r4, sp, #4
10008e0a:	0020      	movs	r0, r4
10008e0c:	4b0a      	ldr	r3, [pc, #40]	; (10008e38 <sms_monitor_configure_gpio+0x60>)
10008e0e:	4798      	blx	r3
	config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10008e10:	2301      	movs	r3, #1
10008e12:	7023      	strb	r3, [r4, #0]
	if(gpio_pin_set_config(DBG_PIN_2, &config_gpio_pin) != STATUS_OK) {
10008e14:	0021      	movs	r1, r4
10008e16:	200f      	movs	r0, #15
10008e18:	4b08      	ldr	r3, [pc, #32]	; (10008e3c <sms_monitor_configure_gpio+0x64>)
10008e1a:	4798      	blx	r3
10008e1c:	2800      	cmp	r0, #0
10008e1e:	d005      	beq.n	10008e2c <sms_monitor_configure_gpio+0x54>
		DBG_LOG("Problem while setting gpio pin");
10008e20:	4807      	ldr	r0, [pc, #28]	; (10008e40 <sms_monitor_configure_gpio+0x68>)
10008e22:	4b08      	ldr	r3, [pc, #32]	; (10008e44 <sms_monitor_configure_gpio+0x6c>)
10008e24:	4798      	blx	r3
10008e26:	4808      	ldr	r0, [pc, #32]	; (10008e48 <sms_monitor_configure_gpio+0x70>)
10008e28:	4b08      	ldr	r3, [pc, #32]	; (10008e4c <sms_monitor_configure_gpio+0x74>)
10008e2a:	4798      	blx	r3
	}
	gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
10008e2c:	2100      	movs	r1, #0
10008e2e:	200f      	movs	r0, #15
10008e30:	4b07      	ldr	r3, [pc, #28]	; (10008e50 <sms_monitor_configure_gpio+0x78>)
10008e32:	4798      	blx	r3
}
10008e34:	b002      	add	sp, #8
10008e36:	bd10      	pop	{r4, pc}
10008e38:	1000aa25 	.word	0x1000aa25
10008e3c:	1000aa35 	.word	0x1000aa35
10008e40:	1001677c 	.word	0x1001677c
10008e44:	10015835 	.word	0x10015835
10008e48:	100169d0 	.word	0x100169d0
10008e4c:	10015715 	.word	0x10015715
10008e50:	1000ac8d 	.word	0x1000ac8d

10008e54 <sms_monitor_get_states>:

void sms_monitor_get_states(const char *label)
{
    DBG_LOG_DEV("%s...\t\tB-prev %d, B-cur %d, BLE 0x%02x, T1 %d, T2 %d, SMS %d", label, button_instance.previous_state, button_instance.current_state, ble_instance.current_state, timer1_current_mode, timer2_current_mode, sms_working_mode);
10008e54:	4b04      	ldr	r3, [pc, #16]	; (10008e68 <sms_monitor_get_states+0x14>)
10008e56:	781b      	ldrb	r3, [r3, #0]
10008e58:	4b04      	ldr	r3, [pc, #16]	; (10008e6c <sms_monitor_get_states+0x18>)
10008e5a:	781b      	ldrb	r3, [r3, #0]
10008e5c:	4b04      	ldr	r3, [pc, #16]	; (10008e70 <sms_monitor_get_states+0x1c>)
10008e5e:	781b      	ldrb	r3, [r3, #0]
10008e60:	4b04      	ldr	r3, [pc, #16]	; (10008e74 <sms_monitor_get_states+0x20>)
10008e62:	781b      	ldrb	r3, [r3, #0]
}
10008e64:	4770      	bx	lr
10008e66:	46c0      	nop			; (mov r8, r8)
10008e68:	10019500 	.word	0x10019500
10008e6c:	10019430 	.word	0x10019430
10008e70:	1001963f 	.word	0x1001963f
10008e74:	100194fc 	.word	0x100194fc

10008e78 <sms_i2c_master_configure>:
#include <stdlib.h>
#include "sms_i2c.h"


void sms_i2c_master_configure(void)
{
10008e78:	b530      	push	{r4, r5, lr}
10008e7a:	b087      	sub	sp, #28
    i2c_wpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008e7c:	2010      	movs	r0, #16
10008e7e:	4c14      	ldr	r4, [pc, #80]	; (10008ed0 <sms_i2c_master_configure+0x58>)
10008e80:	47a0      	blx	r4
10008e82:	4b14      	ldr	r3, [pc, #80]	; (10008ed4 <sms_i2c_master_configure+0x5c>)
10008e84:	6058      	str	r0, [r3, #4]
    i2c_rpacket.data = malloc(I2C_DATA_LENGTH * sizeof(uint8_t));
10008e86:	2010      	movs	r0, #16
10008e88:	47a0      	blx	r4
10008e8a:	4b13      	ldr	r3, [pc, #76]	; (10008ed8 <sms_i2c_master_configure+0x60>)
10008e8c:	6058      	str	r0, [r3, #4]

    struct i2c_master_config config_i2c_master;
    i2c_master_get_config_defaults(&config_i2c_master);
10008e8e:	ac01      	add	r4, sp, #4
10008e90:	0020      	movs	r0, r4
10008e92:	4b12      	ldr	r3, [pc, #72]	; (10008edc <sms_i2c_master_configure+0x64>)
10008e94:	4798      	blx	r3
    config_i2c_master.clock_source = SMS_I2C_MASTER_CLK_SRC;
10008e96:	2303      	movs	r3, #3
10008e98:	7023      	strb	r3, [r4, #0]
    config_i2c_master.clock_divider = SMS_I2C_MASTER_CLK_DIV;
10008e9a:	331b      	adds	r3, #27
10008e9c:	8063      	strh	r3, [r4, #2]
    config_i2c_master.pin_number_pad0 = SMS_I2C_MASTER_PIN_SDA;
10008e9e:	3b16      	subs	r3, #22
10008ea0:	6063      	str	r3, [r4, #4]
    config_i2c_master.pin_number_pad1 = SMS_I2C_MASTER_PIN_SCL;
10008ea2:	3301      	adds	r3, #1
10008ea4:	60e3      	str	r3, [r4, #12]
    config_i2c_master.pinmux_sel_pad0 = SMS_I2C_MASTER_MUX_SDA;
10008ea6:	3b07      	subs	r3, #7
10008ea8:	60a3      	str	r3, [r4, #8]
    config_i2c_master.pinmux_sel_pad1 = SMS_I2C_MASTER_MUX_SCL;
10008eaa:	6123      	str	r3, [r4, #16]
    while(i2c_master_init(&i2c_master_instance, SMS_I2C_MASTER_PORT, &config_i2c_master) != STATUS_OK);
10008eac:	4d0c      	ldr	r5, [pc, #48]	; (10008ee0 <sms_i2c_master_configure+0x68>)
10008eae:	4c0d      	ldr	r4, [pc, #52]	; (10008ee4 <sms_i2c_master_configure+0x6c>)
10008eb0:	aa01      	add	r2, sp, #4
10008eb2:	490d      	ldr	r1, [pc, #52]	; (10008ee8 <sms_i2c_master_configure+0x70>)
10008eb4:	0028      	movs	r0, r5
10008eb6:	47a0      	blx	r4
10008eb8:	2800      	cmp	r0, #0
10008eba:	d1f9      	bne.n	10008eb0 <sms_i2c_master_configure+0x38>

    i2c_enable(i2c_master_instance.hw);
10008ebc:	4b08      	ldr	r3, [pc, #32]	; (10008ee0 <sms_i2c_master_configure+0x68>)
10008ebe:	681a      	ldr	r2, [r3, #0]
 *
 * \param[in]  i2c_module  Pointer to software module structure
 */
static inline void i2c_wait_for_idle(I2c *const i2c_module)
{
	while (i2c_module->I2C_STATUS.bit.I2C_ACTIVE) {
10008ec0:	2128      	movs	r1, #40	; 0x28
10008ec2:	5c53      	ldrb	r3, [r2, r1]
10008ec4:	07db      	lsls	r3, r3, #31
10008ec6:	d4fc      	bmi.n	10008ec2 <sms_i2c_master_configure+0x4a>
static inline void i2c_enable(I2c *const i2c_module)
{
	/* Wait for module to sync. */
	i2c_wait_for_idle(i2c_module);
	/* Enable module. */
	i2c_module->I2C_MODULE_ENABLE.reg = (1 << I2C_MODULE_ENABLE_ENABLE_Pos);
10008ec8:	2301      	movs	r3, #1
10008eca:	7513      	strb	r3, [r2, #20]
}
10008ecc:	b007      	add	sp, #28
10008ece:	bd30      	pop	{r4, r5, pc}
10008ed0:	10015589 	.word	0x10015589
10008ed4:	10019648 	.word	0x10019648
10008ed8:	10019628 	.word	0x10019628
10008edc:	10008305 	.word	0x10008305
10008ee0:	10019634 	.word	0x10019634
10008ee4:	1000831d 	.word	0x1000831d
10008ee8:	40003000 	.word	0x40003000

10008eec <sms_i2c_master_write>:

int sms_i2c_master_write(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t const *data)
{
10008eec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008eee:	4c12      	ldr	r4, [pc, #72]	; (10008f38 <sms_i2c_master_write+0x4c>)
10008ef0:	8020      	strh	r0, [r4, #0]
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
10008ef2:	1c50      	adds	r0, r2, #1
10008ef4:	b2c0      	uxtb	r0, r0
10008ef6:	8060      	strh	r0, [r4, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008ef8:	6860      	ldr	r0, [r4, #4]
10008efa:	7001      	strb	r1, [r0, #0]
    for(uint8_t i = 0; i < data_len; i++) {
10008efc:	2a00      	cmp	r2, #0
10008efe:	d00e      	beq.n	10008f1e <sms_i2c_master_write+0x32>
10008f00:	2000      	movs	r0, #0
10008f02:	1c41      	adds	r1, r0, #1
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
10008f04:	5c18      	ldrb	r0, [r3, r0]
10008f06:	6865      	ldr	r5, [r4, #4]
10008f08:	5468      	strb	r0, [r5, r1]
10008f0a:	0008      	movs	r0, r1
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008f0c:	b2c9      	uxtb	r1, r1
10008f0e:	428a      	cmp	r2, r1
10008f10:	d8f7      	bhi.n	10008f02 <sms_i2c_master_write+0x16>
10008f12:	e004      	b.n	10008f1e <sms_i2c_master_write+0x32>
10008f14:	3c01      	subs	r4, #1
10008f16:	b2a4      	uxth	r4, r4
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
10008f18:	2c00      	cmp	r4, #0
10008f1a:	d104      	bne.n	10008f26 <sms_i2c_master_write+0x3a>
10008f1c:	e009      	b.n	10008f32 <sms_i2c_master_write+0x46>
    //DBG_LOG_DEV("i2c writing to 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout = 0;
    i2c_wpacket.address = (uint8_t)slave_addr;
    i2c_wpacket.data_length = (uint8_t)(data_len + 1);
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    for(uint8_t i = 0; i < data_len; i++) {
10008f1e:	4c07      	ldr	r4, [pc, #28]	; (10008f3c <sms_i2c_master_write+0x50>)
        i2c_wpacket.data[i+1] = (uint8_t)data[i];
        //DBG_LOG_CONT_DEV("0x%02x ", i2c_wpacket.data[i+1]);
    }
    while (i2c_master_write_packet_wait(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008f20:	4e05      	ldr	r6, [pc, #20]	; (10008f38 <sms_i2c_master_write+0x4c>)
10008f22:	4d07      	ldr	r5, [pc, #28]	; (10008f40 <sms_i2c_master_write+0x54>)
10008f24:	4f07      	ldr	r7, [pc, #28]	; (10008f44 <sms_i2c_master_write+0x58>)
10008f26:	0031      	movs	r1, r6
10008f28:	0028      	movs	r0, r5
10008f2a:	47b8      	blx	r7
10008f2c:	2800      	cmp	r0, #0
10008f2e:	d1f1      	bne.n	10008f14 <sms_i2c_master_write+0x28>
10008f30:	e001      	b.n	10008f36 <sms_i2c_master_write+0x4a>
        /* Increment timeout counter and check if timed out. */
        if (timeout++ >= I2C_TIMEOUT) {
            return -1;
10008f32:	2001      	movs	r0, #1
10008f34:	4240      	negs	r0, r0
        }
    }
    return 0;
}
10008f36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10008f38:	10019648 	.word	0x10019648
10008f3c:	000003e9 	.word	0x000003e9
10008f40:	10019634 	.word	0x10019634
10008f44:	100083b5 	.word	0x100083b5

10008f48 <sms_i2c_master_read>:

int sms_i2c_master_read(uint8_t slave_addr, uint8_t reg_addr, uint8_t data_len, uint8_t *data)
{
10008f48:	b5f0      	push	{r4, r5, r6, r7, lr}
10008f4a:	4647      	mov	r7, r8
10008f4c:	b480      	push	{r7}
10008f4e:	0017      	movs	r7, r2
10008f50:	4698      	mov	r8, r3
    //DBG_LOG("i2c reading from 0x%02x at 0x%02x... data: ", slave_addr, reg_addr);
    uint16_t timeout;
    i2c_wpacket.address = (uint8_t)slave_addr;
10008f52:	b280      	uxth	r0, r0
10008f54:	4b1d      	ldr	r3, [pc, #116]	; (10008fcc <sms_i2c_master_read+0x84>)
10008f56:	8018      	strh	r0, [r3, #0]
    i2c_wpacket.data_length = 1;
10008f58:	2201      	movs	r2, #1
10008f5a:	805a      	strh	r2, [r3, #2]
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
10008f5c:	685b      	ldr	r3, [r3, #4]
10008f5e:	7019      	strb	r1, [r3, #0]
    i2c_rpacket.address = (uint8_t)slave_addr;
10008f60:	4b1b      	ldr	r3, [pc, #108]	; (10008fd0 <sms_i2c_master_read+0x88>)
10008f62:	8018      	strh	r0, [r3, #0]
    i2c_rpacket.data_length = (uint8_t)data_len;
10008f64:	805f      	strh	r7, [r3, #2]
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008f66:	4c1b      	ldr	r4, [pc, #108]	; (10008fd4 <sms_i2c_master_read+0x8c>)
10008f68:	4e18      	ldr	r6, [pc, #96]	; (10008fcc <sms_i2c_master_read+0x84>)
10008f6a:	4d1b      	ldr	r5, [pc, #108]	; (10008fd8 <sms_i2c_master_read+0x90>)
10008f6c:	e003      	b.n	10008f76 <sms_i2c_master_read+0x2e>
10008f6e:	3c01      	subs	r4, #1
10008f70:	b2a4      	uxth	r4, r4
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008f72:	2c00      	cmp	r4, #0
10008f74:	d01f      	beq.n	10008fb6 <sms_i2c_master_read+0x6e>
    i2c_wpacket.data[0] = (uint8_t)reg_addr;
    i2c_rpacket.address = (uint8_t)slave_addr;
    i2c_rpacket.data_length = (uint8_t)data_len;
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
10008f76:	0031      	movs	r1, r6
10008f78:	4818      	ldr	r0, [pc, #96]	; (10008fdc <sms_i2c_master_read+0x94>)
10008f7a:	47a8      	blx	r5
10008f7c:	2800      	cmp	r0, #0
10008f7e:	d1f6      	bne.n	10008f6e <sms_i2c_master_read+0x26>
10008f80:	4e14      	ldr	r6, [pc, #80]	; (10008fd4 <sms_i2c_master_read+0x8c>)
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008f82:	4d13      	ldr	r5, [pc, #76]	; (10008fd0 <sms_i2c_master_read+0x88>)
10008f84:	4c16      	ldr	r4, [pc, #88]	; (10008fe0 <sms_i2c_master_read+0x98>)
10008f86:	e003      	b.n	10008f90 <sms_i2c_master_read+0x48>
10008f88:	3e01      	subs	r6, #1
10008f8a:	b2b6      	uxth	r6, r6
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
10008f8c:	2e00      	cmp	r6, #0
10008f8e:	d015      	beq.n	10008fbc <sms_i2c_master_read+0x74>
            return -1;
        }
    }
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
10008f90:	0029      	movs	r1, r5
10008f92:	4812      	ldr	r0, [pc, #72]	; (10008fdc <sms_i2c_master_read+0x94>)
10008f94:	47a0      	blx	r4
10008f96:	2800      	cmp	r0, #0
10008f98:	d1f6      	bne.n	10008f88 <sms_i2c_master_read+0x40>
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008f9a:	2f00      	cmp	r7, #0
10008f9c:	d011      	beq.n	10008fc2 <sms_i2c_master_read+0x7a>
10008f9e:	2300      	movs	r3, #0
        data[i] = i2c_rpacket.data[i];
10008fa0:	490b      	ldr	r1, [pc, #44]	; (10008fd0 <sms_i2c_master_read+0x88>)
10008fa2:	684a      	ldr	r2, [r1, #4]
10008fa4:	5cd2      	ldrb	r2, [r2, r3]
10008fa6:	4640      	mov	r0, r8
10008fa8:	54c2      	strb	r2, [r0, r3]
10008faa:	3301      	adds	r3, #1
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
        }
    }
    for(uint8_t i = 0; i < data_len; i++) {
10008fac:	b2da      	uxtb	r2, r3
10008fae:	4297      	cmp	r7, r2
10008fb0:	d8f7      	bhi.n	10008fa2 <sms_i2c_master_read+0x5a>
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008fb2:	2000      	movs	r0, #0
10008fb4:	e006      	b.n	10008fc4 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_write_packet_wait_no_stop(&i2c_master_instance, &i2c_wpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008fb6:	2001      	movs	r0, #1
10008fb8:	4240      	negs	r0, r0
10008fba:	e003      	b.n	10008fc4 <sms_i2c_master_read+0x7c>
    
    timeout = 0;
    while(i2c_master_read_packet_wait(&i2c_master_instance, &i2c_rpacket) != STATUS_OK) {
		//DBG_LOG_DEV("t/o %d", timeout);
        if(timeout++ >= I2C_TIMEOUT) {
            return -1;
10008fbc:	2001      	movs	r0, #1
10008fbe:	4240      	negs	r0, r0
10008fc0:	e000      	b.n	10008fc4 <sms_i2c_master_read+0x7c>
    }
    for(uint8_t i = 0; i < data_len; i++) {
        data[i] = i2c_rpacket.data[i];
        //DBG_LOG_CONT(" 0x%02x ", data[i]);
    }
    return 0;
10008fc2:	2000      	movs	r0, #0
10008fc4:	bc04      	pop	{r2}
10008fc6:	4690      	mov	r8, r2
10008fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10008fca:	46c0      	nop			; (mov r8, r8)
10008fcc:	10019648 	.word	0x10019648
10008fd0:	10019628 	.word	0x10019628
10008fd4:	000003e9 	.word	0x000003e9
10008fd8:	100083d9 	.word	0x100083d9
10008fdc:	10019634 	.word	0x10019634
10008fe0:	10008391 	.word	0x10008391

10008fe4 <sms_mpu_interrupt_callback>:
	mpu_device.interrupt.enabled = false;
}

/* Callback --> send interrupt message to platform */
void sms_mpu_interrupt_callback(void)
{
10008fe4:	b510      	push	{r4, lr}
	if(mpu_device.interrupt.enabled) {
10008fe6:	2360      	movs	r3, #96	; 0x60
10008fe8:	4a06      	ldr	r2, [pc, #24]	; (10009004 <sms_mpu_interrupt_callback+0x20>)
10008fea:	5cd3      	ldrb	r3, [r2, r3]
10008fec:	2b00      	cmp	r3, #0
10008fee:	d008      	beq.n	10009002 <sms_mpu_interrupt_callback+0x1e>
		mpu_device.interrupt.new_gyro = true;
10008ff0:	2101      	movs	r1, #1
10008ff2:	2361      	movs	r3, #97	; 0x61
10008ff4:	54d1      	strb	r1, [r2, r3]
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
10008ff6:	2300      	movs	r3, #0
10008ff8:	2200      	movs	r2, #0
10008ffa:	3101      	adds	r1, #1
10008ffc:	201e      	movs	r0, #30
10008ffe:	4c02      	ldr	r4, [pc, #8]	; (10009008 <sms_mpu_interrupt_callback+0x24>)
10009000:	47a0      	blx	r4
	}
}
10009002:	bd10      	pop	{r4, pc}
10009004:	10019434 	.word	0x10019434
10009008:	1000d951 	.word	0x1000d951

1000900c <sms_mpu_configure_gpio>:
#include "mpu9250.h"

//static struct hal_s hal = {0};
    
void sms_mpu_configure_gpio(void)
{
1000900c:	b510      	push	{r4, lr}
1000900e:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* Data ready interrupt from IMU */
    gpio_get_config_defaults(&config_gpio_pin);
10009010:	ac01      	add	r4, sp, #4
10009012:	0020      	movs	r0, r4
10009014:	4b0a      	ldr	r3, [pc, #40]	; (10009040 <sms_mpu_configure_gpio+0x34>)
10009016:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_INPUT;
10009018:	2300      	movs	r3, #0
1000901a:	7023      	strb	r3, [r4, #0]
    config_gpio_pin.input_pull = GPIO_PIN_PULL_DOWN;
1000901c:	3302      	adds	r3, #2
1000901e:	7063      	strb	r3, [r4, #1]
    config_gpio_pin.aon_wakeup = true;
10009020:	3b01      	subs	r3, #1
10009022:	70e3      	strb	r3, [r4, #3]
    if(gpio_pin_set_config(SMS_MPU_DRDY_PIN, &config_gpio_pin) != STATUS_OK) {
10009024:	0021      	movs	r1, r4
10009026:	201e      	movs	r0, #30
10009028:	4b06      	ldr	r3, [pc, #24]	; (10009044 <sms_mpu_configure_gpio+0x38>)
1000902a:	4798      	blx	r3
1000902c:	2800      	cmp	r0, #0
1000902e:	d005      	beq.n	1000903c <sms_mpu_configure_gpio+0x30>
        DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up IMU DRDY pin");
10009030:	4805      	ldr	r0, [pc, #20]	; (10009048 <sms_mpu_configure_gpio+0x3c>)
10009032:	4b06      	ldr	r3, [pc, #24]	; (1000904c <sms_mpu_configure_gpio+0x40>)
10009034:	4798      	blx	r3
10009036:	4806      	ldr	r0, [pc, #24]	; (10009050 <sms_mpu_configure_gpio+0x44>)
10009038:	4b06      	ldr	r3, [pc, #24]	; (10009054 <sms_mpu_configure_gpio+0x48>)
1000903a:	4798      	blx	r3
    //config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
    //if(!gpio_pin_set_config(SMS_MPU_VCC_PIN, &config_gpio_pin) != STATUS_OK) {
        //DBG_LOG("[sms_imu_configure_gpio]\tProblem while setting up MPU VCC pin");
    //}
    //gpio_pin_set_output_level(SMS_MPU_VCC_PIN, true);
}
1000903c:	b002      	add	sp, #8
1000903e:	bd10      	pop	{r4, pc}
10009040:	1000aa25 	.word	0x1000aa25
10009044:	1000aa35 	.word	0x1000aa35
10009048:	1001677c 	.word	0x1001677c
1000904c:	10015835 	.word	0x10015835
10009050:	100169f0 	.word	0x100169f0
10009054:	10015715 	.word	0x10015715

10009058 <sms_mpu_register_callbacks>:

/* Register GPIO interrupt callback */
void sms_mpu_register_callbacks(void)
{
10009058:	b510      	push	{r4, lr}
    /* MPU-9250 interrupt callback */
    gpio_register_callback(SMS_MPU_DRDY_PIN, sms_mpu_interrupt_callback, GPIO_CALLBACK_RISING);
1000905a:	2202      	movs	r2, #2
1000905c:	4902      	ldr	r1, [pc, #8]	; (10009068 <sms_mpu_register_callbacks+0x10>)
1000905e:	201e      	movs	r0, #30
10009060:	4b02      	ldr	r3, [pc, #8]	; (1000906c <sms_mpu_register_callbacks+0x14>)
10009062:	4798      	blx	r3
}
10009064:	bd10      	pop	{r4, pc}
10009066:	46c0      	nop			; (mov r8, r8)
10009068:	10008fe5 	.word	0x10008fe5
1000906c:	1000ae65 	.word	0x1000ae65

10009070 <sms_mpu_enable_callback>:
    gpio_unregister_callback(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING);
}

/* Enable MPU DRDY interrupt */
void sms_mpu_enable_callback(void)
{
10009070:	b510      	push	{r4, lr}
	gpio_enable_callback(SMS_MPU_DRDY_PIN);
10009072:	201e      	movs	r0, #30
10009074:	4b03      	ldr	r3, [pc, #12]	; (10009084 <sms_mpu_enable_callback+0x14>)
10009076:	4798      	blx	r3
	mpu_device.interrupt.enabled = true;
10009078:	2101      	movs	r1, #1
1000907a:	2360      	movs	r3, #96	; 0x60
1000907c:	4a02      	ldr	r2, [pc, #8]	; (10009088 <sms_mpu_enable_callback+0x18>)
1000907e:	54d1      	strb	r1, [r2, r3]
}
10009080:	bd10      	pop	{r4, pc}
10009082:	46c0      	nop			; (mov r8, r8)
10009084:	1000af35 	.word	0x1000af35
10009088:	10019434 	.word	0x10019434

1000908c <sms_mpu_disable_callback>:

/* Disable MPU DRDY interrupt */
void sms_mpu_disable_callback(void)
{
1000908c:	b510      	push	{r4, lr}
	gpio_disable_callback(SMS_MPU_DRDY_PIN);
1000908e:	201e      	movs	r0, #30
10009090:	4b03      	ldr	r3, [pc, #12]	; (100090a0 <sms_mpu_disable_callback+0x14>)
10009092:	4798      	blx	r3
	mpu_device.interrupt.enabled = false;
10009094:	2100      	movs	r1, #0
10009096:	2360      	movs	r3, #96	; 0x60
10009098:	4a02      	ldr	r2, [pc, #8]	; (100090a4 <sms_mpu_disable_callback+0x18>)
1000909a:	54d1      	strb	r1, [r2, r3]
}
1000909c:	bd10      	pop	{r4, pc}
1000909e:	46c0      	nop			; (mov r8, r8)
100090a0:	1000af91 	.word	0x1000af91
100090a4:	10019434 	.word	0x10019434

100090a8 <sms_mpu_define_services>:
	DBG_LOG("Polling...");
    return 0;
}

void sms_mpu_define_services(void)
{
100090a8:	b510      	push	{r4, lr}
100090aa:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
100090ac:	466b      	mov	r3, sp
100090ae:	1dda      	adds	r2, r3, #7
100090b0:	2300      	movs	r3, #0
100090b2:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_MPU, &mpu_device.service_handler, &init_value);
100090b4:	4c09      	ldr	r4, [pc, #36]	; (100090dc <sms_mpu_define_services+0x34>)
100090b6:	0021      	movs	r1, r4
100090b8:	2002      	movs	r0, #2
100090ba:	4b09      	ldr	r3, [pc, #36]	; (100090e0 <sms_mpu_define_services+0x38>)
100090bc:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&mpu_device.service_handler)) != AT_BLE_SUCCESS) {
100090be:	0020      	movs	r0, r4
100090c0:	4b08      	ldr	r3, [pc, #32]	; (100090e4 <sms_mpu_define_services+0x3c>)
100090c2:	4798      	blx	r3
100090c4:	1e04      	subs	r4, r0, #0
100090c6:	d006      	beq.n	100090d6 <sms_mpu_define_services+0x2e>
        DBG_LOG("[sms_mpu_define_services]\tServices defining failed, reason 0x%x", status);
100090c8:	4807      	ldr	r0, [pc, #28]	; (100090e8 <sms_mpu_define_services+0x40>)
100090ca:	4b08      	ldr	r3, [pc, #32]	; (100090ec <sms_mpu_define_services+0x44>)
100090cc:	4798      	blx	r3
100090ce:	0021      	movs	r1, r4
100090d0:	4807      	ldr	r0, [pc, #28]	; (100090f0 <sms_mpu_define_services+0x48>)
100090d2:	4b08      	ldr	r3, [pc, #32]	; (100090f4 <sms_mpu_define_services+0x4c>)
100090d4:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}
100090d6:	b002      	add	sp, #8
100090d8:	bd10      	pop	{r4, pc}
100090da:	46c0      	nop			; (mov r8, r8)
100090dc:	1001949c 	.word	0x1001949c
100090e0:	1000899d 	.word	0x1000899d
100090e4:	10008979 	.word	0x10008979
100090e8:	1001677c 	.word	0x1001677c
100090ec:	10015835 	.word	0x10015835
100090f0:	10016a3c 	.word	0x10016a3c
100090f4:	10015715 	.word	0x10015715

100090f8 <writeByte>:
	}

}

void writeByte(uint8_t address, uint8_t subAddress, uint8_t data)
{
100090f8:	b510      	push	{r4, lr}
100090fa:	b082      	sub	sp, #8
100090fc:	466b      	mov	r3, sp
100090fe:	3307      	adds	r3, #7
10009100:	701a      	strb	r2, [r3, #0]
	sms_i2c_master_write(address, subAddress, 1, &data);
10009102:	2201      	movs	r2, #1
10009104:	4c01      	ldr	r4, [pc, #4]	; (1000910c <writeByte+0x14>)
10009106:	47a0      	blx	r4
}
10009108:	b002      	add	sp, #8
1000910a:	bd10      	pop	{r4, pc}
1000910c:	10008eed 	.word	0x10008eed

10009110 <sms_mpu_calibrate>:
	}
	return retVal;
}

void sms_mpu_calibrate(float *dest1, float *dest2)
{
10009110:	b5f0      	push	{r4, r5, r6, r7, lr}
10009112:	465f      	mov	r7, fp
10009114:	4656      	mov	r6, sl
10009116:	464d      	mov	r5, r9
10009118:	4644      	mov	r4, r8
1000911a:	b4f0      	push	{r4, r5, r6, r7}
1000911c:	b08f      	sub	sp, #60	; 0x3c
1000911e:	9003      	str	r0, [sp, #12]
10009120:	9105      	str	r1, [sp, #20]
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
	int32_t accel_bias[3] = {0, 0, 0};
	
	// reset device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x80); // Write a one to bit 7 reset bit; toggle reset device
10009122:	2280      	movs	r2, #128	; 0x80
10009124:	216b      	movs	r1, #107	; 0x6b
10009126:	2069      	movs	r0, #105	; 0x69
10009128:	4ccd      	ldr	r4, [pc, #820]	; (10009460 <sms_mpu_calibrate+0x350>)
1000912a:	47a0      	blx	r4
	delay_ms(100);
1000912c:	2064      	movs	r0, #100	; 0x64
1000912e:	4dcd      	ldr	r5, [pc, #820]	; (10009464 <sms_mpu_calibrate+0x354>)
10009130:	47a8      	blx	r5
	
	// get stable time source; Auto select clock source to be PLL gyroscope reference if ready
	// else use the internal oscillator, bits 2:0 = 001
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);
10009132:	2201      	movs	r2, #1
10009134:	216b      	movs	r1, #107	; 0x6b
10009136:	2069      	movs	r0, #105	; 0x69
10009138:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_2, 0x00);
1000913a:	2200      	movs	r2, #0
1000913c:	216c      	movs	r1, #108	; 0x6c
1000913e:	2069      	movs	r0, #105	; 0x69
10009140:	47a0      	blx	r4
	delay_ms(200);
10009142:	20c8      	movs	r0, #200	; 0xc8
10009144:	47a8      	blx	r5

	// Configure device for bias calculation
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x00);   // Disable all interrupts
10009146:	2200      	movs	r2, #0
10009148:	2138      	movs	r1, #56	; 0x38
1000914a:	2069      	movs	r0, #105	; 0x69
1000914c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);      // Disable FIFO
1000914e:	2200      	movs	r2, #0
10009150:	2123      	movs	r1, #35	; 0x23
10009152:	2069      	movs	r0, #105	; 0x69
10009154:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00);   // Turn on internal clock source
10009156:	2200      	movs	r2, #0
10009158:	216b      	movs	r1, #107	; 0x6b
1000915a:	2069      	movs	r0, #105	; 0x69
1000915c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, I2C_MST_CTRL, 0x00); // Disable I2C master
1000915e:	2200      	movs	r2, #0
10009160:	2124      	movs	r1, #36	; 0x24
10009162:	2069      	movs	r0, #105	; 0x69
10009164:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x00);    // Disable FIFO and I2C master modes
10009166:	2200      	movs	r2, #0
10009168:	216a      	movs	r1, #106	; 0x6a
1000916a:	2069      	movs	r0, #105	; 0x69
1000916c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x0C);    // Reset FIFO and DMP
1000916e:	220c      	movs	r2, #12
10009170:	216a      	movs	r1, #106	; 0x6a
10009172:	2069      	movs	r0, #105	; 0x69
10009174:	47a0      	blx	r4
	delay_ms(15);
10009176:	200f      	movs	r0, #15
10009178:	47a8      	blx	r5
	
	// Configure MPU9250 gyro and accelerometer for bias calculation
	writeByte(MPU9250_ADDRESS, CONFIG, 0x01);      // Set low-pass filter to 188 Hz
1000917a:	2201      	movs	r2, #1
1000917c:	211a      	movs	r1, #26
1000917e:	2069      	movs	r0, #105	; 0x69
10009180:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);  // Set sample rate to 1 kHz
10009182:	2200      	movs	r2, #0
10009184:	2119      	movs	r1, #25
10009186:	2069      	movs	r0, #105	; 0x69
10009188:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, 0x00);  // Set gyro full-scale to 250 degrees per second, maximum sensitivity
1000918a:	2200      	movs	r2, #0
1000918c:	211b      	movs	r1, #27
1000918e:	2069      	movs	r0, #105	; 0x69
10009190:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00); // Set accelerometer full-scale to 2 g, maximum sensitivity
10009192:	2200      	movs	r2, #0
10009194:	211c      	movs	r1, #28
10009196:	2069      	movs	r0, #105	; 0x69
10009198:	47a0      	blx	r4
	
	uint16_t  gyrosensitivity  = 131;   // = 131 LSB/degrees/sec
	uint16_t  accelsensitivity = 16384;  // = 16384 LSB/g

	// Configure FIFO to capture accelerometer and gyro data for bias calculation
	writeByte(MPU9250_ADDRESS, USER_CTRL, 0x40);   // Enable FIFO
1000919a:	2240      	movs	r2, #64	; 0x40
1000919c:	216a      	movs	r1, #106	; 0x6a
1000919e:	2069      	movs	r0, #105	; 0x69
100091a0:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x78);     // Enable gyro and accelerometer sensors for FIFO  (max size 512 bytes in MPU-9150)
100091a2:	2278      	movs	r2, #120	; 0x78
100091a4:	2123      	movs	r1, #35	; 0x23
100091a6:	2069      	movs	r0, #105	; 0x69
100091a8:	47a0      	blx	r4
	delay_ms(40); // accumulate 40 samples in 40 milliseconds = 480 bytes
100091aa:	2028      	movs	r0, #40	; 0x28
100091ac:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
100091ae:	2200      	movs	r2, #0
100091b0:	2123      	movs	r1, #35	; 0x23
100091b2:	2069      	movs	r0, #105	; 0x69
100091b4:	47a0      	blx	r4
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100091b6:	ac0b      	add	r4, sp, #44	; 0x2c
100091b8:	0023      	movs	r3, r4
100091ba:	2202      	movs	r2, #2
100091bc:	2172      	movs	r1, #114	; 0x72
100091be:	2069      	movs	r0, #105	; 0x69
100091c0:	4da9      	ldr	r5, [pc, #676]	; (10009468 <sms_mpu_calibrate+0x358>)
100091c2:	47a8      	blx	r5

	// At end of sample accumulation, turn off FIFO sensor read
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
100091c4:	7820      	ldrb	r0, [r4, #0]
100091c6:	0200      	lsls	r0, r0, #8
100091c8:	7863      	ldrb	r3, [r4, #1]
100091ca:	4318      	orrs	r0, r3
100091cc:	210c      	movs	r1, #12
100091ce:	4ba7      	ldr	r3, [pc, #668]	; (1000946c <sms_mpu_calibrate+0x35c>)
100091d0:	4798      	blx	r3
100091d2:	b283      	uxth	r3, r0
100091d4:	9302      	str	r3, [sp, #8]
	
	for (ii = 0; ii < packet_count; ii++) {
100091d6:	2b00      	cmp	r3, #0
100091d8:	d042      	beq.n	10009260 <sms_mpu_calibrate+0x150>
100091da:	2300      	movs	r3, #0
100091dc:	4698      	mov	r8, r3
100091de:	2700      	movs	r7, #0
100091e0:	469b      	mov	fp, r3
100091e2:	469a      	mov	sl, r3
100091e4:	4699      	mov	r9, r3
100091e6:	2500      	movs	r5, #0
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100091e8:	ac0b      	add	r4, sp, #44	; 0x2c
100091ea:	9301      	str	r3, [sp, #4]
100091ec:	0023      	movs	r3, r4
100091ee:	220c      	movs	r2, #12
100091f0:	2174      	movs	r1, #116	; 0x74
100091f2:	2069      	movs	r0, #105	; 0x69
100091f4:	4e9c      	ldr	r6, [pc, #624]	; (10009468 <sms_mpu_calibrate+0x358>)
100091f6:	47b0      	blx	r6
		accel_temp[2] = (int16_t) (((int16_t)data[4] << 8) | data[5]  ) ;
		gyro_temp[0]  = (int16_t) (((int16_t)data[6] << 8) | data[7]  ) ;
		gyro_temp[1]  = (int16_t) (((int16_t)data[8] << 8) | data[9]  ) ;
		gyro_temp[2]  = (int16_t) (((int16_t)data[10] << 8) | data[11]) ;
		
		accel_bias[0] += (int32_t) accel_temp[0]; // Sum individual signed 16-bit biases to get accumulated signed 32-bit biases
100091f8:	7823      	ldrb	r3, [r4, #0]
100091fa:	021b      	lsls	r3, r3, #8
100091fc:	7862      	ldrb	r2, [r4, #1]
100091fe:	4313      	orrs	r3, r2
10009200:	b21b      	sxth	r3, r3
10009202:	9a01      	ldr	r2, [sp, #4]
10009204:	4694      	mov	ip, r2
10009206:	449c      	add	ip, r3
10009208:	4663      	mov	r3, ip
1000920a:	9301      	str	r3, [sp, #4]
		accel_bias[1] += (int32_t) accel_temp[1];
1000920c:	78a3      	ldrb	r3, [r4, #2]
1000920e:	021b      	lsls	r3, r3, #8
10009210:	78e2      	ldrb	r2, [r4, #3]
10009212:	4313      	orrs	r3, r2
10009214:	b21b      	sxth	r3, r3
10009216:	18ff      	adds	r7, r7, r3
		accel_bias[2] += (int32_t) accel_temp[2];
10009218:	7923      	ldrb	r3, [r4, #4]
1000921a:	021b      	lsls	r3, r3, #8
1000921c:	7962      	ldrb	r2, [r4, #5]
1000921e:	4313      	orrs	r3, r2
10009220:	b21b      	sxth	r3, r3
10009222:	4499      	add	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
10009224:	79a3      	ldrb	r3, [r4, #6]
10009226:	021b      	lsls	r3, r3, #8
10009228:	79e2      	ldrb	r2, [r4, #7]
1000922a:	4313      	orrs	r3, r2
1000922c:	b21b      	sxth	r3, r3
1000922e:	4498      	add	r8, r3
		gyro_bias[1]  += (int32_t) gyro_temp[1];
10009230:	7a23      	ldrb	r3, [r4, #8]
10009232:	021b      	lsls	r3, r3, #8
10009234:	7a62      	ldrb	r2, [r4, #9]
10009236:	4313      	orrs	r3, r2
10009238:	b21b      	sxth	r3, r3
1000923a:	449a      	add	sl, r3
		gyro_bias[2]  += (int32_t) gyro_temp[2];
1000923c:	7aa3      	ldrb	r3, [r4, #10]
1000923e:	021b      	lsls	r3, r3, #8
10009240:	7ae2      	ldrb	r2, [r4, #11]
10009242:	4313      	orrs	r3, r2
10009244:	b21b      	sxth	r3, r3
10009246:	449b      	add	fp, r3
	writeByte(MPU9250_ADDRESS, FIFO_EN, 0x00);        // Disable gyro and accelerometer sensors for FIFO
	readBytes(MPU9250_ADDRESS, FIFO_COUNTH, 2, &data); // read FIFO sample count
	fifo_count = ((uint16_t)data[0] << 8) | data[1];
	packet_count = fifo_count/12;// How many sets of full gyro and accelerometer data for averaging
	
	for (ii = 0; ii < packet_count; ii++) {
10009248:	3501      	adds	r5, #1
1000924a:	b2ad      	uxth	r5, r5
1000924c:	9b02      	ldr	r3, [sp, #8]
1000924e:	42ab      	cmp	r3, r5
10009250:	d1cc      	bne.n	100091ec <sms_mpu_calibrate+0xdc>
10009252:	4653      	mov	r3, sl
10009254:	46ba      	mov	sl, r7
10009256:	465a      	mov	r2, fp
10009258:	46e3      	mov	fp, ip
1000925a:	0016      	movs	r6, r2
1000925c:	001f      	movs	r7, r3
1000925e:	e006      	b.n	1000926e <sms_mpu_calibrate+0x15e>

void sms_mpu_calibrate(float *dest1, float *dest2)
{
	uint8_t data[12]; // data array to hold accelerometer and gyro x, y, z, data
	uint16_t ii, packet_count, fifo_count;
	int32_t gyro_bias[3]  = {0, 0, 0};
10009260:	2300      	movs	r3, #0
10009262:	4698      	mov	r8, r3
10009264:	2700      	movs	r7, #0
10009266:	2600      	movs	r6, #0
	int32_t accel_bias[3] = {0, 0, 0};
10009268:	469b      	mov	fp, r3
1000926a:	469a      	mov	sl, r3
1000926c:	4699      	mov	r9, r3
		gyro_bias[0]  += (int32_t) gyro_temp[0];
		gyro_bias[1]  += (int32_t) gyro_temp[1];
		gyro_bias[2]  += (int32_t) gyro_temp[2];
		
	}
	accel_bias[0] /= (int32_t) packet_count; // Normalize sums to get average count biases
1000926e:	4c80      	ldr	r4, [pc, #512]	; (10009470 <sms_mpu_calibrate+0x360>)
10009270:	9902      	ldr	r1, [sp, #8]
10009272:	4658      	mov	r0, fp
10009274:	47a0      	blx	r4
10009276:	0005      	movs	r5, r0
	accel_bias[1] /= (int32_t) packet_count;
10009278:	9b02      	ldr	r3, [sp, #8]
1000927a:	469b      	mov	fp, r3
1000927c:	0019      	movs	r1, r3
1000927e:	4650      	mov	r0, sl
10009280:	47a0      	blx	r4
10009282:	4682      	mov	sl, r0
	accel_bias[2] /= (int32_t) packet_count;
10009284:	4659      	mov	r1, fp
10009286:	4648      	mov	r0, r9
10009288:	47a0      	blx	r4
1000928a:	4681      	mov	r9, r0
	gyro_bias[0]  /= (int32_t) packet_count;
1000928c:	4659      	mov	r1, fp
1000928e:	4640      	mov	r0, r8
10009290:	47a0      	blx	r4
10009292:	9001      	str	r0, [sp, #4]
	gyro_bias[1]  /= (int32_t) packet_count;
10009294:	4659      	mov	r1, fp
10009296:	0038      	movs	r0, r7
10009298:	47a0      	blx	r4
1000929a:	9002      	str	r0, [sp, #8]
	gyro_bias[2]  /= (int32_t) packet_count;
1000929c:	4659      	mov	r1, fp
1000929e:	0030      	movs	r0, r6
100092a0:	47a0      	blx	r4
100092a2:	9004      	str	r0, [sp, #16]
	
	if(accel_bias[2] > 0L) {
100092a4:	464b      	mov	r3, r9
100092a6:	2b00      	cmp	r3, #0
100092a8:	dd03      	ble.n	100092b2 <sms_mpu_calibrate+0x1a2>
		accel_bias[2] -= (int32_t) accelsensitivity;
100092aa:	4b72      	ldr	r3, [pc, #456]	; (10009474 <sms_mpu_calibrate+0x364>)
100092ac:	469c      	mov	ip, r3
100092ae:	44e1      	add	r9, ip
100092b0:	e003      	b.n	100092ba <sms_mpu_calibrate+0x1aa>
	}  // Remove gravity from the z-axis accelerometer bias calculation
	else {
		accel_bias[2] += (int32_t) accelsensitivity;
100092b2:	2380      	movs	r3, #128	; 0x80
100092b4:	01db      	lsls	r3, r3, #7
100092b6:	469c      	mov	ip, r3
100092b8:	44e1      	add	r9, ip
	}
	
	// Construct the gyro biases for push to the hardware gyro bias registers, which are reset to zero upon device startup
	data[0] = (-gyro_bias[0]/4  >> 8) & 0xFF; // Divide by 4 to get 32.9 LSB per deg/s to conform to expected bias input format
100092ba:	9b01      	ldr	r3, [sp, #4]
100092bc:	4259      	negs	r1, r3
100092be:	17ca      	asrs	r2, r1, #31
100092c0:	2303      	movs	r3, #3
100092c2:	401a      	ands	r2, r3
100092c4:	1852      	adds	r2, r2, r1
100092c6:	1091      	asrs	r1, r2, #2
100092c8:	1292      	asrs	r2, r2, #10
100092ca:	b2d2      	uxtb	r2, r2
100092cc:	ac0b      	add	r4, sp, #44	; 0x2c
100092ce:	7022      	strb	r2, [r4, #0]
	data[1] = (-gyro_bias[0]/4)       & 0xFF; // Biases are additive, so change sign on calculated average gyro biases
100092d0:	7061      	strb	r1, [r4, #1]
	data[2] = (-gyro_bias[1]/4  >> 8) & 0xFF;
100092d2:	9902      	ldr	r1, [sp, #8]
100092d4:	4248      	negs	r0, r1
100092d6:	17c1      	asrs	r1, r0, #31
100092d8:	4019      	ands	r1, r3
100092da:	1809      	adds	r1, r1, r0
100092dc:	1088      	asrs	r0, r1, #2
100092de:	1289      	asrs	r1, r1, #10
100092e0:	70a1      	strb	r1, [r4, #2]
	data[3] = (-gyro_bias[1]/4)       & 0xFF;
100092e2:	70e0      	strb	r0, [r4, #3]
	data[4] = (-gyro_bias[2]/4  >> 8) & 0xFF;
100092e4:	9e04      	ldr	r6, [sp, #16]
100092e6:	4271      	negs	r1, r6
100092e8:	17c8      	asrs	r0, r1, #31
100092ea:	4003      	ands	r3, r0
100092ec:	185b      	adds	r3, r3, r1
100092ee:	1099      	asrs	r1, r3, #2
100092f0:	129b      	asrs	r3, r3, #10
100092f2:	7123      	strb	r3, [r4, #4]
	data[5] = (-gyro_bias[2]/4)       & 0xFF;
100092f4:	7161      	strb	r1, [r4, #5]
	
	// Push gyro biases to hardware registers
	writeByte(MPU9250_ADDRESS, XG_OFFSET_H, data[0]);
100092f6:	2113      	movs	r1, #19
100092f8:	2069      	movs	r0, #105	; 0x69
100092fa:	4e59      	ldr	r6, [pc, #356]	; (10009460 <sms_mpu_calibrate+0x350>)
100092fc:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XG_OFFSET_L, data[1]);
100092fe:	7862      	ldrb	r2, [r4, #1]
10009300:	2114      	movs	r1, #20
10009302:	2069      	movs	r0, #105	; 0x69
10009304:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_H, data[2]);
10009306:	78a2      	ldrb	r2, [r4, #2]
10009308:	2115      	movs	r1, #21
1000930a:	2069      	movs	r0, #105	; 0x69
1000930c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YG_OFFSET_L, data[3]);
1000930e:	78e2      	ldrb	r2, [r4, #3]
10009310:	2116      	movs	r1, #22
10009312:	2069      	movs	r0, #105	; 0x69
10009314:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_H, data[4]);
10009316:	7922      	ldrb	r2, [r4, #4]
10009318:	2117      	movs	r1, #23
1000931a:	2069      	movs	r0, #105	; 0x69
1000931c:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZG_OFFSET_L, data[5]);
1000931e:	7962      	ldrb	r2, [r4, #5]
10009320:	2118      	movs	r1, #24
10009322:	2069      	movs	r0, #105	; 0x69
10009324:	47b0      	blx	r6
	
	// Output scaled gyro biases for display in the main program
	dest1[0] = (float)((float)gyro_bias[0]/(float)gyrosensitivity);
10009326:	4f54      	ldr	r7, [pc, #336]	; (10009478 <sms_mpu_calibrate+0x368>)
10009328:	9801      	ldr	r0, [sp, #4]
1000932a:	47b8      	blx	r7
1000932c:	4e53      	ldr	r6, [pc, #332]	; (1000947c <sms_mpu_calibrate+0x36c>)
1000932e:	4954      	ldr	r1, [pc, #336]	; (10009480 <sms_mpu_calibrate+0x370>)
10009330:	47b0      	blx	r6
10009332:	9b03      	ldr	r3, [sp, #12]
10009334:	6018      	str	r0, [r3, #0]
	dest1[1] = (float)((float)gyro_bias[1]/(float)gyrosensitivity);
10009336:	9802      	ldr	r0, [sp, #8]
10009338:	47b8      	blx	r7
1000933a:	4951      	ldr	r1, [pc, #324]	; (10009480 <sms_mpu_calibrate+0x370>)
1000933c:	47b0      	blx	r6
1000933e:	9b03      	ldr	r3, [sp, #12]
10009340:	6058      	str	r0, [r3, #4]
	dest1[2] = (float)((float)gyro_bias[2]/(float)gyrosensitivity);
10009342:	9804      	ldr	r0, [sp, #16]
10009344:	47b8      	blx	r7
10009346:	494e      	ldr	r1, [pc, #312]	; (10009480 <sms_mpu_calibrate+0x370>)
10009348:	47b0      	blx	r6
1000934a:	9b03      	ldr	r3, [sp, #12]
1000934c:	6098      	str	r0, [r3, #8]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000934e:	0023      	movs	r3, r4
10009350:	2202      	movs	r2, #2
10009352:	2177      	movs	r1, #119	; 0x77
10009354:	2069      	movs	r0, #105	; 0x69
10009356:	4e44      	ldr	r6, [pc, #272]	; (10009468 <sms_mpu_calibrate+0x358>)
10009358:	46b0      	mov	r8, r6
1000935a:	47b0      	blx	r6
	// compensation calculations. Accelerometer bias registers expect bias input as 2048 LSB per g, so that
	// the accelerometer biases calculated above must be divided by 8.

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
1000935c:	7827      	ldrb	r7, [r4, #0]
1000935e:	023f      	lsls	r7, r7, #8
10009360:	7863      	ldrb	r3, [r4, #1]
10009362:	431f      	orrs	r7, r3
10009364:	9708      	str	r7, [sp, #32]
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009366:	0023      	movs	r3, r4
10009368:	2202      	movs	r2, #2
1000936a:	217a      	movs	r1, #122	; 0x7a
1000936c:	2069      	movs	r0, #105	; 0x69
1000936e:	47b0      	blx	r6

	int32_t accel_bias_reg[3] = {0, 0, 0}; // A place to hold the factory accelerometer trim biases
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009370:	7826      	ldrb	r6, [r4, #0]
10009372:	0236      	lsls	r6, r6, #8
10009374:	7863      	ldrb	r3, [r4, #1]
10009376:	431e      	orrs	r6, r3
10009378:	9609      	str	r6, [sp, #36]	; 0x24
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
1000937a:	0023      	movs	r3, r4
1000937c:	2202      	movs	r2, #2
1000937e:	217d      	movs	r1, #125	; 0x7d
10009380:	2069      	movs	r0, #105	; 0x69
10009382:	47c0      	blx	r8
	readBytes(MPU9250_ADDRESS, XA_OFFSET_H, 2, &data); // Read factory accelerometer trim values
	accel_bias_reg[0] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, YA_OFFSET_H, 2, &data);
	accel_bias_reg[1] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	readBytes(MPU9250_ADDRESS, ZA_OFFSET_H, 2, &data);
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
10009384:	7823      	ldrb	r3, [r4, #0]
10009386:	021b      	lsls	r3, r3, #8
10009388:	7861      	ldrb	r1, [r4, #1]
1000938a:	4319      	orrs	r1, r3
1000938c:	910a      	str	r1, [sp, #40]	; 0x28
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
1000938e:	ab07      	add	r3, sp, #28
10009390:	2200      	movs	r2, #0
10009392:	701a      	strb	r2, [r3, #0]
10009394:	705a      	strb	r2, [r3, #1]
10009396:	709a      	strb	r2, [r3, #2]
10009398:	2300      	movs	r3, #0
	
	for(ii = 0; ii < 3; ii++) {
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
1000939a:	2401      	movs	r4, #1
1000939c:	009a      	lsls	r2, r3, #2
1000939e:	a808      	add	r0, sp, #32
100093a0:	5812      	ldr	r2, [r2, r0]
100093a2:	4222      	tst	r2, r4
100093a4:	d001      	beq.n	100093aa <sms_mpu_calibrate+0x29a>
100093a6:	aa07      	add	r2, sp, #28
100093a8:	549c      	strb	r4, [r3, r2]
100093aa:	3301      	adds	r3, #1
	accel_bias_reg[2] = (int32_t) (((int16_t)data[0] << 8) | data[1]);
	
	uint32_t mask = 1uL; // Define mask for temperature compensation bit 0 of lower byte of accelerometer bias registers
	uint8_t mask_bit[3] = {0, 0, 0}; // Define array to hold mask bit for each accelerometer bias axis
	
	for(ii = 0; ii < 3; ii++) {
100093ac:	2b03      	cmp	r3, #3
100093ae:	d1f5      	bne.n	1000939c <sms_mpu_calibrate+0x28c>
		if((accel_bias_reg[ii] & mask)) mask_bit[ii] = 0x01; // If temperature compensation bit is set, record that fact in mask_bit
	}
	
	// Construct total accelerometer bias, including calculated average accelerometer bias from above
	accel_bias_reg[0] -= (accel_bias[0]/8); // Subtract calculated averaged accelerometer bias scaled to 2048 LSB/g (16 g full scale)
100093b0:	17ea      	asrs	r2, r5, #31
100093b2:	3304      	adds	r3, #4
100093b4:	401a      	ands	r2, r3
100093b6:	1952      	adds	r2, r2, r5
100093b8:	10d2      	asrs	r2, r2, #3
100093ba:	1abf      	subs	r7, r7, r2
	accel_bias_reg[1] -= (accel_bias[1]/8);
100093bc:	4652      	mov	r2, sl
100093be:	17d0      	asrs	r0, r2, #31
100093c0:	4018      	ands	r0, r3
100093c2:	4450      	add	r0, sl
100093c4:	10c0      	asrs	r0, r0, #3
100093c6:	1a36      	subs	r6, r6, r0
	accel_bias_reg[2] -= (accel_bias[2]/8);
100093c8:	464a      	mov	r2, r9
100093ca:	17d2      	asrs	r2, r2, #31
100093cc:	4013      	ands	r3, r2
100093ce:	444b      	add	r3, r9
100093d0:	10da      	asrs	r2, r3, #3
100093d2:	1a8b      	subs	r3, r1, r2
	
	data[0] = (accel_bias_reg[0] >> 8) & 0xFF;
100093d4:	123a      	asrs	r2, r7, #8
100093d6:	b2d2      	uxtb	r2, r2
100093d8:	ac0b      	add	r4, sp, #44	; 0x2c
100093da:	7022      	strb	r2, [r4, #0]
	data[1] = (accel_bias_reg[0])      & 0xFF;
	data[1] = data[1] | mask_bit[0]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100093dc:	a907      	add	r1, sp, #28
100093de:	7808      	ldrb	r0, [r1, #0]
100093e0:	4307      	orrs	r7, r0
100093e2:	7067      	strb	r7, [r4, #1]
	data[2] = (accel_bias_reg[1] >> 8) & 0xFF;
100093e4:	1230      	asrs	r0, r6, #8
100093e6:	70a0      	strb	r0, [r4, #2]
	data[3] = (accel_bias_reg[1])      & 0xFF;
	data[3] = data[3] | mask_bit[1]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100093e8:	7848      	ldrb	r0, [r1, #1]
100093ea:	4306      	orrs	r6, r0
100093ec:	70e6      	strb	r6, [r4, #3]
	data[4] = (accel_bias_reg[2] >> 8) & 0xFF;
100093ee:	1218      	asrs	r0, r3, #8
100093f0:	7120      	strb	r0, [r4, #4]
	data[5] = (accel_bias_reg[2])      & 0xFF;
	data[5] = data[5] | mask_bit[2]; // preserve temperature compensation bit when writing back to accelerometer bias registers
100093f2:	7889      	ldrb	r1, [r1, #2]
100093f4:	430b      	orrs	r3, r1
100093f6:	7163      	strb	r3, [r4, #5]
	
	// Apparently this is not working for the acceleration biases in the MPU-9250
	// Are we handling the temperature correction bit properly?
	// Push accelerometer biases to hardware registers
	writeByte(MPU9250_ADDRESS, XA_OFFSET_H, data[0]);
100093f8:	2177      	movs	r1, #119	; 0x77
100093fa:	2069      	movs	r0, #105	; 0x69
100093fc:	4e18      	ldr	r6, [pc, #96]	; (10009460 <sms_mpu_calibrate+0x350>)
100093fe:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, XA_OFFSET_L, data[1]);
10009400:	7862      	ldrb	r2, [r4, #1]
10009402:	2178      	movs	r1, #120	; 0x78
10009404:	2069      	movs	r0, #105	; 0x69
10009406:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_H, data[2]);
10009408:	78a2      	ldrb	r2, [r4, #2]
1000940a:	217a      	movs	r1, #122	; 0x7a
1000940c:	2069      	movs	r0, #105	; 0x69
1000940e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, YA_OFFSET_L, data[3]);
10009410:	78e2      	ldrb	r2, [r4, #3]
10009412:	217b      	movs	r1, #123	; 0x7b
10009414:	2069      	movs	r0, #105	; 0x69
10009416:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_H, data[4]);
10009418:	7922      	ldrb	r2, [r4, #4]
1000941a:	217d      	movs	r1, #125	; 0x7d
1000941c:	2069      	movs	r0, #105	; 0x69
1000941e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ZA_OFFSET_L, data[5]);
10009420:	7962      	ldrb	r2, [r4, #5]
10009422:	217e      	movs	r1, #126	; 0x7e
10009424:	2069      	movs	r0, #105	; 0x69
10009426:	47b0      	blx	r6

	// Output scaled accelerometer biases for display in the main program
	dest2[0] = (float)accel_bias[0]/(float)accelsensitivity;
10009428:	4e13      	ldr	r6, [pc, #76]	; (10009478 <sms_mpu_calibrate+0x368>)
1000942a:	0028      	movs	r0, r5
1000942c:	47b0      	blx	r6
1000942e:	4c15      	ldr	r4, [pc, #84]	; (10009484 <sms_mpu_calibrate+0x374>)
10009430:	21e2      	movs	r1, #226	; 0xe2
10009432:	0589      	lsls	r1, r1, #22
10009434:	47a0      	blx	r4
10009436:	9d05      	ldr	r5, [sp, #20]
10009438:	6028      	str	r0, [r5, #0]
	dest2[1] = (float)accel_bias[1]/(float)accelsensitivity;
1000943a:	4650      	mov	r0, sl
1000943c:	47b0      	blx	r6
1000943e:	21e2      	movs	r1, #226	; 0xe2
10009440:	0589      	lsls	r1, r1, #22
10009442:	47a0      	blx	r4
10009444:	6068      	str	r0, [r5, #4]
	dest2[2] = (float)accel_bias[2]/(float)accelsensitivity;
10009446:	4648      	mov	r0, r9
10009448:	47b0      	blx	r6
1000944a:	21e2      	movs	r1, #226	; 0xe2
1000944c:	0589      	lsls	r1, r1, #22
1000944e:	47a0      	blx	r4
10009450:	60a8      	str	r0, [r5, #8]
	//uint32_t p2 = dest1[2] * 10000;
	//uint32_t p3 = dest2[0] * 10000;
	//uint32_t p4 = dest2[1] * 10000;
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}
10009452:	b00f      	add	sp, #60	; 0x3c
10009454:	bc3c      	pop	{r2, r3, r4, r5}
10009456:	4690      	mov	r8, r2
10009458:	4699      	mov	r9, r3
1000945a:	46a2      	mov	sl, r4
1000945c:	46ab      	mov	fp, r5
1000945e:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009460:	100090f9 	.word	0x100090f9
10009464:	1000a391 	.word	0x1000a391
10009468:	10008f49 	.word	0x10008f49
1000946c:	100128a1 	.word	0x100128a1
10009470:	100129b5 	.word	0x100129b5
10009474:	ffffc000 	.word	0xffffc000
10009478:	1001364d 	.word	0x1001364d
1000947c:	10012d41 	.word	0x10012d41
10009480:	43030000 	.word	0x43030000
10009484:	100130d5 	.word	0x100130d5

10009488 <sms_mpu_comp_initialize>:
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
	delay_ms(100);
}

void sms_mpu_comp_initialize(float *destination)
{
10009488:	b5f0      	push	{r4, r5, r6, r7, lr}
1000948a:	465f      	mov	r7, fp
1000948c:	4656      	mov	r6, sl
1000948e:	464d      	mov	r5, r9
10009490:	4644      	mov	r4, r8
10009492:	b4f0      	push	{r4, r5, r6, r7}
10009494:	b083      	sub	sp, #12
10009496:	0007      	movs	r7, r0
	uint8_t m_scale = MFS_16BITS;	// Choose either 14-bit or 16-bit magnetometer resolution
	uint8_t m_mode = 0x02;	// 2 for 8 Hz, 6 for 100 Hz continuous magnetometer data read
	// First extract the factory calibration for each magnetometer axis
	uint8_t data[3];  // x/y/z gyro calibration data stored here
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009498:	2200      	movs	r2, #0
1000949a:	210a      	movs	r1, #10
1000949c:	200c      	movs	r0, #12
1000949e:	4d2b      	ldr	r5, [pc, #172]	; (1000954c <sms_mpu_comp_initialize+0xc4>)
100094a0:	47a8      	blx	r5
	delay_ms(10);
100094a2:	200a      	movs	r0, #10
100094a4:	4b2a      	ldr	r3, [pc, #168]	; (10009550 <sms_mpu_comp_initialize+0xc8>)
100094a6:	4798      	blx	r3
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
100094a8:	220f      	movs	r2, #15
100094aa:	210a      	movs	r1, #10
100094ac:	200c      	movs	r0, #12
100094ae:	47a8      	blx	r5
	delay_ms(10);
100094b0:	200a      	movs	r0, #10
100094b2:	4b27      	ldr	r3, [pc, #156]	; (10009550 <sms_mpu_comp_initialize+0xc8>)
100094b4:	4798      	blx	r3
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100094b6:	ae01      	add	r6, sp, #4
100094b8:	0033      	movs	r3, r6
100094ba:	2203      	movs	r2, #3
100094bc:	2110      	movs	r1, #16
100094be:	200c      	movs	r0, #12
100094c0:	4c24      	ldr	r4, [pc, #144]	; (10009554 <sms_mpu_comp_initialize+0xcc>)
100094c2:	47a0      	blx	r4
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
	delay_ms(10);
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x0F); // Enter Fuse ROM access mode
	delay_ms(10);
	readBytes(AK8963_ADDRESS, AK8963_ASAX, 3, &data);  // Read the x-, y-, and z-axis calibration values
	destination[0] =  (float)(data[0] - 128)/256. + 1.;   // Return x-axis sensitivity adjustment values, etc.
100094c4:	7830      	ldrb	r0, [r6, #0]
100094c6:	3880      	subs	r0, #128	; 0x80
100094c8:	4b23      	ldr	r3, [pc, #140]	; (10009558 <sms_mpu_comp_initialize+0xd0>)
100094ca:	469b      	mov	fp, r3
100094cc:	4798      	blx	r3
100094ce:	4b23      	ldr	r3, [pc, #140]	; (1000955c <sms_mpu_comp_initialize+0xd4>)
100094d0:	469a      	mov	sl, r3
100094d2:	4798      	blx	r3
100094d4:	4b22      	ldr	r3, [pc, #136]	; (10009560 <sms_mpu_comp_initialize+0xd8>)
100094d6:	4699      	mov	r9, r3
100094d8:	2200      	movs	r2, #0
100094da:	4b22      	ldr	r3, [pc, #136]	; (10009564 <sms_mpu_comp_initialize+0xdc>)
100094dc:	47c8      	blx	r9
100094de:	4b22      	ldr	r3, [pc, #136]	; (10009568 <sms_mpu_comp_initialize+0xe0>)
100094e0:	4698      	mov	r8, r3
100094e2:	2200      	movs	r2, #0
100094e4:	4b21      	ldr	r3, [pc, #132]	; (1000956c <sms_mpu_comp_initialize+0xe4>)
100094e6:	47c0      	blx	r8
100094e8:	4b21      	ldr	r3, [pc, #132]	; (10009570 <sms_mpu_comp_initialize+0xe8>)
100094ea:	4798      	blx	r3
100094ec:	6038      	str	r0, [r7, #0]
	destination[1] =  (float)(data[1] - 128)/256. + 1.;
100094ee:	7870      	ldrb	r0, [r6, #1]
100094f0:	3880      	subs	r0, #128	; 0x80
100094f2:	47d8      	blx	fp
100094f4:	47d0      	blx	sl
100094f6:	2200      	movs	r2, #0
100094f8:	4b1a      	ldr	r3, [pc, #104]	; (10009564 <sms_mpu_comp_initialize+0xdc>)
100094fa:	47c8      	blx	r9
100094fc:	2200      	movs	r2, #0
100094fe:	4b1b      	ldr	r3, [pc, #108]	; (1000956c <sms_mpu_comp_initialize+0xe4>)
10009500:	47c0      	blx	r8
10009502:	4b1b      	ldr	r3, [pc, #108]	; (10009570 <sms_mpu_comp_initialize+0xe8>)
10009504:	4798      	blx	r3
10009506:	6078      	str	r0, [r7, #4]
	destination[2] =  (float)(data[2] - 128)/256. + 1.;
10009508:	78b0      	ldrb	r0, [r6, #2]
1000950a:	3880      	subs	r0, #128	; 0x80
1000950c:	47d8      	blx	fp
1000950e:	47d0      	blx	sl
10009510:	2200      	movs	r2, #0
10009512:	4b14      	ldr	r3, [pc, #80]	; (10009564 <sms_mpu_comp_initialize+0xdc>)
10009514:	47c8      	blx	r9
10009516:	2200      	movs	r2, #0
10009518:	4b14      	ldr	r3, [pc, #80]	; (1000956c <sms_mpu_comp_initialize+0xe4>)
1000951a:	47c0      	blx	r8
1000951c:	4b14      	ldr	r3, [pc, #80]	; (10009570 <sms_mpu_comp_initialize+0xe8>)
1000951e:	4798      	blx	r3
10009520:	60b8      	str	r0, [r7, #8]
	writeByte(AK8963_ADDRESS, AK8963_CNTL, 0x00); // Power down magnetometer
10009522:	2200      	movs	r2, #0
10009524:	210a      	movs	r1, #10
10009526:	200c      	movs	r0, #12
10009528:	47a8      	blx	r5
	delay_ms(10);
1000952a:	200a      	movs	r0, #10
1000952c:	4b08      	ldr	r3, [pc, #32]	; (10009550 <sms_mpu_comp_initialize+0xc8>)
1000952e:	4798      	blx	r3
	// Configure the magnetometer for continuous read and highest resolution
	// set Mscale bit 4 to 1 (0) to enable 16 (14) bit resolution in CNTL register,
	// and enable continuous mode data acquisition Mmode (bits [3:0]), 0010 for 8 Hz and 0110 for 100 Hz sample rates
	writeByte(AK8963_ADDRESS, AK8963_CNTL, m_scale << 4 | m_mode); // Set magnetometer data resolution and sample ODR
10009530:	2212      	movs	r2, #18
10009532:	210a      	movs	r1, #10
10009534:	200c      	movs	r0, #12
10009536:	47a8      	blx	r5
	delay_ms(10);
10009538:	200a      	movs	r0, #10
1000953a:	4b05      	ldr	r3, [pc, #20]	; (10009550 <sms_mpu_comp_initialize+0xc8>)
1000953c:	4798      	blx	r3
}
1000953e:	b003      	add	sp, #12
10009540:	bc3c      	pop	{r2, r3, r4, r5}
10009542:	4690      	mov	r8, r2
10009544:	4699      	mov	r9, r3
10009546:	46a2      	mov	sl, r4
10009548:	46ab      	mov	fp, r5
1000954a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000954c:	100090f9 	.word	0x100090f9
10009550:	1000a391 	.word	0x1000a391
10009554:	10008f49 	.word	0x10008f49
10009558:	1001364d 	.word	0x1001364d
1000955c:	10015335 	.word	0x10015335
10009560:	100145f9 	.word	0x100145f9
10009564:	3f700000 	.word	0x3f700000
10009568:	10013759 	.word	0x10013759
1000956c:	3ff00000 	.word	0x3ff00000
10009570:	100153dd 	.word	0x100153dd

10009574 <readByte>:
{
	sms_i2c_master_write(address, subAddress, 1, &data);
}

uint8_t readByte(uint8_t address, uint8_t subAddress)
{
10009574:	b530      	push	{r4, r5, lr}
10009576:	b083      	sub	sp, #12
	uint8_t data[1];
	sms_i2c_master_read(address, subAddress, 1, data);
10009578:	ac01      	add	r4, sp, #4
1000957a:	0023      	movs	r3, r4
1000957c:	2201      	movs	r2, #1
1000957e:	4d02      	ldr	r5, [pc, #8]	; (10009588 <readByte+0x14>)
10009580:	47a8      	blx	r5
	return data[0];
10009582:	7820      	ldrb	r0, [r4, #0]
}
10009584:	b003      	add	sp, #12
10009586:	bd30      	pop	{r4, r5, pc}
10009588:	10008f49 	.word	0x10008f49

1000958c <sms_mpu_comp_check>:
	}
	return retVal;
}

int sms_mpu_comp_check(void)
{
1000958c:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t d = readByte(AK8963_ADDRESS, AK8963_WHO_AM_I);
1000958e:	2100      	movs	r1, #0
10009590:	200c      	movs	r0, #12
10009592:	4b03      	ldr	r3, [pc, #12]	; (100095a0 <sms_mpu_comp_check+0x14>)
10009594:	4798      	blx	r3
	if(d == 0x48) {
		//DBG_LOG("[sms_mpu_comp_check]\t\tAK8963 is online...");
		retVal = 0;
	}
	return retVal;
10009596:	3848      	subs	r0, #72	; 0x48
10009598:	1e43      	subs	r3, r0, #1
1000959a:	4198      	sbcs	r0, r3
1000959c:	4240      	negs	r0, r0
}
1000959e:	bd10      	pop	{r4, pc}
100095a0:	10009575 	.word	0x10009575

100095a4 <sms_mpu_initialize>:
	//uint32_t p5 = dest2[2] * 10000;
	//DBG_LOG("destX: %ld %ld %ld / %ld %ld %ld", p0, p1, p2, p3, p4, p5);
}

void sms_mpu_initialize(void)
{
100095a4:	b570      	push	{r4, r5, r6, lr}
	// Initialize variables
	q[0] = 1.0;
100095a6:	4a25      	ldr	r2, [pc, #148]	; (1000963c <sms_mpu_initialize+0x98>)
100095a8:	23fe      	movs	r3, #254	; 0xfe
100095aa:	059b      	lsls	r3, r3, #22
100095ac:	6013      	str	r3, [r2, #0]
	q[1] = 0.0;
100095ae:	2300      	movs	r3, #0
100095b0:	6053      	str	r3, [r2, #4]
	q[2] = 0.0;
100095b2:	6093      	str	r3, [r2, #8]
	q[3] = 0.0;
100095b4:	60d3      	str	r3, [r2, #12]
	eInt[0] = 0.0;
100095b6:	4a22      	ldr	r2, [pc, #136]	; (10009640 <sms_mpu_initialize+0x9c>)
100095b8:	6013      	str	r3, [r2, #0]
	eInt[1] = 0.0;
100095ba:	6053      	str	r3, [r2, #4]
	eInt[2] = 0.0;
100095bc:	6093      	str	r3, [r2, #8]
	uint8_t a_scale = AFS_2G;
	uint8_t g_scale = GFS_250DPS;

	// wake up device
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x00); // Clear sleep mode bit (6), enable all sensors
100095be:	2200      	movs	r2, #0
100095c0:	216b      	movs	r1, #107	; 0x6b
100095c2:	2069      	movs	r0, #105	; 0x69
100095c4:	4c1f      	ldr	r4, [pc, #124]	; (10009644 <sms_mpu_initialize+0xa0>)
100095c6:	47a0      	blx	r4
	delay_ms(100); // Wait for all registers to reset
100095c8:	2064      	movs	r0, #100	; 0x64
100095ca:	4d1f      	ldr	r5, [pc, #124]	; (10009648 <sms_mpu_initialize+0xa4>)
100095cc:	47a8      	blx	r5

	// get stable time source
	writeByte(MPU9250_ADDRESS, PWR_MGMT_1, 0x01);  // Auto select clock source to be PLL gyroscope reference if ready else
100095ce:	2201      	movs	r2, #1
100095d0:	216b      	movs	r1, #107	; 0x6b
100095d2:	2069      	movs	r0, #105	; 0x69
100095d4:	47a0      	blx	r4
	delay_ms(200);
100095d6:	20c8      	movs	r0, #200	; 0xc8
100095d8:	47a8      	blx	r5
	// minimum delay time for this setting is 5.9 ms, which means sensor fusion update rates cannot
	// be higher than 1 / 0.0059 = 170 Hz
	// DLPF_CFG = bits 2:0 = 011; this limits the sample rate to 1000 Hz for both
	// With the MPU9250, it is possible to get gyro sample rates of 32 kHz (!), 8 kHz, or 1 kHz
	// writeByte(MPU9250_ADDRESS, CONFIG, 0x03);
	writeByte(MPU9250_ADDRESS, CONFIG, 0x06);		// gyro bandwidth = 10 Hz
100095da:	2206      	movs	r2, #6
100095dc:	211a      	movs	r1, #26
100095de:	2069      	movs	r0, #105	; 0x69
100095e0:	47a0      	blx	r4

	// Set sample rate = gyroscope output rate/(1 + SMPLRT_DIV)
	// writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x04);  	// Use a 200 Hz rate; a rate consistent with the filter update rate
	// // determined inset in CONFIG above
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x08);  	// Use a 111 Hz rate; a rate consistent with the filter update rate
100095e2:	2208      	movs	r2, #8
100095e4:	2119      	movs	r1, #25
100095e6:	2069      	movs	r0, #105	; 0x69
100095e8:	47a0      	blx	r4
	
	// Set gyroscope full scale range
	// Range selects FS_SEL and AFS_SEL are 0 - 3, so 2-bit values are left-shifted into positions 4:3
	uint8_t c = readByte(MPU9250_ADDRESS, GYRO_CONFIG); // get current GYRO_CONFIG register value
100095ea:	211b      	movs	r1, #27
100095ec:	2069      	movs	r0, #105	; 0x69
100095ee:	4e17      	ldr	r6, [pc, #92]	; (1000964c <sms_mpu_initialize+0xa8>)
100095f0:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x02; // Clear Fchoice bits [1:0]
	c = c & ~0x18; // Clear AFS bits [4:3]
	c = c | (g_scale << 3); // Set full scale range for the gyro
	// c =| 0x00; // Set Fchoice for the gyro to 11 by writing its inverse to bits 1:0 of GYRO_CONFIG
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, c ); // Write new GYRO_CONFIG value to register
100095f2:	23e5      	movs	r3, #229	; 0xe5
100095f4:	0002      	movs	r2, r0
100095f6:	401a      	ands	r2, r3
100095f8:	211b      	movs	r1, #27
100095fa:	2069      	movs	r0, #105	; 0x69
100095fc:	47a0      	blx	r4
	
	// Set accelerometer full-scale range configuration
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG); // get current ACCEL_CONFIG register value
100095fe:	211c      	movs	r1, #28
10009600:	2069      	movs	r0, #105	; 0x69
10009602:	47b0      	blx	r6
	// c = c & ~0xE0; // Clear self-test bits [7:5]
	c = c & ~0x18;  // Clear AFS bits [4:3]
	c = c | (a_scale << 3); // Set full scale range for the accelerometer
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, c); // Write new ACCEL_CONFIG register value
10009604:	23e7      	movs	r3, #231	; 0xe7
10009606:	0002      	movs	r2, r0
10009608:	401a      	ands	r2, r3
1000960a:	211c      	movs	r1, #28
1000960c:	2069      	movs	r0, #105	; 0x69
1000960e:	47a0      	blx	r4

	// Set accelerometer sample rate configuration
	// It is possible to get a 4 kHz sample rate from the accelerometer by choosing 1 for
	// accel_fchoice_b bit [3]; in this case the bandwidth is 1.13 kHz
	c = readByte(MPU9250_ADDRESS, ACCEL_CONFIG2); // get current ACCEL_CONFIG2 register value
10009610:	211d      	movs	r1, #29
10009612:	2069      	movs	r0, #105	; 0x69
10009614:	47b0      	blx	r6
	c = c & ~0x0F; // Clear accel_fchoice_b (bit 3) and A_DLPFG (bits [2:0])
10009616:	23f0      	movs	r3, #240	; 0xf0
10009618:	0002      	movs	r2, r0
1000961a:	401a      	ands	r2, r3
	// c = c | 0x03;  // Set accelerometer rate to 1 kHz and bandwidth to 41 Hz
	c = c | 0x06;  // Set accelerometer rate to 1 kHz and bandwidth to 10 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, c); // Write new ACCEL_CONFIG2 register value
1000961c:	3bea      	subs	r3, #234	; 0xea
1000961e:	431a      	orrs	r2, r3
10009620:	211d      	movs	r1, #29
10009622:	2069      	movs	r0, #105	; 0x69
10009624:	47a0      	blx	r4
	// Configure Interrupts and Bypass Enable
	// Set interrupt pin active high, push-pull, hold interrupt pin level HIGH until interrupt cleared,
	// clear on read of INT_STATUS, and enable I2C_BYPASS_EN so additional chips
	// can join the I2C bus and all can be controlled by the Arduino as master
	//writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x22);
	writeByte(MPU9250_ADDRESS, INT_PIN_CFG, 0x02);
10009626:	2202      	movs	r2, #2
10009628:	2137      	movs	r1, #55	; 0x37
1000962a:	2069      	movs	r0, #105	; 0x69
1000962c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, INT_ENABLE, 0x01);  // Enable data ready (bit 0) interrupt
1000962e:	2201      	movs	r2, #1
10009630:	2138      	movs	r1, #56	; 0x38
10009632:	2069      	movs	r0, #105	; 0x69
10009634:	47a0      	blx	r4
	delay_ms(100);
10009636:	2064      	movs	r0, #100	; 0x64
10009638:	47a8      	blx	r5
}
1000963a:	bd70      	pop	{r4, r5, r6, pc}
1000963c:	10019668 	.word	0x10019668
10009640:	10019510 	.word	0x10019510
10009644:	100090f9 	.word	0x100090f9
10009648:	1000a391 	.word	0x1000a391
1000964c:	10009575 	.word	0x10009575

10009650 <sms_mpu_selftest>:
        DBG_LOG_DEV("[sms_mpu_define_services]\tServices defined, SMS MPU handle: %d", mpu_device.service_handler.serv_handle);
    }
}

void sms_mpu_selftest(float *destination)
{
10009650:	b5f0      	push	{r4, r5, r6, r7, lr}
10009652:	465f      	mov	r7, fp
10009654:	4656      	mov	r6, sl
10009656:	464d      	mov	r5, r9
10009658:	4644      	mov	r4, r8
1000965a:	b4f0      	push	{r4, r5, r6, r7}
1000965c:	b09d      	sub	sp, #116	; 0x74
1000965e:	9003      	str	r0, [sp, #12]
	uint8_t raw_data[6] = {0};
10009660:	2206      	movs	r2, #6
10009662:	2100      	movs	r1, #0
10009664:	a81a      	add	r0, sp, #104	; 0x68
10009666:	4ce0      	ldr	r4, [pc, #896]	; (100099e8 <sms_mpu_selftest+0x398>)
10009668:	47a0      	blx	r4
	uint8_t stest[6];
	int32_t g_avg[3] = {0}, a_avg[3] = {0}, a_stavg[3] = {0}, g_stavg[3] = {0};
1000966a:	220c      	movs	r2, #12
1000966c:	2100      	movs	r1, #0
1000966e:	a817      	add	r0, sp, #92	; 0x5c
10009670:	47a0      	blx	r4
10009672:	220c      	movs	r2, #12
10009674:	2100      	movs	r1, #0
10009676:	a814      	add	r0, sp, #80	; 0x50
10009678:	47a0      	blx	r4
1000967a:	220c      	movs	r2, #12
1000967c:	2100      	movs	r1, #0
1000967e:	a811      	add	r0, sp, #68	; 0x44
10009680:	47a0      	blx	r4
10009682:	220c      	movs	r2, #12
10009684:	2100      	movs	r1, #0
10009686:	a80e      	add	r0, sp, #56	; 0x38
10009688:	47a0      	blx	r4
	float factory_trim[6];
	uint8_t fs = 0;
	
	writeByte(MPU9250_ADDRESS, SMPLRT_DIV, 0x00);	// Set gyro sample rate to 1 kHz
1000968a:	2200      	movs	r2, #0
1000968c:	2119      	movs	r1, #25
1000968e:	2069      	movs	r0, #105	; 0x69
10009690:	4cd6      	ldr	r4, [pc, #856]	; (100099ec <sms_mpu_selftest+0x39c>)
10009692:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
10009694:	2202      	movs	r2, #2
10009696:	211a      	movs	r1, #26
10009698:	2069      	movs	r0, #105	; 0x69
1000969a:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
1000969c:	2200      	movs	r2, #0
1000969e:	211b      	movs	r1, #27
100096a0:	2069      	movs	r0, #105	; 0x69
100096a2:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
100096a4:	2202      	movs	r2, #2
100096a6:	211d      	movs	r1, #29
100096a8:	2069      	movs	r0, #105	; 0x69
100096aa:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
100096ac:	2200      	movs	r2, #0
100096ae:	211c      	movs	r1, #28
100096b0:	2069      	movs	r0, #105	; 0x69
100096b2:	47a0      	blx	r4
100096b4:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100096b6:	ac1a      	add	r4, sp, #104	; 0x68
100096b8:	4ecd      	ldr	r6, [pc, #820]	; (100099f0 <sms_mpu_selftest+0x3a0>)
100096ba:	0023      	movs	r3, r4
100096bc:	2206      	movs	r2, #6
100096be:	213b      	movs	r1, #59	; 0x3b
100096c0:	2069      	movs	r0, #105	; 0x69
100096c2:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
100096c4:	7823      	ldrb	r3, [r4, #0]
100096c6:	021b      	lsls	r3, r3, #8
100096c8:	7862      	ldrb	r2, [r4, #1]
100096ca:	4313      	orrs	r3, r2
100096cc:	b21b      	sxth	r3, r3
100096ce:	9a14      	ldr	r2, [sp, #80]	; 0x50
100096d0:	4694      	mov	ip, r2
100096d2:	4463      	add	r3, ip
100096d4:	9314      	str	r3, [sp, #80]	; 0x50
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
100096d6:	78a3      	ldrb	r3, [r4, #2]
100096d8:	021b      	lsls	r3, r3, #8
100096da:	78e2      	ldrb	r2, [r4, #3]
100096dc:	4313      	orrs	r3, r2
100096de:	b21b      	sxth	r3, r3
100096e0:	9a15      	ldr	r2, [sp, #84]	; 0x54
100096e2:	9200      	str	r2, [sp, #0]
100096e4:	4694      	mov	ip, r2
100096e6:	4463      	add	r3, ip
100096e8:	9315      	str	r3, [sp, #84]	; 0x54
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
100096ea:	7923      	ldrb	r3, [r4, #4]
100096ec:	021b      	lsls	r3, r3, #8
100096ee:	7962      	ldrb	r2, [r4, #5]
100096f0:	4313      	orrs	r3, r2
100096f2:	b21b      	sxth	r3, r3
100096f4:	9a16      	ldr	r2, [sp, #88]	; 0x58
100096f6:	9200      	str	r2, [sp, #0]
100096f8:	4694      	mov	ip, r2
100096fa:	4463      	add	r3, ip
100096fc:	9316      	str	r3, [sp, #88]	; 0x58
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100096fe:	0023      	movs	r3, r4
10009700:	2206      	movs	r2, #6
10009702:	2143      	movs	r1, #67	; 0x43
10009704:	2069      	movs	r0, #105	; 0x69
10009706:	47b0      	blx	r6
		a_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		a_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		a_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
10009708:	7823      	ldrb	r3, [r4, #0]
1000970a:	021b      	lsls	r3, r3, #8
1000970c:	7862      	ldrb	r2, [r4, #1]
1000970e:	4313      	orrs	r3, r2
10009710:	b21b      	sxth	r3, r3
10009712:	9a17      	ldr	r2, [sp, #92]	; 0x5c
10009714:	4694      	mov	ip, r2
10009716:	4463      	add	r3, ip
10009718:	9317      	str	r3, [sp, #92]	; 0x5c
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
1000971a:	78a3      	ldrb	r3, [r4, #2]
1000971c:	021b      	lsls	r3, r3, #8
1000971e:	78e2      	ldrb	r2, [r4, #3]
10009720:	4313      	orrs	r3, r2
10009722:	b21b      	sxth	r3, r3
10009724:	9a18      	ldr	r2, [sp, #96]	; 0x60
10009726:	9200      	str	r2, [sp, #0]
10009728:	4694      	mov	ip, r2
1000972a:	4463      	add	r3, ip
1000972c:	9318      	str	r3, [sp, #96]	; 0x60
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
1000972e:	7923      	ldrb	r3, [r4, #4]
10009730:	021b      	lsls	r3, r3, #8
10009732:	7962      	ldrb	r2, [r4, #5]
10009734:	4313      	orrs	r3, r2
10009736:	b21b      	sxth	r3, r3
10009738:	9a19      	ldr	r2, [sp, #100]	; 0x64
1000973a:	9200      	str	r2, [sp, #0]
1000973c:	4694      	mov	ip, r2
1000973e:	4463      	add	r3, ip
10009740:	9319      	str	r3, [sp, #100]	; 0x64
10009742:	3d01      	subs	r5, #1
10009744:	b2ed      	uxtb	r5, r5
	writeByte(MPU9250_ADDRESS, CONFIG, 0x02);		// Set gyro sample rate to 1 kHz and DLPF to 92 Hz
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG, fs<<3);	// Set full scale range for the gyro to 250 dps
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG2, 0x02);	// Set accelerometer rate to 1 kHz and bandwidth to 92 Hz
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, fs<<3);	// Set full scale range for the accelerometer to 2 g
	
	for(uint8_t i = 0; i < 200; i++) { // get average current values of gyro and accelerometer
10009746:	2d00      	cmp	r5, #0
10009748:	d1b7      	bne.n	100096ba <sms_mpu_selftest+0x6a>
1000974a:	2400      	movs	r4, #0
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
		a_avg[i] /= 200;
1000974c:	4ea9      	ldr	r6, [pc, #676]	; (100099f4 <sms_mpu_selftest+0x3a4>)
1000974e:	ad14      	add	r5, sp, #80	; 0x50
10009750:	21c8      	movs	r1, #200	; 0xc8
10009752:	5960      	ldr	r0, [r4, r5]
10009754:	47b0      	blx	r6
10009756:	5160      	str	r0, [r4, r5]
		g_avg[i] /= 200;
10009758:	ad17      	add	r5, sp, #92	; 0x5c
1000975a:	21c8      	movs	r1, #200	; 0xc8
1000975c:	5960      	ldr	r0, [r4, r5]
1000975e:	47b0      	blx	r6
10009760:	5160      	str	r0, [r4, r5]
10009762:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);
		g_avg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]);
		g_avg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]);
		g_avg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]);
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average current readings
10009764:	2c0c      	cmp	r4, #12
10009766:	d1f2      	bne.n	1000974e <sms_mpu_selftest+0xfe>
		a_avg[i] /= 200;
		g_avg[i] /= 200;
	}
	
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
10009768:	22e0      	movs	r2, #224	; 0xe0
1000976a:	211c      	movs	r1, #28
1000976c:	2069      	movs	r0, #105	; 0x69
1000976e:	4c9f      	ldr	r4, [pc, #636]	; (100099ec <sms_mpu_selftest+0x39c>)
10009770:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
10009772:	22e0      	movs	r2, #224	; 0xe0
10009774:	211c      	movs	r1, #28
10009776:	2069      	movs	r0, #105	; 0x69
10009778:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
1000977a:	2019      	movs	r0, #25
1000977c:	4b9e      	ldr	r3, [pc, #632]	; (100099f8 <sms_mpu_selftest+0x3a8>)
1000977e:	4798      	blx	r3
10009780:	25c8      	movs	r5, #200	; 0xc8
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
10009782:	ac1a      	add	r4, sp, #104	; 0x68
10009784:	4e9a      	ldr	r6, [pc, #616]	; (100099f0 <sms_mpu_selftest+0x3a0>)
10009786:	0023      	movs	r3, r4
10009788:	2206      	movs	r2, #6
1000978a:	213b      	movs	r1, #59	; 0x3b
1000978c:	2069      	movs	r0, #105	; 0x69
1000978e:	47b0      	blx	r6
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
		readBytes(MPU9250_ADDRESS, ACCEL_XOUT_H, 6, raw_data);  // Read the six raw data registers into data array
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
10009790:	7823      	ldrb	r3, [r4, #0]
10009792:	021b      	lsls	r3, r3, #8
10009794:	7862      	ldrb	r2, [r4, #1]
10009796:	4313      	orrs	r3, r2
10009798:	b21b      	sxth	r3, r3
1000979a:	9a11      	ldr	r2, [sp, #68]	; 0x44
1000979c:	4694      	mov	ip, r2
1000979e:	4463      	add	r3, ip
100097a0:	9311      	str	r3, [sp, #68]	; 0x44
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100097a2:	78a3      	ldrb	r3, [r4, #2]
100097a4:	021b      	lsls	r3, r3, #8
100097a6:	78e2      	ldrb	r2, [r4, #3]
100097a8:	4313      	orrs	r3, r2
100097aa:	b21b      	sxth	r3, r3
100097ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
100097ae:	9200      	str	r2, [sp, #0]
100097b0:	4694      	mov	ip, r2
100097b2:	4463      	add	r3, ip
100097b4:	9312      	str	r3, [sp, #72]	; 0x48
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100097b6:	7923      	ldrb	r3, [r4, #4]
100097b8:	021b      	lsls	r3, r3, #8
100097ba:	7962      	ldrb	r2, [r4, #5]
100097bc:	4313      	orrs	r3, r2
100097be:	b21b      	sxth	r3, r3
100097c0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
100097c2:	9200      	str	r2, [sp, #0]
100097c4:	4694      	mov	ip, r2
100097c6:	4463      	add	r3, ip
100097c8:	9313      	str	r3, [sp, #76]	; 0x4c
	return data[0];
}

void readBytes(uint8_t address, uint8_t subAddress, uint8_t count, uint8_t * dest)
{
	sms_i2c_master_read(address, subAddress, count, dest);
100097ca:	0023      	movs	r3, r4
100097cc:	2206      	movs	r2, #6
100097ce:	2143      	movs	r1, #67	; 0x43
100097d0:	2069      	movs	r0, #105	; 0x69
100097d2:	47b0      	blx	r6
		a_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		a_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		a_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
		
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
100097d4:	7823      	ldrb	r3, [r4, #0]
100097d6:	021b      	lsls	r3, r3, #8
100097d8:	7862      	ldrb	r2, [r4, #1]
100097da:	4313      	orrs	r3, r2
100097dc:	b21b      	sxth	r3, r3
100097de:	9a0e      	ldr	r2, [sp, #56]	; 0x38
100097e0:	4694      	mov	ip, r2
100097e2:	4463      	add	r3, ip
100097e4:	930e      	str	r3, [sp, #56]	; 0x38
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
100097e6:	78a3      	ldrb	r3, [r4, #2]
100097e8:	021b      	lsls	r3, r3, #8
100097ea:	78e2      	ldrb	r2, [r4, #3]
100097ec:	4313      	orrs	r3, r2
100097ee:	b21b      	sxth	r3, r3
100097f0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
100097f2:	9200      	str	r2, [sp, #0]
100097f4:	4694      	mov	ip, r2
100097f6:	4463      	add	r3, ip
100097f8:	930f      	str	r3, [sp, #60]	; 0x3c
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
100097fa:	7923      	ldrb	r3, [r4, #4]
100097fc:	021b      	lsls	r3, r3, #8
100097fe:	7962      	ldrb	r2, [r4, #5]
10009800:	4313      	orrs	r3, r2
10009802:	b21b      	sxth	r3, r3
10009804:	9a10      	ldr	r2, [sp, #64]	; 0x40
10009806:	9200      	str	r2, [sp, #0]
10009808:	4694      	mov	ip, r2
1000980a:	4463      	add	r3, ip
1000980c:	9310      	str	r3, [sp, #64]	; 0x40
1000980e:	3d01      	subs	r5, #1
10009810:	b2ed      	uxtb	r5, r5
	// Configure the accelerometer for self-test
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set accelerometer range to +/- 2 g
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0xE0); // Enable self test on all three axes and set (MPU9250_ADDRESS, GYRO_CONFIG,  0xE0); // Enable self test on all three axes and set gyro range to +/- 250 degrees/s
	delay_ms(25);  // Delay a while to let the device stabilize
	
	for(uint8_t i = 0; i < 200; i++) {  // get average self-test values of gyro and accelerometer
10009812:	2d00      	cmp	r5, #0
10009814:	d1b7      	bne.n	10009786 <sms_mpu_selftest+0x136>
10009816:	2400      	movs	r4, #0
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
		a_stavg[i] /= 200;
10009818:	4e76      	ldr	r6, [pc, #472]	; (100099f4 <sms_mpu_selftest+0x3a4>)
1000981a:	ad11      	add	r5, sp, #68	; 0x44
1000981c:	21c8      	movs	r1, #200	; 0xc8
1000981e:	5960      	ldr	r0, [r4, r5]
10009820:	47b0      	blx	r6
10009822:	5160      	str	r0, [r4, r5]
		g_stavg[i] /= 200;
10009824:	ad0e      	add	r5, sp, #56	; 0x38
10009826:	21c8      	movs	r1, #200	; 0xc8
10009828:	5960      	ldr	r0, [r4, r5]
1000982a:	47b0      	blx	r6
1000982c:	5160      	str	r0, [r4, r5]
1000982e:	3404      	adds	r4, #4
		readBytes(MPU9250_ADDRESS, GYRO_XOUT_H, 6, raw_data);  // Read the six raw data registers sequentially into data array
		g_stavg[0] += (int16_t)(((int16_t)raw_data[0] << 8) | raw_data[1]) ;  // Turn the MSB and LSB into a signed 16-bit value
		g_stavg[1] += (int16_t)(((int16_t)raw_data[2] << 8) | raw_data[3]) ;
		g_stavg[2] += (int16_t)(((int16_t)raw_data[4] << 8) | raw_data[5]) ;
	}
	for(uint8_t i = 0; i < 3; i++) { // get average of 200 values and store as average self-test readings
10009830:	2c0c      	cmp	r4, #12
10009832:	d1f2      	bne.n	1000981a <sms_mpu_selftest+0x1ca>
		a_stavg[i] /= 200;
		g_stavg[i] /= 200;
	}

	// Configure the gyro and accelerometer for normal operation
	writeByte(MPU9250_ADDRESS, ACCEL_CONFIG, 0x00);
10009834:	2200      	movs	r2, #0
10009836:	211c      	movs	r1, #28
10009838:	2069      	movs	r0, #105	; 0x69
1000983a:	4c6c      	ldr	r4, [pc, #432]	; (100099ec <sms_mpu_selftest+0x39c>)
1000983c:	47a0      	blx	r4
	writeByte(MPU9250_ADDRESS, GYRO_CONFIG,  0x00);
1000983e:	2200      	movs	r2, #0
10009840:	211b      	movs	r1, #27
10009842:	2069      	movs	r0, #105	; 0x69
10009844:	47a0      	blx	r4
	delay_ms(25);  // Delay a while to let the device stabilize
10009846:	2019      	movs	r0, #25
10009848:	4b6b      	ldr	r3, [pc, #428]	; (100099f8 <sms_mpu_selftest+0x3a8>)
1000984a:	4798      	blx	r3

	// Retrieve accelerometer and gyro factory Self-Test Code from USR_Reg
	stest[0] = readByte(MPU9250_ADDRESS, SELF_TEST_X_ACCEL); // X-axis accel self-test results
1000984c:	210d      	movs	r1, #13
1000984e:	2069      	movs	r0, #105	; 0x69
10009850:	4d6a      	ldr	r5, [pc, #424]	; (100099fc <sms_mpu_selftest+0x3ac>)
10009852:	47a8      	blx	r5
10009854:	0004      	movs	r4, r0
	stest[1] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_ACCEL); // Y-axis accel self-test results
10009856:	210e      	movs	r1, #14
10009858:	2069      	movs	r0, #105	; 0x69
1000985a:	47a8      	blx	r5
1000985c:	9000      	str	r0, [sp, #0]
	stest[2] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_ACCEL); // Z-axis accel self-test results
1000985e:	210f      	movs	r1, #15
10009860:	2069      	movs	r0, #105	; 0x69
10009862:	47a8      	blx	r5
10009864:	9004      	str	r0, [sp, #16]
	stest[3] = readByte(MPU9250_ADDRESS, SELF_TEST_X_GYRO);  // X-axis gyro self-test results
10009866:	2100      	movs	r1, #0
10009868:	2069      	movs	r0, #105	; 0x69
1000986a:	47a8      	blx	r5
1000986c:	9005      	str	r0, [sp, #20]
	stest[4] = readByte(MPU9250_ADDRESS, SELF_TEST_Y_GYRO);  // Y-axis gyro self-test results
1000986e:	2101      	movs	r1, #1
10009870:	2069      	movs	r0, #105	; 0x69
10009872:	47a8      	blx	r5
10009874:	9006      	str	r0, [sp, #24]
	stest[5] = readByte(MPU9250_ADDRESS, SELF_TEST_Z_GYRO);  // Z-axis gyro self-test results
10009876:	2102      	movs	r1, #2
10009878:	2069      	movs	r0, #105	; 0x69
1000987a:	47a8      	blx	r5
1000987c:	9007      	str	r0, [sp, #28]

	// Retrieve factory self-test value from self-test code reads
	factory_trim[0] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[0] - 1.0) )); // FT[Xa] factory trim calculation
1000987e:	4b60      	ldr	r3, [pc, #384]	; (10009a00 <sms_mpu_selftest+0x3b0>)
10009880:	469a      	mov	sl, r3
10009882:	0020      	movs	r0, r4
10009884:	4798      	blx	r3
10009886:	4b5f      	ldr	r3, [pc, #380]	; (10009a04 <sms_mpu_selftest+0x3b4>)
10009888:	4699      	mov	r9, r3
1000988a:	4798      	blx	r3
1000988c:	4e5e      	ldr	r6, [pc, #376]	; (10009a08 <sms_mpu_selftest+0x3b8>)
1000988e:	2200      	movs	r2, #0
10009890:	4b5e      	ldr	r3, [pc, #376]	; (10009a0c <sms_mpu_selftest+0x3bc>)
10009892:	47b0      	blx	r6
10009894:	0002      	movs	r2, r0
10009896:	000b      	movs	r3, r1
10009898:	485d      	ldr	r0, [pc, #372]	; (10009a10 <sms_mpu_selftest+0x3c0>)
1000989a:	495e      	ldr	r1, [pc, #376]	; (10009a14 <sms_mpu_selftest+0x3c4>)
1000989c:	4f5e      	ldr	r7, [pc, #376]	; (10009a18 <sms_mpu_selftest+0x3c8>)
1000989e:	47b8      	blx	r7
100098a0:	4d5e      	ldr	r5, [pc, #376]	; (10009a1c <sms_mpu_selftest+0x3cc>)
100098a2:	2200      	movs	r2, #0
100098a4:	4b5e      	ldr	r3, [pc, #376]	; (10009a20 <sms_mpu_selftest+0x3d0>)
100098a6:	47a8      	blx	r5
100098a8:	4c5e      	ldr	r4, [pc, #376]	; (10009a24 <sms_mpu_selftest+0x3d4>)
100098aa:	47a0      	blx	r4
100098ac:	9008      	str	r0, [sp, #32]
	factory_trim[1] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[1] - 1.0) )); // FT[Ya] factory trim calculation
100098ae:	9800      	ldr	r0, [sp, #0]
100098b0:	47d0      	blx	sl
100098b2:	47c8      	blx	r9
100098b4:	2200      	movs	r2, #0
100098b6:	4b55      	ldr	r3, [pc, #340]	; (10009a0c <sms_mpu_selftest+0x3bc>)
100098b8:	47b0      	blx	r6
100098ba:	0002      	movs	r2, r0
100098bc:	000b      	movs	r3, r1
100098be:	4854      	ldr	r0, [pc, #336]	; (10009a10 <sms_mpu_selftest+0x3c0>)
100098c0:	4954      	ldr	r1, [pc, #336]	; (10009a14 <sms_mpu_selftest+0x3c4>)
100098c2:	47b8      	blx	r7
100098c4:	2200      	movs	r2, #0
100098c6:	4b56      	ldr	r3, [pc, #344]	; (10009a20 <sms_mpu_selftest+0x3d0>)
100098c8:	47a8      	blx	r5
100098ca:	47a0      	blx	r4
100098cc:	9009      	str	r0, [sp, #36]	; 0x24
	factory_trim[2] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[2] - 1.0) )); // FT[Za] factory trim calculation
100098ce:	9804      	ldr	r0, [sp, #16]
100098d0:	47d0      	blx	sl
100098d2:	47c8      	blx	r9
100098d4:	2200      	movs	r2, #0
100098d6:	4b4d      	ldr	r3, [pc, #308]	; (10009a0c <sms_mpu_selftest+0x3bc>)
100098d8:	47b0      	blx	r6
100098da:	0002      	movs	r2, r0
100098dc:	000b      	movs	r3, r1
100098de:	484c      	ldr	r0, [pc, #304]	; (10009a10 <sms_mpu_selftest+0x3c0>)
100098e0:	494c      	ldr	r1, [pc, #304]	; (10009a14 <sms_mpu_selftest+0x3c4>)
100098e2:	47b8      	blx	r7
100098e4:	2200      	movs	r2, #0
100098e6:	4b4e      	ldr	r3, [pc, #312]	; (10009a20 <sms_mpu_selftest+0x3d0>)
100098e8:	47a8      	blx	r5
100098ea:	47a0      	blx	r4
100098ec:	900a      	str	r0, [sp, #40]	; 0x28
	factory_trim[3] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[3] - 1.0) )); // FT[Xg] factory trim calculation
100098ee:	9805      	ldr	r0, [sp, #20]
100098f0:	47d0      	blx	sl
100098f2:	47c8      	blx	r9
100098f4:	2200      	movs	r2, #0
100098f6:	4b45      	ldr	r3, [pc, #276]	; (10009a0c <sms_mpu_selftest+0x3bc>)
100098f8:	47b0      	blx	r6
100098fa:	0002      	movs	r2, r0
100098fc:	000b      	movs	r3, r1
100098fe:	4844      	ldr	r0, [pc, #272]	; (10009a10 <sms_mpu_selftest+0x3c0>)
10009900:	4944      	ldr	r1, [pc, #272]	; (10009a14 <sms_mpu_selftest+0x3c4>)
10009902:	47b8      	blx	r7
10009904:	2200      	movs	r2, #0
10009906:	4b46      	ldr	r3, [pc, #280]	; (10009a20 <sms_mpu_selftest+0x3d0>)
10009908:	47a8      	blx	r5
1000990a:	47a0      	blx	r4
1000990c:	900b      	str	r0, [sp, #44]	; 0x2c
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
1000990e:	9806      	ldr	r0, [sp, #24]
10009910:	47d0      	blx	sl
10009912:	47c8      	blx	r9
10009914:	2200      	movs	r2, #0
10009916:	4b3d      	ldr	r3, [pc, #244]	; (10009a0c <sms_mpu_selftest+0x3bc>)
10009918:	47b0      	blx	r6
1000991a:	0002      	movs	r2, r0
1000991c:	000b      	movs	r3, r1
1000991e:	483c      	ldr	r0, [pc, #240]	; (10009a10 <sms_mpu_selftest+0x3c0>)
10009920:	493c      	ldr	r1, [pc, #240]	; (10009a14 <sms_mpu_selftest+0x3c4>)
10009922:	47b8      	blx	r7
10009924:	2200      	movs	r2, #0
10009926:	4b3e      	ldr	r3, [pc, #248]	; (10009a20 <sms_mpu_selftest+0x3d0>)
10009928:	47a8      	blx	r5
1000992a:	47a0      	blx	r4
1000992c:	900c      	str	r0, [sp, #48]	; 0x30
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
1000992e:	9807      	ldr	r0, [sp, #28]
10009930:	47d0      	blx	sl
10009932:	47c8      	blx	r9
10009934:	2200      	movs	r2, #0
10009936:	4b35      	ldr	r3, [pc, #212]	; (10009a0c <sms_mpu_selftest+0x3bc>)
10009938:	47b0      	blx	r6
1000993a:	0002      	movs	r2, r0
1000993c:	000b      	movs	r3, r1
1000993e:	4834      	ldr	r0, [pc, #208]	; (10009a10 <sms_mpu_selftest+0x3c0>)
10009940:	4934      	ldr	r1, [pc, #208]	; (10009a14 <sms_mpu_selftest+0x3c4>)
10009942:	47b8      	blx	r7
10009944:	2200      	movs	r2, #0
10009946:	4b36      	ldr	r3, [pc, #216]	; (10009a20 <sms_mpu_selftest+0x3d0>)
10009948:	47a8      	blx	r5
1000994a:	47a0      	blx	r4
1000994c:	900d      	str	r0, [sp, #52]	; 0x34
1000994e:	2400      	movs	r4, #0
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
10009950:	4b35      	ldr	r3, [pc, #212]	; (10009a28 <sms_mpu_selftest+0x3d8>)
10009952:	4699      	mov	r9, r3
10009954:	4d2b      	ldr	r5, [pc, #172]	; (10009a04 <sms_mpu_selftest+0x3b4>)
10009956:	4b31      	ldr	r3, [pc, #196]	; (10009a1c <sms_mpu_selftest+0x3cc>)
10009958:	4698      	mov	r8, r3
1000995a:	4b34      	ldr	r3, [pc, #208]	; (10009a2c <sms_mpu_selftest+0x3dc>)
1000995c:	469a      	mov	sl, r3
1000995e:	4f2a      	ldr	r7, [pc, #168]	; (10009a08 <sms_mpu_selftest+0x3b8>)
10009960:	4e30      	ldr	r6, [pc, #192]	; (10009a24 <sms_mpu_selftest+0x3d4>)
10009962:	ab11      	add	r3, sp, #68	; 0x44
10009964:	58e3      	ldr	r3, [r4, r3]
10009966:	aa14      	add	r2, sp, #80	; 0x50
10009968:	58a0      	ldr	r0, [r4, r2]
1000996a:	1a18      	subs	r0, r3, r0
1000996c:	47c8      	blx	r9
1000996e:	47a8      	blx	r5
10009970:	2200      	movs	r2, #0
10009972:	4b2f      	ldr	r3, [pc, #188]	; (10009a30 <sms_mpu_selftest+0x3e0>)
10009974:	47c0      	blx	r8
10009976:	9000      	str	r0, [sp, #0]
10009978:	9101      	str	r1, [sp, #4]
1000997a:	ab08      	add	r3, sp, #32
1000997c:	58e0      	ldr	r0, [r4, r3]
1000997e:	47a8      	blx	r5
10009980:	0002      	movs	r2, r0
10009982:	000b      	movs	r3, r1
10009984:	9800      	ldr	r0, [sp, #0]
10009986:	9901      	ldr	r1, [sp, #4]
10009988:	47d0      	blx	sl
1000998a:	2200      	movs	r2, #0
1000998c:	4b28      	ldr	r3, [pc, #160]	; (10009a30 <sms_mpu_selftest+0x3e0>)
1000998e:	47b8      	blx	r7
10009990:	47b0      	blx	r6
10009992:	9b03      	ldr	r3, [sp, #12]
10009994:	5118      	str	r0, [r3, r4]
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
10009996:	469b      	mov	fp, r3
10009998:	44a3      	add	fp, r4
1000999a:	ab0e      	add	r3, sp, #56	; 0x38
1000999c:	58e3      	ldr	r3, [r4, r3]
1000999e:	aa17      	add	r2, sp, #92	; 0x5c
100099a0:	58a0      	ldr	r0, [r4, r2]
100099a2:	1a18      	subs	r0, r3, r0
100099a4:	47c8      	blx	r9
100099a6:	47a8      	blx	r5
100099a8:	2200      	movs	r2, #0
100099aa:	4b21      	ldr	r3, [pc, #132]	; (10009a30 <sms_mpu_selftest+0x3e0>)
100099ac:	47c0      	blx	r8
100099ae:	9000      	str	r0, [sp, #0]
100099b0:	9101      	str	r1, [sp, #4]
100099b2:	0023      	movs	r3, r4
100099b4:	aa08      	add	r2, sp, #32
100099b6:	4694      	mov	ip, r2
100099b8:	4463      	add	r3, ip
100099ba:	68d8      	ldr	r0, [r3, #12]
100099bc:	47a8      	blx	r5
100099be:	0002      	movs	r2, r0
100099c0:	000b      	movs	r3, r1
100099c2:	9800      	ldr	r0, [sp, #0]
100099c4:	9901      	ldr	r1, [sp, #4]
100099c6:	47d0      	blx	sl
100099c8:	2200      	movs	r2, #0
100099ca:	4b19      	ldr	r3, [pc, #100]	; (10009a30 <sms_mpu_selftest+0x3e0>)
100099cc:	47b8      	blx	r7
100099ce:	47b0      	blx	r6
100099d0:	465b      	mov	r3, fp
100099d2:	60d8      	str	r0, [r3, #12]
100099d4:	3404      	adds	r4, #4
	factory_trim[4] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[4] - 1.0) )); // FT[Yg] factory trim calculation
	factory_trim[5] = (float)(2620/1<<fs)*(pow( 1.01 , ((float)stest[5] - 1.0) )); // FT[Zg] factory trim calculation
	
	// Report results as a ratio of (STR - FT)/FT; the change from Factory Trim of the Self-Test Response
	// To get percent, must multiply by 100
	for (int i = 0; i < 3; i++) {
100099d6:	2c0c      	cmp	r4, #12
100099d8:	d1c3      	bne.n	10009962 <sms_mpu_selftest+0x312>
		destination[i]   = 100.0*((float)(a_stavg[i] - a_avg[i]))/factory_trim[i] - 100.;   // Report percent differences
		destination[i+3] = 100.0*((float)(g_stavg[i] - g_avg[i]))/factory_trim[i+3] - 100.; // Report percent differences
	}

}
100099da:	b01d      	add	sp, #116	; 0x74
100099dc:	bc3c      	pop	{r2, r3, r4, r5}
100099de:	4690      	mov	r8, r2
100099e0:	4699      	mov	r9, r3
100099e2:	46a2      	mov	sl, r4
100099e4:	46ab      	mov	fp, r5
100099e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
100099e8:	100155cd 	.word	0x100155cd
100099ec:	100090f9 	.word	0x100090f9
100099f0:	10008f49 	.word	0x10008f49
100099f4:	100129b5 	.word	0x100129b5
100099f8:	1000a391 	.word	0x1000a391
100099fc:	10009575 	.word	0x10009575
10009a00:	100136dd 	.word	0x100136dd
10009a04:	10015335 	.word	0x10015335
10009a08:	10014aed 	.word	0x10014aed
10009a0c:	3ff00000 	.word	0x3ff00000
10009a10:	c28f5c29 	.word	0xc28f5c29
10009a14:	3ff028f5 	.word	0x3ff028f5
10009a18:	10011659 	.word	0x10011659
10009a1c:	100145f9 	.word	0x100145f9
10009a20:	40a47800 	.word	0x40a47800
10009a24:	100153dd 	.word	0x100153dd
10009a28:	1001364d 	.word	0x1001364d
10009a2c:	10013db1 	.word	0x10013db1
10009a30:	40590000 	.word	0x40590000

10009a34 <sms_mpu_check>:
		mpu_device.interrupt.new_gyro = true;
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
10009a34:	b510      	push	{r4, lr}
	int retVal = -1;
	uint8_t c = readByte(MPU9250_ADDRESS, WHO_AM_I_MPU9250);
10009a36:	2175      	movs	r1, #117	; 0x75
10009a38:	2069      	movs	r0, #105	; 0x69
10009a3a:	4b06      	ldr	r3, [pc, #24]	; (10009a54 <sms_mpu_check+0x20>)
10009a3c:	4798      	blx	r3
	if(c == 0x71) {
10009a3e:	2871      	cmp	r0, #113	; 0x71
10009a40:	d104      	bne.n	10009a4c <sms_mpu_check+0x18>
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 is online...");
		sms_mpu_selftest(mpu_device.config.self_test);
10009a42:	4805      	ldr	r0, [pc, #20]	; (10009a58 <sms_mpu_check+0x24>)
10009a44:	4b05      	ldr	r3, [pc, #20]	; (10009a5c <sms_mpu_check+0x28>)
10009a46:	4798      	blx	r3
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
10009a48:	2000      	movs	r0, #0
10009a4a:	e001      	b.n	10009a50 <sms_mpu_check+0x1c>
		send_plf_int_msg_ind(SMS_MPU_DRDY_PIN, GPIO_CALLBACK_RISING, NULL, 0);
	}
}

int sms_mpu_check(void) {
	int retVal = -1;
10009a4c:	2001      	movs	r0, #1
10009a4e:	4240      	negs	r0, r0
		sms_mpu_selftest(mpu_device.config.self_test);
		//DBG_LOG("[sms_mpu_check]\t\tMPU-9250 self-test passed");
		retVal = 0;
	}
	return retVal;
}
10009a50:	bd10      	pop	{r4, pc}
10009a52:	46c0      	nop			; (mov r8, r8)
10009a54:	10009575 	.word	0x10009575
10009a58:	10019434 	.word	0x10019434
10009a5c:	10009651 	.word	0x10009651

10009a60 <sms_led_switch_on>:
    sms_led_switch_off(SMS_LED_0_PIN);
}


void sms_led_switch_on(enum sms_leds led)
{
10009a60:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_ACTIVE);
10009a62:	2100      	movs	r1, #0
10009a64:	4b01      	ldr	r3, [pc, #4]	; (10009a6c <sms_led_switch_on+0xc>)
10009a66:	4798      	blx	r3
}
10009a68:	bd10      	pop	{r4, pc}
10009a6a:	46c0      	nop			; (mov r8, r8)
10009a6c:	1000ac8d 	.word	0x1000ac8d

10009a70 <sms_led_switch_off>:


void sms_led_switch_off(enum sms_leds led)
{
10009a70:	b510      	push	{r4, lr}
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
10009a72:	2101      	movs	r1, #1
10009a74:	4b01      	ldr	r3, [pc, #4]	; (10009a7c <sms_led_switch_off+0xc>)
10009a76:	4798      	blx	r3
}
10009a78:	bd10      	pop	{r4, pc}
10009a7a:	46c0      	nop			; (mov r8, r8)
10009a7c:	1000ac8d 	.word	0x1000ac8d

10009a80 <sms_led_gpio_init>:
 */ 

#include "sms_led.h"

void sms_led_gpio_init(void)
{
10009a80:	b510      	push	{r4, lr}
10009a82:	b082      	sub	sp, #8
    struct gpio_config config_gpio_pin;

    /* LED0 @ GPIO_LP_GPIO_22 */
    gpio_get_config_defaults(&config_gpio_pin);
10009a84:	ac01      	add	r4, sp, #4
10009a86:	0020      	movs	r0, r4
10009a88:	4b06      	ldr	r3, [pc, #24]	; (10009aa4 <sms_led_gpio_init+0x24>)
10009a8a:	4798      	blx	r3
    config_gpio_pin.direction = GPIO_PIN_DIR_OUTPUT;
10009a8c:	2301      	movs	r3, #1
10009a8e:	7023      	strb	r3, [r4, #0]
    if(gpio_pin_set_config(SMS_LED_0_PIN, &config_gpio_pin) != STATUS_OK) {
10009a90:	0021      	movs	r1, r4
10009a92:	2016      	movs	r0, #22
10009a94:	4b04      	ldr	r3, [pc, #16]	; (10009aa8 <sms_led_gpio_init+0x28>)
10009a96:	4798      	blx	r3
        DBG_LOG_DEV("[sms_led_gpio_init]\tproblem while setting up led0");
    }
    sms_led_switch_off(SMS_LED_0_PIN);
10009a98:	2016      	movs	r0, #22
10009a9a:	4b04      	ldr	r3, [pc, #16]	; (10009aac <sms_led_gpio_init+0x2c>)
10009a9c:	4798      	blx	r3
}
10009a9e:	b002      	add	sp, #8
10009aa0:	bd10      	pop	{r4, pc}
10009aa2:	46c0      	nop			; (mov r8, r8)
10009aa4:	1000aa25 	.word	0x1000aa25
10009aa8:	1000aa35 	.word	0x1000aa35
10009aac:	10009a71 	.word	0x10009a71

10009ab0 <sms_led_toggle>:
    gpio_pin_set_output_level(led, SMS_LED_INACTIVE);
}


void sms_led_toggle(enum sms_leds led)
{
10009ab0:	b510      	push	{r4, lr}
10009ab2:	0004      	movs	r4, r0
}


bool sms_led_get_state(enum sms_leds led)
{
    return gpio_pin_get_output_level(led);
10009ab4:	4b05      	ldr	r3, [pc, #20]	; (10009acc <sms_led_toggle+0x1c>)
10009ab6:	4798      	blx	r3


void sms_led_toggle(enum sms_leds led)
{
    bool state = sms_led_get_state(led);
    if(state == SMS_LED_ACTIVE) sms_led_switch_off(led);
10009ab8:	2800      	cmp	r0, #0
10009aba:	d103      	bne.n	10009ac4 <sms_led_toggle+0x14>
10009abc:	0020      	movs	r0, r4
10009abe:	4b04      	ldr	r3, [pc, #16]	; (10009ad0 <sms_led_toggle+0x20>)
10009ac0:	4798      	blx	r3
10009ac2:	e002      	b.n	10009aca <sms_led_toggle+0x1a>
    else sms_led_switch_on(led);
10009ac4:	0020      	movs	r0, r4
10009ac6:	4b03      	ldr	r3, [pc, #12]	; (10009ad4 <sms_led_toggle+0x24>)
10009ac8:	4798      	blx	r3
}
10009aca:	bd10      	pop	{r4, pc}
10009acc:	1000ac3d 	.word	0x1000ac3d
10009ad0:	10009a71 	.word	0x10009a71
10009ad4:	10009a61 	.word	0x10009a61

10009ad8 <sms_led_blink_start>:
    return gpio_pin_get_output_level(led);
}


void sms_led_blink_start(enum sms_leds led)
{
10009ad8:	b510      	push	{r4, lr}
    sms_led_switch_on(led);
10009ada:	4b0c      	ldr	r3, [pc, #48]	; (10009b0c <sms_led_blink_start+0x34>)
10009adc:	4798      	blx	r3
    sms_led_blink_cnt = 0;
10009ade:	2200      	movs	r2, #0
10009ae0:	4b0b      	ldr	r3, [pc, #44]	; (10009b10 <sms_led_blink_start+0x38>)
10009ae2:	701a      	strb	r2, [r3, #0]
    uint32_t delay = 0;
    switch(timer2_current_mode) {
10009ae4:	4b0b      	ldr	r3, [pc, #44]	; (10009b14 <sms_led_blink_start+0x3c>)
10009ae6:	781b      	ldrb	r3, [r3, #0]
10009ae8:	b2db      	uxtb	r3, r3
10009aea:	2b02      	cmp	r3, #2
10009aec:	d002      	beq.n	10009af4 <sms_led_blink_start+0x1c>
10009aee:	2b03      	cmp	r3, #3
10009af0:	d002      	beq.n	10009af8 <sms_led_blink_start+0x20>
10009af2:	e004      	b.n	10009afe <sms_led_blink_start+0x26>
        case TIMER2_MODE_LED_STARTUP:
        delay = SMS_BLINK_STARTUP_MS;
10009af4:	2164      	movs	r1, #100	; 0x64
10009af6:	e003      	b.n	10009b00 <sms_led_blink_start+0x28>
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        delay = SMS_BLINK_SHTDWN_MS;
10009af8:	21c8      	movs	r1, #200	; 0xc8
10009afa:	0049      	lsls	r1, r1, #1
        break;
10009afc:	e000      	b.n	10009b00 <sms_led_blink_start+0x28>

void sms_led_blink_start(enum sms_leds led)
{
    sms_led_switch_on(led);
    sms_led_blink_cnt = 0;
    uint32_t delay = 0;
10009afe:	2100      	movs	r1, #0
        
        default:
        break;
    }

    sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
10009b00:	2201      	movs	r2, #1
10009b02:	2001      	movs	r0, #1
10009b04:	4b04      	ldr	r3, [pc, #16]	; (10009b18 <sms_led_blink_start+0x40>)
10009b06:	4798      	blx	r3
}
10009b08:	bd10      	pop	{r4, pc}
10009b0a:	46c0      	nop			; (mov r8, r8)
10009b0c:	10009a61 	.word	0x10009a61
10009b10:	1001968c 	.word	0x1001968c
10009b14:	1001963f 	.word	0x1001963f
10009b18:	10009fc1 	.word	0x10009fc1

10009b1c <sms_pressure_init_variables>:

#include "sms_pressure.h"

void sms_pressure_init_variables(void)
{
	pressure_device.hal.current_state = MS58_STATE_NONE;
10009b1c:	4b06      	ldr	r3, [pc, #24]	; (10009b38 <sms_pressure_init_variables+0x1c>)
10009b1e:	2200      	movs	r2, #0
10009b20:	2125      	movs	r1, #37	; 0x25
10009b22:	545a      	strb	r2, [r3, r1]
	pressure_device.state = PRESSURE_STATE_OFF;
10009b24:	3106      	adds	r1, #6
10009b26:	545a      	strb	r2, [r3, r1]
	pressure_device.rts = false;
10009b28:	3901      	subs	r1, #1
10009b2a:	545a      	strb	r2, [r3, r1]
	pressure_device.int_enabled = false;
10009b2c:	3902      	subs	r1, #2
10009b2e:	545a      	strb	r2, [r3, r1]
	pressure_device.new_int = false;
10009b30:	3101      	adds	r1, #1
10009b32:	545a      	strb	r2, [r3, r1]
}
10009b34:	4770      	bx	lr
10009b36:	46c0      	nop			; (mov r8, r8)
10009b38:	100195a4 	.word	0x100195a4

10009b3c <sms_pressure_ms58_reset>:
    }
    return STATUS_ERR_IO;
}

void sms_pressure_ms58_reset(void)
{
10009b3c:	b510      	push	{r4, lr}
10009b3e:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_reset]\twriting reset command");
    spi_wdata[0] = MS58_RESET;
10009b40:	4a05      	ldr	r2, [pc, #20]	; (10009b58 <sms_pressure_ms58_reset+0x1c>)
10009b42:	231e      	movs	r3, #30
10009b44:	7013      	strb	r3, [r2, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 1);
10009b46:	3b1d      	subs	r3, #29
10009b48:	9300      	str	r3, [sp, #0]
10009b4a:	4b04      	ldr	r3, [pc, #16]	; (10009b5c <sms_pressure_ms58_reset+0x20>)
10009b4c:	4904      	ldr	r1, [pc, #16]	; (10009b60 <sms_pressure_ms58_reset+0x24>)
10009b4e:	4805      	ldr	r0, [pc, #20]	; (10009b64 <sms_pressure_ms58_reset+0x28>)
10009b50:	4c05      	ldr	r4, [pc, #20]	; (10009b68 <sms_pressure_ms58_reset+0x2c>)
10009b52:	47a0      	blx	r4
}
10009b54:	b002      	add	sp, #8
10009b56:	bd10      	pop	{r4, pc}
10009b58:	10019594 	.word	0x10019594
10009b5c:	10019580 	.word	0x10019580
10009b60:	10019644 	.word	0x10019644
10009b64:	10019650 	.word	0x10019650
10009b68:	10009e91 	.word	0x10009e91

10009b6c <sms_pressure_ms58_read_prom>:
		//if((timer1_current_mode == TIMER1_MODE_NONE) && (timer2_current_mode == TIMER2_MODE_NONE)) release_sleep_lock();
	}
}

enum status_code sms_pressure_ms58_read_prom(void)
{
10009b6c:	b5f0      	push	{r4, r5, r6, r7, lr}
10009b6e:	4657      	mov	r7, sl
10009b70:	b480      	push	{r7}
10009b72:	b082      	sub	sp, #8
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] reading bytes... ");
    spi_wdata[0] = MS58_PROM_READ_1;
10009b74:	4d37      	ldr	r5, [pc, #220]	; (10009c54 <sms_pressure_ms58_read_prom+0xe8>)
10009b76:	23a2      	movs	r3, #162	; 0xa2
10009b78:	702b      	strb	r3, [r5, #0]
    spi_wdata[1] = 0x00;
10009b7a:	2300      	movs	r3, #0
10009b7c:	706b      	strb	r3, [r5, #1]
    spi_wdata[2] = 0x00;
10009b7e:	70ab      	strb	r3, [r5, #2]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009b80:	4c35      	ldr	r4, [pc, #212]	; (10009c58 <sms_pressure_ms58_read_prom+0xec>)
10009b82:	3303      	adds	r3, #3
10009b84:	469a      	mov	sl, r3
10009b86:	9300      	str	r3, [sp, #0]
10009b88:	0023      	movs	r3, r4
10009b8a:	002a      	movs	r2, r5
10009b8c:	4933      	ldr	r1, [pc, #204]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009b8e:	4834      	ldr	r0, [pc, #208]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009b90:	4f34      	ldr	r7, [pc, #208]	; (10009c64 <sms_pressure_ms58_read_prom+0xf8>)
10009b92:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[1] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009b94:	4e34      	ldr	r6, [pc, #208]	; (10009c68 <sms_pressure_ms58_read_prom+0xfc>)
10009b96:	7863      	ldrb	r3, [r4, #1]
10009b98:	021b      	lsls	r3, r3, #8
10009b9a:	78a2      	ldrb	r2, [r4, #2]
10009b9c:	4313      	orrs	r3, r2
10009b9e:	80f3      	strh	r3, [r6, #6]

    spi_wdata[0] = MS58_PROM_READ_2;
10009ba0:	23a4      	movs	r3, #164	; 0xa4
10009ba2:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009ba4:	4653      	mov	r3, sl
10009ba6:	9300      	str	r3, [sp, #0]
10009ba8:	0023      	movs	r3, r4
10009baa:	002a      	movs	r2, r5
10009bac:	492b      	ldr	r1, [pc, #172]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009bae:	482c      	ldr	r0, [pc, #176]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009bb0:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[2] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009bb2:	7863      	ldrb	r3, [r4, #1]
10009bb4:	021b      	lsls	r3, r3, #8
10009bb6:	78a2      	ldrb	r2, [r4, #2]
10009bb8:	4313      	orrs	r3, r2
10009bba:	8133      	strh	r3, [r6, #8]

    spi_wdata[0] = MS58_PROM_READ_3;
10009bbc:	23a6      	movs	r3, #166	; 0xa6
10009bbe:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009bc0:	4653      	mov	r3, sl
10009bc2:	9300      	str	r3, [sp, #0]
10009bc4:	0023      	movs	r3, r4
10009bc6:	002a      	movs	r2, r5
10009bc8:	4924      	ldr	r1, [pc, #144]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009bca:	4825      	ldr	r0, [pc, #148]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009bcc:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[3] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009bce:	7863      	ldrb	r3, [r4, #1]
10009bd0:	021b      	lsls	r3, r3, #8
10009bd2:	78a2      	ldrb	r2, [r4, #2]
10009bd4:	4313      	orrs	r3, r2
10009bd6:	8173      	strh	r3, [r6, #10]

    spi_wdata[0] = MS58_PROM_READ_4;
10009bd8:	23a8      	movs	r3, #168	; 0xa8
10009bda:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009bdc:	4653      	mov	r3, sl
10009bde:	9300      	str	r3, [sp, #0]
10009be0:	0023      	movs	r3, r4
10009be2:	002a      	movs	r2, r5
10009be4:	491d      	ldr	r1, [pc, #116]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009be6:	481e      	ldr	r0, [pc, #120]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009be8:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[4] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009bea:	7863      	ldrb	r3, [r4, #1]
10009bec:	021b      	lsls	r3, r3, #8
10009bee:	78a2      	ldrb	r2, [r4, #2]
10009bf0:	4313      	orrs	r3, r2
10009bf2:	81b3      	strh	r3, [r6, #12]

    spi_wdata[0] = MS58_PROM_READ_5;
10009bf4:	23aa      	movs	r3, #170	; 0xaa
10009bf6:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009bf8:	4653      	mov	r3, sl
10009bfa:	9300      	str	r3, [sp, #0]
10009bfc:	0023      	movs	r3, r4
10009bfe:	002a      	movs	r2, r5
10009c00:	4916      	ldr	r1, [pc, #88]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009c02:	4817      	ldr	r0, [pc, #92]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009c04:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[5] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009c06:	7863      	ldrb	r3, [r4, #1]
10009c08:	021b      	lsls	r3, r3, #8
10009c0a:	78a2      	ldrb	r2, [r4, #2]
10009c0c:	4313      	orrs	r3, r2
10009c0e:	81f3      	strh	r3, [r6, #14]

    spi_wdata[0] = MS58_PROM_READ_6;
10009c10:	23ac      	movs	r3, #172	; 0xac
10009c12:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009c14:	4653      	mov	r3, sl
10009c16:	9300      	str	r3, [sp, #0]
10009c18:	0023      	movs	r3, r4
10009c1a:	002a      	movs	r2, r5
10009c1c:	490f      	ldr	r1, [pc, #60]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009c1e:	4810      	ldr	r0, [pc, #64]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009c20:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[6] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009c22:	7863      	ldrb	r3, [r4, #1]
10009c24:	021b      	lsls	r3, r3, #8
10009c26:	78a2      	ldrb	r2, [r4, #2]
10009c28:	4313      	orrs	r3, r2
10009c2a:	8233      	strh	r3, [r6, #16]

    spi_wdata[0] = MS58_PROM_READ_7;
10009c2c:	23ae      	movs	r3, #174	; 0xae
10009c2e:	702b      	strb	r3, [r5, #0]
    sms_spi_master_transceive(&spi_master_ms58_instance, &spi_slave_ms58_instance, spi_wdata, spi_rdata, 3);
10009c30:	4653      	mov	r3, sl
10009c32:	9300      	str	r3, [sp, #0]
10009c34:	0023      	movs	r3, r4
10009c36:	002a      	movs	r2, r5
10009c38:	4908      	ldr	r1, [pc, #32]	; (10009c5c <sms_pressure_ms58_read_prom+0xf0>)
10009c3a:	4809      	ldr	r0, [pc, #36]	; (10009c60 <sms_pressure_ms58_read_prom+0xf4>)
10009c3c:	47b8      	blx	r7
    //DBG_LOG_DEV("[sms_pressure_ms58_read_prom] wdata[0]: 0x%02x, rdata[0]: 0x%02x\n\r  wdata[1]: 0x%02x, rdata[1]: 0x%02x\n\r  wdata[2]: 0x%02x, rdata[2]: 0x%02x", spi_wdata[0], spi_rdata[0], spi_wdata[1], spi_rdata[1], spi_wdata[2], spi_rdata[2]);
    pressure_device.hal.prom_values[7] = (spi_rdata[1] << 8) | (spi_rdata[2]);
10009c3e:	7863      	ldrb	r3, [r4, #1]
10009c40:	021b      	lsls	r3, r3, #8
10009c42:	78a2      	ldrb	r2, [r4, #2]
10009c44:	4313      	orrs	r3, r2
10009c46:	8273      	strh	r3, [r6, #18]
    //for(uint8_t i = 1; i < MS58_PROM_VALUES_MAX; i++) {
        //DBG_LOG_DEV("  C%d -> %d", (i+1), ms58_device.prom_values[i]);
    //}

    return STATUS_OK;
}
10009c48:	2000      	movs	r0, #0
10009c4a:	b002      	add	sp, #8
10009c4c:	bc04      	pop	{r2}
10009c4e:	4692      	mov	sl, r2
10009c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009c52:	46c0      	nop			; (mov r8, r8)
10009c54:	10019594 	.word	0x10019594
10009c58:	10019580 	.word	0x10019580
10009c5c:	10019644 	.word	0x10019644
10009c60:	10019650 	.word	0x10019650
10009c64:	10009e91 	.word	0x10009e91
10009c68:	100195a4 	.word	0x100195a4

10009c6c <sms_pressure_init>:
    
    ulp_ready = true;
}

enum status_code sms_pressure_init(void)
{
10009c6c:	b510      	push	{r4, lr}
    /* Read the PROM values */
    if(sms_pressure_ms58_read_prom() == STATUS_OK) {
10009c6e:	4b0a      	ldr	r3, [pc, #40]	; (10009c98 <sms_pressure_init+0x2c>)
10009c70:	4798      	blx	r3
10009c72:	2800      	cmp	r0, #0
10009c74:	d10d      	bne.n	10009c92 <sms_pressure_init+0x26>
        pressure_device.hal.init_ok = true;
10009c76:	4b09      	ldr	r3, [pc, #36]	; (10009c9c <sms_pressure_init+0x30>)
10009c78:	2201      	movs	r2, #1
10009c7a:	705a      	strb	r2, [r3, #1]
        pressure_device.hal.current_state = MS58_STATE_READY;
10009c7c:	2402      	movs	r4, #2
10009c7e:	2125      	movs	r1, #37	; 0x25
10009c80:	545c      	strb	r4, [r3, r1]
		pressure_device.int_enabled = true;
10009c82:	3103      	adds	r1, #3
10009c84:	545a      	strb	r2, [r3, r1]
		pressure_device.new_int = false;
10009c86:	2200      	movs	r2, #0
10009c88:	3101      	adds	r1, #1
10009c8a:	545a      	strb	r2, [r3, r1]
		pressure_device.rts = false;
10009c8c:	3101      	adds	r1, #1
10009c8e:	545a      	strb	r2, [r3, r1]
        return STATUS_OK;
10009c90:	e000      	b.n	10009c94 <sms_pressure_init+0x28>
    }
    return STATUS_ERR_IO;
10009c92:	2010      	movs	r0, #16
}
10009c94:	bd10      	pop	{r4, pc}
10009c96:	46c0      	nop			; (mov r8, r8)
10009c98:	10009b6d 	.word	0x10009b6d
10009c9c:	100195a4 	.word	0x100195a4

10009ca0 <sms_pressure_startup>:
    /* Disable power supply by default */
    gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
}

void sms_pressure_startup(void)
{
10009ca0:	b510      	push	{r4, lr}
    DBG_LOG_DEV("[sms_pressure_startup]\t\tStarting pressure sensor");
    //gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true); // switch on MS58 pressure sensor
    /* Disable buttons for reset time (~3 ms) to avoid conflict with dualtimer1 */
    sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
10009ca2:	2101      	movs	r1, #1
10009ca4:	2001      	movs	r0, #1
10009ca6:	4b10      	ldr	r3, [pc, #64]	; (10009ce8 <sms_pressure_startup+0x48>)
10009ca8:	4798      	blx	r3
    pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009caa:	2101      	movs	r1, #1
10009cac:	2325      	movs	r3, #37	; 0x25
10009cae:	4a0f      	ldr	r2, [pc, #60]	; (10009cec <sms_pressure_startup+0x4c>)
10009cb0:	54d1      	strb	r1, [r2, r3]
    /* Write the reset command to MS58 */
    sms_pressure_ms58_reset();
10009cb2:	4b0f      	ldr	r3, [pc, #60]	; (10009cf0 <sms_pressure_startup+0x50>)
10009cb4:	4798      	blx	r3
    delay_ms(3);
10009cb6:	2003      	movs	r0, #3
10009cb8:	4b0e      	ldr	r3, [pc, #56]	; (10009cf4 <sms_pressure_startup+0x54>)
10009cba:	4798      	blx	r3
    if(sms_pressure_init() != STATUS_OK) {
10009cbc:	4b0e      	ldr	r3, [pc, #56]	; (10009cf8 <sms_pressure_startup+0x58>)
10009cbe:	4798      	blx	r3
10009cc0:	2800      	cmp	r0, #0
10009cc2:	d000      	beq.n	10009cc6 <sms_pressure_startup+0x26>
10009cc4:	e7fe      	b.n	10009cc4 <sms_pressure_startup+0x24>
        DBG_LOG_DEV("[sms_pressure_startup]\t\t\tFailed to initialize pressure device");
        pressure_device.hal.init_ok = false;
        while(1){};
    }
    pressure_device.hal.current_state = MS58_STATE_READY;
10009cc6:	4b09      	ldr	r3, [pc, #36]	; (10009cec <sms_pressure_startup+0x4c>)
10009cc8:	2102      	movs	r1, #2
10009cca:	2225      	movs	r2, #37	; 0x25
10009ccc:	5499      	strb	r1, [r3, r2]
    pressure_device.hal.init_ok = true;
10009cce:	2401      	movs	r4, #1
10009cd0:	705c      	strb	r4, [r3, #1]
    sms_working_mode = SMS_MODE_COMPLETE;
10009cd2:	3a1e      	subs	r2, #30
10009cd4:	4b09      	ldr	r3, [pc, #36]	; (10009cfc <sms_pressure_startup+0x5c>)
10009cd6:	701a      	strb	r2, [r3, #0]
    sms_sensors_interrupt_toggle(true, true);
10009cd8:	3901      	subs	r1, #1
10009cda:	2001      	movs	r0, #1
10009cdc:	4b08      	ldr	r3, [pc, #32]	; (10009d00 <sms_pressure_startup+0x60>)
10009cde:	4798      	blx	r3
    
    ulp_ready = true;
10009ce0:	4b08      	ldr	r3, [pc, #32]	; (10009d04 <sms_pressure_startup+0x64>)
10009ce2:	701c      	strb	r4, [r3, #0]
}
10009ce4:	bd10      	pop	{r4, pc}
10009ce6:	46c0      	nop			; (mov r8, r8)
10009ce8:	10008d41 	.word	0x10008d41
10009cec:	100195a4 	.word	0x100195a4
10009cf0:	10009b3d 	.word	0x10009b3d
10009cf4:	1000a391 	.word	0x1000a391
10009cf8:	10009c6d 	.word	0x10009c6d
10009cfc:	100194fc 	.word	0x100194fc
10009d00:	10009d59 	.word	0x10009d59
10009d04:	100194fd 	.word	0x100194fd

10009d08 <sms_pressure_define_services>:

    DBG_LOG_DEV("[sms_pressure_ms58_calculate] temperature = %ld  pressure = %ld", pressure_device.hal.temperature, pressure_device.hal.pressure);
}

void sms_pressure_define_services(void)
{
10009d08:	b510      	push	{r4, lr}
10009d0a:	b082      	sub	sp, #8
    at_ble_status_t status;
    uint8_t init_value = 0;
10009d0c:	466b      	mov	r3, sp
10009d0e:	1dda      	adds	r2, r3, #7
10009d10:	2300      	movs	r3, #0
10009d12:	7013      	strb	r3, [r2, #0]
    sms_ble_service_init(BLE_SERV_PRESSURE, &pressure_device.service_handler, &init_value);
10009d14:	4c09      	ldr	r4, [pc, #36]	; (10009d3c <sms_pressure_define_services+0x34>)
10009d16:	0021      	movs	r1, r4
10009d18:	2001      	movs	r0, #1
10009d1a:	4b09      	ldr	r3, [pc, #36]	; (10009d40 <sms_pressure_define_services+0x38>)
10009d1c:	4798      	blx	r3
    if((status = sms_ble_primary_service_define(&pressure_device.service_handler)) != AT_BLE_SUCCESS) {
10009d1e:	0020      	movs	r0, r4
10009d20:	4b08      	ldr	r3, [pc, #32]	; (10009d44 <sms_pressure_define_services+0x3c>)
10009d22:	4798      	blx	r3
10009d24:	1e04      	subs	r4, r0, #0
10009d26:	d006      	beq.n	10009d36 <sms_pressure_define_services+0x2e>
        DBG_LOG("[sms_pressure_define_services]\tServices defining failed, reason 0x%x", status);
10009d28:	4807      	ldr	r0, [pc, #28]	; (10009d48 <sms_pressure_define_services+0x40>)
10009d2a:	4b08      	ldr	r3, [pc, #32]	; (10009d4c <sms_pressure_define_services+0x44>)
10009d2c:	4798      	blx	r3
10009d2e:	0021      	movs	r1, r4
10009d30:	4807      	ldr	r0, [pc, #28]	; (10009d50 <sms_pressure_define_services+0x48>)
10009d32:	4b08      	ldr	r3, [pc, #32]	; (10009d54 <sms_pressure_define_services+0x4c>)
10009d34:	4798      	blx	r3
    }
    else {
        DBG_LOG_DEV("[sms_pressure_define_services]\tServices defined, SMS pressure handle: %d", pressure_device.service_handler.serv_handle);
    }
10009d36:	b002      	add	sp, #8
10009d38:	bd10      	pop	{r4, pc}
10009d3a:	46c0      	nop			; (mov r8, r8)
10009d3c:	100195d0 	.word	0x100195d0
10009d40:	1000899d 	.word	0x1000899d
10009d44:	10008979 	.word	0x10008979
10009d48:	1001677c 	.word	0x1001677c
10009d4c:	10015835 	.word	0x10015835
10009d50:	10016a7c 	.word	0x10016a7c
10009d54:	10015715 	.word	0x10015715

10009d58 <sms_sensors_interrupt_toggle>:
 */ 

#include "sms_peripheral1.h"

/* Sensors-related functions */
void sms_sensors_interrupt_toggle(bool mpu_int, bool press_int) {
10009d58:	b510      	push	{r4, lr}
10009d5a:	000c      	movs	r4, r1
    /* IMU --> IMU_DRDY */
    if(mpu_int) {
10009d5c:	2800      	cmp	r0, #0
10009d5e:	d006      	beq.n	10009d6e <sms_sensors_interrupt_toggle+0x16>
        mpu_device.state = MPU_STATE_ON;
10009d60:	2102      	movs	r1, #2
10009d62:	2365      	movs	r3, #101	; 0x65
10009d64:	4a14      	ldr	r2, [pc, #80]	; (10009db8 <sms_sensors_interrupt_toggle+0x60>)
10009d66:	54d1      	strb	r1, [r2, r3]
        sms_mpu_enable_callback();
10009d68:	4b14      	ldr	r3, [pc, #80]	; (10009dbc <sms_sensors_interrupt_toggle+0x64>)
10009d6a:	4798      	blx	r3
10009d6c:	e005      	b.n	10009d7a <sms_sensors_interrupt_toggle+0x22>
    }
    else {
        mpu_device.state = MPU_STATE_OFF;
10009d6e:	2100      	movs	r1, #0
10009d70:	2365      	movs	r3, #101	; 0x65
10009d72:	4a11      	ldr	r2, [pc, #68]	; (10009db8 <sms_sensors_interrupt_toggle+0x60>)
10009d74:	54d1      	strb	r1, [r2, r3]
        sms_mpu_disable_callback();
10009d76:	4b12      	ldr	r3, [pc, #72]	; (10009dc0 <sms_sensors_interrupt_toggle+0x68>)
10009d78:	4798      	blx	r3
     * Note: Since there is no direct mechanism to simply enable and disable
     *       the AON sleep timer interruption, we have to initialize it each
     *       time (and it starts running) and register the corresponding
     *       callback (and it enables the interrupt)
     */
    if(press_int) {
10009d7a:	2c00      	cmp	r4, #0
10009d7c:	d010      	beq.n	10009da0 <sms_sensors_interrupt_toggle+0x48>
        pressure_device.hal.current_state = MS58_STATE_CONV_PRESSURE;
10009d7e:	4b11      	ldr	r3, [pc, #68]	; (10009dc4 <sms_sensors_interrupt_toggle+0x6c>)
10009d80:	2103      	movs	r1, #3
10009d82:	2225      	movs	r2, #37	; 0x25
10009d84:	5499      	strb	r1, [r3, r2]
        pressure_device.state = PRESSURE_STATE_ON;
10009d86:	3901      	subs	r1, #1
10009d88:	3206      	adds	r2, #6
10009d8a:	5499      	strb	r1, [r3, r2]
        sms_timer_aon_init(SMS_PRESSURE_CONVERT_MS, AON_SLEEP_TIMER_RELOAD_MODE);
10009d8c:	2100      	movs	r1, #0
10009d8e:	480e      	ldr	r0, [pc, #56]	; (10009dc8 <sms_sensors_interrupt_toggle+0x70>)
10009d90:	4b0e      	ldr	r3, [pc, #56]	; (10009dcc <sms_sensors_interrupt_toggle+0x74>)
10009d92:	4798      	blx	r3
        sms_timer_aon_register_callback();
10009d94:	4b0e      	ldr	r3, [pc, #56]	; (10009dd0 <sms_sensors_interrupt_toggle+0x78>)
10009d96:	4798      	blx	r3
        sensors_active = true;
10009d98:	2201      	movs	r2, #1
10009d9a:	4b0e      	ldr	r3, [pc, #56]	; (10009dd4 <sms_sensors_interrupt_toggle+0x7c>)
10009d9c:	701a      	strb	r2, [r3, #0]
10009d9e:	e00a      	b.n	10009db6 <sms_sensors_interrupt_toggle+0x5e>
    }
    else {
        pressure_device.hal.current_state = MS58_STATE_READY;
10009da0:	2102      	movs	r1, #2
10009da2:	2325      	movs	r3, #37	; 0x25
10009da4:	4a07      	ldr	r2, [pc, #28]	; (10009dc4 <sms_sensors_interrupt_toggle+0x6c>)
10009da6:	54d1      	strb	r1, [r2, r3]
        sms_timer_aon_disable();
10009da8:	4b0b      	ldr	r3, [pc, #44]	; (10009dd8 <sms_sensors_interrupt_toggle+0x80>)
10009daa:	4798      	blx	r3
        sms_timer_aon_unregister_callback();
10009dac:	4b0b      	ldr	r3, [pc, #44]	; (10009ddc <sms_sensors_interrupt_toggle+0x84>)
10009dae:	4798      	blx	r3
        sensors_active = false;
10009db0:	2200      	movs	r2, #0
10009db2:	4b08      	ldr	r3, [pc, #32]	; (10009dd4 <sms_sensors_interrupt_toggle+0x7c>)
10009db4:	701a      	strb	r2, [r3, #0]
    }
}
10009db6:	bd10      	pop	{r4, pc}
10009db8:	10019434 	.word	0x10019434
10009dbc:	10009071 	.word	0x10009071
10009dc0:	1000908d 	.word	0x1000908d
10009dc4:	100195a4 	.word	0x100195a4
10009dc8:	000003d5 	.word	0x000003d5
10009dcc:	10009ef5 	.word	0x10009ef5
10009dd0:	10009f29 	.word	0x10009f29
10009dd4:	10019630 	.word	0x10019630
10009dd8:	10009f1d 	.word	0x10009f1d
10009ddc:	10009f49 	.word	0x10009f49

10009de0 <sms_sensors_switch>:
    

void sms_sensors_switch(bool mpu_en, bool press_en)
{
10009de0:	b510      	push	{r4, lr}
10009de2:	000c      	movs	r4, r1
    /* IMU */
    if(mpu_en) {
10009de4:	2800      	cmp	r0, #0
10009de6:	d103      	bne.n	10009df0 <sms_sensors_switch+0x10>
            //mpu_device.hal.init_ok = true;
            //sms_sensors_interrupt_toggle(true, false);
        //}
    }
    else {
        gpio_pin_set_output_level(SMS_MPU_VCC_PIN, false);
10009de8:	2100      	movs	r1, #0
10009dea:	3006      	adds	r0, #6
10009dec:	4b07      	ldr	r3, [pc, #28]	; (10009e0c <sms_sensors_switch+0x2c>)
10009dee:	4798      	blx	r3
    }
    
    /* Pressure */
    if(press_en) {                
10009df0:	2c00      	cmp	r4, #0
10009df2:	d006      	beq.n	10009e02 <sms_sensors_switch+0x22>
        pressure_device.hal.current_state = MS58_STATE_RESETTING;
10009df4:	2101      	movs	r1, #1
10009df6:	2325      	movs	r3, #37	; 0x25
10009df8:	4a05      	ldr	r2, [pc, #20]	; (10009e10 <sms_sensors_switch+0x30>)
10009dfa:	54d1      	strb	r1, [r2, r3]
        //pressure_device.hal.reset_done = false;
        //pressure_device.hal.init_ok = false;
        sms_pressure_startup();
10009dfc:	4b05      	ldr	r3, [pc, #20]	; (10009e14 <sms_sensors_switch+0x34>)
10009dfe:	4798      	blx	r3
10009e00:	e003      	b.n	10009e0a <sms_sensors_switch+0x2a>
    }
    else {
        gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, false);
10009e02:	2100      	movs	r1, #0
10009e04:	2007      	movs	r0, #7
10009e06:	4b01      	ldr	r3, [pc, #4]	; (10009e0c <sms_sensors_switch+0x2c>)
10009e08:	4798      	blx	r3
    }
}
10009e0a:	bd10      	pop	{r4, pc}
10009e0c:	1000ac8d 	.word	0x1000ac8d
10009e10:	100195a4 	.word	0x100195a4
10009e14:	10009ca1 	.word	0x10009ca1

10009e18 <sms_spi_master_configure>:
 *   + mode 3 on SPI0 @ 1 MHz for MPU-9250 IMU
 * - assign SS pin for each slave device
 * - enable SPI
 */ 
void sms_spi_master_configure(void)
{
10009e18:	b530      	push	{r4, r5, lr}
10009e1a:	b08d      	sub	sp, #52	; 0x34
    //DBG_LOG_DEV("[spi_master_configure]\tconfiguring SPI masters and attaching slaves...");

    /* Initialize ms58 spi slave device */
    struct spi_config spi_master_config;
    struct spi_slave_inst_config spi_slave_ms58_config;
    spi_slave_inst_get_config_defaults(&spi_slave_ms58_config);
10009e1c:	ac01      	add	r4, sp, #4
10009e1e:	0020      	movs	r0, r4
10009e20:	4b13      	ldr	r3, [pc, #76]	; (10009e70 <sms_spi_master_configure+0x58>)
10009e22:	4798      	blx	r3
    spi_slave_ms58_config.ss_pin = SMS_PRESSURE_SPI_SS_PIN;
10009e24:	2310      	movs	r3, #16
10009e26:	7023      	strb	r3, [r4, #0]
    spi_attach_slave(&spi_slave_ms58_instance, &spi_slave_ms58_config);
10009e28:	0021      	movs	r1, r4
10009e2a:	4812      	ldr	r0, [pc, #72]	; (10009e74 <sms_spi_master_configure+0x5c>)
10009e2c:	4b12      	ldr	r3, [pc, #72]	; (10009e78 <sms_spi_master_configure+0x60>)
10009e2e:	4798      	blx	r3
    

    /* Initialize SPI1 master for ms58 */
    spi_get_config_defaults(&spi_master_config);
10009e30:	ac02      	add	r4, sp, #8
10009e32:	0020      	movs	r0, r4
10009e34:	4b11      	ldr	r3, [pc, #68]	; (10009e7c <sms_spi_master_configure+0x64>)
10009e36:	4798      	blx	r3
    spi_master_config.clock_divider = SPI_MASTER_MS58_CLOCK_DIV;
10009e38:	2368      	movs	r3, #104	; 0x68
10009e3a:	7123      	strb	r3, [r4, #4]
    spi_master_config.transfer_mode = SPI_MASTER_MS58_MODE;
10009e3c:	2300      	movs	r3, #0
10009e3e:	70a3      	strb	r3, [r4, #2]
    spi_master_config.pin_number_pad[0] = SPI_MASTER_MS58_PIN_SCK;
10009e40:	3311      	adds	r3, #17
10009e42:	60a3      	str	r3, [r4, #8]
    spi_master_config.pinmux_sel_pad[0] = SPI_MASTER_MS58_MUX_SCK;
10009e44:	3b0d      	subs	r3, #13
10009e46:	61a3      	str	r3, [r4, #24]
    spi_master_config.pin_number_pad[1] = SPI_MASTER_MS58_PIN_MOSI;
10009e48:	2213      	movs	r2, #19
10009e4a:	60e2      	str	r2, [r4, #12]
    spi_master_config.pinmux_sel_pad[1] = SPI_MASTER_MS58_MUX_MOSI;
10009e4c:	61e3      	str	r3, [r4, #28]
    spi_master_config.pin_number_pad[2] = SPI_MASTER_MS58_PIN_SSN;
10009e4e:	3a14      	subs	r2, #20
10009e50:	6122      	str	r2, [r4, #16]
    spi_master_config.pinmux_sel_pad[2] = SPI_MASTER_MS58_MUX_SSN;
10009e52:	6222      	str	r2, [r4, #32]
    spi_master_config.pin_number_pad[3] = SPI_MASTER_MS58_MISO;
10009e54:	3213      	adds	r2, #19
10009e56:	6162      	str	r2, [r4, #20]
    spi_master_config.pinmux_sel_pad[3] = SPI_MASTER_MS58_MUX_MISO;
10009e58:	6263      	str	r3, [r4, #36]	; 0x24
    spi_init(&spi_master_ms58_instance, SPI_MASTER_MS58_PORT, &spi_master_config);
10009e5a:	4d09      	ldr	r5, [pc, #36]	; (10009e80 <sms_spi_master_configure+0x68>)
10009e5c:	0022      	movs	r2, r4
10009e5e:	4909      	ldr	r1, [pc, #36]	; (10009e84 <sms_spi_master_configure+0x6c>)
10009e60:	0028      	movs	r0, r5
10009e62:	4b09      	ldr	r3, [pc, #36]	; (10009e88 <sms_spi_master_configure+0x70>)
10009e64:	4798      	blx	r3
    spi_enable(&spi_master_ms58_instance);
10009e66:	0028      	movs	r0, r5
10009e68:	4b08      	ldr	r3, [pc, #32]	; (10009e8c <sms_spi_master_configure+0x74>)
10009e6a:	4798      	blx	r3
}
10009e6c:	b00d      	add	sp, #52	; 0x34
10009e6e:	bd30      	pop	{r4, r5, pc}
10009e70:	1000a3bd 	.word	0x1000a3bd
10009e74:	10019644 	.word	0x10019644
10009e78:	1000a3f5 	.word	0x1000a3f5
10009e7c:	1000a3c9 	.word	0x1000a3c9
10009e80:	10019650 	.word	0x10019650
10009e84:	40007000 	.word	0x40007000
10009e88:	1000a4c5 	.word	0x1000a4c5
10009e8c:	1000a435 	.word	0x1000a435

10009e90 <sms_spi_master_transceive>:
/* SPI transceive function:
 * - enable selected slave
 * - start transceive blocking job
 * - when job returned, disable selected slave
 */
enum status_code sms_spi_master_transceive(struct spi_module *const module, struct spi_slave_inst *const slave, uint8_t *tx_data, uint8_t *rx_data, uint16_t len) {
10009e90:	b5f0      	push	{r4, r5, r6, r7, lr}
10009e92:	b083      	sub	sp, #12
10009e94:	0004      	movs	r4, r0
10009e96:	000d      	movs	r5, r1
10009e98:	9200      	str	r2, [sp, #0]
10009e9a:	9301      	str	r3, [sp, #4]
10009e9c:	ab08      	add	r3, sp, #32
10009e9e:	881e      	ldrh	r6, [r3, #0]
    enum status_code retVal;
    /* Enable slave */
    //DBG_LOG_CONT_DEV(" selecting slave...");
    spi_select_slave(module, slave, true);
10009ea0:	2201      	movs	r2, #1
10009ea2:	4f08      	ldr	r7, [pc, #32]	; (10009ec4 <sms_spi_master_transceive+0x34>)
10009ea4:	47b8      	blx	r7
    /* Write SPI data */
    //DBG_LOG_CONT_DEV(" writing data...");
    retVal = spi_transceive_buffer_wait(module, tx_data, rx_data, len);
10009ea6:	0033      	movs	r3, r6
10009ea8:	9a01      	ldr	r2, [sp, #4]
10009eaa:	9900      	ldr	r1, [sp, #0]
10009eac:	0020      	movs	r0, r4
10009eae:	4e06      	ldr	r6, [pc, #24]	; (10009ec8 <sms_spi_master_transceive+0x38>)
10009eb0:	47b0      	blx	r6
10009eb2:	0006      	movs	r6, r0
    /* Disable slave */
    //DBG_LOG_CONT_DEV(" de-selecting slave...");
    spi_select_slave(module, slave, false);
10009eb4:	2200      	movs	r2, #0
10009eb6:	0029      	movs	r1, r5
10009eb8:	0020      	movs	r0, r4
10009eba:	47b8      	blx	r7
    //DBG_LOG_CONT_DEV(" done!");
    return retVal;
}
10009ebc:	0030      	movs	r0, r6
10009ebe:	b003      	add	sp, #12
10009ec0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10009ec2:	46c0      	nop			; (mov r8, r8)
10009ec4:	1000a6ad 	.word	0x1000a6ad
10009ec8:	1000a629 	.word	0x1000a629

10009ecc <sms_timer_aon_callback>:

#include "sms_timer.h"

/* AON SLEEP TIMER */
void sms_timer_aon_callback(void)
{
10009ecc:	b510      	push	{r4, lr}
    if(pressure_device.int_enabled) {
10009ece:	2328      	movs	r3, #40	; 0x28
10009ed0:	4a06      	ldr	r2, [pc, #24]	; (10009eec <sms_timer_aon_callback+0x20>)
10009ed2:	5cd3      	ldrb	r3, [r2, r3]
10009ed4:	2b00      	cmp	r3, #0
10009ed6:	d008      	beq.n	10009eea <sms_timer_aon_callback+0x1e>
		pressure_device.new_int = true;
10009ed8:	2101      	movs	r1, #1
10009eda:	2329      	movs	r3, #41	; 0x29
10009edc:	54d1      	strb	r1, [r2, r3]
	    send_plf_int_msg_ind(AON_SLEEP_TIMER_EXPIRY_CALLBACK, AON_TIMER_EXPIRED, NULL, 0);
10009ede:	2300      	movs	r3, #0
10009ee0:	2200      	movs	r2, #0
10009ee2:	3102      	adds	r1, #2
10009ee4:	2042      	movs	r0, #66	; 0x42
10009ee6:	4c02      	ldr	r4, [pc, #8]	; (10009ef0 <sms_timer_aon_callback+0x24>)
10009ee8:	47a0      	blx	r4
	}
}
10009eea:	bd10      	pop	{r4, pc}
10009eec:	100195a4 	.word	0x100195a4
10009ef0:	1000d951 	.word	0x1000d951

10009ef4 <sms_timer_aon_init>:

void sms_timer_aon_init(uint32_t cnt, enum aon_sleep_timer_mode cnt_mode)
{
10009ef4:	b530      	push	{r4, r5, lr}
10009ef6:	b083      	sub	sp, #12
10009ef8:	0004      	movs	r4, r0
10009efa:	000d      	movs	r5, r1
    struct aon_sleep_timer_config config_aon_sleep_timer;
    aon_sleep_timer_get_config_defaults(&config_aon_sleep_timer);
10009efc:	4668      	mov	r0, sp
10009efe:	4b05      	ldr	r3, [pc, #20]	; (10009f14 <sms_timer_aon_init+0x20>)
10009f00:	4798      	blx	r3
    config_aon_sleep_timer.mode = cnt_mode;
10009f02:	466b      	mov	r3, sp
10009f04:	705d      	strb	r5, [r3, #1]
    config_aon_sleep_timer.counter = cnt;
10009f06:	9401      	str	r4, [sp, #4]
    aon_sleep_timer_init(&config_aon_sleep_timer);
10009f08:	4668      	mov	r0, sp
10009f0a:	4b03      	ldr	r3, [pc, #12]	; (10009f18 <sms_timer_aon_init+0x24>)
10009f0c:	4798      	blx	r3
}
10009f0e:	b003      	add	sp, #12
10009f10:	bd30      	pop	{r4, r5, pc}
10009f12:	46c0      	nop			; (mov r8, r8)
10009f14:	100080e9 	.word	0x100080e9
10009f18:	1000815d 	.word	0x1000815d

10009f1c <sms_timer_aon_disable>:

void sms_timer_aon_disable(void)
{
10009f1c:	b510      	push	{r4, lr}
    aon_sleep_timer_disable();
10009f1e:	4b01      	ldr	r3, [pc, #4]	; (10009f24 <sms_timer_aon_disable+0x8>)
10009f20:	4798      	blx	r3
}
10009f22:	bd10      	pop	{r4, pc}
10009f24:	100080f9 	.word	0x100080f9

10009f28 <sms_timer_aon_register_callback>:

void sms_timer_aon_register_callback(void)
{
10009f28:	b510      	push	{r4, lr}
    aon_sleep_timer_register_callback(sms_timer_aon_callback);
10009f2a:	4804      	ldr	r0, [pc, #16]	; (10009f3c <sms_timer_aon_register_callback+0x14>)
10009f2c:	4b04      	ldr	r3, [pc, #16]	; (10009f40 <sms_timer_aon_register_callback+0x18>)
10009f2e:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009f30:	2280      	movs	r2, #128	; 0x80
10009f32:	0512      	lsls	r2, r2, #20
10009f34:	4b03      	ldr	r3, [pc, #12]	; (10009f44 <sms_timer_aon_register_callback+0x1c>)
10009f36:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009f38:	bd10      	pop	{r4, pc}
10009f3a:	46c0      	nop			; (mov r8, r8)
10009f3c:	10009ecd 	.word	0x10009ecd
10009f40:	10008145 	.word	0x10008145
10009f44:	e000e100 	.word	0xe000e100

10009f48 <sms_timer_aon_unregister_callback>:

void sms_timer_aon_unregister_callback(void)
{
10009f48:	b510      	push	{r4, lr}
    aon_sleep_timer_unregister_callback();
10009f4a:	4b04      	ldr	r3, [pc, #16]	; (10009f5c <sms_timer_aon_unregister_callback+0x14>)
10009f4c:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009f4e:	2180      	movs	r1, #128	; 0x80
10009f50:	0509      	lsls	r1, r1, #20
10009f52:	2380      	movs	r3, #128	; 0x80
10009f54:	4a02      	ldr	r2, [pc, #8]	; (10009f60 <sms_timer_aon_unregister_callback+0x18>)
10009f56:	50d1      	str	r1, [r2, r3]
    NVIC_DisableIRQ(AON_SLEEP_TIMER0_IRQn);
}
10009f58:	bd10      	pop	{r4, pc}
10009f5a:	46c0      	nop			; (mov r8, r8)
10009f5c:	10008151 	.word	0x10008151
10009f60:	e000e100 	.word	0xe000e100

10009f64 <sms_dualtimer_init>:
    count = (uint32_t *)0;
}

/* DUALTIMER */
void sms_dualtimer_init(void)
{
10009f64:	b510      	push	{r4, lr}
10009f66:	b088      	sub	sp, #32
    struct dualtimer_config config_dualtimer;
    dualtimer_get_config_defaults(&config_dualtimer);
10009f68:	ac01      	add	r4, sp, #4
10009f6a:	0020      	movs	r0, r4
10009f6c:	4b09      	ldr	r3, [pc, #36]	; (10009f94 <sms_dualtimer_init+0x30>)
10009f6e:	4798      	blx	r3

    config_dualtimer.timer1.load_value = SMS_DUALTIMER_LOAD_S;
10009f70:	4b09      	ldr	r3, [pc, #36]	; (10009f98 <sms_dualtimer_init+0x34>)
10009f72:	60a3      	str	r3, [r4, #8]
    config_dualtimer.timer1.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009f74:	2300      	movs	r3, #0
10009f76:	7063      	strb	r3, [r4, #1]
    config_dualtimer.timer2.load_value = SMS_DUALTIMER_LOAD_MS;
10009f78:	4a08      	ldr	r2, [pc, #32]	; (10009f9c <sms_dualtimer_init+0x38>)
10009f7a:	6162      	str	r2, [r4, #20]
    config_dualtimer.timer2.counter_mode = DUALTIMER_ONE_SHOT_MODE;
10009f7c:	7363      	strb	r3, [r4, #13]

    dualtimer_init(&config_dualtimer);
10009f7e:	0020      	movs	r0, r4
10009f80:	4b07      	ldr	r3, [pc, #28]	; (10009fa0 <sms_dualtimer_init+0x3c>)
10009f82:	4798      	blx	r3
    dualtimer_disable(DUALTIMER_TIMER1);
10009f84:	2000      	movs	r0, #0
10009f86:	4c07      	ldr	r4, [pc, #28]	; (10009fa4 <sms_dualtimer_init+0x40>)
10009f88:	47a0      	blx	r4
    dualtimer_disable(DUALTIMER_TIMER2);
10009f8a:	2001      	movs	r0, #1
10009f8c:	47a0      	blx	r4
}
10009f8e:	b008      	add	sp, #32
10009f90:	bd10      	pop	{r4, pc}
10009f92:	46c0      	nop			; (mov r8, r8)
10009f94:	1000a711 	.word	0x1000a711
10009f98:	018cba80 	.word	0x018cba80
10009f9c:	00006590 	.word	0x00006590
10009fa0:	1000a7b9 	.word	0x1000a7b9
10009fa4:	1000a795 	.word	0x1000a795

10009fa8 <sms_dualtimer_register_callback>:

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
10009fa8:	b510      	push	{r4, lr}
10009faa:	0004      	movs	r4, r0
    dualtimer_register_callback(tmr, cb_handler);
10009fac:	4b02      	ldr	r3, [pc, #8]	; (10009fb8 <sms_dualtimer_register_callback+0x10>)
10009fae:	4798      	blx	r3
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
10009fb0:	0020      	movs	r0, r4
10009fb2:	4b02      	ldr	r3, [pc, #8]	; (10009fbc <sms_dualtimer_register_callback+0x14>)
10009fb4:	4798      	blx	r3

void sms_dualtimer_register_callback(enum dualtimer_timer tmr, sms_dualtimer_callback_t cb_handler)
{
    dualtimer_register_callback(tmr, cb_handler);
    sms_dualtimer_stop(tmr);
}
10009fb6:	bd10      	pop	{r4, pc}
10009fb8:	1000a8bd 	.word	0x1000a8bd
10009fbc:	1000a795 	.word	0x1000a795

10009fc0 <sms_dualtimer_start>:

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
10009fc0:	b510      	push	{r4, lr}
10009fc2:	0014      	movs	r4, r2
    uint32_t timer_load = 1;
    switch(unit) {
10009fc4:	2801      	cmp	r0, #1
10009fc6:	d006      	beq.n	10009fd6 <sms_dualtimer_start+0x16>
10009fc8:	2800      	cmp	r0, #0
10009fca:	d002      	beq.n	10009fd2 <sms_dualtimer_start+0x12>
10009fcc:	2802      	cmp	r0, #2
10009fce:	d004      	beq.n	10009fda <sms_dualtimer_start+0x1a>
10009fd0:	e005      	b.n	10009fde <sms_dualtimer_start+0x1e>
        case TIMER_UNIT_US:
        timer_load = SMS_DUALTIMER_LOAD_US;
10009fd2:	221a      	movs	r2, #26
10009fd4:	e004      	b.n	10009fe0 <sms_dualtimer_start+0x20>
        break;
        
        case TIMER_UNIT_MS:
        timer_load = SMS_DUALTIMER_LOAD_MS;
10009fd6:	4a0c      	ldr	r2, [pc, #48]	; (1000a008 <sms_dualtimer_start+0x48>)
        break;
10009fd8:	e002      	b.n	10009fe0 <sms_dualtimer_start+0x20>
        
        case TIMER_UNIT_S:
        timer_load = SMS_DUALTIMER_LOAD_S;
10009fda:	4a0c      	ldr	r2, [pc, #48]	; (1000a00c <sms_dualtimer_start+0x4c>)
        break;
10009fdc:	e000      	b.n	10009fe0 <sms_dualtimer_start+0x20>
    sms_dualtimer_stop(tmr);
}

void sms_dualtimer_start(timer_unit_type_t unit, uint32_t delay, enum dualtimer_timer tmr)
{
    uint32_t timer_load = 1;
10009fde:	2201      	movs	r2, #1
        
        default:
        break;
    }
    
    if(delay <= 0) {
10009fe0:	2900      	cmp	r1, #0
10009fe2:	d101      	bne.n	10009fe8 <sms_dualtimer_start+0x28>
        //DBG_LOG("[sms_dualtimer_start]\tWarning! Delay value < 0... setting to 1000");
        delay = 1000;
10009fe4:	21fa      	movs	r1, #250	; 0xfa
10009fe6:	0089      	lsls	r1, r1, #2
    }
    
    ulp_ready = false;
10009fe8:	2000      	movs	r0, #0
10009fea:	4b09      	ldr	r3, [pc, #36]	; (1000a010 <sms_dualtimer_start+0x50>)
10009fec:	7018      	strb	r0, [r3, #0]
    //DBG_LOG_DEV("[sms_dualtimer_start]\t\tStarting timer%d... load: %ld, delay: %ld", (tmr+1), timer_load, delay);
    dualtimer_set_counter(tmr, DUALTIMER_SET_CURRUNT_REG, timer_load * delay);
10009fee:	434a      	muls	r2, r1
10009ff0:	2100      	movs	r1, #0
10009ff2:	0020      	movs	r0, r4
10009ff4:	4b07      	ldr	r3, [pc, #28]	; (1000a014 <sms_dualtimer_start+0x54>)
10009ff6:	4798      	blx	r3
    dualtimer_enable(tmr);
10009ff8:	0020      	movs	r0, r4
10009ffa:	4b07      	ldr	r3, [pc, #28]	; (1000a018 <sms_dualtimer_start+0x58>)
10009ffc:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
10009ffe:	2280      	movs	r2, #128	; 0x80
1000a000:	01d2      	lsls	r2, r2, #7
1000a002:	4b06      	ldr	r3, [pc, #24]	; (1000a01c <sms_dualtimer_start+0x5c>)
1000a004:	601a      	str	r2, [r3, #0]
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}
1000a006:	bd10      	pop	{r4, pc}
1000a008:	00006590 	.word	0x00006590
1000a00c:	018cba80 	.word	0x018cba80
1000a010:	100194fd 	.word	0x100194fd
1000a014:	1000a749 	.word	0x1000a749
1000a018:	1000a771 	.word	0x1000a771
1000a01c:	e000e100 	.word	0xe000e100

1000a020 <sms_dualtimer_stop>:

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
1000a020:	b510      	push	{r4, lr}
    dualtimer_disable(tmr);
1000a022:	4b01      	ldr	r3, [pc, #4]	; (1000a028 <sms_dualtimer_stop+0x8>)
1000a024:	4798      	blx	r3
}
1000a026:	bd10      	pop	{r4, pc}
1000a028:	1000a795 	.word	0x1000a795

1000a02c <sms_dualtimer1_cb>:

void sms_dualtimer1_cb(void)
{
1000a02c:	b510      	push	{r4, lr}
    timer1_instance.new_int = true;
1000a02e:	2201      	movs	r2, #1
1000a030:	4b04      	ldr	r3, [pc, #16]	; (1000a044 <sms_dualtimer1_cb+0x18>)
1000a032:	709a      	strb	r2, [r3, #2]
    send_plf_int_msg_ind(DUALTIMER_TIMER1_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
1000a034:	2300      	movs	r3, #0
1000a036:	2200      	movs	r2, #0
1000a038:	2101      	movs	r1, #1
1000a03a:	2040      	movs	r0, #64	; 0x40
1000a03c:	4c02      	ldr	r4, [pc, #8]	; (1000a048 <sms_dualtimer1_cb+0x1c>)
1000a03e:	47a0      	blx	r4
}
1000a040:	bd10      	pop	{r4, pc}
1000a042:	46c0      	nop			; (mov r8, r8)
1000a044:	10019590 	.word	0x10019590
1000a048:	1000d951 	.word	0x1000d951

1000a04c <sms_dualtimer1_fn>:
    send_plf_int_msg_ind(DUALTIMER_TIMER2_CALLBACK, TIMER_EXPIRED_CALLBACK_TYPE_DETECT, NULL, 0);
}


void sms_dualtimer1_fn(void)
{
1000a04c:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    switch(timer1_current_mode) {
1000a04e:	4b79      	ldr	r3, [pc, #484]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a050:	781b      	ldrb	r3, [r3, #0]
1000a052:	b2db      	uxtb	r3, r3
1000a054:	2b01      	cmp	r3, #1
1000a056:	d003      	beq.n	1000a060 <sms_dualtimer1_fn+0x14>
1000a058:	2b02      	cmp	r3, #2
1000a05a:	d100      	bne.n	1000a05e <sms_dualtimer1_fn+0x12>
1000a05c:	e0ae      	b.n	1000a1bc <sms_dualtimer1_fn+0x170>
1000a05e:	e0e1      	b.n	1000a224 <sms_dualtimer1_fn+0x1d8>
        /* Timer1 mode = STARTUP */
        case TIMER1_MODE_STARTUP:
        {
            timer1_current_mode = TIMER1_MODE_NONE;
1000a060:	2200      	movs	r2, #0
1000a062:	4b74      	ldr	r3, [pc, #464]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a064:	701a      	strb	r2, [r3, #0]
            button_instance.previous_state = button_instance.current_state;
1000a066:	4c74      	ldr	r4, [pc, #464]	; (1000a238 <sms_dualtimer1_fn+0x1ec>)
1000a068:	7b63      	ldrb	r3, [r4, #13]
1000a06a:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a06c:	4b73      	ldr	r3, [pc, #460]	; (1000a23c <sms_dualtimer1_fn+0x1f0>)
1000a06e:	4798      	blx	r3
1000a070:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a072:	4873      	ldr	r0, [pc, #460]	; (1000a240 <sms_dualtimer1_fn+0x1f4>)
1000a074:	4b73      	ldr	r3, [pc, #460]	; (1000a244 <sms_dualtimer1_fn+0x1f8>)
1000a076:	4798      	blx	r3
            
            switch(button_instance.previous_state) {
1000a078:	7b23      	ldrb	r3, [r4, #12]
1000a07a:	2b01      	cmp	r3, #1
1000a07c:	d002      	beq.n	1000a084 <sms_dualtimer1_fn+0x38>
1000a07e:	2b02      	cmp	r3, #2
1000a080:	d04c      	beq.n	1000a11c <sms_dualtimer1_fn+0xd0>
1000a082:	e093      	b.n	1000a1ac <sms_dualtimer1_fn+0x160>
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B0:
                switch(button_instance.current_state) {
1000a084:	4b6c      	ldr	r3, [pc, #432]	; (1000a238 <sms_dualtimer1_fn+0x1ec>)
1000a086:	7b5b      	ldrb	r3, [r3, #13]
1000a088:	2b01      	cmp	r3, #1
1000a08a:	d002      	beq.n	1000a092 <sms_dualtimer1_fn+0x46>
1000a08c:	2b02      	cmp	r3, #2
1000a08e:	d023      	beq.n	1000a0d8 <sms_dualtimer1_fn+0x8c>
1000a090:	e03b      	b.n	1000a10a <sms_dualtimer1_fn+0xbe>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a092:	4b6d      	ldr	r3, [pc, #436]	; (1000a248 <sms_dualtimer1_fn+0x1fc>)
1000a094:	781b      	ldrb	r3, [r3, #0]
1000a096:	2b00      	cmp	r3, #0
1000a098:	d115      	bne.n	1000a0c6 <sms_dualtimer1_fn+0x7a>
                        sms_btn_cnt++;
1000a09a:	4a6c      	ldr	r2, [pc, #432]	; (1000a24c <sms_dualtimer1_fn+0x200>)
1000a09c:	7813      	ldrb	r3, [r2, #0]
1000a09e:	3301      	adds	r3, #1
1000a0a0:	b2db      	uxtb	r3, r3
1000a0a2:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a0a4:	2b0f      	cmp	r3, #15
1000a0a6:	d905      	bls.n	1000a0b4 <sms_dualtimer1_fn+0x68>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a0a8:	2200      	movs	r2, #0
1000a0aa:	4b62      	ldr	r3, [pc, #392]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a0ac:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a0ae:	4b68      	ldr	r3, [pc, #416]	; (1000a250 <sms_dualtimer1_fn+0x204>)
1000a0b0:	4798      	blx	r3
1000a0b2:	e0be      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a0b4:	2201      	movs	r2, #1
1000a0b6:	4b5f      	ldr	r3, [pc, #380]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a0b8:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a0ba:	2200      	movs	r2, #0
1000a0bc:	21fa      	movs	r1, #250	; 0xfa
1000a0be:	2001      	movs	r0, #1
1000a0c0:	4b64      	ldr	r3, [pc, #400]	; (1000a254 <sms_dualtimer1_fn+0x208>)
1000a0c2:	4798      	blx	r3
1000a0c4:	e0b5      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a0c6:	4b64      	ldr	r3, [pc, #400]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a0c8:	781b      	ldrb	r3, [r3, #0]
1000a0ca:	2b00      	cmp	r3, #0
1000a0cc:	d000      	beq.n	1000a0d0 <sms_dualtimer1_fn+0x84>
1000a0ce:	e0b0      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a0d0:	2201      	movs	r2, #1
1000a0d2:	4b62      	ldr	r3, [pc, #392]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a0d4:	701a      	strb	r2, [r3, #0]
1000a0d6:	e0ac      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a0d8:	4b5b      	ldr	r3, [pc, #364]	; (1000a248 <sms_dualtimer1_fn+0x1fc>)
1000a0da:	781b      	ldrb	r3, [r3, #0]
1000a0dc:	2b00      	cmp	r3, #0
1000a0de:	d10b      	bne.n	1000a0f8 <sms_dualtimer1_fn+0xac>
                        sms_btn_cnt = 0;
1000a0e0:	2200      	movs	r2, #0
1000a0e2:	4b5a      	ldr	r3, [pc, #360]	; (1000a24c <sms_dualtimer1_fn+0x200>)
1000a0e4:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a0e6:	3201      	adds	r2, #1
1000a0e8:	4b52      	ldr	r3, [pc, #328]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a0ea:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a0ec:	2200      	movs	r2, #0
1000a0ee:	2164      	movs	r1, #100	; 0x64
1000a0f0:	2001      	movs	r0, #1
1000a0f2:	4b58      	ldr	r3, [pc, #352]	; (1000a254 <sms_dualtimer1_fn+0x208>)
1000a0f4:	4798      	blx	r3
1000a0f6:	e09c      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a0f8:	4b57      	ldr	r3, [pc, #348]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a0fa:	781b      	ldrb	r3, [r3, #0]
1000a0fc:	2b00      	cmp	r3, #0
1000a0fe:	d000      	beq.n	1000a102 <sms_dualtimer1_fn+0xb6>
1000a100:	e097      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a102:	2201      	movs	r2, #1
1000a104:	4b55      	ldr	r3, [pc, #340]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a106:	701a      	strb	r2, [r3, #0]
1000a108:	e093      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b0: switch current_state ---
                    case BUTTON_STATE_BOTH:
                    case BUTTON_STATE_NONE:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a10a:	4b53      	ldr	r3, [pc, #332]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a10c:	781b      	ldrb	r3, [r3, #0]
1000a10e:	2b00      	cmp	r3, #0
1000a110:	d000      	beq.n	1000a114 <sms_dualtimer1_fn+0xc8>
1000a112:	e08e      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a114:	2201      	movs	r2, #1
1000a116:	4b51      	ldr	r3, [pc, #324]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a118:	701a      	strb	r2, [r3, #0]
1000a11a:	e08a      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                }
                break;
                
                // --- Timer1 mode = STARTUP: switch prev_state ---
                case BUTTON_STATE_B1:
                switch(button_instance.current_state) {
1000a11c:	4b46      	ldr	r3, [pc, #280]	; (1000a238 <sms_dualtimer1_fn+0x1ec>)
1000a11e:	7b5b      	ldrb	r3, [r3, #13]
1000a120:	2b01      	cmp	r3, #1
1000a122:	d023      	beq.n	1000a16c <sms_dualtimer1_fn+0x120>
1000a124:	2b02      	cmp	r3, #2
1000a126:	d139      	bne.n	1000a19c <sms_dualtimer1_fn+0x150>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B1:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a128:	4b47      	ldr	r3, [pc, #284]	; (1000a248 <sms_dualtimer1_fn+0x1fc>)
1000a12a:	781b      	ldrb	r3, [r3, #0]
1000a12c:	2b00      	cmp	r3, #0
1000a12e:	d115      	bne.n	1000a15c <sms_dualtimer1_fn+0x110>
                        sms_btn_cnt++;
1000a130:	4a46      	ldr	r2, [pc, #280]	; (1000a24c <sms_dualtimer1_fn+0x200>)
1000a132:	7813      	ldrb	r3, [r2, #0]
1000a134:	3301      	adds	r3, #1
1000a136:	b2db      	uxtb	r3, r3
1000a138:	7013      	strb	r3, [r2, #0]
                        if(sms_btn_cnt >= SMS_BTN_STARTUP_CNT) {
1000a13a:	2b0f      	cmp	r3, #15
1000a13c:	d905      	bls.n	1000a14a <sms_dualtimer1_fn+0xfe>
                            timer1_current_mode = TIMER1_MODE_NONE;
1000a13e:	2200      	movs	r2, #0
1000a140:	4b3c      	ldr	r3, [pc, #240]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a142:	701a      	strb	r2, [r3, #0]
                            sms_ble_startup();
1000a144:	4b42      	ldr	r3, [pc, #264]	; (1000a250 <sms_dualtimer1_fn+0x204>)
1000a146:	4798      	blx	r3
1000a148:	e073      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        }
                        else {
                            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                            timer1_current_mode = TIMER1_MODE_STARTUP;
1000a14a:	2201      	movs	r2, #1
1000a14c:	4b39      	ldr	r3, [pc, #228]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a14e:	701a      	strb	r2, [r3, #0]
                            //ulp_ready = false;
                            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_STARTUP_MS, DUALTIMER_TIMER1);
1000a150:	2200      	movs	r2, #0
1000a152:	21fa      	movs	r1, #250	; 0xfa
1000a154:	2001      	movs	r0, #1
1000a156:	4b3f      	ldr	r3, [pc, #252]	; (1000a254 <sms_dualtimer1_fn+0x208>)
1000a158:	4798      	blx	r3
1000a15a:	e06a      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        }
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a15c:	4b3e      	ldr	r3, [pc, #248]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a15e:	781b      	ldrb	r3, [r3, #0]
1000a160:	2b00      	cmp	r3, #0
1000a162:	d166      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a164:	2201      	movs	r2, #1
1000a166:	4b3d      	ldr	r3, [pc, #244]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a168:	701a      	strb	r2, [r3, #0]
1000a16a:	e062      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    }
                    break;
                    
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_B0:
                    if(ble_instance.current_state == BLE_STATE_POWEROFF) {
1000a16c:	4b36      	ldr	r3, [pc, #216]	; (1000a248 <sms_dualtimer1_fn+0x1fc>)
1000a16e:	781b      	ldrb	r3, [r3, #0]
1000a170:	2b00      	cmp	r3, #0
1000a172:	d10b      	bne.n	1000a18c <sms_dualtimer1_fn+0x140>
                        sms_btn_cnt = 0;
1000a174:	2200      	movs	r2, #0
1000a176:	4b35      	ldr	r3, [pc, #212]	; (1000a24c <sms_dualtimer1_fn+0x200>)
1000a178:	701a      	strb	r2, [r3, #0]
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        timer1_current_mode = TIMER1_MODE_STARTUP;
1000a17a:	3201      	adds	r2, #1
1000a17c:	4b2d      	ldr	r3, [pc, #180]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a17e:	701a      	strb	r2, [r3, #0]
                        //ulp_ready = false;
                        sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER1);
1000a180:	2200      	movs	r2, #0
1000a182:	2164      	movs	r1, #100	; 0x64
1000a184:	2001      	movs	r0, #1
1000a186:	4b33      	ldr	r3, [pc, #204]	; (1000a254 <sms_dualtimer1_fn+0x208>)
1000a188:	4798      	blx	r3
1000a18a:	e052      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    }
                    else {
                        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a18c:	4b32      	ldr	r3, [pc, #200]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a18e:	781b      	ldrb	r3, [r3, #0]
1000a190:	2b00      	cmp	r3, #0
1000a192:	d14e      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                            //release_sleep_lock();
                            ulp_ready = true;
1000a194:	2201      	movs	r2, #1
1000a196:	4b31      	ldr	r3, [pc, #196]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a198:	701a      	strb	r2, [r3, #0]
1000a19a:	e04a      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    // --- prev_state = b1: switch current_state ---
                    case BUTTON_STATE_NONE:
                    case BUTTON_STATE_BOTH:
                    default:
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a19c:	4b2e      	ldr	r3, [pc, #184]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a19e:	781b      	ldrb	r3, [r3, #0]
1000a1a0:	2b00      	cmp	r3, #0
1000a1a2:	d146      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a1a4:	2201      	movs	r2, #1
1000a1a6:	4b2d      	ldr	r3, [pc, #180]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a1a8:	701a      	strb	r2, [r3, #0]
1000a1aa:	e042      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                case BUTTON_STATE_NONE:
                case BUTTON_STATE_BOTH:
                default:
                {
                    //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
                    if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a1ac:	4b2a      	ldr	r3, [pc, #168]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a1ae:	781b      	ldrb	r3, [r3, #0]
1000a1b0:	2b00      	cmp	r3, #0
1000a1b2:	d13e      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                        //release_sleep_lock();
                        ulp_ready = true;
1000a1b4:	2201      	movs	r2, #1
1000a1b6:	4b29      	ldr	r3, [pc, #164]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a1b8:	701a      	strb	r2, [r3, #0]
1000a1ba:	e03a      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
        
        /* Timer1 mode = SHUTDOWN */
        case TIMER1_MODE_SHUTDOWN:
        {
            //timer1_current_mode = TIMER1_MODE_NONE;
            button_instance.previous_state = button_instance.current_state;
1000a1bc:	4c1e      	ldr	r4, [pc, #120]	; (1000a238 <sms_dualtimer1_fn+0x1ec>)
1000a1be:	7b63      	ldrb	r3, [r4, #13]
1000a1c0:	7323      	strb	r3, [r4, #12]
            button_instance.current_state = sms_button_get_state();
1000a1c2:	4b1e      	ldr	r3, [pc, #120]	; (1000a23c <sms_dualtimer1_fn+0x1f0>)
1000a1c4:	4798      	blx	r3
1000a1c6:	7360      	strb	r0, [r4, #13]
            sms_monitor_get_states("[sms_dualtimer1_fn]");
1000a1c8:	481d      	ldr	r0, [pc, #116]	; (1000a240 <sms_dualtimer1_fn+0x1f4>)
1000a1ca:	4b1e      	ldr	r3, [pc, #120]	; (1000a244 <sms_dualtimer1_fn+0x1f8>)
1000a1cc:	4798      	blx	r3
            
            if((button_instance.previous_state == BUTTON_STATE_BOTH) && (button_instance.current_state == BUTTON_STATE_BOTH)) {
1000a1ce:	89a2      	ldrh	r2, [r4, #12]
1000a1d0:	4b23      	ldr	r3, [pc, #140]	; (1000a260 <sms_dualtimer1_fn+0x214>)
1000a1d2:	429a      	cmp	r2, r3
1000a1d4:	d112      	bne.n	1000a1fc <sms_dualtimer1_fn+0x1b0>
                sms_btn_cnt++;
1000a1d6:	4a1d      	ldr	r2, [pc, #116]	; (1000a24c <sms_dualtimer1_fn+0x200>)
1000a1d8:	7813      	ldrb	r3, [r2, #0]
1000a1da:	3301      	adds	r3, #1
1000a1dc:	b2db      	uxtb	r3, r3
1000a1de:	7013      	strb	r3, [r2, #0]
                if(sms_btn_cnt >= SMS_BTN_SHTDWN_CNT) {
1000a1e0:	2b09      	cmp	r3, #9
1000a1e2:	d902      	bls.n	1000a1ea <sms_dualtimer1_fn+0x19e>
                    sms_ble_power_down();
1000a1e4:	4b1f      	ldr	r3, [pc, #124]	; (1000a264 <sms_dualtimer1_fn+0x218>)
1000a1e6:	4798      	blx	r3
1000a1e8:	e023      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                }
                else {
                    //sms_sensors_toggle_interrupt(SMS_EXTINT_DISABLE);
                    timer1_current_mode = TIMER1_MODE_SHUTDOWN;
1000a1ea:	2202      	movs	r2, #2
1000a1ec:	4b11      	ldr	r3, [pc, #68]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a1ee:	701a      	strb	r2, [r3, #0]
                    sms_dualtimer_start(TIMER_UNIT_MS, SMS_BTN_SHTDWN_MS, DUALTIMER_TIMER1);
1000a1f0:	2200      	movs	r2, #0
1000a1f2:	21fa      	movs	r1, #250	; 0xfa
1000a1f4:	2001      	movs	r0, #1
1000a1f6:	4b17      	ldr	r3, [pc, #92]	; (1000a254 <sms_dualtimer1_fn+0x208>)
1000a1f8:	4798      	blx	r3
1000a1fa:	e01a      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                }
            }
            else {
                if(pressure_device.state == PRESSURE_STATE_STDBY) {
1000a1fc:	232b      	movs	r3, #43	; 0x2b
1000a1fe:	4a1a      	ldr	r2, [pc, #104]	; (1000a268 <sms_dualtimer1_fn+0x21c>)
1000a200:	5cd3      	ldrb	r3, [r2, r3]
1000a202:	2b01      	cmp	r3, #1
1000a204:	d103      	bne.n	1000a20e <sms_dualtimer1_fn+0x1c2>
                    DBG_LOG_DEV("[sms_dualtimer1_fn]\t\tStarting sensors (shutting down)...");
                    sms_sensors_interrupt_toggle(false, true);
1000a206:	2101      	movs	r1, #1
1000a208:	2000      	movs	r0, #0
1000a20a:	4b18      	ldr	r3, [pc, #96]	; (1000a26c <sms_dualtimer1_fn+0x220>)
1000a20c:	4798      	blx	r3
                }                    
                timer1_current_mode = TIMER1_MODE_NONE;
1000a20e:	2200      	movs	r2, #0
1000a210:	4b08      	ldr	r3, [pc, #32]	; (1000a234 <sms_dualtimer1_fn+0x1e8>)
1000a212:	701a      	strb	r2, [r3, #0]
                if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a214:	4b10      	ldr	r3, [pc, #64]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a216:	781b      	ldrb	r3, [r3, #0]
1000a218:	2b00      	cmp	r3, #0
1000a21a:	d10a      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
                    ulp_ready = true;
1000a21c:	3201      	adds	r2, #1
1000a21e:	4b0f      	ldr	r3, [pc, #60]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a220:	701a      	strb	r2, [r3, #0]
1000a222:	e006      	b.n	1000a232 <sms_dualtimer1_fn+0x1e6>
        }
        
        case TIMER1_MODE_NONE:
        default:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        if(timer2_current_mode == TIMER2_MODE_NONE) {
1000a224:	4b0c      	ldr	r3, [pc, #48]	; (1000a258 <sms_dualtimer1_fn+0x20c>)
1000a226:	781b      	ldrb	r3, [r3, #0]
1000a228:	2b00      	cmp	r3, #0
1000a22a:	d102      	bne.n	1000a232 <sms_dualtimer1_fn+0x1e6>
            //release_sleep_lock();
            ulp_ready = true;
1000a22c:	2201      	movs	r2, #1
1000a22e:	4b0b      	ldr	r3, [pc, #44]	; (1000a25c <sms_dualtimer1_fn+0x210>)
1000a230:	701a      	strb	r2, [r3, #0]
        }            
        break;
    } // switch(timer1_current_mode)
}
1000a232:	bd10      	pop	{r4, pc}
1000a234:	10019430 	.word	0x10019430
1000a238:	1001951c 	.word	0x1001951c
1000a23c:	10008bbd 	.word	0x10008bbd
1000a240:	10016ac4 	.word	0x10016ac4
1000a244:	10008e55 	.word	0x10008e55
1000a248:	10019500 	.word	0x10019500
1000a24c:	10019686 	.word	0x10019686
1000a250:	1000851d 	.word	0x1000851d
1000a254:	10009fc1 	.word	0x10009fc1
1000a258:	1001963f 	.word	0x1001963f
1000a25c:	100194fd 	.word	0x100194fd
1000a260:	00000303 	.word	0x00000303
1000a264:	10008535 	.word	0x10008535
1000a268:	100195a4 	.word	0x100195a4
1000a26c:	10009d59 	.word	0x10009d59

1000a270 <sms_dualtimer2_fn>:

void sms_dualtimer2_fn(void)
{
1000a270:	b510      	push	{r4, lr}
    //sms_button_toggle_interrupt(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
    sms_monitor_get_states("[sms_dualtimer2_fn]");
1000a272:	483a      	ldr	r0, [pc, #232]	; (1000a35c <sms_dualtimer2_fn+0xec>)
1000a274:	4b3a      	ldr	r3, [pc, #232]	; (1000a360 <sms_dualtimer2_fn+0xf0>)
1000a276:	4798      	blx	r3
    switch(timer2_current_mode) {
1000a278:	4b3a      	ldr	r3, [pc, #232]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a27a:	781b      	ldrb	r3, [r3, #0]
1000a27c:	b2db      	uxtb	r3, r3
1000a27e:	2b02      	cmp	r3, #2
1000a280:	d028      	beq.n	1000a2d4 <sms_dualtimer2_fn+0x64>
1000a282:	2b03      	cmp	r3, #3
1000a284:	d047      	beq.n	1000a316 <sms_dualtimer2_fn+0xa6>
1000a286:	2b01      	cmp	r3, #1
1000a288:	d166      	bne.n	1000a358 <sms_dualtimer2_fn+0xe8>
        case TIMER2_MODE_INDICATION_TOUT:
        timer2_current_mode = TIMER2_MODE_NONE;
1000a28a:	2200      	movs	r2, #0
1000a28c:	4b35      	ldr	r3, [pc, #212]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a28e:	701a      	strb	r2, [r3, #0]
        if(ble_instance.current_state == BLE_STATE_PAIRED) {
1000a290:	4b35      	ldr	r3, [pc, #212]	; (1000a368 <sms_dualtimer2_fn+0xf8>)
1000a292:	781b      	ldrb	r3, [r3, #0]
1000a294:	2b22      	cmp	r3, #34	; 0x22
1000a296:	d107      	bne.n	1000a2a8 <sms_dualtimer2_fn+0x38>
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            if(timer1_current_mode == TIMER1_MODE_NONE) {
1000a298:	4b34      	ldr	r3, [pc, #208]	; (1000a36c <sms_dualtimer2_fn+0xfc>)
1000a29a:	781b      	ldrb	r3, [r3, #0]
1000a29c:	2b00      	cmp	r3, #0
1000a29e:	d15b      	bne.n	1000a358 <sms_dualtimer2_fn+0xe8>
                //release_sleep_lock();
                ulp_ready = true;
1000a2a0:	3201      	adds	r2, #1
1000a2a2:	4b33      	ldr	r3, [pc, #204]	; (1000a370 <sms_dualtimer2_fn+0x100>)
1000a2a4:	701a      	strb	r2, [r3, #0]
1000a2a6:	e057      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
            }                
        }
        else {
            sms_ble_ind_retry++;
1000a2a8:	4a32      	ldr	r2, [pc, #200]	; (1000a374 <sms_dualtimer2_fn+0x104>)
1000a2aa:	7813      	ldrb	r3, [r2, #0]
1000a2ac:	3301      	adds	r3, #1
1000a2ae:	b2db      	uxtb	r3, r3
1000a2b0:	7013      	strb	r3, [r2, #0]
            if(sms_ble_ind_retry >= BLE_INDICATION_RETRY_MAX) {
1000a2b2:	2b00      	cmp	r3, #0
1000a2b4:	d006      	beq.n	1000a2c4 <sms_dualtimer2_fn+0x54>
                DBG_LOG_CONT_DEV(" ...giving up!");
                //DBG_LOG_DEV("[sms_dualtimer2_fn]\tTimer1 mode: %d", timer1_current_mode);
                timer2_current_mode = TIMER2_MODE_NONE;
1000a2b6:	2200      	movs	r2, #0
1000a2b8:	4b2a      	ldr	r3, [pc, #168]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a2ba:	701a      	strb	r2, [r3, #0]
                ble_instance.current_state = BLE_STATE_PAIRED;
1000a2bc:	3222      	adds	r2, #34	; 0x22
1000a2be:	4b2a      	ldr	r3, [pc, #168]	; (1000a368 <sms_dualtimer2_fn+0xf8>)
1000a2c0:	701a      	strb	r2, [r3, #0]
1000a2c2:	e049      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
                //if(timer1_current_mode == TIMER1_MODE_NONE) release_sleep_lock();
            }
            else {
                DBG_LOG_CONT_DEV(" ...waiting... counter: %d", sms_ble_ind_retry);
                //sms_ble_send_characteristic(BLE_CHAR_PRESSURE);
                timer2_current_mode = TIMER2_MODE_INDICATION_TOUT;
1000a2c4:	2201      	movs	r2, #1
1000a2c6:	4b27      	ldr	r3, [pc, #156]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a2c8:	701a      	strb	r2, [r3, #0]
                //ulp_ready = false;
                sms_dualtimer_start(TIMER_UNIT_MS, BLE_INDICATION_TOUT_MS, DUALTIMER_TIMER2);
1000a2ca:	2164      	movs	r1, #100	; 0x64
1000a2cc:	2001      	movs	r0, #1
1000a2ce:	4b2a      	ldr	r3, [pc, #168]	; (1000a378 <sms_dualtimer2_fn+0x108>)
1000a2d0:	4798      	blx	r3
1000a2d2:	e041      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_STARTUP:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking startup...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000a2d4:	2200      	movs	r2, #0
1000a2d6:	4b23      	ldr	r3, [pc, #140]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a2d8:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000a2da:	4a28      	ldr	r2, [pc, #160]	; (1000a37c <sms_dualtimer2_fn+0x10c>)
1000a2dc:	7813      	ldrb	r3, [r2, #0]
1000a2de:	3301      	adds	r3, #1
1000a2e0:	b2db      	uxtb	r3, r3
1000a2e2:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_STARTUP_CNT) {
1000a2e4:	7813      	ldrb	r3, [r2, #0]
1000a2e6:	b2db      	uxtb	r3, r3
1000a2e8:	2b07      	cmp	r3, #7
1000a2ea:	d908      	bls.n	1000a2fe <sms_dualtimer2_fn+0x8e>
            sms_led_switch_off(SMS_LED_0_PIN);
1000a2ec:	2016      	movs	r0, #22
1000a2ee:	4b24      	ldr	r3, [pc, #144]	; (1000a380 <sms_dualtimer2_fn+0x110>)
1000a2f0:	4798      	blx	r3
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            /* Blinking done... starting ble advertisement */
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tSMS awake... starting advertisement");
            sms_ble_advertise();
1000a2f2:	4b24      	ldr	r3, [pc, #144]	; (1000a384 <sms_dualtimer2_fn+0x114>)
1000a2f4:	4798      	blx	r3
            ulp_ready = true;
1000a2f6:	2201      	movs	r2, #1
1000a2f8:	4b1d      	ldr	r3, [pc, #116]	; (1000a370 <sms_dualtimer2_fn+0x100>)
1000a2fa:	701a      	strb	r2, [r3, #0]
1000a2fc:	e02c      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBlinking up... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000a2fe:	2016      	movs	r0, #22
1000a300:	4b21      	ldr	r3, [pc, #132]	; (1000a388 <sms_dualtimer2_fn+0x118>)
1000a302:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_STARTUP;
1000a304:	2202      	movs	r2, #2
1000a306:	4b17      	ldr	r3, [pc, #92]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a308:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_STARTUP_MS, DUALTIMER_TIMER2);
1000a30a:	3a01      	subs	r2, #1
1000a30c:	2164      	movs	r1, #100	; 0x64
1000a30e:	2001      	movs	r0, #1
1000a310:	4b19      	ldr	r3, [pc, #100]	; (1000a378 <sms_dualtimer2_fn+0x108>)
1000a312:	4798      	blx	r3
1000a314:	e020      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
        }
        break;
        
        case TIMER2_MODE_LED_SHUTDOWN:
        DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tBlinking shutdown...");
        timer2_current_mode = TIMER2_MODE_NONE;
1000a316:	2200      	movs	r2, #0
1000a318:	4b12      	ldr	r3, [pc, #72]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a31a:	701a      	strb	r2, [r3, #0]
        sms_led_blink_cnt++;
1000a31c:	4a17      	ldr	r2, [pc, #92]	; (1000a37c <sms_dualtimer2_fn+0x10c>)
1000a31e:	7813      	ldrb	r3, [r2, #0]
1000a320:	3301      	adds	r3, #1
1000a322:	b2db      	uxtb	r3, r3
1000a324:	7013      	strb	r3, [r2, #0]
        if(sms_led_blink_cnt >= SMS_BLINK_SHTDWN_CNT) {
1000a326:	7813      	ldrb	r3, [r2, #0]
1000a328:	b2db      	uxtb	r3, r3
1000a32a:	2b03      	cmp	r3, #3
1000a32c:	d908      	bls.n	1000a340 <sms_dualtimer2_fn+0xd0>
            sms_led_switch_off(SMS_LED_0_PIN);
1000a32e:	2016      	movs	r0, #22
1000a330:	4b13      	ldr	r3, [pc, #76]	; (1000a380 <sms_dualtimer2_fn+0x110>)
1000a332:	4798      	blx	r3
            DBG_LOG_DEV("[sms_dualtimer2_fn]\t\tPowering off...");
            //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
            sms_init_variables();
1000a334:	4b15      	ldr	r3, [pc, #84]	; (1000a38c <sms_dualtimer2_fn+0x11c>)
1000a336:	4798      	blx	r3
            ulp_ready = true;
1000a338:	2201      	movs	r2, #1
1000a33a:	4b0d      	ldr	r3, [pc, #52]	; (1000a370 <sms_dualtimer2_fn+0x100>)
1000a33c:	701a      	strb	r2, [r3, #0]
1000a33e:	e00b      	b.n	1000a358 <sms_dualtimer2_fn+0xe8>
            //release_sleep_lock();
        }
        else {
            //DBG_LOG_DEV("[sms_dualtimer2_fn]\tBLinking off... cnt = %d", sms_led_blink_cnt);
            sms_led_toggle(SMS_LED_0_PIN);
1000a340:	2016      	movs	r0, #22
1000a342:	4b11      	ldr	r3, [pc, #68]	; (1000a388 <sms_dualtimer2_fn+0x118>)
1000a344:	4798      	blx	r3
            timer2_current_mode = TIMER2_MODE_LED_SHUTDOWN;
1000a346:	2203      	movs	r2, #3
1000a348:	4b06      	ldr	r3, [pc, #24]	; (1000a364 <sms_dualtimer2_fn+0xf4>)
1000a34a:	701a      	strb	r2, [r3, #0]
            //ulp_ready = false;
            sms_dualtimer_start(TIMER_UNIT_MS, SMS_BLINK_SHTDWN_MS, DUALTIMER_TIMER2);
1000a34c:	3a02      	subs	r2, #2
1000a34e:	21c8      	movs	r1, #200	; 0xc8
1000a350:	0049      	lsls	r1, r1, #1
1000a352:	2001      	movs	r0, #1
1000a354:	4b08      	ldr	r3, [pc, #32]	; (1000a378 <sms_dualtimer2_fn+0x108>)
1000a356:	4798      	blx	r3
        case TIMER2_MODE_LED_CONNECTION_LOST:
        case TIMER2_MODE_NONE:
        //sms_button_toggle_interrupt(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE)
        break;
    }
}
1000a358:	bd10      	pop	{r4, pc}
1000a35a:	46c0      	nop			; (mov r8, r8)
1000a35c:	10016ad8 	.word	0x10016ad8
1000a360:	10008e55 	.word	0x10008e55
1000a364:	1001963f 	.word	0x1001963f
1000a368:	10019500 	.word	0x10019500
1000a36c:	10019430 	.word	0x10019430
1000a370:	100194fd 	.word	0x100194fd
1000a374:	10019631 	.word	0x10019631
1000a378:	10009fc1 	.word	0x10009fc1
1000a37c:	1001968c 	.word	0x1001968c
1000a380:	10009a71 	.word	0x10009a71
1000a384:	100086a5 	.word	0x100086a5
1000a388:	10009ab1 	.word	0x10009ab1
1000a38c:	1000de2d 	.word	0x1000de2d

1000a390 <delay_ms>:

void delay_ms(uint32_t delay) {
1000a390:	b510      	push	{r4, lr}
1000a392:	0001      	movs	r1, r0
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
1000a394:	2201      	movs	r2, #1
1000a396:	2001      	movs	r0, #1
1000a398:	4b05      	ldr	r3, [pc, #20]	; (1000a3b0 <delay_ms+0x20>)
1000a39a:	4798      	blx	r3
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
1000a39c:	4c05      	ldr	r4, [pc, #20]	; (1000a3b4 <delay_ms+0x24>)
1000a39e:	2001      	movs	r0, #1
1000a3a0:	47a0      	blx	r4
1000a3a2:	2800      	cmp	r0, #0
1000a3a4:	d1fb      	bne.n	1000a39e <delay_ms+0xe>
    NVIC_EnableIRQ(DUALTIMER0_IRQn);
}

void sms_dualtimer_stop(enum dualtimer_timer tmr)
{
    dualtimer_disable(tmr);
1000a3a6:	3001      	adds	r0, #1
1000a3a8:	4b03      	ldr	r3, [pc, #12]	; (1000a3b8 <delay_ms+0x28>)
1000a3aa:	4798      	blx	r3
void delay_ms(uint32_t delay) {
	sms_dualtimer_start(TIMER_UNIT_MS, delay, DUALTIMER_TIMER2);
	while(dualtimer_get_value(DUALTIMER_TIMER2)) {
	}
	sms_dualtimer_stop(DUALTIMER_TIMER2);
1000a3ac:	bd10      	pop	{r4, pc}
1000a3ae:	46c0      	nop			; (mov r8, r8)
1000a3b0:	10009fc1 	.word	0x10009fc1
1000a3b4:	1000a735 	.word	0x1000a735
1000a3b8:	1000a795 	.word	0x1000a795

1000a3bc <spi_slave_inst_get_config_defaults>:
void spi_slave_inst_get_config_defaults(
		struct spi_slave_inst_config *const config)
{
	Assert(config);

	config->ss_pin          = PIN_LP_GPIO_12;
1000a3bc:	230c      	movs	r3, #12
1000a3be:	7003      	strb	r3, [r0, #0]
	config->address_enabled = false;
1000a3c0:	2300      	movs	r3, #0
1000a3c2:	7043      	strb	r3, [r0, #1]
	config->address         = 0;
1000a3c4:	7083      	strb	r3, [r0, #2]
}
1000a3c6:	4770      	bx	lr

1000a3c8 <spi_get_config_defaults>:
void spi_get_config_defaults(
		struct spi_config *const config)
{
	Assert(config);

	config->mode             = SPI_MODE_MASTER;
1000a3c8:	2301      	movs	r3, #1
1000a3ca:	7003      	strb	r3, [r0, #0]
	config->data_order       = SPI_DATA_ORDER_MSB;
1000a3cc:	2300      	movs	r3, #0
1000a3ce:	7043      	strb	r3, [r0, #1]
	config->transfer_mode    = SPI_TRANSFER_MODE_0;
1000a3d0:	7083      	strb	r3, [r0, #2]
	config->clock_source     = SPI_CLK_INPUT_0;
1000a3d2:	70c3      	strb	r3, [r0, #3]
	config->clock_divider    = 129;
1000a3d4:	3381      	adds	r3, #129	; 0x81
1000a3d6:	7103      	strb	r3, [r0, #4]

	config->pin_number_pad[0] = PIN_LP_GPIO_10;
1000a3d8:	3b77      	subs	r3, #119	; 0x77
1000a3da:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_11;
1000a3dc:	3301      	adds	r3, #1
1000a3de:	60c3      	str	r3, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_12;
1000a3e0:	3301      	adds	r3, #1
1000a3e2:	6103      	str	r3, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_13;
1000a3e4:	3301      	adds	r3, #1
1000a3e6:	6143      	str	r3, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_10_SPI0_SCK;
1000a3e8:	3b0b      	subs	r3, #11
1000a3ea:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_11_SPI0_MOSI;
1000a3ec:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_12_SPI0_SSN;
1000a3ee:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_13_SPI0_MISO;
1000a3f0:	6243      	str	r3, [r0, #36]	; 0x24
};
1000a3f2:	4770      	bx	lr

1000a3f4 <spi_attach_slave>:
 *
 */
void spi_attach_slave(
		struct spi_slave_inst *const slave,
		struct spi_slave_inst_config *const config)
{
1000a3f4:	b530      	push	{r4, r5, lr}
1000a3f6:	b083      	sub	sp, #12
1000a3f8:	0004      	movs	r4, r0
	Assert(slave);
	Assert(config);

	slave->ss_pin          = config->ss_pin;
1000a3fa:	780b      	ldrb	r3, [r1, #0]
1000a3fc:	7003      	strb	r3, [r0, #0]
	slave->address_enabled = config->address_enabled;
1000a3fe:	784b      	ldrb	r3, [r1, #1]
1000a400:	7043      	strb	r3, [r0, #1]
	slave->address         = config->address;
1000a402:	788b      	ldrb	r3, [r1, #2]
1000a404:	7083      	strb	r3, [r0, #2]

	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a406:	ad01      	add	r5, sp, #4
1000a408:	0028      	movs	r0, r5
1000a40a:	4b07      	ldr	r3, [pc, #28]	; (1000a428 <spi_attach_slave+0x34>)
1000a40c:	4798      	blx	r3
	config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a40e:	2301      	movs	r3, #1
1000a410:	702b      	strb	r3, [r5, #0]
	gpio_pin_set_config(slave->ss_pin, &config_gpio);
1000a412:	7820      	ldrb	r0, [r4, #0]
1000a414:	0029      	movs	r1, r5
1000a416:	4b05      	ldr	r3, [pc, #20]	; (1000a42c <spi_attach_slave+0x38>)
1000a418:	4798      	blx	r3

	gpio_pin_set_output_level(slave->ss_pin, true);
1000a41a:	7820      	ldrb	r0, [r4, #0]
1000a41c:	2101      	movs	r1, #1
1000a41e:	4b04      	ldr	r3, [pc, #16]	; (1000a430 <spi_attach_slave+0x3c>)
1000a420:	4798      	blx	r3
}
1000a422:	b003      	add	sp, #12
1000a424:	bd30      	pop	{r4, r5, pc}
1000a426:	46c0      	nop			; (mov r8, r8)
1000a428:	1000aa25 	.word	0x1000aa25
1000a42c:	1000aa35 	.word	0x1000aa35
1000a430:	1000ac8d 	.word	0x1000ac8d

1000a434 <spi_enable>:
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_enable(struct spi_module *const module)
{
	Spi *const spi_module = (module->hw);
1000a434:	6803      	ldr	r3, [r0, #0]
		NVIC_EnableIRQ(SPI1_TX_IRQn);
	}
#endif

	/* Enable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = SPI_MODULE_ENABLE_ENABLE;
1000a436:	2201      	movs	r2, #1
1000a438:	761a      	strb	r2, [r3, #24]
}
1000a43a:	4770      	bx	lr

1000a43c <spi_disable>:
 * This function will disable the SPI module.
 *
 * \param[in,out] module  Pointer to the software instance struct
 */
void spi_disable(struct spi_module *const module)
{
1000a43c:	b510      	push	{r4, lr}
		NVIC_DisableIRQ(SPI1_TX_IRQn);
	}
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a43e:	2300      	movs	r3, #0
1000a440:	6802      	ldr	r2, [r0, #0]
1000a442:	7613      	strb	r3, [r2, #24]
 */
static void _spi_clock_disable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a444:	6803      	ldr	r3, [r0, #0]

	if (spi_module == (void *)SPI0) {
1000a446:	4a0d      	ldr	r2, [pc, #52]	; (1000a47c <spi_disable+0x40>)
1000a448:	4293      	cmp	r3, r2
1000a44a:	d109      	bne.n	1000a460 <spi_disable+0x24>
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_CLK);
1000a44c:	2041      	movs	r0, #65	; 0x41
1000a44e:	4c0c      	ldr	r4, [pc, #48]	; (1000a480 <spi_disable+0x44>)
1000a450:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_SCK_PHASE);
1000a452:	2026      	movs	r0, #38	; 0x26
1000a454:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_IF);
1000a456:	2038      	movs	r0, #56	; 0x38
1000a458:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI0_CORE);
1000a45a:	2001      	movs	r0, #1
1000a45c:	47a0      	blx	r4
1000a45e:	e00b      	b.n	1000a478 <spi_disable+0x3c>
	} else if (spi_module == (void *)SPI1) {
1000a460:	4a08      	ldr	r2, [pc, #32]	; (1000a484 <spi_disable+0x48>)
1000a462:	4293      	cmp	r3, r2
1000a464:	d108      	bne.n	1000a478 <spi_disable+0x3c>
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_CLK);
1000a466:	2042      	movs	r0, #66	; 0x42
1000a468:	4c05      	ldr	r4, [pc, #20]	; (1000a480 <spi_disable+0x44>)
1000a46a:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_SCK_PHASE);
1000a46c:	2027      	movs	r0, #39	; 0x27
1000a46e:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_IF);
1000a470:	2039      	movs	r0, #57	; 0x39
1000a472:	47a0      	blx	r4
		system_clock_peripheral_disable(PERIPHERAL_SPI1_CORE);
1000a474:	2002      	movs	r0, #2
1000a476:	47a0      	blx	r4
#  endif

	/* Disable SPI */
	spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
	_spi_clock_disable(module);
}
1000a478:	bd10      	pop	{r4, pc}
1000a47a:	46c0      	nop			; (mov r8, r8)
1000a47c:	40006000 	.word	0x40006000
1000a480:	1000b425 	.word	0x1000b425
1000a484:	40007000 	.word	0x40007000

1000a488 <spi_reset>:
 * disable it.
 *
 * \param[in,out] module Pointer to the software instance struct
 */
void spi_reset(struct spi_module *const module)
{
1000a488:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Spi *const spi_module = (module->hw);
1000a48a:	6804      	ldr	r4, [r0, #0]

	/* Disable the module */
	spi_disable(module);
1000a48c:	4b09      	ldr	r3, [pc, #36]	; (1000a4b4 <spi_reset+0x2c>)
1000a48e:	4798      	blx	r3

	/* Software reset the module */
	if(spi_module == (void *)SPI0) {
1000a490:	4b09      	ldr	r3, [pc, #36]	; (1000a4b8 <spi_reset+0x30>)
1000a492:	429c      	cmp	r4, r3
1000a494:	d105      	bne.n	1000a4a2 <spi_reset+0x1a>
		system_peripheral_reset(PERIPHERAL_SPI0_CORE);
1000a496:	2001      	movs	r0, #1
1000a498:	4c08      	ldr	r4, [pc, #32]	; (1000a4bc <spi_reset+0x34>)
1000a49a:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI0_IF);
1000a49c:	2038      	movs	r0, #56	; 0x38
1000a49e:	47a0      	blx	r4
1000a4a0:	e007      	b.n	1000a4b2 <spi_reset+0x2a>
	} else if (spi_module == (void *)SPI1) {
1000a4a2:	4b07      	ldr	r3, [pc, #28]	; (1000a4c0 <spi_reset+0x38>)
1000a4a4:	429c      	cmp	r4, r3
1000a4a6:	d104      	bne.n	1000a4b2 <spi_reset+0x2a>
		system_peripheral_reset(PERIPHERAL_SPI1_CORE);
1000a4a8:	2002      	movs	r0, #2
1000a4aa:	4c04      	ldr	r4, [pc, #16]	; (1000a4bc <spi_reset+0x34>)
1000a4ac:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_SPI1_IF);
1000a4ae:	2039      	movs	r0, #57	; 0x39
1000a4b0:	47a0      	blx	r4
	}
}
1000a4b2:	bd10      	pop	{r4, pc}
1000a4b4:	1000a43d 	.word	0x1000a43d
1000a4b8:	40006000 	.word	0x40006000
1000a4bc:	1000b791 	.word	0x1000b791
1000a4c0:	40007000 	.word	0x40007000

1000a4c4 <spi_init>:
 */
enum status_code spi_init(
		struct spi_module *const module,
		Spi *const hw,
		const struct spi_config *const config)
{
1000a4c4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a4c6:	465f      	mov	r7, fp
1000a4c8:	4646      	mov	r6, r8
1000a4ca:	b4c0      	push	{r6, r7}
1000a4cc:	b083      	sub	sp, #12
1000a4ce:	0006      	movs	r6, r0
1000a4d0:	4688      	mov	r8, r1
1000a4d2:	0015      	movs	r5, r2
	Assert(config);

	uint8_t idx;

	/* Initialize device instance */
	module->hw = hw;
1000a4d4:	6031      	str	r1, [r6, #0]

	Spi *const spi_module = (module->hw);

	/* Check if module is enabled. */
	if (spi_module->SPI_MODULE_ENABLE.reg & SPI_MODULE_ENABLE_MASK) {
1000a4d6:	7e0b      	ldrb	r3, [r1, #24]
1000a4d8:	07db      	lsls	r3, r3, #31
1000a4da:	d501      	bpl.n	1000a4e0 <spi_init+0x1c>
		spi_module->SPI_MODULE_ENABLE.reg = (0x0ul << SPI_MODULE_ENABLE_ENABLE_Pos);
1000a4dc:	2300      	movs	r3, #0
1000a4de:	760b      	strb	r3, [r1, #24]
	}

	spi_reset(module);
1000a4e0:	0030      	movs	r0, r6
1000a4e2:	4b4a      	ldr	r3, [pc, #296]	; (1000a60c <spi_init+0x148>)
1000a4e4:	4798      	blx	r3
 */
static void _spi_clock_enable(struct spi_module *const module)
{
	Assert(module);

	Spi *const spi_module = (module->hw);
1000a4e6:	6833      	ldr	r3, [r6, #0]

	if (spi_module == (void *)SPI0) {
1000a4e8:	4a49      	ldr	r2, [pc, #292]	; (1000a610 <spi_init+0x14c>)
1000a4ea:	4293      	cmp	r3, r2
1000a4ec:	d109      	bne.n	1000a502 <spi_init+0x3e>
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_CLK);
1000a4ee:	2041      	movs	r0, #65	; 0x41
1000a4f0:	4c48      	ldr	r4, [pc, #288]	; (1000a614 <spi_init+0x150>)
1000a4f2:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_SCK_PHASE);
1000a4f4:	2026      	movs	r0, #38	; 0x26
1000a4f6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_IF);
1000a4f8:	2038      	movs	r0, #56	; 0x38
1000a4fa:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI0_CORE);
1000a4fc:	2001      	movs	r0, #1
1000a4fe:	47a0      	blx	r4
1000a500:	e00b      	b.n	1000a51a <spi_init+0x56>
	} else if (spi_module == (void *)SPI1) {
1000a502:	4a45      	ldr	r2, [pc, #276]	; (1000a618 <spi_init+0x154>)
1000a504:	4293      	cmp	r3, r2
1000a506:	d108      	bne.n	1000a51a <spi_init+0x56>
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_CLK);
1000a508:	2042      	movs	r0, #66	; 0x42
1000a50a:	4c42      	ldr	r4, [pc, #264]	; (1000a614 <spi_init+0x150>)
1000a50c:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_SCK_PHASE);
1000a50e:	2027      	movs	r0, #39	; 0x27
1000a510:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_IF);
1000a512:	2039      	movs	r0, #57	; 0x39
1000a514:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_SPI1_CORE);
1000a516:	2002      	movs	r0, #2
1000a518:	47a0      	blx	r4
	}
#endif

	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);
1000a51a:	a801      	add	r0, sp, #4
1000a51c:	4b3f      	ldr	r3, [pc, #252]	; (1000a61c <spi_init+0x158>)
1000a51e:	4798      	blx	r3
1000a520:	002c      	movs	r4, r5
1000a522:	3408      	adds	r4, #8
1000a524:	2318      	movs	r3, #24
1000a526:	469b      	mov	fp, r3
1000a528:	44ab      	add	fp, r5
1000a52a:	0027      	movs	r7, r4

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
		if (config->pin_number_pad[idx] != PINMUX_UNUSED) {
1000a52c:	6820      	ldr	r0, [r4, #0]
1000a52e:	1c43      	adds	r3, r0, #1
1000a530:	d011      	beq.n	1000a556 <spi_init+0x92>
			if (config->mode == SPI_MODE_MASTER) {
1000a532:	782b      	ldrb	r3, [r5, #0]
1000a534:	2b01      	cmp	r3, #1
1000a536:	d102      	bne.n	1000a53e <spi_init+0x7a>
				config_gpio.direction = GPIO_PIN_DIR_OUTPUT;
1000a538:	466a      	mov	r2, sp
1000a53a:	7113      	strb	r3, [r2, #4]
1000a53c:	e003      	b.n	1000a546 <spi_init+0x82>
			} else if (config->mode == SPI_MODE_SLAVE) {
1000a53e:	2b00      	cmp	r3, #0
1000a540:	d101      	bne.n	1000a546 <spi_init+0x82>
				config_gpio.direction = GPIO_PIN_DIR_INPUT;
1000a542:	466a      	mov	r2, sp
1000a544:	7113      	strb	r3, [r2, #4]
			}
			gpio_pin_set_config(config->pin_number_pad[idx], &config_gpio);
1000a546:	b2c0      	uxtb	r0, r0
1000a548:	a901      	add	r1, sp, #4
1000a54a:	4b35      	ldr	r3, [pc, #212]	; (1000a620 <spi_init+0x15c>)
1000a54c:	4798      	blx	r3
			gpio_pinmux_cofiguration(config->pin_number_pad[idx], \
1000a54e:	8a39      	ldrh	r1, [r7, #16]
1000a550:	7838      	ldrb	r0, [r7, #0]
1000a552:	4b34      	ldr	r3, [pc, #208]	; (1000a624 <spi_init+0x160>)
1000a554:	4798      	blx	r3
1000a556:	3404      	adds	r4, #4
	//Program the pinmux.
	struct gpio_config config_gpio;
	gpio_get_config_defaults(&config_gpio);

	/* Set the pinmux for this spi module. */
	for(idx = 0; idx < 4; idx++) {
1000a558:	455c      	cmp	r4, fp
1000a55a:	d1e6      	bne.n	1000a52a <spi_init+0x66>
						(uint16_t)(config->pinmux_sel_pad[idx]));
		}
	}

	/* Set up the input clock for the module */
	spi_module->CLOCK_SOURCE_SELECT.reg = config->clock_source;
1000a55c:	78eb      	ldrb	r3, [r5, #3]
1000a55e:	4642      	mov	r2, r8
1000a560:	7413      	strb	r3, [r2, #16]

#  if CONF_SPI_MASTER_ENABLE == true
	if (config->mode == SPI_MODE_MASTER) {
1000a562:	782b      	ldrb	r3, [r5, #0]
1000a564:	2b01      	cmp	r3, #1
1000a566:	d100      	bne.n	1000a56a <spi_init+0xa6>
		/* Set the mode in SPI master mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_MASTER;
1000a568:	7713      	strb	r3, [r2, #28]
	}
#  endif

#  if CONF_SPI_SLAVE_ENABLE == true
	if (config->mode == SPI_MODE_SLAVE) {
1000a56a:	782b      	ldrb	r3, [r5, #0]
1000a56c:	2b00      	cmp	r3, #0
1000a56e:	d101      	bne.n	1000a574 <spi_init+0xb0>
		/* Set the mode in SPI slave mode */
		spi_module->SPI_MASTER_MODE.reg = SPI_MODE_SLAVE;
1000a570:	4642      	mov	r2, r8
1000a572:	7713      	strb	r3, [r2, #28]
		const struct spi_config *const config)
{
	Assert(module);
	Assert(config);

	Spi *const spi_module = (module->hw);
1000a574:	6833      	ldr	r3, [r6, #0]

	module->mode  = config->mode;
1000a576:	782a      	ldrb	r2, [r5, #0]
1000a578:	7172      	strb	r2, [r6, #5]

#if CONF_SPI_MASTER_ENABLE == true
	/* Find baud value and write it */
	if (config->mode == SPI_MODE_MASTER) {
1000a57a:	782a      	ldrb	r2, [r5, #0]
1000a57c:	2a01      	cmp	r2, #1
1000a57e:	d101      	bne.n	1000a584 <spi_init+0xc0>
		spi_module->SPI_CLK_DIVIDER.reg = config->clock_divider;
1000a580:	792a      	ldrb	r2, [r5, #4]
1000a582:	829a      	strh	r2, [r3, #20]
	}
#endif

	/* Set data order */
	if (config->data_order == SPI_DATA_ORDER_LSB) {
1000a584:	786a      	ldrb	r2, [r5, #1]
1000a586:	2a04      	cmp	r2, #4
1000a588:	d104      	bne.n	1000a594 <spi_init+0xd0>
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x1;
1000a58a:	2124      	movs	r1, #36	; 0x24
1000a58c:	5c58      	ldrb	r0, [r3, r1]
1000a58e:	4302      	orrs	r2, r0
1000a590:	545a      	strb	r2, [r3, r1]
1000a592:	e004      	b.n	1000a59e <spi_init+0xda>
	} else {
		spi_module->SPI_CONFIGURATION.bit.LSB_FIRST_ENABLE = 0x0;
1000a594:	2124      	movs	r1, #36	; 0x24
1000a596:	5c5a      	ldrb	r2, [r3, r1]
1000a598:	2004      	movs	r0, #4
1000a59a:	4382      	bics	r2, r0
1000a59c:	545a      	strb	r2, [r3, r1]
	}

	/* Set clock polarity and clock phase */
	switch(config->transfer_mode)
1000a59e:	78aa      	ldrb	r2, [r5, #2]
1000a5a0:	2a01      	cmp	r2, #1
1000a5a2:	d01a      	beq.n	1000a5da <spi_init+0x116>
1000a5a4:	2a00      	cmp	r2, #0
1000a5a6:	d004      	beq.n	1000a5b2 <spi_init+0xee>
1000a5a8:	2a02      	cmp	r2, #2
1000a5aa:	d00c      	beq.n	1000a5c6 <spi_init+0x102>
1000a5ac:	2a03      	cmp	r2, #3
1000a5ae:	d01e      	beq.n	1000a5ee <spi_init+0x12a>
1000a5b0:	e026      	b.n	1000a600 <spi_init+0x13c>
	{
		case SPI_TRANSFER_MODE_0:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a5b2:	2224      	movs	r2, #36	; 0x24
1000a5b4:	5c99      	ldrb	r1, [r3, r2]
1000a5b6:	2002      	movs	r0, #2
1000a5b8:	4381      	bics	r1, r0
1000a5ba:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a5bc:	5c99      	ldrb	r1, [r3, r2]
1000a5be:	3801      	subs	r0, #1
1000a5c0:	4381      	bics	r1, r0
1000a5c2:	5499      	strb	r1, [r3, r2]
1000a5c4:	e01c      	b.n	1000a600 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_1:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a5c6:	2224      	movs	r2, #36	; 0x24
1000a5c8:	5c98      	ldrb	r0, [r3, r2]
1000a5ca:	2102      	movs	r1, #2
1000a5cc:	4301      	orrs	r1, r0
1000a5ce:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x0;
1000a5d0:	5c99      	ldrb	r1, [r3, r2]
1000a5d2:	2001      	movs	r0, #1
1000a5d4:	4381      	bics	r1, r0
1000a5d6:	5499      	strb	r1, [r3, r2]
1000a5d8:	e012      	b.n	1000a600 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_2:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x0;
1000a5da:	2224      	movs	r2, #36	; 0x24
1000a5dc:	5c99      	ldrb	r1, [r3, r2]
1000a5de:	2002      	movs	r0, #2
1000a5e0:	4381      	bics	r1, r0
1000a5e2:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a5e4:	5c98      	ldrb	r0, [r3, r2]
1000a5e6:	2101      	movs	r1, #1
1000a5e8:	4301      	orrs	r1, r0
1000a5ea:	5499      	strb	r1, [r3, r2]
1000a5ec:	e008      	b.n	1000a600 <spi_init+0x13c>
			break;
		case SPI_TRANSFER_MODE_3:
			spi_module->SPI_CONFIGURATION.bit.SCK_PHASE = 0x1;
1000a5ee:	2224      	movs	r2, #36	; 0x24
1000a5f0:	5c98      	ldrb	r0, [r3, r2]
1000a5f2:	2102      	movs	r1, #2
1000a5f4:	4301      	orrs	r1, r0
1000a5f6:	5499      	strb	r1, [r3, r2]
			spi_module->SPI_CONFIGURATION.bit.SCK_POLARITY = 0x1;
1000a5f8:	5c98      	ldrb	r0, [r3, r2]
1000a5fa:	2101      	movs	r1, #1
1000a5fc:	4301      	orrs	r1, r0
1000a5fe:	5499      	strb	r1, [r3, r2]
	module->locked                     = 0;
#endif

	/* Write configuration to module and return status code */
	return _spi_set_config(module, config);
}
1000a600:	2000      	movs	r0, #0
1000a602:	b003      	add	sp, #12
1000a604:	bc0c      	pop	{r2, r3}
1000a606:	4690      	mov	r8, r2
1000a608:	469b      	mov	fp, r3
1000a60a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a60c:	1000a489 	.word	0x1000a489
1000a610:	40006000 	.word	0x40006000
1000a614:	1000b0c9 	.word	0x1000b0c9
1000a618:	40007000 	.word	0x40007000
1000a61c:	1000aa25 	.word	0x1000aa25
1000a620:	1000aa35 	.word	0x1000aa35
1000a624:	1000ad19 	.word	0x1000ad19

1000a628 <spi_transceive_buffer_wait>:
enum status_code spi_transceive_buffer_wait(
		struct spi_module *const module,
		uint8_t *tx_data,
		uint8_t *rx_data,
		uint16_t length)
{
1000a628:	b5f0      	push	{r4, r5, r6, r7, lr}
1000a62a:	b083      	sub	sp, #12
	Spi *spi_module = module->hw;
1000a62c:	6804      	ldr	r4, [r0, #0]
	uint8_t dummy = 0;
1000a62e:	2600      	movs	r6, #0
1000a630:	466d      	mov	r5, sp
1000a632:	71ee      	strb	r6, [r5, #7]
1000a634:	3507      	adds	r5, #7
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
1000a636:	2c00      	cmp	r4, #0
1000a638:	d034      	beq.n	1000a6a4 <spi_transceive_buffer_wait+0x7c>
		return STATUS_ERR_NOT_INITIALIZED;
	}
	if(!tx_data) {
1000a63a:	2900      	cmp	r1, #0
1000a63c:	d104      	bne.n	1000a648 <spi_transceive_buffer_wait+0x20>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
1000a63e:	0029      	movs	r1, r5
1000a640:	7980      	ldrb	r0, [r0, #6]
1000a642:	7028      	strb	r0, [r5, #0]
		skip_mosi = 1;
1000a644:	2701      	movs	r7, #1
1000a646:	e00b      	b.n	1000a660 <spi_transceive_buffer_wait+0x38>
	} else if(!rx_data) {
1000a648:	2a00      	cmp	r2, #0
1000a64a:	d005      	beq.n	1000a658 <spi_transceive_buffer_wait+0x30>
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000a64c:	2017      	movs	r0, #23
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
	} else if(length == 0) {
1000a64e:	2b00      	cmp	r3, #0
1000a650:	d029      	beq.n	1000a6a6 <spi_transceive_buffer_wait+0x7e>
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
	uint8_t skip_miso = 0;
1000a652:	2600      	movs	r6, #0
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a654:	2700      	movs	r7, #0
1000a656:	e003      	b.n	1000a660 <spi_transceive_buffer_wait+0x38>
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
		skip_miso = 1;
1000a658:	2601      	movs	r6, #1
		uint8_t *rx_data,
		uint16_t length)
{
	Spi *spi_module = module->hw;
	uint8_t dummy = 0;
	uint8_t skip_mosi = 0;
1000a65a:	2700      	movs	r7, #0
	if(!tx_data) {
		tx_data = &dummy;
		*tx_data = module->tx_dummy_byte;
		skip_mosi = 1;
	} else if(!rx_data) {
		rx_data = &dummy;
1000a65c:	466a      	mov	r2, sp
1000a65e:	3207      	adds	r2, #7
 */
static bool _spi_is_active(Spi *const spi_module)
{
	Assert(spi_module);

	return spi_module->SPI_BUS_STATUS.bit.SPI_ACTIVE;
1000a660:	2528      	movs	r5, #40	; 0x28
1000a662:	5d60      	ldrb	r0, [r4, r5]
	}

	/* Check for Idle */
	do {
		status = _spi_is_active(spi_module);
	}while(status);
1000a664:	07c0      	lsls	r0, r0, #31
1000a666:	d4fc      	bmi.n	1000a662 <spi_transceive_buffer_wait+0x3a>

	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
1000a668:	7b20      	ldrb	r0, [r4, #12]
	spi_module->TRANSMIT_STATUS.reg;
1000a66a:	7a20      	ldrb	r0, [r4, #8]

	/* Start transfer */
	while(transfer_len < length) {
1000a66c:	2b00      	cmp	r3, #0
1000a66e:	d014      	beq.n	1000a69a <spi_transceive_buffer_wait+0x72>
1000a670:	2500      	movs	r5, #0
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
		*rx_data = spi_module->RECEIVE_DATA.reg;
		transfer_len++;
		if (!skip_mosi) {
			tx_data++;
1000a672:	4278      	negs	r0, r7
1000a674:	4147      	adcs	r7, r0
		}
		if (!skip_miso) {
			rx_data++;
1000a676:	4270      	negs	r0, r6
1000a678:	4146      	adcs	r6, r0
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_NOT_FULL);
1000a67a:	7a20      	ldrb	r0, [r4, #8]
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
1000a67c:	07c0      	lsls	r0, r0, #31
1000a67e:	d5fc      	bpl.n	1000a67a <spi_transceive_buffer_wait+0x52>
		spi_module->TRANSMIT_DATA.reg = *tx_data;
1000a680:	7808      	ldrb	r0, [r1, #0]
1000a682:	7020      	strb	r0, [r4, #0]
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->RECEIVE_STATUS.bit.RX_FIFO_NOT_EMPTY);
1000a684:	7b20      	ldrb	r0, [r4, #12]
	while(transfer_len < length) {
		/* Write data to MOSI */
		while(!_spi_is_ready_to_write(spi_module));
		spi_module->TRANSMIT_DATA.reg = *tx_data;
		/* Read data shifted from MISO */
		while(!_spi_is_ready_to_read(spi_module));
1000a686:	07c0      	lsls	r0, r0, #31
1000a688:	d5fc      	bpl.n	1000a684 <spi_transceive_buffer_wait+0x5c>
		*rx_data = spi_module->RECEIVE_DATA.reg;
1000a68a:	7920      	ldrb	r0, [r4, #4]
1000a68c:	7010      	strb	r0, [r2, #0]
		transfer_len++;
1000a68e:	3501      	adds	r5, #1
1000a690:	b2ad      	uxth	r5, r5
		if (!skip_mosi) {
			tx_data++;
1000a692:	19c9      	adds	r1, r1, r7
		}
		if (!skip_miso) {
			rx_data++;
1000a694:	1992      	adds	r2, r2, r6
	/* Clear all status registers */
	spi_module->RECEIVE_STATUS.reg;
	spi_module->TRANSMIT_STATUS.reg;

	/* Start transfer */
	while(transfer_len < length) {
1000a696:	42ab      	cmp	r3, r5
1000a698:	d1ef      	bne.n	1000a67a <spi_transceive_buffer_wait+0x52>
		Spi *const spi_module)
{
	Assert(spi_module);

	/* Check interrupt flag */
	return (spi_module->TRANSMIT_STATUS.bit.TX_FIFO_EMPTY);
1000a69a:	7a23      	ldrb	r3, [r4, #8]
		}
	}
	/* check TXFIFO is empty */
	do {
		status = _spi_is_write_complete(spi_module);
	}while(!status);
1000a69c:	06db      	lsls	r3, r3, #27
1000a69e:	d5fc      	bpl.n	1000a69a <spi_transceive_buffer_wait+0x72>

	return STATUS_OK;
1000a6a0:	2000      	movs	r0, #0
1000a6a2:	e000      	b.n	1000a6a6 <spi_transceive_buffer_wait+0x7e>
	uint8_t skip_miso = 0;
	uint8_t status;
	uint16_t transfer_len = 0;

	if(spi_module == 0) {
		return STATUS_ERR_NOT_INITIALIZED;
1000a6a4:	201f      	movs	r0, #31
		status = _spi_is_write_complete(spi_module);
	}while(!status);

	return STATUS_OK;

}
1000a6a6:	b003      	add	sp, #12
1000a6a8:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000a6aa:	46c0      	nop			; (mov r8, r8)

1000a6ac <spi_select_slave>:
 */
enum status_code spi_select_slave(
		struct spi_module *const module,
		struct spi_slave_inst *const slave,
		bool select)
{
1000a6ac:	b510      	push	{r4, lr}
	uint8_t gpio_num = slave->ss_pin;
1000a6ae:	7808      	ldrb	r0, [r1, #0]
	if(select) {
1000a6b0:	2a00      	cmp	r2, #0
1000a6b2:	d003      	beq.n	1000a6bc <spi_select_slave+0x10>
		/* ASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, false);
1000a6b4:	2100      	movs	r1, #0
1000a6b6:	4b04      	ldr	r3, [pc, #16]	; (1000a6c8 <spi_select_slave+0x1c>)
1000a6b8:	4798      	blx	r3
1000a6ba:	e002      	b.n	1000a6c2 <spi_select_slave+0x16>
	} else {
		/* DEASSERT Slave select pin */
		gpio_pin_set_output_level(gpio_num, true);
1000a6bc:	2101      	movs	r1, #1
1000a6be:	4b02      	ldr	r3, [pc, #8]	; (1000a6c8 <spi_select_slave+0x1c>)
1000a6c0:	4798      	blx	r3
	}

	return STATUS_OK;
}
1000a6c2:	2000      	movs	r0, #0
1000a6c4:	bd10      	pop	{r4, pc}
1000a6c6:	46c0      	nop			; (mov r8, r8)
1000a6c8:	1000ac8d 	.word	0x1000ac8d

1000a6cc <dualtimer_isr_handler>:
 *
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
1000a6cc:	b510      	push	{r4, lr}
 * \retval The interrupt status of timer1/timer2
 */
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
1000a6ce:	4b0d      	ldr	r3, [pc, #52]	; (1000a704 <dualtimer_isr_handler+0x38>)
1000a6d0:	7d1b      	ldrb	r3, [r3, #20]
 * Dualtimer ISR handler.
 *
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
1000a6d2:	2b00      	cmp	r3, #0
1000a6d4:	d007      	beq.n	1000a6e6 <dualtimer_isr_handler+0x1a>
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
1000a6d6:	2201      	movs	r2, #1
1000a6d8:	4b0a      	ldr	r3, [pc, #40]	; (1000a704 <dualtimer_isr_handler+0x38>)
1000a6da:	731a      	strb	r2, [r3, #12]
 */
static void dualtimer_isr_handler(void)
{
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
1000a6dc:	4b0a      	ldr	r3, [pc, #40]	; (1000a708 <dualtimer_isr_handler+0x3c>)
1000a6de:	681b      	ldr	r3, [r3, #0]
1000a6e0:	2b00      	cmp	r3, #0
1000a6e2:	d000      	beq.n	1000a6e6 <dualtimer_isr_handler+0x1a>
			dualtimer_callback_timer1();
1000a6e4:	4798      	blx	r3
uint8_t dualtimer_get_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		return DUALTIMER0->TIMER1MIS.reg;
	} else {
		return DUALTIMER0->TIMER2MIS.reg;
1000a6e6:	2334      	movs	r3, #52	; 0x34
1000a6e8:	4a06      	ldr	r2, [pc, #24]	; (1000a704 <dualtimer_isr_handler+0x38>)
1000a6ea:	5cd3      	ldrb	r3, [r2, r3]
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER1)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER1);
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
1000a6ec:	2b00      	cmp	r3, #0
1000a6ee:	d007      	beq.n	1000a700 <dualtimer_isr_handler+0x34>
void dualtimer_clear_interrupt_status(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
		DUALTIMER0->TIMER1INTCLR.reg = 1;
	} else {
		DUALTIMER0->TIMER2INTCLR.reg = 1;
1000a6f0:	2101      	movs	r1, #1
1000a6f2:	232c      	movs	r3, #44	; 0x2c
1000a6f4:	54d1      	strb	r1, [r2, r3]
		if (dualtimer_callback_timer1)
			dualtimer_callback_timer1();
	}
	if (dualtimer_get_interrupt_status(DUALTIMER_TIMER2)) {
		dualtimer_clear_interrupt_status(DUALTIMER_TIMER2);
		if (dualtimer_callback_timer2)
1000a6f6:	4b05      	ldr	r3, [pc, #20]	; (1000a70c <dualtimer_isr_handler+0x40>)
1000a6f8:	681b      	ldr	r3, [r3, #0]
1000a6fa:	2b00      	cmp	r3, #0
1000a6fc:	d000      	beq.n	1000a700 <dualtimer_isr_handler+0x34>
			dualtimer_callback_timer2();
1000a6fe:	4798      	blx	r3
	}
}
1000a700:	bd10      	pop	{r4, pc}
1000a702:	46c0      	nop			; (mov r8, r8)
1000a704:	40001000 	.word	0x40001000
1000a708:	10017990 	.word	0x10017990
1000a70c:	10017994 	.word	0x10017994

1000a710 <dualtimer_get_config_defaults>:
 *
 * \param[out]  config  Pointer to a DUALTIMER module configuration structure to set
 */
void dualtimer_get_config_defaults(struct dualtimer_config *config)
{
	config->timer1.timer_enable = true;
1000a710:	2301      	movs	r3, #1
1000a712:	7003      	strb	r3, [r0, #0]
	config->timer2.timer_enable = true;
1000a714:	7303      	strb	r3, [r0, #12]

	config->timer1.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a716:	2202      	movs	r2, #2
1000a718:	7042      	strb	r2, [r0, #1]
	config->timer2.counter_mode = DUALTIMER_PERIODIC_MODE;
1000a71a:	7342      	strb	r2, [r0, #13]

	config->timer1.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a71c:	7083      	strb	r3, [r0, #2]
	config->timer2.counter_size = DUALTIMER_COUNTER_SIZE_32BIT;
1000a71e:	7383      	strb	r3, [r0, #14]

	config->timer1.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a720:	2200      	movs	r2, #0
1000a722:	70c2      	strb	r2, [r0, #3]
	config->timer2.clock_prescaler = DUALTIMER_CLOCK_PRESCALER_DIV1;
1000a724:	73c2      	strb	r2, [r0, #15]

	config->timer1.interrup_enable = true;
1000a726:	7103      	strb	r3, [r0, #4]
	config->timer2.interrup_enable = true;
1000a728:	7403      	strb	r3, [r0, #16]

	config->timer1.load_value = 0;
1000a72a:	6082      	str	r2, [r0, #8]
	config->timer2.load_value = 0;
1000a72c:	6142      	str	r2, [r0, #20]

	config->clock_source = DUALTIMER_CLK_INPUT_0;
1000a72e:	7602      	strb	r2, [r0, #24]
}
1000a730:	4770      	bx	lr
1000a732:	46c0      	nop			; (mov r8, r8)

1000a734 <dualtimer_get_value>:
 *
 * \retval Timer1/Timer2 current value
 */
uint32_t dualtimer_get_value(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a734:	2800      	cmp	r0, #0
1000a736:	d102      	bne.n	1000a73e <dualtimer_get_value+0xa>
		return DUALTIMER0->TIMER1VALUE.reg;
1000a738:	4b02      	ldr	r3, [pc, #8]	; (1000a744 <dualtimer_get_value+0x10>)
1000a73a:	6858      	ldr	r0, [r3, #4]
1000a73c:	e001      	b.n	1000a742 <dualtimer_get_value+0xe>
	} else {
		return DUALTIMER0->TIMER2VALUE.reg;
1000a73e:	4b01      	ldr	r3, [pc, #4]	; (1000a744 <dualtimer_get_value+0x10>)
1000a740:	6a58      	ldr	r0, [r3, #36]	; 0x24
	}
}
1000a742:	4770      	bx	lr
1000a744:	40001000 	.word	0x40001000

1000a748 <dualtimer_set_counter>:
 * \param[in]     value        Load value
 */
void dualtimer_set_counter(enum dualtimer_timer timer,
		enum dualtimer_set_register cur_bg, uint32_t value)
{
	if (timer == DUALTIMER_TIMER1) {
1000a748:	2800      	cmp	r0, #0
1000a74a:	d107      	bne.n	1000a75c <dualtimer_set_counter+0x14>
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a74c:	2900      	cmp	r1, #0
1000a74e:	d102      	bne.n	1000a756 <dualtimer_set_counter+0xe>
			DUALTIMER0->TIMER1LOAD.reg = value;
1000a750:	4b06      	ldr	r3, [pc, #24]	; (1000a76c <dualtimer_set_counter+0x24>)
1000a752:	601a      	str	r2, [r3, #0]
1000a754:	e009      	b.n	1000a76a <dualtimer_set_counter+0x22>
		} else {
			DUALTIMER0->TIMER1BGLOAD.reg = value;
1000a756:	4b05      	ldr	r3, [pc, #20]	; (1000a76c <dualtimer_set_counter+0x24>)
1000a758:	619a      	str	r2, [r3, #24]
1000a75a:	e006      	b.n	1000a76a <dualtimer_set_counter+0x22>
		}
	} else {
		if (cur_bg == DUALTIMER_SET_CURRUNT_REG) {
1000a75c:	2900      	cmp	r1, #0
1000a75e:	d102      	bne.n	1000a766 <dualtimer_set_counter+0x1e>
			DUALTIMER0->TIMER2LOAD.reg = value;
1000a760:	4b02      	ldr	r3, [pc, #8]	; (1000a76c <dualtimer_set_counter+0x24>)
1000a762:	621a      	str	r2, [r3, #32]
1000a764:	e001      	b.n	1000a76a <dualtimer_set_counter+0x22>
			} else {
			DUALTIMER0->TIMER2BGLOAD.reg = value;
1000a766:	4b01      	ldr	r3, [pc, #4]	; (1000a76c <dualtimer_set_counter+0x24>)
1000a768:	639a      	str	r2, [r3, #56]	; 0x38
		}
	}
}
1000a76a:	4770      	bx	lr
1000a76c:	40001000 	.word	0x40001000

1000a770 <dualtimer_enable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_enable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a770:	2800      	cmp	r0, #0
1000a772:	d105      	bne.n	1000a780 <dualtimer_enable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg |= DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a774:	4a06      	ldr	r2, [pc, #24]	; (1000a790 <dualtimer_enable+0x20>)
1000a776:	7a11      	ldrb	r1, [r2, #8]
1000a778:	2380      	movs	r3, #128	; 0x80
1000a77a:	430b      	orrs	r3, r1
1000a77c:	7213      	strb	r3, [r2, #8]
1000a77e:	e005      	b.n	1000a78c <dualtimer_enable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg |= DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a780:	4903      	ldr	r1, [pc, #12]	; (1000a790 <dualtimer_enable+0x20>)
1000a782:	2228      	movs	r2, #40	; 0x28
1000a784:	5c88      	ldrb	r0, [r1, r2]
1000a786:	2380      	movs	r3, #128	; 0x80
1000a788:	4303      	orrs	r3, r0
1000a78a:	548b      	strb	r3, [r1, r2]
	}
}
1000a78c:	4770      	bx	lr
1000a78e:	46c0      	nop			; (mov r8, r8)
1000a790:	40001000 	.word	0x40001000

1000a794 <dualtimer_disable>:
 *
 * \param[in]     timer        Timer1/Timer2
 */
void dualtimer_disable(enum dualtimer_timer timer)
{
	if (timer == DUALTIMER_TIMER1) {
1000a794:	2800      	cmp	r0, #0
1000a796:	d105      	bne.n	1000a7a4 <dualtimer_disable+0x10>
		DUALTIMER0->TIMER1CONTROL.reg &= ~DUALTIMER_TIMER1CONTROL_TIMER_ENABLE;
1000a798:	4a06      	ldr	r2, [pc, #24]	; (1000a7b4 <dualtimer_disable+0x20>)
1000a79a:	7a11      	ldrb	r1, [r2, #8]
1000a79c:	237f      	movs	r3, #127	; 0x7f
1000a79e:	400b      	ands	r3, r1
1000a7a0:	7213      	strb	r3, [r2, #8]
1000a7a2:	e005      	b.n	1000a7b0 <dualtimer_disable+0x1c>
	} else {
		DUALTIMER0->TIMER2CONTROL.reg &= ~DUALTIMER_TIMER2CONTROL_TIMER_ENABLE;
1000a7a4:	4903      	ldr	r1, [pc, #12]	; (1000a7b4 <dualtimer_disable+0x20>)
1000a7a6:	2228      	movs	r2, #40	; 0x28
1000a7a8:	5c88      	ldrb	r0, [r1, r2]
1000a7aa:	237f      	movs	r3, #127	; 0x7f
1000a7ac:	4003      	ands	r3, r0
1000a7ae:	548b      	strb	r3, [r1, r2]
	}
}
1000a7b0:	4770      	bx	lr
1000a7b2:	46c0      	nop			; (mov r8, r8)
1000a7b4:	40001000 	.word	0x40001000

1000a7b8 <dualtimer_init>:
 * \param[in]     config       Pointer to the Dualtimer configuration options struct
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
1000a7b8:	b570      	push	{r4, r5, r6, lr}
1000a7ba:	0004      	movs	r4, r0
	uint8_t regval = 0;

	/* Global reset */
	system_peripheral_reset(PERIPHERAL_DUALT_TIMER);
1000a7bc:	2004      	movs	r0, #4
1000a7be:	4b39      	ldr	r3, [pc, #228]	; (1000a8a4 <dualtimer_init+0xec>)
1000a7c0:	4798      	blx	r3

	/* Common config */
	if (config->timer1.timer_enable || config->timer2.timer_enable) {
1000a7c2:	7823      	ldrb	r3, [r4, #0]
1000a7c4:	2b00      	cmp	r3, #0
1000a7c6:	d102      	bne.n	1000a7ce <dualtimer_init+0x16>
1000a7c8:	7b23      	ldrb	r3, [r4, #12]
1000a7ca:	2b00      	cmp	r3, #0
1000a7cc:	d065      	beq.n	1000a89a <dualtimer_init+0xe2>
		LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |=
1000a7ce:	4936      	ldr	r1, [pc, #216]	; (1000a8a8 <dualtimer_init+0xf0>)
1000a7d0:	68ca      	ldr	r2, [r1, #12]
1000a7d2:	2320      	movs	r3, #32
1000a7d4:	4313      	orrs	r3, r2
1000a7d6:	60cb      	str	r3, [r1, #12]
		LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
1000a7d8:	7e22      	ldrb	r2, [r4, #24]
1000a7da:	698b      	ldr	r3, [r1, #24]
1000a7dc:	2003      	movs	r0, #3
1000a7de:	4002      	ands	r2, r0
1000a7e0:	0112      	lsls	r2, r2, #4
1000a7e2:	302d      	adds	r0, #45	; 0x2d
1000a7e4:	4383      	bics	r3, r0
1000a7e6:	4313      	orrs	r3, r2
1000a7e8:	618b      	str	r3, [r1, #24]
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
1000a7ea:	7823      	ldrb	r3, [r4, #0]
1000a7ec:	2b00      	cmp	r3, #0
1000a7ee:	d026      	beq.n	1000a83e <dualtimer_init+0x86>
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7f0:	7863      	ldrb	r3, [r4, #1]
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
1000a7f2:	2101      	movs	r1, #1
		LPMCU_MISC_REGS0->LPMCU_CTRL.bit.DUALTIMER0_CLK_SEL = config->clock_source;
	}
	
	/* Timer1 config */
	if (config->timer1.timer_enable) {
		if (config->timer1.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a7f4:	2b00      	cmp	r3, #0
1000a7f6:	d003      	beq.n	1000a800 <dualtimer_init+0x48>
			regval = DUALTIMER_TIMER1CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer1.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_0;
		} else if (config->timer1.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER1CONTROL_TIMER_MODE_1;
1000a7f8:	3b02      	subs	r3, #2
1000a7fa:	425d      	negs	r5, r3
1000a7fc:	415d      	adcs	r5, r3
1000a7fe:	01a9      	lsls	r1, r5, #6
		}
		regval |= (DUALTIMER_TIMER1CONTROL_TIMER_SIZE &
1000a800:	78a2      	ldrb	r2, [r4, #2]
1000a802:	0052      	lsls	r2, r2, #1
1000a804:	2502      	movs	r5, #2
1000a806:	402a      	ands	r2, r5
1000a808:	78e3      	ldrb	r3, [r4, #3]
1000a80a:	009b      	lsls	r3, r3, #2
1000a80c:	350a      	adds	r5, #10
1000a80e:	402b      	ands	r3, r5
1000a810:	431a      	orrs	r2, r3
1000a812:	0015      	movs	r5, r2
1000a814:	430d      	orrs	r5, r1
				((config->timer1.counter_size) << DUALTIMER_TIMER1CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER1CONTROL_TIMERPRE(config->timer1.clock_prescaler);
		if (config->timer1.interrup_enable) {
1000a816:	7923      	ldrb	r3, [r4, #4]
1000a818:	2b00      	cmp	r3, #0
1000a81a:	d001      	beq.n	1000a820 <dualtimer_init+0x68>
			regval |= DUALTIMER_TIMER1CONTROL_INTERRUPT_ENABLE;
1000a81c:	2320      	movs	r3, #32
1000a81e:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER1LOAD.reg = config->timer1.load_value;
1000a820:	4b22      	ldr	r3, [pc, #136]	; (1000a8ac <dualtimer_init+0xf4>)
1000a822:	68a2      	ldr	r2, [r4, #8]
1000a824:	601a      	str	r2, [r3, #0]
		DUALTIMER0->TIMER1CONTROL.reg = regval;
1000a826:	721d      	strb	r5, [r3, #8]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
1000a828:	491f      	ldr	r1, [pc, #124]	; (1000a8a8 <dualtimer_init+0xf0>)
1000a82a:	22c4      	movs	r2, #196	; 0xc4
1000a82c:	0052      	lsls	r2, r2, #1
1000a82e:	5c88      	ldrb	r0, [r1, r2]
1000a830:	2301      	movs	r3, #1
1000a832:	4303      	orrs	r3, r0
1000a834:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER1);
1000a836:	2000      	movs	r0, #0
1000a838:	4b1d      	ldr	r3, [pc, #116]	; (1000a8b0 <dualtimer_init+0xf8>)
1000a83a:	4798      	blx	r3
1000a83c:	e000      	b.n	1000a840 <dualtimer_init+0x88>
 *
 * \return Status of the initialization procedure.
 */
void dualtimer_init(const struct dualtimer_config *config)
{
	uint8_t regval = 0;
1000a83e:	2500      	movs	r5, #0
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_1_ENABLE;
		dualtimer_enable(DUALTIMER_TIMER1);
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
1000a840:	7b23      	ldrb	r3, [r4, #12]
1000a842:	2b00      	cmp	r3, #0
1000a844:	d029      	beq.n	1000a89a <dualtimer_init+0xe2>
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
1000a846:	7b63      	ldrb	r3, [r4, #13]
1000a848:	2b00      	cmp	r3, #0
1000a84a:	d005      	beq.n	1000a858 <dualtimer_init+0xa0>
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
1000a84c:	2b01      	cmp	r3, #1
1000a84e:	d005      	beq.n	1000a85c <dualtimer_init+0xa4>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
1000a850:	2b02      	cmp	r3, #2
1000a852:	d104      	bne.n	1000a85e <dualtimer_init+0xa6>
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
1000a854:	2540      	movs	r5, #64	; 0x40
1000a856:	e002      	b.n	1000a85e <dualtimer_init+0xa6>
	}

	/* Timer2 config */
	if (config->timer2.timer_enable) {
		if (config->timer2.counter_mode == DUALTIMER_ONE_SHOT_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_ONE_SHOT_COUNT_1;
1000a858:	2501      	movs	r5, #1
1000a85a:	e000      	b.n	1000a85e <dualtimer_init+0xa6>
		} else if (config->timer2.counter_mode == DUALTIMER_FREE_RUNNING_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_0;
1000a85c:	2500      	movs	r5, #0
		} else if (config->timer2.counter_mode == DUALTIMER_PERIODIC_MODE) {
			regval = DUALTIMER_TIMER2CONTROL_TIMER_MODE_1;
		}
		regval |= (DUALTIMER_TIMER2CONTROL_TIMER_SIZE &
1000a85e:	7ba3      	ldrb	r3, [r4, #14]
1000a860:	005b      	lsls	r3, r3, #1
1000a862:	2102      	movs	r1, #2
1000a864:	4019      	ands	r1, r3
1000a866:	7be2      	ldrb	r2, [r4, #15]
1000a868:	0092      	lsls	r2, r2, #2
1000a86a:	230c      	movs	r3, #12
1000a86c:	4013      	ands	r3, r2
1000a86e:	430b      	orrs	r3, r1
1000a870:	431d      	orrs	r5, r3
				((config->timer2.counter_size) << DUALTIMER_TIMER2CONTROL_TIMER_SIZE_Pos)) |
				DUALTIMER_TIMER2CONTROL_TIMERPRE(config->timer2.clock_prescaler);
		if (config->timer2.interrup_enable) {
1000a872:	7c23      	ldrb	r3, [r4, #16]
1000a874:	2b00      	cmp	r3, #0
1000a876:	d001      	beq.n	1000a87c <dualtimer_init+0xc4>
			regval |= DUALTIMER_TIMER2CONTROL_INTERRUPT_ENABLE;
1000a878:	2320      	movs	r3, #32
1000a87a:	431d      	orrs	r5, r3
		}
		DUALTIMER0->TIMER2LOAD.reg = config->timer2.load_value;
1000a87c:	6962      	ldr	r2, [r4, #20]
1000a87e:	4b0b      	ldr	r3, [pc, #44]	; (1000a8ac <dualtimer_init+0xf4>)
1000a880:	621a      	str	r2, [r3, #32]
		DUALTIMER0->TIMER2CONTROL.reg = regval;
1000a882:	2228      	movs	r2, #40	; 0x28
1000a884:	549d      	strb	r5, [r3, r2]
		LPMCU_MISC_REGS0->DUALTIMER0_CTRL.reg |= LPMCU_MISC_REGS_DUALTIMER0_CTRL_CNTR_2_ENABLE;
1000a886:	4908      	ldr	r1, [pc, #32]	; (1000a8a8 <dualtimer_init+0xf0>)
1000a888:	3261      	adds	r2, #97	; 0x61
1000a88a:	32ff      	adds	r2, #255	; 0xff
1000a88c:	5c88      	ldrb	r0, [r1, r2]
1000a88e:	2302      	movs	r3, #2
1000a890:	4303      	orrs	r3, r0
1000a892:	548b      	strb	r3, [r1, r2]
		dualtimer_enable(DUALTIMER_TIMER2);
1000a894:	2001      	movs	r0, #1
1000a896:	4b06      	ldr	r3, [pc, #24]	; (1000a8b0 <dualtimer_init+0xf8>)
1000a898:	4798      	blx	r3
	}

	system_register_isr(RAM_ISR_TABLE_DUALTIMER_INDEX, (uint32_t)dualtimer_isr_handler);
1000a89a:	4906      	ldr	r1, [pc, #24]	; (1000a8b4 <dualtimer_init+0xfc>)
1000a89c:	201e      	movs	r0, #30
1000a89e:	4b06      	ldr	r3, [pc, #24]	; (1000a8b8 <dualtimer_init+0x100>)
1000a8a0:	4798      	blx	r3
}
1000a8a2:	bd70      	pop	{r4, r5, r6, pc}
1000a8a4:	1000b791 	.word	0x1000b791
1000a8a8:	4000b000 	.word	0x4000b000
1000a8ac:	40001000 	.word	0x40001000
1000a8b0:	1000a771 	.word	0x1000a771
1000a8b4:	1000a6cd 	.word	0x1000a6cd
1000a8b8:	1000bbf9 	.word	0x1000bbf9

1000a8bc <dualtimer_register_callback>:
 *
 * \param[in]     callback_func Pointer to callback function
 */
void dualtimer_register_callback(enum dualtimer_timer timer, dualtimer_callback_t fun)
{
	if (timer == DUALTIMER_TIMER1) {
1000a8bc:	2800      	cmp	r0, #0
1000a8be:	d102      	bne.n	1000a8c6 <dualtimer_register_callback+0xa>
		dualtimer_callback_timer1 = fun;
1000a8c0:	4b02      	ldr	r3, [pc, #8]	; (1000a8cc <dualtimer_register_callback+0x10>)
1000a8c2:	6019      	str	r1, [r3, #0]
1000a8c4:	e001      	b.n	1000a8ca <dualtimer_register_callback+0xe>
	} else {
		dualtimer_callback_timer2 = fun;
1000a8c6:	4b02      	ldr	r3, [pc, #8]	; (1000a8d0 <dualtimer_register_callback+0x14>)
1000a8c8:	6019      	str	r1, [r3, #0]
	}
}
1000a8ca:	4770      	bx	lr
1000a8cc:	10017990 	.word	0x10017990
1000a8d0:	10017994 	.word	0x10017994

1000a8d4 <gpio_port0_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port0_isr_handler(void)
{
1000a8d4:	b570      	push	{r4, r5, r6, lr}
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;
1000a8d6:	4b16      	ldr	r3, [pc, #88]	; (1000a930 <gpio_port0_isr_handler+0x5c>)
1000a8d8:	681d      	ldr	r5, [r3, #0]
1000a8da:	8f29      	ldrh	r1, [r5, #56]	; 0x38
1000a8dc:	b289      	uxth	r1, r1

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
1000a8de:	07cb      	lsls	r3, r1, #31
1000a8e0:	d407      	bmi.n	1000a8f2 <gpio_port0_isr_handler+0x1e>
1000a8e2:	2301      	movs	r3, #1
1000a8e4:	2401      	movs	r4, #1
1000a8e6:	0018      	movs	r0, r3
1000a8e8:	0022      	movs	r2, r4
1000a8ea:	409a      	lsls	r2, r3
1000a8ec:	4211      	tst	r1, r2
1000a8ee:	d014      	beq.n	1000a91a <gpio_port0_isr_handler+0x46>
1000a8f0:	e001      	b.n	1000a8f6 <gpio_port0_isr_handler+0x22>
1000a8f2:	2201      	movs	r2, #1
1000a8f4:	2000      	movs	r0, #0
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a8f6:	b292      	uxth	r2, r2
1000a8f8:	872a      	strh	r2, [r5, #56]	; 0x38
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a8fa:	2346      	movs	r3, #70	; 0x46
1000a8fc:	4a0c      	ldr	r2, [pc, #48]	; (1000a930 <gpio_port0_isr_handler+0x5c>)
1000a8fe:	5ad3      	ldrh	r3, [r2, r3]
1000a900:	4103      	asrs	r3, r0
1000a902:	07db      	lsls	r3, r3, #31
1000a904:	d50c      	bpl.n	1000a920 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
1000a906:	2344      	movs	r3, #68	; 0x44

	for (uint8_t i = 0; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[0].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[0].callback_enable_mask & (1 << i)) && \
1000a908:	5ad3      	ldrh	r3, [r2, r3]
1000a90a:	4103      	asrs	r3, r0
1000a90c:	07db      	lsls	r3, r3, #31
1000a90e:	d507      	bpl.n	1000a920 <gpio_port0_isr_handler+0x4c>
                    (_gpio_instances[0].callback_reg_mask & (1 << i)))
                _gpio_instances[0].callback[i]();
1000a910:	0080      	lsls	r0, r0, #2
1000a912:	1810      	adds	r0, r2, r0
1000a914:	6843      	ldr	r3, [r0, #4]
1000a916:	4798      	blx	r3
1000a918:	e002      	b.n	1000a920 <gpio_port0_isr_handler+0x4c>
1000a91a:	3301      	adds	r3, #1
 */
static void gpio_port0_isr_handler(void)
{
	uint32_t flag = _gpio_instances[0].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a91c:	2b10      	cmp	r3, #16
1000a91e:	d1e2      	bne.n	1000a8e6 <gpio_port0_isr_handler+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000a920:	2180      	movs	r1, #128	; 0x80
1000a922:	0409      	lsls	r1, r1, #16
1000a924:	23c0      	movs	r3, #192	; 0xc0
1000a926:	005b      	lsls	r3, r3, #1
1000a928:	4a02      	ldr	r2, [pc, #8]	; (1000a934 <gpio_port0_isr_handler+0x60>)
1000a92a:	50d1      	str	r1, [r2, r3]
                _gpio_instances[0].callback[i]();
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO0_IRQn);
}
1000a92c:	bd70      	pop	{r4, r5, r6, pc}
1000a92e:	46c0      	nop			; (mov r8, r8)
1000a930:	10019690 	.word	0x10019690
1000a934:	e000e100 	.word	0xe000e100

1000a938 <gpio_port1_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port1_isr_handler(void)
{
1000a938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;
1000a93a:	4b18      	ldr	r3, [pc, #96]	; (1000a99c <gpio_port1_isr_handler+0x64>)
1000a93c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
1000a93e:	8f1e      	ldrh	r6, [r3, #56]	; 0x38
1000a940:	b2b6      	uxth	r6, r6
1000a942:	0037      	movs	r7, r6
1000a944:	2400      	movs	r4, #0

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a946:	0b76      	lsrs	r6, r6, #13
1000a948:	0376      	lsls	r6, r6, #13
			aon_handle_ext_wakeup_isr();
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a94a:	4d14      	ldr	r5, [pc, #80]	; (1000a99c <gpio_port1_isr_handler+0x64>)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
		/* For AON wakeup pin clear interrupt */
		if (flag & ((1<<15) | (1<<14) | (1<<13))) {
1000a94c:	2e00      	cmp	r6, #0
1000a94e:	d001      	beq.n	1000a954 <gpio_port1_isr_handler+0x1c>
			aon_handle_ext_wakeup_isr();
1000a950:	4b13      	ldr	r3, [pc, #76]	; (1000a9a0 <gpio_port1_isr_handler+0x68>)
1000a952:	4798      	blx	r3
		}

		if (flag & (1 << i)) {
1000a954:	0022      	movs	r2, r4
1000a956:	2301      	movs	r3, #1
1000a958:	40a3      	lsls	r3, r4
1000a95a:	421f      	tst	r7, r3
1000a95c:	d013      	beq.n	1000a986 <gpio_port1_isr_handler+0x4e>
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a95e:	b29b      	uxth	r3, r3
1000a960:	6ca9      	ldr	r1, [r5, #72]	; 0x48
1000a962:	870b      	strh	r3, [r1, #56]	; 0x38
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a964:	238e      	movs	r3, #142	; 0x8e
1000a966:	5aeb      	ldrh	r3, [r5, r3]
1000a968:	4123      	asrs	r3, r4
1000a96a:	07db      	lsls	r3, r3, #31
1000a96c:	d50b      	bpl.n	1000a986 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
1000a96e:	238c      	movs	r3, #140	; 0x8c
		}

		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[1].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[1].callback_enable_mask & (1 << i)) && \
1000a970:	490a      	ldr	r1, [pc, #40]	; (1000a99c <gpio_port1_isr_handler+0x64>)
1000a972:	5acb      	ldrh	r3, [r1, r3]
1000a974:	4123      	asrs	r3, r4
1000a976:	07db      	lsls	r3, r3, #31
1000a978:	d505      	bpl.n	1000a986 <gpio_port1_isr_handler+0x4e>
			(_gpio_instances[1].callback_reg_mask & (1 << i))) {
				_gpio_instances[1].callback[i]();
1000a97a:	3212      	adds	r2, #18
1000a97c:	0092      	lsls	r2, r2, #2
1000a97e:	188a      	adds	r2, r1, r2
1000a980:	6853      	ldr	r3, [r2, #4]
1000a982:	4798      	blx	r3
				break;
1000a984:	e002      	b.n	1000a98c <gpio_port1_isr_handler+0x54>
1000a986:	3401      	adds	r4, #1
 */
static void gpio_port1_isr_handler(void)
{
	uint32_t flag = _gpio_instances[1].hw->INTSTATUSCLEAR.reg;

	for (uint8_t i = 0; i < 16; i++){
1000a988:	2c10      	cmp	r4, #16
1000a98a:	d1df      	bne.n	1000a94c <gpio_port1_isr_handler+0x14>
1000a98c:	2180      	movs	r1, #128	; 0x80
1000a98e:	0449      	lsls	r1, r1, #17
1000a990:	23c0      	movs	r3, #192	; 0xc0
1000a992:	005b      	lsls	r3, r3, #1
1000a994:	4a03      	ldr	r2, [pc, #12]	; (1000a9a4 <gpio_port1_isr_handler+0x6c>)
1000a996:	50d1      	str	r1, [r2, r3]
				break;
			}
		}
	}
	NVIC_ClearPendingIRQ(GPIO1_IRQn);
}
1000a998:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000a99a:	46c0      	nop			; (mov r8, r8)
1000a99c:	10019690 	.word	0x10019690
1000a9a0:	0001bc51 	.word	0x0001bc51
1000a9a4:	e000e100 	.word	0xe000e100

1000a9a8 <gpio_port2_isr_handler>:
 *
 * This function will enter interrupt.
 *
 */
static void gpio_port2_isr_handler(void)
{
1000a9a8:	b510      	push	{r4, lr}
	uint32_t flag = _gpio_instances[2].hw->INTSTATUSCLEAR.reg;
1000a9aa:	2390      	movs	r3, #144	; 0x90
1000a9ac:	4a1b      	ldr	r2, [pc, #108]	; (1000aa1c <gpio_port2_isr_handler+0x74>)
1000a9ae:	58d2      	ldr	r2, [r2, r3]
1000a9b0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000a9b2:	b29b      	uxth	r3, r3

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
1000a9b4:	04d9      	lsls	r1, r3, #19
1000a9b6:	d414      	bmi.n	1000a9e2 <gpio_port2_isr_handler+0x3a>
1000a9b8:	0499      	lsls	r1, r3, #18
1000a9ba:	d40a      	bmi.n	1000a9d2 <gpio_port2_isr_handler+0x2a>
1000a9bc:	0459      	lsls	r1, r3, #17
1000a9be:	d40c      	bmi.n	1000a9da <gpio_port2_isr_handler+0x32>
1000a9c0:	0bdb      	lsrs	r3, r3, #15
1000a9c2:	03db      	lsls	r3, r3, #15
1000a9c4:	b29b      	uxth	r3, r3
1000a9c6:	2b00      	cmp	r3, #0
1000a9c8:	d020      	beq.n	1000aa0c <gpio_port2_isr_handler+0x64>
1000a9ca:	2380      	movs	r3, #128	; 0x80
1000a9cc:	021b      	lsls	r3, r3, #8
1000a9ce:	210f      	movs	r1, #15
1000a9d0:	e00a      	b.n	1000a9e8 <gpio_port2_isr_handler+0x40>
1000a9d2:	2380      	movs	r3, #128	; 0x80
1000a9d4:	019b      	lsls	r3, r3, #6
1000a9d6:	210d      	movs	r1, #13
1000a9d8:	e006      	b.n	1000a9e8 <gpio_port2_isr_handler+0x40>
1000a9da:	2380      	movs	r3, #128	; 0x80
1000a9dc:	01db      	lsls	r3, r3, #7
1000a9de:	210e      	movs	r1, #14
1000a9e0:	e002      	b.n	1000a9e8 <gpio_port2_isr_handler+0x40>
1000a9e2:	2380      	movs	r3, #128	; 0x80
1000a9e4:	015b      	lsls	r3, r3, #5
1000a9e6:	210c      	movs	r1, #12
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
1000a9e8:	b29b      	uxth	r3, r3
1000a9ea:	8713      	strh	r3, [r2, #56]	; 0x38
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a9ec:	23d6      	movs	r3, #214	; 0xd6
1000a9ee:	4a0b      	ldr	r2, [pc, #44]	; (1000aa1c <gpio_port2_isr_handler+0x74>)
1000a9f0:	5ad3      	ldrh	r3, [r2, r3]
1000a9f2:	410b      	asrs	r3, r1
1000a9f4:	07db      	lsls	r3, r3, #31
1000a9f6:	d509      	bpl.n	1000aa0c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
1000a9f8:	23d4      	movs	r3, #212	; 0xd4

	for (uint8_t i = 12; i < 16; i++){
		if (flag & (1 << i)) {
			/* Clear interrupt flag */
			_gpio_instances[2].hw->INTSTATUSCLEAR.reg = (1 << i);
			if ((_gpio_instances[2].callback_enable_mask & (1 << i)) && \
1000a9fa:	5ad3      	ldrh	r3, [r2, r3]
1000a9fc:	410b      	asrs	r3, r1
1000a9fe:	07db      	lsls	r3, r3, #31
1000aa00:	d504      	bpl.n	1000aa0c <gpio_port2_isr_handler+0x64>
                    (_gpio_instances[2].callback_reg_mask & (1 << i)))
                _gpio_instances[2].callback[i]();
1000aa02:	3124      	adds	r1, #36	; 0x24
1000aa04:	0089      	lsls	r1, r1, #2
1000aa06:	1851      	adds	r1, r2, r1
1000aa08:	684b      	ldr	r3, [r1, #4]
1000aa0a:	4798      	blx	r3
1000aa0c:	2180      	movs	r1, #128	; 0x80
1000aa0e:	0489      	lsls	r1, r1, #18
1000aa10:	23c0      	movs	r3, #192	; 0xc0
1000aa12:	005b      	lsls	r3, r3, #1
1000aa14:	4a02      	ldr	r2, [pc, #8]	; (1000aa20 <gpio_port2_isr_handler+0x78>)
1000aa16:	50d1      	str	r1, [r2, r3]
			break;
		}
	}
	NVIC_ClearPendingIRQ(GPIO2_IRQn);
}
1000aa18:	bd10      	pop	{r4, pc}
1000aa1a:	46c0      	nop			; (mov r8, r8)
1000aa1c:	10019690 	.word	0x10019690
1000aa20:	e000e100 	.word	0xe000e100

1000aa24 <gpio_get_config_defaults>:
 *  \param[out] config  Configuration structure to initialize to default values.
 */
void gpio_get_config_defaults(struct gpio_config *const config)
{
	/* Default configuration values */
	config->direction  = GPIO_PIN_DIR_INPUT;
1000aa24:	2300      	movs	r3, #0
1000aa26:	7003      	strb	r3, [r0, #0]
	config->input_pull = GPIO_PIN_PULL_UP;
1000aa28:	2201      	movs	r2, #1
1000aa2a:	7042      	strb	r2, [r0, #1]
	config->powersave  = false;
1000aa2c:	7083      	strb	r3, [r0, #2]
	config->aon_wakeup = false;
1000aa2e:	70c3      	strb	r3, [r0, #3]
}
1000aa30:	4770      	bx	lr
1000aa32:	46c0      	nop			; (mov r8, r8)

1000aa34 <gpio_pin_set_config>:
 *  \retval STATUS_RESOURCE_NOT_AVAILABLE   Requested gpio is already in use.
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
1000aa34:	b570      	push	{r4, r5, r6, lr}
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
1000aa36:	2317      	movs	r3, #23
	enum status_code status = STATUS_OK;

	/* Following GPIO's should never be modified by user.
	* GPIO_0 & GPIO_1 are used for SWD.
	*/
	if ((gpio_pin == PIN_LP_GPIO_0) || \
1000aa38:	2801      	cmp	r0, #1
1000aa3a:	d800      	bhi.n	1000aa3e <gpio_pin_set_config+0xa>
1000aa3c:	e0c8      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
		(gpio_pin == PIN_LP_GPIO_1))
	{
		status = STATUS_ERR_INVALID_ARG;
	} else {
		if (gpio_pin <= 7) {
1000aa3e:	2807      	cmp	r0, #7
1000aa40:	d809      	bhi.n	1000aa56 <gpio_pin_set_config+0x22>
			LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aa42:	4d64      	ldr	r5, [pc, #400]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000aa44:	6c6a      	ldr	r2, [r5, #68]	; 0x44
1000aa46:	3b10      	subs	r3, #16
1000aa48:	4003      	ands	r3, r0
1000aa4a:	009b      	lsls	r3, r3, #2
1000aa4c:	2407      	movs	r4, #7
1000aa4e:	409c      	lsls	r4, r3
1000aa50:	43a2      	bics	r2, r4
1000aa52:	646a      	str	r2, [r5, #68]	; 0x44
1000aa54:	e029      	b.n	1000aaaa <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 15) {
1000aa56:	280f      	cmp	r0, #15
1000aa58:	d809      	bhi.n	1000aa6e <gpio_pin_set_config+0x3a>
			LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aa5a:	4d5e      	ldr	r5, [pc, #376]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000aa5c:	6caa      	ldr	r2, [r5, #72]	; 0x48
1000aa5e:	2307      	movs	r3, #7
1000aa60:	4003      	ands	r3, r0
1000aa62:	009b      	lsls	r3, r3, #2
1000aa64:	2407      	movs	r4, #7
1000aa66:	409c      	lsls	r4, r3
1000aa68:	43a2      	bics	r2, r4
1000aa6a:	64aa      	str	r2, [r5, #72]	; 0x48
1000aa6c:	e01d      	b.n	1000aaaa <gpio_pin_set_config+0x76>
		} else if (gpio_pin <= 23) {
1000aa6e:	2817      	cmp	r0, #23
1000aa70:	d809      	bhi.n	1000aa86 <gpio_pin_set_config+0x52>
			LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000aa72:	4d58      	ldr	r5, [pc, #352]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000aa74:	6cea      	ldr	r2, [r5, #76]	; 0x4c
1000aa76:	2307      	movs	r3, #7
1000aa78:	4003      	ands	r3, r0
1000aa7a:	009b      	lsls	r3, r3, #2
1000aa7c:	2407      	movs	r4, #7
1000aa7e:	409c      	lsls	r4, r3
1000aa80:	43a2      	bics	r2, r4
1000aa82:	64ea      	str	r2, [r5, #76]	; 0x4c
1000aa84:	e011      	b.n	1000aaaa <gpio_pin_set_config+0x76>
		} else if (44 <= gpio_pin  && gpio_pin < 48) {
1000aa86:	0003      	movs	r3, r0
1000aa88:	3b2c      	subs	r3, #44	; 0x2c
1000aa8a:	2b03      	cmp	r3, #3
1000aa8c:	d80d      	bhi.n	1000aaaa <gpio_pin_set_config+0x76>
			/* Set GPIO_MSx as digital mode */
			AON_GP_REGS0->MS_GPIO_MODE.vec.ANALOG_ENABLE_ &= ~(1 << (gpio_pin - PIN_GPIO_MS4));
1000aa8e:	4d52      	ldr	r5, [pc, #328]	; (1000abd8 <gpio_pin_set_config+0x1a4>)
1000aa90:	2482      	movs	r4, #130	; 0x82
1000aa92:	00e4      	lsls	r4, r4, #3
1000aa94:	5d2a      	ldrb	r2, [r5, r4]
1000aa96:	0712      	lsls	r2, r2, #28
1000aa98:	2601      	movs	r6, #1
1000aa9a:	409e      	lsls	r6, r3
1000aa9c:	0f12      	lsrs	r2, r2, #28
1000aa9e:	5d2b      	ldrb	r3, [r5, r4]
1000aaa0:	43b2      	bics	r2, r6
1000aaa2:	260f      	movs	r6, #15
1000aaa4:	43b3      	bics	r3, r6
1000aaa6:	4313      	orrs	r3, r2
1000aaa8:	552b      	strb	r3, [r5, r4]
		}
	
		if ((gpio_pin == PIN_AO_GPIO_0) || (gpio_pin == PIN_AO_GPIO_1) ||
1000aaaa:	0003      	movs	r3, r0
1000aaac:	3b1d      	subs	r3, #29
1000aaae:	2b02      	cmp	r3, #2
1000aab0:	d829      	bhi.n	1000ab06 <gpio_pin_set_config+0xd2>
				(gpio_pin == PIN_AO_GPIO_2)) {
			/* Active Low, Always On Pull Enable Control */
			if (config->input_pull == GPIO_PIN_PULL_UP) {
1000aab2:	784b      	ldrb	r3, [r1, #1]
1000aab4:	2b01      	cmp	r3, #1
1000aab6:	d108      	bne.n	1000aaca <gpio_pin_set_config+0x96>
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
1000aab8:	4d47      	ldr	r5, [pc, #284]	; (1000abd8 <gpio_pin_set_config+0x1a4>)
1000aaba:	7d2b      	ldrb	r3, [r5, #20]
1000aabc:	241f      	movs	r4, #31
1000aabe:	1a24      	subs	r4, r4, r0
1000aac0:	2201      	movs	r2, #1
1000aac2:	40a2      	lsls	r2, r4
1000aac4:	4393      	bics	r3, r2
1000aac6:	752b      	strb	r3, [r5, #20]
1000aac8:	e008      	b.n	1000aadc <gpio_pin_set_config+0xa8>
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
1000aaca:	4c43      	ldr	r4, [pc, #268]	; (1000abd8 <gpio_pin_set_config+0x1a4>)
1000aacc:	7d25      	ldrb	r5, [r4, #20]
1000aace:	221f      	movs	r2, #31
1000aad0:	1a12      	subs	r2, r2, r0
1000aad2:	2301      	movs	r3, #1
1000aad4:	4093      	lsls	r3, r2
1000aad6:	432b      	orrs	r3, r5
1000aad8:	b2db      	uxtb	r3, r3
1000aada:	7523      	strb	r3, [r4, #20]
			}
			if (config->aon_wakeup) {
1000aadc:	78ca      	ldrb	r2, [r1, #3]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aade:	2300      	movs	r3, #0
			if (config->input_pull == GPIO_PIN_PULL_UP) {
				AON_GP_REGS0->AON_PULL_ENABLE.reg &= ~(1 << (31 - gpio_pin));
			} else {
				AON_GP_REGS0->AON_PULL_ENABLE.reg |= 1 << (31 - gpio_pin);
			}
			if (config->aon_wakeup) {
1000aae0:	2a00      	cmp	r2, #0
1000aae2:	d075      	beq.n	1000abd0 <gpio_pin_set_config+0x19c>
				/* Enable AON_GPIO_x to be a wakeup MCU from sleep mode */
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
1000aae4:	493c      	ldr	r1, [pc, #240]	; (1000abd8 <gpio_pin_set_config+0x1a4>)
1000aae6:	880c      	ldrh	r4, [r1, #0]
1000aae8:	221f      	movs	r2, #31
1000aaea:	1a10      	subs	r0, r2, r0
1000aaec:	0080      	lsls	r0, r0, #2
1000aaee:	3301      	adds	r3, #1
1000aaf0:	4083      	lsls	r3, r0
1000aaf2:	4323      	orrs	r3, r4
1000aaf4:	b29b      	uxth	r3, r3
1000aaf6:	800b      	strh	r3, [r1, #0]
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
1000aaf8:	4a38      	ldr	r2, [pc, #224]	; (1000abdc <gpio_pin_set_config+0x1a8>)
1000aafa:	7811      	ldrb	r1, [r2, #0]
1000aafc:	2302      	movs	r3, #2
1000aafe:	430b      	orrs	r3, r1
1000ab00:	7013      	strb	r3, [r2, #0]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab02:	2300      	movs	r3, #0
1000ab04:	e064      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
				AON_GP_REGS0->AON_PINMUX_SEL.reg |= 1 << (4 * (31 - gpio_pin));
				/* Enable AON_GPIO_x to wake up the BLE domain from sleep mode */
				AON_PWR_SEQ0->GPIO_WAKEUP_CTRL.bit.BLE_ENABLE = 1;
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
1000ab06:	780a      	ldrb	r2, [r1, #0]
1000ab08:	2a00      	cmp	r2, #0
1000ab0a:	d140      	bne.n	1000ab8e <gpio_pin_set_config+0x15a>
				if(gpio_pin < 16) {
1000ab0c:	280f      	cmp	r0, #15
1000ab0e:	d808      	bhi.n	1000ab22 <gpio_pin_set_config+0xee>
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
1000ab10:	2301      	movs	r3, #1
1000ab12:	4083      	lsls	r3, r0
1000ab14:	b29b      	uxth	r3, r3
1000ab16:	4a32      	ldr	r2, [pc, #200]	; (1000abe0 <gpio_pin_set_config+0x1ac>)
1000ab18:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab1a:	2300      	movs	r3, #0
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
1000ab1c:	281f      	cmp	r0, #31
1000ab1e:	d857      	bhi.n	1000abd0 <gpio_pin_set_config+0x19c>
1000ab20:	e012      	b.n	1000ab48 <gpio_pin_set_config+0x114>
			}
		} else {
			if(config->direction == GPIO_PIN_DIR_INPUT) {
				if(gpio_pin < 16) {
					GPIO0->OUTENCLR.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32){
1000ab22:	281f      	cmp	r0, #31
1000ab24:	d807      	bhi.n	1000ab36 <gpio_pin_set_config+0x102>
					GPIO1->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ab26:	220f      	movs	r2, #15
1000ab28:	4002      	ands	r2, r0
1000ab2a:	2301      	movs	r3, #1
1000ab2c:	4093      	lsls	r3, r2
1000ab2e:	b29b      	uxth	r3, r3
1000ab30:	4a2c      	ldr	r2, [pc, #176]	; (1000abe4 <gpio_pin_set_config+0x1b0>)
1000ab32:	8293      	strh	r3, [r2, #20]
1000ab34:	e008      	b.n	1000ab48 <gpio_pin_set_config+0x114>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
1000ab36:	230f      	movs	r3, #15
1000ab38:	4018      	ands	r0, r3
1000ab3a:	3b0e      	subs	r3, #14
1000ab3c:	4083      	lsls	r3, r0
1000ab3e:	b29b      	uxth	r3, r3
1000ab40:	4a29      	ldr	r2, [pc, #164]	; (1000abe8 <gpio_pin_set_config+0x1b4>)
1000ab42:	8293      	strh	r3, [r2, #20]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab44:	2300      	movs	r3, #0
1000ab46:	e043      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
				} else {
					GPIO2->OUTENCLR.reg = (1 << (gpio_pin % 16));
				}
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
1000ab48:	784b      	ldrb	r3, [r1, #1]
1000ab4a:	2b01      	cmp	r3, #1
1000ab4c:	d00c      	beq.n	1000ab68 <gpio_pin_set_config+0x134>
1000ab4e:	2b00      	cmp	r3, #0
1000ab50:	d002      	beq.n	1000ab58 <gpio_pin_set_config+0x124>
1000ab52:	2b02      	cmp	r3, #2
1000ab54:	d010      	beq.n	1000ab78 <gpio_pin_set_config+0x144>
1000ab56:	e03a      	b.n	1000abce <gpio_pin_set_config+0x19a>
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
1000ab58:	491e      	ldr	r1, [pc, #120]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000ab5a:	6d0a      	ldr	r2, [r1, #80]	; 0x50
1000ab5c:	2301      	movs	r3, #1
1000ab5e:	4083      	lsls	r3, r0
1000ab60:	4313      	orrs	r3, r2
1000ab62:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab64:	2300      	movs	r3, #0
				/* pull_enable. */
				if (gpio_pin < 32) {
					switch(config->input_pull) {
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
1000ab66:	e033      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ab68:	491a      	ldr	r1, [pc, #104]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000ab6a:	6d0b      	ldr	r3, [r1, #80]	; 0x50
1000ab6c:	2201      	movs	r2, #1
1000ab6e:	4082      	lsls	r2, r0
1000ab70:	4393      	bics	r3, r2
1000ab72:	650b      	str	r3, [r1, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab74:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_NONE:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg |= (1 << gpio_pin);
							break;
						case GPIO_PIN_PULL_UP:
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ab76:	e02b      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
1000ab78:	4b16      	ldr	r3, [pc, #88]	; (1000abd4 <gpio_pin_set_config+0x1a0>)
1000ab7a:	6d59      	ldr	r1, [r3, #84]	; 0x54
1000ab7c:	2201      	movs	r2, #1
1000ab7e:	4082      	lsls	r2, r0
1000ab80:	4311      	orrs	r1, r2
1000ab82:	6559      	str	r1, [r3, #84]	; 0x54
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
1000ab84:	6d19      	ldr	r1, [r3, #80]	; 0x50
1000ab86:	4391      	bics	r1, r2
1000ab88:	6519      	str	r1, [r3, #80]	; 0x50
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab8a:	2300      	movs	r3, #0
						case GPIO_PIN_PULL_DOWN:
							/* Set R-Type */
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
1000ab8c:	e020      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000ab8e:	2300      	movs	r3, #0
						default:
							status = STATUS_ERR_INVALID_ARG;
							break;
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
1000ab90:	2a01      	cmp	r2, #1
1000ab92:	d11d      	bne.n	1000abd0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
1000ab94:	280f      	cmp	r0, #15
1000ab96:	d806      	bhi.n	1000aba6 <gpio_pin_set_config+0x172>
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
1000ab98:	3301      	adds	r3, #1
1000ab9a:	4083      	lsls	r3, r0
1000ab9c:	b29b      	uxth	r3, r3
1000ab9e:	4a10      	ldr	r2, [pc, #64]	; (1000abe0 <gpio_pin_set_config+0x1ac>)
1000aba0:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000aba2:	2300      	movs	r3, #0
1000aba4:	e014      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
					}
				}
			} else if(config->direction == GPIO_PIN_DIR_OUTPUT) {
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
1000aba6:	281f      	cmp	r0, #31
1000aba8:	d808      	bhi.n	1000abbc <gpio_pin_set_config+0x188>
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
1000abaa:	230f      	movs	r3, #15
1000abac:	4018      	ands	r0, r3
1000abae:	3b0e      	subs	r3, #14
1000abb0:	4083      	lsls	r3, r0
1000abb2:	b29b      	uxth	r3, r3
1000abb4:	4a0b      	ldr	r2, [pc, #44]	; (1000abe4 <gpio_pin_set_config+0x1b0>)
1000abb6:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000abb8:	2300      	movs	r3, #0
1000abba:	e009      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
				if (gpio_pin < 16) {
					GPIO0->OUTENSET.reg = (1 << gpio_pin);
				} else if (gpio_pin < 32) {
					GPIO1->OUTENSET.reg = (1 << (gpio_pin % 16));
				} else {
					GPIO2->OUTENSET.reg = (1 << (gpio_pin % 16));
1000abbc:	230f      	movs	r3, #15
1000abbe:	4018      	ands	r0, r3
1000abc0:	3b0e      	subs	r3, #14
1000abc2:	4083      	lsls	r3, r0
1000abc4:	b29b      	uxth	r3, r3
1000abc6:	4a08      	ldr	r2, [pc, #32]	; (1000abe8 <gpio_pin_set_config+0x1b4>)
1000abc8:	8213      	strh	r3, [r2, #16]
 *
 */
enum status_code gpio_pin_set_config(const uint8_t gpio_pin,
		const struct gpio_config *config)
{
	enum status_code status = STATUS_OK;
1000abca:	2300      	movs	r3, #0
1000abcc:	e000      	b.n	1000abd0 <gpio_pin_set_config+0x19c>
							LPMCU_MISC_REGS0->RTYPE_PAD_0.reg |= (1 << gpio_pin);
							/* Set REN */
							LPMCU_MISC_REGS0->PULL_ENABLE.reg &= ~(1 << gpio_pin);
							break;
						default:
							status = STATUS_ERR_INVALID_ARG;
1000abce:	2317      	movs	r3, #23
				}
			}
		}
	}
	return status;
}
1000abd0:	0018      	movs	r0, r3
1000abd2:	bd70      	pop	{r4, r5, r6, pc}
1000abd4:	4000b000 	.word	0x4000b000
1000abd8:	4000f000 	.word	0x4000f000
1000abdc:	4000e000 	.word	0x4000e000
1000abe0:	40010000 	.word	0x40010000
1000abe4:	40011000 	.word	0x40011000
1000abe8:	40013000 	.word	0x40013000

1000abec <gpio_pin_get_input_level>:
 */
bool gpio_pin_get_input_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000abec:	280f      	cmp	r0, #15
1000abee:	d806      	bhi.n	1000abfe <gpio_pin_get_input_level+0x12>
		regval = GPIO0->DATA.reg;
1000abf0:	4b0f      	ldr	r3, [pc, #60]	; (1000ac30 <gpio_pin_get_input_level+0x44>)
1000abf2:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << gpio_pin);
1000abf4:	2301      	movs	r3, #1
1000abf6:	4083      	lsls	r3, r0
1000abf8:	0018      	movs	r0, r3
1000abfa:	4008      	ands	r0, r1
1000abfc:	e014      	b.n	1000ac28 <gpio_pin_get_input_level+0x3c>
	} else if (gpio_pin < 32) {
1000abfe:	281f      	cmp	r0, #31
1000ac00:	d809      	bhi.n	1000ac16 <gpio_pin_get_input_level+0x2a>
		regval = GPIO1->DATA.reg;
1000ac02:	4b0c      	ldr	r3, [pc, #48]	; (1000ac34 <gpio_pin_get_input_level+0x48>)
1000ac04:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ac06:	230f      	movs	r3, #15
1000ac08:	4003      	ands	r3, r0
1000ac0a:	001a      	movs	r2, r3
1000ac0c:	2301      	movs	r3, #1
1000ac0e:	4093      	lsls	r3, r2
1000ac10:	0018      	movs	r0, r3
1000ac12:	4008      	ands	r0, r1
1000ac14:	e008      	b.n	1000ac28 <gpio_pin_get_input_level+0x3c>
	} else {
		regval = GPIO2->DATA.reg;
1000ac16:	4b08      	ldr	r3, [pc, #32]	; (1000ac38 <gpio_pin_get_input_level+0x4c>)
1000ac18:	8819      	ldrh	r1, [r3, #0]
		regval &= (1 << (gpio_pin % 16));
1000ac1a:	230f      	movs	r3, #15
1000ac1c:	4003      	ands	r3, r0
1000ac1e:	001a      	movs	r2, r3
1000ac20:	2301      	movs	r3, #1
1000ac22:	4093      	lsls	r3, r2
1000ac24:	0018      	movs	r0, r3
1000ac26:	4008      	ands	r0, r1
	}

	return regval;
1000ac28:	1e43      	subs	r3, r0, #1
1000ac2a:	4198      	sbcs	r0, r3
1000ac2c:	b2c0      	uxtb	r0, r0
}
1000ac2e:	4770      	bx	lr
1000ac30:	40010000 	.word	0x40010000
1000ac34:	40011000 	.word	0x40011000
1000ac38:	40013000 	.word	0x40013000

1000ac3c <gpio_pin_get_output_level>:
 */
bool gpio_pin_get_output_level(const uint8_t gpio_pin)
{
	uint32_t regval = 0;

	if (gpio_pin < 16) {
1000ac3c:	280f      	cmp	r0, #15
1000ac3e:	d806      	bhi.n	1000ac4e <gpio_pin_get_output_level+0x12>
		regval = GPIO0->DATAOUT.reg;
1000ac40:	4b0f      	ldr	r3, [pc, #60]	; (1000ac80 <gpio_pin_get_output_level+0x44>)
1000ac42:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << gpio_pin);
1000ac44:	2301      	movs	r3, #1
1000ac46:	4083      	lsls	r3, r0
1000ac48:	0018      	movs	r0, r3
1000ac4a:	4008      	ands	r0, r1
1000ac4c:	e014      	b.n	1000ac78 <gpio_pin_get_output_level+0x3c>
	} else if (gpio_pin < 32) {
1000ac4e:	281f      	cmp	r0, #31
1000ac50:	d809      	bhi.n	1000ac66 <gpio_pin_get_output_level+0x2a>
		regval = GPIO1->DATAOUT.reg;
1000ac52:	4b0c      	ldr	r3, [pc, #48]	; (1000ac84 <gpio_pin_get_output_level+0x48>)
1000ac54:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000ac56:	230f      	movs	r3, #15
1000ac58:	4003      	ands	r3, r0
1000ac5a:	001a      	movs	r2, r3
1000ac5c:	2301      	movs	r3, #1
1000ac5e:	4093      	lsls	r3, r2
1000ac60:	0018      	movs	r0, r3
1000ac62:	4008      	ands	r0, r1
1000ac64:	e008      	b.n	1000ac78 <gpio_pin_get_output_level+0x3c>
	} else {
		regval = GPIO2->DATAOUT.reg;
1000ac66:	4b08      	ldr	r3, [pc, #32]	; (1000ac88 <gpio_pin_get_output_level+0x4c>)
1000ac68:	8899      	ldrh	r1, [r3, #4]
		regval &= (1 << (gpio_pin % 16));
1000ac6a:	230f      	movs	r3, #15
1000ac6c:	4003      	ands	r3, r0
1000ac6e:	001a      	movs	r2, r3
1000ac70:	2301      	movs	r3, #1
1000ac72:	4093      	lsls	r3, r2
1000ac74:	0018      	movs	r0, r3
1000ac76:	4008      	ands	r0, r1
	}

	return regval;
1000ac78:	1e43      	subs	r3, r0, #1
1000ac7a:	4198      	sbcs	r0, r3
1000ac7c:	b2c0      	uxtb	r0, r0
}
1000ac7e:	4770      	bx	lr
1000ac80:	40010000 	.word	0x40010000
1000ac84:	40011000 	.word	0x40011000
1000ac88:	40013000 	.word	0x40013000

1000ac8c <gpio_pin_set_output_level>:
 *
 *  \param[in] gpio_pin  Index of the GPIO pin to write to.
 *  \param[in] level     Logical level to set the given pin to.
 */
void gpio_pin_set_output_level(const uint8_t gpio_pin, const bool level)
{
1000ac8c:	b510      	push	{r4, lr}
	if (gpio_pin < 16) {
1000ac8e:	280f      	cmp	r0, #15
1000ac90:	d810      	bhi.n	1000acb4 <gpio_pin_set_output_level+0x28>
		if(level) {
1000ac92:	2900      	cmp	r1, #0
1000ac94:	d007      	beq.n	1000aca6 <gpio_pin_set_output_level+0x1a>
			GPIO0->DATAOUT.reg |= (1 << gpio_pin);
1000ac96:	4a1d      	ldr	r2, [pc, #116]	; (1000ad0c <gpio_pin_set_output_level+0x80>)
1000ac98:	8891      	ldrh	r1, [r2, #4]
1000ac9a:	2301      	movs	r3, #1
1000ac9c:	4083      	lsls	r3, r0
1000ac9e:	430b      	orrs	r3, r1
1000aca0:	b29b      	uxth	r3, r3
1000aca2:	8093      	strh	r3, [r2, #4]
1000aca4:	e031      	b.n	1000ad0a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO0->DATAOUT.reg &= ~(1 << gpio_pin);
1000aca6:	4919      	ldr	r1, [pc, #100]	; (1000ad0c <gpio_pin_set_output_level+0x80>)
1000aca8:	888b      	ldrh	r3, [r1, #4]
1000acaa:	2201      	movs	r2, #1
1000acac:	4082      	lsls	r2, r0
1000acae:	4393      	bics	r3, r2
1000acb0:	808b      	strh	r3, [r1, #4]
1000acb2:	e02a      	b.n	1000ad0a <gpio_pin_set_output_level+0x7e>
		}
	} else if (gpio_pin < 32) {
1000acb4:	281f      	cmp	r0, #31
1000acb6:	d814      	bhi.n	1000ace2 <gpio_pin_set_output_level+0x56>
		if(level) {
1000acb8:	2900      	cmp	r1, #0
1000acba:	d009      	beq.n	1000acd0 <gpio_pin_set_output_level+0x44>
			GPIO1->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000acbc:	4914      	ldr	r1, [pc, #80]	; (1000ad10 <gpio_pin_set_output_level+0x84>)
1000acbe:	888c      	ldrh	r4, [r1, #4]
1000acc0:	220f      	movs	r2, #15
1000acc2:	4010      	ands	r0, r2
1000acc4:	2301      	movs	r3, #1
1000acc6:	4083      	lsls	r3, r0
1000acc8:	4323      	orrs	r3, r4
1000acca:	b29b      	uxth	r3, r3
1000accc:	808b      	strh	r3, [r1, #4]
1000acce:	e01c      	b.n	1000ad0a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO1->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000acd0:	490f      	ldr	r1, [pc, #60]	; (1000ad10 <gpio_pin_set_output_level+0x84>)
1000acd2:	888b      	ldrh	r3, [r1, #4]
1000acd4:	220f      	movs	r2, #15
1000acd6:	4010      	ands	r0, r2
1000acd8:	3a0e      	subs	r2, #14
1000acda:	4082      	lsls	r2, r0
1000acdc:	4393      	bics	r3, r2
1000acde:	808b      	strh	r3, [r1, #4]
1000ace0:	e013      	b.n	1000ad0a <gpio_pin_set_output_level+0x7e>
		}
	} else {
		if(level) {
1000ace2:	2900      	cmp	r1, #0
1000ace4:	d009      	beq.n	1000acfa <gpio_pin_set_output_level+0x6e>
			GPIO2->DATAOUT.reg |= (1 << (gpio_pin % 16));
1000ace6:	490b      	ldr	r1, [pc, #44]	; (1000ad14 <gpio_pin_set_output_level+0x88>)
1000ace8:	888c      	ldrh	r4, [r1, #4]
1000acea:	220f      	movs	r2, #15
1000acec:	4010      	ands	r0, r2
1000acee:	2301      	movs	r3, #1
1000acf0:	4083      	lsls	r3, r0
1000acf2:	4323      	orrs	r3, r4
1000acf4:	b29b      	uxth	r3, r3
1000acf6:	808b      	strh	r3, [r1, #4]
1000acf8:	e007      	b.n	1000ad0a <gpio_pin_set_output_level+0x7e>
		} else {
			GPIO2->DATAOUT.reg &= ~(1 << (gpio_pin % 16));
1000acfa:	4906      	ldr	r1, [pc, #24]	; (1000ad14 <gpio_pin_set_output_level+0x88>)
1000acfc:	888b      	ldrh	r3, [r1, #4]
1000acfe:	220f      	movs	r2, #15
1000ad00:	4010      	ands	r0, r2
1000ad02:	3a0e      	subs	r2, #14
1000ad04:	4082      	lsls	r2, r0
1000ad06:	4393      	bics	r3, r2
1000ad08:	808b      	strh	r3, [r1, #4]
		}
	}
}
1000ad0a:	bd10      	pop	{r4, pc}
1000ad0c:	40010000 	.word	0x40010000
1000ad10:	40011000 	.word	0x40011000
1000ad14:	40013000 	.word	0x40013000

1000ad18 <gpio_pinmux_cofiguration>:
 *
 *  \param[in] gpio_pin   Index of the GPIO pin to toggle.
 *  \param[in] pinmux_sel PINMUX selection.
 */
void gpio_pinmux_cofiguration(const uint8_t gpio_pin, uint16_t pinmux_sel)
{
1000ad18:	b570      	push	{r4, r5, r6, lr}
	uint8_t megamux_sel = (pinmux_sel >> 8) & 0xFF;
1000ad1a:	0a0d      	lsrs	r5, r1, #8

	pinmux_sel &= 0xFF;
1000ad1c:	23ff      	movs	r3, #255	; 0xff
1000ad1e:	4019      	ands	r1, r3

	if (gpio_pin <= 7) {
1000ad20:	2807      	cmp	r0, #7
1000ad22:	d833      	bhi.n	1000ad8c <gpio_pinmux_cofiguration+0x74>
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ad24:	4a4e      	ldr	r2, [pc, #312]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000ad26:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ad28:	3bf8      	subs	r3, #248	; 0xf8
1000ad2a:	4003      	ands	r3, r0
1000ad2c:	009b      	lsls	r3, r3, #2
1000ad2e:	2607      	movs	r6, #7
1000ad30:	409e      	lsls	r6, r3
1000ad32:	43b4      	bics	r4, r6
1000ad34:	6454      	str	r4, [r2, #68]	; 0x44
		LPMCU_MISC_REGS0->PINMUX_SEL_0.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ad36:	6c54      	ldr	r4, [r2, #68]	; 0x44
1000ad38:	000e      	movs	r6, r1
1000ad3a:	409e      	lsls	r6, r3
1000ad3c:	0033      	movs	r3, r6
1000ad3e:	4323      	orrs	r3, r4
1000ad40:	6453      	str	r3, [r2, #68]	; 0x44
		if (pinmux_sel == 0x01) {
1000ad42:	2901      	cmp	r1, #1
1000ad44:	d000      	beq.n	1000ad48 <gpio_pinmux_cofiguration+0x30>
1000ad46:	e08a      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 3) {
1000ad48:	2803      	cmp	r0, #3
1000ad4a:	d80f      	bhi.n	1000ad6c <gpio_pinmux_cofiguration+0x54>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad4c:	0011      	movs	r1, r2
1000ad4e:	22d0      	movs	r2, #208	; 0xd0
1000ad50:	0052      	lsls	r2, r2, #1
1000ad52:	588c      	ldr	r4, [r1, r2]
1000ad54:	2303      	movs	r3, #3
1000ad56:	4018      	ands	r0, r3
1000ad58:	00c0      	lsls	r0, r0, #3
1000ad5a:	333c      	adds	r3, #60	; 0x3c
1000ad5c:	4083      	lsls	r3, r0
1000ad5e:	439c      	bics	r4, r3
1000ad60:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_0.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad62:	588b      	ldr	r3, [r1, r2]
1000ad64:	4085      	lsls	r5, r0
1000ad66:	431d      	orrs	r5, r3
1000ad68:	508d      	str	r5, [r1, r2]
1000ad6a:	e078      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 7) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ad6c:	493c      	ldr	r1, [pc, #240]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000ad6e:	22d2      	movs	r2, #210	; 0xd2
1000ad70:	0052      	lsls	r2, r2, #1
1000ad72:	588c      	ldr	r4, [r1, r2]
1000ad74:	2303      	movs	r3, #3
1000ad76:	4018      	ands	r0, r3
1000ad78:	00c0      	lsls	r0, r0, #3
1000ad7a:	333c      	adds	r3, #60	; 0x3c
1000ad7c:	4083      	lsls	r3, r0
1000ad7e:	439c      	bics	r4, r3
1000ad80:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_1.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ad82:	588b      	ldr	r3, [r1, r2]
1000ad84:	4085      	lsls	r5, r0
1000ad86:	431d      	orrs	r5, r3
1000ad88:	508d      	str	r5, [r1, r2]
1000ad8a:	e068      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 15) {
1000ad8c:	280f      	cmp	r0, #15
1000ad8e:	d832      	bhi.n	1000adf6 <gpio_pinmux_cofiguration+0xde>
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000ad90:	4a33      	ldr	r2, [pc, #204]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000ad92:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ad94:	2307      	movs	r3, #7
1000ad96:	4003      	ands	r3, r0
1000ad98:	009b      	lsls	r3, r3, #2
1000ad9a:	2607      	movs	r6, #7
1000ad9c:	409e      	lsls	r6, r3
1000ad9e:	43b4      	bics	r4, r6
1000ada0:	6494      	str	r4, [r2, #72]	; 0x48
		LPMCU_MISC_REGS0->PINMUX_SEL_1.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ada2:	6c94      	ldr	r4, [r2, #72]	; 0x48
1000ada4:	000e      	movs	r6, r1
1000ada6:	409e      	lsls	r6, r3
1000ada8:	0033      	movs	r3, r6
1000adaa:	4323      	orrs	r3, r4
1000adac:	6493      	str	r3, [r2, #72]	; 0x48
		if (pinmux_sel == 0x01) {
1000adae:	2901      	cmp	r1, #1
1000adb0:	d155      	bne.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 11) {
1000adb2:	280b      	cmp	r0, #11
1000adb4:	d80f      	bhi.n	1000add6 <gpio_pinmux_cofiguration+0xbe>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000adb6:	0011      	movs	r1, r2
1000adb8:	22d4      	movs	r2, #212	; 0xd4
1000adba:	0052      	lsls	r2, r2, #1
1000adbc:	588c      	ldr	r4, [r1, r2]
1000adbe:	2303      	movs	r3, #3
1000adc0:	4018      	ands	r0, r3
1000adc2:	00c0      	lsls	r0, r0, #3
1000adc4:	333c      	adds	r3, #60	; 0x3c
1000adc6:	4083      	lsls	r3, r0
1000adc8:	439c      	bics	r4, r3
1000adca:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_2.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000adcc:	588b      	ldr	r3, [r1, r2]
1000adce:	4085      	lsls	r5, r0
1000add0:	431d      	orrs	r5, r3
1000add2:	508d      	str	r5, [r1, r2]
1000add4:	e043      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 15) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000add6:	4922      	ldr	r1, [pc, #136]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000add8:	22d6      	movs	r2, #214	; 0xd6
1000adda:	0052      	lsls	r2, r2, #1
1000addc:	588c      	ldr	r4, [r1, r2]
1000adde:	2303      	movs	r3, #3
1000ade0:	4018      	ands	r0, r3
1000ade2:	00c0      	lsls	r0, r0, #3
1000ade4:	333c      	adds	r3, #60	; 0x3c
1000ade6:	4083      	lsls	r3, r0
1000ade8:	439c      	bics	r4, r3
1000adea:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_3.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000adec:	588b      	ldr	r3, [r1, r2]
1000adee:	4085      	lsls	r5, r0
1000adf0:	431d      	orrs	r5, r3
1000adf2:	508d      	str	r5, [r1, r2]
1000adf4:	e033      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			}
		}
	} else if (gpio_pin <= 23) {
1000adf6:	2817      	cmp	r0, #23
1000adf8:	d831      	bhi.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg &= ~(7 << ((gpio_pin % 8) * 4));
1000adfa:	4a19      	ldr	r2, [pc, #100]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000adfc:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000adfe:	2307      	movs	r3, #7
1000ae00:	4003      	ands	r3, r0
1000ae02:	009b      	lsls	r3, r3, #2
1000ae04:	2607      	movs	r6, #7
1000ae06:	409e      	lsls	r6, r3
1000ae08:	43b4      	bics	r4, r6
1000ae0a:	64d4      	str	r4, [r2, #76]	; 0x4c
		LPMCU_MISC_REGS0->PINMUX_SEL_2.reg |= (pinmux_sel << ((gpio_pin % 8)*4));
1000ae0c:	6cd4      	ldr	r4, [r2, #76]	; 0x4c
1000ae0e:	000e      	movs	r6, r1
1000ae10:	409e      	lsls	r6, r3
1000ae12:	0033      	movs	r3, r6
1000ae14:	4323      	orrs	r3, r4
1000ae16:	64d3      	str	r3, [r2, #76]	; 0x4c
		if (pinmux_sel == 0x01) {
1000ae18:	2901      	cmp	r1, #1
1000ae1a:	d120      	bne.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			if (gpio_pin <= 19) {
1000ae1c:	2813      	cmp	r0, #19
1000ae1e:	d80f      	bhi.n	1000ae40 <gpio_pinmux_cofiguration+0x128>
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ae20:	0011      	movs	r1, r2
1000ae22:	22d8      	movs	r2, #216	; 0xd8
1000ae24:	0052      	lsls	r2, r2, #1
1000ae26:	588c      	ldr	r4, [r1, r2]
1000ae28:	2303      	movs	r3, #3
1000ae2a:	4018      	ands	r0, r3
1000ae2c:	00c0      	lsls	r0, r0, #3
1000ae2e:	333c      	adds	r3, #60	; 0x3c
1000ae30:	4083      	lsls	r3, r0
1000ae32:	439c      	bics	r4, r3
1000ae34:	508c      	str	r4, [r1, r2]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_4.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ae36:	588b      	ldr	r3, [r1, r2]
1000ae38:	4085      	lsls	r5, r0
1000ae3a:	431d      	orrs	r5, r3
1000ae3c:	508d      	str	r5, [r1, r2]
1000ae3e:	e00e      	b.n	1000ae5e <gpio_pinmux_cofiguration+0x146>
			} else if (gpio_pin <= 23) {
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg &= ~(0x3F << ((gpio_pin % 4) * 8));
1000ae40:	4a07      	ldr	r2, [pc, #28]	; (1000ae60 <gpio_pinmux_cofiguration+0x148>)
1000ae42:	23da      	movs	r3, #218	; 0xda
1000ae44:	005b      	lsls	r3, r3, #1
1000ae46:	58d1      	ldr	r1, [r2, r3]
1000ae48:	2403      	movs	r4, #3
1000ae4a:	4020      	ands	r0, r4
1000ae4c:	00c0      	lsls	r0, r0, #3
1000ae4e:	343c      	adds	r4, #60	; 0x3c
1000ae50:	4084      	lsls	r4, r0
1000ae52:	43a1      	bics	r1, r4
1000ae54:	50d1      	str	r1, [r2, r3]
				LPMCU_MISC_REGS0->MEGA_MUX_IO_SEL_5.reg |= (megamux_sel << ((gpio_pin % 4) * 8));
1000ae56:	58d1      	ldr	r1, [r2, r3]
1000ae58:	4085      	lsls	r5, r0
1000ae5a:	430d      	orrs	r5, r1
1000ae5c:	50d5      	str	r5, [r2, r3]
			}
		}
	}
}
1000ae5e:	bd70      	pop	{r4, r5, r6, pc}
1000ae60:	4000b000 	.word	0x4000b000

1000ae64 <gpio_register_callback>:
 * \param[in]  callback_type  Callback type given by an enum
 *
 */
void gpio_register_callback(uint8_t gpio_pin, gpio_callback_t callback_func,
				enum gpio_callback callback_type)
{
1000ae64:	b5f0      	push	{r4, r5, r6, r7, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000ae66:	2300      	movs	r3, #0
	Assert(callback_func);
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000ae68:	280f      	cmp	r0, #15
1000ae6a:	d904      	bls.n	1000ae76 <gpio_register_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000ae6c:	241f      	movs	r4, #31
1000ae6e:	4284      	cmp	r4, r0
1000ae70:	415b      	adcs	r3, r3
1000ae72:	3c1d      	subs	r4, #29
1000ae74:	1ae3      	subs	r3, r4, r3
	}
	switch (callback_type) {
1000ae76:	2a01      	cmp	r2, #1
1000ae78:	d016      	beq.n	1000aea8 <gpio_register_callback+0x44>
1000ae7a:	2a00      	cmp	r2, #0
1000ae7c:	d004      	beq.n	1000ae88 <gpio_register_callback+0x24>
1000ae7e:	2a02      	cmp	r2, #2
1000ae80:	d022      	beq.n	1000aec8 <gpio_register_callback+0x64>
1000ae82:	2a03      	cmp	r2, #3
1000ae84:	d030      	beq.n	1000aee8 <gpio_register_callback+0x84>
1000ae86:	e03e      	b.n	1000af06 <gpio_register_callback+0xa2>
	case GPIO_CALLBACK_LOW:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000ae88:	4e29      	ldr	r6, [pc, #164]	; (1000af30 <gpio_register_callback+0xcc>)
1000ae8a:	00dc      	lsls	r4, r3, #3
1000ae8c:	18e2      	adds	r2, r4, r3
1000ae8e:	00d2      	lsls	r2, r2, #3
1000ae90:	5997      	ldr	r7, [r2, r6]
1000ae92:	250f      	movs	r5, #15
1000ae94:	4005      	ands	r5, r0
1000ae96:	2201      	movs	r2, #1
1000ae98:	40aa      	lsls	r2, r5
1000ae9a:	b292      	uxth	r2, r2
1000ae9c:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = 1 << (gpio_pin % 16);
1000ae9e:	18e4      	adds	r4, r4, r3
1000aea0:	00e4      	lsls	r4, r4, #3
1000aea2:	59a4      	ldr	r4, [r4, r6]
1000aea4:	86a2      	strh	r2, [r4, #52]	; 0x34
		break;
1000aea6:	e02e      	b.n	1000af06 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_HIGH:
		_gpio_instances[gpio_port].hw->INTTYPECLR.reg = 1 << (gpio_pin % 16);
1000aea8:	4e21      	ldr	r6, [pc, #132]	; (1000af30 <gpio_register_callback+0xcc>)
1000aeaa:	00dc      	lsls	r4, r3, #3
1000aeac:	18e2      	adds	r2, r4, r3
1000aeae:	00d2      	lsls	r2, r2, #3
1000aeb0:	5997      	ldr	r7, [r2, r6]
1000aeb2:	250f      	movs	r5, #15
1000aeb4:	4005      	ands	r5, r0
1000aeb6:	2201      	movs	r2, #1
1000aeb8:	40aa      	lsls	r2, r5
1000aeba:	b292      	uxth	r2, r2
1000aebc:	85ba      	strh	r2, [r7, #44]	; 0x2c
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000aebe:	18e4      	adds	r4, r4, r3
1000aec0:	00e4      	lsls	r4, r4, #3
1000aec2:	59a4      	ldr	r4, [r4, r6]
1000aec4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000aec6:	e01e      	b.n	1000af06 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_RISING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000aec8:	4e19      	ldr	r6, [pc, #100]	; (1000af30 <gpio_register_callback+0xcc>)
1000aeca:	00dc      	lsls	r4, r3, #3
1000aecc:	18e2      	adds	r2, r4, r3
1000aece:	00d2      	lsls	r2, r2, #3
1000aed0:	5997      	ldr	r7, [r2, r6]
1000aed2:	250f      	movs	r5, #15
1000aed4:	4005      	ands	r5, r0
1000aed6:	2201      	movs	r2, #1
1000aed8:	40aa      	lsls	r2, r5
1000aeda:	b292      	uxth	r2, r2
1000aedc:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLSET.reg = 1 << (gpio_pin % 16);
1000aede:	18e4      	adds	r4, r4, r3
1000aee0:	00e4      	lsls	r4, r4, #3
1000aee2:	59a4      	ldr	r4, [r4, r6]
1000aee4:	8622      	strh	r2, [r4, #48]	; 0x30
		break;
1000aee6:	e00e      	b.n	1000af06 <gpio_register_callback+0xa2>

	case GPIO_CALLBACK_FALLING:
		_gpio_instances[gpio_port].hw->INTTYPESET.reg = 1 << (gpio_pin % 16);
1000aee8:	4e11      	ldr	r6, [pc, #68]	; (1000af30 <gpio_register_callback+0xcc>)
1000aeea:	00dc      	lsls	r4, r3, #3
1000aeec:	18e2      	adds	r2, r4, r3
1000aeee:	00d2      	lsls	r2, r2, #3
1000aef0:	5997      	ldr	r7, [r2, r6]
1000aef2:	250f      	movs	r5, #15
1000aef4:	4005      	ands	r5, r0
1000aef6:	2201      	movs	r2, #1
1000aef8:	40aa      	lsls	r2, r5
1000aefa:	b292      	uxth	r2, r2
1000aefc:	853a      	strh	r2, [r7, #40]	; 0x28
		_gpio_instances[gpio_port].hw->INTPOLCLR.reg = (1 << (gpio_pin % 16));
1000aefe:	18e4      	adds	r4, r4, r3
1000af00:	00e4      	lsls	r4, r4, #3
1000af02:	59a4      	ldr	r4, [r4, r6]
1000af04:	86a2      	strh	r2, [r4, #52]	; 0x34

	case GPIO_CALLBACK_N:
		break;
	}
	/* Register callback function */
	_gpio_instances[gpio_port].callback[gpio_pin % 16] = callback_func;
1000af06:	220f      	movs	r2, #15
1000af08:	4010      	ands	r0, r2
1000af0a:	4c09      	ldr	r4, [pc, #36]	; (1000af30 <gpio_register_callback+0xcc>)
1000af0c:	00dd      	lsls	r5, r3, #3
1000af0e:	18ea      	adds	r2, r5, r3
1000af10:	0052      	lsls	r2, r2, #1
1000af12:	1812      	adds	r2, r2, r0
1000af14:	0092      	lsls	r2, r2, #2
1000af16:	18a2      	adds	r2, r4, r2
1000af18:	6051      	str	r1, [r2, #4]
	/* Set the bit corresponding to the gpio pin */
	_gpio_instances[gpio_port].callback_reg_mask |= (1 << (gpio_pin % 16));
1000af1a:	18ea      	adds	r2, r5, r3
1000af1c:	00d2      	lsls	r2, r2, #3
1000af1e:	18a2      	adds	r2, r4, r2
1000af20:	3244      	adds	r2, #68	; 0x44
1000af22:	2101      	movs	r1, #1
1000af24:	4081      	lsls	r1, r0
1000af26:	8813      	ldrh	r3, [r2, #0]
1000af28:	430b      	orrs	r3, r1
1000af2a:	8013      	strh	r3, [r2, #0]
}
1000af2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000af2e:	46c0      	nop			; (mov r8, r8)
1000af30:	10019690 	.word	0x10019690

1000af34 <gpio_enable_callback>:
 * conditions for the callback type are met.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_enable_callback(uint8_t gpio_pin)
{
1000af34:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000af36:	280f      	cmp	r0, #15
1000af38:	d805      	bhi.n	1000af46 <gpio_enable_callback+0x12>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000af3a:	2280      	movs	r2, #128	; 0x80
1000af3c:	0412      	lsls	r2, r2, #16
1000af3e:	4b12      	ldr	r3, [pc, #72]	; (1000af88 <gpio_enable_callback+0x54>)
1000af40:	601a      	str	r2, [r3, #0]
		gpio_port = 0;
1000af42:	2200      	movs	r2, #0
1000af44:	e00c      	b.n	1000af60 <gpio_enable_callback+0x2c>
		NVIC_EnableIRQ(GPIO0_IRQn);
	} else if (gpio_pin < 32) {
1000af46:	281f      	cmp	r0, #31
1000af48:	d805      	bhi.n	1000af56 <gpio_enable_callback+0x22>
1000af4a:	2280      	movs	r2, #128	; 0x80
1000af4c:	0452      	lsls	r2, r2, #17
1000af4e:	4b0e      	ldr	r3, [pc, #56]	; (1000af88 <gpio_enable_callback+0x54>)
1000af50:	601a      	str	r2, [r3, #0]
		gpio_port = 1;
1000af52:	2201      	movs	r2, #1
1000af54:	e004      	b.n	1000af60 <gpio_enable_callback+0x2c>
1000af56:	2280      	movs	r2, #128	; 0x80
1000af58:	0492      	lsls	r2, r2, #18
1000af5a:	4b0b      	ldr	r3, [pc, #44]	; (1000af88 <gpio_enable_callback+0x54>)
1000af5c:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(GPIO1_IRQn);
	} else {
		gpio_port = 2;
1000af5e:	2202      	movs	r2, #2
		NVIC_EnableIRQ(GPIO2_IRQn);
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask |= (1 << (gpio_pin % 16));
1000af60:	230f      	movs	r3, #15
1000af62:	4018      	ands	r0, r3
1000af64:	2101      	movs	r1, #1
1000af66:	4081      	lsls	r1, r0
1000af68:	4c08      	ldr	r4, [pc, #32]	; (1000af8c <gpio_enable_callback+0x58>)
1000af6a:	00d5      	lsls	r5, r2, #3
1000af6c:	18ab      	adds	r3, r5, r2
1000af6e:	00db      	lsls	r3, r3, #3
1000af70:	18e3      	adds	r3, r4, r3
1000af72:	3346      	adds	r3, #70	; 0x46
1000af74:	8818      	ldrh	r0, [r3, #0]
1000af76:	4308      	orrs	r0, r1
1000af78:	8018      	strh	r0, [r3, #0]
	_gpio_instances[gpio_port].hw->INTENSET.reg = (1 << (gpio_pin % 16));
1000af7a:	18aa      	adds	r2, r5, r2
1000af7c:	00d2      	lsls	r2, r2, #3
1000af7e:	5913      	ldr	r3, [r2, r4]
1000af80:	b289      	uxth	r1, r1
1000af82:	8419      	strh	r1, [r3, #32]
}
1000af84:	bd30      	pop	{r4, r5, pc}
1000af86:	46c0      	nop			; (mov r8, r8)
1000af88:	e000e100 	.word	0xe000e100
1000af8c:	10019690 	.word	0x10019690

1000af90 <gpio_disable_callback>:
 * The callback function will not be called from the interrupt handler.
 *
 * \param[in]  gpio_pin   GPIO pin
 */
void gpio_disable_callback(uint8_t gpio_pin)
{
1000af90:	b530      	push	{r4, r5, lr}
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
		gpio_port = 0;
1000af92:	2300      	movs	r3, #0
{
	Assert(gpio_pin < 48);

	uint8_t gpio_port = 0;

	if (gpio_pin < 16) {
1000af94:	280f      	cmp	r0, #15
1000af96:	d904      	bls.n	1000afa2 <gpio_disable_callback+0x12>
		gpio_port = 0;
	} else if (gpio_pin < 32) {
		gpio_port = 1;
	} else {
		gpio_port = 2;
1000af98:	221f      	movs	r2, #31
1000af9a:	4282      	cmp	r2, r0
1000af9c:	415b      	adcs	r3, r3
1000af9e:	3a1d      	subs	r2, #29
1000afa0:	1ad3      	subs	r3, r2, r3
	}

	/* Enable callback */
	_gpio_instances[gpio_port].callback_enable_mask &= ~(1 << (gpio_pin % 16));
1000afa2:	220f      	movs	r2, #15
1000afa4:	4010      	ands	r0, r2
1000afa6:	2101      	movs	r1, #1
1000afa8:	4081      	lsls	r1, r0
1000afaa:	4c07      	ldr	r4, [pc, #28]	; (1000afc8 <gpio_disable_callback+0x38>)
1000afac:	00dd      	lsls	r5, r3, #3
1000afae:	18ea      	adds	r2, r5, r3
1000afb0:	00d2      	lsls	r2, r2, #3
1000afb2:	18a2      	adds	r2, r4, r2
1000afb4:	3246      	adds	r2, #70	; 0x46
1000afb6:	8810      	ldrh	r0, [r2, #0]
1000afb8:	4388      	bics	r0, r1
1000afba:	8010      	strh	r0, [r2, #0]
	_gpio_instances[gpio_port].hw->INTENCLR.reg = (1 << (gpio_pin % 16));
1000afbc:	18eb      	adds	r3, r5, r3
1000afbe:	00db      	lsls	r3, r3, #3
1000afc0:	591b      	ldr	r3, [r3, r4]
1000afc2:	b289      	uxth	r1, r1
1000afc4:	8499      	strh	r1, [r3, #36]	; 0x24
}
1000afc6:	bd30      	pop	{r4, r5, pc}
1000afc8:	10019690 	.word	0x10019690

1000afcc <gpio_init>:
 *
 * This function will init GPIO callback.
 *
 */
void gpio_init(void)
{
1000afcc:	b510      	push	{r4, lr}
1000afce:	4a11      	ldr	r2, [pc, #68]	; (1000b014 <gpio_init+0x48>)
1000afd0:	0010      	movs	r0, r2
1000afd2:	30d8      	adds	r0, #216	; 0xd8
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
			_gpio_instances[i].callback[j] = NULL;
1000afd4:	2100      	movs	r1, #0
1000afd6:	e007      	b.n	1000afe8 <gpio_init+0x1c>
1000afd8:	c302      	stmia	r3!, {r1}
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
		for(j = 0; j < 16; j++) {
1000afda:	4293      	cmp	r3, r2
1000afdc:	d1fc      	bne.n	1000afd8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
1000afde:	8051      	strh	r1, [r2, #2]
		_gpio_instances[i].callback_reg_mask = 0;
1000afe0:	8011      	strh	r1, [r2, #0]
1000afe2:	3248      	adds	r2, #72	; 0x48
 */
void gpio_init(void)
{
	uint8_t i, j;

	for(i = 0; i < 3; i++) {
1000afe4:	4282      	cmp	r2, r0
1000afe6:	d002      	beq.n	1000afee <gpio_init+0x22>
1000afe8:	0013      	movs	r3, r2
1000afea:	3b40      	subs	r3, #64	; 0x40
1000afec:	e7f4      	b.n	1000afd8 <gpio_init+0xc>
			_gpio_instances[i].callback[j] = NULL;
		}
		_gpio_instances[i].callback_enable_mask = 0;
		_gpio_instances[i].callback_reg_mask = 0;
	}
	_gpio_instances[0].hw = (void *)GPIO0;
1000afee:	4b0a      	ldr	r3, [pc, #40]	; (1000b018 <gpio_init+0x4c>)
1000aff0:	4a0a      	ldr	r2, [pc, #40]	; (1000b01c <gpio_init+0x50>)
1000aff2:	601a      	str	r2, [r3, #0]
	_gpio_instances[1].hw = (void *)GPIO1;
1000aff4:	4a0a      	ldr	r2, [pc, #40]	; (1000b020 <gpio_init+0x54>)
1000aff6:	649a      	str	r2, [r3, #72]	; 0x48
	_gpio_instances[2].hw = (void *)GPIO2;
1000aff8:	490a      	ldr	r1, [pc, #40]	; (1000b024 <gpio_init+0x58>)
1000affa:	2290      	movs	r2, #144	; 0x90
1000affc:	5099      	str	r1, [r3, r2]
	system_register_isr(RAM_ISR_TABLE_PORT0_COMB_INDEX, (uint32_t)gpio_port0_isr_handler);
1000affe:	490a      	ldr	r1, [pc, #40]	; (1000b028 <gpio_init+0x5c>)
1000b000:	2027      	movs	r0, #39	; 0x27
1000b002:	4c0a      	ldr	r4, [pc, #40]	; (1000b02c <gpio_init+0x60>)
1000b004:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT1_COMB_INDEX, (uint32_t)gpio_port1_isr_handler);
1000b006:	490a      	ldr	r1, [pc, #40]	; (1000b030 <gpio_init+0x64>)
1000b008:	2028      	movs	r0, #40	; 0x28
1000b00a:	47a0      	blx	r4
	system_register_isr(RAM_ISR_TABLE_PORT2_COMB_INDEX, (uint32_t)gpio_port2_isr_handler);
1000b00c:	4909      	ldr	r1, [pc, #36]	; (1000b034 <gpio_init+0x68>)
1000b00e:	2029      	movs	r0, #41	; 0x29
1000b010:	47a0      	blx	r4
}
1000b012:	bd10      	pop	{r4, pc}
1000b014:	100196d4 	.word	0x100196d4
1000b018:	10019690 	.word	0x10019690
1000b01c:	40010000 	.word	0x40010000
1000b020:	40011000 	.word	0x40011000
1000b024:	40013000 	.word	0x40013000
1000b028:	1000a8d5 	.word	0x1000a8d5
1000b02c:	1000bbf9 	.word	0x1000bbf9
1000b030:	1000a939 	.word	0x1000a939
1000b034:	1000a9a9 	.word	0x1000a9a9

1000b038 <system_clock_config>:
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_config(enum system_clock_resource resoure, \
				enum system_clock_freq freq)
{
	switch (resoure) {
1000b038:	2801      	cmp	r0, #1
1000b03a:	d00d      	beq.n	1000b058 <system_clock_config+0x20>
1000b03c:	2800      	cmp	r0, #0
1000b03e:	d002      	beq.n	1000b046 <system_clock_config+0xe>
1000b040:	2802      	cmp	r0, #2
1000b042:	d01c      	beq.n	1000b07e <system_clock_config+0x46>
1000b044:	e02e      	b.n	1000b0a4 <system_clock_config+0x6c>
		case CLOCK_RESOURCE_XO_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b046:	4a18      	ldr	r2, [pc, #96]	; (1000b0a8 <system_clock_config+0x70>)
1000b048:	6990      	ldr	r0, [r2, #24]
1000b04a:	230c      	movs	r3, #12
1000b04c:	4303      	orrs	r3, r0
1000b04e:	6193      	str	r3, [r2, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			system_clock_value = 26000000;
1000b050:	4a16      	ldr	r2, [pc, #88]	; (1000b0ac <system_clock_config+0x74>)
1000b052:	4b17      	ldr	r3, [pc, #92]	; (1000b0b0 <system_clock_config+0x78>)
1000b054:	601a      	str	r2, [r3, #0]
			break;
1000b056:	e01a      	b.n	1000b08e <system_clock_config+0x56>

		case CLOCK_RESOURCE_LP_2_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b058:	4b13      	ldr	r3, [pc, #76]	; (1000b0a8 <system_clock_config+0x70>)
1000b05a:	6998      	ldr	r0, [r3, #24]
1000b05c:	2208      	movs	r2, #8
1000b05e:	4302      	orrs	r2, r0
1000b060:	619a      	str	r2, [r3, #24]
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK;
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b062:	699a      	ldr	r2, [r3, #24]
1000b064:	2004      	movs	r0, #4
1000b066:	4382      	bics	r2, r0
1000b068:	619a      	str	r2, [r3, #24]
					~LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK;
			AON_GP_REGS0->AON_PMU_CTRL.reg |= \
1000b06a:	4a12      	ldr	r2, [pc, #72]	; (1000b0b4 <system_clock_config+0x7c>)
1000b06c:	6853      	ldr	r3, [r2, #4]
1000b06e:	2080      	movs	r0, #128	; 0x80
1000b070:	0300      	lsls	r0, r0, #12
1000b072:	4303      	orrs	r3, r0
1000b074:	6053      	str	r3, [r2, #4]
					AON_GP_REGS_AON_PMU_CTRL_PMU_2MHZ_CLK_EN;
			system_clock_value = 2000000;
1000b076:	4a10      	ldr	r2, [pc, #64]	; (1000b0b8 <system_clock_config+0x80>)
1000b078:	4b0d      	ldr	r3, [pc, #52]	; (1000b0b0 <system_clock_config+0x78>)
1000b07a:	601a      	str	r2, [r3, #0]
			break;
1000b07c:	e007      	b.n	1000b08e <system_clock_config+0x56>

		case CLOCK_RESOURCE_RC_26_MHZ:
			LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b07e:	4a0a      	ldr	r2, [pc, #40]	; (1000b0a8 <system_clock_config+0x70>)
1000b080:	6993      	ldr	r3, [r2, #24]
1000b082:	200c      	movs	r0, #12
1000b084:	4383      	bics	r3, r0
1000b086:	6193      	str	r3, [r2, #24]
					~(LPMCU_MISC_REGS_LPMCU_CTRL_USE_BT26M_CLK | \
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
1000b088:	4a08      	ldr	r2, [pc, #32]	; (1000b0ac <system_clock_config+0x74>)
1000b08a:	4b09      	ldr	r3, [pc, #36]	; (1000b0b0 <system_clock_config+0x78>)
1000b08c:	601a      	str	r2, [r3, #0]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	LPMCU_MISC_REGS0->LPMCU_CTRL.reg &= \
1000b08e:	4b06      	ldr	r3, [pc, #24]	; (1000b0a8 <system_clock_config+0x70>)
1000b090:	699a      	ldr	r2, [r3, #24]
1000b092:	2003      	movs	r0, #3
1000b094:	4382      	bics	r2, r0
1000b096:	619a      	str	r2, [r3, #24]
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
1000b098:	699a      	ldr	r2, [r3, #24]
1000b09a:	4001      	ands	r1, r0
1000b09c:	4311      	orrs	r1, r2
1000b09e:	6199      	str	r1, [r3, #24]
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
1000b0a0:	2000      	movs	r0, #0
1000b0a2:	e000      	b.n	1000b0a6 <system_clock_config+0x6e>
					LPMCU_MISC_REGS_LPMCU_CTRL_USE_ARM_LP_CLK);
			system_clock_value = 26000000;
			break;

		default:
			return STATUS_ERR_INVALID_ARG;
1000b0a4:	2017      	movs	r0, #23
		~LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL_Msk;
	LPMCU_MISC_REGS0->LPMCU_CTRL.reg |= \
		LPMCU_MISC_REGS_LPMCU_CTRL_LPMCU_CLK_SEL(freq);

	return STATUS_OK;
}
1000b0a6:	4770      	bx	lr
1000b0a8:	4000b000 	.word	0x4000b000
1000b0ac:	018cba80 	.word	0x018cba80
1000b0b0:	10019768 	.word	0x10019768
1000b0b4:	4000f000 	.word	0x4000f000
1000b0b8:	001e8480 	.word	0x001e8480

1000b0bc <system_clock_get_value>:
 *
 * \return system clock value.
 */
uint32_t system_clock_get_value(void)
{
	return system_clock_value;
1000b0bc:	4b01      	ldr	r3, [pc, #4]	; (1000b0c4 <system_clock_get_value+0x8>)
1000b0be:	6818      	ldr	r0, [r3, #0]
}
1000b0c0:	4770      	bx	lr
1000b0c2:	46c0      	nop			; (mov r8, r8)
1000b0c4:	10019768 	.word	0x10019768

1000b0c8 <system_clock_peripheral_enable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_enable(enum system_peripheral peripheral)
{
1000b0c8:	b500      	push	{lr}
	switch (peripheral) {
1000b0ca:	2835      	cmp	r0, #53	; 0x35
1000b0cc:	d900      	bls.n	1000b0d0 <system_clock_peripheral_enable+0x8>
1000b0ce:	e1a2      	b.n	1000b416 <system_clock_peripheral_enable+0x34e>
1000b0d0:	0080      	lsls	r0, r0, #2
1000b0d2:	4bd2      	ldr	r3, [pc, #840]	; (1000b41c <system_clock_peripheral_enable+0x354>)
1000b0d4:	581b      	ldr	r3, [r3, r0]
1000b0d6:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0d8:	4ad1      	ldr	r2, [pc, #836]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b0da:	68d1      	ldr	r1, [r2, #12]
1000b0dc:	2302      	movs	r3, #2
1000b0de:	430b      	orrs	r3, r1
1000b0e0:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0e2:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b0e4:	e198      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0e6:	4ace      	ldr	r2, [pc, #824]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b0e8:	68d1      	ldr	r1, [r2, #12]
1000b0ea:	2304      	movs	r3, #4
1000b0ec:	430b      	orrs	r3, r1
1000b0ee:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b0f2:	e191      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b0f4:	4aca      	ldr	r2, [pc, #808]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b0f6:	68d1      	ldr	r1, [r2, #12]
1000b0f8:	2308      	movs	r3, #8
1000b0fa:	430b      	orrs	r3, r1
1000b0fc:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b0fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b100:	e18a      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b102:	4ac7      	ldr	r2, [pc, #796]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b104:	68d1      	ldr	r1, [r2, #12]
1000b106:	2310      	movs	r3, #16
1000b108:	430b      	orrs	r3, r1
1000b10a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b10c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b10e:	e183      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b110:	4ac3      	ldr	r2, [pc, #780]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b112:	68d1      	ldr	r1, [r2, #12]
1000b114:	2320      	movs	r3, #32
1000b116:	430b      	orrs	r3, r1
1000b118:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b11a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b11c:	e17c      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b11e:	4ac0      	ldr	r2, [pc, #768]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b120:	68d1      	ldr	r1, [r2, #12]
1000b122:	2380      	movs	r3, #128	; 0x80
1000b124:	430b      	orrs	r3, r1
1000b126:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b128:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b12a:	e175      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b12c:	4abc      	ldr	r2, [pc, #752]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b12e:	68d3      	ldr	r3, [r2, #12]
1000b130:	2180      	movs	r1, #128	; 0x80
1000b132:	0049      	lsls	r1, r1, #1
1000b134:	430b      	orrs	r3, r1
1000b136:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b138:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b13a:	e16d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b13c:	4ab8      	ldr	r2, [pc, #736]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b13e:	68d3      	ldr	r3, [r2, #12]
1000b140:	2180      	movs	r1, #128	; 0x80
1000b142:	0109      	lsls	r1, r1, #4
1000b144:	430b      	orrs	r3, r1
1000b146:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b148:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b14a:	e165      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b14c:	4ab4      	ldr	r2, [pc, #720]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b14e:	68d3      	ldr	r3, [r2, #12]
1000b150:	2180      	movs	r1, #128	; 0x80
1000b152:	0149      	lsls	r1, r1, #5
1000b154:	430b      	orrs	r3, r1
1000b156:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b158:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b15a:	e15d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b15c:	4ab0      	ldr	r2, [pc, #704]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b15e:	68d3      	ldr	r3, [r2, #12]
1000b160:	2180      	movs	r1, #128	; 0x80
1000b162:	0189      	lsls	r1, r1, #6
1000b164:	430b      	orrs	r3, r1
1000b166:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b168:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b16a:	e155      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b16c:	4aac      	ldr	r2, [pc, #688]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b16e:	68d3      	ldr	r3, [r2, #12]
1000b170:	2180      	movs	r1, #128	; 0x80
1000b172:	01c9      	lsls	r1, r1, #7
1000b174:	430b      	orrs	r3, r1
1000b176:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b178:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b17a:	e14d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b17c:	4aa8      	ldr	r2, [pc, #672]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b17e:	68d3      	ldr	r3, [r2, #12]
1000b180:	2180      	movs	r1, #128	; 0x80
1000b182:	0209      	lsls	r1, r1, #8
1000b184:	430b      	orrs	r3, r1
1000b186:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b188:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b18a:	e145      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b18c:	4aa4      	ldr	r2, [pc, #656]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b18e:	68d3      	ldr	r3, [r2, #12]
1000b190:	2180      	movs	r1, #128	; 0x80
1000b192:	0249      	lsls	r1, r1, #9
1000b194:	430b      	orrs	r3, r1
1000b196:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b198:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b19a:	e13d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b19c:	4aa0      	ldr	r2, [pc, #640]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b19e:	68d3      	ldr	r3, [r2, #12]
1000b1a0:	2180      	movs	r1, #128	; 0x80
1000b1a2:	0289      	lsls	r1, r1, #10
1000b1a4:	430b      	orrs	r3, r1
1000b1a6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b1aa:	e135      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1ac:	4a9c      	ldr	r2, [pc, #624]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1ae:	68d3      	ldr	r3, [r2, #12]
1000b1b0:	2180      	movs	r1, #128	; 0x80
1000b1b2:	02c9      	lsls	r1, r1, #11
1000b1b4:	430b      	orrs	r3, r1
1000b1b6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b1ba:	e12d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1bc:	4a98      	ldr	r2, [pc, #608]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1be:	68d3      	ldr	r3, [r2, #12]
1000b1c0:	2180      	movs	r1, #128	; 0x80
1000b1c2:	0309      	lsls	r1, r1, #12
1000b1c4:	430b      	orrs	r3, r1
1000b1c6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b1ca:	e125      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1cc:	4a94      	ldr	r2, [pc, #592]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1ce:	68d3      	ldr	r3, [r2, #12]
1000b1d0:	2180      	movs	r1, #128	; 0x80
1000b1d2:	0349      	lsls	r1, r1, #13
1000b1d4:	430b      	orrs	r3, r1
1000b1d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b1da:	e11d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1dc:	4a90      	ldr	r2, [pc, #576]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1de:	68d3      	ldr	r3, [r2, #12]
1000b1e0:	2180      	movs	r1, #128	; 0x80
1000b1e2:	0389      	lsls	r1, r1, #14
1000b1e4:	430b      	orrs	r3, r1
1000b1e6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b1ea:	e115      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1ec:	4a8c      	ldr	r2, [pc, #560]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1ee:	68d3      	ldr	r3, [r2, #12]
1000b1f0:	2180      	movs	r1, #128	; 0x80
1000b1f2:	03c9      	lsls	r1, r1, #15
1000b1f4:	430b      	orrs	r3, r1
1000b1f6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b1f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b1fa:	e10d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b1fc:	4a88      	ldr	r2, [pc, #544]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b1fe:	68d3      	ldr	r3, [r2, #12]
1000b200:	2180      	movs	r1, #128	; 0x80
1000b202:	0409      	lsls	r1, r1, #16
1000b204:	430b      	orrs	r3, r1
1000b206:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b208:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b20a:	e105      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b20c:	4a84      	ldr	r2, [pc, #528]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b20e:	68d3      	ldr	r3, [r2, #12]
1000b210:	2180      	movs	r1, #128	; 0x80
1000b212:	0449      	lsls	r1, r1, #17
1000b214:	430b      	orrs	r3, r1
1000b216:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b218:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b21a:	e0fd      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b21c:	4a80      	ldr	r2, [pc, #512]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b21e:	68d3      	ldr	r3, [r2, #12]
1000b220:	2180      	movs	r1, #128	; 0x80
1000b222:	0489      	lsls	r1, r1, #18
1000b224:	430b      	orrs	r3, r1
1000b226:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b228:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b22a:	e0f5      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b22c:	4a7c      	ldr	r2, [pc, #496]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b22e:	68d3      	ldr	r3, [r2, #12]
1000b230:	2180      	movs	r1, #128	; 0x80
1000b232:	04c9      	lsls	r1, r1, #19
1000b234:	430b      	orrs	r3, r1
1000b236:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b238:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b23a:	e0ed      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b23c:	4a78      	ldr	r2, [pc, #480]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b23e:	68d3      	ldr	r3, [r2, #12]
1000b240:	2180      	movs	r1, #128	; 0x80
1000b242:	0509      	lsls	r1, r1, #20
1000b244:	430b      	orrs	r3, r1
1000b246:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b248:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b24a:	e0e5      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b24c:	4a74      	ldr	r2, [pc, #464]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b24e:	68d3      	ldr	r3, [r2, #12]
1000b250:	2180      	movs	r1, #128	; 0x80
1000b252:	0549      	lsls	r1, r1, #21
1000b254:	430b      	orrs	r3, r1
1000b256:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b258:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b25a:	e0dd      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b25c:	4a70      	ldr	r2, [pc, #448]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b25e:	68d3      	ldr	r3, [r2, #12]
1000b260:	2180      	movs	r1, #128	; 0x80
1000b262:	0589      	lsls	r1, r1, #22
1000b264:	430b      	orrs	r3, r1
1000b266:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b268:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b26a:	e0d5      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
1000b26c:	4a6c      	ldr	r2, [pc, #432]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b26e:	68d3      	ldr	r3, [r2, #12]
1000b270:	2180      	movs	r1, #128	; 0x80
1000b272:	05c9      	lsls	r1, r1, #23
1000b274:	430b      	orrs	r3, r1
1000b276:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b278:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b27a:	e0cd      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b27c:	4a68      	ldr	r2, [pc, #416]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b27e:	6911      	ldr	r1, [r2, #16]
1000b280:	2301      	movs	r3, #1
1000b282:	430b      	orrs	r3, r1
1000b284:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b286:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b288:	e0c6      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b28a:	4a65      	ldr	r2, [pc, #404]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b28c:	6911      	ldr	r1, [r2, #16]
1000b28e:	2302      	movs	r3, #2
1000b290:	430b      	orrs	r3, r1
1000b292:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b294:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b296:	e0bf      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b298:	4a61      	ldr	r2, [pc, #388]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b29a:	6911      	ldr	r1, [r2, #16]
1000b29c:	2304      	movs	r3, #4
1000b29e:	430b      	orrs	r3, r1
1000b2a0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2a2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b2a4:	e0b8      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2a6:	4a5e      	ldr	r2, [pc, #376]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2a8:	6911      	ldr	r1, [r2, #16]
1000b2aa:	2308      	movs	r3, #8
1000b2ac:	430b      	orrs	r3, r1
1000b2ae:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2b0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b2b2:	e0b1      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2b4:	4a5a      	ldr	r2, [pc, #360]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2b6:	6911      	ldr	r1, [r2, #16]
1000b2b8:	2310      	movs	r3, #16
1000b2ba:	430b      	orrs	r3, r1
1000b2bc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2be:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b2c0:	e0aa      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2c2:	4a57      	ldr	r2, [pc, #348]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2c4:	6911      	ldr	r1, [r2, #16]
1000b2c6:	2320      	movs	r3, #32
1000b2c8:	430b      	orrs	r3, r1
1000b2ca:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2cc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b2ce:	e0a3      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2d0:	4a53      	ldr	r2, [pc, #332]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2d2:	6911      	ldr	r1, [r2, #16]
1000b2d4:	2340      	movs	r3, #64	; 0x40
1000b2d6:	430b      	orrs	r3, r1
1000b2d8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2da:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b2dc:	e09c      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2de:	4a50      	ldr	r2, [pc, #320]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2e0:	6911      	ldr	r1, [r2, #16]
1000b2e2:	2380      	movs	r3, #128	; 0x80
1000b2e4:	430b      	orrs	r3, r1
1000b2e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b2ea:	e095      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2ec:	4a4c      	ldr	r2, [pc, #304]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2ee:	6913      	ldr	r3, [r2, #16]
1000b2f0:	2180      	movs	r1, #128	; 0x80
1000b2f2:	0049      	lsls	r1, r1, #1
1000b2f4:	430b      	orrs	r3, r1
1000b2f6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b2f8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b2fa:	e08d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b2fc:	4a48      	ldr	r2, [pc, #288]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b2fe:	6913      	ldr	r3, [r2, #16]
1000b300:	2180      	movs	r1, #128	; 0x80
1000b302:	0089      	lsls	r1, r1, #2
1000b304:	430b      	orrs	r3, r1
1000b306:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b308:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b30a:	e085      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b30c:	4a44      	ldr	r2, [pc, #272]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b30e:	6913      	ldr	r3, [r2, #16]
1000b310:	2180      	movs	r1, #128	; 0x80
1000b312:	00c9      	lsls	r1, r1, #3
1000b314:	430b      	orrs	r3, r1
1000b316:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b318:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b31a:	e07d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b31c:	4a40      	ldr	r2, [pc, #256]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b31e:	6913      	ldr	r3, [r2, #16]
1000b320:	2180      	movs	r1, #128	; 0x80
1000b322:	0109      	lsls	r1, r1, #4
1000b324:	430b      	orrs	r3, r1
1000b326:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b328:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b32a:	e075      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b32c:	4a3c      	ldr	r2, [pc, #240]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b32e:	6913      	ldr	r3, [r2, #16]
1000b330:	2180      	movs	r1, #128	; 0x80
1000b332:	0149      	lsls	r1, r1, #5
1000b334:	430b      	orrs	r3, r1
1000b336:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b338:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b33a:	e06d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b33c:	4a38      	ldr	r2, [pc, #224]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b33e:	6913      	ldr	r3, [r2, #16]
1000b340:	2180      	movs	r1, #128	; 0x80
1000b342:	0189      	lsls	r1, r1, #6
1000b344:	430b      	orrs	r3, r1
1000b346:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b348:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b34a:	e065      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b34c:	4a34      	ldr	r2, [pc, #208]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b34e:	6913      	ldr	r3, [r2, #16]
1000b350:	2180      	movs	r1, #128	; 0x80
1000b352:	01c9      	lsls	r1, r1, #7
1000b354:	430b      	orrs	r3, r1
1000b356:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b358:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b35a:	e05d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b35c:	4a30      	ldr	r2, [pc, #192]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b35e:	6913      	ldr	r3, [r2, #16]
1000b360:	2180      	movs	r1, #128	; 0x80
1000b362:	0209      	lsls	r1, r1, #8
1000b364:	430b      	orrs	r3, r1
1000b366:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b368:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b36a:	e055      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b36c:	4a2c      	ldr	r2, [pc, #176]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b36e:	6913      	ldr	r3, [r2, #16]
1000b370:	2180      	movs	r1, #128	; 0x80
1000b372:	0249      	lsls	r1, r1, #9
1000b374:	430b      	orrs	r3, r1
1000b376:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b378:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b37a:	e04d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b37c:	4a28      	ldr	r2, [pc, #160]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b37e:	6913      	ldr	r3, [r2, #16]
1000b380:	2180      	movs	r1, #128	; 0x80
1000b382:	0289      	lsls	r1, r1, #10
1000b384:	430b      	orrs	r3, r1
1000b386:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b388:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b38a:	e045      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b38c:	4a24      	ldr	r2, [pc, #144]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b38e:	6913      	ldr	r3, [r2, #16]
1000b390:	2180      	movs	r1, #128	; 0x80
1000b392:	02c9      	lsls	r1, r1, #11
1000b394:	430b      	orrs	r3, r1
1000b396:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b398:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b39a:	e03d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b39c:	4a20      	ldr	r2, [pc, #128]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b39e:	6913      	ldr	r3, [r2, #16]
1000b3a0:	2180      	movs	r1, #128	; 0x80
1000b3a2:	0309      	lsls	r1, r1, #12
1000b3a4:	430b      	orrs	r3, r1
1000b3a6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3a8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b3aa:	e035      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3ac:	4a1c      	ldr	r2, [pc, #112]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3ae:	6913      	ldr	r3, [r2, #16]
1000b3b0:	2180      	movs	r1, #128	; 0x80
1000b3b2:	0349      	lsls	r1, r1, #13
1000b3b4:	430b      	orrs	r3, r1
1000b3b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b3ba:	e02d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3bc:	4a18      	ldr	r2, [pc, #96]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3be:	6913      	ldr	r3, [r2, #16]
1000b3c0:	2180      	movs	r1, #128	; 0x80
1000b3c2:	0389      	lsls	r1, r1, #14
1000b3c4:	430b      	orrs	r3, r1
1000b3c6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3c8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b3ca:	e025      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3cc:	4a14      	ldr	r2, [pc, #80]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3ce:	6913      	ldr	r3, [r2, #16]
1000b3d0:	2180      	movs	r1, #128	; 0x80
1000b3d2:	03c9      	lsls	r1, r1, #15
1000b3d4:	430b      	orrs	r3, r1
1000b3d6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b3da:	e01d      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
1000b3dc:	4a10      	ldr	r2, [pc, #64]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3de:	6913      	ldr	r3, [r2, #16]
1000b3e0:	2180      	movs	r1, #128	; 0x80
1000b3e2:	0409      	lsls	r1, r1, #16
1000b3e4:	430b      	orrs	r3, r1
1000b3e6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3e8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b3ea:	e015      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b3ec:	4a0c      	ldr	r2, [pc, #48]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3ee:	7d11      	ldrb	r1, [r2, #20]
1000b3f0:	2301      	movs	r3, #1
1000b3f2:	430b      	orrs	r3, r1
1000b3f4:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b3f6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b3f8:	e00e      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b3fa:	4a09      	ldr	r2, [pc, #36]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b3fc:	7d11      	ldrb	r1, [r2, #20]
1000b3fe:	2302      	movs	r3, #2
1000b400:	430b      	orrs	r3, r1
1000b402:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b404:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b406:	e007      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
1000b408:	4a05      	ldr	r2, [pc, #20]	; (1000b420 <system_clock_peripheral_enable+0x358>)
1000b40a:	7d11      	ldrb	r1, [r2, #20]
1000b40c:	2304      	movs	r3, #4
1000b40e:	430b      	orrs	r3, r1
1000b410:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b412:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg |= \
				LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b414:	e000      	b.n	1000b418 <system_clock_peripheral_enable+0x350>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b416:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b418:	bd00      	pop	{pc}
1000b41a:	46c0      	nop			; (mov r8, r8)
1000b41c:	10016aec 	.word	0x10016aec
1000b420:	4000b000 	.word	0x4000b000

1000b424 <system_clock_peripheral_disable>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_clock_peripheral_disable(enum system_peripheral peripheral)
{
1000b424:	b500      	push	{lr}
	switch (peripheral) {
1000b426:	2835      	cmp	r0, #53	; 0x35
1000b428:	d900      	bls.n	1000b42c <system_clock_peripheral_disable+0x8>
1000b42a:	e17d      	b.n	1000b728 <system_clock_peripheral_disable+0x304>
1000b42c:	0080      	lsls	r0, r0, #2
1000b42e:	4bbf      	ldr	r3, [pc, #764]	; (1000b72c <system_clock_peripheral_disable+0x308>)
1000b430:	581b      	ldr	r3, [r3, r0]
1000b432:	469f      	mov	pc, r3
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b434:	4abe      	ldr	r2, [pc, #760]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b436:	68d3      	ldr	r3, [r2, #12]
1000b438:	2102      	movs	r1, #2
1000b43a:	438b      	bics	r3, r1
1000b43c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b43e:	2000      	movs	r0, #0
{
	switch (peripheral) {
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI_FLASH0_CLK_EN;
		break;
1000b440:	e173      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b442:	4abb      	ldr	r2, [pc, #748]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b444:	68d3      	ldr	r3, [r2, #12]
1000b446:	2104      	movs	r1, #4
1000b448:	438b      	bics	r3, r1
1000b44a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b44c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI0_CORE_CLK_EN;
		break;
1000b44e:	e16c      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b450:	4ab7      	ldr	r2, [pc, #732]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b452:	68d3      	ldr	r3, [r2, #12]
1000b454:	2108      	movs	r1, #8
1000b456:	438b      	bics	r3, r1
1000b458:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b45a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_SPI1_CORE_CLK_EN;
		break;
1000b45c:	e165      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b45e:	4ab4      	ldr	r2, [pc, #720]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b460:	68d3      	ldr	r3, [r2, #12]
1000b462:	2110      	movs	r1, #16
1000b464:	438b      	bics	r3, r1
1000b466:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b468:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C0_CORE_CLK_EN;
		break;
1000b46a:	e15e      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b46c:	4ab0      	ldr	r2, [pc, #704]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b46e:	68d3      	ldr	r3, [r2, #12]
1000b470:	2120      	movs	r1, #32
1000b472:	438b      	bics	r3, r1
1000b474:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b476:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_DUALTIMER0_CLK_EN;
		break;
1000b478:	e157      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b47a:	4aad      	ldr	r2, [pc, #692]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b47c:	68d3      	ldr	r3, [r2, #12]
1000b47e:	2180      	movs	r1, #128	; 0x80
1000b480:	438b      	bics	r3, r1
1000b482:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b484:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_GPIO_CLK_EN;
		break;
1000b486:	e150      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b488:	4aa9      	ldr	r2, [pc, #676]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b48a:	68d1      	ldr	r1, [r2, #12]
1000b48c:	4ba9      	ldr	r3, [pc, #676]	; (1000b734 <system_clock_peripheral_disable+0x310>)
1000b48e:	400b      	ands	r3, r1
1000b490:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b492:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_TIMER0_CLK_EN;
		break;
1000b494:	e149      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b496:	4aa6      	ldr	r2, [pc, #664]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b498:	68d1      	ldr	r1, [r2, #12]
1000b49a:	4ba7      	ldr	r3, [pc, #668]	; (1000b738 <system_clock_peripheral_disable+0x314>)
1000b49c:	400b      	ands	r3, r1
1000b49e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4a0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT0_CLK_EN;
		break;
1000b4a2:	e142      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4a4:	4aa2      	ldr	r2, [pc, #648]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4a6:	68d1      	ldr	r1, [r2, #12]
1000b4a8:	4ba4      	ldr	r3, [pc, #656]	; (1000b73c <system_clock_peripheral_disable+0x318>)
1000b4aa:	400b      	ands	r3, r1
1000b4ac:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ae:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WDT1_CLK_EN;
		break;
1000b4b0:	e13b      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4b2:	4a9f      	ldr	r2, [pc, #636]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4b4:	68d1      	ldr	r1, [r2, #12]
1000b4b6:	4ba2      	ldr	r3, [pc, #648]	; (1000b740 <system_clock_peripheral_disable+0x31c>)
1000b4b8:	400b      	ands	r3, r1
1000b4ba:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4bc:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_CORE_CLK_EN;
		break;
1000b4be:	e134      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4c0:	4a9b      	ldr	r2, [pc, #620]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4c2:	68d1      	ldr	r1, [r2, #12]
1000b4c4:	4b9f      	ldr	r3, [pc, #636]	; (1000b744 <system_clock_peripheral_disable+0x320>)
1000b4c6:	400b      	ands	r3, r1
1000b4c8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4ca:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART0_IF_CLK_EN;
		break;
1000b4cc:	e12d      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4ce:	4a98      	ldr	r2, [pc, #608]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4d0:	68d1      	ldr	r1, [r2, #12]
1000b4d2:	4b9d      	ldr	r3, [pc, #628]	; (1000b748 <system_clock_peripheral_disable+0x324>)
1000b4d4:	400b      	ands	r3, r1
1000b4d6:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4d8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_CORE_CLK_EN;
		break;
1000b4da:	e126      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4dc:	4a94      	ldr	r2, [pc, #592]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4de:	68d1      	ldr	r1, [r2, #12]
1000b4e0:	4b9a      	ldr	r3, [pc, #616]	; (1000b74c <system_clock_peripheral_disable+0x328>)
1000b4e2:	400b      	ands	r3, r1
1000b4e4:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4e6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART1_IF_CLK_EN;
		break;
1000b4e8:	e11f      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4ea:	4a91      	ldr	r2, [pc, #580]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4ec:	68d1      	ldr	r1, [r2, #12]
1000b4ee:	4b98      	ldr	r3, [pc, #608]	; (1000b750 <system_clock_peripheral_disable+0x32c>)
1000b4f0:	400b      	ands	r3, r1
1000b4f2:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b4f4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IRQ_CTRLR_CORE_CLK_EN;
		break;
1000b4f6:	e118      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b4f8:	4a8d      	ldr	r2, [pc, #564]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b4fa:	68d1      	ldr	r1, [r2, #12]
1000b4fc:	4b95      	ldr	r3, [pc, #596]	; (1000b754 <system_clock_peripheral_disable+0x330>)
1000b4fe:	400b      	ands	r3, r1
1000b500:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b502:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_1_GL_MEM_CLK_EN;
		break;
1000b504:	e111      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b506:	4a8a      	ldr	r2, [pc, #552]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b508:	68d1      	ldr	r1, [r2, #12]
1000b50a:	4b93      	ldr	r3, [pc, #588]	; (1000b758 <system_clock_peripheral_disable+0x334>)
1000b50c:	400b      	ands	r3, r1
1000b50e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b510:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_IDRAM_2_GL_MEM_CLK_EN;
		break;
1000b512:	e10a      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b514:	4a86      	ldr	r2, [pc, #536]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b516:	68d1      	ldr	r1, [r2, #12]
1000b518:	4b90      	ldr	r3, [pc, #576]	; (1000b75c <system_clock_peripheral_disable+0x338>)
1000b51a:	400b      	ands	r3, r1
1000b51c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b51e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ROM:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ROM_MEM_CLK_EN;
		break;
1000b520:	e103      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b522:	4a83      	ldr	r2, [pc, #524]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b524:	68d1      	ldr	r1, [r2, #12]
1000b526:	4b8e      	ldr	r3, [pc, #568]	; (1000b760 <system_clock_peripheral_disable+0x33c>)
1000b528:	400b      	ands	r3, r1
1000b52a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b52c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_IF:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_XBAR_IF_CLK_EN;
		break;
1000b52e:	e0fc      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b530:	4a7f      	ldr	r2, [pc, #508]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b532:	68d1      	ldr	r1, [r2, #12]
1000b534:	4b8b      	ldr	r3, [pc, #556]	; (1000b764 <system_clock_peripheral_disable+0x340>)
1000b536:	400b      	ands	r3, r1
1000b538:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b53a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AON_WRAPPER:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_AON_WRAPPER_CLK_EN;
		break;
1000b53c:	e0f5      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b53e:	4a7c      	ldr	r2, [pc, #496]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b540:	68d1      	ldr	r1, [r2, #12]
1000b542:	4b89      	ldr	r3, [pc, #548]	; (1000b768 <system_clock_peripheral_disable+0x344>)
1000b544:	400b      	ands	r3, r1
1000b546:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b548:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLK_EN;
		break;
1000b54a:	e0ee      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b54c:	4a78      	ldr	r2, [pc, #480]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b54e:	68d1      	ldr	r1, [r2, #12]
1000b550:	4b86      	ldr	r3, [pc, #536]	; (1000b76c <system_clock_peripheral_disable+0x348>)
1000b552:	400b      	ands	r3, r1
1000b554:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b556:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_GATED_PCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_ARM_PCLKG_EN;
		break;
1000b558:	e0e7      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b55a:	4a75      	ldr	r2, [pc, #468]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b55c:	68d1      	ldr	r1, [r2, #12]
1000b55e:	4b84      	ldr	r3, [pc, #528]	; (1000b770 <system_clock_peripheral_disable+0x34c>)
1000b560:	400b      	ands	r3, r1
1000b562:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b564:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ARM_BLE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_BLE_MEM_CLK_EN;
		break;
1000b566:	e0e0      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b568:	4a71      	ldr	r2, [pc, #452]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b56a:	68d1      	ldr	r1, [r2, #12]
1000b56c:	4b81      	ldr	r3, [pc, #516]	; (1000b774 <system_clock_peripheral_disable+0x350>)
1000b56e:	400b      	ands	r3, r1
1000b570:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b572:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC0_CLK_EN;
		break;
1000b574:	e0d9      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b576:	4a6e      	ldr	r2, [pc, #440]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b578:	68d1      	ldr	r1, [r2, #12]
1000b57a:	4b7f      	ldr	r3, [pc, #508]	; (1000b778 <system_clock_peripheral_disable+0x354>)
1000b57c:	400b      	ands	r3, r1
1000b57e:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b580:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC1_CLK_EN;
		break;
1000b582:	e0d2      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b584:	4a6a      	ldr	r2, [pc, #424]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b586:	68d1      	ldr	r1, [r2, #12]
1000b588:	4b7c      	ldr	r3, [pc, #496]	; (1000b77c <system_clock_peripheral_disable+0x358>)
1000b58a:	400b      	ands	r3, r1
1000b58c:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b58e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_QUAD_DEC2_CLK_EN;
		break;
1000b590:	e0cb      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b592:	4a67      	ldr	r2, [pc, #412]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b594:	68d1      	ldr	r1, [r2, #12]
1000b596:	4b7a      	ldr	r3, [pc, #488]	; (1000b780 <system_clock_peripheral_disable+0x35c>)
1000b598:	400b      	ands	r3, r1
1000b59a:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b59c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_I2C1_CORE_CLK_EN;
		break;
1000b59e:	e0c4      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
1000b5a0:	4a63      	ldr	r2, [pc, #396]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5a2:	68d1      	ldr	r1, [r2, #12]
1000b5a4:	4b77      	ldr	r3, [pc, #476]	; (1000b784 <system_clock_peripheral_disable+0x360>)
1000b5a6:	400b      	ands	r3, r1
1000b5a8:	60d3      	str	r3, [r2, #12]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5aa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CALIB_CLK_EN;
		break;
1000b5ac:	e0bd      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5ae:	4a60      	ldr	r2, [pc, #384]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5b0:	6913      	ldr	r3, [r2, #16]
1000b5b2:	2101      	movs	r1, #1
1000b5b4:	438b      	bics	r3, r1
1000b5b6:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5b8:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE0_CLK_EN;
		break;
1000b5ba:	e0b6      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5bc:	4a5c      	ldr	r2, [pc, #368]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5be:	6913      	ldr	r3, [r2, #16]
1000b5c0:	2102      	movs	r1, #2
1000b5c2:	438b      	bics	r3, r1
1000b5c4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5c6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE1_CLK_EN;
		break;
1000b5c8:	e0af      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5ca:	4a59      	ldr	r2, [pc, #356]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5cc:	6913      	ldr	r3, [r2, #16]
1000b5ce:	2104      	movs	r1, #4
1000b5d0:	438b      	bics	r3, r1
1000b5d2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5d4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE2_CLK_EN;
		break;
1000b5d6:	e0a8      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5d8:	4a55      	ldr	r2, [pc, #340]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5da:	6913      	ldr	r3, [r2, #16]
1000b5dc:	2108      	movs	r1, #8
1000b5de:	438b      	bics	r3, r1
1000b5e0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5e2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE4:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE3_CLK_EN;
		break;
1000b5e4:	e0a1      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5e6:	4a52      	ldr	r2, [pc, #328]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5e8:	6913      	ldr	r3, [r2, #16]
1000b5ea:	2110      	movs	r1, #16
1000b5ec:	438b      	bics	r3, r1
1000b5ee:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5f0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE5:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE4_CLK_EN;
		break;
1000b5f2:	e09a      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b5f4:	4a4e      	ldr	r2, [pc, #312]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b5f6:	6913      	ldr	r3, [r2, #16]
1000b5f8:	2120      	movs	r1, #32
1000b5fa:	438b      	bics	r3, r1
1000b5fc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b5fe:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_EFUSE6:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE5_CLK_EN;
		break;
1000b600:	e093      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b602:	4a4b      	ldr	r2, [pc, #300]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b604:	6913      	ldr	r3, [r2, #16]
1000b606:	2140      	movs	r1, #64	; 0x40
1000b608:	438b      	bics	r3, r1
1000b60a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b60c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM0_CLK_EN;
		break;
1000b60e:	e08c      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b610:	4a47      	ldr	r2, [pc, #284]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b612:	6913      	ldr	r3, [r2, #16]
1000b614:	2180      	movs	r1, #128	; 0x80
1000b616:	438b      	bics	r3, r1
1000b618:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b61a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM1_CLK_EN;
		break;
1000b61c:	e085      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b61e:	4a44      	ldr	r2, [pc, #272]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b620:	6911      	ldr	r1, [r2, #16]
1000b622:	4b44      	ldr	r3, [pc, #272]	; (1000b734 <system_clock_peripheral_disable+0x310>)
1000b624:	400b      	ands	r3, r1
1000b626:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b628:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM2_CLK_EN;
		break;
1000b62a:	e07e      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b62c:	4a40      	ldr	r2, [pc, #256]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b62e:	6911      	ldr	r1, [r2, #16]
1000b630:	4b55      	ldr	r3, [pc, #340]	; (1000b788 <system_clock_peripheral_disable+0x364>)
1000b632:	400b      	ands	r3, r1
1000b634:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b636:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_PWM3_CLK_EN;
		break;
1000b638:	e077      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b63a:	4a3d      	ldr	r2, [pc, #244]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b63c:	6911      	ldr	r1, [r2, #16]
1000b63e:	4b53      	ldr	r3, [pc, #332]	; (1000b78c <system_clock_peripheral_disable+0x368>)
1000b640:	400b      	ands	r3, r1
1000b642:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b644:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_ADC:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SENS_ADC_CLK_EN;
		break;
1000b646:	e070      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b648:	4a39      	ldr	r2, [pc, #228]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b64a:	6911      	ldr	r1, [r2, #16]
1000b64c:	4b3a      	ldr	r3, [pc, #232]	; (1000b738 <system_clock_peripheral_disable+0x314>)
1000b64e:	400b      	ands	r3, r1
1000b650:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b652:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN;
		break;
1000b654:	e069      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b656:	4a36      	ldr	r2, [pc, #216]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b658:	6911      	ldr	r1, [r2, #16]
1000b65a:	4b38      	ldr	r3, [pc, #224]	; (1000b73c <system_clock_peripheral_disable+0x318>)
1000b65c:	400b      	ands	r3, r1
1000b65e:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b660:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN;
		break;
1000b662:	e062      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b664:	4a32      	ldr	r2, [pc, #200]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b666:	6911      	ldr	r1, [r2, #16]
1000b668:	4b35      	ldr	r3, [pc, #212]	; (1000b740 <system_clock_peripheral_disable+0x31c>)
1000b66a:	400b      	ands	r3, r1
1000b66c:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b66e:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_GPIO_GCLK:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_GPIO_GCLK_EN;
		break;
1000b670:	e05b      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b672:	4a2f      	ldr	r2, [pc, #188]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b674:	6911      	ldr	r1, [r2, #16]
1000b676:	4b33      	ldr	r3, [pc, #204]	; (1000b744 <system_clock_peripheral_disable+0x320>)
1000b678:	400b      	ands	r3, r1
1000b67a:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b67c:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_TIMER0_GATE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_TIMER0_PGCLK_EN;
		break;
1000b67e:	e054      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b680:	4a2b      	ldr	r2, [pc, #172]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b682:	6911      	ldr	r1, [r2, #16]
1000b684:	4b30      	ldr	r3, [pc, #192]	; (1000b748 <system_clock_peripheral_disable+0x324>)
1000b686:	400b      	ands	r3, r1
1000b688:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b68a:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_CORE_CLK_EN;
		break;
1000b68c:	e04d      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b68e:	4a28      	ldr	r2, [pc, #160]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b690:	6911      	ldr	r1, [r2, #16]
1000b692:	4b2e      	ldr	r3, [pc, #184]	; (1000b74c <system_clock_peripheral_disable+0x328>)
1000b694:	400b      	ands	r3, r1
1000b696:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b698:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SHA_AHB_CLK_EN;
		break;
1000b69a:	e046      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b69c:	4a24      	ldr	r2, [pc, #144]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b69e:	6911      	ldr	r1, [r2, #16]
1000b6a0:	4b2b      	ldr	r3, [pc, #172]	; (1000b750 <system_clock_peripheral_disable+0x32c>)
1000b6a2:	400b      	ands	r3, r1
1000b6a4:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6a6:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_CORE_CLK_EN;
		break;
1000b6a8:	e03f      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6aa:	4a21      	ldr	r2, [pc, #132]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6ac:	6911      	ldr	r1, [r2, #16]
1000b6ae:	4b29      	ldr	r3, [pc, #164]	; (1000b754 <system_clock_peripheral_disable+0x330>)
1000b6b0:	400b      	ands	r3, r1
1000b6b2:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6b4:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_AES_AHB_CLK_EN;
		break;
1000b6b6:	e038      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6b8:	4a1d      	ldr	r2, [pc, #116]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6ba:	6911      	ldr	r1, [r2, #16]
1000b6bc:	4b26      	ldr	r3, [pc, #152]	; (1000b758 <system_clock_peripheral_disable+0x334>)
1000b6be:	400b      	ands	r3, r1
1000b6c0:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6c2:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_0_MEM_CLK_EN;
		break;
1000b6c4:	e031      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6c6:	4a1a      	ldr	r2, [pc, #104]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6c8:	6911      	ldr	r1, [r2, #16]
1000b6ca:	4b24      	ldr	r3, [pc, #144]	; (1000b75c <system_clock_peripheral_disable+0x338>)
1000b6cc:	400b      	ands	r3, r1
1000b6ce:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6d0:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_1_MEM_CLK_EN;
		break;
1000b6d2:	e02a      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6d4:	4a16      	ldr	r2, [pc, #88]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6d6:	6911      	ldr	r1, [r2, #16]
1000b6d8:	4b21      	ldr	r3, [pc, #132]	; (1000b760 <system_clock_peripheral_disable+0x33c>)
1000b6da:	400b      	ands	r3, r1
1000b6dc:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6de:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM1_2:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_1_2_MEM_CLK_EN;
		break;
1000b6e0:	e023      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6e2:	4a13      	ldr	r2, [pc, #76]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6e4:	6911      	ldr	r1, [r2, #16]
1000b6e6:	4b1f      	ldr	r3, [pc, #124]	; (1000b764 <system_clock_peripheral_disable+0x340>)
1000b6e8:	400b      	ands	r3, r1
1000b6ea:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6ec:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_0:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_0_MEM_CLK_EN;
		break;
1000b6ee:	e01c      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
1000b6f0:	4a0f      	ldr	r2, [pc, #60]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b6f2:	6911      	ldr	r1, [r2, #16]
1000b6f4:	4b1c      	ldr	r3, [pc, #112]	; (1000b768 <system_clock_peripheral_disable+0x344>)
1000b6f6:	400b      	ands	r3, r1
1000b6f8:	6113      	str	r3, [r2, #16]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b6fa:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_IDRAM2_1:
			LPMCU_MISC_REGS0->LPMCU_CLOCK_ENABLES_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_CLOCK_ENABLES_1_IDRAM_2_1_MEM_CLK_EN;
		break;
1000b6fc:	e015      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b6fe:	4a0c      	ldr	r2, [pc, #48]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b700:	7d13      	ldrb	r3, [r2, #20]
1000b702:	2101      	movs	r1, #1
1000b704:	438b      	bics	r3, r1
1000b706:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b708:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_RXTX:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_RXTX_SEQ_CLK_EN;
		break;
1000b70a:	e00e      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b70c:	4a08      	ldr	r2, [pc, #32]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b70e:	7d13      	ldrb	r3, [r2, #20]
1000b710:	2102      	movs	r1, #2
1000b712:	438b      	bics	r3, r1
1000b714:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b716:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_AHB:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_AHB_CLK_EN;
		break;
1000b718:	e007      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
1000b71a:	4a05      	ldr	r2, [pc, #20]	; (1000b730 <system_clock_peripheral_disable+0x30c>)
1000b71c:	7d13      	ldrb	r3, [r2, #20]
1000b71e:	2104      	movs	r1, #4
1000b720:	438b      	bics	r3, r1
1000b722:	7513      	strb	r3, [r2, #20]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b724:	2000      	movs	r0, #0
		break;

		case PERIPHERAL_BLE_PERIPH_REGS:
			LPMCU_MISC_REGS0->BTMCU_CTRL.reg &= \
				~LPMCU_MISC_REGS_BTMCU_CTRL_PERIPH_REGS_CLK_EN;
		break;
1000b726:	e000      	b.n	1000b72a <system_clock_peripheral_disable+0x306>

		default:
			return STATUS_ERR_INVALID_ARG;
1000b728:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000b72a:	bd00      	pop	{pc}
1000b72c:	10016bc4 	.word	0x10016bc4
1000b730:	4000b000 	.word	0x4000b000
1000b734:	fffffeff 	.word	0xfffffeff
1000b738:	fffff7ff 	.word	0xfffff7ff
1000b73c:	ffffefff 	.word	0xffffefff
1000b740:	ffffdfff 	.word	0xffffdfff
1000b744:	ffffbfff 	.word	0xffffbfff
1000b748:	ffff7fff 	.word	0xffff7fff
1000b74c:	fffeffff 	.word	0xfffeffff
1000b750:	fffdffff 	.word	0xfffdffff
1000b754:	fffbffff 	.word	0xfffbffff
1000b758:	fff7ffff 	.word	0xfff7ffff
1000b75c:	ffefffff 	.word	0xffefffff
1000b760:	ffdfffff 	.word	0xffdfffff
1000b764:	ffbfffff 	.word	0xffbfffff
1000b768:	ff7fffff 	.word	0xff7fffff
1000b76c:	feffffff 	.word	0xfeffffff
1000b770:	fdffffff 	.word	0xfdffffff
1000b774:	fbffffff 	.word	0xfbffffff
1000b778:	f7ffffff 	.word	0xf7ffffff
1000b77c:	efffffff 	.word	0xefffffff
1000b780:	dfffffff 	.word	0xdfffffff
1000b784:	bfffffff 	.word	0xbfffffff
1000b788:	fffffdff 	.word	0xfffffdff
1000b78c:	fffffbff 	.word	0xfffffbff

1000b790 <system_peripheral_reset>:
 * \return Status of operation.
 * \retval STATUS_OK               Clock config correctly
 * \retval STATUS_ERR_INVALID_ARG  If data is invalid
 */
enum status_code system_peripheral_reset(enum system_peripheral peripheral)
{
1000b790:	b500      	push	{lr}
	switch (peripheral) {
1000b792:	2843      	cmp	r0, #67	; 0x43
1000b794:	d900      	bls.n	1000b798 <system_peripheral_reset+0x8>
1000b796:	e223      	b.n	1000bbe0 <system_peripheral_reset+0x450>
1000b798:	0080      	lsls	r0, r0, #2
1000b79a:	4be0      	ldr	r3, [pc, #896]	; (1000bb1c <system_peripheral_reset+0x38c>)
1000b79c:	581b      	ldr	r3, [r3, r0]
1000b79e:	469f      	mov	pc, r3
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7a0:	4bdf      	ldr	r3, [pc, #892]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b7a2:	6859      	ldr	r1, [r3, #4]
1000b7a4:	2202      	movs	r2, #2
1000b7a6:	4391      	bics	r1, r2
1000b7a8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7aa:	6859      	ldr	r1, [r3, #4]
1000b7ac:	430a      	orrs	r2, r1
1000b7ae:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7b0:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_CPU:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CPU_RSTN;
		break;
1000b7b2:	e216      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7b4:	4bda      	ldr	r3, [pc, #872]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b7b6:	6859      	ldr	r1, [r3, #4]
1000b7b8:	2204      	movs	r2, #4
1000b7ba:	4391      	bics	r1, r2
1000b7bc:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7be:	6859      	ldr	r1, [r3, #4]
1000b7c0:	430a      	orrs	r2, r1
1000b7c2:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7c4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_SYS_RSTN;
		break;
1000b7c6:	e20c      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7c8:	4bd5      	ldr	r3, [pc, #852]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b7ca:	6859      	ldr	r1, [r3, #4]
1000b7cc:	2208      	movs	r2, #8
1000b7ce:	4391      	bics	r1, r2
1000b7d0:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7d2:	6859      	ldr	r1, [r3, #4]
1000b7d4:	430a      	orrs	r2, r1
1000b7d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7d8:	2000      	movs	r0, #0
		case PERIPHERAL_SPI_FLASH_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI_FLASH0_RSTN;
		break;
1000b7da:	e202      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7dc:	4bd0      	ldr	r3, [pc, #832]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b7de:	6859      	ldr	r1, [r3, #4]
1000b7e0:	2210      	movs	r2, #16
1000b7e2:	4391      	bics	r1, r2
1000b7e4:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7e6:	6859      	ldr	r1, [r3, #4]
1000b7e8:	430a      	orrs	r2, r1
1000b7ea:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b7ec:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_CORE_RSTN;
		break;
1000b7ee:	e1f8      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b7f0:	4bcb      	ldr	r3, [pc, #812]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b7f2:	6859      	ldr	r1, [r3, #4]
1000b7f4:	2220      	movs	r2, #32
1000b7f6:	4391      	bics	r1, r2
1000b7f8:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b7fa:	6859      	ldr	r1, [r3, #4]
1000b7fc:	430a      	orrs	r2, r1
1000b7fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b800:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI0_IF_RSTN;
		break;
1000b802:	e1ee      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b804:	4bc6      	ldr	r3, [pc, #792]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b806:	6859      	ldr	r1, [r3, #4]
1000b808:	2240      	movs	r2, #64	; 0x40
1000b80a:	4391      	bics	r1, r2
1000b80c:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b80e:	6859      	ldr	r1, [r3, #4]
1000b810:	430a      	orrs	r2, r1
1000b812:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b814:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_CORE_RESETN;
		break;
1000b816:	e1e4      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b818:	4bc1      	ldr	r3, [pc, #772]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b81a:	6859      	ldr	r1, [r3, #4]
1000b81c:	2280      	movs	r2, #128	; 0x80
1000b81e:	4391      	bics	r1, r2
1000b820:	6059      	str	r1, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b822:	6859      	ldr	r1, [r3, #4]
1000b824:	430a      	orrs	r2, r1
1000b826:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b828:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_SPI1_IF_RSTN;
		break;
1000b82a:	e1da      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b82c:	4bbc      	ldr	r3, [pc, #752]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b82e:	6859      	ldr	r1, [r3, #4]
1000b830:	4abc      	ldr	r2, [pc, #752]	; (1000bb24 <system_peripheral_reset+0x394>)
1000b832:	400a      	ands	r2, r1
1000b834:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b836:	685a      	ldr	r2, [r3, #4]
1000b838:	2180      	movs	r1, #128	; 0x80
1000b83a:	0049      	lsls	r1, r1, #1
1000b83c:	430a      	orrs	r2, r1
1000b83e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b840:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_CORE_RSTN;
		break;
1000b842:	e1ce      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b844:	4bb6      	ldr	r3, [pc, #728]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b846:	6859      	ldr	r1, [r3, #4]
1000b848:	4ab7      	ldr	r2, [pc, #732]	; (1000bb28 <system_peripheral_reset+0x398>)
1000b84a:	400a      	ands	r2, r1
1000b84c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b84e:	685a      	ldr	r2, [r3, #4]
1000b850:	2180      	movs	r1, #128	; 0x80
1000b852:	0089      	lsls	r1, r1, #2
1000b854:	430a      	orrs	r2, r1
1000b856:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b858:	2000      	movs	r0, #0
		case PERIPHERAL_I2C0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_I2C0_IF_RSTN;
		break;
1000b85a:	e1c2      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b85c:	4bb0      	ldr	r3, [pc, #704]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b85e:	6859      	ldr	r1, [r3, #4]
1000b860:	4ab2      	ldr	r2, [pc, #712]	; (1000bb2c <system_peripheral_reset+0x39c>)
1000b862:	400a      	ands	r2, r1
1000b864:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b866:	685a      	ldr	r2, [r3, #4]
1000b868:	2180      	movs	r1, #128	; 0x80
1000b86a:	00c9      	lsls	r1, r1, #3
1000b86c:	430a      	orrs	r2, r1
1000b86e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b870:	2000      	movs	r0, #0
		case PERIPHERAL_GPIO_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_GPIO_RSTN;
		break;
1000b872:	e1b6      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b874:	4baa      	ldr	r3, [pc, #680]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b876:	6859      	ldr	r1, [r3, #4]
1000b878:	4aad      	ldr	r2, [pc, #692]	; (1000bb30 <system_peripheral_reset+0x3a0>)
1000b87a:	400a      	ands	r2, r1
1000b87c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b87e:	685a      	ldr	r2, [r3, #4]
1000b880:	2180      	movs	r1, #128	; 0x80
1000b882:	0109      	lsls	r1, r1, #4
1000b884:	430a      	orrs	r2, r1
1000b886:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b888:	2000      	movs	r0, #0
		case PERIPHERAL_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_TIMER0_RSTN;
		break;
1000b88a:	e1aa      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b88c:	4ba4      	ldr	r3, [pc, #656]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b88e:	6859      	ldr	r1, [r3, #4]
1000b890:	4aa8      	ldr	r2, [pc, #672]	; (1000bb34 <system_peripheral_reset+0x3a4>)
1000b892:	400a      	ands	r2, r1
1000b894:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b896:	685a      	ldr	r2, [r3, #4]
1000b898:	2180      	movs	r1, #128	; 0x80
1000b89a:	0149      	lsls	r1, r1, #5
1000b89c:	430a      	orrs	r2, r1
1000b89e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8a0:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_CORE_RSTN;
		break;
1000b8a2:	e19e      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8a4:	4b9e      	ldr	r3, [pc, #632]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b8a6:	6859      	ldr	r1, [r3, #4]
1000b8a8:	4aa3      	ldr	r2, [pc, #652]	; (1000bb38 <system_peripheral_reset+0x3a8>)
1000b8aa:	400a      	ands	r2, r1
1000b8ac:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8ae:	685a      	ldr	r2, [r3, #4]
1000b8b0:	2180      	movs	r1, #128	; 0x80
1000b8b2:	0189      	lsls	r1, r1, #6
1000b8b4:	430a      	orrs	r2, r1
1000b8b6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8b8:	2000      	movs	r0, #0
		case PERIPHERAL_UART0_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART0_IF_RSTN;
		break;
1000b8ba:	e192      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8bc:	4b98      	ldr	r3, [pc, #608]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b8be:	6859      	ldr	r1, [r3, #4]
1000b8c0:	4a9e      	ldr	r2, [pc, #632]	; (1000bb3c <system_peripheral_reset+0x3ac>)
1000b8c2:	400a      	ands	r2, r1
1000b8c4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8c6:	685a      	ldr	r2, [r3, #4]
1000b8c8:	2180      	movs	r1, #128	; 0x80
1000b8ca:	01c9      	lsls	r1, r1, #7
1000b8cc:	430a      	orrs	r2, r1
1000b8ce:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8d0:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_CORE_RSTN;
		break;
1000b8d2:	e186      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8d4:	4b92      	ldr	r3, [pc, #584]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b8d6:	6859      	ldr	r1, [r3, #4]
1000b8d8:	4a99      	ldr	r2, [pc, #612]	; (1000bb40 <system_peripheral_reset+0x3b0>)
1000b8da:	400a      	ands	r2, r1
1000b8dc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8de:	685a      	ldr	r2, [r3, #4]
1000b8e0:	2180      	movs	r1, #128	; 0x80
1000b8e2:	0209      	lsls	r1, r1, #8
1000b8e4:	430a      	orrs	r2, r1
1000b8e6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b8e8:	2000      	movs	r0, #0
		case PERIPHERAL_UART1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_UART1_IF_RSTN;
		break;
1000b8ea:	e17a      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b8ec:	4b8c      	ldr	r3, [pc, #560]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b8ee:	6859      	ldr	r1, [r3, #4]
1000b8f0:	4a94      	ldr	r2, [pc, #592]	; (1000bb44 <system_peripheral_reset+0x3b4>)
1000b8f2:	400a      	ands	r2, r1
1000b8f4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b8f6:	685a      	ldr	r2, [r3, #4]
1000b8f8:	2180      	movs	r1, #128	; 0x80
1000b8fa:	0249      	lsls	r1, r1, #9
1000b8fc:	430a      	orrs	r2, r1
1000b8fe:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b900:	2000      	movs	r0, #0
		case PERIPHERAL_WDT0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT0_RSTN;
		break;
1000b902:	e16e      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b904:	4b86      	ldr	r3, [pc, #536]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b906:	6859      	ldr	r1, [r3, #4]
1000b908:	4a8f      	ldr	r2, [pc, #572]	; (1000bb48 <system_peripheral_reset+0x3b8>)
1000b90a:	400a      	ands	r2, r1
1000b90c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b90e:	685a      	ldr	r2, [r3, #4]
1000b910:	2180      	movs	r1, #128	; 0x80
1000b912:	0289      	lsls	r1, r1, #10
1000b914:	430a      	orrs	r2, r1
1000b916:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b918:	2000      	movs	r0, #0
		case PERIPHERAL_WDT1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_WDT1_RSTN;
		break;
1000b91a:	e162      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b91c:	4b80      	ldr	r3, [pc, #512]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b91e:	6859      	ldr	r1, [r3, #4]
1000b920:	4a8a      	ldr	r2, [pc, #552]	; (1000bb4c <system_peripheral_reset+0x3bc>)
1000b922:	400a      	ands	r2, r1
1000b924:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b926:	685a      	ldr	r2, [r3, #4]
1000b928:	2180      	movs	r1, #128	; 0x80
1000b92a:	02c9      	lsls	r1, r1, #11
1000b92c:	430a      	orrs	r2, r1
1000b92e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b930:	2000      	movs	r0, #0
		case PERIPHERAL_NVIC:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_IRQ_CTRLR_CORE_RSTN;
		break;
1000b932:	e156      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b934:	4b7a      	ldr	r3, [pc, #488]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b936:	6859      	ldr	r1, [r3, #4]
1000b938:	4a85      	ldr	r2, [pc, #532]	; (1000bb50 <system_peripheral_reset+0x3c0>)
1000b93a:	400a      	ands	r2, r1
1000b93c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b93e:	685a      	ldr	r2, [r3, #4]
1000b940:	2180      	movs	r1, #128	; 0x80
1000b942:	0309      	lsls	r1, r1, #12
1000b944:	430a      	orrs	r2, r1
1000b946:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b948:	2000      	movs	r0, #0
		case PERIPHERAL_MBIST:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_MBIST_RSTN;
		break;
1000b94a:	e14a      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b94c:	4b74      	ldr	r3, [pc, #464]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b94e:	6859      	ldr	r1, [r3, #4]
1000b950:	4a80      	ldr	r2, [pc, #512]	; (1000bb54 <system_peripheral_reset+0x3c4>)
1000b952:	400a      	ands	r2, r1
1000b954:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b956:	685a      	ldr	r2, [r3, #4]
1000b958:	2180      	movs	r1, #128	; 0x80
1000b95a:	0349      	lsls	r1, r1, #13
1000b95c:	430a      	orrs	r2, r1
1000b95e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b960:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_RSTN;
		break;
1000b962:	e13e      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b964:	4b6e      	ldr	r3, [pc, #440]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b966:	6859      	ldr	r1, [r3, #4]
1000b968:	4a7b      	ldr	r2, [pc, #492]	; (1000bb58 <system_peripheral_reset+0x3c8>)
1000b96a:	400a      	ands	r2, r1
1000b96c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b96e:	685a      	ldr	r2, [r3, #4]
1000b970:	2180      	movs	r1, #128	; 0x80
1000b972:	0389      	lsls	r1, r1, #14
1000b974:	430a      	orrs	r2, r1
1000b976:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b978:	2000      	movs	r0, #0
		case PERIPHERAL_LOW_POWER_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_CALIB_XBAR_IF_RSTN;
		break;
1000b97a:	e132      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b97c:	4b68      	ldr	r3, [pc, #416]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b97e:	6859      	ldr	r1, [r3, #4]
1000b980:	4a76      	ldr	r2, [pc, #472]	; (1000bb5c <system_peripheral_reset+0x3cc>)
1000b982:	400a      	ands	r2, r1
1000b984:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b986:	685a      	ldr	r2, [r3, #4]
1000b988:	2180      	movs	r1, #128	; 0x80
1000b98a:	03c9      	lsls	r1, r1, #15
1000b98c:	430a      	orrs	r2, r1
1000b98e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b990:	2000      	movs	r0, #0
		case PERIPHERAL_LPMCU_DEBUG:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_DBUG_RSTN;
		break;
1000b992:	e126      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b994:	4b62      	ldr	r3, [pc, #392]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b996:	6859      	ldr	r1, [r3, #4]
1000b998:	4a71      	ldr	r2, [pc, #452]	; (1000bb60 <system_peripheral_reset+0x3d0>)
1000b99a:	400a      	ands	r2, r1
1000b99c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b99e:	685a      	ldr	r2, [r3, #4]
1000b9a0:	2180      	movs	r1, #128	; 0x80
1000b9a2:	0409      	lsls	r1, r1, #16
1000b9a4:	430a      	orrs	r2, r1
1000b9a6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9a8:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_FREE_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_FREE_CLK_RSTN;
		break;
1000b9aa:	e11a      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9ac:	4b5c      	ldr	r3, [pc, #368]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b9ae:	6859      	ldr	r1, [r3, #4]
1000b9b0:	4a6c      	ldr	r2, [pc, #432]	; (1000bb64 <system_peripheral_reset+0x3d4>)
1000b9b2:	400a      	ands	r2, r1
1000b9b4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9b6:	685a      	ldr	r2, [r3, #4]
1000b9b8:	2180      	movs	r1, #128	; 0x80
1000b9ba:	0449      	lsls	r1, r1, #17
1000b9bc:	430a      	orrs	r2, r1
1000b9be:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9c0:	2000      	movs	r0, #0
		case PERIPHERAL_ARM_APB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_ARM_PRESETN_RSTN;
		break;
1000b9c2:	e10e      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9c4:	4b56      	ldr	r3, [pc, #344]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b9c6:	6859      	ldr	r1, [r3, #4]
1000b9c8:	4a67      	ldr	r2, [pc, #412]	; (1000bb68 <system_peripheral_reset+0x3d8>)
1000b9ca:	400a      	ands	r2, r1
1000b9cc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9ce:	685a      	ldr	r2, [r3, #4]
1000b9d0:	2180      	movs	r1, #128	; 0x80
1000b9d2:	0489      	lsls	r1, r1, #18
1000b9d4:	430a      	orrs	r2, r1
1000b9d6:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9d8:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC0_RSTN;
		break;
1000b9da:	e102      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9dc:	4b50      	ldr	r3, [pc, #320]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b9de:	6859      	ldr	r1, [r3, #4]
1000b9e0:	4a62      	ldr	r2, [pc, #392]	; (1000bb6c <system_peripheral_reset+0x3dc>)
1000b9e2:	400a      	ands	r2, r1
1000b9e4:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9e6:	685a      	ldr	r2, [r3, #4]
1000b9e8:	2180      	movs	r1, #128	; 0x80
1000b9ea:	04c9      	lsls	r1, r1, #19
1000b9ec:	430a      	orrs	r2, r1
1000b9ee:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000b9f0:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC1_RSTN;
		break;
1000b9f2:	e0f6      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000b9f4:	4b4a      	ldr	r3, [pc, #296]	; (1000bb20 <system_peripheral_reset+0x390>)
1000b9f6:	6859      	ldr	r1, [r3, #4]
1000b9f8:	4a5d      	ldr	r2, [pc, #372]	; (1000bb70 <system_peripheral_reset+0x3e0>)
1000b9fa:	400a      	ands	r2, r1
1000b9fc:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000b9fe:	685a      	ldr	r2, [r3, #4]
1000ba00:	2180      	movs	r1, #128	; 0x80
1000ba02:	0509      	lsls	r1, r1, #20
1000ba04:	430a      	orrs	r2, r1
1000ba06:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba08:	2000      	movs	r0, #0
		case PERIPHERAL_QDEC2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_QUAD_DEC2_RSTN;
		break;
1000ba0a:	e0ea      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba0c:	4b44      	ldr	r3, [pc, #272]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba0e:	6859      	ldr	r1, [r3, #4]
1000ba10:	4a58      	ldr	r2, [pc, #352]	; (1000bb74 <system_peripheral_reset+0x3e4>)
1000ba12:	400a      	ands	r2, r1
1000ba14:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba16:	685a      	ldr	r2, [r3, #4]
1000ba18:	2180      	movs	r1, #128	; 0x80
1000ba1a:	0549      	lsls	r1, r1, #21
1000ba1c:	430a      	orrs	r2, r1
1000ba1e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba20:	2000      	movs	r0, #0
		case PERIPHERAL_PWM0:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM0_RSTN;
		break;
1000ba22:	e0de      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba24:	4b3e      	ldr	r3, [pc, #248]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba26:	6859      	ldr	r1, [r3, #4]
1000ba28:	4a53      	ldr	r2, [pc, #332]	; (1000bb78 <system_peripheral_reset+0x3e8>)
1000ba2a:	400a      	ands	r2, r1
1000ba2c:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba2e:	685a      	ldr	r2, [r3, #4]
1000ba30:	2180      	movs	r1, #128	; 0x80
1000ba32:	0589      	lsls	r1, r1, #22
1000ba34:	430a      	orrs	r2, r1
1000ba36:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba38:	2000      	movs	r0, #0
		case PERIPHERAL_PWM1:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM1_RSTN;
		break;
1000ba3a:	e0d2      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba3c:	4b38      	ldr	r3, [pc, #224]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba3e:	6859      	ldr	r1, [r3, #4]
1000ba40:	4a4e      	ldr	r2, [pc, #312]	; (1000bb7c <system_peripheral_reset+0x3ec>)
1000ba42:	400a      	ands	r2, r1
1000ba44:	605a      	str	r2, [r3, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba46:	685a      	ldr	r2, [r3, #4]
1000ba48:	2180      	movs	r1, #128	; 0x80
1000ba4a:	05c9      	lsls	r1, r1, #23
1000ba4c:	430a      	orrs	r2, r1
1000ba4e:	605a      	str	r2, [r3, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba50:	2000      	movs	r0, #0
		case PERIPHERAL_PWM2:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM2_RSTN;
		break;
1000ba52:	e0c6      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
1000ba54:	4a32      	ldr	r2, [pc, #200]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba56:	6853      	ldr	r3, [r2, #4]
1000ba58:	005b      	lsls	r3, r3, #1
1000ba5a:	085b      	lsrs	r3, r3, #1
1000ba5c:	6053      	str	r3, [r2, #4]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
1000ba5e:	6853      	ldr	r3, [r2, #4]
1000ba60:	2180      	movs	r1, #128	; 0x80
1000ba62:	0609      	lsls	r1, r1, #24
1000ba64:	430b      	orrs	r3, r1
1000ba66:	6053      	str	r3, [r2, #4]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba68:	2000      	movs	r0, #0
		case PERIPHERAL_PWM3:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_0.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_0_PWM3_RSTN;
		break;
1000ba6a:	e0ba      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba6c:	4b2c      	ldr	r3, [pc, #176]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba6e:	891a      	ldrh	r2, [r3, #8]
1000ba70:	2101      	movs	r1, #1
1000ba72:	438a      	bics	r2, r1
1000ba74:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba76:	8919      	ldrh	r1, [r3, #8]
1000ba78:	2201      	movs	r2, #1
1000ba7a:	430a      	orrs	r2, r1
1000ba7c:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba7e:	2000      	movs	r0, #0
		case PERIPHERAL_DUALT_TIMER:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_DUALTIMER0_RSTN;
		break;
1000ba80:	e0af      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba82:	4b27      	ldr	r3, [pc, #156]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba84:	891a      	ldrh	r2, [r3, #8]
1000ba86:	2102      	movs	r1, #2
1000ba88:	438a      	bics	r2, r1
1000ba8a:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000ba8c:	8919      	ldrh	r1, [r3, #8]
1000ba8e:	2202      	movs	r2, #2
1000ba90:	430a      	orrs	r2, r1
1000ba92:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000ba94:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_CORE_RSTN;
		break;
1000ba96:	e0a4      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000ba98:	4b21      	ldr	r3, [pc, #132]	; (1000bb20 <system_peripheral_reset+0x390>)
1000ba9a:	891a      	ldrh	r2, [r3, #8]
1000ba9c:	2104      	movs	r1, #4
1000ba9e:	438a      	bics	r2, r1
1000baa0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000baa2:	8919      	ldrh	r1, [r3, #8]
1000baa4:	2204      	movs	r2, #4
1000baa6:	430a      	orrs	r2, r1
1000baa8:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baaa:	2000      	movs	r0, #0
		case PERIPHERAL_I2C1_IF:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_I2C1_IF_RSTN;
		break;
1000baac:	e099      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000baae:	4b1c      	ldr	r3, [pc, #112]	; (1000bb20 <system_peripheral_reset+0x390>)
1000bab0:	891a      	ldrh	r2, [r3, #8]
1000bab2:	2108      	movs	r1, #8
1000bab4:	438a      	bics	r2, r1
1000bab6:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bab8:	8919      	ldrh	r1, [r3, #8]
1000baba:	2208      	movs	r2, #8
1000babc:	430a      	orrs	r2, r1
1000babe:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bac0:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_CORE_RSTN;
		break;
1000bac2:	e08e      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bac4:	4b16      	ldr	r3, [pc, #88]	; (1000bb20 <system_peripheral_reset+0x390>)
1000bac6:	891a      	ldrh	r2, [r3, #8]
1000bac8:	2110      	movs	r1, #16
1000baca:	438a      	bics	r2, r1
1000bacc:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bace:	8919      	ldrh	r1, [r3, #8]
1000bad0:	2210      	movs	r2, #16
1000bad2:	430a      	orrs	r2, r1
1000bad4:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bad6:	2000      	movs	r0, #0
		case PERIPHERAL_SHA_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_SHA_AHB_RSTN;
		break;
1000bad8:	e083      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bada:	4b11      	ldr	r3, [pc, #68]	; (1000bb20 <system_peripheral_reset+0x390>)
1000badc:	891a      	ldrh	r2, [r3, #8]
1000bade:	2120      	movs	r1, #32
1000bae0:	438a      	bics	r2, r1
1000bae2:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bae4:	8919      	ldrh	r1, [r3, #8]
1000bae6:	2220      	movs	r2, #32
1000bae8:	430a      	orrs	r2, r1
1000baea:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000baec:	2000      	movs	r0, #0
		case PERIPHERAL_AES_CORE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_CORE_RSTN;
		break;
1000baee:	e078      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000baf0:	4b0b      	ldr	r3, [pc, #44]	; (1000bb20 <system_peripheral_reset+0x390>)
1000baf2:	891a      	ldrh	r2, [r3, #8]
1000baf4:	2140      	movs	r1, #64	; 0x40
1000baf6:	438a      	bics	r2, r1
1000baf8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bafa:	8919      	ldrh	r1, [r3, #8]
1000bafc:	2240      	movs	r2, #64	; 0x40
1000bafe:	430a      	orrs	r2, r1
1000bb00:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb02:	2000      	movs	r0, #0
		case PERIPHERAL_AES_AHB:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SECURITY_AES_AHB_RSTN;
		break;
1000bb04:	e06d      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb06:	4b06      	ldr	r3, [pc, #24]	; (1000bb20 <system_peripheral_reset+0x390>)
1000bb08:	891a      	ldrh	r2, [r3, #8]
1000bb0a:	2180      	movs	r1, #128	; 0x80
1000bb0c:	438a      	bics	r2, r1
1000bb0e:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb10:	8919      	ldrh	r1, [r3, #8]
1000bb12:	2280      	movs	r2, #128	; 0x80
1000bb14:	430a      	orrs	r2, r1
1000bb16:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb18:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_CLK_RSTN;
		break;
1000bb1a:	e062      	b.n	1000bbe2 <system_peripheral_reset+0x452>
1000bb1c:	10016c9c 	.word	0x10016c9c
1000bb20:	4000b000 	.word	0x4000b000
1000bb24:	fffffeff 	.word	0xfffffeff
1000bb28:	fffffdff 	.word	0xfffffdff
1000bb2c:	fffffbff 	.word	0xfffffbff
1000bb30:	fffff7ff 	.word	0xfffff7ff
1000bb34:	ffffefff 	.word	0xffffefff
1000bb38:	ffffdfff 	.word	0xffffdfff
1000bb3c:	ffffbfff 	.word	0xffffbfff
1000bb40:	ffff7fff 	.word	0xffff7fff
1000bb44:	fffeffff 	.word	0xfffeffff
1000bb48:	fffdffff 	.word	0xfffdffff
1000bb4c:	fffbffff 	.word	0xfffbffff
1000bb50:	fff7ffff 	.word	0xfff7ffff
1000bb54:	ffefffff 	.word	0xffefffff
1000bb58:	ffdfffff 	.word	0xffdfffff
1000bb5c:	ffbfffff 	.word	0xffbfffff
1000bb60:	ff7fffff 	.word	0xff7fffff
1000bb64:	feffffff 	.word	0xfeffffff
1000bb68:	fdffffff 	.word	0xfdffffff
1000bb6c:	fbffffff 	.word	0xfbffffff
1000bb70:	f7ffffff 	.word	0xf7ffffff
1000bb74:	efffffff 	.word	0xefffffff
1000bb78:	dfffffff 	.word	0xdfffffff
1000bb7c:	bfffffff 	.word	0xbfffffff

		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb80:	4b18      	ldr	r3, [pc, #96]	; (1000bbe4 <system_peripheral_reset+0x454>)
1000bb82:	8919      	ldrh	r1, [r3, #8]
1000bb84:	4a18      	ldr	r2, [pc, #96]	; (1000bbe8 <system_peripheral_reset+0x458>)
1000bb86:	400a      	ands	r2, r1
1000bb88:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bb8a:	8919      	ldrh	r1, [r3, #8]
1000bb8c:	2280      	movs	r2, #128	; 0x80
1000bb8e:	0052      	lsls	r2, r2, #1
1000bb90:	430a      	orrs	r2, r1
1000bb92:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bb94:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_CLK:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_CLK_RSTN;
		break;
1000bb96:	e024      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bb98:	4b12      	ldr	r3, [pc, #72]	; (1000bbe4 <system_peripheral_reset+0x454>)
1000bb9a:	8919      	ldrh	r1, [r3, #8]
1000bb9c:	4a13      	ldr	r2, [pc, #76]	; (1000bbec <system_peripheral_reset+0x45c>)
1000bb9e:	400a      	ands	r2, r1
1000bba0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bba2:	8919      	ldrh	r1, [r3, #8]
1000bba4:	2280      	movs	r2, #128	; 0x80
1000bba6:	0092      	lsls	r2, r2, #2
1000bba8:	430a      	orrs	r2, r1
1000bbaa:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbac:	2000      	movs	r0, #0
		case PERIPHERAL_SPI0_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI0_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bbae:	e018      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbb0:	4b0c      	ldr	r3, [pc, #48]	; (1000bbe4 <system_peripheral_reset+0x454>)
1000bbb2:	8919      	ldrh	r1, [r3, #8]
1000bbb4:	4a0e      	ldr	r2, [pc, #56]	; (1000bbf0 <system_peripheral_reset+0x460>)
1000bbb6:	400a      	ands	r2, r1
1000bbb8:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbba:	8919      	ldrh	r1, [r3, #8]
1000bbbc:	2280      	movs	r2, #128	; 0x80
1000bbbe:	00d2      	lsls	r2, r2, #3
1000bbc0:	430a      	orrs	r2, r1
1000bbc2:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbc4:	2000      	movs	r0, #0
		case PERIPHERAL_SPI1_SCK_PHASE:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_SPI1_SCK_PHASE_INT_CLK_RSTN;
		break;
1000bbc6:	e00c      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
1000bbc8:	4b06      	ldr	r3, [pc, #24]	; (1000bbe4 <system_peripheral_reset+0x454>)
1000bbca:	8919      	ldrh	r1, [r3, #8]
1000bbcc:	4a09      	ldr	r2, [pc, #36]	; (1000bbf4 <system_peripheral_reset+0x464>)
1000bbce:	400a      	ands	r2, r1
1000bbd0:	811a      	strh	r2, [r3, #8]
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
1000bbd2:	8919      	ldrh	r1, [r3, #8]
1000bbd4:	2280      	movs	r2, #128	; 0x80
1000bbd6:	0112      	lsls	r2, r2, #4
1000bbd8:	430a      	orrs	r2, r1
1000bbda:	811a      	strh	r2, [r3, #8]

		default:
			return STATUS_ERR_INVALID_ARG;
	}

	return STATUS_OK;
1000bbdc:	2000      	movs	r0, #0
		case PERIPHERAL_DMA:
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg &= \
				~LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
			LPMCU_MISC_REGS0->LPMCU_GLOBAL_RESET_1.reg |= \
				LPMCU_MISC_REGS_LPMCU_GLOBAL_RESET_1_PROV_DMA_CTRL0_RSTN;
		break;
1000bbde:	e000      	b.n	1000bbe2 <system_peripheral_reset+0x452>

		default:
			return STATUS_ERR_INVALID_ARG;
1000bbe0:	2017      	movs	r0, #23
	}

	return STATUS_OK;
}
1000bbe2:	bd00      	pop	{pc}
1000bbe4:	4000b000 	.word	0x4000b000
1000bbe8:	fffffeff 	.word	0xfffffeff
1000bbec:	fffffdff 	.word	0xfffffdff
1000bbf0:	fffffbff 	.word	0xfffffbff
1000bbf4:	fffff7ff 	.word	0xfffff7ff

1000bbf8 <system_register_isr>:
void system_register_isr(enum ram_isr_table_index isr_index,
		uint32_t isr_address)
{
	uint32_t *temp;
	temp = (uint32_t *)(isr_index * 4 + ISR_RAM_MAP_START_ADDRESS);
	*temp = isr_address;
1000bbf8:	2380      	movs	r3, #128	; 0x80
1000bbfa:	04db      	lsls	r3, r3, #19
1000bbfc:	469c      	mov	ip, r3
1000bbfe:	4460      	add	r0, ip
1000bc00:	0080      	lsls	r0, r0, #2
1000bc02:	6001      	str	r1, [r0, #0]
}
1000bc04:	4770      	bx	lr
1000bc06:	46c0      	nop			; (mov r8, r8)

1000bc08 <uart_rx0_isr_handler>:
	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
}

static void uart_rx0_isr_handler(void)
{
1000bc08:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bc0a:	4b20      	ldr	r3, [pc, #128]	; (1000bc8c <uart_rx0_isr_handler+0x84>)
1000bc0c:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bc0e:	6823      	ldr	r3, [r4, #0]
1000bc10:	7d1d      	ldrb	r5, [r3, #20]
1000bc12:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bc14:	066a      	lsls	r2, r5, #25
1000bc16:	d513      	bpl.n	1000bc40 <uart_rx0_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bc18:	211e      	movs	r1, #30
1000bc1a:	2222      	movs	r2, #34	; 0x22
1000bc1c:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bc1e:	7e1a      	ldrb	r2, [r3, #24]
1000bc20:	3123      	adds	r1, #35	; 0x23
1000bc22:	438a      	bics	r2, r1
1000bc24:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bc26:	2321      	movs	r3, #33	; 0x21
1000bc28:	5ce3      	ldrb	r3, [r4, r3]
1000bc2a:	071b      	lsls	r3, r3, #28
1000bc2c:	d506      	bpl.n	1000bc3c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bc2e:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bc30:	5ce3      	ldrb	r3, [r4, r3]
1000bc32:	071b      	lsls	r3, r3, #28
1000bc34:	d502      	bpl.n	1000bc3c <uart_rx0_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bc36:	0020      	movs	r0, r4
1000bc38:	6923      	ldr	r3, [r4, #16]
1000bc3a:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bc3c:	6823      	ldr	r3, [r4, #0]
1000bc3e:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bc40:	07eb      	lsls	r3, r5, #31
1000bc42:	d522      	bpl.n	1000bc8a <uart_rx0_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bc44:	6823      	ldr	r3, [r4, #0]
1000bc46:	7c1b      	ldrb	r3, [r3, #16]
1000bc48:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bc4a:	6962      	ldr	r2, [r4, #20]
1000bc4c:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bc4e:	6963      	ldr	r3, [r4, #20]
1000bc50:	3301      	adds	r3, #1
1000bc52:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bc54:	8ba3      	ldrh	r3, [r4, #28]
1000bc56:	3b01      	subs	r3, #1
1000bc58:	b29b      	uxth	r3, r3
1000bc5a:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bc5c:	8ba3      	ldrh	r3, [r4, #28]
1000bc5e:	b29b      	uxth	r3, r3
1000bc60:	2b00      	cmp	r3, #0
1000bc62:	d112      	bne.n	1000bc8a <uart_rx0_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc64:	3321      	adds	r3, #33	; 0x21
1000bc66:	5ce3      	ldrb	r3, [r4, r3]
1000bc68:	075b      	lsls	r3, r3, #29
1000bc6a:	d50e      	bpl.n	1000bc8a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bc6c:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bc6e:	5ce3      	ldrb	r3, [r4, r3]
1000bc70:	075b      	lsls	r3, r3, #29
1000bc72:	d50a      	bpl.n	1000bc8a <uart_rx0_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bc74:	2200      	movs	r2, #0
1000bc76:	2322      	movs	r3, #34	; 0x22
1000bc78:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bc7a:	6822      	ldr	r2, [r4, #0]
1000bc7c:	7e13      	ldrb	r3, [r2, #24]
1000bc7e:	2101      	movs	r1, #1
1000bc80:	438b      	bics	r3, r1
1000bc82:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bc84:	68e3      	ldr	r3, [r4, #12]
1000bc86:	0020      	movs	r0, r4
1000bc88:	4798      	blx	r3
			}
		}
	}
}
1000bc8a:	bd70      	pop	{r4, r5, r6, pc}
1000bc8c:	1001976c 	.word	0x1001976c

1000bc90 <uart_tx0_isr_handler>:

static void uart_tx0_isr_handler(void)
{
1000bc90:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[0];
1000bc92:	4b21      	ldr	r3, [pc, #132]	; (1000bd18 <uart_tx0_isr_handler+0x88>)
1000bc94:	681c      	ldr	r4, [r3, #0]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bc96:	6823      	ldr	r3, [r4, #0]
1000bc98:	791d      	ldrb	r5, [r3, #4]
1000bc9a:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bc9c:	07ea      	lsls	r2, r5, #31
1000bc9e:	d517      	bpl.n	1000bcd0 <uart_tx0_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bca0:	69a2      	ldr	r2, [r4, #24]
1000bca2:	7811      	ldrb	r1, [r2, #0]
1000bca4:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bca6:	3201      	adds	r2, #1
1000bca8:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bcaa:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bcac:	8be3      	ldrh	r3, [r4, #30]
1000bcae:	3b01      	subs	r3, #1
1000bcb0:	b29b      	uxth	r3, r3
1000bcb2:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[0];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bcb4:	8be3      	ldrh	r3, [r4, #30]
1000bcb6:	b29b      	uxth	r3, r3
1000bcb8:	2b00      	cmp	r3, #0
1000bcba:	d109      	bne.n	1000bcd0 <uart_tx0_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bcbc:	6822      	ldr	r2, [r4, #0]
1000bcbe:	7a13      	ldrb	r3, [r2, #8]
1000bcc0:	2101      	movs	r1, #1
1000bcc2:	438b      	bics	r3, r1
1000bcc4:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bcc6:	6822      	ldr	r2, [r4, #0]
1000bcc8:	7a11      	ldrb	r1, [r2, #8]
1000bcca:	2310      	movs	r3, #16
1000bccc:	430b      	orrs	r3, r1
1000bcce:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bcd0:	06eb      	lsls	r3, r5, #27
1000bcd2:	d512      	bpl.n	1000bcfa <uart_tx0_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bcd4:	2321      	movs	r3, #33	; 0x21
1000bcd6:	5ce3      	ldrb	r3, [r4, r3]
1000bcd8:	07db      	lsls	r3, r3, #31
1000bcda:	d50e      	bpl.n	1000bcfa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bcdc:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bcde:	5ce3      	ldrb	r3, [r4, r3]
1000bce0:	07db      	lsls	r3, r3, #31
1000bce2:	d50a      	bpl.n	1000bcfa <uart_tx0_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bce4:	2200      	movs	r2, #0
1000bce6:	2322      	movs	r3, #34	; 0x22
1000bce8:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bcea:	6822      	ldr	r2, [r4, #0]
1000bcec:	7a13      	ldrb	r3, [r2, #8]
1000bcee:	2110      	movs	r1, #16
1000bcf0:	438b      	bics	r3, r1
1000bcf2:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000bcf4:	0020      	movs	r0, r4
1000bcf6:	6863      	ldr	r3, [r4, #4]
1000bcf8:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000bcfa:	06ab      	lsls	r3, r5, #26
1000bcfc:	d50a      	bpl.n	1000bd14 <uart_tx0_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bcfe:	2321      	movs	r3, #33	; 0x21
1000bd00:	5ce3      	ldrb	r3, [r4, r3]
1000bd02:	079b      	lsls	r3, r3, #30
1000bd04:	d506      	bpl.n	1000bd14 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000bd06:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000bd08:	5ce3      	ldrb	r3, [r4, r3]
1000bd0a:	079b      	lsls	r3, r3, #30
1000bd0c:	d502      	bpl.n	1000bd14 <uart_tx0_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000bd0e:	68a3      	ldr	r3, [r4, #8]
1000bd10:	0020      	movs	r0, r4
1000bd12:	4798      	blx	r3
		}

	}
}
1000bd14:	bd70      	pop	{r4, r5, r6, pc}
1000bd16:	46c0      	nop			; (mov r8, r8)
1000bd18:	1001976c 	.word	0x1001976c

1000bd1c <uart_rx1_isr_handler>:

static void uart_rx1_isr_handler(void)
{
1000bd1c:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bd1e:	4b20      	ldr	r3, [pc, #128]	; (1000bda0 <uart_rx1_isr_handler+0x84>)
1000bd20:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->RECEIVE_STATUS.reg;
1000bd22:	6823      	ldr	r3, [r4, #0]
1000bd24:	7d1d      	ldrb	r5, [r3, #20]
1000bd26:	b2ed      	uxtb	r5, r5
	if (flags & UART_RECEIVE_STATUS_FIFO_OVERRUN) {
1000bd28:	066a      	lsls	r2, r5, #25
1000bd2a:	d513      	bpl.n	1000bd54 <uart_rx1_isr_handler+0x38>
		/* Store the error code */
		module->status = STATUS_ERR_OVERFLOW;
1000bd2c:	211e      	movs	r1, #30
1000bd2e:	2222      	movs	r2, #34	; 0x22
1000bd30:	54a1      	strb	r1, [r4, r2]
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
1000bd32:	7e1a      	ldrb	r2, [r3, #24]
1000bd34:	3123      	adds	r1, #35	; 0x23
1000bd36:	438a      	bics	r2, r1
1000bd38:	761a      	strb	r2, [r3, #24]
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bd3a:	2321      	movs	r3, #33	; 0x21
1000bd3c:	5ce3      	ldrb	r3, [r4, r3]
1000bd3e:	071b      	lsls	r3, r3, #28
1000bd40:	d506      	bpl.n	1000bd50 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
1000bd42:	2320      	movs	r3, #32
		module->status = STATUS_ERR_OVERFLOW;
		/* Disable interrupt */
		module->hw->RX_INTERRUPT_MASK.reg &=
			~(UART_RX_INTERRUPT_MASK_FIFO_OVERRUN_MASK |
			SPI_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
		if ((module->callback_enable_mask & (1 << UART_RX_FIFO_OVERRUN)) &&
1000bd44:	5ce3      	ldrb	r3, [r4, r3]
1000bd46:	071b      	lsls	r3, r3, #28
1000bd48:	d502      	bpl.n	1000bd50 <uart_rx1_isr_handler+0x34>
			(module->callback_reg_mask & (1 << UART_RX_FIFO_OVERRUN))) {
			(module->callback[UART_RX_FIFO_OVERRUN])(module);
1000bd4a:	0020      	movs	r0, r4
1000bd4c:	6923      	ldr	r3, [r4, #16]
1000bd4e:	4798      	blx	r3
		}
		/* Flush */
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
1000bd50:	6823      	ldr	r3, [r4, #0]
1000bd52:	7c1b      	ldrb	r3, [r3, #16]
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bd54:	07eb      	lsls	r3, r5, #31
1000bd56:	d522      	bpl.n	1000bd9e <uart_rx1_isr_handler+0x82>
		struct uart_module *const module)
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	uint16_t received_data = (uart_hw->RECEIVE_DATA.reg & UART_RECEIVE_DATA_MASK);
1000bd58:	6823      	ldr	r3, [r4, #0]
1000bd5a:	7c1b      	ldrb	r3, [r3, #16]
1000bd5c:	b2db      	uxtb	r3, r3

	/* Read value will be at least 8-bits long */
	*(module->rx_buffer_ptr) = received_data;
1000bd5e:	6962      	ldr	r2, [r4, #20]
1000bd60:	7013      	strb	r3, [r2, #0]
	/* Increment 8-bit pointer */
	module->rx_buffer_ptr += 1;
1000bd62:	6963      	ldr	r3, [r4, #20]
1000bd64:	3301      	adds	r3, #1
1000bd66:	6163      	str	r3, [r4, #20]

	/* Decrement length of the remaining buffer */
	module->remaining_rx_buffer_length--;
1000bd68:	8ba3      	ldrh	r3, [r4, #28]
1000bd6a:	3b01      	subs	r3, #1
1000bd6c:	b29b      	uxth	r3, r3
1000bd6e:	83a3      	strh	r3, [r4, #28]
		uint8_t flush = module->hw->RECEIVE_DATA.reg;
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
1000bd70:	8ba3      	ldrh	r3, [r4, #28]
1000bd72:	b29b      	uxth	r3, r3
1000bd74:	2b00      	cmp	r3, #0
1000bd76:	d112      	bne.n	1000bd9e <uart_rx1_isr_handler+0x82>
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd78:	3321      	adds	r3, #33	; 0x21
1000bd7a:	5ce3      	ldrb	r3, [r4, r3]
1000bd7c:	075b      	lsls	r3, r3, #29
1000bd7e:	d50e      	bpl.n	1000bd9e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
1000bd80:	2320      	movs	r3, #32
		UNUSED(flush);
	}
	if (flags & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
		_uart_read(module);
		if (module->remaining_rx_buffer_length == 0) {
			if ((module->callback_enable_mask & (1 << UART_RX_COMPLETE)) &&
1000bd82:	5ce3      	ldrb	r3, [r4, r3]
1000bd84:	075b      	lsls	r3, r3, #29
1000bd86:	d50a      	bpl.n	1000bd9e <uart_rx1_isr_handler+0x82>
				(module->callback_reg_mask & (1 << UART_RX_COMPLETE))) {
				module->status = STATUS_OK;
1000bd88:	2200      	movs	r2, #0
1000bd8a:	2322      	movs	r3, #34	; 0x22
1000bd8c:	54e2      	strb	r2, [r4, r3]
				module->hw->RX_INTERRUPT_MASK.reg &=
1000bd8e:	6822      	ldr	r2, [r4, #0]
1000bd90:	7e13      	ldrb	r3, [r2, #24]
1000bd92:	2101      	movs	r1, #1
1000bd94:	438b      	bics	r3, r1
1000bd96:	7613      	strb	r3, [r2, #24]
					~(UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK);
				(module->callback[UART_RX_COMPLETE])(module);
1000bd98:	68e3      	ldr	r3, [r4, #12]
1000bd9a:	0020      	movs	r0, r4
1000bd9c:	4798      	blx	r3
			}
		}
	}
}
1000bd9e:	bd70      	pop	{r4, r5, r6, pc}
1000bda0:	1001976c 	.word	0x1001976c

1000bda4 <uart_tx1_isr_handler>:

static void uart_tx1_isr_handler(void)
{
1000bda4:	b570      	push	{r4, r5, r6, lr}
	struct uart_module *module = _uart_instances[1];
1000bda6:	4b21      	ldr	r3, [pc, #132]	; (1000be2c <uart_tx1_isr_handler+0x88>)
1000bda8:	685c      	ldr	r4, [r3, #4]
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
1000bdaa:	6823      	ldr	r3, [r4, #0]
1000bdac:	791d      	ldrb	r5, [r3, #4]
1000bdae:	b2ed      	uxtb	r5, r5
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
1000bdb0:	07ea      	lsls	r2, r5, #31
1000bdb2:	d517      	bpl.n	1000bde4 <uart_tx1_isr_handler+0x40>
{
	/* Pointer to the hardware module instance */
	Uart *const uart_hw = module->hw;

	/* Write value will be at least 8-bits long */
	uint8_t data_to_send = *(module->tx_buffer_ptr);
1000bdb4:	69a2      	ldr	r2, [r4, #24]
1000bdb6:	7811      	ldrb	r1, [r2, #0]
1000bdb8:	b2c9      	uxtb	r1, r1
	/* Increment 8-bit pointer */
	(module->tx_buffer_ptr)++;
1000bdba:	3201      	adds	r2, #1
1000bdbc:	61a2      	str	r2, [r4, #24]

	/* Write the data to send*/
	uart_hw->TRANSMIT_DATA.reg = data_to_send & UART_TRANSMIT_DATA_MASK;
1000bdbe:	7019      	strb	r1, [r3, #0]

	/* Decrement remaining buffer length */
	(module->remaining_tx_buffer_length)--;
1000bdc0:	8be3      	ldrh	r3, [r4, #30]
1000bdc2:	3b01      	subs	r3, #1
1000bdc4:	b29b      	uxth	r3, r3
1000bdc6:	83e3      	strh	r3, [r4, #30]
	struct uart_module *module = _uart_instances[1];
	/* get interrupt flags and mask out enabled callbacks */
	uint32_t flags = module->hw->TRANSMIT_STATUS.reg;
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL) {
		_uart_write(module);
		if (module->remaining_tx_buffer_length == 0) {
1000bdc8:	8be3      	ldrh	r3, [r4, #30]
1000bdca:	b29b      	uxth	r3, r3
1000bdcc:	2b00      	cmp	r3, #0
1000bdce:	d109      	bne.n	1000bde4 <uart_tx1_isr_handler+0x40>
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bdd0:	6822      	ldr	r2, [r4, #0]
1000bdd2:	7a13      	ldrb	r3, [r2, #8]
1000bdd4:	2101      	movs	r1, #1
1000bdd6:	438b      	bics	r3, r1
1000bdd8:	7213      	strb	r3, [r2, #8]
					~UART_TX_INTERRUPT_MASK_TX_FIFO_NOT_FULL_MASK;
			module->hw->TX_INTERRUPT_MASK.reg |=
1000bdda:	6822      	ldr	r2, [r4, #0]
1000bddc:	7a11      	ldrb	r1, [r2, #8]
1000bdde:	2310      	movs	r3, #16
1000bde0:	430b      	orrs	r3, r1
1000bde2:	7213      	strb	r3, [r2, #8]
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
1000bde4:	06eb      	lsls	r3, r5, #27
1000bde6:	d512      	bpl.n	1000be0e <uart_tx1_isr_handler+0x6a>
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bde8:	2321      	movs	r3, #33	; 0x21
1000bdea:	5ce3      	ldrb	r3, [r4, r3]
1000bdec:	07db      	lsls	r3, r3, #31
1000bdee:	d50e      	bpl.n	1000be0e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
1000bdf0:	2320      	movs	r3, #32
			module->hw->TX_INTERRUPT_MASK.reg |=
					UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
		}
	}
	if (flags & UART_TRANSMIT_STATUS_TX_FIFO_EMPTY) {
		if ((module->callback_enable_mask & (1 << UART_TX_COMPLETE)) &&
1000bdf2:	5ce3      	ldrb	r3, [r4, r3]
1000bdf4:	07db      	lsls	r3, r3, #31
1000bdf6:	d50a      	bpl.n	1000be0e <uart_tx1_isr_handler+0x6a>
			(module->callback_reg_mask & (1 << UART_TX_COMPLETE))) {
			module->status = STATUS_OK;
1000bdf8:	2200      	movs	r2, #0
1000bdfa:	2322      	movs	r3, #34	; 0x22
1000bdfc:	54e2      	strb	r2, [r4, r3]
			/* Disable interrupt */
			module->hw->TX_INTERRUPT_MASK.reg &=
1000bdfe:	6822      	ldr	r2, [r4, #0]
1000be00:	7a13      	ldrb	r3, [r2, #8]
1000be02:	2110      	movs	r1, #16
1000be04:	438b      	bics	r3, r1
1000be06:	7213      	strb	r3, [r2, #8]
				~UART_TX_INTERRUPT_MASK_TX_FIFO_EMPTY_MASK;
			(module->callback[UART_TX_COMPLETE])(module);
1000be08:	0020      	movs	r0, r4
1000be0a:	6863      	ldr	r3, [r4, #4]
1000be0c:	4798      	blx	r3
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
1000be0e:	06ab      	lsls	r3, r5, #26
1000be10:	d50a      	bpl.n	1000be28 <uart_tx1_isr_handler+0x84>
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000be12:	2321      	movs	r3, #33	; 0x21
1000be14:	5ce3      	ldrb	r3, [r4, r3]
1000be16:	079b      	lsls	r3, r3, #30
1000be18:	d506      	bpl.n	1000be28 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
1000be1a:	2320      	movs	r3, #32
			(module->callback[UART_TX_COMPLETE])(module);
		}

	}
	if (flags & UART_TRANSMIT_STATUS_CTS_ACTIVE) {
		if ((module->callback_enable_mask & (1 << UART_CTS_ACTIVE)) &&
1000be1c:	5ce3      	ldrb	r3, [r4, r3]
1000be1e:	079b      	lsls	r3, r3, #30
1000be20:	d502      	bpl.n	1000be28 <uart_tx1_isr_handler+0x84>
			(module->callback_reg_mask & (1 << UART_CTS_ACTIVE))) {
			(module->callback[UART_CTS_ACTIVE])(module);
1000be22:	68a3      	ldr	r3, [r4, #8]
1000be24:	0020      	movs	r0, r4
1000be26:	4798      	blx	r3
		}

	}
}
1000be28:	bd70      	pop	{r4, r5, r6, pc}
1000be2a:	46c0      	nop			; (mov r8, r8)
1000be2c:	1001976c 	.word	0x1001976c

1000be30 <uart_get_config_defaults>:
 * \param[out] config  Pointer to configuration structure to be initiated
 */
void uart_get_config_defaults(
		struct uart_config *const config)
{
	config->baud_rate = 115200;
1000be30:	23e1      	movs	r3, #225	; 0xe1
1000be32:	025b      	lsls	r3, r3, #9
1000be34:	6003      	str	r3, [r0, #0]
	config->data_bits = UART_8_BITS;
1000be36:	2300      	movs	r3, #0
1000be38:	7103      	strb	r3, [r0, #4]
	config->stop_bits = UART_1_STOP_BIT;
1000be3a:	7143      	strb	r3, [r0, #5]
	config->parity = UART_NO_PARITY;
1000be3c:	7183      	strb	r3, [r0, #6]
	config->flow_control = false;
1000be3e:	71c3      	strb	r3, [r0, #7]

	config->pin_number_pad[0] = PIN_LP_GPIO_2;
1000be40:	3302      	adds	r3, #2
1000be42:	6083      	str	r3, [r0, #8]
	config->pin_number_pad[1] = PIN_LP_GPIO_3;
1000be44:	2203      	movs	r2, #3
1000be46:	60c2      	str	r2, [r0, #12]
	config->pin_number_pad[2] = PIN_LP_GPIO_4;
1000be48:	3201      	adds	r2, #1
1000be4a:	6102      	str	r2, [r0, #16]
	config->pin_number_pad[3] = PIN_LP_GPIO_5;
1000be4c:	3201      	adds	r2, #1
1000be4e:	6142      	str	r2, [r0, #20]

	config->pinmux_sel_pad[0] = MUX_LP_GPIO_2_UART0_RXD;
1000be50:	6183      	str	r3, [r0, #24]
	config->pinmux_sel_pad[1] = MUX_LP_GPIO_3_UART0_TXD;
1000be52:	61c3      	str	r3, [r0, #28]
	config->pinmux_sel_pad[2] = MUX_LP_GPIO_4_UART0_CTS;
1000be54:	6203      	str	r3, [r0, #32]
	config->pinmux_sel_pad[3] = MUX_LP_GPIO_5_UART0_RTS;
1000be56:	6243      	str	r3, [r0, #36]	; 0x24
}
1000be58:	4770      	bx	lr
1000be5a:	46c0      	nop			; (mov r8, r8)

1000be5c <uart_init>:
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000be5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000be5e:	464f      	mov	r7, r9
1000be60:	4646      	mov	r6, r8
1000be62:	b4c0      	push	{r6, r7}
1000be64:	0005      	movs	r5, r0
1000be66:	0017      	movs	r7, r2

	uint8_t config_temp = 0;
	uint8_t i,index;

	/* Assign module pointer to software instance struct */
	module->hw = hw;
1000be68:	6001      	str	r1, [r0, #0]

	for (i = 0; i < UART_CALLBACK_N; i++) {
		module->callback[i] = NULL;
1000be6a:	2300      	movs	r3, #0
1000be6c:	6043      	str	r3, [r0, #4]
1000be6e:	6083      	str	r3, [r0, #8]
1000be70:	60c3      	str	r3, [r0, #12]
1000be72:	6103      	str	r3, [r0, #16]
	}
	module->rx_buffer_ptr = NULL;
1000be74:	6143      	str	r3, [r0, #20]
	module->tx_buffer_ptr = NULL;
1000be76:	6183      	str	r3, [r0, #24]
	module->remaining_rx_buffer_length = 0;
1000be78:	2200      	movs	r2, #0
1000be7a:	8383      	strh	r3, [r0, #28]
	module->remaining_tx_buffer_length = 0;
1000be7c:	83c3      	strh	r3, [r0, #30]
	module->callback_reg_mask = 0;
1000be7e:	3320      	adds	r3, #32
1000be80:	54c2      	strb	r2, [r0, r3]
	module->callback_enable_mask = 0;
1000be82:	3301      	adds	r3, #1
1000be84:	54c2      	strb	r2, [r0, r3]
	module->status = STATUS_OK;
1000be86:	3301      	adds	r3, #1
1000be88:	54c2      	strb	r2, [r0, r3]

	if (hw == UART0) {
1000be8a:	4b55      	ldr	r3, [pc, #340]	; (1000bfe0 <uart_init+0x184>)
1000be8c:	4299      	cmp	r1, r3
1000be8e:	d118      	bne.n	1000bec2 <uart_init+0x66>
		system_peripheral_reset(PERIPHERAL_UART0_CORE);
1000be90:	2009      	movs	r0, #9
1000be92:	4c54      	ldr	r4, [pc, #336]	; (1000bfe4 <uart_init+0x188>)
1000be94:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART0_IF);
1000be96:	200a      	movs	r0, #10
1000be98:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_CORE);
1000be9a:	2009      	movs	r0, #9
1000be9c:	4c52      	ldr	r4, [pc, #328]	; (1000bfe8 <uart_init+0x18c>)
1000be9e:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART0_IF);
1000bea0:	200a      	movs	r0, #10
1000bea2:	47a0      	blx	r4
		_uart_instances[0] = module;
1000bea4:	4b51      	ldr	r3, [pc, #324]	; (1000bfec <uart_init+0x190>)
1000bea6:	601d      	str	r5, [r3, #0]
		system_register_isr(RAM_ISR_TABLE_UARTRX0_INDEX, (uint32_t)uart_rx0_isr_handler);
1000bea8:	4951      	ldr	r1, [pc, #324]	; (1000bff0 <uart_init+0x194>)
1000beaa:	2010      	movs	r0, #16
1000beac:	4c51      	ldr	r4, [pc, #324]	; (1000bff4 <uart_init+0x198>)
1000beae:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX0_INDEX, (uint32_t)uart_tx0_isr_handler);
1000beb0:	4951      	ldr	r1, [pc, #324]	; (1000bff8 <uart_init+0x19c>)
1000beb2:	2011      	movs	r0, #17
1000beb4:	47a0      	blx	r4
1000beb6:	4b51      	ldr	r3, [pc, #324]	; (1000bffc <uart_init+0x1a0>)
1000beb8:	2201      	movs	r2, #1
1000beba:	601a      	str	r2, [r3, #0]
1000bebc:	3201      	adds	r2, #1
1000bebe:	601a      	str	r2, [r3, #0]
1000bec0:	e01a      	b.n	1000bef8 <uart_init+0x9c>
		NVIC_EnableIRQ(UART0_RX_IRQn);
		NVIC_EnableIRQ(UART0_TX_IRQn);
	} else if (hw == UART1) {
1000bec2:	4b4f      	ldr	r3, [pc, #316]	; (1000c000 <uart_init+0x1a4>)
1000bec4:	4299      	cmp	r1, r3
1000bec6:	d117      	bne.n	1000bef8 <uart_init+0x9c>
		system_peripheral_reset(PERIPHERAL_UART1_CORE);
1000bec8:	200b      	movs	r0, #11
1000beca:	4c46      	ldr	r4, [pc, #280]	; (1000bfe4 <uart_init+0x188>)
1000becc:	47a0      	blx	r4
		system_peripheral_reset(PERIPHERAL_UART1_IF);
1000bece:	200c      	movs	r0, #12
1000bed0:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_CORE);
1000bed2:	200b      	movs	r0, #11
1000bed4:	4c44      	ldr	r4, [pc, #272]	; (1000bfe8 <uart_init+0x18c>)
1000bed6:	47a0      	blx	r4
		system_clock_peripheral_enable(PERIPHERAL_UART1_IF);
1000bed8:	200c      	movs	r0, #12
1000beda:	47a0      	blx	r4
		_uart_instances[1] = module;
1000bedc:	4b43      	ldr	r3, [pc, #268]	; (1000bfec <uart_init+0x190>)
1000bede:	605d      	str	r5, [r3, #4]
		system_register_isr(RAM_ISR_TABLE_UARTRX1_INDEX, (uint32_t)uart_rx1_isr_handler);
1000bee0:	4948      	ldr	r1, [pc, #288]	; (1000c004 <uart_init+0x1a8>)
1000bee2:	2012      	movs	r0, #18
1000bee4:	4c43      	ldr	r4, [pc, #268]	; (1000bff4 <uart_init+0x198>)
1000bee6:	47a0      	blx	r4
		system_register_isr(RAM_ISR_TABLE_UARTTX1_INDEX, (uint32_t)uart_tx1_isr_handler);
1000bee8:	4947      	ldr	r1, [pc, #284]	; (1000c008 <uart_init+0x1ac>)
1000beea:	2013      	movs	r0, #19
1000beec:	47a0      	blx	r4
1000beee:	4b43      	ldr	r3, [pc, #268]	; (1000bffc <uart_init+0x1a0>)
1000bef0:	2204      	movs	r2, #4
1000bef2:	601a      	str	r2, [r3, #0]
1000bef4:	3204      	adds	r2, #4
1000bef6:	601a      	str	r2, [r3, #0]
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000bef8:	79fb      	ldrb	r3, [r7, #7]
		index = 4;
1000befa:	2204      	movs	r2, #4
1000befc:	4690      	mov	r8, r2
		NVIC_EnableIRQ(UART1_RX_IRQn);
		NVIC_EnableIRQ(UART1_TX_IRQn);
	}

	/* Set the pinmux for this UART module. */
	if(config->flow_control) {
1000befe:	2b00      	cmp	r3, #0
1000bf00:	d152      	bne.n	1000bfa8 <uart_init+0x14c>
		index = 4;
	} else {
		index = 2;
1000bf02:	3302      	adds	r3, #2
1000bf04:	4698      	mov	r8, r3
1000bf06:	e04f      	b.n	1000bfa8 <uart_init+0x14c>
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bf08:	8a31      	ldrh	r1, [r6, #16]
1000bf0a:	ce01      	ldmia	r6!, {r0}
1000bf0c:	b2c0      	uxtb	r0, r0
1000bf0e:	47c8      	blx	r9

#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
1000bf10:	3401      	adds	r4, #1
1000bf12:	b2e4      	uxtb	r4, r4
1000bf14:	4544      	cmp	r4, r8
1000bf16:	d3f7      	bcc.n	1000bf08 <uart_init+0xac>
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bf18:	682b      	ldr	r3, [r5, #0]
1000bf1a:	7d1a      	ldrb	r2, [r3, #20]
1000bf1c:	07d2      	lsls	r2, r2, #31
1000bf1e:	d504      	bpl.n	1000bf2a <uart_init+0xce>
1000bf20:	2101      	movs	r1, #1
		i = module->hw->RECEIVE_DATA.reg;
1000bf22:	7c1a      	ldrb	r2, [r3, #16]
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
								(uint16_t)(config->pinmux_sel_pad[i]));
	}

	/* empty UART FIFO */
	while (module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY) {
1000bf24:	7d1a      	ldrb	r2, [r3, #20]
1000bf26:	420a      	tst	r2, r1
1000bf28:	d1fb      	bne.n	1000bf22 <uart_init+0xc6>
		i = module->hw->RECEIVE_DATA.reg;
	}
	
	/* reset configuration register */
	module->hw->UART_CONFIGURATION.reg = 0;
1000bf2a:	2100      	movs	r1, #0
1000bf2c:	2220      	movs	r2, #32
1000bf2e:	5499      	strb	r1, [r3, r2]

	/* program the uart configuration. */
	if(config->flow_control) {
1000bf30:	79fb      	ldrb	r3, [r7, #7]
		config_temp |= UART_CONFIGURATION_CTS_ENABLE_1;
1000bf32:	1e59      	subs	r1, r3, #1
1000bf34:	418b      	sbcs	r3, r1
1000bf36:	0159      	lsls	r1, r3, #5
	}
	config_temp |= config->data_bits;
	config_temp |= config->stop_bits;
1000bf38:	793b      	ldrb	r3, [r7, #4]
1000bf3a:	797a      	ldrb	r2, [r7, #5]
1000bf3c:	4313      	orrs	r3, r2
1000bf3e:	430b      	orrs	r3, r1
	switch(config->parity) {
1000bf40:	79ba      	ldrb	r2, [r7, #6]
1000bf42:	2a02      	cmp	r2, #2
1000bf44:	d00d      	beq.n	1000bf62 <uart_init+0x106>
1000bf46:	b2d1      	uxtb	r1, r2
1000bf48:	2902      	cmp	r1, #2
1000bf4a:	d802      	bhi.n	1000bf52 <uart_init+0xf6>
1000bf4c:	2a01      	cmp	r2, #1
1000bf4e:	d005      	beq.n	1000bf5c <uart_init+0x100>
1000bf50:	e00f      	b.n	1000bf72 <uart_init+0x116>
1000bf52:	2a03      	cmp	r2, #3
1000bf54:	d008      	beq.n	1000bf68 <uart_init+0x10c>
1000bf56:	2a04      	cmp	r2, #4
1000bf58:	d009      	beq.n	1000bf6e <uart_init+0x112>
1000bf5a:	e00a      	b.n	1000bf72 <uart_init+0x116>
		case UART_NO_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_0;
			break;

		case UART_EVEN_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
1000bf5c:	2202      	movs	r2, #2
1000bf5e:	4313      	orrs	r3, r2
			config_temp |= UART_CONFIGURATION_PARITY_MODE_0;
			break;
1000bf60:	e007      	b.n	1000bf72 <uart_init+0x116>

		case UART_ODD_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_1;
1000bf62:	2206      	movs	r2, #6
1000bf64:	4313      	orrs	r3, r2
			break;
1000bf66:	e004      	b.n	1000bf72 <uart_init+0x116>

		case UART_SPACE_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_2;
1000bf68:	220a      	movs	r2, #10
1000bf6a:	4313      	orrs	r3, r2
			break;
1000bf6c:	e001      	b.n	1000bf72 <uart_init+0x116>

		case UART_MARK_PARITY:
			config_temp |= UART_CONFIGURATION_PARITY_ENABLE_1;
			config_temp |= UART_CONFIGURATION_PARITY_MODE_3;
1000bf6e:	220e      	movs	r2, #14
1000bf70:	4313      	orrs	r3, r2
			break;

		default:
			break;
	}	
	module->hw->UART_CONFIGURATION.reg = config_temp;
1000bf72:	2220      	movs	r2, #32
1000bf74:	6829      	ldr	r1, [r5, #0]
1000bf76:	548b      	strb	r3, [r1, r2]

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);
1000bf78:	683e      	ldr	r6, [r7, #0]
	uint16_t integerpart = 0;
	uint8_t fractionalpart = 0;
	uint32_t diff;
	uint8_t i = 0;

	clock = system_clock_get_value();
1000bf7a:	4b24      	ldr	r3, [pc, #144]	; (1000c00c <uart_init+0x1b0>)
1000bf7c:	4798      	blx	r3
1000bf7e:	0004      	movs	r4, r0
	integerpart = clock / baud_rate;
1000bf80:	0031      	movs	r1, r6
1000bf82:	4b23      	ldr	r3, [pc, #140]	; (1000c010 <uart_init+0x1b4>)
1000bf84:	4798      	blx	r3
1000bf86:	b282      	uxth	r2, r0
	diff = clock - (baud_rate * integerpart);
1000bf88:	0400      	lsls	r0, r0, #16
1000bf8a:	0c00      	lsrs	r0, r0, #16
1000bf8c:	4370      	muls	r0, r6
1000bf8e:	1a20      	subs	r0, r4, r0
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bf90:	0931      	lsrs	r1, r6, #4
1000bf92:	4288      	cmp	r0, r1
1000bf94:	d906      	bls.n	1000bfa4 <uart_init+0x148>
1000bf96:	2300      	movs	r3, #0
		i++;
1000bf98:	3301      	adds	r3, #1
1000bf9a:	b2db      	uxtb	r3, r3
		diff -= (baud_rate / 16);
1000bf9c:	1a40      	subs	r0, r0, r1

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
	while(diff > (baud_rate / 16)) {
1000bf9e:	4288      	cmp	r0, r1
1000bfa0:	d8fa      	bhi.n	1000bf98 <uart_init+0x13c>
1000bfa2:	e007      	b.n	1000bfb4 <uart_init+0x158>
	uint8_t i = 0;

	clock = system_clock_get_value();
	integerpart = clock / baud_rate;
	diff = clock - (baud_rate * integerpart);
	i = 0;
1000bfa4:	2300      	movs	r3, #0
1000bfa6:	e005      	b.n	1000bfb4 <uart_init+0x158>
1000bfa8:	003e      	movs	r6, r7
1000bfaa:	3608      	adds	r6, #8
 *
 * \retval STATUS_OK                       The initialization was successful
 */
enum status_code uart_init(struct uart_module *const module, Uart * const hw,
		const struct uart_config *const config)
{
1000bfac:	2400      	movs	r4, #0
#if (BTLC1000)
    index = 2;  /* BTLC1000 has no flow control function. */
#endif

	for(i = 0; i < index; i++) {
		gpio_pinmux_cofiguration(config->pin_number_pad[i], \
1000bfae:	4b19      	ldr	r3, [pc, #100]	; (1000c014 <uart_init+0x1b8>)
1000bfb0:	4699      	mov	r9, r3
1000bfb2:	e7a9      	b.n	1000bf08 <uart_init+0xac>
		i++;
		diff -= (baud_rate / 16);
	}
	fractionalpart = (i + 1) / 2;

	module->hw->UART_CLOCK_SOURCE.reg = UART_CLOCK_SOURCE_CLOCK_SELECT_0;
1000bfb4:	2100      	movs	r1, #0
1000bfb6:	2028      	movs	r0, #40	; 0x28
1000bfb8:	682c      	ldr	r4, [r5, #0]
1000bfba:	5421      	strb	r1, [r4, r0]
	module->hw->UART_BAUD_RATE.reg =
1000bfbc:	3301      	adds	r3, #1
1000bfbe:	071b      	lsls	r3, r3, #28
1000bfc0:	0f5b      	lsrs	r3, r3, #29
1000bfc2:	00d2      	lsls	r2, r2, #3
1000bfc4:	4313      	orrs	r3, r2
1000bfc6:	b29b      	uxth	r3, r3
1000bfc8:	682a      	ldr	r2, [r5, #0]
1000bfca:	8493      	strh	r3, [r2, #36]	; 0x24
	module->hw->UART_CONFIGURATION.reg = config_temp;

	/* Calculate the baud rate. */
	uart_set_baudrate(module, config->baud_rate);

	module->hw->RX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at read time
1000bfcc:	682b      	ldr	r3, [r5, #0]
1000bfce:	7619      	strb	r1, [r3, #24]
	module->hw->TX_INTERRUPT_MASK.reg = 0;	// disable int at initialization, enable it at write time
1000bfd0:	682b      	ldr	r3, [r5, #0]
1000bfd2:	7219      	strb	r1, [r3, #8]
	
	return STATUS_OK;
}
1000bfd4:	2000      	movs	r0, #0
1000bfd6:	bc0c      	pop	{r2, r3}
1000bfd8:	4690      	mov	r8, r2
1000bfda:	4699      	mov	r9, r3
1000bfdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000bfde:	46c0      	nop			; (mov r8, r8)
1000bfe0:	40004000 	.word	0x40004000
1000bfe4:	1000b791 	.word	0x1000b791
1000bfe8:	1000b0c9 	.word	0x1000b0c9
1000bfec:	1001976c 	.word	0x1001976c
1000bff0:	1000bc09 	.word	0x1000bc09
1000bff4:	1000bbf9 	.word	0x1000bbf9
1000bff8:	1000bc91 	.word	0x1000bc91
1000bffc:	e000e100 	.word	0xe000e100
1000c000:	40005000 	.word	0x40005000
1000c004:	1000bd1d 	.word	0x1000bd1d
1000c008:	1000bda5 	.word	0x1000bda5
1000c00c:	1000b0bd 	.word	0x1000b0bd
1000c010:	100128a1 	.word	0x100128a1
1000c014:	1000ad19 	.word	0x1000ad19

1000c018 <uart_write_wait>:
* \retval STATUS_OK         If the operation was completed
*/
enum status_code uart_write_wait(struct uart_module *const module,
		const uint8_t tx_data)
{
	while (!(module->hw->TRANSMIT_STATUS.reg & UART_TRANSMIT_STATUS_TX_FIFO_NOT_FULL));
1000c018:	6802      	ldr	r2, [r0, #0]
1000c01a:	2001      	movs	r0, #1
1000c01c:	7913      	ldrb	r3, [r2, #4]
1000c01e:	4203      	tst	r3, r0
1000c020:	d0fc      	beq.n	1000c01c <uart_write_wait+0x4>

	module->hw->TRANSMIT_DATA.reg = tx_data;
1000c022:	7011      	strb	r1, [r2, #0]
	
	return STATUS_OK;
}
1000c024:	2000      	movs	r0, #0
1000c026:	4770      	bx	lr

1000c028 <uart_read_wait>:
* \retval STATUS_OK                If the operation was completed
*/
enum status_code uart_read_wait(struct uart_module *const module,
		uint8_t *const rx_data)
{
	while (!(module->hw->RECEIVE_STATUS.reg & UART_RECEIVE_STATUS_RX_FIFO_NOT_EMPTY));
1000c028:	6802      	ldr	r2, [r0, #0]
1000c02a:	2001      	movs	r0, #1
1000c02c:	7d13      	ldrb	r3, [r2, #20]
1000c02e:	4203      	tst	r3, r0
1000c030:	d0fc      	beq.n	1000c02c <uart_read_wait+0x4>

	*rx_data = module->hw->RECEIVE_DATA.reg;
1000c032:	7c13      	ldrb	r3, [r2, #16]
1000c034:	700b      	strb	r3, [r1, #0]
	
	return STATUS_OK;
}
1000c036:	2000      	movs	r0, #0
1000c038:	4770      	bx	lr
1000c03a:	46c0      	nop			; (mov r8, r8)

1000c03c <uart_read_buffer_job>:
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
		return STATUS_ERR_INVALID_ARG;
1000c03c:	2317      	movs	r3, #23
{
	/* Sanity check arguments */
	Assert(module);
	Assert(rx_data);

	if (length == 0) {
1000c03e:	2a00      	cmp	r2, #0
1000c040:	d00d      	beq.n	1000c05e <uart_read_buffer_job+0x22>
		return STATUS_ERR_INVALID_ARG;
	}

	/* Check if the UART is busy transmitting or slave waiting for TXC*/
	if (module->status == STATUS_BUSY) {
1000c042:	330b      	adds	r3, #11
1000c044:	5cc3      	ldrb	r3, [r0, r3]
1000c046:	b2db      	uxtb	r3, r3
1000c048:	2b05      	cmp	r3, #5
1000c04a:	d008      	beq.n	1000c05e <uart_read_buffer_job+0x22>
	Assert(module);
	Assert(rx_data);

	/* Set length for the buffer and the pointer, and let
	 * the interrupt handler do the rest */
	module->remaining_rx_buffer_length = length;
1000c04c:	8382      	strh	r2, [r0, #28]
	module->rx_buffer_ptr = rx_data;
1000c04e:	6141      	str	r1, [r0, #20]
	module->status = STATUS_BUSY;
1000c050:	2205      	movs	r2, #5
1000c052:	2322      	movs	r3, #34	; 0x22
1000c054:	54c2      	strb	r2, [r0, r3]

	module->hw->RX_INTERRUPT_MASK.reg = UART_RX_INTERRUPT_MASK_RX_FIFO_NOT_EMPTY_MASK;
1000c056:	6803      	ldr	r3, [r0, #0]
1000c058:	3a04      	subs	r2, #4
1000c05a:	761a      	strb	r2, [r3, #24]
		return STATUS_BUSY;
	}

	/* Issue internal read */
	_uart_read_buffer(module, rx_data, length);
	return STATUS_OK;
1000c05c:	2300      	movs	r3, #0
}
1000c05e:	0018      	movs	r0, r3
1000c060:	4770      	bx	lr
1000c062:	46c0      	nop			; (mov r8, r8)

1000c064 <uart_register_callback>:
	/* Sanity check arguments */
	Assert(module);
	Assert(callback_func);

	/* Register callback function */
	module->callback[callback_type] = callback_func;
1000c064:	0093      	lsls	r3, r2, #2
1000c066:	18c3      	adds	r3, r0, r3
1000c068:	6059      	str	r1, [r3, #4]
	/* Set the bit corresponding to the callback_type */
	module->callback_reg_mask |= (1 << callback_type);
1000c06a:	2120      	movs	r1, #32
1000c06c:	2301      	movs	r3, #1
1000c06e:	4093      	lsls	r3, r2
1000c070:	5c42      	ldrb	r2, [r0, r1]
1000c072:	4313      	orrs	r3, r2
1000c074:	5443      	strb	r3, [r0, r1]
}
1000c076:	4770      	bx	lr

1000c078 <uart_enable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_enable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c078:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Enable callback */
	module->callback_enable_mask |= (1 << callback_type);
1000c07a:	2221      	movs	r2, #33	; 0x21
1000c07c:	2301      	movs	r3, #1
1000c07e:	408b      	lsls	r3, r1
1000c080:	5c84      	ldrb	r4, [r0, r2]
1000c082:	4323      	orrs	r3, r4
1000c084:	5483      	strb	r3, [r0, r2]

	if (callback_type == UART_CTS_ACTIVE) {
1000c086:	2901      	cmp	r1, #1
1000c088:	d104      	bne.n	1000c094 <uart_enable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg |= UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c08a:	6802      	ldr	r2, [r0, #0]
1000c08c:	7a11      	ldrb	r1, [r2, #8]
1000c08e:	2320      	movs	r3, #32
1000c090:	430b      	orrs	r3, r1
1000c092:	7213      	strb	r3, [r2, #8]
	}
}
1000c094:	bd10      	pop	{r4, pc}
1000c096:	46c0      	nop			; (mov r8, r8)

1000c098 <uart_disable_callback>:
 * \param[in]  module         Pointer to UART software instance struct
 * \param[in]  callback_type  Callback type given by an enum
 */
void uart_disable_callback(struct uart_module *const module,
		enum uart_callback callback_type)
{
1000c098:	b510      	push	{r4, lr}
	/* Sanity check arguments */
	Assert(module);

	/* Disable callback */
	module->callback_enable_mask &= ~(1 << callback_type);
1000c09a:	2201      	movs	r2, #1
1000c09c:	408a      	lsls	r2, r1
1000c09e:	2421      	movs	r4, #33	; 0x21
1000c0a0:	5d03      	ldrb	r3, [r0, r4]
1000c0a2:	4393      	bics	r3, r2
1000c0a4:	5503      	strb	r3, [r0, r4]

	if (callback_type == UART_CTS_ACTIVE) {
1000c0a6:	2901      	cmp	r1, #1
1000c0a8:	d104      	bne.n	1000c0b4 <uart_disable_callback+0x1c>
		module->hw->TX_INTERRUPT_MASK.reg &= ~UART_TX_INTERRUPT_MASK_CTS_ACTIVE_MASK;
1000c0aa:	6802      	ldr	r2, [r0, #0]
1000c0ac:	7a13      	ldrb	r3, [r2, #8]
1000c0ae:	311f      	adds	r1, #31
1000c0b0:	438b      	bics	r3, r1
1000c0b2:	7213      	strb	r3, [r2, #8]
	}

}
1000c0b4:	bd10      	pop	{r4, pc}
1000c0b6:	46c0      	nop			; (mov r8, r8)

1000c0b8 <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
1000c0b8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0ba:	4647      	mov	r7, r8
1000c0bc:	b480      	push	{r7}
1000c0be:	000c      	movs	r4, r1
1000c0c0:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
1000c0c2:	2800      	cmp	r0, #0
1000c0c4:	d10d      	bne.n	1000c0e2 <_read+0x2a>
		return -1;
	}

	for (; len > 0; --len) {
1000c0c6:	2a00      	cmp	r2, #0
1000c0c8:	dd0e      	ble.n	1000c0e8 <_read+0x30>
1000c0ca:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
1000c0cc:	4e08      	ldr	r6, [pc, #32]	; (1000c0f0 <_read+0x38>)
1000c0ce:	4d09      	ldr	r5, [pc, #36]	; (1000c0f4 <_read+0x3c>)
1000c0d0:	6830      	ldr	r0, [r6, #0]
1000c0d2:	0021      	movs	r1, r4
1000c0d4:	682b      	ldr	r3, [r5, #0]
1000c0d6:	4798      	blx	r3
		ptr++;
1000c0d8:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
1000c0da:	42a7      	cmp	r7, r4
1000c0dc:	d1f8      	bne.n	1000c0d0 <_read+0x18>
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
1000c0de:	4640      	mov	r0, r8
1000c0e0:	e003      	b.n	1000c0ea <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
1000c0e2:	2001      	movs	r0, #1
1000c0e4:	4240      	negs	r0, r0
1000c0e6:	e000      	b.n	1000c0ea <_read+0x32>
	}

	for (; len > 0; --len) {
1000c0e8:	2000      	movs	r0, #0
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
	}
	return nChars;
}
1000c0ea:	bc04      	pop	{r2}
1000c0ec:	4690      	mov	r8, r2
1000c0ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c0f0:	1001977c 	.word	0x1001977c
1000c0f4:	10019774 	.word	0x10019774

1000c0f8 <_write>:
int __attribute__((weak))
_write (int file, char * ptr, int len);

int __attribute__((weak))
_write (int file, char * ptr, int len)
{
1000c0f8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c0fa:	4647      	mov	r7, r8
1000c0fc:	b480      	push	{r7}
1000c0fe:	000e      	movs	r6, r1
1000c100:	0015      	movs	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
1000c102:	3801      	subs	r0, #1
1000c104:	2802      	cmp	r0, #2
1000c106:	d811      	bhi.n	1000c12c <_write+0x34>
		return -1;
	}

	for (; len != 0; --len) {
1000c108:	2a00      	cmp	r2, #0
1000c10a:	d012      	beq.n	1000c132 <_write+0x3a>
1000c10c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
1000c10e:	4b0c      	ldr	r3, [pc, #48]	; (1000c140 <_write+0x48>)
1000c110:	4698      	mov	r8, r3
1000c112:	4f0c      	ldr	r7, [pc, #48]	; (1000c144 <_write+0x4c>)
1000c114:	4643      	mov	r3, r8
1000c116:	6818      	ldr	r0, [r3, #0]
1000c118:	5d31      	ldrb	r1, [r6, r4]
1000c11a:	683b      	ldr	r3, [r7, #0]
1000c11c:	4798      	blx	r3
1000c11e:	2800      	cmp	r0, #0
1000c120:	db09      	blt.n	1000c136 <_write+0x3e>
			return -1;
		}
		++nChars;
1000c122:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
1000c124:	42a5      	cmp	r5, r4
1000c126:	d1f5      	bne.n	1000c114 <_write+0x1c>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
		}
		++nChars;
1000c128:	0020      	movs	r0, r4
1000c12a:	e006      	b.n	1000c13a <_write+0x42>
_write (int file, char * ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
1000c12c:	2001      	movs	r0, #1
1000c12e:	4240      	negs	r0, r0
1000c130:	e003      	b.n	1000c13a <_write+0x42>
	}

	for (; len != 0; --len) {
1000c132:	2000      	movs	r0, #0
1000c134:	e001      	b.n	1000c13a <_write+0x42>
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
1000c136:	2001      	movs	r0, #1
1000c138:	4240      	negs	r0, r0
		}
		++nChars;
	}
	return nChars;
}
1000c13a:	bc04      	pop	{r2}
1000c13c:	4690      	mov	r8, r2
1000c13e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c140:	1001977c 	.word	0x1001977c
1000c144:	10019778 	.word	0x10019778

1000c148 <ble_undefined_event_handler>:
at_ble_status_t ble_undefined_event_handler(void *params)
{
	DBG_LOG_DEV("Undefined Event Received");
    ALL_UNUSED(params);
	return AT_BLE_SUCCESS;
}
1000c148:	2000      	movs	r0, #0
1000c14a:	4770      	bx	lr

1000c14c <ble_mtu_changed_indication_handler>:
	mtu_changed_ind = (at_ble_mtu_changed_ind_t *)params;
	DBG_LOG_DEV("BLE-MTU Changed, Connection Handle: %d, New Value: %d", 
										mtu_changed_ind->conhdl, 
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}
1000c14c:	2000      	movs	r0, #0
1000c14e:	4770      	bx	lr

1000c150 <ble_characteristic_write_cmd_complete_handler>:

at_ble_status_t ble_characteristic_write_cmd_complete_handler(void *params)
{
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c150:	78c0      	ldrb	r0, [r0, #3]
1000c152:	2800      	cmp	r0, #0
1000c154:	d000      	beq.n	1000c158 <ble_characteristic_write_cmd_complete_handler+0x8>
	{
		DBG_LOG_DEV("Char Write Cmd Failed, Connection Handle:%d, Operation:%d",
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c156:	20e2      	movs	r0, #226	; 0xe2
}
1000c158:	4770      	bx	lr
1000c15a:	46c0      	nop			; (mov r8, r8)

1000c15c <ble_conn_param_update>:
	at_ble_conn_param_update_done_t * conn_param_update;
	conn_param_update = (at_ble_conn_param_update_done_t *)params;
	DBG_LOG_DEV("AT_BLE_CONN_PARAM_UPDATE ");
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}
1000c15c:	2000      	movs	r0, #0
1000c15e:	4770      	bx	lr

1000c160 <ble_scan_report_handler>:
	}
}

/** @brief function handles scan report */
at_ble_status_t ble_scan_report_handler(void *params)
{
1000c160:	b510      	push	{r4, lr}
	at_ble_scan_report_t *scan_report;
	scan_report = (at_ble_scan_report_t *)params;
	if (scan_report->status == AT_BLE_SUCCESS)
1000c162:	7800      	ldrb	r0, [r0, #0]
1000c164:	2800      	cmp	r0, #0
1000c166:	d006      	beq.n	1000c176 <ble_scan_report_handler+0x16>
		/* All scan data should be handled */
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Scanning  failed");
1000c168:	4803      	ldr	r0, [pc, #12]	; (1000c178 <ble_scan_report_handler+0x18>)
1000c16a:	4b04      	ldr	r3, [pc, #16]	; (1000c17c <ble_scan_report_handler+0x1c>)
1000c16c:	4798      	blx	r3
1000c16e:	4804      	ldr	r0, [pc, #16]	; (1000c180 <ble_scan_report_handler+0x20>)
1000c170:	4b04      	ldr	r3, [pc, #16]	; (1000c184 <ble_scan_report_handler+0x24>)
1000c172:	4798      	blx	r3
	}
	return AT_BLE_FAILURE;
1000c174:	20e2      	movs	r0, #226	; 0xe2
}
1000c176:	bd10      	pop	{r4, pc}
1000c178:	1001677c 	.word	0x1001677c
1000c17c:	10015835 	.word	0x10015835
1000c180:	10016f10 	.word	0x10016f10
1000c184:	10015715 	.word	0x10015715

1000c188 <ble_adv_report_handler>:

/** @brief function handles advertising report */
at_ble_status_t ble_adv_report_handler(void *params)
{
1000c188:	b510      	push	{r4, lr}
    at_ble_adv_report_t *adv_report;
    adv_report = (at_ble_adv_report_t *)params;
    if(adv_report->status == AT_BLE_SUCCESS)
1000c18a:	7800      	ldrb	r0, [r0, #0]
1000c18c:	2800      	cmp	r0, #0
1000c18e:	d006      	beq.n	1000c19e <ble_adv_report_handler+0x16>
    {
        return AT_BLE_SUCCESS;
    }
    else 
    {
        DBG_LOG("Advertising failed");
1000c190:	4803      	ldr	r0, [pc, #12]	; (1000c1a0 <ble_adv_report_handler+0x18>)
1000c192:	4b04      	ldr	r3, [pc, #16]	; (1000c1a4 <ble_adv_report_handler+0x1c>)
1000c194:	4798      	blx	r3
1000c196:	4804      	ldr	r0, [pc, #16]	; (1000c1a8 <ble_adv_report_handler+0x20>)
1000c198:	4b04      	ldr	r3, [pc, #16]	; (1000c1ac <ble_adv_report_handler+0x24>)
1000c19a:	4798      	blx	r3
    }
    return AT_BLE_FAILURE;
1000c19c:	20e2      	movs	r0, #226	; 0xe2
}
1000c19e:	bd10      	pop	{r4, pc}
1000c1a0:	1001677c 	.word	0x1001677c
1000c1a4:	10015835 	.word	0x10015835
1000c1a8:	10016f24 	.word	0x10016f24
1000c1ac:	10015715 	.word	0x10015715

1000c1b0 <ble_mtu_changed_cmd_complete_handler>:
										mtu_changed_ind->mtu_value);
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_mtu_changed_cmd_complete_handler(void *params)
{
1000c1b0:	b510      	push	{r4, lr}
1000c1b2:	0004      	movs	r4, r0
	at_ble_cmd_complete_event_t *cmd_complete_event;
	cmd_complete_event = (at_ble_cmd_complete_event_t *)params;
	
	if (cmd_complete_event->status == AT_BLE_SUCCESS)
1000c1b4:	78c0      	ldrb	r0, [r0, #3]
1000c1b6:	2800      	cmp	r0, #0
1000c1b8:	d008      	beq.n	1000c1cc <ble_mtu_changed_cmd_complete_handler+0x1c>
		cmd_complete_event->operation);
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("MTU Change Failed, Connection Handle:%d, Operation:%d",
1000c1ba:	4805      	ldr	r0, [pc, #20]	; (1000c1d0 <ble_mtu_changed_cmd_complete_handler+0x20>)
1000c1bc:	4b05      	ldr	r3, [pc, #20]	; (1000c1d4 <ble_mtu_changed_cmd_complete_handler+0x24>)
1000c1be:	4798      	blx	r3
1000c1c0:	78a2      	ldrb	r2, [r4, #2]
1000c1c2:	8821      	ldrh	r1, [r4, #0]
1000c1c4:	4804      	ldr	r0, [pc, #16]	; (1000c1d8 <ble_mtu_changed_cmd_complete_handler+0x28>)
1000c1c6:	4b05      	ldr	r3, [pc, #20]	; (1000c1dc <ble_mtu_changed_cmd_complete_handler+0x2c>)
1000c1c8:	4798      	blx	r3
		cmd_complete_event->conn_handle,
		cmd_complete_event->operation);
	}
	return AT_BLE_FAILURE;
1000c1ca:	20e2      	movs	r0, #226	; 0xe2
}
1000c1cc:	bd10      	pop	{r4, pc}
1000c1ce:	46c0      	nop			; (mov r8, r8)
1000c1d0:	1001677c 	.word	0x1001677c
1000c1d4:	10015835 	.word	0x10015835
1000c1d8:	10016f38 	.word	0x10016f38
1000c1dc:	10015715 	.word	0x10015715

1000c1e0 <ble_disconnected_state_handler>:
	return AT_BLE_FAILURE;
}

/** @brief function handles disconnection event received from stack */
at_ble_status_t ble_disconnected_state_handler(void *params)
{
1000c1e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c1e2:	0004      	movs	r4, r0
1000c1e4:	4b19      	ldr	r3, [pc, #100]	; (1000c24c <ble_disconnected_state_handler+0x6c>)
1000c1e6:	229b      	movs	r2, #155	; 0x9b
1000c1e8:	0092      	lsls	r2, r2, #2
1000c1ea:	189d      	adds	r5, r3, r2
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c1ec:	2701      	movs	r7, #1
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c1ee:	2600      	movs	r6, #0
1000c1f0:	0018      	movs	r0, r3
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c1f2:	001a      	movs	r2, r3
1000c1f4:	3a56      	subs	r2, #86	; 0x56
1000c1f6:	8811      	ldrh	r1, [r2, #0]
1000c1f8:	8822      	ldrh	r2, [r4, #0]
1000c1fa:	4291      	cmp	r1, r2
1000c1fc:	d119      	bne.n	1000c232 <ble_disconnected_state_handler+0x52>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c1fe:	781a      	ldrb	r2, [r3, #0]
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == disconnect->handle) && 
1000c200:	2a05      	cmp	r2, #5
1000c202:	d001      	beq.n	1000c208 <ble_disconnected_state_handler+0x28>
		((ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRED) || (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_COMPLETED)))
1000c204:	2a08      	cmp	r2, #8
1000c206:	d101      	bne.n	1000c20c <ble_disconnected_state_handler+0x2c>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_DISCONNECTED;
1000c208:	7007      	strb	r7, [r0, #0]
1000c20a:	e012      	b.n	1000c232 <ble_disconnected_state_handler+0x52>
		}		
		else if(ble_dev_info[idx].conn_info.handle == disconnect->handle)
		{
			switch (ble_dev_info[idx].conn_state)
1000c20c:	2a07      	cmp	r2, #7
1000c20e:	d80f      	bhi.n	1000c230 <ble_disconnected_state_handler+0x50>
1000c210:	0092      	lsls	r2, r2, #2
1000c212:	490f      	ldr	r1, [pc, #60]	; (1000c250 <ble_disconnected_state_handler+0x70>)
1000c214:	588a      	ldr	r2, [r1, r2]
1000c216:	4697      	mov	pc, r2
				case BLE_DEVICE_PAIRING_FAILED:
				case BLE_DEVICE_ENCRYPTION_STATE:
				case BLE_DEVICE_ENCRYPTION_FAILED:
				{
					/* Device is not paired so remove the device information */
					ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c218:	701e      	strb	r6, [r3, #0]
					if (ble_device_count > 0)
1000c21a:	4a0e      	ldr	r2, [pc, #56]	; (1000c254 <ble_disconnected_state_handler+0x74>)
1000c21c:	7812      	ldrb	r2, [r2, #0]
1000c21e:	2a00      	cmp	r2, #0
1000c220:	d007      	beq.n	1000c232 <ble_disconnected_state_handler+0x52>
					{
						ble_device_count--;
1000c222:	4a0c      	ldr	r2, [pc, #48]	; (1000c254 <ble_disconnected_state_handler+0x74>)
1000c224:	7812      	ldrb	r2, [r2, #0]
1000c226:	3a01      	subs	r2, #1
1000c228:	b2d2      	uxtb	r2, r2
1000c22a:	490a      	ldr	r1, [pc, #40]	; (1000c254 <ble_disconnected_state_handler+0x74>)
1000c22c:	700a      	strb	r2, [r1, #0]
1000c22e:	e000      	b.n	1000c232 <ble_disconnected_state_handler+0x52>
				case BLE_DEVICE_DISCONNECTED:
				break;
				
				default:
				DBG_LOG_DEV("State Not Handled %d", ble_dev_info[idx].conn_state);
				ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000c230:	7006      	strb	r6, [r0, #0]
1000c232:	337c      	adds	r3, #124	; 0x7c
{
	at_ble_disconnected_t *disconnect;
	uint8_t idx;
	disconnect = (at_ble_disconnected_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c234:	42ab      	cmp	r3, r5
1000c236:	d1db      	bne.n	1000c1f0 <ble_disconnected_state_handler+0x10>
				break;				
			}
		} 
	}
	
	DBG_LOG("Device disconnected Reason:0x%02x Handle=0x%x", disconnect->reason, disconnect->handle);
1000c238:	4807      	ldr	r0, [pc, #28]	; (1000c258 <ble_disconnected_state_handler+0x78>)
1000c23a:	4b08      	ldr	r3, [pc, #32]	; (1000c25c <ble_disconnected_state_handler+0x7c>)
1000c23c:	4798      	blx	r3
1000c23e:	8822      	ldrh	r2, [r4, #0]
1000c240:	78a1      	ldrb	r1, [r4, #2]
1000c242:	4807      	ldr	r0, [pc, #28]	; (1000c260 <ble_disconnected_state_handler+0x80>)
1000c244:	4b07      	ldr	r3, [pc, #28]	; (1000c264 <ble_disconnected_state_handler+0x84>)
1000c246:	4798      	blx	r3
	return AT_BLE_SUCCESS;
}
1000c248:	2000      	movs	r0, #0
1000c24a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c24c:	100197f6 	.word	0x100197f6
1000c250:	10016dac 	.word	0x10016dac
1000c254:	10019a04 	.word	0x10019a04
1000c258:	1001677c 	.word	0x1001677c
1000c25c:	10015835 	.word	0x10015835
1000c260:	10016f70 	.word	0x10016f70
1000c264:	10015715 	.word	0x10015715

1000c268 <ble_encryption_status_change_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption status change */
at_ble_status_t ble_encryption_status_change_handler(void *params)
{
1000c268:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c26a:	0006      	movs	r6, r0
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c26c:	8801      	ldrh	r1, [r0, #0]
1000c26e:	4b28      	ldr	r3, [pc, #160]	; (1000c310 <ble_encryption_status_change_handler+0xa8>)
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c270:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_status->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_ENCRYPTION_STATE))
1000c272:	891a      	ldrh	r2, [r3, #8]
1000c274:	428a      	cmp	r2, r1
1000c276:	d104      	bne.n	1000c282 <ble_encryption_status_change_handler+0x1a>
1000c278:	001a      	movs	r2, r3
1000c27a:	325e      	adds	r2, #94	; 0x5e
1000c27c:	7812      	ldrb	r2, [r2, #0]
1000c27e:	2a06      	cmp	r2, #6
1000c280:	d02e      	beq.n	1000c2e0 <ble_encryption_status_change_handler+0x78>
	uint8_t idx;
	bool device_found = false;
	
	enc_status = (at_ble_encryption_status_changed_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c282:	3401      	adds	r4, #1
1000c284:	b2e4      	uxtb	r4, r4
1000c286:	337c      	adds	r3, #124	; 0x7c
1000c288:	2c05      	cmp	r4, #5
1000c28a:	d1f2      	bne.n	1000c272 <ble_encryption_status_change_handler+0xa>
1000c28c:	e039      	b.n	1000c302 <ble_encryption_status_change_handler+0x9a>
			return AT_BLE_FAILURE;
		}
	}
	else
	{
		ble_dev_info[idx].bond_info.status = enc_status->status;
1000c28e:	4920      	ldr	r1, [pc, #128]	; (1000c310 <ble_encryption_status_change_handler+0xa8>)
1000c290:	0163      	lsls	r3, r4, #5
1000c292:	1b1a      	subs	r2, r3, r4
1000c294:	0092      	lsls	r2, r2, #2
1000c296:	188a      	adds	r2, r1, r2
1000c298:	7615      	strb	r5, [r2, #24]
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
1000c29a:	0014      	movs	r4, r2
1000c29c:	345e      	adds	r4, #94	; 0x5e
1000c29e:	2307      	movs	r3, #7
1000c2a0:	7023      	strb	r3, [r4, #0]
		DBG_LOG("Encryption failed");
1000c2a2:	481c      	ldr	r0, [pc, #112]	; (1000c314 <ble_encryption_status_change_handler+0xac>)
1000c2a4:	4b1c      	ldr	r3, [pc, #112]	; (1000c318 <ble_encryption_status_change_handler+0xb0>)
1000c2a6:	4798      	blx	r3
1000c2a8:	481c      	ldr	r0, [pc, #112]	; (1000c31c <ble_encryption_status_change_handler+0xb4>)
1000c2aa:	4b1d      	ldr	r3, [pc, #116]	; (1000c320 <ble_encryption_status_change_handler+0xb8>)
1000c2ac:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c2ae:	25e2      	movs	r5, #226	; 0xe2
1000c2b0:	e02b      	b.n	1000c30a <ble_encryption_status_change_handler+0xa2>
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Encryption completed successfully");
1000c2b2:	4818      	ldr	r0, [pc, #96]	; (1000c314 <ble_encryption_status_change_handler+0xac>)
1000c2b4:	4b18      	ldr	r3, [pc, #96]	; (1000c318 <ble_encryption_status_change_handler+0xb0>)
1000c2b6:	4798      	blx	r3
1000c2b8:	481a      	ldr	r0, [pc, #104]	; (1000c324 <ble_encryption_status_change_handler+0xbc>)
1000c2ba:	4b19      	ldr	r3, [pc, #100]	; (1000c320 <ble_encryption_status_change_handler+0xb8>)
1000c2bc:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_COMPLETED;
1000c2be:	4914      	ldr	r1, [pc, #80]	; (1000c310 <ble_encryption_status_change_handler+0xa8>)
1000c2c0:	0163      	lsls	r3, r4, #5
1000c2c2:	1b1a      	subs	r2, r3, r4
1000c2c4:	0092      	lsls	r2, r2, #2
1000c2c6:	188a      	adds	r2, r1, r2
1000c2c8:	0010      	movs	r0, r2
1000c2ca:	305e      	adds	r0, #94	; 0x5e
1000c2cc:	2708      	movs	r7, #8
1000c2ce:	7007      	strb	r7, [r0, #0]
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
1000c2d0:	78f0      	ldrb	r0, [r6, #3]
1000c2d2:	7510      	strb	r0, [r2, #20]
			ble_dev_info[idx].bond_info.status = enc_status->status;
1000c2d4:	78b2      	ldrb	r2, [r6, #2]
1000c2d6:	1b1c      	subs	r4, r3, r4
1000c2d8:	00a4      	lsls	r4, r4, #2
1000c2da:	190c      	adds	r4, r1, r4
1000c2dc:	7622      	strb	r2, [r4, #24]
		ble_dev_info[idx].bond_info.status = enc_status->status;
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
1000c2de:	e014      	b.n	1000c30a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c2e0:	78b5      	ldrb	r5, [r6, #2]
1000c2e2:	2d00      	cmp	r5, #0
1000c2e4:	d0e5      	beq.n	1000c2b2 <ble_encryption_status_change_handler+0x4a>
1000c2e6:	e7d2      	b.n	1000c28e <ble_encryption_status_change_handler+0x26>
	{
		DBG_LOG("Encryption completed successfully");
1000c2e8:	4e0a      	ldr	r6, [pc, #40]	; (1000c314 <ble_encryption_status_change_handler+0xac>)
1000c2ea:	0030      	movs	r0, r6
1000c2ec:	4d0a      	ldr	r5, [pc, #40]	; (1000c318 <ble_encryption_status_change_handler+0xb0>)
1000c2ee:	47a8      	blx	r5
1000c2f0:	480c      	ldr	r0, [pc, #48]	; (1000c324 <ble_encryption_status_change_handler+0xbc>)
1000c2f2:	4c0b      	ldr	r4, [pc, #44]	; (1000c320 <ble_encryption_status_change_handler+0xb8>)
1000c2f4:	47a0      	blx	r4
			ble_dev_info[idx].bond_info.auth = enc_status->authen;
			ble_dev_info[idx].bond_info.status = enc_status->status;
		}
		else
		{
			DBG_LOG("BLE Device not found encryption info");
1000c2f6:	0030      	movs	r0, r6
1000c2f8:	47a8      	blx	r5
1000c2fa:	480b      	ldr	r0, [pc, #44]	; (1000c328 <ble_encryption_status_change_handler+0xc0>)
1000c2fc:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c2fe:	25e2      	movs	r5, #226	; 0xe2
1000c300:	e003      	b.n	1000c30a <ble_encryption_status_change_handler+0xa2>
			device_found = true;
			break;
		}
	}
	
	if(enc_status->status == AT_BLE_SUCCESS)
1000c302:	78b5      	ldrb	r5, [r6, #2]
1000c304:	2d00      	cmp	r5, #0
1000c306:	d1c2      	bne.n	1000c28e <ble_encryption_status_change_handler+0x26>
1000c308:	e7ee      	b.n	1000c2e8 <ble_encryption_status_change_handler+0x80>
		ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_FAILED;
		DBG_LOG("Encryption failed");
		return AT_BLE_FAILURE;
	}
	return AT_BLE_SUCCESS;
}
1000c30a:	0028      	movs	r0, r5
1000c30c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c30e:	46c0      	nop			; (mov r8, r8)
1000c310:	10019798 	.word	0x10019798
1000c314:	1001677c 	.word	0x1001677c
1000c318:	10015835 	.word	0x10015835
1000c31c:	10016fa0 	.word	0x10016fa0
1000c320:	10015715 	.word	0x10015715
1000c324:	10016fb4 	.word	0x10016fb4
1000c328:	10016fd8 	.word	0x10016fd8

1000c32c <ble_scan_info_handler>:
	return found;
}
#endif
/** @brief function handling scaned information */
at_ble_status_t ble_scan_info_handler(void *params)
{
1000c32c:	b510      	push	{r4, lr}
1000c32e:	0001      	movs	r1, r0
	at_ble_scan_info_t *scan_param;
	scan_param = (at_ble_scan_info_t *)params;
	if(scan_response_count < MAX_SCAN_DEVICE)
1000c330:	4b15      	ldr	r3, [pc, #84]	; (1000c388 <ble_scan_info_handler+0x5c>)
1000c332:	781b      	ldrb	r3, [r3, #0]
1000c334:	b2db      	uxtb	r3, r3
1000c336:	2b13      	cmp	r3, #19
1000c338:	d812      	bhi.n	1000c360 <ble_scan_info_handler+0x34>
	{
		memcpy((uint8_t *)&scan_info[scan_response_count], scan_param, sizeof(at_ble_scan_info_t));
1000c33a:	4c13      	ldr	r4, [pc, #76]	; (1000c388 <ble_scan_info_handler+0x5c>)
1000c33c:	7823      	ldrb	r3, [r4, #0]
1000c33e:	b2db      	uxtb	r3, r3
1000c340:	0098      	lsls	r0, r3, #2
1000c342:	18c0      	adds	r0, r0, r3
1000c344:	00c0      	lsls	r0, r0, #3
1000c346:	18c3      	adds	r3, r0, r3
1000c348:	4810      	ldr	r0, [pc, #64]	; (1000c38c <ble_scan_info_handler+0x60>)
1000c34a:	1818      	adds	r0, r3, r0
1000c34c:	2229      	movs	r2, #41	; 0x29
1000c34e:	4b10      	ldr	r3, [pc, #64]	; (1000c390 <ble_scan_info_handler+0x64>)
1000c350:	4798      	blx	r3
		DBG_LOG_DEV("Info:Device found address [%d]  0x%02X%02X%02X%02X%02X%02X ",
1000c352:	7823      	ldrb	r3, [r4, #0]
		scan_param->dev_addr.addr[4],
		scan_param->dev_addr.addr[3],
		scan_param->dev_addr.addr[2],
		scan_param->dev_addr.addr[1],
		scan_param->dev_addr.addr[0]);
		scan_response_count++;
1000c354:	7823      	ldrb	r3, [r4, #0]
1000c356:	3301      	adds	r3, #1
1000c358:	b2db      	uxtb	r3, r3
1000c35a:	7023      	strb	r3, [r4, #0]
		return AT_BLE_SUCCESS;
1000c35c:	2300      	movs	r3, #0
1000c35e:	e011      	b.n	1000c384 <ble_scan_info_handler+0x58>
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
1000c360:	480c      	ldr	r0, [pc, #48]	; (1000c394 <ble_scan_info_handler+0x68>)
1000c362:	4b0d      	ldr	r3, [pc, #52]	; (1000c398 <ble_scan_info_handler+0x6c>)
1000c364:	4798      	blx	r3
1000c366:	480d      	ldr	r0, [pc, #52]	; (1000c39c <ble_scan_info_handler+0x70>)
1000c368:	4b0d      	ldr	r3, [pc, #52]	; (1000c3a0 <ble_scan_info_handler+0x74>)
1000c36a:	4798      	blx	r3
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c36c:	4b0d      	ldr	r3, [pc, #52]	; (1000c3a4 <ble_scan_info_handler+0x78>)
1000c36e:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c370:	23e2      	movs	r3, #226	; 0xe2
		return AT_BLE_SUCCESS;
	}
	else
	{
		DBG_LOG("Info:maximum no.of scan device reached...Stopping Scan");
		if(at_ble_scan_stop() != AT_BLE_SUCCESS)
1000c372:	2800      	cmp	r0, #0
1000c374:	d006      	beq.n	1000c384 <ble_scan_info_handler+0x58>
		{
			DBG_LOG("Failed to stop scanning");
1000c376:	4807      	ldr	r0, [pc, #28]	; (1000c394 <ble_scan_info_handler+0x68>)
1000c378:	4b07      	ldr	r3, [pc, #28]	; (1000c398 <ble_scan_info_handler+0x6c>)
1000c37a:	4798      	blx	r3
1000c37c:	480a      	ldr	r0, [pc, #40]	; (1000c3a8 <ble_scan_info_handler+0x7c>)
1000c37e:	4b08      	ldr	r3, [pc, #32]	; (1000c3a0 <ble_scan_info_handler+0x74>)
1000c380:	4798      	blx	r3
				}
			}
		}
	
		#endif
		return AT_BLE_FAILURE;
1000c382:	23e2      	movs	r3, #226	; 0xe2
	}
}
1000c384:	0018      	movs	r0, r3
1000c386:	bd10      	pop	{r4, pc}
1000c388:	1001827c 	.word	0x1001827c
1000c38c:	10019a7c 	.word	0x10019a7c
1000c390:	100155bb 	.word	0x100155bb
1000c394:	1001677c 	.word	0x1001677c
1000c398:	10015835 	.word	0x10015835
1000c39c:	10017000 	.word	0x10017000
1000c3a0:	10015715 	.word	0x10015715
1000c3a4:	1000ef95 	.word	0x1000ef95
1000c3a8:	10017038 	.word	0x10017038

1000c3ac <ble_pair_done_handler>:
	return AT_BLE_SUCCESS;	
}

/** @brief function handles pair done event */
at_ble_status_t ble_pair_done_handler(void *params)
{
1000c3ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c3ae:	464f      	mov	r7, r9
1000c3b0:	4646      	mov	r6, r8
1000c3b2:	b4c0      	push	{r6, r7}
1000c3b4:	0005      	movs	r5, r0
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c3b6:	8841      	ldrh	r1, [r0, #2]
1000c3b8:	4b3a      	ldr	r3, [pc, #232]	; (1000c4a4 <ble_pair_done_handler+0xf8>)
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c3ba:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pairing_params->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_PAIRING))
1000c3bc:	891a      	ldrh	r2, [r3, #8]
1000c3be:	428a      	cmp	r2, r1
1000c3c0:	d104      	bne.n	1000c3cc <ble_pair_done_handler+0x20>
1000c3c2:	001a      	movs	r2, r3
1000c3c4:	325e      	adds	r2, #94	; 0x5e
1000c3c6:	7812      	ldrb	r2, [r2, #0]
1000c3c8:	2a03      	cmp	r2, #3
1000c3ca:	d062      	beq.n	1000c492 <ble_pair_done_handler+0xe6>
	at_ble_pair_done_t *pairing_params;
	uint8_t idx;
	bool device_found = false;
	pairing_params = (at_ble_pair_done_t *)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c3cc:	3401      	adds	r4, #1
1000c3ce:	b2e4      	uxtb	r4, r4
1000c3d0:	337c      	adds	r3, #124	; 0x7c
1000c3d2:	2c05      	cmp	r4, #5
1000c3d4:	d1f2      	bne.n	1000c3bc <ble_pair_done_handler+0x10>
1000c3d6:	e02b      	b.n	1000c430 <ble_pair_done_handler+0x84>
			return AT_BLE_FAILURE;
		}		
	}
	else
	{
		if(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE && ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) {
1000c3d8:	0163      	lsls	r3, r4, #5
1000c3da:	1b1c      	subs	r4, r3, r4
1000c3dc:	00a4      	lsls	r4, r4, #2
1000c3de:	4b31      	ldr	r3, [pc, #196]	; (1000c4a4 <ble_pair_done_handler+0xf8>)
1000c3e0:	191c      	adds	r4, r3, r4
1000c3e2:	345e      	adds	r4, #94	; 0x5e
1000c3e4:	7823      	ldrb	r3, [r4, #0]
1000c3e6:	2b01      	cmp	r3, #1
1000c3e8:	d913      	bls.n	1000c412 <ble_pair_done_handler+0x66>
			DBG_LOG("Pairing failed...Disconnecting");
1000c3ea:	482f      	ldr	r0, [pc, #188]	; (1000c4a8 <ble_pair_done_handler+0xfc>)
1000c3ec:	4b2f      	ldr	r3, [pc, #188]	; (1000c4ac <ble_pair_done_handler+0x100>)
1000c3ee:	4798      	blx	r3
1000c3f0:	482f      	ldr	r0, [pc, #188]	; (1000c4b0 <ble_pair_done_handler+0x104>)
1000c3f2:	4b30      	ldr	r3, [pc, #192]	; (1000c4b4 <ble_pair_done_handler+0x108>)
1000c3f4:	4798      	blx	r3
			if(!(at_ble_disconnect(pairing_params->handle, AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS))
1000c3f6:	8868      	ldrh	r0, [r5, #2]
1000c3f8:	2113      	movs	r1, #19
1000c3fa:	4b2f      	ldr	r3, [pc, #188]	; (1000c4b8 <ble_pair_done_handler+0x10c>)
1000c3fc:	4798      	blx	r3
1000c3fe:	1e06      	subs	r6, r0, #0
1000c400:	d04b      	beq.n	1000c49a <ble_pair_done_handler+0xee>
			{
				DBG_LOG("Disconnect Request Failed");
1000c402:	4829      	ldr	r0, [pc, #164]	; (1000c4a8 <ble_pair_done_handler+0xfc>)
1000c404:	4b29      	ldr	r3, [pc, #164]	; (1000c4ac <ble_pair_done_handler+0x100>)
1000c406:	4798      	blx	r3
1000c408:	482c      	ldr	r0, [pc, #176]	; (1000c4bc <ble_pair_done_handler+0x110>)
1000c40a:	4b2a      	ldr	r3, [pc, #168]	; (1000c4b4 <ble_pair_done_handler+0x108>)
1000c40c:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c40e:	26e2      	movs	r6, #226	; 0xe2
1000c410:	e043      	b.n	1000c49a <ble_pair_done_handler+0xee>
			}
		}
	}
	return AT_BLE_SUCCESS;
1000c412:	2600      	movs	r6, #0
1000c414:	e041      	b.n	1000c49a <ble_pair_done_handler+0xee>
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c416:	4e24      	ldr	r6, [pc, #144]	; (1000c4a8 <ble_pair_done_handler+0xfc>)
1000c418:	0030      	movs	r0, r6
1000c41a:	4d24      	ldr	r5, [pc, #144]	; (1000c4ac <ble_pair_done_handler+0x100>)
1000c41c:	47a8      	blx	r5
1000c41e:	4828      	ldr	r0, [pc, #160]	; (1000c4c0 <ble_pair_done_handler+0x114>)
1000c420:	4c24      	ldr	r4, [pc, #144]	; (1000c4b4 <ble_pair_done_handler+0x108>)
1000c422:	47a0      	blx	r4
				
			}
		}
		else
		{
			DBG_LOG("BLE Device not found to store the pairing info");
1000c424:	0030      	movs	r0, r6
1000c426:	47a8      	blx	r5
1000c428:	4826      	ldr	r0, [pc, #152]	; (1000c4c4 <ble_pair_done_handler+0x118>)
1000c42a:	47a0      	blx	r4
			return AT_BLE_FAILURE;
1000c42c:	26e2      	movs	r6, #226	; 0xe2
1000c42e:	e034      	b.n	1000c49a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c430:	792b      	ldrb	r3, [r5, #4]
1000c432:	2b00      	cmp	r3, #0
1000c434:	d1d0      	bne.n	1000c3d8 <ble_pair_done_handler+0x2c>
1000c436:	e7ee      	b.n	1000c416 <ble_pair_done_handler+0x6a>
	{
		DBG_LOG("Pairing procedure completed successfully");
1000c438:	481b      	ldr	r0, [pc, #108]	; (1000c4a8 <ble_pair_done_handler+0xfc>)
1000c43a:	4b1c      	ldr	r3, [pc, #112]	; (1000c4ac <ble_pair_done_handler+0x100>)
1000c43c:	4798      	blx	r3
1000c43e:	4820      	ldr	r0, [pc, #128]	; (1000c4c0 <ble_pair_done_handler+0x114>)
1000c440:	4b1c      	ldr	r3, [pc, #112]	; (1000c4b4 <ble_pair_done_handler+0x108>)
1000c442:	4798      	blx	r3
		if (device_found)
		{
			ble_dev_info[idx].bond_info.auth = pairing_params->auth;
1000c444:	782a      	ldrb	r2, [r5, #0]
1000c446:	4b17      	ldr	r3, [pc, #92]	; (1000c4a4 <ble_pair_done_handler+0xf8>)
1000c448:	4699      	mov	r9, r3
1000c44a:	0167      	lsls	r7, r4, #5
1000c44c:	1b3b      	subs	r3, r7, r4
1000c44e:	009b      	lsls	r3, r3, #2
1000c450:	444b      	add	r3, r9
1000c452:	751a      	strb	r2, [r3, #20]
			ble_dev_info[idx].bond_info.status = pairing_params->status;
1000c454:	792a      	ldrb	r2, [r5, #4]
1000c456:	761a      	strb	r2, [r3, #24]
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRED;
1000c458:	335e      	adds	r3, #94	; 0x5e
1000c45a:	2205      	movs	r2, #5
1000c45c:	701a      	strb	r2, [r3, #0]
			
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_csrk, (uint8_t *)&pairing_params->peer_csrk, sizeof(at_ble_CSRK_t));
1000c45e:	1b38      	subs	r0, r7, r4
1000c460:	0080      	lsls	r0, r0, #2
1000c462:	4448      	add	r0, r9
1000c464:	3036      	adds	r0, #54	; 0x36
1000c466:	0029      	movs	r1, r5
1000c468:	3122      	adds	r1, #34	; 0x22
1000c46a:	320b      	adds	r2, #11
1000c46c:	4b16      	ldr	r3, [pc, #88]	; (1000c4c8 <ble_pair_done_handler+0x11c>)
1000c46e:	4698      	mov	r8, r3
1000c470:	4798      	blx	r3
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_irk, (uint8_t *)&pairing_params->peer_irk, sizeof(at_ble_IRK_t));
1000c472:	1b38      	subs	r0, r7, r4
1000c474:	0080      	lsls	r0, r0, #2
1000c476:	4448      	add	r0, r9
1000c478:	3046      	adds	r0, #70	; 0x46
1000c47a:	0029      	movs	r1, r5
1000c47c:	3132      	adds	r1, #50	; 0x32
1000c47e:	2217      	movs	r2, #23
1000c480:	47c0      	blx	r8
			memcpy((uint8_t *)&ble_dev_info[idx].bond_info.peer_ltk, (uint8_t *)&pairing_params->peer_ltk, sizeof(at_ble_LTK_t));
1000c482:	1b38      	subs	r0, r7, r4
1000c484:	0080      	lsls	r0, r0, #2
1000c486:	4448      	add	r0, r9
1000c488:	301a      	adds	r0, #26
1000c48a:	1da9      	adds	r1, r5, #6
1000c48c:	221c      	movs	r2, #28
1000c48e:	47c0      	blx	r8
1000c490:	e003      	b.n	1000c49a <ble_pair_done_handler+0xee>
			device_found = true;
			break;
		}
	}
	
	if(pairing_params->status == AT_BLE_SUCCESS)
1000c492:	792e      	ldrb	r6, [r5, #4]
1000c494:	2e00      	cmp	r6, #0
1000c496:	d0cf      	beq.n	1000c438 <ble_pair_done_handler+0x8c>
1000c498:	e79e      	b.n	1000c3d8 <ble_pair_done_handler+0x2c>
				return AT_BLE_FAILURE;
			}
		}
	}
	return AT_BLE_SUCCESS;
}
1000c49a:	0030      	movs	r0, r6
1000c49c:	bc0c      	pop	{r2, r3}
1000c49e:	4690      	mov	r8, r2
1000c4a0:	4699      	mov	r9, r3
1000c4a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000c4a4:	10019798 	.word	0x10019798
1000c4a8:	1001677c 	.word	0x1001677c
1000c4ac:	10015835 	.word	0x10015835
1000c4b0:	10017050 	.word	0x10017050
1000c4b4:	10015715 	.word	0x10015715
1000c4b8:	1000efb5 	.word	0x1000efb5
1000c4bc:	10017070 	.word	0x10017070
1000c4c0:	1001708c 	.word	0x1001708c
1000c4c4:	100170b8 	.word	0x100170b8
1000c4c8:	100155bb 	.word	0x100155bb

1000c4cc <ble_conn_param_update_req>:
	ALL_UNUSED(conn_param_update);  //To avoid compiler warning
	return AT_BLE_SUCCESS;
}

at_ble_status_t ble_conn_param_update_req(void *params)
{
1000c4cc:	b510      	push	{r4, lr}
	at_ble_conn_param_update_request_t * conn_param_req;
	conn_param_req = (at_ble_conn_param_update_request_t *)params;
	at_ble_conn_update_reply(conn_param_req->handle, true, 1, 120);
1000c4ce:	8800      	ldrh	r0, [r0, #0]
1000c4d0:	2378      	movs	r3, #120	; 0x78
1000c4d2:	2201      	movs	r2, #1
1000c4d4:	2101      	movs	r1, #1
1000c4d6:	4c02      	ldr	r4, [pc, #8]	; (1000c4e0 <ble_conn_param_update_req+0x14>)
1000c4d8:	47a0      	blx	r4
	return AT_BLE_SUCCESS;
}
1000c4da:	2000      	movs	r0, #0
1000c4dc:	bd10      	pop	{r4, pc}
1000c4de:	46c0      	nop			; (mov r8, r8)
1000c4e0:	1000efd5 	.word	0x1000efd5

1000c4e4 <ble_slave_security_request_handler>:

at_ble_status_t ble_slave_security_request_handler(void* params)
{
1000c4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c4e6:	4657      	mov	r7, sl
1000c4e8:	464e      	mov	r6, r9
1000c4ea:	4645      	mov	r5, r8
1000c4ec:	b4e0      	push	{r5, r6, r7}
1000c4ee:	b084      	sub	sp, #16
1000c4f0:	0004      	movs	r4, r0
	uint8_t i = 0, idx;
	at_ble_slave_sec_request_t* slave_sec_req;
	bool device_found = false;
	
	slave_sec_req = (at_ble_slave_sec_request_t*)params;	
	memset(&features, 0x00, sizeof(at_ble_pair_features_t));
1000c4f2:	2209      	movs	r2, #9
1000c4f4:	2100      	movs	r1, #0
1000c4f6:	a801      	add	r0, sp, #4
1000c4f8:	4b6a      	ldr	r3, [pc, #424]	; (1000c6a4 <ble_slave_security_request_handler+0x1c0>)
1000c4fa:	4798      	blx	r3
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c4fc:	8825      	ldrh	r5, [r4, #0]
1000c4fe:	496a      	ldr	r1, [pc, #424]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c500:	000a      	movs	r2, r1
1000c502:	2300      	movs	r3, #0
1000c504:	8910      	ldrh	r0, [r2, #8]
1000c506:	42a8      	cmp	r0, r5
1000c508:	d116      	bne.n	1000c538 <ble_slave_security_request_handler+0x54>
1000c50a:	0010      	movs	r0, r2
1000c50c:	305e      	adds	r0, #94	; 0x5e
1000c50e:	7800      	ldrb	r0, [r0, #0]
1000c510:	2802      	cmp	r0, #2
1000c512:	d111      	bne.n	1000c538 <ble_slave_security_request_handler+0x54>
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c514:	4864      	ldr	r0, [pc, #400]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c516:	015a      	lsls	r2, r3, #5
1000c518:	1ad6      	subs	r6, r2, r3
1000c51a:	00b6      	lsls	r6, r6, #2
1000c51c:	1986      	adds	r6, r0, r6
1000c51e:	365e      	adds	r6, #94	; 0x5e
1000c520:	2206      	movs	r2, #6
1000c522:	7032      	strb	r2, [r6, #0]
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c524:	32f9      	adds	r2, #249	; 0xf9
1000c526:	4013      	ands	r3, r2
1000c528:	015a      	lsls	r2, r3, #5
1000c52a:	1ad2      	subs	r2, r2, r3
1000c52c:	0092      	lsls	r2, r2, #2
1000c52e:	1882      	adds	r2, r0, r2
1000c530:	7d12      	ldrb	r2, [r2, #20]
1000c532:	07d0      	lsls	r0, r2, #31
1000c534:	d405      	bmi.n	1000c542 <ble_slave_security_request_handler+0x5e>
1000c536:	e01b      	b.n	1000c570 <ble_slave_security_request_handler+0x8c>
1000c538:	3301      	adds	r3, #1
1000c53a:	327c      	adds	r2, #124	; 0x7c
		//at_ble_disconnect(slave_sec_req->handle, AT_BLE_AUTH_FAILURE);		
		//return AT_BLE_FAILURE;
		//@Todo Status is not handled in the Library
	//}

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c53c:	2b05      	cmp	r3, #5
1000c53e:	d1e1      	bne.n	1000c504 <ble_slave_security_request_handler+0x20>
1000c540:	e01e      	b.n	1000c580 <ble_slave_security_request_handler+0x9c>
		}
	}
	
	if (device_found)
	{
		if((ble_dev_info[idx].bond_info.auth & AT_BLE_AUTH_NO_MITM_BOND) && (slave_sec_req->bond == true))
1000c542:	78e0      	ldrb	r0, [r4, #3]
1000c544:	2800      	cmp	r0, #0
1000c546:	d013      	beq.n	1000c570 <ble_slave_security_request_handler+0x8c>
		{
			if(at_ble_encryption_start(slave_sec_req->handle, &ble_dev_info[idx].bond_info.peer_ltk, ble_dev_info[idx].bond_info.auth) == AT_BLE_SUCCESS)
1000c548:	0159      	lsls	r1, r3, #5
1000c54a:	1ac9      	subs	r1, r1, r3
1000c54c:	008b      	lsls	r3, r1, #2
1000c54e:	4956      	ldr	r1, [pc, #344]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c550:	18c9      	adds	r1, r1, r3
1000c552:	311a      	adds	r1, #26
1000c554:	8820      	ldrh	r0, [r4, #0]
1000c556:	4b55      	ldr	r3, [pc, #340]	; (1000c6ac <ble_slave_security_request_handler+0x1c8>)
1000c558:	4798      	blx	r3
1000c55a:	2800      	cmp	r0, #0
1000c55c:	d100      	bne.n	1000c560 <ble_slave_security_request_handler+0x7c>
1000c55e:	e09b      	b.n	1000c698 <ble_slave_security_request_handler+0x1b4>
			{
				return  AT_BLE_SUCCESS;
			}
			else
			{
				DBG_LOG("Encryption Not started");
1000c560:	4853      	ldr	r0, [pc, #332]	; (1000c6b0 <ble_slave_security_request_handler+0x1cc>)
1000c562:	4b54      	ldr	r3, [pc, #336]	; (1000c6b4 <ble_slave_security_request_handler+0x1d0>)
1000c564:	4798      	blx	r3
1000c566:	4854      	ldr	r0, [pc, #336]	; (1000c6b8 <ble_slave_security_request_handler+0x1d4>)
1000c568:	4b54      	ldr	r3, [pc, #336]	; (1000c6bc <ble_slave_security_request_handler+0x1d8>)
1000c56a:	4798      	blx	r3
				return AT_BLE_FAILURE;
1000c56c:	20e2      	movs	r0, #226	; 0xe2
1000c56e:	e093      	b.n	1000c698 <ble_slave_security_request_handler+0x1b4>
			}			
		}
		else
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000c570:	015a      	lsls	r2, r3, #5
1000c572:	1ad3      	subs	r3, r2, r3
1000c574:	009b      	lsls	r3, r3, #2
1000c576:	4a4c      	ldr	r2, [pc, #304]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c578:	18d3      	adds	r3, r2, r3
1000c57a:	335e      	adds	r3, #94	; 0x5e
1000c57c:	2202      	movs	r2, #2
1000c57e:	701a      	strb	r2, [r3, #0]
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c580:	8825      	ldrh	r5, [r4, #0]
1000c582:	2200      	movs	r2, #0
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c584:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == slave_sec_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c586:	0016      	movs	r6, r2
1000c588:	8908      	ldrh	r0, [r1, #8]
1000c58a:	42a8      	cmp	r0, r5
1000c58c:	d10d      	bne.n	1000c5aa <ble_slave_security_request_handler+0xc6>
1000c58e:	0008      	movs	r0, r1
1000c590:	305e      	adds	r0, #94	; 0x5e
1000c592:	7800      	ldrb	r0, [r0, #0]
1000c594:	2802      	cmp	r0, #2
1000c596:	d108      	bne.n	1000c5aa <ble_slave_security_request_handler+0xc6>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c598:	0152      	lsls	r2, r2, #5
1000c59a:	1b92      	subs	r2, r2, r6
1000c59c:	0096      	lsls	r6, r2, #2
1000c59e:	4a42      	ldr	r2, [pc, #264]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c5a0:	1992      	adds	r2, r2, r6
1000c5a2:	325e      	adds	r2, #94	; 0x5e
1000c5a4:	2103      	movs	r1, #3
1000c5a6:	7011      	strb	r1, [r2, #0]
			break;
1000c5a8:	e005      	b.n	1000c5b6 <ble_slave_security_request_handler+0xd2>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
		}
	}
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c5aa:	3301      	adds	r3, #1
1000c5ac:	b2db      	uxtb	r3, r3
1000c5ae:	3201      	adds	r2, #1
1000c5b0:	317c      	adds	r1, #124	; 0x7c
1000c5b2:	2b05      	cmp	r3, #5
1000c5b4:	d1e7      	bne.n	1000c586 <ble_slave_security_request_handler+0xa2>
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
	features.bond = slave_sec_req->bond;
1000c5b6:	aa01      	add	r2, sp, #4
1000c5b8:	78e1      	ldrb	r1, [r4, #3]
1000c5ba:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = true;
1000c5bc:	2101      	movs	r1, #1
1000c5be:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = AT_BLE_IO_CAP_KB_DISPLAY;
1000c5c0:	3103      	adds	r1, #3
1000c5c2:	7011      	strb	r1, [r2, #0]

	features.oob_avaiable = false;
			
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c5c4:	001f      	movs	r7, r3
1000c5c6:	015a      	lsls	r2, r3, #5
1000c5c8:	1ad2      	subs	r2, r2, r3
1000c5ca:	0092      	lsls	r2, r2, #2
1000c5cc:	4936      	ldr	r1, [pc, #216]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c5ce:	5c52      	ldrb	r2, [r2, r1]
1000c5d0:	2a02      	cmp	r2, #2
1000c5d2:	d104      	bne.n	1000c5de <ble_slave_security_request_handler+0xfa>
	{
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c5d4:	aa01      	add	r2, sp, #4
1000c5d6:	2103      	movs	r1, #3
1000c5d8:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c5da:	71d1      	strb	r1, [r2, #7]
1000c5dc:	e003      	b.n	1000c5e6 <ble_slave_security_request_handler+0x102>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c5de:	aa01      	add	r2, sp, #4
1000c5e0:	2101      	movs	r1, #1
1000c5e2:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c5e4:	71d1      	strb	r1, [r2, #7]
	}
	features.max_key_size = 16;
1000c5e6:	aa01      	add	r2, sp, #4
1000c5e8:	2110      	movs	r1, #16
1000c5ea:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c5ec:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c5ee:	017a      	lsls	r2, r7, #5
1000c5f0:	1bd2      	subs	r2, r2, r7
1000c5f2:	0092      	lsls	r2, r2, #2
1000c5f4:	492c      	ldr	r1, [pc, #176]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c5f6:	188a      	adds	r2, r1, r2
1000c5f8:	7e12      	ldrb	r2, [r2, #24]
1000c5fa:	2a40      	cmp	r2, #64	; 0x40
1000c5fc:	d134      	bne.n	1000c668 <ble_slave_security_request_handler+0x184>
1000c5fe:	015a      	lsls	r2, r3, #5
1000c600:	1ad3      	subs	r3, r2, r3
1000c602:	009b      	lsls	r3, r3, #2
1000c604:	469a      	mov	sl, r3
1000c606:	001e      	movs	r6, r3
1000c608:	3660      	adds	r6, #96	; 0x60
1000c60a:	1876      	adds	r6, r6, r1
1000c60c:	4655      	mov	r5, sl
1000c60e:	3568      	adds	r5, #104	; 0x68
1000c610:	186d      	adds	r5, r5, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c612:	4b2b      	ldr	r3, [pc, #172]	; (1000c6c0 <ble_slave_security_request_handler+0x1dc>)
1000c614:	4699      	mov	r9, r3
1000c616:	230f      	movs	r3, #15
1000c618:	4698      	mov	r8, r3
1000c61a:	47c8      	blx	r9
1000c61c:	4643      	mov	r3, r8
1000c61e:	4018      	ands	r0, r3
1000c620:	7030      	strb	r0, [r6, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c622:	47c8      	blx	r9
1000c624:	4643      	mov	r3, r8
1000c626:	4018      	ands	r0, r3
1000c628:	74b0      	strb	r0, [r6, #18]
1000c62a:	3601      	adds	r6, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c62c:	42ae      	cmp	r6, r5
1000c62e:	d1f4      	bne.n	1000c61a <ble_slave_security_request_handler+0x136>
1000c630:	4656      	mov	r6, sl
1000c632:	3670      	adds	r6, #112	; 0x70
1000c634:	4a1c      	ldr	r2, [pc, #112]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c636:	18b6      	adds	r6, r6, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c638:	4b21      	ldr	r3, [pc, #132]	; (1000c6c0 <ble_slave_security_request_handler+0x1dc>)
1000c63a:	4699      	mov	r9, r3
1000c63c:	230f      	movs	r3, #15
1000c63e:	4698      	mov	r8, r3
1000c640:	47c8      	blx	r9
1000c642:	4643      	mov	r3, r8
1000c644:	4018      	ands	r0, r3
1000c646:	7028      	strb	r0, [r5, #0]
1000c648:	3501      	adds	r5, #1
		{			
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c64a:	42b5      	cmp	r5, r6
1000c64c:	d1f8      	bne.n	1000c640 <ble_slave_security_request_handler+0x15c>
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c64e:	4b1c      	ldr	r3, [pc, #112]	; (1000c6c0 <ble_slave_security_request_handler+0x1dc>)
1000c650:	4798      	blx	r3
1000c652:	017b      	lsls	r3, r7, #5
1000c654:	1bdb      	subs	r3, r3, r7
1000c656:	009b      	lsls	r3, r3, #2
1000c658:	4a13      	ldr	r2, [pc, #76]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c65a:	18d3      	adds	r3, r2, r3
1000c65c:	001a      	movs	r2, r3
1000c65e:	3270      	adds	r2, #112	; 0x70
1000c660:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c662:	337a      	adds	r3, #122	; 0x7a
1000c664:	2210      	movs	r2, #16
1000c666:	701a      	strb	r2, [r3, #0]
	{
		/* Bonding information already exists */
		
	}

	if(at_ble_authenticate(slave_sec_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c668:	017a      	lsls	r2, r7, #5
1000c66a:	1bd7      	subs	r7, r2, r7
1000c66c:	00bf      	lsls	r7, r7, #2
1000c66e:	3760      	adds	r7, #96	; 0x60
1000c670:	4a0d      	ldr	r2, [pc, #52]	; (1000c6a8 <ble_slave_security_request_handler+0x1c4>)
1000c672:	18ba      	adds	r2, r7, r2
1000c674:	8820      	ldrh	r0, [r4, #0]
1000c676:	2300      	movs	r3, #0
1000c678:	a901      	add	r1, sp, #4
1000c67a:	4c12      	ldr	r4, [pc, #72]	; (1000c6c4 <ble_slave_security_request_handler+0x1e0>)
1000c67c:	47a0      	blx	r4
1000c67e:	2800      	cmp	r0, #0
1000c680:	d00a      	beq.n	1000c698 <ble_slave_security_request_handler+0x1b4>
	{
		features.bond = false;
1000c682:	ab01      	add	r3, sp, #4
1000c684:	2200      	movs	r2, #0
1000c686:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c688:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Slave Security Req - Authentication Failed");
1000c68a:	4809      	ldr	r0, [pc, #36]	; (1000c6b0 <ble_slave_security_request_handler+0x1cc>)
1000c68c:	4b09      	ldr	r3, [pc, #36]	; (1000c6b4 <ble_slave_security_request_handler+0x1d0>)
1000c68e:	4798      	blx	r3
1000c690:	480d      	ldr	r0, [pc, #52]	; (1000c6c8 <ble_slave_security_request_handler+0x1e4>)
1000c692:	4b0a      	ldr	r3, [pc, #40]	; (1000c6bc <ble_slave_security_request_handler+0x1d8>)
1000c694:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c696:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c698:	b004      	add	sp, #16
1000c69a:	bc1c      	pop	{r2, r3, r4}
1000c69c:	4690      	mov	r8, r2
1000c69e:	4699      	mov	r9, r3
1000c6a0:	46a2      	mov	sl, r4
1000c6a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c6a4:	100155cd 	.word	0x100155cd
1000c6a8:	10019798 	.word	0x10019798
1000c6ac:	1000fb99 	.word	0x1000fb99
1000c6b0:	1001677c 	.word	0x1001677c
1000c6b4:	10015835 	.word	0x10015835
1000c6b8:	100170e8 	.word	0x100170e8
1000c6bc:	10015715 	.word	0x10015715
1000c6c0:	10015849 	.word	0x10015849
1000c6c4:	1000f9ad 	.word	0x1000f9ad
1000c6c8:	10017100 	.word	0x10017100

1000c6cc <ble_pair_request_handler>:

/** @brief function handles pair request */
at_ble_status_t ble_pair_request_handler(void *params)
{
1000c6cc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c6ce:	465f      	mov	r7, fp
1000c6d0:	4656      	mov	r6, sl
1000c6d2:	464d      	mov	r5, r9
1000c6d4:	4644      	mov	r4, r8
1000c6d6:	b4f0      	push	{r4, r5, r6, r7}
1000c6d8:	b085      	sub	sp, #20
1000c6da:	4683      	mov	fp, r0
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6dc:	8804      	ldrh	r4, [r0, #0]
1000c6de:	4a48      	ldr	r2, [pc, #288]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c6e0:	2100      	movs	r1, #0
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c6e2:	2300      	movs	r3, #0
	{
		if((ble_dev_info[idx].conn_info.handle == pair_req->handle) && (ble_dev_info[idx].conn_state == BLE_DEVICE_CONNECTED))
1000c6e4:	8910      	ldrh	r0, [r2, #8]
1000c6e6:	42a0      	cmp	r0, r4
1000c6e8:	d10d      	bne.n	1000c706 <ble_pair_request_handler+0x3a>
1000c6ea:	0010      	movs	r0, r2
1000c6ec:	305e      	adds	r0, #94	; 0x5e
1000c6ee:	7800      	ldrb	r0, [r0, #0]
1000c6f0:	2802      	cmp	r0, #2
1000c6f2:	d108      	bne.n	1000c706 <ble_pair_request_handler+0x3a>
		{
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
1000c6f4:	014a      	lsls	r2, r1, #5
1000c6f6:	1a52      	subs	r2, r2, r1
1000c6f8:	0095      	lsls	r5, r2, #2
1000c6fa:	4a41      	ldr	r2, [pc, #260]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c6fc:	1952      	adds	r2, r2, r5
1000c6fe:	325e      	adds	r2, #94	; 0x5e
1000c700:	2103      	movs	r1, #3
1000c702:	7011      	strb	r1, [r2, #0]
			break;
1000c704:	e005      	b.n	1000c712 <ble_pair_request_handler+0x46>
	at_ble_pair_features_t features;
	uint8_t i = 0, idx;
	at_ble_pair_request_t* pair_req;
	pair_req = (at_ble_pair_request_t*)params;
	
	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c706:	3301      	adds	r3, #1
1000c708:	b2db      	uxtb	r3, r3
1000c70a:	3101      	adds	r1, #1
1000c70c:	327c      	adds	r2, #124	; 0x7c
1000c70e:	2b05      	cmp	r3, #5
1000c710:	d1e8      	bne.n	1000c6e4 <ble_pair_request_handler+0x18>
			ble_dev_info[idx].conn_state = BLE_DEVICE_PAIRING;
			break;
		}
	}
	
	features.desired_auth =  BLE_AUTHENTICATION_LEVEL; 
1000c712:	aa01      	add	r2, sp, #4
1000c714:	2100      	movs	r1, #0
1000c716:	7211      	strb	r1, [r2, #8]
	features.bond = BLE_BOND_REQ;
1000c718:	7091      	strb	r1, [r2, #2]
	features.mitm_protection = BLE_MITM_REQ;
1000c71a:	7051      	strb	r1, [r2, #1]
	/* Device capabilities is display only , key will be generated
	and displayed */
	features.io_cababilities = BLE_IO_CAPABALITIES;
1000c71c:	2003      	movs	r0, #3
1000c71e:	7010      	strb	r0, [r2, #0]
	features.oob_avaiable = BLE_OOB_REQ;
1000c720:	70d1      	strb	r1, [r2, #3]
	
	/* Distribution of LTK is required */
	if (ble_dev_info[idx].conn_info.peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE)
1000c722:	001f      	movs	r7, r3
1000c724:	015a      	lsls	r2, r3, #5
1000c726:	1ad2      	subs	r2, r2, r3
1000c728:	0092      	lsls	r2, r2, #2
1000c72a:	4935      	ldr	r1, [pc, #212]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c72c:	5c52      	ldrb	r2, [r2, r1]
1000c72e:	2a02      	cmp	r2, #2
1000c730:	d104      	bne.n	1000c73c <ble_pair_request_handler+0x70>
	{
		/* Distribution of IRK is required */
		features.initiator_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c732:	aa01      	add	r2, sp, #4
1000c734:	2103      	movs	r1, #3
1000c736:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   (at_ble_key_dis_t)(AT_BLE_KEY_DIST_ENC | AT_BLE_KEY_DIST_ID);
1000c738:	71d1      	strb	r1, [r2, #7]
1000c73a:	e003      	b.n	1000c744 <ble_pair_request_handler+0x78>
	}
	else
	{
		features.initiator_keys =   AT_BLE_KEY_DIST_ENC;
1000c73c:	aa01      	add	r2, sp, #4
1000c73e:	2101      	movs	r1, #1
1000c740:	7191      	strb	r1, [r2, #6]
		features.responder_keys =   AT_BLE_KEY_DIST_ENC;
1000c742:	71d1      	strb	r1, [r2, #7]
	}
			
	features.max_key_size = 16;
1000c744:	aa01      	add	r2, sp, #4
1000c746:	2110      	movs	r1, #16
1000c748:	7151      	strb	r1, [r2, #5]
	features.min_key_size = 16;
1000c74a:	7111      	strb	r1, [r2, #4]
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
1000c74c:	017a      	lsls	r2, r7, #5
1000c74e:	1bd2      	subs	r2, r2, r7
1000c750:	0092      	lsls	r2, r2, #2
1000c752:	492b      	ldr	r1, [pc, #172]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c754:	188a      	adds	r2, r1, r2
1000c756:	7e12      	ldrb	r2, [r2, #24]
1000c758:	2a40      	cmp	r2, #64	; 0x40
1000c75a:	d131      	bne.n	1000c7c0 <ble_pair_request_handler+0xf4>
1000c75c:	015a      	lsls	r2, r3, #5
1000c75e:	1ad3      	subs	r3, r2, r3
1000c760:	009b      	lsls	r3, r3, #2
1000c762:	469a      	mov	sl, r3
1000c764:	001d      	movs	r5, r3
1000c766:	3560      	adds	r5, #96	; 0x60
1000c768:	186d      	adds	r5, r5, r1
1000c76a:	4654      	mov	r4, sl
1000c76c:	3468      	adds	r4, #104	; 0x68
1000c76e:	1864      	adds	r4, r4, r1
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c770:	4b24      	ldr	r3, [pc, #144]	; (1000c804 <ble_pair_request_handler+0x138>)
1000c772:	4699      	mov	r9, r3
1000c774:	260f      	movs	r6, #15
1000c776:	47c8      	blx	r9
1000c778:	4030      	ands	r0, r6
1000c77a:	7028      	strb	r0, [r5, #0]
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
1000c77c:	47c8      	blx	r9
1000c77e:	4030      	ands	r0, r6
1000c780:	74a8      	strb	r0, [r5, #18]
1000c782:	3501      	adds	r5, #1
	
	/* Check if fresh pairing requested */
	if (ble_dev_info[idx].bond_info.status == AT_BLE_GAP_INVALID_PARAM)
	{
		/* Generate LTK */
		for(i=0; i<8; i++)
1000c784:	42a5      	cmp	r5, r4
1000c786:	d1f6      	bne.n	1000c776 <ble_pair_request_handler+0xaa>
1000c788:	4655      	mov	r5, sl
1000c78a:	3570      	adds	r5, #112	; 0x70
1000c78c:	4a1c      	ldr	r2, [pc, #112]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c78e:	18ad      	adds	r5, r5, r2
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
		{
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
1000c790:	4b1c      	ldr	r3, [pc, #112]	; (1000c804 <ble_pair_request_handler+0x138>)
1000c792:	4699      	mov	r9, r3
1000c794:	230f      	movs	r3, #15
1000c796:	4698      	mov	r8, r3
1000c798:	47c8      	blx	r9
1000c79a:	4643      	mov	r3, r8
1000c79c:	4018      	ands	r0, r3
1000c79e:	7020      	strb	r0, [r4, #0]
1000c7a0:	3401      	adds	r4, #1
		{						
			ble_dev_info[idx].host_ltk.key[i] = rand()&0x0f;
			ble_dev_info[idx].host_ltk.nb[i] = rand()&0x0f;
		}
				
		for(i=8 ; i<16 ;i++)
1000c7a2:	42ac      	cmp	r4, r5
1000c7a4:	d1f8      	bne.n	1000c798 <ble_pair_request_handler+0xcc>
		for (i = 0; i < 16; i++)
		{
			DBG_LOG_CONT_DEV("0x%02X ", ble_dev_info[idx].host_ltk.key[i]);
		}
		
		ble_dev_info[idx].host_ltk.ediv = rand()&0xffff;
1000c7a6:	4b17      	ldr	r3, [pc, #92]	; (1000c804 <ble_pair_request_handler+0x138>)
1000c7a8:	4798      	blx	r3
1000c7aa:	017b      	lsls	r3, r7, #5
1000c7ac:	1bdb      	subs	r3, r3, r7
1000c7ae:	009b      	lsls	r3, r3, #2
1000c7b0:	4a13      	ldr	r2, [pc, #76]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c7b2:	18d3      	adds	r3, r2, r3
1000c7b4:	001a      	movs	r2, r3
1000c7b6:	3270      	adds	r2, #112	; 0x70
1000c7b8:	8010      	strh	r0, [r2, #0]
		ble_dev_info[idx].host_ltk.key_size = 16;
1000c7ba:	337a      	adds	r3, #122	; 0x7a
1000c7bc:	2210      	movs	r2, #16
1000c7be:	701a      	strb	r2, [r3, #0]
	}

	/* Send pairing response */
	DBG_LOG_DEV("Sending pairing response");

	if(at_ble_authenticate(pair_req->handle, &features, &ble_dev_info[idx].host_ltk, NULL) != AT_BLE_SUCCESS)
1000c7c0:	017a      	lsls	r2, r7, #5
1000c7c2:	1bd7      	subs	r7, r2, r7
1000c7c4:	00bf      	lsls	r7, r7, #2
1000c7c6:	3760      	adds	r7, #96	; 0x60
1000c7c8:	4a0d      	ldr	r2, [pc, #52]	; (1000c800 <ble_pair_request_handler+0x134>)
1000c7ca:	18ba      	adds	r2, r7, r2
1000c7cc:	465b      	mov	r3, fp
1000c7ce:	8818      	ldrh	r0, [r3, #0]
1000c7d0:	2300      	movs	r3, #0
1000c7d2:	a901      	add	r1, sp, #4
1000c7d4:	4c0c      	ldr	r4, [pc, #48]	; (1000c808 <ble_pair_request_handler+0x13c>)
1000c7d6:	47a0      	blx	r4
1000c7d8:	2800      	cmp	r0, #0
1000c7da:	d00a      	beq.n	1000c7f2 <ble_pair_request_handler+0x126>
	{
		features.bond = false;
1000c7dc:	ab01      	add	r3, sp, #4
1000c7de:	2200      	movs	r2, #0
1000c7e0:	709a      	strb	r2, [r3, #2]
		features.mitm_protection = false;
1000c7e2:	705a      	strb	r2, [r3, #1]
		DBG_LOG("Pair Request - Authentication Failed");
1000c7e4:	4809      	ldr	r0, [pc, #36]	; (1000c80c <ble_pair_request_handler+0x140>)
1000c7e6:	4b0a      	ldr	r3, [pc, #40]	; (1000c810 <ble_pair_request_handler+0x144>)
1000c7e8:	4798      	blx	r3
1000c7ea:	480a      	ldr	r0, [pc, #40]	; (1000c814 <ble_pair_request_handler+0x148>)
1000c7ec:	4b0a      	ldr	r3, [pc, #40]	; (1000c818 <ble_pair_request_handler+0x14c>)
1000c7ee:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c7f0:	20e2      	movs	r0, #226	; 0xe2
	}
	return AT_BLE_SUCCESS;
}
1000c7f2:	b005      	add	sp, #20
1000c7f4:	bc3c      	pop	{r2, r3, r4, r5}
1000c7f6:	4690      	mov	r8, r2
1000c7f8:	4699      	mov	r9, r3
1000c7fa:	46a2      	mov	sl, r4
1000c7fc:	46ab      	mov	fp, r5
1000c7fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c800:	10019798 	.word	0x10019798
1000c804:	10015849 	.word	0x10015849
1000c808:	1000f9ad 	.word	0x1000f9ad
1000c80c:	1001677c 	.word	0x1001677c
1000c810:	10015835 	.word	0x10015835
1000c814:	1001712c 	.word	0x1001712c
1000c818:	10015715 	.word	0x10015715

1000c81c <ble_pair_key_request_handler>:

/** @brief function handles pair key request */
at_ble_status_t ble_pair_key_request_handler (void *params)
{
1000c81c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000c81e:	b085      	sub	sp, #20
1000c820:	0005      	movs	r5, r0
	at_ble_pair_key_request_t *pair_key;
	pair_key = (at_ble_pair_key_request_t *)params;
	/* Passkey has fixed value in this example MSB */
	uint8_t passkey[6]={'1','2','3','4','5','6'};
1000c822:	2206      	movs	r2, #6
1000c824:	493d      	ldr	r1, [pc, #244]	; (1000c91c <ble_pair_key_request_handler+0x100>)
1000c826:	a802      	add	r0, sp, #8
1000c828:	4e3d      	ldr	r6, [pc, #244]	; (1000c920 <ble_pair_key_request_handler+0x104>)
1000c82a:	47b0      	blx	r6
	uint8_t idx = 0;
        uint8_t pin;
        
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
1000c82c:	ac01      	add	r4, sp, #4
1000c82e:	2204      	movs	r2, #4
1000c830:	0029      	movs	r1, r5
1000c832:	0020      	movs	r0, r4
1000c834:	47b0      	blx	r6
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
1000c836:	78e3      	ldrb	r3, [r4, #3]
1000c838:	2b00      	cmp	r3, #0
1000c83a:	d162      	bne.n	1000c902 <ble_pair_key_request_handler+0xe6>
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c83c:	4839      	ldr	r0, [pc, #228]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c83e:	4b3a      	ldr	r3, [pc, #232]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c840:	4798      	blx	r3
1000c842:	483a      	ldr	r0, [pc, #232]	; (1000c92c <ble_pair_key_request_handler+0x110>)
1000c844:	4b3a      	ldr	r3, [pc, #232]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c846:	4798      	blx	r3
1000c848:	2600      	movs	r6, #0
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c84a:	4c3a      	ldr	r4, [pc, #232]	; (1000c934 <ble_pair_key_request_handler+0x118>)
				return AT_BLE_FAILURE;
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
			  passkey[idx++] = pin;
			  DBG_LOG_CONT("%c", pin);
1000c84c:	27ff      	movs	r7, #255	; 0xff
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);
1000c84e:	201e      	movs	r0, #30
1000c850:	47a0      	blx	r4
1000c852:	b2c3      	uxtb	r3, r0

			if (!pin) {
1000c854:	2b00      	cmp	r3, #0
1000c856:	d11a      	bne.n	1000c88e <ble_pair_key_request_handler+0x72>
			DBG_LOG("Pin Timeout");
1000c858:	4f32      	ldr	r7, [pc, #200]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c85a:	0038      	movs	r0, r7
1000c85c:	4e32      	ldr	r6, [pc, #200]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c85e:	47b0      	blx	r6
1000c860:	4835      	ldr	r0, [pc, #212]	; (1000c938 <ble_pair_key_request_handler+0x11c>)
1000c862:	4c33      	ldr	r4, [pc, #204]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c864:	47a0      	blx	r4
				DBG_LOG("Disconnecting ...");
1000c866:	0038      	movs	r0, r7
1000c868:	47b0      	blx	r6
1000c86a:	4834      	ldr	r0, [pc, #208]	; (1000c93c <ble_pair_key_request_handler+0x120>)
1000c86c:	47a0      	blx	r4
				if (!(at_ble_disconnect(pair_key->handle,
1000c86e:	8828      	ldrh	r0, [r5, #0]
1000c870:	2113      	movs	r1, #19
1000c872:	4b33      	ldr	r3, [pc, #204]	; (1000c940 <ble_pair_key_request_handler+0x124>)
1000c874:	4798      	blx	r3
1000c876:	0003      	movs	r3, r0
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
				}
				return AT_BLE_FAILURE;
1000c878:	20e2      	movs	r0, #226	; 0xe2
			pin = getchar_b11_timeout(CHECK_PAIRING_KEY_TIME_OUT);

			if (!pin) {
			DBG_LOG("Pin Timeout");
				DBG_LOG("Disconnecting ...");
				if (!(at_ble_disconnect(pair_key->handle,
1000c87a:	2b00      	cmp	r3, #0
1000c87c:	d04c      	beq.n	1000c918 <ble_pair_key_request_handler+0xfc>
							AT_BLE_TERMINATED_BY_USER) == AT_BLE_SUCCESS)) {
					DBG_LOG("Disconnect Request Failed");
1000c87e:	4829      	ldr	r0, [pc, #164]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c880:	4b29      	ldr	r3, [pc, #164]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c882:	4798      	blx	r3
1000c884:	482f      	ldr	r0, [pc, #188]	; (1000c944 <ble_pair_key_request_handler+0x128>)
1000c886:	4b2a      	ldr	r3, [pc, #168]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c888:	4798      	blx	r3
				}
				return AT_BLE_FAILURE;
1000c88a:	20e2      	movs	r0, #226	; 0xe2
1000c88c:	e044      	b.n	1000c918 <ble_pair_key_request_handler+0xfc>
			}
			
			if ((pin >= '0') && ( pin <= '9')) {
1000c88e:	001a      	movs	r2, r3
1000c890:	3a30      	subs	r2, #48	; 0x30
1000c892:	2a09      	cmp	r2, #9
1000c894:	d8db      	bhi.n	1000c84e <ble_pair_key_request_handler+0x32>
			  passkey[idx++] = pin;
1000c896:	aa02      	add	r2, sp, #8
1000c898:	54b3      	strb	r3, [r6, r2]
			  DBG_LOG_CONT("%c", pin);
1000c89a:	4038      	ands	r0, r7
1000c89c:	4b2a      	ldr	r3, [pc, #168]	; (1000c948 <ble_pair_key_request_handler+0x12c>)
1000c89e:	4798      	blx	r3
1000c8a0:	3601      	adds	r6, #1
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
		for (idx = 0; idx < 6;) {          
1000c8a2:	2e06      	cmp	r6, #6
1000c8a4:	d026      	beq.n	1000c8f4 <ble_pair_key_request_handler+0xd8>
1000c8a6:	e7d2      	b.n	1000c84e <ble_pair_key_request_handler+0x32>
          {
            DBG_LOG("Entered Pass-code:");
          }
          else
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
1000c8a8:	481e      	ldr	r0, [pc, #120]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c8aa:	4b1f      	ldr	r3, [pc, #124]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c8ac:	4798      	blx	r3
1000c8ae:	4827      	ldr	r0, [pc, #156]	; (1000c94c <ble_pair_key_request_handler+0x130>)
1000c8b0:	4b1f      	ldr	r3, [pc, #124]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c8b2:	4798      	blx	r3
	at_ble_pair_key_request_t pair_key_request;
        
	memcpy((uint8_t *)&pair_key_request, pair_key, sizeof(at_ble_pair_key_request_t));
	
	if (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY) {
		DBG_LOG("Enter the Passkey(6-Digit) in Terminal:");
1000c8b4:	2400      	movs	r4, #0
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c8b6:	4e24      	ldr	r6, [pc, #144]	; (1000c948 <ble_pair_key_request_handler+0x12c>)
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
          {
                  passkey[idx] = (passkey[idx]);
1000c8b8:	ab02      	add	r3, sp, #8
                  DBG_LOG_CONT("%c",passkey[idx]);
1000c8ba:	5ce0      	ldrb	r0, [r4, r3]
1000c8bc:	47b0      	blx	r6
1000c8be:	3401      	adds	r4, #1
          {
            DBG_LOG("Please Enter the following Pass-code(on other Device):");
          }
          
          /* Convert passkey to ASCII format */
          for(idx=0; idx<AT_BLE_PASSKEY_LEN; idx++)
1000c8c0:	2c06      	cmp	r4, #6
1000c8c2:	d1f9      	bne.n	1000c8b8 <ble_pair_key_request_handler+0x9c>
          {
                  passkey[idx] = (passkey[idx]);
                  DBG_LOG_CONT("%c",passkey[idx]);
          }		
          
          if(!((at_ble_pair_key_reply(pair_key->handle, pair_key_request.type, passkey)) == AT_BLE_SUCCESS))
1000c8c4:	ab01      	add	r3, sp, #4
1000c8c6:	7899      	ldrb	r1, [r3, #2]
1000c8c8:	8828      	ldrh	r0, [r5, #0]
1000c8ca:	aa02      	add	r2, sp, #8
1000c8cc:	4b20      	ldr	r3, [pc, #128]	; (1000c950 <ble_pair_key_request_handler+0x134>)
1000c8ce:	4798      	blx	r3
1000c8d0:	2800      	cmp	r0, #0
1000c8d2:	d021      	beq.n	1000c918 <ble_pair_key_request_handler+0xfc>
          {
                  DBG_LOG("Pair-key reply failed");
1000c8d4:	4813      	ldr	r0, [pc, #76]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c8d6:	4b14      	ldr	r3, [pc, #80]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c8d8:	4798      	blx	r3
1000c8da:	481e      	ldr	r0, [pc, #120]	; (1000c954 <ble_pair_key_request_handler+0x138>)
1000c8dc:	4b14      	ldr	r3, [pc, #80]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c8de:	4798      	blx	r3
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c8e0:	2000      	movs	r0, #0
1000c8e2:	e019      	b.n	1000c918 <ble_pair_key_request_handler+0xfc>
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
		{
			DBG_LOG("OOB Feature Not supported");
1000c8e4:	480f      	ldr	r0, [pc, #60]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c8e6:	4b10      	ldr	r3, [pc, #64]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c8e8:	4798      	blx	r3
1000c8ea:	481b      	ldr	r0, [pc, #108]	; (1000c958 <ble_pair_key_request_handler+0x13c>)
1000c8ec:	4b10      	ldr	r3, [pc, #64]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c8ee:	4798      	blx	r3
		}
	}
	return AT_BLE_SUCCESS;	
1000c8f0:	2000      	movs	r0, #0
1000c8f2:	e011      	b.n	1000c918 <ble_pair_key_request_handler+0xfc>
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
	   (pair_key_request.type == AT_BLE_PAIR_PASSKEY)) || (pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY))
	{
          if(pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_ENTRY)
          {
            DBG_LOG("Entered Pass-code:");
1000c8f4:	480b      	ldr	r0, [pc, #44]	; (1000c924 <ble_pair_key_request_handler+0x108>)
1000c8f6:	4b0c      	ldr	r3, [pc, #48]	; (1000c928 <ble_pair_key_request_handler+0x10c>)
1000c8f8:	4798      	blx	r3
1000c8fa:	4818      	ldr	r0, [pc, #96]	; (1000c95c <ble_pair_key_request_handler+0x140>)
1000c8fc:	4b0c      	ldr	r3, [pc, #48]	; (1000c930 <ble_pair_key_request_handler+0x114>)
1000c8fe:	4798      	blx	r3
1000c900:	e7d8      	b.n	1000c8b4 <ble_pair_key_request_handler+0x98>
			} 
	  }
	}	
	
	/* Display passkey */
	if(((pair_key_request.passkey_type == AT_BLE_PAIR_PASSKEY_DISPLAY) &&
1000c902:	ab01      	add	r3, sp, #4
1000c904:	885a      	ldrh	r2, [r3, #2]
1000c906:	2380      	movs	r3, #128	; 0x80
1000c908:	005b      	lsls	r3, r3, #1
1000c90a:	429a      	cmp	r2, r3
1000c90c:	d0cc      	beq.n	1000c8a8 <ble_pair_key_request_handler+0x8c>
                  DBG_LOG("Pair-key reply failed");
          }
	}
	else 
	{
		if(pair_key_request.type == AT_BLE_PAIR_OOB)
1000c90e:	ab01      	add	r3, sp, #4
1000c910:	789b      	ldrb	r3, [r3, #2]
1000c912:	2b01      	cmp	r3, #1
1000c914:	d0e6      	beq.n	1000c8e4 <ble_pair_key_request_handler+0xc8>
		{
			DBG_LOG("OOB Feature Not supported");
		}
	}
	return AT_BLE_SUCCESS;	
1000c916:	2000      	movs	r0, #0
}
1000c918:	b005      	add	sp, #20
1000c91a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000c91c:	10016ed8 	.word	0x10016ed8
1000c920:	100155bb 	.word	0x100155bb
1000c924:	1001677c 	.word	0x1001677c
1000c928:	10015835 	.word	0x10015835
1000c92c:	10017154 	.word	0x10017154
1000c930:	10015715 	.word	0x10015715
1000c934:	1000d4a5 	.word	0x1000d4a5
1000c938:	1001717c 	.word	0x1001717c
1000c93c:	10017188 	.word	0x10017188
1000c940:	1000efb5 	.word	0x1000efb5
1000c944:	10017070 	.word	0x10017070
1000c948:	10015749 	.word	0x10015749
1000c94c:	1001719c 	.word	0x1001719c
1000c950:	1000fadd 	.word	0x1000fadd
1000c954:	100171d4 	.word	0x100171d4
1000c958:	100171ec 	.word	0x100171ec
1000c95c:	10017208 	.word	0x10017208

1000c960 <ble_encryption_request_handler>:
	return AT_BLE_SUCCESS;
}

/** @brief function handles encryption requests */
at_ble_status_t ble_encryption_request_handler(void *params)
{
1000c960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000c962:	0006      	movs	r6, r0
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c964:	8805      	ldrh	r5, [r0, #0]
1000c966:	4b2f      	ldr	r3, [pc, #188]	; (1000ca24 <ble_encryption_request_handler+0xc4>)
1000c968:	2200      	movs	r2, #0
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c96a:	2400      	movs	r4, #0
	{
		if((ble_dev_info[idx].conn_info.handle == enc_req->handle) && (ble_dev_info[idx].conn_state != BLE_DEVICE_DISCONNECTED) &&
1000c96c:	0010      	movs	r0, r2
1000c96e:	8919      	ldrh	r1, [r3, #8]
1000c970:	42a9      	cmp	r1, r5
1000c972:	d116      	bne.n	1000c9a2 <ble_encryption_request_handler+0x42>
1000c974:	0019      	movs	r1, r3
1000c976:	315e      	adds	r1, #94	; 0x5e
1000c978:	7809      	ldrb	r1, [r1, #0]
1000c97a:	2901      	cmp	r1, #1
1000c97c:	d911      	bls.n	1000c9a2 <ble_encryption_request_handler+0x42>
		(ble_dev_info[idx].conn_state != BLE_DEVICE_DEFAULT_IDLE))
		{
			device_found = true;
			ble_dev_info[idx].conn_state = BLE_DEVICE_ENCRYPTION_STATE;
1000c97e:	4929      	ldr	r1, [pc, #164]	; (1000ca24 <ble_encryption_request_handler+0xc4>)
1000c980:	0152      	lsls	r2, r2, #5
1000c982:	1a10      	subs	r0, r2, r0
1000c984:	0080      	lsls	r0, r0, #2
1000c986:	1808      	adds	r0, r1, r0
1000c988:	305e      	adds	r0, #94	; 0x5e
1000c98a:	2306      	movs	r3, #6
1000c98c:	7003      	strb	r3, [r0, #0]
	{
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
1000c98e:	0162      	lsls	r2, r4, #5
1000c990:	1b13      	subs	r3, r2, r4
1000c992:	009b      	lsls	r3, r3, #2
1000c994:	18cb      	adds	r3, r1, r3
1000c996:	3370      	adds	r3, #112	; 0x70
1000c998:	881a      	ldrh	r2, [r3, #0]
1000c99a:	8873      	ldrh	r3, [r6, #2]
1000c99c:	429a      	cmp	r2, r3
1000c99e:	d113      	bne.n	1000c9c8 <ble_encryption_request_handler+0x68>
1000c9a0:	e006      	b.n	1000c9b0 <ble_encryption_request_handler+0x50>
	bool key_found = false;
	bool device_found = false;
	uint8_t idx;
	enc_req = (at_ble_encryption_request_t *)params;

	for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000c9a2:	3401      	adds	r4, #1
1000c9a4:	b2e4      	uxtb	r4, r4
1000c9a6:	3201      	adds	r2, #1
1000c9a8:	337c      	adds	r3, #124	; 0x7c
1000c9aa:	2c05      	cmp	r4, #5
1000c9ac:	d1de      	bne.n	1000c96c <ble_encryption_request_handler+0xc>
1000c9ae:	e00b      	b.n	1000c9c8 <ble_encryption_request_handler+0x68>
		DBG_LOG_DEV("host device ediv %x",ble_dev_info[idx].host_ltk.ediv);
		DBG_LOG_DEV("peer device ediv %x",ble_dev_info[idx].bond_info.peer_ltk.ediv);
		DBG_LOG_DEV("enc_req ediv %x", enc_req->ediv);
		DBG_LOG_DEV("The index is %d",idx);
		if((ble_dev_info[idx].host_ltk.ediv == enc_req->ediv)
		&& !memcmp(&enc_req->nb[0],&ble_dev_info[idx].host_ltk.nb[0],8))
1000c9b0:	0161      	lsls	r1, r4, #5
1000c9b2:	1b09      	subs	r1, r1, r4
1000c9b4:	0089      	lsls	r1, r1, #2
1000c9b6:	4b1b      	ldr	r3, [pc, #108]	; (1000ca24 <ble_encryption_request_handler+0xc4>)
1000c9b8:	1859      	adds	r1, r3, r1
1000c9ba:	3172      	adds	r1, #114	; 0x72
1000c9bc:	1d30      	adds	r0, r6, #4
1000c9be:	2208      	movs	r2, #8
1000c9c0:	4b19      	ldr	r3, [pc, #100]	; (1000ca28 <ble_encryption_request_handler+0xc8>)
1000c9c2:	4798      	blx	r3
			DBG_LOG_DEV("ENC-Req: Key Found");
		}
	}
	
	
    if(key_found == false)
1000c9c4:	2800      	cmp	r0, #0
1000c9c6:	d015      	beq.n	1000c9f4 <ble_encryption_request_handler+0x94>
    {
	    DBG_LOG("Pairing information of peer device is not available.");
1000c9c8:	4f18      	ldr	r7, [pc, #96]	; (1000ca2c <ble_encryption_request_handler+0xcc>)
1000c9ca:	0038      	movs	r0, r7
1000c9cc:	4e18      	ldr	r6, [pc, #96]	; (1000ca30 <ble_encryption_request_handler+0xd0>)
1000c9ce:	47b0      	blx	r6
1000c9d0:	4818      	ldr	r0, [pc, #96]	; (1000ca34 <ble_encryption_request_handler+0xd4>)
1000c9d2:	4d19      	ldr	r5, [pc, #100]	; (1000ca38 <ble_encryption_request_handler+0xd8>)
1000c9d4:	47a8      	blx	r5
	    DBG_LOG("Please unpair the device from peer device(mobile) settings menu and start pairing again");
1000c9d6:	0038      	movs	r0, r7
1000c9d8:	47b0      	blx	r6
1000c9da:	4818      	ldr	r0, [pc, #96]	; (1000ca3c <ble_encryption_request_handler+0xdc>)
1000c9dc:	47a8      	blx	r5
		at_ble_disconnect(ble_dev_info[idx].conn_info.handle, AT_BLE_AUTH_FAILURE);
1000c9de:	0163      	lsls	r3, r4, #5
1000c9e0:	1b1c      	subs	r4, r3, r4
1000c9e2:	00a4      	lsls	r4, r4, #2
1000c9e4:	4b0f      	ldr	r3, [pc, #60]	; (1000ca24 <ble_encryption_request_handler+0xc4>)
1000c9e6:	191c      	adds	r4, r3, r4
1000c9e8:	8920      	ldrh	r0, [r4, #8]
1000c9ea:	2105      	movs	r1, #5
1000c9ec:	4b14      	ldr	r3, [pc, #80]	; (1000ca40 <ble_encryption_request_handler+0xe0>)
1000c9ee:	4798      	blx	r3
		return AT_BLE_FAILURE;
1000c9f0:	20e2      	movs	r0, #226	; 0xe2
1000c9f2:	e016      	b.n	1000ca22 <ble_encryption_request_handler+0xc2>
    }

	if(!(at_ble_encryption_request_reply(enc_req->handle, ble_dev_info[idx].bond_info.auth, key_found, &ble_dev_info[idx].host_ltk) == AT_BLE_SUCCESS))
1000c9f4:	0162      	lsls	r2, r4, #5
1000c9f6:	1b13      	subs	r3, r2, r4
1000c9f8:	009b      	lsls	r3, r3, #2
1000c9fa:	3360      	adds	r3, #96	; 0x60
1000c9fc:	4909      	ldr	r1, [pc, #36]	; (1000ca24 <ble_encryption_request_handler+0xc4>)
1000c9fe:	185b      	adds	r3, r3, r1
1000ca00:	1b14      	subs	r4, r2, r4
1000ca02:	00a4      	lsls	r4, r4, #2
1000ca04:	190c      	adds	r4, r1, r4
1000ca06:	7d21      	ldrb	r1, [r4, #20]
1000ca08:	8830      	ldrh	r0, [r6, #0]
1000ca0a:	2201      	movs	r2, #1
1000ca0c:	4c0d      	ldr	r4, [pc, #52]	; (1000ca44 <ble_encryption_request_handler+0xe4>)
1000ca0e:	47a0      	blx	r4
1000ca10:	2800      	cmp	r0, #0
1000ca12:	d006      	beq.n	1000ca22 <ble_encryption_request_handler+0xc2>
	{
		DBG_LOG("Encryption Request Reply Failed");
1000ca14:	4805      	ldr	r0, [pc, #20]	; (1000ca2c <ble_encryption_request_handler+0xcc>)
1000ca16:	4b06      	ldr	r3, [pc, #24]	; (1000ca30 <ble_encryption_request_handler+0xd0>)
1000ca18:	4798      	blx	r3
1000ca1a:	480b      	ldr	r0, [pc, #44]	; (1000ca48 <ble_encryption_request_handler+0xe8>)
1000ca1c:	4b06      	ldr	r3, [pc, #24]	; (1000ca38 <ble_encryption_request_handler+0xd8>)
1000ca1e:	4798      	blx	r3
	}
	else
	{      
		DBG_LOG_DEV("Encryption Request Reply");
	}
	return AT_BLE_SUCCESS;
1000ca20:	2000      	movs	r0, #0
}
1000ca22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ca24:	10019798 	.word	0x10019798
1000ca28:	1001559d 	.word	0x1001559d
1000ca2c:	1001677c 	.word	0x1001677c
1000ca30:	10015835 	.word	0x10015835
1000ca34:	1001721c 	.word	0x1001721c
1000ca38:	10015715 	.word	0x10015715
1000ca3c:	10017254 	.word	0x10017254
1000ca40:	1000efb5 	.word	0x1000efb5
1000ca44:	1000fc11 	.word	0x1000fc11
1000ca48:	100172ac 	.word	0x100172ac

1000ca4c <ble_mgr_events_callback_handler>:
}

bool ble_mgr_events_callback_handler(ble_mgr_event_cb_t event_cb_type, 
									ble_mgr_event_t event_type,
									const ble_event_callback_t *ble_event_handler)
{
1000ca4c:	b530      	push	{r4, r5, lr}
	uint8_t idx;
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
1000ca4e:	2a00      	cmp	r2, #0
1000ca50:	d047      	beq.n	1000cae2 <ble_mgr_events_callback_handler+0x96>
	{
		switch(event_type)
1000ca52:	2906      	cmp	r1, #6
1000ca54:	d847      	bhi.n	1000cae6 <ble_mgr_events_callback_handler+0x9a>
1000ca56:	0089      	lsls	r1, r1, #2
1000ca58:	4b28      	ldr	r3, [pc, #160]	; (1000cafc <ble_mgr_events_callback_handler+0xb0>)
1000ca5a:	585b      	ldr	r3, [r3, r1]
1000ca5c:	469f      	mov	pc, r3
			}
			break;
			
			case BLE_GATT_SERVER_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_server_event_cb;
1000ca5e:	4b28      	ldr	r3, [pc, #160]	; (1000cb00 <ble_mgr_events_callback_handler+0xb4>)
				max_event_handler = MAX_GATT_SERVER_SUBSCRIBERS;
1000ca60:	2405      	movs	r4, #5
1000ca62:	e00a      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_GATT_HTPT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_htpt_event_cb;
1000ca64:	4b27      	ldr	r3, [pc, #156]	; (1000cb04 <ble_mgr_events_callback_handler+0xb8>)
				max_event_handler = MAX_HTPT_EVENT_SUBSCRIBERS;
1000ca66:	2401      	movs	r4, #1
			}
			break;
1000ca68:	e007      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_DTM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_dtm_event_cb;
1000ca6a:	4b27      	ldr	r3, [pc, #156]	; (1000cb08 <ble_mgr_events_callback_handler+0xbc>)
				max_event_handler = MAX_DTM_EVENT_SUBSCRIBERS;
1000ca6c:	2405      	movs	r4, #5
			}
			break;
1000ca6e:	e004      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
			
			case BLE_CUSTOM_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_custom_event_cb;
1000ca70:	4b26      	ldr	r3, [pc, #152]	; (1000cb0c <ble_mgr_events_callback_handler+0xc0>)
				max_event_handler = MAX_CUSTOM_EVENT_SUBSCRIBERS;
1000ca72:	2401      	movs	r4, #1
			}
			break;
1000ca74:	e001      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
	{
		switch(event_type)
		{
			case BLE_GAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gap_event_cb;
1000ca76:	4b26      	ldr	r3, [pc, #152]	; (1000cb10 <ble_mgr_events_callback_handler+0xc4>)
				max_event_handler = MAX_GAP_EVENT_SUBSCRIBERS;
1000ca78:	2405      	movs	r4, #5
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
1000ca7a:	2800      	cmp	r0, #0
1000ca7c:	d116      	bne.n	1000caac <ble_mgr_events_callback_handler+0x60>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ca7e:	6819      	ldr	r1, [r3, #0]
1000ca80:	2900      	cmp	r1, #0
1000ca82:	d10b      	bne.n	1000ca9c <ble_mgr_events_callback_handler+0x50>
1000ca84:	e006      	b.n	1000ca94 <ble_mgr_events_callback_handler+0x48>
1000ca86:	001d      	movs	r5, r3
1000ca88:	3304      	adds	r3, #4
1000ca8a:	1f18      	subs	r0, r3, #4
1000ca8c:	6800      	ldr	r0, [r0, #0]
1000ca8e:	2800      	cmp	r0, #0
1000ca90:	d106      	bne.n	1000caa0 <ble_mgr_events_callback_handler+0x54>
1000ca92:	e000      	b.n	1000ca96 <ble_mgr_events_callback_handler+0x4a>
1000ca94:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = ble_event_handler;
1000ca96:	602a      	str	r2, [r5, #0]
						status = true; //Successfully registered to table
1000ca98:	2101      	movs	r1, #1
						break;
1000ca9a:	e02c      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
1000ca9c:	3304      	adds	r3, #4
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == NULL)
1000ca9e:	2100      	movs	r1, #0
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
			if (event_cb_type == REGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000caa0:	3101      	adds	r1, #1
1000caa2:	b2c9      	uxtb	r1, r1
1000caa4:	42a1      	cmp	r1, r4
1000caa6:	d3ee      	bcc.n	1000ca86 <ble_mgr_events_callback_handler+0x3a>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000caa8:	2100      	movs	r1, #0
1000caaa:	e024      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
1000caac:	2100      	movs	r1, #0
						status = true; //Successfully registered to table
						break;
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
1000caae:	2801      	cmp	r0, #1
1000cab0:	d121      	bne.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cab2:	6819      	ldr	r1, [r3, #0]
1000cab4:	428a      	cmp	r2, r1
1000cab6:	d10c      	bne.n	1000cad2 <ble_mgr_events_callback_handler+0x86>
1000cab8:	e006      	b.n	1000cac8 <ble_mgr_events_callback_handler+0x7c>
1000caba:	001d      	movs	r5, r3
1000cabc:	3304      	adds	r3, #4
1000cabe:	1f18      	subs	r0, r3, #4
1000cac0:	6800      	ldr	r0, [r0, #0]
1000cac2:	4282      	cmp	r2, r0
1000cac4:	d107      	bne.n	1000cad6 <ble_mgr_events_callback_handler+0x8a>
1000cac6:	e000      	b.n	1000caca <ble_mgr_events_callback_handler+0x7e>
1000cac8:	001d      	movs	r5, r3
					{
						ble_event_cb_ptr[idx] = NULL;
1000caca:	2300      	movs	r3, #0
1000cacc:	602b      	str	r3, [r5, #0]
						status = true;//Successfully unregistered from table
1000cace:	2101      	movs	r1, #1
						break;
1000cad0:	e011      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
1000cad2:	3304      	adds	r3, #4
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
				{
					if(ble_event_cb_ptr[idx] == ble_event_handler)
1000cad4:	2100      	movs	r1, #0
					}
				}
			}
			else if(event_cb_type == UNREGISTER_CALL_BACK)
			{
				for (idx = 0; idx < max_event_handler; idx++)
1000cad6:	3101      	adds	r1, #1
1000cad8:	b2c9      	uxtb	r1, r1
1000cada:	42a1      	cmp	r1, r4
1000cadc:	d3ed      	bcc.n	1000caba <ble_mgr_events_callback_handler+0x6e>
			break;
		}
		
		if (status)
		{
			status = false; //Defaults to Failure[No Space to register, Not Found, Invalid Type]scenario
1000cade:	2100      	movs	r1, #0
1000cae0:	e009      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
			}			
		}
	}
	else
	{
		status = false; //Invalid parameter
1000cae2:	2100      	movs	r1, #0
1000cae4:	e007      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
	uint8_t max_event_handler = 0;
	bool status = true;
	const ble_event_callback_t **ble_event_cb_ptr = NULL;
	if (ble_event_handler != NULL)
	{
		switch(event_type)
1000cae6:	2100      	movs	r1, #0
1000cae8:	e005      	b.n	1000caf6 <ble_mgr_events_callback_handler+0xaa>
			}
			break;
			
			case BLE_GATT_CLIENT_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_gatt_client_event_cb;
1000caea:	4b0a      	ldr	r3, [pc, #40]	; (1000cb14 <ble_mgr_events_callback_handler+0xc8>)
				max_event_handler = MAX_GATT_CLIENT_SUBSCRIBERS;
1000caec:	2405      	movs	r4, #5
1000caee:	e7c4      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
			}
			break;
			
			case BLE_L2CAP_EVENT_TYPE:
			{
				ble_event_cb_ptr = ble_mgr_l2cap_event_cb;
1000caf0:	4b09      	ldr	r3, [pc, #36]	; (1000cb18 <ble_mgr_events_callback_handler+0xcc>)
				max_event_handler = MAX_L2CAP_EVENT_SUBSCRIBERS;
1000caf2:	2401      	movs	r4, #1
1000caf4:	e7c1      	b.n	1000ca7a <ble_mgr_events_callback_handler+0x2e>
	else
	{
		status = false; //Invalid parameter
	}
	return status;
}
1000caf6:	0008      	movs	r0, r1
1000caf8:	bd30      	pop	{r4, r5, pc}
1000cafa:	46c0      	nop			; (mov r8, r8)
1000cafc:	10016dcc 	.word	0x10016dcc
1000cb00:	10019784 	.word	0x10019784
1000cb04:	10019780 	.word	0x10019780
1000cb08:	10019a08 	.word	0x10019a08
1000cb0c:	10019fbc 	.word	0x10019fbc
1000cb10:	10019a1c 	.word	0x10019a1c
1000cb14:	10019a30 	.word	0x10019a30
1000cb18:	10019a78 	.word	0x10019a78

1000cb1c <ble_device_init>:
volatile uint32_t 	event_params_memory[1024] 	= {0};


/** @brief BLE device initialization */
void ble_device_init(at_ble_addr_t *addr)
{
1000cb1c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cb1e:	465f      	mov	r7, fp
1000cb20:	4656      	mov	r6, sl
1000cb22:	464d      	mov	r5, r9
1000cb24:	4644      	mov	r4, r8
1000cb26:	b4f0      	push	{r4, r5, r6, r7}
1000cb28:	b08d      	sub	sp, #52	; 0x34
1000cb2a:	0006      	movs	r6, r0
static bool ble_scan_duplication_check(at_ble_scan_info_t * info);
#endif

static void init_global_var(void)
{
	ble_user_event_cb = 0;
1000cb2c:	2400      	movs	r4, #0
1000cb2e:	4b72      	ldr	r3, [pc, #456]	; (1000ccf8 <ble_device_init+0x1dc>)
1000cb30:	601c      	str	r4, [r3, #0]
	
	memset(&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cb32:	2207      	movs	r2, #7
1000cb34:	2100      	movs	r1, #0
1000cb36:	4871      	ldr	r0, [pc, #452]	; (1000ccfc <ble_device_init+0x1e0>)
1000cb38:	4d71      	ldr	r5, [pc, #452]	; (1000cd00 <ble_device_init+0x1e4>)
1000cb3a:	47a8      	blx	r5
	memset(&connected_state_info, 0, sizeof(at_ble_connected_t));
1000cb3c:	2212      	movs	r2, #18
1000cb3e:	2100      	movs	r1, #0
1000cb40:	4870      	ldr	r0, [pc, #448]	; (1000cd04 <ble_device_init+0x1e8>)
1000cb42:	47a8      	blx	r5
		
#if defined ATT_DB_MEMORY
	memset(att_db_data, 0, sizeof(uint32_t) * BLE_ATT_DB_MEMORY_SIZE/4);
1000cb44:	4a70      	ldr	r2, [pc, #448]	; (1000cd08 <ble_device_init+0x1ec>)
1000cb46:	2100      	movs	r1, #0
1000cb48:	4870      	ldr	r0, [pc, #448]	; (1000cd0c <ble_device_init+0x1f0>)
1000cb4a:	47a8      	blx	r5
#endif

	scan_response_count = 0;
1000cb4c:	4b70      	ldr	r3, [pc, #448]	; (1000cd10 <ble_device_init+0x1f4>)
1000cb4e:	701c      	strb	r4, [r3, #0]
	memset(scan_info, 0, sizeof(scan_info));
1000cb50:	22cd      	movs	r2, #205	; 0xcd
1000cb52:	0092      	lsls	r2, r2, #2
1000cb54:	2100      	movs	r1, #0
1000cb56:	486f      	ldr	r0, [pc, #444]	; (1000cd14 <ble_device_init+0x1f8>)
1000cb58:	47a8      	blx	r5

	event = AT_BLE_UNDEFINED_EVENT;
1000cb5a:	4b6f      	ldr	r3, [pc, #444]	; (1000cd18 <ble_device_init+0x1fc>)
1000cb5c:	701c      	strb	r4, [r3, #0]
	memset(ble_event_params, 0, BLE_EVENT_PARAM_MAX_SIZE);
1000cb5e:	2283      	movs	r2, #131	; 0x83
1000cb60:	0092      	lsls	r2, r2, #2
1000cb62:	2100      	movs	r1, #0
1000cb64:	486d      	ldr	r0, [pc, #436]	; (1000cd1c <ble_device_init+0x200>)
1000cb66:	47a8      	blx	r5
{
	uint8_t idx;	
	char *dev_name = NULL;
	init_global_var();

	memset((uint8_t *)event_pool_memory, 0, sizeof(event_pool_memory));
1000cb68:	4b6d      	ldr	r3, [pc, #436]	; (1000cd20 <ble_device_init+0x204>)
1000cb6a:	469b      	mov	fp, r3
1000cb6c:	2380      	movs	r3, #128	; 0x80
1000cb6e:	00db      	lsls	r3, r3, #3
1000cb70:	469a      	mov	sl, r3
1000cb72:	001a      	movs	r2, r3
1000cb74:	2100      	movs	r1, #0
1000cb76:	4658      	mov	r0, fp
1000cb78:	47a8      	blx	r5
	memset((uint8_t *)event_params_memory, 0, sizeof(event_params_memory));
1000cb7a:	4b6a      	ldr	r3, [pc, #424]	; (1000cd24 <ble_device_init+0x208>)
1000cb7c:	4699      	mov	r9, r3
1000cb7e:	2380      	movs	r3, #128	; 0x80
1000cb80:	015b      	lsls	r3, r3, #5
1000cb82:	4698      	mov	r8, r3
1000cb84:	001a      	movs	r2, r3
1000cb86:	2100      	movs	r1, #0
1000cb88:	4648      	mov	r0, r9
1000cb8a:	47a8      	blx	r5

	memset(&pf_cfg, 0, sizeof(pf_cfg));
1000cb8c:	4f66      	ldr	r7, [pc, #408]	; (1000cd28 <ble_device_init+0x20c>)
1000cb8e:	221c      	movs	r2, #28
1000cb90:	2100      	movs	r1, #0
1000cb92:	0038      	movs	r0, r7
1000cb94:	47a8      	blx	r5

	pf_cfg.event_mem_pool.memStartAdd        = (uint8_t *)event_pool_memory;
1000cb96:	465b      	mov	r3, fp
1000cb98:	60bb      	str	r3, [r7, #8]
	pf_cfg.event_mem_pool.memSize            = sizeof(event_pool_memory);
1000cb9a:	4653      	mov	r3, sl
1000cb9c:	60fb      	str	r3, [r7, #12]
	pf_cfg.event_params_mem_pool.memStartAdd = (uint8_t *)event_params_memory;
1000cb9e:	464b      	mov	r3, r9
1000cba0:	613b      	str	r3, [r7, #16]
	pf_cfg.event_params_mem_pool.memSize     = sizeof(event_params_memory);
1000cba2:	4643      	mov	r3, r8
1000cba4:	617b      	str	r3, [r7, #20]

	/* Initialize the BLE Event callbacks */
	for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gap_event_cb[idx] = NULL;
1000cba6:	4b61      	ldr	r3, [pc, #388]	; (1000cd2c <ble_device_init+0x210>)
1000cba8:	601c      	str	r4, [r3, #0]
1000cbaa:	605c      	str	r4, [r3, #4]
1000cbac:	609c      	str	r4, [r3, #8]
1000cbae:	60dc      	str	r4, [r3, #12]
1000cbb0:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_client_event_cb[idx] = NULL;
1000cbb2:	4b5f      	ldr	r3, [pc, #380]	; (1000cd30 <ble_device_init+0x214>)
1000cbb4:	601c      	str	r4, [r3, #0]
1000cbb6:	605c      	str	r4, [r3, #4]
1000cbb8:	609c      	str	r4, [r3, #8]
1000cbba:	60dc      	str	r4, [r3, #12]
1000cbbc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
	{
		ble_mgr_gatt_server_event_cb[idx] = NULL;
1000cbbe:	4b5d      	ldr	r3, [pc, #372]	; (1000cd34 <ble_device_init+0x218>)
1000cbc0:	601c      	str	r4, [r3, #0]
1000cbc2:	605c      	str	r4, [r3, #4]
1000cbc4:	609c      	str	r4, [r3, #8]
1000cbc6:	60dc      	str	r4, [r3, #12]
1000cbc8:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_l2cap_event_cb[idx] = NULL;
1000cbca:	4b5b      	ldr	r3, [pc, #364]	; (1000cd38 <ble_device_init+0x21c>)
1000cbcc:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_htpt_event_cb[idx] = NULL;
1000cbce:	4b5b      	ldr	r3, [pc, #364]	; (1000cd3c <ble_device_init+0x220>)
1000cbd0:	601c      	str	r4, [r3, #0]
	}
	
	for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_dtm_event_cb[idx] = NULL;
1000cbd2:	4b5b      	ldr	r3, [pc, #364]	; (1000cd40 <ble_device_init+0x224>)
1000cbd4:	601c      	str	r4, [r3, #0]
1000cbd6:	605c      	str	r4, [r3, #4]
1000cbd8:	609c      	str	r4, [r3, #8]
1000cbda:	60dc      	str	r4, [r3, #12]
1000cbdc:	611c      	str	r4, [r3, #16]
	}
	
	for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
	{
		ble_mgr_custom_event_cb[idx] = NULL;
1000cbde:	4b59      	ldr	r3, [pc, #356]	; (1000cd44 <ble_device_init+0x228>)
1000cbe0:	601c      	str	r4, [r3, #0]
1000cbe2:	4c59      	ldr	r4, [pc, #356]	; (1000cd48 <ble_device_init+0x22c>)
1000cbe4:	239b      	movs	r3, #155	; 0x9b
1000cbe6:	009b      	lsls	r3, r3, #2
1000cbe8:	4698      	mov	r8, r3
1000cbea:	44a0      	add	r8, r4
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cbec:	4f44      	ldr	r7, [pc, #272]	; (1000cd00 <ble_device_init+0x1e4>)
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cbee:	2540      	movs	r5, #64	; 0x40
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
    {
        memset(&ble_dev_info[idx], 0, sizeof(ble_connected_dev_info_t));
1000cbf0:	227c      	movs	r2, #124	; 0x7c
1000cbf2:	2100      	movs	r1, #0
1000cbf4:	0020      	movs	r0, r4
1000cbf6:	47b8      	blx	r7
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
1000cbf8:	0023      	movs	r3, r4
1000cbfa:	335e      	adds	r3, #94	; 0x5e
1000cbfc:	2200      	movs	r2, #0
1000cbfe:	701a      	strb	r2, [r3, #0]
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
1000cc00:	7625      	strb	r5, [r4, #24]
1000cc02:	347c      	adds	r4, #124	; 0x7c
	{
		ble_mgr_custom_event_cb[idx] = NULL;
	}
        
    /* Set the BLE Device connection state */
    for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cc04:	45a0      	cmp	r8, r4
1000cc06:	d1f3      	bne.n	1000cbf0 <ble_device_init+0xd4>
		ble_dev_info[idx].conn_state = BLE_DEVICE_DEFAULT_IDLE;
		/* Set Invalid to Bonding information */
		ble_dev_info[idx].bond_info.status = AT_BLE_GAP_INVALID_PARAM;
    }
	/* Need to reset the count to 0 for storing it only in SRAM */
	ble_device_count = 0; 
1000cc08:	4b50      	ldr	r3, [pc, #320]	; (1000cd4c <ble_device_init+0x230>)
1000cc0a:	701a      	strb	r2, [r3, #0]
	
	
#if defined ATT_DB_MEMORY
	pf_cfg.memPool.memSize = BLE_ATT_DB_MEMORY_SIZE;
1000cc0c:	4846      	ldr	r0, [pc, #280]	; (1000cd28 <ble_device_init+0x20c>)
1000cc0e:	4b3e      	ldr	r3, [pc, #248]	; (1000cd08 <ble_device_init+0x1ec>)
1000cc10:	6043      	str	r3, [r0, #4]
	pf_cfg.memPool.memStartAdd = (uint8_t *)att_db_data;
1000cc12:	4b3e      	ldr	r3, [pc, #248]	; (1000cd0c <ble_device_init+0x1f0>)
1000cc14:	6003      	str	r3, [r0, #0]
{
	/* Initialize the platform */
	DBG_LOG_DEV("[ble_init]\t\t\tInitializing SAMB11");
	
	/* Init BLE device */
	if(at_ble_init(args) != AT_BLE_SUCCESS)
1000cc16:	4b4e      	ldr	r3, [pc, #312]	; (1000cd50 <ble_device_init+0x234>)
1000cc18:	4798      	blx	r3
1000cc1a:	2800      	cmp	r0, #0
1000cc1c:	d00b      	beq.n	1000cc36 <ble_device_init+0x11a>
	{
		DBG_LOG("[ble_init]\t\tSAMB11 Initialization failed");
1000cc1e:	4e4d      	ldr	r6, [pc, #308]	; (1000cd54 <ble_device_init+0x238>)
1000cc20:	0030      	movs	r0, r6
1000cc22:	4d4d      	ldr	r5, [pc, #308]	; (1000cd58 <ble_device_init+0x23c>)
1000cc24:	47a8      	blx	r5
1000cc26:	484d      	ldr	r0, [pc, #308]	; (1000cd5c <ble_device_init+0x240>)
1000cc28:	4c4d      	ldr	r4, [pc, #308]	; (1000cd60 <ble_device_init+0x244>)
1000cc2a:	47a0      	blx	r4
		DBG_LOG("[ble_init]\t\tPlease check the power and connection / hardware connector");	
1000cc2c:	0030      	movs	r0, r6
1000cc2e:	47a8      	blx	r5
1000cc30:	484c      	ldr	r0, [pc, #304]	; (1000cd64 <ble_device_init+0x248>)
1000cc32:	47a0      	blx	r4
1000cc34:	e7fe      	b.n	1000cc34 <ble_device_init+0x118>
#endif
	
	ble_init(&pf_cfg);

	/* Register it in first index of callback handler */
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, 
1000cc36:	4a4c      	ldr	r2, [pc, #304]	; (1000cd68 <ble_device_init+0x24c>)
1000cc38:	2100      	movs	r1, #0
1000cc3a:	2000      	movs	r0, #0
1000cc3c:	4c4b      	ldr	r4, [pc, #300]	; (1000cd6c <ble_device_init+0x250>)
1000cc3e:	47a0      	blx	r4
									BLE_GAP_EVENT_TYPE, 
									ble_mgr_gap_handle);
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
1000cc40:	4a4b      	ldr	r2, [pc, #300]	; (1000cd70 <ble_device_init+0x254>)
1000cc42:	2102      	movs	r1, #2
1000cc44:	2000      	movs	r0, #0
1000cc46:	47a0      	blx	r4
{
	if ((name == NULL) || (name_len < 1))
	{
		return AT_BLE_INVALID_PARAM;
	}
	return at_ble_device_name_set(name, name_len);
1000cc48:	2109      	movs	r1, #9
1000cc4a:	484a      	ldr	r0, [pc, #296]	; (1000cd74 <ble_device_init+0x258>)
1000cc4c:	4b4a      	ldr	r3, [pc, #296]	; (1000cd78 <ble_device_init+0x25c>)
1000cc4e:	4798      	blx	r3
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK,
									BLE_GATT_SERVER_EVENT_TYPE,
									ble_mgr_gatt_server_handle);
									
	dev_name = (char *)BLE_DEVICE_NAME;
	if (ble_set_device_name((uint8_t *)dev_name, strlen(dev_name)) != AT_BLE_SUCCESS)
1000cc50:	2800      	cmp	r0, #0
1000cc52:	d005      	beq.n	1000cc60 <ble_device_init+0x144>
	{
		DBG_LOG("Device name set failed");
1000cc54:	483f      	ldr	r0, [pc, #252]	; (1000cd54 <ble_device_init+0x238>)
1000cc56:	4b40      	ldr	r3, [pc, #256]	; (1000cd58 <ble_device_init+0x23c>)
1000cc58:	4798      	blx	r3
1000cc5a:	4848      	ldr	r0, [pc, #288]	; (1000cd7c <ble_device_init+0x260>)
1000cc5c:	4b40      	ldr	r3, [pc, #256]	; (1000cd60 <ble_device_init+0x244>)
1000cc5e:	4798      	blx	r3

/* Set BLE Address and device configuration, If address is NULL then it will use BD public address */
static void ble_set_dev_config(at_ble_addr_t *addr)
{
	at_ble_dev_config_t stDevConfig;
	at_ble_addr_t address = {AT_BLE_ADDRESS_PUBLIC, {0xAB, 0xCD, 0xEF, 0xAB, 0xCD, 0xEF}};
1000cc60:	2207      	movs	r2, #7
1000cc62:	4947      	ldr	r1, [pc, #284]	; (1000cd80 <ble_device_init+0x264>)
1000cc64:	3108      	adds	r1, #8
1000cc66:	4668      	mov	r0, sp
1000cc68:	4b46      	ldr	r3, [pc, #280]	; (1000cd84 <ble_device_init+0x268>)
1000cc6a:	4798      	blx	r3
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
1000cc6c:	2226      	movs	r2, #38	; 0x26
1000cc6e:	2100      	movs	r1, #0
1000cc70:	a802      	add	r0, sp, #8
1000cc72:	4b23      	ldr	r3, [pc, #140]	; (1000cd00 <ble_device_init+0x1e4>)
1000cc74:	4798      	blx	r3
	
	if (addr == NULL)
1000cc76:	2e00      	cmp	r6, #0
1000cc78:	d10c      	bne.n	1000cc94 <ble_device_init+0x178>
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cc7a:	4668      	mov	r0, sp
1000cc7c:	4b42      	ldr	r3, [pc, #264]	; (1000cd88 <ble_device_init+0x26c>)
1000cc7e:	4798      	blx	r3
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cc80:	466e      	mov	r6, sp
	memset(&stDevConfig, 0, sizeof(at_ble_dev_config_t));
	
	if (addr == NULL)
	{		
		/* get BD address from BLE device */
		if(at_ble_addr_get(&address) != AT_BLE_SUCCESS)
1000cc82:	2800      	cmp	r0, #0
1000cc84:	d006      	beq.n	1000cc94 <ble_device_init+0x178>
		{
			DBG_LOG("[ble_set_dev_config]\t\tBD address get failed");
1000cc86:	4833      	ldr	r0, [pc, #204]	; (1000cd54 <ble_device_init+0x238>)
1000cc88:	4b33      	ldr	r3, [pc, #204]	; (1000cd58 <ble_device_init+0x23c>)
1000cc8a:	4798      	blx	r3
1000cc8c:	483f      	ldr	r0, [pc, #252]	; (1000cd8c <ble_device_init+0x270>)
1000cc8e:	4b34      	ldr	r3, [pc, #208]	; (1000cd60 <ble_device_init+0x244>)
1000cc90:	4798      	blx	r3
		}
		
		/* Copy the BD address into address pointer */
		addr = &address;
1000cc92:	466e      	mov	r6, sp
	addr->addr[1],
	addr->addr[0], addr->type);
	
	/* Set device configuration */
	/* Device role */
	stDevConfig.role = (at_ble_dev_role_t)BLE_DEVICE_ROLE;
1000cc94:	ac02      	add	r4, sp, #8
1000cc96:	230a      	movs	r3, #10
1000cc98:	7023      	strb	r3, [r4, #0]
	/* device renew duration */
	stDevConfig.renew_dur = AT_RENEW_DUR_VAL_MIN;
1000cc9a:	4b3d      	ldr	r3, [pc, #244]	; (1000cd90 <ble_device_init+0x274>)
1000cc9c:	8063      	strh	r3, [r4, #2]
	/* device address type */
	memcpy((uint8_t *)&stDevConfig.address, (uint8_t *)addr, sizeof(at_ble_addr_t));
1000cc9e:	2207      	movs	r2, #7
1000cca0:	0031      	movs	r1, r6
1000cca2:	a803      	add	r0, sp, #12
1000cca4:	4b37      	ldr	r3, [pc, #220]	; (1000cd84 <ble_device_init+0x268>)
1000cca6:	4798      	blx	r3
	/* Attributes */
	stDevConfig.att_cfg.b2NamePerm = AT_BLE_WRITE_DISABLE;
1000cca8:	2300      	movs	r3, #0
1000ccaa:	76e3      	strb	r3, [r4, #27]
	stDevConfig.att_cfg.b2AppearancePerm = AT_BLE_WRITE_DISABLE;
1000ccac:	7723      	strb	r3, [r4, #28]
	stDevConfig.att_cfg.b1EnableSpcs = 0;
1000ccae:	7763      	strb	r3, [r4, #29]
	stDevConfig.att_cfg.b1EnableServiceChanged = 0;
1000ccb0:	77a3      	strb	r3, [r4, #30]
	stDevConfig.att_cfg.b2Rfu = AT_BLE_WRITE_DISABLE;
1000ccb2:	77e3      	strb	r3, [r4, #31]
	/* Handles */
	stDevConfig.gap_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ccb4:	8423      	strh	r3, [r4, #32]
	stDevConfig.gatt_start_hdl = AT_BLE_AUTO_ALLOC_HANDLE;
1000ccb6:	8463      	strh	r3, [r4, #34]	; 0x22
	/* MTU */
	stDevConfig.max_mtu = AT_MTU_VAL_RECOMMENDED;
1000ccb8:	2380      	movs	r3, #128	; 0x80
1000ccba:	009b      	lsls	r3, r3, #2
1000ccbc:	84a3      	strh	r3, [r4, #36]	; 0x24
	
	if(at_ble_set_dev_config(&stDevConfig) != AT_BLE_SUCCESS)
1000ccbe:	0020      	movs	r0, r4
1000ccc0:	4b34      	ldr	r3, [pc, #208]	; (1000cd94 <ble_device_init+0x278>)
1000ccc2:	4798      	blx	r3
1000ccc4:	2800      	cmp	r0, #0
1000ccc6:	d005      	beq.n	1000ccd4 <ble_device_init+0x1b8>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device configuration failed");
1000ccc8:	4822      	ldr	r0, [pc, #136]	; (1000cd54 <ble_device_init+0x238>)
1000ccca:	4b23      	ldr	r3, [pc, #140]	; (1000cd58 <ble_device_init+0x23c>)
1000cccc:	4798      	blx	r3
1000ccce:	4832      	ldr	r0, [pc, #200]	; (1000cd98 <ble_device_init+0x27c>)
1000ccd0:	4b23      	ldr	r3, [pc, #140]	; (1000cd60 <ble_device_init+0x244>)
1000ccd2:	4798      	blx	r3
	}
	
	if (at_ble_addr_set(addr) != AT_BLE_SUCCESS)
1000ccd4:	0030      	movs	r0, r6
1000ccd6:	4b31      	ldr	r3, [pc, #196]	; (1000cd9c <ble_device_init+0x280>)
1000ccd8:	4798      	blx	r3
1000ccda:	2800      	cmp	r0, #0
1000ccdc:	d005      	beq.n	1000ccea <ble_device_init+0x1ce>
	{
		DBG_LOG("[ble_set_dev_config]\tSet BLE Device Address failed");
1000ccde:	481d      	ldr	r0, [pc, #116]	; (1000cd54 <ble_device_init+0x238>)
1000cce0:	4b1d      	ldr	r3, [pc, #116]	; (1000cd58 <ble_device_init+0x23c>)
1000cce2:	4798      	blx	r3
1000cce4:	482e      	ldr	r0, [pc, #184]	; (1000cda0 <ble_device_init+0x284>)
1000cce6:	4b1e      	ldr	r3, [pc, #120]	; (1000cd60 <ble_device_init+0x244>)
1000cce8:	4798      	blx	r3
	{
		DBG_LOG("Device name set failed");
	}
	
	ble_set_dev_config(addr);	
}
1000ccea:	b00d      	add	sp, #52	; 0x34
1000ccec:	bc3c      	pop	{r2, r3, r4, r5}
1000ccee:	4690      	mov	r8, r2
1000ccf0:	4699      	mov	r9, r3
1000ccf2:	46a2      	mov	sl, r4
1000ccf4:	46ab      	mov	fp, r5
1000ccf6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ccf8:	10018278 	.word	0x10018278
1000ccfc:	10018280 	.word	0x10018280
1000cd00:	100155cd 	.word	0x100155cd
1000cd04:	10019a44 	.word	0x10019a44
1000cd08:	000004e2 	.word	0x000004e2
1000cd0c:	10017d98 	.word	0x10017d98
1000cd10:	1001827c 	.word	0x1001827c
1000cd14:	10019a7c 	.word	0x10019a7c
1000cd18:	10019a74 	.word	0x10019a74
1000cd1c:	10019db0 	.word	0x10019db0
1000cd20:	10017998 	.word	0x10017998
1000cd24:	10018288 	.word	0x10018288
1000cd28:	10019a58 	.word	0x10019a58
1000cd2c:	10019a1c 	.word	0x10019a1c
1000cd30:	10019a30 	.word	0x10019a30
1000cd34:	10019784 	.word	0x10019784
1000cd38:	10019a78 	.word	0x10019a78
1000cd3c:	10019780 	.word	0x10019780
1000cd40:	10019a08 	.word	0x10019a08
1000cd44:	10019fbc 	.word	0x10019fbc
1000cd48:	10019798 	.word	0x10019798
1000cd4c:	10019a04 	.word	0x10019a04
1000cd50:	1000ebc1 	.word	0x1000ebc1
1000cd54:	1001677c 	.word	0x1001677c
1000cd58:	10015835 	.word	0x10015835
1000cd5c:	100172cc 	.word	0x100172cc
1000cd60:	10015715 	.word	0x10015715
1000cd64:	100172f8 	.word	0x100172f8
1000cd68:	1001754c 	.word	0x1001754c
1000cd6c:	1000ca4d 	.word	0x1000ca4d
1000cd70:	10016ee8 	.word	0x10016ee8
1000cd74:	10017340 	.word	0x10017340
1000cd78:	1000ead9 	.word	0x1000ead9
1000cd7c:	1001734c 	.word	0x1001734c
1000cd80:	10016ed8 	.word	0x10016ed8
1000cd84:	100155bb 	.word	0x100155bb
1000cd88:	1000eb0d 	.word	0x1000eb0d
1000cd8c:	10017364 	.word	0x10017364
1000cd90:	00003a98 	.word	0x00003a98
1000cd94:	1000eb31 	.word	0x1000eb31
1000cd98:	10017390 	.word	0x10017390
1000cd9c:	1000ed75 	.word	0x1000ed75
1000cda0:	100173cc 	.word	0x100173cc

1000cda4 <ble_send_slave_sec_request>:
	return AT_BLE_FAILURE;
}

/** @brief function to send slave security request */
at_ble_status_t ble_send_slave_sec_request(at_ble_handle_t conn_handle)
{
1000cda4:	b510      	push	{r4, lr}
	#if BLE_PAIR_ENABLE
		if (at_ble_send_slave_sec_request(conn_handle, BLE_MITM_REQ, BLE_BOND_REQ) == AT_BLE_SUCCESS)
1000cda6:	2200      	movs	r2, #0
1000cda8:	2100      	movs	r1, #0
1000cdaa:	4b06      	ldr	r3, [pc, #24]	; (1000cdc4 <ble_send_slave_sec_request+0x20>)
1000cdac:	4798      	blx	r3
1000cdae:	2800      	cmp	r0, #0
1000cdb0:	d006      	beq.n	1000cdc0 <ble_send_slave_sec_request+0x1c>
			DBG_LOG_DEV("Slave security request successful");
			return AT_BLE_SUCCESS;
		}
		else
		{
			DBG_LOG("Slave security request failed");
1000cdb2:	4805      	ldr	r0, [pc, #20]	; (1000cdc8 <ble_send_slave_sec_request+0x24>)
1000cdb4:	4b05      	ldr	r3, [pc, #20]	; (1000cdcc <ble_send_slave_sec_request+0x28>)
1000cdb6:	4798      	blx	r3
1000cdb8:	4805      	ldr	r0, [pc, #20]	; (1000cdd0 <ble_send_slave_sec_request+0x2c>)
1000cdba:	4b06      	ldr	r3, [pc, #24]	; (1000cdd4 <ble_send_slave_sec_request+0x30>)
1000cdbc:	4798      	blx	r3
		}
	#endif
	return AT_BLE_FAILURE;
1000cdbe:	20e2      	movs	r0, #226	; 0xe2
}
1000cdc0:	bd10      	pop	{r4, pc}
1000cdc2:	46c0      	nop			; (mov r8, r8)
1000cdc4:	1000fb59 	.word	0x1000fb59
1000cdc8:	1001677c 	.word	0x1001677c
1000cdcc:	10015835 	.word	0x10015835
1000cdd0:	1001741c 	.word	0x1001741c
1000cdd4:	10015715 	.word	0x10015715

1000cdd8 <ble_connected_state_handler>:
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000cdd8:	b5f0      	push	{r4, r5, r6, r7, lr}
1000cdda:	465f      	mov	r7, fp
1000cddc:	464e      	mov	r6, r9
1000cdde:	4645      	mov	r5, r8
1000cde0:	b4e0      	push	{r5, r6, r7}
1000cde2:	b09a      	sub	sp, #104	; 0x68
1000cde4:	0005      	movs	r5, r0
	at_ble_connected_t *conn_params;
	uint8_t idx = 0;
	conn_params = (at_ble_connected_t *)params;
	bool peripheral_device_added = false;
	
	if (conn_params->conn_status == AT_BLE_SUCCESS)
1000cde6:	7a86      	ldrb	r6, [r0, #10]
1000cde8:	2e00      	cmp	r6, #0
1000cdea:	d000      	beq.n	1000cdee <ble_connected_state_handler+0x16>
1000cdec:	e0c6      	b.n	1000cf7c <ble_connected_state_handler+0x1a4>
	{
		DBG_LOG("Connected to peer device with address 0x%02x%02x%02x%02x%02x%02x",
1000cdee:	4875      	ldr	r0, [pc, #468]	; (1000cfc4 <ble_connected_state_handler+0x1ec>)
1000cdf0:	4f75      	ldr	r7, [pc, #468]	; (1000cfc8 <ble_connected_state_handler+0x1f0>)
1000cdf2:	47b8      	blx	r7
1000cdf4:	792b      	ldrb	r3, [r5, #4]
1000cdf6:	796a      	ldrb	r2, [r5, #5]
1000cdf8:	79a9      	ldrb	r1, [r5, #6]
1000cdfa:	7868      	ldrb	r0, [r5, #1]
1000cdfc:	9002      	str	r0, [sp, #8]
1000cdfe:	78a8      	ldrb	r0, [r5, #2]
1000ce00:	9001      	str	r0, [sp, #4]
1000ce02:	78e8      	ldrb	r0, [r5, #3]
1000ce04:	9000      	str	r0, [sp, #0]
1000ce06:	4871      	ldr	r0, [pc, #452]	; (1000cfcc <ble_connected_state_handler+0x1f4>)
1000ce08:	4c71      	ldr	r4, [pc, #452]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000ce0a:	47a0      	blx	r4
		conn_params->peer_addr.addr[3],
		conn_params->peer_addr.addr[2],
		conn_params->peer_addr.addr[1],
		conn_params->peer_addr.addr[0]);
		
		DBG_LOG("Connection Handle %d", conn_params->handle);
1000ce0c:	486d      	ldr	r0, [pc, #436]	; (1000cfc4 <ble_connected_state_handler+0x1ec>)
1000ce0e:	47b8      	blx	r7
1000ce10:	8929      	ldrh	r1, [r5, #8]
1000ce12:	4870      	ldr	r0, [pc, #448]	; (1000cfd4 <ble_connected_state_handler+0x1fc>)
1000ce14:	47a0      	blx	r4
		
		memcpy((uint8_t *)&connected_state_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));	
1000ce16:	2212      	movs	r2, #18
1000ce18:	0029      	movs	r1, r5
1000ce1a:	486f      	ldr	r0, [pc, #444]	; (1000cfd8 <ble_connected_state_handler+0x200>)
1000ce1c:	4b6f      	ldr	r3, [pc, #444]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000ce1e:	4798      	blx	r3
		if(memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ce20:	9504      	str	r5, [sp, #16]
1000ce22:	2207      	movs	r2, #7
1000ce24:	0029      	movs	r1, r5
1000ce26:	486e      	ldr	r0, [pc, #440]	; (1000cfe0 <ble_connected_state_handler+0x208>)
1000ce28:	4b6e      	ldr	r3, [pc, #440]	; (1000cfe4 <ble_connected_state_handler+0x20c>)
1000ce2a:	4798      	blx	r3
1000ce2c:	2800      	cmp	r0, #0
1000ce2e:	d100      	bne.n	1000ce32 <ble_connected_state_handler+0x5a>
1000ce30:	e0ad      	b.n	1000cf8e <ble_connected_state_handler+0x1b6>
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
1000ce32:	782b      	ldrb	r3, [r5, #0]
1000ce34:	2b02      	cmp	r3, #2
1000ce36:	d000      	beq.n	1000ce3a <ble_connected_state_handler+0x62>
1000ce38:	e0a9      	b.n	1000cf8e <ble_connected_state_handler+0x1b6>
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
1000ce3a:	2250      	movs	r2, #80	; 0x50
1000ce3c:	2100      	movs	r1, #0
1000ce3e:	a806      	add	r0, sp, #24
1000ce40:	4b69      	ldr	r3, [pc, #420]	; (1000cfe8 <ble_connected_state_handler+0x210>)
1000ce42:	4798      	blx	r3
1000ce44:	4f69      	ldr	r7, [pc, #420]	; (1000cfec <ble_connected_state_handler+0x214>)
		{
			/* Peripheral Device */
			if (conn_params->peer_addr.type == AT_BLE_ADDRESS_RANDOM_PRIVATE_RESOLVABLE) 
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
1000ce46:	2300      	movs	r3, #0
1000ce48:	e00b      	b.n	1000ce62 <ble_connected_state_handler+0x8a>
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ce4a:	1c59      	adds	r1, r3, #1
1000ce4c:	7814      	ldrb	r4, [r2, #0]
1000ce4e:	a806      	add	r0, sp, #24
1000ce50:	54c4      	strb	r4, [r0, r3]
1000ce52:	3201      	adds	r2, #1
1000ce54:	b28b      	uxth	r3, r1
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
				{
					for (idx2 = 0; idx2 < AT_BLE_MAX_KEY_LEN; idx2++)
1000ce56:	42b3      	cmp	r3, r6
1000ce58:	d1f7      	bne.n	1000ce4a <ble_connected_state_handler+0x72>
1000ce5a:	377c      	adds	r7, #124	; 0x7c
					{
						irk_key[key_len++] = ble_dev_info[idx1].bond_info.peer_irk.key[idx2];
1000ce5c:	1e33      	subs	r3, r6, #0
			{
				uint8_t idx1, idx2;
				uint16_t key_len = 0;
				uint8_t nb_keys = BLE_MAX_DEVICE_CONNECTED;
				uint8_t irk_key[BLE_MAX_DEVICE_CONNECTED * AT_BLE_MAX_KEY_LEN] = {0, };
				for (idx1 = 0; idx1 < BLE_MAX_DEVICE_CONNECTED; idx1++)
1000ce5e:	2b50      	cmp	r3, #80	; 0x50
1000ce60:	d004      	beq.n	1000ce6c <ble_connected_state_handler+0x94>
1000ce62:	001e      	movs	r6, r3
1000ce64:	3610      	adds	r6, #16
1000ce66:	b2b6      	uxth	r6, r6
	return status;
}

/** @brief function to handle connected event received from stack */
at_ble_status_t ble_connected_state_handler(void *params)
{
1000ce68:	003a      	movs	r2, r7
1000ce6a:	e7ee      	b.n	1000ce4a <ble_connected_state_handler+0x72>
					}
					
				}
				if (nb_keys)
				{
					if(at_ble_random_address_resolve(BLE_MAX_DEVICE_CONNECTED, &conn_params->peer_addr, irk_key) == AT_BLE_SUCCESS)
1000ce6c:	aa06      	add	r2, sp, #24
1000ce6e:	0029      	movs	r1, r5
1000ce70:	2005      	movs	r0, #5
1000ce72:	4b5f      	ldr	r3, [pc, #380]	; (1000cff0 <ble_connected_state_handler+0x218>)
1000ce74:	4798      	blx	r3
1000ce76:	1e06      	subs	r6, r0, #0
1000ce78:	d100      	bne.n	1000ce7c <ble_connected_state_handler+0xa4>
1000ce7a:	e09c      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
						DBG_LOG_DEV("Resolving Random address success**");
						return AT_BLE_SUCCESS;
					}
					else
					{
						DBG_LOG("Resolving Random address failed**");
1000ce7c:	4851      	ldr	r0, [pc, #324]	; (1000cfc4 <ble_connected_state_handler+0x1ec>)
1000ce7e:	4b52      	ldr	r3, [pc, #328]	; (1000cfc8 <ble_connected_state_handler+0x1f0>)
1000ce80:	4798      	blx	r3
1000ce82:	485c      	ldr	r0, [pc, #368]	; (1000cff4 <ble_connected_state_handler+0x21c>)
1000ce84:	4b52      	ldr	r3, [pc, #328]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000ce86:	4798      	blx	r3
						return AT_BLE_FAILURE;
1000ce88:	26e2      	movs	r6, #226	; 0xe2
1000ce8a:	e094      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
1000ce8c:	b2e7      	uxtb	r7, r4
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000ce8e:	9405      	str	r4, [sp, #20]
1000ce90:	2207      	movs	r2, #7
1000ce92:	9904      	ldr	r1, [sp, #16]
1000ce94:	4648      	mov	r0, r9
1000ce96:	47d8      	blx	fp
1000ce98:	2800      	cmp	r0, #0
1000ce9a:	d109      	bne.n	1000ceb0 <ble_connected_state_handler+0xd8>
				{
					ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ce9c:	9a05      	ldr	r2, [sp, #20]
1000ce9e:	0153      	lsls	r3, r2, #5
1000cea0:	1a9b      	subs	r3, r3, r2
1000cea2:	009a      	lsls	r2, r3, #2
1000cea4:	4b54      	ldr	r3, [pc, #336]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000cea6:	189b      	adds	r3, r3, r2
1000cea8:	335e      	adds	r3, #94	; 0x5e
1000ceaa:	2202      	movs	r2, #2
1000ceac:	701a      	strb	r2, [r3, #0]
1000ceae:	e02b      	b.n	1000cf08 <ble_connected_state_handler+0x130>
1000ceb0:	3401      	adds	r4, #1
1000ceb2:	237c      	movs	r3, #124	; 0x7c
1000ceb4:	469c      	mov	ip, r3
1000ceb6:	44e1      	add	r9, ip
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000ceb8:	2c05      	cmp	r4, #5
1000ceba:	d1e7      	bne.n	1000ce8c <ble_connected_state_handler+0xb4>
1000cebc:	e072      	b.n	1000cfa4 <ble_connected_state_handler+0x1cc>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cebe:	001c      	movs	r4, r3
1000cec0:	7811      	ldrb	r1, [r2, #0]
1000cec2:	2900      	cmp	r1, #0
1000cec4:	d11a      	bne.n	1000cefc <ble_connected_state_handler+0x124>
1000cec6:	e001      	b.n	1000cecc <ble_connected_state_handler+0xf4>
1000cec8:	2400      	movs	r4, #0
1000ceca:	2700      	movs	r7, #0
					{
						/* @Todo Need to Handle Random Address */
						memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)conn_params, sizeof(at_ble_connected_t));
1000cecc:	0163      	lsls	r3, r4, #5
1000cece:	4699      	mov	r9, r3
1000ced0:	1b18      	subs	r0, r3, r4
1000ced2:	0080      	lsls	r0, r0, #2
1000ced4:	4b48      	ldr	r3, [pc, #288]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000ced6:	4698      	mov	r8, r3
1000ced8:	4440      	add	r0, r8
1000ceda:	2212      	movs	r2, #18
1000cedc:	0029      	movs	r1, r5
1000cede:	4b3f      	ldr	r3, [pc, #252]	; (1000cfdc <ble_connected_state_handler+0x204>)
1000cee0:	4798      	blx	r3
						ble_device_count++;
1000cee2:	4a46      	ldr	r2, [pc, #280]	; (1000cffc <ble_connected_state_handler+0x224>)
1000cee4:	7813      	ldrb	r3, [r2, #0]
1000cee6:	3301      	adds	r3, #1
1000cee8:	b2db      	uxtb	r3, r3
1000ceea:	7013      	strb	r3, [r2, #0]
						ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000ceec:	464b      	mov	r3, r9
1000ceee:	1b1b      	subs	r3, r3, r4
1000cef0:	009b      	lsls	r3, r3, #2
1000cef2:	4443      	add	r3, r8
1000cef4:	335e      	adds	r3, #94	; 0x5e
1000cef6:	2202      	movs	r2, #2
1000cef8:	701a      	strb	r2, [r3, #0]
						break;
1000cefa:	e005      	b.n	1000cf08 <ble_connected_state_handler+0x130>
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cefc:	1c79      	adds	r1, r7, #1
1000cefe:	b2cf      	uxtb	r7, r1
1000cf00:	3301      	adds	r3, #1
1000cf02:	327c      	adds	r2, #124	; 0x7c
1000cf04:	2f05      	cmp	r7, #5
1000cf06:	d1da      	bne.n	1000cebe <ble_connected_state_handler+0xe6>
						break;
					}
				}
			}
			
			if(!memcmp((uint8_t *)&ble_peripheral_dev_address, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cf08:	2207      	movs	r2, #7
1000cf0a:	0029      	movs	r1, r5
1000cf0c:	4834      	ldr	r0, [pc, #208]	; (1000cfe0 <ble_connected_state_handler+0x208>)
1000cf0e:	4b35      	ldr	r3, [pc, #212]	; (1000cfe4 <ble_connected_state_handler+0x20c>)
1000cf10:	4798      	blx	r3
1000cf12:	2800      	cmp	r0, #0
1000cf14:	d10c      	bne.n	1000cf30 <ble_connected_state_handler+0x158>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
1000cf16:	017b      	lsls	r3, r7, #5
1000cf18:	1bdb      	subs	r3, r3, r7
1000cf1a:	009b      	lsls	r3, r3, #2
1000cf1c:	4a36      	ldr	r2, [pc, #216]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000cf1e:	18d3      	adds	r3, r2, r3
1000cf20:	2205      	movs	r2, #5
1000cf22:	749a      	strb	r2, [r3, #18]
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cf24:	3202      	adds	r2, #2
1000cf26:	2100      	movs	r1, #0
1000cf28:	482d      	ldr	r0, [pc, #180]	; (1000cfe0 <ble_connected_state_handler+0x208>)
1000cf2a:	4b2f      	ldr	r3, [pc, #188]	; (1000cfe8 <ble_connected_state_handler+0x210>)
1000cf2c:	4798      	blx	r3
1000cf2e:	e042      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_CENTRAL;
			}
			else
			{
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000cf30:	4b31      	ldr	r3, [pc, #196]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000cf32:	4698      	mov	r8, r3
1000cf34:	017c      	lsls	r4, r7, #5
1000cf36:	1be3      	subs	r3, r4, r7
1000cf38:	009b      	lsls	r3, r3, #2
1000cf3a:	4443      	add	r3, r8
1000cf3c:	220a      	movs	r2, #10
1000cf3e:	749a      	strb	r2, [r3, #18]
				peripheral_device_added = true;
			}
			/* Reset the ble_peripheral_dev_address to identify the initiator */
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
1000cf40:	3a03      	subs	r2, #3
1000cf42:	2100      	movs	r1, #0
1000cf44:	4826      	ldr	r0, [pc, #152]	; (1000cfe0 <ble_connected_state_handler+0x208>)
1000cf46:	4b28      	ldr	r3, [pc, #160]	; (1000cfe8 <ble_connected_state_handler+0x210>)
1000cf48:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
		}		
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000cf4a:	1be4      	subs	r4, r4, r7
1000cf4c:	00a4      	lsls	r4, r4, #2
1000cf4e:	4444      	add	r4, r8
1000cf50:	7ca3      	ldrb	r3, [r4, #18]
1000cf52:	2b0a      	cmp	r3, #10
1000cf54:	d12f      	bne.n	1000cfb6 <ble_connected_state_handler+0x1de>
1000cf56:	e00d      	b.n	1000cf74 <ble_connected_state_handler+0x19c>
			memset((uint8_t *)&ble_peripheral_dev_address, 0, sizeof(at_ble_addr_t));
					
		}
		else
		{
			DBG_LOG("Max number of connection reached: %d ===>Disconnecting...", ble_device_count);
1000cf58:	481a      	ldr	r0, [pc, #104]	; (1000cfc4 <ble_connected_state_handler+0x1ec>)
1000cf5a:	4b1b      	ldr	r3, [pc, #108]	; (1000cfc8 <ble_connected_state_handler+0x1f0>)
1000cf5c:	4798      	blx	r3
1000cf5e:	4b27      	ldr	r3, [pc, #156]	; (1000cffc <ble_connected_state_handler+0x224>)
1000cf60:	7819      	ldrb	r1, [r3, #0]
1000cf62:	b2c9      	uxtb	r1, r1
1000cf64:	4826      	ldr	r0, [pc, #152]	; (1000d000 <ble_connected_state_handler+0x228>)
1000cf66:	4b1a      	ldr	r3, [pc, #104]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000cf68:	4798      	blx	r3
			at_ble_disconnect(conn_params->handle, AT_BLE_TERMINATED_BY_USER);
1000cf6a:	8928      	ldrh	r0, [r5, #8]
1000cf6c:	2113      	movs	r1, #19
1000cf6e:	4b25      	ldr	r3, [pc, #148]	; (1000d004 <ble_connected_state_handler+0x22c>)
1000cf70:	4798      	blx	r3
1000cf72:	e020      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
		
#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
		
        if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
        {
	 		ble_send_slave_sec_request(conn_params->handle);
1000cf74:	8928      	ldrh	r0, [r5, #8]
1000cf76:	4b24      	ldr	r3, [pc, #144]	; (1000d008 <ble_connected_state_handler+0x230>)
1000cf78:	4798      	blx	r3
1000cf7a:	e01c      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
        }
#endif
	} 
	else
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
1000cf7c:	4811      	ldr	r0, [pc, #68]	; (1000cfc4 <ble_connected_state_handler+0x1ec>)
1000cf7e:	4b12      	ldr	r3, [pc, #72]	; (1000cfc8 <ble_connected_state_handler+0x1f0>)
1000cf80:	4798      	blx	r3
1000cf82:	7aa9      	ldrb	r1, [r5, #10]
1000cf84:	4821      	ldr	r0, [pc, #132]	; (1000d00c <ble_connected_state_handler+0x234>)
1000cf86:	4b12      	ldr	r3, [pc, #72]	; (1000cfd0 <ble_connected_state_handler+0x1f8>)
1000cf88:	4798      	blx	r3
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
1000cf8a:	2600      	movs	r6, #0
1000cf8c:	e013      	b.n	1000cfb6 <ble_connected_state_handler+0x1de>
					DBG_LOG_DEV("New Connection");
				}				
			}
		}
			
		if (ble_device_count < BLE_MAX_DEVICE_CONNECTED)
1000cf8e:	4b1b      	ldr	r3, [pc, #108]	; (1000cffc <ble_connected_state_handler+0x224>)
1000cf90:	781b      	ldrb	r3, [r3, #0]
1000cf92:	b2db      	uxtb	r3, r3
1000cf94:	2b04      	cmp	r3, #4
1000cf96:	d8df      	bhi.n	1000cf58 <ble_connected_state_handler+0x180>
1000cf98:	4b17      	ldr	r3, [pc, #92]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000cf9a:	4699      	mov	r9, r3
1000cf9c:	2400      	movs	r4, #0
		{
			bool conn_exists = false;
			for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
			{
				if(!memcmp((uint8_t *)&ble_dev_info[idx].conn_info.peer_addr, (uint8_t *)&conn_params->peer_addr, sizeof(at_ble_addr_t)))
1000cf9e:	4b11      	ldr	r3, [pc, #68]	; (1000cfe4 <ble_connected_state_handler+0x20c>)
1000cfa0:	469b      	mov	fp, r3
1000cfa2:	e773      	b.n	1000ce8c <ble_connected_state_handler+0xb4>
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
				{
					if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000cfa4:	235e      	movs	r3, #94	; 0x5e
1000cfa6:	4a14      	ldr	r2, [pc, #80]	; (1000cff8 <ble_connected_state_handler+0x220>)
1000cfa8:	5cd3      	ldrb	r3, [r2, r3]
1000cfaa:	2b00      	cmp	r3, #0
1000cfac:	d08c      	beq.n	1000cec8 <ble_connected_state_handler+0xf0>
1000cfae:	4a18      	ldr	r2, [pc, #96]	; (1000d010 <ble_connected_state_handler+0x238>)
1000cfb0:	2301      	movs	r3, #1
				}
			}
			
			if (!conn_exists)
			{
				for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000cfb2:	2701      	movs	r7, #1
1000cfb4:	e783      	b.n	1000cebe <ble_connected_state_handler+0xe6>
	{
		DBG_LOG("Device Connection Failed - Status: %d", conn_params->conn_status);
	}
	ALL_UNUSED(peripheral_device_added);
	return AT_BLE_SUCCESS;
}
1000cfb6:	0030      	movs	r0, r6
1000cfb8:	b01a      	add	sp, #104	; 0x68
1000cfba:	bc1c      	pop	{r2, r3, r4}
1000cfbc:	4690      	mov	r8, r2
1000cfbe:	4699      	mov	r9, r3
1000cfc0:	46a3      	mov	fp, r4
1000cfc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000cfc4:	1001677c 	.word	0x1001677c
1000cfc8:	10015835 	.word	0x10015835
1000cfcc:	1001743c 	.word	0x1001743c
1000cfd0:	10015715 	.word	0x10015715
1000cfd4:	10017480 	.word	0x10017480
1000cfd8:	10019a44 	.word	0x10019a44
1000cfdc:	100155bb 	.word	0x100155bb
1000cfe0:	10018280 	.word	0x10018280
1000cfe4:	1001559d 	.word	0x1001559d
1000cfe8:	100155cd 	.word	0x100155cd
1000cfec:	100197de 	.word	0x100197de
1000cff0:	1000efe1 	.word	0x1000efe1
1000cff4:	10017498 	.word	0x10017498
1000cff8:	10019798 	.word	0x10019798
1000cffc:	10019a04 	.word	0x10019a04
1000d000:	100174bc 	.word	0x100174bc
1000d004:	1000efb5 	.word	0x1000efb5
1000d008:	1000cda5 	.word	0x1000cda5
1000d00c:	100174f8 	.word	0x100174f8
1000d010:	10019872 	.word	0x10019872

1000d014 <ble_resolv_rand_addr_handler>:

at_ble_status_t ble_resolv_rand_addr_handler(void *params)
{
1000d014:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d016:	4647      	mov	r7, r8
1000d018:	b480      	push	{r7}
	uint8_t idx;	
	bool device_found = false;
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
1000d01a:	7803      	ldrb	r3, [r0, #0]
1000d01c:	2b00      	cmp	r3, #0
1000d01e:	d141      	bne.n	1000d0a4 <ble_resolv_rand_addr_handler+0x90>
1000d020:	4d2f      	ldr	r5, [pc, #188]	; (1000d0e0 <ble_resolv_rand_addr_handler+0xcc>)
1000d022:	2400      	movs	r4, #0
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			/* Check the Resolved Address */
			if (!memcmp((uint8_t *)ble_resolv_rand_addr_status->irk, (uint8_t *)ble_dev_info[idx].bond_info.peer_irk.key, AT_BLE_MAX_KEY_LEN))
1000d024:	1c46      	adds	r6, r0, #1
1000d026:	4f2f      	ldr	r7, [pc, #188]	; (1000d0e4 <ble_resolv_rand_addr_handler+0xd0>)
1000d028:	2210      	movs	r2, #16
1000d02a:	0029      	movs	r1, r5
1000d02c:	0030      	movs	r0, r6
1000d02e:	47b8      	blx	r7
1000d030:	2800      	cmp	r0, #0
1000d032:	d03f      	beq.n	1000d0b4 <ble_resolv_rand_addr_handler+0xa0>
	bool peripheral_device_added = false;
	ble_resolv_rand_addr_status = (at_ble_resolv_rand_addr_status_t *)params;	
	
	if(ble_resolv_rand_addr_status->status == AT_BLE_SUCCESS)
	{		
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d034:	3401      	adds	r4, #1
1000d036:	b2e4      	uxtb	r4, r4
1000d038:	357c      	adds	r5, #124	; 0x7c
1000d03a:	2c05      	cmp	r4, #5
1000d03c:	d1f4      	bne.n	1000d028 <ble_resolv_rand_addr_handler+0x14>
1000d03e:	e031      	b.n	1000d0a4 <ble_resolv_rand_addr_handler+0x90>
1000d040:	b2dd      	uxtb	r5, r3
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d042:	001c      	movs	r4, r3
1000d044:	7811      	ldrb	r1, [r2, #0]
1000d046:	2900      	cmp	r1, #0
1000d048:	d122      	bne.n	1000d090 <ble_resolv_rand_addr_handler+0x7c>
1000d04a:	e001      	b.n	1000d050 <ble_resolv_rand_addr_handler+0x3c>
1000d04c:	2400      	movs	r4, #0
1000d04e:	2500      	movs	r5, #0
			{
				memcpy(&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d050:	4b25      	ldr	r3, [pc, #148]	; (1000d0e8 <ble_resolv_rand_addr_handler+0xd4>)
1000d052:	4698      	mov	r8, r3
1000d054:	0166      	lsls	r6, r4, #5
1000d056:	1b37      	subs	r7, r6, r4
1000d058:	00bf      	lsls	r7, r7, #2
1000d05a:	4447      	add	r7, r8
1000d05c:	2212      	movs	r2, #18
1000d05e:	4923      	ldr	r1, [pc, #140]	; (1000d0ec <ble_resolv_rand_addr_handler+0xd8>)
1000d060:	0038      	movs	r0, r7
1000d062:	4b23      	ldr	r3, [pc, #140]	; (1000d0f0 <ble_resolv_rand_addr_handler+0xdc>)
1000d064:	4798      	blx	r3
				ble_device_count++;
1000d066:	4a23      	ldr	r2, [pc, #140]	; (1000d0f4 <ble_resolv_rand_addr_handler+0xe0>)
1000d068:	7813      	ldrb	r3, [r2, #0]
1000d06a:	3301      	adds	r3, #1
1000d06c:	b2db      	uxtb	r3, r3
1000d06e:	7013      	strb	r3, [r2, #0]
				ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d070:	375e      	adds	r7, #94	; 0x5e
1000d072:	2302      	movs	r3, #2
1000d074:	703b      	strb	r3, [r7, #0]
				ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d076:	1b34      	subs	r4, r6, r4
1000d078:	00a4      	lsls	r4, r4, #2
1000d07a:	4444      	add	r4, r8
1000d07c:	3308      	adds	r3, #8
1000d07e:	74a3      	strb	r3, [r4, #18]
			}
		}
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
1000d080:	016b      	lsls	r3, r5, #5
1000d082:	1b5d      	subs	r5, r3, r5
1000d084:	00ad      	lsls	r5, r5, #2
1000d086:	4445      	add	r5, r8
1000d088:	7cab      	ldrb	r3, [r5, #18]
1000d08a:	2b0a      	cmp	r3, #10
1000d08c:	d123      	bne.n	1000d0d6 <ble_resolv_rand_addr_handler+0xc2>
1000d08e:	e004      	b.n	1000d09a <ble_resolv_rand_addr_handler+0x86>
1000d090:	3301      	adds	r3, #1
1000d092:	327c      	adds	r2, #124	; 0x7c
		peripheral_device_added = true;
	}
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
1000d094:	2b05      	cmp	r3, #5
1000d096:	d1d3      	bne.n	1000d040 <ble_resolv_rand_addr_handler+0x2c>
1000d098:	e01d      	b.n	1000d0d6 <ble_resolv_rand_addr_handler+0xc2>
	}
	DBG_LOG_DEV("Device idx:%d",idx);
	#if ((BLE_DEVICE_ROLE == BLE_ROLE_PERIPHERAL) || (BLE_DEVICE_ROLE == BLE_ROLE_ALL))
	if((ble_dev_info[idx].dev_role == AT_BLE_ROLE_PERIPHERAL) && (peripheral_device_added))
	{
		ble_send_slave_sec_request(connected_state_info.handle);
1000d09a:	4b14      	ldr	r3, [pc, #80]	; (1000d0ec <ble_resolv_rand_addr_handler+0xd8>)
1000d09c:	8918      	ldrh	r0, [r3, #8]
1000d09e:	4b16      	ldr	r3, [pc, #88]	; (1000d0f8 <ble_resolv_rand_addr_handler+0xe4>)
1000d0a0:	4798      	blx	r3
	}
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
1000d0a2:	e018      	b.n	1000d0d6 <ble_resolv_rand_addr_handler+0xc2>
	else
	{
		DBG_LOG_DEV("##########Device Not Found");
		for (idx = 0; idx < BLE_MAX_DEVICE_CONNECTED; idx++)
		{
			if(ble_dev_info[idx].conn_state == BLE_DEVICE_DEFAULT_IDLE)
1000d0a4:	235e      	movs	r3, #94	; 0x5e
1000d0a6:	4a10      	ldr	r2, [pc, #64]	; (1000d0e8 <ble_resolv_rand_addr_handler+0xd4>)
1000d0a8:	5cd3      	ldrb	r3, [r2, r3]
1000d0aa:	2b00      	cmp	r3, #0
1000d0ac:	d0ce      	beq.n	1000d04c <ble_resolv_rand_addr_handler+0x38>
1000d0ae:	4a13      	ldr	r2, [pc, #76]	; (1000d0fc <ble_resolv_rand_addr_handler+0xe8>)
1000d0b0:	2301      	movs	r3, #1
1000d0b2:	e7c5      	b.n	1000d040 <ble_resolv_rand_addr_handler+0x2c>
	}
	
	if (device_found)
	{
		DBG_LOG_DEV("##########Device Found");
		ble_dev_info[idx].conn_state = BLE_DEVICE_CONNECTED;
1000d0b4:	480c      	ldr	r0, [pc, #48]	; (1000d0e8 <ble_resolv_rand_addr_handler+0xd4>)
1000d0b6:	0163      	lsls	r3, r4, #5
1000d0b8:	1b1a      	subs	r2, r3, r4
1000d0ba:	0092      	lsls	r2, r2, #2
1000d0bc:	1882      	adds	r2, r0, r2
1000d0be:	0011      	movs	r1, r2
1000d0c0:	315e      	adds	r1, #94	; 0x5e
1000d0c2:	2502      	movs	r5, #2
1000d0c4:	700d      	strb	r5, [r1, #0]
		ble_dev_info[idx].dev_role = AT_BLE_ROLE_PERIPHERAL;
1000d0c6:	210a      	movs	r1, #10
1000d0c8:	7491      	strb	r1, [r2, #18]
		memcpy((uint8_t *)&ble_dev_info[idx].conn_info, (uint8_t *)&connected_state_info, sizeof(at_ble_connected_t));
1000d0ca:	0010      	movs	r0, r2
1000d0cc:	2212      	movs	r2, #18
1000d0ce:	4907      	ldr	r1, [pc, #28]	; (1000d0ec <ble_resolv_rand_addr_handler+0xd8>)
1000d0d0:	4b07      	ldr	r3, [pc, #28]	; (1000d0f0 <ble_resolv_rand_addr_handler+0xdc>)
1000d0d2:	4798      	blx	r3
1000d0d4:	e7e1      	b.n	1000d09a <ble_resolv_rand_addr_handler+0x86>
	#endif
	ALL_UNUSED(peripheral_device_added);

	return AT_BLE_SUCCESS;
	
}
1000d0d6:	2000      	movs	r0, #0
1000d0d8:	bc04      	pop	{r2}
1000d0da:	4690      	mov	r8, r2
1000d0dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d0de:	46c0      	nop			; (mov r8, r8)
1000d0e0:	100197de 	.word	0x100197de
1000d0e4:	1001559d 	.word	0x1001559d
1000d0e8:	10019798 	.word	0x10019798
1000d0ec:	10019a44 	.word	0x10019a44
1000d0f0:	100155bb 	.word	0x100155bb
1000d0f4:	10019a04 	.word	0x10019a04
1000d0f8:	1000cda5 	.word	0x1000cda5
1000d0fc:	10019872 	.word	0x10019872

1000d100 <ble_event_manager>:
	}
	return AT_BLE_SUCCESS;
}

void ble_event_manager(at_ble_events_t events, void *event_params)
{
1000d100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000d102:	000d      	movs	r5, r1
	DBG_LOG_DEV("\r\nBLE-Event:%d", events);
	switch(events)
1000d104:	283b      	cmp	r0, #59	; 0x3b
1000d106:	d872      	bhi.n	1000d1ee <ble_event_manager+0xee>
1000d108:	0083      	lsls	r3, r0, #2
1000d10a:	4a3c      	ldr	r2, [pc, #240]	; (1000d1fc <ble_event_manager+0xfc>)
1000d10c:	58d3      	ldr	r3, [r2, r3]
1000d10e:	469f      	mov	pc, r3
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d110:	0084      	lsls	r4, r0, #2
1000d112:	2600      	movs	r6, #0
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gap_event_cb[idx] != NULL)
1000d114:	4f3a      	ldr	r7, [pc, #232]	; (1000d200 <ble_event_manager+0x100>)
1000d116:	59bb      	ldr	r3, [r7, r6]
1000d118:	2b00      	cmp	r3, #0
1000d11a:	d004      	beq.n	1000d126 <ble_event_manager+0x26>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d11c:	591b      	ldr	r3, [r3, r4]
1000d11e:	2b00      	cmp	r3, #0
1000d120:	d001      	beq.n	1000d126 <ble_event_manager+0x26>
				{
					event_cb_fn[events](event_params);		
1000d122:	0028      	movs	r0, r5
1000d124:	4798      	blx	r3
1000d126:	3604      	adds	r6, #4
			if( ble_scan_duplication_check((at_ble_scan_info_t*)event_params) )
				return;
		}
		#endif			
		
		for (idx = 0; idx < MAX_GAP_EVENT_SUBSCRIBERS; idx++)
1000d128:	2e14      	cmp	r6, #20
1000d12a:	d1f4      	bne.n	1000d116 <ble_event_manager+0x16>
1000d12c:	e065      	b.n	1000d1fa <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d12e:	3813      	subs	r0, #19
1000d130:	b2c4      	uxtb	r4, r0
1000d132:	00a4      	lsls	r4, r4, #2
1000d134:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_client_event_cb[idx] != NULL)
1000d136:	4f33      	ldr	r7, [pc, #204]	; (1000d204 <ble_event_manager+0x104>)
1000d138:	59bb      	ldr	r3, [r7, r6]
1000d13a:	2b00      	cmp	r3, #0
1000d13c:	d004      	beq.n	1000d148 <ble_event_manager+0x48>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_client_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d13e:	591b      	ldr	r3, [r3, r4]
1000d140:	2b00      	cmp	r3, #0
1000d142:	d001      	beq.n	1000d148 <ble_event_manager+0x48>
				{
					event_cb_fn[events](event_params);
1000d144:	0028      	movs	r0, r5
1000d146:	4798      	blx	r3
1000d148:	3604      	adds	r6, #4
	case AT_BLE_NOTIFICATION_RECIEVED:
	case AT_BLE_INDICATION_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_CON_CHANNEL_MAP_IND + 1);
		for (idx = 0; idx < MAX_GATT_CLIENT_SUBSCRIBERS; idx++)
1000d14a:	2e14      	cmp	r6, #20
1000d14c:	d1f4      	bne.n	1000d138 <ble_event_manager+0x38>
1000d14e:	e054      	b.n	1000d1fa <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d150:	381d      	subs	r0, #29
1000d152:	b2c4      	uxtb	r4, r0
1000d154:	00a4      	lsls	r4, r4, #2
1000d156:	2600      	movs	r6, #0
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_gatt_server_event_cb[idx] != NULL)
1000d158:	4f2b      	ldr	r7, [pc, #172]	; (1000d208 <ble_event_manager+0x108>)
1000d15a:	59bb      	ldr	r3, [r7, r6]
1000d15c:	2b00      	cmp	r3, #0
1000d15e:	d004      	beq.n	1000d16a <ble_event_manager+0x6a>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_gatt_server_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d160:	591b      	ldr	r3, [r3, r4]
1000d162:	2b00      	cmp	r3, #0
1000d164:	d001      	beq.n	1000d16a <ble_event_manager+0x6a>
				{
					event_cb_fn[events](event_params);
1000d166:	0028      	movs	r0, r5
1000d168:	4798      	blx	r3
1000d16a:	3604      	adds	r6, #4
	case AT_BLE_READ_AUTHORIZE_REQUEST:
	{
		uint8_t idx;
		events -= (AT_BLE_INDICATION_RECIEVED + 1);
		DBG_LOG_DEV("GATT_Server Event:%d", events);
		for (idx = 0; idx < MAX_GATT_SERVER_SUBSCRIBERS; idx++)
1000d16c:	2e14      	cmp	r6, #20
1000d16e:	d1f4      	bne.n	1000d15a <ble_event_manager+0x5a>
1000d170:	e043      	b.n	1000d1fa <ble_event_manager+0xfa>
	case AT_BLE_LECB_ADD_CREDIT_IND:
	case AT_BLE_LECB_SEND_RESP:
	case AT_BLE_LECB_DATA_RECIEVED:
	{
		uint8_t idx;
		events -= (AT_BLE_READ_AUTHORIZE_REQUEST + 1);
1000d172:	3827      	subs	r0, #39	; 0x27
1000d174:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_L2CAP_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_l2cap_event_cb[idx] != NULL)
1000d176:	4b25      	ldr	r3, [pc, #148]	; (1000d20c <ble_event_manager+0x10c>)
1000d178:	681b      	ldr	r3, [r3, #0]
1000d17a:	2b00      	cmp	r3, #0
1000d17c:	d03d      	beq.n	1000d1fa <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_l2cap_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d17e:	0080      	lsls	r0, r0, #2
1000d180:	58c3      	ldr	r3, [r0, r3]
1000d182:	2b00      	cmp	r3, #0
1000d184:	d039      	beq.n	1000d1fa <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d186:	0008      	movs	r0, r1
1000d188:	4798      	blx	r3
1000d18a:	e036      	b.n	1000d1fa <ble_event_manager+0xfa>
	case AT_BLE_HTPT_ENABLE_RSP:
	case AT_BLE_HTPT_MEAS_INTV_UPD_RSP:
	case AT_BLE_HTPT_MEAS_INTV_CHG_REQ:
	{
		uint8_t idx;
		events -= (AT_BLE_LECB_DATA_RECIEVED + 1);
1000d18c:	382d      	subs	r0, #45	; 0x2d
1000d18e:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_HTPT_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_htpt_event_cb[idx] != NULL)
1000d190:	4b1f      	ldr	r3, [pc, #124]	; (1000d210 <ble_event_manager+0x110>)
1000d192:	681b      	ldr	r3, [r3, #0]
1000d194:	2b00      	cmp	r3, #0
1000d196:	d030      	beq.n	1000d1fa <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_htpt_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d198:	0080      	lsls	r0, r0, #2
1000d19a:	58c3      	ldr	r3, [r0, r3]
1000d19c:	2b00      	cmp	r3, #0
1000d19e:	d02c      	beq.n	1000d1fa <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d1a0:	0008      	movs	r0, r1
1000d1a2:	4798      	blx	r3
1000d1a4:	e029      	b.n	1000d1fa <ble_event_manager+0xfa>
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d1a6:	3836      	subs	r0, #54	; 0x36
1000d1a8:	b2c4      	uxtb	r4, r0
1000d1aa:	00a4      	lsls	r4, r4, #2
1000d1ac:	2600      	movs	r6, #0
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_dtm_event_cb[idx] != NULL)
1000d1ae:	4f19      	ldr	r7, [pc, #100]	; (1000d214 <ble_event_manager+0x114>)
1000d1b0:	59bb      	ldr	r3, [r7, r6]
1000d1b2:	2b00      	cmp	r3, #0
1000d1b4:	d004      	beq.n	1000d1c0 <ble_event_manager+0xc0>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_dtm_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d1b6:	591b      	ldr	r3, [r3, r4]
1000d1b8:	2b00      	cmp	r3, #0
1000d1ba:	d001      	beq.n	1000d1c0 <ble_event_manager+0xc0>
				{
					event_cb_fn[events](event_params);
1000d1bc:	0028      	movs	r0, r5
1000d1be:	4798      	blx	r3
1000d1c0:	3604      	adds	r6, #4
	case AT_BLE_LE_TEST_STATUS:
	case AT_BLE_LE_PACKET_REPORT:
	{
		uint8_t idx;
		events -= (AT_BLE_HTPT_MEAS_INTV_CHG_REQ + 1);
		for (idx = 0; idx < MAX_DTM_EVENT_SUBSCRIBERS; idx++)
1000d1c2:	2e14      	cmp	r6, #20
1000d1c4:	d1f4      	bne.n	1000d1b0 <ble_event_manager+0xb0>
1000d1c6:	e018      	b.n	1000d1fa <ble_event_manager+0xfa>
	case AT_BLE_CUSTOM_EVENT:
	case AT_BLE_DEVICE_READY:
	case AT_BLE_EVENT_MAX:
	{
		uint8_t idx;
		events -= (AT_BLE_LE_PACKET_REPORT + 1);
1000d1c8:	3838      	subs	r0, #56	; 0x38
1000d1ca:	b2c0      	uxtb	r0, r0
		for (idx = 0; idx < MAX_CUSTOM_EVENT_SUBSCRIBERS; idx++)
		{
			if (ble_mgr_custom_event_cb[idx] != NULL)
1000d1cc:	4b12      	ldr	r3, [pc, #72]	; (1000d218 <ble_event_manager+0x118>)
1000d1ce:	681b      	ldr	r3, [r3, #0]
1000d1d0:	2b00      	cmp	r3, #0
1000d1d2:	d012      	beq.n	1000d1fa <ble_event_manager+0xfa>
			{
				const ble_event_callback_t *event_cb_fn = ble_mgr_custom_event_cb[idx];
				if(event_cb_fn[events] != NULL)
1000d1d4:	0080      	lsls	r0, r0, #2
1000d1d6:	58c3      	ldr	r3, [r0, r3]
1000d1d8:	2b00      	cmp	r3, #0
1000d1da:	d00e      	beq.n	1000d1fa <ble_event_manager+0xfa>
				{
					event_cb_fn[events](event_params);
1000d1dc:	0008      	movs	r0, r1
1000d1de:	4798      	blx	r3
1000d1e0:	e00b      	b.n	1000d1fa <ble_event_manager+0xfa>
	}
	break;

	case AT_PLATFORM_EVENT:
	{
		if (ble_user_event_cb) {
1000d1e2:	4b0e      	ldr	r3, [pc, #56]	; (1000d21c <ble_event_manager+0x11c>)
1000d1e4:	681b      	ldr	r3, [r3, #0]
1000d1e6:	2b00      	cmp	r3, #0
1000d1e8:	d007      	beq.n	1000d1fa <ble_event_manager+0xfa>
			ble_user_event_cb();
1000d1ea:	4798      	blx	r3
1000d1ec:	e005      	b.n	1000d1fa <ble_event_manager+0xfa>
	break;

	default:
	{
		DBG_LOG_DEV("BLE-Manager:Unknown Event=0x%X", events);
		DBG_LOG("\r\n");
1000d1ee:	4d0c      	ldr	r5, [pc, #48]	; (1000d220 <ble_event_manager+0x120>)
1000d1f0:	0028      	movs	r0, r5
1000d1f2:	4c0c      	ldr	r4, [pc, #48]	; (1000d224 <ble_event_manager+0x124>)
1000d1f4:	47a0      	blx	r4
1000d1f6:	0028      	movs	r0, r5
1000d1f8:	47a0      	blx	r4
	}
	break;		
	}
}
1000d1fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000d1fc:	10016de8 	.word	0x10016de8
1000d200:	10019a1c 	.word	0x10019a1c
1000d204:	10019a30 	.word	0x10019a30
1000d208:	10019784 	.word	0x10019784
1000d20c:	10019a78 	.word	0x10019a78
1000d210:	10019780 	.word	0x10019780
1000d214:	10019a08 	.word	0x10019a08
1000d218:	10019fbc 	.word	0x10019fbc
1000d21c:	10018278 	.word	0x10018278
1000d220:	1001677c 	.word	0x1001677c
1000d224:	10015835 	.word	0x10015835

1000d228 <ble_event_task>:
	return ulp_status;
}

/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
1000d228:	b570      	push	{r4, r5, r6, lr}
1000d22a:	0004      	movs	r4, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d22c:	4b0d      	ldr	r3, [pc, #52]	; (1000d264 <ble_event_task+0x3c>)
1000d22e:	781b      	ldrb	r3, [r3, #0]
/** @brief function to get event from stack */
at_ble_status_t ble_event_task(uint32_t timeout)
{
	at_ble_status_t status;
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d230:	2b01      	cmp	r3, #1
1000d232:	d101      	bne.n	1000d238 <ble_event_task+0x10>
	{
		release_sleep_lock();
1000d234:	4b0c      	ldr	r3, [pc, #48]	; (1000d268 <ble_event_task+0x40>)
1000d236:	4798      	blx	r3
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
1000d238:	0022      	movs	r2, r4
1000d23a:	490c      	ldr	r1, [pc, #48]	; (1000d26c <ble_event_task+0x44>)
1000d23c:	480c      	ldr	r0, [pc, #48]	; (1000d270 <ble_event_task+0x48>)
1000d23e:	4b0d      	ldr	r3, [pc, #52]	; (1000d274 <ble_event_task+0x4c>)
1000d240:	4798      	blx	r3
1000d242:	0004      	movs	r4, r0
1000d244:	0005      	movs	r5, r0
	return status;
}

ble_ulp_mode_t ble_get_ulp_status(void)
{
	return ulp_status;
1000d246:	4b07      	ldr	r3, [pc, #28]	; (1000d264 <ble_event_task+0x3c>)
1000d248:	781b      	ldrb	r3, [r3, #0]
	{
		release_sleep_lock();
	}	
	status = at_ble_event_get(&event, ble_event_params, timeout);
	
	if (ble_get_ulp_status() == BLE_ULP_MODE_SET)
1000d24a:	2b01      	cmp	r3, #1
1000d24c:	d101      	bne.n	1000d252 <ble_event_task+0x2a>
	{
		acquire_sleep_lock();
1000d24e:	4b0a      	ldr	r3, [pc, #40]	; (1000d278 <ble_event_task+0x50>)
1000d250:	4798      	blx	r3
	}
	
    if (status == AT_BLE_SUCCESS) 
1000d252:	2d00      	cmp	r5, #0
1000d254:	d104      	bne.n	1000d260 <ble_event_task+0x38>
    {		
            ble_event_manager(event, ble_event_params);
1000d256:	4b06      	ldr	r3, [pc, #24]	; (1000d270 <ble_event_task+0x48>)
1000d258:	7818      	ldrb	r0, [r3, #0]
1000d25a:	4904      	ldr	r1, [pc, #16]	; (1000d26c <ble_event_task+0x44>)
1000d25c:	4b07      	ldr	r3, [pc, #28]	; (1000d27c <ble_event_task+0x54>)
1000d25e:	4798      	blx	r3
    }
    
    return status;
}
1000d260:	0020      	movs	r0, r4
1000d262:	bd70      	pop	{r4, r5, r6, pc}
1000d264:	10018287 	.word	0x10018287
1000d268:	1000dc1d 	.word	0x1000dc1d
1000d26c:	10019db0 	.word	0x10019db0
1000d270:	10019a74 	.word	0x10019a74
1000d274:	1000e369 	.word	0x1000e369
1000d278:	1000dbf5 	.word	0x1000dbf5
1000d27c:	1000d101 	.word	0x1000d101

1000d280 <ble_advertisement_data_set>:
	}
}

/* Advertisement Data will be set based on the advertisement configuration */
at_ble_status_t ble_advertisement_data_set(void)
{
1000d280:	b510      	push	{r4, lr}
1000d282:	b090      	sub	sp, #64	; 0x40
		uint8_t length_field_ind;
		uint8_t adv_element_len;
		adv_buf[adv_data_element.len] = adv_data_element.len;
		length_field_ind = adv_data_element.len;
		adv_data_element.len++;
		adv_buf[adv_data_element.len++] = COMPLETE_LIST_16BIT_SERV_UUIDS;
1000d284:	ac08      	add	r4, sp, #32
1000d286:	2203      	movs	r2, #3
1000d288:	7062      	strb	r2, [r4, #1]
		MREPEAT(SERVICE_UUID16_MAX_NUM, _CONF_SERVICE_16BIT_UUID, &adv_data_element);
1000d28a:	2302      	movs	r3, #2
1000d28c:	70a3      	strb	r3, [r4, #2]
1000d28e:	3316      	adds	r3, #22
1000d290:	70e3      	strb	r3, [r4, #3]
1000d292:	7122      	strb	r2, [r4, #4]
1000d294:	7163      	strb	r3, [r4, #5]
1000d296:	3201      	adds	r2, #1
1000d298:	71a2      	strb	r2, [r4, #6]
1000d29a:	71e3      	strb	r3, [r4, #7]
1000d29c:	320b      	adds	r2, #11
1000d29e:	7222      	strb	r2, [r4, #8]
1000d2a0:	7263      	strb	r3, [r4, #9]
		adv_element_len = adv_data_element.len - (length_field_ind + ADV_ELEMENT_SIZE);
		if(adv_element_len) 
		{			
			adv_buf[length_field_ind] = adv_element_len+ADV_TYPE_SIZE;
1000d2a2:	3b0f      	subs	r3, #15
1000d2a4:	7023      	strb	r3, [r4, #0]
	#endif
	
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_ENABLE && !BLE_GAP_ADV_SHORTENED_LOCAL_NAME_ENABLE)
	#if (BLE_GAP_ADV_COMPLETE_LOCAL_NAME_SCN_RSP_ENABLE != SCAN_RESPONSE_ONLY_ENABLE)
	if((adv_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_TYPE_FLAG_SIZE + ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH))) {
		adv_buf[adv_data_element.len++] = BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH + ADV_TYPE_SIZE;
1000d2a6:	3a05      	subs	r2, #5
1000d2a8:	72a2      	strb	r2, [r4, #10]
		adv_buf[adv_data_element.len++] = COMPLETE_LOCAL_NAME;
1000d2aa:	72e3      	strb	r3, [r4, #11]
		memcpy(&adv_buf[adv_data_element.len], BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME, BLE_GAP_ADV_DATA_COMPLETE_LOCAL_NAME_LENGTH);
1000d2ac:	aa0b      	add	r2, sp, #44	; 0x2c
1000d2ae:	4b10      	ldr	r3, [pc, #64]	; (1000d2f0 <ble_advertisement_data_set+0x70>)
1000d2b0:	cb03      	ldmia	r3!, {r0, r1}
1000d2b2:	c203      	stmia	r2!, {r0, r1}
1000d2b4:	781b      	ldrb	r3, [r3, #0]
1000d2b6:	7013      	strb	r3, [r2, #0]
    DBG_LOG_DEV("[ble_manager]\t\tManufacturer specific data NOT enabled");
	if(false){}
	#endif
	#if ((BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ENABLE) || (BLE_GAP_ADV_MANUFACTURER_SPECIFIC_DATA_SCN_RSP_ENABLE == SCAN_RESPONSE_ONLY_ENABLE))
	else if((scan_resp_data_element.len) <= (AT_BLE_ADV_MAX_SIZE - (ADV_ELEMENT_SIZE + BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE))) {
		scn_resp[scan_resp_data_element.len++] = BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE + ADV_TYPE_SIZE;
1000d2b8:	2307      	movs	r3, #7
1000d2ba:	466a      	mov	r2, sp
1000d2bc:	7013      	strb	r3, [r2, #0]
		scn_resp[scan_resp_data_element.len++] = MANUFACTURER_SPECIFIC_DATA;
1000d2be:	33f8      	adds	r3, #248	; 0xf8
1000d2c0:	7053      	strb	r3, [r2, #1]
		memcpy(&scn_resp[scan_resp_data_element.len], BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA, BLE_GAP_ADV_DATA_MANUFACTURER_SPECIFIC_DATA_SIZE);
1000d2c2:	2206      	movs	r2, #6
1000d2c4:	490b      	ldr	r1, [pc, #44]	; (1000d2f4 <ble_advertisement_data_set+0x74>)
1000d2c6:	466b      	mov	r3, sp
1000d2c8:	1c98      	adds	r0, r3, #2
1000d2ca:	4b0b      	ldr	r3, [pc, #44]	; (1000d2f8 <ble_advertisement_data_set+0x78>)
1000d2cc:	4798      	blx	r3
		DBG_LOG_ADV("Failed to add Manufacturer specific data");
		return AT_BLE_GAP_INVALID_PARAM;
	}
	#endif
	
	if (at_ble_adv_data_set(adv_buf, adv_data_element.len, scn_resp,
1000d2ce:	2308      	movs	r3, #8
1000d2d0:	466a      	mov	r2, sp
1000d2d2:	2115      	movs	r1, #21
1000d2d4:	0020      	movs	r0, r4
1000d2d6:	4c09      	ldr	r4, [pc, #36]	; (1000d2fc <ble_advertisement_data_set+0x7c>)
1000d2d8:	47a0      	blx	r4
1000d2da:	2800      	cmp	r0, #0
1000d2dc:	d005      	beq.n	1000d2ea <ble_advertisement_data_set+0x6a>
	scan_resp_data_element.len) != AT_BLE_SUCCESS) {
		DBG_LOG("BLE Advertisement data set failed");
1000d2de:	4808      	ldr	r0, [pc, #32]	; (1000d300 <ble_advertisement_data_set+0x80>)
1000d2e0:	4b08      	ldr	r3, [pc, #32]	; (1000d304 <ble_advertisement_data_set+0x84>)
1000d2e2:	4798      	blx	r3
1000d2e4:	4808      	ldr	r0, [pc, #32]	; (1000d308 <ble_advertisement_data_set+0x88>)
1000d2e6:	4b09      	ldr	r3, [pc, #36]	; (1000d30c <ble_advertisement_data_set+0x8c>)
1000d2e8:	4798      	blx	r3
            //DBG_LOG_ADV("- 0x%02x(%c) ", adv_buf[i], adv_buf[i]);
        //}
		//DBG_LOG_ADV("BLE Advertisement data set success");
		return AT_BLE_SUCCESS;
    }
}
1000d2ea:	2000      	movs	r0, #0
1000d2ec:	b010      	add	sp, #64	; 0x40
1000d2ee:	bd10      	pop	{r4, pc}
1000d2f0:	10017340 	.word	0x10017340
1000d2f4:	10017520 	.word	0x10017520
1000d2f8:	100155bb 	.word	0x100155bb
1000d2fc:	1000edc9 	.word	0x1000edc9
1000d300:	1001677c 	.word	0x1001677c
1000d304:	10015835 	.word	0x10015835
1000d308:	10017528 	.word	0x10017528
1000d30c:	10015715 	.word	0x10015715

1000d310 <uart_read_complete_callback>:

void _time_start(unsigned int sec);
unsigned int _time_done(void);

static void uart_read_complete_callback(struct uart_module *const module)
{
1000d310:	b510      	push	{r4, lr}
	if(read_status == UART_READ_WAITING) {
1000d312:	4b0e      	ldr	r3, [pc, #56]	; (1000d34c <uart_read_complete_callback+0x3c>)
1000d314:	781b      	ldrb	r3, [r3, #0]
1000d316:	2b01      	cmp	r3, #1
1000d318:	d10b      	bne.n	1000d332 <uart_read_complete_callback+0x22>
		read_status = UART_READ_DONE;
1000d31a:	2202      	movs	r2, #2
1000d31c:	4b0b      	ldr	r3, [pc, #44]	; (1000d34c <uart_read_complete_callback+0x3c>)
1000d31e:	701a      	strb	r2, [r3, #0]
		
		if(user_callback_func == NULL)
1000d320:	4b0b      	ldr	r3, [pc, #44]	; (1000d350 <uart_read_complete_callback+0x40>)
1000d322:	681b      	ldr	r3, [r3, #0]
1000d324:	2b00      	cmp	r3, #0
1000d326:	d110      	bne.n	1000d34a <uart_read_complete_callback+0x3a>
			uart_disable_callback(&uart_instance, UART_RX_COMPLETE);
1000d328:	2102      	movs	r1, #2
1000d32a:	480a      	ldr	r0, [pc, #40]	; (1000d354 <uart_read_complete_callback+0x44>)
1000d32c:	4b0a      	ldr	r3, [pc, #40]	; (1000d358 <uart_read_complete_callback+0x48>)
1000d32e:	4798      	blx	r3
1000d330:	e00b      	b.n	1000d34a <uart_read_complete_callback+0x3a>
	}
	else if(user_callback_func != NULL) {
1000d332:	4b07      	ldr	r3, [pc, #28]	; (1000d350 <uart_read_complete_callback+0x40>)
1000d334:	681b      	ldr	r3, [r3, #0]
1000d336:	2b00      	cmp	r3, #0
1000d338:	d007      	beq.n	1000d34a <uart_read_complete_callback+0x3a>
		user_callback_func(string_input[0]);
1000d33a:	4c08      	ldr	r4, [pc, #32]	; (1000d35c <uart_read_complete_callback+0x4c>)
1000d33c:	7820      	ldrb	r0, [r4, #0]
1000d33e:	4798      	blx	r3
		uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d340:	2201      	movs	r2, #1
1000d342:	0021      	movs	r1, r4
1000d344:	4803      	ldr	r0, [pc, #12]	; (1000d354 <uart_read_complete_callback+0x44>)
1000d346:	4b06      	ldr	r3, [pc, #24]	; (1000d360 <uart_read_complete_callback+0x50>)
1000d348:	4798      	blx	r3
	}
	else {
		//Nothing to do.
	}
}
1000d34a:	bd10      	pop	{r4, pc}
1000d34c:	1001928c 	.word	0x1001928c
1000d350:	10019294 	.word	0x10019294
1000d354:	10019fc0 	.word	0x10019fc0
1000d358:	1000c099 	.word	0x1000c099
1000d35c:	10019290 	.word	0x10019290
1000d360:	1000c03d 	.word	0x1000c03d

1000d364 <usart_serial_getchar>:
 * \param[out]    c       Destination for the read character.
 */
static inline void usart_serial_getchar(
		struct uart_module *const module,
		uint8_t *c)
{
1000d364:	b570      	push	{r4, r5, r6, lr}
1000d366:	0006      	movs	r6, r0
1000d368:	000d      	movs	r5, r1
	while(STATUS_OK != uart_read_wait(module, c));
1000d36a:	4c03      	ldr	r4, [pc, #12]	; (1000d378 <usart_serial_getchar+0x14>)
1000d36c:	0029      	movs	r1, r5
1000d36e:	0030      	movs	r0, r6
1000d370:	47a0      	blx	r4
1000d372:	2800      	cmp	r0, #0
1000d374:	d1fa      	bne.n	1000d36c <usart_serial_getchar+0x8>
}
1000d376:	bd70      	pop	{r4, r5, r6, pc}
1000d378:	1000c029 	.word	0x1000c029

1000d37c <usart_serial_putchar>:
 * \return Status code
 */
static inline enum status_code usart_serial_putchar(
		struct uart_module *const module,
		uint8_t c)
{
1000d37c:	b570      	push	{r4, r5, r6, lr}
1000d37e:	0006      	movs	r6, r0
1000d380:	000d      	movs	r5, r1
	while(STATUS_OK !=uart_write_wait(module, c));
1000d382:	4c03      	ldr	r4, [pc, #12]	; (1000d390 <usart_serial_putchar+0x14>)
1000d384:	0029      	movs	r1, r5
1000d386:	0030      	movs	r0, r6
1000d388:	47a0      	blx	r4
1000d38a:	2800      	cmp	r0, #0
1000d38c:	d1fa      	bne.n	1000d384 <usart_serial_putchar+0x8>

	return STATUS_OK;
}
1000d38e:	bd70      	pop	{r4, r5, r6, pc}
1000d390:	1000c019 	.word	0x1000c019

1000d394 <serial_console_init>:

void serial_console_init(void)
{
1000d394:	b570      	push	{r4, r5, r6, lr}
	system_clock_config(CLOCK_RESOURCE_XO_26_MHZ, CLOCK_FREQ_26_MHZ);
1000d396:	2100      	movs	r1, #0
1000d398:	2000      	movs	r0, #0
1000d39a:	4b19      	ldr	r3, [pc, #100]	; (1000d400 <serial_console_init+0x6c>)
1000d39c:	4798      	blx	r3

	uart_get_config_defaults(&config_uart);
1000d39e:	4c19      	ldr	r4, [pc, #100]	; (1000d404 <serial_console_init+0x70>)
1000d3a0:	0020      	movs	r0, r4
1000d3a2:	4b19      	ldr	r3, [pc, #100]	; (1000d408 <serial_console_init+0x74>)
1000d3a4:	4798      	blx	r3

	config_uart.baud_rate = CONF_STDIO_BAUDRATE;
1000d3a6:	23e1      	movs	r3, #225	; 0xe1
1000d3a8:	025b      	lsls	r3, r3, #9
1000d3aa:	6023      	str	r3, [r4, #0]
	config_uart.pin_number_pad[0] = EDBG_CDC_PIN_PAD0;
1000d3ac:	2302      	movs	r3, #2
1000d3ae:	60a3      	str	r3, [r4, #8]
	config_uart.pin_number_pad[1] = EDBG_CDC_PIN_PAD1;
1000d3b0:	2203      	movs	r2, #3
1000d3b2:	60e2      	str	r2, [r4, #12]
	config_uart.pin_number_pad[2] = EDBG_CDC_PIN_PAD2;
1000d3b4:	3201      	adds	r2, #1
1000d3b6:	6122      	str	r2, [r4, #16]
	config_uart.pin_number_pad[3] = EDBG_CDC_PIN_PAD3;
1000d3b8:	3201      	adds	r2, #1
1000d3ba:	6162      	str	r2, [r4, #20]
	
	config_uart.pinmux_sel_pad[0] = EDBG_CDC_MUX_PAD0;
1000d3bc:	61a3      	str	r3, [r4, #24]
	config_uart.pinmux_sel_pad[1] = EDBG_CDC_MUX_PAD1;
1000d3be:	61e3      	str	r3, [r4, #28]
	config_uart.pinmux_sel_pad[2] = EDBG_CDC_MUX_PAD2;
1000d3c0:	6223      	str	r3, [r4, #32]
	config_uart.pinmux_sel_pad[3] = EDBG_CDC_MUX_PAD3;
1000d3c2:	6263      	str	r3, [r4, #36]	; 0x24
static inline void stdio_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	stdio_base = (void *)module;
1000d3c4:	4d11      	ldr	r5, [pc, #68]	; (1000d40c <serial_console_init+0x78>)
1000d3c6:	4b12      	ldr	r3, [pc, #72]	; (1000d410 <serial_console_init+0x7c>)
1000d3c8:	601d      	str	r5, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
1000d3ca:	4a12      	ldr	r2, [pc, #72]	; (1000d414 <serial_console_init+0x80>)
1000d3cc:	4b12      	ldr	r3, [pc, #72]	; (1000d418 <serial_console_init+0x84>)
1000d3ce:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
1000d3d0:	4a12      	ldr	r2, [pc, #72]	; (1000d41c <serial_console_init+0x88>)
1000d3d2:	4b13      	ldr	r3, [pc, #76]	; (1000d420 <serial_console_init+0x8c>)
1000d3d4:	601a      	str	r2, [r3, #0]
static inline bool usart_serial_init(
		struct uart_module *const module,
		Uart * const hw,
		const struct uart_config *const config)
{
	if (uart_init(module, hw, config) == STATUS_OK) {
1000d3d6:	0022      	movs	r2, r4
1000d3d8:	4912      	ldr	r1, [pc, #72]	; (1000d424 <serial_console_init+0x90>)
1000d3da:	0028      	movs	r0, r5
1000d3dc:	4b12      	ldr	r3, [pc, #72]	; (1000d428 <serial_console_init+0x94>)
1000d3de:	4798      	blx	r3

	usart_serial_init(module, hw, config);
# if defined(__GNUC__)
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
1000d3e0:	4e12      	ldr	r6, [pc, #72]	; (1000d42c <serial_console_init+0x98>)
1000d3e2:	6833      	ldr	r3, [r6, #0]
1000d3e4:	6898      	ldr	r0, [r3, #8]
1000d3e6:	2100      	movs	r1, #0
1000d3e8:	4c11      	ldr	r4, [pc, #68]	; (1000d430 <serial_console_init+0x9c>)
1000d3ea:	47a0      	blx	r4
	setbuf(stdin, NULL);
1000d3ec:	6833      	ldr	r3, [r6, #0]
1000d3ee:	6858      	ldr	r0, [r3, #4]
1000d3f0:	2100      	movs	r1, #0
1000d3f2:	47a0      	blx	r4

	stdio_serial_init(&uart_instance, CONF_STDIO_USART_MODULE, &config_uart);
	
	uart_register_callback(&uart_instance, uart_read_complete_callback, UART_RX_COMPLETE);
1000d3f4:	2202      	movs	r2, #2
1000d3f6:	490f      	ldr	r1, [pc, #60]	; (1000d434 <serial_console_init+0xa0>)
1000d3f8:	0028      	movs	r0, r5
1000d3fa:	4b0f      	ldr	r3, [pc, #60]	; (1000d438 <serial_console_init+0xa4>)
1000d3fc:	4798      	blx	r3
}
1000d3fe:	bd70      	pop	{r4, r5, r6, pc}
1000d400:	1000b039 	.word	0x1000b039
1000d404:	10019fe4 	.word	0x10019fe4
1000d408:	1000be31 	.word	0x1000be31
1000d40c:	10019fc0 	.word	0x10019fc0
1000d410:	1001977c 	.word	0x1001977c
1000d414:	1000d37d 	.word	0x1000d37d
1000d418:	10019778 	.word	0x10019778
1000d41c:	1000d365 	.word	0x1000d365
1000d420:	10019774 	.word	0x10019774
1000d424:	40004000 	.word	0x40004000
1000d428:	1000be5d 	.word	0x1000be5d
1000d42c:	10017968 	.word	0x10017968
1000d430:	100158e5 	.word	0x100158e5
1000d434:	1000d311 	.word	0x1000d311
1000d438:	1000c065 	.word	0x1000c065

1000d43c <_time_start>:

void _time_start(unsigned int sec)
{
1000d43c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d43e:	b083      	sub	sp, #12
1000d440:	0005      	movs	r5, r0
	system_clock_get_value();
1000d442:	4c0d      	ldr	r4, [pc, #52]	; (1000d478 <_time_start+0x3c>)
1000d444:	47a0      	blx	r4
	unsigned int main_clk = system_clock_get_value();
1000d446:	47a0      	blx	r4

	tick = (((double)(main_clk)) * ((double)0.0000493)) * (sec * 1000);
1000d448:	4f0c      	ldr	r7, [pc, #48]	; (1000d47c <_time_start+0x40>)
1000d44a:	47b8      	blx	r7
1000d44c:	4e0c      	ldr	r6, [pc, #48]	; (1000d480 <_time_start+0x44>)
1000d44e:	4a0d      	ldr	r2, [pc, #52]	; (1000d484 <_time_start+0x48>)
1000d450:	4b0d      	ldr	r3, [pc, #52]	; (1000d488 <_time_start+0x4c>)
1000d452:	47b0      	blx	r6
1000d454:	9000      	str	r0, [sp, #0]
1000d456:	9101      	str	r1, [sp, #4]
1000d458:	20fa      	movs	r0, #250	; 0xfa
1000d45a:	0080      	lsls	r0, r0, #2
1000d45c:	4368      	muls	r0, r5
1000d45e:	47b8      	blx	r7
1000d460:	0002      	movs	r2, r0
1000d462:	000b      	movs	r3, r1
1000d464:	9800      	ldr	r0, [sp, #0]
1000d466:	9901      	ldr	r1, [sp, #4]
1000d468:	47b0      	blx	r6
1000d46a:	4b08      	ldr	r3, [pc, #32]	; (1000d48c <_time_start+0x50>)
1000d46c:	4798      	blx	r3
1000d46e:	4b08      	ldr	r3, [pc, #32]	; (1000d490 <_time_start+0x54>)
1000d470:	6018      	str	r0, [r3, #0]
}
1000d472:	b003      	add	sp, #12
1000d474:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d476:	46c0      	nop			; (mov r8, r8)
1000d478:	1000b0bd 	.word	0x1000b0bd
1000d47c:	100152c5 	.word	0x100152c5
1000d480:	100145f9 	.word	0x100145f9
1000d484:	19feaec7 	.word	0x19feaec7
1000d488:	3f09d8ef 	.word	0x3f09d8ef
1000d48c:	10012d05 	.word	0x10012d05
1000d490:	10019288 	.word	0x10019288

1000d494 <_time_done>:

unsigned int _time_done()
{
	return --tick;
1000d494:	4b02      	ldr	r3, [pc, #8]	; (1000d4a0 <_time_done+0xc>)
1000d496:	681a      	ldr	r2, [r3, #0]
1000d498:	1e50      	subs	r0, r2, #1
1000d49a:	6018      	str	r0, [r3, #0]
}
1000d49c:	4770      	bx	lr
1000d49e:	46c0      	nop			; (mov r8, r8)
1000d4a0:	10019288 	.word	0x10019288

1000d4a4 <getchar_b11_timeout>:

int getchar_b11_timeout(unsigned int sec)
{
1000d4a4:	b570      	push	{r4, r5, r6, lr}
1000d4a6:	0004      	movs	r4, r0
	read_status = UART_READ_WAITING;
1000d4a8:	2201      	movs	r2, #1
1000d4aa:	4b11      	ldr	r3, [pc, #68]	; (1000d4f0 <getchar_b11_timeout+0x4c>)
1000d4ac:	701a      	strb	r2, [r3, #0]
	
	if(user_callback_func == NULL)
1000d4ae:	4b11      	ldr	r3, [pc, #68]	; (1000d4f4 <getchar_b11_timeout+0x50>)
1000d4b0:	681b      	ldr	r3, [r3, #0]
1000d4b2:	2b00      	cmp	r3, #0
1000d4b4:	d103      	bne.n	1000d4be <getchar_b11_timeout+0x1a>
		uart_enable_callback(&uart_instance, UART_RX_COMPLETE);
1000d4b6:	2102      	movs	r1, #2
1000d4b8:	480f      	ldr	r0, [pc, #60]	; (1000d4f8 <getchar_b11_timeout+0x54>)
1000d4ba:	4b10      	ldr	r3, [pc, #64]	; (1000d4fc <getchar_b11_timeout+0x58>)
1000d4bc:	4798      	blx	r3

	_time_start(sec);
1000d4be:	0020      	movs	r0, r4
1000d4c0:	4b0f      	ldr	r3, [pc, #60]	; (1000d500 <getchar_b11_timeout+0x5c>)
1000d4c2:	4798      	blx	r3
	
	string_input[0] = 0;
1000d4c4:	490f      	ldr	r1, [pc, #60]	; (1000d504 <getchar_b11_timeout+0x60>)
1000d4c6:	2300      	movs	r3, #0
1000d4c8:	700b      	strb	r3, [r1, #0]
	uart_read_buffer_job(&uart_instance, string_input, sizeof(string_input));
1000d4ca:	2201      	movs	r2, #1
1000d4cc:	480a      	ldr	r0, [pc, #40]	; (1000d4f8 <getchar_b11_timeout+0x54>)
1000d4ce:	4b0e      	ldr	r3, [pc, #56]	; (1000d508 <getchar_b11_timeout+0x64>)
1000d4d0:	4798      	blx	r3
	
	while (read_status != UART_READ_DONE && _time_done() > 0 );
1000d4d2:	4c07      	ldr	r4, [pc, #28]	; (1000d4f0 <getchar_b11_timeout+0x4c>)
1000d4d4:	4d0d      	ldr	r5, [pc, #52]	; (1000d50c <getchar_b11_timeout+0x68>)
1000d4d6:	7823      	ldrb	r3, [r4, #0]
1000d4d8:	2b02      	cmp	r3, #2
1000d4da:	d002      	beq.n	1000d4e2 <getchar_b11_timeout+0x3e>
1000d4dc:	47a8      	blx	r5
1000d4de:	2800      	cmp	r0, #0
1000d4e0:	d1f9      	bne.n	1000d4d6 <getchar_b11_timeout+0x32>
	
	read_status = UART_READ_NONE;
1000d4e2:	2200      	movs	r2, #0
1000d4e4:	4b02      	ldr	r3, [pc, #8]	; (1000d4f0 <getchar_b11_timeout+0x4c>)
1000d4e6:	701a      	strb	r2, [r3, #0]

	return string_input[0];
1000d4e8:	4b06      	ldr	r3, [pc, #24]	; (1000d504 <getchar_b11_timeout+0x60>)
1000d4ea:	7818      	ldrb	r0, [r3, #0]
}
1000d4ec:	bd70      	pop	{r4, r5, r6, pc}
1000d4ee:	46c0      	nop			; (mov r8, r8)
1000d4f0:	1001928c 	.word	0x1001928c
1000d4f4:	10019294 	.word	0x10019294
1000d4f8:	10019fc0 	.word	0x10019fc0
1000d4fc:	1000c079 	.word	0x1000c079
1000d500:	1000d43d 	.word	0x1000d43d
1000d504:	10019290 	.word	0x10019290
1000d508:	1000c03d 	.word	0x1000c03d
1000d50c:	1000d495 	.word	0x1000d495

1000d510 <platform_event_free>:
void platform_event_free(struct platform_event* event);
//struct str_watched_event watched_event;

void platform_event_free(struct platform_event* event)
{
	event->next = platform_event_free_list;
1000d510:	4b02      	ldr	r3, [pc, #8]	; (1000d51c <platform_event_free+0xc>)
1000d512:	681a      	ldr	r2, [r3, #0]
1000d514:	6002      	str	r2, [r0, #0]
	platform_event_free_list = event;
1000d516:	6018      	str	r0, [r3, #0]
}
1000d518:	4770      	bx	lr
1000d51a:	46c0      	nop			; (mov r8, r8)
1000d51c:	1001929c 	.word	0x1001929c

1000d520 <platform_event_post>:

void platform_event_post(uint16_t event_type, void * data, uint16_t data_len)
{
1000d520:	b530      	push	{r4, r5, lr}
	// get a free event object
	struct platform_event* evt = platform_event_free_list;
1000d522:	4b0b      	ldr	r3, [pc, #44]	; (1000d550 <platform_event_post+0x30>)
1000d524:	681c      	ldr	r4, [r3, #0]
	if(evt != NULL)
1000d526:	2c00      	cmp	r4, #0
1000d528:	d011      	beq.n	1000d54e <platform_event_post+0x2e>
	{
		platform_event_free_list = evt->next;
1000d52a:	6825      	ldr	r5, [r4, #0]
1000d52c:	601d      	str	r5, [r3, #0]
		
		evt->next = NULL;
1000d52e:	2300      	movs	r3, #0
1000d530:	6023      	str	r3, [r4, #0]
		evt->data = data;
1000d532:	60a1      	str	r1, [r4, #8]
		evt->data_len = data_len;
1000d534:	80e2      	strh	r2, [r4, #6]
		evt->event_type = event_type;
1000d536:	80a0      	strh	r0, [r4, #4]

		if(platform_event_pending_list == NULL)
1000d538:	4b06      	ldr	r3, [pc, #24]	; (1000d554 <platform_event_post+0x34>)
1000d53a:	681a      	ldr	r2, [r3, #0]
1000d53c:	2a00      	cmp	r2, #0
1000d53e:	d102      	bne.n	1000d546 <platform_event_post+0x26>
		{
			platform_event_pending_list = evt;
1000d540:	601c      	str	r4, [r3, #0]
1000d542:	e004      	b.n	1000d54e <platform_event_post+0x2e>
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
			{
				cur = cur->next;
1000d544:	001a      	movs	r2, r3
			platform_event_pending_list = evt;
		}
		else
		{
			struct platform_event* cur = platform_event_pending_list;
			while(cur->next != NULL)
1000d546:	6813      	ldr	r3, [r2, #0]
1000d548:	2b00      	cmp	r3, #0
1000d54a:	d1fb      	bne.n	1000d544 <platform_event_post+0x24>
			{
				cur = cur->next;
			}
			cur->next = evt;
1000d54c:	6014      	str	r4, [r2, #0]
		}
		
		//platform_event_signal();
	}
	
}
1000d54e:	bd30      	pop	{r4, r5, pc}
1000d550:	1001929c 	.word	0x1001929c
1000d554:	10019298 	.word	0x10019298

1000d558 <platform_event_init>:
	return status;
	
}

void platform_event_init()
{
1000d558:	b570      	push	{r4, r5, r6, lr}
	uint32_t i;
	platform_event_free_list = NULL;
1000d55a:	2300      	movs	r3, #0
1000d55c:	4a06      	ldr	r2, [pc, #24]	; (1000d578 <platform_event_init+0x20>)
1000d55e:	6013      	str	r3, [r2, #0]
	platform_event_pending_list = NULL;
1000d560:	4a06      	ldr	r2, [pc, #24]	; (1000d57c <platform_event_init+0x24>)
1000d562:	6013      	str	r3, [r2, #0]
1000d564:	4c06      	ldr	r4, [pc, #24]	; (1000d580 <platform_event_init+0x28>)
1000d566:	0026      	movs	r6, r4
1000d568:	3678      	adds	r6, #120	; 0x78
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
	{
		platform_event_free(&platform_event_pool[i]);
1000d56a:	4d06      	ldr	r5, [pc, #24]	; (1000d584 <platform_event_init+0x2c>)
1000d56c:	0020      	movs	r0, r4
1000d56e:	47a8      	blx	r5
1000d570:	340c      	adds	r4, #12
{
	uint32_t i;
	platform_event_free_list = NULL;
	platform_event_pending_list = NULL;
	//memset(&watched_event,0,sizeof(struct str_watched_event));
	for(i = 0; i < PLATFORM_EVENT_POOL_DEPTH; i++)
1000d572:	42b4      	cmp	r4, r6
1000d574:	d1fa      	bne.n	1000d56c <platform_event_init+0x14>
	{
		platform_event_free(&platform_event_pool[i]);
	}
}
1000d576:	bd70      	pop	{r4, r5, r6, pc}
1000d578:	1001929c 	.word	0x1001929c
1000d57c:	10019298 	.word	0x10019298
1000d580:	100192a0 	.word	0x100192a0
1000d584:	1000d511 	.word	0x1000d511

1000d588 <at_ke_msg_send>:
	}
	return status;
}

static void at_ke_msg_send(void const * param_ptr)
{
1000d588:	b570      	push	{r4, r5, r6, lr}
1000d58a:	0004      	movs	r4, r0
	struct ke_msg *kemsg;
	uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
1000d58c:	4b13      	ldr	r3, [pc, #76]	; (1000d5dc <at_ke_msg_send+0x54>)
1000d58e:	681d      	ldr	r5, [r3, #0]
	ke_msg_send(param_ptr);
1000d590:	4b13      	ldr	r3, [pc, #76]	; (1000d5e0 <at_ke_msg_send+0x58>)
1000d592:	681b      	ldr	r3, [r3, #0]
1000d594:	4798      	blx	r3
	kemsg = ke_param2msg(param_ptr);

	if((kemsg != NULL) && (kemsg->dest_id != TASK_INTERNAL_APP)) {
1000d596:	2c0c      	cmp	r4, #12
1000d598:	d01f      	beq.n	1000d5da <at_ke_msg_send+0x52>
1000d59a:	3c0c      	subs	r4, #12
1000d59c:	88e3      	ldrh	r3, [r4, #6]
1000d59e:	2b05      	cmp	r3, #5
1000d5a0:	d01b      	beq.n	1000d5da <at_ke_msg_send+0x52>
		if(osc_en == 0)
1000d5a2:	07eb      	lsls	r3, r5, #31
1000d5a4:	d414      	bmi.n	1000d5d0 <at_ke_msg_send+0x48>
		{
			/* BLE Core is off, issue a wakeup request*/
			/* First, make sure PD4 is powered up and out of reset */
			pwr_enable_arm_wakeup(1<<1);
1000d5a6:	4b0f      	ldr	r3, [pc, #60]	; (1000d5e4 <at_ke_msg_send+0x5c>)
1000d5a8:	681b      	ldr	r3, [r3, #0]
1000d5aa:	2002      	movs	r0, #2
1000d5ac:	4798      	blx	r3
			pwr_arm_wakeup_req();
1000d5ae:	4b0e      	ldr	r3, [pc, #56]	; (1000d5e8 <at_ke_msg_send+0x60>)
1000d5b0:	681b      	ldr	r3, [r3, #0]
1000d5b2:	4798      	blx	r3
			while (pwr_wait_BLE_out_of_reset(3));
1000d5b4:	4c0d      	ldr	r4, [pc, #52]	; (1000d5ec <at_ke_msg_send+0x64>)
1000d5b6:	2003      	movs	r0, #3
1000d5b8:	6823      	ldr	r3, [r4, #0]
1000d5ba:	4798      	blx	r3
1000d5bc:	2800      	cmp	r0, #0
1000d5be:	d1fa      	bne.n	1000d5b6 <at_ke_msg_send+0x2e>
			pwr_disable_arm_wakeup(1<<1);
1000d5c0:	4b0b      	ldr	r3, [pc, #44]	; (1000d5f0 <at_ke_msg_send+0x68>)
1000d5c2:	681b      	ldr	r3, [r3, #0]
1000d5c4:	3002      	adds	r0, #2
1000d5c6:	4798      	blx	r3
			REG_PL_WR(0x4000B020, 1);
1000d5c8:	2201      	movs	r2, #1
1000d5ca:	4b0a      	ldr	r3, [pc, #40]	; (1000d5f4 <at_ke_msg_send+0x6c>)
1000d5cc:	601a      	str	r2, [r3, #0]
1000d5ce:	e004      	b.n	1000d5da <at_ke_msg_send+0x52>
#endif	//CHIPVERSION_B0
		}
		else
		{
			/*  */
			os_sem_up(gstrFwSem);
1000d5d0:	4b09      	ldr	r3, [pc, #36]	; (1000d5f8 <at_ke_msg_send+0x70>)
1000d5d2:	6818      	ldr	r0, [r3, #0]
1000d5d4:	4b09      	ldr	r3, [pc, #36]	; (1000d5fc <at_ke_msg_send+0x74>)
1000d5d6:	681b      	ldr	r3, [r3, #0]
1000d5d8:	4798      	blx	r3
		}
	}
}
1000d5da:	bd70      	pop	{r4, r5, r6, pc}
1000d5dc:	4000b1ec 	.word	0x4000b1ec
1000d5e0:	10019348 	.word	0x10019348
1000d5e4:	10019340 	.word	0x10019340
1000d5e8:	10019354 	.word	0x10019354
1000d5ec:	10019328 	.word	0x10019328
1000d5f0:	10019330 	.word	0x10019330
1000d5f4:	4000b020 	.word	0x4000b020
1000d5f8:	10019334 	.word	0x10019334
1000d5fc:	10019324 	.word	0x10019324

1000d600 <samb11_plf_resume_callback>:
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
	return status;
}

void samb11_plf_resume_callback(void)
{
1000d600:	b510      	push	{r4, lr}
	//spi_flash_turn_off();
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,default_samb11_clock_init[0]);
1000d602:	4b06      	ldr	r3, [pc, #24]	; (1000d61c <samb11_plf_resume_callback+0x1c>)
1000d604:	4a06      	ldr	r2, [pc, #24]	; (1000d620 <samb11_plf_resume_callback+0x20>)
1000d606:	6819      	ldr	r1, [r3, #0]
1000d608:	6011      	str	r1, [r2, #0]
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,default_samb11_clock_init[1]);
1000d60a:	685a      	ldr	r2, [r3, #4]
1000d60c:	4b05      	ldr	r3, [pc, #20]	; (1000d624 <samb11_plf_resume_callback+0x24>)
1000d60e:	601a      	str	r2, [r3, #0]
	if(samb11_app_resume_cb != NULL)
1000d610:	4b05      	ldr	r3, [pc, #20]	; (1000d628 <samb11_plf_resume_callback+0x28>)
1000d612:	681b      	ldr	r3, [r3, #0]
1000d614:	2b00      	cmp	r3, #0
1000d616:	d000      	beq.n	1000d61a <samb11_plf_resume_callback+0x1a>
	{
		samb11_app_resume_cb();
1000d618:	4798      	blx	r3
	}
}
1000d61a:	bd10      	pop	{r4, pc}
1000d61c:	1001a00c 	.word	0x1001a00c
1000d620:	4000b00c 	.word	0x4000b00c
1000d624:	4000b010 	.word	0x4000b010
1000d628:	1001a2e8 	.word	0x1001a2e8

1000d62c <init_port_list>:
port port_list[LPGPIO_MAX];
uint32_t default_samb11_clock_init[2];
void samb11_plf_resume_callback(void);

void init_port_list(void)
{
1000d62c:	b570      	push	{r4, r5, r6, lr}
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
1000d62e:	2232      	movs	r2, #50	; 0x32
1000d630:	2100      	movs	r1, #0
1000d632:	480d      	ldr	r0, [pc, #52]	; (1000d668 <init_port_list+0x3c>)
1000d634:	4b0d      	ldr	r3, [pc, #52]	; (1000d66c <init_port_list+0x40>)
1000d636:	4798      	blx	r3
1000d638:	2100      	movs	r1, #0
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d63a:	480b      	ldr	r0, [pc, #44]	; (1000d668 <init_port_list+0x3c>)
		port_list[i].bit.available = 1;
1000d63c:	2501      	movs	r5, #1
		port_list[i].bit.configured = 0;
1000d63e:	2402      	movs	r4, #2
void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
		port_list[i].bit.gpio_num = i;
1000d640:	004a      	lsls	r2, r1, #1
1000d642:	5411      	strb	r1, [r2, r0]
		port_list[i].bit.available = 1;
1000d644:	1882      	adds	r2, r0, r2
1000d646:	7853      	ldrb	r3, [r2, #1]
1000d648:	432b      	orrs	r3, r5
		port_list[i].bit.configured = 0;
1000d64a:	b2db      	uxtb	r3, r3
1000d64c:	43a3      	bics	r3, r4
1000d64e:	7053      	strb	r3, [r2, #1]
1000d650:	3101      	adds	r1, #1

void init_port_list(void)
{
	uint8_t i;
	memset(port_list,0,sizeof(port_list));
	for(i=0;i<(sizeof(port_list)/sizeof(port_list[0]));i++) {
1000d652:	2919      	cmp	r1, #25
1000d654:	d1f4      	bne.n	1000d640 <init_port_list+0x14>
		port_list[i].bit.gpio_num = i;
		port_list[i].bit.available = 1;
		port_list[i].bit.configured = 0;
	}
	//Set the GPIO for SWD is not available
	port_list[0].bit.available = 0;
1000d656:	4b04      	ldr	r3, [pc, #16]	; (1000d668 <init_port_list+0x3c>)
1000d658:	785a      	ldrb	r2, [r3, #1]
1000d65a:	3918      	subs	r1, #24
1000d65c:	438a      	bics	r2, r1
1000d65e:	705a      	strb	r2, [r3, #1]
	port_list[1].bit.available = 0;
1000d660:	78da      	ldrb	r2, [r3, #3]
1000d662:	438a      	bics	r2, r1
1000d664:	70da      	strb	r2, [r3, #3]
	//GPIO 14 is used for Coex and controlled by Firmware
	//port_list[14].bit.available = 0;
}
1000d666:	bd70      	pop	{r4, r5, r6, pc}
1000d668:	1001a028 	.word	0x1001a028
1000d66c:	100155cd 	.word	0x100155cd

1000d670 <init_clock>:

void init_clock(void)
{
	uint32_t regval;
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0);
1000d670:	4a06      	ldr	r2, [pc, #24]	; (1000d68c <init_clock+0x1c>)
1000d672:	6811      	ldr	r1, [r2, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_WATCHDOG_1_CLK_EN);
	//disable UART core & interface clocks
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_IF_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_CORE_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_UART_1_IF_CLK_EN);
1000d674:	4b06      	ldr	r3, [pc, #24]	; (1000d690 <init_clock+0x20>)
1000d676:	400b      	ands	r3, r1
	//disable I2C core 1 clocks
	//regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0_CORTUS_I2C1_CORE_CLK_EN);		//do not disable I2C because I2C driver in ASF will not enable.
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_0,regval);
1000d678:	6013      	str	r3, [r2, #0]
	default_samb11_clock_init[0] = regval;
1000d67a:	4a06      	ldr	r2, [pc, #24]	; (1000d694 <init_clock+0x24>)
1000d67c:	6013      	str	r3, [r2, #0]
	
	regval = REG_PL_RD(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1);
1000d67e:	4906      	ldr	r1, [pc, #24]	; (1000d698 <init_clock+0x28>)
1000d680:	6808      	ldr	r0, [r1, #0]
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_4_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_5_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_EFUSE_6_CLK_EN);
	//disable SPI SCK Phase int clock 
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI0_SCK_PHASE_INT_CLK_EN);
	regval &= ~(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1_SPI1_SCK_PHASE_INT_CLK_EN);
1000d682:	4b06      	ldr	r3, [pc, #24]	; (1000d69c <init_clock+0x2c>)
1000d684:	4003      	ands	r3, r0
	REG_PL_WR(LPMCU_CORTEX_MISC_REGS_LPMCU_CLOCK_ENABLES_1,regval);
1000d686:	600b      	str	r3, [r1, #0]
	default_samb11_clock_init[1] = regval;
1000d688:	6053      	str	r3, [r2, #4]
	//ARM debugger
	
	//store default values
}
1000d68a:	4770      	bx	lr
1000d68c:	4000b00c 	.word	0x4000b00c
1000d690:	fffe0fd3 	.word	0xfffe0fd3
1000d694:	1001a00c 	.word	0x1001a00c
1000d698:	4000b010 	.word	0x4000b010
1000d69c:	ffffe7c0 	.word	0xffffe7c0

1000d6a0 <platform_driver_init>:

plf_drv_status platform_driver_init()
{
1000d6a0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d6a2:	4657      	mov	r7, sl
1000d6a4:	464e      	mov	r6, r9
1000d6a6:	4645      	mov	r5, r8
1000d6a8:	b4e0      	push	{r5, r6, r7}
	plf_drv_status status = STATUS_NOT_INITIALIZED;
	if((platform_initialized == 0) || (platform_initialized != 1)) {
1000d6aa:	4b4f      	ldr	r3, [pc, #316]	; (1000d7e8 <platform_driver_init+0x148>)
1000d6ac:	781b      	ldrb	r3, [r3, #0]
1000d6ae:	2b00      	cmp	r3, #0
1000d6b0:	d004      	beq.n	1000d6bc <platform_driver_init+0x1c>
1000d6b2:	4b4d      	ldr	r3, [pc, #308]	; (1000d7e8 <platform_driver_init+0x148>)
1000d6b4:	781b      	ldrb	r3, [r3, #0]
1000d6b6:	2b01      	cmp	r3, #1
1000d6b8:	d100      	bne.n	1000d6bc <platform_driver_init+0x1c>
1000d6ba:	e08c      	b.n	1000d7d6 <platform_driver_init+0x136>
		init_port_list();
1000d6bc:	4b4b      	ldr	r3, [pc, #300]	; (1000d7ec <platform_driver_init+0x14c>)
1000d6be:	4798      	blx	r3
		init_clock();
1000d6c0:	4b4b      	ldr	r3, [pc, #300]	; (1000d7f0 <platform_driver_init+0x150>)
1000d6c2:	4798      	blx	r3
		// Initialize the ble stack message handler to NULL
		ble_stack_message_handler = NULL;
1000d6c4:	2300      	movs	r3, #0
1000d6c6:	4698      	mov	r8, r3
1000d6c8:	4b4a      	ldr	r3, [pc, #296]	; (1000d7f4 <platform_driver_init+0x154>)
1000d6ca:	4642      	mov	r2, r8
1000d6cc:	601a      	str	r2, [r3, #0]

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_DisableIRQ(IRQn_Type IRQn)
{
  NVIC->ICER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d6ce:	4c4a      	ldr	r4, [pc, #296]	; (1000d7f8 <platform_driver_init+0x158>)
1000d6d0:	2380      	movs	r3, #128	; 0x80
1000d6d2:	2280      	movs	r2, #128	; 0x80
1000d6d4:	0412      	lsls	r2, r2, #16
1000d6d6:	4692      	mov	sl, r2
1000d6d8:	50e2      	str	r2, [r4, r3]
1000d6da:	2280      	movs	r2, #128	; 0x80
1000d6dc:	0452      	lsls	r2, r2, #17
1000d6de:	4691      	mov	r9, r2
1000d6e0:	50e2      	str	r2, [r4, r3]
#ifdef CHIPVERSION_B0
		NVIC_DisableIRQ(GPIO0_IRQn);
		NVIC_DisableIRQ(GPIO1_IRQn);
		/* NVIC_DisableIRQ(PORT0_COMB_IRQn); */
		/* NVIC_DisableIRQ(PORT1_COMB_IRQn); */
		platform_register_isr = (uint8_t (*)(uint8_t ,void *))0x000007d7;
1000d6e2:	4d46      	ldr	r5, [pc, #280]	; (1000d7fc <platform_driver_init+0x15c>)
1000d6e4:	4b46      	ldr	r3, [pc, #280]	; (1000d800 <platform_driver_init+0x160>)
1000d6e6:	602b      	str	r3, [r5, #0]
		platform_unregister_isr = (uint8_t (*)(uint8_t ))0x000007bd;
1000d6e8:	4b46      	ldr	r3, [pc, #280]	; (1000d804 <platform_driver_init+0x164>)
1000d6ea:	4a47      	ldr	r2, [pc, #284]	; (1000d808 <platform_driver_init+0x168>)
1000d6ec:	6013      	str	r3, [r2, #0]
		handle_ext_wakeup_isr = (void (*)(void))0x1bc51;
1000d6ee:	4947      	ldr	r1, [pc, #284]	; (1000d80c <platform_driver_init+0x16c>)
1000d6f0:	4a47      	ldr	r2, [pc, #284]	; (1000d810 <platform_driver_init+0x170>)
1000d6f2:	6011      	str	r1, [r2, #0]
		gapm_get_task_from_id = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400bc));
1000d6f4:	4a47      	ldr	r2, [pc, #284]	; (1000d814 <platform_driver_init+0x174>)
1000d6f6:	6811      	ldr	r1, [r2, #0]
1000d6f8:	4a47      	ldr	r2, [pc, #284]	; (1000d818 <platform_driver_init+0x178>)
1000d6fa:	6011      	str	r1, [r2, #0]
		gapm_get_id_from_task = (ke_task_id_t (*)(ke_msg_id_t))(*((unsigned int *)0x100400b8));
1000d6fc:	4a47      	ldr	r2, [pc, #284]	; (1000d81c <platform_driver_init+0x17c>)
1000d6fe:	6811      	ldr	r1, [r2, #0]
1000d700:	4a47      	ldr	r2, [pc, #284]	; (1000d820 <platform_driver_init+0x180>)
1000d702:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_set = (void (*)(uint16_t))0x0001b99f;
1000d704:	4947      	ldr	r1, [pc, #284]	; (1000d824 <platform_driver_init+0x184>)
1000d706:	4a48      	ldr	r2, [pc, #288]	; (1000d828 <platform_driver_init+0x188>)
1000d708:	6011      	str	r1, [r2, #0]
		rwip_prevent_sleep_clear = (void (*)(uint16_t))0x0001b9db;
1000d70a:	4948      	ldr	r1, [pc, #288]	; (1000d82c <platform_driver_init+0x18c>)
1000d70c:	4a48      	ldr	r2, [pc, #288]	; (1000d830 <platform_driver_init+0x190>)
1000d70e:	6011      	str	r1, [r2, #0]
		apps_resume_cb = (uint32_t *)0x1004003c;
1000d710:	4f48      	ldr	r7, [pc, #288]	; (1000d834 <platform_driver_init+0x194>)
1000d712:	4a49      	ldr	r2, [pc, #292]	; (1000d838 <platform_driver_init+0x198>)
1000d714:	603a      	str	r2, [r7, #0]
		actualfreq = (uint32_t *)0x10041FC0; /* set to NULL for now as clock calibration is disabled for the time being */  /*(uint32_t *)0x10006bd8;*/
1000d716:	4949      	ldr	r1, [pc, #292]	; (1000d83c <platform_driver_init+0x19c>)
1000d718:	4a49      	ldr	r2, [pc, #292]	; (1000d840 <platform_driver_init+0x1a0>)
1000d71a:	6011      	str	r1, [r2, #0]
		updateuartbr_fp = (void (*)())0x10041FC4;
1000d71c:	4949      	ldr	r1, [pc, #292]	; (1000d844 <platform_driver_init+0x1a4>)
1000d71e:	4a4a      	ldr	r2, [pc, #296]	; (1000d848 <platform_driver_init+0x1a8>)
1000d720:	6011      	str	r1, [r2, #0]
		wakeup_source_active_cb = (uint32_t *)0x10041FD4;
1000d722:	4e4a      	ldr	r6, [pc, #296]	; (1000d84c <platform_driver_init+0x1ac>)
1000d724:	4a4a      	ldr	r2, [pc, #296]	; (1000d850 <platform_driver_init+0x1b0>)
1000d726:	6032      	str	r2, [r6, #0]
		wakeup_event_pending = (uint32_t *)0x10041FD8;
1000d728:	494a      	ldr	r1, [pc, #296]	; (1000d854 <platform_driver_init+0x1b4>)
1000d72a:	4a4b      	ldr	r2, [pc, #300]	; (1000d858 <platform_driver_init+0x1b8>)
1000d72c:	6011      	str	r1, [r2, #0]
		/* power APIs */
		pwr_enable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cbe9;
1000d72e:	494b      	ldr	r1, [pc, #300]	; (1000d85c <platform_driver_init+0x1bc>)
1000d730:	4a4b      	ldr	r2, [pc, #300]	; (1000d860 <platform_driver_init+0x1c0>)
1000d732:	6011      	str	r1, [r2, #0]
		pwr_disable_arm_wakeup = (void (*)(uint32_t wakeup_domain))0x0001cd8f;
1000d734:	494b      	ldr	r1, [pc, #300]	; (1000d864 <platform_driver_init+0x1c4>)
1000d736:	4a4c      	ldr	r2, [pc, #304]	; (1000d868 <platform_driver_init+0x1c8>)
1000d738:	6011      	str	r1, [r2, #0]
		pwr_arm_wakeup_req = (int (*)(void))0x0001cea3;
1000d73a:	494c      	ldr	r1, [pc, #304]	; (1000d86c <platform_driver_init+0x1cc>)
1000d73c:	4a4c      	ldr	r2, [pc, #304]	; (1000d870 <platform_driver_init+0x1d0>)
1000d73e:	6011      	str	r1, [r2, #0]
		pwr_wait_BLE_out_of_reset = (int (*)(uint32_t threshold))0x0001cbcf;
1000d740:	494c      	ldr	r1, [pc, #304]	; (1000d874 <platform_driver_init+0x1d4>)
1000d742:	4a4d      	ldr	r2, [pc, #308]	; (1000d878 <platform_driver_init+0x1d8>)
1000d744:	6011      	str	r1, [r2, #0]
		NVIC_DisableIRQ(PORT1_ALL_IRQn);
		platform_register_isr = register_isr;
		platform_unregister_isr = unregister_isr;
		handle_ext_wakeup_isr = (void (*)(void))0x14085;
#endif
		platform_unregister_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX);
1000d746:	2028      	movs	r0, #40	; 0x28
1000d748:	4798      	blx	r3
		platform_register_isr(GPIO1_COMBINED_VECTOR_TABLE_INDEX,(void*)PORT1_COMB_Handler);
1000d74a:	494c      	ldr	r1, [pc, #304]	; (1000d87c <platform_driver_init+0x1dc>)
1000d74c:	2028      	movs	r0, #40	; 0x28
1000d74e:	682b      	ldr	r3, [r5, #0]
1000d750:	4798      	blx	r3
		platform_register_isr(GPIO0_COMBINED_VECTOR_TABLE_INDEX,(void*)gpio0_combined_isr_handler);
1000d752:	682b      	ldr	r3, [r5, #0]
1000d754:	494a      	ldr	r1, [pc, #296]	; (1000d880 <platform_driver_init+0x1e0>)
1000d756:	2027      	movs	r0, #39	; 0x27
1000d758:	4798      	blx	r3
		//gstrFwSem               = (void *)0x100004e4;
		//NMI_MsgQueueRecv = (int (*)(void *, void ** )) 0x00017f67;
		//InternalAppMsgQHandle = (void *)0x10001158;
		//ke_free = (void (*)(void *)) 0x00015e3d;
#elif CHIPVERSION_B0
		ke_msg_send 	= (void (*)(void const *))(*((unsigned int *)0x100400e4));
1000d75a:	4b4a      	ldr	r3, [pc, #296]	; (1000d884 <platform_driver_init+0x1e4>)
1000d75c:	681a      	ldr	r2, [r3, #0]
1000d75e:	4b4a      	ldr	r3, [pc, #296]	; (1000d888 <platform_driver_init+0x1e8>)
1000d760:	601a      	str	r2, [r3, #0]
		ke_msg_alloc 	= (void* (*)(ke_msg_id_t const id, ke_task_id_t const dest_id,
1000d762:	4a4a      	ldr	r2, [pc, #296]	; (1000d88c <platform_driver_init+0x1ec>)
1000d764:	4b4a      	ldr	r3, [pc, #296]	; (1000d890 <platform_driver_init+0x1f0>)
1000d766:	601a      	str	r2, [r3, #0]
										ke_task_id_t const src_id, uint16_t const param_len) )0x00019fe9;
		os_sem_up 		= (int (*)(void*))0x0001dbdd;
1000d768:	4a4a      	ldr	r2, [pc, #296]	; (1000d894 <platform_driver_init+0x1f4>)
1000d76a:	4b4b      	ldr	r3, [pc, #300]	; (1000d898 <platform_driver_init+0x1f8>)
1000d76c:	601a      	str	r2, [r3, #0]
		os_sem_down		= (int (*)(void*))0x0001dc5b;
1000d76e:	4a4b      	ldr	r2, [pc, #300]	; (1000d89c <platform_driver_init+0x1fc>)
1000d770:	4b4b      	ldr	r3, [pc, #300]	; (1000d8a0 <platform_driver_init+0x200>)
1000d772:	601a      	str	r2, [r3, #0]
		gstrFwSem 		= (void*)0x100405ec;
1000d774:	4a4b      	ldr	r2, [pc, #300]	; (1000d8a4 <platform_driver_init+0x204>)
1000d776:	4b4c      	ldr	r3, [pc, #304]	; (1000d8a8 <platform_driver_init+0x208>)
1000d778:	601a      	str	r2, [r3, #0]
		NMI_MsgQueueRecv = (int(*)(void*, void ** ))0x0001d5e3;
1000d77a:	4a4c      	ldr	r2, [pc, #304]	; (1000d8ac <platform_driver_init+0x20c>)
1000d77c:	4b4c      	ldr	r3, [pc, #304]	; (1000d8b0 <platform_driver_init+0x210>)
1000d77e:	601a      	str	r2, [r3, #0]
		InternalAppMsgQHandle = (void*)0x10040c20;
1000d780:	4a4c      	ldr	r2, [pc, #304]	; (1000d8b4 <platform_driver_init+0x214>)
1000d782:	4b4d      	ldr	r3, [pc, #308]	; (1000d8b8 <platform_driver_init+0x218>)
1000d784:	601a      	str	r2, [r3, #0]
		ke_free = (void(*)(void*))0x00019f09;
1000d786:	4a4d      	ldr	r2, [pc, #308]	; (1000d8bc <platform_driver_init+0x21c>)
1000d788:	4b4d      	ldr	r3, [pc, #308]	; (1000d8c0 <platform_driver_init+0x220>)
1000d78a:	601a      	str	r2, [r3, #0]
#endif
		memset(rx_buffer,0,sizeof(rx_buffer));
1000d78c:	22a0      	movs	r2, #160	; 0xa0
1000d78e:	0092      	lsls	r2, r2, #2
1000d790:	2100      	movs	r1, #0
1000d792:	484c      	ldr	r0, [pc, #304]	; (1000d8c4 <platform_driver_init+0x224>)
1000d794:	4b4c      	ldr	r3, [pc, #304]	; (1000d8c8 <platform_driver_init+0x228>)
1000d796:	4798      	blx	r3
		plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000d798:	2280      	movs	r2, #128	; 0x80
1000d79a:	0092      	lsls	r2, r2, #2
1000d79c:	4b4b      	ldr	r3, [pc, #300]	; (1000d8cc <platform_driver_init+0x22c>)
1000d79e:	801a      	strh	r2, [r3, #0]
		platform_event_init();
1000d7a0:	4b4b      	ldr	r3, [pc, #300]	; (1000d8d0 <platform_driver_init+0x230>)
1000d7a2:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[0] = (1 << ((uint32_t)(IRQn) & 0x1F));
1000d7a4:	4653      	mov	r3, sl
1000d7a6:	6023      	str	r3, [r4, #0]
1000d7a8:	464b      	mov	r3, r9
1000d7aa:	6023      	str	r3, [r4, #0]
		
#ifndef CHIPVERSION_B0		
		// spi_flash clock fix.
		spi_flash_clock_init();
#endif
		samb11_app_resume_cb = NULL;
1000d7ac:	4b49      	ldr	r3, [pc, #292]	; (1000d8d4 <platform_driver_init+0x234>)
1000d7ae:	4642      	mov	r2, r8
1000d7b0:	601a      	str	r2, [r3, #0]
		*apps_resume_cb = (uint32_t)((resume_callback)samb11_plf_resume_callback);
1000d7b2:	683b      	ldr	r3, [r7, #0]
1000d7b4:	4a48      	ldr	r2, [pc, #288]	; (1000d8d8 <platform_driver_init+0x238>)
1000d7b6:	601a      	str	r2, [r3, #0]
		*wakeup_source_active_cb = (uint32_t)((wakeup_source_active_callback)wakeup_active_event_callback);
1000d7b8:	6833      	ldr	r3, [r6, #0]
1000d7ba:	4a48      	ldr	r2, [pc, #288]	; (1000d8dc <platform_driver_init+0x23c>)
1000d7bc:	601a      	str	r2, [r3, #0]
		wakeup_int_unregister_callback(0);
1000d7be:	2000      	movs	r0, #0
1000d7c0:	4c47      	ldr	r4, [pc, #284]	; (1000d8e0 <platform_driver_init+0x240>)
1000d7c2:	47a0      	blx	r4
		wakeup_int_unregister_callback(1);
1000d7c4:	2001      	movs	r0, #1
1000d7c6:	47a0      	blx	r4
		wakeup_int_unregister_callback(2);
1000d7c8:	2002      	movs	r0, #2
1000d7ca:	47a0      	blx	r4
		platform_initialized = 1;
1000d7cc:	2201      	movs	r2, #1
1000d7ce:	4b06      	ldr	r3, [pc, #24]	; (1000d7e8 <platform_driver_init+0x148>)
1000d7d0:	701a      	strb	r2, [r3, #0]
		status = STATUS_SUCCESS;
1000d7d2:	2000      	movs	r0, #0
1000d7d4:	e003      	b.n	1000d7de <platform_driver_init+0x13e>
	}
	else {
		platform_initialized = 1;
1000d7d6:	2201      	movs	r2, #1
1000d7d8:	4b03      	ldr	r3, [pc, #12]	; (1000d7e8 <platform_driver_init+0x148>)
1000d7da:	701a      	strb	r2, [r3, #0]
		status = STATUS_ALREADY_INITIALIZED;
1000d7dc:	2001      	movs	r0, #1
	}
	return status;
}
1000d7de:	bc1c      	pop	{r2, r3, r4}
1000d7e0:	4690      	mov	r8, r2
1000d7e2:	4699      	mov	r9, r3
1000d7e4:	46a2      	mov	sl, r4
1000d7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000d7e8:	1001932c 	.word	0x1001932c
1000d7ec:	1000d62d 	.word	0x1000d62d
1000d7f0:	1000d671 	.word	0x1000d671
1000d7f4:	1001934c 	.word	0x1001934c
1000d7f8:	e000e100 	.word	0xe000e100
1000d7fc:	1001a2dc 	.word	0x1001a2dc
1000d800:	000007d7 	.word	0x000007d7
1000d804:	000007bd 	.word	0x000007bd
1000d808:	1001a018 	.word	0x1001a018
1000d80c:	0001bc51 	.word	0x0001bc51
1000d810:	1001a2e0 	.word	0x1001a2e0
1000d814:	100400bc 	.word	0x100400bc
1000d818:	10019320 	.word	0x10019320
1000d81c:	100400b8 	.word	0x100400b8
1000d820:	1001931c 	.word	0x1001931c
1000d824:	0001b99f 	.word	0x0001b99f
1000d828:	1001a014 	.word	0x1001a014
1000d82c:	0001b9db 	.word	0x0001b9db
1000d830:	1001a020 	.word	0x1001a020
1000d834:	1001a2f0 	.word	0x1001a2f0
1000d838:	1004003c 	.word	0x1004003c
1000d83c:	10041fc0 	.word	0x10041fc0
1000d840:	1001a024 	.word	0x1001a024
1000d844:	10041fc4 	.word	0x10041fc4
1000d848:	1001a2ec 	.word	0x1001a2ec
1000d84c:	1001a2e4 	.word	0x1001a2e4
1000d850:	10041fd4 	.word	0x10041fd4
1000d854:	10041fd8 	.word	0x10041fd8
1000d858:	1001a01c 	.word	0x1001a01c
1000d85c:	0001cbe9 	.word	0x0001cbe9
1000d860:	10019340 	.word	0x10019340
1000d864:	0001cd8f 	.word	0x0001cd8f
1000d868:	10019330 	.word	0x10019330
1000d86c:	0001cea3 	.word	0x0001cea3
1000d870:	10019354 	.word	0x10019354
1000d874:	0001cbcf 	.word	0x0001cbcf
1000d878:	10019328 	.word	0x10019328
1000d87c:	1000dd29 	.word	0x1000dd29
1000d880:	1000dcbd 	.word	0x1000dcbd
1000d884:	100400e4 	.word	0x100400e4
1000d888:	10019348 	.word	0x10019348
1000d88c:	00019fe9 	.word	0x00019fe9
1000d890:	10019358 	.word	0x10019358
1000d894:	0001dbdd 	.word	0x0001dbdd
1000d898:	10019324 	.word	0x10019324
1000d89c:	0001dc5b 	.word	0x0001dc5b
1000d8a0:	10019338 	.word	0x10019338
1000d8a4:	100405ec 	.word	0x100405ec
1000d8a8:	10019334 	.word	0x10019334
1000d8ac:	0001d5e3 	.word	0x0001d5e3
1000d8b0:	10019344 	.word	0x10019344
1000d8b4:	10040c20 	.word	0x10040c20
1000d8b8:	1001935c 	.word	0x1001935c
1000d8bc:	00019f09 	.word	0x00019f09
1000d8c0:	10019318 	.word	0x10019318
1000d8c4:	1001a05c 	.word	0x1001a05c
1000d8c8:	100155cd 	.word	0x100155cd
1000d8cc:	1001a2f4 	.word	0x1001a2f4
1000d8d0:	1000d559 	.word	0x1000d559
1000d8d4:	1001a2e8 	.word	0x1001a2e8
1000d8d8:	1000d601 	.word	0x1000d601
1000d8dc:	1000dd85 	.word	0x1000dd85
1000d8e0:	1000dd6d 	.word	0x1000dd6d

1000d8e4 <platform_register_ble_msg_handler>:


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d8e4:	4b04      	ldr	r3, [pc, #16]	; (1000d8f8 <platform_register_ble_msg_handler+0x14>)
1000d8e6:	781a      	ldrb	r2, [r3, #0]
		ble_stack_message_handler = fp;
		status = STATUS_SUCCESS;
	}
	else {
		status = STATUS_NOT_INITIALIZED;
1000d8e8:	2305      	movs	r3, #5


plf_drv_status platform_register_ble_msg_handler(platform_interface_callback fp)
{
	plf_drv_status status;
	if(platform_initialized == 1) {
1000d8ea:	2a01      	cmp	r2, #1
1000d8ec:	d102      	bne.n	1000d8f4 <platform_register_ble_msg_handler+0x10>
		ble_stack_message_handler = fp;
1000d8ee:	4b03      	ldr	r3, [pc, #12]	; (1000d8fc <platform_register_ble_msg_handler+0x18>)
1000d8f0:	6018      	str	r0, [r3, #0]
		status = STATUS_SUCCESS;
1000d8f2:	2300      	movs	r3, #0
	}
	else {
		status = STATUS_NOT_INITIALIZED;
	}
	return status;
}
1000d8f4:	0018      	movs	r0, r3
1000d8f6:	4770      	bx	lr
1000d8f8:	1001932c 	.word	0x1001932c
1000d8fc:	1001934c 	.word	0x1001934c

1000d900 <platform_interface_send>:


//Sends a message through RW kernel messaging API
//struct ke_msg * p_msg;
void platform_interface_send(uint8_t* data, uint32_t len)
{
1000d900:	b570      	push	{r4, r5, r6, lr}
1000d902:	0004      	movs	r4, r0
	void* params;
	
	#if (CHIPVERSION_B0)
	ke_task_id_t dest_id;
	dest_id = p_msg_hdr->dest_id;
	if(gapm_get_task_from_id != NULL)
1000d904:	4b0e      	ldr	r3, [pc, #56]	; (1000d940 <platform_interface_send+0x40>)
1000d906:	681b      	ldr	r3, [r3, #0]
1000d908:	2b00      	cmp	r3, #0
1000d90a:	d002      	beq.n	1000d912 <platform_interface_send+0x12>
		p_msg_hdr->dest_id = gapm_get_task_from_id(dest_id);
1000d90c:	8840      	ldrh	r0, [r0, #2]
1000d90e:	4798      	blx	r3
1000d910:	8060      	strh	r0, [r4, #2]
	#endif	//CHIPVERSION_B0
	// Allocate the kernel message
	params = ke_msg_alloc(p_msg_hdr->id, p_msg_hdr->dest_id, p_msg_hdr->src_id, p_msg_hdr->param_len);
1000d912:	88e3      	ldrh	r3, [r4, #6]
1000d914:	88a2      	ldrh	r2, [r4, #4]
1000d916:	8861      	ldrh	r1, [r4, #2]
1000d918:	8820      	ldrh	r0, [r4, #0]
1000d91a:	4d0a      	ldr	r5, [pc, #40]	; (1000d944 <platform_interface_send+0x44>)
1000d91c:	682d      	ldr	r5, [r5, #0]
1000d91e:	47a8      	blx	r5
1000d920:	0005      	movs	r5, r0
											
	//no params
	if (p_msg_hdr->param_len == 0)
1000d922:	88e2      	ldrh	r2, [r4, #6]
1000d924:	2a00      	cmp	r2, #0
1000d926:	d102      	bne.n	1000d92e <platform_interface_send+0x2e>
	{
		// Send message directly
		at_ke_msg_send(params);
1000d928:	4b07      	ldr	r3, [pc, #28]	; (1000d948 <platform_interface_send+0x48>)
1000d92a:	4798      	blx	r3
1000d92c:	e006      	b.n	1000d93c <platform_interface_send+0x3c>
	}
	else
	{
		//copy params
		memcpy(params,&(data[KE_MSG_HDR_LENGTH]),p_msg_hdr->param_len);
1000d92e:	0021      	movs	r1, r4
1000d930:	3108      	adds	r1, #8
1000d932:	4b06      	ldr	r3, [pc, #24]	; (1000d94c <platform_interface_send+0x4c>)
1000d934:	4798      	blx	r3
		// Send the kernel message
		at_ke_msg_send(params);
1000d936:	0028      	movs	r0, r5
1000d938:	4b03      	ldr	r3, [pc, #12]	; (1000d948 <platform_interface_send+0x48>)
1000d93a:	4798      	blx	r3
	}
}
1000d93c:	bd70      	pop	{r4, r5, r6, pc}
1000d93e:	46c0      	nop			; (mov r8, r8)
1000d940:	10019320 	.word	0x10019320
1000d944:	10019358 	.word	0x10019358
1000d948:	1000d589 	.word	0x1000d589
1000d94c:	100155bb 	.word	0x100155bb

1000d950 <send_plf_int_msg_ind>:

void send_plf_int_msg_ind(uint8_t intr_index, uint8_t callback_id, void *data, uint16_t data_len)
{
1000d950:	b570      	push	{r4, r5, r6, lr}
1000d952:	0015      	movs	r5, r2
1000d954:	001c      	movs	r4, r3
	void* params;
//#if (CHIPVERSION_A4)	
	//os_sem_up(gstrFwSem);
//#endif
	// Allocate the kernel message
	params = ke_msg_alloc(PERIPHERAL_INTERRUPT_EVENT, TASK_INTERNAL_APP, BUILD_INTR_SRCID(callback_id,intr_index), data_len);
1000d956:	020a      	lsls	r2, r1, #8
1000d958:	4302      	orrs	r2, r0
1000d95a:	4b0a      	ldr	r3, [pc, #40]	; (1000d984 <send_plf_int_msg_ind+0x34>)
1000d95c:	681e      	ldr	r6, [r3, #0]
1000d95e:	0023      	movs	r3, r4
1000d960:	2105      	movs	r1, #5
1000d962:	20a0      	movs	r0, #160	; 0xa0
1000d964:	00c0      	lsls	r0, r0, #3
1000d966:	47b0      	blx	r6
1000d968:	1e06      	subs	r6, r0, #0
											
	//no params
	if(params != NULL) {
1000d96a:	d00a      	beq.n	1000d982 <send_plf_int_msg_ind+0x32>
		if((data_len != 0) && (NULL != data))
1000d96c:	2c00      	cmp	r4, #0
1000d96e:	d005      	beq.n	1000d97c <send_plf_int_msg_ind+0x2c>
1000d970:	2d00      	cmp	r5, #0
1000d972:	d003      	beq.n	1000d97c <send_plf_int_msg_ind+0x2c>
		{
			//copy params
			memcpy(params, data, data_len);
1000d974:	0022      	movs	r2, r4
1000d976:	0029      	movs	r1, r5
1000d978:	4b03      	ldr	r3, [pc, #12]	; (1000d988 <send_plf_int_msg_ind+0x38>)
1000d97a:	4798      	blx	r3
		}
		// Send the kernel message
		at_ke_msg_send(params);
1000d97c:	0030      	movs	r0, r6
1000d97e:	4b03      	ldr	r3, [pc, #12]	; (1000d98c <send_plf_int_msg_ind+0x3c>)
1000d980:	4798      	blx	r3
	}
}
1000d982:	bd70      	pop	{r4, r5, r6, pc}
1000d984:	10019358 	.word	0x10019358
1000d988:	100155bb 	.word	0x100155bb
1000d98c:	1000d589 	.word	0x1000d589

1000d990 <platform_event_wait>:
//Waits on InternalAppMsgQHandle Queue
// This function won't busy wait if nothing on queue but will down the semaphore and go to a blocking state
// The OS then will move control to other higher priority tasks and will only return if these tasks finish processing AND the queue has received 
//a msg
plf_drv_status platform_event_wait(uint32_t timeout)
{
1000d990:	b5f0      	push	{r4, r5, r6, r7, lr}
1000d992:	465f      	mov	r7, fp
1000d994:	4656      	mov	r6, sl
1000d996:	464d      	mov	r5, r9
1000d998:	4644      	mov	r4, r8
1000d99a:	b4f0      	push	{r4, r5, r6, r7}
1000d99c:	b087      	sub	sp, #28
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d99e:	1e44      	subs	r4, r0, #1
plf_drv_status platform_event_wait(uint32_t timeout)
{
	static struct ke_msg* rcv_msg;
	static struct ke_msghdr	*ke_msg_hdr;
	plf_drv_status status = STATUS_SUCCESS;
	uint8_t bEventTimeoutFlag = 0;
1000d9a0:	2300      	movs	r3, #0
1000d9a2:	4699      	mov	r9, r3
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
1000d9a4:	1ce3      	adds	r3, r4, #3
1000d9a6:	d81c      	bhi.n	1000d9e2 <platform_event_wait+0x52>
	return num_of_freed;
}

static void platform_start_event_timeout(uint32_t timeout)
{
	uint8_t msg[8+5] = {0};
1000d9a8:	220d      	movs	r2, #13
1000d9aa:	2100      	movs	r1, #0
1000d9ac:	a802      	add	r0, sp, #8
1000d9ae:	4b82      	ldr	r3, [pc, #520]	; (1000dbb8 <platform_event_wait+0x228>)
1000d9b0:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000d9b2:	2333      	movs	r3, #51	; 0x33
1000d9b4:	aa02      	add	r2, sp, #8
1000d9b6:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000d9b8:	3b30      	subs	r3, #48	; 0x30
1000d9ba:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000d9bc:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000d9be:	3302      	adds	r3, #2
1000d9c0:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000d9c2:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (((5)>>8) & 0x00FF );
	
	msg[u16TxLen++] = (uint8_t)((timeout) & 0x00FF );
1000d9c4:	7214      	strb	r4, [r2, #8]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 8) & 0x00FF) ;
1000d9c6:	0a23      	lsrs	r3, r4, #8
1000d9c8:	7253      	strb	r3, [r2, #9]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 16) & 0x00FF);
1000d9ca:	0c23      	lsrs	r3, r4, #16
1000d9cc:	7293      	strb	r3, [r2, #10]
	msg[u16TxLen++] = (uint8_t)(( (timeout) >> 24) & 0x00FF);
1000d9ce:	0e24      	lsrs	r4, r4, #24
1000d9d0:	72d4      	strb	r4, [r2, #11]
	
	msg[u16TxLen++] = ((1) & 0x00FF );
1000d9d2:	2301      	movs	r3, #1
1000d9d4:	7313      	strb	r3, [r2, #12]
	
	platform_interface_send(msg, u16TxLen);
1000d9d6:	210d      	movs	r1, #13
1000d9d8:	0010      	movs	r0, r2
1000d9da:	4b78      	ldr	r3, [pc, #480]	; (1000dbbc <platform_event_wait+0x22c>)
1000d9dc:	4798      	blx	r3
	uint8_t bEventTimeoutFlag = 0;
	uint8_t bLoopAgain = 0;
	if(((uint32_t)-1 != timeout) && ((uint32_t)0 < timeout))
	{			
		platform_start_event_timeout(timeout-1);
		bEventTimeoutFlag = 1;
1000d9de:	2301      	movs	r3, #1
1000d9e0:	4699      	mov	r9, r3
1000d9e2:	2400      	movs	r4, #0
1000d9e4:	2500      	movs	r5, #0
	}

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
1000d9e6:	4f76      	ldr	r7, [pc, #472]	; (1000dbc0 <platform_event_wait+0x230>)
1000d9e8:	4e76      	ldr	r6, [pc, #472]	; (1000dbc4 <platform_event_wait+0x234>)
1000d9ea:	4977      	ldr	r1, [pc, #476]	; (1000dbc8 <platform_event_wait+0x238>)
1000d9ec:	6838      	ldr	r0, [r7, #0]
1000d9ee:	6833      	ldr	r3, [r6, #0]
1000d9f0:	4798      	blx	r3
1000d9f2:	2800      	cmp	r0, #0
1000d9f4:	d000      	beq.n	1000d9f8 <platform_event_wait+0x68>
1000d9f6:	e088      	b.n	1000db0a <platform_event_wait+0x17a>
		{
			uint16_t msg_id = rcv_msg->id;
1000d9f8:	4b73      	ldr	r3, [pc, #460]	; (1000dbc8 <platform_event_wait+0x238>)
1000d9fa:	681c      	ldr	r4, [r3, #0]
1000d9fc:	88a3      	ldrh	r3, [r4, #4]
1000d9fe:	469a      	mov	sl, r3
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000da00:	23cd      	movs	r3, #205	; 0xcd
1000da02:	009b      	lsls	r3, r3, #2
1000da04:	459a      	cmp	sl, r3
1000da06:	d100      	bne.n	1000da0a <platform_event_wait+0x7a>
1000da08:	e0c7      	b.n	1000db9a <platform_event_wait+0x20a>

	do {
		if(NMI_MsgQueueRecv(InternalAppMsgQHandle, (void**)&rcv_msg) == STATUS_SUCCESS)
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
1000da0a:	8923      	ldrh	r3, [r4, #8]
1000da0c:	469b      	mov	fp, r3
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
1000da0e:	8963      	ldrh	r3, [r4, #10]
1000da10:	4698      	mov	r8, r3
			bLoopAgain = 0;
			
			if((rcv_msg->id != DBG_KE_TIMER_RESP) && (bEventTimeoutFlag))
1000da12:	464b      	mov	r3, r9
1000da14:	2b00      	cmp	r3, #0
1000da16:	d011      	beq.n	1000da3c <platform_event_wait+0xac>
	platform_interface_send(msg, u16TxLen);
}

static void platform_stop_event_timeout(void)
{
	uint8_t msg[8+5] = {0};
1000da18:	220d      	movs	r2, #13
1000da1a:	2100      	movs	r1, #0
1000da1c:	a802      	add	r0, sp, #8
1000da1e:	4b66      	ldr	r3, [pc, #408]	; (1000dbb8 <platform_event_wait+0x228>)
1000da20:	4798      	blx	r3
	uint8_t u16TxLen = 0;

	msg[u16TxLen++] = ((DBG_KE_TIMER_REQ) & 0x00FF );
1000da22:	2333      	movs	r3, #51	; 0x33
1000da24:	aa02      	add	r2, sp, #8
1000da26:	7013      	strb	r3, [r2, #0]
	msg[u16TxLen++] = (((DBG_KE_TIMER_REQ)>>8) & 0x00FF );
1000da28:	3b30      	subs	r3, #48	; 0x30
1000da2a:	7053      	strb	r3, [r2, #1]
	msg[u16TxLen++] = ((TASK_DBG) & 0x00FF );
1000da2c:	7093      	strb	r3, [r2, #2]
	msg[u16TxLen++] = (((TASK_DBG)>>8) & 0x00FF );	
	msg[u16TxLen++] = ((TASK_INTERNAL_APP) & 0x00FF );
1000da2e:	3302      	adds	r3, #2
1000da30:	7113      	strb	r3, [r2, #4]
	msg[u16TxLen++] = (((TASK_INTERNAL_APP)>>8) & 0x00FF );
	msg[u16TxLen++] = ((5) & 0x00FF );
1000da32:	7193      	strb	r3, [r2, #6]
	msg[u16TxLen++] = (uint8_t)(( (0) >> 16) & 0x00FF);
	msg[u16TxLen++] = (uint8_t)(( (0) >> 24) & 0x00FF);
	
	msg[u16TxLen++] = ((0) & 0x00FF );
	
	platform_interface_send(msg, u16TxLen);
1000da34:	210d      	movs	r1, #13
1000da36:	0010      	movs	r0, r2
1000da38:	4b60      	ldr	r3, [pc, #384]	; (1000dbbc <platform_event_wait+0x22c>)
1000da3a:	4798      	blx	r3
			{
				//Stop timer if it is still running
				platform_stop_event_timeout();
			}
				
			if(msg_id == PERIPHERAL_INTERRUPT_EVENT)
1000da3c:	23a0      	movs	r3, #160	; 0xa0
1000da3e:	00db      	lsls	r3, r3, #3
1000da40:	459a      	cmp	sl, r3
1000da42:	d121      	bne.n	1000da88 <platform_event_wait+0xf8>
			{
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
1000da44:	4b61      	ldr	r3, [pc, #388]	; (1000dbcc <platform_event_wait+0x23c>)
1000da46:	881b      	ldrh	r3, [r3, #0]
1000da48:	4443      	add	r3, r8
1000da4a:	22a0      	movs	r2, #160	; 0xa0
1000da4c:	0092      	lsls	r2, r2, #2
1000da4e:	4293      	cmp	r3, r2
1000da50:	dd02      	ble.n	1000da58 <platform_event_wait+0xc8>
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
1000da52:	3a80      	subs	r2, #128	; 0x80
1000da54:	4b5d      	ldr	r3, [pc, #372]	; (1000dbcc <platform_event_wait+0x23c>)
1000da56:	801a      	strh	r2, [r3, #0]
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
1000da58:	4b5c      	ldr	r3, [pc, #368]	; (1000dbcc <platform_event_wait+0x23c>)
1000da5a:	469a      	mov	sl, r3
1000da5c:	881d      	ldrh	r5, [r3, #0]
1000da5e:	4b5c      	ldr	r3, [pc, #368]	; (1000dbd0 <platform_event_wait+0x240>)
1000da60:	18ed      	adds	r5, r5, r3
1000da62:	0021      	movs	r1, r4
1000da64:	310c      	adds	r1, #12
1000da66:	4642      	mov	r2, r8
1000da68:	0028      	movs	r0, r5
1000da6a:	4b5a      	ldr	r3, [pc, #360]	; (1000dbd4 <platform_event_wait+0x244>)
1000da6c:	4798      	blx	r3
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
1000da6e:	4642      	mov	r2, r8
1000da70:	0029      	movs	r1, r5
1000da72:	4658      	mov	r0, fp
1000da74:	4b58      	ldr	r3, [pc, #352]	; (1000dbd8 <platform_event_wait+0x248>)
1000da76:	4798      	blx	r3
				plf_event_buff_index += len;
1000da78:	4653      	mov	r3, sl
1000da7a:	881b      	ldrh	r3, [r3, #0]
1000da7c:	4443      	add	r3, r8
1000da7e:	4652      	mov	r2, sl
1000da80:	8013      	strh	r3, [r2, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000da82:	2400      	movs	r4, #0
				if(plf_event_buff_index+len > MAX_EVT_BUFF_LEN)
					plf_event_buff_index = PLF_EVENT_BUFFER_START_INDEX;
				memcpy(&rx_buffer[plf_event_buff_index],data,len);
				platform_event_post(src_id,&rx_buffer[plf_event_buff_index],len);
				plf_event_buff_index += len;
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
1000da84:	2502      	movs	r5, #2
1000da86:	e03a      	b.n	1000dafe <platform_event_wait+0x16e>
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000da88:	4b54      	ldr	r3, [pc, #336]	; (1000dbdc <platform_event_wait+0x24c>)
1000da8a:	681b      	ldr	r3, [r3, #0]
1000da8c:	2b00      	cmp	r3, #0
1000da8e:	d032      	beq.n	1000daf6 <platform_event_wait+0x166>
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
1000da90:	4b4d      	ldr	r3, [pc, #308]	; (1000dbc8 <platform_event_wait+0x238>)
1000da92:	681a      	ldr	r2, [r3, #0]
1000da94:	8893      	ldrh	r3, [r2, #4]
1000da96:	21cd      	movs	r1, #205	; 0xcd
1000da98:	0089      	lsls	r1, r1, #2
1000da9a:	428b      	cmp	r3, r1
1000da9c:	d104      	bne.n	1000daa8 <platform_event_wait+0x118>
					{
						if(bEventTimeoutFlag)
1000da9e:	464b      	mov	r3, r9
						{
							status = STATUS_TIMEOUT;	
						}
						else
						{
							bLoopAgain = 1;
1000daa0:	2401      	movs	r4, #1
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
1000daa2:	2b00      	cmp	r3, #0
1000daa4:	d02b      	beq.n	1000dafe <platform_event_wait+0x16e>
1000daa6:	e028      	b.n	1000dafa <platform_event_wait+0x16a>
							bLoopAgain = 1;
						}
					}
					else
					{
						ke_msg_hdr = (struct ke_msghdr *)((void *)(rx_buffer+BLE_EVENT_BUFFER_START_INDEX));
1000daa8:	4c4d      	ldr	r4, [pc, #308]	; (1000dbe0 <platform_event_wait+0x250>)
1000daaa:	4d49      	ldr	r5, [pc, #292]	; (1000dbd0 <platform_event_wait+0x240>)
1000daac:	6025      	str	r5, [r4, #0]
						ke_msg_hdr->id = rcv_msg->id;
1000daae:	702b      	strb	r3, [r5, #0]
1000dab0:	0a1b      	lsrs	r3, r3, #8
1000dab2:	706b      	strb	r3, [r5, #1]
//#if (CHIPVERSION_A3 || CHIPVERSION_A4)
					//ke_msg_hdr->src_id = rcv_msg->src_id;
//#else
					ke_msg_hdr->src_id = gapm_get_id_from_task(rcv_msg->src_id);
1000dab4:	8910      	ldrh	r0, [r2, #8]
1000dab6:	4b4b      	ldr	r3, [pc, #300]	; (1000dbe4 <platform_event_wait+0x254>)
1000dab8:	681b      	ldr	r3, [r3, #0]
1000daba:	4798      	blx	r3
1000dabc:	7128      	strb	r0, [r5, #4]
1000dabe:	0a00      	lsrs	r0, r0, #8
1000dac0:	7168      	strb	r0, [r5, #5]
//#endif  /* (CHIPVERSION_A3 || CHIPVERSION_A4) */
						ke_msg_hdr->dest_id = rcv_msg->dest_id;
1000dac2:	6820      	ldr	r0, [r4, #0]
1000dac4:	4b40      	ldr	r3, [pc, #256]	; (1000dbc8 <platform_event_wait+0x238>)
1000dac6:	681a      	ldr	r2, [r3, #0]
1000dac8:	88d2      	ldrh	r2, [r2, #6]
1000daca:	8042      	strh	r2, [r0, #2]
						ke_msg_hdr->param_len = rcv_msg->param_len;
1000dacc:	681d      	ldr	r5, [r3, #0]
1000dace:	896b      	ldrh	r3, [r5, #10]
1000dad0:	80c3      	strh	r3, [r0, #6]
						ke_msg_hdr++;
1000dad2:	3008      	adds	r0, #8
1000dad4:	6020      	str	r0, [r4, #0]
						if(rcv_msg->param_len > 0) {
1000dad6:	896a      	ldrh	r2, [r5, #10]
1000dad8:	2a00      	cmp	r2, #0
1000dada:	d003      	beq.n	1000dae4 <platform_event_wait+0x154>
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
1000dadc:	0029      	movs	r1, r5
1000dade:	310c      	adds	r1, #12
1000dae0:	4b3c      	ldr	r3, [pc, #240]	; (1000dbd4 <platform_event_wait+0x244>)
1000dae2:	4798      	blx	r3
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
1000dae4:	8969      	ldrh	r1, [r5, #10]
1000dae6:	3108      	adds	r1, #8
1000dae8:	4b3c      	ldr	r3, [pc, #240]	; (1000dbdc <platform_event_wait+0x24c>)
1000daea:	681b      	ldr	r3, [r3, #0]
1000daec:	4838      	ldr	r0, [pc, #224]	; (1000dbd0 <platform_event_wait+0x240>)
1000daee:	4798      	blx	r3
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000daf0:	2400      	movs	r4, #0
						ke_msg_hdr++;
						if(rcv_msg->param_len > 0) {
							memcpy((void *)ke_msg_hdr,rcv_msg->param,rcv_msg->param_len);
						}
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
1000daf2:	2503      	movs	r5, #3
1000daf4:	e003      	b.n	1000dafe <platform_event_wait+0x16e>
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000daf6:	2400      	movs	r4, #0
1000daf8:	e001      	b.n	1000dafe <platform_event_wait+0x16e>
1000dafa:	2400      	movs	r4, #0
				if(ble_stack_message_handler) {
					if(rcv_msg->id == DBG_KE_TIMER_RESP)
					{
						if(bEventTimeoutFlag)
						{
							status = STATUS_TIMEOUT;	
1000dafc:	25d0      	movs	r5, #208	; 0xd0
						ble_stack_message_handler(rx_buffer,(rcv_msg->param_len + sizeof(struct ke_msghdr)));
						status = STATUS_RECEIVED_BLE_MSG;
					}
				}
			}
			ke_free(rcv_msg);
1000dafe:	4b32      	ldr	r3, [pc, #200]	; (1000dbc8 <platform_event_wait+0x238>)
1000db00:	6818      	ldr	r0, [r3, #0]
1000db02:	4b39      	ldr	r3, [pc, #228]	; (1000dbe8 <platform_event_wait+0x258>)
1000db04:	681b      	ldr	r3, [r3, #0]
1000db06:	4798      	blx	r3
1000db08:	e000      	b.n	1000db0c <platform_event_wait+0x17c>
		}
		else
		{
			status = STATUS_FAILURE;
1000db0a:	2507      	movs	r5, #7
		}
	}while(bLoopAgain);
1000db0c:	2c00      	cmp	r4, #0
1000db0e:	d000      	beq.n	1000db12 <platform_event_wait+0x182>
1000db10:	e76b      	b.n	1000d9ea <platform_event_wait+0x5a>
	
	if(bEventTimeoutFlag)
1000db12:	464b      	mov	r3, r9
1000db14:	2b00      	cmp	r3, #0
1000db16:	d046      	beq.n	1000dba6 <platform_event_wait+0x216>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
1000db18:	4b29      	ldr	r3, [pc, #164]	; (1000dbc0 <platform_event_wait+0x230>)
1000db1a:	681e      	ldr	r6, [r3, #0]
#endif 
static int NMI_MsgQueueDestroyOnKeID(NMI_MsgQueueHandle* pHandle, ke_msg_id_t u16KeMsgId)
{
	int num_of_freed=0;
	Message * current , *prev = NULL;
	if((NULL == pHandle) && (NULL == pHandle->pstrMessageList))
1000db1c:	2e00      	cmp	r6, #0
1000db1e:	d104      	bne.n	1000db2a <platform_event_wait+0x19a>
1000db20:	2300      	movs	r3, #0
1000db22:	6a1c      	ldr	r4, [r3, #32]
1000db24:	2c00      	cmp	r4, #0
1000db26:	d131      	bne.n	1000db8c <platform_event_wait+0x1fc>
1000db28:	e03d      	b.n	1000dba6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
1000db2a:	6a34      	ldr	r4, [r6, #32]
	os_sem_down(&pHandle->strCriticalSection);
1000db2c:	2314      	movs	r3, #20
1000db2e:	469c      	mov	ip, r3
1000db30:	44b4      	add	ip, r6
1000db32:	4663      	mov	r3, ip
1000db34:	4660      	mov	r0, ip
1000db36:	9300      	str	r3, [sp, #0]
1000db38:	4b2c      	ldr	r3, [pc, #176]	; (1000dbec <platform_event_wait+0x25c>)
1000db3a:	681b      	ldr	r3, [r3, #0]
1000db3c:	4798      	blx	r3
	while(NULL != current)
1000db3e:	2c00      	cmp	r4, #0
1000db40:	d01f      	beq.n	1000db82 <platform_event_wait+0x1f2>
			}
			ke_free(rcv_msg);
		}
		else
		{
			status = STATUS_FAILURE;
1000db42:	2700      	movs	r7, #0

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000db44:	23cd      	movs	r3, #205	; 0xcd
1000db46:	009b      	lsls	r3, r3, #2
1000db48:	4698      	mov	r8, r3
		{
			num_of_freed++;
			if(NULL != prev)
			{
				prev->pstrNext = current->pstrNext;
				ke_free(current);
1000db4a:	4b27      	ldr	r3, [pc, #156]	; (1000dbe8 <platform_event_wait+0x258>)
1000db4c:	469a      	mov	sl, r3
1000db4e:	0020      	movs	r0, r4

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
	{
		if(u16KeMsgId == ((struct ke_msg*)current->pvBuffer)->id)
1000db50:	6803      	ldr	r3, [r0, #0]
1000db52:	889b      	ldrh	r3, [r3, #4]
1000db54:	4543      	cmp	r3, r8
1000db56:	d110      	bne.n	1000db7a <platform_event_wait+0x1ea>
		{
			num_of_freed++;
			if(NULL != prev)
1000db58:	2f00      	cmp	r7, #0
1000db5a:	d006      	beq.n	1000db6a <platform_event_wait+0x1da>
			{
				prev->pstrNext = current->pstrNext;
1000db5c:	6883      	ldr	r3, [r0, #8]
1000db5e:	60bb      	str	r3, [r7, #8]
				ke_free(current);
1000db60:	4653      	mov	r3, sl
1000db62:	681b      	ldr	r3, [r3, #0]
1000db64:	4798      	blx	r3
				current = prev->pstrNext;
1000db66:	68b8      	ldr	r0, [r7, #8]
1000db68:	e009      	b.n	1000db7e <platform_event_wait+0x1ee>
			}
			else
			{
				pHandle->pstrMessageList = current->pstrNext;
1000db6a:	6883      	ldr	r3, [r0, #8]
1000db6c:	6233      	str	r3, [r6, #32]
				ke_free(current);
1000db6e:	4b1e      	ldr	r3, [pc, #120]	; (1000dbe8 <platform_event_wait+0x258>)
1000db70:	681b      	ldr	r3, [r3, #0]
1000db72:	9301      	str	r3, [sp, #4]
1000db74:	4798      	blx	r3
				current = pHandle->pstrMessageList;
1000db76:	6a30      	ldr	r0, [r6, #32]
1000db78:	e001      	b.n	1000db7e <platform_event_wait+0x1ee>
			}
		}
		else
		{
			prev = current;
			current = current ->pstrNext;
1000db7a:	0007      	movs	r7, r0
1000db7c:	6880      	ldr	r0, [r0, #8]
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
	while(NULL != current)
1000db7e:	2800      	cmp	r0, #0
1000db80:	d1e6      	bne.n	1000db50 <platform_event_wait+0x1c0>
		{
			prev = current;
			current = current ->pstrNext;
		}
	}
	os_sem_up(&pHandle->strCriticalSection);
1000db82:	4b1b      	ldr	r3, [pc, #108]	; (1000dbf0 <platform_event_wait+0x260>)
1000db84:	681b      	ldr	r3, [r3, #0]
1000db86:	9800      	ldr	r0, [sp, #0]
1000db88:	4798      	blx	r3
	if(bEventTimeoutFlag)
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
1000db8a:	e00c      	b.n	1000dba6 <platform_event_wait+0x216>
	{
		return num_of_freed;
	}

	current = pHandle->pstrMessageList;
	os_sem_down(&pHandle->strCriticalSection);
1000db8c:	2314      	movs	r3, #20
1000db8e:	9300      	str	r3, [sp, #0]
1000db90:	4b16      	ldr	r3, [pc, #88]	; (1000dbec <platform_event_wait+0x25c>)
1000db92:	681b      	ldr	r3, [r3, #0]
1000db94:	2014      	movs	r0, #20
1000db96:	4798      	blx	r3
1000db98:	e7d3      	b.n	1000db42 <platform_event_wait+0x1b2>
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000db9a:	4b10      	ldr	r3, [pc, #64]	; (1000dbdc <platform_event_wait+0x24c>)
1000db9c:	681b      	ldr	r3, [r3, #0]
		{
			uint16_t msg_id = rcv_msg->id;
			uint16_t src_id = rcv_msg->src_id;
			uint8_t* data = (uint8_t*)rcv_msg->param;
			uint16_t len = rcv_msg->param_len;
			bLoopAgain = 0;
1000db9e:	2400      	movs	r4, #0
				status = STATUS_RECEIVED_PLF_EVENT_MSG;
			}
			else
			{	
				// BLE stack messages
				if(ble_stack_message_handler) {
1000dba0:	2b00      	cmp	r3, #0
1000dba2:	d0ac      	beq.n	1000dafe <platform_event_wait+0x16e>
1000dba4:	e77b      	b.n	1000da9e <platform_event_wait+0x10e>
	{
		//CleanUp if there is any remaining DBG_KE_TIMER_RESP message in queue
		NMI_MsgQueueDestroyOnKeID(InternalAppMsgQHandle, DBG_KE_TIMER_RESP);
	}
	return status;
}
1000dba6:	0028      	movs	r0, r5
1000dba8:	b007      	add	sp, #28
1000dbaa:	bc3c      	pop	{r2, r3, r4, r5}
1000dbac:	4690      	mov	r8, r2
1000dbae:	4699      	mov	r9, r3
1000dbb0:	46a2      	mov	sl, r4
1000dbb2:	46ab      	mov	fp, r5
1000dbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000dbb6:	46c0      	nop			; (mov r8, r8)
1000dbb8:	100155cd 	.word	0x100155cd
1000dbbc:	1000d901 	.word	0x1000d901
1000dbc0:	1001935c 	.word	0x1001935c
1000dbc4:	10019344 	.word	0x10019344
1000dbc8:	10019350 	.word	0x10019350
1000dbcc:	1001a2f4 	.word	0x1001a2f4
1000dbd0:	1001a05c 	.word	0x1001a05c
1000dbd4:	100155bb 	.word	0x100155bb
1000dbd8:	1000d521 	.word	0x1000d521
1000dbdc:	1001934c 	.word	0x1001934c
1000dbe0:	1001933c 	.word	0x1001933c
1000dbe4:	1001931c 	.word	0x1001931c
1000dbe8:	10019318 	.word	0x10019318
1000dbec:	10019338 	.word	0x10019338
1000dbf0:	10019324 	.word	0x10019324

1000dbf4 <acquire_sleep_lock>:

plf_drv_status acquire_sleep_lock()
{
1000dbf4:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[acquire_sleep_lock]\tDisabling ULP");
	plf_drv_status status = STATUS_RESOURCE_BUSY;
	//uint8_t osc_en = REG_PL_RD(0x4000B1EC)&0x01;
	
	rwip_prevent_sleep_set(APP_PREVENT_SLEEP);
1000dbf6:	4b03      	ldr	r3, [pc, #12]	; (1000dc04 <acquire_sleep_lock+0x10>)
1000dbf8:	681b      	ldr	r3, [r3, #0]
1000dbfa:	2080      	movs	r0, #128	; 0x80
1000dbfc:	0200      	lsls	r0, r0, #8
1000dbfe:	4798      	blx	r3
		/*  */
		os_sem_up(gstrFwSem);
	}
#endif	//0
	return status;
}
1000dc00:	2008      	movs	r0, #8
1000dc02:	bd10      	pop	{r4, pc}
1000dc04:	1001a014 	.word	0x1001a014

1000dc08 <release_message_lock>:

plf_drv_status release_message_lock()
{
1000dc08:	b510      	push	{r4, lr}
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000dc0a:	4b03      	ldr	r3, [pc, #12]	; (1000dc18 <release_message_lock+0x10>)
1000dc0c:	681b      	ldr	r3, [r3, #0]
1000dc0e:	2080      	movs	r0, #128	; 0x80
1000dc10:	01c0      	lsls	r0, r0, #7
1000dc12:	4798      	blx	r3
	return status;
}
1000dc14:	2000      	movs	r0, #0
1000dc16:	bd10      	pop	{r4, pc}
1000dc18:	1001a020 	.word	0x1001a020

1000dc1c <release_sleep_lock>:

plf_drv_status release_sleep_lock()
{
1000dc1c:	b510      	push	{r4, lr}
    //DBG_LOG_DEV("[release_sleep_lock]\tEnabling ULP");
	plf_drv_status status = STATUS_SUCCESS;
	rwip_prevent_sleep_clear(MSG_PREVENT_SLEEP);
1000dc1e:	4c05      	ldr	r4, [pc, #20]	; (1000dc34 <release_sleep_lock+0x18>)
1000dc20:	2080      	movs	r0, #128	; 0x80
1000dc22:	01c0      	lsls	r0, r0, #7
1000dc24:	6823      	ldr	r3, [r4, #0]
1000dc26:	4798      	blx	r3
	rwip_prevent_sleep_clear(APP_PREVENT_SLEEP);
1000dc28:	6823      	ldr	r3, [r4, #0]
1000dc2a:	2080      	movs	r0, #128	; 0x80
1000dc2c:	0200      	lsls	r0, r0, #8
1000dc2e:	4798      	blx	r3
	return status;
}
1000dc30:	2000      	movs	r0, #0
1000dc32:	bd10      	pop	{r4, pc}
1000dc34:	1001a020 	.word	0x1001a020

1000dc38 <register_resume_callback>:
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
	if(cb == NULL)
1000dc38:	2800      	cmp	r0, #0
1000dc3a:	d003      	beq.n	1000dc44 <register_resume_callback+0xc>
	{
		status = STATUS_INVALID_ARGUMENT;
	}
	else 
	{
		samb11_app_resume_cb = cb;
1000dc3c:	4b02      	ldr	r3, [pc, #8]	; (1000dc48 <register_resume_callback+0x10>)
1000dc3e:	6018      	str	r0, [r3, #0]
	}
}

plf_drv_status register_resume_callback(resume_callback cb)
{
	plf_drv_status status = STATUS_SUCCESS;
1000dc40:	2000      	movs	r0, #0
1000dc42:	e000      	b.n	1000dc46 <register_resume_callback+0xe>
	if(cb == NULL)
	{
		status = STATUS_INVALID_ARGUMENT;
1000dc44:	2009      	movs	r0, #9
	{
		samb11_app_resume_cb = cb;
		//*apps_resume_cb = (uint32_t)cb;
	}
	return status;
}
1000dc46:	4770      	bx	lr
1000dc48:	1001a2e8 	.word	0x1001a2e8

1000dc4c <gpio1_combined_isr_handler>:

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source);
void wakeup_active_event_callback(uint32_t wakeup_source);

void gpio1_combined_isr_handler(void)
{
1000dc4c:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio1 = LPGPIO_16;
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
1000dc4e:	4a18      	ldr	r2, [pc, #96]	; (1000dcb0 <gpio1_combined_isr_handler+0x64>)
1000dc50:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dc52:	b29b      	uxth	r3, r3
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000dc54:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000dc56:	2180      	movs	r1, #128	; 0x80
1000dc58:	0209      	lsls	r1, r1, #8
1000dc5a:	4301      	orrs	r1, r0
1000dc5c:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dc5e:	0010      	movs	r0, r2
1000dc60:	4d14      	ldr	r5, [pc, #80]	; (1000dcb4 <gpio1_combined_isr_handler+0x68>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dc62:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dc64:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO1->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO1->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dc66:	05db      	lsls	r3, r3, #23
1000dc68:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000dc6a:	d011      	beq.n	1000dc90 <gpio1_combined_isr_handler+0x44>
			port_gpio1 = (intstatus & ~(intstatus - 1));
1000dc6c:	b2db      	uxtb	r3, r3
1000dc6e:	4259      	negs	r1, r3
1000dc70:	400b      	ands	r3, r1
			while (!(port_gpio1 == 1)) {
1000dc72:	2b01      	cmp	r3, #1
1000dc74:	d006      	beq.n	1000dc84 <gpio1_combined_isr_handler+0x38>
1000dc76:	0011      	movs	r1, r2
				port_gpio1 = port_gpio1 >> 1;
1000dc78:	085b      	lsrs	r3, r3, #1
				index++;
1000dc7a:	3101      	adds	r1, #1
1000dc7c:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio1 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio1 == 1)) {
1000dc7e:	2b01      	cmp	r3, #1
1000dc80:	d1fa      	bne.n	1000dc78 <gpio1_combined_isr_handler+0x2c>
1000dc82:	e000      	b.n	1000dc86 <gpio1_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dc84:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO1->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dc86:	0023      	movs	r3, r4
1000dc88:	408b      	lsls	r3, r1
1000dc8a:	b29b      	uxth	r3, r3
1000dc8c:	8703      	strh	r3, [r0, #56]	; 0x38
1000dc8e:	e003      	b.n	1000dc98 <gpio1_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO1->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dc90:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000dc92:	432b      	orrs	r3, r5
1000dc94:	b29b      	uxth	r3, r3
1000dc96:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO1->INTSTATUSCLEAR.reg;
1000dc98:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dc9a:	05db      	lsls	r3, r3, #23
1000dc9c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000dc9e:	d1e2      	bne.n	1000dc66 <gpio1_combined_isr_handler+0x1a>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[0] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
1000dca0:	2180      	movs	r1, #128	; 0x80
1000dca2:	0049      	lsls	r1, r1, #1
1000dca4:	3381      	adds	r3, #129	; 0x81
1000dca6:	33ff      	adds	r3, #255	; 0xff
1000dca8:	4a03      	ldr	r2, [pc, #12]	; (1000dcb8 <gpio1_combined_isr_handler+0x6c>)
1000dcaa:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(8);
}
1000dcac:	bd30      	pop	{r4, r5, pc}
1000dcae:	46c0      	nop			; (mov r8, r8)
1000dcb0:	40011000 	.word	0x40011000
1000dcb4:	ffff8000 	.word	0xffff8000
1000dcb8:	e000e100 	.word	0xe000e100

1000dcbc <gpio0_combined_isr_handler>:

void gpio0_combined_isr_handler(void)
{
1000dcbc:	b530      	push	{r4, r5, lr}
	uint8_t index = 0;
	/* portint_callback_t callback; */
	uint8_t port_gpio0 = LPGPIO_0;
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
1000dcbe:	4a17      	ldr	r2, [pc, #92]	; (1000dd1c <gpio0_combined_isr_handler+0x60>)
1000dcc0:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dcc2:	b29b      	uxth	r3, r3
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */
1000dcc4:	8d10      	ldrh	r0, [r2, #40]	; 0x28
1000dcc6:	2180      	movs	r1, #128	; 0x80
1000dcc8:	0209      	lsls	r1, r1, #8
1000dcca:	4301      	orrs	r1, r0
1000dccc:	8511      	strh	r1, [r2, #40]	; 0x28
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dcce:	0010      	movs	r0, r2
1000dcd0:	4d13      	ldr	r5, [pc, #76]	; (1000dd20 <gpio0_combined_isr_handler+0x64>)
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dcd2:	2401      	movs	r4, #1
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dcd4:	2200      	movs	r2, #0
	uint32_t intstatus = GPIO0->INTSTATUSCLEAR.reg; /* jeffy */
	GPIO0->INTTYPESET.reg |= (1 << 15); /* jeffy */

	do {
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dcd6:	05db      	lsls	r3, r3, #23
1000dcd8:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
1000dcda:	d011      	beq.n	1000dd00 <gpio0_combined_isr_handler+0x44>
			port_gpio0 = (intstatus & ~(intstatus - 1));
1000dcdc:	b2db      	uxtb	r3, r3
1000dcde:	4259      	negs	r1, r3
1000dce0:	400b      	ands	r3, r1
			while (!(port_gpio0 == 1)) {
1000dce2:	2b01      	cmp	r3, #1
1000dce4:	d006      	beq.n	1000dcf4 <gpio0_combined_isr_handler+0x38>
1000dce6:	0011      	movs	r1, r2
				port_gpio0 = port_gpio0 >> 1;
1000dce8:	085b      	lsrs	r3, r3, #1
				index++;
1000dcea:	3101      	adds	r1, #1
1000dcec:	b2c9      	uxtb	r1, r1
		intstatus &= 0x1F;
		#endif
		index = 0;
		if (intstatus != 0) {
			port_gpio0 = (intstatus & ~(intstatus - 1));
			while (!(port_gpio0 == 1)) {
1000dcee:	2b01      	cmp	r3, #1
1000dcf0:	d1fa      	bne.n	1000dce8 <gpio0_combined_isr_handler+0x2c>
1000dcf2:	e000      	b.n	1000dcf6 <gpio0_combined_isr_handler+0x3a>
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
		#else
		intstatus &= 0x1F;
		#endif
		index = 0;
1000dcf4:	0011      	movs	r1, r2
			/* callback = port_int_callback[index+LPGPIO_16]; */
			/* callback(); */
			/* } */
			/* CMSDK_GPIO1->INTCLEAR = (1 << index); */
			/* /REG_GPIO1_INTSTATUSCLEAR = (1 << index); */
			GPIO0->INTSTATUSCLEAR.reg = (1 << index); /* / jeffy */
1000dcf6:	0023      	movs	r3, r4
1000dcf8:	408b      	lsls	r3, r1
1000dcfa:	b29b      	uxth	r3, r3
1000dcfc:	8703      	strh	r3, [r0, #56]	; 0x38
1000dcfe:	e003      	b.n	1000dd08 <gpio0_combined_isr_handler+0x4c>
		} else {
			/* CMSDK_GPIO1->INTCLEAR = CMSDK_GPIO1->INTSTATUS; */
			GPIO0->INTSTATUSCLEAR.reg |= (1 << 15); /* jeffy */
1000dd00:	8f03      	ldrh	r3, [r0, #56]	; 0x38
1000dd02:	432b      	orrs	r3, r5
1000dd04:	b29b      	uxth	r3, r3
1000dd06:	8703      	strh	r3, [r0, #56]	; 0x38
			/* REG_GPIO1_INTSTATUSCLEAR = REG_GPIO1_INTENSET; */
		}

		intstatus = GPIO0->INTSTATUSCLEAR.reg;
1000dd08:	8f03      	ldrh	r3, [r0, #56]	; 0x38
		#ifdef CHIPVERSION_B0
		intstatus &= 0x1FF;
1000dd0a:	05db      	lsls	r3, r3, #23
1000dd0c:	0ddb      	lsrs	r3, r3, #23
		#else
		intstatus &= 0x1F;
		#endif
	} while (intstatus != 0);
1000dd0e:	d1e2      	bne.n	1000dcd6 <gpio0_combined_isr_handler+0x1a>
1000dd10:	2180      	movs	r1, #128	; 0x80
1000dd12:	3381      	adds	r3, #129	; 0x81
1000dd14:	33ff      	adds	r3, #255	; 0xff
1000dd16:	4a03      	ldr	r2, [pc, #12]	; (1000dd24 <gpio0_combined_isr_handler+0x68>)
1000dd18:	50d1      	str	r1, [r2, r3]

	NVIC_ClearPendingIRQ(7);
}
1000dd1a:	bd30      	pop	{r4, r5, pc}
1000dd1c:	40010000 	.word	0x40010000
1000dd20:	ffff8000 	.word	0xffff8000
1000dd24:	e000e100 	.word	0xe000e100

1000dd28 <PORT1_COMB_Handler>:

#ifdef CHIPVERSION_B0
void PORT1_COMB_Handler(void)
{
1000dd28:	b510      	push	{r4, lr}
	/* if(CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13))) { */
	if (GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13))) {
1000dd2a:	4b0c      	ldr	r3, [pc, #48]	; (1000dd5c <PORT1_COMB_Handler+0x34>)
1000dd2c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
1000dd2e:	0b5b      	lsrs	r3, r3, #13
1000dd30:	d010      	beq.n	1000dd54 <PORT1_COMB_Handler+0x2c>
		handle_ext_wakeup_isr();
1000dd32:	4b0b      	ldr	r3, [pc, #44]	; (1000dd60 <PORT1_COMB_Handler+0x38>)
1000dd34:	681b      	ldr	r3, [r3, #0]
1000dd36:	4798      	blx	r3

		/* clear specific int pin status that caused the Interrupt */
		/* CMSDK_GPIO1->INTCLEAR |= CMSDK_GPIO1->INTSTATUS & ((1<<15) | (1<<14) | (1<<13)); */
		GPIO1->INTSTATUSCLEAR.reg |= GPIO1->INTSTATUSCLEAR.reg & ((1 << 15) | (1 << 14) | (1 << 13));
1000dd38:	4a08      	ldr	r2, [pc, #32]	; (1000dd5c <PORT1_COMB_Handler+0x34>)
1000dd3a:	8f13      	ldrh	r3, [r2, #56]	; 0x38
1000dd3c:	8f11      	ldrh	r1, [r2, #56]	; 0x38
1000dd3e:	0b5b      	lsrs	r3, r3, #13
1000dd40:	035b      	lsls	r3, r3, #13
1000dd42:	430b      	orrs	r3, r1
1000dd44:	8713      	strh	r3, [r2, #56]	; 0x38
1000dd46:	2180      	movs	r1, #128	; 0x80
1000dd48:	0049      	lsls	r1, r1, #1
1000dd4a:	23c0      	movs	r3, #192	; 0xc0
1000dd4c:	005b      	lsls	r3, r3, #1
1000dd4e:	4a05      	ldr	r2, [pc, #20]	; (1000dd64 <PORT1_COMB_Handler+0x3c>)
1000dd50:	50d1      	str	r1, [r2, r3]
1000dd52:	e001      	b.n	1000dd58 <PORT1_COMB_Handler+0x30>
		/* NVIC_ClearPendingIRQ(PORT1_COMB_IRQn); */
		NVIC_ClearPendingIRQ(8);
	} else {
		gpio1_combined_isr_handler();
1000dd54:	4b04      	ldr	r3, [pc, #16]	; (1000dd68 <PORT1_COMB_Handler+0x40>)
1000dd56:	4798      	blx	r3
	}
}
1000dd58:	bd10      	pop	{r4, pc}
1000dd5a:	46c0      	nop			; (mov r8, r8)
1000dd5c:	40011000 	.word	0x40011000
1000dd60:	1001a2e0 	.word	0x1001a2e0
1000dd64:	e000e100 	.word	0xe000e100
1000dd68:	1000dc4d 	.word	0x1000dc4d

1000dd6c <wakeup_int_unregister_callback>:
	{
		wakeup_source_callback[wakeup_source] = 0;
	}
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
1000dd6c:	2303      	movs	r3, #3
#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
	if(	(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_0) || 
1000dd6e:	2802      	cmp	r0, #2
1000dd70:	d804      	bhi.n	1000dd7c <wakeup_int_unregister_callback+0x10>
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_1) || 
		(wakeup_source == PORT_WAKEUP_SOURCE_AON_GPIO_2) ) 
	{
		wakeup_source_callback[wakeup_source] = 0;
1000dd72:	0080      	lsls	r0, r0, #2
1000dd74:	2200      	movs	r2, #0
1000dd76:	4b02      	ldr	r3, [pc, #8]	; (1000dd80 <wakeup_int_unregister_callback+0x14>)
1000dd78:	50c2      	str	r2, [r0, r3]

#endif  /* CHIPVERSION_B0 */

enum port_status_code wakeup_int_unregister_callback(enum port_wakeup_source wakeup_source)
{
	enum port_status_code status = PORT_STATUS_OK;
1000dd7a:	2300      	movs	r3, #0
	else 
	{
		status = PORT_STATUS_ERR_INVALID_ARG;
	}
	return status;
}
1000dd7c:	0018      	movs	r0, r3
1000dd7e:	4770      	bx	lr
1000dd80:	1001a2f8 	.word	0x1001a2f8

1000dd84 <wakeup_active_event_callback>:

void wakeup_active_event_callback(uint32_t wakeup_source)
{
1000dd84:	b510      	push	{r4, lr}
1000dd86:	0004      	movs	r4, r0
	portint_callback_t callback;
	uint32_t *pu32WakeSource = (uint32_t *)wakeup_source;
	if((*pu32WakeSource & 0xFF) == 1)
1000dd88:	7803      	ldrb	r3, [r0, #0]
1000dd8a:	2b01      	cmp	r3, #1
1000dd8c:	d108      	bne.n	1000dda0 <wakeup_active_event_callback+0x1c>
	{
		if(wakeup_source_callback[0] != NULL) {
1000dd8e:	4b11      	ldr	r3, [pc, #68]	; (1000ddd4 <wakeup_active_event_callback+0x50>)
1000dd90:	681b      	ldr	r3, [r3, #0]
1000dd92:	2b00      	cmp	r3, #0
1000dd94:	d000      	beq.n	1000dd98 <wakeup_active_event_callback+0x14>
			callback = wakeup_source_callback[0];
			callback();
1000dd96:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF);
1000dd98:	23ff      	movs	r3, #255	; 0xff
1000dd9a:	6822      	ldr	r2, [r4, #0]
1000dd9c:	439a      	bics	r2, r3
1000dd9e:	6022      	str	r2, [r4, #0]
	}
	if(((*pu32WakeSource >> 8) & 0xFF) == 1)
1000dda0:	7863      	ldrb	r3, [r4, #1]
1000dda2:	2b01      	cmp	r3, #1
1000dda4:	d108      	bne.n	1000ddb8 <wakeup_active_event_callback+0x34>
	{
		if(wakeup_source_callback[1] != NULL) {
1000dda6:	4b0b      	ldr	r3, [pc, #44]	; (1000ddd4 <wakeup_active_event_callback+0x50>)
1000dda8:	685b      	ldr	r3, [r3, #4]
1000ddaa:	2b00      	cmp	r3, #0
1000ddac:	d000      	beq.n	1000ddb0 <wakeup_active_event_callback+0x2c>
			callback = wakeup_source_callback[1];
			callback();
1000ddae:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 8);
1000ddb0:	4b09      	ldr	r3, [pc, #36]	; (1000ddd8 <wakeup_active_event_callback+0x54>)
1000ddb2:	6822      	ldr	r2, [r4, #0]
1000ddb4:	4013      	ands	r3, r2
1000ddb6:	6023      	str	r3, [r4, #0]
	}
	if(((*pu32WakeSource >> 16) & 0xFF) == 1)
1000ddb8:	78a3      	ldrb	r3, [r4, #2]
1000ddba:	2b01      	cmp	r3, #1
1000ddbc:	d108      	bne.n	1000ddd0 <wakeup_active_event_callback+0x4c>
	{
		if(wakeup_source_callback[2] != NULL) {
1000ddbe:	4b05      	ldr	r3, [pc, #20]	; (1000ddd4 <wakeup_active_event_callback+0x50>)
1000ddc0:	689b      	ldr	r3, [r3, #8]
1000ddc2:	2b00      	cmp	r3, #0
1000ddc4:	d000      	beq.n	1000ddc8 <wakeup_active_event_callback+0x44>
			callback = wakeup_source_callback[2];
			callback();
1000ddc6:	4798      	blx	r3
		}
		*pu32WakeSource &= ~(0xFF << 16);
1000ddc8:	4b04      	ldr	r3, [pc, #16]	; (1000dddc <wakeup_active_event_callback+0x58>)
1000ddca:	6822      	ldr	r2, [r4, #0]
1000ddcc:	4013      	ands	r3, r2
1000ddce:	6023      	str	r3, [r4, #0]
	}
}
1000ddd0:	bd10      	pop	{r4, pc}
1000ddd2:	46c0      	nop			; (mov r8, r8)
1000ddd4:	1001a2f8 	.word	0x1001a2f8
1000ddd8:	ffff00ff 	.word	0xffff00ff
1000dddc:	ff00ffff 	.word	0xff00ffff

1000dde0 <resume_cb>:
	sms_pressure_init_variables();
}


static void resume_cb(void)
{
1000dde0:	b510      	push	{r4, lr}
	init_port_list(); // re-initialize all ports
1000dde2:	4b09      	ldr	r3, [pc, #36]	; (1000de08 <resume_cb+0x28>)
1000dde4:	4798      	blx	r3
	serial_console_init(); // GPIO (UART) for the console
1000dde6:	4b09      	ldr	r3, [pc, #36]	; (1000de0c <resume_cb+0x2c>)
1000dde8:	4798      	blx	r3
	sms_dualtimer_init();
1000ddea:	4b09      	ldr	r3, [pc, #36]	; (1000de10 <resume_cb+0x30>)
1000ddec:	4798      	blx	r3
	sms_button_gpio_init(); // GPIO (AO_0 & AO_1) for the buttons
1000ddee:	4b09      	ldr	r3, [pc, #36]	; (1000de14 <resume_cb+0x34>)
1000ddf0:	4798      	blx	r3
	sms_led_gpio_init();
1000ddf2:	4b09      	ldr	r3, [pc, #36]	; (1000de18 <resume_cb+0x38>)
1000ddf4:	4798      	blx	r3
	sms_spi_master_configure();
1000ddf6:	4b09      	ldr	r3, [pc, #36]	; (1000de1c <resume_cb+0x3c>)
1000ddf8:	4798      	blx	r3
	sms_i2c_master_configure();
1000ddfa:	4b09      	ldr	r3, [pc, #36]	; (1000de20 <resume_cb+0x40>)
1000ddfc:	4798      	blx	r3
	sms_mpu_configure_gpio();
1000ddfe:	4b09      	ldr	r3, [pc, #36]	; (1000de24 <resume_cb+0x44>)
1000de00:	4798      	blx	r3
	sms_monitor_configure_gpio();
1000de02:	4b09      	ldr	r3, [pc, #36]	; (1000de28 <resume_cb+0x48>)
1000de04:	4798      	blx	r3
	//gpio_pin_set_output_level(SMS_PRESSURE_VCC_PIN, true);
}
1000de06:	bd10      	pop	{r4, pc}
1000de08:	1000d62d 	.word	0x1000d62d
1000de0c:	1000d395 	.word	0x1000d395
1000de10:	10009f65 	.word	0x10009f65
1000de14:	10008aed 	.word	0x10008aed
1000de18:	10009a81 	.word	0x10009a81
1000de1c:	10009e19 	.word	0x10009e19
1000de20:	10008e79 	.word	0x10008e79
1000de24:	1000900d 	.word	0x1000900d
1000de28:	10008dd9 	.word	0x10008dd9

1000de2c <sms_init_variables>:
*/
/*- Includes ---------------------------------------------------------------*/
#include "sms_peripheral1.h"

void sms_init_variables(void)
{
1000de2c:	b510      	push	{r4, lr}
	timer1_current_mode = TIMER1_MODE_NONE;
1000de2e:	2300      	movs	r3, #0
1000de30:	4a09      	ldr	r2, [pc, #36]	; (1000de58 <sms_init_variables+0x2c>)
1000de32:	7013      	strb	r3, [r2, #0]
	timer2_current_mode = TIMER2_MODE_NONE;
1000de34:	4a09      	ldr	r2, [pc, #36]	; (1000de5c <sms_init_variables+0x30>)
1000de36:	7013      	strb	r3, [r2, #0]
	sms_working_mode = SMS_MODE_BUTTON_SOLO;
1000de38:	2101      	movs	r1, #1
1000de3a:	4a09      	ldr	r2, [pc, #36]	; (1000de60 <sms_init_variables+0x34>)
1000de3c:	7011      	strb	r1, [r2, #0]
	ulp_ready = false;
1000de3e:	4a09      	ldr	r2, [pc, #36]	; (1000de64 <sms_init_variables+0x38>)
1000de40:	7013      	strb	r3, [r2, #0]
	sms_ble_timeout = BLE_TIMEOUT_OFF;
1000de42:	2201      	movs	r2, #1
1000de44:	4252      	negs	r2, r2
1000de46:	4b08      	ldr	r3, [pc, #32]	; (1000de68 <sms_init_variables+0x3c>)
1000de48:	601a      	str	r2, [r3, #0]
	
	sms_ble_init_variables();
1000de4a:	4b08      	ldr	r3, [pc, #32]	; (1000de6c <sms_init_variables+0x40>)
1000de4c:	4798      	blx	r3
	sms_button_init_variables();
1000de4e:	4b08      	ldr	r3, [pc, #32]	; (1000de70 <sms_init_variables+0x44>)
1000de50:	4798      	blx	r3
	sms_pressure_init_variables();
1000de52:	4b08      	ldr	r3, [pc, #32]	; (1000de74 <sms_init_variables+0x48>)
1000de54:	4798      	blx	r3
}
1000de56:	bd10      	pop	{r4, pc}
1000de58:	10019430 	.word	0x10019430
1000de5c:	1001963f 	.word	0x1001963f
1000de60:	100194fc 	.word	0x100194fc
1000de64:	100194fd 	.word	0x100194fd
1000de68:	100194f8 	.word	0x100194f8
1000de6c:	10008509 	.word	0x10008509
1000de70:	10008ac5 	.word	0x10008ac5
1000de74:	10009b1d 	.word	0x10009b1d

1000de78 <main>:
//sms_current_interrupt.int_on = true;
//}


int main(void)
{
1000de78:	b5f0      	push	{r4, r5, r6, r7, lr}
1000de7a:	b087      	sub	sp, #28
	/* Define current BLE state
	* ------------------------ */
	ble_instance.current_state = BLE_STATE_STARTING;
1000de7c:	2210      	movs	r2, #16
1000de7e:	4bb0      	ldr	r3, [pc, #704]	; (1000e140 <main+0x2c8>)
1000de80:	701a      	strb	r2, [r3, #0]
	
	/* Initialize platform
	* ------------------- */
	platform_driver_init();
1000de82:	4bb0      	ldr	r3, [pc, #704]	; (1000e144 <main+0x2cc>)
1000de84:	4798      	blx	r3
	gpio_init(); // GPIO
1000de86:	4bb0      	ldr	r3, [pc, #704]	; (1000e148 <main+0x2d0>)
1000de88:	4798      	blx	r3
	serial_console_init(); // serial console for debugging
1000de8a:	4bb0      	ldr	r3, [pc, #704]	; (1000e14c <main+0x2d4>)
1000de8c:	4798      	blx	r3
	
	/* Disable ULP
	* ----------- */
	acquire_sleep_lock();
1000de8e:	4bb0      	ldr	r3, [pc, #704]	; (1000e150 <main+0x2d8>)
1000de90:	4798      	blx	r3
	

	/* Initialize SMS flags
	* -------------------- */
	sms_init_variables();
1000de92:	4bb0      	ldr	r3, [pc, #704]	; (1000e154 <main+0x2dc>)
1000de94:	4798      	blx	r3
	
	
	/* Initialize hardware components
	* ------------------------------ */
	// Dualtimer
	sms_dualtimer_init();
1000de96:	4bb0      	ldr	r3, [pc, #704]	; (1000e158 <main+0x2e0>)
1000de98:	4798      	blx	r3
	
	// Buttons
	sms_button_gpio_init();
1000de9a:	4bb0      	ldr	r3, [pc, #704]	; (1000e15c <main+0x2e4>)
1000de9c:	4798      	blx	r3
	
	// LED
	sms_led_gpio_init();
1000de9e:	4bb0      	ldr	r3, [pc, #704]	; (1000e160 <main+0x2e8>)
1000dea0:	4798      	blx	r3
	
	// I2C
	sms_i2c_master_configure();
1000dea2:	4bb0      	ldr	r3, [pc, #704]	; (1000e164 <main+0x2ec>)
1000dea4:	4798      	blx	r3
	
	// SPI
	sms_spi_master_configure();
1000dea6:	4bb0      	ldr	r3, [pc, #704]	; (1000e168 <main+0x2f0>)
1000dea8:	4798      	blx	r3
	
	// MPU
	sms_mpu_configure_gpio();
1000deaa:	4bb0      	ldr	r3, [pc, #704]	; (1000e16c <main+0x2f4>)
1000deac:	4798      	blx	r3
	
	// monitoring...
	sms_monitor_configure_gpio();
1000deae:	4bb0      	ldr	r3, [pc, #704]	; (1000e170 <main+0x2f8>)
1000deb0:	4798      	blx	r3
	
	/* Initialize the BLE module
	* ------------------------- */
	ble_device_init(NULL); // initialize the BLE chip and set the device address
1000deb2:	2000      	movs	r0, #0
1000deb4:	4baf      	ldr	r3, [pc, #700]	; (1000e174 <main+0x2fc>)
1000deb6:	4798      	blx	r3
	
	
	/* Define BLE services
	* ------------------- */
	sms_button_define_services();
1000deb8:	4baf      	ldr	r3, [pc, #700]	; (1000e178 <main+0x300>)
1000deba:	4798      	blx	r3
	sms_pressure_define_services();
1000debc:	4baf      	ldr	r3, [pc, #700]	; (1000e17c <main+0x304>)
1000debe:	4798      	blx	r3
	sms_mpu_define_services();
1000dec0:	4baf      	ldr	r3, [pc, #700]	; (1000e180 <main+0x308>)
1000dec2:	4798      	blx	r3
	
	
	/* Register callbacks
	* ------------------ */
	// Recovering from ULP
	register_resume_callback(resume_cb); // register resume callback
1000dec4:	48af      	ldr	r0, [pc, #700]	; (1000e184 <main+0x30c>)
1000dec6:	4bb0      	ldr	r3, [pc, #704]	; (1000e188 <main+0x310>)
1000dec8:	4798      	blx	r3

	// Dualtimer (AON timer enables on registration... so do it later)
	sms_dualtimer_register_callback(DUALTIMER_TIMER1, sms_dualtimer1_cb); // button pressing timer
1000deca:	49b0      	ldr	r1, [pc, #704]	; (1000e18c <main+0x314>)
1000decc:	2000      	movs	r0, #0
1000dece:	4bb0      	ldr	r3, [pc, #704]	; (1000e190 <main+0x318>)
1000ded0:	4798      	blx	r3
	// DUALTIMER_TIMER2 used for blocking delay!! So don't register callback!!

	// Buttons
	sms_button_register_callbacks();
1000ded2:	4bb0      	ldr	r3, [pc, #704]	; (1000e194 <main+0x31c>)
1000ded4:	4798      	blx	r3
	
	// MPU
	sms_mpu_register_callbacks();
1000ded6:	4bb0      	ldr	r3, [pc, #704]	; (1000e198 <main+0x320>)
1000ded8:	4798      	blx	r3

	// BLE
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GAP_EVENT_TYPE, sms_ble_gap_cb);
1000deda:	4ab0      	ldr	r2, [pc, #704]	; (1000e19c <main+0x324>)
1000dedc:	2100      	movs	r1, #0
1000dede:	2000      	movs	r0, #0
1000dee0:	4caf      	ldr	r4, [pc, #700]	; (1000e1a0 <main+0x328>)
1000dee2:	47a0      	blx	r4
	ble_mgr_events_callback_handler(REGISTER_CALL_BACK, BLE_GATT_SERVER_EVENT_TYPE, sms_ble_gatt_server_cb);
1000dee4:	4aaf      	ldr	r2, [pc, #700]	; (1000e1a4 <main+0x32c>)
1000dee6:	2102      	movs	r1, #2
1000dee8:	2000      	movs	r0, #0
1000deea:	47a0      	blx	r4


	/* Enable buttons interrupts
	* ------------------------- */
	sms_button_toggle_callback(SMS_BTN_INT_ENABLE, SMS_BTN_INT_ENABLE);
1000deec:	2100      	movs	r1, #0
1000deee:	2000      	movs	r0, #0
1000def0:	4bad      	ldr	r3, [pc, #692]	; (1000e1a8 <main+0x330>)
1000def2:	4798      	blx	r3

	if(sms_mpu_check()) {
1000def4:	4bad      	ldr	r3, [pc, #692]	; (1000e1ac <main+0x334>)
1000def6:	4798      	blx	r3
1000def8:	2800      	cmp	r0, #0
1000defa:	d005      	beq.n	1000df08 <main+0x90>
		DBG_LOG("MPU not here...");
1000defc:	48ac      	ldr	r0, [pc, #688]	; (1000e1b0 <main+0x338>)
1000defe:	4bad      	ldr	r3, [pc, #692]	; (1000e1b4 <main+0x33c>)
1000df00:	4798      	blx	r3
1000df02:	48ad      	ldr	r0, [pc, #692]	; (1000e1b8 <main+0x340>)
1000df04:	4bad      	ldr	r3, [pc, #692]	; (1000e1bc <main+0x344>)
1000df06:	4798      	blx	r3
	}
	
	sms_mpu_calibrate(mpu_device.config.gyro_bias, mpu_device.config.accel_bias);
1000df08:	4cad      	ldr	r4, [pc, #692]	; (1000e1c0 <main+0x348>)
1000df0a:	0020      	movs	r0, r4
1000df0c:	380c      	subs	r0, #12
1000df0e:	0021      	movs	r1, r4
1000df10:	4bac      	ldr	r3, [pc, #688]	; (1000e1c4 <main+0x34c>)
1000df12:	4798      	blx	r3
	DBG_LOG("MPU calibrated... bias values: %ld %ld %ld / %ld %ld %ld", (uint32_t)(mpu_device.config.gyro_bias[0] * 10000), (uint32_t)(mpu_device.config.gyro_bias[1] * 10000), (uint32_t)(mpu_device.config.gyro_bias[2] * 10000), (uint32_t)(mpu_device.config.accel_bias[0] * 10000), (uint32_t)(mpu_device.config.accel_bias[1] * 10000), (uint32_t)(mpu_device.config.accel_bias[2] * 10000));
1000df14:	48a6      	ldr	r0, [pc, #664]	; (1000e1b0 <main+0x338>)
1000df16:	4ba7      	ldr	r3, [pc, #668]	; (1000e1b4 <main+0x33c>)
1000df18:	4798      	blx	r3
1000df1a:	3c24      	subs	r4, #36	; 0x24
1000df1c:	4eaa      	ldr	r6, [pc, #680]	; (1000e1c8 <main+0x350>)
1000df1e:	49ab      	ldr	r1, [pc, #684]	; (1000e1cc <main+0x354>)
1000df20:	6a20      	ldr	r0, [r4, #32]
1000df22:	47b0      	blx	r6
1000df24:	4daa      	ldr	r5, [pc, #680]	; (1000e1d0 <main+0x358>)
1000df26:	47a8      	blx	r5
1000df28:	0007      	movs	r7, r0
1000df2a:	49a8      	ldr	r1, [pc, #672]	; (1000e1cc <main+0x354>)
1000df2c:	69e0      	ldr	r0, [r4, #28]
1000df2e:	47b0      	blx	r6
1000df30:	47a8      	blx	r5
1000df32:	9004      	str	r0, [sp, #16]
1000df34:	49a5      	ldr	r1, [pc, #660]	; (1000e1cc <main+0x354>)
1000df36:	69a0      	ldr	r0, [r4, #24]
1000df38:	47b0      	blx	r6
1000df3a:	47a8      	blx	r5
1000df3c:	9005      	str	r0, [sp, #20]
1000df3e:	49a3      	ldr	r1, [pc, #652]	; (1000e1cc <main+0x354>)
1000df40:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
1000df42:	47b0      	blx	r6
1000df44:	47a8      	blx	r5
1000df46:	9002      	str	r0, [sp, #8]
1000df48:	49a0      	ldr	r1, [pc, #640]	; (1000e1cc <main+0x354>)
1000df4a:	6aa0      	ldr	r0, [r4, #40]	; 0x28
1000df4c:	47b0      	blx	r6
1000df4e:	47a8      	blx	r5
1000df50:	9001      	str	r0, [sp, #4]
1000df52:	499e      	ldr	r1, [pc, #632]	; (1000e1cc <main+0x354>)
1000df54:	6a60      	ldr	r0, [r4, #36]	; 0x24
1000df56:	47b0      	blx	r6
1000df58:	47a8      	blx	r5
1000df5a:	9000      	str	r0, [sp, #0]
1000df5c:	003b      	movs	r3, r7
1000df5e:	9a04      	ldr	r2, [sp, #16]
1000df60:	9905      	ldr	r1, [sp, #20]
1000df62:	489c      	ldr	r0, [pc, #624]	; (1000e1d4 <main+0x35c>)
1000df64:	4c95      	ldr	r4, [pc, #596]	; (1000e1bc <main+0x344>)
1000df66:	47a0      	blx	r4
	
	sms_mpu_initialize();
1000df68:	4b9b      	ldr	r3, [pc, #620]	; (1000e1d8 <main+0x360>)
1000df6a:	4798      	blx	r3
	//DBG_LOG("MPU-9250 initialized...");
	
	if(sms_mpu_comp_check()) {
1000df6c:	4b9b      	ldr	r3, [pc, #620]	; (1000e1dc <main+0x364>)
1000df6e:	4798      	blx	r3
1000df70:	2800      	cmp	r0, #0
1000df72:	d005      	beq.n	1000df80 <main+0x108>
		DBG_LOG("Compass not here...");
1000df74:	488e      	ldr	r0, [pc, #568]	; (1000e1b0 <main+0x338>)
1000df76:	4b8f      	ldr	r3, [pc, #572]	; (1000e1b4 <main+0x33c>)
1000df78:	4798      	blx	r3
1000df7a:	4899      	ldr	r0, [pc, #612]	; (1000e1e0 <main+0x368>)
1000df7c:	4b8f      	ldr	r3, [pc, #572]	; (1000e1bc <main+0x344>)
1000df7e:	4798      	blx	r3
	}
	
	sms_mpu_comp_initialize(mpu_device.config.mag_calibration);
1000df80:	4898      	ldr	r0, [pc, #608]	; (1000e1e4 <main+0x36c>)
1000df82:	4b99      	ldr	r3, [pc, #612]	; (1000e1e8 <main+0x370>)
1000df84:	4798      	blx	r3
	//DBG_LOG("Compass initialized... calibration values: %ld %ld %ld", (uint32_t)(mpu_device.config.mag_calibration[0] * 10000), (uint32_t)(mpu_device.config.mag_calibration[1] * 10000), (uint32_t)(mpu_device.config.mag_calibration[2] * 10000));
	
	sms_button_toggle_callback(SMS_BTN_INT_DISABLE, SMS_BTN_INT_DISABLE);
1000df86:	2101      	movs	r1, #1
1000df88:	2001      	movs	r0, #1
1000df8a:	4b87      	ldr	r3, [pc, #540]	; (1000e1a8 <main+0x330>)
1000df8c:	4798      	blx	r3
	sms_sensors_interrupt_toggle(true, false);
1000df8e:	2100      	movs	r1, #0
1000df90:	2001      	movs	r0, #1
1000df92:	4b96      	ldr	r3, [pc, #600]	; (1000e1ec <main+0x374>)
1000df94:	4798      	blx	r3
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000df96:	4e96      	ldr	r6, [pc, #600]	; (1000e1f0 <main+0x378>)
1000df98:	4c96      	ldr	r4, [pc, #600]	; (1000e1f4 <main+0x37c>)
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
			DBG_LOG("Event get timeout");
		}
		else {
			DBG_LOG("BLE error occurred");
1000df9a:	4d85      	ldr	r5, [pc, #532]	; (1000e1b0 <main+0x338>)
	
	at_ble_status_t ble_status;
	while(true)
	{
		/* BLE Event task */
		ble_status = ble_event_task(sms_ble_timeout);
1000df9c:	6830      	ldr	r0, [r6, #0]
1000df9e:	47a0      	blx	r4
		
		if(ble_status == AT_BLE_SUCCESS) {
1000dfa0:	2800      	cmp	r0, #0
1000dfa2:	d000      	beq.n	1000dfa6 <main+0x12e>
1000dfa4:	e0b3      	b.n	1000e10e <main+0x296>
			/* Sensor interrupt region */
			if(button_instance.btn0.new_int) {
1000dfa6:	4b94      	ldr	r3, [pc, #592]	; (1000e1f8 <main+0x380>)
1000dfa8:	78db      	ldrb	r3, [r3, #3]
1000dfaa:	2b00      	cmp	r3, #0
1000dfac:	d00b      	beq.n	1000dfc6 <main+0x14e>
				DBG_LOG("Btn0 int... ");
1000dfae:	4880      	ldr	r0, [pc, #512]	; (1000e1b0 <main+0x338>)
1000dfb0:	4b80      	ldr	r3, [pc, #512]	; (1000e1b4 <main+0x33c>)
1000dfb2:	4798      	blx	r3
1000dfb4:	4891      	ldr	r0, [pc, #580]	; (1000e1fc <main+0x384>)
1000dfb6:	4b81      	ldr	r3, [pc, #516]	; (1000e1bc <main+0x344>)
1000dfb8:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_0) < 0) {
1000dfba:	2000      	movs	r0, #0
1000dfbc:	4b90      	ldr	r3, [pc, #576]	; (1000e200 <main+0x388>)
1000dfbe:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn0.new_int = false;
1000dfc0:	2200      	movs	r2, #0
1000dfc2:	4b8d      	ldr	r3, [pc, #564]	; (1000e1f8 <main+0x380>)
1000dfc4:	70da      	strb	r2, [r3, #3]
			}
			if(button_instance.btn1.new_int) {
1000dfc6:	4b8c      	ldr	r3, [pc, #560]	; (1000e1f8 <main+0x380>)
1000dfc8:	7a5b      	ldrb	r3, [r3, #9]
1000dfca:	2b00      	cmp	r3, #0
1000dfcc:	d00b      	beq.n	1000dfe6 <main+0x16e>
				DBG_LOG("Btn1 int... ");
1000dfce:	4878      	ldr	r0, [pc, #480]	; (1000e1b0 <main+0x338>)
1000dfd0:	4b78      	ldr	r3, [pc, #480]	; (1000e1b4 <main+0x33c>)
1000dfd2:	4798      	blx	r3
1000dfd4:	488b      	ldr	r0, [pc, #556]	; (1000e204 <main+0x38c>)
1000dfd6:	4b79      	ldr	r3, [pc, #484]	; (1000e1bc <main+0x344>)
1000dfd8:	4798      	blx	r3
				if(sms_button_fn(SMS_BTN_1) < 0) {
1000dfda:	2001      	movs	r0, #1
1000dfdc:	4b88      	ldr	r3, [pc, #544]	; (1000e200 <main+0x388>)
1000dfde:	4798      	blx	r3
					DBG_LOG_DEV("Error in sms_button_fn()");
				}
				// here
				button_instance.btn1.new_int = false;
1000dfe0:	2200      	movs	r2, #0
1000dfe2:	4b85      	ldr	r3, [pc, #532]	; (1000e1f8 <main+0x380>)
1000dfe4:	725a      	strb	r2, [r3, #9]
			}
			if(mpu_device.interrupt.new_gyro) {
1000dfe6:	2361      	movs	r3, #97	; 0x61
1000dfe8:	4a87      	ldr	r2, [pc, #540]	; (1000e208 <main+0x390>)
1000dfea:	5cd3      	ldrb	r3, [r2, r3]
1000dfec:	2b00      	cmp	r3, #0
1000dfee:	d012      	beq.n	1000e016 <main+0x19e>
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_HIGH);
1000dff0:	2101      	movs	r1, #1
1000dff2:	200e      	movs	r0, #14
1000dff4:	4f85      	ldr	r7, [pc, #532]	; (1000e20c <main+0x394>)
1000dff6:	47b8      	blx	r7
				DBG_LOG("MPU int (%d)... ", ble_instance.sending_queue);
1000dff8:	486d      	ldr	r0, [pc, #436]	; (1000e1b0 <main+0x338>)
1000dffa:	4b6e      	ldr	r3, [pc, #440]	; (1000e1b4 <main+0x33c>)
1000dffc:	4798      	blx	r3
1000dffe:	4b50      	ldr	r3, [pc, #320]	; (1000e140 <main+0x2c8>)
1000e000:	7859      	ldrb	r1, [r3, #1]
1000e002:	b2c9      	uxtb	r1, r1
1000e004:	4882      	ldr	r0, [pc, #520]	; (1000e210 <main+0x398>)
1000e006:	4b6d      	ldr	r3, [pc, #436]	; (1000e1bc <main+0x344>)
1000e008:	4798      	blx	r3
				//sms_mpu_poll_data();
				mpu_device.interrupt.new_gyro = false;
1000e00a:	2100      	movs	r1, #0
1000e00c:	2361      	movs	r3, #97	; 0x61
1000e00e:	4a7e      	ldr	r2, [pc, #504]	; (1000e208 <main+0x390>)
1000e010:	54d1      	strb	r1, [r2, r3]
				//mpu_device.interrupt.rts = true;
				gpio_pin_set_output_level(DBG_PIN_1, DBG_PIN_LOW);
1000e012:	200e      	movs	r0, #14
1000e014:	47b8      	blx	r7
				//DBG_LOG_CONT_DEV("done");
			}
			if(pressure_device.new_int) {
1000e016:	2329      	movs	r3, #41	; 0x29
1000e018:	4a7e      	ldr	r2, [pc, #504]	; (1000e214 <main+0x39c>)
1000e01a:	5cd3      	ldrb	r3, [r2, r3]
1000e01c:	2b00      	cmp	r3, #0
1000e01e:	d002      	beq.n	1000e026 <main+0x1ae>
				//DBG_LOG("Press int (%d)... ", ble_instance.sending_queue);
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
				//sms_pressure_poll_data();
				pressure_device.new_int = false;
1000e020:	2100      	movs	r1, #0
1000e022:	2329      	movs	r3, #41	; 0x29
1000e024:	54d1      	strb	r1, [r2, r3]
				//gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
				//DBG_LOG_CONT_DEV("done");
			}
			
			/* Timer interrupt region */
			if(timer1_instance.new_int) {
1000e026:	4b7c      	ldr	r3, [pc, #496]	; (1000e218 <main+0x3a0>)
1000e028:	789b      	ldrb	r3, [r3, #2]
1000e02a:	2b00      	cmp	r3, #0
1000e02c:	d00d      	beq.n	1000e04a <main+0x1d2>
				DBG_LOG("Timer1 int... ");
1000e02e:	4860      	ldr	r0, [pc, #384]	; (1000e1b0 <main+0x338>)
1000e030:	4b60      	ldr	r3, [pc, #384]	; (1000e1b4 <main+0x33c>)
1000e032:	4798      	blx	r3
1000e034:	4879      	ldr	r0, [pc, #484]	; (1000e21c <main+0x3a4>)
1000e036:	4b61      	ldr	r3, [pc, #388]	; (1000e1bc <main+0x344>)
1000e038:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER1);
1000e03a:	2000      	movs	r0, #0
1000e03c:	4b78      	ldr	r3, [pc, #480]	; (1000e220 <main+0x3a8>)
1000e03e:	4798      	blx	r3
				sms_dualtimer1_fn();
1000e040:	4b78      	ldr	r3, [pc, #480]	; (1000e224 <main+0x3ac>)
1000e042:	4798      	blx	r3
				timer1_instance.new_int = false;
1000e044:	2200      	movs	r2, #0
1000e046:	4b74      	ldr	r3, [pc, #464]	; (1000e218 <main+0x3a0>)
1000e048:	709a      	strb	r2, [r3, #2]
			}
			if(timer2_instance.new_int) {
1000e04a:	4b77      	ldr	r3, [pc, #476]	; (1000e228 <main+0x3b0>)
1000e04c:	789b      	ldrb	r3, [r3, #2]
1000e04e:	2b00      	cmp	r3, #0
1000e050:	d00d      	beq.n	1000e06e <main+0x1f6>
				DBG_LOG("Timer2 int... ");
1000e052:	4857      	ldr	r0, [pc, #348]	; (1000e1b0 <main+0x338>)
1000e054:	4b57      	ldr	r3, [pc, #348]	; (1000e1b4 <main+0x33c>)
1000e056:	4798      	blx	r3
1000e058:	4874      	ldr	r0, [pc, #464]	; (1000e22c <main+0x3b4>)
1000e05a:	4b58      	ldr	r3, [pc, #352]	; (1000e1bc <main+0x344>)
1000e05c:	4798      	blx	r3
				sms_dualtimer_stop(DUALTIMER_TIMER2);
1000e05e:	2001      	movs	r0, #1
1000e060:	4b6f      	ldr	r3, [pc, #444]	; (1000e220 <main+0x3a8>)
1000e062:	4798      	blx	r3
				sms_dualtimer2_fn();
1000e064:	4b72      	ldr	r3, [pc, #456]	; (1000e230 <main+0x3b8>)
1000e066:	4798      	blx	r3
				timer2_instance.new_int = false;
1000e068:	2200      	movs	r2, #0
1000e06a:	4b6f      	ldr	r3, [pc, #444]	; (1000e228 <main+0x3b0>)
1000e06c:	709a      	strb	r2, [r3, #2]
			}
			
			/* Sending region */
			if(mpu_device.interrupt.rts) {
1000e06e:	2364      	movs	r3, #100	; 0x64
1000e070:	4a65      	ldr	r2, [pc, #404]	; (1000e208 <main+0x390>)
1000e072:	5cd3      	ldrb	r3, [r2, r3]
1000e074:	2b00      	cmp	r3, #0
1000e076:	d021      	beq.n	1000e0bc <main+0x244>
				DBG_LOG("MPU sending (%d/%d)... ", pressure_device.new_int, ble_instance.sending_queue);
1000e078:	484d      	ldr	r0, [pc, #308]	; (1000e1b0 <main+0x338>)
1000e07a:	4b4e      	ldr	r3, [pc, #312]	; (1000e1b4 <main+0x33c>)
1000e07c:	4798      	blx	r3
1000e07e:	2329      	movs	r3, #41	; 0x29
1000e080:	4a64      	ldr	r2, [pc, #400]	; (1000e214 <main+0x39c>)
1000e082:	5cd1      	ldrb	r1, [r2, r3]
1000e084:	b2c9      	uxtb	r1, r1
1000e086:	4f2e      	ldr	r7, [pc, #184]	; (1000e140 <main+0x2c8>)
1000e088:	787a      	ldrb	r2, [r7, #1]
1000e08a:	b2d2      	uxtb	r2, r2
1000e08c:	4869      	ldr	r0, [pc, #420]	; (1000e234 <main+0x3bc>)
1000e08e:	4b4b      	ldr	r3, [pc, #300]	; (1000e1bc <main+0x344>)
1000e090:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e092:	2101      	movs	r1, #1
1000e094:	200f      	movs	r0, #15
1000e096:	4b5d      	ldr	r3, [pc, #372]	; (1000e20c <main+0x394>)
1000e098:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e09a:	787b      	ldrb	r3, [r7, #1]
1000e09c:	2b00      	cmp	r3, #0
1000e09e:	d103      	bne.n	1000e0a8 <main+0x230>
					sms_ble_send_characteristic(BLE_CHAR_MPU);
1000e0a0:	2002      	movs	r0, #2
1000e0a2:	4b65      	ldr	r3, [pc, #404]	; (1000e238 <main+0x3c0>)
1000e0a4:	4798      	blx	r3
1000e0a6:	e002      	b.n	1000e0ae <main+0x236>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e0a8:	4864      	ldr	r0, [pc, #400]	; (1000e23c <main+0x3c4>)
1000e0aa:	4b44      	ldr	r3, [pc, #272]	; (1000e1bc <main+0x344>)
1000e0ac:	4798      	blx	r3
				}
				mpu_device.interrupt.rts = false;
1000e0ae:	2100      	movs	r1, #0
1000e0b0:	2364      	movs	r3, #100	; 0x64
1000e0b2:	4a55      	ldr	r2, [pc, #340]	; (1000e208 <main+0x390>)
1000e0b4:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e0b6:	200f      	movs	r0, #15
1000e0b8:	4b54      	ldr	r3, [pc, #336]	; (1000e20c <main+0x394>)
1000e0ba:	4798      	blx	r3
			}
			if(pressure_device.rts) {
1000e0bc:	232a      	movs	r3, #42	; 0x2a
1000e0be:	4a55      	ldr	r2, [pc, #340]	; (1000e214 <main+0x39c>)
1000e0c0:	5cd3      	ldrb	r3, [r2, r3]
1000e0c2:	2b00      	cmp	r3, #0
1000e0c4:	d100      	bne.n	1000e0c8 <main+0x250>
1000e0c6:	e769      	b.n	1000df9c <main+0x124>
				DBG_LOG("Press sending (%d/%d)... ", mpu_device.interrupt.new_gyro, ble_instance.sending_queue);
1000e0c8:	4839      	ldr	r0, [pc, #228]	; (1000e1b0 <main+0x338>)
1000e0ca:	4b3a      	ldr	r3, [pc, #232]	; (1000e1b4 <main+0x33c>)
1000e0cc:	4798      	blx	r3
1000e0ce:	2361      	movs	r3, #97	; 0x61
1000e0d0:	4a4d      	ldr	r2, [pc, #308]	; (1000e208 <main+0x390>)
1000e0d2:	5cd1      	ldrb	r1, [r2, r3]
1000e0d4:	b2c9      	uxtb	r1, r1
1000e0d6:	4f1a      	ldr	r7, [pc, #104]	; (1000e140 <main+0x2c8>)
1000e0d8:	787a      	ldrb	r2, [r7, #1]
1000e0da:	b2d2      	uxtb	r2, r2
1000e0dc:	4858      	ldr	r0, [pc, #352]	; (1000e240 <main+0x3c8>)
1000e0de:	4b37      	ldr	r3, [pc, #220]	; (1000e1bc <main+0x344>)
1000e0e0:	4798      	blx	r3
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_HIGH);
1000e0e2:	2101      	movs	r1, #1
1000e0e4:	200f      	movs	r0, #15
1000e0e6:	4b49      	ldr	r3, [pc, #292]	; (1000e20c <main+0x394>)
1000e0e8:	4798      	blx	r3
				if(ble_instance.sending_queue == 0) {
1000e0ea:	787b      	ldrb	r3, [r7, #1]
1000e0ec:	2b00      	cmp	r3, #0
1000e0ee:	d103      	bne.n	1000e0f8 <main+0x280>
					sms_ble_send_characteristic(BLE_CHAR_PRESS);
1000e0f0:	2001      	movs	r0, #1
1000e0f2:	4b51      	ldr	r3, [pc, #324]	; (1000e238 <main+0x3c0>)
1000e0f4:	4798      	blx	r3
1000e0f6:	e002      	b.n	1000e0fe <main+0x286>
				}
				else {
					DBG_LOG_CONT("flushing!");
1000e0f8:	4850      	ldr	r0, [pc, #320]	; (1000e23c <main+0x3c4>)
1000e0fa:	4b30      	ldr	r3, [pc, #192]	; (1000e1bc <main+0x344>)
1000e0fc:	4798      	blx	r3
				}
				pressure_device.rts = false;
1000e0fe:	2100      	movs	r1, #0
1000e100:	232a      	movs	r3, #42	; 0x2a
1000e102:	4a44      	ldr	r2, [pc, #272]	; (1000e214 <main+0x39c>)
1000e104:	54d1      	strb	r1, [r2, r3]
				gpio_pin_set_output_level(DBG_PIN_2, DBG_PIN_LOW);
1000e106:	200f      	movs	r0, #15
1000e108:	4b40      	ldr	r3, [pc, #256]	; (1000e20c <main+0x394>)
1000e10a:	4798      	blx	r3
1000e10c:	e746      	b.n	1000df9c <main+0x124>
			}
		}
		else if(ble_status == AT_BLE_GAP_TIMEOUT) {
1000e10e:	2845      	cmp	r0, #69	; 0x45
1000e110:	d106      	bne.n	1000e120 <main+0x2a8>
			DBG_LOG("GAP timeout");
1000e112:	4827      	ldr	r0, [pc, #156]	; (1000e1b0 <main+0x338>)
1000e114:	4b27      	ldr	r3, [pc, #156]	; (1000e1b4 <main+0x33c>)
1000e116:	4798      	blx	r3
1000e118:	484a      	ldr	r0, [pc, #296]	; (1000e244 <main+0x3cc>)
1000e11a:	4b28      	ldr	r3, [pc, #160]	; (1000e1bc <main+0x344>)
1000e11c:	4798      	blx	r3
1000e11e:	e73d      	b.n	1000df9c <main+0x124>
		}
		else if(ble_status == AT_BLE_TIMEOUT) {
1000e120:	28d0      	cmp	r0, #208	; 0xd0
1000e122:	d106      	bne.n	1000e132 <main+0x2ba>
			DBG_LOG("Event get timeout");
1000e124:	4822      	ldr	r0, [pc, #136]	; (1000e1b0 <main+0x338>)
1000e126:	4b23      	ldr	r3, [pc, #140]	; (1000e1b4 <main+0x33c>)
1000e128:	4798      	blx	r3
1000e12a:	4847      	ldr	r0, [pc, #284]	; (1000e248 <main+0x3d0>)
1000e12c:	4b23      	ldr	r3, [pc, #140]	; (1000e1bc <main+0x344>)
1000e12e:	4798      	blx	r3
1000e130:	e734      	b.n	1000df9c <main+0x124>
		}
		else {
			DBG_LOG("BLE error occurred");
1000e132:	0028      	movs	r0, r5
1000e134:	4b1f      	ldr	r3, [pc, #124]	; (1000e1b4 <main+0x33c>)
1000e136:	4798      	blx	r3
1000e138:	4844      	ldr	r0, [pc, #272]	; (1000e24c <main+0x3d4>)
1000e13a:	4b20      	ldr	r3, [pc, #128]	; (1000e1bc <main+0x344>)
1000e13c:	4798      	blx	r3
1000e13e:	e72d      	b.n	1000df9c <main+0x124>
1000e140:	10019500 	.word	0x10019500
1000e144:	1000d6a1 	.word	0x1000d6a1
1000e148:	1000afcd 	.word	0x1000afcd
1000e14c:	1000d395 	.word	0x1000d395
1000e150:	1000dbf5 	.word	0x1000dbf5
1000e154:	1000de2d 	.word	0x1000de2d
1000e158:	10009f65 	.word	0x10009f65
1000e15c:	10008aed 	.word	0x10008aed
1000e160:	10009a81 	.word	0x10009a81
1000e164:	10008e79 	.word	0x10008e79
1000e168:	10009e19 	.word	0x10009e19
1000e16c:	1000900d 	.word	0x1000900d
1000e170:	10008dd9 	.word	0x10008dd9
1000e174:	1000cb1d 	.word	0x1000cb1d
1000e178:	10008d89 	.word	0x10008d89
1000e17c:	10009d09 	.word	0x10009d09
1000e180:	100090a9 	.word	0x100090a9
1000e184:	1000dde1 	.word	0x1000dde1
1000e188:	1000dc39 	.word	0x1000dc39
1000e18c:	1000a02d 	.word	0x1000a02d
1000e190:	10009fa9 	.word	0x10009fa9
1000e194:	10008b95 	.word	0x10008b95
1000e198:	10009059 	.word	0x10009059
1000e19c:	10016870 	.word	0x10016870
1000e1a0:	1000ca4d 	.word	0x1000ca4d
1000e1a4:	100168bc 	.word	0x100168bc
1000e1a8:	10008d41 	.word	0x10008d41
1000e1ac:	10009a35 	.word	0x10009a35
1000e1b0:	1001677c 	.word	0x1001677c
1000e1b4:	10015835 	.word	0x10015835
1000e1b8:	10017598 	.word	0x10017598
1000e1bc:	10015715 	.word	0x10015715
1000e1c0:	10019458 	.word	0x10019458
1000e1c4:	10009111 	.word	0x10009111
1000e1c8:	100130d5 	.word	0x100130d5
1000e1cc:	461c4000 	.word	0x461c4000
1000e1d0:	10012cd5 	.word	0x10012cd5
1000e1d4:	100175a8 	.word	0x100175a8
1000e1d8:	100095a5 	.word	0x100095a5
1000e1dc:	1000958d 	.word	0x1000958d
1000e1e0:	100175e4 	.word	0x100175e4
1000e1e4:	10019470 	.word	0x10019470
1000e1e8:	10009489 	.word	0x10009489
1000e1ec:	10009d59 	.word	0x10009d59
1000e1f0:	100194f8 	.word	0x100194f8
1000e1f4:	1000d229 	.word	0x1000d229
1000e1f8:	1001951c 	.word	0x1001951c
1000e1fc:	100175f8 	.word	0x100175f8
1000e200:	10008be9 	.word	0x10008be9
1000e204:	10017608 	.word	0x10017608
1000e208:	10019434 	.word	0x10019434
1000e20c:	1000ac8d 	.word	0x1000ac8d
1000e210:	10017618 	.word	0x10017618
1000e214:	100195a4 	.word	0x100195a4
1000e218:	10019590 	.word	0x10019590
1000e21c:	1001762c 	.word	0x1001762c
1000e220:	1000a021 	.word	0x1000a021
1000e224:	1000a04d 	.word	0x1000a04d
1000e228:	1001963c 	.word	0x1001963c
1000e22c:	1001763c 	.word	0x1001763c
1000e230:	1000a271 	.word	0x1000a271
1000e234:	1001764c 	.word	0x1001764c
1000e238:	100087a1 	.word	0x100087a1
1000e23c:	10017664 	.word	0x10017664
1000e240:	10017670 	.word	0x10017670
1000e244:	1001768c 	.word	0x1001768c
1000e248:	10017698 	.word	0x10017698
1000e24c:	100176ac 	.word	0x100176ac

1000e250 <internal_event_post>:
1000e250:	b570      	push	{r4, r5, r6, lr}
1000e252:	4d12      	ldr	r5, [pc, #72]	; (1000e29c <internal_event_post+0x4c>)
1000e254:	682c      	ldr	r4, [r5, #0]
1000e256:	2c00      	cmp	r4, #0
1000e258:	d014      	beq.n	1000e284 <internal_event_post+0x34>
1000e25a:	6826      	ldr	r6, [r4, #0]
1000e25c:	60e2      	str	r2, [r4, #12]
1000e25e:	602e      	str	r6, [r5, #0]
1000e260:	2500      	movs	r5, #0
1000e262:	4a0f      	ldr	r2, [pc, #60]	; (1000e2a0 <internal_event_post+0x50>)
1000e264:	8123      	strh	r3, [r4, #8]
1000e266:	6813      	ldr	r3, [r2, #0]
1000e268:	6025      	str	r5, [r4, #0]
1000e26a:	80a0      	strh	r0, [r4, #4]
1000e26c:	80e1      	strh	r1, [r4, #6]
1000e26e:	42ab      	cmp	r3, r5
1000e270:	d101      	bne.n	1000e276 <internal_event_post+0x26>
1000e272:	6014      	str	r4, [r2, #0]
1000e274:	e011      	b.n	1000e29a <internal_event_post+0x4a>
1000e276:	681a      	ldr	r2, [r3, #0]
1000e278:	2a00      	cmp	r2, #0
1000e27a:	d001      	beq.n	1000e280 <internal_event_post+0x30>
1000e27c:	1c13      	adds	r3, r2, #0
1000e27e:	e7fa      	b.n	1000e276 <internal_event_post+0x26>
1000e280:	601c      	str	r4, [r3, #0]
1000e282:	e00a      	b.n	1000e29a <internal_event_post+0x4a>
1000e284:	b2c4      	uxtb	r4, r0
1000e286:	2c00      	cmp	r4, #0
1000e288:	d107      	bne.n	1000e29a <internal_event_post+0x4a>
1000e28a:	4c06      	ldr	r4, [pc, #24]	; (1000e2a4 <internal_event_post+0x54>)
1000e28c:	60e2      	str	r2, [r4, #12]
1000e28e:	2201      	movs	r2, #1
1000e290:	8123      	strh	r3, [r4, #8]
1000e292:	4b05      	ldr	r3, [pc, #20]	; (1000e2a8 <internal_event_post+0x58>)
1000e294:	80a0      	strh	r0, [r4, #4]
1000e296:	80e1      	strh	r1, [r4, #6]
1000e298:	701a      	strb	r2, [r3, #0]
1000e29a:	bd70      	pop	{r4, r5, r6, pc}
1000e29c:	10019378 	.word	0x10019378
1000e2a0:	10019374 	.word	0x10019374
1000e2a4:	10019360 	.word	0x10019360
1000e2a8:	10019370 	.word	0x10019370

1000e2ac <internal_event_init>:
1000e2ac:	b510      	push	{r4, lr}
1000e2ae:	4b08      	ldr	r3, [pc, #32]	; (1000e2d0 <internal_event_init+0x24>)
1000e2b0:	0900      	lsrs	r0, r0, #4
1000e2b2:	0100      	lsls	r0, r0, #4
1000e2b4:	681a      	ldr	r2, [r3, #0]
1000e2b6:	1808      	adds	r0, r1, r0
1000e2b8:	4281      	cmp	r1, r0
1000e2ba:	d003      	beq.n	1000e2c4 <internal_event_init+0x18>
1000e2bc:	600a      	str	r2, [r1, #0]
1000e2be:	1c0a      	adds	r2, r1, #0
1000e2c0:	3110      	adds	r1, #16
1000e2c2:	e7f9      	b.n	1000e2b8 <internal_event_init+0xc>
1000e2c4:	601a      	str	r2, [r3, #0]
1000e2c6:	2200      	movs	r2, #0
1000e2c8:	4b02      	ldr	r3, [pc, #8]	; (1000e2d4 <internal_event_init+0x28>)
1000e2ca:	601a      	str	r2, [r3, #0]
1000e2cc:	bd10      	pop	{r4, pc}
1000e2ce:	46c0      	nop			; (mov r8, r8)
1000e2d0:	10019378 	.word	0x10019378
1000e2d4:	10019374 	.word	0x10019374

1000e2d8 <special_events_handler>:
1000e2d8:	b538      	push	{r3, r4, r5, lr}
1000e2da:	4c1b      	ldr	r4, [pc, #108]	; (1000e348 <special_events_handler+0x70>)
1000e2dc:	1c03      	adds	r3, r0, #0
1000e2de:	8825      	ldrh	r5, [r4, #0]
1000e2e0:	1c08      	adds	r0, r1, #0
1000e2e2:	1c21      	adds	r1, r4, #0
1000e2e4:	429d      	cmp	r5, r3
1000e2e6:	d107      	bne.n	1000e2f8 <special_events_handler+0x20>
1000e2e8:	88a5      	ldrh	r5, [r4, #4]
1000e2ea:	4285      	cmp	r5, r0
1000e2ec:	d104      	bne.n	1000e2f8 <special_events_handler+0x20>
1000e2ee:	2301      	movs	r3, #1
1000e2f0:	425b      	negs	r3, r3
1000e2f2:	8023      	strh	r3, [r4, #0]
1000e2f4:	60a2      	str	r2, [r4, #8]
1000e2f6:	e009      	b.n	1000e30c <special_events_handler+0x34>
1000e2f8:	884c      	ldrh	r4, [r1, #2]
1000e2fa:	429c      	cmp	r4, r3
1000e2fc:	d10a      	bne.n	1000e314 <special_events_handler+0x3c>
1000e2fe:	888c      	ldrh	r4, [r1, #4]
1000e300:	4284      	cmp	r4, r0
1000e302:	d107      	bne.n	1000e314 <special_events_handler+0x3c>
1000e304:	2301      	movs	r3, #1
1000e306:	425b      	negs	r3, r3
1000e308:	804b      	strh	r3, [r1, #2]
1000e30a:	608a      	str	r2, [r1, #8]
1000e30c:	4b0f      	ldr	r3, [pc, #60]	; (1000e34c <special_events_handler+0x74>)
1000e30e:	4798      	blx	r3
1000e310:	2001      	movs	r0, #1
1000e312:	e017      	b.n	1000e344 <special_events_handler+0x6c>
1000e314:	490e      	ldr	r1, [pc, #56]	; (1000e350 <special_events_handler+0x78>)
1000e316:	428b      	cmp	r3, r1
1000e318:	d00e      	beq.n	1000e338 <special_events_handler+0x60>
1000e31a:	490e      	ldr	r1, [pc, #56]	; (1000e354 <special_events_handler+0x7c>)
1000e31c:	428b      	cmp	r3, r1
1000e31e:	d007      	beq.n	1000e330 <special_events_handler+0x58>
1000e320:	490d      	ldr	r1, [pc, #52]	; (1000e358 <special_events_handler+0x80>)
1000e322:	2000      	movs	r0, #0
1000e324:	428b      	cmp	r3, r1
1000e326:	d10d      	bne.n	1000e344 <special_events_handler+0x6c>
1000e328:	1c10      	adds	r0, r2, #0
1000e32a:	4b0c      	ldr	r3, [pc, #48]	; (1000e35c <special_events_handler+0x84>)
1000e32c:	4798      	blx	r3
1000e32e:	e7ef      	b.n	1000e310 <special_events_handler+0x38>
1000e330:	1c11      	adds	r1, r2, #0
1000e332:	4b0b      	ldr	r3, [pc, #44]	; (1000e360 <special_events_handler+0x88>)
1000e334:	2200      	movs	r2, #0
1000e336:	e002      	b.n	1000e33e <special_events_handler+0x66>
1000e338:	1c11      	adds	r1, r2, #0
1000e33a:	2200      	movs	r2, #0
1000e33c:	4b09      	ldr	r3, [pc, #36]	; (1000e364 <special_events_handler+0x8c>)
1000e33e:	4798      	blx	r3
1000e340:	4243      	negs	r3, r0
1000e342:	4158      	adcs	r0, r3
1000e344:	bd38      	pop	{r3, r4, r5, pc}
1000e346:	46c0      	nop			; (mov r8, r8)
1000e348:	1001a304 	.word	0x1001a304
1000e34c:	1000fd35 	.word	0x1000fd35
1000e350:	00000e13 	.word	0x00000e13
1000e354:	00000e15 	.word	0x00000e15
1000e358:	00000e01 	.word	0x00000e01
1000e35c:	100100a5 	.word	0x100100a5
1000e360:	10010265 	.word	0x10010265
1000e364:	1001033d 	.word	0x1001033d

1000e368 <at_ble_event_get>:
1000e368:	2300      	movs	r3, #0
1000e36a:	b5f0      	push	{r4, r5, r6, r7, lr}
1000e36c:	b087      	sub	sp, #28
1000e36e:	9204      	str	r2, [sp, #16]
1000e370:	7003      	strb	r3, [r0, #0]
1000e372:	9b04      	ldr	r3, [sp, #16]
1000e374:	9003      	str	r0, [sp, #12]
1000e376:	3b01      	subs	r3, #1
1000e378:	1c0d      	adds	r5, r1, #0
1000e37a:	9305      	str	r3, [sp, #20]
1000e37c:	3303      	adds	r3, #3
1000e37e:	d802      	bhi.n	1000e386 <at_ble_event_get+0x1e>
1000e380:	9804      	ldr	r0, [sp, #16]
1000e382:	4bae      	ldr	r3, [pc, #696]	; (1000e63c <at_ble_event_get+0x2d4>)
1000e384:	4798      	blx	r3
1000e386:	9b05      	ldr	r3, [sp, #20]
1000e388:	4cad      	ldr	r4, [pc, #692]	; (1000e640 <at_ble_event_get+0x2d8>)
1000e38a:	3303      	adds	r3, #3
1000e38c:	d902      	bls.n	1000e394 <at_ble_event_get+0x2c>
1000e38e:	2300      	movs	r3, #0
1000e390:	9302      	str	r3, [sp, #8]
1000e392:	e015      	b.n	1000e3c0 <at_ble_event_get+0x58>
1000e394:	2300      	movs	r3, #0
1000e396:	9302      	str	r3, [sp, #8]
1000e398:	6823      	ldr	r3, [r4, #0]
1000e39a:	2b00      	cmp	r3, #0
1000e39c:	d113      	bne.n	1000e3c6 <at_ble_event_get+0x5e>
1000e39e:	9b02      	ldr	r3, [sp, #8]
1000e3a0:	2bd0      	cmp	r3, #208	; 0xd0
1000e3a2:	d100      	bne.n	1000e3a6 <at_ble_event_get+0x3e>
1000e3a4:	e2da      	b.n	1000e95c <at_ble_event_get+0x5f4>
1000e3a6:	9804      	ldr	r0, [sp, #16]
1000e3a8:	4ba6      	ldr	r3, [pc, #664]	; (1000e644 <at_ble_event_get+0x2dc>)
1000e3aa:	4798      	blx	r3
1000e3ac:	9002      	str	r0, [sp, #8]
1000e3ae:	2802      	cmp	r0, #2
1000e3b0:	d1f2      	bne.n	1000e398 <at_ble_event_get+0x30>
1000e3b2:	e03f      	b.n	1000e434 <at_ble_event_get+0xcc>
1000e3b4:	9804      	ldr	r0, [sp, #16]
1000e3b6:	4ba3      	ldr	r3, [pc, #652]	; (1000e644 <at_ble_event_get+0x2dc>)
1000e3b8:	4798      	blx	r3
1000e3ba:	9002      	str	r0, [sp, #8]
1000e3bc:	2802      	cmp	r0, #2
1000e3be:	d039      	beq.n	1000e434 <at_ble_event_get+0xcc>
1000e3c0:	6823      	ldr	r3, [r4, #0]
1000e3c2:	2b00      	cmp	r3, #0
1000e3c4:	d0f6      	beq.n	1000e3b4 <at_ble_event_get+0x4c>
1000e3c6:	9b02      	ldr	r3, [sp, #8]
1000e3c8:	2bd0      	cmp	r3, #208	; 0xd0
1000e3ca:	d100      	bne.n	1000e3ce <at_ble_event_get+0x66>
1000e3cc:	e2c6      	b.n	1000e95c <at_ble_event_get+0x5f4>
1000e3ce:	9b02      	ldr	r3, [sp, #8]
1000e3d0:	3b03      	subs	r3, #3
1000e3d2:	1e5a      	subs	r2, r3, #1
1000e3d4:	4193      	sbcs	r3, r2
1000e3d6:	9a02      	ldr	r2, [sp, #8]
1000e3d8:	425b      	negs	r3, r3
1000e3da:	401a      	ands	r2, r3
1000e3dc:	6823      	ldr	r3, [r4, #0]
1000e3de:	9202      	str	r2, [sp, #8]
1000e3e0:	2b00      	cmp	r3, #0
1000e3e2:	d100      	bne.n	1000e3e6 <at_ble_event_get+0x7e>
1000e3e4:	e2c2      	b.n	1000e96c <at_ble_event_get+0x604>
1000e3e6:	681a      	ldr	r2, [r3, #0]
1000e3e8:	68de      	ldr	r6, [r3, #12]
1000e3ea:	6022      	str	r2, [r4, #0]
1000e3ec:	88da      	ldrh	r2, [r3, #6]
1000e3ee:	9201      	str	r2, [sp, #4]
1000e3f0:	4a95      	ldr	r2, [pc, #596]	; (1000e648 <at_ble_event_get+0x2e0>)
1000e3f2:	889c      	ldrh	r4, [r3, #4]
1000e3f4:	6811      	ldr	r1, [r2, #0]
1000e3f6:	6013      	str	r3, [r2, #0]
1000e3f8:	6019      	str	r1, [r3, #0]
1000e3fa:	4b94      	ldr	r3, [pc, #592]	; (1000e64c <at_ble_event_get+0x2e4>)
1000e3fc:	781b      	ldrb	r3, [r3, #0]
1000e3fe:	2b01      	cmp	r3, #1
1000e400:	d10f      	bne.n	1000e422 <at_ble_event_get+0xba>
1000e402:	4b93      	ldr	r3, [pc, #588]	; (1000e650 <at_ble_event_get+0x2e8>)
1000e404:	4a92      	ldr	r2, [pc, #584]	; (1000e650 <at_ble_event_get+0x2e8>)
1000e406:	8898      	ldrh	r0, [r3, #4]
1000e408:	88d9      	ldrh	r1, [r3, #6]
1000e40a:	68d2      	ldr	r2, [r2, #12]
1000e40c:	891b      	ldrh	r3, [r3, #8]
1000e40e:	4f91      	ldr	r7, [pc, #580]	; (1000e654 <at_ble_event_get+0x2ec>)
1000e410:	47b8      	blx	r7
1000e412:	2210      	movs	r2, #16
1000e414:	4b90      	ldr	r3, [pc, #576]	; (1000e658 <at_ble_event_get+0x2f0>)
1000e416:	488e      	ldr	r0, [pc, #568]	; (1000e650 <at_ble_event_get+0x2e8>)
1000e418:	2100      	movs	r1, #0
1000e41a:	4798      	blx	r3
1000e41c:	2300      	movs	r3, #0
1000e41e:	4a8b      	ldr	r2, [pc, #556]	; (1000e64c <at_ble_event_get+0x2e4>)
1000e420:	7013      	strb	r3, [r2, #0]
1000e422:	9b02      	ldr	r3, [sp, #8]
1000e424:	2b00      	cmp	r3, #0
1000e426:	d114      	bne.n	1000e452 <at_ble_event_get+0xea>
1000e428:	4b8c      	ldr	r3, [pc, #560]	; (1000e65c <at_ble_event_get+0x2f4>)
1000e42a:	429c      	cmp	r4, r3
1000e42c:	d009      	beq.n	1000e442 <at_ble_event_get+0xda>
1000e42e:	4b8c      	ldr	r3, [pc, #560]	; (1000e660 <at_ble_event_get+0x2f8>)
1000e430:	429c      	cmp	r4, r3
1000e432:	d127      	bne.n	1000e484 <at_ble_event_get+0x11c>
1000e434:	233a      	movs	r3, #58	; 0x3a
1000e436:	9a03      	ldr	r2, [sp, #12]
1000e438:	7013      	strb	r3, [r2, #0]
1000e43a:	2300      	movs	r3, #0
1000e43c:	9302      	str	r3, [sp, #8]
1000e43e:	1c1d      	adds	r5, r3, #0
1000e440:	e007      	b.n	1000e452 <at_ble_event_get+0xea>
1000e442:	9b01      	ldr	r3, [sp, #4]
1000e444:	42a3      	cmp	r3, r4
1000e446:	d000      	beq.n	1000e44a <at_ble_event_get+0xe2>
1000e448:	e28a      	b.n	1000e960 <at_ble_event_get+0x5f8>
1000e44a:	2338      	movs	r3, #56	; 0x38
1000e44c:	9a03      	ldr	r2, [sp, #12]
1000e44e:	7013      	strb	r3, [r2, #0]
1000e450:	602e      	str	r6, [r5, #0]
1000e452:	9b03      	ldr	r3, [sp, #12]
1000e454:	781b      	ldrb	r3, [r3, #0]
1000e456:	2b3b      	cmp	r3, #59	; 0x3b
1000e458:	d101      	bne.n	1000e45e <at_ble_event_get+0xf6>
1000e45a:	4b82      	ldr	r3, [pc, #520]	; (1000e664 <at_ble_event_get+0x2fc>)
1000e45c:	4798      	blx	r3
1000e45e:	9b03      	ldr	r3, [sp, #12]
1000e460:	781b      	ldrb	r3, [r3, #0]
1000e462:	2b3b      	cmp	r3, #59	; 0x3b
1000e464:	d003      	beq.n	1000e46e <at_ble_event_get+0x106>
1000e466:	9b05      	ldr	r3, [sp, #20]
1000e468:	3303      	adds	r3, #3
1000e46a:	d904      	bls.n	1000e476 <at_ble_event_get+0x10e>
1000e46c:	e283      	b.n	1000e976 <at_ble_event_get+0x60e>
1000e46e:	9b02      	ldr	r3, [sp, #8]
1000e470:	2b00      	cmp	r3, #0
1000e472:	d088      	beq.n	1000e386 <at_ble_event_get+0x1e>
1000e474:	e7f7      	b.n	1000e466 <at_ble_event_get+0xfe>
1000e476:	9b02      	ldr	r3, [sp, #8]
1000e478:	2bd0      	cmp	r3, #208	; 0xd0
1000e47a:	d100      	bne.n	1000e47e <at_ble_event_get+0x116>
1000e47c:	e27b      	b.n	1000e976 <at_ble_event_get+0x60e>
1000e47e:	4b7a      	ldr	r3, [pc, #488]	; (1000e668 <at_ble_event_get+0x300>)
1000e480:	4798      	blx	r3
1000e482:	e278      	b.n	1000e976 <at_ble_event_get+0x60e>
1000e484:	9b01      	ldr	r3, [sp, #4]
1000e486:	2bbb      	cmp	r3, #187	; 0xbb
1000e488:	d125      	bne.n	1000e4d6 <at_ble_event_get+0x16e>
1000e48a:	2cbb      	cmp	r4, #187	; 0xbb
1000e48c:	d123      	bne.n	1000e4d6 <at_ble_event_get+0x16e>
1000e48e:	466b      	mov	r3, sp
1000e490:	891b      	ldrh	r3, [r3, #8]
1000e492:	80ab      	strh	r3, [r5, #4]
1000e494:	78b3      	ldrb	r3, [r6, #2]
1000e496:	7872      	ldrb	r2, [r6, #1]
1000e498:	78f0      	ldrb	r0, [r6, #3]
1000e49a:	021b      	lsls	r3, r3, #8
1000e49c:	4313      	orrs	r3, r2
1000e49e:	7971      	ldrb	r1, [r6, #5]
1000e4a0:	7932      	ldrb	r2, [r6, #4]
1000e4a2:	70a8      	strb	r0, [r5, #2]
1000e4a4:	4871      	ldr	r0, [pc, #452]	; (1000e66c <at_ble_event_get+0x304>)
1000e4a6:	802b      	strh	r3, [r5, #0]
1000e4a8:	4283      	cmp	r3, r0
1000e4aa:	d806      	bhi.n	1000e4ba <at_ble_event_get+0x152>
1000e4ac:	4a70      	ldr	r2, [pc, #448]	; (1000e670 <at_ble_event_get+0x308>)
1000e4ae:	4293      	cmp	r3, r2
1000e4b0:	d20b      	bcs.n	1000e4ca <at_ble_event_get+0x162>
1000e4b2:	4a70      	ldr	r2, [pc, #448]	; (1000e674 <at_ble_event_get+0x30c>)
1000e4b4:	4293      	cmp	r3, r2
1000e4b6:	d008      	beq.n	1000e4ca <at_ble_event_get+0x162>
1000e4b8:	e009      	b.n	1000e4ce <at_ble_event_get+0x166>
1000e4ba:	486f      	ldr	r0, [pc, #444]	; (1000e678 <at_ble_event_get+0x310>)
1000e4bc:	4283      	cmp	r3, r0
1000e4be:	d106      	bne.n	1000e4ce <at_ble_event_get+0x166>
1000e4c0:	020b      	lsls	r3, r1, #8
1000e4c2:	4313      	orrs	r3, r2
1000e4c4:	80ab      	strh	r3, [r5, #4]
1000e4c6:	2337      	movs	r3, #55	; 0x37
1000e4c8:	e002      	b.n	1000e4d0 <at_ble_event_get+0x168>
1000e4ca:	2336      	movs	r3, #54	; 0x36
1000e4cc:	e000      	b.n	1000e4d0 <at_ble_event_get+0x168>
1000e4ce:	2300      	movs	r3, #0
1000e4d0:	9a03      	ldr	r2, [sp, #12]
1000e4d2:	7013      	strb	r3, [r2, #0]
1000e4d4:	e7bd      	b.n	1000e452 <at_ble_event_get+0xea>
1000e4d6:	4b69      	ldr	r3, [pc, #420]	; (1000e67c <at_ble_event_get+0x314>)
1000e4d8:	429c      	cmp	r4, r3
1000e4da:	d100      	bne.n	1000e4de <at_ble_event_get+0x176>
1000e4dc:	e144      	b.n	1000e768 <at_ble_event_get+0x400>
1000e4de:	d865      	bhi.n	1000e5ac <at_ble_event_get+0x244>
1000e4e0:	4b67      	ldr	r3, [pc, #412]	; (1000e680 <at_ble_event_get+0x318>)
1000e4e2:	429c      	cmp	r4, r3
1000e4e4:	d100      	bne.n	1000e4e8 <at_ble_event_get+0x180>
1000e4e6:	e1d5      	b.n	1000e894 <at_ble_event_get+0x52c>
1000e4e8:	d82f      	bhi.n	1000e54a <at_ble_event_get+0x1e2>
1000e4ea:	4b66      	ldr	r3, [pc, #408]	; (1000e684 <at_ble_event_get+0x31c>)
1000e4ec:	429c      	cmp	r4, r3
1000e4ee:	d100      	bne.n	1000e4f2 <at_ble_event_get+0x18a>
1000e4f0:	e1e0      	b.n	1000e8b4 <at_ble_event_get+0x54c>
1000e4f2:	d813      	bhi.n	1000e51c <at_ble_event_get+0x1b4>
1000e4f4:	4b64      	ldr	r3, [pc, #400]	; (1000e688 <at_ble_event_get+0x320>)
1000e4f6:	429c      	cmp	r4, r3
1000e4f8:	d100      	bne.n	1000e4fc <at_ble_event_get+0x194>
1000e4fa:	e1a3      	b.n	1000e844 <at_ble_event_get+0x4dc>
1000e4fc:	d804      	bhi.n	1000e508 <at_ble_event_get+0x1a0>
1000e4fe:	2638      	movs	r6, #56	; 0x38
1000e500:	42b4      	cmp	r4, r6
1000e502:	d100      	bne.n	1000e506 <at_ble_event_get+0x19e>
1000e504:	e225      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e506:	e117      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e508:	4b60      	ldr	r3, [pc, #384]	; (1000e68c <at_ble_event_get+0x324>)
1000e50a:	429c      	cmp	r4, r3
1000e50c:	d100      	bne.n	1000e510 <at_ble_event_get+0x1a8>
1000e50e:	e19f      	b.n	1000e850 <at_ble_event_get+0x4e8>
1000e510:	33fe      	adds	r3, #254	; 0xfe
1000e512:	33ff      	adds	r3, #255	; 0xff
1000e514:	429c      	cmp	r4, r3
1000e516:	d100      	bne.n	1000e51a <at_ble_event_get+0x1b2>
1000e518:	e1d3      	b.n	1000e8c2 <at_ble_event_get+0x55a>
1000e51a:	e10d      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e51c:	4b5c      	ldr	r3, [pc, #368]	; (1000e690 <at_ble_event_get+0x328>)
1000e51e:	429c      	cmp	r4, r3
1000e520:	d100      	bne.n	1000e524 <at_ble_event_get+0x1bc>
1000e522:	e1a9      	b.n	1000e878 <at_ble_event_get+0x510>
1000e524:	d808      	bhi.n	1000e538 <at_ble_event_get+0x1d0>
1000e526:	4b5b      	ldr	r3, [pc, #364]	; (1000e694 <at_ble_event_get+0x32c>)
1000e528:	429c      	cmp	r4, r3
1000e52a:	d100      	bne.n	1000e52e <at_ble_event_get+0x1c6>
1000e52c:	e196      	b.n	1000e85c <at_ble_event_get+0x4f4>
1000e52e:	4b5a      	ldr	r3, [pc, #360]	; (1000e698 <at_ble_event_get+0x330>)
1000e530:	429c      	cmp	r4, r3
1000e532:	d100      	bne.n	1000e536 <at_ble_event_get+0x1ce>
1000e534:	e199      	b.n	1000e86a <at_ble_event_get+0x502>
1000e536:	e0ff      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e538:	4b58      	ldr	r3, [pc, #352]	; (1000e69c <at_ble_event_get+0x334>)
1000e53a:	429c      	cmp	r4, r3
1000e53c:	d100      	bne.n	1000e540 <at_ble_event_get+0x1d8>
1000e53e:	e1a2      	b.n	1000e886 <at_ble_event_get+0x51e>
1000e540:	4b57      	ldr	r3, [pc, #348]	; (1000e6a0 <at_ble_event_get+0x338>)
1000e542:	429c      	cmp	r4, r3
1000e544:	d100      	bne.n	1000e548 <at_ble_event_get+0x1e0>
1000e546:	e1d4      	b.n	1000e8f2 <at_ble_event_get+0x58a>
1000e548:	e0f6      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e54a:	4b56      	ldr	r3, [pc, #344]	; (1000e6a4 <at_ble_event_get+0x33c>)
1000e54c:	429c      	cmp	r4, r3
1000e54e:	d100      	bne.n	1000e552 <at_ble_event_get+0x1ea>
1000e550:	e1c8      	b.n	1000e8e4 <at_ble_event_get+0x57c>
1000e552:	d812      	bhi.n	1000e57a <at_ble_event_get+0x212>
1000e554:	4b54      	ldr	r3, [pc, #336]	; (1000e6a8 <at_ble_event_get+0x340>)
1000e556:	429c      	cmp	r4, r3
1000e558:	d100      	bne.n	1000e55c <at_ble_event_get+0x1f4>
1000e55a:	e1d1      	b.n	1000e900 <at_ble_event_get+0x598>
1000e55c:	d804      	bhi.n	1000e568 <at_ble_event_get+0x200>
1000e55e:	4b53      	ldr	r3, [pc, #332]	; (1000e6ac <at_ble_event_get+0x344>)
1000e560:	429c      	cmp	r4, r3
1000e562:	d100      	bne.n	1000e566 <at_ble_event_get+0x1fe>
1000e564:	e19b      	b.n	1000e89e <at_ble_event_get+0x536>
1000e566:	e0e7      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e568:	4b51      	ldr	r3, [pc, #324]	; (1000e6b0 <at_ble_event_get+0x348>)
1000e56a:	429c      	cmp	r4, r3
1000e56c:	d100      	bne.n	1000e570 <at_ble_event_get+0x208>
1000e56e:	e1ad      	b.n	1000e8cc <at_ble_event_get+0x564>
1000e570:	4b50      	ldr	r3, [pc, #320]	; (1000e6b4 <at_ble_event_get+0x34c>)
1000e572:	429c      	cmp	r4, r3
1000e574:	d100      	bne.n	1000e578 <at_ble_event_get+0x210>
1000e576:	e1b0      	b.n	1000e8da <at_ble_event_get+0x572>
1000e578:	e0de      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e57a:	4b4f      	ldr	r3, [pc, #316]	; (1000e6b8 <at_ble_event_get+0x350>)
1000e57c:	429c      	cmp	r4, r3
1000e57e:	d100      	bne.n	1000e582 <at_ble_event_get+0x21a>
1000e580:	e0e0      	b.n	1000e744 <at_ble_event_get+0x3dc>
1000e582:	d809      	bhi.n	1000e598 <at_ble_event_get+0x230>
1000e584:	3b08      	subs	r3, #8
1000e586:	429c      	cmp	r4, r3
1000e588:	d100      	bne.n	1000e58c <at_ble_event_get+0x224>
1000e58a:	e0d7      	b.n	1000e73c <at_ble_event_get+0x3d4>
1000e58c:	4b4b      	ldr	r3, [pc, #300]	; (1000e6bc <at_ble_event_get+0x354>)
1000e58e:	2639      	movs	r6, #57	; 0x39
1000e590:	429c      	cmp	r4, r3
1000e592:	d100      	bne.n	1000e596 <at_ble_event_get+0x22e>
1000e594:	e1dd      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e596:	e0cf      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e598:	23d1      	movs	r3, #209	; 0xd1
1000e59a:	011b      	lsls	r3, r3, #4
1000e59c:	429c      	cmp	r4, r3
1000e59e:	d100      	bne.n	1000e5a2 <at_ble_event_get+0x23a>
1000e5a0:	e0d6      	b.n	1000e750 <at_ble_event_get+0x3e8>
1000e5a2:	4b47      	ldr	r3, [pc, #284]	; (1000e6c0 <at_ble_event_get+0x358>)
1000e5a4:	429c      	cmp	r4, r3
1000e5a6:	d100      	bne.n	1000e5aa <at_ble_event_get+0x242>
1000e5a8:	e0d8      	b.n	1000e75c <at_ble_event_get+0x3f4>
1000e5aa:	e0c5      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e5ac:	4b45      	ldr	r3, [pc, #276]	; (1000e6c4 <at_ble_event_get+0x35c>)
1000e5ae:	429c      	cmp	r4, r3
1000e5b0:	d100      	bne.n	1000e5b4 <at_ble_event_get+0x24c>
1000e5b2:	e117      	b.n	1000e7e4 <at_ble_event_get+0x47c>
1000e5b4:	d82e      	bhi.n	1000e614 <at_ble_event_get+0x2ac>
1000e5b6:	4b44      	ldr	r3, [pc, #272]	; (1000e6c8 <at_ble_event_get+0x360>)
1000e5b8:	429c      	cmp	r4, r3
1000e5ba:	d100      	bne.n	1000e5be <at_ble_event_get+0x256>
1000e5bc:	e13d      	b.n	1000e83a <at_ble_event_get+0x4d2>
1000e5be:	d812      	bhi.n	1000e5e6 <at_ble_event_get+0x27e>
1000e5c0:	4b42      	ldr	r3, [pc, #264]	; (1000e6cc <at_ble_event_get+0x364>)
1000e5c2:	429c      	cmp	r4, r3
1000e5c4:	d100      	bne.n	1000e5c8 <at_ble_event_get+0x260>
1000e5c6:	e0e8      	b.n	1000e79a <at_ble_event_get+0x432>
1000e5c8:	d804      	bhi.n	1000e5d4 <at_ble_event_get+0x26c>
1000e5ca:	3b03      	subs	r3, #3
1000e5cc:	429c      	cmp	r4, r3
1000e5ce:	d100      	bne.n	1000e5d2 <at_ble_event_get+0x26a>
1000e5d0:	e0d0      	b.n	1000e774 <at_ble_event_get+0x40c>
1000e5d2:	e0b1      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e5d4:	4b3e      	ldr	r3, [pc, #248]	; (1000e6d0 <at_ble_event_get+0x368>)
1000e5d6:	429c      	cmp	r4, r3
1000e5d8:	d100      	bne.n	1000e5dc <at_ble_event_get+0x274>
1000e5da:	e0d0      	b.n	1000e77e <at_ble_event_get+0x416>
1000e5dc:	4b3d      	ldr	r3, [pc, #244]	; (1000e6d4 <at_ble_event_get+0x36c>)
1000e5de:	429c      	cmp	r4, r3
1000e5e0:	d100      	bne.n	1000e5e4 <at_ble_event_get+0x27c>
1000e5e2:	e0f9      	b.n	1000e7d8 <at_ble_event_get+0x470>
1000e5e4:	e0a8      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e5e6:	4b3c      	ldr	r3, [pc, #240]	; (1000e6d8 <at_ble_event_get+0x370>)
1000e5e8:	429c      	cmp	r4, r3
1000e5ea:	d100      	bne.n	1000e5ee <at_ble_event_get+0x286>
1000e5ec:	e0db      	b.n	1000e7a6 <at_ble_event_get+0x43e>
1000e5ee:	d808      	bhi.n	1000e602 <at_ble_event_get+0x29a>
1000e5f0:	4b3a      	ldr	r3, [pc, #232]	; (1000e6dc <at_ble_event_get+0x374>)
1000e5f2:	429c      	cmp	r4, r3
1000e5f4:	d100      	bne.n	1000e5f8 <at_ble_event_get+0x290>
1000e5f6:	e11b      	b.n	1000e830 <at_ble_event_get+0x4c8>
1000e5f8:	4b39      	ldr	r3, [pc, #228]	; (1000e6e0 <at_ble_event_get+0x378>)
1000e5fa:	429c      	cmp	r4, r3
1000e5fc:	d100      	bne.n	1000e600 <at_ble_event_get+0x298>
1000e5fe:	e0d8      	b.n	1000e7b2 <at_ble_event_get+0x44a>
1000e600:	e09a      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e602:	4b38      	ldr	r3, [pc, #224]	; (1000e6e4 <at_ble_event_get+0x37c>)
1000e604:	429c      	cmp	r4, r3
1000e606:	d100      	bne.n	1000e60a <at_ble_event_get+0x2a2>
1000e608:	e0d8      	b.n	1000e7bc <at_ble_event_get+0x454>
1000e60a:	4b37      	ldr	r3, [pc, #220]	; (1000e6e8 <at_ble_event_get+0x380>)
1000e60c:	429c      	cmp	r4, r3
1000e60e:	d100      	bne.n	1000e612 <at_ble_event_get+0x2aa>
1000e610:	e0db      	b.n	1000e7ca <at_ble_event_get+0x462>
1000e612:	e091      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e614:	4b35      	ldr	r3, [pc, #212]	; (1000e6ec <at_ble_event_get+0x384>)
1000e616:	429c      	cmp	r4, r3
1000e618:	d100      	bne.n	1000e61c <at_ble_event_get+0x2b4>
1000e61a:	e0f7      	b.n	1000e80c <at_ble_event_get+0x4a4>
1000e61c:	d876      	bhi.n	1000e70c <at_ble_event_get+0x3a4>
1000e61e:	4b34      	ldr	r3, [pc, #208]	; (1000e6f0 <at_ble_event_get+0x388>)
1000e620:	429c      	cmp	r4, r3
1000e622:	d100      	bne.n	1000e626 <at_ble_event_get+0x2be>
1000e624:	e0f8      	b.n	1000e818 <at_ble_event_get+0x4b0>
1000e626:	d869      	bhi.n	1000e6fc <at_ble_event_get+0x394>
1000e628:	4b32      	ldr	r3, [pc, #200]	; (1000e6f4 <at_ble_event_get+0x38c>)
1000e62a:	429c      	cmp	r4, r3
1000e62c:	d100      	bne.n	1000e630 <at_ble_event_get+0x2c8>
1000e62e:	e0e0      	b.n	1000e7f2 <at_ble_event_get+0x48a>
1000e630:	4b31      	ldr	r3, [pc, #196]	; (1000e6f8 <at_ble_event_get+0x390>)
1000e632:	429c      	cmp	r4, r3
1000e634:	d100      	bne.n	1000e638 <at_ble_event_get+0x2d0>
1000e636:	e0a9      	b.n	1000e78c <at_ble_event_get+0x424>
1000e638:	e07e      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e63a:	46c0      	nop			; (mov r8, r8)
1000e63c:	1000fd6d 	.word	0x1000fd6d
1000e640:	10019374 	.word	0x10019374
1000e644:	1000d991 	.word	0x1000d991
1000e648:	10019378 	.word	0x10019378
1000e64c:	10019370 	.word	0x10019370
1000e650:	10019360 	.word	0x10019360
1000e654:	1000e251 	.word	0x1000e251
1000e658:	100155cd 	.word	0x100155cd
1000e65c:	0000ffff 	.word	0x0000ffff
1000e660:	0000fffe 	.word	0x0000fffe
1000e664:	1000dc09 	.word	0x1000dc09
1000e668:	1000fd6f 	.word	0x1000fd6f
1000e66c:	0000201e 	.word	0x0000201e
1000e670:	0000201d 	.word	0x0000201d
1000e674:	00000c03 	.word	0x00000c03
1000e678:	0000201f 	.word	0x0000201f
1000e67c:	00000d1c 	.word	0x00000d1c
1000e680:	00000c0c 	.word	0x00000c0c
1000e684:	00000c02 	.word	0x00000c02
1000e688:	00000a02 	.word	0x00000a02
1000e68c:	00000a03 	.word	0x00000a03
1000e690:	00000c06 	.word	0x00000c06
1000e694:	00000c04 	.word	0x00000c04
1000e698:	00000c05 	.word	0x00000c05
1000e69c:	00000c07 	.word	0x00000c07
1000e6a0:	00000c09 	.word	0x00000c09
1000e6a4:	00000c17 	.word	0x00000c17
1000e6a8:	00000c12 	.word	0x00000c12
1000e6ac:	00000c0d 	.word	0x00000c0d
1000e6b0:	00000c13 	.word	0x00000c13
1000e6b4:	00000c15 	.word	0x00000c15
1000e6b8:	00000d08 	.word	0x00000d08
1000e6bc:	00000d01 	.word	0x00000d01
1000e6c0:	00000d15 	.word	0x00000d15
1000e6c4:	00000e1b 	.word	0x00000e1b
1000e6c8:	00000e0f 	.word	0x00000e0f
1000e6cc:	00000e03 	.word	0x00000e03
1000e6d0:	00000e06 	.word	0x00000e06
1000e6d4:	00000e0a 	.word	0x00000e0a
1000e6d8:	00000e15 	.word	0x00000e15
1000e6dc:	00000e11 	.word	0x00000e11
1000e6e0:	00000e13 	.word	0x00000e13
1000e6e4:	00000e17 	.word	0x00000e17
1000e6e8:	00000e19 	.word	0x00000e19
1000e6ec:	00000e27 	.word	0x00000e27
1000e6f0:	00000e21 	.word	0x00000e21
1000e6f4:	00000e1c 	.word	0x00000e1c
1000e6f8:	00000e1d 	.word	0x00000e1d
1000e6fc:	4b9f      	ldr	r3, [pc, #636]	; (1000e97c <at_ble_event_get+0x614>)
1000e6fe:	429c      	cmp	r4, r3
1000e700:	d07e      	beq.n	1000e800 <at_ble_event_get+0x498>
1000e702:	4b9f      	ldr	r3, [pc, #636]	; (1000e980 <at_ble_event_get+0x618>)
1000e704:	429c      	cmp	r4, r3
1000e706:	d100      	bne.n	1000e70a <at_ble_event_get+0x3a2>
1000e708:	e08c      	b.n	1000e824 <at_ble_event_get+0x4bc>
1000e70a:	e015      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e70c:	4b9d      	ldr	r3, [pc, #628]	; (1000e984 <at_ble_event_get+0x61c>)
1000e70e:	429c      	cmp	r4, r3
1000e710:	d100      	bne.n	1000e714 <at_ble_event_get+0x3ac>
1000e712:	e10a      	b.n	1000e92a <at_ble_event_get+0x5c2>
1000e714:	d808      	bhi.n	1000e728 <at_ble_event_get+0x3c0>
1000e716:	4b9c      	ldr	r3, [pc, #624]	; (1000e988 <at_ble_event_get+0x620>)
1000e718:	429c      	cmp	r4, r3
1000e71a:	d100      	bne.n	1000e71e <at_ble_event_get+0x3b6>
1000e71c:	e0f7      	b.n	1000e90e <at_ble_event_get+0x5a6>
1000e71e:	4b9b      	ldr	r3, [pc, #620]	; (1000e98c <at_ble_event_get+0x624>)
1000e720:	429c      	cmp	r4, r3
1000e722:	d100      	bne.n	1000e726 <at_ble_event_get+0x3be>
1000e724:	e0fa      	b.n	1000e91c <at_ble_event_get+0x5b4>
1000e726:	e007      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e728:	4b99      	ldr	r3, [pc, #612]	; (1000e990 <at_ble_event_get+0x628>)
1000e72a:	429c      	cmp	r4, r3
1000e72c:	d100      	bne.n	1000e730 <at_ble_event_get+0x3c8>
1000e72e:	e103      	b.n	1000e938 <at_ble_event_get+0x5d0>
1000e730:	4b98      	ldr	r3, [pc, #608]	; (1000e994 <at_ble_event_get+0x62c>)
1000e732:	429c      	cmp	r4, r3
1000e734:	d100      	bne.n	1000e738 <at_ble_event_get+0x3d0>
1000e736:	e106      	b.n	1000e946 <at_ble_event_get+0x5de>
1000e738:	2600      	movs	r6, #0
1000e73a:	e10a      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e73c:	1c30      	adds	r0, r6, #0
1000e73e:	1c29      	adds	r1, r5, #0
1000e740:	4b95      	ldr	r3, [pc, #596]	; (1000e998 <at_ble_event_get+0x630>)
1000e742:	e014      	b.n	1000e76e <at_ble_event_get+0x406>
1000e744:	1c30      	adds	r0, r6, #0
1000e746:	1c29      	adds	r1, r5, #0
1000e748:	4b94      	ldr	r3, [pc, #592]	; (1000e99c <at_ble_event_get+0x634>)
1000e74a:	4798      	blx	r3
1000e74c:	2604      	movs	r6, #4
1000e74e:	e100      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e750:	1c30      	adds	r0, r6, #0
1000e752:	1c29      	adds	r1, r5, #0
1000e754:	4b92      	ldr	r3, [pc, #584]	; (1000e9a0 <at_ble_event_get+0x638>)
1000e756:	4798      	blx	r3
1000e758:	2601      	movs	r6, #1
1000e75a:	e0fa      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e75c:	1c30      	adds	r0, r6, #0
1000e75e:	1c29      	adds	r1, r5, #0
1000e760:	4b90      	ldr	r3, [pc, #576]	; (1000e9a4 <at_ble_event_get+0x63c>)
1000e762:	4798      	blx	r3
1000e764:	260f      	movs	r6, #15
1000e766:	e0f4      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e768:	1c30      	adds	r0, r6, #0
1000e76a:	1c29      	adds	r1, r5, #0
1000e76c:	4b8e      	ldr	r3, [pc, #568]	; (1000e9a8 <at_ble_event_get+0x640>)
1000e76e:	4798      	blx	r3
1000e770:	1c06      	adds	r6, r0, #0
1000e772:	e0ee      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e774:	9801      	ldr	r0, [sp, #4]
1000e776:	1c31      	adds	r1, r6, #0
1000e778:	1c2a      	adds	r2, r5, #0
1000e77a:	4b8c      	ldr	r3, [pc, #560]	; (1000e9ac <at_ble_event_get+0x644>)
1000e77c:	e017      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e77e:	1c31      	adds	r1, r6, #0
1000e780:	9801      	ldr	r0, [sp, #4]
1000e782:	1c2a      	adds	r2, r5, #0
1000e784:	4b8a      	ldr	r3, [pc, #552]	; (1000e9b0 <at_ble_event_get+0x648>)
1000e786:	4798      	blx	r3
1000e788:	2611      	movs	r6, #17
1000e78a:	e0e2      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e78c:	1c31      	adds	r1, r6, #0
1000e78e:	9801      	ldr	r0, [sp, #4]
1000e790:	1c2a      	adds	r2, r5, #0
1000e792:	4b88      	ldr	r3, [pc, #544]	; (1000e9b4 <at_ble_event_get+0x64c>)
1000e794:	4798      	blx	r3
1000e796:	2612      	movs	r6, #18
1000e798:	e0db      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e79a:	1c30      	adds	r0, r6, #0
1000e79c:	1c29      	adds	r1, r5, #0
1000e79e:	4b86      	ldr	r3, [pc, #536]	; (1000e9b8 <at_ble_event_get+0x650>)
1000e7a0:	4798      	blx	r3
1000e7a2:	2606      	movs	r6, #6
1000e7a4:	e0d5      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e7a6:	1c31      	adds	r1, r6, #0
1000e7a8:	1c2a      	adds	r2, r5, #0
1000e7aa:	9801      	ldr	r0, [sp, #4]
1000e7ac:	4b83      	ldr	r3, [pc, #524]	; (1000e9bc <at_ble_event_get+0x654>)
1000e7ae:	4798      	blx	r3
1000e7b0:	e7de      	b.n	1000e770 <at_ble_event_get+0x408>
1000e7b2:	9801      	ldr	r0, [sp, #4]
1000e7b4:	1c31      	adds	r1, r6, #0
1000e7b6:	1c2a      	adds	r2, r5, #0
1000e7b8:	4b81      	ldr	r3, [pc, #516]	; (1000e9c0 <at_ble_event_get+0x658>)
1000e7ba:	e7f8      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e7bc:	1c31      	adds	r1, r6, #0
1000e7be:	9801      	ldr	r0, [sp, #4]
1000e7c0:	1c2a      	adds	r2, r5, #0
1000e7c2:	4b80      	ldr	r3, [pc, #512]	; (1000e9c4 <at_ble_event_get+0x65c>)
1000e7c4:	4798      	blx	r3
1000e7c6:	260d      	movs	r6, #13
1000e7c8:	e0c3      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e7ca:	1c31      	adds	r1, r6, #0
1000e7cc:	9801      	ldr	r0, [sp, #4]
1000e7ce:	1c2a      	adds	r2, r5, #0
1000e7d0:	4b7d      	ldr	r3, [pc, #500]	; (1000e9c8 <at_ble_event_get+0x660>)
1000e7d2:	4798      	blx	r3
1000e7d4:	260e      	movs	r6, #14
1000e7d6:	e0bc      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e7d8:	9801      	ldr	r0, [sp, #4]
1000e7da:	1c31      	adds	r1, r6, #0
1000e7dc:	1c2a      	adds	r2, r5, #0
1000e7de:	4b7b      	ldr	r3, [pc, #492]	; (1000e9cc <at_ble_event_get+0x664>)
1000e7e0:	4798      	blx	r3
1000e7e2:	e084      	b.n	1000e8ee <at_ble_event_get+0x586>
1000e7e4:	1c31      	adds	r1, r6, #0
1000e7e6:	9801      	ldr	r0, [sp, #4]
1000e7e8:	1c2a      	adds	r2, r5, #0
1000e7ea:	4b79      	ldr	r3, [pc, #484]	; (1000e9d0 <at_ble_event_get+0x668>)
1000e7ec:	4798      	blx	r3
1000e7ee:	260b      	movs	r6, #11
1000e7f0:	e0af      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e7f2:	1c31      	adds	r1, r6, #0
1000e7f4:	9801      	ldr	r0, [sp, #4]
1000e7f6:	1c2a      	adds	r2, r5, #0
1000e7f8:	4b76      	ldr	r3, [pc, #472]	; (1000e9d4 <at_ble_event_get+0x66c>)
1000e7fa:	4798      	blx	r3
1000e7fc:	2610      	movs	r6, #16
1000e7fe:	e0a8      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e800:	1c30      	adds	r0, r6, #0
1000e802:	1c29      	adds	r1, r5, #0
1000e804:	4b74      	ldr	r3, [pc, #464]	; (1000e9d8 <at_ble_event_get+0x670>)
1000e806:	4798      	blx	r3
1000e808:	2628      	movs	r6, #40	; 0x28
1000e80a:	e0a2      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e80c:	1c30      	adds	r0, r6, #0
1000e80e:	1c29      	adds	r1, r5, #0
1000e810:	4b72      	ldr	r3, [pc, #456]	; (1000e9dc <at_ble_event_get+0x674>)
1000e812:	4798      	blx	r3
1000e814:	2629      	movs	r6, #41	; 0x29
1000e816:	e09c      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e818:	1c30      	adds	r0, r6, #0
1000e81a:	1c29      	adds	r1, r5, #0
1000e81c:	4b70      	ldr	r3, [pc, #448]	; (1000e9e0 <at_ble_event_get+0x678>)
1000e81e:	4798      	blx	r3
1000e820:	2627      	movs	r6, #39	; 0x27
1000e822:	e096      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e824:	1c30      	adds	r0, r6, #0
1000e826:	1c29      	adds	r1, r5, #0
1000e828:	4b6e      	ldr	r3, [pc, #440]	; (1000e9e4 <at_ble_event_get+0x67c>)
1000e82a:	4798      	blx	r3
1000e82c:	262a      	movs	r6, #42	; 0x2a
1000e82e:	e090      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e830:	9801      	ldr	r0, [sp, #4]
1000e832:	1c31      	adds	r1, r6, #0
1000e834:	1c2a      	adds	r2, r5, #0
1000e836:	4b6c      	ldr	r3, [pc, #432]	; (1000e9e8 <at_ble_event_get+0x680>)
1000e838:	e7b9      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e83a:	9801      	ldr	r0, [sp, #4]
1000e83c:	1c31      	adds	r1, r6, #0
1000e83e:	1c2a      	adds	r2, r5, #0
1000e840:	4b6a      	ldr	r3, [pc, #424]	; (1000e9ec <at_ble_event_get+0x684>)
1000e842:	e7b4      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e844:	1c30      	adds	r0, r6, #0
1000e846:	1c29      	adds	r1, r5, #0
1000e848:	4b69      	ldr	r3, [pc, #420]	; (1000e9f0 <at_ble_event_get+0x688>)
1000e84a:	4798      	blx	r3
1000e84c:	262b      	movs	r6, #43	; 0x2b
1000e84e:	e080      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e850:	1c30      	adds	r0, r6, #0
1000e852:	1c29      	adds	r1, r5, #0
1000e854:	4b67      	ldr	r3, [pc, #412]	; (1000e9f4 <at_ble_event_get+0x68c>)
1000e856:	4798      	blx	r3
1000e858:	262c      	movs	r6, #44	; 0x2c
1000e85a:	e07a      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e85c:	1c31      	adds	r1, r6, #0
1000e85e:	9801      	ldr	r0, [sp, #4]
1000e860:	1c2a      	adds	r2, r5, #0
1000e862:	4b65      	ldr	r3, [pc, #404]	; (1000e9f8 <at_ble_event_get+0x690>)
1000e864:	4798      	blx	r3
1000e866:	2613      	movs	r6, #19
1000e868:	e073      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e86a:	1c31      	adds	r1, r6, #0
1000e86c:	9801      	ldr	r0, [sp, #4]
1000e86e:	1c2a      	adds	r2, r5, #0
1000e870:	4b62      	ldr	r3, [pc, #392]	; (1000e9fc <at_ble_event_get+0x694>)
1000e872:	4798      	blx	r3
1000e874:	2614      	movs	r6, #20
1000e876:	e06c      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e878:	1c31      	adds	r1, r6, #0
1000e87a:	9801      	ldr	r0, [sp, #4]
1000e87c:	1c2a      	adds	r2, r5, #0
1000e87e:	4b60      	ldr	r3, [pc, #384]	; (1000ea00 <at_ble_event_get+0x698>)
1000e880:	4798      	blx	r3
1000e882:	2615      	movs	r6, #21
1000e884:	e065      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e886:	1c31      	adds	r1, r6, #0
1000e888:	9801      	ldr	r0, [sp, #4]
1000e88a:	1c2a      	adds	r2, r5, #0
1000e88c:	4b5d      	ldr	r3, [pc, #372]	; (1000ea04 <at_ble_event_get+0x69c>)
1000e88e:	4798      	blx	r3
1000e890:	2616      	movs	r6, #22
1000e892:	e05e      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e894:	9801      	ldr	r0, [sp, #4]
1000e896:	1c31      	adds	r1, r6, #0
1000e898:	1c2a      	adds	r2, r5, #0
1000e89a:	4b5b      	ldr	r3, [pc, #364]	; (1000ea08 <at_ble_event_get+0x6a0>)
1000e89c:	e787      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e89e:	1c31      	adds	r1, r6, #0
1000e8a0:	9801      	ldr	r0, [sp, #4]
1000e8a2:	1c2a      	adds	r2, r5, #0
1000e8a4:	4b58      	ldr	r3, [pc, #352]	; (1000ea08 <at_ble_event_get+0x6a0>)
1000e8a6:	4798      	blx	r3
1000e8a8:	88a9      	ldrh	r1, [r5, #4]
1000e8aa:	1c06      	adds	r6, r0, #0
1000e8ac:	4b57      	ldr	r3, [pc, #348]	; (1000ea0c <at_ble_event_get+0x6a4>)
1000e8ae:	8828      	ldrh	r0, [r5, #0]
1000e8b0:	4798      	blx	r3
1000e8b2:	e04e      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e8b4:	1c31      	adds	r1, r6, #0
1000e8b6:	9801      	ldr	r0, [sp, #4]
1000e8b8:	1c2a      	adds	r2, r5, #0
1000e8ba:	4b55      	ldr	r3, [pc, #340]	; (1000ea10 <at_ble_event_get+0x6a8>)
1000e8bc:	4798      	blx	r3
1000e8be:	2623      	movs	r6, #35	; 0x23
1000e8c0:	e047      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e8c2:	9801      	ldr	r0, [sp, #4]
1000e8c4:	1c31      	adds	r1, r6, #0
1000e8c6:	1c2a      	adds	r2, r5, #0
1000e8c8:	4b52      	ldr	r3, [pc, #328]	; (1000ea14 <at_ble_event_get+0x6ac>)
1000e8ca:	e770      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e8cc:	9b01      	ldr	r3, [sp, #4]
1000e8ce:	1c30      	adds	r0, r6, #0
1000e8d0:	0a1f      	lsrs	r7, r3, #8
1000e8d2:	802f      	strh	r7, [r5, #0]
1000e8d4:	1c29      	adds	r1, r5, #0
1000e8d6:	4b50      	ldr	r3, [pc, #320]	; (1000ea18 <at_ble_event_get+0x6b0>)
1000e8d8:	e749      	b.n	1000e76e <at_ble_event_get+0x406>
1000e8da:	9801      	ldr	r0, [sp, #4]
1000e8dc:	1c31      	adds	r1, r6, #0
1000e8de:	1c2a      	adds	r2, r5, #0
1000e8e0:	4b4e      	ldr	r3, [pc, #312]	; (1000ea1c <at_ble_event_get+0x6b4>)
1000e8e2:	e764      	b.n	1000e7ae <at_ble_event_get+0x446>
1000e8e4:	1c30      	adds	r0, r6, #0
1000e8e6:	1c29      	adds	r1, r5, #0
1000e8e8:	9a01      	ldr	r2, [sp, #4]
1000e8ea:	4b4d      	ldr	r3, [pc, #308]	; (1000ea20 <at_ble_event_get+0x6b8>)
1000e8ec:	4798      	blx	r3
1000e8ee:	263b      	movs	r6, #59	; 0x3b
1000e8f0:	e02f      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e8f2:	1c31      	adds	r1, r6, #0
1000e8f4:	9801      	ldr	r0, [sp, #4]
1000e8f6:	1c2a      	adds	r2, r5, #0
1000e8f8:	4b4a      	ldr	r3, [pc, #296]	; (1000ea24 <at_ble_event_get+0x6bc>)
1000e8fa:	4798      	blx	r3
1000e8fc:	2618      	movs	r6, #24
1000e8fe:	e028      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e900:	1c31      	adds	r1, r6, #0
1000e902:	9801      	ldr	r0, [sp, #4]
1000e904:	1c2a      	adds	r2, r5, #0
1000e906:	4b48      	ldr	r3, [pc, #288]	; (1000ea28 <at_ble_event_get+0x6c0>)
1000e908:	4798      	blx	r3
1000e90a:	2620      	movs	r6, #32
1000e90c:	e021      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e90e:	1c31      	adds	r1, r6, #0
1000e910:	9801      	ldr	r0, [sp, #4]
1000e912:	1c2a      	adds	r2, r5, #0
1000e914:	4b45      	ldr	r3, [pc, #276]	; (1000ea2c <at_ble_event_get+0x6c4>)
1000e916:	4798      	blx	r3
1000e918:	2633      	movs	r6, #51	; 0x33
1000e91a:	e01a      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e91c:	1c31      	adds	r1, r6, #0
1000e91e:	9801      	ldr	r0, [sp, #4]
1000e920:	1c2a      	adds	r2, r5, #0
1000e922:	4b43      	ldr	r3, [pc, #268]	; (1000ea30 <at_ble_event_get+0x6c8>)
1000e924:	4798      	blx	r3
1000e926:	2630      	movs	r6, #48	; 0x30
1000e928:	e013      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e92a:	1c31      	adds	r1, r6, #0
1000e92c:	9801      	ldr	r0, [sp, #4]
1000e92e:	1c2a      	adds	r2, r5, #0
1000e930:	4b40      	ldr	r3, [pc, #256]	; (1000ea34 <at_ble_event_get+0x6cc>)
1000e932:	4798      	blx	r3
1000e934:	2634      	movs	r6, #52	; 0x34
1000e936:	e00c      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e938:	1c31      	adds	r1, r6, #0
1000e93a:	9801      	ldr	r0, [sp, #4]
1000e93c:	1c2a      	adds	r2, r5, #0
1000e93e:	4b3e      	ldr	r3, [pc, #248]	; (1000ea38 <at_ble_event_get+0x6d0>)
1000e940:	4798      	blx	r3
1000e942:	2635      	movs	r6, #53	; 0x35
1000e944:	e005      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e946:	1c31      	adds	r1, r6, #0
1000e948:	9801      	ldr	r0, [sp, #4]
1000e94a:	1c2a      	adds	r2, r5, #0
1000e94c:	4b3b      	ldr	r3, [pc, #236]	; (1000ea3c <at_ble_event_get+0x6d4>)
1000e94e:	4798      	blx	r3
1000e950:	2632      	movs	r6, #50	; 0x32
1000e952:	9b03      	ldr	r3, [sp, #12]
1000e954:	701e      	strb	r6, [r3, #0]
1000e956:	2300      	movs	r3, #0
1000e958:	9302      	str	r3, [sp, #8]
1000e95a:	e57a      	b.n	1000e452 <at_ble_event_get+0xea>
1000e95c:	23d0      	movs	r3, #208	; 0xd0
1000e95e:	e7fb      	b.n	1000e958 <at_ble_event_get+0x5f0>
1000e960:	9b01      	ldr	r3, [sp, #4]
1000e962:	9e02      	ldr	r6, [sp, #8]
1000e964:	2bbb      	cmp	r3, #187	; 0xbb
1000e966:	d000      	beq.n	1000e96a <at_ble_event_get+0x602>
1000e968:	e6e6      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e96a:	e7f2      	b.n	1000e952 <at_ble_event_get+0x5ea>
1000e96c:	9b02      	ldr	r3, [sp, #8]
1000e96e:	2b00      	cmp	r3, #0
1000e970:	d000      	beq.n	1000e974 <at_ble_event_get+0x60c>
1000e972:	e56e      	b.n	1000e452 <at_ble_event_get+0xea>
1000e974:	e6e0      	b.n	1000e738 <at_ble_event_get+0x3d0>
1000e976:	9802      	ldr	r0, [sp, #8]
1000e978:	b007      	add	sp, #28
1000e97a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000e97c:	00000e22 	.word	0x00000e22
1000e980:	00000e25 	.word	0x00000e25
1000e984:	00001b05 	.word	0x00001b05
1000e988:	00001b01 	.word	0x00001b01
1000e98c:	00001b03 	.word	0x00001b03
1000e990:	00001b06 	.word	0x00001b06
1000e994:	00001b08 	.word	0x00001b08
1000e998:	10010b99 	.word	0x10010b99
1000e99c:	10010b7d 	.word	0x10010b7d
1000e9a0:	10010e19 	.word	0x10010e19
1000e9a4:	10010f09 	.word	0x10010f09
1000e9a8:	10010f2d 	.word	0x10010f2d
1000e9ac:	1000ff11 	.word	0x1000ff11
1000e9b0:	10010791 	.word	0x10010791
1000e9b4:	1001080d 	.word	0x1001080d
1000e9b8:	100101c9 	.word	0x100101c9
1000e9bc:	10010265 	.word	0x10010265
1000e9c0:	1001033d 	.word	0x1001033d
1000e9c4:	100105c5 	.word	0x100105c5
1000e9c8:	10010665 	.word	0x10010665
1000e9cc:	1001071d 	.word	0x1001071d
1000e9d0:	10010745 	.word	0x10010745
1000e9d4:	1001075b 	.word	0x1001075b
1000e9d8:	10010825 	.word	0x10010825
1000e9dc:	10010853 	.word	0x10010853
1000e9e0:	10010869 	.word	0x10010869
1000e9e4:	10010893 	.word	0x10010893
1000e9e8:	100106c1 	.word	0x100106c1
1000e9ec:	100106eb 	.word	0x100106eb
1000e9f0:	1000f951 	.word	0x1000f951
1000e9f4:	1000f97d 	.word	0x1000f97d
1000e9f8:	1001114d 	.word	0x1001114d
1000e9fc:	10011189 	.word	0x10011189
1000ea00:	100111d1 	.word	0x100111d1
1000ea04:	10011215 	.word	0x10011215
1000ea08:	10011249 	.word	0x10011249
1000ea0c:	1001110d 	.word	0x1001110d
1000ea10:	10011315 	.word	0x10011315
1000ea14:	1001129d 	.word	0x1001129d
1000ea18:	1000f835 	.word	0x1000f835
1000ea1c:	1000f8a1 	.word	0x1000f8a1
1000ea20:	1000f865 	.word	0x1000f865
1000ea24:	10011325 	.word	0x10011325
1000ea28:	10011365 	.word	0x10011365
1000ea2c:	1001162d 	.word	0x1001162d
1000ea30:	10011637 	.word	0x10011637
1000ea34:	1001163d 	.word	0x1001163d
1000ea38:	10011643 	.word	0x10011643
1000ea3c:	1001164f 	.word	0x1001164f

1000ea40 <internal_event_flush>:
1000ea40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea42:	490e      	ldr	r1, [pc, #56]	; (1000ea7c <internal_event_flush+0x3c>)
1000ea44:	2400      	movs	r4, #0
1000ea46:	680b      	ldr	r3, [r1, #0]
1000ea48:	1c0f      	adds	r7, r1, #0
1000ea4a:	1c1e      	adds	r6, r3, #0
1000ea4c:	4a0c      	ldr	r2, [pc, #48]	; (1000ea80 <internal_event_flush+0x40>)
1000ea4e:	6815      	ldr	r5, [r2, #0]
1000ea50:	9201      	str	r2, [sp, #4]
1000ea52:	2b00      	cmp	r3, #0
1000ea54:	d00e      	beq.n	1000ea74 <internal_event_flush+0x34>
1000ea56:	889a      	ldrh	r2, [r3, #4]
1000ea58:	6819      	ldr	r1, [r3, #0]
1000ea5a:	4282      	cmp	r2, r0
1000ea5c:	d107      	bne.n	1000ea6e <internal_event_flush+0x2e>
1000ea5e:	2c00      	cmp	r4, #0
1000ea60:	d001      	beq.n	1000ea66 <internal_event_flush+0x26>
1000ea62:	6021      	str	r1, [r4, #0]
1000ea64:	e000      	b.n	1000ea68 <internal_event_flush+0x28>
1000ea66:	1c0e      	adds	r6, r1, #0
1000ea68:	601d      	str	r5, [r3, #0]
1000ea6a:	1c1d      	adds	r5, r3, #0
1000ea6c:	1c23      	adds	r3, r4, #0
1000ea6e:	1c1c      	adds	r4, r3, #0
1000ea70:	1c0b      	adds	r3, r1, #0
1000ea72:	e7ee      	b.n	1000ea52 <internal_event_flush+0x12>
1000ea74:	9b01      	ldr	r3, [sp, #4]
1000ea76:	603e      	str	r6, [r7, #0]
1000ea78:	601d      	str	r5, [r3, #0]
1000ea7a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ea7c:	10019374 	.word	0x10019374
1000ea80:	10019378 	.word	0x10019378

1000ea84 <internal_conn_flush>:
1000ea84:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ea86:	4a12      	ldr	r2, [pc, #72]	; (1000ead0 <internal_conn_flush+0x4c>)
1000ea88:	9000      	str	r0, [sp, #0]
1000ea8a:	6813      	ldr	r3, [r2, #0]
1000ea8c:	4811      	ldr	r0, [pc, #68]	; (1000ead4 <internal_conn_flush+0x50>)
1000ea8e:	1c1f      	adds	r7, r3, #0
1000ea90:	2100      	movs	r1, #0
1000ea92:	4684      	mov	ip, r0
1000ea94:	6804      	ldr	r4, [r0, #0]
1000ea96:	9201      	str	r2, [sp, #4]
1000ea98:	2b00      	cmp	r3, #0
1000ea9a:	d014      	beq.n	1000eac6 <internal_conn_flush+0x42>
1000ea9c:	88d8      	ldrh	r0, [r3, #6]
1000ea9e:	9a00      	ldr	r2, [sp, #0]
1000eaa0:	681d      	ldr	r5, [r3, #0]
1000eaa2:	0a06      	lsrs	r6, r0, #8
1000eaa4:	4296      	cmp	r6, r2
1000eaa6:	d10b      	bne.n	1000eac0 <internal_conn_flush+0x3c>
1000eaa8:	26fd      	movs	r6, #253	; 0xfd
1000eaaa:	4006      	ands	r6, r0
1000eaac:	2e0c      	cmp	r6, #12
1000eaae:	d107      	bne.n	1000eac0 <internal_conn_flush+0x3c>
1000eab0:	2900      	cmp	r1, #0
1000eab2:	d001      	beq.n	1000eab8 <internal_conn_flush+0x34>
1000eab4:	600d      	str	r5, [r1, #0]
1000eab6:	e000      	b.n	1000eaba <internal_conn_flush+0x36>
1000eab8:	1c2f      	adds	r7, r5, #0
1000eaba:	601c      	str	r4, [r3, #0]
1000eabc:	1c1c      	adds	r4, r3, #0
1000eabe:	1c0b      	adds	r3, r1, #0
1000eac0:	1c19      	adds	r1, r3, #0
1000eac2:	1c2b      	adds	r3, r5, #0
1000eac4:	e7e8      	b.n	1000ea98 <internal_conn_flush+0x14>
1000eac6:	9b01      	ldr	r3, [sp, #4]
1000eac8:	601f      	str	r7, [r3, #0]
1000eaca:	4663      	mov	r3, ip
1000eacc:	601c      	str	r4, [r3, #0]
1000eace:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000ead0:	10019374 	.word	0x10019374
1000ead4:	10019378 	.word	0x10019378

1000ead8 <at_ble_device_name_set>:
1000ead8:	b530      	push	{r4, r5, lr}
1000eada:	23cf      	movs	r3, #207	; 0xcf
1000eadc:	2800      	cmp	r0, #0
1000eade:	d010      	beq.n	1000eb02 <at_ble_device_name_set+0x2a>
1000eae0:	1e4a      	subs	r2, r1, #1
1000eae2:	2a1f      	cmp	r2, #31
1000eae4:	d80d      	bhi.n	1000eb02 <at_ble_device_name_set+0x2a>
1000eae6:	4a08      	ldr	r2, [pc, #32]	; (1000eb08 <at_ble_device_name_set+0x30>)
1000eae8:	1c13      	adds	r3, r2, #0
1000eaea:	33aa      	adds	r3, #170	; 0xaa
1000eaec:	8019      	strh	r1, [r3, #0]
1000eaee:	2300      	movs	r3, #0
1000eaf0:	1c1c      	adds	r4, r3, #0
1000eaf2:	5cc5      	ldrb	r5, [r0, r3]
1000eaf4:	34ac      	adds	r4, #172	; 0xac
1000eaf6:	3301      	adds	r3, #1
1000eaf8:	5515      	strb	r5, [r2, r4]
1000eafa:	b2dc      	uxtb	r4, r3
1000eafc:	428c      	cmp	r4, r1
1000eafe:	d3f7      	bcc.n	1000eaf0 <at_ble_device_name_set+0x18>
1000eb00:	2300      	movs	r3, #0
1000eb02:	1c18      	adds	r0, r3, #0
1000eb04:	bd30      	pop	{r4, r5, pc}
1000eb06:	46c0      	nop			; (mov r8, r8)
1000eb08:	1001a3a2 	.word	0x1001a3a2

1000eb0c <at_ble_addr_get>:
1000eb0c:	b510      	push	{r4, lr}
1000eb0e:	1c04      	adds	r4, r0, #0
1000eb10:	20cf      	movs	r0, #207	; 0xcf
1000eb12:	2c00      	cmp	r4, #0
1000eb14:	d006      	beq.n	1000eb24 <at_ble_addr_get+0x18>
1000eb16:	4b04      	ldr	r3, [pc, #16]	; (1000eb28 <at_ble_addr_get+0x1c>)
1000eb18:	38ce      	subs	r0, #206	; 0xce
1000eb1a:	1c21      	adds	r1, r4, #0
1000eb1c:	4798      	blx	r3
1000eb1e:	4b03      	ldr	r3, [pc, #12]	; (1000eb2c <at_ble_addr_get+0x20>)
1000eb20:	791b      	ldrb	r3, [r3, #4]
1000eb22:	7023      	strb	r3, [r4, #0]
1000eb24:	bd10      	pop	{r4, pc}
1000eb26:	46c0      	nop			; (mov r8, r8)
1000eb28:	10010a2d 	.word	0x10010a2d
1000eb2c:	1001a3a2 	.word	0x1001a3a2

1000eb30 <at_ble_set_dev_config>:
1000eb30:	b5f0      	push	{r4, r5, r6, r7, lr}
1000eb32:	7906      	ldrb	r6, [r0, #4]
1000eb34:	b089      	sub	sp, #36	; 0x24
1000eb36:	25cf      	movs	r5, #207	; 0xcf
1000eb38:	2e03      	cmp	r6, #3
1000eb3a:	d838      	bhi.n	1000ebae <at_ble_set_dev_config+0x7e>
1000eb3c:	7803      	ldrb	r3, [r0, #0]
1000eb3e:	3511      	adds	r5, #17
1000eb40:	2b0f      	cmp	r3, #15
1000eb42:	d834      	bhi.n	1000ebae <at_ble_set_dev_config+0x7e>
1000eb44:	2380      	movs	r3, #128	; 0x80
1000eb46:	8c87      	ldrh	r7, [r0, #36]	; 0x24
1000eb48:	3d11      	subs	r5, #17
1000eb4a:	009b      	lsls	r3, r3, #2
1000eb4c:	429f      	cmp	r7, r3
1000eb4e:	d82e      	bhi.n	1000ebae <at_ble_set_dev_config+0x7e>
1000eb50:	7fc5      	ldrb	r5, [r0, #31]
1000eb52:	7f83      	ldrb	r3, [r0, #30]
1000eb54:	01ad      	lsls	r5, r5, #6
1000eb56:	015b      	lsls	r3, r3, #5
1000eb58:	431d      	orrs	r5, r3
1000eb5a:	7ec3      	ldrb	r3, [r0, #27]
1000eb5c:	431d      	orrs	r5, r3
1000eb5e:	7f43      	ldrb	r3, [r0, #29]
1000eb60:	011b      	lsls	r3, r3, #4
1000eb62:	431d      	orrs	r5, r3
1000eb64:	7f03      	ldrb	r3, [r0, #28]
1000eb66:	009b      	lsls	r3, r3, #2
1000eb68:	431d      	orrs	r5, r3
1000eb6a:	4b12      	ldr	r3, [pc, #72]	; (1000ebb4 <at_ble_set_dev_config+0x84>)
1000eb6c:	b2ed      	uxtb	r5, r5
1000eb6e:	711e      	strb	r6, [r3, #4]
1000eb70:	7903      	ldrb	r3, [r0, #4]
1000eb72:	3b02      	subs	r3, #2
1000eb74:	2b01      	cmp	r3, #1
1000eb76:	d801      	bhi.n	1000eb7c <at_ble_set_dev_config+0x4c>
1000eb78:	2302      	movs	r3, #2
1000eb7a:	7103      	strb	r3, [r0, #4]
1000eb7c:	1c04      	adds	r4, r0, #0
1000eb7e:	1c23      	adds	r3, r4, #0
1000eb80:	330b      	adds	r3, #11
1000eb82:	8861      	ldrh	r1, [r4, #2]
1000eb84:	9307      	str	r3, [sp, #28]
1000eb86:	7923      	ldrb	r3, [r4, #4]
1000eb88:	7800      	ldrb	r0, [r0, #0]
1000eb8a:	9300      	str	r3, [sp, #0]
1000eb8c:	9501      	str	r5, [sp, #4]
1000eb8e:	8c25      	ldrh	r5, [r4, #32]
1000eb90:	1d62      	adds	r2, r4, #5
1000eb92:	9502      	str	r5, [sp, #8]
1000eb94:	8c65      	ldrh	r5, [r4, #34]	; 0x22
1000eb96:	9b07      	ldr	r3, [sp, #28]
1000eb98:	9503      	str	r5, [sp, #12]
1000eb9a:	9704      	str	r7, [sp, #16]
1000eb9c:	4d06      	ldr	r5, [pc, #24]	; (1000ebb8 <at_ble_set_dev_config+0x88>)
1000eb9e:	47a8      	blx	r5
1000eba0:	7126      	strb	r6, [r4, #4]
1000eba2:	1c05      	adds	r5, r0, #0
1000eba4:	1c21      	adds	r1, r4, #0
1000eba6:	4803      	ldr	r0, [pc, #12]	; (1000ebb4 <at_ble_set_dev_config+0x84>)
1000eba8:	2226      	movs	r2, #38	; 0x26
1000ebaa:	4b04      	ldr	r3, [pc, #16]	; (1000ebbc <at_ble_set_dev_config+0x8c>)
1000ebac:	4798      	blx	r3
1000ebae:	1c28      	adds	r0, r5, #0
1000ebb0:	b009      	add	sp, #36	; 0x24
1000ebb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ebb4:	1001a3a2 	.word	0x1001a3a2
1000ebb8:	10010925 	.word	0x10010925
1000ebbc:	100155bb 	.word	0x100155bb

1000ebc0 <at_ble_init>:
1000ebc0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ebc2:	b087      	sub	sp, #28
1000ebc4:	af03      	add	r7, sp, #12
1000ebc6:	4954      	ldr	r1, [pc, #336]	; (1000ed18 <at_ble_init+0x158>)
1000ebc8:	220b      	movs	r2, #11
1000ebca:	4b54      	ldr	r3, [pc, #336]	; (1000ed1c <at_ble_init+0x15c>)
1000ebcc:	1c04      	adds	r4, r0, #0
1000ebce:	1c38      	adds	r0, r7, #0
1000ebd0:	4798      	blx	r3
1000ebd2:	2205      	movs	r2, #5
1000ebd4:	4b52      	ldr	r3, [pc, #328]	; (1000ed20 <at_ble_init+0x160>)
1000ebd6:	2640      	movs	r6, #64	; 0x40
1000ebd8:	801a      	strh	r2, [r3, #0]
1000ebda:	2300      	movs	r3, #0
1000ebdc:	4a51      	ldr	r2, [pc, #324]	; (1000ed24 <at_ble_init+0x164>)
1000ebde:	6013      	str	r3, [r2, #0]
1000ebe0:	4a51      	ldr	r2, [pc, #324]	; (1000ed28 <at_ble_init+0x168>)
1000ebe2:	7013      	strb	r3, [r2, #0]
1000ebe4:	4a51      	ldr	r2, [pc, #324]	; (1000ed2c <at_ble_init+0x16c>)
1000ebe6:	7013      	strb	r3, [r2, #0]
1000ebe8:	4b51      	ldr	r3, [pc, #324]	; (1000ed30 <at_ble_init+0x170>)
1000ebea:	4798      	blx	r3
1000ebec:	4b51      	ldr	r3, [pc, #324]	; (1000ed34 <at_ble_init+0x174>)
1000ebee:	4798      	blx	r3
1000ebf0:	4b51      	ldr	r3, [pc, #324]	; (1000ed38 <at_ble_init+0x178>)
1000ebf2:	4798      	blx	r3
1000ebf4:	4b51      	ldr	r3, [pc, #324]	; (1000ed3c <at_ble_init+0x17c>)
1000ebf6:	4798      	blx	r3
1000ebf8:	2c00      	cmp	r4, #0
1000ebfa:	d100      	bne.n	1000ebfe <at_ble_init+0x3e>
1000ebfc:	e089      	b.n	1000ed12 <at_ble_init+0x152>
1000ebfe:	68a3      	ldr	r3, [r4, #8]
1000ec00:	2b00      	cmp	r3, #0
1000ec02:	d100      	bne.n	1000ec06 <at_ble_init+0x46>
1000ec04:	e085      	b.n	1000ed12 <at_ble_init+0x152>
1000ec06:	6923      	ldr	r3, [r4, #16]
1000ec08:	2b00      	cmp	r3, #0
1000ec0a:	d100      	bne.n	1000ec0e <at_ble_init+0x4e>
1000ec0c:	e081      	b.n	1000ed12 <at_ble_init+0x152>
1000ec0e:	6820      	ldr	r0, [r4, #0]
1000ec10:	2800      	cmp	r0, #0
1000ec12:	d102      	bne.n	1000ec1a <at_ble_init+0x5a>
1000ec14:	6863      	ldr	r3, [r4, #4]
1000ec16:	2b00      	cmp	r3, #0
1000ec18:	d17b      	bne.n	1000ed12 <at_ble_init+0x152>
1000ec1a:	4b49      	ldr	r3, [pc, #292]	; (1000ed40 <at_ble_init+0x180>)
1000ec1c:	6861      	ldr	r1, [r4, #4]
1000ec1e:	4798      	blx	r3
1000ec20:	4b48      	ldr	r3, [pc, #288]	; (1000ed44 <at_ble_init+0x184>)
1000ec22:	4798      	blx	r3
1000ec24:	2801      	cmp	r0, #1
1000ec26:	d901      	bls.n	1000ec2c <at_ble_init+0x6c>
1000ec28:	26e2      	movs	r6, #226	; 0xe2
1000ec2a:	e072      	b.n	1000ed12 <at_ble_init+0x152>
1000ec2c:	4846      	ldr	r0, [pc, #280]	; (1000ed48 <at_ble_init+0x188>)
1000ec2e:	4b47      	ldr	r3, [pc, #284]	; (1000ed4c <at_ble_init+0x18c>)
1000ec30:	4798      	blx	r3
1000ec32:	2800      	cmp	r0, #0
1000ec34:	d1f8      	bne.n	1000ec28 <at_ble_init+0x68>
1000ec36:	1c20      	adds	r0, r4, #0
1000ec38:	4b45      	ldr	r3, [pc, #276]	; (1000ed50 <at_ble_init+0x190>)
1000ec3a:	4798      	blx	r3
1000ec3c:	68e0      	ldr	r0, [r4, #12]
1000ec3e:	68a1      	ldr	r1, [r4, #8]
1000ec40:	4b44      	ldr	r3, [pc, #272]	; (1000ed54 <at_ble_init+0x194>)
1000ec42:	4798      	blx	r3
1000ec44:	466b      	mov	r3, sp
1000ec46:	2201      	movs	r2, #1
1000ec48:	1cdc      	adds	r4, r3, #3
1000ec4a:	1c20      	adds	r0, r4, #0
1000ec4c:	a901      	add	r1, sp, #4
1000ec4e:	4252      	negs	r2, r2
1000ec50:	4b41      	ldr	r3, [pc, #260]	; (1000ed58 <at_ble_init+0x198>)
1000ec52:	4798      	blx	r3
1000ec54:	2800      	cmp	r0, #0
1000ec56:	d102      	bne.n	1000ec5e <at_ble_init+0x9e>
1000ec58:	7823      	ldrb	r3, [r4, #0]
1000ec5a:	2b39      	cmp	r3, #57	; 0x39
1000ec5c:	d1f2      	bne.n	1000ec44 <at_ble_init+0x84>
1000ec5e:	4b3f      	ldr	r3, [pc, #252]	; (1000ed5c <at_ble_init+0x19c>)
1000ec60:	4798      	blx	r3
1000ec62:	1e06      	subs	r6, r0, #0
1000ec64:	d155      	bne.n	1000ed12 <at_ble_init+0x152>
1000ec66:	1c03      	adds	r3, r0, #0
1000ec68:	2101      	movs	r1, #1
1000ec6a:	4a3d      	ldr	r2, [pc, #244]	; (1000ed60 <at_ble_init+0x1a0>)
1000ec6c:	4249      	negs	r1, r1
1000ec6e:	189a      	adds	r2, r3, r2
1000ec70:	3312      	adds	r3, #18
1000ec72:	8151      	strh	r1, [r2, #10]
1000ec74:	2b90      	cmp	r3, #144	; 0x90
1000ec76:	d1f7      	bne.n	1000ec68 <at_ble_init+0xa8>
1000ec78:	4c3a      	ldr	r4, [pc, #232]	; (1000ed64 <at_ble_init+0x1a4>)
1000ec7a:	3b81      	subs	r3, #129	; 0x81
1000ec7c:	7023      	strb	r3, [r4, #0]
1000ec7e:	4b3a      	ldr	r3, [pc, #232]	; (1000ed68 <at_ble_init+0x1a8>)
1000ec80:	4a3a      	ldr	r2, [pc, #232]	; (1000ed6c <at_ble_init+0x1ac>)
1000ec82:	8063      	strh	r3, [r4, #2]
1000ec84:	2300      	movs	r3, #0
1000ec86:	7123      	strb	r3, [r4, #4]
1000ec88:	3301      	adds	r3, #1
1000ec8a:	1e58      	subs	r0, r3, #1
1000ec8c:	0119      	lsls	r1, r3, #4
1000ec8e:	4301      	orrs	r1, r0
1000ec90:	3302      	adds	r3, #2
1000ec92:	7011      	strb	r1, [r2, #0]
1000ec94:	3201      	adds	r2, #1
1000ec96:	2b21      	cmp	r3, #33	; 0x21
1000ec98:	d1f7      	bne.n	1000ec8a <at_ble_init+0xca>
1000ec9a:	33e0      	adds	r3, #224	; 0xe0
1000ec9c:	33ff      	adds	r3, #255	; 0xff
1000ec9e:	84a3      	strh	r3, [r4, #36]	; 0x24
1000eca0:	1c23      	adds	r3, r4, #0
1000eca2:	2500      	movs	r5, #0
1000eca4:	3373      	adds	r3, #115	; 0x73
1000eca6:	701d      	strb	r5, [r3, #0]
1000eca8:	1c23      	adds	r3, r4, #0
1000ecaa:	3372      	adds	r3, #114	; 0x72
1000ecac:	701d      	strb	r5, [r3, #0]
1000ecae:	1c23      	adds	r3, r4, #0
1000ecb0:	3376      	adds	r3, #118	; 0x76
1000ecb2:	701d      	strb	r5, [r3, #0]
1000ecb4:	1c23      	adds	r3, r4, #0
1000ecb6:	33cc      	adds	r3, #204	; 0xcc
1000ecb8:	801d      	strh	r5, [r3, #0]
1000ecba:	1c22      	adds	r2, r4, #0
1000ecbc:	23a0      	movs	r3, #160	; 0xa0
1000ecbe:	32d0      	adds	r2, #208	; 0xd0
1000ecc0:	005b      	lsls	r3, r3, #1
1000ecc2:	8013      	strh	r3, [r2, #0]
1000ecc4:	1c22      	adds	r2, r4, #0
1000ecc6:	32ce      	adds	r2, #206	; 0xce
1000ecc8:	8013      	strh	r3, [r2, #0]
1000ecca:	1c23      	adds	r3, r4, #0
1000eccc:	33d2      	adds	r3, #210	; 0xd2
1000ecce:	801d      	strh	r5, [r3, #0]
1000ecd0:	22fa      	movs	r2, #250	; 0xfa
1000ecd2:	1c23      	adds	r3, r4, #0
1000ecd4:	0052      	lsls	r2, r2, #1
1000ecd6:	33d4      	adds	r3, #212	; 0xd4
1000ecd8:	801a      	strh	r2, [r3, #0]
1000ecda:	1c23      	adds	r3, r4, #0
1000ecdc:	33d6      	adds	r3, #214	; 0xd6
1000ecde:	701d      	strb	r5, [r3, #0]
1000ece0:	1c20      	adds	r0, r4, #0
1000ece2:	4b23      	ldr	r3, [pc, #140]	; (1000ed70 <at_ble_init+0x1b0>)
1000ece4:	76e5      	strb	r5, [r4, #27]
1000ece6:	7725      	strb	r5, [r4, #28]
1000ece8:	7765      	strb	r5, [r4, #29]
1000ecea:	77a5      	strb	r5, [r4, #30]
1000ecec:	77e5      	strb	r5, [r4, #31]
1000ecee:	8425      	strh	r5, [r4, #32]
1000ecf0:	8465      	strh	r5, [r4, #34]	; 0x22
1000ecf2:	4798      	blx	r3
1000ecf4:	1c23      	adds	r3, r4, #0
1000ecf6:	2207      	movs	r2, #7
1000ecf8:	3374      	adds	r3, #116	; 0x74
1000ecfa:	701a      	strb	r2, [r3, #0]
1000ecfc:	1c23      	adds	r3, r4, #0
1000ecfe:	3204      	adds	r2, #4
1000ed00:	33aa      	adds	r3, #170	; 0xaa
1000ed02:	801a      	strh	r2, [r3, #0]
1000ed04:	1c2b      	adds	r3, r5, #0
1000ed06:	5d7a      	ldrb	r2, [r7, r5]
1000ed08:	33ac      	adds	r3, #172	; 0xac
1000ed0a:	3501      	adds	r5, #1
1000ed0c:	54e2      	strb	r2, [r4, r3]
1000ed0e:	2d0b      	cmp	r5, #11
1000ed10:	d1f8      	bne.n	1000ed04 <at_ble_init+0x144>
1000ed12:	1c30      	adds	r0, r6, #0
1000ed14:	b007      	add	sp, #28
1000ed16:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ed18:	100176bf 	.word	0x100176bf
1000ed1c:	100155bb 	.word	0x100155bb
1000ed20:	1001a310 	.word	0x1001a310
1000ed24:	10019424 	.word	0x10019424
1000ed28:	10019384 	.word	0x10019384
1000ed2c:	100178fc 	.word	0x100178fc
1000ed30:	10011375 	.word	0x10011375
1000ed34:	1000f031 	.word	0x1000f031
1000ed38:	1000f691 	.word	0x1000f691
1000ed3c:	1000f945 	.word	0x1000f945
1000ed40:	1000f6cd 	.word	0x1000f6cd
1000ed44:	1000d6a1 	.word	0x1000d6a1
1000ed48:	1000fc45 	.word	0x1000fc45
1000ed4c:	1000d8e5 	.word	0x1000d8e5
1000ed50:	1000fced 	.word	0x1000fced
1000ed54:	1000e2ad 	.word	0x1000e2ad
1000ed58:	1000e369 	.word	0x1000e369
1000ed5c:	100108b5 	.word	0x100108b5
1000ed60:	1001a312 	.word	0x1001a312
1000ed64:	1001a3a2 	.word	0x1001a3a2
1000ed68:	00003a98 	.word	0x00003a98
1000ed6c:	1001a3ad 	.word	0x1001a3ad
1000ed70:	1000eb31 	.word	0x1000eb31

1000ed74 <at_ble_addr_set>:
1000ed74:	b538      	push	{r3, r4, r5, lr}
1000ed76:	1c45      	adds	r5, r0, #1
1000ed78:	1c03      	adds	r3, r0, #0
1000ed7a:	20cf      	movs	r0, #207	; 0xcf
1000ed7c:	2d00      	cmp	r5, #0
1000ed7e:	d018      	beq.n	1000edb2 <at_ble_addr_set+0x3e>
1000ed80:	781a      	ldrb	r2, [r3, #0]
1000ed82:	2a03      	cmp	r2, #3
1000ed84:	d815      	bhi.n	1000edb2 <at_ble_addr_set+0x3e>
1000ed86:	2a01      	cmp	r2, #1
1000ed88:	d102      	bne.n	1000ed90 <at_ble_addr_set+0x1c>
1000ed8a:	785a      	ldrb	r2, [r3, #1]
1000ed8c:	2a00      	cmp	r2, #0
1000ed8e:	d010      	beq.n	1000edb2 <at_ble_addr_set+0x3e>
1000ed90:	1c1c      	adds	r4, r3, #0
1000ed92:	1c29      	adds	r1, r5, #0
1000ed94:	2206      	movs	r2, #6
1000ed96:	4b07      	ldr	r3, [pc, #28]	; (1000edb4 <at_ble_addr_set+0x40>)
1000ed98:	4807      	ldr	r0, [pc, #28]	; (1000edb8 <at_ble_addr_set+0x44>)
1000ed9a:	4798      	blx	r3
1000ed9c:	7823      	ldrb	r3, [r4, #0]
1000ed9e:	4807      	ldr	r0, [pc, #28]	; (1000edbc <at_ble_addr_set+0x48>)
1000eda0:	7103      	strb	r3, [r0, #4]
1000eda2:	4b07      	ldr	r3, [pc, #28]	; (1000edc0 <at_ble_addr_set+0x4c>)
1000eda4:	4798      	blx	r3
1000eda6:	7823      	ldrb	r3, [r4, #0]
1000eda8:	2b00      	cmp	r3, #0
1000edaa:	d102      	bne.n	1000edb2 <at_ble_addr_set+0x3e>
1000edac:	1c28      	adds	r0, r5, #0
1000edae:	4b05      	ldr	r3, [pc, #20]	; (1000edc4 <at_ble_addr_set+0x50>)
1000edb0:	4798      	blx	r3
1000edb2:	bd38      	pop	{r3, r4, r5, pc}
1000edb4:	100155bb 	.word	0x100155bb
1000edb8:	1001a3a7 	.word	0x1001a3a7
1000edbc:	1001a3a2 	.word	0x1001a3a2
1000edc0:	1000eb31 	.word	0x1000eb31
1000edc4:	1000fd71 	.word	0x1000fd71

1000edc8 <at_ble_adv_data_set>:
1000edc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000edca:	4684      	mov	ip, r0
1000edcc:	1c0f      	adds	r7, r1, #0
1000edce:	1c16      	adds	r6, r2, #0
1000edd0:	1c1c      	adds	r4, r3, #0
1000edd2:	2800      	cmp	r0, #0
1000edd4:	d102      	bne.n	1000eddc <at_ble_adv_data_set+0x14>
1000edd6:	20e2      	movs	r0, #226	; 0xe2
1000edd8:	2a00      	cmp	r2, #0
1000edda:	d02b      	beq.n	1000ee34 <at_ble_adv_data_set+0x6c>
1000eddc:	20cf      	movs	r0, #207	; 0xcf
1000edde:	2f1f      	cmp	r7, #31
1000ede0:	d828      	bhi.n	1000ee34 <at_ble_adv_data_set+0x6c>
1000ede2:	2c1f      	cmp	r4, #31
1000ede4:	d826      	bhi.n	1000ee34 <at_ble_adv_data_set+0x6c>
1000ede6:	4663      	mov	r3, ip
1000ede8:	2b00      	cmp	r3, #0
1000edea:	d00e      	beq.n	1000ee0a <at_ble_adv_data_set+0x42>
1000edec:	4812      	ldr	r0, [pc, #72]	; (1000ee38 <at_ble_adv_data_set+0x70>)
1000edee:	4d13      	ldr	r5, [pc, #76]	; (1000ee3c <at_ble_adv_data_set+0x74>)
1000edf0:	2f00      	cmp	r7, #0
1000edf2:	d104      	bne.n	1000edfe <at_ble_adv_data_set+0x36>
1000edf4:	1c39      	adds	r1, r7, #0
1000edf6:	221f      	movs	r2, #31
1000edf8:	4b11      	ldr	r3, [pc, #68]	; (1000ee40 <at_ble_adv_data_set+0x78>)
1000edfa:	4798      	blx	r3
1000edfc:	e003      	b.n	1000ee06 <at_ble_adv_data_set+0x3e>
1000edfe:	4661      	mov	r1, ip
1000ee00:	1c3a      	adds	r2, r7, #0
1000ee02:	4b10      	ldr	r3, [pc, #64]	; (1000ee44 <at_ble_adv_data_set+0x7c>)
1000ee04:	4798      	blx	r3
1000ee06:	3572      	adds	r5, #114	; 0x72
1000ee08:	702f      	strb	r7, [r5, #0]
1000ee0a:	1e30      	subs	r0, r6, #0
1000ee0c:	d012      	beq.n	1000ee34 <at_ble_adv_data_set+0x6c>
1000ee0e:	4d0b      	ldr	r5, [pc, #44]	; (1000ee3c <at_ble_adv_data_set+0x74>)
1000ee10:	480d      	ldr	r0, [pc, #52]	; (1000ee48 <at_ble_adv_data_set+0x80>)
1000ee12:	2c00      	cmp	r4, #0
1000ee14:	d107      	bne.n	1000ee26 <at_ble_adv_data_set+0x5e>
1000ee16:	1c21      	adds	r1, r4, #0
1000ee18:	221f      	movs	r2, #31
1000ee1a:	4b09      	ldr	r3, [pc, #36]	; (1000ee40 <at_ble_adv_data_set+0x78>)
1000ee1c:	3573      	adds	r5, #115	; 0x73
1000ee1e:	4798      	blx	r3
1000ee20:	702c      	strb	r4, [r5, #0]
1000ee22:	1c20      	adds	r0, r4, #0
1000ee24:	e006      	b.n	1000ee34 <at_ble_adv_data_set+0x6c>
1000ee26:	1c31      	adds	r1, r6, #0
1000ee28:	1c22      	adds	r2, r4, #0
1000ee2a:	4b06      	ldr	r3, [pc, #24]	; (1000ee44 <at_ble_adv_data_set+0x7c>)
1000ee2c:	4798      	blx	r3
1000ee2e:	2000      	movs	r0, #0
1000ee30:	3573      	adds	r5, #115	; 0x73
1000ee32:	702c      	strb	r4, [r5, #0]
1000ee34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000ee36:	46c0      	nop			; (mov r8, r8)
1000ee38:	1001a3d6 	.word	0x1001a3d6
1000ee3c:	1001a3a2 	.word	0x1001a3a2
1000ee40:	100155cd 	.word	0x100155cd
1000ee44:	100155bb 	.word	0x100155bb
1000ee48:	1001a3f5 	.word	0x1001a3f5

1000ee4c <at_ble_adv_start>:
1000ee4c:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ee4e:	b091      	sub	sp, #68	; 0x44
1000ee50:	1c1f      	adds	r7, r3, #0
1000ee52:	ab16      	add	r3, sp, #88	; 0x58
1000ee54:	881d      	ldrh	r5, [r3, #0]
1000ee56:	ab17      	add	r3, sp, #92	; 0x5c
1000ee58:	881b      	ldrh	r3, [r3, #0]
1000ee5a:	910d      	str	r1, [sp, #52]	; 0x34
1000ee5c:	930e      	str	r3, [sp, #56]	; 0x38
1000ee5e:	ab18      	add	r3, sp, #96	; 0x60
1000ee60:	781b      	ldrb	r3, [r3, #0]
1000ee62:	1c04      	adds	r4, r0, #0
1000ee64:	930f      	str	r3, [sp, #60]	; 0x3c
1000ee66:	4b42      	ldr	r3, [pc, #264]	; (1000ef70 <at_ble_adv_start+0x124>)
1000ee68:	1c16      	adds	r6, r2, #0
1000ee6a:	3373      	adds	r3, #115	; 0x73
1000ee6c:	781b      	ldrb	r3, [r3, #0]
1000ee6e:	20cf      	movs	r0, #207	; 0xcf
1000ee70:	930c      	str	r3, [sp, #48]	; 0x30
1000ee72:	2c01      	cmp	r4, #1
1000ee74:	d103      	bne.n	1000ee7e <at_ble_adv_start+0x32>
1000ee76:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1000ee78:	2b00      	cmp	r3, #0
1000ee7a:	d176      	bne.n	1000ef6a <at_ble_adv_start+0x11e>
1000ee7c:	e024      	b.n	1000eec8 <at_ble_adv_start+0x7c>
1000ee7e:	2c04      	cmp	r4, #4
1000ee80:	d873      	bhi.n	1000ef6a <at_ble_adv_start+0x11e>
1000ee82:	2380      	movs	r3, #128	; 0x80
1000ee84:	01db      	lsls	r3, r3, #7
1000ee86:	429d      	cmp	r5, r3
1000ee88:	d86f      	bhi.n	1000ef6a <at_ble_adv_start+0x11e>
1000ee8a:	2c00      	cmp	r4, #0
1000ee8c:	d102      	bne.n	1000ee94 <at_ble_adv_start+0x48>
1000ee8e:	2d1f      	cmp	r5, #31
1000ee90:	d96b      	bls.n	1000ef6a <at_ble_adv_start+0x11e>
1000ee92:	e003      	b.n	1000ee9c <at_ble_adv_start+0x50>
1000ee94:	2d9f      	cmp	r5, #159	; 0x9f
1000ee96:	d801      	bhi.n	1000ee9c <at_ble_adv_start+0x50>
1000ee98:	2c01      	cmp	r4, #1
1000ee9a:	d166      	bne.n	1000ef6a <at_ble_adv_start+0x11e>
1000ee9c:	2f00      	cmp	r7, #0
1000ee9e:	d009      	beq.n	1000eeb4 <at_ble_adv_start+0x68>
1000eea0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
1000eea2:	20cf      	movs	r0, #207	; 0xcf
1000eea4:	3b01      	subs	r3, #1
1000eea6:	2b01      	cmp	r3, #1
1000eea8:	d95f      	bls.n	1000ef6a <at_ble_adv_start+0x11e>
1000eeaa:	2c01      	cmp	r4, #1
1000eeac:	d102      	bne.n	1000eeb4 <at_ble_adv_start+0x68>
1000eeae:	2d00      	cmp	r5, #0
1000eeb0:	d100      	bne.n	1000eeb4 <at_ble_adv_start+0x68>
1000eeb2:	3520      	adds	r5, #32
1000eeb4:	4b2f      	ldr	r3, [pc, #188]	; (1000ef74 <at_ble_adv_start+0x128>)
1000eeb6:	4798      	blx	r3
1000eeb8:	1c01      	adds	r1, r0, #0
1000eeba:	2e00      	cmp	r6, #0
1000eebc:	d043      	beq.n	1000ef46 <at_ble_adv_start+0xfa>
1000eebe:	7833      	ldrb	r3, [r6, #0]
1000eec0:	1e60      	subs	r0, r4, #1
1000eec2:	2b00      	cmp	r3, #0
1000eec4:	d109      	bne.n	1000eeda <at_ble_adv_start+0x8e>
1000eec6:	e03b      	b.n	1000ef40 <at_ble_adv_start+0xf4>
1000eec8:	2380      	movs	r3, #128	; 0x80
1000eeca:	01db      	lsls	r3, r3, #7
1000eecc:	429d      	cmp	r5, r3
1000eece:	d84c      	bhi.n	1000ef6a <at_ble_adv_start+0x11e>
1000eed0:	2e00      	cmp	r6, #0
1000eed2:	d04a      	beq.n	1000ef6a <at_ble_adv_start+0x11e>
1000eed4:	2f00      	cmp	r7, #0
1000eed6:	d1e3      	bne.n	1000eea0 <at_ble_adv_start+0x54>
1000eed8:	e02b      	b.n	1000ef32 <at_ble_adv_start+0xe6>
1000eeda:	2301      	movs	r3, #1
1000eedc:	2803      	cmp	r0, #3
1000eede:	d93a      	bls.n	1000ef56 <at_ble_adv_start+0x10a>
1000eee0:	200d      	movs	r0, #13
1000eee2:	1c72      	adds	r2, r6, #1
1000eee4:	e002      	b.n	1000eeec <at_ble_adv_start+0xa0>
1000eee6:	200e      	movs	r0, #14
1000eee8:	1e32      	subs	r2, r6, #0
1000eeea:	d1fa      	bne.n	1000eee2 <at_ble_adv_start+0x96>
1000eeec:	4c20      	ldr	r4, [pc, #128]	; (1000ef70 <at_ble_adv_start+0x124>)
1000eeee:	3474      	adds	r4, #116	; 0x74
1000eef0:	7826      	ldrb	r6, [r4, #0]
1000eef2:	2407      	movs	r4, #7
1000eef4:	2e00      	cmp	r6, #0
1000eef6:	d000      	beq.n	1000eefa <at_ble_adv_start+0xae>
1000eef8:	1c34      	adds	r4, r6, #0
1000eefa:	9200      	str	r2, [sp, #0]
1000eefc:	9a0d      	ldr	r2, [sp, #52]	; 0x34
1000eefe:	9403      	str	r4, [sp, #12]
1000ef00:	9204      	str	r2, [sp, #16]
1000ef02:	4a1b      	ldr	r2, [pc, #108]	; (1000ef70 <at_ble_adv_start+0x124>)
1000ef04:	9501      	str	r5, [sp, #4]
1000ef06:	9502      	str	r5, [sp, #8]
1000ef08:	9705      	str	r7, [sp, #20]
1000ef0a:	3272      	adds	r2, #114	; 0x72
1000ef0c:	7812      	ldrb	r2, [r2, #0]
1000ef0e:	9c0e      	ldr	r4, [sp, #56]	; 0x38
1000ef10:	9206      	str	r2, [sp, #24]
1000ef12:	4a19      	ldr	r2, [pc, #100]	; (1000ef78 <at_ble_adv_start+0x12c>)
1000ef14:	9207      	str	r2, [sp, #28]
1000ef16:	9a0c      	ldr	r2, [sp, #48]	; 0x30
1000ef18:	9208      	str	r2, [sp, #32]
1000ef1a:	4a18      	ldr	r2, [pc, #96]	; (1000ef7c <at_ble_adv_start+0x130>)
1000ef1c:	9209      	str	r2, [sp, #36]	; 0x24
1000ef1e:	2264      	movs	r2, #100	; 0x64
1000ef20:	4362      	muls	r2, r4
1000ef22:	b292      	uxth	r2, r2
1000ef24:	920a      	str	r2, [sp, #40]	; 0x28
1000ef26:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
1000ef28:	4c15      	ldr	r4, [pc, #84]	; (1000ef80 <at_ble_adv_start+0x134>)
1000ef2a:	920b      	str	r2, [sp, #44]	; 0x2c
1000ef2c:	4a15      	ldr	r2, [pc, #84]	; (1000ef84 <at_ble_adv_start+0x138>)
1000ef2e:	47a0      	blx	r4
1000ef30:	e01b      	b.n	1000ef6a <at_ble_adv_start+0x11e>
1000ef32:	2d00      	cmp	r5, #0
1000ef34:	d1be      	bne.n	1000eeb4 <at_ble_adv_start+0x68>
1000ef36:	4b0f      	ldr	r3, [pc, #60]	; (1000ef74 <at_ble_adv_start+0x128>)
1000ef38:	4798      	blx	r3
1000ef3a:	2520      	movs	r5, #32
1000ef3c:	1c01      	adds	r1, r0, #0
1000ef3e:	e7be      	b.n	1000eebe <at_ble_adv_start+0x72>
1000ef40:	2803      	cmp	r0, #3
1000ef42:	d8cd      	bhi.n	1000eee0 <at_ble_adv_start+0x94>
1000ef44:	e006      	b.n	1000ef54 <at_ble_adv_start+0x108>
1000ef46:	1e60      	subs	r0, r4, #1
1000ef48:	2803      	cmp	r0, #3
1000ef4a:	d903      	bls.n	1000ef54 <at_ble_adv_start+0x108>
1000ef4c:	1c33      	adds	r3, r6, #0
1000ef4e:	200d      	movs	r0, #13
1000ef50:	1c32      	adds	r2, r6, #0
1000ef52:	e7cb      	b.n	1000eeec <at_ble_adv_start+0xa0>
1000ef54:	2300      	movs	r3, #0
1000ef56:	f003 fc8f 	bl	10012878 <__gnu_thumb1_case_sqi>
1000ef5a:	06c6      	.short	0x06c6
1000ef5c:	0204      	.short	0x0204
1000ef5e:	200f      	movs	r0, #15
1000ef60:	e7c2      	b.n	1000eee8 <at_ble_adv_start+0x9c>
1000ef62:	2200      	movs	r2, #0
1000ef64:	920c      	str	r2, [sp, #48]	; 0x30
1000ef66:	200c      	movs	r0, #12
1000ef68:	e7be      	b.n	1000eee8 <at_ble_adv_start+0x9c>
1000ef6a:	b011      	add	sp, #68	; 0x44
1000ef6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000ef6e:	46c0      	nop			; (mov r8, r8)
1000ef70:	1001a3a2 	.word	0x1001a3a2
1000ef74:	10010e01 	.word	0x10010e01
1000ef78:	1001a3d6 	.word	0x1001a3d6
1000ef7c:	1001a3f5 	.word	0x1001a3f5
1000ef80:	10010ce1 	.word	0x10010ce1
1000ef84:	00003a98 	.word	0x00003a98

1000ef88 <at_ble_adv_stop>:
1000ef88:	b508      	push	{r3, lr}
1000ef8a:	4b01      	ldr	r3, [pc, #4]	; (1000ef90 <at_ble_adv_stop+0x8>)
1000ef8c:	4798      	blx	r3
1000ef8e:	bd08      	pop	{r3, pc}
1000ef90:	10010b0d 	.word	0x10010b0d

1000ef94 <at_ble_scan_stop>:
1000ef94:	b510      	push	{r4, lr}
1000ef96:	4b05      	ldr	r3, [pc, #20]	; (1000efac <at_ble_scan_stop+0x18>)
1000ef98:	4798      	blx	r3
1000ef9a:	1e04      	subs	r4, r0, #0
1000ef9c:	d103      	bne.n	1000efa6 <at_ble_scan_stop+0x12>
1000ef9e:	20d1      	movs	r0, #209	; 0xd1
1000efa0:	4b03      	ldr	r3, [pc, #12]	; (1000efb0 <at_ble_scan_stop+0x1c>)
1000efa2:	0100      	lsls	r0, r0, #4
1000efa4:	4798      	blx	r3
1000efa6:	1c20      	adds	r0, r4, #0
1000efa8:	bd10      	pop	{r4, pc}
1000efaa:	46c0      	nop			; (mov r8, r8)
1000efac:	10010b0d 	.word	0x10010b0d
1000efb0:	1000ea41 	.word	0x1000ea41

1000efb4 <at_ble_disconnect>:
1000efb4:	b538      	push	{r3, r4, r5, lr}
1000efb6:	1c04      	adds	r4, r0, #0
1000efb8:	4b04      	ldr	r3, [pc, #16]	; (1000efcc <at_ble_disconnect+0x18>)
1000efba:	1c08      	adds	r0, r1, #0
1000efbc:	1c21      	adds	r1, r4, #0
1000efbe:	4798      	blx	r3
1000efc0:	1c05      	adds	r5, r0, #0
1000efc2:	4b03      	ldr	r3, [pc, #12]	; (1000efd0 <at_ble_disconnect+0x1c>)
1000efc4:	1c20      	adds	r0, r4, #0
1000efc6:	4798      	blx	r3
1000efc8:	1c28      	adds	r0, r5, #0
1000efca:	bd38      	pop	{r3, r4, r5, pc}
1000efcc:	10010185 	.word	0x10010185
1000efd0:	1000ea85 	.word	0x1000ea85

1000efd4 <at_ble_conn_update_reply>:
1000efd4:	b510      	push	{r4, lr}
1000efd6:	4c01      	ldr	r4, [pc, #4]	; (1000efdc <at_ble_conn_update_reply+0x8>)
1000efd8:	47a0      	blx	r4
1000efda:	bd10      	pop	{r4, pc}
1000efdc:	10010675 	.word	0x10010675

1000efe0 <at_ble_random_address_resolve>:
1000efe0:	b510      	push	{r4, lr}
1000efe2:	23cf      	movs	r3, #207	; 0xcf
1000efe4:	2800      	cmp	r0, #0
1000efe6:	d00a      	beq.n	1000effe <at_ble_random_address_resolve+0x1e>
1000efe8:	2900      	cmp	r1, #0
1000efea:	d008      	beq.n	1000effe <at_ble_random_address_resolve+0x1e>
1000efec:	2a00      	cmp	r2, #0
1000efee:	d006      	beq.n	1000effe <at_ble_random_address_resolve+0x1e>
1000eff0:	780c      	ldrb	r4, [r1, #0]
1000eff2:	2c02      	cmp	r4, #2
1000eff4:	d103      	bne.n	1000effe <at_ble_random_address_resolve+0x1e>
1000eff6:	4b03      	ldr	r3, [pc, #12]	; (1000f004 <at_ble_random_address_resolve+0x24>)
1000eff8:	3101      	adds	r1, #1
1000effa:	4798      	blx	r3
1000effc:	2300      	movs	r3, #0
1000effe:	1c18      	adds	r0, r3, #0
1000f000:	bd10      	pop	{r4, pc}
1000f002:	46c0      	nop			; (mov r8, r8)
1000f004:	10010ea1 	.word	0x10010ea1

1000f008 <at_ble_uuid_type2len>:
1000f008:	23cf      	movs	r3, #207	; 0xcf
1000f00a:	2802      	cmp	r0, #2
1000f00c:	d801      	bhi.n	1000f012 <at_ble_uuid_type2len+0xa>
1000f00e:	4b02      	ldr	r3, [pc, #8]	; (1000f018 <at_ble_uuid_type2len+0x10>)
1000f010:	5c1b      	ldrb	r3, [r3, r0]
1000f012:	1c18      	adds	r0, r3, #0
1000f014:	4770      	bx	lr
1000f016:	46c0      	nop			; (mov r8, r8)
1000f018:	100176ca 	.word	0x100176ca

1000f01c <at_ble_uuid_len2type>:
1000f01c:	1e83      	subs	r3, r0, #2
1000f01e:	b2db      	uxtb	r3, r3
1000f020:	2003      	movs	r0, #3
1000f022:	2b0e      	cmp	r3, #14
1000f024:	d801      	bhi.n	1000f02a <at_ble_uuid_len2type+0xe>
1000f026:	4a01      	ldr	r2, [pc, #4]	; (1000f02c <at_ble_uuid_len2type+0x10>)
1000f028:	5cd0      	ldrb	r0, [r2, r3]
1000f02a:	4770      	bx	lr
1000f02c:	100176cd 	.word	0x100176cd

1000f030 <init_gatt_client_module>:
1000f030:	2200      	movs	r2, #0
1000f032:	4b01      	ldr	r3, [pc, #4]	; (1000f038 <init_gatt_client_module+0x8>)
1000f034:	801a      	strh	r2, [r3, #0]
1000f036:	4770      	bx	lr
1000f038:	1001937c 	.word	0x1001937c

1000f03c <db_searchATT>:
1000f03c:	b570      	push	{r4, r5, r6, lr}
1000f03e:	1c05      	adds	r5, r0, #0
1000f040:	2400      	movs	r4, #0
1000f042:	4b0c      	ldr	r3, [pc, #48]	; (1000f074 <db_searchATT+0x38>)
1000f044:	6819      	ldr	r1, [r3, #0]
1000f046:	4b0c      	ldr	r3, [pc, #48]	; (1000f078 <db_searchATT+0x3c>)
1000f048:	681e      	ldr	r6, [r3, #0]
1000f04a:	428c      	cmp	r4, r1
1000f04c:	dc10      	bgt.n	1000f070 <db_searchATT+0x34>
1000f04e:	200c      	movs	r0, #12
1000f050:	1863      	adds	r3, r4, r1
1000f052:	0fda      	lsrs	r2, r3, #31
1000f054:	18d3      	adds	r3, r2, r3
1000f056:	1c02      	adds	r2, r0, #0
1000f058:	105b      	asrs	r3, r3, #1
1000f05a:	435a      	muls	r2, r3
1000f05c:	18b0      	adds	r0, r6, r2
1000f05e:	8802      	ldrh	r2, [r0, #0]
1000f060:	42aa      	cmp	r2, r5
1000f062:	d201      	bcs.n	1000f068 <db_searchATT+0x2c>
1000f064:	1e59      	subs	r1, r3, #1
1000f066:	e7f0      	b.n	1000f04a <db_searchATT+0xe>
1000f068:	42aa      	cmp	r2, r5
1000f06a:	d902      	bls.n	1000f072 <db_searchATT+0x36>
1000f06c:	1c5c      	adds	r4, r3, #1
1000f06e:	e7ec      	b.n	1000f04a <db_searchATT+0xe>
1000f070:	2000      	movs	r0, #0
1000f072:	bd70      	pop	{r4, r5, r6, pc}
1000f074:	10019390 	.word	0x10019390
1000f078:	10019388 	.word	0x10019388

1000f07c <att_permissions>:
1000f07c:	b530      	push	{r4, r5, lr}
1000f07e:	2403      	movs	r4, #3
1000f080:	1c05      	adds	r5, r0, #0
1000f082:	2301      	movs	r3, #1
1000f084:	4025      	ands	r5, r4
1000f086:	42a5      	cmp	r5, r4
1000f088:	d009      	beq.n	1000f09e <att_permissions+0x22>
1000f08a:	1c23      	adds	r3, r4, #0
1000f08c:	1924      	adds	r4, r4, r4
1000f08e:	4220      	tst	r0, r4
1000f090:	d105      	bne.n	1000f09e <att_permissions+0x22>
1000f092:	3b02      	subs	r3, #2
1000f094:	4218      	tst	r0, r3
1000f096:	d102      	bne.n	1000f09e <att_permissions+0x22>
1000f098:	1e4b      	subs	r3, r1, #1
1000f09a:	4199      	sbcs	r1, r3
1000f09c:	b28b      	uxth	r3, r1
1000f09e:	2130      	movs	r1, #48	; 0x30
1000f0a0:	4001      	ands	r1, r0
1000f0a2:	2930      	cmp	r1, #48	; 0x30
1000f0a4:	d007      	beq.n	1000f0b6 <att_permissions+0x3a>
1000f0a6:	0641      	lsls	r1, r0, #25
1000f0a8:	d401      	bmi.n	1000f0ae <att_permissions+0x32>
1000f0aa:	0681      	lsls	r1, r0, #26
1000f0ac:	d501      	bpl.n	1000f0b2 <att_permissions+0x36>
1000f0ae:	4807      	ldr	r0, [pc, #28]	; (1000f0cc <att_permissions+0x50>)
1000f0b0:	e009      	b.n	1000f0c6 <att_permissions+0x4a>
1000f0b2:	06c1      	lsls	r1, r0, #27
1000f0b4:	d501      	bpl.n	1000f0ba <att_permissions+0x3e>
1000f0b6:	4806      	ldr	r0, [pc, #24]	; (1000f0d0 <att_permissions+0x54>)
1000f0b8:	e005      	b.n	1000f0c6 <att_permissions+0x4a>
1000f0ba:	2a00      	cmp	r2, #0
1000f0bc:	d001      	beq.n	1000f0c2 <att_permissions+0x46>
1000f0be:	2204      	movs	r2, #4
1000f0c0:	4313      	orrs	r3, r2
1000f0c2:	2080      	movs	r0, #128	; 0x80
1000f0c4:	0180      	lsls	r0, r0, #6
1000f0c6:	4318      	orrs	r0, r3
1000f0c8:	bd30      	pop	{r4, r5, pc}
1000f0ca:	46c0      	nop			; (mov r8, r8)
1000f0cc:	0000200c 	.word	0x0000200c
1000f0d0:	00002004 	.word	0x00002004

1000f0d4 <char_permissions>:
1000f0d4:	b530      	push	{r4, r5, lr}
1000f0d6:	2300      	movs	r3, #0
1000f0d8:	0784      	lsls	r4, r0, #30
1000f0da:	d503      	bpl.n	1000f0e4 <char_permissions+0x10>
1000f0dc:	3301      	adds	r3, #1
1000f0de:	4219      	tst	r1, r3
1000f0e0:	d100      	bne.n	1000f0e4 <char_permissions+0x10>
1000f0e2:	3302      	adds	r3, #2
1000f0e4:	0704      	lsls	r4, r0, #28
1000f0e6:	d508      	bpl.n	1000f0fa <char_permissions+0x26>
1000f0e8:	06cc      	lsls	r4, r1, #27
1000f0ea:	d501      	bpl.n	1000f0f0 <char_permissions+0x1c>
1000f0ec:	2404      	movs	r4, #4
1000f0ee:	e000      	b.n	1000f0f2 <char_permissions+0x1e>
1000f0f0:	240c      	movs	r4, #12
1000f0f2:	4323      	orrs	r3, r4
1000f0f4:	2480      	movs	r4, #128	; 0x80
1000f0f6:	01a4      	lsls	r4, r4, #6
1000f0f8:	4323      	orrs	r3, r4
1000f0fa:	0684      	lsls	r4, r0, #26
1000f0fc:	d506      	bpl.n	1000f10c <char_permissions+0x38>
1000f0fe:	2406      	movs	r4, #6
1000f100:	4221      	tst	r1, r4
1000f102:	d101      	bne.n	1000f108 <char_permissions+0x34>
1000f104:	340a      	adds	r4, #10
1000f106:	e000      	b.n	1000f10a <char_permissions+0x36>
1000f108:	2430      	movs	r4, #48	; 0x30
1000f10a:	4323      	orrs	r3, r4
1000f10c:	06c4      	lsls	r4, r0, #27
1000f10e:	d506      	bpl.n	1000f11e <char_permissions+0x4a>
1000f110:	2406      	movs	r4, #6
1000f112:	4221      	tst	r1, r4
1000f114:	d101      	bne.n	1000f11a <char_permissions+0x46>
1000f116:	343a      	adds	r4, #58	; 0x3a
1000f118:	e000      	b.n	1000f11c <char_permissions+0x48>
1000f11a:	24c0      	movs	r4, #192	; 0xc0
1000f11c:	4323      	orrs	r3, r4
1000f11e:	2480      	movs	r4, #128	; 0x80
1000f120:	0064      	lsls	r4, r4, #1
1000f122:	4220      	tst	r0, r4
1000f124:	d000      	beq.n	1000f128 <char_permissions+0x54>
1000f126:	4323      	orrs	r3, r4
1000f128:	07c4      	lsls	r4, r0, #31
1000f12a:	d502      	bpl.n	1000f132 <char_permissions+0x5e>
1000f12c:	2480      	movs	r4, #128	; 0x80
1000f12e:	00a4      	lsls	r4, r4, #2
1000f130:	4323      	orrs	r3, r4
1000f132:	2404      	movs	r4, #4
1000f134:	4220      	tst	r0, r4
1000f136:	d006      	beq.n	1000f146 <char_permissions+0x72>
1000f138:	06cd      	lsls	r5, r1, #27
1000f13a:	d400      	bmi.n	1000f13e <char_permissions+0x6a>
1000f13c:	240c      	movs	r4, #12
1000f13e:	4323      	orrs	r3, r4
1000f140:	2480      	movs	r4, #128	; 0x80
1000f142:	0124      	lsls	r4, r4, #4
1000f144:	4323      	orrs	r3, r4
1000f146:	0644      	lsls	r4, r0, #25
1000f148:	d501      	bpl.n	1000f14e <char_permissions+0x7a>
1000f14a:	4c08      	ldr	r4, [pc, #32]	; (1000f16c <char_permissions+0x98>)
1000f14c:	4323      	orrs	r3, r4
1000f14e:	0600      	lsls	r0, r0, #24
1000f150:	d507      	bpl.n	1000f162 <char_permissions+0x8e>
1000f152:	2004      	movs	r0, #4
1000f154:	06c9      	lsls	r1, r1, #27
1000f156:	d400      	bmi.n	1000f15a <char_permissions+0x86>
1000f158:	200c      	movs	r0, #12
1000f15a:	4303      	orrs	r3, r0
1000f15c:	2084      	movs	r0, #132	; 0x84
1000f15e:	0180      	lsls	r0, r0, #6
1000f160:	4303      	orrs	r3, r0
1000f162:	0390      	lsls	r0, r2, #14
1000f164:	4303      	orrs	r3, r0
1000f166:	b298      	uxth	r0, r3
1000f168:	bd30      	pop	{r4, r5, pc}
1000f16a:	46c0      	nop			; (mov r8, r8)
1000f16c:	00001004 	.word	0x00001004

1000f170 <presentation_format_define>:
1000f170:	b507      	push	{r0, r1, r2, lr}
1000f172:	466a      	mov	r2, sp
1000f174:	780b      	ldrb	r3, [r1, #0]
1000f176:	7013      	strb	r3, [r2, #0]
1000f178:	784b      	ldrb	r3, [r1, #1]
1000f17a:	7053      	strb	r3, [r2, #1]
1000f17c:	884b      	ldrh	r3, [r1, #2]
1000f17e:	7093      	strb	r3, [r2, #2]
1000f180:	0a1b      	lsrs	r3, r3, #8
1000f182:	70d3      	strb	r3, [r2, #3]
1000f184:	790b      	ldrb	r3, [r1, #4]
1000f186:	7113      	strb	r3, [r2, #4]
1000f188:	88cb      	ldrh	r3, [r1, #6]
1000f18a:	2107      	movs	r1, #7
1000f18c:	7153      	strb	r3, [r2, #5]
1000f18e:	0a1b      	lsrs	r3, r3, #8
1000f190:	7193      	strb	r3, [r2, #6]
1000f192:	4b01      	ldr	r3, [pc, #4]	; (1000f198 <presentation_format_define+0x28>)
1000f194:	4798      	blx	r3
1000f196:	bd0e      	pop	{r1, r2, r3, pc}
1000f198:	10011505 	.word	0x10011505

1000f19c <db_addATT>:
1000f19c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000f19e:	4c29      	ldr	r4, [pc, #164]	; (1000f244 <db_addATT+0xa8>)
1000f1a0:	1c1d      	adds	r5, r3, #0
1000f1a2:	6823      	ldr	r3, [r4, #0]
1000f1a4:	9001      	str	r0, [sp, #4]
1000f1a6:	26d3      	movs	r6, #211	; 0xd3
1000f1a8:	2b00      	cmp	r3, #0
1000f1aa:	d048      	beq.n	1000f23e <db_addATT+0xa2>
1000f1ac:	1c1e      	adds	r6, r3, #0
1000f1ae:	3e0c      	subs	r6, #12
1000f1b0:	6026      	str	r6, [r4, #0]
1000f1b2:	2900      	cmp	r1, #0
1000f1b4:	d005      	beq.n	1000f1c2 <db_addATT+0x26>
1000f1b6:	4f24      	ldr	r7, [pc, #144]	; (1000f248 <db_addATT+0xac>)
1000f1b8:	46bc      	mov	ip, r7
1000f1ba:	4660      	mov	r0, ip
1000f1bc:	683f      	ldr	r7, [r7, #0]
1000f1be:	18bf      	adds	r7, r7, r2
1000f1c0:	6007      	str	r7, [r0, #0]
1000f1c2:	4821      	ldr	r0, [pc, #132]	; (1000f248 <db_addATT+0xac>)
1000f1c4:	6807      	ldr	r7, [r0, #0]
1000f1c6:	4684      	mov	ip, r0
1000f1c8:	42be      	cmp	r6, r7
1000f1ca:	d932      	bls.n	1000f232 <db_addATT+0x96>
1000f1cc:	4668      	mov	r0, sp
1000f1ce:	8880      	ldrh	r0, [r0, #4]
1000f1d0:	3b0c      	subs	r3, #12
1000f1d2:	8018      	strh	r0, [r3, #0]
1000f1d4:	6823      	ldr	r3, [r4, #0]
1000f1d6:	2900      	cmp	r1, #0
1000f1d8:	d009      	beq.n	1000f1ee <db_addATT+0x52>
1000f1da:	2a00      	cmp	r2, #0
1000f1dc:	d007      	beq.n	1000f1ee <db_addATT+0x52>
1000f1de:	4660      	mov	r0, ip
1000f1e0:	6800      	ldr	r0, [r0, #0]
1000f1e2:	809a      	strh	r2, [r3, #4]
1000f1e4:	1a80      	subs	r0, r0, r2
1000f1e6:	6098      	str	r0, [r3, #8]
1000f1e8:	4b18      	ldr	r3, [pc, #96]	; (1000f24c <db_addATT+0xb0>)
1000f1ea:	4798      	blx	r3
1000f1ec:	e002      	b.n	1000f1f4 <db_addATT+0x58>
1000f1ee:	2100      	movs	r1, #0
1000f1f0:	809a      	strh	r2, [r3, #4]
1000f1f2:	6099      	str	r1, [r3, #8]
1000f1f4:	2300      	movs	r3, #0
1000f1f6:	6822      	ldr	r2, [r4, #0]
1000f1f8:	7093      	strb	r3, [r2, #2]
1000f1fa:	3303      	adds	r3, #3
1000f1fc:	402b      	ands	r3, r5
1000f1fe:	2b03      	cmp	r3, #3
1000f200:	d001      	beq.n	1000f206 <db_addATT+0x6a>
1000f202:	076b      	lsls	r3, r5, #29
1000f204:	d504      	bpl.n	1000f210 <db_addATT+0x74>
1000f206:	2101      	movs	r1, #1
1000f208:	6822      	ldr	r2, [r4, #0]
1000f20a:	7893      	ldrb	r3, [r2, #2]
1000f20c:	430b      	orrs	r3, r1
1000f20e:	7093      	strb	r3, [r2, #2]
1000f210:	2330      	movs	r3, #48	; 0x30
1000f212:	402b      	ands	r3, r5
1000f214:	2b30      	cmp	r3, #48	; 0x30
1000f216:	d001      	beq.n	1000f21c <db_addATT+0x80>
1000f218:	066b      	lsls	r3, r5, #25
1000f21a:	d504      	bpl.n	1000f226 <db_addATT+0x8a>
1000f21c:	2102      	movs	r1, #2
1000f21e:	6822      	ldr	r2, [r4, #0]
1000f220:	7893      	ldrb	r3, [r2, #2]
1000f222:	430b      	orrs	r3, r1
1000f224:	7093      	strb	r3, [r2, #2]
1000f226:	4a0a      	ldr	r2, [pc, #40]	; (1000f250 <db_addATT+0xb4>)
1000f228:	2600      	movs	r6, #0
1000f22a:	6813      	ldr	r3, [r2, #0]
1000f22c:	3301      	adds	r3, #1
1000f22e:	6013      	str	r3, [r2, #0]
1000f230:	e005      	b.n	1000f23e <db_addATT+0xa2>
1000f232:	6023      	str	r3, [r4, #0]
1000f234:	2611      	movs	r6, #17
1000f236:	2900      	cmp	r1, #0
1000f238:	d001      	beq.n	1000f23e <db_addATT+0xa2>
1000f23a:	1aba      	subs	r2, r7, r2
1000f23c:	6002      	str	r2, [r0, #0]
1000f23e:	1c30      	adds	r0, r6, #0
1000f240:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000f242:	46c0      	nop			; (mov r8, r8)
1000f244:	10019388 	.word	0x10019388
1000f248:	1001938c 	.word	0x1001938c
1000f24c:	100155bb 	.word	0x100155bb
1000f250:	10019390 	.word	0x10019390

1000f254 <user_description_define>:
1000f254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1000f256:	1c05      	adds	r5, r0, #0
1000f258:	20cf      	movs	r0, #207	; 0xcf
1000f25a:	2a00      	cmp	r2, #0
1000f25c:	d01c      	beq.n	1000f298 <user_description_define+0x44>
1000f25e:	1c14      	adds	r4, r2, #0
1000f260:	2203      	movs	r2, #3
1000f262:	1c1e      	adds	r6, r3, #0
1000f264:	400a      	ands	r2, r1
1000f266:	1c0b      	adds	r3, r1, #0
1000f268:	3a03      	subs	r2, #3
1000f26a:	4251      	negs	r1, r2
1000f26c:	4151      	adcs	r1, r2
1000f26e:	075a      	lsls	r2, r3, #29
1000f270:	0fd2      	lsrs	r2, r2, #31
1000f272:	430a      	orrs	r2, r1
1000f274:	03d2      	lsls	r2, r2, #15
1000f276:	4f09      	ldr	r7, [pc, #36]	; (1000f29c <user_description_define+0x48>)
1000f278:	1c28      	adds	r0, r5, #0
1000f27a:	2a00      	cmp	r2, #0
1000f27c:	d003      	beq.n	1000f286 <user_description_define+0x32>
1000f27e:	1c21      	adds	r1, r4, #0
1000f280:	1c32      	adds	r2, r6, #0
1000f282:	47b8      	blx	r7
1000f284:	e008      	b.n	1000f298 <user_description_define+0x44>
1000f286:	1c11      	adds	r1, r2, #0
1000f288:	47b8      	blx	r7
1000f28a:	2800      	cmp	r0, #0
1000f28c:	d104      	bne.n	1000f298 <user_description_define+0x44>
1000f28e:	1c28      	adds	r0, r5, #0
1000f290:	1c31      	adds	r1, r6, #0
1000f292:	1c22      	adds	r2, r4, #0
1000f294:	4b02      	ldr	r3, [pc, #8]	; (1000f2a0 <user_description_define+0x4c>)
1000f296:	4798      	blx	r3
1000f298:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1000f29a:	46c0      	nop			; (mov r8, r8)
1000f29c:	1000f19d 	.word	0x1000f19d
1000f2a0:	10011505 	.word	0x10011505

1000f2a4 <at_ble_read_authorize_reply.part.1>:
1000f2a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
1000f2a6:	4b09      	ldr	r3, [pc, #36]	; (1000f2cc <at_ble_read_authorize_reply.part.1+0x28>)
1000f2a8:	1c05      	adds	r5, r0, #0
1000f2aa:	1c08      	adds	r0, r1, #0
1000f2ac:	1c0c      	adds	r4, r1, #0
1000f2ae:	4798      	blx	r3
1000f2b0:	2800      	cmp	r0, #0
1000f2b2:	d009      	beq.n	1000f2c8 <at_ble_read_authorize_reply.part.1+0x24>
1000f2b4:	6882      	ldr	r2, [r0, #8]
1000f2b6:	2a00      	cmp	r2, #0
1000f2b8:	d006      	beq.n	1000f2c8 <at_ble_read_authorize_reply.part.1+0x24>
1000f2ba:	8883      	ldrh	r3, [r0, #4]
1000f2bc:	1c29      	adds	r1, r5, #0
1000f2be:	9200      	str	r2, [sp, #0]
1000f2c0:	1c20      	adds	r0, r4, #0
1000f2c2:	2200      	movs	r2, #0
1000f2c4:	4c02      	ldr	r4, [pc, #8]	; (1000f2d0 <at_ble_read_authorize_reply.part.1+0x2c>)
1000f2c6:	47a0      	blx	r4
1000f2c8:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
1000f2ca:	46c0      	nop			; (mov r8, r8)
1000f2cc:	1000f03d 	.word	0x1000f03d
1000f2d0:	10010f9d 	.word	0x10010f9d

1000f2d4 <internal_at_ble_service_define>:
1000f2d4:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f2d6:	b08b      	sub	sp, #44	; 0x2c
1000f2d8:	9306      	str	r3, [sp, #24]
1000f2da:	ab10      	add	r3, sp, #64	; 0x40
1000f2dc:	9202      	str	r2, [sp, #8]
1000f2de:	cb04      	ldmia	r3!, {r2}
1000f2e0:	1c05      	adds	r5, r0, #0
1000f2e2:	881b      	ldrh	r3, [r3, #0]
1000f2e4:	9105      	str	r1, [sp, #20]
1000f2e6:	9303      	str	r3, [sp, #12]
1000f2e8:	ab12      	add	r3, sp, #72	; 0x48
1000f2ea:	781b      	ldrb	r3, [r3, #0]
1000f2ec:	20cf      	movs	r0, #207	; 0xcf
1000f2ee:	9304      	str	r3, [sp, #16]
1000f2f0:	2d00      	cmp	r5, #0
1000f2f2:	d100      	bne.n	1000f2f6 <internal_at_ble_service_define+0x22>
1000f2f4:	e1ca      	b.n	1000f68c <internal_at_ble_service_define+0x3b8>
1000f2f6:	2900      	cmp	r1, #0
1000f2f8:	d100      	bne.n	1000f2fc <internal_at_ble_service_define+0x28>
1000f2fa:	e1c7      	b.n	1000f68c <internal_at_ble_service_define+0x3b8>
1000f2fc:	2a00      	cmp	r2, #0
1000f2fe:	d100      	bne.n	1000f302 <internal_at_ble_service_define+0x2e>
1000f300:	e1c4      	b.n	1000f68c <internal_at_ble_service_define+0x3b8>
1000f302:	9b03      	ldr	r3, [sp, #12]
1000f304:	2b00      	cmp	r3, #0
1000f306:	d100      	bne.n	1000f30a <internal_at_ble_service_define+0x36>
1000f308:	e1c0      	b.n	1000f68c <internal_at_ble_service_define+0x3b8>
1000f30a:	4bc9      	ldr	r3, [pc, #804]	; (1000f630 <internal_at_ble_service_define+0x35c>)
1000f30c:	3004      	adds	r0, #4
1000f30e:	681e      	ldr	r6, [r3, #0]
1000f310:	2e00      	cmp	r6, #0
1000f312:	d100      	bne.n	1000f316 <internal_at_ble_service_define+0x42>
1000f314:	e1ba      	b.n	1000f68c <internal_at_ble_service_define+0x3b8>
1000f316:	2400      	movs	r4, #0
1000f318:	4bc6      	ldr	r3, [pc, #792]	; (1000f634 <internal_at_ble_service_define+0x360>)
1000f31a:	8034      	strh	r4, [r6, #0]
1000f31c:	881b      	ldrh	r3, [r3, #0]
1000f31e:	1db7      	adds	r7, r6, #6
1000f320:	1c21      	adds	r1, r4, #0
1000f322:	2210      	movs	r2, #16
1000f324:	8073      	strh	r3, [r6, #2]
1000f326:	1c38      	adds	r0, r7, #0
1000f328:	4bc3      	ldr	r3, [pc, #780]	; (1000f638 <internal_at_ble_service_define+0x364>)
1000f32a:	4798      	blx	r3
1000f32c:	7828      	ldrb	r0, [r5, #0]
1000f32e:	4bc3      	ldr	r3, [pc, #780]	; (1000f63c <internal_at_ble_service_define+0x368>)
1000f330:	4798      	blx	r3
1000f332:	1c69      	adds	r1, r5, #1
1000f334:	1c02      	adds	r2, r0, #0
1000f336:	4bc2      	ldr	r3, [pc, #776]	; (1000f640 <internal_at_ble_service_define+0x36c>)
1000f338:	1c38      	adds	r0, r7, #0
1000f33a:	4798      	blx	r3
1000f33c:	2204      	movs	r2, #4
1000f33e:	782b      	ldrb	r3, [r5, #0]
1000f340:	9d02      	ldr	r5, [sp, #8]
1000f342:	011b      	lsls	r3, r3, #4
1000f344:	4313      	orrs	r3, r2
1000f346:	9a04      	ldr	r2, [sp, #16]
1000f348:	7174      	strb	r4, [r6, #5]
1000f34a:	0192      	lsls	r2, r2, #6
1000f34c:	4313      	orrs	r3, r2
1000f34e:	7133      	strb	r3, [r6, #4]
1000f350:	2316      	movs	r3, #22
1000f352:	9a06      	ldr	r2, [sp, #24]
1000f354:	3512      	adds	r5, #18
1000f356:	4353      	muls	r3, r2
1000f358:	9a02      	ldr	r2, [sp, #8]
1000f35a:	3312      	adds	r3, #18
1000f35c:	18d7      	adds	r7, r2, r3
1000f35e:	42bd      	cmp	r5, r7
1000f360:	d00f      	beq.n	1000f382 <internal_at_ble_service_define+0xae>
1000f362:	4bb8      	ldr	r3, [pc, #736]	; (1000f644 <internal_at_ble_service_define+0x370>)
1000f364:	8829      	ldrh	r1, [r5, #0]
1000f366:	9300      	str	r3, [sp, #0]
1000f368:	230e      	movs	r3, #14
1000f36a:	aa06      	add	r2, sp, #24
1000f36c:	189b      	adds	r3, r3, r2
1000f36e:	9301      	str	r3, [sp, #4]
1000f370:	4cb5      	ldr	r4, [pc, #724]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f372:	1c30      	adds	r0, r6, #0
1000f374:	2201      	movs	r2, #1
1000f376:	2302      	movs	r3, #2
1000f378:	47a0      	blx	r4
1000f37a:	3516      	adds	r5, #22
1000f37c:	1e04      	subs	r4, r0, #0
1000f37e:	d0ee      	beq.n	1000f35e <internal_at_ble_service_define+0x8a>
1000f380:	e183      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f382:	9f10      	ldr	r7, [sp, #64]	; 0x40
1000f384:	2300      	movs	r3, #0
1000f386:	3714      	adds	r7, #20
1000f388:	1c3d      	adds	r5, r7, #0
1000f38a:	9302      	str	r3, [sp, #8]
1000f38c:	9b02      	ldr	r3, [sp, #8]
1000f38e:	9a03      	ldr	r2, [sp, #12]
1000f390:	4293      	cmp	r3, r2
1000f392:	db00      	blt.n	1000f396 <internal_at_ble_service_define+0xc2>
1000f394:	e0bf      	b.n	1000f516 <internal_at_ble_service_define+0x242>
1000f396:	4bad      	ldr	r3, [pc, #692]	; (1000f64c <internal_at_ble_service_define+0x378>)
1000f398:	aa06      	add	r2, sp, #24
1000f39a:	9300      	str	r3, [sp, #0]
1000f39c:	230e      	movs	r3, #14
1000f39e:	189b      	adds	r3, r3, r2
1000f3a0:	9301      	str	r3, [sp, #4]
1000f3a2:	4ca9      	ldr	r4, [pc, #676]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f3a4:	1c30      	adds	r0, r6, #0
1000f3a6:	2104      	movs	r1, #4
1000f3a8:	2201      	movs	r2, #1
1000f3aa:	2302      	movs	r3, #2
1000f3ac:	47a0      	blx	r4
1000f3ae:	1e04      	subs	r4, r0, #0
1000f3b0:	d000      	beq.n	1000f3b4 <internal_at_ble_service_define+0xe0>
1000f3b2:	e16a      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f3b4:	1c2b      	adds	r3, r5, #0
1000f3b6:	3b12      	subs	r3, #18
1000f3b8:	7b2c      	ldrb	r4, [r5, #12]
1000f3ba:	781b      	ldrb	r3, [r3, #0]
1000f3bc:	1c21      	adds	r1, r4, #0
1000f3be:	1c1a      	adds	r2, r3, #0
1000f3c0:	9304      	str	r3, [sp, #16]
1000f3c2:	8828      	ldrh	r0, [r5, #0]
1000f3c4:	4ba2      	ldr	r3, [pc, #648]	; (1000f650 <internal_at_ble_service_define+0x37c>)
1000f3c6:	4798      	blx	r3
1000f3c8:	2303      	movs	r3, #3
1000f3ca:	4023      	ands	r3, r4
1000f3cc:	3b03      	subs	r3, #3
1000f3ce:	4259      	negs	r1, r3
1000f3d0:	4159      	adcs	r1, r3
1000f3d2:	2301      	movs	r3, #1
1000f3d4:	08a4      	lsrs	r4, r4, #2
1000f3d6:	401c      	ands	r4, r3
1000f3d8:	430c      	orrs	r4, r1
1000f3da:	896b      	ldrh	r3, [r5, #10]
1000f3dc:	03e4      	lsls	r4, r4, #15
1000f3de:	431c      	orrs	r4, r3
1000f3e0:	9007      	str	r0, [sp, #28]
1000f3e2:	4b96      	ldr	r3, [pc, #600]	; (1000f63c <internal_at_ble_service_define+0x368>)
1000f3e4:	9804      	ldr	r0, [sp, #16]
1000f3e6:	4798      	blx	r3
1000f3e8:	1c2a      	adds	r2, r5, #0
1000f3ea:	3a11      	subs	r2, #17
1000f3ec:	9200      	str	r2, [sp, #0]
1000f3ee:	3a03      	subs	r2, #3
1000f3f0:	1c03      	adds	r3, r0, #0
1000f3f2:	9201      	str	r2, [sp, #4]
1000f3f4:	1c21      	adds	r1, r4, #0
1000f3f6:	1c30      	adds	r0, r6, #0
1000f3f8:	4c93      	ldr	r4, [pc, #588]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f3fa:	9a07      	ldr	r2, [sp, #28]
1000f3fc:	47a0      	blx	r4
1000f3fe:	1e04      	subs	r4, r0, #0
1000f400:	d000      	beq.n	1000f404 <internal_at_ble_service_define+0x130>
1000f402:	e142      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f404:	22c0      	movs	r2, #192	; 0xc0
1000f406:	882b      	ldrh	r3, [r5, #0]
1000f408:	0052      	lsls	r2, r2, #1
1000f40a:	4213      	tst	r3, r2
1000f40c:	d104      	bne.n	1000f418 <internal_at_ble_service_define+0x144>
1000f40e:	8aab      	ldrh	r3, [r5, #20]
1000f410:	9304      	str	r3, [sp, #16]
1000f412:	2b00      	cmp	r3, #0
1000f414:	d116      	bne.n	1000f444 <internal_at_ble_service_define+0x170>
1000f416:	e03a      	b.n	1000f48e <internal_at_ble_service_define+0x1ba>
1000f418:	2201      	movs	r2, #1
1000f41a:	09d9      	lsrs	r1, r3, #7
1000f41c:	4011      	ands	r1, r2
1000f41e:	05db      	lsls	r3, r3, #23
1000f420:	d501      	bpl.n	1000f426 <internal_at_ble_service_define+0x152>
1000f422:	2302      	movs	r3, #2
1000f424:	4319      	orrs	r1, r3
1000f426:	4b8b      	ldr	r3, [pc, #556]	; (1000f654 <internal_at_ble_service_define+0x380>)
1000f428:	aa06      	add	r2, sp, #24
1000f42a:	9300      	str	r3, [sp, #0]
1000f42c:	230e      	movs	r3, #14
1000f42e:	189b      	adds	r3, r3, r2
1000f430:	9301      	str	r3, [sp, #4]
1000f432:	4c85      	ldr	r4, [pc, #532]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f434:	0209      	lsls	r1, r1, #8
1000f436:	1c30      	adds	r0, r6, #0
1000f438:	2201      	movs	r2, #1
1000f43a:	2302      	movs	r3, #2
1000f43c:	47a0      	blx	r4
1000f43e:	1e04      	subs	r4, r0, #0
1000f440:	d0e5      	beq.n	1000f40e <internal_at_ble_service_define+0x13a>
1000f442:	e122      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f444:	2380      	movs	r3, #128	; 0x80
1000f446:	882a      	ldrh	r2, [r5, #0]
1000f448:	7f2c      	ldrb	r4, [r5, #28]
1000f44a:	005b      	lsls	r3, r3, #1
1000f44c:	401a      	ands	r2, r3
1000f44e:	1c20      	adds	r0, r4, #0
1000f450:	2101      	movs	r1, #1
1000f452:	2a00      	cmp	r2, #0
1000f454:	d000      	beq.n	1000f458 <internal_at_ble_service_define+0x184>
1000f456:	1c0a      	adds	r2, r1, #0
1000f458:	4b7f      	ldr	r3, [pc, #508]	; (1000f658 <internal_at_ble_service_define+0x384>)
1000f45a:	4798      	blx	r3
1000f45c:	2203      	movs	r2, #3
1000f45e:	4022      	ands	r2, r4
1000f460:	3a03      	subs	r2, #3
1000f462:	4251      	negs	r1, r2
1000f464:	4151      	adcs	r1, r2
1000f466:	4b7d      	ldr	r3, [pc, #500]	; (1000f65c <internal_at_ble_service_define+0x388>)
1000f468:	1c0a      	adds	r2, r1, #0
1000f46a:	9300      	str	r3, [sp, #0]
1000f46c:	1c2b      	adds	r3, r5, #0
1000f46e:	0764      	lsls	r4, r4, #29
1000f470:	0fe4      	lsrs	r4, r4, #31
1000f472:	4322      	orrs	r2, r4
1000f474:	03d2      	lsls	r2, r2, #15
1000f476:	4310      	orrs	r0, r2
1000f478:	3320      	adds	r3, #32
1000f47a:	b282      	uxth	r2, r0
1000f47c:	9301      	str	r3, [sp, #4]
1000f47e:	4c72      	ldr	r4, [pc, #456]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f480:	1c30      	adds	r0, r6, #0
1000f482:	9904      	ldr	r1, [sp, #16]
1000f484:	2302      	movs	r3, #2
1000f486:	47a0      	blx	r4
1000f488:	1e04      	subs	r4, r0, #0
1000f48a:	d000      	beq.n	1000f48e <internal_at_ble_service_define+0x1ba>
1000f48c:	e0fd      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f48e:	2101      	movs	r1, #1
1000f490:	882b      	ldrh	r3, [r5, #0]
1000f492:	420b      	tst	r3, r1
1000f494:	d011      	beq.n	1000f4ba <internal_at_ble_service_define+0x1e6>
1000f496:	7fa8      	ldrb	r0, [r5, #30]
1000f498:	4b6f      	ldr	r3, [pc, #444]	; (1000f658 <internal_at_ble_service_define+0x384>)
1000f49a:	2200      	movs	r2, #0
1000f49c:	4798      	blx	r3
1000f49e:	4b70      	ldr	r3, [pc, #448]	; (1000f660 <internal_at_ble_service_define+0x38c>)
1000f4a0:	1c02      	adds	r2, r0, #0
1000f4a2:	9300      	str	r3, [sp, #0]
1000f4a4:	1c2b      	adds	r3, r5, #0
1000f4a6:	3324      	adds	r3, #36	; 0x24
1000f4a8:	9301      	str	r3, [sp, #4]
1000f4aa:	4c67      	ldr	r4, [pc, #412]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f4ac:	1c30      	adds	r0, r6, #0
1000f4ae:	496d      	ldr	r1, [pc, #436]	; (1000f664 <internal_at_ble_service_define+0x390>)
1000f4b0:	2302      	movs	r3, #2
1000f4b2:	47a0      	blx	r4
1000f4b4:	1e04      	subs	r4, r0, #0
1000f4b6:	d000      	beq.n	1000f4ba <internal_at_ble_service_define+0x1e6>
1000f4b8:	e0e7      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f4ba:	2330      	movs	r3, #48	; 0x30
1000f4bc:	882a      	ldrh	r2, [r5, #0]
1000f4be:	421a      	tst	r2, r3
1000f4c0:	d012      	beq.n	1000f4e8 <internal_at_ble_service_define+0x214>
1000f4c2:	2101      	movs	r1, #1
1000f4c4:	7f68      	ldrb	r0, [r5, #29]
1000f4c6:	1c0a      	adds	r2, r1, #0
1000f4c8:	4b63      	ldr	r3, [pc, #396]	; (1000f658 <internal_at_ble_service_define+0x384>)
1000f4ca:	4798      	blx	r3
1000f4cc:	4b66      	ldr	r3, [pc, #408]	; (1000f668 <internal_at_ble_service_define+0x394>)
1000f4ce:	1c02      	adds	r2, r0, #0
1000f4d0:	9300      	str	r3, [sp, #0]
1000f4d2:	1c2b      	adds	r3, r5, #0
1000f4d4:	3322      	adds	r3, #34	; 0x22
1000f4d6:	9301      	str	r3, [sp, #4]
1000f4d8:	4c5b      	ldr	r4, [pc, #364]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f4da:	1c30      	adds	r0, r6, #0
1000f4dc:	4961      	ldr	r1, [pc, #388]	; (1000f664 <internal_at_ble_service_define+0x390>)
1000f4de:	2302      	movs	r3, #2
1000f4e0:	47a0      	blx	r4
1000f4e2:	1e04      	subs	r4, r0, #0
1000f4e4:	d000      	beq.n	1000f4e8 <internal_at_ble_service_define+0x214>
1000f4e6:	e0d0      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f4e8:	69ab      	ldr	r3, [r5, #24]
1000f4ea:	2b00      	cmp	r3, #0
1000f4ec:	d00e      	beq.n	1000f50c <internal_at_ble_service_define+0x238>
1000f4ee:	4b5f      	ldr	r3, [pc, #380]	; (1000f66c <internal_at_ble_service_define+0x398>)
1000f4f0:	aa06      	add	r2, sp, #24
1000f4f2:	9300      	str	r3, [sp, #0]
1000f4f4:	230e      	movs	r3, #14
1000f4f6:	189b      	adds	r3, r3, r2
1000f4f8:	9301      	str	r3, [sp, #4]
1000f4fa:	4c53      	ldr	r4, [pc, #332]	; (1000f648 <internal_at_ble_service_define+0x374>)
1000f4fc:	1c30      	adds	r0, r6, #0
1000f4fe:	2107      	movs	r1, #7
1000f500:	2201      	movs	r2, #1
1000f502:	2302      	movs	r3, #2
1000f504:	47a0      	blx	r4
1000f506:	1e04      	subs	r4, r0, #0
1000f508:	d000      	beq.n	1000f50c <internal_at_ble_service_define+0x238>
1000f50a:	e0be      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f50c:	9b02      	ldr	r3, [sp, #8]
1000f50e:	353c      	adds	r5, #60	; 0x3c
1000f510:	3301      	adds	r3, #1
1000f512:	9302      	str	r3, [sp, #8]
1000f514:	e73a      	b.n	1000f38c <internal_at_ble_service_define+0xb8>
1000f516:	1c30      	adds	r0, r6, #0
1000f518:	4b55      	ldr	r3, [pc, #340]	; (1000f670 <internal_at_ble_service_define+0x39c>)
1000f51a:	4798      	blx	r3
1000f51c:	1e04      	subs	r4, r0, #0
1000f51e:	d000      	beq.n	1000f522 <internal_at_ble_service_define+0x24e>
1000f520:	e0b3      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f522:	8833      	ldrh	r3, [r6, #0]
1000f524:	9a05      	ldr	r2, [sp, #20]
1000f526:	8013      	strh	r3, [r2, #0]
1000f528:	8836      	ldrh	r6, [r6, #0]
1000f52a:	9b06      	ldr	r3, [sp, #24]
1000f52c:	9a03      	ldr	r2, [sp, #12]
1000f52e:	18f6      	adds	r6, r6, r3
1000f530:	b2b3      	uxth	r3, r6
1000f532:	9302      	str	r3, [sp, #8]
1000f534:	233c      	movs	r3, #60	; 0x3c
1000f536:	4353      	muls	r3, r2
1000f538:	9a10      	ldr	r2, [sp, #64]	; 0x40
1000f53a:	3314      	adds	r3, #20
1000f53c:	18d3      	adds	r3, r2, r3
1000f53e:	9304      	str	r3, [sp, #16]
1000f540:	9b04      	ldr	r3, [sp, #16]
1000f542:	429f      	cmp	r7, r3
1000f544:	d100      	bne.n	1000f548 <internal_at_ble_service_define+0x274>
1000f546:	e0a0      	b.n	1000f68a <internal_at_ble_service_define+0x3b6>
1000f548:	9b02      	ldr	r3, [sp, #8]
1000f54a:	1c9d      	adds	r5, r3, #2
1000f54c:	1c3b      	adds	r3, r7, #0
1000f54e:	b2ad      	uxth	r5, r5
1000f550:	3b14      	subs	r3, #20
1000f552:	801d      	strh	r5, [r3, #0]
1000f554:	9303      	str	r3, [sp, #12]
1000f556:	893b      	ldrh	r3, [r7, #8]
1000f558:	2b00      	cmp	r3, #0
1000f55a:	d108      	bne.n	1000f56e <internal_at_ble_service_define+0x29a>
1000f55c:	23c0      	movs	r3, #192	; 0xc0
1000f55e:	883a      	ldrh	r2, [r7, #0]
1000f560:	005b      	lsls	r3, r3, #1
1000f562:	421a      	tst	r2, r3
1000f564:	d026      	beq.n	1000f5b4 <internal_at_ble_service_define+0x2e0>
1000f566:	9e02      	ldr	r6, [sp, #8]
1000f568:	3603      	adds	r6, #3
1000f56a:	b2b5      	uxth	r5, r6
1000f56c:	e022      	b.n	1000f5b4 <internal_at_ble_service_define+0x2e0>
1000f56e:	2103      	movs	r1, #3
1000f570:	7b3b      	ldrb	r3, [r7, #12]
1000f572:	4019      	ands	r1, r3
1000f574:	3903      	subs	r1, #3
1000f576:	424a      	negs	r2, r1
1000f578:	414a      	adcs	r2, r1
1000f57a:	0759      	lsls	r1, r3, #29
1000f57c:	0fc9      	lsrs	r1, r1, #31
1000f57e:	4311      	orrs	r1, r2
1000f580:	03c9      	lsls	r1, r1, #15
1000f582:	897a      	ldrh	r2, [r7, #10]
1000f584:	2900      	cmp	r1, #0
1000f586:	d007      	beq.n	1000f598 <internal_at_ble_service_define+0x2c4>
1000f588:	6879      	ldr	r1, [r7, #4]
1000f58a:	2900      	cmp	r1, #0
1000f58c:	d100      	bne.n	1000f590 <internal_at_ble_service_define+0x2bc>
1000f58e:	4939      	ldr	r1, [pc, #228]	; (1000f674 <internal_at_ble_service_define+0x3a0>)
1000f590:	1c28      	adds	r0, r5, #0
1000f592:	4e39      	ldr	r6, [pc, #228]	; (1000f678 <internal_at_ble_service_define+0x3a4>)
1000f594:	47b0      	blx	r6
1000f596:	e00a      	b.n	1000f5ae <internal_at_ble_service_define+0x2da>
1000f598:	1c28      	adds	r0, r5, #0
1000f59a:	4e37      	ldr	r6, [pc, #220]	; (1000f678 <internal_at_ble_service_define+0x3a4>)
1000f59c:	47b0      	blx	r6
1000f59e:	2800      	cmp	r0, #0
1000f5a0:	d172      	bne.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f5a2:	9b03      	ldr	r3, [sp, #12]
1000f5a4:	8939      	ldrh	r1, [r7, #8]
1000f5a6:	8818      	ldrh	r0, [r3, #0]
1000f5a8:	687a      	ldr	r2, [r7, #4]
1000f5aa:	4b34      	ldr	r3, [pc, #208]	; (1000f67c <internal_at_ble_service_define+0x3a8>)
1000f5ac:	4798      	blx	r3
1000f5ae:	2800      	cmp	r0, #0
1000f5b0:	d0d4      	beq.n	1000f55c <internal_at_ble_service_define+0x288>
1000f5b2:	e069      	b.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f5b4:	8abb      	ldrh	r3, [r7, #20]
1000f5b6:	2b00      	cmp	r3, #0
1000f5b8:	d00a      	beq.n	1000f5d0 <internal_at_ble_service_define+0x2fc>
1000f5ba:	3501      	adds	r5, #1
1000f5bc:	b2ad      	uxth	r5, r5
1000f5be:	843d      	strh	r5, [r7, #32]
1000f5c0:	7f39      	ldrb	r1, [r7, #28]
1000f5c2:	8afb      	ldrh	r3, [r7, #22]
1000f5c4:	1c28      	adds	r0, r5, #0
1000f5c6:	693a      	ldr	r2, [r7, #16]
1000f5c8:	4e2d      	ldr	r6, [pc, #180]	; (1000f680 <internal_at_ble_service_define+0x3ac>)
1000f5ca:	47b0      	blx	r6
1000f5cc:	2800      	cmp	r0, #0
1000f5ce:	d15b      	bne.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f5d0:	883b      	ldrh	r3, [r7, #0]
1000f5d2:	07db      	lsls	r3, r3, #31
1000f5d4:	d50d      	bpl.n	1000f5f2 <internal_at_ble_service_define+0x31e>
1000f5d6:	2200      	movs	r2, #0
1000f5d8:	3501      	adds	r5, #1
1000f5da:	b2ad      	uxth	r5, r5
1000f5dc:	a909      	add	r1, sp, #36	; 0x24
1000f5de:	84bd      	strh	r5, [r7, #36]	; 0x24
1000f5e0:	7fbb      	ldrb	r3, [r7, #30]
1000f5e2:	1c28      	adds	r0, r5, #0
1000f5e4:	700a      	strb	r2, [r1, #0]
1000f5e6:	704a      	strb	r2, [r1, #1]
1000f5e8:	4e23      	ldr	r6, [pc, #140]	; (1000f678 <internal_at_ble_service_define+0x3a4>)
1000f5ea:	3202      	adds	r2, #2
1000f5ec:	47b0      	blx	r6
1000f5ee:	2800      	cmp	r0, #0
1000f5f0:	d14a      	bne.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f5f2:	2330      	movs	r3, #48	; 0x30
1000f5f4:	883a      	ldrh	r2, [r7, #0]
1000f5f6:	421a      	tst	r2, r3
1000f5f8:	d00d      	beq.n	1000f616 <internal_at_ble_service_define+0x342>
1000f5fa:	2200      	movs	r2, #0
1000f5fc:	3501      	adds	r5, #1
1000f5fe:	b2ad      	uxth	r5, r5
1000f600:	a909      	add	r1, sp, #36	; 0x24
1000f602:	847d      	strh	r5, [r7, #34]	; 0x22
1000f604:	7f7b      	ldrb	r3, [r7, #29]
1000f606:	1c28      	adds	r0, r5, #0
1000f608:	700a      	strb	r2, [r1, #0]
1000f60a:	704a      	strb	r2, [r1, #1]
1000f60c:	4e1a      	ldr	r6, [pc, #104]	; (1000f678 <internal_at_ble_service_define+0x3a4>)
1000f60e:	3202      	adds	r2, #2
1000f610:	47b0      	blx	r6
1000f612:	2800      	cmp	r0, #0
1000f614:	d138      	bne.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f616:	69b9      	ldr	r1, [r7, #24]
1000f618:	2900      	cmp	r1, #0
1000f61a:	d006      	beq.n	1000f62a <internal_at_ble_service_define+0x356>
1000f61c:	3501      	adds	r5, #1
1000f61e:	b2ad      	uxth	r5, r5
1000f620:	1c28      	adds	r0, r5, #0
1000f622:	4b18      	ldr	r3, [pc, #96]	; (1000f684 <internal_at_ble_service_define+0x3b0>)
1000f624:	4798      	blx	r3
1000f626:	2800      	cmp	r0, #0
1000f628:	d12e      	bne.n	1000f688 <internal_at_ble_service_define+0x3b4>
1000f62a:	373c      	adds	r7, #60	; 0x3c
1000f62c:	9502      	str	r5, [sp, #8]
1000f62e:	e787      	b.n	1000f540 <internal_at_ble_service_define+0x26c>
1000f630:	10019398 	.word	0x10019398
1000f634:	1001a310 	.word	0x1001a310
1000f638:	100155cd 	.word	0x100155cd
1000f63c:	1000f009 	.word	0x1000f009
1000f640:	100155bb 	.word	0x100155bb
1000f644:	100176e6 	.word	0x100176e6
1000f648:	10011495 	.word	0x10011495
1000f64c:	100176e8 	.word	0x100176e8
1000f650:	1000f0d5 	.word	0x1000f0d5
1000f654:	100176e4 	.word	0x100176e4
1000f658:	1000f07d 	.word	0x1000f07d
1000f65c:	100176e0 	.word	0x100176e0
1000f660:	100176e2 	.word	0x100176e2
1000f664:	00008002 	.word	0x00008002
1000f668:	100176dc 	.word	0x100176dc
1000f66c:	100176de 	.word	0x100176de
1000f670:	10011389 	.word	0x10011389
1000f674:	10019384 	.word	0x10019384
1000f678:	1000f19d 	.word	0x1000f19d
1000f67c:	10011505 	.word	0x10011505
1000f680:	1000f255 	.word	0x1000f255
1000f684:	1000f171 	.word	0x1000f171
1000f688:	1c04      	adds	r4, r0, #0
1000f68a:	1c20      	adds	r0, r4, #0
1000f68c:	b00b      	add	sp, #44	; 0x2c
1000f68e:	bdf0      	pop	{r4, r5, r6, r7, pc}

1000f690 <initi_gatt_server_module>:
1000f690:	2300      	movs	r3, #0
1000f692:	4a07      	ldr	r2, [pc, #28]	; (1000f6b0 <initi_gatt_server_module+0x20>)
1000f694:	7013      	strb	r3, [r2, #0]
1000f696:	4a07      	ldr	r2, [pc, #28]	; (1000f6b4 <initi_gatt_server_module+0x24>)
1000f698:	6013      	str	r3, [r2, #0]
1000f69a:	4a07      	ldr	r2, [pc, #28]	; (1000f6b8 <initi_gatt_server_module+0x28>)
1000f69c:	6013      	str	r3, [r2, #0]
1000f69e:	4a07      	ldr	r2, [pc, #28]	; (1000f6bc <initi_gatt_server_module+0x2c>)
1000f6a0:	6013      	str	r3, [r2, #0]
1000f6a2:	4a07      	ldr	r2, [pc, #28]	; (1000f6c0 <initi_gatt_server_module+0x30>)
1000f6a4:	6013      	str	r3, [r2, #0]
1000f6a6:	4a07      	ldr	r2, [pc, #28]	; (1000f6c4 <initi_gatt_server_module+0x34>)
1000f6a8:	6013      	str	r3, [r2, #0]
1000f6aa:	4a07      	ldr	r2, [pc, #28]	; (1000f6c8 <initi_gatt_server_module+0x38>)
1000f6ac:	6013      	str	r3, [r2, #0]
1000f6ae:	4770      	bx	lr
1000f6b0:	10019384 	.word	0x10019384
1000f6b4:	10019394 	.word	0x10019394
1000f6b8:	10019390 	.word	0x10019390
1000f6bc:	10019380 	.word	0x10019380
1000f6c0:	1001938c 	.word	0x1001938c
1000f6c4:	10019388 	.word	0x10019388
1000f6c8:	10019398 	.word	0x10019398

1000f6cc <db_init>:
1000f6cc:	4b0a      	ldr	r3, [pc, #40]	; (1000f6f8 <db_init+0x2c>)
1000f6ce:	4a0b      	ldr	r2, [pc, #44]	; (1000f6fc <db_init+0x30>)
1000f6d0:	6018      	str	r0, [r3, #0]
1000f6d2:	084b      	lsrs	r3, r1, #1
1000f6d4:	6013      	str	r3, [r2, #0]
1000f6d6:	4a0a      	ldr	r2, [pc, #40]	; (1000f700 <db_init+0x34>)
1000f6d8:	18c3      	adds	r3, r0, r3
1000f6da:	6013      	str	r3, [r2, #0]
1000f6dc:	4a09      	ldr	r2, [pc, #36]	; (1000f704 <db_init+0x38>)
1000f6de:	1841      	adds	r1, r0, r1
1000f6e0:	6013      	str	r3, [r2, #0]
1000f6e2:	2303      	movs	r3, #3
1000f6e4:	2200      	movs	r2, #0
1000f6e6:	3103      	adds	r1, #3
1000f6e8:	4399      	bics	r1, r3
1000f6ea:	4b07      	ldr	r3, [pc, #28]	; (1000f708 <db_init+0x3c>)
1000f6ec:	3904      	subs	r1, #4
1000f6ee:	6019      	str	r1, [r3, #0]
1000f6f0:	4b06      	ldr	r3, [pc, #24]	; (1000f70c <db_init+0x40>)
1000f6f2:	601a      	str	r2, [r3, #0]
1000f6f4:	4770      	bx	lr
1000f6f6:	46c0      	nop			; (mov r8, r8)
1000f6f8:	10019398 	.word	0x10019398
1000f6fc:	10019394 	.word	0x10019394
1000f700:	10019380 	.word	0x10019380
1000f704:	1001938c 	.word	0x1001938c
1000f708:	10019388 	.word	0x10019388
1000f70c:	10019390 	.word	0x10019390

1000f710 <at_ble_primary_service_define>:
1000f710:	b530      	push	{r4, r5, lr}
1000f712:	b085      	sub	sp, #20
1000f714:	ac08      	add	r4, sp, #32
1000f716:	cc20      	ldmia	r4!, {r5}
1000f718:	8824      	ldrh	r4, [r4, #0]
1000f71a:	9500      	str	r5, [sp, #0]
1000f71c:	9401      	str	r4, [sp, #4]
1000f71e:	2401      	movs	r4, #1
1000f720:	9402      	str	r4, [sp, #8]
1000f722:	4c02      	ldr	r4, [pc, #8]	; (1000f72c <at_ble_primary_service_define+0x1c>)
1000f724:	47a0      	blx	r4
1000f726:	b005      	add	sp, #20
1000f728:	bd30      	pop	{r4, r5, pc}
1000f72a:	46c0      	nop			; (mov r8, r8)
1000f72c:	1000f2d5 	.word	0x1000f2d5

1000f730 <at_ble_characteristic_value_set>:
1000f730:	b570      	push	{r4, r5, r6, lr}
1000f732:	4b0b      	ldr	r3, [pc, #44]	; (1000f760 <at_ble_characteristic_value_set+0x30>)
1000f734:	1c06      	adds	r6, r0, #0
1000f736:	1c0c      	adds	r4, r1, #0
1000f738:	1c15      	adds	r5, r2, #0
1000f73a:	4798      	blx	r3
1000f73c:	2800      	cmp	r0, #0
1000f73e:	d008      	beq.n	1000f752 <at_ble_characteristic_value_set+0x22>
1000f740:	6880      	ldr	r0, [r0, #8]
1000f742:	2800      	cmp	r0, #0
1000f744:	d005      	beq.n	1000f752 <at_ble_characteristic_value_set+0x22>
1000f746:	1c21      	adds	r1, r4, #0
1000f748:	1c2a      	adds	r2, r5, #0
1000f74a:	4b06      	ldr	r3, [pc, #24]	; (1000f764 <at_ble_characteristic_value_set+0x34>)
1000f74c:	4798      	blx	r3
1000f74e:	2000      	movs	r0, #0
1000f750:	e004      	b.n	1000f75c <at_ble_characteristic_value_set+0x2c>
1000f752:	1c30      	adds	r0, r6, #0
1000f754:	1c29      	adds	r1, r5, #0
1000f756:	1c22      	adds	r2, r4, #0
1000f758:	4b03      	ldr	r3, [pc, #12]	; (1000f768 <at_ble_characteristic_value_set+0x38>)
1000f75a:	4798      	blx	r3
1000f75c:	bd70      	pop	{r4, r5, r6, pc}
1000f75e:	46c0      	nop			; (mov r8, r8)
1000f760:	1000f03d 	.word	0x1000f03d
1000f764:	100155bb 	.word	0x100155bb
1000f768:	10011505 	.word	0x10011505

1000f76c <at_ble_characteristic_value_get>:
1000f76c:	b570      	push	{r4, r5, r6, lr}
1000f76e:	4b0c      	ldr	r3, [pc, #48]	; (1000f7a0 <at_ble_characteristic_value_get+0x34>)
1000f770:	1c06      	adds	r6, r0, #0
1000f772:	1c0c      	adds	r4, r1, #0
1000f774:	1c15      	adds	r5, r2, #0
1000f776:	4798      	blx	r3
1000f778:	2800      	cmp	r0, #0
1000f77a:	d00b      	beq.n	1000f794 <at_ble_characteristic_value_get+0x28>
1000f77c:	6883      	ldr	r3, [r0, #8]
1000f77e:	2b00      	cmp	r3, #0
1000f780:	d008      	beq.n	1000f794 <at_ble_characteristic_value_get+0x28>
1000f782:	8883      	ldrh	r3, [r0, #4]
1000f784:	802b      	strh	r3, [r5, #0]
1000f786:	8882      	ldrh	r2, [r0, #4]
1000f788:	6881      	ldr	r1, [r0, #8]
1000f78a:	4b06      	ldr	r3, [pc, #24]	; (1000f7a4 <at_ble_characteristic_value_get+0x38>)
1000f78c:	1c20      	adds	r0, r4, #0
1000f78e:	4798      	blx	r3
1000f790:	2000      	movs	r0, #0
1000f792:	e004      	b.n	1000f79e <at_ble_characteristic_value_get+0x32>
1000f794:	1c30      	adds	r0, r6, #0
1000f796:	1c29      	adds	r1, r5, #0
1000f798:	1c22      	adds	r2, r4, #0
1000f79a:	4b03      	ldr	r3, [pc, #12]	; (1000f7a8 <at_ble_characteristic_value_get+0x3c>)
1000f79c:	4798      	blx	r3
1000f79e:	bd70      	pop	{r4, r5, r6, pc}
1000f7a0:	1000f03d 	.word	0x1000f03d
1000f7a4:	100155bb 	.word	0x100155bb
1000f7a8:	10011591 	.word	0x10011591

1000f7ac <at_ble_write_authorize_reply>:
1000f7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f7ae:	b085      	sub	sp, #20
1000f7b0:	1c04      	adds	r4, r0, #0
1000f7b2:	9101      	str	r1, [sp, #4]
1000f7b4:	2900      	cmp	r1, #0
1000f7b6:	d128      	bne.n	1000f80a <at_ble_write_authorize_reply+0x5e>
1000f7b8:	8843      	ldrh	r3, [r0, #2]
1000f7ba:	1c27      	adds	r7, r4, #0
1000f7bc:	9300      	str	r3, [sp, #0]
1000f7be:	1c18      	adds	r0, r3, #0
1000f7c0:	4b16      	ldr	r3, [pc, #88]	; (1000f81c <at_ble_write_authorize_reply+0x70>)
1000f7c2:	4798      	blx	r3
1000f7c4:	3708      	adds	r7, #8
1000f7c6:	2800      	cmp	r0, #0
1000f7c8:	d009      	beq.n	1000f7de <at_ble_write_authorize_reply+0x32>
1000f7ca:	6880      	ldr	r0, [r0, #8]
1000f7cc:	2800      	cmp	r0, #0
1000f7ce:	d006      	beq.n	1000f7de <at_ble_write_authorize_reply+0x32>
1000f7d0:	88a3      	ldrh	r3, [r4, #4]
1000f7d2:	88e2      	ldrh	r2, [r4, #6]
1000f7d4:	18c0      	adds	r0, r0, r3
1000f7d6:	1c39      	adds	r1, r7, #0
1000f7d8:	4b11      	ldr	r3, [pc, #68]	; (1000f820 <at_ble_write_authorize_reply+0x74>)
1000f7da:	4798      	blx	r3
1000f7dc:	e015      	b.n	1000f80a <at_ble_write_authorize_reply+0x5e>
1000f7de:	ab02      	add	r3, sp, #8
1000f7e0:	1d9e      	adds	r6, r3, #6
1000f7e2:	2300      	movs	r3, #0
1000f7e4:	4d0f      	ldr	r5, [pc, #60]	; (1000f824 <at_ble_write_authorize_reply+0x78>)
1000f7e6:	8033      	strh	r3, [r6, #0]
1000f7e8:	6829      	ldr	r1, [r5, #0]
1000f7ea:	1c32      	adds	r2, r6, #0
1000f7ec:	4b0e      	ldr	r3, [pc, #56]	; (1000f828 <at_ble_write_authorize_reply+0x7c>)
1000f7ee:	9800      	ldr	r0, [sp, #0]
1000f7f0:	4798      	blx	r3
1000f7f2:	682b      	ldr	r3, [r5, #0]
1000f7f4:	88a0      	ldrh	r0, [r4, #4]
1000f7f6:	88e2      	ldrh	r2, [r4, #6]
1000f7f8:	1818      	adds	r0, r3, r0
1000f7fa:	1c39      	adds	r1, r7, #0
1000f7fc:	4b08      	ldr	r3, [pc, #32]	; (1000f820 <at_ble_write_authorize_reply+0x74>)
1000f7fe:	4798      	blx	r3
1000f800:	8860      	ldrh	r0, [r4, #2]
1000f802:	8832      	ldrh	r2, [r6, #0]
1000f804:	6829      	ldr	r1, [r5, #0]
1000f806:	4b09      	ldr	r3, [pc, #36]	; (1000f82c <at_ble_write_authorize_reply+0x80>)
1000f808:	4798      	blx	r3
1000f80a:	8860      	ldrh	r0, [r4, #2]
1000f80c:	8821      	ldrh	r1, [r4, #0]
1000f80e:	9a01      	ldr	r2, [sp, #4]
1000f810:	4b07      	ldr	r3, [pc, #28]	; (1000f830 <at_ble_write_authorize_reply+0x84>)
1000f812:	4798      	blx	r3
1000f814:	2000      	movs	r0, #0
1000f816:	b005      	add	sp, #20
1000f818:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f81a:	46c0      	nop			; (mov r8, r8)
1000f81c:	1000f03d 	.word	0x1000f03d
1000f820:	100155bb 	.word	0x100155bb
1000f824:	10017900 	.word	0x10017900
1000f828:	1000f76d 	.word	0x1000f76d
1000f82c:	1000f731 	.word	0x1000f731
1000f830:	10011009 	.word	0x10011009

1000f834 <gatts_handle_read_req>:
1000f834:	b538      	push	{r3, r4, r5, lr}
1000f836:	1c0c      	adds	r4, r1, #0
1000f838:	4b07      	ldr	r3, [pc, #28]	; (1000f858 <gatts_handle_read_req+0x24>)
1000f83a:	4798      	blx	r3
1000f83c:	8865      	ldrh	r5, [r4, #2]
1000f83e:	4b07      	ldr	r3, [pc, #28]	; (1000f85c <gatts_handle_read_req+0x28>)
1000f840:	1c28      	adds	r0, r5, #0
1000f842:	4798      	blx	r3
1000f844:	7883      	ldrb	r3, [r0, #2]
1000f846:	2026      	movs	r0, #38	; 0x26
1000f848:	07db      	lsls	r3, r3, #31
1000f84a:	d404      	bmi.n	1000f856 <gatts_handle_read_req+0x22>
1000f84c:	8820      	ldrh	r0, [r4, #0]
1000f84e:	1c29      	adds	r1, r5, #0
1000f850:	4b03      	ldr	r3, [pc, #12]	; (1000f860 <gatts_handle_read_req+0x2c>)
1000f852:	4798      	blx	r3
1000f854:	203b      	movs	r0, #59	; 0x3b
1000f856:	bd38      	pop	{r3, r4, r5, pc}
1000f858:	10010f4d 	.word	0x10010f4d
1000f85c:	1000f03d 	.word	0x1000f03d
1000f860:	1000f2a5 	.word	0x1000f2a5

1000f864 <gatts_handle_att_info_req>:
1000f864:	b538      	push	{r3, r4, r5, lr}
1000f866:	1c0d      	adds	r5, r1, #0
1000f868:	4b0a      	ldr	r3, [pc, #40]	; (1000f894 <gatts_handle_att_info_req+0x30>)
1000f86a:	1c14      	adds	r4, r2, #0
1000f86c:	4798      	blx	r3
1000f86e:	882d      	ldrh	r5, [r5, #0]
1000f870:	4b09      	ldr	r3, [pc, #36]	; (1000f898 <gatts_handle_att_info_req+0x34>)
1000f872:	1c28      	adds	r0, r5, #0
1000f874:	4798      	blx	r3
1000f876:	0a22      	lsrs	r2, r4, #8
1000f878:	1c03      	adds	r3, r0, #0
1000f87a:	4c08      	ldr	r4, [pc, #32]	; (1000f89c <gatts_handle_att_info_req+0x38>)
1000f87c:	b291      	uxth	r1, r2
1000f87e:	2800      	cmp	r0, #0
1000f880:	d003      	beq.n	1000f88a <gatts_handle_att_info_req+0x26>
1000f882:	8882      	ldrh	r2, [r0, #4]
1000f884:	2300      	movs	r3, #0
1000f886:	1c28      	adds	r0, r5, #0
1000f888:	e001      	b.n	1000f88e <gatts_handle_att_info_req+0x2a>
1000f88a:	1c28      	adds	r0, r5, #0
1000f88c:	2201      	movs	r2, #1
1000f88e:	47a0      	blx	r4
1000f890:	203b      	movs	r0, #59	; 0x3b
1000f892:	bd38      	pop	{r3, r4, r5, pc}
1000f894:	10010f91 	.word	0x10010f91
1000f898:	1000f03d 	.word	0x1000f03d
1000f89c:	1001104d 	.word	0x1001104d

1000f8a0 <gatts_handle_write_req>:
1000f8a0:	b510      	push	{r4, lr}
1000f8a2:	1c14      	adds	r4, r2, #0
1000f8a4:	4b07      	ldr	r3, [pc, #28]	; (1000f8c4 <gatts_handle_write_req+0x24>)
1000f8a6:	4798      	blx	r3
1000f8a8:	4b07      	ldr	r3, [pc, #28]	; (1000f8c8 <gatts_handle_write_req+0x28>)
1000f8aa:	8860      	ldrh	r0, [r4, #2]
1000f8ac:	4798      	blx	r3
1000f8ae:	2302      	movs	r3, #2
1000f8b0:	7881      	ldrb	r1, [r0, #2]
1000f8b2:	2022      	movs	r0, #34	; 0x22
1000f8b4:	4019      	ands	r1, r3
1000f8b6:	d103      	bne.n	1000f8c0 <gatts_handle_write_req+0x20>
1000f8b8:	1c20      	adds	r0, r4, #0
1000f8ba:	4b04      	ldr	r3, [pc, #16]	; (1000f8cc <gatts_handle_write_req+0x2c>)
1000f8bc:	4798      	blx	r3
1000f8be:	201f      	movs	r0, #31
1000f8c0:	bd10      	pop	{r4, pc}
1000f8c2:	46c0      	nop			; (mov r8, r8)
1000f8c4:	10010f59 	.word	0x10010f59
1000f8c8:	1000f03d 	.word	0x1000f03d
1000f8cc:	1000f7ad 	.word	0x1000f7ad

1000f8d0 <at_ble_notification_send>:
1000f8d0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f8d2:	4d17      	ldr	r5, [pc, #92]	; (1000f930 <at_ble_notification_send+0x60>)
1000f8d4:	4c17      	ldr	r4, [pc, #92]	; (1000f934 <at_ble_notification_send+0x64>)
1000f8d6:	682a      	ldr	r2, [r5, #0]
1000f8d8:	44a5      	add	sp, r4
1000f8da:	23d2      	movs	r3, #210	; 0xd2
1000f8dc:	2a04      	cmp	r2, #4
1000f8de:	d822      	bhi.n	1000f926 <at_ble_notification_send+0x56>
1000f8e0:	1c06      	adds	r6, r0, #0
1000f8e2:	4b15      	ldr	r3, [pc, #84]	; (1000f938 <at_ble_notification_send+0x68>)
1000f8e4:	1c08      	adds	r0, r1, #0
1000f8e6:	1c0c      	adds	r4, r1, #0
1000f8e8:	4798      	blx	r3
1000f8ea:	2800      	cmp	r0, #0
1000f8ec:	d008      	beq.n	1000f900 <at_ble_notification_send+0x30>
1000f8ee:	6883      	ldr	r3, [r0, #8]
1000f8f0:	2b00      	cmp	r3, #0
1000f8f2:	d005      	beq.n	1000f900 <at_ble_notification_send+0x30>
1000f8f4:	8882      	ldrh	r2, [r0, #4]
1000f8f6:	1c21      	adds	r1, r4, #0
1000f8f8:	9200      	str	r2, [sp, #0]
1000f8fa:	2012      	movs	r0, #18
1000f8fc:	1c32      	adds	r2, r6, #0
1000f8fe:	e00c      	b.n	1000f91a <at_ble_notification_send+0x4a>
1000f900:	270e      	movs	r7, #14
1000f902:	446f      	add	r7, sp
1000f904:	1c39      	adds	r1, r7, #0
1000f906:	aa04      	add	r2, sp, #16
1000f908:	4b0c      	ldr	r3, [pc, #48]	; (1000f93c <at_ble_notification_send+0x6c>)
1000f90a:	1c20      	adds	r0, r4, #0
1000f90c:	4798      	blx	r3
1000f90e:	2012      	movs	r0, #18
1000f910:	1c21      	adds	r1, r4, #0
1000f912:	1c32      	adds	r2, r6, #0
1000f914:	883b      	ldrh	r3, [r7, #0]
1000f916:	9300      	str	r3, [sp, #0]
1000f918:	ab04      	add	r3, sp, #16
1000f91a:	4c09      	ldr	r4, [pc, #36]	; (1000f940 <at_ble_notification_send+0x70>)
1000f91c:	47a0      	blx	r4
1000f91e:	682b      	ldr	r3, [r5, #0]
1000f920:	3301      	adds	r3, #1
1000f922:	602b      	str	r3, [r5, #0]
1000f924:	2300      	movs	r3, #0
1000f926:	1c18      	adds	r0, r3, #0
1000f928:	2385      	movs	r3, #133	; 0x85
1000f92a:	009b      	lsls	r3, r3, #2
1000f92c:	449d      	add	sp, r3
1000f92e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000f930:	10019424 	.word	0x10019424
1000f934:	fffffdec 	.word	0xfffffdec
1000f938:	1000f03d 	.word	0x1000f03d
1000f93c:	10011591 	.word	0x10011591
1000f940:	10011095 	.word	0x10011095

1000f944 <init_l2cc_task_module>:
1000f944:	220a      	movs	r2, #10
1000f946:	4b01      	ldr	r3, [pc, #4]	; (1000f94c <init_l2cc_task_module+0x8>)
1000f948:	701a      	strb	r2, [r3, #0]
1000f94a:	4770      	bx	lr
1000f94c:	100178fc 	.word	0x100178fc

1000f950 <l2cc_data_send_rsp_handler>:
1000f950:	b510      	push	{r4, lr}
1000f952:	7802      	ldrb	r2, [r0, #0]
1000f954:	700a      	strb	r2, [r1, #0]
1000f956:	7883      	ldrb	r3, [r0, #2]
1000f958:	7844      	ldrb	r4, [r0, #1]
1000f95a:	021b      	lsls	r3, r3, #8
1000f95c:	4323      	orrs	r3, r4
1000f95e:	804b      	strh	r3, [r1, #2]
1000f960:	7903      	ldrb	r3, [r0, #4]
1000f962:	78c0      	ldrb	r0, [r0, #3]
1000f964:	021b      	lsls	r3, r3, #8
1000f966:	4303      	orrs	r3, r0
1000f968:	808b      	strh	r3, [r1, #4]
1000f96a:	2a00      	cmp	r2, #0
1000f96c:	d103      	bne.n	1000f976 <l2cc_data_send_rsp_handler+0x26>
1000f96e:	4a02      	ldr	r2, [pc, #8]	; (1000f978 <l2cc_data_send_rsp_handler+0x28>)
1000f970:	7813      	ldrb	r3, [r2, #0]
1000f972:	3301      	adds	r3, #1
1000f974:	7013      	strb	r3, [r2, #0]
1000f976:	bd10      	pop	{r4, pc}
1000f978:	100178fc 	.word	0x100178fc

1000f97c <l2cc_data_received_handler>:
1000f97c:	b508      	push	{r3, lr}
1000f97e:	1c03      	adds	r3, r0, #0
1000f980:	7842      	ldrb	r2, [r0, #1]
1000f982:	7800      	ldrb	r0, [r0, #0]
1000f984:	0212      	lsls	r2, r2, #8
1000f986:	4302      	orrs	r2, r0
1000f988:	800a      	strh	r2, [r1, #0]
1000f98a:	78da      	ldrb	r2, [r3, #3]
1000f98c:	7898      	ldrb	r0, [r3, #2]
1000f98e:	0212      	lsls	r2, r2, #8
1000f990:	4302      	orrs	r2, r0
1000f992:	804a      	strh	r2, [r1, #2]
1000f994:	795a      	ldrb	r2, [r3, #5]
1000f996:	7918      	ldrb	r0, [r3, #4]
1000f998:	0212      	lsls	r2, r2, #8
1000f99a:	4302      	orrs	r2, r0
1000f99c:	808a      	strh	r2, [r1, #4]
1000f99e:	1d88      	adds	r0, r1, #6
1000f9a0:	1d99      	adds	r1, r3, #6
1000f9a2:	4b01      	ldr	r3, [pc, #4]	; (1000f9a8 <l2cc_data_received_handler+0x2c>)
1000f9a4:	4798      	blx	r3
1000f9a6:	bd08      	pop	{r3, pc}
1000f9a8:	100155bb 	.word	0x100155bb

1000f9ac <at_ble_authenticate>:
1000f9ac:	b5f0      	push	{r4, r5, r6, r7, lr}
1000f9ae:	1c0c      	adds	r4, r1, #0
1000f9b0:	211f      	movs	r1, #31
1000f9b2:	b08b      	sub	sp, #44	; 0x2c
1000f9b4:	9307      	str	r3, [sp, #28]
1000f9b6:	ab02      	add	r3, sp, #8
1000f9b8:	18c9      	adds	r1, r1, r3
1000f9ba:	230f      	movs	r3, #15
1000f9bc:	700b      	strb	r3, [r1, #0]
1000f9be:	4b40      	ldr	r3, [pc, #256]	; (1000fac0 <at_ble_authenticate+0x114>)
1000f9c0:	1c05      	adds	r5, r0, #0
1000f9c2:	1c16      	adds	r6, r2, #0
1000f9c4:	4798      	blx	r3
1000f9c6:	1c07      	adds	r7, r0, #0
1000f9c8:	2001      	movs	r0, #1
1000f9ca:	2f07      	cmp	r7, #7
1000f9cc:	d875      	bhi.n	1000faba <at_ble_authenticate+0x10e>
1000f9ce:	2c00      	cmp	r4, #0
1000f9d0:	d113      	bne.n	1000f9fa <at_ble_authenticate+0x4e>
1000f9d2:	2312      	movs	r3, #18
1000f9d4:	435f      	muls	r7, r3
1000f9d6:	4b3b      	ldr	r3, [pc, #236]	; (1000fac4 <at_ble_authenticate+0x118>)
1000f9d8:	5cfb      	ldrb	r3, [r7, r3]
1000f9da:	4283      	cmp	r3, r0
1000f9dc:	d001      	beq.n	1000f9e2 <at_ble_authenticate+0x36>
1000f9de:	20cf      	movs	r0, #207	; 0xcf
1000f9e0:	e06b      	b.n	1000faba <at_ble_authenticate+0x10e>
1000f9e2:	9504      	str	r5, [sp, #16]
1000f9e4:	9400      	str	r4, [sp, #0]
1000f9e6:	9401      	str	r4, [sp, #4]
1000f9e8:	9402      	str	r4, [sp, #8]
1000f9ea:	9403      	str	r4, [sp, #12]
1000f9ec:	1c20      	adds	r0, r4, #0
1000f9ee:	1c21      	adds	r1, r4, #0
1000f9f0:	1c22      	adds	r2, r4, #0
1000f9f2:	1c23      	adds	r3, r4, #0
1000f9f4:	4d34      	ldr	r5, [pc, #208]	; (1000fac8 <at_ble_authenticate+0x11c>)
1000f9f6:	47a8      	blx	r5
1000f9f8:	e05e      	b.n	1000fab8 <at_ble_authenticate+0x10c>
1000f9fa:	7922      	ldrb	r2, [r4, #4]
1000f9fc:	2a06      	cmp	r2, #6
1000f9fe:	d9ee      	bls.n	1000f9de <at_ble_authenticate+0x32>
1000fa00:	7963      	ldrb	r3, [r4, #5]
1000fa02:	2b10      	cmp	r3, #16
1000fa04:	d8eb      	bhi.n	1000f9de <at_ble_authenticate+0x32>
1000fa06:	429a      	cmp	r2, r3
1000fa08:	d8e9      	bhi.n	1000f9de <at_ble_authenticate+0x32>
1000fa0a:	7a23      	ldrb	r3, [r4, #8]
1000fa0c:	2b04      	cmp	r3, #4
1000fa0e:	d8e6      	bhi.n	1000f9de <at_ble_authenticate+0x32>
1000fa10:	79a3      	ldrb	r3, [r4, #6]
1000fa12:	2b07      	cmp	r3, #7
1000fa14:	d8e3      	bhi.n	1000f9de <at_ble_authenticate+0x32>
1000fa16:	79e3      	ldrb	r3, [r4, #7]
1000fa18:	2b07      	cmp	r3, #7
1000fa1a:	d8e0      	bhi.n	1000f9de <at_ble_authenticate+0x32>
1000fa1c:	78a3      	ldrb	r3, [r4, #2]
1000fa1e:	2b00      	cmp	r3, #0
1000fa20:	d006      	beq.n	1000fa30 <at_ble_authenticate+0x84>
1000fa22:	2e00      	cmp	r6, #0
1000fa24:	d0db      	beq.n	1000f9de <at_ble_authenticate+0x32>
1000fa26:	4829      	ldr	r0, [pc, #164]	; (1000facc <at_ble_authenticate+0x120>)
1000fa28:	1c31      	adds	r1, r6, #0
1000fa2a:	221c      	movs	r2, #28
1000fa2c:	4b28      	ldr	r3, [pc, #160]	; (1000fad0 <at_ble_authenticate+0x124>)
1000fa2e:	4798      	blx	r3
1000fa30:	9b07      	ldr	r3, [sp, #28]
1000fa32:	2b00      	cmp	r3, #0
1000fa34:	d005      	beq.n	1000fa42 <at_ble_authenticate+0x96>
1000fa36:	4827      	ldr	r0, [pc, #156]	; (1000fad4 <at_ble_authenticate+0x128>)
1000fa38:	1c19      	adds	r1, r3, #0
1000fa3a:	309a      	adds	r0, #154	; 0x9a
1000fa3c:	2210      	movs	r2, #16
1000fa3e:	4b24      	ldr	r3, [pc, #144]	; (1000fad0 <at_ble_authenticate+0x124>)
1000fa40:	4798      	blx	r3
1000fa42:	7863      	ldrb	r3, [r4, #1]
1000fa44:	78a2      	ldrb	r2, [r4, #2]
1000fa46:	009b      	lsls	r3, r3, #2
1000fa48:	4313      	orrs	r3, r2
1000fa4a:	2212      	movs	r2, #18
1000fa4c:	4357      	muls	r7, r2
1000fa4e:	4a1d      	ldr	r2, [pc, #116]	; (1000fac4 <at_ble_authenticate+0x118>)
1000fa50:	b2db      	uxtb	r3, r3
1000fa52:	5cba      	ldrb	r2, [r7, r2]
1000fa54:	2a00      	cmp	r2, #0
1000fa56:	d116      	bne.n	1000fa86 <at_ble_authenticate+0xda>
1000fa58:	79a0      	ldrb	r0, [r4, #6]
1000fa5a:	0742      	lsls	r2, r0, #29
1000fa5c:	d502      	bpl.n	1000fa64 <at_ble_authenticate+0xb8>
1000fa5e:	9a07      	ldr	r2, [sp, #28]
1000fa60:	2a00      	cmp	r2, #0
1000fa62:	d0bc      	beq.n	1000f9de <at_ble_authenticate+0x32>
1000fa64:	07c2      	lsls	r2, r0, #31
1000fa66:	d501      	bpl.n	1000fa6c <at_ble_authenticate+0xc0>
1000fa68:	2e00      	cmp	r6, #0
1000fa6a:	d0b8      	beq.n	1000f9de <at_ble_authenticate+0x32>
1000fa6c:	7966      	ldrb	r6, [r4, #5]
1000fa6e:	7821      	ldrb	r1, [r4, #0]
1000fa70:	78e2      	ldrb	r2, [r4, #3]
1000fa72:	9600      	str	r6, [sp, #0]
1000fa74:	9001      	str	r0, [sp, #4]
1000fa76:	79e0      	ldrb	r0, [r4, #7]
1000fa78:	9002      	str	r0, [sp, #8]
1000fa7a:	7a20      	ldrb	r0, [r4, #8]
1000fa7c:	4c16      	ldr	r4, [pc, #88]	; (1000fad8 <at_ble_authenticate+0x12c>)
1000fa7e:	9003      	str	r0, [sp, #12]
1000fa80:	1c28      	adds	r0, r5, #0
1000fa82:	47a0      	blx	r4
1000fa84:	e018      	b.n	1000fab8 <at_ble_authenticate+0x10c>
1000fa86:	2a01      	cmp	r2, #1
1000fa88:	d1a9      	bne.n	1000f9de <at_ble_authenticate+0x32>
1000fa8a:	79e0      	ldrb	r0, [r4, #7]
1000fa8c:	0742      	lsls	r2, r0, #29
1000fa8e:	d502      	bpl.n	1000fa96 <at_ble_authenticate+0xea>
1000fa90:	9a07      	ldr	r2, [sp, #28]
1000fa92:	2a00      	cmp	r2, #0
1000fa94:	d0a3      	beq.n	1000f9de <at_ble_authenticate+0x32>
1000fa96:	07c2      	lsls	r2, r0, #31
1000fa98:	d501      	bpl.n	1000fa9e <at_ble_authenticate+0xf2>
1000fa9a:	2e00      	cmp	r6, #0
1000fa9c:	d09f      	beq.n	1000f9de <at_ble_authenticate+0x32>
1000fa9e:	7966      	ldrb	r6, [r4, #5]
1000faa0:	7821      	ldrb	r1, [r4, #0]
1000faa2:	78e2      	ldrb	r2, [r4, #3]
1000faa4:	9600      	str	r6, [sp, #0]
1000faa6:	79a6      	ldrb	r6, [r4, #6]
1000faa8:	9002      	str	r0, [sp, #8]
1000faaa:	9601      	str	r6, [sp, #4]
1000faac:	7a20      	ldrb	r0, [r4, #8]
1000faae:	9504      	str	r5, [sp, #16]
1000fab0:	9003      	str	r0, [sp, #12]
1000fab2:	4c05      	ldr	r4, [pc, #20]	; (1000fac8 <at_ble_authenticate+0x11c>)
1000fab4:	2001      	movs	r0, #1
1000fab6:	47a0      	blx	r4
1000fab8:	2000      	movs	r0, #0
1000faba:	b00b      	add	sp, #44	; 0x2c
1000fabc:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fabe:	46c0      	nop			; (mov r8, r8)
1000fac0:	1000fead 	.word	0x1000fead
1000fac4:	1001a312 	.word	0x1001a312
1000fac8:	1001041d 	.word	0x1001041d
1000facc:	1001a420 	.word	0x1001a420
1000fad0:	100155bb 	.word	0x100155bb
1000fad4:	1001a3a2 	.word	0x1001a3a2
1000fad8:	100101fd 	.word	0x100101fd

1000fadc <at_ble_pair_key_reply>:
1000fadc:	b5f0      	push	{r4, r5, r6, r7, lr}
1000fade:	b085      	sub	sp, #20
1000fae0:	1c05      	adds	r5, r0, #0
1000fae2:	1c0c      	adds	r4, r1, #0
1000fae4:	1c16      	adds	r6, r2, #0
1000fae6:	2100      	movs	r1, #0
1000fae8:	4668      	mov	r0, sp
1000faea:	2210      	movs	r2, #16
1000faec:	4b18      	ldr	r3, [pc, #96]	; (1000fb50 <at_ble_pair_key_reply+0x74>)
1000faee:	4798      	blx	r3
1000faf0:	2101      	movs	r1, #1
1000faf2:	2e00      	cmp	r6, #0
1000faf4:	d101      	bne.n	1000fafa <at_ble_pair_key_reply+0x1e>
1000faf6:	1c31      	adds	r1, r6, #0
1000faf8:	466e      	mov	r6, sp
1000fafa:	2c00      	cmp	r4, #0
1000fafc:	d116      	bne.n	1000fb2c <at_ble_pair_key_reply+0x50>
1000fafe:	2701      	movs	r7, #1
1000fb00:	1c23      	adds	r3, r4, #0
1000fb02:	1d70      	adds	r0, r6, #5
1000fb04:	3e01      	subs	r6, #1
1000fb06:	7802      	ldrb	r2, [r0, #0]
1000fb08:	3801      	subs	r0, #1
1000fb0a:	3a30      	subs	r2, #48	; 0x30
1000fb0c:	437a      	muls	r2, r7
1000fb0e:	189b      	adds	r3, r3, r2
1000fb10:	220a      	movs	r2, #10
1000fb12:	4357      	muls	r7, r2
1000fb14:	42b0      	cmp	r0, r6
1000fb16:	d1f6      	bne.n	1000fb06 <at_ble_pair_key_reply+0x2a>
1000fb18:	466a      	mov	r2, sp
1000fb1a:	4668      	mov	r0, sp
1000fb1c:	7013      	strb	r3, [r2, #0]
1000fb1e:	0a1a      	lsrs	r2, r3, #8
1000fb20:	7042      	strb	r2, [r0, #1]
1000fb22:	0c1a      	lsrs	r2, r3, #16
1000fb24:	0e1b      	lsrs	r3, r3, #24
1000fb26:	7082      	strb	r2, [r0, #2]
1000fb28:	70c3      	strb	r3, [r0, #3]
1000fb2a:	e009      	b.n	1000fb40 <at_ble_pair_key_reply+0x64>
1000fb2c:	20cf      	movs	r0, #207	; 0xcf
1000fb2e:	2c01      	cmp	r4, #1
1000fb30:	d10c      	bne.n	1000fb4c <at_ble_pair_key_reply+0x70>
1000fb32:	2300      	movs	r3, #0
1000fb34:	4668      	mov	r0, sp
1000fb36:	5cf2      	ldrb	r2, [r6, r3]
1000fb38:	54c2      	strb	r2, [r0, r3]
1000fb3a:	3301      	adds	r3, #1
1000fb3c:	2b10      	cmp	r3, #16
1000fb3e:	d1f9      	bne.n	1000fb34 <at_ble_pair_key_reply+0x58>
1000fb40:	2004      	movs	r0, #4
1000fb42:	466a      	mov	r2, sp
1000fb44:	1c2b      	adds	r3, r5, #0
1000fb46:	4c03      	ldr	r4, [pc, #12]	; (1000fb54 <at_ble_pair_key_reply+0x78>)
1000fb48:	47a0      	blx	r4
1000fb4a:	2000      	movs	r0, #0
1000fb4c:	b005      	add	sp, #20
1000fb4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
1000fb50:	100155cd 	.word	0x100155cd
1000fb54:	10010499 	.word	0x10010499

1000fb58 <at_ble_send_slave_sec_request>:
1000fb58:	b570      	push	{r4, r5, r6, lr}
1000fb5a:	4b0c      	ldr	r3, [pc, #48]	; (1000fb8c <at_ble_send_slave_sec_request+0x34>)
1000fb5c:	1c0e      	adds	r6, r1, #0
1000fb5e:	2100      	movs	r1, #0
1000fb60:	1c05      	adds	r5, r0, #0
1000fb62:	1c14      	adds	r4, r2, #0
1000fb64:	4798      	blx	r3
1000fb66:	2301      	movs	r3, #1
1000fb68:	2807      	cmp	r0, #7
1000fb6a:	d80d      	bhi.n	1000fb88 <at_ble_send_slave_sec_request+0x30>
1000fb6c:	3311      	adds	r3, #17
1000fb6e:	4358      	muls	r0, r3
1000fb70:	4b07      	ldr	r3, [pc, #28]	; (1000fb90 <at_ble_send_slave_sec_request+0x38>)
1000fb72:	5cc2      	ldrb	r2, [r0, r3]
1000fb74:	23e0      	movs	r3, #224	; 0xe0
1000fb76:	2a01      	cmp	r2, #1
1000fb78:	d106      	bne.n	1000fb88 <at_ble_send_slave_sec_request+0x30>
1000fb7a:	00b1      	lsls	r1, r6, #2
1000fb7c:	430c      	orrs	r4, r1
1000fb7e:	4b05      	ldr	r3, [pc, #20]	; (1000fb94 <at_ble_send_slave_sec_request+0x3c>)
1000fb80:	b2e1      	uxtb	r1, r4
1000fb82:	1c28      	adds	r0, r5, #0
1000fb84:	4798      	blx	r3
1000fb86:	2300      	movs	r3, #0
1000fb88:	1c18      	adds	r0, r3, #0
1000fb8a:	bd70      	pop	{r4, r5, r6, pc}
1000fb8c:	1000fead 	.word	0x1000fead
1000fb90:	1001a312 	.word	0x1001a312
1000fb94:	100104e9 	.word	0x100104e9

1000fb98 <at_ble_encryption_start>:
1000fb98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fb9a:	23cf      	movs	r3, #207	; 0xcf
1000fb9c:	2900      	cmp	r1, #0
1000fb9e:	d02b      	beq.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fba0:	2a05      	cmp	r2, #5
1000fba2:	d829      	bhi.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fba4:	2701      	movs	r7, #1
1000fba6:	1c3d      	adds	r5, r7, #0
1000fba8:	2433      	movs	r4, #51	; 0x33
1000fbaa:	4095      	lsls	r5, r2
1000fbac:	4225      	tst	r5, r4
1000fbae:	d023      	beq.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fbb0:	7e8c      	ldrb	r4, [r1, #26]
1000fbb2:	3c07      	subs	r4, #7
1000fbb4:	2c09      	cmp	r4, #9
1000fbb6:	d81f      	bhi.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fbb8:	4b10      	ldr	r3, [pc, #64]	; (1000fbfc <at_ble_encryption_start+0x64>)
1000fbba:	1c0c      	adds	r4, r1, #0
1000fbbc:	2100      	movs	r1, #0
1000fbbe:	1c15      	adds	r5, r2, #0
1000fbc0:	1c06      	adds	r6, r0, #0
1000fbc2:	4798      	blx	r3
1000fbc4:	1c3b      	adds	r3, r7, #0
1000fbc6:	2807      	cmp	r0, #7
1000fbc8:	d816      	bhi.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fbca:	2312      	movs	r3, #18
1000fbcc:	4358      	muls	r0, r3
1000fbce:	4b0c      	ldr	r3, [pc, #48]	; (1000fc00 <at_ble_encryption_start+0x68>)
1000fbd0:	5cc7      	ldrb	r7, [r0, r3]
1000fbd2:	23e0      	movs	r3, #224	; 0xe0
1000fbd4:	2f00      	cmp	r7, #0
1000fbd6:	d10f      	bne.n	1000fbf8 <at_ble_encryption_start+0x60>
1000fbd8:	1c21      	adds	r1, r4, #0
1000fbda:	221c      	movs	r2, #28
1000fbdc:	4b09      	ldr	r3, [pc, #36]	; (1000fc04 <at_ble_encryption_start+0x6c>)
1000fbde:	480a      	ldr	r0, [pc, #40]	; (1000fc08 <at_ble_encryption_start+0x70>)
1000fbe0:	4798      	blx	r3
1000fbe2:	1c23      	adds	r3, r4, #0
1000fbe4:	7ea1      	ldrb	r1, [r4, #26]
1000fbe6:	8a22      	ldrh	r2, [r4, #16]
1000fbe8:	3312      	adds	r3, #18
1000fbea:	9100      	str	r1, [sp, #0]
1000fbec:	9501      	str	r5, [sp, #4]
1000fbee:	1c21      	adds	r1, r4, #0
1000fbf0:	1c30      	adds	r0, r6, #0
1000fbf2:	4c06      	ldr	r4, [pc, #24]	; (1000fc0c <at_ble_encryption_start+0x74>)
1000fbf4:	47a0      	blx	r4
1000fbf6:	1c3b      	adds	r3, r7, #0
1000fbf8:	1c18      	adds	r0, r3, #0
1000fbfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fbfc:	1000fead 	.word	0x1000fead
1000fc00:	1001a312 	.word	0x1001a312
1000fc04:	100155bb 	.word	0x100155bb
1000fc08:	1001a420 	.word	0x1001a420
1000fc0c:	10010529 	.word	0x10010529

1000fc10 <at_ble_encryption_request_reply>:
1000fc10:	b573      	push	{r0, r1, r4, r5, r6, lr}
1000fc12:	24cf      	movs	r4, #207	; 0xcf
1000fc14:	2b00      	cmp	r3, #0
1000fc16:	d011      	beq.n	1000fc3c <at_ble_encryption_request_reply+0x2c>
1000fc18:	2a00      	cmp	r2, #0
1000fc1a:	d00a      	beq.n	1000fc32 <at_ble_encryption_request_reply+0x22>
1000fc1c:	2905      	cmp	r1, #5
1000fc1e:	d80d      	bhi.n	1000fc3c <at_ble_encryption_request_reply+0x2c>
1000fc20:	2501      	movs	r5, #1
1000fc22:	2633      	movs	r6, #51	; 0x33
1000fc24:	408d      	lsls	r5, r1
1000fc26:	4235      	tst	r5, r6
1000fc28:	d008      	beq.n	1000fc3c <at_ble_encryption_request_reply+0x2c>
1000fc2a:	7e9d      	ldrb	r5, [r3, #26]
1000fc2c:	3d07      	subs	r5, #7
1000fc2e:	2d09      	cmp	r5, #9
1000fc30:	d804      	bhi.n	1000fc3c <at_ble_encryption_request_reply+0x2c>
1000fc32:	7e9c      	ldrb	r4, [r3, #26]
1000fc34:	9400      	str	r4, [sp, #0]
1000fc36:	4c02      	ldr	r4, [pc, #8]	; (1000fc40 <at_ble_encryption_request_reply+0x30>)
1000fc38:	47a0      	blx	r4
1000fc3a:	2400      	movs	r4, #0
1000fc3c:	1c20      	adds	r0, r4, #0
1000fc3e:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1000fc40:	100105e5 	.word	0x100105e5

1000fc44 <rx_callback>:
1000fc44:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fc46:	8883      	ldrh	r3, [r0, #4]
1000fc48:	1c01      	adds	r1, r0, #0
1000fc4a:	9301      	str	r3, [sp, #4]
1000fc4c:	88c5      	ldrh	r5, [r0, #6]
1000fc4e:	8806      	ldrh	r6, [r0, #0]
1000fc50:	2d00      	cmp	r5, #0
1000fc52:	d10f      	bne.n	1000fc74 <rx_callback+0x30>
1000fc54:	1c19      	adds	r1, r3, #0
1000fc56:	1c30      	adds	r0, r6, #0
1000fc58:	4b19      	ldr	r3, [pc, #100]	; (1000fcc0 <rx_callback+0x7c>)
1000fc5a:	1c2a      	adds	r2, r5, #0
1000fc5c:	4798      	blx	r3
1000fc5e:	1e03      	subs	r3, r0, #0
1000fc60:	d105      	bne.n	1000fc6e <rx_callback+0x2a>
1000fc62:	1c30      	adds	r0, r6, #0
1000fc64:	9901      	ldr	r1, [sp, #4]
1000fc66:	1c1a      	adds	r2, r3, #0
1000fc68:	4c16      	ldr	r4, [pc, #88]	; (1000fcc4 <rx_callback+0x80>)
1000fc6a:	47a0      	blx	r4
1000fc6c:	e027      	b.n	1000fcbe <rx_callback+0x7a>
1000fc6e:	4b16      	ldr	r3, [pc, #88]	; (1000fcc8 <rx_callback+0x84>)
1000fc70:	4798      	blx	r3
1000fc72:	e024      	b.n	1000fcbe <rx_callback+0x7a>
1000fc74:	4c15      	ldr	r4, [pc, #84]	; (1000fccc <rx_callback+0x88>)
1000fc76:	4a16      	ldr	r2, [pc, #88]	; (1000fcd0 <rx_callback+0x8c>)
1000fc78:	6823      	ldr	r3, [r4, #0]
1000fc7a:	6812      	ldr	r2, [r2, #0]
1000fc7c:	18eb      	adds	r3, r5, r3
1000fc7e:	4293      	cmp	r3, r2
1000fc80:	d901      	bls.n	1000fc86 <rx_callback+0x42>
1000fc82:	2300      	movs	r3, #0
1000fc84:	6023      	str	r3, [r4, #0]
1000fc86:	4f13      	ldr	r7, [pc, #76]	; (1000fcd4 <rx_callback+0x90>)
1000fc88:	6822      	ldr	r2, [r4, #0]
1000fc8a:	683b      	ldr	r3, [r7, #0]
1000fc8c:	3108      	adds	r1, #8
1000fc8e:	1898      	adds	r0, r3, r2
1000fc90:	1c2a      	adds	r2, r5, #0
1000fc92:	4b11      	ldr	r3, [pc, #68]	; (1000fcd8 <rx_callback+0x94>)
1000fc94:	4798      	blx	r3
1000fc96:	683b      	ldr	r3, [r7, #0]
1000fc98:	6822      	ldr	r2, [r4, #0]
1000fc9a:	1c30      	adds	r0, r6, #0
1000fc9c:	189a      	adds	r2, r3, r2
1000fc9e:	9901      	ldr	r1, [sp, #4]
1000fca0:	4b07      	ldr	r3, [pc, #28]	; (1000fcc0 <rx_callback+0x7c>)
1000fca2:	4798      	blx	r3
1000fca4:	2800      	cmp	r0, #0
1000fca6:	d1e2      	bne.n	1000fc6e <rx_callback+0x2a>
1000fca8:	6823      	ldr	r3, [r4, #0]
1000fcaa:	683a      	ldr	r2, [r7, #0]
1000fcac:	1c30      	adds	r0, r6, #0
1000fcae:	18d2      	adds	r2, r2, r3
1000fcb0:	9901      	ldr	r1, [sp, #4]
1000fcb2:	1c2b      	adds	r3, r5, #0
1000fcb4:	4e03      	ldr	r6, [pc, #12]	; (1000fcc4 <rx_callback+0x80>)
1000fcb6:	47b0      	blx	r6
1000fcb8:	6823      	ldr	r3, [r4, #0]
1000fcba:	18ed      	adds	r5, r5, r3
1000fcbc:	6025      	str	r5, [r4, #0]
1000fcbe:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
1000fcc0:	1000e2d9 	.word	0x1000e2d9
1000fcc4:	1000e251 	.word	0x1000e251
1000fcc8:	1000dc09 	.word	0x1000dc09
1000fccc:	1001a47c 	.word	0x1001a47c
1000fcd0:	100193a0 	.word	0x100193a0
1000fcd4:	1001939c 	.word	0x1001939c
1000fcd8:	100155bb 	.word	0x100155bb

1000fcdc <interface_send>:
1000fcdc:	b508      	push	{r3, lr}
1000fcde:	4b02      	ldr	r3, [pc, #8]	; (1000fce8 <interface_send+0xc>)
1000fce0:	4798      	blx	r3
1000fce2:	2000      	movs	r0, #0
1000fce4:	bd08      	pop	{r3, pc}
1000fce6:	46c0      	nop			; (mov r8, r8)
1000fce8:	1000d901 	.word	0x1000d901

1000fcec <interface_init>:
1000fcec:	2280      	movs	r2, #128	; 0x80
1000fcee:	b510      	push	{r4, lr}
1000fcf0:	2100      	movs	r1, #0
1000fcf2:	1c04      	adds	r4, r0, #0
1000fcf4:	0092      	lsls	r2, r2, #2
1000fcf6:	4b08      	ldr	r3, [pc, #32]	; (1000fd18 <interface_init+0x2c>)
1000fcf8:	4808      	ldr	r0, [pc, #32]	; (1000fd1c <interface_init+0x30>)
1000fcfa:	4798      	blx	r3
1000fcfc:	2200      	movs	r2, #0
1000fcfe:	4b08      	ldr	r3, [pc, #32]	; (1000fd20 <interface_init+0x34>)
1000fd00:	601a      	str	r2, [r3, #0]
1000fd02:	4a08      	ldr	r2, [pc, #32]	; (1000fd24 <interface_init+0x38>)
1000fd04:	4b08      	ldr	r3, [pc, #32]	; (1000fd28 <interface_init+0x3c>)
1000fd06:	601a      	str	r2, [r3, #0]
1000fd08:	4b08      	ldr	r3, [pc, #32]	; (1000fd2c <interface_init+0x40>)
1000fd0a:	6922      	ldr	r2, [r4, #16]
1000fd0c:	601a      	str	r2, [r3, #0]
1000fd0e:	6962      	ldr	r2, [r4, #20]
1000fd10:	4b07      	ldr	r3, [pc, #28]	; (1000fd30 <interface_init+0x44>)
1000fd12:	601a      	str	r2, [r3, #0]
1000fd14:	bd10      	pop	{r4, pc}
1000fd16:	46c0      	nop			; (mov r8, r8)
1000fd18:	100155cd 	.word	0x100155cd
1000fd1c:	1001a680 	.word	0x1001a680
1000fd20:	1001a47c 	.word	0x1001a47c
1000fd24:	1001a480 	.word	0x1001a480
1000fd28:	10017900 	.word	0x10017900
1000fd2c:	1001939c 	.word	0x1001939c
1000fd30:	100193a0 	.word	0x100193a0

1000fd34 <platform_cmd_cmpl_signal>:
1000fd34:	2201      	movs	r2, #1
1000fd36:	4b01      	ldr	r3, [pc, #4]	; (1000fd3c <platform_cmd_cmpl_signal+0x8>)
1000fd38:	601a      	str	r2, [r3, #0]
1000fd3a:	4770      	bx	lr
1000fd3c:	100193a4 	.word	0x100193a4

1000fd40 <platform_cmd_cmpl_wait>:
1000fd40:	b510      	push	{r4, lr}
1000fd42:	1c04      	adds	r4, r0, #0
1000fd44:	4b07      	ldr	r3, [pc, #28]	; (1000fd64 <platform_cmd_cmpl_wait+0x24>)
1000fd46:	681a      	ldr	r2, [r3, #0]
1000fd48:	2a01      	cmp	r2, #1
1000fd4a:	d003      	beq.n	1000fd54 <platform_cmd_cmpl_wait+0x14>
1000fd4c:	4b06      	ldr	r3, [pc, #24]	; (1000fd68 <platform_cmd_cmpl_wait+0x28>)
1000fd4e:	2000      	movs	r0, #0
1000fd50:	4798      	blx	r3
1000fd52:	e7f7      	b.n	1000fd44 <platform_cmd_cmpl_wait+0x4>
1000fd54:	6819      	ldr	r1, [r3, #0]
1000fd56:	2901      	cmp	r1, #1
1000fd58:	d102      	bne.n	1000fd60 <platform_cmd_cmpl_wait+0x20>
1000fd5a:	2200      	movs	r2, #0
1000fd5c:	601a      	str	r2, [r3, #0]
1000fd5e:	e000      	b.n	1000fd62 <platform_cmd_cmpl_wait+0x22>
1000fd60:	7022      	strb	r2, [r4, #0]
1000fd62:	bd10      	pop	{r4, pc}
1000fd64:	100193a4 	.word	0x100193a4
1000fd68:	1000d991 	.word	0x1000d991

1000fd6c <start_timer>:
1000fd6c:	4770      	bx	lr

1000fd6e <stop_timer>:
1000fd6e:	4770      	bx	lr

1000fd70 <dbg_le_set_bd_addr_req_handler>:
1000fd70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000fd72:	466b      	mov	r3, sp
1000fd74:	1dde      	adds	r6, r3, #7
1000fd76:	2300      	movs	r3, #0
1000fd78:	7033      	strb	r3, [r6, #0]
1000fd7a:	230f      	movs	r3, #15
1000fd7c:	4c13      	ldr	r4, [pc, #76]	; (1000fdcc <dbg_le_set_bd_addr_req_handler+0x5c>)
1000fd7e:	2703      	movs	r7, #3
1000fd80:	7023      	strb	r3, [r4, #0]
1000fd82:	2300      	movs	r3, #0
1000fd84:	70e3      	strb	r3, [r4, #3]
1000fd86:	4b12      	ldr	r3, [pc, #72]	; (1000fdd0 <dbg_le_set_bd_addr_req_handler+0x60>)
1000fd88:	1c01      	adds	r1, r0, #0
1000fd8a:	881a      	ldrh	r2, [r3, #0]
1000fd8c:	881b      	ldrh	r3, [r3, #0]
1000fd8e:	7122      	strb	r2, [r4, #4]
1000fd90:	0a1b      	lsrs	r3, r3, #8
1000fd92:	2206      	movs	r2, #6
1000fd94:	7163      	strb	r3, [r4, #5]
1000fd96:	480f      	ldr	r0, [pc, #60]	; (1000fdd4 <dbg_le_set_bd_addr_req_handler+0x64>)
1000fd98:	4b0f      	ldr	r3, [pc, #60]	; (1000fdd8 <dbg_le_set_bd_addr_req_handler+0x68>)
1000fd9a:	7067      	strb	r7, [r4, #1]
1000fd9c:	70a7      	strb	r7, [r4, #2]
1000fd9e:	4798      	blx	r3
1000fda0:	4d0e      	ldr	r5, [pc, #56]	; (1000fddc <dbg_le_set_bd_addr_req_handler+0x6c>)
1000fda2:	4b0f      	ldr	r3, [pc, #60]	; (1000fde0 <dbg_le_set_bd_addr_req_handler+0x70>)
1000fda4:	210e      	movs	r1, #14
1000fda6:	802b      	strh	r3, [r5, #0]
1000fda8:	2306      	movs	r3, #6
1000fdaa:	71a3      	strb	r3, [r4, #6]
1000fdac:	2300      	movs	r3, #0
1000fdae:	1c20      	adds	r0, r4, #0
1000fdb0:	71e3      	strb	r3, [r4, #7]
1000fdb2:	4b0c      	ldr	r3, [pc, #48]	; (1000fde4 <dbg_le_set_bd_addr_req_handler+0x74>)
1000fdb4:	80af      	strh	r7, [r5, #4]
1000fdb6:	4798      	blx	r3
1000fdb8:	1c30      	adds	r0, r6, #0
1000fdba:	4b0b      	ldr	r3, [pc, #44]	; (1000fde8 <dbg_le_set_bd_addr_req_handler+0x78>)
1000fdbc:	4798      	blx	r3
1000fdbe:	7833      	ldrb	r3, [r6, #0]
1000fdc0:	20e2      	movs	r0, #226	; 0xe2
1000fdc2:	2b00      	cmp	r3, #0
1000fdc4:	d101      	bne.n	1000fdca <dbg_le_set_bd_addr_req_handler+0x5a>
1000fdc6:	68ab      	ldr	r3, [r5, #8]
1000fdc8:	7818      	ldrb	r0, [r3, #0]
1000fdca:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000fdcc:	1001a680 	.word	0x1001a680
1000fdd0:	1001a310 	.word	0x1001a310
1000fdd4:	1001a688 	.word	0x1001a688
1000fdd8:	100155bb 	.word	0x100155bb
1000fddc:	1001a304 	.word	0x1001a304
1000fde0:	00000329 	.word	0x00000329
1000fde4:	1000fcdd 	.word	0x1000fcdd
1000fde8:	1000fd41 	.word	0x1000fd41

1000fdec <gapc_get_dev_info_cfm.constprop.1>:
1000fdec:	b538      	push	{r3, r4, r5, lr}
1000fdee:	230b      	movs	r3, #11
1000fdf0:	4c27      	ldr	r4, [pc, #156]	; (1000fe90 <gapc_get_dev_info_cfm.constprop.1+0xa4>)
1000fdf2:	7023      	strb	r3, [r4, #0]
1000fdf4:	3303      	adds	r3, #3
1000fdf6:	7063      	strb	r3, [r4, #1]
1000fdf8:	3329      	adds	r3, #41	; 0x29
1000fdfa:	70a3      	strb	r3, [r4, #2]
1000fdfc:	4b25      	ldr	r3, [pc, #148]	; (1000fe94 <gapc_get_dev_info_cfm.constprop.1+0xa8>)
1000fdfe:	70e1      	strb	r1, [r4, #3]
1000fe00:	881a      	ldrh	r2, [r3, #0]
1000fe02:	881b      	ldrh	r3, [r3, #0]
1000fe04:	7122      	strb	r2, [r4, #4]
1000fe06:	0a1b      	lsrs	r3, r3, #8
1000fe08:	7163      	strb	r3, [r4, #5]
1000fe0a:	2300      	movs	r3, #0
1000fe0c:	7220      	strb	r0, [r4, #8]
1000fe0e:	7263      	strb	r3, [r4, #9]
1000fe10:	2801      	cmp	r0, #1
1000fe12:	d02b      	beq.n	1000fe6c <gapc_get_dev_info_cfm.constprop.1+0x80>
1000fe14:	4298      	cmp	r0, r3
1000fe16:	d01b      	beq.n	1000fe50 <gapc_get_dev_info_cfm.constprop.1+0x64>
1000fe18:	2802      	cmp	r0, #2
1000fe1a:	d12f      	bne.n	1000fe7c <gapc_get_dev_info_cfm.constprop.1+0x90>
1000fe1c:	4b1e      	ldr	r3, [pc, #120]	; (1000fe98 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fe1e:	2112      	movs	r1, #18
1000fe20:	1c1a      	adds	r2, r3, #0
1000fe22:	32ce      	adds	r2, #206	; 0xce
1000fe24:	8812      	ldrh	r2, [r2, #0]
1000fe26:	72a2      	strb	r2, [r4, #10]
1000fe28:	0a12      	lsrs	r2, r2, #8
1000fe2a:	72e2      	strb	r2, [r4, #11]
1000fe2c:	1c1a      	adds	r2, r3, #0
1000fe2e:	32d0      	adds	r2, #208	; 0xd0
1000fe30:	8812      	ldrh	r2, [r2, #0]
1000fe32:	7322      	strb	r2, [r4, #12]
1000fe34:	0a12      	lsrs	r2, r2, #8
1000fe36:	7362      	strb	r2, [r4, #13]
1000fe38:	1c1a      	adds	r2, r3, #0
1000fe3a:	32d2      	adds	r2, #210	; 0xd2
1000fe3c:	8812      	ldrh	r2, [r2, #0]
1000fe3e:	33d4      	adds	r3, #212	; 0xd4
1000fe40:	73a2      	strb	r2, [r4, #14]
1000fe42:	0a12      	lsrs	r2, r2, #8
1000fe44:	73e2      	strb	r2, [r4, #15]
1000fe46:	881b      	ldrh	r3, [r3, #0]
1000fe48:	7423      	strb	r3, [r4, #16]
1000fe4a:	0a1b      	lsrs	r3, r3, #8
1000fe4c:	7463      	strb	r3, [r4, #17]
1000fe4e:	e016      	b.n	1000fe7e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fe50:	4b11      	ldr	r3, [pc, #68]	; (1000fe98 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fe52:	4912      	ldr	r1, [pc, #72]	; (1000fe9c <gapc_get_dev_info_cfm.constprop.1+0xb0>)
1000fe54:	33aa      	adds	r3, #170	; 0xaa
1000fe56:	881d      	ldrh	r5, [r3, #0]
1000fe58:	4811      	ldr	r0, [pc, #68]	; (1000fea0 <gapc_get_dev_info_cfm.constprop.1+0xb4>)
1000fe5a:	0a2b      	lsrs	r3, r5, #8
1000fe5c:	72a5      	strb	r5, [r4, #10]
1000fe5e:	72e3      	strb	r3, [r4, #11]
1000fe60:	1c2a      	adds	r2, r5, #0
1000fe62:	4b10      	ldr	r3, [pc, #64]	; (1000fea4 <gapc_get_dev_info_cfm.constprop.1+0xb8>)
1000fe64:	350c      	adds	r5, #12
1000fe66:	4798      	blx	r3
1000fe68:	b2a9      	uxth	r1, r5
1000fe6a:	e008      	b.n	1000fe7e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fe6c:	4b0a      	ldr	r3, [pc, #40]	; (1000fe98 <gapc_get_dev_info_cfm.constprop.1+0xac>)
1000fe6e:	210c      	movs	r1, #12
1000fe70:	33cc      	adds	r3, #204	; 0xcc
1000fe72:	881b      	ldrh	r3, [r3, #0]
1000fe74:	72a3      	strb	r3, [r4, #10]
1000fe76:	0a1b      	lsrs	r3, r3, #8
1000fe78:	72e3      	strb	r3, [r4, #11]
1000fe7a:	e000      	b.n	1000fe7e <gapc_get_dev_info_cfm.constprop.1+0x92>
1000fe7c:	210a      	movs	r1, #10
1000fe7e:	1c0b      	adds	r3, r1, #0
1000fe80:	3b08      	subs	r3, #8
1000fe82:	71a3      	strb	r3, [r4, #6]
1000fe84:	121b      	asrs	r3, r3, #8
1000fe86:	71e3      	strb	r3, [r4, #7]
1000fe88:	1c20      	adds	r0, r4, #0
1000fe8a:	4b07      	ldr	r3, [pc, #28]	; (1000fea8 <gapc_get_dev_info_cfm.constprop.1+0xbc>)
1000fe8c:	4798      	blx	r3
1000fe8e:	bd38      	pop	{r3, r4, r5, pc}
1000fe90:	1001a680 	.word	0x1001a680
1000fe94:	1001a310 	.word	0x1001a310
1000fe98:	1001a3a2 	.word	0x1001a3a2
1000fe9c:	1001a44e 	.word	0x1001a44e
1000fea0:	1001a68c 	.word	0x1001a68c
1000fea4:	100155bb 	.word	0x100155bb
1000fea8:	1000fcdd 	.word	0x1000fcdd

1000feac <check_ConnData_idx_role>:
1000feac:	4b0c      	ldr	r3, [pc, #48]	; (1000fee0 <check_ConnData_idx_role+0x34>)
1000feae:	b570      	push	{r4, r5, r6, lr}
1000feb0:	1c04      	adds	r4, r0, #0
1000feb2:	2008      	movs	r0, #8
1000feb4:	429c      	cmp	r4, r3
1000feb6:	d011      	beq.n	1000fedc <check_ConnData_idx_role+0x30>
1000feb8:	2300      	movs	r3, #0
1000feba:	2212      	movs	r2, #18
1000febc:	435a      	muls	r2, r3
1000febe:	4d09      	ldr	r5, [pc, #36]	; (1000fee4 <check_ConnData_idx_role+0x38>)
1000fec0:	b2d8      	uxtb	r0, r3
1000fec2:	1956      	adds	r6, r2, r5
1000fec4:	8976      	ldrh	r6, [r6, #10]
1000fec6:	42a6      	cmp	r6, r4
1000fec8:	d104      	bne.n	1000fed4 <check_ConnData_idx_role+0x28>
1000feca:	2900      	cmp	r1, #0
1000fecc:	d006      	beq.n	1000fedc <check_ConnData_idx_role+0x30>
1000fece:	5d53      	ldrb	r3, [r2, r5]
1000fed0:	700b      	strb	r3, [r1, #0]
1000fed2:	e003      	b.n	1000fedc <check_ConnData_idx_role+0x30>
1000fed4:	3301      	adds	r3, #1
1000fed6:	2b08      	cmp	r3, #8
1000fed8:	d1ef      	bne.n	1000feba <check_ConnData_idx_role+0xe>
1000feda:	1c18      	adds	r0, r3, #0
1000fedc:	bd70      	pop	{r4, r5, r6, pc}
1000fede:	46c0      	nop			; (mov r8, r8)
1000fee0:	0000ffff 	.word	0x0000ffff
1000fee4:	1001a312 	.word	0x1001a312

1000fee8 <check_ConnData_emptyEntry>:
1000fee8:	2300      	movs	r3, #0
1000feea:	2212      	movs	r2, #18
1000feec:	435a      	muls	r2, r3
1000feee:	4906      	ldr	r1, [pc, #24]	; (1000ff08 <check_ConnData_emptyEntry+0x20>)
1000fef0:	b2d8      	uxtb	r0, r3
1000fef2:	1852      	adds	r2, r2, r1
1000fef4:	8951      	ldrh	r1, [r2, #10]
1000fef6:	4a05      	ldr	r2, [pc, #20]	; (1000ff0c <check_ConnData_emptyEntry+0x24>)
1000fef8:	4291      	cmp	r1, r2
1000fefa:	d003      	beq.n	1000ff04 <check_ConnData_emptyEntry+0x1c>
1000fefc:	3301      	adds	r3, #1
1000fefe:	2b08      	cmp	r3, #8
1000ff00:	d1f3      	bne.n	1000feea <check_ConnData_emptyEntry+0x2>
1000ff02:	1c18      	adds	r0, r3, #0
1000ff04:	4770      	bx	lr
1000ff06:	46c0      	nop			; (mov r8, r8)
1000ff08:	1001a312 	.word	0x1001a312
1000ff0c:	0000ffff 	.word	0x0000ffff

1000ff10 <gapc_cmp_evt>:
1000ff10:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
1000ff12:	780b      	ldrb	r3, [r1, #0]
1000ff14:	1c05      	adds	r5, r0, #0
1000ff16:	1e58      	subs	r0, r3, #1
1000ff18:	784e      	ldrb	r6, [r1, #1]
1000ff1a:	280f      	cmp	r0, #15
1000ff1c:	d85a      	bhi.n	1000ffd4 <gapc_cmp_evt+0xc4>
1000ff1e:	1c14      	adds	r4, r2, #0
1000ff20:	f002 fcb4 	bl	1001288c <__gnu_thumb1_case_uqi>
1000ff24:	5858440a 	.word	0x5858440a
1000ff28:	4b584444 	.word	0x4b584444
1000ff2c:	0825122d 	.word	0x0825122d
1000ff30:	3e395858 	.word	0x3e395858
1000ff34:	203b      	movs	r0, #59	; 0x3b
1000ff36:	e04e      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff38:	203b      	movs	r0, #59	; 0x3b
1000ff3a:	2e00      	cmp	r6, #0
1000ff3c:	d04b      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff3e:	0a2d      	lsrs	r5, r5, #8
1000ff40:	8015      	strh	r5, [r2, #0]
1000ff42:	7096      	strb	r6, [r2, #2]
1000ff44:	3835      	subs	r0, #53	; 0x35
1000ff46:	e046      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff48:	466b      	mov	r3, sp
1000ff4a:	1ddf      	adds	r7, r3, #7
1000ff4c:	2301      	movs	r3, #1
1000ff4e:	0a2d      	lsrs	r5, r5, #8
1000ff50:	703b      	strb	r3, [r7, #0]
1000ff52:	1c28      	adds	r0, r5, #0
1000ff54:	1c39      	adds	r1, r7, #0
1000ff56:	4b20      	ldr	r3, [pc, #128]	; (1000ffd8 <gapc_cmp_evt+0xc8>)
1000ff58:	4798      	blx	r3
1000ff5a:	2807      	cmp	r0, #7
1000ff5c:	d803      	bhi.n	1000ff66 <gapc_cmp_evt+0x56>
1000ff5e:	783b      	ldrb	r3, [r7, #0]
1000ff60:	203b      	movs	r0, #59	; 0x3b
1000ff62:	2b00      	cmp	r3, #0
1000ff64:	d037      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff66:	8065      	strh	r5, [r4, #2]
1000ff68:	7126      	strb	r6, [r4, #4]
1000ff6a:	2009      	movs	r0, #9
1000ff6c:	e033      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff6e:	203b      	movs	r0, #59	; 0x3b
1000ff70:	2e00      	cmp	r6, #0
1000ff72:	d030      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff74:	0a2d      	lsrs	r5, r5, #8
1000ff76:	8015      	strh	r5, [r2, #0]
1000ff78:	7096      	strb	r6, [r2, #2]
1000ff7a:	382d      	subs	r0, #45	; 0x2d
1000ff7c:	e02b      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff7e:	203b      	movs	r0, #59	; 0x3b
1000ff80:	2e00      	cmp	r6, #0
1000ff82:	d028      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff84:	2300      	movs	r3, #0
1000ff86:	0a2d      	lsrs	r5, r5, #8
1000ff88:	8015      	strh	r5, [r2, #0]
1000ff8a:	7096      	strb	r6, [r2, #2]
1000ff8c:	8093      	strh	r3, [r2, #4]
1000ff8e:	80d3      	strh	r3, [r2, #6]
1000ff90:	8113      	strh	r3, [r2, #8]
1000ff92:	3834      	subs	r0, #52	; 0x34
1000ff94:	e01f      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff96:	203b      	movs	r0, #59	; 0x3b
1000ff98:	2e00      	cmp	r6, #0
1000ff9a:	d01c      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ff9c:	7216      	strb	r6, [r2, #8]
1000ff9e:	e003      	b.n	1000ffa8 <gapc_cmp_evt+0x98>
1000ffa0:	203b      	movs	r0, #59	; 0x3b
1000ffa2:	2e00      	cmp	r6, #0
1000ffa4:	d017      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffa6:	7116      	strb	r6, [r2, #4]
1000ffa8:	3812      	subs	r0, #18
1000ffaa:	e014      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffac:	203b      	movs	r0, #59	; 0x3b
1000ffae:	2e00      	cmp	r6, #0
1000ffb0:	d011      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffb2:	7093      	strb	r3, [r2, #2]
1000ffb4:	70d6      	strb	r6, [r2, #3]
1000ffb6:	382a      	subs	r0, #42	; 0x2a
1000ffb8:	e00d      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffba:	203b      	movs	r0, #59	; 0x3b
1000ffbc:	2e00      	cmp	r6, #0
1000ffbe:	d00a      	beq.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffc0:	0a2d      	lsrs	r5, r5, #8
1000ffc2:	7016      	strb	r6, [r2, #0]
1000ffc4:	8055      	strh	r5, [r2, #2]
1000ffc6:	1d10      	adds	r0, r2, #4
1000ffc8:	2100      	movs	r1, #0
1000ffca:	2205      	movs	r2, #5
1000ffcc:	4b03      	ldr	r3, [pc, #12]	; (1000ffdc <gapc_cmp_evt+0xcc>)
1000ffce:	4798      	blx	r3
1000ffd0:	2012      	movs	r0, #18
1000ffd2:	e000      	b.n	1000ffd6 <gapc_cmp_evt+0xc6>
1000ffd4:	2000      	movs	r0, #0
1000ffd6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
1000ffd8:	1000fead 	.word	0x1000fead
1000ffdc:	100155cd 	.word	0x100155cd

1000ffe0 <gapc_connection_cfm_handler>:
1000ffe0:	b5f0      	push	{r4, r5, r6, r7, lr}
1000ffe2:	b085      	sub	sp, #20
1000ffe4:	1c1d      	adds	r5, r3, #0
1000ffe6:	ab0a      	add	r3, sp, #40	; 0x28
1000ffe8:	781b      	ldrb	r3, [r3, #0]
1000ffea:	9201      	str	r2, [sp, #4]
1000ffec:	9302      	str	r3, [sp, #8]
1000ffee:	ab0b      	add	r3, sp, #44	; 0x2c
1000fff0:	781b      	ldrb	r3, [r3, #0]
1000fff2:	1c07      	adds	r7, r0, #0
1000fff4:	9303      	str	r3, [sp, #12]
1000fff6:	ab0c      	add	r3, sp, #48	; 0x30
1000fff8:	881a      	ldrh	r2, [r3, #0]
1000fffa:	2302      	movs	r3, #2
1000fffc:	1c0e      	adds	r6, r1, #0
1000fffe:	4c23      	ldr	r4, [pc, #140]	; (1001008c <gapc_connection_cfm_handler+0xac>)
10010000:	1c39      	adds	r1, r7, #0
10010002:	7023      	strb	r3, [r4, #0]
10010004:	330c      	adds	r3, #12
10010006:	7063      	strb	r3, [r4, #1]
10010008:	70a3      	strb	r3, [r4, #2]
1001000a:	4b21      	ldr	r3, [pc, #132]	; (10010090 <gapc_connection_cfm_handler+0xb0>)
1001000c:	70e2      	strb	r2, [r4, #3]
1001000e:	881a      	ldrh	r2, [r3, #0]
10010010:	881b      	ldrh	r3, [r3, #0]
10010012:	7122      	strb	r2, [r4, #4]
10010014:	0a1b      	lsrs	r3, r3, #8
10010016:	4f1f      	ldr	r7, [pc, #124]	; (10010094 <gapc_connection_cfm_handler+0xb4>)
10010018:	2210      	movs	r2, #16
1001001a:	481f      	ldr	r0, [pc, #124]	; (10010098 <gapc_connection_cfm_handler+0xb8>)
1001001c:	7163      	strb	r3, [r4, #5]
1001001e:	47b8      	blx	r7
10010020:	0a33      	lsrs	r3, r6, #8
10010022:	7626      	strb	r6, [r4, #24]
10010024:	7663      	strb	r3, [r4, #25]
10010026:	9901      	ldr	r1, [sp, #4]
10010028:	0c33      	lsrs	r3, r6, #16
1001002a:	2210      	movs	r2, #16
1001002c:	0e36      	lsrs	r6, r6, #24
1001002e:	481b      	ldr	r0, [pc, #108]	; (1001009c <gapc_connection_cfm_handler+0xbc>)
10010030:	76a3      	strb	r3, [r4, #26]
10010032:	76e6      	strb	r6, [r4, #27]
10010034:	47b8      	blx	r7
10010036:	1c23      	adds	r3, r4, #0
10010038:	332c      	adds	r3, #44	; 0x2c
1001003a:	701d      	strb	r5, [r3, #0]
1001003c:	1c23      	adds	r3, r4, #0
1001003e:	0a2a      	lsrs	r2, r5, #8
10010040:	332d      	adds	r3, #45	; 0x2d
10010042:	701a      	strb	r2, [r3, #0]
10010044:	1c23      	adds	r3, r4, #0
10010046:	0c2a      	lsrs	r2, r5, #16
10010048:	332e      	adds	r3, #46	; 0x2e
1001004a:	701a      	strb	r2, [r3, #0]
1001004c:	1c23      	adds	r3, r4, #0
1001004e:	0e2d      	lsrs	r5, r5, #24
10010050:	332f      	adds	r3, #47	; 0x2f
10010052:	466a      	mov	r2, sp
10010054:	701d      	strb	r5, [r3, #0]
10010056:	1c23      	adds	r3, r4, #0
10010058:	7a12      	ldrb	r2, [r2, #8]
1001005a:	3330      	adds	r3, #48	; 0x30
1001005c:	701a      	strb	r2, [r3, #0]
1001005e:	1c23      	adds	r3, r4, #0
10010060:	2500      	movs	r5, #0
10010062:	3331      	adds	r3, #49	; 0x31
10010064:	466a      	mov	r2, sp
10010066:	701d      	strb	r5, [r3, #0]
10010068:	1c23      	adds	r3, r4, #0
1001006a:	7b12      	ldrb	r2, [r2, #12]
1001006c:	3332      	adds	r3, #50	; 0x32
1001006e:	701a      	strb	r2, [r3, #0]
10010070:	1c23      	adds	r3, r4, #0
10010072:	3333      	adds	r3, #51	; 0x33
10010074:	701d      	strb	r5, [r3, #0]
10010076:	232c      	movs	r3, #44	; 0x2c
10010078:	1c20      	adds	r0, r4, #0
1001007a:	71a3      	strb	r3, [r4, #6]
1001007c:	2134      	movs	r1, #52	; 0x34
1001007e:	4b08      	ldr	r3, [pc, #32]	; (100100a0 <gapc_connection_cfm_handler+0xc0>)
10010080:	71e5      	strb	r5, [r4, #7]
10010082:	4798      	blx	r3
10010084:	1c28      	adds	r0, r5, #0
10010086:	b005      	add	sp, #20
10010088:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001008a:	46c0      	nop			; (mov r8, r8)
1001008c:	1001a680 	.word	0x1001a680
10010090:	1001a310 	.word	0x1001a310
10010094:	100155bb 	.word	0x100155bb
10010098:	1001a688 	.word	0x1001a688
1001009c:	1001a69c 	.word	0x1001a69c
100100a0:	1000fcdd 	.word	0x1000fcdd

100100a4 <gapc_con_req_ind>:
100100a4:	b5f0      	push	{r4, r5, r6, r7, lr}
100100a6:	7845      	ldrb	r5, [r0, #1]
100100a8:	7803      	ldrb	r3, [r0, #0]
100100aa:	4c30      	ldr	r4, [pc, #192]	; (1001016c <gapc_con_req_ind+0xc8>)
100100ac:	022d      	lsls	r5, r5, #8
100100ae:	431d      	orrs	r5, r3
100100b0:	85a5      	strh	r5, [r4, #44]	; 0x2c
100100b2:	78c3      	ldrb	r3, [r0, #3]
100100b4:	7882      	ldrb	r2, [r0, #2]
100100b6:	b08b      	sub	sp, #44	; 0x2c
100100b8:	021b      	lsls	r3, r3, #8
100100ba:	431a      	orrs	r2, r3
100100bc:	466b      	mov	r3, sp
100100be:	9205      	str	r2, [sp, #20]
100100c0:	8a9b      	ldrh	r3, [r3, #20]
100100c2:	2120      	movs	r1, #32
100100c4:	85e3      	strh	r3, [r4, #46]	; 0x2e
100100c6:	7943      	ldrb	r3, [r0, #5]
100100c8:	7902      	ldrb	r2, [r0, #4]
100100ca:	021b      	lsls	r3, r3, #8
100100cc:	431a      	orrs	r2, r3
100100ce:	466b      	mov	r3, sp
100100d0:	9206      	str	r2, [sp, #24]
100100d2:	8b1b      	ldrh	r3, [r3, #24]
100100d4:	1c06      	adds	r6, r0, #0
100100d6:	8623      	strh	r3, [r4, #48]	; 0x30
100100d8:	79c3      	ldrb	r3, [r0, #7]
100100da:	7982      	ldrb	r2, [r0, #6]
100100dc:	021b      	lsls	r3, r3, #8
100100de:	431a      	orrs	r2, r3
100100e0:	466b      	mov	r3, sp
100100e2:	9207      	str	r2, [sp, #28]
100100e4:	466a      	mov	r2, sp
100100e6:	8b9b      	ldrh	r3, [r3, #28]
100100e8:	1852      	adds	r2, r2, r1
100100ea:	8663      	strh	r3, [r4, #50]	; 0x32
100100ec:	7a43      	ldrb	r3, [r0, #9]
100100ee:	1c01      	adds	r1, r0, #0
100100f0:	9308      	str	r3, [sp, #32]
100100f2:	1c23      	adds	r3, r4, #0
100100f4:	7812      	ldrb	r2, [r2, #0]
100100f6:	3377      	adds	r3, #119	; 0x77
100100f8:	3478      	adds	r4, #120	; 0x78
100100fa:	701a      	strb	r2, [r3, #0]
100100fc:	310a      	adds	r1, #10
100100fe:	2206      	movs	r2, #6
10010100:	4b1b      	ldr	r3, [pc, #108]	; (10010170 <gapc_con_req_ind+0xcc>)
10010102:	1c20      	adds	r0, r4, #0
10010104:	4798      	blx	r3
10010106:	7c33      	ldrb	r3, [r6, #16]
10010108:	9309      	str	r3, [sp, #36]	; 0x24
1001010a:	4b1a      	ldr	r3, [pc, #104]	; (10010174 <gapc_con_req_ind+0xd0>)
1001010c:	4798      	blx	r3
1001010e:	4e1a      	ldr	r6, [pc, #104]	; (10010178 <gapc_con_req_ind+0xd4>)
10010110:	1e07      	subs	r7, r0, #0
10010112:	2f07      	cmp	r7, #7
10010114:	d81b      	bhi.n	1001014e <gapc_con_req_ind+0xaa>
10010116:	2312      	movs	r3, #18
10010118:	4343      	muls	r3, r0
1001011a:	18f0      	adds	r0, r6, r3
1001011c:	8145      	strh	r5, [r0, #10]
1001011e:	4669      	mov	r1, sp
10010120:	2524      	movs	r5, #36	; 0x24
10010122:	1949      	adds	r1, r1, r5
10010124:	7809      	ldrb	r1, [r1, #0]
10010126:	2206      	movs	r2, #6
10010128:	54f1      	strb	r1, [r6, r3]
1001012a:	2120      	movs	r1, #32
1001012c:	466b      	mov	r3, sp
1001012e:	185b      	adds	r3, r3, r1
10010130:	781b      	ldrb	r3, [r3, #0]
10010132:	1c21      	adds	r1, r4, #0
10010134:	7043      	strb	r3, [r0, #1]
10010136:	466b      	mov	r3, sp
10010138:	8a9b      	ldrh	r3, [r3, #20]
1001013a:	3002      	adds	r0, #2
1001013c:	8143      	strh	r3, [r0, #10]
1001013e:	466b      	mov	r3, sp
10010140:	8b1b      	ldrh	r3, [r3, #24]
10010142:	8183      	strh	r3, [r0, #12]
10010144:	466b      	mov	r3, sp
10010146:	8b9b      	ldrh	r3, [r3, #28]
10010148:	81c3      	strh	r3, [r0, #14]
1001014a:	4b09      	ldr	r3, [pc, #36]	; (10010170 <gapc_con_req_ind+0xcc>)
1001014c:	4798      	blx	r3
1001014e:	2112      	movs	r1, #18
10010150:	2300      	movs	r3, #0
10010152:	434f      	muls	r7, r1
10010154:	9300      	str	r3, [sp, #0]
10010156:	9301      	str	r3, [sp, #4]
10010158:	19f6      	adds	r6, r6, r7
1001015a:	8971      	ldrh	r1, [r6, #10]
1001015c:	4a07      	ldr	r2, [pc, #28]	; (1001017c <gapc_con_req_ind+0xd8>)
1001015e:	9102      	str	r1, [sp, #8]
10010160:	1c10      	adds	r0, r2, #0
10010162:	1c19      	adds	r1, r3, #0
10010164:	4c06      	ldr	r4, [pc, #24]	; (10010180 <gapc_con_req_ind+0xdc>)
10010166:	47a0      	blx	r4
10010168:	b00b      	add	sp, #44	; 0x2c
1001016a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001016c:	1001a3a2 	.word	0x1001a3a2
10010170:	100155bb 	.word	0x100155bb
10010174:	1000fee9 	.word	0x1000fee9
10010178:	1001a312 	.word	0x1001a312
1001017c:	100193a8 	.word	0x100193a8
10010180:	1000ffe1 	.word	0x1000ffe1

10010184 <gapc_disconnect_cmd_handler>:
10010184:	2204      	movs	r2, #4
10010186:	b510      	push	{r4, lr}
10010188:	4b0c      	ldr	r3, [pc, #48]	; (100101bc <gapc_disconnect_cmd_handler+0x38>)
1001018a:	2400      	movs	r4, #0
1001018c:	701a      	strb	r2, [r3, #0]
1001018e:	320a      	adds	r2, #10
10010190:	705a      	strb	r2, [r3, #1]
10010192:	709a      	strb	r2, [r3, #2]
10010194:	4a0a      	ldr	r2, [pc, #40]	; (100101c0 <gapc_disconnect_cmd_handler+0x3c>)
10010196:	70d9      	strb	r1, [r3, #3]
10010198:	8811      	ldrh	r1, [r2, #0]
1001019a:	8812      	ldrh	r2, [r2, #0]
1001019c:	7119      	strb	r1, [r3, #4]
1001019e:	0a12      	lsrs	r2, r2, #8
100101a0:	715a      	strb	r2, [r3, #5]
100101a2:	2201      	movs	r2, #1
100101a4:	721a      	strb	r2, [r3, #8]
100101a6:	1892      	adds	r2, r2, r2
100101a8:	7258      	strb	r0, [r3, #9]
100101aa:	719a      	strb	r2, [r3, #6]
100101ac:	71dc      	strb	r4, [r3, #7]
100101ae:	1c18      	adds	r0, r3, #0
100101b0:	210a      	movs	r1, #10
100101b2:	4b04      	ldr	r3, [pc, #16]	; (100101c4 <gapc_disconnect_cmd_handler+0x40>)
100101b4:	4798      	blx	r3
100101b6:	1c20      	adds	r0, r4, #0
100101b8:	bd10      	pop	{r4, pc}
100101ba:	46c0      	nop			; (mov r8, r8)
100101bc:	1001a680 	.word	0x1001a680
100101c0:	1001a310 	.word	0x1001a310
100101c4:	1000fcdd 	.word	0x1000fcdd

100101c8 <gapc_disconnect_ind>:
100101c8:	1c02      	adds	r2, r0, #0
100101ca:	b508      	push	{r3, lr}
100101cc:	7843      	ldrb	r3, [r0, #1]
100101ce:	7800      	ldrb	r0, [r0, #0]
100101d0:	021b      	lsls	r3, r3, #8
100101d2:	4318      	orrs	r0, r3
100101d4:	8008      	strh	r0, [r1, #0]
100101d6:	7893      	ldrb	r3, [r2, #2]
100101d8:	708b      	strb	r3, [r1, #2]
100101da:	2100      	movs	r1, #0
100101dc:	4b05      	ldr	r3, [pc, #20]	; (100101f4 <gapc_disconnect_ind+0x2c>)
100101de:	4798      	blx	r3
100101e0:	2807      	cmp	r0, #7
100101e2:	d806      	bhi.n	100101f2 <gapc_disconnect_ind+0x2a>
100101e4:	2312      	movs	r3, #18
100101e6:	4358      	muls	r0, r3
100101e8:	4b03      	ldr	r3, [pc, #12]	; (100101f8 <gapc_disconnect_ind+0x30>)
100101ea:	1818      	adds	r0, r3, r0
100101ec:	2301      	movs	r3, #1
100101ee:	425b      	negs	r3, r3
100101f0:	8143      	strh	r3, [r0, #10]
100101f2:	bd08      	pop	{r3, pc}
100101f4:	1000fead 	.word	0x1000fead
100101f8:	1001a312 	.word	0x1001a312

100101fc <gapc_bond_cmd_handler>:
100101fc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
100101fe:	9300      	str	r3, [sp, #0]
10010200:	2312      	movs	r3, #18
10010202:	1c04      	adds	r4, r0, #0
10010204:	a808      	add	r0, sp, #32
10010206:	7807      	ldrb	r7, [r0, #0]
10010208:	a809      	add	r0, sp, #36	; 0x24
1001020a:	7806      	ldrb	r6, [r0, #0]
1001020c:	a80a      	add	r0, sp, #40	; 0x28
1001020e:	7805      	ldrb	r5, [r0, #0]
10010210:	a80b      	add	r0, sp, #44	; 0x2c
10010212:	7800      	ldrb	r0, [r0, #0]
10010214:	9001      	str	r0, [sp, #4]
10010216:	4810      	ldr	r0, [pc, #64]	; (10010258 <gapc_bond_cmd_handler+0x5c>)
10010218:	7003      	strb	r3, [r0, #0]
1001021a:	230e      	movs	r3, #14
1001021c:	70c4      	strb	r4, [r0, #3]
1001021e:	4c0f      	ldr	r4, [pc, #60]	; (1001025c <gapc_bond_cmd_handler+0x60>)
10010220:	7043      	strb	r3, [r0, #1]
10010222:	7083      	strb	r3, [r0, #2]
10010224:	8823      	ldrh	r3, [r4, #0]
10010226:	8824      	ldrh	r4, [r4, #0]
10010228:	7103      	strb	r3, [r0, #4]
1001022a:	466b      	mov	r3, sp
1001022c:	781b      	ldrb	r3, [r3, #0]
1001022e:	0a24      	lsrs	r4, r4, #8
10010230:	72c3      	strb	r3, [r0, #11]
10010232:	466b      	mov	r3, sp
10010234:	791b      	ldrb	r3, [r3, #4]
10010236:	7144      	strb	r4, [r0, #5]
10010238:	73c3      	strb	r3, [r0, #15]
1001023a:	2308      	movs	r3, #8
1001023c:	7183      	strb	r3, [r0, #6]
1001023e:	2300      	movs	r3, #0
10010240:	240a      	movs	r4, #10
10010242:	7241      	strb	r1, [r0, #9]
10010244:	71c3      	strb	r3, [r0, #7]
10010246:	2110      	movs	r1, #16
10010248:	4b05      	ldr	r3, [pc, #20]	; (10010260 <gapc_bond_cmd_handler+0x64>)
1001024a:	7307      	strb	r7, [r0, #12]
1001024c:	7346      	strb	r6, [r0, #13]
1001024e:	7385      	strb	r5, [r0, #14]
10010250:	7204      	strb	r4, [r0, #8]
10010252:	7282      	strb	r2, [r0, #10]
10010254:	4798      	blx	r3
10010256:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010258:	1001a680 	.word	0x1001a680
1001025c:	1001a310 	.word	0x1001a310
10010260:	1000fcdd 	.word	0x1000fcdd

10010264 <gapc_bond_ind>:
10010264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010266:	780e      	ldrb	r6, [r1, #0]
10010268:	1c03      	adds	r3, r0, #0
1001026a:	1eb0      	subs	r0, r6, #2
1001026c:	2805      	cmp	r0, #5
1001026e:	d85d      	bhi.n	1001032c <gapc_bond_ind+0xc8>
10010270:	1c15      	adds	r5, r2, #0
10010272:	1c0c      	adds	r4, r1, #0
10010274:	f002 fb0a 	bl	1001288c <__gnu_thumb1_case_uqi>
10010278:	2f5a030d 	.word	0x2f5a030d
1001027c:	4740      	.short	0x4740
1001027e:	2009      	movs	r0, #9
10010280:	2a00      	cmp	r2, #0
10010282:	d054      	beq.n	1001032e <gapc_bond_ind+0xca>
10010284:	0a1b      	lsrs	r3, r3, #8
10010286:	8053      	strh	r3, [r2, #2]
10010288:	788b      	ldrb	r3, [r1, #2]
1001028a:	4829      	ldr	r0, [pc, #164]	; (10010330 <gapc_bond_ind+0xcc>)
1001028c:	7113      	strb	r3, [r2, #4]
1001028e:	2100      	movs	r1, #0
10010290:	e01c      	b.n	100102cc <gapc_bond_ind+0x68>
10010292:	2009      	movs	r0, #9
10010294:	2a00      	cmp	r2, #0
10010296:	d04a      	beq.n	1001032e <gapc_bond_ind+0xca>
10010298:	4c25      	ldr	r4, [pc, #148]	; (10010330 <gapc_bond_ind+0xcc>)
1001029a:	0a1b      	lsrs	r3, r3, #8
1001029c:	8053      	strh	r3, [r2, #2]
1001029e:	788b      	ldrb	r3, [r1, #2]
100102a0:	2700      	movs	r7, #0
100102a2:	1c10      	adds	r0, r2, #0
100102a4:	1c21      	adds	r1, r4, #0
100102a6:	7013      	strb	r3, [r2, #0]
100102a8:	4e22      	ldr	r6, [pc, #136]	; (10010334 <gapc_bond_ind+0xd0>)
100102aa:	7117      	strb	r7, [r2, #4]
100102ac:	312e      	adds	r1, #46	; 0x2e
100102ae:	2217      	movs	r2, #23
100102b0:	3032      	adds	r0, #50	; 0x32
100102b2:	47b0      	blx	r6
100102b4:	1c28      	adds	r0, r5, #0
100102b6:	1c21      	adds	r1, r4, #0
100102b8:	2210      	movs	r2, #16
100102ba:	311e      	adds	r1, #30
100102bc:	3022      	adds	r0, #34	; 0x22
100102be:	47b0      	blx	r6
100102c0:	1ca1      	adds	r1, r4, #2
100102c2:	1da8      	adds	r0, r5, #6
100102c4:	221c      	movs	r2, #28
100102c6:	47b0      	blx	r6
100102c8:	1c20      	adds	r0, r4, #0
100102ca:	1c39      	adds	r1, r7, #0
100102cc:	2246      	movs	r2, #70	; 0x46
100102ce:	4b1a      	ldr	r3, [pc, #104]	; (10010338 <gapc_bond_ind+0xd4>)
100102d0:	4798      	blx	r3
100102d2:	2009      	movs	r0, #9
100102d4:	e02b      	b.n	1001032e <gapc_bond_ind+0xca>
100102d6:	4d16      	ldr	r5, [pc, #88]	; (10010330 <gapc_bond_ind+0xcc>)
100102d8:	3102      	adds	r1, #2
100102da:	1c28      	adds	r0, r5, #0
100102dc:	2210      	movs	r2, #16
100102de:	4e15      	ldr	r6, [pc, #84]	; (10010334 <gapc_bond_ind+0xd0>)
100102e0:	302e      	adds	r0, #46	; 0x2e
100102e2:	47b0      	blx	r6
100102e4:	1c28      	adds	r0, r5, #0
100102e6:	1c21      	adds	r1, r4, #0
100102e8:	303f      	adds	r0, #63	; 0x3f
100102ea:	3112      	adds	r1, #18
100102ec:	2206      	movs	r2, #6
100102ee:	47b0      	blx	r6
100102f0:	7e23      	ldrb	r3, [r4, #24]
100102f2:	353e      	adds	r5, #62	; 0x3e
100102f4:	702b      	strb	r3, [r5, #0]
100102f6:	e019      	b.n	1001032c <gapc_bond_ind+0xc8>
100102f8:	480d      	ldr	r0, [pc, #52]	; (10010330 <gapc_bond_ind+0xcc>)
100102fa:	3102      	adds	r1, #2
100102fc:	2210      	movs	r2, #16
100102fe:	4b0d      	ldr	r3, [pc, #52]	; (10010334 <gapc_bond_ind+0xd0>)
10010300:	301e      	adds	r0, #30
10010302:	4798      	blx	r3
10010304:	e012      	b.n	1001032c <gapc_bond_ind+0xc8>
10010306:	4d0a      	ldr	r5, [pc, #40]	; (10010330 <gapc_bond_ind+0xcc>)
10010308:	3102      	adds	r1, #2
1001030a:	2210      	movs	r2, #16
1001030c:	4e09      	ldr	r6, [pc, #36]	; (10010334 <gapc_bond_ind+0xd0>)
1001030e:	1ca8      	adds	r0, r5, #2
10010310:	47b0      	blx	r6
10010312:	1c28      	adds	r0, r5, #0
10010314:	1c21      	adds	r1, r4, #0
10010316:	7ce3      	ldrb	r3, [r4, #19]
10010318:	7ca2      	ldrb	r2, [r4, #18]
1001031a:	021b      	lsls	r3, r3, #8
1001031c:	4313      	orrs	r3, r2
1001031e:	3014      	adds	r0, #20
10010320:	3114      	adds	r1, #20
10010322:	2208      	movs	r2, #8
10010324:	826b      	strh	r3, [r5, #18]
10010326:	47b0      	blx	r6
10010328:	7f23      	ldrb	r3, [r4, #28]
1001032a:	772b      	strb	r3, [r5, #28]
1001032c:	2000      	movs	r0, #0
1001032e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010330:	100193d8 	.word	0x100193d8
10010334:	100155bb 	.word	0x100155bb
10010338:	100155cd 	.word	0x100155cd

1001033c <gapc_bond_req_ind>:
1001033c:	b570      	push	{r4, r5, r6, lr}
1001033e:	780c      	ldrb	r4, [r1, #0]
10010340:	1c03      	adds	r3, r0, #0
10010342:	7849      	ldrb	r1, [r1, #1]
10010344:	2c07      	cmp	r4, #7
10010346:	d85c      	bhi.n	10010402 <gapc_bond_req_ind+0xc6>
10010348:	1c20      	adds	r0, r4, #0
1001034a:	f002 fa9f 	bl	1001288c <__gnu_thumb1_case_uqi>
1001034e:	5a04      	.short	0x5a04
10010350:	5a0b5a5a 	.word	0x5a0b5a5a
10010354:	1f1f      	.short	0x1f1f
10010356:	200a      	movs	r0, #10
10010358:	2a00      	cmp	r2, #0
1001035a:	d053      	beq.n	10010404 <gapc_bond_req_ind+0xc8>
1001035c:	0a1b      	lsrs	r3, r3, #8
1001035e:	8013      	strh	r3, [r2, #0]
10010360:	7091      	strb	r1, [r2, #2]
10010362:	e04f      	b.n	10010404 <gapc_bond_req_ind+0xc8>
10010364:	2a00      	cmp	r2, #0
10010366:	d00b      	beq.n	10010380 <gapc_bond_req_ind+0x44>
10010368:	0a1b      	lsrs	r3, r3, #8
1001036a:	8013      	strh	r3, [r2, #0]
1001036c:	2900      	cmp	r1, #0
1001036e:	d102      	bne.n	10010376 <gapc_bond_req_ind+0x3a>
10010370:	2301      	movs	r3, #1
10010372:	7093      	strb	r3, [r2, #2]
10010374:	e004      	b.n	10010380 <gapc_bond_req_ind+0x44>
10010376:	2300      	movs	r3, #0
10010378:	7093      	strb	r3, [r2, #2]
1001037a:	2902      	cmp	r1, #2
1001037c:	d102      	bne.n	10010384 <gapc_bond_req_ind+0x48>
1001037e:	70d3      	strb	r3, [r2, #3]
10010380:	200c      	movs	r0, #12
10010382:	e03f      	b.n	10010404 <gapc_bond_req_ind+0xc8>
10010384:	2901      	cmp	r1, #1
10010386:	d1fb      	bne.n	10010380 <gapc_bond_req_ind+0x44>
10010388:	70d1      	strb	r1, [r2, #3]
1001038a:	e7f9      	b.n	10010380 <gapc_bond_req_ind+0x44>
1001038c:	2214      	movs	r2, #20
1001038e:	481e      	ldr	r0, [pc, #120]	; (10010408 <gapc_bond_req_ind+0xcc>)
10010390:	0a1b      	lsrs	r3, r3, #8
10010392:	70c3      	strb	r3, [r0, #3]
10010394:	4b1d      	ldr	r3, [pc, #116]	; (1001040c <gapc_bond_req_ind+0xd0>)
10010396:	7002      	strb	r2, [r0, #0]
10010398:	3a06      	subs	r2, #6
1001039a:	7042      	strb	r2, [r0, #1]
1001039c:	7082      	strb	r2, [r0, #2]
1001039e:	881a      	ldrh	r2, [r3, #0]
100103a0:	881b      	ldrh	r3, [r3, #0]
100103a2:	4e1b      	ldr	r6, [pc, #108]	; (10010410 <gapc_bond_req_ind+0xd4>)
100103a4:	0a1b      	lsrs	r3, r3, #8
100103a6:	7143      	strb	r3, [r0, #5]
100103a8:	2301      	movs	r3, #1
100103aa:	7102      	strb	r2, [r0, #4]
100103ac:	7204      	strb	r4, [r0, #8]
100103ae:	7243      	strb	r3, [r0, #9]
100103b0:	1c05      	adds	r5, r0, #0
100103b2:	1c31      	adds	r1, r6, #0
100103b4:	300a      	adds	r0, #10
100103b6:	2c07      	cmp	r4, #7
100103b8:	d116      	bne.n	100103e8 <gapc_bond_req_ind+0xac>
100103ba:	317e      	adds	r1, #126	; 0x7e
100103bc:	2210      	movs	r2, #16
100103be:	4c15      	ldr	r4, [pc, #84]	; (10010414 <gapc_bond_req_ind+0xd8>)
100103c0:	47a0      	blx	r4
100103c2:	1c33      	adds	r3, r6, #0
100103c4:	1c31      	adds	r1, r6, #0
100103c6:	1c28      	adds	r0, r5, #0
100103c8:	338e      	adds	r3, #142	; 0x8e
100103ca:	881b      	ldrh	r3, [r3, #0]
100103cc:	3190      	adds	r1, #144	; 0x90
100103ce:	76ab      	strb	r3, [r5, #26]
100103d0:	2208      	movs	r2, #8
100103d2:	0a1b      	lsrs	r3, r3, #8
100103d4:	301c      	adds	r0, #28
100103d6:	76eb      	strb	r3, [r5, #27]
100103d8:	47a0      	blx	r4
100103da:	1c31      	adds	r1, r6, #0
100103dc:	3198      	adds	r1, #152	; 0x98
100103de:	780a      	ldrb	r2, [r1, #0]
100103e0:	1d6b      	adds	r3, r5, #5
100103e2:	77da      	strb	r2, [r3, #31]
100103e4:	2125      	movs	r1, #37	; 0x25
100103e6:	e004      	b.n	100103f2 <gapc_bond_req_ind+0xb6>
100103e8:	319a      	adds	r1, #154	; 0x9a
100103ea:	2210      	movs	r2, #16
100103ec:	4b09      	ldr	r3, [pc, #36]	; (10010414 <gapc_bond_req_ind+0xd8>)
100103ee:	4798      	blx	r3
100103f0:	211a      	movs	r1, #26
100103f2:	1c0b      	adds	r3, r1, #0
100103f4:	2400      	movs	r4, #0
100103f6:	3b08      	subs	r3, #8
100103f8:	71ab      	strb	r3, [r5, #6]
100103fa:	1c28      	adds	r0, r5, #0
100103fc:	4b06      	ldr	r3, [pc, #24]	; (10010418 <gapc_bond_req_ind+0xdc>)
100103fe:	71ec      	strb	r4, [r5, #7]
10010400:	4798      	blx	r3
10010402:	2000      	movs	r0, #0
10010404:	bd70      	pop	{r4, r5, r6, pc}
10010406:	46c0      	nop			; (mov r8, r8)
10010408:	1001a680 	.word	0x1001a680
1001040c:	1001a310 	.word	0x1001a310
10010410:	1001a3a2 	.word	0x1001a3a2
10010414:	100155bb 	.word	0x100155bb
10010418:	1000fcdd 	.word	0x1000fcdd

1001041c <gapc_bond_cfm_handler_pair_resp>:
1001041c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001041e:	b085      	sub	sp, #20
10010420:	1c07      	adds	r7, r0, #0
10010422:	a80a      	add	r0, sp, #40	; 0x28
10010424:	7806      	ldrb	r6, [r0, #0]
10010426:	a80b      	add	r0, sp, #44	; 0x2c
10010428:	7805      	ldrb	r5, [r0, #0]
1001042a:	a80c      	add	r0, sp, #48	; 0x30
1001042c:	7800      	ldrb	r0, [r0, #0]
1001042e:	2414      	movs	r4, #20
10010430:	9002      	str	r0, [sp, #8]
10010432:	a80d      	add	r0, sp, #52	; 0x34
10010434:	7800      	ldrb	r0, [r0, #0]
10010436:	9301      	str	r3, [sp, #4]
10010438:	9003      	str	r0, [sp, #12]
1001043a:	a80e      	add	r0, sp, #56	; 0x38
1001043c:	8800      	ldrh	r0, [r0, #0]
1001043e:	4684      	mov	ip, r0
10010440:	4812      	ldr	r0, [pc, #72]	; (1001048c <gapc_bond_cfm_handler_pair_resp+0x70>)
10010442:	7004      	strb	r4, [r0, #0]
10010444:	3c06      	subs	r4, #6
10010446:	7044      	strb	r4, [r0, #1]
10010448:	7084      	strb	r4, [r0, #2]
1001044a:	4664      	mov	r4, ip
1001044c:	70c4      	strb	r4, [r0, #3]
1001044e:	4c10      	ldr	r4, [pc, #64]	; (10010490 <gapc_bond_cfm_handler_pair_resp+0x74>)
10010450:	7247      	strb	r7, [r0, #9]
10010452:	8823      	ldrh	r3, [r4, #0]
10010454:	8824      	ldrh	r4, [r4, #0]
10010456:	7103      	strb	r3, [r0, #4]
10010458:	466b      	mov	r3, sp
1001045a:	791b      	ldrb	r3, [r3, #4]
1001045c:	0a24      	lsrs	r4, r4, #8
1001045e:	7303      	strb	r3, [r0, #12]
10010460:	466b      	mov	r3, sp
10010462:	7a1b      	ldrb	r3, [r3, #8]
10010464:	7144      	strb	r4, [r0, #5]
10010466:	73c3      	strb	r3, [r0, #15]
10010468:	466b      	mov	r3, sp
1001046a:	7b1b      	ldrb	r3, [r3, #12]
1001046c:	2401      	movs	r4, #1
1001046e:	7403      	strb	r3, [r0, #16]
10010470:	2309      	movs	r3, #9
10010472:	7183      	strb	r3, [r0, #6]
10010474:	2300      	movs	r3, #0
10010476:	7204      	strb	r4, [r0, #8]
10010478:	7281      	strb	r1, [r0, #10]
1001047a:	72c2      	strb	r2, [r0, #11]
1001047c:	7346      	strb	r6, [r0, #13]
1001047e:	7385      	strb	r5, [r0, #14]
10010480:	71c3      	strb	r3, [r0, #7]
10010482:	2111      	movs	r1, #17
10010484:	4b03      	ldr	r3, [pc, #12]	; (10010494 <gapc_bond_cfm_handler_pair_resp+0x78>)
10010486:	4798      	blx	r3
10010488:	b005      	add	sp, #20
1001048a:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001048c:	1001a680 	.word	0x1001a680
10010490:	1001a310 	.word	0x1001a310
10010494:	1000fcdd 	.word	0x1000fcdd

10010498 <gapc_bond_cfm_handler_key_exch>:
10010498:	b538      	push	{r3, r4, r5, lr}
1001049a:	2514      	movs	r5, #20
1001049c:	4c0d      	ldr	r4, [pc, #52]	; (100104d4 <gapc_bond_cfm_handler_key_exch+0x3c>)
1001049e:	70e3      	strb	r3, [r4, #3]
100104a0:	4b0d      	ldr	r3, [pc, #52]	; (100104d8 <gapc_bond_cfm_handler_key_exch+0x40>)
100104a2:	7025      	strb	r5, [r4, #0]
100104a4:	3d06      	subs	r5, #6
100104a6:	7065      	strb	r5, [r4, #1]
100104a8:	70a5      	strb	r5, [r4, #2]
100104aa:	881d      	ldrh	r5, [r3, #0]
100104ac:	881b      	ldrh	r3, [r3, #0]
100104ae:	7220      	strb	r0, [r4, #8]
100104b0:	0a1b      	lsrs	r3, r3, #8
100104b2:	7163      	strb	r3, [r4, #5]
100104b4:	7261      	strb	r1, [r4, #9]
100104b6:	4b09      	ldr	r3, [pc, #36]	; (100104dc <gapc_bond_cfm_handler_key_exch+0x44>)
100104b8:	1c11      	adds	r1, r2, #0
100104ba:	4809      	ldr	r0, [pc, #36]	; (100104e0 <gapc_bond_cfm_handler_key_exch+0x48>)
100104bc:	2210      	movs	r2, #16
100104be:	7125      	strb	r5, [r4, #4]
100104c0:	4798      	blx	r3
100104c2:	2312      	movs	r3, #18
100104c4:	71a3      	strb	r3, [r4, #6]
100104c6:	2300      	movs	r3, #0
100104c8:	1c20      	adds	r0, r4, #0
100104ca:	71e3      	strb	r3, [r4, #7]
100104cc:	211a      	movs	r1, #26
100104ce:	4b05      	ldr	r3, [pc, #20]	; (100104e4 <gapc_bond_cfm_handler_key_exch+0x4c>)
100104d0:	4798      	blx	r3
100104d2:	bd38      	pop	{r3, r4, r5, pc}
100104d4:	1001a680 	.word	0x1001a680
100104d8:	1001a310 	.word	0x1001a310
100104dc:	100155bb 	.word	0x100155bb
100104e0:	1001a68a 	.word	0x1001a68a
100104e4:	1000fcdd 	.word	0x1000fcdd

100104e8 <gapc_security_cmd_handler>:
100104e8:	221a      	movs	r2, #26
100104ea:	b508      	push	{r3, lr}
100104ec:	4b0b      	ldr	r3, [pc, #44]	; (1001051c <gapc_security_cmd_handler+0x34>)
100104ee:	701a      	strb	r2, [r3, #0]
100104f0:	3a0c      	subs	r2, #12
100104f2:	705a      	strb	r2, [r3, #1]
100104f4:	709a      	strb	r2, [r3, #2]
100104f6:	4a0a      	ldr	r2, [pc, #40]	; (10010520 <gapc_security_cmd_handler+0x38>)
100104f8:	70d8      	strb	r0, [r3, #3]
100104fa:	8810      	ldrh	r0, [r2, #0]
100104fc:	8812      	ldrh	r2, [r2, #0]
100104fe:	7118      	strb	r0, [r3, #4]
10010500:	0a12      	lsrs	r2, r2, #8
10010502:	715a      	strb	r2, [r3, #5]
10010504:	220c      	movs	r2, #12
10010506:	721a      	strb	r2, [r3, #8]
10010508:	3a0a      	subs	r2, #10
1001050a:	719a      	strb	r2, [r3, #6]
1001050c:	2200      	movs	r2, #0
1001050e:	7259      	strb	r1, [r3, #9]
10010510:	71da      	strb	r2, [r3, #7]
10010512:	1c18      	adds	r0, r3, #0
10010514:	210a      	movs	r1, #10
10010516:	4b03      	ldr	r3, [pc, #12]	; (10010524 <gapc_security_cmd_handler+0x3c>)
10010518:	4798      	blx	r3
1001051a:	bd08      	pop	{r3, pc}
1001051c:	1001a680 	.word	0x1001a680
10010520:	1001a310 	.word	0x1001a310
10010524:	1000fcdd 	.word	0x1000fcdd

10010528 <gapc_encrypt_cmd_handler>:
10010528:	b5f0      	push	{r4, r5, r6, r7, lr}
1001052a:	2500      	movs	r5, #0
1001052c:	b089      	sub	sp, #36	; 0x24
1001052e:	9306      	str	r3, [sp, #24]
10010530:	ab0e      	add	r3, sp, #56	; 0x38
10010532:	781b      	ldrb	r3, [r3, #0]
10010534:	1c17      	adds	r7, r2, #0
10010536:	9307      	str	r3, [sp, #28]
10010538:	ab0f      	add	r3, sp, #60	; 0x3c
1001053a:	781b      	ldrb	r3, [r3, #0]
1001053c:	4a19      	ldr	r2, [pc, #100]	; (100105a4 <gapc_encrypt_cmd_handler+0x7c>)
1001053e:	1c06      	adds	r6, r0, #0
10010540:	9105      	str	r1, [sp, #20]
10010542:	9300      	str	r3, [sp, #0]
10010544:	9002      	str	r0, [sp, #8]
10010546:	1c29      	adds	r1, r5, #0
10010548:	1c2b      	adds	r3, r5, #0
1001054a:	9501      	str	r5, [sp, #4]
1001054c:	1c10      	adds	r0, r2, #0
1001054e:	4c16      	ldr	r4, [pc, #88]	; (100105a8 <gapc_encrypt_cmd_handler+0x80>)
10010550:	47a0      	blx	r4
10010552:	2316      	movs	r3, #22
10010554:	4c15      	ldr	r4, [pc, #84]	; (100105ac <gapc_encrypt_cmd_handler+0x84>)
10010556:	9905      	ldr	r1, [sp, #20]
10010558:	7023      	strb	r3, [r4, #0]
1001055a:	3b08      	subs	r3, #8
1001055c:	7063      	strb	r3, [r4, #1]
1001055e:	70a3      	strb	r3, [r4, #2]
10010560:	4b13      	ldr	r3, [pc, #76]	; (100105b0 <gapc_encrypt_cmd_handler+0x88>)
10010562:	70e6      	strb	r6, [r4, #3]
10010564:	881a      	ldrh	r2, [r3, #0]
10010566:	881b      	ldrh	r3, [r3, #0]
10010568:	7122      	strb	r2, [r4, #4]
1001056a:	0a1b      	lsrs	r3, r3, #8
1001056c:	7163      	strb	r3, [r4, #5]
1001056e:	230b      	movs	r3, #11
10010570:	4e10      	ldr	r6, [pc, #64]	; (100105b4 <gapc_encrypt_cmd_handler+0x8c>)
10010572:	2210      	movs	r2, #16
10010574:	4810      	ldr	r0, [pc, #64]	; (100105b8 <gapc_encrypt_cmd_handler+0x90>)
10010576:	7223      	strb	r3, [r4, #8]
10010578:	7265      	strb	r5, [r4, #9]
1001057a:	47b0      	blx	r6
1001057c:	0a3b      	lsrs	r3, r7, #8
1001057e:	9906      	ldr	r1, [sp, #24]
10010580:	2208      	movs	r2, #8
10010582:	480e      	ldr	r0, [pc, #56]	; (100105bc <gapc_encrypt_cmd_handler+0x94>)
10010584:	76e3      	strb	r3, [r4, #27]
10010586:	76a7      	strb	r7, [r4, #26]
10010588:	47b0      	blx	r6
1001058a:	466a      	mov	r2, sp
1001058c:	7f12      	ldrb	r2, [r2, #28]
1001058e:	1d63      	adds	r3, r4, #5
10010590:	77da      	strb	r2, [r3, #31]
10010592:	231d      	movs	r3, #29
10010594:	1c20      	adds	r0, r4, #0
10010596:	71a3      	strb	r3, [r4, #6]
10010598:	2125      	movs	r1, #37	; 0x25
1001059a:	4b09      	ldr	r3, [pc, #36]	; (100105c0 <gapc_encrypt_cmd_handler+0x98>)
1001059c:	71e5      	strb	r5, [r4, #7]
1001059e:	4798      	blx	r3
100105a0:	b009      	add	sp, #36	; 0x24
100105a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
100105a4:	100193b8 	.word	0x100193b8
100105a8:	1000ffe1 	.word	0x1000ffe1
100105ac:	1001a680 	.word	0x1001a680
100105b0:	1001a310 	.word	0x1001a310
100105b4:	100155bb 	.word	0x100155bb
100105b8:	1001a68a 	.word	0x1001a68a
100105bc:	1001a69c 	.word	0x1001a69c
100105c0:	1000fcdd 	.word	0x1000fcdd

100105c4 <gapc_encrypt_req_ind>:
100105c4:	b508      	push	{r3, lr}
100105c6:	0a00      	lsrs	r0, r0, #8
100105c8:	8010      	strh	r0, [r2, #0]
100105ca:	784b      	ldrb	r3, [r1, #1]
100105cc:	7808      	ldrb	r0, [r1, #0]
100105ce:	021b      	lsls	r3, r3, #8
100105d0:	4303      	orrs	r3, r0
100105d2:	8053      	strh	r3, [r2, #2]
100105d4:	1d10      	adds	r0, r2, #4
100105d6:	3102      	adds	r1, #2
100105d8:	2208      	movs	r2, #8
100105da:	4b01      	ldr	r3, [pc, #4]	; (100105e0 <gapc_encrypt_req_ind+0x1c>)
100105dc:	4798      	blx	r3
100105de:	bd08      	pop	{r3, pc}
100105e0:	100155bb 	.word	0x100155bb

100105e4 <gapc_encrypt_cfm_handler>:
100105e4:	b5f0      	push	{r4, r5, r6, r7, lr}
100105e6:	2500      	movs	r5, #0
100105e8:	b087      	sub	sp, #28
100105ea:	9304      	str	r3, [sp, #16]
100105ec:	ab0c      	add	r3, sp, #48	; 0x30
100105ee:	781b      	ldrb	r3, [r3, #0]
100105f0:	1c17      	adds	r7, r2, #0
100105f2:	4a15      	ldr	r2, [pc, #84]	; (10010648 <gapc_encrypt_cfm_handler+0x64>)
100105f4:	1c06      	adds	r6, r0, #0
100105f6:	9305      	str	r3, [sp, #20]
100105f8:	9100      	str	r1, [sp, #0]
100105fa:	9002      	str	r0, [sp, #8]
100105fc:	1c29      	adds	r1, r5, #0
100105fe:	1c2b      	adds	r3, r5, #0
10010600:	9501      	str	r5, [sp, #4]
10010602:	1c10      	adds	r0, r2, #0
10010604:	4c11      	ldr	r4, [pc, #68]	; (1001064c <gapc_encrypt_cfm_handler+0x68>)
10010606:	47a0      	blx	r4
10010608:	2318      	movs	r3, #24
1001060a:	4c11      	ldr	r4, [pc, #68]	; (10010650 <gapc_encrypt_cfm_handler+0x6c>)
1001060c:	9904      	ldr	r1, [sp, #16]
1001060e:	7023      	strb	r3, [r4, #0]
10010610:	3b0a      	subs	r3, #10
10010612:	7063      	strb	r3, [r4, #1]
10010614:	70a3      	strb	r3, [r4, #2]
10010616:	4b0f      	ldr	r3, [pc, #60]	; (10010654 <gapc_encrypt_cfm_handler+0x70>)
10010618:	480f      	ldr	r0, [pc, #60]	; (10010658 <gapc_encrypt_cfm_handler+0x74>)
1001061a:	881a      	ldrh	r2, [r3, #0]
1001061c:	881b      	ldrh	r3, [r3, #0]
1001061e:	7122      	strb	r2, [r4, #4]
10010620:	0a1b      	lsrs	r3, r3, #8
10010622:	7163      	strb	r3, [r4, #5]
10010624:	2210      	movs	r2, #16
10010626:	4b0d      	ldr	r3, [pc, #52]	; (1001065c <gapc_encrypt_cfm_handler+0x78>)
10010628:	70e6      	strb	r6, [r4, #3]
1001062a:	7227      	strb	r7, [r4, #8]
1001062c:	4798      	blx	r3
1001062e:	466b      	mov	r3, sp
10010630:	7d1b      	ldrb	r3, [r3, #20]
10010632:	1c20      	adds	r0, r4, #0
10010634:	7663      	strb	r3, [r4, #25]
10010636:	2312      	movs	r3, #18
10010638:	211a      	movs	r1, #26
1001063a:	71a3      	strb	r3, [r4, #6]
1001063c:	4b08      	ldr	r3, [pc, #32]	; (10010660 <gapc_encrypt_cfm_handler+0x7c>)
1001063e:	71e5      	strb	r5, [r4, #7]
10010640:	4798      	blx	r3
10010642:	b007      	add	sp, #28
10010644:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010646:	46c0      	nop			; (mov r8, r8)
10010648:	100193c8 	.word	0x100193c8
1001064c:	1000ffe1 	.word	0x1000ffe1
10010650:	1001a680 	.word	0x1001a680
10010654:	1001a310 	.word	0x1001a310
10010658:	1001a689 	.word	0x1001a689
1001065c:	100155bb 	.word	0x100155bb
10010660:	1000fcdd 	.word	0x1000fcdd

10010664 <gapc_encrypt_ind>:
10010664:	780b      	ldrb	r3, [r1, #0]
10010666:	0a00      	lsrs	r0, r0, #8
10010668:	70d3      	strb	r3, [r2, #3]
1001066a:	2300      	movs	r3, #0
1001066c:	8010      	strh	r0, [r2, #0]
1001066e:	7093      	strb	r3, [r2, #2]
10010670:	4770      	bx	lr
	...

10010674 <gapc_param_update_cfm_handler>:
10010674:	b538      	push	{r3, r4, r5, lr}
10010676:	2410      	movs	r4, #16
10010678:	1c05      	adds	r5, r0, #0
1001067a:	480e      	ldr	r0, [pc, #56]	; (100106b4 <gapc_param_update_cfm_handler+0x40>)
1001067c:	7004      	strb	r4, [r0, #0]
1001067e:	3c02      	subs	r4, #2
10010680:	7044      	strb	r4, [r0, #1]
10010682:	7084      	strb	r4, [r0, #2]
10010684:	4c0c      	ldr	r4, [pc, #48]	; (100106b8 <gapc_param_update_cfm_handler+0x44>)
10010686:	70c5      	strb	r5, [r0, #3]
10010688:	8825      	ldrh	r5, [r4, #0]
1001068a:	8824      	ldrh	r4, [r4, #0]
1001068c:	72c3      	strb	r3, [r0, #11]
1001068e:	0a1b      	lsrs	r3, r3, #8
10010690:	0a24      	lsrs	r4, r4, #8
10010692:	7303      	strb	r3, [r0, #12]
10010694:	2305      	movs	r3, #5
10010696:	7144      	strb	r4, [r0, #5]
10010698:	2400      	movs	r4, #0
1001069a:	7201      	strb	r1, [r0, #8]
1001069c:	7242      	strb	r2, [r0, #9]
1001069e:	7183      	strb	r3, [r0, #6]
100106a0:	0a12      	lsrs	r2, r2, #8
100106a2:	210d      	movs	r1, #13
100106a4:	4b05      	ldr	r3, [pc, #20]	; (100106bc <gapc_param_update_cfm_handler+0x48>)
100106a6:	7105      	strb	r5, [r0, #4]
100106a8:	7282      	strb	r2, [r0, #10]
100106aa:	71c4      	strb	r4, [r0, #7]
100106ac:	4798      	blx	r3
100106ae:	1c20      	adds	r0, r4, #0
100106b0:	bd38      	pop	{r3, r4, r5, pc}
100106b2:	46c0      	nop			; (mov r8, r8)
100106b4:	1001a680 	.word	0x1001a680
100106b8:	1001a310 	.word	0x1001a310
100106bc:	1000fcdd 	.word	0x1000fcdd

100106c0 <gapc_param_updated_ind>:
100106c0:	2300      	movs	r3, #0
100106c2:	0a00      	lsrs	r0, r0, #8
100106c4:	8010      	strh	r0, [r2, #0]
100106c6:	7093      	strb	r3, [r2, #2]
100106c8:	784b      	ldrb	r3, [r1, #1]
100106ca:	7808      	ldrb	r0, [r1, #0]
100106cc:	021b      	lsls	r3, r3, #8
100106ce:	4303      	orrs	r3, r0
100106d0:	8093      	strh	r3, [r2, #4]
100106d2:	78cb      	ldrb	r3, [r1, #3]
100106d4:	7888      	ldrb	r0, [r1, #2]
100106d6:	021b      	lsls	r3, r3, #8
100106d8:	4303      	orrs	r3, r0
100106da:	80d3      	strh	r3, [r2, #6]
100106dc:	794b      	ldrb	r3, [r1, #5]
100106de:	7909      	ldrb	r1, [r1, #4]
100106e0:	021b      	lsls	r3, r3, #8
100106e2:	430b      	orrs	r3, r1
100106e4:	2007      	movs	r0, #7
100106e6:	8113      	strh	r3, [r2, #8]
100106e8:	4770      	bx	lr

100106ea <gapc_param_updated_req_ind>:
100106ea:	0a00      	lsrs	r0, r0, #8
100106ec:	8010      	strh	r0, [r2, #0]
100106ee:	784b      	ldrb	r3, [r1, #1]
100106f0:	7808      	ldrb	r0, [r1, #0]
100106f2:	021b      	lsls	r3, r3, #8
100106f4:	4303      	orrs	r3, r0
100106f6:	8053      	strh	r3, [r2, #2]
100106f8:	78cb      	ldrb	r3, [r1, #3]
100106fa:	7888      	ldrb	r0, [r1, #2]
100106fc:	021b      	lsls	r3, r3, #8
100106fe:	4303      	orrs	r3, r0
10010700:	8093      	strh	r3, [r2, #4]
10010702:	794b      	ldrb	r3, [r1, #5]
10010704:	7908      	ldrb	r0, [r1, #4]
10010706:	021b      	lsls	r3, r3, #8
10010708:	4303      	orrs	r3, r0
1001070a:	80d3      	strh	r3, [r2, #6]
1001070c:	79cb      	ldrb	r3, [r1, #7]
1001070e:	7989      	ldrb	r1, [r1, #6]
10010710:	021b      	lsls	r3, r3, #8
10010712:	430b      	orrs	r3, r1
10010714:	2008      	movs	r0, #8
10010716:	8113      	strh	r3, [r2, #8]
10010718:	4770      	bx	lr
	...

1001071c <gapc_dev_info_req_ind_handler>:
1001071c:	b508      	push	{r3, lr}
1001071e:	1c0b      	adds	r3, r1, #0
10010720:	0a01      	lsrs	r1, r0, #8
10010722:	8011      	strh	r1, [r2, #0]
10010724:	7818      	ldrb	r0, [r3, #0]
10010726:	7090      	strb	r0, [r2, #2]
10010728:	2800      	cmp	r0, #0
1001072a:	d104      	bne.n	10010736 <gapc_dev_info_req_ind_handler+0x1a>
1001072c:	4b03      	ldr	r3, [pc, #12]	; (1001073c <gapc_dev_info_req_ind_handler+0x20>)
1001072e:	33aa      	adds	r3, #170	; 0xaa
10010730:	881b      	ldrh	r3, [r3, #0]
10010732:	2b00      	cmp	r3, #0
10010734:	d001      	beq.n	1001073a <gapc_dev_info_req_ind_handler+0x1e>
10010736:	4b02      	ldr	r3, [pc, #8]	; (10010740 <gapc_dev_info_req_ind_handler+0x24>)
10010738:	4798      	blx	r3
1001073a:	bd08      	pop	{r3, pc}
1001073c:	1001a3a2 	.word	0x1001a3a2
10010740:	1000fded 	.word	0x1000fded

10010744 <gapc_sec_req_ind>:
10010744:	0a00      	lsrs	r0, r0, #8
10010746:	8010      	strh	r0, [r2, #0]
10010748:	7809      	ldrb	r1, [r1, #0]
1001074a:	2301      	movs	r3, #1
1001074c:	1c08      	adds	r0, r1, #0
1001074e:	0889      	lsrs	r1, r1, #2
10010750:	4018      	ands	r0, r3
10010752:	400b      	ands	r3, r1
10010754:	70d0      	strb	r0, [r2, #3]
10010756:	7113      	strb	r3, [r2, #4]
10010758:	4770      	bx	lr

1001075a <gapc_sign_counter_ind_handler>:
1001075a:	0a00      	lsrs	r0, r0, #8
1001075c:	8010      	strh	r0, [r2, #0]
1001075e:	784b      	ldrb	r3, [r1, #1]
10010760:	0218      	lsls	r0, r3, #8
10010762:	788b      	ldrb	r3, [r1, #2]
10010764:	041b      	lsls	r3, r3, #16
10010766:	4303      	orrs	r3, r0
10010768:	7808      	ldrb	r0, [r1, #0]
1001076a:	4303      	orrs	r3, r0
1001076c:	78c8      	ldrb	r0, [r1, #3]
1001076e:	0600      	lsls	r0, r0, #24
10010770:	4303      	orrs	r3, r0
10010772:	6053      	str	r3, [r2, #4]
10010774:	794b      	ldrb	r3, [r1, #5]
10010776:	0218      	lsls	r0, r3, #8
10010778:	798b      	ldrb	r3, [r1, #6]
1001077a:	041b      	lsls	r3, r3, #16
1001077c:	4303      	orrs	r3, r0
1001077e:	7908      	ldrb	r0, [r1, #4]
10010780:	79c9      	ldrb	r1, [r1, #7]
10010782:	4303      	orrs	r3, r0
10010784:	0609      	lsls	r1, r1, #24
10010786:	430b      	orrs	r3, r1
10010788:	2000      	movs	r0, #0
1001078a:	6093      	str	r3, [r2, #8]
1001078c:	4770      	bx	lr
	...

10010790 <gapc_peer_att_info_ind_handler>:
10010790:	b510      	push	{r4, lr}
10010792:	0a00      	lsrs	r0, r0, #8
10010794:	8010      	strh	r0, [r2, #0]
10010796:	7808      	ldrb	r0, [r1, #0]
10010798:	7090      	strb	r0, [r2, #2]
1001079a:	788b      	ldrb	r3, [r1, #2]
1001079c:	784c      	ldrb	r4, [r1, #1]
1001079e:	021b      	lsls	r3, r3, #8
100107a0:	4323      	orrs	r3, r4
100107a2:	8093      	strh	r3, [r2, #4]
100107a4:	2801      	cmp	r0, #1
100107a6:	d027      	beq.n	100107f8 <gapc_peer_att_info_ind_handler+0x68>
100107a8:	2800      	cmp	r0, #0
100107aa:	d017      	beq.n	100107dc <gapc_peer_att_info_ind_handler+0x4c>
100107ac:	2802      	cmp	r0, #2
100107ae:	d12a      	bne.n	10010806 <gapc_peer_att_info_ind_handler+0x76>
100107b0:	790b      	ldrb	r3, [r1, #4]
100107b2:	78c8      	ldrb	r0, [r1, #3]
100107b4:	021b      	lsls	r3, r3, #8
100107b6:	4303      	orrs	r3, r0
100107b8:	8113      	strh	r3, [r2, #8]
100107ba:	798b      	ldrb	r3, [r1, #6]
100107bc:	7948      	ldrb	r0, [r1, #5]
100107be:	021b      	lsls	r3, r3, #8
100107c0:	4303      	orrs	r3, r0
100107c2:	80d3      	strh	r3, [r2, #6]
100107c4:	7a0b      	ldrb	r3, [r1, #8]
100107c6:	79c8      	ldrb	r0, [r1, #7]
100107c8:	021b      	lsls	r3, r3, #8
100107ca:	4303      	orrs	r3, r0
100107cc:	8193      	strh	r3, [r2, #12]
100107ce:	7a8b      	ldrb	r3, [r1, #10]
100107d0:	7a49      	ldrb	r1, [r1, #9]
100107d2:	021b      	lsls	r3, r3, #8
100107d4:	430b      	orrs	r3, r1
100107d6:	8153      	strh	r3, [r2, #10]
100107d8:	2306      	movs	r3, #6
100107da:	e013      	b.n	10010804 <gapc_peer_att_info_ind_handler+0x74>
100107dc:	1c14      	adds	r4, r2, #0
100107de:	1c20      	adds	r0, r4, #0
100107e0:	790a      	ldrb	r2, [r1, #4]
100107e2:	78cb      	ldrb	r3, [r1, #3]
100107e4:	0212      	lsls	r2, r2, #8
100107e6:	431a      	orrs	r2, r3
100107e8:	80e2      	strh	r2, [r4, #6]
100107ea:	4b07      	ldr	r3, [pc, #28]	; (10010808 <gapc_peer_att_info_ind_handler+0x78>)
100107ec:	3008      	adds	r0, #8
100107ee:	3105      	adds	r1, #5
100107f0:	4798      	blx	r3
100107f2:	2302      	movs	r3, #2
100107f4:	70a3      	strb	r3, [r4, #2]
100107f6:	e006      	b.n	10010806 <gapc_peer_att_info_ind_handler+0x76>
100107f8:	790b      	ldrb	r3, [r1, #4]
100107fa:	78c9      	ldrb	r1, [r1, #3]
100107fc:	021b      	lsls	r3, r3, #8
100107fe:	430b      	orrs	r3, r1
10010800:	80d3      	strh	r3, [r2, #6]
10010802:	2305      	movs	r3, #5
10010804:	7093      	strb	r3, [r2, #2]
10010806:	bd10      	pop	{r4, pc}
10010808:	100155bb 	.word	0x100155bb

1001080c <gapc_con_channel_map_ind_handler>:
1001080c:	b508      	push	{r3, lr}
1001080e:	2300      	movs	r3, #0
10010810:	0a00      	lsrs	r0, r0, #8
10010812:	7013      	strb	r3, [r2, #0]
10010814:	8050      	strh	r0, [r2, #2]
10010816:	4b02      	ldr	r3, [pc, #8]	; (10010820 <gapc_con_channel_map_ind_handler+0x14>)
10010818:	1d10      	adds	r0, r2, #4
1001081a:	2205      	movs	r2, #5
1001081c:	4798      	blx	r3
1001081e:	bd08      	pop	{r3, pc}
10010820:	100155bb 	.word	0x100155bb

10010824 <gapc_lecb_connected>:
10010824:	7843      	ldrb	r3, [r0, #1]
10010826:	7802      	ldrb	r2, [r0, #0]
10010828:	021b      	lsls	r3, r3, #8
1001082a:	4313      	orrs	r3, r2
1001082c:	800b      	strh	r3, [r1, #0]
1001082e:	78c3      	ldrb	r3, [r0, #3]
10010830:	7882      	ldrb	r2, [r0, #2]
10010832:	021b      	lsls	r3, r3, #8
10010834:	4313      	orrs	r3, r2
10010836:	804b      	strh	r3, [r1, #2]
10010838:	7943      	ldrb	r3, [r0, #5]
1001083a:	7902      	ldrb	r2, [r0, #4]
1001083c:	021b      	lsls	r3, r3, #8
1001083e:	4313      	orrs	r3, r2
10010840:	808b      	strh	r3, [r1, #4]
10010842:	79c3      	ldrb	r3, [r0, #7]
10010844:	7982      	ldrb	r2, [r0, #6]
10010846:	021b      	lsls	r3, r3, #8
10010848:	4313      	orrs	r3, r2
1001084a:	80cb      	strh	r3, [r1, #6]
1001084c:	2300      	movs	r3, #0
1001084e:	720b      	strb	r3, [r1, #8]
10010850:	4770      	bx	lr

10010852 <gapc_lecb_disconnected>:
10010852:	7843      	ldrb	r3, [r0, #1]
10010854:	7802      	ldrb	r2, [r0, #0]
10010856:	021b      	lsls	r3, r3, #8
10010858:	4313      	orrs	r3, r2
1001085a:	800b      	strh	r3, [r1, #0]
1001085c:	78c3      	ldrb	r3, [r0, #3]
1001085e:	7882      	ldrb	r2, [r0, #2]
10010860:	021b      	lsls	r3, r3, #8
10010862:	4313      	orrs	r3, r2
10010864:	804b      	strh	r3, [r1, #2]
10010866:	4770      	bx	lr

10010868 <gapc_lecb_connect_req_ind>:
10010868:	7843      	ldrb	r3, [r0, #1]
1001086a:	7802      	ldrb	r2, [r0, #0]
1001086c:	021b      	lsls	r3, r3, #8
1001086e:	4313      	orrs	r3, r2
10010870:	800b      	strh	r3, [r1, #0]
10010872:	78c3      	ldrb	r3, [r0, #3]
10010874:	7882      	ldrb	r2, [r0, #2]
10010876:	021b      	lsls	r3, r3, #8
10010878:	4313      	orrs	r3, r2
1001087a:	804b      	strh	r3, [r1, #2]
1001087c:	7943      	ldrb	r3, [r0, #5]
1001087e:	7902      	ldrb	r2, [r0, #4]
10010880:	021b      	lsls	r3, r3, #8
10010882:	4313      	orrs	r3, r2
10010884:	808b      	strh	r3, [r1, #4]
10010886:	79c3      	ldrb	r3, [r0, #7]
10010888:	7982      	ldrb	r2, [r0, #6]
1001088a:	021b      	lsls	r3, r3, #8
1001088c:	4313      	orrs	r3, r2
1001088e:	80cb      	strh	r3, [r1, #6]
10010890:	4770      	bx	lr

10010892 <gapc_lecb_add_credit_resp_handler>:
10010892:	7843      	ldrb	r3, [r0, #1]
10010894:	7802      	ldrb	r2, [r0, #0]
10010896:	021b      	lsls	r3, r3, #8
10010898:	4313      	orrs	r3, r2
1001089a:	800b      	strh	r3, [r1, #0]
1001089c:	78c3      	ldrb	r3, [r0, #3]
1001089e:	7882      	ldrb	r2, [r0, #2]
100108a0:	021b      	lsls	r3, r3, #8
100108a2:	4313      	orrs	r3, r2
100108a4:	804b      	strh	r3, [r1, #2]
100108a6:	7943      	ldrb	r3, [r0, #5]
100108a8:	7902      	ldrb	r2, [r0, #4]
100108aa:	021b      	lsls	r3, r3, #8
100108ac:	4313      	orrs	r3, r2
100108ae:	808b      	strh	r3, [r1, #4]
100108b0:	4770      	bx	lr
	...

100108b4 <gapm_reset_req_handler>:
100108b4:	b573      	push	{r0, r1, r4, r5, r6, lr}
100108b6:	466b      	mov	r3, sp
100108b8:	4915      	ldr	r1, [pc, #84]	; (10010910 <gapm_reset_req_handler+0x5c>)
100108ba:	4816      	ldr	r0, [pc, #88]	; (10010914 <gapm_reset_req_handler+0x60>)
100108bc:	880c      	ldrh	r4, [r1, #0]
100108be:	8809      	ldrh	r1, [r1, #0]
100108c0:	1ddd      	adds	r5, r3, #7
100108c2:	0a09      	lsrs	r1, r1, #8
100108c4:	2300      	movs	r3, #0
100108c6:	2202      	movs	r2, #2
100108c8:	7141      	strb	r1, [r0, #5]
100108ca:	26d0      	movs	r6, #208	; 0xd0
100108cc:	2101      	movs	r1, #1
100108ce:	7104      	strb	r4, [r0, #4]
100108d0:	4c11      	ldr	r4, [pc, #68]	; (10010918 <gapm_reset_req_handler+0x64>)
100108d2:	702b      	strb	r3, [r5, #0]
100108d4:	7002      	strb	r2, [r0, #0]
100108d6:	70c3      	strb	r3, [r0, #3]
100108d8:	320b      	adds	r2, #11
100108da:	7201      	strb	r1, [r0, #8]
100108dc:	7181      	strb	r1, [r0, #6]
100108de:	71c3      	strb	r3, [r0, #7]
100108e0:	3108      	adds	r1, #8
100108e2:	4b0e      	ldr	r3, [pc, #56]	; (1001091c <gapm_reset_req_handler+0x68>)
100108e4:	0136      	lsls	r6, r6, #4
100108e6:	7042      	strb	r2, [r0, #1]
100108e8:	7082      	strb	r2, [r0, #2]
100108ea:	80a2      	strh	r2, [r4, #4]
100108ec:	8026      	strh	r6, [r4, #0]
100108ee:	4798      	blx	r3
100108f0:	1c28      	adds	r0, r5, #0
100108f2:	4b0b      	ldr	r3, [pc, #44]	; (10010920 <gapm_reset_req_handler+0x6c>)
100108f4:	4798      	blx	r3
100108f6:	782b      	ldrb	r3, [r5, #0]
100108f8:	20e2      	movs	r0, #226	; 0xe2
100108fa:	2b00      	cmp	r3, #0
100108fc:	d106      	bne.n	1001090c <gapm_reset_req_handler+0x58>
100108fe:	68a3      	ldr	r3, [r4, #8]
10010900:	20e2      	movs	r0, #226	; 0xe2
10010902:	781a      	ldrb	r2, [r3, #0]
10010904:	785b      	ldrb	r3, [r3, #1]
10010906:	2a01      	cmp	r2, #1
10010908:	d100      	bne.n	1001090c <gapm_reset_req_handler+0x58>
1001090a:	1c18      	adds	r0, r3, #0
1001090c:	bd76      	pop	{r1, r2, r4, r5, r6, pc}
1001090e:	46c0      	nop			; (mov r8, r8)
10010910:	1001a310 	.word	0x1001a310
10010914:	1001a680 	.word	0x1001a680
10010918:	1001a304 	.word	0x1001a304
1001091c:	1000fcdd 	.word	0x1000fcdd
10010920:	1000fd41 	.word	0x1000fd41

10010924 <gapm_set_dev_config_cmd_handler>:
10010924:	b5f0      	push	{r4, r5, r6, r7, lr}
10010926:	b089      	sub	sp, #36	; 0x24
10010928:	9303      	str	r3, [sp, #12]
1001092a:	ab0e      	add	r3, sp, #56	; 0x38
1001092c:	781b      	ldrb	r3, [r3, #0]
1001092e:	4c37      	ldr	r4, [pc, #220]	; (10010a0c <gapm_set_dev_config_cmd_handler+0xe8>)
10010930:	9304      	str	r3, [sp, #16]
10010932:	ab0f      	add	r3, sp, #60	; 0x3c
10010934:	781b      	ldrb	r3, [r3, #0]
10010936:	270d      	movs	r7, #13
10010938:	9305      	str	r3, [sp, #20]
1001093a:	ab10      	add	r3, sp, #64	; 0x40
1001093c:	881b      	ldrh	r3, [r3, #0]
1001093e:	72a1      	strb	r1, [r4, #10]
10010940:	9300      	str	r3, [sp, #0]
10010942:	ab11      	add	r3, sp, #68	; 0x44
10010944:	881b      	ldrh	r3, [r3, #0]
10010946:	0a09      	lsrs	r1, r1, #8
10010948:	9301      	str	r3, [sp, #4]
1001094a:	ab12      	add	r3, sp, #72	; 0x48
1001094c:	881b      	ldrh	r3, [r3, #0]
1001094e:	7260      	strb	r0, [r4, #9]
10010950:	9302      	str	r3, [sp, #8]
10010952:	ab06      	add	r3, sp, #24
10010954:	1dde      	adds	r6, r3, #7
10010956:	2300      	movs	r3, #0
10010958:	7033      	strb	r3, [r6, #0]
1001095a:	2304      	movs	r3, #4
1001095c:	7023      	strb	r3, [r4, #0]
1001095e:	2300      	movs	r3, #0
10010960:	70e3      	strb	r3, [r4, #3]
10010962:	4b2b      	ldr	r3, [pc, #172]	; (10010a10 <gapm_set_dev_config_cmd_handler+0xec>)
10010964:	72e1      	strb	r1, [r4, #11]
10010966:	881d      	ldrh	r5, [r3, #0]
10010968:	881b      	ldrh	r3, [r3, #0]
1001096a:	1c11      	adds	r1, r2, #0
1001096c:	0a1b      	lsrs	r3, r3, #8
1001096e:	7163      	strb	r3, [r4, #5]
10010970:	2303      	movs	r3, #3
10010972:	7125      	strb	r5, [r4, #4]
10010974:	2206      	movs	r2, #6
10010976:	4d27      	ldr	r5, [pc, #156]	; (10010a14 <gapm_set_dev_config_cmd_handler+0xf0>)
10010978:	4827      	ldr	r0, [pc, #156]	; (10010a18 <gapm_set_dev_config_cmd_handler+0xf4>)
1001097a:	7223      	strb	r3, [r4, #8]
1001097c:	7067      	strb	r7, [r4, #1]
1001097e:	70a7      	strb	r7, [r4, #2]
10010980:	47a8      	blx	r5
10010982:	9903      	ldr	r1, [sp, #12]
10010984:	2210      	movs	r2, #16
10010986:	4825      	ldr	r0, [pc, #148]	; (10010a1c <gapm_set_dev_config_cmd_handler+0xf8>)
10010988:	47a8      	blx	r5
1001098a:	466a      	mov	r2, sp
1001098c:	7c12      	ldrb	r2, [r2, #16]
1001098e:	1ce3      	adds	r3, r4, #3
10010990:	77da      	strb	r2, [r3, #31]
10010992:	466a      	mov	r2, sp
10010994:	7d12      	ldrb	r2, [r2, #20]
10010996:	1d23      	adds	r3, r4, #4
10010998:	77da      	strb	r2, [r3, #31]
1001099a:	466a      	mov	r2, sp
1001099c:	7812      	ldrb	r2, [r2, #0]
1001099e:	1d63      	adds	r3, r4, #5
100109a0:	77da      	strb	r2, [r3, #31]
100109a2:	9b00      	ldr	r3, [sp, #0]
100109a4:	1da2      	adds	r2, r4, #6
100109a6:	0a1b      	lsrs	r3, r3, #8
100109a8:	77d3      	strb	r3, [r2, #31]
100109aa:	466a      	mov	r2, sp
100109ac:	7912      	ldrb	r2, [r2, #4]
100109ae:	1de3      	adds	r3, r4, #7
100109b0:	77da      	strb	r2, [r3, #31]
100109b2:	1c22      	adds	r2, r4, #0
100109b4:	9b01      	ldr	r3, [sp, #4]
100109b6:	3208      	adds	r2, #8
100109b8:	0a1b      	lsrs	r3, r3, #8
100109ba:	77d3      	strb	r3, [r2, #31]
100109bc:	466a      	mov	r2, sp
100109be:	1c23      	adds	r3, r4, #0
100109c0:	7a12      	ldrb	r2, [r2, #8]
100109c2:	3328      	adds	r3, #40	; 0x28
100109c4:	701a      	strb	r2, [r3, #0]
100109c6:	1c22      	adds	r2, r4, #0
100109c8:	9b02      	ldr	r3, [sp, #8]
100109ca:	3229      	adds	r2, #41	; 0x29
100109cc:	0a1b      	lsrs	r3, r3, #8
100109ce:	7013      	strb	r3, [r2, #0]
100109d0:	23d0      	movs	r3, #208	; 0xd0
100109d2:	4d13      	ldr	r5, [pc, #76]	; (10010a20 <gapm_set_dev_config_cmd_handler+0xfc>)
100109d4:	011b      	lsls	r3, r3, #4
100109d6:	802b      	strh	r3, [r5, #0]
100109d8:	2322      	movs	r3, #34	; 0x22
100109da:	71a3      	strb	r3, [r4, #6]
100109dc:	2300      	movs	r3, #0
100109de:	212a      	movs	r1, #42	; 0x2a
100109e0:	71e3      	strb	r3, [r4, #7]
100109e2:	1c20      	adds	r0, r4, #0
100109e4:	4b0f      	ldr	r3, [pc, #60]	; (10010a24 <gapm_set_dev_config_cmd_handler+0x100>)
100109e6:	80af      	strh	r7, [r5, #4]
100109e8:	4798      	blx	r3
100109ea:	1c30      	adds	r0, r6, #0
100109ec:	4b0e      	ldr	r3, [pc, #56]	; (10010a28 <gapm_set_dev_config_cmd_handler+0x104>)
100109ee:	4798      	blx	r3
100109f0:	7833      	ldrb	r3, [r6, #0]
100109f2:	20e2      	movs	r0, #226	; 0xe2
100109f4:	2b00      	cmp	r3, #0
100109f6:	d106      	bne.n	10010a06 <gapm_set_dev_config_cmd_handler+0xe2>
100109f8:	68ab      	ldr	r3, [r5, #8]
100109fa:	20e2      	movs	r0, #226	; 0xe2
100109fc:	781a      	ldrb	r2, [r3, #0]
100109fe:	785b      	ldrb	r3, [r3, #1]
10010a00:	2a03      	cmp	r2, #3
10010a02:	d100      	bne.n	10010a06 <gapm_set_dev_config_cmd_handler+0xe2>
10010a04:	1c18      	adds	r0, r3, #0
10010a06:	b009      	add	sp, #36	; 0x24
10010a08:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010a0a:	46c0      	nop			; (mov r8, r8)
10010a0c:	1001a680 	.word	0x1001a680
10010a10:	1001a310 	.word	0x1001a310
10010a14:	100155bb 	.word	0x100155bb
10010a18:	1001a68c 	.word	0x1001a68c
10010a1c:	1001a692 	.word	0x1001a692
10010a20:	1001a304 	.word	0x1001a304
10010a24:	1000fcdd 	.word	0x1000fcdd
10010a28:	1000fd41 	.word	0x1000fd41

10010a2c <gapm_get_dev_config_cmd_handler>:
10010a2c:	4684      	mov	ip, r0
10010a2e:	4663      	mov	r3, ip
10010a30:	b5f0      	push	{r4, r5, r6, r7, lr}
10010a32:	b085      	sub	sp, #20
10010a34:	9100      	str	r1, [sp, #0]
10010a36:	20cf      	movs	r0, #207	; 0xcf
10010a38:	2b01      	cmp	r3, #1
10010a3a:	d854      	bhi.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010a3c:	2900      	cmp	r1, #0
10010a3e:	d052      	beq.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010a40:	2200      	movs	r2, #0
10010a42:	492a      	ldr	r1, [pc, #168]	; (10010aec <gapm_get_dev_config_cmd_handler+0xc0>)
10010a44:	ab02      	add	r3, sp, #8
10010a46:	880c      	ldrh	r4, [r1, #0]
10010a48:	8809      	ldrh	r1, [r1, #0]
10010a4a:	1d9f      	adds	r7, r3, #6
10010a4c:	719a      	strb	r2, [r3, #6]
10010a4e:	4b28      	ldr	r3, [pc, #160]	; (10010af0 <gapm_get_dev_config_cmd_handler+0xc4>)
10010a50:	0a09      	lsrs	r1, r1, #8
10010a52:	250d      	movs	r5, #13
10010a54:	2606      	movs	r6, #6
10010a56:	7159      	strb	r1, [r3, #5]
10010a58:	4661      	mov	r1, ip
10010a5a:	701e      	strb	r6, [r3, #0]
10010a5c:	705d      	strb	r5, [r3, #1]
10010a5e:	709d      	strb	r5, [r3, #2]
10010a60:	70da      	strb	r2, [r3, #3]
10010a62:	711c      	strb	r4, [r3, #4]
10010a64:	2901      	cmp	r1, #1
10010a66:	d13e      	bne.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010a68:	21d0      	movs	r1, #208	; 0xd0
10010a6a:	4c22      	ldr	r4, [pc, #136]	; (10010af4 <gapm_get_dev_config_cmd_handler+0xc8>)
10010a6c:	0109      	lsls	r1, r1, #4
10010a6e:	8061      	strh	r1, [r4, #2]
10010a70:	4921      	ldr	r1, [pc, #132]	; (10010af8 <gapm_get_dev_config_cmd_handler+0xcc>)
10010a72:	71da      	strb	r2, [r3, #7]
10010a74:	8021      	strh	r1, [r4, #0]
10010a76:	4661      	mov	r1, ip
10010a78:	721e      	strb	r6, [r3, #8]
10010a7a:	7199      	strb	r1, [r3, #6]
10010a7c:	1c18      	adds	r0, r3, #0
10010a7e:	2109      	movs	r1, #9
10010a80:	4b1e      	ldr	r3, [pc, #120]	; (10010afc <gapm_get_dev_config_cmd_handler+0xd0>)
10010a82:	80a5      	strh	r5, [r4, #4]
10010a84:	4798      	blx	r3
10010a86:	1c38      	adds	r0, r7, #0
10010a88:	4b1d      	ldr	r3, [pc, #116]	; (10010b00 <gapm_get_dev_config_cmd_handler+0xd4>)
10010a8a:	4798      	blx	r3
10010a8c:	783b      	ldrb	r3, [r7, #0]
10010a8e:	20e2      	movs	r0, #226	; 0xe2
10010a90:	9301      	str	r3, [sp, #4]
10010a92:	2b00      	cmp	r3, #0
10010a94:	d127      	bne.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010a96:	8821      	ldrh	r1, [r4, #0]
10010a98:	4a1a      	ldr	r2, [pc, #104]	; (10010b04 <gapm_get_dev_config_cmd_handler+0xd8>)
10010a9a:	68a7      	ldr	r7, [r4, #8]
10010a9c:	3b01      	subs	r3, #1
10010a9e:	4291      	cmp	r1, r2
10010aa0:	d001      	beq.n	10010aa6 <gapm_get_dev_config_cmd_handler+0x7a>
10010aa2:	8023      	strh	r3, [r4, #0]
10010aa4:	e01a      	b.n	10010adc <gapm_get_dev_config_cmd_handler+0xb0>
10010aa6:	8063      	strh	r3, [r4, #2]
10010aa8:	9b00      	ldr	r3, [sp, #0]
10010aaa:	1c39      	adds	r1, r7, #0
10010aac:	1c58      	adds	r0, r3, #1
10010aae:	1c32      	adds	r2, r6, #0
10010ab0:	4b15      	ldr	r3, [pc, #84]	; (10010b08 <gapm_get_dev_config_cmd_handler+0xdc>)
10010ab2:	4798      	blx	r3
10010ab4:	79bb      	ldrb	r3, [r7, #6]
10010ab6:	9a00      	ldr	r2, [sp, #0]
10010ab8:	7013      	strb	r3, [r2, #0]
10010aba:	23d0      	movs	r3, #208	; 0xd0
10010abc:	011b      	lsls	r3, r3, #4
10010abe:	8023      	strh	r3, [r4, #0]
10010ac0:	ab02      	add	r3, sp, #8
10010ac2:	80a5      	strh	r5, [r4, #4]
10010ac4:	1ddd      	adds	r5, r3, #7
10010ac6:	466b      	mov	r3, sp
10010ac8:	791b      	ldrb	r3, [r3, #4]
10010aca:	1c28      	adds	r0, r5, #0
10010acc:	702b      	strb	r3, [r5, #0]
10010ace:	4b0c      	ldr	r3, [pc, #48]	; (10010b00 <gapm_get_dev_config_cmd_handler+0xd4>)
10010ad0:	4798      	blx	r3
10010ad2:	782b      	ldrb	r3, [r5, #0]
10010ad4:	20d0      	movs	r0, #208	; 0xd0
10010ad6:	2b00      	cmp	r3, #0
10010ad8:	d105      	bne.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010ada:	68a7      	ldr	r7, [r4, #8]
10010adc:	783b      	ldrb	r3, [r7, #0]
10010ade:	7878      	ldrb	r0, [r7, #1]
10010ae0:	2b06      	cmp	r3, #6
10010ae2:	d000      	beq.n	10010ae6 <gapm_get_dev_config_cmd_handler+0xba>
10010ae4:	20e2      	movs	r0, #226	; 0xe2
10010ae6:	b005      	add	sp, #20
10010ae8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010aea:	46c0      	nop			; (mov r8, r8)
10010aec:	1001a310 	.word	0x1001a310
10010af0:	1001a680 	.word	0x1001a680
10010af4:	1001a304 	.word	0x1001a304
10010af8:	00000d08 	.word	0x00000d08
10010afc:	1000fcdd 	.word	0x1000fcdd
10010b00:	1000fd41 	.word	0x1000fd41
10010b04:	0000ffff 	.word	0x0000ffff
10010b08:	100155bb 	.word	0x100155bb

10010b0c <gapm_cancel_cmd_handler>:
10010b0c:	b537      	push	{r0, r1, r2, r4, r5, lr}
10010b0e:	4916      	ldr	r1, [pc, #88]	; (10010b68 <gapm_cancel_cmd_handler+0x5c>)
10010b10:	4816      	ldr	r0, [pc, #88]	; (10010b6c <gapm_cancel_cmd_handler+0x60>)
10010b12:	880c      	ldrh	r4, [r1, #0]
10010b14:	8809      	ldrh	r1, [r1, #0]
10010b16:	466b      	mov	r3, sp
10010b18:	0a09      	lsrs	r1, r1, #8
10010b1a:	7141      	strb	r1, [r0, #5]
10010b1c:	2102      	movs	r1, #2
10010b1e:	2203      	movs	r2, #3
10010b20:	7201      	strb	r1, [r0, #8]
10010b22:	21d0      	movs	r1, #208	; 0xd0
10010b24:	1ddd      	adds	r5, r3, #7
10010b26:	2300      	movs	r3, #0
10010b28:	7104      	strb	r4, [r0, #4]
10010b2a:	4c11      	ldr	r4, [pc, #68]	; (10010b70 <gapm_cancel_cmd_handler+0x64>)
10010b2c:	7002      	strb	r2, [r0, #0]
10010b2e:	0109      	lsls	r1, r1, #4
10010b30:	320a      	adds	r2, #10
10010b32:	702b      	strb	r3, [r5, #0]
10010b34:	7042      	strb	r2, [r0, #1]
10010b36:	7082      	strb	r2, [r0, #2]
10010b38:	70c3      	strb	r3, [r0, #3]
10010b3a:	8021      	strh	r1, [r4, #0]
10010b3c:	80a2      	strh	r2, [r4, #4]
10010b3e:	71c3      	strb	r3, [r0, #7]
10010b40:	3a0c      	subs	r2, #12
10010b42:	2109      	movs	r1, #9
10010b44:	4b0b      	ldr	r3, [pc, #44]	; (10010b74 <gapm_cancel_cmd_handler+0x68>)
10010b46:	7182      	strb	r2, [r0, #6]
10010b48:	4798      	blx	r3
10010b4a:	1c28      	adds	r0, r5, #0
10010b4c:	4b0a      	ldr	r3, [pc, #40]	; (10010b78 <gapm_cancel_cmd_handler+0x6c>)
10010b4e:	4798      	blx	r3
10010b50:	7828      	ldrb	r0, [r5, #0]
10010b52:	2800      	cmp	r0, #0
10010b54:	d001      	beq.n	10010b5a <gapm_cancel_cmd_handler+0x4e>
10010b56:	20e2      	movs	r0, #226	; 0xe2
10010b58:	e004      	b.n	10010b64 <gapm_cancel_cmd_handler+0x58>
10010b5a:	68a3      	ldr	r3, [r4, #8]
10010b5c:	785b      	ldrb	r3, [r3, #1]
10010b5e:	2b44      	cmp	r3, #68	; 0x44
10010b60:	d000      	beq.n	10010b64 <gapm_cancel_cmd_handler+0x58>
10010b62:	1c18      	adds	r0, r3, #0
10010b64:	bd3e      	pop	{r1, r2, r3, r4, r5, pc}
10010b66:	46c0      	nop			; (mov r8, r8)
10010b68:	1001a310 	.word	0x1001a310
10010b6c:	1001a680 	.word	0x1001a680
10010b70:	1001a304 	.word	0x1001a304
10010b74:	1000fcdd 	.word	0x1000fcdd
10010b78:	1000fd41 	.word	0x1000fd41

10010b7c <gapm_dev_bdaddr_ind_handler>:
10010b7c:	b538      	push	{r3, r4, r5, lr}
10010b7e:	1c05      	adds	r5, r0, #0
10010b80:	1c0c      	adds	r4, r1, #0
10010b82:	1c48      	adds	r0, r1, #1
10010b84:	2206      	movs	r2, #6
10010b86:	1c29      	adds	r1, r5, #0
10010b88:	4b02      	ldr	r3, [pc, #8]	; (10010b94 <gapm_dev_bdaddr_ind_handler+0x18>)
10010b8a:	4798      	blx	r3
10010b8c:	79ab      	ldrb	r3, [r5, #6]
10010b8e:	2000      	movs	r0, #0
10010b90:	7023      	strb	r3, [r4, #0]
10010b92:	bd38      	pop	{r3, r4, r5, pc}
10010b94:	100155bb 	.word	0x100155bb

10010b98 <gapm_cmp_evt>:
10010b98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010b9a:	7803      	ldrb	r3, [r0, #0]
10010b9c:	7845      	ldrb	r5, [r0, #1]
10010b9e:	3b0c      	subs	r3, #12
10010ba0:	1e18      	subs	r0, r3, #0
10010ba2:	280b      	cmp	r0, #11
10010ba4:	d900      	bls.n	10010ba8 <gapm_cmp_evt+0x10>
10010ba6:	e08d      	b.n	10010cc4 <gapm_cmp_evt+0x12c>
10010ba8:	1c0c      	adds	r4, r1, #0
10010baa:	f001 fe6f 	bl	1001288c <__gnu_thumb1_case_uqi>
10010bae:	1952      	.short	0x1952
10010bb0:	068b1919 	.word	0x068b1919
10010bb4:	8b595906 	.word	0x8b595906
10010bb8:	0d8b      	.short	0x0d8b
10010bba:	2300      	movs	r3, #0
10010bbc:	2d45      	cmp	r5, #69	; 0x45
10010bbe:	d000      	beq.n	10010bc2 <gapm_cmp_evt+0x2a>
10010bc0:	1c2b      	adds	r3, r5, #0
10010bc2:	7023      	strb	r3, [r4, #0]
10010bc4:	2002      	movs	r0, #2
10010bc6:	e07e      	b.n	10010cc6 <gapm_cmp_evt+0x12e>
10010bc8:	203b      	movs	r0, #59	; 0x3b
10010bca:	2d00      	cmp	r5, #0
10010bcc:	d100      	bne.n	10010bd0 <gapm_cmp_evt+0x38>
10010bce:	e07a      	b.n	10010cc6 <gapm_cmp_evt+0x12e>
10010bd0:	700d      	strb	r5, [r1, #0]
10010bd2:	1c48      	adds	r0, r1, #1
10010bd4:	2210      	movs	r2, #16
10010bd6:	2100      	movs	r1, #0
10010bd8:	4b3b      	ldr	r3, [pc, #236]	; (10010cc8 <gapm_cmp_evt+0x130>)
10010bda:	4798      	blx	r3
10010bdc:	200f      	movs	r0, #15
10010bde:	e072      	b.n	10010cc6 <gapm_cmp_evt+0x12e>
10010be0:	2d00      	cmp	r5, #0
10010be2:	d134      	bne.n	10010c4e <gapm_cmp_evt+0xb6>
10010be4:	4b39      	ldr	r3, [pc, #228]	; (10010ccc <gapm_cmp_evt+0x134>)
10010be6:	4798      	blx	r3
10010be8:	1e43      	subs	r3, r0, #1
10010bea:	b2db      	uxtb	r3, r3
10010bec:	1c28      	adds	r0, r5, #0
10010bee:	2b06      	cmp	r3, #6
10010bf0:	d869      	bhi.n	10010cc6 <gapm_cmp_evt+0x12e>
10010bf2:	466b      	mov	r3, sp
10010bf4:	4e36      	ldr	r6, [pc, #216]	; (10010cd0 <gapm_cmp_evt+0x138>)
10010bf6:	1dd9      	adds	r1, r3, #7
10010bf8:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010bfa:	4b36      	ldr	r3, [pc, #216]	; (10010cd4 <gapm_cmp_evt+0x13c>)
10010bfc:	4798      	blx	r3
10010bfe:	2312      	movs	r3, #18
10010c00:	4358      	muls	r0, r3
10010c02:	4935      	ldr	r1, [pc, #212]	; (10010cd8 <gapm_cmp_evt+0x140>)
10010c04:	1809      	adds	r1, r1, r0
10010c06:	1c0b      	adds	r3, r1, #0
10010c08:	894a      	ldrh	r2, [r1, #10]
10010c0a:	3308      	adds	r3, #8
10010c0c:	8122      	strh	r2, [r4, #8]
10010c0e:	784f      	ldrb	r7, [r1, #1]
10010c10:	72a5      	strb	r5, [r4, #10]
10010c12:	7027      	strb	r7, [r4, #0]
10010c14:	898a      	ldrh	r2, [r1, #12]
10010c16:	1c60      	adds	r0, r4, #1
10010c18:	81a2      	strh	r2, [r4, #12]
10010c1a:	88db      	ldrh	r3, [r3, #6]
10010c1c:	3102      	adds	r1, #2
10010c1e:	81e3      	strh	r3, [r4, #14]
10010c20:	89cb      	ldrh	r3, [r1, #14]
10010c22:	2206      	movs	r2, #6
10010c24:	8223      	strh	r3, [r4, #16]
10010c26:	4b2d      	ldr	r3, [pc, #180]	; (10010cdc <gapm_cmp_evt+0x144>)
10010c28:	4798      	blx	r3
10010c2a:	2f00      	cmp	r7, #0
10010c2c:	d00a      	beq.n	10010c44 <gapm_cmp_evt+0xac>
10010c2e:	79a3      	ldrb	r3, [r4, #6]
10010c30:	223f      	movs	r2, #63	; 0x3f
10010c32:	1c19      	adds	r1, r3, #0
10010c34:	3501      	adds	r5, #1
10010c36:	4391      	bics	r1, r2
10010c38:	29c0      	cmp	r1, #192	; 0xc0
10010c3a:	d003      	beq.n	10010c44 <gapm_cmp_evt+0xac>
10010c3c:	065b      	lsls	r3, r3, #25
10010c3e:	0fdb      	lsrs	r3, r3, #31
10010c40:	3502      	adds	r5, #2
10010c42:	1aed      	subs	r5, r5, r3
10010c44:	2301      	movs	r3, #1
10010c46:	425b      	negs	r3, r3
10010c48:	7025      	strb	r5, [r4, #0]
10010c4a:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010c4c:	e038      	b.n	10010cc0 <gapm_cmp_evt+0x128>
10010c4e:	700d      	strb	r5, [r1, #0]
10010c50:	e004      	b.n	10010c5c <gapm_cmp_evt+0xc4>
10010c52:	2300      	movs	r3, #0
10010c54:	2d45      	cmp	r5, #69	; 0x45
10010c56:	d000      	beq.n	10010c5a <gapm_cmp_evt+0xc2>
10010c58:	1c2b      	adds	r3, r5, #0
10010c5a:	7023      	strb	r3, [r4, #0]
10010c5c:	2003      	movs	r0, #3
10010c5e:	e032      	b.n	10010cc6 <gapm_cmp_evt+0x12e>
10010c60:	4e1b      	ldr	r6, [pc, #108]	; (10010cd0 <gapm_cmp_evt+0x138>)
10010c62:	2100      	movs	r1, #0
10010c64:	8db0      	ldrh	r0, [r6, #44]	; 0x2c
10010c66:	4b1b      	ldr	r3, [pc, #108]	; (10010cd4 <gapm_cmp_evt+0x13c>)
10010c68:	4798      	blx	r3
10010c6a:	2807      	cmp	r0, #7
10010c6c:	d818      	bhi.n	10010ca0 <gapm_cmp_evt+0x108>
10010c6e:	2301      	movs	r3, #1
10010c70:	425b      	negs	r3, r3
10010c72:	85b3      	strh	r3, [r6, #44]	; 0x2c
10010c74:	3313      	adds	r3, #19
10010c76:	4358      	muls	r0, r3
10010c78:	4917      	ldr	r1, [pc, #92]	; (10010cd8 <gapm_cmp_evt+0x140>)
10010c7a:	1809      	adds	r1, r1, r0
10010c7c:	1c0b      	adds	r3, r1, #0
10010c7e:	894a      	ldrh	r2, [r1, #10]
10010c80:	3308      	adds	r3, #8
10010c82:	8122      	strh	r2, [r4, #8]
10010c84:	784a      	ldrb	r2, [r1, #1]
10010c86:	72a5      	strb	r5, [r4, #10]
10010c88:	7022      	strb	r2, [r4, #0]
10010c8a:	898a      	ldrh	r2, [r1, #12]
10010c8c:	1c60      	adds	r0, r4, #1
10010c8e:	81a2      	strh	r2, [r4, #12]
10010c90:	88db      	ldrh	r3, [r3, #6]
10010c92:	3102      	adds	r1, #2
10010c94:	81e3      	strh	r3, [r4, #14]
10010c96:	89cb      	ldrh	r3, [r1, #14]
10010c98:	2206      	movs	r2, #6
10010c9a:	8223      	strh	r3, [r4, #16]
10010c9c:	4b0f      	ldr	r3, [pc, #60]	; (10010cdc <gapm_cmp_evt+0x144>)
10010c9e:	4798      	blx	r3
10010ca0:	2200      	movs	r2, #0
10010ca2:	7823      	ldrb	r3, [r4, #0]
10010ca4:	4293      	cmp	r3, r2
10010ca6:	d00a      	beq.n	10010cbe <gapm_cmp_evt+0x126>
10010ca8:	79a3      	ldrb	r3, [r4, #6]
10010caa:	323f      	adds	r2, #63	; 0x3f
10010cac:	1c19      	adds	r1, r3, #0
10010cae:	4391      	bics	r1, r2
10010cb0:	3a3e      	subs	r2, #62	; 0x3e
10010cb2:	29c0      	cmp	r1, #192	; 0xc0
10010cb4:	d003      	beq.n	10010cbe <gapm_cmp_evt+0x126>
10010cb6:	065b      	lsls	r3, r3, #25
10010cb8:	0fdb      	lsrs	r3, r3, #31
10010cba:	3202      	adds	r2, #2
10010cbc:	1ad2      	subs	r2, r2, r3
10010cbe:	7022      	strb	r2, [r4, #0]
10010cc0:	2005      	movs	r0, #5
10010cc2:	e000      	b.n	10010cc6 <gapm_cmp_evt+0x12e>
10010cc4:	2000      	movs	r0, #0
10010cc6:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10010cc8:	100155cd 	.word	0x100155cd
10010ccc:	1000fee9 	.word	0x1000fee9
10010cd0:	1001a3a2 	.word	0x1001a3a2
10010cd4:	1000fead 	.word	0x1000fead
10010cd8:	1001a312 	.word	0x1001a312
10010cdc:	100155bb 	.word	0x100155bb

10010ce0 <gapm_start_adv_cmd_handler>:
10010ce0:	b5f0      	push	{r4, r5, r6, r7, lr}
10010ce2:	b089      	sub	sp, #36	; 0x24
10010ce4:	9303      	str	r3, [sp, #12]
10010ce6:	ab0e      	add	r3, sp, #56	; 0x38
10010ce8:	9102      	str	r1, [sp, #8]
10010cea:	cb02      	ldmia	r3!, {r1}
10010cec:	aa08      	add	r2, sp, #32
10010cee:	881b      	ldrh	r3, [r3, #0]
10010cf0:	4e3c      	ldr	r6, [pc, #240]	; (10010de4 <gapm_start_adv_cmd_handler+0x104>)
10010cf2:	9300      	str	r3, [sp, #0]
10010cf4:	ab10      	add	r3, sp, #64	; 0x40
10010cf6:	881b      	ldrh	r3, [r3, #0]
10010cf8:	240d      	movs	r4, #13
10010cfa:	469c      	mov	ip, r3
10010cfc:	ab11      	add	r3, sp, #68	; 0x44
10010cfe:	781b      	ldrb	r3, [r3, #0]
10010d00:	9304      	str	r3, [sp, #16]
10010d02:	ab12      	add	r3, sp, #72	; 0x48
10010d04:	781b      	ldrb	r3, [r3, #0]
10010d06:	9305      	str	r3, [sp, #20]
10010d08:	ab13      	add	r3, sp, #76	; 0x4c
10010d0a:	781b      	ldrb	r3, [r3, #0]
10010d0c:	9306      	str	r3, [sp, #24]
10010d0e:	ab14      	add	r3, sp, #80	; 0x50
10010d10:	781b      	ldrb	r3, [r3, #0]
10010d12:	9301      	str	r3, [sp, #4]
10010d14:	2319      	movs	r3, #25
10010d16:	189b      	adds	r3, r3, r2
10010d18:	7fdd      	ldrb	r5, [r3, #31]
10010d1a:	ab18      	add	r3, sp, #96	; 0x60
10010d1c:	881f      	ldrh	r7, [r3, #0]
10010d1e:	ab19      	add	r3, sp, #100	; 0x64
10010d20:	781b      	ldrb	r3, [r3, #0]
10010d22:	8832      	ldrh	r2, [r6, #0]
10010d24:	9307      	str	r3, [sp, #28]
10010d26:	4b30      	ldr	r3, [pc, #192]	; (10010de8 <gapm_start_adv_cmd_handler+0x108>)
10010d28:	8836      	ldrh	r6, [r6, #0]
10010d2a:	711a      	strb	r2, [r3, #4]
10010d2c:	466a      	mov	r2, sp
10010d2e:	7a12      	ldrb	r2, [r2, #8]
10010d30:	701c      	strb	r4, [r3, #0]
10010d32:	705c      	strb	r4, [r3, #1]
10010d34:	709c      	strb	r4, [r3, #2]
10010d36:	725a      	strb	r2, [r3, #9]
10010d38:	2400      	movs	r4, #0
10010d3a:	466a      	mov	r2, sp
10010d3c:	0a36      	lsrs	r6, r6, #8
10010d3e:	70dc      	strb	r4, [r3, #3]
10010d40:	7218      	strb	r0, [r3, #8]
10010d42:	729c      	strb	r4, [r3, #10]
10010d44:	715e      	strb	r6, [r3, #5]
10010d46:	72dc      	strb	r4, [r3, #11]
10010d48:	7812      	ldrb	r2, [r2, #0]
10010d4a:	380e      	subs	r0, #14
10010d4c:	731a      	strb	r2, [r3, #12]
10010d4e:	9a00      	ldr	r2, [sp, #0]
10010d50:	0a14      	lsrs	r4, r2, #8
10010d52:	4662      	mov	r2, ip
10010d54:	739a      	strb	r2, [r3, #14]
10010d56:	4662      	mov	r2, ip
10010d58:	735c      	strb	r4, [r3, #13]
10010d5a:	0a14      	lsrs	r4, r2, #8
10010d5c:	466a      	mov	r2, sp
10010d5e:	7c12      	ldrb	r2, [r2, #16]
10010d60:	73dc      	strb	r4, [r3, #15]
10010d62:	741a      	strb	r2, [r3, #16]
10010d64:	1c1c      	adds	r4, r3, #0
10010d66:	2801      	cmp	r0, #1
10010d68:	d809      	bhi.n	10010d7e <gapm_start_adv_cmd_handler+0x9e>
10010d6a:	2900      	cmp	r1, #0
10010d6c:	d003      	beq.n	10010d76 <gapm_start_adv_cmd_handler+0x96>
10010d6e:	481f      	ldr	r0, [pc, #124]	; (10010dec <gapm_start_adv_cmd_handler+0x10c>)
10010d70:	2206      	movs	r2, #6
10010d72:	4b1f      	ldr	r3, [pc, #124]	; (10010df0 <gapm_start_adv_cmd_handler+0x110>)
10010d74:	4798      	blx	r3
10010d76:	466b      	mov	r3, sp
10010d78:	7b1b      	ldrb	r3, [r3, #12]
10010d7a:	75e3      	strb	r3, [r4, #23]
10010d7c:	e014      	b.n	10010da8 <gapm_start_adv_cmd_handler+0xc8>
10010d7e:	466b      	mov	r3, sp
10010d80:	7d1b      	ldrb	r3, [r3, #20]
10010d82:	9915      	ldr	r1, [sp, #84]	; 0x54
10010d84:	7463      	strb	r3, [r4, #17]
10010d86:	466b      	mov	r3, sp
10010d88:	7e1b      	ldrb	r3, [r3, #24]
10010d8a:	9a01      	ldr	r2, [sp, #4]
10010d8c:	74a3      	strb	r3, [r4, #18]
10010d8e:	466b      	mov	r3, sp
10010d90:	791b      	ldrb	r3, [r3, #4]
10010d92:	4818      	ldr	r0, [pc, #96]	; (10010df4 <gapm_start_adv_cmd_handler+0x114>)
10010d94:	4e16      	ldr	r6, [pc, #88]	; (10010df0 <gapm_start_adv_cmd_handler+0x110>)
10010d96:	74e3      	strb	r3, [r4, #19]
10010d98:	47b0      	blx	r6
10010d9a:	1c23      	adds	r3, r4, #0
10010d9c:	4816      	ldr	r0, [pc, #88]	; (10010df8 <gapm_start_adv_cmd_handler+0x118>)
10010d9e:	3330      	adds	r3, #48	; 0x30
10010da0:	9917      	ldr	r1, [sp, #92]	; 0x5c
10010da2:	1c2a      	adds	r2, r5, #0
10010da4:	701d      	strb	r5, [r3, #0]
10010da6:	47b0      	blx	r6
10010da8:	1c22      	adds	r2, r4, #0
10010daa:	23a5      	movs	r3, #165	; 0xa5
10010dac:	3250      	adds	r2, #80	; 0x50
10010dae:	7013      	strb	r3, [r2, #0]
10010db0:	1c22      	adds	r2, r4, #0
10010db2:	3251      	adds	r2, #81	; 0x51
10010db4:	7013      	strb	r3, [r2, #0]
10010db6:	1c23      	adds	r3, r4, #0
10010db8:	1c22      	adds	r2, r4, #0
10010dba:	3352      	adds	r3, #82	; 0x52
10010dbc:	701f      	strb	r7, [r3, #0]
10010dbe:	3253      	adds	r2, #83	; 0x53
10010dc0:	0a3b      	lsrs	r3, r7, #8
10010dc2:	7013      	strb	r3, [r2, #0]
10010dc4:	466a      	mov	r2, sp
10010dc6:	1c23      	adds	r3, r4, #0
10010dc8:	7f12      	ldrb	r2, [r2, #28]
10010dca:	3354      	adds	r3, #84	; 0x54
10010dcc:	701a      	strb	r2, [r3, #0]
10010dce:	234d      	movs	r3, #77	; 0x4d
10010dd0:	2500      	movs	r5, #0
10010dd2:	71a3      	strb	r3, [r4, #6]
10010dd4:	1c20      	adds	r0, r4, #0
10010dd6:	2155      	movs	r1, #85	; 0x55
10010dd8:	4b08      	ldr	r3, [pc, #32]	; (10010dfc <gapm_start_adv_cmd_handler+0x11c>)
10010dda:	71e5      	strb	r5, [r4, #7]
10010ddc:	4798      	blx	r3
10010dde:	1c28      	adds	r0, r5, #0
10010de0:	b009      	add	sp, #36	; 0x24
10010de2:	bdf0      	pop	{r4, r5, r6, r7, pc}
10010de4:	1001a310 	.word	0x1001a310
10010de8:	1001a680 	.word	0x1001a680
10010dec:	1001a691 	.word	0x1001a691
10010df0:	100155bb 	.word	0x100155bb
10010df4:	1001a694 	.word	0x1001a694
10010df8:	1001a6b1 	.word	0x1001a6b1
10010dfc:	1000fcdd 	.word	0x1000fcdd

10010e00 <get_gap_local_addr_type>:
10010e00:	4b04      	ldr	r3, [pc, #16]	; (10010e14 <get_gap_local_addr_type+0x14>)
10010e02:	2001      	movs	r0, #1
10010e04:	791b      	ldrb	r3, [r3, #4]
10010e06:	2b02      	cmp	r3, #2
10010e08:	d003      	beq.n	10010e12 <get_gap_local_addr_type+0x12>
10010e0a:	3b03      	subs	r3, #3
10010e0c:	4258      	negs	r0, r3
10010e0e:	4158      	adcs	r0, r3
10010e10:	0040      	lsls	r0, r0, #1
10010e12:	4770      	bx	lr
10010e14:	1001a3a2 	.word	0x1001a3a2

10010e18 <gapm_adv_report_evt_handler>:
10010e18:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10010e1a:	7843      	ldrb	r3, [r0, #1]
10010e1c:	1c05      	adds	r5, r0, #0
10010e1e:	9301      	str	r3, [sp, #4]
10010e20:	466b      	mov	r3, sp
10010e22:	1c0c      	adds	r4, r1, #0
10010e24:	791b      	ldrb	r3, [r3, #4]
10010e26:	7806      	ldrb	r6, [r0, #0]
10010e28:	2206      	movs	r2, #6
10010e2a:	704b      	strb	r3, [r1, #1]
10010e2c:	1c88      	adds	r0, r1, #2
10010e2e:	4f1b      	ldr	r7, [pc, #108]	; (10010e9c <gapm_adv_report_evt_handler+0x84>)
10010e30:	1ca9      	adds	r1, r5, #2
10010e32:	47b8      	blx	r7
10010e34:	1c20      	adds	r0, r4, #0
10010e36:	1c29      	adds	r1, r5, #0
10010e38:	7a2a      	ldrb	r2, [r5, #8]
10010e3a:	3008      	adds	r0, #8
10010e3c:	77c2      	strb	r2, [r0, #31]
10010e3e:	3109      	adds	r1, #9
10010e40:	3528      	adds	r5, #40	; 0x28
10010e42:	47b8      	blx	r7
10010e44:	782b      	ldrb	r3, [r5, #0]
10010e46:	b25a      	sxtb	r2, r3
10010e48:	2a00      	cmp	r2, #0
10010e4a:	da01      	bge.n	10010e50 <gapm_adv_report_evt_handler+0x38>
10010e4c:	3301      	adds	r3, #1
10010e4e:	b2db      	uxtb	r3, r3
10010e50:	1c22      	adds	r2, r4, #0
10010e52:	3228      	adds	r2, #40	; 0x28
10010e54:	7013      	strb	r3, [r2, #0]
10010e56:	2200      	movs	r2, #0
10010e58:	9b01      	ldr	r3, [sp, #4]
10010e5a:	4293      	cmp	r3, r2
10010e5c:	d00a      	beq.n	10010e74 <gapm_adv_report_evt_handler+0x5c>
10010e5e:	79e3      	ldrb	r3, [r4, #7]
10010e60:	323f      	adds	r2, #63	; 0x3f
10010e62:	1c19      	adds	r1, r3, #0
10010e64:	4391      	bics	r1, r2
10010e66:	3a3e      	subs	r2, #62	; 0x3e
10010e68:	29c0      	cmp	r1, #192	; 0xc0
10010e6a:	d003      	beq.n	10010e74 <gapm_adv_report_evt_handler+0x5c>
10010e6c:	065b      	lsls	r3, r3, #25
10010e6e:	0fdb      	lsrs	r3, r3, #31
10010e70:	3202      	adds	r2, #2
10010e72:	1ad2      	subs	r2, r2, r3
10010e74:	7062      	strb	r2, [r4, #1]
10010e76:	2e04      	cmp	r6, #4
10010e78:	d80f      	bhi.n	10010e9a <gapm_adv_report_evt_handler+0x82>
10010e7a:	1c30      	adds	r0, r6, #0
10010e7c:	f001 fd06 	bl	1001288c <__gnu_thumb1_case_uqi>
10010e80:	09070503 	.word	0x09070503
10010e84:	0b          	.byte	0x0b
10010e85:	00          	.byte	0x00
10010e86:	2300      	movs	r3, #0
10010e88:	e006      	b.n	10010e98 <gapm_adv_report_evt_handler+0x80>
10010e8a:	2301      	movs	r3, #1
10010e8c:	e004      	b.n	10010e98 <gapm_adv_report_evt_handler+0x80>
10010e8e:	2302      	movs	r3, #2
10010e90:	e002      	b.n	10010e98 <gapm_adv_report_evt_handler+0x80>
10010e92:	2303      	movs	r3, #3
10010e94:	e000      	b.n	10010e98 <gapm_adv_report_evt_handler+0x80>
10010e96:	2305      	movs	r3, #5
10010e98:	7023      	strb	r3, [r4, #0]
10010e9a:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10010e9c:	100155bb 	.word	0x100155bb

10010ea0 <gapm_resolv_addr_cmd_handler>:
10010ea0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10010ea2:	2314      	movs	r3, #20
10010ea4:	4c12      	ldr	r4, [pc, #72]	; (10010ef0 <gapm_resolv_addr_cmd_handler+0x50>)
10010ea6:	1c17      	adds	r7, r2, #0
10010ea8:	7023      	strb	r3, [r4, #0]
10010eaa:	3b07      	subs	r3, #7
10010eac:	7063      	strb	r3, [r4, #1]
10010eae:	70a3      	strb	r3, [r4, #2]
10010eb0:	2300      	movs	r3, #0
10010eb2:	70e3      	strb	r3, [r4, #3]
10010eb4:	4b0f      	ldr	r3, [pc, #60]	; (10010ef4 <gapm_resolv_addr_cmd_handler+0x54>)
10010eb6:	1c05      	adds	r5, r0, #0
10010eb8:	881a      	ldrh	r2, [r3, #0]
10010eba:	881b      	ldrh	r3, [r3, #0]
10010ebc:	4e0e      	ldr	r6, [pc, #56]	; (10010ef8 <gapm_resolv_addr_cmd_handler+0x58>)
10010ebe:	0a1b      	lsrs	r3, r3, #8
10010ec0:	7163      	strb	r3, [r4, #5]
10010ec2:	2317      	movs	r3, #23
10010ec4:	012d      	lsls	r5, r5, #4
10010ec6:	7122      	strb	r2, [r4, #4]
10010ec8:	7260      	strb	r0, [r4, #9]
10010eca:	2206      	movs	r2, #6
10010ecc:	480b      	ldr	r0, [pc, #44]	; (10010efc <gapm_resolv_addr_cmd_handler+0x5c>)
10010ece:	7223      	strb	r3, [r4, #8]
10010ed0:	47b0      	blx	r6
10010ed2:	1c39      	adds	r1, r7, #0
10010ed4:	1c2a      	adds	r2, r5, #0
10010ed6:	480a      	ldr	r0, [pc, #40]	; (10010f00 <gapm_resolv_addr_cmd_handler+0x60>)
10010ed8:	47b0      	blx	r6
10010eda:	1c29      	adds	r1, r5, #0
10010edc:	3110      	adds	r1, #16
10010ede:	1c0b      	adds	r3, r1, #0
10010ee0:	3b08      	subs	r3, #8
10010ee2:	71a3      	strb	r3, [r4, #6]
10010ee4:	121b      	asrs	r3, r3, #8
10010ee6:	71e3      	strb	r3, [r4, #7]
10010ee8:	1c20      	adds	r0, r4, #0
10010eea:	4b06      	ldr	r3, [pc, #24]	; (10010f04 <gapm_resolv_addr_cmd_handler+0x64>)
10010eec:	4798      	blx	r3
10010eee:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10010ef0:	1001a680 	.word	0x1001a680
10010ef4:	1001a310 	.word	0x1001a310
10010ef8:	100155bb 	.word	0x100155bb
10010efc:	1001a68a 	.word	0x1001a68a
10010f00:	1001a690 	.word	0x1001a690
10010f04:	1000fcdd 	.word	0x1000fcdd

10010f08 <gapm_addr_solved_ind_handler>:
10010f08:	b570      	push	{r4, r5, r6, lr}
10010f0a:	1c04      	adds	r4, r0, #0
10010f0c:	1c08      	adds	r0, r1, #0
10010f0e:	1c0d      	adds	r5, r1, #0
10010f10:	4e05      	ldr	r6, [pc, #20]	; (10010f28 <gapm_addr_solved_ind_handler+0x20>)
10010f12:	1c21      	adds	r1, r4, #0
10010f14:	2206      	movs	r2, #6
10010f16:	3011      	adds	r0, #17
10010f18:	47b0      	blx	r6
10010f1a:	1c68      	adds	r0, r5, #1
10010f1c:	1da1      	adds	r1, r4, #6
10010f1e:	2210      	movs	r2, #16
10010f20:	47b0      	blx	r6
10010f22:	2300      	movs	r3, #0
10010f24:	702b      	strb	r3, [r5, #0]
10010f26:	bd70      	pop	{r4, r5, r6, pc}
10010f28:	100155bb 	.word	0x100155bb

10010f2c <gapm_profile_added_ind_handler>:
10010f2c:	b510      	push	{r4, lr}
10010f2e:	7843      	ldrb	r3, [r0, #1]
10010f30:	7902      	ldrb	r2, [r0, #4]
10010f32:	7944      	ldrb	r4, [r0, #5]
10010f34:	7800      	ldrb	r0, [r0, #0]
10010f36:	021b      	lsls	r3, r3, #8
10010f38:	4303      	orrs	r3, r0
10010f3a:	2b1b      	cmp	r3, #27
10010f3c:	d104      	bne.n	10010f48 <gapm_profile_added_ind_handler+0x1c>
10010f3e:	2300      	movs	r3, #0
10010f40:	700b      	strb	r3, [r1, #0]
10010f42:	0223      	lsls	r3, r4, #8
10010f44:	4313      	orrs	r3, r2
10010f46:	804b      	strh	r3, [r1, #2]
10010f48:	203b      	movs	r0, #59	; 0x3b
10010f4a:	bd10      	pop	{r4, pc}

10010f4c <gattc_read_req_ind_parser>:
10010f4c:	7843      	ldrb	r3, [r0, #1]
10010f4e:	7802      	ldrb	r2, [r0, #0]
10010f50:	021b      	lsls	r3, r3, #8
10010f52:	4313      	orrs	r3, r2
10010f54:	804b      	strh	r3, [r1, #2]
10010f56:	4770      	bx	lr

10010f58 <gattc_write_req_ind_parser>:
10010f58:	b508      	push	{r3, lr}
10010f5a:	1c13      	adds	r3, r2, #0
10010f5c:	0a00      	lsrs	r0, r0, #8
10010f5e:	8010      	strh	r0, [r2, #0]
10010f60:	784a      	ldrb	r2, [r1, #1]
10010f62:	7808      	ldrb	r0, [r1, #0]
10010f64:	0212      	lsls	r2, r2, #8
10010f66:	4302      	orrs	r2, r0
10010f68:	805a      	strh	r2, [r3, #2]
10010f6a:	78ca      	ldrb	r2, [r1, #3]
10010f6c:	7888      	ldrb	r0, [r1, #2]
10010f6e:	0212      	lsls	r2, r2, #8
10010f70:	4302      	orrs	r2, r0
10010f72:	809a      	strh	r2, [r3, #4]
10010f74:	794a      	ldrb	r2, [r1, #5]
10010f76:	7908      	ldrb	r0, [r1, #4]
10010f78:	0212      	lsls	r2, r2, #8
10010f7a:	4302      	orrs	r2, r0
10010f7c:	80da      	strh	r2, [r3, #6]
10010f7e:	3308      	adds	r3, #8
10010f80:	1c18      	adds	r0, r3, #0
10010f82:	3106      	adds	r1, #6
10010f84:	4b01      	ldr	r3, [pc, #4]	; (10010f8c <gattc_write_req_ind_parser+0x34>)
10010f86:	4798      	blx	r3
10010f88:	bd08      	pop	{r3, pc}
10010f8a:	46c0      	nop			; (mov r8, r8)
10010f8c:	100155bb 	.word	0x100155bb

10010f90 <gattc_att_info_req_parser>:
10010f90:	7843      	ldrb	r3, [r0, #1]
10010f92:	7802      	ldrb	r2, [r0, #0]
10010f94:	021b      	lsls	r3, r3, #8
10010f96:	4313      	orrs	r3, r2
10010f98:	800b      	strh	r3, [r1, #0]
10010f9a:	4770      	bx	lr

10010f9c <gattc_read_cfm>:
10010f9c:	b538      	push	{r3, r4, r5, lr}
10010f9e:	2514      	movs	r5, #20
10010fa0:	1c1c      	adds	r4, r3, #0
10010fa2:	4b14      	ldr	r3, [pc, #80]	; (10010ff4 <gattc_read_cfm+0x58>)
10010fa4:	70d9      	strb	r1, [r3, #3]
10010fa6:	4914      	ldr	r1, [pc, #80]	; (10010ff8 <gattc_read_cfm+0x5c>)
10010fa8:	701d      	strb	r5, [r3, #0]
10010faa:	3d08      	subs	r5, #8
10010fac:	705d      	strb	r5, [r3, #1]
10010fae:	709d      	strb	r5, [r3, #2]
10010fb0:	880d      	ldrh	r5, [r1, #0]
10010fb2:	8809      	ldrh	r1, [r1, #0]
10010fb4:	7218      	strb	r0, [r3, #8]
10010fb6:	0a09      	lsrs	r1, r1, #8
10010fb8:	7159      	strb	r1, [r3, #5]
10010fba:	0a00      	lsrs	r0, r0, #8
10010fbc:	0a21      	lsrs	r1, r4, #8
10010fbe:	711d      	strb	r5, [r3, #4]
10010fc0:	7258      	strb	r0, [r3, #9]
10010fc2:	729c      	strb	r4, [r3, #10]
10010fc4:	72d9      	strb	r1, [r3, #11]
10010fc6:	731a      	strb	r2, [r3, #12]
10010fc8:	1c1d      	adds	r5, r3, #0
10010fca:	2c00      	cmp	r4, #0
10010fcc:	d007      	beq.n	10010fde <gattc_read_cfm+0x42>
10010fce:	9904      	ldr	r1, [sp, #16]
10010fd0:	1c22      	adds	r2, r4, #0
10010fd2:	480a      	ldr	r0, [pc, #40]	; (10010ffc <gattc_read_cfm+0x60>)
10010fd4:	4b0a      	ldr	r3, [pc, #40]	; (10011000 <gattc_read_cfm+0x64>)
10010fd6:	340d      	adds	r4, #13
10010fd8:	4798      	blx	r3
10010fda:	b2a1      	uxth	r1, r4
10010fdc:	e001      	b.n	10010fe2 <gattc_read_cfm+0x46>
10010fde:	210e      	movs	r1, #14
10010fe0:	735c      	strb	r4, [r3, #13]
10010fe2:	1c0b      	adds	r3, r1, #0
10010fe4:	3b08      	subs	r3, #8
10010fe6:	71ab      	strb	r3, [r5, #6]
10010fe8:	121b      	asrs	r3, r3, #8
10010fea:	71eb      	strb	r3, [r5, #7]
10010fec:	1c28      	adds	r0, r5, #0
10010fee:	4b05      	ldr	r3, [pc, #20]	; (10011004 <gattc_read_cfm+0x68>)
10010ff0:	4798      	blx	r3
10010ff2:	bd38      	pop	{r3, r4, r5, pc}
10010ff4:	1001a680 	.word	0x1001a680
10010ff8:	1001a310 	.word	0x1001a310
10010ffc:	1001a68d 	.word	0x1001a68d
10011000:	100155bb 	.word	0x100155bb
10011004:	1000fcdd 	.word	0x1000fcdd

10011008 <gattc_write_cfm>:
10011008:	4b0d      	ldr	r3, [pc, #52]	; (10011040 <gattc_write_cfm+0x38>)
1001100a:	b510      	push	{r4, lr}
1001100c:	729a      	strb	r2, [r3, #10]
1001100e:	2203      	movs	r2, #3
10011010:	2416      	movs	r4, #22
10011012:	719a      	strb	r2, [r3, #6]
10011014:	2200      	movs	r2, #0
10011016:	70d9      	strb	r1, [r3, #3]
10011018:	490a      	ldr	r1, [pc, #40]	; (10011044 <gattc_write_cfm+0x3c>)
1001101a:	701c      	strb	r4, [r3, #0]
1001101c:	3c0a      	subs	r4, #10
1001101e:	705c      	strb	r4, [r3, #1]
10011020:	709c      	strb	r4, [r3, #2]
10011022:	880c      	ldrh	r4, [r1, #0]
10011024:	8809      	ldrh	r1, [r1, #0]
10011026:	7218      	strb	r0, [r3, #8]
10011028:	0a09      	lsrs	r1, r1, #8
1001102a:	0a00      	lsrs	r0, r0, #8
1001102c:	711c      	strb	r4, [r3, #4]
1001102e:	7159      	strb	r1, [r3, #5]
10011030:	7258      	strb	r0, [r3, #9]
10011032:	71da      	strb	r2, [r3, #7]
10011034:	1c18      	adds	r0, r3, #0
10011036:	210b      	movs	r1, #11
10011038:	4b03      	ldr	r3, [pc, #12]	; (10011048 <gattc_write_cfm+0x40>)
1001103a:	4798      	blx	r3
1001103c:	bd10      	pop	{r4, pc}
1001103e:	46c0      	nop			; (mov r8, r8)
10011040:	1001a680 	.word	0x1001a680
10011044:	1001a310 	.word	0x1001a310
10011048:	1000fcdd 	.word	0x1000fcdd

1001104c <gattc_att_info_cfm>:
1001104c:	b538      	push	{r3, r4, r5, lr}
1001104e:	4c0e      	ldr	r4, [pc, #56]	; (10011088 <gattc_att_info_cfm+0x3c>)
10011050:	2518      	movs	r5, #24
10011052:	7323      	strb	r3, [r4, #12]
10011054:	2305      	movs	r3, #5
10011056:	71a3      	strb	r3, [r4, #6]
10011058:	2300      	movs	r3, #0
1001105a:	70e1      	strb	r1, [r4, #3]
1001105c:	490b      	ldr	r1, [pc, #44]	; (1001108c <gattc_att_info_cfm+0x40>)
1001105e:	7025      	strb	r5, [r4, #0]
10011060:	3d0c      	subs	r5, #12
10011062:	7065      	strb	r5, [r4, #1]
10011064:	70a5      	strb	r5, [r4, #2]
10011066:	880d      	ldrh	r5, [r1, #0]
10011068:	8809      	ldrh	r1, [r1, #0]
1001106a:	7220      	strb	r0, [r4, #8]
1001106c:	0a09      	lsrs	r1, r1, #8
1001106e:	0a00      	lsrs	r0, r0, #8
10011070:	7161      	strb	r1, [r4, #5]
10011072:	7260      	strb	r0, [r4, #9]
10011074:	72a2      	strb	r2, [r4, #10]
10011076:	71e3      	strb	r3, [r4, #7]
10011078:	0a12      	lsrs	r2, r2, #8
1001107a:	1c20      	adds	r0, r4, #0
1001107c:	210d      	movs	r1, #13
1001107e:	4b04      	ldr	r3, [pc, #16]	; (10011090 <gattc_att_info_cfm+0x44>)
10011080:	7125      	strb	r5, [r4, #4]
10011082:	72e2      	strb	r2, [r4, #11]
10011084:	4798      	blx	r3
10011086:	bd38      	pop	{r3, r4, r5, pc}
10011088:	1001a680 	.word	0x1001a680
1001108c:	1001a310 	.word	0x1001a310
10011090:	1000fcdd 	.word	0x1000fcdd

10011094 <gattc_send_evt_cmd_handler>:
10011094:	b570      	push	{r4, r5, r6, lr}
10011096:	2610      	movs	r6, #16
10011098:	ac04      	add	r4, sp, #16
1001109a:	8825      	ldrh	r5, [r4, #0]
1001109c:	4c15      	ldr	r4, [pc, #84]	; (100110f4 <gattc_send_evt_cmd_handler+0x60>)
1001109e:	70e2      	strb	r2, [r4, #3]
100110a0:	4a15      	ldr	r2, [pc, #84]	; (100110f8 <gattc_send_evt_cmd_handler+0x64>)
100110a2:	7026      	strb	r6, [r4, #0]
100110a4:	3e04      	subs	r6, #4
100110a6:	7066      	strb	r6, [r4, #1]
100110a8:	70a6      	strb	r6, [r4, #2]
100110aa:	8816      	ldrh	r6, [r2, #0]
100110ac:	8812      	ldrh	r2, [r2, #0]
100110ae:	7220      	strb	r0, [r4, #8]
100110b0:	0a12      	lsrs	r2, r2, #8
100110b2:	7162      	strb	r2, [r4, #5]
100110b4:	4a11      	ldr	r2, [pc, #68]	; (100110fc <gattc_send_evt_cmd_handler+0x68>)
100110b6:	7321      	strb	r1, [r4, #12]
100110b8:	8812      	ldrh	r2, [r2, #0]
100110ba:	73a5      	strb	r5, [r4, #14]
100110bc:	3201      	adds	r2, #1
100110be:	7262      	strb	r2, [r4, #9]
100110c0:	1212      	asrs	r2, r2, #8
100110c2:	72a2      	strb	r2, [r4, #10]
100110c4:	2200      	movs	r2, #0
100110c6:	72e2      	strb	r2, [r4, #11]
100110c8:	0a0a      	lsrs	r2, r1, #8
100110ca:	7362      	strb	r2, [r4, #13]
100110cc:	0a2a      	lsrs	r2, r5, #8
100110ce:	73e2      	strb	r2, [r4, #15]
100110d0:	1c19      	adds	r1, r3, #0
100110d2:	1c2a      	adds	r2, r5, #0
100110d4:	4b0a      	ldr	r3, [pc, #40]	; (10011100 <gattc_send_evt_cmd_handler+0x6c>)
100110d6:	3510      	adds	r5, #16
100110d8:	480a      	ldr	r0, [pc, #40]	; (10011104 <gattc_send_evt_cmd_handler+0x70>)
100110da:	7126      	strb	r6, [r4, #4]
100110dc:	4798      	blx	r3
100110de:	b2a9      	uxth	r1, r5
100110e0:	1c0b      	adds	r3, r1, #0
100110e2:	3b08      	subs	r3, #8
100110e4:	71a3      	strb	r3, [r4, #6]
100110e6:	121b      	asrs	r3, r3, #8
100110e8:	71e3      	strb	r3, [r4, #7]
100110ea:	1c20      	adds	r0, r4, #0
100110ec:	4b06      	ldr	r3, [pc, #24]	; (10011108 <gattc_send_evt_cmd_handler+0x74>)
100110ee:	4798      	blx	r3
100110f0:	bd70      	pop	{r4, r5, r6, pc}
100110f2:	46c0      	nop			; (mov r8, r8)
100110f4:	1001a680 	.word	0x1001a680
100110f8:	1001a310 	.word	0x1001a310
100110fc:	10019420 	.word	0x10019420
10011100:	100155bb 	.word	0x100155bb
10011104:	1001a690 	.word	0x1001a690
10011108:	1000fcdd 	.word	0x1000fcdd

1001110c <gattc_event_cfm_handler>:
1001110c:	220e      	movs	r2, #14
1001110e:	b508      	push	{r3, lr}
10011110:	4b0b      	ldr	r3, [pc, #44]	; (10011140 <gattc_event_cfm_handler+0x34>)
10011112:	701a      	strb	r2, [r3, #0]
10011114:	3a02      	subs	r2, #2
10011116:	705a      	strb	r2, [r3, #1]
10011118:	709a      	strb	r2, [r3, #2]
1001111a:	4a0a      	ldr	r2, [pc, #40]	; (10011144 <gattc_event_cfm_handler+0x38>)
1001111c:	70d8      	strb	r0, [r3, #3]
1001111e:	8810      	ldrh	r0, [r2, #0]
10011120:	8812      	ldrh	r2, [r2, #0]
10011122:	7219      	strb	r1, [r3, #8]
10011124:	0a12      	lsrs	r2, r2, #8
10011126:	715a      	strb	r2, [r3, #5]
10011128:	2202      	movs	r2, #2
1001112a:	719a      	strb	r2, [r3, #6]
1001112c:	2200      	movs	r2, #0
1001112e:	0a09      	lsrs	r1, r1, #8
10011130:	7118      	strb	r0, [r3, #4]
10011132:	7259      	strb	r1, [r3, #9]
10011134:	71da      	strb	r2, [r3, #7]
10011136:	1c18      	adds	r0, r3, #0
10011138:	210a      	movs	r1, #10
1001113a:	4b03      	ldr	r3, [pc, #12]	; (10011148 <gattc_event_cfm_handler+0x3c>)
1001113c:	4798      	blx	r3
1001113e:	bd08      	pop	{r3, pc}
10011140:	1001a680 	.word	0x1001a680
10011144:	1001a310 	.word	0x1001a310
10011148:	1000fcdd 	.word	0x1000fcdd

1001114c <gattc_disc_svc_ind_parser>:
1001114c:	b570      	push	{r4, r5, r6, lr}
1001114e:	1c15      	adds	r5, r2, #0
10011150:	0a00      	lsrs	r0, r0, #8
10011152:	8010      	strh	r0, [r2, #0]
10011154:	784b      	ldrb	r3, [r1, #1]
10011156:	780a      	ldrb	r2, [r1, #0]
10011158:	021b      	lsls	r3, r3, #8
1001115a:	4313      	orrs	r3, r2
1001115c:	806b      	strh	r3, [r5, #2]
1001115e:	78cb      	ldrb	r3, [r1, #3]
10011160:	788a      	ldrb	r2, [r1, #2]
10011162:	021b      	lsls	r3, r3, #8
10011164:	4313      	orrs	r3, r2
10011166:	80ab      	strh	r3, [r5, #4]
10011168:	790e      	ldrb	r6, [r1, #4]
1001116a:	4b05      	ldr	r3, [pc, #20]	; (10011180 <gattc_disc_svc_ind_parser+0x34>)
1001116c:	1c30      	adds	r0, r6, #0
1001116e:	1c0c      	adds	r4, r1, #0
10011170:	4798      	blx	r3
10011172:	1c32      	adds	r2, r6, #0
10011174:	71a8      	strb	r0, [r5, #6]
10011176:	1d61      	adds	r1, r4, #5
10011178:	1de8      	adds	r0, r5, #7
1001117a:	4b02      	ldr	r3, [pc, #8]	; (10011184 <gattc_disc_svc_ind_parser+0x38>)
1001117c:	4798      	blx	r3
1001117e:	bd70      	pop	{r4, r5, r6, pc}
10011180:	1000f01d 	.word	0x1000f01d
10011184:	100155bb 	.word	0x100155bb

10011188 <gattc_disc_svc_incl_ind_parser>:
10011188:	b570      	push	{r4, r5, r6, lr}
1001118a:	1c15      	adds	r5, r2, #0
1001118c:	0a00      	lsrs	r0, r0, #8
1001118e:	8010      	strh	r0, [r2, #0]
10011190:	784b      	ldrb	r3, [r1, #1]
10011192:	780a      	ldrb	r2, [r1, #0]
10011194:	021b      	lsls	r3, r3, #8
10011196:	4313      	orrs	r3, r2
10011198:	806b      	strh	r3, [r5, #2]
1001119a:	78cb      	ldrb	r3, [r1, #3]
1001119c:	788a      	ldrb	r2, [r1, #2]
1001119e:	021b      	lsls	r3, r3, #8
100111a0:	4313      	orrs	r3, r2
100111a2:	80ab      	strh	r3, [r5, #4]
100111a4:	794b      	ldrb	r3, [r1, #5]
100111a6:	790a      	ldrb	r2, [r1, #4]
100111a8:	021b      	lsls	r3, r3, #8
100111aa:	4313      	orrs	r3, r2
100111ac:	80eb      	strh	r3, [r5, #6]
100111ae:	798e      	ldrb	r6, [r1, #6]
100111b0:	4b05      	ldr	r3, [pc, #20]	; (100111c8 <gattc_disc_svc_incl_ind_parser+0x40>)
100111b2:	1c30      	adds	r0, r6, #0
100111b4:	1c0c      	adds	r4, r1, #0
100111b6:	4798      	blx	r3
100111b8:	7228      	strb	r0, [r5, #8]
100111ba:	1c28      	adds	r0, r5, #0
100111bc:	1c32      	adds	r2, r6, #0
100111be:	1de1      	adds	r1, r4, #7
100111c0:	4b02      	ldr	r3, [pc, #8]	; (100111cc <gattc_disc_svc_incl_ind_parser+0x44>)
100111c2:	3009      	adds	r0, #9
100111c4:	4798      	blx	r3
100111c6:	bd70      	pop	{r4, r5, r6, pc}
100111c8:	1000f01d 	.word	0x1000f01d
100111cc:	100155bb 	.word	0x100155bb

100111d0 <gattc_disc_char_ind_parser>:
100111d0:	b570      	push	{r4, r5, r6, lr}
100111d2:	1c15      	adds	r5, r2, #0
100111d4:	0a00      	lsrs	r0, r0, #8
100111d6:	8010      	strh	r0, [r2, #0]
100111d8:	784b      	ldrb	r3, [r1, #1]
100111da:	780a      	ldrb	r2, [r1, #0]
100111dc:	021b      	lsls	r3, r3, #8
100111de:	4313      	orrs	r3, r2
100111e0:	806b      	strh	r3, [r5, #2]
100111e2:	78cb      	ldrb	r3, [r1, #3]
100111e4:	788a      	ldrb	r2, [r1, #2]
100111e6:	021b      	lsls	r3, r3, #8
100111e8:	4313      	orrs	r3, r2
100111ea:	80ab      	strh	r3, [r5, #4]
100111ec:	790b      	ldrb	r3, [r1, #4]
100111ee:	1c0c      	adds	r4, r1, #0
100111f0:	71ab      	strb	r3, [r5, #6]
100111f2:	794e      	ldrb	r6, [r1, #5]
100111f4:	4b05      	ldr	r3, [pc, #20]	; (1001120c <gattc_disc_char_ind_parser+0x3c>)
100111f6:	1c30      	adds	r0, r6, #0
100111f8:	4798      	blx	r3
100111fa:	71e8      	strb	r0, [r5, #7]
100111fc:	1c28      	adds	r0, r5, #0
100111fe:	1c32      	adds	r2, r6, #0
10011200:	1da1      	adds	r1, r4, #6
10011202:	4b03      	ldr	r3, [pc, #12]	; (10011210 <gattc_disc_char_ind_parser+0x40>)
10011204:	3008      	adds	r0, #8
10011206:	4798      	blx	r3
10011208:	bd70      	pop	{r4, r5, r6, pc}
1001120a:	46c0      	nop			; (mov r8, r8)
1001120c:	1000f01d 	.word	0x1000f01d
10011210:	100155bb 	.word	0x100155bb

10011214 <gattc_disc_char_desc_ind_parser>:
10011214:	b570      	push	{r4, r5, r6, lr}
10011216:	1c15      	adds	r5, r2, #0
10011218:	0a00      	lsrs	r0, r0, #8
1001121a:	8010      	strh	r0, [r2, #0]
1001121c:	784b      	ldrb	r3, [r1, #1]
1001121e:	780a      	ldrb	r2, [r1, #0]
10011220:	021b      	lsls	r3, r3, #8
10011222:	4313      	orrs	r3, r2
10011224:	806b      	strh	r3, [r5, #2]
10011226:	788e      	ldrb	r6, [r1, #2]
10011228:	4b05      	ldr	r3, [pc, #20]	; (10011240 <gattc_disc_char_desc_ind_parser+0x2c>)
1001122a:	1c30      	adds	r0, r6, #0
1001122c:	1c0c      	adds	r4, r1, #0
1001122e:	4798      	blx	r3
10011230:	1c32      	adds	r2, r6, #0
10011232:	7128      	strb	r0, [r5, #4]
10011234:	1ce1      	adds	r1, r4, #3
10011236:	1d68      	adds	r0, r5, #5
10011238:	4b02      	ldr	r3, [pc, #8]	; (10011244 <gattc_disc_char_desc_ind_parser+0x30>)
1001123a:	4798      	blx	r3
1001123c:	bd70      	pop	{r4, r5, r6, pc}
1001123e:	46c0      	nop			; (mov r8, r8)
10011240:	1000f01d 	.word	0x1000f01d
10011244:	100155bb 	.word	0x100155bb

10011248 <gattc_event_ind_and_notification_parser>:
10011248:	b510      	push	{r4, lr}
1001124a:	780c      	ldrb	r4, [r1, #0]
1001124c:	1c13      	adds	r3, r2, #0
1001124e:	2c12      	cmp	r4, #18
10011250:	d10e      	bne.n	10011270 <gattc_event_ind_and_notification_parser+0x28>
10011252:	0a00      	lsrs	r0, r0, #8
10011254:	8010      	strh	r0, [r2, #0]
10011256:	788a      	ldrb	r2, [r1, #2]
10011258:	709a      	strb	r2, [r3, #2]
1001125a:	7948      	ldrb	r0, [r1, #5]
1001125c:	790c      	ldrb	r4, [r1, #4]
1001125e:	0200      	lsls	r0, r0, #8
10011260:	4320      	orrs	r0, r4
10011262:	8098      	strh	r0, [r3, #4]
10011264:	3106      	adds	r1, #6
10011266:	1d98      	adds	r0, r3, #6
10011268:	4b0b      	ldr	r3, [pc, #44]	; (10011298 <gattc_event_ind_and_notification_parser+0x50>)
1001126a:	4798      	blx	r3
1001126c:	221b      	movs	r2, #27
1001126e:	e010      	b.n	10011292 <gattc_event_ind_and_notification_parser+0x4a>
10011270:	2200      	movs	r2, #0
10011272:	2c13      	cmp	r4, #19
10011274:	d10d      	bne.n	10011292 <gattc_event_ind_and_notification_parser+0x4a>
10011276:	0a00      	lsrs	r0, r0, #8
10011278:	8018      	strh	r0, [r3, #0]
1001127a:	788a      	ldrb	r2, [r1, #2]
1001127c:	709a      	strb	r2, [r3, #2]
1001127e:	7908      	ldrb	r0, [r1, #4]
10011280:	78cc      	ldrb	r4, [r1, #3]
10011282:	0200      	lsls	r0, r0, #8
10011284:	4320      	orrs	r0, r4
10011286:	8098      	strh	r0, [r3, #4]
10011288:	3106      	adds	r1, #6
1001128a:	1d98      	adds	r0, r3, #6
1001128c:	4b02      	ldr	r3, [pc, #8]	; (10011298 <gattc_event_ind_and_notification_parser+0x50>)
1001128e:	4798      	blx	r3
10011290:	221c      	movs	r2, #28
10011292:	1c10      	adds	r0, r2, #0
10011294:	bd10      	pop	{r4, pc}
10011296:	46c0      	nop			; (mov r8, r8)
10011298:	100155bb 	.word	0x100155bb

1001129c <gattc_complete_evt_handler>:
1001129c:	b500      	push	{lr}
1001129e:	0a00      	lsrs	r0, r0, #8
100112a0:	8010      	strh	r0, [r2, #0]
100112a2:	7808      	ldrb	r0, [r1, #0]
100112a4:	7090      	strb	r0, [r2, #2]
100112a6:	784b      	ldrb	r3, [r1, #1]
100112a8:	3801      	subs	r0, #1
100112aa:	70d3      	strb	r3, [r2, #3]
100112ac:	2813      	cmp	r0, #19
100112ae:	d82c      	bhi.n	1001130a <gattc_complete_evt_handler+0x6e>
100112b0:	f001 faec 	bl	1001288c <__gnu_thumb1_case_uqi>
100112b4:	0a0a0a0c 	.word	0x0a0a0a0c
100112b8:	210a0a0a 	.word	0x210a0a0a
100112bc:	111f2121 	.word	0x111f2121
100112c0:	2b111111 	.word	0x2b111111
100112c4:	2919132b 	.word	0x2919132b
100112c8:	2017      	movs	r0, #23
100112ca:	e01f      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112cc:	2024      	movs	r0, #36	; 0x24
100112ce:	2b00      	cmp	r3, #0
100112d0:	d11c      	bne.n	1001130c <gattc_complete_evt_handler+0x70>
100112d2:	3017      	adds	r0, #23
100112d4:	e01a      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112d6:	2025      	movs	r0, #37	; 0x25
100112d8:	e018      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112da:	4a0d      	ldr	r2, [pc, #52]	; (10011310 <gattc_complete_evt_handler+0x74>)
100112dc:	201d      	movs	r0, #29
100112de:	6813      	ldr	r3, [r2, #0]
100112e0:	3b01      	subs	r3, #1
100112e2:	6013      	str	r3, [r2, #0]
100112e4:	e012      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112e6:	4a0a      	ldr	r2, [pc, #40]	; (10011310 <gattc_complete_evt_handler+0x74>)
100112e8:	201e      	movs	r0, #30
100112ea:	6813      	ldr	r3, [r2, #0]
100112ec:	3b01      	subs	r3, #1
100112ee:	6013      	str	r3, [r2, #0]
100112f0:	e00c      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112f2:	2019      	movs	r0, #25
100112f4:	e00a      	b.n	1001130c <gattc_complete_evt_handler+0x70>
100112f6:	203b      	movs	r0, #59	; 0x3b
100112f8:	2b00      	cmp	r3, #0
100112fa:	d007      	beq.n	1001130c <gattc_complete_evt_handler+0x70>
100112fc:	2182      	movs	r1, #130	; 0x82
100112fe:	0089      	lsls	r1, r1, #2
10011300:	5453      	strb	r3, [r2, r1]
10011302:	3823      	subs	r0, #35	; 0x23
10011304:	e002      	b.n	1001130c <gattc_complete_evt_handler+0x70>
10011306:	2021      	movs	r0, #33	; 0x21
10011308:	e000      	b.n	1001130c <gattc_complete_evt_handler+0x70>
1001130a:	2000      	movs	r0, #0
1001130c:	bd00      	pop	{pc}
1001130e:	46c0      	nop			; (mov r8, r8)
10011310:	10019424 	.word	0x10019424

10011314 <gattc_event_mtu_changed_ind_parser>:
10011314:	0a00      	lsrs	r0, r0, #8
10011316:	8010      	strh	r0, [r2, #0]
10011318:	784b      	ldrb	r3, [r1, #1]
1001131a:	7809      	ldrb	r1, [r1, #0]
1001131c:	021b      	lsls	r3, r3, #8
1001131e:	430b      	orrs	r3, r1
10011320:	8053      	strh	r3, [r2, #2]
10011322:	4770      	bx	lr

10011324 <gattc_read_ind_parser>:
10011324:	0a00      	lsrs	r0, r0, #8
10011326:	b508      	push	{r3, lr}
10011328:	8010      	strh	r0, [r2, #0]
1001132a:	1c13      	adds	r3, r2, #0
1001132c:	2282      	movs	r2, #130	; 0x82
1001132e:	2000      	movs	r0, #0
10011330:	0092      	lsls	r2, r2, #2
10011332:	5498      	strb	r0, [r3, r2]
10011334:	784a      	ldrb	r2, [r1, #1]
10011336:	7808      	ldrb	r0, [r1, #0]
10011338:	0212      	lsls	r2, r2, #8
1001133a:	4302      	orrs	r2, r0
1001133c:	805a      	strh	r2, [r3, #2]
1001133e:	78ca      	ldrb	r2, [r1, #3]
10011340:	7888      	ldrb	r0, [r1, #2]
10011342:	0212      	lsls	r2, r2, #8
10011344:	4302      	orrs	r2, r0
10011346:	80da      	strh	r2, [r3, #6]
10011348:	794a      	ldrb	r2, [r1, #5]
1001134a:	7908      	ldrb	r0, [r1, #4]
1001134c:	0212      	lsls	r2, r2, #8
1001134e:	4302      	orrs	r2, r0
10011350:	809a      	strh	r2, [r3, #4]
10011352:	3308      	adds	r3, #8
10011354:	1c18      	adds	r0, r3, #0
10011356:	3106      	adds	r1, #6
10011358:	4b01      	ldr	r3, [pc, #4]	; (10011360 <gattc_read_ind_parser+0x3c>)
1001135a:	4798      	blx	r3
1001135c:	bd08      	pop	{r3, pc}
1001135e:	46c0      	nop			; (mov r8, r8)
10011360:	100155bb 	.word	0x100155bb

10011364 <gattc_svc_changed_cfg_ind_parser>:
10011364:	0a00      	lsrs	r0, r0, #8
10011366:	8010      	strh	r0, [r2, #0]
10011368:	784b      	ldrb	r3, [r1, #1]
1001136a:	7809      	ldrb	r1, [r1, #0]
1001136c:	021b      	lsls	r3, r3, #8
1001136e:	430b      	orrs	r3, r1
10011370:	8053      	strh	r3, [r2, #2]
10011372:	4770      	bx	lr

10011374 <init_gattc_task_module>:
10011374:	2300      	movs	r3, #0
10011376:	4a02      	ldr	r2, [pc, #8]	; (10011380 <init_gattc_task_module+0xc>)
10011378:	8013      	strh	r3, [r2, #0]
1001137a:	4a02      	ldr	r2, [pc, #8]	; (10011384 <init_gattc_task_module+0x10>)
1001137c:	8013      	strh	r3, [r2, #0]
1001137e:	4770      	bx	lr
10011380:	1001941e 	.word	0x1001941e
10011384:	10019420 	.word	0x10019420

10011388 <gattm_add_svc_req_handler>:
10011388:	2200      	movs	r2, #0
1001138a:	210b      	movs	r1, #11
1001138c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001138e:	1c04      	adds	r4, r0, #0
10011390:	7943      	ldrb	r3, [r0, #5]
10011392:	b085      	sub	sp, #20
10011394:	9301      	str	r3, [sp, #4]
10011396:	ab02      	add	r3, sp, #8
10011398:	71da      	strb	r2, [r3, #7]
1001139a:	4b37      	ldr	r3, [pc, #220]	; (10011478 <gattm_add_svc_req_handler+0xf0>)
1001139c:	7059      	strb	r1, [r3, #1]
1001139e:	7099      	strb	r1, [r3, #2]
100113a0:	4936      	ldr	r1, [pc, #216]	; (1001147c <gattm_add_svc_req_handler+0xf4>)
100113a2:	701a      	strb	r2, [r3, #0]
100113a4:	8808      	ldrh	r0, [r1, #0]
100113a6:	8809      	ldrh	r1, [r1, #0]
100113a8:	70da      	strb	r2, [r3, #3]
100113aa:	0a09      	lsrs	r1, r1, #8
100113ac:	7118      	strb	r0, [r3, #4]
100113ae:	7159      	strb	r1, [r3, #5]
100113b0:	8821      	ldrh	r1, [r4, #0]
100113b2:	7219      	strb	r1, [r3, #8]
100113b4:	8821      	ldrh	r1, [r4, #0]
100113b6:	0a09      	lsrs	r1, r1, #8
100113b8:	7259      	strb	r1, [r3, #9]
100113ba:	8861      	ldrh	r1, [r4, #2]
100113bc:	7299      	strb	r1, [r3, #10]
100113be:	8861      	ldrh	r1, [r4, #2]
100113c0:	0a09      	lsrs	r1, r1, #8
100113c2:	72d9      	strb	r1, [r3, #11]
100113c4:	7921      	ldrb	r1, [r4, #4]
100113c6:	7319      	strb	r1, [r3, #12]
100113c8:	4669      	mov	r1, sp
100113ca:	7909      	ldrb	r1, [r1, #4]
100113cc:	7359      	strb	r1, [r3, #13]
100113ce:	18a1      	adds	r1, r4, r2
100113d0:	7988      	ldrb	r0, [r1, #6]
100113d2:	1899      	adds	r1, r3, r2
100113d4:	3201      	adds	r2, #1
100113d6:	7388      	strb	r0, [r1, #14]
100113d8:	2a10      	cmp	r2, #16
100113da:	d1f8      	bne.n	100113ce <gattm_add_svc_req_handler+0x46>
100113dc:	1c27      	adds	r7, r4, #0
100113de:	2300      	movs	r3, #0
100113e0:	251e      	movs	r5, #30
100113e2:	3716      	adds	r7, #22
100113e4:	9300      	str	r3, [sp, #0]
100113e6:	9b00      	ldr	r3, [sp, #0]
100113e8:	9a01      	ldr	r2, [sp, #4]
100113ea:	4e23      	ldr	r6, [pc, #140]	; (10011478 <gattm_add_svc_req_handler+0xf0>)
100113ec:	4293      	cmp	r3, r2
100113ee:	da21      	bge.n	10011434 <gattm_add_svc_req_handler+0xac>
100113f0:	1c39      	adds	r1, r7, #0
100113f2:	1970      	adds	r0, r6, r5
100113f4:	2210      	movs	r2, #16
100113f6:	4b22      	ldr	r3, [pc, #136]	; (10011480 <gattm_add_svc_req_handler+0xf8>)
100113f8:	4798      	blx	r3
100113fa:	1c2b      	adds	r3, r5, #0
100113fc:	8a3a      	ldrh	r2, [r7, #16]
100113fe:	3310      	adds	r3, #16
10011400:	b29b      	uxth	r3, r3
10011402:	54f2      	strb	r2, [r6, r3]
10011404:	1c2b      	adds	r3, r5, #0
10011406:	8a3a      	ldrh	r2, [r7, #16]
10011408:	3311      	adds	r3, #17
1001140a:	b29b      	uxth	r3, r3
1001140c:	0a12      	lsrs	r2, r2, #8
1001140e:	54f2      	strb	r2, [r6, r3]
10011410:	1c2a      	adds	r2, r5, #0
10011412:	1c2b      	adds	r3, r5, #0
10011414:	8a79      	ldrh	r1, [r7, #18]
10011416:	3212      	adds	r2, #18
10011418:	b292      	uxth	r2, r2
1001141a:	54b1      	strb	r1, [r6, r2]
1001141c:	8a7a      	ldrh	r2, [r7, #18]
1001141e:	3313      	adds	r3, #19
10011420:	b29b      	uxth	r3, r3
10011422:	0a12      	lsrs	r2, r2, #8
10011424:	54f2      	strb	r2, [r6, r3]
10011426:	9b00      	ldr	r3, [sp, #0]
10011428:	3514      	adds	r5, #20
1001142a:	3301      	adds	r3, #1
1001142c:	b2ad      	uxth	r5, r5
1001142e:	9300      	str	r3, [sp, #0]
10011430:	3714      	adds	r7, #20
10011432:	e7d8      	b.n	100113e6 <gattm_add_svc_req_handler+0x5e>
10011434:	2114      	movs	r1, #20
10011436:	4d13      	ldr	r5, [pc, #76]	; (10011484 <gattm_add_svc_req_handler+0xfc>)
10011438:	4b13      	ldr	r3, [pc, #76]	; (10011488 <gattm_add_svc_req_handler+0x100>)
1001143a:	4351      	muls	r1, r2
1001143c:	802b      	strh	r3, [r5, #0]
1001143e:	230b      	movs	r3, #11
10011440:	311e      	adds	r1, #30
10011442:	80ab      	strh	r3, [r5, #4]
10011444:	1c0b      	adds	r3, r1, #0
10011446:	3b08      	subs	r3, #8
10011448:	71b3      	strb	r3, [r6, #6]
1001144a:	121b      	asrs	r3, r3, #8
1001144c:	71f3      	strb	r3, [r6, #7]
1001144e:	1c30      	adds	r0, r6, #0
10011450:	4b0e      	ldr	r3, [pc, #56]	; (1001148c <gattm_add_svc_req_handler+0x104>)
10011452:	4798      	blx	r3
10011454:	ab02      	add	r3, sp, #8
10011456:	1dde      	adds	r6, r3, #7
10011458:	1c30      	adds	r0, r6, #0
1001145a:	4b0d      	ldr	r3, [pc, #52]	; (10011490 <gattm_add_svc_req_handler+0x108>)
1001145c:	4798      	blx	r3
1001145e:	7833      	ldrb	r3, [r6, #0]
10011460:	20e2      	movs	r0, #226	; 0xe2
10011462:	2b00      	cmp	r3, #0
10011464:	d106      	bne.n	10011474 <gattm_add_svc_req_handler+0xec>
10011466:	68aa      	ldr	r2, [r5, #8]
10011468:	7853      	ldrb	r3, [r2, #1]
1001146a:	7811      	ldrb	r1, [r2, #0]
1001146c:	021b      	lsls	r3, r3, #8
1001146e:	430b      	orrs	r3, r1
10011470:	8023      	strh	r3, [r4, #0]
10011472:	7890      	ldrb	r0, [r2, #2]
10011474:	b005      	add	sp, #20
10011476:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011478:	1001a680 	.word	0x1001a680
1001147c:	1001a310 	.word	0x1001a310
10011480:	100155bb 	.word	0x100155bb
10011484:	1001a304 	.word	0x1001a304
10011488:	00000b01 	.word	0x00000b01
1001148c:	1000fcdd 	.word	0x1000fcdd
10011490:	1000fd41 	.word	0x1000fd41

10011494 <gattm_add_attribute_req_handler>:
10011494:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011496:	1c1f      	adds	r7, r3, #0
10011498:	4b16      	ldr	r3, [pc, #88]	; (100114f4 <gattm_add_attribute_req_handler+0x60>)
1001149a:	9100      	str	r1, [sp, #0]
1001149c:	9201      	str	r2, [sp, #4]
1001149e:	1c05      	adds	r5, r0, #0
100114a0:	7946      	ldrb	r6, [r0, #5]
100114a2:	6818      	ldr	r0, [r3, #0]
100114a4:	2114      	movs	r1, #20
100114a6:	4b14      	ldr	r3, [pc, #80]	; (100114f8 <gattm_add_attribute_req_handler+0x64>)
100114a8:	382a      	subs	r0, #42	; 0x2a
100114aa:	4798      	blx	r3
100114ac:	2311      	movs	r3, #17
100114ae:	4286      	cmp	r6, r0
100114b0:	d21e      	bcs.n	100114f0 <gattm_add_attribute_req_handler+0x5c>
100114b2:	2414      	movs	r4, #20
100114b4:	4366      	muls	r6, r4
100114b6:	19a8      	adds	r0, r5, r6
100114b8:	2100      	movs	r1, #0
100114ba:	2210      	movs	r2, #16
100114bc:	4b0f      	ldr	r3, [pc, #60]	; (100114fc <gattm_add_attribute_req_handler+0x68>)
100114be:	3016      	adds	r0, #22
100114c0:	4798      	blx	r3
100114c2:	7968      	ldrb	r0, [r5, #5]
100114c4:	1c3a      	adds	r2, r7, #0
100114c6:	4360      	muls	r0, r4
100114c8:	1828      	adds	r0, r5, r0
100114ca:	4b0d      	ldr	r3, [pc, #52]	; (10011500 <gattm_add_attribute_req_handler+0x6c>)
100114cc:	3016      	adds	r0, #22
100114ce:	9908      	ldr	r1, [sp, #32]
100114d0:	4798      	blx	r3
100114d2:	466a      	mov	r2, sp
100114d4:	796b      	ldrb	r3, [r5, #5]
100114d6:	8812      	ldrh	r2, [r2, #0]
100114d8:	435c      	muls	r4, r3
100114da:	192c      	adds	r4, r5, r4
100114dc:	8522      	strh	r2, [r4, #40]	; 0x28
100114de:	466a      	mov	r2, sp
100114e0:	8892      	ldrh	r2, [r2, #4]
100114e2:	84e2      	strh	r2, [r4, #38]	; 0x26
100114e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
100114e6:	8013      	strh	r3, [r2, #0]
100114e8:	796b      	ldrb	r3, [r5, #5]
100114ea:	3301      	adds	r3, #1
100114ec:	716b      	strb	r3, [r5, #5]
100114ee:	2300      	movs	r3, #0
100114f0:	1c18      	adds	r0, r3, #0
100114f2:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
100114f4:	10019394 	.word	0x10019394
100114f8:	100128a1 	.word	0x100128a1
100114fc:	100155cd 	.word	0x100155cd
10011500:	100155bb 	.word	0x100155bb

10011504 <gattm_att_set_value_req_handler>:
10011504:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10011506:	466b      	mov	r3, sp
10011508:	1dde      	adds	r6, r3, #7
1001150a:	2300      	movs	r3, #0
1001150c:	1c0d      	adds	r5, r1, #0
1001150e:	210c      	movs	r1, #12
10011510:	270b      	movs	r7, #11
10011512:	4c17      	ldr	r4, [pc, #92]	; (10011570 <gattm_att_set_value_req_handler+0x6c>)
10011514:	7033      	strb	r3, [r6, #0]
10011516:	70e3      	strb	r3, [r4, #3]
10011518:	4b16      	ldr	r3, [pc, #88]	; (10011574 <gattm_att_set_value_req_handler+0x70>)
1001151a:	7021      	strb	r1, [r4, #0]
1001151c:	8819      	ldrh	r1, [r3, #0]
1001151e:	881b      	ldrh	r3, [r3, #0]
10011520:	7220      	strb	r0, [r4, #8]
10011522:	0a1b      	lsrs	r3, r3, #8
10011524:	7163      	strb	r3, [r4, #5]
10011526:	0a00      	lsrs	r0, r0, #8
10011528:	0a2b      	lsrs	r3, r5, #8
1001152a:	7121      	strb	r1, [r4, #4]
1001152c:	7260      	strb	r0, [r4, #9]
1001152e:	1c11      	adds	r1, r2, #0
10011530:	72a5      	strb	r5, [r4, #10]
10011532:	1c2a      	adds	r2, r5, #0
10011534:	72e3      	strb	r3, [r4, #11]
10011536:	350c      	adds	r5, #12
10011538:	4b0f      	ldr	r3, [pc, #60]	; (10011578 <gattm_att_set_value_req_handler+0x74>)
1001153a:	4810      	ldr	r0, [pc, #64]	; (1001157c <gattm_att_set_value_req_handler+0x78>)
1001153c:	7067      	strb	r7, [r4, #1]
1001153e:	70a7      	strb	r7, [r4, #2]
10011540:	4798      	blx	r3
10011542:	b2a9      	uxth	r1, r5
10011544:	4b0e      	ldr	r3, [pc, #56]	; (10011580 <gattm_att_set_value_req_handler+0x7c>)
10011546:	4d0f      	ldr	r5, [pc, #60]	; (10011584 <gattm_att_set_value_req_handler+0x80>)
10011548:	1c20      	adds	r0, r4, #0
1001154a:	802b      	strh	r3, [r5, #0]
1001154c:	1c0b      	adds	r3, r1, #0
1001154e:	3b08      	subs	r3, #8
10011550:	71a3      	strb	r3, [r4, #6]
10011552:	121b      	asrs	r3, r3, #8
10011554:	71e3      	strb	r3, [r4, #7]
10011556:	4b0c      	ldr	r3, [pc, #48]	; (10011588 <gattm_att_set_value_req_handler+0x84>)
10011558:	80af      	strh	r7, [r5, #4]
1001155a:	4798      	blx	r3
1001155c:	1c30      	adds	r0, r6, #0
1001155e:	4b0b      	ldr	r3, [pc, #44]	; (1001158c <gattm_att_set_value_req_handler+0x88>)
10011560:	4798      	blx	r3
10011562:	7833      	ldrb	r3, [r6, #0]
10011564:	20e2      	movs	r0, #226	; 0xe2
10011566:	2b00      	cmp	r3, #0
10011568:	d101      	bne.n	1001156e <gattm_att_set_value_req_handler+0x6a>
1001156a:	68ab      	ldr	r3, [r5, #8]
1001156c:	7898      	ldrb	r0, [r3, #2]
1001156e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10011570:	1001a680 	.word	0x1001a680
10011574:	1001a310 	.word	0x1001a310
10011578:	100155bb 	.word	0x100155bb
1001157c:	1001a68c 	.word	0x1001a68c
10011580:	00000b0d 	.word	0x00000b0d
10011584:	1001a304 	.word	0x1001a304
10011588:	1000fcdd 	.word	0x1000fcdd
1001158c:	1000fd41 	.word	0x1000fd41

10011590 <gattm_att_get_value_req_handler>:
10011590:	b5f0      	push	{r4, r5, r6, r7, lr}
10011592:	b085      	sub	sp, #20
10011594:	9201      	str	r2, [sp, #4]
10011596:	220a      	movs	r2, #10
10011598:	1c04      	adds	r4, r0, #0
1001159a:	481d      	ldr	r0, [pc, #116]	; (10011610 <gattm_att_get_value_req_handler+0x80>)
1001159c:	ab02      	add	r3, sp, #8
1001159e:	1dde      	adds	r6, r3, #7
100115a0:	7002      	strb	r2, [r0, #0]
100115a2:	2300      	movs	r3, #0
100115a4:	220b      	movs	r2, #11
100115a6:	4d1b      	ldr	r5, [pc, #108]	; (10011614 <gattm_att_get_value_req_handler+0x84>)
100115a8:	1c0f      	adds	r7, r1, #0
100115aa:	8829      	ldrh	r1, [r5, #0]
100115ac:	882d      	ldrh	r5, [r5, #0]
100115ae:	7101      	strb	r1, [r0, #4]
100115b0:	0a2d      	lsrs	r5, r5, #8
100115b2:	7145      	strb	r5, [r0, #5]
100115b4:	0a25      	lsrs	r5, r4, #8
100115b6:	7245      	strb	r5, [r0, #9]
100115b8:	4917      	ldr	r1, [pc, #92]	; (10011618 <gattm_att_get_value_req_handler+0x88>)
100115ba:	4d18      	ldr	r5, [pc, #96]	; (1001161c <gattm_att_get_value_req_handler+0x8c>)
100115bc:	7033      	strb	r3, [r6, #0]
100115be:	7042      	strb	r2, [r0, #1]
100115c0:	7082      	strb	r2, [r0, #2]
100115c2:	70c3      	strb	r3, [r0, #3]
100115c4:	8029      	strh	r1, [r5, #0]
100115c6:	80aa      	strh	r2, [r5, #4]
100115c8:	71c3      	strb	r3, [r0, #7]
100115ca:	3a09      	subs	r2, #9
100115cc:	210a      	movs	r1, #10
100115ce:	4b14      	ldr	r3, [pc, #80]	; (10011620 <gattm_att_get_value_req_handler+0x90>)
100115d0:	7182      	strb	r2, [r0, #6]
100115d2:	7204      	strb	r4, [r0, #8]
100115d4:	4798      	blx	r3
100115d6:	1c30      	adds	r0, r6, #0
100115d8:	4b12      	ldr	r3, [pc, #72]	; (10011624 <gattm_att_get_value_req_handler+0x94>)
100115da:	4798      	blx	r3
100115dc:	7833      	ldrb	r3, [r6, #0]
100115de:	20e2      	movs	r0, #226	; 0xe2
100115e0:	2b00      	cmp	r3, #0
100115e2:	d112      	bne.n	1001160a <gattm_att_get_value_req_handler+0x7a>
100115e4:	68a9      	ldr	r1, [r5, #8]
100115e6:	9801      	ldr	r0, [sp, #4]
100115e8:	784d      	ldrb	r5, [r1, #1]
100115ea:	780b      	ldrb	r3, [r1, #0]
100115ec:	78ca      	ldrb	r2, [r1, #3]
100115ee:	022d      	lsls	r5, r5, #8
100115f0:	431d      	orrs	r5, r3
100115f2:	788b      	ldrb	r3, [r1, #2]
100115f4:	0212      	lsls	r2, r2, #8
100115f6:	431a      	orrs	r2, r3
100115f8:	803a      	strh	r2, [r7, #0]
100115fa:	790e      	ldrb	r6, [r1, #4]
100115fc:	4b0a      	ldr	r3, [pc, #40]	; (10011628 <gattm_att_get_value_req_handler+0x98>)
100115fe:	3105      	adds	r1, #5
10011600:	4798      	blx	r3
10011602:	20e2      	movs	r0, #226	; 0xe2
10011604:	42ac      	cmp	r4, r5
10011606:	d100      	bne.n	1001160a <gattm_att_get_value_req_handler+0x7a>
10011608:	1c30      	adds	r0, r6, #0
1001160a:	b005      	add	sp, #20
1001160c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001160e:	46c0      	nop			; (mov r8, r8)
10011610:	1001a680 	.word	0x1001a680
10011614:	1001a310 	.word	0x1001a310
10011618:	00000b0b 	.word	0x00000b0b
1001161c:	1001a304 	.word	0x1001a304
10011620:	1000fcdd 	.word	0x1000fcdd
10011624:	1000fd41 	.word	0x1000fd41
10011628:	100155bb 	.word	0x100155bb

1001162c <htpt_enable_rsp_handler>:
1001162c:	780b      	ldrb	r3, [r1, #0]
1001162e:	7013      	strb	r3, [r2, #0]
10011630:	784b      	ldrb	r3, [r1, #1]
10011632:	7053      	strb	r3, [r2, #1]
10011634:	4770      	bx	lr

10011636 <htpt_temp_send_rsp_handler>:
10011636:	780b      	ldrb	r3, [r1, #0]
10011638:	7013      	strb	r3, [r2, #0]
1001163a:	4770      	bx	lr

1001163c <htpt_meas_intv_upd_rsp_handler>:
1001163c:	780b      	ldrb	r3, [r1, #0]
1001163e:	7013      	strb	r3, [r2, #0]
10011640:	4770      	bx	lr

10011642 <htpt_meas_intv_chg_req_ind_handler>:
10011642:	78cb      	ldrb	r3, [r1, #3]
10011644:	7889      	ldrb	r1, [r1, #2]
10011646:	021b      	lsls	r3, r3, #8
10011648:	430b      	orrs	r3, r1
1001164a:	8013      	strh	r3, [r2, #0]
1001164c:	4770      	bx	lr

1001164e <htpt_cfg_indntf_ind_handler>:
1001164e:	780b      	ldrb	r3, [r1, #0]
10011650:	7013      	strb	r3, [r2, #0]
10011652:	784b      	ldrb	r3, [r1, #1]
10011654:	7053      	strb	r3, [r2, #1]
10011656:	4770      	bx	lr

10011658 <pow>:
10011658:	b5f0      	push	{r4, r5, r6, r7, lr}
1001165a:	465f      	mov	r7, fp
1001165c:	464d      	mov	r5, r9
1001165e:	4656      	mov	r6, sl
10011660:	4644      	mov	r4, r8
10011662:	b4f0      	push	{r4, r5, r6, r7}
10011664:	b091      	sub	sp, #68	; 0x44
10011666:	001f      	movs	r7, r3
10011668:	0004      	movs	r4, r0
1001166a:	000d      	movs	r5, r1
1001166c:	0016      	movs	r6, r2
1001166e:	f000 f9af 	bl	100119d0 <__ieee754_pow>
10011672:	4bcf      	ldr	r3, [pc, #828]	; (100119b0 <pow+0x358>)
10011674:	9002      	str	r0, [sp, #8]
10011676:	9103      	str	r1, [sp, #12]
10011678:	469b      	mov	fp, r3
1001167a:	781b      	ldrb	r3, [r3, #0]
1001167c:	b25b      	sxtb	r3, r3
1001167e:	4699      	mov	r9, r3
10011680:	3301      	adds	r3, #1
10011682:	d04f      	beq.n	10011724 <pow+0xcc>
10011684:	0032      	movs	r2, r6
10011686:	003b      	movs	r3, r7
10011688:	0030      	movs	r0, r6
1001168a:	0039      	movs	r1, r7
1001168c:	f003 fd82 	bl	10015194 <__aeabi_dcmpun>
10011690:	9000      	str	r0, [sp, #0]
10011692:	2800      	cmp	r0, #0
10011694:	d146      	bne.n	10011724 <pow+0xcc>
10011696:	0022      	movs	r2, r4
10011698:	002b      	movs	r3, r5
1001169a:	0020      	movs	r0, r4
1001169c:	0029      	movs	r1, r5
1001169e:	f003 fd79 	bl	10015194 <__aeabi_dcmpun>
100116a2:	2200      	movs	r2, #0
100116a4:	4682      	mov	sl, r0
100116a6:	2800      	cmp	r0, #0
100116a8:	d134      	bne.n	10011714 <pow+0xbc>
100116aa:	2300      	movs	r3, #0
100116ac:	0020      	movs	r0, r4
100116ae:	0029      	movs	r1, r5
100116b0:	f001 fa7c 	bl	10012bac <__aeabi_dcmpeq>
100116b4:	2800      	cmp	r0, #0
100116b6:	d03a      	beq.n	1001172e <pow+0xd6>
100116b8:	2200      	movs	r2, #0
100116ba:	2300      	movs	r3, #0
100116bc:	0030      	movs	r0, r6
100116be:	0039      	movs	r1, r7
100116c0:	f001 fa74 	bl	10012bac <__aeabi_dcmpeq>
100116c4:	9005      	str	r0, [sp, #20]
100116c6:	2800      	cmp	r0, #0
100116c8:	d100      	bne.n	100116cc <pow+0x74>
100116ca:	e074      	b.n	100117b6 <pow+0x15e>
100116cc:	ab06      	add	r3, sp, #24
100116ce:	4698      	mov	r8, r3
100116d0:	2301      	movs	r3, #1
100116d2:	4642      	mov	r2, r8
100116d4:	9306      	str	r3, [sp, #24]
100116d6:	4bb7      	ldr	r3, [pc, #732]	; (100119b4 <pow+0x35c>)
100116d8:	6053      	str	r3, [r2, #4]
100116da:	4643      	mov	r3, r8
100116dc:	4652      	mov	r2, sl
100116de:	609c      	str	r4, [r3, #8]
100116e0:	60dd      	str	r5, [r3, #12]
100116e2:	621a      	str	r2, [r3, #32]
100116e4:	611e      	str	r6, [r3, #16]
100116e6:	615f      	str	r7, [r3, #20]
100116e8:	4642      	mov	r2, r8
100116ea:	2300      	movs	r3, #0
100116ec:	2400      	movs	r4, #0
100116ee:	6193      	str	r3, [r2, #24]
100116f0:	61d4      	str	r4, [r2, #28]
100116f2:	464b      	mov	r3, r9
100116f4:	2b00      	cmp	r3, #0
100116f6:	d100      	bne.n	100116fa <pow+0xa2>
100116f8:	e094      	b.n	10011824 <pow+0x1cc>
100116fa:	2300      	movs	r3, #0
100116fc:	4cae      	ldr	r4, [pc, #696]	; (100119b8 <pow+0x360>)
100116fe:	9300      	str	r3, [sp, #0]
10011700:	9401      	str	r4, [sp, #4]
10011702:	9800      	ldr	r0, [sp, #0]
10011704:	9901      	ldr	r1, [sp, #4]
10011706:	b011      	add	sp, #68	; 0x44
10011708:	bc3c      	pop	{r2, r3, r4, r5}
1001170a:	4690      	mov	r8, r2
1001170c:	4699      	mov	r9, r3
1001170e:	46a2      	mov	sl, r4
10011710:	46ab      	mov	fp, r5
10011712:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011714:	2300      	movs	r3, #0
10011716:	0030      	movs	r0, r6
10011718:	0039      	movs	r1, r7
1001171a:	f001 fa47 	bl	10012bac <__aeabi_dcmpeq>
1001171e:	2800      	cmp	r0, #0
10011720:	d000      	beq.n	10011724 <pow+0xcc>
10011722:	e0eb      	b.n	100118fc <pow+0x2a4>
10011724:	9b02      	ldr	r3, [sp, #8]
10011726:	9c03      	ldr	r4, [sp, #12]
10011728:	9300      	str	r3, [sp, #0]
1001172a:	9401      	str	r4, [sp, #4]
1001172c:	e7e9      	b.n	10011702 <pow+0xaa>
1001172e:	9802      	ldr	r0, [sp, #8]
10011730:	9903      	ldr	r1, [sp, #12]
10011732:	f000 ff7d 	bl	10012630 <finite>
10011736:	4681      	mov	r9, r0
10011738:	2800      	cmp	r0, #0
1001173a:	d100      	bne.n	1001173e <pow+0xe6>
1001173c:	e086      	b.n	1001184c <pow+0x1f4>
1001173e:	9802      	ldr	r0, [sp, #8]
10011740:	9903      	ldr	r1, [sp, #12]
10011742:	2200      	movs	r2, #0
10011744:	2300      	movs	r3, #0
10011746:	f001 fa31 	bl	10012bac <__aeabi_dcmpeq>
1001174a:	2800      	cmp	r0, #0
1001174c:	d0ea      	beq.n	10011724 <pow+0xcc>
1001174e:	0020      	movs	r0, r4
10011750:	0029      	movs	r1, r5
10011752:	f000 ff6d 	bl	10012630 <finite>
10011756:	9a02      	ldr	r2, [sp, #8]
10011758:	9b03      	ldr	r3, [sp, #12]
1001175a:	9200      	str	r2, [sp, #0]
1001175c:	9301      	str	r3, [sp, #4]
1001175e:	2800      	cmp	r0, #0
10011760:	d0cf      	beq.n	10011702 <pow+0xaa>
10011762:	0030      	movs	r0, r6
10011764:	0039      	movs	r1, r7
10011766:	f000 ff63 	bl	10012630 <finite>
1001176a:	9a02      	ldr	r2, [sp, #8]
1001176c:	9b03      	ldr	r3, [sp, #12]
1001176e:	9200      	str	r2, [sp, #0]
10011770:	9301      	str	r3, [sp, #4]
10011772:	2800      	cmp	r0, #0
10011774:	d0c5      	beq.n	10011702 <pow+0xaa>
10011776:	ab06      	add	r3, sp, #24
10011778:	4698      	mov	r8, r3
1001177a:	2304      	movs	r3, #4
1001177c:	4642      	mov	r2, r8
1001177e:	9306      	str	r3, [sp, #24]
10011780:	4b8c      	ldr	r3, [pc, #560]	; (100119b4 <pow+0x35c>)
10011782:	6094      	str	r4, [r2, #8]
10011784:	60d5      	str	r5, [r2, #12]
10011786:	6053      	str	r3, [r2, #4]
10011788:	2300      	movs	r3, #0
1001178a:	2400      	movs	r4, #0
1001178c:	6213      	str	r3, [r2, #32]
1001178e:	2300      	movs	r3, #0
10011790:	6193      	str	r3, [r2, #24]
10011792:	61d4      	str	r4, [r2, #28]
10011794:	465b      	mov	r3, fp
10011796:	781b      	ldrb	r3, [r3, #0]
10011798:	6116      	str	r6, [r2, #16]
1001179a:	6157      	str	r7, [r2, #20]
1001179c:	b25b      	sxtb	r3, r3
1001179e:	2b02      	cmp	r3, #2
100117a0:	d004      	beq.n	100117ac <pow+0x154>
100117a2:	4640      	mov	r0, r8
100117a4:	f000 ff4e 	bl	10012644 <matherr>
100117a8:	2800      	cmp	r0, #0
100117aa:	d140      	bne.n	1001182e <pow+0x1d6>
100117ac:	f003 fec0 	bl	10015530 <__errno>
100117b0:	2322      	movs	r3, #34	; 0x22
100117b2:	6003      	str	r3, [r0, #0]
100117b4:	e03b      	b.n	1001182e <pow+0x1d6>
100117b6:	0030      	movs	r0, r6
100117b8:	0039      	movs	r1, r7
100117ba:	f000 ff39 	bl	10012630 <finite>
100117be:	9a02      	ldr	r2, [sp, #8]
100117c0:	9b03      	ldr	r3, [sp, #12]
100117c2:	9200      	str	r2, [sp, #0]
100117c4:	9301      	str	r3, [sp, #4]
100117c6:	2800      	cmp	r0, #0
100117c8:	d09b      	beq.n	10011702 <pow+0xaa>
100117ca:	2200      	movs	r2, #0
100117cc:	2300      	movs	r3, #0
100117ce:	0030      	movs	r0, r6
100117d0:	0039      	movs	r1, r7
100117d2:	f001 f9f1 	bl	10012bb8 <__aeabi_dcmplt>
100117d6:	2800      	cmp	r0, #0
100117d8:	d100      	bne.n	100117dc <pow+0x184>
100117da:	e792      	b.n	10011702 <pow+0xaa>
100117dc:	ab06      	add	r3, sp, #24
100117de:	4698      	mov	r8, r3
100117e0:	2301      	movs	r3, #1
100117e2:	4642      	mov	r2, r8
100117e4:	9306      	str	r3, [sp, #24]
100117e6:	4b73      	ldr	r3, [pc, #460]	; (100119b4 <pow+0x35c>)
100117e8:	6053      	str	r3, [r2, #4]
100117ea:	4643      	mov	r3, r8
100117ec:	9a05      	ldr	r2, [sp, #20]
100117ee:	609c      	str	r4, [r3, #8]
100117f0:	60dd      	str	r5, [r3, #12]
100117f2:	621a      	str	r2, [r3, #32]
100117f4:	611e      	str	r6, [r3, #16]
100117f6:	615f      	str	r7, [r3, #20]
100117f8:	465b      	mov	r3, fp
100117fa:	781b      	ldrb	r3, [r3, #0]
100117fc:	b25b      	sxtb	r3, r3
100117fe:	2b00      	cmp	r3, #0
10011800:	d00b      	beq.n	1001181a <pow+0x1c2>
10011802:	2000      	movs	r0, #0
10011804:	4642      	mov	r2, r8
10011806:	496d      	ldr	r1, [pc, #436]	; (100119bc <pow+0x364>)
10011808:	6190      	str	r0, [r2, #24]
1001180a:	61d1      	str	r1, [r2, #28]
1001180c:	2b02      	cmp	r3, #2
1001180e:	d109      	bne.n	10011824 <pow+0x1cc>
10011810:	f003 fe8e 	bl	10015530 <__errno>
10011814:	2321      	movs	r3, #33	; 0x21
10011816:	6003      	str	r3, [r0, #0]
10011818:	e009      	b.n	1001182e <pow+0x1d6>
1001181a:	4642      	mov	r2, r8
1001181c:	2300      	movs	r3, #0
1001181e:	2400      	movs	r4, #0
10011820:	6193      	str	r3, [r2, #24]
10011822:	61d4      	str	r4, [r2, #28]
10011824:	4640      	mov	r0, r8
10011826:	f000 ff0d 	bl	10012644 <matherr>
1001182a:	2800      	cmp	r0, #0
1001182c:	d0f0      	beq.n	10011810 <pow+0x1b8>
1001182e:	4643      	mov	r3, r8
10011830:	6a1b      	ldr	r3, [r3, #32]
10011832:	2b00      	cmp	r3, #0
10011834:	d004      	beq.n	10011840 <pow+0x1e8>
10011836:	f003 fe7b 	bl	10015530 <__errno>
1001183a:	4643      	mov	r3, r8
1001183c:	6a1b      	ldr	r3, [r3, #32]
1001183e:	6003      	str	r3, [r0, #0]
10011840:	4643      	mov	r3, r8
10011842:	69dc      	ldr	r4, [r3, #28]
10011844:	699b      	ldr	r3, [r3, #24]
10011846:	9300      	str	r3, [sp, #0]
10011848:	9401      	str	r4, [sp, #4]
1001184a:	e75a      	b.n	10011702 <pow+0xaa>
1001184c:	0020      	movs	r0, r4
1001184e:	0029      	movs	r1, r5
10011850:	f000 feee 	bl	10012630 <finite>
10011854:	2800      	cmp	r0, #0
10011856:	d100      	bne.n	1001185a <pow+0x202>
10011858:	e771      	b.n	1001173e <pow+0xe6>
1001185a:	0030      	movs	r0, r6
1001185c:	0039      	movs	r1, r7
1001185e:	f000 fee7 	bl	10012630 <finite>
10011862:	2800      	cmp	r0, #0
10011864:	d100      	bne.n	10011868 <pow+0x210>
10011866:	e76a      	b.n	1001173e <pow+0xe6>
10011868:	9802      	ldr	r0, [sp, #8]
1001186a:	9903      	ldr	r1, [sp, #12]
1001186c:	000b      	movs	r3, r1
1001186e:	0002      	movs	r2, r0
10011870:	f003 fc90 	bl	10015194 <__aeabi_dcmpun>
10011874:	ab06      	add	r3, sp, #24
10011876:	4698      	mov	r8, r3
10011878:	2800      	cmp	r0, #0
1001187a:	d17a      	bne.n	10011972 <pow+0x31a>
1001187c:	2303      	movs	r3, #3
1001187e:	4642      	mov	r2, r8
10011880:	9306      	str	r3, [sp, #24]
10011882:	4b4c      	ldr	r3, [pc, #304]	; (100119b4 <pow+0x35c>)
10011884:	6210      	str	r0, [r2, #32]
10011886:	6053      	str	r3, [r2, #4]
10011888:	465b      	mov	r3, fp
1001188a:	781b      	ldrb	r3, [r3, #0]
1001188c:	6094      	str	r4, [r2, #8]
1001188e:	60d5      	str	r5, [r2, #12]
10011890:	b25b      	sxtb	r3, r3
10011892:	6116      	str	r6, [r2, #16]
10011894:	6157      	str	r7, [r2, #20]
10011896:	4699      	mov	r9, r3
10011898:	2b00      	cmp	r3, #0
1001189a:	d148      	bne.n	1001192e <pow+0x2d6>
1001189c:	22e0      	movs	r2, #224	; 0xe0
1001189e:	4641      	mov	r1, r8
100118a0:	4b47      	ldr	r3, [pc, #284]	; (100119c0 <pow+0x368>)
100118a2:	0612      	lsls	r2, r2, #24
100118a4:	618a      	str	r2, [r1, #24]
100118a6:	61cb      	str	r3, [r1, #28]
100118a8:	0020      	movs	r0, r4
100118aa:	2200      	movs	r2, #0
100118ac:	2300      	movs	r3, #0
100118ae:	0029      	movs	r1, r5
100118b0:	f001 f982 	bl	10012bb8 <__aeabi_dcmplt>
100118b4:	2800      	cmp	r0, #0
100118b6:	d100      	bne.n	100118ba <pow+0x262>
100118b8:	e773      	b.n	100117a2 <pow+0x14a>
100118ba:	2200      	movs	r2, #0
100118bc:	4b41      	ldr	r3, [pc, #260]	; (100119c4 <pow+0x36c>)
100118be:	0030      	movs	r0, r6
100118c0:	0039      	movs	r1, r7
100118c2:	f002 fe99 	bl	100145f8 <__aeabi_dmul>
100118c6:	0004      	movs	r4, r0
100118c8:	000d      	movs	r5, r1
100118ca:	f000 fec3 	bl	10012654 <rint>
100118ce:	0002      	movs	r2, r0
100118d0:	000b      	movs	r3, r1
100118d2:	0020      	movs	r0, r4
100118d4:	0029      	movs	r1, r5
100118d6:	f001 f969 	bl	10012bac <__aeabi_dcmpeq>
100118da:	2800      	cmp	r0, #0
100118dc:	d105      	bne.n	100118ea <pow+0x292>
100118de:	22e0      	movs	r2, #224	; 0xe0
100118e0:	4b39      	ldr	r3, [pc, #228]	; (100119c8 <pow+0x370>)
100118e2:	0612      	lsls	r2, r2, #24
100118e4:	4641      	mov	r1, r8
100118e6:	618a      	str	r2, [r1, #24]
100118e8:	61cb      	str	r3, [r1, #28]
100118ea:	465b      	mov	r3, fp
100118ec:	781b      	ldrb	r3, [r3, #0]
100118ee:	b25b      	sxtb	r3, r3
100118f0:	4699      	mov	r9, r3
100118f2:	464b      	mov	r3, r9
100118f4:	2b02      	cmp	r3, #2
100118f6:	d000      	beq.n	100118fa <pow+0x2a2>
100118f8:	e753      	b.n	100117a2 <pow+0x14a>
100118fa:	e757      	b.n	100117ac <pow+0x154>
100118fc:	ab06      	add	r3, sp, #24
100118fe:	4698      	mov	r8, r3
10011900:	2301      	movs	r3, #1
10011902:	4642      	mov	r2, r8
10011904:	9306      	str	r3, [sp, #24]
10011906:	4b2b      	ldr	r3, [pc, #172]	; (100119b4 <pow+0x35c>)
10011908:	6053      	str	r3, [r2, #4]
1001190a:	4643      	mov	r3, r8
1001190c:	609c      	str	r4, [r3, #8]
1001190e:	60dd      	str	r5, [r3, #12]
10011910:	2400      	movs	r4, #0
10011912:	9a00      	ldr	r2, [sp, #0]
10011914:	4d28      	ldr	r5, [pc, #160]	; (100119b8 <pow+0x360>)
10011916:	621a      	str	r2, [r3, #32]
10011918:	611e      	str	r6, [r3, #16]
1001191a:	615f      	str	r7, [r3, #20]
1001191c:	619c      	str	r4, [r3, #24]
1001191e:	61dd      	str	r5, [r3, #28]
10011920:	464b      	mov	r3, r9
10011922:	9400      	str	r4, [sp, #0]
10011924:	9501      	str	r5, [sp, #4]
10011926:	2b02      	cmp	r3, #2
10011928:	d000      	beq.n	1001192c <pow+0x2d4>
1001192a:	e77b      	b.n	10011824 <pow+0x1cc>
1001192c:	e6e9      	b.n	10011702 <pow+0xaa>
1001192e:	2200      	movs	r2, #0
10011930:	4641      	mov	r1, r8
10011932:	4b26      	ldr	r3, [pc, #152]	; (100119cc <pow+0x374>)
10011934:	0020      	movs	r0, r4
10011936:	618a      	str	r2, [r1, #24]
10011938:	61cb      	str	r3, [r1, #28]
1001193a:	2200      	movs	r2, #0
1001193c:	2300      	movs	r3, #0
1001193e:	0029      	movs	r1, r5
10011940:	f001 f93a 	bl	10012bb8 <__aeabi_dcmplt>
10011944:	2800      	cmp	r0, #0
10011946:	d0d4      	beq.n	100118f2 <pow+0x29a>
10011948:	2200      	movs	r2, #0
1001194a:	4b1e      	ldr	r3, [pc, #120]	; (100119c4 <pow+0x36c>)
1001194c:	0030      	movs	r0, r6
1001194e:	0039      	movs	r1, r7
10011950:	f002 fe52 	bl	100145f8 <__aeabi_dmul>
10011954:	0004      	movs	r4, r0
10011956:	000d      	movs	r5, r1
10011958:	f000 fe7c 	bl	10012654 <rint>
1001195c:	0002      	movs	r2, r0
1001195e:	000b      	movs	r3, r1
10011960:	0020      	movs	r0, r4
10011962:	0029      	movs	r1, r5
10011964:	f001 f922 	bl	10012bac <__aeabi_dcmpeq>
10011968:	2800      	cmp	r0, #0
1001196a:	d1be      	bne.n	100118ea <pow+0x292>
1001196c:	2200      	movs	r2, #0
1001196e:	4b13      	ldr	r3, [pc, #76]	; (100119bc <pow+0x364>)
10011970:	e7b8      	b.n	100118e4 <pow+0x28c>
10011972:	2301      	movs	r3, #1
10011974:	4642      	mov	r2, r8
10011976:	9306      	str	r3, [sp, #24]
10011978:	4b0e      	ldr	r3, [pc, #56]	; (100119b4 <pow+0x35c>)
1001197a:	6053      	str	r3, [r2, #4]
1001197c:	4643      	mov	r3, r8
1001197e:	464a      	mov	r2, r9
10011980:	609c      	str	r4, [r3, #8]
10011982:	60dd      	str	r5, [r3, #12]
10011984:	621a      	str	r2, [r3, #32]
10011986:	611e      	str	r6, [r3, #16]
10011988:	615f      	str	r7, [r3, #20]
1001198a:	2400      	movs	r4, #0
1001198c:	465b      	mov	r3, fp
1001198e:	571c      	ldrsb	r4, [r3, r4]
10011990:	2c00      	cmp	r4, #0
10011992:	d100      	bne.n	10011996 <pow+0x33e>
10011994:	e741      	b.n	1001181a <pow+0x1c2>
10011996:	2300      	movs	r3, #0
10011998:	2200      	movs	r2, #0
1001199a:	0019      	movs	r1, r3
1001199c:	0010      	movs	r0, r2
1001199e:	f002 fa07 	bl	10013db0 <__aeabi_ddiv>
100119a2:	4643      	mov	r3, r8
100119a4:	6198      	str	r0, [r3, #24]
100119a6:	61d9      	str	r1, [r3, #28]
100119a8:	2c02      	cmp	r4, #2
100119aa:	d100      	bne.n	100119ae <pow+0x356>
100119ac:	e730      	b.n	10011810 <pow+0x1b8>
100119ae:	e739      	b.n	10011824 <pow+0x1cc>
100119b0:	10017904 	.word	0x10017904
100119b4:	100176ec 	.word	0x100176ec
100119b8:	3ff00000 	.word	0x3ff00000
100119bc:	fff00000 	.word	0xfff00000
100119c0:	47efffff 	.word	0x47efffff
100119c4:	3fe00000 	.word	0x3fe00000
100119c8:	c7efffff 	.word	0xc7efffff
100119cc:	7ff00000 	.word	0x7ff00000

100119d0 <__ieee754_pow>:
100119d0:	b5f0      	push	{r4, r5, r6, r7, lr}
100119d2:	4656      	mov	r6, sl
100119d4:	464d      	mov	r5, r9
100119d6:	4644      	mov	r4, r8
100119d8:	465f      	mov	r7, fp
100119da:	b4f0      	push	{r4, r5, r6, r7}
100119dc:	001c      	movs	r4, r3
100119de:	0013      	movs	r3, r2
100119e0:	0067      	lsls	r7, r4, #1
100119e2:	b091      	sub	sp, #68	; 0x44
100119e4:	087f      	lsrs	r7, r7, #1
100119e6:	9300      	str	r3, [sp, #0]
100119e8:	9401      	str	r4, [sp, #4]
100119ea:	0006      	movs	r6, r0
100119ec:	000d      	movs	r5, r1
100119ee:	4680      	mov	r8, r0
100119f0:	4689      	mov	r9, r1
100119f2:	46a2      	mov	sl, r4
100119f4:	433b      	orrs	r3, r7
100119f6:	d032      	beq.n	10011a5e <__ieee754_pow+0x8e>
100119f8:	4b6e      	ldr	r3, [pc, #440]	; (10011bb4 <__ieee754_pow+0x1e4>)
100119fa:	006c      	lsls	r4, r5, #1
100119fc:	0864      	lsrs	r4, r4, #1
100119fe:	429c      	cmp	r4, r3
10011a00:	dc29      	bgt.n	10011a56 <__ieee754_pow+0x86>
10011a02:	d026      	beq.n	10011a52 <__ieee754_pow+0x82>
10011a04:	429f      	cmp	r7, r3
10011a06:	dc26      	bgt.n	10011a56 <__ieee754_pow+0x86>
10011a08:	4b6a      	ldr	r3, [pc, #424]	; (10011bb4 <__ieee754_pow+0x1e4>)
10011a0a:	429f      	cmp	r7, r3
10011a0c:	d100      	bne.n	10011a10 <__ieee754_pow+0x40>
10011a0e:	e089      	b.n	10011b24 <__ieee754_pow+0x154>
10011a10:	2300      	movs	r3, #0
10011a12:	469b      	mov	fp, r3
10011a14:	464b      	mov	r3, r9
10011a16:	2b00      	cmp	r3, #0
10011a18:	da00      	bge.n	10011a1c <__ieee754_pow+0x4c>
10011a1a:	e087      	b.n	10011b2c <__ieee754_pow+0x15c>
10011a1c:	2a00      	cmp	r2, #0
10011a1e:	d12f      	bne.n	10011a80 <__ieee754_pow+0xb0>
10011a20:	4b64      	ldr	r3, [pc, #400]	; (10011bb4 <__ieee754_pow+0x1e4>)
10011a22:	429f      	cmp	r7, r3
10011a24:	d100      	bne.n	10011a28 <__ieee754_pow+0x58>
10011a26:	e09f      	b.n	10011b68 <__ieee754_pow+0x198>
10011a28:	4b63      	ldr	r3, [pc, #396]	; (10011bb8 <__ieee754_pow+0x1e8>)
10011a2a:	429f      	cmp	r7, r3
10011a2c:	d05d      	beq.n	10011aea <__ieee754_pow+0x11a>
10011a2e:	2380      	movs	r3, #128	; 0x80
10011a30:	05db      	lsls	r3, r3, #23
10011a32:	459a      	cmp	sl, r3
10011a34:	d101      	bne.n	10011a3a <__ieee754_pow+0x6a>
10011a36:	f000 fbc1 	bl	100121bc <__ieee754_pow+0x7ec>
10011a3a:	4b60      	ldr	r3, [pc, #384]	; (10011bbc <__ieee754_pow+0x1ec>)
10011a3c:	459a      	cmp	sl, r3
10011a3e:	d11f      	bne.n	10011a80 <__ieee754_pow+0xb0>
10011a40:	464b      	mov	r3, r9
10011a42:	2b00      	cmp	r3, #0
10011a44:	db1c      	blt.n	10011a80 <__ieee754_pow+0xb0>
10011a46:	0030      	movs	r0, r6
10011a48:	0029      	movs	r1, r5
10011a4a:	f000 fcf7 	bl	1001243c <__ieee754_sqrt>
10011a4e:	0006      	movs	r6, r0
10011a50:	e007      	b.n	10011a62 <__ieee754_pow+0x92>
10011a52:	2800      	cmp	r0, #0
10011a54:	d00d      	beq.n	10011a72 <__ieee754_pow+0xa2>
10011a56:	4b5a      	ldr	r3, [pc, #360]	; (10011bc0 <__ieee754_pow+0x1f0>)
10011a58:	18e0      	adds	r0, r4, r3
10011a5a:	4330      	orrs	r0, r6
10011a5c:	d10b      	bne.n	10011a76 <__ieee754_pow+0xa6>
10011a5e:	2600      	movs	r6, #0
10011a60:	4955      	ldr	r1, [pc, #340]	; (10011bb8 <__ieee754_pow+0x1e8>)
10011a62:	0030      	movs	r0, r6
10011a64:	b011      	add	sp, #68	; 0x44
10011a66:	bc3c      	pop	{r2, r3, r4, r5}
10011a68:	4690      	mov	r8, r2
10011a6a:	4699      	mov	r9, r3
10011a6c:	46a2      	mov	sl, r4
10011a6e:	46ab      	mov	fp, r5
10011a70:	bdf0      	pop	{r4, r5, r6, r7, pc}
10011a72:	42a7      	cmp	r7, r4
10011a74:	ddc8      	ble.n	10011a08 <__ieee754_pow+0x38>
10011a76:	4853      	ldr	r0, [pc, #332]	; (10011bc4 <__ieee754_pow+0x1f4>)
10011a78:	f000 fde6 	bl	10012648 <nan>
10011a7c:	0006      	movs	r6, r0
10011a7e:	e7f0      	b.n	10011a62 <__ieee754_pow+0x92>
10011a80:	0030      	movs	r0, r6
10011a82:	0029      	movs	r1, r5
10011a84:	f000 fdd0 	bl	10012628 <fabs>
10011a88:	4643      	mov	r3, r8
10011a8a:	2b00      	cmp	r3, #0
10011a8c:	d01d      	beq.n	10011aca <__ieee754_pow+0xfa>
10011a8e:	0feb      	lsrs	r3, r5, #31
10011a90:	3b01      	subs	r3, #1
10011a92:	4698      	mov	r8, r3
10011a94:	465b      	mov	r3, fp
10011a96:	4642      	mov	r2, r8
10011a98:	4313      	orrs	r3, r2
10011a9a:	d079      	beq.n	10011b90 <__ieee754_pow+0x1c0>
10011a9c:	4b4a      	ldr	r3, [pc, #296]	; (10011bc8 <__ieee754_pow+0x1f8>)
10011a9e:	429f      	cmp	r7, r3
10011aa0:	dc00      	bgt.n	10011aa4 <__ieee754_pow+0xd4>
10011aa2:	e09f      	b.n	10011be4 <__ieee754_pow+0x214>
10011aa4:	4b49      	ldr	r3, [pc, #292]	; (10011bcc <__ieee754_pow+0x1fc>)
10011aa6:	429f      	cmp	r7, r3
10011aa8:	dc01      	bgt.n	10011aae <__ieee754_pow+0xde>
10011aaa:	f000 fbce 	bl	1001224a <__ieee754_pow+0x87a>
10011aae:	4b48      	ldr	r3, [pc, #288]	; (10011bd0 <__ieee754_pow+0x200>)
10011ab0:	429c      	cmp	r4, r3
10011ab2:	dd79      	ble.n	10011ba8 <__ieee754_pow+0x1d8>
10011ab4:	4653      	mov	r3, sl
10011ab6:	2b00      	cmp	r3, #0
10011ab8:	dd79      	ble.n	10011bae <__ieee754_pow+0x1de>
10011aba:	4a46      	ldr	r2, [pc, #280]	; (10011bd4 <__ieee754_pow+0x204>)
10011abc:	4b46      	ldr	r3, [pc, #280]	; (10011bd8 <__ieee754_pow+0x208>)
10011abe:	0010      	movs	r0, r2
10011ac0:	0019      	movs	r1, r3
10011ac2:	f002 fd99 	bl	100145f8 <__aeabi_dmul>
10011ac6:	0006      	movs	r6, r0
10011ac8:	e7cb      	b.n	10011a62 <__ieee754_pow+0x92>
10011aca:	2c00      	cmp	r4, #0
10011acc:	d004      	beq.n	10011ad8 <__ieee754_pow+0x108>
10011ace:	4a3a      	ldr	r2, [pc, #232]	; (10011bb8 <__ieee754_pow+0x1e8>)
10011ad0:	00ab      	lsls	r3, r5, #2
10011ad2:	089b      	lsrs	r3, r3, #2
10011ad4:	4293      	cmp	r3, r2
10011ad6:	d1da      	bne.n	10011a8e <__ieee754_pow+0xbe>
10011ad8:	4653      	mov	r3, sl
10011ada:	2b00      	cmp	r3, #0
10011adc:	da00      	bge.n	10011ae0 <__ieee754_pow+0x110>
10011ade:	e3ad      	b.n	1001223c <__ieee754_pow+0x86c>
10011ae0:	464b      	mov	r3, r9
10011ae2:	2b00      	cmp	r3, #0
10011ae4:	db0d      	blt.n	10011b02 <__ieee754_pow+0x132>
10011ae6:	0006      	movs	r6, r0
10011ae8:	e7bb      	b.n	10011a62 <__ieee754_pow+0x92>
10011aea:	4653      	mov	r3, sl
10011aec:	0029      	movs	r1, r5
10011aee:	2b00      	cmp	r3, #0
10011af0:	dab7      	bge.n	10011a62 <__ieee754_pow+0x92>
10011af2:	0032      	movs	r2, r6
10011af4:	002b      	movs	r3, r5
10011af6:	2000      	movs	r0, #0
10011af8:	492f      	ldr	r1, [pc, #188]	; (10011bb8 <__ieee754_pow+0x1e8>)
10011afa:	f002 f959 	bl	10013db0 <__aeabi_ddiv>
10011afe:	0006      	movs	r6, r0
10011b00:	e7af      	b.n	10011a62 <__ieee754_pow+0x92>
10011b02:	4b2f      	ldr	r3, [pc, #188]	; (10011bc0 <__ieee754_pow+0x1f0>)
10011b04:	469c      	mov	ip, r3
10011b06:	465b      	mov	r3, fp
10011b08:	4464      	add	r4, ip
10011b0a:	431c      	orrs	r4, r3
10011b0c:	d101      	bne.n	10011b12 <__ieee754_pow+0x142>
10011b0e:	f000 fc2b 	bl	10012368 <__ieee754_pow+0x998>
10011b12:	465b      	mov	r3, fp
10011b14:	0006      	movs	r6, r0
10011b16:	2b01      	cmp	r3, #1
10011b18:	d1a3      	bne.n	10011a62 <__ieee754_pow+0x92>
10011b1a:	2380      	movs	r3, #128	; 0x80
10011b1c:	061b      	lsls	r3, r3, #24
10011b1e:	469c      	mov	ip, r3
10011b20:	4461      	add	r1, ip
10011b22:	e79e      	b.n	10011a62 <__ieee754_pow+0x92>
10011b24:	2a00      	cmp	r2, #0
10011b26:	d100      	bne.n	10011b2a <__ieee754_pow+0x15a>
10011b28:	e772      	b.n	10011a10 <__ieee754_pow+0x40>
10011b2a:	e794      	b.n	10011a56 <__ieee754_pow+0x86>
10011b2c:	4b2b      	ldr	r3, [pc, #172]	; (10011bdc <__ieee754_pow+0x20c>)
10011b2e:	429f      	cmp	r7, r3
10011b30:	dc2b      	bgt.n	10011b8a <__ieee754_pow+0x1ba>
10011b32:	4b27      	ldr	r3, [pc, #156]	; (10011bd0 <__ieee754_pow+0x200>)
10011b34:	429f      	cmp	r7, r3
10011b36:	dc00      	bgt.n	10011b3a <__ieee754_pow+0x16a>
10011b38:	e770      	b.n	10011a1c <__ieee754_pow+0x4c>
10011b3a:	4929      	ldr	r1, [pc, #164]	; (10011be0 <__ieee754_pow+0x210>)
10011b3c:	153b      	asrs	r3, r7, #20
10011b3e:	468c      	mov	ip, r1
10011b40:	4463      	add	r3, ip
10011b42:	2b14      	cmp	r3, #20
10011b44:	dc01      	bgt.n	10011b4a <__ieee754_pow+0x17a>
10011b46:	f000 fbf2 	bl	1001232e <__ieee754_pow+0x95e>
10011b4a:	2134      	movs	r1, #52	; 0x34
10011b4c:	1acb      	subs	r3, r1, r3
10011b4e:	9900      	ldr	r1, [sp, #0]
10011b50:	40d9      	lsrs	r1, r3
10011b52:	0008      	movs	r0, r1
10011b54:	4098      	lsls	r0, r3
10011b56:	4282      	cmp	r2, r0
10011b58:	d000      	beq.n	10011b5c <__ieee754_pow+0x18c>
10011b5a:	e75f      	b.n	10011a1c <__ieee754_pow+0x4c>
10011b5c:	2301      	movs	r3, #1
10011b5e:	4019      	ands	r1, r3
10011b60:	3301      	adds	r3, #1
10011b62:	1a5b      	subs	r3, r3, r1
10011b64:	469b      	mov	fp, r3
10011b66:	e759      	b.n	10011a1c <__ieee754_pow+0x4c>
10011b68:	4b15      	ldr	r3, [pc, #84]	; (10011bc0 <__ieee754_pow+0x1f0>)
10011b6a:	18e0      	adds	r0, r4, r3
10011b6c:	4306      	orrs	r6, r0
10011b6e:	d100      	bne.n	10011b72 <__ieee754_pow+0x1a2>
10011b70:	e775      	b.n	10011a5e <__ieee754_pow+0x8e>
10011b72:	4b17      	ldr	r3, [pc, #92]	; (10011bd0 <__ieee754_pow+0x200>)
10011b74:	429c      	cmp	r4, r3
10011b76:	dc00      	bgt.n	10011b7a <__ieee754_pow+0x1aa>
10011b78:	e351      	b.n	1001221e <__ieee754_pow+0x84e>
10011b7a:	4653      	mov	r3, sl
10011b7c:	2b00      	cmp	r3, #0
10011b7e:	db16      	blt.n	10011bae <__ieee754_pow+0x1de>
10011b80:	9b00      	ldr	r3, [sp, #0]
10011b82:	9c01      	ldr	r4, [sp, #4]
10011b84:	001e      	movs	r6, r3
10011b86:	0021      	movs	r1, r4
10011b88:	e76b      	b.n	10011a62 <__ieee754_pow+0x92>
10011b8a:	2302      	movs	r3, #2
10011b8c:	469b      	mov	fp, r3
10011b8e:	e745      	b.n	10011a1c <__ieee754_pow+0x4c>
10011b90:	0032      	movs	r2, r6
10011b92:	002b      	movs	r3, r5
10011b94:	0030      	movs	r0, r6
10011b96:	0029      	movs	r1, r5
10011b98:	f002 ffa8 	bl	10014aec <__aeabi_dsub>
10011b9c:	0002      	movs	r2, r0
10011b9e:	000b      	movs	r3, r1
10011ba0:	f002 f906 	bl	10013db0 <__aeabi_ddiv>
10011ba4:	0006      	movs	r6, r0
10011ba6:	e75c      	b.n	10011a62 <__ieee754_pow+0x92>
10011ba8:	4653      	mov	r3, sl
10011baa:	2b00      	cmp	r3, #0
10011bac:	db85      	blt.n	10011aba <__ieee754_pow+0xea>
10011bae:	2600      	movs	r6, #0
10011bb0:	2100      	movs	r1, #0
10011bb2:	e756      	b.n	10011a62 <__ieee754_pow+0x92>
10011bb4:	7ff00000 	.word	0x7ff00000
10011bb8:	3ff00000 	.word	0x3ff00000
10011bbc:	3fe00000 	.word	0x3fe00000
10011bc0:	c0100000 	.word	0xc0100000
10011bc4:	10017628 	.word	0x10017628
10011bc8:	41e00000 	.word	0x41e00000
10011bcc:	43f00000 	.word	0x43f00000
10011bd0:	3fefffff 	.word	0x3fefffff
10011bd4:	8800759c 	.word	0x8800759c
10011bd8:	7e37e43c 	.word	0x7e37e43c
10011bdc:	433fffff 	.word	0x433fffff
10011be0:	fffffc01 	.word	0xfffffc01
10011be4:	4be8      	ldr	r3, [pc, #928]	; (10011f88 <__ieee754_pow+0x5b8>)
10011be6:	2200      	movs	r2, #0
10011be8:	429c      	cmp	r4, r3
10011bea:	dc06      	bgt.n	10011bfa <__ieee754_pow+0x22a>
10011bec:	2200      	movs	r2, #0
10011bee:	4be7      	ldr	r3, [pc, #924]	; (10011f8c <__ieee754_pow+0x5bc>)
10011bf0:	f002 fd02 	bl	100145f8 <__aeabi_dmul>
10011bf4:	2235      	movs	r2, #53	; 0x35
10011bf6:	000c      	movs	r4, r1
10011bf8:	4252      	negs	r2, r2
10011bfa:	4de5      	ldr	r5, [pc, #916]	; (10011f90 <__ieee754_pow+0x5c0>)
10011bfc:	1523      	asrs	r3, r4, #20
10011bfe:	46ac      	mov	ip, r5
10011c00:	4463      	add	r3, ip
10011c02:	4699      	mov	r9, r3
10011c04:	0324      	lsls	r4, r4, #12
10011c06:	4de3      	ldr	r5, [pc, #908]	; (10011f94 <__ieee754_pow+0x5c4>)
10011c08:	4be3      	ldr	r3, [pc, #908]	; (10011f98 <__ieee754_pow+0x5c8>)
10011c0a:	0b24      	lsrs	r4, r4, #12
10011c0c:	4491      	add	r9, r2
10011c0e:	4325      	orrs	r5, r4
10011c10:	429c      	cmp	r4, r3
10011c12:	dd09      	ble.n	10011c28 <__ieee754_pow+0x258>
10011c14:	4be1      	ldr	r3, [pc, #900]	; (10011f9c <__ieee754_pow+0x5cc>)
10011c16:	429c      	cmp	r4, r3
10011c18:	dc00      	bgt.n	10011c1c <__ieee754_pow+0x24c>
10011c1a:	e3a9      	b.n	10012370 <__ieee754_pow+0x9a0>
10011c1c:	2301      	movs	r3, #1
10011c1e:	469c      	mov	ip, r3
10011c20:	4bdf      	ldr	r3, [pc, #892]	; (10011fa0 <__ieee754_pow+0x5d0>)
10011c22:	44e1      	add	r9, ip
10011c24:	469c      	mov	ip, r3
10011c26:	4465      	add	r5, ip
10011c28:	2300      	movs	r3, #0
10011c2a:	2400      	movs	r4, #0
10011c2c:	2200      	movs	r2, #0
10011c2e:	9308      	str	r3, [sp, #32]
10011c30:	9409      	str	r4, [sp, #36]	; 0x24
10011c32:	930c      	str	r3, [sp, #48]	; 0x30
10011c34:	940d      	str	r4, [sp, #52]	; 0x34
10011c36:	2400      	movs	r4, #0
10011c38:	4bd6      	ldr	r3, [pc, #856]	; (10011f94 <__ieee754_pow+0x5c4>)
10011c3a:	9206      	str	r2, [sp, #24]
10011c3c:	9307      	str	r3, [sp, #28]
10011c3e:	9a06      	ldr	r2, [sp, #24]
10011c40:	9b07      	ldr	r3, [sp, #28]
10011c42:	0029      	movs	r1, r5
10011c44:	900a      	str	r0, [sp, #40]	; 0x28
10011c46:	910b      	str	r1, [sp, #44]	; 0x2c
10011c48:	f002 ff50 	bl	10014aec <__aeabi_dsub>
10011c4c:	9a06      	ldr	r2, [sp, #24]
10011c4e:	9b07      	ldr	r3, [sp, #28]
10011c50:	0006      	movs	r6, r0
10011c52:	000f      	movs	r7, r1
10011c54:	980a      	ldr	r0, [sp, #40]	; 0x28
10011c56:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011c58:	f001 fd7e 	bl	10013758 <__aeabi_dadd>
10011c5c:	0002      	movs	r2, r0
10011c5e:	000b      	movs	r3, r1
10011c60:	2000      	movs	r0, #0
10011c62:	49cc      	ldr	r1, [pc, #816]	; (10011f94 <__ieee754_pow+0x5c4>)
10011c64:	f002 f8a4 	bl	10013db0 <__aeabi_ddiv>
10011c68:	000a      	movs	r2, r1
10011c6a:	0001      	movs	r1, r0
10011c6c:	0013      	movs	r3, r2
10011c6e:	910e      	str	r1, [sp, #56]	; 0x38
10011c70:	920f      	str	r2, [sp, #60]	; 0x3c
10011c72:	0002      	movs	r2, r0
10011c74:	0039      	movs	r1, r7
10011c76:	0030      	movs	r0, r6
10011c78:	f002 fcbe 	bl	100145f8 <__aeabi_dmul>
10011c7c:	000a      	movs	r2, r1
10011c7e:	0001      	movs	r1, r0
10011c80:	2080      	movs	r0, #128	; 0x80
10011c82:	9104      	str	r1, [sp, #16]
10011c84:	9205      	str	r2, [sp, #20]
10011c86:	0013      	movs	r3, r2
10011c88:	2200      	movs	r2, #0
10011c8a:	2180      	movs	r1, #128	; 0x80
10011c8c:	0300      	lsls	r0, r0, #12
10011c8e:	4684      	mov	ip, r0
10011c90:	9202      	str	r2, [sp, #8]
10011c92:	9303      	str	r3, [sp, #12]
10011c94:	2200      	movs	r2, #0
10011c96:	0589      	lsls	r1, r1, #22
10011c98:	106d      	asrs	r5, r5, #1
10011c9a:	430d      	orrs	r5, r1
10011c9c:	4465      	add	r5, ip
10011c9e:	192b      	adds	r3, r5, r4
10011ca0:	9802      	ldr	r0, [sp, #8]
10011ca2:	9903      	ldr	r1, [sp, #12]
10011ca4:	0014      	movs	r4, r2
10011ca6:	001d      	movs	r5, r3
10011ca8:	f002 fca6 	bl	100145f8 <__aeabi_dmul>
10011cac:	0002      	movs	r2, r0
10011cae:	000b      	movs	r3, r1
10011cb0:	0030      	movs	r0, r6
10011cb2:	0039      	movs	r1, r7
10011cb4:	f002 ff1a 	bl	10014aec <__aeabi_dsub>
10011cb8:	9a06      	ldr	r2, [sp, #24]
10011cba:	9b07      	ldr	r3, [sp, #28]
10011cbc:	0006      	movs	r6, r0
10011cbe:	000f      	movs	r7, r1
10011cc0:	0020      	movs	r0, r4
10011cc2:	0029      	movs	r1, r5
10011cc4:	f002 ff12 	bl	10014aec <__aeabi_dsub>
10011cc8:	0002      	movs	r2, r0
10011cca:	000b      	movs	r3, r1
10011ccc:	980a      	ldr	r0, [sp, #40]	; 0x28
10011cce:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011cd0:	f002 ff0c 	bl	10014aec <__aeabi_dsub>
10011cd4:	9a02      	ldr	r2, [sp, #8]
10011cd6:	9b03      	ldr	r3, [sp, #12]
10011cd8:	f002 fc8e 	bl	100145f8 <__aeabi_dmul>
10011cdc:	0002      	movs	r2, r0
10011cde:	000b      	movs	r3, r1
10011ce0:	0030      	movs	r0, r6
10011ce2:	0039      	movs	r1, r7
10011ce4:	f002 ff02 	bl	10014aec <__aeabi_dsub>
10011ce8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
10011cea:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
10011cec:	f002 fc84 	bl	100145f8 <__aeabi_dmul>
10011cf0:	9d04      	ldr	r5, [sp, #16]
10011cf2:	9e05      	ldr	r6, [sp, #20]
10011cf4:	9006      	str	r0, [sp, #24]
10011cf6:	9107      	str	r1, [sp, #28]
10011cf8:	002a      	movs	r2, r5
10011cfa:	0033      	movs	r3, r6
10011cfc:	0028      	movs	r0, r5
10011cfe:	0031      	movs	r1, r6
10011d00:	f002 fc7a 	bl	100145f8 <__aeabi_dmul>
10011d04:	0006      	movs	r6, r0
10011d06:	000f      	movs	r7, r1
10011d08:	4aa6      	ldr	r2, [pc, #664]	; (10011fa4 <__ieee754_pow+0x5d4>)
10011d0a:	4ba7      	ldr	r3, [pc, #668]	; (10011fa8 <__ieee754_pow+0x5d8>)
10011d0c:	f002 fc74 	bl	100145f8 <__aeabi_dmul>
10011d10:	4aa6      	ldr	r2, [pc, #664]	; (10011fac <__ieee754_pow+0x5dc>)
10011d12:	4ba7      	ldr	r3, [pc, #668]	; (10011fb0 <__ieee754_pow+0x5e0>)
10011d14:	f001 fd20 	bl	10013758 <__aeabi_dadd>
10011d18:	0032      	movs	r2, r6
10011d1a:	003b      	movs	r3, r7
10011d1c:	f002 fc6c 	bl	100145f8 <__aeabi_dmul>
10011d20:	4aa4      	ldr	r2, [pc, #656]	; (10011fb4 <__ieee754_pow+0x5e4>)
10011d22:	4ba5      	ldr	r3, [pc, #660]	; (10011fb8 <__ieee754_pow+0x5e8>)
10011d24:	f001 fd18 	bl	10013758 <__aeabi_dadd>
10011d28:	0032      	movs	r2, r6
10011d2a:	003b      	movs	r3, r7
10011d2c:	f002 fc64 	bl	100145f8 <__aeabi_dmul>
10011d30:	4aa2      	ldr	r2, [pc, #648]	; (10011fbc <__ieee754_pow+0x5ec>)
10011d32:	4ba3      	ldr	r3, [pc, #652]	; (10011fc0 <__ieee754_pow+0x5f0>)
10011d34:	f001 fd10 	bl	10013758 <__aeabi_dadd>
10011d38:	0032      	movs	r2, r6
10011d3a:	003b      	movs	r3, r7
10011d3c:	f002 fc5c 	bl	100145f8 <__aeabi_dmul>
10011d40:	4aa0      	ldr	r2, [pc, #640]	; (10011fc4 <__ieee754_pow+0x5f4>)
10011d42:	4ba1      	ldr	r3, [pc, #644]	; (10011fc8 <__ieee754_pow+0x5f8>)
10011d44:	f001 fd08 	bl	10013758 <__aeabi_dadd>
10011d48:	0032      	movs	r2, r6
10011d4a:	003b      	movs	r3, r7
10011d4c:	f002 fc54 	bl	100145f8 <__aeabi_dmul>
10011d50:	4a9e      	ldr	r2, [pc, #632]	; (10011fcc <__ieee754_pow+0x5fc>)
10011d52:	4b9f      	ldr	r3, [pc, #636]	; (10011fd0 <__ieee754_pow+0x600>)
10011d54:	f001 fd00 	bl	10013758 <__aeabi_dadd>
10011d58:	0032      	movs	r2, r6
10011d5a:	0004      	movs	r4, r0
10011d5c:	000d      	movs	r5, r1
10011d5e:	003b      	movs	r3, r7
10011d60:	0030      	movs	r0, r6
10011d62:	0039      	movs	r1, r7
10011d64:	f002 fc48 	bl	100145f8 <__aeabi_dmul>
10011d68:	0002      	movs	r2, r0
10011d6a:	000b      	movs	r3, r1
10011d6c:	0020      	movs	r0, r4
10011d6e:	0029      	movs	r1, r5
10011d70:	f002 fc42 	bl	100145f8 <__aeabi_dmul>
10011d74:	9e02      	ldr	r6, [sp, #8]
10011d76:	9f03      	ldr	r7, [sp, #12]
10011d78:	0004      	movs	r4, r0
10011d7a:	000d      	movs	r5, r1
10011d7c:	9804      	ldr	r0, [sp, #16]
10011d7e:	9905      	ldr	r1, [sp, #20]
10011d80:	0032      	movs	r2, r6
10011d82:	003b      	movs	r3, r7
10011d84:	f001 fce8 	bl	10013758 <__aeabi_dadd>
10011d88:	9a06      	ldr	r2, [sp, #24]
10011d8a:	9b07      	ldr	r3, [sp, #28]
10011d8c:	f002 fc34 	bl	100145f8 <__aeabi_dmul>
10011d90:	0022      	movs	r2, r4
10011d92:	002b      	movs	r3, r5
10011d94:	f001 fce0 	bl	10013758 <__aeabi_dadd>
10011d98:	0032      	movs	r2, r6
10011d9a:	900a      	str	r0, [sp, #40]	; 0x28
10011d9c:	910b      	str	r1, [sp, #44]	; 0x2c
10011d9e:	003b      	movs	r3, r7
10011da0:	0030      	movs	r0, r6
10011da2:	0039      	movs	r1, r7
10011da4:	9602      	str	r6, [sp, #8]
10011da6:	9703      	str	r7, [sp, #12]
10011da8:	f002 fc26 	bl	100145f8 <__aeabi_dmul>
10011dac:	2200      	movs	r2, #0
10011dae:	4b89      	ldr	r3, [pc, #548]	; (10011fd4 <__ieee754_pow+0x604>)
10011db0:	0004      	movs	r4, r0
10011db2:	000d      	movs	r5, r1
10011db4:	f001 fcd0 	bl	10013758 <__aeabi_dadd>
10011db8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
10011dba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
10011dbc:	f001 fccc 	bl	10013758 <__aeabi_dadd>
10011dc0:	2600      	movs	r6, #0
10011dc2:	000f      	movs	r7, r1
10011dc4:	0032      	movs	r2, r6
10011dc6:	000b      	movs	r3, r1
10011dc8:	9802      	ldr	r0, [sp, #8]
10011dca:	9903      	ldr	r1, [sp, #12]
10011dcc:	f002 fc14 	bl	100145f8 <__aeabi_dmul>
10011dd0:	2200      	movs	r2, #0
10011dd2:	9002      	str	r0, [sp, #8]
10011dd4:	9103      	str	r1, [sp, #12]
10011dd6:	4b7f      	ldr	r3, [pc, #508]	; (10011fd4 <__ieee754_pow+0x604>)
10011dd8:	0030      	movs	r0, r6
10011dda:	0039      	movs	r1, r7
10011ddc:	f002 fe86 	bl	10014aec <__aeabi_dsub>
10011de0:	0022      	movs	r2, r4
10011de2:	002b      	movs	r3, r5
10011de4:	f002 fe82 	bl	10014aec <__aeabi_dsub>
10011de8:	0002      	movs	r2, r0
10011dea:	000b      	movs	r3, r1
10011dec:	980a      	ldr	r0, [sp, #40]	; 0x28
10011dee:	990b      	ldr	r1, [sp, #44]	; 0x2c
10011df0:	f002 fe7c 	bl	10014aec <__aeabi_dsub>
10011df4:	9a04      	ldr	r2, [sp, #16]
10011df6:	9b05      	ldr	r3, [sp, #20]
10011df8:	f002 fbfe 	bl	100145f8 <__aeabi_dmul>
10011dfc:	0032      	movs	r2, r6
10011dfe:	0004      	movs	r4, r0
10011e00:	000d      	movs	r5, r1
10011e02:	9806      	ldr	r0, [sp, #24]
10011e04:	9907      	ldr	r1, [sp, #28]
10011e06:	003b      	movs	r3, r7
10011e08:	f002 fbf6 	bl	100145f8 <__aeabi_dmul>
10011e0c:	0002      	movs	r2, r0
10011e0e:	000b      	movs	r3, r1
10011e10:	0020      	movs	r0, r4
10011e12:	0029      	movs	r1, r5
10011e14:	f001 fca0 	bl	10013758 <__aeabi_dadd>
10011e18:	0004      	movs	r4, r0
10011e1a:	000d      	movs	r5, r1
10011e1c:	0002      	movs	r2, r0
10011e1e:	000b      	movs	r3, r1
10011e20:	9802      	ldr	r0, [sp, #8]
10011e22:	9903      	ldr	r1, [sp, #12]
10011e24:	f001 fc98 	bl	10013758 <__aeabi_dadd>
10011e28:	2600      	movs	r6, #0
10011e2a:	22e0      	movs	r2, #224	; 0xe0
10011e2c:	4b6a      	ldr	r3, [pc, #424]	; (10011fd8 <__ieee754_pow+0x608>)
10011e2e:	0612      	lsls	r2, r2, #24
10011e30:	0030      	movs	r0, r6
10011e32:	000f      	movs	r7, r1
10011e34:	f002 fbe0 	bl	100145f8 <__aeabi_dmul>
10011e38:	9a02      	ldr	r2, [sp, #8]
10011e3a:	9b03      	ldr	r3, [sp, #12]
10011e3c:	9004      	str	r0, [sp, #16]
10011e3e:	9105      	str	r1, [sp, #20]
10011e40:	0030      	movs	r0, r6
10011e42:	0039      	movs	r1, r7
10011e44:	f002 fe52 	bl	10014aec <__aeabi_dsub>
10011e48:	0002      	movs	r2, r0
10011e4a:	000b      	movs	r3, r1
10011e4c:	0020      	movs	r0, r4
10011e4e:	0029      	movs	r1, r5
10011e50:	f002 fe4c 	bl	10014aec <__aeabi_dsub>
10011e54:	4a61      	ldr	r2, [pc, #388]	; (10011fdc <__ieee754_pow+0x60c>)
10011e56:	4b60      	ldr	r3, [pc, #384]	; (10011fd8 <__ieee754_pow+0x608>)
10011e58:	f002 fbce 	bl	100145f8 <__aeabi_dmul>
10011e5c:	4a60      	ldr	r2, [pc, #384]	; (10011fe0 <__ieee754_pow+0x610>)
10011e5e:	0004      	movs	r4, r0
10011e60:	000d      	movs	r5, r1
10011e62:	4b60      	ldr	r3, [pc, #384]	; (10011fe4 <__ieee754_pow+0x614>)
10011e64:	0030      	movs	r0, r6
10011e66:	0039      	movs	r1, r7
10011e68:	f002 fbc6 	bl	100145f8 <__aeabi_dmul>
10011e6c:	0002      	movs	r2, r0
10011e6e:	000b      	movs	r3, r1
10011e70:	0020      	movs	r0, r4
10011e72:	0029      	movs	r1, r5
10011e74:	f001 fc70 	bl	10013758 <__aeabi_dadd>
10011e78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
10011e7a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
10011e7c:	f001 fc6c 	bl	10013758 <__aeabi_dadd>
10011e80:	0006      	movs	r6, r0
10011e82:	4648      	mov	r0, r9
10011e84:	000f      	movs	r7, r1
10011e86:	f003 f9db 	bl	10015240 <__aeabi_i2d>
10011e8a:	0004      	movs	r4, r0
10011e8c:	000d      	movs	r5, r1
10011e8e:	9804      	ldr	r0, [sp, #16]
10011e90:	9905      	ldr	r1, [sp, #20]
10011e92:	0032      	movs	r2, r6
10011e94:	003b      	movs	r3, r7
10011e96:	f001 fc5f 	bl	10013758 <__aeabi_dadd>
10011e9a:	9a08      	ldr	r2, [sp, #32]
10011e9c:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011e9e:	f001 fc5b 	bl	10013758 <__aeabi_dadd>
10011ea2:	0022      	movs	r2, r4
10011ea4:	002b      	movs	r3, r5
10011ea6:	f001 fc57 	bl	10013758 <__aeabi_dadd>
10011eaa:	2000      	movs	r0, #0
10011eac:	0022      	movs	r2, r4
10011eae:	002b      	movs	r3, r5
10011eb0:	9002      	str	r0, [sp, #8]
10011eb2:	9103      	str	r1, [sp, #12]
10011eb4:	f002 fe1a 	bl	10014aec <__aeabi_dsub>
10011eb8:	9a08      	ldr	r2, [sp, #32]
10011eba:	9b09      	ldr	r3, [sp, #36]	; 0x24
10011ebc:	f002 fe16 	bl	10014aec <__aeabi_dsub>
10011ec0:	9a04      	ldr	r2, [sp, #16]
10011ec2:	9b05      	ldr	r3, [sp, #20]
10011ec4:	f002 fe12 	bl	10014aec <__aeabi_dsub>
10011ec8:	0002      	movs	r2, r0
10011eca:	000b      	movs	r3, r1
10011ecc:	0030      	movs	r0, r6
10011ece:	0039      	movs	r1, r7
10011ed0:	f002 fe0c 	bl	10014aec <__aeabi_dsub>
10011ed4:	9004      	str	r0, [sp, #16]
10011ed6:	9105      	str	r1, [sp, #20]
10011ed8:	465b      	mov	r3, fp
10011eda:	4642      	mov	r2, r8
10011edc:	3b01      	subs	r3, #1
10011ede:	4313      	orrs	r3, r2
10011ee0:	d100      	bne.n	10011ee4 <__ieee754_pow+0x514>
10011ee2:	e197      	b.n	10012214 <__ieee754_pow+0x844>
10011ee4:	2300      	movs	r3, #0
10011ee6:	4c2b      	ldr	r4, [pc, #172]	; (10011f94 <__ieee754_pow+0x5c4>)
10011ee8:	9306      	str	r3, [sp, #24]
10011eea:	9407      	str	r4, [sp, #28]
10011eec:	9800      	ldr	r0, [sp, #0]
10011eee:	9901      	ldr	r1, [sp, #4]
10011ef0:	2600      	movs	r6, #0
10011ef2:	000b      	movs	r3, r1
10011ef4:	0032      	movs	r2, r6
10011ef6:	000f      	movs	r7, r1
10011ef8:	f002 fdf8 	bl	10014aec <__aeabi_dsub>
10011efc:	9a02      	ldr	r2, [sp, #8]
10011efe:	9b03      	ldr	r3, [sp, #12]
10011f00:	f002 fb7a 	bl	100145f8 <__aeabi_dmul>
10011f04:	9a00      	ldr	r2, [sp, #0]
10011f06:	9b01      	ldr	r3, [sp, #4]
10011f08:	0004      	movs	r4, r0
10011f0a:	000d      	movs	r5, r1
10011f0c:	9804      	ldr	r0, [sp, #16]
10011f0e:	9905      	ldr	r1, [sp, #20]
10011f10:	f002 fb72 	bl	100145f8 <__aeabi_dmul>
10011f14:	0002      	movs	r2, r0
10011f16:	000b      	movs	r3, r1
10011f18:	0020      	movs	r0, r4
10011f1a:	0029      	movs	r1, r5
10011f1c:	f001 fc1c 	bl	10013758 <__aeabi_dadd>
10011f20:	0004      	movs	r4, r0
10011f22:	000d      	movs	r5, r1
10011f24:	9802      	ldr	r0, [sp, #8]
10011f26:	9903      	ldr	r1, [sp, #12]
10011f28:	003b      	movs	r3, r7
10011f2a:	0032      	movs	r2, r6
10011f2c:	9404      	str	r4, [sp, #16]
10011f2e:	9505      	str	r5, [sp, #20]
10011f30:	f002 fb62 	bl	100145f8 <__aeabi_dmul>
10011f34:	9000      	str	r0, [sp, #0]
10011f36:	9101      	str	r1, [sp, #4]
10011f38:	000b      	movs	r3, r1
10011f3a:	0002      	movs	r2, r0
10011f3c:	0029      	movs	r1, r5
10011f3e:	0020      	movs	r0, r4
10011f40:	f001 fc0a 	bl	10013758 <__aeabi_dadd>
10011f44:	4b28      	ldr	r3, [pc, #160]	; (10011fe8 <__ieee754_pow+0x618>)
10011f46:	4681      	mov	r9, r0
10011f48:	1e0f      	subs	r7, r1, #0
10011f4a:	468a      	mov	sl, r1
10011f4c:	429f      	cmp	r7, r3
10011f4e:	dc00      	bgt.n	10011f52 <__ieee754_pow+0x582>
10011f50:	e13c      	b.n	100121cc <__ieee754_pow+0x7fc>
10011f52:	4b26      	ldr	r3, [pc, #152]	; (10011fec <__ieee754_pow+0x61c>)
10011f54:	18cb      	adds	r3, r1, r3
10011f56:	4303      	orrs	r3, r0
10011f58:	d000      	beq.n	10011f5c <__ieee754_pow+0x58c>
10011f5a:	e1db      	b.n	10012314 <__ieee754_pow+0x944>
10011f5c:	9804      	ldr	r0, [sp, #16]
10011f5e:	9905      	ldr	r1, [sp, #20]
10011f60:	4a23      	ldr	r2, [pc, #140]	; (10011ff0 <__ieee754_pow+0x620>)
10011f62:	4b24      	ldr	r3, [pc, #144]	; (10011ff4 <__ieee754_pow+0x624>)
10011f64:	f001 fbf8 	bl	10013758 <__aeabi_dadd>
10011f68:	9a00      	ldr	r2, [sp, #0]
10011f6a:	9b01      	ldr	r3, [sp, #4]
10011f6c:	0004      	movs	r4, r0
10011f6e:	000d      	movs	r5, r1
10011f70:	4648      	mov	r0, r9
10011f72:	0039      	movs	r1, r7
10011f74:	f002 fdba 	bl	10014aec <__aeabi_dsub>
10011f78:	0002      	movs	r2, r0
10011f7a:	000b      	movs	r3, r1
10011f7c:	0020      	movs	r0, r4
10011f7e:	0029      	movs	r1, r5
10011f80:	f000 fe2e 	bl	10012be0 <__aeabi_dcmpgt>
10011f84:	003e      	movs	r6, r7
10011f86:	e037      	b.n	10011ff8 <__ieee754_pow+0x628>
10011f88:	000fffff 	.word	0x000fffff
10011f8c:	43400000 	.word	0x43400000
10011f90:	fffffc01 	.word	0xfffffc01
10011f94:	3ff00000 	.word	0x3ff00000
10011f98:	0003988e 	.word	0x0003988e
10011f9c:	000bb679 	.word	0x000bb679
10011fa0:	fff00000 	.word	0xfff00000
10011fa4:	4a454eef 	.word	0x4a454eef
10011fa8:	3fca7e28 	.word	0x3fca7e28
10011fac:	93c9db65 	.word	0x93c9db65
10011fb0:	3fcd864a 	.word	0x3fcd864a
10011fb4:	a91d4101 	.word	0xa91d4101
10011fb8:	3fd17460 	.word	0x3fd17460
10011fbc:	518f264d 	.word	0x518f264d
10011fc0:	3fd55555 	.word	0x3fd55555
10011fc4:	db6fabff 	.word	0xdb6fabff
10011fc8:	3fdb6db6 	.word	0x3fdb6db6
10011fcc:	33333303 	.word	0x33333303
10011fd0:	3fe33333 	.word	0x3fe33333
10011fd4:	40080000 	.word	0x40080000
10011fd8:	3feec709 	.word	0x3feec709
10011fdc:	dc3a03fd 	.word	0xdc3a03fd
10011fe0:	145b01f5 	.word	0x145b01f5
10011fe4:	be3e2fe0 	.word	0xbe3e2fe0
10011fe8:	408fffff 	.word	0x408fffff
10011fec:	bf700000 	.word	0xbf700000
10011ff0:	652b82fe 	.word	0x652b82fe
10011ff4:	3c971547 	.word	0x3c971547
10011ff8:	2800      	cmp	r0, #0
10011ffa:	d000      	beq.n	10011ffe <__ieee754_pow+0x62e>
10011ffc:	e18a      	b.n	10012314 <__ieee754_pow+0x944>
10011ffe:	2280      	movs	r2, #128	; 0x80
10012000:	4be7      	ldr	r3, [pc, #924]	; (100123a0 <__ieee754_pow+0x9d0>)
10012002:	0352      	lsls	r2, r2, #13
10012004:	469c      	mov	ip, r3
10012006:	0013      	movs	r3, r2
10012008:	1536      	asrs	r6, r6, #20
1001200a:	4466      	add	r6, ip
1001200c:	4133      	asrs	r3, r6
1001200e:	49e5      	ldr	r1, [pc, #916]	; (100123a4 <__ieee754_pow+0x9d4>)
10012010:	19db      	adds	r3, r3, r7
10012012:	005e      	lsls	r6, r3, #1
10012014:	001c      	movs	r4, r3
10012016:	031b      	lsls	r3, r3, #12
10012018:	468c      	mov	ip, r1
1001201a:	0b1b      	lsrs	r3, r3, #12
1001201c:	4313      	orrs	r3, r2
1001201e:	2214      	movs	r2, #20
10012020:	0d76      	lsrs	r6, r6, #21
10012022:	4fe1      	ldr	r7, [pc, #900]	; (100123a8 <__ieee754_pow+0x9d8>)
10012024:	4466      	add	r6, ip
10012026:	4137      	asrs	r7, r6
10012028:	1b96      	subs	r6, r2, r6
1001202a:	4133      	asrs	r3, r6
1001202c:	4698      	mov	r8, r3
1001202e:	4653      	mov	r3, sl
10012030:	43bc      	bics	r4, r7
10012032:	2000      	movs	r0, #0
10012034:	0021      	movs	r1, r4
10012036:	2b00      	cmp	r3, #0
10012038:	da00      	bge.n	1001203c <__ieee754_pow+0x66c>
1001203a:	e1a9      	b.n	10012390 <__ieee754_pow+0x9c0>
1001203c:	0002      	movs	r2, r0
1001203e:	000b      	movs	r3, r1
10012040:	9800      	ldr	r0, [sp, #0]
10012042:	9901      	ldr	r1, [sp, #4]
10012044:	f002 fd52 	bl	10014aec <__aeabi_dsub>
10012048:	000b      	movs	r3, r1
1001204a:	9000      	str	r0, [sp, #0]
1001204c:	9101      	str	r1, [sp, #4]
1001204e:	0002      	movs	r2, r0
10012050:	9804      	ldr	r0, [sp, #16]
10012052:	9905      	ldr	r1, [sp, #20]
10012054:	f001 fb80 	bl	10013758 <__aeabi_dadd>
10012058:	4643      	mov	r3, r8
1001205a:	051b      	lsls	r3, r3, #20
1001205c:	4699      	mov	r9, r3
1001205e:	2000      	movs	r0, #0
10012060:	2200      	movs	r2, #0
10012062:	4bd2      	ldr	r3, [pc, #840]	; (100123ac <__ieee754_pow+0x9dc>)
10012064:	0006      	movs	r6, r0
10012066:	000f      	movs	r7, r1
10012068:	f002 fac6 	bl	100145f8 <__aeabi_dmul>
1001206c:	9a00      	ldr	r2, [sp, #0]
1001206e:	9b01      	ldr	r3, [sp, #4]
10012070:	9002      	str	r0, [sp, #8]
10012072:	9103      	str	r1, [sp, #12]
10012074:	0030      	movs	r0, r6
10012076:	0039      	movs	r1, r7
10012078:	f002 fd38 	bl	10014aec <__aeabi_dsub>
1001207c:	0002      	movs	r2, r0
1001207e:	000b      	movs	r3, r1
10012080:	9804      	ldr	r0, [sp, #16]
10012082:	9905      	ldr	r1, [sp, #20]
10012084:	f002 fd32 	bl	10014aec <__aeabi_dsub>
10012088:	4ac9      	ldr	r2, [pc, #804]	; (100123b0 <__ieee754_pow+0x9e0>)
1001208a:	4bca      	ldr	r3, [pc, #808]	; (100123b4 <__ieee754_pow+0x9e4>)
1001208c:	f002 fab4 	bl	100145f8 <__aeabi_dmul>
10012090:	4ac9      	ldr	r2, [pc, #804]	; (100123b8 <__ieee754_pow+0x9e8>)
10012092:	0004      	movs	r4, r0
10012094:	000d      	movs	r5, r1
10012096:	4bc9      	ldr	r3, [pc, #804]	; (100123bc <__ieee754_pow+0x9ec>)
10012098:	0030      	movs	r0, r6
1001209a:	0039      	movs	r1, r7
1001209c:	f002 faac 	bl	100145f8 <__aeabi_dmul>
100120a0:	0002      	movs	r2, r0
100120a2:	000b      	movs	r3, r1
100120a4:	0020      	movs	r0, r4
100120a6:	0029      	movs	r1, r5
100120a8:	f001 fb56 	bl	10013758 <__aeabi_dadd>
100120ac:	0004      	movs	r4, r0
100120ae:	000d      	movs	r5, r1
100120b0:	0002      	movs	r2, r0
100120b2:	000b      	movs	r3, r1
100120b4:	9802      	ldr	r0, [sp, #8]
100120b6:	9903      	ldr	r1, [sp, #12]
100120b8:	f001 fb4e 	bl	10013758 <__aeabi_dadd>
100120bc:	9a02      	ldr	r2, [sp, #8]
100120be:	9b03      	ldr	r3, [sp, #12]
100120c0:	0006      	movs	r6, r0
100120c2:	000f      	movs	r7, r1
100120c4:	f002 fd12 	bl	10014aec <__aeabi_dsub>
100120c8:	0002      	movs	r2, r0
100120ca:	000b      	movs	r3, r1
100120cc:	0020      	movs	r0, r4
100120ce:	0029      	movs	r1, r5
100120d0:	f002 fd0c 	bl	10014aec <__aeabi_dsub>
100120d4:	0032      	movs	r2, r6
100120d6:	9000      	str	r0, [sp, #0]
100120d8:	9101      	str	r1, [sp, #4]
100120da:	003b      	movs	r3, r7
100120dc:	0030      	movs	r0, r6
100120de:	0039      	movs	r1, r7
100120e0:	f002 fa8a 	bl	100145f8 <__aeabi_dmul>
100120e4:	0004      	movs	r4, r0
100120e6:	000d      	movs	r5, r1
100120e8:	4ab5      	ldr	r2, [pc, #724]	; (100123c0 <__ieee754_pow+0x9f0>)
100120ea:	4bb6      	ldr	r3, [pc, #728]	; (100123c4 <__ieee754_pow+0x9f4>)
100120ec:	f002 fa84 	bl	100145f8 <__aeabi_dmul>
100120f0:	4ab5      	ldr	r2, [pc, #724]	; (100123c8 <__ieee754_pow+0x9f8>)
100120f2:	4bb6      	ldr	r3, [pc, #728]	; (100123cc <__ieee754_pow+0x9fc>)
100120f4:	f002 fcfa 	bl	10014aec <__aeabi_dsub>
100120f8:	0022      	movs	r2, r4
100120fa:	002b      	movs	r3, r5
100120fc:	f002 fa7c 	bl	100145f8 <__aeabi_dmul>
10012100:	4ab3      	ldr	r2, [pc, #716]	; (100123d0 <__ieee754_pow+0xa00>)
10012102:	4bb4      	ldr	r3, [pc, #720]	; (100123d4 <__ieee754_pow+0xa04>)
10012104:	f001 fb28 	bl	10013758 <__aeabi_dadd>
10012108:	0022      	movs	r2, r4
1001210a:	002b      	movs	r3, r5
1001210c:	f002 fa74 	bl	100145f8 <__aeabi_dmul>
10012110:	4ab1      	ldr	r2, [pc, #708]	; (100123d8 <__ieee754_pow+0xa08>)
10012112:	4bb2      	ldr	r3, [pc, #712]	; (100123dc <__ieee754_pow+0xa0c>)
10012114:	f002 fcea 	bl	10014aec <__aeabi_dsub>
10012118:	0022      	movs	r2, r4
1001211a:	002b      	movs	r3, r5
1001211c:	f002 fa6c 	bl	100145f8 <__aeabi_dmul>
10012120:	4aaf      	ldr	r2, [pc, #700]	; (100123e0 <__ieee754_pow+0xa10>)
10012122:	4bb0      	ldr	r3, [pc, #704]	; (100123e4 <__ieee754_pow+0xa14>)
10012124:	f001 fb18 	bl	10013758 <__aeabi_dadd>
10012128:	0022      	movs	r2, r4
1001212a:	002b      	movs	r3, r5
1001212c:	f002 fa64 	bl	100145f8 <__aeabi_dmul>
10012130:	0002      	movs	r2, r0
10012132:	000b      	movs	r3, r1
10012134:	0030      	movs	r0, r6
10012136:	0039      	movs	r1, r7
10012138:	f002 fcd8 	bl	10014aec <__aeabi_dsub>
1001213c:	0004      	movs	r4, r0
1001213e:	000d      	movs	r5, r1
10012140:	0002      	movs	r2, r0
10012142:	000b      	movs	r3, r1
10012144:	0030      	movs	r0, r6
10012146:	0039      	movs	r1, r7
10012148:	f002 fa56 	bl	100145f8 <__aeabi_dmul>
1001214c:	2380      	movs	r3, #128	; 0x80
1001214e:	9002      	str	r0, [sp, #8]
10012150:	9103      	str	r1, [sp, #12]
10012152:	2200      	movs	r2, #0
10012154:	05db      	lsls	r3, r3, #23
10012156:	0020      	movs	r0, r4
10012158:	0029      	movs	r1, r5
1001215a:	f002 fcc7 	bl	10014aec <__aeabi_dsub>
1001215e:	0002      	movs	r2, r0
10012160:	000b      	movs	r3, r1
10012162:	9802      	ldr	r0, [sp, #8]
10012164:	9903      	ldr	r1, [sp, #12]
10012166:	f001 fe23 	bl	10013db0 <__aeabi_ddiv>
1001216a:	9a00      	ldr	r2, [sp, #0]
1001216c:	9b01      	ldr	r3, [sp, #4]
1001216e:	0004      	movs	r4, r0
10012170:	000d      	movs	r5, r1
10012172:	0030      	movs	r0, r6
10012174:	0039      	movs	r1, r7
10012176:	f002 fa3f 	bl	100145f8 <__aeabi_dmul>
1001217a:	9a00      	ldr	r2, [sp, #0]
1001217c:	9b01      	ldr	r3, [sp, #4]
1001217e:	f001 faeb 	bl	10013758 <__aeabi_dadd>
10012182:	0002      	movs	r2, r0
10012184:	000b      	movs	r3, r1
10012186:	0020      	movs	r0, r4
10012188:	0029      	movs	r1, r5
1001218a:	f002 fcaf 	bl	10014aec <__aeabi_dsub>
1001218e:	0032      	movs	r2, r6
10012190:	003b      	movs	r3, r7
10012192:	f002 fcab 	bl	10014aec <__aeabi_dsub>
10012196:	0002      	movs	r2, r0
10012198:	000b      	movs	r3, r1
1001219a:	2000      	movs	r0, #0
1001219c:	4992      	ldr	r1, [pc, #584]	; (100123e8 <__ieee754_pow+0xa18>)
1001219e:	f002 fca5 	bl	10014aec <__aeabi_dsub>
100121a2:	464b      	mov	r3, r9
100121a4:	185b      	adds	r3, r3, r1
100121a6:	151a      	asrs	r2, r3, #20
100121a8:	2a00      	cmp	r2, #0
100121aa:	dc00      	bgt.n	100121ae <__ieee754_pow+0x7de>
100121ac:	e0f4      	b.n	10012398 <__ieee754_pow+0x9c8>
100121ae:	0019      	movs	r1, r3
100121b0:	9a06      	ldr	r2, [sp, #24]
100121b2:	9b07      	ldr	r3, [sp, #28]
100121b4:	f002 fa20 	bl	100145f8 <__aeabi_dmul>
100121b8:	0006      	movs	r6, r0
100121ba:	e452      	b.n	10011a62 <__ieee754_pow+0x92>
100121bc:	0032      	movs	r2, r6
100121be:	0030      	movs	r0, r6
100121c0:	002b      	movs	r3, r5
100121c2:	0029      	movs	r1, r5
100121c4:	f002 fa18 	bl	100145f8 <__aeabi_dmul>
100121c8:	0006      	movs	r6, r0
100121ca:	e44a      	b.n	10011a62 <__ieee754_pow+0x92>
100121cc:	4b87      	ldr	r3, [pc, #540]	; (100123ec <__ieee754_pow+0xa1c>)
100121ce:	004e      	lsls	r6, r1, #1
100121d0:	0876      	lsrs	r6, r6, #1
100121d2:	429e      	cmp	r6, r3
100121d4:	dc00      	bgt.n	100121d8 <__ieee754_pow+0x808>
100121d6:	e0bf      	b.n	10012358 <__ieee754_pow+0x988>
100121d8:	4b85      	ldr	r3, [pc, #532]	; (100123f0 <__ieee754_pow+0xa20>)
100121da:	18cb      	adds	r3, r1, r3
100121dc:	4303      	orrs	r3, r0
100121de:	d10c      	bne.n	100121fa <__ieee754_pow+0x82a>
100121e0:	9a00      	ldr	r2, [sp, #0]
100121e2:	9b01      	ldr	r3, [sp, #4]
100121e4:	f002 fc82 	bl	10014aec <__aeabi_dsub>
100121e8:	0002      	movs	r2, r0
100121ea:	000b      	movs	r3, r1
100121ec:	9804      	ldr	r0, [sp, #16]
100121ee:	9905      	ldr	r1, [sp, #20]
100121f0:	f000 fcec 	bl	10012bcc <__aeabi_dcmple>
100121f4:	2800      	cmp	r0, #0
100121f6:	d100      	bne.n	100121fa <__ieee754_pow+0x82a>
100121f8:	e701      	b.n	10011ffe <__ieee754_pow+0x62e>
100121fa:	9806      	ldr	r0, [sp, #24]
100121fc:	9907      	ldr	r1, [sp, #28]
100121fe:	4a7d      	ldr	r2, [pc, #500]	; (100123f4 <__ieee754_pow+0xa24>)
10012200:	4b7d      	ldr	r3, [pc, #500]	; (100123f8 <__ieee754_pow+0xa28>)
10012202:	f002 f9f9 	bl	100145f8 <__aeabi_dmul>
10012206:	4a7b      	ldr	r2, [pc, #492]	; (100123f4 <__ieee754_pow+0xa24>)
10012208:	4b7b      	ldr	r3, [pc, #492]	; (100123f8 <__ieee754_pow+0xa28>)
1001220a:	f002 f9f5 	bl	100145f8 <__aeabi_dmul>
1001220e:	0006      	movs	r6, r0
10012210:	f7ff fc27 	bl	10011a62 <__ieee754_pow+0x92>
10012214:	2300      	movs	r3, #0
10012216:	4c79      	ldr	r4, [pc, #484]	; (100123fc <__ieee754_pow+0xa2c>)
10012218:	9306      	str	r3, [sp, #24]
1001221a:	9407      	str	r4, [sp, #28]
1001221c:	e666      	b.n	10011eec <__ieee754_pow+0x51c>
1001221e:	4653      	mov	r3, sl
10012220:	2b00      	cmp	r3, #0
10012222:	db00      	blt.n	10012226 <__ieee754_pow+0x856>
10012224:	e4c3      	b.n	10011bae <__ieee754_pow+0x1de>
10012226:	9b00      	ldr	r3, [sp, #0]
10012228:	9c01      	ldr	r4, [sp, #4]
1001222a:	2280      	movs	r2, #128	; 0x80
1001222c:	0612      	lsls	r2, r2, #24
1001222e:	001e      	movs	r6, r3
10012230:	4694      	mov	ip, r2
10012232:	0023      	movs	r3, r4
10012234:	4463      	add	r3, ip
10012236:	0019      	movs	r1, r3
10012238:	f7ff fc13 	bl	10011a62 <__ieee754_pow+0x92>
1001223c:	0002      	movs	r2, r0
1001223e:	000b      	movs	r3, r1
10012240:	2000      	movs	r0, #0
10012242:	4969      	ldr	r1, [pc, #420]	; (100123e8 <__ieee754_pow+0xa18>)
10012244:	f001 fdb4 	bl	10013db0 <__aeabi_ddiv>
10012248:	e44a      	b.n	10011ae0 <__ieee754_pow+0x110>
1001224a:	4b6d      	ldr	r3, [pc, #436]	; (10012400 <__ieee754_pow+0xa30>)
1001224c:	429c      	cmp	r4, r3
1001224e:	dc00      	bgt.n	10012252 <__ieee754_pow+0x882>
10012250:	e4aa      	b.n	10011ba8 <__ieee754_pow+0x1d8>
10012252:	4b65      	ldr	r3, [pc, #404]	; (100123e8 <__ieee754_pow+0xa18>)
10012254:	429c      	cmp	r4, r3
10012256:	dd01      	ble.n	1001225c <__ieee754_pow+0x88c>
10012258:	f7ff fc2c 	bl	10011ab4 <__ieee754_pow+0xe4>
1001225c:	2200      	movs	r2, #0
1001225e:	4b62      	ldr	r3, [pc, #392]	; (100123e8 <__ieee754_pow+0xa18>)
10012260:	f002 fc44 	bl	10014aec <__aeabi_dsub>
10012264:	22c0      	movs	r2, #192	; 0xc0
10012266:	4b67      	ldr	r3, [pc, #412]	; (10012404 <__ieee754_pow+0xa34>)
10012268:	05d2      	lsls	r2, r2, #23
1001226a:	0004      	movs	r4, r0
1001226c:	000d      	movs	r5, r1
1001226e:	f002 f9c3 	bl	100145f8 <__aeabi_dmul>
10012272:	4a65      	ldr	r2, [pc, #404]	; (10012408 <__ieee754_pow+0xa38>)
10012274:	0006      	movs	r6, r0
10012276:	000f      	movs	r7, r1
10012278:	4b64      	ldr	r3, [pc, #400]	; (1001240c <__ieee754_pow+0xa3c>)
1001227a:	0020      	movs	r0, r4
1001227c:	0029      	movs	r1, r5
1001227e:	f002 f9bb 	bl	100145f8 <__aeabi_dmul>
10012282:	2200      	movs	r2, #0
10012284:	9002      	str	r0, [sp, #8]
10012286:	9103      	str	r1, [sp, #12]
10012288:	4b61      	ldr	r3, [pc, #388]	; (10012410 <__ieee754_pow+0xa40>)
1001228a:	0020      	movs	r0, r4
1001228c:	0029      	movs	r1, r5
1001228e:	f002 f9b3 	bl	100145f8 <__aeabi_dmul>
10012292:	0002      	movs	r2, r0
10012294:	000b      	movs	r3, r1
10012296:	485f      	ldr	r0, [pc, #380]	; (10012414 <__ieee754_pow+0xa44>)
10012298:	495f      	ldr	r1, [pc, #380]	; (10012418 <__ieee754_pow+0xa48>)
1001229a:	f002 fc27 	bl	10014aec <__aeabi_dsub>
1001229e:	0022      	movs	r2, r4
100122a0:	002b      	movs	r3, r5
100122a2:	f002 f9a9 	bl	100145f8 <__aeabi_dmul>
100122a6:	0002      	movs	r2, r0
100122a8:	000b      	movs	r3, r1
100122aa:	2000      	movs	r0, #0
100122ac:	495b      	ldr	r1, [pc, #364]	; (1001241c <__ieee754_pow+0xa4c>)
100122ae:	f002 fc1d 	bl	10014aec <__aeabi_dsub>
100122b2:	0022      	movs	r2, r4
100122b4:	9004      	str	r0, [sp, #16]
100122b6:	9105      	str	r1, [sp, #20]
100122b8:	002b      	movs	r3, r5
100122ba:	0020      	movs	r0, r4
100122bc:	0029      	movs	r1, r5
100122be:	f002 f99b 	bl	100145f8 <__aeabi_dmul>
100122c2:	0002      	movs	r2, r0
100122c4:	000b      	movs	r3, r1
100122c6:	9804      	ldr	r0, [sp, #16]
100122c8:	9905      	ldr	r1, [sp, #20]
100122ca:	f002 f995 	bl	100145f8 <__aeabi_dmul>
100122ce:	4a54      	ldr	r2, [pc, #336]	; (10012420 <__ieee754_pow+0xa50>)
100122d0:	4b4c      	ldr	r3, [pc, #304]	; (10012404 <__ieee754_pow+0xa34>)
100122d2:	f002 f991 	bl	100145f8 <__aeabi_dmul>
100122d6:	0002      	movs	r2, r0
100122d8:	000b      	movs	r3, r1
100122da:	9802      	ldr	r0, [sp, #8]
100122dc:	9903      	ldr	r1, [sp, #12]
100122de:	f002 fc05 	bl	10014aec <__aeabi_dsub>
100122e2:	0002      	movs	r2, r0
100122e4:	000b      	movs	r3, r1
100122e6:	0004      	movs	r4, r0
100122e8:	000d      	movs	r5, r1
100122ea:	0030      	movs	r0, r6
100122ec:	0039      	movs	r1, r7
100122ee:	f001 fa33 	bl	10013758 <__aeabi_dadd>
100122f2:	2200      	movs	r2, #0
100122f4:	0010      	movs	r0, r2
100122f6:	003b      	movs	r3, r7
100122f8:	0032      	movs	r2, r6
100122fa:	9002      	str	r0, [sp, #8]
100122fc:	9103      	str	r1, [sp, #12]
100122fe:	f002 fbf5 	bl	10014aec <__aeabi_dsub>
10012302:	0002      	movs	r2, r0
10012304:	000b      	movs	r3, r1
10012306:	0020      	movs	r0, r4
10012308:	0029      	movs	r1, r5
1001230a:	f002 fbef 	bl	10014aec <__aeabi_dsub>
1001230e:	9004      	str	r0, [sp, #16]
10012310:	9105      	str	r1, [sp, #20]
10012312:	e5e1      	b.n	10011ed8 <__ieee754_pow+0x508>
10012314:	4a43      	ldr	r2, [pc, #268]	; (10012424 <__ieee754_pow+0xa54>)
10012316:	4b44      	ldr	r3, [pc, #272]	; (10012428 <__ieee754_pow+0xa58>)
10012318:	9806      	ldr	r0, [sp, #24]
1001231a:	9907      	ldr	r1, [sp, #28]
1001231c:	f002 f96c 	bl	100145f8 <__aeabi_dmul>
10012320:	4a40      	ldr	r2, [pc, #256]	; (10012424 <__ieee754_pow+0xa54>)
10012322:	4b41      	ldr	r3, [pc, #260]	; (10012428 <__ieee754_pow+0xa58>)
10012324:	f002 f968 	bl	100145f8 <__aeabi_dmul>
10012328:	0006      	movs	r6, r0
1001232a:	f7ff fb9a 	bl	10011a62 <__ieee754_pow+0x92>
1001232e:	2a00      	cmp	r2, #0
10012330:	d001      	beq.n	10012336 <__ieee754_pow+0x966>
10012332:	f7ff fba5 	bl	10011a80 <__ieee754_pow+0xb0>
10012336:	3214      	adds	r2, #20
10012338:	1ad3      	subs	r3, r2, r3
1001233a:	003a      	movs	r2, r7
1001233c:	411a      	asrs	r2, r3
1001233e:	0011      	movs	r1, r2
10012340:	4099      	lsls	r1, r3
10012342:	428f      	cmp	r7, r1
10012344:	d001      	beq.n	1001234a <__ieee754_pow+0x97a>
10012346:	f7ff fb6f 	bl	10011a28 <__ieee754_pow+0x58>
1001234a:	2301      	movs	r3, #1
1001234c:	4013      	ands	r3, r2
1001234e:	2202      	movs	r2, #2
10012350:	1ad3      	subs	r3, r2, r3
10012352:	469b      	mov	fp, r3
10012354:	f7ff fb68 	bl	10011a28 <__ieee754_pow+0x58>
10012358:	4b30      	ldr	r3, [pc, #192]	; (1001241c <__ieee754_pow+0xa4c>)
1001235a:	429e      	cmp	r6, r3
1001235c:	dd00      	ble.n	10012360 <__ieee754_pow+0x990>
1001235e:	e64e      	b.n	10011ffe <__ieee754_pow+0x62e>
10012360:	2300      	movs	r3, #0
10012362:	4699      	mov	r9, r3
10012364:	4698      	mov	r8, r3
10012366:	e67a      	b.n	1001205e <__ieee754_pow+0x68e>
10012368:	0002      	movs	r2, r0
1001236a:	000b      	movs	r3, r1
1001236c:	f7ff fc14 	bl	10011b98 <__ieee754_pow+0x1c8>
10012370:	2380      	movs	r3, #128	; 0x80
10012372:	4c2e      	ldr	r4, [pc, #184]	; (1001242c <__ieee754_pow+0xa5c>)
10012374:	05db      	lsls	r3, r3, #23
10012376:	9308      	str	r3, [sp, #32]
10012378:	9409      	str	r4, [sp, #36]	; 0x24
1001237a:	4b2d      	ldr	r3, [pc, #180]	; (10012430 <__ieee754_pow+0xa60>)
1001237c:	4c2d      	ldr	r4, [pc, #180]	; (10012434 <__ieee754_pow+0xa64>)
1001237e:	2200      	movs	r2, #0
10012380:	930c      	str	r3, [sp, #48]	; 0x30
10012382:	940d      	str	r4, [sp, #52]	; 0x34
10012384:	2480      	movs	r4, #128	; 0x80
10012386:	4b2c      	ldr	r3, [pc, #176]	; (10012438 <__ieee754_pow+0xa68>)
10012388:	02e4      	lsls	r4, r4, #11
1001238a:	9206      	str	r2, [sp, #24]
1001238c:	9307      	str	r3, [sp, #28]
1001238e:	e456      	b.n	10011c3e <__ieee754_pow+0x26e>
10012390:	4643      	mov	r3, r8
10012392:	425b      	negs	r3, r3
10012394:	4698      	mov	r8, r3
10012396:	e651      	b.n	1001203c <__ieee754_pow+0x66c>
10012398:	4642      	mov	r2, r8
1001239a:	f000 f9fd 	bl	10012798 <scalbn>
1001239e:	e707      	b.n	100121b0 <__ieee754_pow+0x7e0>
100123a0:	fffffc02 	.word	0xfffffc02
100123a4:	fffffc01 	.word	0xfffffc01
100123a8:	000fffff 	.word	0x000fffff
100123ac:	3fe62e43 	.word	0x3fe62e43
100123b0:	fefa39ef 	.word	0xfefa39ef
100123b4:	3fe62e42 	.word	0x3fe62e42
100123b8:	0ca86c39 	.word	0x0ca86c39
100123bc:	be205c61 	.word	0xbe205c61
100123c0:	72bea4d0 	.word	0x72bea4d0
100123c4:	3e663769 	.word	0x3e663769
100123c8:	c5d26bf1 	.word	0xc5d26bf1
100123cc:	3ebbbd41 	.word	0x3ebbbd41
100123d0:	af25de2c 	.word	0xaf25de2c
100123d4:	3f11566a 	.word	0x3f11566a
100123d8:	16bebd93 	.word	0x16bebd93
100123dc:	3f66c16c 	.word	0x3f66c16c
100123e0:	5555553e 	.word	0x5555553e
100123e4:	3fc55555 	.word	0x3fc55555
100123e8:	3ff00000 	.word	0x3ff00000
100123ec:	4090cbff 	.word	0x4090cbff
100123f0:	3f6f3400 	.word	0x3f6f3400
100123f4:	c2f8f359 	.word	0xc2f8f359
100123f8:	01a56e1f 	.word	0x01a56e1f
100123fc:	bff00000 	.word	0xbff00000
10012400:	3feffffe 	.word	0x3feffffe
10012404:	3ff71547 	.word	0x3ff71547
10012408:	f85ddf44 	.word	0xf85ddf44
1001240c:	3e54ae0b 	.word	0x3e54ae0b
10012410:	3fd00000 	.word	0x3fd00000
10012414:	55555555 	.word	0x55555555
10012418:	3fd55555 	.word	0x3fd55555
1001241c:	3fe00000 	.word	0x3fe00000
10012420:	652b82fe 	.word	0x652b82fe
10012424:	8800759c 	.word	0x8800759c
10012428:	7e37e43c 	.word	0x7e37e43c
1001242c:	3fe2b803 	.word	0x3fe2b803
10012430:	43cfd006 	.word	0x43cfd006
10012434:	3e4cfdeb 	.word	0x3e4cfdeb
10012438:	3ff80000 	.word	0x3ff80000

1001243c <__ieee754_sqrt>:
1001243c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001243e:	4656      	mov	r6, sl
10012440:	464d      	mov	r5, r9
10012442:	4644      	mov	r4, r8
10012444:	465f      	mov	r7, fp
10012446:	4b75      	ldr	r3, [pc, #468]	; (1001261c <__ieee754_sqrt+0x1e0>)
10012448:	b4f0      	push	{r4, r5, r6, r7}
1001244a:	000a      	movs	r2, r1
1001244c:	000d      	movs	r5, r1
1001244e:	0019      	movs	r1, r3
10012450:	b083      	sub	sp, #12
10012452:	0006      	movs	r6, r0
10012454:	0004      	movs	r4, r0
10012456:	4029      	ands	r1, r5
10012458:	4299      	cmp	r1, r3
1001245a:	d100      	bne.n	1001245e <__ieee754_sqrt+0x22>
1001245c:	e0ba      	b.n	100125d4 <__ieee754_sqrt+0x198>
1001245e:	2d00      	cmp	r5, #0
10012460:	dc00      	bgt.n	10012464 <__ieee754_sqrt+0x28>
10012462:	e094      	b.n	1001258e <__ieee754_sqrt+0x152>
10012464:	152d      	asrs	r5, r5, #20
10012466:	d100      	bne.n	1001246a <__ieee754_sqrt+0x2e>
10012468:	e0a3      	b.n	100125b2 <__ieee754_sqrt+0x176>
1001246a:	4b6d      	ldr	r3, [pc, #436]	; (10012620 <__ieee754_sqrt+0x1e4>)
1001246c:	0312      	lsls	r2, r2, #12
1001246e:	469c      	mov	ip, r3
10012470:	2380      	movs	r3, #128	; 0x80
10012472:	0b12      	lsrs	r2, r2, #12
10012474:	035b      	lsls	r3, r3, #13
10012476:	4465      	add	r5, ip
10012478:	431a      	orrs	r2, r3
1001247a:	07eb      	lsls	r3, r5, #31
1001247c:	d500      	bpl.n	10012480 <__ieee754_sqrt+0x44>
1001247e:	e081      	b.n	10012584 <__ieee754_sqrt+0x148>
10012480:	106b      	asrs	r3, r5, #1
10012482:	4698      	mov	r8, r3
10012484:	0fe3      	lsrs	r3, r4, #31
10012486:	189b      	adds	r3, r3, r2
10012488:	189b      	adds	r3, r3, r2
1001248a:	2280      	movs	r2, #128	; 0x80
1001248c:	2116      	movs	r1, #22
1001248e:	2600      	movs	r6, #0
10012490:	2700      	movs	r7, #0
10012492:	0064      	lsls	r4, r4, #1
10012494:	0392      	lsls	r2, r2, #14
10012496:	18b8      	adds	r0, r7, r2
10012498:	4298      	cmp	r0, r3
1001249a:	dc02      	bgt.n	100124a2 <__ieee754_sqrt+0x66>
1001249c:	1887      	adds	r7, r0, r2
1001249e:	1a1b      	subs	r3, r3, r0
100124a0:	18b6      	adds	r6, r6, r2
100124a2:	0fe0      	lsrs	r0, r4, #31
100124a4:	005b      	lsls	r3, r3, #1
100124a6:	3901      	subs	r1, #1
100124a8:	181b      	adds	r3, r3, r0
100124aa:	0064      	lsls	r4, r4, #1
100124ac:	0852      	lsrs	r2, r2, #1
100124ae:	2900      	cmp	r1, #0
100124b0:	d1f1      	bne.n	10012496 <__ieee754_sqrt+0x5a>
100124b2:	2200      	movs	r2, #0
100124b4:	9201      	str	r2, [sp, #4]
100124b6:	4694      	mov	ip, r2
100124b8:	2280      	movs	r2, #128	; 0x80
100124ba:	0612      	lsls	r2, r2, #24
100124bc:	2020      	movs	r0, #32
100124be:	4691      	mov	r9, r2
100124c0:	e009      	b.n	100124d6 <__ieee754_sqrt+0x9a>
100124c2:	429f      	cmp	r7, r3
100124c4:	d041      	beq.n	1001254a <__ieee754_sqrt+0x10e>
100124c6:	0fe1      	lsrs	r1, r4, #31
100124c8:	18c9      	adds	r1, r1, r3
100124ca:	3801      	subs	r0, #1
100124cc:	18cb      	adds	r3, r1, r3
100124ce:	0064      	lsls	r4, r4, #1
100124d0:	0852      	lsrs	r2, r2, #1
100124d2:	2800      	cmp	r0, #0
100124d4:	d01e      	beq.n	10012514 <__ieee754_sqrt+0xd8>
100124d6:	4661      	mov	r1, ip
100124d8:	1851      	adds	r1, r2, r1
100124da:	429f      	cmp	r7, r3
100124dc:	daf1      	bge.n	100124c2 <__ieee754_sqrt+0x86>
100124de:	188d      	adds	r5, r1, r2
100124e0:	46ac      	mov	ip, r5
100124e2:	0fcd      	lsrs	r5, r1, #31
100124e4:	07ed      	lsls	r5, r5, #31
100124e6:	46ba      	mov	sl, r7
100124e8:	454d      	cmp	r5, r9
100124ea:	d039      	beq.n	10012560 <__ieee754_sqrt+0x124>
100124ec:	1bdb      	subs	r3, r3, r7
100124ee:	428c      	cmp	r4, r1
100124f0:	41bf      	sbcs	r7, r7
100124f2:	427f      	negs	r7, r7
100124f4:	1bdb      	subs	r3, r3, r7
100124f6:	1a64      	subs	r4, r4, r1
100124f8:	9901      	ldr	r1, [sp, #4]
100124fa:	3801      	subs	r0, #1
100124fc:	468b      	mov	fp, r1
100124fe:	4493      	add	fp, r2
10012500:	4659      	mov	r1, fp
10012502:	9101      	str	r1, [sp, #4]
10012504:	0fe1      	lsrs	r1, r4, #31
10012506:	18c9      	adds	r1, r1, r3
10012508:	4657      	mov	r7, sl
1001250a:	18cb      	adds	r3, r1, r3
1001250c:	0064      	lsls	r4, r4, #1
1001250e:	0852      	lsrs	r2, r2, #1
10012510:	2800      	cmp	r0, #0
10012512:	d1e0      	bne.n	100124d6 <__ieee754_sqrt+0x9a>
10012514:	4323      	orrs	r3, r4
10012516:	d12b      	bne.n	10012570 <__ieee754_sqrt+0x134>
10012518:	9b01      	ldr	r3, [sp, #4]
1001251a:	085b      	lsrs	r3, r3, #1
1001251c:	4941      	ldr	r1, [pc, #260]	; (10012624 <__ieee754_sqrt+0x1e8>)
1001251e:	1072      	asrs	r2, r6, #1
10012520:	468c      	mov	ip, r1
10012522:	4462      	add	r2, ip
10012524:	07f1      	lsls	r1, r6, #31
10012526:	d502      	bpl.n	1001252e <__ieee754_sqrt+0xf2>
10012528:	2180      	movs	r1, #128	; 0x80
1001252a:	0609      	lsls	r1, r1, #24
1001252c:	430b      	orrs	r3, r1
1001252e:	4641      	mov	r1, r8
10012530:	0509      	lsls	r1, r1, #20
10012532:	188d      	adds	r5, r1, r2
10012534:	001e      	movs	r6, r3
10012536:	002f      	movs	r7, r5
10012538:	0030      	movs	r0, r6
1001253a:	0039      	movs	r1, r7
1001253c:	b003      	add	sp, #12
1001253e:	bc3c      	pop	{r2, r3, r4, r5}
10012540:	4690      	mov	r8, r2
10012542:	4699      	mov	r9, r3
10012544:	46a2      	mov	sl, r4
10012546:	46ab      	mov	fp, r5
10012548:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001254a:	42a1      	cmp	r1, r4
1001254c:	d80e      	bhi.n	1001256c <__ieee754_sqrt+0x130>
1001254e:	188d      	adds	r5, r1, r2
10012550:	46ac      	mov	ip, r5
10012552:	0fcd      	lsrs	r5, r1, #31
10012554:	07ed      	lsls	r5, r5, #31
10012556:	454d      	cmp	r5, r9
10012558:	d048      	beq.n	100125ec <__ieee754_sqrt+0x1b0>
1001255a:	469a      	mov	sl, r3
1001255c:	2300      	movs	r3, #0
1001255e:	e7ca      	b.n	100124f6 <__ieee754_sqrt+0xba>
10012560:	4665      	mov	r5, ip
10012562:	2d00      	cmp	r5, #0
10012564:	dbc2      	blt.n	100124ec <__ieee754_sqrt+0xb0>
10012566:	1c7d      	adds	r5, r7, #1
10012568:	46aa      	mov	sl, r5
1001256a:	e7bf      	b.n	100124ec <__ieee754_sqrt+0xb0>
1001256c:	003b      	movs	r3, r7
1001256e:	e7aa      	b.n	100124c6 <__ieee754_sqrt+0x8a>
10012570:	9b01      	ldr	r3, [sp, #4]
10012572:	3301      	adds	r3, #1
10012574:	d03e      	beq.n	100125f4 <__ieee754_sqrt+0x1b8>
10012576:	9a01      	ldr	r2, [sp, #4]
10012578:	2301      	movs	r3, #1
1001257a:	4694      	mov	ip, r2
1001257c:	4013      	ands	r3, r2
1001257e:	4463      	add	r3, ip
10012580:	085b      	lsrs	r3, r3, #1
10012582:	e7cb      	b.n	1001251c <__ieee754_sqrt+0xe0>
10012584:	0fe3      	lsrs	r3, r4, #31
10012586:	0052      	lsls	r2, r2, #1
10012588:	189a      	adds	r2, r3, r2
1001258a:	0064      	lsls	r4, r4, #1
1001258c:	e778      	b.n	10012480 <__ieee754_sqrt+0x44>
1001258e:	006b      	lsls	r3, r5, #1
10012590:	085b      	lsrs	r3, r3, #1
10012592:	4303      	orrs	r3, r0
10012594:	002f      	movs	r7, r5
10012596:	2b00      	cmp	r3, #0
10012598:	d0ce      	beq.n	10012538 <__ieee754_sqrt+0xfc>
1001259a:	2500      	movs	r5, #0
1001259c:	2a00      	cmp	r2, #0
1001259e:	d131      	bne.n	10012604 <__ieee754_sqrt+0x1c8>
100125a0:	0ae2      	lsrs	r2, r4, #11
100125a2:	3d15      	subs	r5, #21
100125a4:	0564      	lsls	r4, r4, #21
100125a6:	2a00      	cmp	r2, #0
100125a8:	d0fa      	beq.n	100125a0 <__ieee754_sqrt+0x164>
100125aa:	2380      	movs	r3, #128	; 0x80
100125ac:	035b      	lsls	r3, r3, #13
100125ae:	421a      	tst	r2, r3
100125b0:	d123      	bne.n	100125fa <__ieee754_sqrt+0x1be>
100125b2:	2080      	movs	r0, #128	; 0x80
100125b4:	2300      	movs	r3, #0
100125b6:	0340      	lsls	r0, r0, #13
100125b8:	e000      	b.n	100125bc <__ieee754_sqrt+0x180>
100125ba:	000b      	movs	r3, r1
100125bc:	0052      	lsls	r2, r2, #1
100125be:	1c59      	adds	r1, r3, #1
100125c0:	4202      	tst	r2, r0
100125c2:	d0fa      	beq.n	100125ba <__ieee754_sqrt+0x17e>
100125c4:	2020      	movs	r0, #32
100125c6:	1a40      	subs	r0, r0, r1
100125c8:	1aed      	subs	r5, r5, r3
100125ca:	0023      	movs	r3, r4
100125cc:	40c3      	lsrs	r3, r0
100125ce:	408c      	lsls	r4, r1
100125d0:	431a      	orrs	r2, r3
100125d2:	e74a      	b.n	1001246a <__ieee754_sqrt+0x2e>
100125d4:	0002      	movs	r2, r0
100125d6:	002b      	movs	r3, r5
100125d8:	0029      	movs	r1, r5
100125da:	f002 f80d 	bl	100145f8 <__aeabi_dmul>
100125de:	0032      	movs	r2, r6
100125e0:	002b      	movs	r3, r5
100125e2:	f001 f8b9 	bl	10013758 <__aeabi_dadd>
100125e6:	0006      	movs	r6, r0
100125e8:	000f      	movs	r7, r1
100125ea:	e7a5      	b.n	10012538 <__ieee754_sqrt+0xfc>
100125ec:	4665      	mov	r5, ip
100125ee:	2d00      	cmp	r5, #0
100125f0:	dab9      	bge.n	10012566 <__ieee754_sqrt+0x12a>
100125f2:	e7b2      	b.n	1001255a <__ieee754_sqrt+0x11e>
100125f4:	3601      	adds	r6, #1
100125f6:	2300      	movs	r3, #0
100125f8:	e790      	b.n	1001251c <__ieee754_sqrt+0xe0>
100125fa:	2301      	movs	r3, #1
100125fc:	2020      	movs	r0, #32
100125fe:	425b      	negs	r3, r3
10012600:	2100      	movs	r1, #0
10012602:	e7e1      	b.n	100125c8 <__ieee754_sqrt+0x18c>
10012604:	003b      	movs	r3, r7
10012606:	0002      	movs	r2, r0
10012608:	0039      	movs	r1, r7
1001260a:	f002 fa6f 	bl	10014aec <__aeabi_dsub>
1001260e:	0002      	movs	r2, r0
10012610:	000b      	movs	r3, r1
10012612:	f001 fbcd 	bl	10013db0 <__aeabi_ddiv>
10012616:	0006      	movs	r6, r0
10012618:	000f      	movs	r7, r1
1001261a:	e78d      	b.n	10012538 <__ieee754_sqrt+0xfc>
1001261c:	7ff00000 	.word	0x7ff00000
10012620:	fffffc01 	.word	0xfffffc01
10012624:	3fe00000 	.word	0x3fe00000

10012628 <fabs>:
10012628:	0049      	lsls	r1, r1, #1
1001262a:	084b      	lsrs	r3, r1, #1
1001262c:	0019      	movs	r1, r3
1001262e:	4770      	bx	lr

10012630 <finite>:
10012630:	4b03      	ldr	r3, [pc, #12]	; (10012640 <finite+0x10>)
10012632:	0048      	lsls	r0, r1, #1
10012634:	469c      	mov	ip, r3
10012636:	0840      	lsrs	r0, r0, #1
10012638:	4460      	add	r0, ip
1001263a:	0fc0      	lsrs	r0, r0, #31
1001263c:	4770      	bx	lr
1001263e:	46c0      	nop			; (mov r8, r8)
10012640:	80100000 	.word	0x80100000

10012644 <matherr>:
10012644:	2000      	movs	r0, #0
10012646:	4770      	bx	lr

10012648 <nan>:
10012648:	2000      	movs	r0, #0
1001264a:	4901      	ldr	r1, [pc, #4]	; (10012650 <nan+0x8>)
1001264c:	4770      	bx	lr
1001264e:	46c0      	nop			; (mov r8, r8)
10012650:	7ff80000 	.word	0x7ff80000

10012654 <rint>:
10012654:	b5f0      	push	{r4, r5, r6, r7, lr}
10012656:	4647      	mov	r7, r8
10012658:	b480      	push	{r7}
1001265a:	0fcb      	lsrs	r3, r1, #31
1001265c:	4698      	mov	r8, r3
1001265e:	4c4a      	ldr	r4, [pc, #296]	; (10012788 <rint+0x134>)
10012660:	004b      	lsls	r3, r1, #1
10012662:	0d5b      	lsrs	r3, r3, #21
10012664:	191e      	adds	r6, r3, r4
10012666:	b082      	sub	sp, #8
10012668:	0007      	movs	r7, r0
1001266a:	000a      	movs	r2, r1
1001266c:	2e13      	cmp	r6, #19
1001266e:	dc35      	bgt.n	100126dc <rint+0x88>
10012670:	2e00      	cmp	r6, #0
10012672:	db57      	blt.n	10012724 <rint+0xd0>
10012674:	4b45      	ldr	r3, [pc, #276]	; (1001278c <rint+0x138>)
10012676:	0004      	movs	r4, r0
10012678:	4133      	asrs	r3, r6
1001267a:	001f      	movs	r7, r3
1001267c:	400f      	ands	r7, r1
1001267e:	4307      	orrs	r7, r0
10012680:	000d      	movs	r5, r1
10012682:	2f00      	cmp	r7, #0
10012684:	d024      	beq.n	100126d0 <rint+0x7c>
10012686:	085b      	lsrs	r3, r3, #1
10012688:	001c      	movs	r4, r3
1001268a:	400c      	ands	r4, r1
1001268c:	4320      	orrs	r0, r4
1001268e:	2700      	movs	r7, #0
10012690:	2800      	cmp	r0, #0
10012692:	d007      	beq.n	100126a4 <rint+0x50>
10012694:	2e13      	cmp	r6, #19
10012696:	d100      	bne.n	1001269a <rint+0x46>
10012698:	e072      	b.n	10012780 <rint+0x12c>
1001269a:	2280      	movs	r2, #128	; 0x80
1001269c:	02d2      	lsls	r2, r2, #11
1001269e:	4132      	asrs	r2, r6
100126a0:	4399      	bics	r1, r3
100126a2:	430a      	orrs	r2, r1
100126a4:	4643      	mov	r3, r8
100126a6:	00de      	lsls	r6, r3, #3
100126a8:	4b39      	ldr	r3, [pc, #228]	; (10012790 <rint+0x13c>)
100126aa:	0011      	movs	r1, r2
100126ac:	199e      	adds	r6, r3, r6
100126ae:	6834      	ldr	r4, [r6, #0]
100126b0:	6875      	ldr	r5, [r6, #4]
100126b2:	0038      	movs	r0, r7
100126b4:	0022      	movs	r2, r4
100126b6:	002b      	movs	r3, r5
100126b8:	f001 f84e 	bl	10013758 <__aeabi_dadd>
100126bc:	9000      	str	r0, [sp, #0]
100126be:	9101      	str	r1, [sp, #4]
100126c0:	9800      	ldr	r0, [sp, #0]
100126c2:	9901      	ldr	r1, [sp, #4]
100126c4:	0022      	movs	r2, r4
100126c6:	002b      	movs	r3, r5
100126c8:	f002 fa10 	bl	10014aec <__aeabi_dsub>
100126cc:	0004      	movs	r4, r0
100126ce:	000d      	movs	r5, r1
100126d0:	0020      	movs	r0, r4
100126d2:	0029      	movs	r1, r5
100126d4:	b002      	add	sp, #8
100126d6:	bc04      	pop	{r2}
100126d8:	4690      	mov	r8, r2
100126da:	bdf0      	pop	{r4, r5, r6, r7, pc}
100126dc:	2e33      	cmp	r6, #51	; 0x33
100126de:	dd0c      	ble.n	100126fa <rint+0xa6>
100126e0:	2380      	movs	r3, #128	; 0x80
100126e2:	0004      	movs	r4, r0
100126e4:	000d      	movs	r5, r1
100126e6:	00db      	lsls	r3, r3, #3
100126e8:	429e      	cmp	r6, r3
100126ea:	d1f1      	bne.n	100126d0 <rint+0x7c>
100126ec:	0002      	movs	r2, r0
100126ee:	000b      	movs	r3, r1
100126f0:	f001 f832 	bl	10013758 <__aeabi_dadd>
100126f4:	0004      	movs	r4, r0
100126f6:	000d      	movs	r5, r1
100126f8:	e7ea      	b.n	100126d0 <rint+0x7c>
100126fa:	4c26      	ldr	r4, [pc, #152]	; (10012794 <rint+0x140>)
100126fc:	000d      	movs	r5, r1
100126fe:	46a4      	mov	ip, r4
10012700:	2401      	movs	r4, #1
10012702:	4463      	add	r3, ip
10012704:	4264      	negs	r4, r4
10012706:	40dc      	lsrs	r4, r3
10012708:	46a4      	mov	ip, r4
1001270a:	4661      	mov	r1, ip
1001270c:	0004      	movs	r4, r0
1001270e:	4201      	tst	r1, r0
10012710:	d0de      	beq.n	100126d0 <rint+0x7c>
10012712:	0849      	lsrs	r1, r1, #1
10012714:	4201      	tst	r1, r0
10012716:	d0c5      	beq.n	100126a4 <rint+0x50>
10012718:	2780      	movs	r7, #128	; 0x80
1001271a:	05ff      	lsls	r7, r7, #23
1001271c:	411f      	asrs	r7, r3
1001271e:	4388      	bics	r0, r1
10012720:	4307      	orrs	r7, r0
10012722:	e7bf      	b.n	100126a4 <rint+0x50>
10012724:	004b      	lsls	r3, r1, #1
10012726:	085b      	lsrs	r3, r3, #1
10012728:	4303      	orrs	r3, r0
1001272a:	0004      	movs	r4, r0
1001272c:	000d      	movs	r5, r1
1001272e:	2b00      	cmp	r3, #0
10012730:	d0ce      	beq.n	100126d0 <rint+0x7c>
10012732:	030b      	lsls	r3, r1, #12
10012734:	0b1b      	lsrs	r3, r3, #12
10012736:	4303      	orrs	r3, r0
10012738:	425a      	negs	r2, r3
1001273a:	4313      	orrs	r3, r2
1001273c:	2280      	movs	r2, #128	; 0x80
1001273e:	0b1b      	lsrs	r3, r3, #12
10012740:	0312      	lsls	r2, r2, #12
10012742:	4013      	ands	r3, r2
10012744:	0c4a      	lsrs	r2, r1, #17
10012746:	0452      	lsls	r2, r2, #17
10012748:	4313      	orrs	r3, r2
1001274a:	0019      	movs	r1, r3
1001274c:	4643      	mov	r3, r8
1001274e:	4a10      	ldr	r2, [pc, #64]	; (10012790 <rint+0x13c>)
10012750:	00db      	lsls	r3, r3, #3
10012752:	18d3      	adds	r3, r2, r3
10012754:	681c      	ldr	r4, [r3, #0]
10012756:	685d      	ldr	r5, [r3, #4]
10012758:	0022      	movs	r2, r4
1001275a:	002b      	movs	r3, r5
1001275c:	f000 fffc 	bl	10013758 <__aeabi_dadd>
10012760:	9000      	str	r0, [sp, #0]
10012762:	9101      	str	r1, [sp, #4]
10012764:	9800      	ldr	r0, [sp, #0]
10012766:	9901      	ldr	r1, [sp, #4]
10012768:	0022      	movs	r2, r4
1001276a:	002b      	movs	r3, r5
1001276c:	f002 f9be 	bl	10014aec <__aeabi_dsub>
10012770:	4642      	mov	r2, r8
10012772:	004b      	lsls	r3, r1, #1
10012774:	085b      	lsrs	r3, r3, #1
10012776:	07d6      	lsls	r6, r2, #31
10012778:	4333      	orrs	r3, r6
1001277a:	0004      	movs	r4, r0
1001277c:	001d      	movs	r5, r3
1001277e:	e7a7      	b.n	100126d0 <rint+0x7c>
10012780:	2780      	movs	r7, #128	; 0x80
10012782:	063f      	lsls	r7, r7, #24
10012784:	e789      	b.n	1001269a <rint+0x46>
10012786:	46c0      	nop			; (mov r8, r8)
10012788:	fffffc01 	.word	0xfffffc01
1001278c:	000fffff 	.word	0x000fffff
10012790:	100176f0 	.word	0x100176f0
10012794:	fffffbed 	.word	0xfffffbed

10012798 <scalbn>:
10012798:	004b      	lsls	r3, r1, #1
1001279a:	b570      	push	{r4, r5, r6, lr}
1001279c:	0d5b      	lsrs	r3, r3, #21
1001279e:	0014      	movs	r4, r2
100127a0:	000a      	movs	r2, r1
100127a2:	2b00      	cmp	r3, #0
100127a4:	d11a      	bne.n	100127dc <scalbn+0x44>
100127a6:	004b      	lsls	r3, r1, #1
100127a8:	085b      	lsrs	r3, r3, #1
100127aa:	4303      	orrs	r3, r0
100127ac:	d015      	beq.n	100127da <scalbn+0x42>
100127ae:	2200      	movs	r2, #0
100127b0:	4b22      	ldr	r3, [pc, #136]	; (1001283c <scalbn+0xa4>)
100127b2:	f001 ff21 	bl	100145f8 <__aeabi_dmul>
100127b6:	4b22      	ldr	r3, [pc, #136]	; (10012840 <scalbn+0xa8>)
100127b8:	000a      	movs	r2, r1
100127ba:	429c      	cmp	r4, r3
100127bc:	db22      	blt.n	10012804 <scalbn+0x6c>
100127be:	004b      	lsls	r3, r1, #1
100127c0:	0d5b      	lsrs	r3, r3, #21
100127c2:	3b36      	subs	r3, #54	; 0x36
100127c4:	4d1f      	ldr	r5, [pc, #124]	; (10012844 <scalbn+0xac>)
100127c6:	18e3      	adds	r3, r4, r3
100127c8:	42ab      	cmp	r3, r5
100127ca:	dc20      	bgt.n	1001280e <scalbn+0x76>
100127cc:	2b00      	cmp	r3, #0
100127ce:	dd0d      	ble.n	100127ec <scalbn+0x54>
100127d0:	4c1d      	ldr	r4, [pc, #116]	; (10012848 <scalbn+0xb0>)
100127d2:	051b      	lsls	r3, r3, #20
100127d4:	4022      	ands	r2, r4
100127d6:	431a      	orrs	r2, r3
100127d8:	0011      	movs	r1, r2
100127da:	bd70      	pop	{r4, r5, r6, pc}
100127dc:	4d1b      	ldr	r5, [pc, #108]	; (1001284c <scalbn+0xb4>)
100127de:	42ab      	cmp	r3, r5
100127e0:	d1f0      	bne.n	100127c4 <scalbn+0x2c>
100127e2:	0002      	movs	r2, r0
100127e4:	000b      	movs	r3, r1
100127e6:	f000 ffb7 	bl	10013758 <__aeabi_dadd>
100127ea:	e7f6      	b.n	100127da <scalbn+0x42>
100127ec:	001d      	movs	r5, r3
100127ee:	3535      	adds	r5, #53	; 0x35
100127f0:	da18      	bge.n	10012824 <scalbn+0x8c>
100127f2:	4b17      	ldr	r3, [pc, #92]	; (10012850 <scalbn+0xb8>)
100127f4:	0002      	movs	r2, r0
100127f6:	429c      	cmp	r4, r3
100127f8:	dc0a      	bgt.n	10012810 <scalbn+0x78>
100127fa:	000b      	movs	r3, r1
100127fc:	4815      	ldr	r0, [pc, #84]	; (10012854 <scalbn+0xbc>)
100127fe:	4916      	ldr	r1, [pc, #88]	; (10012858 <scalbn+0xc0>)
10012800:	f000 f832 	bl	10012868 <copysign>
10012804:	4a13      	ldr	r2, [pc, #76]	; (10012854 <scalbn+0xbc>)
10012806:	4b14      	ldr	r3, [pc, #80]	; (10012858 <scalbn+0xc0>)
10012808:	f001 fef6 	bl	100145f8 <__aeabi_dmul>
1001280c:	e7e5      	b.n	100127da <scalbn+0x42>
1001280e:	0002      	movs	r2, r0
10012810:	000b      	movs	r3, r1
10012812:	4812      	ldr	r0, [pc, #72]	; (1001285c <scalbn+0xc4>)
10012814:	4912      	ldr	r1, [pc, #72]	; (10012860 <scalbn+0xc8>)
10012816:	f000 f827 	bl	10012868 <copysign>
1001281a:	4a10      	ldr	r2, [pc, #64]	; (1001285c <scalbn+0xc4>)
1001281c:	4b10      	ldr	r3, [pc, #64]	; (10012860 <scalbn+0xc8>)
1001281e:	f001 feeb 	bl	100145f8 <__aeabi_dmul>
10012822:	e7da      	b.n	100127da <scalbn+0x42>
10012824:	4c08      	ldr	r4, [pc, #32]	; (10012848 <scalbn+0xb0>)
10012826:	3336      	adds	r3, #54	; 0x36
10012828:	4022      	ands	r2, r4
1001282a:	051b      	lsls	r3, r3, #20
1001282c:	4313      	orrs	r3, r2
1001282e:	0019      	movs	r1, r3
10012830:	2200      	movs	r2, #0
10012832:	4b0c      	ldr	r3, [pc, #48]	; (10012864 <scalbn+0xcc>)
10012834:	f001 fee0 	bl	100145f8 <__aeabi_dmul>
10012838:	e7cf      	b.n	100127da <scalbn+0x42>
1001283a:	46c0      	nop			; (mov r8, r8)
1001283c:	43500000 	.word	0x43500000
10012840:	ffff3cb0 	.word	0xffff3cb0
10012844:	000007fe 	.word	0x000007fe
10012848:	800fffff 	.word	0x800fffff
1001284c:	000007ff 	.word	0x000007ff
10012850:	0000c350 	.word	0x0000c350
10012854:	c2f8f359 	.word	0xc2f8f359
10012858:	01a56e1f 	.word	0x01a56e1f
1001285c:	8800759c 	.word	0x8800759c
10012860:	7e37e43c 	.word	0x7e37e43c
10012864:	3c900000 	.word	0x3c900000

10012868 <copysign>:
10012868:	b530      	push	{r4, r5, lr}
1001286a:	004a      	lsls	r2, r1, #1
1001286c:	0fdb      	lsrs	r3, r3, #31
1001286e:	07db      	lsls	r3, r3, #31
10012870:	0852      	lsrs	r2, r2, #1
10012872:	431a      	orrs	r2, r3
10012874:	0011      	movs	r1, r2
10012876:	bd30      	pop	{r4, r5, pc}

10012878 <__gnu_thumb1_case_sqi>:
10012878:	b402      	push	{r1}
1001287a:	4671      	mov	r1, lr
1001287c:	0849      	lsrs	r1, r1, #1
1001287e:	0049      	lsls	r1, r1, #1
10012880:	5609      	ldrsb	r1, [r1, r0]
10012882:	0049      	lsls	r1, r1, #1
10012884:	448e      	add	lr, r1
10012886:	bc02      	pop	{r1}
10012888:	4770      	bx	lr
1001288a:	46c0      	nop			; (mov r8, r8)

1001288c <__gnu_thumb1_case_uqi>:
1001288c:	b402      	push	{r1}
1001288e:	4671      	mov	r1, lr
10012890:	0849      	lsrs	r1, r1, #1
10012892:	0049      	lsls	r1, r1, #1
10012894:	5c09      	ldrb	r1, [r1, r0]
10012896:	0049      	lsls	r1, r1, #1
10012898:	448e      	add	lr, r1
1001289a:	bc02      	pop	{r1}
1001289c:	4770      	bx	lr
1001289e:	46c0      	nop			; (mov r8, r8)

100128a0 <__aeabi_uidiv>:
100128a0:	2200      	movs	r2, #0
100128a2:	0843      	lsrs	r3, r0, #1
100128a4:	428b      	cmp	r3, r1
100128a6:	d374      	bcc.n	10012992 <__aeabi_uidiv+0xf2>
100128a8:	0903      	lsrs	r3, r0, #4
100128aa:	428b      	cmp	r3, r1
100128ac:	d35f      	bcc.n	1001296e <__aeabi_uidiv+0xce>
100128ae:	0a03      	lsrs	r3, r0, #8
100128b0:	428b      	cmp	r3, r1
100128b2:	d344      	bcc.n	1001293e <__aeabi_uidiv+0x9e>
100128b4:	0b03      	lsrs	r3, r0, #12
100128b6:	428b      	cmp	r3, r1
100128b8:	d328      	bcc.n	1001290c <__aeabi_uidiv+0x6c>
100128ba:	0c03      	lsrs	r3, r0, #16
100128bc:	428b      	cmp	r3, r1
100128be:	d30d      	bcc.n	100128dc <__aeabi_uidiv+0x3c>
100128c0:	22ff      	movs	r2, #255	; 0xff
100128c2:	0209      	lsls	r1, r1, #8
100128c4:	ba12      	rev	r2, r2
100128c6:	0c03      	lsrs	r3, r0, #16
100128c8:	428b      	cmp	r3, r1
100128ca:	d302      	bcc.n	100128d2 <__aeabi_uidiv+0x32>
100128cc:	1212      	asrs	r2, r2, #8
100128ce:	0209      	lsls	r1, r1, #8
100128d0:	d065      	beq.n	1001299e <__aeabi_uidiv+0xfe>
100128d2:	0b03      	lsrs	r3, r0, #12
100128d4:	428b      	cmp	r3, r1
100128d6:	d319      	bcc.n	1001290c <__aeabi_uidiv+0x6c>
100128d8:	e000      	b.n	100128dc <__aeabi_uidiv+0x3c>
100128da:	0a09      	lsrs	r1, r1, #8
100128dc:	0bc3      	lsrs	r3, r0, #15
100128de:	428b      	cmp	r3, r1
100128e0:	d301      	bcc.n	100128e6 <__aeabi_uidiv+0x46>
100128e2:	03cb      	lsls	r3, r1, #15
100128e4:	1ac0      	subs	r0, r0, r3
100128e6:	4152      	adcs	r2, r2
100128e8:	0b83      	lsrs	r3, r0, #14
100128ea:	428b      	cmp	r3, r1
100128ec:	d301      	bcc.n	100128f2 <__aeabi_uidiv+0x52>
100128ee:	038b      	lsls	r3, r1, #14
100128f0:	1ac0      	subs	r0, r0, r3
100128f2:	4152      	adcs	r2, r2
100128f4:	0b43      	lsrs	r3, r0, #13
100128f6:	428b      	cmp	r3, r1
100128f8:	d301      	bcc.n	100128fe <__aeabi_uidiv+0x5e>
100128fa:	034b      	lsls	r3, r1, #13
100128fc:	1ac0      	subs	r0, r0, r3
100128fe:	4152      	adcs	r2, r2
10012900:	0b03      	lsrs	r3, r0, #12
10012902:	428b      	cmp	r3, r1
10012904:	d301      	bcc.n	1001290a <__aeabi_uidiv+0x6a>
10012906:	030b      	lsls	r3, r1, #12
10012908:	1ac0      	subs	r0, r0, r3
1001290a:	4152      	adcs	r2, r2
1001290c:	0ac3      	lsrs	r3, r0, #11
1001290e:	428b      	cmp	r3, r1
10012910:	d301      	bcc.n	10012916 <__aeabi_uidiv+0x76>
10012912:	02cb      	lsls	r3, r1, #11
10012914:	1ac0      	subs	r0, r0, r3
10012916:	4152      	adcs	r2, r2
10012918:	0a83      	lsrs	r3, r0, #10
1001291a:	428b      	cmp	r3, r1
1001291c:	d301      	bcc.n	10012922 <__aeabi_uidiv+0x82>
1001291e:	028b      	lsls	r3, r1, #10
10012920:	1ac0      	subs	r0, r0, r3
10012922:	4152      	adcs	r2, r2
10012924:	0a43      	lsrs	r3, r0, #9
10012926:	428b      	cmp	r3, r1
10012928:	d301      	bcc.n	1001292e <__aeabi_uidiv+0x8e>
1001292a:	024b      	lsls	r3, r1, #9
1001292c:	1ac0      	subs	r0, r0, r3
1001292e:	4152      	adcs	r2, r2
10012930:	0a03      	lsrs	r3, r0, #8
10012932:	428b      	cmp	r3, r1
10012934:	d301      	bcc.n	1001293a <__aeabi_uidiv+0x9a>
10012936:	020b      	lsls	r3, r1, #8
10012938:	1ac0      	subs	r0, r0, r3
1001293a:	4152      	adcs	r2, r2
1001293c:	d2cd      	bcs.n	100128da <__aeabi_uidiv+0x3a>
1001293e:	09c3      	lsrs	r3, r0, #7
10012940:	428b      	cmp	r3, r1
10012942:	d301      	bcc.n	10012948 <__aeabi_uidiv+0xa8>
10012944:	01cb      	lsls	r3, r1, #7
10012946:	1ac0      	subs	r0, r0, r3
10012948:	4152      	adcs	r2, r2
1001294a:	0983      	lsrs	r3, r0, #6
1001294c:	428b      	cmp	r3, r1
1001294e:	d301      	bcc.n	10012954 <__aeabi_uidiv+0xb4>
10012950:	018b      	lsls	r3, r1, #6
10012952:	1ac0      	subs	r0, r0, r3
10012954:	4152      	adcs	r2, r2
10012956:	0943      	lsrs	r3, r0, #5
10012958:	428b      	cmp	r3, r1
1001295a:	d301      	bcc.n	10012960 <__aeabi_uidiv+0xc0>
1001295c:	014b      	lsls	r3, r1, #5
1001295e:	1ac0      	subs	r0, r0, r3
10012960:	4152      	adcs	r2, r2
10012962:	0903      	lsrs	r3, r0, #4
10012964:	428b      	cmp	r3, r1
10012966:	d301      	bcc.n	1001296c <__aeabi_uidiv+0xcc>
10012968:	010b      	lsls	r3, r1, #4
1001296a:	1ac0      	subs	r0, r0, r3
1001296c:	4152      	adcs	r2, r2
1001296e:	08c3      	lsrs	r3, r0, #3
10012970:	428b      	cmp	r3, r1
10012972:	d301      	bcc.n	10012978 <__aeabi_uidiv+0xd8>
10012974:	00cb      	lsls	r3, r1, #3
10012976:	1ac0      	subs	r0, r0, r3
10012978:	4152      	adcs	r2, r2
1001297a:	0883      	lsrs	r3, r0, #2
1001297c:	428b      	cmp	r3, r1
1001297e:	d301      	bcc.n	10012984 <__aeabi_uidiv+0xe4>
10012980:	008b      	lsls	r3, r1, #2
10012982:	1ac0      	subs	r0, r0, r3
10012984:	4152      	adcs	r2, r2
10012986:	0843      	lsrs	r3, r0, #1
10012988:	428b      	cmp	r3, r1
1001298a:	d301      	bcc.n	10012990 <__aeabi_uidiv+0xf0>
1001298c:	004b      	lsls	r3, r1, #1
1001298e:	1ac0      	subs	r0, r0, r3
10012990:	4152      	adcs	r2, r2
10012992:	1a41      	subs	r1, r0, r1
10012994:	d200      	bcs.n	10012998 <__aeabi_uidiv+0xf8>
10012996:	4601      	mov	r1, r0
10012998:	4152      	adcs	r2, r2
1001299a:	4610      	mov	r0, r2
1001299c:	4770      	bx	lr
1001299e:	e7ff      	b.n	100129a0 <__aeabi_uidiv+0x100>
100129a0:	b501      	push	{r0, lr}
100129a2:	2000      	movs	r0, #0
100129a4:	f000 f8f0 	bl	10012b88 <__aeabi_idiv0>
100129a8:	bd02      	pop	{r1, pc}
100129aa:	46c0      	nop			; (mov r8, r8)

100129ac <__aeabi_uidivmod>:
100129ac:	2900      	cmp	r1, #0
100129ae:	d0f7      	beq.n	100129a0 <__aeabi_uidiv+0x100>
100129b0:	e776      	b.n	100128a0 <__aeabi_uidiv>
100129b2:	4770      	bx	lr

100129b4 <__aeabi_idiv>:
100129b4:	4603      	mov	r3, r0
100129b6:	430b      	orrs	r3, r1
100129b8:	d47f      	bmi.n	10012aba <__aeabi_idiv+0x106>
100129ba:	2200      	movs	r2, #0
100129bc:	0843      	lsrs	r3, r0, #1
100129be:	428b      	cmp	r3, r1
100129c0:	d374      	bcc.n	10012aac <__aeabi_idiv+0xf8>
100129c2:	0903      	lsrs	r3, r0, #4
100129c4:	428b      	cmp	r3, r1
100129c6:	d35f      	bcc.n	10012a88 <__aeabi_idiv+0xd4>
100129c8:	0a03      	lsrs	r3, r0, #8
100129ca:	428b      	cmp	r3, r1
100129cc:	d344      	bcc.n	10012a58 <__aeabi_idiv+0xa4>
100129ce:	0b03      	lsrs	r3, r0, #12
100129d0:	428b      	cmp	r3, r1
100129d2:	d328      	bcc.n	10012a26 <__aeabi_idiv+0x72>
100129d4:	0c03      	lsrs	r3, r0, #16
100129d6:	428b      	cmp	r3, r1
100129d8:	d30d      	bcc.n	100129f6 <__aeabi_idiv+0x42>
100129da:	22ff      	movs	r2, #255	; 0xff
100129dc:	0209      	lsls	r1, r1, #8
100129de:	ba12      	rev	r2, r2
100129e0:	0c03      	lsrs	r3, r0, #16
100129e2:	428b      	cmp	r3, r1
100129e4:	d302      	bcc.n	100129ec <__aeabi_idiv+0x38>
100129e6:	1212      	asrs	r2, r2, #8
100129e8:	0209      	lsls	r1, r1, #8
100129ea:	d065      	beq.n	10012ab8 <__aeabi_idiv+0x104>
100129ec:	0b03      	lsrs	r3, r0, #12
100129ee:	428b      	cmp	r3, r1
100129f0:	d319      	bcc.n	10012a26 <__aeabi_idiv+0x72>
100129f2:	e000      	b.n	100129f6 <__aeabi_idiv+0x42>
100129f4:	0a09      	lsrs	r1, r1, #8
100129f6:	0bc3      	lsrs	r3, r0, #15
100129f8:	428b      	cmp	r3, r1
100129fa:	d301      	bcc.n	10012a00 <__aeabi_idiv+0x4c>
100129fc:	03cb      	lsls	r3, r1, #15
100129fe:	1ac0      	subs	r0, r0, r3
10012a00:	4152      	adcs	r2, r2
10012a02:	0b83      	lsrs	r3, r0, #14
10012a04:	428b      	cmp	r3, r1
10012a06:	d301      	bcc.n	10012a0c <__aeabi_idiv+0x58>
10012a08:	038b      	lsls	r3, r1, #14
10012a0a:	1ac0      	subs	r0, r0, r3
10012a0c:	4152      	adcs	r2, r2
10012a0e:	0b43      	lsrs	r3, r0, #13
10012a10:	428b      	cmp	r3, r1
10012a12:	d301      	bcc.n	10012a18 <__aeabi_idiv+0x64>
10012a14:	034b      	lsls	r3, r1, #13
10012a16:	1ac0      	subs	r0, r0, r3
10012a18:	4152      	adcs	r2, r2
10012a1a:	0b03      	lsrs	r3, r0, #12
10012a1c:	428b      	cmp	r3, r1
10012a1e:	d301      	bcc.n	10012a24 <__aeabi_idiv+0x70>
10012a20:	030b      	lsls	r3, r1, #12
10012a22:	1ac0      	subs	r0, r0, r3
10012a24:	4152      	adcs	r2, r2
10012a26:	0ac3      	lsrs	r3, r0, #11
10012a28:	428b      	cmp	r3, r1
10012a2a:	d301      	bcc.n	10012a30 <__aeabi_idiv+0x7c>
10012a2c:	02cb      	lsls	r3, r1, #11
10012a2e:	1ac0      	subs	r0, r0, r3
10012a30:	4152      	adcs	r2, r2
10012a32:	0a83      	lsrs	r3, r0, #10
10012a34:	428b      	cmp	r3, r1
10012a36:	d301      	bcc.n	10012a3c <__aeabi_idiv+0x88>
10012a38:	028b      	lsls	r3, r1, #10
10012a3a:	1ac0      	subs	r0, r0, r3
10012a3c:	4152      	adcs	r2, r2
10012a3e:	0a43      	lsrs	r3, r0, #9
10012a40:	428b      	cmp	r3, r1
10012a42:	d301      	bcc.n	10012a48 <__aeabi_idiv+0x94>
10012a44:	024b      	lsls	r3, r1, #9
10012a46:	1ac0      	subs	r0, r0, r3
10012a48:	4152      	adcs	r2, r2
10012a4a:	0a03      	lsrs	r3, r0, #8
10012a4c:	428b      	cmp	r3, r1
10012a4e:	d301      	bcc.n	10012a54 <__aeabi_idiv+0xa0>
10012a50:	020b      	lsls	r3, r1, #8
10012a52:	1ac0      	subs	r0, r0, r3
10012a54:	4152      	adcs	r2, r2
10012a56:	d2cd      	bcs.n	100129f4 <__aeabi_idiv+0x40>
10012a58:	09c3      	lsrs	r3, r0, #7
10012a5a:	428b      	cmp	r3, r1
10012a5c:	d301      	bcc.n	10012a62 <__aeabi_idiv+0xae>
10012a5e:	01cb      	lsls	r3, r1, #7
10012a60:	1ac0      	subs	r0, r0, r3
10012a62:	4152      	adcs	r2, r2
10012a64:	0983      	lsrs	r3, r0, #6
10012a66:	428b      	cmp	r3, r1
10012a68:	d301      	bcc.n	10012a6e <__aeabi_idiv+0xba>
10012a6a:	018b      	lsls	r3, r1, #6
10012a6c:	1ac0      	subs	r0, r0, r3
10012a6e:	4152      	adcs	r2, r2
10012a70:	0943      	lsrs	r3, r0, #5
10012a72:	428b      	cmp	r3, r1
10012a74:	d301      	bcc.n	10012a7a <__aeabi_idiv+0xc6>
10012a76:	014b      	lsls	r3, r1, #5
10012a78:	1ac0      	subs	r0, r0, r3
10012a7a:	4152      	adcs	r2, r2
10012a7c:	0903      	lsrs	r3, r0, #4
10012a7e:	428b      	cmp	r3, r1
10012a80:	d301      	bcc.n	10012a86 <__aeabi_idiv+0xd2>
10012a82:	010b      	lsls	r3, r1, #4
10012a84:	1ac0      	subs	r0, r0, r3
10012a86:	4152      	adcs	r2, r2
10012a88:	08c3      	lsrs	r3, r0, #3
10012a8a:	428b      	cmp	r3, r1
10012a8c:	d301      	bcc.n	10012a92 <__aeabi_idiv+0xde>
10012a8e:	00cb      	lsls	r3, r1, #3
10012a90:	1ac0      	subs	r0, r0, r3
10012a92:	4152      	adcs	r2, r2
10012a94:	0883      	lsrs	r3, r0, #2
10012a96:	428b      	cmp	r3, r1
10012a98:	d301      	bcc.n	10012a9e <__aeabi_idiv+0xea>
10012a9a:	008b      	lsls	r3, r1, #2
10012a9c:	1ac0      	subs	r0, r0, r3
10012a9e:	4152      	adcs	r2, r2
10012aa0:	0843      	lsrs	r3, r0, #1
10012aa2:	428b      	cmp	r3, r1
10012aa4:	d301      	bcc.n	10012aaa <__aeabi_idiv+0xf6>
10012aa6:	004b      	lsls	r3, r1, #1
10012aa8:	1ac0      	subs	r0, r0, r3
10012aaa:	4152      	adcs	r2, r2
10012aac:	1a41      	subs	r1, r0, r1
10012aae:	d200      	bcs.n	10012ab2 <__aeabi_idiv+0xfe>
10012ab0:	4601      	mov	r1, r0
10012ab2:	4152      	adcs	r2, r2
10012ab4:	4610      	mov	r0, r2
10012ab6:	4770      	bx	lr
10012ab8:	e05d      	b.n	10012b76 <__aeabi_idiv+0x1c2>
10012aba:	0fca      	lsrs	r2, r1, #31
10012abc:	d000      	beq.n	10012ac0 <__aeabi_idiv+0x10c>
10012abe:	4249      	negs	r1, r1
10012ac0:	1003      	asrs	r3, r0, #32
10012ac2:	d300      	bcc.n	10012ac6 <__aeabi_idiv+0x112>
10012ac4:	4240      	negs	r0, r0
10012ac6:	4053      	eors	r3, r2
10012ac8:	2200      	movs	r2, #0
10012aca:	469c      	mov	ip, r3
10012acc:	0903      	lsrs	r3, r0, #4
10012ace:	428b      	cmp	r3, r1
10012ad0:	d32d      	bcc.n	10012b2e <__aeabi_idiv+0x17a>
10012ad2:	0a03      	lsrs	r3, r0, #8
10012ad4:	428b      	cmp	r3, r1
10012ad6:	d312      	bcc.n	10012afe <__aeabi_idiv+0x14a>
10012ad8:	22fc      	movs	r2, #252	; 0xfc
10012ada:	0189      	lsls	r1, r1, #6
10012adc:	ba12      	rev	r2, r2
10012ade:	0a03      	lsrs	r3, r0, #8
10012ae0:	428b      	cmp	r3, r1
10012ae2:	d30c      	bcc.n	10012afe <__aeabi_idiv+0x14a>
10012ae4:	0189      	lsls	r1, r1, #6
10012ae6:	1192      	asrs	r2, r2, #6
10012ae8:	428b      	cmp	r3, r1
10012aea:	d308      	bcc.n	10012afe <__aeabi_idiv+0x14a>
10012aec:	0189      	lsls	r1, r1, #6
10012aee:	1192      	asrs	r2, r2, #6
10012af0:	428b      	cmp	r3, r1
10012af2:	d304      	bcc.n	10012afe <__aeabi_idiv+0x14a>
10012af4:	0189      	lsls	r1, r1, #6
10012af6:	d03a      	beq.n	10012b6e <__aeabi_idiv+0x1ba>
10012af8:	1192      	asrs	r2, r2, #6
10012afa:	e000      	b.n	10012afe <__aeabi_idiv+0x14a>
10012afc:	0989      	lsrs	r1, r1, #6
10012afe:	09c3      	lsrs	r3, r0, #7
10012b00:	428b      	cmp	r3, r1
10012b02:	d301      	bcc.n	10012b08 <__aeabi_idiv+0x154>
10012b04:	01cb      	lsls	r3, r1, #7
10012b06:	1ac0      	subs	r0, r0, r3
10012b08:	4152      	adcs	r2, r2
10012b0a:	0983      	lsrs	r3, r0, #6
10012b0c:	428b      	cmp	r3, r1
10012b0e:	d301      	bcc.n	10012b14 <__aeabi_idiv+0x160>
10012b10:	018b      	lsls	r3, r1, #6
10012b12:	1ac0      	subs	r0, r0, r3
10012b14:	4152      	adcs	r2, r2
10012b16:	0943      	lsrs	r3, r0, #5
10012b18:	428b      	cmp	r3, r1
10012b1a:	d301      	bcc.n	10012b20 <__aeabi_idiv+0x16c>
10012b1c:	014b      	lsls	r3, r1, #5
10012b1e:	1ac0      	subs	r0, r0, r3
10012b20:	4152      	adcs	r2, r2
10012b22:	0903      	lsrs	r3, r0, #4
10012b24:	428b      	cmp	r3, r1
10012b26:	d301      	bcc.n	10012b2c <__aeabi_idiv+0x178>
10012b28:	010b      	lsls	r3, r1, #4
10012b2a:	1ac0      	subs	r0, r0, r3
10012b2c:	4152      	adcs	r2, r2
10012b2e:	08c3      	lsrs	r3, r0, #3
10012b30:	428b      	cmp	r3, r1
10012b32:	d301      	bcc.n	10012b38 <__aeabi_idiv+0x184>
10012b34:	00cb      	lsls	r3, r1, #3
10012b36:	1ac0      	subs	r0, r0, r3
10012b38:	4152      	adcs	r2, r2
10012b3a:	0883      	lsrs	r3, r0, #2
10012b3c:	428b      	cmp	r3, r1
10012b3e:	d301      	bcc.n	10012b44 <__aeabi_idiv+0x190>
10012b40:	008b      	lsls	r3, r1, #2
10012b42:	1ac0      	subs	r0, r0, r3
10012b44:	4152      	adcs	r2, r2
10012b46:	d2d9      	bcs.n	10012afc <__aeabi_idiv+0x148>
10012b48:	0843      	lsrs	r3, r0, #1
10012b4a:	428b      	cmp	r3, r1
10012b4c:	d301      	bcc.n	10012b52 <__aeabi_idiv+0x19e>
10012b4e:	004b      	lsls	r3, r1, #1
10012b50:	1ac0      	subs	r0, r0, r3
10012b52:	4152      	adcs	r2, r2
10012b54:	1a41      	subs	r1, r0, r1
10012b56:	d200      	bcs.n	10012b5a <__aeabi_idiv+0x1a6>
10012b58:	4601      	mov	r1, r0
10012b5a:	4663      	mov	r3, ip
10012b5c:	4152      	adcs	r2, r2
10012b5e:	105b      	asrs	r3, r3, #1
10012b60:	4610      	mov	r0, r2
10012b62:	d301      	bcc.n	10012b68 <__aeabi_idiv+0x1b4>
10012b64:	4240      	negs	r0, r0
10012b66:	2b00      	cmp	r3, #0
10012b68:	d500      	bpl.n	10012b6c <__aeabi_idiv+0x1b8>
10012b6a:	4249      	negs	r1, r1
10012b6c:	4770      	bx	lr
10012b6e:	4663      	mov	r3, ip
10012b70:	105b      	asrs	r3, r3, #1
10012b72:	d300      	bcc.n	10012b76 <__aeabi_idiv+0x1c2>
10012b74:	4240      	negs	r0, r0
10012b76:	b501      	push	{r0, lr}
10012b78:	2000      	movs	r0, #0
10012b7a:	f000 f805 	bl	10012b88 <__aeabi_idiv0>
10012b7e:	bd02      	pop	{r1, pc}

10012b80 <__aeabi_idivmod>:
10012b80:	2900      	cmp	r1, #0
10012b82:	d0f8      	beq.n	10012b76 <__aeabi_idiv+0x1c2>
10012b84:	e716      	b.n	100129b4 <__aeabi_idiv>
10012b86:	4770      	bx	lr

10012b88 <__aeabi_idiv0>:
10012b88:	4770      	bx	lr
10012b8a:	46c0      	nop			; (mov r8, r8)

10012b8c <__aeabi_cdrcmple>:
10012b8c:	4684      	mov	ip, r0
10012b8e:	1c10      	adds	r0, r2, #0
10012b90:	4662      	mov	r2, ip
10012b92:	468c      	mov	ip, r1
10012b94:	1c19      	adds	r1, r3, #0
10012b96:	4663      	mov	r3, ip
10012b98:	e000      	b.n	10012b9c <__aeabi_cdcmpeq>
10012b9a:	46c0      	nop			; (mov r8, r8)

10012b9c <__aeabi_cdcmpeq>:
10012b9c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012b9e:	f001 fcc1 	bl	10014524 <__ledf2>
10012ba2:	2800      	cmp	r0, #0
10012ba4:	d401      	bmi.n	10012baa <__aeabi_cdcmpeq+0xe>
10012ba6:	2100      	movs	r1, #0
10012ba8:	42c8      	cmn	r0, r1
10012baa:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012bac <__aeabi_dcmpeq>:
10012bac:	b510      	push	{r4, lr}
10012bae:	f001 fc15 	bl	100143dc <__eqdf2>
10012bb2:	4240      	negs	r0, r0
10012bb4:	3001      	adds	r0, #1
10012bb6:	bd10      	pop	{r4, pc}

10012bb8 <__aeabi_dcmplt>:
10012bb8:	b510      	push	{r4, lr}
10012bba:	f001 fcb3 	bl	10014524 <__ledf2>
10012bbe:	2800      	cmp	r0, #0
10012bc0:	db01      	blt.n	10012bc6 <__aeabi_dcmplt+0xe>
10012bc2:	2000      	movs	r0, #0
10012bc4:	bd10      	pop	{r4, pc}
10012bc6:	2001      	movs	r0, #1
10012bc8:	bd10      	pop	{r4, pc}
10012bca:	46c0      	nop			; (mov r8, r8)

10012bcc <__aeabi_dcmple>:
10012bcc:	b510      	push	{r4, lr}
10012bce:	f001 fca9 	bl	10014524 <__ledf2>
10012bd2:	2800      	cmp	r0, #0
10012bd4:	dd01      	ble.n	10012bda <__aeabi_dcmple+0xe>
10012bd6:	2000      	movs	r0, #0
10012bd8:	bd10      	pop	{r4, pc}
10012bda:	2001      	movs	r0, #1
10012bdc:	bd10      	pop	{r4, pc}
10012bde:	46c0      	nop			; (mov r8, r8)

10012be0 <__aeabi_dcmpgt>:
10012be0:	b510      	push	{r4, lr}
10012be2:	f001 fc3b 	bl	1001445c <__gedf2>
10012be6:	2800      	cmp	r0, #0
10012be8:	dc01      	bgt.n	10012bee <__aeabi_dcmpgt+0xe>
10012bea:	2000      	movs	r0, #0
10012bec:	bd10      	pop	{r4, pc}
10012bee:	2001      	movs	r0, #1
10012bf0:	bd10      	pop	{r4, pc}
10012bf2:	46c0      	nop			; (mov r8, r8)

10012bf4 <__aeabi_dcmpge>:
10012bf4:	b510      	push	{r4, lr}
10012bf6:	f001 fc31 	bl	1001445c <__gedf2>
10012bfa:	2800      	cmp	r0, #0
10012bfc:	da01      	bge.n	10012c02 <__aeabi_dcmpge+0xe>
10012bfe:	2000      	movs	r0, #0
10012c00:	bd10      	pop	{r4, pc}
10012c02:	2001      	movs	r0, #1
10012c04:	bd10      	pop	{r4, pc}
10012c06:	46c0      	nop			; (mov r8, r8)

10012c08 <__aeabi_cfrcmple>:
10012c08:	4684      	mov	ip, r0
10012c0a:	1c08      	adds	r0, r1, #0
10012c0c:	4661      	mov	r1, ip
10012c0e:	e7ff      	b.n	10012c10 <__aeabi_cfcmpeq>

10012c10 <__aeabi_cfcmpeq>:
10012c10:	b51f      	push	{r0, r1, r2, r3, r4, lr}
10012c12:	f000 fa1b 	bl	1001304c <__lesf2>
10012c16:	2800      	cmp	r0, #0
10012c18:	d401      	bmi.n	10012c1e <__aeabi_cfcmpeq+0xe>
10012c1a:	2100      	movs	r1, #0
10012c1c:	42c8      	cmn	r0, r1
10012c1e:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

10012c20 <__aeabi_fcmpeq>:
10012c20:	b510      	push	{r4, lr}
10012c22:	f000 f9a7 	bl	10012f74 <__eqsf2>
10012c26:	4240      	negs	r0, r0
10012c28:	3001      	adds	r0, #1
10012c2a:	bd10      	pop	{r4, pc}

10012c2c <__aeabi_fcmplt>:
10012c2c:	b510      	push	{r4, lr}
10012c2e:	f000 fa0d 	bl	1001304c <__lesf2>
10012c32:	2800      	cmp	r0, #0
10012c34:	db01      	blt.n	10012c3a <__aeabi_fcmplt+0xe>
10012c36:	2000      	movs	r0, #0
10012c38:	bd10      	pop	{r4, pc}
10012c3a:	2001      	movs	r0, #1
10012c3c:	bd10      	pop	{r4, pc}
10012c3e:	46c0      	nop			; (mov r8, r8)

10012c40 <__aeabi_fcmple>:
10012c40:	b510      	push	{r4, lr}
10012c42:	f000 fa03 	bl	1001304c <__lesf2>
10012c46:	2800      	cmp	r0, #0
10012c48:	dd01      	ble.n	10012c4e <__aeabi_fcmple+0xe>
10012c4a:	2000      	movs	r0, #0
10012c4c:	bd10      	pop	{r4, pc}
10012c4e:	2001      	movs	r0, #1
10012c50:	bd10      	pop	{r4, pc}
10012c52:	46c0      	nop			; (mov r8, r8)

10012c54 <__aeabi_fcmpgt>:
10012c54:	b510      	push	{r4, lr}
10012c56:	f000 f9b5 	bl	10012fc4 <__gesf2>
10012c5a:	2800      	cmp	r0, #0
10012c5c:	dc01      	bgt.n	10012c62 <__aeabi_fcmpgt+0xe>
10012c5e:	2000      	movs	r0, #0
10012c60:	bd10      	pop	{r4, pc}
10012c62:	2001      	movs	r0, #1
10012c64:	bd10      	pop	{r4, pc}
10012c66:	46c0      	nop			; (mov r8, r8)

10012c68 <__aeabi_fcmpge>:
10012c68:	b510      	push	{r4, lr}
10012c6a:	f000 f9ab 	bl	10012fc4 <__gesf2>
10012c6e:	2800      	cmp	r0, #0
10012c70:	da01      	bge.n	10012c76 <__aeabi_fcmpge+0xe>
10012c72:	2000      	movs	r0, #0
10012c74:	bd10      	pop	{r4, pc}
10012c76:	2001      	movs	r0, #1
10012c78:	bd10      	pop	{r4, pc}
10012c7a:	46c0      	nop			; (mov r8, r8)

10012c7c <__aeabi_lmul>:
10012c7c:	b5f0      	push	{r4, r5, r6, r7, lr}
10012c7e:	464f      	mov	r7, r9
10012c80:	4646      	mov	r6, r8
10012c82:	b4c0      	push	{r6, r7}
10012c84:	0416      	lsls	r6, r2, #16
10012c86:	0c36      	lsrs	r6, r6, #16
10012c88:	4699      	mov	r9, r3
10012c8a:	0033      	movs	r3, r6
10012c8c:	0405      	lsls	r5, r0, #16
10012c8e:	0c2c      	lsrs	r4, r5, #16
10012c90:	0c07      	lsrs	r7, r0, #16
10012c92:	0c15      	lsrs	r5, r2, #16
10012c94:	4363      	muls	r3, r4
10012c96:	437e      	muls	r6, r7
10012c98:	436f      	muls	r7, r5
10012c9a:	4365      	muls	r5, r4
10012c9c:	0c1c      	lsrs	r4, r3, #16
10012c9e:	19ad      	adds	r5, r5, r6
10012ca0:	1964      	adds	r4, r4, r5
10012ca2:	469c      	mov	ip, r3
10012ca4:	42a6      	cmp	r6, r4
10012ca6:	d903      	bls.n	10012cb0 <__aeabi_lmul+0x34>
10012ca8:	2380      	movs	r3, #128	; 0x80
10012caa:	025b      	lsls	r3, r3, #9
10012cac:	4698      	mov	r8, r3
10012cae:	4447      	add	r7, r8
10012cb0:	4663      	mov	r3, ip
10012cb2:	0c25      	lsrs	r5, r4, #16
10012cb4:	19ef      	adds	r7, r5, r7
10012cb6:	041d      	lsls	r5, r3, #16
10012cb8:	464b      	mov	r3, r9
10012cba:	434a      	muls	r2, r1
10012cbc:	4343      	muls	r3, r0
10012cbe:	0c2d      	lsrs	r5, r5, #16
10012cc0:	0424      	lsls	r4, r4, #16
10012cc2:	1964      	adds	r4, r4, r5
10012cc4:	1899      	adds	r1, r3, r2
10012cc6:	19c9      	adds	r1, r1, r7
10012cc8:	0020      	movs	r0, r4
10012cca:	bc0c      	pop	{r2, r3}
10012ccc:	4690      	mov	r8, r2
10012cce:	4699      	mov	r9, r3
10012cd0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012cd2:	46c0      	nop			; (mov r8, r8)

10012cd4 <__aeabi_f2uiz>:
10012cd4:	219e      	movs	r1, #158	; 0x9e
10012cd6:	b510      	push	{r4, lr}
10012cd8:	05c9      	lsls	r1, r1, #23
10012cda:	1c04      	adds	r4, r0, #0
10012cdc:	f7ff ffc4 	bl	10012c68 <__aeabi_fcmpge>
10012ce0:	2800      	cmp	r0, #0
10012ce2:	d103      	bne.n	10012cec <__aeabi_f2uiz+0x18>
10012ce4:	1c20      	adds	r0, r4, #0
10012ce6:	f000 fc8f 	bl	10013608 <__aeabi_f2iz>
10012cea:	bd10      	pop	{r4, pc}
10012cec:	219e      	movs	r1, #158	; 0x9e
10012cee:	1c20      	adds	r0, r4, #0
10012cf0:	05c9      	lsls	r1, r1, #23
10012cf2:	f000 fb03 	bl	100132fc <__aeabi_fsub>
10012cf6:	f000 fc87 	bl	10013608 <__aeabi_f2iz>
10012cfa:	2380      	movs	r3, #128	; 0x80
10012cfc:	061b      	lsls	r3, r3, #24
10012cfe:	469c      	mov	ip, r3
10012d00:	4460      	add	r0, ip
10012d02:	e7f2      	b.n	10012cea <__aeabi_f2uiz+0x16>

10012d04 <__aeabi_d2uiz>:
10012d04:	b570      	push	{r4, r5, r6, lr}
10012d06:	2200      	movs	r2, #0
10012d08:	4b0c      	ldr	r3, [pc, #48]	; (10012d3c <__aeabi_d2uiz+0x38>)
10012d0a:	0004      	movs	r4, r0
10012d0c:	000d      	movs	r5, r1
10012d0e:	f7ff ff71 	bl	10012bf4 <__aeabi_dcmpge>
10012d12:	2800      	cmp	r0, #0
10012d14:	d104      	bne.n	10012d20 <__aeabi_d2uiz+0x1c>
10012d16:	0020      	movs	r0, r4
10012d18:	0029      	movs	r1, r5
10012d1a:	f002 fa5b 	bl	100151d4 <__aeabi_d2iz>
10012d1e:	bd70      	pop	{r4, r5, r6, pc}
10012d20:	4b06      	ldr	r3, [pc, #24]	; (10012d3c <__aeabi_d2uiz+0x38>)
10012d22:	2200      	movs	r2, #0
10012d24:	0020      	movs	r0, r4
10012d26:	0029      	movs	r1, r5
10012d28:	f001 fee0 	bl	10014aec <__aeabi_dsub>
10012d2c:	f002 fa52 	bl	100151d4 <__aeabi_d2iz>
10012d30:	2380      	movs	r3, #128	; 0x80
10012d32:	061b      	lsls	r3, r3, #24
10012d34:	469c      	mov	ip, r3
10012d36:	4460      	add	r0, ip
10012d38:	e7f1      	b.n	10012d1e <__aeabi_d2uiz+0x1a>
10012d3a:	46c0      	nop			; (mov r8, r8)
10012d3c:	41e00000 	.word	0x41e00000

10012d40 <__aeabi_fdiv>:
10012d40:	b5f0      	push	{r4, r5, r6, r7, lr}
10012d42:	4656      	mov	r6, sl
10012d44:	4644      	mov	r4, r8
10012d46:	465f      	mov	r7, fp
10012d48:	464d      	mov	r5, r9
10012d4a:	b4f0      	push	{r4, r5, r6, r7}
10012d4c:	0244      	lsls	r4, r0, #9
10012d4e:	0046      	lsls	r6, r0, #1
10012d50:	0fc7      	lsrs	r7, r0, #31
10012d52:	b083      	sub	sp, #12
10012d54:	4688      	mov	r8, r1
10012d56:	0a65      	lsrs	r5, r4, #9
10012d58:	0e36      	lsrs	r6, r6, #24
10012d5a:	46ba      	mov	sl, r7
10012d5c:	d03d      	beq.n	10012dda <__aeabi_fdiv+0x9a>
10012d5e:	2eff      	cmp	r6, #255	; 0xff
10012d60:	d022      	beq.n	10012da8 <__aeabi_fdiv+0x68>
10012d62:	2300      	movs	r3, #0
10012d64:	00ec      	lsls	r4, r5, #3
10012d66:	2580      	movs	r5, #128	; 0x80
10012d68:	4699      	mov	r9, r3
10012d6a:	469b      	mov	fp, r3
10012d6c:	04ed      	lsls	r5, r5, #19
10012d6e:	4325      	orrs	r5, r4
10012d70:	3e7f      	subs	r6, #127	; 0x7f
10012d72:	4643      	mov	r3, r8
10012d74:	025c      	lsls	r4, r3, #9
10012d76:	0058      	lsls	r0, r3, #1
10012d78:	0fdb      	lsrs	r3, r3, #31
10012d7a:	0a64      	lsrs	r4, r4, #9
10012d7c:	0e00      	lsrs	r0, r0, #24
10012d7e:	4698      	mov	r8, r3
10012d80:	d036      	beq.n	10012df0 <__aeabi_fdiv+0xb0>
10012d82:	28ff      	cmp	r0, #255	; 0xff
10012d84:	d030      	beq.n	10012de8 <__aeabi_fdiv+0xa8>
10012d86:	2380      	movs	r3, #128	; 0x80
10012d88:	2100      	movs	r1, #0
10012d8a:	00e4      	lsls	r4, r4, #3
10012d8c:	04db      	lsls	r3, r3, #19
10012d8e:	431c      	orrs	r4, r3
10012d90:	387f      	subs	r0, #127	; 0x7f
10012d92:	1a30      	subs	r0, r6, r0
10012d94:	9001      	str	r0, [sp, #4]
10012d96:	4648      	mov	r0, r9
10012d98:	4642      	mov	r2, r8
10012d9a:	4308      	orrs	r0, r1
10012d9c:	4e72      	ldr	r6, [pc, #456]	; (10012f68 <__aeabi_fdiv+0x228>)
10012d9e:	0080      	lsls	r0, r0, #2
10012da0:	5830      	ldr	r0, [r6, r0]
10012da2:	407a      	eors	r2, r7
10012da4:	0013      	movs	r3, r2
10012da6:	4687      	mov	pc, r0
10012da8:	2d00      	cmp	r5, #0
10012daa:	d144      	bne.n	10012e36 <__aeabi_fdiv+0xf6>
10012dac:	2308      	movs	r3, #8
10012dae:	4699      	mov	r9, r3
10012db0:	3b06      	subs	r3, #6
10012db2:	469b      	mov	fp, r3
10012db4:	e7dd      	b.n	10012d72 <__aeabi_fdiv+0x32>
10012db6:	2201      	movs	r2, #1
10012db8:	20ff      	movs	r0, #255	; 0xff
10012dba:	2400      	movs	r4, #0
10012dbc:	401a      	ands	r2, r3
10012dbe:	0264      	lsls	r4, r4, #9
10012dc0:	05c3      	lsls	r3, r0, #23
10012dc2:	0a64      	lsrs	r4, r4, #9
10012dc4:	07d2      	lsls	r2, r2, #31
10012dc6:	431c      	orrs	r4, r3
10012dc8:	4314      	orrs	r4, r2
10012dca:	0020      	movs	r0, r4
10012dcc:	b003      	add	sp, #12
10012dce:	bc3c      	pop	{r2, r3, r4, r5}
10012dd0:	4690      	mov	r8, r2
10012dd2:	4699      	mov	r9, r3
10012dd4:	46a2      	mov	sl, r4
10012dd6:	46ab      	mov	fp, r5
10012dd8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10012dda:	2d00      	cmp	r5, #0
10012ddc:	d120      	bne.n	10012e20 <__aeabi_fdiv+0xe0>
10012dde:	2304      	movs	r3, #4
10012de0:	4699      	mov	r9, r3
10012de2:	3b03      	subs	r3, #3
10012de4:	469b      	mov	fp, r3
10012de6:	e7c4      	b.n	10012d72 <__aeabi_fdiv+0x32>
10012de8:	2c00      	cmp	r4, #0
10012dea:	d117      	bne.n	10012e1c <__aeabi_fdiv+0xdc>
10012dec:	2102      	movs	r1, #2
10012dee:	e002      	b.n	10012df6 <__aeabi_fdiv+0xb6>
10012df0:	2c00      	cmp	r4, #0
10012df2:	d10a      	bne.n	10012e0a <__aeabi_fdiv+0xca>
10012df4:	2101      	movs	r1, #1
10012df6:	1a32      	subs	r2, r6, r0
10012df8:	9201      	str	r2, [sp, #4]
10012dfa:	464a      	mov	r2, r9
10012dfc:	4643      	mov	r3, r8
10012dfe:	430a      	orrs	r2, r1
10012e00:	485a      	ldr	r0, [pc, #360]	; (10012f6c <__aeabi_fdiv+0x22c>)
10012e02:	0092      	lsls	r2, r2, #2
10012e04:	5882      	ldr	r2, [r0, r2]
10012e06:	407b      	eors	r3, r7
10012e08:	4697      	mov	pc, r2
10012e0a:	0020      	movs	r0, r4
10012e0c:	f002 fb72 	bl	100154f4 <__clzsi2>
10012e10:	1f43      	subs	r3, r0, #5
10012e12:	3076      	adds	r0, #118	; 0x76
10012e14:	409c      	lsls	r4, r3
10012e16:	4240      	negs	r0, r0
10012e18:	2100      	movs	r1, #0
10012e1a:	e7ba      	b.n	10012d92 <__aeabi_fdiv+0x52>
10012e1c:	2103      	movs	r1, #3
10012e1e:	e7b8      	b.n	10012d92 <__aeabi_fdiv+0x52>
10012e20:	0028      	movs	r0, r5
10012e22:	f002 fb67 	bl	100154f4 <__clzsi2>
10012e26:	1f43      	subs	r3, r0, #5
10012e28:	409d      	lsls	r5, r3
10012e2a:	2300      	movs	r3, #0
10012e2c:	3076      	adds	r0, #118	; 0x76
10012e2e:	4246      	negs	r6, r0
10012e30:	4699      	mov	r9, r3
10012e32:	469b      	mov	fp, r3
10012e34:	e79d      	b.n	10012d72 <__aeabi_fdiv+0x32>
10012e36:	230c      	movs	r3, #12
10012e38:	4699      	mov	r9, r3
10012e3a:	3b09      	subs	r3, #9
10012e3c:	469b      	mov	fp, r3
10012e3e:	e798      	b.n	10012d72 <__aeabi_fdiv+0x32>
10012e40:	2480      	movs	r4, #128	; 0x80
10012e42:	2200      	movs	r2, #0
10012e44:	03e4      	lsls	r4, r4, #15
10012e46:	20ff      	movs	r0, #255	; 0xff
10012e48:	e7b9      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012e4a:	2400      	movs	r4, #0
10012e4c:	46c2      	mov	sl, r8
10012e4e:	468b      	mov	fp, r1
10012e50:	465a      	mov	r2, fp
10012e52:	4653      	mov	r3, sl
10012e54:	2a02      	cmp	r2, #2
10012e56:	d0ae      	beq.n	10012db6 <__aeabi_fdiv+0x76>
10012e58:	2a03      	cmp	r2, #3
10012e5a:	d07d      	beq.n	10012f58 <__aeabi_fdiv+0x218>
10012e5c:	2a01      	cmp	r2, #1
10012e5e:	d131      	bne.n	10012ec4 <__aeabi_fdiv+0x184>
10012e60:	2201      	movs	r2, #1
10012e62:	2000      	movs	r0, #0
10012e64:	401a      	ands	r2, r3
10012e66:	2400      	movs	r4, #0
10012e68:	e7a9      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012e6a:	2201      	movs	r2, #1
10012e6c:	1a10      	subs	r0, r2, r0
10012e6e:	281b      	cmp	r0, #27
10012e70:	dd56      	ble.n	10012f20 <__aeabi_fdiv+0x1e0>
10012e72:	401a      	ands	r2, r3
10012e74:	2000      	movs	r0, #0
10012e76:	2400      	movs	r4, #0
10012e78:	e7a1      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012e7a:	2380      	movs	r3, #128	; 0x80
10012e7c:	03db      	lsls	r3, r3, #15
10012e7e:	421d      	tst	r5, r3
10012e80:	d14b      	bne.n	10012f1a <__aeabi_fdiv+0x1da>
10012e82:	2380      	movs	r3, #128	; 0x80
10012e84:	03db      	lsls	r3, r3, #15
10012e86:	432b      	orrs	r3, r5
10012e88:	025c      	lsls	r4, r3, #9
10012e8a:	0a64      	lsrs	r4, r4, #9
10012e8c:	003a      	movs	r2, r7
10012e8e:	20ff      	movs	r0, #255	; 0xff
10012e90:	e795      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012e92:	016d      	lsls	r5, r5, #5
10012e94:	0160      	lsls	r0, r4, #5
10012e96:	4285      	cmp	r5, r0
10012e98:	d230      	bcs.n	10012efc <__aeabi_fdiv+0x1bc>
10012e9a:	9a01      	ldr	r2, [sp, #4]
10012e9c:	2400      	movs	r4, #0
10012e9e:	3a01      	subs	r2, #1
10012ea0:	9201      	str	r2, [sp, #4]
10012ea2:	221b      	movs	r2, #27
10012ea4:	2701      	movs	r7, #1
10012ea6:	0029      	movs	r1, r5
10012ea8:	0064      	lsls	r4, r4, #1
10012eaa:	006d      	lsls	r5, r5, #1
10012eac:	2900      	cmp	r1, #0
10012eae:	db01      	blt.n	10012eb4 <__aeabi_fdiv+0x174>
10012eb0:	42a8      	cmp	r0, r5
10012eb2:	d801      	bhi.n	10012eb8 <__aeabi_fdiv+0x178>
10012eb4:	1a2d      	subs	r5, r5, r0
10012eb6:	433c      	orrs	r4, r7
10012eb8:	3a01      	subs	r2, #1
10012eba:	2a00      	cmp	r2, #0
10012ebc:	d1f3      	bne.n	10012ea6 <__aeabi_fdiv+0x166>
10012ebe:	1e6a      	subs	r2, r5, #1
10012ec0:	4195      	sbcs	r5, r2
10012ec2:	432c      	orrs	r4, r5
10012ec4:	9801      	ldr	r0, [sp, #4]
10012ec6:	307f      	adds	r0, #127	; 0x7f
10012ec8:	2800      	cmp	r0, #0
10012eca:	ddce      	ble.n	10012e6a <__aeabi_fdiv+0x12a>
10012ecc:	0762      	lsls	r2, r4, #29
10012ece:	d004      	beq.n	10012eda <__aeabi_fdiv+0x19a>
10012ed0:	220f      	movs	r2, #15
10012ed2:	4022      	ands	r2, r4
10012ed4:	2a04      	cmp	r2, #4
10012ed6:	d000      	beq.n	10012eda <__aeabi_fdiv+0x19a>
10012ed8:	3404      	adds	r4, #4
10012eda:	0122      	lsls	r2, r4, #4
10012edc:	d503      	bpl.n	10012ee6 <__aeabi_fdiv+0x1a6>
10012ede:	4a24      	ldr	r2, [pc, #144]	; (10012f70 <__aeabi_fdiv+0x230>)
10012ee0:	9801      	ldr	r0, [sp, #4]
10012ee2:	4014      	ands	r4, r2
10012ee4:	3080      	adds	r0, #128	; 0x80
10012ee6:	28fe      	cmp	r0, #254	; 0xfe
10012ee8:	dd00      	ble.n	10012eec <__aeabi_fdiv+0x1ac>
10012eea:	e764      	b.n	10012db6 <__aeabi_fdiv+0x76>
10012eec:	2201      	movs	r2, #1
10012eee:	01a4      	lsls	r4, r4, #6
10012ef0:	0a64      	lsrs	r4, r4, #9
10012ef2:	b2c0      	uxtb	r0, r0
10012ef4:	401a      	ands	r2, r3
10012ef6:	e762      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012ef8:	002c      	movs	r4, r5
10012efa:	e7a9      	b.n	10012e50 <__aeabi_fdiv+0x110>
10012efc:	1a2d      	subs	r5, r5, r0
10012efe:	221a      	movs	r2, #26
10012f00:	2401      	movs	r4, #1
10012f02:	e7cf      	b.n	10012ea4 <__aeabi_fdiv+0x164>
10012f04:	026b      	lsls	r3, r5, #9
10012f06:	d5bc      	bpl.n	10012e82 <__aeabi_fdiv+0x142>
10012f08:	2400      	movs	r4, #0
10012f0a:	2380      	movs	r3, #128	; 0x80
10012f0c:	03db      	lsls	r3, r3, #15
10012f0e:	431c      	orrs	r4, r3
10012f10:	0264      	lsls	r4, r4, #9
10012f12:	0a64      	lsrs	r4, r4, #9
10012f14:	4642      	mov	r2, r8
10012f16:	20ff      	movs	r0, #255	; 0xff
10012f18:	e751      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012f1a:	421c      	tst	r4, r3
10012f1c:	d1b3      	bne.n	10012e86 <__aeabi_fdiv+0x146>
10012f1e:	e7f4      	b.n	10012f0a <__aeabi_fdiv+0x1ca>
10012f20:	0021      	movs	r1, r4
10012f22:	2220      	movs	r2, #32
10012f24:	40c1      	lsrs	r1, r0
10012f26:	1a10      	subs	r0, r2, r0
10012f28:	4084      	lsls	r4, r0
10012f2a:	1e62      	subs	r2, r4, #1
10012f2c:	4194      	sbcs	r4, r2
10012f2e:	430c      	orrs	r4, r1
10012f30:	0762      	lsls	r2, r4, #29
10012f32:	d004      	beq.n	10012f3e <__aeabi_fdiv+0x1fe>
10012f34:	220f      	movs	r2, #15
10012f36:	4022      	ands	r2, r4
10012f38:	2a04      	cmp	r2, #4
10012f3a:	d000      	beq.n	10012f3e <__aeabi_fdiv+0x1fe>
10012f3c:	3404      	adds	r4, #4
10012f3e:	0162      	lsls	r2, r4, #5
10012f40:	d504      	bpl.n	10012f4c <__aeabi_fdiv+0x20c>
10012f42:	2201      	movs	r2, #1
10012f44:	2001      	movs	r0, #1
10012f46:	401a      	ands	r2, r3
10012f48:	2400      	movs	r4, #0
10012f4a:	e738      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012f4c:	2201      	movs	r2, #1
10012f4e:	01a4      	lsls	r4, r4, #6
10012f50:	0a64      	lsrs	r4, r4, #9
10012f52:	401a      	ands	r2, r3
10012f54:	2000      	movs	r0, #0
10012f56:	e732      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012f58:	2380      	movs	r3, #128	; 0x80
10012f5a:	03db      	lsls	r3, r3, #15
10012f5c:	431c      	orrs	r4, r3
10012f5e:	0264      	lsls	r4, r4, #9
10012f60:	0a64      	lsrs	r4, r4, #9
10012f62:	4652      	mov	r2, sl
10012f64:	20ff      	movs	r0, #255	; 0xff
10012f66:	e72a      	b.n	10012dbe <__aeabi_fdiv+0x7e>
10012f68:	10017700 	.word	0x10017700
10012f6c:	10017740 	.word	0x10017740
10012f70:	f7ffffff 	.word	0xf7ffffff

10012f74 <__eqsf2>:
10012f74:	0243      	lsls	r3, r0, #9
10012f76:	b570      	push	{r4, r5, r6, lr}
10012f78:	0042      	lsls	r2, r0, #1
10012f7a:	004c      	lsls	r4, r1, #1
10012f7c:	0a5d      	lsrs	r5, r3, #9
10012f7e:	0fc3      	lsrs	r3, r0, #31
10012f80:	0248      	lsls	r0, r1, #9
10012f82:	0e12      	lsrs	r2, r2, #24
10012f84:	0a46      	lsrs	r6, r0, #9
10012f86:	0e24      	lsrs	r4, r4, #24
10012f88:	0fc9      	lsrs	r1, r1, #31
10012f8a:	2aff      	cmp	r2, #255	; 0xff
10012f8c:	d00f      	beq.n	10012fae <__eqsf2+0x3a>
10012f8e:	2cff      	cmp	r4, #255	; 0xff
10012f90:	d011      	beq.n	10012fb6 <__eqsf2+0x42>
10012f92:	2001      	movs	r0, #1
10012f94:	42a2      	cmp	r2, r4
10012f96:	d000      	beq.n	10012f9a <__eqsf2+0x26>
10012f98:	bd70      	pop	{r4, r5, r6, pc}
10012f9a:	42b5      	cmp	r5, r6
10012f9c:	d1fc      	bne.n	10012f98 <__eqsf2+0x24>
10012f9e:	428b      	cmp	r3, r1
10012fa0:	d00d      	beq.n	10012fbe <__eqsf2+0x4a>
10012fa2:	2a00      	cmp	r2, #0
10012fa4:	d1f8      	bne.n	10012f98 <__eqsf2+0x24>
10012fa6:	0028      	movs	r0, r5
10012fa8:	1e43      	subs	r3, r0, #1
10012faa:	4198      	sbcs	r0, r3
10012fac:	e7f4      	b.n	10012f98 <__eqsf2+0x24>
10012fae:	2001      	movs	r0, #1
10012fb0:	2d00      	cmp	r5, #0
10012fb2:	d1f1      	bne.n	10012f98 <__eqsf2+0x24>
10012fb4:	e7eb      	b.n	10012f8e <__eqsf2+0x1a>
10012fb6:	2001      	movs	r0, #1
10012fb8:	2e00      	cmp	r6, #0
10012fba:	d1ed      	bne.n	10012f98 <__eqsf2+0x24>
10012fbc:	e7e9      	b.n	10012f92 <__eqsf2+0x1e>
10012fbe:	2000      	movs	r0, #0
10012fc0:	e7ea      	b.n	10012f98 <__eqsf2+0x24>
10012fc2:	46c0      	nop			; (mov r8, r8)

10012fc4 <__gesf2>:
10012fc4:	0243      	lsls	r3, r0, #9
10012fc6:	b5f0      	push	{r4, r5, r6, r7, lr}
10012fc8:	0042      	lsls	r2, r0, #1
10012fca:	0a5d      	lsrs	r5, r3, #9
10012fcc:	0fc3      	lsrs	r3, r0, #31
10012fce:	0248      	lsls	r0, r1, #9
10012fd0:	0a44      	lsrs	r4, r0, #9
10012fd2:	0048      	lsls	r0, r1, #1
10012fd4:	0e12      	lsrs	r2, r2, #24
10012fd6:	0e00      	lsrs	r0, r0, #24
10012fd8:	0fc9      	lsrs	r1, r1, #31
10012fda:	2aff      	cmp	r2, #255	; 0xff
10012fdc:	d01f      	beq.n	1001301e <__gesf2+0x5a>
10012fde:	28ff      	cmp	r0, #255	; 0xff
10012fe0:	d022      	beq.n	10013028 <__gesf2+0x64>
10012fe2:	2a00      	cmp	r2, #0
10012fe4:	d109      	bne.n	10012ffa <__gesf2+0x36>
10012fe6:	426e      	negs	r6, r5
10012fe8:	416e      	adcs	r6, r5
10012fea:	2800      	cmp	r0, #0
10012fec:	d10f      	bne.n	1001300e <__gesf2+0x4a>
10012fee:	2c00      	cmp	r4, #0
10012ff0:	d10d      	bne.n	1001300e <__gesf2+0x4a>
10012ff2:	2000      	movs	r0, #0
10012ff4:	2d00      	cmp	r5, #0
10012ff6:	d009      	beq.n	1001300c <__gesf2+0x48>
10012ff8:	e005      	b.n	10013006 <__gesf2+0x42>
10012ffa:	2800      	cmp	r0, #0
10012ffc:	d101      	bne.n	10013002 <__gesf2+0x3e>
10012ffe:	2c00      	cmp	r4, #0
10013000:	d001      	beq.n	10013006 <__gesf2+0x42>
10013002:	428b      	cmp	r3, r1
10013004:	d013      	beq.n	1001302e <__gesf2+0x6a>
10013006:	4258      	negs	r0, r3
10013008:	2301      	movs	r3, #1
1001300a:	4318      	orrs	r0, r3
1001300c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001300e:	2e00      	cmp	r6, #0
10013010:	d0f7      	beq.n	10013002 <__gesf2+0x3e>
10013012:	4248      	negs	r0, r1
10013014:	4141      	adcs	r1, r0
10013016:	2001      	movs	r0, #1
10013018:	4249      	negs	r1, r1
1001301a:	4308      	orrs	r0, r1
1001301c:	e7f6      	b.n	1001300c <__gesf2+0x48>
1001301e:	2d00      	cmp	r5, #0
10013020:	d0dd      	beq.n	10012fde <__gesf2+0x1a>
10013022:	2002      	movs	r0, #2
10013024:	4240      	negs	r0, r0
10013026:	e7f1      	b.n	1001300c <__gesf2+0x48>
10013028:	2c00      	cmp	r4, #0
1001302a:	d0da      	beq.n	10012fe2 <__gesf2+0x1e>
1001302c:	e7f9      	b.n	10013022 <__gesf2+0x5e>
1001302e:	4282      	cmp	r2, r0
10013030:	dce9      	bgt.n	10013006 <__gesf2+0x42>
10013032:	db04      	blt.n	1001303e <__gesf2+0x7a>
10013034:	42a5      	cmp	r5, r4
10013036:	d8e6      	bhi.n	10013006 <__gesf2+0x42>
10013038:	2000      	movs	r0, #0
1001303a:	42a5      	cmp	r5, r4
1001303c:	d2e6      	bcs.n	1001300c <__gesf2+0x48>
1001303e:	4258      	negs	r0, r3
10013040:	4143      	adcs	r3, r0
10013042:	2001      	movs	r0, #1
10013044:	425b      	negs	r3, r3
10013046:	4318      	orrs	r0, r3
10013048:	e7e0      	b.n	1001300c <__gesf2+0x48>
1001304a:	46c0      	nop			; (mov r8, r8)

1001304c <__lesf2>:
1001304c:	0243      	lsls	r3, r0, #9
1001304e:	b5f0      	push	{r4, r5, r6, r7, lr}
10013050:	0042      	lsls	r2, r0, #1
10013052:	004c      	lsls	r4, r1, #1
10013054:	0a5e      	lsrs	r6, r3, #9
10013056:	0fc3      	lsrs	r3, r0, #31
10013058:	0248      	lsls	r0, r1, #9
1001305a:	0e12      	lsrs	r2, r2, #24
1001305c:	0a45      	lsrs	r5, r0, #9
1001305e:	0e24      	lsrs	r4, r4, #24
10013060:	0fc9      	lsrs	r1, r1, #31
10013062:	2aff      	cmp	r2, #255	; 0xff
10013064:	d017      	beq.n	10013096 <__lesf2+0x4a>
10013066:	2cff      	cmp	r4, #255	; 0xff
10013068:	d019      	beq.n	1001309e <__lesf2+0x52>
1001306a:	2a00      	cmp	r2, #0
1001306c:	d10b      	bne.n	10013086 <__lesf2+0x3a>
1001306e:	4270      	negs	r0, r6
10013070:	4170      	adcs	r0, r6
10013072:	2c00      	cmp	r4, #0
10013074:	d017      	beq.n	100130a6 <__lesf2+0x5a>
10013076:	2800      	cmp	r0, #0
10013078:	d007      	beq.n	1001308a <__lesf2+0x3e>
1001307a:	4248      	negs	r0, r1
1001307c:	4141      	adcs	r1, r0
1001307e:	2001      	movs	r0, #1
10013080:	4249      	negs	r1, r1
10013082:	4308      	orrs	r0, r1
10013084:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013086:	2c00      	cmp	r4, #0
10013088:	d013      	beq.n	100130b2 <__lesf2+0x66>
1001308a:	428b      	cmp	r3, r1
1001308c:	d014      	beq.n	100130b8 <__lesf2+0x6c>
1001308e:	4258      	negs	r0, r3
10013090:	2301      	movs	r3, #1
10013092:	4318      	orrs	r0, r3
10013094:	e7f6      	b.n	10013084 <__lesf2+0x38>
10013096:	2002      	movs	r0, #2
10013098:	2e00      	cmp	r6, #0
1001309a:	d1f3      	bne.n	10013084 <__lesf2+0x38>
1001309c:	e7e3      	b.n	10013066 <__lesf2+0x1a>
1001309e:	2002      	movs	r0, #2
100130a0:	2d00      	cmp	r5, #0
100130a2:	d1ef      	bne.n	10013084 <__lesf2+0x38>
100130a4:	e7e1      	b.n	1001306a <__lesf2+0x1e>
100130a6:	2d00      	cmp	r5, #0
100130a8:	d1e5      	bne.n	10013076 <__lesf2+0x2a>
100130aa:	2000      	movs	r0, #0
100130ac:	2e00      	cmp	r6, #0
100130ae:	d0e9      	beq.n	10013084 <__lesf2+0x38>
100130b0:	e7ed      	b.n	1001308e <__lesf2+0x42>
100130b2:	2d00      	cmp	r5, #0
100130b4:	d1e9      	bne.n	1001308a <__lesf2+0x3e>
100130b6:	e7ea      	b.n	1001308e <__lesf2+0x42>
100130b8:	42a2      	cmp	r2, r4
100130ba:	dce8      	bgt.n	1001308e <__lesf2+0x42>
100130bc:	db04      	blt.n	100130c8 <__lesf2+0x7c>
100130be:	42ae      	cmp	r6, r5
100130c0:	d8e5      	bhi.n	1001308e <__lesf2+0x42>
100130c2:	2000      	movs	r0, #0
100130c4:	42ae      	cmp	r6, r5
100130c6:	d2dd      	bcs.n	10013084 <__lesf2+0x38>
100130c8:	4258      	negs	r0, r3
100130ca:	4143      	adcs	r3, r0
100130cc:	2001      	movs	r0, #1
100130ce:	425b      	negs	r3, r3
100130d0:	4318      	orrs	r0, r3
100130d2:	e7d7      	b.n	10013084 <__lesf2+0x38>

100130d4 <__aeabi_fmul>:
100130d4:	b5f0      	push	{r4, r5, r6, r7, lr}
100130d6:	4657      	mov	r7, sl
100130d8:	464e      	mov	r6, r9
100130da:	4645      	mov	r5, r8
100130dc:	0043      	lsls	r3, r0, #1
100130de:	b4e0      	push	{r5, r6, r7}
100130e0:	0246      	lsls	r6, r0, #9
100130e2:	4688      	mov	r8, r1
100130e4:	0a76      	lsrs	r6, r6, #9
100130e6:	0e1f      	lsrs	r7, r3, #24
100130e8:	0fc4      	lsrs	r4, r0, #31
100130ea:	2f00      	cmp	r7, #0
100130ec:	d047      	beq.n	1001317e <__aeabi_fmul+0xaa>
100130ee:	2fff      	cmp	r7, #255	; 0xff
100130f0:	d025      	beq.n	1001313e <__aeabi_fmul+0x6a>
100130f2:	2300      	movs	r3, #0
100130f4:	2580      	movs	r5, #128	; 0x80
100130f6:	469a      	mov	sl, r3
100130f8:	4699      	mov	r9, r3
100130fa:	00f6      	lsls	r6, r6, #3
100130fc:	04ed      	lsls	r5, r5, #19
100130fe:	432e      	orrs	r6, r5
10013100:	3f7f      	subs	r7, #127	; 0x7f
10013102:	4643      	mov	r3, r8
10013104:	4642      	mov	r2, r8
10013106:	025d      	lsls	r5, r3, #9
10013108:	0fd2      	lsrs	r2, r2, #31
1001310a:	005b      	lsls	r3, r3, #1
1001310c:	0a6d      	lsrs	r5, r5, #9
1001310e:	0e1b      	lsrs	r3, r3, #24
10013110:	4690      	mov	r8, r2
10013112:	d040      	beq.n	10013196 <__aeabi_fmul+0xc2>
10013114:	2bff      	cmp	r3, #255	; 0xff
10013116:	d039      	beq.n	1001318c <__aeabi_fmul+0xb8>
10013118:	2280      	movs	r2, #128	; 0x80
1001311a:	2000      	movs	r0, #0
1001311c:	00ed      	lsls	r5, r5, #3
1001311e:	04d2      	lsls	r2, r2, #19
10013120:	4315      	orrs	r5, r2
10013122:	3b7f      	subs	r3, #127	; 0x7f
10013124:	18fb      	adds	r3, r7, r3
10013126:	4642      	mov	r2, r8
10013128:	4657      	mov	r7, sl
1001312a:	1c59      	adds	r1, r3, #1
1001312c:	4062      	eors	r2, r4
1001312e:	468c      	mov	ip, r1
10013130:	4307      	orrs	r7, r0
10013132:	2f0f      	cmp	r7, #15
10013134:	d85c      	bhi.n	100131f0 <__aeabi_fmul+0x11c>
10013136:	496f      	ldr	r1, [pc, #444]	; (100132f4 <__aeabi_fmul+0x220>)
10013138:	00bf      	lsls	r7, r7, #2
1001313a:	59c9      	ldr	r1, [r1, r7]
1001313c:	468f      	mov	pc, r1
1001313e:	2e00      	cmp	r6, #0
10013140:	d145      	bne.n	100131ce <__aeabi_fmul+0xfa>
10013142:	2308      	movs	r3, #8
10013144:	469a      	mov	sl, r3
10013146:	3b06      	subs	r3, #6
10013148:	4699      	mov	r9, r3
1001314a:	e7da      	b.n	10013102 <__aeabi_fmul+0x2e>
1001314c:	4642      	mov	r2, r8
1001314e:	2802      	cmp	r0, #2
10013150:	d02d      	beq.n	100131ae <__aeabi_fmul+0xda>
10013152:	2803      	cmp	r0, #3
10013154:	d100      	bne.n	10013158 <__aeabi_fmul+0x84>
10013156:	e0c3      	b.n	100132e0 <__aeabi_fmul+0x20c>
10013158:	2801      	cmp	r0, #1
1001315a:	d000      	beq.n	1001315e <__aeabi_fmul+0x8a>
1001315c:	e0a2      	b.n	100132a4 <__aeabi_fmul+0x1d0>
1001315e:	2500      	movs	r5, #0
10013160:	2600      	movs	r6, #0
10013162:	4002      	ands	r2, r0
10013164:	b2d4      	uxtb	r4, r2
10013166:	0276      	lsls	r6, r6, #9
10013168:	05ed      	lsls	r5, r5, #23
1001316a:	0a76      	lsrs	r6, r6, #9
1001316c:	432e      	orrs	r6, r5
1001316e:	07e4      	lsls	r4, r4, #31
10013170:	4326      	orrs	r6, r4
10013172:	0030      	movs	r0, r6
10013174:	bc1c      	pop	{r2, r3, r4}
10013176:	4690      	mov	r8, r2
10013178:	4699      	mov	r9, r3
1001317a:	46a2      	mov	sl, r4
1001317c:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001317e:	2e00      	cmp	r6, #0
10013180:	d11a      	bne.n	100131b8 <__aeabi_fmul+0xe4>
10013182:	2304      	movs	r3, #4
10013184:	469a      	mov	sl, r3
10013186:	3b03      	subs	r3, #3
10013188:	4699      	mov	r9, r3
1001318a:	e7ba      	b.n	10013102 <__aeabi_fmul+0x2e>
1001318c:	002a      	movs	r2, r5
1001318e:	1e51      	subs	r1, r2, #1
10013190:	418a      	sbcs	r2, r1
10013192:	1c90      	adds	r0, r2, #2
10013194:	e7c6      	b.n	10013124 <__aeabi_fmul+0x50>
10013196:	2001      	movs	r0, #1
10013198:	2d00      	cmp	r5, #0
1001319a:	d0c3      	beq.n	10013124 <__aeabi_fmul+0x50>
1001319c:	0028      	movs	r0, r5
1001319e:	f002 f9a9 	bl	100154f4 <__clzsi2>
100131a2:	1f43      	subs	r3, r0, #5
100131a4:	3076      	adds	r0, #118	; 0x76
100131a6:	409d      	lsls	r5, r3
100131a8:	4243      	negs	r3, r0
100131aa:	2000      	movs	r0, #0
100131ac:	e7ba      	b.n	10013124 <__aeabi_fmul+0x50>
100131ae:	2401      	movs	r4, #1
100131b0:	25ff      	movs	r5, #255	; 0xff
100131b2:	4014      	ands	r4, r2
100131b4:	2600      	movs	r6, #0
100131b6:	e7d6      	b.n	10013166 <__aeabi_fmul+0x92>
100131b8:	0030      	movs	r0, r6
100131ba:	f002 f99b 	bl	100154f4 <__clzsi2>
100131be:	1f43      	subs	r3, r0, #5
100131c0:	409e      	lsls	r6, r3
100131c2:	2300      	movs	r3, #0
100131c4:	3076      	adds	r0, #118	; 0x76
100131c6:	4247      	negs	r7, r0
100131c8:	469a      	mov	sl, r3
100131ca:	4699      	mov	r9, r3
100131cc:	e799      	b.n	10013102 <__aeabi_fmul+0x2e>
100131ce:	230c      	movs	r3, #12
100131d0:	469a      	mov	sl, r3
100131d2:	3b09      	subs	r3, #9
100131d4:	4699      	mov	r9, r3
100131d6:	e794      	b.n	10013102 <__aeabi_fmul+0x2e>
100131d8:	2680      	movs	r6, #128	; 0x80
100131da:	2400      	movs	r4, #0
100131dc:	03f6      	lsls	r6, r6, #15
100131de:	25ff      	movs	r5, #255	; 0xff
100131e0:	e7c1      	b.n	10013166 <__aeabi_fmul+0x92>
100131e2:	0035      	movs	r5, r6
100131e4:	4648      	mov	r0, r9
100131e6:	e7b2      	b.n	1001314e <__aeabi_fmul+0x7a>
100131e8:	0035      	movs	r5, r6
100131ea:	0022      	movs	r2, r4
100131ec:	4648      	mov	r0, r9
100131ee:	e7ae      	b.n	1001314e <__aeabi_fmul+0x7a>
100131f0:	0429      	lsls	r1, r5, #16
100131f2:	0c09      	lsrs	r1, r1, #16
100131f4:	0008      	movs	r0, r1
100131f6:	0c37      	lsrs	r7, r6, #16
100131f8:	0436      	lsls	r6, r6, #16
100131fa:	0c36      	lsrs	r6, r6, #16
100131fc:	0c2c      	lsrs	r4, r5, #16
100131fe:	4379      	muls	r1, r7
10013200:	4370      	muls	r0, r6
10013202:	4367      	muls	r7, r4
10013204:	4374      	muls	r4, r6
10013206:	0c06      	lsrs	r6, r0, #16
10013208:	1864      	adds	r4, r4, r1
1001320a:	1936      	adds	r6, r6, r4
1001320c:	42b1      	cmp	r1, r6
1001320e:	d903      	bls.n	10013218 <__aeabi_fmul+0x144>
10013210:	2180      	movs	r1, #128	; 0x80
10013212:	0249      	lsls	r1, r1, #9
10013214:	4688      	mov	r8, r1
10013216:	4447      	add	r7, r8
10013218:	0400      	lsls	r0, r0, #16
1001321a:	0c00      	lsrs	r0, r0, #16
1001321c:	0431      	lsls	r1, r6, #16
1001321e:	1809      	adds	r1, r1, r0
10013220:	018d      	lsls	r5, r1, #6
10013222:	1e68      	subs	r0, r5, #1
10013224:	4185      	sbcs	r5, r0
10013226:	0e89      	lsrs	r1, r1, #26
10013228:	4329      	orrs	r1, r5
1001322a:	0c35      	lsrs	r5, r6, #16
1001322c:	19ed      	adds	r5, r5, r7
1001322e:	01ad      	lsls	r5, r5, #6
10013230:	430d      	orrs	r5, r1
10013232:	0129      	lsls	r1, r5, #4
10013234:	d504      	bpl.n	10013240 <__aeabi_fmul+0x16c>
10013236:	2301      	movs	r3, #1
10013238:	0869      	lsrs	r1, r5, #1
1001323a:	401d      	ands	r5, r3
1001323c:	4663      	mov	r3, ip
1001323e:	430d      	orrs	r5, r1
10013240:	0019      	movs	r1, r3
10013242:	317f      	adds	r1, #127	; 0x7f
10013244:	2900      	cmp	r1, #0
10013246:	dd25      	ble.n	10013294 <__aeabi_fmul+0x1c0>
10013248:	0768      	lsls	r0, r5, #29
1001324a:	d004      	beq.n	10013256 <__aeabi_fmul+0x182>
1001324c:	200f      	movs	r0, #15
1001324e:	4028      	ands	r0, r5
10013250:	2804      	cmp	r0, #4
10013252:	d000      	beq.n	10013256 <__aeabi_fmul+0x182>
10013254:	3504      	adds	r5, #4
10013256:	0128      	lsls	r0, r5, #4
10013258:	d503      	bpl.n	10013262 <__aeabi_fmul+0x18e>
1001325a:	4927      	ldr	r1, [pc, #156]	; (100132f8 <__aeabi_fmul+0x224>)
1001325c:	3380      	adds	r3, #128	; 0x80
1001325e:	400d      	ands	r5, r1
10013260:	0019      	movs	r1, r3
10013262:	29fe      	cmp	r1, #254	; 0xfe
10013264:	dca3      	bgt.n	100131ae <__aeabi_fmul+0xda>
10013266:	2401      	movs	r4, #1
10013268:	01ad      	lsls	r5, r5, #6
1001326a:	0a6e      	lsrs	r6, r5, #9
1001326c:	4014      	ands	r4, r2
1001326e:	b2cd      	uxtb	r5, r1
10013270:	e779      	b.n	10013166 <__aeabi_fmul+0x92>
10013272:	2080      	movs	r0, #128	; 0x80
10013274:	03c0      	lsls	r0, r0, #15
10013276:	4206      	tst	r6, r0
10013278:	d007      	beq.n	1001328a <__aeabi_fmul+0x1b6>
1001327a:	4205      	tst	r5, r0
1001327c:	d105      	bne.n	1001328a <__aeabi_fmul+0x1b6>
1001327e:	4328      	orrs	r0, r5
10013280:	0246      	lsls	r6, r0, #9
10013282:	0a76      	lsrs	r6, r6, #9
10013284:	4644      	mov	r4, r8
10013286:	25ff      	movs	r5, #255	; 0xff
10013288:	e76d      	b.n	10013166 <__aeabi_fmul+0x92>
1001328a:	4306      	orrs	r6, r0
1001328c:	0276      	lsls	r6, r6, #9
1001328e:	0a76      	lsrs	r6, r6, #9
10013290:	25ff      	movs	r5, #255	; 0xff
10013292:	e768      	b.n	10013166 <__aeabi_fmul+0x92>
10013294:	2401      	movs	r4, #1
10013296:	1a61      	subs	r1, r4, r1
10013298:	291b      	cmp	r1, #27
1001329a:	dd05      	ble.n	100132a8 <__aeabi_fmul+0x1d4>
1001329c:	4014      	ands	r4, r2
1001329e:	2500      	movs	r5, #0
100132a0:	2600      	movs	r6, #0
100132a2:	e760      	b.n	10013166 <__aeabi_fmul+0x92>
100132a4:	4663      	mov	r3, ip
100132a6:	e7cb      	b.n	10013240 <__aeabi_fmul+0x16c>
100132a8:	002e      	movs	r6, r5
100132aa:	2320      	movs	r3, #32
100132ac:	40ce      	lsrs	r6, r1
100132ae:	1a59      	subs	r1, r3, r1
100132b0:	408d      	lsls	r5, r1
100132b2:	1e6b      	subs	r3, r5, #1
100132b4:	419d      	sbcs	r5, r3
100132b6:	432e      	orrs	r6, r5
100132b8:	0773      	lsls	r3, r6, #29
100132ba:	d004      	beq.n	100132c6 <__aeabi_fmul+0x1f2>
100132bc:	230f      	movs	r3, #15
100132be:	4033      	ands	r3, r6
100132c0:	2b04      	cmp	r3, #4
100132c2:	d000      	beq.n	100132c6 <__aeabi_fmul+0x1f2>
100132c4:	3604      	adds	r6, #4
100132c6:	0173      	lsls	r3, r6, #5
100132c8:	d504      	bpl.n	100132d4 <__aeabi_fmul+0x200>
100132ca:	2401      	movs	r4, #1
100132cc:	2501      	movs	r5, #1
100132ce:	4014      	ands	r4, r2
100132d0:	2600      	movs	r6, #0
100132d2:	e748      	b.n	10013166 <__aeabi_fmul+0x92>
100132d4:	2401      	movs	r4, #1
100132d6:	01b6      	lsls	r6, r6, #6
100132d8:	0a76      	lsrs	r6, r6, #9
100132da:	4014      	ands	r4, r2
100132dc:	2500      	movs	r5, #0
100132de:	e742      	b.n	10013166 <__aeabi_fmul+0x92>
100132e0:	2680      	movs	r6, #128	; 0x80
100132e2:	2401      	movs	r4, #1
100132e4:	03f6      	lsls	r6, r6, #15
100132e6:	432e      	orrs	r6, r5
100132e8:	0276      	lsls	r6, r6, #9
100132ea:	0a76      	lsrs	r6, r6, #9
100132ec:	4014      	ands	r4, r2
100132ee:	25ff      	movs	r5, #255	; 0xff
100132f0:	e739      	b.n	10013166 <__aeabi_fmul+0x92>
100132f2:	46c0      	nop			; (mov r8, r8)
100132f4:	10017780 	.word	0x10017780
100132f8:	f7ffffff 	.word	0xf7ffffff

100132fc <__aeabi_fsub>:
100132fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100132fe:	024a      	lsls	r2, r1, #9
10013300:	004e      	lsls	r6, r1, #1
10013302:	0243      	lsls	r3, r0, #9
10013304:	0044      	lsls	r4, r0, #1
10013306:	0e24      	lsrs	r4, r4, #24
10013308:	0fc5      	lsrs	r5, r0, #31
1001330a:	099b      	lsrs	r3, r3, #6
1001330c:	0e36      	lsrs	r6, r6, #24
1001330e:	0fc9      	lsrs	r1, r1, #31
10013310:	0992      	lsrs	r2, r2, #6
10013312:	2eff      	cmp	r6, #255	; 0xff
10013314:	d100      	bne.n	10013318 <__aeabi_fsub+0x1c>
10013316:	e083      	b.n	10013420 <__aeabi_fsub+0x124>
10013318:	2001      	movs	r0, #1
1001331a:	4041      	eors	r1, r0
1001331c:	1ba0      	subs	r0, r4, r6
1001331e:	42a9      	cmp	r1, r5
10013320:	d05c      	beq.n	100133dc <__aeabi_fsub+0xe0>
10013322:	2800      	cmp	r0, #0
10013324:	dc00      	bgt.n	10013328 <__aeabi_fsub+0x2c>
10013326:	e095      	b.n	10013454 <__aeabi_fsub+0x158>
10013328:	2e00      	cmp	r6, #0
1001332a:	d11c      	bne.n	10013366 <__aeabi_fsub+0x6a>
1001332c:	2a00      	cmp	r2, #0
1001332e:	d000      	beq.n	10013332 <__aeabi_fsub+0x36>
10013330:	e081      	b.n	10013436 <__aeabi_fsub+0x13a>
10013332:	075a      	lsls	r2, r3, #29
10013334:	d004      	beq.n	10013340 <__aeabi_fsub+0x44>
10013336:	220f      	movs	r2, #15
10013338:	401a      	ands	r2, r3
1001333a:	2a04      	cmp	r2, #4
1001333c:	d000      	beq.n	10013340 <__aeabi_fsub+0x44>
1001333e:	3304      	adds	r3, #4
10013340:	015a      	lsls	r2, r3, #5
10013342:	d53b      	bpl.n	100133bc <__aeabi_fsub+0xc0>
10013344:	3401      	adds	r4, #1
10013346:	2cff      	cmp	r4, #255	; 0xff
10013348:	d100      	bne.n	1001334c <__aeabi_fsub+0x50>
1001334a:	e091      	b.n	10013470 <__aeabi_fsub+0x174>
1001334c:	2001      	movs	r0, #1
1001334e:	019b      	lsls	r3, r3, #6
10013350:	0a5b      	lsrs	r3, r3, #9
10013352:	b2e4      	uxtb	r4, r4
10013354:	4005      	ands	r5, r0
10013356:	025b      	lsls	r3, r3, #9
10013358:	05e4      	lsls	r4, r4, #23
1001335a:	0a5b      	lsrs	r3, r3, #9
1001335c:	07ed      	lsls	r5, r5, #31
1001335e:	4323      	orrs	r3, r4
10013360:	432b      	orrs	r3, r5
10013362:	0018      	movs	r0, r3
10013364:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013366:	2cff      	cmp	r4, #255	; 0xff
10013368:	d0e3      	beq.n	10013332 <__aeabi_fsub+0x36>
1001336a:	2180      	movs	r1, #128	; 0x80
1001336c:	04c9      	lsls	r1, r1, #19
1001336e:	430a      	orrs	r2, r1
10013370:	281b      	cmp	r0, #27
10013372:	dd00      	ble.n	10013376 <__aeabi_fsub+0x7a>
10013374:	e090      	b.n	10013498 <__aeabi_fsub+0x19c>
10013376:	0016      	movs	r6, r2
10013378:	2120      	movs	r1, #32
1001337a:	40c6      	lsrs	r6, r0
1001337c:	1a08      	subs	r0, r1, r0
1001337e:	4082      	lsls	r2, r0
10013380:	1e51      	subs	r1, r2, #1
10013382:	418a      	sbcs	r2, r1
10013384:	4332      	orrs	r2, r6
10013386:	1a9b      	subs	r3, r3, r2
10013388:	015a      	lsls	r2, r3, #5
1001338a:	d515      	bpl.n	100133b8 <__aeabi_fsub+0xbc>
1001338c:	019b      	lsls	r3, r3, #6
1001338e:	099e      	lsrs	r6, r3, #6
10013390:	0030      	movs	r0, r6
10013392:	f002 f8af 	bl	100154f4 <__clzsi2>
10013396:	3805      	subs	r0, #5
10013398:	4086      	lsls	r6, r0
1001339a:	4284      	cmp	r4, r0
1001339c:	dc6c      	bgt.n	10013478 <__aeabi_fsub+0x17c>
1001339e:	1b04      	subs	r4, r0, r4
100133a0:	0033      	movs	r3, r6
100133a2:	2020      	movs	r0, #32
100133a4:	3401      	adds	r4, #1
100133a6:	40e3      	lsrs	r3, r4
100133a8:	1b04      	subs	r4, r0, r4
100133aa:	40a6      	lsls	r6, r4
100133ac:	1e72      	subs	r2, r6, #1
100133ae:	4196      	sbcs	r6, r2
100133b0:	2400      	movs	r4, #0
100133b2:	4333      	orrs	r3, r6
100133b4:	e7bd      	b.n	10013332 <__aeabi_fsub+0x36>
100133b6:	000d      	movs	r5, r1
100133b8:	075a      	lsls	r2, r3, #29
100133ba:	d1bc      	bne.n	10013336 <__aeabi_fsub+0x3a>
100133bc:	08df      	lsrs	r7, r3, #3
100133be:	2301      	movs	r3, #1
100133c0:	401d      	ands	r5, r3
100133c2:	2cff      	cmp	r4, #255	; 0xff
100133c4:	d133      	bne.n	1001342e <__aeabi_fsub+0x132>
100133c6:	2f00      	cmp	r7, #0
100133c8:	d100      	bne.n	100133cc <__aeabi_fsub+0xd0>
100133ca:	e090      	b.n	100134ee <__aeabi_fsub+0x1f2>
100133cc:	2280      	movs	r2, #128	; 0x80
100133ce:	03d2      	lsls	r2, r2, #15
100133d0:	0013      	movs	r3, r2
100133d2:	433b      	orrs	r3, r7
100133d4:	025b      	lsls	r3, r3, #9
100133d6:	0a5b      	lsrs	r3, r3, #9
100133d8:	24ff      	movs	r4, #255	; 0xff
100133da:	e7bc      	b.n	10013356 <__aeabi_fsub+0x5a>
100133dc:	2800      	cmp	r0, #0
100133de:	dd4f      	ble.n	10013480 <__aeabi_fsub+0x184>
100133e0:	2e00      	cmp	r6, #0
100133e2:	d02e      	beq.n	10013442 <__aeabi_fsub+0x146>
100133e4:	2cff      	cmp	r4, #255	; 0xff
100133e6:	d0a4      	beq.n	10013332 <__aeabi_fsub+0x36>
100133e8:	2580      	movs	r5, #128	; 0x80
100133ea:	04ed      	lsls	r5, r5, #19
100133ec:	432a      	orrs	r2, r5
100133ee:	281b      	cmp	r0, #27
100133f0:	dd00      	ble.n	100133f4 <__aeabi_fsub+0xf8>
100133f2:	e097      	b.n	10013524 <__aeabi_fsub+0x228>
100133f4:	0016      	movs	r6, r2
100133f6:	2520      	movs	r5, #32
100133f8:	40c6      	lsrs	r6, r0
100133fa:	1a28      	subs	r0, r5, r0
100133fc:	4082      	lsls	r2, r0
100133fe:	1e50      	subs	r0, r2, #1
10013400:	4182      	sbcs	r2, r0
10013402:	4332      	orrs	r2, r6
10013404:	189b      	adds	r3, r3, r2
10013406:	015a      	lsls	r2, r3, #5
10013408:	d5d5      	bpl.n	100133b6 <__aeabi_fsub+0xba>
1001340a:	3401      	adds	r4, #1
1001340c:	2cff      	cmp	r4, #255	; 0xff
1001340e:	d06d      	beq.n	100134ec <__aeabi_fsub+0x1f0>
10013410:	2201      	movs	r2, #1
10013412:	487b      	ldr	r0, [pc, #492]	; (10013600 <__aeabi_fsub+0x304>)
10013414:	401a      	ands	r2, r3
10013416:	085b      	lsrs	r3, r3, #1
10013418:	4003      	ands	r3, r0
1001341a:	4313      	orrs	r3, r2
1001341c:	000d      	movs	r5, r1
1001341e:	e788      	b.n	10013332 <__aeabi_fsub+0x36>
10013420:	2a00      	cmp	r2, #0
10013422:	d000      	beq.n	10013426 <__aeabi_fsub+0x12a>
10013424:	e77a      	b.n	1001331c <__aeabi_fsub+0x20>
10013426:	e777      	b.n	10013318 <__aeabi_fsub+0x1c>
10013428:	1e03      	subs	r3, r0, #0
1001342a:	d1c5      	bne.n	100133b8 <__aeabi_fsub+0xbc>
1001342c:	2500      	movs	r5, #0
1001342e:	027b      	lsls	r3, r7, #9
10013430:	0a5b      	lsrs	r3, r3, #9
10013432:	b2e4      	uxtb	r4, r4
10013434:	e78f      	b.n	10013356 <__aeabi_fsub+0x5a>
10013436:	3801      	subs	r0, #1
10013438:	2800      	cmp	r0, #0
1001343a:	d0a4      	beq.n	10013386 <__aeabi_fsub+0x8a>
1001343c:	2cff      	cmp	r4, #255	; 0xff
1001343e:	d197      	bne.n	10013370 <__aeabi_fsub+0x74>
10013440:	e777      	b.n	10013332 <__aeabi_fsub+0x36>
10013442:	2a00      	cmp	r2, #0
10013444:	d100      	bne.n	10013448 <__aeabi_fsub+0x14c>
10013446:	e774      	b.n	10013332 <__aeabi_fsub+0x36>
10013448:	3801      	subs	r0, #1
1001344a:	2800      	cmp	r0, #0
1001344c:	d0da      	beq.n	10013404 <__aeabi_fsub+0x108>
1001344e:	2cff      	cmp	r4, #255	; 0xff
10013450:	d1cd      	bne.n	100133ee <__aeabi_fsub+0xf2>
10013452:	e76e      	b.n	10013332 <__aeabi_fsub+0x36>
10013454:	2800      	cmp	r0, #0
10013456:	d121      	bne.n	1001349c <__aeabi_fsub+0x1a0>
10013458:	1c60      	adds	r0, r4, #1
1001345a:	b2c0      	uxtb	r0, r0
1001345c:	2801      	cmp	r0, #1
1001345e:	dd58      	ble.n	10013512 <__aeabi_fsub+0x216>
10013460:	2780      	movs	r7, #128	; 0x80
10013462:	1a9e      	subs	r6, r3, r2
10013464:	04ff      	lsls	r7, r7, #19
10013466:	4037      	ands	r7, r6
10013468:	d02f      	beq.n	100134ca <__aeabi_fsub+0x1ce>
1001346a:	1ad6      	subs	r6, r2, r3
1001346c:	000d      	movs	r5, r1
1001346e:	e78f      	b.n	10013390 <__aeabi_fsub+0x94>
10013470:	2301      	movs	r3, #1
10013472:	401d      	ands	r5, r3
10013474:	2300      	movs	r3, #0
10013476:	e76e      	b.n	10013356 <__aeabi_fsub+0x5a>
10013478:	4b62      	ldr	r3, [pc, #392]	; (10013604 <__aeabi_fsub+0x308>)
1001347a:	1a24      	subs	r4, r4, r0
1001347c:	4033      	ands	r3, r6
1001347e:	e758      	b.n	10013332 <__aeabi_fsub+0x36>
10013480:	2800      	cmp	r0, #0
10013482:	d151      	bne.n	10013528 <__aeabi_fsub+0x22c>
10013484:	1c60      	adds	r0, r4, #1
10013486:	b2c6      	uxtb	r6, r0
10013488:	2e01      	cmp	r6, #1
1001348a:	dd33      	ble.n	100134f4 <__aeabi_fsub+0x1f8>
1001348c:	28ff      	cmp	r0, #255	; 0xff
1001348e:	d02d      	beq.n	100134ec <__aeabi_fsub+0x1f0>
10013490:	189b      	adds	r3, r3, r2
10013492:	085b      	lsrs	r3, r3, #1
10013494:	0004      	movs	r4, r0
10013496:	e74c      	b.n	10013332 <__aeabi_fsub+0x36>
10013498:	2201      	movs	r2, #1
1001349a:	e774      	b.n	10013386 <__aeabi_fsub+0x8a>
1001349c:	2c00      	cmp	r4, #0
1001349e:	d01a      	beq.n	100134d6 <__aeabi_fsub+0x1da>
100134a0:	2eff      	cmp	r6, #255	; 0xff
100134a2:	d01f      	beq.n	100134e4 <__aeabi_fsub+0x1e8>
100134a4:	2480      	movs	r4, #128	; 0x80
100134a6:	04e4      	lsls	r4, r4, #19
100134a8:	4240      	negs	r0, r0
100134aa:	4323      	orrs	r3, r4
100134ac:	281b      	cmp	r0, #27
100134ae:	dd00      	ble.n	100134b2 <__aeabi_fsub+0x1b6>
100134b0:	e096      	b.n	100135e0 <__aeabi_fsub+0x2e4>
100134b2:	001d      	movs	r5, r3
100134b4:	2420      	movs	r4, #32
100134b6:	40c5      	lsrs	r5, r0
100134b8:	1a20      	subs	r0, r4, r0
100134ba:	4083      	lsls	r3, r0
100134bc:	1e58      	subs	r0, r3, #1
100134be:	4183      	sbcs	r3, r0
100134c0:	432b      	orrs	r3, r5
100134c2:	1ad3      	subs	r3, r2, r3
100134c4:	0034      	movs	r4, r6
100134c6:	000d      	movs	r5, r1
100134c8:	e75e      	b.n	10013388 <__aeabi_fsub+0x8c>
100134ca:	2e00      	cmp	r6, #0
100134cc:	d000      	beq.n	100134d0 <__aeabi_fsub+0x1d4>
100134ce:	e75f      	b.n	10013390 <__aeabi_fsub+0x94>
100134d0:	2500      	movs	r5, #0
100134d2:	2400      	movs	r4, #0
100134d4:	e7ab      	b.n	1001342e <__aeabi_fsub+0x132>
100134d6:	2b00      	cmp	r3, #0
100134d8:	d044      	beq.n	10013564 <__aeabi_fsub+0x268>
100134da:	43c0      	mvns	r0, r0
100134dc:	2800      	cmp	r0, #0
100134de:	d0f0      	beq.n	100134c2 <__aeabi_fsub+0x1c6>
100134e0:	2eff      	cmp	r6, #255	; 0xff
100134e2:	d1e3      	bne.n	100134ac <__aeabi_fsub+0x1b0>
100134e4:	0013      	movs	r3, r2
100134e6:	24ff      	movs	r4, #255	; 0xff
100134e8:	000d      	movs	r5, r1
100134ea:	e722      	b.n	10013332 <__aeabi_fsub+0x36>
100134ec:	000d      	movs	r5, r1
100134ee:	24ff      	movs	r4, #255	; 0xff
100134f0:	2300      	movs	r3, #0
100134f2:	e730      	b.n	10013356 <__aeabi_fsub+0x5a>
100134f4:	2c00      	cmp	r4, #0
100134f6:	d15d      	bne.n	100135b4 <__aeabi_fsub+0x2b8>
100134f8:	2b00      	cmp	r3, #0
100134fa:	d07d      	beq.n	100135f8 <__aeabi_fsub+0x2fc>
100134fc:	2a00      	cmp	r2, #0
100134fe:	d100      	bne.n	10013502 <__aeabi_fsub+0x206>
10013500:	e717      	b.n	10013332 <__aeabi_fsub+0x36>
10013502:	189b      	adds	r3, r3, r2
10013504:	015a      	lsls	r2, r3, #5
10013506:	d400      	bmi.n	1001350a <__aeabi_fsub+0x20e>
10013508:	e756      	b.n	100133b8 <__aeabi_fsub+0xbc>
1001350a:	4a3e      	ldr	r2, [pc, #248]	; (10013604 <__aeabi_fsub+0x308>)
1001350c:	0004      	movs	r4, r0
1001350e:	4013      	ands	r3, r2
10013510:	e70f      	b.n	10013332 <__aeabi_fsub+0x36>
10013512:	2c00      	cmp	r4, #0
10013514:	d11e      	bne.n	10013554 <__aeabi_fsub+0x258>
10013516:	2b00      	cmp	r3, #0
10013518:	d12f      	bne.n	1001357a <__aeabi_fsub+0x27e>
1001351a:	2a00      	cmp	r2, #0
1001351c:	d065      	beq.n	100135ea <__aeabi_fsub+0x2ee>
1001351e:	0013      	movs	r3, r2
10013520:	000d      	movs	r5, r1
10013522:	e706      	b.n	10013332 <__aeabi_fsub+0x36>
10013524:	2201      	movs	r2, #1
10013526:	e76d      	b.n	10013404 <__aeabi_fsub+0x108>
10013528:	2c00      	cmp	r4, #0
1001352a:	d11f      	bne.n	1001356c <__aeabi_fsub+0x270>
1001352c:	2b00      	cmp	r3, #0
1001352e:	d059      	beq.n	100135e4 <__aeabi_fsub+0x2e8>
10013530:	43c0      	mvns	r0, r0
10013532:	2800      	cmp	r0, #0
10013534:	d00b      	beq.n	1001354e <__aeabi_fsub+0x252>
10013536:	2eff      	cmp	r6, #255	; 0xff
10013538:	d04f      	beq.n	100135da <__aeabi_fsub+0x2de>
1001353a:	281b      	cmp	r0, #27
1001353c:	dc5e      	bgt.n	100135fc <__aeabi_fsub+0x300>
1001353e:	001d      	movs	r5, r3
10013540:	2420      	movs	r4, #32
10013542:	40c5      	lsrs	r5, r0
10013544:	1a20      	subs	r0, r4, r0
10013546:	4083      	lsls	r3, r0
10013548:	1e58      	subs	r0, r3, #1
1001354a:	4183      	sbcs	r3, r0
1001354c:	432b      	orrs	r3, r5
1001354e:	189b      	adds	r3, r3, r2
10013550:	0034      	movs	r4, r6
10013552:	e758      	b.n	10013406 <__aeabi_fsub+0x10a>
10013554:	2b00      	cmp	r3, #0
10013556:	d11c      	bne.n	10013592 <__aeabi_fsub+0x296>
10013558:	2a00      	cmp	r2, #0
1001355a:	d049      	beq.n	100135f0 <__aeabi_fsub+0x2f4>
1001355c:	0013      	movs	r3, r2
1001355e:	000d      	movs	r5, r1
10013560:	24ff      	movs	r4, #255	; 0xff
10013562:	e6e6      	b.n	10013332 <__aeabi_fsub+0x36>
10013564:	0013      	movs	r3, r2
10013566:	0034      	movs	r4, r6
10013568:	000d      	movs	r5, r1
1001356a:	e6e2      	b.n	10013332 <__aeabi_fsub+0x36>
1001356c:	2eff      	cmp	r6, #255	; 0xff
1001356e:	d034      	beq.n	100135da <__aeabi_fsub+0x2de>
10013570:	2480      	movs	r4, #128	; 0x80
10013572:	04e4      	lsls	r4, r4, #19
10013574:	4240      	negs	r0, r0
10013576:	4323      	orrs	r3, r4
10013578:	e7df      	b.n	1001353a <__aeabi_fsub+0x23e>
1001357a:	2a00      	cmp	r2, #0
1001357c:	d100      	bne.n	10013580 <__aeabi_fsub+0x284>
1001357e:	e6d8      	b.n	10013332 <__aeabi_fsub+0x36>
10013580:	2780      	movs	r7, #128	; 0x80
10013582:	1a98      	subs	r0, r3, r2
10013584:	04ff      	lsls	r7, r7, #19
10013586:	4007      	ands	r7, r0
10013588:	d100      	bne.n	1001358c <__aeabi_fsub+0x290>
1001358a:	e74d      	b.n	10013428 <__aeabi_fsub+0x12c>
1001358c:	1ad3      	subs	r3, r2, r3
1001358e:	000d      	movs	r5, r1
10013590:	e6cf      	b.n	10013332 <__aeabi_fsub+0x36>
10013592:	24ff      	movs	r4, #255	; 0xff
10013594:	2a00      	cmp	r2, #0
10013596:	d100      	bne.n	1001359a <__aeabi_fsub+0x29e>
10013598:	e6cb      	b.n	10013332 <__aeabi_fsub+0x36>
1001359a:	2080      	movs	r0, #128	; 0x80
1001359c:	08db      	lsrs	r3, r3, #3
1001359e:	03c0      	lsls	r0, r0, #15
100135a0:	4203      	tst	r3, r0
100135a2:	d004      	beq.n	100135ae <__aeabi_fsub+0x2b2>
100135a4:	08d2      	lsrs	r2, r2, #3
100135a6:	4202      	tst	r2, r0
100135a8:	d101      	bne.n	100135ae <__aeabi_fsub+0x2b2>
100135aa:	0013      	movs	r3, r2
100135ac:	000d      	movs	r5, r1
100135ae:	00db      	lsls	r3, r3, #3
100135b0:	24ff      	movs	r4, #255	; 0xff
100135b2:	e6be      	b.n	10013332 <__aeabi_fsub+0x36>
100135b4:	2b00      	cmp	r3, #0
100135b6:	d010      	beq.n	100135da <__aeabi_fsub+0x2de>
100135b8:	24ff      	movs	r4, #255	; 0xff
100135ba:	2a00      	cmp	r2, #0
100135bc:	d100      	bne.n	100135c0 <__aeabi_fsub+0x2c4>
100135be:	e6b8      	b.n	10013332 <__aeabi_fsub+0x36>
100135c0:	2080      	movs	r0, #128	; 0x80
100135c2:	08db      	lsrs	r3, r3, #3
100135c4:	03c0      	lsls	r0, r0, #15
100135c6:	4203      	tst	r3, r0
100135c8:	d003      	beq.n	100135d2 <__aeabi_fsub+0x2d6>
100135ca:	08d2      	lsrs	r2, r2, #3
100135cc:	4202      	tst	r2, r0
100135ce:	d100      	bne.n	100135d2 <__aeabi_fsub+0x2d6>
100135d0:	0013      	movs	r3, r2
100135d2:	00db      	lsls	r3, r3, #3
100135d4:	000d      	movs	r5, r1
100135d6:	24ff      	movs	r4, #255	; 0xff
100135d8:	e6ab      	b.n	10013332 <__aeabi_fsub+0x36>
100135da:	0013      	movs	r3, r2
100135dc:	24ff      	movs	r4, #255	; 0xff
100135de:	e6a8      	b.n	10013332 <__aeabi_fsub+0x36>
100135e0:	2301      	movs	r3, #1
100135e2:	e76e      	b.n	100134c2 <__aeabi_fsub+0x1c6>
100135e4:	0013      	movs	r3, r2
100135e6:	0034      	movs	r4, r6
100135e8:	e6a3      	b.n	10013332 <__aeabi_fsub+0x36>
100135ea:	2700      	movs	r7, #0
100135ec:	2500      	movs	r5, #0
100135ee:	e71e      	b.n	1001342e <__aeabi_fsub+0x132>
100135f0:	2780      	movs	r7, #128	; 0x80
100135f2:	2500      	movs	r5, #0
100135f4:	03ff      	lsls	r7, r7, #15
100135f6:	e6e9      	b.n	100133cc <__aeabi_fsub+0xd0>
100135f8:	0013      	movs	r3, r2
100135fa:	e69a      	b.n	10013332 <__aeabi_fsub+0x36>
100135fc:	2301      	movs	r3, #1
100135fe:	e7a6      	b.n	1001354e <__aeabi_fsub+0x252>
10013600:	7dffffff 	.word	0x7dffffff
10013604:	fbffffff 	.word	0xfbffffff

10013608 <__aeabi_f2iz>:
10013608:	0243      	lsls	r3, r0, #9
1001360a:	0a59      	lsrs	r1, r3, #9
1001360c:	0043      	lsls	r3, r0, #1
1001360e:	0fc2      	lsrs	r2, r0, #31
10013610:	0e1b      	lsrs	r3, r3, #24
10013612:	2000      	movs	r0, #0
10013614:	2b7e      	cmp	r3, #126	; 0x7e
10013616:	dd0e      	ble.n	10013636 <__aeabi_f2iz+0x2e>
10013618:	2b9d      	cmp	r3, #157	; 0x9d
1001361a:	dc0d      	bgt.n	10013638 <__aeabi_f2iz+0x30>
1001361c:	2080      	movs	r0, #128	; 0x80
1001361e:	0400      	lsls	r0, r0, #16
10013620:	4301      	orrs	r1, r0
10013622:	2b95      	cmp	r3, #149	; 0x95
10013624:	dc0b      	bgt.n	1001363e <__aeabi_f2iz+0x36>
10013626:	2096      	movs	r0, #150	; 0x96
10013628:	1ac3      	subs	r3, r0, r3
1001362a:	40d9      	lsrs	r1, r3
1001362c:	000b      	movs	r3, r1
1001362e:	4258      	negs	r0, r3
10013630:	2a00      	cmp	r2, #0
10013632:	d100      	bne.n	10013636 <__aeabi_f2iz+0x2e>
10013634:	0018      	movs	r0, r3
10013636:	4770      	bx	lr
10013638:	4b03      	ldr	r3, [pc, #12]	; (10013648 <__aeabi_f2iz+0x40>)
1001363a:	18d0      	adds	r0, r2, r3
1001363c:	e7fb      	b.n	10013636 <__aeabi_f2iz+0x2e>
1001363e:	3b96      	subs	r3, #150	; 0x96
10013640:	4099      	lsls	r1, r3
10013642:	000b      	movs	r3, r1
10013644:	e7f3      	b.n	1001362e <__aeabi_f2iz+0x26>
10013646:	46c0      	nop			; (mov r8, r8)
10013648:	7fffffff 	.word	0x7fffffff

1001364c <__aeabi_i2f>:
1001364c:	b570      	push	{r4, r5, r6, lr}
1001364e:	2800      	cmp	r0, #0
10013650:	d030      	beq.n	100136b4 <__aeabi_i2f+0x68>
10013652:	17c3      	asrs	r3, r0, #31
10013654:	18c5      	adds	r5, r0, r3
10013656:	405d      	eors	r5, r3
10013658:	0fc4      	lsrs	r4, r0, #31
1001365a:	0028      	movs	r0, r5
1001365c:	f001 ff4a 	bl	100154f4 <__clzsi2>
10013660:	239e      	movs	r3, #158	; 0x9e
10013662:	1a1b      	subs	r3, r3, r0
10013664:	2b96      	cmp	r3, #150	; 0x96
10013666:	dc0d      	bgt.n	10013684 <__aeabi_i2f+0x38>
10013668:	2296      	movs	r2, #150	; 0x96
1001366a:	1ad2      	subs	r2, r2, r3
1001366c:	4095      	lsls	r5, r2
1001366e:	026a      	lsls	r2, r5, #9
10013670:	0a52      	lsrs	r2, r2, #9
10013672:	b2d8      	uxtb	r0, r3
10013674:	0252      	lsls	r2, r2, #9
10013676:	05c0      	lsls	r0, r0, #23
10013678:	0a52      	lsrs	r2, r2, #9
1001367a:	07e4      	lsls	r4, r4, #31
1001367c:	4302      	orrs	r2, r0
1001367e:	4322      	orrs	r2, r4
10013680:	0010      	movs	r0, r2
10013682:	bd70      	pop	{r4, r5, r6, pc}
10013684:	2b99      	cmp	r3, #153	; 0x99
10013686:	dc19      	bgt.n	100136bc <__aeabi_i2f+0x70>
10013688:	2299      	movs	r2, #153	; 0x99
1001368a:	1ad2      	subs	r2, r2, r3
1001368c:	4095      	lsls	r5, r2
1001368e:	4a12      	ldr	r2, [pc, #72]	; (100136d8 <__aeabi_i2f+0x8c>)
10013690:	402a      	ands	r2, r5
10013692:	0769      	lsls	r1, r5, #29
10013694:	d004      	beq.n	100136a0 <__aeabi_i2f+0x54>
10013696:	210f      	movs	r1, #15
10013698:	400d      	ands	r5, r1
1001369a:	2d04      	cmp	r5, #4
1001369c:	d000      	beq.n	100136a0 <__aeabi_i2f+0x54>
1001369e:	3204      	adds	r2, #4
100136a0:	0151      	lsls	r1, r2, #5
100136a2:	d503      	bpl.n	100136ac <__aeabi_i2f+0x60>
100136a4:	4b0c      	ldr	r3, [pc, #48]	; (100136d8 <__aeabi_i2f+0x8c>)
100136a6:	401a      	ands	r2, r3
100136a8:	239f      	movs	r3, #159	; 0x9f
100136aa:	1a1b      	subs	r3, r3, r0
100136ac:	0192      	lsls	r2, r2, #6
100136ae:	0a52      	lsrs	r2, r2, #9
100136b0:	b2d8      	uxtb	r0, r3
100136b2:	e7df      	b.n	10013674 <__aeabi_i2f+0x28>
100136b4:	2400      	movs	r4, #0
100136b6:	2000      	movs	r0, #0
100136b8:	2200      	movs	r2, #0
100136ba:	e7db      	b.n	10013674 <__aeabi_i2f+0x28>
100136bc:	2205      	movs	r2, #5
100136be:	002e      	movs	r6, r5
100136c0:	1a12      	subs	r2, r2, r0
100136c2:	21b9      	movs	r1, #185	; 0xb9
100136c4:	40d6      	lsrs	r6, r2
100136c6:	002a      	movs	r2, r5
100136c8:	1ac9      	subs	r1, r1, r3
100136ca:	408a      	lsls	r2, r1
100136cc:	1e55      	subs	r5, r2, #1
100136ce:	41aa      	sbcs	r2, r5
100136d0:	0035      	movs	r5, r6
100136d2:	4315      	orrs	r5, r2
100136d4:	e7db      	b.n	1001368e <__aeabi_i2f+0x42>
100136d6:	46c0      	nop			; (mov r8, r8)
100136d8:	fbffffff 	.word	0xfbffffff

100136dc <__aeabi_ui2f>:
100136dc:	b570      	push	{r4, r5, r6, lr}
100136de:	1e04      	subs	r4, r0, #0
100136e0:	d028      	beq.n	10013734 <__aeabi_ui2f+0x58>
100136e2:	f001 ff07 	bl	100154f4 <__clzsi2>
100136e6:	239e      	movs	r3, #158	; 0x9e
100136e8:	1a1b      	subs	r3, r3, r0
100136ea:	2b96      	cmp	r3, #150	; 0x96
100136ec:	dc0a      	bgt.n	10013704 <__aeabi_ui2f+0x28>
100136ee:	2296      	movs	r2, #150	; 0x96
100136f0:	1ad2      	subs	r2, r2, r3
100136f2:	4094      	lsls	r4, r2
100136f4:	0262      	lsls	r2, r4, #9
100136f6:	0a52      	lsrs	r2, r2, #9
100136f8:	b2d8      	uxtb	r0, r3
100136fa:	0252      	lsls	r2, r2, #9
100136fc:	0a52      	lsrs	r2, r2, #9
100136fe:	05c0      	lsls	r0, r0, #23
10013700:	4310      	orrs	r0, r2
10013702:	bd70      	pop	{r4, r5, r6, pc}
10013704:	2b99      	cmp	r3, #153	; 0x99
10013706:	dc18      	bgt.n	1001373a <__aeabi_ui2f+0x5e>
10013708:	2299      	movs	r2, #153	; 0x99
1001370a:	1ad2      	subs	r2, r2, r3
1001370c:	4094      	lsls	r4, r2
1001370e:	4a11      	ldr	r2, [pc, #68]	; (10013754 <__aeabi_ui2f+0x78>)
10013710:	4022      	ands	r2, r4
10013712:	0761      	lsls	r1, r4, #29
10013714:	d004      	beq.n	10013720 <__aeabi_ui2f+0x44>
10013716:	210f      	movs	r1, #15
10013718:	400c      	ands	r4, r1
1001371a:	2c04      	cmp	r4, #4
1001371c:	d000      	beq.n	10013720 <__aeabi_ui2f+0x44>
1001371e:	3204      	adds	r2, #4
10013720:	0151      	lsls	r1, r2, #5
10013722:	d503      	bpl.n	1001372c <__aeabi_ui2f+0x50>
10013724:	4b0b      	ldr	r3, [pc, #44]	; (10013754 <__aeabi_ui2f+0x78>)
10013726:	401a      	ands	r2, r3
10013728:	239f      	movs	r3, #159	; 0x9f
1001372a:	1a1b      	subs	r3, r3, r0
1001372c:	0192      	lsls	r2, r2, #6
1001372e:	0a52      	lsrs	r2, r2, #9
10013730:	b2d8      	uxtb	r0, r3
10013732:	e7e2      	b.n	100136fa <__aeabi_ui2f+0x1e>
10013734:	2000      	movs	r0, #0
10013736:	2200      	movs	r2, #0
10013738:	e7df      	b.n	100136fa <__aeabi_ui2f+0x1e>
1001373a:	2205      	movs	r2, #5
1001373c:	0025      	movs	r5, r4
1001373e:	1a12      	subs	r2, r2, r0
10013740:	21b9      	movs	r1, #185	; 0xb9
10013742:	40d5      	lsrs	r5, r2
10013744:	0022      	movs	r2, r4
10013746:	1ac9      	subs	r1, r1, r3
10013748:	408a      	lsls	r2, r1
1001374a:	1e54      	subs	r4, r2, #1
1001374c:	41a2      	sbcs	r2, r4
1001374e:	002c      	movs	r4, r5
10013750:	4314      	orrs	r4, r2
10013752:	e7dc      	b.n	1001370e <__aeabi_ui2f+0x32>
10013754:	fbffffff 	.word	0xfbffffff

10013758 <__aeabi_dadd>:
10013758:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001375a:	4656      	mov	r6, sl
1001375c:	465f      	mov	r7, fp
1001375e:	464d      	mov	r5, r9
10013760:	4644      	mov	r4, r8
10013762:	b4f0      	push	{r4, r5, r6, r7}
10013764:	000f      	movs	r7, r1
10013766:	0ffd      	lsrs	r5, r7, #31
10013768:	46aa      	mov	sl, r5
1001376a:	0309      	lsls	r1, r1, #12
1001376c:	007c      	lsls	r4, r7, #1
1001376e:	002e      	movs	r6, r5
10013770:	005f      	lsls	r7, r3, #1
10013772:	0f45      	lsrs	r5, r0, #29
10013774:	0a49      	lsrs	r1, r1, #9
10013776:	0d7f      	lsrs	r7, r7, #21
10013778:	4329      	orrs	r1, r5
1001377a:	00c5      	lsls	r5, r0, #3
1001377c:	0318      	lsls	r0, r3, #12
1001377e:	46bc      	mov	ip, r7
10013780:	0a40      	lsrs	r0, r0, #9
10013782:	0f57      	lsrs	r7, r2, #29
10013784:	0d64      	lsrs	r4, r4, #21
10013786:	0fdb      	lsrs	r3, r3, #31
10013788:	4338      	orrs	r0, r7
1001378a:	00d2      	lsls	r2, r2, #3
1001378c:	459a      	cmp	sl, r3
1001378e:	d100      	bne.n	10013792 <__aeabi_dadd+0x3a>
10013790:	e0aa      	b.n	100138e8 <__aeabi_dadd+0x190>
10013792:	4666      	mov	r6, ip
10013794:	1ba6      	subs	r6, r4, r6
10013796:	2e00      	cmp	r6, #0
10013798:	dc00      	bgt.n	1001379c <__aeabi_dadd+0x44>
1001379a:	e0ff      	b.n	1001399c <__aeabi_dadd+0x244>
1001379c:	4663      	mov	r3, ip
1001379e:	2b00      	cmp	r3, #0
100137a0:	d139      	bne.n	10013816 <__aeabi_dadd+0xbe>
100137a2:	0003      	movs	r3, r0
100137a4:	4313      	orrs	r3, r2
100137a6:	d000      	beq.n	100137aa <__aeabi_dadd+0x52>
100137a8:	e0d9      	b.n	1001395e <__aeabi_dadd+0x206>
100137aa:	076b      	lsls	r3, r5, #29
100137ac:	d009      	beq.n	100137c2 <__aeabi_dadd+0x6a>
100137ae:	230f      	movs	r3, #15
100137b0:	402b      	ands	r3, r5
100137b2:	2b04      	cmp	r3, #4
100137b4:	d005      	beq.n	100137c2 <__aeabi_dadd+0x6a>
100137b6:	1d2b      	adds	r3, r5, #4
100137b8:	42ab      	cmp	r3, r5
100137ba:	41ad      	sbcs	r5, r5
100137bc:	426d      	negs	r5, r5
100137be:	1949      	adds	r1, r1, r5
100137c0:	001d      	movs	r5, r3
100137c2:	020b      	lsls	r3, r1, #8
100137c4:	d400      	bmi.n	100137c8 <__aeabi_dadd+0x70>
100137c6:	e082      	b.n	100138ce <__aeabi_dadd+0x176>
100137c8:	4bca      	ldr	r3, [pc, #808]	; (10013af4 <__aeabi_dadd+0x39c>)
100137ca:	3401      	adds	r4, #1
100137cc:	429c      	cmp	r4, r3
100137ce:	d100      	bne.n	100137d2 <__aeabi_dadd+0x7a>
100137d0:	e0fe      	b.n	100139d0 <__aeabi_dadd+0x278>
100137d2:	000a      	movs	r2, r1
100137d4:	4656      	mov	r6, sl
100137d6:	4bc8      	ldr	r3, [pc, #800]	; (10013af8 <__aeabi_dadd+0x3a0>)
100137d8:	08ed      	lsrs	r5, r5, #3
100137da:	401a      	ands	r2, r3
100137dc:	0750      	lsls	r0, r2, #29
100137de:	0564      	lsls	r4, r4, #21
100137e0:	0252      	lsls	r2, r2, #9
100137e2:	4305      	orrs	r5, r0
100137e4:	0b12      	lsrs	r2, r2, #12
100137e6:	0d64      	lsrs	r4, r4, #21
100137e8:	2100      	movs	r1, #0
100137ea:	0312      	lsls	r2, r2, #12
100137ec:	0d0b      	lsrs	r3, r1, #20
100137ee:	051b      	lsls	r3, r3, #20
100137f0:	0564      	lsls	r4, r4, #21
100137f2:	0b12      	lsrs	r2, r2, #12
100137f4:	431a      	orrs	r2, r3
100137f6:	0863      	lsrs	r3, r4, #1
100137f8:	4cc0      	ldr	r4, [pc, #768]	; (10013afc <__aeabi_dadd+0x3a4>)
100137fa:	07f6      	lsls	r6, r6, #31
100137fc:	4014      	ands	r4, r2
100137fe:	431c      	orrs	r4, r3
10013800:	0064      	lsls	r4, r4, #1
10013802:	0864      	lsrs	r4, r4, #1
10013804:	4334      	orrs	r4, r6
10013806:	0028      	movs	r0, r5
10013808:	0021      	movs	r1, r4
1001380a:	bc3c      	pop	{r2, r3, r4, r5}
1001380c:	4690      	mov	r8, r2
1001380e:	4699      	mov	r9, r3
10013810:	46a2      	mov	sl, r4
10013812:	46ab      	mov	fp, r5
10013814:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10013816:	4bb7      	ldr	r3, [pc, #732]	; (10013af4 <__aeabi_dadd+0x39c>)
10013818:	429c      	cmp	r4, r3
1001381a:	d0c6      	beq.n	100137aa <__aeabi_dadd+0x52>
1001381c:	2380      	movs	r3, #128	; 0x80
1001381e:	041b      	lsls	r3, r3, #16
10013820:	4318      	orrs	r0, r3
10013822:	2e38      	cmp	r6, #56	; 0x38
10013824:	dd00      	ble.n	10013828 <__aeabi_dadd+0xd0>
10013826:	e0eb      	b.n	10013a00 <__aeabi_dadd+0x2a8>
10013828:	2e1f      	cmp	r6, #31
1001382a:	dd00      	ble.n	1001382e <__aeabi_dadd+0xd6>
1001382c:	e11e      	b.n	10013a6c <__aeabi_dadd+0x314>
1001382e:	2320      	movs	r3, #32
10013830:	1b9b      	subs	r3, r3, r6
10013832:	469c      	mov	ip, r3
10013834:	0003      	movs	r3, r0
10013836:	4667      	mov	r7, ip
10013838:	40bb      	lsls	r3, r7
1001383a:	4698      	mov	r8, r3
1001383c:	0013      	movs	r3, r2
1001383e:	4647      	mov	r7, r8
10013840:	40f3      	lsrs	r3, r6
10013842:	433b      	orrs	r3, r7
10013844:	4667      	mov	r7, ip
10013846:	40ba      	lsls	r2, r7
10013848:	1e57      	subs	r7, r2, #1
1001384a:	41ba      	sbcs	r2, r7
1001384c:	4313      	orrs	r3, r2
1001384e:	0002      	movs	r2, r0
10013850:	40f2      	lsrs	r2, r6
10013852:	1aeb      	subs	r3, r5, r3
10013854:	429d      	cmp	r5, r3
10013856:	41b6      	sbcs	r6, r6
10013858:	001d      	movs	r5, r3
1001385a:	1a8a      	subs	r2, r1, r2
1001385c:	4276      	negs	r6, r6
1001385e:	1b91      	subs	r1, r2, r6
10013860:	020b      	lsls	r3, r1, #8
10013862:	d531      	bpl.n	100138c8 <__aeabi_dadd+0x170>
10013864:	024a      	lsls	r2, r1, #9
10013866:	0a56      	lsrs	r6, r2, #9
10013868:	2e00      	cmp	r6, #0
1001386a:	d100      	bne.n	1001386e <__aeabi_dadd+0x116>
1001386c:	e0b4      	b.n	100139d8 <__aeabi_dadd+0x280>
1001386e:	0030      	movs	r0, r6
10013870:	f001 fe40 	bl	100154f4 <__clzsi2>
10013874:	0003      	movs	r3, r0
10013876:	3b08      	subs	r3, #8
10013878:	2b1f      	cmp	r3, #31
1001387a:	dd00      	ble.n	1001387e <__aeabi_dadd+0x126>
1001387c:	e0b5      	b.n	100139ea <__aeabi_dadd+0x292>
1001387e:	2220      	movs	r2, #32
10013880:	0029      	movs	r1, r5
10013882:	1ad2      	subs	r2, r2, r3
10013884:	40d1      	lsrs	r1, r2
10013886:	409e      	lsls	r6, r3
10013888:	000a      	movs	r2, r1
1001388a:	409d      	lsls	r5, r3
1001388c:	4332      	orrs	r2, r6
1001388e:	429c      	cmp	r4, r3
10013890:	dd00      	ble.n	10013894 <__aeabi_dadd+0x13c>
10013892:	e0b1      	b.n	100139f8 <__aeabi_dadd+0x2a0>
10013894:	1b1c      	subs	r4, r3, r4
10013896:	1c63      	adds	r3, r4, #1
10013898:	2b1f      	cmp	r3, #31
1001389a:	dd00      	ble.n	1001389e <__aeabi_dadd+0x146>
1001389c:	e0d5      	b.n	10013a4a <__aeabi_dadd+0x2f2>
1001389e:	2120      	movs	r1, #32
100138a0:	0014      	movs	r4, r2
100138a2:	0028      	movs	r0, r5
100138a4:	1ac9      	subs	r1, r1, r3
100138a6:	408c      	lsls	r4, r1
100138a8:	40d8      	lsrs	r0, r3
100138aa:	408d      	lsls	r5, r1
100138ac:	4304      	orrs	r4, r0
100138ae:	40da      	lsrs	r2, r3
100138b0:	1e68      	subs	r0, r5, #1
100138b2:	4185      	sbcs	r5, r0
100138b4:	0011      	movs	r1, r2
100138b6:	4325      	orrs	r5, r4
100138b8:	2400      	movs	r4, #0
100138ba:	e776      	b.n	100137aa <__aeabi_dadd+0x52>
100138bc:	4641      	mov	r1, r8
100138be:	4331      	orrs	r1, r6
100138c0:	d100      	bne.n	100138c4 <__aeabi_dadd+0x16c>
100138c2:	e234      	b.n	10013d2e <__aeabi_dadd+0x5d6>
100138c4:	0031      	movs	r1, r6
100138c6:	4645      	mov	r5, r8
100138c8:	076b      	lsls	r3, r5, #29
100138ca:	d000      	beq.n	100138ce <__aeabi_dadd+0x176>
100138cc:	e76f      	b.n	100137ae <__aeabi_dadd+0x56>
100138ce:	4656      	mov	r6, sl
100138d0:	0748      	lsls	r0, r1, #29
100138d2:	08ed      	lsrs	r5, r5, #3
100138d4:	08c9      	lsrs	r1, r1, #3
100138d6:	4305      	orrs	r5, r0
100138d8:	4b86      	ldr	r3, [pc, #536]	; (10013af4 <__aeabi_dadd+0x39c>)
100138da:	429c      	cmp	r4, r3
100138dc:	d035      	beq.n	1001394a <__aeabi_dadd+0x1f2>
100138de:	030a      	lsls	r2, r1, #12
100138e0:	0564      	lsls	r4, r4, #21
100138e2:	0b12      	lsrs	r2, r2, #12
100138e4:	0d64      	lsrs	r4, r4, #21
100138e6:	e77f      	b.n	100137e8 <__aeabi_dadd+0x90>
100138e8:	4663      	mov	r3, ip
100138ea:	1ae3      	subs	r3, r4, r3
100138ec:	469b      	mov	fp, r3
100138ee:	2b00      	cmp	r3, #0
100138f0:	dc00      	bgt.n	100138f4 <__aeabi_dadd+0x19c>
100138f2:	e08b      	b.n	10013a0c <__aeabi_dadd+0x2b4>
100138f4:	4667      	mov	r7, ip
100138f6:	2f00      	cmp	r7, #0
100138f8:	d03c      	beq.n	10013974 <__aeabi_dadd+0x21c>
100138fa:	4f7e      	ldr	r7, [pc, #504]	; (10013af4 <__aeabi_dadd+0x39c>)
100138fc:	42bc      	cmp	r4, r7
100138fe:	d100      	bne.n	10013902 <__aeabi_dadd+0x1aa>
10013900:	e753      	b.n	100137aa <__aeabi_dadd+0x52>
10013902:	2780      	movs	r7, #128	; 0x80
10013904:	043f      	lsls	r7, r7, #16
10013906:	4338      	orrs	r0, r7
10013908:	465b      	mov	r3, fp
1001390a:	2b38      	cmp	r3, #56	; 0x38
1001390c:	dc00      	bgt.n	10013910 <__aeabi_dadd+0x1b8>
1001390e:	e0f7      	b.n	10013b00 <__aeabi_dadd+0x3a8>
10013910:	4302      	orrs	r2, r0
10013912:	1e50      	subs	r0, r2, #1
10013914:	4182      	sbcs	r2, r0
10013916:	2000      	movs	r0, #0
10013918:	b2d2      	uxtb	r2, r2
1001391a:	1953      	adds	r3, r2, r5
1001391c:	1842      	adds	r2, r0, r1
1001391e:	42ab      	cmp	r3, r5
10013920:	4189      	sbcs	r1, r1
10013922:	001d      	movs	r5, r3
10013924:	4249      	negs	r1, r1
10013926:	1889      	adds	r1, r1, r2
10013928:	020b      	lsls	r3, r1, #8
1001392a:	d5cd      	bpl.n	100138c8 <__aeabi_dadd+0x170>
1001392c:	4b71      	ldr	r3, [pc, #452]	; (10013af4 <__aeabi_dadd+0x39c>)
1001392e:	3401      	adds	r4, #1
10013930:	429c      	cmp	r4, r3
10013932:	d100      	bne.n	10013936 <__aeabi_dadd+0x1de>
10013934:	e13d      	b.n	10013bb2 <__aeabi_dadd+0x45a>
10013936:	2001      	movs	r0, #1
10013938:	4a6f      	ldr	r2, [pc, #444]	; (10013af8 <__aeabi_dadd+0x3a0>)
1001393a:	086b      	lsrs	r3, r5, #1
1001393c:	400a      	ands	r2, r1
1001393e:	4028      	ands	r0, r5
10013940:	4318      	orrs	r0, r3
10013942:	07d5      	lsls	r5, r2, #31
10013944:	4305      	orrs	r5, r0
10013946:	0851      	lsrs	r1, r2, #1
10013948:	e72f      	b.n	100137aa <__aeabi_dadd+0x52>
1001394a:	002b      	movs	r3, r5
1001394c:	430b      	orrs	r3, r1
1001394e:	d100      	bne.n	10013952 <__aeabi_dadd+0x1fa>
10013950:	e1cb      	b.n	10013cea <__aeabi_dadd+0x592>
10013952:	2380      	movs	r3, #128	; 0x80
10013954:	031b      	lsls	r3, r3, #12
10013956:	430b      	orrs	r3, r1
10013958:	031a      	lsls	r2, r3, #12
1001395a:	0b12      	lsrs	r2, r2, #12
1001395c:	e744      	b.n	100137e8 <__aeabi_dadd+0x90>
1001395e:	3e01      	subs	r6, #1
10013960:	2e00      	cmp	r6, #0
10013962:	d16d      	bne.n	10013a40 <__aeabi_dadd+0x2e8>
10013964:	1aae      	subs	r6, r5, r2
10013966:	42b5      	cmp	r5, r6
10013968:	419b      	sbcs	r3, r3
1001396a:	1a09      	subs	r1, r1, r0
1001396c:	425b      	negs	r3, r3
1001396e:	1ac9      	subs	r1, r1, r3
10013970:	0035      	movs	r5, r6
10013972:	e775      	b.n	10013860 <__aeabi_dadd+0x108>
10013974:	0007      	movs	r7, r0
10013976:	4317      	orrs	r7, r2
10013978:	d100      	bne.n	1001397c <__aeabi_dadd+0x224>
1001397a:	e716      	b.n	100137aa <__aeabi_dadd+0x52>
1001397c:	2301      	movs	r3, #1
1001397e:	425b      	negs	r3, r3
10013980:	469c      	mov	ip, r3
10013982:	44e3      	add	fp, ip
10013984:	465b      	mov	r3, fp
10013986:	2b00      	cmp	r3, #0
10013988:	d000      	beq.n	1001398c <__aeabi_dadd+0x234>
1001398a:	e0e0      	b.n	10013b4e <__aeabi_dadd+0x3f6>
1001398c:	18aa      	adds	r2, r5, r2
1001398e:	42aa      	cmp	r2, r5
10013990:	419b      	sbcs	r3, r3
10013992:	1809      	adds	r1, r1, r0
10013994:	425b      	negs	r3, r3
10013996:	1859      	adds	r1, r3, r1
10013998:	0015      	movs	r5, r2
1001399a:	e7c5      	b.n	10013928 <__aeabi_dadd+0x1d0>
1001399c:	2e00      	cmp	r6, #0
1001399e:	d175      	bne.n	10013a8c <__aeabi_dadd+0x334>
100139a0:	1c66      	adds	r6, r4, #1
100139a2:	0576      	lsls	r6, r6, #21
100139a4:	0d76      	lsrs	r6, r6, #21
100139a6:	2e01      	cmp	r6, #1
100139a8:	dc00      	bgt.n	100139ac <__aeabi_dadd+0x254>
100139aa:	e0f3      	b.n	10013b94 <__aeabi_dadd+0x43c>
100139ac:	1aae      	subs	r6, r5, r2
100139ae:	46b0      	mov	r8, r6
100139b0:	4545      	cmp	r5, r8
100139b2:	41bf      	sbcs	r7, r7
100139b4:	1a0e      	subs	r6, r1, r0
100139b6:	427f      	negs	r7, r7
100139b8:	1bf6      	subs	r6, r6, r7
100139ba:	0237      	lsls	r7, r6, #8
100139bc:	d400      	bmi.n	100139c0 <__aeabi_dadd+0x268>
100139be:	e08f      	b.n	10013ae0 <__aeabi_dadd+0x388>
100139c0:	1b55      	subs	r5, r2, r5
100139c2:	42aa      	cmp	r2, r5
100139c4:	41b6      	sbcs	r6, r6
100139c6:	1a41      	subs	r1, r0, r1
100139c8:	4276      	negs	r6, r6
100139ca:	1b8e      	subs	r6, r1, r6
100139cc:	469a      	mov	sl, r3
100139ce:	e74b      	b.n	10013868 <__aeabi_dadd+0x110>
100139d0:	4656      	mov	r6, sl
100139d2:	2200      	movs	r2, #0
100139d4:	2500      	movs	r5, #0
100139d6:	e707      	b.n	100137e8 <__aeabi_dadd+0x90>
100139d8:	0028      	movs	r0, r5
100139da:	f001 fd8b 	bl	100154f4 <__clzsi2>
100139de:	3020      	adds	r0, #32
100139e0:	0003      	movs	r3, r0
100139e2:	3b08      	subs	r3, #8
100139e4:	2b1f      	cmp	r3, #31
100139e6:	dc00      	bgt.n	100139ea <__aeabi_dadd+0x292>
100139e8:	e749      	b.n	1001387e <__aeabi_dadd+0x126>
100139ea:	002a      	movs	r2, r5
100139ec:	3828      	subs	r0, #40	; 0x28
100139ee:	4082      	lsls	r2, r0
100139f0:	2500      	movs	r5, #0
100139f2:	429c      	cmp	r4, r3
100139f4:	dc00      	bgt.n	100139f8 <__aeabi_dadd+0x2a0>
100139f6:	e74d      	b.n	10013894 <__aeabi_dadd+0x13c>
100139f8:	493f      	ldr	r1, [pc, #252]	; (10013af8 <__aeabi_dadd+0x3a0>)
100139fa:	1ae4      	subs	r4, r4, r3
100139fc:	4011      	ands	r1, r2
100139fe:	e6d4      	b.n	100137aa <__aeabi_dadd+0x52>
10013a00:	4302      	orrs	r2, r0
10013a02:	1e50      	subs	r0, r2, #1
10013a04:	4182      	sbcs	r2, r0
10013a06:	b2d3      	uxtb	r3, r2
10013a08:	2200      	movs	r2, #0
10013a0a:	e722      	b.n	10013852 <__aeabi_dadd+0xfa>
10013a0c:	2b00      	cmp	r3, #0
10013a0e:	d000      	beq.n	10013a12 <__aeabi_dadd+0x2ba>
10013a10:	e0f3      	b.n	10013bfa <__aeabi_dadd+0x4a2>
10013a12:	1c63      	adds	r3, r4, #1
10013a14:	469c      	mov	ip, r3
10013a16:	055b      	lsls	r3, r3, #21
10013a18:	0d5b      	lsrs	r3, r3, #21
10013a1a:	2b01      	cmp	r3, #1
10013a1c:	dc00      	bgt.n	10013a20 <__aeabi_dadd+0x2c8>
10013a1e:	e09f      	b.n	10013b60 <__aeabi_dadd+0x408>
10013a20:	4b34      	ldr	r3, [pc, #208]	; (10013af4 <__aeabi_dadd+0x39c>)
10013a22:	459c      	cmp	ip, r3
10013a24:	d100      	bne.n	10013a28 <__aeabi_dadd+0x2d0>
10013a26:	e0c3      	b.n	10013bb0 <__aeabi_dadd+0x458>
10013a28:	18aa      	adds	r2, r5, r2
10013a2a:	1809      	adds	r1, r1, r0
10013a2c:	42aa      	cmp	r2, r5
10013a2e:	4180      	sbcs	r0, r0
10013a30:	4240      	negs	r0, r0
10013a32:	1841      	adds	r1, r0, r1
10013a34:	07cd      	lsls	r5, r1, #31
10013a36:	0852      	lsrs	r2, r2, #1
10013a38:	4315      	orrs	r5, r2
10013a3a:	0849      	lsrs	r1, r1, #1
10013a3c:	4664      	mov	r4, ip
10013a3e:	e6b4      	b.n	100137aa <__aeabi_dadd+0x52>
10013a40:	4b2c      	ldr	r3, [pc, #176]	; (10013af4 <__aeabi_dadd+0x39c>)
10013a42:	429c      	cmp	r4, r3
10013a44:	d000      	beq.n	10013a48 <__aeabi_dadd+0x2f0>
10013a46:	e6ec      	b.n	10013822 <__aeabi_dadd+0xca>
10013a48:	e6af      	b.n	100137aa <__aeabi_dadd+0x52>
10013a4a:	0011      	movs	r1, r2
10013a4c:	3c1f      	subs	r4, #31
10013a4e:	40e1      	lsrs	r1, r4
10013a50:	000c      	movs	r4, r1
10013a52:	2b20      	cmp	r3, #32
10013a54:	d100      	bne.n	10013a58 <__aeabi_dadd+0x300>
10013a56:	e07f      	b.n	10013b58 <__aeabi_dadd+0x400>
10013a58:	2140      	movs	r1, #64	; 0x40
10013a5a:	1acb      	subs	r3, r1, r3
10013a5c:	409a      	lsls	r2, r3
10013a5e:	4315      	orrs	r5, r2
10013a60:	1e6a      	subs	r2, r5, #1
10013a62:	4195      	sbcs	r5, r2
10013a64:	2100      	movs	r1, #0
10013a66:	4325      	orrs	r5, r4
10013a68:	2400      	movs	r4, #0
10013a6a:	e72d      	b.n	100138c8 <__aeabi_dadd+0x170>
10013a6c:	0033      	movs	r3, r6
10013a6e:	0007      	movs	r7, r0
10013a70:	3b20      	subs	r3, #32
10013a72:	40df      	lsrs	r7, r3
10013a74:	003b      	movs	r3, r7
10013a76:	2e20      	cmp	r6, #32
10013a78:	d070      	beq.n	10013b5c <__aeabi_dadd+0x404>
10013a7a:	2740      	movs	r7, #64	; 0x40
10013a7c:	1bbe      	subs	r6, r7, r6
10013a7e:	40b0      	lsls	r0, r6
10013a80:	4302      	orrs	r2, r0
10013a82:	1e50      	subs	r0, r2, #1
10013a84:	4182      	sbcs	r2, r0
10013a86:	4313      	orrs	r3, r2
10013a88:	2200      	movs	r2, #0
10013a8a:	e6e2      	b.n	10013852 <__aeabi_dadd+0xfa>
10013a8c:	2c00      	cmp	r4, #0
10013a8e:	d04f      	beq.n	10013b30 <__aeabi_dadd+0x3d8>
10013a90:	4c18      	ldr	r4, [pc, #96]	; (10013af4 <__aeabi_dadd+0x39c>)
10013a92:	45a4      	cmp	ip, r4
10013a94:	d100      	bne.n	10013a98 <__aeabi_dadd+0x340>
10013a96:	e0ab      	b.n	10013bf0 <__aeabi_dadd+0x498>
10013a98:	2480      	movs	r4, #128	; 0x80
10013a9a:	0424      	lsls	r4, r4, #16
10013a9c:	4276      	negs	r6, r6
10013a9e:	4321      	orrs	r1, r4
10013aa0:	2e38      	cmp	r6, #56	; 0x38
10013aa2:	dd00      	ble.n	10013aa6 <__aeabi_dadd+0x34e>
10013aa4:	e0df      	b.n	10013c66 <__aeabi_dadd+0x50e>
10013aa6:	2e1f      	cmp	r6, #31
10013aa8:	dd00      	ble.n	10013aac <__aeabi_dadd+0x354>
10013aaa:	e143      	b.n	10013d34 <__aeabi_dadd+0x5dc>
10013aac:	2720      	movs	r7, #32
10013aae:	1bbc      	subs	r4, r7, r6
10013ab0:	46a1      	mov	r9, r4
10013ab2:	000c      	movs	r4, r1
10013ab4:	464f      	mov	r7, r9
10013ab6:	40bc      	lsls	r4, r7
10013ab8:	46a0      	mov	r8, r4
10013aba:	002c      	movs	r4, r5
10013abc:	4647      	mov	r7, r8
10013abe:	40f4      	lsrs	r4, r6
10013ac0:	433c      	orrs	r4, r7
10013ac2:	464f      	mov	r7, r9
10013ac4:	40bd      	lsls	r5, r7
10013ac6:	1e6f      	subs	r7, r5, #1
10013ac8:	41bd      	sbcs	r5, r7
10013aca:	40f1      	lsrs	r1, r6
10013acc:	432c      	orrs	r4, r5
10013ace:	1b15      	subs	r5, r2, r4
10013ad0:	42aa      	cmp	r2, r5
10013ad2:	4192      	sbcs	r2, r2
10013ad4:	1a41      	subs	r1, r0, r1
10013ad6:	4252      	negs	r2, r2
10013ad8:	1a89      	subs	r1, r1, r2
10013ada:	4664      	mov	r4, ip
10013adc:	469a      	mov	sl, r3
10013ade:	e6bf      	b.n	10013860 <__aeabi_dadd+0x108>
10013ae0:	4641      	mov	r1, r8
10013ae2:	4645      	mov	r5, r8
10013ae4:	4331      	orrs	r1, r6
10013ae6:	d000      	beq.n	10013aea <__aeabi_dadd+0x392>
10013ae8:	e6be      	b.n	10013868 <__aeabi_dadd+0x110>
10013aea:	2600      	movs	r6, #0
10013aec:	2400      	movs	r4, #0
10013aee:	2500      	movs	r5, #0
10013af0:	e6f2      	b.n	100138d8 <__aeabi_dadd+0x180>
10013af2:	46c0      	nop			; (mov r8, r8)
10013af4:	000007ff 	.word	0x000007ff
10013af8:	ff7fffff 	.word	0xff7fffff
10013afc:	800fffff 	.word	0x800fffff
10013b00:	2b1f      	cmp	r3, #31
10013b02:	dc59      	bgt.n	10013bb8 <__aeabi_dadd+0x460>
10013b04:	2720      	movs	r7, #32
10013b06:	1aff      	subs	r7, r7, r3
10013b08:	46bc      	mov	ip, r7
10013b0a:	0007      	movs	r7, r0
10013b0c:	4663      	mov	r3, ip
10013b0e:	409f      	lsls	r7, r3
10013b10:	465b      	mov	r3, fp
10013b12:	46b9      	mov	r9, r7
10013b14:	0017      	movs	r7, r2
10013b16:	40df      	lsrs	r7, r3
10013b18:	46b8      	mov	r8, r7
10013b1a:	464f      	mov	r7, r9
10013b1c:	4643      	mov	r3, r8
10013b1e:	431f      	orrs	r7, r3
10013b20:	4663      	mov	r3, ip
10013b22:	409a      	lsls	r2, r3
10013b24:	1e53      	subs	r3, r2, #1
10013b26:	419a      	sbcs	r2, r3
10013b28:	465b      	mov	r3, fp
10013b2a:	433a      	orrs	r2, r7
10013b2c:	40d8      	lsrs	r0, r3
10013b2e:	e6f4      	b.n	1001391a <__aeabi_dadd+0x1c2>
10013b30:	000c      	movs	r4, r1
10013b32:	432c      	orrs	r4, r5
10013b34:	d05c      	beq.n	10013bf0 <__aeabi_dadd+0x498>
10013b36:	43f6      	mvns	r6, r6
10013b38:	2e00      	cmp	r6, #0
10013b3a:	d155      	bne.n	10013be8 <__aeabi_dadd+0x490>
10013b3c:	1b55      	subs	r5, r2, r5
10013b3e:	42aa      	cmp	r2, r5
10013b40:	41a4      	sbcs	r4, r4
10013b42:	1a41      	subs	r1, r0, r1
10013b44:	4264      	negs	r4, r4
10013b46:	1b09      	subs	r1, r1, r4
10013b48:	469a      	mov	sl, r3
10013b4a:	4664      	mov	r4, ip
10013b4c:	e688      	b.n	10013860 <__aeabi_dadd+0x108>
10013b4e:	4f96      	ldr	r7, [pc, #600]	; (10013da8 <__aeabi_dadd+0x650>)
10013b50:	42bc      	cmp	r4, r7
10013b52:	d000      	beq.n	10013b56 <__aeabi_dadd+0x3fe>
10013b54:	e6d8      	b.n	10013908 <__aeabi_dadd+0x1b0>
10013b56:	e628      	b.n	100137aa <__aeabi_dadd+0x52>
10013b58:	2200      	movs	r2, #0
10013b5a:	e780      	b.n	10013a5e <__aeabi_dadd+0x306>
10013b5c:	2000      	movs	r0, #0
10013b5e:	e78f      	b.n	10013a80 <__aeabi_dadd+0x328>
10013b60:	000b      	movs	r3, r1
10013b62:	432b      	orrs	r3, r5
10013b64:	2c00      	cmp	r4, #0
10013b66:	d000      	beq.n	10013b6a <__aeabi_dadd+0x412>
10013b68:	e0c2      	b.n	10013cf0 <__aeabi_dadd+0x598>
10013b6a:	2b00      	cmp	r3, #0
10013b6c:	d100      	bne.n	10013b70 <__aeabi_dadd+0x418>
10013b6e:	e101      	b.n	10013d74 <__aeabi_dadd+0x61c>
10013b70:	0003      	movs	r3, r0
10013b72:	4313      	orrs	r3, r2
10013b74:	d100      	bne.n	10013b78 <__aeabi_dadd+0x420>
10013b76:	e618      	b.n	100137aa <__aeabi_dadd+0x52>
10013b78:	18ab      	adds	r3, r5, r2
10013b7a:	42ab      	cmp	r3, r5
10013b7c:	41b6      	sbcs	r6, r6
10013b7e:	1809      	adds	r1, r1, r0
10013b80:	4276      	negs	r6, r6
10013b82:	1871      	adds	r1, r6, r1
10013b84:	020a      	lsls	r2, r1, #8
10013b86:	d400      	bmi.n	10013b8a <__aeabi_dadd+0x432>
10013b88:	e109      	b.n	10013d9e <__aeabi_dadd+0x646>
10013b8a:	4a88      	ldr	r2, [pc, #544]	; (10013dac <__aeabi_dadd+0x654>)
10013b8c:	001d      	movs	r5, r3
10013b8e:	4011      	ands	r1, r2
10013b90:	4664      	mov	r4, ip
10013b92:	e60a      	b.n	100137aa <__aeabi_dadd+0x52>
10013b94:	2c00      	cmp	r4, #0
10013b96:	d15b      	bne.n	10013c50 <__aeabi_dadd+0x4f8>
10013b98:	000e      	movs	r6, r1
10013b9a:	432e      	orrs	r6, r5
10013b9c:	d000      	beq.n	10013ba0 <__aeabi_dadd+0x448>
10013b9e:	e08a      	b.n	10013cb6 <__aeabi_dadd+0x55e>
10013ba0:	0001      	movs	r1, r0
10013ba2:	4311      	orrs	r1, r2
10013ba4:	d100      	bne.n	10013ba8 <__aeabi_dadd+0x450>
10013ba6:	e0c2      	b.n	10013d2e <__aeabi_dadd+0x5d6>
10013ba8:	0001      	movs	r1, r0
10013baa:	0015      	movs	r5, r2
10013bac:	469a      	mov	sl, r3
10013bae:	e5fc      	b.n	100137aa <__aeabi_dadd+0x52>
10013bb0:	4664      	mov	r4, ip
10013bb2:	2100      	movs	r1, #0
10013bb4:	2500      	movs	r5, #0
10013bb6:	e68f      	b.n	100138d8 <__aeabi_dadd+0x180>
10013bb8:	2320      	movs	r3, #32
10013bba:	425b      	negs	r3, r3
10013bbc:	469c      	mov	ip, r3
10013bbe:	44dc      	add	ip, fp
10013bc0:	4663      	mov	r3, ip
10013bc2:	0007      	movs	r7, r0
10013bc4:	40df      	lsrs	r7, r3
10013bc6:	465b      	mov	r3, fp
10013bc8:	46bc      	mov	ip, r7
10013bca:	2b20      	cmp	r3, #32
10013bcc:	d100      	bne.n	10013bd0 <__aeabi_dadd+0x478>
10013bce:	e0ac      	b.n	10013d2a <__aeabi_dadd+0x5d2>
10013bd0:	2340      	movs	r3, #64	; 0x40
10013bd2:	465f      	mov	r7, fp
10013bd4:	1bdb      	subs	r3, r3, r7
10013bd6:	4098      	lsls	r0, r3
10013bd8:	4302      	orrs	r2, r0
10013bda:	1e50      	subs	r0, r2, #1
10013bdc:	4182      	sbcs	r2, r0
10013bde:	4663      	mov	r3, ip
10013be0:	4313      	orrs	r3, r2
10013be2:	001a      	movs	r2, r3
10013be4:	2000      	movs	r0, #0
10013be6:	e698      	b.n	1001391a <__aeabi_dadd+0x1c2>
10013be8:	4c6f      	ldr	r4, [pc, #444]	; (10013da8 <__aeabi_dadd+0x650>)
10013bea:	45a4      	cmp	ip, r4
10013bec:	d000      	beq.n	10013bf0 <__aeabi_dadd+0x498>
10013bee:	e757      	b.n	10013aa0 <__aeabi_dadd+0x348>
10013bf0:	0001      	movs	r1, r0
10013bf2:	0015      	movs	r5, r2
10013bf4:	4664      	mov	r4, ip
10013bf6:	469a      	mov	sl, r3
10013bf8:	e5d7      	b.n	100137aa <__aeabi_dadd+0x52>
10013bfa:	2c00      	cmp	r4, #0
10013bfc:	d139      	bne.n	10013c72 <__aeabi_dadd+0x51a>
10013bfe:	000c      	movs	r4, r1
10013c00:	432c      	orrs	r4, r5
10013c02:	d06e      	beq.n	10013ce2 <__aeabi_dadd+0x58a>
10013c04:	43db      	mvns	r3, r3
10013c06:	2b00      	cmp	r3, #0
10013c08:	d01a      	beq.n	10013c40 <__aeabi_dadd+0x4e8>
10013c0a:	4c67      	ldr	r4, [pc, #412]	; (10013da8 <__aeabi_dadd+0x650>)
10013c0c:	45a4      	cmp	ip, r4
10013c0e:	d068      	beq.n	10013ce2 <__aeabi_dadd+0x58a>
10013c10:	2b38      	cmp	r3, #56	; 0x38
10013c12:	dd00      	ble.n	10013c16 <__aeabi_dadd+0x4be>
10013c14:	e0a4      	b.n	10013d60 <__aeabi_dadd+0x608>
10013c16:	2b1f      	cmp	r3, #31
10013c18:	dd00      	ble.n	10013c1c <__aeabi_dadd+0x4c4>
10013c1a:	e0ae      	b.n	10013d7a <__aeabi_dadd+0x622>
10013c1c:	2420      	movs	r4, #32
10013c1e:	000f      	movs	r7, r1
10013c20:	1ae4      	subs	r4, r4, r3
10013c22:	40a7      	lsls	r7, r4
10013c24:	46b9      	mov	r9, r7
10013c26:	002f      	movs	r7, r5
10013c28:	40df      	lsrs	r7, r3
10013c2a:	46b8      	mov	r8, r7
10013c2c:	46a3      	mov	fp, r4
10013c2e:	464f      	mov	r7, r9
10013c30:	4644      	mov	r4, r8
10013c32:	4327      	orrs	r7, r4
10013c34:	465c      	mov	r4, fp
10013c36:	40a5      	lsls	r5, r4
10013c38:	1e6c      	subs	r4, r5, #1
10013c3a:	41a5      	sbcs	r5, r4
10013c3c:	40d9      	lsrs	r1, r3
10013c3e:	433d      	orrs	r5, r7
10013c40:	18ad      	adds	r5, r5, r2
10013c42:	4295      	cmp	r5, r2
10013c44:	419b      	sbcs	r3, r3
10013c46:	1809      	adds	r1, r1, r0
10013c48:	425b      	negs	r3, r3
10013c4a:	1859      	adds	r1, r3, r1
10013c4c:	4664      	mov	r4, ip
10013c4e:	e66b      	b.n	10013928 <__aeabi_dadd+0x1d0>
10013c50:	000c      	movs	r4, r1
10013c52:	432c      	orrs	r4, r5
10013c54:	d115      	bne.n	10013c82 <__aeabi_dadd+0x52a>
10013c56:	0001      	movs	r1, r0
10013c58:	4311      	orrs	r1, r2
10013c5a:	d07b      	beq.n	10013d54 <__aeabi_dadd+0x5fc>
10013c5c:	0001      	movs	r1, r0
10013c5e:	0015      	movs	r5, r2
10013c60:	469a      	mov	sl, r3
10013c62:	4c51      	ldr	r4, [pc, #324]	; (10013da8 <__aeabi_dadd+0x650>)
10013c64:	e5a1      	b.n	100137aa <__aeabi_dadd+0x52>
10013c66:	430d      	orrs	r5, r1
10013c68:	1e69      	subs	r1, r5, #1
10013c6a:	418d      	sbcs	r5, r1
10013c6c:	2100      	movs	r1, #0
10013c6e:	b2ec      	uxtb	r4, r5
10013c70:	e72d      	b.n	10013ace <__aeabi_dadd+0x376>
10013c72:	4c4d      	ldr	r4, [pc, #308]	; (10013da8 <__aeabi_dadd+0x650>)
10013c74:	45a4      	cmp	ip, r4
10013c76:	d034      	beq.n	10013ce2 <__aeabi_dadd+0x58a>
10013c78:	2480      	movs	r4, #128	; 0x80
10013c7a:	0424      	lsls	r4, r4, #16
10013c7c:	425b      	negs	r3, r3
10013c7e:	4321      	orrs	r1, r4
10013c80:	e7c6      	b.n	10013c10 <__aeabi_dadd+0x4b8>
10013c82:	0004      	movs	r4, r0
10013c84:	4314      	orrs	r4, r2
10013c86:	d04e      	beq.n	10013d26 <__aeabi_dadd+0x5ce>
10013c88:	08ed      	lsrs	r5, r5, #3
10013c8a:	074c      	lsls	r4, r1, #29
10013c8c:	432c      	orrs	r4, r5
10013c8e:	2580      	movs	r5, #128	; 0x80
10013c90:	08c9      	lsrs	r1, r1, #3
10013c92:	032d      	lsls	r5, r5, #12
10013c94:	4229      	tst	r1, r5
10013c96:	d008      	beq.n	10013caa <__aeabi_dadd+0x552>
10013c98:	08c6      	lsrs	r6, r0, #3
10013c9a:	422e      	tst	r6, r5
10013c9c:	d105      	bne.n	10013caa <__aeabi_dadd+0x552>
10013c9e:	08d2      	lsrs	r2, r2, #3
10013ca0:	0741      	lsls	r1, r0, #29
10013ca2:	4311      	orrs	r1, r2
10013ca4:	000c      	movs	r4, r1
10013ca6:	469a      	mov	sl, r3
10013ca8:	0031      	movs	r1, r6
10013caa:	0f62      	lsrs	r2, r4, #29
10013cac:	00c9      	lsls	r1, r1, #3
10013cae:	00e5      	lsls	r5, r4, #3
10013cb0:	4311      	orrs	r1, r2
10013cb2:	4c3d      	ldr	r4, [pc, #244]	; (10013da8 <__aeabi_dadd+0x650>)
10013cb4:	e579      	b.n	100137aa <__aeabi_dadd+0x52>
10013cb6:	0006      	movs	r6, r0
10013cb8:	4316      	orrs	r6, r2
10013cba:	d100      	bne.n	10013cbe <__aeabi_dadd+0x566>
10013cbc:	e575      	b.n	100137aa <__aeabi_dadd+0x52>
10013cbe:	1aae      	subs	r6, r5, r2
10013cc0:	46b0      	mov	r8, r6
10013cc2:	4545      	cmp	r5, r8
10013cc4:	41bf      	sbcs	r7, r7
10013cc6:	1a0e      	subs	r6, r1, r0
10013cc8:	427f      	negs	r7, r7
10013cca:	1bf6      	subs	r6, r6, r7
10013ccc:	0237      	lsls	r7, r6, #8
10013cce:	d400      	bmi.n	10013cd2 <__aeabi_dadd+0x57a>
10013cd0:	e5f4      	b.n	100138bc <__aeabi_dadd+0x164>
10013cd2:	1b55      	subs	r5, r2, r5
10013cd4:	42aa      	cmp	r2, r5
10013cd6:	41b6      	sbcs	r6, r6
10013cd8:	1a41      	subs	r1, r0, r1
10013cda:	4276      	negs	r6, r6
10013cdc:	1b89      	subs	r1, r1, r6
10013cde:	469a      	mov	sl, r3
10013ce0:	e563      	b.n	100137aa <__aeabi_dadd+0x52>
10013ce2:	0001      	movs	r1, r0
10013ce4:	0015      	movs	r5, r2
10013ce6:	4664      	mov	r4, ip
10013ce8:	e55f      	b.n	100137aa <__aeabi_dadd+0x52>
10013cea:	2200      	movs	r2, #0
10013cec:	2500      	movs	r5, #0
10013cee:	e57b      	b.n	100137e8 <__aeabi_dadd+0x90>
10013cf0:	2b00      	cmp	r3, #0
10013cf2:	d03b      	beq.n	10013d6c <__aeabi_dadd+0x614>
10013cf4:	0003      	movs	r3, r0
10013cf6:	4313      	orrs	r3, r2
10013cf8:	d015      	beq.n	10013d26 <__aeabi_dadd+0x5ce>
10013cfa:	08ed      	lsrs	r5, r5, #3
10013cfc:	074b      	lsls	r3, r1, #29
10013cfe:	432b      	orrs	r3, r5
10013d00:	2580      	movs	r5, #128	; 0x80
10013d02:	08c9      	lsrs	r1, r1, #3
10013d04:	032d      	lsls	r5, r5, #12
10013d06:	4229      	tst	r1, r5
10013d08:	d007      	beq.n	10013d1a <__aeabi_dadd+0x5c2>
10013d0a:	08c4      	lsrs	r4, r0, #3
10013d0c:	422c      	tst	r4, r5
10013d0e:	d104      	bne.n	10013d1a <__aeabi_dadd+0x5c2>
10013d10:	0741      	lsls	r1, r0, #29
10013d12:	000b      	movs	r3, r1
10013d14:	0021      	movs	r1, r4
10013d16:	08d2      	lsrs	r2, r2, #3
10013d18:	4313      	orrs	r3, r2
10013d1a:	00c9      	lsls	r1, r1, #3
10013d1c:	0f5a      	lsrs	r2, r3, #29
10013d1e:	4311      	orrs	r1, r2
10013d20:	00dd      	lsls	r5, r3, #3
10013d22:	4c21      	ldr	r4, [pc, #132]	; (10013da8 <__aeabi_dadd+0x650>)
10013d24:	e541      	b.n	100137aa <__aeabi_dadd+0x52>
10013d26:	4c20      	ldr	r4, [pc, #128]	; (10013da8 <__aeabi_dadd+0x650>)
10013d28:	e53f      	b.n	100137aa <__aeabi_dadd+0x52>
10013d2a:	2000      	movs	r0, #0
10013d2c:	e754      	b.n	10013bd8 <__aeabi_dadd+0x480>
10013d2e:	2600      	movs	r6, #0
10013d30:	2500      	movs	r5, #0
10013d32:	e5d1      	b.n	100138d8 <__aeabi_dadd+0x180>
10013d34:	0034      	movs	r4, r6
10013d36:	000f      	movs	r7, r1
10013d38:	3c20      	subs	r4, #32
10013d3a:	40e7      	lsrs	r7, r4
10013d3c:	003c      	movs	r4, r7
10013d3e:	2e20      	cmp	r6, #32
10013d40:	d02b      	beq.n	10013d9a <__aeabi_dadd+0x642>
10013d42:	2740      	movs	r7, #64	; 0x40
10013d44:	1bbe      	subs	r6, r7, r6
10013d46:	40b1      	lsls	r1, r6
10013d48:	430d      	orrs	r5, r1
10013d4a:	1e69      	subs	r1, r5, #1
10013d4c:	418d      	sbcs	r5, r1
10013d4e:	2100      	movs	r1, #0
10013d50:	432c      	orrs	r4, r5
10013d52:	e6bc      	b.n	10013ace <__aeabi_dadd+0x376>
10013d54:	2180      	movs	r1, #128	; 0x80
10013d56:	2600      	movs	r6, #0
10013d58:	0309      	lsls	r1, r1, #12
10013d5a:	4c13      	ldr	r4, [pc, #76]	; (10013da8 <__aeabi_dadd+0x650>)
10013d5c:	2500      	movs	r5, #0
10013d5e:	e5bb      	b.n	100138d8 <__aeabi_dadd+0x180>
10013d60:	430d      	orrs	r5, r1
10013d62:	1e69      	subs	r1, r5, #1
10013d64:	418d      	sbcs	r5, r1
10013d66:	2100      	movs	r1, #0
10013d68:	b2ed      	uxtb	r5, r5
10013d6a:	e769      	b.n	10013c40 <__aeabi_dadd+0x4e8>
10013d6c:	0001      	movs	r1, r0
10013d6e:	0015      	movs	r5, r2
10013d70:	4c0d      	ldr	r4, [pc, #52]	; (10013da8 <__aeabi_dadd+0x650>)
10013d72:	e51a      	b.n	100137aa <__aeabi_dadd+0x52>
10013d74:	0001      	movs	r1, r0
10013d76:	0015      	movs	r5, r2
10013d78:	e517      	b.n	100137aa <__aeabi_dadd+0x52>
10013d7a:	001c      	movs	r4, r3
10013d7c:	000f      	movs	r7, r1
10013d7e:	3c20      	subs	r4, #32
10013d80:	40e7      	lsrs	r7, r4
10013d82:	003c      	movs	r4, r7
10013d84:	2b20      	cmp	r3, #32
10013d86:	d00c      	beq.n	10013da2 <__aeabi_dadd+0x64a>
10013d88:	2740      	movs	r7, #64	; 0x40
10013d8a:	1afb      	subs	r3, r7, r3
10013d8c:	4099      	lsls	r1, r3
10013d8e:	430d      	orrs	r5, r1
10013d90:	1e69      	subs	r1, r5, #1
10013d92:	418d      	sbcs	r5, r1
10013d94:	2100      	movs	r1, #0
10013d96:	4325      	orrs	r5, r4
10013d98:	e752      	b.n	10013c40 <__aeabi_dadd+0x4e8>
10013d9a:	2100      	movs	r1, #0
10013d9c:	e7d4      	b.n	10013d48 <__aeabi_dadd+0x5f0>
10013d9e:	001d      	movs	r5, r3
10013da0:	e592      	b.n	100138c8 <__aeabi_dadd+0x170>
10013da2:	2100      	movs	r1, #0
10013da4:	e7f3      	b.n	10013d8e <__aeabi_dadd+0x636>
10013da6:	46c0      	nop			; (mov r8, r8)
10013da8:	000007ff 	.word	0x000007ff
10013dac:	ff7fffff 	.word	0xff7fffff

10013db0 <__aeabi_ddiv>:
10013db0:	b5f0      	push	{r4, r5, r6, r7, lr}
10013db2:	4656      	mov	r6, sl
10013db4:	464d      	mov	r5, r9
10013db6:	4644      	mov	r4, r8
10013db8:	465f      	mov	r7, fp
10013dba:	b4f0      	push	{r4, r5, r6, r7}
10013dbc:	001d      	movs	r5, r3
10013dbe:	030e      	lsls	r6, r1, #12
10013dc0:	004c      	lsls	r4, r1, #1
10013dc2:	0fcb      	lsrs	r3, r1, #31
10013dc4:	b087      	sub	sp, #28
10013dc6:	0007      	movs	r7, r0
10013dc8:	4692      	mov	sl, r2
10013dca:	4681      	mov	r9, r0
10013dcc:	0b36      	lsrs	r6, r6, #12
10013dce:	0d64      	lsrs	r4, r4, #21
10013dd0:	4698      	mov	r8, r3
10013dd2:	d06a      	beq.n	10013eaa <__aeabi_ddiv+0xfa>
10013dd4:	4b6d      	ldr	r3, [pc, #436]	; (10013f8c <__aeabi_ddiv+0x1dc>)
10013dd6:	429c      	cmp	r4, r3
10013dd8:	d035      	beq.n	10013e46 <__aeabi_ddiv+0x96>
10013dda:	2280      	movs	r2, #128	; 0x80
10013ddc:	0f43      	lsrs	r3, r0, #29
10013dde:	0412      	lsls	r2, r2, #16
10013de0:	4313      	orrs	r3, r2
10013de2:	00f6      	lsls	r6, r6, #3
10013de4:	431e      	orrs	r6, r3
10013de6:	00c3      	lsls	r3, r0, #3
10013de8:	4699      	mov	r9, r3
10013dea:	4b69      	ldr	r3, [pc, #420]	; (10013f90 <__aeabi_ddiv+0x1e0>)
10013dec:	2700      	movs	r7, #0
10013dee:	469c      	mov	ip, r3
10013df0:	2300      	movs	r3, #0
10013df2:	4464      	add	r4, ip
10013df4:	9302      	str	r3, [sp, #8]
10013df6:	032b      	lsls	r3, r5, #12
10013df8:	0068      	lsls	r0, r5, #1
10013dfa:	0b1b      	lsrs	r3, r3, #12
10013dfc:	0fed      	lsrs	r5, r5, #31
10013dfe:	4651      	mov	r1, sl
10013e00:	469b      	mov	fp, r3
10013e02:	0d40      	lsrs	r0, r0, #21
10013e04:	9500      	str	r5, [sp, #0]
10013e06:	d100      	bne.n	10013e0a <__aeabi_ddiv+0x5a>
10013e08:	e078      	b.n	10013efc <__aeabi_ddiv+0x14c>
10013e0a:	4b60      	ldr	r3, [pc, #384]	; (10013f8c <__aeabi_ddiv+0x1dc>)
10013e0c:	4298      	cmp	r0, r3
10013e0e:	d06c      	beq.n	10013eea <__aeabi_ddiv+0x13a>
10013e10:	465b      	mov	r3, fp
10013e12:	00da      	lsls	r2, r3, #3
10013e14:	0f4b      	lsrs	r3, r1, #29
10013e16:	2180      	movs	r1, #128	; 0x80
10013e18:	0409      	lsls	r1, r1, #16
10013e1a:	430b      	orrs	r3, r1
10013e1c:	4313      	orrs	r3, r2
10013e1e:	469b      	mov	fp, r3
10013e20:	4653      	mov	r3, sl
10013e22:	00d9      	lsls	r1, r3, #3
10013e24:	4b5a      	ldr	r3, [pc, #360]	; (10013f90 <__aeabi_ddiv+0x1e0>)
10013e26:	469c      	mov	ip, r3
10013e28:	2300      	movs	r3, #0
10013e2a:	4460      	add	r0, ip
10013e2c:	4642      	mov	r2, r8
10013e2e:	1a20      	subs	r0, r4, r0
10013e30:	406a      	eors	r2, r5
10013e32:	4692      	mov	sl, r2
10013e34:	9001      	str	r0, [sp, #4]
10013e36:	431f      	orrs	r7, r3
10013e38:	2f0f      	cmp	r7, #15
10013e3a:	d900      	bls.n	10013e3e <__aeabi_ddiv+0x8e>
10013e3c:	e0b0      	b.n	10013fa0 <__aeabi_ddiv+0x1f0>
10013e3e:	4855      	ldr	r0, [pc, #340]	; (10013f94 <__aeabi_ddiv+0x1e4>)
10013e40:	00bf      	lsls	r7, r7, #2
10013e42:	59c0      	ldr	r0, [r0, r7]
10013e44:	4687      	mov	pc, r0
10013e46:	4337      	orrs	r7, r6
10013e48:	d000      	beq.n	10013e4c <__aeabi_ddiv+0x9c>
10013e4a:	e088      	b.n	10013f5e <__aeabi_ddiv+0x1ae>
10013e4c:	2300      	movs	r3, #0
10013e4e:	4699      	mov	r9, r3
10013e50:	3302      	adds	r3, #2
10013e52:	2708      	movs	r7, #8
10013e54:	2600      	movs	r6, #0
10013e56:	9302      	str	r3, [sp, #8]
10013e58:	e7cd      	b.n	10013df6 <__aeabi_ddiv+0x46>
10013e5a:	4643      	mov	r3, r8
10013e5c:	46b3      	mov	fp, r6
10013e5e:	4649      	mov	r1, r9
10013e60:	9300      	str	r3, [sp, #0]
10013e62:	9b02      	ldr	r3, [sp, #8]
10013e64:	9a00      	ldr	r2, [sp, #0]
10013e66:	4692      	mov	sl, r2
10013e68:	2b02      	cmp	r3, #2
10013e6a:	d000      	beq.n	10013e6e <__aeabi_ddiv+0xbe>
10013e6c:	e1bf      	b.n	100141ee <__aeabi_ddiv+0x43e>
10013e6e:	2100      	movs	r1, #0
10013e70:	4653      	mov	r3, sl
10013e72:	2201      	movs	r2, #1
10013e74:	2600      	movs	r6, #0
10013e76:	4689      	mov	r9, r1
10013e78:	401a      	ands	r2, r3
10013e7a:	4b44      	ldr	r3, [pc, #272]	; (10013f8c <__aeabi_ddiv+0x1dc>)
10013e7c:	2100      	movs	r1, #0
10013e7e:	0336      	lsls	r6, r6, #12
10013e80:	0d0c      	lsrs	r4, r1, #20
10013e82:	0524      	lsls	r4, r4, #20
10013e84:	0b36      	lsrs	r6, r6, #12
10013e86:	4326      	orrs	r6, r4
10013e88:	4c43      	ldr	r4, [pc, #268]	; (10013f98 <__aeabi_ddiv+0x1e8>)
10013e8a:	051b      	lsls	r3, r3, #20
10013e8c:	4026      	ands	r6, r4
10013e8e:	431e      	orrs	r6, r3
10013e90:	0076      	lsls	r6, r6, #1
10013e92:	07d2      	lsls	r2, r2, #31
10013e94:	0876      	lsrs	r6, r6, #1
10013e96:	4316      	orrs	r6, r2
10013e98:	4648      	mov	r0, r9
10013e9a:	0031      	movs	r1, r6
10013e9c:	b007      	add	sp, #28
10013e9e:	bc3c      	pop	{r2, r3, r4, r5}
10013ea0:	4690      	mov	r8, r2
10013ea2:	4699      	mov	r9, r3
10013ea4:	46a2      	mov	sl, r4
10013ea6:	46ab      	mov	fp, r5
10013ea8:	bdf0      	pop	{r4, r5, r6, r7, pc}
10013eaa:	0033      	movs	r3, r6
10013eac:	4303      	orrs	r3, r0
10013eae:	d04f      	beq.n	10013f50 <__aeabi_ddiv+0x1a0>
10013eb0:	2e00      	cmp	r6, #0
10013eb2:	d100      	bne.n	10013eb6 <__aeabi_ddiv+0x106>
10013eb4:	e1bc      	b.n	10014230 <__aeabi_ddiv+0x480>
10013eb6:	0030      	movs	r0, r6
10013eb8:	f001 fb1c 	bl	100154f4 <__clzsi2>
10013ebc:	0003      	movs	r3, r0
10013ebe:	3b0b      	subs	r3, #11
10013ec0:	2b1c      	cmp	r3, #28
10013ec2:	dd00      	ble.n	10013ec6 <__aeabi_ddiv+0x116>
10013ec4:	e1ad      	b.n	10014222 <__aeabi_ddiv+0x472>
10013ec6:	221d      	movs	r2, #29
10013ec8:	0001      	movs	r1, r0
10013eca:	1ad3      	subs	r3, r2, r3
10013ecc:	3908      	subs	r1, #8
10013ece:	003a      	movs	r2, r7
10013ed0:	408f      	lsls	r7, r1
10013ed2:	408e      	lsls	r6, r1
10013ed4:	40da      	lsrs	r2, r3
10013ed6:	46b9      	mov	r9, r7
10013ed8:	4316      	orrs	r6, r2
10013eda:	4b30      	ldr	r3, [pc, #192]	; (10013f9c <__aeabi_ddiv+0x1ec>)
10013edc:	2700      	movs	r7, #0
10013ede:	469c      	mov	ip, r3
10013ee0:	2300      	movs	r3, #0
10013ee2:	4460      	add	r0, ip
10013ee4:	4244      	negs	r4, r0
10013ee6:	9302      	str	r3, [sp, #8]
10013ee8:	e785      	b.n	10013df6 <__aeabi_ddiv+0x46>
10013eea:	4653      	mov	r3, sl
10013eec:	465a      	mov	r2, fp
10013eee:	4313      	orrs	r3, r2
10013ef0:	d12c      	bne.n	10013f4c <__aeabi_ddiv+0x19c>
10013ef2:	2300      	movs	r3, #0
10013ef4:	2100      	movs	r1, #0
10013ef6:	469b      	mov	fp, r3
10013ef8:	3302      	adds	r3, #2
10013efa:	e797      	b.n	10013e2c <__aeabi_ddiv+0x7c>
10013efc:	430b      	orrs	r3, r1
10013efe:	d020      	beq.n	10013f42 <__aeabi_ddiv+0x192>
10013f00:	465b      	mov	r3, fp
10013f02:	2b00      	cmp	r3, #0
10013f04:	d100      	bne.n	10013f08 <__aeabi_ddiv+0x158>
10013f06:	e19e      	b.n	10014246 <__aeabi_ddiv+0x496>
10013f08:	4658      	mov	r0, fp
10013f0a:	f001 faf3 	bl	100154f4 <__clzsi2>
10013f0e:	0003      	movs	r3, r0
10013f10:	3b0b      	subs	r3, #11
10013f12:	2b1c      	cmp	r3, #28
10013f14:	dd00      	ble.n	10013f18 <__aeabi_ddiv+0x168>
10013f16:	e18f      	b.n	10014238 <__aeabi_ddiv+0x488>
10013f18:	0002      	movs	r2, r0
10013f1a:	4659      	mov	r1, fp
10013f1c:	3a08      	subs	r2, #8
10013f1e:	4091      	lsls	r1, r2
10013f20:	468b      	mov	fp, r1
10013f22:	211d      	movs	r1, #29
10013f24:	1acb      	subs	r3, r1, r3
10013f26:	4651      	mov	r1, sl
10013f28:	40d9      	lsrs	r1, r3
10013f2a:	000b      	movs	r3, r1
10013f2c:	4659      	mov	r1, fp
10013f2e:	430b      	orrs	r3, r1
10013f30:	4651      	mov	r1, sl
10013f32:	469b      	mov	fp, r3
10013f34:	4091      	lsls	r1, r2
10013f36:	4b19      	ldr	r3, [pc, #100]	; (10013f9c <__aeabi_ddiv+0x1ec>)
10013f38:	469c      	mov	ip, r3
10013f3a:	4460      	add	r0, ip
10013f3c:	4240      	negs	r0, r0
10013f3e:	2300      	movs	r3, #0
10013f40:	e774      	b.n	10013e2c <__aeabi_ddiv+0x7c>
10013f42:	2300      	movs	r3, #0
10013f44:	2100      	movs	r1, #0
10013f46:	469b      	mov	fp, r3
10013f48:	3301      	adds	r3, #1
10013f4a:	e76f      	b.n	10013e2c <__aeabi_ddiv+0x7c>
10013f4c:	2303      	movs	r3, #3
10013f4e:	e76d      	b.n	10013e2c <__aeabi_ddiv+0x7c>
10013f50:	2300      	movs	r3, #0
10013f52:	4699      	mov	r9, r3
10013f54:	3301      	adds	r3, #1
10013f56:	2704      	movs	r7, #4
10013f58:	2600      	movs	r6, #0
10013f5a:	9302      	str	r3, [sp, #8]
10013f5c:	e74b      	b.n	10013df6 <__aeabi_ddiv+0x46>
10013f5e:	2303      	movs	r3, #3
10013f60:	270c      	movs	r7, #12
10013f62:	9302      	str	r3, [sp, #8]
10013f64:	e747      	b.n	10013df6 <__aeabi_ddiv+0x46>
10013f66:	2201      	movs	r2, #1
10013f68:	1ad5      	subs	r5, r2, r3
10013f6a:	2d38      	cmp	r5, #56	; 0x38
10013f6c:	dc00      	bgt.n	10013f70 <__aeabi_ddiv+0x1c0>
10013f6e:	e1b0      	b.n	100142d2 <__aeabi_ddiv+0x522>
10013f70:	4653      	mov	r3, sl
10013f72:	401a      	ands	r2, r3
10013f74:	2100      	movs	r1, #0
10013f76:	2300      	movs	r3, #0
10013f78:	2600      	movs	r6, #0
10013f7a:	4689      	mov	r9, r1
10013f7c:	e77e      	b.n	10013e7c <__aeabi_ddiv+0xcc>
10013f7e:	2300      	movs	r3, #0
10013f80:	2680      	movs	r6, #128	; 0x80
10013f82:	4699      	mov	r9, r3
10013f84:	2200      	movs	r2, #0
10013f86:	0336      	lsls	r6, r6, #12
10013f88:	4b00      	ldr	r3, [pc, #0]	; (10013f8c <__aeabi_ddiv+0x1dc>)
10013f8a:	e777      	b.n	10013e7c <__aeabi_ddiv+0xcc>
10013f8c:	000007ff 	.word	0x000007ff
10013f90:	fffffc01 	.word	0xfffffc01
10013f94:	100177c0 	.word	0x100177c0
10013f98:	800fffff 	.word	0x800fffff
10013f9c:	000003f3 	.word	0x000003f3
10013fa0:	455e      	cmp	r6, fp
10013fa2:	d900      	bls.n	10013fa6 <__aeabi_ddiv+0x1f6>
10013fa4:	e172      	b.n	1001428c <__aeabi_ddiv+0x4dc>
10013fa6:	d100      	bne.n	10013faa <__aeabi_ddiv+0x1fa>
10013fa8:	e16d      	b.n	10014286 <__aeabi_ddiv+0x4d6>
10013faa:	9b01      	ldr	r3, [sp, #4]
10013fac:	464d      	mov	r5, r9
10013fae:	3b01      	subs	r3, #1
10013fb0:	9301      	str	r3, [sp, #4]
10013fb2:	2300      	movs	r3, #0
10013fb4:	0034      	movs	r4, r6
10013fb6:	9302      	str	r3, [sp, #8]
10013fb8:	465b      	mov	r3, fp
10013fba:	021e      	lsls	r6, r3, #8
10013fbc:	0e0b      	lsrs	r3, r1, #24
10013fbe:	431e      	orrs	r6, r3
10013fc0:	020b      	lsls	r3, r1, #8
10013fc2:	9303      	str	r3, [sp, #12]
10013fc4:	0c33      	lsrs	r3, r6, #16
10013fc6:	4699      	mov	r9, r3
10013fc8:	0433      	lsls	r3, r6, #16
10013fca:	0c1b      	lsrs	r3, r3, #16
10013fcc:	4649      	mov	r1, r9
10013fce:	0020      	movs	r0, r4
10013fd0:	9300      	str	r3, [sp, #0]
10013fd2:	f7fe fc65 	bl	100128a0 <__aeabi_uidiv>
10013fd6:	9b00      	ldr	r3, [sp, #0]
10013fd8:	0037      	movs	r7, r6
10013fda:	4343      	muls	r3, r0
10013fdc:	0006      	movs	r6, r0
10013fde:	4649      	mov	r1, r9
10013fe0:	0020      	movs	r0, r4
10013fe2:	4698      	mov	r8, r3
10013fe4:	f7fe fce2 	bl	100129ac <__aeabi_uidivmod>
10013fe8:	0c2c      	lsrs	r4, r5, #16
10013fea:	0409      	lsls	r1, r1, #16
10013fec:	430c      	orrs	r4, r1
10013fee:	45a0      	cmp	r8, r4
10013ff0:	d909      	bls.n	10014006 <__aeabi_ddiv+0x256>
10013ff2:	19e4      	adds	r4, r4, r7
10013ff4:	1e73      	subs	r3, r6, #1
10013ff6:	42a7      	cmp	r7, r4
10013ff8:	d900      	bls.n	10013ffc <__aeabi_ddiv+0x24c>
10013ffa:	e15c      	b.n	100142b6 <__aeabi_ddiv+0x506>
10013ffc:	45a0      	cmp	r8, r4
10013ffe:	d800      	bhi.n	10014002 <__aeabi_ddiv+0x252>
10014000:	e159      	b.n	100142b6 <__aeabi_ddiv+0x506>
10014002:	3e02      	subs	r6, #2
10014004:	19e4      	adds	r4, r4, r7
10014006:	4643      	mov	r3, r8
10014008:	1ae4      	subs	r4, r4, r3
1001400a:	4649      	mov	r1, r9
1001400c:	0020      	movs	r0, r4
1001400e:	f7fe fc47 	bl	100128a0 <__aeabi_uidiv>
10014012:	0003      	movs	r3, r0
10014014:	9a00      	ldr	r2, [sp, #0]
10014016:	4680      	mov	r8, r0
10014018:	4353      	muls	r3, r2
1001401a:	4649      	mov	r1, r9
1001401c:	0020      	movs	r0, r4
1001401e:	469b      	mov	fp, r3
10014020:	f7fe fcc4 	bl	100129ac <__aeabi_uidivmod>
10014024:	042a      	lsls	r2, r5, #16
10014026:	0409      	lsls	r1, r1, #16
10014028:	0c12      	lsrs	r2, r2, #16
1001402a:	430a      	orrs	r2, r1
1001402c:	4593      	cmp	fp, r2
1001402e:	d90d      	bls.n	1001404c <__aeabi_ddiv+0x29c>
10014030:	4643      	mov	r3, r8
10014032:	19d2      	adds	r2, r2, r7
10014034:	3b01      	subs	r3, #1
10014036:	4297      	cmp	r7, r2
10014038:	d900      	bls.n	1001403c <__aeabi_ddiv+0x28c>
1001403a:	e13a      	b.n	100142b2 <__aeabi_ddiv+0x502>
1001403c:	4593      	cmp	fp, r2
1001403e:	d800      	bhi.n	10014042 <__aeabi_ddiv+0x292>
10014040:	e137      	b.n	100142b2 <__aeabi_ddiv+0x502>
10014042:	2302      	movs	r3, #2
10014044:	425b      	negs	r3, r3
10014046:	469c      	mov	ip, r3
10014048:	19d2      	adds	r2, r2, r7
1001404a:	44e0      	add	r8, ip
1001404c:	465b      	mov	r3, fp
1001404e:	1ad2      	subs	r2, r2, r3
10014050:	4643      	mov	r3, r8
10014052:	0436      	lsls	r6, r6, #16
10014054:	4333      	orrs	r3, r6
10014056:	469b      	mov	fp, r3
10014058:	9903      	ldr	r1, [sp, #12]
1001405a:	0c18      	lsrs	r0, r3, #16
1001405c:	0c0b      	lsrs	r3, r1, #16
1001405e:	001d      	movs	r5, r3
10014060:	9305      	str	r3, [sp, #20]
10014062:	0409      	lsls	r1, r1, #16
10014064:	465b      	mov	r3, fp
10014066:	0c09      	lsrs	r1, r1, #16
10014068:	000c      	movs	r4, r1
1001406a:	041b      	lsls	r3, r3, #16
1001406c:	0c1b      	lsrs	r3, r3, #16
1001406e:	4344      	muls	r4, r0
10014070:	9104      	str	r1, [sp, #16]
10014072:	4359      	muls	r1, r3
10014074:	436b      	muls	r3, r5
10014076:	4368      	muls	r0, r5
10014078:	191b      	adds	r3, r3, r4
1001407a:	0c0d      	lsrs	r5, r1, #16
1001407c:	18eb      	adds	r3, r5, r3
1001407e:	429c      	cmp	r4, r3
10014080:	d903      	bls.n	1001408a <__aeabi_ddiv+0x2da>
10014082:	2480      	movs	r4, #128	; 0x80
10014084:	0264      	lsls	r4, r4, #9
10014086:	46a4      	mov	ip, r4
10014088:	4460      	add	r0, ip
1001408a:	0c1c      	lsrs	r4, r3, #16
1001408c:	0409      	lsls	r1, r1, #16
1001408e:	041b      	lsls	r3, r3, #16
10014090:	0c09      	lsrs	r1, r1, #16
10014092:	1820      	adds	r0, r4, r0
10014094:	185d      	adds	r5, r3, r1
10014096:	4282      	cmp	r2, r0
10014098:	d200      	bcs.n	1001409c <__aeabi_ddiv+0x2ec>
1001409a:	e0de      	b.n	1001425a <__aeabi_ddiv+0x4aa>
1001409c:	d100      	bne.n	100140a0 <__aeabi_ddiv+0x2f0>
1001409e:	e0d7      	b.n	10014250 <__aeabi_ddiv+0x4a0>
100140a0:	1a16      	subs	r6, r2, r0
100140a2:	9b02      	ldr	r3, [sp, #8]
100140a4:	469c      	mov	ip, r3
100140a6:	1b5d      	subs	r5, r3, r5
100140a8:	45ac      	cmp	ip, r5
100140aa:	419b      	sbcs	r3, r3
100140ac:	425b      	negs	r3, r3
100140ae:	1af6      	subs	r6, r6, r3
100140b0:	42b7      	cmp	r7, r6
100140b2:	d100      	bne.n	100140b6 <__aeabi_ddiv+0x306>
100140b4:	e106      	b.n	100142c4 <__aeabi_ddiv+0x514>
100140b6:	4649      	mov	r1, r9
100140b8:	0030      	movs	r0, r6
100140ba:	f7fe fbf1 	bl	100128a0 <__aeabi_uidiv>
100140be:	9b00      	ldr	r3, [sp, #0]
100140c0:	0004      	movs	r4, r0
100140c2:	4343      	muls	r3, r0
100140c4:	4649      	mov	r1, r9
100140c6:	0030      	movs	r0, r6
100140c8:	4698      	mov	r8, r3
100140ca:	f7fe fc6f 	bl	100129ac <__aeabi_uidivmod>
100140ce:	0c2e      	lsrs	r6, r5, #16
100140d0:	0409      	lsls	r1, r1, #16
100140d2:	430e      	orrs	r6, r1
100140d4:	45b0      	cmp	r8, r6
100140d6:	d909      	bls.n	100140ec <__aeabi_ddiv+0x33c>
100140d8:	19f6      	adds	r6, r6, r7
100140da:	1e63      	subs	r3, r4, #1
100140dc:	42b7      	cmp	r7, r6
100140de:	d900      	bls.n	100140e2 <__aeabi_ddiv+0x332>
100140e0:	e0f3      	b.n	100142ca <__aeabi_ddiv+0x51a>
100140e2:	45b0      	cmp	r8, r6
100140e4:	d800      	bhi.n	100140e8 <__aeabi_ddiv+0x338>
100140e6:	e0f0      	b.n	100142ca <__aeabi_ddiv+0x51a>
100140e8:	3c02      	subs	r4, #2
100140ea:	19f6      	adds	r6, r6, r7
100140ec:	4643      	mov	r3, r8
100140ee:	1af3      	subs	r3, r6, r3
100140f0:	4649      	mov	r1, r9
100140f2:	0018      	movs	r0, r3
100140f4:	9302      	str	r3, [sp, #8]
100140f6:	f7fe fbd3 	bl	100128a0 <__aeabi_uidiv>
100140fa:	9b00      	ldr	r3, [sp, #0]
100140fc:	0006      	movs	r6, r0
100140fe:	4343      	muls	r3, r0
10014100:	4649      	mov	r1, r9
10014102:	9802      	ldr	r0, [sp, #8]
10014104:	4698      	mov	r8, r3
10014106:	f7fe fc51 	bl	100129ac <__aeabi_uidivmod>
1001410a:	042d      	lsls	r5, r5, #16
1001410c:	0409      	lsls	r1, r1, #16
1001410e:	0c2d      	lsrs	r5, r5, #16
10014110:	430d      	orrs	r5, r1
10014112:	45a8      	cmp	r8, r5
10014114:	d909      	bls.n	1001412a <__aeabi_ddiv+0x37a>
10014116:	19ed      	adds	r5, r5, r7
10014118:	1e73      	subs	r3, r6, #1
1001411a:	42af      	cmp	r7, r5
1001411c:	d900      	bls.n	10014120 <__aeabi_ddiv+0x370>
1001411e:	e0d6      	b.n	100142ce <__aeabi_ddiv+0x51e>
10014120:	45a8      	cmp	r8, r5
10014122:	d800      	bhi.n	10014126 <__aeabi_ddiv+0x376>
10014124:	e0d3      	b.n	100142ce <__aeabi_ddiv+0x51e>
10014126:	3e02      	subs	r6, #2
10014128:	19ed      	adds	r5, r5, r7
1001412a:	0424      	lsls	r4, r4, #16
1001412c:	0021      	movs	r1, r4
1001412e:	4643      	mov	r3, r8
10014130:	4331      	orrs	r1, r6
10014132:	9e04      	ldr	r6, [sp, #16]
10014134:	9a05      	ldr	r2, [sp, #20]
10014136:	0030      	movs	r0, r6
10014138:	1aed      	subs	r5, r5, r3
1001413a:	040b      	lsls	r3, r1, #16
1001413c:	0c0c      	lsrs	r4, r1, #16
1001413e:	0c1b      	lsrs	r3, r3, #16
10014140:	4358      	muls	r0, r3
10014142:	4366      	muls	r6, r4
10014144:	4353      	muls	r3, r2
10014146:	4354      	muls	r4, r2
10014148:	199a      	adds	r2, r3, r6
1001414a:	0c03      	lsrs	r3, r0, #16
1001414c:	189b      	adds	r3, r3, r2
1001414e:	429e      	cmp	r6, r3
10014150:	d903      	bls.n	1001415a <__aeabi_ddiv+0x3aa>
10014152:	2280      	movs	r2, #128	; 0x80
10014154:	0252      	lsls	r2, r2, #9
10014156:	4694      	mov	ip, r2
10014158:	4464      	add	r4, ip
1001415a:	0c1a      	lsrs	r2, r3, #16
1001415c:	0400      	lsls	r0, r0, #16
1001415e:	041b      	lsls	r3, r3, #16
10014160:	0c00      	lsrs	r0, r0, #16
10014162:	1914      	adds	r4, r2, r4
10014164:	181b      	adds	r3, r3, r0
10014166:	42a5      	cmp	r5, r4
10014168:	d350      	bcc.n	1001420c <__aeabi_ddiv+0x45c>
1001416a:	d04d      	beq.n	10014208 <__aeabi_ddiv+0x458>
1001416c:	2301      	movs	r3, #1
1001416e:	4319      	orrs	r1, r3
10014170:	4a96      	ldr	r2, [pc, #600]	; (100143cc <__aeabi_ddiv+0x61c>)
10014172:	9b01      	ldr	r3, [sp, #4]
10014174:	4694      	mov	ip, r2
10014176:	4463      	add	r3, ip
10014178:	2b00      	cmp	r3, #0
1001417a:	dc00      	bgt.n	1001417e <__aeabi_ddiv+0x3ce>
1001417c:	e6f3      	b.n	10013f66 <__aeabi_ddiv+0x1b6>
1001417e:	074a      	lsls	r2, r1, #29
10014180:	d009      	beq.n	10014196 <__aeabi_ddiv+0x3e6>
10014182:	220f      	movs	r2, #15
10014184:	400a      	ands	r2, r1
10014186:	2a04      	cmp	r2, #4
10014188:	d005      	beq.n	10014196 <__aeabi_ddiv+0x3e6>
1001418a:	1d0a      	adds	r2, r1, #4
1001418c:	428a      	cmp	r2, r1
1001418e:	4189      	sbcs	r1, r1
10014190:	4249      	negs	r1, r1
10014192:	448b      	add	fp, r1
10014194:	0011      	movs	r1, r2
10014196:	465a      	mov	r2, fp
10014198:	01d2      	lsls	r2, r2, #7
1001419a:	d508      	bpl.n	100141ae <__aeabi_ddiv+0x3fe>
1001419c:	465a      	mov	r2, fp
1001419e:	4b8c      	ldr	r3, [pc, #560]	; (100143d0 <__aeabi_ddiv+0x620>)
100141a0:	401a      	ands	r2, r3
100141a2:	4693      	mov	fp, r2
100141a4:	2280      	movs	r2, #128	; 0x80
100141a6:	00d2      	lsls	r2, r2, #3
100141a8:	4694      	mov	ip, r2
100141aa:	9b01      	ldr	r3, [sp, #4]
100141ac:	4463      	add	r3, ip
100141ae:	4a89      	ldr	r2, [pc, #548]	; (100143d4 <__aeabi_ddiv+0x624>)
100141b0:	4293      	cmp	r3, r2
100141b2:	dd00      	ble.n	100141b6 <__aeabi_ddiv+0x406>
100141b4:	e65b      	b.n	10013e6e <__aeabi_ddiv+0xbe>
100141b6:	465a      	mov	r2, fp
100141b8:	08c9      	lsrs	r1, r1, #3
100141ba:	0750      	lsls	r0, r2, #29
100141bc:	4308      	orrs	r0, r1
100141be:	0256      	lsls	r6, r2, #9
100141c0:	4651      	mov	r1, sl
100141c2:	2201      	movs	r2, #1
100141c4:	055b      	lsls	r3, r3, #21
100141c6:	4681      	mov	r9, r0
100141c8:	0b36      	lsrs	r6, r6, #12
100141ca:	0d5b      	lsrs	r3, r3, #21
100141cc:	400a      	ands	r2, r1
100141ce:	e655      	b.n	10013e7c <__aeabi_ddiv+0xcc>
100141d0:	2380      	movs	r3, #128	; 0x80
100141d2:	031b      	lsls	r3, r3, #12
100141d4:	421e      	tst	r6, r3
100141d6:	d011      	beq.n	100141fc <__aeabi_ddiv+0x44c>
100141d8:	465a      	mov	r2, fp
100141da:	421a      	tst	r2, r3
100141dc:	d10e      	bne.n	100141fc <__aeabi_ddiv+0x44c>
100141de:	465e      	mov	r6, fp
100141e0:	431e      	orrs	r6, r3
100141e2:	0336      	lsls	r6, r6, #12
100141e4:	0b36      	lsrs	r6, r6, #12
100141e6:	002a      	movs	r2, r5
100141e8:	4689      	mov	r9, r1
100141ea:	4b7b      	ldr	r3, [pc, #492]	; (100143d8 <__aeabi_ddiv+0x628>)
100141ec:	e646      	b.n	10013e7c <__aeabi_ddiv+0xcc>
100141ee:	2b03      	cmp	r3, #3
100141f0:	d100      	bne.n	100141f4 <__aeabi_ddiv+0x444>
100141f2:	e0e1      	b.n	100143b8 <__aeabi_ddiv+0x608>
100141f4:	2b01      	cmp	r3, #1
100141f6:	d1bb      	bne.n	10014170 <__aeabi_ddiv+0x3c0>
100141f8:	401a      	ands	r2, r3
100141fa:	e6bb      	b.n	10013f74 <__aeabi_ddiv+0x1c4>
100141fc:	431e      	orrs	r6, r3
100141fe:	0336      	lsls	r6, r6, #12
10014200:	0b36      	lsrs	r6, r6, #12
10014202:	4642      	mov	r2, r8
10014204:	4b74      	ldr	r3, [pc, #464]	; (100143d8 <__aeabi_ddiv+0x628>)
10014206:	e639      	b.n	10013e7c <__aeabi_ddiv+0xcc>
10014208:	2b00      	cmp	r3, #0
1001420a:	d0b1      	beq.n	10014170 <__aeabi_ddiv+0x3c0>
1001420c:	197d      	adds	r5, r7, r5
1001420e:	1e4a      	subs	r2, r1, #1
10014210:	42af      	cmp	r7, r5
10014212:	d952      	bls.n	100142ba <__aeabi_ddiv+0x50a>
10014214:	0011      	movs	r1, r2
10014216:	42a5      	cmp	r5, r4
10014218:	d1a8      	bne.n	1001416c <__aeabi_ddiv+0x3bc>
1001421a:	9a03      	ldr	r2, [sp, #12]
1001421c:	429a      	cmp	r2, r3
1001421e:	d1a5      	bne.n	1001416c <__aeabi_ddiv+0x3bc>
10014220:	e7a6      	b.n	10014170 <__aeabi_ddiv+0x3c0>
10014222:	0003      	movs	r3, r0
10014224:	003e      	movs	r6, r7
10014226:	3b28      	subs	r3, #40	; 0x28
10014228:	409e      	lsls	r6, r3
1001422a:	2300      	movs	r3, #0
1001422c:	4699      	mov	r9, r3
1001422e:	e654      	b.n	10013eda <__aeabi_ddiv+0x12a>
10014230:	f001 f960 	bl	100154f4 <__clzsi2>
10014234:	3020      	adds	r0, #32
10014236:	e641      	b.n	10013ebc <__aeabi_ddiv+0x10c>
10014238:	0003      	movs	r3, r0
1001423a:	4652      	mov	r2, sl
1001423c:	3b28      	subs	r3, #40	; 0x28
1001423e:	409a      	lsls	r2, r3
10014240:	2100      	movs	r1, #0
10014242:	4693      	mov	fp, r2
10014244:	e677      	b.n	10013f36 <__aeabi_ddiv+0x186>
10014246:	4650      	mov	r0, sl
10014248:	f001 f954 	bl	100154f4 <__clzsi2>
1001424c:	3020      	adds	r0, #32
1001424e:	e65e      	b.n	10013f0e <__aeabi_ddiv+0x15e>
10014250:	9b02      	ldr	r3, [sp, #8]
10014252:	2600      	movs	r6, #0
10014254:	42ab      	cmp	r3, r5
10014256:	d300      	bcc.n	1001425a <__aeabi_ddiv+0x4aa>
10014258:	e723      	b.n	100140a2 <__aeabi_ddiv+0x2f2>
1001425a:	9e03      	ldr	r6, [sp, #12]
1001425c:	9902      	ldr	r1, [sp, #8]
1001425e:	46b4      	mov	ip, r6
10014260:	4461      	add	r1, ip
10014262:	4688      	mov	r8, r1
10014264:	45b0      	cmp	r8, r6
10014266:	41b6      	sbcs	r6, r6
10014268:	465b      	mov	r3, fp
1001426a:	4276      	negs	r6, r6
1001426c:	19f6      	adds	r6, r6, r7
1001426e:	18b2      	adds	r2, r6, r2
10014270:	3b01      	subs	r3, #1
10014272:	9102      	str	r1, [sp, #8]
10014274:	4297      	cmp	r7, r2
10014276:	d213      	bcs.n	100142a0 <__aeabi_ddiv+0x4f0>
10014278:	4290      	cmp	r0, r2
1001427a:	d84f      	bhi.n	1001431c <__aeabi_ddiv+0x56c>
1001427c:	d100      	bne.n	10014280 <__aeabi_ddiv+0x4d0>
1001427e:	e08e      	b.n	1001439e <__aeabi_ddiv+0x5ee>
10014280:	1a16      	subs	r6, r2, r0
10014282:	469b      	mov	fp, r3
10014284:	e70d      	b.n	100140a2 <__aeabi_ddiv+0x2f2>
10014286:	4589      	cmp	r9, r1
10014288:	d200      	bcs.n	1001428c <__aeabi_ddiv+0x4dc>
1001428a:	e68e      	b.n	10013faa <__aeabi_ddiv+0x1fa>
1001428c:	0874      	lsrs	r4, r6, #1
1001428e:	464b      	mov	r3, r9
10014290:	07f6      	lsls	r6, r6, #31
10014292:	0035      	movs	r5, r6
10014294:	085b      	lsrs	r3, r3, #1
10014296:	431d      	orrs	r5, r3
10014298:	464b      	mov	r3, r9
1001429a:	07db      	lsls	r3, r3, #31
1001429c:	9302      	str	r3, [sp, #8]
1001429e:	e68b      	b.n	10013fb8 <__aeabi_ddiv+0x208>
100142a0:	4297      	cmp	r7, r2
100142a2:	d1ed      	bne.n	10014280 <__aeabi_ddiv+0x4d0>
100142a4:	9903      	ldr	r1, [sp, #12]
100142a6:	9c02      	ldr	r4, [sp, #8]
100142a8:	42a1      	cmp	r1, r4
100142aa:	d9e5      	bls.n	10014278 <__aeabi_ddiv+0x4c8>
100142ac:	1a3e      	subs	r6, r7, r0
100142ae:	469b      	mov	fp, r3
100142b0:	e6f7      	b.n	100140a2 <__aeabi_ddiv+0x2f2>
100142b2:	4698      	mov	r8, r3
100142b4:	e6ca      	b.n	1001404c <__aeabi_ddiv+0x29c>
100142b6:	001e      	movs	r6, r3
100142b8:	e6a5      	b.n	10014006 <__aeabi_ddiv+0x256>
100142ba:	42ac      	cmp	r4, r5
100142bc:	d83e      	bhi.n	1001433c <__aeabi_ddiv+0x58c>
100142be:	d074      	beq.n	100143aa <__aeabi_ddiv+0x5fa>
100142c0:	0011      	movs	r1, r2
100142c2:	e753      	b.n	1001416c <__aeabi_ddiv+0x3bc>
100142c4:	2101      	movs	r1, #1
100142c6:	4249      	negs	r1, r1
100142c8:	e752      	b.n	10014170 <__aeabi_ddiv+0x3c0>
100142ca:	001c      	movs	r4, r3
100142cc:	e70e      	b.n	100140ec <__aeabi_ddiv+0x33c>
100142ce:	001e      	movs	r6, r3
100142d0:	e72b      	b.n	1001412a <__aeabi_ddiv+0x37a>
100142d2:	2d1f      	cmp	r5, #31
100142d4:	dc3c      	bgt.n	10014350 <__aeabi_ddiv+0x5a0>
100142d6:	2320      	movs	r3, #32
100142d8:	000a      	movs	r2, r1
100142da:	4658      	mov	r0, fp
100142dc:	1b5b      	subs	r3, r3, r5
100142de:	4098      	lsls	r0, r3
100142e0:	40ea      	lsrs	r2, r5
100142e2:	4099      	lsls	r1, r3
100142e4:	4302      	orrs	r2, r0
100142e6:	1e48      	subs	r0, r1, #1
100142e8:	4181      	sbcs	r1, r0
100142ea:	465e      	mov	r6, fp
100142ec:	4311      	orrs	r1, r2
100142ee:	40ee      	lsrs	r6, r5
100142f0:	074b      	lsls	r3, r1, #29
100142f2:	d009      	beq.n	10014308 <__aeabi_ddiv+0x558>
100142f4:	230f      	movs	r3, #15
100142f6:	400b      	ands	r3, r1
100142f8:	2b04      	cmp	r3, #4
100142fa:	d005      	beq.n	10014308 <__aeabi_ddiv+0x558>
100142fc:	000b      	movs	r3, r1
100142fe:	1d19      	adds	r1, r3, #4
10014300:	4299      	cmp	r1, r3
10014302:	419b      	sbcs	r3, r3
10014304:	425b      	negs	r3, r3
10014306:	18f6      	adds	r6, r6, r3
10014308:	0233      	lsls	r3, r6, #8
1001430a:	d53c      	bpl.n	10014386 <__aeabi_ddiv+0x5d6>
1001430c:	4653      	mov	r3, sl
1001430e:	2201      	movs	r2, #1
10014310:	2100      	movs	r1, #0
10014312:	401a      	ands	r2, r3
10014314:	2600      	movs	r6, #0
10014316:	2301      	movs	r3, #1
10014318:	4689      	mov	r9, r1
1001431a:	e5af      	b.n	10013e7c <__aeabi_ddiv+0xcc>
1001431c:	2302      	movs	r3, #2
1001431e:	425b      	negs	r3, r3
10014320:	469c      	mov	ip, r3
10014322:	9c03      	ldr	r4, [sp, #12]
10014324:	44e3      	add	fp, ip
10014326:	46a4      	mov	ip, r4
10014328:	9b02      	ldr	r3, [sp, #8]
1001432a:	4463      	add	r3, ip
1001432c:	4698      	mov	r8, r3
1001432e:	45a0      	cmp	r8, r4
10014330:	41b6      	sbcs	r6, r6
10014332:	4276      	negs	r6, r6
10014334:	19f6      	adds	r6, r6, r7
10014336:	9302      	str	r3, [sp, #8]
10014338:	18b2      	adds	r2, r6, r2
1001433a:	e6b1      	b.n	100140a0 <__aeabi_ddiv+0x2f0>
1001433c:	9803      	ldr	r0, [sp, #12]
1001433e:	1e8a      	subs	r2, r1, #2
10014340:	0041      	lsls	r1, r0, #1
10014342:	4281      	cmp	r1, r0
10014344:	41b6      	sbcs	r6, r6
10014346:	4276      	negs	r6, r6
10014348:	19f6      	adds	r6, r6, r7
1001434a:	19ad      	adds	r5, r5, r6
1001434c:	9103      	str	r1, [sp, #12]
1001434e:	e761      	b.n	10014214 <__aeabi_ddiv+0x464>
10014350:	221f      	movs	r2, #31
10014352:	4252      	negs	r2, r2
10014354:	1ad3      	subs	r3, r2, r3
10014356:	465a      	mov	r2, fp
10014358:	40da      	lsrs	r2, r3
1001435a:	0013      	movs	r3, r2
1001435c:	2d20      	cmp	r5, #32
1001435e:	d029      	beq.n	100143b4 <__aeabi_ddiv+0x604>
10014360:	2240      	movs	r2, #64	; 0x40
10014362:	4658      	mov	r0, fp
10014364:	1b55      	subs	r5, r2, r5
10014366:	40a8      	lsls	r0, r5
10014368:	4301      	orrs	r1, r0
1001436a:	1e48      	subs	r0, r1, #1
1001436c:	4181      	sbcs	r1, r0
1001436e:	2007      	movs	r0, #7
10014370:	430b      	orrs	r3, r1
10014372:	4018      	ands	r0, r3
10014374:	2600      	movs	r6, #0
10014376:	2800      	cmp	r0, #0
10014378:	d009      	beq.n	1001438e <__aeabi_ddiv+0x5de>
1001437a:	220f      	movs	r2, #15
1001437c:	2600      	movs	r6, #0
1001437e:	401a      	ands	r2, r3
10014380:	0019      	movs	r1, r3
10014382:	2a04      	cmp	r2, #4
10014384:	d1bb      	bne.n	100142fe <__aeabi_ddiv+0x54e>
10014386:	000b      	movs	r3, r1
10014388:	0770      	lsls	r0, r6, #29
1001438a:	0276      	lsls	r6, r6, #9
1001438c:	0b36      	lsrs	r6, r6, #12
1001438e:	08db      	lsrs	r3, r3, #3
10014390:	4303      	orrs	r3, r0
10014392:	4699      	mov	r9, r3
10014394:	2201      	movs	r2, #1
10014396:	4653      	mov	r3, sl
10014398:	401a      	ands	r2, r3
1001439a:	2300      	movs	r3, #0
1001439c:	e56e      	b.n	10013e7c <__aeabi_ddiv+0xcc>
1001439e:	9902      	ldr	r1, [sp, #8]
100143a0:	428d      	cmp	r5, r1
100143a2:	d8bb      	bhi.n	1001431c <__aeabi_ddiv+0x56c>
100143a4:	469b      	mov	fp, r3
100143a6:	2600      	movs	r6, #0
100143a8:	e67b      	b.n	100140a2 <__aeabi_ddiv+0x2f2>
100143aa:	9803      	ldr	r0, [sp, #12]
100143ac:	4298      	cmp	r0, r3
100143ae:	d3c5      	bcc.n	1001433c <__aeabi_ddiv+0x58c>
100143b0:	0011      	movs	r1, r2
100143b2:	e732      	b.n	1001421a <__aeabi_ddiv+0x46a>
100143b4:	2000      	movs	r0, #0
100143b6:	e7d7      	b.n	10014368 <__aeabi_ddiv+0x5b8>
100143b8:	2680      	movs	r6, #128	; 0x80
100143ba:	465b      	mov	r3, fp
100143bc:	0336      	lsls	r6, r6, #12
100143be:	431e      	orrs	r6, r3
100143c0:	0336      	lsls	r6, r6, #12
100143c2:	0b36      	lsrs	r6, r6, #12
100143c4:	9a00      	ldr	r2, [sp, #0]
100143c6:	4689      	mov	r9, r1
100143c8:	4b03      	ldr	r3, [pc, #12]	; (100143d8 <__aeabi_ddiv+0x628>)
100143ca:	e557      	b.n	10013e7c <__aeabi_ddiv+0xcc>
100143cc:	000003ff 	.word	0x000003ff
100143d0:	feffffff 	.word	0xfeffffff
100143d4:	000007fe 	.word	0x000007fe
100143d8:	000007ff 	.word	0x000007ff

100143dc <__eqdf2>:
100143dc:	b5f0      	push	{r4, r5, r6, r7, lr}
100143de:	465f      	mov	r7, fp
100143e0:	4656      	mov	r6, sl
100143e2:	464d      	mov	r5, r9
100143e4:	4644      	mov	r4, r8
100143e6:	b4f0      	push	{r4, r5, r6, r7}
100143e8:	031f      	lsls	r7, r3, #12
100143ea:	005c      	lsls	r4, r3, #1
100143ec:	0fdb      	lsrs	r3, r3, #31
100143ee:	469a      	mov	sl, r3
100143f0:	4b19      	ldr	r3, [pc, #100]	; (10014458 <__eqdf2+0x7c>)
100143f2:	030e      	lsls	r6, r1, #12
100143f4:	004d      	lsls	r5, r1, #1
100143f6:	0fc9      	lsrs	r1, r1, #31
100143f8:	4680      	mov	r8, r0
100143fa:	0b36      	lsrs	r6, r6, #12
100143fc:	0d6d      	lsrs	r5, r5, #21
100143fe:	468b      	mov	fp, r1
10014400:	4691      	mov	r9, r2
10014402:	0b3f      	lsrs	r7, r7, #12
10014404:	0d64      	lsrs	r4, r4, #21
10014406:	429d      	cmp	r5, r3
10014408:	d019      	beq.n	1001443e <__eqdf2+0x62>
1001440a:	4b13      	ldr	r3, [pc, #76]	; (10014458 <__eqdf2+0x7c>)
1001440c:	429c      	cmp	r4, r3
1001440e:	d01b      	beq.n	10014448 <__eqdf2+0x6c>
10014410:	2301      	movs	r3, #1
10014412:	42a5      	cmp	r5, r4
10014414:	d006      	beq.n	10014424 <__eqdf2+0x48>
10014416:	0018      	movs	r0, r3
10014418:	bc3c      	pop	{r2, r3, r4, r5}
1001441a:	4690      	mov	r8, r2
1001441c:	4699      	mov	r9, r3
1001441e:	46a2      	mov	sl, r4
10014420:	46ab      	mov	fp, r5
10014422:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014424:	42be      	cmp	r6, r7
10014426:	d1f6      	bne.n	10014416 <__eqdf2+0x3a>
10014428:	45c8      	cmp	r8, r9
1001442a:	d1f4      	bne.n	10014416 <__eqdf2+0x3a>
1001442c:	45d3      	cmp	fp, sl
1001442e:	d010      	beq.n	10014452 <__eqdf2+0x76>
10014430:	2d00      	cmp	r5, #0
10014432:	d1f0      	bne.n	10014416 <__eqdf2+0x3a>
10014434:	4330      	orrs	r0, r6
10014436:	0003      	movs	r3, r0
10014438:	1e5a      	subs	r2, r3, #1
1001443a:	4193      	sbcs	r3, r2
1001443c:	e7eb      	b.n	10014416 <__eqdf2+0x3a>
1001443e:	0031      	movs	r1, r6
10014440:	2301      	movs	r3, #1
10014442:	4301      	orrs	r1, r0
10014444:	d1e7      	bne.n	10014416 <__eqdf2+0x3a>
10014446:	e7e0      	b.n	1001440a <__eqdf2+0x2e>
10014448:	433a      	orrs	r2, r7
1001444a:	2301      	movs	r3, #1
1001444c:	2a00      	cmp	r2, #0
1001444e:	d1e2      	bne.n	10014416 <__eqdf2+0x3a>
10014450:	e7de      	b.n	10014410 <__eqdf2+0x34>
10014452:	2300      	movs	r3, #0
10014454:	e7df      	b.n	10014416 <__eqdf2+0x3a>
10014456:	46c0      	nop			; (mov r8, r8)
10014458:	000007ff 	.word	0x000007ff

1001445c <__gedf2>:
1001445c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001445e:	465f      	mov	r7, fp
10014460:	4644      	mov	r4, r8
10014462:	4656      	mov	r6, sl
10014464:	464d      	mov	r5, r9
10014466:	b4f0      	push	{r4, r5, r6, r7}
10014468:	031f      	lsls	r7, r3, #12
1001446a:	0b3c      	lsrs	r4, r7, #12
1001446c:	4f2c      	ldr	r7, [pc, #176]	; (10014520 <__gedf2+0xc4>)
1001446e:	030e      	lsls	r6, r1, #12
10014470:	004d      	lsls	r5, r1, #1
10014472:	46a3      	mov	fp, r4
10014474:	005c      	lsls	r4, r3, #1
10014476:	4684      	mov	ip, r0
10014478:	0b36      	lsrs	r6, r6, #12
1001447a:	0d6d      	lsrs	r5, r5, #21
1001447c:	0fc9      	lsrs	r1, r1, #31
1001447e:	4690      	mov	r8, r2
10014480:	0d64      	lsrs	r4, r4, #21
10014482:	0fdb      	lsrs	r3, r3, #31
10014484:	42bd      	cmp	r5, r7
10014486:	d02b      	beq.n	100144e0 <__gedf2+0x84>
10014488:	4f25      	ldr	r7, [pc, #148]	; (10014520 <__gedf2+0xc4>)
1001448a:	42bc      	cmp	r4, r7
1001448c:	d02e      	beq.n	100144ec <__gedf2+0x90>
1001448e:	2d00      	cmp	r5, #0
10014490:	d10e      	bne.n	100144b0 <__gedf2+0x54>
10014492:	4330      	orrs	r0, r6
10014494:	0007      	movs	r7, r0
10014496:	4681      	mov	r9, r0
10014498:	4278      	negs	r0, r7
1001449a:	4178      	adcs	r0, r7
1001449c:	2c00      	cmp	r4, #0
1001449e:	d117      	bne.n	100144d0 <__gedf2+0x74>
100144a0:	465f      	mov	r7, fp
100144a2:	433a      	orrs	r2, r7
100144a4:	d114      	bne.n	100144d0 <__gedf2+0x74>
100144a6:	464b      	mov	r3, r9
100144a8:	2000      	movs	r0, #0
100144aa:	2b00      	cmp	r3, #0
100144ac:	d00a      	beq.n	100144c4 <__gedf2+0x68>
100144ae:	e006      	b.n	100144be <__gedf2+0x62>
100144b0:	2c00      	cmp	r4, #0
100144b2:	d102      	bne.n	100144ba <__gedf2+0x5e>
100144b4:	4658      	mov	r0, fp
100144b6:	4302      	orrs	r2, r0
100144b8:	d001      	beq.n	100144be <__gedf2+0x62>
100144ba:	4299      	cmp	r1, r3
100144bc:	d01a      	beq.n	100144f4 <__gedf2+0x98>
100144be:	2301      	movs	r3, #1
100144c0:	4248      	negs	r0, r1
100144c2:	4318      	orrs	r0, r3
100144c4:	bc3c      	pop	{r2, r3, r4, r5}
100144c6:	4690      	mov	r8, r2
100144c8:	4699      	mov	r9, r3
100144ca:	46a2      	mov	sl, r4
100144cc:	46ab      	mov	fp, r5
100144ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
100144d0:	2800      	cmp	r0, #0
100144d2:	d0f2      	beq.n	100144ba <__gedf2+0x5e>
100144d4:	4258      	negs	r0, r3
100144d6:	4158      	adcs	r0, r3
100144d8:	2201      	movs	r2, #1
100144da:	4240      	negs	r0, r0
100144dc:	4310      	orrs	r0, r2
100144de:	e7f1      	b.n	100144c4 <__gedf2+0x68>
100144e0:	0037      	movs	r7, r6
100144e2:	4307      	orrs	r7, r0
100144e4:	d0d0      	beq.n	10014488 <__gedf2+0x2c>
100144e6:	2002      	movs	r0, #2
100144e8:	4240      	negs	r0, r0
100144ea:	e7eb      	b.n	100144c4 <__gedf2+0x68>
100144ec:	465f      	mov	r7, fp
100144ee:	4317      	orrs	r7, r2
100144f0:	d0cd      	beq.n	1001448e <__gedf2+0x32>
100144f2:	e7f8      	b.n	100144e6 <__gedf2+0x8a>
100144f4:	42a5      	cmp	r5, r4
100144f6:	dce2      	bgt.n	100144be <__gedf2+0x62>
100144f8:	db05      	blt.n	10014506 <__gedf2+0xaa>
100144fa:	455e      	cmp	r6, fp
100144fc:	d8df      	bhi.n	100144be <__gedf2+0x62>
100144fe:	d008      	beq.n	10014512 <__gedf2+0xb6>
10014500:	2000      	movs	r0, #0
10014502:	455e      	cmp	r6, fp
10014504:	d2de      	bcs.n	100144c4 <__gedf2+0x68>
10014506:	4248      	negs	r0, r1
10014508:	4148      	adcs	r0, r1
1001450a:	2301      	movs	r3, #1
1001450c:	4240      	negs	r0, r0
1001450e:	4318      	orrs	r0, r3
10014510:	e7d8      	b.n	100144c4 <__gedf2+0x68>
10014512:	45c4      	cmp	ip, r8
10014514:	d8d3      	bhi.n	100144be <__gedf2+0x62>
10014516:	2000      	movs	r0, #0
10014518:	45c4      	cmp	ip, r8
1001451a:	d3f4      	bcc.n	10014506 <__gedf2+0xaa>
1001451c:	e7d2      	b.n	100144c4 <__gedf2+0x68>
1001451e:	46c0      	nop			; (mov r8, r8)
10014520:	000007ff 	.word	0x000007ff

10014524 <__ledf2>:
10014524:	b5f0      	push	{r4, r5, r6, r7, lr}
10014526:	465f      	mov	r7, fp
10014528:	464d      	mov	r5, r9
1001452a:	4644      	mov	r4, r8
1001452c:	4656      	mov	r6, sl
1001452e:	b4f0      	push	{r4, r5, r6, r7}
10014530:	031c      	lsls	r4, r3, #12
10014532:	0b24      	lsrs	r4, r4, #12
10014534:	46a4      	mov	ip, r4
10014536:	4c2f      	ldr	r4, [pc, #188]	; (100145f4 <__ledf2+0xd0>)
10014538:	030f      	lsls	r7, r1, #12
1001453a:	004d      	lsls	r5, r1, #1
1001453c:	005e      	lsls	r6, r3, #1
1001453e:	0fc9      	lsrs	r1, r1, #31
10014540:	4680      	mov	r8, r0
10014542:	0b3f      	lsrs	r7, r7, #12
10014544:	0d6d      	lsrs	r5, r5, #21
10014546:	468b      	mov	fp, r1
10014548:	4691      	mov	r9, r2
1001454a:	0d76      	lsrs	r6, r6, #21
1001454c:	0fdb      	lsrs	r3, r3, #31
1001454e:	42a5      	cmp	r5, r4
10014550:	d020      	beq.n	10014594 <__ledf2+0x70>
10014552:	4c28      	ldr	r4, [pc, #160]	; (100145f4 <__ledf2+0xd0>)
10014554:	42a6      	cmp	r6, r4
10014556:	d022      	beq.n	1001459e <__ledf2+0x7a>
10014558:	2d00      	cmp	r5, #0
1001455a:	d112      	bne.n	10014582 <__ledf2+0x5e>
1001455c:	4338      	orrs	r0, r7
1001455e:	4244      	negs	r4, r0
10014560:	4144      	adcs	r4, r0
10014562:	2e00      	cmp	r6, #0
10014564:	d020      	beq.n	100145a8 <__ledf2+0x84>
10014566:	2c00      	cmp	r4, #0
10014568:	d00d      	beq.n	10014586 <__ledf2+0x62>
1001456a:	425c      	negs	r4, r3
1001456c:	4163      	adcs	r3, r4
1001456e:	2401      	movs	r4, #1
10014570:	425b      	negs	r3, r3
10014572:	431c      	orrs	r4, r3
10014574:	0020      	movs	r0, r4
10014576:	bc3c      	pop	{r2, r3, r4, r5}
10014578:	4690      	mov	r8, r2
1001457a:	4699      	mov	r9, r3
1001457c:	46a2      	mov	sl, r4
1001457e:	46ab      	mov	fp, r5
10014580:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014582:	2e00      	cmp	r6, #0
10014584:	d017      	beq.n	100145b6 <__ledf2+0x92>
10014586:	455b      	cmp	r3, fp
10014588:	d019      	beq.n	100145be <__ledf2+0x9a>
1001458a:	465b      	mov	r3, fp
1001458c:	425c      	negs	r4, r3
1001458e:	2301      	movs	r3, #1
10014590:	431c      	orrs	r4, r3
10014592:	e7ef      	b.n	10014574 <__ledf2+0x50>
10014594:	0039      	movs	r1, r7
10014596:	2402      	movs	r4, #2
10014598:	4301      	orrs	r1, r0
1001459a:	d1eb      	bne.n	10014574 <__ledf2+0x50>
1001459c:	e7d9      	b.n	10014552 <__ledf2+0x2e>
1001459e:	4661      	mov	r1, ip
100145a0:	2402      	movs	r4, #2
100145a2:	4311      	orrs	r1, r2
100145a4:	d1e6      	bne.n	10014574 <__ledf2+0x50>
100145a6:	e7d7      	b.n	10014558 <__ledf2+0x34>
100145a8:	4661      	mov	r1, ip
100145aa:	430a      	orrs	r2, r1
100145ac:	d1db      	bne.n	10014566 <__ledf2+0x42>
100145ae:	2400      	movs	r4, #0
100145b0:	2800      	cmp	r0, #0
100145b2:	d0df      	beq.n	10014574 <__ledf2+0x50>
100145b4:	e7e9      	b.n	1001458a <__ledf2+0x66>
100145b6:	4661      	mov	r1, ip
100145b8:	430a      	orrs	r2, r1
100145ba:	d1e4      	bne.n	10014586 <__ledf2+0x62>
100145bc:	e7e5      	b.n	1001458a <__ledf2+0x66>
100145be:	42b5      	cmp	r5, r6
100145c0:	dd03      	ble.n	100145ca <__ledf2+0xa6>
100145c2:	2201      	movs	r2, #1
100145c4:	425c      	negs	r4, r3
100145c6:	4314      	orrs	r4, r2
100145c8:	e7d4      	b.n	10014574 <__ledf2+0x50>
100145ca:	42b5      	cmp	r5, r6
100145cc:	dbcd      	blt.n	1001456a <__ledf2+0x46>
100145ce:	4567      	cmp	r7, ip
100145d0:	d8db      	bhi.n	1001458a <__ledf2+0x66>
100145d2:	d009      	beq.n	100145e8 <__ledf2+0xc4>
100145d4:	2400      	movs	r4, #0
100145d6:	4567      	cmp	r7, ip
100145d8:	d2cc      	bcs.n	10014574 <__ledf2+0x50>
100145da:	4659      	mov	r1, fp
100145dc:	424c      	negs	r4, r1
100145de:	4161      	adcs	r1, r4
100145e0:	2401      	movs	r4, #1
100145e2:	4249      	negs	r1, r1
100145e4:	430c      	orrs	r4, r1
100145e6:	e7c5      	b.n	10014574 <__ledf2+0x50>
100145e8:	45c8      	cmp	r8, r9
100145ea:	d8ce      	bhi.n	1001458a <__ledf2+0x66>
100145ec:	2400      	movs	r4, #0
100145ee:	45c8      	cmp	r8, r9
100145f0:	d3f3      	bcc.n	100145da <__ledf2+0xb6>
100145f2:	e7bf      	b.n	10014574 <__ledf2+0x50>
100145f4:	000007ff 	.word	0x000007ff

100145f8 <__aeabi_dmul>:
100145f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100145fa:	465f      	mov	r7, fp
100145fc:	4656      	mov	r6, sl
100145fe:	464d      	mov	r5, r9
10014600:	4644      	mov	r4, r8
10014602:	b4f0      	push	{r4, r5, r6, r7}
10014604:	030d      	lsls	r5, r1, #12
10014606:	4699      	mov	r9, r3
10014608:	004e      	lsls	r6, r1, #1
1001460a:	0b2b      	lsrs	r3, r5, #12
1001460c:	b087      	sub	sp, #28
1001460e:	0007      	movs	r7, r0
10014610:	4692      	mov	sl, r2
10014612:	4680      	mov	r8, r0
10014614:	469b      	mov	fp, r3
10014616:	0d76      	lsrs	r6, r6, #21
10014618:	0fcc      	lsrs	r4, r1, #31
1001461a:	2e00      	cmp	r6, #0
1001461c:	d069      	beq.n	100146f2 <__aeabi_dmul+0xfa>
1001461e:	4b6d      	ldr	r3, [pc, #436]	; (100147d4 <__aeabi_dmul+0x1dc>)
10014620:	429e      	cmp	r6, r3
10014622:	d035      	beq.n	10014690 <__aeabi_dmul+0x98>
10014624:	465b      	mov	r3, fp
10014626:	2280      	movs	r2, #128	; 0x80
10014628:	00dd      	lsls	r5, r3, #3
1001462a:	0412      	lsls	r2, r2, #16
1001462c:	0f43      	lsrs	r3, r0, #29
1001462e:	4313      	orrs	r3, r2
10014630:	432b      	orrs	r3, r5
10014632:	469b      	mov	fp, r3
10014634:	00c3      	lsls	r3, r0, #3
10014636:	4698      	mov	r8, r3
10014638:	4b67      	ldr	r3, [pc, #412]	; (100147d8 <__aeabi_dmul+0x1e0>)
1001463a:	2700      	movs	r7, #0
1001463c:	469c      	mov	ip, r3
1001463e:	2300      	movs	r3, #0
10014640:	4466      	add	r6, ip
10014642:	9301      	str	r3, [sp, #4]
10014644:	464a      	mov	r2, r9
10014646:	0315      	lsls	r5, r2, #12
10014648:	0050      	lsls	r0, r2, #1
1001464a:	0fd2      	lsrs	r2, r2, #31
1001464c:	4653      	mov	r3, sl
1001464e:	0b2d      	lsrs	r5, r5, #12
10014650:	0d40      	lsrs	r0, r0, #21
10014652:	4691      	mov	r9, r2
10014654:	d100      	bne.n	10014658 <__aeabi_dmul+0x60>
10014656:	e076      	b.n	10014746 <__aeabi_dmul+0x14e>
10014658:	4a5e      	ldr	r2, [pc, #376]	; (100147d4 <__aeabi_dmul+0x1dc>)
1001465a:	4290      	cmp	r0, r2
1001465c:	d06c      	beq.n	10014738 <__aeabi_dmul+0x140>
1001465e:	2280      	movs	r2, #128	; 0x80
10014660:	0f5b      	lsrs	r3, r3, #29
10014662:	0412      	lsls	r2, r2, #16
10014664:	4313      	orrs	r3, r2
10014666:	4a5c      	ldr	r2, [pc, #368]	; (100147d8 <__aeabi_dmul+0x1e0>)
10014668:	00ed      	lsls	r5, r5, #3
1001466a:	4694      	mov	ip, r2
1001466c:	431d      	orrs	r5, r3
1001466e:	4653      	mov	r3, sl
10014670:	2200      	movs	r2, #0
10014672:	00db      	lsls	r3, r3, #3
10014674:	4460      	add	r0, ip
10014676:	4649      	mov	r1, r9
10014678:	1836      	adds	r6, r6, r0
1001467a:	1c70      	adds	r0, r6, #1
1001467c:	4061      	eors	r1, r4
1001467e:	9002      	str	r0, [sp, #8]
10014680:	4317      	orrs	r7, r2
10014682:	2f0f      	cmp	r7, #15
10014684:	d900      	bls.n	10014688 <__aeabi_dmul+0x90>
10014686:	e0af      	b.n	100147e8 <__aeabi_dmul+0x1f0>
10014688:	4854      	ldr	r0, [pc, #336]	; (100147dc <__aeabi_dmul+0x1e4>)
1001468a:	00bf      	lsls	r7, r7, #2
1001468c:	59c7      	ldr	r7, [r0, r7]
1001468e:	46bf      	mov	pc, r7
10014690:	465b      	mov	r3, fp
10014692:	431f      	orrs	r7, r3
10014694:	d000      	beq.n	10014698 <__aeabi_dmul+0xa0>
10014696:	e088      	b.n	100147aa <__aeabi_dmul+0x1b2>
10014698:	2300      	movs	r3, #0
1001469a:	469b      	mov	fp, r3
1001469c:	4698      	mov	r8, r3
1001469e:	3302      	adds	r3, #2
100146a0:	2708      	movs	r7, #8
100146a2:	9301      	str	r3, [sp, #4]
100146a4:	e7ce      	b.n	10014644 <__aeabi_dmul+0x4c>
100146a6:	4649      	mov	r1, r9
100146a8:	2a02      	cmp	r2, #2
100146aa:	d06a      	beq.n	10014782 <__aeabi_dmul+0x18a>
100146ac:	2a03      	cmp	r2, #3
100146ae:	d100      	bne.n	100146b2 <__aeabi_dmul+0xba>
100146b0:	e209      	b.n	10014ac6 <__aeabi_dmul+0x4ce>
100146b2:	2a01      	cmp	r2, #1
100146b4:	d000      	beq.n	100146b8 <__aeabi_dmul+0xc0>
100146b6:	e1bb      	b.n	10014a30 <__aeabi_dmul+0x438>
100146b8:	4011      	ands	r1, r2
100146ba:	2200      	movs	r2, #0
100146bc:	2300      	movs	r3, #0
100146be:	2500      	movs	r5, #0
100146c0:	4690      	mov	r8, r2
100146c2:	b2cc      	uxtb	r4, r1
100146c4:	2100      	movs	r1, #0
100146c6:	032d      	lsls	r5, r5, #12
100146c8:	0d0a      	lsrs	r2, r1, #20
100146ca:	0512      	lsls	r2, r2, #20
100146cc:	0b2d      	lsrs	r5, r5, #12
100146ce:	4315      	orrs	r5, r2
100146d0:	4a43      	ldr	r2, [pc, #268]	; (100147e0 <__aeabi_dmul+0x1e8>)
100146d2:	051b      	lsls	r3, r3, #20
100146d4:	4015      	ands	r5, r2
100146d6:	431d      	orrs	r5, r3
100146d8:	006d      	lsls	r5, r5, #1
100146da:	07e4      	lsls	r4, r4, #31
100146dc:	086d      	lsrs	r5, r5, #1
100146de:	4325      	orrs	r5, r4
100146e0:	4640      	mov	r0, r8
100146e2:	0029      	movs	r1, r5
100146e4:	b007      	add	sp, #28
100146e6:	bc3c      	pop	{r2, r3, r4, r5}
100146e8:	4690      	mov	r8, r2
100146ea:	4699      	mov	r9, r3
100146ec:	46a2      	mov	sl, r4
100146ee:	46ab      	mov	fp, r5
100146f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
100146f2:	4303      	orrs	r3, r0
100146f4:	d052      	beq.n	1001479c <__aeabi_dmul+0x1a4>
100146f6:	465b      	mov	r3, fp
100146f8:	2b00      	cmp	r3, #0
100146fa:	d100      	bne.n	100146fe <__aeabi_dmul+0x106>
100146fc:	e18a      	b.n	10014a14 <__aeabi_dmul+0x41c>
100146fe:	4658      	mov	r0, fp
10014700:	f000 fef8 	bl	100154f4 <__clzsi2>
10014704:	0003      	movs	r3, r0
10014706:	3b0b      	subs	r3, #11
10014708:	2b1c      	cmp	r3, #28
1001470a:	dd00      	ble.n	1001470e <__aeabi_dmul+0x116>
1001470c:	e17b      	b.n	10014a06 <__aeabi_dmul+0x40e>
1001470e:	221d      	movs	r2, #29
10014710:	1ad3      	subs	r3, r2, r3
10014712:	003a      	movs	r2, r7
10014714:	0001      	movs	r1, r0
10014716:	465d      	mov	r5, fp
10014718:	40da      	lsrs	r2, r3
1001471a:	3908      	subs	r1, #8
1001471c:	408d      	lsls	r5, r1
1001471e:	0013      	movs	r3, r2
10014720:	408f      	lsls	r7, r1
10014722:	432b      	orrs	r3, r5
10014724:	469b      	mov	fp, r3
10014726:	46b8      	mov	r8, r7
10014728:	4b2e      	ldr	r3, [pc, #184]	; (100147e4 <__aeabi_dmul+0x1ec>)
1001472a:	2700      	movs	r7, #0
1001472c:	469c      	mov	ip, r3
1001472e:	2300      	movs	r3, #0
10014730:	4460      	add	r0, ip
10014732:	4246      	negs	r6, r0
10014734:	9301      	str	r3, [sp, #4]
10014736:	e785      	b.n	10014644 <__aeabi_dmul+0x4c>
10014738:	4652      	mov	r2, sl
1001473a:	432a      	orrs	r2, r5
1001473c:	d12c      	bne.n	10014798 <__aeabi_dmul+0x1a0>
1001473e:	2500      	movs	r5, #0
10014740:	2300      	movs	r3, #0
10014742:	2202      	movs	r2, #2
10014744:	e797      	b.n	10014676 <__aeabi_dmul+0x7e>
10014746:	4652      	mov	r2, sl
10014748:	432a      	orrs	r2, r5
1001474a:	d021      	beq.n	10014790 <__aeabi_dmul+0x198>
1001474c:	2d00      	cmp	r5, #0
1001474e:	d100      	bne.n	10014752 <__aeabi_dmul+0x15a>
10014750:	e154      	b.n	100149fc <__aeabi_dmul+0x404>
10014752:	0028      	movs	r0, r5
10014754:	f000 fece 	bl	100154f4 <__clzsi2>
10014758:	0003      	movs	r3, r0
1001475a:	3b0b      	subs	r3, #11
1001475c:	2b1c      	cmp	r3, #28
1001475e:	dd00      	ble.n	10014762 <__aeabi_dmul+0x16a>
10014760:	e146      	b.n	100149f0 <__aeabi_dmul+0x3f8>
10014762:	211d      	movs	r1, #29
10014764:	1acb      	subs	r3, r1, r3
10014766:	4651      	mov	r1, sl
10014768:	0002      	movs	r2, r0
1001476a:	40d9      	lsrs	r1, r3
1001476c:	4653      	mov	r3, sl
1001476e:	3a08      	subs	r2, #8
10014770:	4095      	lsls	r5, r2
10014772:	4093      	lsls	r3, r2
10014774:	430d      	orrs	r5, r1
10014776:	4a1b      	ldr	r2, [pc, #108]	; (100147e4 <__aeabi_dmul+0x1ec>)
10014778:	4694      	mov	ip, r2
1001477a:	4460      	add	r0, ip
1001477c:	4240      	negs	r0, r0
1001477e:	2200      	movs	r2, #0
10014780:	e779      	b.n	10014676 <__aeabi_dmul+0x7e>
10014782:	2401      	movs	r4, #1
10014784:	2200      	movs	r2, #0
10014786:	400c      	ands	r4, r1
10014788:	4b12      	ldr	r3, [pc, #72]	; (100147d4 <__aeabi_dmul+0x1dc>)
1001478a:	2500      	movs	r5, #0
1001478c:	4690      	mov	r8, r2
1001478e:	e799      	b.n	100146c4 <__aeabi_dmul+0xcc>
10014790:	2500      	movs	r5, #0
10014792:	2300      	movs	r3, #0
10014794:	2201      	movs	r2, #1
10014796:	e76e      	b.n	10014676 <__aeabi_dmul+0x7e>
10014798:	2203      	movs	r2, #3
1001479a:	e76c      	b.n	10014676 <__aeabi_dmul+0x7e>
1001479c:	2300      	movs	r3, #0
1001479e:	469b      	mov	fp, r3
100147a0:	4698      	mov	r8, r3
100147a2:	3301      	adds	r3, #1
100147a4:	2704      	movs	r7, #4
100147a6:	9301      	str	r3, [sp, #4]
100147a8:	e74c      	b.n	10014644 <__aeabi_dmul+0x4c>
100147aa:	2303      	movs	r3, #3
100147ac:	270c      	movs	r7, #12
100147ae:	9301      	str	r3, [sp, #4]
100147b0:	e748      	b.n	10014644 <__aeabi_dmul+0x4c>
100147b2:	2300      	movs	r3, #0
100147b4:	2580      	movs	r5, #128	; 0x80
100147b6:	4698      	mov	r8, r3
100147b8:	2400      	movs	r4, #0
100147ba:	032d      	lsls	r5, r5, #12
100147bc:	4b05      	ldr	r3, [pc, #20]	; (100147d4 <__aeabi_dmul+0x1dc>)
100147be:	e781      	b.n	100146c4 <__aeabi_dmul+0xcc>
100147c0:	465d      	mov	r5, fp
100147c2:	4643      	mov	r3, r8
100147c4:	9a01      	ldr	r2, [sp, #4]
100147c6:	e76f      	b.n	100146a8 <__aeabi_dmul+0xb0>
100147c8:	465d      	mov	r5, fp
100147ca:	4643      	mov	r3, r8
100147cc:	0021      	movs	r1, r4
100147ce:	9a01      	ldr	r2, [sp, #4]
100147d0:	e76a      	b.n	100146a8 <__aeabi_dmul+0xb0>
100147d2:	46c0      	nop			; (mov r8, r8)
100147d4:	000007ff 	.word	0x000007ff
100147d8:	fffffc01 	.word	0xfffffc01
100147dc:	10017800 	.word	0x10017800
100147e0:	800fffff 	.word	0x800fffff
100147e4:	000003f3 	.word	0x000003f3
100147e8:	4642      	mov	r2, r8
100147ea:	0c12      	lsrs	r2, r2, #16
100147ec:	4691      	mov	r9, r2
100147ee:	0c1a      	lsrs	r2, r3, #16
100147f0:	4694      	mov	ip, r2
100147f2:	4642      	mov	r2, r8
100147f4:	0417      	lsls	r7, r2, #16
100147f6:	464a      	mov	r2, r9
100147f8:	041b      	lsls	r3, r3, #16
100147fa:	0c1b      	lsrs	r3, r3, #16
100147fc:	435a      	muls	r2, r3
100147fe:	4660      	mov	r0, ip
10014800:	4690      	mov	r8, r2
10014802:	464a      	mov	r2, r9
10014804:	4342      	muls	r2, r0
10014806:	0010      	movs	r0, r2
10014808:	9203      	str	r2, [sp, #12]
1001480a:	4662      	mov	r2, ip
1001480c:	001c      	movs	r4, r3
1001480e:	0c3f      	lsrs	r7, r7, #16
10014810:	437a      	muls	r2, r7
10014812:	437c      	muls	r4, r7
10014814:	4442      	add	r2, r8
10014816:	9201      	str	r2, [sp, #4]
10014818:	0c22      	lsrs	r2, r4, #16
1001481a:	4692      	mov	sl, r2
1001481c:	9a01      	ldr	r2, [sp, #4]
1001481e:	4452      	add	r2, sl
10014820:	4590      	cmp	r8, r2
10014822:	d906      	bls.n	10014832 <__aeabi_dmul+0x23a>
10014824:	4682      	mov	sl, r0
10014826:	2080      	movs	r0, #128	; 0x80
10014828:	0240      	lsls	r0, r0, #9
1001482a:	4680      	mov	r8, r0
1001482c:	44c2      	add	sl, r8
1001482e:	4650      	mov	r0, sl
10014830:	9003      	str	r0, [sp, #12]
10014832:	0c10      	lsrs	r0, r2, #16
10014834:	9004      	str	r0, [sp, #16]
10014836:	4648      	mov	r0, r9
10014838:	0424      	lsls	r4, r4, #16
1001483a:	0c24      	lsrs	r4, r4, #16
1001483c:	0412      	lsls	r2, r2, #16
1001483e:	1912      	adds	r2, r2, r4
10014840:	9205      	str	r2, [sp, #20]
10014842:	0c2a      	lsrs	r2, r5, #16
10014844:	042d      	lsls	r5, r5, #16
10014846:	0c2d      	lsrs	r5, r5, #16
10014848:	4368      	muls	r0, r5
1001484a:	002c      	movs	r4, r5
1001484c:	4682      	mov	sl, r0
1001484e:	4648      	mov	r0, r9
10014850:	437c      	muls	r4, r7
10014852:	4350      	muls	r0, r2
10014854:	4681      	mov	r9, r0
10014856:	0c20      	lsrs	r0, r4, #16
10014858:	4680      	mov	r8, r0
1001485a:	4357      	muls	r7, r2
1001485c:	4457      	add	r7, sl
1001485e:	4447      	add	r7, r8
10014860:	45ba      	cmp	sl, r7
10014862:	d903      	bls.n	1001486c <__aeabi_dmul+0x274>
10014864:	2080      	movs	r0, #128	; 0x80
10014866:	0240      	lsls	r0, r0, #9
10014868:	4680      	mov	r8, r0
1001486a:	44c1      	add	r9, r8
1001486c:	0c38      	lsrs	r0, r7, #16
1001486e:	043f      	lsls	r7, r7, #16
10014870:	46b8      	mov	r8, r7
10014872:	4448      	add	r0, r9
10014874:	0424      	lsls	r4, r4, #16
10014876:	0c24      	lsrs	r4, r4, #16
10014878:	9001      	str	r0, [sp, #4]
1001487a:	9804      	ldr	r0, [sp, #16]
1001487c:	44a0      	add	r8, r4
1001487e:	4440      	add	r0, r8
10014880:	9004      	str	r0, [sp, #16]
10014882:	4658      	mov	r0, fp
10014884:	0c00      	lsrs	r0, r0, #16
10014886:	4681      	mov	r9, r0
10014888:	4658      	mov	r0, fp
1001488a:	0404      	lsls	r4, r0, #16
1001488c:	0c20      	lsrs	r0, r4, #16
1001488e:	4682      	mov	sl, r0
10014890:	0007      	movs	r7, r0
10014892:	4648      	mov	r0, r9
10014894:	435f      	muls	r7, r3
10014896:	464c      	mov	r4, r9
10014898:	4343      	muls	r3, r0
1001489a:	4660      	mov	r0, ip
1001489c:	4360      	muls	r0, r4
1001489e:	4664      	mov	r4, ip
100148a0:	4683      	mov	fp, r0
100148a2:	4650      	mov	r0, sl
100148a4:	4344      	muls	r4, r0
100148a6:	0c38      	lsrs	r0, r7, #16
100148a8:	4684      	mov	ip, r0
100148aa:	18e4      	adds	r4, r4, r3
100148ac:	4464      	add	r4, ip
100148ae:	42a3      	cmp	r3, r4
100148b0:	d903      	bls.n	100148ba <__aeabi_dmul+0x2c2>
100148b2:	2380      	movs	r3, #128	; 0x80
100148b4:	025b      	lsls	r3, r3, #9
100148b6:	469c      	mov	ip, r3
100148b8:	44e3      	add	fp, ip
100148ba:	4648      	mov	r0, r9
100148bc:	043f      	lsls	r7, r7, #16
100148be:	0c23      	lsrs	r3, r4, #16
100148c0:	0c3f      	lsrs	r7, r7, #16
100148c2:	0424      	lsls	r4, r4, #16
100148c4:	19e4      	adds	r4, r4, r7
100148c6:	4657      	mov	r7, sl
100148c8:	4368      	muls	r0, r5
100148ca:	436f      	muls	r7, r5
100148cc:	4684      	mov	ip, r0
100148ce:	464d      	mov	r5, r9
100148d0:	4650      	mov	r0, sl
100148d2:	4355      	muls	r5, r2
100148d4:	4342      	muls	r2, r0
100148d6:	0c38      	lsrs	r0, r7, #16
100148d8:	4681      	mov	r9, r0
100148da:	4462      	add	r2, ip
100148dc:	444a      	add	r2, r9
100148de:	445b      	add	r3, fp
100148e0:	4594      	cmp	ip, r2
100148e2:	d903      	bls.n	100148ec <__aeabi_dmul+0x2f4>
100148e4:	2080      	movs	r0, #128	; 0x80
100148e6:	0240      	lsls	r0, r0, #9
100148e8:	4684      	mov	ip, r0
100148ea:	4465      	add	r5, ip
100148ec:	9803      	ldr	r0, [sp, #12]
100148ee:	043f      	lsls	r7, r7, #16
100148f0:	4683      	mov	fp, r0
100148f2:	9804      	ldr	r0, [sp, #16]
100148f4:	0c3f      	lsrs	r7, r7, #16
100148f6:	4684      	mov	ip, r0
100148f8:	44e3      	add	fp, ip
100148fa:	45c3      	cmp	fp, r8
100148fc:	4180      	sbcs	r0, r0
100148fe:	4240      	negs	r0, r0
10014900:	4682      	mov	sl, r0
10014902:	0410      	lsls	r0, r2, #16
10014904:	4684      	mov	ip, r0
10014906:	9801      	ldr	r0, [sp, #4]
10014908:	4467      	add	r7, ip
1001490a:	4684      	mov	ip, r0
1001490c:	4467      	add	r7, ip
1001490e:	44a3      	add	fp, r4
10014910:	46bc      	mov	ip, r7
10014912:	45a3      	cmp	fp, r4
10014914:	41a4      	sbcs	r4, r4
10014916:	4699      	mov	r9, r3
10014918:	44d4      	add	ip, sl
1001491a:	4264      	negs	r4, r4
1001491c:	4287      	cmp	r7, r0
1001491e:	41bf      	sbcs	r7, r7
10014920:	45d4      	cmp	ip, sl
10014922:	4180      	sbcs	r0, r0
10014924:	44e1      	add	r9, ip
10014926:	46a0      	mov	r8, r4
10014928:	4599      	cmp	r9, r3
1001492a:	419b      	sbcs	r3, r3
1001492c:	427f      	negs	r7, r7
1001492e:	4240      	negs	r0, r0
10014930:	44c8      	add	r8, r9
10014932:	4307      	orrs	r7, r0
10014934:	0c12      	lsrs	r2, r2, #16
10014936:	18ba      	adds	r2, r7, r2
10014938:	45a0      	cmp	r8, r4
1001493a:	41a4      	sbcs	r4, r4
1001493c:	425f      	negs	r7, r3
1001493e:	003b      	movs	r3, r7
10014940:	4264      	negs	r4, r4
10014942:	4323      	orrs	r3, r4
10014944:	18d7      	adds	r7, r2, r3
10014946:	4643      	mov	r3, r8
10014948:	197d      	adds	r5, r7, r5
1001494a:	0ddb      	lsrs	r3, r3, #23
1001494c:	026d      	lsls	r5, r5, #9
1001494e:	431d      	orrs	r5, r3
10014950:	465b      	mov	r3, fp
10014952:	025a      	lsls	r2, r3, #9
10014954:	9b05      	ldr	r3, [sp, #20]
10014956:	431a      	orrs	r2, r3
10014958:	1e53      	subs	r3, r2, #1
1001495a:	419a      	sbcs	r2, r3
1001495c:	465b      	mov	r3, fp
1001495e:	0ddb      	lsrs	r3, r3, #23
10014960:	431a      	orrs	r2, r3
10014962:	4643      	mov	r3, r8
10014964:	025b      	lsls	r3, r3, #9
10014966:	4313      	orrs	r3, r2
10014968:	01ea      	lsls	r2, r5, #7
1001496a:	d507      	bpl.n	1001497c <__aeabi_dmul+0x384>
1001496c:	2201      	movs	r2, #1
1001496e:	085c      	lsrs	r4, r3, #1
10014970:	4013      	ands	r3, r2
10014972:	4323      	orrs	r3, r4
10014974:	07ea      	lsls	r2, r5, #31
10014976:	9e02      	ldr	r6, [sp, #8]
10014978:	4313      	orrs	r3, r2
1001497a:	086d      	lsrs	r5, r5, #1
1001497c:	4a57      	ldr	r2, [pc, #348]	; (10014adc <__aeabi_dmul+0x4e4>)
1001497e:	18b2      	adds	r2, r6, r2
10014980:	2a00      	cmp	r2, #0
10014982:	dd4b      	ble.n	10014a1c <__aeabi_dmul+0x424>
10014984:	0758      	lsls	r0, r3, #29
10014986:	d009      	beq.n	1001499c <__aeabi_dmul+0x3a4>
10014988:	200f      	movs	r0, #15
1001498a:	4018      	ands	r0, r3
1001498c:	2804      	cmp	r0, #4
1001498e:	d005      	beq.n	1001499c <__aeabi_dmul+0x3a4>
10014990:	1d18      	adds	r0, r3, #4
10014992:	4298      	cmp	r0, r3
10014994:	419b      	sbcs	r3, r3
10014996:	425b      	negs	r3, r3
10014998:	18ed      	adds	r5, r5, r3
1001499a:	0003      	movs	r3, r0
1001499c:	01e8      	lsls	r0, r5, #7
1001499e:	d504      	bpl.n	100149aa <__aeabi_dmul+0x3b2>
100149a0:	4a4f      	ldr	r2, [pc, #316]	; (10014ae0 <__aeabi_dmul+0x4e8>)
100149a2:	4015      	ands	r5, r2
100149a4:	2280      	movs	r2, #128	; 0x80
100149a6:	00d2      	lsls	r2, r2, #3
100149a8:	18b2      	adds	r2, r6, r2
100149aa:	484e      	ldr	r0, [pc, #312]	; (10014ae4 <__aeabi_dmul+0x4ec>)
100149ac:	4282      	cmp	r2, r0
100149ae:	dd00      	ble.n	100149b2 <__aeabi_dmul+0x3ba>
100149b0:	e6e7      	b.n	10014782 <__aeabi_dmul+0x18a>
100149b2:	2401      	movs	r4, #1
100149b4:	08db      	lsrs	r3, r3, #3
100149b6:	0768      	lsls	r0, r5, #29
100149b8:	4318      	orrs	r0, r3
100149ba:	026d      	lsls	r5, r5, #9
100149bc:	0553      	lsls	r3, r2, #21
100149be:	4680      	mov	r8, r0
100149c0:	0b2d      	lsrs	r5, r5, #12
100149c2:	0d5b      	lsrs	r3, r3, #21
100149c4:	400c      	ands	r4, r1
100149c6:	e67d      	b.n	100146c4 <__aeabi_dmul+0xcc>
100149c8:	2280      	movs	r2, #128	; 0x80
100149ca:	4659      	mov	r1, fp
100149cc:	0312      	lsls	r2, r2, #12
100149ce:	4211      	tst	r1, r2
100149d0:	d008      	beq.n	100149e4 <__aeabi_dmul+0x3ec>
100149d2:	4215      	tst	r5, r2
100149d4:	d106      	bne.n	100149e4 <__aeabi_dmul+0x3ec>
100149d6:	4315      	orrs	r5, r2
100149d8:	032d      	lsls	r5, r5, #12
100149da:	4698      	mov	r8, r3
100149dc:	0b2d      	lsrs	r5, r5, #12
100149de:	464c      	mov	r4, r9
100149e0:	4b41      	ldr	r3, [pc, #260]	; (10014ae8 <__aeabi_dmul+0x4f0>)
100149e2:	e66f      	b.n	100146c4 <__aeabi_dmul+0xcc>
100149e4:	465d      	mov	r5, fp
100149e6:	4315      	orrs	r5, r2
100149e8:	032d      	lsls	r5, r5, #12
100149ea:	0b2d      	lsrs	r5, r5, #12
100149ec:	4b3e      	ldr	r3, [pc, #248]	; (10014ae8 <__aeabi_dmul+0x4f0>)
100149ee:	e669      	b.n	100146c4 <__aeabi_dmul+0xcc>
100149f0:	0003      	movs	r3, r0
100149f2:	4655      	mov	r5, sl
100149f4:	3b28      	subs	r3, #40	; 0x28
100149f6:	409d      	lsls	r5, r3
100149f8:	2300      	movs	r3, #0
100149fa:	e6bc      	b.n	10014776 <__aeabi_dmul+0x17e>
100149fc:	4650      	mov	r0, sl
100149fe:	f000 fd79 	bl	100154f4 <__clzsi2>
10014a02:	3020      	adds	r0, #32
10014a04:	e6a8      	b.n	10014758 <__aeabi_dmul+0x160>
10014a06:	0003      	movs	r3, r0
10014a08:	3b28      	subs	r3, #40	; 0x28
10014a0a:	409f      	lsls	r7, r3
10014a0c:	2300      	movs	r3, #0
10014a0e:	46bb      	mov	fp, r7
10014a10:	4698      	mov	r8, r3
10014a12:	e689      	b.n	10014728 <__aeabi_dmul+0x130>
10014a14:	f000 fd6e 	bl	100154f4 <__clzsi2>
10014a18:	3020      	adds	r0, #32
10014a1a:	e673      	b.n	10014704 <__aeabi_dmul+0x10c>
10014a1c:	2401      	movs	r4, #1
10014a1e:	1aa6      	subs	r6, r4, r2
10014a20:	2e38      	cmp	r6, #56	; 0x38
10014a22:	dd07      	ble.n	10014a34 <__aeabi_dmul+0x43c>
10014a24:	2200      	movs	r2, #0
10014a26:	400c      	ands	r4, r1
10014a28:	2300      	movs	r3, #0
10014a2a:	2500      	movs	r5, #0
10014a2c:	4690      	mov	r8, r2
10014a2e:	e649      	b.n	100146c4 <__aeabi_dmul+0xcc>
10014a30:	9e02      	ldr	r6, [sp, #8]
10014a32:	e7a3      	b.n	1001497c <__aeabi_dmul+0x384>
10014a34:	2e1f      	cmp	r6, #31
10014a36:	dc20      	bgt.n	10014a7a <__aeabi_dmul+0x482>
10014a38:	2220      	movs	r2, #32
10014a3a:	002c      	movs	r4, r5
10014a3c:	0018      	movs	r0, r3
10014a3e:	1b92      	subs	r2, r2, r6
10014a40:	40f0      	lsrs	r0, r6
10014a42:	4094      	lsls	r4, r2
10014a44:	4093      	lsls	r3, r2
10014a46:	4304      	orrs	r4, r0
10014a48:	1e58      	subs	r0, r3, #1
10014a4a:	4183      	sbcs	r3, r0
10014a4c:	431c      	orrs	r4, r3
10014a4e:	40f5      	lsrs	r5, r6
10014a50:	0763      	lsls	r3, r4, #29
10014a52:	d009      	beq.n	10014a68 <__aeabi_dmul+0x470>
10014a54:	230f      	movs	r3, #15
10014a56:	4023      	ands	r3, r4
10014a58:	2b04      	cmp	r3, #4
10014a5a:	d005      	beq.n	10014a68 <__aeabi_dmul+0x470>
10014a5c:	0023      	movs	r3, r4
10014a5e:	1d1c      	adds	r4, r3, #4
10014a60:	429c      	cmp	r4, r3
10014a62:	4192      	sbcs	r2, r2
10014a64:	4252      	negs	r2, r2
10014a66:	18ad      	adds	r5, r5, r2
10014a68:	022b      	lsls	r3, r5, #8
10014a6a:	d51f      	bpl.n	10014aac <__aeabi_dmul+0x4b4>
10014a6c:	2401      	movs	r4, #1
10014a6e:	2200      	movs	r2, #0
10014a70:	400c      	ands	r4, r1
10014a72:	2301      	movs	r3, #1
10014a74:	2500      	movs	r5, #0
10014a76:	4690      	mov	r8, r2
10014a78:	e624      	b.n	100146c4 <__aeabi_dmul+0xcc>
10014a7a:	201f      	movs	r0, #31
10014a7c:	002c      	movs	r4, r5
10014a7e:	4240      	negs	r0, r0
10014a80:	1a82      	subs	r2, r0, r2
10014a82:	40d4      	lsrs	r4, r2
10014a84:	2e20      	cmp	r6, #32
10014a86:	d01c      	beq.n	10014ac2 <__aeabi_dmul+0x4ca>
10014a88:	2240      	movs	r2, #64	; 0x40
10014a8a:	1b96      	subs	r6, r2, r6
10014a8c:	40b5      	lsls	r5, r6
10014a8e:	432b      	orrs	r3, r5
10014a90:	1e58      	subs	r0, r3, #1
10014a92:	4183      	sbcs	r3, r0
10014a94:	2007      	movs	r0, #7
10014a96:	4323      	orrs	r3, r4
10014a98:	4018      	ands	r0, r3
10014a9a:	2500      	movs	r5, #0
10014a9c:	2800      	cmp	r0, #0
10014a9e:	d009      	beq.n	10014ab4 <__aeabi_dmul+0x4bc>
10014aa0:	220f      	movs	r2, #15
10014aa2:	2500      	movs	r5, #0
10014aa4:	401a      	ands	r2, r3
10014aa6:	001c      	movs	r4, r3
10014aa8:	2a04      	cmp	r2, #4
10014aaa:	d1d8      	bne.n	10014a5e <__aeabi_dmul+0x466>
10014aac:	0023      	movs	r3, r4
10014aae:	0768      	lsls	r0, r5, #29
10014ab0:	026d      	lsls	r5, r5, #9
10014ab2:	0b2d      	lsrs	r5, r5, #12
10014ab4:	2401      	movs	r4, #1
10014ab6:	08db      	lsrs	r3, r3, #3
10014ab8:	4303      	orrs	r3, r0
10014aba:	4698      	mov	r8, r3
10014abc:	400c      	ands	r4, r1
10014abe:	2300      	movs	r3, #0
10014ac0:	e600      	b.n	100146c4 <__aeabi_dmul+0xcc>
10014ac2:	2500      	movs	r5, #0
10014ac4:	e7e3      	b.n	10014a8e <__aeabi_dmul+0x496>
10014ac6:	2280      	movs	r2, #128	; 0x80
10014ac8:	2401      	movs	r4, #1
10014aca:	0312      	lsls	r2, r2, #12
10014acc:	4315      	orrs	r5, r2
10014ace:	032d      	lsls	r5, r5, #12
10014ad0:	4698      	mov	r8, r3
10014ad2:	0b2d      	lsrs	r5, r5, #12
10014ad4:	400c      	ands	r4, r1
10014ad6:	4b04      	ldr	r3, [pc, #16]	; (10014ae8 <__aeabi_dmul+0x4f0>)
10014ad8:	e5f4      	b.n	100146c4 <__aeabi_dmul+0xcc>
10014ada:	46c0      	nop			; (mov r8, r8)
10014adc:	000003ff 	.word	0x000003ff
10014ae0:	feffffff 	.word	0xfeffffff
10014ae4:	000007fe 	.word	0x000007fe
10014ae8:	000007ff 	.word	0x000007ff

10014aec <__aeabi_dsub>:
10014aec:	b5f0      	push	{r4, r5, r6, r7, lr}
10014aee:	4657      	mov	r7, sl
10014af0:	464e      	mov	r6, r9
10014af2:	4645      	mov	r5, r8
10014af4:	b4e0      	push	{r5, r6, r7}
10014af6:	000e      	movs	r6, r1
10014af8:	0011      	movs	r1, r2
10014afa:	0ff2      	lsrs	r2, r6, #31
10014afc:	4692      	mov	sl, r2
10014afe:	00c5      	lsls	r5, r0, #3
10014b00:	0f42      	lsrs	r2, r0, #29
10014b02:	0318      	lsls	r0, r3, #12
10014b04:	0337      	lsls	r7, r6, #12
10014b06:	0074      	lsls	r4, r6, #1
10014b08:	0a40      	lsrs	r0, r0, #9
10014b0a:	0f4e      	lsrs	r6, r1, #29
10014b0c:	0a7f      	lsrs	r7, r7, #9
10014b0e:	4330      	orrs	r0, r6
10014b10:	4ecf      	ldr	r6, [pc, #828]	; (10014e50 <__aeabi_dsub+0x364>)
10014b12:	4317      	orrs	r7, r2
10014b14:	005a      	lsls	r2, r3, #1
10014b16:	0d64      	lsrs	r4, r4, #21
10014b18:	0d52      	lsrs	r2, r2, #21
10014b1a:	0fdb      	lsrs	r3, r3, #31
10014b1c:	00c9      	lsls	r1, r1, #3
10014b1e:	42b2      	cmp	r2, r6
10014b20:	d100      	bne.n	10014b24 <__aeabi_dsub+0x38>
10014b22:	e0e5      	b.n	10014cf0 <__aeabi_dsub+0x204>
10014b24:	2601      	movs	r6, #1
10014b26:	4073      	eors	r3, r6
10014b28:	1aa6      	subs	r6, r4, r2
10014b2a:	46b4      	mov	ip, r6
10014b2c:	4553      	cmp	r3, sl
10014b2e:	d100      	bne.n	10014b32 <__aeabi_dsub+0x46>
10014b30:	e0af      	b.n	10014c92 <__aeabi_dsub+0x1a6>
10014b32:	2e00      	cmp	r6, #0
10014b34:	dc00      	bgt.n	10014b38 <__aeabi_dsub+0x4c>
10014b36:	e10d      	b.n	10014d54 <__aeabi_dsub+0x268>
10014b38:	2a00      	cmp	r2, #0
10014b3a:	d13a      	bne.n	10014bb2 <__aeabi_dsub+0xc6>
10014b3c:	0003      	movs	r3, r0
10014b3e:	430b      	orrs	r3, r1
10014b40:	d000      	beq.n	10014b44 <__aeabi_dsub+0x58>
10014b42:	e0e4      	b.n	10014d0e <__aeabi_dsub+0x222>
10014b44:	076b      	lsls	r3, r5, #29
10014b46:	d009      	beq.n	10014b5c <__aeabi_dsub+0x70>
10014b48:	230f      	movs	r3, #15
10014b4a:	402b      	ands	r3, r5
10014b4c:	2b04      	cmp	r3, #4
10014b4e:	d005      	beq.n	10014b5c <__aeabi_dsub+0x70>
10014b50:	1d2b      	adds	r3, r5, #4
10014b52:	42ab      	cmp	r3, r5
10014b54:	41ad      	sbcs	r5, r5
10014b56:	426d      	negs	r5, r5
10014b58:	197f      	adds	r7, r7, r5
10014b5a:	001d      	movs	r5, r3
10014b5c:	023b      	lsls	r3, r7, #8
10014b5e:	d400      	bmi.n	10014b62 <__aeabi_dsub+0x76>
10014b60:	e088      	b.n	10014c74 <__aeabi_dsub+0x188>
10014b62:	4bbb      	ldr	r3, [pc, #748]	; (10014e50 <__aeabi_dsub+0x364>)
10014b64:	3401      	adds	r4, #1
10014b66:	429c      	cmp	r4, r3
10014b68:	d100      	bne.n	10014b6c <__aeabi_dsub+0x80>
10014b6a:	e110      	b.n	10014d8e <__aeabi_dsub+0x2a2>
10014b6c:	003a      	movs	r2, r7
10014b6e:	4bb9      	ldr	r3, [pc, #740]	; (10014e54 <__aeabi_dsub+0x368>)
10014b70:	4651      	mov	r1, sl
10014b72:	401a      	ands	r2, r3
10014b74:	2301      	movs	r3, #1
10014b76:	0750      	lsls	r0, r2, #29
10014b78:	08ed      	lsrs	r5, r5, #3
10014b7a:	0252      	lsls	r2, r2, #9
10014b7c:	0564      	lsls	r4, r4, #21
10014b7e:	4305      	orrs	r5, r0
10014b80:	0b12      	lsrs	r2, r2, #12
10014b82:	0d64      	lsrs	r4, r4, #21
10014b84:	400b      	ands	r3, r1
10014b86:	2100      	movs	r1, #0
10014b88:	0028      	movs	r0, r5
10014b8a:	0312      	lsls	r2, r2, #12
10014b8c:	0d0d      	lsrs	r5, r1, #20
10014b8e:	0b12      	lsrs	r2, r2, #12
10014b90:	0564      	lsls	r4, r4, #21
10014b92:	052d      	lsls	r5, r5, #20
10014b94:	4315      	orrs	r5, r2
10014b96:	0862      	lsrs	r2, r4, #1
10014b98:	4caf      	ldr	r4, [pc, #700]	; (10014e58 <__aeabi_dsub+0x36c>)
10014b9a:	07db      	lsls	r3, r3, #31
10014b9c:	402c      	ands	r4, r5
10014b9e:	4314      	orrs	r4, r2
10014ba0:	0064      	lsls	r4, r4, #1
10014ba2:	0864      	lsrs	r4, r4, #1
10014ba4:	431c      	orrs	r4, r3
10014ba6:	0021      	movs	r1, r4
10014ba8:	bc1c      	pop	{r2, r3, r4}
10014baa:	4690      	mov	r8, r2
10014bac:	4699      	mov	r9, r3
10014bae:	46a2      	mov	sl, r4
10014bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
10014bb2:	4ba7      	ldr	r3, [pc, #668]	; (10014e50 <__aeabi_dsub+0x364>)
10014bb4:	429c      	cmp	r4, r3
10014bb6:	d0c5      	beq.n	10014b44 <__aeabi_dsub+0x58>
10014bb8:	2380      	movs	r3, #128	; 0x80
10014bba:	041b      	lsls	r3, r3, #16
10014bbc:	4318      	orrs	r0, r3
10014bbe:	4663      	mov	r3, ip
10014bc0:	2b38      	cmp	r3, #56	; 0x38
10014bc2:	dd00      	ble.n	10014bc6 <__aeabi_dsub+0xda>
10014bc4:	e0fd      	b.n	10014dc2 <__aeabi_dsub+0x2d6>
10014bc6:	2b1f      	cmp	r3, #31
10014bc8:	dd00      	ble.n	10014bcc <__aeabi_dsub+0xe0>
10014bca:	e130      	b.n	10014e2e <__aeabi_dsub+0x342>
10014bcc:	4662      	mov	r2, ip
10014bce:	2320      	movs	r3, #32
10014bd0:	1a9b      	subs	r3, r3, r2
10014bd2:	0002      	movs	r2, r0
10014bd4:	409a      	lsls	r2, r3
10014bd6:	4666      	mov	r6, ip
10014bd8:	4690      	mov	r8, r2
10014bda:	000a      	movs	r2, r1
10014bdc:	4099      	lsls	r1, r3
10014bde:	40f2      	lsrs	r2, r6
10014be0:	4646      	mov	r6, r8
10014be2:	1e4b      	subs	r3, r1, #1
10014be4:	4199      	sbcs	r1, r3
10014be6:	4332      	orrs	r2, r6
10014be8:	4311      	orrs	r1, r2
10014bea:	4663      	mov	r3, ip
10014bec:	0002      	movs	r2, r0
10014bee:	40da      	lsrs	r2, r3
10014bf0:	1a69      	subs	r1, r5, r1
10014bf2:	428d      	cmp	r5, r1
10014bf4:	419b      	sbcs	r3, r3
10014bf6:	000d      	movs	r5, r1
10014bf8:	1aba      	subs	r2, r7, r2
10014bfa:	425b      	negs	r3, r3
10014bfc:	1ad7      	subs	r7, r2, r3
10014bfe:	023b      	lsls	r3, r7, #8
10014c00:	d535      	bpl.n	10014c6e <__aeabi_dsub+0x182>
10014c02:	027a      	lsls	r2, r7, #9
10014c04:	0a53      	lsrs	r3, r2, #9
10014c06:	4698      	mov	r8, r3
10014c08:	4643      	mov	r3, r8
10014c0a:	2b00      	cmp	r3, #0
10014c0c:	d100      	bne.n	10014c10 <__aeabi_dsub+0x124>
10014c0e:	e0c4      	b.n	10014d9a <__aeabi_dsub+0x2ae>
10014c10:	4640      	mov	r0, r8
10014c12:	f000 fc6f 	bl	100154f4 <__clzsi2>
10014c16:	0003      	movs	r3, r0
10014c18:	3b08      	subs	r3, #8
10014c1a:	2b1f      	cmp	r3, #31
10014c1c:	dd00      	ble.n	10014c20 <__aeabi_dsub+0x134>
10014c1e:	e0c5      	b.n	10014dac <__aeabi_dsub+0x2c0>
10014c20:	2220      	movs	r2, #32
10014c22:	0029      	movs	r1, r5
10014c24:	1ad2      	subs	r2, r2, r3
10014c26:	4647      	mov	r7, r8
10014c28:	40d1      	lsrs	r1, r2
10014c2a:	409f      	lsls	r7, r3
10014c2c:	000a      	movs	r2, r1
10014c2e:	409d      	lsls	r5, r3
10014c30:	433a      	orrs	r2, r7
10014c32:	429c      	cmp	r4, r3
10014c34:	dd00      	ble.n	10014c38 <__aeabi_dsub+0x14c>
10014c36:	e0c0      	b.n	10014dba <__aeabi_dsub+0x2ce>
10014c38:	1b1c      	subs	r4, r3, r4
10014c3a:	1c63      	adds	r3, r4, #1
10014c3c:	2b1f      	cmp	r3, #31
10014c3e:	dd00      	ble.n	10014c42 <__aeabi_dsub+0x156>
10014c40:	e0e4      	b.n	10014e0c <__aeabi_dsub+0x320>
10014c42:	2120      	movs	r1, #32
10014c44:	0014      	movs	r4, r2
10014c46:	0028      	movs	r0, r5
10014c48:	1ac9      	subs	r1, r1, r3
10014c4a:	40d8      	lsrs	r0, r3
10014c4c:	408c      	lsls	r4, r1
10014c4e:	408d      	lsls	r5, r1
10014c50:	4304      	orrs	r4, r0
10014c52:	40da      	lsrs	r2, r3
10014c54:	1e68      	subs	r0, r5, #1
10014c56:	4185      	sbcs	r5, r0
10014c58:	0017      	movs	r7, r2
10014c5a:	4325      	orrs	r5, r4
10014c5c:	2400      	movs	r4, #0
10014c5e:	e771      	b.n	10014b44 <__aeabi_dsub+0x58>
10014c60:	4642      	mov	r2, r8
10014c62:	4663      	mov	r3, ip
10014c64:	431a      	orrs	r2, r3
10014c66:	d100      	bne.n	10014c6a <__aeabi_dsub+0x17e>
10014c68:	e24c      	b.n	10015104 <__aeabi_dsub+0x618>
10014c6a:	4667      	mov	r7, ip
10014c6c:	4645      	mov	r5, r8
10014c6e:	076b      	lsls	r3, r5, #29
10014c70:	d000      	beq.n	10014c74 <__aeabi_dsub+0x188>
10014c72:	e769      	b.n	10014b48 <__aeabi_dsub+0x5c>
10014c74:	2301      	movs	r3, #1
10014c76:	4651      	mov	r1, sl
10014c78:	0778      	lsls	r0, r7, #29
10014c7a:	08ed      	lsrs	r5, r5, #3
10014c7c:	08fa      	lsrs	r2, r7, #3
10014c7e:	400b      	ands	r3, r1
10014c80:	4305      	orrs	r5, r0
10014c82:	4973      	ldr	r1, [pc, #460]	; (10014e50 <__aeabi_dsub+0x364>)
10014c84:	428c      	cmp	r4, r1
10014c86:	d038      	beq.n	10014cfa <__aeabi_dsub+0x20e>
10014c88:	0312      	lsls	r2, r2, #12
10014c8a:	0564      	lsls	r4, r4, #21
10014c8c:	0b12      	lsrs	r2, r2, #12
10014c8e:	0d64      	lsrs	r4, r4, #21
10014c90:	e779      	b.n	10014b86 <__aeabi_dsub+0x9a>
10014c92:	2e00      	cmp	r6, #0
10014c94:	dc00      	bgt.n	10014c98 <__aeabi_dsub+0x1ac>
10014c96:	e09a      	b.n	10014dce <__aeabi_dsub+0x2e2>
10014c98:	2a00      	cmp	r2, #0
10014c9a:	d047      	beq.n	10014d2c <__aeabi_dsub+0x240>
10014c9c:	4a6c      	ldr	r2, [pc, #432]	; (10014e50 <__aeabi_dsub+0x364>)
10014c9e:	4294      	cmp	r4, r2
10014ca0:	d100      	bne.n	10014ca4 <__aeabi_dsub+0x1b8>
10014ca2:	e74f      	b.n	10014b44 <__aeabi_dsub+0x58>
10014ca4:	2280      	movs	r2, #128	; 0x80
10014ca6:	0412      	lsls	r2, r2, #16
10014ca8:	4310      	orrs	r0, r2
10014caa:	4662      	mov	r2, ip
10014cac:	2a38      	cmp	r2, #56	; 0x38
10014cae:	dc00      	bgt.n	10014cb2 <__aeabi_dsub+0x1c6>
10014cb0:	e108      	b.n	10014ec4 <__aeabi_dsub+0x3d8>
10014cb2:	4301      	orrs	r1, r0
10014cb4:	1e48      	subs	r0, r1, #1
10014cb6:	4181      	sbcs	r1, r0
10014cb8:	2200      	movs	r2, #0
10014cba:	b2c9      	uxtb	r1, r1
10014cbc:	1949      	adds	r1, r1, r5
10014cbe:	19d2      	adds	r2, r2, r7
10014cc0:	42a9      	cmp	r1, r5
10014cc2:	41bf      	sbcs	r7, r7
10014cc4:	000d      	movs	r5, r1
10014cc6:	427f      	negs	r7, r7
10014cc8:	18bf      	adds	r7, r7, r2
10014cca:	023a      	lsls	r2, r7, #8
10014ccc:	d400      	bmi.n	10014cd0 <__aeabi_dsub+0x1e4>
10014cce:	e142      	b.n	10014f56 <__aeabi_dsub+0x46a>
10014cd0:	4a5f      	ldr	r2, [pc, #380]	; (10014e50 <__aeabi_dsub+0x364>)
10014cd2:	3401      	adds	r4, #1
10014cd4:	4294      	cmp	r4, r2
10014cd6:	d100      	bne.n	10014cda <__aeabi_dsub+0x1ee>
10014cd8:	e14e      	b.n	10014f78 <__aeabi_dsub+0x48c>
10014cda:	2001      	movs	r0, #1
10014cdc:	4a5d      	ldr	r2, [pc, #372]	; (10014e54 <__aeabi_dsub+0x368>)
10014cde:	0869      	lsrs	r1, r5, #1
10014ce0:	403a      	ands	r2, r7
10014ce2:	4028      	ands	r0, r5
10014ce4:	4308      	orrs	r0, r1
10014ce6:	07d5      	lsls	r5, r2, #31
10014ce8:	4305      	orrs	r5, r0
10014cea:	0857      	lsrs	r7, r2, #1
10014cec:	469a      	mov	sl, r3
10014cee:	e729      	b.n	10014b44 <__aeabi_dsub+0x58>
10014cf0:	0006      	movs	r6, r0
10014cf2:	430e      	orrs	r6, r1
10014cf4:	d000      	beq.n	10014cf8 <__aeabi_dsub+0x20c>
10014cf6:	e717      	b.n	10014b28 <__aeabi_dsub+0x3c>
10014cf8:	e714      	b.n	10014b24 <__aeabi_dsub+0x38>
10014cfa:	0029      	movs	r1, r5
10014cfc:	4311      	orrs	r1, r2
10014cfe:	d100      	bne.n	10014d02 <__aeabi_dsub+0x216>
10014d00:	e1f9      	b.n	100150f6 <__aeabi_dsub+0x60a>
10014d02:	2180      	movs	r1, #128	; 0x80
10014d04:	0309      	lsls	r1, r1, #12
10014d06:	430a      	orrs	r2, r1
10014d08:	0312      	lsls	r2, r2, #12
10014d0a:	0b12      	lsrs	r2, r2, #12
10014d0c:	e73b      	b.n	10014b86 <__aeabi_dsub+0x9a>
10014d0e:	2301      	movs	r3, #1
10014d10:	425b      	negs	r3, r3
10014d12:	4698      	mov	r8, r3
10014d14:	44c4      	add	ip, r8
10014d16:	4663      	mov	r3, ip
10014d18:	2b00      	cmp	r3, #0
10014d1a:	d172      	bne.n	10014e02 <__aeabi_dsub+0x316>
10014d1c:	1a69      	subs	r1, r5, r1
10014d1e:	428d      	cmp	r5, r1
10014d20:	419b      	sbcs	r3, r3
10014d22:	1a3f      	subs	r7, r7, r0
10014d24:	425b      	negs	r3, r3
10014d26:	1aff      	subs	r7, r7, r3
10014d28:	000d      	movs	r5, r1
10014d2a:	e768      	b.n	10014bfe <__aeabi_dsub+0x112>
10014d2c:	0002      	movs	r2, r0
10014d2e:	430a      	orrs	r2, r1
10014d30:	d100      	bne.n	10014d34 <__aeabi_dsub+0x248>
10014d32:	e707      	b.n	10014b44 <__aeabi_dsub+0x58>
10014d34:	2201      	movs	r2, #1
10014d36:	4252      	negs	r2, r2
10014d38:	4690      	mov	r8, r2
10014d3a:	44c4      	add	ip, r8
10014d3c:	4662      	mov	r2, ip
10014d3e:	2a00      	cmp	r2, #0
10014d40:	d000      	beq.n	10014d44 <__aeabi_dsub+0x258>
10014d42:	e0e6      	b.n	10014f12 <__aeabi_dsub+0x426>
10014d44:	1869      	adds	r1, r5, r1
10014d46:	42a9      	cmp	r1, r5
10014d48:	41b6      	sbcs	r6, r6
10014d4a:	183f      	adds	r7, r7, r0
10014d4c:	4276      	negs	r6, r6
10014d4e:	19f7      	adds	r7, r6, r7
10014d50:	000d      	movs	r5, r1
10014d52:	e7ba      	b.n	10014cca <__aeabi_dsub+0x1de>
10014d54:	2e00      	cmp	r6, #0
10014d56:	d000      	beq.n	10014d5a <__aeabi_dsub+0x26e>
10014d58:	e080      	b.n	10014e5c <__aeabi_dsub+0x370>
10014d5a:	1c62      	adds	r2, r4, #1
10014d5c:	0552      	lsls	r2, r2, #21
10014d5e:	0d52      	lsrs	r2, r2, #21
10014d60:	2a01      	cmp	r2, #1
10014d62:	dc00      	bgt.n	10014d66 <__aeabi_dsub+0x27a>
10014d64:	e0f9      	b.n	10014f5a <__aeabi_dsub+0x46e>
10014d66:	1a6a      	subs	r2, r5, r1
10014d68:	4691      	mov	r9, r2
10014d6a:	454d      	cmp	r5, r9
10014d6c:	41b6      	sbcs	r6, r6
10014d6e:	1a3a      	subs	r2, r7, r0
10014d70:	4276      	negs	r6, r6
10014d72:	1b92      	subs	r2, r2, r6
10014d74:	4690      	mov	r8, r2
10014d76:	0212      	lsls	r2, r2, #8
10014d78:	d400      	bmi.n	10014d7c <__aeabi_dsub+0x290>
10014d7a:	e099      	b.n	10014eb0 <__aeabi_dsub+0x3c4>
10014d7c:	1b4d      	subs	r5, r1, r5
10014d7e:	42a9      	cmp	r1, r5
10014d80:	4189      	sbcs	r1, r1
10014d82:	1bc7      	subs	r7, r0, r7
10014d84:	4249      	negs	r1, r1
10014d86:	1a7a      	subs	r2, r7, r1
10014d88:	4690      	mov	r8, r2
10014d8a:	469a      	mov	sl, r3
10014d8c:	e73c      	b.n	10014c08 <__aeabi_dsub+0x11c>
10014d8e:	4652      	mov	r2, sl
10014d90:	2301      	movs	r3, #1
10014d92:	2500      	movs	r5, #0
10014d94:	4013      	ands	r3, r2
10014d96:	2200      	movs	r2, #0
10014d98:	e6f5      	b.n	10014b86 <__aeabi_dsub+0x9a>
10014d9a:	0028      	movs	r0, r5
10014d9c:	f000 fbaa 	bl	100154f4 <__clzsi2>
10014da0:	3020      	adds	r0, #32
10014da2:	0003      	movs	r3, r0
10014da4:	3b08      	subs	r3, #8
10014da6:	2b1f      	cmp	r3, #31
10014da8:	dc00      	bgt.n	10014dac <__aeabi_dsub+0x2c0>
10014daa:	e739      	b.n	10014c20 <__aeabi_dsub+0x134>
10014dac:	002a      	movs	r2, r5
10014dae:	3828      	subs	r0, #40	; 0x28
10014db0:	4082      	lsls	r2, r0
10014db2:	2500      	movs	r5, #0
10014db4:	429c      	cmp	r4, r3
10014db6:	dc00      	bgt.n	10014dba <__aeabi_dsub+0x2ce>
10014db8:	e73e      	b.n	10014c38 <__aeabi_dsub+0x14c>
10014dba:	4f26      	ldr	r7, [pc, #152]	; (10014e54 <__aeabi_dsub+0x368>)
10014dbc:	1ae4      	subs	r4, r4, r3
10014dbe:	4017      	ands	r7, r2
10014dc0:	e6c0      	b.n	10014b44 <__aeabi_dsub+0x58>
10014dc2:	4301      	orrs	r1, r0
10014dc4:	1e48      	subs	r0, r1, #1
10014dc6:	4181      	sbcs	r1, r0
10014dc8:	2200      	movs	r2, #0
10014dca:	b2c9      	uxtb	r1, r1
10014dcc:	e710      	b.n	10014bf0 <__aeabi_dsub+0x104>
10014dce:	2e00      	cmp	r6, #0
10014dd0:	d000      	beq.n	10014dd4 <__aeabi_dsub+0x2e8>
10014dd2:	e0f1      	b.n	10014fb8 <__aeabi_dsub+0x4cc>
10014dd4:	1c62      	adds	r2, r4, #1
10014dd6:	4694      	mov	ip, r2
10014dd8:	0552      	lsls	r2, r2, #21
10014dda:	0d52      	lsrs	r2, r2, #21
10014ddc:	2a01      	cmp	r2, #1
10014dde:	dc00      	bgt.n	10014de2 <__aeabi_dsub+0x2f6>
10014de0:	e0a0      	b.n	10014f24 <__aeabi_dsub+0x438>
10014de2:	4a1b      	ldr	r2, [pc, #108]	; (10014e50 <__aeabi_dsub+0x364>)
10014de4:	4594      	cmp	ip, r2
10014de6:	d100      	bne.n	10014dea <__aeabi_dsub+0x2fe>
10014de8:	e0c5      	b.n	10014f76 <__aeabi_dsub+0x48a>
10014dea:	1869      	adds	r1, r5, r1
10014dec:	42a9      	cmp	r1, r5
10014dee:	4192      	sbcs	r2, r2
10014df0:	183f      	adds	r7, r7, r0
10014df2:	4252      	negs	r2, r2
10014df4:	19d2      	adds	r2, r2, r7
10014df6:	0849      	lsrs	r1, r1, #1
10014df8:	07d5      	lsls	r5, r2, #31
10014dfa:	430d      	orrs	r5, r1
10014dfc:	0857      	lsrs	r7, r2, #1
10014dfe:	4664      	mov	r4, ip
10014e00:	e6a0      	b.n	10014b44 <__aeabi_dsub+0x58>
10014e02:	4b13      	ldr	r3, [pc, #76]	; (10014e50 <__aeabi_dsub+0x364>)
10014e04:	429c      	cmp	r4, r3
10014e06:	d000      	beq.n	10014e0a <__aeabi_dsub+0x31e>
10014e08:	e6d9      	b.n	10014bbe <__aeabi_dsub+0xd2>
10014e0a:	e69b      	b.n	10014b44 <__aeabi_dsub+0x58>
10014e0c:	0011      	movs	r1, r2
10014e0e:	3c1f      	subs	r4, #31
10014e10:	40e1      	lsrs	r1, r4
10014e12:	000c      	movs	r4, r1
10014e14:	2b20      	cmp	r3, #32
10014e16:	d100      	bne.n	10014e1a <__aeabi_dsub+0x32e>
10014e18:	e080      	b.n	10014f1c <__aeabi_dsub+0x430>
10014e1a:	2140      	movs	r1, #64	; 0x40
10014e1c:	1acb      	subs	r3, r1, r3
10014e1e:	409a      	lsls	r2, r3
10014e20:	4315      	orrs	r5, r2
10014e22:	1e6a      	subs	r2, r5, #1
10014e24:	4195      	sbcs	r5, r2
10014e26:	2700      	movs	r7, #0
10014e28:	4325      	orrs	r5, r4
10014e2a:	2400      	movs	r4, #0
10014e2c:	e71f      	b.n	10014c6e <__aeabi_dsub+0x182>
10014e2e:	4663      	mov	r3, ip
10014e30:	0002      	movs	r2, r0
10014e32:	3b20      	subs	r3, #32
10014e34:	40da      	lsrs	r2, r3
10014e36:	4663      	mov	r3, ip
10014e38:	2b20      	cmp	r3, #32
10014e3a:	d071      	beq.n	10014f20 <__aeabi_dsub+0x434>
10014e3c:	2340      	movs	r3, #64	; 0x40
10014e3e:	4666      	mov	r6, ip
10014e40:	1b9b      	subs	r3, r3, r6
10014e42:	4098      	lsls	r0, r3
10014e44:	4301      	orrs	r1, r0
10014e46:	1e48      	subs	r0, r1, #1
10014e48:	4181      	sbcs	r1, r0
10014e4a:	4311      	orrs	r1, r2
10014e4c:	2200      	movs	r2, #0
10014e4e:	e6cf      	b.n	10014bf0 <__aeabi_dsub+0x104>
10014e50:	000007ff 	.word	0x000007ff
10014e54:	ff7fffff 	.word	0xff7fffff
10014e58:	800fffff 	.word	0x800fffff
10014e5c:	2c00      	cmp	r4, #0
10014e5e:	d048      	beq.n	10014ef2 <__aeabi_dsub+0x406>
10014e60:	4cca      	ldr	r4, [pc, #808]	; (1001518c <__aeabi_dsub+0x6a0>)
10014e62:	42a2      	cmp	r2, r4
10014e64:	d100      	bne.n	10014e68 <__aeabi_dsub+0x37c>
10014e66:	e0a2      	b.n	10014fae <__aeabi_dsub+0x4c2>
10014e68:	4274      	negs	r4, r6
10014e6a:	46a1      	mov	r9, r4
10014e6c:	2480      	movs	r4, #128	; 0x80
10014e6e:	0424      	lsls	r4, r4, #16
10014e70:	4327      	orrs	r7, r4
10014e72:	464c      	mov	r4, r9
10014e74:	2c38      	cmp	r4, #56	; 0x38
10014e76:	dd00      	ble.n	10014e7a <__aeabi_dsub+0x38e>
10014e78:	e0db      	b.n	10015032 <__aeabi_dsub+0x546>
10014e7a:	2c1f      	cmp	r4, #31
10014e7c:	dd00      	ble.n	10014e80 <__aeabi_dsub+0x394>
10014e7e:	e144      	b.n	1001510a <__aeabi_dsub+0x61e>
10014e80:	464e      	mov	r6, r9
10014e82:	2420      	movs	r4, #32
10014e84:	1ba4      	subs	r4, r4, r6
10014e86:	003e      	movs	r6, r7
10014e88:	40a6      	lsls	r6, r4
10014e8a:	46a2      	mov	sl, r4
10014e8c:	46b0      	mov	r8, r6
10014e8e:	464c      	mov	r4, r9
10014e90:	002e      	movs	r6, r5
10014e92:	40e6      	lsrs	r6, r4
10014e94:	46b4      	mov	ip, r6
10014e96:	4646      	mov	r6, r8
10014e98:	4664      	mov	r4, ip
10014e9a:	4326      	orrs	r6, r4
10014e9c:	4654      	mov	r4, sl
10014e9e:	40a5      	lsls	r5, r4
10014ea0:	1e6c      	subs	r4, r5, #1
10014ea2:	41a5      	sbcs	r5, r4
10014ea4:	0034      	movs	r4, r6
10014ea6:	432c      	orrs	r4, r5
10014ea8:	464d      	mov	r5, r9
10014eaa:	40ef      	lsrs	r7, r5
10014eac:	1b0d      	subs	r5, r1, r4
10014eae:	e028      	b.n	10014f02 <__aeabi_dsub+0x416>
10014eb0:	464a      	mov	r2, r9
10014eb2:	4643      	mov	r3, r8
10014eb4:	464d      	mov	r5, r9
10014eb6:	431a      	orrs	r2, r3
10014eb8:	d000      	beq.n	10014ebc <__aeabi_dsub+0x3d0>
10014eba:	e6a5      	b.n	10014c08 <__aeabi_dsub+0x11c>
10014ebc:	2300      	movs	r3, #0
10014ebe:	2400      	movs	r4, #0
10014ec0:	2500      	movs	r5, #0
10014ec2:	e6de      	b.n	10014c82 <__aeabi_dsub+0x196>
10014ec4:	2a1f      	cmp	r2, #31
10014ec6:	dc5a      	bgt.n	10014f7e <__aeabi_dsub+0x492>
10014ec8:	4666      	mov	r6, ip
10014eca:	2220      	movs	r2, #32
10014ecc:	1b92      	subs	r2, r2, r6
10014ece:	0006      	movs	r6, r0
10014ed0:	4096      	lsls	r6, r2
10014ed2:	4691      	mov	r9, r2
10014ed4:	46b0      	mov	r8, r6
10014ed6:	4662      	mov	r2, ip
10014ed8:	000e      	movs	r6, r1
10014eda:	40d6      	lsrs	r6, r2
10014edc:	4642      	mov	r2, r8
10014ede:	4316      	orrs	r6, r2
10014ee0:	464a      	mov	r2, r9
10014ee2:	4091      	lsls	r1, r2
10014ee4:	1e4a      	subs	r2, r1, #1
10014ee6:	4191      	sbcs	r1, r2
10014ee8:	0002      	movs	r2, r0
10014eea:	4660      	mov	r0, ip
10014eec:	4331      	orrs	r1, r6
10014eee:	40c2      	lsrs	r2, r0
10014ef0:	e6e4      	b.n	10014cbc <__aeabi_dsub+0x1d0>
10014ef2:	003c      	movs	r4, r7
10014ef4:	432c      	orrs	r4, r5
10014ef6:	d05a      	beq.n	10014fae <__aeabi_dsub+0x4c2>
10014ef8:	43f4      	mvns	r4, r6
10014efa:	46a1      	mov	r9, r4
10014efc:	2c00      	cmp	r4, #0
10014efe:	d152      	bne.n	10014fa6 <__aeabi_dsub+0x4ba>
10014f00:	1b4d      	subs	r5, r1, r5
10014f02:	42a9      	cmp	r1, r5
10014f04:	4189      	sbcs	r1, r1
10014f06:	1bc7      	subs	r7, r0, r7
10014f08:	4249      	negs	r1, r1
10014f0a:	1a7f      	subs	r7, r7, r1
10014f0c:	0014      	movs	r4, r2
10014f0e:	469a      	mov	sl, r3
10014f10:	e675      	b.n	10014bfe <__aeabi_dsub+0x112>
10014f12:	4a9e      	ldr	r2, [pc, #632]	; (1001518c <__aeabi_dsub+0x6a0>)
10014f14:	4294      	cmp	r4, r2
10014f16:	d000      	beq.n	10014f1a <__aeabi_dsub+0x42e>
10014f18:	e6c7      	b.n	10014caa <__aeabi_dsub+0x1be>
10014f1a:	e613      	b.n	10014b44 <__aeabi_dsub+0x58>
10014f1c:	2200      	movs	r2, #0
10014f1e:	e77f      	b.n	10014e20 <__aeabi_dsub+0x334>
10014f20:	2000      	movs	r0, #0
10014f22:	e78f      	b.n	10014e44 <__aeabi_dsub+0x358>
10014f24:	2c00      	cmp	r4, #0
10014f26:	d000      	beq.n	10014f2a <__aeabi_dsub+0x43e>
10014f28:	e0c8      	b.n	100150bc <__aeabi_dsub+0x5d0>
10014f2a:	003b      	movs	r3, r7
10014f2c:	432b      	orrs	r3, r5
10014f2e:	d100      	bne.n	10014f32 <__aeabi_dsub+0x446>
10014f30:	e10f      	b.n	10015152 <__aeabi_dsub+0x666>
10014f32:	0003      	movs	r3, r0
10014f34:	430b      	orrs	r3, r1
10014f36:	d100      	bne.n	10014f3a <__aeabi_dsub+0x44e>
10014f38:	e604      	b.n	10014b44 <__aeabi_dsub+0x58>
10014f3a:	1869      	adds	r1, r5, r1
10014f3c:	42a9      	cmp	r1, r5
10014f3e:	419b      	sbcs	r3, r3
10014f40:	183f      	adds	r7, r7, r0
10014f42:	425b      	negs	r3, r3
10014f44:	19df      	adds	r7, r3, r7
10014f46:	023b      	lsls	r3, r7, #8
10014f48:	d400      	bmi.n	10014f4c <__aeabi_dsub+0x460>
10014f4a:	e11a      	b.n	10015182 <__aeabi_dsub+0x696>
10014f4c:	4b90      	ldr	r3, [pc, #576]	; (10015190 <__aeabi_dsub+0x6a4>)
10014f4e:	000d      	movs	r5, r1
10014f50:	401f      	ands	r7, r3
10014f52:	4664      	mov	r4, ip
10014f54:	e5f6      	b.n	10014b44 <__aeabi_dsub+0x58>
10014f56:	469a      	mov	sl, r3
10014f58:	e689      	b.n	10014c6e <__aeabi_dsub+0x182>
10014f5a:	003a      	movs	r2, r7
10014f5c:	432a      	orrs	r2, r5
10014f5e:	2c00      	cmp	r4, #0
10014f60:	d15c      	bne.n	1001501c <__aeabi_dsub+0x530>
10014f62:	2a00      	cmp	r2, #0
10014f64:	d175      	bne.n	10015052 <__aeabi_dsub+0x566>
10014f66:	0002      	movs	r2, r0
10014f68:	430a      	orrs	r2, r1
10014f6a:	d100      	bne.n	10014f6e <__aeabi_dsub+0x482>
10014f6c:	e0ca      	b.n	10015104 <__aeabi_dsub+0x618>
10014f6e:	0007      	movs	r7, r0
10014f70:	000d      	movs	r5, r1
10014f72:	469a      	mov	sl, r3
10014f74:	e5e6      	b.n	10014b44 <__aeabi_dsub+0x58>
10014f76:	4664      	mov	r4, ip
10014f78:	2200      	movs	r2, #0
10014f7a:	2500      	movs	r5, #0
10014f7c:	e681      	b.n	10014c82 <__aeabi_dsub+0x196>
10014f7e:	4662      	mov	r2, ip
10014f80:	0006      	movs	r6, r0
10014f82:	3a20      	subs	r2, #32
10014f84:	40d6      	lsrs	r6, r2
10014f86:	4662      	mov	r2, ip
10014f88:	46b0      	mov	r8, r6
10014f8a:	2a20      	cmp	r2, #32
10014f8c:	d100      	bne.n	10014f90 <__aeabi_dsub+0x4a4>
10014f8e:	e0b7      	b.n	10015100 <__aeabi_dsub+0x614>
10014f90:	2240      	movs	r2, #64	; 0x40
10014f92:	4666      	mov	r6, ip
10014f94:	1b92      	subs	r2, r2, r6
10014f96:	4090      	lsls	r0, r2
10014f98:	4301      	orrs	r1, r0
10014f9a:	4642      	mov	r2, r8
10014f9c:	1e48      	subs	r0, r1, #1
10014f9e:	4181      	sbcs	r1, r0
10014fa0:	4311      	orrs	r1, r2
10014fa2:	2200      	movs	r2, #0
10014fa4:	e68a      	b.n	10014cbc <__aeabi_dsub+0x1d0>
10014fa6:	4c79      	ldr	r4, [pc, #484]	; (1001518c <__aeabi_dsub+0x6a0>)
10014fa8:	42a2      	cmp	r2, r4
10014faa:	d000      	beq.n	10014fae <__aeabi_dsub+0x4c2>
10014fac:	e761      	b.n	10014e72 <__aeabi_dsub+0x386>
10014fae:	0007      	movs	r7, r0
10014fb0:	000d      	movs	r5, r1
10014fb2:	0014      	movs	r4, r2
10014fb4:	469a      	mov	sl, r3
10014fb6:	e5c5      	b.n	10014b44 <__aeabi_dsub+0x58>
10014fb8:	2c00      	cmp	r4, #0
10014fba:	d141      	bne.n	10015040 <__aeabi_dsub+0x554>
10014fbc:	003c      	movs	r4, r7
10014fbe:	432c      	orrs	r4, r5
10014fc0:	d078      	beq.n	100150b4 <__aeabi_dsub+0x5c8>
10014fc2:	43f4      	mvns	r4, r6
10014fc4:	46a1      	mov	r9, r4
10014fc6:	2c00      	cmp	r4, #0
10014fc8:	d020      	beq.n	1001500c <__aeabi_dsub+0x520>
10014fca:	4c70      	ldr	r4, [pc, #448]	; (1001518c <__aeabi_dsub+0x6a0>)
10014fcc:	42a2      	cmp	r2, r4
10014fce:	d071      	beq.n	100150b4 <__aeabi_dsub+0x5c8>
10014fd0:	464c      	mov	r4, r9
10014fd2:	2c38      	cmp	r4, #56	; 0x38
10014fd4:	dd00      	ble.n	10014fd8 <__aeabi_dsub+0x4ec>
10014fd6:	e0b2      	b.n	1001513e <__aeabi_dsub+0x652>
10014fd8:	2c1f      	cmp	r4, #31
10014fda:	dd00      	ble.n	10014fde <__aeabi_dsub+0x4f2>
10014fdc:	e0bc      	b.n	10015158 <__aeabi_dsub+0x66c>
10014fde:	2620      	movs	r6, #32
10014fe0:	1b34      	subs	r4, r6, r4
10014fe2:	46a2      	mov	sl, r4
10014fe4:	003c      	movs	r4, r7
10014fe6:	4656      	mov	r6, sl
10014fe8:	40b4      	lsls	r4, r6
10014fea:	464e      	mov	r6, r9
10014fec:	46a0      	mov	r8, r4
10014fee:	002c      	movs	r4, r5
10014ff0:	40f4      	lsrs	r4, r6
10014ff2:	46a4      	mov	ip, r4
10014ff4:	4644      	mov	r4, r8
10014ff6:	4666      	mov	r6, ip
10014ff8:	4334      	orrs	r4, r6
10014ffa:	46a4      	mov	ip, r4
10014ffc:	4654      	mov	r4, sl
10014ffe:	40a5      	lsls	r5, r4
10015000:	4664      	mov	r4, ip
10015002:	1e6e      	subs	r6, r5, #1
10015004:	41b5      	sbcs	r5, r6
10015006:	4325      	orrs	r5, r4
10015008:	464c      	mov	r4, r9
1001500a:	40e7      	lsrs	r7, r4
1001500c:	186d      	adds	r5, r5, r1
1001500e:	428d      	cmp	r5, r1
10015010:	4189      	sbcs	r1, r1
10015012:	183f      	adds	r7, r7, r0
10015014:	4249      	negs	r1, r1
10015016:	19cf      	adds	r7, r1, r7
10015018:	0014      	movs	r4, r2
1001501a:	e656      	b.n	10014cca <__aeabi_dsub+0x1de>
1001501c:	2a00      	cmp	r2, #0
1001501e:	d12f      	bne.n	10015080 <__aeabi_dsub+0x594>
10015020:	0002      	movs	r2, r0
10015022:	430a      	orrs	r2, r1
10015024:	d100      	bne.n	10015028 <__aeabi_dsub+0x53c>
10015026:	e084      	b.n	10015132 <__aeabi_dsub+0x646>
10015028:	0007      	movs	r7, r0
1001502a:	000d      	movs	r5, r1
1001502c:	469a      	mov	sl, r3
1001502e:	4c57      	ldr	r4, [pc, #348]	; (1001518c <__aeabi_dsub+0x6a0>)
10015030:	e588      	b.n	10014b44 <__aeabi_dsub+0x58>
10015032:	433d      	orrs	r5, r7
10015034:	1e6f      	subs	r7, r5, #1
10015036:	41bd      	sbcs	r5, r7
10015038:	b2ec      	uxtb	r4, r5
1001503a:	2700      	movs	r7, #0
1001503c:	1b0d      	subs	r5, r1, r4
1001503e:	e760      	b.n	10014f02 <__aeabi_dsub+0x416>
10015040:	4c52      	ldr	r4, [pc, #328]	; (1001518c <__aeabi_dsub+0x6a0>)
10015042:	42a2      	cmp	r2, r4
10015044:	d036      	beq.n	100150b4 <__aeabi_dsub+0x5c8>
10015046:	4274      	negs	r4, r6
10015048:	2680      	movs	r6, #128	; 0x80
1001504a:	0436      	lsls	r6, r6, #16
1001504c:	46a1      	mov	r9, r4
1001504e:	4337      	orrs	r7, r6
10015050:	e7be      	b.n	10014fd0 <__aeabi_dsub+0x4e4>
10015052:	0002      	movs	r2, r0
10015054:	430a      	orrs	r2, r1
10015056:	d100      	bne.n	1001505a <__aeabi_dsub+0x56e>
10015058:	e574      	b.n	10014b44 <__aeabi_dsub+0x58>
1001505a:	1a6a      	subs	r2, r5, r1
1001505c:	4690      	mov	r8, r2
1001505e:	4545      	cmp	r5, r8
10015060:	41b6      	sbcs	r6, r6
10015062:	1a3a      	subs	r2, r7, r0
10015064:	4276      	negs	r6, r6
10015066:	1b92      	subs	r2, r2, r6
10015068:	4694      	mov	ip, r2
1001506a:	0212      	lsls	r2, r2, #8
1001506c:	d400      	bmi.n	10015070 <__aeabi_dsub+0x584>
1001506e:	e5f7      	b.n	10014c60 <__aeabi_dsub+0x174>
10015070:	1b4d      	subs	r5, r1, r5
10015072:	42a9      	cmp	r1, r5
10015074:	4189      	sbcs	r1, r1
10015076:	1bc7      	subs	r7, r0, r7
10015078:	4249      	negs	r1, r1
1001507a:	1a7f      	subs	r7, r7, r1
1001507c:	469a      	mov	sl, r3
1001507e:	e561      	b.n	10014b44 <__aeabi_dsub+0x58>
10015080:	0002      	movs	r2, r0
10015082:	430a      	orrs	r2, r1
10015084:	d03a      	beq.n	100150fc <__aeabi_dsub+0x610>
10015086:	08ed      	lsrs	r5, r5, #3
10015088:	077c      	lsls	r4, r7, #29
1001508a:	432c      	orrs	r4, r5
1001508c:	2580      	movs	r5, #128	; 0x80
1001508e:	08fa      	lsrs	r2, r7, #3
10015090:	032d      	lsls	r5, r5, #12
10015092:	422a      	tst	r2, r5
10015094:	d008      	beq.n	100150a8 <__aeabi_dsub+0x5bc>
10015096:	08c7      	lsrs	r7, r0, #3
10015098:	422f      	tst	r7, r5
1001509a:	d105      	bne.n	100150a8 <__aeabi_dsub+0x5bc>
1001509c:	0745      	lsls	r5, r0, #29
1001509e:	002c      	movs	r4, r5
100150a0:	003a      	movs	r2, r7
100150a2:	469a      	mov	sl, r3
100150a4:	08c9      	lsrs	r1, r1, #3
100150a6:	430c      	orrs	r4, r1
100150a8:	0f67      	lsrs	r7, r4, #29
100150aa:	00d2      	lsls	r2, r2, #3
100150ac:	00e5      	lsls	r5, r4, #3
100150ae:	4317      	orrs	r7, r2
100150b0:	4c36      	ldr	r4, [pc, #216]	; (1001518c <__aeabi_dsub+0x6a0>)
100150b2:	e547      	b.n	10014b44 <__aeabi_dsub+0x58>
100150b4:	0007      	movs	r7, r0
100150b6:	000d      	movs	r5, r1
100150b8:	0014      	movs	r4, r2
100150ba:	e543      	b.n	10014b44 <__aeabi_dsub+0x58>
100150bc:	003a      	movs	r2, r7
100150be:	432a      	orrs	r2, r5
100150c0:	d043      	beq.n	1001514a <__aeabi_dsub+0x65e>
100150c2:	0002      	movs	r2, r0
100150c4:	430a      	orrs	r2, r1
100150c6:	d019      	beq.n	100150fc <__aeabi_dsub+0x610>
100150c8:	08ed      	lsrs	r5, r5, #3
100150ca:	077c      	lsls	r4, r7, #29
100150cc:	432c      	orrs	r4, r5
100150ce:	2580      	movs	r5, #128	; 0x80
100150d0:	08fa      	lsrs	r2, r7, #3
100150d2:	032d      	lsls	r5, r5, #12
100150d4:	422a      	tst	r2, r5
100150d6:	d007      	beq.n	100150e8 <__aeabi_dsub+0x5fc>
100150d8:	08c6      	lsrs	r6, r0, #3
100150da:	422e      	tst	r6, r5
100150dc:	d104      	bne.n	100150e8 <__aeabi_dsub+0x5fc>
100150de:	0747      	lsls	r7, r0, #29
100150e0:	003c      	movs	r4, r7
100150e2:	0032      	movs	r2, r6
100150e4:	08c9      	lsrs	r1, r1, #3
100150e6:	430c      	orrs	r4, r1
100150e8:	00d7      	lsls	r7, r2, #3
100150ea:	0f62      	lsrs	r2, r4, #29
100150ec:	00e5      	lsls	r5, r4, #3
100150ee:	4317      	orrs	r7, r2
100150f0:	469a      	mov	sl, r3
100150f2:	4c26      	ldr	r4, [pc, #152]	; (1001518c <__aeabi_dsub+0x6a0>)
100150f4:	e526      	b.n	10014b44 <__aeabi_dsub+0x58>
100150f6:	2200      	movs	r2, #0
100150f8:	2500      	movs	r5, #0
100150fa:	e544      	b.n	10014b86 <__aeabi_dsub+0x9a>
100150fc:	4c23      	ldr	r4, [pc, #140]	; (1001518c <__aeabi_dsub+0x6a0>)
100150fe:	e521      	b.n	10014b44 <__aeabi_dsub+0x58>
10015100:	2000      	movs	r0, #0
10015102:	e749      	b.n	10014f98 <__aeabi_dsub+0x4ac>
10015104:	2300      	movs	r3, #0
10015106:	2500      	movs	r5, #0
10015108:	e5bb      	b.n	10014c82 <__aeabi_dsub+0x196>
1001510a:	464c      	mov	r4, r9
1001510c:	003e      	movs	r6, r7
1001510e:	3c20      	subs	r4, #32
10015110:	40e6      	lsrs	r6, r4
10015112:	464c      	mov	r4, r9
10015114:	46b4      	mov	ip, r6
10015116:	2c20      	cmp	r4, #32
10015118:	d031      	beq.n	1001517e <__aeabi_dsub+0x692>
1001511a:	2440      	movs	r4, #64	; 0x40
1001511c:	464e      	mov	r6, r9
1001511e:	1ba6      	subs	r6, r4, r6
10015120:	40b7      	lsls	r7, r6
10015122:	433d      	orrs	r5, r7
10015124:	1e6c      	subs	r4, r5, #1
10015126:	41a5      	sbcs	r5, r4
10015128:	4664      	mov	r4, ip
1001512a:	432c      	orrs	r4, r5
1001512c:	2700      	movs	r7, #0
1001512e:	1b0d      	subs	r5, r1, r4
10015130:	e6e7      	b.n	10014f02 <__aeabi_dsub+0x416>
10015132:	2280      	movs	r2, #128	; 0x80
10015134:	2300      	movs	r3, #0
10015136:	0312      	lsls	r2, r2, #12
10015138:	4c14      	ldr	r4, [pc, #80]	; (1001518c <__aeabi_dsub+0x6a0>)
1001513a:	2500      	movs	r5, #0
1001513c:	e5a1      	b.n	10014c82 <__aeabi_dsub+0x196>
1001513e:	433d      	orrs	r5, r7
10015140:	1e6f      	subs	r7, r5, #1
10015142:	41bd      	sbcs	r5, r7
10015144:	2700      	movs	r7, #0
10015146:	b2ed      	uxtb	r5, r5
10015148:	e760      	b.n	1001500c <__aeabi_dsub+0x520>
1001514a:	0007      	movs	r7, r0
1001514c:	000d      	movs	r5, r1
1001514e:	4c0f      	ldr	r4, [pc, #60]	; (1001518c <__aeabi_dsub+0x6a0>)
10015150:	e4f8      	b.n	10014b44 <__aeabi_dsub+0x58>
10015152:	0007      	movs	r7, r0
10015154:	000d      	movs	r5, r1
10015156:	e4f5      	b.n	10014b44 <__aeabi_dsub+0x58>
10015158:	464e      	mov	r6, r9
1001515a:	003c      	movs	r4, r7
1001515c:	3e20      	subs	r6, #32
1001515e:	40f4      	lsrs	r4, r6
10015160:	46a0      	mov	r8, r4
10015162:	464c      	mov	r4, r9
10015164:	2c20      	cmp	r4, #32
10015166:	d00e      	beq.n	10015186 <__aeabi_dsub+0x69a>
10015168:	2440      	movs	r4, #64	; 0x40
1001516a:	464e      	mov	r6, r9
1001516c:	1ba4      	subs	r4, r4, r6
1001516e:	40a7      	lsls	r7, r4
10015170:	433d      	orrs	r5, r7
10015172:	1e6f      	subs	r7, r5, #1
10015174:	41bd      	sbcs	r5, r7
10015176:	4644      	mov	r4, r8
10015178:	2700      	movs	r7, #0
1001517a:	4325      	orrs	r5, r4
1001517c:	e746      	b.n	1001500c <__aeabi_dsub+0x520>
1001517e:	2700      	movs	r7, #0
10015180:	e7cf      	b.n	10015122 <__aeabi_dsub+0x636>
10015182:	000d      	movs	r5, r1
10015184:	e573      	b.n	10014c6e <__aeabi_dsub+0x182>
10015186:	2700      	movs	r7, #0
10015188:	e7f2      	b.n	10015170 <__aeabi_dsub+0x684>
1001518a:	46c0      	nop			; (mov r8, r8)
1001518c:	000007ff 	.word	0x000007ff
10015190:	ff7fffff 	.word	0xff7fffff

10015194 <__aeabi_dcmpun>:
10015194:	b570      	push	{r4, r5, r6, lr}
10015196:	4e0e      	ldr	r6, [pc, #56]	; (100151d0 <__aeabi_dcmpun+0x3c>)
10015198:	030c      	lsls	r4, r1, #12
1001519a:	031d      	lsls	r5, r3, #12
1001519c:	0049      	lsls	r1, r1, #1
1001519e:	005b      	lsls	r3, r3, #1
100151a0:	0b24      	lsrs	r4, r4, #12
100151a2:	0d49      	lsrs	r1, r1, #21
100151a4:	0b2d      	lsrs	r5, r5, #12
100151a6:	0d5b      	lsrs	r3, r3, #21
100151a8:	42b1      	cmp	r1, r6
100151aa:	d004      	beq.n	100151b6 <__aeabi_dcmpun+0x22>
100151ac:	4908      	ldr	r1, [pc, #32]	; (100151d0 <__aeabi_dcmpun+0x3c>)
100151ae:	2000      	movs	r0, #0
100151b0:	428b      	cmp	r3, r1
100151b2:	d008      	beq.n	100151c6 <__aeabi_dcmpun+0x32>
100151b4:	bd70      	pop	{r4, r5, r6, pc}
100151b6:	4304      	orrs	r4, r0
100151b8:	2001      	movs	r0, #1
100151ba:	2c00      	cmp	r4, #0
100151bc:	d1fa      	bne.n	100151b4 <__aeabi_dcmpun+0x20>
100151be:	4904      	ldr	r1, [pc, #16]	; (100151d0 <__aeabi_dcmpun+0x3c>)
100151c0:	2000      	movs	r0, #0
100151c2:	428b      	cmp	r3, r1
100151c4:	d1f6      	bne.n	100151b4 <__aeabi_dcmpun+0x20>
100151c6:	4315      	orrs	r5, r2
100151c8:	0028      	movs	r0, r5
100151ca:	1e45      	subs	r5, r0, #1
100151cc:	41a8      	sbcs	r0, r5
100151ce:	e7f1      	b.n	100151b4 <__aeabi_dcmpun+0x20>
100151d0:	000007ff 	.word	0x000007ff

100151d4 <__aeabi_d2iz>:
100151d4:	030b      	lsls	r3, r1, #12
100151d6:	b530      	push	{r4, r5, lr}
100151d8:	4d13      	ldr	r5, [pc, #76]	; (10015228 <__aeabi_d2iz+0x54>)
100151da:	0b1a      	lsrs	r2, r3, #12
100151dc:	004b      	lsls	r3, r1, #1
100151de:	0d5b      	lsrs	r3, r3, #21
100151e0:	0fc9      	lsrs	r1, r1, #31
100151e2:	2400      	movs	r4, #0
100151e4:	42ab      	cmp	r3, r5
100151e6:	dd11      	ble.n	1001520c <__aeabi_d2iz+0x38>
100151e8:	4c10      	ldr	r4, [pc, #64]	; (1001522c <__aeabi_d2iz+0x58>)
100151ea:	42a3      	cmp	r3, r4
100151ec:	dc10      	bgt.n	10015210 <__aeabi_d2iz+0x3c>
100151ee:	2480      	movs	r4, #128	; 0x80
100151f0:	0364      	lsls	r4, r4, #13
100151f2:	4322      	orrs	r2, r4
100151f4:	4c0e      	ldr	r4, [pc, #56]	; (10015230 <__aeabi_d2iz+0x5c>)
100151f6:	1ae4      	subs	r4, r4, r3
100151f8:	2c1f      	cmp	r4, #31
100151fa:	dd0c      	ble.n	10015216 <__aeabi_d2iz+0x42>
100151fc:	480d      	ldr	r0, [pc, #52]	; (10015234 <__aeabi_d2iz+0x60>)
100151fe:	1ac3      	subs	r3, r0, r3
10015200:	40da      	lsrs	r2, r3
10015202:	0013      	movs	r3, r2
10015204:	425c      	negs	r4, r3
10015206:	2900      	cmp	r1, #0
10015208:	d100      	bne.n	1001520c <__aeabi_d2iz+0x38>
1001520a:	001c      	movs	r4, r3
1001520c:	0020      	movs	r0, r4
1001520e:	bd30      	pop	{r4, r5, pc}
10015210:	4b09      	ldr	r3, [pc, #36]	; (10015238 <__aeabi_d2iz+0x64>)
10015212:	18cc      	adds	r4, r1, r3
10015214:	e7fa      	b.n	1001520c <__aeabi_d2iz+0x38>
10015216:	40e0      	lsrs	r0, r4
10015218:	4c08      	ldr	r4, [pc, #32]	; (1001523c <__aeabi_d2iz+0x68>)
1001521a:	46a4      	mov	ip, r4
1001521c:	4463      	add	r3, ip
1001521e:	409a      	lsls	r2, r3
10015220:	0013      	movs	r3, r2
10015222:	4303      	orrs	r3, r0
10015224:	e7ee      	b.n	10015204 <__aeabi_d2iz+0x30>
10015226:	46c0      	nop			; (mov r8, r8)
10015228:	000003fe 	.word	0x000003fe
1001522c:	0000041d 	.word	0x0000041d
10015230:	00000433 	.word	0x00000433
10015234:	00000413 	.word	0x00000413
10015238:	7fffffff 	.word	0x7fffffff
1001523c:	fffffbed 	.word	0xfffffbed

10015240 <__aeabi_i2d>:
10015240:	b570      	push	{r4, r5, r6, lr}
10015242:	2800      	cmp	r0, #0
10015244:	d030      	beq.n	100152a8 <__aeabi_i2d+0x68>
10015246:	17c3      	asrs	r3, r0, #31
10015248:	18c4      	adds	r4, r0, r3
1001524a:	405c      	eors	r4, r3
1001524c:	0fc5      	lsrs	r5, r0, #31
1001524e:	0020      	movs	r0, r4
10015250:	f000 f950 	bl	100154f4 <__clzsi2>
10015254:	4b17      	ldr	r3, [pc, #92]	; (100152b4 <__aeabi_i2d+0x74>)
10015256:	4a18      	ldr	r2, [pc, #96]	; (100152b8 <__aeabi_i2d+0x78>)
10015258:	1a1b      	subs	r3, r3, r0
1001525a:	1ad2      	subs	r2, r2, r3
1001525c:	2a1f      	cmp	r2, #31
1001525e:	dd18      	ble.n	10015292 <__aeabi_i2d+0x52>
10015260:	4a16      	ldr	r2, [pc, #88]	; (100152bc <__aeabi_i2d+0x7c>)
10015262:	1ad2      	subs	r2, r2, r3
10015264:	4094      	lsls	r4, r2
10015266:	2200      	movs	r2, #0
10015268:	0324      	lsls	r4, r4, #12
1001526a:	055b      	lsls	r3, r3, #21
1001526c:	0b24      	lsrs	r4, r4, #12
1001526e:	0d5b      	lsrs	r3, r3, #21
10015270:	2100      	movs	r1, #0
10015272:	0010      	movs	r0, r2
10015274:	0324      	lsls	r4, r4, #12
10015276:	0d0a      	lsrs	r2, r1, #20
10015278:	0512      	lsls	r2, r2, #20
1001527a:	0b24      	lsrs	r4, r4, #12
1001527c:	4314      	orrs	r4, r2
1001527e:	4a10      	ldr	r2, [pc, #64]	; (100152c0 <__aeabi_i2d+0x80>)
10015280:	051b      	lsls	r3, r3, #20
10015282:	4014      	ands	r4, r2
10015284:	431c      	orrs	r4, r3
10015286:	0064      	lsls	r4, r4, #1
10015288:	07ed      	lsls	r5, r5, #31
1001528a:	0864      	lsrs	r4, r4, #1
1001528c:	432c      	orrs	r4, r5
1001528e:	0021      	movs	r1, r4
10015290:	bd70      	pop	{r4, r5, r6, pc}
10015292:	0021      	movs	r1, r4
10015294:	4091      	lsls	r1, r2
10015296:	000a      	movs	r2, r1
10015298:	210b      	movs	r1, #11
1001529a:	1a08      	subs	r0, r1, r0
1001529c:	40c4      	lsrs	r4, r0
1001529e:	055b      	lsls	r3, r3, #21
100152a0:	0324      	lsls	r4, r4, #12
100152a2:	0b24      	lsrs	r4, r4, #12
100152a4:	0d5b      	lsrs	r3, r3, #21
100152a6:	e7e3      	b.n	10015270 <__aeabi_i2d+0x30>
100152a8:	2500      	movs	r5, #0
100152aa:	2300      	movs	r3, #0
100152ac:	2400      	movs	r4, #0
100152ae:	2200      	movs	r2, #0
100152b0:	e7de      	b.n	10015270 <__aeabi_i2d+0x30>
100152b2:	46c0      	nop			; (mov r8, r8)
100152b4:	0000041e 	.word	0x0000041e
100152b8:	00000433 	.word	0x00000433
100152bc:	00000413 	.word	0x00000413
100152c0:	800fffff 	.word	0x800fffff

100152c4 <__aeabi_ui2d>:
100152c4:	b570      	push	{r4, r5, r6, lr}
100152c6:	1e05      	subs	r5, r0, #0
100152c8:	d028      	beq.n	1001531c <__aeabi_ui2d+0x58>
100152ca:	f000 f913 	bl	100154f4 <__clzsi2>
100152ce:	4b15      	ldr	r3, [pc, #84]	; (10015324 <__aeabi_ui2d+0x60>)
100152d0:	4a15      	ldr	r2, [pc, #84]	; (10015328 <__aeabi_ui2d+0x64>)
100152d2:	1a1b      	subs	r3, r3, r0
100152d4:	1ad2      	subs	r2, r2, r3
100152d6:	2a1f      	cmp	r2, #31
100152d8:	dd16      	ble.n	10015308 <__aeabi_ui2d+0x44>
100152da:	002c      	movs	r4, r5
100152dc:	4a13      	ldr	r2, [pc, #76]	; (1001532c <__aeabi_ui2d+0x68>)
100152de:	2500      	movs	r5, #0
100152e0:	1ad2      	subs	r2, r2, r3
100152e2:	4094      	lsls	r4, r2
100152e4:	055a      	lsls	r2, r3, #21
100152e6:	0324      	lsls	r4, r4, #12
100152e8:	0b24      	lsrs	r4, r4, #12
100152ea:	0d52      	lsrs	r2, r2, #21
100152ec:	2100      	movs	r1, #0
100152ee:	0324      	lsls	r4, r4, #12
100152f0:	0d0b      	lsrs	r3, r1, #20
100152f2:	0b24      	lsrs	r4, r4, #12
100152f4:	051b      	lsls	r3, r3, #20
100152f6:	4323      	orrs	r3, r4
100152f8:	4c0d      	ldr	r4, [pc, #52]	; (10015330 <__aeabi_ui2d+0x6c>)
100152fa:	0512      	lsls	r2, r2, #20
100152fc:	4023      	ands	r3, r4
100152fe:	4313      	orrs	r3, r2
10015300:	005b      	lsls	r3, r3, #1
10015302:	0028      	movs	r0, r5
10015304:	0859      	lsrs	r1, r3, #1
10015306:	bd70      	pop	{r4, r5, r6, pc}
10015308:	210b      	movs	r1, #11
1001530a:	002c      	movs	r4, r5
1001530c:	1a08      	subs	r0, r1, r0
1001530e:	40c4      	lsrs	r4, r0
10015310:	4095      	lsls	r5, r2
10015312:	0324      	lsls	r4, r4, #12
10015314:	055a      	lsls	r2, r3, #21
10015316:	0b24      	lsrs	r4, r4, #12
10015318:	0d52      	lsrs	r2, r2, #21
1001531a:	e7e7      	b.n	100152ec <__aeabi_ui2d+0x28>
1001531c:	2200      	movs	r2, #0
1001531e:	2400      	movs	r4, #0
10015320:	e7e4      	b.n	100152ec <__aeabi_ui2d+0x28>
10015322:	46c0      	nop			; (mov r8, r8)
10015324:	0000041e 	.word	0x0000041e
10015328:	00000433 	.word	0x00000433
1001532c:	00000413 	.word	0x00000413
10015330:	800fffff 	.word	0x800fffff

10015334 <__aeabi_f2d>:
10015334:	0042      	lsls	r2, r0, #1
10015336:	0e12      	lsrs	r2, r2, #24
10015338:	1c51      	adds	r1, r2, #1
1001533a:	0243      	lsls	r3, r0, #9
1001533c:	b2c9      	uxtb	r1, r1
1001533e:	b570      	push	{r4, r5, r6, lr}
10015340:	0a5d      	lsrs	r5, r3, #9
10015342:	0fc4      	lsrs	r4, r0, #31
10015344:	2901      	cmp	r1, #1
10015346:	dd15      	ble.n	10015374 <__aeabi_f2d+0x40>
10015348:	21e0      	movs	r1, #224	; 0xe0
1001534a:	0089      	lsls	r1, r1, #2
1001534c:	468c      	mov	ip, r1
1001534e:	076d      	lsls	r5, r5, #29
10015350:	0b1b      	lsrs	r3, r3, #12
10015352:	4462      	add	r2, ip
10015354:	2100      	movs	r1, #0
10015356:	0028      	movs	r0, r5
10015358:	0d0d      	lsrs	r5, r1, #20
1001535a:	052d      	lsls	r5, r5, #20
1001535c:	432b      	orrs	r3, r5
1001535e:	4d1c      	ldr	r5, [pc, #112]	; (100153d0 <__aeabi_f2d+0x9c>)
10015360:	0552      	lsls	r2, r2, #21
10015362:	402b      	ands	r3, r5
10015364:	0852      	lsrs	r2, r2, #1
10015366:	4313      	orrs	r3, r2
10015368:	005b      	lsls	r3, r3, #1
1001536a:	07e4      	lsls	r4, r4, #31
1001536c:	085b      	lsrs	r3, r3, #1
1001536e:	4323      	orrs	r3, r4
10015370:	0019      	movs	r1, r3
10015372:	bd70      	pop	{r4, r5, r6, pc}
10015374:	2a00      	cmp	r2, #0
10015376:	d115      	bne.n	100153a4 <__aeabi_f2d+0x70>
10015378:	2d00      	cmp	r5, #0
1001537a:	d01f      	beq.n	100153bc <__aeabi_f2d+0x88>
1001537c:	0028      	movs	r0, r5
1001537e:	f000 f8b9 	bl	100154f4 <__clzsi2>
10015382:	280a      	cmp	r0, #10
10015384:	dc1d      	bgt.n	100153c2 <__aeabi_f2d+0x8e>
10015386:	230b      	movs	r3, #11
10015388:	002a      	movs	r2, r5
1001538a:	1a1b      	subs	r3, r3, r0
1001538c:	40da      	lsrs	r2, r3
1001538e:	0013      	movs	r3, r2
10015390:	0002      	movs	r2, r0
10015392:	3215      	adds	r2, #21
10015394:	4095      	lsls	r5, r2
10015396:	4a0f      	ldr	r2, [pc, #60]	; (100153d4 <__aeabi_f2d+0xa0>)
10015398:	031b      	lsls	r3, r3, #12
1001539a:	1a12      	subs	r2, r2, r0
1001539c:	0552      	lsls	r2, r2, #21
1001539e:	0b1b      	lsrs	r3, r3, #12
100153a0:	0d52      	lsrs	r2, r2, #21
100153a2:	e7d7      	b.n	10015354 <__aeabi_f2d+0x20>
100153a4:	2d00      	cmp	r5, #0
100153a6:	d006      	beq.n	100153b6 <__aeabi_f2d+0x82>
100153a8:	2280      	movs	r2, #128	; 0x80
100153aa:	0b1b      	lsrs	r3, r3, #12
100153ac:	0312      	lsls	r2, r2, #12
100153ae:	4313      	orrs	r3, r2
100153b0:	076d      	lsls	r5, r5, #29
100153b2:	4a09      	ldr	r2, [pc, #36]	; (100153d8 <__aeabi_f2d+0xa4>)
100153b4:	e7ce      	b.n	10015354 <__aeabi_f2d+0x20>
100153b6:	4a08      	ldr	r2, [pc, #32]	; (100153d8 <__aeabi_f2d+0xa4>)
100153b8:	2300      	movs	r3, #0
100153ba:	e7cb      	b.n	10015354 <__aeabi_f2d+0x20>
100153bc:	2200      	movs	r2, #0
100153be:	2300      	movs	r3, #0
100153c0:	e7c8      	b.n	10015354 <__aeabi_f2d+0x20>
100153c2:	0003      	movs	r3, r0
100153c4:	3b0b      	subs	r3, #11
100153c6:	409d      	lsls	r5, r3
100153c8:	002b      	movs	r3, r5
100153ca:	2500      	movs	r5, #0
100153cc:	e7e3      	b.n	10015396 <__aeabi_f2d+0x62>
100153ce:	46c0      	nop			; (mov r8, r8)
100153d0:	800fffff 	.word	0x800fffff
100153d4:	00000389 	.word	0x00000389
100153d8:	000007ff 	.word	0x000007ff

100153dc <__aeabi_d2f>:
100153dc:	004b      	lsls	r3, r1, #1
100153de:	b570      	push	{r4, r5, r6, lr}
100153e0:	0d5e      	lsrs	r6, r3, #21
100153e2:	030c      	lsls	r4, r1, #12
100153e4:	1c75      	adds	r5, r6, #1
100153e6:	0a64      	lsrs	r4, r4, #9
100153e8:	0f42      	lsrs	r2, r0, #29
100153ea:	056d      	lsls	r5, r5, #21
100153ec:	4322      	orrs	r2, r4
100153ee:	0fc9      	lsrs	r1, r1, #31
100153f0:	00c4      	lsls	r4, r0, #3
100153f2:	0d6d      	lsrs	r5, r5, #21
100153f4:	2d01      	cmp	r5, #1
100153f6:	dd2a      	ble.n	1001544e <__aeabi_d2f+0x72>
100153f8:	4b3b      	ldr	r3, [pc, #236]	; (100154e8 <__aeabi_d2f+0x10c>)
100153fa:	18f3      	adds	r3, r6, r3
100153fc:	2bfe      	cmp	r3, #254	; 0xfe
100153fe:	dc1a      	bgt.n	10015436 <__aeabi_d2f+0x5a>
10015400:	2b00      	cmp	r3, #0
10015402:	dd42      	ble.n	1001548a <__aeabi_d2f+0xae>
10015404:	0180      	lsls	r0, r0, #6
10015406:	1e45      	subs	r5, r0, #1
10015408:	41a8      	sbcs	r0, r5
1001540a:	00d2      	lsls	r2, r2, #3
1001540c:	4310      	orrs	r0, r2
1001540e:	0f62      	lsrs	r2, r4, #29
10015410:	4302      	orrs	r2, r0
10015412:	0750      	lsls	r0, r2, #29
10015414:	d004      	beq.n	10015420 <__aeabi_d2f+0x44>
10015416:	200f      	movs	r0, #15
10015418:	4010      	ands	r0, r2
1001541a:	2804      	cmp	r0, #4
1001541c:	d000      	beq.n	10015420 <__aeabi_d2f+0x44>
1001541e:	3204      	adds	r2, #4
10015420:	2080      	movs	r0, #128	; 0x80
10015422:	04c0      	lsls	r0, r0, #19
10015424:	4010      	ands	r0, r2
10015426:	d021      	beq.n	1001546c <__aeabi_d2f+0x90>
10015428:	3301      	adds	r3, #1
1001542a:	2bff      	cmp	r3, #255	; 0xff
1001542c:	d003      	beq.n	10015436 <__aeabi_d2f+0x5a>
1001542e:	0192      	lsls	r2, r2, #6
10015430:	0a52      	lsrs	r2, r2, #9
10015432:	b2db      	uxtb	r3, r3
10015434:	e001      	b.n	1001543a <__aeabi_d2f+0x5e>
10015436:	23ff      	movs	r3, #255	; 0xff
10015438:	2200      	movs	r2, #0
1001543a:	0252      	lsls	r2, r2, #9
1001543c:	0a52      	lsrs	r2, r2, #9
1001543e:	05db      	lsls	r3, r3, #23
10015440:	4313      	orrs	r3, r2
10015442:	005b      	lsls	r3, r3, #1
10015444:	07c9      	lsls	r1, r1, #31
10015446:	085b      	lsrs	r3, r3, #1
10015448:	430b      	orrs	r3, r1
1001544a:	0018      	movs	r0, r3
1001544c:	bd70      	pop	{r4, r5, r6, pc}
1001544e:	2e00      	cmp	r6, #0
10015450:	d007      	beq.n	10015462 <__aeabi_d2f+0x86>
10015452:	4314      	orrs	r4, r2
10015454:	d0ef      	beq.n	10015436 <__aeabi_d2f+0x5a>
10015456:	2080      	movs	r0, #128	; 0x80
10015458:	00d2      	lsls	r2, r2, #3
1001545a:	0480      	lsls	r0, r0, #18
1001545c:	4302      	orrs	r2, r0
1001545e:	23ff      	movs	r3, #255	; 0xff
10015460:	e7d7      	b.n	10015412 <__aeabi_d2f+0x36>
10015462:	4322      	orrs	r2, r4
10015464:	2300      	movs	r3, #0
10015466:	2a00      	cmp	r2, #0
10015468:	d003      	beq.n	10015472 <__aeabi_d2f+0x96>
1001546a:	2205      	movs	r2, #5
1001546c:	08d2      	lsrs	r2, r2, #3
1001546e:	2bff      	cmp	r3, #255	; 0xff
10015470:	d003      	beq.n	1001547a <__aeabi_d2f+0x9e>
10015472:	0252      	lsls	r2, r2, #9
10015474:	0a52      	lsrs	r2, r2, #9
10015476:	b2db      	uxtb	r3, r3
10015478:	e7df      	b.n	1001543a <__aeabi_d2f+0x5e>
1001547a:	2a00      	cmp	r2, #0
1001547c:	d032      	beq.n	100154e4 <__aeabi_d2f+0x108>
1001547e:	2080      	movs	r0, #128	; 0x80
10015480:	03c0      	lsls	r0, r0, #15
10015482:	4302      	orrs	r2, r0
10015484:	0252      	lsls	r2, r2, #9
10015486:	0a52      	lsrs	r2, r2, #9
10015488:	e7d7      	b.n	1001543a <__aeabi_d2f+0x5e>
1001548a:	0018      	movs	r0, r3
1001548c:	3017      	adds	r0, #23
1001548e:	db14      	blt.n	100154ba <__aeabi_d2f+0xde>
10015490:	2080      	movs	r0, #128	; 0x80
10015492:	0400      	lsls	r0, r0, #16
10015494:	4302      	orrs	r2, r0
10015496:	201e      	movs	r0, #30
10015498:	1ac0      	subs	r0, r0, r3
1001549a:	281f      	cmp	r0, #31
1001549c:	dc0f      	bgt.n	100154be <__aeabi_d2f+0xe2>
1001549e:	0025      	movs	r5, r4
100154a0:	4b12      	ldr	r3, [pc, #72]	; (100154ec <__aeabi_d2f+0x110>)
100154a2:	18f3      	adds	r3, r6, r3
100154a4:	409d      	lsls	r5, r3
100154a6:	1e6e      	subs	r6, r5, #1
100154a8:	41b5      	sbcs	r5, r6
100154aa:	409a      	lsls	r2, r3
100154ac:	002b      	movs	r3, r5
100154ae:	4313      	orrs	r3, r2
100154b0:	0022      	movs	r2, r4
100154b2:	40c2      	lsrs	r2, r0
100154b4:	431a      	orrs	r2, r3
100154b6:	2300      	movs	r3, #0
100154b8:	e7ab      	b.n	10015412 <__aeabi_d2f+0x36>
100154ba:	2300      	movs	r3, #0
100154bc:	e7d5      	b.n	1001546a <__aeabi_d2f+0x8e>
100154be:	2502      	movs	r5, #2
100154c0:	426d      	negs	r5, r5
100154c2:	1aeb      	subs	r3, r5, r3
100154c4:	0015      	movs	r5, r2
100154c6:	40dd      	lsrs	r5, r3
100154c8:	2820      	cmp	r0, #32
100154ca:	d009      	beq.n	100154e0 <__aeabi_d2f+0x104>
100154cc:	4b08      	ldr	r3, [pc, #32]	; (100154f0 <__aeabi_d2f+0x114>)
100154ce:	18f3      	adds	r3, r6, r3
100154d0:	409a      	lsls	r2, r3
100154d2:	4314      	orrs	r4, r2
100154d4:	1e62      	subs	r2, r4, #1
100154d6:	4194      	sbcs	r4, r2
100154d8:	0022      	movs	r2, r4
100154da:	2300      	movs	r3, #0
100154dc:	432a      	orrs	r2, r5
100154de:	e798      	b.n	10015412 <__aeabi_d2f+0x36>
100154e0:	2200      	movs	r2, #0
100154e2:	e7f6      	b.n	100154d2 <__aeabi_d2f+0xf6>
100154e4:	2200      	movs	r2, #0
100154e6:	e7a8      	b.n	1001543a <__aeabi_d2f+0x5e>
100154e8:	fffffc80 	.word	0xfffffc80
100154ec:	fffffc82 	.word	0xfffffc82
100154f0:	fffffca2 	.word	0xfffffca2

100154f4 <__clzsi2>:
100154f4:	211c      	movs	r1, #28
100154f6:	2301      	movs	r3, #1
100154f8:	041b      	lsls	r3, r3, #16
100154fa:	4298      	cmp	r0, r3
100154fc:	d301      	bcc.n	10015502 <__clzsi2+0xe>
100154fe:	0c00      	lsrs	r0, r0, #16
10015500:	3910      	subs	r1, #16
10015502:	0a1b      	lsrs	r3, r3, #8
10015504:	4298      	cmp	r0, r3
10015506:	d301      	bcc.n	1001550c <__clzsi2+0x18>
10015508:	0a00      	lsrs	r0, r0, #8
1001550a:	3908      	subs	r1, #8
1001550c:	091b      	lsrs	r3, r3, #4
1001550e:	4298      	cmp	r0, r3
10015510:	d301      	bcc.n	10015516 <__clzsi2+0x22>
10015512:	0900      	lsrs	r0, r0, #4
10015514:	3904      	subs	r1, #4
10015516:	a202      	add	r2, pc, #8	; (adr r2, 10015520 <__clzsi2+0x2c>)
10015518:	5c10      	ldrb	r0, [r2, r0]
1001551a:	1840      	adds	r0, r0, r1
1001551c:	4770      	bx	lr
1001551e:	46c0      	nop			; (mov r8, r8)
10015520:	02020304 	.word	0x02020304
10015524:	01010101 	.word	0x01010101
	...

10015530 <__errno>:
10015530:	4b01      	ldr	r3, [pc, #4]	; (10015538 <__errno+0x8>)
10015532:	6818      	ldr	r0, [r3, #0]
10015534:	4770      	bx	lr
10015536:	46c0      	nop			; (mov r8, r8)
10015538:	10017968 	.word	0x10017968

1001553c <__libc_init_array>:
1001553c:	4b0e      	ldr	r3, [pc, #56]	; (10015578 <__libc_init_array+0x3c>)
1001553e:	b570      	push	{r4, r5, r6, lr}
10015540:	2500      	movs	r5, #0
10015542:	001e      	movs	r6, r3
10015544:	4c0d      	ldr	r4, [pc, #52]	; (1001557c <__libc_init_array+0x40>)
10015546:	1ae4      	subs	r4, r4, r3
10015548:	10a4      	asrs	r4, r4, #2
1001554a:	42a5      	cmp	r5, r4
1001554c:	d004      	beq.n	10015558 <__libc_init_array+0x1c>
1001554e:	00ab      	lsls	r3, r5, #2
10015550:	58f3      	ldr	r3, [r6, r3]
10015552:	4798      	blx	r3
10015554:	3501      	adds	r5, #1
10015556:	e7f8      	b.n	1001554a <__libc_init_array+0xe>
10015558:	f002 f9c0 	bl	100178dc <_init>
1001555c:	4b08      	ldr	r3, [pc, #32]	; (10015580 <__libc_init_array+0x44>)
1001555e:	2500      	movs	r5, #0
10015560:	001e      	movs	r6, r3
10015562:	4c08      	ldr	r4, [pc, #32]	; (10015584 <__libc_init_array+0x48>)
10015564:	1ae4      	subs	r4, r4, r3
10015566:	10a4      	asrs	r4, r4, #2
10015568:	42a5      	cmp	r5, r4
1001556a:	d004      	beq.n	10015576 <__libc_init_array+0x3a>
1001556c:	00ab      	lsls	r3, r5, #2
1001556e:	58f3      	ldr	r3, [r6, r3]
10015570:	4798      	blx	r3
10015572:	3501      	adds	r5, #1
10015574:	e7f8      	b.n	10015568 <__libc_init_array+0x2c>
10015576:	bd70      	pop	{r4, r5, r6, pc}
10015578:	100178e8 	.word	0x100178e8
1001557c:	100178e8 	.word	0x100178e8
10015580:	100178e8 	.word	0x100178e8
10015584:	100178ec 	.word	0x100178ec

10015588 <malloc>:
10015588:	b510      	push	{r4, lr}
1001558a:	4b03      	ldr	r3, [pc, #12]	; (10015598 <malloc+0x10>)
1001558c:	0001      	movs	r1, r0
1001558e:	6818      	ldr	r0, [r3, #0]
10015590:	f000 f86a 	bl	10015668 <_malloc_r>
10015594:	bd10      	pop	{r4, pc}
10015596:	46c0      	nop			; (mov r8, r8)
10015598:	10017968 	.word	0x10017968

1001559c <memcmp>:
1001559c:	b530      	push	{r4, r5, lr}
1001559e:	2400      	movs	r4, #0
100155a0:	42a2      	cmp	r2, r4
100155a2:	d008      	beq.n	100155b6 <memcmp+0x1a>
100155a4:	5d03      	ldrb	r3, [r0, r4]
100155a6:	1c65      	adds	r5, r4, #1
100155a8:	5d0c      	ldrb	r4, [r1, r4]
100155aa:	42a3      	cmp	r3, r4
100155ac:	d001      	beq.n	100155b2 <memcmp+0x16>
100155ae:	1b18      	subs	r0, r3, r4
100155b0:	e002      	b.n	100155b8 <memcmp+0x1c>
100155b2:	002c      	movs	r4, r5
100155b4:	e7f4      	b.n	100155a0 <memcmp+0x4>
100155b6:	2000      	movs	r0, #0
100155b8:	bd30      	pop	{r4, r5, pc}

100155ba <memcpy>:
100155ba:	2300      	movs	r3, #0
100155bc:	b510      	push	{r4, lr}
100155be:	429a      	cmp	r2, r3
100155c0:	d003      	beq.n	100155ca <memcpy+0x10>
100155c2:	5ccc      	ldrb	r4, [r1, r3]
100155c4:	54c4      	strb	r4, [r0, r3]
100155c6:	3301      	adds	r3, #1
100155c8:	e7f9      	b.n	100155be <memcpy+0x4>
100155ca:	bd10      	pop	{r4, pc}

100155cc <memset>:
100155cc:	0003      	movs	r3, r0
100155ce:	1882      	adds	r2, r0, r2
100155d0:	4293      	cmp	r3, r2
100155d2:	d002      	beq.n	100155da <memset+0xe>
100155d4:	7019      	strb	r1, [r3, #0]
100155d6:	3301      	adds	r3, #1
100155d8:	e7fa      	b.n	100155d0 <memset+0x4>
100155da:	4770      	bx	lr

100155dc <_free_r>:
100155dc:	b530      	push	{r4, r5, lr}
100155de:	2900      	cmp	r1, #0
100155e0:	d03e      	beq.n	10015660 <_free_r+0x84>
100155e2:	3904      	subs	r1, #4
100155e4:	680b      	ldr	r3, [r1, #0]
100155e6:	2b00      	cmp	r3, #0
100155e8:	da00      	bge.n	100155ec <_free_r+0x10>
100155ea:	18c9      	adds	r1, r1, r3
100155ec:	4a1d      	ldr	r2, [pc, #116]	; (10015664 <_free_r+0x88>)
100155ee:	6813      	ldr	r3, [r2, #0]
100155f0:	0014      	movs	r4, r2
100155f2:	2b00      	cmp	r3, #0
100155f4:	d102      	bne.n	100155fc <_free_r+0x20>
100155f6:	604b      	str	r3, [r1, #4]
100155f8:	6011      	str	r1, [r2, #0]
100155fa:	e031      	b.n	10015660 <_free_r+0x84>
100155fc:	428b      	cmp	r3, r1
100155fe:	d90d      	bls.n	1001561c <_free_r+0x40>
10015600:	680a      	ldr	r2, [r1, #0]
10015602:	1888      	adds	r0, r1, r2
10015604:	4283      	cmp	r3, r0
10015606:	d103      	bne.n	10015610 <_free_r+0x34>
10015608:	6818      	ldr	r0, [r3, #0]
1001560a:	685b      	ldr	r3, [r3, #4]
1001560c:	1882      	adds	r2, r0, r2
1001560e:	600a      	str	r2, [r1, #0]
10015610:	604b      	str	r3, [r1, #4]
10015612:	6021      	str	r1, [r4, #0]
10015614:	e024      	b.n	10015660 <_free_r+0x84>
10015616:	428a      	cmp	r2, r1
10015618:	d803      	bhi.n	10015622 <_free_r+0x46>
1001561a:	0013      	movs	r3, r2
1001561c:	685a      	ldr	r2, [r3, #4]
1001561e:	2a00      	cmp	r2, #0
10015620:	d1f9      	bne.n	10015616 <_free_r+0x3a>
10015622:	681d      	ldr	r5, [r3, #0]
10015624:	195c      	adds	r4, r3, r5
10015626:	428c      	cmp	r4, r1
10015628:	d10b      	bne.n	10015642 <_free_r+0x66>
1001562a:	6809      	ldr	r1, [r1, #0]
1001562c:	1869      	adds	r1, r5, r1
1001562e:	1858      	adds	r0, r3, r1
10015630:	6019      	str	r1, [r3, #0]
10015632:	4282      	cmp	r2, r0
10015634:	d114      	bne.n	10015660 <_free_r+0x84>
10015636:	6810      	ldr	r0, [r2, #0]
10015638:	6852      	ldr	r2, [r2, #4]
1001563a:	1841      	adds	r1, r0, r1
1001563c:	6019      	str	r1, [r3, #0]
1001563e:	605a      	str	r2, [r3, #4]
10015640:	e00e      	b.n	10015660 <_free_r+0x84>
10015642:	428c      	cmp	r4, r1
10015644:	d902      	bls.n	1001564c <_free_r+0x70>
10015646:	230c      	movs	r3, #12
10015648:	6003      	str	r3, [r0, #0]
1001564a:	e009      	b.n	10015660 <_free_r+0x84>
1001564c:	6808      	ldr	r0, [r1, #0]
1001564e:	180c      	adds	r4, r1, r0
10015650:	42a2      	cmp	r2, r4
10015652:	d103      	bne.n	1001565c <_free_r+0x80>
10015654:	6814      	ldr	r4, [r2, #0]
10015656:	6852      	ldr	r2, [r2, #4]
10015658:	1820      	adds	r0, r4, r0
1001565a:	6008      	str	r0, [r1, #0]
1001565c:	604a      	str	r2, [r1, #4]
1001565e:	6059      	str	r1, [r3, #4]
10015660:	bd30      	pop	{r4, r5, pc}
10015662:	46c0      	nop			; (mov r8, r8)
10015664:	1001942c 	.word	0x1001942c

10015668 <_malloc_r>:
10015668:	2303      	movs	r3, #3
1001566a:	b570      	push	{r4, r5, r6, lr}
1001566c:	1ccd      	adds	r5, r1, #3
1001566e:	439d      	bics	r5, r3
10015670:	3508      	adds	r5, #8
10015672:	0006      	movs	r6, r0
10015674:	2d0c      	cmp	r5, #12
10015676:	d201      	bcs.n	1001567c <_malloc_r+0x14>
10015678:	250c      	movs	r5, #12
1001567a:	e005      	b.n	10015688 <_malloc_r+0x20>
1001567c:	2d00      	cmp	r5, #0
1001567e:	da03      	bge.n	10015688 <_malloc_r+0x20>
10015680:	230c      	movs	r3, #12
10015682:	2000      	movs	r0, #0
10015684:	6033      	str	r3, [r6, #0]
10015686:	e040      	b.n	1001570a <_malloc_r+0xa2>
10015688:	42a9      	cmp	r1, r5
1001568a:	d8f9      	bhi.n	10015680 <_malloc_r+0x18>
1001568c:	4b1f      	ldr	r3, [pc, #124]	; (1001570c <_malloc_r+0xa4>)
1001568e:	681c      	ldr	r4, [r3, #0]
10015690:	001a      	movs	r2, r3
10015692:	0021      	movs	r1, r4
10015694:	2900      	cmp	r1, #0
10015696:	d013      	beq.n	100156c0 <_malloc_r+0x58>
10015698:	680b      	ldr	r3, [r1, #0]
1001569a:	1b5b      	subs	r3, r3, r5
1001569c:	d40d      	bmi.n	100156ba <_malloc_r+0x52>
1001569e:	2b0b      	cmp	r3, #11
100156a0:	d902      	bls.n	100156a8 <_malloc_r+0x40>
100156a2:	600b      	str	r3, [r1, #0]
100156a4:	18cc      	adds	r4, r1, r3
100156a6:	e01e      	b.n	100156e6 <_malloc_r+0x7e>
100156a8:	428c      	cmp	r4, r1
100156aa:	d102      	bne.n	100156b2 <_malloc_r+0x4a>
100156ac:	6863      	ldr	r3, [r4, #4]
100156ae:	6013      	str	r3, [r2, #0]
100156b0:	e01a      	b.n	100156e8 <_malloc_r+0x80>
100156b2:	684b      	ldr	r3, [r1, #4]
100156b4:	6063      	str	r3, [r4, #4]
100156b6:	000c      	movs	r4, r1
100156b8:	e016      	b.n	100156e8 <_malloc_r+0x80>
100156ba:	000c      	movs	r4, r1
100156bc:	6849      	ldr	r1, [r1, #4]
100156be:	e7e9      	b.n	10015694 <_malloc_r+0x2c>
100156c0:	4c13      	ldr	r4, [pc, #76]	; (10015710 <_malloc_r+0xa8>)
100156c2:	6823      	ldr	r3, [r4, #0]
100156c4:	2b00      	cmp	r3, #0
100156c6:	d103      	bne.n	100156d0 <_malloc_r+0x68>
100156c8:	0030      	movs	r0, r6
100156ca:	f000 f8f9 	bl	100158c0 <_sbrk_r>
100156ce:	6020      	str	r0, [r4, #0]
100156d0:	0029      	movs	r1, r5
100156d2:	0030      	movs	r0, r6
100156d4:	f000 f8f4 	bl	100158c0 <_sbrk_r>
100156d8:	1c43      	adds	r3, r0, #1
100156da:	d0d1      	beq.n	10015680 <_malloc_r+0x18>
100156dc:	2303      	movs	r3, #3
100156de:	1cc4      	adds	r4, r0, #3
100156e0:	439c      	bics	r4, r3
100156e2:	42a0      	cmp	r0, r4
100156e4:	d10a      	bne.n	100156fc <_malloc_r+0x94>
100156e6:	6025      	str	r5, [r4, #0]
100156e8:	0020      	movs	r0, r4
100156ea:	2207      	movs	r2, #7
100156ec:	300b      	adds	r0, #11
100156ee:	1d23      	adds	r3, r4, #4
100156f0:	4390      	bics	r0, r2
100156f2:	1ac3      	subs	r3, r0, r3
100156f4:	d009      	beq.n	1001570a <_malloc_r+0xa2>
100156f6:	425a      	negs	r2, r3
100156f8:	50e2      	str	r2, [r4, r3]
100156fa:	e006      	b.n	1001570a <_malloc_r+0xa2>
100156fc:	1a21      	subs	r1, r4, r0
100156fe:	0030      	movs	r0, r6
10015700:	f000 f8de 	bl	100158c0 <_sbrk_r>
10015704:	1c43      	adds	r3, r0, #1
10015706:	d1ee      	bne.n	100156e6 <_malloc_r+0x7e>
10015708:	e7ba      	b.n	10015680 <_malloc_r+0x18>
1001570a:	bd70      	pop	{r4, r5, r6, pc}
1001570c:	1001942c 	.word	0x1001942c
10015710:	10019428 	.word	0x10019428

10015714 <iprintf>:
10015714:	b40f      	push	{r0, r1, r2, r3}
10015716:	4b0b      	ldr	r3, [pc, #44]	; (10015744 <iprintf+0x30>)
10015718:	b513      	push	{r0, r1, r4, lr}
1001571a:	681c      	ldr	r4, [r3, #0]
1001571c:	2c00      	cmp	r4, #0
1001571e:	d005      	beq.n	1001572c <iprintf+0x18>
10015720:	69a3      	ldr	r3, [r4, #24]
10015722:	2b00      	cmp	r3, #0
10015724:	d102      	bne.n	1001572c <iprintf+0x18>
10015726:	0020      	movs	r0, r4
10015728:	f000 fb58 	bl	10015ddc <__sinit>
1001572c:	ab05      	add	r3, sp, #20
1001572e:	9a04      	ldr	r2, [sp, #16]
10015730:	68a1      	ldr	r1, [r4, #8]
10015732:	0020      	movs	r0, r4
10015734:	9301      	str	r3, [sp, #4]
10015736:	f000 fc71 	bl	1001601c <_vfiprintf_r>
1001573a:	bc16      	pop	{r1, r2, r4}
1001573c:	bc08      	pop	{r3}
1001573e:	b004      	add	sp, #16
10015740:	4718      	bx	r3
10015742:	46c0      	nop			; (mov r8, r8)
10015744:	10017968 	.word	0x10017968

10015748 <putchar>:
10015748:	4b08      	ldr	r3, [pc, #32]	; (1001576c <putchar+0x24>)
1001574a:	b570      	push	{r4, r5, r6, lr}
1001574c:	681c      	ldr	r4, [r3, #0]
1001574e:	0005      	movs	r5, r0
10015750:	2c00      	cmp	r4, #0
10015752:	d005      	beq.n	10015760 <putchar+0x18>
10015754:	69a3      	ldr	r3, [r4, #24]
10015756:	2b00      	cmp	r3, #0
10015758:	d102      	bne.n	10015760 <putchar+0x18>
1001575a:	0020      	movs	r0, r4
1001575c:	f000 fb3e 	bl	10015ddc <__sinit>
10015760:	0029      	movs	r1, r5
10015762:	68a2      	ldr	r2, [r4, #8]
10015764:	0020      	movs	r0, r4
10015766:	f000 ff05 	bl	10016574 <_putc_r>
1001576a:	bd70      	pop	{r4, r5, r6, pc}
1001576c:	10017968 	.word	0x10017968

10015770 <_puts_r>:
10015770:	b570      	push	{r4, r5, r6, lr}
10015772:	0005      	movs	r5, r0
10015774:	000e      	movs	r6, r1
10015776:	2800      	cmp	r0, #0
10015778:	d004      	beq.n	10015784 <_puts_r+0x14>
1001577a:	6983      	ldr	r3, [r0, #24]
1001577c:	2b00      	cmp	r3, #0
1001577e:	d101      	bne.n	10015784 <_puts_r+0x14>
10015780:	f000 fb2c 	bl	10015ddc <__sinit>
10015784:	69ab      	ldr	r3, [r5, #24]
10015786:	68ac      	ldr	r4, [r5, #8]
10015788:	2b00      	cmp	r3, #0
1001578a:	d102      	bne.n	10015792 <_puts_r+0x22>
1001578c:	0028      	movs	r0, r5
1001578e:	f000 fb25 	bl	10015ddc <__sinit>
10015792:	4b25      	ldr	r3, [pc, #148]	; (10015828 <_puts_r+0xb8>)
10015794:	429c      	cmp	r4, r3
10015796:	d101      	bne.n	1001579c <_puts_r+0x2c>
10015798:	686c      	ldr	r4, [r5, #4]
1001579a:	e008      	b.n	100157ae <_puts_r+0x3e>
1001579c:	4b23      	ldr	r3, [pc, #140]	; (1001582c <_puts_r+0xbc>)
1001579e:	429c      	cmp	r4, r3
100157a0:	d101      	bne.n	100157a6 <_puts_r+0x36>
100157a2:	68ac      	ldr	r4, [r5, #8]
100157a4:	e003      	b.n	100157ae <_puts_r+0x3e>
100157a6:	4b22      	ldr	r3, [pc, #136]	; (10015830 <_puts_r+0xc0>)
100157a8:	429c      	cmp	r4, r3
100157aa:	d100      	bne.n	100157ae <_puts_r+0x3e>
100157ac:	68ec      	ldr	r4, [r5, #12]
100157ae:	89a3      	ldrh	r3, [r4, #12]
100157b0:	071b      	lsls	r3, r3, #28
100157b2:	d502      	bpl.n	100157ba <_puts_r+0x4a>
100157b4:	6923      	ldr	r3, [r4, #16]
100157b6:	2b00      	cmp	r3, #0
100157b8:	d111      	bne.n	100157de <_puts_r+0x6e>
100157ba:	0021      	movs	r1, r4
100157bc:	0028      	movs	r0, r5
100157be:	f000 f9a3 	bl	10015b08 <__swsetup_r>
100157c2:	2800      	cmp	r0, #0
100157c4:	d00b      	beq.n	100157de <_puts_r+0x6e>
100157c6:	2001      	movs	r0, #1
100157c8:	4240      	negs	r0, r0
100157ca:	e02b      	b.n	10015824 <_puts_r+0xb4>
100157cc:	3b01      	subs	r3, #1
100157ce:	3601      	adds	r6, #1
100157d0:	60a3      	str	r3, [r4, #8]
100157d2:	2b00      	cmp	r3, #0
100157d4:	db08      	blt.n	100157e8 <_puts_r+0x78>
100157d6:	6823      	ldr	r3, [r4, #0]
100157d8:	1c5a      	adds	r2, r3, #1
100157da:	6022      	str	r2, [r4, #0]
100157dc:	7019      	strb	r1, [r3, #0]
100157de:	7831      	ldrb	r1, [r6, #0]
100157e0:	68a3      	ldr	r3, [r4, #8]
100157e2:	2900      	cmp	r1, #0
100157e4:	d1f2      	bne.n	100157cc <_puts_r+0x5c>
100157e6:	e00b      	b.n	10015800 <_puts_r+0x90>
100157e8:	69a2      	ldr	r2, [r4, #24]
100157ea:	4293      	cmp	r3, r2
100157ec:	db01      	blt.n	100157f2 <_puts_r+0x82>
100157ee:	290a      	cmp	r1, #10
100157f0:	d1f1      	bne.n	100157d6 <_puts_r+0x66>
100157f2:	0022      	movs	r2, r4
100157f4:	0028      	movs	r0, r5
100157f6:	f000 f92f 	bl	10015a58 <__swbuf_r>
100157fa:	1c43      	adds	r3, r0, #1
100157fc:	d1ef      	bne.n	100157de <_puts_r+0x6e>
100157fe:	e7e2      	b.n	100157c6 <_puts_r+0x56>
10015800:	3b01      	subs	r3, #1
10015802:	60a3      	str	r3, [r4, #8]
10015804:	2b00      	cmp	r3, #0
10015806:	da08      	bge.n	1001581a <_puts_r+0xaa>
10015808:	0022      	movs	r2, r4
1001580a:	310a      	adds	r1, #10
1001580c:	0028      	movs	r0, r5
1001580e:	f000 f923 	bl	10015a58 <__swbuf_r>
10015812:	1c43      	adds	r3, r0, #1
10015814:	d0d7      	beq.n	100157c6 <_puts_r+0x56>
10015816:	200a      	movs	r0, #10
10015818:	e004      	b.n	10015824 <_puts_r+0xb4>
1001581a:	200a      	movs	r0, #10
1001581c:	6823      	ldr	r3, [r4, #0]
1001581e:	1c5a      	adds	r2, r3, #1
10015820:	6022      	str	r2, [r4, #0]
10015822:	7018      	strb	r0, [r3, #0]
10015824:	bd70      	pop	{r4, r5, r6, pc}
10015826:	46c0      	nop			; (mov r8, r8)
10015828:	10017848 	.word	0x10017848
1001582c:	10017868 	.word	0x10017868
10015830:	10017888 	.word	0x10017888

10015834 <puts>:
10015834:	b510      	push	{r4, lr}
10015836:	4b03      	ldr	r3, [pc, #12]	; (10015844 <puts+0x10>)
10015838:	0001      	movs	r1, r0
1001583a:	6818      	ldr	r0, [r3, #0]
1001583c:	f7ff ff98 	bl	10015770 <_puts_r>
10015840:	bd10      	pop	{r4, pc}
10015842:	46c0      	nop			; (mov r8, r8)
10015844:	10017968 	.word	0x10017968

10015848 <rand>:
10015848:	4b15      	ldr	r3, [pc, #84]	; (100158a0 <rand+0x58>)
1001584a:	b510      	push	{r4, lr}
1001584c:	681c      	ldr	r4, [r3, #0]
1001584e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
10015850:	2b00      	cmp	r3, #0
10015852:	d115      	bne.n	10015880 <rand+0x38>
10015854:	2018      	movs	r0, #24
10015856:	f7ff fe97 	bl	10015588 <malloc>
1001585a:	4b12      	ldr	r3, [pc, #72]	; (100158a4 <rand+0x5c>)
1001585c:	63a0      	str	r0, [r4, #56]	; 0x38
1001585e:	8003      	strh	r3, [r0, #0]
10015860:	4b11      	ldr	r3, [pc, #68]	; (100158a8 <rand+0x60>)
10015862:	2201      	movs	r2, #1
10015864:	8043      	strh	r3, [r0, #2]
10015866:	4b11      	ldr	r3, [pc, #68]	; (100158ac <rand+0x64>)
10015868:	8083      	strh	r3, [r0, #4]
1001586a:	4b11      	ldr	r3, [pc, #68]	; (100158b0 <rand+0x68>)
1001586c:	80c3      	strh	r3, [r0, #6]
1001586e:	4b11      	ldr	r3, [pc, #68]	; (100158b4 <rand+0x6c>)
10015870:	8103      	strh	r3, [r0, #8]
10015872:	2305      	movs	r3, #5
10015874:	8143      	strh	r3, [r0, #10]
10015876:	3306      	adds	r3, #6
10015878:	8183      	strh	r3, [r0, #12]
1001587a:	2300      	movs	r3, #0
1001587c:	6102      	str	r2, [r0, #16]
1001587e:	6143      	str	r3, [r0, #20]
10015880:	6ba4      	ldr	r4, [r4, #56]	; 0x38
10015882:	4a0d      	ldr	r2, [pc, #52]	; (100158b8 <rand+0x70>)
10015884:	6920      	ldr	r0, [r4, #16]
10015886:	6961      	ldr	r1, [r4, #20]
10015888:	4b0c      	ldr	r3, [pc, #48]	; (100158bc <rand+0x74>)
1001588a:	f7fd f9f7 	bl	10012c7c <__aeabi_lmul>
1001588e:	2201      	movs	r2, #1
10015890:	2300      	movs	r3, #0
10015892:	1880      	adds	r0, r0, r2
10015894:	4159      	adcs	r1, r3
10015896:	6120      	str	r0, [r4, #16]
10015898:	6161      	str	r1, [r4, #20]
1001589a:	0048      	lsls	r0, r1, #1
1001589c:	0840      	lsrs	r0, r0, #1
1001589e:	bd10      	pop	{r4, pc}
100158a0:	10017968 	.word	0x10017968
100158a4:	0000330e 	.word	0x0000330e
100158a8:	ffffabcd 	.word	0xffffabcd
100158ac:	00001234 	.word	0x00001234
100158b0:	ffffe66d 	.word	0xffffe66d
100158b4:	ffffdeec 	.word	0xffffdeec
100158b8:	4c957f2d 	.word	0x4c957f2d
100158bc:	5851f42d 	.word	0x5851f42d

100158c0 <_sbrk_r>:
100158c0:	2300      	movs	r3, #0
100158c2:	b570      	push	{r4, r5, r6, lr}
100158c4:	4c06      	ldr	r4, [pc, #24]	; (100158e0 <_sbrk_r+0x20>)
100158c6:	0005      	movs	r5, r0
100158c8:	0008      	movs	r0, r1
100158ca:	6023      	str	r3, [r4, #0]
100158cc:	f7f2 fd96 	bl	100083fc <_sbrk>
100158d0:	1c43      	adds	r3, r0, #1
100158d2:	d103      	bne.n	100158dc <_sbrk_r+0x1c>
100158d4:	6823      	ldr	r3, [r4, #0]
100158d6:	2b00      	cmp	r3, #0
100158d8:	d000      	beq.n	100158dc <_sbrk_r+0x1c>
100158da:	602b      	str	r3, [r5, #0]
100158dc:	bd70      	pop	{r4, r5, r6, pc}
100158de:	46c0      	nop			; (mov r8, r8)
100158e0:	1001a880 	.word	0x1001a880

100158e4 <setbuf>:
100158e4:	424a      	negs	r2, r1
100158e6:	414a      	adcs	r2, r1
100158e8:	2380      	movs	r3, #128	; 0x80
100158ea:	b510      	push	{r4, lr}
100158ec:	0052      	lsls	r2, r2, #1
100158ee:	00db      	lsls	r3, r3, #3
100158f0:	f000 f802 	bl	100158f8 <setvbuf>
100158f4:	bd10      	pop	{r4, pc}
	...

100158f8 <setvbuf>:
100158f8:	b5f0      	push	{r4, r5, r6, r7, lr}
100158fa:	001d      	movs	r5, r3
100158fc:	4b51      	ldr	r3, [pc, #324]	; (10015a44 <setvbuf+0x14c>)
100158fe:	b085      	sub	sp, #20
10015900:	681e      	ldr	r6, [r3, #0]
10015902:	0004      	movs	r4, r0
10015904:	000f      	movs	r7, r1
10015906:	9200      	str	r2, [sp, #0]
10015908:	2e00      	cmp	r6, #0
1001590a:	d005      	beq.n	10015918 <setvbuf+0x20>
1001590c:	69b3      	ldr	r3, [r6, #24]
1001590e:	2b00      	cmp	r3, #0
10015910:	d102      	bne.n	10015918 <setvbuf+0x20>
10015912:	0030      	movs	r0, r6
10015914:	f000 fa62 	bl	10015ddc <__sinit>
10015918:	4b4b      	ldr	r3, [pc, #300]	; (10015a48 <setvbuf+0x150>)
1001591a:	429c      	cmp	r4, r3
1001591c:	d101      	bne.n	10015922 <setvbuf+0x2a>
1001591e:	6874      	ldr	r4, [r6, #4]
10015920:	e008      	b.n	10015934 <setvbuf+0x3c>
10015922:	4b4a      	ldr	r3, [pc, #296]	; (10015a4c <setvbuf+0x154>)
10015924:	429c      	cmp	r4, r3
10015926:	d101      	bne.n	1001592c <setvbuf+0x34>
10015928:	68b4      	ldr	r4, [r6, #8]
1001592a:	e003      	b.n	10015934 <setvbuf+0x3c>
1001592c:	4b48      	ldr	r3, [pc, #288]	; (10015a50 <setvbuf+0x158>)
1001592e:	429c      	cmp	r4, r3
10015930:	d100      	bne.n	10015934 <setvbuf+0x3c>
10015932:	68f4      	ldr	r4, [r6, #12]
10015934:	9b00      	ldr	r3, [sp, #0]
10015936:	2b02      	cmp	r3, #2
10015938:	d005      	beq.n	10015946 <setvbuf+0x4e>
1001593a:	2b01      	cmp	r3, #1
1001593c:	d900      	bls.n	10015940 <setvbuf+0x48>
1001593e:	e07c      	b.n	10015a3a <setvbuf+0x142>
10015940:	2d00      	cmp	r5, #0
10015942:	da00      	bge.n	10015946 <setvbuf+0x4e>
10015944:	e079      	b.n	10015a3a <setvbuf+0x142>
10015946:	0021      	movs	r1, r4
10015948:	0030      	movs	r0, r6
1001594a:	f000 f9d9 	bl	10015d00 <_fflush_r>
1001594e:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015950:	2900      	cmp	r1, #0
10015952:	d008      	beq.n	10015966 <setvbuf+0x6e>
10015954:	0023      	movs	r3, r4
10015956:	3344      	adds	r3, #68	; 0x44
10015958:	4299      	cmp	r1, r3
1001595a:	d002      	beq.n	10015962 <setvbuf+0x6a>
1001595c:	0030      	movs	r0, r6
1001595e:	f7ff fe3d 	bl	100155dc <_free_r>
10015962:	2300      	movs	r3, #0
10015964:	6363      	str	r3, [r4, #52]	; 0x34
10015966:	2300      	movs	r3, #0
10015968:	61a3      	str	r3, [r4, #24]
1001596a:	6063      	str	r3, [r4, #4]
1001596c:	89a3      	ldrh	r3, [r4, #12]
1001596e:	061b      	lsls	r3, r3, #24
10015970:	d503      	bpl.n	1001597a <setvbuf+0x82>
10015972:	6921      	ldr	r1, [r4, #16]
10015974:	0030      	movs	r0, r6
10015976:	f7ff fe31 	bl	100155dc <_free_r>
1001597a:	89a2      	ldrh	r2, [r4, #12]
1001597c:	4b35      	ldr	r3, [pc, #212]	; (10015a54 <setvbuf+0x15c>)
1001597e:	4013      	ands	r3, r2
10015980:	81a3      	strh	r3, [r4, #12]
10015982:	9b00      	ldr	r3, [sp, #0]
10015984:	2b02      	cmp	r3, #2
10015986:	d021      	beq.n	100159cc <setvbuf+0xd4>
10015988:	ab03      	add	r3, sp, #12
1001598a:	aa02      	add	r2, sp, #8
1001598c:	0021      	movs	r1, r4
1001598e:	0030      	movs	r0, r6
10015990:	f000 fab8 	bl	10015f04 <__swhatbuf_r>
10015994:	89a3      	ldrh	r3, [r4, #12]
10015996:	4318      	orrs	r0, r3
10015998:	81a0      	strh	r0, [r4, #12]
1001599a:	2d00      	cmp	r5, #0
1001599c:	d101      	bne.n	100159a2 <setvbuf+0xaa>
1001599e:	9d02      	ldr	r5, [sp, #8]
100159a0:	e001      	b.n	100159a6 <setvbuf+0xae>
100159a2:	2f00      	cmp	r7, #0
100159a4:	d125      	bne.n	100159f2 <setvbuf+0xfa>
100159a6:	0028      	movs	r0, r5
100159a8:	f7ff fdee 	bl	10015588 <malloc>
100159ac:	9501      	str	r5, [sp, #4]
100159ae:	1e07      	subs	r7, r0, #0
100159b0:	d11a      	bne.n	100159e8 <setvbuf+0xf0>
100159b2:	9b02      	ldr	r3, [sp, #8]
100159b4:	9301      	str	r3, [sp, #4]
100159b6:	42ab      	cmp	r3, r5
100159b8:	d102      	bne.n	100159c0 <setvbuf+0xc8>
100159ba:	2001      	movs	r0, #1
100159bc:	4240      	negs	r0, r0
100159be:	e006      	b.n	100159ce <setvbuf+0xd6>
100159c0:	9801      	ldr	r0, [sp, #4]
100159c2:	f7ff fde1 	bl	10015588 <malloc>
100159c6:	1e07      	subs	r7, r0, #0
100159c8:	d10e      	bne.n	100159e8 <setvbuf+0xf0>
100159ca:	e7f6      	b.n	100159ba <setvbuf+0xc2>
100159cc:	2000      	movs	r0, #0
100159ce:	2202      	movs	r2, #2
100159d0:	89a3      	ldrh	r3, [r4, #12]
100159d2:	4313      	orrs	r3, r2
100159d4:	81a3      	strh	r3, [r4, #12]
100159d6:	2300      	movs	r3, #0
100159d8:	60a3      	str	r3, [r4, #8]
100159da:	0023      	movs	r3, r4
100159dc:	3347      	adds	r3, #71	; 0x47
100159de:	6023      	str	r3, [r4, #0]
100159e0:	6123      	str	r3, [r4, #16]
100159e2:	2301      	movs	r3, #1
100159e4:	6163      	str	r3, [r4, #20]
100159e6:	e02a      	b.n	10015a3e <setvbuf+0x146>
100159e8:	2280      	movs	r2, #128	; 0x80
100159ea:	89a3      	ldrh	r3, [r4, #12]
100159ec:	9d01      	ldr	r5, [sp, #4]
100159ee:	4313      	orrs	r3, r2
100159f0:	81a3      	strh	r3, [r4, #12]
100159f2:	69b3      	ldr	r3, [r6, #24]
100159f4:	2b00      	cmp	r3, #0
100159f6:	d102      	bne.n	100159fe <setvbuf+0x106>
100159f8:	0030      	movs	r0, r6
100159fa:	f000 f9ef 	bl	10015ddc <__sinit>
100159fe:	9b00      	ldr	r3, [sp, #0]
10015a00:	2b01      	cmp	r3, #1
10015a02:	d103      	bne.n	10015a0c <setvbuf+0x114>
10015a04:	89a3      	ldrh	r3, [r4, #12]
10015a06:	9a00      	ldr	r2, [sp, #0]
10015a08:	431a      	orrs	r2, r3
10015a0a:	81a2      	strh	r2, [r4, #12]
10015a0c:	2308      	movs	r3, #8
10015a0e:	89a2      	ldrh	r2, [r4, #12]
10015a10:	6027      	str	r7, [r4, #0]
10015a12:	4013      	ands	r3, r2
10015a14:	6127      	str	r7, [r4, #16]
10015a16:	6165      	str	r5, [r4, #20]
10015a18:	1e18      	subs	r0, r3, #0
10015a1a:	d00c      	beq.n	10015a36 <setvbuf+0x13e>
10015a1c:	2301      	movs	r3, #1
10015a1e:	401a      	ands	r2, r3
10015a20:	2300      	movs	r3, #0
10015a22:	1e10      	subs	r0, r2, #0
10015a24:	4298      	cmp	r0, r3
10015a26:	d004      	beq.n	10015a32 <setvbuf+0x13a>
10015a28:	426d      	negs	r5, r5
10015a2a:	60a3      	str	r3, [r4, #8]
10015a2c:	61a5      	str	r5, [r4, #24]
10015a2e:	0018      	movs	r0, r3
10015a30:	e005      	b.n	10015a3e <setvbuf+0x146>
10015a32:	60a5      	str	r5, [r4, #8]
10015a34:	e003      	b.n	10015a3e <setvbuf+0x146>
10015a36:	60a3      	str	r3, [r4, #8]
10015a38:	e001      	b.n	10015a3e <setvbuf+0x146>
10015a3a:	2001      	movs	r0, #1
10015a3c:	4240      	negs	r0, r0
10015a3e:	b005      	add	sp, #20
10015a40:	bdf0      	pop	{r4, r5, r6, r7, pc}
10015a42:	46c0      	nop			; (mov r8, r8)
10015a44:	10017968 	.word	0x10017968
10015a48:	10017848 	.word	0x10017848
10015a4c:	10017868 	.word	0x10017868
10015a50:	10017888 	.word	0x10017888
10015a54:	fffff35c 	.word	0xfffff35c

10015a58 <__swbuf_r>:
10015a58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015a5a:	0005      	movs	r5, r0
10015a5c:	000f      	movs	r7, r1
10015a5e:	0014      	movs	r4, r2
10015a60:	2800      	cmp	r0, #0
10015a62:	d004      	beq.n	10015a6e <__swbuf_r+0x16>
10015a64:	6983      	ldr	r3, [r0, #24]
10015a66:	2b00      	cmp	r3, #0
10015a68:	d101      	bne.n	10015a6e <__swbuf_r+0x16>
10015a6a:	f000 f9b7 	bl	10015ddc <__sinit>
10015a6e:	4b23      	ldr	r3, [pc, #140]	; (10015afc <__swbuf_r+0xa4>)
10015a70:	429c      	cmp	r4, r3
10015a72:	d101      	bne.n	10015a78 <__swbuf_r+0x20>
10015a74:	686c      	ldr	r4, [r5, #4]
10015a76:	e008      	b.n	10015a8a <__swbuf_r+0x32>
10015a78:	4b21      	ldr	r3, [pc, #132]	; (10015b00 <__swbuf_r+0xa8>)
10015a7a:	429c      	cmp	r4, r3
10015a7c:	d101      	bne.n	10015a82 <__swbuf_r+0x2a>
10015a7e:	68ac      	ldr	r4, [r5, #8]
10015a80:	e003      	b.n	10015a8a <__swbuf_r+0x32>
10015a82:	4b20      	ldr	r3, [pc, #128]	; (10015b04 <__swbuf_r+0xac>)
10015a84:	429c      	cmp	r4, r3
10015a86:	d100      	bne.n	10015a8a <__swbuf_r+0x32>
10015a88:	68ec      	ldr	r4, [r5, #12]
10015a8a:	69a3      	ldr	r3, [r4, #24]
10015a8c:	60a3      	str	r3, [r4, #8]
10015a8e:	89a3      	ldrh	r3, [r4, #12]
10015a90:	071b      	lsls	r3, r3, #28
10015a92:	d50a      	bpl.n	10015aaa <__swbuf_r+0x52>
10015a94:	6923      	ldr	r3, [r4, #16]
10015a96:	2b00      	cmp	r3, #0
10015a98:	d007      	beq.n	10015aaa <__swbuf_r+0x52>
10015a9a:	6823      	ldr	r3, [r4, #0]
10015a9c:	6922      	ldr	r2, [r4, #16]
10015a9e:	b2fe      	uxtb	r6, r7
10015aa0:	1a98      	subs	r0, r3, r2
10015aa2:	6963      	ldr	r3, [r4, #20]
10015aa4:	4298      	cmp	r0, r3
10015aa6:	db0f      	blt.n	10015ac8 <__swbuf_r+0x70>
10015aa8:	e008      	b.n	10015abc <__swbuf_r+0x64>
10015aaa:	0021      	movs	r1, r4
10015aac:	0028      	movs	r0, r5
10015aae:	f000 f82b 	bl	10015b08 <__swsetup_r>
10015ab2:	2800      	cmp	r0, #0
10015ab4:	d0f1      	beq.n	10015a9a <__swbuf_r+0x42>
10015ab6:	2001      	movs	r0, #1
10015ab8:	4240      	negs	r0, r0
10015aba:	e01d      	b.n	10015af8 <__swbuf_r+0xa0>
10015abc:	0021      	movs	r1, r4
10015abe:	0028      	movs	r0, r5
10015ac0:	f000 f91e 	bl	10015d00 <_fflush_r>
10015ac4:	2800      	cmp	r0, #0
10015ac6:	d1f6      	bne.n	10015ab6 <__swbuf_r+0x5e>
10015ac8:	68a3      	ldr	r3, [r4, #8]
10015aca:	3001      	adds	r0, #1
10015acc:	3b01      	subs	r3, #1
10015ace:	60a3      	str	r3, [r4, #8]
10015ad0:	6823      	ldr	r3, [r4, #0]
10015ad2:	1c5a      	adds	r2, r3, #1
10015ad4:	6022      	str	r2, [r4, #0]
10015ad6:	701f      	strb	r7, [r3, #0]
10015ad8:	6963      	ldr	r3, [r4, #20]
10015ada:	4298      	cmp	r0, r3
10015adc:	d005      	beq.n	10015aea <__swbuf_r+0x92>
10015ade:	89a3      	ldrh	r3, [r4, #12]
10015ae0:	0030      	movs	r0, r6
10015ae2:	07db      	lsls	r3, r3, #31
10015ae4:	d508      	bpl.n	10015af8 <__swbuf_r+0xa0>
10015ae6:	2e0a      	cmp	r6, #10
10015ae8:	d106      	bne.n	10015af8 <__swbuf_r+0xa0>
10015aea:	0021      	movs	r1, r4
10015aec:	0028      	movs	r0, r5
10015aee:	f000 f907 	bl	10015d00 <_fflush_r>
10015af2:	2800      	cmp	r0, #0
10015af4:	d1df      	bne.n	10015ab6 <__swbuf_r+0x5e>
10015af6:	0030      	movs	r0, r6
10015af8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015afa:	46c0      	nop			; (mov r8, r8)
10015afc:	10017848 	.word	0x10017848
10015b00:	10017868 	.word	0x10017868
10015b04:	10017888 	.word	0x10017888

10015b08 <__swsetup_r>:
10015b08:	4b36      	ldr	r3, [pc, #216]	; (10015be4 <__swsetup_r+0xdc>)
10015b0a:	b570      	push	{r4, r5, r6, lr}
10015b0c:	681d      	ldr	r5, [r3, #0]
10015b0e:	0006      	movs	r6, r0
10015b10:	000c      	movs	r4, r1
10015b12:	2d00      	cmp	r5, #0
10015b14:	d005      	beq.n	10015b22 <__swsetup_r+0x1a>
10015b16:	69ab      	ldr	r3, [r5, #24]
10015b18:	2b00      	cmp	r3, #0
10015b1a:	d102      	bne.n	10015b22 <__swsetup_r+0x1a>
10015b1c:	0028      	movs	r0, r5
10015b1e:	f000 f95d 	bl	10015ddc <__sinit>
10015b22:	4b31      	ldr	r3, [pc, #196]	; (10015be8 <__swsetup_r+0xe0>)
10015b24:	429c      	cmp	r4, r3
10015b26:	d101      	bne.n	10015b2c <__swsetup_r+0x24>
10015b28:	686c      	ldr	r4, [r5, #4]
10015b2a:	e008      	b.n	10015b3e <__swsetup_r+0x36>
10015b2c:	4b2f      	ldr	r3, [pc, #188]	; (10015bec <__swsetup_r+0xe4>)
10015b2e:	429c      	cmp	r4, r3
10015b30:	d101      	bne.n	10015b36 <__swsetup_r+0x2e>
10015b32:	68ac      	ldr	r4, [r5, #8]
10015b34:	e003      	b.n	10015b3e <__swsetup_r+0x36>
10015b36:	4b2e      	ldr	r3, [pc, #184]	; (10015bf0 <__swsetup_r+0xe8>)
10015b38:	429c      	cmp	r4, r3
10015b3a:	d100      	bne.n	10015b3e <__swsetup_r+0x36>
10015b3c:	68ec      	ldr	r4, [r5, #12]
10015b3e:	220c      	movs	r2, #12
10015b40:	5ea3      	ldrsh	r3, [r4, r2]
10015b42:	b29a      	uxth	r2, r3
10015b44:	0711      	lsls	r1, r2, #28
10015b46:	d423      	bmi.n	10015b90 <__swsetup_r+0x88>
10015b48:	06d1      	lsls	r1, r2, #27
10015b4a:	d407      	bmi.n	10015b5c <__swsetup_r+0x54>
10015b4c:	2209      	movs	r2, #9
10015b4e:	2001      	movs	r0, #1
10015b50:	6032      	str	r2, [r6, #0]
10015b52:	3237      	adds	r2, #55	; 0x37
10015b54:	4313      	orrs	r3, r2
10015b56:	81a3      	strh	r3, [r4, #12]
10015b58:	4240      	negs	r0, r0
10015b5a:	e042      	b.n	10015be2 <__swsetup_r+0xda>
10015b5c:	0753      	lsls	r3, r2, #29
10015b5e:	d513      	bpl.n	10015b88 <__swsetup_r+0x80>
10015b60:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015b62:	2900      	cmp	r1, #0
10015b64:	d008      	beq.n	10015b78 <__swsetup_r+0x70>
10015b66:	0023      	movs	r3, r4
10015b68:	3344      	adds	r3, #68	; 0x44
10015b6a:	4299      	cmp	r1, r3
10015b6c:	d002      	beq.n	10015b74 <__swsetup_r+0x6c>
10015b6e:	0030      	movs	r0, r6
10015b70:	f7ff fd34 	bl	100155dc <_free_r>
10015b74:	2300      	movs	r3, #0
10015b76:	6363      	str	r3, [r4, #52]	; 0x34
10015b78:	2224      	movs	r2, #36	; 0x24
10015b7a:	89a3      	ldrh	r3, [r4, #12]
10015b7c:	4393      	bics	r3, r2
10015b7e:	81a3      	strh	r3, [r4, #12]
10015b80:	2300      	movs	r3, #0
10015b82:	6063      	str	r3, [r4, #4]
10015b84:	6923      	ldr	r3, [r4, #16]
10015b86:	6023      	str	r3, [r4, #0]
10015b88:	2208      	movs	r2, #8
10015b8a:	89a3      	ldrh	r3, [r4, #12]
10015b8c:	4313      	orrs	r3, r2
10015b8e:	81a3      	strh	r3, [r4, #12]
10015b90:	6923      	ldr	r3, [r4, #16]
10015b92:	2b00      	cmp	r3, #0
10015b94:	d10b      	bne.n	10015bae <__swsetup_r+0xa6>
10015b96:	23a0      	movs	r3, #160	; 0xa0
10015b98:	89a2      	ldrh	r2, [r4, #12]
10015b9a:	009b      	lsls	r3, r3, #2
10015b9c:	4013      	ands	r3, r2
10015b9e:	2280      	movs	r2, #128	; 0x80
10015ba0:	0092      	lsls	r2, r2, #2
10015ba2:	4293      	cmp	r3, r2
10015ba4:	d003      	beq.n	10015bae <__swsetup_r+0xa6>
10015ba6:	0021      	movs	r1, r4
10015ba8:	0030      	movs	r0, r6
10015baa:	f000 f9d1 	bl	10015f50 <__smakebuf_r>
10015bae:	2301      	movs	r3, #1
10015bb0:	89a2      	ldrh	r2, [r4, #12]
10015bb2:	4013      	ands	r3, r2
10015bb4:	d005      	beq.n	10015bc2 <__swsetup_r+0xba>
10015bb6:	2300      	movs	r3, #0
10015bb8:	60a3      	str	r3, [r4, #8]
10015bba:	6963      	ldr	r3, [r4, #20]
10015bbc:	425b      	negs	r3, r3
10015bbe:	61a3      	str	r3, [r4, #24]
10015bc0:	e003      	b.n	10015bca <__swsetup_r+0xc2>
10015bc2:	0792      	lsls	r2, r2, #30
10015bc4:	d400      	bmi.n	10015bc8 <__swsetup_r+0xc0>
10015bc6:	6963      	ldr	r3, [r4, #20]
10015bc8:	60a3      	str	r3, [r4, #8]
10015bca:	2000      	movs	r0, #0
10015bcc:	6923      	ldr	r3, [r4, #16]
10015bce:	4283      	cmp	r3, r0
10015bd0:	d107      	bne.n	10015be2 <__swsetup_r+0xda>
10015bd2:	220c      	movs	r2, #12
10015bd4:	5ea3      	ldrsh	r3, [r4, r2]
10015bd6:	061a      	lsls	r2, r3, #24
10015bd8:	d503      	bpl.n	10015be2 <__swsetup_r+0xda>
10015bda:	2240      	movs	r2, #64	; 0x40
10015bdc:	4313      	orrs	r3, r2
10015bde:	81a3      	strh	r3, [r4, #12]
10015be0:	3801      	subs	r0, #1
10015be2:	bd70      	pop	{r4, r5, r6, pc}
10015be4:	10017968 	.word	0x10017968
10015be8:	10017848 	.word	0x10017848
10015bec:	10017868 	.word	0x10017868
10015bf0:	10017888 	.word	0x10017888

10015bf4 <__sflush_r>:
10015bf4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015bf6:	898a      	ldrh	r2, [r1, #12]
10015bf8:	0005      	movs	r5, r0
10015bfa:	000c      	movs	r4, r1
10015bfc:	0713      	lsls	r3, r2, #28
10015bfe:	d45a      	bmi.n	10015cb6 <__sflush_r+0xc2>
10015c00:	684b      	ldr	r3, [r1, #4]
10015c02:	2b00      	cmp	r3, #0
10015c04:	dc02      	bgt.n	10015c0c <__sflush_r+0x18>
10015c06:	6c0b      	ldr	r3, [r1, #64]	; 0x40
10015c08:	2b00      	cmp	r3, #0
10015c0a:	dd19      	ble.n	10015c40 <__sflush_r+0x4c>
10015c0c:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015c0e:	2f00      	cmp	r7, #0
10015c10:	d016      	beq.n	10015c40 <__sflush_r+0x4c>
10015c12:	2300      	movs	r3, #0
10015c14:	682e      	ldr	r6, [r5, #0]
10015c16:	602b      	str	r3, [r5, #0]
10015c18:	2380      	movs	r3, #128	; 0x80
10015c1a:	015b      	lsls	r3, r3, #5
10015c1c:	401a      	ands	r2, r3
10015c1e:	d001      	beq.n	10015c24 <__sflush_r+0x30>
10015c20:	6d60      	ldr	r0, [r4, #84]	; 0x54
10015c22:	e014      	b.n	10015c4e <__sflush_r+0x5a>
10015c24:	2301      	movs	r3, #1
10015c26:	6a21      	ldr	r1, [r4, #32]
10015c28:	0028      	movs	r0, r5
10015c2a:	47b8      	blx	r7
10015c2c:	1c43      	adds	r3, r0, #1
10015c2e:	d10e      	bne.n	10015c4e <__sflush_r+0x5a>
10015c30:	682b      	ldr	r3, [r5, #0]
10015c32:	2b00      	cmp	r3, #0
10015c34:	d00b      	beq.n	10015c4e <__sflush_r+0x5a>
10015c36:	2b1d      	cmp	r3, #29
10015c38:	d001      	beq.n	10015c3e <__sflush_r+0x4a>
10015c3a:	2b16      	cmp	r3, #22
10015c3c:	d102      	bne.n	10015c44 <__sflush_r+0x50>
10015c3e:	602e      	str	r6, [r5, #0]
10015c40:	2000      	movs	r0, #0
10015c42:	e05a      	b.n	10015cfa <__sflush_r+0x106>
10015c44:	2240      	movs	r2, #64	; 0x40
10015c46:	89a3      	ldrh	r3, [r4, #12]
10015c48:	4313      	orrs	r3, r2
10015c4a:	81a3      	strh	r3, [r4, #12]
10015c4c:	e055      	b.n	10015cfa <__sflush_r+0x106>
10015c4e:	89a3      	ldrh	r3, [r4, #12]
10015c50:	075b      	lsls	r3, r3, #29
10015c52:	d506      	bpl.n	10015c62 <__sflush_r+0x6e>
10015c54:	6863      	ldr	r3, [r4, #4]
10015c56:	1ac0      	subs	r0, r0, r3
10015c58:	6b63      	ldr	r3, [r4, #52]	; 0x34
10015c5a:	2b00      	cmp	r3, #0
10015c5c:	d001      	beq.n	10015c62 <__sflush_r+0x6e>
10015c5e:	6c23      	ldr	r3, [r4, #64]	; 0x40
10015c60:	1ac0      	subs	r0, r0, r3
10015c62:	2300      	movs	r3, #0
10015c64:	0002      	movs	r2, r0
10015c66:	6a21      	ldr	r1, [r4, #32]
10015c68:	0028      	movs	r0, r5
10015c6a:	6ae7      	ldr	r7, [r4, #44]	; 0x2c
10015c6c:	47b8      	blx	r7
10015c6e:	89a3      	ldrh	r3, [r4, #12]
10015c70:	1c42      	adds	r2, r0, #1
10015c72:	d106      	bne.n	10015c82 <__sflush_r+0x8e>
10015c74:	6829      	ldr	r1, [r5, #0]
10015c76:	291d      	cmp	r1, #29
10015c78:	d83a      	bhi.n	10015cf0 <__sflush_r+0xfc>
10015c7a:	4a20      	ldr	r2, [pc, #128]	; (10015cfc <__sflush_r+0x108>)
10015c7c:	40ca      	lsrs	r2, r1
10015c7e:	07d2      	lsls	r2, r2, #31
10015c80:	d536      	bpl.n	10015cf0 <__sflush_r+0xfc>
10015c82:	2200      	movs	r2, #0
10015c84:	6062      	str	r2, [r4, #4]
10015c86:	6922      	ldr	r2, [r4, #16]
10015c88:	6022      	str	r2, [r4, #0]
10015c8a:	04db      	lsls	r3, r3, #19
10015c8c:	d505      	bpl.n	10015c9a <__sflush_r+0xa6>
10015c8e:	1c43      	adds	r3, r0, #1
10015c90:	d102      	bne.n	10015c98 <__sflush_r+0xa4>
10015c92:	682b      	ldr	r3, [r5, #0]
10015c94:	2b00      	cmp	r3, #0
10015c96:	d100      	bne.n	10015c9a <__sflush_r+0xa6>
10015c98:	6560      	str	r0, [r4, #84]	; 0x54
10015c9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
10015c9c:	602e      	str	r6, [r5, #0]
10015c9e:	2900      	cmp	r1, #0
10015ca0:	d0ce      	beq.n	10015c40 <__sflush_r+0x4c>
10015ca2:	0023      	movs	r3, r4
10015ca4:	3344      	adds	r3, #68	; 0x44
10015ca6:	4299      	cmp	r1, r3
10015ca8:	d002      	beq.n	10015cb0 <__sflush_r+0xbc>
10015caa:	0028      	movs	r0, r5
10015cac:	f7ff fc96 	bl	100155dc <_free_r>
10015cb0:	2000      	movs	r0, #0
10015cb2:	6360      	str	r0, [r4, #52]	; 0x34
10015cb4:	e021      	b.n	10015cfa <__sflush_r+0x106>
10015cb6:	690f      	ldr	r7, [r1, #16]
10015cb8:	2f00      	cmp	r7, #0
10015cba:	d0c1      	beq.n	10015c40 <__sflush_r+0x4c>
10015cbc:	680b      	ldr	r3, [r1, #0]
10015cbe:	600f      	str	r7, [r1, #0]
10015cc0:	1bdb      	subs	r3, r3, r7
10015cc2:	9301      	str	r3, [sp, #4]
10015cc4:	2300      	movs	r3, #0
10015cc6:	0792      	lsls	r2, r2, #30
10015cc8:	d100      	bne.n	10015ccc <__sflush_r+0xd8>
10015cca:	694b      	ldr	r3, [r1, #20]
10015ccc:	60a3      	str	r3, [r4, #8]
10015cce:	e003      	b.n	10015cd8 <__sflush_r+0xe4>
10015cd0:	9b01      	ldr	r3, [sp, #4]
10015cd2:	183f      	adds	r7, r7, r0
10015cd4:	1a1b      	subs	r3, r3, r0
10015cd6:	9301      	str	r3, [sp, #4]
10015cd8:	9b01      	ldr	r3, [sp, #4]
10015cda:	2b00      	cmp	r3, #0
10015cdc:	ddb0      	ble.n	10015c40 <__sflush_r+0x4c>
10015cde:	9b01      	ldr	r3, [sp, #4]
10015ce0:	003a      	movs	r2, r7
10015ce2:	6a21      	ldr	r1, [r4, #32]
10015ce4:	0028      	movs	r0, r5
10015ce6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
10015ce8:	47b0      	blx	r6
10015cea:	2800      	cmp	r0, #0
10015cec:	dcf0      	bgt.n	10015cd0 <__sflush_r+0xdc>
10015cee:	89a3      	ldrh	r3, [r4, #12]
10015cf0:	2240      	movs	r2, #64	; 0x40
10015cf2:	2001      	movs	r0, #1
10015cf4:	4313      	orrs	r3, r2
10015cf6:	81a3      	strh	r3, [r4, #12]
10015cf8:	4240      	negs	r0, r0
10015cfa:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
10015cfc:	20400001 	.word	0x20400001

10015d00 <_fflush_r>:
10015d00:	690b      	ldr	r3, [r1, #16]
10015d02:	b570      	push	{r4, r5, r6, lr}
10015d04:	0005      	movs	r5, r0
10015d06:	000c      	movs	r4, r1
10015d08:	2b00      	cmp	r3, #0
10015d0a:	d101      	bne.n	10015d10 <_fflush_r+0x10>
10015d0c:	2000      	movs	r0, #0
10015d0e:	e01c      	b.n	10015d4a <_fflush_r+0x4a>
10015d10:	2800      	cmp	r0, #0
10015d12:	d004      	beq.n	10015d1e <_fflush_r+0x1e>
10015d14:	6983      	ldr	r3, [r0, #24]
10015d16:	2b00      	cmp	r3, #0
10015d18:	d101      	bne.n	10015d1e <_fflush_r+0x1e>
10015d1a:	f000 f85f 	bl	10015ddc <__sinit>
10015d1e:	4b0b      	ldr	r3, [pc, #44]	; (10015d4c <_fflush_r+0x4c>)
10015d20:	429c      	cmp	r4, r3
10015d22:	d101      	bne.n	10015d28 <_fflush_r+0x28>
10015d24:	686c      	ldr	r4, [r5, #4]
10015d26:	e008      	b.n	10015d3a <_fflush_r+0x3a>
10015d28:	4b09      	ldr	r3, [pc, #36]	; (10015d50 <_fflush_r+0x50>)
10015d2a:	429c      	cmp	r4, r3
10015d2c:	d101      	bne.n	10015d32 <_fflush_r+0x32>
10015d2e:	68ac      	ldr	r4, [r5, #8]
10015d30:	e003      	b.n	10015d3a <_fflush_r+0x3a>
10015d32:	4b08      	ldr	r3, [pc, #32]	; (10015d54 <_fflush_r+0x54>)
10015d34:	429c      	cmp	r4, r3
10015d36:	d100      	bne.n	10015d3a <_fflush_r+0x3a>
10015d38:	68ec      	ldr	r4, [r5, #12]
10015d3a:	220c      	movs	r2, #12
10015d3c:	5ea3      	ldrsh	r3, [r4, r2]
10015d3e:	2b00      	cmp	r3, #0
10015d40:	d0e4      	beq.n	10015d0c <_fflush_r+0xc>
10015d42:	0021      	movs	r1, r4
10015d44:	0028      	movs	r0, r5
10015d46:	f7ff ff55 	bl	10015bf4 <__sflush_r>
10015d4a:	bd70      	pop	{r4, r5, r6, pc}
10015d4c:	10017848 	.word	0x10017848
10015d50:	10017868 	.word	0x10017868
10015d54:	10017888 	.word	0x10017888

10015d58 <_cleanup_r>:
10015d58:	b510      	push	{r4, lr}
10015d5a:	4902      	ldr	r1, [pc, #8]	; (10015d64 <_cleanup_r+0xc>)
10015d5c:	f000 f8b0 	bl	10015ec0 <_fwalk_reent>
10015d60:	bd10      	pop	{r4, pc}
10015d62:	46c0      	nop			; (mov r8, r8)
10015d64:	10015d01 	.word	0x10015d01

10015d68 <std.isra.0>:
10015d68:	2300      	movs	r3, #0
10015d6a:	b510      	push	{r4, lr}
10015d6c:	0004      	movs	r4, r0
10015d6e:	6003      	str	r3, [r0, #0]
10015d70:	6043      	str	r3, [r0, #4]
10015d72:	6083      	str	r3, [r0, #8]
10015d74:	8181      	strh	r1, [r0, #12]
10015d76:	6643      	str	r3, [r0, #100]	; 0x64
10015d78:	81c2      	strh	r2, [r0, #14]
10015d7a:	6103      	str	r3, [r0, #16]
10015d7c:	6143      	str	r3, [r0, #20]
10015d7e:	6183      	str	r3, [r0, #24]
10015d80:	0019      	movs	r1, r3
10015d82:	2208      	movs	r2, #8
10015d84:	305c      	adds	r0, #92	; 0x5c
10015d86:	f7ff fc21 	bl	100155cc <memset>
10015d8a:	4b05      	ldr	r3, [pc, #20]	; (10015da0 <std.isra.0+0x38>)
10015d8c:	6224      	str	r4, [r4, #32]
10015d8e:	6263      	str	r3, [r4, #36]	; 0x24
10015d90:	4b04      	ldr	r3, [pc, #16]	; (10015da4 <std.isra.0+0x3c>)
10015d92:	62a3      	str	r3, [r4, #40]	; 0x28
10015d94:	4b04      	ldr	r3, [pc, #16]	; (10015da8 <std.isra.0+0x40>)
10015d96:	62e3      	str	r3, [r4, #44]	; 0x2c
10015d98:	4b04      	ldr	r3, [pc, #16]	; (10015dac <std.isra.0+0x44>)
10015d9a:	6323      	str	r3, [r4, #48]	; 0x30
10015d9c:	bd10      	pop	{r4, pc}
10015d9e:	46c0      	nop			; (mov r8, r8)
10015da0:	100165e1 	.word	0x100165e1
10015da4:	10016609 	.word	0x10016609
10015da8:	10016641 	.word	0x10016641
10015dac:	1001666d 	.word	0x1001666d

10015db0 <__sfmoreglue>:
10015db0:	b570      	push	{r4, r5, r6, lr}
10015db2:	2568      	movs	r5, #104	; 0x68
10015db4:	1e4b      	subs	r3, r1, #1
10015db6:	435d      	muls	r5, r3
10015db8:	000e      	movs	r6, r1
10015dba:	0029      	movs	r1, r5
10015dbc:	3174      	adds	r1, #116	; 0x74
10015dbe:	f7ff fc53 	bl	10015668 <_malloc_r>
10015dc2:	1e04      	subs	r4, r0, #0
10015dc4:	d008      	beq.n	10015dd8 <__sfmoreglue+0x28>
10015dc6:	2100      	movs	r1, #0
10015dc8:	002a      	movs	r2, r5
10015dca:	6001      	str	r1, [r0, #0]
10015dcc:	6046      	str	r6, [r0, #4]
10015dce:	300c      	adds	r0, #12
10015dd0:	60a0      	str	r0, [r4, #8]
10015dd2:	3268      	adds	r2, #104	; 0x68
10015dd4:	f7ff fbfa 	bl	100155cc <memset>
10015dd8:	0020      	movs	r0, r4
10015dda:	bd70      	pop	{r4, r5, r6, pc}

10015ddc <__sinit>:
10015ddc:	6983      	ldr	r3, [r0, #24]
10015dde:	b513      	push	{r0, r1, r4, lr}
10015de0:	0004      	movs	r4, r0
10015de2:	2b00      	cmp	r3, #0
10015de4:	d128      	bne.n	10015e38 <__sinit+0x5c>
10015de6:	6483      	str	r3, [r0, #72]	; 0x48
10015de8:	64c3      	str	r3, [r0, #76]	; 0x4c
10015dea:	6503      	str	r3, [r0, #80]	; 0x50
10015dec:	4b13      	ldr	r3, [pc, #76]	; (10015e3c <__sinit+0x60>)
10015dee:	4a14      	ldr	r2, [pc, #80]	; (10015e40 <__sinit+0x64>)
10015df0:	681b      	ldr	r3, [r3, #0]
10015df2:	6282      	str	r2, [r0, #40]	; 0x28
10015df4:	9301      	str	r3, [sp, #4]
10015df6:	4298      	cmp	r0, r3
10015df8:	d101      	bne.n	10015dfe <__sinit+0x22>
10015dfa:	2301      	movs	r3, #1
10015dfc:	6183      	str	r3, [r0, #24]
10015dfe:	0020      	movs	r0, r4
10015e00:	f000 f820 	bl	10015e44 <__sfp>
10015e04:	6060      	str	r0, [r4, #4]
10015e06:	0020      	movs	r0, r4
10015e08:	f000 f81c 	bl	10015e44 <__sfp>
10015e0c:	60a0      	str	r0, [r4, #8]
10015e0e:	0020      	movs	r0, r4
10015e10:	f000 f818 	bl	10015e44 <__sfp>
10015e14:	2200      	movs	r2, #0
10015e16:	60e0      	str	r0, [r4, #12]
10015e18:	2104      	movs	r1, #4
10015e1a:	6860      	ldr	r0, [r4, #4]
10015e1c:	f7ff ffa4 	bl	10015d68 <std.isra.0>
10015e20:	2201      	movs	r2, #1
10015e22:	2109      	movs	r1, #9
10015e24:	68a0      	ldr	r0, [r4, #8]
10015e26:	f7ff ff9f 	bl	10015d68 <std.isra.0>
10015e2a:	2202      	movs	r2, #2
10015e2c:	2112      	movs	r1, #18
10015e2e:	68e0      	ldr	r0, [r4, #12]
10015e30:	f7ff ff9a 	bl	10015d68 <std.isra.0>
10015e34:	2301      	movs	r3, #1
10015e36:	61a3      	str	r3, [r4, #24]
10015e38:	bd13      	pop	{r0, r1, r4, pc}
10015e3a:	46c0      	nop			; (mov r8, r8)
10015e3c:	10017844 	.word	0x10017844
10015e40:	10015d59 	.word	0x10015d59

10015e44 <__sfp>:
10015e44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015e46:	4b1d      	ldr	r3, [pc, #116]	; (10015ebc <__sfp+0x78>)
10015e48:	0006      	movs	r6, r0
10015e4a:	681d      	ldr	r5, [r3, #0]
10015e4c:	69ab      	ldr	r3, [r5, #24]
10015e4e:	2b00      	cmp	r3, #0
10015e50:	d102      	bne.n	10015e58 <__sfp+0x14>
10015e52:	0028      	movs	r0, r5
10015e54:	f7ff ffc2 	bl	10015ddc <__sinit>
10015e58:	3548      	adds	r5, #72	; 0x48
10015e5a:	68ac      	ldr	r4, [r5, #8]
10015e5c:	686b      	ldr	r3, [r5, #4]
10015e5e:	3b01      	subs	r3, #1
10015e60:	d405      	bmi.n	10015e6e <__sfp+0x2a>
10015e62:	220c      	movs	r2, #12
10015e64:	5ea7      	ldrsh	r7, [r4, r2]
10015e66:	2f00      	cmp	r7, #0
10015e68:	d010      	beq.n	10015e8c <__sfp+0x48>
10015e6a:	3468      	adds	r4, #104	; 0x68
10015e6c:	e7f7      	b.n	10015e5e <__sfp+0x1a>
10015e6e:	682b      	ldr	r3, [r5, #0]
10015e70:	2b00      	cmp	r3, #0
10015e72:	d001      	beq.n	10015e78 <__sfp+0x34>
10015e74:	682d      	ldr	r5, [r5, #0]
10015e76:	e7f0      	b.n	10015e5a <__sfp+0x16>
10015e78:	2104      	movs	r1, #4
10015e7a:	0030      	movs	r0, r6
10015e7c:	f7ff ff98 	bl	10015db0 <__sfmoreglue>
10015e80:	6028      	str	r0, [r5, #0]
10015e82:	2800      	cmp	r0, #0
10015e84:	d1f6      	bne.n	10015e74 <__sfp+0x30>
10015e86:	230c      	movs	r3, #12
10015e88:	6033      	str	r3, [r6, #0]
10015e8a:	e016      	b.n	10015eba <__sfp+0x76>
10015e8c:	2301      	movs	r3, #1
10015e8e:	0020      	movs	r0, r4
10015e90:	425b      	negs	r3, r3
10015e92:	81e3      	strh	r3, [r4, #14]
10015e94:	3302      	adds	r3, #2
10015e96:	81a3      	strh	r3, [r4, #12]
10015e98:	6667      	str	r7, [r4, #100]	; 0x64
10015e9a:	6027      	str	r7, [r4, #0]
10015e9c:	60a7      	str	r7, [r4, #8]
10015e9e:	6067      	str	r7, [r4, #4]
10015ea0:	6127      	str	r7, [r4, #16]
10015ea2:	6167      	str	r7, [r4, #20]
10015ea4:	61a7      	str	r7, [r4, #24]
10015ea6:	305c      	adds	r0, #92	; 0x5c
10015ea8:	2208      	movs	r2, #8
10015eaa:	0039      	movs	r1, r7
10015eac:	f7ff fb8e 	bl	100155cc <memset>
10015eb0:	0020      	movs	r0, r4
10015eb2:	6367      	str	r7, [r4, #52]	; 0x34
10015eb4:	63a7      	str	r7, [r4, #56]	; 0x38
10015eb6:	64a7      	str	r7, [r4, #72]	; 0x48
10015eb8:	64e7      	str	r7, [r4, #76]	; 0x4c
10015eba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
10015ebc:	10017844 	.word	0x10017844

10015ec0 <_fwalk_reent>:
10015ec0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015ec2:	0004      	movs	r4, r0
10015ec4:	0007      	movs	r7, r0
10015ec6:	2600      	movs	r6, #0
10015ec8:	9101      	str	r1, [sp, #4]
10015eca:	3448      	adds	r4, #72	; 0x48
10015ecc:	2c00      	cmp	r4, #0
10015ece:	d016      	beq.n	10015efe <_fwalk_reent+0x3e>
10015ed0:	6863      	ldr	r3, [r4, #4]
10015ed2:	68a5      	ldr	r5, [r4, #8]
10015ed4:	9300      	str	r3, [sp, #0]
10015ed6:	9b00      	ldr	r3, [sp, #0]
10015ed8:	3b01      	subs	r3, #1
10015eda:	9300      	str	r3, [sp, #0]
10015edc:	d40d      	bmi.n	10015efa <_fwalk_reent+0x3a>
10015ede:	89ab      	ldrh	r3, [r5, #12]
10015ee0:	2b01      	cmp	r3, #1
10015ee2:	d908      	bls.n	10015ef6 <_fwalk_reent+0x36>
10015ee4:	220e      	movs	r2, #14
10015ee6:	5eab      	ldrsh	r3, [r5, r2]
10015ee8:	3301      	adds	r3, #1
10015eea:	d004      	beq.n	10015ef6 <_fwalk_reent+0x36>
10015eec:	0029      	movs	r1, r5
10015eee:	0038      	movs	r0, r7
10015ef0:	9b01      	ldr	r3, [sp, #4]
10015ef2:	4798      	blx	r3
10015ef4:	4306      	orrs	r6, r0
10015ef6:	3568      	adds	r5, #104	; 0x68
10015ef8:	e7ed      	b.n	10015ed6 <_fwalk_reent+0x16>
10015efa:	6824      	ldr	r4, [r4, #0]
10015efc:	e7e6      	b.n	10015ecc <_fwalk_reent+0xc>
10015efe:	0030      	movs	r0, r6
10015f00:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
	...

10015f04 <__swhatbuf_r>:
10015f04:	b570      	push	{r4, r5, r6, lr}
10015f06:	000e      	movs	r6, r1
10015f08:	001d      	movs	r5, r3
10015f0a:	230e      	movs	r3, #14
10015f0c:	5ec9      	ldrsh	r1, [r1, r3]
10015f0e:	b090      	sub	sp, #64	; 0x40
10015f10:	0014      	movs	r4, r2
10015f12:	2900      	cmp	r1, #0
10015f14:	da06      	bge.n	10015f24 <__swhatbuf_r+0x20>
10015f16:	2300      	movs	r3, #0
10015f18:	602b      	str	r3, [r5, #0]
10015f1a:	89b3      	ldrh	r3, [r6, #12]
10015f1c:	061b      	lsls	r3, r3, #24
10015f1e:	d50f      	bpl.n	10015f40 <__swhatbuf_r+0x3c>
10015f20:	2340      	movs	r3, #64	; 0x40
10015f22:	e00f      	b.n	10015f44 <__swhatbuf_r+0x40>
10015f24:	aa01      	add	r2, sp, #4
10015f26:	f000 fbcd 	bl	100166c4 <_fstat_r>
10015f2a:	2800      	cmp	r0, #0
10015f2c:	dbf3      	blt.n	10015f16 <__swhatbuf_r+0x12>
10015f2e:	23f0      	movs	r3, #240	; 0xf0
10015f30:	9a02      	ldr	r2, [sp, #8]
10015f32:	021b      	lsls	r3, r3, #8
10015f34:	4013      	ands	r3, r2
10015f36:	4a05      	ldr	r2, [pc, #20]	; (10015f4c <__swhatbuf_r+0x48>)
10015f38:	189b      	adds	r3, r3, r2
10015f3a:	425a      	negs	r2, r3
10015f3c:	4153      	adcs	r3, r2
10015f3e:	602b      	str	r3, [r5, #0]
10015f40:	2380      	movs	r3, #128	; 0x80
10015f42:	00db      	lsls	r3, r3, #3
10015f44:	2000      	movs	r0, #0
10015f46:	6023      	str	r3, [r4, #0]
10015f48:	b010      	add	sp, #64	; 0x40
10015f4a:	bd70      	pop	{r4, r5, r6, pc}
10015f4c:	ffffe000 	.word	0xffffe000

10015f50 <__smakebuf_r>:
10015f50:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10015f52:	2602      	movs	r6, #2
10015f54:	898b      	ldrh	r3, [r1, #12]
10015f56:	0005      	movs	r5, r0
10015f58:	000c      	movs	r4, r1
10015f5a:	4233      	tst	r3, r6
10015f5c:	d110      	bne.n	10015f80 <__smakebuf_r+0x30>
10015f5e:	ab01      	add	r3, sp, #4
10015f60:	466a      	mov	r2, sp
10015f62:	f7ff ffcf 	bl	10015f04 <__swhatbuf_r>
10015f66:	9900      	ldr	r1, [sp, #0]
10015f68:	0007      	movs	r7, r0
10015f6a:	0028      	movs	r0, r5
10015f6c:	f7ff fb7c 	bl	10015668 <_malloc_r>
10015f70:	2800      	cmp	r0, #0
10015f72:	d10c      	bne.n	10015f8e <__smakebuf_r+0x3e>
10015f74:	220c      	movs	r2, #12
10015f76:	5ea3      	ldrsh	r3, [r4, r2]
10015f78:	059a      	lsls	r2, r3, #22
10015f7a:	d423      	bmi.n	10015fc4 <__smakebuf_r+0x74>
10015f7c:	4333      	orrs	r3, r6
10015f7e:	81a3      	strh	r3, [r4, #12]
10015f80:	0023      	movs	r3, r4
10015f82:	3347      	adds	r3, #71	; 0x47
10015f84:	6023      	str	r3, [r4, #0]
10015f86:	6123      	str	r3, [r4, #16]
10015f88:	2301      	movs	r3, #1
10015f8a:	6163      	str	r3, [r4, #20]
10015f8c:	e01a      	b.n	10015fc4 <__smakebuf_r+0x74>
10015f8e:	2280      	movs	r2, #128	; 0x80
10015f90:	4b0d      	ldr	r3, [pc, #52]	; (10015fc8 <__smakebuf_r+0x78>)
10015f92:	62ab      	str	r3, [r5, #40]	; 0x28
10015f94:	89a3      	ldrh	r3, [r4, #12]
10015f96:	6020      	str	r0, [r4, #0]
10015f98:	4313      	orrs	r3, r2
10015f9a:	81a3      	strh	r3, [r4, #12]
10015f9c:	9b00      	ldr	r3, [sp, #0]
10015f9e:	6120      	str	r0, [r4, #16]
10015fa0:	6163      	str	r3, [r4, #20]
10015fa2:	9b01      	ldr	r3, [sp, #4]
10015fa4:	2b00      	cmp	r3, #0
10015fa6:	d00a      	beq.n	10015fbe <__smakebuf_r+0x6e>
10015fa8:	230e      	movs	r3, #14
10015faa:	5ee1      	ldrsh	r1, [r4, r3]
10015fac:	0028      	movs	r0, r5
10015fae:	f000 fb9b 	bl	100166e8 <_isatty_r>
10015fb2:	2800      	cmp	r0, #0
10015fb4:	d003      	beq.n	10015fbe <__smakebuf_r+0x6e>
10015fb6:	2201      	movs	r2, #1
10015fb8:	89a3      	ldrh	r3, [r4, #12]
10015fba:	4313      	orrs	r3, r2
10015fbc:	81a3      	strh	r3, [r4, #12]
10015fbe:	89a3      	ldrh	r3, [r4, #12]
10015fc0:	431f      	orrs	r7, r3
10015fc2:	81a7      	strh	r7, [r4, #12]
10015fc4:	bdf7      	pop	{r0, r1, r2, r4, r5, r6, r7, pc}
10015fc6:	46c0      	nop			; (mov r8, r8)
10015fc8:	10015d59 	.word	0x10015d59

10015fcc <__sfputc_r>:
10015fcc:	6893      	ldr	r3, [r2, #8]
10015fce:	b510      	push	{r4, lr}
10015fd0:	3b01      	subs	r3, #1
10015fd2:	6093      	str	r3, [r2, #8]
10015fd4:	2b00      	cmp	r3, #0
10015fd6:	da05      	bge.n	10015fe4 <__sfputc_r+0x18>
10015fd8:	6994      	ldr	r4, [r2, #24]
10015fda:	42a3      	cmp	r3, r4
10015fdc:	db08      	blt.n	10015ff0 <__sfputc_r+0x24>
10015fde:	b2cb      	uxtb	r3, r1
10015fe0:	2b0a      	cmp	r3, #10
10015fe2:	d005      	beq.n	10015ff0 <__sfputc_r+0x24>
10015fe4:	6813      	ldr	r3, [r2, #0]
10015fe6:	1c58      	adds	r0, r3, #1
10015fe8:	6010      	str	r0, [r2, #0]
10015fea:	7019      	strb	r1, [r3, #0]
10015fec:	b2c8      	uxtb	r0, r1
10015fee:	e001      	b.n	10015ff4 <__sfputc_r+0x28>
10015ff0:	f7ff fd32 	bl	10015a58 <__swbuf_r>
10015ff4:	bd10      	pop	{r4, pc}

10015ff6 <__sfputs_r>:
10015ff6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
10015ff8:	0006      	movs	r6, r0
10015ffa:	000f      	movs	r7, r1
10015ffc:	0014      	movs	r4, r2
10015ffe:	18d5      	adds	r5, r2, r3
10016000:	42ac      	cmp	r4, r5
10016002:	d008      	beq.n	10016016 <__sfputs_r+0x20>
10016004:	7821      	ldrb	r1, [r4, #0]
10016006:	003a      	movs	r2, r7
10016008:	0030      	movs	r0, r6
1001600a:	f7ff ffdf 	bl	10015fcc <__sfputc_r>
1001600e:	3401      	adds	r4, #1
10016010:	1c43      	adds	r3, r0, #1
10016012:	d1f5      	bne.n	10016000 <__sfputs_r+0xa>
10016014:	e000      	b.n	10016018 <__sfputs_r+0x22>
10016016:	2000      	movs	r0, #0
10016018:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1001601c <_vfiprintf_r>:
1001601c:	b5f0      	push	{r4, r5, r6, r7, lr}
1001601e:	b09f      	sub	sp, #124	; 0x7c
10016020:	0006      	movs	r6, r0
10016022:	000f      	movs	r7, r1
10016024:	9202      	str	r2, [sp, #8]
10016026:	9305      	str	r3, [sp, #20]
10016028:	2800      	cmp	r0, #0
1001602a:	d004      	beq.n	10016036 <_vfiprintf_r+0x1a>
1001602c:	6983      	ldr	r3, [r0, #24]
1001602e:	2b00      	cmp	r3, #0
10016030:	d101      	bne.n	10016036 <_vfiprintf_r+0x1a>
10016032:	f7ff fed3 	bl	10015ddc <__sinit>
10016036:	4b7f      	ldr	r3, [pc, #508]	; (10016234 <_vfiprintf_r+0x218>)
10016038:	429f      	cmp	r7, r3
1001603a:	d101      	bne.n	10016040 <_vfiprintf_r+0x24>
1001603c:	6877      	ldr	r7, [r6, #4]
1001603e:	e008      	b.n	10016052 <_vfiprintf_r+0x36>
10016040:	4b7d      	ldr	r3, [pc, #500]	; (10016238 <_vfiprintf_r+0x21c>)
10016042:	429f      	cmp	r7, r3
10016044:	d101      	bne.n	1001604a <_vfiprintf_r+0x2e>
10016046:	68b7      	ldr	r7, [r6, #8]
10016048:	e003      	b.n	10016052 <_vfiprintf_r+0x36>
1001604a:	4b7c      	ldr	r3, [pc, #496]	; (1001623c <_vfiprintf_r+0x220>)
1001604c:	429f      	cmp	r7, r3
1001604e:	d100      	bne.n	10016052 <_vfiprintf_r+0x36>
10016050:	68f7      	ldr	r7, [r6, #12]
10016052:	89bb      	ldrh	r3, [r7, #12]
10016054:	071b      	lsls	r3, r3, #28
10016056:	d50a      	bpl.n	1001606e <_vfiprintf_r+0x52>
10016058:	693b      	ldr	r3, [r7, #16]
1001605a:	2b00      	cmp	r3, #0
1001605c:	d007      	beq.n	1001606e <_vfiprintf_r+0x52>
1001605e:	2300      	movs	r3, #0
10016060:	ad06      	add	r5, sp, #24
10016062:	616b      	str	r3, [r5, #20]
10016064:	3320      	adds	r3, #32
10016066:	766b      	strb	r3, [r5, #25]
10016068:	3310      	adds	r3, #16
1001606a:	76ab      	strb	r3, [r5, #26]
1001606c:	e03d      	b.n	100160ea <_vfiprintf_r+0xce>
1001606e:	0039      	movs	r1, r7
10016070:	0030      	movs	r0, r6
10016072:	f7ff fd49 	bl	10015b08 <__swsetup_r>
10016076:	2800      	cmp	r0, #0
10016078:	d0f1      	beq.n	1001605e <_vfiprintf_r+0x42>
1001607a:	2001      	movs	r0, #1
1001607c:	4240      	negs	r0, r0
1001607e:	e0d6      	b.n	1001622e <_vfiprintf_r+0x212>
10016080:	9a05      	ldr	r2, [sp, #20]
10016082:	1d11      	adds	r1, r2, #4
10016084:	6812      	ldr	r2, [r2, #0]
10016086:	9105      	str	r1, [sp, #20]
10016088:	2a00      	cmp	r2, #0
1001608a:	da00      	bge.n	1001608e <_vfiprintf_r+0x72>
1001608c:	e07f      	b.n	1001618e <_vfiprintf_r+0x172>
1001608e:	9209      	str	r2, [sp, #36]	; 0x24
10016090:	3401      	adds	r4, #1
10016092:	7823      	ldrb	r3, [r4, #0]
10016094:	2b2e      	cmp	r3, #46	; 0x2e
10016096:	d100      	bne.n	1001609a <_vfiprintf_r+0x7e>
10016098:	e08d      	b.n	100161b6 <_vfiprintf_r+0x19a>
1001609a:	7821      	ldrb	r1, [r4, #0]
1001609c:	2203      	movs	r2, #3
1001609e:	4868      	ldr	r0, [pc, #416]	; (10016240 <_vfiprintf_r+0x224>)
100160a0:	f000 fb48 	bl	10016734 <memchr>
100160a4:	2800      	cmp	r0, #0
100160a6:	d007      	beq.n	100160b8 <_vfiprintf_r+0x9c>
100160a8:	4b65      	ldr	r3, [pc, #404]	; (10016240 <_vfiprintf_r+0x224>)
100160aa:	682a      	ldr	r2, [r5, #0]
100160ac:	1ac0      	subs	r0, r0, r3
100160ae:	2340      	movs	r3, #64	; 0x40
100160b0:	4083      	lsls	r3, r0
100160b2:	4313      	orrs	r3, r2
100160b4:	602b      	str	r3, [r5, #0]
100160b6:	3401      	adds	r4, #1
100160b8:	7821      	ldrb	r1, [r4, #0]
100160ba:	1c63      	adds	r3, r4, #1
100160bc:	2206      	movs	r2, #6
100160be:	4861      	ldr	r0, [pc, #388]	; (10016244 <_vfiprintf_r+0x228>)
100160c0:	9302      	str	r3, [sp, #8]
100160c2:	7629      	strb	r1, [r5, #24]
100160c4:	f000 fb36 	bl	10016734 <memchr>
100160c8:	2800      	cmp	r0, #0
100160ca:	d100      	bne.n	100160ce <_vfiprintf_r+0xb2>
100160cc:	e09d      	b.n	1001620a <_vfiprintf_r+0x1ee>
100160ce:	4b5e      	ldr	r3, [pc, #376]	; (10016248 <_vfiprintf_r+0x22c>)
100160d0:	2b00      	cmp	r3, #0
100160d2:	d000      	beq.n	100160d6 <_vfiprintf_r+0xba>
100160d4:	e090      	b.n	100161f8 <_vfiprintf_r+0x1dc>
100160d6:	2207      	movs	r2, #7
100160d8:	9b05      	ldr	r3, [sp, #20]
100160da:	3307      	adds	r3, #7
100160dc:	4393      	bics	r3, r2
100160de:	3308      	adds	r3, #8
100160e0:	9305      	str	r3, [sp, #20]
100160e2:	696b      	ldr	r3, [r5, #20]
100160e4:	9a03      	ldr	r2, [sp, #12]
100160e6:	189b      	adds	r3, r3, r2
100160e8:	616b      	str	r3, [r5, #20]
100160ea:	9c02      	ldr	r4, [sp, #8]
100160ec:	7823      	ldrb	r3, [r4, #0]
100160ee:	2b00      	cmp	r3, #0
100160f0:	d104      	bne.n	100160fc <_vfiprintf_r+0xe0>
100160f2:	9b02      	ldr	r3, [sp, #8]
100160f4:	1ae3      	subs	r3, r4, r3
100160f6:	9304      	str	r3, [sp, #16]
100160f8:	d012      	beq.n	10016120 <_vfiprintf_r+0x104>
100160fa:	e003      	b.n	10016104 <_vfiprintf_r+0xe8>
100160fc:	2b25      	cmp	r3, #37	; 0x25
100160fe:	d0f8      	beq.n	100160f2 <_vfiprintf_r+0xd6>
10016100:	3401      	adds	r4, #1
10016102:	e7f3      	b.n	100160ec <_vfiprintf_r+0xd0>
10016104:	9b04      	ldr	r3, [sp, #16]
10016106:	9a02      	ldr	r2, [sp, #8]
10016108:	0039      	movs	r1, r7
1001610a:	0030      	movs	r0, r6
1001610c:	f7ff ff73 	bl	10015ff6 <__sfputs_r>
10016110:	1c43      	adds	r3, r0, #1
10016112:	d100      	bne.n	10016116 <_vfiprintf_r+0xfa>
10016114:	e086      	b.n	10016224 <_vfiprintf_r+0x208>
10016116:	696a      	ldr	r2, [r5, #20]
10016118:	9b04      	ldr	r3, [sp, #16]
1001611a:	4694      	mov	ip, r2
1001611c:	4463      	add	r3, ip
1001611e:	616b      	str	r3, [r5, #20]
10016120:	7823      	ldrb	r3, [r4, #0]
10016122:	2b00      	cmp	r3, #0
10016124:	d07e      	beq.n	10016224 <_vfiprintf_r+0x208>
10016126:	2201      	movs	r2, #1
10016128:	2300      	movs	r3, #0
1001612a:	4252      	negs	r2, r2
1001612c:	606a      	str	r2, [r5, #4]
1001612e:	a902      	add	r1, sp, #8
10016130:	3254      	adds	r2, #84	; 0x54
10016132:	1852      	adds	r2, r2, r1
10016134:	3401      	adds	r4, #1
10016136:	602b      	str	r3, [r5, #0]
10016138:	60eb      	str	r3, [r5, #12]
1001613a:	60ab      	str	r3, [r5, #8]
1001613c:	7013      	strb	r3, [r2, #0]
1001613e:	65ab      	str	r3, [r5, #88]	; 0x58
10016140:	7821      	ldrb	r1, [r4, #0]
10016142:	2205      	movs	r2, #5
10016144:	4841      	ldr	r0, [pc, #260]	; (1001624c <_vfiprintf_r+0x230>)
10016146:	f000 faf5 	bl	10016734 <memchr>
1001614a:	2800      	cmp	r0, #0
1001614c:	d008      	beq.n	10016160 <_vfiprintf_r+0x144>
1001614e:	4b3f      	ldr	r3, [pc, #252]	; (1001624c <_vfiprintf_r+0x230>)
10016150:	682a      	ldr	r2, [r5, #0]
10016152:	1ac0      	subs	r0, r0, r3
10016154:	2301      	movs	r3, #1
10016156:	4083      	lsls	r3, r0
10016158:	4313      	orrs	r3, r2
1001615a:	602b      	str	r3, [r5, #0]
1001615c:	3401      	adds	r4, #1
1001615e:	e7ef      	b.n	10016140 <_vfiprintf_r+0x124>
10016160:	682b      	ldr	r3, [r5, #0]
10016162:	06da      	lsls	r2, r3, #27
10016164:	d504      	bpl.n	10016170 <_vfiprintf_r+0x154>
10016166:	2253      	movs	r2, #83	; 0x53
10016168:	2120      	movs	r1, #32
1001616a:	a802      	add	r0, sp, #8
1001616c:	1812      	adds	r2, r2, r0
1001616e:	7011      	strb	r1, [r2, #0]
10016170:	071a      	lsls	r2, r3, #28
10016172:	d504      	bpl.n	1001617e <_vfiprintf_r+0x162>
10016174:	2253      	movs	r2, #83	; 0x53
10016176:	212b      	movs	r1, #43	; 0x2b
10016178:	a802      	add	r0, sp, #8
1001617a:	1812      	adds	r2, r2, r0
1001617c:	7011      	strb	r1, [r2, #0]
1001617e:	7822      	ldrb	r2, [r4, #0]
10016180:	2a2a      	cmp	r2, #42	; 0x2a
10016182:	d100      	bne.n	10016186 <_vfiprintf_r+0x16a>
10016184:	e77c      	b.n	10016080 <_vfiprintf_r+0x64>
10016186:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016188:	2000      	movs	r0, #0
1001618a:	210a      	movs	r1, #10
1001618c:	e005      	b.n	1001619a <_vfiprintf_r+0x17e>
1001618e:	4252      	negs	r2, r2
10016190:	60ea      	str	r2, [r5, #12]
10016192:	2202      	movs	r2, #2
10016194:	4313      	orrs	r3, r2
10016196:	602b      	str	r3, [r5, #0]
10016198:	e77a      	b.n	10016090 <_vfiprintf_r+0x74>
1001619a:	7822      	ldrb	r2, [r4, #0]
1001619c:	3a30      	subs	r2, #48	; 0x30
1001619e:	2a09      	cmp	r2, #9
100161a0:	d804      	bhi.n	100161ac <_vfiprintf_r+0x190>
100161a2:	434b      	muls	r3, r1
100161a4:	3401      	adds	r4, #1
100161a6:	189b      	adds	r3, r3, r2
100161a8:	2001      	movs	r0, #1
100161aa:	e7f6      	b.n	1001619a <_vfiprintf_r+0x17e>
100161ac:	2800      	cmp	r0, #0
100161ae:	d100      	bne.n	100161b2 <_vfiprintf_r+0x196>
100161b0:	e76f      	b.n	10016092 <_vfiprintf_r+0x76>
100161b2:	9309      	str	r3, [sp, #36]	; 0x24
100161b4:	e76d      	b.n	10016092 <_vfiprintf_r+0x76>
100161b6:	7863      	ldrb	r3, [r4, #1]
100161b8:	2b2a      	cmp	r3, #42	; 0x2a
100161ba:	d10a      	bne.n	100161d2 <_vfiprintf_r+0x1b6>
100161bc:	9b05      	ldr	r3, [sp, #20]
100161be:	3402      	adds	r4, #2
100161c0:	1d1a      	adds	r2, r3, #4
100161c2:	681b      	ldr	r3, [r3, #0]
100161c4:	9205      	str	r2, [sp, #20]
100161c6:	2b00      	cmp	r3, #0
100161c8:	da01      	bge.n	100161ce <_vfiprintf_r+0x1b2>
100161ca:	2301      	movs	r3, #1
100161cc:	425b      	negs	r3, r3
100161ce:	9307      	str	r3, [sp, #28]
100161d0:	e763      	b.n	1001609a <_vfiprintf_r+0x7e>
100161d2:	2300      	movs	r3, #0
100161d4:	200a      	movs	r0, #10
100161d6:	001a      	movs	r2, r3
100161d8:	3401      	adds	r4, #1
100161da:	606b      	str	r3, [r5, #4]
100161dc:	7821      	ldrb	r1, [r4, #0]
100161de:	3930      	subs	r1, #48	; 0x30
100161e0:	2909      	cmp	r1, #9
100161e2:	d804      	bhi.n	100161ee <_vfiprintf_r+0x1d2>
100161e4:	4342      	muls	r2, r0
100161e6:	3401      	adds	r4, #1
100161e8:	1852      	adds	r2, r2, r1
100161ea:	2301      	movs	r3, #1
100161ec:	e7f6      	b.n	100161dc <_vfiprintf_r+0x1c0>
100161ee:	2b00      	cmp	r3, #0
100161f0:	d100      	bne.n	100161f4 <_vfiprintf_r+0x1d8>
100161f2:	e752      	b.n	1001609a <_vfiprintf_r+0x7e>
100161f4:	9207      	str	r2, [sp, #28]
100161f6:	e750      	b.n	1001609a <_vfiprintf_r+0x7e>
100161f8:	ab05      	add	r3, sp, #20
100161fa:	9300      	str	r3, [sp, #0]
100161fc:	003a      	movs	r2, r7
100161fe:	4b14      	ldr	r3, [pc, #80]	; (10016250 <_vfiprintf_r+0x234>)
10016200:	0029      	movs	r1, r5
10016202:	0030      	movs	r0, r6
10016204:	e000      	b.n	10016208 <_vfiprintf_r+0x1ec>
10016206:	bf00      	nop
10016208:	e007      	b.n	1001621a <_vfiprintf_r+0x1fe>
1001620a:	ab05      	add	r3, sp, #20
1001620c:	9300      	str	r3, [sp, #0]
1001620e:	003a      	movs	r2, r7
10016210:	4b0f      	ldr	r3, [pc, #60]	; (10016250 <_vfiprintf_r+0x234>)
10016212:	0029      	movs	r1, r5
10016214:	0030      	movs	r0, r6
10016216:	f000 f88b 	bl	10016330 <_printf_i>
1001621a:	9003      	str	r0, [sp, #12]
1001621c:	9b03      	ldr	r3, [sp, #12]
1001621e:	3301      	adds	r3, #1
10016220:	d000      	beq.n	10016224 <_vfiprintf_r+0x208>
10016222:	e75e      	b.n	100160e2 <_vfiprintf_r+0xc6>
10016224:	89bb      	ldrh	r3, [r7, #12]
10016226:	065b      	lsls	r3, r3, #25
10016228:	d500      	bpl.n	1001622c <_vfiprintf_r+0x210>
1001622a:	e726      	b.n	1001607a <_vfiprintf_r+0x5e>
1001622c:	980b      	ldr	r0, [sp, #44]	; 0x2c
1001622e:	b01f      	add	sp, #124	; 0x7c
10016230:	bdf0      	pop	{r4, r5, r6, r7, pc}
10016232:	46c0      	nop			; (mov r8, r8)
10016234:	10017848 	.word	0x10017848
10016238:	10017868 	.word	0x10017868
1001623c:	10017888 	.word	0x10017888
10016240:	100178ae 	.word	0x100178ae
10016244:	100178b2 	.word	0x100178b2
10016248:	00000000 	.word	0x00000000
1001624c:	100178a8 	.word	0x100178a8
10016250:	10015ff7 	.word	0x10015ff7

10016254 <_printf_common>:
10016254:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
10016256:	0017      	movs	r7, r2
10016258:	9301      	str	r3, [sp, #4]
1001625a:	688a      	ldr	r2, [r1, #8]
1001625c:	690b      	ldr	r3, [r1, #16]
1001625e:	9000      	str	r0, [sp, #0]
10016260:	000c      	movs	r4, r1
10016262:	4293      	cmp	r3, r2
10016264:	da00      	bge.n	10016268 <_printf_common+0x14>
10016266:	0013      	movs	r3, r2
10016268:	0022      	movs	r2, r4
1001626a:	603b      	str	r3, [r7, #0]
1001626c:	3243      	adds	r2, #67	; 0x43
1001626e:	7812      	ldrb	r2, [r2, #0]
10016270:	2a00      	cmp	r2, #0
10016272:	d001      	beq.n	10016278 <_printf_common+0x24>
10016274:	3301      	adds	r3, #1
10016276:	603b      	str	r3, [r7, #0]
10016278:	6823      	ldr	r3, [r4, #0]
1001627a:	069b      	lsls	r3, r3, #26
1001627c:	d502      	bpl.n	10016284 <_printf_common+0x30>
1001627e:	683b      	ldr	r3, [r7, #0]
10016280:	3302      	adds	r3, #2
10016282:	603b      	str	r3, [r7, #0]
10016284:	2506      	movs	r5, #6
10016286:	6823      	ldr	r3, [r4, #0]
10016288:	401d      	ands	r5, r3
1001628a:	d01e      	beq.n	100162ca <_printf_common+0x76>
1001628c:	0023      	movs	r3, r4
1001628e:	3343      	adds	r3, #67	; 0x43
10016290:	781b      	ldrb	r3, [r3, #0]
10016292:	1e5a      	subs	r2, r3, #1
10016294:	4193      	sbcs	r3, r2
10016296:	6822      	ldr	r2, [r4, #0]
10016298:	0692      	lsls	r2, r2, #26
1001629a:	d51c      	bpl.n	100162d6 <_printf_common+0x82>
1001629c:	2030      	movs	r0, #48	; 0x30
1001629e:	18e1      	adds	r1, r4, r3
100162a0:	3143      	adds	r1, #67	; 0x43
100162a2:	7008      	strb	r0, [r1, #0]
100162a4:	0021      	movs	r1, r4
100162a6:	1c5a      	adds	r2, r3, #1
100162a8:	3145      	adds	r1, #69	; 0x45
100162aa:	7809      	ldrb	r1, [r1, #0]
100162ac:	18a2      	adds	r2, r4, r2
100162ae:	3243      	adds	r2, #67	; 0x43
100162b0:	3302      	adds	r3, #2
100162b2:	7011      	strb	r1, [r2, #0]
100162b4:	e00f      	b.n	100162d6 <_printf_common+0x82>
100162b6:	0022      	movs	r2, r4
100162b8:	2301      	movs	r3, #1
100162ba:	3219      	adds	r2, #25
100162bc:	9901      	ldr	r1, [sp, #4]
100162be:	9800      	ldr	r0, [sp, #0]
100162c0:	9e08      	ldr	r6, [sp, #32]
100162c2:	47b0      	blx	r6
100162c4:	1c43      	adds	r3, r0, #1
100162c6:	d00e      	beq.n	100162e6 <_printf_common+0x92>
100162c8:	3501      	adds	r5, #1
100162ca:	68e3      	ldr	r3, [r4, #12]
100162cc:	683a      	ldr	r2, [r7, #0]
100162ce:	1a9b      	subs	r3, r3, r2
100162d0:	429d      	cmp	r5, r3
100162d2:	dbf0      	blt.n	100162b6 <_printf_common+0x62>
100162d4:	e7da      	b.n	1001628c <_printf_common+0x38>
100162d6:	0022      	movs	r2, r4
100162d8:	9901      	ldr	r1, [sp, #4]
100162da:	3243      	adds	r2, #67	; 0x43
100162dc:	9800      	ldr	r0, [sp, #0]
100162de:	9d08      	ldr	r5, [sp, #32]
100162e0:	47a8      	blx	r5
100162e2:	1c43      	adds	r3, r0, #1
100162e4:	d102      	bne.n	100162ec <_printf_common+0x98>
100162e6:	2001      	movs	r0, #1
100162e8:	4240      	negs	r0, r0
100162ea:	e020      	b.n	1001632e <_printf_common+0xda>
100162ec:	2306      	movs	r3, #6
100162ee:	6820      	ldr	r0, [r4, #0]
100162f0:	68e1      	ldr	r1, [r4, #12]
100162f2:	683a      	ldr	r2, [r7, #0]
100162f4:	4003      	ands	r3, r0
100162f6:	2500      	movs	r5, #0
100162f8:	2b04      	cmp	r3, #4
100162fa:	d103      	bne.n	10016304 <_printf_common+0xb0>
100162fc:	1a8d      	subs	r5, r1, r2
100162fe:	43eb      	mvns	r3, r5
10016300:	17db      	asrs	r3, r3, #31
10016302:	401d      	ands	r5, r3
10016304:	68a3      	ldr	r3, [r4, #8]
10016306:	6922      	ldr	r2, [r4, #16]
10016308:	4293      	cmp	r3, r2
1001630a:	dd01      	ble.n	10016310 <_printf_common+0xbc>
1001630c:	1a9b      	subs	r3, r3, r2
1001630e:	18ed      	adds	r5, r5, r3
10016310:	2700      	movs	r7, #0
10016312:	42bd      	cmp	r5, r7
10016314:	d00a      	beq.n	1001632c <_printf_common+0xd8>
10016316:	0022      	movs	r2, r4
10016318:	2301      	movs	r3, #1
1001631a:	321a      	adds	r2, #26
1001631c:	9901      	ldr	r1, [sp, #4]
1001631e:	9800      	ldr	r0, [sp, #0]
10016320:	9e08      	ldr	r6, [sp, #32]
10016322:	47b0      	blx	r6
10016324:	1c43      	adds	r3, r0, #1
10016326:	d0de      	beq.n	100162e6 <_printf_common+0x92>
10016328:	3701      	adds	r7, #1
1001632a:	e7f2      	b.n	10016312 <_printf_common+0xbe>
1001632c:	2000      	movs	r0, #0
1001632e:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}

10016330 <_printf_i>:
10016330:	b5f0      	push	{r4, r5, r6, r7, lr}
10016332:	b08b      	sub	sp, #44	; 0x2c
10016334:	9206      	str	r2, [sp, #24]
10016336:	000a      	movs	r2, r1
10016338:	3243      	adds	r2, #67	; 0x43
1001633a:	9307      	str	r3, [sp, #28]
1001633c:	9005      	str	r0, [sp, #20]
1001633e:	9204      	str	r2, [sp, #16]
10016340:	7e0a      	ldrb	r2, [r1, #24]
10016342:	000c      	movs	r4, r1
10016344:	9b10      	ldr	r3, [sp, #64]	; 0x40
10016346:	2a6e      	cmp	r2, #110	; 0x6e
10016348:	d100      	bne.n	1001634c <_printf_i+0x1c>
1001634a:	e0ab      	b.n	100164a4 <_printf_i+0x174>
1001634c:	d811      	bhi.n	10016372 <_printf_i+0x42>
1001634e:	2a63      	cmp	r2, #99	; 0x63
10016350:	d022      	beq.n	10016398 <_printf_i+0x68>
10016352:	d809      	bhi.n	10016368 <_printf_i+0x38>
10016354:	2a00      	cmp	r2, #0
10016356:	d100      	bne.n	1001635a <_printf_i+0x2a>
10016358:	e0b5      	b.n	100164c6 <_printf_i+0x196>
1001635a:	2a58      	cmp	r2, #88	; 0x58
1001635c:	d000      	beq.n	10016360 <_printf_i+0x30>
1001635e:	e0c5      	b.n	100164ec <_printf_i+0x1bc>
10016360:	3145      	adds	r1, #69	; 0x45
10016362:	700a      	strb	r2, [r1, #0]
10016364:	4a81      	ldr	r2, [pc, #516]	; (1001656c <_printf_i+0x23c>)
10016366:	e04f      	b.n	10016408 <_printf_i+0xd8>
10016368:	2a64      	cmp	r2, #100	; 0x64
1001636a:	d01d      	beq.n	100163a8 <_printf_i+0x78>
1001636c:	2a69      	cmp	r2, #105	; 0x69
1001636e:	d01b      	beq.n	100163a8 <_printf_i+0x78>
10016370:	e0bc      	b.n	100164ec <_printf_i+0x1bc>
10016372:	2a73      	cmp	r2, #115	; 0x73
10016374:	d100      	bne.n	10016378 <_printf_i+0x48>
10016376:	e0aa      	b.n	100164ce <_printf_i+0x19e>
10016378:	d809      	bhi.n	1001638e <_printf_i+0x5e>
1001637a:	2a6f      	cmp	r2, #111	; 0x6f
1001637c:	d029      	beq.n	100163d2 <_printf_i+0xa2>
1001637e:	2a70      	cmp	r2, #112	; 0x70
10016380:	d000      	beq.n	10016384 <_printf_i+0x54>
10016382:	e0b3      	b.n	100164ec <_printf_i+0x1bc>
10016384:	2220      	movs	r2, #32
10016386:	6809      	ldr	r1, [r1, #0]
10016388:	430a      	orrs	r2, r1
1001638a:	6022      	str	r2, [r4, #0]
1001638c:	e037      	b.n	100163fe <_printf_i+0xce>
1001638e:	2a75      	cmp	r2, #117	; 0x75
10016390:	d01f      	beq.n	100163d2 <_printf_i+0xa2>
10016392:	2a78      	cmp	r2, #120	; 0x78
10016394:	d033      	beq.n	100163fe <_printf_i+0xce>
10016396:	e0a9      	b.n	100164ec <_printf_i+0x1bc>
10016398:	000e      	movs	r6, r1
1001639a:	681a      	ldr	r2, [r3, #0]
1001639c:	3642      	adds	r6, #66	; 0x42
1001639e:	1d11      	adds	r1, r2, #4
100163a0:	6019      	str	r1, [r3, #0]
100163a2:	6813      	ldr	r3, [r2, #0]
100163a4:	7033      	strb	r3, [r6, #0]
100163a6:	e0a4      	b.n	100164f2 <_printf_i+0x1c2>
100163a8:	6821      	ldr	r1, [r4, #0]
100163aa:	681a      	ldr	r2, [r3, #0]
100163ac:	0608      	lsls	r0, r1, #24
100163ae:	d406      	bmi.n	100163be <_printf_i+0x8e>
100163b0:	0649      	lsls	r1, r1, #25
100163b2:	d504      	bpl.n	100163be <_printf_i+0x8e>
100163b4:	1d11      	adds	r1, r2, #4
100163b6:	6019      	str	r1, [r3, #0]
100163b8:	2300      	movs	r3, #0
100163ba:	5ed5      	ldrsh	r5, [r2, r3]
100163bc:	e002      	b.n	100163c4 <_printf_i+0x94>
100163be:	1d11      	adds	r1, r2, #4
100163c0:	6019      	str	r1, [r3, #0]
100163c2:	6815      	ldr	r5, [r2, #0]
100163c4:	2d00      	cmp	r5, #0
100163c6:	da3b      	bge.n	10016440 <_printf_i+0x110>
100163c8:	232d      	movs	r3, #45	; 0x2d
100163ca:	9a04      	ldr	r2, [sp, #16]
100163cc:	426d      	negs	r5, r5
100163ce:	7013      	strb	r3, [r2, #0]
100163d0:	e036      	b.n	10016440 <_printf_i+0x110>
100163d2:	6821      	ldr	r1, [r4, #0]
100163d4:	681a      	ldr	r2, [r3, #0]
100163d6:	0608      	lsls	r0, r1, #24
100163d8:	d406      	bmi.n	100163e8 <_printf_i+0xb8>
100163da:	0649      	lsls	r1, r1, #25
100163dc:	d504      	bpl.n	100163e8 <_printf_i+0xb8>
100163de:	6815      	ldr	r5, [r2, #0]
100163e0:	1d11      	adds	r1, r2, #4
100163e2:	6019      	str	r1, [r3, #0]
100163e4:	b2ad      	uxth	r5, r5
100163e6:	e002      	b.n	100163ee <_printf_i+0xbe>
100163e8:	1d11      	adds	r1, r2, #4
100163ea:	6019      	str	r1, [r3, #0]
100163ec:	6815      	ldr	r5, [r2, #0]
100163ee:	4b5f      	ldr	r3, [pc, #380]	; (1001656c <_printf_i+0x23c>)
100163f0:	7e22      	ldrb	r2, [r4, #24]
100163f2:	9303      	str	r3, [sp, #12]
100163f4:	2708      	movs	r7, #8
100163f6:	2a6f      	cmp	r2, #111	; 0x6f
100163f8:	d01d      	beq.n	10016436 <_printf_i+0x106>
100163fa:	270a      	movs	r7, #10
100163fc:	e01b      	b.n	10016436 <_printf_i+0x106>
100163fe:	0022      	movs	r2, r4
10016400:	2178      	movs	r1, #120	; 0x78
10016402:	3245      	adds	r2, #69	; 0x45
10016404:	7011      	strb	r1, [r2, #0]
10016406:	4a5a      	ldr	r2, [pc, #360]	; (10016570 <_printf_i+0x240>)
10016408:	6819      	ldr	r1, [r3, #0]
1001640a:	9203      	str	r2, [sp, #12]
1001640c:	1d08      	adds	r0, r1, #4
1001640e:	6822      	ldr	r2, [r4, #0]
10016410:	6018      	str	r0, [r3, #0]
10016412:	680d      	ldr	r5, [r1, #0]
10016414:	0610      	lsls	r0, r2, #24
10016416:	d402      	bmi.n	1001641e <_printf_i+0xee>
10016418:	0650      	lsls	r0, r2, #25
1001641a:	d500      	bpl.n	1001641e <_printf_i+0xee>
1001641c:	b2ad      	uxth	r5, r5
1001641e:	07d3      	lsls	r3, r2, #31
10016420:	d502      	bpl.n	10016428 <_printf_i+0xf8>
10016422:	2320      	movs	r3, #32
10016424:	431a      	orrs	r2, r3
10016426:	6022      	str	r2, [r4, #0]
10016428:	2710      	movs	r7, #16
1001642a:	2d00      	cmp	r5, #0
1001642c:	d103      	bne.n	10016436 <_printf_i+0x106>
1001642e:	2320      	movs	r3, #32
10016430:	6822      	ldr	r2, [r4, #0]
10016432:	439a      	bics	r2, r3
10016434:	6022      	str	r2, [r4, #0]
10016436:	0023      	movs	r3, r4
10016438:	2200      	movs	r2, #0
1001643a:	3343      	adds	r3, #67	; 0x43
1001643c:	701a      	strb	r2, [r3, #0]
1001643e:	e002      	b.n	10016446 <_printf_i+0x116>
10016440:	270a      	movs	r7, #10
10016442:	4b4a      	ldr	r3, [pc, #296]	; (1001656c <_printf_i+0x23c>)
10016444:	9303      	str	r3, [sp, #12]
10016446:	6863      	ldr	r3, [r4, #4]
10016448:	60a3      	str	r3, [r4, #8]
1001644a:	2b00      	cmp	r3, #0
1001644c:	db09      	blt.n	10016462 <_printf_i+0x132>
1001644e:	2204      	movs	r2, #4
10016450:	6821      	ldr	r1, [r4, #0]
10016452:	4391      	bics	r1, r2
10016454:	6021      	str	r1, [r4, #0]
10016456:	2d00      	cmp	r5, #0
10016458:	d105      	bne.n	10016466 <_printf_i+0x136>
1001645a:	9e04      	ldr	r6, [sp, #16]
1001645c:	2b00      	cmp	r3, #0
1001645e:	d011      	beq.n	10016484 <_printf_i+0x154>
10016460:	e07b      	b.n	1001655a <_printf_i+0x22a>
10016462:	2d00      	cmp	r5, #0
10016464:	d079      	beq.n	1001655a <_printf_i+0x22a>
10016466:	9e04      	ldr	r6, [sp, #16]
10016468:	0028      	movs	r0, r5
1001646a:	0039      	movs	r1, r7
1001646c:	f7fc fa9e 	bl	100129ac <__aeabi_uidivmod>
10016470:	9b03      	ldr	r3, [sp, #12]
10016472:	3e01      	subs	r6, #1
10016474:	5c5b      	ldrb	r3, [r3, r1]
10016476:	0028      	movs	r0, r5
10016478:	7033      	strb	r3, [r6, #0]
1001647a:	0039      	movs	r1, r7
1001647c:	f7fc fa10 	bl	100128a0 <__aeabi_uidiv>
10016480:	1e05      	subs	r5, r0, #0
10016482:	d1f1      	bne.n	10016468 <_printf_i+0x138>
10016484:	2f08      	cmp	r7, #8
10016486:	d109      	bne.n	1001649c <_printf_i+0x16c>
10016488:	6823      	ldr	r3, [r4, #0]
1001648a:	07db      	lsls	r3, r3, #31
1001648c:	d506      	bpl.n	1001649c <_printf_i+0x16c>
1001648e:	6863      	ldr	r3, [r4, #4]
10016490:	6922      	ldr	r2, [r4, #16]
10016492:	4293      	cmp	r3, r2
10016494:	dc02      	bgt.n	1001649c <_printf_i+0x16c>
10016496:	2330      	movs	r3, #48	; 0x30
10016498:	3e01      	subs	r6, #1
1001649a:	7033      	strb	r3, [r6, #0]
1001649c:	9b04      	ldr	r3, [sp, #16]
1001649e:	1b9b      	subs	r3, r3, r6
100164a0:	6123      	str	r3, [r4, #16]
100164a2:	e02b      	b.n	100164fc <_printf_i+0x1cc>
100164a4:	6809      	ldr	r1, [r1, #0]
100164a6:	681a      	ldr	r2, [r3, #0]
100164a8:	0608      	lsls	r0, r1, #24
100164aa:	d407      	bmi.n	100164bc <_printf_i+0x18c>
100164ac:	0649      	lsls	r1, r1, #25
100164ae:	d505      	bpl.n	100164bc <_printf_i+0x18c>
100164b0:	1d11      	adds	r1, r2, #4
100164b2:	6019      	str	r1, [r3, #0]
100164b4:	6813      	ldr	r3, [r2, #0]
100164b6:	8aa2      	ldrh	r2, [r4, #20]
100164b8:	801a      	strh	r2, [r3, #0]
100164ba:	e004      	b.n	100164c6 <_printf_i+0x196>
100164bc:	1d11      	adds	r1, r2, #4
100164be:	6019      	str	r1, [r3, #0]
100164c0:	6813      	ldr	r3, [r2, #0]
100164c2:	6962      	ldr	r2, [r4, #20]
100164c4:	601a      	str	r2, [r3, #0]
100164c6:	2300      	movs	r3, #0
100164c8:	9e04      	ldr	r6, [sp, #16]
100164ca:	6123      	str	r3, [r4, #16]
100164cc:	e016      	b.n	100164fc <_printf_i+0x1cc>
100164ce:	681a      	ldr	r2, [r3, #0]
100164d0:	1d11      	adds	r1, r2, #4
100164d2:	6019      	str	r1, [r3, #0]
100164d4:	6816      	ldr	r6, [r2, #0]
100164d6:	2100      	movs	r1, #0
100164d8:	6862      	ldr	r2, [r4, #4]
100164da:	0030      	movs	r0, r6
100164dc:	f000 f92a 	bl	10016734 <memchr>
100164e0:	2800      	cmp	r0, #0
100164e2:	d001      	beq.n	100164e8 <_printf_i+0x1b8>
100164e4:	1b80      	subs	r0, r0, r6
100164e6:	6060      	str	r0, [r4, #4]
100164e8:	6863      	ldr	r3, [r4, #4]
100164ea:	e003      	b.n	100164f4 <_printf_i+0x1c4>
100164ec:	0026      	movs	r6, r4
100164ee:	3642      	adds	r6, #66	; 0x42
100164f0:	7032      	strb	r2, [r6, #0]
100164f2:	2301      	movs	r3, #1
100164f4:	6123      	str	r3, [r4, #16]
100164f6:	2300      	movs	r3, #0
100164f8:	9a04      	ldr	r2, [sp, #16]
100164fa:	7013      	strb	r3, [r2, #0]
100164fc:	9b07      	ldr	r3, [sp, #28]
100164fe:	aa09      	add	r2, sp, #36	; 0x24
10016500:	9300      	str	r3, [sp, #0]
10016502:	0021      	movs	r1, r4
10016504:	9b06      	ldr	r3, [sp, #24]
10016506:	9805      	ldr	r0, [sp, #20]
10016508:	f7ff fea4 	bl	10016254 <_printf_common>
1001650c:	1c43      	adds	r3, r0, #1
1001650e:	d102      	bne.n	10016516 <_printf_i+0x1e6>
10016510:	2001      	movs	r0, #1
10016512:	4240      	negs	r0, r0
10016514:	e027      	b.n	10016566 <_printf_i+0x236>
10016516:	6923      	ldr	r3, [r4, #16]
10016518:	0032      	movs	r2, r6
1001651a:	9906      	ldr	r1, [sp, #24]
1001651c:	9805      	ldr	r0, [sp, #20]
1001651e:	9d07      	ldr	r5, [sp, #28]
10016520:	47a8      	blx	r5
10016522:	1c43      	adds	r3, r0, #1
10016524:	d0f4      	beq.n	10016510 <_printf_i+0x1e0>
10016526:	6823      	ldr	r3, [r4, #0]
10016528:	2500      	movs	r5, #0
1001652a:	079b      	lsls	r3, r3, #30
1001652c:	d40f      	bmi.n	1001654e <_printf_i+0x21e>
1001652e:	9b09      	ldr	r3, [sp, #36]	; 0x24
10016530:	68e0      	ldr	r0, [r4, #12]
10016532:	4298      	cmp	r0, r3
10016534:	da17      	bge.n	10016566 <_printf_i+0x236>
10016536:	0018      	movs	r0, r3
10016538:	e015      	b.n	10016566 <_printf_i+0x236>
1001653a:	0022      	movs	r2, r4
1001653c:	2301      	movs	r3, #1
1001653e:	3219      	adds	r2, #25
10016540:	9906      	ldr	r1, [sp, #24]
10016542:	9805      	ldr	r0, [sp, #20]
10016544:	9e07      	ldr	r6, [sp, #28]
10016546:	47b0      	blx	r6
10016548:	1c43      	adds	r3, r0, #1
1001654a:	d0e1      	beq.n	10016510 <_printf_i+0x1e0>
1001654c:	3501      	adds	r5, #1
1001654e:	68e3      	ldr	r3, [r4, #12]
10016550:	9a09      	ldr	r2, [sp, #36]	; 0x24
10016552:	1a9b      	subs	r3, r3, r2
10016554:	429d      	cmp	r5, r3
10016556:	dbf0      	blt.n	1001653a <_printf_i+0x20a>
10016558:	e7e9      	b.n	1001652e <_printf_i+0x1fe>
1001655a:	0026      	movs	r6, r4
1001655c:	9b03      	ldr	r3, [sp, #12]
1001655e:	3642      	adds	r6, #66	; 0x42
10016560:	781b      	ldrb	r3, [r3, #0]
10016562:	7033      	strb	r3, [r6, #0]
10016564:	e78e      	b.n	10016484 <_printf_i+0x154>
10016566:	b00b      	add	sp, #44	; 0x2c
10016568:	bdf0      	pop	{r4, r5, r6, r7, pc}
1001656a:	46c0      	nop			; (mov r8, r8)
1001656c:	100178b9 	.word	0x100178b9
10016570:	100178ca 	.word	0x100178ca

10016574 <_putc_r>:
10016574:	b570      	push	{r4, r5, r6, lr}
10016576:	0006      	movs	r6, r0
10016578:	000d      	movs	r5, r1
1001657a:	0014      	movs	r4, r2
1001657c:	2800      	cmp	r0, #0
1001657e:	d004      	beq.n	1001658a <_putc_r+0x16>
10016580:	6983      	ldr	r3, [r0, #24]
10016582:	2b00      	cmp	r3, #0
10016584:	d101      	bne.n	1001658a <_putc_r+0x16>
10016586:	f7ff fc29 	bl	10015ddc <__sinit>
1001658a:	4b12      	ldr	r3, [pc, #72]	; (100165d4 <_putc_r+0x60>)
1001658c:	429c      	cmp	r4, r3
1001658e:	d101      	bne.n	10016594 <_putc_r+0x20>
10016590:	6874      	ldr	r4, [r6, #4]
10016592:	e008      	b.n	100165a6 <_putc_r+0x32>
10016594:	4b10      	ldr	r3, [pc, #64]	; (100165d8 <_putc_r+0x64>)
10016596:	429c      	cmp	r4, r3
10016598:	d101      	bne.n	1001659e <_putc_r+0x2a>
1001659a:	68b4      	ldr	r4, [r6, #8]
1001659c:	e003      	b.n	100165a6 <_putc_r+0x32>
1001659e:	4b0f      	ldr	r3, [pc, #60]	; (100165dc <_putc_r+0x68>)
100165a0:	429c      	cmp	r4, r3
100165a2:	d100      	bne.n	100165a6 <_putc_r+0x32>
100165a4:	68f4      	ldr	r4, [r6, #12]
100165a6:	68a3      	ldr	r3, [r4, #8]
100165a8:	3b01      	subs	r3, #1
100165aa:	60a3      	str	r3, [r4, #8]
100165ac:	2b00      	cmp	r3, #0
100165ae:	da05      	bge.n	100165bc <_putc_r+0x48>
100165b0:	69a2      	ldr	r2, [r4, #24]
100165b2:	4293      	cmp	r3, r2
100165b4:	db08      	blt.n	100165c8 <_putc_r+0x54>
100165b6:	b2eb      	uxtb	r3, r5
100165b8:	2b0a      	cmp	r3, #10
100165ba:	d005      	beq.n	100165c8 <_putc_r+0x54>
100165bc:	6823      	ldr	r3, [r4, #0]
100165be:	b2e8      	uxtb	r0, r5
100165c0:	1c5a      	adds	r2, r3, #1
100165c2:	6022      	str	r2, [r4, #0]
100165c4:	701d      	strb	r5, [r3, #0]
100165c6:	e004      	b.n	100165d2 <_putc_r+0x5e>
100165c8:	0022      	movs	r2, r4
100165ca:	0029      	movs	r1, r5
100165cc:	0030      	movs	r0, r6
100165ce:	f7ff fa43 	bl	10015a58 <__swbuf_r>
100165d2:	bd70      	pop	{r4, r5, r6, pc}
100165d4:	10017848 	.word	0x10017848
100165d8:	10017868 	.word	0x10017868
100165dc:	10017888 	.word	0x10017888

100165e0 <__sread>:
100165e0:	b570      	push	{r4, r5, r6, lr}
100165e2:	000c      	movs	r4, r1
100165e4:	250e      	movs	r5, #14
100165e6:	5f49      	ldrsh	r1, [r1, r5]
100165e8:	f000 f8b0 	bl	1001674c <_read_r>
100165ec:	2800      	cmp	r0, #0
100165ee:	db03      	blt.n	100165f8 <__sread+0x18>
100165f0:	6d63      	ldr	r3, [r4, #84]	; 0x54
100165f2:	181b      	adds	r3, r3, r0
100165f4:	6563      	str	r3, [r4, #84]	; 0x54
100165f6:	e003      	b.n	10016600 <__sread+0x20>
100165f8:	89a2      	ldrh	r2, [r4, #12]
100165fa:	4b02      	ldr	r3, [pc, #8]	; (10016604 <__sread+0x24>)
100165fc:	4013      	ands	r3, r2
100165fe:	81a3      	strh	r3, [r4, #12]
10016600:	bd70      	pop	{r4, r5, r6, pc}
10016602:	46c0      	nop			; (mov r8, r8)
10016604:	ffffefff 	.word	0xffffefff

10016608 <__swrite>:
10016608:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1001660a:	001f      	movs	r7, r3
1001660c:	898b      	ldrh	r3, [r1, #12]
1001660e:	0005      	movs	r5, r0
10016610:	000c      	movs	r4, r1
10016612:	0016      	movs	r6, r2
10016614:	05db      	lsls	r3, r3, #23
10016616:	d505      	bpl.n	10016624 <__swrite+0x1c>
10016618:	230e      	movs	r3, #14
1001661a:	5ec9      	ldrsh	r1, [r1, r3]
1001661c:	2200      	movs	r2, #0
1001661e:	2302      	movs	r3, #2
10016620:	f000 f874 	bl	1001670c <_lseek_r>
10016624:	89a2      	ldrh	r2, [r4, #12]
10016626:	4b05      	ldr	r3, [pc, #20]	; (1001663c <__swrite+0x34>)
10016628:	0028      	movs	r0, r5
1001662a:	4013      	ands	r3, r2
1001662c:	81a3      	strh	r3, [r4, #12]
1001662e:	0032      	movs	r2, r6
10016630:	230e      	movs	r3, #14
10016632:	5ee1      	ldrsh	r1, [r4, r3]
10016634:	003b      	movs	r3, r7
10016636:	f000 f81f 	bl	10016678 <_write_r>
1001663a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1001663c:	ffffefff 	.word	0xffffefff

10016640 <__sseek>:
10016640:	b570      	push	{r4, r5, r6, lr}
10016642:	000c      	movs	r4, r1
10016644:	250e      	movs	r5, #14
10016646:	5f49      	ldrsh	r1, [r1, r5]
10016648:	f000 f860 	bl	1001670c <_lseek_r>
1001664c:	89a3      	ldrh	r3, [r4, #12]
1001664e:	1c42      	adds	r2, r0, #1
10016650:	d103      	bne.n	1001665a <__sseek+0x1a>
10016652:	4a05      	ldr	r2, [pc, #20]	; (10016668 <__sseek+0x28>)
10016654:	4013      	ands	r3, r2
10016656:	81a3      	strh	r3, [r4, #12]
10016658:	e004      	b.n	10016664 <__sseek+0x24>
1001665a:	2280      	movs	r2, #128	; 0x80
1001665c:	0152      	lsls	r2, r2, #5
1001665e:	4313      	orrs	r3, r2
10016660:	81a3      	strh	r3, [r4, #12]
10016662:	6560      	str	r0, [r4, #84]	; 0x54
10016664:	bd70      	pop	{r4, r5, r6, pc}
10016666:	46c0      	nop			; (mov r8, r8)
10016668:	ffffefff 	.word	0xffffefff

1001666c <__sclose>:
1001666c:	b510      	push	{r4, lr}
1001666e:	230e      	movs	r3, #14
10016670:	5ec9      	ldrsh	r1, [r1, r3]
10016672:	f000 f815 	bl	100166a0 <_close_r>
10016676:	bd10      	pop	{r4, pc}

10016678 <_write_r>:
10016678:	b570      	push	{r4, r5, r6, lr}
1001667a:	0005      	movs	r5, r0
1001667c:	0008      	movs	r0, r1
1001667e:	0011      	movs	r1, r2
10016680:	2200      	movs	r2, #0
10016682:	4c06      	ldr	r4, [pc, #24]	; (1001669c <_write_r+0x24>)
10016684:	6022      	str	r2, [r4, #0]
10016686:	001a      	movs	r2, r3
10016688:	f7f5 fd36 	bl	1000c0f8 <_write>
1001668c:	1c43      	adds	r3, r0, #1
1001668e:	d103      	bne.n	10016698 <_write_r+0x20>
10016690:	6823      	ldr	r3, [r4, #0]
10016692:	2b00      	cmp	r3, #0
10016694:	d000      	beq.n	10016698 <_write_r+0x20>
10016696:	602b      	str	r3, [r5, #0]
10016698:	bd70      	pop	{r4, r5, r6, pc}
1001669a:	46c0      	nop			; (mov r8, r8)
1001669c:	1001a880 	.word	0x1001a880

100166a0 <_close_r>:
100166a0:	2300      	movs	r3, #0
100166a2:	b570      	push	{r4, r5, r6, lr}
100166a4:	4c06      	ldr	r4, [pc, #24]	; (100166c0 <_close_r+0x20>)
100166a6:	0005      	movs	r5, r0
100166a8:	0008      	movs	r0, r1
100166aa:	6023      	str	r3, [r4, #0]
100166ac:	f7f1 feb8 	bl	10008420 <_close>
100166b0:	1c43      	adds	r3, r0, #1
100166b2:	d103      	bne.n	100166bc <_close_r+0x1c>
100166b4:	6823      	ldr	r3, [r4, #0]
100166b6:	2b00      	cmp	r3, #0
100166b8:	d000      	beq.n	100166bc <_close_r+0x1c>
100166ba:	602b      	str	r3, [r5, #0]
100166bc:	bd70      	pop	{r4, r5, r6, pc}
100166be:	46c0      	nop			; (mov r8, r8)
100166c0:	1001a880 	.word	0x1001a880

100166c4 <_fstat_r>:
100166c4:	2300      	movs	r3, #0
100166c6:	b570      	push	{r4, r5, r6, lr}
100166c8:	4c06      	ldr	r4, [pc, #24]	; (100166e4 <_fstat_r+0x20>)
100166ca:	0005      	movs	r5, r0
100166cc:	0008      	movs	r0, r1
100166ce:	0011      	movs	r1, r2
100166d0:	6023      	str	r3, [r4, #0]
100166d2:	f7f1 fea9 	bl	10008428 <_fstat>
100166d6:	1c43      	adds	r3, r0, #1
100166d8:	d103      	bne.n	100166e2 <_fstat_r+0x1e>
100166da:	6823      	ldr	r3, [r4, #0]
100166dc:	2b00      	cmp	r3, #0
100166de:	d000      	beq.n	100166e2 <_fstat_r+0x1e>
100166e0:	602b      	str	r3, [r5, #0]
100166e2:	bd70      	pop	{r4, r5, r6, pc}
100166e4:	1001a880 	.word	0x1001a880

100166e8 <_isatty_r>:
100166e8:	2300      	movs	r3, #0
100166ea:	b570      	push	{r4, r5, r6, lr}
100166ec:	4c06      	ldr	r4, [pc, #24]	; (10016708 <_isatty_r+0x20>)
100166ee:	0005      	movs	r5, r0
100166f0:	0008      	movs	r0, r1
100166f2:	6023      	str	r3, [r4, #0]
100166f4:	f7f1 fe9e 	bl	10008434 <_isatty>
100166f8:	1c43      	adds	r3, r0, #1
100166fa:	d103      	bne.n	10016704 <_isatty_r+0x1c>
100166fc:	6823      	ldr	r3, [r4, #0]
100166fe:	2b00      	cmp	r3, #0
10016700:	d000      	beq.n	10016704 <_isatty_r+0x1c>
10016702:	602b      	str	r3, [r5, #0]
10016704:	bd70      	pop	{r4, r5, r6, pc}
10016706:	46c0      	nop			; (mov r8, r8)
10016708:	1001a880 	.word	0x1001a880

1001670c <_lseek_r>:
1001670c:	b570      	push	{r4, r5, r6, lr}
1001670e:	0005      	movs	r5, r0
10016710:	0008      	movs	r0, r1
10016712:	0011      	movs	r1, r2
10016714:	2200      	movs	r2, #0
10016716:	4c06      	ldr	r4, [pc, #24]	; (10016730 <_lseek_r+0x24>)
10016718:	6022      	str	r2, [r4, #0]
1001671a:	001a      	movs	r2, r3
1001671c:	f7f1 fe8c 	bl	10008438 <_lseek>
10016720:	1c43      	adds	r3, r0, #1
10016722:	d103      	bne.n	1001672c <_lseek_r+0x20>
10016724:	6823      	ldr	r3, [r4, #0]
10016726:	2b00      	cmp	r3, #0
10016728:	d000      	beq.n	1001672c <_lseek_r+0x20>
1001672a:	602b      	str	r3, [r5, #0]
1001672c:	bd70      	pop	{r4, r5, r6, pc}
1001672e:	46c0      	nop			; (mov r8, r8)
10016730:	1001a880 	.word	0x1001a880

10016734 <memchr>:
10016734:	b2c9      	uxtb	r1, r1
10016736:	1882      	adds	r2, r0, r2
10016738:	4290      	cmp	r0, r2
1001673a:	d004      	beq.n	10016746 <memchr+0x12>
1001673c:	7803      	ldrb	r3, [r0, #0]
1001673e:	428b      	cmp	r3, r1
10016740:	d002      	beq.n	10016748 <memchr+0x14>
10016742:	3001      	adds	r0, #1
10016744:	e7f8      	b.n	10016738 <memchr+0x4>
10016746:	2000      	movs	r0, #0
10016748:	4770      	bx	lr
	...

1001674c <_read_r>:
1001674c:	b570      	push	{r4, r5, r6, lr}
1001674e:	0005      	movs	r5, r0
10016750:	0008      	movs	r0, r1
10016752:	0011      	movs	r1, r2
10016754:	2200      	movs	r2, #0
10016756:	4c06      	ldr	r4, [pc, #24]	; (10016770 <_read_r+0x24>)
10016758:	6022      	str	r2, [r4, #0]
1001675a:	001a      	movs	r2, r3
1001675c:	f7f5 fcac 	bl	1000c0b8 <_read>
10016760:	1c43      	adds	r3, r0, #1
10016762:	d103      	bne.n	1001676c <_read_r+0x20>
10016764:	6823      	ldr	r3, [r4, #0]
10016766:	2b00      	cmp	r3, #0
10016768:	d000      	beq.n	1001676c <_read_r+0x20>
1001676a:	602b      	str	r3, [r5, #0]
1001676c:	bd70      	pop	{r4, r5, r6, pc}
1001676e:	46c0      	nop			; (mov r8, r8)
10016770:	1001a880 	.word	0x1001a880
10016774:	6e6f6420 	.word	0x6e6f6420
10016778:	00002165 	.word	0x00002165
1001677c:	0000000d 	.word	0x0000000d
10016780:	3a4f2f54 	.word	0x3a4f2f54
10016784:	46464f20 	.word	0x46464f20
10016788:	00000000 	.word	0x00000000
1001678c:	736d735b 	.word	0x736d735b
10016790:	656c625f 	.word	0x656c625f
10016794:	776f705f 	.word	0x776f705f
10016798:	645f7265 	.word	0x645f7265
1001679c:	5d6e776f 	.word	0x5d6e776f
100167a0:	00000000 	.word	0x00000000
100167a4:	3a4f2f54 	.word	0x3a4f2f54
100167a8:	30303520 	.word	0x30303520
100167ac:	736d2030 	.word	0x736d2030
100167b0:	00000000 	.word	0x00000000
100167b4:	736d735b 	.word	0x736d735b
100167b8:	656c625f 	.word	0x656c625f
100167bc:	6961705f 	.word	0x6961705f
100167c0:	5f646572 	.word	0x5f646572
100167c4:	005d6e66 	.word	0x005d6e66
100167c8:	736d735b 	.word	0x736d735b
100167cc:	656c625f 	.word	0x656c625f
100167d0:	7664615f 	.word	0x7664615f
100167d4:	69747265 	.word	0x69747265
100167d8:	095d6573 	.word	0x095d6573
100167dc:	65766441 	.word	0x65766441
100167e0:	73697472 	.word	0x73697472
100167e4:	6e656d65 	.word	0x6e656d65
100167e8:	61642074 	.word	0x61642074
100167ec:	73206174 	.word	0x73206174
100167f0:	66207465 	.word	0x66207465
100167f4:	656c6961 	.word	0x656c6961
100167f8:	00002164 	.word	0x00002164
100167fc:	736d735b 	.word	0x736d735b
10016800:	7265735f 	.word	0x7265735f
10016804:	65636976 	.word	0x65636976
10016808:	7664615f 	.word	0x7664615f
1001680c:	69747265 	.word	0x69747265
10016810:	095d6573 	.word	0x095d6573
10016814:	20454c42 	.word	0x20454c42
10016818:	65766441 	.word	0x65766441
1001681c:	73697472 	.word	0x73697472
10016820:	6e656d65 	.word	0x6e656d65
10016824:	74732074 	.word	0x74732074
10016828:	20747261 	.word	0x20747261
1001682c:	6c696166 	.word	0x6c696166
10016830:	203a6465 	.word	0x203a6465
10016834:	73616572 	.word	0x73616572
10016838:	30206e6f 	.word	0x30206e6f
1001683c:	00782578 	.word	0x00782578
10016840:	20642520 	.word	0x20642520
10016844:	454e4f47 	.word	0x454e4f47
10016848:	0000203f 	.word	0x0000203f
1001684c:	3a4f2f54 	.word	0x3a4f2f54
10016850:	6d303220 	.word	0x6d303220
10016854:	00000073 	.word	0x00000073
10016858:	49544f4e 	.word	0x49544f4e
1001685c:	41434946 	.word	0x41434946
10016860:	4e4f4954 	.word	0x4e4f4954
10016864:	52524520 	.word	0x52524520
10016868:	2121524f 	.word	0x2121524f
1001686c:	00000000 	.word	0x00000000

10016870 <sms_ble_gap_cb>:
	...
1001687c:	100085d5 00000000 100085ed 10008721     ............!...
	...
10016894:	10008641 1000843d 00000000 00000000     A...=...........
	...

100168bc <sms_ble_gatt_server_cb>:
100168bc:	10008459 100084cd 00000000 00000000     Y...............
	...
100168e4:	736d735b 7475625f 5f6e6f74 666e6f63     [sms_button_conf
100168f4:	72756769 50095d65 6c626f72 77206d65     igure].Problem w
10016904:	656c6968 74657320 676e6974 20707520     hile setting up 
10016914:	74747562 00316e6f 736d735b 7475625f     button1.[sms_but
10016924:	5f6e6f74 666e6f63 72756769 50095d65     ton_configure].P
10016934:	6c626f72 77206d65 656c6968 74657320     roblem while set
10016944:	676e6974 20707520 414c5058 44454e49     ting up XPLAINED
10016954:	65737520 75622072 6e6f7474 00000000      user button....
10016964:	736d735b 7475625f 5f6e6f74 2d5d6e66     [sms_button_fn]-
10016974:	00000030 736d735b 7475625f 5f6e6f74     0...[sms_button_
10016984:	2d5d6e66 00000031 736d735b 7475625f     fn]-1...[sms_but
10016994:	5f6e6f74 69666564 735f656e 69767265     ton_define_servi
100169a4:	5d736563 72655309 65636976 65642073     ces].Services de
100169b4:	696e6966 6620676e 656c6961 72202c64     fining failed, r
100169c4:	6f736165 7830206e 00007825 626f7250     eason 0x%x..Prob
100169d4:	206d656c 6c696877 65732065 6e697474     lem while settin
100169e4:	70672067 70206f69 00006e69 736d735b     g gpio pin..[sms
100169f4:	756d695f 6e6f635f 75676966 675f6572     _imu_configure_g
10016a04:	5d6f6970 6f725009 6d656c62 69687720     pio].Problem whi
10016a14:	7320656c 69747465 7520676e 4d492070     le setting up IM
10016a24:	52442055 70205944 00006e69 6c6c6f50     U DRDY pin..Poll
10016a34:	2e676e69 00002e2e 736d735b 75706d5f     ing.....[sms_mpu
10016a44:	6665645f 5f656e69 76726573 73656369     _define_services
10016a54:	6553095d 63697672 64207365 6e696665     ].Services defin
10016a64:	20676e69 6c696166 202c6465 73616572     ing failed, reas
10016a74:	30206e6f 00782578 736d735b 6572705f     on 0x%x.[sms_pre
10016a84:	72757373 65645f65 656e6966 7265735f     ssure_define_ser
10016a94:	65636976 53095d73 69767265 20736563     vices].Services 
10016aa4:	69666564 676e696e 69616620 2c64656c     defining failed,
10016ab4:	61657220 206e6f73 78257830 00000000      reason 0x%x....
10016ac4:	736d735b 6175645f 6d69746c 5f317265     [sms_dualtimer1_
10016ad4:	005d6e66 736d735b 6175645f 6d69746c     fn].[sms_dualtim
10016ae4:	5f327265 005d6e66 1000b0d8 1000b0e6     er2_fn].........
10016af4:	1000b0f4 1000b102 1000b110 1000b11e     ................
10016b04:	1000b12c 1000b13c 1000b14c 1000b15c     ,...<...L...\...
10016b14:	1000b16c 1000b17c 1000b18c 1000b19c     l...|...........
10016b24:	1000b1ac 1000b1bc 1000b1cc 1000b1dc     ................
10016b34:	1000b1ec 1000b1fc 1000b20c 1000b21c     ................
10016b44:	1000b22c 1000b23c 1000b24c 1000b25c     ,...<...L...\...
10016b54:	1000b26c 1000b27c 1000b28a 1000b298     l...|...........
10016b64:	1000b2a6 1000b2b4 1000b2c2 1000b2d0     ................
10016b74:	1000b2de 1000b2ec 1000b2fc 1000b30c     ................
10016b84:	1000b31c 1000b32c 1000b33c 1000b34c     ....,...<...L...
10016b94:	1000b35c 1000b36c 1000b37c 1000b38c     \...l...|.......
10016ba4:	1000b39c 1000b3ac 1000b3bc 1000b3cc     ................
10016bb4:	1000b3dc 1000b3ec 1000b3fa 1000b408     ................
10016bc4:	1000b434 1000b442 1000b450 1000b45e     4...B...P...^...
10016bd4:	1000b46c 1000b47a 1000b488 1000b496     l...z...........
10016be4:	1000b4a4 1000b4b2 1000b4c0 1000b4ce     ................
10016bf4:	1000b4dc 1000b4ea 1000b4f8 1000b506     ................
10016c04:	1000b514 1000b522 1000b530 1000b53e     ...."...0...>...
10016c14:	1000b54c 1000b55a 1000b568 1000b576     L...Z...h...v...
10016c24:	1000b584 1000b592 1000b5a0 1000b5ae     ................
10016c34:	1000b5bc 1000b5ca 1000b5d8 1000b5e6     ................
10016c44:	1000b5f4 1000b602 1000b610 1000b61e     ................
10016c54:	1000b62c 1000b63a 1000b648 1000b656     ,...:...H...V...
10016c64:	1000b664 1000b672 1000b680 1000b68e     d...r...........
10016c74:	1000b69c 1000b6aa 1000b6b8 1000b6c6     ................
10016c84:	1000b6d4 1000b6e2 1000b6f0 1000b6fe     ................
10016c94:	1000b70c 1000b71a 1000b7b4 1000b7dc     ................
10016ca4:	1000b804 1000b82c 1000ba6c 1000b85c     ....,...l...\...
10016cb4:	1000b874 1000b8ec 1000b904 1000b88c     t...............
10016cc4:	1000b8a4 1000b8bc 1000b8d4 1000b91c     ................
10016cd4:	1000bbe0 1000bbe0 1000bbe0 1000bbe0     ................
10016ce4:	1000bbe0 1000bbe0 1000bbe0 1000bbe0     ................
10016cf4:	1000b9c4 1000b9dc 1000b9f4 1000ba82     ................
10016d04:	1000b94c 1000bbe0 1000bbe0 1000bbe0     L...............
10016d14:	1000bbe0 1000bbe0 1000bbe0 1000ba0c     ................
10016d24:	1000ba24 1000ba3c 1000ba54 1000bbe0     $...<...T.......
10016d34:	1000bb98 1000bbb0 1000bbe0 1000bbe0     ................
10016d44:	1000baae 1000bac4 1000bada 1000baf0     ................
10016d54:	1000bbe0 1000bbe0 1000bbe0 1000bbe0     ................
10016d64:	1000bbe0 1000bbe0 1000bbe0 1000bbe0     ................
10016d74:	1000b7a0 1000b7c8 1000b7f0 1000b818     ................
10016d84:	1000b844 1000b934 1000b964 1000b97c     D...4...d...|...
10016d94:	1000b994 1000b9ac 1000ba98 1000bb06     ................
10016da4:	1000bb80 1000bbc8 1000c230 1000c232     ........0...2...
10016db4:	1000c218 1000c218 1000c218 1000c230     ............0...
10016dc4:	1000c218 1000c218 1000ca76 1000caea     ........v.......
10016dd4:	1000ca5e 1000caf0 1000ca64 1000ca6a     ^.......d...j...
10016de4:	1000ca70 1000d110 1000d110 1000d110     p...............
10016df4:	1000d110 1000d110 1000d110 1000d110     ................
10016e04:	1000d110 1000d110 1000d110 1000d110     ................
10016e14:	1000d110 1000d110 1000d110 1000d110     ................
10016e24:	1000d110 1000d110 1000d110 1000d110     ................
10016e34:	1000d12e 1000d12e 1000d12e 1000d12e     ................
10016e44:	1000d12e 1000d12e 1000d12e 1000d12e     ................
10016e54:	1000d12e 1000d12e 1000d150 1000d150     ........P...P...
10016e64:	1000d150 1000d150 1000d150 1000d150     P...P...P...P...
10016e74:	1000d150 1000d150 1000d150 1000d150     P...P...P...P...
10016e84:	1000d172 1000d172 1000d172 1000d172     r...r...r...r...
10016e94:	1000d172 1000d172 1000d18c 1000d18c     r...r...........
10016ea4:	1000d18c 1000d18c 1000d18c 1000d18c     ................
10016eb4:	1000d18c 1000d18c 1000d18c 1000d1a6     ................
10016ec4:	1000d1a6 1000d1c8 1000d1c8 1000d1e2     ................
10016ed4:	1000d1c8 34333231 00003635 efcdab00     ....123456......
10016ee4:	00efcdab                                ....

10016ee8 <ble_mgr_gatt_server_handle>:
	...
10016f00:	1000c14d 1000c1b1 1000c151 00000000     M.......Q.......
10016f10:	6e616353 676e696e 61662020 64656c69     Scanning  failed
10016f20:	00000000 65766441 73697472 20676e69     ....Advertising 
10016f30:	6c696166 00006465 2055544d 6e616843     failed..MTU Chan
10016f40:	46206567 656c6961 43202c64 656e6e6f     ge Failed, Conne
10016f50:	6f697463 6148206e 656c646e 2c64253a     ction Handle:%d,
10016f60:	65704f20 69746172 253a6e6f 00000064      Operation:%d...
10016f70:	69766544 64206563 6f637369 63656e6e     Device disconnec
10016f80:	20646574 73616552 303a6e6f 32302578     ted Reason:0x%02
10016f90:	61482078 656c646e 2578303d 00000078     x Handle=0x%x...
10016fa0:	72636e45 69747079 66206e6f 656c6961     Encryption faile
10016fb0:	00000064 72636e45 69747079 63206e6f     d...Encryption c
10016fc0:	6c706d6f 64657465 63757320 73736563     ompleted success
10016fd0:	6c6c7566 00000079 20454c42 69766544     fully...BLE Devi
10016fe0:	6e206563 6620746f 646e756f 636e6520     ce not found enc
10016ff0:	74707972 206e6f69 6f666e69 00000000     ryption info....
10017000:	6f666e49 78616d3a 6d756d69 2e6f6e20     Info:maximum no.
10017010:	7320666f 206e6163 69766564 72206563     of scan device r
10017020:	68636165 2e2e6465 6f74532e 6e697070     eached...Stoppin
10017030:	63532067 00006e61 6c696146 74206465     g Scan..Failed t
10017040:	7473206f 7320706f 6e6e6163 00676e69     o stop scanning.
10017050:	72696150 20676e69 6c696166 2e2e6465     Pairing failed..
10017060:	7369442e 6e6e6f63 69746365 0000676e     .Disconnecting..
10017070:	63736944 656e6e6f 52207463 65757165     Disconnect Reque
10017080:	46207473 656c6961 00000064 72696150     st Failed...Pair
10017090:	20676e69 636f7270 72756465 6f632065     ing procedure co
100170a0:	656c706d 20646574 63637573 66737365     mpleted successf
100170b0:	796c6c75 00000000 20454c42 69766544     ully....BLE Devi
100170c0:	6e206563 6620746f 646e756f 206f7420     ce not found to 
100170d0:	726f7473 68742065 61702065 6e697269     store the pairin
100170e0:	6e692067 00006f66 72636e45 69747079     g info..Encrypti
100170f0:	4e206e6f 7320746f 74726174 00006465     on Not started..
10017100:	76616c53 65532065 69727563 52207974     Slave Security R
10017110:	2d207165 74754120 746e6568 74616369     eq - Authenticat
10017120:	206e6f69 6c696146 00006465 72696150     ion Failed..Pair
10017130:	71655220 74736575 41202d20 65687475      Request - Authe
10017140:	6369746e 6f697461 6146206e 64656c69     ntication Failed
10017150:	00000000 65746e45 68742072 61502065     ....Enter the Pa
10017160:	656b7373 2d362879 69676944 69202974     sskey(6-Digit) i
10017170:	6554206e 6e696d72 003a6c61 206e6950     n Terminal:.Pin 
10017180:	656d6954 0074756f 63736944 656e6e6f     Timeout.Disconne
10017190:	6e697463 2e2e2067 0000002e 61656c50     cting ......Plea
100171a0:	45206573 7265746e 65687420 6c6f6620     se Enter the fol
100171b0:	69776f6c 5020676e 2d737361 65646f63     lowing Pass-code
100171c0:	206e6f28 6568746f 65442072 65636976     (on other Device
100171d0:	00003a29 72696150 79656b2d 70657220     ):..Pair-key rep
100171e0:	6620796c 656c6961 00000064 20424f4f     ly failed...OOB 
100171f0:	74616546 20657275 20746f4e 70707573     Feature Not supp
10017200:	6574726f 00000064 65746e45 20646572     orted...Entered 
10017210:	73736150 646f632d 00003a65 72696150     Pass-code:..Pair
10017220:	20676e69 6f666e69 74616d72 206e6f69     ing information 
10017230:	7020666f 20726565 69766564 69206563     of peer device i
10017240:	6f6e2073 76612074 616c6961 2e656c62     s not available.
10017250:	00000000 61656c50 75206573 6961706e     ....Please unpai
10017260:	68742072 65642065 65636976 6f726620     r the device fro
10017270:	6570206d 64207265 63697665 6f6d2865     m peer device(mo
10017280:	656c6962 65732029 6e697474 6d207367     bile) settings m
10017290:	20756e65 20646e61 72617473 61702074     enu and start pa
100172a0:	6e697269 67612067 006e6961 72636e45     iring again.Encr
100172b0:	69747079 52206e6f 65757165 52207473     yption Request R
100172c0:	796c7065 69614620 0064656c 656c625b     eply Failed.[ble
100172d0:	696e695f 09095d74 424d4153 49203131     _init]..SAMB11 I
100172e0:	6974696e 7a696c61 6f697461 6166206e     nitialization fa
100172f0:	64656c69 00000000 656c625b 696e695f     iled....[ble_ini
10017300:	09095d74 61656c50 63206573 6b636568     t]..Please check
10017310:	65687420 776f7020 61207265 6320646e      the power and c
10017320:	656e6e6f 6f697463 202f206e 64726168     onnection / hard
10017330:	65726177 6e6f6320 7463656e 0000726f     ware connector..
10017340:	52424153 4d532d65 00000053 69766544     SABRe-SMS...Devi
10017350:	6e206563 20656d61 20746573 6c696166     ce name set fail
10017360:	00006465 656c625b 7465735f 7665645f     ed..[ble_set_dev
10017370:	6e6f635f 5d676966 44420909 64646120     _config]..BD add
10017380:	73736572 74656720 69616620 0064656c     ress get failed.
10017390:	656c625b 7465735f 7665645f 6e6f635f     [ble_set_dev_con
100173a0:	5d676966 74655309 454c4220 76654420     fig].Set BLE Dev
100173b0:	20656369 666e6f63 72756769 6f697461     ice configuratio
100173c0:	6166206e 64656c69 00000000 656c625b     n failed....[ble
100173d0:	7465735f 7665645f 6e6f635f 5d676966     _set_dev_config]
100173e0:	74655309 454c4220 76654420 20656369     .Set BLE Device 
100173f0:	72646441 20737365 6c696166 00006465     Address failed..
10017400:	6e616353 676e696e 502e2e2e 7361656c     Scanning...Pleas
10017410:	61772065 2e2e7469 0000002e 76616c53     e wait......Slav
10017420:	65732065 69727563 72207974 65757165     e security reque
10017430:	66207473 656c6961 00000064 6e6e6f43     st failed...Conn
10017440:	65746365 6f742064 65657020 65642072     ected to peer de
10017450:	65636976 74697720 64612068 73657264     vice with addres
10017460:	78302073 78323025 78323025 78323025     s 0x%02x%02x%02x
10017470:	78323025 78323025 78323025 00000000     %02x%02x%02x....
10017480:	6e6e6f43 69746365 48206e6f 6c646e61     Connection Handl
10017490:	64252065 00000000 6f736552 6e69766c     e %d....Resolvin
100174a0:	61522067 6d6f646e 64646120 73736572     g Random address
100174b0:	69616620 2a64656c 0000002a 2078614d      failed**...Max 
100174c0:	626d756e 6f207265 6f632066 63656e6e     number of connec
100174d0:	6e6f6974 61657220 64656863 6425203a     tion reached: %d
100174e0:	3d3d3d20 7369443e 6e6e6f63 69746365      ===>Disconnecti
100174f0:	2e2e676e 0000002e 69766544 43206563     ng......Device C
10017500:	656e6e6f 6f697463 6146206e 64656c69     onnection Failed
10017510:	53202d20 75746174 25203a73 00000064      - Status: %d...
10017520:	5a2d571c 00002dbe 20454c42 65766441     .W-Z.-..BLE Adve
10017530:	73697472 6e656d65 61642074 73206174     rtisement data s
10017540:	66207465 656c6961 00000064              et failed...

1001754c <ble_mgr_gap_handle>:
1001754c:	1000c149 1000c32d 1000c161 1000c189     I...-...a.......
1001755c:	00000000 1000cdd9 1000c1e1 1000c15d     ............]...
1001756c:	1000c4cd 1000c3ad 1000c6cd 1000c4e5     ................
1001757c:	1000c81d 1000c961 1000c269 1000d015     ....a...i.......
	...
10017598:	2055504d 20746f6e 65726568 002e2e2e     MPU not here....
100175a8:	2055504d 696c6163 74617262 2e2e6465     MPU calibrated..
100175b8:	6962202e 76207361 65756c61 25203a73     . bias values: %
100175c8:	2520646c 2520646c 2f20646c 646c2520     ld %ld %ld / %ld
100175d8:	646c2520 646c2520 00000000 706d6f43      %ld %ld....Comp
100175e8:	20737361 20746f6e 65726568 002e2e2e     ass not here....
100175f8:	306e7442 746e6920 202e2e2e 00000000     Btn0 int... ....
10017608:	316e7442 746e6920 202e2e2e 00000000     Btn1 int... ....
10017618:	2055504d 20746e69 29642528 202e2e2e     MPU int (%d)... 
10017628:	00000000 656d6954 69203172 2e2e746e     ....Timer1 int..
10017638:	0000202e 656d6954 69203272 2e2e746e     . ..Timer2 int..
10017648:	0000202e 2055504d 646e6573 20676e69     . ..MPU sending 
10017658:	2f642528 2e296425 00202e2e 73756c66     (%d/%d)... .flus
10017668:	676e6968 00000021 73657250 65732073     hing!...Press se
10017678:	6e69646e 25282067 64252f64 2e2e2e29     nding (%d/%d)...
10017688:	00000020 20504147 656d6974 0074756f      ...GAP timeout.
10017698:	6e657645 65672074 69742074 756f656d     Event get timeou
100176a8:	00000074 20454c42 6f727265 636f2072     t...BLE error oc
100176b8:	72727563 41006465 6c656d74 726f4320     curred.Atmel Cor
100176c8:	04022e70                                         p.

100176ca <CSWTCH.45>:
100176ca:	00100402                                         ...

100176cd <CSWTCH.47>:
100176cd:	03010300 03030303 03030303 02020303              ...............

100176dc <client_conf_uuid>:
100176dc:	29042902                                         .)

100176de <presentation_format_uuid>:
100176de:	29012904                                         .)

100176e0 <user_desc_uuid>:
100176e0:	29032901                                         .)

100176e2 <server_conf_uuid>:
100176e2:	29002903                                         .)

100176e4 <extended_props_uuid>:
100176e4:	28022900                                         .)

100176e6 <include_uuid>:
100176e6:	28032802                                         .(

100176e8 <char_uuid>:
100176e8:	00002803 00776f70                       .(..pow.

100176f0 <TWO52>:
100176f0:	00000000 43300000 00000000 c3300000     ......0C......0.
10017700:	10012e92 10012db6 10012e74 10012e4c     .....-..t...L...
10017710:	10012e74 10012e40 10012e74 10012e4c     t...@...t...L...
10017720:	10012db6 10012db6 10012e40 10012e4c     .-...-..@...L...
10017730:	10012ef8 10012ef8 10012ef8 10012e7a     ............z...
10017740:	10012db6 10012db6 10012e60 10012e4a     .-...-..`...J...
10017750:	10012e60 10012e40 10012e60 10012e4a     `...@...`...J...
10017760:	10012db6 10012db6 10012e40 10012e4a     .-...-..@...J...
10017770:	10012ef8 10012ef8 10012ef8 10012f04     ............./..
10017780:	100131f0 1001314e 1001314e 1001314c     .1..N1..N1..L1..
10017790:	100131e2 100131e2 100131d8 1001314c     .1...1...1..L1..
100177a0:	100131e2 100131d8 100131e2 1001314c     .1...1...1..L1..
100177b0:	100131e8 100131e8 100131e8 10013272     .1...1...1..r2..
100177c0:	10013fa0 10013e6e 10013f74 10013e64     .?..n>..t?..d>..
100177d0:	10013f74 10013f7e 10013f74 10013e64     t?..~?..t?..d>..
100177e0:	10013e6e 10013e6e 10013f7e 10013e64     n>..n>..~?..d>..
100177f0:	10013e5a 10013e5a 10013e5a 100141d0     Z>..Z>..Z>...A..
10017800:	100147e8 100146a8 100146a8 100146a6     .G...F...F...F..
10017810:	100147c0 100147c0 100147b2 100146a6     .G...G...G...F..
10017820:	100147c0 100147b2 100147c0 100146a6     .G...G...G...F..
10017830:	100147c8 100147c8 100147c8 100149c8     .G...G...G...I..
10017840:	00000043                                C...

10017844 <_global_impure_ptr>:
10017844:	10017908                                .y..

10017848 <__sf_fake_stdin>:
	...

10017868 <__sf_fake_stdout>:
	...

10017888 <__sf_fake_stderr>:
	...
100178a8:	2b302d23 6c680020 6665004c 47464567     #-0+ .hlL.efgEFG
100178b8:	32313000 36353433 41393837 45444342     .0123456789ABCDE
100178c8:	31300046 35343332 39383736 64636261     F.0123456789abcd
100178d8:	00006665                                ef..

100178dc <_init>:
100178dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100178de:	46c0      	nop			; (mov r8, r8)
100178e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100178e2:	bc08      	pop	{r3}
100178e4:	469e      	mov	lr, r3
100178e6:	4770      	bx	lr

100178e8 <__init_array_start>:
100178e8:	100080b1 	.word	0x100080b1

100178ec <_fini>:
100178ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
100178ee:	46c0      	nop			; (mov r8, r8)
100178f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
100178f2:	bc08      	pop	{r3}
100178f4:	469e      	mov	lr, r3
100178f6:	4770      	bx	lr

100178f8 <__fini_array_start>:
100178f8:	10008089 	.word	0x10008089
